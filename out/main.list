
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009110  08016860  08016860  00026860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f970  0801f970  0002f970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f978  0801f978  0002f978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f97c  0801f97c  0002f97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801f980  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000650  20000070  0801f9f0  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  200006c0  0801f9f0  000306c0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a6b1  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a4f  00000000  00000000  0005a749  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001a86e  00000000  00000000  0005c198  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000170  00000000  00000000  00076a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003b18  00000000  00000000  00076b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007289  00000000  00000000  0007a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c2e1  00000000  00000000  00081917  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  0008dbf8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043c4  00000000  00000000  0008dc78  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0009203c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  000920c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08016844 	.word	0x08016844

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08016844 	.word	0x08016844

08000104 <acc_probes_execute>:
 8000104:	230c      	movs	r3, #12
 8000106:	b510      	push	{r4, lr}
 8000108:	7804      	ldrb	r4, [r0, #0]
 800010a:	435c      	muls	r4, r3
 800010c:	4b03      	ldr	r3, [pc, #12]	; (800011c <acc_probes_execute+0x18>)
 800010e:	191b      	adds	r3, r3, r4
 8000110:	685c      	ldr	r4, [r3, #4]
 8000112:	2c00      	cmp	r4, #0
 8000114:	d001      	beq.n	800011a <acc_probes_execute+0x16>
 8000116:	689b      	ldr	r3, [r3, #8]
 8000118:	47a0      	blx	r4
 800011a:	bd10      	pop	{r4, pc}
 800011c:	08018424 	.word	0x08018424

08000120 <acc_probes_execute_primitive_probe>:
 8000120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000122:	9102      	str	r1, [sp, #8]
 8000124:	2100      	movs	r1, #0
 8000126:	ab01      	add	r3, sp, #4
 8000128:	7018      	strb	r0, [r3, #0]
 800012a:	000a      	movs	r2, r1
 800012c:	0018      	movs	r0, r3
 800012e:	9103      	str	r1, [sp, #12]
 8000130:	f7ff ffe8 	bl	8000104 <acc_probes_execute>
 8000134:	b005      	add	sp, #20
 8000136:	bd00      	pop	{pc}

08000138 <acc_probes_execute_uint16>:
 8000138:	b530      	push	{r4, r5, lr}
 800013a:	000c      	movs	r4, r1
 800013c:	0011      	movs	r1, r2
 800013e:	2201      	movs	r2, #1
 8000140:	0005      	movs	r5, r0
 8000142:	b085      	sub	sp, #20
 8000144:	a801      	add	r0, sp, #4
 8000146:	6082      	str	r2, [r0, #8]
 8000148:	005a      	lsls	r2, r3, #1
 800014a:	7005      	strb	r5, [r0, #0]
 800014c:	6044      	str	r4, [r0, #4]
 800014e:	f7ff ffd9 	bl	8000104 <acc_probes_execute>
 8000152:	b005      	add	sp, #20
 8000154:	bd30      	pop	{r4, r5, pc}

08000156 <validate.lto_priv.82>:
 8000156:	6983      	ldr	r3, [r0, #24]
 8000158:	b510      	push	{r4, lr}
 800015a:	0004      	movs	r4, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d00a      	beq.n	8000176 <validate.lto_priv.82+0x20>
 8000160:	4b12      	ldr	r3, [pc, #72]	; (80001ac <validate.lto_priv.82+0x56>)
 8000162:	001a      	movs	r2, r3
 8000164:	3230      	adds	r2, #48	; 0x30
 8000166:	7812      	ldrb	r2, [r2, #0]
 8000168:	2a00      	cmp	r2, #0
 800016a:	d004      	beq.n	8000176 <validate.lto_priv.82+0x20>
 800016c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800016e:	4a10      	ldr	r2, [pc, #64]	; (80001b0 <validate.lto_priv.82+0x5a>)
 8000170:	4910      	ldr	r1, [pc, #64]	; (80001b4 <validate.lto_priv.82+0x5e>)
 8000172:	2001      	movs	r0, #1
 8000174:	4798      	blx	r3
 8000176:	69e3      	ldr	r3, [r4, #28]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d00a      	beq.n	8000192 <validate.lto_priv.82+0x3c>
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <validate.lto_priv.82+0x56>)
 800017e:	001a      	movs	r2, r3
 8000180:	3230      	adds	r2, #48	; 0x30
 8000182:	7812      	ldrb	r2, [r2, #0]
 8000184:	2a00      	cmp	r2, #0
 8000186:	d004      	beq.n	8000192 <validate.lto_priv.82+0x3c>
 8000188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <validate.lto_priv.82+0x62>)
 800018c:	4909      	ldr	r1, [pc, #36]	; (80001b4 <validate.lto_priv.82+0x5e>)
 800018e:	2001      	movs	r0, #1
 8000190:	4798      	blx	r3
 8000192:	6963      	ldr	r3, [r4, #20]
 8000194:	2001      	movs	r0, #1
 8000196:	2b00      	cmp	r3, #0
 8000198:	d006      	beq.n	80001a8 <validate.lto_priv.82+0x52>
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <validate.lto_priv.82+0x56>)
 800019c:	2000      	movs	r0, #0
 800019e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <validate.lto_priv.82+0x66>)
 80001a2:	4904      	ldr	r1, [pc, #16]	; (80001b4 <validate.lto_priv.82+0x5e>)
 80001a4:	4798      	blx	r3
 80001a6:	2000      	movs	r0, #0
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	200005d0 	.word	0x200005d0
 80001b0:	0801cbfc 	.word	0x0801cbfc
 80001b4:	0801cc0d 	.word	0x0801cc0d
 80001b8:	0801cc23 	.word	0x0801cc23
 80001bc:	0801cc32 	.word	0x0801cc32

080001c0 <filter_no_operation>:
 80001c0:	4770      	bx	lr

080001c2 <reset.lto_priv.93>:
 80001c2:	4770      	bx	lr

080001c4 <consume>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	0004      	movs	r4, r0
 80001c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80001ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80001cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80001ce:	6900      	ldr	r0, [r0, #16]
 80001d0:	4798      	blx	r3
 80001d2:	2200      	movs	r2, #0
 80001d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80001d6:	615a      	str	r2, [r3, #20]
 80001d8:	bd10      	pop	{r4, pc}

080001da <validate.lto_priv.81>:
 80001da:	6942      	ldr	r2, [r0, #20]
 80001dc:	6903      	ldr	r3, [r0, #16]
 80001de:	b510      	push	{r4, lr}
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d107      	bne.n	80001f4 <validate.lto_priv.81+0x1a>
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <validate.lto_priv.81+0x52>)
 80001e6:	2000      	movs	r0, #0
 80001e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ea:	4a11      	ldr	r2, [pc, #68]	; (8000230 <validate.lto_priv.81+0x56>)
 80001ec:	4911      	ldr	r1, [pc, #68]	; (8000234 <validate.lto_priv.81+0x5a>)
 80001ee:	4798      	blx	r3
 80001f0:	2000      	movs	r0, #0
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	6984      	ldr	r4, [r0, #24]
 80001f6:	2c00      	cmp	r4, #0
 80001f8:	d007      	beq.n	800020a <validate.lto_priv.81+0x30>
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <validate.lto_priv.81+0x52>)
 80001fc:	2000      	movs	r0, #0
 80001fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <validate.lto_priv.81+0x5e>)
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <validate.lto_priv.81+0x5a>)
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	e7f3      	b.n	80001f2 <validate.lto_priv.81+0x18>
 800020a:	69c3      	ldr	r3, [r0, #28]
 800020c:	3304      	adds	r3, #4
 800020e:	429a      	cmp	r2, r3
 8000210:	d007      	beq.n	8000222 <validate.lto_priv.81+0x48>
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <validate.lto_priv.81+0x52>)
 8000214:	0020      	movs	r0, r4
 8000216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <validate.lto_priv.81+0x62>)
 800021a:	4906      	ldr	r1, [pc, #24]	; (8000234 <validate.lto_priv.81+0x5a>)
 800021c:	4798      	blx	r3
 800021e:	0020      	movs	r0, r4
 8000220:	e7e7      	b.n	80001f2 <validate.lto_priv.81+0x18>
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6883      	ldr	r3, [r0, #8]
 8000226:	4798      	blx	r3
 8000228:	e7e3      	b.n	80001f2 <validate.lto_priv.81+0x18>
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	200005d0 	.word	0x200005d0
 8000230:	0801cc59 	.word	0x0801cc59
 8000234:	0801cc85 	.word	0x0801cc85
 8000238:	0801cca9 	.word	0x0801cca9
 800023c:	0801ccc9 	.word	0x0801ccc9

08000240 <reset.lto_priv.92>:
 8000240:	2301      	movs	r3, #1
 8000242:	b510      	push	{r4, lr}
 8000244:	69c2      	ldr	r2, [r0, #28]
 8000246:	6800      	ldr	r0, [r0, #0]
 8000248:	7013      	strb	r3, [r2, #0]
 800024a:	68c3      	ldr	r3, [r0, #12]
 800024c:	4798      	blx	r3
 800024e:	bd10      	pop	{r4, pc}

08000250 <filter_q3_12_complex.lto_priv.109>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	46c6      	mov	lr, r8
 8000254:	000f      	movs	r7, r1
 8000256:	218b      	movs	r1, #139	; 0x8b
 8000258:	b500      	push	{lr}
 800025a:	05c9      	lsls	r1, r1, #23
 800025c:	0006      	movs	r6, r0
 800025e:	1c18      	adds	r0, r3, #0
 8000260:	1c1c      	adds	r4, r3, #0
 8000262:	0895      	lsrs	r5, r2, #2
 8000264:	f010 fb56 	bl	8010914 <__aeabi_fmul>
 8000268:	2100      	movs	r1, #0
 800026a:	4680      	mov	r8, r0
 800026c:	1c20      	adds	r0, r4, #0
 800026e:	f011 f867 	bl	8011340 <__aeabi_fcmpge>
 8000272:	2800      	cmp	r0, #0
 8000274:	d10f      	bne.n	8000296 <filter_q3_12_complex.lto_priv.109+0x46>
 8000276:	21bf      	movs	r1, #191	; 0xbf
 8000278:	0609      	lsls	r1, r1, #24
 800027a:	4640      	mov	r0, r8
 800027c:	f010 f89e 	bl	80103bc <__aeabi_fadd>
 8000280:	f011 fa3e 	bl	8011700 <__aeabi_f2iz>
 8000284:	b204      	sxth	r4, r0
 8000286:	0030      	movs	r0, r6
 8000288:	00aa      	lsls	r2, r5, #2
 800028a:	18ba      	adds	r2, r7, r2
 800028c:	42ba      	cmp	r2, r7
 800028e:	d105      	bne.n	800029c <filter_q3_12_complex.lto_priv.109+0x4c>
 8000290:	bc04      	pop	{r2}
 8000292:	4690      	mov	r8, r2
 8000294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000296:	21fc      	movs	r1, #252	; 0xfc
 8000298:	0589      	lsls	r1, r1, #22
 800029a:	e7ee      	b.n	800027a <filter_q3_12_complex.lto_priv.109+0x2a>
 800029c:	2300      	movs	r3, #0
 800029e:	5efe      	ldrsh	r6, [r7, r3]
 80002a0:	2300      	movs	r3, #0
 80002a2:	5ec5      	ldrsh	r5, [r0, r3]
 80002a4:	1bad      	subs	r5, r5, r6
 80002a6:	4365      	muls	r5, r4
 80002a8:	17eb      	asrs	r3, r5, #31
 80002aa:	051b      	lsls	r3, r3, #20
 80002ac:	0d1b      	lsrs	r3, r3, #20
 80002ae:	195b      	adds	r3, r3, r5
 80002b0:	131b      	asrs	r3, r3, #12
 80002b2:	199b      	adds	r3, r3, r6
 80002b4:	803b      	strh	r3, [r7, #0]
 80002b6:	2302      	movs	r3, #2
 80002b8:	5ec5      	ldrsh	r5, [r0, r3]
 80002ba:	2302      	movs	r3, #2
 80002bc:	5efe      	ldrsh	r6, [r7, r3]
 80002be:	3004      	adds	r0, #4
 80002c0:	1bad      	subs	r5, r5, r6
 80002c2:	4365      	muls	r5, r4
 80002c4:	17eb      	asrs	r3, r5, #31
 80002c6:	051b      	lsls	r3, r3, #20
 80002c8:	0d1b      	lsrs	r3, r3, #20
 80002ca:	195b      	adds	r3, r3, r5
 80002cc:	131b      	asrs	r3, r3, #12
 80002ce:	199b      	adds	r3, r3, r6
 80002d0:	807b      	strh	r3, [r7, #2]
 80002d2:	3704      	adds	r7, #4
 80002d4:	e7da      	b.n	800028c <filter_q3_12_complex.lto_priv.109+0x3c>

080002d6 <validate.lto_priv.80>:
 80002d6:	6983      	ldr	r3, [r0, #24]
 80002d8:	b510      	push	{r4, lr}
 80002da:	0004      	movs	r4, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00a      	beq.n	80002f6 <validate.lto_priv.80+0x20>
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <validate.lto_priv.80+0x46>)
 80002e2:	001a      	movs	r2, r3
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	d004      	beq.n	80002f6 <validate.lto_priv.80+0x20>
 80002ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <validate.lto_priv.80+0x4a>)
 80002f0:	490c      	ldr	r1, [pc, #48]	; (8000324 <validate.lto_priv.80+0x4e>)
 80002f2:	2001      	movs	r0, #1
 80002f4:	4798      	blx	r3
 80002f6:	69e3      	ldr	r3, [r4, #28]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00a      	beq.n	8000312 <validate.lto_priv.80+0x3c>
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <validate.lto_priv.80+0x46>)
 80002fe:	001a      	movs	r2, r3
 8000300:	3230      	adds	r2, #48	; 0x30
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	2a00      	cmp	r2, #0
 8000306:	d004      	beq.n	8000312 <validate.lto_priv.80+0x3c>
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <validate.lto_priv.80+0x52>)
 800030c:	4905      	ldr	r1, [pc, #20]	; (8000324 <validate.lto_priv.80+0x4e>)
 800030e:	2001      	movs	r0, #1
 8000310:	4798      	blx	r3
 8000312:	6820      	ldr	r0, [r4, #0]
 8000314:	6883      	ldr	r3, [r0, #8]
 8000316:	4798      	blx	r3
 8000318:	bd10      	pop	{r4, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	200005d0 	.word	0x200005d0
 8000320:	0801cbfc 	.word	0x0801cbfc
 8000324:	0801ccf0 	.word	0x0801ccf0
 8000328:	0801cc23 	.word	0x0801cc23

0800032c <event.lto_priv.106>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	0004      	movs	r4, r0
 8000330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000332:	6945      	ldr	r5, [r0, #20]
 8000334:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	6900      	ldr	r0, [r0, #16]
 800033a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800033c:	4798      	blx	r3
 800033e:	7028      	strb	r0, [r5, #0]
 8000340:	6820      	ldr	r0, [r4, #0]
 8000342:	6843      	ldr	r3, [r0, #4]
 8000344:	4798      	blx	r3
 8000346:	bd70      	pop	{r4, r5, r6, pc}

08000348 <saturation_check_i16>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	0005      	movs	r5, r0
 800034c:	000c      	movs	r4, r1
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <saturation_check_i16+0x54>)
 8000350:	1c11      	adds	r1, r2, #0
 8000352:	f010 fc11 	bl	8010b78 <__aeabi_fsub>
 8000356:	4911      	ldr	r1, [pc, #68]	; (800039c <saturation_check_i16+0x54>)
 8000358:	f010 f9ca 	bl	80106f0 <__aeabi_fdiv>
 800035c:	21c7      	movs	r1, #199	; 0xc7
 800035e:	0609      	lsls	r1, r1, #24
 8000360:	1c07      	adds	r7, r0, #0
 8000362:	f010 fad7 	bl	8010914 <__aeabi_fmul>
 8000366:	f011 f9cb 	bl	8011700 <__aeabi_f2iz>
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <saturation_check_i16+0x58>)
 800036c:	b206      	sxth	r6, r0
 800036e:	1c38      	adds	r0, r7, #0
 8000370:	f010 fad0 	bl	8010914 <__aeabi_fmul>
 8000374:	f011 f9c4 	bl	8011700 <__aeabi_f2iz>
 8000378:	0864      	lsrs	r4, r4, #1
 800037a:	0064      	lsls	r4, r4, #1
 800037c:	b200      	sxth	r0, r0
 800037e:	192c      	adds	r4, r5, r4
 8000380:	42a5      	cmp	r5, r4
 8000382:	d101      	bne.n	8000388 <saturation_check_i16+0x40>
 8000384:	2000      	movs	r0, #0
 8000386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000388:	2300      	movs	r3, #0
 800038a:	5eea      	ldrsh	r2, [r5, r3]
 800038c:	4290      	cmp	r0, r2
 800038e:	dd02      	ble.n	8000396 <saturation_check_i16+0x4e>
 8000390:	3502      	adds	r5, #2
 8000392:	4296      	cmp	r6, r2
 8000394:	dbf4      	blt.n	8000380 <saturation_check_i16+0x38>
 8000396:	2001      	movs	r0, #1
 8000398:	e7f5      	b.n	8000386 <saturation_check_i16+0x3e>
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	42c80000 	.word	0x42c80000
 80003a0:	46fffe00 	.word	0x46fffe00

080003a4 <validate.lto_priv.79>:
 80003a4:	6903      	ldr	r3, [r0, #16]
 80003a6:	6942      	ldr	r2, [r0, #20]
 80003a8:	b510      	push	{r4, lr}
 80003aa:	0004      	movs	r4, r0
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d007      	beq.n	80003c0 <validate.lto_priv.79+0x1c>
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <validate.lto_priv.79+0x5c>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <validate.lto_priv.79+0x60>)
 80003b8:	4913      	ldr	r1, [pc, #76]	; (8000408 <validate.lto_priv.79+0x64>)
 80003ba:	4798      	blx	r3
 80003bc:	2000      	movs	r0, #0
 80003be:	bd10      	pop	{r4, pc}
 80003c0:	6983      	ldr	r3, [r0, #24]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <validate.lto_priv.79+0x38>
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <validate.lto_priv.79+0x5c>)
 80003c8:	001a      	movs	r2, r3
 80003ca:	3230      	adds	r2, #48	; 0x30
 80003cc:	7812      	ldrb	r2, [r2, #0]
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d004      	beq.n	80003dc <validate.lto_priv.79+0x38>
 80003d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <validate.lto_priv.79+0x68>)
 80003d6:	490c      	ldr	r1, [pc, #48]	; (8000408 <validate.lto_priv.79+0x64>)
 80003d8:	2001      	movs	r0, #1
 80003da:	4798      	blx	r3
 80003dc:	69e3      	ldr	r3, [r4, #28]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <validate.lto_priv.79+0x54>
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <validate.lto_priv.79+0x5c>)
 80003e4:	001a      	movs	r2, r3
 80003e6:	3230      	adds	r2, #48	; 0x30
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d004      	beq.n	80003f8 <validate.lto_priv.79+0x54>
 80003ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <validate.lto_priv.79+0x6c>)
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <validate.lto_priv.79+0x64>)
 80003f4:	2001      	movs	r0, #1
 80003f6:	4798      	blx	r3
 80003f8:	6820      	ldr	r0, [r4, #0]
 80003fa:	6883      	ldr	r3, [r0, #8]
 80003fc:	4798      	blx	r3
 80003fe:	e7de      	b.n	80003be <validate.lto_priv.79+0x1a>
 8000400:	200005d0 	.word	0x200005d0
 8000404:	0801cd09 	.word	0x0801cd09
 8000408:	0801cd31 	.word	0x0801cd31
 800040c:	0801cbfc 	.word	0x0801cbfc
 8000410:	0801cc23 	.word	0x0801cc23

08000414 <event.lto_priv.105>:
 8000414:	b510      	push	{r4, lr}
 8000416:	0004      	movs	r4, r0
 8000418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800041a:	4798      	blx	r3
 800041c:	6820      	ldr	r0, [r4, #0]
 800041e:	6843      	ldr	r3, [r0, #4]
 8000420:	4798      	blx	r3
 8000422:	bd10      	pop	{r4, pc}

08000424 <validate.lto_priv.78>:
 8000424:	6983      	ldr	r3, [r0, #24]
 8000426:	b510      	push	{r4, lr}
 8000428:	0004      	movs	r4, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00a      	beq.n	8000444 <validate.lto_priv.78+0x20>
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <validate.lto_priv.78+0x44>)
 8000430:	001a      	movs	r2, r3
 8000432:	3230      	adds	r2, #48	; 0x30
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	2a00      	cmp	r2, #0
 8000438:	d004      	beq.n	8000444 <validate.lto_priv.78+0x20>
 800043a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <validate.lto_priv.78+0x48>)
 800043e:	490c      	ldr	r1, [pc, #48]	; (8000470 <validate.lto_priv.78+0x4c>)
 8000440:	2001      	movs	r0, #1
 8000442:	4798      	blx	r3
 8000444:	69e3      	ldr	r3, [r4, #28]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00a      	beq.n	8000460 <validate.lto_priv.78+0x3c>
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <validate.lto_priv.78+0x44>)
 800044c:	001a      	movs	r2, r3
 800044e:	3230      	adds	r2, #48	; 0x30
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	2a00      	cmp	r2, #0
 8000454:	d004      	beq.n	8000460 <validate.lto_priv.78+0x3c>
 8000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <validate.lto_priv.78+0x50>)
 800045a:	4905      	ldr	r1, [pc, #20]	; (8000470 <validate.lto_priv.78+0x4c>)
 800045c:	2001      	movs	r0, #1
 800045e:	4798      	blx	r3
 8000460:	6820      	ldr	r0, [r4, #0]
 8000462:	6883      	ldr	r3, [r0, #8]
 8000464:	4798      	blx	r3
 8000466:	bd10      	pop	{r4, pc}
 8000468:	200005d0 	.word	0x200005d0
 800046c:	0801cbfc 	.word	0x0801cbfc
 8000470:	0801cd4c 	.word	0x0801cd4c
 8000474:	0801cc23 	.word	0x0801cc23

08000478 <event.lto_priv.104>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	0004      	movs	r4, r0
 800047c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800047e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000480:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8000482:	6809      	ldr	r1, [r1, #0]
 8000484:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000486:	6900      	ldr	r0, [r0, #16]
 8000488:	47a8      	blx	r5
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	6843      	ldr	r3, [r0, #4]
 800048e:	4798      	blx	r3
 8000490:	bd70      	pop	{r4, r5, r6, pc}

08000492 <noise_level_normalization_u16>:
 8000492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000494:	464f      	mov	r7, r9
 8000496:	4646      	mov	r6, r8
 8000498:	46d6      	mov	lr, sl
 800049a:	b5c0      	push	{r6, r7, lr}
 800049c:	001f      	movs	r7, r3
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <noise_level_normalization_u16+0x62>)
 80004a0:	0016      	movs	r6, r2
 80004a2:	4698      	mov	r8, r3
 80004a4:	2301      	movs	r3, #1
 80004a6:	425b      	negs	r3, r3
 80004a8:	4699      	mov	r9, r3
 80004aa:	2300      	movs	r3, #0
 80004ac:	0004      	movs	r4, r0
 80004ae:	469a      	mov	sl, r3
 80004b0:	084d      	lsrs	r5, r1, #1
 80004b2:	006d      	lsls	r5, r5, #1
 80004b4:	1945      	adds	r5, r0, r5
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	d104      	bne.n	80004c4 <noise_level_normalization_u16+0x32>
 80004ba:	bc1c      	pop	{r2, r3, r4}
 80004bc:	4690      	mov	r8, r2
 80004be:	4699      	mov	r9, r3
 80004c0:	46a2      	mov	sl, r4
 80004c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <noise_level_normalization_u16+0x66>)
 80004c6:	8820      	ldrh	r0, [r4, #0]
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	4378      	muls	r0, r7
 80004ce:	0031      	movs	r1, r6
 80004d0:	f010 fddc 	bl	801108c <__divsi3>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	18c0      	adds	r0, r0, r3
 80004da:	d503      	bpl.n	80004e4 <noise_level_normalization_u16+0x52>
 80004dc:	4653      	mov	r3, sl
 80004de:	8023      	strh	r3, [r4, #0]
 80004e0:	3402      	adds	r4, #2
 80004e2:	e7e8      	b.n	80004b6 <noise_level_normalization_u16+0x24>
 80004e4:	4540      	cmp	r0, r8
 80004e6:	dd02      	ble.n	80004ee <noise_level_normalization_u16+0x5c>
 80004e8:	464b      	mov	r3, r9
 80004ea:	8023      	strh	r3, [r4, #0]
 80004ec:	e7f8      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004ee:	8020      	strh	r0, [r4, #0]
 80004f0:	e7f6      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	0000ffff 	.word	0x0000ffff
 80004f8:	ffff8000 	.word	0xffff8000

080004fc <validate.lto_priv.77>:
 80004fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <validate.lto_priv.77+0x94>)
 8000500:	b510      	push	{r4, lr}
 8000502:	0004      	movs	r4, r0
 8000504:	4293      	cmp	r3, r2
 8000506:	d10b      	bne.n	8000520 <validate.lto_priv.77+0x24>
 8000508:	6903      	ldr	r3, [r0, #16]
 800050a:	6942      	ldr	r2, [r0, #20]
 800050c:	4293      	cmp	r3, r2
 800050e:	d01e      	beq.n	800054e <validate.lto_priv.77+0x52>
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <validate.lto_priv.77+0x98>)
 8000512:	2000      	movs	r0, #0
 8000514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000516:	4a20      	ldr	r2, [pc, #128]	; (8000598 <validate.lto_priv.77+0x9c>)
 8000518:	4920      	ldr	r1, [pc, #128]	; (800059c <validate.lto_priv.77+0xa0>)
 800051a:	4798      	blx	r3
 800051c:	2000      	movs	r0, #0
 800051e:	bd10      	pop	{r4, pc}
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <validate.lto_priv.77+0xa4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <validate.lto_priv.77+0x42>
 8000526:	6903      	ldr	r3, [r0, #16]
 8000528:	6942      	ldr	r2, [r0, #20]
 800052a:	4293      	cmp	r3, r2
 800052c:	d10f      	bne.n	800054e <validate.lto_priv.77+0x52>
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <validate.lto_priv.77+0x98>)
 8000530:	2000      	movs	r0, #0
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <validate.lto_priv.77+0xa8>)
 8000536:	4919      	ldr	r1, [pc, #100]	; (800059c <validate.lto_priv.77+0xa0>)
 8000538:	4798      	blx	r3
 800053a:	2000      	movs	r0, #0
 800053c:	e7ef      	b.n	800051e <validate.lto_priv.77+0x22>
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <validate.lto_priv.77+0x98>)
 8000540:	2000      	movs	r0, #0
 8000542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000544:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <validate.lto_priv.77+0xac>)
 8000546:	4915      	ldr	r1, [pc, #84]	; (800059c <validate.lto_priv.77+0xa0>)
 8000548:	4798      	blx	r3
 800054a:	2000      	movs	r0, #0
 800054c:	e7e7      	b.n	800051e <validate.lto_priv.77+0x22>
 800054e:	69a3      	ldr	r3, [r4, #24]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00a      	beq.n	800056a <validate.lto_priv.77+0x6e>
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <validate.lto_priv.77+0x98>)
 8000556:	001a      	movs	r2, r3
 8000558:	3230      	adds	r2, #48	; 0x30
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	2a00      	cmp	r2, #0
 800055e:	d004      	beq.n	800056a <validate.lto_priv.77+0x6e>
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <validate.lto_priv.77+0xb0>)
 8000564:	490d      	ldr	r1, [pc, #52]	; (800059c <validate.lto_priv.77+0xa0>)
 8000566:	2001      	movs	r0, #1
 8000568:	4798      	blx	r3
 800056a:	69e3      	ldr	r3, [r4, #28]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00a      	beq.n	8000586 <validate.lto_priv.77+0x8a>
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <validate.lto_priv.77+0x98>)
 8000572:	001a      	movs	r2, r3
 8000574:	3230      	adds	r2, #48	; 0x30
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	2a00      	cmp	r2, #0
 800057a:	d004      	beq.n	8000586 <validate.lto_priv.77+0x8a>
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <validate.lto_priv.77+0xb4>)
 8000580:	4906      	ldr	r1, [pc, #24]	; (800059c <validate.lto_priv.77+0xa0>)
 8000582:	2001      	movs	r0, #1
 8000584:	4798      	blx	r3
 8000586:	6820      	ldr	r0, [r4, #0]
 8000588:	6883      	ldr	r3, [r0, #8]
 800058a:	4798      	blx	r3
 800058c:	e7c7      	b.n	800051e <validate.lto_priv.77+0x22>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	080025e9 	.word	0x080025e9
 8000594:	200005d0 	.word	0x200005d0
 8000598:	0801cd09 	.word	0x0801cd09
 800059c:	0801cd6e 	.word	0x0801cd6e
 80005a0:	080026a3 	.word	0x080026a3
 80005a4:	0801cd7f 	.word	0x0801cd7f
 80005a8:	0801cdb4 	.word	0x0801cdb4
 80005ac:	0801cbfc 	.word	0x0801cbfc
 80005b0:	0801cc23 	.word	0x0801cc23

080005b4 <event.lto_priv.103>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	0004      	movs	r4, r0
 80005b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80005ba:	4798      	blx	r3
 80005bc:	6820      	ldr	r0, [r4, #0]
 80005be:	6843      	ldr	r3, [r0, #4]
 80005c0:	4798      	blx	r3
 80005c2:	bd10      	pop	{r4, pc}

080005c4 <validate.lto_priv.76>:
 80005c4:	6903      	ldr	r3, [r0, #16]
 80005c6:	6942      	ldr	r2, [r0, #20]
 80005c8:	b510      	push	{r4, lr}
 80005ca:	0004      	movs	r4, r0
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d007      	beq.n	80005e0 <validate.lto_priv.76+0x1c>
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <validate.lto_priv.76+0x5c>)
 80005d2:	2000      	movs	r0, #0
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <validate.lto_priv.76+0x60>)
 80005d8:	4913      	ldr	r1, [pc, #76]	; (8000628 <validate.lto_priv.76+0x64>)
 80005da:	4798      	blx	r3
 80005dc:	2000      	movs	r0, #0
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	6983      	ldr	r3, [r0, #24]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00a      	beq.n	80005fc <validate.lto_priv.76+0x38>
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <validate.lto_priv.76+0x5c>)
 80005e8:	001a      	movs	r2, r3
 80005ea:	3230      	adds	r2, #48	; 0x30
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d004      	beq.n	80005fc <validate.lto_priv.76+0x38>
 80005f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <validate.lto_priv.76+0x68>)
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <validate.lto_priv.76+0x64>)
 80005f8:	2001      	movs	r0, #1
 80005fa:	4798      	blx	r3
 80005fc:	69e3      	ldr	r3, [r4, #28]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00a      	beq.n	8000618 <validate.lto_priv.76+0x54>
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <validate.lto_priv.76+0x5c>)
 8000604:	001a      	movs	r2, r3
 8000606:	3230      	adds	r2, #48	; 0x30
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	2a00      	cmp	r2, #0
 800060c:	d004      	beq.n	8000618 <validate.lto_priv.76+0x54>
 800060e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <validate.lto_priv.76+0x6c>)
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <validate.lto_priv.76+0x64>)
 8000614:	2001      	movs	r0, #1
 8000616:	4798      	blx	r3
 8000618:	6820      	ldr	r0, [r4, #0]
 800061a:	6883      	ldr	r3, [r0, #8]
 800061c:	4798      	blx	r3
 800061e:	e7de      	b.n	80005de <validate.lto_priv.76+0x1a>
 8000620:	200005d0 	.word	0x200005d0
 8000624:	0801cd09 	.word	0x0801cd09
 8000628:	0801cdc9 	.word	0x0801cdc9
 800062c:	0801cbfc 	.word	0x0801cbfc
 8000630:	0801cc23 	.word	0x0801cc23

08000634 <event.lto_priv.102>:
 8000634:	b510      	push	{r4, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800063a:	4798      	blx	r3
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	6843      	ldr	r3, [r0, #4]
 8000640:	4798      	blx	r3
 8000642:	bd10      	pop	{r4, pc}

08000644 <validate.lto_priv.75>:
 8000644:	6983      	ldr	r3, [r0, #24]
 8000646:	b510      	push	{r4, lr}
 8000648:	0004      	movs	r4, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00a      	beq.n	8000664 <validate.lto_priv.75+0x20>
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <validate.lto_priv.75+0x44>)
 8000650:	001a      	movs	r2, r3
 8000652:	3230      	adds	r2, #48	; 0x30
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2a00      	cmp	r2, #0
 8000658:	d004      	beq.n	8000664 <validate.lto_priv.75+0x20>
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <validate.lto_priv.75+0x48>)
 800065e:	490c      	ldr	r1, [pc, #48]	; (8000690 <validate.lto_priv.75+0x4c>)
 8000660:	2001      	movs	r0, #1
 8000662:	4798      	blx	r3
 8000664:	69e3      	ldr	r3, [r4, #28]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <validate.lto_priv.75+0x3c>
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <validate.lto_priv.75+0x44>)
 800066c:	001a      	movs	r2, r3
 800066e:	3230      	adds	r2, #48	; 0x30
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	2a00      	cmp	r2, #0
 8000674:	d004      	beq.n	8000680 <validate.lto_priv.75+0x3c>
 8000676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <validate.lto_priv.75+0x50>)
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <validate.lto_priv.75+0x4c>)
 800067c:	2001      	movs	r0, #1
 800067e:	4798      	blx	r3
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	6883      	ldr	r3, [r0, #8]
 8000684:	4798      	blx	r3
 8000686:	bd10      	pop	{r4, pc}
 8000688:	200005d0 	.word	0x200005d0
 800068c:	0801cbfc 	.word	0x0801cbfc
 8000690:	0801cde1 	.word	0x0801cde1
 8000694:	0801cc23 	.word	0x0801cc23

08000698 <event.lto_priv.101>:
 8000698:	b510      	push	{r4, lr}
 800069a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800069c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800069e:	6800      	ldr	r0, [r0, #0]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	6843      	ldr	r3, [r0, #4]
 80006a4:	4798      	blx	r3
 80006a6:	bd10      	pop	{r4, pc}

080006a8 <validate.lto_priv.74>:
 80006a8:	6983      	ldr	r3, [r0, #24]
 80006aa:	b510      	push	{r4, lr}
 80006ac:	0004      	movs	r4, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00a      	beq.n	80006c8 <validate.lto_priv.74+0x20>
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <validate.lto_priv.74+0x44>)
 80006b4:	001a      	movs	r2, r3
 80006b6:	3230      	adds	r2, #48	; 0x30
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	d004      	beq.n	80006c8 <validate.lto_priv.74+0x20>
 80006be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <validate.lto_priv.74+0x48>)
 80006c2:	490c      	ldr	r1, [pc, #48]	; (80006f4 <validate.lto_priv.74+0x4c>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	4798      	blx	r3
 80006c8:	69e3      	ldr	r3, [r4, #28]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <validate.lto_priv.74+0x3c>
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <validate.lto_priv.74+0x44>)
 80006d0:	001a      	movs	r2, r3
 80006d2:	3230      	adds	r2, #48	; 0x30
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d004      	beq.n	80006e4 <validate.lto_priv.74+0x3c>
 80006da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <validate.lto_priv.74+0x50>)
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <validate.lto_priv.74+0x4c>)
 80006e0:	2001      	movs	r0, #1
 80006e2:	4798      	blx	r3
 80006e4:	6820      	ldr	r0, [r4, #0]
 80006e6:	6883      	ldr	r3, [r0, #8]
 80006e8:	4798      	blx	r3
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	200005d0 	.word	0x200005d0
 80006f0:	0801cbfc 	.word	0x0801cbfc
 80006f4:	0801cdee 	.word	0x0801cdee
 80006f8:	0801cc23 	.word	0x0801cc23

080006fc <convert_q12_4_to_q3_12_complex>:
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	2600      	movs	r6, #0
 8000700:	0852      	lsrs	r2, r2, #1
 8000702:	0004      	movs	r4, r0
 8000704:	4d06      	ldr	r5, [pc, #24]	; (8000720 <convert_q12_4_to_q3_12_complex+0x24>)
 8000706:	0090      	lsls	r0, r2, #2
 8000708:	1809      	adds	r1, r1, r0
 800070a:	3904      	subs	r1, #4
 800070c:	3a01      	subs	r2, #1
 800070e:	d200      	bcs.n	8000712 <convert_q12_4_to_q3_12_complex+0x16>
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	0053      	lsls	r3, r2, #1
 8000714:	5ee3      	ldrsh	r3, [r4, r3]
 8000716:	804e      	strh	r6, [r1, #2]
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	406b      	eors	r3, r5
 800071c:	800b      	strh	r3, [r1, #0]
 800071e:	e7f4      	b.n	800070a <convert_q12_4_to_q3_12_complex+0xe>
 8000720:	ffffc000 	.word	0xffffc000

08000724 <convert_q12_4_to_q3_12>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	0853      	lsrs	r3, r2, #1
 8000728:	4d06      	ldr	r5, [pc, #24]	; (8000744 <convert_q12_4_to_q3_12+0x20>)
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3b02      	subs	r3, #2
 800072e:	1c9c      	adds	r4, r3, #2
 8000730:	d103      	bne.n	800073a <convert_q12_4_to_q3_12+0x16>
 8000732:	3303      	adds	r3, #3
 8000734:	439a      	bics	r2, r3
 8000736:	0010      	movs	r0, r2
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	5ec4      	ldrsh	r4, [r0, r3]
 800073c:	1064      	asrs	r4, r4, #1
 800073e:	406c      	eors	r4, r5
 8000740:	52cc      	strh	r4, [r1, r3]
 8000742:	e7f3      	b.n	800072c <convert_q12_4_to_q3_12+0x8>
 8000744:	ffffc000 	.word	0xffffc000

08000748 <convert_q12_4_to_q15_16>:
 8000748:	0852      	lsrs	r2, r2, #1
 800074a:	0013      	movs	r3, r2
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	3b01      	subs	r3, #1
 8000750:	d201      	bcs.n	8000756 <convert_q12_4_to_q15_16+0xe>
 8000752:	0090      	lsls	r0, r2, #2
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	005c      	lsls	r4, r3, #1
 8000758:	5b04      	ldrh	r4, [r0, r4]
 800075a:	009d      	lsls	r5, r3, #2
 800075c:	0324      	lsls	r4, r4, #12
 800075e:	514c      	str	r4, [r1, r5]
 8000760:	e7f5      	b.n	800074e <convert_q12_4_to_q15_16+0x6>

08000762 <convert_q3_12_complex_to_f32_complex>:
 8000762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000764:	4647      	mov	r7, r8
 8000766:	46ce      	mov	lr, r9
 8000768:	b580      	push	{r7, lr}
 800076a:	0007      	movs	r7, r0
 800076c:	0894      	lsrs	r4, r2, #2
 800076e:	00e6      	lsls	r6, r4, #3
 8000770:	198d      	adds	r5, r1, r6
 8000772:	00a4      	lsls	r4, r4, #2
 8000774:	3c04      	subs	r4, #4
 8000776:	3d08      	subs	r5, #8
 8000778:	1d23      	adds	r3, r4, #4
 800077a:	d104      	bne.n	8000786 <convert_q3_12_complex_to_f32_complex+0x24>
 800077c:	0030      	movs	r0, r6
 800077e:	bc0c      	pop	{r2, r3}
 8000780:	4690      	mov	r8, r2
 8000782:	4699      	mov	r9, r3
 8000784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2002      	movs	r0, #2
 800078a:	5e18      	ldrsh	r0, [r3, r0]
 800078c:	f010 ffd8 	bl	8011740 <__aeabi_i2f>
 8000790:	21e6      	movs	r1, #230	; 0xe6
 8000792:	0589      	lsls	r1, r1, #22
 8000794:	f010 f8be 	bl	8010914 <__aeabi_fmul>
 8000798:	4680      	mov	r8, r0
 800079a:	5f38      	ldrsh	r0, [r7, r4]
 800079c:	f010 ffd0 	bl	8011740 <__aeabi_i2f>
 80007a0:	21e6      	movs	r1, #230	; 0xe6
 80007a2:	0589      	lsls	r1, r1, #22
 80007a4:	f010 f8b6 	bl	8010914 <__aeabi_fmul>
 80007a8:	2100      	movs	r1, #0
 80007aa:	4681      	mov	r9, r0
 80007ac:	4640      	mov	r0, r8
 80007ae:	f010 f8b1 	bl	8010914 <__aeabi_fmul>
 80007b2:	1c01      	adds	r1, r0, #0
 80007b4:	4648      	mov	r0, r9
 80007b6:	f00f fe01 	bl	80103bc <__aeabi_fadd>
 80007ba:	4643      	mov	r3, r8
 80007bc:	6028      	str	r0, [r5, #0]
 80007be:	606b      	str	r3, [r5, #4]
 80007c0:	e7d8      	b.n	8000774 <convert_q3_12_complex_to_f32_complex+0x12>

080007c2 <convert_q15_16_to_f32>:
 80007c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c4:	4647      	mov	r7, r8
 80007c6:	46ce      	mov	lr, r9
 80007c8:	4688      	mov	r8, r1
 80007ca:	b580      	push	{r7, lr}
 80007cc:	0015      	movs	r5, r2
 80007ce:	0007      	movs	r7, r0
 80007d0:	0894      	lsrs	r4, r2, #2
 80007d2:	00a4      	lsls	r4, r4, #2
 80007d4:	3c04      	subs	r4, #4
 80007d6:	1d23      	adds	r3, r4, #4
 80007d8:	d106      	bne.n	80007e8 <convert_q15_16_to_f32+0x26>
 80007da:	0028      	movs	r0, r5
 80007dc:	2303      	movs	r3, #3
 80007de:	4398      	bics	r0, r3
 80007e0:	bc0c      	pop	{r2, r3}
 80007e2:	4690      	mov	r8, r2
 80007e4:	4699      	mov	r9, r3
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e8:	593e      	ldr	r6, [r7, r4]
 80007ea:	b2b0      	uxth	r0, r6
 80007ec:	f010 ffa8 	bl	8011740 <__aeabi_i2f>
 80007f0:	21de      	movs	r1, #222	; 0xde
 80007f2:	0589      	lsls	r1, r1, #22
 80007f4:	f010 f88e 	bl	8010914 <__aeabi_fmul>
 80007f8:	4681      	mov	r9, r0
 80007fa:	1430      	asrs	r0, r6, #16
 80007fc:	f010 ffa0 	bl	8011740 <__aeabi_i2f>
 8000800:	1c01      	adds	r1, r0, #0
 8000802:	4648      	mov	r0, r9
 8000804:	f00f fdda 	bl	80103bc <__aeabi_fadd>
 8000808:	4643      	mov	r3, r8
 800080a:	5118      	str	r0, [r3, r4]
 800080c:	e7e2      	b.n	80007d4 <convert_q15_16_to_f32+0x12>

0800080e <convert_q3_12_to_u16>:
 800080e:	b510      	push	{r4, lr}
 8000810:	0853      	lsrs	r3, r2, #1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	3b02      	subs	r3, #2
 8000816:	1c9c      	adds	r4, r3, #2
 8000818:	d103      	bne.n	8000822 <convert_q3_12_to_u16+0x14>
 800081a:	3303      	adds	r3, #3
 800081c:	439a      	bics	r2, r3
 800081e:	0010      	movs	r0, r2
 8000820:	bd10      	pop	{r4, pc}
 8000822:	5ac4      	ldrh	r4, [r0, r3]
 8000824:	0064      	lsls	r4, r4, #1
 8000826:	52cc      	strh	r4, [r1, r3]
 8000828:	e7f4      	b.n	8000814 <convert_q3_12_to_u16+0x6>

0800082a <validate.lto_priv.73>:
 800082a:	6983      	ldr	r3, [r0, #24]
 800082c:	b510      	push	{r4, lr}
 800082e:	0004      	movs	r4, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <validate.lto_priv.73+0x20>
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <validate.lto_priv.73+0x46>)
 8000836:	001a      	movs	r2, r3
 8000838:	3230      	adds	r2, #48	; 0x30
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	2a00      	cmp	r2, #0
 800083e:	d004      	beq.n	800084a <validate.lto_priv.73+0x20>
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <validate.lto_priv.73+0x4a>)
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <validate.lto_priv.73+0x4e>)
 8000846:	2001      	movs	r0, #1
 8000848:	4798      	blx	r3
 800084a:	69e3      	ldr	r3, [r4, #28]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <validate.lto_priv.73+0x3c>
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <validate.lto_priv.73+0x46>)
 8000852:	001a      	movs	r2, r3
 8000854:	3230      	adds	r2, #48	; 0x30
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	2a00      	cmp	r2, #0
 800085a:	d004      	beq.n	8000866 <validate.lto_priv.73+0x3c>
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <validate.lto_priv.73+0x52>)
 8000860:	4905      	ldr	r1, [pc, #20]	; (8000878 <validate.lto_priv.73+0x4e>)
 8000862:	2001      	movs	r0, #1
 8000864:	4798      	blx	r3
 8000866:	6820      	ldr	r0, [r4, #0]
 8000868:	6883      	ldr	r3, [r0, #8]
 800086a:	4798      	blx	r3
 800086c:	bd10      	pop	{r4, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	200005d0 	.word	0x200005d0
 8000874:	0801cbfc 	.word	0x0801cbfc
 8000878:	0801ce00 	.word	0x0801ce00
 800087c:	0801cc23 	.word	0x0801cc23

08000880 <event.lto_priv.99>:
 8000880:	b510      	push	{r4, lr}
 8000882:	0004      	movs	r4, r0
 8000884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000886:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	6900      	ldr	r0, [r0, #16]
 800088c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800088e:	4798      	blx	r3
 8000890:	6820      	ldr	r0, [r4, #0]
 8000892:	6843      	ldr	r3, [r0, #4]
 8000894:	4798      	blx	r3
 8000896:	bd10      	pop	{r4, pc}

08000898 <validate.lto_priv.72>:
 8000898:	6983      	ldr	r3, [r0, #24]
 800089a:	b510      	push	{r4, lr}
 800089c:	0004      	movs	r4, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00a      	beq.n	80008b8 <validate.lto_priv.72+0x20>
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <validate.lto_priv.72+0x44>)
 80008a4:	001a      	movs	r2, r3
 80008a6:	3230      	adds	r2, #48	; 0x30
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d004      	beq.n	80008b8 <validate.lto_priv.72+0x20>
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <validate.lto_priv.72+0x48>)
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <validate.lto_priv.72+0x4c>)
 80008b4:	2001      	movs	r0, #1
 80008b6:	4798      	blx	r3
 80008b8:	69e3      	ldr	r3, [r4, #28]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <validate.lto_priv.72+0x3c>
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <validate.lto_priv.72+0x44>)
 80008c0:	001a      	movs	r2, r3
 80008c2:	3230      	adds	r2, #48	; 0x30
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d004      	beq.n	80008d4 <validate.lto_priv.72+0x3c>
 80008ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <validate.lto_priv.72+0x50>)
 80008ce:	4905      	ldr	r1, [pc, #20]	; (80008e4 <validate.lto_priv.72+0x4c>)
 80008d0:	2001      	movs	r0, #1
 80008d2:	4798      	blx	r3
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	6883      	ldr	r3, [r0, #8]
 80008d8:	4798      	blx	r3
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	200005d0 	.word	0x200005d0
 80008e0:	0801cbfc 	.word	0x0801cbfc
 80008e4:	0801ce12 	.word	0x0801ce12
 80008e8:	0801cc23 	.word	0x0801cc23

080008ec <reset.lto_priv.83>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	68c3      	ldr	r3, [r0, #12]
 80008f2:	4798      	blx	r3
 80008f4:	bd10      	pop	{r4, pc}

080008f6 <reset.lto_priv.91>:
 80008f6:	b510      	push	{r4, lr}
 80008f8:	f7ff fff8 	bl	80008ec <reset.lto_priv.83>
 80008fc:	bd10      	pop	{r4, pc}

080008fe <reset.lto_priv.90>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	f7ff fff4 	bl	80008ec <reset.lto_priv.83>
 8000904:	bd10      	pop	{r4, pc}

08000906 <reset.lto_priv.89>:
 8000906:	b510      	push	{r4, lr}
 8000908:	f7ff fff0 	bl	80008ec <reset.lto_priv.83>
 800090c:	bd10      	pop	{r4, pc}

0800090e <reset.lto_priv.88>:
 800090e:	b510      	push	{r4, lr}
 8000910:	f7ff ffec 	bl	80008ec <reset.lto_priv.83>
 8000914:	bd10      	pop	{r4, pc}

08000916 <reset.lto_priv.87>:
 8000916:	b510      	push	{r4, lr}
 8000918:	f7ff ffe8 	bl	80008ec <reset.lto_priv.83>
 800091c:	bd10      	pop	{r4, pc}

0800091e <reset.lto_priv.86>:
 800091e:	b510      	push	{r4, lr}
 8000920:	f7ff ffe4 	bl	80008ec <reset.lto_priv.83>
 8000924:	bd10      	pop	{r4, pc}

08000926 <reset.lto_priv.85>:
 8000926:	b510      	push	{r4, lr}
 8000928:	f7ff ffe0 	bl	80008ec <reset.lto_priv.83>
 800092c:	bd10      	pop	{r4, pc}

0800092e <reset.lto_priv.84>:
 800092e:	b510      	push	{r4, lr}
 8000930:	f7ff ffdc 	bl	80008ec <reset.lto_priv.83>
 8000934:	bd10      	pop	{r4, pc}

08000936 <event.lto_priv.98>:
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	0004      	movs	r4, r0
 800093a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800093c:	6941      	ldr	r1, [r0, #20]
 800093e:	682a      	ldr	r2, [r5, #0]
 8000940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000942:	6900      	ldr	r0, [r0, #16]
 8000944:	4798      	blx	r3
 8000946:	6028      	str	r0, [r5, #0]
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	6843      	ldr	r3, [r0, #4]
 800094c:	4798      	blx	r3
 800094e:	bd70      	pop	{r4, r5, r6, pc}

08000950 <event.lto_priv.100>:
 8000950:	b510      	push	{r4, lr}
 8000952:	f7ff fff0 	bl	8000936 <event.lto_priv.98>
 8000956:	bd10      	pop	{r4, pc}

08000958 <acc_sweep_manager_release>:
 8000958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800095a:	b510      	push	{r4, lr}
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <acc_sweep_manager_release+0xe>
 8000960:	3014      	adds	r0, #20
 8000962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000964:	4798      	blx	r3
 8000966:	bd10      	pop	{r4, pc}

08000968 <acc_sensor_manager_release_measurement>:
 8000968:	6982      	ldr	r2, [r0, #24]
 800096a:	b510      	push	{r4, lr}
 800096c:	2a00      	cmp	r2, #0
 800096e:	d00f      	beq.n	8000990 <acc_sensor_manager_release_measurement+0x28>
 8000970:	2348      	movs	r3, #72	; 0x48
 8000972:	435a      	muls	r2, r3
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <acc_sensor_manager_release_measurement+0x2c>)
 8000976:	3a48      	subs	r2, #72	; 0x48
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	189b      	adds	r3, r3, r2
 800097c:	001a      	movs	r2, r3
 800097e:	3240      	adds	r2, #64	; 0x40
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	2a00      	cmp	r2, #0
 8000984:	d101      	bne.n	800098a <acc_sensor_manager_release_measurement+0x22>
 8000986:	3341      	adds	r3, #65	; 0x41
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	3004      	adds	r0, #4
 800098c:	f7ff ffe4 	bl	8000958 <acc_sweep_manager_release>
 8000990:	bd10      	pop	{r4, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000008c 	.word	0x2000008c

08000998 <acc_sensor_manager_hibernate_enter>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800099c:	6985      	ldr	r5, [r0, #24]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	6841      	ldr	r1, [r0, #4]
 80009a2:	0028      	movs	r0, r5
 80009a4:	4798      	blx	r3
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <acc_sensor_manager_hibernate_enter+0x2c>)
 80009a8:	1e04      	subs	r4, r0, #0
 80009aa:	d105      	bne.n	80009b8 <acc_sensor_manager_hibernate_enter+0x20>
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <acc_sensor_manager_hibernate_enter+0x30>)
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <acc_sensor_manager_hibernate_enter+0x34>)
 80009b2:	4798      	blx	r3
 80009b4:	0020      	movs	r0, r4
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0fa      	beq.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009be:	0028      	movs	r0, r5
 80009c0:	4798      	blx	r3
 80009c2:	e7f7      	b.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009c4:	200005d0 	.word	0x200005d0
 80009c8:	0801ce1e 	.word	0x0801ce1e
 80009cc:	0801ce3e 	.word	0x0801ce3e

080009d0 <measure_noise.lto_priv.111>:
 80009d0:	2000      	movs	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <acc_rss_integration_mem_free>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <acc_rss_integration_mem_free+0xc>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4798      	blx	r3
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200005d0 	.word	0x200005d0

080009e4 <destroy.lto_priv.142>:
 80009e4:	b510      	push	{r4, lr}
 80009e6:	0004      	movs	r4, r0
 80009e8:	6940      	ldr	r0, [r0, #20]
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d003      	beq.n	80009f6 <destroy.lto_priv.142+0x12>
 80009ee:	f7ff fff1 	bl	80009d4 <acc_rss_integration_mem_free>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6163      	str	r3, [r4, #20]
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <destroy.lto_priv.141>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	0004      	movs	r4, r0
 80009fc:	6940      	ldr	r0, [r0, #20]
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d003      	beq.n	8000a0a <destroy.lto_priv.141+0x12>
 8000a02:	f7ff ffe7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a06:	2300      	movs	r3, #0
 8000a08:	6163      	str	r3, [r4, #20]
 8000a0a:	bd10      	pop	{r4, pc}

08000a0c <disassemble.lto_priv.147>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	6804      	ldr	r4, [r0, #0]
 8000a10:	0005      	movs	r5, r0
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d00a      	beq.n	8000a2c <disassemble.lto_priv.147+0x20>
 8000a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a18:	f7ff ffa6 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a1c:	23ea      	movs	r3, #234	; 0xea
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	58e0      	ldr	r0, [r4, r3]
 8000a22:	f7ff ffd7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff ffd4 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a2c:	0028      	movs	r0, r5
 8000a2e:	f7ff ffd1 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}

08000a34 <disassemble.lto_priv.146>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	6804      	ldr	r4, [r0, #0]
 8000a38:	0005      	movs	r5, r0
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d00a      	beq.n	8000a54 <disassemble.lto_priv.146+0x20>
 8000a3e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a40:	f7ff ff92 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a44:	0023      	movs	r3, r4
 8000a46:	33fc      	adds	r3, #252	; 0xfc
 8000a48:	69d8      	ldr	r0, [r3, #28]
 8000a4a:	f7ff ffc3 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff ffc0 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a54:	0028      	movs	r0, r5
 8000a56:	f7ff ffbd 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}

08000a5c <acc_rss_integration_sensor_device_power_off>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <acc_rss_integration_sensor_device_power_off+0xc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4798      	blx	r3
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	200005d0 	.word	0x200005d0

08000a6c <acc_rss_integration_sensor_device_power_on>:
 8000a6c:	b510      	push	{r4, lr}
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <acc_rss_integration_sensor_device_power_on+0xc>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4798      	blx	r3
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200005d0 	.word	0x200005d0

08000a7c <acc_sensor_manager_power_on_and_start_sensor>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	6985      	ldr	r5, [r0, #24]
 8000a80:	0004      	movs	r4, r0
 8000a82:	0028      	movs	r0, r5
 8000a84:	f7ff fff2 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000a88:	2148      	movs	r1, #72	; 0x48
 8000a8a:	4369      	muls	r1, r5
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <acc_sensor_manager_power_on_and_start_sensor+0x48>)
 8000a8e:	3948      	subs	r1, #72	; 0x48
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a94:	1859      	adds	r1, r3, r1
 8000a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a98:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d104      	bne.n	8000aac <acc_sensor_manager_power_on_and_start_sensor+0x30>
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	f7ff ffda 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	0020      	movs	r0, r4
 8000aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab0:	0031      	movs	r1, r6
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	3018      	adds	r0, #24
 8000ab6:	4798      	blx	r3
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d0f2      	beq.n	8000aa2 <acc_sensor_manager_power_on_and_start_sensor+0x26>
 8000abc:	2301      	movs	r3, #1
 8000abe:	70e3      	strb	r3, [r4, #3]
 8000ac0:	e7f3      	b.n	8000aaa <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <acc_base_configuration_check.part.6>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8000acc:	2d04      	cmp	r5, #4
 8000ace:	d908      	bls.n	8000ae2 <acc_base_configuration_check.part.6+0x1a>
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ad2:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <acc_base_configuration_check.part.6+0xdc>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4934      	ldr	r1, [pc, #208]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	4798      	blx	r3
 8000adc:	2400      	movs	r4, #0
 8000ade:	0020      	movs	r0, r4
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d04      	cmp	r5, #4
 8000ae4:	d113      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ae8:	69dc      	ldr	r4, [r3, #28]
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d105      	bne.n	8000afa <acc_base_configuration_check.part.6+0x32>
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <acc_base_configuration_check.part.6+0xe4>)
 8000af2:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000af4:	0020      	movs	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	e7f1      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000afa:	7902      	ldrb	r2, [r0, #4]
 8000afc:	2a03      	cmp	r2, #3
 8000afe:	d106      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <acc_base_configuration_check.part.6+0xe8>)
 8000b04:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	4798      	blx	r3
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	e7e7      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000b10:	2b16      	cmp	r3, #22
 8000b12:	d907      	bls.n	8000b24 <acc_base_configuration_check.part.6+0x5c>
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <acc_base_configuration_check.part.6+0xec>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	4923      	ldr	r1, [pc, #140]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	4798      	blx	r3
 8000b20:	2400      	movs	r4, #0
 8000b22:	e7dc      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b24:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8000b2c:	d907      	bls.n	8000b3e <acc_base_configuration_check.part.6+0x76>
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <acc_base_configuration_check.part.6+0xf0>)
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	491c      	ldr	r1, [pc, #112]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b36:	2000      	movs	r0, #0
 8000b38:	4798      	blx	r3
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	e7cf      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b3e:	7903      	ldrb	r3, [r0, #4]
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d109      	bne.n	8000b58 <acc_base_configuration_check.part.6+0x90>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d115      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <acc_base_configuration_check.part.6+0xf4>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	4916      	ldr	r1, [pc, #88]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b50:	0028      	movs	r0, r5
 8000b52:	4798      	blx	r3
 8000b54:	002c      	movs	r4, r5
 8000b56:	e7c2      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d10b      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	334e      	adds	r3, #78	; 0x4e
 8000b60:	781c      	ldrb	r4, [r3, #0]
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d106      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <acc_base_configuration_check.part.6+0xf8>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b6e:	0020      	movs	r0, r4
 8000b70:	4798      	blx	r3
 8000b72:	e7b4      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b74:	2304      	movs	r3, #4
 8000b76:	439d      	bics	r5, r3
 8000b78:	d103      	bne.n	8000b82 <acc_base_configuration_check.part.6+0xba>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	334e      	adds	r3, #78	; 0x4e
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	3032      	adds	r0, #50	; 0x32
 8000b84:	7803      	ldrb	r3, [r0, #0]
 8000b86:	2401      	movs	r4, #1
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d0a8      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	d0a6      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <acc_base_configuration_check.part.6+0xfc>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	4798      	blx	r3
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	e79e      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000ba0:	200005d0 	.word	0x200005d0
 8000ba4:	0801ce4d 	.word	0x0801ce4d
 8000ba8:	0801ce65 	.word	0x0801ce65
 8000bac:	0801ce78 	.word	0x0801ce78
 8000bb0:	0801ceb7 	.word	0x0801ceb7
 8000bb4:	0801cef9 	.word	0x0801cef9
 8000bb8:	0801cf2d 	.word	0x0801cf2d
 8000bbc:	0801cf7f 	.word	0x0801cf7f
 8000bc0:	0801cfbb 	.word	0x0801cfbb
 8000bc4:	0801cffb 	.word	0x0801cffb

08000bc8 <configuration_is_valid>:
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	0004      	movs	r4, r0
 8000bcc:	2001      	movs	r0, #1
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d10a      	bne.n	8000be8 <configuration_is_valid+0x20>
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <configuration_is_valid+0x28>)
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	3330      	adds	r3, #48	; 0x30
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <configuration_is_valid+0x22>
 8000bde:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <configuration_is_valid+0x2c>)
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <configuration_is_valid+0x30>)
 8000be4:	4798      	blx	r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	0018      	movs	r0, r3
 8000bec:	e7fc      	b.n	8000be8 <configuration_is_valid+0x20>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	200005d0 	.word	0x200005d0
 8000bf4:	0801ce65 	.word	0x0801ce65
 8000bf8:	0801d00f 	.word	0x0801d00f

08000bfc <acc_base_configuration_asynchronous_measurement_get>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	0004      	movs	r4, r0
 8000c00:	f7ff ffe2 	bl	8000bc8 <configuration_is_valid>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d001      	beq.n	8000c0c <acc_base_configuration_asynchronous_measurement_get+0x10>
 8000c08:	344e      	adds	r4, #78	; 0x4e
 8000c0a:	7820      	ldrb	r0, [r4, #0]
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <acc_base_configuration_noise_level_normalization_get>:
 8000c0e:	b510      	push	{r4, lr}
 8000c10:	0004      	movs	r4, r0
 8000c12:	f7ff ffd9 	bl	8000bc8 <configuration_is_valid>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d001      	beq.n	8000c1e <acc_base_configuration_noise_level_normalization_get+0x10>
 8000c1a:	3449      	adds	r4, #73	; 0x49
 8000c1c:	7820      	ldrb	r0, [r4, #0]
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <acc_base_configuration_downsampling_factor_set>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	0004      	movs	r4, r0
 8000c24:	000d      	movs	r5, r1
 8000c26:	f7ff ffcf 	bl	8000bc8 <configuration_is_valid>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d001      	beq.n	8000c32 <acc_base_configuration_downsampling_factor_set+0x12>
 8000c2e:	3468      	adds	r4, #104	; 0x68
 8000c30:	8025      	strh	r5, [r4, #0]
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <acc_base_configuration_downsampling_factor_get>:
 8000c34:	b510      	push	{r4, lr}
 8000c36:	0004      	movs	r4, r0
 8000c38:	f7ff ffc6 	bl	8000bc8 <configuration_is_valid>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d001      	beq.n	8000c46 <acc_base_configuration_downsampling_factor_get+0x12>
 8000c42:	3468      	adds	r4, #104	; 0x68
 8000c44:	8823      	ldrh	r3, [r4, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	bd10      	pop	{r4, pc}

08000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	f7ff ffbb 	bl	8000bc8 <configuration_is_valid>
 8000c52:	2300      	movs	r3, #0
 8000c54:	4298      	cmp	r0, r3
 8000c56:	d001      	beq.n	8000c5c <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 8000c58:	3460      	adds	r4, #96	; 0x60
 8000c5a:	8823      	ldrh	r3, [r4, #0]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <acc_base_configuration_integrator_ramp_up_set>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	0004      	movs	r4, r0
 8000c64:	000d      	movs	r5, r1
 8000c66:	f7ff ffaf 	bl	8000bc8 <configuration_is_valid>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d001      	beq.n	8000c72 <acc_base_configuration_integrator_ramp_up_set+0x12>
 8000c6e:	3406      	adds	r4, #6
 8000c70:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <acc_base_configuration_wg_duration_set>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	0004      	movs	r4, r0
 8000c78:	000d      	movs	r5, r1
 8000c7a:	f7ff ffa5 	bl	8000bc8 <configuration_is_valid>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d001      	beq.n	8000c86 <acc_base_configuration_wg_duration_set+0x12>
 8000c82:	3404      	adds	r4, #4
 8000c84:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c86:	bd70      	pop	{r4, r5, r6, pc}

08000c88 <acc_base_configuration_wg_duration_get>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	f7ff ff9c 	bl	8000bc8 <configuration_is_valid>
 8000c90:	2300      	movs	r3, #0
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d001      	beq.n	8000c9a <acc_base_configuration_wg_duration_get+0x12>
 8000c96:	3404      	adds	r4, #4
 8000c98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	bd10      	pop	{r4, pc}

08000c9e <acc_base_configuration_integrator_set>:
 8000c9e:	b570      	push	{r4, r5, r6, lr}
 8000ca0:	0004      	movs	r4, r0
 8000ca2:	000d      	movs	r5, r1
 8000ca4:	f7ff ff90 	bl	8000bc8 <configuration_is_valid>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d001      	beq.n	8000cb0 <acc_base_configuration_integrator_set+0x12>
 8000cac:	3402      	adds	r4, #2
 8000cae:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}

08000cb2 <acc_base_configuration_integrator_get>:
 8000cb2:	b510      	push	{r4, lr}
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	f7ff ff87 	bl	8000bc8 <configuration_is_valid>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d001      	beq.n	8000cc4 <acc_base_configuration_integrator_get+0x12>
 8000cc0:	3402      	adds	r4, #2
 8000cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	bd10      	pop	{r4, pc}

08000cc8 <acc_base_configuration_update_rate_get>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	0004      	movs	r4, r0
 8000ccc:	f7ff ff7c 	bl	8000bc8 <configuration_is_valid>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d00b      	beq.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cd4:	7920      	ldrb	r0, [r4, #4]
 8000cd6:	2803      	cmp	r0, #3
 8000cd8:	d808      	bhi.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cda:	f010 f939 	bl	8010f50 <__gnu_thumb1_case_uqi>
 8000cde:	0202      	.short	0x0202
 8000ce0:	0505      	.short	0x0505
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	05c0      	lsls	r0, r0, #23
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	68a0      	ldr	r0, [r4, #8]
 8000cea:	e7fc      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cec:	4800      	ldr	r0, [pc, #0]	; (8000cf0 <acc_base_configuration_update_rate_get+0x28>)
 8000cee:	e7fa      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cf0:	7fc00000 	.word	0x7fc00000

08000cf4 <acc_base_configuration_repetition_mode_get>:
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	f7ff ff66 	bl	8000bc8 <configuration_is_valid>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d000      	beq.n	8000d04 <acc_base_configuration_repetition_mode_get+0x10>
 8000d02:	7923      	ldrb	r3, [r4, #4]
 8000d04:	0018      	movs	r0, r3
 8000d06:	bd10      	pop	{r4, pc}

08000d08 <acc_radar_engine_common_get_timeout_ms>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	f7ff fff2 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8000d10:	2801      	cmp	r0, #1
 8000d12:	d00c      	beq.n	8000d2e <acc_radar_engine_common_get_timeout_ms+0x26>
 8000d14:	0020      	movs	r0, r4
 8000d16:	f7ff ffd7 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8000d1a:	1c01      	adds	r1, r0, #0
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d1e:	f00f fce7 	bl	80106f0 <__aeabi_fdiv>
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d24:	f00f fb4a 	bl	80103bc <__aeabi_fadd>
 8000d28:	f010 fb34 	bl	8011394 <__aeabi_f2uiz>
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	20fa      	movs	r0, #250	; 0xfa
 8000d30:	00c0      	lsls	r0, r0, #3
 8000d32:	e7fb      	b.n	8000d2c <acc_radar_engine_common_get_timeout_ms+0x24>
 8000d34:	44fa0000 	.word	0x44fa0000

08000d38 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	f7ff ff44 	bl	8000bc8 <configuration_is_valid>
 8000d40:	2300      	movs	r3, #0
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d001      	beq.n	8000d4a <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 8000d46:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	bd10      	pop	{r4, pc}

08000d4e <acc_base_configuration_decrease_tx_emission_get>:
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	0004      	movs	r4, r0
 8000d52:	f7ff ff39 	bl	8000bc8 <configuration_is_valid>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d001      	beq.n	8000d5e <acc_base_configuration_decrease_tx_emission_get+0x10>
 8000d5a:	3448      	adds	r4, #72	; 0x48
 8000d5c:	7820      	ldrb	r0, [r4, #0]
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <acc_base_configuration_tx_disable_get>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	0004      	movs	r4, r0
 8000d64:	f7ff ff30 	bl	8000bc8 <configuration_is_valid>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d001      	beq.n	8000d70 <acc_base_configuration_tx_disable_get+0x10>
 8000d6c:	3447      	adds	r4, #71	; 0x47
 8000d6e:	7820      	ldrb	r0, [r4, #0]
 8000d70:	bd10      	pop	{r4, pc}

08000d72 <acc_base_configuration_power_save_mode_get>:
 8000d72:	b510      	push	{r4, lr}
 8000d74:	0004      	movs	r4, r0
 8000d76:	f7ff ff27 	bl	8000bc8 <configuration_is_valid>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d000      	beq.n	8000d82 <acc_base_configuration_power_save_mode_get+0x10>
 8000d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d82:	0018      	movs	r0, r3
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <acc_base_configuration_repetition_mode_on_demand_set>:
 8000d86:	b510      	push	{r4, lr}
 8000d88:	0004      	movs	r4, r0
 8000d8a:	f7ff ff1d 	bl	8000bc8 <configuration_is_valid>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d001      	beq.n	8000d96 <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 8000d92:	2301      	movs	r3, #1
 8000d94:	7123      	strb	r3, [r4, #4]
 8000d96:	bd10      	pop	{r4, pc}

08000d98 <acc_base_configuration_sensor_get>:
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	f7ff ff14 	bl	8000bc8 <configuration_is_valid>
 8000da0:	2300      	movs	r3, #0
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d000      	beq.n	8000da8 <acc_base_configuration_sensor_get+0x10>
 8000da6:	68e3      	ldr	r3, [r4, #12]
 8000da8:	0018      	movs	r0, r3
 8000daa:	bd10      	pop	{r4, pc}

08000dac <acc_sensor_manager_prepare_measurement>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	46de      	mov	lr, fp
 8000db0:	464e      	mov	r6, r9
 8000db2:	4657      	mov	r7, sl
 8000db4:	4645      	mov	r5, r8
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	0004      	movs	r4, r0
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	4689      	mov	r9, r1
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	4693      	mov	fp, r2
 8000dc4:	f7ff ffe8 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000dc8:	0006      	movs	r6, r0
 8000dca:	4648      	mov	r0, r9
 8000dcc:	f7ff fefc 	bl	8000bc8 <configuration_is_valid>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d003      	beq.n	8000de0 <acc_sensor_manager_prepare_measurement+0x34>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	334c      	adds	r3, #76	; 0x4c
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2248      	movs	r2, #72	; 0x48
 8000de2:	2348      	movs	r3, #72	; 0x48
 8000de4:	4252      	negs	r2, r2
 8000de6:	4692      	mov	sl, r2
 8000de8:	4373      	muls	r3, r6
 8000dea:	449a      	add	sl, r3
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4698      	mov	r8, r3
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4453      	add	r3, sl
 8000df6:	001a      	movs	r2, r3
 8000df8:	3242      	adds	r2, #66	; 0x42
 8000dfa:	7011      	strb	r1, [r2, #0]
 8000dfc:	494f      	ldr	r1, [pc, #316]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000dfe:	6459      	str	r1, [r3, #68]	; 0x44
 8000e00:	9903      	ldr	r1, [sp, #12]
 8000e02:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e04:	0019      	movs	r1, r3
 8000e06:	3141      	adds	r1, #65	; 0x41
 8000e08:	7809      	ldrb	r1, [r1, #0]
 8000e0a:	9102      	str	r1, [sp, #8]
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	d156      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e10:	7011      	strb	r1, [r2, #0]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e14:	0030      	movs	r0, r6
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44
 8000e18:	f7ff fe28 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000e1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e1e:	69a0      	ldr	r0, [r4, #24]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4798      	blx	r3
 8000e24:	1e05      	subs	r5, r0, #0
 8000e26:	d02c      	beq.n	8000e82 <acc_sensor_manager_prepare_measurement+0xd6>
 8000e28:	af05      	add	r7, sp, #20
 8000e2a:	0031      	movs	r1, r6
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f7ff f977 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e32:	220c      	movs	r2, #12
 8000e34:	9902      	ldr	r1, [sp, #8]
 8000e36:	0038      	movs	r0, r7
 8000e38:	f012 fe14 	bl	8013a64 <memset>
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e3e:	0020      	movs	r0, r4
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4643      	mov	r3, r8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9903      	ldr	r1, [sp, #12]
 8000e48:	4453      	add	r3, sl
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e4e:	3018      	adds	r0, #24
 8000e50:	68dd      	ldr	r5, [r3, #12]
 8000e52:	003b      	movs	r3, r7
 8000e54:	47a8      	blx	r5
 8000e56:	1e05      	subs	r5, r0, #0
 8000e58:	d029      	beq.n	8000eae <acc_sensor_manager_prepare_measurement+0x102>
 8000e5a:	4643      	mov	r3, r8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4453      	add	r3, sl
 8000e62:	3341      	adds	r3, #65	; 0x41
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000e68:	7839      	ldrb	r1, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	4453      	add	r3, sl
 8000e70:	001a      	movs	r2, r3
 8000e72:	3242      	adds	r2, #66	; 0x42
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	0031      	movs	r1, r6
 8000e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e7c:	f7ff f950 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e80:	e005      	b.n	8000e8e <acc_sensor_manager_prepare_measurement+0xe2>
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <acc_sensor_manager_prepare_measurement+0x198>)
 8000e86:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000e88:	492f      	ldr	r1, [pc, #188]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000e8a:	0033      	movs	r3, r6
 8000e8c:	47b8      	blx	r7
 8000e8e:	0030      	movs	r0, r6
 8000e90:	f7ff fde4 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d112      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e98:	1d20      	adds	r0, r4, #4
 8000e9a:	f7ff fd5d 	bl	8000958 <acc_sweep_manager_release>
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	b009      	add	sp, #36	; 0x24
 8000ea2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	46a2      	mov	sl, r4
 8000eaa:	46ab      	mov	fp, r5
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <acc_sensor_manager_prepare_measurement+0x1a0>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	4924      	ldr	r1, [pc, #144]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	0033      	movs	r3, r6
 8000eba:	47c0      	blx	r8
 8000ebc:	e7d3      	b.n	8000e66 <acc_sensor_manager_prepare_measurement+0xba>
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d134      	bne.n	8000f2e <acc_sensor_manager_prepare_measurement+0x182>
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	f7ff fea2 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d023      	beq.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000ece:	2314      	movs	r3, #20
 8000ed0:	69a7      	ldr	r7, [r4, #24]
 8000ed2:	445b      	add	r3, fp
 8000ed4:	0038      	movs	r0, r7
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	f7ff fdc8 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ede:	2148      	movs	r1, #72	; 0x48
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	4379      	muls	r1, r7
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000eea:	3948      	subs	r1, #72	; 0x48
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000ef0:	1859      	adds	r1, r3, r1
 8000ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef4:	44a0      	add	r8, r4
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4798      	blx	r3
 8000efa:	1e05      	subs	r5, r0, #0
 8000efc:	d006      	beq.n	8000f0c <acc_sensor_manager_prepare_measurement+0x160>
 8000efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f00:	4652      	mov	r2, sl
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4649      	mov	r1, r9
 8000f06:	4640      	mov	r0, r8
 8000f08:	4798      	blx	r3
 8000f0a:	0005      	movs	r5, r0
 8000f0c:	0038      	movs	r0, r7
 8000f0e:	f7ff fda5 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d0c0      	beq.n	8000e98 <acc_sensor_manager_prepare_measurement+0xec>
 8000f16:	230e      	movs	r3, #14
 8000f18:	a805      	add	r0, sp, #20
 8000f1a:	7003      	strb	r3, [r0, #0]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	3b07      	subs	r3, #7
 8000f20:	4659      	mov	r1, fp
 8000f22:	6046      	str	r6, [r0, #4]
 8000f24:	6083      	str	r3, [r0, #8]
 8000f26:	2501      	movs	r5, #1
 8000f28:	f7ff f8ec 	bl	8000104 <acc_probes_execute>
 8000f2c:	e7b7      	b.n	8000e9e <acc_sensor_manager_prepare_measurement+0xf2>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	829a      	strh	r2, [r3, #20]
 8000f34:	e7ef      	b.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	ff800000 	.word	0xff800000
 8000f40:	200005d0 	.word	0x200005d0
 8000f44:	0801d02a 	.word	0x0801d02a
 8000f48:	0801ce3e 	.word	0x0801ce3e
 8000f4c:	0801d065 	.word	0x0801d065

08000f50 <acc_base_configuration_print.part.5>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	46de      	mov	lr, fp
 8000f54:	4645      	mov	r5, r8
 8000f56:	4657      	mov	r7, sl
 8000f58:	464e      	mov	r6, r9
 8000f5a:	b5e0      	push	{r5, r6, r7, lr}
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <acc_base_configuration_print.part.5+0xd8>)
 8000f5e:	b08f      	sub	sp, #60	; 0x3c
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	0004      	movs	r4, r0
 8000f64:	930a      	str	r3, [sp, #40]	; 0x28
 8000f66:	f7ff ff17 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000f6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f7ff fee3 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8000f72:	900c      	str	r0, [sp, #48]	; 0x30
 8000f74:	0020      	movs	r0, r4
 8000f76:	f7ff fe27 	bl	8000bc8 <configuration_is_valid>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d001      	beq.n	8000f86 <acc_base_configuration_print.part.5+0x36>
 8000f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f84:	4698      	mov	r8, r3
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff fe93 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8000f8c:	900d      	str	r0, [sp, #52]	; 0x34
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f7ff fe7a 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8000f94:	4681      	mov	r9, r0
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff fe16 	bl	8000bc8 <configuration_is_valid>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	42b0      	cmp	r0, r6
 8000fa0:	d001      	beq.n	8000fa6 <acc_base_configuration_print.part.5+0x56>
 8000fa2:	1da3      	adds	r3, r4, #6
 8000fa4:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff fee3 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8000fac:	4f1f      	ldr	r7, [pc, #124]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fae:	2804      	cmp	r0, #4
 8000fb0:	d802      	bhi.n	8000fb8 <acc_base_configuration_print.part.5+0x68>
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <acc_base_configuration_print.part.5+0xe0>)
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	58c7      	ldr	r7, [r0, r3]
 8000fb8:	0020      	movs	r0, r4
 8000fba:	f7ff fe05 	bl	8000bc8 <configuration_is_valid>
 8000fbe:	4d1d      	ldr	r5, [pc, #116]	; (8001034 <acc_base_configuration_print.part.5+0xe4>)
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d008      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	336a      	adds	r3, #106	; 0x6a
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fce:	4d1a      	ldr	r5, [pc, #104]	; (8001038 <acc_base_configuration_print.part.5+0xe8>)
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d000      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fd4:	4d15      	ldr	r5, [pc, #84]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f7ff fec2 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8000fdc:	4682      	mov	sl, r0
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f7ff fe33 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8000fe4:	4683      	mov	fp, r0
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff feb1 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8000fec:	465b      	mov	r3, fp
 8000fee:	9308      	str	r3, [sp, #32]
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	9307      	str	r3, [sp, #28]
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	9303      	str	r3, [sp, #12]
 8000ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ffa:	9009      	str	r0, [sp, #36]	; 0x24
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	4643      	mov	r3, r8
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001004:	9506      	str	r5, [sp, #24]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	9705      	str	r7, [sp, #20]
 800100a:	9604      	str	r6, [sp, #16]
 800100c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <acc_base_configuration_print.part.5+0xec>)
 8001010:	490b      	ldr	r1, [pc, #44]	; (8001040 <acc_base_configuration_print.part.5+0xf0>)
 8001012:	2002      	movs	r0, #2
 8001014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001016:	47a0      	blx	r4
 8001018:	b00f      	add	sp, #60	; 0x3c
 800101a:	bc3c      	pop	{r2, r3, r4, r5}
 800101c:	4690      	mov	r8, r2
 800101e:	4699      	mov	r9, r3
 8001020:	46a2      	mov	sl, r4
 8001022:	46ab      	mov	fp, r5
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	200005d0 	.word	0x200005d0
 800102c:	0801ee9f 	.word	0x0801ee9f
 8001030:	08016860 	.word	0x08016860
 8001034:	0801d088 	.word	0x0801d088
 8001038:	0801d70f 	.word	0x0801d70f
 800103c:	0801d08a 	.word	0x0801d08a
 8001040:	0801ce65 	.word	0x0801ce65

08001044 <acc_service_maximize_signal_attenuation_set.part.8>:
 8001044:	b510      	push	{r4, lr}
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	4903      	ldr	r1, [pc, #12]	; (800105c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800104e:	2001      	movs	r0, #1
 8001050:	4798      	blx	r3
 8001052:	bd10      	pop	{r4, pc}
 8001054:	200005d0 	.word	0x200005d0
 8001058:	0801d0c2 	.word	0x0801d0c2
 800105c:	0801dde9 	.word	0x0801dde9

08001060 <acc_service_configuration_valid>:
 8001060:	b510      	push	{r4, lr}
 8001062:	2800      	cmp	r0, #0
 8001064:	d00a      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <acc_service_configuration_valid+0x2c>)
 8001068:	6802      	ldr	r2, [r0, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d106      	bne.n	800107c <acc_service_configuration_valid+0x1c>
 800106e:	8b03      	ldrh	r3, [r0, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001074:	6943      	ldr	r3, [r0, #20]
 8001076:	2001      	movs	r0, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <acc_service_configuration_valid+0x2a>
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <acc_service_configuration_valid+0x30>)
 800107e:	2000      	movs	r0, #0
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <acc_service_configuration_valid+0x34>)
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <acc_service_configuration_valid+0x38>)
 8001086:	4798      	blx	r3
 8001088:	2000      	movs	r0, #0
 800108a:	bd10      	pop	{r4, pc}
 800108c:	acc09dd7 	.word	0xacc09dd7
 8001090:	200005d0 	.word	0x200005d0
 8001094:	0801d0c2 	.word	0x0801d0c2
 8001098:	0801dde9 	.word	0x0801dde9

0800109c <acc_service_configuration_check>:
 800109c:	b510      	push	{r4, lr}
 800109e:	0004      	movs	r4, r0
 80010a0:	f7ff ffde 	bl	8001060 <acc_service_configuration_valid>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d00b      	beq.n	80010c0 <acc_service_configuration_check+0x24>
 80010a8:	7963      	ldrb	r3, [r4, #5]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d906      	bls.n	80010c0 <acc_service_configuration_check+0x24>
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <acc_service_configuration_check+0x28>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <acc_service_configuration_check+0x2c>)
 80010ba:	4904      	ldr	r1, [pc, #16]	; (80010cc <acc_service_configuration_check+0x30>)
 80010bc:	4798      	blx	r3
 80010be:	2000      	movs	r0, #0
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200005d0 	.word	0x200005d0
 80010c8:	0801d0d8 	.word	0x0801d0d8
 80010cc:	0801dde9 	.word	0x0801dde9

080010d0 <acc_service_handle_valid>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d004      	beq.n	80010e0 <acc_service_handle_valid+0x10>
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <acc_service_handle_valid+0x20>)
 80010da:	2001      	movs	r0, #1
 80010dc:	429a      	cmp	r2, r3
 80010de:	d006      	beq.n	80010ee <acc_service_handle_valid+0x1e>
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <acc_service_handle_valid+0x24>)
 80010e2:	2000      	movs	r0, #0
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <acc_service_handle_valid+0x28>)
 80010e8:	4904      	ldr	r1, [pc, #16]	; (80010fc <acc_service_handle_valid+0x2c>)
 80010ea:	4798      	blx	r3
 80010ec:	2000      	movs	r0, #0
 80010ee:	bd10      	pop	{r4, pc}
 80010f0:	acc09ee8 	.word	0xacc09ee8
 80010f4:	200005d0 	.word	0x200005d0
 80010f8:	0801d0f0 	.word	0x0801d0f0
 80010fc:	0801dde9 	.word	0x0801dde9

08001100 <acc_service_pipeline_destroy>:
 8001100:	b510      	push	{r4, lr}
 8001102:	0004      	movs	r4, r0
 8001104:	6900      	ldr	r0, [r0, #16]
 8001106:	2800      	cmp	r0, #0
 8001108:	d003      	beq.n	8001112 <acc_service_pipeline_destroy+0x12>
 800110a:	68c3      	ldr	r3, [r0, #12]
 800110c:	4798      	blx	r3
 800110e:	2300      	movs	r3, #0
 8001110:	6123      	str	r3, [r4, #16]
 8001112:	bd10      	pop	{r4, pc}

08001114 <acc_service_deactivate>:
 8001114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001116:	0004      	movs	r4, r0
 8001118:	f7ff ffda 	bl	80010d0 <acc_service_handle_valid>
 800111c:	2800      	cmp	r0, #0
 800111e:	d029      	beq.n	8001174 <acc_service_deactivate+0x60>
 8001120:	4d18      	ldr	r5, [pc, #96]	; (8001184 <acc_service_deactivate+0x70>)
 8001122:	792e      	ldrb	r6, [r5, #4]
 8001124:	2e00      	cmp	r6, #0
 8001126:	d025      	beq.n	8001174 <acc_service_deactivate+0x60>
 8001128:	7a63      	ldrb	r3, [r4, #9]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d120      	bne.n	8001170 <acc_service_deactivate+0x5c>
 800112e:	6863      	ldr	r3, [r4, #4]
 8001130:	2b2a      	cmp	r3, #42	; 0x2a
 8001132:	d81f      	bhi.n	8001174 <acc_service_deactivate+0x60>
 8001134:	1d6a      	adds	r2, r5, #5
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	5c9f      	ldrb	r7, [r3, r2]
 800113a:	2f00      	cmp	r7, #0
 800113c:	d11a      	bne.n	8001174 <acc_service_deactivate+0x60>
 800113e:	2101      	movs	r1, #1
 8001140:	5499      	strb	r1, [r3, r2]
 8001142:	7ee3      	ldrb	r3, [r4, #27]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <acc_service_deactivate+0x3c>
 8001148:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800114a:	f7ff fc87 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 800114e:	76e7      	strb	r7, [r4, #27]
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	2b2a      	cmp	r3, #42	; 0x2a
 8001154:	d804      	bhi.n	8001160 <acc_service_deactivate+0x4c>
 8001156:	0059      	lsls	r1, r3, #1
 8001158:	1d6a      	adds	r2, r5, #5
 800115a:	1852      	adds	r2, r2, r1
 800115c:	2100      	movs	r1, #0
 800115e:	7051      	strb	r1, [r2, #1]
 8001160:	2201      	movs	r2, #1
 8001162:	7262      	strb	r2, [r4, #9]
 8001164:	2b2a      	cmp	r3, #42	; 0x2a
 8001166:	d803      	bhi.n	8001170 <acc_service_deactivate+0x5c>
 8001168:	4093      	lsls	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	3505      	adds	r5, #5
 800116e:	555a      	strb	r2, [r3, r5]
 8001170:	0030      	movs	r0, r6
 8001172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <acc_service_deactivate+0x74>)
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <acc_service_deactivate+0x78>)
 8001178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117a:	4905      	ldr	r1, [pc, #20]	; (8001190 <acc_service_deactivate+0x7c>)
 800117c:	2000      	movs	r0, #0
 800117e:	4798      	blx	r3
 8001180:	2600      	movs	r6, #0
 8001182:	e7f5      	b.n	8001170 <acc_service_deactivate+0x5c>
 8001184:	2000008c 	.word	0x2000008c
 8001188:	200005d0 	.word	0x200005d0
 800118c:	0801d0ff 	.word	0x0801d0ff
 8001190:	0801dde9 	.word	0x0801dde9

08001194 <acc_service_activate>:
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	46c6      	mov	lr, r8
 8001198:	b500      	push	{lr}
 800119a:	0004      	movs	r4, r0
 800119c:	f7ff ff98 	bl	80010d0 <acc_service_handle_valid>
 80011a0:	2800      	cmp	r0, #0
 80011a2:	d10a      	bne.n	80011ba <acc_service_activate+0x26>
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <acc_service_activate+0xdc>)
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <acc_service_activate+0xe0>)
 80011a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011aa:	4933      	ldr	r1, [pc, #204]	; (8001278 <acc_service_activate+0xe4>)
 80011ac:	2000      	movs	r0, #0
 80011ae:	4798      	blx	r3
 80011b0:	2600      	movs	r6, #0
 80011b2:	0030      	movs	r0, r6
 80011b4:	bc04      	pop	{r2}
 80011b6:	4690      	mov	r8, r2
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	4d30      	ldr	r5, [pc, #192]	; (800127c <acc_service_activate+0xe8>)
 80011bc:	792e      	ldrb	r6, [r5, #4]
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d0f0      	beq.n	80011a4 <acc_service_activate+0x10>
 80011c2:	7a63      	ldrb	r3, [r4, #9]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0f4      	beq.n	80011b2 <acc_service_activate+0x1e>
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	2b2a      	cmp	r3, #42	; 0x2a
 80011cc:	d8ea      	bhi.n	80011a4 <acc_service_activate+0x10>
 80011ce:	1d6a      	adds	r2, r5, #5
 80011d0:	0059      	lsls	r1, r3, #1
 80011d2:	5c8f      	ldrb	r7, [r1, r2]
 80011d4:	2f00      	cmp	r7, #0
 80011d6:	d1e5      	bne.n	80011a4 <acc_service_activate+0x10>
 80011d8:	2001      	movs	r0, #1
 80011da:	5488      	strb	r0, [r1, r2]
 80011dc:	1852      	adds	r2, r2, r1
 80011de:	7852      	ldrb	r2, [r2, #1]
 80011e0:	2a00      	cmp	r2, #0
 80011e2:	d13b      	bne.n	800125c <acc_service_activate+0xc8>
 80011e4:	7e22      	ldrb	r2, [r4, #24]
 80011e6:	2a02      	cmp	r2, #2
 80011e8:	d021      	beq.n	800122e <acc_service_activate+0x9a>
 80011ea:	2318      	movs	r3, #24
 80011ec:	4698      	mov	r8, r3
 80011ee:	44a0      	add	r8, r4
 80011f0:	4640      	mov	r0, r8
 80011f2:	f7ff fc43 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 80011f6:	2800      	cmp	r0, #0
 80011f8:	d030      	beq.n	800125c <acc_service_activate+0xc8>
 80011fa:	7ea3      	ldrb	r3, [r4, #26]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d01f      	beq.n	8001240 <acc_service_activate+0xac>
 8001200:	7e23      	ldrb	r3, [r4, #24]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d110      	bne.n	8001228 <acc_service_activate+0x94>
 8001206:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001208:	2200      	movs	r2, #0
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	69e1      	ldr	r1, [r4, #28]
 800120e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001210:	4798      	blx	r3
 8001212:	2800      	cmp	r0, #0
 8001214:	d022      	beq.n	800125c <acc_service_activate+0xc8>
 8001216:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001218:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	4798      	blx	r3
 800121e:	2800      	cmp	r0, #0
 8001220:	d01c      	beq.n	800125c <acc_service_activate+0xc8>
 8001222:	4640      	mov	r0, r8
 8001224:	f7ff fbb8 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	2b2a      	cmp	r3, #42	; 0x2a
 800122c:	d804      	bhi.n	8001238 <acc_service_activate+0xa4>
 800122e:	1d6a      	adds	r2, r5, #5
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	18d3      	adds	r3, r2, r3
 8001234:	2201      	movs	r2, #1
 8001236:	705a      	strb	r2, [r3, #1]
 8001238:	2300      	movs	r3, #0
 800123a:	0037      	movs	r7, r6
 800123c:	7263      	strb	r3, [r4, #9]
 800123e:	e00d      	b.n	800125c <acc_service_activate+0xc8>
 8001240:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001242:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001246:	4798      	blx	r3
 8001248:	2800      	cmp	r0, #0
 800124a:	d007      	beq.n	800125c <acc_service_activate+0xc8>
 800124c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800124e:	2200      	movs	r2, #0
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	69e1      	ldr	r1, [r4, #28]
 8001254:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001256:	4798      	blx	r3
 8001258:	2800      	cmp	r0, #0
 800125a:	d1d1      	bne.n	8001200 <acc_service_activate+0x6c>
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	2b2a      	cmp	r3, #42	; 0x2a
 8001260:	d803      	bhi.n	800126a <acc_service_activate+0xd6>
 8001262:	2200      	movs	r2, #0
 8001264:	3505      	adds	r5, #5
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	555a      	strb	r2, [r3, r5]
 800126a:	2f00      	cmp	r7, #0
 800126c:	d09a      	beq.n	80011a4 <acc_service_activate+0x10>
 800126e:	e7a0      	b.n	80011b2 <acc_service_activate+0x1e>
 8001270:	200005d0 	.word	0x200005d0
 8001274:	0801d11b 	.word	0x0801d11b
 8001278:	0801dde9 	.word	0x0801dde9
 800127c:	2000008c 	.word	0x2000008c

08001280 <acc_service_get_base_configuration>:
 8001280:	b510      	push	{r4, lr}
 8001282:	1e04      	subs	r4, r0, #0
 8001284:	d001      	beq.n	800128a <acc_service_get_base_configuration+0xa>
 8001286:	6900      	ldr	r0, [r0, #16]
 8001288:	bd10      	pop	{r4, pc}
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <acc_service_get_base_configuration+0x24>)
 800128c:	001a      	movs	r2, r3
 800128e:	3230      	adds	r2, #48	; 0x30
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	1e10      	subs	r0, r2, #0
 8001294:	d0f8      	beq.n	8001288 <acc_service_get_base_configuration+0x8>
 8001296:	2001      	movs	r0, #1
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <acc_service_get_base_configuration+0x28>)
 800129c:	4903      	ldr	r1, [pc, #12]	; (80012ac <acc_service_get_base_configuration+0x2c>)
 800129e:	4798      	blx	r3
 80012a0:	0020      	movs	r0, r4
 80012a2:	e7f1      	b.n	8001288 <acc_service_get_base_configuration+0x8>
 80012a4:	200005d0 	.word	0x200005d0
 80012a8:	0801d0c2 	.word	0x0801d0c2
 80012ac:	0801dde9 	.word	0x0801dde9

080012b0 <acc_service_mur_set>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	000d      	movs	r5, r1
 80012b4:	f7ff ffe4 	bl	8001280 <acc_service_get_base_configuration>
 80012b8:	1e04      	subs	r4, r0, #0
 80012ba:	d006      	beq.n	80012ca <acc_service_mur_set+0x1a>
 80012bc:	f7ff fc84 	bl	8000bc8 <configuration_is_valid>
 80012c0:	2800      	cmp	r0, #0
 80012c2:	d001      	beq.n	80012c8 <acc_service_mur_set+0x18>
 80012c4:	3432      	adds	r4, #50	; 0x32
 80012c6:	7025      	strb	r5, [r4, #0]
 80012c8:	bd70      	pop	{r4, r5, r6, pc}
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <acc_service_mur_set+0x2c>)
 80012cc:	3330      	adds	r3, #48	; 0x30
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f9      	beq.n	80012c8 <acc_service_mur_set+0x18>
 80012d4:	f7ff feb6 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 80012d8:	e7f6      	b.n	80012c8 <acc_service_mur_set+0x18>
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	200005d0 	.word	0x200005d0

080012e0 <set_maximize_signal_attenuation>:
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	0005      	movs	r5, r0
 80012e4:	000e      	movs	r6, r1
 80012e6:	f7ff ffcb 	bl	8001280 <acc_service_get_base_configuration>
 80012ea:	1e04      	subs	r4, r0, #0
 80012ec:	d010      	beq.n	8001310 <set_maximize_signal_attenuation+0x30>
 80012ee:	f7ff fc6b 	bl	8000bc8 <configuration_is_valid>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d002      	beq.n	80012fc <set_maximize_signal_attenuation+0x1c>
 80012f6:	0023      	movs	r3, r4
 80012f8:	334a      	adds	r3, #74	; 0x4a
 80012fa:	701e      	strb	r6, [r3, #0]
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	d008      	beq.n	8001312 <set_maximize_signal_attenuation+0x32>
 8001300:	210f      	movs	r1, #15
 8001302:	0020      	movs	r0, r4
 8001304:	f7ff fccb 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001308:	2101      	movs	r1, #1
 800130a:	0020      	movs	r0, r4
 800130c:	f7ff fca8 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001310:	bd70      	pop	{r4, r5, r6, pc}
 8001312:	68ab      	ldr	r3, [r5, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0fb      	beq.n	8001310 <set_maximize_signal_attenuation+0x30>
 8001318:	7969      	ldrb	r1, [r5, #5]
 800131a:	0028      	movs	r0, r5
 800131c:	4798      	blx	r3
 800131e:	e7f7      	b.n	8001310 <set_maximize_signal_attenuation+0x30>

08001320 <acc_service_maximize_signal_attenuation_set>:
 8001320:	b510      	push	{r4, lr}
 8001322:	2800      	cmp	r0, #0
 8001324:	d003      	beq.n	800132e <acc_service_maximize_signal_attenuation_set+0xe>
 8001326:	7301      	strb	r1, [r0, #12]
 8001328:	f7ff ffda 	bl	80012e0 <set_maximize_signal_attenuation>
 800132c:	bd10      	pop	{r4, pc}
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <acc_service_maximize_signal_attenuation_set+0x20>)
 8001330:	3330      	adds	r3, #48	; 0x30
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f9      	beq.n	800132c <acc_service_maximize_signal_attenuation_set+0xc>
 8001338:	f7ff fe84 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 800133c:	e7f6      	b.n	800132c <acc_service_maximize_signal_attenuation_set+0xc>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	200005d0 	.word	0x200005d0

08001344 <acc_service_profile_set>:
 8001344:	b510      	push	{r4, lr}
 8001346:	1e04      	subs	r4, r0, #0
 8001348:	d00c      	beq.n	8001364 <acc_service_profile_set+0x20>
 800134a:	6883      	ldr	r3, [r0, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <acc_service_profile_set+0x20>
 8001350:	7141      	strb	r1, [r0, #5]
 8001352:	4798      	blx	r3
 8001354:	7b23      	ldrb	r3, [r4, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <acc_service_profile_set+0x1e>
 800135a:	2101      	movs	r1, #1
 800135c:	0020      	movs	r0, r4
 800135e:	f7ff ffbf 	bl	80012e0 <set_maximize_signal_attenuation>
 8001362:	bd10      	pop	{r4, pc}
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <acc_service_profile_set+0x30>)
 8001366:	3330      	adds	r3, #48	; 0x30
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f9      	beq.n	8001362 <acc_service_profile_set+0x1e>
 800136e:	f7ff fe69 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 8001372:	e7f6      	b.n	8001362 <acc_service_profile_set+0x1e>
 8001374:	200005d0 	.word	0x200005d0

08001378 <acc_service_asynchronous_measurement_set>:
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	000d      	movs	r5, r1
 800137c:	f7ff ff80 	bl	8001280 <acc_service_get_base_configuration>
 8001380:	0004      	movs	r4, r0
 8001382:	f7ff fc21 	bl	8000bc8 <configuration_is_valid>
 8001386:	2800      	cmp	r0, #0
 8001388:	d001      	beq.n	800138e <acc_service_asynchronous_measurement_set+0x16>
 800138a:	344e      	adds	r4, #78	; 0x4e
 800138c:	7025      	strb	r5, [r4, #0]
 800138e:	bd70      	pop	{r4, r5, r6, pc}

08001390 <acc_service_hw_accelerated_average_samples_set>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	000d      	movs	r5, r1
 8001394:	f7ff ff74 	bl	8001280 <acc_service_get_base_configuration>
 8001398:	0004      	movs	r4, r0
 800139a:	f7ff fc15 	bl	8000bc8 <configuration_is_valid>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d000      	beq.n	80013a4 <acc_service_hw_accelerated_average_samples_set+0x14>
 80013a2:	87a5      	strh	r5, [r4, #60]	; 0x3c
 80013a4:	bd70      	pop	{r4, r5, r6, pc}

080013a6 <acc_service_tx_disable_set>:
 80013a6:	b570      	push	{r4, r5, r6, lr}
 80013a8:	000d      	movs	r5, r1
 80013aa:	f7ff ff69 	bl	8001280 <acc_service_get_base_configuration>
 80013ae:	0004      	movs	r4, r0
 80013b0:	f7ff fc0a 	bl	8000bc8 <configuration_is_valid>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d001      	beq.n	80013bc <acc_service_tx_disable_set+0x16>
 80013b8:	3447      	adds	r4, #71	; 0x47
 80013ba:	7025      	strb	r5, [r4, #0]
 80013bc:	bd70      	pop	{r4, r5, r6, pc}

080013be <acc_service_receiver_gain_set>:
 80013be:	b570      	push	{r4, r5, r6, lr}
 80013c0:	1c0d      	adds	r5, r1, #0
 80013c2:	f7ff ff5d 	bl	8001280 <acc_service_get_base_configuration>
 80013c6:	0004      	movs	r4, r0
 80013c8:	f7ff fbfe 	bl	8000bc8 <configuration_is_valid>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d00e      	beq.n	80013ee <acc_service_receiver_gain_set+0x30>
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <acc_service_receiver_gain_set+0x32>)
 80013d2:	1c28      	adds	r0, r5, #0
 80013d4:	f00f fa9e 	bl	8010914 <__aeabi_fmul>
 80013d8:	1c01      	adds	r1, r0, #0
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <acc_service_receiver_gain_set+0x32>)
 80013dc:	f00f fbcc 	bl	8010b78 <__aeabi_fsub>
 80013e0:	21fc      	movs	r1, #252	; 0xfc
 80013e2:	0589      	lsls	r1, r1, #22
 80013e4:	f00e ffea 	bl	80103bc <__aeabi_fadd>
 80013e8:	f010 f98a 	bl	8011700 <__aeabi_f2iz>
 80013ec:	87e0      	strh	r0, [r4, #62]	; 0x3e
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	41b00000 	.word	0x41b00000

080013f4 <acc_service_power_save_mode_set>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	000d      	movs	r5, r1
 80013f8:	f7ff ff42 	bl	8001280 <acc_service_get_base_configuration>
 80013fc:	0004      	movs	r4, r0
 80013fe:	f7ff fbe3 	bl	8000bc8 <configuration_is_valid>
 8001402:	2800      	cmp	r0, #0
 8001404:	d000      	beq.n	8001408 <acc_service_power_save_mode_set+0x14>
 8001406:	63a5      	str	r5, [r4, #56]	; 0x38
 8001408:	bd70      	pop	{r4, r5, r6, pc}

0800140a <acc_service_repetition_mode_streaming_set>:
 800140a:	b570      	push	{r4, r5, r6, lr}
 800140c:	1c0d      	adds	r5, r1, #0
 800140e:	f7ff ff37 	bl	8001280 <acc_service_get_base_configuration>
 8001412:	0004      	movs	r4, r0
 8001414:	f7ff fbd8 	bl	8000bc8 <configuration_is_valid>
 8001418:	2800      	cmp	r0, #0
 800141a:	d002      	beq.n	8001422 <acc_service_repetition_mode_streaming_set+0x18>
 800141c:	2303      	movs	r3, #3
 800141e:	60a5      	str	r5, [r4, #8]
 8001420:	7123      	strb	r3, [r4, #4]
 8001422:	bd70      	pop	{r4, r5, r6, pc}

08001424 <acc_service_repetition_mode_on_demand_set>:
 8001424:	b510      	push	{r4, lr}
 8001426:	f7ff ff2b 	bl	8001280 <acc_service_get_base_configuration>
 800142a:	f7ff fcac 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 800142e:	bd10      	pop	{r4, pc}

08001430 <acc_service_requested_length_set>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	1c0d      	adds	r5, r1, #0
 8001434:	f7ff ff24 	bl	8001280 <acc_service_get_base_configuration>
 8001438:	0004      	movs	r4, r0
 800143a:	f7ff fbc5 	bl	8000bc8 <configuration_is_valid>
 800143e:	2800      	cmp	r0, #0
 8001440:	d000      	beq.n	8001444 <acc_service_requested_length_set+0x14>
 8001442:	62a5      	str	r5, [r4, #40]	; 0x28
 8001444:	bd70      	pop	{r4, r5, r6, pc}

08001446 <acc_service_requested_start_set>:
 8001446:	b570      	push	{r4, r5, r6, lr}
 8001448:	1c0d      	adds	r5, r1, #0
 800144a:	f7ff ff19 	bl	8001280 <acc_service_get_base_configuration>
 800144e:	0004      	movs	r4, r0
 8001450:	f7ff fbba 	bl	8000bc8 <configuration_is_valid>
 8001454:	2800      	cmp	r0, #0
 8001456:	d000      	beq.n	800145a <acc_service_requested_start_set+0x14>
 8001458:	6265      	str	r5, [r4, #36]	; 0x24
 800145a:	bd70      	pop	{r4, r5, r6, pc}

0800145c <get_sparse_configuration>:
 800145c:	b510      	push	{r4, lr}
 800145e:	1e04      	subs	r4, r0, #0
 8001460:	d004      	beq.n	800146c <get_sparse_configuration+0x10>
 8001462:	7903      	ldrb	r3, [r0, #4]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d10d      	bne.n	8001484 <get_sparse_configuration+0x28>
 8001468:	0020      	movs	r0, r4
 800146a:	bd10      	pop	{r4, pc}
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <get_sparse_configuration+0x2c>)
 800146e:	001a      	movs	r2, r3
 8001470:	3230      	adds	r2, #48	; 0x30
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	2a00      	cmp	r2, #0
 8001476:	d0f7      	beq.n	8001468 <get_sparse_configuration+0xc>
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <get_sparse_configuration+0x30>)
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <get_sparse_configuration+0x34>)
 800147e:	2001      	movs	r0, #1
 8001480:	4798      	blx	r3
 8001482:	e7f1      	b.n	8001468 <get_sparse_configuration+0xc>
 8001484:	2400      	movs	r4, #0
 8001486:	e7ef      	b.n	8001468 <get_sparse_configuration+0xc>
 8001488:	200005d0 	.word	0x200005d0
 800148c:	0801d0c2 	.word	0x0801d0c2
 8001490:	0801d135 	.word	0x0801d135

08001494 <set_configuration_for_profile.lto_priv.155>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	000d      	movs	r5, r1
 8001498:	f7ff ffe0 	bl	800145c <get_sparse_configuration>
 800149c:	2800      	cmp	r0, #0
 800149e:	d011      	beq.n	80014c4 <set_configuration_for_profile.lto_priv.155+0x30>
 80014a0:	301c      	adds	r0, #28
 80014a2:	0004      	movs	r4, r0
 80014a4:	1e68      	subs	r0, r5, #1
 80014a6:	2804      	cmp	r0, #4
 80014a8:	d80c      	bhi.n	80014c4 <set_configuration_for_profile.lto_priv.155+0x30>
 80014aa:	f00f fd51 	bl	8010f50 <__gnu_thumb1_case_uqi>
 80014ae:	0c03      	.short	0x0c03
 80014b0:	170e      	.short	0x170e
 80014b2:	20          	.byte	0x20
 80014b3:	00          	.byte	0x00
 80014b4:	2100      	movs	r1, #0
 80014b6:	0020      	movs	r0, r4
 80014b8:	f7ff fbdc 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 80014bc:	2100      	movs	r1, #0
 80014be:	0020      	movs	r0, r4
 80014c0:	f7ff fbed 	bl	8000c9e <acc_base_configuration_integrator_set>
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
 80014c6:	2107      	movs	r1, #7
 80014c8:	e7f5      	b.n	80014b6 <set_configuration_for_profile.lto_priv.155+0x22>
 80014ca:	0020      	movs	r0, r4
 80014cc:	2109      	movs	r1, #9
 80014ce:	f7ff fbd1 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 80014d2:	2103      	movs	r1, #3
 80014d4:	0020      	movs	r0, r4
 80014d6:	f7ff fbe2 	bl	8000c9e <acc_base_configuration_integrator_set>
 80014da:	e7f3      	b.n	80014c4 <set_configuration_for_profile.lto_priv.155+0x30>
 80014dc:	210c      	movs	r1, #12
 80014de:	0020      	movs	r0, r4
 80014e0:	f7ff fbc8 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 80014e4:	2106      	movs	r1, #6
 80014e6:	0020      	movs	r0, r4
 80014e8:	f7ff fbd9 	bl	8000c9e <acc_base_configuration_integrator_set>
 80014ec:	e7ea      	b.n	80014c4 <set_configuration_for_profile.lto_priv.155+0x30>
 80014ee:	2110      	movs	r1, #16
 80014f0:	e7f5      	b.n	80014de <set_configuration_for_profile.lto_priv.155+0x4a>

080014f2 <acc_service_sparse_get_next_by_reference>:
 80014f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f4:	46c6      	mov	lr, r8
 80014f6:	2500      	movs	r5, #0
 80014f8:	b500      	push	{lr}
 80014fa:	0006      	movs	r6, r0
 80014fc:	b08a      	sub	sp, #40	; 0x28
 80014fe:	42a9      	cmp	r1, r5
 8001500:	d01e      	beq.n	8001540 <acc_service_sparse_get_next_by_reference+0x4e>
 8001502:	2303      	movs	r3, #3
 8001504:	6808      	ldr	r0, [r1, #0]
 8001506:	ac03      	add	r4, sp, #12
 8001508:	6060      	str	r0, [r4, #4]
 800150a:	0030      	movs	r0, r6
 800150c:	60e5      	str	r5, [r4, #12]
 800150e:	7625      	strb	r5, [r4, #24]
 8001510:	7665      	strb	r5, [r4, #25]
 8001512:	76a5      	strb	r5, [r4, #26]
 8001514:	7023      	strb	r3, [r4, #0]
 8001516:	60a1      	str	r1, [r4, #8]
 8001518:	6122      	str	r2, [r4, #16]
 800151a:	6163      	str	r3, [r4, #20]
 800151c:	f7ff fdd8 	bl	80010d0 <acc_service_handle_valid>
 8001520:	7ea5      	ldrb	r5, [r4, #26]
 8001522:	2d00      	cmp	r5, #0
 8001524:	d011      	beq.n	800154a <acc_service_sparse_get_next_by_reference+0x58>
 8001526:	6863      	ldr	r3, [r4, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <acc_service_sparse_get_next_by_reference+0x40>
 800152c:	68e3      	ldr	r3, [r4, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d115      	bne.n	800155e <acc_service_sparse_get_next_by_reference+0x6c>
 8001532:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <acc_service_sparse_get_next_by_reference+0xd2>)
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <acc_service_sparse_get_next_by_reference+0xd6>)
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	4924      	ldr	r1, [pc, #144]	; (80015cc <acc_service_sparse_get_next_by_reference+0xda>)
 800153a:	2000      	movs	r0, #0
 800153c:	4798      	blx	r3
 800153e:	2500      	movs	r5, #0
 8001540:	0028      	movs	r0, r5
 8001542:	b00a      	add	sp, #40	; 0x28
 8001544:	bc04      	pop	{r2}
 8001546:	4690      	mov	r8, r2
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	68a3      	ldr	r3, [r4, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d106      	bne.n	800155e <acc_service_sparse_get_next_by_reference+0x6c>
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <acc_service_sparse_get_next_by_reference+0xd2>)
 8001552:	4a1f      	ldr	r2, [pc, #124]	; (80015d0 <acc_service_sparse_get_next_by_reference+0xde>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	491d      	ldr	r1, [pc, #116]	; (80015cc <acc_service_sparse_get_next_by_reference+0xda>)
 8001558:	0028      	movs	r0, r5
 800155a:	4798      	blx	r3
 800155c:	e7f0      	b.n	8001540 <acc_service_sparse_get_next_by_reference+0x4e>
 800155e:	2800      	cmp	r0, #0
 8001560:	d101      	bne.n	8001566 <acc_service_sparse_get_next_by_reference+0x74>
 8001562:	2500      	movs	r5, #0
 8001564:	e7ec      	b.n	8001540 <acc_service_sparse_get_next_by_reference+0x4e>
 8001566:	7a33      	ldrb	r3, [r6, #8]
 8001568:	7822      	ldrb	r2, [r4, #0]
 800156a:	4293      	cmp	r3, r2
 800156c:	d007      	beq.n	800157e <acc_service_sparse_get_next_by_reference+0x8c>
 800156e:	9200      	str	r2, [sp, #0]
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <acc_service_sparse_get_next_by_reference+0xd2>)
 8001572:	4916      	ldr	r1, [pc, #88]	; (80015cc <acc_service_sparse_get_next_by_reference+0xda>)
 8001574:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8001576:	2000      	movs	r0, #0
 8001578:	4a16      	ldr	r2, [pc, #88]	; (80015d4 <acc_service_sparse_get_next_by_reference+0xe2>)
 800157a:	47a0      	blx	r4
 800157c:	e7f1      	b.n	8001562 <acc_service_sparse_get_next_by_reference+0x70>
 800157e:	7e27      	ldrb	r7, [r4, #24]
 8001580:	2f00      	cmp	r7, #0
 8001582:	d004      	beq.n	800158e <acc_service_sparse_get_next_by_reference+0x9c>
 8001584:	0030      	movs	r0, r6
 8001586:	f7ff fe05 	bl	8001194 <acc_service_activate>
 800158a:	1e07      	subs	r7, r0, #0
 800158c:	d0e9      	beq.n	8001562 <acc_service_sparse_get_next_by_reference+0x70>
 800158e:	7a73      	ldrb	r3, [r6, #9]
 8001590:	4698      	mov	r8, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00c      	beq.n	80015b0 <acc_service_sparse_get_next_by_reference+0xbe>
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <acc_service_sparse_get_next_by_reference+0xd2>)
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <acc_service_sparse_get_next_by_reference+0xe6>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	490b      	ldr	r1, [pc, #44]	; (80015cc <acc_service_sparse_get_next_by_reference+0xda>)
 800159e:	2000      	movs	r0, #0
 80015a0:	4798      	blx	r3
 80015a2:	2500      	movs	r5, #0
 80015a4:	2f00      	cmp	r7, #0
 80015a6:	d0cb      	beq.n	8001540 <acc_service_sparse_get_next_by_reference+0x4e>
 80015a8:	0030      	movs	r0, r6
 80015aa:	f7ff fdb3 	bl	8001114 <acc_service_deactivate>
 80015ae:	e7c7      	b.n	8001540 <acc_service_sparse_get_next_by_reference+0x4e>
 80015b0:	2501      	movs	r5, #1
 80015b2:	6933      	ldr	r3, [r6, #16]
 80015b4:	6174      	str	r4, [r6, #20]
 80015b6:	cb05      	ldmia	r3!, {r0, r2}
 80015b8:	4790      	blx	r2
 80015ba:	7e63      	ldrb	r3, [r4, #25]
 80015bc:	405d      	eors	r5, r3
 80015be:	4643      	mov	r3, r8
 80015c0:	6173      	str	r3, [r6, #20]
 80015c2:	e7ef      	b.n	80015a4 <acc_service_sparse_get_next_by_reference+0xb2>
 80015c4:	200005d0 	.word	0x200005d0
 80015c8:	0801d144 	.word	0x0801d144
 80015cc:	0801dde9 	.word	0x0801dde9
 80015d0:	0801d161 	.word	0x0801d161
 80015d4:	0801d176 	.word	0x0801d176
 80015d8:	0801d192 	.word	0x0801d192

080015dc <acc_service_sparse_get_metadata>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	000c      	movs	r4, r1
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d017      	beq.n	8001614 <acc_service_sparse_get_metadata+0x38>
 80015e4:	7a03      	ldrb	r3, [r0, #8]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d114      	bne.n	8001614 <acc_service_sparse_get_metadata+0x38>
 80015ea:	2900      	cmp	r1, #0
 80015ec:	d012      	beq.n	8001614 <acc_service_sparse_get_metadata+0x38>
 80015ee:	6903      	ldr	r3, [r0, #16]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80015f6:	600a      	str	r2, [r1, #0]
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	604a      	str	r2, [r1, #4]
 80015fc:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80015fe:	810a      	strh	r2, [r1, #8]
 8001600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001602:	60ca      	str	r2, [r1, #12]
 8001604:	4904      	ldr	r1, [pc, #16]	; (8001618 <acc_service_sparse_get_metadata+0x3c>)
 8001606:	f00f f985 	bl	8010914 <__aeabi_fmul>
 800160a:	21fc      	movs	r1, #252	; 0xfc
 800160c:	0589      	lsls	r1, r1, #22
 800160e:	f00f f981 	bl	8010914 <__aeabi_fmul>
 8001612:	6120      	str	r0, [r4, #16]
 8001614:	bd10      	pop	{r4, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	4d8ef3c2 	.word	0x4d8ef3c2

0800161c <acc_service_sparse_downsampling_factor_set>:
 800161c:	b570      	push	{r4, r5, r6, lr}
 800161e:	0004      	movs	r4, r0
 8001620:	000d      	movs	r5, r1
 8001622:	f7ff fd1d 	bl	8001060 <acc_service_configuration_valid>
 8001626:	2800      	cmp	r0, #0
 8001628:	d003      	beq.n	8001632 <acc_service_sparse_downsampling_factor_set+0x16>
 800162a:	0029      	movs	r1, r5
 800162c:	6920      	ldr	r0, [r4, #16]
 800162e:	f7ff faf7 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8001632:	bd70      	pop	{r4, r5, r6, pc}

08001634 <acc_service_sparse_sampling_mode_set>:
 8001634:	b570      	push	{r4, r5, r6, lr}
 8001636:	0004      	movs	r4, r0
 8001638:	000d      	movs	r5, r1
 800163a:	f7ff ff0f 	bl	800145c <get_sparse_configuration>
 800163e:	2800      	cmp	r0, #0
 8001640:	d017      	beq.n	8001672 <acc_service_sparse_sampling_mode_set+0x3e>
 8001642:	2d00      	cmp	r5, #0
 8001644:	d00d      	beq.n	8001662 <acc_service_sparse_sampling_mode_set+0x2e>
 8001646:	2d01      	cmp	r5, #1
 8001648:	d00b      	beq.n	8001662 <acc_service_sparse_sampling_mode_set+0x2e>
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <acc_service_sparse_sampling_mode_set+0x40>)
 800164c:	001a      	movs	r2, r3
 800164e:	3230      	adds	r2, #48	; 0x30
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	2a00      	cmp	r2, #0
 8001654:	d00d      	beq.n	8001672 <acc_service_sparse_sampling_mode_set+0x3e>
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <acc_service_sparse_sampling_mode_set+0x44>)
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <acc_service_sparse_sampling_mode_set+0x48>)
 800165c:	2001      	movs	r0, #1
 800165e:	4798      	blx	r3
 8001660:	e007      	b.n	8001672 <acc_service_sparse_sampling_mode_set+0x3e>
 8001662:	6924      	ldr	r4, [r4, #16]
 8001664:	0020      	movs	r0, r4
 8001666:	f7ff faaf 	bl	8000bc8 <configuration_is_valid>
 800166a:	2800      	cmp	r0, #0
 800166c:	d001      	beq.n	8001672 <acc_service_sparse_sampling_mode_set+0x3e>
 800166e:	346a      	adds	r4, #106	; 0x6a
 8001670:	7025      	strb	r5, [r4, #0]
 8001672:	bd70      	pop	{r4, r5, r6, pc}
 8001674:	200005d0 	.word	0x200005d0
 8001678:	0801d1a8 	.word	0x0801d1a8
 800167c:	0801d135 	.word	0x0801d135

08001680 <acc_service_sparse_configuration_sweep_rate_set>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	0004      	movs	r4, r0
 8001684:	1c0d      	adds	r5, r1, #0
 8001686:	f7ff fceb 	bl	8001060 <acc_service_configuration_valid>
 800168a:	2800      	cmp	r0, #0
 800168c:	d006      	beq.n	800169c <acc_service_sparse_configuration_sweep_rate_set+0x1c>
 800168e:	6924      	ldr	r4, [r4, #16]
 8001690:	0020      	movs	r0, r4
 8001692:	f7ff fa99 	bl	8000bc8 <configuration_is_valid>
 8001696:	2800      	cmp	r0, #0
 8001698:	d000      	beq.n	800169c <acc_service_sparse_configuration_sweep_rate_set+0x1c>
 800169a:	6665      	str	r5, [r4, #100]	; 0x64
 800169c:	bd70      	pop	{r4, r5, r6, pc}

0800169e <acc_service_sparse_configuration_sweeps_per_frame_set>:
 800169e:	b570      	push	{r4, r5, r6, lr}
 80016a0:	0004      	movs	r4, r0
 80016a2:	000d      	movs	r5, r1
 80016a4:	f7ff fcdc 	bl	8001060 <acc_service_configuration_valid>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d007      	beq.n	80016bc <acc_service_sparse_configuration_sweeps_per_frame_set+0x1e>
 80016ac:	6924      	ldr	r4, [r4, #16]
 80016ae:	0020      	movs	r0, r4
 80016b0:	f7ff fa8a 	bl	8000bc8 <configuration_is_valid>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d001      	beq.n	80016bc <acc_service_sparse_configuration_sweeps_per_frame_set+0x1e>
 80016b8:	3460      	adds	r4, #96	; 0x60
 80016ba:	8025      	strh	r5, [r4, #0]
 80016bc:	bd70      	pop	{r4, r5, r6, pc}

080016be <acc_service_sparse_configuration_sweeps_per_frame_get>:
 80016be:	b510      	push	{r4, lr}
 80016c0:	0004      	movs	r4, r0
 80016c2:	f7ff fccd 	bl	8001060 <acc_service_configuration_valid>
 80016c6:	0003      	movs	r3, r0
 80016c8:	2000      	movs	r0, #0
 80016ca:	4283      	cmp	r3, r0
 80016cc:	d002      	beq.n	80016d4 <acc_service_sparse_configuration_sweeps_per_frame_get+0x16>
 80016ce:	6920      	ldr	r0, [r4, #16]
 80016d0:	f7ff fabb 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 80016d4:	bd10      	pop	{r4, pc}

080016d6 <destroy_handle>:
 80016d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d8:	46c6      	mov	lr, r8
 80016da:	4b16      	ldr	r3, [pc, #88]	; (8001734 <destroy_handle+0x5e>)
 80016dc:	4e16      	ldr	r6, [pc, #88]	; (8001738 <destroy_handle+0x62>)
 80016de:	4698      	mov	r8, r3
 80016e0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80016e2:	0033      	movs	r3, r6
 80016e4:	b500      	push	{lr}
 80016e6:	3330      	adds	r3, #48	; 0x30
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	0005      	movs	r5, r0
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d905      	bls.n	80016fc <destroy_handle+0x26>
 80016f0:	6843      	ldr	r3, [r0, #4]
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <destroy_handle+0x66>)
 80016f4:	4912      	ldr	r1, [pc, #72]	; (8001740 <destroy_handle+0x6a>)
 80016f6:	2004      	movs	r0, #4
 80016f8:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80016fa:	47b8      	blx	r7
 80016fc:	2300      	movs	r3, #0
 80016fe:	2c00      	cmp	r4, #0
 8001700:	d00d      	beq.n	800171e <destroy_handle+0x48>
 8001702:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001704:	42ac      	cmp	r4, r5
 8001706:	d107      	bne.n	8001718 <destroy_handle+0x42>
 8001708:	2b00      	cmp	r3, #0
 800170a:	d111      	bne.n	8001730 <destroy_handle+0x5a>
 800170c:	4643      	mov	r3, r8
 800170e:	661a      	str	r2, [r3, #96]	; 0x60
 8001710:	0020      	movs	r0, r4
 8001712:	f7ff f95f 	bl	80009d4 <acc_rss_integration_mem_free>
 8001716:	e008      	b.n	800172a <destroy_handle+0x54>
 8001718:	0023      	movs	r3, r4
 800171a:	0014      	movs	r4, r2
 800171c:	e7ef      	b.n	80016fe <destroy_handle+0x28>
 800171e:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8001720:	686b      	ldr	r3, [r5, #4]
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <destroy_handle+0x6e>)
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <destroy_handle+0x6a>)
 8001726:	0020      	movs	r0, r4
 8001728:	47b0      	blx	r6
 800172a:	bc04      	pop	{r2}
 800172c:	4690      	mov	r8, r2
 800172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
 8001732:	e7ed      	b.n	8001710 <destroy_handle+0x3a>
 8001734:	2000008c 	.word	0x2000008c
 8001738:	200005d0 	.word	0x200005d0
 800173c:	0801d1cd 	.word	0x0801d1cd
 8001740:	0801d1ee 	.word	0x0801d1ee
 8001744:	0801d1fe 	.word	0x0801d1fe

08001748 <acc_service_destroy>:
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <acc_service_destroy+0x50>)
 800174a:	b510      	push	{r4, lr}
 800174c:	335c      	adds	r3, #92	; 0x5c
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	0004      	movs	r4, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d014      	beq.n	8001780 <acc_service_destroy+0x38>
 8001756:	2800      	cmp	r0, #0
 8001758:	d011      	beq.n	800177e <acc_service_destroy+0x36>
 800175a:	6800      	ldr	r0, [r0, #0]
 800175c:	f7ff fcb8 	bl	80010d0 <acc_service_handle_valid>
 8001760:	2800      	cmp	r0, #0
 8001762:	d00c      	beq.n	800177e <acc_service_destroy+0x36>
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	f7ff fcd5 	bl	8001114 <acc_service_deactivate>
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	68c3      	ldr	r3, [r0, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d000      	beq.n	8001774 <acc_service_destroy+0x2c>
 8001772:	4798      	blx	r3
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f7ff ffae 	bl	80016d6 <destroy_handle>
 800177a:	2300      	movs	r3, #0
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	bd10      	pop	{r4, pc}
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <acc_service_destroy+0x54>)
 8001782:	001a      	movs	r2, r3
 8001784:	3230      	adds	r2, #48	; 0x30
 8001786:	7812      	ldrb	r2, [r2, #0]
 8001788:	2a00      	cmp	r2, #0
 800178a:	d0f8      	beq.n	800177e <acc_service_destroy+0x36>
 800178c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <acc_service_destroy+0x58>)
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <acc_service_destroy+0x5c>)
 8001792:	2001      	movs	r0, #1
 8001794:	4798      	blx	r3
 8001796:	e7f2      	b.n	800177e <acc_service_destroy+0x36>
 8001798:	2000008c 	.word	0x2000008c
 800179c:	200005d0 	.word	0x200005d0
 80017a0:	0801d232 	.word	0x0801d232
 80017a4:	0801d1ee 	.word	0x0801d1ee

080017a8 <get_and_validate_envelope_configuration>:
 80017a8:	b510      	push	{r4, lr}
 80017aa:	0004      	movs	r4, r0
 80017ac:	f7ff fc58 	bl	8001060 <acc_service_configuration_valid>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d002      	beq.n	80017ba <get_and_validate_envelope_configuration+0x12>
 80017b4:	7923      	ldrb	r3, [r4, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <get_and_validate_envelope_configuration+0x2a>
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <get_and_validate_envelope_configuration+0x30>)
 80017bc:	001a      	movs	r2, r3
 80017be:	3230      	adds	r2, #48	; 0x30
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	1e14      	subs	r4, r2, #0
 80017c4:	d005      	beq.n	80017d2 <get_and_validate_envelope_configuration+0x2a>
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <get_and_validate_envelope_configuration+0x34>)
 80017ca:	4905      	ldr	r1, [pc, #20]	; (80017e0 <get_and_validate_envelope_configuration+0x38>)
 80017cc:	2001      	movs	r0, #1
 80017ce:	4798      	blx	r3
 80017d0:	2400      	movs	r4, #0
 80017d2:	0020      	movs	r0, r4
 80017d4:	bd10      	pop	{r4, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	200005d0 	.word	0x200005d0
 80017dc:	0801d0c2 	.word	0x0801d0c2
 80017e0:	0801d244 	.word	0x0801d244

080017e4 <set_configuration_for_profile.lto_priv.154>:
 80017e4:	b570      	push	{r4, r5, r6, lr}
 80017e6:	000e      	movs	r6, r1
 80017e8:	f7ff ffde 	bl	80017a8 <get_and_validate_envelope_configuration>
 80017ec:	1e05      	subs	r5, r0, #0
 80017ee:	d018      	beq.n	8001822 <set_configuration_for_profile.lto_priv.154+0x3e>
 80017f0:	0004      	movs	r4, r0
 80017f2:	1e70      	subs	r0, r6, #1
 80017f4:	341c      	adds	r4, #28
 80017f6:	2804      	cmp	r0, #4
 80017f8:	d813      	bhi.n	8001822 <set_configuration_for_profile.lto_priv.154+0x3e>
 80017fa:	358c      	adds	r5, #140	; 0x8c
 80017fc:	f00f fba8 	bl	8010f50 <__gnu_thumb1_case_uqi>
 8001800:	23211203 	.word	0x23211203
 8001804:	32          	.byte	0x32
 8001805:	00          	.byte	0x00
 8001806:	2100      	movs	r1, #0
 8001808:	0020      	movs	r0, r4
 800180a:	f7ff fa33 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800180e:	2100      	movs	r1, #0
 8001810:	0020      	movs	r0, r4
 8001812:	f7ff fa44 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001816:	2103      	movs	r1, #3
 8001818:	0020      	movs	r0, r4
 800181a:	f7ff fa21 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <set_configuration_for_profile.lto_priv.154+0x84>)
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	bd70      	pop	{r4, r5, r6, pc}
 8001824:	2107      	movs	r1, #7
 8001826:	0020      	movs	r0, r4
 8001828:	f7ff fa24 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800182c:	2106      	movs	r1, #6
 800182e:	0020      	movs	r0, r4
 8001830:	f7ff fa35 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001834:	2109      	movs	r1, #9
 8001836:	0020      	movs	r0, r4
 8001838:	f7ff fa12 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <set_configuration_for_profile.lto_priv.154+0x88>)
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	e7ef      	b.n	8001822 <set_configuration_for_profile.lto_priv.154+0x3e>
 8001842:	2109      	movs	r1, #9
 8001844:	e7ef      	b.n	8001826 <set_configuration_for_profile.lto_priv.154+0x42>
 8001846:	210c      	movs	r1, #12
 8001848:	0020      	movs	r0, r4
 800184a:	f7ff fa13 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800184e:	2106      	movs	r1, #6
 8001850:	0020      	movs	r0, r4
 8001852:	f7ff fa24 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001856:	2101      	movs	r1, #1
 8001858:	0020      	movs	r0, r4
 800185a:	f7ff fa01 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 800185e:	4b03      	ldr	r3, [pc, #12]	; (800186c <set_configuration_for_profile.lto_priv.154+0x88>)
 8001860:	602b      	str	r3, [r5, #0]
 8001862:	e7de      	b.n	8001822 <set_configuration_for_profile.lto_priv.154+0x3e>
 8001864:	2110      	movs	r1, #16
 8001866:	e7ef      	b.n	8001848 <set_configuration_for_profile.lto_priv.154+0x64>
 8001868:	3c8461fa 	.word	0x3c8461fa
 800186c:	3b843809 	.word	0x3b843809

08001870 <acc_service_envelope_get_metadata>:
 8001870:	b510      	push	{r4, lr}
 8001872:	000c      	movs	r4, r1
 8001874:	2800      	cmp	r0, #0
 8001876:	d018      	beq.n	80018aa <acc_service_envelope_get_metadata+0x3a>
 8001878:	7a03      	ldrb	r3, [r0, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <acc_service_envelope_get_metadata+0x3a>
 800187e:	2900      	cmp	r1, #0
 8001880:	d013      	beq.n	80018aa <acc_service_envelope_get_metadata+0x3a>
 8001882:	6903      	ldr	r3, [r0, #16]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699a      	ldr	r2, [r3, #24]
 8001888:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800188a:	600a      	str	r2, [r1, #0]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	604a      	str	r2, [r1, #4]
 8001890:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001892:	810a      	strh	r2, [r1, #8]
 8001894:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001896:	3a01      	subs	r2, #1
 8001898:	814a      	strh	r2, [r1, #10]
 800189a:	4904      	ldr	r1, [pc, #16]	; (80018ac <acc_service_envelope_get_metadata+0x3c>)
 800189c:	f00f f83a 	bl	8010914 <__aeabi_fmul>
 80018a0:	21fc      	movs	r1, #252	; 0xfc
 80018a2:	0589      	lsls	r1, r1, #22
 80018a4:	f00f f836 	bl	8010914 <__aeabi_fmul>
 80018a8:	60e0      	str	r0, [r4, #12]
 80018aa:	bd10      	pop	{r4, pc}
 80018ac:	4d8ef3c2 	.word	0x4d8ef3c2

080018b0 <acc_service_envelope_noise_level_normalization_set>:
 80018b0:	b570      	push	{r4, r5, r6, lr}
 80018b2:	0004      	movs	r4, r0
 80018b4:	000d      	movs	r5, r1
 80018b6:	f7ff ff77 	bl	80017a8 <get_and_validate_envelope_configuration>
 80018ba:	2800      	cmp	r0, #0
 80018bc:	d009      	beq.n	80018d2 <acc_service_envelope_noise_level_normalization_set+0x22>
 80018be:	0020      	movs	r0, r4
 80018c0:	f7ff fcde 	bl	8001280 <acc_service_get_base_configuration>
 80018c4:	0004      	movs	r4, r0
 80018c6:	f7ff f97f 	bl	8000bc8 <configuration_is_valid>
 80018ca:	2800      	cmp	r0, #0
 80018cc:	d001      	beq.n	80018d2 <acc_service_envelope_noise_level_normalization_set+0x22>
 80018ce:	3449      	adds	r4, #73	; 0x49
 80018d0:	7025      	strb	r5, [r4, #0]
 80018d2:	bd70      	pop	{r4, r5, r6, pc}

080018d4 <acc_service_envelope_running_average_factor_set>:
 80018d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d6:	0005      	movs	r5, r0
 80018d8:	1c0c      	adds	r4, r1, #0
 80018da:	f7ff ff65 	bl	80017a8 <get_and_validate_envelope_configuration>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d017      	beq.n	8001912 <acc_service_envelope_running_average_factor_set+0x3e>
 80018e2:	2100      	movs	r1, #0
 80018e4:	1c20      	adds	r0, r4, #0
 80018e6:	f00f fd0d 	bl	8011304 <__aeabi_fcmplt>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d106      	bne.n	80018fc <acc_service_envelope_running_average_factor_set+0x28>
 80018ee:	21fe      	movs	r1, #254	; 0xfe
 80018f0:	1c20      	adds	r0, r4, #0
 80018f2:	0589      	lsls	r1, r1, #22
 80018f4:	f00f fd1a 	bl	801132c <__aeabi_fcmpgt>
 80018f8:	1e07      	subs	r7, r0, #0
 80018fa:	d00b      	beq.n	8001914 <acc_service_envelope_running_average_factor_set+0x40>
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <acc_service_envelope_running_average_factor_set+0x70>)
 80018fe:	001a      	movs	r2, r3
 8001900:	3230      	adds	r2, #48	; 0x30
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	2a00      	cmp	r2, #0
 8001906:	d004      	beq.n	8001912 <acc_service_envelope_running_average_factor_set+0x3e>
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <acc_service_envelope_running_average_factor_set+0x74>)
 800190c:	490f      	ldr	r1, [pc, #60]	; (800194c <acc_service_envelope_running_average_factor_set+0x78>)
 800190e:	2001      	movs	r0, #1
 8001910:	4798      	blx	r3
 8001912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001914:	0028      	movs	r0, r5
 8001916:	f7ff fcb3 	bl	8001280 <acc_service_get_base_configuration>
 800191a:	0005      	movs	r5, r0
 800191c:	f7ff f954 	bl	8000bc8 <configuration_is_valid>
 8001920:	2800      	cmp	r0, #0
 8001922:	d0f6      	beq.n	8001912 <acc_service_envelope_running_average_factor_set+0x3e>
 8001924:	20fe      	movs	r0, #254	; 0xfe
 8001926:	1c21      	adds	r1, r4, #0
 8001928:	0580      	lsls	r0, r0, #22
 800192a:	f00f f925 	bl	8010b78 <__aeabi_fsub>
 800192e:	2100      	movs	r1, #0
 8001930:	6168      	str	r0, [r5, #20]
 8001932:	1c20      	adds	r0, r4, #0
 8001934:	2601      	movs	r6, #1
 8001936:	f00f fcdf 	bl	80112f8 <__aeabi_fcmpeq>
 800193a:	2800      	cmp	r0, #0
 800193c:	d000      	beq.n	8001940 <acc_service_envelope_running_average_factor_set+0x6c>
 800193e:	1c3e      	adds	r6, r7, #0
 8001940:	762e      	strb	r6, [r5, #24]
 8001942:	e7e6      	b.n	8001912 <acc_service_envelope_running_average_factor_set+0x3e>
 8001944:	200005d0 	.word	0x200005d0
 8001948:	0801d255 	.word	0x0801d255
 800194c:	0801d244 	.word	0x0801d244

08001950 <acc_service_envelope_downsampling_factor_set>:
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	0004      	movs	r4, r0
 8001954:	000d      	movs	r5, r1
 8001956:	f7ff ff27 	bl	80017a8 <get_and_validate_envelope_configuration>
 800195a:	2800      	cmp	r0, #0
 800195c:	d003      	beq.n	8001966 <acc_service_envelope_downsampling_factor_set+0x16>
 800195e:	0029      	movs	r1, r5
 8001960:	6920      	ldr	r0, [r4, #16]
 8001962:	f7ff f95d 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8001966:	bd70      	pop	{r4, r5, r6, pc}

08001968 <acc_rss_override_sensor_id_check_at_creation>:
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <acc_rss_override_sensor_id_check_at_creation+0x8>)
 800196a:	335c      	adds	r3, #92	; 0x5c
 800196c:	7058      	strb	r0, [r3, #1]
 800196e:	4770      	bx	lr
 8001970:	2000008c 	.word	0x2000008c

08001974 <null_data>:
		meansqdist /= mass;
	}
	return meansqdist;
}

void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	0006      	movs	r6, r0
 800197a:	1c0d      	adds	r5, r1, #0
 800197c:	b28c      	uxth	r4, r1
 800197e:	a801      	add	r0, sp, #4
 8001980:	8001      	strh	r1, [r0, #0]
 8001982:	b291      	uxth	r1, r2
 8001984:	466f      	mov	r7, sp
 8001986:	803a      	strh	r2, [r7, #0]
 8001988:	1c1f      	adds	r7, r3, #0
	uint8_t sweeps = data_size.x1;
 800198a:	b2ed      	uxtb	r5, r5
	uint8_t bins = data_size.x2;
 800198c:	0a24      	lsrs	r4, r4, #8
	
	uint8_t msweep = max.x1;
 800198e:	b2d0      	uxtb	r0, r2
	uint8_t mbin = max.x2;
 8001990:	0a09      	lsrs	r1, r1, #8
	
	uint16_t apex = data[msweep][mbin];
 8001992:	0080      	lsls	r0, r0, #2
 8001994:	5983      	ldr	r3, [r0, r6]
 8001996:	0049      	lsls	r1, r1, #1
 8001998:	5a58      	ldrh	r0, [r3, r1]
	uint16_t halfpex = apex*threshold;
 800199a:	f00f fed1 	bl	8011740 <__aeabi_i2f>
 800199e:	1c39      	adds	r1, r7, #0
 80019a0:	f00e ffb8 	bl	8010914 <__aeabi_fmul>
 80019a4:	f00f fcf6 	bl	8011394 <__aeabi_f2uiz>
 80019a8:	b280      	uxth	r0, r0
	
	for(uint16_t i = 0; i<bins; i++){
 80019aa:	2700      	movs	r7, #0
 80019ac:	e010      	b.n	80019d0 <null_data+0x5c>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80019ae:	3301      	adds	r3, #1
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	086a      	lsrs	r2, r5, #1
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d909      	bls.n	80019cc <null_data+0x58>
		if(data[j][i] > halfpex){
 80019b8:	009a      	lsls	r2, r3, #2
 80019ba:	5992      	ldr	r2, [r2, r6]
 80019bc:	0079      	lsls	r1, r7, #1
 80019be:	1852      	adds	r2, r2, r1
 80019c0:	8811      	ldrh	r1, [r2, #0]
 80019c2:	4281      	cmp	r1, r0
 80019c4:	d9f3      	bls.n	80019ae <null_data+0x3a>
			data[j][i] = 0;
 80019c6:	2100      	movs	r1, #0
 80019c8:	8011      	strh	r1, [r2, #0]
 80019ca:	e7f0      	b.n	80019ae <null_data+0x3a>
	for(uint16_t i = 0; i<bins; i++){
 80019cc:	3701      	adds	r7, #1
 80019ce:	b2bf      	uxth	r7, r7
 80019d0:	b2a3      	uxth	r3, r4
 80019d2:	42bb      	cmp	r3, r7
 80019d4:	d901      	bls.n	80019da <null_data+0x66>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	e7eb      	b.n	80019b2 <null_data+0x3e>
		}
	}
	}
}
 80019da:	b003      	add	sp, #12
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019de <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80019de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e0:	46de      	mov	lr, fp
 80019e2:	4657      	mov	r7, sl
 80019e4:	464e      	mov	r6, r9
 80019e6:	4645      	mov	r5, r8
 80019e8:	b5e0      	push	{r5, r6, r7, lr}
 80019ea:	b089      	sub	sp, #36	; 0x24
 80019ec:	4682      	mov	sl, r0
 80019ee:	1c0d      	adds	r5, r1, #0
 80019f0:	b28e      	uxth	r6, r1
 80019f2:	a807      	add	r0, sp, #28
 80019f4:	8001      	strh	r1, [r0, #0]
 80019f6:	b291      	uxth	r1, r2
 80019f8:	ac06      	add	r4, sp, #24
 80019fa:	8022      	strh	r2, [r4, #0]
 80019fc:	1c1c      	adds	r4, r3, #0
	uint8_t sweeps = data_size.x1;
 80019fe:	b2eb      	uxtb	r3, r5
 8001a00:	4698      	mov	r8, r3
	uint8_t bins = data_size.x2;
 8001a02:	0a33      	lsrs	r3, r6, #8
 8001a04:	9305      	str	r3, [sp, #20]
	uint8_t msweep = max.x1;
 8001a06:	b2d3      	uxtb	r3, r2
 8001a08:	469b      	mov	fp, r3
	uint8_t mbin = max.x2;
 8001a0a:	0a0b      	lsrs	r3, r1, #8
 8001a0c:	4699      	mov	r9, r3
	uint16_t apex = data[msweep][mbin];
 8001a0e:	465b      	mov	r3, fp
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4652      	mov	r2, sl
 8001a14:	589a      	ldr	r2, [r3, r2]
 8001a16:	464b      	mov	r3, r9
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	5ad0      	ldrh	r0, [r2, r3]
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8001a1c:	f00f fe90 	bl	8011740 <__aeabi_i2f>
 8001a20:	1c21      	adds	r1, r4, #0
 8001a22:	f00e ff77 	bl	8010914 <__aeabi_fmul>
 8001a26:	f00f fcb5 	bl	8011394 <__aeabi_f2uiz>
 8001a2a:	b287      	uxth	r7, r0
	for(int16_t i = 0; i<bins; i++){
 8001a2c:	2600      	movs	r6, #0
	float mass = 0.0f;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9302      	str	r3, [sp, #8]
	float meansqdist = 0.0f;
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	003b      	movs	r3, r7
 8001a36:	4647      	mov	r7, r8
 8001a38:	46d8      	mov	r8, fp
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	e02a      	b.n	8001a94 <get_msd+0xb6>
	for(int16_t j = 0; j<sweeps/2; j++){
 8001a3e:	3501      	adds	r5, #1
 8001a40:	b22d      	sxth	r5, r5
 8001a42:	002c      	movs	r4, r5
 8001a44:	087b      	lsrs	r3, r7, #1
 8001a46:	429d      	cmp	r5, r3
 8001a48:	da22      	bge.n	8001a90 <get_msd+0xb2>
		if (data[j][i] > halfpex){
 8001a4a:	00ab      	lsls	r3, r5, #2
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	589b      	ldr	r3, [r3, r2]
 8001a50:	0072      	lsls	r2, r6, #1
 8001a52:	5ad0      	ldrh	r0, [r2, r3]
 8001a54:	4558      	cmp	r0, fp
 8001a56:	d9f2      	bls.n	8001a3e <get_msd+0x60>
			mass += data[j][i];
 8001a58:	f00f fe72 	bl	8011740 <__aeabi_i2f>
 8001a5c:	9003      	str	r0, [sp, #12]
 8001a5e:	1c01      	adds	r1, r0, #0
 8001a60:	9802      	ldr	r0, [sp, #8]
 8001a62:	f00e fcab 	bl	80103bc <__aeabi_fadd>
 8001a66:	9002      	str	r0, [sp, #8]
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 8001a68:	4643      	mov	r3, r8
 8001a6a:	1ae4      	subs	r4, r4, r3
 8001a6c:	4364      	muls	r4, r4
 8001a6e:	9b04      	ldr	r3, [sp, #16]
 8001a70:	464a      	mov	r2, r9
 8001a72:	1a98      	subs	r0, r3, r2
 8001a74:	4340      	muls	r0, r0
 8001a76:	1820      	adds	r0, r4, r0
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 8001a78:	f00f feac 	bl	80117d4 <__aeabi_ui2f>
 8001a7c:	1c01      	adds	r1, r0, #0
 8001a7e:	9803      	ldr	r0, [sp, #12]
 8001a80:	f00e ff48 	bl	8010914 <__aeabi_fmul>
 8001a84:	1c01      	adds	r1, r0, #0
 8001a86:	9801      	ldr	r0, [sp, #4]
 8001a88:	f00e fc98 	bl	80103bc <__aeabi_fadd>
 8001a8c:	9001      	str	r0, [sp, #4]
 8001a8e:	e7d6      	b.n	8001a3e <get_msd+0x60>
	for(int16_t i = 0; i<bins; i++){
 8001a90:	3601      	adds	r6, #1
 8001a92:	b236      	sxth	r6, r6
 8001a94:	9604      	str	r6, [sp, #16]
 8001a96:	9b05      	ldr	r3, [sp, #20]
 8001a98:	429e      	cmp	r6, r3
 8001a9a:	da01      	bge.n	8001aa0 <get_msd+0xc2>
	for(int16_t j = 0; j<sweeps/2; j++){
 8001a9c:	2500      	movs	r5, #0
 8001a9e:	e7d0      	b.n	8001a42 <get_msd+0x64>
	if(mass != 0.0f){
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	9c02      	ldr	r4, [sp, #8]
 8001aa4:	1c20      	adds	r0, r4, #0
 8001aa6:	f00f fc27 	bl	80112f8 <__aeabi_fcmpeq>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d104      	bne.n	8001ab8 <get_msd+0xda>
		meansqdist /= mass;
 8001aae:	1c21      	adds	r1, r4, #0
 8001ab0:	9801      	ldr	r0, [sp, #4]
 8001ab2:	f00e fe1d 	bl	80106f0 <__aeabi_fdiv>
 8001ab6:	9001      	str	r0, [sp, #4]
}
 8001ab8:	9801      	ldr	r0, [sp, #4]
 8001aba:	b009      	add	sp, #36	; 0x24
 8001abc:	bc3c      	pop	{r2, r3, r4, r5}
 8001abe:	4690      	mov	r8, r2
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	46a2      	mov	sl, r4
 8001ac4:	46ab      	mov	fp, r5
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac8 <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	46c6      	mov	lr, r8
 8001acc:	b500      	push	{lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	b28d      	uxth	r5, r1
 8001ad2:	ab01      	add	r3, sp, #4
 8001ad4:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 8001ad6:	b2cf      	uxtb	r7, r1
	uint8_t bins = data_size.x2;
 8001ad8:	0a2b      	lsrs	r3, r5, #8
 8001ada:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 8001adc:	2100      	movs	r1, #0
	uint8_t msweep = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4698      	mov	r8, r3
	uint8_t mbin = 0;
 8001ae2:	2500      	movs	r5, #0
	uint16_t apex = 0;
 8001ae4:	2600      	movs	r6, #0
 8001ae6:	e011      	b.n	8001b0c <max2d+0x44>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	087a      	lsrs	r2, r7, #1
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d90a      	bls.n	8001b08 <max2d+0x40>
				if(data[j][i] > apex){
 8001af2:	009a      	lsls	r2, r3, #2
 8001af4:	5812      	ldr	r2, [r2, r0]
 8001af6:	004c      	lsls	r4, r1, #1
 8001af8:	5aa2      	ldrh	r2, [r4, r2]
 8001afa:	42b2      	cmp	r2, r6
 8001afc:	d9f4      	bls.n	8001ae8 <max2d+0x20>
					mbin = i;
 8001afe:	b2cd      	uxtb	r5, r1
					msweep = j;
 8001b00:	b2dc      	uxtb	r4, r3
 8001b02:	46a0      	mov	r8, r4
					apex = data[j][i];
 8001b04:	0016      	movs	r6, r2
 8001b06:	e7ef      	b.n	8001ae8 <max2d+0x20>
	for(uint16_t i = 0; i<bins; i++){
 8001b08:	3101      	adds	r1, #1
 8001b0a:	b289      	uxth	r1, r1
 8001b0c:	9b00      	ldr	r3, [sp, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	428b      	cmp	r3, r1
 8001b12:	d901      	bls.n	8001b18 <max2d+0x50>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8001b14:	2300      	movs	r3, #0
 8001b16:	e7e9      	b.n	8001aec <max2d+0x24>
	uint8v2_t max_index = {msweep,mbin};
 8001b18:	ab02      	add	r3, sp, #8
 8001b1a:	4642      	mov	r2, r8
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	705d      	strb	r5, [r3, #1]
	return max_index;
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	0a18      	lsrs	r0, r3, #8
 8001b24:	0200      	lsls	r0, r0, #8
 8001b26:	22ff      	movs	r2, #255	; 0xff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	4318      	orrs	r0, r3
}
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bc04      	pop	{r2}
 8001b30:	4690      	mov	r8, r2
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b34 <stackPush>:
float stackPush(float val){
 8001b34:	b530      	push	{r4, r5, lr}
 8001b36:	1c05      	adds	r5, r0, #0
	float popped = convstack[0];
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <stackPush+0x28>)
 8001b3a:	6e58      	ldr	r0, [r3, #100]	; 0x64
	for(int i = 0; i < CONVKER-1; i++){
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e008      	b.n	8001b52 <stackPush+0x1e>
	convstack[i] = convstack[i+1];
 8001b40:	1c5c      	adds	r4, r3, #1
 8001b42:	4a06      	ldr	r2, [pc, #24]	; (8001b5c <stackPush+0x28>)
 8001b44:	00a1      	lsls	r1, r4, #2
 8001b46:	1851      	adds	r1, r2, r1
 8001b48:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	6659      	str	r1, [r3, #100]	; 0x64
	for(int i = 0; i < CONVKER-1; i++){
 8001b50:	0023      	movs	r3, r4
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	ddf4      	ble.n	8001b40 <stackPush+0xc>
	convstack[(CONVKER-1)/2 -1] = val;
 8001b56:	4b01      	ldr	r3, [pc, #4]	; (8001b5c <stackPush+0x28>)
 8001b58:	671d      	str	r5, [r3, #112]	; 0x70
}
 8001b5a:	bd30      	pop	{r4, r5, pc}
 8001b5c:	2000008c 	.word	0x2000008c

08001b60 <stackSet>:
	for(int i = 0; i < CONVKER; i++){
 8001b60:	2300      	movs	r3, #0
 8001b62:	e005      	b.n	8001b70 <stackSet+0x10>
	convstack[i] = 0.0f;
 8001b64:	0099      	lsls	r1, r3, #2
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <stackSet+0x18>)
 8001b68:	1852      	adds	r2, r2, r1
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	6651      	str	r1, [r2, #100]	; 0x64
	for(int i = 0; i < CONVKER; i++){
 8001b6e:	3301      	adds	r3, #1
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	ddf7      	ble.n	8001b64 <stackSet+0x4>
}
 8001b74:	4770      	bx	lr
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	2000008c 	.word	0x2000008c

08001b7c <setdata>:
	if(
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	db0f      	blt.n	8001ba0 <setdata+0x24>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <setdata+0x28>)
 8001b82:	7a1b      	ldrb	r3, [r3, #8]
 8001b84:	4298      	cmp	r0, r3
 8001b86:	da0b      	bge.n	8001ba0 <setdata+0x24>
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	db09      	blt.n	8001ba0 <setdata+0x24>
		(bin >= 0) && (bin < _bins)
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <setdata+0x28>)
 8001b8e:	7a5b      	ldrb	r3, [r3, #9]
 8001b90:	4299      	cmp	r1, r3
 8001b92:	da05      	bge.n	8001ba0 <setdata+0x24>
		_conv_data[sweep][bin] = val;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <setdata+0x28>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0080      	lsls	r0, r0, #2
 8001b9a:	58c3      	ldr	r3, [r0, r3]
 8001b9c:	0049      	lsls	r1, r1, #1
 8001b9e:	525a      	strh	r2, [r3, r1]
}
 8001ba0:	4770      	bx	lr
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	2000010c 	.word	0x2000010c

08001ba8 <getdata>:
	if(
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	db10      	blt.n	8001bce <getdata+0x26>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <getdata+0x38>)
 8001bae:	7a1b      	ldrb	r3, [r3, #8]
 8001bb0:	4298      	cmp	r0, r3
 8001bb2:	da0e      	bge.n	8001bd2 <getdata+0x2a>
 8001bb4:	2900      	cmp	r1, #0
 8001bb6:	db0e      	blt.n	8001bd6 <getdata+0x2e>
		(bin >= 0) && (bin < _bins)
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <getdata+0x38>)
 8001bba:	7a5b      	ldrb	r3, [r3, #9]
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	da0c      	bge.n	8001bda <getdata+0x32>
		return _conv_data[sweep][bin];
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <getdata+0x38>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0080      	lsls	r0, r0, #2
 8001bc6:	58c3      	ldr	r3, [r0, r3]
 8001bc8:	0049      	lsls	r1, r1, #1
 8001bca:	5ac8      	ldrh	r0, [r1, r3]
 8001bcc:	e000      	b.n	8001bd0 <getdata+0x28>
		return 0;
 8001bce:	2000      	movs	r0, #0
}
 8001bd0:	4770      	bx	lr
		return 0;
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	e7fc      	b.n	8001bd0 <getdata+0x28>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	e7fa      	b.n	8001bd0 <getdata+0x28>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	e7f8      	b.n	8001bd0 <getdata+0x28>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	2000010c 	.word	0x2000010c

08001be4 <center_of_mass>:

floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	46de      	mov	lr, fp
 8001be8:	4657      	mov	r7, sl
 8001bea:	464e      	mov	r6, r9
 8001bec:	4645      	mov	r5, r8
 8001bee:	b5e0      	push	{r5, r6, r7, lr}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	0007      	movs	r7, r0
 8001bf4:	b28b      	uxth	r3, r1
 8001bf6:	ac03      	add	r4, sp, #12
 8001bf8:	8021      	strh	r1, [r4, #0]
 8001bfa:	9202      	str	r2, [sp, #8]
	uint8_t msweep = max.x1;
 8001bfc:	b2c9      	uxtb	r1, r1
 8001bfe:	4689      	mov	r9, r1
	uint8_t mbin = max.x2;
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	469b      	mov	fp, r3
	
	float mass = 0.0f;	
	floatv2_t center = {0.0f,0.0f};
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	607b      	str	r3, [r7, #4]
	
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	4690      	mov	r8, r2
 8001c0e:	465a      	mov	r2, fp
 8001c10:	4641      	mov	r1, r8
 8001c12:	1a55      	subs	r5, r2, r1
 8001c14:	b22d      	sxth	r5, r5
	float mass = 0.0f;	
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	e036      	b.n	8001c88 <center_of_mass+0xa4>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
			mass += getdata(j,i);
 8001c1a:	0029      	movs	r1, r5
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	f7ff ffc3 	bl	8001ba8 <getdata>
 8001c22:	0006      	movs	r6, r0
 8001c24:	f00f fd8c 	bl	8011740 <__aeabi_i2f>
 8001c28:	1c01      	adds	r1, r0, #0
 8001c2a:	9801      	ldr	r0, [sp, #4]
 8001c2c:	f00e fbc6 	bl	80103bc <__aeabi_fadd>
 8001c30:	9001      	str	r0, [sp, #4]
			center.x1 += (float)getdata(j,i)*(float)j;
 8001c32:	0030      	movs	r0, r6
 8001c34:	f00f fdce 	bl	80117d4 <__aeabi_ui2f>
 8001c38:	1c06      	adds	r6, r0, #0
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	f00f fd80 	bl	8011740 <__aeabi_i2f>
 8001c40:	1c01      	adds	r1, r0, #0
 8001c42:	1c30      	adds	r0, r6, #0
 8001c44:	f00e fe66 	bl	8010914 <__aeabi_fmul>
 8001c48:	1c01      	adds	r1, r0, #0
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f00e fbb6 	bl	80103bc <__aeabi_fadd>
 8001c50:	6038      	str	r0, [r7, #0]
			center.x2 += (float)getdata(j,i)*(float)i;
 8001c52:	0029      	movs	r1, r5
 8001c54:	0020      	movs	r0, r4
 8001c56:	f7ff ffa7 	bl	8001ba8 <getdata>
 8001c5a:	f00f fdbb 	bl	80117d4 <__aeabi_ui2f>
 8001c5e:	1c06      	adds	r6, r0, #0
 8001c60:	0028      	movs	r0, r5
 8001c62:	f00f fd6d 	bl	8011740 <__aeabi_i2f>
 8001c66:	1c01      	adds	r1, r0, #0
 8001c68:	1c30      	adds	r0, r6, #0
 8001c6a:	f00e fe53 	bl	8010914 <__aeabi_fmul>
 8001c6e:	1c01      	adds	r1, r0, #0
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f00e fba3 	bl	80103bc <__aeabi_fadd>
 8001c76:	6078      	str	r0, [r7, #4]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8001c78:	3401      	adds	r4, #1
 8001c7a:	b224      	sxth	r4, r4
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	4453      	add	r3, sl
 8001c80:	429c      	cmp	r4, r3
 8001c82:	ddca      	ble.n	8001c1a <center_of_mass+0x36>
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001c84:	3501      	adds	r5, #1
 8001c86:	b22d      	sxth	r5, r5
 8001c88:	9b02      	ldr	r3, [sp, #8]
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	445b      	add	r3, fp
 8001c8e:	429d      	cmp	r5, r3
 8001c90:	dc03      	bgt.n	8001c9a <center_of_mass+0xb6>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8001c92:	464b      	mov	r3, r9
 8001c94:	4642      	mov	r2, r8
 8001c96:	1a9c      	subs	r4, r3, r2
 8001c98:	e7f0      	b.n	8001c7c <center_of_mass+0x98>
	}
	}
	if(mass != 0.0f){	
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	9c01      	ldr	r4, [sp, #4]
 8001c9e:	1c20      	adds	r0, r4, #0
 8001ca0:	f00f fb2a 	bl	80112f8 <__aeabi_fcmpeq>
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d109      	bne.n	8001cbc <center_of_mass+0xd8>
		center.x1 /= mass;
 8001ca8:	1c21      	adds	r1, r4, #0
 8001caa:	6838      	ldr	r0, [r7, #0]
 8001cac:	f00e fd20 	bl	80106f0 <__aeabi_fdiv>
 8001cb0:	6038      	str	r0, [r7, #0]
		center.x2 /= mass;
 8001cb2:	1c21      	adds	r1, r4, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f00e fd1b 	bl	80106f0 <__aeabi_fdiv>
 8001cba:	6078      	str	r0, [r7, #4]
	}
	return center;
}
 8001cbc:	0038      	movs	r0, r7
 8001cbe:	b005      	add	sp, #20
 8001cc0:	bc3c      	pop	{r2, r3, r4, r5}
 8001cc2:	4690      	mov	r8, r2
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	46a2      	mov	sl, r4
 8001cc8:	46ab      	mov	fp, r5
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ccc <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8001ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	1c0f      	adds	r7, r1, #0
 8001cd2:	b289      	uxth	r1, r1
	uint8_t sweeps = data_size.x1;
 8001cd4:	b2ff      	uxtb	r7, r7
	uint8_t bins = data_size.x2;
 8001cd6:	0a09      	lsrs	r1, r1, #8
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001cd8:	2400      	movs	r4, #0
 8001cda:	e00c      	b.n	8001cf6 <dobandstop+0x2a>
					data[j][i] = 0;
 8001cdc:	00a5      	lsls	r5, r4, #2
 8001cde:	582d      	ldr	r5, [r5, r0]
 8001ce0:	005e      	lsls	r6, r3, #1
 8001ce2:	19ad      	adds	r5, r5, r6
 8001ce4:	2600      	movs	r6, #0
 8001ce6:	802e      	strh	r6, [r5, #0]
			for(uint16_t i = 0; i<bins; i++){
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	b28d      	uxth	r5, r1
 8001cee:	429d      	cmp	r5, r3
 8001cf0:	d8f4      	bhi.n	8001cdc <dobandstop+0x10>
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001cf2:	3401      	adds	r4, #1
 8001cf4:	b2a4      	uxth	r4, r4
 8001cf6:	087b      	lsrs	r3, r7, #1
 8001cf8:	42a3      	cmp	r3, r4
 8001cfa:	d905      	bls.n	8001d08 <dobandstop+0x3c>
		if(mask & (1<<j)){
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	40a3      	lsls	r3, r4
 8001d00:	421a      	tst	r2, r3
 8001d02:	d0f6      	beq.n	8001cf2 <dobandstop+0x26>
			for(uint16_t i = 0; i<bins; i++){
 8001d04:	2300      	movs	r3, #0
 8001d06:	e7f1      	b.n	8001cec <dobandstop+0x20>
}
 8001d08:	b003      	add	sp, #12
 8001d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0c <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	0007      	movs	r7, r0
 8001d12:	b28d      	uxth	r5, r1
 8001d14:	ab01      	add	r3, sp, #4
 8001d16:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 8001d18:	b2cc      	uxtb	r4, r1
	uint8_t bins = data_size.x2;
 8001d1a:	0a2b      	lsrs	r3, r5, #8
 8001d1c:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 8001d1e:	2600      	movs	r6, #0
 8001d20:	e01b      	b.n	8001d5a <dcdatarm+0x4e>
			accumulator += data[j][i];
 8001d22:	009a      	lsls	r2, r3, #2
 8001d24:	59d2      	ldr	r2, [r2, r7]
 8001d26:	0071      	lsls	r1, r6, #1
 8001d28:	5a8a      	ldrh	r2, [r1, r2]
 8001d2a:	1880      	adds	r0, r0, r2
		for(uint16_t j = 0; j<sweeps; j++){
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b2a5      	uxth	r5, r4
 8001d32:	429d      	cmp	r5, r3
 8001d34:	d8f5      	bhi.n	8001d22 <dcdatarm+0x16>
		uint32_t average = accumulator/sweeps;
 8001d36:	0021      	movs	r1, r4
 8001d38:	f00f f91e 	bl	8010f78 <__udivsi3>
		for(uint16_t j = 0; j<sweeps; j++){
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	e008      	b.n	8001d52 <dcdatarm+0x46>
			data[j][i] -= average;
 8001d40:	009a      	lsls	r2, r3, #2
 8001d42:	59d2      	ldr	r2, [r2, r7]
 8001d44:	0071      	lsls	r1, r6, #1
 8001d46:	1852      	adds	r2, r2, r1
 8001d48:	8811      	ldrh	r1, [r2, #0]
 8001d4a:	1a09      	subs	r1, r1, r0
 8001d4c:	8011      	strh	r1, [r2, #0]
		for(uint16_t j = 0; j<sweeps; j++){
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	429d      	cmp	r5, r3
 8001d54:	d8f4      	bhi.n	8001d40 <dcdatarm+0x34>
	for(uint16_t i = 0; i<bins; i++){
 8001d56:	3601      	adds	r6, #1
 8001d58:	b2b6      	uxth	r6, r6
 8001d5a:	9b00      	ldr	r3, [sp, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	42b3      	cmp	r3, r6
 8001d60:	d902      	bls.n	8001d68 <dcdatarm+0x5c>
		for(uint16_t j = 0; j<sweeps; j++){
 8001d62:	2300      	movs	r3, #0
		uint32_t accumulator = 0;
 8001d64:	2000      	movs	r0, #0
 8001d66:	e7e3      	b.n	8001d30 <dcdatarm+0x24>
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d6c <roundDown>:
    return numToRound + multiple - remainder;
}


uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	0004      	movs	r4, r0
    if (multiple == 0)
 8001d70:	2900      	cmp	r1, #0
 8001d72:	d004      	beq.n	8001d7e <roundDown+0x12>
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 8001d74:	f00f f986 	bl	8011084 <__aeabi_uidivmod>
    if (remainder == 0)
 8001d78:	2900      	cmp	r1, #0
 8001d7a:	d000      	beq.n	8001d7e <roundDown+0x12>
        return numToRound;

    return numToRound - remainder;
 8001d7c:	1a64      	subs	r4, r4, r1
 8001d7e:	0020      	movs	r0, r4
 8001d80:	bd10      	pop	{r4, pc}

08001d82 <get_byte>:
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8001d82:	00c9      	lsls	r1, r1, #3
 8001d84:	23ff      	movs	r3, #255	; 0xff
 8001d86:	408b      	lsls	r3, r1
 8001d88:	4018      	ands	r0, r3
 8001d8a:	40c8      	lsrs	r0, r1
 8001d8c:	b2c0      	uxtb	r0, r0
}
 8001d8e:	4770      	bx	lr

08001d90 <fftSwap>:
}

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
 8001d90:	b510      	push	{r4, lr}
	int16_t temp = *x;
 8001d92:	2200      	movs	r2, #0
 8001d94:	5e83      	ldrsh	r3, [r0, r2]
	*x = *y;
 8001d96:	2400      	movs	r4, #0
 8001d98:	5f0a      	ldrsh	r2, [r1, r4]
 8001d9a:	8002      	strh	r2, [r0, #0]
	*y = temp;
 8001d9c:	800b      	strh	r3, [r1, #0]
}
 8001d9e:	bd10      	pop	{r4, pc}

08001da0 <fftExponent>:
{
 8001da0:	0002      	movs	r2, r0
	uint8_t result = 0;
 8001da2:	2000      	movs	r0, #0
 8001da4:	e001      	b.n	8001daa <fftExponent+0xa>
	while (((value >> result) & 1) != 1) result++;
 8001da6:	3001      	adds	r0, #1
 8001da8:	b2c0      	uxtb	r0, r0
 8001daa:	0013      	movs	r3, r2
 8001dac:	4103      	asrs	r3, r0
 8001dae:	07db      	lsls	r3, r3, #31
 8001db0:	d5f9      	bpl.n	8001da6 <fftExponent+0x6>
}
 8001db2:	4770      	bx	lr

08001db4 <fftRangeScaling>:
{
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	b083      	sub	sp, #12
 8001db8:	0006      	movs	r6, r0
	for(int i =0; i<(samples);i++){
 8001dba:	2300      	movs	r3, #0
	int max = 0;
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e002      	b.n	8001dc6 <fftRangeScaling+0x12>
			max = vReal[i];
 8001dc0:	0014      	movs	r4, r2
 8001dc2:	e008      	b.n	8001dd6 <fftRangeScaling+0x22>
	for(int i =0; i<(samples);i++){
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	000f      	movs	r7, r1
 8001dc8:	4299      	cmp	r1, r3
 8001dca:	dd09      	ble.n	8001de0 <fftRangeScaling+0x2c>
		if (max < vReal[i]){
 8001dcc:	005a      	lsls	r2, r3, #1
 8001dce:	5f92      	ldrsh	r2, [r2, r6]
 8001dd0:	4282      	cmp	r2, r0
 8001dd2:	dcf5      	bgt.n	8001dc0 <fftRangeScaling+0xc>
 8001dd4:	0004      	movs	r4, r0
		if (max < -vReal[i]){
 8001dd6:	4250      	negs	r0, r2
 8001dd8:	42a0      	cmp	r0, r4
 8001dda:	dcf3      	bgt.n	8001dc4 <fftRangeScaling+0x10>
 8001ddc:	0020      	movs	r0, r4
 8001dde:	e7f1      	b.n	8001dc4 <fftRangeScaling+0x10>
	float scaler = 256.0f/max;
 8001de0:	f00f fcae 	bl	8011740 <__aeabi_i2f>
 8001de4:	1c01      	adds	r1, r0, #0
 8001de6:	2087      	movs	r0, #135	; 0x87
 8001de8:	05c0      	lsls	r0, r0, #23
 8001dea:	f00e fc81 	bl	80106f0 <__aeabi_fdiv>
 8001dee:	9001      	str	r0, [sp, #4]
	for(int i =0; i<(samples);i++){
 8001df0:	2500      	movs	r5, #0
 8001df2:	e00c      	b.n	8001e0e <fftRangeScaling+0x5a>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8001df4:	006c      	lsls	r4, r5, #1
 8001df6:	1934      	adds	r4, r6, r4
 8001df8:	2300      	movs	r3, #0
 8001dfa:	5ee0      	ldrsh	r0, [r4, r3]
 8001dfc:	f00f fca0 	bl	8011740 <__aeabi_i2f>
 8001e00:	9901      	ldr	r1, [sp, #4]
 8001e02:	f00e fd87 	bl	8010914 <__aeabi_fmul>
 8001e06:	f00f fc7b 	bl	8011700 <__aeabi_f2iz>
 8001e0a:	8020      	strh	r0, [r4, #0]
	for(int i =0; i<(samples);i++){
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	42af      	cmp	r7, r5
 8001e10:	dcf0      	bgt.n	8001df4 <fftRangeScaling+0x40>
}
 8001e12:	9801      	ldr	r0, [sp, #4]
 8001e14:	b003      	add	sp, #12
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e18 <RegInt_regmap>:
//0xD5 :: Gaussian Kernal StDev (x1000)
//0xD6 :: Data Eval Mode
//0xD7 :: Focus weight Radius
//0xD8 :: Data zeroing threshold
//0xD9 :: Bandstop velocity filter
uint32_t* RegInt_regmap(uint8_t reg){
 8001e18:	0002      	movs	r2, r0
	REGADRERR = -1;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <RegInt_regmap+0x64>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4249      	negs	r1, r1
 8001e20:	6119      	str	r1, [r3, #16]
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 8001e22:	2812      	cmp	r0, #18
 8001e24:	d824      	bhi.n	8001e70 <RegInt_regmap+0x58>
		ptr = &GENERAL_REGISTERS[reg];
 8001e26:	0080      	lsls	r0, r0, #2
 8001e28:	3318      	adds	r3, #24
 8001e2a:	1818      	adds	r0, r3, r0
	}
	if (reg == 0xE9){
 8001e2c:	2ae9      	cmp	r2, #233	; 0xe9
 8001e2e:	d022      	beq.n	8001e76 <RegInt_regmap+0x5e>
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8001e30:	0013      	movs	r3, r2
 8001e32:	3b20      	subs	r3, #32
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b22      	cmp	r3, #34	; 0x22
 8001e38:	d804      	bhi.n	8001e44 <RegInt_regmap+0x2c>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	3b20      	subs	r3, #32
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	480f      	ldr	r0, [pc, #60]	; (8001e80 <RegInt_regmap+0x68>)
 8001e42:	1818      	adds	r0, r3, r0
	}
	if (0x81 <= reg && reg <= 0x85){
 8001e44:	0013      	movs	r3, r2
 8001e46:	337f      	adds	r3, #127	; 0x7f
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d805      	bhi.n	8001e5a <RegInt_regmap+0x42>
		ptr = &META_REGISTERS[reg - 0x81];
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <RegInt_regmap+0x64>)
 8001e50:	0010      	movs	r0, r2
 8001e52:	3881      	subs	r0, #129	; 0x81
 8001e54:	0080      	lsls	r0, r0, #2
 8001e56:	3364      	adds	r3, #100	; 0x64
 8001e58:	1818      	adds	r0, r3, r0
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 8001e5a:	0013      	movs	r3, r2
 8001e5c:	3330      	adds	r3, #48	; 0x30
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b09      	cmp	r3, #9
 8001e62:	d804      	bhi.n	8001e6e <RegInt_regmap+0x56>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8001e64:	3ad0      	subs	r2, #208	; 0xd0
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <RegInt_regmap+0x64>)
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	3378      	adds	r3, #120	; 0x78
 8001e6c:	1898      	adds	r0, r3, r2
	}
	return ptr;
}
 8001e6e:	4770      	bx	lr
	uint32_t* ptr = &REGADRERR;
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <RegInt_regmap+0x64>)
 8001e72:	3010      	adds	r0, #16
 8001e74:	e7da      	b.n	8001e2c <RegInt_regmap+0x14>
		ptr = &OUTPUT_BUFFER_LENGTH;
 8001e76:	4801      	ldr	r0, [pc, #4]	; (8001e7c <RegInt_regmap+0x64>)
 8001e78:	3014      	adds	r0, #20
 8001e7a:	e7d9      	b.n	8001e30 <RegInt_regmap+0x18>
 8001e7c:	2000010c 	.word	0x2000010c
 8001e80:	200004b8 	.word	0x200004b8

08001e84 <RegInt_getreg>:

uint32_t RegInt_getreg(uint8_t reg){
 8001e84:	b510      	push	{r4, lr}
	uint32_t* regptr = RegInt_regmap(reg);
 8001e86:	f7ff ffc7 	bl	8001e18 <RegInt_regmap>
	return *regptr;
 8001e8a:	6800      	ldr	r0, [r0, #0]
}
 8001e8c:	bd10      	pop	{r4, pc}

08001e8e <updateEnvelopeConfig>:
	
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
			
}

void updateEnvelopeConfig(acc_service_configuration_t config){
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	0004      	movs	r4, r0
    
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8001e92:	2028      	movs	r0, #40	; 0x28
 8001e94:	f7ff fff6 	bl	8001e84 <RegInt_getreg>
 8001e98:	b2c1      	uxtb	r1, r0
 8001e9a:	0020      	movs	r0, r4
 8001e9c:	f7ff fa52 	bl	8001344 <acc_service_profile_set>
	
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8001ea0:	2022      	movs	r0, #34	; 0x22
 8001ea2:	f7ff ffef 	bl	8001e84 <RegInt_getreg>
	if(rep_mode == 0x01){
 8001ea6:	2801      	cmp	r0, #1
 8001ea8:	d100      	bne.n	8001eac <updateEnvelopeConfig+0x1e>
 8001eaa:	e073      	b.n	8001f94 <updateEnvelopeConfig+0x106>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
	}else if (rep_mode == 0x02){
 8001eac:	2802      	cmp	r0, #2
 8001eae:	d100      	bne.n	8001eb2 <updateEnvelopeConfig+0x24>
 8001eb0:	e07d      	b.n	8001fae <updateEnvelopeConfig+0x120>
		acc_service_repetition_mode_on_demand_set(config);
	}else{
		/* error handle */
	}
	
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f7ff ffe6 	bl	8001e84 <RegInt_getreg>
 8001eb8:	1e41      	subs	r1, r0, #1
 8001eba:	4188      	sbcs	r0, r1
 8001ebc:	b2c1      	uxtb	r1, r0
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	f7ff fa71 	bl	80013a6 <acc_service_tx_disable_set>
    
	acc_service_envelope_downsampling_factor_set(config, RegInt_getreg(0x29));
 8001ec4:	2029      	movs	r0, #41	; 0x29
 8001ec6:	f7ff ffdd 	bl	8001e84 <RegInt_getreg>
 8001eca:	b281      	uxth	r1, r0
 8001ecc:	0020      	movs	r0, r4
 8001ece:	f7ff fd3f 	bl	8001950 <acc_service_envelope_downsampling_factor_set>
		
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8001ed2:	2025      	movs	r0, #37	; 0x25
 8001ed4:	f7ff ffd6 	bl	8001e84 <RegInt_getreg>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0020      	movs	r0, r4
 8001edc:	f7ff fa8a 	bl	80013f4 <acc_service_power_save_mode_set>
	
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8001ee0:	2033      	movs	r0, #51	; 0x33
 8001ee2:	f7ff ffcf 	bl	8001e84 <RegInt_getreg>
 8001ee6:	1e41      	subs	r1, r0, #1
 8001ee8:	4188      	sbcs	r0, r1
 8001eea:	b2c1      	uxtb	r1, r0
 8001eec:	0020      	movs	r0, r4
 8001eee:	f7ff fa43 	bl	8001378 <acc_service_asynchronous_measurement_set>
	
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 8001ef2:	2020      	movs	r0, #32
 8001ef4:	f7ff ffc6 	bl	8001e84 <RegInt_getreg>
 8001ef8:	f00f fc6c 	bl	80117d4 <__aeabi_ui2f>
 8001efc:	492e      	ldr	r1, [pc, #184]	; (8001fb8 <updateEnvelopeConfig+0x12a>)
 8001efe:	f00e fbf7 	bl	80106f0 <__aeabi_fdiv>
 8001f02:	1c01      	adds	r1, r0, #0
 8001f04:	0020      	movs	r0, r4
 8001f06:	f7ff fa9e 	bl	8001446 <acc_service_requested_start_set>
	
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 8001f0a:	2021      	movs	r0, #33	; 0x21
 8001f0c:	f7ff ffba 	bl	8001e84 <RegInt_getreg>
 8001f10:	f00f fc60 	bl	80117d4 <__aeabi_ui2f>
 8001f14:	4928      	ldr	r1, [pc, #160]	; (8001fb8 <updateEnvelopeConfig+0x12a>)
 8001f16:	f00e fbeb 	bl	80106f0 <__aeabi_fdiv>
 8001f1a:	1c01      	adds	r1, r0, #0
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f7ff fa87 	bl	8001430 <acc_service_requested_length_set>
	
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8001f22:	2024      	movs	r0, #36	; 0x24
 8001f24:	f7ff ffae 	bl	8001e84 <RegInt_getreg>
 8001f28:	f00f fc54 	bl	80117d4 <__aeabi_ui2f>
 8001f2c:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <updateEnvelopeConfig+0x12a>)
 8001f2e:	f00e fbdf 	bl	80106f0 <__aeabi_fdiv>
 8001f32:	1c01      	adds	r1, r0, #0
 8001f34:	0020      	movs	r0, r4
 8001f36:	f7ff fa42 	bl	80013be <acc_service_receiver_gain_set>
	
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 8001f3a:	2030      	movs	r0, #48	; 0x30
 8001f3c:	f7ff ffa2 	bl	8001e84 <RegInt_getreg>
 8001f40:	b2c1      	uxtb	r1, r0
 8001f42:	0020      	movs	r0, r4
 8001f44:	f7ff fa24 	bl	8001390 <acc_service_hw_accelerated_average_samples_set>
    
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 8001f48:	2031      	movs	r0, #49	; 0x31
 8001f4a:	f7ff ff9b 	bl	8001e84 <RegInt_getreg>
 8001f4e:	1e41      	subs	r1, r0, #1
 8001f50:	4188      	sbcs	r0, r1
 8001f52:	b2c1      	uxtb	r1, r0
 8001f54:	0020      	movs	r0, r4
 8001f56:	f7ff fcab 	bl	80018b0 <acc_service_envelope_noise_level_normalization_set>
    
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8001f5a:	2032      	movs	r0, #50	; 0x32
 8001f5c:	f7ff ff92 	bl	8001e84 <RegInt_getreg>
 8001f60:	1e41      	subs	r1, r0, #1
 8001f62:	4188      	sbcs	r0, r1
 8001f64:	b2c1      	uxtb	r1, r0
 8001f66:	0020      	movs	r0, r4
 8001f68:	f7ff f9da 	bl	8001320 <acc_service_maximize_signal_attenuation_set>
    
    acc_service_mur_set (config, RegInt_getreg(0x34));
 8001f6c:	2034      	movs	r0, #52	; 0x34
 8001f6e:	f7ff ff89 	bl	8001e84 <RegInt_getreg>
 8001f72:	b2c1      	uxtb	r1, r0
 8001f74:	0020      	movs	r0, r4
 8001f76:	f7ff f99b 	bl	80012b0 <acc_service_mur_set>
	
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 8001f7a:	2040      	movs	r0, #64	; 0x40
 8001f7c:	f7ff ff82 	bl	8001e84 <RegInt_getreg>
 8001f80:	f00f fc28 	bl	80117d4 <__aeabi_ui2f>
 8001f84:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <updateEnvelopeConfig+0x12a>)
 8001f86:	f00e fbb3 	bl	80106f0 <__aeabi_fdiv>
 8001f8a:	1c01      	adds	r1, r0, #0
 8001f8c:	0020      	movs	r0, r4
 8001f8e:	f7ff fca1 	bl	80018d4 <acc_service_envelope_running_average_factor_set>
    
}
 8001f92:	bd10      	pop	{r4, pc}
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8001f94:	3022      	adds	r0, #34	; 0x22
 8001f96:	f7ff ff75 	bl	8001e84 <RegInt_getreg>
 8001f9a:	f00f fc1b 	bl	80117d4 <__aeabi_ui2f>
 8001f9e:	4906      	ldr	r1, [pc, #24]	; (8001fb8 <updateEnvelopeConfig+0x12a>)
 8001fa0:	f00e fba6 	bl	80106f0 <__aeabi_fdiv>
 8001fa4:	1c01      	adds	r1, r0, #0
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f7ff fa2f 	bl	800140a <acc_service_repetition_mode_streaming_set>
 8001fac:	e781      	b.n	8001eb2 <updateEnvelopeConfig+0x24>
		acc_service_repetition_mode_on_demand_set(config);
 8001fae:	0020      	movs	r0, r4
 8001fb0:	f7ff fa38 	bl	8001424 <acc_service_repetition_mode_on_demand_set>
 8001fb4:	e77d      	b.n	8001eb2 <updateEnvelopeConfig+0x24>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	447a0000 	.word	0x447a0000

08001fbc <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	0004      	movs	r4, r0
 8001fc0:	000e      	movs	r6, r1
 8001fc2:	0015      	movs	r5, r2
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8001fc4:	2028      	movs	r0, #40	; 0x28
 8001fc6:	f7ff ff5d 	bl	8001e84 <RegInt_getreg>
 8001fca:	b2c1      	uxtb	r1, r0
 8001fcc:	0020      	movs	r0, r4
 8001fce:	f7ff f9b9 	bl	8001344 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8001fd2:	2022      	movs	r0, #34	; 0x22
 8001fd4:	f7ff ff56 	bl	8001e84 <RegInt_getreg>
	if(rep_mode == 0x01){
 8001fd8:	2801      	cmp	r0, #1
 8001fda:	d100      	bne.n	8001fde <updateSparseConfig+0x22>
 8001fdc:	e06d      	b.n	80020ba <updateSparseConfig+0xfe>
	}else if (rep_mode == 0x02){
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d100      	bne.n	8001fe4 <updateSparseConfig+0x28>
 8001fe2:	e077      	b.n	80020d4 <updateSparseConfig+0x118>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8001fe4:	2026      	movs	r0, #38	; 0x26
 8001fe6:	f7ff ff4d 	bl	8001e84 <RegInt_getreg>
 8001fea:	1e41      	subs	r1, r0, #1
 8001fec:	4188      	sbcs	r0, r1
 8001fee:	b2c1      	uxtb	r1, r0
 8001ff0:	0020      	movs	r0, r4
 8001ff2:	f7ff f9d8 	bl	80013a6 <acc_service_tx_disable_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8001ff6:	2025      	movs	r0, #37	; 0x25
 8001ff8:	f7ff ff44 	bl	8001e84 <RegInt_getreg>
 8001ffc:	0001      	movs	r1, r0
 8001ffe:	0020      	movs	r0, r4
 8002000:	f7ff f9f8 	bl	80013f4 <acc_service_power_save_mode_set>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8002004:	2033      	movs	r0, #51	; 0x33
 8002006:	f7ff ff3d 	bl	8001e84 <RegInt_getreg>
 800200a:	1e41      	subs	r1, r0, #1
 800200c:	4188      	sbcs	r0, r1
 800200e:	b2c1      	uxtb	r1, r0
 8002010:	0020      	movs	r0, r4
 8002012:	f7ff f9b1 	bl	8001378 <acc_service_asynchronous_measurement_set>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 8002016:	0030      	movs	r0, r6
 8002018:	f00f fbdc 	bl	80117d4 <__aeabi_ui2f>
 800201c:	492f      	ldr	r1, [pc, #188]	; (80020dc <updateSparseConfig+0x120>)
 800201e:	f00e fb67 	bl	80106f0 <__aeabi_fdiv>
 8002022:	1c01      	adds	r1, r0, #0
 8002024:	0020      	movs	r0, r4
 8002026:	f7ff fa0e 	bl	8001446 <acc_service_requested_start_set>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 800202a:	0028      	movs	r0, r5
 800202c:	f00f fbd2 	bl	80117d4 <__aeabi_ui2f>
 8002030:	492a      	ldr	r1, [pc, #168]	; (80020dc <updateSparseConfig+0x120>)
 8002032:	f00e fb5d 	bl	80106f0 <__aeabi_fdiv>
 8002036:	1c01      	adds	r1, r0, #0
 8002038:	0020      	movs	r0, r4
 800203a:	f7ff f9f9 	bl	8001430 <acc_service_requested_length_set>
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 800203e:	2024      	movs	r0, #36	; 0x24
 8002040:	f7ff ff20 	bl	8001e84 <RegInt_getreg>
 8002044:	f00f fbc6 	bl	80117d4 <__aeabi_ui2f>
 8002048:	4924      	ldr	r1, [pc, #144]	; (80020dc <updateSparseConfig+0x120>)
 800204a:	f00e fb51 	bl	80106f0 <__aeabi_fdiv>
 800204e:	1c01      	adds	r1, r0, #0
 8002050:	0020      	movs	r0, r4
 8002052:	f7ff f9b4 	bl	80013be <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 8002056:	2030      	movs	r0, #48	; 0x30
 8002058:	f7ff ff14 	bl	8001e84 <RegInt_getreg>
 800205c:	b2c1      	uxtb	r1, r0
 800205e:	0020      	movs	r0, r4
 8002060:	f7ff f996 	bl	8001390 <acc_service_hw_accelerated_average_samples_set>
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8002064:	2032      	movs	r0, #50	; 0x32
 8002066:	f7ff ff0d 	bl	8001e84 <RegInt_getreg>
 800206a:	1e41      	subs	r1, r0, #1
 800206c:	4188      	sbcs	r0, r1
 800206e:	b2c1      	uxtb	r1, r0
 8002070:	0020      	movs	r0, r4
 8002072:	f7ff f955 	bl	8001320 <acc_service_maximize_signal_attenuation_set>
	acc_service_sparse_configuration_sweeps_per_frame_set (config, RegInt_getreg(0x40));
 8002076:	2040      	movs	r0, #64	; 0x40
 8002078:	f7ff ff04 	bl	8001e84 <RegInt_getreg>
 800207c:	b281      	uxth	r1, r0
 800207e:	0020      	movs	r0, r4
 8002080:	f7ff fb0d 	bl	800169e <acc_service_sparse_configuration_sweeps_per_frame_set>
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 8002084:	2041      	movs	r0, #65	; 0x41
 8002086:	f7ff fefd 	bl	8001e84 <RegInt_getreg>
 800208a:	f00f fba3 	bl	80117d4 <__aeabi_ui2f>
 800208e:	4913      	ldr	r1, [pc, #76]	; (80020dc <updateSparseConfig+0x120>)
 8002090:	f00e fb2e 	bl	80106f0 <__aeabi_fdiv>
 8002094:	1c01      	adds	r1, r0, #0
 8002096:	0020      	movs	r0, r4
 8002098:	f7ff faf2 	bl	8001680 <acc_service_sparse_configuration_sweep_rate_set>
	acc_service_sparse_sampling_mode_set (config, RegInt_getreg(0x42));
 800209c:	2042      	movs	r0, #66	; 0x42
 800209e:	f7ff fef1 	bl	8001e84 <RegInt_getreg>
 80020a2:	0001      	movs	r1, r0
 80020a4:	0020      	movs	r0, r4
 80020a6:	f7ff fac5 	bl	8001634 <acc_service_sparse_sampling_mode_set>
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
 80020aa:	2029      	movs	r0, #41	; 0x29
 80020ac:	f7ff feea 	bl	8001e84 <RegInt_getreg>
 80020b0:	b281      	uxth	r1, r0
 80020b2:	0020      	movs	r0, r4
 80020b4:	f7ff fab2 	bl	800161c <acc_service_sparse_downsampling_factor_set>
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 80020ba:	3022      	adds	r0, #34	; 0x22
 80020bc:	f7ff fee2 	bl	8001e84 <RegInt_getreg>
 80020c0:	f00f fb88 	bl	80117d4 <__aeabi_ui2f>
 80020c4:	4905      	ldr	r1, [pc, #20]	; (80020dc <updateSparseConfig+0x120>)
 80020c6:	f00e fb13 	bl	80106f0 <__aeabi_fdiv>
 80020ca:	1c01      	adds	r1, r0, #0
 80020cc:	0020      	movs	r0, r4
 80020ce:	f7ff f99c 	bl	800140a <acc_service_repetition_mode_streaming_set>
 80020d2:	e787      	b.n	8001fe4 <updateSparseConfig+0x28>
		acc_service_repetition_mode_on_demand_set(config);
 80020d4:	0020      	movs	r0, r4
 80020d6:	f7ff f9a5 	bl	8001424 <acc_service_repetition_mode_on_demand_set>
 80020da:	e783      	b.n	8001fe4 <updateSparseConfig+0x28>
 80020dc:	447a0000 	.word	0x447a0000

080020e0 <RegInt_writeable>:
int8_t RegInt_writeable(uint8_t reg){
 80020e0:	b510      	push	{r4, lr}
 80020e2:	b084      	sub	sp, #16
    if(reg == 0x02){
 80020e4:	2802      	cmp	r0, #2
 80020e6:	d008      	beq.n	80020fa <RegInt_writeable+0x1a>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 80020e8:	aa01      	add	r2, sp, #4
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <RegInt_writeable+0x44>)
 80020ec:	3314      	adds	r3, #20
 80020ee:	cb12      	ldmia	r3!, {r1, r4}
 80020f0:	c212      	stmia	r2!, {r1, r4}
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	8013      	strh	r3, [r2, #0]
	for(uint8_t i = 0; i < 10; i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	e006      	b.n	8002108 <RegInt_writeable+0x28>
        if(RegInt_getreg(0x06) || 0x00000001){
 80020fa:	3004      	adds	r0, #4
 80020fc:	f7ff fec2 	bl	8001e84 <RegInt_getreg>
            return 0;
 8002100:	2000      	movs	r0, #0
 8002102:	e00b      	b.n	800211c <RegInt_writeable+0x3c>
	for(uint8_t i = 0; i < 10; i++){
 8002104:	3301      	adds	r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b09      	cmp	r3, #9
 800210a:	d806      	bhi.n	800211a <RegInt_writeable+0x3a>
		if (reg == read_only_addr[i]){return 0;}
 800210c:	aa01      	add	r2, sp, #4
 800210e:	5cd2      	ldrb	r2, [r2, r3]
 8002110:	4282      	cmp	r2, r0
 8002112:	d005      	beq.n	8002120 <RegInt_writeable+0x40>
		if (reg < read_only_addr[i]){break;}
 8002114:	d9f6      	bls.n	8002104 <RegInt_writeable+0x24>
    return 1;
 8002116:	2001      	movs	r0, #1
 8002118:	e000      	b.n	800211c <RegInt_writeable+0x3c>
 800211a:	2001      	movs	r0, #1
}
 800211c:	b004      	add	sp, #16
 800211e:	bd10      	pop	{r4, pc}
		if (reg == read_only_addr[i]){return 0;}
 8002120:	2000      	movs	r0, #0
 8002122:	e7fb      	b.n	800211c <RegInt_writeable+0x3c>
 8002124:	08016860 	.word	0x08016860

08002128 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8002128:	4770      	bx	lr

0800212a <rtc_tick_to_time>:
 *
 * @param[in] tick rtc ticks in ms
 * @param[out] time RTC time
 */
static void rtc_tick_to_time(uint32_t tick, RTC_TimeTypeDef *time)
{
 800212a:	b570      	push	{r4, r5, r6, lr}
 800212c:	0006      	movs	r6, r0
 800212e:	000c      	movs	r4, r1
	uint32_t rtc_ticks_ms = tick;

	time->SecondFraction = hrtc.Init.SynchPrediv;
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <rtc_tick_to_time+0x6e>)
 8002132:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8002134:	608d      	str	r5, [r1, #8]

	time->Hours = (rtc_ticks_ms / (60 * 60 * 1000)) % 24;
 8002136:	4919      	ldr	r1, [pc, #100]	; (800219c <rtc_tick_to_time+0x72>)
 8002138:	f00e ff1e 	bl	8010f78 <__udivsi3>
 800213c:	2118      	movs	r1, #24
 800213e:	f00e ffa1 	bl	8011084 <__aeabi_uidivmod>
 8002142:	7021      	strb	r1, [r4, #0]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 60 * 1000);
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <rtc_tick_to_time+0x72>)
 8002146:	0030      	movs	r0, r6
 8002148:	f00e ff9c 	bl	8011084 <__aeabi_uidivmod>
 800214c:	000e      	movs	r6, r1

	time->Minutes = (rtc_ticks_ms / (60 * 1000)) % 60;
 800214e:	4914      	ldr	r1, [pc, #80]	; (80021a0 <rtc_tick_to_time+0x76>)
 8002150:	0030      	movs	r0, r6
 8002152:	f00e ff11 	bl	8010f78 <__udivsi3>
 8002156:	213c      	movs	r1, #60	; 0x3c
 8002158:	f00e ff94 	bl	8011084 <__aeabi_uidivmod>
 800215c:	7061      	strb	r1, [r4, #1]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 1000);
 800215e:	4910      	ldr	r1, [pc, #64]	; (80021a0 <rtc_tick_to_time+0x76>)
 8002160:	0030      	movs	r0, r6
 8002162:	f00e ff8f 	bl	8011084 <__aeabi_uidivmod>
 8002166:	000e      	movs	r6, r1

	time->Seconds = (rtc_ticks_ms / 1000) % 60;
 8002168:	21fa      	movs	r1, #250	; 0xfa
 800216a:	0089      	lsls	r1, r1, #2
 800216c:	0030      	movs	r0, r6
 800216e:	f00e ff03 	bl	8010f78 <__udivsi3>
 8002172:	213c      	movs	r1, #60	; 0x3c
 8002174:	f00e ff86 	bl	8011084 <__aeabi_uidivmod>
 8002178:	70a1      	strb	r1, [r4, #2]

	rtc_ticks_ms = rtc_ticks_ms % 1000;
 800217a:	21fa      	movs	r1, #250	; 0xfa
 800217c:	0089      	lsls	r1, r1, #2
 800217e:	0030      	movs	r0, r6
 8002180:	f00e ff80 	bl	8011084 <__aeabi_uidivmod>

	time->SubSeconds = time->SecondFraction - (rtc_ticks_ms * (time->SecondFraction + 1)) / 1000;
 8002184:	1c68      	adds	r0, r5, #1
 8002186:	4348      	muls	r0, r1
 8002188:	21fa      	movs	r1, #250	; 0xfa
 800218a:	0089      	lsls	r1, r1, #2
 800218c:	f00e fef4 	bl	8010f78 <__udivsi3>
 8002190:	1a2d      	subs	r5, r5, r0
 8002192:	6065      	str	r5, [r4, #4]
}
 8002194:	bd70      	pop	{r4, r5, r6, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	2000018c 	.word	0x2000018c
 800219c:	0036ee80 	.word	0x0036ee80
 80021a0:	0000ea60 	.word	0x0000ea60

080021a4 <rtc_time_to_tick>:
{
 80021a4:	b510      	push	{r4, lr}
	if (time->Hours)
 80021a6:	7803      	ldrb	r3, [r0, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01d      	beq.n	80021e8 <rtc_time_to_tick+0x44>
		rtc_ticks_ms += time->Hours * 60 * 60 * 1000;
 80021ac:	4c0f      	ldr	r4, [pc, #60]	; (80021ec <rtc_time_to_tick+0x48>)
 80021ae:	435c      	muls	r4, r3
	if (time->Minutes)
 80021b0:	7843      	ldrb	r3, [r0, #1]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <rtc_time_to_tick+0x18>
		rtc_ticks_ms += time->Minutes * 60 * 1000;
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <rtc_time_to_tick+0x4c>)
 80021b8:	4353      	muls	r3, r2
 80021ba:	18e4      	adds	r4, r4, r3
	if (time->Seconds)
 80021bc:	7882      	ldrb	r2, [r0, #2]
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d005      	beq.n	80021ce <rtc_time_to_tick+0x2a>
		rtc_ticks_ms += time->Seconds * 1000;
 80021c2:	0153      	lsls	r3, r2, #5
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	00da      	lsls	r2, r3, #3
 80021cc:	18a4      	adds	r4, r4, r2
	rtc_ticks_ms += ((time->SecondFraction - time->SubSeconds) * 1000) / (time->SecondFraction + 1);
 80021ce:	6881      	ldr	r1, [r0, #8]
 80021d0:	6842      	ldr	r2, [r0, #4]
 80021d2:	1a8a      	subs	r2, r1, r2
 80021d4:	0153      	lsls	r3, r2, #5
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	00d8      	lsls	r0, r3, #3
 80021de:	3101      	adds	r1, #1
 80021e0:	f00e feca 	bl	8010f78 <__udivsi3>
 80021e4:	1900      	adds	r0, r0, r4
}
 80021e6:	bd10      	pop	{r4, pc}
	uint32_t rtc_ticks_ms = 0;
 80021e8:	2400      	movs	r4, #0
 80021ea:	e7e1      	b.n	80021b0 <rtc_time_to_tick+0xc>
 80021ec:	0036ee80 	.word	0x0036ee80
 80021f0:	0000ea60 	.word	0x0000ea60

080021f4 <acc_hal_integration_get_implementation>:
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
	return &hal;
 80021f4:	4801      	ldr	r0, [pc, #4]	; (80021fc <acc_hal_integration_get_implementation+0x8>)
}
 80021f6:	3020      	adds	r0, #32
 80021f8:	4770      	bx	lr
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	08016860 	.word	0x08016860

08002200 <acc_hal_integration_get_reference_frequency>:
}
 8002200:	4800      	ldr	r0, [pc, #0]	; (8002204 <acc_hal_integration_get_reference_frequency+0x4>)
 8002202:	4770      	bx	lr
 8002204:	4bb71b00 	.word	0x4bb71b00

08002208 <data_free>:
void data_free(void){
 8002208:	b510      	push	{r4, lr}
	free(data);
 800220a:	4c05      	ldr	r4, [pc, #20]	; (8002220 <data_free+0x18>)
 800220c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800220e:	f014 f93d 	bl	801648c <free>
	data = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	6663      	str	r3, [r4, #100]	; 0x64
	sweeps = 0;
 8002216:	2268      	movs	r2, #104	; 0x68
 8002218:	52a3      	strh	r3, [r4, r2]
	bins = 0;
 800221a:	3202      	adds	r2, #2
 800221c:	52a3      	strh	r3, [r4, r2]
}
 800221e:	bd10      	pop	{r4, pc}
 8002220:	2000018c 	.word	0x2000018c

08002224 <acc_sensor_protocol_r2_check_asic_id>:
 8002224:	b530      	push	{r4, r5, lr}
 8002226:	250e      	movs	r5, #14
 8002228:	2400      	movs	r4, #0
 800222a:	b085      	sub	sp, #20
 800222c:	446d      	add	r5, sp
 800222e:	002a      	movs	r2, r5
 8002230:	0021      	movs	r1, r4
 8002232:	802c      	strh	r4, [r5, #0]
 8002234:	f00d fcdc 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 8002238:	882a      	ldrh	r2, [r5, #0]
 800223a:	4b07      	ldr	r3, [pc, #28]	; (8002258 <acc_sensor_protocol_r2_check_asic_id+0x34>)
 800223c:	2001      	movs	r0, #1
 800223e:	429a      	cmp	r2, r3
 8002240:	d007      	beq.n	8002252 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 8002242:	9200      	str	r2, [sp, #0]
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <acc_sensor_protocol_r2_check_asic_id+0x38>)
 8002246:	0020      	movs	r0, r4
 8002248:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800224a:	4905      	ldr	r1, [pc, #20]	; (8002260 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 800224c:	4a05      	ldr	r2, [pc, #20]	; (8002264 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 800224e:	47a8      	blx	r5
 8002250:	0020      	movs	r0, r4
 8002252:	b005      	add	sp, #20
 8002254:	bd30      	pop	{r4, r5, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	00001112 	.word	0x00001112
 800225c:	200005d0 	.word	0x200005d0
 8002260:	0801d2c5 	.word	0x0801d2c5
 8002264:	0801d297 	.word	0x0801d297

08002268 <update_program.lto_priv.118>:
 8002268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800226a:	6945      	ldr	r5, [r0, #20]
 800226c:	2401      	movs	r4, #1
 800226e:	002b      	movs	r3, r5
 8002270:	33ba      	adds	r3, #186	; 0xba
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4319      	orrs	r1, r3
 8002276:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002278:	404c      	eors	r4, r1
 800227a:	425a      	negs	r2, r3
 800227c:	4153      	adcs	r3, r2
 800227e:	428b      	cmp	r3, r1
 8002280:	d006      	beq.n	8002290 <update_program.lto_priv.118+0x28>
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	23ef      	movs	r3, #239	; 0xef
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <update_program.lto_priv.118+0x30>)
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <update_program.lto_priv.118+0x34>)
 800228a:	6800      	ldr	r0, [r0, #0]
 800228c:	f00a fd90 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8002290:	642c      	str	r4, [r5, #64]	; 0x40
 8002292:	2001      	movs	r0, #1
 8002294:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	08017c3c 	.word	0x08017c3c
 800229c:	080193c4 	.word	0x080193c4

080022a0 <acc_sensor_protocol_r2_transfer_data>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	0016      	movs	r6, r2
 80022a4:	0005      	movs	r5, r0
 80022a6:	f00a fd21 	bl	800ccec <internal_buffer_processed_read.constprop.29>
 80022aa:	0004      	movs	r4, r0
 80022ac:	0033      	movs	r3, r6
 80022ae:	0002      	movs	r2, r0
 80022b0:	0029      	movs	r1, r5
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fd ff40 	bl	8000138 <acc_probes_execute_uint16>
 80022b8:	0020      	movs	r0, r4
 80022ba:	bd70      	pop	{r4, r5, r6, pc}

080022bc <acc_element_source_adc_inject_data>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	0004      	movs	r4, r0
 80022c0:	0015      	movs	r5, r2
 80022c2:	6940      	ldr	r0, [r0, #20]
 80022c4:	f014 f8ec 	bl	80164a0 <memcpy>
 80022c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <acc_element_source_adc_inject_data+0x24>)
 80022cc:	601d      	str	r5, [r3, #0]
 80022ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022d0:	6820      	ldr	r0, [r4, #0]
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	2200      	movs	r2, #0
 80022d6:	6a23      	ldr	r3, [r4, #32]
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	6843      	ldr	r3, [r0, #4]
 80022dc:	4798      	blx	r3
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	51645c3c 	.word	0x51645c3c

080022e4 <inject_data.lto_priv.149>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	3038      	adds	r0, #56	; 0x38
 80022e8:	f7ff ffe8 	bl	80022bc <acc_element_source_adc_inject_data>
 80022ec:	bd10      	pop	{r4, pc}

080022ee <inject_data.lto_priv.148>:
 80022ee:	b510      	push	{r4, lr}
 80022f0:	3038      	adds	r0, #56	; 0x38
 80022f2:	f7ff ffe3 	bl	80022bc <acc_element_source_adc_inject_data>
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <event.lto_priv.107>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0004      	movs	r4, r0
 80022fc:	69c5      	ldr	r5, [r0, #28]
 80022fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002300:	1d2e      	adds	r6, r5, #4
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	782b      	ldrb	r3, [r5, #0]
 8002306:	6900      	ldr	r0, [r0, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <event.lto_priv.107+0x28>
 800230c:	0001      	movs	r1, r0
 800230e:	0030      	movs	r0, r6
 8002310:	f014 f8c6 	bl	80164a0 <memcpy>
 8002314:	2300      	movs	r3, #0
 8002316:	702b      	strb	r3, [r5, #0]
 8002318:	6820      	ldr	r0, [r4, #0]
 800231a:	6843      	ldr	r3, [r0, #4]
 800231c:	4798      	blx	r3
 800231e:	bd70      	pop	{r4, r5, r6, pc}
 8002320:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002322:	0031      	movs	r1, r6
 8002324:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002326:	47a8      	blx	r5
 8002328:	e7f6      	b.n	8002318 <event.lto_priv.107+0x20>

0800232a <acc_service_send_data>:
 800232a:	b570      	push	{r4, r5, r6, lr}
 800232c:	9d04      	ldr	r5, [sp, #16]
 800232e:	001e      	movs	r6, r3
 8002330:	782b      	ldrb	r3, [r5, #0]
 8002332:	6944      	ldr	r4, [r0, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <acc_service_send_data+0x24>
 8002338:	7ea3      	ldrb	r3, [r4, #26]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d011      	beq.n	8002362 <acc_service_send_data+0x38>
 800233e:	68e3      	ldr	r3, [r4, #12]
 8002340:	6860      	ldr	r0, [r4, #4]
 8002342:	4293      	cmp	r3, r2
 8002344:	d900      	bls.n	8002348 <acc_service_send_data+0x1e>
 8002346:	0013      	movs	r3, r2
 8002348:	001a      	movs	r2, r3
 800234a:	f014 f8a9 	bl	80164a0 <memcpy>
 800234e:	782b      	ldrb	r3, [r5, #0]
 8002350:	6920      	ldr	r0, [r4, #16]
 8002352:	7663      	strb	r3, [r4, #25]
 8002354:	2800      	cmp	r0, #0
 8002356:	d003      	beq.n	8002360 <acc_service_send_data+0x36>
 8002358:	6962      	ldr	r2, [r4, #20]
 800235a:	0031      	movs	r1, r6
 800235c:	f014 f8a0 	bl	80164a0 <memcpy>
 8002360:	bd70      	pop	{r4, r5, r6, pc}
 8002362:	68a3      	ldr	r3, [r4, #8]
 8002364:	6019      	str	r1, [r3, #0]
 8002366:	e7f2      	b.n	800234e <acc_service_send_data+0x24>

08002368 <sparse_send_data>:
 8002368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800236a:	0005      	movs	r5, r0
 800236c:	0010      	movs	r0, r2
 800236e:	798a      	ldrb	r2, [r1, #6]
 8002370:	790e      	ldrb	r6, [r1, #4]
 8002372:	794c      	ldrb	r4, [r1, #5]
 8002374:	ab03      	add	r3, sp, #12
 8002376:	709a      	strb	r2, [r3, #2]
 8002378:	aa02      	add	r2, sp, #8
 800237a:	705e      	strb	r6, [r3, #1]
 800237c:	7014      	strb	r4, [r2, #0]
 800237e:	701c      	strb	r4, [r3, #0]
 8002380:	9200      	str	r2, [sp, #0]
 8002382:	694a      	ldr	r2, [r1, #20]
 8002384:	0029      	movs	r1, r5
 8002386:	f7ff ffd0 	bl	800232a <acc_service_send_data>
 800238a:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800238c <envelope_send_data>:
 800238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238e:	0005      	movs	r5, r0
 8002390:	b085      	sub	sp, #20
 8002392:	0010      	movs	r0, r2
 8002394:	79ca      	ldrb	r2, [r1, #7]
 8002396:	794c      	ldrb	r4, [r1, #5]
 8002398:	ab03      	add	r3, sp, #12
 800239a:	790e      	ldrb	r6, [r1, #4]
 800239c:	798f      	ldrb	r7, [r1, #6]
 800239e:	70da      	strb	r2, [r3, #3]
 80023a0:	aa02      	add	r2, sp, #8
 80023a2:	7014      	strb	r4, [r2, #0]
 80023a4:	701f      	strb	r7, [r3, #0]
 80023a6:	705c      	strb	r4, [r3, #1]
 80023a8:	709e      	strb	r6, [r3, #2]
 80023aa:	9200      	str	r2, [sp, #0]
 80023ac:	694a      	ldr	r2, [r1, #20]
 80023ae:	0029      	movs	r1, r5
 80023b0:	f7ff ffbb 	bl	800232a <acc_service_send_data>
 80023b4:	b005      	add	sp, #20
 80023b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023b8 <filldata_sparse>:
void filldata_sparse(uint8_t far){
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	0006      	movs	r6, r0
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80023bc:	4b20      	ldr	r3, [pc, #128]	; (8002440 <filldata_sparse+0x88>)
 80023be:	001a      	movs	r2, r3
 80023c0:	326c      	adds	r2, #108	; 0x6c
 80023c2:	8910      	ldrh	r0, [r2, #8]
 80023c4:	2268      	movs	r2, #104	; 0x68
 80023c6:	5a9c      	ldrh	r4, [r3, r2]
 80023c8:	0021      	movs	r1, r4
 80023ca:	f00e fdd5 	bl	8010f78 <__udivsi3>
 80023ce:	b285      	uxth	r5, r0
	if(!far){
 80023d0:	2e00      	cmp	r6, #0
 80023d2:	d01c      	beq.n	800240e <filldata_sparse+0x56>
		bins_far = sparse_metadata_far.data_length/sweeps;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <filldata_sparse+0x8c>)
 80023d6:	8998      	ldrh	r0, [r3, #12]
 80023d8:	0021      	movs	r1, r4
 80023da:	f00e fdcd 	bl	8010f78 <__udivsi3>
 80023de:	b286      	uxth	r6, r0
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 80023e0:	2400      	movs	r4, #0
 80023e2:	e027      	b.n	8002434 <filldata_sparse+0x7c>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 80023e4:	00a2      	lsls	r2, r4, #2
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <filldata_sparse+0x88>)
 80023e8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <filldata_sparse+0x8c>)
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	002b      	movs	r3, r5
 80023f0:	4363      	muls	r3, r4
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	18c9      	adds	r1, r1, r3
 80023f6:	5880      	ldr	r0, [r0, r2]
 80023f8:	006a      	lsls	r2, r5, #1
 80023fa:	f014 f851 	bl	80164a0 <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 80023fe:	3401      	adds	r4, #1
 8002400:	b2a4      	uxth	r4, r4
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <filldata_sparse+0x88>)
 8002404:	2368      	movs	r3, #104	; 0x68
 8002406:	5ad3      	ldrh	r3, [r2, r3]
 8002408:	42a3      	cmp	r3, r4
 800240a:	d8eb      	bhi.n	80023e4 <filldata_sparse+0x2c>
}
 800240c:	bd70      	pop	{r4, r5, r6, pc}
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800240e:	2400      	movs	r4, #0
 8002410:	e7f7      	b.n	8002402 <filldata_sparse+0x4a>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <filldata_sparse+0x88>)
 8002414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002416:	00a2      	lsls	r2, r4, #2
 8002418:	58d0      	ldr	r0, [r2, r3]
 800241a:	006b      	lsls	r3, r5, #1
 800241c:	18c0      	adds	r0, r0, r3
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <filldata_sparse+0x8c>)
 8002420:	6999      	ldr	r1, [r3, #24]
 8002422:	0033      	movs	r3, r6
 8002424:	4363      	muls	r3, r4
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	18c9      	adds	r1, r1, r3
 800242a:	0072      	lsls	r2, r6, #1
 800242c:	f014 f838 	bl	80164a0 <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8002430:	3401      	adds	r4, #1
 8002432:	b2a4      	uxth	r4, r4
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <filldata_sparse+0x88>)
 8002436:	2368      	movs	r3, #104	; 0x68
 8002438:	5ad3      	ldrh	r3, [r2, r3]
 800243a:	42a3      	cmp	r3, r4
 800243c:	d8e9      	bhi.n	8002412 <filldata_sparse+0x5a>
 800243e:	e7e5      	b.n	800240c <filldata_sparse+0x54>
 8002440:	2000018c 	.word	0x2000018c
 8002444:	2000020c 	.word	0x2000020c

08002448 <acc_sensor_manager_prepare_radar_engine>:
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	46d6      	mov	lr, sl
 800244c:	464f      	mov	r7, r9
 800244e:	4646      	mov	r6, r8
 8002450:	000c      	movs	r4, r1
 8002452:	b5c0      	push	{r6, r7, lr}
 8002454:	2100      	movs	r1, #0
 8002456:	b092      	sub	sp, #72	; 0x48
 8002458:	0005      	movs	r5, r0
 800245a:	0017      	movs	r7, r2
 800245c:	3004      	adds	r0, #4
 800245e:	2234      	movs	r2, #52	; 0x34
 8002460:	4698      	mov	r8, r3
 8002462:	f011 faff 	bl	8013a64 <memset>
 8002466:	0020      	movs	r0, r4
 8002468:	f7fe fc96 	bl	8000d98 <acc_base_configuration_sensor_get>
 800246c:	4681      	mov	r9, r0
 800246e:	0020      	movs	r0, r4
 8002470:	f7fe fc0a 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8002474:	ae01      	add	r6, sp, #4
 8002476:	8030      	strh	r0, [r6, #0]
 8002478:	0020      	movs	r0, r4
 800247a:	f7fe fc1a 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800247e:	8070      	strh	r0, [r6, #2]
 8002480:	0020      	movs	r0, r4
 8002482:	f7fe fba1 	bl	8000bc8 <configuration_is_valid>
 8002486:	2300      	movs	r3, #0
 8002488:	4298      	cmp	r0, r3
 800248a:	d001      	beq.n	8002490 <acc_sensor_manager_prepare_radar_engine+0x48>
 800248c:	1da3      	adds	r3, r4, #6
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	0020      	movs	r0, r4
 8002492:	80b3      	strh	r3, [r6, #4]
 8002494:	f7fe fc5b 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8002498:	0032      	movs	r2, r6
 800249a:	80f0      	strh	r0, [r6, #6]
 800249c:	4649      	mov	r1, r9
 800249e:	2304      	movs	r3, #4
 80024a0:	2012      	movs	r0, #18
 80024a2:	f7fd fe49 	bl	8000138 <acc_probes_execute_uint16>
 80024a6:	2318      	movs	r3, #24
 80024a8:	469a      	mov	sl, r3
 80024aa:	44aa      	add	sl, r5
 80024ac:	2220      	movs	r2, #32
 80024ae:	2100      	movs	r1, #0
 80024b0:	4650      	mov	r0, sl
 80024b2:	f011 fad7 	bl	8013a64 <memset>
 80024b6:	0021      	movs	r1, r4
 80024b8:	4650      	mov	r0, sl
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	4798      	blx	r3
 80024be:	ae0a      	add	r6, sp, #40	; 0x28
 80024c0:	4681      	mov	r9, r0
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d018      	beq.n	80024f8 <acc_sensor_manager_prepare_radar_engine+0xb0>
 80024c6:	2220      	movs	r2, #32
 80024c8:	2100      	movs	r1, #0
 80024ca:	0030      	movs	r0, r6
 80024cc:	f011 faca 	bl	8013a64 <memset>
 80024d0:	221c      	movs	r2, #28
 80024d2:	2100      	movs	r1, #0
 80024d4:	a803      	add	r0, sp, #12
 80024d6:	f011 fac5 	bl	8013a64 <memset>
 80024da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80024dc:	0032      	movs	r2, r6
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0021      	movs	r1, r4
 80024e2:	4699      	mov	r9, r3
 80024e4:	4650      	mov	r0, sl
 80024e6:	ab03      	add	r3, sp, #12
 80024e8:	47c8      	blx	r9
 80024ea:	4681      	mov	r9, r0
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d10d      	bne.n	800250c <acc_sensor_manager_prepare_radar_engine+0xc4>
 80024f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80024f2:	4650      	mov	r0, sl
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	4798      	blx	r3
 80024f8:	0020      	movs	r0, r4
 80024fa:	f7fe fc3a 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d02f      	beq.n	8002562 <acc_sensor_manager_prepare_radar_engine+0x11a>
 8002502:	2804      	cmp	r0, #4
 8002504:	d04d      	beq.n	80025a2 <acc_sensor_manager_prepare_radar_engine+0x15a>
 8002506:	2300      	movs	r3, #0
 8002508:	702b      	strb	r3, [r5, #0]
 800250a:	e02c      	b.n	8002566 <acc_sensor_manager_prepare_radar_engine+0x11e>
 800250c:	2f00      	cmp	r7, #0
 800250e:	d007      	beq.n	8002520 <acc_sensor_manager_prepare_radar_engine+0xd8>
 8002510:	003b      	movs	r3, r7
 8002512:	0032      	movs	r2, r6
 8002514:	ca83      	ldmia	r2!, {r0, r1, r7}
 8002516:	c383      	stmia	r3!, {r0, r1, r7}
 8002518:	ca83      	ldmia	r2!, {r0, r1, r7}
 800251a:	c383      	stmia	r3!, {r0, r1, r7}
 800251c:	ca03      	ldmia	r2!, {r0, r1}
 800251e:	c303      	stmia	r3!, {r0, r1}
 8002520:	4643      	mov	r3, r8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <acc_sensor_manager_prepare_radar_engine+0xe8>
 8002526:	221c      	movs	r2, #28
 8002528:	a903      	add	r1, sp, #12
 800252a:	4640      	mov	r0, r8
 800252c:	f013 ffb8 	bl	80164a0 <memcpy>
 8002530:	0020      	movs	r0, r4
 8002532:	f7fe fbdf 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8002536:	2801      	cmp	r0, #1
 8002538:	d010      	beq.n	800255c <acc_sensor_manager_prepare_radar_engine+0x114>
 800253a:	0020      	movs	r0, r4
 800253c:	f7fe fbc4 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8002540:	1c01      	adds	r1, r0, #0
 8002542:	4819      	ldr	r0, [pc, #100]	; (80025a8 <acc_sensor_manager_prepare_radar_engine+0x160>)
 8002544:	f00e f8d4 	bl	80106f0 <__aeabi_fdiv>
 8002548:	4917      	ldr	r1, [pc, #92]	; (80025a8 <acc_sensor_manager_prepare_radar_engine+0x160>)
 800254a:	f00d ff37 	bl	80103bc <__aeabi_fadd>
 800254e:	f00e ff21 	bl	8011394 <__aeabi_f2uiz>
 8002552:	2300      	movs	r3, #0
 8002554:	6068      	str	r0, [r5, #4]
 8002556:	60eb      	str	r3, [r5, #12]
 8002558:	816b      	strh	r3, [r5, #10]
 800255a:	e7cd      	b.n	80024f8 <acc_sensor_manager_prepare_radar_engine+0xb0>
 800255c:	20fa      	movs	r0, #250	; 0xfa
 800255e:	00c0      	lsls	r0, r0, #3
 8002560:	e7f7      	b.n	8002552 <acc_sensor_manager_prepare_radar_engine+0x10a>
 8002562:	2302      	movs	r3, #2
 8002564:	702b      	strb	r3, [r5, #0]
 8002566:	0020      	movs	r0, r4
 8002568:	f7fe fbc4 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800256c:	4243      	negs	r3, r0
 800256e:	4158      	adcs	r0, r3
 8002570:	7068      	strb	r0, [r5, #1]
 8002572:	0020      	movs	r0, r4
 8002574:	f7fe fb42 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8002578:	70a8      	strb	r0, [r5, #2]
 800257a:	0020      	movs	r0, r4
 800257c:	f7fe fc0c 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002580:	2305      	movs	r3, #5
 8002582:	6070      	str	r0, [r6, #4]
 8002584:	7033      	strb	r3, [r6, #0]
 8002586:	0030      	movs	r0, r6
 8002588:	3302      	adds	r3, #2
 800258a:	221c      	movs	r2, #28
 800258c:	4641      	mov	r1, r8
 800258e:	60b3      	str	r3, [r6, #8]
 8002590:	f7fd fdb8 	bl	8000104 <acc_probes_execute>
 8002594:	4648      	mov	r0, r9
 8002596:	b012      	add	sp, #72	; 0x48
 8002598:	bc1c      	pop	{r2, r3, r4}
 800259a:	4690      	mov	r8, r2
 800259c:	4699      	mov	r9, r3
 800259e:	46a2      	mov	sl, r4
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a2:	2301      	movs	r3, #1
 80025a4:	702b      	strb	r3, [r5, #0]
 80025a6:	e7de      	b.n	8002566 <acc_sensor_manager_prepare_radar_engine+0x11e>
 80025a8:	44fa0000 	.word	0x44fa0000

080025ac <saturation_check_u16>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	f00d fa69 	bl	800fa84 <acc_alg_basic_saturation_check_u16>
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <abs_q3_12_complex>:
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	46c6      	mov	lr, r8
 80025b8:	0007      	movs	r7, r0
 80025ba:	4688      	mov	r8, r1
 80025bc:	2400      	movs	r4, #0
 80025be:	b500      	push	{lr}
 80025c0:	0895      	lsrs	r5, r2, #2
 80025c2:	0066      	lsls	r6, r4, #1
 80025c4:	42ac      	cmp	r4, r5
 80025c6:	d103      	bne.n	80025d0 <abs_q3_12_complex+0x1c>
 80025c8:	0030      	movs	r0, r6
 80025ca:	bc04      	pop	{r2}
 80025cc:	4690      	mov	r8, r2
 80025ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025d0:	00a3      	lsls	r3, r4, #2
 80025d2:	5bda      	ldrh	r2, [r3, r7]
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	8858      	ldrh	r0, [r3, #2]
 80025d8:	3401      	adds	r4, #1
 80025da:	0400      	lsls	r0, r0, #16
 80025dc:	4310      	orrs	r0, r2
 80025de:	f00d fad3 	bl	800fb88 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80025e2:	4643      	mov	r3, r8
 80025e4:	5398      	strh	r0, [r3, r6]
 80025e6:	e7ec      	b.n	80025c2 <abs_q3_12_complex+0xe>

080025e8 <iq_mix_q3_12_complex>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	46de      	mov	lr, fp
 80025ec:	464e      	mov	r6, r9
 80025ee:	4645      	mov	r5, r8
 80025f0:	4657      	mov	r7, sl
 80025f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025f4:	b5e0      	push	{r5, r6, r7, lr}
 80025f6:	4698      	mov	r8, r3
 80025f8:	681e      	ldr	r6, [r3, #0]
 80025fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80025fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80025fe:	681d      	ldr	r5, [r3, #0]
 8002600:	0004      	movs	r4, r0
 8002602:	1c28      	adds	r0, r5, #0
 8002604:	f00e f986 	bl	8010914 <__aeabi_fmul>
 8002608:	f00d fa1e 	bl	800fa48 <accumulator_mod.lto_priv.531>
 800260c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800260e:	0007      	movs	r7, r0
 8002610:	1c28      	adds	r0, r5, #0
 8002612:	f00e f97f 	bl	8010914 <__aeabi_fmul>
 8002616:	f00d fa17 	bl	800fa48 <accumulator_mod.lto_priv.531>
 800261a:	4681      	mov	r9, r0
 800261c:	6924      	ldr	r4, [r4, #16]
 800261e:	08b5      	lsrs	r5, r6, #2
 8002620:	00ad      	lsls	r5, r5, #2
 8002622:	192d      	adds	r5, r5, r4
 8002624:	42ac      	cmp	r4, r5
 8002626:	d109      	bne.n	800263c <iq_mix_q3_12_complex+0x54>
 8002628:	2303      	movs	r3, #3
 800262a:	439e      	bics	r6, r3
 800262c:	4643      	mov	r3, r8
 800262e:	601e      	str	r6, [r3, #0]
 8002630:	bc3c      	pop	{r2, r3, r4, r5}
 8002632:	4690      	mov	r8, r2
 8002634:	4699      	mov	r9, r3
 8002636:	46a2      	mov	sl, r4
 8002638:	46ab      	mov	fp, r5
 800263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	05db      	lsls	r3, r3, #23
 8002640:	18f8      	adds	r0, r7, r3
 8002642:	f00d fa8b 	bl	800fb5c <acc_alg_basic_math_q3_12_sin>
 8002646:	4682      	mov	sl, r0
 8002648:	0038      	movs	r0, r7
 800264a:	f00d fa87 	bl	800fb5c <acc_alg_basic_math_q3_12_sin>
 800264e:	2200      	movs	r2, #0
 8002650:	5ea3      	ldrsh	r3, [r4, r2]
 8002652:	4651      	mov	r1, sl
 8002654:	469c      	mov	ip, r3
 8002656:	2202      	movs	r2, #2
 8002658:	5ea3      	ldrsh	r3, [r4, r2]
 800265a:	4662      	mov	r2, ip
 800265c:	4351      	muls	r1, r2
 800265e:	17ca      	asrs	r2, r1, #31
 8002660:	0512      	lsls	r2, r2, #20
 8002662:	0d12      	lsrs	r2, r2, #20
 8002664:	1852      	adds	r2, r2, r1
 8002666:	0001      	movs	r1, r0
 8002668:	4359      	muls	r1, r3
 800266a:	468b      	mov	fp, r1
 800266c:	17c9      	asrs	r1, r1, #31
 800266e:	0509      	lsls	r1, r1, #20
 8002670:	0d09      	lsrs	r1, r1, #20
 8002672:	4459      	add	r1, fp
 8002674:	1312      	asrs	r2, r2, #12
 8002676:	1309      	asrs	r1, r1, #12
 8002678:	1a52      	subs	r2, r2, r1
 800267a:	8022      	strh	r2, [r4, #0]
 800267c:	4652      	mov	r2, sl
 800267e:	435a      	muls	r2, r3
 8002680:	17d3      	asrs	r3, r2, #31
 8002682:	051b      	lsls	r3, r3, #20
 8002684:	0d1b      	lsrs	r3, r3, #20
 8002686:	189b      	adds	r3, r3, r2
 8002688:	4662      	mov	r2, ip
 800268a:	4342      	muls	r2, r0
 800268c:	17d0      	asrs	r0, r2, #31
 800268e:	0500      	lsls	r0, r0, #20
 8002690:	0d00      	lsrs	r0, r0, #20
 8002692:	1880      	adds	r0, r0, r2
 8002694:	131b      	asrs	r3, r3, #12
 8002696:	1300      	asrs	r0, r0, #12
 8002698:	181b      	adds	r3, r3, r0
 800269a:	8063      	strh	r3, [r4, #2]
 800269c:	444f      	add	r7, r9
 800269e:	3404      	adds	r4, #4
 80026a0:	e7c0      	b.n	8002624 <iq_mix_q3_12_complex+0x3c>

080026a2 <iq_mix_q3_12>:
 80026a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a4:	46de      	mov	lr, fp
 80026a6:	4657      	mov	r7, sl
 80026a8:	464e      	mov	r6, r9
 80026aa:	4645      	mov	r5, r8
 80026ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ae:	b5e0      	push	{r5, r6, r7, lr}
 80026b0:	4699      	mov	r9, r3
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0006      	movs	r6, r0
 80026b6:	085c      	lsrs	r4, r3, #1
 80026b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026ba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80026bc:	681d      	ldr	r5, [r3, #0]
 80026be:	1c28      	adds	r0, r5, #0
 80026c0:	f00e f928 	bl	8010914 <__aeabi_fmul>
 80026c4:	f00d f9c0 	bl	800fa48 <accumulator_mod.lto_priv.531>
 80026c8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80026ca:	0007      	movs	r7, r0
 80026cc:	1c28      	adds	r0, r5, #0
 80026ce:	f00e f921 	bl	8010914 <__aeabi_fmul>
 80026d2:	f00d f9b9 	bl	800fa48 <accumulator_mod.lto_priv.531>
 80026d6:	0063      	lsls	r3, r4, #1
 80026d8:	4698      	mov	r8, r3
 80026da:	4682      	mov	sl, r0
 80026dc:	6935      	ldr	r5, [r6, #16]
 80026de:	6976      	ldr	r6, [r6, #20]
 80026e0:	44a8      	add	r8, r5
 80026e2:	4545      	cmp	r5, r8
 80026e4:	d108      	bne.n	80026f8 <iq_mix_q3_12+0x56>
 80026e6:	464b      	mov	r3, r9
 80026e8:	00a4      	lsls	r4, r4, #2
 80026ea:	601c      	str	r4, [r3, #0]
 80026ec:	bc3c      	pop	{r2, r3, r4, r5}
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	46a2      	mov	sl, r4
 80026f4:	46ab      	mov	fp, r5
 80026f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026f8:	2200      	movs	r2, #0
 80026fa:	5eab      	ldrsh	r3, [r5, r2]
 80026fc:	3502      	adds	r5, #2
 80026fe:	469b      	mov	fp, r3
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	05db      	lsls	r3, r3, #23
 8002704:	18f8      	adds	r0, r7, r3
 8002706:	f00d fa29 	bl	800fb5c <acc_alg_basic_math_q3_12_sin>
 800270a:	465b      	mov	r3, fp
 800270c:	4343      	muls	r3, r0
 800270e:	17d8      	asrs	r0, r3, #31
 8002710:	0500      	lsls	r0, r0, #20
 8002712:	0d00      	lsrs	r0, r0, #20
 8002714:	18c0      	adds	r0, r0, r3
 8002716:	1300      	asrs	r0, r0, #12
 8002718:	8030      	strh	r0, [r6, #0]
 800271a:	0038      	movs	r0, r7
 800271c:	f00d fa1e 	bl	800fb5c <acc_alg_basic_math_q3_12_sin>
 8002720:	465b      	mov	r3, fp
 8002722:	4343      	muls	r3, r0
 8002724:	17d8      	asrs	r0, r3, #31
 8002726:	0500      	lsls	r0, r0, #20
 8002728:	0d00      	lsrs	r0, r0, #20
 800272a:	18c0      	adds	r0, r0, r3
 800272c:	1300      	asrs	r0, r0, #12
 800272e:	8070      	strh	r0, [r6, #2]
 8002730:	4457      	add	r7, sl
 8002732:	3604      	adds	r6, #4
 8002734:	e7d5      	b.n	80026e2 <iq_mix_q3_12+0x40>

08002736 <filter_q3_12_complex.lto_priv.108>:
 8002736:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002738:	2200      	movs	r2, #0
 800273a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800273c:	6906      	ldr	r6, [r0, #16]
 800273e:	681d      	ldr	r5, [r3, #0]
 8002740:	ab03      	add	r3, sp, #12
 8002742:	801a      	strh	r2, [r3, #0]
 8002744:	805a      	strh	r2, [r3, #2]
 8002746:	9b03      	ldr	r3, [sp, #12]
 8002748:	08ad      	lsrs	r5, r5, #2
 800274a:	002a      	movs	r2, r5
 800274c:	0031      	movs	r1, r6
 800274e:	3040      	adds	r0, #64	; 0x40
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2301      	movs	r3, #1
 8002754:	0004      	movs	r4, r0
 8002756:	f00c fffb 	bl	800f750 <biquad_q3_12_complex_direct_form_1.lto_priv.532>
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <filter_q3_12_complex.lto_priv.108+0x4e>)
 800275c:	0020      	movs	r0, r4
 800275e:	18eb      	adds	r3, r5, r3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	18f3      	adds	r3, r6, r3
 8002764:	2202      	movs	r2, #2
 8002766:	5e99      	ldrsh	r1, [r3, r2]
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	aa02      	add	r2, sp, #8
 800276c:	8013      	strh	r3, [r2, #0]
 800276e:	2301      	movs	r3, #1
 8002770:	8051      	strh	r1, [r2, #2]
 8002772:	9a02      	ldr	r2, [sp, #8]
 8002774:	0031      	movs	r1, r6
 8002776:	9200      	str	r2, [sp, #0]
 8002778:	425b      	negs	r3, r3
 800277a:	002a      	movs	r2, r5
 800277c:	f00c ffe8 	bl	800f750 <biquad_q3_12_complex_direct_form_1.lto_priv.532>
 8002780:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	3fffffff 	.word	0x3fffffff

08002788 <centering_q12_4>:
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	46de      	mov	lr, fp
 800278c:	464e      	mov	r6, r9
 800278e:	4645      	mov	r5, r8
 8002790:	4657      	mov	r7, sl
 8002792:	b5e0      	push	{r5, r6, r7, lr}
 8002794:	0849      	lsrs	r1, r1, #1
 8002796:	0852      	lsrs	r2, r2, #1
 8002798:	b28b      	uxth	r3, r1
 800279a:	b295      	uxth	r5, r2
 800279c:	b083      	sub	sp, #12
 800279e:	4683      	mov	fp, r0
 80027a0:	4699      	mov	r9, r3
 80027a2:	2d00      	cmp	r5, #0
 80027a4:	d100      	bne.n	80027a8 <centering_q12_4+0x20>
 80027a6:	001d      	movs	r5, r3
 80027a8:	b28b      	uxth	r3, r1
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2301      	movs	r3, #1
 80027ae:	425b      	negs	r3, r3
 80027b0:	46c8      	mov	r8, r9
 80027b2:	002f      	movs	r7, r5
 80027b4:	2600      	movs	r6, #0
 80027b6:	469a      	mov	sl, r3
 80027b8:	45b1      	cmp	r9, r6
 80027ba:	d806      	bhi.n	80027ca <centering_q12_4+0x42>
 80027bc:	b003      	add	sp, #12
 80027be:	bc3c      	pop	{r2, r3, r4, r5}
 80027c0:	4690      	mov	r8, r2
 80027c2:	4699      	mov	r9, r3
 80027c4:	46a2      	mov	sl, r4
 80027c6:	46ab      	mov	fp, r5
 80027c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027ca:	9a01      	ldr	r2, [sp, #4]
 80027cc:	19f3      	adds	r3, r6, r7
 80027ce:	4293      	cmp	r3, r2
 80027d0:	dd00      	ble.n	80027d4 <centering_q12_4+0x4c>
 80027d2:	4647      	mov	r7, r8
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d01e      	beq.n	8002816 <centering_q12_4+0x8e>
 80027d8:	2200      	movs	r2, #0
 80027da:	0010      	movs	r0, r2
 80027dc:	0074      	lsls	r4, r6, #1
 80027de:	445c      	add	r4, fp
 80027e0:	42ba      	cmp	r2, r7
 80027e2:	d31f      	bcc.n	8002824 <centering_q12_4+0x9c>
 80027e4:	2301      	movs	r3, #1
 80027e6:	2800      	cmp	r0, #0
 80027e8:	da00      	bge.n	80027ec <centering_q12_4+0x64>
 80027ea:	4653      	mov	r3, sl
 80027ec:	087a      	lsrs	r2, r7, #1
 80027ee:	b292      	uxth	r2, r2
 80027f0:	4353      	muls	r3, r2
 80027f2:	0039      	movs	r1, r7
 80027f4:	1818      	adds	r0, r3, r0
 80027f6:	f00e fc49 	bl	801108c <__divsi3>
 80027fa:	007b      	lsls	r3, r7, #1
 80027fc:	b202      	sxth	r2, r0
 80027fe:	18e3      	adds	r3, r4, r3
 8002800:	2a00      	cmp	r2, #0
 8002802:	dd1a      	ble.n	800283a <centering_q12_4+0xb2>
 8002804:	b280      	uxth	r0, r0
 8002806:	8822      	ldrh	r2, [r4, #0]
 8002808:	4282      	cmp	r2, r0
 800280a:	d213      	bcs.n	8002834 <centering_q12_4+0xac>
 800280c:	2200      	movs	r2, #0
 800280e:	8022      	strh	r2, [r4, #0]
 8002810:	3402      	adds	r4, #2
 8002812:	42a3      	cmp	r3, r4
 8002814:	d1f7      	bne.n	8002806 <centering_q12_4+0x7e>
 8002816:	4643      	mov	r3, r8
 8002818:	1b5b      	subs	r3, r3, r5
 800281a:	1976      	adds	r6, r6, r5
 800281c:	b29b      	uxth	r3, r3
 800281e:	b2b6      	uxth	r6, r6
 8002820:	4698      	mov	r8, r3
 8002822:	e7c9      	b.n	80027b8 <centering_q12_4+0x30>
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <centering_q12_4+0xd0>)
 8002826:	0053      	lsls	r3, r2, #1
 8002828:	468c      	mov	ip, r1
 800282a:	5ae3      	ldrh	r3, [r4, r3]
 800282c:	3201      	adds	r2, #1
 800282e:	4463      	add	r3, ip
 8002830:	18c0      	adds	r0, r0, r3
 8002832:	e7d5      	b.n	80027e0 <centering_q12_4+0x58>
 8002834:	1a12      	subs	r2, r2, r0
 8002836:	8022      	strh	r2, [r4, #0]
 8002838:	e7ea      	b.n	8002810 <centering_q12_4+0x88>
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <centering_q12_4+0xd4>)
 800283c:	468c      	mov	ip, r1
 800283e:	4462      	add	r2, ip
 8002840:	8821      	ldrh	r1, [r4, #0]
 8002842:	4291      	cmp	r1, r2
 8002844:	dd05      	ble.n	8002852 <centering_q12_4+0xca>
 8002846:	4651      	mov	r1, sl
 8002848:	8021      	strh	r1, [r4, #0]
 800284a:	3402      	adds	r4, #2
 800284c:	42a3      	cmp	r3, r4
 800284e:	d1f7      	bne.n	8002840 <centering_q12_4+0xb8>
 8002850:	e7e1      	b.n	8002816 <centering_q12_4+0x8e>
 8002852:	1a09      	subs	r1, r1, r0
 8002854:	8021      	strh	r1, [r4, #0]
 8002856:	e7f8      	b.n	800284a <centering_q12_4+0xc2>
 8002858:	ffff8000 	.word	0xffff8000
 800285c:	0000ffff 	.word	0x0000ffff

08002860 <acc_alg_cca_calculate>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	0003      	movs	r3, r0
 8002864:	000c      	movs	r4, r1
 8002866:	2201      	movs	r2, #1
 8002868:	2000      	movs	r0, #0
 800286a:	42a2      	cmp	r2, r4
 800286c:	d30f      	bcc.n	800288e <acc_alg_cca_calculate+0x2e>
 800286e:	f00e ff67 	bl	8011740 <__aeabi_i2f>
 8002872:	1c05      	adds	r5, r0, #0
 8002874:	1e60      	subs	r0, r4, #1
 8002876:	f00e ff63 	bl	8011740 <__aeabi_i2f>
 800287a:	1c01      	adds	r1, r0, #0
 800287c:	1c28      	adds	r0, r5, #0
 800287e:	f00d ff37 	bl	80106f0 <__aeabi_fdiv>
 8002882:	f011 fbd7 	bl	8014034 <log10f>
 8002886:	4907      	ldr	r1, [pc, #28]	; (80028a4 <acc_alg_cca_calculate+0x44>)
 8002888:	f00e f844 	bl	8010914 <__aeabi_fmul>
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	881d      	ldrh	r5, [r3, #0]
 8002890:	8859      	ldrh	r1, [r3, #2]
 8002892:	3201      	adds	r2, #1
 8002894:	1b49      	subs	r1, r1, r5
 8002896:	17cd      	asrs	r5, r1, #31
 8002898:	1949      	adds	r1, r1, r5
 800289a:	4069      	eors	r1, r5
 800289c:	1840      	adds	r0, r0, r1
 800289e:	b292      	uxth	r2, r2
 80028a0:	3302      	adds	r3, #2
 80028a2:	e7e2      	b.n	800286a <acc_alg_cca_calculate+0xa>
 80028a4:	41a00000 	.word	0x41a00000

080028a8 <process_data.lto_priv.120>:
 80028a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028aa:	001d      	movs	r5, r3
 80028ac:	23b8      	movs	r3, #184	; 0xb8
 80028ae:	46ce      	mov	lr, r9
 80028b0:	4699      	mov	r9, r3
 80028b2:	4647      	mov	r7, r8
 80028b4:	6944      	ldr	r4, [r0, #20]
 80028b6:	b580      	push	{r7, lr}
 80028b8:	44a1      	add	r9, r4
 80028ba:	464b      	mov	r3, r9
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	0017      	movs	r7, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d028      	beq.n	8002916 <process_data.lto_priv.120+0x6e>
 80028c4:	0026      	movs	r6, r4
 80028c6:	6809      	ldr	r1, [r1, #0]
 80028c8:	36b4      	adds	r6, #180	; 0xb4
 80028ca:	4688      	mov	r8, r1
 80028cc:	8832      	ldrh	r2, [r6, #0]
 80028ce:	6801      	ldr	r1, [r0, #0]
 80028d0:	0052      	lsls	r2, r2, #1
 80028d2:	4490      	add	r8, r2
 80028d4:	4642      	mov	r2, r8
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7fd fc2e 	bl	8000138 <acc_probes_execute_uint16>
 80028dc:	464b      	mov	r3, r9
 80028de:	4640      	mov	r0, r8
 80028e0:	8819      	ldrh	r1, [r3, #0]
 80028e2:	f7ff ffbd 	bl	8002860 <acc_alg_cca_calculate>
 80028e6:	2301      	movs	r3, #1
 80028e8:	6068      	str	r0, [r5, #4]
 80028ea:	490d      	ldr	r1, [pc, #52]	; (8002920 <process_data.lto_priv.120+0x78>)
 80028ec:	4698      	mov	r8, r3
 80028ee:	f00e fd1d 	bl	801132c <__aeabi_fcmpgt>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d100      	bne.n	80028f8 <process_data.lto_priv.120+0x50>
 80028f6:	4680      	mov	r8, r0
 80028f8:	4643      	mov	r3, r8
 80028fa:	702b      	strb	r3, [r5, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <process_data.lto_priv.120+0x64>
 8002904:	34ba      	adds	r4, #186	; 0xba
 8002906:	7822      	ldrb	r2, [r4, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	4053      	eors	r3, r2
 800290c:	2201      	movs	r2, #1
 800290e:	4013      	ands	r3, r2
 8002910:	722b      	strb	r3, [r5, #8]
 8002912:	8833      	ldrh	r3, [r6, #0]
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	2001      	movs	r0, #1
 8002918:	bc0c      	pop	{r2, r3}
 800291a:	4690      	mov	r8, r2
 800291c:	4699      	mov	r9, r3
 800291e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002920:	42640000 	.word	0x42640000

08002924 <process_data.lto_priv.119>:
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002926:	4657      	mov	r7, sl
 8002928:	464e      	mov	r6, r9
 800292a:	4645      	mov	r5, r8
 800292c:	46de      	mov	lr, fp
 800292e:	6944      	ldr	r4, [r0, #20]
 8002930:	b5e0      	push	{r5, r6, r7, lr}
 8002932:	0027      	movs	r7, r4
 8002934:	37ce      	adds	r7, #206	; 0xce
 8002936:	001d      	movs	r5, r3
 8002938:	883b      	ldrh	r3, [r7, #0]
 800293a:	4680      	mov	r8, r0
 800293c:	468a      	mov	sl, r1
 800293e:	0016      	movs	r6, r2
 8002940:	4699      	mov	r9, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d03a      	beq.n	80029bc <process_data.lto_priv.119+0x98>
 8002946:	0023      	movs	r3, r4
 8002948:	33c8      	adds	r3, #200	; 0xc8
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	b280      	uxth	r0, r0
 800294e:	0043      	lsls	r3, r0, #1
 8002950:	469b      	mov	fp, r3
 8002952:	0023      	movs	r3, r4
 8002954:	33cc      	adds	r3, #204	; 0xcc
 8002956:	8819      	ldrh	r1, [r3, #0]
 8002958:	207c      	movs	r0, #124	; 0x7c
 800295a:	f00e fb0d 	bl	8010f78 <__udivsi3>
 800295e:	465b      	mov	r3, fp
 8002960:	4358      	muls	r0, r3
 8002962:	0023      	movs	r3, r4
 8002964:	33c4      	adds	r3, #196	; 0xc4
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4641      	mov	r1, r8
 800296a:	18c0      	adds	r0, r0, r3
 800296c:	4653      	mov	r3, sl
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6809      	ldr	r1, [r1, #0]
 8002972:	469a      	mov	sl, r3
 8002974:	4482      	add	sl, r0
 8002976:	464b      	mov	r3, r9
 8002978:	4652      	mov	r2, sl
 800297a:	2001      	movs	r0, #1
 800297c:	f7fd fbdc 	bl	8000138 <acc_probes_execute_uint16>
 8002980:	883f      	ldrh	r7, [r7, #0]
 8002982:	4650      	mov	r0, sl
 8002984:	0039      	movs	r1, r7
 8002986:	f7ff ff6b 	bl	8002860 <acc_alg_cca_calculate>
 800298a:	2301      	movs	r3, #1
 800298c:	6068      	str	r0, [r5, #4]
 800298e:	490f      	ldr	r1, [pc, #60]	; (80029cc <process_data.lto_priv.119+0xa8>)
 8002990:	4698      	mov	r8, r3
 8002992:	f00e fccb 	bl	801132c <__aeabi_fcmpgt>
 8002996:	2800      	cmp	r0, #0
 8002998:	d100      	bne.n	800299c <process_data.lto_priv.119+0x78>
 800299a:	4680      	mov	r8, r0
 800299c:	4643      	mov	r3, r8
 800299e:	702b      	strb	r3, [r5, #0]
 80029a0:	2300      	movs	r3, #0
 80029a2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d103      	bne.n	80029b0 <process_data.lto_priv.119+0x8c>
 80029a8:	34c0      	adds	r4, #192	; 0xc0
 80029aa:	7822      	ldrb	r2, [r4, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4053      	eors	r3, r2
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	722b      	strb	r3, [r5, #8]
 80029b6:	6833      	ldr	r3, [r6, #0]
 80029b8:	1bdf      	subs	r7, r3, r7
 80029ba:	6037      	str	r7, [r6, #0]
 80029bc:	2001      	movs	r0, #1
 80029be:	bc3c      	pop	{r2, r3, r4, r5}
 80029c0:	4690      	mov	r8, r2
 80029c2:	4699      	mov	r9, r3
 80029c4:	46a2      	mov	sl, r4
 80029c6:	46ab      	mov	fp, r5
 80029c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	42640000 	.word	0x42640000

080029d0 <acc_sensor_protocol_r2_wait_for_sync_start>:
 80029d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80029d2:	ae03      	add	r6, sp, #12
 80029d4:	0032      	movs	r2, r6
 80029d6:	0005      	movs	r5, r0
 80029d8:	f00d fb3a 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 80029dc:	1e04      	subs	r4, r0, #0
 80029de:	d108      	bne.n	80029f2 <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 80029e4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80029e6:	490b      	ldr	r1, [pc, #44]	; (8002a14 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80029e8:	002b      	movs	r3, r5
 80029ea:	47b0      	blx	r6
 80029ec:	0020      	movs	r0, r4
 80029ee:	b004      	add	sp, #16
 80029f0:	bd70      	pop	{r4, r5, r6, pc}
 80029f2:	8873      	ldrh	r3, [r6, #2]
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d0f9      	beq.n	80029ec <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 80029fc:	4a06      	ldr	r2, [pc, #24]	; (8002a18 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 80029fe:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002a00:	4904      	ldr	r1, [pc, #16]	; (8002a14 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8002a02:	002b      	movs	r3, r5
 8002a04:	2000      	movs	r0, #0
 8002a06:	47a0      	blx	r4
 8002a08:	2400      	movs	r4, #0
 8002a0a:	e7ef      	b.n	80029ec <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8002a0c:	200005d0 	.word	0x200005d0
 8002a10:	0801d2d5 	.word	0x0801d2d5
 8002a14:	0801d2c5 	.word	0x0801d2c5
 8002a18:	0801d307 	.word	0x0801d307

08002a1c <acc_sensor_protocol_r2_wait_for_radar_data>:
 8002a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	ac03      	add	r4, sp, #12
 8002a22:	0017      	movs	r7, r2
 8002a24:	0022      	movs	r2, r4
 8002a26:	0006      	movs	r6, r0
 8002a28:	f00d fb12 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8002a2c:	1e05      	subs	r5, r0, #0
 8002a2e:	d032      	beq.n	8002a96 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002a30:	7822      	ldrb	r2, [r4, #0]
 8002a32:	8863      	ldrh	r3, [r4, #2]
 8002a34:	2a06      	cmp	r2, #6
 8002a36:	d125      	bne.n	8002a84 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8002a38:	051a      	lsls	r2, r3, #20
 8002a3a:	d523      	bpl.n	8002a84 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	4013      	ands	r3, r2
 8002a42:	d12b      	bne.n	8002a9c <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 8002a44:	2f00      	cmp	r7, #0
 8002a46:	d000      	beq.n	8002a4a <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8002a48:	703b      	strb	r3, [r7, #0]
 8002a4a:	8863      	ldrh	r3, [r4, #2]
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	d50a      	bpl.n	8002a66 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8002a50:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002a52:	001a      	movs	r2, r3
 8002a54:	3230      	adds	r2, #48	; 0x30
 8002a56:	7812      	ldrb	r2, [r2, #0]
 8002a58:	2a03      	cmp	r2, #3
 8002a5a:	d904      	bls.n	8002a66 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 8002a60:	4913      	ldr	r1, [pc, #76]	; (8002ab0 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002a62:	2004      	movs	r0, #4
 8002a64:	4798      	blx	r3
 8002a66:	8863      	ldrh	r3, [r4, #2]
 8002a68:	059b      	lsls	r3, r3, #22
 8002a6a:	d514      	bpl.n	8002a96 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002a6e:	001a      	movs	r2, r3
 8002a70:	3230      	adds	r2, #48	; 0x30
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	2a03      	cmp	r2, #3
 8002a76:	d90e      	bls.n	8002a96 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8002a7c:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002a7e:	2004      	movs	r0, #4
 8002a80:	4798      	blx	r3
 8002a82:	e008      	b.n	8002a96 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8002a8a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002a8c:	4908      	ldr	r1, [pc, #32]	; (8002ab0 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002a8e:	0033      	movs	r3, r6
 8002a90:	2000      	movs	r0, #0
 8002a92:	47a0      	blx	r4
 8002a94:	2500      	movs	r5, #0
 8002a96:	0028      	movs	r0, r5
 8002a98:	b005      	add	sp, #20
 8002a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a9c:	0031      	movs	r1, r6
 8002a9e:	200f      	movs	r0, #15
 8002aa0:	f7fd fb3e 	bl	8000120 <acc_probes_execute_primitive_probe>
 8002aa4:	002b      	movs	r3, r5
 8002aa6:	e7cd      	b.n	8002a44 <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 8002aa8:	200005d0 	.word	0x200005d0
 8002aac:	0801d371 	.word	0x0801d371
 8002ab0:	0801d2c5 	.word	0x0801d2c5
 8002ab4:	0801d38a 	.word	0x0801d38a
 8002ab8:	0801d341 	.word	0x0801d341

08002abc <acc_sensor_protocol_r2_ack_event>:
 8002abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002abe:	466b      	mov	r3, sp
 8002ac0:	1d9c      	adds	r4, r3, #6
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	0022      	movs	r2, r4
 8002ac6:	2138      	movs	r1, #56	; 0x38
 8002ac8:	0005      	movs	r5, r0
 8002aca:	8023      	strh	r3, [r4, #0]
 8002acc:	f00d f890 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 8002ad0:	8824      	ldrh	r4, [r4, #0]
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	2c00      	cmp	r4, #0
 8002ad6:	d10a      	bne.n	8002aee <acc_sensor_protocol_r2_ack_event+0x32>
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <acc_sensor_protocol_r2_ack_event+0x34>)
 8002ada:	4a06      	ldr	r2, [pc, #24]	; (8002af4 <acc_sensor_protocol_r2_ack_event+0x38>)
 8002adc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002ade:	4906      	ldr	r1, [pc, #24]	; (8002af8 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8002ae0:	002b      	movs	r3, r5
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	47b0      	blx	r6
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	f00d f8a9 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 8002aec:	0020      	movs	r0, r4
 8002aee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002af0:	200005d0 	.word	0x200005d0
 8002af4:	0801d3a2 	.word	0x0801d3a2
 8002af8:	0801d2c5 	.word	0x0801d2c5

08002afc <acc_sensor_protocol_r2_wait_for_specific_event>:
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b085      	sub	sp, #20
 8002b00:	ae03      	add	r6, sp, #12
 8002b02:	0015      	movs	r5, r2
 8002b04:	0032      	movs	r2, r6
 8002b06:	0004      	movs	r4, r0
 8002b08:	001f      	movs	r7, r3
 8002b0a:	f00d faa1 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d00d      	beq.n	8002b2e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002b12:	7832      	ldrb	r2, [r6, #0]
 8002b14:	42aa      	cmp	r2, r5
 8002b16:	d00c      	beq.n	8002b32 <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 8002b18:	9200      	str	r2, [sp, #0]
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8002b1c:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8002b1e:	9501      	str	r5, [sp, #4]
 8002b20:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002b22:	2000      	movs	r0, #0
 8002b24:	3358      	adds	r3, #88	; 0x58
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8002b28:	4908      	ldr	r1, [pc, #32]	; (8002b4c <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8002b2a:	47a0      	blx	r4
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	b005      	add	sp, #20
 8002b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b32:	2f00      	cmp	r7, #0
 8002b34:	d0fb      	beq.n	8002b2e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002b36:	0020      	movs	r0, r4
 8002b38:	f7ff ffc0 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 8002b3c:	e7f7      	b.n	8002b2e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	08016860 	.word	0x08016860
 8002b44:	200005d0 	.word	0x200005d0
 8002b48:	0801d3d3 	.word	0x0801d3d3
 8002b4c:	0801d2c5 	.word	0x0801d2c5

08002b50 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8002b50:	b510      	push	{r4, lr}
 8002b52:	2301      	movs	r3, #1
 8002b54:	220b      	movs	r2, #11
 8002b56:	f7ff ffd1 	bl	8002afc <acc_sensor_protocol_r2_wait_for_specific_event>
 8002b5a:	bd10      	pop	{r4, pc}

08002b5c <acc_radar_engine_acquire_adc_data>:
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	4657      	mov	r7, sl
 8002b60:	464e      	mov	r6, r9
 8002b62:	4645      	mov	r5, r8
 8002b64:	46de      	mov	lr, fp
 8002b66:	2300      	movs	r3, #0
 8002b68:	b5e0      	push	{r5, r6, r7, lr}
 8002b6a:	0005      	movs	r5, r0
 8002b6c:	4698      	mov	r8, r3
 8002b6e:	b08d      	sub	sp, #52	; 0x34
 8002b70:	4689      	mov	r9, r1
 8002b72:	4945      	ldr	r1, [pc, #276]	; (8002c88 <acc_radar_engine_acquire_adc_data+0x12c>)
 8002b74:	a806      	add	r0, sp, #24
 8002b76:	7093      	strb	r3, [r2, #2]
 8002b78:	70d3      	strb	r3, [r2, #3]
 8002b7a:	8013      	strh	r3, [r2, #0]
 8002b7c:	7313      	strb	r3, [r2, #12]
 8002b7e:	7113      	strb	r3, [r2, #4]
 8002b80:	6091      	str	r1, [r2, #8]
 8002b82:	1d87      	adds	r7, r0, #6
 8002b84:	0014      	movs	r4, r2
 8002b86:	6828      	ldr	r0, [r5, #0]
 8002b88:	aa06      	add	r2, sp, #24
 8002b8a:	71d3      	strb	r3, [r2, #7]
 8002b8c:	703b      	strb	r3, [r7, #0]
 8002b8e:	4682      	mov	sl, r0
 8002b90:	7ba8      	ldrb	r0, [r5, #14]
 8002b92:	3207      	adds	r2, #7
 8002b94:	9000      	str	r0, [sp, #0]
 8002b96:	7be8      	ldrb	r0, [r5, #15]
 8002b98:	9105      	str	r1, [sp, #20]
 8002b9a:	9003      	str	r0, [sp, #12]
 8002b9c:	89a8      	ldrh	r0, [r5, #12]
 8002b9e:	9202      	str	r2, [sp, #8]
 8002ba0:	9001      	str	r0, [sp, #4]
 8002ba2:	6928      	ldr	r0, [r5, #16]
 8002ba4:	ae09      	add	r6, sp, #36	; 0x24
 8002ba6:	9004      	str	r0, [sp, #16]
 8002ba8:	4643      	mov	r3, r8
 8002baa:	9a01      	ldr	r2, [sp, #4]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d959      	bls.n	8002c66 <acc_radar_engine_acquire_adc_data+0x10a>
 8002bb2:	9b00      	ldr	r3, [sp, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00f      	beq.n	8002bd8 <acc_radar_engine_acquire_adc_data+0x7c>
 8002bb8:	69ab      	ldr	r3, [r5, #24]
 8002bba:	9a02      	ldr	r2, [sp, #8]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	9904      	ldr	r1, [sp, #16]
 8002bc0:	4650      	mov	r0, sl
 8002bc2:	4798      	blx	r3
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d10e      	bne.n	8002be6 <acc_radar_engine_acquire_adc_data+0x8a>
 8002bc8:	2000      	movs	r0, #0
 8002bca:	b00d      	add	sp, #52	; 0x34
 8002bcc:	bc3c      	pop	{r2, r3, r4, r5}
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	46a2      	mov	sl, r4
 8002bd4:	46ab      	mov	fp, r5
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bd8:	69ab      	ldr	r3, [r5, #24]
 8002bda:	4650      	mov	r0, sl
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	4798      	blx	r3
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1e9      	bne.n	8002bb8 <acc_radar_engine_acquire_adc_data+0x5c>
 8002be4:	e7f0      	b.n	8002bc8 <acc_radar_engine_acquire_adc_data+0x6c>
 8002be6:	9b02      	ldr	r3, [sp, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d100      	bne.n	8002bf0 <acc_radar_engine_acquire_adc_data+0x94>
 8002bee:	78a3      	ldrb	r3, [r4, #2]
 8002bf0:	70a3      	strb	r3, [r4, #2]
 8002bf2:	69ab      	ldr	r3, [r5, #24]
 8002bf4:	003a      	movs	r2, r7
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	0028      	movs	r0, r5
 8002bfc:	4798      	blx	r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	7033      	strb	r3, [r6, #0]
 8002c02:	7233      	strb	r3, [r6, #8]
 8002c04:	69ab      	ldr	r3, [r5, #24]
 8002c06:	9a05      	ldr	r2, [sp, #20]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	9008      	str	r0, [sp, #32]
 8002c0c:	6072      	str	r2, [r6, #4]
 8002c0e:	469b      	mov	fp, r3
 8002c10:	aa08      	add	r2, sp, #32
 8002c12:	0033      	movs	r3, r6
 8002c14:	4649      	mov	r1, r9
 8002c16:	0028      	movs	r0, r5
 8002c18:	47d8      	blx	fp
 8002c1a:	7a33      	ldrb	r3, [r6, #8]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d100      	bne.n	8002c22 <acc_radar_engine_acquire_adc_data+0xc6>
 8002c20:	7b23      	ldrb	r3, [r4, #12]
 8002c22:	7323      	strb	r3, [r4, #12]
 8002c24:	7833      	ldrb	r3, [r6, #0]
 8002c26:	469b      	mov	fp, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d100      	bne.n	8002c2e <acc_radar_engine_acquire_adc_data+0xd2>
 8002c2c:	7923      	ldrb	r3, [r4, #4]
 8002c2e:	7123      	strb	r3, [r4, #4]
 8002c30:	68a1      	ldr	r1, [r4, #8]
 8002c32:	6870      	ldr	r0, [r6, #4]
 8002c34:	f011 f8d2 	bl	8013ddc <fmaxf>
 8002c38:	783b      	ldrb	r3, [r7, #0]
 8002c3a:	60a0      	str	r0, [r4, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d100      	bne.n	8002c42 <acc_radar_engine_acquire_adc_data+0xe6>
 8002c40:	78e3      	ldrb	r3, [r4, #3]
 8002c42:	9a08      	ldr	r2, [sp, #32]
 8002c44:	70e3      	strb	r3, [r4, #3]
 8002c46:	4694      	mov	ip, r2
 8002c48:	8823      	ldrh	r3, [r4, #0]
 8002c4a:	4659      	mov	r1, fp
 8002c4c:	4463      	add	r3, ip
 8002c4e:	8023      	strh	r3, [r4, #0]
 8002c50:	69ab      	ldr	r3, [r5, #24]
 8002c52:	0028      	movs	r0, r5
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	4798      	blx	r3
 8002c58:	9b03      	ldr	r3, [sp, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <acc_radar_engine_acquire_adc_data+0x110>
 8002c5e:	9b01      	ldr	r3, [sp, #4]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4598      	cmp	r8, r3
 8002c64:	d102      	bne.n	8002c6c <acc_radar_engine_acquire_adc_data+0x110>
 8002c66:	464b      	mov	r3, r9
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	e7ae      	b.n	8002bca <acc_radar_engine_acquire_adc_data+0x6e>
 8002c6c:	9b00      	ldr	r3, [sp, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <acc_radar_engine_acquire_adc_data+0x11e>
 8002c72:	2301      	movs	r3, #1
 8002c74:	469c      	mov	ip, r3
 8002c76:	44e0      	add	r8, ip
 8002c78:	e796      	b.n	8002ba8 <acc_radar_engine_acquire_adc_data+0x4c>
 8002c7a:	69ab      	ldr	r3, [r5, #24]
 8002c7c:	4650      	mov	r0, sl
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	4798      	blx	r3
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d1f5      	bne.n	8002c72 <acc_radar_engine_acquire_adc_data+0x116>
 8002c86:	e79f      	b.n	8002bc8 <acc_radar_engine_acquire_adc_data+0x6c>
 8002c88:	ff800000 	.word	0xff800000

08002c8c <transfer_data.lto_priv.122>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	000d      	movs	r5, r1
 8002c90:	2100      	movs	r1, #0
 8002c92:	6943      	ldr	r3, [r0, #20]
 8002c94:	7011      	strb	r1, [r2, #0]
 8002c96:	001a      	movs	r2, r3
 8002c98:	33b8      	adds	r3, #184	; 0xb8
 8002c9a:	32b4      	adds	r2, #180	; 0xb4
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	8814      	ldrh	r4, [r2, #0]
 8002ca0:	6829      	ldr	r1, [r5, #0]
 8002ca2:	18e4      	adds	r4, r4, r3
 8002ca4:	0022      	movs	r2, r4
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	f7ff fafa 	bl	80022a0 <acc_sensor_protocol_r2_transfer_data>
 8002cac:	0062      	lsls	r2, r4, #1
 8002cae:	0001      	movs	r1, r0
 8002cb0:	6828      	ldr	r0, [r5, #0]
 8002cb2:	f013 fbfe 	bl	80164b2 <memmove>
 8002cb6:	0020      	movs	r0, r4
 8002cb8:	bd70      	pop	{r4, r5, r6, pc}

08002cba <acc_radar_engine_sparse_create>:
 8002cba:	22cd      	movs	r2, #205	; 0xcd
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	0052      	lsls	r2, r2, #1
 8002cc0:	0004      	movs	r4, r0
 8002cc2:	000d      	movs	r5, r1
 8002cc4:	20bc      	movs	r0, #188	; 0xbc
 8002cc6:	490f      	ldr	r1, [pc, #60]	; (8002d04 <acc_radar_engine_sparse_create+0x4a>)
 8002cc8:	f00a f804 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	6160      	str	r0, [r4, #20]
 8002cd0:	4298      	cmp	r0, r3
 8002cd2:	d015      	beq.n	8002d00 <acc_radar_engine_sparse_create+0x46>
 8002cd4:	0028      	movs	r0, r5
 8002cd6:	f7fe f85f 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002cda:	6020      	str	r0, [r4, #0]
 8002cdc:	0028      	movs	r0, r5
 8002cde:	f7fd ff8d 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8002ce2:	73a0      	strb	r0, [r4, #14]
 8002ce4:	0028      	movs	r0, r5
 8002ce6:	f7fe f844 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8002cea:	4243      	negs	r3, r0
 8002cec:	4158      	adcs	r0, r3
 8002cee:	73e0      	strb	r0, [r4, #15]
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	f7fe f809 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <acc_radar_engine_sparse_create+0x4e>)
 8002cf8:	6120      	str	r0, [r4, #16]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	61a3      	str	r3, [r4, #24]
 8002cfe:	2301      	movs	r3, #1
 8002d00:	0018      	movs	r0, r3
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	0801d3fe 	.word	0x0801d3fe
 8002d08:	080168e0 	.word	0x080168e0

08002d0c <acc_radar_engine_linear_create>:
 8002d0c:	222c      	movs	r2, #44	; 0x2c
 8002d0e:	b570      	push	{r4, r5, r6, lr}
 8002d10:	32ff      	adds	r2, #255	; 0xff
 8002d12:	0004      	movs	r4, r0
 8002d14:	000d      	movs	r5, r1
 8002d16:	20d4      	movs	r0, #212	; 0xd4
 8002d18:	490f      	ldr	r1, [pc, #60]	; (8002d58 <acc_radar_engine_linear_create+0x4c>)
 8002d1a:	f009 ffdb 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6160      	str	r0, [r4, #20]
 8002d22:	4298      	cmp	r0, r3
 8002d24:	d015      	beq.n	8002d52 <acc_radar_engine_linear_create+0x46>
 8002d26:	0028      	movs	r0, r5
 8002d28:	f7fe f836 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002d2c:	6020      	str	r0, [r4, #0]
 8002d2e:	0028      	movs	r0, r5
 8002d30:	f7fd ff64 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8002d34:	73a0      	strb	r0, [r4, #14]
 8002d36:	0028      	movs	r0, r5
 8002d38:	f7fe f81b 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8002d3c:	4243      	negs	r3, r0
 8002d3e:	4158      	adcs	r0, r3
 8002d40:	73e0      	strb	r0, [r4, #15]
 8002d42:	0028      	movs	r0, r5
 8002d44:	f7fd ffe0 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <acc_radar_engine_linear_create+0x50>)
 8002d4a:	6120      	str	r0, [r4, #16]
 8002d4c:	3340      	adds	r3, #64	; 0x40
 8002d4e:	61a3      	str	r3, [r4, #24]
 8002d50:	2301      	movs	r3, #1
 8002d52:	0018      	movs	r0, r3
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	0801d430 	.word	0x0801d430
 8002d5c:	080168e0 	.word	0x080168e0

08002d60 <acc_service_sparse_configuration_create>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	2260      	movs	r2, #96	; 0x60
 8002d64:	4972      	ldr	r1, [pc, #456]	; (8002f30 <acc_service_sparse_configuration_create+0x1d0>)
 8002d66:	208c      	movs	r0, #140	; 0x8c
 8002d68:	f009 ffb4 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8002d6c:	1e04      	subs	r4, r0, #0
 8002d6e:	d100      	bne.n	8002d72 <acc_service_sparse_configuration_create+0x12>
 8002d70:	e0db      	b.n	8002f2a <acc_service_sparse_configuration_create+0x1ca>
 8002d72:	4b70      	ldr	r3, [pc, #448]	; (8002f34 <acc_service_sparse_configuration_create+0x1d4>)
 8002d74:	0005      	movs	r5, r0
 8002d76:	6003      	str	r3, [r0, #0]
 8002d78:	2303      	movs	r3, #3
 8002d7a:	7103      	strb	r3, [r0, #4]
 8002d7c:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <acc_service_sparse_configuration_create+0x1d8>)
 8002d7e:	351c      	adds	r5, #28
 8002d80:	6083      	str	r3, [r0, #8]
 8002d82:	4b6e      	ldr	r3, [pc, #440]	; (8002f3c <acc_service_sparse_configuration_create+0x1dc>)
 8002d84:	6105      	str	r5, [r0, #16]
 8002d86:	6143      	str	r3, [r0, #20]
 8002d88:	2358      	movs	r3, #88	; 0x58
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	8303      	strh	r3, [r0, #24]
 8002d8e:	f7fe fad9 	bl	8001344 <acc_service_profile_set>
 8002d92:	0020      	movs	r0, r4
 8002d94:	2100      	movs	r1, #0
 8002d96:	f7fe fac3 	bl	8001320 <acc_service_maximize_signal_attenuation_set>
 8002d9a:	0028      	movs	r0, r5
 8002d9c:	f7fd ff14 	bl	8000bc8 <configuration_is_valid>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d001      	beq.n	8002da8 <acc_service_sparse_configuration_create+0x48>
 8002da4:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <acc_service_sparse_configuration_create+0x1e0>)
 8002da6:	6423      	str	r3, [r4, #64]	; 0x40
 8002da8:	0028      	movs	r0, r5
 8002daa:	f7fd ff0d 	bl	8000bc8 <configuration_is_valid>
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d001      	beq.n	8002db6 <acc_service_sparse_configuration_create+0x56>
 8002db2:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <acc_service_sparse_configuration_create+0x1e4>)
 8002db4:	6463      	str	r3, [r4, #68]	; 0x44
 8002db6:	0028      	movs	r0, r5
 8002db8:	f7fd ff06 	bl	8000bc8 <configuration_is_valid>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d003      	beq.n	8002dc8 <acc_service_sparse_configuration_create+0x68>
 8002dc0:	0023      	movs	r3, r4
 8002dc2:	2206      	movs	r2, #6
 8002dc4:	334e      	adds	r3, #78	; 0x4e
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	0028      	movs	r0, r5
 8002dca:	f7fd fefd 	bl	8000bc8 <configuration_is_valid>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <acc_service_sparse_configuration_create+0x76>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f7fd ffd5 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 8002ddc:	0028      	movs	r0, r5
 8002dde:	f7fd fef3 	bl	8000bc8 <configuration_is_valid>
 8002de2:	2800      	cmp	r0, #0
 8002de4:	d001      	beq.n	8002dea <acc_service_sparse_configuration_create+0x8a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	6563      	str	r3, [r4, #84]	; 0x54
 8002dea:	0028      	movs	r0, r5
 8002dec:	f7fd feec 	bl	8000bc8 <configuration_is_valid>
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d003      	beq.n	8002dfc <acc_service_sparse_configuration_create+0x9c>
 8002df4:	0023      	movs	r3, r4
 8002df6:	2200      	movs	r2, #0
 8002df8:	3348      	adds	r3, #72	; 0x48
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	0028      	movs	r0, r5
 8002dfe:	f7fd fee3 	bl	8000bc8 <configuration_is_valid>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	d003      	beq.n	8002e0e <acc_service_sparse_configuration_create+0xae>
 8002e06:	0023      	movs	r3, r4
 8002e08:	2210      	movs	r2, #16
 8002e0a:	337c      	adds	r3, #124	; 0x7c
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	0028      	movs	r0, r5
 8002e10:	f7fd feda 	bl	8000bc8 <configuration_is_valid>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d002      	beq.n	8002e1e <acc_service_sparse_configuration_create+0xbe>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	1d23      	adds	r3, r4, #4
 8002e1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e1e:	0028      	movs	r0, r5
 8002e20:	f7fd fed2 	bl	8000bc8 <configuration_is_valid>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d003      	beq.n	8002e30 <acc_service_sparse_configuration_create+0xd0>
 8002e28:	0023      	movs	r3, r4
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	3362      	adds	r3, #98	; 0x62
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	0028      	movs	r0, r5
 8002e32:	f7fd fec9 	bl	8000bc8 <configuration_is_valid>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	d003      	beq.n	8002e42 <acc_service_sparse_configuration_create+0xe2>
 8002e3a:	0023      	movs	r3, r4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	3363      	adds	r3, #99	; 0x63
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	0028      	movs	r0, r5
 8002e44:	f7fd fec0 	bl	8000bc8 <configuration_is_valid>
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d003      	beq.n	8002e54 <acc_service_sparse_configuration_create+0xf4>
 8002e4c:	0023      	movs	r3, r4
 8002e4e:	2200      	movs	r2, #0
 8002e50:	3364      	adds	r3, #100	; 0x64
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	0028      	movs	r0, r5
 8002e56:	f7fd feb7 	bl	8000bc8 <configuration_is_valid>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	d007      	beq.n	8002e6e <acc_service_sparse_configuration_create+0x10e>
 8002e5e:	0023      	movs	r3, r4
 8002e60:	2200      	movs	r2, #0
 8002e62:	336b      	adds	r3, #107	; 0x6b
 8002e64:	705a      	strb	r2, [r3, #1]
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	3240      	adds	r2, #64	; 0x40
 8002e6c:	805a      	strh	r2, [r3, #2]
 8002e6e:	0028      	movs	r0, r5
 8002e70:	f7fd feaa 	bl	8000bc8 <configuration_is_valid>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	d003      	beq.n	8002e80 <acc_service_sparse_configuration_create+0x120>
 8002e78:	0023      	movs	r3, r4
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	3372      	adds	r3, #114	; 0x72
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	0028      	movs	r0, r5
 8002e82:	f7fd fea1 	bl	8000bc8 <configuration_is_valid>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d003      	beq.n	8002e92 <acc_service_sparse_configuration_create+0x132>
 8002e8a:	0023      	movs	r3, r4
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	3374      	adds	r3, #116	; 0x74
 8002e90:	701a      	strb	r2, [r3, #0]
 8002e92:	0028      	movs	r0, r5
 8002e94:	f7fd fe98 	bl	8000bc8 <configuration_is_valid>
 8002e98:	2800      	cmp	r0, #0
 8002e9a:	d004      	beq.n	8002ea6 <acc_service_sparse_configuration_create+0x146>
 8002e9c:	0023      	movs	r3, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	3376      	adds	r3, #118	; 0x76
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	67a2      	str	r2, [r4, #120]	; 0x78
 8002ea6:	0028      	movs	r0, r5
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	f7fd feb9 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8002eae:	0028      	movs	r0, r5
 8002eb0:	f7fd fe8a 	bl	8000bc8 <configuration_is_valid>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d003      	beq.n	8002ec0 <acc_service_sparse_configuration_create+0x160>
 8002eb8:	0023      	movs	r3, r4
 8002eba:	2201      	movs	r2, #1
 8002ebc:	3386      	adds	r3, #134	; 0x86
 8002ebe:	701a      	strb	r2, [r3, #0]
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	f7fd fe81 	bl	8000bc8 <configuration_is_valid>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d003      	beq.n	8002ed2 <acc_service_sparse_configuration_create+0x172>
 8002eca:	0023      	movs	r3, r4
 8002ecc:	220b      	movs	r2, #11
 8002ece:	335a      	adds	r3, #90	; 0x5a
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	0028      	movs	r0, r5
 8002ed4:	f7fd fe78 	bl	8000bc8 <configuration_is_valid>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d003      	beq.n	8002ee4 <acc_service_sparse_configuration_create+0x184>
 8002edc:	0023      	movs	r3, r4
 8002ede:	220a      	movs	r2, #10
 8002ee0:	3358      	adds	r3, #88	; 0x58
 8002ee2:	801a      	strh	r2, [r3, #0]
 8002ee4:	0028      	movs	r0, r5
 8002ee6:	f7fd fe6f 	bl	8000bc8 <configuration_is_valid>
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d003      	beq.n	8002ef6 <acc_service_sparse_configuration_create+0x196>
 8002eee:	0023      	movs	r3, r4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	3365      	adds	r3, #101	; 0x65
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	0028      	movs	r0, r5
 8002ef8:	f7fd fe66 	bl	8000bc8 <configuration_is_valid>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d003      	beq.n	8002f08 <acc_service_sparse_configuration_create+0x1a8>
 8002f00:	0023      	movs	r3, r4
 8002f02:	2201      	movs	r2, #1
 8002f04:	336a      	adds	r3, #106	; 0x6a
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	0028      	movs	r0, r5
 8002f0a:	f7fd fe5d 	bl	8000bc8 <configuration_is_valid>
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d004      	beq.n	8002f1c <acc_service_sparse_configuration_create+0x1bc>
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0023      	movs	r3, r4
 8002f16:	0152      	lsls	r2, r2, #5
 8002f18:	3370      	adds	r3, #112	; 0x70
 8002f1a:	801a      	strh	r2, [r3, #0]
 8002f1c:	0028      	movs	r0, r5
 8002f1e:	f7fd fe53 	bl	8000bc8 <configuration_is_valid>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d001      	beq.n	8002f2a <acc_service_sparse_configuration_create+0x1ca>
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <acc_service_sparse_configuration_create+0x1e8>)
 8002f28:	61e3      	str	r3, [r4, #28]
 8002f2a:	0020      	movs	r0, r4
 8002f2c:	bd70      	pop	{r4, r5, r6, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	0801d462 	.word	0x0801d462
 8002f34:	acc09dd7 	.word	0xacc09dd7
 8002f38:	08001495 	.word	0x08001495
 8002f3c:	08005745 	.word	0x08005745
 8002f40:	3e4ccccd 	.word	0x3e4ccccd
 8002f44:	3e99999a 	.word	0x3e99999a
 8002f48:	08002cbb 	.word	0x08002cbb

08002f4c <acc_service_create>:
 8002f4c:	235c      	movs	r3, #92	; 0x5c
 8002f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f50:	46c6      	mov	lr, r8
 8002f52:	4698      	mov	r8, r3
 8002f54:	4f32      	ldr	r7, [pc, #200]	; (8003020 <acc_service_create+0xd4>)
 8002f56:	b500      	push	{lr}
 8002f58:	44b8      	add	r8, r7
 8002f5a:	4643      	mov	r3, r8
 8002f5c:	781c      	ldrb	r4, [r3, #0]
 8002f5e:	0006      	movs	r6, r0
 8002f60:	2c00      	cmp	r4, #0
 8002f62:	d04e      	beq.n	8003002 <acc_service_create+0xb6>
 8002f64:	f7fe f87c 	bl	8001060 <acc_service_configuration_valid>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	d101      	bne.n	8002f70 <acc_service_create+0x24>
 8002f6c:	2400      	movs	r4, #0
 8002f6e:	e00b      	b.n	8002f88 <acc_service_create+0x3c>
 8002f70:	6933      	ldr	r3, [r6, #16]
 8002f72:	68dd      	ldr	r5, [r3, #12]
 8002f74:	2d2a      	cmp	r5, #42	; 0x2a
 8002f76:	d90b      	bls.n	8002f90 <acc_service_create+0x44>
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <acc_service_create+0xd8>)
 8002f7a:	4a2b      	ldr	r2, [pc, #172]	; (8003028 <acc_service_create+0xdc>)
 8002f7c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002f7e:	492b      	ldr	r1, [pc, #172]	; (800302c <acc_service_create+0xe0>)
 8002f80:	232a      	movs	r3, #42	; 0x2a
 8002f82:	2000      	movs	r0, #0
 8002f84:	47a0      	blx	r4
 8002f86:	2400      	movs	r4, #0
 8002f88:	0020      	movs	r0, r4
 8002f8a:	bc04      	pop	{r2}
 8002f8c:	4690      	mov	r8, r2
 8002f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f90:	4643      	mov	r3, r8
 8002f92:	785b      	ldrb	r3, [r3, #1]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <acc_service_create+0x52>
 8002f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d129      	bne.n	8002ff2 <acc_service_create+0xa6>
 8002f9e:	4b21      	ldr	r3, [pc, #132]	; (8003024 <acc_service_create+0xd8>)
 8002fa0:	8b34      	ldrh	r4, [r6, #24]
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	3230      	adds	r2, #48	; 0x30
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	2a03      	cmp	r2, #3
 8002faa:	d906      	bls.n	8002fba <acc_service_create+0x6e>
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <acc_service_create+0xe4>)
 8002fb0:	4698      	mov	r8, r3
 8002fb2:	491e      	ldr	r1, [pc, #120]	; (800302c <acc_service_create+0xe0>)
 8002fb4:	002b      	movs	r3, r5
 8002fb6:	2004      	movs	r0, #4
 8002fb8:	47c0      	blx	r8
 8002fba:	0020      	movs	r0, r4
 8002fbc:	22bd      	movs	r2, #189	; 0xbd
 8002fbe:	491d      	ldr	r1, [pc, #116]	; (8003034 <acc_service_create+0xe8>)
 8002fc0:	f009 fe88 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8002fc4:	1e04      	subs	r4, r0, #0
 8002fc6:	d0d1      	beq.n	8002f6c <acc_service_create+0x20>
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <acc_service_create+0xec>)
 8002fca:	6045      	str	r5, [r0, #4]
 8002fcc:	6003      	str	r3, [r0, #0]
 8002fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd0:	0031      	movs	r1, r6
 8002fd2:	6543      	str	r3, [r0, #84]	; 0x54
 8002fd4:	6973      	ldr	r3, [r6, #20]
 8002fd6:	6638      	str	r0, [r7, #96]	; 0x60
 8002fd8:	4798      	blx	r3
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d10e      	bne.n	8002ffc <acc_service_create+0xb0>
 8002fde:	68e3      	ldr	r3, [r4, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <acc_service_create+0x9c>
 8002fe4:	0020      	movs	r0, r4
 8002fe6:	4798      	blx	r3
 8002fe8:	0020      	movs	r0, r4
 8002fea:	f7fe fb74 	bl	80016d6 <destroy_handle>
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e7ca      	b.n	8002f88 <acc_service_create+0x3c>
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	4295      	cmp	r5, r2
 8002ff6:	d00b      	beq.n	8003010 <acc_service_create+0xc4>
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	e7ce      	b.n	8002f9a <acc_service_create+0x4e>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	7263      	strb	r3, [r4, #9]
 8003000:	e7c2      	b.n	8002f88 <acc_service_create+0x3c>
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <acc_service_create+0xd8>)
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <acc_service_create+0xf0>)
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	4908      	ldr	r1, [pc, #32]	; (800302c <acc_service_create+0xe0>)
 800300a:	0020      	movs	r0, r4
 800300c:	4798      	blx	r3
 800300e:	e7bb      	b.n	8002f88 <acc_service_create+0x3c>
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <acc_service_create+0xd8>)
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <acc_service_create+0xf4>)
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	4905      	ldr	r1, [pc, #20]	; (800302c <acc_service_create+0xe0>)
 8003018:	2000      	movs	r0, #0
 800301a:	4798      	blx	r3
 800301c:	e7a6      	b.n	8002f6c <acc_service_create+0x20>
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	2000008c 	.word	0x2000008c
 8003024:	200005d0 	.word	0x200005d0
 8003028:	0801d483 	.word	0x0801d483
 800302c:	0801d1ee 	.word	0x0801d1ee
 8003030:	0801d49c 	.word	0x0801d49c
 8003034:	0801d4bb 	.word	0x0801d4bb
 8003038:	acc09ee8 	.word	0xacc09ee8
 800303c:	0801d232 	.word	0x0801d232
 8003040:	0801d4dd 	.word	0x0801d4dd

08003044 <acc_service_envelope_configuration_create>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	226d      	movs	r2, #109	; 0x6d
 8003048:	4972      	ldr	r1, [pc, #456]	; (8003214 <acc_service_envelope_configuration_create+0x1d0>)
 800304a:	2090      	movs	r0, #144	; 0x90
 800304c:	f009 fe42 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8003050:	1e04      	subs	r4, r0, #0
 8003052:	d100      	bne.n	8003056 <acc_service_envelope_configuration_create+0x12>
 8003054:	e0dc      	b.n	8003210 <acc_service_envelope_configuration_create+0x1cc>
 8003056:	4b70      	ldr	r3, [pc, #448]	; (8003218 <acc_service_envelope_configuration_create+0x1d4>)
 8003058:	0005      	movs	r5, r0
 800305a:	6003      	str	r3, [r0, #0]
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <acc_service_envelope_configuration_create+0x1d8>)
 800305e:	2600      	movs	r6, #0
 8003060:	6083      	str	r3, [r0, #8]
 8003062:	4b6f      	ldr	r3, [pc, #444]	; (8003220 <acc_service_envelope_configuration_create+0x1dc>)
 8003064:	351c      	adds	r5, #28
 8003066:	6143      	str	r3, [r0, #20]
 8003068:	2358      	movs	r3, #88	; 0x58
 800306a:	7106      	strb	r6, [r0, #4]
 800306c:	8303      	strh	r3, [r0, #24]
 800306e:	6105      	str	r5, [r0, #16]
 8003070:	2102      	movs	r1, #2
 8003072:	f7fe f967 	bl	8001344 <acc_service_profile_set>
 8003076:	0020      	movs	r0, r4
 8003078:	0031      	movs	r1, r6
 800307a:	f7fe f951 	bl	8001320 <acc_service_maximize_signal_attenuation_set>
 800307e:	0028      	movs	r0, r5
 8003080:	f7fd fda2 	bl	8000bc8 <configuration_is_valid>
 8003084:	42b0      	cmp	r0, r6
 8003086:	d001      	beq.n	800308c <acc_service_envelope_configuration_create+0x48>
 8003088:	4b66      	ldr	r3, [pc, #408]	; (8003224 <acc_service_envelope_configuration_create+0x1e0>)
 800308a:	6423      	str	r3, [r4, #64]	; 0x40
 800308c:	0028      	movs	r0, r5
 800308e:	f7fd fd9b 	bl	8000bc8 <configuration_is_valid>
 8003092:	2800      	cmp	r0, #0
 8003094:	d001      	beq.n	800309a <acc_service_envelope_configuration_create+0x56>
 8003096:	4b64      	ldr	r3, [pc, #400]	; (8003228 <acc_service_envelope_configuration_create+0x1e4>)
 8003098:	6463      	str	r3, [r4, #68]	; 0x44
 800309a:	0028      	movs	r0, r5
 800309c:	f7fd fd94 	bl	8000bc8 <configuration_is_valid>
 80030a0:	2800      	cmp	r0, #0
 80030a2:	d003      	beq.n	80030ac <acc_service_envelope_configuration_create+0x68>
 80030a4:	0023      	movs	r3, r4
 80030a6:	2206      	movs	r2, #6
 80030a8:	334e      	adds	r3, #78	; 0x4e
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	0028      	movs	r0, r5
 80030ae:	f7fd fd8b 	bl	8000bc8 <configuration_is_valid>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d003      	beq.n	80030be <acc_service_envelope_configuration_create+0x7a>
 80030b6:	0023      	movs	r3, r4
 80030b8:	220a      	movs	r2, #10
 80030ba:	3358      	adds	r3, #88	; 0x58
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	0028      	movs	r0, r5
 80030c0:	f7fd fd82 	bl	8000bc8 <configuration_is_valid>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d001      	beq.n	80030cc <acc_service_envelope_configuration_create+0x88>
 80030c8:	2301      	movs	r3, #1
 80030ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80030cc:	0028      	movs	r0, r5
 80030ce:	f7fd fe5a 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 80030d2:	0028      	movs	r0, r5
 80030d4:	f7fd fd78 	bl	8000bc8 <configuration_is_valid>
 80030d8:	2800      	cmp	r0, #0
 80030da:	d001      	beq.n	80030e0 <acc_service_envelope_configuration_create+0x9c>
 80030dc:	2302      	movs	r3, #2
 80030de:	6563      	str	r3, [r4, #84]	; 0x54
 80030e0:	0028      	movs	r0, r5
 80030e2:	f7fd fd71 	bl	8000bc8 <configuration_is_valid>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d003      	beq.n	80030f2 <acc_service_envelope_configuration_create+0xae>
 80030ea:	0023      	movs	r3, r4
 80030ec:	2200      	movs	r2, #0
 80030ee:	3348      	adds	r3, #72	; 0x48
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	0028      	movs	r0, r5
 80030f4:	f7fd fd68 	bl	8000bc8 <configuration_is_valid>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d003      	beq.n	8003104 <acc_service_envelope_configuration_create+0xc0>
 80030fc:	0023      	movs	r3, r4
 80030fe:	2200      	movs	r2, #0
 8003100:	3362      	adds	r3, #98	; 0x62
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	0028      	movs	r0, r5
 8003106:	f7fd fd5f 	bl	8000bc8 <configuration_is_valid>
 800310a:	2800      	cmp	r0, #0
 800310c:	d003      	beq.n	8003116 <acc_service_envelope_configuration_create+0xd2>
 800310e:	0023      	movs	r3, r4
 8003110:	2200      	movs	r2, #0
 8003112:	3363      	adds	r3, #99	; 0x63
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	0028      	movs	r0, r5
 8003118:	f7fd fd56 	bl	8000bc8 <configuration_is_valid>
 800311c:	2800      	cmp	r0, #0
 800311e:	d003      	beq.n	8003128 <acc_service_envelope_configuration_create+0xe4>
 8003120:	0023      	movs	r3, r4
 8003122:	2200      	movs	r2, #0
 8003124:	3364      	adds	r3, #100	; 0x64
 8003126:	701a      	strb	r2, [r3, #0]
 8003128:	0028      	movs	r0, r5
 800312a:	f7fd fd4d 	bl	8000bc8 <configuration_is_valid>
 800312e:	2800      	cmp	r0, #0
 8003130:	d007      	beq.n	8003142 <acc_service_envelope_configuration_create+0xfe>
 8003132:	0023      	movs	r3, r4
 8003134:	2200      	movs	r2, #0
 8003136:	336b      	adds	r3, #107	; 0x6b
 8003138:	705a      	strb	r2, [r3, #1]
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	3240      	adds	r2, #64	; 0x40
 8003140:	805a      	strh	r2, [r3, #2]
 8003142:	0028      	movs	r0, r5
 8003144:	f7fd fd40 	bl	8000bc8 <configuration_is_valid>
 8003148:	2800      	cmp	r0, #0
 800314a:	d003      	beq.n	8003154 <acc_service_envelope_configuration_create+0x110>
 800314c:	0023      	movs	r3, r4
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	3372      	adds	r3, #114	; 0x72
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	0028      	movs	r0, r5
 8003156:	f7fd fd37 	bl	8000bc8 <configuration_is_valid>
 800315a:	2800      	cmp	r0, #0
 800315c:	d003      	beq.n	8003166 <acc_service_envelope_configuration_create+0x122>
 800315e:	0023      	movs	r3, r4
 8003160:	2200      	movs	r2, #0
 8003162:	3374      	adds	r3, #116	; 0x74
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	0028      	movs	r0, r5
 8003168:	f7fd fd2e 	bl	8000bc8 <configuration_is_valid>
 800316c:	2800      	cmp	r0, #0
 800316e:	d004      	beq.n	800317a <acc_service_envelope_configuration_create+0x136>
 8003170:	0023      	movs	r3, r4
 8003172:	2200      	movs	r2, #0
 8003174:	3376      	adds	r3, #118	; 0x76
 8003176:	701a      	strb	r2, [r3, #0]
 8003178:	67a2      	str	r2, [r4, #120]	; 0x78
 800317a:	0028      	movs	r0, r5
 800317c:	2101      	movs	r1, #1
 800317e:	f7fd fd4f 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8003182:	0028      	movs	r0, r5
 8003184:	f7fd fd20 	bl	8000bc8 <configuration_is_valid>
 8003188:	2800      	cmp	r0, #0
 800318a:	d003      	beq.n	8003194 <acc_service_envelope_configuration_create+0x150>
 800318c:	0023      	movs	r3, r4
 800318e:	220b      	movs	r2, #11
 8003190:	335a      	adds	r3, #90	; 0x5a
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	0028      	movs	r0, r5
 8003196:	f7fd fd17 	bl	8000bc8 <configuration_is_valid>
 800319a:	2800      	cmp	r0, #0
 800319c:	d003      	beq.n	80031a6 <acc_service_envelope_configuration_create+0x162>
 800319e:	0023      	movs	r3, r4
 80031a0:	2201      	movs	r2, #1
 80031a2:	3365      	adds	r3, #101	; 0x65
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	0028      	movs	r0, r5
 80031a8:	f7fd fd0e 	bl	8000bc8 <configuration_is_valid>
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d001      	beq.n	80031b4 <acc_service_envelope_configuration_create+0x170>
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <acc_service_envelope_configuration_create+0x1e8>)
 80031b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031b4:	0028      	movs	r0, r5
 80031b6:	f7fd fd07 	bl	8000bc8 <configuration_is_valid>
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d005      	beq.n	80031ca <acc_service_envelope_configuration_create+0x186>
 80031be:	4b1c      	ldr	r3, [pc, #112]	; (8003230 <acc_service_envelope_configuration_create+0x1ec>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	6323      	str	r3, [r4, #48]	; 0x30
 80031c4:	0023      	movs	r3, r4
 80031c6:	3334      	adds	r3, #52	; 0x34
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	0028      	movs	r0, r5
 80031cc:	f7fd fcfc 	bl	8000bc8 <configuration_is_valid>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d003      	beq.n	80031dc <acc_service_envelope_configuration_create+0x198>
 80031d4:	0023      	movs	r3, r4
 80031d6:	2201      	movs	r2, #1
 80031d8:	3338      	adds	r3, #56	; 0x38
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	0028      	movs	r0, r5
 80031de:	f7fd fcf3 	bl	8000bc8 <configuration_is_valid>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d003      	beq.n	80031ee <acc_service_envelope_configuration_create+0x1aa>
 80031e6:	0023      	movs	r3, r4
 80031e8:	2201      	movs	r2, #1
 80031ea:	336a      	adds	r3, #106	; 0x6a
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	0028      	movs	r0, r5
 80031f0:	f7fd fcea 	bl	8000bc8 <configuration_is_valid>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d004      	beq.n	8003202 <acc_service_envelope_configuration_create+0x1be>
 80031f8:	2296      	movs	r2, #150	; 0x96
 80031fa:	0023      	movs	r3, r4
 80031fc:	0152      	lsls	r2, r2, #5
 80031fe:	3370      	adds	r3, #112	; 0x70
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	0028      	movs	r0, r5
 8003204:	f7fd fce0 	bl	8000bc8 <configuration_is_valid>
 8003208:	2800      	cmp	r0, #0
 800320a:	d001      	beq.n	8003210 <acc_service_envelope_configuration_create+0x1cc>
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <acc_service_envelope_configuration_create+0x1f0>)
 800320e:	61e3      	str	r3, [r4, #28]
 8003210:	0020      	movs	r0, r4
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	0801d504 	.word	0x0801d504
 8003218:	acc09dd7 	.word	0xacc09dd7
 800321c:	080017e5 	.word	0x080017e5
 8003220:	080059a9 	.word	0x080059a9
 8003224:	3e4ccccd 	.word	0x3e4ccccd
 8003228:	3ecccccd 	.word	0x3ecccccd
 800322c:	3dcccccd 	.word	0x3dcccccd
 8003230:	3e99999a 	.word	0x3e99999a
 8003234:	08002d0d 	.word	0x08002d0d

08003238 <transfer_data.lto_priv.121>:
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	4657      	mov	r7, sl
 800323c:	464e      	mov	r6, r9
 800323e:	46de      	mov	lr, fp
 8003240:	4645      	mov	r5, r8
 8003242:	6944      	ldr	r4, [r0, #20]
 8003244:	b5e0      	push	{r5, r6, r7, lr}
 8003246:	0023      	movs	r3, r4
 8003248:	0027      	movs	r7, r4
 800324a:	b08d      	sub	sp, #52	; 0x34
 800324c:	9204      	str	r2, [sp, #16]
 800324e:	33c2      	adds	r3, #194	; 0xc2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	0006      	movs	r6, r0
 8003254:	468a      	mov	sl, r1
 8003256:	37c6      	adds	r7, #198	; 0xc6
 8003258:	2b00      	cmp	r3, #0
 800325a:	d100      	bne.n	800325e <transfer_data.lto_priv.121+0x26>
 800325c:	803b      	strh	r3, [r7, #0]
 800325e:	23cc      	movs	r3, #204	; 0xcc
 8003260:	469b      	mov	fp, r3
 8003262:	44a3      	add	fp, r4
 8003264:	465b      	mov	r3, fp
 8003266:	207c      	movs	r0, #124	; 0x7c
 8003268:	8819      	ldrh	r1, [r3, #0]
 800326a:	f00d fe85 	bl	8010f78 <__udivsi3>
 800326e:	23c8      	movs	r3, #200	; 0xc8
 8003270:	4699      	mov	r9, r3
 8003272:	44a1      	add	r9, r4
 8003274:	464b      	mov	r3, r9
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	a906      	add	r1, sp, #24
 800327a:	b29d      	uxth	r5, r3
 800327c:	0023      	movs	r3, r4
 800327e:	4345      	muls	r5, r0
 8003280:	33ce      	adds	r3, #206	; 0xce
 8003282:	8818      	ldrh	r0, [r3, #0]
 8003284:	182d      	adds	r5, r5, r0
 8003286:	0020      	movs	r0, r4
 8003288:	f00d f858 	bl	801033c <acc_cpd_linear_sweep_get_info>
 800328c:	9b06      	ldr	r3, [sp, #24]
 800328e:	8839      	ldrh	r1, [r7, #0]
 8003290:	18ea      	adds	r2, r5, r3
 8003292:	4653      	mov	r3, sl
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6830      	ldr	r0, [r6, #0]
 8003298:	469c      	mov	ip, r3
 800329a:	4461      	add	r1, ip
 800329c:	f7ff f800 	bl	80022a0 <acc_sensor_protocol_r2_transfer_data>
 80032a0:	0023      	movs	r3, r4
 80032a2:	33ad      	adds	r3, #173	; 0xad
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	0006      	movs	r6, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d129      	bne.n	8003300 <transfer_data.lto_priv.121+0xc8>
 80032ac:	2300      	movs	r3, #0
 80032ae:	9a04      	ldr	r2, [sp, #16]
 80032b0:	a906      	add	r1, sp, #24
 80032b2:	7013      	strb	r3, [r2, #0]
 80032b4:	0020      	movs	r0, r4
 80032b6:	0027      	movs	r7, r4
 80032b8:	f00d f840 	bl	801033c <acc_cpd_linear_sweep_get_info>
 80032bc:	4650      	mov	r0, sl
 80032be:	9b06      	ldr	r3, [sp, #24]
 80032c0:	37c6      	adds	r7, #198	; 0xc6
 80032c2:	0059      	lsls	r1, r3, #1
 80032c4:	6800      	ldr	r0, [r0, #0]
 80032c6:	883b      	ldrh	r3, [r7, #0]
 80032c8:	006a      	lsls	r2, r5, #1
 80032ca:	1871      	adds	r1, r6, r1
 80032cc:	18c0      	adds	r0, r0, r3
 80032ce:	f013 f8f0 	bl	80164b2 <memmove>
 80032d2:	464b      	mov	r3, r9
 80032d4:	883e      	ldrh	r6, [r7, #0]
 80032d6:	34c4      	adds	r4, #196	; 0xc4
 80032d8:	8026      	strh	r6, [r4, #0]
 80032da:	681c      	ldr	r4, [r3, #0]
 80032dc:	465b      	mov	r3, fp
 80032de:	207c      	movs	r0, #124	; 0x7c
 80032e0:	8819      	ldrh	r1, [r3, #0]
 80032e2:	f00d fe49 	bl	8010f78 <__udivsi3>
 80032e6:	b2a4      	uxth	r4, r4
 80032e8:	0064      	lsls	r4, r4, #1
 80032ea:	4344      	muls	r4, r0
 80032ec:	0028      	movs	r0, r5
 80032ee:	1936      	adds	r6, r6, r4
 80032f0:	803e      	strh	r6, [r7, #0]
 80032f2:	b00d      	add	sp, #52	; 0x34
 80032f4:	bc3c      	pop	{r2, r3, r4, r5}
 80032f6:	4690      	mov	r8, r2
 80032f8:	4699      	mov	r9, r3
 80032fa:	46a2      	mov	sl, r4
 80032fc:	46ab      	mov	fp, r5
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003300:	0027      	movs	r7, r4
 8003302:	221f      	movs	r2, #31
 8003304:	37bc      	adds	r7, #188	; 0xbc
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4013      	ands	r3, r2
 800330c:	4a3f      	ldr	r2, [pc, #252]	; (800340c <transfer_data.lto_priv.121+0x1d4>)
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	0011      	movs	r1, r2
 8003312:	3130      	adds	r1, #48	; 0x30
 8003314:	7809      	ldrb	r1, [r1, #0]
 8003316:	2903      	cmp	r1, #3
 8003318:	d905      	bls.n	8003326 <transfer_data.lto_priv.121+0xee>
 800331a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800331c:	493c      	ldr	r1, [pc, #240]	; (8003410 <transfer_data.lto_priv.121+0x1d8>)
 800331e:	4690      	mov	r8, r2
 8003320:	2004      	movs	r0, #4
 8003322:	4a3c      	ldr	r2, [pc, #240]	; (8003414 <transfer_data.lto_priv.121+0x1dc>)
 8003324:	47c0      	blx	r8
 8003326:	6a23      	ldr	r3, [r4, #32]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <transfer_data.lto_priv.121+0x1e0>)
 800332a:	b29b      	uxth	r3, r3
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3278      	adds	r2, #120	; 0x78
 8003330:	5e98      	ldrsh	r0, [r3, r2]
 8003332:	f00e fa05 	bl	8011740 <__aeabi_i2f>
 8003336:	4680      	mov	r8, r0
 8003338:	8830      	ldrh	r0, [r6, #0]
 800333a:	f00e fa4b 	bl	80117d4 <__aeabi_ui2f>
 800333e:	21de      	movs	r1, #222	; 0xde
 8003340:	0589      	lsls	r1, r1, #22
 8003342:	f00d fae7 	bl	8010914 <__aeabi_fmul>
 8003346:	21fc      	movs	r1, #252	; 0xfc
 8003348:	0589      	lsls	r1, r1, #22
 800334a:	f00d fc15 	bl	8010b78 <__aeabi_fsub>
 800334e:	4933      	ldr	r1, [pc, #204]	; (800341c <transfer_data.lto_priv.121+0x1e4>)
 8003350:	f00d fae0 	bl	8010914 <__aeabi_fmul>
 8003354:	4932      	ldr	r1, [pc, #200]	; (8003420 <transfer_data.lto_priv.121+0x1e8>)
 8003356:	f00d fadd 	bl	8010914 <__aeabi_fmul>
 800335a:	1c01      	adds	r1, r0, #0
 800335c:	4640      	mov	r0, r8
 800335e:	f00d fc0b 	bl	8010b78 <__aeabi_fsub>
 8003362:	f00e f9cd 	bl	8011700 <__aeabi_f2iz>
 8003366:	4a2f      	ldr	r2, [pc, #188]	; (8003424 <transfer_data.lto_priv.121+0x1ec>)
 8003368:	b203      	sxth	r3, r0
 800336a:	4698      	mov	r8, r3
 800336c:	b29b      	uxth	r3, r3
 800336e:	189a      	adds	r2, r3, r2
 8003370:	492d      	ldr	r1, [pc, #180]	; (8003428 <transfer_data.lto_priv.121+0x1f0>)
 8003372:	b292      	uxth	r2, r2
 8003374:	428a      	cmp	r2, r1
 8003376:	d82a      	bhi.n	80033ce <transfer_data.lto_priv.121+0x196>
 8003378:	2126      	movs	r1, #38	; 0x26
 800337a:	5e62      	ldrsh	r2, [r4, r1]
 800337c:	8870      	ldrh	r0, [r6, #2]
 800337e:	9203      	str	r2, [sp, #12]
 8003380:	4a2a      	ldr	r2, [pc, #168]	; (800342c <transfer_data.lto_priv.121+0x1f4>)
 8003382:	4694      	mov	ip, r2
 8003384:	22e6      	movs	r2, #230	; 0xe6
 8003386:	4463      	add	r3, ip
 8003388:	b29b      	uxth	r3, r3
 800338a:	0052      	lsls	r2, r2, #1
 800338c:	4293      	cmp	r3, r2
 800338e:	d922      	bls.n	80033d6 <transfer_data.lto_priv.121+0x19e>
 8003390:	f00e fa20 	bl	80117d4 <__aeabi_ui2f>
 8003394:	21de      	movs	r1, #222	; 0xde
 8003396:	0589      	lsls	r1, r1, #22
 8003398:	f00d fabc 	bl	8010914 <__aeabi_fmul>
 800339c:	21fc      	movs	r1, #252	; 0xfc
 800339e:	0589      	lsls	r1, r1, #22
 80033a0:	f00d fbea 	bl	8010b78 <__aeabi_fsub>
 80033a4:	491d      	ldr	r1, [pc, #116]	; (800341c <transfer_data.lto_priv.121+0x1e4>)
 80033a6:	f00d fab5 	bl	8010914 <__aeabi_fmul>
 80033aa:	491d      	ldr	r1, [pc, #116]	; (8003420 <transfer_data.lto_priv.121+0x1e8>)
 80033ac:	f00d fab2 	bl	8010914 <__aeabi_fmul>
 80033b0:	9005      	str	r0, [sp, #20]
 80033b2:	4640      	mov	r0, r8
 80033b4:	f00e f9c4 	bl	8011740 <__aeabi_i2f>
 80033b8:	1c01      	adds	r1, r0, #0
 80033ba:	9805      	ldr	r0, [sp, #20]
 80033bc:	f00c fffe 	bl	80103bc <__aeabi_fadd>
 80033c0:	f00e f99e 	bl	8011700 <__aeabi_f2iz>
 80033c4:	9b03      	ldr	r3, [sp, #12]
 80033c6:	b200      	sxth	r0, r0
 80033c8:	3364      	adds	r3, #100	; 0x64
 80033ca:	4298      	cmp	r0, r3
 80033cc:	dd03      	ble.n	80033d6 <transfer_data.lto_priv.121+0x19e>
 80033ce:	2301      	movs	r3, #1
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	2a00      	cmp	r2, #0
 80033dc:	d111      	bne.n	8003402 <transfer_data.lto_priv.121+0x1ca>
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d800      	bhi.n	80033e4 <transfer_data.lto_priv.121+0x1ac>
 80033e2:	e763      	b.n	80032ac <transfer_data.lto_priv.121+0x74>
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <transfer_data.lto_priv.121+0x1d4>)
 80033e6:	0011      	movs	r1, r2
 80033e8:	3130      	adds	r1, #48	; 0x30
 80033ea:	7809      	ldrb	r1, [r1, #0]
 80033ec:	2900      	cmp	r1, #0
 80033ee:	d006      	beq.n	80033fe <transfer_data.lto_priv.121+0x1c6>
 80033f0:	2105      	movs	r1, #5
 80033f2:	9100      	str	r1, [sp, #0]
 80033f4:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80033f6:	4906      	ldr	r1, [pc, #24]	; (8003410 <transfer_data.lto_priv.121+0x1d8>)
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <transfer_data.lto_priv.121+0x1f8>)
 80033fa:	2001      	movs	r0, #1
 80033fc:	47b8      	blx	r7
 80033fe:	2301      	movs	r3, #1
 8003400:	e755      	b.n	80032ae <transfer_data.lto_priv.121+0x76>
 8003402:	1e51      	subs	r1, r2, #1
 8003404:	400a      	ands	r2, r1
 8003406:	3301      	adds	r3, #1
 8003408:	e7e7      	b.n	80033da <transfer_data.lto_priv.121+0x1a2>
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	200005d0 	.word	0x200005d0
 8003410:	0801d53e 	.word	0x0801d53e
 8003414:	0801d527 	.word	0x0801d527
 8003418:	080168e0 	.word	0x080168e0
 800341c:	3f99999a 	.word	0x3f99999a
 8003420:	447a0000 	.word	0x447a0000
 8003424:	fffffd12 	.word	0xfffffd12
 8003428:	00000217 	.word	0x00000217
 800342c:	fffffcf4 	.word	0xfffffcf4
 8003430:	0801d54f 	.word	0x0801d54f

08003434 <convolve1d>:
int8_t convolve1d(uint16_t indx, uint8_t dir){
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	b083      	sub	sp, #12
 8003438:	0004      	movs	r4, r0
 800343a:	9001      	str	r0, [sp, #4]
 800343c:	000d      	movs	r5, r1
	stackSet();
 800343e:	f7fe fb8f 	bl	8001b60 <stackSet>
	if(dir == 0){	
 8003442:	2d00      	cmp	r5, #0
 8003444:	d145      	bne.n	80034d2 <convolve1d+0x9e>
		if(indx >= _bins){
 8003446:	4b45      	ldr	r3, [pc, #276]	; (800355c <convolve1d+0x128>)
 8003448:	7a5b      	ldrb	r3, [r3, #9]
 800344a:	42a3      	cmp	r3, r4
 800344c:	d901      	bls.n	8003452 <convolve1d+0x1e>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 800344e:	2400      	movs	r4, #0
 8003450:	e033      	b.n	80034ba <convolve1d+0x86>
			ERR_PRINTLN("bin count too great to convolve");
 8003452:	4843      	ldr	r0, [pc, #268]	; (8003560 <convolve1d+0x12c>)
 8003454:	f012 fb5e 	bl	8015b14 <__wrap_printf>
 8003458:	4842      	ldr	r0, [pc, #264]	; (8003564 <convolve1d+0x130>)
 800345a:	f012 fb5b 	bl	8015b14 <__wrap_printf>
 800345e:	200a      	movs	r0, #10
 8003460:	f013 f83a 	bl	80164d8 <putchar>
			return 0;
 8003464:	2000      	movs	r0, #0
 8003466:	e032      	b.n	80034ce <convolve1d+0x9a>
				sum += kernel[j]*getdata(i-j+cent, indx);
 8003468:	00b2      	lsls	r2, r6, #2
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <convolve1d+0x134>)
 800346c:	189b      	adds	r3, r3, r2
 800346e:	69df      	ldr	r7, [r3, #28]
 8003470:	1ba0      	subs	r0, r4, r6
 8003472:	b280      	uxth	r0, r0
 8003474:	3004      	adds	r0, #4
 8003476:	466b      	mov	r3, sp
 8003478:	2104      	movs	r1, #4
 800347a:	5e59      	ldrsh	r1, [r3, r1]
 800347c:	b200      	sxth	r0, r0
 800347e:	f7fe fb93 	bl	8001ba8 <getdata>
 8003482:	f00e f95d 	bl	8011740 <__aeabi_i2f>
 8003486:	1c39      	adds	r1, r7, #0
 8003488:	f00d fa44 	bl	8010914 <__aeabi_fmul>
 800348c:	1c01      	adds	r1, r0, #0
 800348e:	1c28      	adds	r0, r5, #0
 8003490:	f00c ff94 	bl	80103bc <__aeabi_fadd>
 8003494:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 8003496:	3601      	adds	r6, #1
 8003498:	2e08      	cmp	r6, #8
 800349a:	dde5      	ble.n	8003468 <convolve1d+0x34>
			pop = stackPush(sum);
 800349c:	1c28      	adds	r0, r5, #0
 800349e:	f7fe fb49 	bl	8001b34 <stackPush>
			setdata(i-cent, indx, pop);
 80034a2:	1f25      	subs	r5, r4, #4
 80034a4:	b2ad      	uxth	r5, r5
 80034a6:	f00d ff75 	bl	8011394 <__aeabi_f2uiz>
 80034aa:	b282      	uxth	r2, r0
 80034ac:	466b      	mov	r3, sp
 80034ae:	2104      	movs	r1, #4
 80034b0:	5e59      	ldrsh	r1, [r3, r1]
 80034b2:	b228      	sxth	r0, r5
 80034b4:	f7fe fb62 	bl	8001b7c <setdata>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 80034b8:	3401      	adds	r4, #1
 80034ba:	4b28      	ldr	r3, [pc, #160]	; (800355c <convolve1d+0x128>)
 80034bc:	7a1b      	ldrb	r3, [r3, #8]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	3307      	adds	r3, #7
 80034c2:	42a3      	cmp	r3, r4
 80034c4:	dd02      	ble.n	80034cc <convolve1d+0x98>
			for(int j = 0; j < CONVKER; j++){
 80034c6:	2600      	movs	r6, #0
			float sum = 0.0f;
 80034c8:	2500      	movs	r5, #0
 80034ca:	e7e5      	b.n	8003498 <convolve1d+0x64>
	return 1;
 80034cc:	2001      	movs	r0, #1
}
 80034ce:	b003      	add	sp, #12
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(indx >= _sweeps){
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <convolve1d+0x128>)
 80034d4:	7a1b      	ldrb	r3, [r3, #8]
 80034d6:	9a01      	ldr	r2, [sp, #4]
 80034d8:	4293      	cmp	r3, r2
 80034da:	d901      	bls.n	80034e0 <convolve1d+0xac>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80034dc:	2400      	movs	r4, #0
 80034de:	e033      	b.n	8003548 <convolve1d+0x114>
			ERR_PRINTLN("sweep count too great to convolve");
 80034e0:	481f      	ldr	r0, [pc, #124]	; (8003560 <convolve1d+0x12c>)
 80034e2:	f012 fb17 	bl	8015b14 <__wrap_printf>
 80034e6:	4821      	ldr	r0, [pc, #132]	; (800356c <convolve1d+0x138>)
 80034e8:	f012 fb14 	bl	8015b14 <__wrap_printf>
 80034ec:	200a      	movs	r0, #10
 80034ee:	f012 fff3 	bl	80164d8 <putchar>
			return 0;
 80034f2:	2000      	movs	r0, #0
 80034f4:	e7eb      	b.n	80034ce <convolve1d+0x9a>
				sum += kernel[j]*getdata(indx, i-j+cent);
 80034f6:	00b2      	lsls	r2, r6, #2
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <convolve1d+0x134>)
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	69df      	ldr	r7, [r3, #28]
 80034fe:	1ba1      	subs	r1, r4, r6
 8003500:	b289      	uxth	r1, r1
 8003502:	3104      	adds	r1, #4
 8003504:	b209      	sxth	r1, r1
 8003506:	466b      	mov	r3, sp
 8003508:	2004      	movs	r0, #4
 800350a:	5e18      	ldrsh	r0, [r3, r0]
 800350c:	f7fe fb4c 	bl	8001ba8 <getdata>
 8003510:	f00e f916 	bl	8011740 <__aeabi_i2f>
 8003514:	1c39      	adds	r1, r7, #0
 8003516:	f00d f9fd 	bl	8010914 <__aeabi_fmul>
 800351a:	1c01      	adds	r1, r0, #0
 800351c:	1c28      	adds	r0, r5, #0
 800351e:	f00c ff4d 	bl	80103bc <__aeabi_fadd>
 8003522:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 8003524:	3601      	adds	r6, #1
 8003526:	2e08      	cmp	r6, #8
 8003528:	dde5      	ble.n	80034f6 <convolve1d+0xc2>
			pop = stackPush(sum);
 800352a:	1c28      	adds	r0, r5, #0
 800352c:	f7fe fb02 	bl	8001b34 <stackPush>
			setdata(indx, i-cent, pop);
 8003530:	1f25      	subs	r5, r4, #4
 8003532:	b2ad      	uxth	r5, r5
 8003534:	f00d ff2e 	bl	8011394 <__aeabi_f2uiz>
 8003538:	b282      	uxth	r2, r0
 800353a:	b229      	sxth	r1, r5
 800353c:	466b      	mov	r3, sp
 800353e:	2004      	movs	r0, #4
 8003540:	5e18      	ldrsh	r0, [r3, r0]
 8003542:	f7fe fb1b 	bl	8001b7c <setdata>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8003546:	3401      	adds	r4, #1
 8003548:	4b04      	ldr	r3, [pc, #16]	; (800355c <convolve1d+0x128>)
 800354a:	7a5b      	ldrb	r3, [r3, #9]
 800354c:	3307      	adds	r3, #7
 800354e:	42a3      	cmp	r3, r4
 8003550:	dd02      	ble.n	8003558 <convolve1d+0x124>
			for(int j = 0; j < CONVKER; j++){
 8003552:	2600      	movs	r6, #0
			float sum = 0.0f;
 8003554:	2500      	movs	r5, #0
 8003556:	e7e6      	b.n	8003526 <convolve1d+0xf2>
	return 1;
 8003558:	2001      	movs	r0, #1
 800355a:	e7b8      	b.n	80034ce <convolve1d+0x9a>
 800355c:	2000010c 	.word	0x2000010c
 8003560:	0801e6fc 	.word	0x0801e6fc
 8003564:	0801e704 	.word	0x0801e704
 8003568:	2000020c 	.word	0x2000020c
 800356c:	0801e724 	.word	0x0801e724

08003570 <print_sparse_results>:
			
		print_sparse_results();
	}
}

void print_sparse_results(void){
 8003570:	b510      	push	{r4, lr}
		INF_PRINTLN("RESULTS");
 8003572:	4c1f      	ldr	r4, [pc, #124]	; (80035f0 <print_sparse_results+0x80>)
 8003574:	0020      	movs	r0, r4
 8003576:	f012 facd 	bl	8015b14 <__wrap_printf>
 800357a:	481e      	ldr	r0, [pc, #120]	; (80035f4 <print_sparse_results+0x84>)
 800357c:	f012 faca 	bl	8015b14 <__wrap_printf>
 8003580:	200a      	movs	r0, #10
 8003582:	f012 ffa9 	bl	80164d8 <putchar>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8003586:	0020      	movs	r0, r4
 8003588:	f012 fac4 	bl	8015b14 <__wrap_printf>
 800358c:	20d0      	movs	r0, #208	; 0xd0
 800358e:	f7fe fc79 	bl	8001e84 <RegInt_getreg>
 8003592:	0001      	movs	r1, r0
 8003594:	4818      	ldr	r0, [pc, #96]	; (80035f8 <print_sparse_results+0x88>)
 8003596:	f012 fabd 	bl	8015b14 <__wrap_printf>
 800359a:	200a      	movs	r0, #10
 800359c:	f012 ff9c 	bl	80164d8 <putchar>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 80035a0:	0020      	movs	r0, r4
 80035a2:	f012 fab7 	bl	8015b14 <__wrap_printf>
 80035a6:	20d1      	movs	r0, #209	; 0xd1
 80035a8:	f7fe fc6c 	bl	8001e84 <RegInt_getreg>
 80035ac:	0001      	movs	r1, r0
 80035ae:	4813      	ldr	r0, [pc, #76]	; (80035fc <print_sparse_results+0x8c>)
 80035b0:	f012 fab0 	bl	8015b14 <__wrap_printf>
 80035b4:	200a      	movs	r0, #10
 80035b6:	f012 ff8f 	bl	80164d8 <putchar>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 80035ba:	0020      	movs	r0, r4
 80035bc:	f012 faaa 	bl	8015b14 <__wrap_printf>
 80035c0:	20d2      	movs	r0, #210	; 0xd2
 80035c2:	f7fe fc5f 	bl	8001e84 <RegInt_getreg>
 80035c6:	0001      	movs	r1, r0
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <print_sparse_results+0x90>)
 80035ca:	f012 faa3 	bl	8015b14 <__wrap_printf>
 80035ce:	200a      	movs	r0, #10
 80035d0:	f012 ff82 	bl	80164d8 <putchar>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80035d4:	0020      	movs	r0, r4
 80035d6:	f012 fa9d 	bl	8015b14 <__wrap_printf>
 80035da:	20d3      	movs	r0, #211	; 0xd3
 80035dc:	f7fe fc52 	bl	8001e84 <RegInt_getreg>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <print_sparse_results+0x94>)
 80035e4:	f012 fa96 	bl	8015b14 <__wrap_printf>
 80035e8:	200a      	movs	r0, #10
 80035ea:	f012 ff75 	bl	80164d8 <putchar>
 80035ee:	bd10      	pop	{r4, pc}
 80035f0:	0801e748 	.word	0x0801e748
 80035f4:	0801e750 	.word	0x0801e750
 80035f8:	0801e758 	.word	0x0801e758
 80035fc:	0801e76c 	.word	0x0801e76c
 8003600:	0801e780 	.word	0x0801e780
 8003604:	0801e794 	.word	0x0801e794

08003608 <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	0004      	movs	r4, r0
 800360c:	000e      	movs	r6, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 800360e:	4d2a      	ldr	r5, [pc, #168]	; (80036b8 <data_malloc+0xb0>)
 8003610:	0028      	movs	r0, r5
 8003612:	f012 fa7f 	bl	8015b14 <__wrap_printf>
 8003616:	0021      	movs	r1, r4
 8003618:	4828      	ldr	r0, [pc, #160]	; (80036bc <data_malloc+0xb4>)
 800361a:	f012 fa7b 	bl	8015b14 <__wrap_printf>
 800361e:	200a      	movs	r0, #10
 8003620:	f012 ff5a 	bl	80164d8 <putchar>
	DBG_PRINTLN("malloc bins: %d", bins);
 8003624:	0028      	movs	r0, r5
 8003626:	f012 fa75 	bl	8015b14 <__wrap_printf>
 800362a:	0035      	movs	r5, r6
 800362c:	0031      	movs	r1, r6
 800362e:	4824      	ldr	r0, [pc, #144]	; (80036c0 <data_malloc+0xb8>)
 8003630:	f012 fa70 	bl	8015b14 <__wrap_printf>
 8003634:	200a      	movs	r0, #10
 8003636:	f012 ff4f 	bl	80164d8 <putchar>
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 800363a:	3602      	adds	r6, #2
 800363c:	4366      	muls	r6, r4
 800363e:	0076      	lsls	r6, r6, #1
    data = (uint16_t **)malloc(len);
 8003640:	0030      	movs	r0, r6
 8003642:	f012 ff19 	bl	8016478 <malloc>
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <data_malloc+0xbc>)
 8003648:	6658      	str	r0, [r3, #100]	; 0x64
	if (data == NULL){
 800364a:	2800      	cmp	r0, #0
 800364c:	d018      	beq.n	8003680 <data_malloc+0x78>
		DBG_PRINTLN("data buffer allociation success");
 800364e:	4f1a      	ldr	r7, [pc, #104]	; (80036b8 <data_malloc+0xb0>)
 8003650:	0038      	movs	r0, r7
 8003652:	f012 fa5f 	bl	8015b14 <__wrap_printf>
 8003656:	481c      	ldr	r0, [pc, #112]	; (80036c8 <data_malloc+0xc0>)
 8003658:	f012 fa5c 	bl	8015b14 <__wrap_printf>
 800365c:	200a      	movs	r0, #10
 800365e:	f012 ff3b 	bl	80164d8 <putchar>
		DBG_PRINTLN("data buffer len: %ld", len);
 8003662:	0038      	movs	r0, r7
 8003664:	f012 fa56 	bl	8015b14 <__wrap_printf>
 8003668:	0031      	movs	r1, r6
 800366a:	4818      	ldr	r0, [pc, #96]	; (80036cc <data_malloc+0xc4>)
 800366c:	f012 fa52 	bl	8015b14 <__wrap_printf>
 8003670:	200a      	movs	r0, #10
 8003672:	f012 ff31 	bl	80164d8 <putchar>
    ptr = (uint16_t *)(data + r);
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <data_malloc+0xbc>)
 8003678:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800367a:	00a6      	lsls	r6, r4, #2
    for(uint16_t i = 0; i < r; i++){
 800367c:	2200      	movs	r2, #0
 800367e:	e016      	b.n	80036ae <data_malloc+0xa6>
		ERR_PRINTLN("data buffer allociation failed");
 8003680:	4813      	ldr	r0, [pc, #76]	; (80036d0 <data_malloc+0xc8>)
 8003682:	f012 fa47 	bl	8015b14 <__wrap_printf>
 8003686:	4813      	ldr	r0, [pc, #76]	; (80036d4 <data_malloc+0xcc>)
 8003688:	f012 fa44 	bl	8015b14 <__wrap_printf>
 800368c:	200a      	movs	r0, #10
 800368e:	f012 ff23 	bl	80164d8 <putchar>
		return -1;
 8003692:	2001      	movs	r0, #1
 8003694:	4240      	negs	r0, r0
 8003696:	e00d      	b.n	80036b4 <data_malloc+0xac>
        data[i] = (ptr + c * i);
 8003698:	002b      	movs	r3, r5
 800369a:	4353      	muls	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	0091      	lsls	r1, r2, #2
 80036a0:	4808      	ldr	r0, [pc, #32]	; (80036c4 <data_malloc+0xbc>)
 80036a2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80036a4:	18f3      	adds	r3, r6, r3
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	5043      	str	r3, [r0, r1]
    for(uint16_t i = 0; i < r; i++){
 80036aa:	3201      	adds	r2, #1
 80036ac:	b292      	uxth	r2, r2
 80036ae:	42a2      	cmp	r2, r4
 80036b0:	d3f2      	bcc.n	8003698 <data_malloc+0x90>
	return 0;
 80036b2:	2000      	movs	r0, #0
}
 80036b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	0801e7b4 	.word	0x0801e7b4
 80036bc:	0801e7bc 	.word	0x0801e7bc
 80036c0:	0801e7d0 	.word	0x0801e7d0
 80036c4:	2000018c 	.word	0x2000018c
 80036c8:	0801e800 	.word	0x0801e800
 80036cc:	0801e820 	.word	0x0801e820
 80036d0:	0801e6fc 	.word	0x0801e6fc
 80036d4:	0801e7e0 	.word	0x0801e7e0

080036d8 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 80036da:	4f12      	ldr	r7, [pc, #72]	; (8003724 <sparse_data_malloc+0x4c>)
 80036dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80036de:	f7fd ffee 	bl	80016be <acc_service_sparse_configuration_sweeps_per_frame_get>
 80036e2:	0005      	movs	r5, r0
 80036e4:	4e10      	ldr	r6, [pc, #64]	; (8003728 <sparse_data_malloc+0x50>)
 80036e6:	2368      	movs	r3, #104	; 0x68
 80036e8:	52f0      	strh	r0, [r6, r3]
	bins = sparse_metadata.data_length/sweeps;
 80036ea:	0033      	movs	r3, r6
 80036ec:	336c      	adds	r3, #108	; 0x6c
 80036ee:	8918      	ldrh	r0, [r3, #8]
 80036f0:	0029      	movs	r1, r5
 80036f2:	f00d fc41 	bl	8010f78 <__udivsi3>
 80036f6:	b284      	uxth	r4, r0
 80036f8:	236a      	movs	r3, #106	; 0x6a
 80036fa:	52f4      	strh	r4, [r6, r3]
	if(far_active){
 80036fc:	3b26      	subs	r3, #38	; 0x26
 80036fe:	5cfb      	ldrb	r3, [r7, r3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <sparse_data_malloc+0x3c>
		bins += sparse_metadata_far.data_length/sweeps;
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <sparse_data_malloc+0x4c>)
 8003706:	8998      	ldrh	r0, [r3, #12]
 8003708:	0029      	movs	r1, r5
 800370a:	f00d fc35 	bl	8010f78 <__udivsi3>
 800370e:	1824      	adds	r4, r4, r0
 8003710:	236a      	movs	r3, #106	; 0x6a
 8003712:	52f4      	strh	r4, [r6, r3]
	return data_malloc(sweeps,bins);
 8003714:	4a04      	ldr	r2, [pc, #16]	; (8003728 <sparse_data_malloc+0x50>)
 8003716:	236a      	movs	r3, #106	; 0x6a
 8003718:	5ad1      	ldrh	r1, [r2, r3]
 800371a:	0028      	movs	r0, r5
 800371c:	f7ff ff74 	bl	8003608 <data_malloc>
}
 8003720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	2000020c 	.word	0x2000020c
 8003728:	2000018c 	.word	0x2000018c

0800372c <envelope_data_malloc>:
int8_t envelope_data_malloc(void){
 800372c:	b510      	push	{r4, lr}
    bins = envelope_metadata.data_length;
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <envelope_data_malloc+0x18>)
 8003730:	3348      	adds	r3, #72	; 0x48
 8003732:	8919      	ldrh	r1, [r3, #8]
 8003734:	4a04      	ldr	r2, [pc, #16]	; (8003748 <envelope_data_malloc+0x1c>)
 8003736:	236a      	movs	r3, #106	; 0x6a
 8003738:	52d1      	strh	r1, [r2, r3]
    return data_malloc(1,bins);
 800373a:	2001      	movs	r0, #1
 800373c:	f7ff ff64 	bl	8003608 <data_malloc>
}
 8003740:	bd10      	pop	{r4, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	2000020c 	.word	0x2000020c
 8003748:	2000018c 	.word	0x2000018c

0800374c <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	0005      	movs	r5, r0
 8003750:	000e      	movs	r6, r1
	if(!force){
 8003752:	2a00      	cmp	r2, #0
 8003754:	d103      	bne.n	800375e <RegInt_setregf+0x12>
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8003756:	f7fe fcc3 	bl	80020e0 <RegInt_writeable>
 800375a:	1e04      	subs	r4, r0, #0
 800375c:	d009      	beq.n	8003772 <RegInt_setregf+0x26>
	uint32_t* regptr = RegInt_regmap(reg);
 800375e:	0028      	movs	r0, r5
 8003760:	f7fe fb5a 	bl	8001e18 <RegInt_regmap>
	if (!(*regptr == (uint32_t)-1)){
 8003764:	6803      	ldr	r3, [r0, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	d00d      	beq.n	8003786 <RegInt_setregf+0x3a>
		*regptr = val;
 800376a:	6006      	str	r6, [r0, #0]
	return 1;
 800376c:	2401      	movs	r4, #1
}
 800376e:	0020      	movs	r0, r4
 8003770:	bd70      	pop	{r4, r5, r6, pc}
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <RegInt_setregf+0x40>)
 8003774:	f012 f9ce 	bl	8015b14 <__wrap_printf>
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <RegInt_setregf+0x44>)
 800377a:	f012 f9cb 	bl	8015b14 <__wrap_printf>
 800377e:	200a      	movs	r0, #10
 8003780:	f012 feaa 	bl	80164d8 <putchar>
 8003784:	e7f3      	b.n	800376e <RegInt_setregf+0x22>
	return 1;
 8003786:	2401      	movs	r4, #1
 8003788:	e7f1      	b.n	800376e <RegInt_setregf+0x22>
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	0801e7b4 	.word	0x0801e7b4
 8003790:	0801e838 	.word	0x0801e838

08003794 <Reg_store_envelope_metadata>:
void Reg_store_envelope_metadata(acc_service_envelope_metadata_t metadata){
 8003794:	b500      	push	{lr}
 8003796:	b087      	sub	sp, #28
 8003798:	9002      	str	r0, [sp, #8]
 800379a:	9103      	str	r1, [sp, #12]
 800379c:	9204      	str	r2, [sp, #16]
 800379e:	9305      	str	r3, [sp, #20]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 80037a0:	4918      	ldr	r1, [pc, #96]	; (8003804 <Reg_store_envelope_metadata+0x70>)
 80037a2:	9802      	ldr	r0, [sp, #8]
 80037a4:	f00d f8b6 	bl	8010914 <__aeabi_fmul>
 80037a8:	f00d fdf4 	bl	8011394 <__aeabi_f2uiz>
 80037ac:	0001      	movs	r1, r0
 80037ae:	2201      	movs	r2, #1
 80037b0:	2081      	movs	r0, #129	; 0x81
 80037b2:	f7ff ffcb 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	4912      	ldr	r1, [pc, #72]	; (8003804 <Reg_store_envelope_metadata+0x70>)
 80037bc:	1c18      	adds	r0, r3, #0
 80037be:	f00d f8a9 	bl	8010914 <__aeabi_fmul>
 80037c2:	f00d fde7 	bl	8011394 <__aeabi_f2uiz>
 80037c6:	0001      	movs	r1, r0
 80037c8:	2201      	movs	r2, #1
 80037ca:	2082      	movs	r0, #130	; 0x82
 80037cc:	f7ff ffbe 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x83, (uint32_t)metadata.data_length ,1);
 80037d0:	ab02      	add	r3, sp, #8
 80037d2:	8919      	ldrh	r1, [r3, #8]
 80037d4:	2201      	movs	r2, #1
 80037d6:	2083      	movs	r0, #131	; 0x83
 80037d8:	f7ff ffb8 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)metadata.stitch_count,1);
 80037dc:	ab02      	add	r3, sp, #8
 80037de:	8959      	ldrh	r1, [r3, #10]
 80037e0:	2201      	movs	r2, #1
 80037e2:	2084      	movs	r0, #132	; 0x84
 80037e4:	f7ff ffb2 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 80037e8:	9805      	ldr	r0, [sp, #20]
 80037ea:	4906      	ldr	r1, [pc, #24]	; (8003804 <Reg_store_envelope_metadata+0x70>)
 80037ec:	f00d f892 	bl	8010914 <__aeabi_fmul>
 80037f0:	f00d fdd0 	bl	8011394 <__aeabi_f2uiz>
 80037f4:	0001      	movs	r1, r0
 80037f6:	2201      	movs	r2, #1
 80037f8:	2085      	movs	r0, #133	; 0x85
 80037fa:	f7ff ffa7 	bl	800374c <RegInt_setregf>
}
 80037fe:	b007      	add	sp, #28
 8003800:	bd00      	pop	{pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	447a0000 	.word	0x447a0000

08003808 <Reg_store_sparse_metadata>:
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8003808:	b084      	sub	sp, #16
 800380a:	b510      	push	{r4, lr}
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	9103      	str	r1, [sp, #12]
 8003810:	9204      	str	r2, [sp, #16]
 8003812:	9305      	str	r3, [sp, #20]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003814:	491d      	ldr	r1, [pc, #116]	; (800388c <Reg_store_sparse_metadata+0x84>)
 8003816:	9802      	ldr	r0, [sp, #8]
 8003818:	f00d f87c 	bl	8010914 <__aeabi_fmul>
 800381c:	f00d fdba 	bl	8011394 <__aeabi_f2uiz>
 8003820:	0001      	movs	r1, r0
 8003822:	2201      	movs	r2, #1
 8003824:	2081      	movs	r0, #129	; 0x81
 8003826:	f7ff ff91 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800382a:	4918      	ldr	r1, [pc, #96]	; (800388c <Reg_store_sparse_metadata+0x84>)
 800382c:	9803      	ldr	r0, [sp, #12]
 800382e:	f00d f871 	bl	8010914 <__aeabi_fmul>
 8003832:	f00d fdaf 	bl	8011394 <__aeabi_f2uiz>
 8003836:	0001      	movs	r1, r0
 8003838:	2201      	movs	r2, #1
 800383a:	2082      	movs	r0, #130	; 0x82
 800383c:	f7ff ff86 	bl	800374c <RegInt_setregf>
	uint32_t bufflen = metadata.data_length;
 8003840:	ab02      	add	r3, sp, #8
 8003842:	8919      	ldrh	r1, [r3, #8]
	if(metadata_far_ptr != NULL){
 8003844:	9b07      	ldr	r3, [sp, #28]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <Reg_store_sparse_metadata+0x46>
		bufflen += (*metadata_far_ptr).data_length;
 800384a:	891b      	ldrh	r3, [r3, #8]
 800384c:	18c9      	adds	r1, r1, r3
	RegInt_setregf(0x83, bufflen ,1);
 800384e:	2201      	movs	r2, #1
 8003850:	2083      	movs	r0, #131	; 0x83
 8003852:	f7ff ff7b 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 8003856:	490d      	ldr	r1, [pc, #52]	; (800388c <Reg_store_sparse_metadata+0x84>)
 8003858:	9805      	ldr	r0, [sp, #20]
 800385a:	f00d f85b 	bl	8010914 <__aeabi_fmul>
 800385e:	f00d fd99 	bl	8011394 <__aeabi_f2uiz>
 8003862:	0001      	movs	r1, r0
 8003864:	2201      	movs	r2, #1
 8003866:	2084      	movs	r0, #132	; 0x84
 8003868:	f7ff ff70 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <Reg_store_sparse_metadata+0x84>)
 800386e:	9806      	ldr	r0, [sp, #24]
 8003870:	f00d f850 	bl	8010914 <__aeabi_fmul>
 8003874:	f00d fd8e 	bl	8011394 <__aeabi_f2uiz>
 8003878:	0001      	movs	r1, r0
 800387a:	2201      	movs	r2, #1
 800387c:	2085      	movs	r0, #133	; 0x85
 800387e:	f7ff ff65 	bl	800374c <RegInt_setregf>
}
 8003882:	bc10      	pop	{r4}
 8003884:	bc08      	pop	{r3}
 8003886:	b004      	add	sp, #16
 8003888:	4718      	bx	r3
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	447a0000 	.word	0x447a0000

08003890 <Reg_regor>:
void Reg_regor(uint8_t reg, uint32_t orbits){
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	0004      	movs	r4, r0
 8003894:	000d      	movs	r5, r1
	uint32_t flags = RegInt_getreg(reg); 
 8003896:	f7fe faf5 	bl	8001e84 <RegInt_getreg>
	flags |= orbits;
 800389a:	0001      	movs	r1, r0
 800389c:	4329      	orrs	r1, r5
	RegInt_setregf(reg, flags, 1);
 800389e:	2201      	movs	r2, #1
 80038a0:	0020      	movs	r0, r4
 80038a2:	f7ff ff53 	bl	800374c <RegInt_setregf>
}
 80038a6:	bd70      	pop	{r4, r5, r6, pc}

080038a8 <stopService>:
void stopService(void){
 80038a8:	b510      	push	{r4, lr}
 80038aa:	b082      	sub	sp, #8
    uint32_t service_type = RegInt_getreg(0x02);
 80038ac:	2002      	movs	r0, #2
 80038ae:	f7fe fae9 	bl	8001e84 <RegInt_getreg>
    if(service_type == 0x02){handle = envelope_handle;}
 80038b2:	2802      	cmp	r0, #2
 80038b4:	d005      	beq.n	80038c2 <stopService+0x1a>
    else if(service_type == 0x04){handle = sparse_handle;}
 80038b6:	2804      	cmp	r0, #4
 80038b8:	d123      	bne.n	8003902 <stopService+0x5a>
 80038ba:	4b29      	ldr	r3, [pc, #164]	; (8003960 <stopService+0xb8>)
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	e002      	b.n	80038c8 <stopService+0x20>
    if(service_type == 0x02){handle = envelope_handle;}
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <stopService+0xb8>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	9301      	str	r3, [sp, #4]
	if(acc_service_deactivate(handle)){
 80038c8:	9801      	ldr	r0, [sp, #4]
 80038ca:	f7fd fc23 	bl	8001114 <acc_service_deactivate>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d019      	beq.n	8003906 <stopService+0x5e>
		acc_service_destroy(&handle);	
 80038d2:	a801      	add	r0, sp, #4
 80038d4:	f7fd ff38 	bl	8001748 <acc_service_destroy>
		data_free();
 80038d8:	f7fe fc96 	bl	8002208 <data_free>
		DBG_PRINTLN("sparse service destroyed");
 80038dc:	4821      	ldr	r0, [pc, #132]	; (8003964 <stopService+0xbc>)
 80038de:	f012 f919 	bl	8015b14 <__wrap_printf>
 80038e2:	4821      	ldr	r0, [pc, #132]	; (8003968 <stopService+0xc0>)
 80038e4:	f012 f916 	bl	8015b14 <__wrap_printf>
 80038e8:	200a      	movs	r0, #10
 80038ea:	f012 fdf5 	bl	80164d8 <putchar>
	if(far_active){
 80038ee:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <stopService+0xb8>)
 80038f0:	2344      	movs	r3, #68	; 0x44
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <stopService+0x72>
    Reg_regor(0x06, 0xFFFFFFFE);
 80038f8:	2102      	movs	r1, #2
 80038fa:	4249      	negs	r1, r1
 80038fc:	2006      	movs	r0, #6
 80038fe:	f7ff ffc7 	bl	8003890 <Reg_regor>
}
 8003902:	b002      	add	sp, #8
 8003904:	bd10      	pop	{r4, pc}
		ERR_PRINTLN("sparse service deactivation fail");
 8003906:	4819      	ldr	r0, [pc, #100]	; (800396c <stopService+0xc4>)
 8003908:	f012 f904 	bl	8015b14 <__wrap_printf>
 800390c:	4818      	ldr	r0, [pc, #96]	; (8003970 <stopService+0xc8>)
 800390e:	f012 f901 	bl	8015b14 <__wrap_printf>
 8003912:	200a      	movs	r0, #10
 8003914:	f012 fde0 	bl	80164d8 <putchar>
 8003918:	e7e9      	b.n	80038ee <stopService+0x46>
	if(acc_service_deactivate(sparse_handle_far)){
 800391a:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800391c:	f7fd fbfa 	bl	8001114 <acc_service_deactivate>
 8003920:	2800      	cmp	r0, #0
 8003922:	d013      	beq.n	800394c <stopService+0xa4>
		acc_service_destroy(&sparse_handle_far);	
 8003924:	4c0e      	ldr	r4, [pc, #56]	; (8003960 <stopService+0xb8>)
 8003926:	0020      	movs	r0, r4
 8003928:	3060      	adds	r0, #96	; 0x60
 800392a:	f7fd ff0d 	bl	8001748 <acc_service_destroy>
		data_free();
 800392e:	f7fe fc6b 	bl	8002208 <data_free>
		far_active = 0;
 8003932:	2344      	movs	r3, #68	; 0x44
 8003934:	2200      	movs	r2, #0
 8003936:	54e2      	strb	r2, [r4, r3]
		DBG_PRINTLN("far sparse service destroyed");
 8003938:	480a      	ldr	r0, [pc, #40]	; (8003964 <stopService+0xbc>)
 800393a:	f012 f8eb 	bl	8015b14 <__wrap_printf>
 800393e:	480d      	ldr	r0, [pc, #52]	; (8003974 <stopService+0xcc>)
 8003940:	f012 f8e8 	bl	8015b14 <__wrap_printf>
 8003944:	200a      	movs	r0, #10
 8003946:	f012 fdc7 	bl	80164d8 <putchar>
 800394a:	e7d5      	b.n	80038f8 <stopService+0x50>
		ERR_PRINTLN("far sparse service deactivation fail");
 800394c:	4807      	ldr	r0, [pc, #28]	; (800396c <stopService+0xc4>)
 800394e:	f012 f8e1 	bl	8015b14 <__wrap_printf>
 8003952:	4809      	ldr	r0, [pc, #36]	; (8003978 <stopService+0xd0>)
 8003954:	f012 f8de 	bl	8015b14 <__wrap_printf>
 8003958:	200a      	movs	r0, #10
 800395a:	f012 fdbd 	bl	80164d8 <putchar>
 800395e:	e7cb      	b.n	80038f8 <stopService+0x50>
 8003960:	2000020c 	.word	0x2000020c
 8003964:	0801e7b4 	.word	0x0801e7b4
 8003968:	0801e84c 	.word	0x0801e84c
 800396c:	0801e6fc 	.word	0x0801e6fc
 8003970:	0801e86c 	.word	0x0801e86c
 8003974:	0801e848 	.word	0x0801e848
 8003978:	0801e868 	.word	0x0801e868

0800397c <Reg_regand>:
void Reg_regand(uint8_t reg, uint32_t andbits){
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	0005      	movs	r5, r0
 8003980:	000c      	movs	r4, r1
	uint32_t flags = RegInt_getreg(reg); 
 8003982:	f7fe fa7f 	bl	8001e84 <RegInt_getreg>
	flags &= andbits;
 8003986:	0021      	movs	r1, r4
 8003988:	4001      	ands	r1, r0
	RegInt_setregf(reg, flags, 1);
 800398a:	2201      	movs	r2, #1
 800398c:	0028      	movs	r0, r5
 800398e:	f7ff fedd 	bl	800374c <RegInt_setregf>
}
 8003992:	bd70      	pop	{r4, r5, r6, pc}

08003994 <RegInt_setreg>:
int8_t RegInt_setreg(uint8_t reg, uint32_t val){
 8003994:	b510      	push	{r4, lr}
	int8_t success = RegInt_setregf(reg, val, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	f7ff fed8 	bl	800374c <RegInt_setregf>
}
 800399c:	bd10      	pop	{r4, pc}

0800399e <makekernel>:
void makekernel(float st_dev){
 800399e:	b570      	push	{r4, r5, r6, lr}
 80039a0:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 80039a2:	2400      	movs	r4, #0
	float norm = 0;
 80039a4:	2500      	movs	r5, #0
 80039a6:	e01c      	b.n	80039e2 <makekernel+0x44>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80039a8:	1f20      	subs	r0, r4, #4
 80039aa:	f00d fec9 	bl	8011740 <__aeabi_i2f>
 80039ae:	1c31      	adds	r1, r6, #0
 80039b0:	f00c fe9e 	bl	80106f0 <__aeabi_fdiv>
 80039b4:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 80039b6:	2380      	movs	r3, #128	; 0x80
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	18c0      	adds	r0, r0, r3
 80039bc:	f00c ffaa 	bl	8010914 <__aeabi_fmul>
 80039c0:	21fc      	movs	r1, #252	; 0xfc
 80039c2:	0589      	lsls	r1, r1, #22
 80039c4:	f00c ffa6 	bl	8010914 <__aeabi_fmul>
		kernel[i] =  expf(t);
 80039c8:	f010 fac0 	bl	8013f4c <expf>
 80039cc:	1c01      	adds	r1, r0, #0
 80039ce:	00a2      	lsls	r2, r4, #2
 80039d0:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <makekernel+0x72>)
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	61d8      	str	r0, [r3, #28]
		norm += kernel[i];
 80039d6:	1c28      	adds	r0, r5, #0
 80039d8:	f00c fcf0 	bl	80103bc <__aeabi_fadd>
 80039dc:	1c05      	adds	r5, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 80039de:	3401      	adds	r4, #1
 80039e0:	b2a4      	uxth	r4, r4
 80039e2:	2c08      	cmp	r4, #8
 80039e4:	d9e0      	bls.n	80039a8 <makekernel+0xa>
	float sclfact = 1/norm;
 80039e6:	1c29      	adds	r1, r5, #0
 80039e8:	20fe      	movs	r0, #254	; 0xfe
 80039ea:	0580      	lsls	r0, r0, #22
 80039ec:	f00c fe80 	bl	80106f0 <__aeabi_fdiv>
 80039f0:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 80039f2:	2400      	movs	r4, #0
 80039f4:	e009      	b.n	8003a0a <makekernel+0x6c>
		kernel[i] *= sclfact;
 80039f6:	00a3      	lsls	r3, r4, #2
 80039f8:	4d05      	ldr	r5, [pc, #20]	; (8003a10 <makekernel+0x72>)
 80039fa:	18ed      	adds	r5, r5, r3
 80039fc:	1c31      	adds	r1, r6, #0
 80039fe:	69e8      	ldr	r0, [r5, #28]
 8003a00:	f00c ff88 	bl	8010914 <__aeabi_fmul>
 8003a04:	61e8      	str	r0, [r5, #28]
	for(uint16_t i = 0; i < CONVKER; i++){
 8003a06:	3401      	adds	r4, #1
 8003a08:	b2a4      	uxth	r4, r4
 8003a0a:	2c08      	cmp	r4, #8
 8003a0c:	d9f3      	bls.n	80039f6 <makekernel+0x58>
}
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	2000020c 	.word	0x2000020c

08003a14 <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8003a14:	b530      	push	{r4, r5, lr}
 8003a16:	b083      	sub	sp, #12
 8003a18:	b28c      	uxth	r4, r1
 8003a1a:	ab01      	add	r3, sp, #4
 8003a1c:	8019      	strh	r1, [r3, #0]
	_conv_data = data;
 8003a1e:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <doconv+0x50>)
 8003a20:	60d8      	str	r0, [r3, #12]
	_sweeps = data_size.x1;
 8003a22:	7219      	strb	r1, [r3, #8]
	_bins = data_size.x2;
 8003a24:	0a24      	lsrs	r4, r4, #8
 8003a26:	725c      	strb	r4, [r3, #9]
	makekernel(st_dev);
 8003a28:	1c10      	adds	r0, r2, #0
 8003a2a:	f7ff ffb8 	bl	800399e <makekernel>
	for(uint16_t i = 0; i < _bins; i++){
 8003a2e:	2400      	movs	r4, #0
 8003a30:	e005      	b.n	8003a3e <doconv+0x2a>
		convolve1d(i,0);
 8003a32:	2100      	movs	r1, #0
 8003a34:	0020      	movs	r0, r4
 8003a36:	f7ff fcfd 	bl	8003434 <convolve1d>
	for(uint16_t i = 0; i < _bins; i++){
 8003a3a:	3401      	adds	r4, #1
 8003a3c:	b2a4      	uxth	r4, r4
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <doconv+0x50>)
 8003a40:	7a5b      	ldrb	r3, [r3, #9]
 8003a42:	42a3      	cmp	r3, r4
 8003a44:	d8f5      	bhi.n	8003a32 <doconv+0x1e>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8003a46:	2400      	movs	r4, #0
 8003a48:	e005      	b.n	8003a56 <doconv+0x42>
		convolve1d(j,1);
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f7ff fcf1 	bl	8003434 <convolve1d>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8003a52:	3401      	adds	r4, #1
 8003a54:	b2a4      	uxth	r4, r4
 8003a56:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <doconv+0x50>)
 8003a58:	7a1b      	ldrb	r3, [r3, #8]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d8f4      	bhi.n	8003a4a <doconv+0x36>
}
 8003a60:	b003      	add	sp, #12
 8003a62:	bd30      	pop	{r4, r5, pc}
 8003a64:	2000010c 	.word	0x2000010c

08003a68 <fftWindowing>:
{// Weighing factors are computed once before multiple use of FFT
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	46c6      	mov	lr, r8
 8003a6c:	b500      	push	{lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	0007      	movs	r7, r0
 8003a72:	000e      	movs	r6, r1
 8003a74:	4690      	mov	r8, r2
	double samplesMinusOne = ((double)samples - 1.0);
 8003a76:	0008      	movs	r0, r1
 8003a78:	f00f fc58 	bl	801332c <__aeabi_ui2d>
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <fftWindowing+0xe8>)
 8003a80:	f00f f880 	bl	8012b84 <__aeabi_dsub>
 8003a84:	9002      	str	r0, [sp, #8]
 8003a86:	9103      	str	r1, [sp, #12]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8003a88:	2400      	movs	r4, #0
 8003a8a:	0033      	movs	r3, r6
 8003a8c:	003e      	movs	r6, r7
 8003a8e:	001f      	movs	r7, r3
 8003a90:	e01d      	b.n	8003ace <fftWindowing+0x66>
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8003a92:	0065      	lsls	r5, r4, #1
 8003a94:	1975      	adds	r5, r6, r5
 8003a96:	2300      	movs	r3, #0
 8003a98:	5ee8      	ldrsh	r0, [r5, r3]
 8003a9a:	f00f fc0d 	bl	80132b8 <__aeabi_i2d>
 8003a9e:	9a00      	ldr	r2, [sp, #0]
 8003aa0:	9b01      	ldr	r3, [sp, #4]
 8003aa2:	f00e fdfd 	bl	80126a0 <__aeabi_dmul>
 8003aa6:	f00f fbd1 	bl	801324c <__aeabi_d2iz>
 8003aaa:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8003aac:	1c65      	adds	r5, r4, #1
 8003aae:	1b7d      	subs	r5, r7, r5
 8003ab0:	006d      	lsls	r5, r5, #1
 8003ab2:	1975      	adds	r5, r6, r5
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	5ee8      	ldrsh	r0, [r5, r3]
 8003ab8:	f00f fbfe 	bl	80132b8 <__aeabi_i2d>
 8003abc:	9a00      	ldr	r2, [sp, #0]
 8003abe:	9b01      	ldr	r3, [sp, #4]
 8003ac0:	f00e fdee 	bl	80126a0 <__aeabi_dmul>
 8003ac4:	f00f fbc2 	bl	801324c <__aeabi_d2iz>
 8003ac8:	8028      	strh	r0, [r5, #0]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8003aca:	3401      	adds	r4, #1
 8003acc:	b2a4      	uxth	r4, r4
 8003ace:	087b      	lsrs	r3, r7, #1
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d938      	bls.n	8003b46 <fftWindowing+0xde>
		double indexMinusOne = (double)i;
 8003ad4:	0020      	movs	r0, r4
 8003ad6:	f00f fc29 	bl	801332c <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8003ada:	9a02      	ldr	r2, [sp, #8]
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	f00e f9d5 	bl	8011e8c <__aeabi_ddiv>
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8003ae2:	4a1c      	ldr	r2, [pc, #112]	; (8003b54 <fftWindowing+0xec>)
 8003ae4:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <fftWindowing+0xf0>)
 8003ae6:	f00e fddb 	bl	80126a0 <__aeabi_dmul>
 8003aea:	f010 f931 	bl	8013d50 <cos>
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <fftWindowing+0xf4>)
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <fftWindowing+0xf8>)
 8003af2:	f00e fdd5 	bl	80126a0 <__aeabi_dmul>
 8003af6:	0002      	movs	r2, r0
 8003af8:	000b      	movs	r3, r1
 8003afa:	481a      	ldr	r0, [pc, #104]	; (8003b64 <fftWindowing+0xfc>)
 8003afc:	491a      	ldr	r1, [pc, #104]	; (8003b68 <fftWindowing+0x100>)
 8003afe:	f00f f841 	bl	8012b84 <__aeabi_dsub>
 8003b02:	9000      	str	r0, [sp, #0]
 8003b04:	9101      	str	r1, [sp, #4]
		if (dir == FFT_FORWARD) {
 8003b06:	4643      	mov	r3, r8
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d0c2      	beq.n	8003a92 <fftWindowing+0x2a>
			vData[i] = (int16_t) vData[i]/weighingFactor;
 8003b0c:	0065      	lsls	r5, r4, #1
 8003b0e:	1975      	adds	r5, r6, r5
 8003b10:	2300      	movs	r3, #0
 8003b12:	5ee8      	ldrsh	r0, [r5, r3]
 8003b14:	f00f fbd0 	bl	80132b8 <__aeabi_i2d>
 8003b18:	9a00      	ldr	r2, [sp, #0]
 8003b1a:	9b01      	ldr	r3, [sp, #4]
 8003b1c:	f00e f9b6 	bl	8011e8c <__aeabi_ddiv>
 8003b20:	f00f fb94 	bl	801324c <__aeabi_d2iz>
 8003b24:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]/weighingFactor;
 8003b26:	1c65      	adds	r5, r4, #1
 8003b28:	1b7d      	subs	r5, r7, r5
 8003b2a:	006d      	lsls	r5, r5, #1
 8003b2c:	1975      	adds	r5, r6, r5
 8003b2e:	2300      	movs	r3, #0
 8003b30:	5ee8      	ldrsh	r0, [r5, r3]
 8003b32:	f00f fbc1 	bl	80132b8 <__aeabi_i2d>
 8003b36:	9a00      	ldr	r2, [sp, #0]
 8003b38:	9b01      	ldr	r3, [sp, #4]
 8003b3a:	f00e f9a7 	bl	8011e8c <__aeabi_ddiv>
 8003b3e:	f00f fb85 	bl	801324c <__aeabi_d2iz>
 8003b42:	8028      	strh	r0, [r5, #0]
 8003b44:	e7c1      	b.n	8003aca <fftWindowing+0x62>
}
 8003b46:	b004      	add	sp, #16
 8003b48:	bc04      	pop	{r2}
 8003b4a:	4690      	mov	r8, r2
 8003b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	3ff00000 	.word	0x3ff00000
 8003b54:	5474a168 	.word	0x5474a168
 8003b58:	401921fb 	.word	0x401921fb
 8003b5c:	d70a3d71 	.word	0xd70a3d71
 8003b60:	3fdd70a3 	.word	0x3fdd70a3
 8003b64:	147ae148 	.word	0x147ae148
 8003b68:	3fe147ae 	.word	0x3fe147ae

08003b6c <fftComplexToMagnitude>:
{	// vM is half the size of vReal and vImag
 8003b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6e:	46d6      	mov	lr, sl
 8003b70:	464f      	mov	r7, r9
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b083      	sub	sp, #12
 8003b76:	4682      	mov	sl, r0
 8003b78:	4689      	mov	r9, r1
 8003b7a:	0016      	movs	r6, r2
	for (int16_t i = 0; i < samples; i++) {
 8003b7c:	2400      	movs	r4, #0
 8003b7e:	e01e      	b.n	8003bbe <fftComplexToMagnitude+0x52>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 8003b80:	0067      	lsls	r7, r4, #1
 8003b82:	4653      	mov	r3, sl
 8003b84:	19dd      	adds	r5, r3, r7
 8003b86:	2300      	movs	r3, #0
 8003b88:	5ee8      	ldrsh	r0, [r5, r3]
 8003b8a:	f00d fdd9 	bl	8011740 <__aeabi_i2f>
 8003b8e:	1c01      	adds	r1, r0, #0
 8003b90:	f00c fec0 	bl	8010914 <__aeabi_fmul>
 8003b94:	9001      	str	r0, [sp, #4]
 8003b96:	464b      	mov	r3, r9
 8003b98:	5fd8      	ldrsh	r0, [r3, r7]
 8003b9a:	f00d fdd1 	bl	8011740 <__aeabi_i2f>
 8003b9e:	1c01      	adds	r1, r0, #0
 8003ba0:	f00c feb8 	bl	8010914 <__aeabi_fmul>
 8003ba4:	1c01      	adds	r1, r0, #0
 8003ba6:	9801      	ldr	r0, [sp, #4]
 8003ba8:	f00c fc08 	bl	80103bc <__aeabi_fadd>
 8003bac:	f00f fbf0 	bl	8013390 <__aeabi_f2d>
 8003bb0:	f010 f96c 	bl	8013e8c <sqrt>
 8003bb4:	f00f fb4a 	bl	801324c <__aeabi_d2iz>
 8003bb8:	8028      	strh	r0, [r5, #0]
	for (int16_t i = 0; i < samples; i++) {
 8003bba:	3401      	adds	r4, #1
 8003bbc:	b224      	sxth	r4, r4
 8003bbe:	42b4      	cmp	r4, r6
 8003bc0:	dbde      	blt.n	8003b80 <fftComplexToMagnitude+0x14>
}
 8003bc2:	b003      	add	sp, #12
 8003bc4:	bc0c      	pop	{r2, r3}
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	469a      	mov	sl, r3
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bcc <fftCompute>:
{	
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	46de      	mov	lr, fp
 8003bd0:	4657      	mov	r7, sl
 8003bd2:	464e      	mov	r6, r9
 8003bd4:	4645      	mov	r5, r8
 8003bd6:	b5e0      	push	{r5, r6, r7, lr}
 8003bd8:	b093      	sub	sp, #76	; 0x4c
 8003bda:	0007      	movs	r7, r0
 8003bdc:	468a      	mov	sl, r1
 8003bde:	4693      	mov	fp, r2
 8003be0:	9310      	str	r3, [sp, #64]	; 0x40
	uint8_t power = fftExponent(samples);
 8003be2:	b210      	sxth	r0, r2
 8003be4:	f7fe f8dc 	bl	8001da0 <fftExponent>
 8003be8:	9011      	str	r0, [sp, #68]	; 0x44
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8003bea:	2500      	movs	r5, #0
	uint16_t j = 0;
 8003bec:	2400      	movs	r4, #0
 8003bee:	465e      	mov	r6, fp
 8003bf0:	e01d      	b.n	8003c2e <fftCompute+0x62>
			fftSwap(&vReal[i], &vReal[j]);
 8003bf2:	006b      	lsls	r3, r5, #1
 8003bf4:	4698      	mov	r8, r3
 8003bf6:	0063      	lsls	r3, r4, #1
 8003bf8:	4699      	mov	r9, r3
 8003bfa:	18f9      	adds	r1, r7, r3
 8003bfc:	4643      	mov	r3, r8
 8003bfe:	18f8      	adds	r0, r7, r3
 8003c00:	f7fe f8c6 	bl	8001d90 <fftSwap>
			if(dir==FFT_REVERSE)
 8003c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <fftCompute+0x6c>
				fftSwap(&vImag[i], &vImag[j]);
 8003c0a:	4653      	mov	r3, sl
 8003c0c:	4652      	mov	r2, sl
 8003c0e:	444a      	add	r2, r9
 8003c10:	0011      	movs	r1, r2
 8003c12:	4443      	add	r3, r8
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fe f8bb 	bl	8001d90 <fftSwap>
 8003c1a:	e00d      	b.n	8003c38 <fftCompute+0x6c>
			j -= k;
 8003c1c:	1ae4      	subs	r4, r4, r3
 8003c1e:	b2a4      	uxth	r4, r4
			k >>= 1;
 8003c20:	085b      	lsrs	r3, r3, #1
		while (k <= j) {
 8003c22:	429c      	cmp	r4, r3
 8003c24:	d2fa      	bcs.n	8003c1c <fftCompute+0x50>
		j += k;
 8003c26:	18e4      	adds	r4, r4, r3
 8003c28:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	b2ad      	uxth	r5, r5
 8003c2e:	1e73      	subs	r3, r6, #1
 8003c30:	429d      	cmp	r5, r3
 8003c32:	da03      	bge.n	8003c3c <fftCompute+0x70>
		if (i < j) {
 8003c34:	42ac      	cmp	r4, r5
 8003c36:	d8dc      	bhi.n	8003bf2 <fftCompute+0x26>
		uint16_t k = (samples >> 1);
 8003c38:	0873      	lsrs	r3, r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <fftCompute+0x56>
	for (uint8_t l = 0; (l < power); l++) {
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4699      	mov	r9, r3
	uint16_t l2 = 1;
 8003c40:	3301      	adds	r3, #1
 8003c42:	0019      	movs	r1, r3
	double c2 = 0.0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	930e      	str	r3, [sp, #56]	; 0x38
 8003c48:	930d      	str	r3, [sp, #52]	; 0x34
	double c1 = -1.0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4c7f      	ldr	r4, [pc, #508]	; (8003e4c <fftCompute+0x280>)
 8003c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c50:	940b      	str	r4, [sp, #44]	; 0x2c
 8003c52:	464b      	mov	r3, r9
 8003c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c56:	9608      	str	r6, [sp, #32]
 8003c58:	46d3      	mov	fp, sl
 8003c5a:	e0d3      	b.n	8003e04 <fftCompute+0x238>
					uint16_t i1 = i + l1;
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	195c      	adds	r4, r3, r5
 8003c60:	b2a4      	uxth	r4, r4
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8003c62:	0064      	lsls	r4, r4, #1
 8003c64:	46a0      	mov	r8, r4
 8003c66:	44d8      	add	r8, fp
 8003c68:	4643      	mov	r3, r8
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	5e18      	ldrsh	r0, [r3, r0]
 8003c6e:	f00f fb23 	bl	80132b8 <__aeabi_i2d>
 8003c72:	9a04      	ldr	r2, [sp, #16]
 8003c74:	9b05      	ldr	r3, [sp, #20]
 8003c76:	9002      	str	r0, [sp, #8]
 8003c78:	9103      	str	r1, [sp, #12]
 8003c7a:	f00e fd11 	bl	80126a0 <__aeabi_dmul>
 8003c7e:	9000      	str	r0, [sp, #0]
 8003c80:	9101      	str	r1, [sp, #4]
 8003c82:	4454      	add	r4, sl
 8003c84:	2300      	movs	r3, #0
 8003c86:	5ee0      	ldrsh	r0, [r4, r3]
 8003c88:	f00f fb16 	bl	80132b8 <__aeabi_i2d>
 8003c8c:	0006      	movs	r6, r0
 8003c8e:	000f      	movs	r7, r1
 8003c90:	9a06      	ldr	r2, [sp, #24]
 8003c92:	9b07      	ldr	r3, [sp, #28]
 8003c94:	f00e fd04 	bl	80126a0 <__aeabi_dmul>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	000b      	movs	r3, r1
 8003c9c:	9800      	ldr	r0, [sp, #0]
 8003c9e:	9901      	ldr	r1, [sp, #4]
 8003ca0:	f00e ff70 	bl	8012b84 <__aeabi_dsub>
 8003ca4:	9000      	str	r0, [sp, #0]
 8003ca6:	9101      	str	r1, [sp, #4]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8003ca8:	9a04      	ldr	r2, [sp, #16]
 8003caa:	9b05      	ldr	r3, [sp, #20]
 8003cac:	0030      	movs	r0, r6
 8003cae:	0039      	movs	r1, r7
 8003cb0:	f00e fcf6 	bl	80126a0 <__aeabi_dmul>
 8003cb4:	0006      	movs	r6, r0
 8003cb6:	000f      	movs	r7, r1
 8003cb8:	9a06      	ldr	r2, [sp, #24]
 8003cba:	9b07      	ldr	r3, [sp, #28]
 8003cbc:	9802      	ldr	r0, [sp, #8]
 8003cbe:	9903      	ldr	r1, [sp, #12]
 8003cc0:	f00e fcee 	bl	80126a0 <__aeabi_dmul>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	000b      	movs	r3, r1
 8003cc8:	0030      	movs	r0, r6
 8003cca:	0039      	movs	r1, r7
 8003ccc:	f00d fdc2 	bl	8011854 <__aeabi_dadd>
 8003cd0:	9002      	str	r0, [sp, #8]
 8003cd2:	9103      	str	r1, [sp, #12]
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8003cd4:	006e      	lsls	r6, r5, #1
 8003cd6:	465b      	mov	r3, fp
 8003cd8:	199f      	adds	r7, r3, r6
 8003cda:	2300      	movs	r3, #0
 8003cdc:	5ef8      	ldrsh	r0, [r7, r3]
 8003cde:	f00f faeb 	bl	80132b8 <__aeabi_i2d>
 8003ce2:	9a00      	ldr	r2, [sp, #0]
 8003ce4:	9b01      	ldr	r3, [sp, #4]
 8003ce6:	f00e ff4d 	bl	8012b84 <__aeabi_dsub>
 8003cea:	f00f faaf 	bl	801324c <__aeabi_d2iz>
 8003cee:	4643      	mov	r3, r8
 8003cf0:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8003cf2:	4456      	add	r6, sl
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	5ef0      	ldrsh	r0, [r6, r3]
 8003cf8:	f00f fade 	bl	80132b8 <__aeabi_i2d>
 8003cfc:	9a02      	ldr	r2, [sp, #8]
 8003cfe:	9b03      	ldr	r3, [sp, #12]
 8003d00:	f00e ff40 	bl	8012b84 <__aeabi_dsub>
 8003d04:	f00f faa2 	bl	801324c <__aeabi_d2iz>
 8003d08:	8020      	strh	r0, [r4, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	5ef8      	ldrsh	r0, [r7, r3]
 8003d0e:	f00f fad3 	bl	80132b8 <__aeabi_i2d>
 8003d12:	9a00      	ldr	r2, [sp, #0]
 8003d14:	9b01      	ldr	r3, [sp, #4]
 8003d16:	f00d fd9d 	bl	8011854 <__aeabi_dadd>
 8003d1a:	f00f fa97 	bl	801324c <__aeabi_d2iz>
 8003d1e:	8038      	strh	r0, [r7, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8003d20:	2300      	movs	r3, #0
 8003d22:	5ef0      	ldrsh	r0, [r6, r3]
 8003d24:	f00f fac8 	bl	80132b8 <__aeabi_i2d>
 8003d28:	9a02      	ldr	r2, [sp, #8]
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	f00d fd92 	bl	8011854 <__aeabi_dadd>
 8003d30:	f00f fa8c 	bl	801324c <__aeabi_d2iz>
 8003d34:	8030      	strh	r0, [r6, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 8003d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d38:	469c      	mov	ip, r3
 8003d3a:	4465      	add	r5, ip
 8003d3c:	b2ad      	uxth	r5, r5
 8003d3e:	9b08      	ldr	r3, [sp, #32]
 8003d40:	429d      	cmp	r5, r3
 8003d42:	d38b      	bcc.n	8003c5c <fftCompute+0x90>
 8003d44:	46c8      	mov	r8, r9
			 double z = ((u1 * c1) - (u2 * c2));
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	9b05      	ldr	r3, [sp, #20]
 8003d4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d4e:	f00e fca7 	bl	80126a0 <__aeabi_dmul>
 8003d52:	0004      	movs	r4, r0
 8003d54:	000d      	movs	r5, r1
 8003d56:	9a06      	ldr	r2, [sp, #24]
 8003d58:	9b07      	ldr	r3, [sp, #28]
 8003d5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003d5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d5e:	f00e fc9f 	bl	80126a0 <__aeabi_dmul>
 8003d62:	0002      	movs	r2, r0
 8003d64:	000b      	movs	r3, r1
 8003d66:	0020      	movs	r0, r4
 8003d68:	0029      	movs	r1, r5
 8003d6a:	f00e ff0b 	bl	8012b84 <__aeabi_dsub>
 8003d6e:	0006      	movs	r6, r0
 8003d70:	000f      	movs	r7, r1
			 u2 = ((u1 * c2) + (u2 * c1));
 8003d72:	9a04      	ldr	r2, [sp, #16]
 8003d74:	9b05      	ldr	r3, [sp, #20]
 8003d76:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003d78:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d7a:	f00e fc91 	bl	80126a0 <__aeabi_dmul>
 8003d7e:	0004      	movs	r4, r0
 8003d80:	000d      	movs	r5, r1
 8003d82:	9a06      	ldr	r2, [sp, #24]
 8003d84:	9b07      	ldr	r3, [sp, #28]
 8003d86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d8a:	f00e fc89 	bl	80126a0 <__aeabi_dmul>
 8003d8e:	0002      	movs	r2, r0
 8003d90:	000b      	movs	r3, r1
 8003d92:	0020      	movs	r0, r4
 8003d94:	0029      	movs	r1, r5
 8003d96:	f00d fd5d 	bl	8011854 <__aeabi_dadd>
 8003d9a:	9006      	str	r0, [sp, #24]
 8003d9c:	9107      	str	r1, [sp, #28]
		for (j = 0; j < l1; j++) {
 8003d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003da0:	3301      	adds	r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	930c      	str	r3, [sp, #48]	; 0x30
			 u1 = z;
 8003da6:	9604      	str	r6, [sp, #16]
 8003da8:	9705      	str	r7, [sp, #20]
		for (j = 0; j < l1; j++) {
 8003daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dac:	4543      	cmp	r3, r8
 8003dae:	d202      	bcs.n	8003db6 <fftCompute+0x1ea>
			 for (uint16_t i = j; i < samples; i += l2) {
 8003db0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db2:	46c1      	mov	r9, r8
 8003db4:	e7c3      	b.n	8003d3e <fftCompute+0x172>
 8003db6:	465f      	mov	r7, fp
 8003db8:	46d3      	mov	fp, sl
		c2 = sqrt((1.0 - c1) / 2.0);
 8003dba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	4923      	ldr	r1, [pc, #140]	; (8003e50 <fftCompute+0x284>)
 8003dc2:	f00e fedf 	bl	8012b84 <__aeabi_dsub>
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <fftCompute+0x288>)
 8003dca:	f00e fc69 	bl	80126a0 <__aeabi_dmul>
 8003dce:	f010 f85d 	bl	8013e8c <sqrt>
 8003dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8003dd4:	910d      	str	r1, [sp, #52]	; 0x34
		if (dir == FFT_FORWARD) {
 8003dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d028      	beq.n	8003e2e <fftCompute+0x262>
		c1 = sqrt((1.0 + c1) / 2.0);
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4b1c      	ldr	r3, [pc, #112]	; (8003e50 <fftCompute+0x284>)
 8003de0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003de2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003de4:	f00d fd36 	bl	8011854 <__aeabi_dadd>
 8003de8:	2200      	movs	r2, #0
 8003dea:	4b1a      	ldr	r3, [pc, #104]	; (8003e54 <fftCompute+0x288>)
 8003dec:	f00e fc58 	bl	80126a0 <__aeabi_dmul>
 8003df0:	f010 f84c 	bl	8013e8c <sqrt>
 8003df4:	900a      	str	r0, [sp, #40]	; 0x28
 8003df6:	910b      	str	r1, [sp, #44]	; 0x2c
	for (uint8_t l = 0; (l < power); l++) {
 8003df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	930f      	str	r3, [sp, #60]	; 0x3c
		l2 <<= 1;
 8003e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e02:	0019      	movs	r1, r3
	for (uint8_t l = 0; (l < power); l++) {
 8003e04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d217      	bcs.n	8003e3c <fftCompute+0x270>
		l2 <<= 1;
 8003e0c:	004b      	lsls	r3, r1, #1
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	9309      	str	r3, [sp, #36]	; 0x24
		double u2 = 0.0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	2400      	movs	r4, #0
 8003e16:	9306      	str	r3, [sp, #24]
 8003e18:	9407      	str	r4, [sp, #28]
		double u1 = 1.0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4c0c      	ldr	r4, [pc, #48]	; (8003e50 <fftCompute+0x284>)
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	9405      	str	r4, [sp, #20]
		for (j = 0; j < l1; j++) {
 8003e22:	2300      	movs	r3, #0
 8003e24:	930c      	str	r3, [sp, #48]	; 0x30
 8003e26:	4688      	mov	r8, r1
 8003e28:	46da      	mov	sl, fp
 8003e2a:	46bb      	mov	fp, r7
 8003e2c:	e7bd      	b.n	8003daa <fftCompute+0x1de>
			c2 = -c2;
 8003e2e:	000b      	movs	r3, r1
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	0612      	lsls	r2, r2, #24
 8003e34:	4694      	mov	ip, r2
 8003e36:	4463      	add	r3, ip
 8003e38:	930d      	str	r3, [sp, #52]	; 0x34
 8003e3a:	e7cf      	b.n	8003ddc <fftCompute+0x210>
}
 8003e3c:	b013      	add	sp, #76	; 0x4c
 8003e3e:	bc3c      	pop	{r2, r3, r4, r5}
 8003e40:	4690      	mov	r8, r2
 8003e42:	4699      	mov	r9, r3
 8003e44:	46a2      	mov	sl, r4
 8003e46:	46ab      	mov	fp, r5
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	bff00000 	.word	0xbff00000
 8003e50:	3ff00000 	.word	0x3ff00000
 8003e54:	3fe00000 	.word	0x3fe00000

08003e58 <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	46de      	mov	lr, fp
 8003e5c:	4657      	mov	r7, sl
 8003e5e:	464e      	mov	r6, r9
 8003e60:	4645      	mov	r5, r8
 8003e62:	b5e0      	push	{r5, r6, r7, lr}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	0006      	movs	r6, r0
 8003e6a:	b28b      	uxth	r3, r1
 8003e6c:	81b9      	strh	r1, [r7, #12]
	uint8_t sweeps = data_size.x1;
 8003e6e:	b2ca      	uxtb	r2, r1
 8003e70:	4690      	mov	r8, r2
	uint8_t bins = data_size.x2;
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	603b      	str	r3, [r7, #0]
	float scales[bins];
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	330a      	adds	r3, #10
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	466a      	mov	r2, sp
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	469d      	mov	sp, r3
 8003e84:	46eb      	mov	fp, sp
	int16_t real[sweeps];
 8003e86:	4643      	mov	r3, r8
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	08db      	lsrs	r3, r3, #3
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	466a      	mov	r2, sp
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	4695      	mov	sp, r2
 8003e96:	60ba      	str	r2, [r7, #8]
	int16_t imag[sweeps];
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	469d      	mov	sp, r3
 8003e9c:	46e9      	mov	r9, sp
	for(uint16_t i = 0; i<bins; i++){
 8003e9e:	2400      	movs	r4, #0
 8003ea0:	e04d      	b.n	8003f3e <dofft+0xe6>
		  real[j] = data[j][i];
 8003ea2:	009a      	lsls	r2, r3, #2
 8003ea4:	5992      	ldr	r2, [r2, r6]
 8003ea6:	0061      	lsls	r1, r4, #1
 8003ea8:	5e89      	ldrsh	r1, [r1, r2]
 8003eaa:	005a      	lsls	r2, r3, #1
 8003eac:	68b8      	ldr	r0, [r7, #8]
 8003eae:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	b295      	uxth	r5, r2
 8003eb8:	42ab      	cmp	r3, r5
 8003eba:	d3f2      	bcc.n	8003ea2 <dofft+0x4a>
		for (uint16_t j = 0; j < sweeps; j++) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e005      	b.n	8003ecc <dofft+0x74>
		  imag[j] = 0;
 8003ec0:	005a      	lsls	r2, r3, #1
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4648      	mov	r0, r9
 8003ec6:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 8003ec8:	3301      	adds	r3, #1
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	42ab      	cmp	r3, r5
 8003ece:	d3f7      	bcc.n	8003ec0 <dofft+0x68>
		scales[i] = fftRangeScaling(real, sweeps);
 8003ed0:	0029      	movs	r1, r5
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fd ff6c 	bl	8001db4 <fftRangeScaling>
 8003edc:	00a3      	lsls	r3, r4, #2
 8003ede:	465a      	mov	r2, fp
 8003ee0:	5098      	str	r0, [r3, r2]
		fftWindowing(real, sweeps, FFT_FORWARD);
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	0029      	movs	r1, r5
 8003ee6:	4650      	mov	r0, sl
 8003ee8:	f7ff fdbe 	bl	8003a68 <fftWindowing>
		fftCompute(real, imag, sweeps, FFT_FORWARD);
 8003eec:	2301      	movs	r3, #1
 8003eee:	002a      	movs	r2, r5
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	4650      	mov	r0, sl
 8003ef4:	f7ff fe6a 	bl	8003bcc <fftCompute>
		fftComplexToMagnitude(real, imag, sweeps);
 8003ef8:	002a      	movs	r2, r5
 8003efa:	4649      	mov	r1, r9
 8003efc:	4650      	mov	r0, sl
 8003efe:	f7ff fe35 	bl	8003b6c <fftComplexToMagnitude>
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8003f02:	2200      	movs	r2, #0
 8003f04:	e00a      	b.n	8003f1c <dofft+0xc4>
		  data[j][i] = real[j];
 8003f06:	0093      	lsls	r3, r2, #2
 8003f08:	5999      	ldr	r1, [r3, r6]
 8003f0a:	0063      	lsls	r3, r4, #1
 8003f0c:	607b      	str	r3, [r7, #4]
 8003f0e:	0050      	lsls	r0, r2, #1
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	5ac0      	ldrh	r0, [r0, r3]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	52c8      	strh	r0, [r1, r3]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8003f18:	3201      	adds	r2, #1
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3f0      	bcc.n	8003f06 <dofft+0xae>
 8003f24:	e007      	b.n	8003f36 <dofft+0xde>
		  data[j][i] = 0;
 8003f26:	009a      	lsls	r2, r3, #2
 8003f28:	5992      	ldr	r2, [r2, r6]
 8003f2a:	0061      	lsls	r1, r4, #1
 8003f2c:	1852      	adds	r2, r2, r1
 8003f2e:	2100      	movs	r1, #0
 8003f30:	8011      	strh	r1, [r2, #0]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8003f32:	3301      	adds	r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	42ab      	cmp	r3, r5
 8003f38:	d3f5      	bcc.n	8003f26 <dofft+0xce>
	for(uint16_t i = 0; i<bins; i++){
 8003f3a:	3401      	adds	r4, #1
 8003f3c:	b2a4      	uxth	r4, r4
 8003f3e:	883b      	ldrh	r3, [r7, #0]
 8003f40:	469a      	mov	sl, r3
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d201      	bcs.n	8003f4a <dofft+0xf2>
		for (uint16_t j = 0; j < sweeps; j++) {
 8003f46:	2300      	movs	r3, #0
 8003f48:	e7b4      	b.n	8003eb4 <dofft+0x5c>
	float min_scale = scales[0];
 8003f4a:	465b      	mov	r3, fp
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	607b      	str	r3, [r7, #4]
	for(uint16_t i =1; i<bins; i++){
 8003f50:	2501      	movs	r5, #1
 8003f52:	e001      	b.n	8003f58 <dofft+0x100>
 8003f54:	3501      	adds	r5, #1
 8003f56:	b2ad      	uxth	r5, r5
 8003f58:	4555      	cmp	r5, sl
 8003f5a:	d20a      	bcs.n	8003f72 <dofft+0x11a>
		if (scales[i] < min_scale){
 8003f5c:	00ab      	lsls	r3, r5, #2
 8003f5e:	465a      	mov	r2, fp
 8003f60:	589c      	ldr	r4, [r3, r2]
 8003f62:	1c21      	adds	r1, r4, #0
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f00d f9e1 	bl	801132c <__aeabi_fcmpgt>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0f2      	beq.n	8003f54 <dofft+0xfc>
			min_scale = scales[i];		
 8003f6e:	607c      	str	r4, [r7, #4]
 8003f70:	e7f0      	b.n	8003f54 <dofft+0xfc>
	for(uint16_t i =0; i<bins; i++){
 8003f72:	2300      	movs	r3, #0
 8003f74:	4699      	mov	r9, r3
 8003f76:	e017      	b.n	8003fa8 <dofft+0x150>
			data[j][i] *= scaling_factor;
 8003f78:	00a3      	lsls	r3, r4, #2
 8003f7a:	599d      	ldr	r5, [r3, r6]
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	18ed      	adds	r5, r5, r3
 8003f82:	8828      	ldrh	r0, [r5, #0]
 8003f84:	f00d fbdc 	bl	8011740 <__aeabi_i2f>
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	f00c fcc3 	bl	8010914 <__aeabi_fmul>
 8003f8e:	f00d fa01 	bl	8011394 <__aeabi_f2uiz>
 8003f92:	8028      	strh	r0, [r5, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 8003f94:	3401      	adds	r4, #1
 8003f96:	b2a4      	uxth	r4, r4
 8003f98:	4643      	mov	r3, r8
 8003f9a:	085b      	lsrs	r3, r3, #1
 8003f9c:	429c      	cmp	r4, r3
 8003f9e:	d3eb      	bcc.n	8003f78 <dofft+0x120>
	for(uint16_t i =0; i<bins; i++){
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	4699      	mov	r9, r3
 8003fa8:	45d1      	cmp	r9, sl
 8003faa:	d209      	bcs.n	8003fc0 <dofft+0x168>
		float scaling_factor = min_scale/scales[i]; 
 8003fac:	464b      	mov	r3, r9
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	465a      	mov	r2, fp
 8003fb2:	5899      	ldr	r1, [r3, r2]
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f00c fb9b 	bl	80106f0 <__aeabi_fdiv>
 8003fba:	60b8      	str	r0, [r7, #8]
		for(uint16_t j = 0; j < sweeps/2; j++){
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	e7eb      	b.n	8003f98 <dofft+0x140>
}
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b005      	add	sp, #20
 8003fc6:	bc3c      	pop	{r2, r3, r4, r5}
 8003fc8:	4690      	mov	r8, r2
 8003fca:	4699      	mov	r9, r3
 8003fcc:	46a2      	mov	sl, r4
 8003fce:	46ab      	mov	fp, r5
 8003fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fd2 <evalData>:
void evalData(void){
 8003fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fd4:	46de      	mov	lr, fp
 8003fd6:	4657      	mov	r7, sl
 8003fd8:	464e      	mov	r6, r9
 8003fda:	4645      	mov	r5, r8
 8003fdc:	b5e0      	push	{r5, r6, r7, lr}
 8003fde:	b08b      	sub	sp, #44	; 0x2c
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8003fe0:	4c86      	ldr	r4, [pc, #536]	; (80041fc <evalData+0x22a>)
 8003fe2:	4987      	ldr	r1, [pc, #540]	; (8004200 <evalData+0x22e>)
 8003fe4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003fe6:	f00c fc95 	bl	8010914 <__aeabi_fmul>
 8003fea:	f00d f9d3 	bl	8011394 <__aeabi_f2uiz>
 8003fee:	b286      	uxth	r6, r0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8003ff0:	4983      	ldr	r1, [pc, #524]	; (8004200 <evalData+0x22e>)
 8003ff2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003ff4:	f00c fc8e 	bl	8010914 <__aeabi_fmul>
 8003ff8:	f00d f9cc 	bl	8011394 <__aeabi_f2uiz>
 8003ffc:	b285      	uxth	r5, r0
	float sweep_rate = sparse_metadata.sweep_rate;
 8003ffe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004000:	4699      	mov	r9, r3
	uint8v2_t data_size = {sweeps,bins};
 8004002:	ab09      	add	r3, sp, #36	; 0x24
 8004004:	2268      	movs	r2, #104	; 0x68
 8004006:	5aa2      	ldrh	r2, [r4, r2]
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	226a      	movs	r2, #106	; 0x6a
 800400c:	5aa2      	ldrh	r2, [r4, r2]
 800400e:	705a      	strb	r2, [r3, #1]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8004010:	20d4      	movs	r0, #212	; 0xd4
 8004012:	f7fd ff37 	bl	8001e84 <RegInt_getreg>
 8004016:	f00d fbdd 	bl	80117d4 <__aeabi_ui2f>
 800401a:	4979      	ldr	r1, [pc, #484]	; (8004200 <evalData+0x22e>)
 800401c:	f00c fb68 	bl	80106f0 <__aeabi_fdiv>
 8004020:	9003      	str	r0, [sp, #12]
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 8004022:	20d8      	movs	r0, #216	; 0xd8
 8004024:	f7fd ff2e 	bl	8001e84 <RegInt_getreg>
 8004028:	f00d fbd4 	bl	80117d4 <__aeabi_ui2f>
 800402c:	4974      	ldr	r1, [pc, #464]	; (8004200 <evalData+0x22e>)
 800402e:	f00c fb5f 	bl	80106f0 <__aeabi_fdiv>
 8004032:	9004      	str	r0, [sp, #16]
	uint32_t mode = RegInt_getreg(0xD6);
 8004034:	20d6      	movs	r0, #214	; 0xd6
 8004036:	f7fd ff25 	bl	8001e84 <RegInt_getreg>
 800403a:	0004      	movs	r4, r0
	uint8_t roi_radius = RegInt_getreg(0xD7);
 800403c:	20d7      	movs	r0, #215	; 0xd7
 800403e:	f7fd ff21 	bl	8001e84 <RegInt_getreg>
 8004042:	b2c3      	uxtb	r3, r0
 8004044:	4698      	mov	r8, r3
	uint32_t band_filt = RegInt_getreg(0xD9);
 8004046:	20d9      	movs	r0, #217	; 0xd9
 8004048:	f7fd ff1c 	bl	8001e84 <RegInt_getreg>
 800404c:	0007      	movs	r7, r0
	DBG_PRINTINT(mode);
 800404e:	4b6d      	ldr	r3, [pc, #436]	; (8004204 <evalData+0x232>)
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <evalData+0x236>)
 8004054:	0022      	movs	r2, r4
 8004056:	496d      	ldr	r1, [pc, #436]	; (800420c <evalData+0x23a>)
 8004058:	486d      	ldr	r0, [pc, #436]	; (8004210 <evalData+0x23e>)
 800405a:	f011 fd5b 	bl	8015b14 <__wrap_printf>
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 800405e:	07e3      	lsls	r3, r4, #31
 8004060:	d411      	bmi.n	8004086 <evalData+0xb4>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004062:	07a3      	lsls	r3, r4, #30
 8004064:	d415      	bmi.n	8004092 <evalData+0xc0>
	float min_scale = 1.0f;
 8004066:	23fe      	movs	r3, #254	; 0xfe
 8004068:	059b      	lsls	r3, r3, #22
 800406a:	9302      	str	r3, [sp, #8]
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 800406c:	06a3      	lsls	r3, r4, #26
 800406e:	d417      	bmi.n	80040a0 <evalData+0xce>
	if(mode & 0x00000004){
 8004070:	0763      	lsls	r3, r4, #29
 8004072:	d41c      	bmi.n	80040ae <evalData+0xdc>
	if(mode & 0x00000008){
 8004074:	0723      	lsls	r3, r4, #28
 8004076:	d429      	bmi.n	80040cc <evalData+0xfa>
}
 8004078:	b00b      	add	sp, #44	; 0x2c
 800407a:	bc3c      	pop	{r2, r3, r4, r5}
 800407c:	4690      	mov	r8, r2
 800407e:	4699      	mov	r9, r3
 8004080:	46a2      	mov	sl, r4
 8004082:	46ab      	mov	fp, r5
 8004084:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <evalData+0x22a>)
 8004088:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800408a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800408c:	f7fd fe3e 	bl	8001d0c <dcdatarm>
 8004090:	e7e7      	b.n	8004062 <evalData+0x90>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004092:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <evalData+0x22a>)
 8004094:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8004096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004098:	f7ff fede 	bl	8003e58 <dofft>
 800409c:	9002      	str	r0, [sp, #8]
 800409e:	e7e5      	b.n	800406c <evalData+0x9a>
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 80040a0:	4b56      	ldr	r3, [pc, #344]	; (80041fc <evalData+0x22a>)
 80040a2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80040a4:	003a      	movs	r2, r7
 80040a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040a8:	f7fd fe10 	bl	8001ccc <dobandstop>
 80040ac:	e7e0      	b.n	8004070 <evalData+0x9e>
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80040ae:	20d5      	movs	r0, #213	; 0xd5
 80040b0:	f7fd fee8 	bl	8001e84 <RegInt_getreg>
 80040b4:	f00d fb8e 	bl	80117d4 <__aeabi_ui2f>
 80040b8:	4951      	ldr	r1, [pc, #324]	; (8004200 <evalData+0x22e>)
 80040ba:	f00c fb19 	bl	80106f0 <__aeabi_fdiv>
 80040be:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 80040c0:	4b4e      	ldr	r3, [pc, #312]	; (80041fc <evalData+0x22a>)
 80040c2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80040c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040c6:	f7ff fca5 	bl	8003a14 <doconv>
 80040ca:	e7d3      	b.n	8004074 <evalData+0xa2>
		uint8v2_t max_index = max2d(data, data_size);
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <evalData+0x22a>)
 80040ce:	469b      	mov	fp, r3
 80040d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d2:	469a      	mov	sl, r3
 80040d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fd fcf6 	bl	8001ac8 <max2d>
 80040dc:	b283      	uxth	r3, r0
 80040de:	aa06      	add	r2, sp, #24
 80040e0:	8010      	strh	r0, [r2, #0]
		uint16_t apex = data[max_index.x1][max_index.x2];
 80040e2:	b2c7      	uxtb	r7, r0
 80040e4:	00ba      	lsls	r2, r7, #2
 80040e6:	4651      	mov	r1, sl
 80040e8:	5852      	ldr	r2, [r2, r1]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	469a      	mov	sl, r3
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	5ad3      	ldrh	r3, [r2, r3]
 80040f2:	001a      	movs	r2, r3
 80040f4:	9305      	str	r3, [sp, #20]
		DBG_PRINTINT(apex);
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <evalData+0x242>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <evalData+0x236>)
 80040fc:	4946      	ldr	r1, [pc, #280]	; (8004218 <evalData+0x246>)
 80040fe:	4844      	ldr	r0, [pc, #272]	; (8004210 <evalData+0x23e>)
 8004100:	f011 fd08 	bl	8015b14 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 8004104:	23c9      	movs	r3, #201	; 0xc9
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <evalData+0x236>)
 800410c:	003a      	movs	r2, r7
 800410e:	4943      	ldr	r1, [pc, #268]	; (800421c <evalData+0x24a>)
 8004110:	483f      	ldr	r0, [pc, #252]	; (8004210 <evalData+0x23e>)
 8004112:	f011 fcff 	bl	8015b14 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 8004116:	4b42      	ldr	r3, [pc, #264]	; (8004220 <evalData+0x24e>)
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <evalData+0x236>)
 800411c:	4652      	mov	r2, sl
 800411e:	4941      	ldr	r1, [pc, #260]	; (8004224 <evalData+0x252>)
 8004120:	483b      	ldr	r0, [pc, #236]	; (8004210 <evalData+0x23e>)
 8004122:	f011 fcf7 	bl	8015b14 <__wrap_printf>
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8004126:	465b      	mov	r3, fp
 8004128:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800412a:	9b03      	ldr	r3, [sp, #12]
 800412c:	9a06      	ldr	r2, [sp, #24]
 800412e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004130:	f7fd fc55 	bl	80019de <get_msd>
 8004134:	1c07      	adds	r7, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004136:	06e3      	lsls	r3, r4, #27
 8004138:	d456      	bmi.n	80041e8 <evalData+0x216>
		floatv2_t com = center_of_mass(max_index, roi_radius);
 800413a:	4642      	mov	r2, r8
 800413c:	9906      	ldr	r1, [sp, #24]
 800413e:	a807      	add	r0, sp, #28
 8004140:	f7fd fd50 	bl	8001be4 <center_of_mass>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8004144:	9c08      	ldr	r4, [sp, #32]
 8004146:	0030      	movs	r0, r6
 8004148:	f00d fafa 	bl	8011740 <__aeabi_i2f>
 800414c:	1c21      	adds	r1, r4, #0
 800414e:	f00c fbe1 	bl	8010914 <__aeabi_fmul>
 8004152:	1c04      	adds	r4, r0, #0
 8004154:	0028      	movs	r0, r5
 8004156:	f00d faf3 	bl	8011740 <__aeabi_i2f>
 800415a:	1c01      	adds	r1, r0, #0
 800415c:	1c20      	adds	r0, r4, #0
 800415e:	f00c f92d 	bl	80103bc <__aeabi_fadd>
 8004162:	1c04      	adds	r4, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <evalData+0x22a>)
 8004166:	2368      	movs	r3, #104	; 0x68
 8004168:	5ad0      	ldrh	r0, [r2, r3]
 800416a:	f00d fae9 	bl	8011740 <__aeabi_i2f>
 800416e:	1c01      	adds	r1, r0, #0
 8004170:	4648      	mov	r0, r9
 8004172:	f00c fabd 	bl	80106f0 <__aeabi_fdiv>
 8004176:	1c01      	adds	r1, r0, #0
 8004178:	9807      	ldr	r0, [sp, #28]
 800417a:	f00c fbcb 	bl	8010914 <__aeabi_fmul>
 800417e:	492a      	ldr	r1, [pc, #168]	; (8004228 <evalData+0x256>)
 8004180:	f00c fbc8 	bl	8010914 <__aeabi_fmul>
 8004184:	1c05      	adds	r5, r0, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 8004186:	2100      	movs	r1, #0
 8004188:	9e02      	ldr	r6, [sp, #8]
 800418a:	1c30      	adds	r0, r6, #0
 800418c:	f00d f8b4 	bl	80112f8 <__aeabi_fcmpeq>
 8004190:	2800      	cmp	r0, #0
 8004192:	d131      	bne.n	80041f8 <evalData+0x226>
 8004194:	9805      	ldr	r0, [sp, #20]
 8004196:	f00d fad3 	bl	8011740 <__aeabi_i2f>
 800419a:	1c31      	adds	r1, r6, #0
 800419c:	f00c faa8 	bl	80106f0 <__aeabi_fdiv>
 80041a0:	1c06      	adds	r6, r0, #0
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 80041a2:	1c28      	adds	r0, r5, #0
 80041a4:	f00d f8f6 	bl	8011394 <__aeabi_f2uiz>
 80041a8:	0001      	movs	r1, r0
 80041aa:	2201      	movs	r2, #1
 80041ac:	20d0      	movs	r0, #208	; 0xd0
 80041ae:	f7ff facd 	bl	800374c <RegInt_setregf>
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 80041b2:	1c20      	adds	r0, r4, #0
 80041b4:	f00d f8ee 	bl	8011394 <__aeabi_f2uiz>
 80041b8:	0001      	movs	r1, r0
 80041ba:	2201      	movs	r2, #1
 80041bc:	20d1      	movs	r0, #209	; 0xd1
 80041be:	f7ff fac5 	bl	800374c <RegInt_setregf>
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 80041c2:	1c30      	adds	r0, r6, #0
 80041c4:	f00d f8e6 	bl	8011394 <__aeabi_f2uiz>
 80041c8:	0001      	movs	r1, r0
 80041ca:	2201      	movs	r2, #1
 80041cc:	20d2      	movs	r0, #210	; 0xd2
 80041ce:	f7ff fabd 	bl	800374c <RegInt_setregf>
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 80041d2:	1c38      	adds	r0, r7, #0
 80041d4:	f00d f8de 	bl	8011394 <__aeabi_f2uiz>
 80041d8:	0001      	movs	r1, r0
 80041da:	2201      	movs	r2, #1
 80041dc:	20d3      	movs	r0, #211	; 0xd3
 80041de:	f7ff fab5 	bl	800374c <RegInt_setregf>
		print_sparse_results();
 80041e2:	f7ff f9c5 	bl	8003570 <print_sparse_results>
 80041e6:	e747      	b.n	8004078 <evalData+0xa6>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <evalData+0x22a>)
 80041ea:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80041ec:	9b04      	ldr	r3, [sp, #16]
 80041ee:	9a06      	ldr	r2, [sp, #24]
 80041f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041f2:	f7fd fbbf 	bl	8001974 <null_data>
 80041f6:	e7a0      	b.n	800413a <evalData+0x168>
		else{amplitude = 0;}
 80041f8:	2600      	movs	r6, #0
 80041fa:	e7d2      	b.n	80041a2 <evalData+0x1d0>
 80041fc:	2000018c 	.word	0x2000018c
 8004200:	447a0000 	.word	0x447a0000
 8004204:	0000030d 	.word	0x0000030d
 8004208:	0801e890 	.word	0x0801e890
 800420c:	0801e8a4 	.word	0x0801e8a4
 8004210:	0801e8ac 	.word	0x0801e8ac
 8004214:	00000323 	.word	0x00000323
 8004218:	0801e8c0 	.word	0x0801e8c0
 800421c:	0801e8c8 	.word	0x0801e8c8
 8004220:	00000325 	.word	0x00000325
 8004224:	0801e8d8 	.word	0x0801e8d8
 8004228:	401c7ae1 	.word	0x401c7ae1

0800422c <printf_envelope_metadata>:
void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
 800422c:	b500      	push	{lr}
 800422e:	b087      	sub	sp, #28
 8004230:	9002      	str	r0, [sp, #8]
 8004232:	9103      	str	r1, [sp, #12]
 8004234:	9204      	str	r2, [sp, #16]
 8004236:	9305      	str	r3, [sp, #20]
    printf("Envelope Serivce Metadata\n");
 8004238:	4817      	ldr	r0, [pc, #92]	; (8004298 <printf_envelope_metadata+0x6c>)
 800423a:	f011 fc59 	bl	8015af0 <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 800423e:	4917      	ldr	r1, [pc, #92]	; (800429c <printf_envelope_metadata+0x70>)
 8004240:	9802      	ldr	r0, [sp, #8]
 8004242:	f00c fb67 	bl	8010914 <__aeabi_fmul>
 8004246:	f00d fa5b 	bl	8011700 <__aeabi_f2iz>
 800424a:	0001      	movs	r1, r0
 800424c:	4814      	ldr	r0, [pc, #80]	; (80042a0 <printf_envelope_metadata+0x74>)
 800424e:	f011 fc61 	bl	8015b14 <__wrap_printf>
    printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	4911      	ldr	r1, [pc, #68]	; (800429c <printf_envelope_metadata+0x70>)
 8004258:	1c18      	adds	r0, r3, #0
 800425a:	f00c fb5b 	bl	8010914 <__aeabi_fmul>
 800425e:	f00d f899 	bl	8011394 <__aeabi_f2uiz>
 8004262:	0001      	movs	r1, r0
 8004264:	480f      	ldr	r0, [pc, #60]	; (80042a4 <printf_envelope_metadata+0x78>)
 8004266:	f011 fc55 	bl	8015b14 <__wrap_printf>
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 800426a:	ab02      	add	r3, sp, #8
 800426c:	8919      	ldrh	r1, [r3, #8]
 800426e:	480e      	ldr	r0, [pc, #56]	; (80042a8 <printf_envelope_metadata+0x7c>)
 8004270:	f011 fc50 	bl	8015b14 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.stitch_count));
 8004274:	ab02      	add	r3, sp, #8
 8004276:	8959      	ldrh	r1, [r3, #10]
 8004278:	480c      	ldr	r0, [pc, #48]	; (80042ac <printf_envelope_metadata+0x80>)
 800427a:	f011 fc4b 	bl	8015b14 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 800427e:	9805      	ldr	r0, [sp, #20]
 8004280:	4906      	ldr	r1, [pc, #24]	; (800429c <printf_envelope_metadata+0x70>)
 8004282:	f00c fb47 	bl	8010914 <__aeabi_fmul>
 8004286:	f00d f885 	bl	8011394 <__aeabi_f2uiz>
 800428a:	0001      	movs	r1, r0
 800428c:	4808      	ldr	r0, [pc, #32]	; (80042b0 <printf_envelope_metadata+0x84>)
 800428e:	f011 fc41 	bl	8015b14 <__wrap_printf>
}
 8004292:	b007      	add	sp, #28
 8004294:	bd00      	pop	{pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	0801e8e8 	.word	0x0801e8e8
 800429c:	447a0000 	.word	0x447a0000
 80042a0:	0801e904 	.word	0x0801e904
 80042a4:	0801e914 	.word	0x0801e914
 80042a8:	0801e924 	.word	0x0801e924
 80042ac:	0801e938 	.word	0x0801e938
 80042b0:	0801e950 	.word	0x0801e950

080042b4 <createEnvelopeService>:
int8_t createEnvelopeService(void){
 80042b4:	b510      	push	{r4, lr}
    updateEnvelopeConfig(envelope_config);
 80042b6:	4c17      	ldr	r4, [pc, #92]	; (8004314 <createEnvelopeService+0x60>)
 80042b8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80042ba:	f7fd fde8 	bl	8001e8e <updateEnvelopeConfig>
   	envelope_handle = acc_service_create(envelope_config);	
 80042be:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80042c0:	f7fe fe44 	bl	8002f4c <acc_service_create>
 80042c4:	65a0      	str	r0, [r4, #88]	; 0x58
	if (envelope_handle == NULL){//handles error
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d016      	beq.n	80042f8 <createEnvelopeService+0x44>
		acc_service_envelope_get_metadata(envelope_handle, &envelope_metadata);
 80042ca:	4912      	ldr	r1, [pc, #72]	; (8004314 <createEnvelopeService+0x60>)
 80042cc:	3148      	adds	r1, #72	; 0x48
 80042ce:	f7fd facf 	bl	8001870 <acc_service_envelope_get_metadata>
        if(envelope_data_malloc() == -1){stopService();}
 80042d2:	f7ff fa2b 	bl	800372c <envelope_data_malloc>
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	d019      	beq.n	800430e <createEnvelopeService+0x5a>
		Reg_store_envelope_metadata(envelope_metadata);
 80042da:	4c0e      	ldr	r4, [pc, #56]	; (8004314 <createEnvelopeService+0x60>)
 80042dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80042e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042e4:	f7ff fa56 	bl	8003794 <Reg_store_envelope_metadata>
		printf_envelope_metadata(envelope_metadata);
 80042e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80042ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80042ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042f0:	f7ff ff9c 	bl	800422c <printf_envelope_metadata>
	return 1;
 80042f4:	2001      	movs	r0, #1
}
 80042f6:	bd10      	pop	{r4, pc}
		ERR_PRINTLN("envelope service creation failed");
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <createEnvelopeService+0x64>)
 80042fa:	f011 fc0b 	bl	8015b14 <__wrap_printf>
 80042fe:	4807      	ldr	r0, [pc, #28]	; (800431c <createEnvelopeService+0x68>)
 8004300:	f011 fc08 	bl	8015b14 <__wrap_printf>
 8004304:	200a      	movs	r0, #10
 8004306:	f012 f8e7 	bl	80164d8 <putchar>
		return 0;
 800430a:	2000      	movs	r0, #0
 800430c:	e7f3      	b.n	80042f6 <createEnvelopeService+0x42>
        if(envelope_data_malloc() == -1){stopService();}
 800430e:	f7ff facb 	bl	80038a8 <stopService>
 8004312:	e7e2      	b.n	80042da <createEnvelopeService+0x26>
 8004314:	2000020c 	.word	0x2000020c
 8004318:	0801e6fc 	.word	0x0801e6fc
 800431c:	0801e968 	.word	0x0801e968

08004320 <printf_sparse_metadata>:
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8004320:	b084      	sub	sp, #16
 8004322:	b510      	push	{r4, lr}
 8004324:	9002      	str	r0, [sp, #8]
 8004326:	9103      	str	r1, [sp, #12]
 8004328:	9204      	str	r2, [sp, #16]
 800432a:	9305      	str	r3, [sp, #20]
    printf("Sparse* Serivce Metadata\n");
 800432c:	4823      	ldr	r0, [pc, #140]	; (80043bc <printf_sparse_metadata+0x9c>)
 800432e:	f011 fbdf 	bl	8015af0 <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 8004332:	4923      	ldr	r1, [pc, #140]	; (80043c0 <printf_sparse_metadata+0xa0>)
 8004334:	9802      	ldr	r0, [sp, #8]
 8004336:	f00c faed 	bl	8010914 <__aeabi_fmul>
 800433a:	f00d f9e1 	bl	8011700 <__aeabi_f2iz>
 800433e:	0001      	movs	r1, r0
 8004340:	4820      	ldr	r0, [pc, #128]	; (80043c4 <printf_sparse_metadata+0xa4>)
 8004342:	f011 fbe7 	bl	8015b14 <__wrap_printf>
    if(! far_active){
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <printf_sparse_metadata+0xa8>)
 8004348:	2344      	movs	r3, #68	; 0x44
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02a      	beq.n	80043a6 <printf_sparse_metadata+0x86>
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <printf_sparse_metadata+0xa8>)
 8004352:	6899      	ldr	r1, [r3, #8]
 8004354:	9803      	ldr	r0, [sp, #12]
 8004356:	f00c f831 	bl	80103bc <__aeabi_fadd>
 800435a:	4919      	ldr	r1, [pc, #100]	; (80043c0 <printf_sparse_metadata+0xa0>)
 800435c:	f00c fada 	bl	8010914 <__aeabi_fmul>
 8004360:	f00d f818 	bl	8011394 <__aeabi_f2uiz>
 8004364:	0001      	movs	r1, r0
 8004366:	4819      	ldr	r0, [pc, #100]	; (80043cc <printf_sparse_metadata+0xac>)
 8004368:	f011 fbd4 	bl	8015b14 <__wrap_printf>
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 800436c:	ab02      	add	r3, sp, #8
 800436e:	8919      	ldrh	r1, [r3, #8]
 8004370:	4817      	ldr	r0, [pc, #92]	; (80043d0 <printf_sparse_metadata+0xb0>)
 8004372:	f011 fbcf 	bl	8015b14 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8004376:	4912      	ldr	r1, [pc, #72]	; (80043c0 <printf_sparse_metadata+0xa0>)
 8004378:	9805      	ldr	r0, [sp, #20]
 800437a:	f00c facb 	bl	8010914 <__aeabi_fmul>
 800437e:	f00d f809 	bl	8011394 <__aeabi_f2uiz>
 8004382:	0001      	movs	r1, r0
 8004384:	4813      	ldr	r0, [pc, #76]	; (80043d4 <printf_sparse_metadata+0xb4>)
 8004386:	f011 fbc5 	bl	8015b14 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 800438a:	490d      	ldr	r1, [pc, #52]	; (80043c0 <printf_sparse_metadata+0xa0>)
 800438c:	9806      	ldr	r0, [sp, #24]
 800438e:	f00c fac1 	bl	8010914 <__aeabi_fmul>
 8004392:	f00c ffff 	bl	8011394 <__aeabi_f2uiz>
 8004396:	0001      	movs	r1, r0
 8004398:	480f      	ldr	r0, [pc, #60]	; (80043d8 <printf_sparse_metadata+0xb8>)
 800439a:	f011 fbbb 	bl	8015b14 <__wrap_printf>
}
 800439e:	bc10      	pop	{r4}
 80043a0:	bc08      	pop	{r3}
 80043a2:	b004      	add	sp, #16
 80043a4:	4718      	bx	r3
        printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 80043a6:	4906      	ldr	r1, [pc, #24]	; (80043c0 <printf_sparse_metadata+0xa0>)
 80043a8:	9803      	ldr	r0, [sp, #12]
 80043aa:	f00c fab3 	bl	8010914 <__aeabi_fmul>
 80043ae:	f00c fff1 	bl	8011394 <__aeabi_f2uiz>
 80043b2:	0001      	movs	r1, r0
 80043b4:	4809      	ldr	r0, [pc, #36]	; (80043dc <printf_sparse_metadata+0xbc>)
 80043b6:	f011 fbad 	bl	8015b14 <__wrap_printf>
 80043ba:	e7d7      	b.n	800436c <printf_sparse_metadata+0x4c>
 80043bc:	0801e98c 	.word	0x0801e98c
 80043c0:	447a0000 	.word	0x447a0000
 80043c4:	0801e904 	.word	0x0801e904
 80043c8:	2000020c 	.word	0x2000020c
 80043cc:	0801e9a8 	.word	0x0801e9a8
 80043d0:	0801e924 	.word	0x0801e924
 80043d4:	0801e938 	.word	0x0801e938
 80043d8:	0801e950 	.word	0x0801e950
 80043dc:	0801e914 	.word	0x0801e914

080043e0 <createSparseService>:
int8_t createSparseService(void){
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e2:	b083      	sub	sp, #12
	uint32_t start_reg = roundDown(RegInt_getreg(0x20),60);
 80043e4:	2020      	movs	r0, #32
 80043e6:	f7fd fd4d 	bl	8001e84 <RegInt_getreg>
 80043ea:	213c      	movs	r1, #60	; 0x3c
 80043ec:	f7fd fcbe 	bl	8001d6c <roundDown>
 80043f0:	0005      	movs	r5, r0
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 80043f2:	2021      	movs	r0, #33	; 0x21
 80043f4:	f7fd fd46 	bl	8001e84 <RegInt_getreg>
 80043f8:	213c      	movs	r1, #60	; 0x3c
 80043fa:	f7fd fcb7 	bl	8001d6c <roundDown>
 80043fe:	0004      	movs	r4, r0
	if (len_reg < 1891){
 8004400:	4b65      	ldr	r3, [pc, #404]	; (8004598 <createSparseService+0x1b8>)
 8004402:	4298      	cmp	r0, r3
 8004404:	d965      	bls.n	80044d2 <createSparseService+0xf2>
	}else if (len_reg < 3811){
 8004406:	4b65      	ldr	r3, [pc, #404]	; (800459c <createSparseService+0x1bc>)
 8004408:	4298      	cmp	r0, r3
 800440a:	d900      	bls.n	800440e <createSparseService+0x2e>
 800440c:	e074      	b.n	80044f8 <createSparseService+0x118>
		far_active = 1;
 800440e:	4f64      	ldr	r7, [pc, #400]	; (80045a0 <createSparseService+0x1c0>)
 8004410:	2344      	movs	r3, #68	; 0x44
 8004412:	2201      	movs	r2, #1
 8004414:	54fa      	strb	r2, [r7, r3]
		DBG_PRINTLN("updating sparse config");
 8004416:	4e63      	ldr	r6, [pc, #396]	; (80045a4 <createSparseService+0x1c4>)
 8004418:	0030      	movs	r0, r6
 800441a:	f011 fb7b 	bl	8015b14 <__wrap_printf>
 800441e:	4862      	ldr	r0, [pc, #392]	; (80045a8 <createSparseService+0x1c8>)
 8004420:	f011 fb78 	bl	8015b14 <__wrap_printf>
 8004424:	200a      	movs	r0, #10
 8004426:	f012 f857 	bl	80164d8 <putchar>
		updateSparseConfig(sparse_config,start_reg, 1890);
 800442a:	b2ad      	uxth	r5, r5
 800442c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800442e:	4a5a      	ldr	r2, [pc, #360]	; (8004598 <createSparseService+0x1b8>)
 8004430:	0029      	movs	r1, r5
 8004432:	f7fd fdc3 	bl	8001fbc <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 8004436:	0030      	movs	r0, r6
 8004438:	f011 fb6c 	bl	8015b14 <__wrap_printf>
 800443c:	485b      	ldr	r0, [pc, #364]	; (80045ac <createSparseService+0x1cc>)
 800443e:	f011 fb69 	bl	8015b14 <__wrap_printf>
 8004442:	200a      	movs	r0, #10
 8004444:	f012 f848 	bl	80164d8 <putchar>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <createSparseService+0x1d0>)
 800444a:	429c      	cmp	r4, r3
 800444c:	d200      	bcs.n	8004450 <createSparseService+0x70>
 800444e:	001c      	movs	r4, r3
 8004450:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <createSparseService+0x1d4>)
 8004452:	469c      	mov	ip, r3
 8004454:	4464      	add	r4, ip
 8004456:	b2a4      	uxth	r4, r4
 8004458:	b222      	sxth	r2, r4
		DBG_PRINTINT(far_len);
 800445a:	4b57      	ldr	r3, [pc, #348]	; (80045b8 <createSparseService+0x1d8>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	4b57      	ldr	r3, [pc, #348]	; (80045bc <createSparseService+0x1dc>)
 8004460:	4957      	ldr	r1, [pc, #348]	; (80045c0 <createSparseService+0x1e0>)
 8004462:	4858      	ldr	r0, [pc, #352]	; (80045c4 <createSparseService+0x1e4>)
 8004464:	f011 fb56 	bl	8015b14 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 8004468:	23f0      	movs	r3, #240	; 0xf0
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	469c      	mov	ip, r3
 800446e:	4465      	add	r5, ip
 8004470:	b2a9      	uxth	r1, r5
 8004472:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <createSparseService+0x1c0>)
 8004474:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004476:	0022      	movs	r2, r4
 8004478:	f7fd fda0 	bl	8001fbc <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 800447c:	4c48      	ldr	r4, [pc, #288]	; (80045a0 <createSparseService+0x1c0>)
 800447e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004480:	f7fe fd64 	bl	8002f4c <acc_service_create>
 8004484:	65e0      	str	r0, [r4, #92]	; 0x5c
	if (sparse_handle == NULL){//handles error
 8004486:	2800      	cmp	r0, #0
 8004488:	d041      	beq.n	800450e <createSparseService+0x12e>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 800448a:	494f      	ldr	r1, [pc, #316]	; (80045c8 <createSparseService+0x1e8>)
 800448c:	316c      	adds	r1, #108	; 0x6c
 800448e:	f7fd f8a5 	bl	80015dc <acc_service_sparse_get_metadata>
		if(!far_active){
 8004492:	4a43      	ldr	r2, [pc, #268]	; (80045a0 <createSparseService+0x1c0>)
 8004494:	2344      	movs	r3, #68	; 0x44
 8004496:	5cd3      	ldrb	r3, [r2, r3]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d043      	beq.n	8004524 <createSparseService+0x144>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 800449c:	4c4a      	ldr	r4, [pc, #296]	; (80045c8 <createSparseService+0x1e8>)
 800449e:	2300      	movs	r3, #0
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044a8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80044aa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80044ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80044ae:	f7ff f9ab 	bl	8003808 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 80044b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044b8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80044ba:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80044bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80044be:	f7ff ff2f 	bl	8004320 <printf_sparse_metadata>
	if(far_active){
 80044c2:	4a37      	ldr	r2, [pc, #220]	; (80045a0 <createSparseService+0x1c0>)
 80044c4:	2344      	movs	r3, #68	; 0x44
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d132      	bne.n	8004532 <createSparseService+0x152>
	return 1;
 80044cc:	2001      	movs	r0, #1
}
 80044ce:	b003      	add	sp, #12
 80044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		far_active = 0;
 80044d2:	4e33      	ldr	r6, [pc, #204]	; (80045a0 <createSparseService+0x1c0>)
 80044d4:	2344      	movs	r3, #68	; 0x44
 80044d6:	2200      	movs	r2, #0
 80044d8:	54f2      	strb	r2, [r6, r3]
        DBG_PRINTLN("updating sparse config");
 80044da:	4832      	ldr	r0, [pc, #200]	; (80045a4 <createSparseService+0x1c4>)
 80044dc:	f011 fb1a 	bl	8015b14 <__wrap_printf>
 80044e0:	4831      	ldr	r0, [pc, #196]	; (80045a8 <createSparseService+0x1c8>)
 80044e2:	f011 fb17 	bl	8015b14 <__wrap_printf>
 80044e6:	200a      	movs	r0, #10
 80044e8:	f011 fff6 	bl	80164d8 <putchar>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 80044ec:	b2a2      	uxth	r2, r4
 80044ee:	b2a9      	uxth	r1, r5
 80044f0:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80044f2:	f7fd fd63 	bl	8001fbc <updateSparseConfig>
 80044f6:	e7c1      	b.n	800447c <createSparseService+0x9c>
		ERR_PRINTLN("sparse service creation failed (too long)");
 80044f8:	4834      	ldr	r0, [pc, #208]	; (80045cc <createSparseService+0x1ec>)
 80044fa:	f011 fb0b 	bl	8015b14 <__wrap_printf>
 80044fe:	4834      	ldr	r0, [pc, #208]	; (80045d0 <createSparseService+0x1f0>)
 8004500:	f011 fb08 	bl	8015b14 <__wrap_printf>
 8004504:	200a      	movs	r0, #10
 8004506:	f011 ffe7 	bl	80164d8 <putchar>
		return 0;
 800450a:	2000      	movs	r0, #0
 800450c:	e7df      	b.n	80044ce <createSparseService+0xee>
		ERR_PRINTLN("sparse service creation fail");
 800450e:	482f      	ldr	r0, [pc, #188]	; (80045cc <createSparseService+0x1ec>)
 8004510:	f011 fb00 	bl	8015b14 <__wrap_printf>
 8004514:	482f      	ldr	r0, [pc, #188]	; (80045d4 <createSparseService+0x1f4>)
 8004516:	f011 fafd 	bl	8015b14 <__wrap_printf>
 800451a:	200a      	movs	r0, #10
 800451c:	f011 ffdc 	bl	80164d8 <putchar>
		return 0;
 8004520:	2000      	movs	r0, #0
 8004522:	e7d4      	b.n	80044ce <createSparseService+0xee>
			if(sparse_data_malloc() == -1){stopService();}
 8004524:	f7ff f8d8 	bl	80036d8 <sparse_data_malloc>
 8004528:	1c43      	adds	r3, r0, #1
 800452a:	d1b7      	bne.n	800449c <createSparseService+0xbc>
 800452c:	f7ff f9bc 	bl	80038a8 <stopService>
 8004530:	e7b4      	b.n	800449c <createSparseService+0xbc>
	sparse_handle_far = acc_service_create(sparse_config_far);
 8004532:	0014      	movs	r4, r2
 8004534:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004536:	f7fe fd09 	bl	8002f4c <acc_service_create>
 800453a:	6620      	str	r0, [r4, #96]	; 0x60
	if (sparse_handle_far == NULL){//handles error		
 800453c:	2800      	cmp	r0, #0
 800453e:	d01d      	beq.n	800457c <createSparseService+0x19c>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 8004540:	4917      	ldr	r1, [pc, #92]	; (80045a0 <createSparseService+0x1c0>)
 8004542:	3104      	adds	r1, #4
 8004544:	f7fd f84a 	bl	80015dc <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){stopService();}
 8004548:	f7ff f8c6 	bl	80036d8 <sparse_data_malloc>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d020      	beq.n	8004592 <createSparseService+0x1b2>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <createSparseService+0x1e8>)
 8004552:	4c13      	ldr	r4, [pc, #76]	; (80045a0 <createSparseService+0x1c0>)
 8004554:	1d22      	adds	r2, r4, #4
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800455a:	9200      	str	r2, [sp, #0]
 800455c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800455e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004560:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004564:	f7ff f950 	bl	8003808 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 8004568:	6963      	ldr	r3, [r4, #20]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	6860      	ldr	r0, [r4, #4]
 800456e:	68a1      	ldr	r1, [r4, #8]
 8004570:	68e2      	ldr	r2, [r4, #12]
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	f7ff fed4 	bl	8004320 <printf_sparse_metadata>
	return 1;
 8004578:	2001      	movs	r0, #1
 800457a:	e7a8      	b.n	80044ce <createSparseService+0xee>
		ERR_PRINTLN("sparse far service creation fail");
 800457c:	4813      	ldr	r0, [pc, #76]	; (80045cc <createSparseService+0x1ec>)
 800457e:	f011 fac9 	bl	8015b14 <__wrap_printf>
 8004582:	4815      	ldr	r0, [pc, #84]	; (80045d8 <createSparseService+0x1f8>)
 8004584:	f011 fac6 	bl	8015b14 <__wrap_printf>
 8004588:	200a      	movs	r0, #10
 800458a:	f011 ffa5 	bl	80164d8 <putchar>
		return 0;
 800458e:	2000      	movs	r0, #0
 8004590:	e79d      	b.n	80044ce <createSparseService+0xee>
		if(sparse_data_malloc() == -1){stopService();}
 8004592:	f7ff f989 	bl	80038a8 <stopService>
 8004596:	e7db      	b.n	8004550 <createSparseService+0x170>
 8004598:	00000762 	.word	0x00000762
 800459c:	00000ee2 	.word	0x00000ee2
 80045a0:	2000020c 	.word	0x2000020c
 80045a4:	0801e7b4 	.word	0x0801e7b4
 80045a8:	0801e9c0 	.word	0x0801e9c0
 80045ac:	0801e9d8 	.word	0x0801e9d8
 80045b0:	00000781 	.word	0x00000781
 80045b4:	fffff880 	.word	0xfffff880
 80045b8:	00000241 	.word	0x00000241
 80045bc:	0801e890 	.word	0x0801e890
 80045c0:	0801e9f4 	.word	0x0801e9f4
 80045c4:	0801e8ac 	.word	0x0801e8ac
 80045c8:	2000018c 	.word	0x2000018c
 80045cc:	0801e6fc 	.word	0x0801e6fc
 80045d0:	0801e9fc 	.word	0x0801e9fc
 80045d4:	0801ea28 	.word	0x0801ea28
 80045d8:	0801ea48 	.word	0x0801ea48

080045dc <createService>:
int8_t createService(void){
 80045dc:	b510      	push	{r4, lr}
    uint32_t service_type = RegInt_getreg(0x02);
 80045de:	2002      	movs	r0, #2
 80045e0:	f7fd fc50 	bl	8001e84 <RegInt_getreg>
    if(service_type == 0x02){success = createEnvelopeService();}
 80045e4:	2802      	cmp	r0, #2
 80045e6:	d009      	beq.n	80045fc <createService+0x20>
    else if(service_type == 0x04){success = createSparseService();}
 80045e8:	2804      	cmp	r0, #4
 80045ea:	d00b      	beq.n	8004604 <createService+0x28>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80045ec:	2180      	movs	r1, #128	; 0x80
 80045ee:	02c9      	lsls	r1, r1, #11
 80045f0:	2006      	movs	r0, #6
 80045f2:	f7ff f94d 	bl	8003890 <Reg_regor>
 80045f6:	2400      	movs	r4, #0
}
 80045f8:	0020      	movs	r0, r4
 80045fa:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){success = createEnvelopeService();}
 80045fc:	f7ff fe5a 	bl	80042b4 <createEnvelopeService>
 8004600:	0004      	movs	r4, r0
 8004602:	e002      	b.n	800460a <createService+0x2e>
    else if(service_type == 0x04){success = createSparseService();}
 8004604:	f7ff feec 	bl	80043e0 <createSparseService>
 8004608:	0004      	movs	r4, r0
    if(success){
 800460a:	2c00      	cmp	r4, #0
 800460c:	d105      	bne.n	800461a <createService+0x3e>
        Reg_regor(0x06, 0x00080000);
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	0309      	lsls	r1, r1, #12
 8004612:	2006      	movs	r0, #6
 8004614:	f7ff f93c 	bl	8003890 <Reg_regor>
 8004618:	e7ee      	b.n	80045f8 <createService+0x1c>
        Reg_regor(0x06, 0x00000001);
 800461a:	2101      	movs	r1, #1
 800461c:	2006      	movs	r0, #6
 800461e:	f7ff f937 	bl	8003890 <Reg_regor>
        return 1;
 8004622:	2401      	movs	r4, #1
 8004624:	e7e8      	b.n	80045f8 <createService+0x1c>

08004626 <sparseMeasure>:
void sparseMeasure(void){
 8004626:	b570      	push	{r4, r5, r6, lr}
	INF_PRINTLN("Start Sparse measurement");
 8004628:	4d3a      	ldr	r5, [pc, #232]	; (8004714 <sparseMeasure+0xee>)
 800462a:	0028      	movs	r0, r5
 800462c:	f011 fa72 	bl	8015b14 <__wrap_printf>
 8004630:	4839      	ldr	r0, [pc, #228]	; (8004718 <sparseMeasure+0xf2>)
 8004632:	f011 fa6f 	bl	8015b14 <__wrap_printf>
 8004636:	200a      	movs	r0, #10
 8004638:	f011 ff4e 	bl	80164d8 <putchar>
	acc_service_sparse_get_next_by_reference(sparse_handle, &sparse_data, &sparse_result_info);
 800463c:	4c37      	ldr	r4, [pc, #220]	; (800471c <sparseMeasure+0xf6>)
 800463e:	0022      	movs	r2, r4
 8004640:	326c      	adds	r2, #108	; 0x6c
 8004642:	0021      	movs	r1, r4
 8004644:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004646:	f7fc ff54 	bl	80014f2 <acc_service_sparse_get_next_by_reference>
	filldata_sparse(0);
 800464a:	2000      	movs	r0, #0
 800464c:	f7fd feb4 	bl	80023b8 <filldata_sparse>
	INF_PRINTLN("Sparse measurement complete");
 8004650:	0028      	movs	r0, r5
 8004652:	f011 fa5f 	bl	8015b14 <__wrap_printf>
 8004656:	4832      	ldr	r0, [pc, #200]	; (8004720 <sparseMeasure+0xfa>)
 8004658:	f011 fa5c 	bl	8015b14 <__wrap_printf>
 800465c:	200a      	movs	r0, #10
 800465e:	f011 ff3b 	bl	80164d8 <putchar>
	if(far_active){
 8004662:	2344      	movs	r3, #68	; 0x44
 8004664:	5ce3      	ldrb	r3, [r4, r3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d100      	bne.n	800466c <sparseMeasure+0x46>
}
 800466a:	bd70      	pop	{r4, r5, r6, pc}
		if(!acc_service_deactivate(sparse_handle)){
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <sparseMeasure+0xf6>)
 800466e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8004670:	f7fc fd50 	bl	8001114 <acc_service_deactivate>
 8004674:	2800      	cmp	r0, #0
 8004676:	d025      	beq.n	80046c4 <sparseMeasure+0x9e>
		if (!acc_service_activate(sparse_handle_far)){
 8004678:	4b28      	ldr	r3, [pc, #160]	; (800471c <sparseMeasure+0xf6>)
 800467a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800467c:	f7fc fd8a 	bl	8001194 <acc_service_activate>
 8004680:	2800      	cmp	r0, #0
 8004682:	d029      	beq.n	80046d8 <sparseMeasure+0xb2>
		acc_service_sparse_get_next_by_reference(sparse_handle_far, &sparse_data_far, &sparse_result_info_far);
 8004684:	4c25      	ldr	r4, [pc, #148]	; (800471c <sparseMeasure+0xf6>)
 8004686:	0022      	movs	r2, r4
 8004688:	3270      	adds	r2, #112	; 0x70
 800468a:	0021      	movs	r1, r4
 800468c:	3118      	adds	r1, #24
 800468e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004690:	f7fc ff2f 	bl	80014f2 <acc_service_sparse_get_next_by_reference>
		filldata_sparse(1);
 8004694:	2001      	movs	r0, #1
 8004696:	f7fd fe8f 	bl	80023b8 <filldata_sparse>
		if(!acc_service_deactivate(sparse_handle_far)){
 800469a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800469c:	f7fc fd3a 	bl	8001114 <acc_service_deactivate>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d023      	beq.n	80046ec <sparseMeasure+0xc6>
		if (!acc_service_activate(sparse_handle)){
 80046a4:	4b1d      	ldr	r3, [pc, #116]	; (800471c <sparseMeasure+0xf6>)
 80046a6:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80046a8:	f7fc fd74 	bl	8001194 <acc_service_activate>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d027      	beq.n	8004700 <sparseMeasure+0xda>
		INF_PRINTLN("Sparse Far measurement complete\n");
 80046b0:	4818      	ldr	r0, [pc, #96]	; (8004714 <sparseMeasure+0xee>)
 80046b2:	f011 fa2f 	bl	8015b14 <__wrap_printf>
 80046b6:	481b      	ldr	r0, [pc, #108]	; (8004724 <sparseMeasure+0xfe>)
 80046b8:	f011 fa1a 	bl	8015af0 <__wrap_puts>
 80046bc:	200a      	movs	r0, #10
 80046be:	f011 ff0b 	bl	80164d8 <putchar>
 80046c2:	e7d2      	b.n	800466a <sparseMeasure+0x44>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 80046c4:	4818      	ldr	r0, [pc, #96]	; (8004728 <sparseMeasure+0x102>)
 80046c6:	f011 fa25 	bl	8015b14 <__wrap_printf>
 80046ca:	4818      	ldr	r0, [pc, #96]	; (800472c <sparseMeasure+0x106>)
 80046cc:	f011 fa22 	bl	8015b14 <__wrap_printf>
 80046d0:	200a      	movs	r0, #10
 80046d2:	f011 ff01 	bl	80164d8 <putchar>
 80046d6:	e7cf      	b.n	8004678 <sparseMeasure+0x52>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 80046d8:	4813      	ldr	r0, [pc, #76]	; (8004728 <sparseMeasure+0x102>)
 80046da:	f011 fa1b 	bl	8015b14 <__wrap_printf>
 80046de:	4814      	ldr	r0, [pc, #80]	; (8004730 <sparseMeasure+0x10a>)
 80046e0:	f011 fa18 	bl	8015b14 <__wrap_printf>
 80046e4:	200a      	movs	r0, #10
 80046e6:	f011 fef7 	bl	80164d8 <putchar>
 80046ea:	e7cb      	b.n	8004684 <sparseMeasure+0x5e>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 80046ec:	480e      	ldr	r0, [pc, #56]	; (8004728 <sparseMeasure+0x102>)
 80046ee:	f011 fa11 	bl	8015b14 <__wrap_printf>
 80046f2:	4810      	ldr	r0, [pc, #64]	; (8004734 <sparseMeasure+0x10e>)
 80046f4:	f011 fa0e 	bl	8015b14 <__wrap_printf>
 80046f8:	200a      	movs	r0, #10
 80046fa:	f011 feed 	bl	80164d8 <putchar>
 80046fe:	e7d1      	b.n	80046a4 <sparseMeasure+0x7e>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 8004700:	4809      	ldr	r0, [pc, #36]	; (8004728 <sparseMeasure+0x102>)
 8004702:	f011 fa07 	bl	8015b14 <__wrap_printf>
 8004706:	480c      	ldr	r0, [pc, #48]	; (8004738 <sparseMeasure+0x112>)
 8004708:	f011 fa04 	bl	8015b14 <__wrap_printf>
 800470c:	200a      	movs	r0, #10
 800470e:	f011 fee3 	bl	80164d8 <putchar>
 8004712:	e7cd      	b.n	80046b0 <sparseMeasure+0x8a>
 8004714:	0801e748 	.word	0x0801e748
 8004718:	0801ea6c 	.word	0x0801ea6c
 800471c:	2000020c 	.word	0x2000020c
 8004720:	0801ea88 	.word	0x0801ea88
 8004724:	0801eb5c 	.word	0x0801eb5c
 8004728:	0801e6fc 	.word	0x0801e6fc
 800472c:	0801eaa4 	.word	0x0801eaa4
 8004730:	0801ead0 	.word	0x0801ead0
 8004734:	0801eb00 	.word	0x0801eb00
 8004738:	0801eb30 	.word	0x0801eb30

0800473c <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 800473c:	b500      	push	{lr}
 800473e:	b083      	sub	sp, #12
 8004740:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 8004742:	f7fc fd27 	bl	8001194 <acc_service_activate>
 8004746:	2800      	cmp	r0, #0
 8004748:	d11a      	bne.n	8004780 <activateService_handle+0x44>
		ERR_PRINTLN("acc_service_activate() failed");
 800474a:	4813      	ldr	r0, [pc, #76]	; (8004798 <activateService_handle+0x5c>)
 800474c:	f011 f9e2 	bl	8015b14 <__wrap_printf>
 8004750:	4812      	ldr	r0, [pc, #72]	; (800479c <activateService_handle+0x60>)
 8004752:	f011 f9df 	bl	8015b14 <__wrap_printf>
 8004756:	200a      	movs	r0, #10
 8004758:	f011 febe 	bl	80164d8 <putchar>
		acc_service_destroy(&handle);
 800475c:	a801      	add	r0, sp, #4
 800475e:	f7fc fff3 	bl	8001748 <acc_service_destroy>
		data_free();
 8004762:	f7fd fd51 	bl	8002208 <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <activateService_handle+0x64>)
 8004768:	2344      	movs	r3, #68	; 0x44
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <activateService_handle+0x38>
		return 0;
 8004770:	2000      	movs	r0, #0
 8004772:	e00f      	b.n	8004794 <activateService_handle+0x58>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 8004774:	0010      	movs	r0, r2
 8004776:	3060      	adds	r0, #96	; 0x60
 8004778:	f7fc ffe6 	bl	8001748 <acc_service_destroy>
		return 0;
 800477c:	2000      	movs	r0, #0
 800477e:	e009      	b.n	8004794 <activateService_handle+0x58>
		DBG_PRINTLN("service handle activated\n");
 8004780:	4808      	ldr	r0, [pc, #32]	; (80047a4 <activateService_handle+0x68>)
 8004782:	f011 f9c7 	bl	8015b14 <__wrap_printf>
 8004786:	4808      	ldr	r0, [pc, #32]	; (80047a8 <activateService_handle+0x6c>)
 8004788:	f011 f9b2 	bl	8015af0 <__wrap_puts>
 800478c:	200a      	movs	r0, #10
 800478e:	f011 fea3 	bl	80164d8 <putchar>
        return 1;
 8004792:	2001      	movs	r0, #1
}
 8004794:	b003      	add	sp, #12
 8004796:	bd00      	pop	{pc}
 8004798:	0801e6fc 	.word	0x0801e6fc
 800479c:	0801eb7c 	.word	0x0801eb7c
 80047a0:	2000020c 	.word	0x2000020c
 80047a4:	0801e7b4 	.word	0x0801e7b4
 80047a8:	0801eb9c 	.word	0x0801eb9c

080047ac <activateService>:
int8_t activateService(void){
 80047ac:	b510      	push	{r4, lr}
    uint32_t service_type = RegInt_getreg(0x02);
 80047ae:	2002      	movs	r0, #2
 80047b0:	f7fd fb68 	bl	8001e84 <RegInt_getreg>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 80047b4:	2802      	cmp	r0, #2
 80047b6:	d009      	beq.n	80047cc <activateService+0x20>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 80047b8:	2804      	cmp	r0, #4
 80047ba:	d00d      	beq.n	80047d8 <activateService+0x2c>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80047bc:	2180      	movs	r1, #128	; 0x80
 80047be:	02c9      	lsls	r1, r1, #11
 80047c0:	2006      	movs	r0, #6
 80047c2:	f7ff f865 	bl	8003890 <Reg_regor>
 80047c6:	2400      	movs	r4, #0
}
 80047c8:	0020      	movs	r0, r4
 80047ca:	bd10      	pop	{r4, pc}
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <activateService+0x50>)
 80047ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80047d0:	f7ff ffb4 	bl	800473c <activateService_handle>
 80047d4:	0004      	movs	r4, r0
 80047d6:	e004      	b.n	80047e2 <activateService+0x36>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 80047d8:	4b08      	ldr	r3, [pc, #32]	; (80047fc <activateService+0x50>)
 80047da:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80047dc:	f7ff ffae 	bl	800473c <activateService_handle>
 80047e0:	0004      	movs	r4, r0
    if(success){
 80047e2:	2c00      	cmp	r4, #0
 80047e4:	d105      	bne.n	80047f2 <activateService+0x46>
        Reg_regor(0x06, 0x00100000);
 80047e6:	2180      	movs	r1, #128	; 0x80
 80047e8:	0349      	lsls	r1, r1, #13
 80047ea:	2006      	movs	r0, #6
 80047ec:	f7ff f850 	bl	8003890 <Reg_regor>
 80047f0:	e7ea      	b.n	80047c8 <activateService+0x1c>
        Reg_regor(0x06, 0x00000002);
 80047f2:	2102      	movs	r1, #2
 80047f4:	2006      	movs	r0, #6
 80047f6:	f7ff f84b 	bl	8003890 <Reg_regor>
 80047fa:	e7e5      	b.n	80047c8 <activateService+0x1c>
 80047fc:	2000020c 	.word	0x2000020c

08004800 <rss_control>:
void rss_control(uint32_t val){
 8004800:	b510      	push	{r4, lr}
 8004802:	1e04      	subs	r4, r0, #0
	if (val == 0x00){stopService();}
 8004804:	d00c      	beq.n	8004820 <rss_control+0x20>
	if (val == 0x01){createService();}
 8004806:	2c01      	cmp	r4, #1
 8004808:	d00d      	beq.n	8004826 <rss_control+0x26>
	if (val == 0x02){activateService();}
 800480a:	2c02      	cmp	r4, #2
 800480c:	d00e      	beq.n	800482c <rss_control+0x2c>
	if (val == 0x03){
 800480e:	2c03      	cmp	r4, #3
 8004810:	d00f      	beq.n	8004832 <rss_control+0x32>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 8004812:	2c04      	cmp	r4, #4
 8004814:	d014      	beq.n	8004840 <rss_control+0x40>
	if (val == 0x05){sparseMeasure();}
 8004816:	2c05      	cmp	r4, #5
 8004818:	d017      	beq.n	800484a <rss_control+0x4a>
	if (val == 0x06){evalData();}
 800481a:	2c06      	cmp	r4, #6
 800481c:	d018      	beq.n	8004850 <rss_control+0x50>
}
 800481e:	bd10      	pop	{r4, pc}
	if (val == 0x00){stopService();}
 8004820:	f7ff f842 	bl	80038a8 <stopService>
 8004824:	e7ef      	b.n	8004806 <rss_control+0x6>
	if (val == 0x01){createService();}
 8004826:	f7ff fed9 	bl	80045dc <createService>
 800482a:	e7ee      	b.n	800480a <rss_control+0xa>
	if (val == 0x02){activateService();}
 800482c:	f7ff ffbe 	bl	80047ac <activateService>
 8004830:	e7ed      	b.n	800480e <rss_control+0xe>
		if(createService()){activateService();}
 8004832:	f7ff fed3 	bl	80045dc <createService>
 8004836:	2800      	cmp	r0, #0
 8004838:	d0eb      	beq.n	8004812 <rss_control+0x12>
 800483a:	f7ff ffb7 	bl	80047ac <activateService>
 800483e:	e7e8      	b.n	8004812 <rss_control+0x12>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 8004840:	21ff      	movs	r1, #255	; 0xff
 8004842:	2006      	movs	r0, #6
 8004844:	f7ff f89a 	bl	800397c <Reg_regand>
 8004848:	e7e5      	b.n	8004816 <rss_control+0x16>
	if (val == 0x05){sparseMeasure();}
 800484a:	f7ff feec 	bl	8004626 <sparseMeasure>
 800484e:	e7e4      	b.n	800481a <rss_control+0x1a>
	if (val == 0x06){evalData();}
 8004850:	f7ff fbbf 	bl	8003fd2 <evalData>
 8004854:	e7e3      	b.n	800481e <rss_control+0x1e>

08004856 <RegInt_Init>:
void RegInt_Init(void){
 8004856:	b510      	push	{r4, lr}
	queue_cmd_end = 0;
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <RegInt_Init+0xba>)
 800485a:	2373      	movs	r3, #115	; 0x73
 800485c:	2100      	movs	r1, #0
 800485e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 0xFF; i++){
 8004860:	2400      	movs	r4, #0
 8004862:	e001      	b.n	8004868 <RegInt_Init+0x12>
 8004864:	3401      	adds	r4, #1
 8004866:	b2e4      	uxtb	r4, r4
 8004868:	2cff      	cmp	r4, #255	; 0xff
 800486a:	d007      	beq.n	800487c <RegInt_Init+0x26>
		if(i == 3){continue;}//writing to this reg controlls the RSS.//remove if works
 800486c:	2c03      	cmp	r4, #3
 800486e:	d0f9      	beq.n	8004864 <RegInt_Init+0xe>
		RegInt_setregf(i, 0, 1);
 8004870:	2201      	movs	r2, #1
 8004872:	2100      	movs	r1, #0
 8004874:	0020      	movs	r0, r4
 8004876:	f7fe ff69 	bl	800374c <RegInt_setregf>
 800487a:	e7f3      	b.n	8004864 <RegInt_Init+0xe>
	RegInt_setregf(0x07, 115200, 1);//set default baud rate
 800487c:	21e1      	movs	r1, #225	; 0xe1
 800487e:	2201      	movs	r2, #1
 8004880:	0249      	lsls	r1, r1, #9
 8004882:	2007      	movs	r0, #7
 8004884:	f7fe ff62 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x0A, 0, 1);//set default baud rate
 8004888:	2201      	movs	r2, #1
 800488a:	2100      	movs	r1, #0
 800488c:	200a      	movs	r0, #10
 800488e:	f7fe ff5d 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x10, HARDWARE_REVISION, 1);//set product identification register
 8004892:	2201      	movs	r2, #1
 8004894:	491f      	ldr	r1, [pc, #124]	; (8004914 <RegInt_Init+0xbe>)
 8004896:	2010      	movs	r0, #16
 8004898:	f7fe ff58 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0x11, FIRMWARE_REVISION, 1);//set firmware revision register
 800489c:	2201      	movs	r2, #1
 800489e:	491e      	ldr	r1, [pc, #120]	; (8004918 <RegInt_Init+0xc2>)
 80048a0:	2011      	movs	r0, #17
 80048a2:	f7fe ff53 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD4, 600, 1);//set default mean sq distance threshold
 80048a6:	2196      	movs	r1, #150	; 0x96
 80048a8:	2201      	movs	r2, #1
 80048aa:	0089      	lsls	r1, r1, #2
 80048ac:	20d4      	movs	r0, #212	; 0xd4
 80048ae:	f7fe ff4d 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD5, 1000, 1);//set default radius for gf kernal
 80048b2:	21fa      	movs	r1, #250	; 0xfa
 80048b4:	2201      	movs	r2, #1
 80048b6:	0089      	lsls	r1, r1, #2
 80048b8:	20d5      	movs	r0, #213	; 0xd5
 80048ba:	f7fe ff47 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD6, 0x0000000F, 1);//set default eval mode
 80048be:	2201      	movs	r2, #1
 80048c0:	210f      	movs	r1, #15
 80048c2:	20d6      	movs	r0, #214	; 0xd6
 80048c4:	f7fe ff42 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD7, 0x00000002, 1);//set default radius for averaging
 80048c8:	2201      	movs	r2, #1
 80048ca:	2102      	movs	r1, #2
 80048cc:	20d7      	movs	r0, #215	; 0xd7
 80048ce:	f7fe ff3d 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 80048d2:	21fa      	movs	r1, #250	; 0xfa
 80048d4:	2201      	movs	r2, #1
 80048d6:	0049      	lsls	r1, r1, #1
 80048d8:	20d8      	movs	r0, #216	; 0xd8
 80048da:	f7fe ff37 	bl	800374c <RegInt_setregf>
	RegInt_setregf(0xD9, 0x00000000, 1);//sets no bandstop
 80048de:	2201      	movs	r2, #1
 80048e0:	2100      	movs	r1, #0
 80048e2:	20d9      	movs	r0, #217	; 0xd9
 80048e4:	f7fe ff32 	bl	800374c <RegInt_setregf>
	uart_state = 0;
 80048e8:	4909      	ldr	r1, [pc, #36]	; (8004910 <RegInt_Init+0xba>)
 80048ea:	2374      	movs	r3, #116	; 0x74
 80048ec:	2200      	movs	r2, #0
 80048ee:	54ca      	strb	r2, [r1, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 80048f0:	3178      	adds	r1, #120	; 0x78
 80048f2:	3201      	adds	r2, #1
 80048f4:	4809      	ldr	r0, [pc, #36]	; (800491c <RegInt_Init+0xc6>)
 80048f6:	f008 fc49 	bl	800d18c <HAL_UART_Receive_IT>
	DBG_PRINTLN("Registers Initialised");
 80048fa:	4809      	ldr	r0, [pc, #36]	; (8004920 <RegInt_Init+0xca>)
 80048fc:	f011 f90a 	bl	8015b14 <__wrap_printf>
 8004900:	4808      	ldr	r0, [pc, #32]	; (8004924 <RegInt_Init+0xce>)
 8004902:	f011 f907 	bl	8015b14 <__wrap_printf>
 8004906:	200a      	movs	r0, #10
 8004908:	f011 fde6 	bl	80164d8 <putchar>
}
 800490c:	bd10      	pop	{r4, pc}
 800490e:	46c0      	nop			; (mov r8, r8)
 8004910:	2000020c 	.word	0x2000020c
 8004914:	bd010100 	.word	0xbd010100
 8004918:	bf010400 	.word	0xbf010400
 800491c:	20000544 	.word	0x20000544
 8004920:	0801e7b4 	.word	0x0801e7b4
 8004924:	0801ebb8 	.word	0x0801ebb8

08004928 <MX_DMA_Init>:
{
 8004928:	b500      	push	{lr}
 800492a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <MX_DMA_Init+0x3c>)
 800492e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004930:	2301      	movs	r3, #1
 8004932:	4319      	orrs	r1, r3
 8004934:	6391      	str	r1, [r2, #56]	; 0x38
 8004936:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004938:	4013      	ands	r3, r2
 800493a:	9301      	str	r3, [sp, #4]
 800493c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2100      	movs	r1, #0
 8004942:	2009      	movs	r0, #9
 8004944:	f009 fe8a 	bl	800e65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004948:	2009      	movs	r0, #9
 800494a:	f009 fe7b 	bl	800e644 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800494e:	2200      	movs	r2, #0
 8004950:	2100      	movs	r1, #0
 8004952:	200a      	movs	r0, #10
 8004954:	f009 fe82 	bl	800e65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004958:	200a      	movs	r0, #10
 800495a:	f009 fe73 	bl	800e644 <HAL_NVIC_EnableIRQ>
}
 800495e:	b003      	add	sp, #12
 8004960:	bd00      	pop	{pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	40021000 	.word	0x40021000

08004968 <MX_GPIO_Init>:
{
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	46d6      	mov	lr, sl
 800496c:	b500      	push	{lr}
 800496e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	2214      	movs	r2, #20
 8004972:	2100      	movs	r1, #0
 8004974:	a803      	add	r0, sp, #12
 8004976:	f00f f875 	bl	8013a64 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <MX_GPIO_Init+0x118>)
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	2601      	movs	r6, #1
 8004980:	4332      	orrs	r2, r6
 8004982:	635a      	str	r2, [r3, #52]	; 0x34
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	4032      	ands	r2, r6
 8004988:	9201      	str	r2, [sp, #4]
 800498a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800498c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498e:	2702      	movs	r7, #2
 8004990:	433a      	orrs	r2, r7
 8004992:	635a      	str	r2, [r3, #52]	; 0x34
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	403b      	ands	r3, r7
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, MCU_INT_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 800499c:	2188      	movs	r1, #136	; 0x88
 800499e:	2200      	movs	r2, #0
 80049a0:	0049      	lsls	r1, r1, #1
 80049a2:	20a0      	movs	r0, #160	; 0xa0
 80049a4:	05c0      	lsls	r0, r0, #23
 80049a6:	f00a fd91 	bl	800f4cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, A111_CS_N_Pin|A111_CTRL_Pin|PS_ENABLE_Pin, GPIO_PIN_RESET);
 80049aa:	2200      	movs	r2, #0
 80049ac:	4935      	ldr	r1, [pc, #212]	; (8004a84 <MX_GPIO_Init+0x11c>)
 80049ae:	4836      	ldr	r0, [pc, #216]	; (8004a88 <MX_GPIO_Init+0x120>)
 80049b0:	f00a fd8c 	bl	800f4cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PMU_ENABLE_GPIO_Port, PMU_ENABLE_Pin, GPIO_PIN_SET);
 80049b4:	2201      	movs	r2, #1
 80049b6:	2102      	movs	r1, #2
 80049b8:	4833      	ldr	r0, [pc, #204]	; (8004a88 <MX_GPIO_Init+0x120>)
 80049ba:	f00a fd87 	bl	800f4cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 80049be:	2503      	movs	r5, #3
 80049c0:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049c2:	2400      	movs	r4, #0
 80049c4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049c6:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c8:	a903      	add	r1, sp, #12
 80049ca:	20a0      	movs	r0, #160	; 0xa0
 80049cc:	05c0      	lsls	r0, r0, #23
 80049ce:	f00a fe05 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 80049d2:	2310      	movs	r3, #16
 80049d4:	469a      	mov	sl, r3
 80049d6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049d8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 80049de:	a903      	add	r1, sp, #12
 80049e0:	20a0      	movs	r0, #160	; 0xa0
 80049e2:	05c0      	lsls	r0, r0, #23
 80049e4:	f00a fdfa 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 80049e8:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <MX_GPIO_Init+0x124>)
 80049ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ec:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f2:	a903      	add	r1, sp, #12
 80049f4:	4824      	ldr	r0, [pc, #144]	; (8004a88 <MX_GPIO_Init+0x120>)
 80049f6:	f00a fdf1 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 80049fa:	23c0      	movs	r3, #192	; 0xc0
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a00:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a02:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a04:	a903      	add	r1, sp, #12
 8004a06:	4820      	ldr	r0, [pc, #128]	; (8004a88 <MX_GPIO_Init+0x120>)
 8004a08:	f00a fde8 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a12:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a16:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004a18:	a903      	add	r1, sp, #12
 8004a1a:	20a0      	movs	r0, #160	; 0xa0
 8004a1c:	05c0      	lsls	r0, r0, #23
 8004a1e:	f00a fddd 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8004a22:	2308      	movs	r3, #8
 8004a24:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <MX_GPIO_Init+0x128>)
 8004a28:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8004a2c:	a903      	add	r1, sp, #12
 8004a2e:	4816      	ldr	r0, [pc, #88]	; (8004a88 <MX_GPIO_Init+0x120>)
 8004a30:	f00a fdd4 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8004a34:	4653      	mov	r3, sl
 8004a36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a38:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 8004a3e:	a903      	add	r1, sp, #12
 8004a40:	4811      	ldr	r0, [pc, #68]	; (8004a88 <MX_GPIO_Init+0x120>)
 8004a42:	f00a fdcb 	bl	800f5dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 8004a46:	2320      	movs	r3, #32
 8004a48:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004a4a:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <MX_GPIO_Init+0x12c>)
 8004a4c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a4e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8004a50:	a903      	add	r1, sp, #12
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <MX_GPIO_Init+0x120>)
 8004a54:	f00a fdc2 	bl	800f5dc <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2006      	movs	r0, #6
 8004a5e:	f009 fdfd 	bl	800e65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004a62:	2006      	movs	r0, #6
 8004a64:	f009 fdee 	bl	800e644 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2007      	movs	r0, #7
 8004a6e:	f009 fdf5 	bl	800e65c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004a72:	2007      	movs	r0, #7
 8004a74:	f009 fde6 	bl	800e644 <HAL_NVIC_EnableIRQ>
}
 8004a78:	b008      	add	sp, #32
 8004a7a:	bc04      	pop	{r2}
 8004a7c:	4692      	mov	sl, r2
 8004a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a80:	40021000 	.word	0x40021000
 8004a84:	00000211 	.word	0x00000211
 8004a88:	50000400 	.word	0x50000400
 8004a8c:	00000203 	.word	0x00000203
 8004a90:	10110000 	.word	0x10110000
 8004a94:	10310000 	.word	0x10310000

08004a98 <MX_USART2_UART_Init>:
{
 8004a98:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8004a9a:	4c10      	ldr	r4, [pc, #64]	; (8004adc <MX_USART2_UART_Init+0x44>)
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <MX_USART2_UART_Init+0x48>)
 8004a9e:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 8004aa0:	23e1      	movs	r3, #225	; 0xe1
 8004aa2:	031b      	lsls	r3, r3, #12
 8004aa4:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004aaa:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004aac:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004aae:	220c      	movs	r2, #12
 8004ab0:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ab2:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ab4:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ab6:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ab8:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aba:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004abc:	0020      	movs	r0, r4
 8004abe:	f008 feff 	bl	800d8c0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	0020      	movs	r0, r4
 8004ac6:	f008 fa79 	bl	800cfbc <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aca:	2100      	movs	r1, #0
 8004acc:	0020      	movs	r0, r4
 8004ace:	f008 fa4f 	bl	800cf70 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	f008 fa96 	bl	800d004 <HAL_UARTEx_DisableFifoMode>
}
 8004ad8:	bd10      	pop	{r4, pc}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	20000630 	.word	0x20000630
 8004ae0:	40004400 	.word	0x40004400

08004ae4 <MX_USART1_UART_Init>:
{
 8004ae4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8004ae6:	4c10      	ldr	r4, [pc, #64]	; (8004b28 <MX_USART1_UART_Init+0x44>)
 8004ae8:	4b10      	ldr	r3, [pc, #64]	; (8004b2c <MX_USART1_UART_Init+0x48>)
 8004aea:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
 8004aec:	6060      	str	r0, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004af2:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004af4:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004af6:	220c      	movs	r2, #12
 8004af8:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004afa:	22c0      	movs	r2, #192	; 0xc0
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	61a2      	str	r2, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b00:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b02:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b04:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b08:	0020      	movs	r0, r4
 8004b0a:	f008 fed9 	bl	800d8c0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b0e:	2100      	movs	r1, #0
 8004b10:	0020      	movs	r0, r4
 8004b12:	f008 fa53 	bl	800cfbc <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b16:	2100      	movs	r1, #0
 8004b18:	0020      	movs	r0, r4
 8004b1a:	f008 fa29 	bl	800cf70 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004b1e:	0020      	movs	r0, r4
 8004b20:	f008 fa70 	bl	800d004 <HAL_UARTEx_DisableFifoMode>
}
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20000544 	.word	0x20000544
 8004b2c:	40013800 	.word	0x40013800

08004b30 <changeUART1baud>:
void changeUART1baud(uint32_t baudrate){
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	0005      	movs	r5, r0
	HAL_UART_DeInit(&huart1);
 8004b34:	4c06      	ldr	r4, [pc, #24]	; (8004b50 <changeUART1baud+0x20>)
 8004b36:	0020      	movs	r0, r4
 8004b38:	f008 fc42 	bl	800d3c0 <HAL_UART_DeInit>
	MX_USART1_UART_Init(baudrate);
 8004b3c:	0028      	movs	r0, r5
 8004b3e:	f7ff ffd1 	bl	8004ae4 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8004b42:	4904      	ldr	r1, [pc, #16]	; (8004b54 <changeUART1baud+0x24>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	3178      	adds	r1, #120	; 0x78
 8004b48:	0020      	movs	r0, r4
 8004b4a:	f008 fb1f 	bl	800d18c <HAL_UART_Receive_IT>
}
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	20000544 	.word	0x20000544
 8004b54:	2000020c 	.word	0x2000020c

08004b58 <MX_SPI1_Init>:
{
 8004b58:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8004b5a:	480f      	ldr	r0, [pc, #60]	; (8004b98 <MX_SPI1_Init+0x40>)
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <MX_SPI1_Init+0x44>)
 8004b5e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b60:	2382      	movs	r3, #130	; 0x82
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b66:	2300      	movs	r3, #0
 8004b68:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b6a:	22e0      	movs	r2, #224	; 0xe0
 8004b6c:	00d2      	lsls	r2, r2, #3
 8004b6e:	6442      	str	r2, [r0, #68]	; 0x44
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b70:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b72:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	0092      	lsls	r2, r2, #2
 8004b78:	6502      	str	r2, [r0, #80]	; 0x50
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b7a:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b7c:	6583      	str	r3, [r0, #88]	; 0x58
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b7e:	65c3      	str	r3, [r0, #92]	; 0x5c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b80:	6603      	str	r3, [r0, #96]	; 0x60
  hspi1.Init.CRCPolynomial = 7;
 8004b82:	3afa      	subs	r2, #250	; 0xfa
 8004b84:	3aff      	subs	r2, #255	; 0xff
 8004b86:	6642      	str	r2, [r0, #100]	; 0x64
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b88:	6683      	str	r3, [r0, #104]	; 0x68
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b8e:	3038      	adds	r0, #56	; 0x38
 8004b90:	f008 fc35 	bl	800d3fe <HAL_SPI_Init>
}
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	2000028c 	.word	0x2000028c
 8004b9c:	40013000 	.word	0x40013000

08004ba0 <acc_integration_disable_wake_up>:
	}
}


static void acc_integration_disable_wake_up(void)
{
 8004ba0:	b510      	push	{r4, lr}
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8004ba2:	4802      	ldr	r0, [pc, #8]	; (8004bac <acc_integration_disable_wake_up+0xc>)
 8004ba4:	3038      	adds	r0, #56	; 0x38
 8004ba6:	f009 f97b 	bl	800dea0 <HAL_RTCEx_DeactivateWakeUpTimer>
	{
		Error_Handler();
	}
}
 8004baa:	bd10      	pop	{r4, pc}
 8004bac:	2000018c 	.word	0x2000018c

08004bb0 <acc_integration_enable_wake_up>:
{
 8004bb0:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <acc_integration_enable_wake_up+0x48>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
	if (time_usec > 30000000)
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <acc_integration_enable_wake_up+0x4c>)
 8004bba:	4298      	cmp	r0, r3
 8004bbc:	d909      	bls.n	8004bd2 <acc_integration_enable_wake_up+0x22>
		wakeup_counter = (time_usec / 1000000) - 1;
 8004bbe:	4910      	ldr	r1, [pc, #64]	; (8004c00 <acc_integration_enable_wake_up+0x50>)
 8004bc0:	f00c f9da 	bl	8010f78 <__udivsi3>
 8004bc4:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 8004bc6:	2204      	movs	r2, #4
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 8004bc8:	480e      	ldr	r0, [pc, #56]	; (8004c04 <acc_integration_enable_wake_up+0x54>)
 8004bca:	3038      	adds	r0, #56	; 0x38
 8004bcc:	f009 f9ae 	bl	800df2c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8004bd0:	bd10      	pop	{r4, pc}
	else if (time_usec > 100000)
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <acc_integration_enable_wake_up+0x58>)
 8004bd4:	4298      	cmp	r0, r3
 8004bd6:	d907      	bls.n	8004be8 <acc_integration_enable_wake_up+0x38>
		wakeup_counter = (time_usec * 2 / 1000) - 1;
 8004bd8:	0040      	lsls	r0, r0, #1
 8004bda:	21fa      	movs	r1, #250	; 0xfa
 8004bdc:	0089      	lsls	r1, r1, #2
 8004bde:	f00c f9cb 	bl	8010f78 <__udivsi3>
 8004be2:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 8004be4:	2200      	movs	r2, #0
 8004be6:	e7ef      	b.n	8004bc8 <acc_integration_enable_wake_up+0x18>
		wakeup_counter = (time_usec * 16 / 1000) - 1;
 8004be8:	0100      	lsls	r0, r0, #4
 8004bea:	21fa      	movs	r1, #250	; 0xfa
 8004bec:	0089      	lsls	r1, r1, #2
 8004bee:	f00c f9c3 	bl	8010f78 <__udivsi3>
 8004bf2:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV2;
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	e7e7      	b.n	8004bc8 <acc_integration_enable_wake_up+0x18>
 8004bf8:	2000030c 	.word	0x2000030c
 8004bfc:	01c9c380 	.word	0x01c9c380
 8004c00:	000f4240 	.word	0x000f4240
 8004c04:	2000018c 	.word	0x2000018c
 8004c08:	000186a0 	.word	0x000186a0

08004c0c <acc_integration_sleep_us>:
	acc_integration_sleep_us(time_msec * 1000);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 8004c0c:	b510      	push	{r4, lr}
	acc_integration_enable_wake_up(time_usec);
 8004c0e:	f7ff ffcf 	bl	8004bb0 <acc_integration_enable_wake_up>
 8004c12:	e004      	b.n	8004c1e <acc_integration_sleep_us+0x12>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004c14:	b662      	cpsie	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c1a:	f3bf 8f6f 	isb	sy

	while (!rtc_wakeup_triggered)
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <acc_integration_sleep_us+0x3c>)
 8004c20:	7f1b      	ldrb	r3, [r3, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <acc_integration_sleep_us+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 8004c26:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8004c28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c2c:	f3bf 8f6f 	isb	sy
	{
		// Turn off interrupts
		disable_interrupts();

		if (!rtc_wakeup_triggered)
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <acc_integration_sleep_us+0x3c>)
 8004c32:	7f1b      	ldrb	r3, [r3, #28]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ed      	bne.n	8004c14 <acc_integration_sleep_us+0x8>
		{
			__WFI();
 8004c38:	bf30      	wfi
 8004c3a:	e7eb      	b.n	8004c14 <acc_integration_sleep_us+0x8>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

	rtc_wakeup_triggered = false;
 8004c3c:	4b02      	ldr	r3, [pc, #8]	; (8004c48 <acc_integration_sleep_us+0x3c>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	771a      	strb	r2, [r3, #28]

	acc_integration_disable_wake_up();
 8004c42:	f7ff ffad 	bl	8004ba0 <acc_integration_disable_wake_up>
}
 8004c46:	bd10      	pop	{r4, pc}
 8004c48:	2000030c 	.word	0x2000030c

08004c4c <acc_hal_integration_sensor_power_off>:
{
 8004c4c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8004c4e:	4c0c      	ldr	r4, [pc, #48]	; (8004c80 <acc_hal_integration_sensor_power_off+0x34>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	2101      	movs	r1, #1
 8004c54:	0020      	movs	r0, r4
 8004c56:	f00a fc39 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 8004c5a:	2180      	movs	r1, #128	; 0x80
 8004c5c:	20a0      	movs	r0, #160	; 0xa0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	0049      	lsls	r1, r1, #1
 8004c62:	05c0      	lsls	r0, r0, #23
 8004c64:	f00a fc32 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	0089      	lsls	r1, r1, #2
 8004c6e:	0020      	movs	r0, r4
 8004c70:	f00a fc2c 	bl	800f4cc <HAL_GPIO_WritePin>
	acc_integration_sleep_us(2000);
 8004c74:	20fa      	movs	r0, #250	; 0xfa
 8004c76:	00c0      	lsls	r0, r0, #3
 8004c78:	f7ff ffc8 	bl	8004c0c <acc_integration_sleep_us>
}
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	50000400 	.word	0x50000400

08004c84 <acc_hal_integration_sensor_power_on>:
{
 8004c84:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
 8004c86:	4c0e      	ldr	r4, [pc, #56]	; (8004cc0 <acc_hal_integration_sensor_power_on+0x3c>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2110      	movs	r1, #16
 8004c8c:	0020      	movs	r0, r4
 8004c8e:	f00a fc1d 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	2201      	movs	r2, #1
 8004c96:	0089      	lsls	r1, r1, #2
 8004c98:	0020      	movs	r0, r4
 8004c9a:	f00a fc17 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 8004c9e:	2180      	movs	r1, #128	; 0x80
 8004ca0:	20a0      	movs	r0, #160	; 0xa0
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	0049      	lsls	r1, r1, #1
 8004ca6:	05c0      	lsls	r0, r0, #23
 8004ca8:	f00a fc10 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8004cac:	2201      	movs	r2, #1
 8004cae:	2101      	movs	r1, #1
 8004cb0:	0020      	movs	r0, r4
 8004cb2:	f00a fc0b 	bl	800f4cc <HAL_GPIO_WritePin>
	acc_integration_sleep_us(2000);
 8004cb6:	20fa      	movs	r0, #250	; 0xfa
 8004cb8:	00c0      	lsls	r0, r0, #3
 8004cba:	f7ff ffa7 	bl	8004c0c <acc_integration_sleep_us>
}
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	50000400 	.word	0x50000400

08004cc4 <MX_RTC_Init>:
{
 8004cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc6:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8004cc8:	ad0b      	add	r5, sp, #44	; 0x2c
 8004cca:	2214      	movs	r2, #20
 8004ccc:	2100      	movs	r1, #0
 8004cce:	0028      	movs	r0, r5
 8004cd0:	f00e fec8 	bl	8013a64 <memset>
  RTC_DateTypeDef sDate = {0};
 8004cd4:	ae0a      	add	r6, sp, #40	; 0x28
 8004cd6:	2400      	movs	r4, #0
 8004cd8:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004cda:	2228      	movs	r2, #40	; 0x28
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4668      	mov	r0, sp
 8004ce0:	f00e fec0 	bl	8013a64 <memset>
  hrtc.Instance = RTC;
 8004ce4:	4f22      	ldr	r7, [pc, #136]	; (8004d70 <MX_RTC_Init+0xac>)
 8004ce6:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <MX_RTC_Init+0xb0>)
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004cea:	643c      	str	r4, [r7, #64]	; 0x40
  hrtc.Init.AsynchPrediv = 31;
 8004cec:	231f      	movs	r3, #31
 8004cee:	647b      	str	r3, [r7, #68]	; 0x44
  hrtc.Init.SynchPrediv = 999;
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <MX_RTC_Init+0xb4>)
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cf4:	64fc      	str	r4, [r7, #76]	; 0x4c
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004cf6:	653c      	str	r4, [r7, #80]	; 0x50
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cf8:	657c      	str	r4, [r7, #84]	; 0x54
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004cfa:	2380      	movs	r3, #128	; 0x80
 8004cfc:	05db      	lsls	r3, r3, #23
 8004cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8004d00:	65fc      	str	r4, [r7, #92]	; 0x5c
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004d02:	3738      	adds	r7, #56	; 0x38
 8004d04:	0038      	movs	r0, r7
 8004d06:	f009 fa9b 	bl	800e240 <HAL_RTC_Init>
  sTime.Hours = 0;
 8004d0a:	702c      	strb	r4, [r5, #0]
  sTime.Minutes = 0;
 8004d0c:	706c      	strb	r4, [r5, #1]
  sTime.Seconds = 0;
 8004d0e:	70ac      	strb	r4, [r5, #2]
  sTime.SubSeconds = 0;
 8004d10:	606c      	str	r4, [r5, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004d12:	60ec      	str	r4, [r5, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004d14:	612c      	str	r4, [r5, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004d16:	2200      	movs	r2, #0
 8004d18:	0029      	movs	r1, r5
 8004d1a:	0038      	movs	r0, r7
 8004d1c:	f009 fa2a 	bl	800e174 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004d20:	2501      	movs	r5, #1
 8004d22:	7035      	strb	r5, [r6, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004d24:	7075      	strb	r5, [r6, #1]
  sDate.Date = 1;
 8004d26:	70b5      	strb	r5, [r6, #2]
  sDate.Year = 0;
 8004d28:	70f4      	strb	r4, [r6, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	0031      	movs	r1, r6
 8004d2e:	0038      	movs	r0, r7
 8004d30:	f009 f9ca 	bl	800e0c8 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0;
 8004d34:	466b      	mov	r3, sp
 8004d36:	701c      	strb	r4, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004d38:	705c      	strb	r4, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004d3a:	709c      	strb	r4, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004d3c:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004d3e:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004d40:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004d42:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004d44:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004d46:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004d48:	2320      	movs	r3, #32
 8004d4a:	466a      	mov	r2, sp
 8004d4c:	54d5      	strb	r5, [r2, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 8004d4e:	33e0      	adds	r3, #224	; 0xe0
 8004d50:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004d52:	2200      	movs	r2, #0
 8004d54:	4669      	mov	r1, sp
 8004d56:	0038      	movs	r0, r7
 8004d58:	f009 fb3a 	bl	800e3d0 <HAL_RTC_SetAlarm_IT>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4907      	ldr	r1, [pc, #28]	; (8004d7c <MX_RTC_Init+0xb8>)
 8004d60:	0038      	movs	r0, r7
 8004d62:	f009 f8e3 	bl	800df2c <HAL_RTCEx_SetWakeUpTimer_IT>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8004d66:	0038      	movs	r0, r7
 8004d68:	f009 f89a 	bl	800dea0 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 8004d6c:	b011      	add	sp, #68	; 0x44
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d70:	2000018c 	.word	0x2000018c
 8004d74:	40002800 	.word	0x40002800
 8004d78:	000003e7 	.word	0x000003e7
 8004d7c:	0000ffff 	.word	0x0000ffff

08004d80 <MX_I2C1_Init>:
{
 8004d80:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8004d82:	4c0e      	ldr	r4, [pc, #56]	; (8004dbc <MX_I2C1_Init+0x3c>)
 8004d84:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <MX_I2C1_Init+0x40>)
 8004d86:	6223      	str	r3, [r4, #32]
  hi2c1.Init.Timing = 0x10707DBC;
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <MX_I2C1_Init+0x44>)
 8004d8a:	6263      	str	r3, [r4, #36]	; 0x24
  hi2c1.Init.OwnAddress1 = 164;
 8004d8c:	23a4      	movs	r3, #164	; 0xa4
 8004d8e:	62a3      	str	r3, [r4, #40]	; 0x28
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d90:	3ba3      	subs	r3, #163	; 0xa3
 8004d92:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c1.Init.OwnAddress2 = 0;
 8004d98:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004d9a:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d9c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004d9e:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004da0:	3420      	adds	r4, #32
 8004da2:	0020      	movs	r0, r4
 8004da4:	f008 fca2 	bl	800d6ec <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004da8:	2100      	movs	r1, #0
 8004daa:	0020      	movs	r0, r4
 8004dac:	f008 fc3a 	bl	800d624 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004db0:	2100      	movs	r1, #0
 8004db2:	0020      	movs	r0, r4
 8004db4:	f008 fc0c 	bl	800d5d0 <HAL_I2CEx_ConfigDigitalFilter>
}
 8004db8:	bd10      	pop	{r4, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	2000030c 	.word	0x2000030c
 8004dc0:	40005400 	.word	0x40005400
 8004dc4:	10707dbc 	.word	0x10707dbc

08004dc8 <SystemClock_Config>:
{
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dcc:	2238      	movs	r2, #56	; 0x38
 8004dce:	2100      	movs	r1, #0
 8004dd0:	a812      	add	r0, sp, #72	; 0x48
 8004dd2:	f00e fe47 	bl	8013a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dd6:	2210      	movs	r2, #16
 8004dd8:	2100      	movs	r1, #0
 8004dda:	a80e      	add	r0, sp, #56	; 0x38
 8004ddc:	f00e fe42 	bl	8013a64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de0:	2234      	movs	r2, #52	; 0x34
 8004de2:	2100      	movs	r1, #0
 8004de4:	a801      	add	r0, sp, #4
 8004de6:	f00e fe3d 	bl	8013a64 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dea:	2680      	movs	r6, #128	; 0x80
 8004dec:	00b6      	lsls	r6, r6, #2
 8004dee:	0030      	movs	r0, r6
 8004df0:	f009 fc98 	bl	800e724 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004df4:	230a      	movs	r3, #10
 8004df6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004df8:	33f6      	adds	r3, #246	; 0xf6
 8004dfa:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004dfc:	2400      	movs	r4, #0
 8004dfe:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e00:	3bc0      	subs	r3, #192	; 0xc0
 8004e02:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004e04:	3b3f      	subs	r3, #63	; 0x3f
 8004e06:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e08:	2502      	movs	r5, #2
 8004e0a:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e0c:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004e0e:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004e10:	3307      	adds	r3, #7
 8004e12:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	029b      	lsls	r3, r3, #10
 8004e18:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	049b      	lsls	r3, r3, #18
 8004e1e:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	059b      	lsls	r3, r3, #22
 8004e24:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e26:	a812      	add	r0, sp, #72	; 0x48
 8004e28:	f00a f8e0 	bl	800efec <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e30:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e32:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004e34:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004e36:	2102      	movs	r1, #2
 8004e38:	a80e      	add	r0, sp, #56	; 0x38
 8004e3a:	f00a f813 	bl	800ee64 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <SystemClock_Config+0x8c>)
 8004e40:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004e42:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e44:	9403      	str	r4, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e46:	9405      	str	r4, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004e48:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e4a:	a801      	add	r0, sp, #4
 8004e4c:	f009 fee8 	bl	800ec20 <HAL_RCCEx_PeriphCLKConfig>
}
 8004e50:	b020      	add	sp, #128	; 0x80
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	00020043 	.word	0x00020043

08004e58 <sleepMCU>:
void sleepMCU(uint32_t mode){
 8004e58:	b510      	push	{r4, lr}
    if(mode == 0x00000000){return;}
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d006      	beq.n	8004e6c <sleepMCU+0x14>
    if(mode == 0x00000001){    
 8004e5e:	2801      	cmp	r0, #1
 8004e60:	d005      	beq.n	8004e6e <sleepMCU+0x16>
    RegInt_setregf(0x0A,0x00000000,1);
 8004e62:	2201      	movs	r2, #1
 8004e64:	2100      	movs	r1, #0
 8004e66:	200a      	movs	r0, #10
 8004e68:	f7fe fc70 	bl	800374c <RegInt_setregf>
}
 8004e6c:	bd10      	pop	{r4, pc}
        stopService();
 8004e6e:	f7fe fd1b 	bl	80038a8 <stopService>
        INF_PRINTLN("STM32 Sleep");
 8004e72:	4c13      	ldr	r4, [pc, #76]	; (8004ec0 <sleepMCU+0x68>)
 8004e74:	0020      	movs	r0, r4
 8004e76:	f010 fe4d 	bl	8015b14 <__wrap_printf>
 8004e7a:	4812      	ldr	r0, [pc, #72]	; (8004ec4 <sleepMCU+0x6c>)
 8004e7c:	f010 fe4a 	bl	8015b14 <__wrap_printf>
 8004e80:	200a      	movs	r0, #10
 8004e82:	f011 fb29 	bl	80164d8 <putchar>
        HAL_SuspendTick();
 8004e86:	f008 fc9f 	bl	800d7c8 <HAL_SuspendTick>
        HAL_PWR_DisableSleepOnExit();
 8004e8a:	f009 fc75 	bl	800e778 <HAL_PWR_DisableSleepOnExit>
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 8004e8e:	2080      	movs	r0, #128	; 0x80
 8004e90:	2102      	movs	r1, #2
 8004e92:	01c0      	lsls	r0, r0, #7
 8004e94:	f009 fc78 	bl	800e788 <HAL_PWR_EnterSTOPMode>
        SystemClock_Config();
 8004e98:	f7ff ff96 	bl	8004dc8 <SystemClock_Config>
        HAL_ResumeTick();
 8004e9c:	f008 fc8c 	bl	800d7b8 <HAL_ResumeTick>
        uint32_t baudrate = RegInt_getreg(0x07);
 8004ea0:	2007      	movs	r0, #7
 8004ea2:	f7fc ffef 	bl	8001e84 <RegInt_getreg>
        changeUART1baud(baudrate);
 8004ea6:	f7ff fe43 	bl	8004b30 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 8004eaa:	0020      	movs	r0, r4
 8004eac:	f010 fe32 	bl	8015b14 <__wrap_printf>
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <sleepMCU+0x70>)
 8004eb2:	f010 fe2f 	bl	8015b14 <__wrap_printf>
 8004eb6:	200a      	movs	r0, #10
 8004eb8:	f011 fb0e 	bl	80164d8 <putchar>
 8004ebc:	e7d1      	b.n	8004e62 <sleepMCU+0xa>
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	0801e748 	.word	0x0801e748
 8004ec4:	0801ebd0 	.word	0x0801ebd0
 8004ec8:	0801ebdc 	.word	0x0801ebdc

08004ecc <RegInt_regaction>:
void RegInt_regaction(uint8_t reg, uint32_t val){
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	0004      	movs	r4, r0
 8004ed0:	000d      	movs	r5, r1
	if(reg == 0x03){
 8004ed2:	2803      	cmp	r0, #3
 8004ed4:	d004      	beq.n	8004ee0 <RegInt_regaction+0x14>
	if(reg == 0x07){
 8004ed6:	2c07      	cmp	r4, #7
 8004ed8:	d006      	beq.n	8004ee8 <RegInt_regaction+0x1c>
    if(reg == 0x0A){
 8004eda:	2c0a      	cmp	r4, #10
 8004edc:	d008      	beq.n	8004ef0 <RegInt_regaction+0x24>
}
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
		rss_control(val);
 8004ee0:	0008      	movs	r0, r1
 8004ee2:	f7ff fc8d 	bl	8004800 <rss_control>
 8004ee6:	e7f6      	b.n	8004ed6 <RegInt_regaction+0xa>
		changeUART1baud(val);
 8004ee8:	0028      	movs	r0, r5
 8004eea:	f7ff fe21 	bl	8004b30 <changeUART1baud>
 8004eee:	e7f4      	b.n	8004eda <RegInt_regaction+0xe>
		sleepMCU(val);
 8004ef0:	0028      	movs	r0, r5
 8004ef2:	f7ff ffb1 	bl	8004e58 <sleepMCU>
 8004ef6:	e7f2      	b.n	8004ede <RegInt_regaction+0x12>

08004ef8 <EnableBootLoader>:
{
 8004ef8:	b500      	push	{lr}
 8004efa:	b091      	sub	sp, #68	; 0x44
  FLASH_OBProgramInitTypeDef obInit = {0};
 8004efc:	2238      	movs	r2, #56	; 0x38
 8004efe:	2100      	movs	r1, #0
 8004f00:	a802      	add	r0, sp, #8
 8004f02:	f00e fdaf 	bl	8013a64 <memset>
  HAL_FLASHEx_OBGetConfig(&obInit);
 8004f06:	a802      	add	r0, sp, #8
 8004f08:	f009 fd8e 	bl	800ea28 <HAL_FLASHEx_OBGetConfig>
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 8004f0c:	9b08      	ldr	r3, [sp, #32]
 8004f0e:	22c0      	movs	r2, #192	; 0xc0
 8004f10:	0492      	lsls	r2, r2, #18
 8004f12:	4013      	ands	r3, r2
 8004f14:	2280      	movs	r2, #128	; 0x80
 8004f16:	0492      	lsls	r2, r2, #18
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d018      	beq.n	8004f4e <EnableBootLoader+0x56>
  printf("Enabling BOOT0\n");
 8004f1c:	4818      	ldr	r0, [pc, #96]	; (8004f80 <EnableBootLoader+0x88>)
 8004f1e:	f010 fde7 	bl	8015af0 <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT1;
 8004f22:	9b08      	ldr	r3, [sp, #32]
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <EnableBootLoader+0x8c>)
 8004f28:	9a01      	ldr	r2, [sp, #4]
 8004f2a:	4013      	ands	r3, r2
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <EnableBootLoader+0x90>)
 8004f2e:	4013      	ands	r3, r2
  obInit.USERConfig |= OB_BOOT1_SYSTEM;
 8004f30:	2280      	movs	r2, #128	; 0x80
 8004f32:	0492      	lsls	r2, r2, #18
 8004f34:	4313      	orrs	r3, r2
 8004f36:	9308      	str	r3, [sp, #32]
  obInit.OptionType = OPTIONBYTE_USER;
 8004f38:	2304      	movs	r3, #4
 8004f3a:	9302      	str	r3, [sp, #8]
  HAL_StatusTypeDef result = HAL_FLASH_Unlock();
 8004f3c:	f009 fe58 	bl	800ebf0 <HAL_FLASH_Unlock>
  if (result == HAL_OK)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d008      	beq.n	8004f56 <EnableBootLoader+0x5e>
  printf("BOOT0 enable failed\n");
 8004f44:	4811      	ldr	r0, [pc, #68]	; (8004f8c <EnableBootLoader+0x94>)
 8004f46:	f010 fdd3 	bl	8015af0 <__wrap_puts>
}
 8004f4a:	b011      	add	sp, #68	; 0x44
 8004f4c:	bd00      	pop	{pc}
    printf("Boot config OK\n");
 8004f4e:	4810      	ldr	r0, [pc, #64]	; (8004f90 <EnableBootLoader+0x98>)
 8004f50:	f010 fdce 	bl	8015af0 <__wrap_puts>
 8004f54:	e7f9      	b.n	8004f4a <EnableBootLoader+0x52>
    result = HAL_FLASH_OB_Unlock();
 8004f56:	f009 fe23 	bl	800eba0 <HAL_FLASH_OB_Unlock>
    if (result == HAL_OK)
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d002      	beq.n	8004f64 <EnableBootLoader+0x6c>
    HAL_FLASH_Lock();
 8004f5e:	f009 fe37 	bl	800ebd0 <HAL_FLASH_Lock>
 8004f62:	e7ef      	b.n	8004f44 <EnableBootLoader+0x4c>
      result = HAL_FLASHEx_OBProgram(&obInit);
 8004f64:	a802      	add	r0, sp, #8
 8004f66:	f009 fd8d 	bl	800ea84 <HAL_FLASHEx_OBProgram>
      if (result == HAL_OK)
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d002      	beq.n	8004f74 <EnableBootLoader+0x7c>
      HAL_FLASH_OB_Lock();
 8004f6e:	f009 fe07 	bl	800eb80 <HAL_FLASH_OB_Lock>
 8004f72:	e7f4      	b.n	8004f5e <EnableBootLoader+0x66>
        printf("Reset and reload\n");
 8004f74:	4807      	ldr	r0, [pc, #28]	; (8004f94 <EnableBootLoader+0x9c>)
 8004f76:	f010 fdbb 	bl	8015af0 <__wrap_puts>
        HAL_FLASH_OB_Launch();
 8004f7a:	f009 fdf7 	bl	800eb6c <HAL_FLASH_OB_Launch>
 8004f7e:	e7f6      	b.n	8004f6e <EnableBootLoader+0x76>
 8004f80:	0801ebf8 	.word	0x0801ebf8
 8004f84:	fdffffff 	.word	0xfdffffff
 8004f88:	feffffff 	.word	0xfeffffff
 8004f8c:	0801ec1c 	.word	0x0801ec1c
 8004f90:	0801ebe8 	.word	0x0801ebe8
 8004f94:	0801ec08 	.word	0x0801ec08

08004f98 <acc_integration_get_time>:
	}
}


uint32_t acc_integration_get_time(void)
{
 8004f98:	b510      	push	{r4, lr}
	return HAL_GetTick();
 8004f9a:	f008 fc1d 	bl	800d7d8 <HAL_GetTick>
}
 8004f9e:	bd10      	pop	{r4, pc}

08004fa0 <get_rtc_tick>:
{
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	b086      	sub	sp, #24
	RTC_DateTypeDef rtc_date = { 0 };
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9305      	str	r3, [sp, #20]
	RTC_TimeTypeDef rtc_time = { 0 };
 8004fa8:	2214      	movs	r2, #20
 8004faa:	2100      	movs	r1, #0
 8004fac:	4668      	mov	r0, sp
 8004fae:	f00e fd59 	bl	8013a64 <memset>
	while ((hrtc.Instance->ICSR & RTC_ICSR_SHPF) != RESET)
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <get_rtc_tick+0x40>)
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	071b      	lsls	r3, r3, #28
 8004fba:	d4fa      	bmi.n	8004fb2 <get_rtc_tick+0x12>
	if (HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK)
 8004fbc:	4c08      	ldr	r4, [pc, #32]	; (8004fe0 <get_rtc_tick+0x40>)
 8004fbe:	3438      	adds	r4, #56	; 0x38
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4669      	mov	r1, sp
 8004fc4:	0020      	movs	r0, r4
 8004fc6:	f008 fad7 	bl	800d578 <HAL_RTC_GetTime>
	if (HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN) != HAL_OK)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	a905      	add	r1, sp, #20
 8004fce:	0020      	movs	r0, r4
 8004fd0:	f008 faad 	bl	800d52e <HAL_RTC_GetDate>
	return rtc_time_to_tick(&rtc_time);
 8004fd4:	4668      	mov	r0, sp
 8004fd6:	f7fd f8e5 	bl	80021a4 <rtc_time_to_tick>
}
 8004fda:	b006      	add	sp, #24
 8004fdc:	bd10      	pop	{r4, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	2000018c 	.word	0x2000018c

08004fe4 <rtc_set_next_wakeup_time>:
}
 8004fe4:	4770      	bx	lr

08004fe6 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8004fe6:	b40c      	push	{r2, r3}
 8004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fea:	b0af      	sub	sp, #188	; 0xbc
 8004fec:	0006      	movs	r6, r0
 8004fee:	000d      	movs	r5, r1
 8004ff0:	ab34      	add	r3, sp, #208	; 0xd0
 8004ff2:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 8004ff4:	9307      	str	r3, [sp, #28]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8004ff6:	2196      	movs	r1, #150	; 0x96
 8004ff8:	a808      	add	r0, sp, #32
 8004ffa:	f010 fdaf 	bl	8015b5c <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 8004ffe:	2895      	cmp	r0, #149	; 0x95
 8005000:	dd0a      	ble.n	8005018 <acc_integration_log+0x32>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8005002:	ab08      	add	r3, sp, #32
 8005004:	222e      	movs	r2, #46	; 0x2e
 8005006:	2192      	movs	r1, #146	; 0x92
 8005008:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 800500a:	3101      	adds	r1, #1
 800500c:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 800500e:	3101      	adds	r1, #1
 8005010:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 8005012:	3267      	adds	r2, #103	; 0x67
 8005014:	2100      	movs	r1, #0
 8005016:	5499      	strb	r1, [r3, r2]
	}

	uint32_t time_ms = acc_integration_get_time();
 8005018:	f7ff ffbe 	bl	8004f98 <acc_integration_get_time>
 800501c:	0004      	movs	r4, r0
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 800501e:	491a      	ldr	r1, [pc, #104]	; (8005088 <acc_integration_log+0xa2>)
 8005020:	f00b ffaa 	bl	8010f78 <__udivsi3>
 8005024:	9004      	str	r0, [sp, #16]
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8005026:	4919      	ldr	r1, [pc, #100]	; (800508c <acc_integration_log+0xa6>)
 8005028:	0020      	movs	r0, r4
 800502a:	f00b ffa5 	bl	8010f78 <__udivsi3>
 800502e:	213c      	movs	r1, #60	; 0x3c
 8005030:	f00c f828 	bl	8011084 <__aeabi_uidivmod>
 8005034:	9105      	str	r1, [sp, #20]
	unsigned int seconds      = timestamp / 1000 % 60;
 8005036:	21fa      	movs	r1, #250	; 0xfa
 8005038:	0089      	lsls	r1, r1, #2
 800503a:	0020      	movs	r0, r4
 800503c:	f00b ff9c 	bl	8010f78 <__udivsi3>
 8005040:	213c      	movs	r1, #60	; 0x3c
 8005042:	f00c f81f 	bl	8011084 <__aeabi_uidivmod>
 8005046:	000f      	movs	r7, r1
	unsigned int milliseconds = timestamp % 1000;
 8005048:	21fa      	movs	r1, #250	; 0xfa
 800504a:	0089      	lsls	r1, r1, #2
 800504c:	0020      	movs	r0, r4
 800504e:	f00c f819 	bl	8011084 <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8005052:	2e04      	cmp	r6, #4
 8005054:	d816      	bhi.n	8005084 <acc_integration_log+0x9e>
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <acc_integration_log+0xaa>)
 8005058:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 800505a:	aa08      	add	r2, sp, #32
 800505c:	9203      	str	r2, [sp, #12]
 800505e:	9502      	str	r5, [sp, #8]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	9100      	str	r1, [sp, #0]
 8005064:	003b      	movs	r3, r7
 8005066:	9a05      	ldr	r2, [sp, #20]
 8005068:	9904      	ldr	r1, [sp, #16]
 800506a:	480a      	ldr	r0, [pc, #40]	; (8005094 <acc_integration_log+0xae>)
 800506c:	f010 fd52 	bl	8015b14 <__wrap_printf>

	fflush(stdout);
 8005070:	4b09      	ldr	r3, [pc, #36]	; (8005098 <acc_integration_log+0xb2>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6898      	ldr	r0, [r3, #8]
 8005076:	f00e fbe7 	bl	8013848 <fflush>

	va_end(ap);
}
 800507a:	b02f      	add	sp, #188	; 0xbc
 800507c:	bcf0      	pop	{r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	b002      	add	sp, #8
 8005082:	4718      	bx	r3
	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8005084:	233f      	movs	r3, #63	; 0x3f
 8005086:	e7e8      	b.n	800505a <acc_integration_log+0x74>
 8005088:	0036ee80 	.word	0x0036ee80
 800508c:	0000ea60 	.word	0x0000ea60
 8005090:	0801ec54 	.word	0x0801ec54
 8005094:	0801ec30 	.word	0x0801ec30
 8005098:	20000008 	.word	0x20000008

0800509c <pulse_hibernate_pin>:
{
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	0005      	movs	r5, r0
	for (uint32_t i = 0; i < nbr_pulses; i++)
 80050a0:	2400      	movs	r4, #0
 80050a2:	e017      	b.n	80050d4 <pulse_hibernate_pin+0x38>
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_SET);
 80050a4:	2201      	movs	r2, #1
 80050a6:	2110      	movs	r1, #16
 80050a8:	480c      	ldr	r0, [pc, #48]	; (80050dc <pulse_hibernate_pin+0x40>)
 80050aa:	f00a fa0f 	bl	800f4cc <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_SET)
 80050ae:	2110      	movs	r1, #16
 80050b0:	480a      	ldr	r0, [pc, #40]	; (80050dc <pulse_hibernate_pin+0x40>)
 80050b2:	f00a fa11 	bl	800f4d8 <HAL_GPIO_ReadPin>
 80050b6:	2801      	cmp	r0, #1
 80050b8:	d1f4      	bne.n	80050a4 <pulse_hibernate_pin+0x8>
 80050ba:	e004      	b.n	80050c6 <pulse_hibernate_pin+0x2a>
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
 80050bc:	2200      	movs	r2, #0
 80050be:	2110      	movs	r1, #16
 80050c0:	4806      	ldr	r0, [pc, #24]	; (80050dc <pulse_hibernate_pin+0x40>)
 80050c2:	f00a fa03 	bl	800f4cc <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
 80050c6:	2110      	movs	r1, #16
 80050c8:	4804      	ldr	r0, [pc, #16]	; (80050dc <pulse_hibernate_pin+0x40>)
 80050ca:	f00a fa05 	bl	800f4d8 <HAL_GPIO_ReadPin>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d1f4      	bne.n	80050bc <pulse_hibernate_pin+0x20>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 80050d2:	3401      	adds	r4, #1
 80050d4:	42ac      	cmp	r4, r5
 80050d6:	d3ea      	bcc.n	80050ae <pulse_hibernate_pin+0x12>
}
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	50000400 	.word	0x50000400

080050e0 <acc_hal_integration_sensor_hibernate_exit>:
{
 80050e0:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	2201      	movs	r2, #1
 80050e6:	0089      	lsls	r1, r1, #2
 80050e8:	4806      	ldr	r0, [pc, #24]	; (8005104 <acc_hal_integration_sensor_hibernate_exit+0x24>)
 80050ea:	f00a f9ef 	bl	800f4cc <HAL_GPIO_WritePin>
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 80050ee:	2003      	movs	r0, #3
 80050f0:	f7ff ffd4 	bl	800509c <pulse_hibernate_pin>
	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 80050f4:	20fa      	movs	r0, #250	; 0xfa
 80050f6:	00c0      	lsls	r0, r0, #3
 80050f8:	f7ff fd88 	bl	8004c0c <acc_integration_sleep_us>
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 80050fc:	200a      	movs	r0, #10
 80050fe:	f7ff ffcd 	bl	800509c <pulse_hibernate_pin>
}
 8005102:	bd10      	pop	{r4, pc}
 8005104:	50000400 	.word	0x50000400

08005108 <acc_hal_integration_sensor_hibernate_enter>:
{
 8005108:	b510      	push	{r4, lr}
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 800510a:	200a      	movs	r0, #10
 800510c:	f7ff ffc6 	bl	800509c <pulse_hibernate_pin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	2200      	movs	r2, #0
 8005114:	0089      	lsls	r1, r1, #2
 8005116:	4802      	ldr	r0, [pc, #8]	; (8005120 <acc_hal_integration_sensor_hibernate_enter+0x18>)
 8005118:	f00a f9d8 	bl	800f4cc <HAL_GPIO_WritePin>
}
 800511c:	bd10      	pop	{r4, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	50000400 	.word	0x50000400

08005124 <acc_hal_integration_wait_for_sensor_interrupt>:
{
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	000d      	movs	r5, r1
	const uint32_t wait_begin_ms = HAL_GetTick();
 8005128:	f008 fb56 	bl	800d7d8 <HAL_GetTick>
 800512c:	0004      	movs	r4, r0
 800512e:	e002      	b.n	8005136 <acc_hal_integration_wait_for_sensor_interrupt+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8005130:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
 8005132:	f3bf 8f6f 	isb	sy
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8005136:	2108      	movs	r1, #8
 8005138:	480d      	ldr	r0, [pc, #52]	; (8005170 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 800513a:	f00a f9cd 	bl	800f4d8 <HAL_GPIO_ReadPin>
 800513e:	2801      	cmp	r0, #1
 8005140:	d00d      	beq.n	800515e <acc_hal_integration_wait_for_sensor_interrupt+0x3a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8005142:	f008 fb49 	bl	800d7d8 <HAL_GetTick>
 8005146:	1b00      	subs	r0, r0, r4
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8005148:	42a8      	cmp	r0, r5
 800514a:	d208      	bcs.n	800515e <acc_hal_integration_wait_for_sensor_interrupt+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 800514c:	b672      	cpsid	i
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 800514e:	2108      	movs	r1, #8
 8005150:	4807      	ldr	r0, [pc, #28]	; (8005170 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 8005152:	f00a f9c1 	bl	800f4d8 <HAL_GPIO_ReadPin>
 8005156:	2801      	cmp	r0, #1
 8005158:	d0ea      	beq.n	8005130 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
			__WFI();
 800515a:	bf30      	wfi
 800515c:	e7e8      	b.n	8005130 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 800515e:	2108      	movs	r1, #8
 8005160:	4803      	ldr	r0, [pc, #12]	; (8005170 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 8005162:	f00a f9b9 	bl	800f4d8 <HAL_GPIO_ReadPin>
 8005166:	3801      	subs	r0, #1
 8005168:	4243      	negs	r3, r0
 800516a:	4158      	adcs	r0, r3
 800516c:	b2c0      	uxtb	r0, r0
}
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	50000400 	.word	0x50000400

08005174 <acc_hal_integration_sensor_transfer>:
{
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	000e      	movs	r6, r1
 800517a:	0014      	movs	r4, r2
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 800517c:	4d0a      	ldr	r5, [pc, #40]	; (80051a8 <acc_hal_integration_sensor_transfer+0x34>)
 800517e:	2200      	movs	r2, #0
 8005180:	2101      	movs	r1, #1
 8005182:	0028      	movs	r0, r5
 8005184:	f00a f9a2 	bl	800f4cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8005188:	b2a3      	uxth	r3, r4
 800518a:	4808      	ldr	r0, [pc, #32]	; (80051ac <acc_hal_integration_sensor_transfer+0x38>)
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <acc_hal_integration_sensor_transfer+0x3c>)
 800518e:	9200      	str	r2, [sp, #0]
 8005190:	0032      	movs	r2, r6
 8005192:	0031      	movs	r1, r6
 8005194:	3038      	adds	r0, #56	; 0x38
 8005196:	f008 fd1b 	bl	800dbd0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 800519a:	2201      	movs	r2, #1
 800519c:	2101      	movs	r1, #1
 800519e:	0028      	movs	r0, r5
 80051a0:	f00a f994 	bl	800f4cc <HAL_GPIO_WritePin>
}
 80051a4:	b002      	add	sp, #8
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	50000400 	.word	0x50000400
 80051ac:	2000028c 	.word	0x2000028c
 80051b0:	00001388 	.word	0x00001388

080051b4 <acc_assert_fail>:
 80051b4:	b513      	push	{r0, r1, r4, lr}
 80051b6:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <acc_assert_fail+0x14>)
 80051b8:	9100      	str	r1, [sp, #0]
 80051ba:	0003      	movs	r3, r0
 80051bc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80051be:	4903      	ldr	r1, [pc, #12]	; (80051cc <acc_assert_fail+0x18>)
 80051c0:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <acc_assert_fail+0x1c>)
 80051c2:	2000      	movs	r0, #0
 80051c4:	47a0      	blx	r4
 80051c6:	e7fe      	b.n	80051c6 <acc_assert_fail+0x12>
 80051c8:	200005d0 	.word	0x200005d0
 80051cc:	0801d59f 	.word	0x0801d59f
 80051d0:	0801d58a 	.word	0x0801d58a

080051d4 <acc_element_source_adc_produce>:
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	4645      	mov	r5, r8
 80051d8:	46de      	mov	lr, fp
 80051da:	4657      	mov	r7, sl
 80051dc:	464e      	mov	r6, r9
 80051de:	b5e0      	push	{r5, r6, r7, lr}
 80051e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80051e2:	b087      	sub	sp, #28
 80051e4:	0005      	movs	r5, r0
 80051e6:	2c00      	cmp	r4, #0
 80051e8:	d100      	bne.n	80051ec <acc_element_source_adc_produce+0x18>
 80051ea:	e09d      	b.n	8005328 <acc_element_source_adc_produce+0x154>
 80051ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80051ee:	4a53      	ldr	r2, [pc, #332]	; (800533c <acc_element_source_adc_produce+0x168>)
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	6a03      	ldr	r3, [r0, #32]
 80051f4:	69a2      	ldr	r2, [r4, #24]
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	6943      	ldr	r3, [r0, #20]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	7866      	ldrb	r6, [r4, #1]
 8005202:	69a3      	ldr	r3, [r4, #24]
 8005204:	469a      	mov	sl, r3
 8005206:	2e00      	cmp	r6, #0
 8005208:	d000      	beq.n	800520c <acc_element_source_adc_produce+0x38>
 800520a:	e088      	b.n	800531e <acc_element_source_adc_produce+0x14a>
 800520c:	7823      	ldrb	r3, [r4, #0]
 800520e:	469b      	mov	fp, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d133      	bne.n	800527c <acc_element_source_adc_produce+0xa8>
 8005214:	0020      	movs	r0, r4
 8005216:	f7fb fc31 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 800521a:	2800      	cmp	r0, #0
 800521c:	d027      	beq.n	800526e <acc_element_source_adc_produce+0x9a>
 800521e:	0020      	movs	r0, r4
 8005220:	2210      	movs	r2, #16
 8005222:	2100      	movs	r1, #0
 8005224:	3008      	adds	r0, #8
 8005226:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8005228:	f00e fc1c 	bl	8013a64 <memset>
 800522c:	0020      	movs	r0, r4
 800522e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005230:	0039      	movs	r1, r7
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	aa02      	add	r2, sp, #8
 8005236:	3018      	adds	r0, #24
 8005238:	4798      	blx	r3
 800523a:	ab02      	add	r3, sp, #8
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	60e0      	str	r0, [r4, #12]
 8005240:	8163      	strh	r3, [r4, #10]
 8005242:	aa02      	add	r2, sp, #8
 8005244:	7892      	ldrb	r2, [r2, #2]
 8005246:	9904      	ldr	r1, [sp, #16]
 8005248:	7222      	strb	r2, [r4, #8]
 800524a:	4691      	mov	r9, r2
 800524c:	aa02      	add	r2, sp, #8
 800524e:	78d2      	ldrb	r2, [r2, #3]
 8005250:	7262      	strb	r2, [r4, #9]
 8005252:	4690      	mov	r8, r2
 8005254:	aa02      	add	r2, sp, #8
 8005256:	7b17      	ldrb	r7, [r2, #12]
 8005258:	7427      	strb	r7, [r4, #16]
 800525a:	7912      	ldrb	r2, [r2, #4]
 800525c:	6161      	str	r1, [r4, #20]
 800525e:	7462      	strb	r2, [r4, #17]
 8005260:	2800      	cmp	r0, #0
 8005262:	d163      	bne.n	800532c <acc_element_source_adc_produce+0x158>
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <acc_element_source_adc_produce+0x16c>)
 8005266:	4a37      	ldr	r2, [pc, #220]	; (8005344 <acc_element_source_adc_produce+0x170>)
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	4937      	ldr	r1, [pc, #220]	; (8005348 <acc_element_source_adc_produce+0x174>)
 800526c:	4798      	blx	r3
 800526e:	4b34      	ldr	r3, [pc, #208]	; (8005340 <acc_element_source_adc_produce+0x16c>)
 8005270:	4a36      	ldr	r2, [pc, #216]	; (800534c <acc_element_source_adc_produce+0x178>)
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	4936      	ldr	r1, [pc, #216]	; (8005350 <acc_element_source_adc_produce+0x17c>)
 8005276:	2000      	movs	r0, #0
 8005278:	4798      	blx	r3
 800527a:	e042      	b.n	8005302 <acc_element_source_adc_produce+0x12e>
 800527c:	2b01      	cmp	r3, #1
 800527e:	d1ce      	bne.n	800521e <acc_element_source_adc_produce+0x4a>
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <acc_element_source_adc_produce+0x16c>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ca      	beq.n	800521e <acc_element_source_adc_produce+0x4a>
 8005288:	4650      	mov	r0, sl
 800528a:	4798      	blx	r3
 800528c:	e7c7      	b.n	800521e <acc_element_source_adc_produce+0x4a>
 800528e:	9801      	ldr	r0, [sp, #4]
 8005290:	4298      	cmp	r0, r3
 8005292:	d004      	beq.n	800529e <acc_element_source_adc_produce+0xca>
 8005294:	21ca      	movs	r1, #202	; 0xca
 8005296:	482f      	ldr	r0, [pc, #188]	; (8005354 <acc_element_source_adc_produce+0x180>)
 8005298:	31ff      	adds	r1, #255	; 0xff
 800529a:	f7ff ff8b 	bl	80051b4 <acc_assert_fail>
 800529e:	0016      	movs	r6, r2
 80052a0:	2348      	movs	r3, #72	; 0x48
 80052a2:	4652      	mov	r2, sl
 80052a4:	4353      	muls	r3, r2
 80052a6:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <acc_element_source_adc_produce+0x184>)
 80052a8:	3b48      	subs	r3, #72	; 0x48
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	18d3      	adds	r3, r2, r3
 80052ae:	001a      	movs	r2, r3
 80052b0:	3242      	adds	r2, #66	; 0x42
 80052b2:	7016      	strb	r6, [r2, #0]
 80052b4:	6459      	str	r1, [r3, #68]	; 0x44
 80052b6:	465b      	mov	r3, fp
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d12a      	bne.n	8005312 <acc_element_source_adc_produce+0x13e>
 80052bc:	4650      	mov	r0, sl
 80052be:	f7fb fbcd 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 80052c2:	2300      	movs	r3, #0
 80052c4:	70e3      	strb	r3, [r4, #3]
 80052c6:	7863      	ldrb	r3, [r4, #1]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d105      	bne.n	80052d8 <acc_element_source_adc_produce+0x104>
 80052cc:	9b01      	ldr	r3, [sp, #4]
 80052ce:	9a00      	ldr	r2, [sp, #0]
 80052d0:	4651      	mov	r1, sl
 80052d2:	2002      	movs	r0, #2
 80052d4:	f7fa ff30 	bl	8000138 <acc_probes_execute_uint16>
 80052d8:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 80052da:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	464a      	mov	r2, r9
 80052e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	4642      	mov	r2, r8
 80052e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	2301      	movs	r3, #1
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	d100      	bne.n	80052f4 <acc_element_source_adc_produce+0x120>
 80052f2:	003b      	movs	r3, r7
 80052f4:	2601      	movs	r6, #1
 80052f6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80052f8:	6828      	ldr	r0, [r5, #0]
 80052fa:	4033      	ands	r3, r6
 80052fc:	7013      	strb	r3, [r2, #0]
 80052fe:	6843      	ldr	r3, [r0, #4]
 8005300:	4798      	blx	r3
 8005302:	0030      	movs	r0, r6
 8005304:	b007      	add	sp, #28
 8005306:	bc3c      	pop	{r2, r3, r4, r5}
 8005308:	4690      	mov	r8, r2
 800530a:	4699      	mov	r9, r3
 800530c:	46a2      	mov	sl, r4
 800530e:	46ab      	mov	fp, r5
 8005310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005312:	2b01      	cmp	r3, #1
 8005314:	d1d7      	bne.n	80052c6 <acc_element_source_adc_produce+0xf2>
 8005316:	0020      	movs	r0, r4
 8005318:	f7fb fb3e 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 800531c:	e7d3      	b.n	80052c6 <acc_element_source_adc_produce+0xf2>
 800531e:	2600      	movs	r6, #0
 8005320:	0037      	movs	r7, r6
 8005322:	46b0      	mov	r8, r6
 8005324:	46b1      	mov	r9, r6
 8005326:	e7ce      	b.n	80052c6 <acc_element_source_adc_produce+0xf2>
 8005328:	0026      	movs	r6, r4
 800532a:	e7ea      	b.n	8005302 <acc_element_source_adc_produce+0x12e>
 800532c:	9e00      	ldr	r6, [sp, #0]
 800532e:	4286      	cmp	r6, r0
 8005330:	d0ad      	beq.n	800528e <acc_element_source_adc_produce+0xba>
 8005332:	21e4      	movs	r1, #228	; 0xe4
 8005334:	4807      	ldr	r0, [pc, #28]	; (8005354 <acc_element_source_adc_produce+0x180>)
 8005336:	0049      	lsls	r1, r1, #1
 8005338:	f7ff ff3c 	bl	80051b4 <acc_assert_fail>
 800533c:	51645c3c 	.word	0x51645c3c
 8005340:	200005d0 	.word	0x200005d0
 8005344:	0801d5aa 	.word	0x0801d5aa
 8005348:	0801ce3e 	.word	0x0801ce3e
 800534c:	0801d5f1 	.word	0x0801d5f1
 8005350:	0801d60e 	.word	0x0801d60e
 8005354:	0801d5c2 	.word	0x0801d5c2
 8005358:	2000008c 	.word	0x2000008c

0800535c <produce.lto_priv.151>:
 800535c:	b510      	push	{r4, lr}
 800535e:	0004      	movs	r4, r0
 8005360:	3038      	adds	r0, #56	; 0x38
 8005362:	f7ff ff37 	bl	80051d4 <acc_element_source_adc_produce>
 8005366:	2800      	cmp	r0, #0
 8005368:	d10c      	bne.n	8005384 <produce.lto_priv.151+0x28>
 800536a:	23e0      	movs	r3, #224	; 0xe0
 800536c:	2201      	movs	r2, #1
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	58e3      	ldr	r3, [r4, r3]
 8005372:	6158      	str	r0, [r3, #20]
 8005374:	7198      	strb	r0, [r3, #6]
 8005376:	715a      	strb	r2, [r3, #5]
 8005378:	23d2      	movs	r3, #210	; 0xd2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	18e0      	adds	r0, r4, r3
 800537e:	3304      	adds	r3, #4
 8005380:	58e3      	ldr	r3, [r4, r3]
 8005382:	4798      	blx	r3
 8005384:	bd10      	pop	{r4, pc}

08005386 <produce.lto_priv.150>:
 8005386:	b510      	push	{r4, lr}
 8005388:	0004      	movs	r4, r0
 800538a:	3038      	adds	r0, #56	; 0x38
 800538c:	f7ff ff22 	bl	80051d4 <acc_element_source_adc_produce>
 8005390:	2800      	cmp	r0, #0
 8005392:	d10b      	bne.n	80053ac <produce.lto_priv.150+0x26>
 8005394:	0023      	movs	r3, r4
 8005396:	33f0      	adds	r3, #240	; 0xf0
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	6158      	str	r0, [r3, #20]
 800539e:	7198      	strb	r0, [r3, #6]
 80053a0:	0020      	movs	r0, r4
 80053a2:	34bc      	adds	r4, #188	; 0xbc
 80053a4:	715a      	strb	r2, [r3, #5]
 80053a6:	30b8      	adds	r0, #184	; 0xb8
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	4798      	blx	r3
 80053ac:	bd10      	pop	{r4, pc}

080053ae <do_phase_compensation_q3_12>:
 80053ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b0:	4657      	mov	r7, sl
 80053b2:	4645      	mov	r5, r8
 80053b4:	46de      	mov	lr, fp
 80053b6:	464e      	mov	r6, r9
 80053b8:	b5e0      	push	{r5, r6, r7, lr}
 80053ba:	4c64      	ldr	r4, [pc, #400]	; (800554c <do_phase_compensation_q3_12+0x19e>)
 80053bc:	0017      	movs	r7, r2
 80053be:	44a5      	add	sp, r4
 80053c0:	9104      	str	r1, [sp, #16]
 80053c2:	4698      	mov	r8, r3
 80053c4:	2a7c      	cmp	r2, #124	; 0x7c
 80053c6:	d814      	bhi.n	80053f2 <do_phase_compensation_q3_12+0x44>
 80053c8:	0093      	lsls	r3, r2, #2
 80053ca:	9302      	str	r3, [sp, #8]
 80053cc:	ac06      	add	r4, sp, #24
 80053ce:	3b06      	subs	r3, #6
 80053d0:	18e3      	adds	r3, r4, r3
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	2300      	movs	r3, #0
 80053d6:	469b      	mov	fp, r3
 80053d8:	9001      	str	r0, [sp, #4]
 80053da:	9b04      	ldr	r3, [sp, #16]
 80053dc:	459b      	cmp	fp, r3
 80053de:	d10c      	bne.n	80053fa <do_phase_compensation_q3_12+0x4c>
 80053e0:	2383      	movs	r3, #131	; 0x83
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	449d      	add	sp, r3
 80053e6:	bc3c      	pop	{r2, r3, r4, r5}
 80053e8:	4690      	mov	r8, r2
 80053ea:	4699      	mov	r9, r3
 80053ec:	46a2      	mov	sl, r4
 80053ee:	46ab      	mov	fp, r5
 80053f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f2:	217d      	movs	r1, #125	; 0x7d
 80053f4:	4856      	ldr	r0, [pc, #344]	; (8005550 <do_phase_compensation_q3_12+0x1a2>)
 80053f6:	f7ff fedd 	bl	80051b4 <acc_assert_fail>
 80053fa:	9a02      	ldr	r2, [sp, #8]
 80053fc:	9901      	ldr	r1, [sp, #4]
 80053fe:	0020      	movs	r0, r4
 8005400:	f011 f84e 	bl	80164a0 <memcpy>
 8005404:	a982      	add	r1, sp, #520	; 0x208
 8005406:	468c      	mov	ip, r1
 8005408:	2200      	movs	r2, #0
 800540a:	1e78      	subs	r0, r7, #1
 800540c:	0083      	lsls	r3, r0, #2
 800540e:	4463      	add	r3, ip
 8005410:	3bf1      	subs	r3, #241	; 0xf1
 8005412:	3bff      	subs	r3, #255	; 0xff
 8005414:	9206      	str	r2, [sp, #24]
 8005416:	2501      	movs	r5, #1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	0022      	movs	r2, r4
 800541c:	42af      	cmp	r7, r5
 800541e:	d814      	bhi.n	800544a <do_phase_compensation_q3_12+0x9c>
 8005420:	9a03      	ldr	r2, [sp, #12]
 8005422:	3a04      	subs	r2, #4
 8005424:	3801      	subs	r0, #1
 8005426:	d233      	bcs.n	8005490 <do_phase_compensation_q3_12+0xe2>
 8005428:	2500      	movs	r5, #0
 800542a:	9b02      	ldr	r3, [sp, #8]
 800542c:	42ab      	cmp	r3, r5
 800542e:	d14c      	bne.n	80054ca <do_phase_compensation_q3_12+0x11c>
 8005430:	2200      	movs	r2, #0
 8005432:	9901      	ldr	r1, [sp, #4]
 8005434:	42aa      	cmp	r2, r5
 8005436:	d169      	bne.n	800550c <do_phase_compensation_q3_12+0x15e>
 8005438:	2301      	movs	r3, #1
 800543a:	469c      	mov	ip, r3
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	44e3      	add	fp, ip
 8005440:	469c      	mov	ip, r3
 8005442:	4494      	add	ip, r2
 8005444:	4663      	mov	r3, ip
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	e7c7      	b.n	80053da <do_phase_compensation_q3_12+0x2c>
 800544a:	2100      	movs	r1, #0
 800544c:	5e53      	ldrsh	r3, [r2, r1]
 800544e:	3501      	adds	r5, #1
 8005450:	469c      	mov	ip, r3
 8005452:	2304      	movs	r3, #4
 8005454:	5ed1      	ldrsh	r1, [r2, r3]
 8005456:	4663      	mov	r3, ip
 8005458:	1ac9      	subs	r1, r1, r3
 800545a:	4643      	mov	r3, r8
 800545c:	4359      	muls	r1, r3
 800545e:	17cb      	asrs	r3, r1, #31
 8005460:	051b      	lsls	r3, r3, #20
 8005462:	0d1b      	lsrs	r3, r3, #20
 8005464:	185b      	adds	r3, r3, r1
 8005466:	131b      	asrs	r3, r3, #12
 8005468:	4463      	add	r3, ip
 800546a:	8093      	strh	r3, [r2, #4]
 800546c:	2102      	movs	r1, #2
 800546e:	5e53      	ldrsh	r3, [r2, r1]
 8005470:	3204      	adds	r2, #4
 8005472:	469c      	mov	ip, r3
 8005474:	2302      	movs	r3, #2
 8005476:	5ed1      	ldrsh	r1, [r2, r3]
 8005478:	4663      	mov	r3, ip
 800547a:	1ac9      	subs	r1, r1, r3
 800547c:	4643      	mov	r3, r8
 800547e:	4359      	muls	r1, r3
 8005480:	17cb      	asrs	r3, r1, #31
 8005482:	051b      	lsls	r3, r3, #20
 8005484:	0d1b      	lsrs	r3, r3, #20
 8005486:	185b      	adds	r3, r3, r1
 8005488:	131b      	asrs	r3, r3, #12
 800548a:	4463      	add	r3, ip
 800548c:	8053      	strh	r3, [r2, #2]
 800548e:	e7c5      	b.n	800541c <do_phase_compensation_q3_12+0x6e>
 8005490:	2306      	movs	r3, #6
 8005492:	5ed1      	ldrsh	r1, [r2, r3]
 8005494:	2302      	movs	r3, #2
 8005496:	5ed5      	ldrsh	r5, [r2, r3]
 8005498:	4643      	mov	r3, r8
 800549a:	1a6d      	subs	r5, r5, r1
 800549c:	435d      	muls	r5, r3
 800549e:	17eb      	asrs	r3, r5, #31
 80054a0:	051b      	lsls	r3, r3, #20
 80054a2:	0d1b      	lsrs	r3, r3, #20
 80054a4:	195b      	adds	r3, r3, r5
 80054a6:	131b      	asrs	r3, r3, #12
 80054a8:	185b      	adds	r3, r3, r1
 80054aa:	8053      	strh	r3, [r2, #2]
 80054ac:	2308      	movs	r3, #8
 80054ae:	5ed1      	ldrsh	r1, [r2, r3]
 80054b0:	2304      	movs	r3, #4
 80054b2:	5ed5      	ldrsh	r5, [r2, r3]
 80054b4:	4643      	mov	r3, r8
 80054b6:	1a6d      	subs	r5, r5, r1
 80054b8:	435d      	muls	r5, r3
 80054ba:	17eb      	asrs	r3, r5, #31
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	0d1b      	lsrs	r3, r3, #20
 80054c0:	195b      	adds	r3, r3, r5
 80054c2:	131b      	asrs	r3, r3, #12
 80054c4:	185b      	adds	r3, r3, r1
 80054c6:	8093      	strh	r3, [r2, #4]
 80054c8:	e7ab      	b.n	8005422 <do_phase_compensation_q3_12+0x74>
 80054ca:	1962      	adds	r2, r4, r5
 80054cc:	8850      	ldrh	r0, [r2, #2]
 80054ce:	5b63      	ldrh	r3, [r4, r5]
 80054d0:	0400      	lsls	r0, r0, #16
 80054d2:	4318      	orrs	r0, r3
 80054d4:	4692      	mov	sl, r2
 80054d6:	f00a fb57 	bl	800fb88 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 80054da:	4681      	mov	r9, r0
 80054dc:	2800      	cmp	r0, #0
 80054de:	d104      	bne.n	80054ea <do_phase_compensation_q3_12+0x13c>
 80054e0:	4653      	mov	r3, sl
 80054e2:	5360      	strh	r0, [r4, r5]
 80054e4:	8058      	strh	r0, [r3, #2]
 80054e6:	3504      	adds	r5, #4
 80054e8:	e79f      	b.n	800542a <do_phase_compensation_q3_12+0x7c>
 80054ea:	5f60      	ldrsh	r0, [r4, r5]
 80054ec:	4649      	mov	r1, r9
 80054ee:	0300      	lsls	r0, r0, #12
 80054f0:	f00b fdcc 	bl	801108c <__divsi3>
 80054f4:	4653      	mov	r3, sl
 80054f6:	5360      	strh	r0, [r4, r5]
 80054f8:	2002      	movs	r0, #2
 80054fa:	5e18      	ldrsh	r0, [r3, r0]
 80054fc:	4649      	mov	r1, r9
 80054fe:	0300      	lsls	r0, r0, #12
 8005500:	4240      	negs	r0, r0
 8005502:	f00b fdc3 	bl	801108c <__divsi3>
 8005506:	4653      	mov	r3, sl
 8005508:	8058      	strh	r0, [r3, #2]
 800550a:	e7ec      	b.n	80054e6 <do_phase_compensation_q3_12+0x138>
 800550c:	2000      	movs	r0, #0
 800550e:	5e0b      	ldrsh	r3, [r1, r0]
 8005510:	4699      	mov	r9, r3
 8005512:	5f13      	ldrsh	r3, [r2, r4]
 8005514:	2602      	movs	r6, #2
 8005516:	5f88      	ldrsh	r0, [r1, r6]
 8005518:	4682      	mov	sl, r0
 800551a:	18a0      	adds	r0, r4, r2
 800551c:	2602      	movs	r6, #2
 800551e:	5f80      	ldrsh	r0, [r0, r6]
 8005520:	3204      	adds	r2, #4
 8005522:	4684      	mov	ip, r0
 8005524:	4648      	mov	r0, r9
 8005526:	4358      	muls	r0, r3
 8005528:	4666      	mov	r6, ip
 800552a:	9005      	str	r0, [sp, #20]
 800552c:	4650      	mov	r0, sl
 800552e:	4370      	muls	r0, r6
 8005530:	9e05      	ldr	r6, [sp, #20]
 8005532:	1a30      	subs	r0, r6, r0
 8005534:	1300      	asrs	r0, r0, #12
 8005536:	8008      	strh	r0, [r1, #0]
 8005538:	4650      	mov	r0, sl
 800553a:	4666      	mov	r6, ip
 800553c:	4343      	muls	r3, r0
 800553e:	4648      	mov	r0, r9
 8005540:	4370      	muls	r0, r6
 8005542:	181b      	adds	r3, r3, r0
 8005544:	131b      	asrs	r3, r3, #12
 8005546:	804b      	strh	r3, [r1, #2]
 8005548:	3104      	adds	r1, #4
 800554a:	e773      	b.n	8005434 <do_phase_compensation_q3_12+0x86>
 800554c:	fffffdf4 	.word	0xfffffdf4
 8005550:	0801d623 	.word	0x0801d623

08005554 <phase_compensate_q3_12_complex>:
 8005554:	b510      	push	{r4, lr}
 8005556:	1d83      	adds	r3, r0, #6
 8005558:	223e      	movs	r2, #62	; 0x3e
 800555a:	5e9b      	ldrsh	r3, [r3, r2]
 800555c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800555e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005560:	6900      	ldr	r0, [r0, #16]
 8005562:	f7ff ff24 	bl	80053ae <do_phase_compensation_q3_12>
 8005566:	bd10      	pop	{r4, pc}

08005568 <get_package_range_coarse_max>:
 8005568:	0003      	movs	r3, r0
 800556a:	b570      	push	{r4, r5, r6, lr}
 800556c:	33cc      	adds	r3, #204	; 0xcc
 800556e:	881d      	ldrh	r5, [r3, #0]
 8005570:	b086      	sub	sp, #24
 8005572:	2d00      	cmp	r5, #0
 8005574:	d104      	bne.n	8005580 <get_package_range_coarse_max+0x18>
 8005576:	2158      	movs	r1, #88	; 0x58
 8005578:	480c      	ldr	r0, [pc, #48]	; (80055ac <get_package_range_coarse_max+0x44>)
 800557a:	31ff      	adds	r1, #255	; 0xff
 800557c:	f7ff fe1a 	bl	80051b4 <acc_assert_fail>
 8005580:	0003      	movs	r3, r0
 8005582:	2480      	movs	r4, #128	; 0x80
 8005584:	33ce      	adds	r3, #206	; 0xce
 8005586:	4669      	mov	r1, sp
 8005588:	881e      	ldrh	r6, [r3, #0]
 800558a:	f00a fed7 	bl	801033c <acc_cpd_linear_sweep_get_info>
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	0029      	movs	r1, r5
 8005592:	0124      	lsls	r4, r4, #4
 8005594:	207c      	movs	r0, #124	; 0x7c
 8005596:	1ae4      	subs	r4, r4, r3
 8005598:	f00b fcee 	bl	8010f78 <__udivsi3>
 800559c:	1ba4      	subs	r4, r4, r6
 800559e:	0001      	movs	r1, r0
 80055a0:	0020      	movs	r0, r4
 80055a2:	f00b fce9 	bl	8010f78 <__udivsi3>
 80055a6:	b006      	add	sp, #24
 80055a8:	bd70      	pop	{r4, r5, r6, pc}
 80055aa:	46c0      	nop			; (mov r8, r8)
 80055ac:	0801d430 	.word	0x0801d430

080055b0 <coarse_count_for_next_package>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	0004      	movs	r4, r0
 80055b4:	6940      	ldr	r0, [r0, #20]
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	0002      	movs	r2, r0
 80055ba:	32c2      	adds	r2, #194	; 0xc2
 80055bc:	3b01      	subs	r3, #1
 80055be:	8812      	ldrh	r2, [r2, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d002      	beq.n	80055cc <coarse_count_for_next_package+0x1c>
 80055c6:	f7ff ffcf 	bl	8005568 <get_package_range_coarse_max>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	8965      	ldrh	r5, [r4, #10]
 80055ce:	f7ff ffcb 	bl	8005568 <get_package_range_coarse_max>
 80055d2:	0001      	movs	r1, r0
 80055d4:	0028      	movs	r0, r5
 80055d6:	f00b fd55 	bl	8011084 <__aeabi_uidivmod>
 80055da:	1e08      	subs	r0, r1, #0
 80055dc:	d1f5      	bne.n	80055ca <coarse_count_for_next_package+0x1a>
 80055de:	6960      	ldr	r0, [r4, #20]
 80055e0:	e7f1      	b.n	80055c6 <coarse_count_for_next_package+0x16>

080055e2 <update_program.lto_priv.117>:
 80055e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e4:	4657      	mov	r7, sl
 80055e6:	464e      	mov	r6, r9
 80055e8:	4645      	mov	r5, r8
 80055ea:	46de      	mov	lr, fp
 80055ec:	b5e0      	push	{r5, r6, r7, lr}
 80055ee:	6944      	ldr	r4, [r0, #20]
 80055f0:	000f      	movs	r7, r1
 80055f2:	0006      	movs	r6, r0
 80055f4:	8981      	ldrh	r1, [r0, #12]
 80055f6:	2001      	movs	r0, #1
 80055f8:	4288      	cmp	r0, r1
 80055fa:	419b      	sbcs	r3, r3
 80055fc:	425b      	negs	r3, r3
 80055fe:	4698      	mov	r8, r3
 8005600:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005602:	b085      	sub	sp, #20
 8005604:	425a      	negs	r2, r3
 8005606:	4153      	adcs	r3, r2
 8005608:	22c0      	movs	r2, #192	; 0xc0
 800560a:	4691      	mov	r9, r2
 800560c:	44a1      	add	r9, r4
 800560e:	464a      	mov	r2, r9
 8005610:	b2db      	uxtb	r3, r3
 8005612:	001d      	movs	r5, r3
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	433a      	orrs	r2, r7
 8005618:	4055      	eors	r5, r2
 800561a:	46aa      	mov	sl, r5
 800561c:	4281      	cmp	r1, r0
 800561e:	d808      	bhi.n	8005632 <update_program.lto_priv.117+0x50>
 8005620:	4293      	cmp	r3, r2
 8005622:	d136      	bne.n	8005692 <update_program.lto_priv.117+0xb0>
 8005624:	b005      	add	sp, #20
 8005626:	bc3c      	pop	{r2, r3, r4, r5}
 8005628:	4690      	mov	r8, r2
 800562a:	4699      	mov	r9, r3
 800562c:	46a2      	mov	sl, r4
 800562e:	46ab      	mov	fp, r5
 8005630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005632:	0025      	movs	r5, r4
 8005634:	35c2      	adds	r5, #194	; 0xc2
 8005636:	8828      	ldrh	r0, [r5, #0]
 8005638:	3001      	adds	r0, #1
 800563a:	b280      	uxth	r0, r0
 800563c:	f00b fd22 	bl	8011084 <__aeabi_uidivmod>
 8005640:	b28b      	uxth	r3, r1
 8005642:	469b      	mov	fp, r3
 8005644:	802b      	strh	r3, [r5, #0]
 8005646:	0020      	movs	r0, r4
 8005648:	2308      	movs	r3, #8
 800564a:	5ef5      	ldrsh	r5, [r6, r3]
 800564c:	f7ff ff8c 	bl	8005568 <get_package_range_coarse_max>
 8005650:	465b      	mov	r3, fp
 8005652:	4358      	muls	r0, r3
 8005654:	1945      	adds	r5, r0, r5
 8005656:	0030      	movs	r0, r6
 8005658:	f7ff ffaa 	bl	80055b0 <coarse_count_for_next_package>
 800565c:	0023      	movs	r3, r4
 800565e:	33c8      	adds	r3, #200	; 0xc8
 8005660:	6018      	str	r0, [r3, #0]
 8005662:	466b      	mov	r3, sp
 8005664:	4642      	mov	r2, r8
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	705a      	strb	r2, [r3, #1]
 800566a:	4652      	mov	r2, sl
 800566c:	709a      	strb	r2, [r3, #2]
 800566e:	464b      	mov	r3, r9
 8005670:	3801      	subs	r0, #1
 8005672:	9001      	str	r0, [sp, #4]
 8005674:	9502      	str	r5, [sp, #8]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	4669      	mov	r1, sp
 800567a:	431f      	orrs	r7, r3
 800567c:	2301      	movs	r3, #1
 800567e:	6830      	ldr	r0, [r6, #0]
 8005680:	405f      	eors	r7, r3
 8005682:	9703      	str	r7, [sp, #12]
 8005684:	f00a fe70 	bl	8010368 <acc_cpd_linear_sweep_update_program>
 8005688:	2800      	cmp	r0, #0
 800568a:	d0cb      	beq.n	8005624 <update_program.lto_priv.117+0x42>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005690:	e7c8      	b.n	8005624 <update_program.lto_priv.117+0x42>
 8005692:	2000      	movs	r0, #0
 8005694:	0005      	movs	r5, r0
 8005696:	e7e4      	b.n	8005662 <update_program.lto_priv.117+0x80>

08005698 <acc_sensor_protocol_r2_is_sensor_running>:
 8005698:	b513      	push	{r0, r1, r4, lr}
 800569a:	466b      	mov	r3, sp
 800569c:	1d9c      	adds	r4, r3, #6
 800569e:	2300      	movs	r3, #0
 80056a0:	0022      	movs	r2, r4
 80056a2:	2111      	movs	r1, #17
 80056a4:	8023      	strh	r3, [r4, #0]
 80056a6:	f00a faa3 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 80056aa:	2301      	movs	r3, #1
 80056ac:	8820      	ldrh	r0, [r4, #0]
 80056ae:	0a80      	lsrs	r0, r0, #10
 80056b0:	4018      	ands	r0, r3
 80056b2:	bd16      	pop	{r1, r2, r4, pc}

080056b4 <acc_sensor_protocol_r2_run_program>:
 80056b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056b6:	4d16      	ldr	r5, [pc, #88]	; (8005710 <acc_sensor_protocol_r2_run_program+0x5c>)
 80056b8:	0004      	movs	r4, r0
 80056ba:	002b      	movs	r3, r5
 80056bc:	3330      	adds	r3, #48	; 0x30
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	000e      	movs	r6, r1
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d906      	bls.n	80056d4 <acc_sensor_protocol_r2_run_program+0x20>
 80056c6:	9100      	str	r1, [sp, #0]
 80056c8:	0003      	movs	r3, r0
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <acc_sensor_protocol_r2_run_program+0x60>)
 80056cc:	4912      	ldr	r1, [pc, #72]	; (8005718 <acc_sensor_protocol_r2_run_program+0x64>)
 80056ce:	2004      	movs	r0, #4
 80056d0:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80056d2:	47b8      	blx	r7
 80056d4:	0020      	movs	r0, r4
 80056d6:	f7ff ffdf 	bl	8005698 <acc_sensor_protocol_r2_is_sensor_running>
 80056da:	1e02      	subs	r2, r0, #0
 80056dc:	d00a      	beq.n	80056f4 <acc_sensor_protocol_r2_run_program+0x40>
 80056de:	0023      	movs	r3, r4
 80056e0:	4a0e      	ldr	r2, [pc, #56]	; (800571c <acc_sensor_protocol_r2_run_program+0x68>)
 80056e2:	490d      	ldr	r1, [pc, #52]	; (8005718 <acc_sensor_protocol_r2_run_program+0x64>)
 80056e4:	2000      	movs	r0, #0
 80056e6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80056e8:	47a8      	blx	r5
 80056ea:	0020      	movs	r0, r4
 80056ec:	f00a faa7 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 80056f0:	2000      	movs	r0, #0
 80056f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056f4:	2110      	movs	r1, #16
 80056f6:	0020      	movs	r0, r4
 80056f8:	f007 fb4c 	bl	800cd94 <acc_sensor_reg_write>
 80056fc:	2280      	movs	r2, #128	; 0x80
 80056fe:	00d2      	lsls	r2, r2, #3
 8005700:	0020      	movs	r0, r4
 8005702:	4332      	orrs	r2, r6
 8005704:	2110      	movs	r1, #16
 8005706:	f007 fb45 	bl	800cd94 <acc_sensor_reg_write>
 800570a:	2001      	movs	r0, #1
 800570c:	e7f1      	b.n	80056f2 <acc_sensor_protocol_r2_run_program+0x3e>
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	200005d0 	.word	0x200005d0
 8005714:	0801d656 	.word	0x0801d656
 8005718:	0801d2c5 	.word	0x0801d2c5
 800571c:	0801d679 	.word	0x0801d679

08005720 <acc_rss_integration_mem_alloc_debug>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	4d05      	ldr	r5, [pc, #20]	; (8005738 <acc_rss_integration_mem_alloc_debug+0x18>)
 8005724:	68ab      	ldr	r3, [r5, #8]
 8005726:	4798      	blx	r3
 8005728:	1e04      	subs	r4, r0, #0
 800572a:	d103      	bne.n	8005734 <acc_rss_integration_mem_alloc_debug+0x14>
 800572c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800572e:	4a03      	ldr	r2, [pc, #12]	; (800573c <acc_rss_integration_mem_alloc_debug+0x1c>)
 8005730:	4903      	ldr	r1, [pc, #12]	; (8005740 <acc_rss_integration_mem_alloc_debug+0x20>)
 8005732:	4798      	blx	r3
 8005734:	0020      	movs	r0, r4
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	200005d0 	.word	0x200005d0
 800573c:	0801d6a8 	.word	0x0801d6a8
 8005740:	0801e3c7 	.word	0x0801e3c7

08005744 <sparse_create_service>:
 8005744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005746:	46de      	mov	lr, fp
 8005748:	4645      	mov	r5, r8
 800574a:	4657      	mov	r7, sl
 800574c:	464e      	mov	r6, r9
 800574e:	b5e0      	push	{r5, r6, r7, lr}
 8005750:	b0a5      	sub	sp, #148	; 0x94
 8005752:	4680      	mov	r8, r0
 8005754:	228c      	movs	r2, #140	; 0x8c
 8005756:	a801      	add	r0, sp, #4
 8005758:	000c      	movs	r4, r1
 800575a:	f010 fea1 	bl	80164a0 <memcpy>
 800575e:	a801      	add	r0, sp, #4
 8005760:	f7fb fc9c 	bl	800109c <acc_service_configuration_check>
 8005764:	2800      	cmp	r0, #0
 8005766:	d101      	bne.n	800576c <sparse_create_service+0x28>
 8005768:	2000      	movs	r0, #0
 800576a:	e014      	b.n	8005796 <sparse_create_service+0x52>
 800576c:	a808      	add	r0, sp, #32
 800576e:	f7fb fa2b 	bl	8000bc8 <configuration_is_valid>
 8005772:	2800      	cmp	r0, #0
 8005774:	d0f8      	beq.n	8005768 <sparse_create_service+0x24>
 8005776:	a808      	add	r0, sp, #32
 8005778:	f7fb f9a6 	bl	8000ac8 <acc_base_configuration_check.part.6>
 800577c:	2800      	cmp	r0, #0
 800577e:	d0f3      	beq.n	8005768 <sparse_create_service+0x24>
 8005780:	ab22      	add	r3, sp, #136	; 0x88
 8005782:	881d      	ldrh	r5, [r3, #0]
 8005784:	2d00      	cmp	r5, #0
 8005786:	d10d      	bne.n	80057a4 <sparse_create_service+0x60>
 8005788:	4b73      	ldr	r3, [pc, #460]	; (8005958 <sparse_create_service+0x214>)
 800578a:	0028      	movs	r0, r5
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	4a73      	ldr	r2, [pc, #460]	; (800595c <sparse_create_service+0x218>)
 8005790:	4973      	ldr	r1, [pc, #460]	; (8005960 <sparse_create_service+0x21c>)
 8005792:	4798      	blx	r3
 8005794:	0028      	movs	r0, r5
 8005796:	b025      	add	sp, #148	; 0x94
 8005798:	bc3c      	pop	{r2, r3, r4, r5}
 800579a:	4690      	mov	r8, r2
 800579c:	4699      	mov	r9, r3
 800579e:	46a2      	mov	sl, r4
 80057a0:	46ab      	mov	fp, r5
 80057a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057a4:	238a      	movs	r3, #138	; 0x8a
 80057a6:	446b      	add	r3, sp
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10a      	bne.n	80057c4 <sparse_create_service+0x80>
 80057ae:	ab20      	add	r3, sp, #128	; 0x80
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d906      	bls.n	80057c4 <sparse_create_service+0x80>
 80057b6:	4b68      	ldr	r3, [pc, #416]	; (8005958 <sparse_create_service+0x214>)
 80057b8:	4a6a      	ldr	r2, [pc, #424]	; (8005964 <sparse_create_service+0x220>)
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	4968      	ldr	r1, [pc, #416]	; (8005960 <sparse_create_service+0x21c>)
 80057be:	2000      	movs	r0, #0
 80057c0:	4798      	blx	r3
 80057c2:	e7d1      	b.n	8005768 <sparse_create_service+0x24>
 80057c4:	4642      	mov	r2, r8
 80057c6:	7923      	ldrb	r3, [r4, #4]
 80057c8:	2010      	movs	r0, #16
 80057ca:	7213      	strb	r3, [r2, #8]
 80057cc:	4b66      	ldr	r3, [pc, #408]	; (8005968 <sparse_create_service+0x224>)
 80057ce:	22ec      	movs	r2, #236	; 0xec
 80057d0:	0019      	movs	r1, r3
 80057d2:	469b      	mov	fp, r3
 80057d4:	f007 fa7e 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 80057d8:	0005      	movs	r5, r0
 80057da:	2090      	movs	r0, #144	; 0x90
 80057dc:	22ed      	movs	r2, #237	; 0xed
 80057de:	4659      	mov	r1, fp
 80057e0:	0040      	lsls	r0, r0, #1
 80057e2:	f007 fa77 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 80057e6:	0004      	movs	r4, r0
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	d001      	beq.n	80057f0 <sparse_create_service+0xac>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d10f      	bne.n	8005810 <sparse_create_service+0xcc>
 80057f0:	0028      	movs	r0, r5
 80057f2:	f7fb f8ef 	bl	80009d4 <acc_rss_integration_mem_free>
 80057f6:	0020      	movs	r0, r4
 80057f8:	f7fb f8ec 	bl	80009d4 <acc_rss_integration_mem_free>
 80057fc:	2500      	movs	r5, #0
 80057fe:	4643      	mov	r3, r8
 8005800:	4642      	mov	r2, r8
 8005802:	611d      	str	r5, [r3, #16]
 8005804:	1e68      	subs	r0, r5, #1
 8005806:	4185      	sbcs	r5, r0
 8005808:	4b58      	ldr	r3, [pc, #352]	; (800596c <sparse_create_service+0x228>)
 800580a:	b2e8      	uxtb	r0, r5
 800580c:	60d3      	str	r3, [r2, #12]
 800580e:	e7c2      	b.n	8005796 <sparse_create_service+0x52>
 8005810:	2318      	movs	r3, #24
 8005812:	469a      	mov	sl, r3
 8005814:	6028      	str	r0, [r5, #0]
 8005816:	4482      	add	sl, r0
 8005818:	4640      	mov	r0, r8
 800581a:	18c0      	adds	r0, r0, r3
 800581c:	33e4      	adds	r3, #228	; 0xe4
 800581e:	4699      	mov	r9, r3
 8005820:	44a1      	add	r9, r4
 8005822:	464b      	mov	r3, r9
 8005824:	4652      	mov	r2, sl
 8005826:	6760      	str	r0, [r4, #116]	; 0x74
 8005828:	a908      	add	r1, sp, #32
 800582a:	f7fc fe0d 	bl	8002448 <acc_sensor_manager_prepare_radar_engine>
 800582e:	464b      	mov	r3, r9
 8005830:	895a      	ldrh	r2, [r3, #10]
 8005832:	0023      	movs	r3, r4
 8005834:	3370      	adds	r3, #112	; 0x70
 8005836:	1e06      	subs	r6, r0, #0
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	d104      	bne.n	8005846 <sparse_create_service+0x102>
 800583c:	0028      	movs	r0, r5
 800583e:	f7fb f8f9 	bl	8000a34 <disassemble.lto_priv.146>
 8005842:	0035      	movs	r5, r6
 8005844:	e7db      	b.n	80057fe <sparse_create_service+0xba>
 8005846:	464b      	mov	r3, r9
 8005848:	89db      	ldrh	r3, [r3, #14]
 800584a:	189b      	adds	r3, r3, r2
 800584c:	464a      	mov	r2, r9
 800584e:	8997      	ldrh	r7, [r2, #12]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	007f      	lsls	r7, r7, #1
 8005854:	429f      	cmp	r7, r3
 8005856:	d200      	bcs.n	800585a <sparse_create_service+0x116>
 8005858:	001f      	movs	r7, r3
 800585a:	a808      	add	r0, sp, #32
 800585c:	f7fb f9b4 	bl	8000bc8 <configuration_is_valid>
 8005860:	2600      	movs	r6, #0
 8005862:	42b0      	cmp	r0, r6
 8005864:	d001      	beq.n	800586a <sparse_create_service+0x126>
 8005866:	ab1d      	add	r3, sp, #116	; 0x74
 8005868:	881e      	ldrh	r6, [r3, #0]
 800586a:	42be      	cmp	r6, r7
 800586c:	d200      	bcs.n	8005870 <sparse_create_service+0x12c>
 800586e:	003e      	movs	r6, r7
 8005870:	2298      	movs	r2, #152	; 0x98
 8005872:	4659      	mov	r1, fp
 8005874:	0052      	lsls	r2, r2, #1
 8005876:	0030      	movs	r0, r6
 8005878:	f7ff ff52 	bl	8005720 <acc_rss_integration_mem_alloc_debug>
 800587c:	464b      	mov	r3, r9
 800587e:	1e07      	subs	r7, r0, #0
 8005880:	61d8      	str	r0, [r3, #28]
 8005882:	d056      	beq.n	8005932 <sparse_create_service+0x1ee>
 8005884:	621e      	str	r6, [r3, #32]
 8005886:	0022      	movs	r2, r4
 8005888:	0026      	movs	r6, r4
 800588a:	1da3      	adds	r3, r4, #6
 800588c:	6623      	str	r3, [r4, #96]	; 0x60
 800588e:	1de3      	adds	r3, r4, #7
 8005890:	6663      	str	r3, [r4, #100]	; 0x64
 8005892:	3214      	adds	r2, #20
 8005894:	3305      	adds	r3, #5
 8005896:	3608      	adds	r6, #8
 8005898:	66a3      	str	r3, [r4, #104]	; 0x68
 800589a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800589c:	65e2      	str	r2, [r4, #92]	; 0x5c
 800589e:	65a4      	str	r4, [r4, #88]	; 0x58
 80058a0:	66e6      	str	r6, [r4, #108]	; 0x6c
 80058a2:	67d8      	str	r0, [r3, #124]	; 0x7c
 80058a4:	1d23      	adds	r3, r4, #4
 80058a6:	4699      	mov	r9, r3
 80058a8:	4649      	mov	r1, r9
 80058aa:	3388      	adds	r3, #136	; 0x88
 80058ac:	6019      	str	r1, [r3, #0]
 80058ae:	611a      	str	r2, [r3, #16]
 80058b0:	63d8      	str	r0, [r3, #60]	; 0x3c
 80058b2:	665c      	str	r4, [r3, #100]	; 0x64
 80058b4:	238c      	movs	r3, #140	; 0x8c
 80058b6:	4f28      	ldr	r7, [pc, #160]	; (8005958 <sparse_create_service+0x214>)
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	469b      	mov	fp, r3
 80058bc:	003b      	movs	r3, r7
 80058be:	3330      	adds	r3, #48	; 0x30
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	44a3      	add	fp, r4
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d839      	bhi.n	800593c <sparse_create_service+0x1f8>
 80058c8:	4652      	mov	r2, sl
 80058ca:	465b      	mov	r3, fp
 80058cc:	a908      	add	r1, sp, #32
 80058ce:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80058d0:	f7fb fa6c 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 80058d4:	4682      	mov	sl, r0
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d034      	beq.n	8005944 <sparse_create_service+0x200>
 80058da:	0023      	movs	r3, r4
 80058dc:	4a24      	ldr	r2, [pc, #144]	; (8005970 <sparse_create_service+0x22c>)
 80058de:	33b0      	adds	r3, #176	; 0xb0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	4a24      	ldr	r2, [pc, #144]	; (8005974 <sparse_create_service+0x230>)
 80058e4:	0020      	movs	r0, r4
 80058e6:	605a      	str	r2, [r3, #4]
 80058e8:	464a      	mov	r2, r9
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <sparse_create_service+0x234>)
 80058ec:	3078      	adds	r0, #120	; 0x78
 80058ee:	67e3      	str	r3, [r4, #124]	; 0x7c
 80058f0:	4b22      	ldr	r3, [pc, #136]	; (800597c <sparse_create_service+0x238>)
 80058f2:	67d3      	str	r3, [r2, #124]	; 0x7c
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <sparse_create_service+0x23c>)
 80058f6:	4a23      	ldr	r2, [pc, #140]	; (8005984 <sparse_create_service+0x240>)
 80058f8:	67f3      	str	r3, [r6, #124]	; 0x7c
 80058fa:	0023      	movs	r3, r4
 80058fc:	33b8      	adds	r3, #184	; 0xb8
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
 8005900:	4a21      	ldr	r2, [pc, #132]	; (8005988 <sparse_create_service+0x244>)
 8005902:	605a      	str	r2, [r3, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <sparse_create_service+0x248>)
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	4a21      	ldr	r2, [pc, #132]	; (8005990 <sparse_create_service+0x24c>)
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	63a0      	str	r0, [r4, #56]	; 0x38
 800590e:	67a3      	str	r3, [r4, #120]	; 0x78
 8005910:	f7fa fce1 	bl	80002d6 <validate.lto_priv.80>
 8005914:	1e06      	subs	r6, r0, #0
 8005916:	d01a      	beq.n	800594e <sparse_create_service+0x20a>
 8005918:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800591a:	34f4      	adds	r4, #244	; 0xf4
 800591c:	68c3      	ldr	r3, [r0, #12]
 800591e:	4798      	blx	r3
 8005920:	4643      	mov	r3, r8
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <sparse_create_service+0x250>)
 8005926:	606b      	str	r3, [r5, #4]
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <sparse_create_service+0x254>)
 800592a:	60ab      	str	r3, [r5, #8]
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <sparse_create_service+0x258>)
 800592e:	60eb      	str	r3, [r5, #12]
 8005930:	e765      	b.n	80057fe <sparse_create_service+0xba>
 8005932:	0028      	movs	r0, r5
 8005934:	f7fb f87e 	bl	8000a34 <disassemble.lto_priv.146>
 8005938:	003d      	movs	r5, r7
 800593a:	e760      	b.n	80057fe <sparse_create_service+0xba>
 800593c:	a808      	add	r0, sp, #32
 800593e:	f7fb fb07 	bl	8000f50 <acc_base_configuration_print.part.5>
 8005942:	e7c1      	b.n	80058c8 <sparse_create_service+0x184>
 8005944:	0028      	movs	r0, r5
 8005946:	f7fb f875 	bl	8000a34 <disassemble.lto_priv.146>
 800594a:	4655      	mov	r5, sl
 800594c:	e757      	b.n	80057fe <sparse_create_service+0xba>
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <sparse_create_service+0x25c>)
 8005952:	4914      	ldr	r1, [pc, #80]	; (80059a4 <sparse_create_service+0x260>)
 8005954:	4798      	blx	r3
 8005956:	e771      	b.n	800583c <sparse_create_service+0xf8>
 8005958:	200005d0 	.word	0x200005d0
 800595c:	0801d6b6 	.word	0x0801d6b6
 8005960:	0801d135 	.word	0x0801d135
 8005964:	0801d6e6 	.word	0x0801d6e6
 8005968:	0801d711 	.word	0x0801d711
 800596c:	08001101 	.word	0x08001101
 8005970:	40400000 	.word	0x40400000
 8005974:	080025ad 	.word	0x080025ad
 8005978:	0800032d 	.word	0x0800032d
 800597c:	080002d7 	.word	0x080002d7
 8005980:	080008f7 	.word	0x080008f7
 8005984:	08002369 	.word	0x08002369
 8005988:	080001c5 	.word	0x080001c5
 800598c:	08000157 	.word	0x08000157
 8005990:	080001c3 	.word	0x080001c3
 8005994:	08005387 	.word	0x08005387
 8005998:	080022ef 	.word	0x080022ef
 800599c:	08000a35 	.word	0x08000a35
 80059a0:	0801d73a 	.word	0x0801d73a
 80059a4:	0801d75a 	.word	0x0801d75a

080059a8 <envelope_create_service>:
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059aa:	46de      	mov	lr, fp
 80059ac:	4657      	mov	r7, sl
 80059ae:	464e      	mov	r6, r9
 80059b0:	4645      	mov	r5, r8
 80059b2:	b5e0      	push	{r5, r6, r7, lr}
 80059b4:	b0a9      	sub	sp, #164	; 0xa4
 80059b6:	2290      	movs	r2, #144	; 0x90
 80059b8:	4682      	mov	sl, r0
 80059ba:	a804      	add	r0, sp, #16
 80059bc:	000d      	movs	r5, r1
 80059be:	f010 fd6f 	bl	80164a0 <memcpy>
 80059c2:	a80b      	add	r0, sp, #44	; 0x2c
 80059c4:	f7fb f936 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 80059c8:	0006      	movs	r6, r0
 80059ca:	a80b      	add	r0, sp, #44	; 0x2c
 80059cc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80059ce:	f7fb f8fb 	bl	8000bc8 <configuration_is_valid>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d006      	beq.n	80059e4 <envelope_create_service+0x3c>
 80059d6:	0030      	movs	r0, r6
 80059d8:	f00b feb2 	bl	8011740 <__aeabi_i2f>
 80059dc:	1c21      	adds	r1, r4, #0
 80059de:	f00a ff99 	bl	8010914 <__aeabi_fmul>
 80059e2:	9013      	str	r0, [sp, #76]	; 0x4c
 80059e4:	a804      	add	r0, sp, #16
 80059e6:	f7fb fb59 	bl	800109c <acc_service_configuration_check>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d101      	bne.n	80059f2 <envelope_create_service+0x4a>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e009      	b.n	8005a06 <envelope_create_service+0x5e>
 80059f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d10d      	bne.n	8005a14 <envelope_create_service+0x6c>
 80059f8:	4b45      	ldr	r3, [pc, #276]	; (8005b10 <envelope_create_service+0x168>)
 80059fa:	2000      	movs	r0, #0
 80059fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fe:	4a45      	ldr	r2, [pc, #276]	; (8005b14 <envelope_create_service+0x16c>)
 8005a00:	4945      	ldr	r1, [pc, #276]	; (8005b18 <envelope_create_service+0x170>)
 8005a02:	4798      	blx	r3
 8005a04:	2000      	movs	r0, #0
 8005a06:	b029      	add	sp, #164	; 0xa4
 8005a08:	bc3c      	pop	{r2, r3, r4, r5}
 8005a0a:	4690      	mov	r8, r2
 8005a0c:	4699      	mov	r9, r3
 8005a0e:	46a2      	mov	sl, r4
 8005a10:	46ab      	mov	fp, r5
 8005a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a14:	a80b      	add	r0, sp, #44	; 0x2c
 8005a16:	f7fb f8d7 	bl	8000bc8 <configuration_is_valid>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d0e7      	beq.n	80059ee <envelope_create_service+0x46>
 8005a1e:	a80b      	add	r0, sp, #44	; 0x2c
 8005a20:	f7fb f852 	bl	8000ac8 <acc_base_configuration_check.part.6>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	d0e2      	beq.n	80059ee <envelope_create_service+0x46>
 8005a28:	a80b      	add	r0, sp, #44	; 0x2c
 8005a2a:	f7fb f903 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8005a2e:	1e43      	subs	r3, r0, #1
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d908      	bls.n	8005a48 <envelope_create_service+0xa0>
 8005a36:	2804      	cmp	r0, #4
 8005a38:	d006      	beq.n	8005a48 <envelope_create_service+0xa0>
 8005a3a:	4b35      	ldr	r3, [pc, #212]	; (8005b10 <envelope_create_service+0x168>)
 8005a3c:	4a37      	ldr	r2, [pc, #220]	; (8005b1c <envelope_create_service+0x174>)
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a40:	4935      	ldr	r1, [pc, #212]	; (8005b18 <envelope_create_service+0x170>)
 8005a42:	2000      	movs	r0, #0
 8005a44:	4798      	blx	r3
 8005a46:	e7d2      	b.n	80059ee <envelope_create_service+0x46>
 8005a48:	a80b      	add	r0, sp, #44	; 0x2c
 8005a4a:	f7fb f8bd 	bl	8000bc8 <configuration_is_valid>
 8005a4e:	1e04      	subs	r4, r0, #0
 8005a50:	d004      	beq.n	8005a5c <envelope_create_service+0xb4>
 8005a52:	aa04      	add	r2, sp, #16
 8005a54:	236b      	movs	r3, #107	; 0x6b
 8005a56:	4694      	mov	ip, r2
 8005a58:	4463      	add	r3, ip
 8005a5a:	781c      	ldrb	r4, [r3, #0]
 8005a5c:	a80b      	add	r0, sp, #44	; 0x2c
 8005a5e:	f7fb f8b3 	bl	8000bc8 <configuration_is_valid>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d010      	beq.n	8005a88 <envelope_create_service+0xe0>
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	d00e      	beq.n	8005a88 <envelope_create_service+0xe0>
 8005a6a:	ab11      	add	r3, sp, #68	; 0x44
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <envelope_create_service+0xe0>
 8005a72:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <envelope_create_service+0x168>)
 8005a74:	001a      	movs	r2, r3
 8005a76:	3230      	adds	r2, #48	; 0x30
 8005a78:	7812      	ldrb	r2, [r2, #0]
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d004      	beq.n	8005a88 <envelope_create_service+0xe0>
 8005a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a80:	4a27      	ldr	r2, [pc, #156]	; (8005b20 <envelope_create_service+0x178>)
 8005a82:	4925      	ldr	r1, [pc, #148]	; (8005b18 <envelope_create_service+0x170>)
 8005a84:	2001      	movs	r0, #1
 8005a86:	4798      	blx	r3
 8005a88:	4652      	mov	r2, sl
 8005a8a:	792b      	ldrb	r3, [r5, #4]
 8005a8c:	2010      	movs	r0, #16
 8005a8e:	7213      	strb	r3, [r2, #8]
 8005a90:	2280      	movs	r2, #128	; 0x80
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <envelope_create_service+0x17c>)
 8005a94:	0052      	lsls	r2, r2, #1
 8005a96:	0019      	movs	r1, r3
 8005a98:	4699      	mov	r9, r3
 8005a9a:	f007 f91b 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	0005      	movs	r5, r0
 8005aa2:	20ec      	movs	r0, #236	; 0xec
 8005aa4:	32ff      	adds	r2, #255	; 0xff
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	0080      	lsls	r0, r0, #2
 8005aaa:	f007 f913 	bl	800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>
 8005aae:	0004      	movs	r4, r0
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	d001      	beq.n	8005ab8 <envelope_create_service+0x110>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	d10f      	bne.n	8005ad8 <envelope_create_service+0x130>
 8005ab8:	0028      	movs	r0, r5
 8005aba:	f7fa ff8b 	bl	80009d4 <acc_rss_integration_mem_free>
 8005abe:	0020      	movs	r0, r4
 8005ac0:	f7fa ff88 	bl	80009d4 <acc_rss_integration_mem_free>
 8005ac4:	2500      	movs	r5, #0
 8005ac6:	4653      	mov	r3, sl
 8005ac8:	4652      	mov	r2, sl
 8005aca:	611d      	str	r5, [r3, #16]
 8005acc:	1e68      	subs	r0, r5, #1
 8005ace:	4185      	sbcs	r5, r0
 8005ad0:	4b15      	ldr	r3, [pc, #84]	; (8005b28 <envelope_create_service+0x180>)
 8005ad2:	b2e8      	uxtb	r0, r5
 8005ad4:	60d3      	str	r3, [r2, #12]
 8005ad6:	e796      	b.n	8005a06 <envelope_create_service+0x5e>
 8005ad8:	2318      	movs	r3, #24
 8005ada:	469c      	mov	ip, r3
 8005adc:	4484      	add	ip, r0
 8005ade:	4663      	mov	r3, ip
 8005ae0:	9302      	str	r3, [sp, #8]
 8005ae2:	23e3      	movs	r3, #227	; 0xe3
 8005ae4:	6028      	str	r0, [r5, #0]
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3018      	adds	r0, #24
 8005aec:	18e7      	adds	r7, r4, r3
 8005aee:	003b      	movs	r3, r7
 8005af0:	4662      	mov	r2, ip
 8005af2:	6760      	str	r0, [r4, #116]	; 0x74
 8005af4:	a90b      	add	r1, sp, #44	; 0x2c
 8005af6:	f7fc fca7 	bl	8002448 <acc_sensor_manager_prepare_radar_engine>
 8005afa:	0023      	movs	r3, r4
 8005afc:	897a      	ldrh	r2, [r7, #10]
 8005afe:	3370      	adds	r3, #112	; 0x70
 8005b00:	1e06      	subs	r6, r0, #0
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	d112      	bne.n	8005b2c <envelope_create_service+0x184>
 8005b06:	0028      	movs	r0, r5
 8005b08:	f7fa ff80 	bl	8000a0c <disassemble.lto_priv.147>
 8005b0c:	0035      	movs	r5, r6
 8005b0e:	e7da      	b.n	8005ac6 <envelope_create_service+0x11e>
 8005b10:	200005d0 	.word	0x200005d0
 8005b14:	0801d76a 	.word	0x0801d76a
 8005b18:	0801d244 	.word	0x0801d244
 8005b1c:	0801d7a5 	.word	0x0801d7a5
 8005b20:	0801d7c5 	.word	0x0801d7c5
 8005b24:	0801d80a 	.word	0x0801d80a
 8005b28:	08001101 	.word	0x08001101
 8005b2c:	a80b      	add	r0, sp, #44	; 0x2c
 8005b2e:	f7fb f84b 	bl	8000bc8 <configuration_is_valid>
 8005b32:	4683      	mov	fp, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d002      	beq.n	8005b3e <envelope_create_service+0x196>
 8005b38:	ab11      	add	r3, sp, #68	; 0x44
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	469b      	mov	fp, r3
 8005b3e:	23e3      	movs	r3, #227	; 0xe3
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	5ae2      	ldrh	r2, [r4, r3]
 8005b44:	89bb      	ldrh	r3, [r7, #12]
 8005b46:	0092      	lsls	r2, r2, #2
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d200      	bcs.n	8005b50 <envelope_create_service+0x1a8>
 8005b4e:	0013      	movs	r3, r2
 8005b50:	897e      	ldrh	r6, [r7, #10]
 8005b52:	89fa      	ldrh	r2, [r7, #14]
 8005b54:	18b6      	adds	r6, r6, r2
 8005b56:	0076      	lsls	r6, r6, #1
 8005b58:	429e      	cmp	r6, r3
 8005b5a:	d200      	bcs.n	8005b5e <envelope_create_service+0x1b6>
 8005b5c:	001e      	movs	r6, r3
 8005b5e:	a80b      	add	r0, sp, #44	; 0x2c
 8005b60:	f7fb f832 	bl	8000bc8 <configuration_is_valid>
 8005b64:	2300      	movs	r3, #0
 8005b66:	4298      	cmp	r0, r3
 8005b68:	d001      	beq.n	8005b6e <envelope_create_service+0x1c6>
 8005b6a:	ab20      	add	r3, sp, #128	; 0x80
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	4698      	mov	r8, r3
 8005b70:	42b3      	cmp	r3, r6
 8005b72:	d200      	bcs.n	8005b76 <envelope_create_service+0x1ce>
 8005b74:	46b0      	mov	r8, r6
 8005b76:	23eb      	movs	r3, #235	; 0xeb
 8005b78:	4642      	mov	r2, r8
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	50e2      	str	r2, [r4, r3]
 8005b7e:	465b      	mov	r3, fp
 8005b80:	4640      	mov	r0, r8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <envelope_create_service+0x1ea>
 8005b86:	23e3      	movs	r3, #227	; 0xe3
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	5ae0      	ldrh	r0, [r4, r3]
 8005b8c:	0080      	lsls	r0, r0, #2
 8005b8e:	300a      	adds	r0, #10
 8005b90:	4440      	add	r0, r8
 8005b92:	2286      	movs	r2, #134	; 0x86
 8005b94:	4649      	mov	r1, r9
 8005b96:	32ff      	adds	r2, #255	; 0xff
 8005b98:	f7ff fdc2 	bl	8005720 <acc_rss_integration_mem_alloc_debug>
 8005b9c:	23ea      	movs	r3, #234	; 0xea
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	1e06      	subs	r6, r0, #0
 8005ba2:	50e0      	str	r0, [r4, r3]
 8005ba4:	d0af      	beq.n	8005b06 <envelope_create_service+0x15e>
 8005ba6:	887b      	ldrh	r3, [r7, #2]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4699      	mov	r9, r3
 8005bac:	4481      	add	r9, r0
 8005bae:	464b      	mov	r3, r9
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	465b      	mov	r3, fp
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <envelope_create_service+0x218>
 8005bb8:	4643      	mov	r3, r8
 8005bba:	3304      	adds	r3, #4
 8005bbc:	18c3      	adds	r3, r0, r3
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	1da3      	adds	r3, r4, #6
 8005bc2:	6623      	str	r3, [r4, #96]	; 0x60
 8005bc4:	1de3      	adds	r3, r4, #7
 8005bc6:	6663      	str	r3, [r4, #100]	; 0x64
 8005bc8:	230c      	movs	r3, #12
 8005bca:	469c      	mov	ip, r3
 8005bcc:	44a4      	add	ip, r4
 8005bce:	4663      	mov	r3, ip
 8005bd0:	0027      	movs	r7, r4
 8005bd2:	66a3      	str	r3, [r4, #104]	; 0x68
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005bda:	3714      	adds	r7, #20
 8005bdc:	3380      	adds	r3, #128	; 0x80
 8005bde:	1d22      	adds	r2, r4, #4
 8005be0:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005be2:	65e7      	str	r7, [r4, #92]	; 0x5c
 8005be4:	65a4      	str	r4, [r4, #88]	; 0x58
 8005be6:	a80b      	add	r0, sp, #44	; 0x2c
 8005be8:	601e      	str	r6, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
 8005bec:	615f      	str	r7, [r3, #20]
 8005bee:	641e      	str	r6, [r3, #64]	; 0x40
 8005bf0:	645e      	str	r6, [r3, #68]	; 0x44
 8005bf2:	655f      	str	r7, [r3, #84]	; 0x54
 8005bf4:	f7fb f80b 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d004      	beq.n	8005c06 <envelope_create_service+0x25e>
 8005bfc:	0023      	movs	r3, r4
 8005bfe:	33fc      	adds	r3, #252	; 0xfc
 8005c00:	60de      	str	r6, [r3, #12]
 8005c02:	611e      	str	r6, [r3, #16]
 8005c04:	621f      	str	r7, [r3, #32]
 8005c06:	0023      	movs	r3, r4
 8005c08:	33fc      	adds	r3, #252	; 0xfc
 8005c0a:	64de      	str	r6, [r3, #76]	; 0x4c
 8005c0c:	651e      	str	r6, [r3, #80]	; 0x50
 8005c0e:	661f      	str	r7, [r3, #96]	; 0x60
 8005c10:	23c2      	movs	r3, #194	; 0xc2
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	50e6      	str	r6, [r4, r3]
 8005c16:	3304      	adds	r3, #4
 8005c18:	50e6      	str	r6, [r4, r3]
 8005c1a:	9a03      	ldr	r2, [sp, #12]
 8005c1c:	3310      	adds	r3, #16
 8005c1e:	50e7      	str	r7, [r4, r3]
 8005c20:	330c      	adds	r3, #12
 8005c22:	50e2      	str	r2, [r4, r3]
 8005c24:	464a      	mov	r2, r9
 8005c26:	3324      	adds	r3, #36	; 0x24
 8005c28:	50e6      	str	r6, [r4, r3]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	50e6      	str	r6, [r4, r3]
 8005c2e:	3310      	adds	r3, #16
 8005c30:	50e7      	str	r7, [r4, r3]
 8005c32:	3334      	adds	r3, #52	; 0x34
 8005c34:	50e6      	str	r6, [r4, r3]
 8005c36:	3304      	adds	r3, #4
 8005c38:	50e2      	str	r2, [r4, r3]
 8005c3a:	3310      	adds	r3, #16
 8005c3c:	50e7      	str	r7, [r4, r3]
 8005c3e:	3328      	adds	r3, #40	; 0x28
 8005c40:	50e2      	str	r2, [r4, r3]
 8005c42:	3304      	adds	r3, #4
 8005c44:	50e2      	str	r2, [r4, r3]
 8005c46:	3310      	adds	r3, #16
 8005c48:	50e7      	str	r7, [r4, r3]
 8005c4a:	465b      	mov	r3, fp
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00d      	beq.n	8005c6c <envelope_create_service+0x2c4>
 8005c50:	23a8      	movs	r3, #168	; 0xa8
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	50e2      	str	r2, [r4, r3]
 8005c56:	4643      	mov	r3, r8
 8005c58:	22ab      	movs	r2, #171	; 0xab
 8005c5a:	18f3      	adds	r3, r6, r3
 8005c5c:	0092      	lsls	r2, r2, #2
 8005c5e:	50a3      	str	r3, [r4, r2]
 8005c60:	23a9      	movs	r3, #169	; 0xa9
 8005c62:	9a01      	ldr	r2, [sp, #4]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	50e2      	str	r2, [r4, r3]
 8005c68:	3310      	adds	r3, #16
 8005c6a:	50e7      	str	r7, [r4, r3]
 8005c6c:	23b8      	movs	r3, #184	; 0xb8
 8005c6e:	9a01      	ldr	r2, [sp, #4]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	50e2      	str	r2, [r4, r3]
 8005c74:	3304      	adds	r3, #4
 8005c76:	50e6      	str	r6, [r4, r3]
 8005c78:	3310      	adds	r3, #16
 8005c7a:	50e7      	str	r7, [r4, r3]
 8005c7c:	3328      	adds	r3, #40	; 0x28
 8005c7e:	50e6      	str	r6, [r4, r3]
 8005c80:	3304      	adds	r3, #4
 8005c82:	50e6      	str	r6, [r4, r3]
 8005c84:	3310      	adds	r3, #16
 8005c86:	50e7      	str	r7, [r4, r3]
 8005c88:	3328      	adds	r3, #40	; 0x28
 8005c8a:	50e6      	str	r6, [r4, r3]
 8005c8c:	3328      	adds	r3, #40	; 0x28
 8005c8e:	50e4      	str	r4, [r4, r3]
 8005c90:	3328      	adds	r3, #40	; 0x28
 8005c92:	18e6      	adds	r6, r4, r3
 8005c94:	4be9      	ldr	r3, [pc, #932]	; (800603c <envelope_create_service+0x694>)
 8005c96:	4698      	mov	r8, r3
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d900      	bls.n	8005ca2 <envelope_create_service+0x2fa>
 8005ca0:	e1bf      	b.n	8006022 <envelope_create_service+0x67a>
 8005ca2:	0033      	movs	r3, r6
 8005ca4:	9a02      	ldr	r2, [sp, #8]
 8005ca6:	a90b      	add	r1, sp, #44	; 0x2c
 8005ca8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005caa:	f7fb f87f 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 8005cae:	1e06      	subs	r6, r0, #0
 8005cb0:	d100      	bne.n	8005cb4 <envelope_create_service+0x30c>
 8005cb2:	e728      	b.n	8005b06 <envelope_create_service+0x15e>
 8005cb4:	0023      	movs	r3, r4
 8005cb6:	2600      	movs	r6, #0
 8005cb8:	4ae1      	ldr	r2, [pc, #900]	; (8006040 <envelope_create_service+0x698>)
 8005cba:	33b0      	adds	r3, #176	; 0xb0
 8005cbc:	605a      	str	r2, [r3, #4]
 8005cbe:	601e      	str	r6, [r3, #0]
 8005cc0:	4be0      	ldr	r3, [pc, #896]	; (8006044 <envelope_create_service+0x69c>)
 8005cc2:	4ae1      	ldr	r2, [pc, #900]	; (8006048 <envelope_create_service+0x6a0>)
 8005cc4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8005cc6:	1d23      	adds	r3, r4, #4
 8005cc8:	67da      	str	r2, [r3, #124]	; 0x7c
 8005cca:	4ae0      	ldr	r2, [pc, #896]	; (800604c <envelope_create_service+0x6a4>)
 8005ccc:	3304      	adds	r3, #4
 8005cce:	67da      	str	r2, [r3, #124]	; 0x7c
 8005cd0:	4adf      	ldr	r2, [pc, #892]	; (8006050 <envelope_create_service+0x6a8>)
 8005cd2:	33b0      	adds	r3, #176	; 0xb0
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	4adf      	ldr	r2, [pc, #892]	; (8006054 <envelope_create_service+0x6ac>)
 8005cd8:	a80b      	add	r0, sp, #44	; 0x2c
 8005cda:	609a      	str	r2, [r3, #8]
 8005cdc:	4ade      	ldr	r2, [pc, #888]	; (8006058 <envelope_create_service+0x6b0>)
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	4ade      	ldr	r2, [pc, #888]	; (800605c <envelope_create_service+0x6b4>)
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005ce8:	f7fa ff91 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8005cec:	9601      	str	r6, [sp, #4]
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d01b      	beq.n	8005d2a <envelope_create_service+0x382>
 8005cf2:	a80b      	add	r0, sp, #44	; 0x2c
 8005cf4:	f7fa ff68 	bl	8000bc8 <configuration_is_valid>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d007      	beq.n	8005d0c <envelope_create_service+0x364>
 8005cfc:	aa04      	add	r2, sp, #16
 8005cfe:	4694      	mov	ip, r2
 8005d00:	2366      	movs	r3, #102	; 0x66
 8005d02:	4463      	add	r3, ip
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	221e      	movs	r2, #30
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <envelope_create_service+0x368>
 8005d0c:	2296      	movs	r2, #150	; 0x96
 8005d0e:	0052      	lsls	r2, r2, #1
 8005d10:	0023      	movs	r3, r4
 8005d12:	33f8      	adds	r3, #248	; 0xf8
 8005d14:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005d16:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005d18:	4ad1      	ldr	r2, [pc, #836]	; (8006060 <envelope_create_service+0x6b8>)
 8005d1a:	8719      	strh	r1, [r3, #56]	; 0x38
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d1e:	4ad1      	ldr	r2, [pc, #836]	; (8006064 <envelope_create_service+0x6bc>)
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	4ad1      	ldr	r2, [pc, #836]	; (8006068 <envelope_create_service+0x6c0>)
 8005d24:	609a      	str	r2, [r3, #8]
 8005d26:	4ad1      	ldr	r2, [pc, #836]	; (800606c <envelope_create_service+0x6c4>)
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	0023      	movs	r3, r4
 8005d2c:	4ad0      	ldr	r2, [pc, #832]	; (8006070 <envelope_create_service+0x6c8>)
 8005d2e:	3339      	adds	r3, #57	; 0x39
 8005d30:	33ff      	adds	r3, #255	; 0xff
 8005d32:	639a      	str	r2, [r3, #56]	; 0x38
 8005d34:	4acf      	ldr	r2, [pc, #828]	; (8006074 <envelope_create_service+0x6cc>)
 8005d36:	49d0      	ldr	r1, [pc, #832]	; (8006078 <envelope_create_service+0x6d0>)
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	4ad0      	ldr	r2, [pc, #832]	; (800607c <envelope_create_service+0x6d4>)
 8005d3c:	a80b      	add	r0, sp, #44	; 0x2c
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	4acf      	ldr	r2, [pc, #828]	; (8006080 <envelope_create_service+0x6d8>)
 8005d42:	60da      	str	r2, [r3, #12]
 8005d44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d46:	6419      	str	r1, [r3, #64]	; 0x40
 8005d48:	679a      	str	r2, [r3, #120]	; 0x78
 8005d4a:	49ce      	ldr	r1, [pc, #824]	; (8006084 <envelope_create_service+0x6dc>)
 8005d4c:	9a01      	ldr	r2, [sp, #4]
 8005d4e:	6459      	str	r1, [r3, #68]	; 0x44
 8005d50:	67da      	str	r2, [r3, #124]	; 0x7c
 8005d52:	49cd      	ldr	r1, [pc, #820]	; (8006088 <envelope_create_service+0x6e0>)
 8005d54:	4acd      	ldr	r2, [pc, #820]	; (800608c <envelope_create_service+0x6e4>)
 8005d56:	6499      	str	r1, [r3, #72]	; 0x48
 8005d58:	675a      	str	r2, [r3, #116]	; 0x74
 8005d5a:	23e3      	movs	r3, #227	; 0xe3
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	18e7      	adds	r7, r4, r3
 8005d60:	893b      	ldrh	r3, [r7, #8]
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	469b      	mov	fp, r3
 8005d68:	f7fa ff2e 	bl	8000bc8 <configuration_is_valid>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d100      	bne.n	8005d72 <envelope_create_service+0x3ca>
 8005d70:	e15b      	b.n	800602a <envelope_create_service+0x682>
 8005d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005d74:	4699      	mov	r9, r3
 8005d76:	0026      	movs	r6, r4
 8005d78:	4bc5      	ldr	r3, [pc, #788]	; (8006090 <envelope_create_service+0x6e8>)
 8005d7a:	36b9      	adds	r6, #185	; 0xb9
 8005d7c:	36ff      	adds	r6, #255	; 0xff
 8005d7e:	6073      	str	r3, [r6, #4]
 8005d80:	4bc4      	ldr	r3, [pc, #784]	; (8006094 <envelope_create_service+0x6ec>)
 8005d82:	218b      	movs	r1, #139	; 0x8b
 8005d84:	60b3      	str	r3, [r6, #8]
 8005d86:	4bc4      	ldr	r3, [pc, #784]	; (8006098 <envelope_create_service+0x6f0>)
 8005d88:	05c9      	lsls	r1, r1, #23
 8005d8a:	60f3      	str	r3, [r6, #12]
 8005d8c:	465b      	mov	r3, fp
 8005d8e:	6433      	str	r3, [r6, #64]	; 0x40
 8005d90:	9b02      	ldr	r3, [sp, #8]
 8005d92:	4648      	mov	r0, r9
 8005d94:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005d96:	f00a fdbd 	bl	8010914 <__aeabi_fmul>
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	4683      	mov	fp, r0
 8005d9e:	4648      	mov	r0, r9
 8005da0:	f00b face 	bl	8011340 <__aeabi_fcmpge>
 8005da4:	2800      	cmp	r0, #0
 8005da6:	d100      	bne.n	8005daa <envelope_create_service+0x402>
 8005da8:	e142      	b.n	8006030 <envelope_create_service+0x688>
 8005daa:	21fc      	movs	r1, #252	; 0xfc
 8005dac:	0589      	lsls	r1, r1, #22
 8005dae:	4658      	mov	r0, fp
 8005db0:	f00a fb04 	bl	80103bc <__aeabi_fadd>
 8005db4:	f00b fca4 	bl	8011700 <__aeabi_f2iz>
 8005db8:	0023      	movs	r3, r4
 8005dba:	33bf      	adds	r3, #191	; 0xbf
 8005dbc:	33ff      	adds	r3, #255	; 0xff
 8005dbe:	87d8      	strh	r0, [r3, #62]	; 0x3e
 8005dc0:	4bb6      	ldr	r3, [pc, #728]	; (800609c <envelope_create_service+0x6f4>)
 8005dc2:	a80b      	add	r0, sp, #44	; 0x2c
 8005dc4:	63b3      	str	r3, [r6, #56]	; 0x38
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	88ba      	ldrh	r2, [r7, #4]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	18e3      	adds	r3, r4, r3
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8005dd2:	4ab3      	ldr	r2, [pc, #716]	; (80060a0 <envelope_create_service+0x6f8>)
 8005dd4:	605a      	str	r2, [r3, #4]
 8005dd6:	4ab3      	ldr	r2, [pc, #716]	; (80060a4 <envelope_create_service+0x6fc>)
 8005dd8:	609a      	str	r2, [r3, #8]
 8005dda:	4ab3      	ldr	r2, [pc, #716]	; (80060a8 <envelope_create_service+0x700>)
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	f7fa fef3 	bl	8000bc8 <configuration_is_valid>
 8005de2:	4681      	mov	r9, r0
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d002      	beq.n	8005dee <envelope_create_service+0x446>
 8005de8:	ab12      	add	r3, sp, #72	; 0x48
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4699      	mov	r9, r3
 8005dee:	a80b      	add	r0, sp, #44	; 0x2c
 8005df0:	f7fa feea 	bl	8000bc8 <configuration_is_valid>
 8005df4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d100      	bne.n	8005dfc <envelope_create_service+0x454>
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	238f      	movs	r3, #143	; 0x8f
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	18e7      	adds	r7, r4, r3
 8005e02:	4baa      	ldr	r3, [pc, #680]	; (80060ac <envelope_create_service+0x704>)
 8005e04:	607b      	str	r3, [r7, #4]
 8005e06:	4baa      	ldr	r3, [pc, #680]	; (80060b0 <envelope_create_service+0x708>)
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	4baa      	ldr	r3, [pc, #680]	; (80060b4 <envelope_create_service+0x70c>)
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	464b      	mov	r3, r9
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d100      	bne.n	8005e16 <envelope_create_service+0x46e>
 8005e14:	e10f      	b.n	8006036 <envelope_create_service+0x68e>
 8005e16:	49a8      	ldr	r1, [pc, #672]	; (80060b8 <envelope_create_service+0x710>)
 8005e18:	1c30      	adds	r0, r6, #0
 8005e1a:	f00b fa73 	bl	8011304 <__aeabi_fcmplt>
 8005e1e:	4683      	mov	fp, r0
 8005e20:	2800      	cmp	r0, #0
 8005e22:	d000      	beq.n	8005e26 <envelope_create_service+0x47e>
 8005e24:	e178      	b.n	8006118 <envelope_create_service+0x770>
 8005e26:	49a5      	ldr	r1, [pc, #660]	; (80060bc <envelope_create_service+0x714>)
 8005e28:	1c30      	adds	r0, r6, #0
 8005e2a:	f00b fa7f 	bl	801132c <__aeabi_fcmpgt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d000      	beq.n	8005e34 <envelope_create_service+0x48c>
 8005e32:	e173      	b.n	800611c <envelope_create_service+0x774>
 8005e34:	464b      	mov	r3, r9
 8005e36:	63fe      	str	r6, [r7, #60]	; 0x3c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d100      	bne.n	8005e3e <envelope_create_service+0x496>
 8005e3c:	e24e      	b.n	80062dc <envelope_create_service+0x934>
 8005e3e:	4ba0      	ldr	r3, [pc, #640]	; (80060c0 <envelope_create_service+0x718>)
 8005e40:	0076      	lsls	r6, r6, #1
 8005e42:	0876      	lsrs	r6, r6, #1
 8005e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e46:	499f      	ldr	r1, [pc, #636]	; (80060c4 <envelope_create_service+0x71c>)
 8005e48:	1c30      	adds	r0, r6, #0
 8005e4a:	f00b fa6f 	bl	801132c <__aeabi_fcmpgt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d000      	beq.n	8005e54 <envelope_create_service+0x4ac>
 8005e52:	4e9c      	ldr	r6, [pc, #624]	; (80060c4 <envelope_create_service+0x71c>)
 8005e54:	2191      	movs	r1, #145	; 0x91
 8005e56:	1c30      	adds	r0, r6, #0
 8005e58:	05c9      	lsls	r1, r1, #23
 8005e5a:	f00a fd5b 	bl	8010914 <__aeabi_fmul>
 8005e5e:	f00d fff3 	bl	8013e48 <roundf>
 8005e62:	21da      	movs	r1, #218	; 0xda
 8005e64:	0589      	lsls	r1, r1, #22
 8005e66:	f00a fd55 	bl	8010914 <__aeabi_fmul>
 8005e6a:	4997      	ldr	r1, [pc, #604]	; (80060c8 <envelope_create_service+0x720>)
 8005e6c:	f00a fd52 	bl	8010914 <__aeabi_fmul>
 8005e70:	1c01      	adds	r1, r0, #0
 8005e72:	1c06      	adds	r6, r0, #0
 8005e74:	4895      	ldr	r0, [pc, #596]	; (80060cc <envelope_create_service+0x724>)
 8005e76:	f00a fe7f 	bl	8010b78 <__aeabi_fsub>
 8005e7a:	4995      	ldr	r1, [pc, #596]	; (80060d0 <envelope_create_service+0x728>)
 8005e7c:	f00a fe7c 	bl	8010b78 <__aeabi_fsub>
 8005e80:	1c07      	adds	r7, r0, #0
 8005e82:	1c01      	adds	r1, r0, #0
 8005e84:	1c30      	adds	r0, r6, #0
 8005e86:	f00b fa3d 	bl	8011304 <__aeabi_fcmplt>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d100      	bne.n	8005e90 <envelope_create_service+0x4e8>
 8005e8e:	e149      	b.n	8006124 <envelope_create_service+0x77c>
 8005e90:	2100      	movs	r1, #0
 8005e92:	1c30      	adds	r0, r6, #0
 8005e94:	f009 fe3d 	bl	800fb12 <quarter_pi_cos_sin_f32.lto_priv.533>
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	1c30      	adds	r0, r6, #0
 8005e9e:	f009 fe38 	bl	800fb12 <quarter_pi_cos_sin_f32.lto_priv.533>
 8005ea2:	1c01      	adds	r1, r0, #0
 8005ea4:	4648      	mov	r0, r9
 8005ea6:	f00a fc23 	bl	80106f0 <__aeabi_fdiv>
 8005eaa:	498a      	ldr	r1, [pc, #552]	; (80060d4 <envelope_create_service+0x72c>)
 8005eac:	f00a fd32 	bl	8010914 <__aeabi_fmul>
 8005eb0:	4989      	ldr	r1, [pc, #548]	; (80060d8 <envelope_create_service+0x730>)
 8005eb2:	1c06      	adds	r6, r0, #0
 8005eb4:	f00a fa82 	bl	80103bc <__aeabi_fadd>
 8005eb8:	1c31      	adds	r1, r6, #0
 8005eba:	f00a fd2b 	bl	8010914 <__aeabi_fmul>
 8005ebe:	4986      	ldr	r1, [pc, #536]	; (80060d8 <envelope_create_service+0x730>)
 8005ec0:	1c07      	adds	r7, r0, #0
 8005ec2:	1c30      	adds	r0, r6, #0
 8005ec4:	f00a fd26 	bl	8010914 <__aeabi_fmul>
 8005ec8:	21fe      	movs	r1, #254	; 0xfe
 8005eca:	0589      	lsls	r1, r1, #22
 8005ecc:	f00a fa76 	bl	80103bc <__aeabi_fadd>
 8005ed0:	1c01      	adds	r1, r0, #0
 8005ed2:	1c38      	adds	r0, r7, #0
 8005ed4:	f00a fc0c 	bl	80106f0 <__aeabi_fdiv>
 8005ed8:	1c01      	adds	r1, r0, #0
 8005eda:	1c06      	adds	r6, r0, #0
 8005edc:	f00a fd1a 	bl	8010914 <__aeabi_fmul>
 8005ee0:	21fe      	movs	r1, #254	; 0xfe
 8005ee2:	0589      	lsls	r1, r1, #22
 8005ee4:	f00a fa6a 	bl	80103bc <__aeabi_fadd>
 8005ee8:	f00d fb98 	bl	801361c <__ieee754_sqrtf>
 8005eec:	1c01      	adds	r1, r0, #0
 8005eee:	20fe      	movs	r0, #254	; 0xfe
 8005ef0:	0580      	lsls	r0, r0, #22
 8005ef2:	f00a fbfd 	bl	80106f0 <__aeabi_fdiv>
 8005ef6:	2181      	movs	r1, #129	; 0x81
 8005ef8:	1c07      	adds	r7, r0, #0
 8005efa:	05c9      	lsls	r1, r1, #23
 8005efc:	1c30      	adds	r0, r6, #0
 8005efe:	f00b fa01 	bl	8011304 <__aeabi_fcmplt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d100      	bne.n	8005f08 <envelope_create_service+0x560>
 8005f06:	e124      	b.n	8006152 <envelope_create_service+0x7aa>
 8005f08:	21fe      	movs	r1, #254	; 0xfe
 8005f0a:	1c30      	adds	r0, r6, #0
 8005f0c:	0589      	lsls	r1, r1, #22
 8005f0e:	f00b fa0d 	bl	801132c <__aeabi_fcmpgt>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d100      	bne.n	8005f18 <envelope_create_service+0x570>
 8005f16:	e10f      	b.n	8006138 <envelope_create_service+0x790>
 8005f18:	218a      	movs	r1, #138	; 0x8a
 8005f1a:	1c38      	adds	r0, r7, #0
 8005f1c:	05c9      	lsls	r1, r1, #23
 8005f1e:	f00a fcf9 	bl	8010914 <__aeabi_fmul>
 8005f22:	21fc      	movs	r1, #252	; 0xfc
 8005f24:	0589      	lsls	r1, r1, #22
 8005f26:	f00a fa49 	bl	80103bc <__aeabi_fadd>
 8005f2a:	f00b fbe9 	bl	8011700 <__aeabi_f2iz>
 8005f2e:	0046      	lsls	r6, r0, #1
 8005f30:	2080      	movs	r0, #128	; 0x80
 8005f32:	00b3      	lsls	r3, r6, #2
 8005f34:	4373      	muls	r3, r6
 8005f36:	04c0      	lsls	r0, r0, #19
 8005f38:	1ac0      	subs	r0, r0, r3
 8005f3a:	f00b fc4b 	bl	80117d4 <__aeabi_ui2f>
 8005f3e:	f00d fb6d 	bl	801361c <__ieee754_sqrtf>
 8005f42:	21fc      	movs	r1, #252	; 0xfc
 8005f44:	0589      	lsls	r1, r1, #22
 8005f46:	f00a fa39 	bl	80103bc <__aeabi_fadd>
 8005f4a:	f00b fbd9 	bl	8011700 <__aeabi_f2iz>
 8005f4e:	0007      	movs	r7, r0
 8005f50:	239f      	movs	r3, #159	; 0x9f
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4699      	mov	r9, r3
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	015b      	lsls	r3, r3, #5
 8005f5a:	469b      	mov	fp, r3
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	d000      	beq.n	8005f62 <envelope_create_service+0x5ba>
 8005f60:	e11b      	b.n	800619a <envelope_create_service+0x7f2>
 8005f62:	229e      	movs	r2, #158	; 0x9e
 8005f64:	21fc      	movs	r1, #252	; 0xfc
 8005f66:	0092      	lsls	r2, r2, #2
 8005f68:	0589      	lsls	r1, r1, #22
 8005f6a:	50a1      	str	r1, [r4, r2]
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	464a      	mov	r2, r9
 8005f70:	50a3      	str	r3, [r4, r2]
 8005f72:	23a0      	movs	r3, #160	; 0xa0
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	50e6      	str	r6, [r4, r3]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	52e6      	strh	r6, [r4, r3]
 8005f7c:	4643      	mov	r3, r8
 8005f7e:	4a57      	ldr	r2, [pc, #348]	; (80060dc <envelope_create_service+0x734>)
 8005f80:	4957      	ldr	r1, [pc, #348]	; (80060e0 <envelope_create_service+0x738>)
 8005f82:	2000      	movs	r0, #0
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	4798      	blx	r3
 8005f88:	a80b      	add	r0, sp, #44	; 0x2c
 8005f8a:	f7fa fe1d 	bl	8000bc8 <configuration_is_valid>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d010      	beq.n	8005fb4 <envelope_create_service+0x60c>
 8005f92:	ab11      	add	r3, sp, #68	; 0x44
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00c      	beq.n	8005fb4 <envelope_create_service+0x60c>
 8005f9a:	23a4      	movs	r3, #164	; 0xa4
 8005f9c:	4951      	ldr	r1, [pc, #324]	; (80060e4 <envelope_create_service+0x73c>)
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	18e3      	adds	r3, r4, r3
 8005fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005fa4:	6059      	str	r1, [r3, #4]
 8005fa6:	4950      	ldr	r1, [pc, #320]	; (80060e8 <envelope_create_service+0x740>)
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8005faa:	6099      	str	r1, [r3, #8]
 8005fac:	4a4f      	ldr	r2, [pc, #316]	; (80060ec <envelope_create_service+0x744>)
 8005fae:	4950      	ldr	r1, [pc, #320]	; (80060f0 <envelope_create_service+0x748>)
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8005fb2:	60d9      	str	r1, [r3, #12]
 8005fb4:	23b4      	movs	r3, #180	; 0xb4
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	18e6      	adds	r6, r4, r3
 8005fba:	4b4e      	ldr	r3, [pc, #312]	; (80060f4 <envelope_create_service+0x74c>)
 8005fbc:	a80b      	add	r0, sp, #44	; 0x2c
 8005fbe:	6073      	str	r3, [r6, #4]
 8005fc0:	4b4d      	ldr	r3, [pc, #308]	; (80060f8 <envelope_create_service+0x750>)
 8005fc2:	60b3      	str	r3, [r6, #8]
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	; (80060fc <envelope_create_service+0x754>)
 8005fc6:	60f3      	str	r3, [r6, #12]
 8005fc8:	4b4d      	ldr	r3, [pc, #308]	; (8006100 <envelope_create_service+0x758>)
 8005fca:	63b3      	str	r3, [r6, #56]	; 0x38
 8005fcc:	23c3      	movs	r3, #195	; 0xc3
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	44a1      	add	r9, r4
 8005fd4:	464a      	mov	r2, r9
 8005fd6:	4b4b      	ldr	r3, [pc, #300]	; (8006104 <envelope_create_service+0x75c>)
 8005fd8:	6393      	str	r3, [r2, #56]	; 0x38
 8005fda:	4b26      	ldr	r3, [pc, #152]	; (8006074 <envelope_create_service+0x6cc>)
 8005fdc:	6053      	str	r3, [r2, #4]
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <envelope_create_service+0x6d4>)
 8005fe0:	6093      	str	r3, [r2, #8]
 8005fe2:	4b27      	ldr	r3, [pc, #156]	; (8006080 <envelope_create_service+0x6d8>)
 8005fe4:	60d3      	str	r3, [r2, #12]
 8005fe6:	23d2      	movs	r3, #210	; 0xd2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	18e7      	adds	r7, r4, r3
 8005fec:	4b46      	ldr	r3, [pc, #280]	; (8006108 <envelope_create_service+0x760>)
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff0:	4b46      	ldr	r3, [pc, #280]	; (800610c <envelope_create_service+0x764>)
 8005ff2:	607b      	str	r3, [r7, #4]
 8005ff4:	4b46      	ldr	r3, [pc, #280]	; (8006110 <envelope_create_service+0x768>)
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	4b46      	ldr	r3, [pc, #280]	; (8006114 <envelope_create_service+0x76c>)
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	0023      	movs	r3, r4
 8005ffe:	3378      	adds	r3, #120	; 0x78
 8006000:	63a3      	str	r3, [r4, #56]	; 0x38
 8006002:	23b8      	movs	r3, #184	; 0xb8
 8006004:	469b      	mov	fp, r3
 8006006:	44a3      	add	fp, r4
 8006008:	465b      	mov	r3, fp
 800600a:	67a3      	str	r3, [r4, #120]	; 0x78
 800600c:	f7fa fdff 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8006010:	0023      	movs	r3, r4
 8006012:	3339      	adds	r3, #57	; 0x39
 8006014:	33ff      	adds	r3, #255	; 0xff
 8006016:	2800      	cmp	r0, #0
 8006018:	d000      	beq.n	800601c <envelope_create_service+0x674>
 800601a:	e162      	b.n	80062e2 <envelope_create_service+0x93a>
 800601c:	465a      	mov	r2, fp
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e164      	b.n	80062ec <envelope_create_service+0x944>
 8006022:	a80b      	add	r0, sp, #44	; 0x2c
 8006024:	f7fa ff94 	bl	8000f50 <acc_base_configuration_print.part.5>
 8006028:	e63b      	b.n	8005ca2 <envelope_create_service+0x2fa>
 800602a:	2300      	movs	r3, #0
 800602c:	4699      	mov	r9, r3
 800602e:	e6a2      	b.n	8005d76 <envelope_create_service+0x3ce>
 8006030:	21bf      	movs	r1, #191	; 0xbf
 8006032:	0609      	lsls	r1, r1, #24
 8006034:	e6bb      	b.n	8005dae <envelope_create_service+0x406>
 8006036:	26fc      	movs	r6, #252	; 0xfc
 8006038:	05b6      	lsls	r6, r6, #22
 800603a:	e6fb      	b.n	8005e34 <envelope_create_service+0x48c>
 800603c:	200005d0 	.word	0x200005d0
 8006040:	080025ad 	.word	0x080025ad
 8006044:	0800032d 	.word	0x0800032d
 8006048:	080002d7 	.word	0x080002d7
 800604c:	080008f7 	.word	0x080008f7
 8006050:	08000881 	.word	0x08000881
 8006054:	0800082b 	.word	0x0800082b
 8006058:	0800092f 	.word	0x0800092f
 800605c:	08002789 	.word	0x08002789
 8006060:	08000493 	.word	0x08000493
 8006064:	08000479 	.word	0x08000479
 8006068:	08000425 	.word	0x08000425
 800606c:	08000907 	.word	0x08000907
 8006070:	080006fd 	.word	0x080006fd
 8006074:	08000951 	.word	0x08000951
 8006078:	080005b5 	.word	0x080005b5
 800607c:	080006a9 	.word	0x080006a9
 8006080:	08000927 	.word	0x08000927
 8006084:	080004fd 	.word	0x080004fd
 8006088:	0800090f 	.word	0x0800090f
 800608c:	080025e9 	.word	0x080025e9
 8006090:	08000415 	.word	0x08000415
 8006094:	080003a5 	.word	0x080003a5
 8006098:	080008ff 	.word	0x080008ff
 800609c:	08005555 	.word	0x08005555
 80060a0:	08000699 	.word	0x08000699
 80060a4:	08000645 	.word	0x08000645
 80060a8:	0800091f 	.word	0x0800091f
 80060ac:	08000635 	.word	0x08000635
 80060b0:	080005c5 	.word	0x080005c5
 80060b4:	08000917 	.word	0x08000917
 80060b8:	3b843809 	.word	0x3b843809
 80060bc:	3efdca08 	.word	0x3efdca08
 80060c0:	08002737 	.word	0x08002737
 80060c4:	3effffde 	.word	0x3effffde
 80060c8:	40490fdb 	.word	0x40490fdb
 80060cc:	3fc90fdb 	.word	0x3fc90fdb
 80060d0:	333bbd2e 	.word	0x333bbd2e
 80060d4:	3f9f8d77 	.word	0x3f9f8d77
 80060d8:	3fb504f3 	.word	0x3fb504f3
 80060dc:	0801d835 	.word	0x0801d835
 80060e0:	0801cdc9 	.word	0x0801cdc9
 80060e4:	080022f9 	.word	0x080022f9
 80060e8:	080001db 	.word	0x080001db
 80060ec:	08000251 	.word	0x08000251
 80060f0:	08000241 	.word	0x08000241
 80060f4:	08000937 	.word	0x08000937
 80060f8:	08000899 	.word	0x08000899
 80060fc:	080008ed 	.word	0x080008ed
 8006100:	080025b5 	.word	0x080025b5
 8006104:	0800080f 	.word	0x0800080f
 8006108:	0800238d 	.word	0x0800238d
 800610c:	080001c5 	.word	0x080001c5
 8006110:	08000157 	.word	0x08000157
 8006114:	080001c3 	.word	0x080001c3
 8006118:	4e98      	ldr	r6, [pc, #608]	; (800637c <envelope_create_service+0x9d4>)
 800611a:	e68b      	b.n	8005e34 <envelope_create_service+0x48c>
 800611c:	26fc      	movs	r6, #252	; 0xfc
 800611e:	46d9      	mov	r9, fp
 8006120:	05b6      	lsls	r6, r6, #22
 8006122:	e687      	b.n	8005e34 <envelope_create_service+0x48c>
 8006124:	2101      	movs	r1, #1
 8006126:	1c38      	adds	r0, r7, #0
 8006128:	f009 fcf3 	bl	800fb12 <quarter_pi_cos_sin_f32.lto_priv.533>
 800612c:	2100      	movs	r1, #0
 800612e:	4681      	mov	r9, r0
 8006130:	1c38      	adds	r0, r7, #0
 8006132:	f009 fcee 	bl	800fb12 <quarter_pi_cos_sin_f32.lto_priv.533>
 8006136:	e6b4      	b.n	8005ea2 <envelope_create_service+0x4fa>
 8006138:	218b      	movs	r1, #139	; 0x8b
 800613a:	1c38      	adds	r0, r7, #0
 800613c:	05c9      	lsls	r1, r1, #23
 800613e:	f00a fbe9 	bl	8010914 <__aeabi_fmul>
 8006142:	21fc      	movs	r1, #252	; 0xfc
 8006144:	0589      	lsls	r1, r1, #22
 8006146:	f00a f939 	bl	80103bc <__aeabi_fadd>
 800614a:	f00b fad9 	bl	8011700 <__aeabi_f2iz>
 800614e:	0006      	movs	r6, r0
 8006150:	e6ee      	b.n	8005f30 <envelope_create_service+0x588>
 8006152:	218c      	movs	r1, #140	; 0x8c
 8006154:	1c30      	adds	r0, r6, #0
 8006156:	05c9      	lsls	r1, r1, #23
 8006158:	f00a fbdc 	bl	8010914 <__aeabi_fmul>
 800615c:	1c39      	adds	r1, r7, #0
 800615e:	f00a fbd9 	bl	8010914 <__aeabi_fmul>
 8006162:	21fc      	movs	r1, #252	; 0xfc
 8006164:	0589      	lsls	r1, r1, #22
 8006166:	f00a f929 	bl	80103bc <__aeabi_fadd>
 800616a:	f00b fac9 	bl	8011700 <__aeabi_f2iz>
 800616e:	0003      	movs	r3, r0
 8006170:	0007      	movs	r7, r0
 8006172:	4343      	muls	r3, r0
 8006174:	2080      	movs	r0, #128	; 0x80
 8006176:	04c0      	lsls	r0, r0, #19
 8006178:	1ac0      	subs	r0, r0, r3
 800617a:	f00b fb2b 	bl	80117d4 <__aeabi_ui2f>
 800617e:	f00d fa4d 	bl	801361c <__ieee754_sqrtf>
 8006182:	21fc      	movs	r1, #252	; 0xfc
 8006184:	0589      	lsls	r1, r1, #22
 8006186:	f00a fbc5 	bl	8010914 <__aeabi_fmul>
 800618a:	21fc      	movs	r1, #252	; 0xfc
 800618c:	0589      	lsls	r1, r1, #22
 800618e:	f00a f915 	bl	80103bc <__aeabi_fadd>
 8006192:	f00b fab5 	bl	8011700 <__aeabi_f2iz>
 8006196:	0006      	movs	r6, r0
 8006198:	e6da      	b.n	8005f50 <envelope_create_service+0x5a8>
 800619a:	465b      	mov	r3, fp
 800619c:	b2b0      	uxth	r0, r6
 800619e:	1a19      	subs	r1, r3, r0
 80061a0:	b289      	uxth	r1, r1
 80061a2:	b20a      	sxth	r2, r1
 80061a4:	4694      	mov	ip, r2
 80061a6:	464a      	mov	r2, r9
 80061a8:	4663      	mov	r3, ip
 80061aa:	52a3      	strh	r3, [r4, r2]
 80061ac:	004b      	lsls	r3, r1, #1
 80061ae:	4699      	mov	r9, r3
 80061b0:	239f      	movs	r3, #159	; 0x9f
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	18e1      	adds	r1, r4, r3
 80061b6:	464b      	mov	r3, r9
 80061b8:	804b      	strh	r3, [r1, #2]
 80061ba:	4663      	mov	r3, ip
 80061bc:	808b      	strh	r3, [r1, #4]
 80061be:	0043      	lsls	r3, r0, #1
 80061c0:	b2b8      	uxth	r0, r7
 80061c2:	1ac2      	subs	r2, r0, r3
 80061c4:	80ca      	strh	r2, [r1, #6]
 80061c6:	22c0      	movs	r2, #192	; 0xc0
 80061c8:	0152      	lsls	r2, r2, #5
 80061ca:	1b92      	subs	r2, r2, r6
 80061cc:	0052      	lsls	r2, r2, #1
 80061ce:	1a12      	subs	r2, r2, r0
 80061d0:	810a      	strh	r2, [r1, #8]
 80061d2:	2f00      	cmp	r7, #0
 80061d4:	d104      	bne.n	80061e0 <envelope_create_service+0x838>
 80061d6:	239e      	movs	r3, #158	; 0x9e
 80061d8:	9a01      	ldr	r2, [sp, #4]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	50e2      	str	r2, [r4, r3]
 80061de:	e6cd      	b.n	8005f7c <envelope_create_service+0x5d4>
 80061e0:	465b      	mov	r3, fp
 80061e2:	22fc      	movs	r2, #252	; 0xfc
 80061e4:	00b0      	lsls	r0, r6, #2
 80061e6:	1b9b      	subs	r3, r3, r6
 80061e8:	4346      	muls	r6, r0
 80061ea:	0038      	movs	r0, r7
 80061ec:	0612      	lsls	r2, r2, #24
 80061ee:	4694      	mov	ip, r2
 80061f0:	4378      	muls	r0, r7
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	1bdb      	subs	r3, r3, r7
 80061f6:	435b      	muls	r3, r3
 80061f8:	1836      	adds	r6, r6, r0
 80061fa:	4466      	add	r6, ip
 80061fc:	0076      	lsls	r6, r6, #1
 80061fe:	1b98      	subs	r0, r3, r6
 8006200:	f00b fa9e 	bl	8011740 <__aeabi_i2f>
 8006204:	4681      	mov	r9, r0
 8006206:	0030      	movs	r0, r6
 8006208:	f00b fa9a 	bl	8011740 <__aeabi_i2f>
 800620c:	4649      	mov	r1, r9
 800620e:	f00a fa6f 	bl	80106f0 <__aeabi_fdiv>
 8006212:	495b      	ldr	r1, [pc, #364]	; (8006380 <envelope_create_service+0x9d8>)
 8006214:	1c06      	adds	r6, r0, #0
 8006216:	f00a f8d1 	bl	80103bc <__aeabi_fadd>
 800621a:	4683      	mov	fp, r0
 800621c:	4648      	mov	r0, r9
 800621e:	f00d f9fd 	bl	801361c <__ieee754_sqrtf>
 8006222:	4681      	mov	r9, r0
 8006224:	2080      	movs	r0, #128	; 0x80
 8006226:	0180      	lsls	r0, r0, #6
 8006228:	1bc0      	subs	r0, r0, r7
 800622a:	0040      	lsls	r0, r0, #1
 800622c:	f00b fa88 	bl	8011740 <__aeabi_i2f>
 8006230:	1c01      	adds	r1, r0, #0
 8006232:	4648      	mov	r0, r9
 8006234:	f00a fa5c 	bl	80106f0 <__aeabi_fdiv>
 8006238:	4952      	ldr	r1, [pc, #328]	; (8006384 <envelope_create_service+0x9dc>)
 800623a:	1c07      	adds	r7, r0, #0
 800623c:	4658      	mov	r0, fp
 800623e:	f00a fb69 	bl	8010914 <__aeabi_fmul>
 8006242:	4659      	mov	r1, fp
 8006244:	f00a fb66 	bl	8010914 <__aeabi_fmul>
 8006248:	494f      	ldr	r1, [pc, #316]	; (8006388 <envelope_create_service+0x9e0>)
 800624a:	f00a f8b7 	bl	80103bc <__aeabi_fadd>
 800624e:	f00d f9e5 	bl	801361c <__ieee754_sqrtf>
 8006252:	1c31      	adds	r1, r6, #0
 8006254:	f00a fc90 	bl	8010b78 <__aeabi_fsub>
 8006258:	f00d f9e0 	bl	801361c <__ieee754_sqrtf>
 800625c:	1c01      	adds	r1, r0, #0
 800625e:	1c38      	adds	r0, r7, #0
 8006260:	f00a fb58 	bl	8010914 <__aeabi_fmul>
 8006264:	4949      	ldr	r1, [pc, #292]	; (800638c <envelope_create_service+0x9e4>)
 8006266:	1c06      	adds	r6, r0, #0
 8006268:	f00b f84c 	bl	8011304 <__aeabi_fcmplt>
 800626c:	2800      	cmp	r0, #0
 800626e:	d133      	bne.n	80062d8 <envelope_create_service+0x930>
 8006270:	21fe      	movs	r1, #254	; 0xfe
 8006272:	1c30      	adds	r0, r6, #0
 8006274:	0589      	lsls	r1, r1, #22
 8006276:	f00b f859 	bl	801132c <__aeabi_fcmpgt>
 800627a:	4f45      	ldr	r7, [pc, #276]	; (8006390 <envelope_create_service+0x9e8>)
 800627c:	2800      	cmp	r0, #0
 800627e:	d021      	beq.n	80062c4 <envelope_create_service+0x91c>
 8006280:	20fe      	movs	r0, #254	; 0xfe
 8006282:	1c31      	adds	r1, r6, #0
 8006284:	0580      	lsls	r0, r0, #22
 8006286:	f00a fa33 	bl	80106f0 <__aeabi_fdiv>
 800628a:	2109      	movs	r1, #9
 800628c:	1c02      	adds	r2, r0, #0
 800628e:	1c06      	adds	r6, r0, #0
 8006290:	0038      	movs	r0, r7
 8006292:	f009 fc25 	bl	800fae0 <eval_even_poly_f32.lto_priv.534>
 8006296:	1c01      	adds	r1, r0, #0
 8006298:	1c30      	adds	r0, r6, #0
 800629a:	f00a fb3b 	bl	8010914 <__aeabi_fmul>
 800629e:	1c01      	adds	r1, r0, #0
 80062a0:	483c      	ldr	r0, [pc, #240]	; (8006394 <envelope_create_service+0x9ec>)
 80062a2:	f00a fc69 	bl	8010b78 <__aeabi_fsub>
 80062a6:	493c      	ldr	r1, [pc, #240]	; (8006398 <envelope_create_service+0x9f0>)
 80062a8:	f00a fc66 	bl	8010b78 <__aeabi_fsub>
 80062ac:	493b      	ldr	r1, [pc, #236]	; (800639c <envelope_create_service+0x9f4>)
 80062ae:	f00a fa1f 	bl	80106f0 <__aeabi_fdiv>
 80062b2:	239e      	movs	r3, #158	; 0x9e
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	50e0      	str	r0, [r4, r3]
 80062b8:	238f      	movs	r3, #143	; 0x8f
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	18e3      	adds	r3, r4, r3
 80062be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c0:	6363      	str	r3, [r4, #52]	; 0x34
 80062c2:	e661      	b.n	8005f88 <envelope_create_service+0x5e0>
 80062c4:	1c32      	adds	r2, r6, #0
 80062c6:	2109      	movs	r1, #9
 80062c8:	0038      	movs	r0, r7
 80062ca:	f009 fc09 	bl	800fae0 <eval_even_poly_f32.lto_priv.534>
 80062ce:	1c01      	adds	r1, r0, #0
 80062d0:	1c30      	adds	r0, r6, #0
 80062d2:	f00a fb1f 	bl	8010914 <__aeabi_fmul>
 80062d6:	e7e9      	b.n	80062ac <envelope_create_service+0x904>
 80062d8:	4831      	ldr	r0, [pc, #196]	; (80063a0 <envelope_create_service+0x9f8>)
 80062da:	e7e7      	b.n	80062ac <envelope_create_service+0x904>
 80062dc:	4b31      	ldr	r3, [pc, #196]	; (80063a4 <envelope_create_service+0x9fc>)
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e0:	e7ea      	b.n	80062b8 <envelope_create_service+0x910>
 80062e2:	0022      	movs	r2, r4
 80062e4:	4659      	mov	r1, fp
 80062e6:	32f8      	adds	r2, #248	; 0xf8
 80062e8:	600a      	str	r2, [r1, #0]
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	0023      	movs	r3, r4
 80062ee:	229c      	movs	r2, #156	; 0x9c
 80062f0:	3375      	adds	r3, #117	; 0x75
 80062f2:	0052      	lsls	r2, r2, #1
 80062f4:	33ff      	adds	r3, #255	; 0xff
 80062f6:	50a3      	str	r3, [r4, r2]
 80062f8:	323c      	adds	r2, #60	; 0x3c
 80062fa:	3344      	adds	r3, #68	; 0x44
 80062fc:	50a3      	str	r3, [r4, r2]
 80062fe:	2380      	movs	r3, #128	; 0x80
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	3244      	adds	r2, #68	; 0x44
 8006304:	18e3      	adds	r3, r4, r3
 8006306:	50a3      	str	r3, [r4, r2]
 8006308:	238f      	movs	r3, #143	; 0x8f
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	18e3      	adds	r3, r4, r3
 800630e:	3248      	adds	r2, #72	; 0x48
 8006310:	50a3      	str	r3, [r4, r2]
 8006312:	a80b      	add	r0, sp, #44	; 0x2c
 8006314:	f7fa fc58 	bl	8000bc8 <configuration_is_valid>
 8006318:	238f      	movs	r3, #143	; 0x8f
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	2800      	cmp	r0, #0
 800631e:	d01b      	beq.n	8006358 <envelope_create_service+0x9b0>
 8006320:	aa11      	add	r2, sp, #68	; 0x44
 8006322:	7812      	ldrb	r2, [r2, #0]
 8006324:	2a00      	cmp	r2, #0
 8006326:	d017      	beq.n	8006358 <envelope_create_service+0x9b0>
 8006328:	22a4      	movs	r2, #164	; 0xa4
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	18a2      	adds	r2, r4, r2
 800632e:	50e2      	str	r2, [r4, r3]
 8006330:	3354      	adds	r3, #84	; 0x54
 8006332:	50e6      	str	r6, [r4, r3]
 8006334:	23b4      	movs	r3, #180	; 0xb4
 8006336:	464a      	mov	r2, r9
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	50e2      	str	r2, [r4, r3]
 800633c:	333c      	adds	r3, #60	; 0x3c
 800633e:	50e7      	str	r7, [r4, r3]
 8006340:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006342:	6883      	ldr	r3, [r0, #8]
 8006344:	4798      	blx	r3
 8006346:	1e06      	subs	r6, r0, #0
 8006348:	d108      	bne.n	800635c <envelope_create_service+0x9b4>
 800634a:	4643      	mov	r3, r8
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <envelope_create_service+0xa00>)
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	4916      	ldr	r1, [pc, #88]	; (80063ac <envelope_create_service+0xa04>)
 8006352:	4798      	blx	r3
 8006354:	f7ff fbd7 	bl	8005b06 <envelope_create_service+0x15e>
 8006358:	50e6      	str	r6, [r4, r3]
 800635a:	e7eb      	b.n	8006334 <envelope_create_service+0x98c>
 800635c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800635e:	68c3      	ldr	r3, [r0, #12]
 8006360:	4798      	blx	r3
 8006362:	23e1      	movs	r3, #225	; 0xe1
 8006364:	4652      	mov	r2, sl
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	50e2      	str	r2, [r4, r3]
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <envelope_create_service+0xa08>)
 800636c:	606b      	str	r3, [r5, #4]
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <envelope_create_service+0xa0c>)
 8006370:	60ab      	str	r3, [r5, #8]
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <envelope_create_service+0xa10>)
 8006374:	60eb      	str	r3, [r5, #12]
 8006376:	f7ff fba6 	bl	8005ac6 <envelope_create_service+0x11e>
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	3b843809 	.word	0x3b843809
 8006380:	3f15f61a 	.word	0x3f15f61a
 8006384:	3fb504f3 	.word	0x3fb504f3
 8006388:	3f95f61a 	.word	0x3f95f61a
 800638c:	bf800000 	.word	0xbf800000
 8006390:	08016960 	.word	0x08016960
 8006394:	3fc90fdb 	.word	0x3fc90fdb
 8006398:	333bbd2e 	.word	0x333bbd2e
 800639c:	40490fdb 	.word	0x40490fdb
 80063a0:	7fc00000 	.word	0x7fc00000
 80063a4:	080001c1 	.word	0x080001c1
 80063a8:	0801d73a 	.word	0x0801d73a
 80063ac:	0801d85e 	.word	0x0801d85e
 80063b0:	0800535d 	.word	0x0800535d
 80063b4:	080022e5 	.word	0x080022e5
 80063b8:	08000a0d 	.word	0x08000a0d

080063bc <acc_rss_activate>:
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	4d51      	ldr	r5, [pc, #324]	; (8006504 <acc_rss_activate+0x148>)
 80063c0:	46d6      	mov	lr, sl
 80063c2:	002b      	movs	r3, r5
 80063c4:	464f      	mov	r7, r9
 80063c6:	4646      	mov	r6, r8
 80063c8:	336c      	adds	r3, #108	; 0x6c
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	b5c0      	push	{r6, r7, lr}
 80063ce:	0001      	movs	r1, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d000      	beq.n	80063d6 <acc_rss_activate+0x1a>
 80063d4:	e08a      	b.n	80064ec <acc_rss_activate+0x130>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d06c      	beq.n	80064b4 <acc_rss_activate+0xf8>
 80063da:	6942      	ldr	r2, [r0, #20]
 80063dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d062      	beq.n	80064a8 <acc_rss_activate+0xec>
 80063e2:	6982      	ldr	r2, [r0, #24]
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d05f      	beq.n	80064a8 <acc_rss_activate+0xec>
 80063e8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d05c      	beq.n	80064a8 <acc_rss_activate+0xec>
 80063ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	d059      	beq.n	80064a8 <acc_rss_activate+0xec>
 80063f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	d056      	beq.n	80064a8 <acc_rss_activate+0xec>
 80063fa:	6882      	ldr	r2, [r0, #8]
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	d053      	beq.n	80064a8 <acc_rss_activate+0xec>
 8006400:	68c2      	ldr	r2, [r0, #12]
 8006402:	2a00      	cmp	r2, #0
 8006404:	d050      	beq.n	80064a8 <acc_rss_activate+0xec>
 8006406:	6902      	ldr	r2, [r0, #16]
 8006408:	2a00      	cmp	r2, #0
 800640a:	d04d      	beq.n	80064a8 <acc_rss_activate+0xec>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d051      	beq.n	80064b4 <acc_rss_activate+0xf8>
 8006410:	6802      	ldr	r2, [r0, #0]
 8006412:	2a2a      	cmp	r2, #42	; 0x2a
 8006414:	d84a      	bhi.n	80064ac <acc_rss_activate+0xf0>
 8006416:	6842      	ldr	r2, [r0, #4]
 8006418:	2a0f      	cmp	r2, #15
 800641a:	d947      	bls.n	80064ac <acc_rss_activate+0xf0>
 800641c:	69c2      	ldr	r2, [r0, #28]
 800641e:	2a00      	cmp	r2, #0
 8006420:	d002      	beq.n	8006428 <acc_rss_activate+0x6c>
 8006422:	6a02      	ldr	r2, [r0, #32]
 8006424:	2a00      	cmp	r2, #0
 8006426:	d041      	beq.n	80064ac <acc_rss_activate+0xf0>
 8006428:	4f37      	ldr	r7, [pc, #220]	; (8006508 <acc_rss_activate+0x14c>)
 800642a:	2238      	movs	r2, #56	; 0x38
 800642c:	0038      	movs	r0, r7
 800642e:	f010 f837 	bl	80164a0 <memcpy>
 8006432:	4c36      	ldr	r4, [pc, #216]	; (800650c <acc_rss_activate+0x150>)
 8006434:	0022      	movs	r2, r4
 8006436:	325c      	adds	r2, #92	; 0x5c
 8006438:	7813      	ldrb	r3, [r2, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d102      	bne.n	8006444 <acc_rss_activate+0x88>
 800643e:	2301      	movs	r3, #1
 8006440:	7013      	strb	r3, [r2, #0]
 8006442:	7123      	strb	r3, [r4, #4]
 8006444:	0023      	movs	r3, r4
 8006446:	335c      	adds	r3, #92	; 0x5c
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d048      	beq.n	80064e0 <acc_rss_activate+0x124>
 800644e:	002b      	movs	r3, r5
 8006450:	336d      	adds	r3, #109	; 0x6d
 8006452:	781e      	ldrb	r6, [r3, #0]
 8006454:	2e00      	cmp	r6, #0
 8006456:	d118      	bne.n	800648a <acc_rss_activate+0xce>
 8006458:	2048      	movs	r0, #72	; 0x48
 800645a:	2254      	movs	r2, #84	; 0x54
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	32ff      	adds	r2, #255	; 0xff
 8006460:	4358      	muls	r0, r3
 8006462:	492b      	ldr	r1, [pc, #172]	; (8006510 <acc_rss_activate+0x154>)
 8006464:	f7ff f95c 	bl	8005720 <acc_rss_integration_mem_alloc_debug>
 8006468:	6020      	str	r0, [r4, #0]
 800646a:	2800      	cmp	r0, #0
 800646c:	d038      	beq.n	80064e0 <acc_rss_activate+0x124>
 800646e:	2344      	movs	r3, #68	; 0x44
 8006470:	4699      	mov	r9, r3
 8006472:	4b28      	ldr	r3, [pc, #160]	; (8006514 <acc_rss_activate+0x158>)
 8006474:	3040      	adds	r0, #64	; 0x40
 8006476:	0004      	movs	r4, r0
 8006478:	46b0      	mov	r8, r6
 800647a:	469a      	mov	sl, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	429e      	cmp	r6, r3
 8006480:	d31f      	bcc.n	80064c2 <acc_rss_activate+0x106>
 8006482:	002b      	movs	r3, r5
 8006484:	2201      	movs	r2, #1
 8006486:	336d      	adds	r3, #109	; 0x6d
 8006488:	701a      	strb	r2, [r3, #0]
 800648a:	002b      	movs	r3, r5
 800648c:	2201      	movs	r2, #1
 800648e:	336c      	adds	r3, #108	; 0x6c
 8006490:	701a      	strb	r2, [r3, #0]
 8006492:	003b      	movs	r3, r7
 8006494:	3330      	adds	r3, #48	; 0x30
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	4293      	cmp	r3, r2
 800649a:	d90b      	bls.n	80064b4 <acc_rss_activate+0xf8>
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	4a1e      	ldr	r2, [pc, #120]	; (8006518 <acc_rss_activate+0x15c>)
 80064a0:	491e      	ldr	r1, [pc, #120]	; (800651c <acc_rss_activate+0x160>)
 80064a2:	2002      	movs	r0, #2
 80064a4:	4798      	blx	r3
 80064a6:	e005      	b.n	80064b4 <acc_rss_activate+0xf8>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <acc_rss_activate+0xf8>
 80064ac:	4a1c      	ldr	r2, [pc, #112]	; (8006520 <acc_rss_activate+0x164>)
 80064ae:	491d      	ldr	r1, [pc, #116]	; (8006524 <acc_rss_activate+0x168>)
 80064b0:	2000      	movs	r0, #0
 80064b2:	4798      	blx	r3
 80064b4:	356c      	adds	r5, #108	; 0x6c
 80064b6:	7828      	ldrb	r0, [r5, #0]
 80064b8:	bc1c      	pop	{r2, r3, r4}
 80064ba:	4690      	mov	r8, r2
 80064bc:	4699      	mov	r9, r3
 80064be:	46a2      	mov	sl, r4
 80064c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c2:	0020      	movs	r0, r4
 80064c4:	464a      	mov	r2, r9
 80064c6:	3840      	subs	r0, #64	; 0x40
 80064c8:	2100      	movs	r1, #0
 80064ca:	f00d facb 	bl	8013a64 <memset>
 80064ce:	4643      	mov	r3, r8
 80064d0:	7063      	strb	r3, [r4, #1]
 80064d2:	7023      	strb	r3, [r4, #0]
 80064d4:	70a3      	strb	r3, [r4, #2]
 80064d6:	4653      	mov	r3, sl
 80064d8:	3601      	adds	r6, #1
 80064da:	6063      	str	r3, [r4, #4]
 80064dc:	3448      	adds	r4, #72	; 0x48
 80064de:	e7cd      	b.n	800647c <acc_rss_activate+0xc0>
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	4a11      	ldr	r2, [pc, #68]	; (8006528 <acc_rss_activate+0x16c>)
 80064e4:	490d      	ldr	r1, [pc, #52]	; (800651c <acc_rss_activate+0x160>)
 80064e6:	2000      	movs	r0, #0
 80064e8:	4798      	blx	r3
 80064ea:	e7e3      	b.n	80064b4 <acc_rss_activate+0xf8>
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <acc_rss_activate+0x14c>)
 80064ee:	001a      	movs	r2, r3
 80064f0:	3230      	adds	r2, #48	; 0x30
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	2a01      	cmp	r2, #1
 80064f6:	d9dd      	bls.n	80064b4 <acc_rss_activate+0xf8>
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <acc_rss_activate+0x170>)
 80064fc:	4907      	ldr	r1, [pc, #28]	; (800651c <acc_rss_activate+0x160>)
 80064fe:	2002      	movs	r0, #2
 8006500:	4798      	blx	r3
 8006502:	e7d7      	b.n	80064b4 <acc_rss_activate+0xf8>
 8006504:	2000030c 	.word	0x2000030c
 8006508:	200005d0 	.word	0x200005d0
 800650c:	2000008c 	.word	0x2000008c
 8006510:	0801d5c2 	.word	0x0801d5c2
 8006514:	ff800000 	.word	0xff800000
 8006518:	0801d884 	.word	0x0801d884
 800651c:	0801d8a4 	.word	0x0801d8a4
 8006520:	0801d870 	.word	0x0801d870
 8006524:	0801e3c7 	.word	0x0801e3c7
 8006528:	0801d8a8 	.word	0x0801d8a8
 800652c:	0801d8be 	.word	0x0801d8be

08006530 <initRSS>:
void initRSS(void){
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 8006532:	4c44      	ldr	r4, [pc, #272]	; (8006644 <initRSS+0x114>)
 8006534:	0020      	movs	r0, r4
 8006536:	f00f faed 	bl	8015b14 <__wrap_printf>
 800653a:	4a43      	ldr	r2, [pc, #268]	; (8006648 <initRSS+0x118>)
 800653c:	4943      	ldr	r1, [pc, #268]	; (800664c <initRSS+0x11c>)
 800653e:	4844      	ldr	r0, [pc, #272]	; (8006650 <initRSS+0x120>)
 8006540:	f00f fae8 	bl	8015b14 <__wrap_printf>
 8006544:	200a      	movs	r0, #10
 8006546:	f00f ffc7 	bl	80164d8 <putchar>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 800654a:	0020      	movs	r0, r4
 800654c:	f00f fae2 	bl	8015b14 <__wrap_printf>
 8006550:	4d40      	ldr	r5, [pc, #256]	; (8006654 <initRSS+0x124>)
 8006552:	2102      	movs	r1, #2
 8006554:	0028      	movs	r0, r5
 8006556:	f7fb fc14 	bl	8001d82 <get_byte>
 800655a:	0006      	movs	r6, r0
 800655c:	2101      	movs	r1, #1
 800655e:	0028      	movs	r0, r5
 8006560:	f7fb fc0f 	bl	8001d82 <get_byte>
 8006564:	0007      	movs	r7, r0
 8006566:	2100      	movs	r1, #0
 8006568:	0028      	movs	r0, r5
 800656a:	f7fb fc0a 	bl	8001d82 <get_byte>
 800656e:	0003      	movs	r3, r0
 8006570:	003a      	movs	r2, r7
 8006572:	0031      	movs	r1, r6
 8006574:	4838      	ldr	r0, [pc, #224]	; (8006658 <initRSS+0x128>)
 8006576:	f00f facd 	bl	8015b14 <__wrap_printf>
 800657a:	200a      	movs	r0, #10
 800657c:	f00f ffac 	bl	80164d8 <putchar>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 8006580:	0020      	movs	r0, r4
 8006582:	f00f fac7 	bl	8015b14 <__wrap_printf>
 8006586:	4c35      	ldr	r4, [pc, #212]	; (800665c <initRSS+0x12c>)
 8006588:	2102      	movs	r1, #2
 800658a:	0020      	movs	r0, r4
 800658c:	f7fb fbf9 	bl	8001d82 <get_byte>
 8006590:	0005      	movs	r5, r0
 8006592:	2101      	movs	r1, #1
 8006594:	0020      	movs	r0, r4
 8006596:	f7fb fbf4 	bl	8001d82 <get_byte>
 800659a:	0006      	movs	r6, r0
 800659c:	2100      	movs	r1, #0
 800659e:	0020      	movs	r0, r4
 80065a0:	f7fb fbef 	bl	8001d82 <get_byte>
 80065a4:	0003      	movs	r3, r0
 80065a6:	0032      	movs	r2, r6
 80065a8:	0029      	movs	r1, r5
 80065aa:	482d      	ldr	r0, [pc, #180]	; (8006660 <initRSS+0x130>)
 80065ac:	f00f fab2 	bl	8015b14 <__wrap_printf>
 80065b0:	200a      	movs	r0, #10
 80065b2:	f00f ff91 	bl	80164d8 <putchar>
	radar_hal = *acc_hal_integration_get_implementation();
 80065b6:	f7fb fe1d 	bl	80021f4 <acc_hal_integration_get_implementation>
 80065ba:	0001      	movs	r1, r0
 80065bc:	4c29      	ldr	r4, [pc, #164]	; (8006664 <initRSS+0x134>)
 80065be:	3470      	adds	r4, #112	; 0x70
 80065c0:	2238      	movs	r2, #56	; 0x38
 80065c2:	0020      	movs	r0, r4
 80065c4:	f00f ff6c 	bl	80164a0 <memcpy>
	if (!acc_rss_activate(&radar_hal))
 80065c8:	0020      	movs	r0, r4
 80065ca:	f7ff fef7 	bl	80063bc <acc_rss_activate>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	d015      	beq.n	80065fe <initRSS+0xce>
	acc_rss_override_sensor_id_check_at_creation(true);
 80065d2:	2001      	movs	r0, #1
 80065d4:	f7fb f9c8 	bl	8001968 <acc_rss_override_sensor_id_check_at_creation>
	sparse_config = acc_service_sparse_configuration_create();
 80065d8:	f7fc fbc2 	bl	8002d60 <acc_service_sparse_configuration_create>
 80065dc:	4b22      	ldr	r3, [pc, #136]	; (8006668 <initRSS+0x138>)
 80065de:	6418      	str	r0, [r3, #64]	; 0x40
	if (sparse_config == NULL)
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d016      	beq.n	8006612 <initRSS+0xe2>
	sparse_config_far = acc_service_sparse_configuration_create();
 80065e4:	f7fc fbbc 	bl	8002d60 <acc_service_sparse_configuration_create>
 80065e8:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <initRSS+0x138>)
 80065ea:	6698      	str	r0, [r3, #104]	; 0x68
	if (sparse_config_far == NULL)
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d01a      	beq.n	8006626 <initRSS+0xf6>
    envelope_config = acc_service_envelope_configuration_create();
 80065f0:	f7fc fd28 	bl	8003044 <acc_service_envelope_configuration_create>
 80065f4:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <initRSS+0x138>)
 80065f6:	6658      	str	r0, [r3, #100]	; 0x64
	if (envelope_config == NULL)
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d01e      	beq.n	800663a <initRSS+0x10a>
}
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ERR_PRINTLN("RSS activation fail");
 80065fe:	481b      	ldr	r0, [pc, #108]	; (800666c <initRSS+0x13c>)
 8006600:	f00f fa88 	bl	8015b14 <__wrap_printf>
 8006604:	481a      	ldr	r0, [pc, #104]	; (8006670 <initRSS+0x140>)
 8006606:	f00f fa85 	bl	8015b14 <__wrap_printf>
 800660a:	200a      	movs	r0, #10
 800660c:	f00f ff64 	bl	80164d8 <putchar>
 8006610:	e7df      	b.n	80065d2 <initRSS+0xa2>
		ERR_PRINTLN("sparse config creation fail");
 8006612:	4816      	ldr	r0, [pc, #88]	; (800666c <initRSS+0x13c>)
 8006614:	f00f fa7e 	bl	8015b14 <__wrap_printf>
 8006618:	4816      	ldr	r0, [pc, #88]	; (8006674 <initRSS+0x144>)
 800661a:	f00f fa7b 	bl	8015b14 <__wrap_printf>
 800661e:	200a      	movs	r0, #10
 8006620:	f00f ff5a 	bl	80164d8 <putchar>
 8006624:	e7de      	b.n	80065e4 <initRSS+0xb4>
		ERR_PRINTLN("far sparse config creation fail");
 8006626:	4811      	ldr	r0, [pc, #68]	; (800666c <initRSS+0x13c>)
 8006628:	f00f fa74 	bl	8015b14 <__wrap_printf>
 800662c:	4812      	ldr	r0, [pc, #72]	; (8006678 <initRSS+0x148>)
 800662e:	f00f fa71 	bl	8015b14 <__wrap_printf>
 8006632:	200a      	movs	r0, #10
 8006634:	f00f ff50 	bl	80164d8 <putchar>
 8006638:	e7da      	b.n	80065f0 <initRSS+0xc0>
		printf("envelope config creation fail");
 800663a:	4810      	ldr	r0, [pc, #64]	; (800667c <initRSS+0x14c>)
 800663c:	f00f fa6a 	bl	8015b14 <__wrap_printf>
 8006640:	e7dc      	b.n	80065fc <initRSS+0xcc>
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	0801e748 	.word	0x0801e748
 8006648:	0801ec5c 	.word	0x0801ec5c
 800664c:	0801ec68 	.word	0x0801ec68
 8006650:	0801ec74 	.word	0x0801ec74
 8006654:	bf010400 	.word	0xbf010400
 8006658:	0801ec84 	.word	0x0801ec84
 800665c:	bd010100 	.word	0xbd010100
 8006660:	0801eca4 	.word	0x0801eca4
 8006664:	2000030c 	.word	0x2000030c
 8006668:	2000020c 	.word	0x2000020c
 800666c:	0801e6fc 	.word	0x0801e6fc
 8006670:	0801ecc4 	.word	0x0801ecc4
 8006674:	0801ecdc 	.word	0x0801ecdc
 8006678:	0801ecd8 	.word	0x0801ecd8
 800667c:	0801ecf8 	.word	0x0801ecf8

08006680 <acc_rss_integration_sensor_device_transfer>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	001e      	movs	r6, r3
 8006684:	000c      	movs	r4, r1
 8006686:	0015      	movs	r5, r2
 8006688:	000b      	movs	r3, r1
 800668a:	3a01      	subs	r2, #1
 800668c:	d209      	bcs.n	80066a2 <acc_rss_integration_sensor_device_transfer+0x22>
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <acc_rss_integration_sensor_device_transfer+0x38>)
 8006690:	006a      	lsls	r2, r5, #1
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	0021      	movs	r1, r4
 8006696:	4798      	blx	r3
 8006698:	2e00      	cmp	r6, #0
 800669a:	d001      	beq.n	80066a0 <acc_rss_integration_sensor_device_transfer+0x20>
 800669c:	3d01      	subs	r5, #1
 800669e:	d205      	bcs.n	80066ac <acc_rss_integration_sensor_device_transfer+0x2c>
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	8819      	ldrh	r1, [r3, #0]
 80066a4:	ba49      	rev16	r1, r1
 80066a6:	8019      	strh	r1, [r3, #0]
 80066a8:	3302      	adds	r3, #2
 80066aa:	e7ee      	b.n	800668a <acc_rss_integration_sensor_device_transfer+0xa>
 80066ac:	8823      	ldrh	r3, [r4, #0]
 80066ae:	ba5b      	rev16	r3, r3
 80066b0:	8023      	strh	r3, [r4, #0]
 80066b2:	3402      	adds	r4, #2
 80066b4:	e7f2      	b.n	800669c <acc_rss_integration_sensor_device_transfer+0x1c>
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	200005d0 	.word	0x200005d0

080066bc <acc_sensor_r2_conf_write_instr>:
 80066bc:	23a0      	movs	r3, #160	; 0xa0
 80066be:	b530      	push	{r4, r5, lr}
 80066c0:	01db      	lsls	r3, r3, #7
 80066c2:	b085      	sub	sp, #20
 80066c4:	4319      	orrs	r1, r3
 80066c6:	ac02      	add	r4, sp, #8
 80066c8:	8021      	strh	r1, [r4, #0]
 80066ca:	210a      	movs	r1, #10
 80066cc:	0005      	movs	r5, r0
 80066ce:	9201      	str	r2, [sp, #4]
 80066d0:	4469      	add	r1, sp
 80066d2:	a801      	add	r0, sp, #4
 80066d4:	2201      	movs	r2, #1
 80066d6:	f009 f8bf 	bl	800f858 <acc_confprogram_copy>
 80066da:	2300      	movs	r3, #0
 80066dc:	2203      	movs	r2, #3
 80066de:	0021      	movs	r1, r4
 80066e0:	0028      	movs	r0, r5
 80066e2:	f7ff ffcd 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 80066e6:	b005      	add	sp, #20
 80066e8:	bd30      	pop	{r4, r5, pc}

080066ea <acc_sensor_r2_load_confmem>:
 80066ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ec:	4647      	mov	r7, r8
 80066ee:	46ce      	mov	lr, r9
 80066f0:	1c5c      	adds	r4, r3, #1
 80066f2:	4d17      	ldr	r5, [pc, #92]	; (8006750 <acc_sensor_r2_load_confmem+0x66>)
 80066f4:	0063      	lsls	r3, r4, #1
 80066f6:	4699      	mov	r9, r3
 80066f8:	002b      	movs	r3, r5
 80066fa:	b580      	push	{r7, lr}
 80066fc:	3330      	adds	r3, #48	; 0x30
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b083      	sub	sp, #12
 8006702:	0006      	movs	r6, r0
 8006704:	4688      	mov	r8, r1
 8006706:	0017      	movs	r7, r2
 8006708:	2b03      	cmp	r3, #3
 800670a:	d906      	bls.n	800671a <acc_sensor_r2_load_confmem+0x30>
 800670c:	9100      	str	r1, [sp, #0]
 800670e:	0003      	movs	r3, r0
 8006710:	4a10      	ldr	r2, [pc, #64]	; (8006754 <acc_sensor_r2_load_confmem+0x6a>)
 8006712:	4911      	ldr	r1, [pc, #68]	; (8006758 <acc_sensor_r2_load_confmem+0x6e>)
 8006714:	2004      	movs	r0, #4
 8006716:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8006718:	47a0      	blx	r4
 800671a:	686b      	ldr	r3, [r5, #4]
 800671c:	4599      	cmp	r9, r3
 800671e:	d909      	bls.n	8006734 <acc_sensor_r2_load_confmem+0x4a>
 8006720:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006722:	4a0e      	ldr	r2, [pc, #56]	; (800675c <acc_sensor_r2_load_confmem+0x72>)
 8006724:	490c      	ldr	r1, [pc, #48]	; (8006758 <acc_sensor_r2_load_confmem+0x6e>)
 8006726:	2000      	movs	r0, #0
 8006728:	4798      	blx	r3
 800672a:	b003      	add	sp, #12
 800672c:	bc0c      	pop	{r2, r3}
 800672e:	4690      	mov	r8, r2
 8006730:	4699      	mov	r9, r3
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006734:	21a0      	movs	r1, #160	; 0xa0
 8006736:	4643      	mov	r3, r8
 8006738:	01c9      	lsls	r1, r1, #7
 800673a:	4319      	orrs	r1, r3
 800673c:	464b      	mov	r3, r9
 800673e:	8039      	strh	r1, [r7, #0]
 8006740:	085a      	lsrs	r2, r3, #1
 8006742:	0039      	movs	r1, r7
 8006744:	2300      	movs	r3, #0
 8006746:	0030      	movs	r0, r6
 8006748:	f7ff ff9a 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 800674c:	e7ed      	b.n	800672a <acc_sensor_r2_load_confmem+0x40>
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	200005d0 	.word	0x200005d0
 8006754:	0801d8e6 	.word	0x0801d8e6
 8006758:	0801d90c 	.word	0x0801d90c
 800675c:	0801d916 	.word	0x0801d916

08006760 <acc_cpd_linear_sweep_load_program>:
 8006760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006762:	46de      	mov	lr, fp
 8006764:	4657      	mov	r7, sl
 8006766:	4645      	mov	r5, r8
 8006768:	464e      	mov	r6, r9
 800676a:	b5e0      	push	{r5, r6, r7, lr}
 800676c:	001f      	movs	r7, r3
 800676e:	2316      	movs	r3, #22
 8006770:	b08f      	sub	sp, #60	; 0x3c
 8006772:	ac0b      	add	r4, sp, #44	; 0x2c
 8006774:	7023      	strb	r3, [r4, #0]
 8006776:	2307      	movs	r3, #7
 8006778:	9005      	str	r0, [sp, #20]
 800677a:	9108      	str	r1, [sp, #32]
 800677c:	0015      	movs	r5, r2
 800677e:	900c      	str	r0, [sp, #48]	; 0x30
 8006780:	22bc      	movs	r2, #188	; 0xbc
 8006782:	0039      	movs	r1, r7
 8006784:	0020      	movs	r0, r4
 8006786:	930d      	str	r3, [sp, #52]	; 0x34
 8006788:	f7f9 fcbc 	bl	8000104 <acc_probes_execute>
 800678c:	2300      	movs	r3, #0
 800678e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006790:	930a      	str	r3, [sp, #40]	; 0x28
 8006792:	ab0a      	add	r3, sp, #40	; 0x28
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	002a      	movs	r2, r5
 8006798:	0023      	movs	r3, r4
 800679a:	9908      	ldr	r1, [sp, #32]
 800679c:	9805      	ldr	r0, [sp, #20]
 800679e:	f009 fd4f 	bl	8010240 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80067a2:	9009      	str	r0, [sp, #36]	; 0x24
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d101      	bne.n	80067ac <acc_cpd_linear_sweep_load_program+0x4c>
 80067a8:	f000 fc50 	bl	800704c <acc_cpd_linear_sweep_load_program+0x8ec>
 80067ac:	4bf9      	ldr	r3, [pc, #996]	; (8006b94 <acc_cpd_linear_sweep_load_program+0x434>)
 80067ae:	001a      	movs	r2, r3
 80067b0:	3230      	adds	r2, #48	; 0x30
 80067b2:	7812      	ldrb	r2, [r2, #0]
 80067b4:	2a03      	cmp	r2, #3
 80067b6:	d904      	bls.n	80067c2 <acc_cpd_linear_sweep_load_program+0x62>
 80067b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ba:	4af7      	ldr	r2, [pc, #988]	; (8006b98 <acc_cpd_linear_sweep_load_program+0x438>)
 80067bc:	49f7      	ldr	r1, [pc, #988]	; (8006b9c <acc_cpd_linear_sweep_load_program+0x43c>)
 80067be:	2004      	movs	r0, #4
 80067c0:	4798      	blx	r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	469b      	mov	fp, r3
 80067c6:	23e2      	movs	r3, #226	; 0xe2
 80067c8:	465a      	mov	r2, fp
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	1a9b      	subs	r3, r3, r2
 80067ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80067d2:	9203      	str	r2, [sp, #12]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d900      	bls.n	80067da <acc_cpd_linear_sweep_load_program+0x7a>
 80067d8:	9303      	str	r3, [sp, #12]
 80067da:	465b      	mov	r3, fp
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	9306      	str	r3, [sp, #24]
 80067e0:	9b03      	ldr	r3, [sp, #12]
 80067e2:	0021      	movs	r1, r4
 80067e4:	085a      	lsrs	r2, r3, #1
 80067e6:	9b06      	ldr	r3, [sp, #24]
 80067e8:	0098      	lsls	r0, r3, #2
 80067ea:	4bed      	ldr	r3, [pc, #948]	; (8006ba0 <acc_cpd_linear_sweep_load_program+0x440>)
 80067ec:	18c0      	adds	r0, r0, r3
 80067ee:	f009 f833 	bl	800f858 <acc_confprogram_copy>
 80067f2:	465b      	mov	r3, fp
 80067f4:	b29d      	uxth	r5, r3
 80067f6:	466b      	mov	r3, sp
 80067f8:	899e      	ldrh	r6, [r3, #12]
 80067fa:	4bea      	ldr	r3, [pc, #936]	; (8006ba4 <acc_cpd_linear_sweep_load_program+0x444>)
 80067fc:	0032      	movs	r2, r6
 80067fe:	4698      	mov	r8, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	0029      	movs	r1, r5
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	2350      	movs	r3, #80	; 0x50
 8006808:	0020      	movs	r0, r4
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	4643      	mov	r3, r8
 800680e:	f009 f86b 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	0032      	movs	r2, r6
 8006816:	9301      	str	r3, [sp, #4]
 8006818:	234e      	movs	r3, #78	; 0x4e
 800681a:	0029      	movs	r1, r5
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	0020      	movs	r0, r4
 8006820:	4643      	mov	r3, r8
 8006822:	f009 f861 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	0032      	movs	r2, r6
 800682a:	9301      	str	r3, [sp, #4]
 800682c:	234f      	movs	r3, #79	; 0x4f
 800682e:	0029      	movs	r1, r5
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	0020      	movs	r0, r4
 8006834:	4643      	mov	r3, r8
 8006836:	f009 f857 	bl	800f8e8 <acc_confprogram_patch_offset>
 800683a:	89bb      	ldrh	r3, [r7, #12]
 800683c:	0032      	movs	r2, r6
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	234c      	movs	r3, #76	; 0x4c
 8006842:	0029      	movs	r1, r5
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	0020      	movs	r0, r4
 8006848:	4643      	mov	r3, r8
 800684a:	f009 f84d 	bl	800f8e8 <acc_confprogram_patch_offset>
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	0032      	movs	r2, r6
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	2326      	movs	r3, #38	; 0x26
 8006856:	0029      	movs	r1, r5
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	0020      	movs	r0, r4
 800685c:	4643      	mov	r3, r8
 800685e:	f009 f843 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	0032      	movs	r2, r6
 8006866:	9301      	str	r3, [sp, #4]
 8006868:	2373      	movs	r3, #115	; 0x73
 800686a:	0029      	movs	r1, r5
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	0020      	movs	r0, r4
 8006870:	4643      	mov	r3, r8
 8006872:	f009 f839 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	0032      	movs	r2, r6
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	2362      	movs	r3, #98	; 0x62
 800687e:	0029      	movs	r1, r5
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	0020      	movs	r0, r4
 8006884:	4643      	mov	r3, r8
 8006886:	f009 f82f 	bl	800f8e8 <acc_confprogram_patch_offset>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	0032      	movs	r2, r6
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	2337      	movs	r3, #55	; 0x37
 8006892:	0029      	movs	r1, r5
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	0020      	movs	r0, r4
 8006898:	4643      	mov	r3, r8
 800689a:	f009 f825 	bl	800f8e8 <acc_confprogram_patch_offset>
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	0032      	movs	r2, r6
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	2376      	movs	r3, #118	; 0x76
 80068a6:	0029      	movs	r1, r5
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	0020      	movs	r0, r4
 80068ac:	4643      	mov	r3, r8
 80068ae:	f009 f81b 	bl	800f8e8 <acc_confprogram_patch_offset>
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	0032      	movs	r2, r6
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	2369      	movs	r3, #105	; 0x69
 80068ba:	0029      	movs	r1, r5
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	0020      	movs	r0, r4
 80068c0:	4643      	mov	r3, r8
 80068c2:	f009 f811 	bl	800f8e8 <acc_confprogram_patch_offset>
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	0032      	movs	r2, r6
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	236a      	movs	r3, #106	; 0x6a
 80068ce:	0029      	movs	r1, r5
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	0020      	movs	r0, r4
 80068d4:	4643      	mov	r3, r8
 80068d6:	f009 f807 	bl	800f8e8 <acc_confprogram_patch_offset>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	0032      	movs	r2, r6
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	2319      	movs	r3, #25
 80068e2:	0029      	movs	r1, r5
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	0020      	movs	r0, r4
 80068e8:	4643      	mov	r3, r8
 80068ea:	f008 fffd 	bl	800f8e8 <acc_confprogram_patch_offset>
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	0032      	movs	r2, r6
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	231a      	movs	r3, #26
 80068f6:	0029      	movs	r1, r5
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	0020      	movs	r0, r4
 80068fc:	4643      	mov	r3, r8
 80068fe:	f008 fff3 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	0032      	movs	r2, r6
 8006906:	9301      	str	r3, [sp, #4]
 8006908:	231b      	movs	r3, #27
 800690a:	0029      	movs	r1, r5
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	0020      	movs	r0, r4
 8006910:	4643      	mov	r3, r8
 8006912:	f008 ffe9 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	0032      	movs	r2, r6
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	231c      	movs	r3, #28
 800691e:	0029      	movs	r1, r5
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	0020      	movs	r0, r4
 8006924:	4643      	mov	r3, r8
 8006926:	f008 ffdf 	bl	800f8e8 <acc_confprogram_patch_offset>
 800692a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692c:	0032      	movs	r2, r6
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	231d      	movs	r3, #29
 8006932:	0029      	movs	r1, r5
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	0020      	movs	r0, r4
 8006938:	4643      	mov	r3, r8
 800693a:	f008 ffd5 	bl	800f8e8 <acc_confprogram_patch_offset>
 800693e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006940:	0032      	movs	r2, r6
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	231e      	movs	r3, #30
 8006946:	0029      	movs	r1, r5
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	0020      	movs	r0, r4
 800694c:	4643      	mov	r3, r8
 800694e:	f008 ffcb 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006954:	0032      	movs	r2, r6
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	2355      	movs	r3, #85	; 0x55
 800695a:	0029      	movs	r1, r5
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	0020      	movs	r0, r4
 8006960:	4643      	mov	r3, r8
 8006962:	f008 ffc1 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006968:	0032      	movs	r2, r6
 800696a:	9301      	str	r3, [sp, #4]
 800696c:	2356      	movs	r3, #86	; 0x56
 800696e:	0029      	movs	r1, r5
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	0020      	movs	r0, r4
 8006974:	4643      	mov	r3, r8
 8006976:	f008 ffb7 	bl	800f8e8 <acc_confprogram_patch_offset>
 800697a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697c:	0032      	movs	r2, r6
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	2358      	movs	r3, #88	; 0x58
 8006982:	0029      	movs	r1, r5
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	0020      	movs	r0, r4
 8006988:	4643      	mov	r3, r8
 800698a:	f008 ffad 	bl	800f8e8 <acc_confprogram_patch_offset>
 800698e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006990:	0032      	movs	r2, r6
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	236b      	movs	r3, #107	; 0x6b
 8006996:	0029      	movs	r1, r5
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	0020      	movs	r0, r4
 800699c:	4643      	mov	r3, r8
 800699e:	f008 ffa3 	bl	800f8e8 <acc_confprogram_patch_offset>
 80069a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a4:	0032      	movs	r2, r6
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	2386      	movs	r3, #134	; 0x86
 80069aa:	0029      	movs	r1, r5
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	0020      	movs	r0, r4
 80069b0:	4643      	mov	r3, r8
 80069b2:	f008 ff99 	bl	800f8e8 <acc_confprogram_patch_offset>
 80069b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b8:	0032      	movs	r2, r6
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2364      	movs	r3, #100	; 0x64
 80069be:	0029      	movs	r1, r5
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	0020      	movs	r0, r4
 80069c4:	4643      	mov	r3, r8
 80069c6:	f008 ff8f 	bl	800f8e8 <acc_confprogram_patch_offset>
 80069ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069cc:	0032      	movs	r2, r6
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	2365      	movs	r3, #101	; 0x65
 80069d2:	0029      	movs	r1, r5
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	0020      	movs	r0, r4
 80069d8:	4643      	mov	r3, r8
 80069da:	f008 ff85 	bl	800f8e8 <acc_confprogram_patch_offset>
 80069de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069e0:	0032      	movs	r2, r6
 80069e2:	9301      	str	r3, [sp, #4]
 80069e4:	2340      	movs	r3, #64	; 0x40
 80069e6:	0029      	movs	r1, r5
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	0020      	movs	r0, r4
 80069ec:	4643      	mov	r3, r8
 80069ee:	f008 ff7b 	bl	800f8e8 <acc_confprogram_patch_offset>
 80069f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f4:	0032      	movs	r2, r6
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	2341      	movs	r3, #65	; 0x41
 80069fa:	0029      	movs	r1, r5
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	0020      	movs	r0, r4
 8006a00:	4643      	mov	r3, r8
 8006a02:	f008 ff71 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a08:	0032      	movs	r2, r6
 8006a0a:	9301      	str	r3, [sp, #4]
 8006a0c:	2372      	movs	r3, #114	; 0x72
 8006a0e:	0029      	movs	r1, r5
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	0020      	movs	r0, r4
 8006a14:	4643      	mov	r3, r8
 8006a16:	f008 ff67 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1c:	0032      	movs	r2, r6
 8006a1e:	9301      	str	r3, [sp, #4]
 8006a20:	2354      	movs	r3, #84	; 0x54
 8006a22:	0029      	movs	r1, r5
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	0020      	movs	r0, r4
 8006a28:	4643      	mov	r3, r8
 8006a2a:	f008 ff5d 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a30:	0032      	movs	r2, r6
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	2339      	movs	r3, #57	; 0x39
 8006a36:	0029      	movs	r1, r5
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	4643      	mov	r3, r8
 8006a3e:	f008 ff53 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d06f      	beq.n	8006b28 <acc_cpd_linear_sweep_load_program+0x3c8>
 8006a48:	2301      	movs	r3, #1
 8006a4a:	9301      	str	r3, [sp, #4]
 8006a4c:	330f      	adds	r3, #15
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	0032      	movs	r2, r6
 8006a52:	4643      	mov	r3, r8
 8006a54:	0029      	movs	r1, r5
 8006a56:	0020      	movs	r0, r4
 8006a58:	f008 ff46 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a5c:	4b52      	ldr	r3, [pc, #328]	; (8006ba8 <acc_cpd_linear_sweep_load_program+0x448>)
 8006a5e:	0032      	movs	r2, r6
 8006a60:	469a      	mov	sl, r3
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	2312      	movs	r3, #18
 8006a66:	0029      	movs	r1, r5
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	0020      	movs	r0, r4
 8006a6c:	4643      	mov	r3, r8
 8006a6e:	f008 ff3b 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a72:	2307      	movs	r3, #7
 8006a74:	4699      	mov	r9, r3
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	330d      	adds	r3, #13
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	0032      	movs	r2, r6
 8006a7e:	4643      	mov	r3, r8
 8006a80:	0029      	movs	r1, r5
 8006a82:	0020      	movs	r0, r4
 8006a84:	f008 ff30 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a88:	4653      	mov	r3, sl
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	2311      	movs	r3, #17
 8006a8e:	0032      	movs	r2, r6
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	0029      	movs	r1, r5
 8006a94:	4643      	mov	r3, r8
 8006a96:	0020      	movs	r0, r4
 8006a98:	f008 ff26 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	3313      	adds	r3, #19
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	0032      	movs	r2, r6
 8006aa6:	4643      	mov	r3, r8
 8006aa8:	0029      	movs	r1, r5
 8006aaa:	0020      	movs	r0, r4
 8006aac:	f008 ff1c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	; (8006bac <acc_cpd_linear_sweep_load_program+0x44c>)
 8006ab2:	0032      	movs	r2, r6
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	2315      	movs	r3, #21
 8006ab8:	0029      	movs	r1, r5
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	0020      	movs	r0, r4
 8006abe:	4643      	mov	r3, r8
 8006ac0:	f008 ff12 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ac4:	464b      	mov	r3, r9
 8006ac6:	9301      	str	r3, [sp, #4]
 8006ac8:	330f      	adds	r3, #15
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	0032      	movs	r2, r6
 8006ace:	4643      	mov	r3, r8
 8006ad0:	0029      	movs	r1, r5
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f008 ff08 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ad8:	4b35      	ldr	r3, [pc, #212]	; (8006bb0 <acc_cpd_linear_sweep_load_program+0x450>)
 8006ada:	0032      	movs	r2, r6
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	230e      	movs	r3, #14
 8006ae0:	0029      	movs	r1, r5
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	4643      	mov	r3, r8
 8006ae8:	f008 fefe 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006aec:	464b      	mov	r3, r9
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	3308      	adds	r3, #8
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	0032      	movs	r2, r6
 8006af6:	4643      	mov	r3, r8
 8006af8:	0029      	movs	r1, r5
 8006afa:	0020      	movs	r0, r4
 8006afc:	f008 fef4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b00:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <acc_cpd_linear_sweep_load_program+0x454>)
 8006b02:	0032      	movs	r2, r6
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	2317      	movs	r3, #23
 8006b08:	0029      	movs	r1, r5
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	0020      	movs	r0, r4
 8006b0e:	4643      	mov	r3, r8
 8006b10:	f008 feea 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b14:	464b      	mov	r3, r9
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	3311      	adds	r3, #17
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	0032      	movs	r2, r6
 8006b1e:	4643      	mov	r3, r8
 8006b20:	0029      	movs	r1, r5
 8006b22:	0020      	movs	r0, r4
 8006b24:	f008 fee0 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b28:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <acc_cpd_linear_sweep_load_program+0x444>)
 8006b2a:	0032      	movs	r2, r6
 8006b2c:	4698      	mov	r8, r3
 8006b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b30:	0029      	movs	r1, r5
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	2351      	movs	r3, #81	; 0x51
 8006b36:	0020      	movs	r0, r4
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4643      	mov	r3, r8
 8006b3c:	f008 fed4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b42:	0032      	movs	r2, r6
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	2377      	movs	r3, #119	; 0x77
 8006b48:	0029      	movs	r1, r5
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	0020      	movs	r0, r4
 8006b4e:	4643      	mov	r3, r8
 8006b50:	f008 feca 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b54:	1d3b      	adds	r3, r7, #4
 8006b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b58:	0032      	movs	r2, r6
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	2344      	movs	r3, #68	; 0x44
 8006b5e:	0029      	movs	r1, r5
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	0020      	movs	r0, r4
 8006b64:	4643      	mov	r3, r8
 8006b66:	f008 febf 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b6a:	003b      	movs	r3, r7
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b70:	0032      	movs	r2, r6
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	2343      	movs	r3, #67	; 0x43
 8006b76:	0029      	movs	r1, r5
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	4643      	mov	r3, r8
 8006b7e:	f008 feb3 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006b82:	003b      	movs	r3, r7
 8006b84:	3388      	adds	r3, #136	; 0x88
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	4691      	mov	r9, r2
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4692      	mov	sl, r2
 8006b90:	464a      	mov	r2, r9
 8006b92:	e011      	b.n	8006bb8 <acc_cpd_linear_sweep_load_program+0x458>
 8006b94:	200005d0 	.word	0x200005d0
 8006b98:	0801d936 	.word	0x0801d936
 8006b9c:	0801d53e 	.word	0x0801d53e
 8006ba0:	0801bc9c 	.word	0x0801bc9c
 8006ba4:	0801b5d8 	.word	0x0801b5d8
 8006ba8:	0000ff80 	.word	0x0000ff80
 8006bac:	0000ffc0 	.word	0x0000ffc0
 8006bb0:	0000fff0 	.word	0x0000fff0
 8006bb4:	0000ffff 	.word	0x0000ffff
 8006bb8:	2a08      	cmp	r2, #8
 8006bba:	d914      	bls.n	8006be6 <acc_cpd_linear_sweep_load_program+0x486>
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	22ff      	movs	r2, #255	; 0xff
 8006bc0:	3b08      	subs	r3, #8
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	0013      	movs	r3, r2
 8006bc6:	22ff      	movs	r2, #255	; 0xff
 8006bc8:	4393      	bics	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	469a      	mov	sl, r3
 8006bce:	2302      	movs	r3, #2
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	3365      	adds	r3, #101	; 0x65
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	0032      	movs	r2, r6
 8006bd8:	4643      	mov	r3, r8
 8006bda:	0029      	movs	r1, r5
 8006bdc:	0020      	movs	r0, r4
 8006bde:	f008 fe83 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006be2:	2308      	movs	r3, #8
 8006be4:	4699      	mov	r9, r3
 8006be6:	4bf2      	ldr	r3, [pc, #968]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006be8:	0032      	movs	r2, r6
 8006bea:	4698      	mov	r8, r3
 8006bec:	464b      	mov	r3, r9
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	236c      	movs	r3, #108	; 0x6c
 8006bf2:	0029      	movs	r1, r5
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	0020      	movs	r0, r4
 8006bf8:	4643      	mov	r3, r8
 8006bfa:	f008 fe75 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006bfe:	464b      	mov	r3, r9
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2359      	movs	r3, #89	; 0x59
 8006c04:	0032      	movs	r2, r6
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	0029      	movs	r1, r5
 8006c0a:	4643      	mov	r3, r8
 8006c0c:	0020      	movs	r0, r4
 8006c0e:	f008 fe6b 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c12:	2380      	movs	r3, #128	; 0x80
 8006c14:	4652      	mov	r2, sl
 8006c16:	431a      	orrs	r2, r3
 8006c18:	236e      	movs	r3, #110	; 0x6e
 8006c1a:	9207      	str	r2, [sp, #28]
 8006c1c:	9201      	str	r2, [sp, #4]
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	0032      	movs	r2, r6
 8006c22:	4643      	mov	r3, r8
 8006c24:	0029      	movs	r1, r5
 8006c26:	0020      	movs	r0, r4
 8006c28:	f008 fe5e 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c2c:	23c0      	movs	r3, #192	; 0xc0
 8006c2e:	4652      	mov	r2, sl
 8006c30:	431a      	orrs	r2, r3
 8006c32:	2370      	movs	r3, #112	; 0x70
 8006c34:	4691      	mov	r9, r2
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	0032      	movs	r2, r6
 8006c3c:	4643      	mov	r3, r8
 8006c3e:	0029      	movs	r1, r5
 8006c40:	0020      	movs	r0, r4
 8006c42:	f008 fe51 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c46:	4652      	mov	r2, sl
 8006c48:	23ff      	movs	r3, #255	; 0xff
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	236f      	movs	r3, #111	; 0x6f
 8006c52:	0032      	movs	r2, r6
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	0029      	movs	r1, r5
 8006c58:	4643      	mov	r3, r8
 8006c5a:	0020      	movs	r0, r4
 8006c5c:	f008 fe44 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	0032      	movs	r2, r6
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	235b      	movs	r3, #91	; 0x5b
 8006c68:	0029      	movs	r1, r5
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	4643      	mov	r3, r8
 8006c70:	f008 fe3a 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c74:	464b      	mov	r3, r9
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	235d      	movs	r3, #93	; 0x5d
 8006c7a:	0032      	movs	r2, r6
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	0029      	movs	r1, r5
 8006c80:	4643      	mov	r3, r8
 8006c82:	0020      	movs	r0, r4
 8006c84:	f008 fe30 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	0032      	movs	r2, r6
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	235c      	movs	r3, #92	; 0x5c
 8006c90:	0029      	movs	r1, r5
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	0020      	movs	r0, r4
 8006c96:	4643      	mov	r3, r8
 8006c98:	f008 fe26 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006c9c:	23f0      	movs	r3, #240	; 0xf0
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	234a      	movs	r3, #74	; 0x4a
 8006ca4:	4691      	mov	r9, r2
 8006ca6:	9201      	str	r2, [sp, #4]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	0032      	movs	r2, r6
 8006cac:	4643      	mov	r3, r8
 8006cae:	0029      	movs	r1, r5
 8006cb0:	0020      	movs	r0, r4
 8006cb2:	f008 fe19 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	2345      	movs	r3, #69	; 0x45
 8006cbc:	0032      	movs	r2, r6
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	0029      	movs	r1, r5
 8006cc2:	4643      	mov	r3, r8
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	f008 fe0f 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	0032      	movs	r2, r6
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	2322      	movs	r3, #34	; 0x22
 8006cd2:	0029      	movs	r1, r5
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	4643      	mov	r3, r8
 8006cda:	f008 fe05 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006cde:	003b      	movs	r3, r7
 8006ce0:	3390      	adds	r3, #144	; 0x90
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	2364      	movs	r3, #100	; 0x64
 8006ce6:	2a05      	cmp	r2, #5
 8006ce8:	d800      	bhi.n	8006cec <acc_cpd_linear_sweep_load_program+0x58c>
 8006cea:	3b20      	subs	r3, #32
 8006cec:	9301      	str	r3, [sp, #4]
 8006cee:	2305      	movs	r3, #5
 8006cf0:	0032      	movs	r2, r6
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	0029      	movs	r1, r5
 8006cf8:	4643      	mov	r3, r8
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	f008 fdf4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006d00:	2390      	movs	r3, #144	; 0x90
 8006d02:	469a      	mov	sl, r3
 8006d04:	44ba      	add	sl, r7
 8006d06:	4653      	mov	r3, sl
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	0032      	movs	r2, r6
 8006d0c:	015b      	lsls	r3, r3, #5
 8006d0e:	3b03      	subs	r3, #3
 8006d10:	9301      	str	r3, [sp, #4]
 8006d12:	2324      	movs	r3, #36	; 0x24
 8006d14:	0029      	movs	r1, r5
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	0020      	movs	r0, r4
 8006d1a:	4643      	mov	r3, r8
 8006d1c:	f008 fde4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006d20:	4653      	mov	r3, sl
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	0032      	movs	r2, r6
 8006d26:	015b      	lsls	r3, r3, #5
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	3b03      	subs	r3, #3
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	2325      	movs	r3, #37	; 0x25
 8006d30:	0029      	movs	r1, r5
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	0020      	movs	r0, r4
 8006d36:	4643      	mov	r3, r8
 8006d38:	f008 fdd6 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006d3c:	003b      	movs	r3, r7
 8006d3e:	3394      	adds	r3, #148	; 0x94
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	0032      	movs	r2, r6
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	2336      	movs	r3, #54	; 0x36
 8006d48:	0029      	movs	r1, r5
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0020      	movs	r0, r4
 8006d4e:	4643      	mov	r3, r8
 8006d50:	f008 fdca 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006d54:	003b      	movs	r3, r7
 8006d56:	3398      	adds	r3, #152	; 0x98
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	0032      	movs	r2, r6
 8006d5c:	330e      	adds	r3, #14
 8006d5e:	9301      	str	r3, [sp, #4]
 8006d60:	235e      	movs	r3, #94	; 0x5e
 8006d62:	0029      	movs	r1, r5
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	0020      	movs	r0, r4
 8006d68:	4643      	mov	r3, r8
 8006d6a:	f008 fdbd 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006d6e:	4653      	mov	r3, sl
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	469a      	mov	sl, r3
 8006d74:	4599      	cmp	r9, r3
 8006d76:	4180      	sbcs	r0, r0
 8006d78:	2301      	movs	r3, #1
 8006d7a:	4398      	bics	r0, r3
 8006d7c:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <acc_cpd_linear_sweep_load_program+0x854>)
 8006d7e:	4651      	mov	r1, sl
 8006d80:	469c      	mov	ip, r3
 8006d82:	4460      	add	r0, ip
 8006d84:	f00a f97e 	bl	8011084 <__aeabi_uidivmod>
 8006d88:	4688      	mov	r8, r1
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	d002      	beq.n	8006d94 <acc_cpd_linear_sweep_load_program+0x634>
 8006d8e:	4653      	mov	r3, sl
 8006d90:	1a5b      	subs	r3, r3, r1
 8006d92:	4698      	mov	r8, r3
 8006d94:	239c      	movs	r3, #156	; 0x9c
 8006d96:	469a      	mov	sl, r3
 8006d98:	44ba      	add	sl, r7
 8006d9a:	4653      	mov	r3, sl
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	0032      	movs	r2, r6
 8006da0:	4443      	add	r3, r8
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	4699      	mov	r9, r3
 8006da6:	231f      	movs	r3, #31
 8006da8:	0029      	movs	r1, r5
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	0020      	movs	r0, r4
 8006dae:	4b80      	ldr	r3, [pc, #512]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006db0:	f008 fd9a 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006db4:	4653      	mov	r3, sl
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <acc_cpd_linear_sweep_load_program+0x690>
 8006dbc:	4b7e      	ldr	r3, [pc, #504]	; (8006fb8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	3230      	adds	r2, #48	; 0x30
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	2a01      	cmp	r2, #1
 8006dc6:	d906      	bls.n	8006dd6 <acc_cpd_linear_sweep_load_program+0x676>
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	4a7c      	ldr	r2, [pc, #496]	; (8006fbc <acc_cpd_linear_sweep_load_program+0x85c>)
 8006dcc:	469a      	mov	sl, r3
 8006dce:	497c      	ldr	r1, [pc, #496]	; (8006fc0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006dd0:	4643      	mov	r3, r8
 8006dd2:	2002      	movs	r0, #2
 8006dd4:	47d0      	blx	sl
 8006dd6:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006dd8:	001a      	movs	r2, r3
 8006dda:	3230      	adds	r2, #48	; 0x30
 8006ddc:	7812      	ldrb	r2, [r2, #0]
 8006dde:	2a01      	cmp	r2, #1
 8006de0:	d906      	bls.n	8006df0 <acc_cpd_linear_sweep_load_program+0x690>
 8006de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de4:	4a77      	ldr	r2, [pc, #476]	; (8006fc4 <acc_cpd_linear_sweep_load_program+0x864>)
 8006de6:	4698      	mov	r8, r3
 8006de8:	4975      	ldr	r1, [pc, #468]	; (8006fc0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006dea:	464b      	mov	r3, r9
 8006dec:	2002      	movs	r0, #2
 8006dee:	47c0      	blx	r8
 8006df0:	003b      	movs	r3, r7
 8006df2:	3390      	adds	r3, #144	; 0x90
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2008      	movs	r0, #8
 8006df8:	4699      	mov	r9, r3
 8006dfa:	2b05      	cmp	r3, #5
 8006dfc:	d800      	bhi.n	8006e00 <acc_cpd_linear_sweep_load_program+0x6a0>
 8006dfe:	3002      	adds	r0, #2
 8006e00:	4649      	mov	r1, r9
 8006e02:	f00a f93f 	bl	8011084 <__aeabi_uidivmod>
 8006e06:	4688      	mov	r8, r1
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d002      	beq.n	8006e12 <acc_cpd_linear_sweep_load_program+0x6b2>
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	1a5b      	subs	r3, r3, r1
 8006e10:	4698      	mov	r8, r3
 8006e12:	23a0      	movs	r3, #160	; 0xa0
 8006e14:	469a      	mov	sl, r3
 8006e16:	44ba      	add	sl, r7
 8006e18:	4653      	mov	r3, sl
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	0032      	movs	r2, r6
 8006e1e:	4443      	add	r3, r8
 8006e20:	9301      	str	r3, [sp, #4]
 8006e22:	4699      	mov	r9, r3
 8006e24:	2366      	movs	r3, #102	; 0x66
 8006e26:	0029      	movs	r1, r5
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	0020      	movs	r0, r4
 8006e2c:	4b60      	ldr	r3, [pc, #384]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006e2e:	f008 fd5b 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006e32:	4653      	mov	r3, sl
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d019      	beq.n	8006e6e <acc_cpd_linear_sweep_load_program+0x70e>
 8006e3a:	4b5f      	ldr	r3, [pc, #380]	; (8006fb8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006e3c:	001a      	movs	r2, r3
 8006e3e:	3230      	adds	r2, #48	; 0x30
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	2a01      	cmp	r2, #1
 8006e44:	d906      	bls.n	8006e54 <acc_cpd_linear_sweep_load_program+0x6f4>
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	4a5f      	ldr	r2, [pc, #380]	; (8006fc8 <acc_cpd_linear_sweep_load_program+0x868>)
 8006e4a:	469a      	mov	sl, r3
 8006e4c:	495c      	ldr	r1, [pc, #368]	; (8006fc0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006e4e:	4643      	mov	r3, r8
 8006e50:	2002      	movs	r0, #2
 8006e52:	47d0      	blx	sl
 8006e54:	4b58      	ldr	r3, [pc, #352]	; (8006fb8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006e56:	001a      	movs	r2, r3
 8006e58:	3230      	adds	r2, #48	; 0x30
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	d906      	bls.n	8006e6e <acc_cpd_linear_sweep_load_program+0x70e>
 8006e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e62:	4a5a      	ldr	r2, [pc, #360]	; (8006fcc <acc_cpd_linear_sweep_load_program+0x86c>)
 8006e64:	4698      	mov	r8, r3
 8006e66:	4956      	ldr	r1, [pc, #344]	; (8006fc0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006e68:	464b      	mov	r3, r9
 8006e6a:	2002      	movs	r0, #2
 8006e6c:	47c0      	blx	r8
 8006e6e:	003b      	movs	r3, r7
 8006e70:	338d      	adds	r3, #141	; 0x8d
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d014      	beq.n	8006ea2 <acc_cpd_linear_sweep_load_program+0x742>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	333b      	adds	r3, #59	; 0x3b
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	0032      	movs	r2, r6
 8006e82:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006e84:	0029      	movs	r1, r5
 8006e86:	0020      	movs	r0, r4
 8006e88:	f008 fd2e 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006e8c:	4b4a      	ldr	r3, [pc, #296]	; (8006fb8 <acc_cpd_linear_sweep_load_program+0x858>)
 8006e8e:	001a      	movs	r2, r3
 8006e90:	3230      	adds	r2, #48	; 0x30
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	2a01      	cmp	r2, #1
 8006e96:	d904      	bls.n	8006ea2 <acc_cpd_linear_sweep_load_program+0x742>
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	4a4d      	ldr	r2, [pc, #308]	; (8006fd0 <acc_cpd_linear_sweep_load_program+0x870>)
 8006e9c:	4948      	ldr	r1, [pc, #288]	; (8006fc0 <acc_cpd_linear_sweep_load_program+0x860>)
 8006e9e:	2002      	movs	r0, #2
 8006ea0:	4798      	blx	r3
 8006ea2:	003b      	movs	r3, r7
 8006ea4:	33a4      	adds	r3, #164	; 0xa4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	0032      	movs	r2, r6
 8006eaa:	4699      	mov	r9, r3
 8006eac:	4b40      	ldr	r3, [pc, #256]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006eae:	0029      	movs	r1, r5
 8006eb0:	4698      	mov	r8, r3
 8006eb2:	464b      	mov	r3, r9
 8006eb4:	3b01      	subs	r3, #1
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	2306      	movs	r3, #6
 8006eba:	0020      	movs	r0, r4
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	4643      	mov	r3, r8
 8006ec0:	f008 fd12 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	2004      	movs	r0, #4
 8006ec8:	f00a f856 	bl	8010f78 <__udivsi3>
 8006ecc:	2363      	movs	r3, #99	; 0x63
 8006ece:	3801      	subs	r0, #1
 8006ed0:	9001      	str	r0, [sp, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	0032      	movs	r2, r6
 8006ed6:	4643      	mov	r3, r8
 8006ed8:	0029      	movs	r1, r5
 8006eda:	0020      	movs	r0, r4
 8006edc:	f008 fd04 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ee0:	003b      	movs	r3, r7
 8006ee2:	33a8      	adds	r3, #168	; 0xa8
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	0032      	movs	r2, r6
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	2361      	movs	r3, #97	; 0x61
 8006eec:	0029      	movs	r1, r5
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	0020      	movs	r0, r4
 8006ef2:	4643      	mov	r3, r8
 8006ef4:	f008 fcf8 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ef8:	23ad      	movs	r3, #173	; 0xad
 8006efa:	4699      	mov	r9, r3
 8006efc:	44b9      	add	r9, r7
 8006efe:	464b      	mov	r3, r9
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	0032      	movs	r2, r6
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	2346      	movs	r3, #70	; 0x46
 8006f08:	0029      	movs	r1, r5
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	0020      	movs	r0, r4
 8006f0e:	4643      	mov	r3, r8
 8006f10:	f008 fcea 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f14:	464b      	mov	r3, r9
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	2323      	movs	r3, #35	; 0x23
 8006f1a:	2a00      	cmp	r2, #0
 8006f1c:	d100      	bne.n	8006f20 <acc_cpd_linear_sweep_load_program+0x7c0>
 8006f1e:	e09d      	b.n	800705c <acc_cpd_linear_sweep_load_program+0x8fc>
 8006f20:	2203      	movs	r2, #3
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	9201      	str	r2, [sp, #4]
 8006f26:	4643      	mov	r3, r8
 8006f28:	0032      	movs	r2, r6
 8006f2a:	0029      	movs	r1, r5
 8006f2c:	0020      	movs	r0, r4
 8006f2e:	f008 fcdb 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f32:	2300      	movs	r3, #0
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	337d      	adds	r3, #125	; 0x7d
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	0032      	movs	r2, r6
 8006f3c:	4643      	mov	r3, r8
 8006f3e:	0029      	movs	r1, r5
 8006f40:	0020      	movs	r0, r4
 8006f42:	f008 fcd1 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f46:	2301      	movs	r3, #1
 8006f48:	9301      	str	r3, [sp, #4]
 8006f4a:	3380      	adds	r3, #128	; 0x80
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	0032      	movs	r2, r6
 8006f50:	4643      	mov	r3, r8
 8006f52:	0029      	movs	r1, r5
 8006f54:	0020      	movs	r0, r4
 8006f56:	f008 fcc7 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	3373      	adds	r3, #115	; 0x73
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	0032      	movs	r2, r6
 8006f64:	4643      	mov	r3, r8
 8006f66:	0029      	movs	r1, r5
 8006f68:	0020      	movs	r0, r4
 8006f6a:	f008 fcbd 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <acc_cpd_linear_sweep_load_program+0x850>)
 8006f70:	0032      	movs	r2, r6
 8006f72:	4698      	mov	r8, r3
 8006f74:	003b      	movs	r3, r7
 8006f76:	33ac      	adds	r3, #172	; 0xac
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	0029      	movs	r1, r5
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	2352      	movs	r3, #82	; 0x52
 8006f80:	0020      	movs	r0, r4
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4643      	mov	r3, r8
 8006f86:	f008 fcaf 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006f8a:	003b      	movs	r3, r7
 8006f8c:	33b0      	adds	r3, #176	; 0xb0
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4910      	ldr	r1, [pc, #64]	; (8006fd4 <acc_cpd_linear_sweep_load_program+0x874>)
 8006f92:	f009 fcbf 	bl	8010914 <__aeabi_fmul>
 8006f96:	f00a f9fd 	bl	8011394 <__aeabi_f2uiz>
 8006f9a:	2368      	movs	r3, #104	; 0x68
 8006f9c:	3801      	subs	r0, #1
 8006f9e:	b280      	uxth	r0, r0
 8006fa0:	9001      	str	r0, [sp, #4]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	0032      	movs	r2, r6
 8006fa6:	4643      	mov	r3, r8
 8006fa8:	0029      	movs	r1, r5
 8006faa:	0020      	movs	r0, r4
 8006fac:	e014      	b.n	8006fd8 <acc_cpd_linear_sweep_load_program+0x878>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	0801b5d8 	.word	0x0801b5d8
 8006fb4:	000004e4 	.word	0x000004e4
 8006fb8:	200005d0 	.word	0x200005d0
 8006fbc:	0801d95b 	.word	0x0801d95b
 8006fc0:	0801d53e 	.word	0x0801d53e
 8006fc4:	0801d992 	.word	0x0801d992
 8006fc8:	0801d9c9 	.word	0x0801d9c9
 8006fcc:	0801d9ee 	.word	0x0801d9ee
 8006fd0:	0801da13 	.word	0x0801da13
 8006fd4:	3751b717 	.word	0x3751b717
 8006fd8:	f008 fc86 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006fdc:	23b4      	movs	r3, #180	; 0xb4
 8006fde:	4699      	mov	r9, r3
 8006fe0:	44b9      	add	r9, r7
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	0032      	movs	r2, r6
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	2353      	movs	r3, #83	; 0x53
 8006fec:	0029      	movs	r1, r5
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	0020      	movs	r0, r4
 8006ff2:	4643      	mov	r3, r8
 8006ff4:	f008 fc78 	bl	800f8e8 <acc_confprogram_patch_offset>
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <acc_cpd_linear_sweep_load_program+0x8b8>
 8007000:	003b      	movs	r3, r7
 8007002:	33b8      	adds	r3, #184	; 0xb8
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	0032      	movs	r2, r6
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	2332      	movs	r3, #50	; 0x32
 800700c:	0029      	movs	r1, r5
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	0020      	movs	r0, r4
 8007012:	4643      	mov	r3, r8
 8007014:	f008 fc68 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007018:	466b      	mov	r3, sp
 800701a:	9a08      	ldr	r2, [sp, #32]
 800701c:	8b19      	ldrh	r1, [r3, #24]
 800701e:	9805      	ldr	r0, [sp, #20]
 8007020:	9b03      	ldr	r3, [sp, #12]
 8007022:	f7ff fb62 	bl	80066ea <acc_sensor_r2_load_confmem>
 8007026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007028:	469c      	mov	ip, r3
 800702a:	4b0d      	ldr	r3, [pc, #52]	; (8007060 <acc_cpd_linear_sweep_load_program+0x900>)
 800702c:	44e3      	add	fp, ip
 800702e:	459b      	cmp	fp, r3
 8007030:	d801      	bhi.n	8007036 <acc_cpd_linear_sweep_load_program+0x8d6>
 8007032:	f7ff fbc8 	bl	80067c6 <acc_cpd_linear_sweep_load_program+0x66>
 8007036:	4b0b      	ldr	r3, [pc, #44]	; (8007064 <acc_cpd_linear_sweep_load_program+0x904>)
 8007038:	001a      	movs	r2, r3
 800703a:	3230      	adds	r2, #48	; 0x30
 800703c:	7812      	ldrb	r2, [r2, #0]
 800703e:	2a03      	cmp	r2, #3
 8007040:	d904      	bls.n	800704c <acc_cpd_linear_sweep_load_program+0x8ec>
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <acc_cpd_linear_sweep_load_program+0x908>)
 8007046:	4909      	ldr	r1, [pc, #36]	; (800706c <acc_cpd_linear_sweep_load_program+0x90c>)
 8007048:	2004      	movs	r0, #4
 800704a:	4798      	blx	r3
 800704c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704e:	b00f      	add	sp, #60	; 0x3c
 8007050:	bc3c      	pop	{r2, r3, r4, r5}
 8007052:	4690      	mov	r8, r2
 8007054:	4699      	mov	r9, r3
 8007056:	46a2      	mov	sl, r4
 8007058:	46ab      	mov	fp, r5
 800705a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	e77f      	b.n	8006f60 <acc_cpd_linear_sweep_load_program+0x800>
 8007060:	0000070f 	.word	0x0000070f
 8007064:	200005d0 	.word	0x200005d0
 8007068:	0801da2d 	.word	0x0801da2d
 800706c:	0801d53e 	.word	0x0801d53e

08007070 <start.lto_priv.123>:
 8007070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007072:	464f      	mov	r7, r9
 8007074:	46d6      	mov	lr, sl
 8007076:	4646      	mov	r6, r8
 8007078:	6944      	ldr	r4, [r0, #20]
 800707a:	2300      	movs	r3, #0
 800707c:	0022      	movs	r2, r4
 800707e:	b5c0      	push	{r6, r7, lr}
 8007080:	32c2      	adds	r2, #194	; 0xc2
 8007082:	8013      	strh	r3, [r2, #0]
 8007084:	8053      	strh	r3, [r2, #2]
 8007086:	8093      	strh	r3, [r2, #4]
 8007088:	3a16      	subs	r2, #22
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	b084      	sub	sp, #16
 800708e:	4692      	mov	sl, r2
 8007090:	0022      	movs	r2, r4
 8007092:	32b4      	adds	r2, #180	; 0xb4
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	0007      	movs	r7, r0
 8007098:	4691      	mov	r9, r2
 800709a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800709c:	000d      	movs	r5, r1
 800709e:	4690      	mov	r8, r2
 80070a0:	464a      	mov	r2, r9
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d003      	beq.n	80070ae <start.lto_priv.123+0x3e>
 80070a6:	4652      	mov	r2, sl
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d000      	beq.n	80070ae <start.lto_priv.123+0x3e>
 80070ac:	66e3      	str	r3, [r4, #108]	; 0x6c
 80070ae:	0038      	movs	r0, r7
 80070b0:	f7fe fa7e 	bl	80055b0 <coarse_count_for_next_package>
 80070b4:	0023      	movs	r3, r4
 80070b6:	4e2c      	ldr	r6, [pc, #176]	; (8007168 <start.lto_priv.123+0xf8>)
 80070b8:	33c8      	adds	r3, #200	; 0xc8
 80070ba:	6018      	str	r0, [r3, #0]
 80070bc:	0033      	movs	r3, r6
 80070be:	3330      	adds	r3, #48	; 0x30
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d904      	bls.n	80070d0 <start.lto_priv.123+0x60>
 80070c6:	4a29      	ldr	r2, [pc, #164]	; (800716c <start.lto_priv.123+0xfc>)
 80070c8:	4929      	ldr	r1, [pc, #164]	; (8007170 <start.lto_priv.123+0x100>)
 80070ca:	2004      	movs	r0, #4
 80070cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80070ce:	4798      	blx	r3
 80070d0:	cd06      	ldmia	r5!, {r1, r2}
 80070d2:	0023      	movs	r3, r4
 80070d4:	6838      	ldr	r0, [r7, #0]
 80070d6:	f7ff fb43 	bl	8006760 <acc_cpd_linear_sweep_load_program>
 80070da:	1e05      	subs	r5, r0, #0
 80070dc:	d10a      	bne.n	80070f4 <start.lto_priv.123+0x84>
 80070de:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80070e0:	4a24      	ldr	r2, [pc, #144]	; (8007174 <start.lto_priv.123+0x104>)
 80070e2:	4923      	ldr	r1, [pc, #140]	; (8007170 <start.lto_priv.123+0x100>)
 80070e4:	4798      	blx	r3
 80070e6:	0028      	movs	r0, r5
 80070e8:	b004      	add	sp, #16
 80070ea:	bc1c      	pop	{r2, r3, r4}
 80070ec:	4690      	mov	r8, r2
 80070ee:	4699      	mov	r9, r3
 80070f0:	46a2      	mov	sl, r4
 80070f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070f4:	4920      	ldr	r1, [pc, #128]	; (8007178 <start.lto_priv.123+0x108>)
 80070f6:	6838      	ldr	r0, [r7, #0]
 80070f8:	f7fe fadc 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 80070fc:	1e05      	subs	r5, r0, #0
 80070fe:	d101      	bne.n	8007104 <start.lto_priv.123+0x94>
 8007100:	2500      	movs	r5, #0
 8007102:	e7f0      	b.n	80070e6 <start.lto_priv.123+0x76>
 8007104:	4653      	mov	r3, sl
 8007106:	2b00      	cmp	r3, #0
 8007108:	d023      	beq.n	8007152 <start.lto_priv.123+0xe2>
 800710a:	6939      	ldr	r1, [r7, #16]
 800710c:	6838      	ldr	r0, [r7, #0]
 800710e:	f7fb fc5f 	bl	80029d0 <acc_sensor_protocol_r2_wait_for_sync_start>
 8007112:	2800      	cmp	r0, #0
 8007114:	d0f4      	beq.n	8007100 <start.lto_priv.123+0x90>
 8007116:	0033      	movs	r3, r6
 8007118:	3330      	adds	r3, #48	; 0x30
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d904      	bls.n	800712a <start.lto_priv.123+0xba>
 8007120:	4a16      	ldr	r2, [pc, #88]	; (800717c <start.lto_priv.123+0x10c>)
 8007122:	4913      	ldr	r1, [pc, #76]	; (8007170 <start.lto_priv.123+0x100>)
 8007124:	2002      	movs	r0, #2
 8007126:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007128:	4798      	blx	r3
 800712a:	464b      	mov	r3, r9
 800712c:	2b00      	cmp	r3, #0
 800712e:	d010      	beq.n	8007152 <start.lto_priv.123+0xe2>
 8007130:	2300      	movs	r3, #0
 8007132:	466a      	mov	r2, sp
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	7013      	strb	r3, [r2, #0]
 8007138:	7053      	strb	r3, [r2, #1]
 800713a:	9302      	str	r3, [sp, #8]
 800713c:	4643      	mov	r3, r8
 800713e:	2201      	movs	r2, #1
 8007140:	4669      	mov	r1, sp
 8007142:	66e3      	str	r3, [r4, #108]	; 0x6c
 8007144:	6838      	ldr	r0, [r7, #0]
 8007146:	708a      	strb	r2, [r1, #2]
 8007148:	9303      	str	r3, [sp, #12]
 800714a:	f009 f90d 	bl	8010368 <acc_cpd_linear_sweep_update_program>
 800714e:	2800      	cmp	r0, #0
 8007150:	d0d6      	beq.n	8007100 <start.lto_priv.123+0x90>
 8007152:	0033      	movs	r3, r6
 8007154:	3330      	adds	r3, #48	; 0x30
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d9c4      	bls.n	80070e6 <start.lto_priv.123+0x76>
 800715c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800715e:	4a08      	ldr	r2, [pc, #32]	; (8007180 <start.lto_priv.123+0x110>)
 8007160:	4903      	ldr	r1, [pc, #12]	; (8007170 <start.lto_priv.123+0x100>)
 8007162:	2004      	movs	r0, #4
 8007164:	4798      	blx	r3
 8007166:	e7be      	b.n	80070e6 <start.lto_priv.123+0x76>
 8007168:	200005d0 	.word	0x200005d0
 800716c:	0801da50 	.word	0x0801da50
 8007170:	0801da75 	.word	0x0801da75
 8007174:	0801da89 	.word	0x0801da89
 8007178:	0000023a 	.word	0x0000023a
 800717c:	0801daa3 	.word	0x0801daa3
 8007180:	0801dac7 	.word	0x0801dac7

08007184 <measure_noise.lto_priv.110>:
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007186:	464e      	mov	r6, r9
 8007188:	46de      	mov	lr, fp
 800718a:	4657      	mov	r7, sl
 800718c:	4645      	mov	r5, r8
 800718e:	b5e0      	push	{r5, r6, r7, lr}
 8007190:	4e4a      	ldr	r6, [pc, #296]	; (80072bc <measure_noise.lto_priv.110+0x138>)
 8007192:	b0b9      	sub	sp, #228	; 0xe4
 8007194:	0033      	movs	r3, r6
 8007196:	9201      	str	r2, [sp, #4]
 8007198:	3330      	adds	r3, #48	; 0x30
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	0004      	movs	r4, r0
 800719e:	4689      	mov	r9, r1
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d904      	bls.n	80071ae <measure_noise.lto_priv.110+0x2a>
 80071a4:	4a46      	ldr	r2, [pc, #280]	; (80072c0 <measure_noise.lto_priv.110+0x13c>)
 80071a6:	4947      	ldr	r1, [pc, #284]	; (80072c4 <measure_noise.lto_priv.110+0x140>)
 80071a8:	2004      	movs	r0, #4
 80071aa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80071ac:	4798      	blx	r3
 80071ae:	6967      	ldr	r7, [r4, #20]
 80071b0:	22bc      	movs	r2, #188	; 0xbc
 80071b2:	0039      	movs	r1, r7
 80071b4:	a809      	add	r0, sp, #36	; 0x24
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	f00f f972 	bl	80164a0 <memcpy>
 80071bc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80071be:	2400      	movs	r4, #0
 80071c0:	4698      	mov	r8, r3
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	3b01      	subs	r3, #1
 80071c6:	932e      	str	r3, [sp, #184]	; 0xb8
 80071c8:	2301      	movs	r3, #1
 80071ca:	2202      	movs	r2, #2
 80071cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80071ce:	ab34      	add	r3, sp, #208	; 0xd0
 80071d0:	701c      	strb	r4, [r3, #0]
 80071d2:	003b      	movs	r3, r7
 80071d4:	922f      	str	r2, [sp, #188]	; 0xbc
 80071d6:	4649      	mov	r1, r9
 80071d8:	464a      	mov	r2, r9
 80071da:	9424      	str	r4, [sp, #144]	; 0x90
 80071dc:	941e      	str	r4, [sp, #120]	; 0x78
 80071de:	9436      	str	r4, [sp, #216]	; 0xd8
 80071e0:	33cc      	adds	r3, #204	; 0xcc
 80071e2:	881b      	ldrh	r3, [r3, #0]
 80071e4:	6852      	ldr	r2, [r2, #4]
 80071e6:	6809      	ldr	r1, [r1, #0]
 80071e8:	469b      	mov	fp, r3
 80071ea:	0028      	movs	r0, r5
 80071ec:	ab09      	add	r3, sp, #36	; 0x24
 80071ee:	f7ff fab7 	bl	8006760 <acc_cpd_linear_sweep_load_program>
 80071f2:	4935      	ldr	r1, [pc, #212]	; (80072c8 <measure_noise.lto_priv.110+0x144>)
 80071f4:	0028      	movs	r0, r5
 80071f6:	f7fe fa5d 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 80071fa:	21fa      	movs	r1, #250	; 0xfa
 80071fc:	aa02      	add	r2, sp, #8
 80071fe:	00c9      	lsls	r1, r1, #3
 8007200:	0028      	movs	r0, r5
 8007202:	f008 ff25 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8007206:	4682      	mov	sl, r0
 8007208:	42a0      	cmp	r0, r4
 800720a:	d040      	beq.n	800728e <measure_noise.lto_priv.110+0x10a>
 800720c:	4643      	mov	r3, r8
 800720e:	049b      	lsls	r3, r3, #18
 8007210:	0c1b      	lsrs	r3, r3, #16
 8007212:	4698      	mov	r8, r3
 8007214:	4659      	mov	r1, fp
 8007216:	207c      	movs	r0, #124	; 0x7c
 8007218:	f009 feae 	bl	8010f78 <__udivsi3>
 800721c:	4643      	mov	r3, r8
 800721e:	4343      	muls	r3, r0
 8007220:	4698      	mov	r8, r3
 8007222:	464b      	mov	r3, r9
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	a903      	add	r1, sp, #12
 8007228:	4699      	mov	r9, r3
 800722a:	0038      	movs	r0, r7
 800722c:	f009 f886 	bl	801033c <acc_cpd_linear_sweep_get_info>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	4649      	mov	r1, r9
 8007234:	4443      	add	r3, r8
 8007236:	001a      	movs	r2, r3
 8007238:	0028      	movs	r0, r5
 800723a:	f7fb f831 	bl	80022a0 <acc_sensor_protocol_r2_transfer_data>
 800723e:	4681      	mov	r9, r0
 8007240:	0028      	movs	r0, r5
 8007242:	f008 ffb7 	bl	80101b4 <acc_sensor_protocol_r2_stop.constprop.24>
 8007246:	0038      	movs	r0, r7
 8007248:	a903      	add	r1, sp, #12
 800724a:	f009 f877 	bl	801033c <acc_cpd_linear_sweep_get_info>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	0020      	movs	r0, r4
 8007252:	005d      	lsls	r5, r3, #1
 8007254:	230e      	movs	r3, #14
 8007256:	444d      	add	r5, r9
 8007258:	4598      	cmp	r8, r3
 800725a:	d820      	bhi.n	800729e <measure_noise.lto_priv.110+0x11a>
 800725c:	4644      	mov	r4, r8
 800725e:	3c0e      	subs	r4, #14
 8007260:	0021      	movs	r1, r4
 8007262:	f009 fe89 	bl	8010f78 <__udivsi3>
 8007266:	220e      	movs	r2, #14
 8007268:	0001      	movs	r1, r0
 800726a:	2000      	movs	r0, #0
 800726c:	4590      	cmp	r8, r2
 800726e:	d81b      	bhi.n	80072a8 <measure_noise.lto_priv.110+0x124>
 8007270:	0021      	movs	r1, r4
 8007272:	f009 fe81 	bl	8010f78 <__udivsi3>
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	8018      	strh	r0, [r3, #0]
 800727a:	0033      	movs	r3, r6
 800727c:	3330      	adds	r3, #48	; 0x30
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b03      	cmp	r3, #3
 8007282:	d904      	bls.n	800728e <measure_noise.lto_priv.110+0x10a>
 8007284:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007286:	4a11      	ldr	r2, [pc, #68]	; (80072cc <measure_noise.lto_priv.110+0x148>)
 8007288:	490e      	ldr	r1, [pc, #56]	; (80072c4 <measure_noise.lto_priv.110+0x140>)
 800728a:	2004      	movs	r0, #4
 800728c:	4798      	blx	r3
 800728e:	4650      	mov	r0, sl
 8007290:	b039      	add	sp, #228	; 0xe4
 8007292:	bc3c      	pop	{r2, r3, r4, r5}
 8007294:	4690      	mov	r8, r2
 8007296:	4699      	mov	r9, r3
 8007298:	46a2      	mov	sl, r4
 800729a:	46ab      	mov	fp, r5
 800729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729e:	005a      	lsls	r2, r3, #1
 80072a0:	5aaa      	ldrh	r2, [r5, r2]
 80072a2:	3301      	adds	r3, #1
 80072a4:	1880      	adds	r0, r0, r2
 80072a6:	e7d7      	b.n	8007258 <measure_noise.lto_priv.110+0xd4>
 80072a8:	0053      	lsls	r3, r2, #1
 80072aa:	5aeb      	ldrh	r3, [r5, r3]
 80072ac:	3201      	adds	r2, #1
 80072ae:	1a5b      	subs	r3, r3, r1
 80072b0:	17df      	asrs	r7, r3, #31
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	407b      	eors	r3, r7
 80072b6:	18c0      	adds	r0, r0, r3
 80072b8:	e7d8      	b.n	800726c <measure_noise.lto_priv.110+0xe8>
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	200005d0 	.word	0x200005d0
 80072c0:	0801daea 	.word	0x0801daea
 80072c4:	0801da75 	.word	0x0801da75
 80072c8:	0000023a 	.word	0x0000023a
 80072cc:	0801db0b 	.word	0x0801db0b

080072d0 <acc_cpd_cbank_and_vana_calibration>:
 80072d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d2:	46de      	mov	lr, fp
 80072d4:	4657      	mov	r7, sl
 80072d6:	4645      	mov	r5, r8
 80072d8:	464e      	mov	r6, r9
 80072da:	0014      	movs	r4, r2
 80072dc:	b5e0      	push	{r5, r6, r7, lr}
 80072de:	2500      	movs	r5, #0
 80072e0:	b089      	sub	sp, #36	; 0x24
 80072e2:	469b      	mov	fp, r3
 80072e4:	ab07      	add	r3, sp, #28
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	9003      	str	r0, [sp, #12]
 80072ea:	9104      	str	r1, [sp, #16]
 80072ec:	000a      	movs	r2, r1
 80072ee:	ab06      	add	r3, sp, #24
 80072f0:	0001      	movs	r1, r0
 80072f2:	6820      	ldr	r0, [r4, #0]
 80072f4:	9506      	str	r5, [sp, #24]
 80072f6:	9507      	str	r5, [sp, #28]
 80072f8:	f008 ffa2 	bl	8010240 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80072fc:	0007      	movs	r7, r0
 80072fe:	42a8      	cmp	r0, r5
 8007300:	d10c      	bne.n	800731c <acc_cpd_cbank_and_vana_calibration+0x4c>
 8007302:	4bbc      	ldr	r3, [pc, #752]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8007304:	4abc      	ldr	r2, [pc, #752]	; (80075f8 <acc_cpd_cbank_and_vana_calibration+0x328>)
 8007306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007308:	49bc      	ldr	r1, [pc, #752]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 800730a:	4798      	blx	r3
 800730c:	0038      	movs	r0, r7
 800730e:	b009      	add	sp, #36	; 0x24
 8007310:	bc3c      	pop	{r2, r3, r4, r5}
 8007312:	4690      	mov	r8, r2
 8007314:	4699      	mov	r9, r3
 8007316:	46a2      	mov	sl, r4
 8007318:	46ab      	mov	fp, r5
 800731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731c:	4bb8      	ldr	r3, [pc, #736]	; (8007600 <acc_cpd_cbank_and_vana_calibration+0x330>)
 800731e:	9a07      	ldr	r2, [sp, #28]
 8007320:	9f06      	ldr	r7, [sp, #24]
 8007322:	1b5b      	subs	r3, r3, r5
 8007324:	4690      	mov	r8, r2
 8007326:	429a      	cmp	r2, r3
 8007328:	d900      	bls.n	800732c <acc_cpd_cbank_and_vana_calibration+0x5c>
 800732a:	4698      	mov	r8, r3
 800732c:	086b      	lsrs	r3, r5, #1
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	4643      	mov	r3, r8
 8007332:	085a      	lsrs	r2, r3, #1
 8007334:	086b      	lsrs	r3, r5, #1
 8007336:	0098      	lsls	r0, r3, #2
 8007338:	4bb2      	ldr	r3, [pc, #712]	; (8007604 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800733a:	0039      	movs	r1, r7
 800733c:	469c      	mov	ip, r3
 800733e:	4460      	add	r0, ip
 8007340:	f008 fa8a 	bl	800f858 <acc_confprogram_copy>
 8007344:	b2ab      	uxth	r3, r5
 8007346:	4699      	mov	r9, r3
 8007348:	4643      	mov	r3, r8
 800734a:	b29b      	uxth	r3, r3
 800734c:	469a      	mov	sl, r3
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	4ead      	ldr	r6, [pc, #692]	; (8007608 <acc_cpd_cbank_and_vana_calibration+0x338>)
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	231b      	movs	r3, #27
 8007356:	4652      	mov	r2, sl
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	4649      	mov	r1, r9
 800735c:	0033      	movs	r3, r6
 800735e:	0038      	movs	r0, r7
 8007360:	f008 fac2 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	4652      	mov	r2, sl
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	2319      	movs	r3, #25
 800736c:	4649      	mov	r1, r9
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	0038      	movs	r0, r7
 8007372:	0033      	movs	r3, r6
 8007374:	f008 fab8 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007378:	68e3      	ldr	r3, [r4, #12]
 800737a:	4652      	mov	r2, sl
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	231a      	movs	r3, #26
 8007380:	4649      	mov	r1, r9
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	0038      	movs	r0, r7
 8007386:	0033      	movs	r3, r6
 8007388:	f008 faae 	bl	800f8e8 <acc_confprogram_patch_offset>
 800738c:	8a23      	ldrh	r3, [r4, #16]
 800738e:	4652      	mov	r2, sl
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	2317      	movs	r3, #23
 8007394:	4649      	mov	r1, r9
 8007396:	9300      	str	r3, [sp, #0]
 8007398:	0038      	movs	r0, r7
 800739a:	0033      	movs	r3, r6
 800739c:	f008 faa4 	bl	800f8e8 <acc_confprogram_patch_offset>
 80073a0:	2310      	movs	r3, #16
 80073a2:	9301      	str	r3, [sp, #4]
 80073a4:	2300      	movs	r3, #0
 80073a6:	4652      	mov	r2, sl
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4649      	mov	r1, r9
 80073ac:	0033      	movs	r3, r6
 80073ae:	0038      	movs	r0, r7
 80073b0:	f008 fa9a 	bl	800f8e8 <acc_confprogram_patch_offset>
 80073b4:	466b      	mov	r3, sp
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	8a99      	ldrh	r1, [r3, #20]
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	4643      	mov	r3, r8
 80073be:	f7ff f994 	bl	80066ea <acc_sensor_r2_load_confmem>
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	469c      	mov	ip, r3
 80073c6:	4b91      	ldr	r3, [pc, #580]	; (800760c <acc_cpd_cbank_and_vana_calibration+0x33c>)
 80073c8:	4465      	add	r5, ip
 80073ca:	429d      	cmp	r5, r3
 80073cc:	d9a6      	bls.n	800731c <acc_cpd_cbank_and_vana_calibration+0x4c>
 80073ce:	2118      	movs	r1, #24
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	f7fe f96f 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 80073d6:	1e07      	subs	r7, r0, #0
 80073d8:	d105      	bne.n	80073e6 <acc_cpd_cbank_and_vana_calibration+0x116>
 80073da:	4b86      	ldr	r3, [pc, #536]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80073dc:	4a8c      	ldr	r2, [pc, #560]	; (8007610 <acc_cpd_cbank_and_vana_calibration+0x340>)
 80073de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e0:	4986      	ldr	r1, [pc, #536]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80073e2:	4798      	blx	r3
 80073e4:	e792      	b.n	800730c <acc_cpd_cbank_and_vana_calibration+0x3c>
 80073e6:	488b      	ldr	r0, [pc, #556]	; (8007614 <acc_cpd_cbank_and_vana_calibration+0x344>)
 80073e8:	f008 fb2d 	bl	800fa46 <acc_diagnostic_log_set_scope>
 80073ec:	6821      	ldr	r1, [r4, #0]
 80073ee:	488a      	ldr	r0, [pc, #552]	; (8007618 <acc_cpd_cbank_and_vana_calibration+0x348>)
 80073f0:	f008 fb25 	bl	800fa3e <acc_diagnostic_log_scalar>
 80073f4:	2203      	movs	r2, #3
 80073f6:	2100      	movs	r1, #0
 80073f8:	4888      	ldr	r0, [pc, #544]	; (800761c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 80073fa:	f008 fb23 	bl	800fa44 <acc_diagnostic_log_declare_parameter>
 80073fe:	21fa      	movs	r1, #250	; 0xfa
 8007400:	6827      	ldr	r7, [r4, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	2203      	movs	r2, #3
 8007406:	00c9      	lsls	r1, r1, #3
 8007408:	0038      	movs	r0, r7
 800740a:	f7fb fb77 	bl	8002afc <acc_sensor_protocol_r2_wait_for_specific_event>
 800740e:	2800      	cmp	r0, #0
 8007410:	d04d      	beq.n	80074ae <acc_cpd_cbank_and_vana_calibration+0x1de>
 8007412:	ad07      	add	r5, sp, #28
 8007414:	002a      	movs	r2, r5
 8007416:	219d      	movs	r1, #157	; 0x9d
 8007418:	0038      	movs	r0, r7
 800741a:	f008 fbe9 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800741e:	2207      	movs	r2, #7
 8007420:	882b      	ldrh	r3, [r5, #0]
 8007422:	2006      	movs	r0, #6
 8007424:	4013      	ands	r3, r2
 8007426:	802b      	strh	r3, [r5, #0]
 8007428:	002a      	movs	r2, r5
 800742a:	2301      	movs	r3, #1
 800742c:	0039      	movs	r1, r7
 800742e:	f7f8 fe83 	bl	8000138 <acc_probes_execute_uint16>
 8007432:	0038      	movs	r0, r7
 8007434:	f7fb fb42 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 8007438:	2800      	cmp	r0, #0
 800743a:	d038      	beq.n	80074ae <acc_cpd_cbank_and_vana_calibration+0x1de>
 800743c:	465b      	mov	r3, fp
 800743e:	882f      	ldrh	r7, [r5, #0]
 8007440:	601f      	str	r7, [r3, #0]
 8007442:	23c0      	movs	r3, #192	; 0xc0
 8007444:	6824      	ldr	r4, [r4, #0]
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	802b      	strh	r3, [r5, #0]
 800744a:	0020      	movs	r0, r4
 800744c:	f7fe f924 	bl	8005698 <acc_sensor_protocol_r2_is_sensor_running>
 8007450:	4680      	mov	r8, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d133      	bne.n	80074be <acc_cpd_cbank_and_vana_calibration+0x1ee>
 8007456:	0032      	movs	r2, r6
 8007458:	2311      	movs	r3, #17
 800745a:	496a      	ldr	r1, [pc, #424]	; (8007604 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800745c:	0020      	movs	r0, r4
 800745e:	9700      	str	r7, [sp, #0]
 8007460:	f005 fca6 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8007464:	4643      	mov	r3, r8
 8007466:	0032      	movs	r2, r6
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4966      	ldr	r1, [pc, #408]	; (8007604 <acc_cpd_cbank_and_vana_calibration+0x334>)
 800746c:	2301      	movs	r3, #1
 800746e:	0020      	movs	r0, r4
 8007470:	f005 fc9e 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8007474:	4646      	mov	r6, r8
 8007476:	5dab      	ldrb	r3, [r5, r6]
 8007478:	4868      	ldr	r0, [pc, #416]	; (800761c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800747a:	4698      	mov	r8, r3
 800747c:	0019      	movs	r1, r3
 800747e:	f008 fae0 	bl	800fa42 <acc_diagnostic_log_set_parameter>
 8007482:	4643      	mov	r3, r8
 8007484:	495f      	ldr	r1, [pc, #380]	; (8007604 <acc_cpd_cbank_and_vana_calibration+0x334>)
 8007486:	9300      	str	r3, [sp, #0]
 8007488:	0020      	movs	r0, r4
 800748a:	231f      	movs	r3, #31
 800748c:	4a5e      	ldr	r2, [pc, #376]	; (8007608 <acc_cpd_cbank_and_vana_calibration+0x338>)
 800748e:	f005 fc8f 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8007492:	21e8      	movs	r1, #232	; 0xe8
 8007494:	0020      	movs	r0, r4
 8007496:	0049      	lsls	r1, r1, #1
 8007498:	f7fe f90c 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 800749c:	2800      	cmp	r0, #0
 800749e:	d11d      	bne.n	80074dc <acc_cpd_cbank_and_vana_calibration+0x20c>
 80074a0:	4b54      	ldr	r3, [pc, #336]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80074a2:	4a5f      	ldr	r2, [pc, #380]	; (8007620 <acc_cpd_cbank_and_vana_calibration+0x350>)
 80074a4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80074a6:	4955      	ldr	r1, [pc, #340]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80074a8:	4643      	mov	r3, r8
 80074aa:	47a0      	blx	r4
 80074ac:	e00e      	b.n	80074cc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 80074ae:	4b51      	ldr	r3, [pc, #324]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80074b0:	4a5c      	ldr	r2, [pc, #368]	; (8007624 <acc_cpd_cbank_and_vana_calibration+0x354>)
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	4951      	ldr	r1, [pc, #324]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80074b6:	2000      	movs	r0, #0
 80074b8:	4798      	blx	r3
 80074ba:	2700      	movs	r7, #0
 80074bc:	e726      	b.n	800730c <acc_cpd_cbank_and_vana_calibration+0x3c>
 80074be:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80074c0:	4a59      	ldr	r2, [pc, #356]	; (8007628 <acc_cpd_cbank_and_vana_calibration+0x358>)
 80074c2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80074c4:	494d      	ldr	r1, [pc, #308]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80074c6:	0023      	movs	r3, r4
 80074c8:	2000      	movs	r0, #0
 80074ca:	47a8      	blx	r5
 80074cc:	4b49      	ldr	r3, [pc, #292]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80074ce:	4a57      	ldr	r2, [pc, #348]	; (800762c <acc_cpd_cbank_and_vana_calibration+0x35c>)
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	494a      	ldr	r1, [pc, #296]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80074d4:	2000      	movs	r0, #0
 80074d6:	4798      	blx	r3
 80074d8:	2700      	movs	r7, #0
 80074da:	e717      	b.n	800730c <acc_cpd_cbank_and_vana_calibration+0x3c>
 80074dc:	21fa      	movs	r1, #250	; 0xfa
 80074de:	2300      	movs	r3, #0
 80074e0:	2209      	movs	r2, #9
 80074e2:	00c9      	lsls	r1, r1, #3
 80074e4:	0020      	movs	r0, r4
 80074e6:	f7fb fb09 	bl	8002afc <acc_sensor_protocol_r2_wait_for_specific_event>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d008      	beq.n	8007500 <acc_cpd_cbank_and_vana_calibration+0x230>
 80074ee:	9b04      	ldr	r3, [sp, #16]
 80074f0:	2b25      	cmp	r3, #37	; 0x25
 80074f2:	d80d      	bhi.n	8007510 <acc_cpd_cbank_and_vana_calibration+0x240>
 80074f4:	4b3f      	ldr	r3, [pc, #252]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80074f6:	4a4e      	ldr	r2, [pc, #312]	; (8007630 <acc_cpd_cbank_and_vana_calibration+0x360>)
 80074f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fa:	4940      	ldr	r1, [pc, #256]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80074fc:	2000      	movs	r0, #0
 80074fe:	4798      	blx	r3
 8007500:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 8007502:	4a4c      	ldr	r2, [pc, #304]	; (8007634 <acc_cpd_cbank_and_vana_calibration+0x364>)
 8007504:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007506:	493d      	ldr	r1, [pc, #244]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8007508:	4643      	mov	r3, r8
 800750a:	2000      	movs	r0, #0
 800750c:	47a0      	blx	r4
 800750e:	e7dd      	b.n	80074cc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 8007510:	2210      	movs	r2, #16
 8007512:	9903      	ldr	r1, [sp, #12]
 8007514:	0020      	movs	r0, r4
 8007516:	f005 fbe9 	bl	800ccec <internal_buffer_processed_read.constprop.29>
 800751a:	2310      	movs	r3, #16
 800751c:	0002      	movs	r2, r0
 800751e:	0007      	movs	r7, r0
 8007520:	0021      	movs	r1, r4
 8007522:	2000      	movs	r0, #0
 8007524:	f7f8 fe08 	bl	8000138 <acc_probes_execute_uint16>
 8007528:	0020      	movs	r0, r4
 800752a:	f7fb fac7 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 800752e:	2800      	cmp	r0, #0
 8007530:	d0e6      	beq.n	8007500 <acc_cpd_cbank_and_vana_calibration+0x230>
 8007532:	221e      	movs	r2, #30
 8007534:	4694      	mov	ip, r2
 8007536:	2200      	movs	r2, #0
 8007538:	003b      	movs	r3, r7
 800753a:	4691      	mov	r9, r2
 800753c:	4692      	mov	sl, r2
 800753e:	44bc      	add	ip, r7
 8007540:	885a      	ldrh	r2, [r3, #2]
 8007542:	8818      	ldrh	r0, [r3, #0]
 8007544:	4492      	add	sl, r2
 8007546:	1a11      	subs	r1, r2, r0
 8007548:	4282      	cmp	r2, r0
 800754a:	d200      	bcs.n	800754e <acc_cpd_cbank_and_vana_calibration+0x27e>
 800754c:	1a81      	subs	r1, r0, r2
 800754e:	4589      	cmp	r9, r1
 8007550:	d200      	bcs.n	8007554 <acc_cpd_cbank_and_vana_calibration+0x284>
 8007552:	4689      	mov	r9, r1
 8007554:	3302      	adds	r3, #2
 8007556:	459c      	cmp	ip, r3
 8007558:	d1f2      	bne.n	8007540 <acc_cpd_cbank_and_vana_calibration+0x270>
 800755a:	4930      	ldr	r1, [pc, #192]	; (800761c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 800755c:	4836      	ldr	r0, [pc, #216]	; (8007638 <acc_cpd_cbank_and_vana_calibration+0x368>)
 800755e:	f008 fa6f 	bl	800fa40 <acc_diagnostic_log_array>
 8007562:	2110      	movs	r1, #16
 8007564:	0038      	movs	r0, r7
 8007566:	f008 fa69 	bl	800fa3c <acc_diagnostic_log_data_u16>
 800756a:	883b      	ldrh	r3, [r7, #0]
 800756c:	4a33      	ldr	r2, [pc, #204]	; (800763c <acc_cpd_cbank_and_vana_calibration+0x36c>)
 800756e:	4453      	add	r3, sl
 8007570:	091b      	lsrs	r3, r3, #4
 8007572:	189a      	adds	r2, r3, r2
 8007574:	4932      	ldr	r1, [pc, #200]	; (8007640 <acc_cpd_cbank_and_vana_calibration+0x370>)
 8007576:	b292      	uxth	r2, r2
 8007578:	2700      	movs	r7, #0
 800757a:	428a      	cmp	r2, r1
 800757c:	d805      	bhi.n	800758a <acc_cpd_cbank_and_vana_calibration+0x2ba>
 800757e:	22c8      	movs	r2, #200	; 0xc8
 8007580:	4649      	mov	r1, r9
 8007582:	0092      	lsls	r2, r2, #2
 8007584:	428a      	cmp	r2, r1
 8007586:	417f      	adcs	r7, r7
 8007588:	b2ff      	uxtb	r7, r7
 800758a:	4a1a      	ldr	r2, [pc, #104]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 800758c:	0011      	movs	r1, r2
 800758e:	3130      	adds	r1, #48	; 0x30
 8007590:	7809      	ldrb	r1, [r1, #0]
 8007592:	2903      	cmp	r1, #3
 8007594:	d90a      	bls.n	80075ac <acc_cpd_cbank_and_vana_calibration+0x2dc>
 8007596:	4649      	mov	r1, r9
 8007598:	b29b      	uxth	r3, r3
 800759a:	9101      	str	r1, [sp, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80075a0:	4916      	ldr	r1, [pc, #88]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80075a2:	4699      	mov	r9, r3
 80075a4:	4a27      	ldr	r2, [pc, #156]	; (8007644 <acc_cpd_cbank_and_vana_calibration+0x374>)
 80075a6:	0023      	movs	r3, r4
 80075a8:	2004      	movs	r0, #4
 80075aa:	47c8      	blx	r9
 80075ac:	2f00      	cmp	r7, #0
 80075ae:	d014      	beq.n	80075da <acc_cpd_cbank_and_vana_calibration+0x30a>
 80075b0:	465b      	mov	r3, fp
 80075b2:	4642      	mov	r2, r8
 80075b4:	711a      	strb	r2, [r3, #4]
 80075b6:	4a0f      	ldr	r2, [pc, #60]	; (80075f4 <acc_cpd_cbank_and_vana_calibration+0x324>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	0011      	movs	r1, r2
 80075bc:	3130      	adds	r1, #48	; 0x30
 80075be:	7809      	ldrb	r1, [r1, #0]
 80075c0:	2901      	cmp	r1, #1
 80075c2:	d80f      	bhi.n	80075e4 <acc_cpd_cbank_and_vana_calibration+0x314>
 80075c4:	465b      	mov	r3, fp
 80075c6:	4820      	ldr	r0, [pc, #128]	; (8007648 <acc_cpd_cbank_and_vana_calibration+0x378>)
 80075c8:	6819      	ldr	r1, [r3, #0]
 80075ca:	f008 fa38 	bl	800fa3e <acc_diagnostic_log_scalar>
 80075ce:	465b      	mov	r3, fp
 80075d0:	4812      	ldr	r0, [pc, #72]	; (800761c <acc_cpd_cbank_and_vana_calibration+0x34c>)
 80075d2:	7919      	ldrb	r1, [r3, #4]
 80075d4:	f008 fa33 	bl	800fa3e <acc_diagnostic_log_scalar>
 80075d8:	e698      	b.n	800730c <acc_cpd_cbank_and_vana_calibration+0x3c>
 80075da:	2e01      	cmp	r6, #1
 80075dc:	d100      	bne.n	80075e0 <acc_cpd_cbank_and_vana_calibration+0x310>
 80075de:	e775      	b.n	80074cc <acc_cpd_cbank_and_vana_calibration+0x1fc>
 80075e0:	2601      	movs	r6, #1
 80075e2:	e748      	b.n	8007476 <acc_cpd_cbank_and_vana_calibration+0x1a6>
 80075e4:	4641      	mov	r1, r8
 80075e6:	9100      	str	r1, [sp, #0]
 80075e8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80075ea:	4904      	ldr	r1, [pc, #16]	; (80075fc <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80075ec:	4a17      	ldr	r2, [pc, #92]	; (800764c <acc_cpd_cbank_and_vana_calibration+0x37c>)
 80075ee:	2002      	movs	r0, #2
 80075f0:	47a0      	blx	r4
 80075f2:	e7e7      	b.n	80075c4 <acc_cpd_cbank_and_vana_calibration+0x2f4>
 80075f4:	200005d0 	.word	0x200005d0
 80075f8:	0801db2a 	.word	0x0801db2a
 80075fc:	0801db6b 	.word	0x0801db6b
 8007600:	00000572 	.word	0x00000572
 8007604:	0801a298 	.word	0x0801a298
 8007608:	08018544 	.word	0x08018544
 800760c:	00000571 	.word	0x00000571
 8007610:	0801db8a 	.word	0x0801db8a
 8007614:	0801db6f 	.word	0x0801db6f
 8007618:	0801dbbc 	.word	0x0801dbbc
 800761c:	0801dbc6 	.word	0x0801dbc6
 8007620:	0801dc18 	.word	0x0801dc18
 8007624:	0801dbcf 	.word	0x0801dbcf
 8007628:	0801dbe7 	.word	0x0801dbe7
 800762c:	0801dcc7 	.word	0x0801dcc7
 8007630:	0801dc58 	.word	0x0801dc58
 8007634:	0801dc9c 	.word	0x0801dc9c
 8007638:	0801dc70 	.word	0x0801dc70
 800763c:	ffff86e8 	.word	0xffff86e8
 8007640:	00000bb8 	.word	0x00000bb8
 8007644:	0801dc7e 	.word	0x0801dc7e
 8007648:	0801dcf1 	.word	0x0801dcf1
 800764c:	0801dcde 	.word	0x0801dcde

08007650 <start.lto_priv.124>:
 8007650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007652:	46de      	mov	lr, fp
 8007654:	4657      	mov	r7, sl
 8007656:	464e      	mov	r6, r9
 8007658:	4645      	mov	r5, r8
 800765a:	b5e0      	push	{r5, r6, r7, lr}
 800765c:	6947      	ldr	r7, [r0, #20]
 800765e:	b093      	sub	sp, #76	; 0x4c
 8007660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007662:	4683      	mov	fp, r0
 8007664:	9307      	str	r3, [sp, #28]
 8007666:	003b      	movs	r3, r7
 8007668:	3308      	adds	r3, #8
 800766a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766c:	9308      	str	r3, [sp, #32]
 800766e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007670:	930a      	str	r3, [sp, #40]	; 0x28
 8007672:	9b08      	ldr	r3, [sp, #32]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <start.lto_priv.124+0x32>
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <start.lto_priv.124+0x32>
 800767e:	2300      	movs	r3, #0
 8007680:	643b      	str	r3, [r7, #64]	; 0x40
 8007682:	465b      	mov	r3, fp
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	ac0f      	add	r4, sp, #60	; 0x3c
 8007688:	9306      	str	r3, [sp, #24]
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	2500      	movs	r5, #0
 800768e:	9309      	str	r3, [sp, #36]	; 0x24
 8007690:	2315      	movs	r3, #21
 8007692:	7023      	strb	r3, [r4, #0]
 8007694:	9b06      	ldr	r3, [sp, #24]
 8007696:	684e      	ldr	r6, [r1, #4]
 8007698:	9310      	str	r3, [sp, #64]	; 0x40
 800769a:	2307      	movs	r3, #7
 800769c:	0020      	movs	r0, r4
 800769e:	22b4      	movs	r2, #180	; 0xb4
 80076a0:	0039      	movs	r1, r7
 80076a2:	9311      	str	r3, [sp, #68]	; 0x44
 80076a4:	f7f8 fd2e 	bl	8000104 <acc_probes_execute>
 80076a8:	9400      	str	r4, [sp, #0]
 80076aa:	ab0e      	add	r3, sp, #56	; 0x38
 80076ac:	0032      	movs	r2, r6
 80076ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076b0:	9806      	ldr	r0, [sp, #24]
 80076b2:	950e      	str	r5, [sp, #56]	; 0x38
 80076b4:	950f      	str	r5, [sp, #60]	; 0x3c
 80076b6:	f008 fdc3 	bl	8010240 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80076ba:	9503      	str	r5, [sp, #12]
 80076bc:	0004      	movs	r4, r0
 80076be:	42a8      	cmp	r0, r5
 80076c0:	d112      	bne.n	80076e8 <start.lto_priv.124+0x98>
 80076c2:	4b06      	ldr	r3, [pc, #24]	; (80076dc <start.lto_priv.124+0x8c>)
 80076c4:	4a06      	ldr	r2, [pc, #24]	; (80076e0 <start.lto_priv.124+0x90>)
 80076c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c8:	4906      	ldr	r1, [pc, #24]	; (80076e4 <start.lto_priv.124+0x94>)
 80076ca:	4798      	blx	r3
 80076cc:	0020      	movs	r0, r4
 80076ce:	b013      	add	sp, #76	; 0x4c
 80076d0:	bc3c      	pop	{r2, r3, r4, r5}
 80076d2:	4690      	mov	r8, r2
 80076d4:	4699      	mov	r9, r3
 80076d6:	46a2      	mov	sl, r4
 80076d8:	46ab      	mov	fp, r5
 80076da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076dc:	200005d0 	.word	0x200005d0
 80076e0:	0801dcfd 	.word	0x0801dcfd
 80076e4:	0801dd1a 	.word	0x0801dd1a
 80076e8:	9a03      	ldr	r2, [sp, #12]
 80076ea:	4bfa      	ldr	r3, [pc, #1000]	; (8007ad4 <start.lto_priv.124+0x484>)
 80076ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80076ee:	1a9b      	subs	r3, r3, r2
 80076f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076f2:	9205      	str	r2, [sp, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d900      	bls.n	80076fa <start.lto_priv.124+0xaa>
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	0021      	movs	r1, r4
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	930b      	str	r3, [sp, #44]	; 0x2c
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	085a      	lsrs	r2, r3, #1
 8007706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007708:	0098      	lsls	r0, r3, #2
 800770a:	4bf3      	ldr	r3, [pc, #972]	; (8007ad8 <start.lto_priv.124+0x488>)
 800770c:	18c0      	adds	r0, r0, r3
 800770e:	f008 f8a3 	bl	800f858 <acc_confprogram_copy>
 8007712:	466b      	mov	r3, sp
 8007714:	899d      	ldrh	r5, [r3, #12]
 8007716:	8a9e      	ldrh	r6, [r3, #20]
 8007718:	4bf0      	ldr	r3, [pc, #960]	; (8007adc <start.lto_priv.124+0x48c>)
 800771a:	0032      	movs	r2, r6
 800771c:	4698      	mov	r8, r3
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	0029      	movs	r1, r5
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	23d2      	movs	r3, #210	; 0xd2
 8007726:	0020      	movs	r0, r4
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4643      	mov	r3, r8
 800772c:	f008 f8dc 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	0032      	movs	r2, r6
 8007734:	9301      	str	r3, [sp, #4]
 8007736:	23d0      	movs	r3, #208	; 0xd0
 8007738:	0029      	movs	r1, r5
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	0020      	movs	r0, r4
 800773e:	4643      	mov	r3, r8
 8007740:	f008 f8d2 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	0032      	movs	r2, r6
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	23d1      	movs	r3, #209	; 0xd1
 800774c:	0029      	movs	r1, r5
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	0020      	movs	r0, r4
 8007752:	4643      	mov	r3, r8
 8007754:	f008 f8c8 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007758:	89bb      	ldrh	r3, [r7, #12]
 800775a:	0032      	movs	r2, r6
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	23ce      	movs	r3, #206	; 0xce
 8007760:	0029      	movs	r1, r5
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	0020      	movs	r0, r4
 8007766:	4643      	mov	r3, r8
 8007768:	f008 f8be 	bl	800f8e8 <acc_confprogram_patch_offset>
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	0032      	movs	r2, r6
 8007770:	9301      	str	r3, [sp, #4]
 8007772:	2365      	movs	r3, #101	; 0x65
 8007774:	0029      	movs	r1, r5
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	0020      	movs	r0, r4
 800777a:	4643      	mov	r3, r8
 800777c:	f008 f8b4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	0032      	movs	r2, r6
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	23f0      	movs	r3, #240	; 0xf0
 8007788:	0029      	movs	r1, r5
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	0020      	movs	r0, r4
 800778e:	4643      	mov	r3, r8
 8007790:	f008 f8aa 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	0032      	movs	r2, r6
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	23e8      	movs	r3, #232	; 0xe8
 800779c:	0029      	movs	r1, r5
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	0020      	movs	r0, r4
 80077a2:	4643      	mov	r3, r8
 80077a4:	f008 f8a0 	bl	800f8e8 <acc_confprogram_patch_offset>
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	0032      	movs	r2, r6
 80077ac:	9301      	str	r3, [sp, #4]
 80077ae:	23fc      	movs	r3, #252	; 0xfc
 80077b0:	0029      	movs	r1, r5
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	0020      	movs	r0, r4
 80077b6:	4643      	mov	r3, r8
 80077b8:	f008 f896 	bl	800f8e8 <acc_confprogram_patch_offset>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	0032      	movs	r2, r6
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	23e0      	movs	r3, #224	; 0xe0
 80077c4:	0029      	movs	r1, r5
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	0020      	movs	r0, r4
 80077ca:	4643      	mov	r3, r8
 80077cc:	f008 f88c 	bl	800f8e8 <acc_confprogram_patch_offset>
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	0032      	movs	r2, r6
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	23e1      	movs	r3, #225	; 0xe1
 80077d8:	0029      	movs	r1, r5
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	0020      	movs	r0, r4
 80077de:	4643      	mov	r3, r8
 80077e0:	f008 f882 	bl	800f8e8 <acc_confprogram_patch_offset>
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	0032      	movs	r2, r6
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	2380      	movs	r3, #128	; 0x80
 80077ec:	0029      	movs	r1, r5
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	0020      	movs	r0, r4
 80077f2:	4643      	mov	r3, r8
 80077f4:	f008 f878 	bl	800f8e8 <acc_confprogram_patch_offset>
 80077f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fa:	0032      	movs	r2, r6
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	2381      	movs	r3, #129	; 0x81
 8007800:	0029      	movs	r1, r5
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	0020      	movs	r0, r4
 8007806:	4643      	mov	r3, r8
 8007808:	f008 f86e 	bl	800f8e8 <acc_confprogram_patch_offset>
 800780c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800780e:	0032      	movs	r2, r6
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	237f      	movs	r3, #127	; 0x7f
 8007814:	0029      	movs	r1, r5
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	0020      	movs	r0, r4
 800781a:	4643      	mov	r3, r8
 800781c:	f008 f864 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007820:	2300      	movs	r3, #0
 8007822:	0032      	movs	r2, r6
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	0029      	movs	r1, r5
 800782a:	0020      	movs	r0, r4
 800782c:	469a      	mov	sl, r3
 800782e:	4643      	mov	r3, r8
 8007830:	f008 f85a 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007836:	0032      	movs	r2, r6
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	23ef      	movs	r3, #239	; 0xef
 800783c:	0029      	movs	r1, r5
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	0020      	movs	r0, r4
 8007842:	4643      	mov	r3, r8
 8007844:	f008 f850 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784a:	0032      	movs	r2, r6
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	23d6      	movs	r3, #214	; 0xd6
 8007850:	0029      	movs	r1, r5
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	0020      	movs	r0, r4
 8007856:	4643      	mov	r3, r8
 8007858:	f008 f846 	bl	800f8e8 <acc_confprogram_patch_offset>
 800785c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800785e:	0032      	movs	r2, r6
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	2378      	movs	r3, #120	; 0x78
 8007864:	0029      	movs	r1, r5
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	0020      	movs	r0, r4
 800786a:	4643      	mov	r3, r8
 800786c:	f008 f83c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007872:	4553      	cmp	r3, sl
 8007874:	d06e      	beq.n	8007954 <start.lto_priv.124+0x304>
 8007876:	2301      	movs	r3, #1
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	330e      	adds	r3, #14
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	0032      	movs	r2, r6
 8007880:	4643      	mov	r3, r8
 8007882:	0029      	movs	r1, r5
 8007884:	0020      	movs	r0, r4
 8007886:	f008 f82f 	bl	800f8e8 <acc_confprogram_patch_offset>
 800788a:	4b95      	ldr	r3, [pc, #596]	; (8007ae0 <start.lto_priv.124+0x490>)
 800788c:	0032      	movs	r2, r6
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	2311      	movs	r3, #17
 8007892:	0029      	movs	r1, r5
 8007894:	9300      	str	r3, [sp, #0]
 8007896:	0020      	movs	r0, r4
 8007898:	4643      	mov	r3, r8
 800789a:	f008 f825 	bl	800f8e8 <acc_confprogram_patch_offset>
 800789e:	2207      	movs	r2, #7
 80078a0:	2313      	movs	r3, #19
 80078a2:	4691      	mov	r9, r2
 80078a4:	9201      	str	r2, [sp, #4]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	0032      	movs	r2, r6
 80078aa:	4643      	mov	r3, r8
 80078ac:	0029      	movs	r1, r5
 80078ae:	0020      	movs	r0, r4
 80078b0:	f008 f81a 	bl	800f8e8 <acc_confprogram_patch_offset>
 80078b4:	4b8a      	ldr	r3, [pc, #552]	; (8007ae0 <start.lto_priv.124+0x490>)
 80078b6:	0032      	movs	r2, r6
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2310      	movs	r3, #16
 80078bc:	0029      	movs	r1, r5
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	0020      	movs	r0, r4
 80078c2:	4643      	mov	r3, r8
 80078c4:	f008 f810 	bl	800f8e8 <acc_confprogram_patch_offset>
 80078c8:	4653      	mov	r3, sl
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	3312      	adds	r3, #18
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	0032      	movs	r2, r6
 80078d2:	4643      	mov	r3, r8
 80078d4:	0029      	movs	r1, r5
 80078d6:	0020      	movs	r0, r4
 80078d8:	f008 f806 	bl	800f8e8 <acc_confprogram_patch_offset>
 80078dc:	4b81      	ldr	r3, [pc, #516]	; (8007ae4 <start.lto_priv.124+0x494>)
 80078de:	0032      	movs	r2, r6
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	2314      	movs	r3, #20
 80078e4:	0029      	movs	r1, r5
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	0020      	movs	r0, r4
 80078ea:	4643      	mov	r3, r8
 80078ec:	f007 fffc 	bl	800f8e8 <acc_confprogram_patch_offset>
 80078f0:	464b      	mov	r3, r9
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	330e      	adds	r3, #14
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	0032      	movs	r2, r6
 80078fa:	4643      	mov	r3, r8
 80078fc:	0029      	movs	r1, r5
 80078fe:	0020      	movs	r0, r4
 8007900:	f007 fff2 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007904:	4b78      	ldr	r3, [pc, #480]	; (8007ae8 <start.lto_priv.124+0x498>)
 8007906:	0032      	movs	r2, r6
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	230d      	movs	r3, #13
 800790c:	0029      	movs	r1, r5
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	0020      	movs	r0, r4
 8007912:	4643      	mov	r3, r8
 8007914:	f007 ffe8 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007918:	464b      	mov	r3, r9
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	18db      	adds	r3, r3, r3
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	0032      	movs	r2, r6
 8007922:	4643      	mov	r3, r8
 8007924:	0029      	movs	r1, r5
 8007926:	0020      	movs	r0, r4
 8007928:	f007 ffde 	bl	800f8e8 <acc_confprogram_patch_offset>
 800792c:	4b6f      	ldr	r3, [pc, #444]	; (8007aec <start.lto_priv.124+0x49c>)
 800792e:	0032      	movs	r2, r6
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	2316      	movs	r3, #22
 8007934:	0029      	movs	r1, r5
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	0020      	movs	r0, r4
 800793a:	4643      	mov	r3, r8
 800793c:	f007 ffd4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007940:	464b      	mov	r3, r9
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	3310      	adds	r3, #16
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	0032      	movs	r2, r6
 800794a:	4643      	mov	r3, r8
 800794c:	0029      	movs	r1, r5
 800794e:	0020      	movs	r0, r4
 8007950:	f007 ffca 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007954:	4b61      	ldr	r3, [pc, #388]	; (8007adc <start.lto_priv.124+0x48c>)
 8007956:	0032      	movs	r2, r6
 8007958:	4699      	mov	r9, r3
 800795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795c:	0029      	movs	r1, r5
 800795e:	9301      	str	r3, [sp, #4]
 8007960:	2386      	movs	r3, #134	; 0x86
 8007962:	0020      	movs	r0, r4
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	464b      	mov	r3, r9
 8007968:	f007 ffbe 	bl	800f8e8 <acc_confprogram_patch_offset>
 800796c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800796e:	0032      	movs	r2, r6
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	23d3      	movs	r3, #211	; 0xd3
 8007974:	0029      	movs	r1, r5
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	0020      	movs	r0, r4
 800797a:	464b      	mov	r3, r9
 800797c:	f007 ffb4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007982:	0032      	movs	r2, r6
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	23f3      	movs	r3, #243	; 0xf3
 8007988:	0029      	movs	r1, r5
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	0020      	movs	r0, r4
 800798e:	464b      	mov	r3, r9
 8007990:	f007 ffaa 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007996:	0032      	movs	r2, r6
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	2382      	movs	r3, #130	; 0x82
 800799c:	0029      	movs	r1, r5
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	0020      	movs	r0, r4
 80079a2:	464b      	mov	r3, r9
 80079a4:	f007 ffa0 	bl	800f8e8 <acc_confprogram_patch_offset>
 80079a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	4690      	mov	r8, r2
 80079ae:	2200      	movs	r2, #0
 80079b0:	9204      	str	r2, [sp, #16]
 80079b2:	4642      	mov	r2, r8
 80079b4:	2a08      	cmp	r2, #8
 80079b6:	d914      	bls.n	80079e2 <start.lto_priv.124+0x392>
 80079b8:	4643      	mov	r3, r8
 80079ba:	22ff      	movs	r2, #255	; 0xff
 80079bc:	3b08      	subs	r3, #8
 80079be:	409a      	lsls	r2, r3
 80079c0:	0013      	movs	r3, r2
 80079c2:	22ff      	movs	r2, #255	; 0xff
 80079c4:	4393      	bics	r3, r2
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	9304      	str	r3, [sp, #16]
 80079ca:	2302      	movs	r3, #2
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	33e0      	adds	r3, #224	; 0xe0
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	0032      	movs	r2, r6
 80079d4:	464b      	mov	r3, r9
 80079d6:	0029      	movs	r1, r5
 80079d8:	0020      	movs	r0, r4
 80079da:	f007 ff85 	bl	800f8e8 <acc_confprogram_patch_offset>
 80079de:	2308      	movs	r3, #8
 80079e0:	4698      	mov	r8, r3
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <start.lto_priv.124+0x48c>)
 80079e4:	0032      	movs	r2, r6
 80079e6:	469a      	mov	sl, r3
 80079e8:	4643      	mov	r3, r8
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	23e9      	movs	r3, #233	; 0xe9
 80079ee:	0029      	movs	r1, r5
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	0020      	movs	r0, r4
 80079f4:	4653      	mov	r3, sl
 80079f6:	f007 ff77 	bl	800f8e8 <acc_confprogram_patch_offset>
 80079fa:	4643      	mov	r3, r8
 80079fc:	9301      	str	r3, [sp, #4]
 80079fe:	23d9      	movs	r3, #217	; 0xd9
 8007a00:	0032      	movs	r2, r6
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	0029      	movs	r1, r5
 8007a06:	4653      	mov	r3, sl
 8007a08:	0020      	movs	r0, r4
 8007a0a:	f007 ff6d 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a0e:	2380      	movs	r3, #128	; 0x80
 8007a10:	9a04      	ldr	r2, [sp, #16]
 8007a12:	0029      	movs	r1, r5
 8007a14:	4313      	orrs	r3, r2
 8007a16:	930c      	str	r3, [sp, #48]	; 0x30
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	23eb      	movs	r3, #235	; 0xeb
 8007a1c:	0032      	movs	r2, r6
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	0020      	movs	r0, r4
 8007a22:	4653      	mov	r3, sl
 8007a24:	f007 ff60 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a28:	23c0      	movs	r3, #192	; 0xc0
 8007a2a:	9a04      	ldr	r2, [sp, #16]
 8007a2c:	0029      	movs	r1, r5
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	23ed      	movs	r3, #237	; 0xed
 8007a32:	4690      	mov	r8, r2
 8007a34:	9201      	str	r2, [sp, #4]
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	0032      	movs	r2, r6
 8007a3a:	4653      	mov	r3, sl
 8007a3c:	0020      	movs	r0, r4
 8007a3e:	f007 ff53 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a42:	23ff      	movs	r3, #255	; 0xff
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	0029      	movs	r1, r5
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	4699      	mov	r9, r3
 8007a4c:	9301      	str	r3, [sp, #4]
 8007a4e:	23ec      	movs	r3, #236	; 0xec
 8007a50:	0032      	movs	r2, r6
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	0020      	movs	r0, r4
 8007a56:	4653      	mov	r3, sl
 8007a58:	f007 ff46 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a5e:	0032      	movs	r2, r6
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	23db      	movs	r3, #219	; 0xdb
 8007a64:	0029      	movs	r1, r5
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	0020      	movs	r0, r4
 8007a6a:	4653      	mov	r3, sl
 8007a6c:	f007 ff3c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a70:	4643      	mov	r3, r8
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	23dd      	movs	r3, #221	; 0xdd
 8007a76:	0032      	movs	r2, r6
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	0029      	movs	r1, r5
 8007a7c:	4653      	mov	r3, sl
 8007a7e:	0020      	movs	r0, r4
 8007a80:	f007 ff32 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a84:	464b      	mov	r3, r9
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	23dc      	movs	r3, #220	; 0xdc
 8007a8a:	0032      	movs	r2, r6
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	0029      	movs	r1, r5
 8007a90:	4653      	mov	r3, sl
 8007a92:	0020      	movs	r0, r4
 8007a94:	f007 ff28 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007a98:	22f0      	movs	r2, #240	; 0xf0
 8007a9a:	9b04      	ldr	r3, [sp, #16]
 8007a9c:	0029      	movs	r1, r5
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	23cd      	movs	r3, #205	; 0xcd
 8007aa6:	0032      	movs	r2, r6
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	0020      	movs	r0, r4
 8007aac:	4653      	mov	r3, sl
 8007aae:	f007 ff1b 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007ab2:	4643      	mov	r3, r8
 8007ab4:	9301      	str	r3, [sp, #4]
 8007ab6:	2385      	movs	r3, #133	; 0x85
 8007ab8:	0032      	movs	r2, r6
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	0029      	movs	r1, r5
 8007abe:	4653      	mov	r3, sl
 8007ac0:	0020      	movs	r0, r4
 8007ac2:	f007 ff11 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	2321      	movs	r3, #33	; 0x21
 8007acc:	0032      	movs	r2, r6
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	e00e      	b.n	8007af0 <start.lto_priv.124+0x4a0>
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	0000076a 	.word	0x0000076a
 8007ad8:	080193c4 	.word	0x080193c4
 8007adc:	08017c3c 	.word	0x08017c3c
 8007ae0:	0000ff80 	.word	0x0000ff80
 8007ae4:	0000ffc0 	.word	0x0000ffc0
 8007ae8:	0000fff0 	.word	0x0000fff0
 8007aec:	0000ffff 	.word	0x0000ffff
 8007af0:	0029      	movs	r1, r5
 8007af2:	4653      	mov	r3, sl
 8007af4:	0020      	movs	r0, r4
 8007af6:	f007 fef7 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007afc:	0032      	movs	r2, r6
 8007afe:	3b01      	subs	r3, #1
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	2374      	movs	r3, #116	; 0x74
 8007b04:	0029      	movs	r1, r5
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	0020      	movs	r0, r4
 8007b0a:	4653      	mov	r3, sl
 8007b0c:	f007 feec 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b12:	0032      	movs	r2, r6
 8007b14:	9301      	str	r3, [sp, #4]
 8007b16:	2305      	movs	r3, #5
 8007b18:	0029      	movs	r1, r5
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	0020      	movs	r0, r4
 8007b1e:	4653      	mov	r3, sl
 8007b20:	f007 fee2 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b26:	0032      	movs	r2, r6
 8007b28:	015b      	lsls	r3, r3, #5
 8007b2a:	3b03      	subs	r3, #3
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	2363      	movs	r3, #99	; 0x63
 8007b30:	0029      	movs	r1, r5
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	0020      	movs	r0, r4
 8007b36:	4653      	mov	r3, sl
 8007b38:	f007 fed6 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b3e:	0032      	movs	r2, r6
 8007b40:	015b      	lsls	r3, r3, #5
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	3b03      	subs	r3, #3
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	2364      	movs	r3, #100	; 0x64
 8007b4a:	0029      	movs	r1, r5
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	0020      	movs	r0, r4
 8007b50:	4653      	mov	r3, sl
 8007b52:	f007 fec9 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b56:	2390      	movs	r3, #144	; 0x90
 8007b58:	4698      	mov	r8, r3
 8007b5a:	44b8      	add	r8, r7
 8007b5c:	4643      	mov	r3, r8
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	0032      	movs	r2, r6
 8007b62:	9301      	str	r3, [sp, #4]
 8007b64:	23de      	movs	r3, #222	; 0xde
 8007b66:	0029      	movs	r1, r5
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	0020      	movs	r0, r4
 8007b6c:	4653      	mov	r3, sl
 8007b6e:	f007 febb 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b72:	003b      	movs	r3, r7
 8007b74:	338c      	adds	r3, #140	; 0x8c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	0032      	movs	r2, r6
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	23ee      	movs	r3, #238	; 0xee
 8007b7e:	0029      	movs	r1, r5
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	0020      	movs	r0, r4
 8007b84:	4653      	mov	r3, sl
 8007b86:	f007 feaf 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007b8a:	4643      	mov	r3, r8
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	0032      	movs	r2, r6
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	237e      	movs	r3, #126	; 0x7e
 8007b94:	0029      	movs	r1, r5
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	0020      	movs	r0, r4
 8007b9a:	4653      	mov	r3, sl
 8007b9c:	f007 fea4 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007ba0:	003b      	movs	r3, r7
 8007ba2:	3394      	adds	r3, #148	; 0x94
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	0032      	movs	r2, r6
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	23e4      	movs	r3, #228	; 0xe4
 8007bac:	0029      	movs	r1, r5
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	0020      	movs	r0, r4
 8007bb2:	4653      	mov	r3, sl
 8007bb4:	f007 fe98 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007bb8:	003b      	movs	r3, r7
 8007bba:	3398      	adds	r3, #152	; 0x98
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	0032      	movs	r2, r6
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	237c      	movs	r3, #124	; 0x7c
 8007bc4:	0029      	movs	r1, r5
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	0020      	movs	r0, r4
 8007bca:	4653      	mov	r3, sl
 8007bcc:	f007 fe8c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007bd0:	003b      	movs	r3, r7
 8007bd2:	339c      	adds	r3, #156	; 0x9c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	0032      	movs	r2, r6
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	23c9      	movs	r3, #201	; 0xc9
 8007bdc:	0029      	movs	r1, r5
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	0020      	movs	r0, r4
 8007be2:	4653      	mov	r3, sl
 8007be4:	f007 fe80 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007be8:	003b      	movs	r3, r7
 8007bea:	33a0      	adds	r3, #160	; 0xa0
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	0032      	movs	r2, r6
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	2384      	movs	r3, #132	; 0x84
 8007bf4:	0029      	movs	r1, r5
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	0020      	movs	r0, r4
 8007bfa:	4653      	mov	r3, sl
 8007bfc:	f007 fe74 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c00:	003b      	movs	r3, r7
 8007c02:	33a4      	adds	r3, #164	; 0xa4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	0032      	movs	r2, r6
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	237b      	movs	r3, #123	; 0x7b
 8007c0c:	0029      	movs	r1, r5
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	0020      	movs	r0, r4
 8007c12:	4653      	mov	r3, sl
 8007c14:	f007 fe68 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c18:	003b      	movs	r3, r7
 8007c1a:	33a8      	adds	r3, #168	; 0xa8
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	0032      	movs	r2, r6
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	23c7      	movs	r3, #199	; 0xc7
 8007c24:	0029      	movs	r1, r5
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	0020      	movs	r0, r4
 8007c2a:	4653      	mov	r3, sl
 8007c2c:	f007 fe5c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c30:	003b      	movs	r3, r7
 8007c32:	33ac      	adds	r3, #172	; 0xac
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	0032      	movs	r2, r6
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	2383      	movs	r3, #131	; 0x83
 8007c3c:	0029      	movs	r1, r5
 8007c3e:	9300      	str	r3, [sp, #0]
 8007c40:	0020      	movs	r0, r4
 8007c42:	4653      	mov	r3, sl
 8007c44:	f007 fe50 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c48:	003b      	movs	r3, r7
 8007c4a:	33b0      	adds	r3, #176	; 0xb0
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	0032      	movs	r2, r6
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	23c8      	movs	r3, #200	; 0xc8
 8007c54:	0029      	movs	r1, r5
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	0020      	movs	r0, r4
 8007c5a:	4653      	mov	r3, sl
 8007c5c:	f007 fe44 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c60:	003b      	movs	r3, r7
 8007c62:	3370      	adds	r3, #112	; 0x70
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4698      	mov	r8, r3
 8007c68:	4642      	mov	r2, r8
 8007c6a:	23d7      	movs	r3, #215	; 0xd7
 8007c6c:	2a00      	cmp	r2, #0
 8007c6e:	d000      	beq.n	8007c72 <start.lto_priv.124+0x622>
 8007c70:	e07e      	b.n	8007d70 <start.lto_priv.124+0x720>
 8007c72:	3201      	adds	r2, #1
 8007c74:	9201      	str	r2, [sp, #4]
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	0032      	movs	r2, r6
 8007c7a:	4653      	mov	r3, sl
 8007c7c:	0029      	movs	r1, r5
 8007c7e:	0020      	movs	r0, r4
 8007c80:	f007 fe32 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c84:	4643      	mov	r3, r8
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	23d8      	movs	r3, #216	; 0xd8
 8007c8a:	0032      	movs	r2, r6
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	0029      	movs	r1, r5
 8007c90:	4653      	mov	r3, sl
 8007c92:	0020      	movs	r0, r4
 8007c94:	f007 fe28 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c9a:	0032      	movs	r2, r6
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	9301      	str	r3, [sp, #4]
 8007ca0:	23e3      	movs	r3, #227	; 0xe3
 8007ca2:	0029      	movs	r1, r5
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	0020      	movs	r0, r4
 8007ca8:	4653      	mov	r3, sl
 8007caa:	f007 fe1d 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007cae:	4b66      	ldr	r3, [pc, #408]	; (8007e48 <start.lto_priv.124+0x7f8>)
 8007cb0:	0032      	movs	r2, r6
 8007cb2:	4698      	mov	r8, r3
 8007cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007cb6:	0029      	movs	r1, r5
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	23d4      	movs	r3, #212	; 0xd4
 8007cbc:	0020      	movs	r0, r4
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4643      	mov	r3, r8
 8007cc2:	f007 fe11 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc8:	0032      	movs	r2, r6
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	2375      	movs	r3, #117	; 0x75
 8007cce:	0029      	movs	r1, r5
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	0020      	movs	r0, r4
 8007cd4:	4643      	mov	r3, r8
 8007cd6:	f007 fe07 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007cda:	1d3b      	adds	r3, r7, #4
 8007cdc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007cde:	495b      	ldr	r1, [pc, #364]	; (8007e4c <start.lto_priv.124+0x7fc>)
 8007ce0:	f008 fe18 	bl	8010914 <__aeabi_fmul>
 8007ce4:	f009 fb56 	bl	8011394 <__aeabi_f2uiz>
 8007ce8:	23e5      	movs	r3, #229	; 0xe5
 8007cea:	3801      	subs	r0, #1
 8007cec:	b280      	uxth	r0, r0
 8007cee:	9001      	str	r0, [sp, #4]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	0032      	movs	r2, r6
 8007cf4:	4643      	mov	r3, r8
 8007cf6:	0029      	movs	r1, r5
 8007cf8:	0020      	movs	r0, r4
 8007cfa:	f007 fdf5 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007cfe:	2308      	movs	r3, #8
 8007d00:	4699      	mov	r9, r3
 8007d02:	44b9      	add	r9, r7
 8007d04:	464b      	mov	r3, r9
 8007d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d08:	0032      	movs	r2, r6
 8007d0a:	9301      	str	r3, [sp, #4]
 8007d0c:	23d5      	movs	r3, #213	; 0xd5
 8007d0e:	0029      	movs	r1, r5
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	0020      	movs	r0, r4
 8007d14:	4643      	mov	r3, r8
 8007d16:	f007 fde7 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <start.lto_priv.124+0x6ea>
 8007d22:	003b      	movs	r3, r7
 8007d24:	3388      	adds	r3, #136	; 0x88
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	0032      	movs	r2, r6
 8007d2a:	9301      	str	r3, [sp, #4]
 8007d2c:	2371      	movs	r3, #113	; 0x71
 8007d2e:	0029      	movs	r1, r5
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	0020      	movs	r0, r4
 8007d34:	4643      	mov	r3, r8
 8007d36:	f007 fdd7 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007d3a:	466b      	mov	r3, sp
 8007d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d3e:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007d40:	9806      	ldr	r0, [sp, #24]
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	f7fe fcd1 	bl	80066ea <acc_sensor_r2_load_confmem>
 8007d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	4694      	mov	ip, r2
 8007d4e:	4463      	add	r3, ip
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	9a03      	ldr	r2, [sp, #12]
 8007d54:	4b3e      	ldr	r3, [pc, #248]	; (8007e50 <start.lto_priv.124+0x800>)
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d800      	bhi.n	8007d5c <start.lto_priv.124+0x70c>
 8007d5a:	e4c5      	b.n	80076e8 <start.lto_priv.124+0x98>
 8007d5c:	465b      	mov	r3, fp
 8007d5e:	21f4      	movs	r1, #244	; 0xf4
 8007d60:	6818      	ldr	r0, [r3, #0]
 8007d62:	0049      	lsls	r1, r1, #1
 8007d64:	f7fd fca6 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 8007d68:	1e04      	subs	r4, r0, #0
 8007d6a:	d146      	bne.n	8007dfa <start.lto_priv.124+0x7aa>
 8007d6c:	2400      	movs	r4, #0
 8007d6e:	e4ad      	b.n	80076cc <start.lto_priv.124+0x7c>
 8007d70:	2200      	movs	r2, #0
 8007d72:	4690      	mov	r8, r2
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	0032      	movs	r2, r6
 8007d7a:	4653      	mov	r3, sl
 8007d7c:	0029      	movs	r1, r5
 8007d7e:	0020      	movs	r0, r4
 8007d80:	f007 fdb2 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007d84:	2301      	movs	r3, #1
 8007d86:	46c1      	mov	r9, r8
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	33d7      	adds	r3, #215	; 0xd7
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	0032      	movs	r2, r6
 8007d90:	4653      	mov	r3, sl
 8007d92:	0029      	movs	r1, r5
 8007d94:	0020      	movs	r0, r4
 8007d96:	f007 fda7 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	930d      	str	r3, [sp, #52]	; 0x34
 8007da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da2:	0029      	movs	r1, r5
 8007da4:	9304      	str	r3, [sp, #16]
 8007da6:	464b      	mov	r3, r9
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	930c      	str	r3, [sp, #48]	; 0x30
 8007dac:	9b04      	ldr	r3, [sp, #16]
 8007dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007db0:	4599      	cmp	r9, r3
 8007db2:	419b      	sbcs	r3, r3
 8007db4:	425b      	negs	r3, r3
 8007db6:	9301      	str	r3, [sp, #4]
 8007db8:	4b26      	ldr	r3, [pc, #152]	; (8007e54 <start.lto_priv.124+0x804>)
 8007dba:	0020      	movs	r0, r4
 8007dbc:	5a9b      	ldrh	r3, [r3, r2]
 8007dbe:	0032      	movs	r2, r6
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4653      	mov	r3, sl
 8007dc4:	f007 fd90 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007dc8:	9b04      	ldr	r3, [sp, #16]
 8007dca:	4599      	cmp	r9, r3
 8007dcc:	d20b      	bcs.n	8007de6 <start.lto_priv.124+0x796>
 8007dce:	4643      	mov	r3, r8
 8007dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	4b20      	ldr	r3, [pc, #128]	; (8007e58 <start.lto_priv.124+0x808>)
 8007dd6:	0029      	movs	r1, r5
 8007dd8:	5a9b      	ldrh	r3, [r3, r2]
 8007dda:	0020      	movs	r0, r4
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	0032      	movs	r2, r6
 8007de0:	4653      	mov	r3, sl
 8007de2:	f007 fd81 	bl	800f8e8 <acc_confprogram_patch_offset>
 8007de6:	2301      	movs	r3, #1
 8007de8:	469c      	mov	ip, r3
 8007dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dec:	44e1      	add	r9, ip
 8007dee:	469c      	mov	ip, r3
 8007df0:	464b      	mov	r3, r9
 8007df2:	44e0      	add	r8, ip
 8007df4:	2b40      	cmp	r3, #64	; 0x40
 8007df6:	d1d3      	bne.n	8007da0 <start.lto_priv.124+0x750>
 8007df8:	e759      	b.n	8007cae <start.lto_priv.124+0x65e>
 8007dfa:	9b07      	ldr	r3, [sp, #28]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d100      	bne.n	8007e02 <start.lto_priv.124+0x7b2>
 8007e00:	e464      	b.n	80076cc <start.lto_priv.124+0x7c>
 8007e02:	465b      	mov	r3, fp
 8007e04:	6919      	ldr	r1, [r3, #16]
 8007e06:	6818      	ldr	r0, [r3, #0]
 8007e08:	f7fa fde2 	bl	80029d0 <acc_sensor_protocol_r2_wait_for_sync_start>
 8007e0c:	1e05      	subs	r5, r0, #0
 8007e0e:	d0ad      	beq.n	8007d6c <start.lto_priv.124+0x71c>
 8007e10:	4b12      	ldr	r3, [pc, #72]	; (8007e5c <start.lto_priv.124+0x80c>)
 8007e12:	001a      	movs	r2, r3
 8007e14:	3230      	adds	r2, #48	; 0x30
 8007e16:	7812      	ldrb	r2, [r2, #0]
 8007e18:	2a01      	cmp	r2, #1
 8007e1a:	d904      	bls.n	8007e26 <start.lto_priv.124+0x7d6>
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	4a10      	ldr	r2, [pc, #64]	; (8007e60 <start.lto_priv.124+0x810>)
 8007e20:	4910      	ldr	r1, [pc, #64]	; (8007e64 <start.lto_priv.124+0x814>)
 8007e22:	2002      	movs	r0, #2
 8007e24:	4798      	blx	r3
 8007e26:	9b08      	ldr	r3, [sp, #32]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d100      	bne.n	8007e2e <start.lto_priv.124+0x7de>
 8007e2c:	e44e      	b.n	80076cc <start.lto_priv.124+0x7c>
 8007e2e:	4658      	mov	r0, fp
 8007e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e32:	4642      	mov	r2, r8
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	490b      	ldr	r1, [pc, #44]	; (8007e68 <start.lto_priv.124+0x818>)
 8007e3a:	23ef      	movs	r3, #239	; 0xef
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f004 ffb7 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8007e42:	002c      	movs	r4, r5
 8007e44:	e442      	b.n	80076cc <start.lto_priv.124+0x7c>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	08017c3c 	.word	0x08017c3c
 8007e4c:	3751b717 	.word	0x3751b717
 8007e50:	00000769 	.word	0x00000769
 8007e54:	08017bbc 	.word	0x08017bbc
 8007e58:	08017b3c 	.word	0x08017b3c
 8007e5c:	200005d0 	.word	0x200005d0
 8007e60:	0801daa3 	.word	0x0801daa3
 8007e64:	0801dd1a 	.word	0x0801dd1a
 8007e68:	080193c4 	.word	0x080193c4

08007e6c <acc_rss_integration_get_sensor_reference_frequency>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	4798      	blx	r3
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	200005d0 	.word	0x200005d0

08007e7c <acc_radar_engine_common_frequency_to_main_clk>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	1c06      	adds	r6, r0, #0
 8007e80:	0015      	movs	r5, r2
 8007e82:	000c      	movs	r4, r1
 8007e84:	f7ff fff2 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 8007e88:	1c31      	adds	r1, r6, #0
 8007e8a:	f008 fc31 	bl	80106f0 <__aeabi_fdiv>
 8007e8e:	f009 fa81 	bl	8011394 <__aeabi_f2uiz>
 8007e92:	0c03      	lsrs	r3, r0, #16
 8007e94:	b280      	uxth	r0, r0
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	6020      	str	r0, [r4, #0]
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}

08007e9c <calculate_pll_divisors.lto_priv.125>:
 8007e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e9e:	0005      	movs	r5, r0
 8007ea0:	f7ff ffe4 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 8007ea4:	1c01      	adds	r1, r0, #0
 8007ea6:	1c06      	adds	r6, r0, #0
 8007ea8:	4830      	ldr	r0, [pc, #192]	; (8007f6c <calculate_pll_divisors.lto_priv.125+0xd0>)
 8007eaa:	f008 fc21 	bl	80106f0 <__aeabi_fdiv>
 8007eae:	21fc      	movs	r1, #252	; 0xfc
 8007eb0:	0589      	lsls	r1, r1, #22
 8007eb2:	f008 fa83 	bl	80103bc <__aeabi_fadd>
 8007eb6:	f009 fa6d 	bl	8011394 <__aeabi_f2uiz>
 8007eba:	492d      	ldr	r1, [pc, #180]	; (8007f70 <calculate_pll_divisors.lto_priv.125+0xd4>)
 8007ebc:	b284      	uxth	r4, r0
 8007ebe:	1c30      	adds	r0, r6, #0
 8007ec0:	f008 fe5a 	bl	8010b78 <__aeabi_fsub>
 8007ec4:	492b      	ldr	r1, [pc, #172]	; (8007f74 <calculate_pll_divisors.lto_priv.125+0xd8>)
 8007ec6:	f008 fd25 	bl	8010914 <__aeabi_fmul>
 8007eca:	492b      	ldr	r1, [pc, #172]	; (8007f78 <calculate_pll_divisors.lto_priv.125+0xdc>)
 8007ecc:	f008 fa76 	bl	80103bc <__aeabi_fadd>
 8007ed0:	f009 fa60 	bl	8011394 <__aeabi_f2uiz>
 8007ed4:	0023      	movs	r3, r4
 8007ed6:	3b10      	subs	r3, #16
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8128      	strh	r0, [r5, #8]
 8007edc:	2bef      	cmp	r3, #239	; 0xef
 8007ede:	d92b      	bls.n	8007f38 <calculate_pll_divisors.lto_priv.125+0x9c>
 8007ee0:	4b26      	ldr	r3, [pc, #152]	; (8007f7c <calculate_pll_divisors.lto_priv.125+0xe0>)
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	1c30      	adds	r0, r6, #0
 8007ee6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8007ee8:	f009 fa0c 	bl	8011304 <__aeabi_fcmplt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	d01f      	beq.n	8007f30 <calculate_pll_divisors.lto_priv.125+0x94>
 8007ef0:	4c23      	ldr	r4, [pc, #140]	; (8007f80 <calculate_pll_divisors.lto_priv.125+0xe4>)
 8007ef2:	4924      	ldr	r1, [pc, #144]	; (8007f84 <calculate_pll_divisors.lto_priv.125+0xe8>)
 8007ef4:	1c30      	adds	r0, r6, #0
 8007ef6:	f008 fd0d 	bl	8010914 <__aeabi_fmul>
 8007efa:	4923      	ldr	r1, [pc, #140]	; (8007f88 <calculate_pll_divisors.lto_priv.125+0xec>)
 8007efc:	f008 fa5e 	bl	80103bc <__aeabi_fadd>
 8007f00:	1c06      	adds	r6, r0, #0
 8007f02:	f009 fa47 	bl	8011394 <__aeabi_f2uiz>
 8007f06:	0005      	movs	r5, r0
 8007f08:	f009 fc64 	bl	80117d4 <__aeabi_ui2f>
 8007f0c:	1c01      	adds	r1, r0, #0
 8007f0e:	1c30      	adds	r0, r6, #0
 8007f10:	f008 fe32 	bl	8010b78 <__aeabi_fsub>
 8007f14:	491d      	ldr	r1, [pc, #116]	; (8007f8c <calculate_pll_divisors.lto_priv.125+0xf0>)
 8007f16:	f008 fcfd 	bl	8010914 <__aeabi_fmul>
 8007f1a:	f009 fa3b 	bl	8011394 <__aeabi_f2uiz>
 8007f1e:	9500      	str	r5, [sp, #0]
 8007f20:	9001      	str	r0, [sp, #4]
 8007f22:	0023      	movs	r3, r4
 8007f24:	2000      	movs	r0, #0
 8007f26:	4a1a      	ldr	r2, [pc, #104]	; (8007f90 <calculate_pll_divisors.lto_priv.125+0xf4>)
 8007f28:	491a      	ldr	r1, [pc, #104]	; (8007f94 <calculate_pll_divisors.lto_priv.125+0xf8>)
 8007f2a:	47b8      	blx	r7
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f30:	21fe      	movs	r1, #254	; 0xfe
 8007f32:	4c19      	ldr	r4, [pc, #100]	; (8007f98 <calculate_pll_divisors.lto_priv.125+0xfc>)
 8007f34:	0589      	lsls	r1, r1, #22
 8007f36:	e7dd      	b.n	8007ef4 <calculate_pll_divisors.lto_priv.125+0x58>
 8007f38:	2c3f      	cmp	r4, #63	; 0x3f
 8007f3a:	d809      	bhi.n	8007f50 <calculate_pll_divisors.lto_priv.125+0xb4>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	806a      	strh	r2, [r5, #2]
 8007f40:	2c2f      	cmp	r4, #47	; 0x2f
 8007f42:	d900      	bls.n	8007f46 <calculate_pll_divisors.lto_priv.125+0xaa>
 8007f44:	0023      	movs	r3, r4
 8007f46:	80ab      	strh	r3, [r5, #4]
 8007f48:	80ea      	strh	r2, [r5, #6]
 8007f4a:	802c      	strh	r4, [r5, #0]
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	e7ee      	b.n	8007f2e <calculate_pll_divisors.lto_priv.125+0x92>
 8007f50:	2301      	movs	r3, #1
 8007f52:	806b      	strh	r3, [r5, #2]
 8007f54:	08e3      	lsrs	r3, r4, #3
 8007f56:	2cbf      	cmp	r4, #191	; 0xbf
 8007f58:	d803      	bhi.n	8007f62 <calculate_pll_divisors.lto_priv.125+0xc6>
 8007f5a:	0023      	movs	r3, r4
 8007f5c:	3b40      	subs	r3, #64	; 0x40
 8007f5e:	10db      	asrs	r3, r3, #3
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	80ab      	strh	r3, [r5, #4]
 8007f64:	2307      	movs	r3, #7
 8007f66:	4023      	ands	r3, r4
 8007f68:	80eb      	strh	r3, [r5, #6]
 8007f6a:	e7ee      	b.n	8007f4a <calculate_pll_divisors.lto_priv.125+0xae>
 8007f6c:	4f1502f9 	.word	0x4f1502f9
 8007f70:	4b989680 	.word	0x4b989680
 8007f74:	b55b38e8 	.word	0xb55b38e8
 8007f78:	427c0000 	.word	0x427c0000
 8007f7c:	200005d0 	.word	0x200005d0
 8007f80:	0801ef74 	.word	0x0801ef74
 8007f84:	bf800000 	.word	0xbf800000
 8007f88:	350637bd 	.word	0x350637bd
 8007f8c:	49742400 	.word	0x49742400
 8007f90:	0801dd2e 	.word	0x0801dd2e
 8007f94:	0801dd59 	.word	0x0801dd59
 8007f98:	0801ee9f 	.word	0x0801ee9f

08007f9c <set_calibration_context.lto_priv.114>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	680b      	ldr	r3, [r1, #0]
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	0004      	movs	r4, r0
 8007fa4:	000e      	movs	r6, r1
 8007fa6:	2b06      	cmp	r3, #6
 8007fa8:	d00a      	beq.n	8007fc0 <set_calibration_context.lto_priv.114+0x24>
 8007faa:	2206      	movs	r2, #6
 8007fac:	9200      	str	r2, [sp, #0]
 8007fae:	4a0e      	ldr	r2, [pc, #56]	; (8007fe8 <set_calibration_context.lto_priv.114+0x4c>)
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007fb4:	490d      	ldr	r1, [pc, #52]	; (8007fec <set_calibration_context.lto_priv.114+0x50>)
 8007fb6:	4a0e      	ldr	r2, [pc, #56]	; (8007ff0 <set_calibration_context.lto_priv.114+0x54>)
 8007fb8:	47a0      	blx	r4
 8007fba:	2000      	movs	r0, #0
 8007fbc:	b006      	add	sp, #24
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	ad03      	add	r5, sp, #12
 8007fc2:	0028      	movs	r0, r5
 8007fc4:	f7ff ff6a 	bl	8007e9c <calculate_pll_divisors.lto_priv.125>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d0f7      	beq.n	8007fbc <set_calibration_context.lto_priv.114+0x20>
 8007fcc:	88ab      	ldrh	r3, [r5, #4]
 8007fce:	6063      	str	r3, [r4, #4]
 8007fd0:	88eb      	ldrh	r3, [r5, #6]
 8007fd2:	60a3      	str	r3, [r4, #8]
 8007fd4:	886b      	ldrh	r3, [r5, #2]
 8007fd6:	6023      	str	r3, [r4, #0]
 8007fd8:	892b      	ldrh	r3, [r5, #8]
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	88b3      	ldrh	r3, [r6, #4]
 8007fde:	6123      	str	r3, [r4, #16]
 8007fe0:	88f3      	ldrh	r3, [r6, #6]
 8007fe2:	6163      	str	r3, [r4, #20]
 8007fe4:	e7ea      	b.n	8007fbc <set_calibration_context.lto_priv.114+0x20>
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	200005d0 	.word	0x200005d0
 8007fec:	0801dd1a 	.word	0x0801dd1a
 8007ff0:	0801dd6a 	.word	0x0801dd6a

08007ff4 <calibrate.lto_priv.128>:
 8007ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ff6:	b08b      	sub	sp, #44	; 0x2c
 8007ff8:	ac02      	add	r4, sp, #8
 8007ffa:	6807      	ldr	r7, [r0, #0]
 8007ffc:	0020      	movs	r0, r4
 8007ffe:	000e      	movs	r6, r1
 8008000:	0015      	movs	r5, r2
 8008002:	f7ff ff4b 	bl	8007e9c <calculate_pll_divisors.lto_priv.125>
 8008006:	2800      	cmp	r0, #0
 8008008:	d103      	bne.n	8008012 <calibrate.lto_priv.128+0x1e>
 800800a:	2400      	movs	r4, #0
 800800c:	0020      	movs	r0, r4
 800800e:	b00b      	add	sp, #44	; 0x2c
 8008010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008012:	9705      	str	r7, [sp, #20]
 8008014:	8863      	ldrh	r3, [r4, #2]
 8008016:	aa05      	add	r2, sp, #20
 8008018:	6053      	str	r3, [r2, #4]
 800801a:	88a3      	ldrh	r3, [r4, #4]
 800801c:	ce03      	ldmia	r6!, {r0, r1}
 800801e:	6093      	str	r3, [r2, #8]
 8008020:	88e3      	ldrh	r3, [r4, #6]
 8008022:	60d3      	str	r3, [r2, #12]
 8008024:	8923      	ldrh	r3, [r4, #8]
 8008026:	8213      	strh	r3, [r2, #16]
 8008028:	466b      	mov	r3, sp
 800802a:	f7ff f951 	bl	80072d0 <acc_cpd_cbank_and_vana_calibration>
 800802e:	1e04      	subs	r4, r0, #0
 8008030:	d0eb      	beq.n	800800a <calibrate.lto_priv.128+0x16>
 8008032:	9b00      	ldr	r3, [sp, #0]
 8008034:	80ab      	strh	r3, [r5, #4]
 8008036:	466b      	mov	r3, sp
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	80eb      	strh	r3, [r5, #6]
 800803c:	2306      	movs	r3, #6
 800803e:	602b      	str	r3, [r5, #0]
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <calibrate.lto_priv.128+0x64>)
 8008042:	001a      	movs	r2, r3
 8008044:	3230      	adds	r2, #48	; 0x30
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	2a01      	cmp	r2, #1
 800804a:	d9df      	bls.n	800800c <calibrate.lto_priv.128+0x18>
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	4a03      	ldr	r2, [pc, #12]	; (800805c <calibrate.lto_priv.128+0x68>)
 8008050:	4903      	ldr	r1, [pc, #12]	; (8008060 <calibrate.lto_priv.128+0x6c>)
 8008052:	2002      	movs	r0, #2
 8008054:	4798      	blx	r3
 8008056:	e7d9      	b.n	800800c <calibrate.lto_priv.128+0x18>
 8008058:	200005d0 	.word	0x200005d0
 800805c:	0801dda8 	.word	0x0801dda8
 8008060:	0801dd1a 	.word	0x0801dd1a

08008064 <set_calibration_context.lto_priv.113>:
 8008064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008066:	680b      	ldr	r3, [r1, #0]
 8008068:	b087      	sub	sp, #28
 800806a:	0004      	movs	r4, r0
 800806c:	000d      	movs	r5, r1
 800806e:	2b06      	cmp	r3, #6
 8008070:	d00b      	beq.n	800808a <set_calibration_context.lto_priv.113+0x26>
 8008072:	2206      	movs	r2, #6
 8008074:	9200      	str	r2, [sp, #0]
 8008076:	4a22      	ldr	r2, [pc, #136]	; (8008100 <set_calibration_context.lto_priv.113+0x9c>)
 8008078:	4922      	ldr	r1, [pc, #136]	; (8008104 <set_calibration_context.lto_priv.113+0xa0>)
 800807a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800807c:	2000      	movs	r0, #0
 800807e:	4a22      	ldr	r2, [pc, #136]	; (8008108 <set_calibration_context.lto_priv.113+0xa4>)
 8008080:	47a0      	blx	r4
 8008082:	2700      	movs	r7, #0
 8008084:	0038      	movs	r0, r7
 8008086:	b007      	add	sp, #28
 8008088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808a:	ae03      	add	r6, sp, #12
 800808c:	0030      	movs	r0, r6
 800808e:	f7ff ff05 	bl	8007e9c <calculate_pll_divisors.lto_priv.125>
 8008092:	1e07      	subs	r7, r0, #0
 8008094:	d0f6      	beq.n	8008084 <set_calibration_context.lto_priv.113+0x20>
 8008096:	88b3      	ldrh	r3, [r6, #4]
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	88f3      	ldrh	r3, [r6, #6]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	8873      	ldrh	r3, [r6, #2]
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	8933      	ldrh	r3, [r6, #8]
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	88ab      	ldrh	r3, [r5, #4]
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	88eb      	ldrh	r3, [r5, #6]
 80080ac:	6163      	str	r3, [r4, #20]
 80080ae:	892b      	ldrh	r3, [r5, #8]
 80080b0:	61a3      	str	r3, [r4, #24]
 80080b2:	896b      	ldrh	r3, [r5, #10]
 80080b4:	61e3      	str	r3, [r4, #28]
 80080b6:	89ab      	ldrh	r3, [r5, #12]
 80080b8:	6223      	str	r3, [r4, #32]
 80080ba:	8a2b      	ldrh	r3, [r5, #16]
 80080bc:	84a3      	strh	r3, [r4, #36]	; 0x24
 80080be:	8a6b      	ldrh	r3, [r5, #18]
 80080c0:	84e3      	strh	r3, [r4, #38]	; 0x26
 80080c2:	89ed      	ldrh	r5, [r5, #14]
 80080c4:	00ad      	lsls	r5, r5, #2
 80080c6:	b2ad      	uxth	r5, r5
 80080c8:	0028      	movs	r0, r5
 80080ca:	303e      	adds	r0, #62	; 0x3e
 80080cc:	b280      	uxth	r0, r0
 80080ce:	287b      	cmp	r0, #123	; 0x7b
 80080d0:	d912      	bls.n	80080f8 <set_calibration_context.lto_priv.113+0x94>
 80080d2:	217c      	movs	r1, #124	; 0x7c
 80080d4:	f008 ffd6 	bl	8011084 <__aeabi_uidivmod>
 80080d8:	2200      	movs	r2, #0
 80080da:	0028      	movs	r0, r5
 80080dc:	2301      	movs	r3, #1
 80080de:	b28d      	uxth	r5, r1
 80080e0:	0011      	movs	r1, r2
 80080e2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80080e4:	6323      	str	r3, [r4, #48]	; 0x30
 80080e6:	2003      	movs	r0, #3
 80080e8:	6423      	str	r3, [r4, #64]	; 0x40
 80080ea:	2300      	movs	r3, #0
 80080ec:	62a5      	str	r5, [r4, #40]	; 0x28
 80080ee:	6360      	str	r0, [r4, #52]	; 0x34
 80080f0:	63a1      	str	r1, [r4, #56]	; 0x38
 80080f2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80080f4:	6463      	str	r3, [r4, #68]	; 0x44
 80080f6:	e7c5      	b.n	8008084 <set_calibration_context.lto_priv.113+0x20>
 80080f8:	2203      	movs	r2, #3
 80080fa:	2101      	movs	r1, #1
 80080fc:	2300      	movs	r3, #0
 80080fe:	e7f0      	b.n	80080e2 <set_calibration_context.lto_priv.113+0x7e>
 8008100:	200005d0 	.word	0x200005d0
 8008104:	0801da75 	.word	0x0801da75
 8008108:	0801dd6a 	.word	0x0801dd6a

0800810c <get_pll_freq>:
 800810c:	b510      	push	{r4, lr}
 800810e:	f7ff fead 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 8008112:	1c01      	adds	r1, r0, #0
 8008114:	1c04      	adds	r4, r0, #0
 8008116:	4805      	ldr	r0, [pc, #20]	; (800812c <get_pll_freq+0x20>)
 8008118:	f008 faea 	bl	80106f0 <__aeabi_fdiv>
 800811c:	f00b fe94 	bl	8013e48 <roundf>
 8008120:	1c01      	adds	r1, r0, #0
 8008122:	1c20      	adds	r0, r4, #0
 8008124:	f008 fbf6 	bl	8010914 <__aeabi_fmul>
 8008128:	bd10      	pop	{r4, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	4f1502f9 	.word	0x4f1502f9

08008130 <points_to_meter.lto_priv.129>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	0004      	movs	r4, r0
 8008134:	f7ff ffea 	bl	800810c <get_pll_freq>
 8008138:	1c05      	adds	r5, r0, #0
 800813a:	0020      	movs	r0, r4
 800813c:	f009 fb00 	bl	8011740 <__aeabi_i2f>
 8008140:	1c04      	adds	r4, r0, #0
 8008142:	20fe      	movs	r0, #254	; 0xfe
 8008144:	1c29      	adds	r1, r5, #0
 8008146:	0580      	lsls	r0, r0, #22
 8008148:	f008 fad2 	bl	80106f0 <__aeabi_fdiv>
 800814c:	1c01      	adds	r1, r0, #0
 800814e:	1c20      	adds	r0, r4, #0
 8008150:	f008 fbe0 	bl	8010914 <__aeabi_fmul>
 8008154:	4903      	ldr	r1, [pc, #12]	; (8008164 <points_to_meter.lto_priv.129+0x34>)
 8008156:	f008 fbdd 	bl	8010914 <__aeabi_fmul>
 800815a:	21fc      	movs	r1, #252	; 0xfc
 800815c:	0589      	lsls	r1, r1, #22
 800815e:	f008 fbd9 	bl	8010914 <__aeabi_fmul>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	4d8ef3c2 	.word	0x4d8ef3c2

08008168 <meter_to_points.lto_priv.133>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	1c04      	adds	r4, r0, #0
 800816c:	f7ff ffce 	bl	800810c <get_pll_freq>
 8008170:	1c21      	adds	r1, r4, #0
 8008172:	1c06      	adds	r6, r0, #0
 8008174:	1c20      	adds	r0, r4, #0
 8008176:	f008 f921 	bl	80103bc <__aeabi_fadd>
 800817a:	1c05      	adds	r5, r0, #0
 800817c:	20fe      	movs	r0, #254	; 0xfe
 800817e:	1c31      	adds	r1, r6, #0
 8008180:	0580      	lsls	r0, r0, #22
 8008182:	f008 fab5 	bl	80106f0 <__aeabi_fdiv>
 8008186:	490c      	ldr	r1, [pc, #48]	; (80081b8 <meter_to_points.lto_priv.133+0x50>)
 8008188:	f008 fbc4 	bl	8010914 <__aeabi_fmul>
 800818c:	1c01      	adds	r1, r0, #0
 800818e:	1c28      	adds	r0, r5, #0
 8008190:	f008 faae 	bl	80106f0 <__aeabi_fdiv>
 8008194:	2100      	movs	r1, #0
 8008196:	1c05      	adds	r5, r0, #0
 8008198:	1c20      	adds	r0, r4, #0
 800819a:	f009 f8b3 	bl	8011304 <__aeabi_fcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d107      	bne.n	80081b2 <meter_to_points.lto_priv.133+0x4a>
 80081a2:	21fc      	movs	r1, #252	; 0xfc
 80081a4:	0589      	lsls	r1, r1, #22
 80081a6:	1c28      	adds	r0, r5, #0
 80081a8:	f008 f908 	bl	80103bc <__aeabi_fadd>
 80081ac:	f009 faa8 	bl	8011700 <__aeabi_f2iz>
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	21bf      	movs	r1, #191	; 0xbf
 80081b4:	0609      	lsls	r1, r1, #24
 80081b6:	e7f6      	b.n	80081a6 <meter_to_points.lto_priv.133+0x3e>
 80081b8:	4d8ef3c2 	.word	0x4d8ef3c2

080081bc <initialize.lto_priv.136>:
 80081bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081be:	4657      	mov	r7, sl
 80081c0:	46de      	mov	lr, fp
 80081c2:	464e      	mov	r6, r9
 80081c4:	4645      	mov	r5, r8
 80081c6:	b5e0      	push	{r5, r6, r7, lr}
 80081c8:	000f      	movs	r7, r1
 80081ca:	b09d      	sub	sp, #116	; 0x74
 80081cc:	3732      	adds	r7, #50	; 0x32
 80081ce:	9308      	str	r3, [sp, #32]
 80081d0:	783b      	ldrb	r3, [r7, #0]
 80081d2:	4683      	mov	fp, r0
 80081d4:	000e      	movs	r6, r1
 80081d6:	4692      	mov	sl, r2
 80081d8:	2b06      	cmp	r3, #6
 80081da:	d00f      	beq.n	80081fc <initialize.lto_priv.136+0x40>
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d00d      	beq.n	80081fc <initialize.lto_priv.136+0x40>
 80081e0:	4bb7      	ldr	r3, [pc, #732]	; (80084c0 <initialize.lto_priv.136+0x304>)
 80081e2:	2000      	movs	r0, #0
 80081e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e6:	4ab7      	ldr	r2, [pc, #732]	; (80084c4 <initialize.lto_priv.136+0x308>)
 80081e8:	49b7      	ldr	r1, [pc, #732]	; (80084c8 <initialize.lto_priv.136+0x30c>)
 80081ea:	4798      	blx	r3
 80081ec:	2000      	movs	r0, #0
 80081ee:	b01d      	add	sp, #116	; 0x74
 80081f0:	bc3c      	pop	{r2, r3, r4, r5}
 80081f2:	4690      	mov	r8, r2
 80081f4:	4699      	mov	r9, r3
 80081f6:	46a2      	mov	sl, r4
 80081f8:	46ab      	mov	fp, r5
 80081fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081fc:	465b      	mov	r3, fp
 80081fe:	0030      	movs	r0, r6
 8008200:	695d      	ldr	r5, [r3, #20]
 8008202:	f7f8 fce1 	bl	8000bc8 <configuration_is_valid>
 8008206:	2800      	cmp	r0, #0
 8008208:	d040      	beq.n	800828c <initialize.lto_priv.136+0xd0>
 800820a:	0033      	movs	r3, r6
 800820c:	332c      	adds	r3, #44	; 0x2c
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d03b      	beq.n	800828c <initialize.lto_priv.136+0xd0>
 8008214:	0030      	movs	r0, r6
 8008216:	f7f8 fcd7 	bl	8000bc8 <configuration_is_valid>
 800821a:	2400      	movs	r4, #0
 800821c:	42a0      	cmp	r0, r4
 800821e:	d001      	beq.n	8008224 <initialize.lto_priv.136+0x68>
 8008220:	2334      	movs	r3, #52	; 0x34
 8008222:	5ef4      	ldrsh	r4, [r6, r3]
 8008224:	b223      	sxth	r3, r4
 8008226:	0030      	movs	r0, r6
 8008228:	9307      	str	r3, [sp, #28]
 800822a:	f7f8 fccd 	bl	8000bc8 <configuration_is_valid>
 800822e:	2300      	movs	r3, #0
 8008230:	b2a4      	uxth	r4, r4
 8008232:	4298      	cmp	r0, r3
 8008234:	d001      	beq.n	800823a <initialize.lto_priv.136+0x7e>
 8008236:	2236      	movs	r2, #54	; 0x36
 8008238:	5eb3      	ldrsh	r3, [r6, r2]
 800823a:	18e4      	adds	r4, r4, r3
 800823c:	b223      	sxth	r3, r4
 800823e:	4698      	mov	r8, r3
 8008240:	0030      	movs	r0, r6
 8008242:	f7f8 fcf7 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008246:	4643      	mov	r3, r8
 8008248:	9a07      	ldr	r2, [sp, #28]
 800824a:	0001      	movs	r1, r0
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	0018      	movs	r0, r3
 8008250:	f009 f802 	bl	8011258 <__aeabi_idivmod>
 8008254:	1e0c      	subs	r4, r1, #0
 8008256:	dd0e      	ble.n	8008276 <initialize.lto_priv.136+0xba>
 8008258:	4b99      	ldr	r3, [pc, #612]	; (80084c0 <initialize.lto_priv.136+0x304>)
 800825a:	001a      	movs	r2, r3
 800825c:	3230      	adds	r2, #48	; 0x30
 800825e:	7812      	ldrb	r2, [r2, #0]
 8008260:	2a01      	cmp	r2, #1
 8008262:	d904      	bls.n	800826e <initialize.lto_priv.136+0xb2>
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	4a99      	ldr	r2, [pc, #612]	; (80084cc <initialize.lto_priv.136+0x310>)
 8008268:	4997      	ldr	r1, [pc, #604]	; (80084c8 <initialize.lto_priv.136+0x30c>)
 800826a:	2002      	movs	r0, #2
 800826c:	4798      	blx	r3
 800826e:	4643      	mov	r3, r8
 8008270:	1b1c      	subs	r4, r3, r4
 8008272:	b223      	sxth	r3, r4
 8008274:	4698      	mov	r8, r3
 8008276:	9b07      	ldr	r3, [sp, #28]
 8008278:	4598      	cmp	r8, r3
 800827a:	da28      	bge.n	80082ce <initialize.lto_priv.136+0x112>
 800827c:	4b90      	ldr	r3, [pc, #576]	; (80084c0 <initialize.lto_priv.136+0x304>)
 800827e:	2000      	movs	r0, #0
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	4a93      	ldr	r2, [pc, #588]	; (80084d0 <initialize.lto_priv.136+0x314>)
 8008284:	4990      	ldr	r1, [pc, #576]	; (80084c8 <initialize.lto_priv.136+0x30c>)
 8008286:	4798      	blx	r3
 8008288:	2000      	movs	r0, #0
 800828a:	e7b0      	b.n	80081ee <initialize.lto_priv.136+0x32>
 800828c:	0030      	movs	r0, r6
 800828e:	f7f8 fc9b 	bl	8000bc8 <configuration_is_valid>
 8008292:	2800      	cmp	r0, #0
 8008294:	d016      	beq.n	80082c4 <initialize.lto_priv.136+0x108>
 8008296:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008298:	4698      	mov	r8, r3
 800829a:	0030      	movs	r0, r6
 800829c:	f7f8 fc94 	bl	8000bc8 <configuration_is_valid>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d012      	beq.n	80082ca <initialize.lto_priv.136+0x10e>
 80082a4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80082a6:	4641      	mov	r1, r8
 80082a8:	f008 f888 	bl	80103bc <__aeabi_fadd>
 80082ac:	1c04      	adds	r4, r0, #0
 80082ae:	4640      	mov	r0, r8
 80082b0:	f7ff ff5a 	bl	8008168 <meter_to_points.lto_priv.133>
 80082b4:	b203      	sxth	r3, r0
 80082b6:	1c20      	adds	r0, r4, #0
 80082b8:	9307      	str	r3, [sp, #28]
 80082ba:	f7ff ff55 	bl	8008168 <meter_to_points.lto_priv.133>
 80082be:	b203      	sxth	r3, r0
 80082c0:	4698      	mov	r8, r3
 80082c2:	e7bd      	b.n	8008240 <initialize.lto_priv.136+0x84>
 80082c4:	2300      	movs	r3, #0
 80082c6:	4698      	mov	r8, r3
 80082c8:	e7e7      	b.n	800829a <initialize.lto_priv.136+0xde>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e7eb      	b.n	80082a6 <initialize.lto_priv.136+0xea>
 80082ce:	0030      	movs	r0, r6
 80082d0:	f7f8 fc7a 	bl	8000bc8 <configuration_is_valid>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d005      	beq.n	80082e4 <initialize.lto_priv.136+0x128>
 80082d8:	0033      	movs	r3, r6
 80082da:	336e      	adds	r3, #110	; 0x6e
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d000      	beq.n	80082e4 <initialize.lto_priv.136+0x128>
 80082e2:	e1d7      	b.n	8008694 <initialize.lto_priv.136+0x4d8>
 80082e4:	0033      	movs	r3, r6
 80082e6:	332e      	adds	r3, #46	; 0x2e
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d100      	bne.n	80082f0 <initialize.lto_priv.136+0x134>
 80082ee:	e0d2      	b.n	8008496 <initialize.lto_priv.136+0x2da>
 80082f0:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 80082f2:	b213      	sxth	r3, r2
 80082f4:	3b01      	subs	r3, #1
 80082f6:	2007      	movs	r0, #7
 80082f8:	015b      	lsls	r3, r3, #5
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	0019      	movs	r1, r3
 80082fe:	0152      	lsls	r2, r2, #5
 8008300:	3a1a      	subs	r2, #26
 8008302:	b212      	sxth	r2, r2
 8008304:	17d4      	asrs	r4, r2, #31
 8008306:	4004      	ands	r4, r0
 8008308:	18a2      	adds	r2, r4, r2
 800830a:	10d2      	asrs	r2, r2, #3
 800830c:	00d2      	lsls	r2, r2, #3
 800830e:	390f      	subs	r1, #15
 8008310:	1a8c      	subs	r4, r1, r2
 8008312:	9a07      	ldr	r2, [sp, #28]
 8008314:	b224      	sxth	r4, r4
 8008316:	4294      	cmp	r4, r2
 8008318:	dc00      	bgt.n	800831c <initialize.lto_priv.136+0x160>
 800831a:	e0e7      	b.n	80084ec <initialize.lto_priv.136+0x330>
 800831c:	4b68      	ldr	r3, [pc, #416]	; (80084c0 <initialize.lto_priv.136+0x304>)
 800831e:	0010      	movs	r0, r2
 8008320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008322:	9308      	str	r3, [sp, #32]
 8008324:	f7ff ff04 	bl	8008130 <points_to_meter.lto_priv.129>
 8008328:	2100      	movs	r1, #0
 800832a:	f008 ffeb 	bl	8011304 <__aeabi_fcmplt>
 800832e:	4d69      	ldr	r5, [pc, #420]	; (80084d4 <initialize.lto_priv.136+0x318>)
 8008330:	2800      	cmp	r0, #0
 8008332:	d100      	bne.n	8008336 <initialize.lto_priv.136+0x17a>
 8008334:	4d68      	ldr	r5, [pc, #416]	; (80084d8 <initialize.lto_priv.136+0x31c>)
 8008336:	9807      	ldr	r0, [sp, #28]
 8008338:	f7ff fefa 	bl	8008130 <points_to_meter.lto_priv.129>
 800833c:	1c06      	adds	r6, r0, #0
 800833e:	9807      	ldr	r0, [sp, #28]
 8008340:	f7ff fef6 	bl	8008130 <points_to_meter.lto_priv.129>
 8008344:	2100      	movs	r1, #0
 8008346:	f008 ffdd 	bl	8011304 <__aeabi_fcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	d100      	bne.n	8008350 <initialize.lto_priv.136+0x194>
 800834e:	e0a4      	b.n	800849a <initialize.lto_priv.136+0x2de>
 8008350:	4962      	ldr	r1, [pc, #392]	; (80084dc <initialize.lto_priv.136+0x320>)
 8008352:	1c30      	adds	r0, r6, #0
 8008354:	f008 fade 	bl	8010914 <__aeabi_fmul>
 8008358:	4961      	ldr	r1, [pc, #388]	; (80084e0 <initialize.lto_priv.136+0x324>)
 800835a:	f008 f82f 	bl	80103bc <__aeabi_fadd>
 800835e:	f009 f819 	bl	8011394 <__aeabi_f2uiz>
 8008362:	0007      	movs	r7, r0
 8008364:	9807      	ldr	r0, [sp, #28]
 8008366:	f7ff fee3 	bl	8008130 <points_to_meter.lto_priv.129>
 800836a:	1c06      	adds	r6, r0, #0
 800836c:	9807      	ldr	r0, [sp, #28]
 800836e:	f7ff fedf 	bl	8008130 <points_to_meter.lto_priv.129>
 8008372:	2100      	movs	r1, #0
 8008374:	f008 ffc6 	bl	8011304 <__aeabi_fcmplt>
 8008378:	2800      	cmp	r0, #0
 800837a:	d100      	bne.n	800837e <initialize.lto_priv.136+0x1c2>
 800837c:	e090      	b.n	80084a0 <initialize.lto_priv.136+0x2e4>
 800837e:	4957      	ldr	r1, [pc, #348]	; (80084dc <initialize.lto_priv.136+0x320>)
 8008380:	1c30      	adds	r0, r6, #0
 8008382:	f008 fac7 	bl	8010914 <__aeabi_fmul>
 8008386:	4956      	ldr	r1, [pc, #344]	; (80084e0 <initialize.lto_priv.136+0x324>)
 8008388:	f008 f818 	bl	80103bc <__aeabi_fadd>
 800838c:	1c06      	adds	r6, r0, #0
 800838e:	9807      	ldr	r0, [sp, #28]
 8008390:	f7ff fece 	bl	8008130 <points_to_meter.lto_priv.129>
 8008394:	4680      	mov	r8, r0
 8008396:	9807      	ldr	r0, [sp, #28]
 8008398:	f7ff feca 	bl	8008130 <points_to_meter.lto_priv.129>
 800839c:	2100      	movs	r1, #0
 800839e:	f008 ffb1 	bl	8011304 <__aeabi_fcmplt>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d07f      	beq.n	80084a6 <initialize.lto_priv.136+0x2ea>
 80083a6:	494d      	ldr	r1, [pc, #308]	; (80084dc <initialize.lto_priv.136+0x320>)
 80083a8:	4640      	mov	r0, r8
 80083aa:	f008 fab3 	bl	8010914 <__aeabi_fmul>
 80083ae:	494c      	ldr	r1, [pc, #304]	; (80084e0 <initialize.lto_priv.136+0x324>)
 80083b0:	f008 f804 	bl	80103bc <__aeabi_fadd>
 80083b4:	f008 ffee 	bl	8011394 <__aeabi_f2uiz>
 80083b8:	f009 fa0c 	bl	80117d4 <__aeabi_ui2f>
 80083bc:	1c01      	adds	r1, r0, #0
 80083be:	1c30      	adds	r0, r6, #0
 80083c0:	f008 fbda 	bl	8010b78 <__aeabi_fsub>
 80083c4:	4947      	ldr	r1, [pc, #284]	; (80084e4 <initialize.lto_priv.136+0x328>)
 80083c6:	f008 faa5 	bl	8010914 <__aeabi_fmul>
 80083ca:	f008 ffe3 	bl	8011394 <__aeabi_f2uiz>
 80083ce:	4680      	mov	r8, r0
 80083d0:	0020      	movs	r0, r4
 80083d2:	f7ff fead 	bl	8008130 <points_to_meter.lto_priv.129>
 80083d6:	2100      	movs	r1, #0
 80083d8:	f008 ff94 	bl	8011304 <__aeabi_fcmplt>
 80083dc:	4e3d      	ldr	r6, [pc, #244]	; (80084d4 <initialize.lto_priv.136+0x318>)
 80083de:	2800      	cmp	r0, #0
 80083e0:	d100      	bne.n	80083e4 <initialize.lto_priv.136+0x228>
 80083e2:	4e3d      	ldr	r6, [pc, #244]	; (80084d8 <initialize.lto_priv.136+0x31c>)
 80083e4:	0020      	movs	r0, r4
 80083e6:	f7ff fea3 	bl	8008130 <points_to_meter.lto_priv.129>
 80083ea:	4681      	mov	r9, r0
 80083ec:	0020      	movs	r0, r4
 80083ee:	f7ff fe9f 	bl	8008130 <points_to_meter.lto_priv.129>
 80083f2:	2100      	movs	r1, #0
 80083f4:	f008 ff86 	bl	8011304 <__aeabi_fcmplt>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d057      	beq.n	80084ac <initialize.lto_priv.136+0x2f0>
 80083fc:	4937      	ldr	r1, [pc, #220]	; (80084dc <initialize.lto_priv.136+0x320>)
 80083fe:	4648      	mov	r0, r9
 8008400:	f008 fa88 	bl	8010914 <__aeabi_fmul>
 8008404:	4936      	ldr	r1, [pc, #216]	; (80084e0 <initialize.lto_priv.136+0x324>)
 8008406:	f007 ffd9 	bl	80103bc <__aeabi_fadd>
 800840a:	f008 ffc3 	bl	8011394 <__aeabi_f2uiz>
 800840e:	4681      	mov	r9, r0
 8008410:	0020      	movs	r0, r4
 8008412:	f7ff fe8d 	bl	8008130 <points_to_meter.lto_priv.129>
 8008416:	4682      	mov	sl, r0
 8008418:	0020      	movs	r0, r4
 800841a:	f7ff fe89 	bl	8008130 <points_to_meter.lto_priv.129>
 800841e:	2100      	movs	r1, #0
 8008420:	f008 ff70 	bl	8011304 <__aeabi_fcmplt>
 8008424:	2800      	cmp	r0, #0
 8008426:	d044      	beq.n	80084b2 <initialize.lto_priv.136+0x2f6>
 8008428:	492c      	ldr	r1, [pc, #176]	; (80084dc <initialize.lto_priv.136+0x320>)
 800842a:	4650      	mov	r0, sl
 800842c:	f008 fa72 	bl	8010914 <__aeabi_fmul>
 8008430:	492b      	ldr	r1, [pc, #172]	; (80084e0 <initialize.lto_priv.136+0x324>)
 8008432:	f007 ffc3 	bl	80103bc <__aeabi_fadd>
 8008436:	4682      	mov	sl, r0
 8008438:	0020      	movs	r0, r4
 800843a:	f7ff fe79 	bl	8008130 <points_to_meter.lto_priv.129>
 800843e:	4683      	mov	fp, r0
 8008440:	0020      	movs	r0, r4
 8008442:	f7ff fe75 	bl	8008130 <points_to_meter.lto_priv.129>
 8008446:	2100      	movs	r1, #0
 8008448:	f008 ff5c 	bl	8011304 <__aeabi_fcmplt>
 800844c:	2800      	cmp	r0, #0
 800844e:	d033      	beq.n	80084b8 <initialize.lto_priv.136+0x2fc>
 8008450:	4922      	ldr	r1, [pc, #136]	; (80084dc <initialize.lto_priv.136+0x320>)
 8008452:	4658      	mov	r0, fp
 8008454:	f008 fa5e 	bl	8010914 <__aeabi_fmul>
 8008458:	4921      	ldr	r1, [pc, #132]	; (80084e0 <initialize.lto_priv.136+0x324>)
 800845a:	f007 ffaf 	bl	80103bc <__aeabi_fadd>
 800845e:	f008 ff99 	bl	8011394 <__aeabi_f2uiz>
 8008462:	f009 f9b7 	bl	80117d4 <__aeabi_ui2f>
 8008466:	1c01      	adds	r1, r0, #0
 8008468:	4650      	mov	r0, sl
 800846a:	f008 fb85 	bl	8010b78 <__aeabi_fsub>
 800846e:	491d      	ldr	r1, [pc, #116]	; (80084e4 <initialize.lto_priv.136+0x328>)
 8008470:	f008 fa50 	bl	8010914 <__aeabi_fmul>
 8008474:	f008 ff8e 	bl	8011394 <__aeabi_f2uiz>
 8008478:	464b      	mov	r3, r9
 800847a:	9303      	str	r3, [sp, #12]
 800847c:	4643      	mov	r3, r8
 800847e:	9004      	str	r0, [sp, #16]
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	2000      	movs	r0, #0
 8008484:	9602      	str	r6, [sp, #8]
 8008486:	9700      	str	r7, [sp, #0]
 8008488:	002b      	movs	r3, r5
 800848a:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <initialize.lto_priv.136+0x32c>)
 800848c:	490e      	ldr	r1, [pc, #56]	; (80084c8 <initialize.lto_priv.136+0x30c>)
 800848e:	9c08      	ldr	r4, [sp, #32]
 8008490:	47a0      	blx	r4
 8008492:	2000      	movs	r0, #0
 8008494:	e6ab      	b.n	80081ee <initialize.lto_priv.136+0x32>
 8008496:	783a      	ldrb	r2, [r7, #0]
 8008498:	e72b      	b.n	80082f2 <initialize.lto_priv.136+0x136>
 800849a:	21fe      	movs	r1, #254	; 0xfe
 800849c:	0589      	lsls	r1, r1, #22
 800849e:	e758      	b.n	8008352 <initialize.lto_priv.136+0x196>
 80084a0:	21fe      	movs	r1, #254	; 0xfe
 80084a2:	0589      	lsls	r1, r1, #22
 80084a4:	e76c      	b.n	8008380 <initialize.lto_priv.136+0x1c4>
 80084a6:	21fe      	movs	r1, #254	; 0xfe
 80084a8:	0589      	lsls	r1, r1, #22
 80084aa:	e77d      	b.n	80083a8 <initialize.lto_priv.136+0x1ec>
 80084ac:	21fe      	movs	r1, #254	; 0xfe
 80084ae:	0589      	lsls	r1, r1, #22
 80084b0:	e7a5      	b.n	80083fe <initialize.lto_priv.136+0x242>
 80084b2:	21fe      	movs	r1, #254	; 0xfe
 80084b4:	0589      	lsls	r1, r1, #22
 80084b6:	e7b8      	b.n	800842a <initialize.lto_priv.136+0x26e>
 80084b8:	21fe      	movs	r1, #254	; 0xfe
 80084ba:	0589      	lsls	r1, r1, #22
 80084bc:	e7c9      	b.n	8008452 <initialize.lto_priv.136+0x296>
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	200005d0 	.word	0x200005d0
 80084c4:	0801ddc6 	.word	0x0801ddc6
 80084c8:	0801dd1a 	.word	0x0801dd1a
 80084cc:	0801ddf1 	.word	0x0801ddf1
 80084d0:	0801de24 	.word	0x0801de24
 80084d4:	0801ef74 	.word	0x0801ef74
 80084d8:	0801ee9f 	.word	0x0801ee9f
 80084dc:	bf800000 	.word	0xbf800000
 80084e0:	350637bd 	.word	0x350637bd
 80084e4:	49742400 	.word	0x49742400
 80084e8:	0801de53 	.word	0x0801de53
 80084ec:	3b30      	subs	r3, #48	; 0x30
 80084ee:	b21c      	sxth	r4, r3
 80084f0:	4544      	cmp	r4, r8
 80084f2:	db00      	blt.n	80084f6 <initialize.lto_priv.136+0x33a>
 80084f4:	e0ce      	b.n	8008694 <initialize.lto_priv.136+0x4d8>
 80084f6:	4bd7      	ldr	r3, [pc, #860]	; (8008854 <initialize.lto_priv.136+0x698>)
 80084f8:	4640      	mov	r0, r8
 80084fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	f7ff fe17 	bl	8008130 <points_to_meter.lto_priv.129>
 8008502:	2100      	movs	r1, #0
 8008504:	f008 fefe 	bl	8011304 <__aeabi_fcmplt>
 8008508:	4dd3      	ldr	r5, [pc, #844]	; (8008858 <initialize.lto_priv.136+0x69c>)
 800850a:	2800      	cmp	r0, #0
 800850c:	d100      	bne.n	8008510 <initialize.lto_priv.136+0x354>
 800850e:	4dd3      	ldr	r5, [pc, #844]	; (800885c <initialize.lto_priv.136+0x6a0>)
 8008510:	4640      	mov	r0, r8
 8008512:	f7ff fe0d 	bl	8008130 <points_to_meter.lto_priv.129>
 8008516:	1c06      	adds	r6, r0, #0
 8008518:	4640      	mov	r0, r8
 800851a:	f7ff fe09 	bl	8008130 <points_to_meter.lto_priv.129>
 800851e:	2100      	movs	r1, #0
 8008520:	f008 fef0 	bl	8011304 <__aeabi_fcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	d100      	bne.n	800852a <initialize.lto_priv.136+0x36e>
 8008528:	e0a2      	b.n	8008670 <initialize.lto_priv.136+0x4b4>
 800852a:	49cd      	ldr	r1, [pc, #820]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 800852c:	1c30      	adds	r0, r6, #0
 800852e:	f008 f9f1 	bl	8010914 <__aeabi_fmul>
 8008532:	49cc      	ldr	r1, [pc, #816]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 8008534:	f007 ff42 	bl	80103bc <__aeabi_fadd>
 8008538:	f008 ff2c 	bl	8011394 <__aeabi_f2uiz>
 800853c:	0007      	movs	r7, r0
 800853e:	4640      	mov	r0, r8
 8008540:	f7ff fdf6 	bl	8008130 <points_to_meter.lto_priv.129>
 8008544:	1c06      	adds	r6, r0, #0
 8008546:	4640      	mov	r0, r8
 8008548:	f7ff fdf2 	bl	8008130 <points_to_meter.lto_priv.129>
 800854c:	2100      	movs	r1, #0
 800854e:	f008 fed9 	bl	8011304 <__aeabi_fcmplt>
 8008552:	2800      	cmp	r0, #0
 8008554:	d100      	bne.n	8008558 <initialize.lto_priv.136+0x39c>
 8008556:	e08e      	b.n	8008676 <initialize.lto_priv.136+0x4ba>
 8008558:	49c1      	ldr	r1, [pc, #772]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 800855a:	1c30      	adds	r0, r6, #0
 800855c:	f008 f9da 	bl	8010914 <__aeabi_fmul>
 8008560:	49c0      	ldr	r1, [pc, #768]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 8008562:	f007 ff2b 	bl	80103bc <__aeabi_fadd>
 8008566:	1c06      	adds	r6, r0, #0
 8008568:	4640      	mov	r0, r8
 800856a:	f7ff fde1 	bl	8008130 <points_to_meter.lto_priv.129>
 800856e:	4681      	mov	r9, r0
 8008570:	4640      	mov	r0, r8
 8008572:	f7ff fddd 	bl	8008130 <points_to_meter.lto_priv.129>
 8008576:	2100      	movs	r1, #0
 8008578:	f008 fec4 	bl	8011304 <__aeabi_fcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	d07d      	beq.n	800867c <initialize.lto_priv.136+0x4c0>
 8008580:	49b7      	ldr	r1, [pc, #732]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 8008582:	4648      	mov	r0, r9
 8008584:	f008 f9c6 	bl	8010914 <__aeabi_fmul>
 8008588:	49b6      	ldr	r1, [pc, #728]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 800858a:	f007 ff17 	bl	80103bc <__aeabi_fadd>
 800858e:	f008 ff01 	bl	8011394 <__aeabi_f2uiz>
 8008592:	f009 f91f 	bl	80117d4 <__aeabi_ui2f>
 8008596:	1c01      	adds	r1, r0, #0
 8008598:	1c30      	adds	r0, r6, #0
 800859a:	f008 faed 	bl	8010b78 <__aeabi_fsub>
 800859e:	49b2      	ldr	r1, [pc, #712]	; (8008868 <initialize.lto_priv.136+0x6ac>)
 80085a0:	f008 f9b8 	bl	8010914 <__aeabi_fmul>
 80085a4:	f008 fef6 	bl	8011394 <__aeabi_f2uiz>
 80085a8:	4680      	mov	r8, r0
 80085aa:	0020      	movs	r0, r4
 80085ac:	f7ff fdc0 	bl	8008130 <points_to_meter.lto_priv.129>
 80085b0:	2100      	movs	r1, #0
 80085b2:	f008 fea7 	bl	8011304 <__aeabi_fcmplt>
 80085b6:	4ea8      	ldr	r6, [pc, #672]	; (8008858 <initialize.lto_priv.136+0x69c>)
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d100      	bne.n	80085be <initialize.lto_priv.136+0x402>
 80085bc:	4ea7      	ldr	r6, [pc, #668]	; (800885c <initialize.lto_priv.136+0x6a0>)
 80085be:	0020      	movs	r0, r4
 80085c0:	f7ff fdb6 	bl	8008130 <points_to_meter.lto_priv.129>
 80085c4:	4681      	mov	r9, r0
 80085c6:	0020      	movs	r0, r4
 80085c8:	f7ff fdb2 	bl	8008130 <points_to_meter.lto_priv.129>
 80085cc:	2100      	movs	r1, #0
 80085ce:	f008 fe99 	bl	8011304 <__aeabi_fcmplt>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d055      	beq.n	8008682 <initialize.lto_priv.136+0x4c6>
 80085d6:	49a2      	ldr	r1, [pc, #648]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 80085d8:	4648      	mov	r0, r9
 80085da:	f008 f99b 	bl	8010914 <__aeabi_fmul>
 80085de:	49a1      	ldr	r1, [pc, #644]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 80085e0:	f007 feec 	bl	80103bc <__aeabi_fadd>
 80085e4:	f008 fed6 	bl	8011394 <__aeabi_f2uiz>
 80085e8:	4681      	mov	r9, r0
 80085ea:	0020      	movs	r0, r4
 80085ec:	f7ff fda0 	bl	8008130 <points_to_meter.lto_priv.129>
 80085f0:	4682      	mov	sl, r0
 80085f2:	0020      	movs	r0, r4
 80085f4:	f7ff fd9c 	bl	8008130 <points_to_meter.lto_priv.129>
 80085f8:	2100      	movs	r1, #0
 80085fa:	f008 fe83 	bl	8011304 <__aeabi_fcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d042      	beq.n	8008688 <initialize.lto_priv.136+0x4cc>
 8008602:	4997      	ldr	r1, [pc, #604]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 8008604:	4650      	mov	r0, sl
 8008606:	f008 f985 	bl	8010914 <__aeabi_fmul>
 800860a:	4996      	ldr	r1, [pc, #600]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 800860c:	f007 fed6 	bl	80103bc <__aeabi_fadd>
 8008610:	4682      	mov	sl, r0
 8008612:	0020      	movs	r0, r4
 8008614:	f7ff fd8c 	bl	8008130 <points_to_meter.lto_priv.129>
 8008618:	4683      	mov	fp, r0
 800861a:	0020      	movs	r0, r4
 800861c:	f7ff fd88 	bl	8008130 <points_to_meter.lto_priv.129>
 8008620:	2100      	movs	r1, #0
 8008622:	f008 fe6f 	bl	8011304 <__aeabi_fcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	d031      	beq.n	800868e <initialize.lto_priv.136+0x4d2>
 800862a:	498d      	ldr	r1, [pc, #564]	; (8008860 <initialize.lto_priv.136+0x6a4>)
 800862c:	4658      	mov	r0, fp
 800862e:	f008 f971 	bl	8010914 <__aeabi_fmul>
 8008632:	498c      	ldr	r1, [pc, #560]	; (8008864 <initialize.lto_priv.136+0x6a8>)
 8008634:	f007 fec2 	bl	80103bc <__aeabi_fadd>
 8008638:	f008 feac 	bl	8011394 <__aeabi_f2uiz>
 800863c:	f009 f8ca 	bl	80117d4 <__aeabi_ui2f>
 8008640:	1c01      	adds	r1, r0, #0
 8008642:	4650      	mov	r0, sl
 8008644:	f008 fa98 	bl	8010b78 <__aeabi_fsub>
 8008648:	4987      	ldr	r1, [pc, #540]	; (8008868 <initialize.lto_priv.136+0x6ac>)
 800864a:	f008 f963 	bl	8010914 <__aeabi_fmul>
 800864e:	f008 fea1 	bl	8011394 <__aeabi_f2uiz>
 8008652:	464b      	mov	r3, r9
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	4643      	mov	r3, r8
 8008658:	9004      	str	r0, [sp, #16]
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	2000      	movs	r0, #0
 800865e:	9602      	str	r6, [sp, #8]
 8008660:	9700      	str	r7, [sp, #0]
 8008662:	002b      	movs	r3, r5
 8008664:	4a81      	ldr	r2, [pc, #516]	; (800886c <initialize.lto_priv.136+0x6b0>)
 8008666:	4982      	ldr	r1, [pc, #520]	; (8008870 <initialize.lto_priv.136+0x6b4>)
 8008668:	9c07      	ldr	r4, [sp, #28]
 800866a:	47a0      	blx	r4
 800866c:	2000      	movs	r0, #0
 800866e:	e5be      	b.n	80081ee <initialize.lto_priv.136+0x32>
 8008670:	21fe      	movs	r1, #254	; 0xfe
 8008672:	0589      	lsls	r1, r1, #22
 8008674:	e75a      	b.n	800852c <initialize.lto_priv.136+0x370>
 8008676:	21fe      	movs	r1, #254	; 0xfe
 8008678:	0589      	lsls	r1, r1, #22
 800867a:	e76e      	b.n	800855a <initialize.lto_priv.136+0x39e>
 800867c:	21fe      	movs	r1, #254	; 0xfe
 800867e:	0589      	lsls	r1, r1, #22
 8008680:	e77f      	b.n	8008582 <initialize.lto_priv.136+0x3c6>
 8008682:	21fe      	movs	r1, #254	; 0xfe
 8008684:	0589      	lsls	r1, r1, #22
 8008686:	e7a7      	b.n	80085d8 <initialize.lto_priv.136+0x41c>
 8008688:	21fe      	movs	r1, #254	; 0xfe
 800868a:	0589      	lsls	r1, r1, #22
 800868c:	e7ba      	b.n	8008604 <initialize.lto_priv.136+0x448>
 800868e:	21fe      	movs	r1, #254	; 0xfe
 8008690:	0589      	lsls	r1, r1, #22
 8008692:	e7cb      	b.n	800862c <initialize.lto_priv.136+0x470>
 8008694:	0030      	movs	r0, r6
 8008696:	f7f8 facd 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800869a:	4643      	mov	r3, r8
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	9009      	str	r0, [sp, #36]	; 0x24
 80086a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086a2:	1a98      	subs	r0, r3, r2
 80086a4:	f008 fcf2 	bl	801108c <__divsi3>
 80086a8:	3001      	adds	r0, #1
 80086aa:	b283      	uxth	r3, r0
 80086ac:	0030      	movs	r0, r6
 80086ae:	930a      	str	r3, [sp, #40]	; 0x28
 80086b0:	f7f8 facb 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 80086b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b6:	4358      	muls	r0, r3
 80086b8:	b283      	uxth	r3, r0
 80086ba:	0030      	movs	r0, r6
 80086bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80086be:	f7f8 fa83 	bl	8000bc8 <configuration_is_valid>
 80086c2:	2300      	movs	r3, #0
 80086c4:	4298      	cmp	r0, r3
 80086c6:	d009      	beq.n	80086dc <initialize.lto_priv.136+0x520>
 80086c8:	0032      	movs	r2, r6
 80086ca:	324f      	adds	r2, #79	; 0x4f
 80086cc:	0033      	movs	r3, r6
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	3352      	adds	r3, #82	; 0x52
 80086d2:	1e51      	subs	r1, r2, #1
 80086d4:	418a      	sbcs	r2, r1
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	4252      	negs	r2, r2
 80086da:	4013      	ands	r3, r2
 80086dc:	002a      	movs	r2, r5
 80086de:	32b8      	adds	r2, #184	; 0xb8
 80086e0:	8013      	strh	r3, [r2, #0]
 80086e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086e4:	4694      	mov	ip, r2
 80086e6:	2280      	movs	r2, #128	; 0x80
 80086e8:	4463      	add	r3, ip
 80086ea:	0112      	lsls	r2, r2, #4
 80086ec:	4293      	cmp	r3, r2
 80086ee:	dd07      	ble.n	8008700 <initialize.lto_priv.136+0x544>
 80086f0:	4b58      	ldr	r3, [pc, #352]	; (8008854 <initialize.lto_priv.136+0x698>)
 80086f2:	2000      	movs	r0, #0
 80086f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f6:	4a5f      	ldr	r2, [pc, #380]	; (8008874 <initialize.lto_priv.136+0x6b8>)
 80086f8:	495d      	ldr	r1, [pc, #372]	; (8008870 <initialize.lto_priv.136+0x6b4>)
 80086fa:	4798      	blx	r3
 80086fc:	2000      	movs	r0, #0
 80086fe:	e576      	b.n	80081ee <initialize.lto_priv.136+0x32>
 8008700:	0030      	movs	r0, r6
 8008702:	f7f8 fb19 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008706:	4681      	mov	r9, r0
 8008708:	0030      	movs	r0, r6
 800870a:	f7f8 fa5d 	bl	8000bc8 <configuration_is_valid>
 800870e:	2406      	movs	r4, #6
 8008710:	2800      	cmp	r0, #0
 8008712:	d000      	beq.n	8008716 <initialize.lto_priv.136+0x55a>
 8008714:	783c      	ldrb	r4, [r7, #0]
 8008716:	0030      	movs	r0, r6
 8008718:	f7f8 fa56 	bl	8000bc8 <configuration_is_valid>
 800871c:	2303      	movs	r3, #3
 800871e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008720:	435a      	muls	r2, r3
 8008722:	920c      	str	r2, [sp, #48]	; 0x30
 8008724:	2800      	cmp	r0, #0
 8008726:	d004      	beq.n	8008732 <initialize.lto_priv.136+0x576>
 8008728:	0032      	movs	r2, r6
 800872a:	326a      	adds	r2, #106	; 0x6a
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	2a00      	cmp	r2, #0
 8008730:	d142      	bne.n	80087b8 <initialize.lto_priv.136+0x5fc>
 8008732:	464b      	mov	r3, r9
 8008734:	2007      	movs	r0, #7
 8008736:	4358      	muls	r0, r3
 8008738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873a:	300d      	adds	r0, #13
 800873c:	4358      	muls	r0, r3
 800873e:	4344      	muls	r4, r0
 8008740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008742:	0023      	movs	r3, r4
 8008744:	4694      	mov	ip, r2
 8008746:	4463      	add	r3, ip
 8008748:	9313      	str	r3, [sp, #76]	; 0x4c
 800874a:	f7ff fcdf 	bl	800810c <get_pll_freq>
 800874e:	21f4      	movs	r1, #244	; 0xf4
 8008750:	0589      	lsls	r1, r1, #22
 8008752:	f008 f8df 	bl	8010914 <__aeabi_fmul>
 8008756:	9014      	str	r0, [sp, #80]	; 0x50
 8008758:	0030      	movs	r0, r6
 800875a:	f7f8 fa35 	bl	8000bc8 <configuration_is_valid>
 800875e:	2800      	cmp	r0, #0
 8008760:	d03d      	beq.n	80087de <initialize.lto_priv.136+0x622>
 8008762:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008764:	f009 f836 	bl	80117d4 <__aeabi_ui2f>
 8008768:	6e74      	ldr	r4, [r6, #100]	; 0x64
 800876a:	1c07      	adds	r7, r0, #0
 800876c:	2100      	movs	r1, #0
 800876e:	1c20      	adds	r0, r4, #0
 8008770:	f008 fddc 	bl	801132c <__aeabi_fcmpgt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d032      	beq.n	80087de <initialize.lto_priv.136+0x622>
 8008778:	1c21      	adds	r1, r4, #0
 800877a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800877c:	f007 ffb8 	bl	80106f0 <__aeabi_fdiv>
 8008780:	1c39      	adds	r1, r7, #0
 8008782:	f008 f9f9 	bl	8010b78 <__aeabi_fsub>
 8008786:	1c04      	adds	r4, r0, #0
 8008788:	980c      	ldr	r0, [sp, #48]	; 0x30
 800878a:	f009 f823 	bl	80117d4 <__aeabi_ui2f>
 800878e:	1c01      	adds	r1, r0, #0
 8008790:	1c20      	adds	r0, r4, #0
 8008792:	f007 ffad 	bl	80106f0 <__aeabi_fdiv>
 8008796:	21fc      	movs	r1, #252	; 0xfc
 8008798:	0589      	lsls	r1, r1, #22
 800879a:	f007 fe0f 	bl	80103bc <__aeabi_fadd>
 800879e:	f008 ffaf 	bl	8011700 <__aeabi_f2iz>
 80087a2:	900d      	str	r0, [sp, #52]	; 0x34
 80087a4:	2800      	cmp	r0, #0
 80087a6:	da0f      	bge.n	80087c8 <initialize.lto_priv.136+0x60c>
 80087a8:	4b2a      	ldr	r3, [pc, #168]	; (8008854 <initialize.lto_priv.136+0x698>)
 80087aa:	2000      	movs	r0, #0
 80087ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ae:	4a32      	ldr	r2, [pc, #200]	; (8008878 <initialize.lto_priv.136+0x6bc>)
 80087b0:	492f      	ldr	r1, [pc, #188]	; (8008870 <initialize.lto_priv.136+0x6b4>)
 80087b2:	4798      	blx	r3
 80087b4:	2000      	movs	r0, #0
 80087b6:	e51a      	b.n	80081ee <initialize.lto_priv.136+0x32>
 80087b8:	464a      	mov	r2, r9
 80087ba:	980c      	ldr	r0, [sp, #48]	; 0x30
 80087bc:	930c      	str	r3, [sp, #48]	; 0x30
 80087be:	4350      	muls	r0, r2
 80087c0:	300f      	adds	r0, #15
 80087c2:	4344      	muls	r4, r0
 80087c4:	34d4      	adds	r4, #212	; 0xd4
 80087c6:	e7bb      	b.n	8008740 <initialize.lto_priv.136+0x584>
 80087c8:	4b2c      	ldr	r3, [pc, #176]	; (800887c <initialize.lto_priv.136+0x6c0>)
 80087ca:	4298      	cmp	r0, r3
 80087cc:	dd08      	ble.n	80087e0 <initialize.lto_priv.136+0x624>
 80087ce:	4b21      	ldr	r3, [pc, #132]	; (8008854 <initialize.lto_priv.136+0x698>)
 80087d0:	2000      	movs	r0, #0
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <initialize.lto_priv.136+0x6c4>)
 80087d6:	4926      	ldr	r1, [pc, #152]	; (8008870 <initialize.lto_priv.136+0x6b4>)
 80087d8:	4798      	blx	r3
 80087da:	2000      	movs	r0, #0
 80087dc:	e507      	b.n	80081ee <initialize.lto_priv.136+0x32>
 80087de:	900d      	str	r0, [sp, #52]	; 0x34
 80087e0:	002b      	movs	r3, r5
 80087e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087e4:	33b6      	adds	r3, #182	; 0xb6
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	0030      	movs	r0, r6
 80087ea:	f7f8 fab9 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 80087ee:	002b      	movs	r3, r5
 80087f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087f2:	33ba      	adds	r3, #186	; 0xba
 80087f4:	7018      	strb	r0, [r3, #0]
 80087f6:	3b06      	subs	r3, #6
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	0033      	movs	r3, r6
 80087fc:	332e      	adds	r3, #46	; 0x2e
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d022      	beq.n	800884a <initialize.lto_priv.136+0x68e>
 8008804:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8008806:	465b      	mov	r3, fp
 8008808:	809c      	strh	r4, [r3, #4]
 800880a:	466b      	mov	r3, sp
 800880c:	8b9f      	ldrh	r7, [r3, #28]
 800880e:	465b      	mov	r3, fp
 8008810:	9a07      	ldr	r2, [sp, #28]
 8008812:	811a      	strh	r2, [r3, #8]
 8008814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008816:	815a      	strh	r2, [r3, #10]
 8008818:	2301      	movs	r3, #1
 800881a:	4699      	mov	r9, r3
 800881c:	465b      	mov	r3, fp
 800881e:	464a      	mov	r2, r9
 8008820:	819a      	strh	r2, [r3, #12]
 8008822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008824:	3b01      	subs	r3, #1
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b07      	cmp	r3, #7
 800882a:	d806      	bhi.n	800883a <initialize.lto_priv.136+0x67e>
 800882c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800882e:	2008      	movs	r0, #8
 8008830:	f008 fd12 	bl	8011258 <__aeabi_idivmod>
 8008834:	910e      	str	r1, [sp, #56]	; 0x38
 8008836:	2900      	cmp	r1, #0
 8008838:	d026      	beq.n	8008888 <initialize.lto_priv.136+0x6cc>
 800883a:	4b06      	ldr	r3, [pc, #24]	; (8008854 <initialize.lto_priv.136+0x698>)
 800883c:	2000      	movs	r0, #0
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	4a10      	ldr	r2, [pc, #64]	; (8008884 <initialize.lto_priv.136+0x6c8>)
 8008842:	490b      	ldr	r1, [pc, #44]	; (8008870 <initialize.lto_priv.136+0x6b4>)
 8008844:	4798      	blx	r3
 8008846:	2000      	movs	r0, #0
 8008848:	e4d1      	b.n	80081ee <initialize.lto_priv.136+0x32>
 800884a:	0033      	movs	r3, r6
 800884c:	3332      	adds	r3, #50	; 0x32
 800884e:	781c      	ldrb	r4, [r3, #0]
 8008850:	e7d9      	b.n	8008806 <initialize.lto_priv.136+0x64a>
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	200005d0 	.word	0x200005d0
 8008858:	0801ef74 	.word	0x0801ef74
 800885c:	0801ee9f 	.word	0x0801ee9f
 8008860:	bf800000 	.word	0xbf800000
 8008864:	350637bd 	.word	0x350637bd
 8008868:	49742400 	.word	0x49742400
 800886c:	0801de90 	.word	0x0801de90
 8008870:	0801dd1a 	.word	0x0801dd1a
 8008874:	0801decd 	.word	0x0801decd
 8008878:	0801df2d 	.word	0x0801df2d
 800887c:	0000fffe 	.word	0x0000fffe
 8008880:	0801df4e 	.word	0x0801df4e
 8008884:	0801df6e 	.word	0x0801df6e
 8008888:	b224      	sxth	r4, r4
 800888a:	3c01      	subs	r4, #1
 800888c:	0164      	lsls	r4, r4, #5
 800888e:	b2a3      	uxth	r3, r4
 8008890:	001c      	movs	r4, r3
 8008892:	3c0f      	subs	r4, #15
 8008894:	b2a4      	uxth	r4, r4
 8008896:	1b3f      	subs	r7, r7, r4
 8008898:	b23f      	sxth	r7, r7
 800889a:	9315      	str	r3, [sp, #84]	; 0x54
 800889c:	10fb      	asrs	r3, r7, #3
 800889e:	9318      	str	r3, [sp, #96]	; 0x60
 80088a0:	4643      	mov	r3, r8
 80088a2:	1b1c      	subs	r4, r3, r4
 80088a4:	464b      	mov	r3, r9
 80088a6:	10f9      	asrs	r1, r7, #3
 80088a8:	b224      	sxth	r4, r4
 80088aa:	10e2      	asrs	r2, r4, #3
 80088ac:	1a5b      	subs	r3, r3, r1
 80088ae:	189b      	adds	r3, r3, r2
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	9311      	str	r3, [sp, #68]	; 0x44
 80088b4:	2244      	movs	r2, #68	; 0x44
 80088b6:	466b      	mov	r3, sp
 80088b8:	189b      	adds	r3, r3, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	5e9b      	ldrsh	r3, [r3, r2]
 80088be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088c0:	2008      	movs	r0, #8
 80088c2:	4699      	mov	r9, r3
 80088c4:	f008 fbe2 	bl	801108c <__divsi3>
 80088c8:	9010      	str	r0, [sp, #64]	; 0x40
 80088ca:	48db      	ldr	r0, [pc, #876]	; (8008c38 <initialize.lto_priv.136+0xa7c>)
 80088cc:	4007      	ands	r7, r0
 80088ce:	9012      	str	r0, [sp, #72]	; 0x48
 80088d0:	d504      	bpl.n	80088dc <initialize.lto_priv.136+0x720>
 80088d2:	2308      	movs	r3, #8
 80088d4:	3f01      	subs	r7, #1
 80088d6:	425b      	negs	r3, r3
 80088d8:	431f      	orrs	r7, r3
 80088da:	3701      	adds	r7, #1
 80088dc:	b23f      	sxth	r7, r7
 80088de:	2f00      	cmp	r7, #0
 80088e0:	da01      	bge.n	80088e6 <initialize.lto_priv.136+0x72a>
 80088e2:	3708      	adds	r7, #8
 80088e4:	b23f      	sxth	r7, r7
 80088e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088e8:	0038      	movs	r0, r7
 80088ea:	f008 fcb5 	bl	8011258 <__aeabi_idivmod>
 80088ee:	466b      	mov	r3, sp
 80088f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80088f2:	213c      	movs	r1, #60	; 0x3c
 80088f4:	5e59      	ldrsh	r1, [r3, r1]
 80088f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088fa:	3b01      	subs	r3, #1
 80088fc:	9316      	str	r3, [sp, #88]	; 0x58
 80088fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	4004      	ands	r4, r0
 8008904:	4353      	muls	r3, r2
 8008906:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008908:	4694      	mov	ip, r2
 800890a:	4463      	add	r3, ip
 800890c:	b29b      	uxth	r3, r3
 800890e:	b21a      	sxth	r2, r3
 8008910:	2c00      	cmp	r4, #0
 8008912:	da04      	bge.n	800891e <initialize.lto_priv.136+0x762>
 8008914:	2008      	movs	r0, #8
 8008916:	3c01      	subs	r4, #1
 8008918:	4240      	negs	r0, r0
 800891a:	4304      	orrs	r4, r0
 800891c:	3401      	adds	r4, #1
 800891e:	b224      	sxth	r4, r4
 8008920:	2c00      	cmp	r4, #0
 8008922:	da01      	bge.n	8008928 <initialize.lto_priv.136+0x76c>
 8008924:	3408      	adds	r4, #8
 8008926:	b224      	sxth	r4, r4
 8008928:	4648      	mov	r0, r9
 800892a:	2801      	cmp	r0, #1
 800892c:	d171      	bne.n	8008a12 <initialize.lto_priv.136+0x856>
 800892e:	46cc      	mov	ip, r9
 8008930:	42b9      	cmp	r1, r7
 8008932:	d102      	bne.n	800893a <initialize.lto_priv.136+0x77e>
 8008934:	1b10      	subs	r0, r2, r4
 8008936:	1e42      	subs	r2, r0, #1
 8008938:	4190      	sbcs	r0, r2
 800893a:	4662      	mov	r2, ip
 800893c:	4002      	ands	r2, r0
 800893e:	9210      	str	r2, [sp, #64]	; 0x40
 8008940:	2200      	movs	r2, #0
 8008942:	9212      	str	r2, [sp, #72]	; 0x48
 8008944:	2000      	movs	r0, #0
 8008946:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008948:	9910      	ldr	r1, [sp, #64]	; 0x40
 800894a:	1a52      	subs	r2, r2, r1
 800894c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800894e:	1a52      	subs	r2, r2, r1
 8008950:	b212      	sxth	r2, r2
 8008952:	9211      	str	r2, [sp, #68]	; 0x44
 8008954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008956:	4282      	cmp	r2, r0
 8008958:	d008      	beq.n	800896c <initialize.lto_priv.136+0x7b0>
 800895a:	464a      	mov	r2, r9
 800895c:	2a01      	cmp	r2, #1
 800895e:	d100      	bne.n	8008962 <initialize.lto_priv.136+0x7a6>
 8008960:	b2a3      	uxth	r3, r4
 8008962:	1bd8      	subs	r0, r3, r7
 8008964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008966:	f008 fb91 	bl	801108c <__divsi3>
 800896a:	b280      	uxth	r0, r0
 800896c:	465b      	mov	r3, fp
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	2205      	movs	r2, #5
 8008972:	0019      	movs	r1, r3
 8008974:	4699      	mov	r9, r3
 8008976:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008978:	318c      	adds	r1, #140	; 0x8c
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	600b      	str	r3, [r1, #0]
 8008980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008982:	464a      	mov	r2, r9
 8008984:	468c      	mov	ip, r1
 8008986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008988:	3290      	adds	r2, #144	; 0x90
 800898a:	3b32      	subs	r3, #50	; 0x32
 800898c:	b21b      	sxth	r3, r3
 800898e:	18ff      	adds	r7, r7, r3
 8008990:	4463      	add	r3, ip
 8008992:	6053      	str	r3, [r2, #4]
 8008994:	464b      	mov	r3, r9
 8008996:	6017      	str	r7, [r2, #0]
 8008998:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800899a:	3398      	adds	r3, #152	; 0x98
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	464a      	mov	r2, r9
 80089a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089a4:	17db      	asrs	r3, r3, #31
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	329c      	adds	r2, #156	; 0x9c
 80089aa:	0fdb      	lsrs	r3, r3, #31
 80089ac:	6013      	str	r3, [r2, #0]
 80089ae:	464b      	mov	r3, r9
 80089b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089b2:	33a0      	adds	r3, #160	; 0xa0
 80089b4:	601a      	str	r2, [r3, #0]
 80089b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80089b8:	6058      	str	r0, [r3, #4]
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	4663      	mov	r3, ip
 80089be:	464f      	mov	r7, r9
 80089c0:	1ae0      	subs	r0, r4, r3
 80089c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c4:	f008 fb62 	bl	801108c <__divsi3>
 80089c8:	2200      	movs	r2, #0
 80089ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089cc:	37ac      	adds	r7, #172	; 0xac
 80089ce:	6038      	str	r0, [r7, #0]
 80089d0:	4293      	cmp	r3, r2
 80089d2:	dd01      	ble.n	80089d8 <initialize.lto_priv.136+0x81c>
 80089d4:	001a      	movs	r2, r3
 80089d6:	3a01      	subs	r2, #1
 80089d8:	464b      	mov	r3, r9
 80089da:	33b0      	adds	r3, #176	; 0xb0
 80089dc:	601a      	str	r2, [r3, #0]
 80089de:	0030      	movs	r0, r6
 80089e0:	f7f8 f8f2 	bl	8000bc8 <configuration_is_valid>
 80089e4:	002b      	movs	r3, r5
 80089e6:	3370      	adds	r3, #112	; 0x70
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d004      	beq.n	80089f6 <initialize.lto_priv.136+0x83a>
 80089ec:	0032      	movs	r2, r6
 80089ee:	326a      	adds	r2, #106	; 0x6a
 80089f0:	7812      	ldrb	r2, [r2, #0]
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	d118      	bne.n	8008a28 <initialize.lto_priv.136+0x86c>
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
 80089fa:	232e      	movs	r3, #46	; 0x2e
 80089fc:	66ab      	str	r3, [r5, #104]	; 0x68
 80089fe:	0030      	movs	r0, r6
 8008a00:	f7f8 f978 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8008a04:	2803      	cmp	r0, #3
 8008a06:	d818      	bhi.n	8008a3a <initialize.lto_priv.136+0x87e>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f008 faa1 	bl	8010f50 <__gnu_thumb1_case_uqi>
 8008a0e:	2212      	.short	0x2212
 8008a10:	3828      	.short	0x3828
 8008a12:	1bc9      	subs	r1, r1, r7
 8008a14:	1e48      	subs	r0, r1, #1
 8008a16:	4181      	sbcs	r1, r0
 8008a18:	1b12      	subs	r2, r2, r4
 8008a1a:	b2c9      	uxtb	r1, r1
 8008a1c:	9110      	str	r1, [sp, #64]	; 0x40
 8008a1e:	1e51      	subs	r1, r2, #1
 8008a20:	418a      	sbcs	r2, r1
 8008a22:	b2d2      	uxtb	r2, r2
 8008a24:	9212      	str	r2, [sp, #72]	; 0x48
 8008a26:	e78d      	b.n	8008944 <initialize.lto_priv.136+0x788>
 8008a28:	2201      	movs	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
 8008a2c:	232e      	movs	r3, #46	; 0x2e
 8008a2e:	66ab      	str	r3, [r5, #104]	; 0x68
 8008a30:	e7e5      	b.n	80089fe <initialize.lto_priv.136+0x842>
 8008a32:	626b      	str	r3, [r5, #36]	; 0x24
 8008a34:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a36:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008a38:	632b      	str	r3, [r5, #48]	; 0x30
 8008a3a:	0030      	movs	r0, r6
 8008a3c:	f7f8 f999 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8008a40:	2804      	cmp	r0, #4
 8008a42:	d829      	bhi.n	8008a98 <initialize.lto_priv.136+0x8dc>
 8008a44:	2300      	movs	r3, #0
 8008a46:	2201      	movs	r2, #1
 8008a48:	f008 fa82 	bl	8010f50 <__gnu_thumb1_case_uqi>
 8008a4c:	efeb2323 	.word	0xefeb2323
 8008a50:	e7          	.byte	0xe7
 8008a51:	00          	.byte	0x00
 8008a52:	2201      	movs	r2, #1
 8008a54:	626b      	str	r3, [r5, #36]	; 0x24
 8008a56:	62aa      	str	r2, [r5, #40]	; 0x28
 8008a58:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008a5a:	632b      	str	r3, [r5, #48]	; 0x30
 8008a5c:	e7ed      	b.n	8008a3a <initialize.lto_priv.136+0x87e>
 8008a5e:	0030      	movs	r0, r6
 8008a60:	f7f8 f932 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8008a64:	aa1a      	add	r2, sp, #104	; 0x68
 8008a66:	a91b      	add	r1, sp, #108	; 0x6c
 8008a68:	f7ff fa08 	bl	8007e7c <acc_radar_engine_common_frequency_to_main_clk>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	626b      	str	r3, [r5, #36]	; 0x24
 8008a70:	2300      	movs	r3, #0
 8008a72:	62ab      	str	r3, [r5, #40]	; 0x28
 8008a74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008a76:	62eb      	str	r3, [r5, #44]	; 0x2c
 8008a78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a7a:	632b      	str	r3, [r5, #48]	; 0x30
 8008a7c:	e7dd      	b.n	8008a3a <initialize.lto_priv.136+0x87e>
 8008a7e:	0030      	movs	r0, r6
 8008a80:	f7f8 f922 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8008a84:	aa1a      	add	r2, sp, #104	; 0x68
 8008a86:	a91b      	add	r1, sp, #108	; 0x6c
 8008a88:	f7ff f9f8 	bl	8007e7c <acc_radar_engine_common_frequency_to_main_clk>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	626b      	str	r3, [r5, #36]	; 0x24
 8008a90:	e7ef      	b.n	8008a72 <initialize.lto_priv.136+0x8b6>
 8008a92:	636a      	str	r2, [r5, #52]	; 0x34
 8008a94:	63aa      	str	r2, [r5, #56]	; 0x38
 8008a96:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008a98:	0030      	movs	r0, r6
 8008a9a:	f7f8 f895 	bl	8000bc8 <configuration_is_valid>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	0007      	movs	r7, r0
 8008aa2:	4298      	cmp	r0, r3
 8008aa4:	d00b      	beq.n	8008abe <initialize.lto_priv.136+0x902>
 8008aa6:	0033      	movs	r3, r6
 8008aa8:	3350      	adds	r3, #80	; 0x50
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	9317      	str	r3, [sp, #92]	; 0x5c
 8008aae:	0033      	movs	r3, r6
 8008ab0:	3352      	adds	r3, #82	; 0x52
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8008ab6:	0033      	movs	r3, r6
 8008ab8:	334f      	adds	r3, #79	; 0x4f
 8008aba:	781f      	ldrb	r7, [r3, #0]
 8008abc:	003b      	movs	r3, r7
 8008abe:	002a      	movs	r2, r5
 8008ac0:	3208      	adds	r2, #8
 8008ac2:	67d3      	str	r3, [r2, #124]	; 0x7c
 8008ac4:	2f00      	cmp	r7, #0
 8008ac6:	d003      	beq.n	8008ad0 <initialize.lto_priv.136+0x914>
 8008ac8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008aca:	3280      	adds	r2, #128	; 0x80
 8008acc:	3b01      	subs	r3, #1
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	0030      	movs	r0, r6
 8008ad2:	f7f8 f945 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8008ad6:	2401      	movs	r4, #1
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d000      	beq.n	8008ade <initialize.lto_priv.136+0x922>
 8008adc:	e0a9      	b.n	8008c32 <initialize.lto_priv.136+0xa76>
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d001      	beq.n	8008ae6 <initialize.lto_priv.136+0x92a>
 8008ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ae4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ae6:	0023      	movs	r3, r4
 8008ae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aea:	0030      	movs	r0, r6
 8008aec:	4393      	bics	r3, r2
 8008aee:	642b      	str	r3, [r5, #64]	; 0x40
 8008af0:	f7f8 f92d 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8008af4:	4060      	eors	r0, r4
 8008af6:	b2c0      	uxtb	r0, r0
 8008af8:	6468      	str	r0, [r5, #68]	; 0x44
 8008afa:	64ac      	str	r4, [r5, #72]	; 0x48
 8008afc:	0030      	movs	r0, r6
 8008afe:	f7f8 f91b 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8008b02:	2801      	cmp	r0, #1
 8008b04:	d800      	bhi.n	8008b08 <initialize.lto_priv.136+0x94c>
 8008b06:	e099      	b.n	8008c3c <initialize.lto_priv.136+0xa80>
 8008b08:	3802      	subs	r0, #2
 8008b0a:	64ec      	str	r4, [r5, #76]	; 0x4c
 8008b0c:	6528      	str	r0, [r5, #80]	; 0x50
 8008b0e:	0030      	movs	r0, r6
 8008b10:	f7f8 f85a 	bl	8000bc8 <configuration_is_valid>
 8008b14:	2300      	movs	r3, #0
 8008b16:	4298      	cmp	r0, r3
 8008b18:	d000      	beq.n	8008b1c <initialize.lto_priv.136+0x960>
 8008b1a:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8008b1c:	656b      	str	r3, [r5, #84]	; 0x54
 8008b1e:	0030      	movs	r0, r6
 8008b20:	f7f8 f8c7 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8008b24:	65a8      	str	r0, [r5, #88]	; 0x58
 8008b26:	0030      	movs	r0, r6
 8008b28:	f7f8 f8ae 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8008b2c:	65e8      	str	r0, [r5, #92]	; 0x5c
 8008b2e:	0030      	movs	r0, r6
 8008b30:	f7f8 f88b 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8008b34:	6628      	str	r0, [r5, #96]	; 0x60
 8008b36:	0030      	movs	r0, r6
 8008b38:	f7f8 f87c 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008b3c:	67a8      	str	r0, [r5, #120]	; 0x78
 8008b3e:	0030      	movs	r0, r6
 8008b40:	f7f8 f85c 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8008b44:	2601      	movs	r6, #1
 8008b46:	465b      	mov	r3, fp
 8008b48:	4070      	eors	r0, r6
 8008b4a:	b2c0      	uxtb	r0, r0
 8008b4c:	67e8      	str	r0, [r5, #124]	; 0x7c
 8008b4e:	889b      	ldrh	r3, [r3, #4]
 8008b50:	666b      	str	r3, [r5, #100]	; 0x64
 8008b52:	465b      	mov	r3, fp
 8008b54:	895b      	ldrh	r3, [r3, #10]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	66eb      	str	r3, [r5, #108]	; 0x6c
 8008b5a:	465b      	mov	r3, fp
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	33b6      	adds	r3, #182	; 0xb6
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	676b      	str	r3, [r5, #116]	; 0x74
 8008b64:	f7ff f982 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 8008b68:	1d2b      	adds	r3, r5, #4
 8008b6a:	67d8      	str	r0, [r3, #124]	; 0x7c
 8008b6c:	f7ff face 	bl	800810c <get_pll_freq>
 8008b70:	1c07      	adds	r7, r0, #0
 8008b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b74:	f008 fe2e 	bl	80117d4 <__aeabi_ui2f>
 8008b78:	1c04      	adds	r4, r0, #0
 8008b7a:	20fe      	movs	r0, #254	; 0xfe
 8008b7c:	1c39      	adds	r1, r7, #0
 8008b7e:	0580      	lsls	r0, r0, #22
 8008b80:	f007 fdb6 	bl	80106f0 <__aeabi_fdiv>
 8008b84:	1c01      	adds	r1, r0, #0
 8008b86:	1c20      	adds	r0, r4, #0
 8008b88:	f007 fec4 	bl	8010914 <__aeabi_fmul>
 8008b8c:	4653      	mov	r3, sl
 8008b8e:	60d8      	str	r0, [r3, #12]
 8008b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008b94:	35b8      	adds	r5, #184	; 0xb8
 8008b96:	4358      	muls	r0, r3
 8008b98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008b9a:	469c      	mov	ip, r3
 8008b9c:	4460      	add	r0, ip
 8008b9e:	f008 fe19 	bl	80117d4 <__aeabi_ui2f>
 8008ba2:	1c01      	adds	r1, r0, #0
 8008ba4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008ba6:	f007 fda3 	bl	80106f0 <__aeabi_fdiv>
 8008baa:	4653      	mov	r3, sl
 8008bac:	6118      	str	r0, [r3, #16]
 8008bae:	9807      	ldr	r0, [sp, #28]
 8008bb0:	f7ff fabe 	bl	8008130 <points_to_meter.lto_priv.129>
 8008bb4:	4653      	mov	r3, sl
 8008bb6:	6018      	str	r0, [r3, #0]
 8008bb8:	4640      	mov	r0, r8
 8008bba:	f7ff fab9 	bl	8008130 <points_to_meter.lto_priv.129>
 8008bbe:	4653      	mov	r3, sl
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	6098      	str	r0, [r3, #8]
 8008bc4:	f007 ffd8 	bl	8010b78 <__aeabi_fsub>
 8008bc8:	4653      	mov	r3, sl
 8008bca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bcc:	6058      	str	r0, [r3, #4]
 8008bce:	82da      	strh	r2, [r3, #22]
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd6:	8293      	strh	r3, [r2, #20]
 8008bd8:	8316      	strh	r6, [r2, #24]
 8008bda:	9a08      	ldr	r2, [sp, #32]
 8008bdc:	2013      	movs	r0, #19
 8008bde:	8011      	strh	r1, [r2, #0]
 8008be0:	8151      	strh	r1, [r2, #10]
 8008be2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008be4:	8053      	strh	r3, [r2, #2]
 8008be6:	8111      	strh	r1, [r2, #8]
 8008be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bea:	8313      	strh	r3, [r2, #24]
 8008bec:	8091      	strh	r1, [r2, #4]
 8008bee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bf0:	80d6      	strh	r6, [r2, #6]
 8008bf2:	8291      	strh	r1, [r2, #20]
 8008bf4:	82d1      	strh	r1, [r2, #22]
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	8216      	strh	r6, [r2, #16]
 8008bfa:	aa1b      	add	r2, sp, #108	; 0x6c
 8008bfc:	8013      	strh	r3, [r2, #0]
 8008bfe:	6809      	ldr	r1, [r1, #0]
 8008c00:	0033      	movs	r3, r6
 8008c02:	f7f7 fa99 	bl	8000138 <acc_probes_execute_uint16>
 8008c06:	882b      	ldrh	r3, [r5, #0]
 8008c08:	9a08      	ldr	r2, [sp, #32]
 8008c0a:	3303      	adds	r3, #3
 8008c0c:	81d3      	strh	r3, [r2, #14]
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	8193      	strh	r3, [r2, #12]
 8008c14:	0030      	movs	r0, r6
 8008c16:	f7ff faea 	bl	80081ee <initialize.lto_priv.136+0x32>
 8008c1a:	636a      	str	r2, [r5, #52]	; 0x34
 8008c1c:	63aa      	str	r2, [r5, #56]	; 0x38
 8008c1e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8008c20:	e73a      	b.n	8008a98 <initialize.lto_priv.136+0x8dc>
 8008c22:	636a      	str	r2, [r5, #52]	; 0x34
 8008c24:	63ab      	str	r3, [r5, #56]	; 0x38
 8008c26:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008c28:	e736      	b.n	8008a98 <initialize.lto_priv.136+0x8dc>
 8008c2a:	636b      	str	r3, [r5, #52]	; 0x34
 8008c2c:	63ab      	str	r3, [r5, #56]	; 0x38
 8008c2e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008c30:	e732      	b.n	8008a98 <initialize.lto_priv.136+0x8dc>
 8008c32:	940e      	str	r4, [sp, #56]	; 0x38
 8008c34:	e757      	b.n	8008ae6 <initialize.lto_priv.136+0x92a>
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	80000007 	.word	0x80000007
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8008c40:	652b      	str	r3, [r5, #80]	; 0x50
 8008c42:	e764      	b.n	8008b0e <initialize.lto_priv.136+0x952>

08008c44 <calibrate.lto_priv.127>:
 8008c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c46:	4657      	mov	r7, sl
 8008c48:	4645      	mov	r5, r8
 8008c4a:	46de      	mov	lr, fp
 8008c4c:	464e      	mov	r6, r9
 8008c4e:	b5e0      	push	{r5, r6, r7, lr}
 8008c50:	4cb4      	ldr	r4, [pc, #720]	; (8008f24 <calibrate.lto_priv.127+0x2e0>)
 8008c52:	000f      	movs	r7, r1
 8008c54:	44a5      	add	sp, r4
 8008c56:	9337      	str	r3, [sp, #220]	; 0xdc
 8008c58:	4bb3      	ldr	r3, [pc, #716]	; (8008f28 <calibrate.lto_priv.127+0x2e4>)
 8008c5a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c5c:	4698      	mov	r8, r3
 8008c5e:	3330      	adds	r3, #48	; 0x30
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	0004      	movs	r4, r0
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d905      	bls.n	8008c74 <calibrate.lto_priv.127+0x30>
 8008c68:	4643      	mov	r3, r8
 8008c6a:	4ab0      	ldr	r2, [pc, #704]	; (8008f2c <calibrate.lto_priv.127+0x2e8>)
 8008c6c:	49b0      	ldr	r1, [pc, #704]	; (8008f30 <calibrate.lto_priv.127+0x2ec>)
 8008c6e:	2004      	movs	r0, #4
 8008c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c72:	4798      	blx	r3
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	6965      	ldr	r5, [r4, #20]
 8008c78:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7a:	002b      	movs	r3, r5
 8008c7c:	2600      	movs	r6, #0
 8008c7e:	33bc      	adds	r3, #188	; 0xbc
 8008c80:	ac48      	add	r4, sp, #288	; 0x120
 8008c82:	601e      	str	r6, [r3, #0]
 8008c84:	0020      	movs	r0, r4
 8008c86:	f7ff f909 	bl	8007e9c <calculate_pll_divisors.lto_priv.125>
 8008c8a:	42b0      	cmp	r0, r6
 8008c8c:	d10a      	bne.n	8008ca4 <calibrate.lto_priv.127+0x60>
 8008c8e:	2400      	movs	r4, #0
 8008c90:	0020      	movs	r0, r4
 8008c92:	239b      	movs	r3, #155	; 0x9b
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	449d      	add	sp, r3
 8008c98:	bc3c      	pop	{r2, r3, r4, r5}
 8008c9a:	4690      	mov	r8, r2
 8008c9c:	4699      	mov	r9, r3
 8008c9e:	46a2      	mov	sl, r4
 8008ca0:	46ab      	mov	fp, r5
 8008ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca6:	aa4e      	add	r2, sp, #312	; 0x138
 8008ca8:	934e      	str	r3, [sp, #312]	; 0x138
 8008caa:	8863      	ldrh	r3, [r4, #2]
 8008cac:	6879      	ldr	r1, [r7, #4]
 8008cae:	6053      	str	r3, [r2, #4]
 8008cb0:	88a3      	ldrh	r3, [r4, #4]
 8008cb2:	6838      	ldr	r0, [r7, #0]
 8008cb4:	6093      	str	r3, [r2, #8]
 8008cb6:	88e3      	ldrh	r3, [r4, #6]
 8008cb8:	60d3      	str	r3, [r2, #12]
 8008cba:	8923      	ldrh	r3, [r4, #8]
 8008cbc:	8213      	strh	r3, [r2, #16]
 8008cbe:	ab46      	add	r3, sp, #280	; 0x118
 8008cc0:	4699      	mov	r9, r3
 8008cc2:	f7fe fb05 	bl	80072d0 <acc_cpd_cbank_and_vana_calibration>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d0e1      	beq.n	8008c8e <calibrate.lto_priv.127+0x4a>
 8008cca:	002b      	movs	r3, r5
 8008ccc:	33ce      	adds	r3, #206	; 0xce
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	35d0      	adds	r5, #208	; 0xd0
 8008cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8008cd4:	1e5a      	subs	r2, r3, #1
 8008cd6:	4193      	sbcs	r3, r2
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	9338      	str	r3, [sp, #224]	; 0xe0
 8008cdc:	782b      	ldrb	r3, [r5, #0]
 8008cde:	4a95      	ldr	r2, [pc, #596]	; (8008f34 <calibrate.lto_priv.127+0x2f0>)
 8008ce0:	932a      	str	r3, [sp, #168]	; 0xa8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d80e      	bhi.n	8008d06 <calibrate.lto_priv.127+0xc2>
 8008ce8:	4643      	mov	r3, r8
 8008cea:	4a93      	ldr	r2, [pc, #588]	; (8008f38 <calibrate.lto_priv.127+0x2f4>)
 8008cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cee:	4993      	ldr	r1, [pc, #588]	; (8008f3c <calibrate.lto_priv.127+0x2f8>)
 8008cf0:	0030      	movs	r0, r6
 8008cf2:	4798      	blx	r3
 8008cf4:	4b92      	ldr	r3, [pc, #584]	; (8008f40 <calibrate.lto_priv.127+0x2fc>)
 8008cf6:	9617      	str	r6, [sp, #92]	; 0x5c
 8008cf8:	9316      	str	r3, [sp, #88]	; 0x58
 8008cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0c6      	beq.n	8008c8e <calibrate.lto_priv.127+0x4a>
 8008d00:	2400      	movs	r4, #0
 8008d02:	f001 f986 	bl	800a012 <calibrate.lto_priv.127+0x13ce>
 8008d06:	8862      	ldrh	r2, [r4, #2]
 8008d08:	2101      	movs	r1, #1
 8008d0a:	9224      	str	r2, [sp, #144]	; 0x90
 8008d0c:	88a2      	ldrh	r2, [r4, #4]
 8008d0e:	9225      	str	r2, [sp, #148]	; 0x94
 8008d10:	88e2      	ldrh	r2, [r4, #6]
 8008d12:	9226      	str	r2, [sp, #152]	; 0x98
 8008d14:	8922      	ldrh	r2, [r4, #8]
 8008d16:	9227      	str	r2, [sp, #156]	; 0x9c
 8008d18:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8008d1a:	9228      	str	r2, [sp, #160]	; 0xa0
 8008d1c:	464a      	mov	r2, r9
 8008d1e:	7912      	ldrb	r2, [r2, #4]
 8008d20:	9229      	str	r2, [sp, #164]	; 0xa4
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	9210      	str	r2, [sp, #64]	; 0x40
 8008d26:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008d28:	4a86      	ldr	r2, [pc, #536]	; (8008f44 <calibrate.lto_priv.127+0x300>)
 8008d2a:	4684      	mov	ip, r0
 8008d2c:	189a      	adds	r2, r3, r2
 8008d2e:	438a      	bics	r2, r1
 8008d30:	4462      	add	r2, ip
 8008d32:	922b      	str	r2, [sp, #172]	; 0xac
 8008d34:	4a84      	ldr	r2, [pc, #528]	; (8008f48 <calibrate.lto_priv.127+0x304>)
 8008d36:	4683      	mov	fp, r0
 8008d38:	4694      	mov	ip, r2
 8008d3a:	4463      	add	r3, ip
 8008d3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008d3e:	438b      	bics	r3, r1
 8008d40:	449b      	add	fp, r3
 8008d42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d44:	4b81      	ldr	r3, [pc, #516]	; (8008f4c <calibrate.lto_priv.127+0x308>)
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d80a      	bhi.n	8008d60 <calibrate.lto_priv.127+0x11c>
 8008d4a:	4b77      	ldr	r3, [pc, #476]	; (8008f28 <calibrate.lto_priv.127+0x2e4>)
 8008d4c:	001a      	movs	r2, r3
 8008d4e:	3230      	adds	r2, #48	; 0x30
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	428a      	cmp	r2, r1
 8008d54:	d904      	bls.n	8008d60 <calibrate.lto_priv.127+0x11c>
 8008d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d58:	4a7d      	ldr	r2, [pc, #500]	; (8008f50 <calibrate.lto_priv.127+0x30c>)
 8008d5a:	4978      	ldr	r1, [pc, #480]	; (8008f3c <calibrate.lto_priv.127+0x2f8>)
 8008d5c:	2002      	movs	r0, #2
 8008d5e:	4798      	blx	r3
 8008d60:	487c      	ldr	r0, [pc, #496]	; (8008f54 <calibrate.lto_priv.127+0x310>)
 8008d62:	f006 fe70 	bl	800fa46 <acc_diagnostic_log_set_scope>
 8008d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d68:	487b      	ldr	r0, [pc, #492]	; (8008f58 <calibrate.lto_priv.127+0x314>)
 8008d6a:	f006 fe68 	bl	800fa3e <acc_diagnostic_log_scalar>
 8008d6e:	2202      	movs	r2, #2
 8008d70:	2101      	movs	r1, #1
 8008d72:	487a      	ldr	r0, [pc, #488]	; (8008f5c <calibrate.lto_priv.127+0x318>)
 8008d74:	f006 fe66 	bl	800fa44 <acc_diagnostic_log_declare_parameter>
 8008d78:	221f      	movs	r2, #31
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4878      	ldr	r0, [pc, #480]	; (8008f60 <calibrate.lto_priv.127+0x31c>)
 8008d7e:	f006 fe61 	bl	800fa44 <acc_diagnostic_log_declare_parameter>
 8008d82:	227b      	movs	r2, #123	; 0x7b
 8008d84:	2100      	movs	r1, #0
 8008d86:	4877      	ldr	r0, [pc, #476]	; (8008f64 <calibrate.lto_priv.127+0x320>)
 8008d88:	f006 fe5c 	bl	800fa44 <acc_diagnostic_log_declare_parameter>
 8008d8c:	220b      	movs	r2, #11
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4875      	ldr	r0, [pc, #468]	; (8008f68 <calibrate.lto_priv.127+0x324>)
 8008d92:	f006 fe57 	bl	800fa44 <acc_diagnostic_log_declare_parameter>
 8008d96:	2302      	movs	r3, #2
 8008d98:	9336      	str	r3, [sp, #216]	; 0xd8
 8008d9a:	4b69      	ldr	r3, [pc, #420]	; (8008f40 <calibrate.lto_priv.127+0x2fc>)
 8008d9c:	9316      	str	r3, [sp, #88]	; 0x58
 8008d9e:	2300      	movs	r3, #0
 8008da0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008da2:	3302      	adds	r3, #2
 8008da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008da8:	486c      	ldr	r0, [pc, #432]	; (8008f5c <calibrate.lto_priv.127+0x318>)
 8008daa:	f006 fe4a 	bl	800fa42 <acc_diagnostic_log_set_parameter>
 8008dae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008db0:	930a      	str	r3, [sp, #40]	; 0x28
 8008db2:	2300      	movs	r3, #0
 8008db4:	4699      	mov	r9, r3
 8008db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db8:	005b      	lsls	r3, r3, #1
 8008dba:	930d      	str	r3, [sp, #52]	; 0x34
 8008dbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dbe:	4b6b      	ldr	r3, [pc, #428]	; (8008f6c <calibrate.lto_priv.127+0x328>)
 8008dc0:	4694      	mov	ip, r2
 8008dc2:	4463      	add	r3, ip
 8008dc4:	9312      	str	r3, [sp, #72]	; 0x48
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	4649      	mov	r1, r9
 8008dca:	4867      	ldr	r0, [pc, #412]	; (8008f68 <calibrate.lto_priv.127+0x324>)
 8008dcc:	f006 fe39 	bl	800fa42 <acc_diagnostic_log_set_parameter>
 8008dd0:	ab8d      	add	r3, sp, #564	; 0x234
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dd6:	ab80      	add	r3, sp, #512	; 0x200
 8008dd8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ddc:	9480      	str	r4, [sp, #512]	; 0x200
 8008dde:	948d      	str	r4, [sp, #564]	; 0x234
 8008de0:	f007 fa2e 	bl	8010240 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 8008de4:	42a0      	cmp	r0, r4
 8008de6:	d105      	bne.n	8008df4 <calibrate.lto_priv.127+0x1b0>
 8008de8:	4b4f      	ldr	r3, [pc, #316]	; (8008f28 <calibrate.lto_priv.127+0x2e4>)
 8008dea:	4a61      	ldr	r2, [pc, #388]	; (8008f70 <calibrate.lto_priv.127+0x32c>)
 8008dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dee:	4961      	ldr	r1, [pc, #388]	; (8008f74 <calibrate.lto_priv.127+0x330>)
 8008df0:	4798      	blx	r3
 8008df2:	e782      	b.n	8008cfa <calibrate.lto_priv.127+0xb6>
 8008df4:	4b60      	ldr	r3, [pc, #384]	; (8008f78 <calibrate.lto_priv.127+0x334>)
 8008df6:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 8008df8:	9d80      	ldr	r5, [sp, #512]	; 0x200
 8008dfa:	1b1b      	subs	r3, r3, r4
 8008dfc:	4692      	mov	sl, r2
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d900      	bls.n	8008e04 <calibrate.lto_priv.127+0x1c0>
 8008e02:	469a      	mov	sl, r3
 8008e04:	0863      	lsrs	r3, r4, #1
 8008e06:	9311      	str	r3, [sp, #68]	; 0x44
 8008e08:	4653      	mov	r3, sl
 8008e0a:	085a      	lsrs	r2, r3, #1
 8008e0c:	0863      	lsrs	r3, r4, #1
 8008e0e:	0098      	lsls	r0, r3, #2
 8008e10:	4b5a      	ldr	r3, [pc, #360]	; (8008f7c <calibrate.lto_priv.127+0x338>)
 8008e12:	0029      	movs	r1, r5
 8008e14:	18c0      	adds	r0, r0, r3
 8008e16:	f006 fd1f 	bl	800f858 <acc_confprogram_copy>
 8008e1a:	4653      	mov	r3, sl
 8008e1c:	b29f      	uxth	r7, r3
 8008e1e:	4b58      	ldr	r3, [pc, #352]	; (8008f80 <calibrate.lto_priv.127+0x33c>)
 8008e20:	b2a6      	uxth	r6, r4
 8008e22:	4698      	mov	r8, r3
 8008e24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e26:	003a      	movs	r2, r7
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	231b      	movs	r3, #27
 8008e2c:	0031      	movs	r1, r6
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	0028      	movs	r0, r5
 8008e32:	4643      	mov	r3, r8
 8008e34:	f006 fd58 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008e3a:	003a      	movs	r2, r7
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	2319      	movs	r3, #25
 8008e40:	0031      	movs	r1, r6
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	0028      	movs	r0, r5
 8008e46:	4643      	mov	r3, r8
 8008e48:	f006 fd4e 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e4e:	003a      	movs	r2, r7
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	231a      	movs	r3, #26
 8008e54:	0031      	movs	r1, r6
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	0028      	movs	r0, r5
 8008e5a:	4643      	mov	r3, r8
 8008e5c:	f006 fd44 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008e62:	003a      	movs	r2, r7
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	2317      	movs	r3, #23
 8008e68:	0031      	movs	r1, r6
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	0028      	movs	r0, r5
 8008e6e:	4643      	mov	r3, r8
 8008e70:	f006 fd3a 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008e76:	003a      	movs	r2, r7
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	230d      	movs	r3, #13
 8008e7c:	0031      	movs	r1, r6
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	0028      	movs	r0, r5
 8008e82:	4643      	mov	r3, r8
 8008e84:	f006 fd30 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008e8a:	003a      	movs	r2, r7
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	232a      	movs	r3, #42	; 0x2a
 8008e90:	0031      	movs	r1, r6
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	0028      	movs	r0, r5
 8008e96:	4643      	mov	r3, r8
 8008e98:	f006 fd26 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008e9c:	464b      	mov	r3, r9
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	230f      	movs	r3, #15
 8008ea2:	003a      	movs	r2, r7
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	0031      	movs	r1, r6
 8008ea8:	4643      	mov	r3, r8
 8008eaa:	0028      	movs	r0, r5
 8008eac:	f006 fd1c 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb2:	003a      	movs	r2, r7
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	232c      	movs	r3, #44	; 0x2c
 8008eb8:	0031      	movs	r1, r6
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	0028      	movs	r0, r5
 8008ebe:	4643      	mov	r3, r8
 8008ec0:	f006 fd12 	bl	800f8e8 <acc_confprogram_patch_offset>
 8008ec4:	2244      	movs	r2, #68	; 0x44
 8008ec6:	466b      	mov	r3, sp
 8008ec8:	189b      	adds	r3, r3, r2
 8008eca:	8819      	ldrh	r1, [r3, #0]
 8008ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ece:	4653      	mov	r3, sl
 8008ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed2:	f7fd fc0a 	bl	80066ea <acc_sensor_r2_load_confmem>
 8008ed6:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8008ed8:	469c      	mov	ip, r3
 8008eda:	4b2a      	ldr	r3, [pc, #168]	; (8008f84 <calibrate.lto_priv.127+0x340>)
 8008edc:	4464      	add	r4, ip
 8008ede:	429c      	cmp	r4, r3
 8008ee0:	d988      	bls.n	8008df4 <calibrate.lto_priv.127+0x1b0>
 8008ee2:	2118      	movs	r1, #24
 8008ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ee6:	f7fc fbe5 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d105      	bne.n	8008efa <calibrate.lto_priv.127+0x2b6>
 8008eee:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <calibrate.lto_priv.127+0x2e4>)
 8008ef0:	4a25      	ldr	r2, [pc, #148]	; (8008f88 <calibrate.lto_priv.127+0x344>)
 8008ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ef4:	491f      	ldr	r1, [pc, #124]	; (8008f74 <calibrate.lto_priv.127+0x330>)
 8008ef6:	4798      	blx	r3
 8008ef8:	e6ff      	b.n	8008cfa <calibrate.lto_priv.127+0xb6>
 8008efa:	21fa      	movs	r1, #250	; 0xfa
 8008efc:	2300      	movs	r3, #0
 8008efe:	2208      	movs	r2, #8
 8008f00:	00c9      	lsls	r1, r1, #3
 8008f02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f04:	f7f9 fdfa 	bl	8002afc <acc_sensor_protocol_r2_wait_for_specific_event>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d100      	bne.n	8008f0e <calibrate.lto_priv.127+0x2ca>
 8008f0c:	e6f5      	b.n	8008cfa <calibrate.lto_priv.127+0xb6>
 8008f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f10:	2b37      	cmp	r3, #55	; 0x37
 8008f12:	d83d      	bhi.n	8008f90 <calibrate.lto_priv.127+0x34c>
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <calibrate.lto_priv.127+0x2e4>)
 8008f16:	4a1d      	ldr	r2, [pc, #116]	; (8008f8c <calibrate.lto_priv.127+0x348>)
 8008f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f1a:	4916      	ldr	r1, [pc, #88]	; (8008f74 <calibrate.lto_priv.127+0x330>)
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	4798      	blx	r3
 8008f20:	e6eb      	b.n	8008cfa <calibrate.lto_priv.127+0xb6>
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	fffffd94 	.word	0xfffffd94
 8008f28:	200005d0 	.word	0x200005d0
 8008f2c:	0801df95 	.word	0x0801df95
 8008f30:	0801da75 	.word	0x0801da75
 8008f34:	00000313 	.word	0x00000313
 8008f38:	0801d6a8 	.word	0x0801d6a8
 8008f3c:	0801dfb2 	.word	0x0801dfb2
 8008f40:	ff800000 	.word	0xff800000
 8008f44:	fffffda8 	.word	0xfffffda8
 8008f48:	fffffcec 	.word	0xfffffcec
 8008f4c:	000001ff 	.word	0x000001ff
 8008f50:	0801dfc2 	.word	0x0801dfc2
 8008f54:	0801dfed 	.word	0x0801dfed
 8008f58:	0801dbbc 	.word	0x0801dbbc
 8008f5c:	0801dffc 	.word	0x0801dffc
 8008f60:	0801e446 	.word	0x0801e446
 8008f64:	0801e2b6 	.word	0x0801e2b6
 8008f68:	0801e07e 	.word	0x0801e07e
 8008f6c:	08016960 	.word	0x08016960
 8008f70:	0801e005 	.word	0x0801e005
 8008f74:	0801e02a 	.word	0x0801e02a
 8008f78:	000006ac 	.word	0x000006ac
 8008f7c:	0801866c 	.word	0x0801866c
 8008f80:	08017974 	.word	0x08017974
 8008f84:	000006ab 	.word	0x000006ab
 8008f88:	0801e042 	.word	0x0801e042
 8008f8c:	0801dc58 	.word	0x0801dc58
 8008f90:	2219      	movs	r2, #25
 8008f92:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f96:	f003 fea9 	bl	800ccec <internal_buffer_processed_read.constprop.29>
 8008f9a:	0004      	movs	r4, r0
 8008f9c:	2319      	movs	r3, #25
 8008f9e:	0002      	movs	r2, r0
 8008fa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fa2:	200a      	movs	r0, #10
 8008fa4:	f7f7 f8c8 	bl	8000138 <acc_probes_execute_uint16>
 8008fa8:	2232      	movs	r2, #50	; 0x32
 8008faa:	0021      	movs	r1, r4
 8008fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fae:	f00d fa77 	bl	80164a0 <memcpy>
 8008fb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fb4:	f7f9 fd82 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 8008fb8:	9018      	str	r0, [sp, #96]	; 0x60
 8008fba:	902d      	str	r0, [sp, #180]	; 0xb4
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d100      	bne.n	8008fc2 <calibrate.lto_priv.127+0x37e>
 8008fc0:	e69b      	b.n	8008cfa <calibrate.lto_priv.127+0xb6>
 8008fc2:	4cbf      	ldr	r4, [pc, #764]	; (80092c0 <calibrate.lto_priv.127+0x67c>)
 8008fc4:	48bf      	ldr	r0, [pc, #764]	; (80092c4 <calibrate.lto_priv.127+0x680>)
 8008fc6:	0021      	movs	r1, r4
 8008fc8:	f006 fd3a 	bl	800fa40 <acc_diagnostic_log_array>
 8008fcc:	2119      	movs	r1, #25
 8008fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008fd0:	f006 fd34 	bl	800fa3c <acc_diagnostic_log_data_u16>
 8008fd4:	464b      	mov	r3, r9
 8008fd6:	005e      	lsls	r6, r3, #1
 8008fd8:	4bbb      	ldr	r3, [pc, #748]	; (80092c8 <calibrate.lto_priv.127+0x684>)
 8008fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fdc:	3378      	adds	r3, #120	; 0x78
 8008fde:	5ad0      	ldrh	r0, [r2, r3]
 8008fe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fe2:	ad53      	add	r5, sp, #332	; 0x14c
 8008fe4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008fe6:	1ac0      	subs	r0, r0, r3
 8008fe8:	b200      	sxth	r0, r0
 8008fea:	f008 fba9 	bl	8011740 <__aeabi_i2f>
 8008fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff0:	1c07      	adds	r7, r0, #0
 8008ff2:	8818      	ldrh	r0, [r3, #0]
 8008ff4:	f008 fbee 	bl	80117d4 <__aeabi_ui2f>
 8008ff8:	21de      	movs	r1, #222	; 0xde
 8008ffa:	0589      	lsls	r1, r1, #22
 8008ffc:	f007 fc8a 	bl	8010914 <__aeabi_fmul>
 8009000:	21fc      	movs	r1, #252	; 0xfc
 8009002:	0589      	lsls	r1, r1, #22
 8009004:	f007 fdb8 	bl	8010b78 <__aeabi_fsub>
 8009008:	49b0      	ldr	r1, [pc, #704]	; (80092cc <calibrate.lto_priv.127+0x688>)
 800900a:	f007 fc83 	bl	8010914 <__aeabi_fmul>
 800900e:	49b0      	ldr	r1, [pc, #704]	; (80092d0 <calibrate.lto_priv.127+0x68c>)
 8009010:	f007 fc80 	bl	8010914 <__aeabi_fmul>
 8009014:	1c01      	adds	r1, r0, #0
 8009016:	1c38      	adds	r0, r7, #0
 8009018:	f007 fdae 	bl	8010b78 <__aeabi_fsub>
 800901c:	f008 fb70 	bl	8011700 <__aeabi_f2iz>
 8009020:	2301      	movs	r3, #1
 8009022:	469c      	mov	ip, r3
 8009024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009026:	44e1      	add	r9, ip
 8009028:	3332      	adds	r3, #50	; 0x32
 800902a:	930a      	str	r3, [sp, #40]	; 0x28
 800902c:	464b      	mov	r3, r9
 800902e:	5370      	strh	r0, [r6, r5]
 8009030:	2b0c      	cmp	r3, #12
 8009032:	d000      	beq.n	8009036 <calibrate.lto_priv.127+0x3f2>
 8009034:	e6c7      	b.n	8008dc6 <calibrate.lto_priv.127+0x182>
 8009036:	0021      	movs	r1, r4
 8009038:	48a6      	ldr	r0, [pc, #664]	; (80092d4 <calibrate.lto_priv.127+0x690>)
 800903a:	f006 fd01 	bl	800fa40 <acc_diagnostic_log_array>
 800903e:	4649      	mov	r1, r9
 8009040:	0028      	movs	r0, r5
 8009042:	f006 fcfb 	bl	800fa3c <acc_diagnostic_log_data_u16>
 8009046:	2214      	movs	r2, #20
 8009048:	5eab      	ldrsh	r3, [r5, r2]
 800904a:	2700      	movs	r7, #0
 800904c:	930a      	str	r3, [sp, #40]	; 0x28
 800904e:	2216      	movs	r2, #22
 8009050:	5eab      	ldrsh	r3, [r5, r2]
 8009052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009054:	9311      	str	r3, [sp, #68]	; 0x44
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	9314      	str	r3, [sp, #80]	; 0x50
 800905a:	2200      	movs	r2, #0
 800905c:	5eab      	ldrsh	r3, [r5, r2]
 800905e:	2632      	movs	r6, #50	; 0x32
 8009060:	4699      	mov	r9, r3
 8009062:	2202      	movs	r2, #2
 8009064:	5eab      	ldrsh	r3, [r5, r2]
 8009066:	464a      	mov	r2, r9
 8009068:	930d      	str	r3, [sp, #52]	; 0x34
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	9312      	str	r3, [sp, #72]	; 0x48
 800906e:	4b9a      	ldr	r3, [pc, #616]	; (80092d8 <calibrate.lto_priv.127+0x694>)
 8009070:	469a      	mov	sl, r3
 8009072:	b2fb      	uxtb	r3, r7
 8009074:	9315      	str	r3, [sp, #84]	; 0x54
 8009076:	007b      	lsls	r3, r7, #1
 8009078:	5f5a      	ldrsh	r2, [r3, r5]
 800907a:	4690      	mov	r8, r2
 800907c:	2f00      	cmp	r7, #0
 800907e:	d000      	beq.n	8009082 <calibrate.lto_priv.127+0x43e>
 8009080:	e0d8      	b.n	8009234 <calibrate.lto_priv.127+0x5f0>
 8009082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009084:	0034      	movs	r4, r6
 8009086:	4599      	cmp	r9, r3
 8009088:	dd0b      	ble.n	80090a2 <calibrate.lto_priv.127+0x45e>
 800908a:	45d1      	cmp	r9, sl
 800908c:	dc09      	bgt.n	80090a2 <calibrate.lto_priv.127+0x45e>
 800908e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009090:	f008 fb56 	bl	8011740 <__aeabi_i2f>
 8009094:	4991      	ldr	r1, [pc, #580]	; (80092dc <calibrate.lto_priv.127+0x698>)
 8009096:	f008 f935 	bl	8011304 <__aeabi_fcmplt>
 800909a:	2400      	movs	r4, #0
 800909c:	42a0      	cmp	r0, r4
 800909e:	d100      	bne.n	80090a2 <calibrate.lto_priv.127+0x45e>
 80090a0:	0034      	movs	r4, r6
 80090a2:	488f      	ldr	r0, [pc, #572]	; (80092e0 <calibrate.lto_priv.127+0x69c>)
 80090a4:	4440      	add	r0, r8
 80090a6:	17c3      	asrs	r3, r0, #31
 80090a8:	18c0      	adds	r0, r0, r3
 80090aa:	4058      	eors	r0, r3
 80090ac:	f008 fb48 	bl	8011740 <__aeabi_i2f>
 80090b0:	4987      	ldr	r1, [pc, #540]	; (80092d0 <calibrate.lto_priv.127+0x68c>)
 80090b2:	f007 fb1d 	bl	80106f0 <__aeabi_fdiv>
 80090b6:	498b      	ldr	r1, [pc, #556]	; (80092e4 <calibrate.lto_priv.127+0x6a0>)
 80090b8:	f007 fc2c 	bl	8010914 <__aeabi_fmul>
 80090bc:	4680      	mov	r8, r0
 80090be:	0020      	movs	r0, r4
 80090c0:	f008 fb3e 	bl	8011740 <__aeabi_i2f>
 80090c4:	1c01      	adds	r1, r0, #0
 80090c6:	4640      	mov	r0, r8
 80090c8:	f007 f978 	bl	80103bc <__aeabi_fadd>
 80090cc:	f008 f962 	bl	8011394 <__aeabi_f2uiz>
 80090d0:	22a2      	movs	r2, #162	; 0xa2
 80090d2:	ab3c      	add	r3, sp, #240	; 0xf0
 80090d4:	0052      	lsls	r2, r2, #1
 80090d6:	189b      	adds	r3, r3, r2
 80090d8:	55d8      	strb	r0, [r3, r7]
 80090da:	a94b      	add	r1, sp, #300	; 0x12c
 80090dc:	b2fb      	uxtb	r3, r7
 80090de:	547b      	strb	r3, [r7, r1]
 80090e0:	3701      	adds	r7, #1
 80090e2:	2f0c      	cmp	r7, #12
 80090e4:	d1c5      	bne.n	8009072 <calibrate.lto_priv.127+0x42e>
 80090e6:	3a3a      	subs	r2, #58	; 0x3a
 80090e8:	3aff      	subs	r2, #255	; 0xff
 80090ea:	ac8d      	add	r4, sp, #564	; 0x234
 80090ec:	2300      	movs	r3, #0
 80090ee:	0018      	movs	r0, r3
 80090f0:	5c5e      	ldrb	r6, [r3, r1]
 80090f2:	18cd      	adds	r5, r1, r3
 80090f4:	786f      	ldrb	r7, [r5, #1]
 80090f6:	46a9      	mov	r9, r5
 80090f8:	5da5      	ldrb	r5, [r4, r6]
 80090fa:	46a8      	mov	r8, r5
 80090fc:	5de5      	ldrb	r5, [r4, r7]
 80090fe:	45a8      	cmp	r8, r5
 8009100:	d904      	bls.n	800910c <calibrate.lto_priv.127+0x4c8>
 8009102:	464d      	mov	r5, r9
 8009104:	3001      	adds	r0, #1
 8009106:	545f      	strb	r7, [r3, r1]
 8009108:	b2c0      	uxtb	r0, r0
 800910a:	706e      	strb	r6, [r5, #1]
 800910c:	3301      	adds	r3, #1
 800910e:	b2dd      	uxtb	r5, r3
 8009110:	4295      	cmp	r5, r2
 8009112:	d3ed      	bcc.n	80090f0 <calibrate.lto_priv.127+0x4ac>
 8009114:	3a01      	subs	r2, #1
 8009116:	b2d2      	uxtb	r2, r2
 8009118:	2a00      	cmp	r2, #0
 800911a:	d001      	beq.n	8009120 <calibrate.lto_priv.127+0x4dc>
 800911c:	2800      	cmp	r0, #0
 800911e:	d1e5      	bne.n	80090ec <calibrate.lto_priv.127+0x4a8>
 8009120:	4967      	ldr	r1, [pc, #412]	; (80092c0 <calibrate.lto_priv.127+0x67c>)
 8009122:	4871      	ldr	r0, [pc, #452]	; (80092e8 <calibrate.lto_priv.127+0x6a4>)
 8009124:	f006 fc8c 	bl	800fa40 <acc_diagnostic_log_array>
 8009128:	2300      	movs	r3, #0
 800912a:	931a      	str	r3, [sp, #104]	; 0x68
 800912c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800912e:	ab4b      	add	r3, sp, #300	; 0x12c
 8009130:	5cd3      	ldrb	r3, [r2, r3]
 8009132:	2601      	movs	r6, #1
 8009134:	9311      	str	r3, [sp, #68]	; 0x44
 8009136:	932c      	str	r3, [sp, #176]	; 0xb0
 8009138:	2332      	movs	r3, #50	; 0x32
 800913a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800913c:	2700      	movs	r7, #0
 800913e:	4353      	muls	r3, r2
 8009140:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009142:	4694      	mov	ip, r2
 8009144:	4463      	add	r3, ip
 8009146:	930a      	str	r3, [sp, #40]	; 0x28
 8009148:	4698      	mov	r8, r3
 800914a:	2300      	movs	r3, #0
 800914c:	4699      	mov	r9, r3
 800914e:	001d      	movs	r5, r3
 8009150:	001c      	movs	r4, r3
 8009152:	b2b3      	uxth	r3, r6
 8009154:	930d      	str	r3, [sp, #52]	; 0x34
 8009156:	4643      	mov	r3, r8
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	3401      	adds	r4, #1
 800915c:	0018      	movs	r0, r3
 800915e:	469a      	mov	sl, r3
 8009160:	f008 faee 	bl	8011740 <__aeabi_i2f>
 8009164:	1c01      	adds	r1, r0, #0
 8009166:	1c38      	adds	r0, r7, #0
 8009168:	f007 f928 	bl	80103bc <__aeabi_fadd>
 800916c:	b2b3      	uxth	r3, r6
 800916e:	469c      	mov	ip, r3
 8009170:	4643      	mov	r3, r8
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	4465      	add	r5, ip
 8009176:	1c07      	adds	r7, r0, #0
 8009178:	b2a4      	uxth	r4, r4
 800917a:	b2ad      	uxth	r5, r5
 800917c:	4652      	mov	r2, sl
 800917e:	459a      	cmp	sl, r3
 8009180:	d300      	bcc.n	8009184 <calibrate.lto_priv.127+0x540>
 8009182:	e082      	b.n	800928a <calibrate.lto_priv.127+0x646>
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	b29b      	uxth	r3, r3
 8009188:	22fa      	movs	r2, #250	; 0xfa
 800918a:	0092      	lsls	r2, r2, #2
 800918c:	4293      	cmp	r3, r2
 800918e:	d801      	bhi.n	8009194 <calibrate.lto_priv.127+0x550>
 8009190:	2e18      	cmp	r6, #24
 8009192:	d136      	bne.n	8009202 <calibrate.lto_priv.127+0x5be>
 8009194:	2c02      	cmp	r4, #2
 8009196:	d97b      	bls.n	8009290 <calibrate.lto_priv.127+0x64c>
 8009198:	0028      	movs	r0, r5
 800919a:	f008 fb1b 	bl	80117d4 <__aeabi_ui2f>
 800919e:	1c05      	adds	r5, r0, #0
 80091a0:	0020      	movs	r0, r4
 80091a2:	f008 fb17 	bl	80117d4 <__aeabi_ui2f>
 80091a6:	1c01      	adds	r1, r0, #0
 80091a8:	1c28      	adds	r0, r5, #0
 80091aa:	f007 faa1 	bl	80106f0 <__aeabi_fdiv>
 80091ae:	21fe      	movs	r1, #254	; 0xfe
 80091b0:	0589      	lsls	r1, r1, #22
 80091b2:	f007 fce1 	bl	8010b78 <__aeabi_fsub>
 80091b6:	f008 f8ed 	bl	8011394 <__aeabi_f2uiz>
 80091ba:	b283      	uxth	r3, r0
 80091bc:	469a      	mov	sl, r3
 80091be:	464b      	mov	r3, r9
 80091c0:	b2b2      	uxth	r2, r6
 80091c2:	005d      	lsls	r5, r3, #1
 80091c4:	ab73      	add	r3, sp, #460	; 0x1cc
 80091c6:	52ea      	strh	r2, [r5, r3]
 80091c8:	ab8d      	add	r3, sp, #564	; 0x234
 80091ca:	52ec      	strh	r4, [r5, r3]
 80091cc:	0020      	movs	r0, r4
 80091ce:	f008 fab7 	bl	8011740 <__aeabi_i2f>
 80091d2:	1c01      	adds	r1, r0, #0
 80091d4:	1c38      	adds	r0, r7, #0
 80091d6:	f007 fa8b 	bl	80106f0 <__aeabi_fdiv>
 80091da:	f008 f8db 	bl	8011394 <__aeabi_f2uiz>
 80091de:	ab80      	add	r3, sp, #512	; 0x200
 80091e0:	52e8      	strh	r0, [r5, r3]
 80091e2:	ab9a      	add	r3, sp, #616	; 0x268
 80091e4:	469c      	mov	ip, r3
 80091e6:	4650      	mov	r0, sl
 80091e8:	2305      	movs	r3, #5
 80091ea:	4358      	muls	r0, r3
 80091ec:	4465      	add	r5, ip
 80091ee:	464b      	mov	r3, r9
 80091f0:	3d05      	subs	r5, #5
 80091f2:	3dff      	subs	r5, #255	; 0xff
 80091f4:	8028      	strh	r0, [r5, #0]
 80091f6:	2500      	movs	r5, #0
 80091f8:	3301      	adds	r3, #1
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4699      	mov	r9, r3
 80091fe:	002c      	movs	r4, r5
 8009200:	2700      	movs	r7, #0
 8009202:	2302      	movs	r3, #2
 8009204:	469c      	mov	ip, r3
 8009206:	3601      	adds	r6, #1
 8009208:	44e0      	add	r8, ip
 800920a:	2e19      	cmp	r6, #25
 800920c:	d1a1      	bne.n	8009152 <calibrate.lto_priv.127+0x50e>
 800920e:	4b37      	ldr	r3, [pc, #220]	; (80092ec <calibrate.lto_priv.127+0x6a8>)
 8009210:	001a      	movs	r2, r3
 8009212:	3230      	adds	r2, #48	; 0x30
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	2a03      	cmp	r2, #3
 8009218:	d905      	bls.n	8009226 <calibrate.lto_priv.127+0x5e2>
 800921a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800921c:	4a34      	ldr	r2, [pc, #208]	; (80092f0 <calibrate.lto_priv.127+0x6ac>)
 800921e:	464b      	mov	r3, r9
 8009220:	4934      	ldr	r1, [pc, #208]	; (80092f4 <calibrate.lto_priv.127+0x6b0>)
 8009222:	2004      	movs	r0, #4
 8009224:	47a0      	blx	r4
 8009226:	4d31      	ldr	r5, [pc, #196]	; (80092ec <calibrate.lto_priv.127+0x6a8>)
 8009228:	4b33      	ldr	r3, [pc, #204]	; (80092f8 <calibrate.lto_priv.127+0x6b4>)
 800922a:	002e      	movs	r6, r5
 800922c:	2400      	movs	r4, #0
 800922e:	3630      	adds	r6, #48	; 0x30
 8009230:	4698      	mov	r8, r3
 8009232:	e07b      	b.n	800932c <calibrate.lto_priv.127+0x6e8>
 8009234:	b2fa      	uxtb	r2, r7
 8009236:	2a0b      	cmp	r2, #11
 8009238:	d10c      	bne.n	8009254 <calibrate.lto_priv.127+0x610>
 800923a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800923e:	0034      	movs	r4, r6
 8009240:	4293      	cmp	r3, r2
 8009242:	dc00      	bgt.n	8009246 <calibrate.lto_priv.127+0x602>
 8009244:	e72d      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 8009246:	4553      	cmp	r3, sl
 8009248:	dd00      	ble.n	800924c <calibrate.lto_priv.127+0x608>
 800924a:	e72a      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 800924c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800924e:	f008 fa77 	bl	8011740 <__aeabi_i2f>
 8009252:	e71f      	b.n	8009094 <calibrate.lto_priv.127+0x450>
 8009254:	18eb      	adds	r3, r5, r3
 8009256:	1e9a      	subs	r2, r3, #2
 8009258:	2100      	movs	r1, #0
 800925a:	5e52      	ldrsh	r2, [r2, r1]
 800925c:	0034      	movs	r4, r6
 800925e:	4542      	cmp	r2, r8
 8009260:	dc00      	bgt.n	8009264 <calibrate.lto_priv.127+0x620>
 8009262:	e71e      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 8009264:	2002      	movs	r0, #2
 8009266:	5e18      	ldrsh	r0, [r3, r0]
 8009268:	4540      	cmp	r0, r8
 800926a:	db00      	blt.n	800926e <calibrate.lto_priv.127+0x62a>
 800926c:	e719      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 800926e:	4552      	cmp	r2, sl
 8009270:	dd00      	ble.n	8009274 <calibrate.lto_priv.127+0x630>
 8009272:	e716      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 8009274:	45d0      	cmp	r8, sl
 8009276:	dd00      	ble.n	800927a <calibrate.lto_priv.127+0x636>
 8009278:	e713      	b.n	80090a2 <calibrate.lto_priv.127+0x45e>
 800927a:	1a80      	subs	r0, r0, r2
 800927c:	f008 fa60 	bl	8011740 <__aeabi_i2f>
 8009280:	21fc      	movs	r1, #252	; 0xfc
 8009282:	0589      	lsls	r1, r1, #22
 8009284:	f007 fb46 	bl	8010914 <__aeabi_fmul>
 8009288:	e704      	b.n	8009094 <calibrate.lto_priv.127+0x450>
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	b29b      	uxth	r3, r3
 800928e:	e77b      	b.n	8009188 <calibrate.lto_priv.127+0x544>
 8009290:	4b16      	ldr	r3, [pc, #88]	; (80092ec <calibrate.lto_priv.127+0x6a8>)
 8009292:	001a      	movs	r2, r3
 8009294:	3230      	adds	r2, #48	; 0x30
 8009296:	7812      	ldrb	r2, [r2, #0]
 8009298:	2a03      	cmp	r2, #3
 800929a:	d90c      	bls.n	80092b6 <calibrate.lto_priv.127+0x672>
 800929c:	4652      	mov	r2, sl
 800929e:	9401      	str	r4, [sp, #4]
 80092a0:	9200      	str	r2, [sp, #0]
 80092a2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80092a4:	4a15      	ldr	r2, [pc, #84]	; (80092fc <calibrate.lto_priv.127+0x6b8>)
 80092a6:	0033      	movs	r3, r6
 80092a8:	4912      	ldr	r1, [pc, #72]	; (80092f4 <calibrate.lto_priv.127+0x6b0>)
 80092aa:	2004      	movs	r0, #4
 80092ac:	47a0      	blx	r4
 80092ae:	2400      	movs	r4, #0
 80092b0:	2700      	movs	r7, #0
 80092b2:	0025      	movs	r5, r4
 80092b4:	e7a5      	b.n	8009202 <calibrate.lto_priv.127+0x5be>
 80092b6:	2500      	movs	r5, #0
 80092b8:	2700      	movs	r7, #0
 80092ba:	002c      	movs	r4, r5
 80092bc:	e7a1      	b.n	8009202 <calibrate.lto_priv.127+0x5be>
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	0801e074 	.word	0x0801e074
 80092c4:	0801e089 	.word	0x0801e089
 80092c8:	080168e0 	.word	0x080168e0
 80092cc:	3f99999a 	.word	0x3f99999a
 80092d0:	447a0000 	.word	0x447a0000
 80092d4:	0801e099 	.word	0x0801e099
 80092d8:	00000513 	.word	0x00000513
 80092dc:	c2c80000 	.word	0xc2c80000
 80092e0:	fffffc18 	.word	0xfffffc18
 80092e4:	42c80000 	.word	0x42c80000
 80092e8:	0801e0aa 	.word	0x0801e0aa
 80092ec:	200005d0 	.word	0x200005d0
 80092f0:	0801e129 	.word	0x0801e129
 80092f4:	0801e112 	.word	0x0801e112
 80092f8:	0801e13c 	.word	0x0801e13c
 80092fc:	0801e0c1 	.word	0x0801e0c1
 8009300:	2f03      	cmp	r7, #3
 8009302:	d912      	bls.n	800932a <calibrate.lto_priv.127+0x6e6>
 8009304:	0063      	lsls	r3, r4, #1
 8009306:	aa80      	add	r2, sp, #512	; 0x200
 8009308:	5a9a      	ldrh	r2, [r3, r2]
 800930a:	49c4      	ldr	r1, [pc, #784]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 800930c:	9203      	str	r2, [sp, #12]
 800930e:	aa8d      	add	r2, sp, #564	; 0x234
 8009310:	5a9a      	ldrh	r2, [r3, r2]
 8009312:	2004      	movs	r0, #4
 8009314:	9202      	str	r2, [sp, #8]
 8009316:	aa59      	add	r2, sp, #356	; 0x164
 8009318:	5a9a      	ldrh	r2, [r3, r2]
 800931a:	9201      	str	r2, [sp, #4]
 800931c:	aa73      	add	r2, sp, #460	; 0x1cc
 800931e:	5a9b      	ldrh	r3, [r3, r2]
 8009320:	4642      	mov	r2, r8
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8009326:	0023      	movs	r3, r4
 8009328:	47b8      	blx	r7
 800932a:	3401      	adds	r4, #1
 800932c:	b2a3      	uxth	r3, r4
 800932e:	7837      	ldrb	r7, [r6, #0]
 8009330:	4599      	cmp	r9, r3
 8009332:	d8e5      	bhi.n	8009300 <calibrate.lto_priv.127+0x6bc>
 8009334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009336:	881e      	ldrh	r6, [r3, #0]
 8009338:	4bb9      	ldr	r3, [pc, #740]	; (8009620 <calibrate.lto_priv.127+0x9dc>)
 800933a:	429e      	cmp	r6, r3
 800933c:	d825      	bhi.n	800938a <calibrate.lto_priv.127+0x746>
 800933e:	2f03      	cmp	r7, #3
 8009340:	d905      	bls.n	800934e <calibrate.lto_priv.127+0x70a>
 8009342:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8009344:	0033      	movs	r3, r6
 8009346:	4ab7      	ldr	r2, [pc, #732]	; (8009624 <calibrate.lto_priv.127+0x9e0>)
 8009348:	49b4      	ldr	r1, [pc, #720]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 800934a:	2004      	movs	r0, #4
 800934c:	47a0      	blx	r4
 800934e:	4bb6      	ldr	r3, [pc, #728]	; (8009628 <calibrate.lto_priv.127+0x9e4>)
 8009350:	001a      	movs	r2, r3
 8009352:	3230      	adds	r2, #48	; 0x30
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	2a03      	cmp	r2, #3
 8009358:	d907      	bls.n	800936a <calibrate.lto_priv.127+0x726>
 800935a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800935c:	49b3      	ldr	r1, [pc, #716]	; (800962c <calibrate.lto_priv.127+0x9e8>)
 800935e:	9200      	str	r2, [sp, #0]
 8009360:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009362:	4ab3      	ldr	r2, [pc, #716]	; (8009630 <calibrate.lto_priv.127+0x9ec>)
 8009364:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009366:	2004      	movs	r0, #4
 8009368:	47a0      	blx	r4
 800936a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800936c:	3301      	adds	r3, #1
 800936e:	931a      	str	r3, [sp, #104]	; 0x68
 8009370:	2b0c      	cmp	r3, #12
 8009372:	d000      	beq.n	8009376 <calibrate.lto_priv.127+0x732>
 8009374:	e6da      	b.n	800912c <calibrate.lto_priv.127+0x4e8>
 8009376:	3b0b      	subs	r3, #11
 8009378:	930b      	str	r3, [sp, #44]	; 0x2c
 800937a:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <calibrate.lto_priv.127+0x740>
 8009380:	f000 fe3c 	bl	8009ffc <calibrate.lto_priv.127+0x13b8>
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	9336      	str	r3, [sp, #216]	; 0xd8
 8009388:	e50d      	b.n	8008da6 <calibrate.lto_priv.127+0x162>
 800938a:	4baa      	ldr	r3, [pc, #680]	; (8009634 <calibrate.lto_priv.127+0x9f0>)
 800938c:	18f0      	adds	r0, r6, r3
 800938e:	f008 fa21 	bl	80117d4 <__aeabi_ui2f>
 8009392:	49a9      	ldr	r1, [pc, #676]	; (8009638 <calibrate.lto_priv.127+0x9f4>)
 8009394:	f007 fabe 	bl	8010914 <__aeabi_fmul>
 8009398:	21de      	movs	r1, #222	; 0xde
 800939a:	0589      	lsls	r1, r1, #22
 800939c:	f007 faba 	bl	8010914 <__aeabi_fmul>
 80093a0:	1c01      	adds	r1, r0, #0
 80093a2:	48a5      	ldr	r0, [pc, #660]	; (8009638 <calibrate.lto_priv.127+0x9f4>)
 80093a4:	f007 fbe8 	bl	8010b78 <__aeabi_fsub>
 80093a8:	1c01      	adds	r1, r0, #0
 80093aa:	48a4      	ldr	r0, [pc, #656]	; (800963c <calibrate.lto_priv.127+0x9f8>)
 80093ac:	f007 fbe4 	bl	8010b78 <__aeabi_fsub>
 80093b0:	49a1      	ldr	r1, [pc, #644]	; (8009638 <calibrate.lto_priv.127+0x9f4>)
 80093b2:	f007 f99d 	bl	80106f0 <__aeabi_fdiv>
 80093b6:	218f      	movs	r1, #143	; 0x8f
 80093b8:	05c9      	lsls	r1, r1, #23
 80093ba:	f007 faab 	bl	8010914 <__aeabi_fmul>
 80093be:	218e      	movs	r1, #142	; 0x8e
 80093c0:	05c9      	lsls	r1, r1, #23
 80093c2:	f006 fffb 	bl	80103bc <__aeabi_fadd>
 80093c6:	f007 ffe5 	bl	8011394 <__aeabi_f2uiz>
 80093ca:	b284      	uxth	r4, r0
 80093cc:	2f03      	cmp	r7, #3
 80093ce:	d905      	bls.n	80093dc <calibrate.lto_priv.127+0x798>
 80093d0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80093d2:	0023      	movs	r3, r4
 80093d4:	4a9a      	ldr	r2, [pc, #616]	; (8009640 <calibrate.lto_priv.127+0x9fc>)
 80093d6:	4991      	ldr	r1, [pc, #580]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 80093d8:	2004      	movs	r0, #4
 80093da:	47a8      	blx	r5
 80093dc:	2300      	movs	r3, #0
 80093de:	9312      	str	r3, [sp, #72]	; 0x48
 80093e0:	930d      	str	r3, [sp, #52]	; 0x34
 80093e2:	3330      	adds	r3, #48	; 0x30
 80093e4:	4698      	mov	r8, r3
 80093e6:	4f90      	ldr	r7, [pc, #576]	; (8009628 <calibrate.lto_priv.127+0x9e4>)
 80093e8:	ab80      	add	r3, sp, #512	; 0x200
 80093ea:	44b8      	add	r8, r7
 80093ec:	469a      	mov	sl, r3
 80093ee:	e010      	b.n	8009412 <calibrate.lto_priv.127+0x7ce>
 80093f0:	4650      	mov	r0, sl
 80093f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	5a1b      	ldrh	r3, [r3, r0]
 80093f8:	4892      	ldr	r0, [pc, #584]	; (8009644 <calibrate.lto_priv.127+0xa00>)
 80093fa:	4283      	cmp	r3, r0
 80093fc:	d84f      	bhi.n	800949e <calibrate.lto_priv.127+0x85a>
 80093fe:	2903      	cmp	r1, #3
 8009400:	d904      	bls.n	800940c <calibrate.lto_priv.127+0x7c8>
 8009402:	4a91      	ldr	r2, [pc, #580]	; (8009648 <calibrate.lto_priv.127+0xa04>)
 8009404:	4985      	ldr	r1, [pc, #532]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 8009406:	2004      	movs	r0, #4
 8009408:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800940a:	47a8      	blx	r5
 800940c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800940e:	3301      	adds	r3, #1
 8009410:	9312      	str	r3, [sp, #72]	; 0x48
 8009412:	2248      	movs	r2, #72	; 0x48
 8009414:	466b      	mov	r3, sp
 8009416:	189b      	adds	r3, r3, r2
 8009418:	881a      	ldrh	r2, [r3, #0]
 800941a:	4643      	mov	r3, r8
 800941c:	7819      	ldrb	r1, [r3, #0]
 800941e:	454a      	cmp	r2, r9
 8009420:	d3e6      	bcc.n	80093f0 <calibrate.lto_priv.127+0x7ac>
 8009422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009424:	2b01      	cmp	r3, #1
 8009426:	d933      	bls.n	8009490 <calibrate.lto_priv.127+0x84c>
 8009428:	1e9f      	subs	r7, r3, #2
 800942a:	b23f      	sxth	r7, r7
 800942c:	007b      	lsls	r3, r7, #1
 800942e:	9312      	str	r3, [sp, #72]	; 0x48
 8009430:	ad66      	add	r5, sp, #408	; 0x198
 8009432:	ae80      	add	r6, sp, #512	; 0x200
 8009434:	2300      	movs	r3, #0
 8009436:	0039      	movs	r1, r7
 8009438:	469c      	mov	ip, r3
 800943a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800943c:	2900      	cmp	r1, #0
 800943e:	da46      	bge.n	80094ce <calibrate.lto_priv.127+0x88a>
 8009440:	4663      	mov	r3, ip
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f6      	bne.n	8009434 <calibrate.lto_priv.127+0x7f0>
 8009446:	2201      	movs	r2, #1
 8009448:	0015      	movs	r5, r2
 800944a:	a866      	add	r0, sp, #408	; 0x198
 800944c:	8803      	ldrh	r3, [r0, #0]
 800944e:	a980      	add	r1, sp, #512	; 0x200
 8009450:	005b      	lsls	r3, r3, #1
 8009452:	5a5c      	ldrh	r4, [r3, r1]
 8009454:	4e7d      	ldr	r6, [pc, #500]	; (800964c <calibrate.lto_priv.127+0xa08>)
 8009456:	0053      	lsls	r3, r2, #1
 8009458:	5a1b      	ldrh	r3, [r3, r0]
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	5a5b      	ldrh	r3, [r3, r1]
 800945e:	429c      	cmp	r4, r3
 8009460:	d25c      	bcs.n	800951c <calibrate.lto_priv.127+0x8d8>
 8009462:	1b1b      	subs	r3, r3, r4
 8009464:	b29b      	uxth	r3, r3
 8009466:	42b3      	cmp	r3, r6
 8009468:	d801      	bhi.n	800946e <calibrate.lto_priv.127+0x82a>
 800946a:	3501      	adds	r5, #1
 800946c:	b2ad      	uxth	r5, r5
 800946e:	3201      	adds	r2, #1
 8009470:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009472:	b293      	uxth	r3, r2
 8009474:	429f      	cmp	r7, r3
 8009476:	d8ee      	bhi.n	8009456 <calibrate.lto_priv.127+0x812>
 8009478:	4e6b      	ldr	r6, [pc, #428]	; (8009628 <calibrate.lto_priv.127+0x9e4>)
 800947a:	0037      	movs	r7, r6
 800947c:	3730      	adds	r7, #48	; 0x30
 800947e:	9714      	str	r7, [sp, #80]	; 0x50
 8009480:	2200      	movs	r2, #0
 8009482:	1e6b      	subs	r3, r5, #1
 8009484:	0014      	movs	r4, r2
 8009486:	4698      	mov	r8, r3
 8009488:	4544      	cmp	r4, r8
 800948a:	d34a      	bcc.n	8009522 <calibrate.lto_priv.127+0x8de>
 800948c:	2a00      	cmp	r2, #0
 800948e:	d1f7      	bne.n	8009480 <calibrate.lto_priv.127+0x83c>
 8009490:	4c65      	ldr	r4, [pc, #404]	; (8009628 <calibrate.lto_priv.127+0x9e4>)
 8009492:	ab66      	add	r3, sp, #408	; 0x198
 8009494:	0027      	movs	r7, r4
 8009496:	2500      	movs	r5, #0
 8009498:	3730      	adds	r7, #48	; 0x30
 800949a:	4698      	mov	r8, r3
 800949c:	e07b      	b.n	8009596 <calibrate.lto_priv.127+0x952>
 800949e:	486c      	ldr	r0, [pc, #432]	; (8009650 <calibrate.lto_priv.127+0xa0c>)
 80094a0:	1830      	adds	r0, r6, r0
 80094a2:	4283      	cmp	r3, r0
 80094a4:	d907      	bls.n	80094b6 <calibrate.lto_priv.127+0x872>
 80094a6:	2903      	cmp	r1, #3
 80094a8:	d9b0      	bls.n	800940c <calibrate.lto_priv.127+0x7c8>
 80094aa:	4a6a      	ldr	r2, [pc, #424]	; (8009654 <calibrate.lto_priv.127+0xa10>)
 80094ac:	495b      	ldr	r1, [pc, #364]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 80094ae:	2004      	movs	r0, #4
 80094b0:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80094b2:	47a8      	blx	r5
 80094b4:	e7aa      	b.n	800940c <calibrate.lto_priv.127+0x7c8>
 80094b6:	a99a      	add	r1, sp, #616	; 0x268
 80094b8:	468c      	mov	ip, r1
 80094ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094bc:	005b      	lsls	r3, r3, #1
 80094be:	4463      	add	r3, ip
 80094c0:	3bd0      	subs	r3, #208	; 0xd0
 80094c2:	801a      	strh	r2, [r3, #0]
 80094c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094c6:	3301      	adds	r3, #1
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	930d      	str	r3, [sp, #52]	; 0x34
 80094cc:	e79e      	b.n	800940c <calibrate.lto_priv.127+0x7c8>
 80094ce:	5b43      	ldrh	r3, [r0, r5]
 80094d0:	4699      	mov	r9, r3
 80094d2:	182b      	adds	r3, r5, r0
 80094d4:	4698      	mov	r8, r3
 80094d6:	885b      	ldrh	r3, [r3, #2]
 80094d8:	469a      	mov	sl, r3
 80094da:	464b      	mov	r3, r9
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	5b9a      	ldrh	r2, [r3, r6]
 80094e0:	4294      	cmp	r4, r2
 80094e2:	d215      	bcs.n	8009510 <calibrate.lto_priv.127+0x8cc>
 80094e4:	1b12      	subs	r2, r2, r4
 80094e6:	b292      	uxth	r2, r2
 80094e8:	4653      	mov	r3, sl
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	5af3      	ldrh	r3, [r6, r3]
 80094ee:	429c      	cmp	r4, r3
 80094f0:	d211      	bcs.n	8009516 <calibrate.lto_priv.127+0x8d2>
 80094f2:	1b1b      	subs	r3, r3, r4
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d906      	bls.n	8009508 <calibrate.lto_priv.127+0x8c4>
 80094fa:	4653      	mov	r3, sl
 80094fc:	464a      	mov	r2, r9
 80094fe:	5343      	strh	r3, [r0, r5]
 8009500:	4643      	mov	r3, r8
 8009502:	805a      	strh	r2, [r3, #2]
 8009504:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009506:	469c      	mov	ip, r3
 8009508:	3901      	subs	r1, #1
 800950a:	b209      	sxth	r1, r1
 800950c:	3802      	subs	r0, #2
 800950e:	e795      	b.n	800943c <calibrate.lto_priv.127+0x7f8>
 8009510:	1aa2      	subs	r2, r4, r2
 8009512:	b292      	uxth	r2, r2
 8009514:	e7e8      	b.n	80094e8 <calibrate.lto_priv.127+0x8a4>
 8009516:	1ae3      	subs	r3, r4, r3
 8009518:	b29b      	uxth	r3, r3
 800951a:	e7ec      	b.n	80094f6 <calibrate.lto_priv.127+0x8b2>
 800951c:	1ae3      	subs	r3, r4, r3
 800951e:	b29b      	uxth	r3, r3
 8009520:	e7a1      	b.n	8009466 <calibrate.lto_priv.127+0x822>
 8009522:	a966      	add	r1, sp, #408	; 0x198
 8009524:	468c      	mov	ip, r1
 8009526:	a866      	add	r0, sp, #408	; 0x198
 8009528:	4681      	mov	r9, r0
 800952a:	0063      	lsls	r3, r4, #1
 800952c:	449c      	add	ip, r3
 800952e:	3302      	adds	r3, #2
 8009530:	444b      	add	r3, r9
 8009532:	4661      	mov	r1, ip
 8009534:	8818      	ldrh	r0, [r3, #0]
 8009536:	8809      	ldrh	r1, [r1, #0]
 8009538:	4681      	mov	r9, r0
 800953a:	004f      	lsls	r7, r1, #1
 800953c:	46ba      	mov	sl, r7
 800953e:	464f      	mov	r7, r9
 8009540:	007f      	lsls	r7, r7, #1
 8009542:	9712      	str	r7, [sp, #72]	; 0x48
 8009544:	4657      	mov	r7, sl
 8009546:	a88d      	add	r0, sp, #564	; 0x234
 8009548:	5a3f      	ldrh	r7, [r7, r0]
 800954a:	46ba      	mov	sl, r7
 800954c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800954e:	5a38      	ldrh	r0, [r7, r0]
 8009550:	4582      	cmp	sl, r0
 8009552:	d20e      	bcs.n	8009572 <calibrate.lto_priv.127+0x92e>
 8009554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009556:	464f      	mov	r7, r9
 8009558:	7810      	ldrb	r0, [r2, #0]
 800955a:	4662      	mov	r2, ip
 800955c:	8017      	strh	r7, [r2, #0]
 800955e:	8019      	strh	r1, [r3, #0]
 8009560:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009562:	2803      	cmp	r0, #3
 8009564:	d905      	bls.n	8009572 <calibrate.lto_priv.127+0x92e>
 8009566:	4a3c      	ldr	r2, [pc, #240]	; (8009658 <calibrate.lto_priv.127+0xa14>)
 8009568:	492c      	ldr	r1, [pc, #176]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 800956a:	2004      	movs	r0, #4
 800956c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800956e:	4798      	blx	r3
 8009570:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009572:	3401      	adds	r4, #1
 8009574:	b2a4      	uxth	r4, r4
 8009576:	e787      	b.n	8009488 <calibrate.lto_priv.127+0x844>
 8009578:	2e03      	cmp	r6, #3
 800957a:	d90b      	bls.n	8009594 <calibrate.lto_priv.127+0x950>
 800957c:	4642      	mov	r2, r8
 800957e:	006b      	lsls	r3, r5, #1
 8009580:	5a9b      	ldrh	r3, [r3, r2]
 8009582:	aa80      	add	r2, sp, #512	; 0x200
 8009584:	0059      	lsls	r1, r3, #1
 8009586:	5a8a      	ldrh	r2, [r1, r2]
 8009588:	2004      	movs	r0, #4
 800958a:	9200      	str	r2, [sp, #0]
 800958c:	4923      	ldr	r1, [pc, #140]	; (800961c <calibrate.lto_priv.127+0x9d8>)
 800958e:	4a33      	ldr	r2, [pc, #204]	; (800965c <calibrate.lto_priv.127+0xa18>)
 8009590:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8009592:	47b0      	blx	r6
 8009594:	3501      	adds	r5, #1
 8009596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009598:	b2ab      	uxth	r3, r5
 800959a:	783e      	ldrb	r6, [r7, #0]
 800959c:	429a      	cmp	r2, r3
 800959e:	d8eb      	bhi.n	8009578 <calibrate.lto_priv.127+0x934>
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	d100      	bne.n	80095a6 <calibrate.lto_priv.127+0x962>
 80095a4:	e6d3      	b.n	800934e <calibrate.lto_priv.127+0x70a>
 80095a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a8:	4a2d      	ldr	r2, [pc, #180]	; (8009660 <calibrate.lto_priv.127+0xa1c>)
 80095aa:	0059      	lsls	r1, r3, #1
 80095ac:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <calibrate.lto_priv.127+0xa20>)
 80095ae:	3278      	adds	r2, #120	; 0x78
 80095b0:	185b      	adds	r3, r3, r1
 80095b2:	5a88      	ldrh	r0, [r1, r2]
 80095b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80095b6:	1ac0      	subs	r0, r0, r3
 80095b8:	b200      	sxth	r0, r0
 80095ba:	f008 f8c1 	bl	8011740 <__aeabi_i2f>
 80095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c0:	1c05      	adds	r5, r0, #0
 80095c2:	8818      	ldrh	r0, [r3, #0]
 80095c4:	f008 f906 	bl	80117d4 <__aeabi_ui2f>
 80095c8:	21de      	movs	r1, #222	; 0xde
 80095ca:	0589      	lsls	r1, r1, #22
 80095cc:	f007 f9a2 	bl	8010914 <__aeabi_fmul>
 80095d0:	21fc      	movs	r1, #252	; 0xfc
 80095d2:	0589      	lsls	r1, r1, #22
 80095d4:	f007 fad0 	bl	8010b78 <__aeabi_fsub>
 80095d8:	4917      	ldr	r1, [pc, #92]	; (8009638 <calibrate.lto_priv.127+0x9f4>)
 80095da:	f007 f99b 	bl	8010914 <__aeabi_fmul>
 80095de:	4922      	ldr	r1, [pc, #136]	; (8009668 <calibrate.lto_priv.127+0xa24>)
 80095e0:	f007 f998 	bl	8010914 <__aeabi_fmul>
 80095e4:	1c01      	adds	r1, r0, #0
 80095e6:	1c28      	adds	r0, r5, #0
 80095e8:	f007 fac6 	bl	8010b78 <__aeabi_fsub>
 80095ec:	f008 f888 	bl	8011700 <__aeabi_f2iz>
 80095f0:	aa3c      	add	r2, sp, #240	; 0xf0
 80095f2:	4694      	mov	ip, r2
 80095f4:	2322      	movs	r3, #34	; 0x22
 80095f6:	22e6      	movs	r2, #230	; 0xe6
 80095f8:	b205      	sxth	r5, r0
 80095fa:	4463      	add	r3, ip
 80095fc:	801d      	strh	r5, [r3, #0]
 80095fe:	4b1b      	ldr	r3, [pc, #108]	; (800966c <calibrate.lto_priv.127+0xa28>)
 8009600:	0052      	lsls	r2, r2, #1
 8009602:	18eb      	adds	r3, r5, r3
 8009604:	b29b      	uxth	r3, r3
 8009606:	4293      	cmp	r3, r2
 8009608:	d934      	bls.n	8009674 <calibrate.lto_priv.127+0xa30>
 800960a:	2e03      	cmp	r6, #3
 800960c:	d800      	bhi.n	8009610 <calibrate.lto_priv.127+0x9cc>
 800960e:	e69e      	b.n	800934e <calibrate.lto_priv.127+0x70a>
 8009610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009612:	4a17      	ldr	r2, [pc, #92]	; (8009670 <calibrate.lto_priv.127+0xa2c>)
 8009614:	4905      	ldr	r1, [pc, #20]	; (800962c <calibrate.lto_priv.127+0x9e8>)
 8009616:	2004      	movs	r0, #4
 8009618:	4798      	blx	r3
 800961a:	e698      	b.n	800934e <calibrate.lto_priv.127+0x70a>
 800961c:	0801e112 	.word	0x0801e112
 8009620:	000087cf 	.word	0x000087cf
 8009624:	0801e17e 	.word	0x0801e17e
 8009628:	200005d0 	.word	0x200005d0
 800962c:	0801dfb2 	.word	0x0801dfb2
 8009630:	0801e625 	.word	0x0801e625
 8009634:	ffff8000 	.word	0xffff8000
 8009638:	3f99999a 	.word	0x3f99999a
 800963c:	3f866666 	.word	0x3f866666
 8009640:	0801e1a3 	.word	0x0801e1a3
 8009644:	00001387 	.word	0x00001387
 8009648:	0801e1b3 	.word	0x0801e1b3
 800964c:	000007cf 	.word	0x000007cf
 8009650:	fffff830 	.word	0xfffff830
 8009654:	0801e1e1 	.word	0x0801e1e1
 8009658:	0801e20f 	.word	0x0801e20f
 800965c:	0801e240 	.word	0x0801e240
 8009660:	080168e0 	.word	0x080168e0
 8009664:	08016960 	.word	0x08016960
 8009668:	447a0000 	.word	0x447a0000
 800966c:	fffffcf4 	.word	0xfffffcf4
 8009670:	0801e262 	.word	0x0801e262
 8009674:	ab66      	add	r3, sp, #408	; 0x198
 8009676:	881f      	ldrh	r7, [r3, #0]
 8009678:	ab59      	add	r3, sp, #356	; 0x164
 800967a:	007a      	lsls	r2, r7, #1
 800967c:	5ad3      	ldrh	r3, [r2, r3]
 800967e:	2105      	movs	r1, #5
 8009680:	0018      	movs	r0, r3
 8009682:	9312      	str	r3, [sp, #72]	; 0x48
 8009684:	f007 fc78 	bl	8010f78 <__udivsi3>
 8009688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968a:	b2c0      	uxtb	r0, r0
 800968c:	0040      	lsls	r0, r0, #1
 800968e:	5ac0      	ldrh	r0, [r0, r3]
 8009690:	f008 f8a0 	bl	80117d4 <__aeabi_ui2f>
 8009694:	21de      	movs	r1, #222	; 0xde
 8009696:	0589      	lsls	r1, r1, #22
 8009698:	f007 f93c 	bl	8010914 <__aeabi_fmul>
 800969c:	21fc      	movs	r1, #252	; 0xfc
 800969e:	0589      	lsls	r1, r1, #22
 80096a0:	f007 fa6a 	bl	8010b78 <__aeabi_fsub>
 80096a4:	49cd      	ldr	r1, [pc, #820]	; (80099dc <calibrate.lto_priv.127+0xd98>)
 80096a6:	f007 f935 	bl	8010914 <__aeabi_fmul>
 80096aa:	49cd      	ldr	r1, [pc, #820]	; (80099e0 <calibrate.lto_priv.127+0xd9c>)
 80096ac:	f007 f932 	bl	8010914 <__aeabi_fmul>
 80096b0:	4680      	mov	r8, r0
 80096b2:	0028      	movs	r0, r5
 80096b4:	f008 f844 	bl	8011740 <__aeabi_i2f>
 80096b8:	1c01      	adds	r1, r0, #0
 80096ba:	4640      	mov	r0, r8
 80096bc:	f006 fe7e 	bl	80103bc <__aeabi_fadd>
 80096c0:	f008 f81e 	bl	8011700 <__aeabi_f2iz>
 80096c4:	ab45      	add	r3, sp, #276	; 0x114
 80096c6:	8018      	strh	r0, [r3, #0]
 80096c8:	2e03      	cmp	r6, #3
 80096ca:	d907      	bls.n	80096dc <calibrate.lto_priv.127+0xa98>
 80096cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ce:	4ac5      	ldr	r2, [pc, #788]	; (80099e4 <calibrate.lto_priv.127+0xda0>)
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80096d4:	003b      	movs	r3, r7
 80096d6:	49c4      	ldr	r1, [pc, #784]	; (80099e8 <calibrate.lto_priv.127+0xda4>)
 80096d8:	2004      	movs	r0, #4
 80096da:	47a0      	blx	r4
 80096dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80096de:	48c3      	ldr	r0, [pc, #780]	; (80099ec <calibrate.lto_priv.127+0xda8>)
 80096e0:	f006 f9af 	bl	800fa42 <acc_diagnostic_log_set_parameter>
 80096e4:	4dc2      	ldr	r5, [pc, #776]	; (80099f0 <calibrate.lto_priv.127+0xdac>)
 80096e6:	48c3      	ldr	r0, [pc, #780]	; (80099f4 <calibrate.lto_priv.127+0xdb0>)
 80096e8:	0029      	movs	r1, r5
 80096ea:	ac45      	add	r4, sp, #276	; 0x114
 80096ec:	f006 f9a8 	bl	800fa40 <acc_diagnostic_log_array>
 80096f0:	0020      	movs	r0, r4
 80096f2:	f003 fb5c 	bl	800cdae <acc_diagnostic_log_data_i16.constprop.19>
 80096f6:	0029      	movs	r1, r5
 80096f8:	48bf      	ldr	r0, [pc, #764]	; (80099f8 <calibrate.lto_priv.127+0xdb4>)
 80096fa:	f006 f9a1 	bl	800fa40 <acc_diagnostic_log_array>
 80096fe:	ab3c      	add	r3, sp, #240	; 0xf0
 8009700:	469c      	mov	ip, r3
 8009702:	2022      	movs	r0, #34	; 0x22
 8009704:	4460      	add	r0, ip
 8009706:	f003 fb52 	bl	800cdae <acc_diagnostic_log_data_i16.constprop.19>
 800970a:	4abc      	ldr	r2, [pc, #752]	; (80099fc <calibrate.lto_priv.127+0xdb8>)
 800970c:	8823      	ldrh	r3, [r4, #0]
 800970e:	4694      	mov	ip, r2
 8009710:	2200      	movs	r2, #0
 8009712:	4463      	add	r3, ip
 8009714:	b29b      	uxth	r3, r3
 8009716:	9223      	str	r2, [sp, #140]	; 0x8c
 8009718:	2bc8      	cmp	r3, #200	; 0xc8
 800971a:	d900      	bls.n	800971e <calibrate.lto_priv.127+0xada>
 800971c:	e0a9      	b.n	8009872 <calibrate.lto_priv.127+0xc2e>
 800971e:	2301      	movs	r3, #1
 8009720:	469a      	mov	sl, r3
 8009722:	4bb7      	ldr	r3, [pc, #732]	; (8009a00 <calibrate.lto_priv.127+0xdbc>)
 8009724:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009726:	332c      	adds	r3, #44	; 0x2c
 8009728:	5cd3      	ldrb	r3, [r2, r3]
 800972a:	48b6      	ldr	r0, [pc, #728]	; (8009a04 <calibrate.lto_priv.127+0xdc0>)
 800972c:	0019      	movs	r1, r3
 800972e:	9320      	str	r3, [sp, #128]	; 0x80
 8009730:	f006 f987 	bl	800fa42 <acc_diagnostic_log_set_parameter>
 8009734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009736:	2280      	movs	r2, #128	; 0x80
 8009738:	932e      	str	r3, [sp, #184]	; 0xb8
 800973a:	466b      	mov	r3, sp
 800973c:	189b      	adds	r3, r3, r2
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	009c      	lsls	r4, r3, #2
 8009742:	0020      	movs	r0, r4
 8009744:	303e      	adds	r0, #62	; 0x3e
 8009746:	9322      	str	r3, [sp, #136]	; 0x88
 8009748:	287b      	cmp	r0, #123	; 0x7b
 800974a:	d800      	bhi.n	800974e <calibrate.lto_priv.127+0xb0a>
 800974c:	e09e      	b.n	800988c <calibrate.lto_priv.127+0xc48>
 800974e:	217c      	movs	r1, #124	; 0x7c
 8009750:	f007 fc98 	bl	8011084 <__aeabi_uidivmod>
 8009754:	2200      	movs	r2, #0
 8009756:	4653      	mov	r3, sl
 8009758:	0015      	movs	r5, r2
 800975a:	0020      	movs	r0, r4
 800975c:	b28c      	uxth	r4, r1
 800975e:	2100      	movs	r1, #0
 8009760:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009762:	428e      	cmp	r6, r1
 8009764:	d000      	beq.n	8009768 <calibrate.lto_priv.127+0xb24>
 8009766:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009768:	465e      	mov	r6, fp
 800976a:	62b4      	str	r4, [r6, #40]	; 0x28
 800976c:	4654      	mov	r4, sl
 800976e:	62f0      	str	r0, [r6, #44]	; 0x2c
 8009770:	6333      	str	r3, [r6, #48]	; 0x30
 8009772:	6433      	str	r3, [r6, #64]	; 0x40
 8009774:	64f4      	str	r4, [r6, #76]	; 0x4c
 8009776:	2300      	movs	r3, #0
 8009778:	65b4      	str	r4, [r6, #88]	; 0x58
 800977a:	2003      	movs	r0, #3
 800977c:	465c      	mov	r4, fp
 800977e:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8009780:	6370      	str	r0, [r6, #52]	; 0x34
 8009782:	6037      	str	r7, [r6, #0]
 8009784:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009786:	63b5      	str	r5, [r6, #56]	; 0x38
 8009788:	6077      	str	r7, [r6, #4]
 800978a:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800978c:	63f2      	str	r2, [r6, #60]	; 0x3c
 800978e:	60b7      	str	r7, [r6, #8]
 8009790:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8009792:	001a      	movs	r2, r3
 8009794:	81b7      	strh	r7, [r6, #12]
 8009796:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8009798:	6473      	str	r3, [r6, #68]	; 0x44
 800979a:	6137      	str	r7, [r6, #16]
 800979c:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 800979e:	64b3      	str	r3, [r6, #72]	; 0x48
 80097a0:	6177      	str	r7, [r6, #20]
 80097a2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80097a4:	6533      	str	r3, [r6, #80]	; 0x50
 80097a6:	61b7      	str	r7, [r6, #24]
 80097a8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80097aa:	6573      	str	r3, [r6, #84]	; 0x54
 80097ac:	61f7      	str	r7, [r6, #28]
 80097ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80097b0:	3604      	adds	r6, #4
 80097b2:	61f7      	str	r7, [r6, #28]
 80097b4:	65e3      	str	r3, [r4, #92]	; 0x5c
 80097b6:	4653      	mov	r3, sl
 80097b8:	438b      	bics	r3, r1
 80097ba:	65f2      	str	r2, [r6, #92]	; 0x5c
 80097bc:	4651      	mov	r1, sl
 80097be:	66b3      	str	r3, [r6, #104]	; 0x68
 80097c0:	465b      	mov	r3, fp
 80097c2:	6632      	str	r2, [r6, #96]	; 0x60
 80097c4:	6672      	str	r2, [r6, #100]	; 0x64
 80097c6:	66f1      	str	r1, [r6, #108]	; 0x6c
 80097c8:	6731      	str	r1, [r6, #112]	; 0x70
 80097ca:	679a      	str	r2, [r3, #120]	; 0x78
 80097cc:	2316      	movs	r3, #22
 80097ce:	67b3      	str	r3, [r6, #120]	; 0x78
 80097d0:	230f      	movs	r3, #15
 80097d2:	67f3      	str	r3, [r6, #124]	; 0x7c
 80097d4:	465b      	mov	r3, fp
 80097d6:	0011      	movs	r1, r2
 80097d8:	3308      	adds	r3, #8
 80097da:	67d9      	str	r1, [r3, #124]	; 0x7c
 80097dc:	465d      	mov	r5, fp
 80097de:	465b      	mov	r3, fp
 80097e0:	2207      	movs	r2, #7
 80097e2:	3388      	adds	r3, #136	; 0x88
 80097e4:	358c      	adds	r5, #140	; 0x8c
 80097e6:	7029      	strb	r1, [r5, #0]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	3a01      	subs	r2, #1
 80097ec:	609a      	str	r2, [r3, #8]
 80097ee:	3494      	adds	r4, #148	; 0x94
 80097f0:	3a08      	subs	r2, #8
 80097f2:	6020      	str	r0, [r4, #0]
 80097f4:	465f      	mov	r7, fp
 80097f6:	611a      	str	r2, [r3, #16]
 80097f8:	6159      	str	r1, [r3, #20]
 80097fa:	6199      	str	r1, [r3, #24]
 80097fc:	3305      	adds	r3, #5
 80097fe:	7019      	strb	r1, [r3, #0]
 8009800:	4653      	mov	r3, sl
 8009802:	37a4      	adds	r7, #164	; 0xa4
 8009804:	603b      	str	r3, [r7, #0]
 8009806:	465b      	mov	r3, fp
 8009808:	4652      	mov	r2, sl
 800980a:	33a8      	adds	r3, #168	; 0xa8
 800980c:	6019      	str	r1, [r3, #0]
 800980e:	715a      	strb	r2, [r3, #5]
 8009810:	f7fe fb2c 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 8009814:	465b      	mov	r3, fp
 8009816:	2100      	movs	r1, #0
 8009818:	33b0      	adds	r3, #176	; 0xb0
 800981a:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800981c:	6018      	str	r0, [r3, #0]
 800981e:	3b04      	subs	r3, #4
 8009820:	609a      	str	r2, [r3, #8]
 8009822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009824:	7019      	strb	r1, [r3, #0]
 8009826:	3a01      	subs	r2, #1
 8009828:	60da      	str	r2, [r3, #12]
 800982a:	aa3c      	add	r2, sp, #240	; 0xf0
 800982c:	4694      	mov	ip, r2
 800982e:	2322      	movs	r3, #34	; 0x22
 8009830:	4463      	add	r3, ip
 8009832:	2200      	movs	r2, #0
 8009834:	5e9b      	ldrsh	r3, [r3, r2]
 8009836:	a98d      	add	r1, sp, #564	; 0x234
 8009838:	933a      	str	r3, [sp, #232]	; 0xe8
 800983a:	ab45      	add	r3, sp, #276	; 0x114
 800983c:	2200      	movs	r2, #0
 800983e:	5e9b      	ldrsh	r3, [r3, r2]
 8009840:	4658      	mov	r0, fp
 8009842:	933b      	str	r3, [sp, #236]	; 0xec
 8009844:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8009846:	6824      	ldr	r4, [r4, #0]
 8009848:	4699      	mov	r9, r3
 800984a:	782b      	ldrb	r3, [r5, #0]
 800984c:	683f      	ldr	r7, [r7, #0]
 800984e:	930a      	str	r3, [sp, #40]	; 0x28
 8009850:	f006 fd74 	bl	801033c <acc_cpd_linear_sweep_get_info>
 8009854:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 8009856:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8009858:	429a      	cmp	r2, r3
 800985a:	d11b      	bne.n	8009894 <calibrate.lto_priv.127+0xc50>
 800985c:	4b6a      	ldr	r3, [pc, #424]	; (8009a08 <calibrate.lto_priv.127+0xdc4>)
 800985e:	4a6b      	ldr	r2, [pc, #428]	; (8009a0c <calibrate.lto_priv.127+0xdc8>)
 8009860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009862:	4961      	ldr	r1, [pc, #388]	; (80099e8 <calibrate.lto_priv.127+0xda4>)
 8009864:	2000      	movs	r0, #0
 8009866:	4798      	blx	r3
 8009868:	2300      	movs	r3, #0
 800986a:	9322      	str	r3, [sp, #136]	; 0x88
 800986c:	932e      	str	r3, [sp, #184]	; 0xb8
 800986e:	931c      	str	r3, [sp, #112]	; 0x70
 8009870:	e085      	b.n	800997e <calibrate.lto_priv.127+0xd3a>
 8009872:	4b65      	ldr	r3, [pc, #404]	; (8009a08 <calibrate.lto_priv.127+0xdc4>)
 8009874:	001a      	movs	r2, r3
 8009876:	3230      	adds	r2, #48	; 0x30
 8009878:	7812      	ldrb	r2, [r2, #0]
 800987a:	2a03      	cmp	r2, #3
 800987c:	d800      	bhi.n	8009880 <calibrate.lto_priv.127+0xc3c>
 800987e:	e566      	b.n	800934e <calibrate.lto_priv.127+0x70a>
 8009880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009882:	4a63      	ldr	r2, [pc, #396]	; (8009a10 <calibrate.lto_priv.127+0xdcc>)
 8009884:	4958      	ldr	r1, [pc, #352]	; (80099e8 <calibrate.lto_priv.127+0xda4>)
 8009886:	2004      	movs	r0, #4
 8009888:	4798      	blx	r3
 800988a:	e560      	b.n	800934e <calibrate.lto_priv.127+0x70a>
 800988c:	2203      	movs	r2, #3
 800988e:	4655      	mov	r5, sl
 8009890:	2300      	movs	r3, #0
 8009892:	e764      	b.n	800975e <calibrate.lto_priv.127+0xb1a>
 8009894:	465b      	mov	r3, fp
 8009896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009898:	9910      	ldr	r1, [sp, #64]	; 0x40
 800989a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989c:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 800989e:	f7fc ff5f 	bl	8006760 <acc_cpd_linear_sweep_load_program>
 80098a2:	901f      	str	r0, [sp, #124]	; 0x7c
 80098a4:	901c      	str	r0, [sp, #112]	; 0x70
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0de      	beq.n	8009868 <calibrate.lto_priv.127+0xc24>
 80098aa:	2600      	movs	r6, #0
 80098ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098ae:	42b3      	cmp	r3, r6
 80098b0:	d000      	beq.n	80098b4 <calibrate.lto_priv.127+0xc70>
 80098b2:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80098b4:	0038      	movs	r0, r7
 80098b6:	f007 ff8d 	bl	80117d4 <__aeabi_ui2f>
 80098ba:	1c01      	adds	r1, r0, #0
 80098bc:	4855      	ldr	r0, [pc, #340]	; (8009a14 <calibrate.lto_priv.127+0xdd0>)
 80098be:	f006 ff17 	bl	80106f0 <__aeabi_fdiv>
 80098c2:	f007 fd67 	bl	8011394 <__aeabi_f2uiz>
 80098c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c8:	3401      	adds	r4, #1
 80098ca:	469c      	mov	ip, r3
 80098cc:	b280      	uxth	r0, r0
 80098ce:	b2a4      	uxth	r4, r4
 80098d0:	4344      	muls	r4, r0
 80098d2:	4465      	add	r5, ip
 80098d4:	002b      	movs	r3, r5
 80098d6:	46a4      	mov	ip, r4
 80098d8:	4463      	add	r3, ip
 80098da:	9331      	str	r3, [sp, #196]	; 0xc4
 80098dc:	4653      	mov	r3, sl
 80098de:	4033      	ands	r3, r6
 80098e0:	22c4      	movs	r2, #196	; 0xc4
 80098e2:	9314      	str	r3, [sp, #80]	; 0x50
 80098e4:	466b      	mov	r3, sp
 80098e6:	189b      	adds	r3, r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	2105      	movs	r1, #5
 80098ec:	3303      	adds	r3, #3
 80098ee:	005b      	lsls	r3, r3, #1
 80098f0:	9340      	str	r3, [sp, #256]	; 0x100
 80098f2:	0020      	movs	r0, r4
 80098f4:	0063      	lsls	r3, r4, #1
 80098f6:	9321      	str	r3, [sp, #132]	; 0x84
 80098f8:	941b      	str	r4, [sp, #108]	; 0x6c
 80098fa:	f007 fb3d 	bl	8010f78 <__udivsi3>
 80098fe:	2700      	movs	r7, #0
 8009900:	2305      	movs	r3, #5
 8009902:	0002      	movs	r2, r0
 8009904:	003e      	movs	r6, r7
 8009906:	003d      	movs	r5, r7
 8009908:	435a      	muls	r2, r3
 800990a:	0843      	lsrs	r3, r0, #1
 800990c:	9333      	str	r3, [sp, #204]	; 0xcc
 800990e:	3308      	adds	r3, #8
 8009910:	9334      	str	r3, [sp, #208]	; 0xd0
 8009912:	0053      	lsls	r3, r2, #1
 8009914:	9342      	str	r3, [sp, #264]	; 0x108
 8009916:	0043      	lsls	r3, r0, #1
 8009918:	9343      	str	r3, [sp, #268]	; 0x10c
 800991a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800991c:	9015      	str	r0, [sp, #84]	; 0x54
 800991e:	921d      	str	r2, [sp, #116]	; 0x74
 8009920:	9332      	str	r3, [sp, #200]	; 0xc8
 8009922:	2e00      	cmp	r6, #0
 8009924:	d03c      	beq.n	80099a0 <calibrate.lto_priv.127+0xd5c>
 8009926:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009928:	f7fb feb6 	bl	8005698 <acc_sensor_protocol_r2_is_sensor_running>
 800992c:	2800      	cmp	r0, #0
 800992e:	d02d      	beq.n	800998c <calibrate.lto_priv.127+0xd48>
 8009930:	4b35      	ldr	r3, [pc, #212]	; (8009a08 <calibrate.lto_priv.127+0xdc4>)
 8009932:	4a39      	ldr	r2, [pc, #228]	; (8009a18 <calibrate.lto_priv.127+0xdd4>)
 8009934:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009936:	492c      	ldr	r1, [pc, #176]	; (80099e8 <calibrate.lto_priv.127+0xda4>)
 8009938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993a:	2000      	movs	r0, #0
 800993c:	47a0      	blx	r4
 800993e:	2f00      	cmp	r7, #0
 8009940:	d092      	beq.n	8009868 <calibrate.lto_priv.127+0xc24>
 8009942:	2700      	movs	r7, #0
 8009944:	aa3c      	add	r2, sp, #240	; 0xf0
 8009946:	4694      	mov	ip, r2
 8009948:	2322      	movs	r3, #34	; 0x22
 800994a:	4463      	add	r3, ip
 800994c:	2200      	movs	r2, #0
 800994e:	5e9b      	ldrsh	r3, [r3, r2]
 8009950:	9330      	str	r3, [sp, #192]	; 0xc0
 8009952:	ab45      	add	r3, sp, #276	; 0x114
 8009954:	2200      	movs	r2, #0
 8009956:	5e9b      	ldrsh	r3, [r3, r2]
 8009958:	932f      	str	r3, [sp, #188]	; 0xbc
 800995a:	4b2b      	ldr	r3, [pc, #172]	; (8009a08 <calibrate.lto_priv.127+0xdc4>)
 800995c:	001a      	movs	r2, r3
 800995e:	3230      	adds	r2, #48	; 0x30
 8009960:	7812      	ldrb	r2, [r2, #0]
 8009962:	2a03      	cmp	r2, #3
 8009964:	d800      	bhi.n	8009968 <calibrate.lto_priv.127+0xd24>
 8009966:	e30a      	b.n	8009f7e <calibrate.lto_priv.127+0x133a>
 8009968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800996a:	491f      	ldr	r1, [pc, #124]	; (80099e8 <calibrate.lto_priv.127+0xda4>)
 800996c:	9200      	str	r2, [sp, #0]
 800996e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009970:	4a2a      	ldr	r2, [pc, #168]	; (8009a1c <calibrate.lto_priv.127+0xdd8>)
 8009972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009974:	2004      	movs	r0, #4
 8009976:	47a0      	blx	r4
 8009978:	2f00      	cmp	r7, #0
 800997a:	d000      	beq.n	800997e <calibrate.lto_priv.127+0xd3a>
 800997c:	e302      	b.n	8009f84 <calibrate.lto_priv.127+0x1340>
 800997e:	2300      	movs	r3, #0
 8009980:	2200      	movs	r2, #0
 8009982:	930b      	str	r3, [sp, #44]	; 0x2c
 8009984:	932c      	str	r3, [sp, #176]	; 0xb0
 8009986:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009988:	921c      	str	r2, [sp, #112]	; 0x70
 800998a:	e31a      	b.n	8009fc2 <calibrate.lto_priv.127+0x137e>
 800998c:	2d00      	cmp	r5, #0
 800998e:	d110      	bne.n	80099b2 <calibrate.lto_priv.127+0xd6e>
 8009990:	4653      	mov	r3, sl
 8009992:	4a23      	ldr	r2, [pc, #140]	; (8009a20 <calibrate.lto_priv.127+0xddc>)
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	4923      	ldr	r1, [pc, #140]	; (8009a24 <calibrate.lto_priv.127+0xde0>)
 8009998:	2372      	movs	r3, #114	; 0x72
 800999a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800999c:	f003 fa08 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 80099a0:	4921      	ldr	r1, [pc, #132]	; (8009a28 <calibrate.lto_priv.127+0xde4>)
 80099a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099a4:	f7fb fe86 	bl	80056b4 <acc_sensor_protocol_r2_run_program>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d0c8      	beq.n	800993e <calibrate.lto_priv.127+0xcfa>
 80099ac:	2300      	movs	r3, #0
 80099ae:	931e      	str	r3, [sp, #120]	; 0x78
 80099b0:	e175      	b.n	8009c9e <calibrate.lto_priv.127+0x105a>
 80099b2:	464b      	mov	r3, r9
 80099b4:	4d1a      	ldr	r5, [pc, #104]	; (8009a20 <calibrate.lto_priv.127+0xddc>)
 80099b6:	4c1b      	ldr	r4, [pc, #108]	; (8009a24 <calibrate.lto_priv.127+0xde0>)
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	002a      	movs	r2, r5
 80099bc:	2344      	movs	r3, #68	; 0x44
 80099be:	0021      	movs	r1, r4
 80099c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099c2:	f003 f9f5 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 80099c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c8:	002a      	movs	r2, r5
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	0021      	movs	r1, r4
 80099ce:	2342      	movs	r3, #66	; 0x42
 80099d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099d2:	f003 f9ed 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 80099d6:	2e00      	cmp	r6, #0
 80099d8:	d0e2      	beq.n	80099a0 <calibrate.lto_priv.127+0xd5c>
 80099da:	e7d9      	b.n	8009990 <calibrate.lto_priv.127+0xd4c>
 80099dc:	3f99999a 	.word	0x3f99999a
 80099e0:	447a0000 	.word	0x447a0000
 80099e4:	0801e288 	.word	0x0801e288
 80099e8:	0801dfb2 	.word	0x0801dfb2
 80099ec:	0801e2b6 	.word	0x0801e2b6
 80099f0:	0801e2a0 	.word	0x0801e2a0
 80099f4:	0801e2c2 	.word	0x0801e2c2
 80099f8:	0801e2c9 	.word	0x0801e2c9
 80099fc:	fffffbe6 	.word	0xfffffbe6
 8009a00:	08016960 	.word	0x08016960
 8009a04:	0801e446 	.word	0x0801e446
 8009a08:	200005d0 	.word	0x200005d0
 8009a0c:	0801e2f6 	.word	0x0801e2f6
 8009a10:	0801e2d1 	.word	0x0801e2d1
 8009a14:	42f80000 	.word	0x42f80000
 8009a18:	0801dbe7 	.word	0x0801dbe7
 8009a1c:	0801e597 	.word	0x0801e597
 8009a20:	0801b5d8 	.word	0x0801b5d8
 8009a24:	0801bc9c 	.word	0x0801bc9c
 8009a28:	0000023a 	.word	0x0000023a
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d904      	bls.n	8009a3a <calibrate.lto_priv.127+0xdf6>
 8009a30:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009a32:	49d1      	ldr	r1, [pc, #836]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009a34:	4ad1      	ldr	r2, [pc, #836]	; (8009d7c <calibrate.lto_priv.127+0x1138>)
 8009a36:	2004      	movs	r0, #4
 8009a38:	4798      	blx	r3
 8009a3a:	4ad1      	ldr	r2, [pc, #836]	; (8009d80 <calibrate.lto_priv.127+0x113c>)
 8009a3c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009a3e:	0020      	movs	r0, r4
 8009a40:	f006 f820 	bl	800fa84 <acc_alg_basic_saturation_check_u16>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d012      	beq.n	8009a6e <calibrate.lto_priv.127+0xe2a>
 8009a48:	4ace      	ldr	r2, [pc, #824]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009a4a:	4649      	mov	r1, r9
 8009a4c:	0013      	movs	r3, r2
 8009a4e:	3330      	adds	r3, #48	; 0x30
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	290f      	cmp	r1, #15
 8009a54:	d000      	beq.n	8009a58 <calibrate.lto_priv.127+0xe14>
 8009a56:	e0f8      	b.n	8009c4a <calibrate.lto_priv.127+0x1006>
 8009a58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a5a:	2900      	cmp	r1, #0
 8009a5c:	d100      	bne.n	8009a60 <calibrate.lto_priv.127+0xe1c>
 8009a5e:	e0e7      	b.n	8009c30 <calibrate.lto_priv.127+0xfec>
 8009a60:	2b03      	cmp	r3, #3
 8009a62:	d904      	bls.n	8009a6e <calibrate.lto_priv.127+0xe2a>
 8009a64:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009a66:	49c4      	ldr	r1, [pc, #784]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009a68:	4ac7      	ldr	r2, [pc, #796]	; (8009d88 <calibrate.lto_priv.127+0x1144>)
 8009a6a:	2004      	movs	r0, #4
 8009a6c:	4798      	blx	r3
 8009a6e:	4642      	mov	r2, r8
 8009a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a72:	49c6      	ldr	r1, [pc, #792]	; (8009d8c <calibrate.lto_priv.127+0x1148>)
 8009a74:	9341      	str	r3, [sp, #260]	; 0x104
 8009a76:	9b90      	ldr	r3, [sp, #576]	; 0x240
 8009a78:	3178      	adds	r1, #120	; 0x78
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	5a9b      	ldrh	r3, [r3, r2]
 8009a7e:	ad73      	add	r5, sp, #460	; 0x1cc
 8009a80:	9335      	str	r3, [sp, #212]	; 0xd4
 8009a82:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	5a9b      	ldrh	r3, [r3, r2]
 8009a88:	4ac1      	ldr	r2, [pc, #772]	; (8009d90 <calibrate.lto_priv.127+0x114c>)
 8009a8a:	933f      	str	r3, [sp, #252]	; 0xfc
 8009a8c:	465b      	mov	r3, fp
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	18d2      	adds	r2, r2, r3
 8009a94:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8009a96:	5a5b      	ldrh	r3, [r3, r1]
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	0018      	movs	r0, r3
 8009a9e:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa0:	f007 fe4e 	bl	8011740 <__aeabi_i2f>
 8009aa4:	4642      	mov	r2, r8
 8009aa6:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 8009aa8:	1c06      	adds	r6, r0, #0
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	5a98      	ldrh	r0, [r3, r2]
 8009aae:	f007 fe91 	bl	80117d4 <__aeabi_ui2f>
 8009ab2:	21de      	movs	r1, #222	; 0xde
 8009ab4:	0589      	lsls	r1, r1, #22
 8009ab6:	f006 ff2d 	bl	8010914 <__aeabi_fmul>
 8009aba:	21fc      	movs	r1, #252	; 0xfc
 8009abc:	0589      	lsls	r1, r1, #22
 8009abe:	f007 f85b 	bl	8010b78 <__aeabi_fsub>
 8009ac2:	49b4      	ldr	r1, [pc, #720]	; (8009d94 <calibrate.lto_priv.127+0x1150>)
 8009ac4:	f006 ff26 	bl	8010914 <__aeabi_fmul>
 8009ac8:	49b3      	ldr	r1, [pc, #716]	; (8009d98 <calibrate.lto_priv.127+0x1154>)
 8009aca:	f006 ff23 	bl	8010914 <__aeabi_fmul>
 8009ace:	1c01      	adds	r1, r0, #0
 8009ad0:	1c30      	adds	r0, r6, #0
 8009ad2:	f007 f851 	bl	8010b78 <__aeabi_fsub>
 8009ad6:	f007 fe13 	bl	8011700 <__aeabi_f2iz>
 8009ada:	b203      	sxth	r3, r0
 8009adc:	4698      	mov	r8, r3
 8009ade:	ab3c      	add	r3, sp, #240	; 0xf0
 8009ae0:	469c      	mov	ip, r3
 8009ae2:	2626      	movs	r6, #38	; 0x26
 8009ae4:	4643      	mov	r3, r8
 8009ae6:	4466      	add	r6, ip
 8009ae8:	8033      	strh	r3, [r6, #0]
 8009aea:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009aec:	f007 fe72 	bl	80117d4 <__aeabi_ui2f>
 8009af0:	21de      	movs	r1, #222	; 0xde
 8009af2:	0589      	lsls	r1, r1, #22
 8009af4:	f006 ff0e 	bl	8010914 <__aeabi_fmul>
 8009af8:	21fc      	movs	r1, #252	; 0xfc
 8009afa:	0589      	lsls	r1, r1, #22
 8009afc:	f007 f83c 	bl	8010b78 <__aeabi_fsub>
 8009b00:	49a4      	ldr	r1, [pc, #656]	; (8009d94 <calibrate.lto_priv.127+0x1150>)
 8009b02:	f006 ff07 	bl	8010914 <__aeabi_fmul>
 8009b06:	49a4      	ldr	r1, [pc, #656]	; (8009d98 <calibrate.lto_priv.127+0x1154>)
 8009b08:	f006 ff04 	bl	8010914 <__aeabi_fmul>
 8009b0c:	9035      	str	r0, [sp, #212]	; 0xd4
 8009b0e:	4640      	mov	r0, r8
 8009b10:	f007 fe16 	bl	8011740 <__aeabi_i2f>
 8009b14:	1c01      	adds	r1, r0, #0
 8009b16:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009b18:	f006 fc50 	bl	80103bc <__aeabi_fadd>
 8009b1c:	f007 fdf0 	bl	8011700 <__aeabi_f2iz>
 8009b20:	8028      	strh	r0, [r5, #0]
 8009b22:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8009b24:	f007 fe56 	bl	80117d4 <__aeabi_ui2f>
 8009b28:	21de      	movs	r1, #222	; 0xde
 8009b2a:	0589      	lsls	r1, r1, #22
 8009b2c:	f006 fef2 	bl	8010914 <__aeabi_fmul>
 8009b30:	21fc      	movs	r1, #252	; 0xfc
 8009b32:	0589      	lsls	r1, r1, #22
 8009b34:	f007 f820 	bl	8010b78 <__aeabi_fsub>
 8009b38:	4996      	ldr	r1, [pc, #600]	; (8009d94 <calibrate.lto_priv.127+0x1150>)
 8009b3a:	f006 feeb 	bl	8010914 <__aeabi_fmul>
 8009b3e:	4996      	ldr	r1, [pc, #600]	; (8009d98 <calibrate.lto_priv.127+0x1154>)
 8009b40:	f006 fee8 	bl	8010914 <__aeabi_fmul>
 8009b44:	f007 fddc 	bl	8011700 <__aeabi_f2iz>
 8009b48:	2288      	movs	r2, #136	; 0x88
 8009b4a:	ab3c      	add	r3, sp, #240	; 0xf0
 8009b4c:	0052      	lsls	r2, r2, #1
 8009b4e:	189b      	adds	r3, r3, r2
 8009b50:	8018      	strh	r0, [r3, #0]
 8009b52:	4b92      	ldr	r3, [pc, #584]	; (8009d9c <calibrate.lto_priv.127+0x1158>)
 8009b54:	4892      	ldr	r0, [pc, #584]	; (8009da0 <calibrate.lto_priv.127+0x115c>)
 8009b56:	4698      	mov	r8, r3
 8009b58:	0019      	movs	r1, r3
 8009b5a:	f005 ff71 	bl	800fa40 <acc_diagnostic_log_array>
 8009b5e:	0030      	movs	r0, r6
 8009b60:	f003 f925 	bl	800cdae <acc_diagnostic_log_data_i16.constprop.19>
 8009b64:	4641      	mov	r1, r8
 8009b66:	488e      	ldr	r0, [pc, #568]	; (8009da0 <calibrate.lto_priv.127+0x115c>)
 8009b68:	f005 ff6a 	bl	800fa40 <acc_diagnostic_log_array>
 8009b6c:	0028      	movs	r0, r5
 8009b6e:	f003 f91e 	bl	800cdae <acc_diagnostic_log_data_i16.constprop.19>
 8009b72:	4641      	mov	r1, r8
 8009b74:	488b      	ldr	r0, [pc, #556]	; (8009da4 <calibrate.lto_priv.127+0x1160>)
 8009b76:	f005 ff63 	bl	800fa40 <acc_diagnostic_log_array>
 8009b7a:	a880      	add	r0, sp, #512	; 0x200
 8009b7c:	f003 f917 	bl	800cdae <acc_diagnostic_log_data_i16.constprop.19>
 8009b80:	8832      	ldrh	r2, [r6, #0]
 8009b82:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8009b84:	1a9b      	subs	r3, r3, r2
 8009b86:	b21b      	sxth	r3, r3
 8009b88:	17d9      	asrs	r1, r3, #31
 8009b8a:	185b      	adds	r3, r3, r1
 8009b8c:	404b      	eors	r3, r1
 8009b8e:	b21b      	sxth	r3, r3
 8009b90:	2b64      	cmp	r3, #100	; 0x64
 8009b92:	dc6d      	bgt.n	8009c70 <calibrate.lto_priv.127+0x102c>
 8009b94:	4b84      	ldr	r3, [pc, #528]	; (8009da8 <calibrate.lto_priv.127+0x1164>)
 8009b96:	469c      	mov	ip, r3
 8009b98:	23e6      	movs	r3, #230	; 0xe6
 8009b9a:	4462      	add	r2, ip
 8009b9c:	b292      	uxth	r2, r2
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d865      	bhi.n	8009c70 <calibrate.lto_priv.127+0x102c>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	5eea      	ldrsh	r2, [r5, r3]
 8009ba8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8009baa:	1a9b      	subs	r3, r3, r2
 8009bac:	b21b      	sxth	r3, r3
 8009bae:	17d9      	asrs	r1, r3, #31
 8009bb0:	185b      	adds	r3, r3, r1
 8009bb2:	404b      	eors	r3, r1
 8009bb4:	b21b      	sxth	r3, r3
 8009bb6:	2b64      	cmp	r3, #100	; 0x64
 8009bb8:	dc5a      	bgt.n	8009c70 <calibrate.lto_priv.127+0x102c>
 8009bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	db57      	blt.n	8009c70 <calibrate.lto_priv.127+0x102c>
 8009bc0:	497a      	ldr	r1, [pc, #488]	; (8009dac <calibrate.lto_priv.127+0x1168>)
 8009bc2:	487b      	ldr	r0, [pc, #492]	; (8009db0 <calibrate.lto_priv.127+0x116c>)
 8009bc4:	f005 ff3c 	bl	800fa40 <acc_diagnostic_log_array>
 8009bc8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009bca:	0020      	movs	r0, r4
 8009bcc:	f005 ff36 	bl	800fa3c <acc_diagnostic_log_data_u16>
 8009bd0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d000      	beq.n	8009bd8 <calibrate.lto_priv.127+0xf94>
 8009bd6:	e08d      	b.n	8009cf4 <calibrate.lto_priv.127+0x10b0>
 8009bd8:	2124      	movs	r1, #36	; 0x24
 8009bda:	4876      	ldr	r0, [pc, #472]	; (8009db4 <calibrate.lto_priv.127+0x1170>)
 8009bdc:	f7fb faea 	bl	80051b4 <acc_assert_fail>
 8009be0:	464a      	mov	r2, r9
 8009be2:	2908      	cmp	r1, #8
 8009be4:	d200      	bcs.n	8009be8 <calibrate.lto_priv.127+0xfa4>
 8009be6:	2208      	movs	r2, #8
 8009be8:	2108      	movs	r1, #8
 8009bea:	4249      	negs	r1, r1
 8009bec:	4689      	mov	r9, r1
 8009bee:	4491      	add	r9, r2
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d906      	bls.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009bf4:	4b63      	ldr	r3, [pc, #396]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009bf6:	4a70      	ldr	r2, [pc, #448]	; (8009db8 <calibrate.lto_priv.127+0x1174>)
 8009bf8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009bfa:	495f      	ldr	r1, [pc, #380]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	2004      	movs	r0, #4
 8009c00:	47a0      	blx	r4
 8009c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c04:	f006 fad6 	bl	80101b4 <acc_sensor_protocol_r2_stop.constprop.24>
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	d000      	beq.n	8009c0e <calibrate.lto_priv.127+0xfca>
 8009c0c:	e68b      	b.n	8009926 <calibrate.lto_priv.127+0xce2>
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d000      	beq.n	8009c14 <calibrate.lto_priv.127+0xfd0>
 8009c12:	e686      	b.n	8009922 <calibrate.lto_priv.127+0xcde>
 8009c14:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d100      	bne.n	8009c1c <calibrate.lto_priv.127+0xfd8>
 8009c1a:	e690      	b.n	800993e <calibrate.lto_priv.127+0xcfa>
 8009c1c:	2f00      	cmp	r7, #0
 8009c1e:	d000      	beq.n	8009c22 <calibrate.lto_priv.127+0xfde>
 8009c20:	e690      	b.n	8009944 <calibrate.lto_priv.127+0xd00>
 8009c22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d100      	bne.n	8009c2a <calibrate.lto_priv.127+0xfe6>
 8009c28:	e1d6      	b.n	8009fd8 <calibrate.lto_priv.127+0x1394>
 8009c2a:	4653      	mov	r3, sl
 8009c2c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009c2e:	e578      	b.n	8009722 <calibrate.lto_priv.127+0xade>
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	d800      	bhi.n	8009c36 <calibrate.lto_priv.127+0xff2>
 8009c34:	e198      	b.n	8009f68 <calibrate.lto_priv.127+0x1324>
 8009c36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009c38:	494f      	ldr	r1, [pc, #316]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009c3a:	4a60      	ldr	r2, [pc, #384]	; (8009dbc <calibrate.lto_priv.127+0x1178>)
 8009c3c:	2004      	movs	r0, #4
 8009c3e:	4798      	blx	r3
 8009c40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009c42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c44:	46b1      	mov	r9, r6
 8009c46:	930a      	str	r3, [sp, #40]	; 0x28
 8009c48:	e7db      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009c4a:	2208      	movs	r2, #8
 8009c4c:	4694      	mov	ip, r2
 8009c4e:	44e1      	add	r9, ip
 8009c50:	464a      	mov	r2, r9
 8009c52:	2a0f      	cmp	r2, #15
 8009c54:	d901      	bls.n	8009c5a <calibrate.lto_priv.127+0x1016>
 8009c56:	220f      	movs	r2, #15
 8009c58:	4691      	mov	r9, r2
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d9d0      	bls.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009c60:	4b48      	ldr	r3, [pc, #288]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009c62:	4a57      	ldr	r2, [pc, #348]	; (8009dc0 <calibrate.lto_priv.127+0x117c>)
 8009c64:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009c66:	4944      	ldr	r1, [pc, #272]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009c68:	464b      	mov	r3, r9
 8009c6a:	2004      	movs	r0, #4
 8009c6c:	47a0      	blx	r4
 8009c6e:	e7c8      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009c70:	4b44      	ldr	r3, [pc, #272]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009c72:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c74:	001a      	movs	r2, r3
 8009c76:	3230      	adds	r2, #48	; 0x30
 8009c78:	7812      	ldrb	r2, [r2, #0]
 8009c7a:	2902      	cmp	r1, #2
 8009c7c:	d02d      	beq.n	8009cda <calibrate.lto_priv.127+0x1096>
 8009c7e:	2a03      	cmp	r2, #3
 8009c80:	d905      	bls.n	8009c8e <calibrate.lto_priv.127+0x104a>
 8009c82:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009c84:	4a4f      	ldr	r2, [pc, #316]	; (8009dc4 <calibrate.lto_priv.127+0x1180>)
 8009c86:	000b      	movs	r3, r1
 8009c88:	2004      	movs	r0, #4
 8009c8a:	493b      	ldr	r1, [pc, #236]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009c8c:	47a0      	blx	r4
 8009c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c90:	f7f8 ff14 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 8009c94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c96:	3301      	adds	r3, #1
 8009c98:	931e      	str	r3, [sp, #120]	; 0x78
 8009c9a:	464b      	mov	r3, r9
 8009c9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009c9e:	21fa      	movs	r1, #250	; 0xfa
 8009ca0:	ac80      	add	r4, sp, #512	; 0x200
 8009ca2:	0022      	movs	r2, r4
 8009ca4:	00c9      	lsls	r1, r1, #3
 8009ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ca8:	f006 f9d2 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8009cac:	9019      	str	r0, [sp, #100]	; 0x64
 8009cae:	1e05      	subs	r5, r0, #0
 8009cb0:	d100      	bne.n	8009cb4 <calibrate.lto_priv.127+0x1070>
 8009cb2:	e644      	b.n	800993e <calibrate.lto_priv.127+0xcfa>
 8009cb4:	7823      	ldrb	r3, [r4, #0]
 8009cb6:	2b06      	cmp	r3, #6
 8009cb8:	d000      	beq.n	8009cbc <calibrate.lto_priv.127+0x1078>
 8009cba:	e640      	b.n	800993e <calibrate.lto_priv.127+0xcfa>
 8009cbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009cbe:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d300      	bcc.n	8009cc6 <calibrate.lto_priv.127+0x1082>
 8009cc4:	e0f6      	b.n	8009eb4 <calibrate.lto_priv.127+0x1270>
 8009cc6:	4b2f      	ldr	r3, [pc, #188]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009cc8:	4a3f      	ldr	r2, [pc, #252]	; (8009dc8 <calibrate.lto_priv.127+0x1184>)
 8009cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ccc:	492a      	ldr	r1, [pc, #168]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009cce:	2000      	movs	r0, #0
 8009cd0:	4798      	blx	r3
 8009cd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cd4:	f006 fa6e 	bl	80101b4 <acc_sensor_protocol_r2_stop.constprop.24>
 8009cd8:	e631      	b.n	800993e <calibrate.lto_priv.127+0xcfa>
 8009cda:	2a03      	cmp	r2, #3
 8009cdc:	d904      	bls.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	4a3a      	ldr	r2, [pc, #232]	; (8009dcc <calibrate.lto_priv.127+0x1188>)
 8009ce2:	4925      	ldr	r1, [pc, #148]	; (8009d78 <calibrate.lto_priv.127+0x1134>)
 8009ce4:	2004      	movs	r0, #4
 8009ce6:	4798      	blx	r3
 8009ce8:	2700      	movs	r7, #0
 8009cea:	464b      	mov	r3, r9
 8009cec:	003e      	movs	r6, r7
 8009cee:	930e      	str	r3, [sp, #56]	; 0x38
 8009cf0:	003d      	movs	r5, r7
 8009cf2:	e786      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009cf4:	0025      	movs	r5, r4
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8009cfa:	940e      	str	r4, [sp, #56]	; 0x38
 8009cfc:	191b      	adds	r3, r3, r4
 8009cfe:	882a      	ldrh	r2, [r5, #0]
 8009d00:	3502      	adds	r5, #2
 8009d02:	1880      	adds	r0, r0, r2
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	d1fa      	bne.n	8009cfe <calibrate.lto_priv.127+0x10ba>
 8009d08:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009d0a:	f007 f935 	bl	8010f78 <__udivsi3>
 8009d0e:	0022      	movs	r2, r4
 8009d10:	b280      	uxth	r0, r0
 8009d12:	8813      	ldrh	r3, [r2, #0]
 8009d14:	4283      	cmp	r3, r0
 8009d16:	d92b      	bls.n	8009d70 <calibrate.lto_priv.127+0x112c>
 8009d18:	1a1b      	subs	r3, r3, r0
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	8013      	strh	r3, [r2, #0]
 8009d1e:	3202      	adds	r2, #2
 8009d20:	4295      	cmp	r5, r2
 8009d22:	d1f6      	bne.n	8009d12 <calibrate.lto_priv.127+0x10ce>
 8009d24:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009d26:	0027      	movs	r7, r4
 8009d28:	469c      	mov	ip, r3
 8009d2a:	44a4      	add	ip, r4
 8009d2c:	4663      	mov	r3, ip
 8009d2e:	46a0      	mov	r8, r4
 8009d30:	9335      	str	r3, [sp, #212]	; 0xd4
 8009d32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d34:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009d36:	931e      	str	r3, [sp, #120]	; 0x78
 8009d38:	2d00      	cmp	r5, #0
 8009d3a:	d14d      	bne.n	8009dd8 <calibrate.lto_priv.127+0x1194>
 8009d3c:	0023      	movs	r3, r4
 8009d3e:	0028      	movs	r0, r5
 8009d40:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d168      	bne.n	8009e18 <calibrate.lto_priv.127+0x11d4>
 8009d46:	2103      	movs	r1, #3
 8009d48:	f007 f916 	bl	8010f78 <__udivsi3>
 8009d4c:	0025      	movs	r5, r4
 8009d4e:	2302      	movs	r3, #2
 8009d50:	b280      	uxth	r0, r0
 8009d52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d867      	bhi.n	8009e28 <calibrate.lto_priv.127+0x11e4>
 8009d58:	0013      	movs	r3, r2
 8009d5a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d300      	bcc.n	8009d62 <calibrate.lto_priv.127+0x111e>
 8009d60:	e081      	b.n	8009e66 <calibrate.lto_priv.127+0x1222>
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <calibrate.lto_priv.127+0x1140>)
 8009d64:	4a1a      	ldr	r2, [pc, #104]	; (8009dd0 <calibrate.lto_priv.127+0x118c>)
 8009d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d68:	491a      	ldr	r1, [pc, #104]	; (8009dd4 <calibrate.lto_priv.127+0x1190>)
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	4798      	blx	r3
 8009d6e:	e7bb      	b.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009d70:	1ac3      	subs	r3, r0, r3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	e7d2      	b.n	8009d1c <calibrate.lto_priv.127+0x10d8>
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	0801dfb2 	.word	0x0801dfb2
 8009d7c:	0801e33b 	.word	0x0801e33b
 8009d80:	402ca8ad 	.word	0x402ca8ad
 8009d84:	200005d0 	.word	0x200005d0
 8009d88:	0801e38b 	.word	0x0801e38b
 8009d8c:	080168e0 	.word	0x080168e0
 8009d90:	08016960 	.word	0x08016960
 8009d94:	3f99999a 	.word	0x3f99999a
 8009d98:	447a0000 	.word	0x447a0000
 8009d9c:	0801e2a0 	.word	0x0801e2a0
 8009da0:	0801e407 	.word	0x0801e407
 8009da4:	0801e415 	.word	0x0801e415
 8009da8:	fffffcf4 	.word	0xfffffcf4
 8009dac:	0801e423 	.word	0x0801e423
 8009db0:	0801e451 	.word	0x0801e451
 8009db4:	0801e4a3 	.word	0x0801e4a3
 8009db8:	0801e359 	.word	0x0801e359
 8009dbc:	0801e3ab 	.word	0x0801e3ab
 8009dc0:	0801e3d3 	.word	0x0801e3d3
 8009dc4:	0801e465 	.word	0x0801e465
 8009dc8:	0801dc58 	.word	0x0801dc58
 8009dcc:	0801e48c 	.word	0x0801e48c
 8009dd0:	0801e54a 	.word	0x0801e54a
 8009dd4:	0801e52d 	.word	0x0801e52d
 8009dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009dda:	0058      	lsls	r0, r3, #1
 8009ddc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009dde:	1940      	adds	r0, r0, r5
 8009de0:	1bd9      	subs	r1, r3, r7
 8009de2:	f007 f8c9 	bl	8010f78 <__udivsi3>
 8009de6:	1e06      	subs	r6, r0, #0
 8009de8:	d014      	beq.n	8009e14 <calibrate.lto_priv.127+0x11d0>
 8009dea:	0042      	lsls	r2, r0, #1
 8009dec:	4643      	mov	r3, r8
 8009dee:	2000      	movs	r0, #0
 8009df0:	4442      	add	r2, r8
 8009df2:	8819      	ldrh	r1, [r3, #0]
 8009df4:	3302      	adds	r3, #2
 8009df6:	1840      	adds	r0, r0, r1
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d1fa      	bne.n	8009df2 <calibrate.lto_priv.127+0x11ae>
 8009dfc:	0031      	movs	r1, r6
 8009dfe:	f007 f8bb 	bl	8010f78 <__udivsi3>
 8009e02:	8038      	strh	r0, [r7, #0]
 8009e04:	0073      	lsls	r3, r6, #1
 8009e06:	4498      	add	r8, r3
 8009e08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e0a:	3d01      	subs	r5, #1
 8009e0c:	1b9b      	subs	r3, r3, r6
 8009e0e:	931e      	str	r3, [sp, #120]	; 0x78
 8009e10:	3702      	adds	r7, #2
 8009e12:	e791      	b.n	8009d38 <calibrate.lto_priv.127+0x10f4>
 8009e14:	8038      	strh	r0, [r7, #0]
 8009e16:	e7f5      	b.n	8009e04 <calibrate.lto_priv.127+0x11c0>
 8009e18:	8819      	ldrh	r1, [r3, #0]
 8009e1a:	1c0a      	adds	r2, r1, #0
 8009e1c:	4281      	cmp	r1, r0
 8009e1e:	d200      	bcs.n	8009e22 <calibrate.lto_priv.127+0x11de>
 8009e20:	1c02      	adds	r2, r0, #0
 8009e22:	b290      	uxth	r0, r2
 8009e24:	3302      	adds	r3, #2
 8009e26:	e78b      	b.n	8009d40 <calibrate.lto_priv.127+0x10fc>
 8009e28:	882a      	ldrh	r2, [r5, #0]
 8009e2a:	88a9      	ldrh	r1, [r5, #4]
 8009e2c:	428a      	cmp	r2, r1
 8009e2e:	d802      	bhi.n	8009e36 <calibrate.lto_priv.127+0x11f2>
 8009e30:	0016      	movs	r6, r2
 8009e32:	000a      	movs	r2, r1
 8009e34:	0031      	movs	r1, r6
 8009e36:	4290      	cmp	r0, r2
 8009e38:	d212      	bcs.n	8009e60 <calibrate.lto_priv.127+0x121c>
 8009e3a:	00ce      	lsls	r6, r1, #3
 8009e3c:	42b2      	cmp	r2, r6
 8009e3e:	d90f      	bls.n	8009e60 <calibrate.lto_priv.127+0x121c>
 8009e40:	4c90      	ldr	r4, [pc, #576]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 8009e42:	0025      	movs	r5, r4
 8009e44:	3530      	adds	r5, #48	; 0x30
 8009e46:	782d      	ldrb	r5, [r5, #0]
 8009e48:	2d03      	cmp	r5, #3
 8009e4a:	d800      	bhi.n	8009e4e <calibrate.lto_priv.127+0x120a>
 8009e4c:	e74c      	b.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009e4e:	9002      	str	r0, [sp, #8]
 8009e50:	9101      	str	r1, [sp, #4]
 8009e52:	9200      	str	r2, [sp, #0]
 8009e54:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009e56:	4a8c      	ldr	r2, [pc, #560]	; (800a088 <calibrate.lto_priv.127+0x1444>)
 8009e58:	498c      	ldr	r1, [pc, #560]	; (800a08c <calibrate.lto_priv.127+0x1448>)
 8009e5a:	2004      	movs	r0, #4
 8009e5c:	47a0      	blx	r4
 8009e5e:	e743      	b.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009e60:	3301      	adds	r3, #1
 8009e62:	3502      	adds	r5, #2
 8009e64:	e775      	b.n	8009d52 <calibrate.lto_priv.127+0x110e>
 8009e66:	0022      	movs	r2, r4
 8009e68:	2300      	movs	r3, #0
 8009e6a:	3210      	adds	r2, #16
 8009e6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e6e:	8809      	ldrh	r1, [r1, #0]
 8009e70:	185b      	adds	r3, r3, r1
 8009e72:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e74:	3102      	adds	r1, #2
 8009e76:	910e      	str	r1, [sp, #56]	; 0x38
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	d1f7      	bne.n	8009e6c <calibrate.lto_priv.127+0x1228>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8009e80:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8009e82:	4288      	cmp	r0, r1
 8009e84:	d811      	bhi.n	8009eaa <calibrate.lto_priv.127+0x1266>
 8009e86:	2105      	movs	r1, #5
 8009e88:	4359      	muls	r1, r3
 8009e8a:	428a      	cmp	r2, r1
 8009e8c:	d271      	bcs.n	8009f72 <calibrate.lto_priv.127+0x132e>
 8009e8e:	497d      	ldr	r1, [pc, #500]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 8009e90:	0008      	movs	r0, r1
 8009e92:	3030      	adds	r0, #48	; 0x30
 8009e94:	7800      	ldrb	r0, [r0, #0]
 8009e96:	2803      	cmp	r0, #3
 8009e98:	d800      	bhi.n	8009e9c <calibrate.lto_priv.127+0x1258>
 8009e9a:	e725      	b.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009e9c:	9200      	str	r2, [sp, #0]
 8009e9e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009ea0:	4a7b      	ldr	r2, [pc, #492]	; (800a090 <calibrate.lto_priv.127+0x144c>)
 8009ea2:	497a      	ldr	r1, [pc, #488]	; (800a08c <calibrate.lto_priv.127+0x1448>)
 8009ea4:	2004      	movs	r0, #4
 8009ea6:	47a0      	blx	r4
 8009ea8:	e71e      	b.n	8009ce8 <calibrate.lto_priv.127+0x10a4>
 8009eaa:	0048      	lsls	r0, r1, #1
 8009eac:	5a20      	ldrh	r0, [r4, r0]
 8009eae:	3101      	adds	r1, #1
 8009eb0:	1812      	adds	r2, r2, r0
 8009eb2:	e7e5      	b.n	8009e80 <calibrate.lto_priv.127+0x123c>
 8009eb4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009eb6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eba:	f7f8 f9f1 	bl	80022a0 <acc_sensor_protocol_r2_transfer_data>
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d100      	bne.n	8009ec6 <calibrate.lto_priv.127+0x1282>
 8009ec4:	e53b      	b.n	800993e <calibrate.lto_priv.127+0xcfa>
 8009ec6:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8009ec8:	005c      	lsls	r4, r3, #1
 8009eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ecc:	4444      	add	r4, r8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d01f      	beq.n	8009f12 <calibrate.lto_priv.127+0x12ce>
 8009ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ed6:	18e6      	adds	r6, r4, r3
 8009ed8:	0032      	movs	r2, r6
 8009eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009edc:	4650      	mov	r0, sl
 8009ede:	f7f6 f92b 	bl	8000138 <acc_probes_execute_uint16>
 8009ee2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ee4:	0030      	movs	r0, r6
 8009ee6:	f7f8 fcbb 	bl	8002860 <acc_alg_cca_calculate>
 8009eea:	496a      	ldr	r1, [pc, #424]	; (800a094 <calibrate.lto_priv.127+0x1450>)
 8009eec:	9016      	str	r0, [sp, #88]	; 0x58
 8009eee:	2601      	movs	r6, #1
 8009ef0:	f007 fa1c 	bl	801132c <__aeabi_fcmpgt>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d100      	bne.n	8009efa <calibrate.lto_priv.127+0x12b6>
 8009ef8:	1c06      	adds	r6, r0, #0
 8009efa:	b2f3      	uxtb	r3, r6
 8009efc:	4965      	ldr	r1, [pc, #404]	; (800a094 <calibrate.lto_priv.127+0x1450>)
 8009efe:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009f00:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f02:	f007 fa13 	bl	801132c <__aeabi_fcmpgt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d124      	bne.n	8009f54 <calibrate.lto_priv.127+0x1310>
 8009f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d126      	bne.n	8009f5e <calibrate.lto_priv.127+0x131a>
 8009f10:	9317      	str	r3, [sp, #92]	; 0x5c
 8009f12:	4a61      	ldr	r2, [pc, #388]	; (800a098 <calibrate.lto_priv.127+0x1454>)
 8009f14:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009f16:	0020      	movs	r0, r4
 8009f18:	f005 fdb4 	bl	800fa84 <acc_alg_basic_saturation_check_u16>
 8009f1c:	1e06      	subs	r6, r0, #0
 8009f1e:	d000      	beq.n	8009f22 <calibrate.lto_priv.127+0x12de>
 8009f20:	e58b      	b.n	8009a3a <calibrate.lto_priv.127+0xdf6>
 8009f22:	4a58      	ldr	r2, [pc, #352]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 8009f24:	4649      	mov	r1, r9
 8009f26:	0013      	movs	r3, r2
 8009f28:	3330      	adds	r3, #48	; 0x30
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	d000      	beq.n	8009f32 <calibrate.lto_priv.127+0x12ee>
 8009f30:	e656      	b.n	8009be0 <calibrate.lto_priv.127+0xf9c>
 8009f32:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d100      	bne.n	8009f3a <calibrate.lto_priv.127+0x12f6>
 8009f38:	e578      	b.n	8009a2c <calibrate.lto_priv.127+0xde8>
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d904      	bls.n	8009f48 <calibrate.lto_priv.127+0x1304>
 8009f3e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009f40:	4956      	ldr	r1, [pc, #344]	; (800a09c <calibrate.lto_priv.127+0x1458>)
 8009f42:	4a57      	ldr	r2, [pc, #348]	; (800a0a0 <calibrate.lto_priv.127+0x145c>)
 8009f44:	2004      	movs	r0, #4
 8009f46:	4798      	blx	r3
 8009f48:	464b      	mov	r3, r9
 8009f4a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f4e:	230f      	movs	r3, #15
 8009f50:	4699      	mov	r9, r3
 8009f52:	e656      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009f54:	2300      	movs	r3, #0
 8009f56:	9332      	str	r3, [sp, #200]	; 0xc8
 8009f58:	001e      	movs	r6, r3
 8009f5a:	001d      	movs	r5, r3
 8009f5c:	e651      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009f5e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009f60:	9017      	str	r0, [sp, #92]	; 0x5c
 8009f62:	9014      	str	r0, [sp, #80]	; 0x50
 8009f64:	0005      	movs	r5, r0
 8009f66:	e64c      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009f68:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009f6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f6c:	46b1      	mov	r9, r6
 8009f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f70:	e647      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009f72:	464b      	mov	r3, r9
 8009f74:	2500      	movs	r5, #0
 8009f76:	930e      	str	r3, [sp, #56]	; 0x38
 8009f78:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009f7a:	002e      	movs	r6, r5
 8009f7c:	e641      	b.n	8009c02 <calibrate.lto_priv.127+0xfbe>
 8009f7e:	2f00      	cmp	r7, #0
 8009f80:	d100      	bne.n	8009f84 <calibrate.lto_priv.127+0x1340>
 8009f82:	e4fc      	b.n	800997e <calibrate.lto_priv.127+0xd3a>
 8009f84:	4b3f      	ldr	r3, [pc, #252]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 8009f86:	001a      	movs	r2, r3
 8009f88:	3230      	adds	r2, #48	; 0x30
 8009f8a:	7812      	ldrb	r2, [r2, #0]
 8009f8c:	2a01      	cmp	r2, #1
 8009f8e:	d917      	bls.n	8009fc0 <calibrate.lto_priv.127+0x137c>
 8009f90:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009f92:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009f94:	4b43      	ldr	r3, [pc, #268]	; (800a0a4 <calibrate.lto_priv.127+0x1460>)
 8009f96:	2a00      	cmp	r2, #0
 8009f98:	d000      	beq.n	8009f9c <calibrate.lto_priv.127+0x1358>
 8009f9a:	4b43      	ldr	r3, [pc, #268]	; (800a0a8 <calibrate.lto_priv.127+0x1464>)
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa0:	4a42      	ldr	r2, [pc, #264]	; (800a0ac <calibrate.lto_priv.127+0x1468>)
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8009fa6:	493d      	ldr	r1, [pc, #244]	; (800a09c <calibrate.lto_priv.127+0x1458>)
 8009fa8:	9304      	str	r3, [sp, #16]
 8009faa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009fac:	2002      	movs	r0, #2
 8009fae:	9303      	str	r3, [sp, #12]
 8009fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009fb2:	9302      	str	r3, [sp, #8]
 8009fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fb6:	9301      	str	r3, [sp, #4]
 8009fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fba:	9300      	str	r3, [sp, #0]
 8009fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fbe:	47a0      	blx	r4
 8009fc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fc2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009fc4:	9239      	str	r2, [sp, #228]	; 0xe4
 8009fc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009fc8:	923e      	str	r2, [sp, #248]	; 0xf8
 8009fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fcc:	923d      	str	r2, [sp, #244]	; 0xf4
 8009fce:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009fd0:	923c      	str	r2, [sp, #240]	; 0xf0
 8009fd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009fd4:	922d      	str	r2, [sp, #180]	; 0xb4
 8009fd6:	e012      	b.n	8009ffe <calibrate.lto_priv.127+0x13ba>
 8009fd8:	4b2a      	ldr	r3, [pc, #168]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 8009fda:	001a      	movs	r2, r3
 8009fdc:	3230      	adds	r2, #48	; 0x30
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	2a03      	cmp	r2, #3
 8009fe2:	d801      	bhi.n	8009fe8 <calibrate.lto_priv.127+0x13a4>
 8009fe4:	f7ff f9b3 	bl	800934e <calibrate.lto_priv.127+0x70a>
 8009fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fea:	492c      	ldr	r1, [pc, #176]	; (800a09c <calibrate.lto_priv.127+0x1458>)
 8009fec:	9200      	str	r2, [sp, #0]
 8009fee:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009ff0:	4a2f      	ldr	r2, [pc, #188]	; (800a0b0 <calibrate.lto_priv.127+0x146c>)
 8009ff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff4:	2004      	movs	r0, #4
 8009ff6:	47a0      	blx	r4
 8009ff8:	f7ff f9a9 	bl	800934e <calibrate.lto_priv.127+0x70a>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2400      	movs	r4, #0
 800a000:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800a002:	42a2      	cmp	r2, r4
 800a004:	d000      	beq.n	800a008 <calibrate.lto_priv.127+0x13c4>
 800a006:	001c      	movs	r4, r3
 800a008:	2301      	movs	r3, #1
 800a00a:	401c      	ands	r4, r3
 800a00c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <calibrate.lto_priv.127+0x13d8>
 800a012:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800a014:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a016:	701a      	strb	r2, [r3, #0]
 800a018:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	d101      	bne.n	800a024 <calibrate.lto_priv.127+0x13e0>
 800a020:	f7fe fe35 	bl	8008c8e <calibrate.lto_priv.127+0x4a>
 800a024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a026:	9b46      	ldr	r3, [sp, #280]	; 0x118
 800a028:	4d16      	ldr	r5, [pc, #88]	; (800a084 <calibrate.lto_priv.127+0x1440>)
 800a02a:	8093      	strh	r3, [r2, #4]
 800a02c:	ab46      	add	r3, sp, #280	; 0x118
 800a02e:	791b      	ldrb	r3, [r3, #4]
 800a030:	80d3      	strh	r3, [r2, #6]
 800a032:	0013      	movs	r3, r2
 800a034:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 800a036:	811a      	strh	r2, [r3, #8]
 800a038:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800a03a:	815a      	strh	r2, [r3, #10]
 800a03c:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800a03e:	819a      	strh	r2, [r3, #12]
 800a040:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800a042:	81da      	strh	r2, [r3, #14]
 800a044:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800a046:	821a      	strh	r2, [r3, #16]
 800a048:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800a04a:	825a      	strh	r2, [r3, #18]
 800a04c:	2306      	movs	r3, #6
 800a04e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	002b      	movs	r3, r5
 800a054:	3330      	adds	r3, #48	; 0x30
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d904      	bls.n	800a066 <calibrate.lto_priv.127+0x1422>
 800a05c:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <calibrate.lto_priv.127+0x1470>)
 800a05e:	4916      	ldr	r1, [pc, #88]	; (800a0b8 <calibrate.lto_priv.127+0x1474>)
 800a060:	2004      	movs	r0, #4
 800a062:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a064:	4798      	blx	r3
 800a066:	002b      	movs	r3, r5
 800a068:	3330      	adds	r3, #48	; 0x30
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d801      	bhi.n	800a074 <calibrate.lto_priv.127+0x1430>
 800a070:	f7fe fe0e 	bl	8008c90 <calibrate.lto_priv.127+0x4c>
 800a074:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a076:	4a11      	ldr	r2, [pc, #68]	; (800a0bc <calibrate.lto_priv.127+0x1478>)
 800a078:	490f      	ldr	r1, [pc, #60]	; (800a0b8 <calibrate.lto_priv.127+0x1474>)
 800a07a:	2002      	movs	r0, #2
 800a07c:	4798      	blx	r3
 800a07e:	f7fe fe07 	bl	8008c90 <calibrate.lto_priv.127+0x4c>
 800a082:	46c0      	nop			; (mov r8, r8)
 800a084:	200005d0 	.word	0x200005d0
 800a088:	0801e4d1 	.word	0x0801e4d1
 800a08c:	0801e52d 	.word	0x0801e52d
 800a090:	0801e55a 	.word	0x0801e55a
 800a094:	42640000 	.word	0x42640000
 800a098:	42172c98 	.word	0x42172c98
 800a09c:	0801dfb2 	.word	0x0801dfb2
 800a0a0:	0801e314 	.word	0x0801e314
 800a0a4:	0801df8f 	.word	0x0801df8f
 800a0a8:	0801df8a 	.word	0x0801df8a
 800a0ac:	0801e5f8 	.word	0x0801e5f8
 800a0b0:	0801e5c4 	.word	0x0801e5c4
 800a0b4:	0801e660 	.word	0x0801e660
 800a0b8:	0801da75 	.word	0x0801da75
 800a0bc:	0801dda8 	.word	0x0801dda8

0800a0c0 <initialize.lto_priv.135>:
 800a0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c2:	464e      	mov	r6, r9
 800a0c4:	46de      	mov	lr, fp
 800a0c6:	4657      	mov	r7, sl
 800a0c8:	4645      	mov	r5, r8
 800a0ca:	b5e0      	push	{r5, r6, r7, lr}
 800a0cc:	b097      	sub	sp, #92	; 0x5c
 800a0ce:	9306      	str	r3, [sp, #24]
 800a0d0:	2332      	movs	r3, #50	; 0x32
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	448a      	add	sl, r1
 800a0d6:	4653      	mov	r3, sl
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	4681      	mov	r9, r0
 800a0dc:	000e      	movs	r6, r1
 800a0de:	4693      	mov	fp, r2
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d00f      	beq.n	800a104 <initialize.lto_priv.135+0x44>
 800a0e4:	2b09      	cmp	r3, #9
 800a0e6:	d00d      	beq.n	800a104 <initialize.lto_priv.135+0x44>
 800a0e8:	4b7a      	ldr	r3, [pc, #488]	; (800a2d4 <initialize.lto_priv.135+0x214>)
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ee:	4a7a      	ldr	r2, [pc, #488]	; (800a2d8 <initialize.lto_priv.135+0x218>)
 800a0f0:	497a      	ldr	r1, [pc, #488]	; (800a2dc <initialize.lto_priv.135+0x21c>)
 800a0f2:	4798      	blx	r3
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	b017      	add	sp, #92	; 0x5c
 800a0f8:	bc3c      	pop	{r2, r3, r4, r5}
 800a0fa:	4690      	mov	r8, r2
 800a0fc:	4699      	mov	r9, r3
 800a0fe:	46a2      	mov	sl, r4
 800a100:	46ab      	mov	fp, r5
 800a102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a104:	464b      	mov	r3, r9
 800a106:	0030      	movs	r0, r6
 800a108:	695d      	ldr	r5, [r3, #20]
 800a10a:	f7f6 fd5d 	bl	8000bc8 <configuration_is_valid>
 800a10e:	2300      	movs	r3, #0
 800a110:	4298      	cmp	r0, r3
 800a112:	d00c      	beq.n	800a12e <initialize.lto_priv.135+0x6e>
 800a114:	0032      	movs	r2, r6
 800a116:	324f      	adds	r2, #79	; 0x4f
 800a118:	7810      	ldrb	r0, [r2, #0]
 800a11a:	0033      	movs	r3, r6
 800a11c:	0002      	movs	r2, r0
 800a11e:	1e51      	subs	r1, r2, #1
 800a120:	418a      	sbcs	r2, r1
 800a122:	3350      	adds	r3, #80	; 0x50
 800a124:	781c      	ldrb	r4, [r3, #0]
 800a126:	3302      	adds	r3, #2
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	4252      	negs	r2, r2
 800a12c:	4013      	ands	r3, r2
 800a12e:	002a      	movs	r2, r5
 800a130:	32ce      	adds	r2, #206	; 0xce
 800a132:	8013      	strh	r3, [r2, #0]
 800a134:	2800      	cmp	r0, #0
 800a136:	d000      	beq.n	800a13a <initialize.lto_priv.135+0x7a>
 800a138:	0020      	movs	r0, r4
 800a13a:	002b      	movs	r3, r5
 800a13c:	33d0      	adds	r3, #208	; 0xd0
 800a13e:	7018      	strb	r0, [r3, #0]
 800a140:	0030      	movs	r0, r6
 800a142:	f7f6 fd77 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a146:	002b      	movs	r3, r5
 800a148:	2700      	movs	r7, #0
 800a14a:	33cc      	adds	r3, #204	; 0xcc
 800a14c:	8018      	strh	r0, [r3, #0]
 800a14e:	3b10      	subs	r3, #16
 800a150:	601f      	str	r7, [r3, #0]
 800a152:	0030      	movs	r0, r6
 800a154:	f7f6 fe04 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 800a158:	002b      	movs	r3, r5
 800a15a:	2201      	movs	r2, #1
 800a15c:	33c0      	adds	r3, #192	; 0xc0
 800a15e:	7018      	strb	r0, [r3, #0]
 800a160:	3b13      	subs	r3, #19
 800a162:	701a      	strb	r2, [r3, #0]
 800a164:	0028      	movs	r0, r5
 800a166:	f7fb f9ff 	bl	8005568 <get_package_range_coarse_max>
 800a16a:	9008      	str	r0, [sp, #32]
 800a16c:	0030      	movs	r0, r6
 800a16e:	f7f6 fd2b 	bl	8000bc8 <configuration_is_valid>
 800a172:	42b8      	cmp	r0, r7
 800a174:	d052      	beq.n	800a21c <initialize.lto_priv.135+0x15c>
 800a176:	0033      	movs	r3, r6
 800a178:	332c      	adds	r3, #44	; 0x2c
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	42bb      	cmp	r3, r7
 800a17e:	d04d      	beq.n	800a21c <initialize.lto_priv.135+0x15c>
 800a180:	0030      	movs	r0, r6
 800a182:	f7f6 fd21 	bl	8000bc8 <configuration_is_valid>
 800a186:	42b8      	cmp	r0, r7
 800a188:	d001      	beq.n	800a18e <initialize.lto_priv.135+0xce>
 800a18a:	2334      	movs	r3, #52	; 0x34
 800a18c:	5ef7      	ldrsh	r7, [r6, r3]
 800a18e:	0030      	movs	r0, r6
 800a190:	f7f6 fd1a 	bl	8000bc8 <configuration_is_valid>
 800a194:	2300      	movs	r3, #0
 800a196:	4298      	cmp	r0, r3
 800a198:	d001      	beq.n	800a19e <initialize.lto_priv.135+0xde>
 800a19a:	2236      	movs	r2, #54	; 0x36
 800a19c:	5eb3      	ldrsh	r3, [r6, r2]
 800a19e:	4698      	mov	r8, r3
 800a1a0:	44b8      	add	r8, r7
 800a1a2:	0033      	movs	r3, r6
 800a1a4:	332e      	adds	r3, #46	; 0x2e
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d100      	bne.n	800a1ae <initialize.lto_priv.135+0xee>
 800a1ac:	e08e      	b.n	800a2cc <initialize.lto_priv.135+0x20c>
 800a1ae:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 800a1b0:	0030      	movs	r0, r6
 800a1b2:	f7f6 fd3f 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a1b6:	4682      	mov	sl, r0
 800a1b8:	2801      	cmp	r0, #1
 800a1ba:	d925      	bls.n	800a208 <initialize.lto_priv.135+0x148>
 800a1bc:	2802      	cmp	r0, #2
 800a1be:	d10c      	bne.n	800a1da <initialize.lto_priv.135+0x11a>
 800a1c0:	07fb      	lsls	r3, r7, #31
 800a1c2:	d40a      	bmi.n	800a1da <initialize.lto_priv.135+0x11a>
 800a1c4:	4b43      	ldr	r3, [pc, #268]	; (800a2d4 <initialize.lto_priv.135+0x214>)
 800a1c6:	001a      	movs	r2, r3
 800a1c8:	3230      	adds	r2, #48	; 0x30
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	2a01      	cmp	r2, #1
 800a1ce:	d903      	bls.n	800a1d8 <initialize.lto_priv.135+0x118>
 800a1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d2:	4a43      	ldr	r2, [pc, #268]	; (800a2e0 <initialize.lto_priv.135+0x220>)
 800a1d4:	4943      	ldr	r1, [pc, #268]	; (800a2e4 <initialize.lto_priv.135+0x224>)
 800a1d6:	4798      	blx	r3
 800a1d8:	3701      	adds	r7, #1
 800a1da:	4643      	mov	r3, r8
 800a1dc:	4651      	mov	r1, sl
 800a1de:	1bd8      	subs	r0, r3, r7
 800a1e0:	f007 f83a 	bl	8011258 <__aeabi_idivmod>
 800a1e4:	468a      	mov	sl, r1
 800a1e6:	2900      	cmp	r1, #0
 800a1e8:	dd0e      	ble.n	800a208 <initialize.lto_priv.135+0x148>
 800a1ea:	4b3a      	ldr	r3, [pc, #232]	; (800a2d4 <initialize.lto_priv.135+0x214>)
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	3230      	adds	r2, #48	; 0x30
 800a1f0:	7812      	ldrb	r2, [r2, #0]
 800a1f2:	2a01      	cmp	r2, #1
 800a1f4:	d904      	bls.n	800a200 <initialize.lto_priv.135+0x140>
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	4a3b      	ldr	r2, [pc, #236]	; (800a2e8 <initialize.lto_priv.135+0x228>)
 800a1fa:	493a      	ldr	r1, [pc, #232]	; (800a2e4 <initialize.lto_priv.135+0x224>)
 800a1fc:	2002      	movs	r0, #2
 800a1fe:	4798      	blx	r3
 800a200:	4643      	mov	r3, r8
 800a202:	4652      	mov	r2, sl
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	4698      	mov	r8, r3
 800a208:	4547      	cmp	r7, r8
 800a20a:	dd73      	ble.n	800a2f4 <initialize.lto_priv.135+0x234>
 800a20c:	4b31      	ldr	r3, [pc, #196]	; (800a2d4 <initialize.lto_priv.135+0x214>)
 800a20e:	4a37      	ldr	r2, [pc, #220]	; (800a2ec <initialize.lto_priv.135+0x22c>)
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	4934      	ldr	r1, [pc, #208]	; (800a2e4 <initialize.lto_priv.135+0x224>)
 800a214:	2000      	movs	r0, #0
 800a216:	4798      	blx	r3
 800a218:	2000      	movs	r0, #0
 800a21a:	e76c      	b.n	800a0f6 <initialize.lto_priv.135+0x36>
 800a21c:	0030      	movs	r0, r6
 800a21e:	f7f6 fcd3 	bl	8000bc8 <configuration_is_valid>
 800a222:	2400      	movs	r4, #0
 800a224:	2800      	cmp	r0, #0
 800a226:	d000      	beq.n	800a22a <initialize.lto_priv.135+0x16a>
 800a228:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a22a:	0030      	movs	r0, r6
 800a22c:	f7f6 fccc 	bl	8000bc8 <configuration_is_valid>
 800a230:	2800      	cmp	r0, #0
 800a232:	d043      	beq.n	800a2bc <initialize.lto_priv.135+0x1fc>
 800a234:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800a236:	1c21      	adds	r1, r4, #0
 800a238:	f006 f8c0 	bl	80103bc <__aeabi_fadd>
 800a23c:	4680      	mov	r8, r0
 800a23e:	f002 fe65 	bl	800cf0c <get_dt.constprop.9>
 800a242:	1c21      	adds	r1, r4, #0
 800a244:	9007      	str	r0, [sp, #28]
 800a246:	1c20      	adds	r0, r4, #0
 800a248:	f006 f8b8 	bl	80103bc <__aeabi_fadd>
 800a24c:	4928      	ldr	r1, [pc, #160]	; (800a2f0 <initialize.lto_priv.135+0x230>)
 800a24e:	1c07      	adds	r7, r0, #0
 800a250:	9807      	ldr	r0, [sp, #28]
 800a252:	f006 fb5f 	bl	8010914 <__aeabi_fmul>
 800a256:	1c01      	adds	r1, r0, #0
 800a258:	1c38      	adds	r0, r7, #0
 800a25a:	f006 fa49 	bl	80106f0 <__aeabi_fdiv>
 800a25e:	2100      	movs	r1, #0
 800a260:	1c07      	adds	r7, r0, #0
 800a262:	1c20      	adds	r0, r4, #0
 800a264:	f007 f84e 	bl	8011304 <__aeabi_fcmplt>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d129      	bne.n	800a2c0 <initialize.lto_priv.135+0x200>
 800a26c:	21fc      	movs	r1, #252	; 0xfc
 800a26e:	0589      	lsls	r1, r1, #22
 800a270:	1c38      	adds	r0, r7, #0
 800a272:	f006 f8a3 	bl	80103bc <__aeabi_fadd>
 800a276:	f007 fa43 	bl	8011700 <__aeabi_f2iz>
 800a27a:	0007      	movs	r7, r0
 800a27c:	f002 fe46 	bl	800cf0c <get_dt.constprop.9>
 800a280:	4641      	mov	r1, r8
 800a282:	9007      	str	r0, [sp, #28]
 800a284:	4640      	mov	r0, r8
 800a286:	f006 f899 	bl	80103bc <__aeabi_fadd>
 800a28a:	4919      	ldr	r1, [pc, #100]	; (800a2f0 <initialize.lto_priv.135+0x230>)
 800a28c:	1c04      	adds	r4, r0, #0
 800a28e:	9807      	ldr	r0, [sp, #28]
 800a290:	f006 fb40 	bl	8010914 <__aeabi_fmul>
 800a294:	1c01      	adds	r1, r0, #0
 800a296:	1c20      	adds	r0, r4, #0
 800a298:	f006 fa2a 	bl	80106f0 <__aeabi_fdiv>
 800a29c:	2100      	movs	r1, #0
 800a29e:	1c04      	adds	r4, r0, #0
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	f007 f82f 	bl	8011304 <__aeabi_fcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d10d      	bne.n	800a2c6 <initialize.lto_priv.135+0x206>
 800a2aa:	21fc      	movs	r1, #252	; 0xfc
 800a2ac:	0589      	lsls	r1, r1, #22
 800a2ae:	1c20      	adds	r0, r4, #0
 800a2b0:	f006 f884 	bl	80103bc <__aeabi_fadd>
 800a2b4:	f007 fa24 	bl	8011700 <__aeabi_f2iz>
 800a2b8:	4680      	mov	r8, r0
 800a2ba:	e772      	b.n	800a1a2 <initialize.lto_priv.135+0xe2>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e7ba      	b.n	800a236 <initialize.lto_priv.135+0x176>
 800a2c0:	21bf      	movs	r1, #191	; 0xbf
 800a2c2:	0609      	lsls	r1, r1, #24
 800a2c4:	e7d4      	b.n	800a270 <initialize.lto_priv.135+0x1b0>
 800a2c6:	21bf      	movs	r1, #191	; 0xbf
 800a2c8:	0609      	lsls	r1, r1, #24
 800a2ca:	e7f0      	b.n	800a2ae <initialize.lto_priv.135+0x1ee>
 800a2cc:	4653      	mov	r3, sl
 800a2ce:	781c      	ldrb	r4, [r3, #0]
 800a2d0:	e76e      	b.n	800a1b0 <initialize.lto_priv.135+0xf0>
 800a2d2:	46c0      	nop			; (mov r8, r8)
 800a2d4:	200005d0 	.word	0x200005d0
 800a2d8:	0801cffb 	.word	0x0801cffb
 800a2dc:	0801da75 	.word	0x0801da75
 800a2e0:	0801e67b 	.word	0x0801e67b
 800a2e4:	0801e6b0 	.word	0x0801e6b0
 800a2e8:	0801ddf1 	.word	0x0801ddf1
 800a2ec:	0801de24 	.word	0x0801de24
 800a2f0:	4d8ef3c2 	.word	0x4d8ef3c2
 800a2f4:	0030      	movs	r0, r6
 800a2f6:	f7f6 fc67 	bl	8000bc8 <configuration_is_valid>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d005      	beq.n	800a30a <initialize.lto_priv.135+0x24a>
 800a2fe:	0033      	movs	r3, r6
 800a300:	336e      	adds	r3, #110	; 0x6e
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d000      	beq.n	800a30a <initialize.lto_priv.135+0x24a>
 800a308:	e1b8      	b.n	800a67c <initialize.lto_priv.135+0x5bc>
 800a30a:	4bd2      	ldr	r3, [pc, #840]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a30c:	429f      	cmp	r7, r3
 800a30e:	db00      	blt.n	800a312 <initialize.lto_priv.135+0x252>
 800a310:	e0cb      	b.n	800a4aa <initialize.lto_priv.135+0x3ea>
 800a312:	4bd1      	ldr	r3, [pc, #836]	; (800a658 <initialize.lto_priv.135+0x598>)
 800a314:	0038      	movs	r0, r7
 800a316:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800a318:	f002 fe14 	bl	800cf44 <points_to_meter.constprop.8>
 800a31c:	2100      	movs	r1, #0
 800a31e:	f006 fff1 	bl	8011304 <__aeabi_fcmplt>
 800a322:	4cce      	ldr	r4, [pc, #824]	; (800a65c <initialize.lto_priv.135+0x59c>)
 800a324:	2800      	cmp	r0, #0
 800a326:	d100      	bne.n	800a32a <initialize.lto_priv.135+0x26a>
 800a328:	4ccd      	ldr	r4, [pc, #820]	; (800a660 <initialize.lto_priv.135+0x5a0>)
 800a32a:	0038      	movs	r0, r7
 800a32c:	f002 fe0a 	bl	800cf44 <points_to_meter.constprop.8>
 800a330:	1c05      	adds	r5, r0, #0
 800a332:	0038      	movs	r0, r7
 800a334:	f002 fe06 	bl	800cf44 <points_to_meter.constprop.8>
 800a338:	2100      	movs	r1, #0
 800a33a:	f006 ffe3 	bl	8011304 <__aeabi_fcmplt>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d000      	beq.n	800a344 <initialize.lto_priv.135+0x284>
 800a342:	e0a6      	b.n	800a492 <initialize.lto_priv.135+0x3d2>
 800a344:	21fe      	movs	r1, #254	; 0xfe
 800a346:	0589      	lsls	r1, r1, #22
 800a348:	1c28      	adds	r0, r5, #0
 800a34a:	f006 fae3 	bl	8010914 <__aeabi_fmul>
 800a34e:	49c5      	ldr	r1, [pc, #788]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a350:	f006 f834 	bl	80103bc <__aeabi_fadd>
 800a354:	f007 f81e 	bl	8011394 <__aeabi_f2uiz>
 800a358:	4680      	mov	r8, r0
 800a35a:	0038      	movs	r0, r7
 800a35c:	f002 fdf2 	bl	800cf44 <points_to_meter.constprop.8>
 800a360:	1c05      	adds	r5, r0, #0
 800a362:	0038      	movs	r0, r7
 800a364:	f002 fdee 	bl	800cf44 <points_to_meter.constprop.8>
 800a368:	2100      	movs	r1, #0
 800a36a:	f006 ffcb 	bl	8011304 <__aeabi_fcmplt>
 800a36e:	2800      	cmp	r0, #0
 800a370:	d000      	beq.n	800a374 <initialize.lto_priv.135+0x2b4>
 800a372:	e090      	b.n	800a496 <initialize.lto_priv.135+0x3d6>
 800a374:	21fe      	movs	r1, #254	; 0xfe
 800a376:	0589      	lsls	r1, r1, #22
 800a378:	1c28      	adds	r0, r5, #0
 800a37a:	f006 facb 	bl	8010914 <__aeabi_fmul>
 800a37e:	49b9      	ldr	r1, [pc, #740]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a380:	f006 f81c 	bl	80103bc <__aeabi_fadd>
 800a384:	1c05      	adds	r5, r0, #0
 800a386:	0038      	movs	r0, r7
 800a388:	f002 fddc 	bl	800cf44 <points_to_meter.constprop.8>
 800a38c:	4681      	mov	r9, r0
 800a38e:	0038      	movs	r0, r7
 800a390:	f002 fdd8 	bl	800cf44 <points_to_meter.constprop.8>
 800a394:	2100      	movs	r1, #0
 800a396:	f006 ffb5 	bl	8011304 <__aeabi_fcmplt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d17d      	bne.n	800a49a <initialize.lto_priv.135+0x3da>
 800a39e:	21fe      	movs	r1, #254	; 0xfe
 800a3a0:	0589      	lsls	r1, r1, #22
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	f006 fab6 	bl	8010914 <__aeabi_fmul>
 800a3a8:	49ae      	ldr	r1, [pc, #696]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a3aa:	f006 f807 	bl	80103bc <__aeabi_fadd>
 800a3ae:	f006 fff1 	bl	8011394 <__aeabi_f2uiz>
 800a3b2:	f007 fa0f 	bl	80117d4 <__aeabi_ui2f>
 800a3b6:	1c01      	adds	r1, r0, #0
 800a3b8:	1c28      	adds	r0, r5, #0
 800a3ba:	f006 fbdd 	bl	8010b78 <__aeabi_fsub>
 800a3be:	49aa      	ldr	r1, [pc, #680]	; (800a668 <initialize.lto_priv.135+0x5a8>)
 800a3c0:	f006 faa8 	bl	8010914 <__aeabi_fmul>
 800a3c4:	f006 ffe6 	bl	8011394 <__aeabi_f2uiz>
 800a3c8:	0007      	movs	r7, r0
 800a3ca:	48a2      	ldr	r0, [pc, #648]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a3cc:	f002 fdba 	bl	800cf44 <points_to_meter.constprop.8>
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	f006 ff97 	bl	8011304 <__aeabi_fcmplt>
 800a3d6:	4da1      	ldr	r5, [pc, #644]	; (800a65c <initialize.lto_priv.135+0x59c>)
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d100      	bne.n	800a3de <initialize.lto_priv.135+0x31e>
 800a3dc:	4da0      	ldr	r5, [pc, #640]	; (800a660 <initialize.lto_priv.135+0x5a0>)
 800a3de:	489d      	ldr	r0, [pc, #628]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a3e0:	f002 fdb0 	bl	800cf44 <points_to_meter.constprop.8>
 800a3e4:	4681      	mov	r9, r0
 800a3e6:	489b      	ldr	r0, [pc, #620]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a3e8:	f002 fdac 	bl	800cf44 <points_to_meter.constprop.8>
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f006 ff89 	bl	8011304 <__aeabi_fcmplt>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d153      	bne.n	800a49e <initialize.lto_priv.135+0x3de>
 800a3f6:	21fe      	movs	r1, #254	; 0xfe
 800a3f8:	0589      	lsls	r1, r1, #22
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	f006 fa8a 	bl	8010914 <__aeabi_fmul>
 800a400:	4998      	ldr	r1, [pc, #608]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a402:	f005 ffdb 	bl	80103bc <__aeabi_fadd>
 800a406:	f006 ffc5 	bl	8011394 <__aeabi_f2uiz>
 800a40a:	4681      	mov	r9, r0
 800a40c:	4891      	ldr	r0, [pc, #580]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a40e:	f002 fd99 	bl	800cf44 <points_to_meter.constprop.8>
 800a412:	4682      	mov	sl, r0
 800a414:	488f      	ldr	r0, [pc, #572]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a416:	f002 fd95 	bl	800cf44 <points_to_meter.constprop.8>
 800a41a:	2100      	movs	r1, #0
 800a41c:	f006 ff72 	bl	8011304 <__aeabi_fcmplt>
 800a420:	2800      	cmp	r0, #0
 800a422:	d13e      	bne.n	800a4a2 <initialize.lto_priv.135+0x3e2>
 800a424:	21fe      	movs	r1, #254	; 0xfe
 800a426:	0589      	lsls	r1, r1, #22
 800a428:	4650      	mov	r0, sl
 800a42a:	f006 fa73 	bl	8010914 <__aeabi_fmul>
 800a42e:	498d      	ldr	r1, [pc, #564]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a430:	f005 ffc4 	bl	80103bc <__aeabi_fadd>
 800a434:	4682      	mov	sl, r0
 800a436:	4887      	ldr	r0, [pc, #540]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a438:	f002 fd84 	bl	800cf44 <points_to_meter.constprop.8>
 800a43c:	4683      	mov	fp, r0
 800a43e:	4885      	ldr	r0, [pc, #532]	; (800a654 <initialize.lto_priv.135+0x594>)
 800a440:	f002 fd80 	bl	800cf44 <points_to_meter.constprop.8>
 800a444:	2100      	movs	r1, #0
 800a446:	f006 ff5d 	bl	8011304 <__aeabi_fcmplt>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d12b      	bne.n	800a4a6 <initialize.lto_priv.135+0x3e6>
 800a44e:	21fe      	movs	r1, #254	; 0xfe
 800a450:	0589      	lsls	r1, r1, #22
 800a452:	4658      	mov	r0, fp
 800a454:	f006 fa5e 	bl	8010914 <__aeabi_fmul>
 800a458:	4982      	ldr	r1, [pc, #520]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a45a:	f005 ffaf 	bl	80103bc <__aeabi_fadd>
 800a45e:	f006 ff99 	bl	8011394 <__aeabi_f2uiz>
 800a462:	f007 f9b7 	bl	80117d4 <__aeabi_ui2f>
 800a466:	1c01      	adds	r1, r0, #0
 800a468:	4650      	mov	r0, sl
 800a46a:	f006 fb85 	bl	8010b78 <__aeabi_fsub>
 800a46e:	497e      	ldr	r1, [pc, #504]	; (800a668 <initialize.lto_priv.135+0x5a8>)
 800a470:	f006 fa50 	bl	8010914 <__aeabi_fmul>
 800a474:	f006 ff8e 	bl	8011394 <__aeabi_f2uiz>
 800a478:	464b      	mov	r3, r9
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	4643      	mov	r3, r8
 800a47e:	9004      	str	r0, [sp, #16]
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	9502      	str	r5, [sp, #8]
 800a484:	9701      	str	r7, [sp, #4]
 800a486:	0023      	movs	r3, r4
 800a488:	4a78      	ldr	r2, [pc, #480]	; (800a66c <initialize.lto_priv.135+0x5ac>)
 800a48a:	4979      	ldr	r1, [pc, #484]	; (800a670 <initialize.lto_priv.135+0x5b0>)
 800a48c:	2000      	movs	r0, #0
 800a48e:	47b0      	blx	r6
 800a490:	e6c2      	b.n	800a218 <initialize.lto_priv.135+0x158>
 800a492:	4978      	ldr	r1, [pc, #480]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a494:	e758      	b.n	800a348 <initialize.lto_priv.135+0x288>
 800a496:	4977      	ldr	r1, [pc, #476]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a498:	e76e      	b.n	800a378 <initialize.lto_priv.135+0x2b8>
 800a49a:	4976      	ldr	r1, [pc, #472]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a49c:	e781      	b.n	800a3a2 <initialize.lto_priv.135+0x2e2>
 800a49e:	4975      	ldr	r1, [pc, #468]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a4a0:	e7ab      	b.n	800a3fa <initialize.lto_priv.135+0x33a>
 800a4a2:	4974      	ldr	r1, [pc, #464]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a4a4:	e7c0      	b.n	800a428 <initialize.lto_priv.135+0x368>
 800a4a6:	4973      	ldr	r1, [pc, #460]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a4a8:	e7d3      	b.n	800a452 <initialize.lto_priv.135+0x392>
 800a4aa:	237c      	movs	r3, #124	; 0x7c
 800a4ac:	0164      	lsls	r4, r4, #5
 800a4ae:	3c4b      	subs	r4, #75	; 0x4b
 800a4b0:	435c      	muls	r4, r3
 800a4b2:	4544      	cmp	r4, r8
 800a4b4:	db00      	blt.n	800a4b8 <initialize.lto_priv.135+0x3f8>
 800a4b6:	e0e1      	b.n	800a67c <initialize.lto_priv.135+0x5bc>
 800a4b8:	4b67      	ldr	r3, [pc, #412]	; (800a658 <initialize.lto_priv.135+0x598>)
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4be:	9306      	str	r3, [sp, #24]
 800a4c0:	f002 fd40 	bl	800cf44 <points_to_meter.constprop.8>
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	f006 ff1d 	bl	8011304 <__aeabi_fcmplt>
 800a4ca:	4d64      	ldr	r5, [pc, #400]	; (800a65c <initialize.lto_priv.135+0x59c>)
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d100      	bne.n	800a4d2 <initialize.lto_priv.135+0x412>
 800a4d0:	4d63      	ldr	r5, [pc, #396]	; (800a660 <initialize.lto_priv.135+0x5a0>)
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f002 fd36 	bl	800cf44 <points_to_meter.constprop.8>
 800a4d8:	1c06      	adds	r6, r0, #0
 800a4da:	4640      	mov	r0, r8
 800a4dc:	f002 fd32 	bl	800cf44 <points_to_meter.constprop.8>
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	f006 ff0f 	bl	8011304 <__aeabi_fcmplt>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d000      	beq.n	800a4ec <initialize.lto_priv.135+0x42c>
 800a4ea:	e0a7      	b.n	800a63c <initialize.lto_priv.135+0x57c>
 800a4ec:	21fe      	movs	r1, #254	; 0xfe
 800a4ee:	0589      	lsls	r1, r1, #22
 800a4f0:	1c30      	adds	r0, r6, #0
 800a4f2:	f006 fa0f 	bl	8010914 <__aeabi_fmul>
 800a4f6:	495b      	ldr	r1, [pc, #364]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a4f8:	f005 ff60 	bl	80103bc <__aeabi_fadd>
 800a4fc:	f006 ff4a 	bl	8011394 <__aeabi_f2uiz>
 800a500:	0007      	movs	r7, r0
 800a502:	4640      	mov	r0, r8
 800a504:	f002 fd1e 	bl	800cf44 <points_to_meter.constprop.8>
 800a508:	1c06      	adds	r6, r0, #0
 800a50a:	4640      	mov	r0, r8
 800a50c:	f002 fd1a 	bl	800cf44 <points_to_meter.constprop.8>
 800a510:	2100      	movs	r1, #0
 800a512:	f006 fef7 	bl	8011304 <__aeabi_fcmplt>
 800a516:	2800      	cmp	r0, #0
 800a518:	d000      	beq.n	800a51c <initialize.lto_priv.135+0x45c>
 800a51a:	e091      	b.n	800a640 <initialize.lto_priv.135+0x580>
 800a51c:	21fe      	movs	r1, #254	; 0xfe
 800a51e:	0589      	lsls	r1, r1, #22
 800a520:	1c30      	adds	r0, r6, #0
 800a522:	f006 f9f7 	bl	8010914 <__aeabi_fmul>
 800a526:	494f      	ldr	r1, [pc, #316]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a528:	f005 ff48 	bl	80103bc <__aeabi_fadd>
 800a52c:	1c06      	adds	r6, r0, #0
 800a52e:	4640      	mov	r0, r8
 800a530:	f002 fd08 	bl	800cf44 <points_to_meter.constprop.8>
 800a534:	4681      	mov	r9, r0
 800a536:	4640      	mov	r0, r8
 800a538:	f002 fd04 	bl	800cf44 <points_to_meter.constprop.8>
 800a53c:	2100      	movs	r1, #0
 800a53e:	f006 fee1 	bl	8011304 <__aeabi_fcmplt>
 800a542:	2800      	cmp	r0, #0
 800a544:	d17e      	bne.n	800a644 <initialize.lto_priv.135+0x584>
 800a546:	21fe      	movs	r1, #254	; 0xfe
 800a548:	0589      	lsls	r1, r1, #22
 800a54a:	4648      	mov	r0, r9
 800a54c:	f006 f9e2 	bl	8010914 <__aeabi_fmul>
 800a550:	4944      	ldr	r1, [pc, #272]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a552:	f005 ff33 	bl	80103bc <__aeabi_fadd>
 800a556:	f006 ff1d 	bl	8011394 <__aeabi_f2uiz>
 800a55a:	f007 f93b 	bl	80117d4 <__aeabi_ui2f>
 800a55e:	1c01      	adds	r1, r0, #0
 800a560:	1c30      	adds	r0, r6, #0
 800a562:	f006 fb09 	bl	8010b78 <__aeabi_fsub>
 800a566:	4940      	ldr	r1, [pc, #256]	; (800a668 <initialize.lto_priv.135+0x5a8>)
 800a568:	f006 f9d4 	bl	8010914 <__aeabi_fmul>
 800a56c:	f006 ff12 	bl	8011394 <__aeabi_f2uiz>
 800a570:	4680      	mov	r8, r0
 800a572:	0020      	movs	r0, r4
 800a574:	f002 fce6 	bl	800cf44 <points_to_meter.constprop.8>
 800a578:	2100      	movs	r1, #0
 800a57a:	f006 fec3 	bl	8011304 <__aeabi_fcmplt>
 800a57e:	4e37      	ldr	r6, [pc, #220]	; (800a65c <initialize.lto_priv.135+0x59c>)
 800a580:	2800      	cmp	r0, #0
 800a582:	d100      	bne.n	800a586 <initialize.lto_priv.135+0x4c6>
 800a584:	4e36      	ldr	r6, [pc, #216]	; (800a660 <initialize.lto_priv.135+0x5a0>)
 800a586:	0020      	movs	r0, r4
 800a588:	f002 fcdc 	bl	800cf44 <points_to_meter.constprop.8>
 800a58c:	4681      	mov	r9, r0
 800a58e:	0020      	movs	r0, r4
 800a590:	f002 fcd8 	bl	800cf44 <points_to_meter.constprop.8>
 800a594:	2100      	movs	r1, #0
 800a596:	f006 feb5 	bl	8011304 <__aeabi_fcmplt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d154      	bne.n	800a648 <initialize.lto_priv.135+0x588>
 800a59e:	21fe      	movs	r1, #254	; 0xfe
 800a5a0:	0589      	lsls	r1, r1, #22
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	f006 f9b6 	bl	8010914 <__aeabi_fmul>
 800a5a8:	492e      	ldr	r1, [pc, #184]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a5aa:	f005 ff07 	bl	80103bc <__aeabi_fadd>
 800a5ae:	f006 fef1 	bl	8011394 <__aeabi_f2uiz>
 800a5b2:	4681      	mov	r9, r0
 800a5b4:	0020      	movs	r0, r4
 800a5b6:	f002 fcc5 	bl	800cf44 <points_to_meter.constprop.8>
 800a5ba:	4682      	mov	sl, r0
 800a5bc:	0020      	movs	r0, r4
 800a5be:	f002 fcc1 	bl	800cf44 <points_to_meter.constprop.8>
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	f006 fe9e 	bl	8011304 <__aeabi_fcmplt>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d13f      	bne.n	800a64c <initialize.lto_priv.135+0x58c>
 800a5cc:	21fe      	movs	r1, #254	; 0xfe
 800a5ce:	0589      	lsls	r1, r1, #22
 800a5d0:	4650      	mov	r0, sl
 800a5d2:	f006 f99f 	bl	8010914 <__aeabi_fmul>
 800a5d6:	4923      	ldr	r1, [pc, #140]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a5d8:	f005 fef0 	bl	80103bc <__aeabi_fadd>
 800a5dc:	4682      	mov	sl, r0
 800a5de:	0020      	movs	r0, r4
 800a5e0:	f002 fcb0 	bl	800cf44 <points_to_meter.constprop.8>
 800a5e4:	4683      	mov	fp, r0
 800a5e6:	0020      	movs	r0, r4
 800a5e8:	f002 fcac 	bl	800cf44 <points_to_meter.constprop.8>
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	f006 fe89 	bl	8011304 <__aeabi_fcmplt>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	d12c      	bne.n	800a650 <initialize.lto_priv.135+0x590>
 800a5f6:	21fe      	movs	r1, #254	; 0xfe
 800a5f8:	0589      	lsls	r1, r1, #22
 800a5fa:	4658      	mov	r0, fp
 800a5fc:	f006 f98a 	bl	8010914 <__aeabi_fmul>
 800a600:	4918      	ldr	r1, [pc, #96]	; (800a664 <initialize.lto_priv.135+0x5a4>)
 800a602:	f005 fedb 	bl	80103bc <__aeabi_fadd>
 800a606:	f006 fec5 	bl	8011394 <__aeabi_f2uiz>
 800a60a:	f007 f8e3 	bl	80117d4 <__aeabi_ui2f>
 800a60e:	1c01      	adds	r1, r0, #0
 800a610:	4650      	mov	r0, sl
 800a612:	f006 fab1 	bl	8010b78 <__aeabi_fsub>
 800a616:	4914      	ldr	r1, [pc, #80]	; (800a668 <initialize.lto_priv.135+0x5a8>)
 800a618:	f006 f97c 	bl	8010914 <__aeabi_fmul>
 800a61c:	f006 feba 	bl	8011394 <__aeabi_f2uiz>
 800a620:	464b      	mov	r3, r9
 800a622:	9303      	str	r3, [sp, #12]
 800a624:	4643      	mov	r3, r8
 800a626:	9004      	str	r0, [sp, #16]
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	9602      	str	r6, [sp, #8]
 800a62c:	9700      	str	r7, [sp, #0]
 800a62e:	002b      	movs	r3, r5
 800a630:	4a11      	ldr	r2, [pc, #68]	; (800a678 <initialize.lto_priv.135+0x5b8>)
 800a632:	490f      	ldr	r1, [pc, #60]	; (800a670 <initialize.lto_priv.135+0x5b0>)
 800a634:	2000      	movs	r0, #0
 800a636:	9c06      	ldr	r4, [sp, #24]
 800a638:	47a0      	blx	r4
 800a63a:	e5ed      	b.n	800a218 <initialize.lto_priv.135+0x158>
 800a63c:	490d      	ldr	r1, [pc, #52]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a63e:	e757      	b.n	800a4f0 <initialize.lto_priv.135+0x430>
 800a640:	490c      	ldr	r1, [pc, #48]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a642:	e76d      	b.n	800a520 <initialize.lto_priv.135+0x460>
 800a644:	490b      	ldr	r1, [pc, #44]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a646:	e780      	b.n	800a54a <initialize.lto_priv.135+0x48a>
 800a648:	490a      	ldr	r1, [pc, #40]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a64a:	e7aa      	b.n	800a5a2 <initialize.lto_priv.135+0x4e2>
 800a64c:	4909      	ldr	r1, [pc, #36]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a64e:	e7bf      	b.n	800a5d0 <initialize.lto_priv.135+0x510>
 800a650:	4908      	ldr	r1, [pc, #32]	; (800a674 <initialize.lto_priv.135+0x5b4>)
 800a652:	e7d2      	b.n	800a5fa <initialize.lto_priv.135+0x53a>
 800a654:	fffffa30 	.word	0xfffffa30
 800a658:	200005d0 	.word	0x200005d0
 800a65c:	0801ef74 	.word	0x0801ef74
 800a660:	0801ee9f 	.word	0x0801ee9f
 800a664:	350637bd 	.word	0x350637bd
 800a668:	49742400 	.word	0x49742400
 800a66c:	0801de53 	.word	0x0801de53
 800a670:	0801e6b0 	.word	0x0801e6b0
 800a674:	bf800000 	.word	0xbf800000
 800a678:	0801de90 	.word	0x0801de90
 800a67c:	0030      	movs	r0, r6
 800a67e:	f7f6 fad9 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a682:	0033      	movs	r3, r6
 800a684:	332e      	adds	r3, #46	; 0x2e
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	4682      	mov	sl, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d049      	beq.n	800a722 <initialize.lto_priv.135+0x662>
 800a68e:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 800a690:	466a      	mov	r2, sp
 800a692:	8c12      	ldrh	r2, [r2, #32]
 800a694:	0ffc      	lsrs	r4, r7, #31
 800a696:	9207      	str	r2, [sp, #28]
 800a698:	464a      	mov	r2, r9
 800a69a:	19e0      	adds	r0, r4, r7
 800a69c:	8093      	strh	r3, [r2, #4]
 800a69e:	217c      	movs	r1, #124	; 0x7c
 800a6a0:	f006 fcf4 	bl	801108c <__divsi3>
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	1b04      	subs	r4, r0, r4
 800a6a8:	811c      	strh	r4, [r3, #8]
 800a6aa:	4643      	mov	r3, r8
 800a6ac:	0fdb      	lsrs	r3, r3, #31
 800a6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b0:	4443      	add	r3, r8
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	217c      	movs	r1, #124	; 0x7c
 800a6b6:	f006 fce9 	bl	801108c <__divsi3>
 800a6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6bc:	4651      	mov	r1, sl
 800a6be:	1ac0      	subs	r0, r0, r3
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	3001      	adds	r0, #1
 800a6c4:	1b04      	subs	r4, r0, r4
 800a6c6:	b2a4      	uxth	r4, r4
 800a6c8:	815c      	strh	r4, [r3, #10]
 800a6ca:	0038      	movs	r0, r7
 800a6cc:	f006 fdc4 	bl	8011258 <__aeabi_idivmod>
 800a6d0:	4451      	add	r1, sl
 800a6d2:	0008      	movs	r0, r1
 800a6d4:	4651      	mov	r1, sl
 800a6d6:	f006 fdbf 	bl	8011258 <__aeabi_idivmod>
 800a6da:	464b      	mov	r3, r9
 800a6dc:	0020      	movs	r0, r4
 800a6de:	80d9      	strh	r1, [r3, #6]
 800a6e0:	9907      	ldr	r1, [sp, #28]
 800a6e2:	f006 fccf 	bl	8011084 <__aeabi_uidivmod>
 800a6e6:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6e8:	b280      	uxth	r0, r0
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	d11d      	bne.n	800a72a <initialize.lto_priv.135+0x66a>
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	8198      	strh	r0, [r3, #12]
 800a6f2:	0030      	movs	r0, r6
 800a6f4:	f7f6 fb3d 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 800a6f8:	0004      	movs	r4, r0
 800a6fa:	0030      	movs	r0, r6
 800a6fc:	f7f6 fafa 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800a700:	2c04      	cmp	r4, #4
 800a702:	d001      	beq.n	800a708 <initialize.lto_priv.135+0x648>
 800a704:	2801      	cmp	r0, #1
 800a706:	d012      	beq.n	800a72e <initialize.lto_priv.135+0x66e>
 800a708:	464b      	mov	r3, r9
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	895b      	ldrh	r3, [r3, #10]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d20d      	bcs.n	800a72e <initialize.lto_priv.135+0x66e>
 800a712:	4bd0      	ldr	r3, [pc, #832]	; (800aa54 <initialize.lto_priv.135+0x994>)
 800a714:	2000      	movs	r0, #0
 800a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a718:	4acf      	ldr	r2, [pc, #828]	; (800aa58 <initialize.lto_priv.135+0x998>)
 800a71a:	49d0      	ldr	r1, [pc, #832]	; (800aa5c <initialize.lto_priv.135+0x99c>)
 800a71c:	4798      	blx	r3
 800a71e:	2000      	movs	r0, #0
 800a720:	e4e9      	b.n	800a0f6 <initialize.lto_priv.135+0x36>
 800a722:	0033      	movs	r3, r6
 800a724:	3332      	adds	r3, #50	; 0x32
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	e7b2      	b.n	800a690 <initialize.lto_priv.135+0x5d0>
 800a72a:	3001      	adds	r0, #1
 800a72c:	e7df      	b.n	800a6ee <initialize.lto_priv.135+0x62e>
 800a72e:	f002 fbed 	bl	800cf0c <get_dt.constprop.9>
 800a732:	1c04      	adds	r4, r0, #0
 800a734:	4650      	mov	r0, sl
 800a736:	f007 f84d 	bl	80117d4 <__aeabi_ui2f>
 800a73a:	1c21      	adds	r1, r4, #0
 800a73c:	f006 f8ea 	bl	8010914 <__aeabi_fmul>
 800a740:	465b      	mov	r3, fp
 800a742:	60d8      	str	r0, [r3, #12]
 800a744:	0038      	movs	r0, r7
 800a746:	f002 fbfd 	bl	800cf44 <points_to_meter.constprop.8>
 800a74a:	465b      	mov	r3, fp
 800a74c:	6018      	str	r0, [r3, #0]
 800a74e:	4640      	mov	r0, r8
 800a750:	f002 fbf8 	bl	800cf44 <points_to_meter.constprop.8>
 800a754:	465b      	mov	r3, fp
 800a756:	6819      	ldr	r1, [r3, #0]
 800a758:	6098      	str	r0, [r3, #8]
 800a75a:	f006 fa0d 	bl	8010b78 <__aeabi_fsub>
 800a75e:	465b      	mov	r3, fp
 800a760:	6058      	str	r0, [r3, #4]
 800a762:	4643      	mov	r3, r8
 800a764:	4651      	mov	r1, sl
 800a766:	1bd8      	subs	r0, r3, r7
 800a768:	f006 fc90 	bl	801108c <__divsi3>
 800a76c:	3001      	adds	r0, #1
 800a76e:	b283      	uxth	r3, r0
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	465b      	mov	r3, fp
 800a774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a776:	4651      	mov	r1, sl
 800a778:	82da      	strh	r2, [r3, #22]
 800a77a:	464b      	mov	r3, r9
 800a77c:	899b      	ldrh	r3, [r3, #12]
 800a77e:	930a      	str	r3, [sp, #40]	; 0x28
 800a780:	465b      	mov	r3, fp
 800a782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a784:	831a      	strh	r2, [r3, #24]
 800a786:	464b      	mov	r3, r9
 800a788:	895c      	ldrh	r4, [r3, #10]
 800a78a:	237c      	movs	r3, #124	; 0x7c
 800a78c:	0018      	movs	r0, r3
 800a78e:	4360      	muls	r0, r4
 800a790:	4698      	mov	r8, r3
 800a792:	f006 fbf1 	bl	8010f78 <__udivsi3>
 800a796:	9b06      	ldr	r3, [sp, #24]
 800a798:	4641      	mov	r1, r8
 800a79a:	8018      	strh	r0, [r3, #0]
 800a79c:	811c      	strh	r4, [r3, #8]
 800a79e:	0038      	movs	r0, r7
 800a7a0:	f006 fd5a 	bl	8011258 <__aeabi_idivmod>
 800a7a4:	4441      	add	r1, r8
 800a7a6:	0008      	movs	r0, r1
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	f006 fd55 	bl	8011258 <__aeabi_idivmod>
 800a7ae:	0008      	movs	r0, r1
 800a7b0:	4651      	mov	r1, sl
 800a7b2:	f006 fc6b 	bl	801108c <__divsi3>
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ba:	8058      	strh	r0, [r3, #2]
 800a7bc:	809a      	strh	r2, [r3, #4]
 800a7be:	4651      	mov	r1, sl
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f006 fbd9 	bl	8010f78 <__udivsi3>
 800a7c6:	9b06      	ldr	r3, [sp, #24]
 800a7c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7ca:	80d8      	strh	r0, [r3, #6]
 800a7cc:	821a      	strh	r2, [r3, #16]
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	d228      	bcs.n	800a826 <initialize.lto_priv.135+0x766>
 800a7d4:	466b      	mov	r3, sp
 800a7d6:	8c19      	ldrh	r1, [r3, #32]
 800a7d8:	9b06      	ldr	r3, [sp, #24]
 800a7da:	8299      	strh	r1, [r3, #20]
 800a7dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d004      	beq.n	800a7ec <initialize.lto_priv.135+0x72c>
 800a7e2:	9907      	ldr	r1, [sp, #28]
 800a7e4:	0020      	movs	r0, r4
 800a7e6:	f006 fc4d 	bl	8011084 <__aeabi_uidivmod>
 800a7ea:	b289      	uxth	r1, r1
 800a7ec:	9b06      	ldr	r3, [sp, #24]
 800a7ee:	82d9      	strh	r1, [r3, #22]
 800a7f0:	0030      	movs	r0, r6
 800a7f2:	f7f6 f9e9 	bl	8000bc8 <configuration_is_valid>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d019      	beq.n	800a82e <initialize.lto_priv.135+0x76e>
 800a7fa:	0033      	movs	r3, r6
 800a7fc:	3346      	adds	r3, #70	; 0x46
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d014      	beq.n	800a82e <initialize.lto_priv.135+0x76e>
 800a804:	2301      	movs	r3, #1
 800a806:	64ab      	str	r3, [r5, #72]	; 0x48
 800a808:	2300      	movs	r3, #0
 800a80a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800a80c:	2400      	movs	r4, #0
 800a80e:	0030      	movs	r0, r6
 800a810:	652c      	str	r4, [r5, #80]	; 0x50
 800a812:	f7f6 fa6f 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800a816:	0023      	movs	r3, r4
 800a818:	ac10      	add	r4, sp, #64	; 0x40
 800a81a:	2803      	cmp	r0, #3
 800a81c:	d810      	bhi.n	800a840 <initialize.lto_priv.135+0x780>
 800a81e:	f006 fb97 	bl	8010f50 <__gnu_thumb1_case_uqi>
 800a822:	1d0b      	.short	0x1d0b
 800a824:	3323      	.short	0x3323
 800a826:	9b06      	ldr	r3, [sp, #24]
 800a828:	829c      	strh	r4, [r3, #20]
 800a82a:	82dc      	strh	r4, [r3, #22]
 800a82c:	e7e0      	b.n	800a7f0 <initialize.lto_priv.135+0x730>
 800a82e:	2300      	movs	r3, #0
 800a830:	64ab      	str	r3, [r5, #72]	; 0x48
 800a832:	3301      	adds	r3, #1
 800a834:	64eb      	str	r3, [r5, #76]	; 0x4c
 800a836:	e7e9      	b.n	800a80c <initialize.lto_priv.135+0x74c>
 800a838:	656b      	str	r3, [r5, #84]	; 0x54
 800a83a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a83c:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a83e:	662b      	str	r3, [r5, #96]	; 0x60
 800a840:	0030      	movs	r0, r6
 800a842:	f7f6 fa96 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 800a846:	2804      	cmp	r0, #4
 800a848:	d82a      	bhi.n	800a8a0 <initialize.lto_priv.135+0x7e0>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2201      	movs	r2, #1
 800a84e:	f006 fb89 	bl	8010f64 <__gnu_thumb1_case_uhi>
 800a852:	0025      	.short	0x0025
 800a854:	00f70025 	.word	0x00f70025
 800a858:	002500fa 	.word	0x002500fa
 800a85c:	2201      	movs	r2, #1
 800a85e:	656b      	str	r3, [r5, #84]	; 0x54
 800a860:	65aa      	str	r2, [r5, #88]	; 0x58
 800a862:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a864:	662b      	str	r3, [r5, #96]	; 0x60
 800a866:	e7eb      	b.n	800a840 <initialize.lto_priv.135+0x780>
 800a868:	0030      	movs	r0, r6
 800a86a:	f7f6 fa2d 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800a86e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a870:	0021      	movs	r1, r4
 800a872:	f7fd fb03 	bl	8007e7c <acc_radar_engine_common_frequency_to_main_clk>
 800a876:	2301      	movs	r3, #1
 800a878:	656b      	str	r3, [r5, #84]	; 0x54
 800a87a:	2300      	movs	r3, #0
 800a87c:	65ab      	str	r3, [r5, #88]	; 0x58
 800a87e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a880:	65eb      	str	r3, [r5, #92]	; 0x5c
 800a882:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a884:	662b      	str	r3, [r5, #96]	; 0x60
 800a886:	e7db      	b.n	800a840 <initialize.lto_priv.135+0x780>
 800a888:	0030      	movs	r0, r6
 800a88a:	f7f6 fa1d 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800a88e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a890:	0021      	movs	r1, r4
 800a892:	f7fd faf3 	bl	8007e7c <acc_radar_engine_common_frequency_to_main_clk>
 800a896:	2301      	movs	r3, #1
 800a898:	656b      	str	r3, [r5, #84]	; 0x54
 800a89a:	e7ef      	b.n	800a87c <initialize.lto_priv.135+0x7bc>
 800a89c:	666a      	str	r2, [r5, #100]	; 0x64
 800a89e:	66aa      	str	r2, [r5, #104]	; 0x68
 800a8a0:	0030      	movs	r0, r6
 800a8a2:	f7f6 f991 	bl	8000bc8 <configuration_is_valid>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	0007      	movs	r7, r0
 800a8aa:	4298      	cmp	r0, r3
 800a8ac:	d00b      	beq.n	800a8c6 <initialize.lto_priv.135+0x806>
 800a8ae:	0033      	movs	r3, r6
 800a8b0:	3350      	adds	r3, #80	; 0x50
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b6:	0033      	movs	r3, r6
 800a8b8:	3352      	adds	r3, #82	; 0x52
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	930c      	str	r3, [sp, #48]	; 0x30
 800a8be:	0033      	movs	r3, r6
 800a8c0:	334f      	adds	r3, #79	; 0x4f
 800a8c2:	781f      	ldrb	r7, [r3, #0]
 800a8c4:	003b      	movs	r3, r7
 800a8c6:	002a      	movs	r2, r5
 800a8c8:	32b4      	adds	r2, #180	; 0xb4
 800a8ca:	6013      	str	r3, [r2, #0]
 800a8cc:	2f00      	cmp	r7, #0
 800a8ce:	d002      	beq.n	800a8d6 <initialize.lto_priv.135+0x816>
 800a8d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	6053      	str	r3, [r2, #4]
 800a8d6:	0030      	movs	r0, r6
 800a8d8:	f7f6 fa42 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 800a8dc:	2301      	movs	r3, #1
 800a8de:	4698      	mov	r8, r3
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d103      	bne.n	800a8ec <initialize.lto_priv.135+0x82c>
 800a8e4:	0003      	movs	r3, r0
 800a8e6:	2f00      	cmp	r7, #0
 800a8e8:	d000      	beq.n	800a8ec <initialize.lto_priv.135+0x82c>
 800a8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ec:	4642      	mov	r2, r8
 800a8ee:	439a      	bics	r2, r3
 800a8f0:	66ea      	str	r2, [r5, #108]	; 0x6c
 800a8f2:	0030      	movs	r0, r6
 800a8f4:	f7f6 fa2b 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 800a8f8:	4643      	mov	r3, r8
 800a8fa:	4058      	eors	r0, r3
 800a8fc:	b2c0      	uxtb	r0, r0
 800a8fe:	676b      	str	r3, [r5, #116]	; 0x74
 800a900:	6728      	str	r0, [r5, #112]	; 0x70
 800a902:	0030      	movs	r0, r6
 800a904:	f7f6 fa18 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 800a908:	3801      	subs	r0, #1
 800a90a:	67a8      	str	r0, [r5, #120]	; 0x78
 800a90c:	0030      	movs	r0, r6
 800a90e:	f7f6 f95b 	bl	8000bc8 <configuration_is_valid>
 800a912:	2300      	movs	r3, #0
 800a914:	4298      	cmp	r0, r3
 800a916:	d000      	beq.n	800a91a <initialize.lto_priv.135+0x85a>
 800a918:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800a91a:	67eb      	str	r3, [r5, #124]	; 0x7c
 800a91c:	0030      	movs	r0, r6
 800a91e:	f7f6 f9c8 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800a922:	1d2b      	adds	r3, r5, #4
 800a924:	67d8      	str	r0, [r3, #124]	; 0x7c
 800a926:	0030      	movs	r0, r6
 800a928:	f7f6 f94e 	bl	8000bc8 <configuration_is_valid>
 800a92c:	2300      	movs	r3, #0
 800a92e:	4298      	cmp	r0, r3
 800a930:	d001      	beq.n	800a936 <initialize.lto_priv.135+0x876>
 800a932:	1db3      	adds	r3, r6, #6
 800a934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a936:	002a      	movs	r2, r5
 800a938:	3b01      	subs	r3, #1
 800a93a:	3208      	adds	r2, #8
 800a93c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800a93e:	0030      	movs	r0, r6
 800a940:	f7f6 f9a2 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 800a944:	002b      	movs	r3, r5
 800a946:	3388      	adds	r3, #136	; 0x88
 800a948:	6018      	str	r0, [r3, #0]
 800a94a:	0030      	movs	r0, r6
 800a94c:	f7f6 f93c 	bl	8000bc8 <configuration_is_valid>
 800a950:	2800      	cmp	r0, #0
 800a952:	d002      	beq.n	800a95a <initialize.lto_priv.135+0x89a>
 800a954:	0033      	movs	r3, r6
 800a956:	336d      	adds	r3, #109	; 0x6d
 800a958:	7818      	ldrb	r0, [r3, #0]
 800a95a:	002b      	movs	r3, r5
 800a95c:	338d      	adds	r3, #141	; 0x8d
 800a95e:	7018      	strb	r0, [r3, #0]
 800a960:	0030      	movs	r0, r6
 800a962:	f7f6 f967 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800a966:	002b      	movs	r3, r5
 800a968:	33a4      	adds	r3, #164	; 0xa4
 800a96a:	6018      	str	r0, [r3, #0]
 800a96c:	0030      	movs	r0, r6
 800a96e:	f7f6 f92b 	bl	8000bc8 <configuration_is_valid>
 800a972:	2300      	movs	r3, #0
 800a974:	4298      	cmp	r0, r3
 800a976:	d002      	beq.n	800a97e <initialize.lto_priv.135+0x8be>
 800a978:	0033      	movs	r3, r6
 800a97a:	336b      	adds	r3, #107	; 0x6b
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	002a      	movs	r2, r5
 800a980:	329c      	adds	r2, #156	; 0x9c
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	0030      	movs	r0, r6
 800a986:	f7f6 f91f 	bl	8000bc8 <configuration_is_valid>
 800a98a:	2300      	movs	r3, #0
 800a98c:	4298      	cmp	r0, r3
 800a98e:	d002      	beq.n	800a996 <initialize.lto_priv.135+0x8d6>
 800a990:	0033      	movs	r3, r6
 800a992:	336c      	adds	r3, #108	; 0x6c
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	002a      	movs	r2, r5
 800a998:	32a0      	adds	r2, #160	; 0xa0
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	0030      	movs	r0, r6
 800a99e:	f7f6 f92d 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	002a      	movs	r2, r5
 800a9a6:	4058      	eors	r0, r3
 800a9a8:	32ac      	adds	r2, #172	; 0xac
 800a9aa:	7053      	strb	r3, [r2, #1]
 800a9ac:	7010      	strb	r0, [r2, #0]
 800a9ae:	464a      	mov	r2, r9
 800a9b0:	002b      	movs	r3, r5
 800a9b2:	8892      	ldrh	r2, [r2, #4]
 800a9b4:	3390      	adds	r3, #144	; 0x90
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	464b      	mov	r3, r9
 800a9ba:	899b      	ldrh	r3, [r3, #12]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d945      	bls.n	800aa4c <initialize.lto_priv.135+0x98c>
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	6958      	ldr	r0, [r3, #20]
 800a9c4:	f7fa fdd0 	bl	8005568 <get_package_range_coarse_max>
 800a9c8:	002b      	movs	r3, r5
 800a9ca:	464a      	mov	r2, r9
 800a9cc:	3394      	adds	r3, #148	; 0x94
 800a9ce:	3801      	subs	r0, #1
 800a9d0:	6018      	str	r0, [r3, #0]
 800a9d2:	2108      	movs	r1, #8
 800a9d4:	5e52      	ldrsh	r2, [r2, r1]
 800a9d6:	605a      	str	r2, [r3, #4]
 800a9d8:	464a      	mov	r2, r9
 800a9da:	88d2      	ldrh	r2, [r2, #6]
 800a9dc:	615a      	str	r2, [r3, #20]
 800a9de:	f7fd fa45 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 800a9e2:	002b      	movs	r3, r5
 800a9e4:	33b0      	adds	r3, #176	; 0xb0
 800a9e6:	6018      	str	r0, [r3, #0]
 800a9e8:	23e1      	movs	r3, #225	; 0xe1
 800a9ea:	465a      	mov	r2, fp
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	8293      	strh	r3, [r2, #20]
 800a9f0:	002b      	movs	r3, r5
 800a9f2:	33cc      	adds	r3, #204	; 0xcc
 800a9f4:	8819      	ldrh	r1, [r3, #0]
 800a9f6:	207c      	movs	r0, #124	; 0x7c
 800a9f8:	f006 fabe 	bl	8010f78 <__udivsi3>
 800a9fc:	9b06      	ldr	r3, [sp, #24]
 800a9fe:	9a06      	ldr	r2, [sp, #24]
 800aa00:	891b      	ldrh	r3, [r3, #8]
 800aa02:	0021      	movs	r1, r4
 800aa04:	4358      	muls	r0, r3
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	8158      	strh	r0, [r3, #10]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	0028      	movs	r0, r5
 800aa0e:	8313      	strh	r3, [r2, #24]
 800aa10:	f005 fc94 	bl	801033c <acc_cpd_linear_sweep_get_info>
 800aa14:	4649      	mov	r1, r9
 800aa16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa18:	0022      	movs	r2, r4
 800aa1a:	8023      	strh	r3, [r4, #0]
 800aa1c:	2013      	movs	r0, #19
 800aa1e:	2301      	movs	r3, #1
 800aa20:	6809      	ldr	r1, [r1, #0]
 800aa22:	f7f5 fb89 	bl	8000138 <acc_probes_execute_uint16>
 800aa26:	35ce      	adds	r5, #206	; 0xce
 800aa28:	8823      	ldrh	r3, [r4, #0]
 800aa2a:	882a      	ldrh	r2, [r5, #0]
 800aa2c:	3303      	adds	r3, #3
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	9a06      	ldr	r2, [sp, #24]
 800aa32:	2001      	movs	r0, #1
 800aa34:	81d3      	strh	r3, [r2, #14]
 800aa36:	2396      	movs	r3, #150	; 0x96
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	8193      	strh	r3, [r2, #12]
 800aa3c:	f7ff fb5b 	bl	800a0f6 <initialize.lto_priv.135+0x36>
 800aa40:	666a      	str	r2, [r5, #100]	; 0x64
 800aa42:	66ab      	str	r3, [r5, #104]	; 0x68
 800aa44:	e72c      	b.n	800a8a0 <initialize.lto_priv.135+0x7e0>
 800aa46:	666b      	str	r3, [r5, #100]	; 0x64
 800aa48:	66ab      	str	r3, [r5, #104]	; 0x68
 800aa4a:	e729      	b.n	800a8a0 <initialize.lto_priv.135+0x7e0>
 800aa4c:	464b      	mov	r3, r9
 800aa4e:	8958      	ldrh	r0, [r3, #10]
 800aa50:	e7ba      	b.n	800a9c8 <initialize.lto_priv.135+0x908>
 800aa52:	46c0      	nop			; (mov r8, r8)
 800aa54:	200005d0 	.word	0x200005d0
 800aa58:	0801e6d0 	.word	0x0801e6d0
 800aa5c:	0801e6b0 	.word	0x0801e6b0

0800aa60 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800aa60:	b500      	push	{lr}
 800aa62:	b083      	sub	sp, #12
	if (queue_cmd_end == 2){
 800aa64:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <HAL_UART_TxCpltCallback+0x38>)
 800aa66:	2373      	movs	r3, #115	; 0x73
 800aa68:	5cd3      	ldrb	r3, [r2, r3]
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d003      	beq.n	800aa76 <HAL_UART_TxCpltCallback+0x16>
	}else if(queue_cmd_end == 1){
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d005      	beq.n	800aa7e <HAL_UART_TxCpltCallback+0x1e>
}
 800aa72:	b003      	add	sp, #12
 800aa74:	bd00      	pop	{pc}
		queue_cmd_end = 1;
 800aa76:	3371      	adds	r3, #113	; 0x71
 800aa78:	2101      	movs	r1, #1
 800aa7a:	54d1      	strb	r1, [r2, r3]
 800aa7c:	e7f9      	b.n	800aa72 <HAL_UART_TxCpltCallback+0x12>
		queue_cmd_end = 0;
 800aa7e:	4a06      	ldr	r2, [pc, #24]	; (800aa98 <HAL_UART_TxCpltCallback+0x38>)
 800aa80:	3372      	adds	r3, #114	; 0x72
 800aa82:	2100      	movs	r1, #0
 800aa84:	54d1      	strb	r1, [r2, r3]
		uint8_t end = 0xCD;
 800aa86:	466b      	mov	r3, sp
 800aa88:	1dd9      	adds	r1, r3, #7
 800aa8a:	23cd      	movs	r3, #205	; 0xcd
 800aa8c:	700b      	strb	r3, [r1, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f002 fc2c 	bl	800d2ec <HAL_UART_Transmit_IT>
 800aa94:	e7ed      	b.n	800aa72 <HAL_UART_TxCpltCallback+0x12>
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	2000020c 	.word	0x2000020c

0800aa9c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800aa9c:	b510      	push	{r4, lr}
 800aa9e:	0004      	movs	r4, r0
	if (uart_state == 0){
 800aaa0:	4a22      	ldr	r2, [pc, #136]	; (800ab2c <HAL_UART_RxCpltCallback+0x90>)
 800aaa2:	2374      	movs	r3, #116	; 0x74
 800aaa4:	5cd3      	ldrb	r3, [r2, r3]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d117      	bne.n	800aada <HAL_UART_RxCpltCallback+0x3e>
		if (uart_rx_buff[0] == 0xCC){
 800aaaa:	3378      	adds	r3, #120	; 0x78
 800aaac:	5cd3      	ldrb	r3, [r2, r3]
 800aaae:	2bcc      	cmp	r3, #204	; 0xcc
 800aab0:	d005      	beq.n	800aabe <HAL_UART_RxCpltCallback+0x22>
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800aab2:	491e      	ldr	r1, [pc, #120]	; (800ab2c <HAL_UART_RxCpltCallback+0x90>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	3178      	adds	r1, #120	; 0x78
 800aab8:	f002 fb68 	bl	800d18c <HAL_UART_Receive_IT>
}
 800aabc:	bd10      	pop	{r4, pc}
			uart_state = 1;
 800aabe:	0011      	movs	r1, r2
 800aac0:	3b58      	subs	r3, #88	; 0x58
 800aac2:	2201      	movs	r2, #1
 800aac4:	54ca      	strb	r2, [r1, r3]
			cmd_length = 0;
 800aac6:	4a1a      	ldr	r2, [pc, #104]	; (800ab30 <HAL_UART_RxCpltCallback+0x94>)
 800aac8:	3b4c      	subs	r3, #76	; 0x4c
 800aaca:	2000      	movs	r0, #0
 800aacc:	54d0      	strb	r0, [r2, r3]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 800aace:	3178      	adds	r1, #120	; 0x78
 800aad0:	2202      	movs	r2, #2
 800aad2:	0020      	movs	r0, r4
 800aad4:	f002 fb5a 	bl	800d18c <HAL_UART_Receive_IT>
 800aad8:	e7f0      	b.n	800aabc <HAL_UART_RxCpltCallback+0x20>
	}else if (uart_state == 1){
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d006      	beq.n	800aaec <HAL_UART_RxCpltCallback+0x50>
	}else if (uart_state == 3){
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d1ec      	bne.n	800aabc <HAL_UART_RxCpltCallback+0x20>
		uart_state = 4;
 800aae2:	4a12      	ldr	r2, [pc, #72]	; (800ab2c <HAL_UART_RxCpltCallback+0x90>)
 800aae4:	3371      	adds	r3, #113	; 0x71
 800aae6:	2104      	movs	r1, #4
 800aae8:	54d1      	strb	r1, [r2, r3]
 800aaea:	e7e7      	b.n	800aabc <HAL_UART_RxCpltCallback+0x20>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 800aaec:	4a0f      	ldr	r2, [pc, #60]	; (800ab2c <HAL_UART_RxCpltCallback+0x90>)
 800aaee:	3377      	adds	r3, #119	; 0x77
 800aaf0:	5cd3      	ldrb	r3, [r2, r3]
 800aaf2:	480f      	ldr	r0, [pc, #60]	; (800ab30 <HAL_UART_RxCpltCallback+0x94>)
 800aaf4:	2128      	movs	r1, #40	; 0x28
 800aaf6:	5443      	strb	r3, [r0, r1]
		uart_state = 3;
 800aaf8:	314c      	adds	r1, #76	; 0x4c
 800aafa:	2003      	movs	r0, #3
 800aafc:	5450      	strb	r0, [r2, r1]
		if (cmd_length +2 > UART_BUFF){
 800aafe:	3302      	adds	r3, #2
 800ab00:	2b40      	cmp	r3, #64	; 0x40
 800ab02:	dc09      	bgt.n	800ab18 <HAL_UART_RxCpltCallback+0x7c>
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 800ab04:	4a0a      	ldr	r2, [pc, #40]	; (800ab30 <HAL_UART_RxCpltCallback+0x94>)
 800ab06:	2328      	movs	r3, #40	; 0x28
 800ab08:	5cd2      	ldrb	r2, [r2, r3]
 800ab0a:	3202      	adds	r2, #2
 800ab0c:	4907      	ldr	r1, [pc, #28]	; (800ab2c <HAL_UART_RxCpltCallback+0x90>)
 800ab0e:	3178      	adds	r1, #120	; 0x78
 800ab10:	0020      	movs	r0, r4
 800ab12:	f002 fb3b 	bl	800d18c <HAL_UART_Receive_IT>
 800ab16:	e7d1      	b.n	800aabc <HAL_UART_RxCpltCallback+0x20>
			uart_state = 0;
 800ab18:	0011      	movs	r1, r2
 800ab1a:	2374      	movs	r3, #116	; 0x74
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	54ca      	strb	r2, [r1, r3]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800ab20:	3178      	adds	r1, #120	; 0x78
 800ab22:	3201      	adds	r2, #1
 800ab24:	0020      	movs	r0, r4
 800ab26:	f002 fb31 	bl	800d18c <HAL_UART_Receive_IT>
 800ab2a:	e7eb      	b.n	800ab04 <HAL_UART_RxCpltCallback+0x68>
 800ab2c:	2000020c 	.word	0x2000020c
 800ab30:	2000038c 	.word	0x2000038c

0800ab34 <HAL_RTCEx_WakeUpTimerEventCallback>:
	rtc_wakeup_triggered = true;
 800ab34:	4b01      	ldr	r3, [pc, #4]	; (800ab3c <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 800ab36:	2201      	movs	r2, #1
 800ab38:	771a      	strb	r2, [r3, #28]
}
 800ab3a:	4770      	bx	lr
 800ab3c:	2000030c 	.word	0x2000030c

0800ab40 <HAL_RTC_AlarmAEventCallback>:
	rtc_alarm_triggered = true;
 800ab40:	4a02      	ldr	r2, [pc, #8]	; (800ab4c <HAL_RTC_AlarmAEventCallback+0xc>)
 800ab42:	2329      	movs	r3, #41	; 0x29
 800ab44:	2101      	movs	r1, #1
 800ab46:	54d1      	strb	r1, [r2, r3]
}
 800ab48:	4770      	bx	lr
 800ab4a:	46c0      	nop			; (mov r8, r8)
 800ab4c:	2000038c 	.word	0x2000038c

0800ab50 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab50:	4b02      	ldr	r3, [pc, #8]	; (800ab5c <SystemInit+0xc>)
 800ab52:	2280      	movs	r2, #128	; 0x80
 800ab54:	0512      	lsls	r2, r2, #20
 800ab56:	609a      	str	r2, [r3, #8]
#endif
}
 800ab58:	4770      	bx	lr
 800ab5a:	46c0      	nop			; (mov r8, r8)
 800ab5c:	e000ed00 	.word	0xe000ed00

0800ab60 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 800ab60:	b510      	push	{r4, lr}
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800ab62:	4802      	ldr	r0, [pc, #8]	; (800ab6c <USART1_IRQHandler+0xc>)
 800ab64:	f002 fa6e 	bl	800d044 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	46c0      	nop			; (mov r8, r8)
 800ab6c:	20000544 	.word	0x20000544

0800ab70 <I2C1_IRQHandler>:
{
 800ab70:	b510      	push	{r4, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800ab72:	4b08      	ldr	r3, [pc, #32]	; (800ab94 <I2C1_IRQHandler+0x24>)
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	23e0      	movs	r3, #224	; 0xe0
 800ab7a:	00db      	lsls	r3, r3, #3
 800ab7c:	421a      	tst	r2, r3
 800ab7e:	d104      	bne.n	800ab8a <I2C1_IRQHandler+0x1a>
		HAL_I2C_EV_IRQHandler(&hi2c1);
 800ab80:	4804      	ldr	r0, [pc, #16]	; (800ab94 <I2C1_IRQHandler+0x24>)
 800ab82:	3020      	adds	r0, #32
 800ab84:	f002 fda9 	bl	800d6da <HAL_I2C_EV_IRQHandler>
}
 800ab88:	bd10      	pop	{r4, pc}
		HAL_I2C_ER_IRQHandler(&hi2c1);
 800ab8a:	4802      	ldr	r0, [pc, #8]	; (800ab94 <I2C1_IRQHandler+0x24>)
 800ab8c:	3020      	adds	r0, #32
 800ab8e:	f002 fd75 	bl	800d67c <HAL_I2C_ER_IRQHandler>
 800ab92:	e7f9      	b.n	800ab88 <I2C1_IRQHandler+0x18>
 800ab94:	2000030c 	.word	0x2000030c

0800ab98 <DMA1_Channel2_3_IRQHandler>:
{
 800ab98:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ab9a:	4802      	ldr	r0, [pc, #8]	; (800aba4 <DMA1_Channel2_3_IRQHandler+0xc>)
 800ab9c:	302c      	adds	r0, #44	; 0x2c
 800ab9e:	f003 fe3f 	bl	800e820 <HAL_DMA_IRQHandler>
}
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	2000038c 	.word	0x2000038c

0800aba8 <DMA1_Channel1_IRQHandler>:
{
 800aba8:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800abaa:	4802      	ldr	r0, [pc, #8]	; (800abb4 <DMA1_Channel1_IRQHandler+0xc>)
 800abac:	3008      	adds	r0, #8
 800abae:	f003 fe37 	bl	800e820 <HAL_DMA_IRQHandler>
}
 800abb2:	bd10      	pop	{r4, pc}
 800abb4:	2000040c 	.word	0x2000040c

0800abb8 <EXTI4_15_IRQHandler>:
{
 800abb8:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800abba:	2020      	movs	r0, #32
 800abbc:	f004 fc74 	bl	800f4a8 <HAL_GPIO_EXTI_IRQHandler>
}
 800abc0:	bd10      	pop	{r4, pc}

0800abc2 <EXTI2_3_IRQHandler>:
{
 800abc2:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800abc4:	2008      	movs	r0, #8
 800abc6:	f004 fc6f 	bl	800f4a8 <HAL_GPIO_EXTI_IRQHandler>
}
 800abca:	bd10      	pop	{r4, pc}

0800abcc <RTC_TAMP_IRQHandler>:
{
 800abcc:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800abce:	4c04      	ldr	r4, [pc, #16]	; (800abe0 <RTC_TAMP_IRQHandler+0x14>)
 800abd0:	3438      	adds	r4, #56	; 0x38
 800abd2:	0020      	movs	r0, r4
 800abd4:	f002 fc8b 	bl	800d4ee <HAL_RTC_AlarmIRQHandler>
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800abd8:	0020      	movs	r0, r4
 800abda:	f002 fc77 	bl	800d4cc <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800abde:	bd10      	pop	{r4, pc}
 800abe0:	2000018c 	.word	0x2000018c

0800abe4 <SysTick_Handler>:
{
 800abe4:	b510      	push	{r4, lr}
	HAL_IncTick();
 800abe6:	f003 fd15 	bl	800e614 <HAL_IncTick>
}
 800abea:	bd10      	pop	{r4, pc}

0800abec <PendSV_Handler>:
}
 800abec:	4770      	bx	lr

0800abee <SVC_Handler>:
}
 800abee:	4770      	bx	lr

0800abf0 <HardFault_Handler>:
{
 800abf0:	e7fe      	b.n	800abf0 <HardFault_Handler>

0800abf2 <NMI_Handler>:
}
 800abf2:	4770      	bx	lr

0800abf4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800abf4:	b510      	push	{r4, lr}
 800abf6:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 800abf8:	6803      	ldr	r3, [r0, #0]
 800abfa:	4a13      	ldr	r2, [pc, #76]	; (800ac48 <HAL_UART_MspDeInit+0x54>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d003      	beq.n	800ac08 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800ac00:	4a12      	ldr	r2, [pc, #72]	; (800ac4c <HAL_UART_MspDeInit+0x58>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d015      	beq.n	800ac32 <HAL_UART_MspDeInit+0x3e>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800ac06:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 800ac08:	4a11      	ldr	r2, [pc, #68]	; (800ac50 <HAL_UART_MspDeInit+0x5c>)
 800ac0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800ac0c:	4911      	ldr	r1, [pc, #68]	; (800ac54 <HAL_UART_MspDeInit+0x60>)
 800ac0e:	400b      	ands	r3, r1
 800ac10:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800ac12:	21f0      	movs	r1, #240	; 0xf0
 800ac14:	20a0      	movs	r0, #160	; 0xa0
 800ac16:	0149      	lsls	r1, r1, #5
 800ac18:	05c0      	lsls	r0, r0, #23
 800ac1a:	f004 fc64 	bl	800f4e6 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800ac1e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ac20:	f003 fe64 	bl	800e8ec <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800ac24:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ac26:	f003 fe61 	bl	800e8ec <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800ac2a:	201b      	movs	r0, #27
 800ac2c:	f003 fcfa 	bl	800e624 <HAL_NVIC_DisableIRQ>
 800ac30:	e7e9      	b.n	800ac06 <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART2_CLK_DISABLE();
 800ac32:	4a07      	ldr	r2, [pc, #28]	; (800ac50 <HAL_UART_MspDeInit+0x5c>)
 800ac34:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ac36:	4908      	ldr	r1, [pc, #32]	; (800ac58 <HAL_UART_MspDeInit+0x64>)
 800ac38:	400b      	ands	r3, r1
 800ac3a:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800ac3c:	20a0      	movs	r0, #160	; 0xa0
 800ac3e:	210c      	movs	r1, #12
 800ac40:	05c0      	lsls	r0, r0, #23
 800ac42:	f004 fc50 	bl	800f4e6 <HAL_GPIO_DeInit>
 800ac46:	e7de      	b.n	800ac06 <HAL_UART_MspDeInit+0x12>
 800ac48:	40013800 	.word	0x40013800
 800ac4c:	40004400 	.word	0x40004400
 800ac50:	40021000 	.word	0x40021000
 800ac54:	ffffbfff 	.word	0xffffbfff
 800ac58:	fffdffff 	.word	0xfffdffff

0800ac5c <HAL_UART_MspInit>:
{
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	46c6      	mov	lr, r8
 800ac60:	b500      	push	{lr}
 800ac62:	b08a      	sub	sp, #40	; 0x28
 800ac64:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac66:	2214      	movs	r2, #20
 800ac68:	2100      	movs	r1, #0
 800ac6a:	a805      	add	r0, sp, #20
 800ac6c:	f008 fefa 	bl	8013a64 <memset>
  if(huart->Instance==USART1)
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	4a3c      	ldr	r2, [pc, #240]	; (800ad64 <HAL_UART_MspInit+0x108>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d006      	beq.n	800ac86 <HAL_UART_MspInit+0x2a>
  else if(huart->Instance==USART2)
 800ac78:	4a3b      	ldr	r2, [pc, #236]	; (800ad68 <HAL_UART_MspInit+0x10c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d054      	beq.n	800ad28 <HAL_UART_MspInit+0xcc>
}
 800ac7e:	b00a      	add	sp, #40	; 0x28
 800ac80:	bc04      	pop	{r2}
 800ac82:	4690      	mov	r8, r2
 800ac84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800ac86:	4b39      	ldr	r3, [pc, #228]	; (800ad6c <HAL_UART_MspInit+0x110>)
 800ac88:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ac8a:	2080      	movs	r0, #128	; 0x80
 800ac8c:	01c0      	lsls	r0, r0, #7
 800ac8e:	4301      	orrs	r1, r0
 800ac90:	6419      	str	r1, [r3, #64]	; 0x40
 800ac92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac94:	4002      	ands	r2, r0
 800ac96:	9201      	str	r2, [sp, #4]
 800ac98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	4311      	orrs	r1, r2
 800aca0:	6359      	str	r1, [r3, #52]	; 0x34
 800aca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca4:	4013      	ands	r3, r2
 800aca6:	9302      	str	r3, [sp, #8]
 800aca8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800acaa:	23f0      	movs	r3, #240	; 0xf0
 800acac:	015b      	lsls	r3, r3, #5
 800acae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb0:	2302      	movs	r3, #2
 800acb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800acb4:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acb6:	20a0      	movs	r0, #160	; 0xa0
 800acb8:	a905      	add	r1, sp, #20
 800acba:	05c0      	lsls	r0, r0, #23
 800acbc:	f004 fc8e 	bl	800f5dc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800acc0:	4d2b      	ldr	r5, [pc, #172]	; (800ad70 <HAL_UART_MspInit+0x114>)
 800acc2:	4b2c      	ldr	r3, [pc, #176]	; (800ad74 <HAL_UART_MspInit+0x118>)
 800acc4:	60ab      	str	r3, [r5, #8]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800acc6:	2333      	movs	r3, #51	; 0x33
 800acc8:	60eb      	str	r3, [r5, #12]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acca:	3b23      	subs	r3, #35	; 0x23
 800accc:	612b      	str	r3, [r5, #16]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acce:	2600      	movs	r6, #0
 800acd0:	616e      	str	r6, [r5, #20]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800acd2:	2780      	movs	r7, #128	; 0x80
 800acd4:	61af      	str	r7, [r5, #24]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acd6:	61ee      	str	r6, [r5, #28]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acd8:	622e      	str	r6, [r5, #32]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800acda:	626e      	str	r6, [r5, #36]	; 0x24
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800acdc:	62ae      	str	r6, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800acde:	3b08      	subs	r3, #8
 800ace0:	4698      	mov	r8, r3
 800ace2:	44a8      	add	r8, r5
 800ace4:	4640      	mov	r0, r8
 800ace6:	f003 fe47 	bl	800e978 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800acea:	4643      	mov	r3, r8
 800acec:	6763      	str	r3, [r4, #116]	; 0x74
 800acee:	632c      	str	r4, [r5, #48]	; 0x30
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800acf0:	4d21      	ldr	r5, [pc, #132]	; (800ad78 <HAL_UART_MspInit+0x11c>)
 800acf2:	4b22      	ldr	r3, [pc, #136]	; (800ad7c <HAL_UART_MspInit+0x120>)
 800acf4:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800acf6:	2332      	movs	r3, #50	; 0x32
 800acf8:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800acfa:	636e      	str	r6, [r5, #52]	; 0x34
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acfc:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800acfe:	63ef      	str	r7, [r5, #60]	; 0x3c
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ad00:	642e      	str	r6, [r5, #64]	; 0x40
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ad02:	646e      	str	r6, [r5, #68]	; 0x44
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800ad04:	64ae      	str	r6, [r5, #72]	; 0x48
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ad06:	64ee      	str	r6, [r5, #76]	; 0x4c
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800ad08:	002e      	movs	r6, r5
 800ad0a:	362c      	adds	r6, #44	; 0x2c
 800ad0c:	0030      	movs	r0, r6
 800ad0e:	f003 fe33 	bl	800e978 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800ad12:	67a6      	str	r6, [r4, #120]	; 0x78
 800ad14:	656c      	str	r4, [r5, #84]	; 0x54
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ad16:	2200      	movs	r2, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	201b      	movs	r0, #27
 800ad1c:	f003 fc9e 	bl	800e65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ad20:	201b      	movs	r0, #27
 800ad22:	f003 fc8f 	bl	800e644 <HAL_NVIC_EnableIRQ>
 800ad26:	e7aa      	b.n	800ac7e <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad28:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <HAL_UART_MspInit+0x110>)
 800ad2a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ad2c:	2080      	movs	r0, #128	; 0x80
 800ad2e:	0280      	lsls	r0, r0, #10
 800ad30:	4301      	orrs	r1, r0
 800ad32:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ad34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad36:	4002      	ands	r2, r0
 800ad38:	9203      	str	r2, [sp, #12]
 800ad3a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ad3e:	2201      	movs	r2, #1
 800ad40:	4311      	orrs	r1, r2
 800ad42:	6359      	str	r1, [r3, #52]	; 0x34
 800ad44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad46:	4013      	ands	r3, r2
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad4c:	230c      	movs	r3, #12
 800ad4e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad50:	3b0a      	subs	r3, #10
 800ad52:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ad54:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad56:	20a0      	movs	r0, #160	; 0xa0
 800ad58:	a905      	add	r1, sp, #20
 800ad5a:	05c0      	lsls	r0, r0, #23
 800ad5c:	f004 fc3e 	bl	800f5dc <HAL_GPIO_Init>
 800ad60:	e78d      	b.n	800ac7e <HAL_UART_MspInit+0x22>
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	40013800 	.word	0x40013800
 800ad68:	40004400 	.word	0x40004400
 800ad6c:	40021000 	.word	0x40021000
 800ad70:	2000040c 	.word	0x2000040c
 800ad74:	40020008 	.word	0x40020008
 800ad78:	2000038c 	.word	0x2000038c
 800ad7c:	4002001c 	.word	0x4002001c

0800ad80 <HAL_SPI_MspInit>:
{
 800ad80:	b510      	push	{r4, lr}
 800ad82:	b088      	sub	sp, #32
 800ad84:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad86:	2214      	movs	r2, #20
 800ad88:	2100      	movs	r1, #0
 800ad8a:	a803      	add	r0, sp, #12
 800ad8c:	f008 fe6a 	bl	8013a64 <memset>
  if(hspi->Instance==SPI1)
 800ad90:	6822      	ldr	r2, [r4, #0]
 800ad92:	4b11      	ldr	r3, [pc, #68]	; (800add8 <HAL_SPI_MspInit+0x58>)
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d001      	beq.n	800ad9c <HAL_SPI_MspInit+0x1c>
}
 800ad98:	b008      	add	sp, #32
 800ad9a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ad9c:	4b0f      	ldr	r3, [pc, #60]	; (800addc <HAL_SPI_MspInit+0x5c>)
 800ad9e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ada0:	2080      	movs	r0, #128	; 0x80
 800ada2:	0140      	lsls	r0, r0, #5
 800ada4:	4301      	orrs	r1, r0
 800ada6:	6419      	str	r1, [r3, #64]	; 0x40
 800ada8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adaa:	4002      	ands	r2, r0
 800adac:	9201      	str	r2, [sp, #4]
 800adae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb2:	2101      	movs	r1, #1
 800adb4:	430a      	orrs	r2, r1
 800adb6:	635a      	str	r2, [r3, #52]	; 0x34
 800adb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adba:	400b      	ands	r3, r1
 800adbc:	9302      	str	r3, [sp, #8]
 800adbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 800adc0:	23e0      	movs	r3, #224	; 0xe0
 800adc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adc4:	3bde      	subs	r3, #222	; 0xde
 800adc6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adc8:	3301      	adds	r3, #1
 800adca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adcc:	20a0      	movs	r0, #160	; 0xa0
 800adce:	a903      	add	r1, sp, #12
 800add0:	05c0      	lsls	r0, r0, #23
 800add2:	f004 fc03 	bl	800f5dc <HAL_GPIO_Init>
 800add6:	e7df      	b.n	800ad98 <HAL_SPI_MspInit+0x18>
 800add8:	40013000 	.word	0x40013000
 800addc:	40021000 	.word	0x40021000

0800ade0 <HAL_RTC_MspInit>:
{
 800ade0:	b500      	push	{lr}
 800ade2:	b083      	sub	sp, #12
  if(hrtc->Instance==RTC)
 800ade4:	6802      	ldr	r2, [r0, #0]
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <HAL_RTC_MspInit+0x40>)
 800ade8:	429a      	cmp	r2, r3
 800adea:	d001      	beq.n	800adf0 <HAL_RTC_MspInit+0x10>
}
 800adec:	b003      	add	sp, #12
 800adee:	bd00      	pop	{pc}
    __HAL_RCC_RTC_ENABLE();
 800adf0:	4b0c      	ldr	r3, [pc, #48]	; (800ae24 <HAL_RTC_MspInit+0x44>)
 800adf2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800adf4:	2280      	movs	r2, #128	; 0x80
 800adf6:	0212      	lsls	r2, r2, #8
 800adf8:	430a      	orrs	r2, r1
 800adfa:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800adfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adfe:	2180      	movs	r1, #128	; 0x80
 800ae00:	00c9      	lsls	r1, r1, #3
 800ae02:	430a      	orrs	r2, r1
 800ae04:	63da      	str	r2, [r3, #60]	; 0x3c
 800ae06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae08:	400b      	ands	r3, r1
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800ae0e:	2200      	movs	r2, #0
 800ae10:	0011      	movs	r1, r2
 800ae12:	2002      	movs	r0, #2
 800ae14:	f003 fc22 	bl	800e65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800ae18:	2002      	movs	r0, #2
 800ae1a:	f003 fc13 	bl	800e644 <HAL_NVIC_EnableIRQ>
 800ae1e:	e7e5      	b.n	800adec <HAL_RTC_MspInit+0xc>
 800ae20:	40002800 	.word	0x40002800
 800ae24:	40021000 	.word	0x40021000

0800ae28 <HAL_I2C_MspInit>:
{
 800ae28:	b510      	push	{r4, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae2e:	2214      	movs	r2, #20
 800ae30:	2100      	movs	r1, #0
 800ae32:	a803      	add	r0, sp, #12
 800ae34:	f008 fe16 	bl	8013a64 <memset>
  if(hi2c->Instance==I2C1)
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	4b16      	ldr	r3, [pc, #88]	; (800ae94 <HAL_I2C_MspInit+0x6c>)
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d001      	beq.n	800ae44 <HAL_I2C_MspInit+0x1c>
}
 800ae40:	b008      	add	sp, #32
 800ae42:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae44:	4c14      	ldr	r4, [pc, #80]	; (800ae98 <HAL_I2C_MspInit+0x70>)
 800ae46:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ae48:	2102      	movs	r1, #2
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	6362      	str	r2, [r4, #52]	; 0x34
 800ae4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae50:	400b      	ands	r3, r1
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ae56:	23c0      	movs	r3, #192	; 0xc0
 800ae58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ae5a:	3bae      	subs	r3, #174	; 0xae
 800ae5c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ae5e:	3b11      	subs	r3, #17
 800ae60:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800ae62:	3305      	adds	r3, #5
 800ae64:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae66:	a903      	add	r1, sp, #12
 800ae68:	480c      	ldr	r0, [pc, #48]	; (800ae9c <HAL_I2C_MspInit+0x74>)
 800ae6a:	f004 fbb7 	bl	800f5dc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ae6e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ae70:	2180      	movs	r1, #128	; 0x80
 800ae72:	0389      	lsls	r1, r1, #14
 800ae74:	430a      	orrs	r2, r1
 800ae76:	63e2      	str	r2, [r4, #60]	; 0x3c
 800ae78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae7a:	400b      	ands	r3, r1
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800ae80:	2200      	movs	r2, #0
 800ae82:	0011      	movs	r1, r2
 800ae84:	2017      	movs	r0, #23
 800ae86:	f003 fbe9 	bl	800e65c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800ae8a:	2017      	movs	r0, #23
 800ae8c:	f003 fbda 	bl	800e644 <HAL_NVIC_EnableIRQ>
 800ae90:	e7d6      	b.n	800ae40 <HAL_I2C_MspInit+0x18>
 800ae92:	46c0      	nop			; (mov r8, r8)
 800ae94:	40005400 	.word	0x40005400
 800ae98:	40021000 	.word	0x40021000
 800ae9c:	50000400 	.word	0x50000400

0800aea0 <HAL_MspInit>:
{
 800aea0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aea2:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <HAL_MspInit+0x38>)
 800aea4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aea6:	2201      	movs	r2, #1
 800aea8:	4311      	orrs	r1, r2
 800aeaa:	6419      	str	r1, [r3, #64]	; 0x40
 800aeac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800aeae:	400a      	ands	r2, r1
 800aeb0:	9200      	str	r2, [sp, #0]
 800aeb2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800aeb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeb6:	2180      	movs	r1, #128	; 0x80
 800aeb8:	0549      	lsls	r1, r1, #21
 800aeba:	430a      	orrs	r2, r1
 800aebc:	63da      	str	r2, [r3, #60]	; 0x3c
 800aebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec0:	400b      	ands	r3, r1
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	9b01      	ldr	r3, [sp, #4]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800aec6:	4a05      	ldr	r2, [pc, #20]	; (800aedc <HAL_MspInit+0x3c>)
 800aec8:	6811      	ldr	r1, [r2, #0]
 800aeca:	23c0      	movs	r3, #192	; 0xc0
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	430b      	orrs	r3, r1
 800aed0:	6013      	str	r3, [r2, #0]
}
 800aed2:	b002      	add	sp, #8
 800aed4:	4770      	bx	lr
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	40021000 	.word	0x40021000
 800aedc:	40010000 	.word	0x40010000

0800aee0 <RegInt_parsecmd>:
void RegInt_parsecmd(void){
 800aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aee2:	46d6      	mov	lr, sl
 800aee4:	464f      	mov	r7, r9
 800aee6:	4646      	mov	r6, r8
 800aee8:	b5c0      	push	{r6, r7, lr}
 800aeea:	b082      	sub	sp, #8
	if (uart_state != 4){return;}
 800aeec:	4a93      	ldr	r2, [pc, #588]	; (800b13c <RegInt_parsecmd+0x25c>)
 800aeee:	2374      	movs	r3, #116	; 0x74
 800aef0:	5cd3      	ldrb	r3, [r2, r3]
 800aef2:	2b04      	cmp	r3, #4
 800aef4:	d005      	beq.n	800af02 <RegInt_parsecmd+0x22>
}
 800aef6:	b002      	add	sp, #8
 800aef8:	bc1c      	pop	{r2, r3, r4}
 800aefa:	4690      	mov	r8, r2
 800aefc:	4699      	mov	r9, r3
 800aefe:	46a2      	mov	sl, r4
 800af00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 800af02:	3374      	adds	r3, #116	; 0x74
 800af04:	5cd3      	ldrb	r3, [r2, r3]
 800af06:	2bf8      	cmp	r3, #248	; 0xf8
 800af08:	d00e      	beq.n	800af28 <RegInt_parsecmd+0x48>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 800af0a:	2bf9      	cmp	r3, #249	; 0xf9
 800af0c:	d040      	beq.n	800af90 <RegInt_parsecmd+0xb0>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800af0e:	2bfa      	cmp	r3, #250	; 0xfa
 800af10:	d100      	bne.n	800af14 <RegInt_parsecmd+0x34>
 800af12:	e08d      	b.n	800b030 <RegInt_parsecmd+0x150>
	uart_state = 0;
 800af14:	4989      	ldr	r1, [pc, #548]	; (800b13c <RegInt_parsecmd+0x25c>)
 800af16:	2374      	movs	r3, #116	; 0x74
 800af18:	2200      	movs	r2, #0
 800af1a:	54ca      	strb	r2, [r1, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800af1c:	3178      	adds	r1, #120	; 0x78
 800af1e:	3201      	adds	r2, #1
 800af20:	4887      	ldr	r0, [pc, #540]	; (800b140 <RegInt_parsecmd+0x260>)
 800af22:	f002 f933 	bl	800d18c <HAL_UART_Receive_IT>
 800af26:	e7e6      	b.n	800aef6 <RegInt_parsecmd+0x16>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 800af28:	4986      	ldr	r1, [pc, #536]	; (800b144 <RegInt_parsecmd+0x264>)
 800af2a:	2228      	movs	r2, #40	; 0x28
 800af2c:	5c8a      	ldrb	r2, [r1, r2]
 800af2e:	2a01      	cmp	r2, #1
 800af30:	d1eb      	bne.n	800af0a <RegInt_parsecmd+0x2a>
		uint8_t reg = uart_rx_buff[1];
 800af32:	4b82      	ldr	r3, [pc, #520]	; (800b13c <RegInt_parsecmd+0x25c>)
 800af34:	3378      	adds	r3, #120	; 0x78
 800af36:	785f      	ldrb	r7, [r3, #1]
		uint32_t val = RegInt_getreg(reg);
 800af38:	0038      	movs	r0, r7
 800af3a:	f7f6 ffa3 	bl	8001e84 <RegInt_getreg>
 800af3e:	0006      	movs	r6, r0
		uart_tx_buff[0] = 0xCC;
 800af40:	4d81      	ldr	r5, [pc, #516]	; (800b148 <RegInt_parsecmd+0x268>)
 800af42:	2364      	movs	r3, #100	; 0x64
 800af44:	22cc      	movs	r2, #204	; 0xcc
 800af46:	54ea      	strb	r2, [r5, r3]
		uart_tx_buff[1] = 0x05;
 800af48:	002c      	movs	r4, r5
 800af4a:	3464      	adds	r4, #100	; 0x64
 800af4c:	3b5f      	subs	r3, #95	; 0x5f
 800af4e:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[2] = 0x00;
 800af50:	2300      	movs	r3, #0
 800af52:	70a3      	strb	r3, [r4, #2]
		uart_tx_buff[3] = 0xF6;
 800af54:	33f6      	adds	r3, #246	; 0xf6
 800af56:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800af58:	7127      	strb	r7, [r4, #4]
		uart_tx_buff[5] = get_byte(val,0);
 800af5a:	2100      	movs	r1, #0
 800af5c:	f7f6 ff11 	bl	8001d82 <get_byte>
 800af60:	7160      	strb	r0, [r4, #5]
		uart_tx_buff[6] = get_byte(val,1);
 800af62:	2101      	movs	r1, #1
 800af64:	0030      	movs	r0, r6
 800af66:	f7f6 ff0c 	bl	8001d82 <get_byte>
 800af6a:	71a0      	strb	r0, [r4, #6]
		uart_tx_buff[7] = get_byte(val,2);
 800af6c:	2102      	movs	r1, #2
 800af6e:	0030      	movs	r0, r6
 800af70:	f7f6 ff07 	bl	8001d82 <get_byte>
 800af74:	71e0      	strb	r0, [r4, #7]
		uart_tx_buff[8] = get_byte(val,3);
 800af76:	2103      	movs	r1, #3
 800af78:	0030      	movs	r0, r6
 800af7a:	f7f6 ff02 	bl	8001d82 <get_byte>
 800af7e:	7220      	strb	r0, [r4, #8]
		uart_tx_buff[9] = 0xCD;
 800af80:	23cd      	movs	r3, #205	; 0xcd
 800af82:	7263      	strb	r3, [r4, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800af84:	0021      	movs	r1, r4
 800af86:	220a      	movs	r2, #10
 800af88:	486d      	ldr	r0, [pc, #436]	; (800b140 <RegInt_parsecmd+0x260>)
 800af8a:	f002 f9af 	bl	800d2ec <HAL_UART_Transmit_IT>
 800af8e:	e7c1      	b.n	800af14 <RegInt_parsecmd+0x34>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 800af90:	496c      	ldr	r1, [pc, #432]	; (800b144 <RegInt_parsecmd+0x264>)
 800af92:	2228      	movs	r2, #40	; 0x28
 800af94:	5c8a      	ldrb	r2, [r1, r2]
 800af96:	2a05      	cmp	r2, #5
 800af98:	d1b9      	bne.n	800af0e <RegInt_parsecmd+0x2e>
		uint8_t reg = uart_rx_buff[1];
 800af9a:	4b68      	ldr	r3, [pc, #416]	; (800b13c <RegInt_parsecmd+0x25c>)
 800af9c:	3378      	adds	r3, #120	; 0x78
 800af9e:	785d      	ldrb	r5, [r3, #1]
		for(uint8_t i = 0; i < 4; i++){
 800afa0:	2300      	movs	r3, #0
		uint32_t val = 0;
 800afa2:	2400      	movs	r4, #0
 800afa4:	e00b      	b.n	800afbe <RegInt_parsecmd+0xde>
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800afa6:	1c99      	adds	r1, r3, #2
 800afa8:	4a64      	ldr	r2, [pc, #400]	; (800b13c <RegInt_parsecmd+0x25c>)
 800afaa:	1852      	adds	r2, r2, r1
 800afac:	2178      	movs	r1, #120	; 0x78
 800afae:	5c51      	ldrb	r1, [r2, r1]
 800afb0:	2203      	movs	r2, #3
 800afb2:	401a      	ands	r2, r3
 800afb4:	00d2      	lsls	r2, r2, #3
 800afb6:	4091      	lsls	r1, r2
 800afb8:	430c      	orrs	r4, r1
		for(uint8_t i = 0; i < 4; i++){
 800afba:	3301      	adds	r3, #1
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d9f1      	bls.n	800afa6 <RegInt_parsecmd+0xc6>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 800afc2:	0021      	movs	r1, r4
 800afc4:	0028      	movs	r0, r5
 800afc6:	f7f8 fce5 	bl	8003994 <RegInt_setreg>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d12b      	bne.n	800b026 <RegInt_parsecmd+0x146>
		val = RegInt_getreg(reg);
 800afce:	0028      	movs	r0, r5
 800afd0:	f7f6 ff58 	bl	8001e84 <RegInt_getreg>
 800afd4:	0007      	movs	r7, r0
		uart_tx_buff[0] = 0xCC;
 800afd6:	4e5c      	ldr	r6, [pc, #368]	; (800b148 <RegInt_parsecmd+0x268>)
 800afd8:	2364      	movs	r3, #100	; 0x64
 800afda:	22cc      	movs	r2, #204	; 0xcc
 800afdc:	54f2      	strb	r2, [r6, r3]
		uart_tx_buff[1] = 0x05;
 800afde:	0034      	movs	r4, r6
 800afe0:	3464      	adds	r4, #100	; 0x64
 800afe2:	3b5f      	subs	r3, #95	; 0x5f
 800afe4:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[2] = 0x00;
 800afe6:	2300      	movs	r3, #0
 800afe8:	70a3      	strb	r3, [r4, #2]
		uart_tx_buff[3] = 0xF5;
 800afea:	33f5      	adds	r3, #245	; 0xf5
 800afec:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800afee:	7125      	strb	r5, [r4, #4]
		uart_tx_buff[5] = get_byte(val,0);
 800aff0:	2100      	movs	r1, #0
 800aff2:	f7f6 fec6 	bl	8001d82 <get_byte>
 800aff6:	7160      	strb	r0, [r4, #5]
		uart_tx_buff[6] = get_byte(val,1);
 800aff8:	2101      	movs	r1, #1
 800affa:	0038      	movs	r0, r7
 800affc:	f7f6 fec1 	bl	8001d82 <get_byte>
 800b000:	71a0      	strb	r0, [r4, #6]
		uart_tx_buff[7] = get_byte(val,2);
 800b002:	2102      	movs	r1, #2
 800b004:	0038      	movs	r0, r7
 800b006:	f7f6 febc 	bl	8001d82 <get_byte>
 800b00a:	71e0      	strb	r0, [r4, #7]
		uart_tx_buff[8] = get_byte(val,3);
 800b00c:	2103      	movs	r1, #3
 800b00e:	0038      	movs	r0, r7
 800b010:	f7f6 feb7 	bl	8001d82 <get_byte>
 800b014:	7220      	strb	r0, [r4, #8]
		uart_tx_buff[9] = 0xCD;
 800b016:	23cd      	movs	r3, #205	; 0xcd
 800b018:	7263      	strb	r3, [r4, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800b01a:	0021      	movs	r1, r4
 800b01c:	220a      	movs	r2, #10
 800b01e:	4848      	ldr	r0, [pc, #288]	; (800b140 <RegInt_parsecmd+0x260>)
 800b020:	f002 f964 	bl	800d2ec <HAL_UART_Transmit_IT>
 800b024:	e776      	b.n	800af14 <RegInt_parsecmd+0x34>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 800b026:	0021      	movs	r1, r4
 800b028:	0028      	movs	r0, r5
 800b02a:	f7f9 ff4f 	bl	8004ecc <RegInt_regaction>
 800b02e:	e7ce      	b.n	800afce <RegInt_parsecmd+0xee>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800b030:	4b42      	ldr	r3, [pc, #264]	; (800b13c <RegInt_parsecmd+0x25c>)
 800b032:	3378      	adds	r3, #120	; 0x78
 800b034:	785a      	ldrb	r2, [r3, #1]
 800b036:	0013      	movs	r3, r2
 800b038:	3318      	adds	r3, #24
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d900      	bls.n	800b042 <RegInt_parsecmd+0x162>
 800b040:	e768      	b.n	800af14 <RegInt_parsecmd+0x34>
 800b042:	4940      	ldr	r1, [pc, #256]	; (800b144 <RegInt_parsecmd+0x264>)
 800b044:	2328      	movs	r3, #40	; 0x28
 800b046:	5ccb      	ldrb	r3, [r1, r3]
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d000      	beq.n	800b04e <RegInt_parsecmd+0x16e>
 800b04c:	e762      	b.n	800af14 <RegInt_parsecmd+0x34>
		offst_l = uart_rx_buff[2];
 800b04e:	483b      	ldr	r0, [pc, #236]	; (800b13c <RegInt_parsecmd+0x25c>)
 800b050:	0003      	movs	r3, r0
 800b052:	3378      	adds	r3, #120	; 0x78
 800b054:	789c      	ldrb	r4, [r3, #2]
		offst_h = uart_rx_buff[3];
 800b056:	78d9      	ldrb	r1, [r3, #3]
		uint16_t offst = (offst_h << 8) | offst_l;
 800b058:	0209      	lsls	r1, r1, #8
 800b05a:	4321      	orrs	r1, r4
 800b05c:	4688      	mov	r8, r1
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 800b05e:	4b3b      	ldr	r3, [pc, #236]	; (800b14c <RegInt_parsecmd+0x26c>)
 800b060:	336c      	adds	r3, #108	; 0x6c
 800b062:	891b      	ldrh	r3, [r3, #8]
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	493a      	ldr	r1, [pc, #232]	; (800b150 <RegInt_parsecmd+0x270>)
 800b068:	624b      	str	r3, [r1, #36]	; 0x24
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 800b06a:	8983      	ldrh	r3, [r0, #12]
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	628b      	str	r3, [r1, #40]	; 0x28
		if(uart_rx_buff[1] == 0xE8){
 800b070:	2ae8      	cmp	r2, #232	; 0xe8
 800b072:	d05b      	beq.n	800b12c <RegInt_parsecmd+0x24c>
		datalen = 128*sizeof(uint16_t);
 800b074:	2480      	movs	r4, #128	; 0x80
 800b076:	0064      	lsls	r4, r4, #1
		uart_tx_buff[0] = 0xCC;
 800b078:	4e33      	ldr	r6, [pc, #204]	; (800b148 <RegInt_parsecmd+0x268>)
 800b07a:	2364      	movs	r3, #100	; 0x64
 800b07c:	22cc      	movs	r2, #204	; 0xcc
 800b07e:	54f2      	strb	r2, [r6, r3]
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800b080:	1c65      	adds	r5, r4, #1
 800b082:	2100      	movs	r1, #0
 800b084:	0028      	movs	r0, r5
 800b086:	f7f6 fe7c 	bl	8001d82 <get_byte>
 800b08a:	0037      	movs	r7, r6
 800b08c:	3764      	adds	r7, #100	; 0x64
 800b08e:	7078      	strb	r0, [r7, #1]
		uart_tx_buff[2] = get_byte(datalen+1,1);
 800b090:	2101      	movs	r1, #1
 800b092:	0028      	movs	r0, r5
 800b094:	f7f6 fe75 	bl	8001d82 <get_byte>
 800b098:	70b8      	strb	r0, [r7, #2]
		uart_tx_buff[3] = 0xF7;
 800b09a:	23f7      	movs	r3, #247	; 0xf7
 800b09c:	70fb      	strb	r3, [r7, #3]
		uart_tx_buff[4] = uart_rx_buff[1];
 800b09e:	4b27      	ldr	r3, [pc, #156]	; (800b13c <RegInt_parsecmd+0x25c>)
 800b0a0:	4699      	mov	r9, r3
 800b0a2:	3378      	adds	r3, #120	; 0x78
 800b0a4:	785b      	ldrb	r3, [r3, #1]
 800b0a6:	713b      	strb	r3, [r7, #4]
		DBG_PRINTLN("buffer transmitt");
 800b0a8:	482a      	ldr	r0, [pc, #168]	; (800b154 <RegInt_parsecmd+0x274>)
 800b0aa:	f00a fd33 	bl	8015b14 <__wrap_printf>
 800b0ae:	482a      	ldr	r0, [pc, #168]	; (800b158 <RegInt_parsecmd+0x278>)
 800b0b0:	f00a fd30 	bl	8015b14 <__wrap_printf>
 800b0b4:	200a      	movs	r0, #10
 800b0b6:	f00b fa0f 	bl	80164d8 <putchar>
		DBG_PRINTINT(datalen);
 800b0ba:	4f28      	ldr	r7, [pc, #160]	; (800b15c <RegInt_parsecmd+0x27c>)
 800b0bc:	4d28      	ldr	r5, [pc, #160]	; (800b160 <RegInt_parsecmd+0x280>)
 800b0be:	23c8      	movs	r3, #200	; 0xc8
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	003b      	movs	r3, r7
 800b0c4:	0022      	movs	r2, r4
 800b0c6:	4927      	ldr	r1, [pc, #156]	; (800b164 <RegInt_parsecmd+0x284>)
 800b0c8:	0028      	movs	r0, r5
 800b0ca:	f00a fd23 	bl	8015b14 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 800b0ce:	4b20      	ldr	r3, [pc, #128]	; (800b150 <RegInt_parsecmd+0x270>)
 800b0d0:	469a      	mov	sl, r3
 800b0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0d4:	23c9      	movs	r3, #201	; 0xc9
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	003b      	movs	r3, r7
 800b0da:	4923      	ldr	r1, [pc, #140]	; (800b168 <RegInt_parsecmd+0x288>)
 800b0dc:	0028      	movs	r0, r5
 800b0de:	f00a fd19 	bl	8015b14 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 800b0e2:	4653      	mov	r3, sl
 800b0e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0e6:	23ca      	movs	r3, #202	; 0xca
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	003b      	movs	r3, r7
 800b0ec:	491f      	ldr	r1, [pc, #124]	; (800b16c <RegInt_parsecmd+0x28c>)
 800b0ee:	0028      	movs	r0, r5
 800b0f0:	f00a fd10 	bl	8015b14 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 800b0f4:	0031      	movs	r1, r6
 800b0f6:	3164      	adds	r1, #100	; 0x64
 800b0f8:	4e11      	ldr	r6, [pc, #68]	; (800b140 <RegInt_parsecmd+0x260>)
 800b0fa:	230a      	movs	r3, #10
 800b0fc:	2205      	movs	r2, #5
 800b0fe:	0030      	movs	r0, r6
 800b100:	f002 fc16 	bl	800d930 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 800b104:	2373      	movs	r3, #115	; 0x73
 800b106:	2201      	movs	r2, #1
 800b108:	4649      	mov	r1, r9
 800b10a:	54ca      	strb	r2, [r1, r3]
		DBG_PRINTINT(queue_cmd_end);
 800b10c:	335b      	adds	r3, #91	; 0x5b
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	003b      	movs	r3, r7
 800b112:	4917      	ldr	r1, [pc, #92]	; (800b170 <RegInt_parsecmd+0x290>)
 800b114:	0028      	movs	r0, r5
 800b116:	f00a fcfd 	bl	8015b14 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 800b11a:	4b0c      	ldr	r3, [pc, #48]	; (800b14c <RegInt_parsecmd+0x26c>)
 800b11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b11e:	6819      	ldr	r1, [r3, #0]
 800b120:	b2a2      	uxth	r2, r4
 800b122:	4441      	add	r1, r8
 800b124:	0030      	movs	r0, r6
 800b126:	f002 f8e1 	bl	800d2ec <HAL_UART_Transmit_IT>
 800b12a:	e6f3      	b.n	800af14 <RegInt_parsecmd+0x34>
		datalen = sweeps*bins*sizeof(uint16_t);
 800b12c:	4b07      	ldr	r3, [pc, #28]	; (800b14c <RegInt_parsecmd+0x26c>)
 800b12e:	3a80      	subs	r2, #128	; 0x80
 800b130:	5a9a      	ldrh	r2, [r3, r2]
 800b132:	216a      	movs	r1, #106	; 0x6a
 800b134:	5a5c      	ldrh	r4, [r3, r1]
 800b136:	4354      	muls	r4, r2
 800b138:	0064      	lsls	r4, r4, #1
 800b13a:	e79d      	b.n	800b078 <RegInt_parsecmd+0x198>
 800b13c:	2000020c 	.word	0x2000020c
 800b140:	20000544 	.word	0x20000544
 800b144:	2000038c 	.word	0x2000038c
 800b148:	2000040c 	.word	0x2000040c
 800b14c:	2000018c 	.word	0x2000018c
 800b150:	2000048c 	.word	0x2000048c
 800b154:	0801e7b4 	.word	0x0801e7b4
 800b158:	0801ed18 	.word	0x0801ed18
 800b15c:	0801e890 	.word	0x0801e890
 800b160:	0801e8ac 	.word	0x0801e8ac
 800b164:	0801ed2c 	.word	0x0801ed2c
 800b168:	0801ed34 	.word	0x0801ed34
 800b16c:	0801ed3c 	.word	0x0801ed3c
 800b170:	0801ed48 	.word	0x0801ed48

0800b174 <main>:
{
 800b174:	b510      	push	{r4, lr}
  HAL_Init();
 800b176:	f003 fac1 	bl	800e6fc <HAL_Init>
  SystemClock_Config();
 800b17a:	f7f9 fe25 	bl	8004dc8 <SystemClock_Config>
  MX_GPIO_Init();
 800b17e:	f7f9 fbf3 	bl	8004968 <MX_GPIO_Init>
  MX_DMA_Init();
 800b182:	f7f9 fbd1 	bl	8004928 <MX_DMA_Init>
  MX_I2C1_Init();
 800b186:	f7f9 fdfb 	bl	8004d80 <MX_I2C1_Init>
  MX_RTC_Init();
 800b18a:	f7f9 fd9b 	bl	8004cc4 <MX_RTC_Init>
  MX_SPI1_Init();
 800b18e:	f7f9 fce3 	bl	8004b58 <MX_SPI1_Init>
  MX_USART1_UART_Init(115200);
 800b192:	20e1      	movs	r0, #225	; 0xe1
 800b194:	0240      	lsls	r0, r0, #9
 800b196:	f7f9 fca5 	bl	8004ae4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b19a:	f7f9 fc7d 	bl	8004a98 <MX_USART2_UART_Init>
    EnableBootLoader();
 800b19e:	f7f9 feab 	bl	8004ef8 <EnableBootLoader>
    HAL_Delay(10);
 800b1a2:	200a      	movs	r0, #10
 800b1a4:	f003 f9ec 	bl	800e580 <HAL_Delay>
    RegInt_Init();
 800b1a8:	f7f9 fb55 	bl	8004856 <RegInt_Init>
    initRSS();
 800b1ac:	f7fb f9c0 	bl	8006530 <initRSS>
        RegInt_parsecmd();
 800b1b0:	f7ff fe96 	bl	800aee0 <RegInt_parsecmd>
        HAL_SuspendTick(); //1.23947
 800b1b4:	f002 fb08 	bl	800d7c8 <HAL_SuspendTick>
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	f003 fb0a 	bl	800e7d4 <HAL_PWR_EnterSLEEPMode>
        HAL_ResumeTick();
 800b1c0:	f002 fafa 	bl	800d7b8 <HAL_ResumeTick>
 800b1c4:	e7f4      	b.n	800b1b0 <main+0x3c>
 800b1c6:	46c0      	nop			; (mov r8, r8)

0800b1c8 <acc_utils_transfer_buffer_to_uint32.constprop.23>:
 800b1c8:	8803      	ldrh	r3, [r0, #0]
 800b1ca:	8842      	ldrh	r2, [r0, #2]
 800b1cc:	041b      	lsls	r3, r3, #16
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	600b      	str	r3, [r1, #0]
 800b1d2:	4770      	bx	lr

0800b1d4 <acc_confprogram_modify_runif_sensor.constprop.18>:
 800b1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1d6:	0015      	movs	r5, r2
 800b1d8:	aa08      	add	r2, sp, #32
 800b1da:	0006      	movs	r6, r0
 800b1dc:	7810      	ldrb	r0, [r2, #0]
 800b1de:	00aa      	lsls	r2, r5, #2
 800b1e0:	5854      	ldr	r4, [r2, r1]
 800b1e2:	220f      	movs	r2, #15
 800b1e4:	4394      	bics	r4, r2
 800b1e6:	4a0f      	ldr	r2, [pc, #60]	; (800b224 <acc_confprogram_modify_runif_sensor.constprop.18+0x50>)
 800b1e8:	0011      	movs	r1, r2
 800b1ea:	3130      	adds	r1, #48	; 0x30
 800b1ec:	7809      	ldrb	r1, [r1, #0]
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d00f      	beq.n	800b212 <acc_confprogram_modify_runif_sensor.constprop.18+0x3e>
 800b1f2:	431c      	orrs	r4, r3
 800b1f4:	2903      	cmp	r1, #3
 800b1f6:	d906      	bls.n	800b206 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b1fc:	002b      	movs	r3, r5
 800b1fe:	4a0a      	ldr	r2, [pc, #40]	; (800b228 <acc_confprogram_modify_runif_sensor.constprop.18+0x54>)
 800b200:	490a      	ldr	r1, [pc, #40]	; (800b22c <acc_confprogram_modify_runif_sensor.constprop.18+0x58>)
 800b202:	2004      	movs	r0, #4
 800b204:	47b8      	blx	r7
 800b206:	0029      	movs	r1, r5
 800b208:	0030      	movs	r0, r6
 800b20a:	0022      	movs	r2, r4
 800b20c:	f7fb fa56 	bl	80066bc <acc_sensor_r2_conf_write_instr>
 800b210:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b212:	2903      	cmp	r1, #3
 800b214:	d9f7      	bls.n	800b206 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b216:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b218:	002b      	movs	r3, r5
 800b21a:	4a05      	ldr	r2, [pc, #20]	; (800b230 <acc_confprogram_modify_runif_sensor.constprop.18+0x5c>)
 800b21c:	4903      	ldr	r1, [pc, #12]	; (800b22c <acc_confprogram_modify_runif_sensor.constprop.18+0x58>)
 800b21e:	2004      	movs	r0, #4
 800b220:	47b8      	blx	r7
 800b222:	e7f0      	b.n	800b206 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b224:	200005d0 	.word	0x200005d0
 800b228:	0801ed7e 	.word	0x0801ed7e
 800b22c:	0801e068 	.word	0x0801e068
 800b230:	0801edb4 	.word	0x0801edb4

0800b234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	0004      	movs	r4, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b23a:	a902      	add	r1, sp, #8
 800b23c:	4a15      	ldr	r2, [pc, #84]	; (800b294 <UARTEx_SetNbDataToProcess+0x60>)
 800b23e:	0013      	movs	r3, r2
 800b240:	cb05      	ldmia	r3!, {r0, r2}
 800b242:	c105      	stmia	r1!, {r0, r2}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b244:	466a      	mov	r2, sp
 800b246:	cb03      	ldmia	r3!, {r0, r1}
 800b248:	c203      	stmia	r2!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b24a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d01a      	beq.n	800b286 <UARTEx_SetNbDataToProcess+0x52>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b250:	6822      	ldr	r2, [r4, #0]
 800b252:	6895      	ldr	r5, [r2, #8]
 800b254:	0e6d      	lsrs	r5, r5, #25
 800b256:	2307      	movs	r3, #7
 800b258:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b25a:	6892      	ldr	r2, [r2, #8]
 800b25c:	0f52      	lsrs	r2, r2, #29
 800b25e:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b260:	ae02      	add	r6, sp, #8
 800b262:	5cf0      	ldrb	r0, [r6, r3]
 800b264:	00c0      	lsls	r0, r0, #3
 800b266:	466a      	mov	r2, sp
 800b268:	5cd1      	ldrb	r1, [r2, r3]
 800b26a:	f005 ff0f 	bl	801108c <__divsi3>
 800b26e:	236a      	movs	r3, #106	; 0x6a
 800b270:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b272:	5d70      	ldrb	r0, [r6, r5]
 800b274:	00c0      	lsls	r0, r0, #3
 800b276:	466b      	mov	r3, sp
 800b278:	5d59      	ldrb	r1, [r3, r5]
 800b27a:	f005 ff07 	bl	801108c <__divsi3>
 800b27e:	2368      	movs	r3, #104	; 0x68
 800b280:	52e0      	strh	r0, [r4, r3]
  }
}
 800b282:	b004      	add	sp, #16
 800b284:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbTxDataToProcess = 1U;
 800b286:	3301      	adds	r3, #1
 800b288:	226a      	movs	r2, #106	; 0x6a
 800b28a:	52a3      	strh	r3, [r4, r2]
    huart->NbRxDataToProcess = 1U;
 800b28c:	3a02      	subs	r2, #2
 800b28e:	52a3      	strh	r3, [r4, r2]
 800b290:	e7f7      	b.n	800b282 <UARTEx_SetNbDataToProcess+0x4e>
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	0801ad7c 	.word	0x0801ad7c

0800b298 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b298:	4770      	bx	lr

0800b29a <HAL_UARTEx_RxFifoFullCallback>:
}
 800b29a:	4770      	bx	lr

0800b29c <HAL_UARTEx_WakeupCallback>:
}
 800b29c:	4770      	bx	lr

0800b29e <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b29e:	2380      	movs	r3, #128	; 0x80
 800b2a0:	58c3      	ldr	r3, [r0, r3]
 800b2a2:	2b21      	cmp	r3, #33	; 0x21
 800b2a4:	d000      	beq.n	800b2a8 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b2a6:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b2a8:	3349      	adds	r3, #73	; 0x49
 800b2aa:	5ac3      	ldrh	r3, [r0, r3]
 800b2ac:	e00c      	b.n	800b2c8 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b2ae:	6802      	ldr	r2, [r0, #0]
 800b2b0:	6893      	ldr	r3, [r2, #8]
 800b2b2:	4912      	ldr	r1, [pc, #72]	; (800b2fc <UART_TxISR_16BIT_FIFOEN+0x5e>)
 800b2b4:	400b      	ands	r3, r1
 800b2b6:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2b8:	6802      	ldr	r2, [r0, #0]
 800b2ba:	6813      	ldr	r3, [r2, #0]
 800b2bc:	2140      	movs	r1, #64	; 0x40
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	e7f0      	b.n	800b2a6 <UART_TxISR_16BIT_FIFOEN+0x8>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d0ec      	beq.n	800b2a6 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800b2cc:	2256      	movs	r2, #86	; 0x56
 800b2ce:	5a82      	ldrh	r2, [r0, r2]
 800b2d0:	b292      	uxth	r2, r2
 800b2d2:	2a00      	cmp	r2, #0
 800b2d4:	d0eb      	beq.n	800b2ae <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b2d6:	6801      	ldr	r1, [r0, #0]
 800b2d8:	69ca      	ldr	r2, [r1, #28]
 800b2da:	0612      	lsls	r2, r2, #24
 800b2dc:	d5f2      	bpl.n	800b2c4 <UART_TxISR_16BIT_FIFOEN+0x26>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b2de:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b2e0:	8812      	ldrh	r2, [r2, #0]
 800b2e2:	05d2      	lsls	r2, r2, #23
 800b2e4:	0dd2      	lsrs	r2, r2, #23
 800b2e6:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b2e8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b2ea:	3202      	adds	r2, #2
 800b2ec:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800b2ee:	2156      	movs	r1, #86	; 0x56
 800b2f0:	5a42      	ldrh	r2, [r0, r1]
 800b2f2:	3a01      	subs	r2, #1
 800b2f4:	b292      	uxth	r2, r2
 800b2f6:	5242      	strh	r2, [r0, r1]
 800b2f8:	e7e4      	b.n	800b2c4 <UART_TxISR_16BIT_FIFOEN+0x26>
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	ff7fffff 	.word	0xff7fffff

0800b300 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b300:	2380      	movs	r3, #128	; 0x80
 800b302:	58c3      	ldr	r3, [r0, r3]
 800b304:	2b21      	cmp	r3, #33	; 0x21
 800b306:	d000      	beq.n	800b30a <UART_TxISR_8BIT_FIFOEN+0xa>
}
 800b308:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b30a:	3349      	adds	r3, #73	; 0x49
 800b30c:	5ac3      	ldrh	r3, [r0, r3]
 800b30e:	e00c      	b.n	800b32a <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b310:	6802      	ldr	r2, [r0, #0]
 800b312:	6893      	ldr	r3, [r2, #8]
 800b314:	4910      	ldr	r1, [pc, #64]	; (800b358 <UART_TxISR_8BIT_FIFOEN+0x58>)
 800b316:	400b      	ands	r3, r1
 800b318:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b31a:	6802      	ldr	r2, [r0, #0]
 800b31c:	6813      	ldr	r3, [r2, #0]
 800b31e:	2140      	movs	r1, #64	; 0x40
 800b320:	430b      	orrs	r3, r1
 800b322:	6013      	str	r3, [r2, #0]
 800b324:	e7f0      	b.n	800b308 <UART_TxISR_8BIT_FIFOEN+0x8>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b326:	3b01      	subs	r3, #1
 800b328:	b29b      	uxth	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d0ec      	beq.n	800b308 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800b32e:	2256      	movs	r2, #86	; 0x56
 800b330:	5a82      	ldrh	r2, [r0, r2]
 800b332:	b292      	uxth	r2, r2
 800b334:	2a00      	cmp	r2, #0
 800b336:	d0eb      	beq.n	800b310 <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b338:	6802      	ldr	r2, [r0, #0]
 800b33a:	69d1      	ldr	r1, [r2, #28]
 800b33c:	0609      	lsls	r1, r1, #24
 800b33e:	d5f2      	bpl.n	800b326 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b340:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b342:	7809      	ldrb	r1, [r1, #0]
 800b344:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b346:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b348:	3201      	adds	r2, #1
 800b34a:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800b34c:	2156      	movs	r1, #86	; 0x56
 800b34e:	5a42      	ldrh	r2, [r0, r1]
 800b350:	3a01      	subs	r2, #1
 800b352:	b292      	uxth	r2, r2
 800b354:	5242      	strh	r2, [r0, r1]
 800b356:	e7e6      	b.n	800b326 <UART_TxISR_8BIT_FIFOEN+0x26>
 800b358:	ff7fffff 	.word	0xff7fffff

0800b35c <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b35c:	2380      	movs	r3, #128	; 0x80
 800b35e:	58c3      	ldr	r3, [r0, r3]
 800b360:	2b21      	cmp	r3, #33	; 0x21
 800b362:	d000      	beq.n	800b366 <UART_TxISR_16BIT+0xa>
}
 800b364:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800b366:	3335      	adds	r3, #53	; 0x35
 800b368:	5ac3      	ldrh	r3, [r0, r3]
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00e      	beq.n	800b38e <UART_TxISR_16BIT+0x32>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b370:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	6802      	ldr	r2, [r0, #0]
 800b376:	05db      	lsls	r3, r3, #23
 800b378:	0ddb      	lsrs	r3, r3, #23
 800b37a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b37c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b37e:	3302      	adds	r3, #2
 800b380:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800b382:	2256      	movs	r2, #86	; 0x56
 800b384:	5a83      	ldrh	r3, [r0, r2]
 800b386:	3b01      	subs	r3, #1
 800b388:	b29b      	uxth	r3, r3
 800b38a:	5283      	strh	r3, [r0, r2]
 800b38c:	e7ea      	b.n	800b364 <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b38e:	6802      	ldr	r2, [r0, #0]
 800b390:	6813      	ldr	r3, [r2, #0]
 800b392:	2180      	movs	r1, #128	; 0x80
 800b394:	438b      	bics	r3, r1
 800b396:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b398:	6802      	ldr	r2, [r0, #0]
 800b39a:	6813      	ldr	r3, [r2, #0]
 800b39c:	3940      	subs	r1, #64	; 0x40
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	e7df      	b.n	800b364 <UART_TxISR_16BIT+0x8>

0800b3a4 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3a4:	2380      	movs	r3, #128	; 0x80
 800b3a6:	58c3      	ldr	r3, [r0, r3]
 800b3a8:	2b21      	cmp	r3, #33	; 0x21
 800b3aa:	d000      	beq.n	800b3ae <UART_TxISR_8BIT+0xa>
}
 800b3ac:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800b3ae:	3335      	adds	r3, #53	; 0x35
 800b3b0:	5ac3      	ldrh	r3, [r0, r3]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00c      	beq.n	800b3d2 <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b3b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	6803      	ldr	r3, [r0, #0]
 800b3be:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b3c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800b3c6:	2256      	movs	r2, #86	; 0x56
 800b3c8:	5a83      	ldrh	r3, [r0, r2]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	5283      	strh	r3, [r0, r2]
 800b3d0:	e7ec      	b.n	800b3ac <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b3d2:	6802      	ldr	r2, [r0, #0]
 800b3d4:	6813      	ldr	r3, [r2, #0]
 800b3d6:	2180      	movs	r1, #128	; 0x80
 800b3d8:	438b      	bics	r3, r1
 800b3da:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3dc:	6802      	ldr	r2, [r0, #0]
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	3940      	subs	r1, #64	; 0x40
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e7e1      	b.n	800b3ac <UART_TxISR_8BIT+0x8>

0800b3e8 <UART_EndRxTransfer>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b3e8:	6802      	ldr	r2, [r0, #0]
 800b3ea:	6813      	ldr	r3, [r2, #0]
 800b3ec:	4906      	ldr	r1, [pc, #24]	; (800b408 <UART_EndRxTransfer+0x20>)
 800b3ee:	400b      	ands	r3, r1
 800b3f0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3f2:	6802      	ldr	r2, [r0, #0]
 800b3f4:	6893      	ldr	r3, [r2, #8]
 800b3f6:	4905      	ldr	r1, [pc, #20]	; (800b40c <UART_EndRxTransfer+0x24>)
 800b3f8:	400b      	ands	r3, r1
 800b3fa:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800b3fc:	2384      	movs	r3, #132	; 0x84
 800b3fe:	2220      	movs	r2, #32
 800b400:	50c2      	str	r2, [r0, r3]
  huart->RxISR = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b406:	4770      	bx	lr
 800b408:	fffffedf 	.word	0xfffffedf
 800b40c:	effffffe 	.word	0xeffffffe

0800b410 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b410:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b412:	07db      	lsls	r3, r3, #31
 800b414:	d506      	bpl.n	800b424 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b416:	6802      	ldr	r2, [r0, #0]
 800b418:	6853      	ldr	r3, [r2, #4]
 800b41a:	492c      	ldr	r1, [pc, #176]	; (800b4cc <UART_AdvFeatureConfig+0xbc>)
 800b41c:	400b      	ands	r3, r1
 800b41e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b420:	430b      	orrs	r3, r1
 800b422:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b424:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b426:	079b      	lsls	r3, r3, #30
 800b428:	d506      	bpl.n	800b438 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b42a:	6802      	ldr	r2, [r0, #0]
 800b42c:	6853      	ldr	r3, [r2, #4]
 800b42e:	4928      	ldr	r1, [pc, #160]	; (800b4d0 <UART_AdvFeatureConfig+0xc0>)
 800b430:	400b      	ands	r3, r1
 800b432:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b434:	430b      	orrs	r3, r1
 800b436:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b438:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b43a:	075b      	lsls	r3, r3, #29
 800b43c:	d506      	bpl.n	800b44c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b43e:	6802      	ldr	r2, [r0, #0]
 800b440:	6853      	ldr	r3, [r2, #4]
 800b442:	4924      	ldr	r1, [pc, #144]	; (800b4d4 <UART_AdvFeatureConfig+0xc4>)
 800b444:	400b      	ands	r3, r1
 800b446:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800b448:	430b      	orrs	r3, r1
 800b44a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b44c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b44e:	071b      	lsls	r3, r3, #28
 800b450:	d506      	bpl.n	800b460 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b452:	6802      	ldr	r2, [r0, #0]
 800b454:	6853      	ldr	r3, [r2, #4]
 800b456:	4920      	ldr	r1, [pc, #128]	; (800b4d8 <UART_AdvFeatureConfig+0xc8>)
 800b458:	400b      	ands	r3, r1
 800b45a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b460:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b462:	06db      	lsls	r3, r3, #27
 800b464:	d506      	bpl.n	800b474 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b466:	6802      	ldr	r2, [r0, #0]
 800b468:	6893      	ldr	r3, [r2, #8]
 800b46a:	491c      	ldr	r1, [pc, #112]	; (800b4dc <UART_AdvFeatureConfig+0xcc>)
 800b46c:	400b      	ands	r3, r1
 800b46e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b470:	430b      	orrs	r3, r1
 800b472:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b474:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b476:	069b      	lsls	r3, r3, #26
 800b478:	d506      	bpl.n	800b488 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b47a:	6802      	ldr	r2, [r0, #0]
 800b47c:	6893      	ldr	r3, [r2, #8]
 800b47e:	4918      	ldr	r1, [pc, #96]	; (800b4e0 <UART_AdvFeatureConfig+0xd0>)
 800b480:	400b      	ands	r3, r1
 800b482:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b484:	430b      	orrs	r3, r1
 800b486:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b488:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b48a:	065b      	lsls	r3, r3, #25
 800b48c:	d50b      	bpl.n	800b4a6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b48e:	6802      	ldr	r2, [r0, #0]
 800b490:	6853      	ldr	r3, [r2, #4]
 800b492:	4914      	ldr	r1, [pc, #80]	; (800b4e4 <UART_AdvFeatureConfig+0xd4>)
 800b494:	400b      	ands	r3, r1
 800b496:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b498:	430b      	orrs	r3, r1
 800b49a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b49c:	2380      	movs	r3, #128	; 0x80
 800b49e:	035b      	lsls	r3, r3, #13
 800b4a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d00a      	beq.n	800b4bc <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b4a8:	061b      	lsls	r3, r3, #24
 800b4aa:	d506      	bpl.n	800b4ba <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4ac:	6802      	ldr	r2, [r0, #0]
 800b4ae:	6853      	ldr	r3, [r2, #4]
 800b4b0:	490d      	ldr	r1, [pc, #52]	; (800b4e8 <UART_AdvFeatureConfig+0xd8>)
 800b4b2:	400b      	ands	r3, r1
 800b4b4:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b4b6:	430b      	orrs	r3, r1
 800b4b8:	6053      	str	r3, [r2, #4]
}
 800b4ba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4bc:	6802      	ldr	r2, [r0, #0]
 800b4be:	6853      	ldr	r3, [r2, #4]
 800b4c0:	490a      	ldr	r1, [pc, #40]	; (800b4ec <UART_AdvFeatureConfig+0xdc>)
 800b4c2:	400b      	ands	r3, r1
 800b4c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b4c6:	430b      	orrs	r3, r1
 800b4c8:	6053      	str	r3, [r2, #4]
 800b4ca:	e7ec      	b.n	800b4a6 <UART_AdvFeatureConfig+0x96>
 800b4cc:	fffdffff 	.word	0xfffdffff
 800b4d0:	fffeffff 	.word	0xfffeffff
 800b4d4:	fffbffff 	.word	0xfffbffff
 800b4d8:	ffff7fff 	.word	0xffff7fff
 800b4dc:	ffffefff 	.word	0xffffefff
 800b4e0:	ffffdfff 	.word	0xffffdfff
 800b4e4:	ffefffff 	.word	0xffefffff
 800b4e8:	fff7ffff 	.word	0xfff7ffff
 800b4ec:	ff9fffff 	.word	0xff9fffff

0800b4f0 <HAL_UART_ErrorCallback>:
}
 800b4f0:	4770      	bx	lr

0800b4f2 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b4f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	215e      	movs	r1, #94	; 0x5e
 800b4f8:	525a      	strh	r2, [r3, r1]
  huart->TxXferCount = 0U;
 800b4fa:	3908      	subs	r1, #8
 800b4fc:	525a      	strh	r2, [r3, r1]
}
 800b4fe:	4770      	bx	lr

0800b500 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b500:	4770      	bx	lr

0800b502 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b502:	0902      	lsrs	r2, r0, #4
 800b504:	0093      	lsls	r3, r2, #2
 800b506:	189b      	adds	r3, r3, r2
 800b508:	005a      	lsls	r2, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b50a:	230f      	movs	r3, #15
 800b50c:	4018      	ands	r0, r3
 800b50e:	1880      	adds	r0, r0, r2
 800b510:	b2c0      	uxtb	r0, r0
}
 800b512:	4770      	bx	lr

0800b514 <RTC_ByteToBcd2>:
  uint32_t bcdhigh = 0U;
 800b514:	2300      	movs	r3, #0
 800b516:	e002      	b.n	800b51e <RTC_ByteToBcd2+0xa>
    bcdhigh++;
 800b518:	3301      	adds	r3, #1
    Param -= 10U;
 800b51a:	380a      	subs	r0, #10
 800b51c:	b2c0      	uxtb	r0, r0
  while(Param >= 10U)
 800b51e:	2809      	cmp	r0, #9
 800b520:	d8fa      	bhi.n	800b518 <RTC_ByteToBcd2+0x4>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	b2db      	uxtb	r3, r3
 800b526:	4318      	orrs	r0, r3
}
 800b528:	4770      	bx	lr

0800b52a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b52a:	b530      	push	{r4, r5, lr}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b52c:	07cb      	lsls	r3, r1, #31
 800b52e:	d509      	bpl.n	800b544 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b530:	2341      	movs	r3, #65	; 0x41
 800b532:	5cc3      	ldrb	r3, [r0, r3]
 800b534:	2228      	movs	r2, #40	; 0x28
 800b536:	4013      	ands	r3, r2
 800b538:	2b28      	cmp	r3, #40	; 0x28
 800b53a:	d001      	beq.n	800b540 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b53c:	23f2      	movs	r3, #242	; 0xf2
 800b53e:	e002      	b.n	800b546 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b540:	331a      	adds	r3, #26
 800b542:	e000      	b.n	800b546 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800b544:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b546:	078a      	lsls	r2, r1, #30
 800b548:	d509      	bpl.n	800b55e <I2C_Disable_IRQ+0x34>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b54a:	2444      	movs	r4, #68	; 0x44
 800b54c:	431c      	orrs	r4, r3

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b54e:	2241      	movs	r2, #65	; 0x41
 800b550:	5c82      	ldrb	r2, [r0, r2]
 800b552:	2528      	movs	r5, #40	; 0x28
 800b554:	402a      	ands	r2, r5
 800b556:	2a28      	cmp	r2, #40	; 0x28
 800b558:	d014      	beq.n	800b584 <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b55a:	22f4      	movs	r2, #244	; 0xf4
 800b55c:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b55e:	074a      	lsls	r2, r1, #29
 800b560:	d501      	bpl.n	800b566 <I2C_Disable_IRQ+0x3c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b562:	22b8      	movs	r2, #184	; 0xb8
 800b564:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b566:	2211      	movs	r2, #17
 800b568:	400a      	ands	r2, r1
 800b56a:	2a11      	cmp	r2, #17
 800b56c:	d00c      	beq.n	800b588 <I2C_Disable_IRQ+0x5e>
 800b56e:	2212      	movs	r2, #18
 800b570:	4011      	ands	r1, r2
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b572:	2912      	cmp	r1, #18
 800b574:	d00b      	beq.n	800b58e <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b576:	2912      	cmp	r1, #18
 800b578:	d00c      	beq.n	800b594 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b57a:	6801      	ldr	r1, [r0, #0]
 800b57c:	680a      	ldr	r2, [r1, #0]
 800b57e:	439a      	bics	r2, r3
 800b580:	600a      	str	r2, [r1, #0]
}
 800b582:	bd30      	pop	{r4, r5, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b584:	0023      	movs	r3, r4
 800b586:	e7ea      	b.n	800b55e <I2C_Disable_IRQ+0x34>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b588:	327f      	adds	r2, #127	; 0x7f
 800b58a:	4313      	orrs	r3, r2
 800b58c:	e7ef      	b.n	800b56e <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_STOPI;
 800b58e:	320e      	adds	r2, #14
 800b590:	4313      	orrs	r3, r2
 800b592:	e7f0      	b.n	800b576 <I2C_Disable_IRQ+0x4c>
    tmpisr |= I2C_IT_TCI;
 800b594:	2240      	movs	r2, #64	; 0x40
 800b596:	4313      	orrs	r3, r2
 800b598:	e7ef      	b.n	800b57a <I2C_Disable_IRQ+0x50>

0800b59a <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b59a:	6803      	ldr	r3, [r0, #0]
 800b59c:	699a      	ldr	r2, [r3, #24]
 800b59e:	0792      	lsls	r2, r2, #30
 800b5a0:	d501      	bpl.n	800b5a6 <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5a6:	6803      	ldr	r3, [r0, #0]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	07d2      	lsls	r2, r2, #31
 800b5ac:	d403      	bmi.n	800b5b6 <I2C_Flush_TXDR+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	619a      	str	r2, [r3, #24]
}
 800b5b6:	4770      	bx	lr

0800b5b8 <HAL_I2C_AbortCpltCallback>:
}
 800b5b8:	4770      	bx	lr

0800b5ba <HAL_I2C_ErrorCallback>:
}
 800b5ba:	4770      	bx	lr

0800b5bc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b5bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800b5be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800b5c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b5c6:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b5c8:	3241      	adds	r2, #65	; 0x41
 800b5ca:	5c9a      	ldrb	r2, [r3, r2]
 800b5cc:	2a60      	cmp	r2, #96	; 0x60
 800b5ce:	d000      	beq.n	800b5d2 <I2C_DMAAbort+0x16>
}
 800b5d0:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_READY;
 800b5d2:	3a1f      	subs	r2, #31
 800b5d4:	2120      	movs	r1, #32
 800b5d6:	5499      	strb	r1, [r3, r2]
 800b5d8:	e7fa      	b.n	800b5d0 <I2C_DMAAbort+0x14>

0800b5da <HAL_I2C_ListenCpltCallback>:
}
 800b5da:	4770      	bx	lr

0800b5dc <I2C_ITListenCplt>:
{
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5e0:	4b15      	ldr	r3, [pc, #84]	; (800b638 <I2C_ITListenCplt+0x5c>)
 800b5e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b5e8:	2241      	movs	r2, #65	; 0x41
 800b5ea:	2020      	movs	r0, #32
 800b5ec:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ee:	3201      	adds	r2, #1
 800b5f0:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 800b5f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b5f4:	074b      	lsls	r3, r1, #29
 800b5f6:	d513      	bpl.n	800b620 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b5fe:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b602:	3301      	adds	r3, #1
 800b604:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b606:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d009      	beq.n	800b620 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800b60c:	3b01      	subs	r3, #1
 800b60e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b610:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b612:	3b01      	subs	r3, #1
 800b614:	b29b      	uxth	r3, r3
 800b616:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b618:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b61a:	2204      	movs	r2, #4
 800b61c:	4313      	orrs	r3, r2
 800b61e:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b620:	2107      	movs	r1, #7
 800b622:	0020      	movs	r0, r4
 800b624:	f7ff ff81 	bl	800b52a <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	2210      	movs	r2, #16
 800b62c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	2200      	movs	r2, #0
 800b632:	54e2      	strb	r2, [r4, r3]
}
 800b634:	bd10      	pop	{r4, pc}
 800b636:	46c0      	nop			; (mov r8, r8)
 800b638:	ffff0000 	.word	0xffff0000

0800b63c <HAL_I2C_AddrCallback>:
}
 800b63c:	4770      	bx	lr

0800b63e <I2C_ITAddrCplt>:
{
 800b63e:	b510      	push	{r4, lr}
 800b640:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b642:	2341      	movs	r3, #65	; 0x41
 800b644:	5cc3      	ldrb	r3, [r0, r3]
 800b646:	2228      	movs	r2, #40	; 0x28
 800b648:	4013      	ands	r3, r2
 800b64a:	2b28      	cmp	r3, #40	; 0x28
 800b64c:	d006      	beq.n	800b65c <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b64e:	6803      	ldr	r3, [r0, #0]
 800b650:	2208      	movs	r2, #8
 800b652:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b654:	2340      	movs	r3, #64	; 0x40
 800b656:	2200      	movs	r2, #0
 800b658:	54c2      	strb	r2, [r0, r3]
}
 800b65a:	bd10      	pop	{r4, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800b65c:	6802      	ldr	r2, [r0, #0]
 800b65e:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b660:	6991      	ldr	r1, [r2, #24]
 800b662:	0c09      	lsrs	r1, r1, #16
 800b664:	23fe      	movs	r3, #254	; 0xfe
 800b666:	4019      	ands	r1, r3
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b668:	6893      	ldr	r3, [r2, #8]
 800b66a:	059b      	lsls	r3, r3, #22
 800b66c:	0d9b      	lsrs	r3, r3, #22
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b66e:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b670:	68e0      	ldr	r0, [r4, #12]
 800b672:	2802      	cmp	r0, #2
 800b674:	d119      	bne.n	800b6aa <I2C_ITAddrCplt+0x6c>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b676:	09db      	lsrs	r3, r3, #7
 800b678:	404b      	eors	r3, r1
 800b67a:	2106      	movs	r1, #6
 800b67c:	4219      	tst	r1, r3
 800b67e:	d10c      	bne.n	800b69a <I2C_ITAddrCplt+0x5c>
        hi2c->AddrEventCount++;
 800b680:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b682:	3301      	adds	r3, #1
 800b684:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b686:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d1e6      	bne.n	800b65a <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800b68c:	2300      	movs	r3, #0
 800b68e:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b690:	3102      	adds	r1, #2
 800b692:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800b694:	2240      	movs	r2, #64	; 0x40
 800b696:	54a3      	strb	r3, [r4, r2]
 800b698:	e7df      	b.n	800b65a <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b69a:	2104      	movs	r1, #4
 800b69c:	0020      	movs	r0, r4
 800b69e:	f7ff ff44 	bl	800b52a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b6a2:	2340      	movs	r3, #64	; 0x40
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	54e2      	strb	r2, [r4, r3]
 800b6a8:	e7d7      	b.n	800b65a <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b6aa:	2104      	movs	r1, #4
 800b6ac:	0020      	movs	r0, r4
 800b6ae:	f7ff ff3c 	bl	800b52a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b6b2:	2340      	movs	r3, #64	; 0x40
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	54e2      	strb	r2, [r4, r3]
 800b6b8:	e7cf      	b.n	800b65a <I2C_ITAddrCplt+0x1c>

0800b6ba <HAL_I2C_SlaveRxCpltCallback>:
}
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_I2C_SlaveTxCpltCallback>:
}
 800b6bc:	4770      	bx	lr

0800b6be <I2C_ITSlaveSeqCplt>:
{
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6c2:	2342      	movs	r3, #66	; 0x42
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	54c2      	strb	r2, [r0, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	5cc3      	ldrb	r3, [r0, r3]
 800b6cc:	2b29      	cmp	r3, #41	; 0x29
 800b6ce:	d004      	beq.n	800b6da <I2C_ITSlaveSeqCplt+0x1c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b6d0:	2341      	movs	r3, #65	; 0x41
 800b6d2:	5cc3      	ldrb	r3, [r0, r3]
 800b6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6d6:	d00c      	beq.n	800b6f2 <I2C_ITSlaveSeqCplt+0x34>
}
 800b6d8:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b6da:	3318      	adds	r3, #24
 800b6dc:	3228      	adds	r2, #40	; 0x28
 800b6de:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b6e0:	3b20      	subs	r3, #32
 800b6e2:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b6e4:	2101      	movs	r1, #1
 800b6e6:	f7ff ff20 	bl	800b52a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b6ea:	2340      	movs	r3, #64	; 0x40
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	54e2      	strb	r2, [r4, r3]
 800b6f0:	e7f2      	b.n	800b6d8 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b6f2:	3317      	adds	r3, #23
 800b6f4:	2228      	movs	r2, #40	; 0x28
 800b6f6:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b6f8:	3b1f      	subs	r3, #31
 800b6fa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b6fc:	2102      	movs	r1, #2
 800b6fe:	f7ff ff14 	bl	800b52a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b702:	2340      	movs	r3, #64	; 0x40
 800b704:	2200      	movs	r2, #0
 800b706:	54e2      	strb	r2, [r4, r3]
 800b708:	e7e6      	b.n	800b6d8 <I2C_ITSlaveSeqCplt+0x1a>

0800b70a <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b70a:	3801      	subs	r0, #1
 800b70c:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <HAL_SYSTICK_Config+0x2e>)
 800b70e:	4298      	cmp	r0, r3
 800b710:	d80f      	bhi.n	800b732 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b712:	4a0a      	ldr	r2, [pc, #40]	; (800b73c <HAL_SYSTICK_Config+0x32>)
 800b714:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b716:	480a      	ldr	r0, [pc, #40]	; (800b740 <HAL_SYSTICK_Config+0x36>)
 800b718:	6a03      	ldr	r3, [r0, #32]
 800b71a:	021b      	lsls	r3, r3, #8
 800b71c:	0a1b      	lsrs	r3, r3, #8
 800b71e:	21c0      	movs	r1, #192	; 0xc0
 800b720:	0609      	lsls	r1, r1, #24
 800b722:	430b      	orrs	r3, r1
 800b724:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b726:	2300      	movs	r3, #0
 800b728:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b72a:	3307      	adds	r3, #7
 800b72c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b72e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800b730:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b732:	2001      	movs	r0, #1
 800b734:	e7fc      	b.n	800b730 <HAL_SYSTICK_Config+0x26>
 800b736:	46c0      	nop			; (mov r8, r8)
 800b738:	00ffffff 	.word	0x00ffffff
 800b73c:	e000e010 	.word	0xe000e010
 800b740:	e000ed00 	.word	0xe000ed00

0800b744 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800b744:	b510      	push	{r4, lr}
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800b746:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <HAL_PWREx_DisableLowPowerRunMode+0x38>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	0053      	lsls	r3, r2, #1
 800b74c:	189b      	adds	r3, r3, r2
 800b74e:	0058      	lsls	r0, r3, #1
 800b750:	490b      	ldr	r1, [pc, #44]	; (800b780 <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 800b752:	f005 fc11 	bl	8010f78 <__udivsi3>
 800b756:	3001      	adds	r0, #1

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800b758:	4a0a      	ldr	r2, [pc, #40]	; (800b784 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800b75a:	6813      	ldr	r3, [r2, #0]
 800b75c:	490a      	ldr	r1, [pc, #40]	; (800b788 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800b75e:	400b      	ands	r3, r1
 800b760:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800b762:	4b08      	ldr	r3, [pc, #32]	; (800b784 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	059b      	lsls	r3, r3, #22
 800b768:	d503      	bpl.n	800b772 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    if(wait_loop_index != 0U)
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d003      	beq.n	800b776 <HAL_PWREx_DisableLowPowerRunMode+0x32>
    {
      wait_loop_index--;
 800b76e:	3801      	subs	r0, #1
 800b770:	e7f7      	b.n	800b762 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800b772:	2000      	movs	r0, #0
}
 800b774:	bd10      	pop	{r4, pc}
      return HAL_TIMEOUT;
 800b776:	2003      	movs	r0, #3
 800b778:	e7fc      	b.n	800b774 <HAL_PWREx_DisableLowPowerRunMode+0x30>
 800b77a:	46c0      	nop			; (mov r8, r8)
 800b77c:	20000000 	.word	0x20000000
 800b780:	000f4240 	.word	0x000f4240
 800b784:	40007000 	.word	0x40007000
 800b788:	ffffbfff 	.word	0xffffbfff

0800b78c <HAL_PWREx_EnableLowPowerRunMode>:
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800b78c:	4a03      	ldr	r2, [pc, #12]	; (800b79c <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 800b78e:	6811      	ldr	r1, [r2, #0]
 800b790:	2380      	movs	r3, #128	; 0x80
 800b792:	01db      	lsls	r3, r3, #7
 800b794:	430b      	orrs	r3, r1
 800b796:	6013      	str	r3, [r2, #0]
}
 800b798:	4770      	bx	lr
 800b79a:	46c0      	nop			; (mov r8, r8)
 800b79c:	40007000 	.word	0x40007000

0800b7a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b7a0:	23ff      	movs	r3, #255	; 0xff
 800b7a2:	6842      	ldr	r2, [r0, #4]
 800b7a4:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b7a6:	4a06      	ldr	r2, [pc, #24]	; (800b7c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800b7a8:	189a      	adds	r2, r3, r2
 800b7aa:	0092      	lsls	r2, r2, #2
 800b7ac:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b7ae:	4a05      	ldr	r2, [pc, #20]	; (800b7c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800b7b0:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	2203      	movs	r2, #3
 800b7b6:	401a      	ands	r2, r3
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	4093      	lsls	r3, r2
 800b7bc:	6583      	str	r3, [r0, #88]	; 0x58
}
 800b7be:	4770      	bx	lr
 800b7c0:	1000823f 	.word	0x1000823f
 800b7c4:	40020940 	.word	0x40020940

0800b7c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b7cc:	20ff      	movs	r0, #255	; 0xff
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	4018      	ands	r0, r3
 800b7d2:	3808      	subs	r0, #8
 800b7d4:	2114      	movs	r1, #20
 800b7d6:	f005 fbcf 	bl	8010f78 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b7da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b7dc:	089b      	lsrs	r3, r3, #2
 800b7de:	4a06      	ldr	r2, [pc, #24]	; (800b7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800b7e0:	4694      	mov	ip, r2
 800b7e2:	4463      	add	r3, ip
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b7e8:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800b7ea:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800b7ec:	231c      	movs	r3, #28
 800b7ee:	4018      	ands	r0, r3
 800b7f0:	3b1b      	subs	r3, #27
 800b7f2:	4083      	lsls	r3, r0
 800b7f4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800b7f6:	bd10      	pop	{r4, pc}
 800b7f8:	10008200 	.word	0x10008200
 800b7fc:	40020880 	.word	0x40020880

0800b800 <HAL_DMA_Abort_IT>:
{
 800b800:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800b802:	2324      	movs	r3, #36	; 0x24
 800b804:	2201      	movs	r2, #1
 800b806:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b808:	3301      	adds	r3, #1
 800b80a:	5cc3      	ldrb	r3, [r0, r3]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d003      	beq.n	800b818 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b810:	2304      	movs	r3, #4
 800b812:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800b814:	2001      	movs	r0, #1
}
 800b816:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	6813      	ldr	r3, [r2, #0]
 800b81c:	210e      	movs	r1, #14
 800b81e:	438b      	bics	r3, r1
 800b820:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b822:	6801      	ldr	r1, [r0, #0]
 800b824:	680a      	ldr	r2, [r1, #0]
 800b826:	2301      	movs	r3, #1
 800b828:	439a      	bics	r2, r3
 800b82a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b82c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b82e:	680a      	ldr	r2, [r1, #0]
 800b830:	4c12      	ldr	r4, [pc, #72]	; (800b87c <HAL_DMA_Abort_IT+0x7c>)
 800b832:	4022      	ands	r2, r4
 800b834:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800b836:	4912      	ldr	r1, [pc, #72]	; (800b880 <HAL_DMA_Abort_IT+0x80>)
 800b838:	684c      	ldr	r4, [r1, #4]
 800b83a:	221c      	movs	r2, #28
 800b83c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b83e:	402a      	ands	r2, r5
 800b840:	4093      	lsls	r3, r2
 800b842:	4323      	orrs	r3, r4
 800b844:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b846:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b848:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b84a:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b84c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d006      	beq.n	800b860 <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	4909      	ldr	r1, [pc, #36]	; (800b87c <HAL_DMA_Abort_IT+0x7c>)
 800b856:	400a      	ands	r2, r1
 800b858:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b85a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b85c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b85e:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b860:	2325      	movs	r3, #37	; 0x25
 800b862:	2201      	movs	r2, #1
 800b864:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800b866:	3b01      	subs	r3, #1
 800b868:	2200      	movs	r2, #0
 800b86a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800b86c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d002      	beq.n	800b878 <HAL_DMA_Abort_IT+0x78>
      hdma->XferAbortCallback(hdma);
 800b872:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800b874:	2000      	movs	r0, #0
 800b876:	e7ce      	b.n	800b816 <HAL_DMA_Abort_IT+0x16>
 800b878:	2000      	movs	r0, #0
 800b87a:	e7cc      	b.n	800b816 <HAL_DMA_Abort_IT+0x16>
 800b87c:	fffffeff 	.word	0xfffffeff
 800b880:	40020000 	.word	0x40020000

0800b884 <I2C_ITError>:
{
 800b884:	b510      	push	{r4, lr}
 800b886:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b888:	2341      	movs	r3, #65	; 0x41
 800b88a:	5cc3      	ldrb	r3, [r0, r3]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b88c:	2200      	movs	r2, #0
 800b88e:	2042      	movs	r0, #66	; 0x42
 800b890:	5422      	strb	r2, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b892:	4832      	ldr	r0, [pc, #200]	; (800b95c <I2C_ITError+0xd8>)
 800b894:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b896:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b898:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b89a:	4311      	orrs	r1, r2
 800b89c:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b89e:	3b28      	subs	r3, #40	; 0x28
 800b8a0:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d823      	bhi.n	800b8ee <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b8a6:	2103      	movs	r1, #3
 800b8a8:	0020      	movs	r0, r4
 800b8aa:	f7ff fe3e 	bl	800b52a <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b8ae:	2341      	movs	r3, #65	; 0x41
 800b8b0:	2228      	movs	r2, #40	; 0x28
 800b8b2:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b8b8:	4b29      	ldr	r3, [pc, #164]	; (800b960 <I2C_ITError+0xdc>)
 800b8ba:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	0452      	lsls	r2, r2, #17
 800b8c2:	d523      	bpl.n	800b90c <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	4927      	ldr	r1, [pc, #156]	; (800b964 <I2C_ITError+0xe0>)
 800b8c8:	400a      	ands	r2, r1
 800b8ca:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b8cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00c      	beq.n	800b8ec <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b8d2:	4a25      	ldr	r2, [pc, #148]	; (800b968 <I2C_ITError+0xe4>)
 800b8d4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b8d6:	2340      	movs	r3, #64	; 0x40
 800b8d8:	2200      	movs	r2, #0
 800b8da:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b8dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b8de:	f7ff ff8f 	bl	800b800 <HAL_DMA_Abort_IT>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d002      	beq.n	800b8ec <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b8e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b8e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b8ea:	4798      	blx	r3
}
 800b8ec:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b8ee:	2107      	movs	r1, #7
 800b8f0:	0020      	movs	r0, r4
 800b8f2:	f7ff fe1a 	bl	800b52a <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b8f6:	2341      	movs	r3, #65	; 0x41
 800b8f8:	5ce3      	ldrb	r3, [r4, r3]
 800b8fa:	2b60      	cmp	r3, #96	; 0x60
 800b8fc:	d002      	beq.n	800b904 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b8fe:	2341      	movs	r3, #65	; 0x41
 800b900:	2220      	movs	r2, #32
 800b902:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b904:	2300      	movs	r3, #0
 800b906:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b908:	6363      	str	r3, [r4, #52]	; 0x34
 800b90a:	e7d7      	b.n	800b8bc <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	0412      	lsls	r2, r2, #16
 800b910:	d514      	bpl.n	800b93c <I2C_ITError+0xb8>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4915      	ldr	r1, [pc, #84]	; (800b96c <I2C_ITError+0xe8>)
 800b916:	400a      	ands	r2, r1
 800b918:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b91a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0e5      	beq.n	800b8ec <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <I2C_ITError+0xe4>)
 800b922:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b924:	2340      	movs	r3, #64	; 0x40
 800b926:	2200      	movs	r2, #0
 800b928:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b92a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b92c:	f7ff ff68 	bl	800b800 <HAL_DMA_Abort_IT>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0db      	beq.n	800b8ec <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b934:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b936:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b938:	4798      	blx	r3
 800b93a:	e7d7      	b.n	800b8ec <I2C_ITError+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b93c:	2341      	movs	r3, #65	; 0x41
 800b93e:	5ce3      	ldrb	r3, [r4, r3]
 800b940:	2b60      	cmp	r3, #96	; 0x60
 800b942:	d003      	beq.n	800b94c <I2C_ITError+0xc8>
    __HAL_UNLOCK(hi2c);
 800b944:	2340      	movs	r3, #64	; 0x40
 800b946:	2200      	movs	r2, #0
 800b948:	54e2      	strb	r2, [r4, r3]
 800b94a:	e7cf      	b.n	800b8ec <I2C_ITError+0x68>
    hi2c->State = HAL_I2C_STATE_READY;
 800b94c:	3b1f      	subs	r3, #31
 800b94e:	2220      	movs	r2, #32
 800b950:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800b952:	3b01      	subs	r3, #1
 800b954:	2200      	movs	r2, #0
 800b956:	54e2      	strb	r2, [r4, r3]
 800b958:	e7c8      	b.n	800b8ec <I2C_ITError+0x68>
 800b95a:	46c0      	nop			; (mov r8, r8)
 800b95c:	ffff0000 	.word	0xffff0000
 800b960:	0800ba75 	.word	0x0800ba75
 800b964:	ffffbfff 	.word	0xffffbfff
 800b968:	0800b5bd 	.word	0x0800b5bd
 800b96c:	ffff7fff 	.word	0xffff7fff

0800b970 <I2C_ITSlaveCplt>:
{
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	0004      	movs	r4, r0
 800b974:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b976:	6803      	ldr	r3, [r0, #0]
 800b978:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b97a:	2220      	movs	r2, #32
 800b97c:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b97e:	2107      	movs	r1, #7
 800b980:	f7ff fdd3 	bl	800b52a <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b984:	6822      	ldr	r2, [r4, #0]
 800b986:	6851      	ldr	r1, [r2, #4]
 800b988:	2380      	movs	r3, #128	; 0x80
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	430b      	orrs	r3, r1
 800b98e:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800b990:	6822      	ldr	r2, [r4, #0]
 800b992:	6853      	ldr	r3, [r2, #4]
 800b994:	4935      	ldr	r1, [pc, #212]	; (800ba6c <I2C_ITSlaveCplt+0xfc>)
 800b996:	400b      	ands	r3, r1
 800b998:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800b99a:	0020      	movs	r0, r4
 800b99c:	f7ff fdfd 	bl	800b59a <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b9a0:	0473      	lsls	r3, r6, #17
 800b9a2:	d539      	bpl.n	800ba18 <I2C_ITSlaveCplt+0xa8>
    if (hi2c->hdmatx != NULL)
 800b9a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <I2C_ITSlaveCplt+0x42>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b9b2:	076b      	lsls	r3, r5, #29
 800b9b4:	d511      	bpl.n	800b9da <I2C_ITSlaveCplt+0x6a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9b6:	2304      	movs	r3, #4
 800b9b8:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b9c0:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b9c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d005      	beq.n	800b9da <I2C_ITSlaveCplt+0x6a>
      hi2c->XferSize--;
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b9d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800b9da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9ee:	2242      	movs	r2, #66	; 0x42
 800b9f0:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 800b9f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b9f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d118      	bne.n	800ba2c <I2C_ITSlaveCplt+0xbc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b9fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b9fc:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <I2C_ITSlaveCplt+0x100>)
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d121      	bne.n	800ba46 <I2C_ITSlaveCplt+0xd6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba02:	2341      	movs	r3, #65	; 0x41
 800ba04:	5ce3      	ldrb	r3, [r4, r3]
 800ba06:	2b22      	cmp	r3, #34	; 0x22
 800ba08:	d029      	beq.n	800ba5e <I2C_ITSlaveCplt+0xee>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba0a:	2341      	movs	r3, #65	; 0x41
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800ba10:	3b01      	subs	r3, #1
 800ba12:	2200      	movs	r2, #0
 800ba14:	54e2      	strb	r2, [r4, r3]
 800ba16:	e021      	b.n	800ba5c <I2C_ITSlaveCplt+0xec>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ba18:	0433      	lsls	r3, r6, #16
 800ba1a:	d5ca      	bpl.n	800b9b2 <I2C_ITSlaveCplt+0x42>
    if (hi2c->hdmarx != NULL)
 800ba1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d0c7      	beq.n	800b9b2 <I2C_ITSlaveCplt+0x42>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	8563      	strh	r3, [r4, #42]	; 0x2a
 800ba2a:	e7c2      	b.n	800b9b2 <I2C_ITSlaveCplt+0x42>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba2e:	0020      	movs	r0, r4
 800ba30:	f7ff ff28 	bl	800b884 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ba34:	2341      	movs	r3, #65	; 0x41
 800ba36:	5ce3      	ldrb	r3, [r4, r3]
 800ba38:	2b28      	cmp	r3, #40	; 0x28
 800ba3a:	d10f      	bne.n	800ba5c <I2C_ITSlaveCplt+0xec>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ba3c:	0029      	movs	r1, r5
 800ba3e:	0020      	movs	r0, r4
 800ba40:	f7ff fdcc 	bl	800b5dc <I2C_ITListenCplt>
 800ba44:	e00a      	b.n	800ba5c <I2C_ITSlaveCplt+0xec>
    I2C_ITSlaveSeqCplt(hi2c);
 800ba46:	0020      	movs	r0, r4
 800ba48:	f7ff fe39 	bl	800b6be <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ba4c:	4b08      	ldr	r3, [pc, #32]	; (800ba70 <I2C_ITSlaveCplt+0x100>)
 800ba4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ba50:	2341      	movs	r3, #65	; 0x41
 800ba52:	2220      	movs	r2, #32
 800ba54:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800ba56:	3b01      	subs	r3, #1
 800ba58:	2200      	movs	r2, #0
 800ba5a:	54e2      	strb	r2, [r4, r3]
}
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800ba5e:	331f      	adds	r3, #31
 800ba60:	2220      	movs	r2, #32
 800ba62:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800ba64:	3b01      	subs	r3, #1
 800ba66:	2200      	movs	r2, #0
 800ba68:	54e2      	strb	r2, [r4, r3]
 800ba6a:	e7f7      	b.n	800ba5c <I2C_ITSlaveCplt+0xec>
 800ba6c:	fe00e800 	.word	0xfe00e800
 800ba70:	ffff0000 	.word	0xffff0000

0800ba74 <I2C_Slave_ISR_IT>:
{
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	0004      	movs	r4, r0
 800ba78:	000d      	movs	r5, r1
 800ba7a:	0016      	movs	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 800ba7c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800ba7e:	2340      	movs	r3, #64	; 0x40
 800ba80:	5cc3      	ldrb	r3, [r0, r3]
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d100      	bne.n	800ba88 <I2C_Slave_ISR_IT+0x14>
 800ba86:	e09a      	b.n	800bbbe <I2C_Slave_ISR_IT+0x14a>
 800ba88:	2301      	movs	r3, #1
 800ba8a:	2240      	movs	r2, #64	; 0x40
 800ba8c:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ba8e:	092a      	lsrs	r2, r5, #4
 800ba90:	4213      	tst	r3, r2
 800ba92:	d041      	beq.n	800bb18 <I2C_Slave_ISR_IT+0xa4>
 800ba94:	06f3      	lsls	r3, r6, #27
 800ba96:	d53f      	bpl.n	800bb18 <I2C_Slave_ISR_IT+0xa4>
    if (hi2c->XferCount == 0U)
 800ba98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d129      	bne.n	800baf4 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800baa0:	3341      	adds	r3, #65	; 0x41
 800baa2:	5cc3      	ldrb	r3, [r0, r3]
 800baa4:	2b28      	cmp	r3, #40	; 0x28
 800baa6:	d010      	beq.n	800baca <I2C_Slave_ISR_IT+0x56>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800baa8:	2341      	movs	r3, #65	; 0x41
 800baaa:	5ce3      	ldrb	r3, [r4, r3]
 800baac:	2b29      	cmp	r3, #41	; 0x29
 800baae:	d014      	beq.n	800bada <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bab0:	6823      	ldr	r3, [r4, #0]
 800bab2:	2210      	movs	r2, #16
 800bab4:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bab6:	06ab      	lsls	r3, r5, #26
 800bab8:	d502      	bpl.n	800bac0 <I2C_Slave_ISR_IT+0x4c>
 800baba:	06b3      	lsls	r3, r6, #26
 800babc:	d500      	bpl.n	800bac0 <I2C_Slave_ISR_IT+0x4c>
 800babe:	e079      	b.n	800bbb4 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	2200      	movs	r2, #0
 800bac4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800bac6:	2000      	movs	r0, #0
}
 800bac8:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800baca:	2380      	movs	r3, #128	; 0x80
 800bacc:	049b      	lsls	r3, r3, #18
 800bace:	4299      	cmp	r1, r3
 800bad0:	d1ea      	bne.n	800baa8 <I2C_Slave_ISR_IT+0x34>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bad2:	0029      	movs	r1, r5
 800bad4:	f7ff fd82 	bl	800b5dc <I2C_ITListenCplt>
 800bad8:	e7ed      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bada:	4b3a      	ldr	r3, [pc, #232]	; (800bbc4 <I2C_Slave_ISR_IT+0x150>)
 800badc:	4299      	cmp	r1, r3
 800bade:	d0e7      	beq.n	800bab0 <I2C_Slave_ISR_IT+0x3c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bae0:	6823      	ldr	r3, [r4, #0]
 800bae2:	2210      	movs	r2, #16
 800bae4:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800bae6:	0020      	movs	r0, r4
 800bae8:	f7ff fd57 	bl	800b59a <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800baec:	0020      	movs	r0, r4
 800baee:	f7ff fde6 	bl	800b6be <I2C_ITSlaveSeqCplt>
 800baf2:	e7e0      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baf4:	6803      	ldr	r3, [r0, #0]
 800baf6:	2210      	movs	r2, #16
 800baf8:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bafa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bafc:	3a0c      	subs	r2, #12
 800bafe:	4313      	orrs	r3, r2
 800bb00:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bb02:	2900      	cmp	r1, #0
 800bb04:	d003      	beq.n	800bb0e <I2C_Slave_ISR_IT+0x9a>
 800bb06:	2380      	movs	r3, #128	; 0x80
 800bb08:	045b      	lsls	r3, r3, #17
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	d1d3      	bne.n	800bab6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb0e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb10:	0020      	movs	r0, r4
 800bb12:	f7ff feb7 	bl	800b884 <I2C_ITError>
 800bb16:	e7ce      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bb18:	076b      	lsls	r3, r5, #29
 800bb1a:	d520      	bpl.n	800bb5e <I2C_Slave_ISR_IT+0xea>
 800bb1c:	0773      	lsls	r3, r6, #29
 800bb1e:	d51e      	bpl.n	800bb5e <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 800bb20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00f      	beq.n	800bb48 <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800bb28:	2304      	movs	r3, #4
 800bb2a:	439d      	bics	r5, r3
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bb32:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800bb34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb36:	3301      	adds	r3, #1
 800bb38:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bb3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bb40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb42:	3b01      	subs	r3, #1
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800bb48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1b2      	bne.n	800bab6 <I2C_Slave_ISR_IT+0x42>
 800bb50:	4b1c      	ldr	r3, [pc, #112]	; (800bbc4 <I2C_Slave_ISR_IT+0x150>)
 800bb52:	4299      	cmp	r1, r3
 800bb54:	d0af      	beq.n	800bab6 <I2C_Slave_ISR_IT+0x42>
      I2C_ITSlaveSeqCplt(hi2c);
 800bb56:	0020      	movs	r0, r4
 800bb58:	f7ff fdb1 	bl	800b6be <I2C_ITSlaveSeqCplt>
 800bb5c:	e7ab      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bb5e:	072b      	lsls	r3, r5, #28
 800bb60:	d501      	bpl.n	800bb66 <I2C_Slave_ISR_IT+0xf2>
 800bb62:	0733      	lsls	r3, r6, #28
 800bb64:	d416      	bmi.n	800bb94 <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bb66:	07ab      	lsls	r3, r5, #30
 800bb68:	d5a5      	bpl.n	800bab6 <I2C_Slave_ISR_IT+0x42>
 800bb6a:	07b3      	lsls	r3, r6, #30
 800bb6c:	d5a3      	bpl.n	800bab6 <I2C_Slave_ISR_IT+0x42>
    if (hi2c->XferCount > 0U)
 800bb6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d013      	beq.n	800bb9e <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bb7a:	7812      	ldrb	r2, [r2, #0]
 800bb7c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800bb7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb80:	3301      	adds	r3, #1
 800bb82:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bb84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb86:	3b01      	subs	r3, #1
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bb8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	8523      	strh	r3, [r4, #40]	; 0x28
 800bb92:	e790      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bb94:	0029      	movs	r1, r5
 800bb96:	0020      	movs	r0, r4
 800bb98:	f7ff fd51 	bl	800b63e <I2C_ITAddrCplt>
 800bb9c:	e78b      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bb9e:	2380      	movs	r3, #128	; 0x80
 800bba0:	045b      	lsls	r3, r3, #17
 800bba2:	4299      	cmp	r1, r3
 800bba4:	d002      	beq.n	800bbac <I2C_Slave_ISR_IT+0x138>
 800bba6:	2900      	cmp	r1, #0
 800bba8:	d000      	beq.n	800bbac <I2C_Slave_ISR_IT+0x138>
 800bbaa:	e784      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
        I2C_ITSlaveSeqCplt(hi2c);
 800bbac:	0020      	movs	r0, r4
 800bbae:	f7ff fd86 	bl	800b6be <I2C_ITSlaveSeqCplt>
 800bbb2:	e780      	b.n	800bab6 <I2C_Slave_ISR_IT+0x42>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bbb4:	0029      	movs	r1, r5
 800bbb6:	0020      	movs	r0, r4
 800bbb8:	f7ff feda 	bl	800b970 <I2C_ITSlaveCplt>
 800bbbc:	e780      	b.n	800bac0 <I2C_Slave_ISR_IT+0x4c>
  __HAL_LOCK(hi2c);
 800bbbe:	2002      	movs	r0, #2
 800bbc0:	e782      	b.n	800bac8 <I2C_Slave_ISR_IT+0x54>
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	ffff0000 	.word	0xffff0000

0800bbc8 <FLASH_OB_GetSecMem>:
  * @param  SecSize specifies number of pages to protect as secure memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
 800bbc8:	b510      	push	{r4, lr}
  uint32_t secmem = FLASH->SECR;
 800bbca:	4a05      	ldr	r2, [pc, #20]	; (800bbe0 <FLASH_OB_GetSecMem+0x18>)
 800bbcc:	2380      	movs	r3, #128	; 0x80
 800bbce:	58d4      	ldr	r4, [r2, r3]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800bbd0:	2280      	movs	r2, #128	; 0x80
 800bbd2:	0252      	lsls	r2, r2, #9
 800bbd4:	4022      	ands	r2, r4
 800bbd6:	6002      	str	r2, [r0, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	4023      	ands	r3, r4
 800bbdc:	600b      	str	r3, [r1, #0]
}
 800bbde:	bd10      	pop	{r4, pc}
 800bbe0:	40022000 	.word	0x40022000

0800bbe4 <FLASH_OB_GetPCROP1B>:
{
 800bbe4:	b530      	push	{r4, r5, lr}
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800bbe6:	4b09      	ldr	r3, [pc, #36]	; (800bc0c <FLASH_OB_GetPCROP1B+0x28>)
 800bbe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bbea:	0252      	lsls	r2, r2, #9
 800bbec:	24ff      	movs	r4, #255	; 0xff
 800bbee:	0264      	lsls	r4, r4, #9
 800bbf0:	4022      	ands	r2, r4
  *PCROP1BStartAddr += FLASH_BASE;
 800bbf2:	2580      	movs	r5, #128	; 0x80
 800bbf4:	052d      	lsls	r5, r5, #20
 800bbf6:	46ac      	mov	ip, r5
 800bbf8:	4462      	add	r2, ip
 800bbfa:	6002      	str	r2, [r0, #0]
  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bbfe:	025b      	lsls	r3, r3, #9
 800bc00:	4023      	ands	r3, r4
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800bc02:	4a03      	ldr	r2, [pc, #12]	; (800bc10 <FLASH_OB_GetPCROP1B+0x2c>)
 800bc04:	4694      	mov	ip, r2
 800bc06:	4463      	add	r3, ip
 800bc08:	600b      	str	r3, [r1, #0]
}
 800bc0a:	bd30      	pop	{r4, r5, pc}
 800bc0c:	40022000 	.word	0x40022000
 800bc10:	080001ff 	.word	0x080001ff

0800bc14 <FLASH_OB_GetPCROP1A>:
{
 800bc14:	b570      	push	{r4, r5, r6, lr}
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800bc16:	4d0d      	ldr	r5, [pc, #52]	; (800bc4c <FLASH_OB_GetPCROP1A+0x38>)
 800bc18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bc1a:	025b      	lsls	r3, r3, #9
 800bc1c:	24ff      	movs	r4, #255	; 0xff
 800bc1e:	0264      	lsls	r4, r4, #9
 800bc20:	4023      	ands	r3, r4
  *PCROP1AStartAddr += FLASH_BASE;
 800bc22:	2680      	movs	r6, #128	; 0x80
 800bc24:	0536      	lsls	r6, r6, #20
 800bc26:	46b4      	mov	ip, r6
 800bc28:	4463      	add	r3, ip
 800bc2a:	600b      	str	r3, [r1, #0]
  pcrop = FLASH->PCROP1AER;
 800bc2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 800bc2e:	024b      	lsls	r3, r1, #9
 800bc30:	4023      	ands	r3, r4
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800bc32:	4c07      	ldr	r4, [pc, #28]	; (800bc50 <FLASH_OB_GetPCROP1A+0x3c>)
 800bc34:	46a4      	mov	ip, r4
 800bc36:	4463      	add	r3, ip
 800bc38:	6013      	str	r3, [r2, #0]
  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800bc3a:	6803      	ldr	r3, [r0, #0]
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	085b      	lsrs	r3, r3, #1
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800bc40:	0fc9      	lsrs	r1, r1, #31
 800bc42:	07c9      	lsls	r1, r1, #31
 800bc44:	430b      	orrs	r3, r1
 800bc46:	6003      	str	r3, [r0, #0]
}
 800bc48:	bd70      	pop	{r4, r5, r6, pc}
 800bc4a:	46c0      	nop			; (mov r8, r8)
 800bc4c:	40022000 	.word	0x40022000
 800bc50:	080001ff 	.word	0x080001ff

0800bc54 <FLASH_OB_GetUser>:
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <FLASH_OB_GetUser+0xc>)
 800bc56:	6a18      	ldr	r0, [r3, #32]
 800bc58:	4b02      	ldr	r3, [pc, #8]	; (800bc64 <FLASH_OB_GetUser+0x10>)
 800bc5a:	4018      	ands	r0, r3
}
 800bc5c:	4770      	bx	lr
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	40022000 	.word	0x40022000
 800bc64:	3f4fff00 	.word	0x3f4fff00

0800bc68 <FLASH_OB_GetRDP>:
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <FLASH_OB_GetRDP+0x18>)
 800bc6a:	6a1b      	ldr	r3, [r3, #32]
 800bc6c:	20ff      	movs	r0, #255	; 0xff
 800bc6e:	4018      	ands	r0, r3
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800bc70:	28aa      	cmp	r0, #170	; 0xaa
 800bc72:	d001      	beq.n	800bc78 <FLASH_OB_GetRDP+0x10>
 800bc74:	28cc      	cmp	r0, #204	; 0xcc
 800bc76:	d100      	bne.n	800bc7a <FLASH_OB_GetRDP+0x12>
}
 800bc78:	4770      	bx	lr
    return (OB_RDP_LEVEL_1);
 800bc7a:	20bb      	movs	r0, #187	; 0xbb
 800bc7c:	e7fc      	b.n	800bc78 <FLASH_OB_GetRDP+0x10>
 800bc7e:	46c0      	nop			; (mov r8, r8)
 800bc80:	40022000 	.word	0x40022000

0800bc84 <FLASH_OB_GetWRP>:
{
 800bc84:	b510      	push	{r4, lr}
  if (WRPArea == OB_WRPAREA_ZONE_A)
 800bc86:	2801      	cmp	r0, #1
 800bc88:	d009      	beq.n	800bc9e <FLASH_OB_GetWRP+0x1a>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800bc8a:	4c0a      	ldr	r4, [pc, #40]	; (800bcb4 <FLASH_OB_GetWRP+0x30>)
 800bc8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc8e:	233f      	movs	r3, #63	; 0x3f
 800bc90:	4018      	ands	r0, r3
 800bc92:	6008      	str	r0, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800bc94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bc96:	0c09      	lsrs	r1, r1, #16
 800bc98:	400b      	ands	r3, r1
 800bc9a:	6013      	str	r3, [r2, #0]
}
 800bc9c:	bd10      	pop	{r4, pc}
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <FLASH_OB_GetWRP+0x30>)
 800bca0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bca2:	243f      	movs	r4, #63	; 0x3f
 800bca4:	4020      	ands	r0, r4
 800bca6:	6008      	str	r0, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800bca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcaa:	0c1b      	lsrs	r3, r3, #16
 800bcac:	4023      	ands	r3, r4
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	e7f4      	b.n	800bc9c <FLASH_OB_GetWRP+0x18>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	40022000 	.word	0x40022000

0800bcb8 <FLASH_OB_SecMemConfig>:
{
 800bcb8:	b530      	push	{r4, r5, lr}
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 800bcba:	4c04      	ldr	r4, [pc, #16]	; (800bccc <FLASH_OB_SecMemConfig+0x14>)
 800bcbc:	2280      	movs	r2, #128	; 0x80
 800bcbe:	58a3      	ldr	r3, [r4, r2]
 800bcc0:	4d03      	ldr	r5, [pc, #12]	; (800bcd0 <FLASH_OB_SecMemConfig+0x18>)
 800bcc2:	402b      	ands	r3, r5
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800bcc4:	4318      	orrs	r0, r3
 800bcc6:	4301      	orrs	r1, r0
 800bcc8:	50a1      	str	r1, [r4, r2]
}
 800bcca:	bd30      	pop	{r4, r5, pc}
 800bccc:	40022000 	.word	0x40022000
 800bcd0:	fffeff80 	.word	0xfffeff80

0800bcd4 <FLASH_OB_PCROP1BConfig>:
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800bcd4:	23f8      	movs	r3, #248	; 0xf8
 800bcd6:	061b      	lsls	r3, r3, #24
 800bcd8:	469c      	mov	ip, r3
 800bcda:	4460      	add	r0, ip
 800bcdc:	0a40      	lsrs	r0, r0, #9
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800bcde:	4461      	add	r1, ip
 800bce0:	0a49      	lsrs	r1, r1, #9
  FLASH->PCROP1BSR = startoffset;
 800bce2:	4b02      	ldr	r3, [pc, #8]	; (800bcec <FLASH_OB_PCROP1BConfig+0x18>)
 800bce4:	6358      	str	r0, [r3, #52]	; 0x34
  FLASH->PCROP1BER = endoffset;
 800bce6:	6399      	str	r1, [r3, #56]	; 0x38
}
 800bce8:	4770      	bx	lr
 800bcea:	46c0      	nop			; (mov r8, r8)
 800bcec:	40022000 	.word	0x40022000

0800bcf0 <FLASH_OB_PCROP1AConfig>:
{
 800bcf0:	b510      	push	{r4, lr}
  pcrop1aend = FLASH->PCROP1AER;
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	; (800bd24 <FLASH_OB_PCROP1AConfig+0x34>)
 800bcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 800bcf6:	07c4      	lsls	r4, r0, #31
 800bcf8:	d50b      	bpl.n	800bd12 <FLASH_OB_PCROP1AConfig+0x22>
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800bcfa:	24f8      	movs	r4, #248	; 0xf8
 800bcfc:	0624      	lsls	r4, r4, #24
 800bcfe:	46a4      	mov	ip, r4
 800bd00:	4461      	add	r1, ip
 800bd02:	0a49      	lsrs	r1, r1, #9
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800bd04:	4462      	add	r2, ip
 800bd06:	0a52      	lsrs	r2, r2, #9
    FLASH->PCROP1ASR = startoffset;
 800bd08:	4c06      	ldr	r4, [pc, #24]	; (800bd24 <FLASH_OB_PCROP1AConfig+0x34>)
 800bd0a:	6261      	str	r1, [r4, #36]	; 0x24
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 800bd0c:	21ff      	movs	r1, #255	; 0xff
 800bd0e:	438b      	bics	r3, r1
    pcrop1aend |= endoffset;
 800bd10:	4313      	orrs	r3, r2
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 800bd12:	2800      	cmp	r0, #0
 800bd14:	db02      	blt.n	800bd1c <FLASH_OB_PCROP1AConfig+0x2c>
  FLASH->PCROP1AER = pcrop1aend;
 800bd16:	4a03      	ldr	r2, [pc, #12]	; (800bd24 <FLASH_OB_PCROP1AConfig+0x34>)
 800bd18:	6293      	str	r3, [r2, #40]	; 0x28
}
 800bd1a:	bd10      	pop	{r4, pc}
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 800bd1c:	2280      	movs	r2, #128	; 0x80
 800bd1e:	0612      	lsls	r2, r2, #24
 800bd20:	4313      	orrs	r3, r2
 800bd22:	e7f8      	b.n	800bd16 <FLASH_OB_PCROP1AConfig+0x26>
 800bd24:	40022000 	.word	0x40022000

0800bd28 <FLASH_OB_OptrConfig>:
{
 800bd28:	b530      	push	{r4, r5, lr}
  optr = FLASH->OPTR;
 800bd2a:	4c04      	ldr	r4, [pc, #16]	; (800bd3c <FLASH_OB_OptrConfig+0x14>)
 800bd2c:	6a23      	ldr	r3, [r4, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800bd2e:	25ff      	movs	r5, #255	; 0xff
 800bd30:	4328      	orrs	r0, r5
 800bd32:	4383      	bics	r3, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800bd34:	4319      	orrs	r1, r3
 800bd36:	430a      	orrs	r2, r1
 800bd38:	6222      	str	r2, [r4, #32]
}
 800bd3a:	bd30      	pop	{r4, r5, pc}
 800bd3c:	40022000 	.word	0x40022000

0800bd40 <FLASH_OB_WRPConfig>:
  if (WRPArea != OB_WRPAREA_ZONE_A)
 800bd40:	2801      	cmp	r0, #1
 800bd42:	d004      	beq.n	800bd4e <FLASH_OB_WRPConfig+0xe>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 800bd44:	0412      	lsls	r2, r2, #16
 800bd46:	4311      	orrs	r1, r2
 800bd48:	4b03      	ldr	r3, [pc, #12]	; (800bd58 <FLASH_OB_WRPConfig+0x18>)
 800bd4a:	6319      	str	r1, [r3, #48]	; 0x30
}
 800bd4c:	4770      	bx	lr
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 800bd4e:	0412      	lsls	r2, r2, #16
 800bd50:	4311      	orrs	r1, r2
 800bd52:	4b01      	ldr	r3, [pc, #4]	; (800bd58 <FLASH_OB_WRPConfig+0x18>)
 800bd54:	62d9      	str	r1, [r3, #44]	; 0x2c
 800bd56:	e7f9      	b.n	800bd4c <FLASH_OB_WRPConfig+0xc>
 800bd58:	40022000 	.word	0x40022000

0800bd5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800bd5c:	4b01      	ldr	r3, [pc, #4]	; (800bd64 <HAL_RCC_GetHCLKFreq+0x8>)
 800bd5e:	6818      	ldr	r0, [r3, #0]
}
 800bd60:	4770      	bx	lr
 800bd62:	46c0      	nop			; (mov r8, r8)
 800bd64:	20000000 	.word	0x20000000

0800bd68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd68:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800bd6a:	f7ff fff7 	bl	800bd5c <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	0b12      	lsrs	r2, r2, #12
 800bd74:	2307      	movs	r3, #7
 800bd76:	4013      	ands	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd7c:	18d3      	adds	r3, r2, r3
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	221f      	movs	r2, #31
 800bd82:	4013      	ands	r3, r2
 800bd84:	40d8      	lsrs	r0, r3
}
 800bd86:	bd10      	pop	{r4, pc}
 800bd88:	40021000 	.word	0x40021000
 800bd8c:	0801ad7c 	.word	0x0801ad7c

0800bd90 <HAL_RCC_GetSysClockFreq>:
{
 800bd90:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bd92:	4b2b      	ldr	r3, [pc, #172]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	2238      	movs	r2, #56	; 0x38
 800bd98:	421a      	tst	r2, r3
 800bd9a:	d019      	beq.n	800bdd0 <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bd9c:	4b28      	ldr	r3, [pc, #160]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bd9e:	689a      	ldr	r2, [r3, #8]
 800bda0:	2338      	movs	r3, #56	; 0x38
 800bda2:	4013      	ands	r3, r2
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d046      	beq.n	800be36 <HAL_RCC_GetSysClockFreq+0xa6>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bda8:	4b25      	ldr	r3, [pc, #148]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bdaa:	689a      	ldr	r2, [r3, #8]
 800bdac:	2338      	movs	r3, #56	; 0x38
 800bdae:	4013      	ands	r3, r2
 800bdb0:	2b10      	cmp	r3, #16
 800bdb2:	d018      	beq.n	800bde6 <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800bdb4:	4b22      	ldr	r3, [pc, #136]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bdb6:	689a      	ldr	r2, [r3, #8]
 800bdb8:	2338      	movs	r3, #56	; 0x38
 800bdba:	4013      	ands	r3, r2
 800bdbc:	2b20      	cmp	r3, #32
 800bdbe:	d03c      	beq.n	800be3a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800bdc0:	4b1f      	ldr	r3, [pc, #124]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bdc2:	689a      	ldr	r2, [r3, #8]
 800bdc4:	2338      	movs	r3, #56	; 0x38
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	2b18      	cmp	r3, #24
 800bdca:	d031      	beq.n	800be30 <HAL_RCC_GetSysClockFreq+0xa0>
    sysclockfreq = 0U;
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e009      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x54>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	0ad2      	lsrs	r2, r2, #11
 800bdd6:	2307      	movs	r3, #7
 800bdd8:	4013      	ands	r3, r2
 800bdda:	2101      	movs	r1, #1
 800bddc:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bdde:	4819      	ldr	r0, [pc, #100]	; (800be44 <HAL_RCC_GetSysClockFreq+0xb4>)
 800bde0:	f005 f8ca 	bl	8010f78 <__udivsi3>
}
 800bde4:	bd10      	pop	{r4, pc}
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bde6:	4a16      	ldr	r2, [pc, #88]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800bde8:	68d1      	ldr	r1, [r2, #12]
 800bdea:	3b0d      	subs	r3, #13
 800bdec:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bdee:	68d2      	ldr	r2, [r2, #12]
 800bdf0:	0912      	lsrs	r2, r2, #4
 800bdf2:	2107      	movs	r1, #7
 800bdf4:	4011      	ands	r1, r2
 800bdf6:	3101      	adds	r1, #1
    switch (pllsource)
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d10f      	bne.n	800be1c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bdfc:	4812      	ldr	r0, [pc, #72]	; (800be48 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bdfe:	f005 f8bb 	bl	8010f78 <__udivsi3>
 800be02:	4b0f      	ldr	r3, [pc, #60]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800be04:	68da      	ldr	r2, [r3, #12]
 800be06:	0a12      	lsrs	r2, r2, #8
 800be08:	237f      	movs	r3, #127	; 0x7f
 800be0a:	4013      	ands	r3, r2
 800be0c:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800be10:	68d9      	ldr	r1, [r3, #12]
 800be12:	0f49      	lsrs	r1, r1, #29
 800be14:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800be16:	f005 f8af 	bl	8010f78 <__udivsi3>
 800be1a:	e7e3      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800be1c:	4809      	ldr	r0, [pc, #36]	; (800be44 <HAL_RCC_GetSysClockFreq+0xb4>)
 800be1e:	f005 f8ab 	bl	8010f78 <__udivsi3>
 800be22:	4b07      	ldr	r3, [pc, #28]	; (800be40 <HAL_RCC_GetSysClockFreq+0xb0>)
 800be24:	68da      	ldr	r2, [r3, #12]
 800be26:	0a12      	lsrs	r2, r2, #8
 800be28:	237f      	movs	r3, #127	; 0x7f
 800be2a:	4013      	ands	r3, r2
 800be2c:	4358      	muls	r0, r3
 800be2e:	e7ee      	b.n	800be0e <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = LSI_VALUE;
 800be30:	20fa      	movs	r0, #250	; 0xfa
 800be32:	01c0      	lsls	r0, r0, #7
 800be34:	e7d6      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x54>
    sysclockfreq = HSE_VALUE;
 800be36:	4804      	ldr	r0, [pc, #16]	; (800be48 <HAL_RCC_GetSysClockFreq+0xb8>)
 800be38:	e7d4      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x54>
    sysclockfreq = LSE_VALUE;
 800be3a:	2080      	movs	r0, #128	; 0x80
 800be3c:	0200      	lsls	r0, r0, #8
 800be3e:	e7d1      	b.n	800bde4 <HAL_RCC_GetSysClockFreq+0x54>
 800be40:	40021000 	.word	0x40021000
 800be44:	00f42400 	.word	0x00f42400
 800be48:	007a1200 	.word	0x007a1200

0800be4c <UART_SetConfig>:
{
 800be4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4e:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800be50:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be52:	6883      	ldr	r3, [r0, #8]
 800be54:	6902      	ldr	r2, [r0, #16]
 800be56:	4313      	orrs	r3, r2
 800be58:	6942      	ldr	r2, [r0, #20]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	69c2      	ldr	r2, [r0, #28]
 800be5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 800be60:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800be62:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be64:	680b      	ldr	r3, [r1, #0]
 800be66:	48bd      	ldr	r0, [pc, #756]	; (800c15c <UART_SetConfig+0x310>)
 800be68:	4003      	ands	r3, r0
 800be6a:	4313      	orrs	r3, r2
 800be6c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be6e:	6822      	ldr	r2, [r4, #0]
 800be70:	6853      	ldr	r3, [r2, #4]
 800be72:	49bb      	ldr	r1, [pc, #748]	; (800c160 <UART_SetConfig+0x314>)
 800be74:	400b      	ands	r3, r1
 800be76:	68e1      	ldr	r1, [r4, #12]
 800be78:	430b      	orrs	r3, r1
 800be7a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be7c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be7e:	6822      	ldr	r2, [r4, #0]
 800be80:	4bb8      	ldr	r3, [pc, #736]	; (800c164 <UART_SetConfig+0x318>)
 800be82:	429a      	cmp	r2, r3
 800be84:	d001      	beq.n	800be8a <UART_SetConfig+0x3e>
    tmpreg |= huart->Init.OneBitSampling;
 800be86:	6a23      	ldr	r3, [r4, #32]
 800be88:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be8a:	6893      	ldr	r3, [r2, #8]
 800be8c:	48b6      	ldr	r0, [pc, #728]	; (800c168 <UART_SetConfig+0x31c>)
 800be8e:	4003      	ands	r3, r0
 800be90:	430b      	orrs	r3, r1
 800be92:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800be94:	6822      	ldr	r2, [r4, #0]
 800be96:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800be98:	210f      	movs	r1, #15
 800be9a:	438b      	bics	r3, r1
 800be9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be9e:	430b      	orrs	r3, r1
 800bea0:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	4ab1      	ldr	r2, [pc, #708]	; (800c16c <UART_SetConfig+0x320>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d05c      	beq.n	800bf64 <UART_SetConfig+0x118>
 800beaa:	4ab1      	ldr	r2, [pc, #708]	; (800c170 <UART_SetConfig+0x324>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d06d      	beq.n	800bf8c <UART_SetConfig+0x140>
 800beb0:	4ab0      	ldr	r2, [pc, #704]	; (800c174 <UART_SetConfig+0x328>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d100      	bne.n	800beb8 <UART_SetConfig+0x6c>
 800beb6:	e09e      	b.n	800bff6 <UART_SetConfig+0x1aa>
 800beb8:	4aaf      	ldr	r2, [pc, #700]	; (800c178 <UART_SetConfig+0x32c>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d100      	bne.n	800bec0 <UART_SetConfig+0x74>
 800bebe:	e09c      	b.n	800bffa <UART_SetConfig+0x1ae>
 800bec0:	4aa8      	ldr	r2, [pc, #672]	; (800c164 <UART_SetConfig+0x318>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d077      	beq.n	800bfb6 <UART_SetConfig+0x16a>
 800bec6:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800bec8:	4aa6      	ldr	r2, [pc, #664]	; (800c164 <UART_SetConfig+0x318>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d100      	bne.n	800bed0 <UART_SetConfig+0x84>
 800bece:	e098      	b.n	800c002 <UART_SetConfig+0x1b6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed0:	2380      	movs	r3, #128	; 0x80
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	69e2      	ldr	r2, [r4, #28]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d100      	bne.n	800bedc <UART_SetConfig+0x90>
 800beda:	e351      	b.n	800c580 <UART_SetConfig+0x734>
    switch (clocksource)
 800bedc:	2d02      	cmp	r5, #2
 800bede:	d101      	bne.n	800bee4 <UART_SetConfig+0x98>
 800bee0:	f000 fcf8 	bl	800c8d4 <UART_SetConfig+0xa88>
 800bee4:	d801      	bhi.n	800beea <UART_SetConfig+0x9e>
 800bee6:	f000 fca1 	bl	800c82c <UART_SetConfig+0x9e0>
 800beea:	2d04      	cmp	r5, #4
 800beec:	d101      	bne.n	800bef2 <UART_SetConfig+0xa6>
 800beee:	f000 fd2d 	bl	800c94c <UART_SetConfig+0xb00>
 800bef2:	2d08      	cmp	r5, #8
 800bef4:	d001      	beq.n	800befa <UART_SetConfig+0xae>
 800bef6:	f000 fd93 	bl	800ca20 <UART_SetConfig+0xbd4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800befa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <UART_SetConfig+0xb8>
 800bf00:	f000 fd67 	bl	800c9d2 <UART_SetConfig+0xb86>
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d101      	bne.n	800bf0c <UART_SetConfig+0xc0>
 800bf08:	f000 fd6f 	bl	800c9ea <UART_SetConfig+0xb9e>
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d101      	bne.n	800bf14 <UART_SetConfig+0xc8>
 800bf10:	f000 fd6e 	bl	800c9f0 <UART_SetConfig+0xba4>
 800bf14:	2b03      	cmp	r3, #3
 800bf16:	d101      	bne.n	800bf1c <UART_SetConfig+0xd0>
 800bf18:	f000 fd6d 	bl	800c9f6 <UART_SetConfig+0xbaa>
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	d101      	bne.n	800bf24 <UART_SetConfig+0xd8>
 800bf20:	f000 fd6b 	bl	800c9fa <UART_SetConfig+0xbae>
 800bf24:	2b05      	cmp	r3, #5
 800bf26:	d101      	bne.n	800bf2c <UART_SetConfig+0xe0>
 800bf28:	f000 fd6a 	bl	800ca00 <UART_SetConfig+0xbb4>
 800bf2c:	2b06      	cmp	r3, #6
 800bf2e:	d101      	bne.n	800bf34 <UART_SetConfig+0xe8>
 800bf30:	f000 fd68 	bl	800ca04 <UART_SetConfig+0xbb8>
 800bf34:	2b07      	cmp	r3, #7
 800bf36:	d101      	bne.n	800bf3c <UART_SetConfig+0xf0>
 800bf38:	f000 fd66 	bl	800ca08 <UART_SetConfig+0xbbc>
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d101      	bne.n	800bf44 <UART_SetConfig+0xf8>
 800bf40:	f000 fd65 	bl	800ca0e <UART_SetConfig+0xbc2>
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d101      	bne.n	800bf4c <UART_SetConfig+0x100>
 800bf48:	f000 fd64 	bl	800ca14 <UART_SetConfig+0xbc8>
 800bf4c:	2b0a      	cmp	r3, #10
 800bf4e:	d101      	bne.n	800bf54 <UART_SetConfig+0x108>
 800bf50:	f000 fd63 	bl	800ca1a <UART_SetConfig+0xbce>
 800bf54:	2b0b      	cmp	r3, #11
 800bf56:	d101      	bne.n	800bf5c <UART_SetConfig+0x110>
 800bf58:	f000 fd39 	bl	800c9ce <UART_SetConfig+0xb82>
 800bf5c:	2380      	movs	r3, #128	; 0x80
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	f000 fd39 	bl	800c9d6 <UART_SetConfig+0xb8a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf64:	4a85      	ldr	r2, [pc, #532]	; (800c17c <UART_SetConfig+0x330>)
 800bf66:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800bf68:	2203      	movs	r2, #3
 800bf6a:	400a      	ands	r2, r1
 800bf6c:	2a01      	cmp	r2, #1
 800bf6e:	d009      	beq.n	800bf84 <UART_SetConfig+0x138>
 800bf70:	2a00      	cmp	r2, #0
 800bf72:	d005      	beq.n	800bf80 <UART_SetConfig+0x134>
 800bf74:	2a02      	cmp	r2, #2
 800bf76:	d03a      	beq.n	800bfee <UART_SetConfig+0x1a2>
 800bf78:	2a03      	cmp	r2, #3
 800bf7a:	d005      	beq.n	800bf88 <UART_SetConfig+0x13c>
 800bf7c:	2510      	movs	r5, #16
 800bf7e:	e7a3      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bf80:	2500      	movs	r5, #0
 800bf82:	e7a1      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bf84:	2504      	movs	r5, #4
 800bf86:	e79f      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bf88:	2508      	movs	r5, #8
 800bf8a:	e79d      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bf8c:	4a7b      	ldr	r2, [pc, #492]	; (800c17c <UART_SetConfig+0x330>)
 800bf8e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800bf90:	220c      	movs	r2, #12
 800bf92:	400a      	ands	r2, r1
 800bf94:	2a04      	cmp	r2, #4
 800bf96:	d00a      	beq.n	800bfae <UART_SetConfig+0x162>
 800bf98:	d905      	bls.n	800bfa6 <UART_SetConfig+0x15a>
 800bf9a:	2a08      	cmp	r2, #8
 800bf9c:	d029      	beq.n	800bff2 <UART_SetConfig+0x1a6>
 800bf9e:	2a0c      	cmp	r2, #12
 800bfa0:	d107      	bne.n	800bfb2 <UART_SetConfig+0x166>
 800bfa2:	2508      	movs	r5, #8
 800bfa4:	e790      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	d103      	bne.n	800bfb2 <UART_SetConfig+0x166>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	e78c      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfae:	2504      	movs	r5, #4
 800bfb0:	e78a      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfb2:	2510      	movs	r5, #16
 800bfb4:	e788      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfb6:	4a71      	ldr	r2, [pc, #452]	; (800c17c <UART_SetConfig+0x330>)
 800bfb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bfba:	21c0      	movs	r1, #192	; 0xc0
 800bfbc:	0109      	lsls	r1, r1, #4
 800bfbe:	400a      	ands	r2, r1
 800bfc0:	2180      	movs	r1, #128	; 0x80
 800bfc2:	00c9      	lsls	r1, r1, #3
 800bfc4:	428a      	cmp	r2, r1
 800bfc6:	d00e      	beq.n	800bfe6 <UART_SetConfig+0x19a>
 800bfc8:	d909      	bls.n	800bfde <UART_SetConfig+0x192>
 800bfca:	2180      	movs	r1, #128	; 0x80
 800bfcc:	0109      	lsls	r1, r1, #4
 800bfce:	428a      	cmp	r2, r1
 800bfd0:	d015      	beq.n	800bffe <UART_SetConfig+0x1b2>
 800bfd2:	21c0      	movs	r1, #192	; 0xc0
 800bfd4:	0109      	lsls	r1, r1, #4
 800bfd6:	428a      	cmp	r2, r1
 800bfd8:	d107      	bne.n	800bfea <UART_SetConfig+0x19e>
 800bfda:	2508      	movs	r5, #8
 800bfdc:	e774      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfde:	2a00      	cmp	r2, #0
 800bfe0:	d103      	bne.n	800bfea <UART_SetConfig+0x19e>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	e770      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfe6:	2504      	movs	r5, #4
 800bfe8:	e76e      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfea:	2510      	movs	r5, #16
 800bfec:	e76c      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bfee:	2502      	movs	r5, #2
 800bff0:	e76a      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bff2:	2502      	movs	r5, #2
 800bff4:	e768      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bff6:	2500      	movs	r5, #0
 800bff8:	e766      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bffa:	2500      	movs	r5, #0
 800bffc:	e764      	b.n	800bec8 <UART_SetConfig+0x7c>
 800bffe:	2502      	movs	r5, #2
 800c000:	e762      	b.n	800bec8 <UART_SetConfig+0x7c>
    switch (clocksource)
 800c002:	2d02      	cmp	r5, #2
 800c004:	d100      	bne.n	800c008 <UART_SetConfig+0x1bc>
 800c006:	e0c1      	b.n	800c18c <UART_SetConfig+0x340>
 800c008:	d92e      	bls.n	800c068 <UART_SetConfig+0x21c>
 800c00a:	2d04      	cmp	r5, #4
 800c00c:	d100      	bne.n	800c010 <UART_SetConfig+0x1c4>
 800c00e:	e0da      	b.n	800c1c6 <UART_SetConfig+0x37a>
 800c010:	2d08      	cmp	r5, #8
 800c012:	d001      	beq.n	800c018 <UART_SetConfig+0x1cc>
 800c014:	f000 fd07 	bl	800ca26 <UART_SetConfig+0xbda>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d100      	bne.n	800c020 <UART_SetConfig+0x1d4>
 800c01e:	e122      	b.n	800c266 <UART_SetConfig+0x41a>
 800c020:	2b01      	cmp	r3, #1
 800c022:	d100      	bne.n	800c026 <UART_SetConfig+0x1da>
 800c024:	e122      	b.n	800c26c <UART_SetConfig+0x420>
 800c026:	2b02      	cmp	r3, #2
 800c028:	d100      	bne.n	800c02c <UART_SetConfig+0x1e0>
 800c02a:	e122      	b.n	800c272 <UART_SetConfig+0x426>
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d100      	bne.n	800c032 <UART_SetConfig+0x1e6>
 800c030:	e122      	b.n	800c278 <UART_SetConfig+0x42c>
 800c032:	2b04      	cmp	r3, #4
 800c034:	d100      	bne.n	800c038 <UART_SetConfig+0x1ec>
 800c036:	e121      	b.n	800c27c <UART_SetConfig+0x430>
 800c038:	2b05      	cmp	r3, #5
 800c03a:	d100      	bne.n	800c03e <UART_SetConfig+0x1f2>
 800c03c:	e121      	b.n	800c282 <UART_SetConfig+0x436>
 800c03e:	2b06      	cmp	r3, #6
 800c040:	d100      	bne.n	800c044 <UART_SetConfig+0x1f8>
 800c042:	e120      	b.n	800c286 <UART_SetConfig+0x43a>
 800c044:	2b07      	cmp	r3, #7
 800c046:	d100      	bne.n	800c04a <UART_SetConfig+0x1fe>
 800c048:	e11f      	b.n	800c28a <UART_SetConfig+0x43e>
 800c04a:	2b08      	cmp	r3, #8
 800c04c:	d100      	bne.n	800c050 <UART_SetConfig+0x204>
 800c04e:	e11f      	b.n	800c290 <UART_SetConfig+0x444>
 800c050:	2b09      	cmp	r3, #9
 800c052:	d100      	bne.n	800c056 <UART_SetConfig+0x20a>
 800c054:	e11f      	b.n	800c296 <UART_SetConfig+0x44a>
 800c056:	2b0a      	cmp	r3, #10
 800c058:	d100      	bne.n	800c05c <UART_SetConfig+0x210>
 800c05a:	e11f      	b.n	800c29c <UART_SetConfig+0x450>
 800c05c:	2b0b      	cmp	r3, #11
 800c05e:	d100      	bne.n	800c062 <UART_SetConfig+0x216>
 800c060:	e0e9      	b.n	800c236 <UART_SetConfig+0x3ea>
 800c062:	2080      	movs	r0, #128	; 0x80
 800c064:	0200      	lsls	r0, r0, #8
 800c066:	e026      	b.n	800c0b6 <UART_SetConfig+0x26a>
    switch (clocksource)
 800c068:	2d00      	cmp	r5, #0
 800c06a:	d001      	beq.n	800c070 <UART_SetConfig+0x224>
 800c06c:	f000 fcdb 	bl	800ca26 <UART_SetConfig+0xbda>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c070:	f7ff fe7a 	bl	800bd68 <HAL_RCC_GetPCLK1Freq>
 800c074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01a      	beq.n	800c0b0 <UART_SetConfig+0x264>
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d05f      	beq.n	800c13e <UART_SetConfig+0x2f2>
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d05f      	beq.n	800c142 <UART_SetConfig+0x2f6>
 800c082:	2b03      	cmp	r3, #3
 800c084:	d05f      	beq.n	800c146 <UART_SetConfig+0x2fa>
 800c086:	2b04      	cmp	r3, #4
 800c088:	d05f      	beq.n	800c14a <UART_SetConfig+0x2fe>
 800c08a:	2b05      	cmp	r3, #5
 800c08c:	d05f      	beq.n	800c14e <UART_SetConfig+0x302>
 800c08e:	2b06      	cmp	r3, #6
 800c090:	d05f      	beq.n	800c152 <UART_SetConfig+0x306>
 800c092:	2b07      	cmp	r3, #7
 800c094:	d05f      	beq.n	800c156 <UART_SetConfig+0x30a>
 800c096:	2b08      	cmp	r3, #8
 800c098:	d072      	beq.n	800c180 <UART_SetConfig+0x334>
 800c09a:	2b09      	cmp	r3, #9
 800c09c:	d072      	beq.n	800c184 <UART_SetConfig+0x338>
 800c09e:	2b0a      	cmp	r3, #10
 800c0a0:	d072      	beq.n	800c188 <UART_SetConfig+0x33c>
 800c0a2:	2b0b      	cmp	r3, #11
 800c0a4:	d001      	beq.n	800c0aa <UART_SetConfig+0x25e>
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	e003      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c0aa:	2180      	movs	r1, #128	; 0x80
 800c0ac:	0049      	lsls	r1, r1, #1
 800c0ae:	e000      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	f004 ff61 	bl	8010f78 <__udivsi3>
    if (lpuart_ker_ck_pres != 0U)
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d101      	bne.n	800c0be <UART_SetConfig+0x272>
 800c0ba:	f000 fcb6 	bl	800ca2a <UART_SetConfig+0xbde>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0be:	6862      	ldr	r2, [r4, #4]
 800c0c0:	0053      	lsls	r3, r2, #1
 800c0c2:	189b      	adds	r3, r3, r2
 800c0c4:	4283      	cmp	r3, r0
 800c0c6:	d901      	bls.n	800c0cc <UART_SetConfig+0x280>
 800c0c8:	f000 fcb1 	bl	800ca2e <UART_SetConfig+0xbe2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0cc:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0ce:	4283      	cmp	r3, r0
 800c0d0:	d201      	bcs.n	800c0d6 <UART_SetConfig+0x28a>
 800c0d2:	f000 fcae 	bl	800ca32 <UART_SetConfig+0xbe6>
        switch (clocksource)
 800c0d6:	2d02      	cmp	r5, #2
 800c0d8:	d100      	bne.n	800c0dc <UART_SetConfig+0x290>
 800c0da:	e142      	b.n	800c362 <UART_SetConfig+0x516>
 800c0dc:	d800      	bhi.n	800c0e0 <UART_SetConfig+0x294>
 800c0de:	e0e0      	b.n	800c2a2 <UART_SetConfig+0x456>
 800c0e0:	2d04      	cmp	r5, #4
 800c0e2:	d100      	bne.n	800c0e6 <UART_SetConfig+0x29a>
 800c0e4:	e186      	b.n	800c3f4 <UART_SetConfig+0x5a8>
 800c0e6:	2d08      	cmp	r5, #8
 800c0e8:	d000      	beq.n	800c0ec <UART_SetConfig+0x2a0>
 800c0ea:	e246      	b.n	800c57a <UART_SetConfig+0x72e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d100      	bne.n	800c0f4 <UART_SetConfig+0x2a8>
 800c0f2:	e210      	b.n	800c516 <UART_SetConfig+0x6ca>
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d100      	bne.n	800c0fa <UART_SetConfig+0x2ae>
 800c0f8:	e21a      	b.n	800c530 <UART_SetConfig+0x6e4>
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d100      	bne.n	800c100 <UART_SetConfig+0x2b4>
 800c0fe:	e21b      	b.n	800c538 <UART_SetConfig+0x6ec>
 800c100:	2b03      	cmp	r3, #3
 800c102:	d100      	bne.n	800c106 <UART_SetConfig+0x2ba>
 800c104:	e21c      	b.n	800c540 <UART_SetConfig+0x6f4>
 800c106:	2b04      	cmp	r3, #4
 800c108:	d100      	bne.n	800c10c <UART_SetConfig+0x2c0>
 800c10a:	e21c      	b.n	800c546 <UART_SetConfig+0x6fa>
 800c10c:	2b05      	cmp	r3, #5
 800c10e:	d100      	bne.n	800c112 <UART_SetConfig+0x2c6>
 800c110:	e21d      	b.n	800c54e <UART_SetConfig+0x702>
 800c112:	2b06      	cmp	r3, #6
 800c114:	d100      	bne.n	800c118 <UART_SetConfig+0x2cc>
 800c116:	e21d      	b.n	800c554 <UART_SetConfig+0x708>
 800c118:	2b07      	cmp	r3, #7
 800c11a:	d100      	bne.n	800c11e <UART_SetConfig+0x2d2>
 800c11c:	e21d      	b.n	800c55a <UART_SetConfig+0x70e>
 800c11e:	2b08      	cmp	r3, #8
 800c120:	d100      	bne.n	800c124 <UART_SetConfig+0x2d8>
 800c122:	e21e      	b.n	800c562 <UART_SetConfig+0x716>
 800c124:	2b09      	cmp	r3, #9
 800c126:	d100      	bne.n	800c12a <UART_SetConfig+0x2de>
 800c128:	e21f      	b.n	800c56a <UART_SetConfig+0x71e>
 800c12a:	2b0a      	cmp	r3, #10
 800c12c:	d100      	bne.n	800c130 <UART_SetConfig+0x2e4>
 800c12e:	e220      	b.n	800c572 <UART_SetConfig+0x726>
 800c130:	2b0b      	cmp	r3, #11
 800c132:	d100      	bne.n	800c136 <UART_SetConfig+0x2ea>
 800c134:	e1eb      	b.n	800c50e <UART_SetConfig+0x6c2>
 800c136:	2680      	movs	r6, #128	; 0x80
 800c138:	0436      	lsls	r6, r6, #16
 800c13a:	2700      	movs	r7, #0
 800c13c:	e1ee      	b.n	800c51c <UART_SetConfig+0x6d0>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c13e:	2102      	movs	r1, #2
 800c140:	e7b7      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c142:	2104      	movs	r1, #4
 800c144:	e7b5      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c146:	2106      	movs	r1, #6
 800c148:	e7b3      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c14a:	2108      	movs	r1, #8
 800c14c:	e7b1      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c14e:	210a      	movs	r1, #10
 800c150:	e7af      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c152:	210c      	movs	r1, #12
 800c154:	e7ad      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c156:	2110      	movs	r1, #16
 800c158:	e7ab      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	cfff69f3 	.word	0xcfff69f3
 800c160:	ffffcfff 	.word	0xffffcfff
 800c164:	40008000 	.word	0x40008000
 800c168:	11fff4ff 	.word	0x11fff4ff
 800c16c:	40013800 	.word	0x40013800
 800c170:	40004400 	.word	0x40004400
 800c174:	40004800 	.word	0x40004800
 800c178:	40004c00 	.word	0x40004c00
 800c17c:	40021000 	.word	0x40021000
 800c180:	2120      	movs	r1, #32
 800c182:	e796      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c184:	2140      	movs	r1, #64	; 0x40
 800c186:	e794      	b.n	800c0b2 <UART_SetConfig+0x266>
 800c188:	2180      	movs	r1, #128	; 0x80
 800c18a:	e792      	b.n	800c0b2 <UART_SetConfig+0x266>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d053      	beq.n	800c23a <UART_SetConfig+0x3ee>
 800c192:	2b01      	cmp	r3, #1
 800c194:	d053      	beq.n	800c23e <UART_SetConfig+0x3f2>
 800c196:	2b02      	cmp	r3, #2
 800c198:	d053      	beq.n	800c242 <UART_SetConfig+0x3f6>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d053      	beq.n	800c246 <UART_SetConfig+0x3fa>
 800c19e:	2b04      	cmp	r3, #4
 800c1a0:	d053      	beq.n	800c24a <UART_SetConfig+0x3fe>
 800c1a2:	2b05      	cmp	r3, #5
 800c1a4:	d053      	beq.n	800c24e <UART_SetConfig+0x402>
 800c1a6:	2b06      	cmp	r3, #6
 800c1a8:	d053      	beq.n	800c252 <UART_SetConfig+0x406>
 800c1aa:	2b07      	cmp	r3, #7
 800c1ac:	d053      	beq.n	800c256 <UART_SetConfig+0x40a>
 800c1ae:	2b08      	cmp	r3, #8
 800c1b0:	d053      	beq.n	800c25a <UART_SetConfig+0x40e>
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	d053      	beq.n	800c25e <UART_SetConfig+0x412>
 800c1b6:	2b0a      	cmp	r3, #10
 800c1b8:	d053      	beq.n	800c262 <UART_SetConfig+0x416>
 800c1ba:	2b0b      	cmp	r3, #11
 800c1bc:	d001      	beq.n	800c1c2 <UART_SetConfig+0x376>
 800c1be:	48aa      	ldr	r0, [pc, #680]	; (800c468 <UART_SetConfig+0x61c>)
 800c1c0:	e779      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c1c2:	48aa      	ldr	r0, [pc, #680]	; (800c46c <UART_SetConfig+0x620>)
 800c1c4:	e777      	b.n	800c0b6 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c1c6:	f7ff fde3 	bl	800bd90 <HAL_RCC_GetSysClockFreq>
 800c1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01a      	beq.n	800c206 <UART_SetConfig+0x3ba>
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d01c      	beq.n	800c20e <UART_SetConfig+0x3c2>
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d01c      	beq.n	800c212 <UART_SetConfig+0x3c6>
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d01c      	beq.n	800c216 <UART_SetConfig+0x3ca>
 800c1dc:	2b04      	cmp	r3, #4
 800c1de:	d01c      	beq.n	800c21a <UART_SetConfig+0x3ce>
 800c1e0:	2b05      	cmp	r3, #5
 800c1e2:	d01c      	beq.n	800c21e <UART_SetConfig+0x3d2>
 800c1e4:	2b06      	cmp	r3, #6
 800c1e6:	d01c      	beq.n	800c222 <UART_SetConfig+0x3d6>
 800c1e8:	2b07      	cmp	r3, #7
 800c1ea:	d01c      	beq.n	800c226 <UART_SetConfig+0x3da>
 800c1ec:	2b08      	cmp	r3, #8
 800c1ee:	d01c      	beq.n	800c22a <UART_SetConfig+0x3de>
 800c1f0:	2b09      	cmp	r3, #9
 800c1f2:	d01c      	beq.n	800c22e <UART_SetConfig+0x3e2>
 800c1f4:	2b0a      	cmp	r3, #10
 800c1f6:	d01c      	beq.n	800c232 <UART_SetConfig+0x3e6>
 800c1f8:	2b0b      	cmp	r3, #11
 800c1fa:	d001      	beq.n	800c200 <UART_SetConfig+0x3b4>
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	e003      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c200:	2180      	movs	r1, #128	; 0x80
 800c202:	0049      	lsls	r1, r1, #1
 800c204:	e000      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c206:	2101      	movs	r1, #1
 800c208:	f004 feb6 	bl	8010f78 <__udivsi3>
 800c20c:	e753      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c20e:	2102      	movs	r1, #2
 800c210:	e7fa      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c212:	2104      	movs	r1, #4
 800c214:	e7f8      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c216:	2106      	movs	r1, #6
 800c218:	e7f6      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c21a:	2108      	movs	r1, #8
 800c21c:	e7f4      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c21e:	210a      	movs	r1, #10
 800c220:	e7f2      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c222:	210c      	movs	r1, #12
 800c224:	e7f0      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c226:	2110      	movs	r1, #16
 800c228:	e7ee      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c22a:	2120      	movs	r1, #32
 800c22c:	e7ec      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c22e:	2140      	movs	r1, #64	; 0x40
 800c230:	e7ea      	b.n	800c208 <UART_SetConfig+0x3bc>
 800c232:	2180      	movs	r1, #128	; 0x80
 800c234:	e7e8      	b.n	800c208 <UART_SetConfig+0x3bc>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c236:	2080      	movs	r0, #128	; 0x80
 800c238:	e73d      	b.n	800c0b6 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c23a:	488b      	ldr	r0, [pc, #556]	; (800c468 <UART_SetConfig+0x61c>)
 800c23c:	e73b      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c23e:	488c      	ldr	r0, [pc, #560]	; (800c470 <UART_SetConfig+0x624>)
 800c240:	e739      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c242:	488c      	ldr	r0, [pc, #560]	; (800c474 <UART_SetConfig+0x628>)
 800c244:	e737      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c246:	488c      	ldr	r0, [pc, #560]	; (800c478 <UART_SetConfig+0x62c>)
 800c248:	e735      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c24a:	488c      	ldr	r0, [pc, #560]	; (800c47c <UART_SetConfig+0x630>)
 800c24c:	e733      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c24e:	488c      	ldr	r0, [pc, #560]	; (800c480 <UART_SetConfig+0x634>)
 800c250:	e731      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c252:	488c      	ldr	r0, [pc, #560]	; (800c484 <UART_SetConfig+0x638>)
 800c254:	e72f      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c256:	488c      	ldr	r0, [pc, #560]	; (800c488 <UART_SetConfig+0x63c>)
 800c258:	e72d      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c25a:	488c      	ldr	r0, [pc, #560]	; (800c48c <UART_SetConfig+0x640>)
 800c25c:	e72b      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c25e:	488c      	ldr	r0, [pc, #560]	; (800c490 <UART_SetConfig+0x644>)
 800c260:	e729      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c262:	488c      	ldr	r0, [pc, #560]	; (800c494 <UART_SetConfig+0x648>)
 800c264:	e727      	b.n	800c0b6 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c266:	2080      	movs	r0, #128	; 0x80
 800c268:	0200      	lsls	r0, r0, #8
 800c26a:	e724      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c26c:	2080      	movs	r0, #128	; 0x80
 800c26e:	01c0      	lsls	r0, r0, #7
 800c270:	e721      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c272:	2080      	movs	r0, #128	; 0x80
 800c274:	0180      	lsls	r0, r0, #6
 800c276:	e71e      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c278:	4887      	ldr	r0, [pc, #540]	; (800c498 <UART_SetConfig+0x64c>)
 800c27a:	e71c      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c27c:	2080      	movs	r0, #128	; 0x80
 800c27e:	0140      	lsls	r0, r0, #5
 800c280:	e719      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c282:	4886      	ldr	r0, [pc, #536]	; (800c49c <UART_SetConfig+0x650>)
 800c284:	e717      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c286:	4886      	ldr	r0, [pc, #536]	; (800c4a0 <UART_SetConfig+0x654>)
 800c288:	e715      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c28a:	2080      	movs	r0, #128	; 0x80
 800c28c:	0100      	lsls	r0, r0, #4
 800c28e:	e712      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c290:	2080      	movs	r0, #128	; 0x80
 800c292:	00c0      	lsls	r0, r0, #3
 800c294:	e70f      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c296:	2080      	movs	r0, #128	; 0x80
 800c298:	0080      	lsls	r0, r0, #2
 800c29a:	e70c      	b.n	800c0b6 <UART_SetConfig+0x26a>
 800c29c:	2080      	movs	r0, #128	; 0x80
 800c29e:	0040      	lsls	r0, r0, #1
 800c2a0:	e709      	b.n	800c0b6 <UART_SetConfig+0x26a>
        switch (clocksource)
 800c2a2:	2d00      	cmp	r5, #0
 800c2a4:	d000      	beq.n	800c2a8 <UART_SetConfig+0x45c>
 800c2a6:	e168      	b.n	800c57a <UART_SetConfig+0x72e>
            pclk = HAL_RCC_GetPCLK1Freq();
 800c2a8:	f7ff fd5e 	bl	800bd68 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01c      	beq.n	800c2ec <UART_SetConfig+0x4a0>
 800c2b2:	2b01      	cmp	r3, #1
 800c2b4:	d037      	beq.n	800c326 <UART_SetConfig+0x4da>
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d038      	beq.n	800c32c <UART_SetConfig+0x4e0>
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d039      	beq.n	800c332 <UART_SetConfig+0x4e6>
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	d03a      	beq.n	800c338 <UART_SetConfig+0x4ec>
 800c2c2:	2b05      	cmp	r3, #5
 800c2c4:	d03b      	beq.n	800c33e <UART_SetConfig+0x4f2>
 800c2c6:	2b06      	cmp	r3, #6
 800c2c8:	d03c      	beq.n	800c344 <UART_SetConfig+0x4f8>
 800c2ca:	2b07      	cmp	r3, #7
 800c2cc:	d03d      	beq.n	800c34a <UART_SetConfig+0x4fe>
 800c2ce:	2b08      	cmp	r3, #8
 800c2d0:	d03e      	beq.n	800c350 <UART_SetConfig+0x504>
 800c2d2:	2b09      	cmp	r3, #9
 800c2d4:	d03f      	beq.n	800c356 <UART_SetConfig+0x50a>
 800c2d6:	2b0a      	cmp	r3, #10
 800c2d8:	d040      	beq.n	800c35c <UART_SetConfig+0x510>
 800c2da:	2b0b      	cmp	r3, #11
 800c2dc:	d002      	beq.n	800c2e4 <UART_SetConfig+0x498>
 800c2de:	2201      	movs	r2, #1
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	e005      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c2e4:	2280      	movs	r2, #128	; 0x80
 800c2e6:	0052      	lsls	r2, r2, #1
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	e001      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	6865      	ldr	r5, [r4, #4]
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	f005 f82e 	bl	8011354 <__aeabi_uldivmod>
 800c2f8:	0e06      	lsrs	r6, r0, #24
 800c2fa:	020b      	lsls	r3, r1, #8
 800c2fc:	4333      	orrs	r3, r6
 800c2fe:	0202      	lsls	r2, r0, #8
 800c300:	0868      	lsrs	r0, r5, #1
 800c302:	2100      	movs	r1, #0
 800c304:	1880      	adds	r0, r0, r2
 800c306:	4159      	adcs	r1, r3
 800c308:	002a      	movs	r2, r5
 800c30a:	2300      	movs	r3, #0
 800c30c:	f005 f822 	bl	8011354 <__aeabi_uldivmod>
 800c310:	0002      	movs	r2, r0
 800c312:	2000      	movs	r0, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c314:	4963      	ldr	r1, [pc, #396]	; (800c4a4 <UART_SetConfig+0x658>)
 800c316:	4b64      	ldr	r3, [pc, #400]	; (800c4a8 <UART_SetConfig+0x65c>)
 800c318:	18d3      	adds	r3, r2, r3
 800c31a:	428b      	cmp	r3, r1
 800c31c:	d900      	bls.n	800c320 <UART_SetConfig+0x4d4>
 800c31e:	e38a      	b.n	800ca36 <UART_SetConfig+0xbea>
          huart->Instance->BRR = usartdiv;
 800c320:	6823      	ldr	r3, [r4, #0]
 800c322:	60da      	str	r2, [r3, #12]
 800c324:	e2b9      	b.n	800c89a <UART_SetConfig+0xa4e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c326:	2202      	movs	r2, #2
 800c328:	2300      	movs	r3, #0
 800c32a:	e7e1      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c32c:	2204      	movs	r2, #4
 800c32e:	2300      	movs	r3, #0
 800c330:	e7de      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c332:	2206      	movs	r2, #6
 800c334:	2300      	movs	r3, #0
 800c336:	e7db      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c338:	2208      	movs	r2, #8
 800c33a:	2300      	movs	r3, #0
 800c33c:	e7d8      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c33e:	220a      	movs	r2, #10
 800c340:	2300      	movs	r3, #0
 800c342:	e7d5      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c344:	220c      	movs	r2, #12
 800c346:	2300      	movs	r3, #0
 800c348:	e7d2      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c34a:	2210      	movs	r2, #16
 800c34c:	2300      	movs	r3, #0
 800c34e:	e7cf      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c350:	2220      	movs	r2, #32
 800c352:	2300      	movs	r3, #0
 800c354:	e7cc      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c356:	2240      	movs	r2, #64	; 0x40
 800c358:	2300      	movs	r3, #0
 800c35a:	e7c9      	b.n	800c2f0 <UART_SetConfig+0x4a4>
 800c35c:	2280      	movs	r2, #128	; 0x80
 800c35e:	2300      	movs	r3, #0
 800c360:	e7c6      	b.n	800c2f0 <UART_SetConfig+0x4a4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c364:	2b00      	cmp	r3, #0
 800c366:	d01b      	beq.n	800c3a0 <UART_SetConfig+0x554>
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d025      	beq.n	800c3b8 <UART_SetConfig+0x56c>
 800c36c:	2b02      	cmp	r3, #2
 800c36e:	d026      	beq.n	800c3be <UART_SetConfig+0x572>
 800c370:	2b03      	cmp	r3, #3
 800c372:	d027      	beq.n	800c3c4 <UART_SetConfig+0x578>
 800c374:	2b04      	cmp	r3, #4
 800c376:	d028      	beq.n	800c3ca <UART_SetConfig+0x57e>
 800c378:	2b05      	cmp	r3, #5
 800c37a:	d029      	beq.n	800c3d0 <UART_SetConfig+0x584>
 800c37c:	2b06      	cmp	r3, #6
 800c37e:	d02a      	beq.n	800c3d6 <UART_SetConfig+0x58a>
 800c380:	2b07      	cmp	r3, #7
 800c382:	d02b      	beq.n	800c3dc <UART_SetConfig+0x590>
 800c384:	2b08      	cmp	r3, #8
 800c386:	d02c      	beq.n	800c3e2 <UART_SetConfig+0x596>
 800c388:	2b09      	cmp	r3, #9
 800c38a:	d02d      	beq.n	800c3e8 <UART_SetConfig+0x59c>
 800c38c:	2b0a      	cmp	r3, #10
 800c38e:	d02e      	beq.n	800c3ee <UART_SetConfig+0x5a2>
 800c390:	2b0b      	cmp	r3, #11
 800c392:	d002      	beq.n	800c39a <UART_SetConfig+0x54e>
 800c394:	4e45      	ldr	r6, [pc, #276]	; (800c4ac <UART_SetConfig+0x660>)
 800c396:	2700      	movs	r7, #0
 800c398:	e004      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c39a:	4e33      	ldr	r6, [pc, #204]	; (800c468 <UART_SetConfig+0x61c>)
 800c39c:	2700      	movs	r7, #0
 800c39e:	e001      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3a0:	4e42      	ldr	r6, [pc, #264]	; (800c4ac <UART_SetConfig+0x660>)
 800c3a2:	2700      	movs	r7, #0
 800c3a4:	0850      	lsrs	r0, r2, #1
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	1980      	adds	r0, r0, r6
 800c3aa:	4179      	adcs	r1, r7
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f004 ffd1 	bl	8011354 <__aeabi_uldivmod>
 800c3b2:	0002      	movs	r2, r0
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e7ad      	b.n	800c314 <UART_SetConfig+0x4c8>
 800c3b8:	4e3d      	ldr	r6, [pc, #244]	; (800c4b0 <UART_SetConfig+0x664>)
 800c3ba:	2700      	movs	r7, #0
 800c3bc:	e7f2      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3be:	4e3d      	ldr	r6, [pc, #244]	; (800c4b4 <UART_SetConfig+0x668>)
 800c3c0:	2700      	movs	r7, #0
 800c3c2:	e7ef      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3c4:	4e3c      	ldr	r6, [pc, #240]	; (800c4b8 <UART_SetConfig+0x66c>)
 800c3c6:	2700      	movs	r7, #0
 800c3c8:	e7ec      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3ca:	4e3c      	ldr	r6, [pc, #240]	; (800c4bc <UART_SetConfig+0x670>)
 800c3cc:	2700      	movs	r7, #0
 800c3ce:	e7e9      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3d0:	4e3b      	ldr	r6, [pc, #236]	; (800c4c0 <UART_SetConfig+0x674>)
 800c3d2:	2700      	movs	r7, #0
 800c3d4:	e7e6      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3d6:	4e3b      	ldr	r6, [pc, #236]	; (800c4c4 <UART_SetConfig+0x678>)
 800c3d8:	2700      	movs	r7, #0
 800c3da:	e7e3      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3dc:	4e3a      	ldr	r6, [pc, #232]	; (800c4c8 <UART_SetConfig+0x67c>)
 800c3de:	2700      	movs	r7, #0
 800c3e0:	e7e0      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3e2:	4e3a      	ldr	r6, [pc, #232]	; (800c4cc <UART_SetConfig+0x680>)
 800c3e4:	2700      	movs	r7, #0
 800c3e6:	e7dd      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3e8:	4e39      	ldr	r6, [pc, #228]	; (800c4d0 <UART_SetConfig+0x684>)
 800c3ea:	2700      	movs	r7, #0
 800c3ec:	e7da      	b.n	800c3a4 <UART_SetConfig+0x558>
 800c3ee:	4e39      	ldr	r6, [pc, #228]	; (800c4d4 <UART_SetConfig+0x688>)
 800c3f0:	2700      	movs	r7, #0
 800c3f2:	e7d7      	b.n	800c3a4 <UART_SetConfig+0x558>
            pclk = HAL_RCC_GetSysClockFreq();
 800c3f4:	f7ff fccc 	bl	800bd90 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01c      	beq.n	800c438 <UART_SetConfig+0x5ec>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d02f      	beq.n	800c462 <UART_SetConfig+0x616>
 800c402:	2b02      	cmp	r3, #2
 800c404:	d068      	beq.n	800c4d8 <UART_SetConfig+0x68c>
 800c406:	2b03      	cmp	r3, #3
 800c408:	d069      	beq.n	800c4de <UART_SetConfig+0x692>
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d06a      	beq.n	800c4e4 <UART_SetConfig+0x698>
 800c40e:	2b05      	cmp	r3, #5
 800c410:	d06b      	beq.n	800c4ea <UART_SetConfig+0x69e>
 800c412:	2b06      	cmp	r3, #6
 800c414:	d06c      	beq.n	800c4f0 <UART_SetConfig+0x6a4>
 800c416:	2b07      	cmp	r3, #7
 800c418:	d06d      	beq.n	800c4f6 <UART_SetConfig+0x6aa>
 800c41a:	2b08      	cmp	r3, #8
 800c41c:	d06e      	beq.n	800c4fc <UART_SetConfig+0x6b0>
 800c41e:	2b09      	cmp	r3, #9
 800c420:	d06f      	beq.n	800c502 <UART_SetConfig+0x6b6>
 800c422:	2b0a      	cmp	r3, #10
 800c424:	d070      	beq.n	800c508 <UART_SetConfig+0x6bc>
 800c426:	2b0b      	cmp	r3, #11
 800c428:	d002      	beq.n	800c430 <UART_SetConfig+0x5e4>
 800c42a:	2201      	movs	r2, #1
 800c42c:	2300      	movs	r3, #0
 800c42e:	e005      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c430:	2280      	movs	r2, #128	; 0x80
 800c432:	0052      	lsls	r2, r2, #1
 800c434:	2300      	movs	r3, #0
 800c436:	e001      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c438:	2201      	movs	r2, #1
 800c43a:	2300      	movs	r3, #0
 800c43c:	6865      	ldr	r5, [r4, #4]
 800c43e:	2100      	movs	r1, #0
 800c440:	f004 ff88 	bl	8011354 <__aeabi_uldivmod>
 800c444:	0e06      	lsrs	r6, r0, #24
 800c446:	020b      	lsls	r3, r1, #8
 800c448:	4333      	orrs	r3, r6
 800c44a:	0202      	lsls	r2, r0, #8
 800c44c:	0868      	lsrs	r0, r5, #1
 800c44e:	2100      	movs	r1, #0
 800c450:	1880      	adds	r0, r0, r2
 800c452:	4159      	adcs	r1, r3
 800c454:	002a      	movs	r2, r5
 800c456:	2300      	movs	r3, #0
 800c458:	f004 ff7c 	bl	8011354 <__aeabi_uldivmod>
 800c45c:	0002      	movs	r2, r0
 800c45e:	2000      	movs	r0, #0
 800c460:	e758      	b.n	800c314 <UART_SetConfig+0x4c8>
 800c462:	2202      	movs	r2, #2
 800c464:	2300      	movs	r3, #0
 800c466:	e7e9      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c468:	00f42400 	.word	0x00f42400
 800c46c:	0000f424 	.word	0x0000f424
 800c470:	007a1200 	.word	0x007a1200
 800c474:	003d0900 	.word	0x003d0900
 800c478:	0028b0aa 	.word	0x0028b0aa
 800c47c:	001e8480 	.word	0x001e8480
 800c480:	00186a00 	.word	0x00186a00
 800c484:	00145855 	.word	0x00145855
 800c488:	000f4240 	.word	0x000f4240
 800c48c:	0007a120 	.word	0x0007a120
 800c490:	0003d090 	.word	0x0003d090
 800c494:	0001e848 	.word	0x0001e848
 800c498:	00001555 	.word	0x00001555
 800c49c:	00000ccc 	.word	0x00000ccc
 800c4a0:	00000aaa 	.word	0x00000aaa
 800c4a4:	000ffcff 	.word	0x000ffcff
 800c4a8:	fffffd00 	.word	0xfffffd00
 800c4ac:	f4240000 	.word	0xf4240000
 800c4b0:	7a120000 	.word	0x7a120000
 800c4b4:	3d090000 	.word	0x3d090000
 800c4b8:	28b0aa00 	.word	0x28b0aa00
 800c4bc:	1e848000 	.word	0x1e848000
 800c4c0:	186a0000 	.word	0x186a0000
 800c4c4:	14585500 	.word	0x14585500
 800c4c8:	0f424000 	.word	0x0f424000
 800c4cc:	07a12000 	.word	0x07a12000
 800c4d0:	03d09000 	.word	0x03d09000
 800c4d4:	01e84800 	.word	0x01e84800
 800c4d8:	2204      	movs	r2, #4
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e7ae      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4de:	2206      	movs	r2, #6
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e7ab      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e7a8      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4ea:	220a      	movs	r2, #10
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e7a5      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4f0:	220c      	movs	r2, #12
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e7a2      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4f6:	2210      	movs	r2, #16
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	e79f      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	2300      	movs	r3, #0
 800c500:	e79c      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c502:	2240      	movs	r2, #64	; 0x40
 800c504:	2300      	movs	r3, #0
 800c506:	e799      	b.n	800c43c <UART_SetConfig+0x5f0>
 800c508:	2280      	movs	r2, #128	; 0x80
 800c50a:	2300      	movs	r3, #0
 800c50c:	e796      	b.n	800c43c <UART_SetConfig+0x5f0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c50e:	2680      	movs	r6, #128	; 0x80
 800c510:	0236      	lsls	r6, r6, #8
 800c512:	2700      	movs	r7, #0
 800c514:	e002      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c516:	2680      	movs	r6, #128	; 0x80
 800c518:	0436      	lsls	r6, r6, #16
 800c51a:	2700      	movs	r7, #0
 800c51c:	0850      	lsrs	r0, r2, #1
 800c51e:	2100      	movs	r1, #0
 800c520:	1980      	adds	r0, r0, r6
 800c522:	4179      	adcs	r1, r7
 800c524:	2300      	movs	r3, #0
 800c526:	f004 ff15 	bl	8011354 <__aeabi_uldivmod>
 800c52a:	0002      	movs	r2, r0
 800c52c:	2000      	movs	r0, #0
 800c52e:	e6f1      	b.n	800c314 <UART_SetConfig+0x4c8>
 800c530:	2680      	movs	r6, #128	; 0x80
 800c532:	03f6      	lsls	r6, r6, #15
 800c534:	2700      	movs	r7, #0
 800c536:	e7f1      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c538:	2680      	movs	r6, #128	; 0x80
 800c53a:	03b6      	lsls	r6, r6, #14
 800c53c:	2700      	movs	r7, #0
 800c53e:	e7ed      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c540:	4ea7      	ldr	r6, [pc, #668]	; (800c7e0 <UART_SetConfig+0x994>)
 800c542:	2700      	movs	r7, #0
 800c544:	e7ea      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c546:	2680      	movs	r6, #128	; 0x80
 800c548:	0376      	lsls	r6, r6, #13
 800c54a:	2700      	movs	r7, #0
 800c54c:	e7e6      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c54e:	4ea5      	ldr	r6, [pc, #660]	; (800c7e4 <UART_SetConfig+0x998>)
 800c550:	2700      	movs	r7, #0
 800c552:	e7e3      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c554:	4ea4      	ldr	r6, [pc, #656]	; (800c7e8 <UART_SetConfig+0x99c>)
 800c556:	2700      	movs	r7, #0
 800c558:	e7e0      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c55a:	2680      	movs	r6, #128	; 0x80
 800c55c:	0336      	lsls	r6, r6, #12
 800c55e:	2700      	movs	r7, #0
 800c560:	e7dc      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c562:	2680      	movs	r6, #128	; 0x80
 800c564:	02f6      	lsls	r6, r6, #11
 800c566:	2700      	movs	r7, #0
 800c568:	e7d8      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c56a:	2680      	movs	r6, #128	; 0x80
 800c56c:	02b6      	lsls	r6, r6, #10
 800c56e:	2700      	movs	r7, #0
 800c570:	e7d4      	b.n	800c51c <UART_SetConfig+0x6d0>
 800c572:	2680      	movs	r6, #128	; 0x80
 800c574:	0276      	lsls	r6, r6, #9
 800c576:	2700      	movs	r7, #0
 800c578:	e7d0      	b.n	800c51c <UART_SetConfig+0x6d0>
            ret = HAL_ERROR;
 800c57a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c57c:	2200      	movs	r2, #0
 800c57e:	e6c9      	b.n	800c314 <UART_SetConfig+0x4c8>
    switch (clocksource)
 800c580:	2d02      	cmp	r5, #2
 800c582:	d100      	bne.n	800c586 <UART_SetConfig+0x73a>
 800c584:	e082      	b.n	800c68c <UART_SetConfig+0x840>
 800c586:	d92d      	bls.n	800c5e4 <UART_SetConfig+0x798>
 800c588:	2d04      	cmp	r5, #4
 800c58a:	d100      	bne.n	800c58e <UART_SetConfig+0x742>
 800c58c:	e0ba      	b.n	800c704 <UART_SetConfig+0x8b8>
 800c58e:	2d08      	cmp	r5, #8
 800c590:	d000      	beq.n	800c594 <UART_SetConfig+0x748>
 800c592:	e122      	b.n	800c7da <UART_SetConfig+0x98e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	d100      	bne.n	800c59c <UART_SetConfig+0x750>
 800c59a:	e0f7      	b.n	800c78c <UART_SetConfig+0x940>
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d100      	bne.n	800c5a2 <UART_SetConfig+0x756>
 800c5a0:	e100      	b.n	800c7a4 <UART_SetConfig+0x958>
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d100      	bne.n	800c5a8 <UART_SetConfig+0x75c>
 800c5a6:	e100      	b.n	800c7aa <UART_SetConfig+0x95e>
 800c5a8:	2b03      	cmp	r3, #3
 800c5aa:	d100      	bne.n	800c5ae <UART_SetConfig+0x762>
 800c5ac:	e100      	b.n	800c7b0 <UART_SetConfig+0x964>
 800c5ae:	2b04      	cmp	r3, #4
 800c5b0:	d100      	bne.n	800c5b4 <UART_SetConfig+0x768>
 800c5b2:	e0ff      	b.n	800c7b4 <UART_SetConfig+0x968>
 800c5b4:	2b05      	cmp	r3, #5
 800c5b6:	d100      	bne.n	800c5ba <UART_SetConfig+0x76e>
 800c5b8:	e0ff      	b.n	800c7ba <UART_SetConfig+0x96e>
 800c5ba:	2b06      	cmp	r3, #6
 800c5bc:	d100      	bne.n	800c5c0 <UART_SetConfig+0x774>
 800c5be:	e0fe      	b.n	800c7be <UART_SetConfig+0x972>
 800c5c0:	2b07      	cmp	r3, #7
 800c5c2:	d100      	bne.n	800c5c6 <UART_SetConfig+0x77a>
 800c5c4:	e0fd      	b.n	800c7c2 <UART_SetConfig+0x976>
 800c5c6:	2b08      	cmp	r3, #8
 800c5c8:	d100      	bne.n	800c5cc <UART_SetConfig+0x780>
 800c5ca:	e0fd      	b.n	800c7c8 <UART_SetConfig+0x97c>
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d100      	bne.n	800c5d2 <UART_SetConfig+0x786>
 800c5d0:	e0fd      	b.n	800c7ce <UART_SetConfig+0x982>
 800c5d2:	2b0a      	cmp	r3, #10
 800c5d4:	d100      	bne.n	800c5d8 <UART_SetConfig+0x78c>
 800c5d6:	e0fd      	b.n	800c7d4 <UART_SetConfig+0x988>
 800c5d8:	2b0b      	cmp	r3, #11
 800c5da:	d100      	bne.n	800c5de <UART_SetConfig+0x792>
 800c5dc:	e0d4      	b.n	800c788 <UART_SetConfig+0x93c>
 800c5de:	2380      	movs	r3, #128	; 0x80
 800c5e0:	025b      	lsls	r3, r3, #9
 800c5e2:	e0d5      	b.n	800c790 <UART_SetConfig+0x944>
    switch (clocksource)
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	d000      	beq.n	800c5ea <UART_SetConfig+0x79e>
 800c5e8:	e0f7      	b.n	800c7da <UART_SetConfig+0x98e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5ea:	f7ff fbbd 	bl	800bd68 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01a      	beq.n	800c62a <UART_SetConfig+0x7de>
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d035      	beq.n	800c664 <UART_SetConfig+0x818>
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d035      	beq.n	800c668 <UART_SetConfig+0x81c>
 800c5fc:	2b03      	cmp	r3, #3
 800c5fe:	d035      	beq.n	800c66c <UART_SetConfig+0x820>
 800c600:	2b04      	cmp	r3, #4
 800c602:	d035      	beq.n	800c670 <UART_SetConfig+0x824>
 800c604:	2b05      	cmp	r3, #5
 800c606:	d035      	beq.n	800c674 <UART_SetConfig+0x828>
 800c608:	2b06      	cmp	r3, #6
 800c60a:	d035      	beq.n	800c678 <UART_SetConfig+0x82c>
 800c60c:	2b07      	cmp	r3, #7
 800c60e:	d035      	beq.n	800c67c <UART_SetConfig+0x830>
 800c610:	2b08      	cmp	r3, #8
 800c612:	d035      	beq.n	800c680 <UART_SetConfig+0x834>
 800c614:	2b09      	cmp	r3, #9
 800c616:	d035      	beq.n	800c684 <UART_SetConfig+0x838>
 800c618:	2b0a      	cmp	r3, #10
 800c61a:	d035      	beq.n	800c688 <UART_SetConfig+0x83c>
 800c61c:	2b0b      	cmp	r3, #11
 800c61e:	d001      	beq.n	800c624 <UART_SetConfig+0x7d8>
 800c620:	2101      	movs	r1, #1
 800c622:	e003      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c624:	2180      	movs	r1, #128	; 0x80
 800c626:	0049      	lsls	r1, r1, #1
 800c628:	e000      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c62a:	2101      	movs	r1, #1
 800c62c:	6865      	ldr	r5, [r4, #4]
 800c62e:	f004 fca3 	bl	8010f78 <__udivsi3>
 800c632:	0040      	lsls	r0, r0, #1
 800c634:	086b      	lsrs	r3, r5, #1
 800c636:	18c0      	adds	r0, r0, r3
 800c638:	0029      	movs	r1, r5
 800c63a:	f004 fc9d 	bl	8010f78 <__udivsi3>
 800c63e:	0403      	lsls	r3, r0, #16
 800c640:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c642:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c644:	4969      	ldr	r1, [pc, #420]	; (800c7ec <UART_SetConfig+0x9a0>)
 800c646:	001a      	movs	r2, r3
 800c648:	3a10      	subs	r2, #16
 800c64a:	428a      	cmp	r2, r1
 800c64c:	d900      	bls.n	800c650 <UART_SetConfig+0x804>
 800c64e:	e1f4      	b.n	800ca3a <UART_SetConfig+0xbee>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c650:	220f      	movs	r2, #15
 800c652:	0019      	movs	r1, r3
 800c654:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c656:	085b      	lsrs	r3, r3, #1
 800c658:	3a08      	subs	r2, #8
 800c65a:	4013      	ands	r3, r2
 800c65c:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	60d3      	str	r3, [r2, #12]
 800c662:	e11a      	b.n	800c89a <UART_SetConfig+0xa4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c664:	2102      	movs	r1, #2
 800c666:	e7e1      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c668:	2104      	movs	r1, #4
 800c66a:	e7df      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c66c:	2106      	movs	r1, #6
 800c66e:	e7dd      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c670:	2108      	movs	r1, #8
 800c672:	e7db      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c674:	210a      	movs	r1, #10
 800c676:	e7d9      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c678:	210c      	movs	r1, #12
 800c67a:	e7d7      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c67c:	2110      	movs	r1, #16
 800c67e:	e7d5      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c680:	2120      	movs	r1, #32
 800c682:	e7d3      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c684:	2140      	movs	r1, #64	; 0x40
 800c686:	e7d1      	b.n	800c62c <UART_SetConfig+0x7e0>
 800c688:	2180      	movs	r1, #128	; 0x80
 800c68a:	e7cf      	b.n	800c62c <UART_SetConfig+0x7e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c68c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d019      	beq.n	800c6c6 <UART_SetConfig+0x87a>
 800c692:	2b01      	cmp	r3, #1
 800c694:	d022      	beq.n	800c6dc <UART_SetConfig+0x890>
 800c696:	2b02      	cmp	r3, #2
 800c698:	d022      	beq.n	800c6e0 <UART_SetConfig+0x894>
 800c69a:	2b03      	cmp	r3, #3
 800c69c:	d022      	beq.n	800c6e4 <UART_SetConfig+0x898>
 800c69e:	2b04      	cmp	r3, #4
 800c6a0:	d022      	beq.n	800c6e8 <UART_SetConfig+0x89c>
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	d022      	beq.n	800c6ec <UART_SetConfig+0x8a0>
 800c6a6:	2b06      	cmp	r3, #6
 800c6a8:	d022      	beq.n	800c6f0 <UART_SetConfig+0x8a4>
 800c6aa:	2b07      	cmp	r3, #7
 800c6ac:	d022      	beq.n	800c6f4 <UART_SetConfig+0x8a8>
 800c6ae:	2b08      	cmp	r3, #8
 800c6b0:	d022      	beq.n	800c6f8 <UART_SetConfig+0x8ac>
 800c6b2:	2b09      	cmp	r3, #9
 800c6b4:	d022      	beq.n	800c6fc <UART_SetConfig+0x8b0>
 800c6b6:	2b0a      	cmp	r3, #10
 800c6b8:	d022      	beq.n	800c700 <UART_SetConfig+0x8b4>
 800c6ba:	2b0b      	cmp	r3, #11
 800c6bc:	d001      	beq.n	800c6c2 <UART_SetConfig+0x876>
 800c6be:	4b4c      	ldr	r3, [pc, #304]	; (800c7f0 <UART_SetConfig+0x9a4>)
 800c6c0:	e002      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6c2:	4b4c      	ldr	r3, [pc, #304]	; (800c7f4 <UART_SetConfig+0x9a8>)
 800c6c4:	e000      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6c6:	4b4a      	ldr	r3, [pc, #296]	; (800c7f0 <UART_SetConfig+0x9a4>)
 800c6c8:	6862      	ldr	r2, [r4, #4]
 800c6ca:	0850      	lsrs	r0, r2, #1
 800c6cc:	18c0      	adds	r0, r0, r3
 800c6ce:	0011      	movs	r1, r2
 800c6d0:	f004 fc52 	bl	8010f78 <__udivsi3>
 800c6d4:	0403      	lsls	r3, r0, #16
 800c6d6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e7b3      	b.n	800c644 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6dc:	4b46      	ldr	r3, [pc, #280]	; (800c7f8 <UART_SetConfig+0x9ac>)
 800c6de:	e7f3      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6e0:	4b46      	ldr	r3, [pc, #280]	; (800c7fc <UART_SetConfig+0x9b0>)
 800c6e2:	e7f1      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6e4:	4b46      	ldr	r3, [pc, #280]	; (800c800 <UART_SetConfig+0x9b4>)
 800c6e6:	e7ef      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6e8:	4b46      	ldr	r3, [pc, #280]	; (800c804 <UART_SetConfig+0x9b8>)
 800c6ea:	e7ed      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6ec:	4b46      	ldr	r3, [pc, #280]	; (800c808 <UART_SetConfig+0x9bc>)
 800c6ee:	e7eb      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6f0:	4b46      	ldr	r3, [pc, #280]	; (800c80c <UART_SetConfig+0x9c0>)
 800c6f2:	e7e9      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6f4:	4b46      	ldr	r3, [pc, #280]	; (800c810 <UART_SetConfig+0x9c4>)
 800c6f6:	e7e7      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6f8:	4b46      	ldr	r3, [pc, #280]	; (800c814 <UART_SetConfig+0x9c8>)
 800c6fa:	e7e5      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c6fc:	4b46      	ldr	r3, [pc, #280]	; (800c818 <UART_SetConfig+0x9cc>)
 800c6fe:	e7e3      	b.n	800c6c8 <UART_SetConfig+0x87c>
 800c700:	4b46      	ldr	r3, [pc, #280]	; (800c81c <UART_SetConfig+0x9d0>)
 800c702:	e7e1      	b.n	800c6c8 <UART_SetConfig+0x87c>
        pclk = HAL_RCC_GetSysClockFreq();
 800c704:	f7ff fb44 	bl	800bd90 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d01a      	beq.n	800c744 <UART_SetConfig+0x8f8>
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d026      	beq.n	800c760 <UART_SetConfig+0x914>
 800c712:	2b02      	cmp	r3, #2
 800c714:	d026      	beq.n	800c764 <UART_SetConfig+0x918>
 800c716:	2b03      	cmp	r3, #3
 800c718:	d026      	beq.n	800c768 <UART_SetConfig+0x91c>
 800c71a:	2b04      	cmp	r3, #4
 800c71c:	d026      	beq.n	800c76c <UART_SetConfig+0x920>
 800c71e:	2b05      	cmp	r3, #5
 800c720:	d026      	beq.n	800c770 <UART_SetConfig+0x924>
 800c722:	2b06      	cmp	r3, #6
 800c724:	d026      	beq.n	800c774 <UART_SetConfig+0x928>
 800c726:	2b07      	cmp	r3, #7
 800c728:	d026      	beq.n	800c778 <UART_SetConfig+0x92c>
 800c72a:	2b08      	cmp	r3, #8
 800c72c:	d026      	beq.n	800c77c <UART_SetConfig+0x930>
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d026      	beq.n	800c780 <UART_SetConfig+0x934>
 800c732:	2b0a      	cmp	r3, #10
 800c734:	d026      	beq.n	800c784 <UART_SetConfig+0x938>
 800c736:	2b0b      	cmp	r3, #11
 800c738:	d001      	beq.n	800c73e <UART_SetConfig+0x8f2>
 800c73a:	2101      	movs	r1, #1
 800c73c:	e003      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c73e:	2180      	movs	r1, #128	; 0x80
 800c740:	0049      	lsls	r1, r1, #1
 800c742:	e000      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c744:	2101      	movs	r1, #1
 800c746:	6865      	ldr	r5, [r4, #4]
 800c748:	f004 fc16 	bl	8010f78 <__udivsi3>
 800c74c:	0040      	lsls	r0, r0, #1
 800c74e:	086b      	lsrs	r3, r5, #1
 800c750:	18c0      	adds	r0, r0, r3
 800c752:	0029      	movs	r1, r5
 800c754:	f004 fc10 	bl	8010f78 <__udivsi3>
 800c758:	0403      	lsls	r3, r0, #16
 800c75a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c75c:	2000      	movs	r0, #0
 800c75e:	e771      	b.n	800c644 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c760:	2102      	movs	r1, #2
 800c762:	e7f0      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c764:	2104      	movs	r1, #4
 800c766:	e7ee      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c768:	2106      	movs	r1, #6
 800c76a:	e7ec      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c76c:	2108      	movs	r1, #8
 800c76e:	e7ea      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c770:	210a      	movs	r1, #10
 800c772:	e7e8      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c774:	210c      	movs	r1, #12
 800c776:	e7e6      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c778:	2110      	movs	r1, #16
 800c77a:	e7e4      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c77c:	2120      	movs	r1, #32
 800c77e:	e7e2      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c780:	2140      	movs	r1, #64	; 0x40
 800c782:	e7e0      	b.n	800c746 <UART_SetConfig+0x8fa>
 800c784:	2180      	movs	r1, #128	; 0x80
 800c786:	e7de      	b.n	800c746 <UART_SetConfig+0x8fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c788:	33f5      	adds	r3, #245	; 0xf5
 800c78a:	e001      	b.n	800c790 <UART_SetConfig+0x944>
 800c78c:	2380      	movs	r3, #128	; 0x80
 800c78e:	025b      	lsls	r3, r3, #9
 800c790:	6862      	ldr	r2, [r4, #4]
 800c792:	0850      	lsrs	r0, r2, #1
 800c794:	18c0      	adds	r0, r0, r3
 800c796:	0011      	movs	r1, r2
 800c798:	f004 fbee 	bl	8010f78 <__udivsi3>
 800c79c:	0403      	lsls	r3, r0, #16
 800c79e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e74f      	b.n	800c644 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7a4:	2380      	movs	r3, #128	; 0x80
 800c7a6:	021b      	lsls	r3, r3, #8
 800c7a8:	e7f2      	b.n	800c790 <UART_SetConfig+0x944>
 800c7aa:	2380      	movs	r3, #128	; 0x80
 800c7ac:	01db      	lsls	r3, r3, #7
 800c7ae:	e7ef      	b.n	800c790 <UART_SetConfig+0x944>
 800c7b0:	4b1b      	ldr	r3, [pc, #108]	; (800c820 <UART_SetConfig+0x9d4>)
 800c7b2:	e7ed      	b.n	800c790 <UART_SetConfig+0x944>
 800c7b4:	2380      	movs	r3, #128	; 0x80
 800c7b6:	019b      	lsls	r3, r3, #6
 800c7b8:	e7ea      	b.n	800c790 <UART_SetConfig+0x944>
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <UART_SetConfig+0x9d8>)
 800c7bc:	e7e8      	b.n	800c790 <UART_SetConfig+0x944>
 800c7be:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <UART_SetConfig+0x9dc>)
 800c7c0:	e7e6      	b.n	800c790 <UART_SetConfig+0x944>
 800c7c2:	2380      	movs	r3, #128	; 0x80
 800c7c4:	015b      	lsls	r3, r3, #5
 800c7c6:	e7e3      	b.n	800c790 <UART_SetConfig+0x944>
 800c7c8:	2380      	movs	r3, #128	; 0x80
 800c7ca:	011b      	lsls	r3, r3, #4
 800c7cc:	e7e0      	b.n	800c790 <UART_SetConfig+0x944>
 800c7ce:	2380      	movs	r3, #128	; 0x80
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	e7dd      	b.n	800c790 <UART_SetConfig+0x944>
 800c7d4:	2380      	movs	r3, #128	; 0x80
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	e7da      	b.n	800c790 <UART_SetConfig+0x944>
        ret = HAL_ERROR;
 800c7da:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	e731      	b.n	800c644 <UART_SetConfig+0x7f8>
 800c7e0:	00155500 	.word	0x00155500
 800c7e4:	000ccc00 	.word	0x000ccc00
 800c7e8:	000aaa00 	.word	0x000aaa00
 800c7ec:	0000ffef 	.word	0x0000ffef
 800c7f0:	01e84800 	.word	0x01e84800
 800c7f4:	0001e848 	.word	0x0001e848
 800c7f8:	00f42400 	.word	0x00f42400
 800c7fc:	007a1200 	.word	0x007a1200
 800c800:	00516154 	.word	0x00516154
 800c804:	003d0900 	.word	0x003d0900
 800c808:	0030d400 	.word	0x0030d400
 800c80c:	0028b0aa 	.word	0x0028b0aa
 800c810:	001e8480 	.word	0x001e8480
 800c814:	000f4240 	.word	0x000f4240
 800c818:	0007a120 	.word	0x0007a120
 800c81c:	0003d090 	.word	0x0003d090
 800c820:	00002aaa 	.word	0x00002aaa
 800c824:	00001998 	.word	0x00001998
 800c828:	00001554 	.word	0x00001554
    switch (clocksource)
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	d000      	beq.n	800c832 <UART_SetConfig+0x9e6>
 800c830:	e0f6      	b.n	800ca20 <UART_SetConfig+0xbd4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c832:	f7ff fa99 	bl	800bd68 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01a      	beq.n	800c872 <UART_SetConfig+0xa26>
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d035      	beq.n	800c8ac <UART_SetConfig+0xa60>
 800c840:	2b02      	cmp	r3, #2
 800c842:	d035      	beq.n	800c8b0 <UART_SetConfig+0xa64>
 800c844:	2b03      	cmp	r3, #3
 800c846:	d035      	beq.n	800c8b4 <UART_SetConfig+0xa68>
 800c848:	2b04      	cmp	r3, #4
 800c84a:	d035      	beq.n	800c8b8 <UART_SetConfig+0xa6c>
 800c84c:	2b05      	cmp	r3, #5
 800c84e:	d035      	beq.n	800c8bc <UART_SetConfig+0xa70>
 800c850:	2b06      	cmp	r3, #6
 800c852:	d035      	beq.n	800c8c0 <UART_SetConfig+0xa74>
 800c854:	2b07      	cmp	r3, #7
 800c856:	d035      	beq.n	800c8c4 <UART_SetConfig+0xa78>
 800c858:	2b08      	cmp	r3, #8
 800c85a:	d035      	beq.n	800c8c8 <UART_SetConfig+0xa7c>
 800c85c:	2b09      	cmp	r3, #9
 800c85e:	d035      	beq.n	800c8cc <UART_SetConfig+0xa80>
 800c860:	2b0a      	cmp	r3, #10
 800c862:	d035      	beq.n	800c8d0 <UART_SetConfig+0xa84>
 800c864:	2b0b      	cmp	r3, #11
 800c866:	d001      	beq.n	800c86c <UART_SetConfig+0xa20>
 800c868:	2101      	movs	r1, #1
 800c86a:	e003      	b.n	800c874 <UART_SetConfig+0xa28>
 800c86c:	2180      	movs	r1, #128	; 0x80
 800c86e:	0049      	lsls	r1, r1, #1
 800c870:	e000      	b.n	800c874 <UART_SetConfig+0xa28>
 800c872:	2101      	movs	r1, #1
 800c874:	6865      	ldr	r5, [r4, #4]
 800c876:	f004 fb7f 	bl	8010f78 <__udivsi3>
 800c87a:	086b      	lsrs	r3, r5, #1
 800c87c:	18c0      	adds	r0, r0, r3
 800c87e:	0029      	movs	r1, r5
 800c880:	f004 fb7a 	bl	8010f78 <__udivsi3>
 800c884:	0403      	lsls	r3, r0, #16
 800c886:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c888:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c88a:	496e      	ldr	r1, [pc, #440]	; (800ca44 <UART_SetConfig+0xbf8>)
 800c88c:	001a      	movs	r2, r3
 800c88e:	3a10      	subs	r2, #16
 800c890:	428a      	cmp	r2, r1
 800c892:	d900      	bls.n	800c896 <UART_SetConfig+0xa4a>
 800c894:	e0d3      	b.n	800ca3e <UART_SetConfig+0xbf2>
      huart->Instance->BRR = usartdiv;
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
 800c89a:	2301      	movs	r3, #1
 800c89c:	226a      	movs	r2, #106	; 0x6a
 800c89e:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800c8a0:	3a02      	subs	r2, #2
 800c8a2:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800c8a8:	6723      	str	r3, [r4, #112]	; 0x70
}
 800c8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8ac:	2102      	movs	r1, #2
 800c8ae:	e7e1      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8b0:	2104      	movs	r1, #4
 800c8b2:	e7df      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8b4:	2106      	movs	r1, #6
 800c8b6:	e7dd      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8b8:	2108      	movs	r1, #8
 800c8ba:	e7db      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8bc:	210a      	movs	r1, #10
 800c8be:	e7d9      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8c0:	210c      	movs	r1, #12
 800c8c2:	e7d7      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8c4:	2110      	movs	r1, #16
 800c8c6:	e7d5      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8c8:	2120      	movs	r1, #32
 800c8ca:	e7d3      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8cc:	2140      	movs	r1, #64	; 0x40
 800c8ce:	e7d1      	b.n	800c874 <UART_SetConfig+0xa28>
 800c8d0:	2180      	movs	r1, #128	; 0x80
 800c8d2:	e7cf      	b.n	800c874 <UART_SetConfig+0xa28>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d019      	beq.n	800c90e <UART_SetConfig+0xac2>
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d022      	beq.n	800c924 <UART_SetConfig+0xad8>
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d022      	beq.n	800c928 <UART_SetConfig+0xadc>
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d022      	beq.n	800c92c <UART_SetConfig+0xae0>
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d022      	beq.n	800c930 <UART_SetConfig+0xae4>
 800c8ea:	2b05      	cmp	r3, #5
 800c8ec:	d022      	beq.n	800c934 <UART_SetConfig+0xae8>
 800c8ee:	2b06      	cmp	r3, #6
 800c8f0:	d022      	beq.n	800c938 <UART_SetConfig+0xaec>
 800c8f2:	2b07      	cmp	r3, #7
 800c8f4:	d022      	beq.n	800c93c <UART_SetConfig+0xaf0>
 800c8f6:	2b08      	cmp	r3, #8
 800c8f8:	d022      	beq.n	800c940 <UART_SetConfig+0xaf4>
 800c8fa:	2b09      	cmp	r3, #9
 800c8fc:	d022      	beq.n	800c944 <UART_SetConfig+0xaf8>
 800c8fe:	2b0a      	cmp	r3, #10
 800c900:	d022      	beq.n	800c948 <UART_SetConfig+0xafc>
 800c902:	2b0b      	cmp	r3, #11
 800c904:	d001      	beq.n	800c90a <UART_SetConfig+0xabe>
 800c906:	4b50      	ldr	r3, [pc, #320]	; (800ca48 <UART_SetConfig+0xbfc>)
 800c908:	e002      	b.n	800c910 <UART_SetConfig+0xac4>
 800c90a:	4b50      	ldr	r3, [pc, #320]	; (800ca4c <UART_SetConfig+0xc00>)
 800c90c:	e000      	b.n	800c910 <UART_SetConfig+0xac4>
 800c90e:	4b4e      	ldr	r3, [pc, #312]	; (800ca48 <UART_SetConfig+0xbfc>)
 800c910:	6862      	ldr	r2, [r4, #4]
 800c912:	0850      	lsrs	r0, r2, #1
 800c914:	18c0      	adds	r0, r0, r3
 800c916:	0011      	movs	r1, r2
 800c918:	f004 fb2e 	bl	8010f78 <__udivsi3>
 800c91c:	0403      	lsls	r3, r0, #16
 800c91e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c920:	2000      	movs	r0, #0
 800c922:	e7b2      	b.n	800c88a <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c924:	4b4a      	ldr	r3, [pc, #296]	; (800ca50 <UART_SetConfig+0xc04>)
 800c926:	e7f3      	b.n	800c910 <UART_SetConfig+0xac4>
 800c928:	4b4a      	ldr	r3, [pc, #296]	; (800ca54 <UART_SetConfig+0xc08>)
 800c92a:	e7f1      	b.n	800c910 <UART_SetConfig+0xac4>
 800c92c:	4b4a      	ldr	r3, [pc, #296]	; (800ca58 <UART_SetConfig+0xc0c>)
 800c92e:	e7ef      	b.n	800c910 <UART_SetConfig+0xac4>
 800c930:	4b4a      	ldr	r3, [pc, #296]	; (800ca5c <UART_SetConfig+0xc10>)
 800c932:	e7ed      	b.n	800c910 <UART_SetConfig+0xac4>
 800c934:	4b4a      	ldr	r3, [pc, #296]	; (800ca60 <UART_SetConfig+0xc14>)
 800c936:	e7eb      	b.n	800c910 <UART_SetConfig+0xac4>
 800c938:	4b4a      	ldr	r3, [pc, #296]	; (800ca64 <UART_SetConfig+0xc18>)
 800c93a:	e7e9      	b.n	800c910 <UART_SetConfig+0xac4>
 800c93c:	4b4a      	ldr	r3, [pc, #296]	; (800ca68 <UART_SetConfig+0xc1c>)
 800c93e:	e7e7      	b.n	800c910 <UART_SetConfig+0xac4>
 800c940:	4b4a      	ldr	r3, [pc, #296]	; (800ca6c <UART_SetConfig+0xc20>)
 800c942:	e7e5      	b.n	800c910 <UART_SetConfig+0xac4>
 800c944:	4b4a      	ldr	r3, [pc, #296]	; (800ca70 <UART_SetConfig+0xc24>)
 800c946:	e7e3      	b.n	800c910 <UART_SetConfig+0xac4>
 800c948:	4b4a      	ldr	r3, [pc, #296]	; (800ca74 <UART_SetConfig+0xc28>)
 800c94a:	e7e1      	b.n	800c910 <UART_SetConfig+0xac4>
        pclk = HAL_RCC_GetSysClockFreq();
 800c94c:	f7ff fa20 	bl	800bd90 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c952:	2b00      	cmp	r3, #0
 800c954:	d01a      	beq.n	800c98c <UART_SetConfig+0xb40>
 800c956:	2b01      	cmp	r3, #1
 800c958:	d025      	beq.n	800c9a6 <UART_SetConfig+0xb5a>
 800c95a:	2b02      	cmp	r3, #2
 800c95c:	d025      	beq.n	800c9aa <UART_SetConfig+0xb5e>
 800c95e:	2b03      	cmp	r3, #3
 800c960:	d025      	beq.n	800c9ae <UART_SetConfig+0xb62>
 800c962:	2b04      	cmp	r3, #4
 800c964:	d025      	beq.n	800c9b2 <UART_SetConfig+0xb66>
 800c966:	2b05      	cmp	r3, #5
 800c968:	d025      	beq.n	800c9b6 <UART_SetConfig+0xb6a>
 800c96a:	2b06      	cmp	r3, #6
 800c96c:	d025      	beq.n	800c9ba <UART_SetConfig+0xb6e>
 800c96e:	2b07      	cmp	r3, #7
 800c970:	d025      	beq.n	800c9be <UART_SetConfig+0xb72>
 800c972:	2b08      	cmp	r3, #8
 800c974:	d025      	beq.n	800c9c2 <UART_SetConfig+0xb76>
 800c976:	2b09      	cmp	r3, #9
 800c978:	d025      	beq.n	800c9c6 <UART_SetConfig+0xb7a>
 800c97a:	2b0a      	cmp	r3, #10
 800c97c:	d025      	beq.n	800c9ca <UART_SetConfig+0xb7e>
 800c97e:	2b0b      	cmp	r3, #11
 800c980:	d001      	beq.n	800c986 <UART_SetConfig+0xb3a>
 800c982:	2101      	movs	r1, #1
 800c984:	e003      	b.n	800c98e <UART_SetConfig+0xb42>
 800c986:	2180      	movs	r1, #128	; 0x80
 800c988:	0049      	lsls	r1, r1, #1
 800c98a:	e000      	b.n	800c98e <UART_SetConfig+0xb42>
 800c98c:	2101      	movs	r1, #1
 800c98e:	6865      	ldr	r5, [r4, #4]
 800c990:	f004 faf2 	bl	8010f78 <__udivsi3>
 800c994:	086b      	lsrs	r3, r5, #1
 800c996:	18c0      	adds	r0, r0, r3
 800c998:	0029      	movs	r1, r5
 800c99a:	f004 faed 	bl	8010f78 <__udivsi3>
 800c99e:	0403      	lsls	r3, r0, #16
 800c9a0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	e771      	b.n	800c88a <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9a6:	2102      	movs	r1, #2
 800c9a8:	e7f1      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9aa:	2104      	movs	r1, #4
 800c9ac:	e7ef      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9ae:	2106      	movs	r1, #6
 800c9b0:	e7ed      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9b2:	2108      	movs	r1, #8
 800c9b4:	e7eb      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9b6:	210a      	movs	r1, #10
 800c9b8:	e7e9      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9ba:	210c      	movs	r1, #12
 800c9bc:	e7e7      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9be:	2110      	movs	r1, #16
 800c9c0:	e7e5      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9c2:	2120      	movs	r1, #32
 800c9c4:	e7e3      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9c6:	2140      	movs	r1, #64	; 0x40
 800c9c8:	e7e1      	b.n	800c98e <UART_SetConfig+0xb42>
 800c9ca:	2180      	movs	r1, #128	; 0x80
 800c9cc:	e7df      	b.n	800c98e <UART_SetConfig+0xb42>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ce:	3375      	adds	r3, #117	; 0x75
 800c9d0:	e001      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800c9d2:	2380      	movs	r3, #128	; 0x80
 800c9d4:	021b      	lsls	r3, r3, #8
 800c9d6:	6862      	ldr	r2, [r4, #4]
 800c9d8:	0850      	lsrs	r0, r2, #1
 800c9da:	18c0      	adds	r0, r0, r3
 800c9dc:	0011      	movs	r1, r2
 800c9de:	f004 facb 	bl	8010f78 <__udivsi3>
 800c9e2:	0403      	lsls	r3, r0, #16
 800c9e4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e74f      	b.n	800c88a <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9ea:	2380      	movs	r3, #128	; 0x80
 800c9ec:	01db      	lsls	r3, r3, #7
 800c9ee:	e7f2      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800c9f0:	2380      	movs	r3, #128	; 0x80
 800c9f2:	019b      	lsls	r3, r3, #6
 800c9f4:	e7ef      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800c9f6:	4b20      	ldr	r3, [pc, #128]	; (800ca78 <UART_SetConfig+0xc2c>)
 800c9f8:	e7ed      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800c9fa:	2380      	movs	r3, #128	; 0x80
 800c9fc:	015b      	lsls	r3, r3, #5
 800c9fe:	e7ea      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca00:	4b1e      	ldr	r3, [pc, #120]	; (800ca7c <UART_SetConfig+0xc30>)
 800ca02:	e7e8      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca04:	4b1e      	ldr	r3, [pc, #120]	; (800ca80 <UART_SetConfig+0xc34>)
 800ca06:	e7e6      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca08:	2380      	movs	r3, #128	; 0x80
 800ca0a:	011b      	lsls	r3, r3, #4
 800ca0c:	e7e3      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca0e:	2380      	movs	r3, #128	; 0x80
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	e7e0      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca14:	2380      	movs	r3, #128	; 0x80
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	e7dd      	b.n	800c9d6 <UART_SetConfig+0xb8a>
 800ca1a:	2380      	movs	r3, #128	; 0x80
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	e7da      	b.n	800c9d6 <UART_SetConfig+0xb8a>
        ret = HAL_ERROR;
 800ca20:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800ca22:	2300      	movs	r3, #0
 800ca24:	e731      	b.n	800c88a <UART_SetConfig+0xa3e>
        ret = HAL_ERROR;
 800ca26:	2001      	movs	r0, #1
 800ca28:	e737      	b.n	800c89a <UART_SetConfig+0xa4e>
    if (lpuart_ker_ck_pres != 0U)
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	e735      	b.n	800c89a <UART_SetConfig+0xa4e>
        ret = HAL_ERROR;
 800ca2e:	2001      	movs	r0, #1
 800ca30:	e733      	b.n	800c89a <UART_SetConfig+0xa4e>
 800ca32:	2001      	movs	r0, #1
 800ca34:	e731      	b.n	800c89a <UART_SetConfig+0xa4e>
          ret = HAL_ERROR;
 800ca36:	2001      	movs	r0, #1
 800ca38:	e72f      	b.n	800c89a <UART_SetConfig+0xa4e>
      ret = HAL_ERROR;
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	e72d      	b.n	800c89a <UART_SetConfig+0xa4e>
      ret = HAL_ERROR;
 800ca3e:	2001      	movs	r0, #1
 800ca40:	e72b      	b.n	800c89a <UART_SetConfig+0xa4e>
 800ca42:	46c0      	nop			; (mov r8, r8)
 800ca44:	0000ffef 	.word	0x0000ffef
 800ca48:	00f42400 	.word	0x00f42400
 800ca4c:	0000f424 	.word	0x0000f424
 800ca50:	007a1200 	.word	0x007a1200
 800ca54:	003d0900 	.word	0x003d0900
 800ca58:	0028b0aa 	.word	0x0028b0aa
 800ca5c:	001e8480 	.word	0x001e8480
 800ca60:	00186a00 	.word	0x00186a00
 800ca64:	00145855 	.word	0x00145855
 800ca68:	000f4240 	.word	0x000f4240
 800ca6c:	0007a120 	.word	0x0007a120
 800ca70:	0003d090 	.word	0x0003d090
 800ca74:	0001e848 	.word	0x0001e848
 800ca78:	00001555 	.word	0x00001555
 800ca7c:	00000ccc 	.word	0x00000ccc
 800ca80:	00000aaa 	.word	0x00000aaa

0800ca84 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800ca84:	4770      	bx	lr

0800ca86 <HAL_GPIO_EXTI_Rising_Callback>:
}
 800ca86:	4770      	bx	lr

0800ca88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ca8c:	2360      	movs	r3, #96	; 0x60
 800ca8e:	5ac6      	ldrh	r6, [r0, r3]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca90:	3324      	adds	r3, #36	; 0x24
 800ca92:	58c3      	ldr	r3, [r0, r3]
 800ca94:	2b22      	cmp	r3, #34	; 0x22
 800ca96:	d005      	beq.n	800caa4 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca98:	6802      	ldr	r2, [r0, #0]
 800ca9a:	6993      	ldr	r3, [r2, #24]
 800ca9c:	2108      	movs	r1, #8
 800ca9e:	430b      	orrs	r3, r1
 800caa0:	6193      	str	r3, [r2, #24]
  }
}
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800caa4:	3346      	adds	r3, #70	; 0x46
 800caa6:	5ac5      	ldrh	r5, [r0, r3]
 800caa8:	e001      	b.n	800caae <UART_RxISR_16BIT_FIFOEN+0x26>
 800caaa:	3d01      	subs	r5, #1
 800caac:	b2ad      	uxth	r5, r5
 800caae:	2d00      	cmp	r5, #0
 800cab0:	d023      	beq.n	800cafa <UART_RxISR_16BIT_FIFOEN+0x72>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800cab6:	4033      	ands	r3, r6
 800cab8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800caba:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800cabc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cabe:	3302      	adds	r3, #2
 800cac0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cac2:	225e      	movs	r2, #94	; 0x5e
 800cac4:	5aa3      	ldrh	r3, [r4, r2]
 800cac6:	3b01      	subs	r3, #1
 800cac8:	b29b      	uxth	r3, r3
 800caca:	52a3      	strh	r3, [r4, r2]
      if (huart->RxXferCount == 0U)
 800cacc:	5aa3      	ldrh	r3, [r4, r2]
 800cace:	b29b      	uxth	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1ea      	bne.n	800caaa <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cad4:	6822      	ldr	r2, [r4, #0]
 800cad6:	6813      	ldr	r3, [r2, #0]
 800cad8:	4913      	ldr	r1, [pc, #76]	; (800cb28 <UART_RxISR_16BIT_FIFOEN+0xa0>)
 800cada:	400b      	ands	r3, r1
 800cadc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cade:	6822      	ldr	r2, [r4, #0]
 800cae0:	6893      	ldr	r3, [r2, #8]
 800cae2:	4912      	ldr	r1, [pc, #72]	; (800cb2c <UART_RxISR_16BIT_FIFOEN+0xa4>)
 800cae4:	400b      	ands	r3, r1
 800cae6:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800cae8:	2384      	movs	r3, #132	; 0x84
 800caea:	2220      	movs	r2, #32
 800caec:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 800caee:	2300      	movs	r3, #0
 800caf0:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800caf2:	0020      	movs	r0, r4
 800caf4:	f7fd ffd2 	bl	800aa9c <HAL_UART_RxCpltCallback>
 800caf8:	e7d7      	b.n	800caaa <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800cafa:	235e      	movs	r3, #94	; 0x5e
 800cafc:	5ae3      	ldrh	r3, [r4, r3]
 800cafe:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0ce      	beq.n	800caa2 <UART_RxISR_16BIT_FIFOEN+0x1a>
 800cb04:	2268      	movs	r2, #104	; 0x68
 800cb06:	5aa2      	ldrh	r2, [r4, r2]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d9ca      	bls.n	800caa2 <UART_RxISR_16BIT_FIFOEN+0x1a>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb0c:	6822      	ldr	r2, [r4, #0]
 800cb0e:	6893      	ldr	r3, [r2, #8]
 800cb10:	4907      	ldr	r1, [pc, #28]	; (800cb30 <UART_RxISR_16BIT_FIFOEN+0xa8>)
 800cb12:	400b      	ands	r3, r1
 800cb14:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 800cb16:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <UART_RxISR_16BIT_FIFOEN+0xac>)
 800cb18:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb1a:	6822      	ldr	r2, [r4, #0]
 800cb1c:	6813      	ldr	r3, [r2, #0]
 800cb1e:	2120      	movs	r1, #32
 800cb20:	430b      	orrs	r3, r1
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	e7bd      	b.n	800caa2 <UART_RxISR_16BIT_FIFOEN+0x1a>
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	fffffeff 	.word	0xfffffeff
 800cb2c:	effffffe 	.word	0xeffffffe
 800cb30:	efffffff 	.word	0xefffffff
 800cb34:	0800cb39 	.word	0x0800cb39

0800cb38 <UART_RxISR_16BIT>:
{
 800cb38:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 800cb3a:	2360      	movs	r3, #96	; 0x60
 800cb3c:	5ac2      	ldrh	r2, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb3e:	3324      	adds	r3, #36	; 0x24
 800cb40:	58c3      	ldr	r3, [r0, r3]
 800cb42:	2b22      	cmp	r3, #34	; 0x22
 800cb44:	d005      	beq.n	800cb52 <UART_RxISR_16BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb46:	6802      	ldr	r2, [r0, #0]
 800cb48:	6993      	ldr	r3, [r2, #24]
 800cb4a:	2108      	movs	r1, #8
 800cb4c:	430b      	orrs	r3, r1
 800cb4e:	6193      	str	r3, [r2, #24]
}
 800cb50:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb52:	6803      	ldr	r3, [r0, #0]
 800cb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800cb56:	4013      	ands	r3, r2
 800cb58:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cb5a:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800cb5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800cb5e:	3302      	adds	r3, #2
 800cb60:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800cb62:	225e      	movs	r2, #94	; 0x5e
 800cb64:	5a83      	ldrh	r3, [r0, r2]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800cb6c:	5a83      	ldrh	r3, [r0, r2]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1ed      	bne.n	800cb50 <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb74:	6802      	ldr	r2, [r0, #0]
 800cb76:	6813      	ldr	r3, [r2, #0]
 800cb78:	4908      	ldr	r1, [pc, #32]	; (800cb9c <UART_RxISR_16BIT+0x64>)
 800cb7a:	400b      	ands	r3, r1
 800cb7c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb7e:	6802      	ldr	r2, [r0, #0]
 800cb80:	6893      	ldr	r3, [r2, #8]
 800cb82:	3123      	adds	r1, #35	; 0x23
 800cb84:	31ff      	adds	r1, #255	; 0xff
 800cb86:	438b      	bics	r3, r1
 800cb88:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800cb8a:	2384      	movs	r3, #132	; 0x84
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 800cb90:	2300      	movs	r3, #0
 800cb92:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800cb94:	f7fd ff82 	bl	800aa9c <HAL_UART_RxCpltCallback>
 800cb98:	e7da      	b.n	800cb50 <UART_RxISR_16BIT+0x18>
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	fffffedf 	.word	0xfffffedf

0800cba0 <UART_RxISR_8BIT_FIFOEN>:
{
 800cba0:	b570      	push	{r4, r5, r6, lr}
 800cba2:	0004      	movs	r4, r0
  uint16_t  uhMask = huart->Mask;
 800cba4:	2360      	movs	r3, #96	; 0x60
 800cba6:	5ac5      	ldrh	r5, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cba8:	3324      	adds	r3, #36	; 0x24
 800cbaa:	58c3      	ldr	r3, [r0, r3]
 800cbac:	2b22      	cmp	r3, #34	; 0x22
 800cbae:	d005      	beq.n	800cbbc <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbb0:	6802      	ldr	r2, [r0, #0]
 800cbb2:	6993      	ldr	r3, [r2, #24]
 800cbb4:	2108      	movs	r1, #8
 800cbb6:	430b      	orrs	r3, r1
 800cbb8:	6193      	str	r3, [r2, #24]
}
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cbbc:	3346      	adds	r3, #70	; 0x46
 800cbbe:	5ac6      	ldrh	r6, [r0, r3]
 800cbc0:	e001      	b.n	800cbc6 <UART_RxISR_8BIT_FIFOEN+0x26>
 800cbc2:	3e01      	subs	r6, #1
 800cbc4:	b2b6      	uxth	r6, r6
 800cbc6:	2e00      	cmp	r6, #0
 800cbc8:	d024      	beq.n	800cc14 <UART_RxISR_8BIT_FIFOEN+0x74>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cbce:	b2ea      	uxtb	r2, r5
 800cbd0:	4013      	ands	r3, r2
 800cbd2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cbd4:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800cbd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbd8:	3301      	adds	r3, #1
 800cbda:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cbdc:	225e      	movs	r2, #94	; 0x5e
 800cbde:	5aa3      	ldrh	r3, [r4, r2]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	52a3      	strh	r3, [r4, r2]
      if (huart->RxXferCount == 0U)
 800cbe6:	5aa3      	ldrh	r3, [r4, r2]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d1e9      	bne.n	800cbc2 <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbee:	6822      	ldr	r2, [r4, #0]
 800cbf0:	6813      	ldr	r3, [r2, #0]
 800cbf2:	4913      	ldr	r1, [pc, #76]	; (800cc40 <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800cbf4:	400b      	ands	r3, r1
 800cbf6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbf8:	6822      	ldr	r2, [r4, #0]
 800cbfa:	6893      	ldr	r3, [r2, #8]
 800cbfc:	4911      	ldr	r1, [pc, #68]	; (800cc44 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 800cbfe:	400b      	ands	r3, r1
 800cc00:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800cc02:	2384      	movs	r3, #132	; 0x84
 800cc04:	2220      	movs	r2, #32
 800cc06:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800cc0c:	0020      	movs	r0, r4
 800cc0e:	f7fd ff45 	bl	800aa9c <HAL_UART_RxCpltCallback>
 800cc12:	e7d6      	b.n	800cbc2 <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800cc14:	235e      	movs	r3, #94	; 0x5e
 800cc16:	5ae3      	ldrh	r3, [r4, r3]
 800cc18:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0cd      	beq.n	800cbba <UART_RxISR_8BIT_FIFOEN+0x1a>
 800cc1e:	2268      	movs	r2, #104	; 0x68
 800cc20:	5aa2      	ldrh	r2, [r4, r2]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d9c9      	bls.n	800cbba <UART_RxISR_8BIT_FIFOEN+0x1a>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	6893      	ldr	r3, [r2, #8]
 800cc2a:	4907      	ldr	r1, [pc, #28]	; (800cc48 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800cc2c:	400b      	ands	r3, r1
 800cc2e:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800cc30:	4b06      	ldr	r3, [pc, #24]	; (800cc4c <UART_RxISR_8BIT_FIFOEN+0xac>)
 800cc32:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc34:	6822      	ldr	r2, [r4, #0]
 800cc36:	6813      	ldr	r3, [r2, #0]
 800cc38:	2120      	movs	r1, #32
 800cc3a:	430b      	orrs	r3, r1
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	e7bc      	b.n	800cbba <UART_RxISR_8BIT_FIFOEN+0x1a>
 800cc40:	fffffeff 	.word	0xfffffeff
 800cc44:	effffffe 	.word	0xeffffffe
 800cc48:	efffffff 	.word	0xefffffff
 800cc4c:	0800cc51 	.word	0x0800cc51

0800cc50 <UART_RxISR_8BIT>:
{
 800cc50:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 800cc52:	2360      	movs	r3, #96	; 0x60
 800cc54:	5ac3      	ldrh	r3, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc56:	2284      	movs	r2, #132	; 0x84
 800cc58:	5882      	ldr	r2, [r0, r2]
 800cc5a:	2a22      	cmp	r2, #34	; 0x22
 800cc5c:	d005      	beq.n	800cc6a <UART_RxISR_8BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc5e:	6802      	ldr	r2, [r0, #0]
 800cc60:	6993      	ldr	r3, [r2, #24]
 800cc62:	2108      	movs	r1, #8
 800cc64:	430b      	orrs	r3, r1
 800cc66:	6193      	str	r3, [r2, #24]
}
 800cc68:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc6a:	6802      	ldr	r2, [r0, #0]
 800cc6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	4013      	ands	r3, r2
 800cc72:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cc74:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800cc76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800cc78:	3301      	adds	r3, #1
 800cc7a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800cc7c:	225e      	movs	r2, #94	; 0x5e
 800cc7e:	5a83      	ldrh	r3, [r0, r2]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800cc86:	5a83      	ldrh	r3, [r0, r2]
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1ec      	bne.n	800cc68 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc8e:	6802      	ldr	r2, [r0, #0]
 800cc90:	6813      	ldr	r3, [r2, #0]
 800cc92:	4908      	ldr	r1, [pc, #32]	; (800ccb4 <UART_RxISR_8BIT+0x64>)
 800cc94:	400b      	ands	r3, r1
 800cc96:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc98:	6802      	ldr	r2, [r0, #0]
 800cc9a:	6893      	ldr	r3, [r2, #8]
 800cc9c:	3123      	adds	r1, #35	; 0x23
 800cc9e:	31ff      	adds	r1, #255	; 0xff
 800cca0:	438b      	bics	r3, r1
 800cca2:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800cca4:	2384      	movs	r3, #132	; 0x84
 800cca6:	2220      	movs	r2, #32
 800cca8:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800ccae:	f7fd fef5 	bl	800aa9c <HAL_UART_RxCpltCallback>
 800ccb2:	e7d9      	b.n	800cc68 <UART_RxISR_8BIT+0x18>
 800ccb4:	fffffedf 	.word	0xfffffedf

0800ccb8 <UART_EndTransmit_IT>:
{
 800ccb8:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ccba:	6802      	ldr	r2, [r0, #0]
 800ccbc:	6813      	ldr	r3, [r2, #0]
 800ccbe:	2140      	movs	r1, #64	; 0x40
 800ccc0:	438b      	bics	r3, r1
 800ccc2:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ccc4:	2380      	movs	r3, #128	; 0x80
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	50c2      	str	r2, [r0, r3]
  huart->TxISR = NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	6703      	str	r3, [r0, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800ccce:	f7fd fec7 	bl	800aa60 <HAL_UART_TxCpltCallback>
}
 800ccd2:	bd10      	pop	{r4, pc}

0800ccd4 <acc_rss_integration_mem_calloc_debug.constprop.64>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	0005      	movs	r5, r0
 800ccd8:	f7f8 fd22 	bl	8005720 <acc_rss_integration_mem_alloc_debug>
 800ccdc:	1e04      	subs	r4, r0, #0
 800ccde:	d003      	beq.n	800cce8 <acc_rss_integration_mem_calloc_debug.constprop.64+0x14>
 800cce0:	002a      	movs	r2, r5
 800cce2:	2100      	movs	r1, #0
 800cce4:	f006 febe 	bl	8013a64 <memset>
 800cce8:	0020      	movs	r0, r4
 800ccea:	bd70      	pop	{r4, r5, r6, pc}

0800ccec <internal_buffer_processed_read.constprop.29>:
 800ccec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccee:	46de      	mov	lr, fp
 800ccf0:	464e      	mov	r6, r9
 800ccf2:	4645      	mov	r5, r8
 800ccf4:	4657      	mov	r7, sl
 800ccf6:	b5e0      	push	{r5, r6, r7, lr}
 800ccf8:	4b24      	ldr	r3, [pc, #144]	; (800cd8c <internal_buffer_processed_read.constprop.29+0xa0>)
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	9001      	str	r0, [sp, #4]
 800ccfe:	4688      	mov	r8, r1
 800cd00:	0017      	movs	r7, r2
 800cd02:	2100      	movs	r1, #0
 800cd04:	2206      	movs	r2, #6
 800cd06:	a802      	add	r0, sp, #8
 800cd08:	685e      	ldr	r6, [r3, #4]
 800cd0a:	f006 feab 	bl	8013a64 <memset>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	4699      	mov	r9, r3
 800cd12:	3301      	adds	r3, #1
 800cd14:	4645      	mov	r5, r8
 800cd16:	469b      	mov	fp, r3
 800cd18:	0876      	lsrs	r6, r6, #1
 800cd1a:	3e03      	subs	r6, #3
 800cd1c:	2f00      	cmp	r7, #0
 800cd1e:	d108      	bne.n	800cd32 <internal_buffer_processed_read.constprop.29+0x46>
 800cd20:	4640      	mov	r0, r8
 800cd22:	3006      	adds	r0, #6
 800cd24:	b005      	add	sp, #20
 800cd26:	bc3c      	pop	{r2, r3, r4, r5}
 800cd28:	4690      	mov	r8, r2
 800cd2a:	4699      	mov	r9, r3
 800cd2c:	46a2      	mov	sl, r4
 800cd2e:	46ab      	mov	fp, r5
 800cd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd32:	0034      	movs	r4, r6
 800cd34:	42be      	cmp	r6, r7
 800cd36:	d900      	bls.n	800cd3a <internal_buffer_processed_read.constprop.29+0x4e>
 800cd38:	003c      	movs	r4, r7
 800cd3a:	42be      	cmp	r6, r7
 800cd3c:	d202      	bcs.n	800cd44 <internal_buffer_processed_read.constprop.29+0x58>
 800cd3e:	465b      	mov	r3, fp
 800cd40:	421c      	tst	r4, r3
 800cd42:	d121      	bne.n	800cd88 <internal_buffer_processed_read.constprop.29+0x9c>
 800cd44:	464a      	mov	r2, r9
 800cd46:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <internal_buffer_processed_read.constprop.29+0xa4>)
 800cd48:	0029      	movs	r1, r5
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	802b      	strh	r3, [r5, #0]
 800cd4e:	b2a3      	uxth	r3, r4
 800cd50:	469a      	mov	sl, r3
 800cd52:	3b01      	subs	r3, #1
 800cd54:	806b      	strh	r3, [r5, #2]
 800cd56:	2300      	movs	r3, #0
 800cd58:	1ce2      	adds	r2, r4, #3
 800cd5a:	80ab      	strh	r3, [r5, #4]
 800cd5c:	9801      	ldr	r0, [sp, #4]
 800cd5e:	465b      	mov	r3, fp
 800cd60:	f7f9 fc8e 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 800cd64:	a902      	add	r1, sp, #8
 800cd66:	2206      	movs	r2, #6
 800cd68:	0028      	movs	r0, r5
 800cd6a:	f009 fb99 	bl	80164a0 <memcpy>
 800cd6e:	464b      	mov	r3, r9
 800cd70:	1b3f      	subs	r7, r7, r4
 800cd72:	0064      	lsls	r4, r4, #1
 800cd74:	4453      	add	r3, sl
 800cd76:	192d      	adds	r5, r5, r4
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	2206      	movs	r2, #6
 800cd7c:	0029      	movs	r1, r5
 800cd7e:	a802      	add	r0, sp, #8
 800cd80:	4699      	mov	r9, r3
 800cd82:	f009 fb8d 	bl	80164a0 <memcpy>
 800cd86:	e7c9      	b.n	800cd1c <internal_buffer_processed_read.constprop.29+0x30>
 800cd88:	3c01      	subs	r4, #1
 800cd8a:	e7d8      	b.n	800cd3e <internal_buffer_processed_read.constprop.29+0x52>
 800cd8c:	200005d0 	.word	0x200005d0
 800cd90:	ffff8000 	.word	0xffff8000

0800cd94 <acc_sensor_reg_write>:
 800cd94:	2380      	movs	r3, #128	; 0x80
 800cd96:	b513      	push	{r0, r1, r4, lr}
 800cd98:	015b      	lsls	r3, r3, #5
 800cd9a:	ac01      	add	r4, sp, #4
 800cd9c:	4319      	orrs	r1, r3
 800cd9e:	8021      	strh	r1, [r4, #0]
 800cda0:	8062      	strh	r2, [r4, #2]
 800cda2:	2300      	movs	r3, #0
 800cda4:	2202      	movs	r2, #2
 800cda6:	0021      	movs	r1, r4
 800cda8:	f7f9 fc6a 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 800cdac:	bd13      	pop	{r0, r1, r4, pc}

0800cdae <acc_diagnostic_log_data_i16.constprop.19>:
 800cdae:	4770      	bx	lr

0800cdb0 <acc_confprogram_live_patch.constprop.15>:
 800cdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb2:	4645      	mov	r5, r8
 800cdb4:	46de      	mov	lr, fp
 800cdb6:	464e      	mov	r6, r9
 800cdb8:	4657      	mov	r7, sl
 800cdba:	b5e0      	push	{r5, r6, r7, lr}
 800cdbc:	001d      	movs	r5, r3
 800cdbe:	4b4c      	ldr	r3, [pc, #304]	; (800cef0 <acc_confprogram_live_patch.constprop.15+0x140>)
 800cdc0:	0016      	movs	r6, r2
 800cdc2:	001a      	movs	r2, r3
 800cdc4:	3230      	adds	r2, #48	; 0x30
 800cdc6:	7812      	ldrb	r2, [r2, #0]
 800cdc8:	b08b      	sub	sp, #44	; 0x2c
 800cdca:	4680      	mov	r8, r0
 800cdcc:	468b      	mov	fp, r1
 800cdce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800cdd0:	2a03      	cmp	r2, #3
 800cdd2:	d906      	bls.n	800cde2 <acc_confprogram_live_patch.constprop.15+0x32>
 800cdd4:	9400      	str	r4, [sp, #0]
 800cdd6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800cdd8:	4a46      	ldr	r2, [pc, #280]	; (800cef4 <acc_confprogram_live_patch.constprop.15+0x144>)
 800cdda:	002b      	movs	r3, r5
 800cddc:	4946      	ldr	r1, [pc, #280]	; (800cef8 <acc_confprogram_live_patch.constprop.15+0x148>)
 800cdde:	2004      	movs	r0, #4
 800cde0:	47b8      	blx	r7
 800cde2:	0023      	movs	r3, r4
 800cde4:	1e5a      	subs	r2, r3, #1
 800cde6:	4193      	sbcs	r3, r2
 800cde8:	00ed      	lsls	r5, r5, #3
 800cdea:	1976      	adds	r6, r6, r5
 800cdec:	2500      	movs	r5, #0
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	9305      	str	r3, [sp, #20]
 800cdf2:	8873      	ldrh	r3, [r6, #2]
 800cdf4:	429d      	cmp	r5, r3
 800cdf6:	d306      	bcc.n	800ce06 <acc_confprogram_live_patch.constprop.15+0x56>
 800cdf8:	b00b      	add	sp, #44	; 0x2c
 800cdfa:	bc3c      	pop	{r2, r3, r4, r5}
 800cdfc:	4690      	mov	r8, r2
 800cdfe:	4699      	mov	r9, r3
 800ce00:	46a2      	mov	sl, r4
 800ce02:	46ab      	mov	fp, r5
 800ce04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce06:	2206      	movs	r2, #6
 800ce08:	6873      	ldr	r3, [r6, #4]
 800ce0a:	436a      	muls	r2, r5
 800ce0c:	469c      	mov	ip, r3
 800ce0e:	4462      	add	r2, ip
 800ce10:	7810      	ldrb	r0, [r2, #0]
 800ce12:	2801      	cmp	r0, #1
 800ce14:	d059      	beq.n	800ceca <acc_confprogram_live_patch.constprop.15+0x11a>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d00b      	beq.n	800ce32 <acc_confprogram_live_patch.constprop.15+0x82>
 800ce1a:	2802      	cmp	r0, #2
 800ce1c:	d05e      	beq.n	800cedc <acc_confprogram_live_patch.constprop.15+0x12c>
 800ce1e:	4b34      	ldr	r3, [pc, #208]	; (800cef0 <acc_confprogram_live_patch.constprop.15+0x140>)
 800ce20:	4935      	ldr	r1, [pc, #212]	; (800cef8 <acc_confprogram_live_patch.constprop.15+0x148>)
 800ce22:	2000      	movs	r0, #0
 800ce24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce26:	4a35      	ldr	r2, [pc, #212]	; (800cefc <acc_confprogram_live_patch.constprop.15+0x14c>)
 800ce28:	4798      	blx	r3
 800ce2a:	21e7      	movs	r1, #231	; 0xe7
 800ce2c:	4834      	ldr	r0, [pc, #208]	; (800cf00 <acc_confprogram_live_patch.constprop.15+0x150>)
 800ce2e:	f7f8 f9c1 	bl	80051b4 <acc_assert_fail>
 800ce32:	8853      	ldrh	r3, [r2, #2]
 800ce34:	4699      	mov	r9, r3
 800ce36:	7913      	ldrb	r3, [r2, #4]
 800ce38:	9303      	str	r3, [sp, #12]
 800ce3a:	7953      	ldrb	r3, [r2, #5]
 800ce3c:	9304      	str	r3, [sp, #16]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9a04      	ldr	r2, [sp, #16]
 800ce42:	469a      	mov	sl, r3
 800ce44:	4093      	lsls	r3, r2
 800ce46:	429c      	cmp	r4, r3
 800ce48:	d30c      	bcc.n	800ce64 <acc_confprogram_live_patch.constprop.15+0xb4>
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	9301      	str	r3, [sp, #4]
 800ce4e:	4b28      	ldr	r3, [pc, #160]	; (800cef0 <acc_confprogram_live_patch.constprop.15+0x140>)
 800ce50:	9400      	str	r4, [sp, #0]
 800ce52:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800ce54:	4928      	ldr	r1, [pc, #160]	; (800cef8 <acc_confprogram_live_patch.constprop.15+0x148>)
 800ce56:	464b      	mov	r3, r9
 800ce58:	4a2a      	ldr	r2, [pc, #168]	; (800cf04 <acc_confprogram_live_patch.constprop.15+0x154>)
 800ce5a:	47a0      	blx	r4
 800ce5c:	2129      	movs	r1, #41	; 0x29
 800ce5e:	4828      	ldr	r0, [pc, #160]	; (800cf00 <acc_confprogram_live_patch.constprop.15+0x150>)
 800ce60:	f7f8 f9a8 	bl	80051b4 <acc_assert_fail>
 800ce64:	464a      	mov	r2, r9
 800ce66:	4b28      	ldr	r3, [pc, #160]	; (800cf08 <acc_confprogram_live_patch.constprop.15+0x158>)
 800ce68:	af07      	add	r7, sp, #28
 800ce6a:	4313      	orrs	r3, r2
 800ce6c:	803b      	strh	r3, [r7, #0]
 800ce6e:	4653      	mov	r3, sl
 800ce70:	0001      	movs	r1, r0
 800ce72:	80b8      	strh	r0, [r7, #4]
 800ce74:	a804      	add	r0, sp, #16
 800ce76:	4684      	mov	ip, r0
 800ce78:	807b      	strh	r3, [r7, #2]
 800ce7a:	2312      	movs	r3, #18
 800ce7c:	4463      	add	r3, ip
 800ce7e:	2204      	movs	r2, #4
 800ce80:	0018      	movs	r0, r3
 800ce82:	f006 fdef 	bl	8013a64 <memset>
 800ce86:	4653      	mov	r3, sl
 800ce88:	2205      	movs	r2, #5
 800ce8a:	0039      	movs	r1, r7
 800ce8c:	4640      	mov	r0, r8
 800ce8e:	f7f9 fbf7 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 800ce92:	aa04      	add	r2, sp, #16
 800ce94:	4694      	mov	ip, r2
 800ce96:	2312      	movs	r3, #18
 800ce98:	4463      	add	r3, ip
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	a906      	add	r1, sp, #24
 800ce9e:	f7fe f993 	bl	800b1c8 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800cea2:	2220      	movs	r2, #32
 800cea4:	9b04      	ldr	r3, [sp, #16]
 800cea6:	9903      	ldr	r1, [sp, #12]
 800cea8:	1ad2      	subs	r2, r2, r3
 800ceaa:	2301      	movs	r3, #1
 800ceac:	425b      	negs	r3, r3
 800ceae:	40d3      	lsrs	r3, r2
 800ceb0:	9a03      	ldr	r2, [sp, #12]
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	4093      	lsls	r3, r2
 800ceb6:	9a06      	ldr	r2, [sp, #24]
 800ceb8:	439a      	bics	r2, r3
 800ceba:	0023      	movs	r3, r4
 800cebc:	408b      	lsls	r3, r1
 800cebe:	4649      	mov	r1, r9
 800cec0:	431a      	orrs	r2, r3
 800cec2:	f7f9 fbfb 	bl	80066bc <acc_sensor_r2_conf_write_instr>
 800cec6:	3501      	adds	r5, #1
 800cec8:	e793      	b.n	800cdf2 <acc_confprogram_live_patch.constprop.15+0x42>
 800ceca:	9905      	ldr	r1, [sp, #20]
 800cecc:	8853      	ldrh	r3, [r2, #2]
 800cece:	4640      	mov	r0, r8
 800ced0:	8892      	ldrh	r2, [r2, #4]
 800ced2:	9100      	str	r1, [sp, #0]
 800ced4:	4659      	mov	r1, fp
 800ced6:	f7fe f97d 	bl	800b1d4 <acc_confprogram_modify_runif_sensor.constprop.18>
 800ceda:	e7f4      	b.n	800cec6 <acc_confprogram_live_patch.constprop.15+0x116>
 800cedc:	4261      	negs	r1, r4
 800cede:	4161      	adcs	r1, r4
 800cee0:	8853      	ldrh	r3, [r2, #2]
 800cee2:	4640      	mov	r0, r8
 800cee4:	8892      	ldrh	r2, [r2, #4]
 800cee6:	9100      	str	r1, [sp, #0]
 800cee8:	4659      	mov	r1, fp
 800ceea:	f7fe f973 	bl	800b1d4 <acc_confprogram_modify_runif_sensor.constprop.18>
 800ceee:	e7ea      	b.n	800cec6 <acc_confprogram_live_patch.constprop.15+0x116>
 800cef0:	200005d0 	.word	0x200005d0
 800cef4:	0801ede3 	.word	0x0801ede3
 800cef8:	0801e068 	.word	0x0801e068
 800cefc:	0801ee6e 	.word	0x0801ee6e
 800cf00:	0801ee3d 	.word	0x0801ee3d
 800cf04:	0801ee05 	.word	0x0801ee05
 800cf08:	ffffa000 	.word	0xffffa000

0800cf0c <get_dt.constprop.9>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	f7fa ffad 	bl	8007e6c <acc_rss_integration_get_sensor_reference_frequency>
 800cf12:	1c01      	adds	r1, r0, #0
 800cf14:	1c04      	adds	r4, r0, #0
 800cf16:	4809      	ldr	r0, [pc, #36]	; (800cf3c <get_dt.constprop.9+0x30>)
 800cf18:	f003 fbea 	bl	80106f0 <__aeabi_fdiv>
 800cf1c:	f006 ff94 	bl	8013e48 <roundf>
 800cf20:	1c01      	adds	r1, r0, #0
 800cf22:	1c20      	adds	r0, r4, #0
 800cf24:	f003 fcf6 	bl	8010914 <__aeabi_fmul>
 800cf28:	1c01      	adds	r1, r0, #0
 800cf2a:	20fe      	movs	r0, #254	; 0xfe
 800cf2c:	0580      	lsls	r0, r0, #22
 800cf2e:	f003 fbdf 	bl	80106f0 <__aeabi_fdiv>
 800cf32:	4903      	ldr	r1, [pc, #12]	; (800cf40 <get_dt.constprop.9+0x34>)
 800cf34:	f003 fbdc 	bl	80106f0 <__aeabi_fdiv>
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	46c0      	nop			; (mov r8, r8)
 800cf3c:	4f1502f9 	.word	0x4f1502f9
 800cf40:	42f80000 	.word	0x42f80000

0800cf44 <points_to_meter.constprop.8>:
 800cf44:	b570      	push	{r4, r5, r6, lr}
 800cf46:	0005      	movs	r5, r0
 800cf48:	f7ff ffe0 	bl	800cf0c <get_dt.constprop.9>
 800cf4c:	1c04      	adds	r4, r0, #0
 800cf4e:	0028      	movs	r0, r5
 800cf50:	f004 fbf6 	bl	8011740 <__aeabi_i2f>
 800cf54:	1c21      	adds	r1, r4, #0
 800cf56:	f003 fcdd 	bl	8010914 <__aeabi_fmul>
 800cf5a:	4904      	ldr	r1, [pc, #16]	; (800cf6c <points_to_meter.constprop.8+0x28>)
 800cf5c:	f003 fcda 	bl	8010914 <__aeabi_fmul>
 800cf60:	21fc      	movs	r1, #252	; 0xfc
 800cf62:	0589      	lsls	r1, r1, #22
 800cf64:	f003 fcd6 	bl	8010914 <__aeabi_fmul>
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
 800cf6a:	46c0      	nop			; (mov r8, r8)
 800cf6c:	4d8ef3c2 	.word	0x4d8ef3c2

0800cf70 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800cf74:	237c      	movs	r3, #124	; 0x7c
 800cf76:	5cc3      	ldrb	r3, [r0, r3]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d01b      	beq.n	800cfb4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800cf7c:	257c      	movs	r5, #124	; 0x7c
 800cf7e:	2001      	movs	r0, #1
 800cf80:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800cf82:	2680      	movs	r6, #128	; 0x80
 800cf84:	2324      	movs	r3, #36	; 0x24
 800cf86:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf88:	6823      	ldr	r3, [r4, #0]
 800cf8a:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4382      	bics	r2, r0
 800cf90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cf92:	6822      	ldr	r2, [r4, #0]
 800cf94:	6893      	ldr	r3, [r2, #8]
 800cf96:	4808      	ldr	r0, [pc, #32]	; (800cfb8 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 800cf98:	4003      	ands	r3, r0
 800cf9a:	4319      	orrs	r1, r3
 800cf9c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cf9e:	0020      	movs	r0, r4
 800cfa0:	f7fe f948 	bl	800b234 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cfa8:	2320      	movs	r3, #32
 800cfaa:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800cfac:	2300      	movs	r3, #0
 800cfae:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800cfb0:	2000      	movs	r0, #0
}
 800cfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800cfb4:	2002      	movs	r0, #2
 800cfb6:	e7fc      	b.n	800cfb2 <HAL_UARTEx_SetRxFifoThreshold+0x42>
 800cfb8:	f1ffffff 	.word	0xf1ffffff

0800cfbc <HAL_UARTEx_SetTxFifoThreshold>:
{
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800cfc0:	237c      	movs	r3, #124	; 0x7c
 800cfc2:	5cc3      	ldrb	r3, [r0, r3]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d01b      	beq.n	800d000 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800cfc8:	257c      	movs	r5, #124	; 0x7c
 800cfca:	2001      	movs	r0, #1
 800cfcc:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800cfce:	2680      	movs	r6, #128	; 0x80
 800cfd0:	2324      	movs	r3, #36	; 0x24
 800cfd2:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	4382      	bics	r2, r0
 800cfdc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfde:	6822      	ldr	r2, [r4, #0]
 800cfe0:	6893      	ldr	r3, [r2, #8]
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	08db      	lsrs	r3, r3, #3
 800cfe6:	4319      	orrs	r1, r3
 800cfe8:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800cfea:	0020      	movs	r0, r4
 800cfec:	f7fe f922 	bl	800b234 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800cff4:	2320      	movs	r3, #32
 800cff6:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800cff8:	2300      	movs	r3, #0
 800cffa:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800cffc:	2000      	movs	r0, #0
}
 800cffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800d000:	2002      	movs	r0, #2
 800d002:	e7fc      	b.n	800cffe <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800d004 <HAL_UARTEx_DisableFifoMode>:
{
 800d004:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800d006:	237c      	movs	r3, #124	; 0x7c
 800d008:	5cc3      	ldrb	r3, [r0, r3]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d015      	beq.n	800d03a <HAL_UARTEx_DisableFifoMode+0x36>
 800d00e:	247c      	movs	r4, #124	; 0x7c
 800d010:	2601      	movs	r6, #1
 800d012:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 800d014:	2580      	movs	r5, #128	; 0x80
 800d016:	2324      	movs	r3, #36	; 0x24
 800d018:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d01a:	6802      	ldr	r2, [r0, #0]
 800d01c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d01e:	6811      	ldr	r1, [r2, #0]
 800d020:	43b1      	bics	r1, r6
 800d022:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d024:	4a06      	ldr	r2, [pc, #24]	; (800d040 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800d026:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d028:	2200      	movs	r2, #0
 800d02a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d02c:	6801      	ldr	r1, [r0, #0]
 800d02e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d030:	2320      	movs	r3, #32
 800d032:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800d034:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800d036:	2000      	movs	r0, #0
}
 800d038:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800d03a:	2002      	movs	r0, #2
 800d03c:	e7fc      	b.n	800d038 <HAL_UARTEx_DisableFifoMode+0x34>
 800d03e:	46c0      	nop			; (mov r8, r8)
 800d040:	dfffffff 	.word	0xdfffffff

0800d044 <HAL_UART_IRQHandler>:
{
 800d044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d046:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d048:	6801      	ldr	r1, [r0, #0]
 800d04a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d04c:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d04e:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800d050:	220f      	movs	r2, #15
 800d052:	401a      	ands	r2, r3
  if (errorflags == 0U)
 800d054:	d10b      	bne.n	800d06e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d056:	069e      	lsls	r6, r3, #26
 800d058:	d509      	bpl.n	800d06e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d05a:	06ae      	lsls	r6, r5, #26
 800d05c:	d401      	bmi.n	800d062 <HAL_UART_IRQHandler+0x1e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d05e:	00c6      	lsls	r6, r0, #3
 800d060:	d505      	bpl.n	800d06e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800d062:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <HAL_UART_IRQHandler+0x28>
        huart->RxISR(huart);
 800d068:	0020      	movs	r0, r4
 800d06a:	4798      	blx	r3
}
 800d06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((errorflags != 0U)
 800d06e:	2a00      	cmp	r2, #0
 800d070:	d069      	beq.n	800d146 <HAL_UART_IRQHandler+0x102>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d072:	4a44      	ldr	r2, [pc, #272]	; (800d184 <HAL_UART_IRQHandler+0x140>)
 800d074:	4002      	ands	r2, r0
 800d076:	d103      	bne.n	800d080 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800d078:	2690      	movs	r6, #144	; 0x90
 800d07a:	0076      	lsls	r6, r6, #1
 800d07c:	4235      	tst	r5, r6
 800d07e:	d062      	beq.n	800d146 <HAL_UART_IRQHandler+0x102>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d080:	07de      	lsls	r6, r3, #31
 800d082:	d507      	bpl.n	800d094 <HAL_UART_IRQHandler+0x50>
 800d084:	05ee      	lsls	r6, r5, #23
 800d086:	d505      	bpl.n	800d094 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d088:	2701      	movs	r7, #1
 800d08a:	620f      	str	r7, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d08c:	2688      	movs	r6, #136	; 0x88
 800d08e:	59a1      	ldr	r1, [r4, r6]
 800d090:	4339      	orrs	r1, r7
 800d092:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d094:	0799      	lsls	r1, r3, #30
 800d096:	d509      	bpl.n	800d0ac <HAL_UART_IRQHandler+0x68>
 800d098:	07c1      	lsls	r1, r0, #31
 800d09a:	d507      	bpl.n	800d0ac <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d09c:	6821      	ldr	r1, [r4, #0]
 800d09e:	2602      	movs	r6, #2
 800d0a0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0a2:	3686      	adds	r6, #134	; 0x86
 800d0a4:	59a1      	ldr	r1, [r4, r6]
 800d0a6:	2704      	movs	r7, #4
 800d0a8:	4339      	orrs	r1, r7
 800d0aa:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ac:	0759      	lsls	r1, r3, #29
 800d0ae:	d509      	bpl.n	800d0c4 <HAL_UART_IRQHandler+0x80>
 800d0b0:	07c1      	lsls	r1, r0, #31
 800d0b2:	d507      	bpl.n	800d0c4 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0b4:	6821      	ldr	r1, [r4, #0]
 800d0b6:	2604      	movs	r6, #4
 800d0b8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0ba:	3684      	adds	r6, #132	; 0x84
 800d0bc:	59a1      	ldr	r1, [r4, r6]
 800d0be:	2702      	movs	r7, #2
 800d0c0:	4339      	orrs	r1, r7
 800d0c2:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d0c4:	0719      	lsls	r1, r3, #28
 800d0c6:	d50a      	bpl.n	800d0de <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d0c8:	06a9      	lsls	r1, r5, #26
 800d0ca:	d401      	bmi.n	800d0d0 <HAL_UART_IRQHandler+0x8c>
 800d0cc:	2a00      	cmp	r2, #0
 800d0ce:	d006      	beq.n	800d0de <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d0d0:	6822      	ldr	r2, [r4, #0]
 800d0d2:	2608      	movs	r6, #8
 800d0d4:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d0d6:	2188      	movs	r1, #136	; 0x88
 800d0d8:	5862      	ldr	r2, [r4, r1]
 800d0da:	4332      	orrs	r2, r6
 800d0dc:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d0de:	2288      	movs	r2, #136	; 0x88
 800d0e0:	58a2      	ldr	r2, [r4, r2]
 800d0e2:	2a00      	cmp	r2, #0
 800d0e4:	d0c2      	beq.n	800d06c <HAL_UART_IRQHandler+0x28>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0e6:	069b      	lsls	r3, r3, #26
 800d0e8:	d508      	bpl.n	800d0fc <HAL_UART_IRQHandler+0xb8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0ea:	06ab      	lsls	r3, r5, #26
 800d0ec:	d401      	bmi.n	800d0f2 <HAL_UART_IRQHandler+0xae>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0ee:	00c3      	lsls	r3, r0, #3
 800d0f0:	d504      	bpl.n	800d0fc <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 800d0f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800d0fc:	2388      	movs	r3, #136	; 0x88
 800d0fe:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	065b      	lsls	r3, r3, #25
 800d106:	d401      	bmi.n	800d10c <HAL_UART_IRQHandler+0xc8>
 800d108:	0713      	lsls	r3, r2, #28
 800d10a:	d518      	bpl.n	800d13e <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800d10c:	0020      	movs	r0, r4
 800d10e:	f7fe f96b 	bl	800b3e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	689a      	ldr	r2, [r3, #8]
 800d116:	0652      	lsls	r2, r2, #25
 800d118:	d5a8      	bpl.n	800d06c <HAL_UART_IRQHandler+0x28>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	2140      	movs	r1, #64	; 0x40
 800d11e:	438a      	bics	r2, r1
 800d120:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d122:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d124:	2b00      	cmp	r3, #0
 800d126:	d0a1      	beq.n	800d06c <HAL_UART_IRQHandler+0x28>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d128:	4a17      	ldr	r2, [pc, #92]	; (800d188 <HAL_UART_IRQHandler+0x144>)
 800d12a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d12c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d12e:	f7fe fb67 	bl	800b800 <HAL_DMA_Abort_IT>
 800d132:	2800      	cmp	r0, #0
 800d134:	d09a      	beq.n	800d06c <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d136:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d138:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d13a:	4798      	blx	r3
 800d13c:	e796      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d13e:	2388      	movs	r3, #136	; 0x88
 800d140:	2200      	movs	r2, #0
 800d142:	50e2      	str	r2, [r4, r3]
 800d144:	e792      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d146:	02da      	lsls	r2, r3, #11
 800d148:	d501      	bpl.n	800d14e <HAL_UART_IRQHandler+0x10a>
 800d14a:	0242      	lsls	r2, r0, #9
 800d14c:	d40c      	bmi.n	800d168 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d14e:	061a      	lsls	r2, r3, #24
 800d150:	d50e      	bpl.n	800d170 <HAL_UART_IRQHandler+0x12c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d152:	062a      	lsls	r2, r5, #24
 800d154:	d401      	bmi.n	800d15a <HAL_UART_IRQHandler+0x116>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d156:	0202      	lsls	r2, r0, #8
 800d158:	d50a      	bpl.n	800d170 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 800d15a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d100      	bne.n	800d162 <HAL_UART_IRQHandler+0x11e>
 800d160:	e784      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
      huart->TxISR(huart);
 800d162:	0020      	movs	r0, r4
 800d164:	4798      	blx	r3
 800d166:	e781      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d168:	2380      	movs	r3, #128	; 0x80
 800d16a:	035b      	lsls	r3, r3, #13
 800d16c:	620b      	str	r3, [r1, #32]
 800d16e:	e77d      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d170:	065b      	lsls	r3, r3, #25
 800d172:	d400      	bmi.n	800d176 <HAL_UART_IRQHandler+0x132>
 800d174:	e77a      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
 800d176:	066b      	lsls	r3, r5, #25
 800d178:	d400      	bmi.n	800d17c <HAL_UART_IRQHandler+0x138>
 800d17a:	e777      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
    UART_EndTransmit_IT(huart);
 800d17c:	0020      	movs	r0, r4
 800d17e:	f7ff fd9b 	bl	800ccb8 <UART_EndTransmit_IT>
 800d182:	e773      	b.n	800d06c <HAL_UART_IRQHandler+0x28>
 800d184:	10000001 	.word	0x10000001
 800d188:	0800b4f3 	.word	0x0800b4f3

0800d18c <HAL_UART_Receive_IT>:
{
 800d18c:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800d18e:	2384      	movs	r3, #132	; 0x84
 800d190:	58c3      	ldr	r3, [r0, r3]
 800d192:	2b20      	cmp	r3, #32
 800d194:	d000      	beq.n	800d198 <HAL_UART_Receive_IT+0xc>
 800d196:	e096      	b.n	800d2c6 <HAL_UART_Receive_IT+0x13a>
    if ((pData == NULL) || (Size == 0U))
 800d198:	2900      	cmp	r1, #0
 800d19a:	d100      	bne.n	800d19e <HAL_UART_Receive_IT+0x12>
 800d19c:	e095      	b.n	800d2ca <HAL_UART_Receive_IT+0x13e>
 800d19e:	2a00      	cmp	r2, #0
 800d1a0:	d100      	bne.n	800d1a4 <HAL_UART_Receive_IT+0x18>
 800d1a2:	e094      	b.n	800d2ce <HAL_UART_Receive_IT+0x142>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1a4:	6883      	ldr	r3, [r0, #8]
 800d1a6:	2480      	movs	r4, #128	; 0x80
 800d1a8:	0164      	lsls	r4, r4, #5
 800d1aa:	42a3      	cmp	r3, r4
 800d1ac:	d01b      	beq.n	800d1e6 <HAL_UART_Receive_IT+0x5a>
    __HAL_LOCK(huart);
 800d1ae:	247c      	movs	r4, #124	; 0x7c
 800d1b0:	5d04      	ldrb	r4, [r0, r4]
 800d1b2:	2c01      	cmp	r4, #1
 800d1b4:	d100      	bne.n	800d1b8 <HAL_UART_Receive_IT+0x2c>
 800d1b6:	e08c      	b.n	800d2d2 <HAL_UART_Receive_IT+0x146>
 800d1b8:	247c      	movs	r4, #124	; 0x7c
 800d1ba:	2501      	movs	r5, #1
 800d1bc:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 800d1be:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 800d1c0:	215c      	movs	r1, #92	; 0x5c
 800d1c2:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 800d1c4:	3102      	adds	r1, #2
 800d1c6:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 800d1c8:	2100      	movs	r1, #0
 800d1ca:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800d1cc:	2180      	movs	r1, #128	; 0x80
 800d1ce:	0149      	lsls	r1, r1, #5
 800d1d0:	428b      	cmp	r3, r1
 800d1d2:	d00f      	beq.n	800d1f4 <HAL_UART_Receive_IT+0x68>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d11c      	bne.n	800d212 <HAL_UART_Receive_IT+0x86>
 800d1d8:	6903      	ldr	r3, [r0, #16]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d115      	bne.n	800d20a <HAL_UART_Receive_IT+0x7e>
 800d1de:	3360      	adds	r3, #96	; 0x60
 800d1e0:	21ff      	movs	r1, #255	; 0xff
 800d1e2:	52c1      	strh	r1, [r0, r3]
 800d1e4:	e01c      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1e6:	6904      	ldr	r4, [r0, #16]
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d1e0      	bne.n	800d1ae <HAL_UART_Receive_IT+0x22>
      if ((((uint32_t)pData) & 1U) != 0U)
 800d1ec:	07cc      	lsls	r4, r1, #31
 800d1ee:	d5de      	bpl.n	800d1ae <HAL_UART_Receive_IT+0x22>
        return  HAL_ERROR;
 800d1f0:	2001      	movs	r0, #1
 800d1f2:	e069      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
    UART_MASK_COMPUTATION(huart);
 800d1f4:	6903      	ldr	r3, [r0, #16]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d103      	bne.n	800d202 <HAL_UART_Receive_IT+0x76>
 800d1fa:	3360      	adds	r3, #96	; 0x60
 800d1fc:	4936      	ldr	r1, [pc, #216]	; (800d2d8 <HAL_UART_Receive_IT+0x14c>)
 800d1fe:	52c1      	strh	r1, [r0, r3]
 800d200:	e00e      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
 800d202:	2360      	movs	r3, #96	; 0x60
 800d204:	21ff      	movs	r1, #255	; 0xff
 800d206:	52c1      	strh	r1, [r0, r3]
 800d208:	e00a      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
 800d20a:	2360      	movs	r3, #96	; 0x60
 800d20c:	217f      	movs	r1, #127	; 0x7f
 800d20e:	52c1      	strh	r1, [r0, r3]
 800d210:	e006      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
 800d212:	2180      	movs	r1, #128	; 0x80
 800d214:	0549      	lsls	r1, r1, #21
 800d216:	428b      	cmp	r3, r1
 800d218:	d023      	beq.n	800d262 <HAL_UART_Receive_IT+0xd6>
 800d21a:	2360      	movs	r3, #96	; 0x60
 800d21c:	2100      	movs	r1, #0
 800d21e:	52c1      	strh	r1, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d220:	2388      	movs	r3, #136	; 0x88
 800d222:	2100      	movs	r1, #0
 800d224:	50c1      	str	r1, [r0, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d226:	3b04      	subs	r3, #4
 800d228:	3122      	adds	r1, #34	; 0x22
 800d22a:	50c1      	str	r1, [r0, r3]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d22c:	6801      	ldr	r1, [r0, #0]
 800d22e:	688b      	ldr	r3, [r1, #8]
 800d230:	2401      	movs	r4, #1
 800d232:	4323      	orrs	r3, r4
 800d234:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d236:	2380      	movs	r3, #128	; 0x80
 800d238:	059b      	lsls	r3, r3, #22
 800d23a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800d23c:	4299      	cmp	r1, r3
 800d23e:	d01b      	beq.n	800d278 <HAL_UART_Receive_IT+0xec>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d240:	2380      	movs	r3, #128	; 0x80
 800d242:	015b      	lsls	r3, r3, #5
 800d244:	6882      	ldr	r2, [r0, #8]
 800d246:	429a      	cmp	r2, r3
 800d248:	d037      	beq.n	800d2ba <HAL_UART_Receive_IT+0x12e>
        huart->RxISR = UART_RxISR_8BIT;
 800d24a:	4b24      	ldr	r3, [pc, #144]	; (800d2dc <HAL_UART_Receive_IT+0x150>)
 800d24c:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800d24e:	237c      	movs	r3, #124	; 0x7c
 800d250:	2200      	movs	r2, #0
 800d252:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d254:	6802      	ldr	r2, [r0, #0]
 800d256:	6811      	ldr	r1, [r2, #0]
 800d258:	33a4      	adds	r3, #164	; 0xa4
 800d25a:	430b      	orrs	r3, r1
 800d25c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800d25e:	2000      	movs	r0, #0
 800d260:	e032      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
    UART_MASK_COMPUTATION(huart);
 800d262:	6903      	ldr	r3, [r0, #16]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d103      	bne.n	800d270 <HAL_UART_Receive_IT+0xe4>
 800d268:	3360      	adds	r3, #96	; 0x60
 800d26a:	217f      	movs	r1, #127	; 0x7f
 800d26c:	52c1      	strh	r1, [r0, r3]
 800d26e:	e7d7      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
 800d270:	2360      	movs	r3, #96	; 0x60
 800d272:	213f      	movs	r1, #63	; 0x3f
 800d274:	52c1      	strh	r1, [r0, r3]
 800d276:	e7d3      	b.n	800d220 <HAL_UART_Receive_IT+0x94>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d278:	2368      	movs	r3, #104	; 0x68
 800d27a:	5ac3      	ldrh	r3, [r0, r3]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d8df      	bhi.n	800d240 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d280:	2380      	movs	r3, #128	; 0x80
 800d282:	015b      	lsls	r3, r3, #5
 800d284:	6882      	ldr	r2, [r0, #8]
 800d286:	429a      	cmp	r2, r3
 800d288:	d011      	beq.n	800d2ae <HAL_UART_Receive_IT+0x122>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d28a:	4b15      	ldr	r3, [pc, #84]	; (800d2e0 <HAL_UART_Receive_IT+0x154>)
 800d28c:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800d28e:	237c      	movs	r3, #124	; 0x7c
 800d290:	2200      	movs	r2, #0
 800d292:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d294:	6802      	ldr	r2, [r0, #0]
 800d296:	6811      	ldr	r1, [r2, #0]
 800d298:	3384      	adds	r3, #132	; 0x84
 800d29a:	430b      	orrs	r3, r1
 800d29c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d29e:	6802      	ldr	r2, [r0, #0]
 800d2a0:	6891      	ldr	r1, [r2, #8]
 800d2a2:	2380      	movs	r3, #128	; 0x80
 800d2a4:	055b      	lsls	r3, r3, #21
 800d2a6:	430b      	orrs	r3, r1
 800d2a8:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e00c      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2ae:	6903      	ldr	r3, [r0, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d1ea      	bne.n	800d28a <HAL_UART_Receive_IT+0xfe>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d2b4:	4b0b      	ldr	r3, [pc, #44]	; (800d2e4 <HAL_UART_Receive_IT+0x158>)
 800d2b6:	66c3      	str	r3, [r0, #108]	; 0x6c
 800d2b8:	e7e9      	b.n	800d28e <HAL_UART_Receive_IT+0x102>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2ba:	6903      	ldr	r3, [r0, #16]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1c4      	bne.n	800d24a <HAL_UART_Receive_IT+0xbe>
        huart->RxISR = UART_RxISR_16BIT;
 800d2c0:	4b09      	ldr	r3, [pc, #36]	; (800d2e8 <HAL_UART_Receive_IT+0x15c>)
 800d2c2:	66c3      	str	r3, [r0, #108]	; 0x6c
 800d2c4:	e7c3      	b.n	800d24e <HAL_UART_Receive_IT+0xc2>
    return HAL_BUSY;
 800d2c6:	2002      	movs	r0, #2
}
 800d2c8:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	e7fc      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	e7fa      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
    __HAL_LOCK(huart);
 800d2d2:	2002      	movs	r0, #2
 800d2d4:	e7f8      	b.n	800d2c8 <HAL_UART_Receive_IT+0x13c>
 800d2d6:	46c0      	nop			; (mov r8, r8)
 800d2d8:	000001ff 	.word	0x000001ff
 800d2dc:	0800cc51 	.word	0x0800cc51
 800d2e0:	0800cba1 	.word	0x0800cba1
 800d2e4:	0800ca89 	.word	0x0800ca89
 800d2e8:	0800cb39 	.word	0x0800cb39

0800d2ec <HAL_UART_Transmit_IT>:
{
 800d2ec:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800d2ee:	2380      	movs	r3, #128	; 0x80
 800d2f0:	58c3      	ldr	r3, [r0, r3]
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	d154      	bne.n	800d3a0 <HAL_UART_Transmit_IT+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800d2f6:	2900      	cmp	r1, #0
 800d2f8:	d054      	beq.n	800d3a4 <HAL_UART_Transmit_IT+0xb8>
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	d054      	beq.n	800d3a8 <HAL_UART_Transmit_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2fe:	6883      	ldr	r3, [r0, #8]
 800d300:	2480      	movs	r4, #128	; 0x80
 800d302:	0164      	lsls	r4, r4, #5
 800d304:	42a3      	cmp	r3, r4
 800d306:	d027      	beq.n	800d358 <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 800d308:	247c      	movs	r4, #124	; 0x7c
 800d30a:	5d04      	ldrb	r4, [r0, r4]
 800d30c:	2c01      	cmp	r4, #1
 800d30e:	d04d      	beq.n	800d3ac <HAL_UART_Transmit_IT+0xc0>
 800d310:	247c      	movs	r4, #124	; 0x7c
 800d312:	2501      	movs	r5, #1
 800d314:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 800d316:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d318:	2154      	movs	r1, #84	; 0x54
 800d31a:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 800d31c:	3102      	adds	r1, #2
 800d31e:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 800d320:	2200      	movs	r2, #0
 800d322:	6702      	str	r2, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d324:	3132      	adds	r1, #50	; 0x32
 800d326:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d328:	3280      	adds	r2, #128	; 0x80
 800d32a:	3967      	subs	r1, #103	; 0x67
 800d32c:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d32e:	2280      	movs	r2, #128	; 0x80
 800d330:	0592      	lsls	r2, r2, #22
 800d332:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800d334:	4291      	cmp	r1, r2
 800d336:	d016      	beq.n	800d366 <HAL_UART_Transmit_IT+0x7a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d338:	2280      	movs	r2, #128	; 0x80
 800d33a:	0152      	lsls	r2, r2, #5
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d029      	beq.n	800d394 <HAL_UART_Transmit_IT+0xa8>
        huart->TxISR = UART_TxISR_8BIT;
 800d340:	4b1b      	ldr	r3, [pc, #108]	; (800d3b0 <HAL_UART_Transmit_IT+0xc4>)
 800d342:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800d344:	237c      	movs	r3, #124	; 0x7c
 800d346:	2200      	movs	r2, #0
 800d348:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d34a:	6802      	ldr	r2, [r0, #0]
 800d34c:	6813      	ldr	r3, [r2, #0]
 800d34e:	2180      	movs	r1, #128	; 0x80
 800d350:	430b      	orrs	r3, r1
 800d352:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800d354:	2000      	movs	r0, #0
 800d356:	e024      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d358:	6904      	ldr	r4, [r0, #16]
 800d35a:	2c00      	cmp	r4, #0
 800d35c:	d1d4      	bne.n	800d308 <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800d35e:	07cc      	lsls	r4, r1, #31
 800d360:	d5d2      	bpl.n	800d308 <HAL_UART_Transmit_IT+0x1c>
        return  HAL_ERROR;
 800d362:	2001      	movs	r0, #1
 800d364:	e01d      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d366:	2280      	movs	r2, #128	; 0x80
 800d368:	0152      	lsls	r2, r2, #5
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d00c      	beq.n	800d388 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d36e:	4b11      	ldr	r3, [pc, #68]	; (800d3b4 <HAL_UART_Transmit_IT+0xc8>)
 800d370:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800d372:	237c      	movs	r3, #124	; 0x7c
 800d374:	2200      	movs	r2, #0
 800d376:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d378:	6802      	ldr	r2, [r0, #0]
 800d37a:	6891      	ldr	r1, [r2, #8]
 800d37c:	2380      	movs	r3, #128	; 0x80
 800d37e:	041b      	lsls	r3, r3, #16
 800d380:	430b      	orrs	r3, r1
 800d382:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800d384:	2000      	movs	r0, #0
 800d386:	e00c      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d388:	6903      	ldr	r3, [r0, #16]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1ef      	bne.n	800d36e <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d38e:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <HAL_UART_Transmit_IT+0xcc>)
 800d390:	6703      	str	r3, [r0, #112]	; 0x70
 800d392:	e7ee      	b.n	800d372 <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d394:	6903      	ldr	r3, [r0, #16]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1d2      	bne.n	800d340 <HAL_UART_Transmit_IT+0x54>
        huart->TxISR = UART_TxISR_16BIT;
 800d39a:	4b08      	ldr	r3, [pc, #32]	; (800d3bc <HAL_UART_Transmit_IT+0xd0>)
 800d39c:	6703      	str	r3, [r0, #112]	; 0x70
 800d39e:	e7d1      	b.n	800d344 <HAL_UART_Transmit_IT+0x58>
    return HAL_BUSY;
 800d3a0:	2002      	movs	r0, #2
}
 800d3a2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	e7fc      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	e7fa      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
    __HAL_LOCK(huart);
 800d3ac:	2002      	movs	r0, #2
 800d3ae:	e7f8      	b.n	800d3a2 <HAL_UART_Transmit_IT+0xb6>
 800d3b0:	0800b3a5 	.word	0x0800b3a5
 800d3b4:	0800b301 	.word	0x0800b301
 800d3b8:	0800b29f 	.word	0x0800b29f
 800d3bc:	0800b35d 	.word	0x0800b35d

0800d3c0 <HAL_UART_DeInit>:
{
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800d3c4:	d019      	beq.n	800d3fa <HAL_UART_DeInit+0x3a>
  huart->gState = HAL_UART_STATE_BUSY;
 800d3c6:	2680      	movs	r6, #128	; 0x80
 800d3c8:	2324      	movs	r3, #36	; 0x24
 800d3ca:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 800d3cc:	6802      	ldr	r2, [r0, #0]
 800d3ce:	6813      	ldr	r3, [r2, #0]
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	438b      	bics	r3, r1
 800d3d4:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800d3d6:	6803      	ldr	r3, [r0, #0]
 800d3d8:	2500      	movs	r5, #0
 800d3da:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d3dc:	6803      	ldr	r3, [r0, #0]
 800d3de:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d3e0:	6803      	ldr	r3, [r0, #0]
 800d3e2:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800d3e4:	f7fd fc06 	bl	800abf4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3e8:	2388      	movs	r3, #136	; 0x88
 800d3ea:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 800d3ec:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 800d3ee:	3b04      	subs	r3, #4
 800d3f0:	50e5      	str	r5, [r4, r3]
  __HAL_UNLOCK(huart);
 800d3f2:	3b08      	subs	r3, #8
 800d3f4:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 800d3f6:	2000      	movs	r0, #0
}
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	e7fc      	b.n	800d3f8 <HAL_UART_DeInit+0x38>

0800d3fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d3fe:	b570      	push	{r4, r5, r6, lr}
 800d400:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d402:	d05e      	beq.n	800d4c2 <HAL_SPI_Init+0xc4>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d404:	2300      	movs	r3, #0
 800d406:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d408:	335d      	adds	r3, #93	; 0x5d
 800d40a:	5cc3      	ldrb	r3, [r0, r3]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d04c      	beq.n	800d4aa <HAL_SPI_Init+0xac>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d410:	235d      	movs	r3, #93	; 0x5d
 800d412:	2202      	movs	r2, #2
 800d414:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	6813      	ldr	r3, [r2, #0]
 800d41a:	2140      	movs	r1, #64	; 0x40
 800d41c:	438b      	bics	r3, r1
 800d41e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d420:	68e3      	ldr	r3, [r4, #12]
 800d422:	22e0      	movs	r2, #224	; 0xe0
 800d424:	00d2      	lsls	r2, r2, #3
 800d426:	4293      	cmp	r3, r2
 800d428:	d945      	bls.n	800d4b6 <HAL_SPI_Init+0xb8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d42a:	2100      	movs	r1, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d42c:	22f0      	movs	r2, #240	; 0xf0
 800d42e:	0112      	lsls	r2, r2, #4
 800d430:	4293      	cmp	r3, r2
 800d432:	d005      	beq.n	800d440 <HAL_SPI_Init+0x42>
 800d434:	22e0      	movs	r2, #224	; 0xe0
 800d436:	00d2      	lsls	r2, r2, #3
 800d438:	4293      	cmp	r3, r2
 800d43a:	d001      	beq.n	800d440 <HAL_SPI_Init+0x42>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d43c:	2200      	movs	r2, #0
 800d43e:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d440:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d442:	2a00      	cmp	r2, #0
 800d444:	d105      	bne.n	800d452 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d446:	22e0      	movs	r2, #224	; 0xe0
 800d448:	00d2      	lsls	r2, r2, #3
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d936      	bls.n	800d4bc <HAL_SPI_Init+0xbe>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d44e:	2302      	movs	r3, #2
 800d450:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d452:	6822      	ldr	r2, [r4, #0]
 800d454:	6863      	ldr	r3, [r4, #4]
 800d456:	68a0      	ldr	r0, [r4, #8]
 800d458:	4303      	orrs	r3, r0
 800d45a:	6920      	ldr	r0, [r4, #16]
 800d45c:	4303      	orrs	r3, r0
 800d45e:	6960      	ldr	r0, [r4, #20]
 800d460:	4303      	orrs	r3, r0
 800d462:	2080      	movs	r0, #128	; 0x80
 800d464:	0080      	lsls	r0, r0, #2
 800d466:	69a5      	ldr	r5, [r4, #24]
 800d468:	4028      	ands	r0, r5
 800d46a:	4303      	orrs	r3, r0
 800d46c:	69e0      	ldr	r0, [r4, #28]
 800d46e:	4303      	orrs	r3, r0
 800d470:	6a20      	ldr	r0, [r4, #32]
 800d472:	4303      	orrs	r3, r0
 800d474:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d476:	4303      	orrs	r3, r0
 800d478:	6013      	str	r3, [r2, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d47a:	6822      	ldr	r2, [r4, #0]
 800d47c:	8b60      	ldrh	r0, [r4, #26]
 800d47e:	2304      	movs	r3, #4
 800d480:	4003      	ands	r3, r0
 800d482:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d484:	4303      	orrs	r3, r0
 800d486:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d488:	4303      	orrs	r3, r0
 800d48a:	68e0      	ldr	r0, [r4, #12]
 800d48c:	4303      	orrs	r3, r0
 800d48e:	430b      	orrs	r3, r1
 800d490:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d492:	6822      	ldr	r2, [r4, #0]
 800d494:	69d3      	ldr	r3, [r2, #28]
 800d496:	490c      	ldr	r1, [pc, #48]	; (800d4c8 <HAL_SPI_Init+0xca>)
 800d498:	400b      	ands	r3, r1
 800d49a:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d49c:	2300      	movs	r3, #0
 800d49e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d4a0:	335d      	adds	r3, #93	; 0x5d
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 800d4a6:	2000      	movs	r0, #0
}
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800d4aa:	335c      	adds	r3, #92	; 0x5c
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 800d4b0:	f7fd fc66 	bl	800ad80 <HAL_SPI_MspInit>
 800d4b4:	e7ac      	b.n	800d410 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d4b6:	2180      	movs	r1, #128	; 0x80
 800d4b8:	0149      	lsls	r1, r1, #5
 800d4ba:	e7b7      	b.n	800d42c <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	6323      	str	r3, [r4, #48]	; 0x30
 800d4c0:	e7c7      	b.n	800d452 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 800d4c2:	2001      	movs	r0, #1
 800d4c4:	e7f0      	b.n	800d4a8 <HAL_SPI_Init+0xaa>
 800d4c6:	46c0      	nop			; (mov r8, r8)
 800d4c8:	fffff7ff 	.word	0xfffff7ff

0800d4cc <HAL_RTCEx_WakeUpTimerIRQHandler>:
{
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	0004      	movs	r4, r0
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800d4d0:	6803      	ldr	r3, [r0, #0]
 800d4d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4d4:	0752      	lsls	r2, r2, #29
 800d4d6:	d403      	bmi.n	800d4e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
  hrtc->State = HAL_RTC_STATE_READY;
 800d4d8:	2329      	movs	r3, #41	; 0x29
 800d4da:	2201      	movs	r2, #1
 800d4dc:	54e2      	strb	r2, [r4, r3]
}
 800d4de:	bd10      	pop	{r4, pc}
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d4e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4e2:	2104      	movs	r1, #4
 800d4e4:	430a      	orrs	r2, r1
 800d4e6:	65da      	str	r2, [r3, #92]	; 0x5c
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800d4e8:	f7fd fb24 	bl	800ab34 <HAL_RTCEx_WakeUpTimerEventCallback>
 800d4ec:	e7f4      	b.n	800d4d8 <HAL_RTCEx_WakeUpTimerIRQHandler+0xc>

0800d4ee <HAL_RTC_AlarmIRQHandler>:
{
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	0004      	movs	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800d4f2:	6803      	ldr	r3, [r0, #0]
 800d4f4:	699a      	ldr	r2, [r3, #24]
 800d4f6:	04d2      	lsls	r2, r2, #19
 800d4f8:	d502      	bpl.n	800d500 <HAL_RTC_AlarmIRQHandler+0x12>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800d4fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4fc:	07d2      	lsls	r2, r2, #31
 800d4fe:	d40a      	bmi.n	800d516 <HAL_RTC_AlarmIRQHandler+0x28>
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	699a      	ldr	r2, [r3, #24]
 800d504:	0492      	lsls	r2, r2, #18
 800d506:	d502      	bpl.n	800d50e <HAL_RTC_AlarmIRQHandler+0x20>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800d508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d50a:	0792      	lsls	r2, r2, #30
 800d50c:	d40a      	bmi.n	800d524 <HAL_RTC_AlarmIRQHandler+0x36>
  hrtc->State = HAL_RTC_STATE_READY;
 800d50e:	2329      	movs	r3, #41	; 0x29
 800d510:	2201      	movs	r2, #1
 800d512:	54e2      	strb	r2, [r4, r3]
}
 800d514:	bd10      	pop	{r4, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d516:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d518:	2101      	movs	r1, #1
 800d51a:	430a      	orrs	r2, r1
 800d51c:	65da      	str	r2, [r3, #92]	; 0x5c
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d51e:	f7fd fb0f 	bl	800ab40 <HAL_RTC_AlarmAEventCallback>
 800d522:	e7ed      	b.n	800d500 <HAL_RTC_AlarmIRQHandler+0x12>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800d524:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d526:	2102      	movs	r1, #2
 800d528:	430a      	orrs	r2, r1
 800d52a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d52c:	e7ef      	b.n	800d50e <HAL_RTC_AlarmIRQHandler+0x20>

0800d52e <HAL_RTC_GetDate>:
{
 800d52e:	b570      	push	{r4, r5, r6, lr}
 800d530:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d532:	6803      	ldr	r3, [r0, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	490f      	ldr	r1, [pc, #60]	; (800d574 <HAL_RTC_GetDate+0x46>)
 800d538:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d53a:	0c18      	lsrs	r0, r3, #16
 800d53c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d53e:	0a19      	lsrs	r1, r3, #8
 800d540:	261f      	movs	r6, #31
 800d542:	400e      	ands	r6, r1
 800d544:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d546:	253f      	movs	r5, #63	; 0x3f
 800d548:	401d      	ands	r5, r3
 800d54a:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800d54c:	0b5b      	lsrs	r3, r3, #13
 800d54e:	2107      	movs	r1, #7
 800d550:	400b      	ands	r3, r1
 800d552:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800d554:	2a00      	cmp	r2, #0
 800d556:	d10a      	bne.n	800d56e <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d558:	f7fd ffd3 	bl	800b502 <RTC_Bcd2ToByte>
 800d55c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d55e:	0030      	movs	r0, r6
 800d560:	f7fd ffcf 	bl	800b502 <RTC_Bcd2ToByte>
 800d564:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d566:	0028      	movs	r0, r5
 800d568:	f7fd ffcb 	bl	800b502 <RTC_Bcd2ToByte>
 800d56c:	70a0      	strb	r0, [r4, #2]
}
 800d56e:	2000      	movs	r0, #0
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	46c0      	nop			; (mov r8, r8)
 800d574:	00ffff3f 	.word	0x00ffff3f

0800d578 <HAL_RTC_GetTime>:
{
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d57c:	6803      	ldr	r3, [r0, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d582:	6803      	ldr	r3, [r0, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	045b      	lsls	r3, r3, #17
 800d588:	0c5b      	lsrs	r3, r3, #17
 800d58a:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d58c:	6803      	ldr	r3, [r0, #0]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	490e      	ldr	r1, [pc, #56]	; (800d5cc <HAL_RTC_GetTime+0x54>)
 800d592:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d594:	0c19      	lsrs	r1, r3, #16
 800d596:	203f      	movs	r0, #63	; 0x3f
 800d598:	4008      	ands	r0, r1
 800d59a:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d59c:	0a1e      	lsrs	r6, r3, #8
 800d59e:	257f      	movs	r5, #127	; 0x7f
 800d5a0:	402e      	ands	r6, r5
 800d5a2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d5a4:	401d      	ands	r5, r3
 800d5a6:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d5a8:	0d9b      	lsrs	r3, r3, #22
 800d5aa:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	d10a      	bne.n	800d5c6 <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d5b0:	f7fd ffa7 	bl	800b502 <RTC_Bcd2ToByte>
 800d5b4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d5b6:	0030      	movs	r0, r6
 800d5b8:	f7fd ffa3 	bl	800b502 <RTC_Bcd2ToByte>
 800d5bc:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d5be:	0028      	movs	r0, r5
 800d5c0:	f7fd ff9f 	bl	800b502 <RTC_Bcd2ToByte>
 800d5c4:	70a0      	strb	r0, [r4, #2]
}
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	46c0      	nop			; (mov r8, r8)
 800d5cc:	007f7f7f 	.word	0x007f7f7f

0800d5d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d5d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5d2:	2341      	movs	r3, #65	; 0x41
 800d5d4:	5cc3      	ldrb	r3, [r0, r3]
 800d5d6:	2b20      	cmp	r3, #32
 800d5d8:	d11e      	bne.n	800d618 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5da:	3320      	adds	r3, #32
 800d5dc:	5cc3      	ldrb	r3, [r0, r3]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d01c      	beq.n	800d61c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800d5e2:	2440      	movs	r4, #64	; 0x40
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	5503      	strb	r3, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d5e8:	2541      	movs	r5, #65	; 0x41
 800d5ea:	2224      	movs	r2, #36	; 0x24
 800d5ec:	5542      	strb	r2, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d5ee:	6806      	ldr	r6, [r0, #0]
 800d5f0:	6832      	ldr	r2, [r6, #0]
 800d5f2:	439a      	bics	r2, r3
 800d5f4:	6032      	str	r2, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d5f6:	6806      	ldr	r6, [r0, #0]
 800d5f8:	6832      	ldr	r2, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d5fa:	4f09      	ldr	r7, [pc, #36]	; (800d620 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 800d5fc:	403a      	ands	r2, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d5fe:	0209      	lsls	r1, r1, #8
 800d600:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d602:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d604:	6802      	ldr	r2, [r0, #0]
 800d606:	6811      	ldr	r1, [r2, #0]
 800d608:	430b      	orrs	r3, r1
 800d60a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d60c:	2320      	movs	r3, #32
 800d60e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d610:	2300      	movs	r3, #0
 800d612:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800d614:	0018      	movs	r0, r3
 800d616:	e000      	b.n	800d61a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  }
  else
  {
    return HAL_BUSY;
 800d618:	2002      	movs	r0, #2
  }
}
 800d61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800d61c:	2002      	movs	r0, #2
 800d61e:	e7fc      	b.n	800d61a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800d620:	fffff0ff 	.word	0xfffff0ff

0800d624 <HAL_I2CEx_ConfigAnalogFilter>:
{
 800d624:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d626:	2341      	movs	r3, #65	; 0x41
 800d628:	5cc3      	ldrb	r3, [r0, r3]
 800d62a:	2b20      	cmp	r3, #32
 800d62c:	d120      	bne.n	800d670 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
    __HAL_LOCK(hi2c);
 800d62e:	3320      	adds	r3, #32
 800d630:	5cc3      	ldrb	r3, [r0, r3]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d01e      	beq.n	800d674 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800d636:	2440      	movs	r4, #64	; 0x40
 800d638:	2301      	movs	r3, #1
 800d63a:	5503      	strb	r3, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d63c:	2541      	movs	r5, #65	; 0x41
 800d63e:	2224      	movs	r2, #36	; 0x24
 800d640:	5542      	strb	r2, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 800d642:	6806      	ldr	r6, [r0, #0]
 800d644:	6832      	ldr	r2, [r6, #0]
 800d646:	439a      	bics	r2, r3
 800d648:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d64a:	6806      	ldr	r6, [r0, #0]
 800d64c:	6832      	ldr	r2, [r6, #0]
 800d64e:	4f0a      	ldr	r7, [pc, #40]	; (800d678 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 800d650:	403a      	ands	r2, r7
 800d652:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800d654:	6806      	ldr	r6, [r0, #0]
 800d656:	6832      	ldr	r2, [r6, #0]
 800d658:	4311      	orrs	r1, r2
 800d65a:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 800d65c:	6802      	ldr	r2, [r0, #0]
 800d65e:	6811      	ldr	r1, [r2, #0]
 800d660:	430b      	orrs	r3, r1
 800d662:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d664:	2320      	movs	r3, #32
 800d666:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 800d668:	2300      	movs	r3, #0
 800d66a:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 800d66c:	0018      	movs	r0, r3
 800d66e:	e000      	b.n	800d672 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
    return HAL_BUSY;
 800d670:	2002      	movs	r0, #2
}
 800d672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800d674:	2002      	movs	r0, #2
 800d676:	e7fc      	b.n	800d672 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
 800d678:	ffffefff 	.word	0xffffefff

0800d67c <HAL_I2C_ER_IRQHandler>:
{
 800d67c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d67e:	6802      	ldr	r2, [r0, #0]
 800d680:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d682:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d684:	05dc      	lsls	r4, r3, #23
 800d686:	d508      	bpl.n	800d69a <HAL_I2C_ER_IRQHandler+0x1e>
 800d688:	060c      	lsls	r4, r1, #24
 800d68a:	d506      	bpl.n	800d69a <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d68c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d68e:	2501      	movs	r5, #1
 800d690:	432c      	orrs	r4, r5
 800d692:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d694:	2480      	movs	r4, #128	; 0x80
 800d696:	0064      	lsls	r4, r4, #1
 800d698:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d69a:	055a      	lsls	r2, r3, #21
 800d69c:	d509      	bpl.n	800d6b2 <HAL_I2C_ER_IRQHandler+0x36>
 800d69e:	060a      	lsls	r2, r1, #24
 800d6a0:	d507      	bpl.n	800d6b2 <HAL_I2C_ER_IRQHandler+0x36>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d6a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6a4:	2408      	movs	r4, #8
 800d6a6:	4322      	orrs	r2, r4
 800d6a8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d6aa:	6802      	ldr	r2, [r0, #0]
 800d6ac:	2480      	movs	r4, #128	; 0x80
 800d6ae:	00e4      	lsls	r4, r4, #3
 800d6b0:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d6b2:	059b      	lsls	r3, r3, #22
 800d6b4:	d509      	bpl.n	800d6ca <HAL_I2C_ER_IRQHandler+0x4e>
 800d6b6:	060b      	lsls	r3, r1, #24
 800d6b8:	d507      	bpl.n	800d6ca <HAL_I2C_ER_IRQHandler+0x4e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d6ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d6bc:	2202      	movs	r2, #2
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d6c2:	6803      	ldr	r3, [r0, #0]
 800d6c4:	32ff      	adds	r2, #255	; 0xff
 800d6c6:	32ff      	adds	r2, #255	; 0xff
 800d6c8:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800d6ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d6cc:	230b      	movs	r3, #11
 800d6ce:	420b      	tst	r3, r1
 800d6d0:	d100      	bne.n	800d6d4 <HAL_I2C_ER_IRQHandler+0x58>
}
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, tmperror);
 800d6d4:	f7fe f8d6 	bl	800b884 <I2C_ITError>
 800d6d8:	e7fb      	b.n	800d6d2 <HAL_I2C_ER_IRQHandler+0x56>

0800d6da <HAL_I2C_EV_IRQHandler>:
{
 800d6da:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d6dc:	6803      	ldr	r3, [r0, #0]
 800d6de:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d6e0:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800d6e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d000      	beq.n	800d6ea <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800d6e8:	4798      	blx	r3
}
 800d6ea:	bd10      	pop	{r4, pc}

0800d6ec <HAL_I2C_Init>:
{
 800d6ec:	b510      	push	{r4, lr}
 800d6ee:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800d6f0:	d059      	beq.n	800d7a6 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d6f2:	2341      	movs	r3, #65	; 0x41
 800d6f4:	5cc3      	ldrb	r3, [r0, r3]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d043      	beq.n	800d782 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d6fa:	2341      	movs	r3, #65	; 0x41
 800d6fc:	2224      	movs	r2, #36	; 0x24
 800d6fe:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800d700:	6822      	ldr	r2, [r4, #0]
 800d702:	6813      	ldr	r3, [r2, #0]
 800d704:	2101      	movs	r1, #1
 800d706:	438b      	bics	r3, r1
 800d708:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d70a:	6822      	ldr	r2, [r4, #0]
 800d70c:	4b27      	ldr	r3, [pc, #156]	; (800d7ac <HAL_I2C_Init+0xc0>)
 800d70e:	6861      	ldr	r1, [r4, #4]
 800d710:	400b      	ands	r3, r1
 800d712:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	6893      	ldr	r3, [r2, #8]
 800d718:	4925      	ldr	r1, [pc, #148]	; (800d7b0 <HAL_I2C_Init+0xc4>)
 800d71a:	400b      	ands	r3, r1
 800d71c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d71e:	68e3      	ldr	r3, [r4, #12]
 800d720:	2b01      	cmp	r3, #1
 800d722:	d034      	beq.n	800d78e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d724:	6822      	ldr	r2, [r4, #0]
 800d726:	2384      	movs	r3, #132	; 0x84
 800d728:	021b      	lsls	r3, r3, #8
 800d72a:	68a1      	ldr	r1, [r4, #8]
 800d72c:	430b      	orrs	r3, r1
 800d72e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d730:	68e3      	ldr	r3, [r4, #12]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d032      	beq.n	800d79c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d736:	6822      	ldr	r2, [r4, #0]
 800d738:	6851      	ldr	r1, [r2, #4]
 800d73a:	4b1e      	ldr	r3, [pc, #120]	; (800d7b4 <HAL_I2C_Init+0xc8>)
 800d73c:	430b      	orrs	r3, r1
 800d73e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	68d3      	ldr	r3, [r2, #12]
 800d744:	491a      	ldr	r1, [pc, #104]	; (800d7b0 <HAL_I2C_Init+0xc4>)
 800d746:	400b      	ands	r3, r1
 800d748:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d74a:	6923      	ldr	r3, [r4, #16]
 800d74c:	6962      	ldr	r2, [r4, #20]
 800d74e:	4313      	orrs	r3, r2
 800d750:	69a2      	ldr	r2, [r4, #24]
 800d752:	0212      	lsls	r2, r2, #8
 800d754:	6821      	ldr	r1, [r4, #0]
 800d756:	4313      	orrs	r3, r2
 800d758:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	69e3      	ldr	r3, [r4, #28]
 800d75e:	6a21      	ldr	r1, [r4, #32]
 800d760:	430b      	orrs	r3, r1
 800d762:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d764:	6822      	ldr	r2, [r4, #0]
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	2101      	movs	r1, #1
 800d76a:	430b      	orrs	r3, r1
 800d76c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d76e:	2300      	movs	r3, #0
 800d770:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d772:	2241      	movs	r2, #65	; 0x41
 800d774:	311f      	adds	r1, #31
 800d776:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d778:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d77a:	3201      	adds	r2, #1
 800d77c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800d77e:	2000      	movs	r0, #0
}
 800d780:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800d782:	3340      	adds	r3, #64	; 0x40
 800d784:	2200      	movs	r2, #0
 800d786:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800d788:	f7fd fb4e 	bl	800ae28 <HAL_I2C_MspInit>
 800d78c:	e7b5      	b.n	800d6fa <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	2380      	movs	r3, #128	; 0x80
 800d792:	021b      	lsls	r3, r3, #8
 800d794:	68a1      	ldr	r1, [r4, #8]
 800d796:	430b      	orrs	r3, r1
 800d798:	6093      	str	r3, [r2, #8]
 800d79a:	e7c9      	b.n	800d730 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	2280      	movs	r2, #128	; 0x80
 800d7a0:	0112      	lsls	r2, r2, #4
 800d7a2:	605a      	str	r2, [r3, #4]
 800d7a4:	e7c7      	b.n	800d736 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800d7a6:	2001      	movs	r0, #1
 800d7a8:	e7ea      	b.n	800d780 <HAL_I2C_Init+0x94>
 800d7aa:	46c0      	nop			; (mov r8, r8)
 800d7ac:	f0ffffff 	.word	0xf0ffffff
 800d7b0:	ffff7fff 	.word	0xffff7fff
 800d7b4:	02008000 	.word	0x02008000

0800d7b8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800d7b8:	4a02      	ldr	r2, [pc, #8]	; (800d7c4 <HAL_ResumeTick+0xc>)
 800d7ba:	6813      	ldr	r3, [r2, #0]
 800d7bc:	2102      	movs	r1, #2
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	6013      	str	r3, [r2, #0]
}
 800d7c2:	4770      	bx	lr
 800d7c4:	e000e010 	.word	0xe000e010

0800d7c8 <HAL_SuspendTick>:
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800d7c8:	4a02      	ldr	r2, [pc, #8]	; (800d7d4 <HAL_SuspendTick+0xc>)
 800d7ca:	6813      	ldr	r3, [r2, #0]
 800d7cc:	2102      	movs	r1, #2
 800d7ce:	438b      	bics	r3, r1
 800d7d0:	6013      	str	r3, [r2, #0]
}
 800d7d2:	4770      	bx	lr
 800d7d4:	e000e010 	.word	0xe000e010

0800d7d8 <HAL_GetTick>:
  return uwTick;
 800d7d8:	4b01      	ldr	r3, [pc, #4]	; (800d7e0 <HAL_GetTick+0x8>)
 800d7da:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 800d7dc:	4770      	bx	lr
 800d7de:	46c0      	nop			; (mov r8, r8)
 800d7e0:	200005d0 	.word	0x200005d0

0800d7e4 <UART_WaitOnFlagUntilTimeout>:
{
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	46c6      	mov	lr, r8
 800d7e8:	b500      	push	{lr}
 800d7ea:	0006      	movs	r6, r0
 800d7ec:	000c      	movs	r4, r1
 800d7ee:	0017      	movs	r7, r2
 800d7f0:	4698      	mov	r8, r3
 800d7f2:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7f4:	6833      	ldr	r3, [r6, #0]
 800d7f6:	69db      	ldr	r3, [r3, #28]
 800d7f8:	4023      	ands	r3, r4
 800d7fa:	1b1b      	subs	r3, r3, r4
 800d7fc:	425a      	negs	r2, r3
 800d7fe:	4153      	adcs	r3, r2
 800d800:	42bb      	cmp	r3, r7
 800d802:	d11e      	bne.n	800d842 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800d804:	1c6b      	adds	r3, r5, #1
 800d806:	d0f5      	beq.n	800d7f4 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d808:	f7ff ffe6 	bl	800d7d8 <HAL_GetTick>
 800d80c:	4643      	mov	r3, r8
 800d80e:	1ac0      	subs	r0, r0, r3
 800d810:	42a8      	cmp	r0, r5
 800d812:	d801      	bhi.n	800d818 <UART_WaitOnFlagUntilTimeout+0x34>
 800d814:	2d00      	cmp	r5, #0
 800d816:	d1ed      	bne.n	800d7f4 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d818:	6832      	ldr	r2, [r6, #0]
 800d81a:	6813      	ldr	r3, [r2, #0]
 800d81c:	490b      	ldr	r1, [pc, #44]	; (800d84c <UART_WaitOnFlagUntilTimeout+0x68>)
 800d81e:	400b      	ands	r3, r1
 800d820:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d822:	6832      	ldr	r2, [r6, #0]
 800d824:	6893      	ldr	r3, [r2, #8]
 800d826:	31a3      	adds	r1, #163	; 0xa3
 800d828:	31ff      	adds	r1, #255	; 0xff
 800d82a:	438b      	bics	r3, r1
 800d82c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800d82e:	2320      	movs	r3, #32
 800d830:	2280      	movs	r2, #128	; 0x80
 800d832:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800d834:	3204      	adds	r2, #4
 800d836:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 800d838:	335c      	adds	r3, #92	; 0x5c
 800d83a:	2200      	movs	r2, #0
 800d83c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800d83e:	2003      	movs	r0, #3
 800d840:	e000      	b.n	800d844 <UART_WaitOnFlagUntilTimeout+0x60>
  return HAL_OK;
 800d842:	2000      	movs	r0, #0
}
 800d844:	bc04      	pop	{r2}
 800d846:	4690      	mov	r8, r2
 800d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84a:	46c0      	nop			; (mov r8, r8)
 800d84c:	fffffe5f 	.word	0xfffffe5f

0800d850 <UART_CheckIdleState>:
{
 800d850:	b530      	push	{r4, r5, lr}
 800d852:	b083      	sub	sp, #12
 800d854:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d856:	2388      	movs	r3, #136	; 0x88
 800d858:	2200      	movs	r2, #0
 800d85a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800d85c:	f7ff ffbc 	bl	800d7d8 <HAL_GetTick>
 800d860:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d862:	6823      	ldr	r3, [r4, #0]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	071b      	lsls	r3, r3, #28
 800d868:	d40e      	bmi.n	800d888 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	075b      	lsls	r3, r3, #29
 800d870:	d417      	bmi.n	800d8a2 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 800d872:	2320      	movs	r3, #32
 800d874:	2280      	movs	r2, #128	; 0x80
 800d876:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800d878:	3204      	adds	r2, #4
 800d87a:	50a3      	str	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 800d87c:	335c      	adds	r3, #92	; 0x5c
 800d87e:	2200      	movs	r2, #0
 800d880:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800d882:	2000      	movs	r0, #0
}
 800d884:	b003      	add	sp, #12
 800d886:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d888:	2180      	movs	r1, #128	; 0x80
 800d88a:	4b0c      	ldr	r3, [pc, #48]	; (800d8bc <UART_CheckIdleState+0x6c>)
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	0003      	movs	r3, r0
 800d890:	2200      	movs	r2, #0
 800d892:	0389      	lsls	r1, r1, #14
 800d894:	0020      	movs	r0, r4
 800d896:	f7ff ffa5 	bl	800d7e4 <UART_WaitOnFlagUntilTimeout>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0e5      	beq.n	800d86a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800d89e:	2003      	movs	r0, #3
 800d8a0:	e7f0      	b.n	800d884 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8a2:	2180      	movs	r1, #128	; 0x80
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <UART_CheckIdleState+0x6c>)
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	002b      	movs	r3, r5
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	03c9      	lsls	r1, r1, #15
 800d8ae:	0020      	movs	r0, r4
 800d8b0:	f7ff ff98 	bl	800d7e4 <UART_WaitOnFlagUntilTimeout>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d0dc      	beq.n	800d872 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800d8b8:	2003      	movs	r0, #3
 800d8ba:	e7e3      	b.n	800d884 <UART_CheckIdleState+0x34>
 800d8bc:	01ffffff 	.word	0x01ffffff

0800d8c0 <HAL_UART_Init>:
{
 800d8c0:	b510      	push	{r4, lr}
 800d8c2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800d8c4:	d030      	beq.n	800d928 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d8c6:	2380      	movs	r3, #128	; 0x80
 800d8c8:	58c3      	ldr	r3, [r0, r3]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d022      	beq.n	800d914 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800d8ce:	2380      	movs	r3, #128	; 0x80
 800d8d0:	2224      	movs	r2, #36	; 0x24
 800d8d2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800d8d4:	6822      	ldr	r2, [r4, #0]
 800d8d6:	6813      	ldr	r3, [r2, #0]
 800d8d8:	2101      	movs	r1, #1
 800d8da:	438b      	bics	r3, r1
 800d8dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d8de:	0020      	movs	r0, r4
 800d8e0:	f7fe fab4 	bl	800be4c <UART_SetConfig>
 800d8e4:	2801      	cmp	r0, #1
 800d8e6:	d014      	beq.n	800d912 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d8e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d118      	bne.n	800d920 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8ee:	6822      	ldr	r2, [r4, #0]
 800d8f0:	6853      	ldr	r3, [r2, #4]
 800d8f2:	490e      	ldr	r1, [pc, #56]	; (800d92c <HAL_UART_Init+0x6c>)
 800d8f4:	400b      	ands	r3, r1
 800d8f6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	6893      	ldr	r3, [r2, #8]
 800d8fc:	212a      	movs	r1, #42	; 0x2a
 800d8fe:	438b      	bics	r3, r1
 800d900:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800d902:	6822      	ldr	r2, [r4, #0]
 800d904:	6813      	ldr	r3, [r2, #0]
 800d906:	3929      	subs	r1, #41	; 0x29
 800d908:	430b      	orrs	r3, r1
 800d90a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800d90c:	0020      	movs	r0, r4
 800d90e:	f7ff ff9f 	bl	800d850 <UART_CheckIdleState>
}
 800d912:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800d914:	337c      	adds	r3, #124	; 0x7c
 800d916:	2200      	movs	r2, #0
 800d918:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800d91a:	f7fd f99f 	bl	800ac5c <HAL_UART_MspInit>
 800d91e:	e7d6      	b.n	800d8ce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800d920:	0020      	movs	r0, r4
 800d922:	f7fd fd75 	bl	800b410 <UART_AdvFeatureConfig>
 800d926:	e7e2      	b.n	800d8ee <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800d928:	2001      	movs	r0, #1
 800d92a:	e7f2      	b.n	800d912 <HAL_UART_Init+0x52>
 800d92c:	ffffb7ff 	.word	0xffffb7ff

0800d930 <HAL_UART_Transmit>:
{
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	b085      	sub	sp, #20
 800d934:	0004      	movs	r4, r0
 800d936:	000e      	movs	r6, r1
 800d938:	0017      	movs	r7, r2
 800d93a:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d93c:	2380      	movs	r3, #128	; 0x80
 800d93e:	58c3      	ldr	r3, [r0, r3]
 800d940:	2b20      	cmp	r3, #32
 800d942:	d162      	bne.n	800da0a <HAL_UART_Transmit+0xda>
    if ((pData == NULL) || (Size == 0U))
 800d944:	2900      	cmp	r1, #0
 800d946:	d063      	beq.n	800da10 <HAL_UART_Transmit+0xe0>
 800d948:	2a00      	cmp	r2, #0
 800d94a:	d063      	beq.n	800da14 <HAL_UART_Transmit+0xe4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d94c:	2380      	movs	r3, #128	; 0x80
 800d94e:	015b      	lsls	r3, r3, #5
 800d950:	6882      	ldr	r2, [r0, #8]
 800d952:	429a      	cmp	r2, r3
 800d954:	d01a      	beq.n	800d98c <HAL_UART_Transmit+0x5c>
    __HAL_LOCK(huart);
 800d956:	237c      	movs	r3, #124	; 0x7c
 800d958:	5ce3      	ldrb	r3, [r4, r3]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d05c      	beq.n	800da18 <HAL_UART_Transmit+0xe8>
 800d95e:	237c      	movs	r3, #124	; 0x7c
 800d960:	2201      	movs	r2, #1
 800d962:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d964:	330c      	adds	r3, #12
 800d966:	2200      	movs	r2, #0
 800d968:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d96a:	3b08      	subs	r3, #8
 800d96c:	3221      	adds	r2, #33	; 0x21
 800d96e:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800d970:	f7ff ff32 	bl	800d7d8 <HAL_GetTick>
 800d974:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 800d976:	2354      	movs	r3, #84	; 0x54
 800d978:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 800d97a:	3302      	adds	r3, #2
 800d97c:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d97e:	2380      	movs	r3, #128	; 0x80
 800d980:	015b      	lsls	r3, r3, #5
 800d982:	68a2      	ldr	r2, [r4, #8]
 800d984:	429a      	cmp	r2, r3
 800d986:	d008      	beq.n	800d99a <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 800d988:	2700      	movs	r7, #0
 800d98a:	e016      	b.n	800d9ba <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d98c:	6903      	ldr	r3, [r0, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1e1      	bne.n	800d956 <HAL_UART_Transmit+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 800d992:	07cb      	lsls	r3, r1, #31
 800d994:	d5df      	bpl.n	800d956 <HAL_UART_Transmit+0x26>
        return  HAL_ERROR;
 800d996:	2001      	movs	r0, #1
 800d998:	e038      	b.n	800da0c <HAL_UART_Transmit+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d99a:	6923      	ldr	r3, [r4, #16]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d021      	beq.n	800d9e4 <HAL_UART_Transmit+0xb4>
      pdata16bits = NULL;
 800d9a0:	2700      	movs	r7, #0
 800d9a2:	e00a      	b.n	800d9ba <HAL_UART_Transmit+0x8a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d9a4:	883b      	ldrh	r3, [r7, #0]
 800d9a6:	6822      	ldr	r2, [r4, #0]
 800d9a8:	05db      	lsls	r3, r3, #23
 800d9aa:	0ddb      	lsrs	r3, r3, #23
 800d9ac:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800d9ae:	3702      	adds	r7, #2
      huart->TxXferCount--;
 800d9b0:	2256      	movs	r2, #86	; 0x56
 800d9b2:	5aa3      	ldrh	r3, [r4, r2]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	52a3      	strh	r3, [r4, r2]
    while (huart->TxXferCount > 0U)
 800d9ba:	2356      	movs	r3, #86	; 0x56
 800d9bc:	5ae3      	ldrh	r3, [r4, r3]
 800d9be:	b29b      	uxth	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d012      	beq.n	800d9ea <HAL_UART_Transmit+0xba>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9c4:	9500      	str	r5, [sp, #0]
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	0020      	movs	r0, r4
 800d9ce:	f7ff ff09 	bl	800d7e4 <UART_WaitOnFlagUntilTimeout>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d122      	bne.n	800da1c <HAL_UART_Transmit+0xec>
      if (pdata8bits == NULL)
 800d9d6:	2e00      	cmp	r6, #0
 800d9d8:	d0e4      	beq.n	800d9a4 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d9da:	7832      	ldrb	r2, [r6, #0]
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d9e0:	3601      	adds	r6, #1
 800d9e2:	e7e5      	b.n	800d9b0 <HAL_UART_Transmit+0x80>
      pdata16bits = (uint16_t *) pData;
 800d9e4:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 800d9e6:	2600      	movs	r6, #0
 800d9e8:	e7e7      	b.n	800d9ba <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d9ea:	9500      	str	r5, [sp, #0]
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	2140      	movs	r1, #64	; 0x40
 800d9f2:	0020      	movs	r0, r4
 800d9f4:	f7ff fef6 	bl	800d7e4 <UART_WaitOnFlagUntilTimeout>
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d111      	bne.n	800da20 <HAL_UART_Transmit+0xf0>
    huart->gState = HAL_UART_STATE_READY;
 800d9fc:	2380      	movs	r3, #128	; 0x80
 800d9fe:	2220      	movs	r2, #32
 800da00:	50e2      	str	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 800da02:	3b04      	subs	r3, #4
 800da04:	2200      	movs	r2, #0
 800da06:	54e2      	strb	r2, [r4, r3]
 800da08:	e000      	b.n	800da0c <HAL_UART_Transmit+0xdc>
    return HAL_BUSY;
 800da0a:	2002      	movs	r0, #2
}
 800da0c:	b005      	add	sp, #20
 800da0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800da10:	2001      	movs	r0, #1
 800da12:	e7fb      	b.n	800da0c <HAL_UART_Transmit+0xdc>
 800da14:	2001      	movs	r0, #1
 800da16:	e7f9      	b.n	800da0c <HAL_UART_Transmit+0xdc>
    __HAL_LOCK(huart);
 800da18:	2002      	movs	r0, #2
 800da1a:	e7f7      	b.n	800da0c <HAL_UART_Transmit+0xdc>
        return HAL_TIMEOUT;
 800da1c:	2003      	movs	r0, #3
 800da1e:	e7f5      	b.n	800da0c <HAL_UART_Transmit+0xdc>
      return HAL_TIMEOUT;
 800da20:	2003      	movs	r0, #3
 800da22:	e7f3      	b.n	800da0c <HAL_UART_Transmit+0xdc>

0800da24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da26:	0007      	movs	r7, r0
 800da28:	000c      	movs	r4, r1
 800da2a:	0015      	movs	r5, r2
 800da2c:	001e      	movs	r6, r3
 800da2e:	e001      	b.n	800da34 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800da30:	1c73      	adds	r3, r6, #1
 800da32:	d10c      	bne.n	800da4e <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	6893      	ldr	r3, [r2, #8]
 800da38:	4023      	ands	r3, r4
 800da3a:	42ab      	cmp	r3, r5
 800da3c:	d041      	beq.n	800dac2 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800da3e:	23c0      	movs	r3, #192	; 0xc0
 800da40:	00db      	lsls	r3, r3, #3
 800da42:	429c      	cmp	r4, r3
 800da44:	d1f4      	bne.n	800da30 <SPI_WaitFifoStateUntilTimeout+0xc>
 800da46:	2d00      	cmp	r5, #0
 800da48:	d1f2      	bne.n	800da30 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800da4a:	7b13      	ldrb	r3, [r2, #12]
 800da4c:	e7f0      	b.n	800da30 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800da4e:	f7ff fec3 	bl	800d7d8 <HAL_GetTick>
 800da52:	9b06      	ldr	r3, [sp, #24]
 800da54:	1ac0      	subs	r0, r0, r3
 800da56:	42b0      	cmp	r0, r6
 800da58:	d201      	bcs.n	800da5e <SPI_WaitFifoStateUntilTimeout+0x3a>
 800da5a:	2e00      	cmp	r6, #0
 800da5c:	d1ea      	bne.n	800da34 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	6853      	ldr	r3, [r2, #4]
 800da62:	21e0      	movs	r1, #224	; 0xe0
 800da64:	438b      	bics	r3, r1
 800da66:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da68:	2382      	movs	r3, #130	; 0x82
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d00c      	beq.n	800da8c <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800da72:	2380      	movs	r3, #128	; 0x80
 800da74:	019b      	lsls	r3, r3, #6
 800da76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da78:	429a      	cmp	r2, r3
 800da7a:	d016      	beq.n	800daaa <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800da7c:	235d      	movs	r3, #93	; 0x5d
 800da7e:	2201      	movs	r2, #1
 800da80:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800da82:	3b01      	subs	r3, #1
 800da84:	2200      	movs	r2, #0
 800da86:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 800da88:	2003      	movs	r0, #3
 800da8a:	e01b      	b.n	800dac4 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	2280      	movs	r2, #128	; 0x80
 800da90:	0212      	lsls	r2, r2, #8
 800da92:	4293      	cmp	r3, r2
 800da94:	d003      	beq.n	800da9e <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800da96:	2280      	movs	r2, #128	; 0x80
 800da98:	00d2      	lsls	r2, r2, #3
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d1e9      	bne.n	800da72 <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	6813      	ldr	r3, [r2, #0]
 800daa2:	2140      	movs	r1, #64	; 0x40
 800daa4:	438b      	bics	r3, r1
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	e7e3      	b.n	800da72 <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	6813      	ldr	r3, [r2, #0]
 800daae:	4906      	ldr	r1, [pc, #24]	; (800dac8 <SPI_WaitFifoStateUntilTimeout+0xa4>)
 800dab0:	400b      	ands	r3, r1
 800dab2:	6013      	str	r3, [r2, #0]
 800dab4:	683a      	ldr	r2, [r7, #0]
 800dab6:	6811      	ldr	r1, [r2, #0]
 800dab8:	2380      	movs	r3, #128	; 0x80
 800daba:	019b      	lsls	r3, r3, #6
 800dabc:	430b      	orrs	r3, r1
 800dabe:	6013      	str	r3, [r2, #0]
 800dac0:	e7dc      	b.n	800da7c <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 800dac2:	2000      	movs	r0, #0
}
 800dac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	ffffdfff 	.word	0xffffdfff

0800dacc <SPI_WaitFlagStateUntilTimeout>:
{
 800dacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dace:	0006      	movs	r6, r0
 800dad0:	000c      	movs	r4, r1
 800dad2:	0017      	movs	r7, r2
 800dad4:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dad6:	6833      	ldr	r3, [r6, #0]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	4023      	ands	r3, r4
 800dadc:	1b1b      	subs	r3, r3, r4
 800dade:	425a      	negs	r2, r3
 800dae0:	4153      	adcs	r3, r2
 800dae2:	42bb      	cmp	r3, r7
 800dae4:	d03b      	beq.n	800db5e <SPI_WaitFlagStateUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 800dae6:	1c6b      	adds	r3, r5, #1
 800dae8:	d0f5      	beq.n	800dad6 <SPI_WaitFlagStateUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800daea:	f7ff fe75 	bl	800d7d8 <HAL_GetTick>
 800daee:	9b06      	ldr	r3, [sp, #24]
 800daf0:	1ac0      	subs	r0, r0, r3
 800daf2:	42a8      	cmp	r0, r5
 800daf4:	d201      	bcs.n	800dafa <SPI_WaitFlagStateUntilTimeout+0x2e>
 800daf6:	2d00      	cmp	r5, #0
 800daf8:	d1ed      	bne.n	800dad6 <SPI_WaitFlagStateUntilTimeout+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dafa:	6832      	ldr	r2, [r6, #0]
 800dafc:	6853      	ldr	r3, [r2, #4]
 800dafe:	21e0      	movs	r1, #224	; 0xe0
 800db00:	438b      	bics	r3, r1
 800db02:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db04:	2382      	movs	r3, #130	; 0x82
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	6872      	ldr	r2, [r6, #4]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d00c      	beq.n	800db28 <SPI_WaitFlagStateUntilTimeout+0x5c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800db0e:	2380      	movs	r3, #128	; 0x80
 800db10:	019b      	lsls	r3, r3, #6
 800db12:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800db14:	429a      	cmp	r2, r3
 800db16:	d016      	beq.n	800db46 <SPI_WaitFlagStateUntilTimeout+0x7a>
        hspi->State = HAL_SPI_STATE_READY;
 800db18:	235d      	movs	r3, #93	; 0x5d
 800db1a:	2201      	movs	r2, #1
 800db1c:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 800db1e:	3b01      	subs	r3, #1
 800db20:	2200      	movs	r2, #0
 800db22:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800db24:	2003      	movs	r0, #3
 800db26:	e01b      	b.n	800db60 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db28:	68b3      	ldr	r3, [r6, #8]
 800db2a:	2280      	movs	r2, #128	; 0x80
 800db2c:	0212      	lsls	r2, r2, #8
 800db2e:	4293      	cmp	r3, r2
 800db30:	d003      	beq.n	800db3a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800db32:	2280      	movs	r2, #128	; 0x80
 800db34:	00d2      	lsls	r2, r2, #3
 800db36:	4293      	cmp	r3, r2
 800db38:	d1e9      	bne.n	800db0e <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 800db3a:	6832      	ldr	r2, [r6, #0]
 800db3c:	6813      	ldr	r3, [r2, #0]
 800db3e:	2140      	movs	r1, #64	; 0x40
 800db40:	438b      	bics	r3, r1
 800db42:	6013      	str	r3, [r2, #0]
 800db44:	e7e3      	b.n	800db0e <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 800db46:	6832      	ldr	r2, [r6, #0]
 800db48:	6813      	ldr	r3, [r2, #0]
 800db4a:	4906      	ldr	r1, [pc, #24]	; (800db64 <SPI_WaitFlagStateUntilTimeout+0x98>)
 800db4c:	400b      	ands	r3, r1
 800db4e:	6013      	str	r3, [r2, #0]
 800db50:	6832      	ldr	r2, [r6, #0]
 800db52:	6811      	ldr	r1, [r2, #0]
 800db54:	2380      	movs	r3, #128	; 0x80
 800db56:	019b      	lsls	r3, r3, #6
 800db58:	430b      	orrs	r3, r1
 800db5a:	6013      	str	r3, [r2, #0]
 800db5c:	e7dc      	b.n	800db18 <SPI_WaitFlagStateUntilTimeout+0x4c>
  return HAL_OK;
 800db5e:	2000      	movs	r0, #0
}
 800db60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db62:	46c0      	nop			; (mov r8, r8)
 800db64:	ffffdfff 	.word	0xffffdfff

0800db68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	0004      	movs	r4, r0
 800db6e:	000d      	movs	r5, r1
 800db70:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db72:	21c0      	movs	r1, #192	; 0xc0
 800db74:	9200      	str	r2, [sp, #0]
 800db76:	002b      	movs	r3, r5
 800db78:	2200      	movs	r2, #0
 800db7a:	0149      	lsls	r1, r1, #5
 800db7c:	f7ff ff52 	bl	800da24 <SPI_WaitFifoStateUntilTimeout>
 800db80:	2800      	cmp	r0, #0
 800db82:	d118      	bne.n	800dbb6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db84:	9600      	str	r6, [sp, #0]
 800db86:	002b      	movs	r3, r5
 800db88:	2200      	movs	r2, #0
 800db8a:	2180      	movs	r1, #128	; 0x80
 800db8c:	0020      	movs	r0, r4
 800db8e:	f7ff ff9d 	bl	800dacc <SPI_WaitFlagStateUntilTimeout>
 800db92:	2800      	cmp	r0, #0
 800db94:	d116      	bne.n	800dbc4 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800db96:	21c0      	movs	r1, #192	; 0xc0
 800db98:	9600      	str	r6, [sp, #0]
 800db9a:	002b      	movs	r3, r5
 800db9c:	2200      	movs	r2, #0
 800db9e:	00c9      	lsls	r1, r1, #3
 800dba0:	0020      	movs	r0, r4
 800dba2:	f7ff ff3f 	bl	800da24 <SPI_WaitFifoStateUntilTimeout>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d00a      	beq.n	800dbc0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbac:	2220      	movs	r2, #32
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800dbb2:	2003      	movs	r0, #3
 800dbb4:	e004      	b.n	800dbc0 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbb8:	2220      	movs	r2, #32
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800dbbe:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800dbc0:	b002      	add	sp, #8
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbc4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dbc6:	2220      	movs	r2, #32
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800dbcc:	2003      	movs	r0, #3
 800dbce:	e7f7      	b.n	800dbc0 <SPI_EndRxTxTransaction+0x58>

0800dbd0 <HAL_SPI_TransmitReceive>:
{
 800dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	0004      	movs	r4, r0
 800dbd6:	000e      	movs	r6, r1
 800dbd8:	9201      	str	r2, [sp, #4]
 800dbda:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 800dbdc:	235c      	movs	r3, #92	; 0x5c
 800dbde:	5cc3      	ldrb	r3, [r0, r3]
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d100      	bne.n	800dbe6 <HAL_SPI_TransmitReceive+0x16>
 800dbe4:	e157      	b.n	800de96 <HAL_SPI_TransmitReceive+0x2c6>
 800dbe6:	235c      	movs	r3, #92	; 0x5c
 800dbe8:	2201      	movs	r2, #1
 800dbea:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800dbec:	f7ff fdf4 	bl	800d7d8 <HAL_GetTick>
 800dbf0:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 800dbf2:	235d      	movs	r3, #93	; 0x5d
 800dbf4:	5ce3      	ldrb	r3, [r4, r3]
 800dbf6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800dbf8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d014      	beq.n	800dc28 <HAL_SPI_TransmitReceive+0x58>
 800dbfe:	2182      	movs	r1, #130	; 0x82
 800dc00:	0049      	lsls	r1, r1, #1
 800dc02:	428a      	cmp	r2, r1
 800dc04:	d008      	beq.n	800dc18 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800dc06:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800dc08:	235d      	movs	r3, #93	; 0x5d
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800dc0e:	3b01      	subs	r3, #1
 800dc10:	2200      	movs	r2, #0
 800dc12:	54e2      	strb	r2, [r4, r3]
}
 800dc14:	b003      	add	sp, #12
 800dc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dc18:	68a2      	ldr	r2, [r4, #8]
 800dc1a:	2a00      	cmp	r2, #0
 800dc1c:	d000      	beq.n	800dc20 <HAL_SPI_TransmitReceive+0x50>
 800dc1e:	e12c      	b.n	800de7a <HAL_SPI_TransmitReceive+0x2aa>
 800dc20:	2b04      	cmp	r3, #4
 800dc22:	d001      	beq.n	800dc28 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 800dc24:	2002      	movs	r0, #2
 800dc26:	e7ef      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dc28:	2e00      	cmp	r6, #0
 800dc2a:	d100      	bne.n	800dc2e <HAL_SPI_TransmitReceive+0x5e>
 800dc2c:	e127      	b.n	800de7e <HAL_SPI_TransmitReceive+0x2ae>
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d100      	bne.n	800dc36 <HAL_SPI_TransmitReceive+0x66>
 800dc34:	e125      	b.n	800de82 <HAL_SPI_TransmitReceive+0x2b2>
 800dc36:	2d00      	cmp	r5, #0
 800dc38:	d100      	bne.n	800dc3c <HAL_SPI_TransmitReceive+0x6c>
 800dc3a:	e124      	b.n	800de86 <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dc3c:	235d      	movs	r3, #93	; 0x5d
 800dc3e:	5ce3      	ldrb	r3, [r4, r3]
 800dc40:	2b04      	cmp	r3, #4
 800dc42:	d002      	beq.n	800dc4a <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dc44:	235d      	movs	r3, #93	; 0x5d
 800dc46:	2205      	movs	r2, #5
 800dc48:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dc4e:	9a01      	ldr	r2, [sp, #4]
 800dc50:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dc52:	2246      	movs	r2, #70	; 0x46
 800dc54:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 800dc56:	3a02      	subs	r2, #2
 800dc58:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dc5a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dc5c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dc5e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800dc60:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dc62:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800dc64:	23e0      	movs	r3, #224	; 0xe0
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	68e2      	ldr	r2, [r4, #12]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d801      	bhi.n	800dc72 <HAL_SPI_TransmitReceive+0xa2>
 800dc6e:	2d01      	cmp	r5, #1
 800dc70:	d923      	bls.n	800dcba <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	6853      	ldr	r3, [r2, #4]
 800dc76:	4989      	ldr	r1, [pc, #548]	; (800de9c <HAL_SPI_TransmitReceive+0x2cc>)
 800dc78:	400b      	ands	r3, r1
 800dc7a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	0652      	lsls	r2, r2, #25
 800dc82:	d403      	bmi.n	800dc8c <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	2140      	movs	r1, #64	; 0x40
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc8c:	23e0      	movs	r3, #224	; 0xe0
 800dc8e:	00db      	lsls	r3, r3, #3
 800dc90:	68e2      	ldr	r2, [r4, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d956      	bls.n	800dd44 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc96:	6863      	ldr	r3, [r4, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <HAL_SPI_TransmitReceive+0xd0>
 800dc9c:	2d01      	cmp	r5, #1
 800dc9e:	d10a      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dca4:	8812      	ldrh	r2, [r2, #0]
 800dca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dcaa:	3302      	adds	r3, #2
 800dcac:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800dcae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800dcb6:	2501      	movs	r5, #1
 800dcb8:	e024      	b.n	800dd04 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dcba:	6822      	ldr	r2, [r4, #0]
 800dcbc:	6851      	ldr	r1, [r2, #4]
 800dcbe:	2380      	movs	r3, #128	; 0x80
 800dcc0:	015b      	lsls	r3, r3, #5
 800dcc2:	430b      	orrs	r3, r1
 800dcc4:	6053      	str	r3, [r2, #4]
 800dcc6:	e7d9      	b.n	800dc7c <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	689a      	ldr	r2, [r3, #8]
 800dccc:	07d2      	lsls	r2, r2, #31
 800dcce:	d510      	bpl.n	800dcf2 <HAL_SPI_TransmitReceive+0x122>
 800dcd0:	2246      	movs	r2, #70	; 0x46
 800dcd2:	5aa2      	ldrh	r2, [r4, r2]
 800dcd4:	b292      	uxth	r2, r2
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	d00b      	beq.n	800dcf2 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dcde:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dce0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dce2:	3302      	adds	r3, #2
 800dce4:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800dce6:	2246      	movs	r2, #70	; 0x46
 800dce8:	5aa3      	ldrh	r3, [r4, r2]
 800dcea:	3b01      	subs	r3, #1
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800dcf0:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dcf2:	f7ff fd71 	bl	800d7d8 <HAL_GetTick>
 800dcf6:	1bc0      	subs	r0, r0, r7
 800dcf8:	9b08      	ldr	r3, [sp, #32]
 800dcfa:	4298      	cmp	r0, r3
 800dcfc:	d302      	bcc.n	800dd04 <HAL_SPI_TransmitReceive+0x134>
 800dcfe:	3301      	adds	r3, #1
 800dd00:	d000      	beq.n	800dd04 <HAL_SPI_TransmitReceive+0x134>
 800dd02:	e0c2      	b.n	800de8a <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd06:	b29b      	uxth	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d105      	bne.n	800dd18 <HAL_SPI_TransmitReceive+0x148>
 800dd0c:	3346      	adds	r3, #70	; 0x46
 800dd0e:	5ae3      	ldrh	r3, [r4, r3]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d100      	bne.n	800dd18 <HAL_SPI_TransmitReceive+0x148>
 800dd16:	e0a4      	b.n	800de62 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd18:	6823      	ldr	r3, [r4, #0]
 800dd1a:	689a      	ldr	r2, [r3, #8]
 800dd1c:	0792      	lsls	r2, r2, #30
 800dd1e:	d5d3      	bpl.n	800dcc8 <HAL_SPI_TransmitReceive+0xf8>
 800dd20:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dd22:	b292      	uxth	r2, r2
 800dd24:	2a00      	cmp	r2, #0
 800dd26:	d0cf      	beq.n	800dcc8 <HAL_SPI_TransmitReceive+0xf8>
 800dd28:	2d01      	cmp	r5, #1
 800dd2a:	d1cd      	bne.n	800dcc8 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dd2e:	8812      	ldrh	r2, [r2, #0]
 800dd30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd34:	3302      	adds	r3, #2
 800dd36:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dd38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800dd40:	2500      	movs	r5, #0
 800dd42:	e7c1      	b.n	800dcc8 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd44:	6863      	ldr	r3, [r4, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d001      	beq.n	800dd4e <HAL_SPI_TransmitReceive+0x17e>
 800dd4a:	2d01      	cmp	r5, #1
 800dd4c:	d10e      	bne.n	800dd6c <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 800dd4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd50:	b29b      	uxth	r3, r3
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d90c      	bls.n	800dd70 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd56:	6823      	ldr	r3, [r4, #0]
 800dd58:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dd5a:	8812      	ldrh	r2, [r2, #0]
 800dd5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd60:	3302      	adds	r3, #2
 800dd62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800dd64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd66:	3b02      	subs	r3, #2
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800dd6c:	2501      	movs	r5, #1
 800dd6e:	e046      	b.n	800ddfe <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dd70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	6822      	ldr	r2, [r4, #0]
 800dd76:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800dd78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dd7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dd86:	e7f1      	b.n	800dd6c <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 800dd88:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dd8a:	b292      	uxth	r2, r2
 800dd8c:	2a01      	cmp	r2, #1
 800dd8e:	d90b      	bls.n	800dda8 <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dd90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dd92:	8812      	ldrh	r2, [r2, #0]
 800dd94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd98:	3302      	adds	r3, #2
 800dd9a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dd9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dd9e:	3b02      	subs	r3, #2
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800dda4:	2500      	movs	r5, #0
 800dda6:	e03d      	b.n	800de24 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dda8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ddaa:	7812      	ldrb	r2, [r2, #0]
 800ddac:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800ddae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ddb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	e031      	b.n	800de24 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ddc0:	6822      	ldr	r2, [r4, #0]
 800ddc2:	6851      	ldr	r1, [r2, #4]
 800ddc4:	2380      	movs	r3, #128	; 0x80
 800ddc6:	015b      	lsls	r3, r3, #5
 800ddc8:	430b      	orrs	r3, r1
 800ddca:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800ddcc:	2501      	movs	r5, #1
 800ddce:	e00b      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ddd0:	7b1b      	ldrb	r3, [r3, #12]
 800ddd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ddd4:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800ddd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddd8:	3301      	adds	r3, #1
 800ddda:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800dddc:	2246      	movs	r2, #70	; 0x46
 800ddde:	5aa3      	ldrh	r3, [r4, r2]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800dde6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dde8:	f7ff fcf6 	bl	800d7d8 <HAL_GetTick>
 800ddec:	1bc0      	subs	r0, r0, r7
 800ddee:	9b08      	ldr	r3, [sp, #32]
 800ddf0:	4298      	cmp	r0, r3
 800ddf2:	d301      	bcc.n	800ddf8 <HAL_SPI_TransmitReceive+0x228>
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	d14a      	bne.n	800de8e <HAL_SPI_TransmitReceive+0x2be>
 800ddf8:	9b08      	ldr	r3, [sp, #32]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d049      	beq.n	800de92 <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ddfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800de00:	b29b      	uxth	r3, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	d104      	bne.n	800de10 <HAL_SPI_TransmitReceive+0x240>
 800de06:	3346      	adds	r3, #70	; 0x46
 800de08:	5ae3      	ldrh	r3, [r4, r3]
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d028      	beq.n	800de62 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	0792      	lsls	r2, r2, #30
 800de16:	d505      	bpl.n	800de24 <HAL_SPI_TransmitReceive+0x254>
 800de18:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800de1a:	b292      	uxth	r2, r2
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	d001      	beq.n	800de24 <HAL_SPI_TransmitReceive+0x254>
 800de20:	2d01      	cmp	r5, #1
 800de22:	d0b1      	beq.n	800dd88 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	689a      	ldr	r2, [r3, #8]
 800de28:	07d2      	lsls	r2, r2, #31
 800de2a:	d5dd      	bpl.n	800dde8 <HAL_SPI_TransmitReceive+0x218>
 800de2c:	2246      	movs	r2, #70	; 0x46
 800de2e:	5aa2      	ldrh	r2, [r4, r2]
 800de30:	b292      	uxth	r2, r2
 800de32:	2a00      	cmp	r2, #0
 800de34:	d0d8      	beq.n	800dde8 <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 800de36:	2246      	movs	r2, #70	; 0x46
 800de38:	5aa2      	ldrh	r2, [r4, r2]
 800de3a:	b292      	uxth	r2, r2
 800de3c:	2a01      	cmp	r2, #1
 800de3e:	d9c7      	bls.n	800ddd0 <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800de44:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de48:	3302      	adds	r3, #2
 800de4a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800de4c:	2246      	movs	r2, #70	; 0x46
 800de4e:	5aa3      	ldrh	r3, [r4, r2]
 800de50:	3b02      	subs	r3, #2
 800de52:	b29b      	uxth	r3, r3
 800de54:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 800de56:	5aa3      	ldrh	r3, [r4, r2]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d9b0      	bls.n	800ddc0 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 800de5e:	2501      	movs	r5, #1
 800de60:	e7c2      	b.n	800dde8 <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de62:	003a      	movs	r2, r7
 800de64:	9908      	ldr	r1, [sp, #32]
 800de66:	0020      	movs	r0, r4
 800de68:	f7ff fe7e 	bl	800db68 <SPI_EndRxTxTransaction>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d100      	bne.n	800de72 <HAL_SPI_TransmitReceive+0x2a2>
 800de70:	e6ca      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de72:	2320      	movs	r3, #32
 800de74:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800de76:	2001      	movs	r0, #1
 800de78:	e6c6      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800de7a:	2002      	movs	r0, #2
 800de7c:	e6c4      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 800de7e:	2001      	movs	r0, #1
 800de80:	e6c2      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
 800de82:	2001      	movs	r0, #1
 800de84:	e6c0      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
 800de86:	2001      	movs	r0, #1
 800de88:	e6be      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800de8a:	2003      	movs	r0, #3
 800de8c:	e6bc      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800de8e:	2003      	movs	r0, #3
 800de90:	e6ba      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
 800de92:	2003      	movs	r0, #3
 800de94:	e6b8      	b.n	800dc08 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800de96:	2002      	movs	r0, #2
 800de98:	e6bc      	b.n	800dc14 <HAL_SPI_TransmitReceive+0x44>
 800de9a:	46c0      	nop			; (mov r8, r8)
 800de9c:	ffffefff 	.word	0xffffefff

0800dea0 <HAL_RTCEx_DeactivateWakeUpTimer>:
{
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800dea4:	2328      	movs	r3, #40	; 0x28
 800dea6:	5cc3      	ldrb	r3, [r0, r3]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d038      	beq.n	800df1e <HAL_RTCEx_DeactivateWakeUpTimer+0x7e>
 800deac:	2328      	movs	r3, #40	; 0x28
 800deae:	2201      	movs	r2, #1
 800deb0:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800deb2:	3301      	adds	r3, #1
 800deb4:	3201      	adds	r2, #1
 800deb6:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800deb8:	6803      	ldr	r3, [r0, #0]
 800deba:	32c8      	adds	r2, #200	; 0xc8
 800debc:	625a      	str	r2, [r3, #36]	; 0x24
 800debe:	6803      	ldr	r3, [r0, #0]
 800dec0:	3a77      	subs	r2, #119	; 0x77
 800dec2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dec4:	6802      	ldr	r2, [r0, #0]
 800dec6:	6993      	ldr	r3, [r2, #24]
 800dec8:	4916      	ldr	r1, [pc, #88]	; (800df24 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>)
 800deca:	400b      	ands	r3, r1
 800decc:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800dece:	6802      	ldr	r2, [r0, #0]
 800ded0:	6993      	ldr	r3, [r2, #24]
 800ded2:	4915      	ldr	r1, [pc, #84]	; (800df28 <HAL_RTCEx_DeactivateWakeUpTimer+0x88>)
 800ded4:	400b      	ands	r3, r1
 800ded6:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800ded8:	f7ff fc7e 	bl	800d7d8 <HAL_GetTick>
 800dedc:	0005      	movs	r5, r0
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	68da      	ldr	r2, [r3, #12]
 800dee2:	0752      	lsls	r2, r2, #29
 800dee4:	d411      	bmi.n	800df0a <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dee6:	f7ff fc77 	bl	800d7d8 <HAL_GetTick>
 800deea:	1b40      	subs	r0, r0, r5
 800deec:	23fa      	movs	r3, #250	; 0xfa
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	4298      	cmp	r0, r3
 800def2:	d9f4      	bls.n	800dede <HAL_RTCEx_DeactivateWakeUpTimer+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	22ff      	movs	r2, #255	; 0xff
 800def8:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800defa:	2329      	movs	r3, #41	; 0x29
 800defc:	3afc      	subs	r2, #252	; 0xfc
 800defe:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hrtc);
 800df00:	3b01      	subs	r3, #1
 800df02:	2200      	movs	r2, #0
 800df04:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800df06:	2003      	movs	r0, #3
 800df08:	e008      	b.n	800df1c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df0a:	22ff      	movs	r2, #255	; 0xff
 800df0c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800df0e:	2329      	movs	r3, #41	; 0x29
 800df10:	3afe      	subs	r2, #254	; 0xfe
 800df12:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800df14:	3b01      	subs	r3, #1
 800df16:	2200      	movs	r2, #0
 800df18:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800df1a:	2000      	movs	r0, #0
}
 800df1c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800df1e:	2002      	movs	r0, #2
 800df20:	e7fc      	b.n	800df1c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
 800df22:	46c0      	nop			; (mov r8, r8)
 800df24:	fffffbff 	.word	0xfffffbff
 800df28:	ffffbfff 	.word	0xffffbfff

0800df2c <HAL_RTCEx_SetWakeUpTimer_IT>:
{
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	0004      	movs	r4, r0
 800df30:	000e      	movs	r6, r1
 800df32:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 800df34:	2328      	movs	r3, #40	; 0x28
 800df36:	5cc3      	ldrb	r3, [r0, r3]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d05b      	beq.n	800dff4 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 800df3c:	2328      	movs	r3, #40	; 0x28
 800df3e:	2201      	movs	r2, #1
 800df40:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800df42:	3301      	adds	r3, #1
 800df44:	3201      	adds	r2, #1
 800df46:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df48:	6803      	ldr	r3, [r0, #0]
 800df4a:	32c8      	adds	r2, #200	; 0xc8
 800df4c:	625a      	str	r2, [r3, #36]	; 0x24
 800df4e:	6803      	ldr	r3, [r0, #0]
 800df50:	3a77      	subs	r2, #119	; 0x77
 800df52:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800df54:	6802      	ldr	r2, [r0, #0]
 800df56:	6993      	ldr	r3, [r2, #24]
 800df58:	4927      	ldr	r1, [pc, #156]	; (800dff8 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>)
 800df5a:	400b      	ands	r3, r1
 800df5c:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800df5e:	6802      	ldr	r2, [r0, #0]
 800df60:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800df62:	2104      	movs	r1, #4
 800df64:	430b      	orrs	r3, r1
 800df66:	65d3      	str	r3, [r2, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800df68:	4b24      	ldr	r3, [pc, #144]	; (800dffc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>)
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	065b      	lsls	r3, r3, #25
 800df6e:	d528      	bpl.n	800dfc2 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800df70:	6823      	ldr	r3, [r4, #0]
 800df72:	615e      	str	r6, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800df74:	6822      	ldr	r2, [r4, #0]
 800df76:	6993      	ldr	r3, [r2, #24]
 800df78:	2107      	movs	r1, #7
 800df7a:	438b      	bics	r3, r1
 800df7c:	6193      	str	r3, [r2, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800df7e:	6822      	ldr	r2, [r4, #0]
 800df80:	6993      	ldr	r3, [r2, #24]
 800df82:	431d      	orrs	r5, r3
 800df84:	6195      	str	r5, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800df86:	491e      	ldr	r1, [pc, #120]	; (800e000 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 800df88:	2280      	movs	r2, #128	; 0x80
 800df8a:	5888      	ldr	r0, [r1, r2]
 800df8c:	2380      	movs	r3, #128	; 0x80
 800df8e:	031b      	lsls	r3, r3, #12
 800df90:	4303      	orrs	r3, r0
 800df92:	508b      	str	r3, [r1, r2]
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	6991      	ldr	r1, [r2, #24]
 800df98:	2380      	movs	r3, #128	; 0x80
 800df9a:	01db      	lsls	r3, r3, #7
 800df9c:	430b      	orrs	r3, r1
 800df9e:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dfa0:	6822      	ldr	r2, [r4, #0]
 800dfa2:	6991      	ldr	r1, [r2, #24]
 800dfa4:	2380      	movs	r3, #128	; 0x80
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	430b      	orrs	r3, r1
 800dfaa:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	22ff      	movs	r2, #255	; 0xff
 800dfb0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800dfb2:	2329      	movs	r3, #41	; 0x29
 800dfb4:	3afe      	subs	r2, #254	; 0xfe
 800dfb6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800dfb8:	3b01      	subs	r3, #1
 800dfba:	2200      	movs	r2, #0
 800dfbc:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800dfbe:	2000      	movs	r0, #0
}
 800dfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 800dfc2:	f7ff fc09 	bl	800d7d8 <HAL_GetTick>
 800dfc6:	0007      	movs	r7, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	075b      	lsls	r3, r3, #29
 800dfce:	d4cf      	bmi.n	800df70 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800dfd0:	f7ff fc02 	bl	800d7d8 <HAL_GetTick>
 800dfd4:	1bc0      	subs	r0, r0, r7
 800dfd6:	23fa      	movs	r3, #250	; 0xfa
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	4298      	cmp	r0, r3
 800dfdc:	d9f4      	bls.n	800dfc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dfde:	6823      	ldr	r3, [r4, #0]
 800dfe0:	22ff      	movs	r2, #255	; 0xff
 800dfe2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfe4:	2329      	movs	r3, #41	; 0x29
 800dfe6:	3afc      	subs	r2, #252	; 0xfc
 800dfe8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800dfea:	3b01      	subs	r3, #1
 800dfec:	2200      	movs	r2, #0
 800dfee:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800dff0:	2003      	movs	r0, #3
 800dff2:	e7e5      	b.n	800dfc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  __HAL_LOCK(hrtc);
 800dff4:	2002      	movs	r0, #2
 800dff6:	e7e3      	b.n	800dfc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
 800dff8:	fffffbff 	.word	0xfffffbff
 800dffc:	40002800 	.word	0x40002800
 800e000:	40021800 	.word	0x40021800

0800e004 <RTC_EnterInitMode>:
{
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800e008:	6803      	ldr	r3, [r0, #0]
 800e00a:	68da      	ldr	r2, [r3, #12]
 800e00c:	0652      	lsls	r2, r2, #25
 800e00e:	d502      	bpl.n	800e016 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;  
 800e010:	2400      	movs	r4, #0
}
 800e012:	0020      	movs	r0, r4
 800e014:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e016:	68d9      	ldr	r1, [r3, #12]
 800e018:	2280      	movs	r2, #128	; 0x80
 800e01a:	430a      	orrs	r2, r1
 800e01c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800e01e:	f7ff fbdb 	bl	800d7d8 <HAL_GetTick>
 800e022:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;  
 800e024:	2400      	movs	r4, #0
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e026:	682b      	ldr	r3, [r5, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	065b      	lsls	r3, r3, #25
 800e02c:	d4f1      	bmi.n	800e012 <RTC_EnterInitMode+0xe>
 800e02e:	2c03      	cmp	r4, #3
 800e030:	d0ef      	beq.n	800e012 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e032:	f7ff fbd1 	bl	800d7d8 <HAL_GetTick>
 800e036:	1b80      	subs	r0, r0, r6
 800e038:	23fa      	movs	r3, #250	; 0xfa
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4298      	cmp	r0, r3
 800e03e:	d9f2      	bls.n	800e026 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e040:	2403      	movs	r4, #3
 800e042:	2329      	movs	r3, #41	; 0x29
 800e044:	54ec      	strb	r4, [r5, r3]
 800e046:	e7ee      	b.n	800e026 <RTC_EnterInitMode+0x22>

0800e048 <HAL_RTC_WaitForSynchro>:
{
 800e048:	b570      	push	{r4, r5, r6, lr}
 800e04a:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800e04c:	6802      	ldr	r2, [r0, #0]
 800e04e:	68d3      	ldr	r3, [r2, #12]
 800e050:	21a0      	movs	r1, #160	; 0xa0
 800e052:	438b      	bics	r3, r1
 800e054:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 800e056:	f7ff fbbf 	bl	800d7d8 <HAL_GetTick>
 800e05a:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	069b      	lsls	r3, r3, #26
 800e062:	d408      	bmi.n	800e076 <HAL_RTC_WaitForSynchro+0x2e>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e064:	f7ff fbb8 	bl	800d7d8 <HAL_GetTick>
 800e068:	1b40      	subs	r0, r0, r5
 800e06a:	23fa      	movs	r3, #250	; 0xfa
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	4298      	cmp	r0, r3
 800e070:	d9f4      	bls.n	800e05c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800e072:	2003      	movs	r0, #3
 800e074:	e000      	b.n	800e078 <HAL_RTC_WaitForSynchro+0x30>
  return HAL_OK;
 800e076:	2000      	movs	r0, #0
}
 800e078:	bd70      	pop	{r4, r5, r6, pc}

0800e07a <RTC_ExitInitMode>:
{
 800e07a:	b510      	push	{r4, lr}
 800e07c:	0004      	movs	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e07e:	4b11      	ldr	r3, [pc, #68]	; (800e0c4 <RTC_ExitInitMode+0x4a>)
 800e080:	68da      	ldr	r2, [r3, #12]
 800e082:	2180      	movs	r1, #128	; 0x80
 800e084:	438a      	bics	r2, r1
 800e086:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e088:	699b      	ldr	r3, [r3, #24]
 800e08a:	069b      	lsls	r3, r3, #26
 800e08c:	d407      	bmi.n	800e09e <RTC_ExitInitMode+0x24>
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e08e:	f7ff ffdb 	bl	800e048 <HAL_RTC_WaitForSynchro>
 800e092:	2800      	cmp	r0, #0
 800e094:	d014      	beq.n	800e0c0 <RTC_ExitInitMode+0x46>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e096:	2003      	movs	r0, #3
 800e098:	2329      	movs	r3, #41	; 0x29
 800e09a:	54e0      	strb	r0, [r4, r3]
 800e09c:	e010      	b.n	800e0c0 <RTC_ExitInitMode+0x46>
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e09e:	4a09      	ldr	r2, [pc, #36]	; (800e0c4 <RTC_ExitInitMode+0x4a>)
 800e0a0:	6993      	ldr	r3, [r2, #24]
 800e0a2:	2120      	movs	r1, #32
 800e0a4:	438b      	bics	r3, r1
 800e0a6:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0a8:	f7ff ffce 	bl	800e048 <HAL_RTC_WaitForSynchro>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d002      	beq.n	800e0b6 <RTC_ExitInitMode+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0b0:	2003      	movs	r0, #3
 800e0b2:	2329      	movs	r3, #41	; 0x29
 800e0b4:	54e0      	strb	r0, [r4, r3]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e0b6:	4a03      	ldr	r2, [pc, #12]	; (800e0c4 <RTC_ExitInitMode+0x4a>)
 800e0b8:	6991      	ldr	r1, [r2, #24]
 800e0ba:	2320      	movs	r3, #32
 800e0bc:	430b      	orrs	r3, r1
 800e0be:	6193      	str	r3, [r2, #24]
}
 800e0c0:	bd10      	pop	{r4, pc}
 800e0c2:	46c0      	nop			; (mov r8, r8)
 800e0c4:	40002800 	.word	0x40002800

0800e0c8 <HAL_RTC_SetDate>:
{
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	0004      	movs	r4, r0
 800e0cc:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 800e0ce:	2328      	movs	r3, #40	; 0x28
 800e0d0:	5cc3      	ldrb	r3, [r0, r3]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d04a      	beq.n	800e16c <HAL_RTC_SetDate+0xa4>
 800e0d6:	2328      	movs	r3, #40	; 0x28
 800e0d8:	2101      	movs	r1, #1
 800e0da:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e0dc:	3301      	adds	r3, #1
 800e0de:	3101      	adds	r1, #1
 800e0e0:	54c1      	strb	r1, [r0, r3]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e0e2:	2a00      	cmp	r2, #0
 800e0e4:	d106      	bne.n	800e0f4 <HAL_RTC_SetDate+0x2c>
 800e0e6:	7873      	ldrb	r3, [r6, #1]
 800e0e8:	06d9      	lsls	r1, r3, #27
 800e0ea:	d503      	bpl.n	800e0f4 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e0ec:	2110      	movs	r1, #16
 800e0ee:	438b      	bics	r3, r1
 800e0f0:	330a      	adds	r3, #10
 800e0f2:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 800e0f4:	2a00      	cmp	r2, #0
 800e0f6:	d126      	bne.n	800e146 <HAL_RTC_SetDate+0x7e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e0f8:	78f0      	ldrb	r0, [r6, #3]
 800e0fa:	f7fd fa0b 	bl	800b514 <RTC_ByteToBcd2>
 800e0fe:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e100:	7870      	ldrb	r0, [r6, #1]
 800e102:	f7fd fa07 	bl	800b514 <RTC_ByteToBcd2>
 800e106:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e108:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e10a:	78b0      	ldrb	r0, [r6, #2]
 800e10c:	f7fd fa02 	bl	800b514 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e110:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e112:	7830      	ldrb	r0, [r6, #0]
 800e114:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e116:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	22ca      	movs	r2, #202	; 0xca
 800e11c:	625a      	str	r2, [r3, #36]	; 0x24
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	3a77      	subs	r2, #119	; 0x77
 800e122:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800e124:	0020      	movs	r0, r4
 800e126:	f7ff ff6d 	bl	800e004 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d016      	beq.n	800e15c <HAL_RTC_SetDate+0x94>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e12e:	6823      	ldr	r3, [r4, #0]
 800e130:	22ff      	movs	r2, #255	; 0xff
 800e132:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800e134:	2800      	cmp	r0, #0
 800e136:	d102      	bne.n	800e13e <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 800e138:	2329      	movs	r3, #41	; 0x29
 800e13a:	3afe      	subs	r2, #254	; 0xfe
 800e13c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e13e:	2328      	movs	r3, #40	; 0x28
 800e140:	2200      	movs	r2, #0
 800e142:	54e2      	strb	r2, [r4, r3]
}
 800e144:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e146:	78f5      	ldrb	r5, [r6, #3]
 800e148:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e14a:	7870      	ldrb	r0, [r6, #1]
 800e14c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e14e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800e150:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e152:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e154:	7830      	ldrb	r0, [r6, #0]
 800e156:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e158:	4305      	orrs	r5, r0
 800e15a:	e7dd      	b.n	800e118 <HAL_RTC_SetDate+0x50>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	4804      	ldr	r0, [pc, #16]	; (800e170 <HAL_RTC_SetDate+0xa8>)
 800e160:	4005      	ands	r5, r0
 800e162:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800e164:	0020      	movs	r0, r4
 800e166:	f7ff ff88 	bl	800e07a <RTC_ExitInitMode>
 800e16a:	e7e0      	b.n	800e12e <HAL_RTC_SetDate+0x66>
 __HAL_LOCK(hrtc);
 800e16c:	2002      	movs	r0, #2
 800e16e:	e7e9      	b.n	800e144 <HAL_RTC_SetDate+0x7c>
 800e170:	00ffff3f 	.word	0x00ffff3f

0800e174 <HAL_RTC_SetTime>:
{
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	0004      	movs	r4, r0
 800e178:	000e      	movs	r6, r1
 800e17a:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 800e17c:	2328      	movs	r3, #40	; 0x28
 800e17e:	5cc3      	ldrb	r3, [r0, r3]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d057      	beq.n	800e234 <HAL_RTC_SetTime+0xc0>
 800e184:	2328      	movs	r3, #40	; 0x28
 800e186:	2201      	movs	r2, #1
 800e188:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e18a:	3301      	adds	r3, #1
 800e18c:	3201      	adds	r2, #1
 800e18e:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e190:	6803      	ldr	r3, [r0, #0]
 800e192:	32c8      	adds	r2, #200	; 0xc8
 800e194:	625a      	str	r2, [r3, #36]	; 0x24
 800e196:	6803      	ldr	r3, [r0, #0]
 800e198:	3a77      	subs	r2, #119	; 0x77
 800e19a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800e19c:	f7ff ff32 	bl	800e004 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d12a      	bne.n	800e1fa <HAL_RTC_SetTime+0x86>
    if(Format == RTC_FORMAT_BIN)
 800e1a4:	2d00      	cmp	r5, #0
 800e1a6:	d134      	bne.n	800e212 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	d401      	bmi.n	800e1b4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e1b4:	7830      	ldrb	r0, [r6, #0]
 800e1b6:	f7fd f9ad 	bl	800b514 <RTC_ByteToBcd2>
 800e1ba:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e1bc:	7870      	ldrb	r0, [r6, #1]
 800e1be:	f7fd f9a9 	bl	800b514 <RTC_ByteToBcd2>
 800e1c2:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e1c4:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e1c6:	78b0      	ldrb	r0, [r6, #2]
 800e1c8:	f7fd f9a4 	bl	800b514 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e1cc:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e1ce:	78f3      	ldrb	r3, [r6, #3]
 800e1d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e1d2:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e1d4:	6823      	ldr	r3, [r4, #0]
 800e1d6:	4a18      	ldr	r2, [pc, #96]	; (800e238 <HAL_RTC_SetTime+0xc4>)
 800e1d8:	4010      	ands	r0, r2
 800e1da:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e1dc:	6822      	ldr	r2, [r4, #0]
 800e1de:	6993      	ldr	r3, [r2, #24]
 800e1e0:	4916      	ldr	r1, [pc, #88]	; (800e23c <HAL_RTC_SetTime+0xc8>)
 800e1e2:	400b      	ands	r3, r1
 800e1e4:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e1e6:	6821      	ldr	r1, [r4, #0]
 800e1e8:	698b      	ldr	r3, [r1, #24]
 800e1ea:	68f2      	ldr	r2, [r6, #12]
 800e1ec:	6930      	ldr	r0, [r6, #16]
 800e1ee:	4302      	orrs	r2, r0
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 800e1f4:	0020      	movs	r0, r4
 800e1f6:	f7ff ff40 	bl	800e07a <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1fa:	6823      	ldr	r3, [r4, #0]
 800e1fc:	22ff      	movs	r2, #255	; 0xff
 800e1fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800e200:	2800      	cmp	r0, #0
 800e202:	d102      	bne.n	800e20a <HAL_RTC_SetTime+0x96>
   hrtc->State = HAL_RTC_STATE_READY;
 800e204:	2329      	movs	r3, #41	; 0x29
 800e206:	3afe      	subs	r2, #254	; 0xfe
 800e208:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e20a:	2328      	movs	r3, #40	; 0x28
 800e20c:	2200      	movs	r2, #0
 800e20e:	54e2      	strb	r2, [r4, r3]
}
 800e210:	bd70      	pop	{r4, r5, r6, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	065b      	lsls	r3, r3, #25
 800e218:	d401      	bmi.n	800e21e <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800e21a:	2300      	movs	r3, #0
 800e21c:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e21e:	7830      	ldrb	r0, [r6, #0]
 800e220:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e222:	7873      	ldrb	r3, [r6, #1]
 800e224:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e226:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e228:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e22a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e22c:	78f3      	ldrb	r3, [r6, #3]
 800e22e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e230:	4318      	orrs	r0, r3
 800e232:	e7cf      	b.n	800e1d4 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 800e234:	2002      	movs	r0, #2
 800e236:	e7eb      	b.n	800e210 <HAL_RTC_SetTime+0x9c>
 800e238:	007f7f7f 	.word	0x007f7f7f
 800e23c:	fffbffff 	.word	0xfffbffff

0800e240 <HAL_RTC_Init>:
{
 800e240:	b570      	push	{r4, r5, r6, lr}
 800e242:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 800e244:	d04e      	beq.n	800e2e4 <HAL_RTC_Init+0xa4>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800e246:	2329      	movs	r3, #41	; 0x29
 800e248:	5cc3      	ldrb	r3, [r0, r3]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d016      	beq.n	800e27c <HAL_RTC_Init+0x3c>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e24e:	2329      	movs	r3, #41	; 0x29
 800e250:	2202      	movs	r2, #2
 800e252:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e254:	6823      	ldr	r3, [r4, #0]
 800e256:	32c8      	adds	r2, #200	; 0xc8
 800e258:	625a      	str	r2, [r3, #36]	; 0x24
 800e25a:	6823      	ldr	r3, [r4, #0]
 800e25c:	3a77      	subs	r2, #119	; 0x77
 800e25e:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800e260:	0020      	movs	r0, r4
 800e262:	f7ff fecf 	bl	800e004 <RTC_EnterInitMode>
    if(status == HAL_OK)
 800e266:	2800      	cmp	r0, #0
 800e268:	d011      	beq.n	800e28e <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e26a:	6823      	ldr	r3, [r4, #0]
 800e26c:	22ff      	movs	r2, #255	; 0xff
 800e26e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800e270:	2800      	cmp	r0, #0
 800e272:	d102      	bne.n	800e27a <HAL_RTC_Init+0x3a>
      hrtc->State = HAL_RTC_STATE_READY;
 800e274:	2329      	movs	r3, #41	; 0x29
 800e276:	3afe      	subs	r2, #254	; 0xfe
 800e278:	54e2      	strb	r2, [r4, r3]
}
 800e27a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800e27c:	3328      	adds	r3, #40	; 0x28
 800e27e:	2200      	movs	r2, #0
 800e280:	54c2      	strb	r2, [r0, r3]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800e282:	2388      	movs	r3, #136	; 0x88
 800e284:	021b      	lsls	r3, r3, #8
 800e286:	6043      	str	r3, [r0, #4]
    HAL_RTC_MspInit(hrtc);
 800e288:	f7fc fdaa 	bl	800ade0 <HAL_RTC_MspInit>
 800e28c:	e7df      	b.n	800e24e <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800e28e:	6822      	ldr	r2, [r4, #0]
 800e290:	6993      	ldr	r3, [r2, #24]
 800e292:	4915      	ldr	r1, [pc, #84]	; (800e2e8 <HAL_RTC_Init+0xa8>)
 800e294:	400b      	ands	r3, r1
 800e296:	6193      	str	r3, [r2, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e298:	6821      	ldr	r1, [r4, #0]
 800e29a:	698a      	ldr	r2, [r1, #24]
 800e29c:	68a3      	ldr	r3, [r4, #8]
 800e29e:	6960      	ldr	r0, [r4, #20]
 800e2a0:	4303      	orrs	r3, r0
 800e2a2:	69e0      	ldr	r0, [r4, #28]
 800e2a4:	4303      	orrs	r3, r0
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	618b      	str	r3, [r1, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	6922      	ldr	r2, [r4, #16]
 800e2ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e2b0:	6821      	ldr	r1, [r4, #0]
 800e2b2:	690b      	ldr	r3, [r1, #16]
 800e2b4:	68e2      	ldr	r2, [r4, #12]
 800e2b6:	0412      	lsls	r2, r2, #16
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 800e2bc:	0020      	movs	r0, r4
 800e2be:	f7ff fedc 	bl	800e07a <RTC_ExitInitMode>
      if (status == HAL_OK)
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d1d1      	bne.n	800e26a <HAL_RTC_Init+0x2a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800e2c6:	6822      	ldr	r2, [r4, #0]
 800e2c8:	6993      	ldr	r3, [r2, #24]
 800e2ca:	00db      	lsls	r3, r3, #3
 800e2cc:	08db      	lsrs	r3, r3, #3
 800e2ce:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e2d0:	6821      	ldr	r1, [r4, #0]
 800e2d2:	698a      	ldr	r2, [r1, #24]
 800e2d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2d6:	6a25      	ldr	r5, [r4, #32]
 800e2d8:	432b      	orrs	r3, r5
 800e2da:	69a5      	ldr	r5, [r4, #24]
 800e2dc:	432b      	orrs	r3, r5
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	618b      	str	r3, [r1, #24]
 800e2e2:	e7c2      	b.n	800e26a <HAL_RTC_Init+0x2a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	e7c8      	b.n	800e27a <HAL_RTC_Init+0x3a>
 800e2e8:	fb8fffbf 	.word	0xfb8fffbf

0800e2ec <HAL_RTC_DeactivateAlarm>:
{
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800e2f0:	2328      	movs	r3, #40	; 0x28
 800e2f2:	5cc3      	ldrb	r3, [r0, r3]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d060      	beq.n	800e3ba <HAL_RTC_DeactivateAlarm+0xce>
 800e2f8:	2328      	movs	r3, #40	; 0x28
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e2fe:	3301      	adds	r3, #1
 800e300:	3201      	adds	r2, #1
 800e302:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e304:	6803      	ldr	r3, [r0, #0]
 800e306:	32c8      	adds	r2, #200	; 0xc8
 800e308:	625a      	str	r2, [r3, #36]	; 0x24
 800e30a:	6803      	ldr	r3, [r0, #0]
 800e30c:	3a77      	subs	r2, #119	; 0x77
 800e30e:	625a      	str	r2, [r3, #36]	; 0x24
  if(Alarm == RTC_ALARM_A)
 800e310:	2380      	movs	r3, #128	; 0x80
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	4299      	cmp	r1, r3
 800e316:	d022      	beq.n	800e35e <HAL_RTC_DeactivateAlarm+0x72>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e318:	6802      	ldr	r2, [r0, #0]
 800e31a:	6993      	ldr	r3, [r2, #24]
 800e31c:	4928      	ldr	r1, [pc, #160]	; (800e3c0 <HAL_RTC_DeactivateAlarm+0xd4>)
 800e31e:	400b      	ands	r3, r1
 800e320:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800e322:	6802      	ldr	r2, [r0, #0]
 800e324:	6993      	ldr	r3, [r2, #24]
 800e326:	4927      	ldr	r1, [pc, #156]	; (800e3c4 <HAL_RTC_DeactivateAlarm+0xd8>)
 800e328:	400b      	ands	r3, r1
 800e32a:	6193      	str	r3, [r2, #24]
    tickstart = HAL_GetTick();
 800e32c:	f7ff fa54 	bl	800d7d8 <HAL_GetTick>
 800e330:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	079b      	lsls	r3, r3, #30
 800e338:	d434      	bmi.n	800e3a4 <HAL_RTC_DeactivateAlarm+0xb8>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e33a:	f7ff fa4d 	bl	800d7d8 <HAL_GetTick>
 800e33e:	1b40      	subs	r0, r0, r5
 800e340:	23fa      	movs	r3, #250	; 0xfa
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4298      	cmp	r0, r3
 800e346:	d9f4      	bls.n	800e332 <HAL_RTC_DeactivateAlarm+0x46>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	22ff      	movs	r2, #255	; 0xff
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e34e:	2329      	movs	r3, #41	; 0x29
 800e350:	3afc      	subs	r2, #252	; 0xfc
 800e352:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e354:	3b01      	subs	r3, #1
 800e356:	2200      	movs	r2, #0
 800e358:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e35a:	2003      	movs	r0, #3
 800e35c:	e02c      	b.n	800e3b8 <HAL_RTC_DeactivateAlarm+0xcc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e35e:	6802      	ldr	r2, [r0, #0]
 800e360:	6993      	ldr	r3, [r2, #24]
 800e362:	4919      	ldr	r1, [pc, #100]	; (800e3c8 <HAL_RTC_DeactivateAlarm+0xdc>)
 800e364:	400b      	ands	r3, r1
 800e366:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e368:	6802      	ldr	r2, [r0, #0]
 800e36a:	6993      	ldr	r3, [r2, #24]
 800e36c:	4917      	ldr	r1, [pc, #92]	; (800e3cc <HAL_RTC_DeactivateAlarm+0xe0>)
 800e36e:	400b      	ands	r3, r1
 800e370:	6193      	str	r3, [r2, #24]
    tickstart = HAL_GetTick();
 800e372:	f7ff fa31 	bl	800d7d8 <HAL_GetTick>
 800e376:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e378:	6823      	ldr	r3, [r4, #0]
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	07db      	lsls	r3, r3, #31
 800e37e:	d411      	bmi.n	800e3a4 <HAL_RTC_DeactivateAlarm+0xb8>
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e380:	f7ff fa2a 	bl	800d7d8 <HAL_GetTick>
 800e384:	1b40      	subs	r0, r0, r5
 800e386:	23fa      	movs	r3, #250	; 0xfa
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4298      	cmp	r0, r3
 800e38c:	d9f4      	bls.n	800e378 <HAL_RTC_DeactivateAlarm+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	22ff      	movs	r2, #255	; 0xff
 800e392:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e394:	2329      	movs	r3, #41	; 0x29
 800e396:	3afc      	subs	r2, #252	; 0xfc
 800e398:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e39a:	3b01      	subs	r3, #1
 800e39c:	2200      	movs	r2, #0
 800e39e:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e3a0:	2003      	movs	r0, #3
 800e3a2:	e009      	b.n	800e3b8 <HAL_RTC_DeactivateAlarm+0xcc>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	22ff      	movs	r2, #255	; 0xff
 800e3a8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e3aa:	2329      	movs	r3, #41	; 0x29
 800e3ac:	3afe      	subs	r2, #254	; 0xfe
 800e3ae:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e3b6:	2000      	movs	r0, #0
}
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800e3ba:	2002      	movs	r0, #2
 800e3bc:	e7fc      	b.n	800e3b8 <HAL_RTC_DeactivateAlarm+0xcc>
 800e3be:	46c0      	nop			; (mov r8, r8)
 800e3c0:	fffffdff 	.word	0xfffffdff
 800e3c4:	ffffdfff 	.word	0xffffdfff
 800e3c8:	fffffeff 	.word	0xfffffeff
 800e3cc:	ffffefff 	.word	0xffffefff

0800e3d0 <HAL_RTC_SetAlarm_IT>:
{
 800e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d2:	0004      	movs	r4, r0
 800e3d4:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800e3d6:	2328      	movs	r3, #40	; 0x28
 800e3d8:	5cc3      	ldrb	r3, [r0, r3]
 800e3da:	2b01      	cmp	r3, #1
 800e3dc:	d100      	bne.n	800e3e0 <HAL_RTC_SetAlarm_IT+0x10>
 800e3de:	e0c6      	b.n	800e56e <HAL_RTC_SetAlarm_IT+0x19e>
 800e3e0:	2328      	movs	r3, #40	; 0x28
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	3101      	adds	r1, #1
 800e3ea:	54c1      	strb	r1, [r0, r3]
  if(Format == RTC_FORMAT_BIN)
 800e3ec:	2a00      	cmp	r2, #0
 800e3ee:	d150      	bne.n	800e492 <HAL_RTC_SetAlarm_IT+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e3f0:	6803      	ldr	r3, [r0, #0]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	065b      	lsls	r3, r3, #25
 800e3f6:	d401      	bmi.n	800e3fc <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800e3fc:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e3fe:	7828      	ldrb	r0, [r5, #0]
 800e400:	f7fd f888 	bl	800b514 <RTC_ByteToBcd2>
 800e404:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e406:	7868      	ldrb	r0, [r5, #1]
 800e408:	f7fd f884 	bl	800b514 <RTC_ByteToBcd2>
 800e40c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e40e:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e410:	78a8      	ldrb	r0, [r5, #2]
 800e412:	f7fd f87f 	bl	800b514 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e416:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e418:	78e8      	ldrb	r0, [r5, #3]
 800e41a:	0580      	lsls	r0, r0, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e41c:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e41e:	2320      	movs	r3, #32
 800e420:	5ce8      	ldrb	r0, [r5, r3]
 800e422:	f7fd f877 	bl	800b514 <RTC_ByteToBcd2>
 800e426:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e428:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e42a:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e42c:	696b      	ldr	r3, [r5, #20]
 800e42e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e430:	686f      	ldr	r7, [r5, #4]
 800e432:	69ab      	ldr	r3, [r5, #24]
 800e434:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e436:	6823      	ldr	r3, [r4, #0]
 800e438:	22ca      	movs	r2, #202	; 0xca
 800e43a:	625a      	str	r2, [r3, #36]	; 0x24
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	3a77      	subs	r2, #119	; 0x77
 800e440:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e442:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e444:	2380      	movs	r3, #128	; 0x80
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	429a      	cmp	r2, r3
 800e44a:	d03b      	beq.n	800e4c4 <HAL_RTC_SetAlarm_IT+0xf4>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e44c:	6822      	ldr	r2, [r4, #0]
 800e44e:	6993      	ldr	r3, [r2, #24]
 800e450:	4948      	ldr	r1, [pc, #288]	; (800e574 <HAL_RTC_SetAlarm_IT+0x1a4>)
 800e452:	400b      	ands	r3, r1
 800e454:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800e456:	6822      	ldr	r2, [r4, #0]
 800e458:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e45a:	2102      	movs	r1, #2
 800e45c:	430b      	orrs	r3, r1
 800e45e:	65d3      	str	r3, [r2, #92]	; 0x5c
    tickstart = HAL_GetTick();
 800e460:	f7ff f9ba 	bl	800d7d8 <HAL_GetTick>
 800e464:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	68da      	ldr	r2, [r3, #12]
 800e46a:	0792      	lsls	r2, r2, #30
 800e46c:	d45e      	bmi.n	800e52c <HAL_RTC_SetAlarm_IT+0x15c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e46e:	f7ff f9b3 	bl	800d7d8 <HAL_GetTick>
 800e472:	1b40      	subs	r0, r0, r5
 800e474:	23fa      	movs	r3, #250	; 0xfa
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4298      	cmp	r0, r3
 800e47a:	d9f4      	bls.n	800e466 <HAL_RTC_SetAlarm_IT+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	22ff      	movs	r2, #255	; 0xff
 800e480:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e482:	2329      	movs	r3, #41	; 0x29
 800e484:	3afc      	subs	r2, #252	; 0xfc
 800e486:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e488:	3b01      	subs	r3, #1
 800e48a:	2200      	movs	r2, #0
 800e48c:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e48e:	2003      	movs	r0, #3
 800e490:	e06c      	b.n	800e56c <HAL_RTC_SetAlarm_IT+0x19c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e492:	6803      	ldr	r3, [r0, #0]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	065b      	lsls	r3, r3, #25
 800e498:	d401      	bmi.n	800e49e <HAL_RTC_SetAlarm_IT+0xce>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e49a:	2300      	movs	r3, #0
 800e49c:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e49e:	782e      	ldrb	r6, [r5, #0]
 800e4a0:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e4a2:	786b      	ldrb	r3, [r5, #1]
 800e4a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e4a6:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e4a8:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e4aa:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e4ac:	78eb      	ldrb	r3, [r5, #3]
 800e4ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e4b0:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e4b2:	2320      	movs	r3, #32
 800e4b4:	5ceb      	ldrb	r3, [r5, r3]
 800e4b6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e4b8:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e4ba:	69eb      	ldr	r3, [r5, #28]
 800e4bc:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e4be:	696b      	ldr	r3, [r5, #20]
 800e4c0:	431e      	orrs	r6, r3
 800e4c2:	e7b5      	b.n	800e430 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e4c4:	6822      	ldr	r2, [r4, #0]
 800e4c6:	6993      	ldr	r3, [r2, #24]
 800e4c8:	492b      	ldr	r1, [pc, #172]	; (800e578 <HAL_RTC_SetAlarm_IT+0x1a8>)
 800e4ca:	400b      	ands	r3, r1
 800e4cc:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e4ce:	6822      	ldr	r2, [r4, #0]
 800e4d0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e4d2:	3103      	adds	r1, #3
 800e4d4:	31ff      	adds	r1, #255	; 0xff
 800e4d6:	430b      	orrs	r3, r1
 800e4d8:	65d3      	str	r3, [r2, #92]	; 0x5c
    tickstart = HAL_GetTick();
 800e4da:	f7ff f97d 	bl	800d7d8 <HAL_GetTick>
 800e4de:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e4e0:	6823      	ldr	r3, [r4, #0]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	07d2      	lsls	r2, r2, #31
 800e4e6:	d411      	bmi.n	800e50c <HAL_RTC_SetAlarm_IT+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e4e8:	f7ff f976 	bl	800d7d8 <HAL_GetTick>
 800e4ec:	1b40      	subs	r0, r0, r5
 800e4ee:	23fa      	movs	r3, #250	; 0xfa
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4298      	cmp	r0, r3
 800e4f4:	d9f4      	bls.n	800e4e0 <HAL_RTC_SetAlarm_IT+0x110>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	22ff      	movs	r2, #255	; 0xff
 800e4fa:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e4fc:	2329      	movs	r3, #41	; 0x29
 800e4fe:	3afc      	subs	r2, #252	; 0xfc
 800e500:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e502:	3b01      	subs	r3, #1
 800e504:	2200      	movs	r2, #0
 800e506:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e508:	2003      	movs	r0, #3
 800e50a:	e02f      	b.n	800e56c <HAL_RTC_SetAlarm_IT+0x19c>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e50c:	641e      	str	r6, [r3, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e512:	6822      	ldr	r2, [r4, #0]
 800e514:	6991      	ldr	r1, [r2, #24]
 800e516:	2380      	movs	r3, #128	; 0x80
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	430b      	orrs	r3, r1
 800e51c:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800e51e:	6822      	ldr	r2, [r4, #0]
 800e520:	6991      	ldr	r1, [r2, #24]
 800e522:	2380      	movs	r3, #128	; 0x80
 800e524:	015b      	lsls	r3, r3, #5
 800e526:	430b      	orrs	r3, r1
 800e528:	6193      	str	r3, [r2, #24]
 800e52a:	e00e      	b.n	800e54a <HAL_RTC_SetAlarm_IT+0x17a>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e52c:	649e      	str	r6, [r3, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	64df      	str	r7, [r3, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e532:	6822      	ldr	r2, [r4, #0]
 800e534:	6991      	ldr	r1, [r2, #24]
 800e536:	2380      	movs	r3, #128	; 0x80
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	430b      	orrs	r3, r1
 800e53c:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e53e:	6822      	ldr	r2, [r4, #0]
 800e540:	6991      	ldr	r1, [r2, #24]
 800e542:	2380      	movs	r3, #128	; 0x80
 800e544:	019b      	lsls	r3, r3, #6
 800e546:	430b      	orrs	r3, r1
 800e548:	6193      	str	r3, [r2, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e54a:	490c      	ldr	r1, [pc, #48]	; (800e57c <HAL_RTC_SetAlarm_IT+0x1ac>)
 800e54c:	2280      	movs	r2, #128	; 0x80
 800e54e:	5888      	ldr	r0, [r1, r2]
 800e550:	2380      	movs	r3, #128	; 0x80
 800e552:	031b      	lsls	r3, r3, #12
 800e554:	4303      	orrs	r3, r0
 800e556:	508b      	str	r3, [r1, r2]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	327f      	adds	r2, #127	; 0x7f
 800e55c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e55e:	2329      	movs	r3, #41	; 0x29
 800e560:	3afe      	subs	r2, #254	; 0xfe
 800e562:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e564:	3b01      	subs	r3, #1
 800e566:	2200      	movs	r2, #0
 800e568:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e56a:	2000      	movs	r0, #0
}
 800e56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800e56e:	2002      	movs	r0, #2
 800e570:	e7fc      	b.n	800e56c <HAL_RTC_SetAlarm_IT+0x19c>
 800e572:	46c0      	nop			; (mov r8, r8)
 800e574:	fffffdff 	.word	0xfffffdff
 800e578:	fffffeff 	.word	0xfffffeff
 800e57c:	40021800 	.word	0x40021800

0800e580 <HAL_Delay>:
{
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e584:	f7ff f928 	bl	800d7d8 <HAL_GetTick>
 800e588:	0005      	movs	r5, r0
  if (wait < HAL_MAX_DELAY)
 800e58a:	1c63      	adds	r3, r4, #1
 800e58c:	d000      	beq.n	800e590 <HAL_Delay+0x10>
    wait += (uint32_t)(uwTickFreq);
 800e58e:	3401      	adds	r4, #1
  while ((HAL_GetTick() - tickstart) < wait)
 800e590:	f7ff f922 	bl	800d7d8 <HAL_GetTick>
 800e594:	1b40      	subs	r0, r0, r5
 800e596:	42a0      	cmp	r0, r4
 800e598:	d3fa      	bcc.n	800e590 <HAL_Delay+0x10>
}
 800e59a:	bd70      	pop	{r4, r5, r6, pc}

0800e59c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	0005      	movs	r5, r0
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800e5a0:	f7ff f91a 	bl	800d7d8 <HAL_GetTick>
 800e5a4:	1944      	adds	r4, r0, r5

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800e5a6:	4b17      	ldr	r3, [pc, #92]	; (800e604 <FLASH_WaitForLastOperation+0x68>)
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	03db      	lsls	r3, r3, #15
 800e5ac:	d505      	bpl.n	800e5ba <FLASH_WaitForLastOperation+0x1e>
  {
    if (HAL_GetTick() >= timeout)
 800e5ae:	f7ff f913 	bl	800d7d8 <HAL_GetTick>
 800e5b2:	42a0      	cmp	r0, r4
 800e5b4:	d3f7      	bcc.n	800e5a6 <FLASH_WaitForLastOperation+0xa>
    {
      return HAL_TIMEOUT;
 800e5b6:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800e5b8:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800e5ba:	4a12      	ldr	r2, [pc, #72]	; (800e604 <FLASH_WaitForLastOperation+0x68>)
 800e5bc:	6913      	ldr	r3, [r2, #16]
 800e5be:	4912      	ldr	r1, [pc, #72]	; (800e608 <FLASH_WaitForLastOperation+0x6c>)
 800e5c0:	400b      	ands	r3, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800e5c2:	4912      	ldr	r1, [pc, #72]	; (800e60c <FLASH_WaitForLastOperation+0x70>)
 800e5c4:	6111      	str	r1, [r2, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800e5c6:	6992      	ldr	r2, [r2, #24]
 800e5c8:	2180      	movs	r1, #128	; 0x80
 800e5ca:	05c9      	lsls	r1, r1, #23
 800e5cc:	400a      	ands	r2, r1
  if(eccerr != 0x00u)
 800e5ce:	d004      	beq.n	800e5da <FLASH_WaitForLastOperation+0x3e>
    FLASH->ECCR |= eccerr;
 800e5d0:	480c      	ldr	r0, [pc, #48]	; (800e604 <FLASH_WaitForLastOperation+0x68>)
 800e5d2:	6981      	ldr	r1, [r0, #24]
 800e5d4:	4311      	orrs	r1, r2
 800e5d6:	6181      	str	r1, [r0, #24]
    error |= eccerr;
 800e5d8:	4313      	orrs	r3, r2
  if (error != 0x00U)
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d003      	beq.n	800e5e6 <FLASH_WaitForLastOperation+0x4a>
    pFlash.ErrorCode = error;
 800e5de:	4a0c      	ldr	r2, [pc, #48]	; (800e610 <FLASH_WaitForLastOperation+0x74>)
 800e5e0:	6413      	str	r3, [r2, #64]	; 0x40
    return HAL_ERROR;
 800e5e2:	2001      	movs	r0, #1
 800e5e4:	e7e8      	b.n	800e5b8 <FLASH_WaitForLastOperation+0x1c>
  timeout = HAL_GetTick() + Timeout;
 800e5e6:	f7ff f8f7 	bl	800d7d8 <HAL_GetTick>
 800e5ea:	1945      	adds	r5, r0, r5
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800e5ec:	4b05      	ldr	r3, [pc, #20]	; (800e604 <FLASH_WaitForLastOperation+0x68>)
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	035b      	lsls	r3, r3, #13
 800e5f2:	d505      	bpl.n	800e600 <FLASH_WaitForLastOperation+0x64>
    if (HAL_GetTick() >= timeout)
 800e5f4:	f7ff f8f0 	bl	800d7d8 <HAL_GetTick>
 800e5f8:	42a8      	cmp	r0, r5
 800e5fa:	d3f7      	bcc.n	800e5ec <FLASH_WaitForLastOperation+0x50>
      return HAL_TIMEOUT;
 800e5fc:	2003      	movs	r0, #3
 800e5fe:	e7db      	b.n	800e5b8 <FLASH_WaitForLastOperation+0x1c>
  return HAL_OK;
 800e600:	2000      	movs	r0, #0
 800e602:	e7d9      	b.n	800e5b8 <FLASH_WaitForLastOperation+0x1c>
 800e604:	40022000 	.word	0x40022000
 800e608:	0000c3fa 	.word	0x0000c3fa
 800e60c:	0000c3fb 	.word	0x0000c3fb
 800e610:	200005d0 	.word	0x200005d0

0800e614 <HAL_IncTick>:
  uwTick += uwTickFreq;
 800e614:	4a02      	ldr	r2, [pc, #8]	; (800e620 <HAL_IncTick+0xc>)
 800e616:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e618:	3301      	adds	r3, #1
 800e61a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e61c:	4770      	bx	lr
 800e61e:	46c0      	nop			; (mov r8, r8)
 800e620:	200005d0 	.word	0x200005d0

0800e624 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800e624:	2800      	cmp	r0, #0
 800e626:	db0a      	blt.n	800e63e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e628:	231f      	movs	r3, #31
 800e62a:	4018      	ands	r0, r3
 800e62c:	3b1e      	subs	r3, #30
 800e62e:	4083      	lsls	r3, r0
 800e630:	4903      	ldr	r1, [pc, #12]	; (800e640 <HAL_NVIC_DisableIRQ+0x1c>)
 800e632:	2280      	movs	r2, #128	; 0x80
 800e634:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e636:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e63a:	f3bf 8f6f 	isb	sy
}
 800e63e:	4770      	bx	lr
 800e640:	e000e100 	.word	0xe000e100

0800e644 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800e644:	2800      	cmp	r0, #0
 800e646:	db05      	blt.n	800e654 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e648:	231f      	movs	r3, #31
 800e64a:	4018      	ands	r0, r3
 800e64c:	3b1e      	subs	r3, #30
 800e64e:	4083      	lsls	r3, r0
 800e650:	4a01      	ldr	r2, [pc, #4]	; (800e658 <HAL_NVIC_EnableIRQ+0x14>)
 800e652:	6013      	str	r3, [r2, #0]
}
 800e654:	4770      	bx	lr
 800e656:	46c0      	nop			; (mov r8, r8)
 800e658:	e000e100 	.word	0xe000e100

0800e65c <HAL_NVIC_SetPriority>:
{
 800e65c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800e65e:	2800      	cmp	r0, #0
 800e660:	db11      	blt.n	800e686 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e662:	0883      	lsrs	r3, r0, #2
 800e664:	4d14      	ldr	r5, [pc, #80]	; (800e6b8 <HAL_NVIC_SetPriority+0x5c>)
 800e666:	33c0      	adds	r3, #192	; 0xc0
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	595c      	ldr	r4, [r3, r5]
 800e66c:	2203      	movs	r2, #3
 800e66e:	4010      	ands	r0, r2
 800e670:	00c0      	lsls	r0, r0, #3
 800e672:	32fc      	adds	r2, #252	; 0xfc
 800e674:	0016      	movs	r6, r2
 800e676:	4086      	lsls	r6, r0
 800e678:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e67a:	0189      	lsls	r1, r1, #6
 800e67c:	400a      	ands	r2, r1
 800e67e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e680:	4322      	orrs	r2, r4
 800e682:	515a      	str	r2, [r3, r5]
}
 800e684:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e686:	b2c0      	uxtb	r0, r0
 800e688:	230f      	movs	r3, #15
 800e68a:	4003      	ands	r3, r0
 800e68c:	3b08      	subs	r3, #8
 800e68e:	089b      	lsrs	r3, r3, #2
 800e690:	3306      	adds	r3, #6
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4a09      	ldr	r2, [pc, #36]	; (800e6bc <HAL_NVIC_SetPriority+0x60>)
 800e696:	4694      	mov	ip, r2
 800e698:	4463      	add	r3, ip
 800e69a:	685d      	ldr	r5, [r3, #4]
 800e69c:	2403      	movs	r4, #3
 800e69e:	4020      	ands	r0, r4
 800e6a0:	00c0      	lsls	r0, r0, #3
 800e6a2:	22ff      	movs	r2, #255	; 0xff
 800e6a4:	0014      	movs	r4, r2
 800e6a6:	4084      	lsls	r4, r0
 800e6a8:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e6aa:	0189      	lsls	r1, r1, #6
 800e6ac:	4011      	ands	r1, r2
 800e6ae:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e6b0:	4329      	orrs	r1, r5
 800e6b2:	6059      	str	r1, [r3, #4]
 800e6b4:	e7e6      	b.n	800e684 <HAL_NVIC_SetPriority+0x28>
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	e000e100 	.word	0xe000e100
 800e6bc:	e000ed00 	.word	0xe000ed00

0800e6c0 <HAL_InitTick>:
{
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800e6c4:	4b0c      	ldr	r3, [pc, #48]	; (800e6f8 <HAL_InitTick+0x38>)
 800e6c6:	6818      	ldr	r0, [r3, #0]
 800e6c8:	21fa      	movs	r1, #250	; 0xfa
 800e6ca:	0089      	lsls	r1, r1, #2
 800e6cc:	f002 fc54 	bl	8010f78 <__udivsi3>
 800e6d0:	f7fd f81b 	bl	800b70a <HAL_SYSTICK_Config>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d10d      	bne.n	800e6f4 <HAL_InitTick+0x34>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e6d8:	2c03      	cmp	r4, #3
 800e6da:	d901      	bls.n	800e6e0 <HAL_InitTick+0x20>
        status = HAL_ERROR;
 800e6dc:	2001      	movs	r0, #1
 800e6de:	e00a      	b.n	800e6f6 <HAL_InitTick+0x36>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e6e0:	3001      	adds	r0, #1
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	0021      	movs	r1, r4
 800e6e6:	4240      	negs	r0, r0
 800e6e8:	f7ff ffb8 	bl	800e65c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e6ec:	4b02      	ldr	r3, [pc, #8]	; (800e6f8 <HAL_InitTick+0x38>)
 800e6ee:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e000      	b.n	800e6f6 <HAL_InitTick+0x36>
      status = HAL_ERROR;
 800e6f4:	2001      	movs	r0, #1
}
 800e6f6:	bd10      	pop	{r4, pc}
 800e6f8:	20000000 	.word	0x20000000

0800e6fc <HAL_Init>:
{
 800e6fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e6fe:	4a08      	ldr	r2, [pc, #32]	; (800e720 <HAL_Init+0x24>)
 800e700:	6811      	ldr	r1, [r2, #0]
 800e702:	2380      	movs	r3, #128	; 0x80
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	430b      	orrs	r3, r1
 800e708:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e70a:	2000      	movs	r0, #0
 800e70c:	f7ff ffd8 	bl	800e6c0 <HAL_InitTick>
 800e710:	1e04      	subs	r4, r0, #0
 800e712:	d002      	beq.n	800e71a <HAL_Init+0x1e>
    status = HAL_ERROR;
 800e714:	2401      	movs	r4, #1
}
 800e716:	0020      	movs	r0, r4
 800e718:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800e71a:	f7fc fbc1 	bl	800aea0 <HAL_MspInit>
 800e71e:	e7fa      	b.n	800e716 <HAL_Init+0x1a>
 800e720:	40022000 	.word	0x40022000

0800e724 <HAL_PWREx_ControlVoltageScaling>:
{
 800e724:	b510      	push	{r4, lr}
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800e726:	4a10      	ldr	r2, [pc, #64]	; (800e768 <HAL_PWREx_ControlVoltageScaling+0x44>)
 800e728:	6813      	ldr	r3, [r2, #0]
 800e72a:	4910      	ldr	r1, [pc, #64]	; (800e76c <HAL_PWREx_ControlVoltageScaling+0x48>)
 800e72c:	400b      	ands	r3, r1
 800e72e:	4303      	orrs	r3, r0
 800e730:	6013      	str	r3, [r2, #0]
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e732:	2380      	movs	r3, #128	; 0x80
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4298      	cmp	r0, r3
 800e738:	d001      	beq.n	800e73e <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 800e73a:	2000      	movs	r0, #0
}
 800e73c:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800e73e:	4b0c      	ldr	r3, [pc, #48]	; (800e770 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	0053      	lsls	r3, r2, #1
 800e744:	189b      	adds	r3, r3, r2
 800e746:	0058      	lsls	r0, r3, #1
 800e748:	490a      	ldr	r1, [pc, #40]	; (800e774 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800e74a:	f002 fc15 	bl	8010f78 <__udivsi3>
 800e74e:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <HAL_PWREx_ControlVoltageScaling+0x44>)
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	055b      	lsls	r3, r3, #21
 800e756:	d503      	bpl.n	800e760 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if(wait_loop_index != 0U)
 800e758:	2800      	cmp	r0, #0
 800e75a:	d003      	beq.n	800e764 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 800e75c:	3801      	subs	r0, #1
 800e75e:	e7f7      	b.n	800e750 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 800e760:	2000      	movs	r0, #0
 800e762:	e7eb      	b.n	800e73c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800e764:	2003      	movs	r0, #3
 800e766:	e7e9      	b.n	800e73c <HAL_PWREx_ControlVoltageScaling+0x18>
 800e768:	40007000 	.word	0x40007000
 800e76c:	fffff9ff 	.word	0xfffff9ff
 800e770:	20000000 	.word	0x20000000
 800e774:	000f4240 	.word	0x000f4240

0800e778 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800e778:	4a02      	ldr	r2, [pc, #8]	; (800e784 <HAL_PWR_DisableSleepOnExit+0xc>)
 800e77a:	6913      	ldr	r3, [r2, #16]
 800e77c:	2102      	movs	r1, #2
 800e77e:	438b      	bics	r3, r1
 800e780:	6113      	str	r3, [r2, #16]
}
 800e782:	4770      	bx	lr
 800e784:	e000ed00 	.word	0xe000ed00

0800e788 <HAL_PWR_EnterSTOPMode>:
  if (Regulator != PWR_MAINREGULATOR_ON)
 800e788:	2800      	cmp	r0, #0
 800e78a:	d016      	beq.n	800e7ba <HAL_PWR_EnterSTOPMode+0x32>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800e78c:	4a0f      	ldr	r2, [pc, #60]	; (800e7cc <HAL_PWR_EnterSTOPMode+0x44>)
 800e78e:	6813      	ldr	r3, [r2, #0]
 800e790:	2007      	movs	r0, #7
 800e792:	4383      	bics	r3, r0
 800e794:	3806      	subs	r0, #6
 800e796:	4303      	orrs	r3, r0
 800e798:	6013      	str	r3, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e79a:	4a0d      	ldr	r2, [pc, #52]	; (800e7d0 <HAL_PWR_EnterSTOPMode+0x48>)
 800e79c:	6913      	ldr	r3, [r2, #16]
 800e79e:	2004      	movs	r0, #4
 800e7a0:	4303      	orrs	r3, r0
 800e7a2:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800e7a4:	2901      	cmp	r1, #1
 800e7a6:	d00e      	beq.n	800e7c6 <HAL_PWR_EnterSTOPMode+0x3e>
    __SEV();
 800e7a8:	bf40      	sev
    __WFE();
 800e7aa:	bf20      	wfe
    __WFE();
 800e7ac:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e7ae:	4a08      	ldr	r2, [pc, #32]	; (800e7d0 <HAL_PWR_EnterSTOPMode+0x48>)
 800e7b0:	6913      	ldr	r3, [r2, #16]
 800e7b2:	2104      	movs	r1, #4
 800e7b4:	438b      	bics	r3, r1
 800e7b6:	6113      	str	r3, [r2, #16]
}
 800e7b8:	4770      	bx	lr
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800e7ba:	4a04      	ldr	r2, [pc, #16]	; (800e7cc <HAL_PWR_EnterSTOPMode+0x44>)
 800e7bc:	6813      	ldr	r3, [r2, #0]
 800e7be:	2007      	movs	r0, #7
 800e7c0:	4383      	bics	r3, r0
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	e7e9      	b.n	800e79a <HAL_PWR_EnterSTOPMode+0x12>
    __WFI();
 800e7c6:	bf30      	wfi
 800e7c8:	e7f1      	b.n	800e7ae <HAL_PWR_EnterSTOPMode+0x26>
 800e7ca:	46c0      	nop			; (mov r8, r8)
 800e7cc:	40007000 	.word	0x40007000
 800e7d0:	e000ed00 	.word	0xe000ed00

0800e7d4 <HAL_PWR_EnterSLEEPMode>:
{
 800e7d4:	b510      	push	{r4, lr}
 800e7d6:	000c      	movs	r4, r1
  if(Regulator != PWR_MAINREGULATOR_ON)
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d011      	beq.n	800e800 <HAL_PWR_EnterSLEEPMode+0x2c>
    if((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 800e7dc:	4b0e      	ldr	r3, [pc, #56]	; (800e818 <HAL_PWR_EnterSLEEPMode+0x44>)
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	059b      	lsls	r3, r3, #22
 800e7e2:	d50a      	bpl.n	800e7fa <HAL_PWR_EnterSLEEPMode+0x26>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e7e4:	4a0d      	ldr	r2, [pc, #52]	; (800e81c <HAL_PWR_EnterSLEEPMode+0x48>)
 800e7e6:	6913      	ldr	r3, [r2, #16]
 800e7e8:	2104      	movs	r1, #4
 800e7ea:	438b      	bics	r3, r1
 800e7ec:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800e7ee:	2c01      	cmp	r4, #1
 800e7f0:	d00f      	beq.n	800e812 <HAL_PWR_EnterSLEEPMode+0x3e>
    __SEV();
 800e7f2:	bf40      	sev
    __WFE();
 800e7f4:	bf20      	wfe
    __WFE();
 800e7f6:	bf20      	wfe
}
 800e7f8:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableLowPowerRunMode();
 800e7fa:	f7fc ffc7 	bl	800b78c <HAL_PWREx_EnableLowPowerRunMode>
 800e7fe:	e7f1      	b.n	800e7e4 <HAL_PWR_EnterSLEEPMode+0x10>
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 800e800:	4b05      	ldr	r3, [pc, #20]	; (800e818 <HAL_PWR_EnterSLEEPMode+0x44>)
 800e802:	695b      	ldr	r3, [r3, #20]
 800e804:	059b      	lsls	r3, r3, #22
 800e806:	d5ed      	bpl.n	800e7e4 <HAL_PWR_EnterSLEEPMode+0x10>
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800e808:	f7fc ff9c 	bl	800b744 <HAL_PWREx_DisableLowPowerRunMode>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d0e9      	beq.n	800e7e4 <HAL_PWR_EnterSLEEPMode+0x10>
 800e810:	e7f2      	b.n	800e7f8 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFI();
 800e812:	bf30      	wfi
 800e814:	e7f0      	b.n	800e7f8 <HAL_PWR_EnterSLEEPMode+0x24>
 800e816:	46c0      	nop			; (mov r8, r8)
 800e818:	40007000 	.word	0x40007000
 800e81c:	e000ed00 	.word	0xe000ed00

0800e820 <HAL_DMA_IRQHandler>:
{
 800e820:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800e822:	4b31      	ldr	r3, [pc, #196]	; (800e8e8 <HAL_DMA_IRQHandler+0xc8>)
 800e824:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800e826:	6804      	ldr	r4, [r0, #0]
 800e828:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800e82a:	231c      	movs	r3, #28
 800e82c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e82e:	4013      	ands	r3, r2
 800e830:	2204      	movs	r2, #4
 800e832:	409a      	lsls	r2, r3
 800e834:	4211      	tst	r1, r2
 800e836:	d016      	beq.n	800e866 <HAL_DMA_IRQHandler+0x46>
 800e838:	076a      	lsls	r2, r5, #29
 800e83a:	d514      	bpl.n	800e866 <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	069b      	lsls	r3, r3, #26
 800e840:	d403      	bmi.n	800e84a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	2204      	movs	r2, #4
 800e846:	4393      	bics	r3, r2
 800e848:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800e84a:	4927      	ldr	r1, [pc, #156]	; (800e8e8 <HAL_DMA_IRQHandler+0xc8>)
 800e84c:	684c      	ldr	r4, [r1, #4]
 800e84e:	221c      	movs	r2, #28
 800e850:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e852:	401a      	ands	r2, r3
 800e854:	2304      	movs	r3, #4
 800e856:	4093      	lsls	r3, r2
 800e858:	4323      	orrs	r3, r4
 800e85a:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800e85c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d000      	beq.n	800e864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 800e862:	4798      	blx	r3
}
 800e864:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800e866:	2202      	movs	r2, #2
 800e868:	409a      	lsls	r2, r3
 800e86a:	4211      	tst	r1, r2
 800e86c:	d01c      	beq.n	800e8a8 <HAL_DMA_IRQHandler+0x88>
 800e86e:	07aa      	lsls	r2, r5, #30
 800e870:	d51a      	bpl.n	800e8a8 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	069b      	lsls	r3, r3, #26
 800e876:	d406      	bmi.n	800e886 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	220a      	movs	r2, #10
 800e87c:	4393      	bics	r3, r2
 800e87e:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800e880:	2325      	movs	r3, #37	; 0x25
 800e882:	3a09      	subs	r2, #9
 800e884:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800e886:	4918      	ldr	r1, [pc, #96]	; (800e8e8 <HAL_DMA_IRQHandler+0xc8>)
 800e888:	684c      	ldr	r4, [r1, #4]
 800e88a:	221c      	movs	r2, #28
 800e88c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e88e:	401a      	ands	r2, r3
 800e890:	2302      	movs	r3, #2
 800e892:	4093      	lsls	r3, r2
 800e894:	4323      	orrs	r3, r4
 800e896:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800e898:	2324      	movs	r3, #36	; 0x24
 800e89a:	2200      	movs	r2, #0
 800e89c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 800e89e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d0df      	beq.n	800e864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 800e8a4:	4798      	blx	r3
 800e8a6:	e7dd      	b.n	800e864 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800e8a8:	2208      	movs	r2, #8
 800e8aa:	409a      	lsls	r2, r3
 800e8ac:	4211      	tst	r1, r2
 800e8ae:	d0d9      	beq.n	800e864 <HAL_DMA_IRQHandler+0x44>
 800e8b0:	072b      	lsls	r3, r5, #28
 800e8b2:	d5d7      	bpl.n	800e864 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e8b4:	6823      	ldr	r3, [r4, #0]
 800e8b6:	220e      	movs	r2, #14
 800e8b8:	4393      	bics	r3, r2
 800e8ba:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800e8bc:	4c0a      	ldr	r4, [pc, #40]	; (800e8e8 <HAL_DMA_IRQHandler+0xc8>)
 800e8be:	6865      	ldr	r5, [r4, #4]
 800e8c0:	211c      	movs	r1, #28
 800e8c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e8c4:	4019      	ands	r1, r3
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	001a      	movs	r2, r3
 800e8ca:	408a      	lsls	r2, r1
 800e8cc:	432a      	orrs	r2, r5
 800e8ce:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e8d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800e8d2:	2225      	movs	r2, #37	; 0x25
 800e8d4:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800e8d6:	3323      	adds	r3, #35	; 0x23
 800e8d8:	2200      	movs	r2, #0
 800e8da:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800e8dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d0c0      	beq.n	800e864 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800e8e2:	4798      	blx	r3
 800e8e4:	e7be      	b.n	800e864 <HAL_DMA_IRQHandler+0x44>
 800e8e6:	46c0      	nop			; (mov r8, r8)
 800e8e8:	40020000 	.word	0x40020000

0800e8ec <HAL_DMA_DeInit>:
{
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 800e8f0:	d03b      	beq.n	800e96a <HAL_DMA_DeInit+0x7e>
  __HAL_DMA_DISABLE(hdma);
 800e8f2:	6802      	ldr	r2, [r0, #0]
 800e8f4:	6813      	ldr	r3, [r2, #0]
 800e8f6:	2501      	movs	r5, #1
 800e8f8:	43ab      	bics	r3, r5
 800e8fa:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e8fc:	6807      	ldr	r7, [r0, #0]
 800e8fe:	4b1c      	ldr	r3, [pc, #112]	; (800e970 <HAL_DMA_DeInit+0x84>)
 800e900:	18f8      	adds	r0, r7, r3
 800e902:	2114      	movs	r1, #20
 800e904:	f002 fb38 	bl	8010f78 <__udivsi3>
 800e908:	0080      	lsls	r0, r0, #2
 800e90a:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 800e90c:	2600      	movs	r6, #0
 800e90e:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800e910:	4a18      	ldr	r2, [pc, #96]	; (800e974 <HAL_DMA_DeInit+0x88>)
 800e912:	6851      	ldr	r1, [r2, #4]
 800e914:	231c      	movs	r3, #28
 800e916:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e918:	4003      	ands	r3, r0
 800e91a:	409d      	lsls	r5, r3
 800e91c:	430d      	orrs	r5, r1
 800e91e:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e920:	0020      	movs	r0, r4
 800e922:	f7fc ff51 	bl	800b7c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800e926:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e928:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e92a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e92c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800e92e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	3b01      	subs	r3, #1
 800e934:	2b03      	cmp	r3, #3
 800e936:	d90e      	bls.n	800e956 <HAL_DMA_DeInit+0x6a>
  hdma->XferCpltCallback = NULL;
 800e938:	2300      	movs	r3, #0
 800e93a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800e93c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800e93e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800e940:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800e942:	6523      	str	r3, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800e944:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800e946:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e948:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800e94a:	2225      	movs	r2, #37	; 0x25
 800e94c:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 800e94e:	3a01      	subs	r2, #1
 800e950:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800e952:	2000      	movs	r0, #0
}
 800e954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800e956:	0020      	movs	r0, r4
 800e958:	f7fc ff22 	bl	800b7a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800e95c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e95e:	2200      	movs	r2, #0
 800e960:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800e962:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e964:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e966:	605a      	str	r2, [r3, #4]
 800e968:	e7e6      	b.n	800e938 <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 800e96a:	2001      	movs	r0, #1
 800e96c:	e7f2      	b.n	800e954 <HAL_DMA_DeInit+0x68>
 800e96e:	46c0      	nop			; (mov r8, r8)
 800e970:	bffdfff8 	.word	0xbffdfff8
 800e974:	40020000 	.word	0x40020000

0800e978 <HAL_DMA_Init>:
{
 800e978:	b570      	push	{r4, r5, r6, lr}
 800e97a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 800e97c:	d04d      	beq.n	800ea1a <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e97e:	6805      	ldr	r5, [r0, #0]
 800e980:	4b27      	ldr	r3, [pc, #156]	; (800ea20 <HAL_DMA_Init+0xa8>)
 800e982:	18e8      	adds	r0, r5, r3
 800e984:	2114      	movs	r1, #20
 800e986:	f002 faf7 	bl	8010f78 <__udivsi3>
 800e98a:	0080      	lsls	r0, r0, #2
 800e98c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800e98e:	2325      	movs	r3, #37	; 0x25
 800e990:	2202      	movs	r2, #2
 800e992:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800e994:	682b      	ldr	r3, [r5, #0]
 800e996:	4a23      	ldr	r2, [pc, #140]	; (800ea24 <HAL_DMA_Init+0xac>)
 800e998:	4013      	ands	r3, r2
 800e99a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800e99c:	6822      	ldr	r2, [r4, #0]
 800e99e:	6811      	ldr	r1, [r2, #0]
 800e9a0:	68a3      	ldr	r3, [r4, #8]
 800e9a2:	68e0      	ldr	r0, [r4, #12]
 800e9a4:	4303      	orrs	r3, r0
 800e9a6:	6920      	ldr	r0, [r4, #16]
 800e9a8:	4303      	orrs	r3, r0
 800e9aa:	6960      	ldr	r0, [r4, #20]
 800e9ac:	4303      	orrs	r3, r0
 800e9ae:	69a0      	ldr	r0, [r4, #24]
 800e9b0:	4303      	orrs	r3, r0
 800e9b2:	69e0      	ldr	r0, [r4, #28]
 800e9b4:	4303      	orrs	r3, r0
 800e9b6:	6a20      	ldr	r0, [r4, #32]
 800e9b8:	4303      	orrs	r3, r0
 800e9ba:	430b      	orrs	r3, r1
 800e9bc:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800e9be:	0020      	movs	r0, r4
 800e9c0:	f7fc ff02 	bl	800b7c8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800e9c4:	2380      	movs	r3, #128	; 0x80
 800e9c6:	01db      	lsls	r3, r3, #7
 800e9c8:	68a2      	ldr	r2, [r4, #8]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d018      	beq.n	800ea00 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800e9ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e9d0:	23ff      	movs	r3, #255	; 0xff
 800e9d2:	6861      	ldr	r1, [r4, #4]
 800e9d4:	400b      	ands	r3, r1
 800e9d6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800e9d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e9da:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800e9dc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800e9de:	6863      	ldr	r3, [r4, #4]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	d90f      	bls.n	800ea06 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800e9ea:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800e9ec:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800e9f2:	2225      	movs	r2, #37	; 0x25
 800e9f4:	2101      	movs	r1, #1
 800e9f6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800e9f8:	3a01      	subs	r2, #1
 800e9fa:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800e9fc:	2000      	movs	r0, #0
}
 800e9fe:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ea00:	2300      	movs	r3, #0
 800ea02:	6063      	str	r3, [r4, #4]
 800ea04:	e7e3      	b.n	800e9ce <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ea06:	0020      	movs	r0, r4
 800ea08:	f7fc feca 	bl	800b7a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ea0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ea0e:	2200      	movs	r2, #0
 800ea10:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ea12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ea14:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ea16:	605a      	str	r2, [r3, #4]
 800ea18:	e7e9      	b.n	800e9ee <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	e7ef      	b.n	800e9fe <HAL_DMA_Init+0x86>
 800ea1e:	46c0      	nop			; (mov r8, r8)
 800ea20:	bffdfff8 	.word	0xbffdfff8
 800ea24:	ffff800f 	.word	0xffff800f

0800ea28 <HAL_FLASHEx_OBGetConfig>:
{
 800ea28:	b510      	push	{r4, lr}
 800ea2a:	0004      	movs	r4, r0
  pOBInit->OptionType = OPTIONBYTE_ALL;
 800ea2c:	231f      	movs	r3, #31
 800ea2e:	6003      	str	r3, [r0, #0]
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800ea30:	0002      	movs	r2, r0
 800ea32:	320c      	adds	r2, #12
 800ea34:	0001      	movs	r1, r0
 800ea36:	3108      	adds	r1, #8
 800ea38:	6840      	ldr	r0, [r0, #4]
 800ea3a:	f7fd f923 	bl	800bc84 <FLASH_OB_GetWRP>
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800ea3e:	f7fd f913 	bl	800bc68 <FLASH_OB_GetRDP>
 800ea42:	6120      	str	r0, [r4, #16]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800ea44:	f7fd f906 	bl	800bc54 <FLASH_OB_GetUser>
 800ea48:	61a0      	str	r0, [r4, #24]
  pOBInit->USERType = OB_USER_ALL;
 800ea4a:	4b0d      	ldr	r3, [pc, #52]	; (800ea80 <HAL_FLASHEx_OBGetConfig+0x58>)
 800ea4c:	6163      	str	r3, [r4, #20]
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 800ea4e:	0022      	movs	r2, r4
 800ea50:	3224      	adds	r2, #36	; 0x24
 800ea52:	0021      	movs	r1, r4
 800ea54:	3120      	adds	r1, #32
 800ea56:	0020      	movs	r0, r4
 800ea58:	301c      	adds	r0, #28
 800ea5a:	f7fd f8db 	bl	800bc14 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 800ea5e:	0021      	movs	r1, r4
 800ea60:	312c      	adds	r1, #44	; 0x2c
 800ea62:	0020      	movs	r0, r4
 800ea64:	3028      	adds	r0, #40	; 0x28
 800ea66:	f7fd f8bd 	bl	800bbe4 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	69e2      	ldr	r2, [r4, #28]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	61e3      	str	r3, [r4, #28]
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
 800ea72:	0021      	movs	r1, r4
 800ea74:	3134      	adds	r1, #52	; 0x34
 800ea76:	0020      	movs	r0, r4
 800ea78:	3030      	adds	r0, #48	; 0x30
 800ea7a:	f7fd f8a5 	bl	800bbc8 <FLASH_OB_GetSecMem>
}
 800ea7e:	bd10      	pop	{r4, pc}
 800ea80:	3f4fff00 	.word	0x3f4fff00

0800ea84 <HAL_FLASHEx_OBProgram>:
{
 800ea84:	b510      	push	{r4, lr}
 800ea86:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800ea88:	4a34      	ldr	r2, [pc, #208]	; (800eb5c <HAL_FLASHEx_OBProgram+0xd8>)
 800ea8a:	233c      	movs	r3, #60	; 0x3c
 800ea8c:	5cd3      	ldrb	r3, [r2, r3]
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	d061      	beq.n	800eb56 <HAL_FLASHEx_OBProgram+0xd2>
 800ea92:	2301      	movs	r3, #1
 800ea94:	213c      	movs	r1, #60	; 0x3c
 800ea96:	5453      	strb	r3, [r2, r1]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ea98:	2100      	movs	r1, #0
 800ea9a:	6411      	str	r1, [r2, #64]	; 0x40
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 800ea9c:	6802      	ldr	r2, [r0, #0]
 800ea9e:	4213      	tst	r3, r2
 800eaa0:	d120      	bne.n	800eae4 <HAL_FLASHEx_OBProgram+0x60>
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 800eaa2:	6822      	ldr	r2, [r4, #0]
 800eaa4:	2306      	movs	r3, #6
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	2b06      	cmp	r3, #6
 800eaaa:	d021      	beq.n	800eaf0 <HAL_FLASHEx_OBProgram+0x6c>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 800eaac:	0793      	lsls	r3, r2, #30
 800eaae:	d425      	bmi.n	800eafc <HAL_FLASHEx_OBProgram+0x78>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 800eab0:	0753      	lsls	r3, r2, #29
 800eab2:	d42a      	bmi.n	800eb0a <HAL_FLASHEx_OBProgram+0x86>
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 800eab4:	6823      	ldr	r3, [r4, #0]
 800eab6:	071b      	lsls	r3, r3, #28
 800eab8:	d506      	bpl.n	800eac8 <HAL_FLASHEx_OBProgram+0x44>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 800eaba:	69e0      	ldr	r0, [r4, #28]
 800eabc:	4b28      	ldr	r3, [pc, #160]	; (800eb60 <HAL_FLASHEx_OBProgram+0xdc>)
 800eabe:	4218      	tst	r0, r3
 800eac0:	d12b      	bne.n	800eb1a <HAL_FLASHEx_OBProgram+0x96>
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 800eac2:	69e3      	ldr	r3, [r4, #28]
 800eac4:	079b      	lsls	r3, r3, #30
 800eac6:	d42d      	bmi.n	800eb24 <HAL_FLASHEx_OBProgram+0xa0>
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 800eac8:	6823      	ldr	r3, [r4, #0]
 800eaca:	06db      	lsls	r3, r3, #27
 800eacc:	d42f      	bmi.n	800eb2e <HAL_FLASHEx_OBProgram+0xaa>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eace:	20fa      	movs	r0, #250	; 0xfa
 800ead0:	0080      	lsls	r0, r0, #2
 800ead2:	f7ff fd63 	bl	800e59c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d02e      	beq.n	800eb38 <HAL_FLASHEx_OBProgram+0xb4>
  __HAL_UNLOCK(&pFlash);
 800eada:	4a20      	ldr	r2, [pc, #128]	; (800eb5c <HAL_FLASHEx_OBProgram+0xd8>)
 800eadc:	233c      	movs	r3, #60	; 0x3c
 800eade:	2100      	movs	r1, #0
 800eae0:	54d1      	strb	r1, [r2, r3]
}
 800eae2:	bd10      	pop	{r4, pc}
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 800eae4:	68c2      	ldr	r2, [r0, #12]
 800eae6:	6881      	ldr	r1, [r0, #8]
 800eae8:	6840      	ldr	r0, [r0, #4]
 800eaea:	f7fd f929 	bl	800bd40 <FLASH_OB_WRPConfig>
 800eaee:	e7d8      	b.n	800eaa2 <HAL_FLASHEx_OBProgram+0x1e>
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 800eaf0:	6922      	ldr	r2, [r4, #16]
 800eaf2:	69a1      	ldr	r1, [r4, #24]
 800eaf4:	6960      	ldr	r0, [r4, #20]
 800eaf6:	f7fd f917 	bl	800bd28 <FLASH_OB_OptrConfig>
 800eafa:	e7db      	b.n	800eab4 <HAL_FLASHEx_OBProgram+0x30>
    optr = FLASH_OB_GetUser();
 800eafc:	f7fd f8aa 	bl	800bc54 <FLASH_OB_GetUser>
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 800eb00:	6922      	ldr	r2, [r4, #16]
 800eb02:	0001      	movs	r1, r0
 800eb04:	f7fd f910 	bl	800bd28 <FLASH_OB_OptrConfig>
 800eb08:	e7d4      	b.n	800eab4 <HAL_FLASHEx_OBProgram+0x30>
    optr = FLASH_OB_GetRDP();
 800eb0a:	f7fd f8ad 	bl	800bc68 <FLASH_OB_GetRDP>
 800eb0e:	0002      	movs	r2, r0
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 800eb10:	69a1      	ldr	r1, [r4, #24]
 800eb12:	6960      	ldr	r0, [r4, #20]
 800eb14:	f7fd f908 	bl	800bd28 <FLASH_OB_OptrConfig>
 800eb18:	e7cc      	b.n	800eab4 <HAL_FLASHEx_OBProgram+0x30>
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 800eb1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eb1c:	6a21      	ldr	r1, [r4, #32]
 800eb1e:	f7fd f8e7 	bl	800bcf0 <FLASH_OB_PCROP1AConfig>
 800eb22:	e7ce      	b.n	800eac2 <HAL_FLASHEx_OBProgram+0x3e>
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 800eb24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eb26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eb28:	f7fd f8d4 	bl	800bcd4 <FLASH_OB_PCROP1BConfig>
 800eb2c:	e7cc      	b.n	800eac8 <HAL_FLASHEx_OBProgram+0x44>
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize);
 800eb2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800eb32:	f7fd f8c1 	bl	800bcb8 <FLASH_OB_SecMemConfig>
 800eb36:	e7ca      	b.n	800eace <HAL_FLASHEx_OBProgram+0x4a>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800eb38:	4c0a      	ldr	r4, [pc, #40]	; (800eb64 <HAL_FLASHEx_OBProgram+0xe0>)
 800eb3a:	6962      	ldr	r2, [r4, #20]
 800eb3c:	2380      	movs	r3, #128	; 0x80
 800eb3e:	029b      	lsls	r3, r3, #10
 800eb40:	4313      	orrs	r3, r2
 800eb42:	6163      	str	r3, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800eb44:	30fa      	adds	r0, #250	; 0xfa
 800eb46:	0080      	lsls	r0, r0, #2
 800eb48:	f7ff fd28 	bl	800e59c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800eb4c:	6963      	ldr	r3, [r4, #20]
 800eb4e:	4a06      	ldr	r2, [pc, #24]	; (800eb68 <HAL_FLASHEx_OBProgram+0xe4>)
 800eb50:	4013      	ands	r3, r2
 800eb52:	6163      	str	r3, [r4, #20]
 800eb54:	e7c1      	b.n	800eada <HAL_FLASHEx_OBProgram+0x56>
  __HAL_LOCK(&pFlash);
 800eb56:	2002      	movs	r0, #2
 800eb58:	e7c3      	b.n	800eae2 <HAL_FLASHEx_OBProgram+0x5e>
 800eb5a:	46c0      	nop			; (mov r8, r8)
 800eb5c:	200005d0 	.word	0x200005d0
 800eb60:	80000001 	.word	0x80000001
 800eb64:	40022000 	.word	0x40022000
 800eb68:	fffdffff 	.word	0xfffdffff

0800eb6c <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800eb6c:	4a03      	ldr	r2, [pc, #12]	; (800eb7c <HAL_FLASH_OB_Launch+0x10>)
 800eb6e:	6951      	ldr	r1, [r2, #20]
 800eb70:	2380      	movs	r3, #128	; 0x80
 800eb72:	051b      	lsls	r3, r3, #20
 800eb74:	430b      	orrs	r3, r1
 800eb76:	6153      	str	r3, [r2, #20]
}
 800eb78:	2001      	movs	r0, #1
 800eb7a:	4770      	bx	lr
 800eb7c:	40022000 	.word	0x40022000

0800eb80 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800eb80:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <HAL_FLASH_OB_Lock+0x1c>)
 800eb82:	695a      	ldr	r2, [r3, #20]
 800eb84:	2180      	movs	r1, #128	; 0x80
 800eb86:	05c9      	lsls	r1, r1, #23
 800eb88:	430a      	orrs	r2, r1
 800eb8a:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 800eb8c:	695b      	ldr	r3, [r3, #20]
 800eb8e:	420b      	tst	r3, r1
 800eb90:	d001      	beq.n	800eb96 <HAL_FLASH_OB_Lock+0x16>
    status = HAL_OK;
 800eb92:	2000      	movs	r0, #0
}
 800eb94:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_ERROR;
 800eb96:	2001      	movs	r0, #1
 800eb98:	e7fc      	b.n	800eb94 <HAL_FLASH_OB_Lock+0x14>
 800eb9a:	46c0      	nop			; (mov r8, r8)
 800eb9c:	40022000 	.word	0x40022000

0800eba0 <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800eba0:	4b08      	ldr	r3, [pc, #32]	; (800ebc4 <HAL_FLASH_OB_Unlock+0x24>)
 800eba2:	695b      	ldr	r3, [r3, #20]
 800eba4:	005b      	lsls	r3, r3, #1
 800eba6:	d50b      	bpl.n	800ebc0 <HAL_FLASH_OB_Unlock+0x20>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800eba8:	4b06      	ldr	r3, [pc, #24]	; (800ebc4 <HAL_FLASH_OB_Unlock+0x24>)
 800ebaa:	4a07      	ldr	r2, [pc, #28]	; (800ebc8 <HAL_FLASH_OB_Unlock+0x28>)
 800ebac:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800ebae:	4a07      	ldr	r2, [pc, #28]	; (800ebcc <HAL_FLASH_OB_Unlock+0x2c>)
 800ebb0:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	d401      	bmi.n	800ebbc <HAL_FLASH_OB_Unlock+0x1c>
      status = HAL_OK;
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e002      	b.n	800ebc2 <HAL_FLASH_OB_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_ERROR;
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	e000      	b.n	800ebc2 <HAL_FLASH_OB_Unlock+0x22>
 800ebc0:	2001      	movs	r0, #1
}
 800ebc2:	4770      	bx	lr
 800ebc4:	40022000 	.word	0x40022000
 800ebc8:	08192a3b 	.word	0x08192a3b
 800ebcc:	4c5d6e7f 	.word	0x4c5d6e7f

0800ebd0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ebd0:	4b06      	ldr	r3, [pc, #24]	; (800ebec <HAL_FLASH_Lock+0x1c>)
 800ebd2:	6959      	ldr	r1, [r3, #20]
 800ebd4:	2280      	movs	r2, #128	; 0x80
 800ebd6:	0612      	lsls	r2, r2, #24
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800ebdc:	695b      	ldr	r3, [r3, #20]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	db01      	blt.n	800ebe6 <HAL_FLASH_Lock+0x16>
  HAL_StatusTypeDef status = HAL_ERROR;
 800ebe2:	2001      	movs	r0, #1
}
 800ebe4:	4770      	bx	lr
    status = HAL_OK;
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	e7fc      	b.n	800ebe4 <HAL_FLASH_Lock+0x14>
 800ebea:	46c0      	nop			; (mov r8, r8)
 800ebec:	40022000 	.word	0x40022000

0800ebf0 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ebf0:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <HAL_FLASH_Unlock+0x24>)
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	db01      	blt.n	800ebfc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800ebf8:	2000      	movs	r0, #0
}
 800ebfa:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ebfc:	4b05      	ldr	r3, [pc, #20]	; (800ec14 <HAL_FLASH_Unlock+0x24>)
 800ebfe:	4a06      	ldr	r2, [pc, #24]	; (800ec18 <HAL_FLASH_Unlock+0x28>)
 800ec00:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ec02:	4a06      	ldr	r2, [pc, #24]	; (800ec1c <HAL_FLASH_Unlock+0x2c>)
 800ec04:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ec06:	695b      	ldr	r3, [r3, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	db01      	blt.n	800ec10 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	e7f4      	b.n	800ebfa <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 800ec10:	2001      	movs	r0, #1
 800ec12:	e7f2      	b.n	800ebfa <HAL_FLASH_Unlock+0xa>
 800ec14:	40022000 	.word	0x40022000
 800ec18:	45670123 	.word	0x45670123
 800ec1c:	cdef89ab 	.word	0xcdef89ab

0800ec20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec22:	b083      	sub	sp, #12
 800ec24:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ec26:	6803      	ldr	r3, [r0, #0]
 800ec28:	039b      	lsls	r3, r3, #14
 800ec2a:	d560      	bpl.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xce>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ec2c:	4b80      	ldr	r3, [pc, #512]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ec2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec30:	00db      	lsls	r3, r3, #3
 800ec32:	d41e      	bmi.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ec34:	4a7e      	ldr	r2, [pc, #504]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ec36:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ec38:	2080      	movs	r0, #128	; 0x80
 800ec3a:	0540      	lsls	r0, r0, #21
 800ec3c:	4301      	orrs	r1, r0
 800ec3e:	63d1      	str	r1, [r2, #60]	; 0x3c
 800ec40:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ec42:	4003      	ands	r3, r0
 800ec44:	9301      	str	r3, [sp, #4]
 800ec46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ec48:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ec4a:	4a7a      	ldr	r2, [pc, #488]	; (800ee34 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800ec4c:	6811      	ldr	r1, [r2, #0]
 800ec4e:	2380      	movs	r3, #128	; 0x80
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	430b      	orrs	r3, r1
 800ec54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ec56:	f7fe fdbf 	bl	800d7d8 <HAL_GetTick>
 800ec5a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ec5c:	4b75      	ldr	r3, [pc, #468]	; (800ee34 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	05db      	lsls	r3, r3, #23
 800ec62:	d408      	bmi.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ec64:	f7fe fdb8 	bl	800d7d8 <HAL_GetTick>
 800ec68:	1b40      	subs	r0, r0, r5
 800ec6a:	2802      	cmp	r0, #2
 800ec6c:	d9f6      	bls.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 800ec6e:	2503      	movs	r5, #3
 800ec70:	e002      	b.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 800ec72:	2600      	movs	r6, #0
 800ec74:	e7e9      	b.n	800ec4a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800ec76:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	d121      	bne.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ec7c:	4b6c      	ldr	r3, [pc, #432]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ec7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec80:	22c0      	movs	r2, #192	; 0xc0
 800ec82:	0092      	lsls	r2, r2, #2
 800ec84:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ec86:	d010      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800ec88:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d00d      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ec8e:	4a68      	ldr	r2, [pc, #416]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ec90:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800ec92:	4969      	ldr	r1, [pc, #420]	; (800ee38 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800ec94:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ec96:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800ec98:	2180      	movs	r1, #128	; 0x80
 800ec9a:	0249      	lsls	r1, r1, #9
 800ec9c:	4301      	orrs	r1, r0
 800ec9e:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eca0:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800eca2:	4866      	ldr	r0, [pc, #408]	; (800ee3c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800eca4:	4001      	ands	r1, r0
 800eca6:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800eca8:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ecaa:	07db      	lsls	r3, r3, #31
 800ecac:	d410      	bmi.n	800ecd0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	d106      	bne.n	800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ecb2:	4a5f      	ldr	r2, [pc, #380]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ecb4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800ecb6:	4960      	ldr	r1, [pc, #384]	; (800ee38 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800ecb8:	400b      	ands	r3, r1
 800ecba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ecbc:	430b      	orrs	r3, r1
 800ecbe:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ecc0:	2e01      	cmp	r6, #1
 800ecc2:	d115      	bne.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ecc4:	4a5a      	ldr	r2, [pc, #360]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ecc6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ecc8:	495d      	ldr	r1, [pc, #372]	; (800ee40 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800ecca:	400b      	ands	r3, r1
 800eccc:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ecce:	e00f      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        tickstart = HAL_GetTick();
 800ecd0:	f7fe fd82 	bl	800d7d8 <HAL_GetTick>
 800ecd4:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ecd6:	4b56      	ldr	r3, [pc, #344]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ecd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecda:	079b      	lsls	r3, r3, #30
 800ecdc:	d4e7      	bmi.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ecde:	f7fe fd7b 	bl	800d7d8 <HAL_GetTick>
 800ece2:	1bc0      	subs	r0, r0, r7
 800ece4:	4b57      	ldr	r3, [pc, #348]	; (800ee44 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800ece6:	4298      	cmp	r0, r3
 800ece8:	d9f5      	bls.n	800ecd6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            ret = HAL_TIMEOUT;
 800ecea:	2503      	movs	r5, #3
 800ecec:	e7df      	b.n	800ecae <HAL_RCCEx_PeriphCLKConfig+0x8e>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ecee:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ecf0:	6823      	ldr	r3, [r4, #0]
 800ecf2:	07db      	lsls	r3, r3, #31
 800ecf4:	d506      	bpl.n	800ed04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ecf6:	4a4e      	ldr	r2, [pc, #312]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ecf8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ecfa:	2103      	movs	r1, #3
 800ecfc:	438b      	bics	r3, r1
 800ecfe:	6861      	ldr	r1, [r4, #4]
 800ed00:	430b      	orrs	r3, r1
 800ed02:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	079b      	lsls	r3, r3, #30
 800ed08:	d506      	bpl.n	800ed18 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ed0a:	4a49      	ldr	r2, [pc, #292]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed0c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed0e:	210c      	movs	r1, #12
 800ed10:	438b      	bics	r3, r1
 800ed12:	68a1      	ldr	r1, [r4, #8]
 800ed14:	430b      	orrs	r3, r1
 800ed16:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	069b      	lsls	r3, r3, #26
 800ed1c:	d506      	bpl.n	800ed2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ed1e:	4a44      	ldr	r2, [pc, #272]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed20:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed22:	4949      	ldr	r1, [pc, #292]	; (800ee48 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800ed24:	400b      	ands	r3, r1
 800ed26:	68e1      	ldr	r1, [r4, #12]
 800ed28:	430b      	orrs	r3, r1
 800ed2a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	059b      	lsls	r3, r3, #22
 800ed30:	d506      	bpl.n	800ed40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ed32:	4a3f      	ldr	r2, [pc, #252]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed36:	4945      	ldr	r1, [pc, #276]	; (800ee4c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800ed38:	400b      	ands	r3, r1
 800ed3a:	69a1      	ldr	r1, [r4, #24]
 800ed3c:	430b      	orrs	r3, r1
 800ed3e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ed40:	6823      	ldr	r3, [r4, #0]
 800ed42:	055b      	lsls	r3, r3, #21
 800ed44:	d506      	bpl.n	800ed54 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ed46:	4a3a      	ldr	r2, [pc, #232]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed48:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed4a:	4941      	ldr	r1, [pc, #260]	; (800ee50 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800ed4c:	400b      	ands	r3, r1
 800ed4e:	69e1      	ldr	r1, [r4, #28]
 800ed50:	430b      	orrs	r3, r1
 800ed52:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ed54:	6823      	ldr	r3, [r4, #0]
 800ed56:	065b      	lsls	r3, r3, #25
 800ed58:	d506      	bpl.n	800ed68 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ed5a:	4a35      	ldr	r2, [pc, #212]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed5c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed5e:	493d      	ldr	r1, [pc, #244]	; (800ee54 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800ed60:	400b      	ands	r3, r1
 800ed62:	6921      	ldr	r1, [r4, #16]
 800ed64:	430b      	orrs	r3, r1
 800ed66:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	045b      	lsls	r3, r3, #17
 800ed6c:	d50b      	bpl.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ed6e:	4a30      	ldr	r2, [pc, #192]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	089b      	lsrs	r3, r3, #2
 800ed76:	6a21      	ldr	r1, [r4, #32]
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800ed7c:	2380      	movs	r3, #128	; 0x80
 800ed7e:	05db      	lsls	r3, r3, #23
 800ed80:	6a22      	ldr	r2, [r4, #32]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d039      	beq.n	800edfa <HAL_RCCEx_PeriphCLKConfig+0x1da>
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed86:	6823      	ldr	r3, [r4, #0]
 800ed88:	031b      	lsls	r3, r3, #12
 800ed8a:	d506      	bpl.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed8c:	4a28      	ldr	r2, [pc, #160]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ed8e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ed90:	2140      	movs	r1, #64	; 0x40
 800ed92:	438b      	bics	r3, r1
 800ed94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ed96:	430b      	orrs	r3, r1
 800ed98:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800ed9a:	6823      	ldr	r3, [r4, #0]
 800ed9c:	029b      	lsls	r3, r3, #10
 800ed9e:	d50b      	bpl.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800eda0:	4a23      	ldr	r2, [pc, #140]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eda2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800eda4:	492c      	ldr	r1, [pc, #176]	; (800ee58 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800eda6:	400b      	ands	r3, r1
 800eda8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800edaa:	430b      	orrs	r3, r1
 800edac:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800edae:	2380      	movs	r3, #128	; 0x80
 800edb0:	03db      	lsls	r3, r3, #15
 800edb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d027      	beq.n	800ee08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800edb8:	6823      	ldr	r3, [r4, #0]
 800edba:	025b      	lsls	r3, r3, #9
 800edbc:	d50b      	bpl.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800edbe:	4a1c      	ldr	r2, [pc, #112]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800edc0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800edc2:	4926      	ldr	r1, [pc, #152]	; (800ee5c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800edc4:	400b      	ands	r3, r1
 800edc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800edc8:	430b      	orrs	r3, r1
 800edca:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800edcc:	2380      	movs	r3, #128	; 0x80
 800edce:	045b      	lsls	r3, r3, #17
 800edd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d01f      	beq.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	051b      	lsls	r3, r3, #20
 800edda:	d50b      	bpl.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800eddc:	4a14      	ldr	r2, [pc, #80]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800edde:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ede0:	491f      	ldr	r1, [pc, #124]	; (800ee60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800ede2:	400b      	ands	r3, r1
 800ede4:	6961      	ldr	r1, [r4, #20]
 800ede6:	430b      	orrs	r3, r1
 800ede8:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800edea:	6962      	ldr	r2, [r4, #20]
 800edec:	2380      	movs	r3, #128	; 0x80
 800edee:	01db      	lsls	r3, r3, #7
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d015      	beq.n	800ee20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
    }
  }

  return status;
}
 800edf4:	0028      	movs	r0, r5
 800edf6:	b003      	add	sp, #12
 800edf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800edfa:	4a0d      	ldr	r2, [pc, #52]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800edfc:	68d1      	ldr	r1, [r2, #12]
 800edfe:	2380      	movs	r3, #128	; 0x80
 800ee00:	025b      	lsls	r3, r3, #9
 800ee02:	430b      	orrs	r3, r1
 800ee04:	60d3      	str	r3, [r2, #12]
 800ee06:	e7be      	b.n	800ed86 <HAL_RCCEx_PeriphCLKConfig+0x166>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ee08:	4a09      	ldr	r2, [pc, #36]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ee0a:	68d1      	ldr	r1, [r2, #12]
 800ee0c:	2380      	movs	r3, #128	; 0x80
 800ee0e:	045b      	lsls	r3, r3, #17
 800ee10:	430b      	orrs	r3, r1
 800ee12:	60d3      	str	r3, [r2, #12]
 800ee14:	e7d0      	b.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800ee16:	4a06      	ldr	r2, [pc, #24]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ee18:	68d1      	ldr	r1, [r2, #12]
 800ee1a:	430b      	orrs	r3, r1
 800ee1c:	60d3      	str	r3, [r2, #12]
 800ee1e:	e7da      	b.n	800edd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800ee20:	4a03      	ldr	r2, [pc, #12]	; (800ee30 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ee22:	68d1      	ldr	r1, [r2, #12]
 800ee24:	2380      	movs	r3, #128	; 0x80
 800ee26:	025b      	lsls	r3, r3, #9
 800ee28:	430b      	orrs	r3, r1
 800ee2a:	60d3      	str	r3, [r2, #12]
 800ee2c:	e7e2      	b.n	800edf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800ee2e:	46c0      	nop			; (mov r8, r8)
 800ee30:	40021000 	.word	0x40021000
 800ee34:	40007000 	.word	0x40007000
 800ee38:	fffffcff 	.word	0xfffffcff
 800ee3c:	fffeffff 	.word	0xfffeffff
 800ee40:	efffffff 	.word	0xefffffff
 800ee44:	00001388 	.word	0x00001388
 800ee48:	fffff3ff 	.word	0xfffff3ff
 800ee4c:	fff3ffff 	.word	0xfff3ffff
 800ee50:	ffcfffff 	.word	0xffcfffff
 800ee54:	ffffcfff 	.word	0xffffcfff
 800ee58:	ffbfffff 	.word	0xffbfffff
 800ee5c:	feffffff 	.word	0xfeffffff
 800ee60:	ffff3fff 	.word	0xffff3fff

0800ee64 <HAL_RCC_ClockConfig>:
{
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	0004      	movs	r4, r0
 800ee68:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d100      	bne.n	800ee70 <HAL_RCC_ClockConfig+0xc>
 800ee6e:	e0aa      	b.n	800efc6 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee70:	4b57      	ldr	r3, [pc, #348]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	2307      	movs	r3, #7
 800ee76:	4013      	ands	r3, r2
 800ee78:	428b      	cmp	r3, r1
 800ee7a:	d321      	bcc.n	800eec0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	079a      	lsls	r2, r3, #30
 800ee80:	d50e      	bpl.n	800eea0 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee82:	075b      	lsls	r3, r3, #29
 800ee84:	d505      	bpl.n	800ee92 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800ee86:	4a53      	ldr	r2, [pc, #332]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ee88:	6891      	ldr	r1, [r2, #8]
 800ee8a:	23e0      	movs	r3, #224	; 0xe0
 800ee8c:	01db      	lsls	r3, r3, #7
 800ee8e:	430b      	orrs	r3, r1
 800ee90:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee92:	4a50      	ldr	r2, [pc, #320]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ee94:	6893      	ldr	r3, [r2, #8]
 800ee96:	4950      	ldr	r1, [pc, #320]	; (800efd8 <HAL_RCC_ClockConfig+0x174>)
 800ee98:	400b      	ands	r3, r1
 800ee9a:	68a1      	ldr	r1, [r4, #8]
 800ee9c:	430b      	orrs	r3, r1
 800ee9e:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	07db      	lsls	r3, r3, #31
 800eea4:	d554      	bpl.n	800ef50 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eea6:	6863      	ldr	r3, [r4, #4]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d020      	beq.n	800eeee <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d03b      	beq.n	800ef28 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d13f      	bne.n	800ef34 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800eeb4:	4a47      	ldr	r2, [pc, #284]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800eeb6:	6812      	ldr	r2, [r2, #0]
 800eeb8:	0552      	lsls	r2, r2, #21
 800eeba:	d41c      	bmi.n	800eef6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800eebc:	2001      	movs	r0, #1
 800eebe:	e06a      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eec0:	4a43      	ldr	r2, [pc, #268]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800eec2:	6813      	ldr	r3, [r2, #0]
 800eec4:	2107      	movs	r1, #7
 800eec6:	438b      	bics	r3, r1
 800eec8:	432b      	orrs	r3, r5
 800eeca:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800eecc:	f7fe fc84 	bl	800d7d8 <HAL_GetTick>
 800eed0:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800eed2:	4b3f      	ldr	r3, [pc, #252]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800eed4:	681a      	ldr	r2, [r3, #0]
 800eed6:	2307      	movs	r3, #7
 800eed8:	4013      	ands	r3, r2
 800eeda:	42ab      	cmp	r3, r5
 800eedc:	d0ce      	beq.n	800ee7c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800eede:	f7fe fc7b 	bl	800d7d8 <HAL_GetTick>
 800eee2:	1b80      	subs	r0, r0, r6
 800eee4:	4b3d      	ldr	r3, [pc, #244]	; (800efdc <HAL_RCC_ClockConfig+0x178>)
 800eee6:	4298      	cmp	r0, r3
 800eee8:	d9f3      	bls.n	800eed2 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800eeea:	2003      	movs	r0, #3
 800eeec:	e053      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800eeee:	4a39      	ldr	r2, [pc, #228]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800eef0:	6812      	ldr	r2, [r2, #0]
 800eef2:	0392      	lsls	r2, r2, #14
 800eef4:	d569      	bpl.n	800efca <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800eef6:	4937      	ldr	r1, [pc, #220]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800eef8:	688a      	ldr	r2, [r1, #8]
 800eefa:	2007      	movs	r0, #7
 800eefc:	4382      	bics	r2, r0
 800eefe:	4313      	orrs	r3, r2
 800ef00:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800ef02:	f7fe fc69 	bl	800d7d8 <HAL_GetTick>
 800ef06:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef08:	4b32      	ldr	r3, [pc, #200]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	2238      	movs	r2, #56	; 0x38
 800ef0e:	401a      	ands	r2, r3
 800ef10:	6863      	ldr	r3, [r4, #4]
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d01b      	beq.n	800ef50 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef18:	f7fe fc5e 	bl	800d7d8 <HAL_GetTick>
 800ef1c:	1b80      	subs	r0, r0, r6
 800ef1e:	4b2f      	ldr	r3, [pc, #188]	; (800efdc <HAL_RCC_ClockConfig+0x178>)
 800ef20:	4298      	cmp	r0, r3
 800ef22:	d9f1      	bls.n	800ef08 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 800ef24:	2003      	movs	r0, #3
 800ef26:	e036      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ef28:	4a2a      	ldr	r2, [pc, #168]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef2a:	6812      	ldr	r2, [r2, #0]
 800ef2c:	0192      	lsls	r2, r2, #6
 800ef2e:	d4e2      	bmi.n	800eef6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800ef30:	2001      	movs	r0, #1
 800ef32:	e030      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800ef34:	2b03      	cmp	r3, #3
 800ef36:	d005      	beq.n	800ef44 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ef38:	4a26      	ldr	r2, [pc, #152]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ef3c:	0792      	lsls	r2, r2, #30
 800ef3e:	d4da      	bmi.n	800eef6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800ef40:	2001      	movs	r0, #1
 800ef42:	e028      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ef44:	4a23      	ldr	r2, [pc, #140]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef46:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800ef48:	0792      	lsls	r2, r2, #30
 800ef4a:	d4d4      	bmi.n	800eef6 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800ef4c:	2001      	movs	r0, #1
 800ef4e:	e022      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef50:	4b1f      	ldr	r3, [pc, #124]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	2307      	movs	r3, #7
 800ef56:	4013      	ands	r3, r2
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	d81d      	bhi.n	800ef98 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	075b      	lsls	r3, r3, #29
 800ef60:	d506      	bpl.n	800ef70 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800ef62:	4a1c      	ldr	r2, [pc, #112]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef64:	6893      	ldr	r3, [r2, #8]
 800ef66:	491e      	ldr	r1, [pc, #120]	; (800efe0 <HAL_RCC_ClockConfig+0x17c>)
 800ef68:	400b      	ands	r3, r1
 800ef6a:	68e1      	ldr	r1, [r4, #12]
 800ef6c:	430b      	orrs	r3, r1
 800ef6e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800ef70:	f7fc ff0e 	bl	800bd90 <HAL_RCC_GetSysClockFreq>
 800ef74:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <HAL_RCC_ClockConfig+0x170>)
 800ef76:	689a      	ldr	r2, [r3, #8]
 800ef78:	0a12      	lsrs	r2, r2, #8
 800ef7a:	230f      	movs	r3, #15
 800ef7c:	4013      	ands	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4a18      	ldr	r2, [pc, #96]	; (800efe4 <HAL_RCC_ClockConfig+0x180>)
 800ef82:	18d3      	adds	r3, r2, r3
 800ef84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef86:	231f      	movs	r3, #31
 800ef88:	4013      	ands	r3, r2
 800ef8a:	40d8      	lsrs	r0, r3
 800ef8c:	4b16      	ldr	r3, [pc, #88]	; (800efe8 <HAL_RCC_ClockConfig+0x184>)
 800ef8e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800ef90:	6858      	ldr	r0, [r3, #4]
 800ef92:	f7ff fb95 	bl	800e6c0 <HAL_InitTick>
}
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef98:	4a0d      	ldr	r2, [pc, #52]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800ef9a:	6813      	ldr	r3, [r2, #0]
 800ef9c:	2107      	movs	r1, #7
 800ef9e:	438b      	bics	r3, r1
 800efa0:	432b      	orrs	r3, r5
 800efa2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800efa4:	f7fe fc18 	bl	800d7d8 <HAL_GetTick>
 800efa8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800efaa:	4b09      	ldr	r3, [pc, #36]	; (800efd0 <HAL_RCC_ClockConfig+0x16c>)
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	2307      	movs	r3, #7
 800efb0:	4013      	ands	r3, r2
 800efb2:	42ab      	cmp	r3, r5
 800efb4:	d0d2      	beq.n	800ef5c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efb6:	f7fe fc0f 	bl	800d7d8 <HAL_GetTick>
 800efba:	1b80      	subs	r0, r0, r6
 800efbc:	4b07      	ldr	r3, [pc, #28]	; (800efdc <HAL_RCC_ClockConfig+0x178>)
 800efbe:	4298      	cmp	r0, r3
 800efc0:	d9f3      	bls.n	800efaa <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 800efc2:	2003      	movs	r0, #3
 800efc4:	e7e7      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 800efc6:	2001      	movs	r0, #1
 800efc8:	e7e5      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800efca:	2001      	movs	r0, #1
 800efcc:	e7e3      	b.n	800ef96 <HAL_RCC_ClockConfig+0x132>
 800efce:	46c0      	nop			; (mov r8, r8)
 800efd0:	40022000 	.word	0x40022000
 800efd4:	40021000 	.word	0x40021000
 800efd8:	fffff0ff 	.word	0xfffff0ff
 800efdc:	00001388 	.word	0x00001388
 800efe0:	ffff8fff 	.word	0xffff8fff
 800efe4:	0801ad7c 	.word	0x0801ad7c
 800efe8:	20000000 	.word	0x20000000

0800efec <HAL_RCC_OscConfig>:
{
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	1e04      	subs	r4, r0, #0
  if (RCC_OscInitStruct == NULL)
 800eff2:	d100      	bne.n	800eff6 <HAL_RCC_OscConfig+0xa>
 800eff4:	e23c      	b.n	800f470 <HAL_RCC_OscConfig+0x484>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eff6:	6803      	ldr	r3, [r0, #0]
 800eff8:	07db      	lsls	r3, r3, #31
 800effa:	d539      	bpl.n	800f070 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800effc:	4ac1      	ldr	r2, [pc, #772]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800effe:	6891      	ldr	r1, [r2, #8]
 800f000:	2338      	movs	r3, #56	; 0x38
 800f002:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f004:	68d1      	ldr	r1, [r2, #12]
 800f006:	2203      	movs	r2, #3
 800f008:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800f00a:	2b10      	cmp	r3, #16
 800f00c:	d026      	beq.n	800f05c <HAL_RCC_OscConfig+0x70>
 800f00e:	2b08      	cmp	r3, #8
 800f010:	d026      	beq.n	800f060 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f012:	6863      	ldr	r3, [r4, #4]
 800f014:	2280      	movs	r2, #128	; 0x80
 800f016:	0252      	lsls	r2, r2, #9
 800f018:	4293      	cmp	r3, r2
 800f01a:	d07f      	beq.n	800f11c <HAL_RCC_OscConfig+0x130>
 800f01c:	22a0      	movs	r2, #160	; 0xa0
 800f01e:	02d2      	lsls	r2, r2, #11
 800f020:	4293      	cmp	r3, r2
 800f022:	d100      	bne.n	800f026 <HAL_RCC_OscConfig+0x3a>
 800f024:	e081      	b.n	800f12a <HAL_RCC_OscConfig+0x13e>
 800f026:	4bb7      	ldr	r3, [pc, #732]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	49b7      	ldr	r1, [pc, #732]	; (800f308 <HAL_RCC_OscConfig+0x31c>)
 800f02c:	400a      	ands	r2, r1
 800f02e:	601a      	str	r2, [r3, #0]
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	49b6      	ldr	r1, [pc, #728]	; (800f30c <HAL_RCC_OscConfig+0x320>)
 800f034:	400a      	ands	r2, r1
 800f036:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f038:	6863      	ldr	r3, [r4, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d100      	bne.n	800f040 <HAL_RCC_OscConfig+0x54>
 800f03e:	e080      	b.n	800f142 <HAL_RCC_OscConfig+0x156>
        tickstart = HAL_GetTick();
 800f040:	f7fe fbca 	bl	800d7d8 <HAL_GetTick>
 800f044:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f046:	4baf      	ldr	r3, [pc, #700]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	039b      	lsls	r3, r3, #14
 800f04c:	d410      	bmi.n	800f070 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f04e:	f7fe fbc3 	bl	800d7d8 <HAL_GetTick>
 800f052:	1b40      	subs	r0, r0, r5
 800f054:	2864      	cmp	r0, #100	; 0x64
 800f056:	d9f6      	bls.n	800f046 <HAL_RCC_OscConfig+0x5a>
            return HAL_TIMEOUT;
 800f058:	2003      	movs	r0, #3
 800f05a:	e20a      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800f05c:	2a03      	cmp	r2, #3
 800f05e:	d1d6      	bne.n	800f00e <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f060:	4ba8      	ldr	r3, [pc, #672]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	039b      	lsls	r3, r3, #14
 800f066:	d503      	bpl.n	800f070 <HAL_RCC_OscConfig+0x84>
 800f068:	6863      	ldr	r3, [r4, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d100      	bne.n	800f070 <HAL_RCC_OscConfig+0x84>
 800f06e:	e202      	b.n	800f476 <HAL_RCC_OscConfig+0x48a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	079b      	lsls	r3, r3, #30
 800f074:	d531      	bpl.n	800f0da <HAL_RCC_OscConfig+0xee>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f076:	4aa3      	ldr	r2, [pc, #652]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f078:	6893      	ldr	r3, [r2, #8]
 800f07a:	2138      	movs	r1, #56	; 0x38
 800f07c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f07e:	68d1      	ldr	r1, [r2, #12]
 800f080:	2203      	movs	r2, #3
 800f082:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800f084:	2b10      	cmp	r3, #16
 800f086:	d06a      	beq.n	800f15e <HAL_RCC_OscConfig+0x172>
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d16b      	bne.n	800f164 <HAL_RCC_OscConfig+0x178>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f08c:	4a9d      	ldr	r2, [pc, #628]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f08e:	6812      	ldr	r2, [r2, #0]
 800f090:	0552      	lsls	r2, r2, #21
 800f092:	d503      	bpl.n	800f09c <HAL_RCC_OscConfig+0xb0>
 800f094:	68e2      	ldr	r2, [r4, #12]
 800f096:	2a00      	cmp	r2, #0
 800f098:	d100      	bne.n	800f09c <HAL_RCC_OscConfig+0xb0>
 800f09a:	e1ee      	b.n	800f47a <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f09c:	4899      	ldr	r0, [pc, #612]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f09e:	6841      	ldr	r1, [r0, #4]
 800f0a0:	6962      	ldr	r2, [r4, #20]
 800f0a2:	0212      	lsls	r2, r2, #8
 800f0a4:	4d9a      	ldr	r5, [pc, #616]	; (800f310 <HAL_RCC_OscConfig+0x324>)
 800f0a6:	4029      	ands	r1, r5
 800f0a8:	430a      	orrs	r2, r1
 800f0aa:	6042      	str	r2, [r0, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d10d      	bne.n	800f0cc <HAL_RCC_OscConfig+0xe0>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800f0b0:	6803      	ldr	r3, [r0, #0]
 800f0b2:	4998      	ldr	r1, [pc, #608]	; (800f314 <HAL_RCC_OscConfig+0x328>)
 800f0b4:	400b      	ands	r3, r1
 800f0b6:	6921      	ldr	r1, [r4, #16]
 800f0b8:	430b      	orrs	r3, r1
 800f0ba:	6003      	str	r3, [r0, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800f0bc:	6803      	ldr	r3, [r0, #0]
 800f0be:	0adb      	lsrs	r3, r3, #11
 800f0c0:	2207      	movs	r2, #7
 800f0c2:	401a      	ands	r2, r3
 800f0c4:	4b94      	ldr	r3, [pc, #592]	; (800f318 <HAL_RCC_OscConfig+0x32c>)
 800f0c6:	40d3      	lsrs	r3, r2
 800f0c8:	4a94      	ldr	r2, [pc, #592]	; (800f31c <HAL_RCC_OscConfig+0x330>)
 800f0ca:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f0cc:	4b93      	ldr	r3, [pc, #588]	; (800f31c <HAL_RCC_OscConfig+0x330>)
 800f0ce:	6858      	ldr	r0, [r3, #4]
 800f0d0:	f7ff faf6 	bl	800e6c0 <HAL_InitTick>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	d000      	beq.n	800f0da <HAL_RCC_OscConfig+0xee>
 800f0d8:	e1d1      	b.n	800f47e <HAL_RCC_OscConfig+0x492>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	071b      	lsls	r3, r3, #28
 800f0de:	d400      	bmi.n	800f0e2 <HAL_RCC_OscConfig+0xf6>
 800f0e0:	e081      	b.n	800f1e6 <HAL_RCC_OscConfig+0x1fa>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800f0e2:	4b88      	ldr	r3, [pc, #544]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f0e4:	689a      	ldr	r2, [r3, #8]
 800f0e6:	2338      	movs	r3, #56	; 0x38
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	2b18      	cmp	r3, #24
 800f0ec:	d073      	beq.n	800f1d6 <HAL_RCC_OscConfig+0x1ea>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f0ee:	69a3      	ldr	r3, [r4, #24]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d100      	bne.n	800f0f6 <HAL_RCC_OscConfig+0x10a>
 800f0f4:	e091      	b.n	800f21a <HAL_RCC_OscConfig+0x22e>
        __HAL_RCC_LSI_ENABLE();
 800f0f6:	4a83      	ldr	r2, [pc, #524]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f0f8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	430b      	orrs	r3, r1
 800f0fe:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800f100:	f7fe fb6a 	bl	800d7d8 <HAL_GetTick>
 800f104:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f106:	4b7f      	ldr	r3, [pc, #508]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f10a:	079b      	lsls	r3, r3, #30
 800f10c:	d46b      	bmi.n	800f1e6 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f10e:	f7fe fb63 	bl	800d7d8 <HAL_GetTick>
 800f112:	1b40      	subs	r0, r0, r5
 800f114:	2802      	cmp	r0, #2
 800f116:	d9f6      	bls.n	800f106 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 800f118:	2003      	movs	r0, #3
 800f11a:	e1aa      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f11c:	4a79      	ldr	r2, [pc, #484]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f11e:	6811      	ldr	r1, [r2, #0]
 800f120:	2380      	movs	r3, #128	; 0x80
 800f122:	025b      	lsls	r3, r3, #9
 800f124:	430b      	orrs	r3, r1
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	e786      	b.n	800f038 <HAL_RCC_OscConfig+0x4c>
 800f12a:	4b76      	ldr	r3, [pc, #472]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f12c:	6819      	ldr	r1, [r3, #0]
 800f12e:	2280      	movs	r2, #128	; 0x80
 800f130:	02d2      	lsls	r2, r2, #11
 800f132:	430a      	orrs	r2, r1
 800f134:	601a      	str	r2, [r3, #0]
 800f136:	6819      	ldr	r1, [r3, #0]
 800f138:	2280      	movs	r2, #128	; 0x80
 800f13a:	0252      	lsls	r2, r2, #9
 800f13c:	430a      	orrs	r2, r1
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	e77a      	b.n	800f038 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800f142:	f7fe fb49 	bl	800d7d8 <HAL_GetTick>
 800f146:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f148:	4b6e      	ldr	r3, [pc, #440]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	039b      	lsls	r3, r3, #14
 800f14e:	d58f      	bpl.n	800f070 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f150:	f7fe fb42 	bl	800d7d8 <HAL_GetTick>
 800f154:	1b40      	subs	r0, r0, r5
 800f156:	2864      	cmp	r0, #100	; 0x64
 800f158:	d9f6      	bls.n	800f148 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 800f15a:	2003      	movs	r0, #3
 800f15c:	e189      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800f15e:	2a02      	cmp	r2, #2
 800f160:	d192      	bne.n	800f088 <HAL_RCC_OscConfig+0x9c>
 800f162:	e793      	b.n	800f08c <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f164:	68e3      	ldr	r3, [r4, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d022      	beq.n	800f1b0 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800f16a:	4a66      	ldr	r2, [pc, #408]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f16c:	6813      	ldr	r3, [r2, #0]
 800f16e:	4969      	ldr	r1, [pc, #420]	; (800f314 <HAL_RCC_OscConfig+0x328>)
 800f170:	400b      	ands	r3, r1
 800f172:	6921      	ldr	r1, [r4, #16]
 800f174:	430b      	orrs	r3, r1
 800f176:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800f178:	6811      	ldr	r1, [r2, #0]
 800f17a:	2380      	movs	r3, #128	; 0x80
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	430b      	orrs	r3, r1
 800f180:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f182:	f7fe fb29 	bl	800d7d8 <HAL_GetTick>
 800f186:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f188:	4b5e      	ldr	r3, [pc, #376]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	055b      	lsls	r3, r3, #21
 800f18e:	d406      	bmi.n	800f19e <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f190:	f7fe fb22 	bl	800d7d8 <HAL_GetTick>
 800f194:	1b40      	subs	r0, r0, r5
 800f196:	2802      	cmp	r0, #2
 800f198:	d9f6      	bls.n	800f188 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 800f19a:	2003      	movs	r0, #3
 800f19c:	e169      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f19e:	4959      	ldr	r1, [pc, #356]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1a0:	684a      	ldr	r2, [r1, #4]
 800f1a2:	6963      	ldr	r3, [r4, #20]
 800f1a4:	021b      	lsls	r3, r3, #8
 800f1a6:	485a      	ldr	r0, [pc, #360]	; (800f310 <HAL_RCC_OscConfig+0x324>)
 800f1a8:	4002      	ands	r2, r0
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	604b      	str	r3, [r1, #4]
 800f1ae:	e794      	b.n	800f0da <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 800f1b0:	4a54      	ldr	r2, [pc, #336]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1b2:	6813      	ldr	r3, [r2, #0]
 800f1b4:	495a      	ldr	r1, [pc, #360]	; (800f320 <HAL_RCC_OscConfig+0x334>)
 800f1b6:	400b      	ands	r3, r1
 800f1b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f1ba:	f7fe fb0d 	bl	800d7d8 <HAL_GetTick>
 800f1be:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f1c0:	4b50      	ldr	r3, [pc, #320]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	055b      	lsls	r3, r3, #21
 800f1c6:	d588      	bpl.n	800f0da <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f1c8:	f7fe fb06 	bl	800d7d8 <HAL_GetTick>
 800f1cc:	1b40      	subs	r0, r0, r5
 800f1ce:	2802      	cmp	r0, #2
 800f1d0:	d9f6      	bls.n	800f1c0 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 800f1d2:	2003      	movs	r0, #3
 800f1d4:	e14d      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800f1d6:	4b4b      	ldr	r3, [pc, #300]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f1da:	079b      	lsls	r3, r3, #30
 800f1dc:	d503      	bpl.n	800f1e6 <HAL_RCC_OscConfig+0x1fa>
 800f1de:	69a3      	ldr	r3, [r4, #24]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d100      	bne.n	800f1e6 <HAL_RCC_OscConfig+0x1fa>
 800f1e4:	e14d      	b.n	800f482 <HAL_RCC_OscConfig+0x496>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	075b      	lsls	r3, r3, #29
 800f1ea:	d400      	bmi.n	800f1ee <HAL_RCC_OscConfig+0x202>
 800f1ec:	e0a0      	b.n	800f330 <HAL_RCC_OscConfig+0x344>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800f1ee:	4b45      	ldr	r3, [pc, #276]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1f0:	689a      	ldr	r2, [r3, #8]
 800f1f2:	2338      	movs	r3, #56	; 0x38
 800f1f4:	4013      	ands	r3, r2
 800f1f6:	2b20      	cmp	r3, #32
 800f1f8:	d022      	beq.n	800f240 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f1fa:	4b42      	ldr	r3, [pc, #264]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fe:	00db      	lsls	r3, r3, #3
 800f200:	d427      	bmi.n	800f252 <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_PWR_CLK_ENABLE();
 800f202:	4a40      	ldr	r2, [pc, #256]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f204:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f206:	2080      	movs	r0, #128	; 0x80
 800f208:	0540      	lsls	r0, r0, #21
 800f20a:	4301      	orrs	r1, r0
 800f20c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800f20e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f210:	4003      	ands	r3, r0
 800f212:	9301      	str	r3, [sp, #4]
 800f214:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800f216:	2501      	movs	r5, #1
 800f218:	e01c      	b.n	800f254 <HAL_RCC_OscConfig+0x268>
        __HAL_RCC_LSI_DISABLE();
 800f21a:	4a3a      	ldr	r2, [pc, #232]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f21c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800f21e:	2101      	movs	r1, #1
 800f220:	438b      	bics	r3, r1
 800f222:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800f224:	f7fe fad8 	bl	800d7d8 <HAL_GetTick>
 800f228:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f22a:	4b36      	ldr	r3, [pc, #216]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f22c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f22e:	079b      	lsls	r3, r3, #30
 800f230:	d5d9      	bpl.n	800f1e6 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f232:	f7fe fad1 	bl	800d7d8 <HAL_GetTick>
 800f236:	1b40      	subs	r0, r0, r5
 800f238:	2802      	cmp	r0, #2
 800f23a:	d9f6      	bls.n	800f22a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800f23c:	2003      	movs	r0, #3
 800f23e:	e118      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800f240:	4b30      	ldr	r3, [pc, #192]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f244:	079b      	lsls	r3, r3, #30
 800f246:	d573      	bpl.n	800f330 <HAL_RCC_OscConfig+0x344>
 800f248:	68a3      	ldr	r3, [r4, #8]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d170      	bne.n	800f330 <HAL_RCC_OscConfig+0x344>
        return HAL_ERROR;
 800f24e:	2001      	movs	r0, #1
 800f250:	e10f      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
    FlagStatus       pwrclkchanged = RESET;
 800f252:	2500      	movs	r5, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f254:	4b33      	ldr	r3, [pc, #204]	; (800f324 <HAL_RCC_OscConfig+0x338>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	05db      	lsls	r3, r3, #23
 800f25a:	d51f      	bpl.n	800f29c <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f25c:	68a3      	ldr	r3, [r4, #8]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d030      	beq.n	800f2c4 <HAL_RCC_OscConfig+0x2d8>
 800f262:	2b05      	cmp	r3, #5
 800f264:	d034      	beq.n	800f2d0 <HAL_RCC_OscConfig+0x2e4>
 800f266:	4b27      	ldr	r3, [pc, #156]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f26a:	2101      	movs	r1, #1
 800f26c:	438a      	bics	r2, r1
 800f26e:	65da      	str	r2, [r3, #92]	; 0x5c
 800f270:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f272:	3103      	adds	r1, #3
 800f274:	438a      	bics	r2, r1
 800f276:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f278:	68a3      	ldr	r3, [r4, #8]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d032      	beq.n	800f2e4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800f27e:	f7fe faab 	bl	800d7d8 <HAL_GetTick>
 800f282:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f284:	4b1f      	ldr	r3, [pc, #124]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f288:	079b      	lsls	r3, r3, #30
 800f28a:	d44f      	bmi.n	800f32c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f28c:	f7fe faa4 	bl	800d7d8 <HAL_GetTick>
 800f290:	1b80      	subs	r0, r0, r6
 800f292:	4b25      	ldr	r3, [pc, #148]	; (800f328 <HAL_RCC_OscConfig+0x33c>)
 800f294:	4298      	cmp	r0, r3
 800f296:	d9f5      	bls.n	800f284 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 800f298:	2003      	movs	r0, #3
 800f29a:	e0ea      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f29c:	4a21      	ldr	r2, [pc, #132]	; (800f324 <HAL_RCC_OscConfig+0x338>)
 800f29e:	6811      	ldr	r1, [r2, #0]
 800f2a0:	2380      	movs	r3, #128	; 0x80
 800f2a2:	005b      	lsls	r3, r3, #1
 800f2a4:	430b      	orrs	r3, r1
 800f2a6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f2a8:	f7fe fa96 	bl	800d7d8 <HAL_GetTick>
 800f2ac:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f2ae:	4b1d      	ldr	r3, [pc, #116]	; (800f324 <HAL_RCC_OscConfig+0x338>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	05db      	lsls	r3, r3, #23
 800f2b4:	d4d2      	bmi.n	800f25c <HAL_RCC_OscConfig+0x270>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f2b6:	f7fe fa8f 	bl	800d7d8 <HAL_GetTick>
 800f2ba:	1b80      	subs	r0, r0, r6
 800f2bc:	2802      	cmp	r0, #2
 800f2be:	d9f6      	bls.n	800f2ae <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 800f2c0:	2003      	movs	r0, #3
 800f2c2:	e0d6      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f2c4:	4a0f      	ldr	r2, [pc, #60]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f2c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800f2c8:	2101      	movs	r1, #1
 800f2ca:	430b      	orrs	r3, r1
 800f2cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f2ce:	e7d3      	b.n	800f278 <HAL_RCC_OscConfig+0x28c>
 800f2d0:	4b0c      	ldr	r3, [pc, #48]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f2d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2d4:	2104      	movs	r1, #4
 800f2d6:	430a      	orrs	r2, r1
 800f2d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f2da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2dc:	3903      	subs	r1, #3
 800f2de:	430a      	orrs	r2, r1
 800f2e0:	65da      	str	r2, [r3, #92]	; 0x5c
 800f2e2:	e7c9      	b.n	800f278 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 800f2e4:	f7fe fa78 	bl	800d7d8 <HAL_GetTick>
 800f2e8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f2ea:	4b06      	ldr	r3, [pc, #24]	; (800f304 <HAL_RCC_OscConfig+0x318>)
 800f2ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ee:	079b      	lsls	r3, r3, #30
 800f2f0:	d51c      	bpl.n	800f32c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f2f2:	f7fe fa71 	bl	800d7d8 <HAL_GetTick>
 800f2f6:	1b80      	subs	r0, r0, r6
 800f2f8:	4b0b      	ldr	r3, [pc, #44]	; (800f328 <HAL_RCC_OscConfig+0x33c>)
 800f2fa:	4298      	cmp	r0, r3
 800f2fc:	d9f5      	bls.n	800f2ea <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 800f2fe:	2003      	movs	r0, #3
 800f300:	e0b7      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
 800f302:	46c0      	nop			; (mov r8, r8)
 800f304:	40021000 	.word	0x40021000
 800f308:	fffeffff 	.word	0xfffeffff
 800f30c:	fffbffff 	.word	0xfffbffff
 800f310:	ffff80ff 	.word	0xffff80ff
 800f314:	ffffc7ff 	.word	0xffffc7ff
 800f318:	00f42400 	.word	0x00f42400
 800f31c:	20000000 	.word	0x20000000
 800f320:	fffffeff 	.word	0xfffffeff
 800f324:	40007000 	.word	0x40007000
 800f328:	00001388 	.word	0x00001388
      if (pwrclkchanged == SET)
 800f32c:	2d01      	cmp	r5, #1
 800f32e:	d026      	beq.n	800f37e <HAL_RCC_OscConfig+0x392>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f330:	69e3      	ldr	r3, [r4, #28]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d100      	bne.n	800f338 <HAL_RCC_OscConfig+0x34c>
 800f336:	e0a6      	b.n	800f486 <HAL_RCC_OscConfig+0x49a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f338:	4a56      	ldr	r2, [pc, #344]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f33a:	6891      	ldr	r1, [r2, #8]
 800f33c:	2238      	movs	r2, #56	; 0x38
 800f33e:	400a      	ands	r2, r1
 800f340:	2a10      	cmp	r2, #16
 800f342:	d063      	beq.n	800f40c <HAL_RCC_OscConfig+0x420>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f344:	2b02      	cmp	r3, #2
 800f346:	d020      	beq.n	800f38a <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_DISABLE();
 800f348:	4b52      	ldr	r3, [pc, #328]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	4952      	ldr	r1, [pc, #328]	; (800f498 <HAL_RCC_OscConfig+0x4ac>)
 800f34e:	400a      	ands	r2, r1
 800f350:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800f352:	68da      	ldr	r2, [r3, #12]
 800f354:	2103      	movs	r1, #3
 800f356:	438a      	bics	r2, r1
 800f358:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800f35a:	68da      	ldr	r2, [r3, #12]
 800f35c:	494f      	ldr	r1, [pc, #316]	; (800f49c <HAL_RCC_OscConfig+0x4b0>)
 800f35e:	400a      	ands	r2, r1
 800f360:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800f362:	f7fe fa39 	bl	800d7d8 <HAL_GetTick>
 800f366:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f368:	4b4a      	ldr	r3, [pc, #296]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	019b      	lsls	r3, r3, #6
 800f36e:	d54b      	bpl.n	800f408 <HAL_RCC_OscConfig+0x41c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f370:	f7fe fa32 	bl	800d7d8 <HAL_GetTick>
 800f374:	1b00      	subs	r0, r0, r4
 800f376:	2802      	cmp	r0, #2
 800f378:	d9f6      	bls.n	800f368 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800f37a:	2003      	movs	r0, #3
 800f37c:	e079      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_PWR_CLK_DISABLE();
 800f37e:	4a45      	ldr	r2, [pc, #276]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f380:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f382:	4947      	ldr	r1, [pc, #284]	; (800f4a0 <HAL_RCC_OscConfig+0x4b4>)
 800f384:	400b      	ands	r3, r1
 800f386:	63d3      	str	r3, [r2, #60]	; 0x3c
 800f388:	e7d2      	b.n	800f330 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_DISABLE();
 800f38a:	4a42      	ldr	r2, [pc, #264]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f38c:	6813      	ldr	r3, [r2, #0]
 800f38e:	4942      	ldr	r1, [pc, #264]	; (800f498 <HAL_RCC_OscConfig+0x4ac>)
 800f390:	400b      	ands	r3, r1
 800f392:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f394:	f7fe fa20 	bl	800d7d8 <HAL_GetTick>
 800f398:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f39a:	4b3e      	ldr	r3, [pc, #248]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	019b      	lsls	r3, r3, #6
 800f3a0:	d506      	bpl.n	800f3b0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f3a2:	f7fe fa19 	bl	800d7d8 <HAL_GetTick>
 800f3a6:	1b40      	subs	r0, r0, r5
 800f3a8:	2802      	cmp	r0, #2
 800f3aa:	d9f6      	bls.n	800f39a <HAL_RCC_OscConfig+0x3ae>
            return HAL_TIMEOUT;
 800f3ac:	2003      	movs	r0, #3
 800f3ae:	e060      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f3b0:	4a38      	ldr	r2, [pc, #224]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f3b2:	68d1      	ldr	r1, [r2, #12]
 800f3b4:	6a23      	ldr	r3, [r4, #32]
 800f3b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3b8:	4303      	orrs	r3, r0
 800f3ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f3bc:	0200      	lsls	r0, r0, #8
 800f3be:	4303      	orrs	r3, r0
 800f3c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f3c2:	4303      	orrs	r3, r0
 800f3c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f3c6:	4303      	orrs	r3, r0
 800f3c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800f3ca:	4303      	orrs	r3, r0
 800f3cc:	4835      	ldr	r0, [pc, #212]	; (800f4a4 <HAL_RCC_OscConfig+0x4b8>)
 800f3ce:	4001      	ands	r1, r0
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800f3d4:	6811      	ldr	r1, [r2, #0]
 800f3d6:	2380      	movs	r3, #128	; 0x80
 800f3d8:	045b      	lsls	r3, r3, #17
 800f3da:	430b      	orrs	r3, r1
 800f3dc:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800f3de:	68d1      	ldr	r1, [r2, #12]
 800f3e0:	2380      	movs	r3, #128	; 0x80
 800f3e2:	055b      	lsls	r3, r3, #21
 800f3e4:	430b      	orrs	r3, r1
 800f3e6:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800f3e8:	f7fe f9f6 	bl	800d7d8 <HAL_GetTick>
 800f3ec:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f3ee:	4b29      	ldr	r3, [pc, #164]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	019b      	lsls	r3, r3, #6
 800f3f4:	d406      	bmi.n	800f404 <HAL_RCC_OscConfig+0x418>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f3f6:	f7fe f9ef 	bl	800d7d8 <HAL_GetTick>
 800f3fa:	1b00      	subs	r0, r0, r4
 800f3fc:	2802      	cmp	r0, #2
 800f3fe:	d9f6      	bls.n	800f3ee <HAL_RCC_OscConfig+0x402>
            return HAL_TIMEOUT;
 800f400:	2003      	movs	r0, #3
 800f402:	e036      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f404:	2000      	movs	r0, #0
 800f406:	e034      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
 800f408:	2000      	movs	r0, #0
 800f40a:	e032      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d03c      	beq.n	800f48a <HAL_RCC_OscConfig+0x49e>
        temp_pllckcfg = RCC->PLLCFGR;
 800f410:	4b20      	ldr	r3, [pc, #128]	; (800f494 <HAL_RCC_OscConfig+0x4a8>)
 800f412:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f414:	2303      	movs	r3, #3
 800f416:	4013      	ands	r3, r2
 800f418:	6a21      	ldr	r1, [r4, #32]
 800f41a:	428b      	cmp	r3, r1
 800f41c:	d001      	beq.n	800f422 <HAL_RCC_OscConfig+0x436>
          return HAL_ERROR;
 800f41e:	2001      	movs	r0, #1
 800f420:	e027      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f422:	2370      	movs	r3, #112	; 0x70
 800f424:	4013      	ands	r3, r2
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f426:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f428:	428b      	cmp	r3, r1
 800f42a:	d001      	beq.n	800f430 <HAL_RCC_OscConfig+0x444>
          return HAL_ERROR;
 800f42c:	2001      	movs	r0, #1
 800f42e:	e020      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f430:	21fe      	movs	r1, #254	; 0xfe
 800f432:	01c9      	lsls	r1, r1, #7
 800f434:	4011      	ands	r1, r2
 800f436:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f438:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f43a:	4299      	cmp	r1, r3
 800f43c:	d001      	beq.n	800f442 <HAL_RCC_OscConfig+0x456>
          return HAL_ERROR;
 800f43e:	2001      	movs	r0, #1
 800f440:	e017      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f442:	23f8      	movs	r3, #248	; 0xf8
 800f444:	039b      	lsls	r3, r3, #14
 800f446:	4013      	ands	r3, r2
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f448:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f44a:	428b      	cmp	r3, r1
 800f44c:	d001      	beq.n	800f452 <HAL_RCC_OscConfig+0x466>
          return HAL_ERROR;
 800f44e:	2001      	movs	r0, #1
 800f450:	e00f      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f452:	23e0      	movs	r3, #224	; 0xe0
 800f454:	051b      	lsls	r3, r3, #20
 800f456:	4013      	ands	r3, r2
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f458:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f45a:	428b      	cmp	r3, r1
 800f45c:	d001      	beq.n	800f462 <HAL_RCC_OscConfig+0x476>
          return HAL_ERROR;
 800f45e:	2001      	movs	r0, #1
 800f460:	e007      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f462:	0f52      	lsrs	r2, r2, #29
 800f464:	0752      	lsls	r2, r2, #29
 800f466:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f468:	429a      	cmp	r2, r3
 800f46a:	d010      	beq.n	800f48e <HAL_RCC_OscConfig+0x4a2>
          return HAL_ERROR;
 800f46c:	2001      	movs	r0, #1
 800f46e:	e000      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
    return HAL_ERROR;
 800f470:	2001      	movs	r0, #1
}
 800f472:	b002      	add	sp, #8
 800f474:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800f476:	2001      	movs	r0, #1
 800f478:	e7fb      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f47a:	2001      	movs	r0, #1
 800f47c:	e7f9      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
          return HAL_ERROR;
 800f47e:	2001      	movs	r0, #1
 800f480:	e7f7      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f482:	2001      	movs	r0, #1
 800f484:	e7f5      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f486:	2000      	movs	r0, #0
 800f488:	e7f3      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f48a:	2001      	movs	r0, #1
 800f48c:	e7f1      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f48e:	2000      	movs	r0, #0
 800f490:	e7ef      	b.n	800f472 <HAL_RCC_OscConfig+0x486>
 800f492:	46c0      	nop			; (mov r8, r8)
 800f494:	40021000 	.word	0x40021000
 800f498:	feffffff 	.word	0xfeffffff
 800f49c:	eefeffff 	.word	0xeefeffff
 800f4a0:	efffffff 	.word	0xefffffff
 800f4a4:	11c1808c 	.word	0x11c1808c

0800f4a8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f4a8:	4b07      	ldr	r3, [pc, #28]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	4218      	tst	r0, r3
 800f4ae:	d104      	bne.n	800f4ba <HAL_GPIO_EXTI_IRQHandler+0x12>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	4203      	tst	r3, r0
 800f4b6:	d103      	bne.n	800f4c0 <HAL_GPIO_EXTI_IRQHandler+0x18>
}
 800f4b8:	4770      	bx	lr
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f4ba:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f4bc:	60d8      	str	r0, [r3, #12]
 800f4be:	e7f7      	b.n	800f4b0 <HAL_GPIO_EXTI_IRQHandler+0x8>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f4c0:	4b01      	ldr	r3, [pc, #4]	; (800f4c8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f4c2:	6118      	str	r0, [r3, #16]
 800f4c4:	e7f8      	b.n	800f4b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
 800f4c6:	46c0      	nop			; (mov r8, r8)
 800f4c8:	40021800 	.word	0x40021800

0800f4cc <HAL_GPIO_WritePin>:
  if (PinState != GPIO_PIN_RESET)
 800f4cc:	2a00      	cmp	r2, #0
 800f4ce:	d101      	bne.n	800f4d4 <HAL_GPIO_WritePin+0x8>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f4d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 800f4d2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f4d4:	6181      	str	r1, [r0, #24]
 800f4d6:	e7fc      	b.n	800f4d2 <HAL_GPIO_WritePin+0x6>

0800f4d8 <HAL_GPIO_ReadPin>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f4d8:	6903      	ldr	r3, [r0, #16]
 800f4da:	420b      	tst	r3, r1
 800f4dc:	d101      	bne.n	800f4e2 <HAL_GPIO_ReadPin+0xa>
    bitstatus = GPIO_PIN_RESET;
 800f4de:	2000      	movs	r0, #0
}
 800f4e0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800f4e2:	2001      	movs	r0, #1
 800f4e4:	e7fc      	b.n	800f4e0 <HAL_GPIO_ReadPin+0x8>

0800f4e6 <HAL_GPIO_DeInit>:
{
 800f4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4e8:	46ce      	mov	lr, r9
 800f4ea:	4647      	mov	r7, r8
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e024      	b.n	800f53e <HAL_GPIO_DeInit+0x58>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800f4f4:	2103      	movs	r1, #3
 800f4f6:	4688      	mov	r8, r1
 800f4f8:	e001      	b.n	800f4fe <HAL_GPIO_DeInit+0x18>
 800f4fa:	2100      	movs	r1, #0
 800f4fc:	4688      	mov	r8, r1
 800f4fe:	4641      	mov	r1, r8
 800f500:	40a1      	lsls	r1, r4
 800f502:	42a9      	cmp	r1, r5
 800f504:	d046      	beq.n	800f594 <HAL_GPIO_DeInit+0xae>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800f506:	6806      	ldr	r6, [r0, #0]
 800f508:	005f      	lsls	r7, r3, #1
 800f50a:	2503      	movs	r5, #3
 800f50c:	40bd      	lsls	r5, r7
 800f50e:	432e      	orrs	r6, r5
 800f510:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800f512:	08dc      	lsrs	r4, r3, #3
 800f514:	3408      	adds	r4, #8
 800f516:	00a4      	lsls	r4, r4, #2
 800f518:	5827      	ldr	r7, [r4, r0]
 800f51a:	2607      	movs	r6, #7
 800f51c:	401e      	ands	r6, r3
 800f51e:	00b6      	lsls	r6, r6, #2
 800f520:	210f      	movs	r1, #15
 800f522:	40b1      	lsls	r1, r6
 800f524:	438f      	bics	r7, r1
 800f526:	5027      	str	r7, [r4, r0]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f528:	6886      	ldr	r6, [r0, #8]
 800f52a:	43ec      	mvns	r4, r5
 800f52c:	4026      	ands	r6, r4
 800f52e:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f530:	6845      	ldr	r5, [r0, #4]
 800f532:	4395      	bics	r5, r2
 800f534:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f536:	68c2      	ldr	r2, [r0, #12]
 800f538:	4014      	ands	r4, r2
 800f53a:	60c4      	str	r4, [r0, #12]
    position++;
 800f53c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800f53e:	464a      	mov	r2, r9
 800f540:	40da      	lsrs	r2, r3
 800f542:	d03e      	beq.n	800f5c2 <HAL_GPIO_DeInit+0xdc>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f544:	2201      	movs	r2, #1
 800f546:	409a      	lsls	r2, r3
 800f548:	464e      	mov	r6, r9
 800f54a:	4016      	ands	r6, r2
    if (iocurrent != 0x00u)
 800f54c:	d0f6      	beq.n	800f53c <HAL_GPIO_DeInit+0x56>
      tmp = EXTI->EXTICR[position >> 2u];
 800f54e:	0899      	lsrs	r1, r3, #2
 800f550:	468c      	mov	ip, r1
 800f552:	000c      	movs	r4, r1
 800f554:	3418      	adds	r4, #24
 800f556:	00a4      	lsls	r4, r4, #2
 800f558:	4d1c      	ldr	r5, [pc, #112]	; (800f5cc <HAL_GPIO_DeInit+0xe6>)
 800f55a:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800f55c:	2403      	movs	r4, #3
 800f55e:	401c      	ands	r4, r3
 800f560:	00e4      	lsls	r4, r4, #3
 800f562:	270f      	movs	r7, #15
 800f564:	40a7      	lsls	r7, r4
 800f566:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800f568:	21a0      	movs	r1, #160	; 0xa0
 800f56a:	05c9      	lsls	r1, r1, #23
 800f56c:	4288      	cmp	r0, r1
 800f56e:	d0c4      	beq.n	800f4fa <HAL_GPIO_DeInit+0x14>
 800f570:	4917      	ldr	r1, [pc, #92]	; (800f5d0 <HAL_GPIO_DeInit+0xea>)
 800f572:	4288      	cmp	r0, r1
 800f574:	d008      	beq.n	800f588 <HAL_GPIO_DeInit+0xa2>
 800f576:	4917      	ldr	r1, [pc, #92]	; (800f5d4 <HAL_GPIO_DeInit+0xee>)
 800f578:	4288      	cmp	r0, r1
 800f57a:	d008      	beq.n	800f58e <HAL_GPIO_DeInit+0xa8>
 800f57c:	4916      	ldr	r1, [pc, #88]	; (800f5d8 <HAL_GPIO_DeInit+0xf2>)
 800f57e:	4288      	cmp	r0, r1
 800f580:	d0b8      	beq.n	800f4f4 <HAL_GPIO_DeInit+0xe>
 800f582:	2105      	movs	r1, #5
 800f584:	4688      	mov	r8, r1
 800f586:	e7ba      	b.n	800f4fe <HAL_GPIO_DeInit+0x18>
 800f588:	2101      	movs	r1, #1
 800f58a:	4688      	mov	r8, r1
 800f58c:	e7b7      	b.n	800f4fe <HAL_GPIO_DeInit+0x18>
 800f58e:	2102      	movs	r1, #2
 800f590:	4688      	mov	r8, r1
 800f592:	e7b4      	b.n	800f4fe <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 800f594:	4d0d      	ldr	r5, [pc, #52]	; (800f5cc <HAL_GPIO_DeInit+0xe6>)
 800f596:	2180      	movs	r1, #128	; 0x80
 800f598:	586c      	ldr	r4, [r5, r1]
 800f59a:	43f6      	mvns	r6, r6
 800f59c:	4034      	ands	r4, r6
 800f59e:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 800f5a0:	3104      	adds	r1, #4
 800f5a2:	586c      	ldr	r4, [r5, r1]
 800f5a4:	4034      	ands	r4, r6
 800f5a6:	506c      	str	r4, [r5, r1]
        EXTI->RTSR1 &= ~(iocurrent);
 800f5a8:	682c      	ldr	r4, [r5, #0]
 800f5aa:	4034      	ands	r4, r6
 800f5ac:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800f5ae:	686c      	ldr	r4, [r5, #4]
 800f5b0:	4026      	ands	r6, r4
 800f5b2:	606e      	str	r6, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800f5b4:	4664      	mov	r4, ip
 800f5b6:	3418      	adds	r4, #24
 800f5b8:	00a4      	lsls	r4, r4, #2
 800f5ba:	5966      	ldr	r6, [r4, r5]
 800f5bc:	43be      	bics	r6, r7
 800f5be:	5166      	str	r6, [r4, r5]
 800f5c0:	e7a1      	b.n	800f506 <HAL_GPIO_DeInit+0x20>
}
 800f5c2:	bc0c      	pop	{r2, r3}
 800f5c4:	4690      	mov	r8, r2
 800f5c6:	4699      	mov	r9, r3
 800f5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ca:	46c0      	nop			; (mov r8, r8)
 800f5cc:	40021800 	.word	0x40021800
 800f5d0:	50000400 	.word	0x50000400
 800f5d4:	50000800 	.word	0x50000800
 800f5d8:	50000c00 	.word	0x50000c00

0800f5dc <HAL_GPIO_Init>:
{
 800f5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5de:	46c6      	mov	lr, r8
 800f5e0:	b500      	push	{lr}
  uint32_t position = 0x00u;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	e03b      	b.n	800f65e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800f5e6:	2603      	movs	r6, #3
 800f5e8:	e000      	b.n	800f5ec <HAL_GPIO_Init+0x10>
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	40ae      	lsls	r6, r5
 800f5ee:	0035      	movs	r5, r6
 800f5f0:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800f5f2:	4e53      	ldr	r6, [pc, #332]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f5f4:	3418      	adds	r4, #24
 800f5f6:	00a4      	lsls	r4, r4, #2
 800f5f8:	51a5      	str	r5, [r4, r6]
        temp = EXTI->IMR1;
 800f5fa:	2480      	movs	r4, #128	; 0x80
 800f5fc:	5935      	ldr	r5, [r6, r4]
        temp &= ~(iocurrent);
 800f5fe:	4642      	mov	r2, r8
 800f600:	43d4      	mvns	r4, r2
 800f602:	002e      	movs	r6, r5
 800f604:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f606:	684a      	ldr	r2, [r1, #4]
 800f608:	03d2      	lsls	r2, r2, #15
 800f60a:	d502      	bpl.n	800f612 <HAL_GPIO_Init+0x36>
          temp |= iocurrent;
 800f60c:	4642      	mov	r2, r8
 800f60e:	4315      	orrs	r5, r2
 800f610:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800f612:	4d4b      	ldr	r5, [pc, #300]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f614:	2780      	movs	r7, #128	; 0x80
 800f616:	51ee      	str	r6, [r5, r7]
        temp = EXTI->EMR1;
 800f618:	2684      	movs	r6, #132	; 0x84
 800f61a:	59ad      	ldr	r5, [r5, r6]
        temp &= ~(iocurrent);
 800f61c:	002e      	movs	r6, r5
 800f61e:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f620:	684a      	ldr	r2, [r1, #4]
 800f622:	0392      	lsls	r2, r2, #14
 800f624:	d502      	bpl.n	800f62c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 800f626:	4642      	mov	r2, r8
 800f628:	4315      	orrs	r5, r2
 800f62a:	002e      	movs	r6, r5
        EXTI->EMR1 = temp;
 800f62c:	4d44      	ldr	r5, [pc, #272]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f62e:	2784      	movs	r7, #132	; 0x84
 800f630:	51ee      	str	r6, [r5, r7]
        temp = EXTI->RTSR1;
 800f632:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800f634:	002e      	movs	r6, r5
 800f636:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f638:	684a      	ldr	r2, [r1, #4]
 800f63a:	02d2      	lsls	r2, r2, #11
 800f63c:	d502      	bpl.n	800f644 <HAL_GPIO_Init+0x68>
          temp |= iocurrent;
 800f63e:	4642      	mov	r2, r8
 800f640:	4315      	orrs	r5, r2
 800f642:	002e      	movs	r6, r5
        EXTI->RTSR1 = temp;
 800f644:	4d3e      	ldr	r5, [pc, #248]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f646:	602e      	str	r6, [r5, #0]
        temp = EXTI->FTSR1;
 800f648:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800f64a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f64c:	684a      	ldr	r2, [r1, #4]
 800f64e:	0292      	lsls	r2, r2, #10
 800f650:	d502      	bpl.n	800f658 <HAL_GPIO_Init+0x7c>
          temp |= iocurrent;
 800f652:	4642      	mov	r2, r8
 800f654:	432a      	orrs	r2, r5
 800f656:	0014      	movs	r4, r2
        EXTI->FTSR1 = temp;
 800f658:	4a39      	ldr	r2, [pc, #228]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f65a:	6054      	str	r4, [r2, #4]
    position++;
 800f65c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f65e:	680a      	ldr	r2, [r1, #0]
 800f660:	0014      	movs	r4, r2
 800f662:	40dc      	lsrs	r4, r3
 800f664:	d069      	beq.n	800f73a <HAL_GPIO_Init+0x15e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f666:	2501      	movs	r5, #1
 800f668:	409d      	lsls	r5, r3
 800f66a:	402a      	ands	r2, r5
 800f66c:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 800f66e:	d0f5      	beq.n	800f65c <HAL_GPIO_Init+0x80>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f670:	684c      	ldr	r4, [r1, #4]
 800f672:	2c02      	cmp	r4, #2
 800f674:	d001      	beq.n	800f67a <HAL_GPIO_Init+0x9e>
 800f676:	2c12      	cmp	r4, #18
 800f678:	d10e      	bne.n	800f698 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3u];
 800f67a:	08dc      	lsrs	r4, r3, #3
 800f67c:	3408      	adds	r4, #8
 800f67e:	00a4      	lsls	r4, r4, #2
 800f680:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f682:	2607      	movs	r6, #7
 800f684:	401e      	ands	r6, r3
 800f686:	00b6      	lsls	r6, r6, #2
 800f688:	220f      	movs	r2, #15
 800f68a:	40b2      	lsls	r2, r6
 800f68c:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f68e:	690a      	ldr	r2, [r1, #16]
 800f690:	40b2      	lsls	r2, r6
 800f692:	0016      	movs	r6, r2
 800f694:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 800f696:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 800f698:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f69a:	005f      	lsls	r7, r3, #1
 800f69c:	2403      	movs	r4, #3
 800f69e:	0026      	movs	r6, r4
 800f6a0:	40be      	lsls	r6, r7
 800f6a2:	43f6      	mvns	r6, r6
 800f6a4:	4032      	ands	r2, r6
 800f6a6:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f6a8:	684a      	ldr	r2, [r1, #4]
 800f6aa:	4014      	ands	r4, r2
 800f6ac:	40bc      	lsls	r4, r7
 800f6ae:	4662      	mov	r2, ip
 800f6b0:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800f6b2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f6b4:	684c      	ldr	r4, [r1, #4]
 800f6b6:	1e62      	subs	r2, r4, #1
 800f6b8:	2a01      	cmp	r2, #1
 800f6ba:	d903      	bls.n	800f6c4 <HAL_GPIO_Init+0xe8>
 800f6bc:	2c11      	cmp	r4, #17
 800f6be:	d001      	beq.n	800f6c4 <HAL_GPIO_Init+0xe8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f6c0:	2c12      	cmp	r4, #18
 800f6c2:	d110      	bne.n	800f6e6 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 800f6c4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f6c6:	4034      	ands	r4, r6
 800f6c8:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f6ca:	68cc      	ldr	r4, [r1, #12]
 800f6cc:	40bc      	lsls	r4, r7
 800f6ce:	4662      	mov	r2, ip
 800f6d0:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800f6d2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f6d4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f6d6:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800f6d8:	684a      	ldr	r2, [r1, #4]
 800f6da:	0912      	lsrs	r2, r2, #4
 800f6dc:	2501      	movs	r5, #1
 800f6de:	4015      	ands	r5, r2
 800f6e0:	409d      	lsls	r5, r3
 800f6e2:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 800f6e4:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800f6e6:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f6e8:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800f6ea:	688c      	ldr	r4, [r1, #8]
 800f6ec:	40bc      	lsls	r4, r7
 800f6ee:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 800f6f0:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f6f2:	684a      	ldr	r2, [r1, #4]
 800f6f4:	00d2      	lsls	r2, r2, #3
 800f6f6:	d5b1      	bpl.n	800f65c <HAL_GPIO_Init+0x80>
        temp = EXTI->EXTICR[position >> 2u];
 800f6f8:	089c      	lsrs	r4, r3, #2
 800f6fa:	0025      	movs	r5, r4
 800f6fc:	3518      	adds	r5, #24
 800f6fe:	00ad      	lsls	r5, r5, #2
 800f700:	4e0f      	ldr	r6, [pc, #60]	; (800f740 <HAL_GPIO_Init+0x164>)
 800f702:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800f704:	2503      	movs	r5, #3
 800f706:	401d      	ands	r5, r3
 800f708:	00ed      	lsls	r5, r5, #3
 800f70a:	260f      	movs	r6, #15
 800f70c:	40ae      	lsls	r6, r5
 800f70e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800f710:	26a0      	movs	r6, #160	; 0xa0
 800f712:	05f6      	lsls	r6, r6, #23
 800f714:	42b0      	cmp	r0, r6
 800f716:	d100      	bne.n	800f71a <HAL_GPIO_Init+0x13e>
 800f718:	e767      	b.n	800f5ea <HAL_GPIO_Init+0xe>
 800f71a:	4e0a      	ldr	r6, [pc, #40]	; (800f744 <HAL_GPIO_Init+0x168>)
 800f71c:	42b0      	cmp	r0, r6
 800f71e:	d008      	beq.n	800f732 <HAL_GPIO_Init+0x156>
 800f720:	4e09      	ldr	r6, [pc, #36]	; (800f748 <HAL_GPIO_Init+0x16c>)
 800f722:	42b0      	cmp	r0, r6
 800f724:	d007      	beq.n	800f736 <HAL_GPIO_Init+0x15a>
 800f726:	4e09      	ldr	r6, [pc, #36]	; (800f74c <HAL_GPIO_Init+0x170>)
 800f728:	42b0      	cmp	r0, r6
 800f72a:	d100      	bne.n	800f72e <HAL_GPIO_Init+0x152>
 800f72c:	e75b      	b.n	800f5e6 <HAL_GPIO_Init+0xa>
 800f72e:	2605      	movs	r6, #5
 800f730:	e75c      	b.n	800f5ec <HAL_GPIO_Init+0x10>
 800f732:	2601      	movs	r6, #1
 800f734:	e75a      	b.n	800f5ec <HAL_GPIO_Init+0x10>
 800f736:	2602      	movs	r6, #2
 800f738:	e758      	b.n	800f5ec <HAL_GPIO_Init+0x10>
}
 800f73a:	bc04      	pop	{r2}
 800f73c:	4690      	mov	r8, r2
 800f73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f740:	40021800 	.word	0x40021800
 800f744:	50000400 	.word	0x50000400
 800f748:	50000800 	.word	0x50000800
 800f74c:	50000c00 	.word	0x50000c00

0800f750 <biquad_q3_12_complex_direct_form_1.lto_priv.532>:
 800f750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f752:	4645      	mov	r5, r8
 800f754:	4657      	mov	r7, sl
 800f756:	464e      	mov	r6, r9
 800f758:	46de      	mov	lr, fp
 800f75a:	b5e0      	push	{r5, r6, r7, lr}
 800f75c:	b08d      	sub	sp, #52	; 0x34
 800f75e:	ac16      	add	r4, sp, #88	; 0x58
 800f760:	4688      	mov	r8, r1
 800f762:	2100      	movs	r1, #0
 800f764:	5e65      	ldrsh	r5, [r4, r1]
 800f766:	2102      	movs	r1, #2
 800f768:	5e66      	ldrsh	r6, [r4, r1]
 800f76a:	2400      	movs	r4, #0
 800f76c:	5f01      	ldrsh	r1, [r0, r4]
 800f76e:	9102      	str	r1, [sp, #8]
 800f770:	2402      	movs	r4, #2
 800f772:	5f01      	ldrsh	r1, [r0, r4]
 800f774:	9103      	str	r1, [sp, #12]
 800f776:	2404      	movs	r4, #4
 800f778:	5f01      	ldrsh	r1, [r0, r4]
 800f77a:	4c36      	ldr	r4, [pc, #216]	; (800f854 <biquad_q3_12_complex_direct_form_1.lto_priv.532+0x104>)
 800f77c:	9104      	str	r1, [sp, #16]
 800f77e:	88c7      	ldrh	r7, [r0, #6]
 800f780:	1be4      	subs	r4, r4, r7
 800f782:	b221      	sxth	r1, r4
 800f784:	9105      	str	r1, [sp, #20]
 800f786:	2108      	movs	r1, #8
 800f788:	5e41      	ldrsh	r1, [r0, r1]
 800f78a:	0334      	lsls	r4, r6, #12
 800f78c:	9106      	str	r1, [sp, #24]
 800f78e:	0328      	lsls	r0, r5, #12
 800f790:	0097      	lsls	r7, r2, #2
 800f792:	2b01      	cmp	r3, #1
 800f794:	d001      	beq.n	800f79a <biquad_q3_12_complex_direct_form_1.lto_priv.532+0x4a>
 800f796:	2704      	movs	r7, #4
 800f798:	427f      	negs	r7, r7
 800f79a:	4259      	negs	r1, r3
 800f79c:	4351      	muls	r1, r2
 800f79e:	009a      	lsls	r2, r3, #2
 800f7a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f7a2:	008a      	lsls	r2, r1, #2
 800f7a4:	19d2      	adds	r2, r2, r7
 800f7a6:	4442      	add	r2, r8
 800f7a8:	468c      	mov	ip, r1
 800f7aa:	46a8      	mov	r8, r5
 800f7ac:	0011      	movs	r1, r2
 800f7ae:	46b2      	mov	sl, r6
 800f7b0:	46a9      	mov	r9, r5
 800f7b2:	9608      	str	r6, [sp, #32]
 800f7b4:	9507      	str	r5, [sp, #28]
 800f7b6:	9601      	str	r6, [sp, #4]
 800f7b8:	4662      	mov	r2, ip
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	d106      	bne.n	800f7cc <biquad_q3_12_complex_direct_form_1.lto_priv.532+0x7c>
 800f7be:	b00d      	add	sp, #52	; 0x34
 800f7c0:	bc3c      	pop	{r2, r3, r4, r5}
 800f7c2:	4690      	mov	r8, r2
 800f7c4:	4699      	mov	r9, r3
 800f7c6:	46a2      	mov	sl, r4
 800f7c8:	46ab      	mov	fp, r5
 800f7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7cc:	2700      	movs	r7, #0
 800f7ce:	5fca      	ldrsh	r2, [r1, r7]
 800f7d0:	449c      	add	ip, r3
 800f7d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f7d4:	2702      	movs	r7, #2
 800f7d6:	5fca      	ldrsh	r2, [r1, r7]
 800f7d8:	464f      	mov	r7, r9
 800f7da:	920a      	str	r2, [sp, #40]	; 0x28
 800f7dc:	9a03      	ldr	r2, [sp, #12]
 800f7de:	437a      	muls	r2, r7
 800f7e0:	4647      	mov	r7, r8
 800f7e2:	4693      	mov	fp, r2
 800f7e4:	9a05      	ldr	r2, [sp, #20]
 800f7e6:	437a      	muls	r2, r7
 800f7e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f7ea:	4493      	add	fp, r2
 800f7ec:	9a02      	ldr	r2, [sp, #8]
 800f7ee:	437a      	muls	r2, r7
 800f7f0:	1810      	adds	r0, r2, r0
 800f7f2:	9a04      	ldr	r2, [sp, #16]
 800f7f4:	9f07      	ldr	r7, [sp, #28]
 800f7f6:	4355      	muls	r5, r2
 800f7f8:	9a06      	ldr	r2, [sp, #24]
 800f7fa:	4458      	add	r0, fp
 800f7fc:	4357      	muls	r7, r2
 800f7fe:	1bed      	subs	r5, r5, r7
 800f800:	1940      	adds	r0, r0, r5
 800f802:	4655      	mov	r5, sl
 800f804:	9a03      	ldr	r2, [sp, #12]
 800f806:	9f01      	ldr	r7, [sp, #4]
 800f808:	436a      	muls	r2, r5
 800f80a:	9d05      	ldr	r5, [sp, #20]
 800f80c:	437d      	muls	r5, r7
 800f80e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f810:	1955      	adds	r5, r2, r5
 800f812:	9a02      	ldr	r2, [sp, #8]
 800f814:	437a      	muls	r2, r7
 800f816:	1914      	adds	r4, r2, r4
 800f818:	9a04      	ldr	r2, [sp, #16]
 800f81a:	192c      	adds	r4, r5, r4
 800f81c:	4356      	muls	r6, r2
 800f81e:	9d06      	ldr	r5, [sp, #24]
 800f820:	9a08      	ldr	r2, [sp, #32]
 800f822:	436a      	muls	r2, r5
 800f824:	1ab6      	subs	r6, r6, r2
 800f826:	19a4      	adds	r4, r4, r6
 800f828:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800f82a:	1302      	asrs	r2, r0, #12
 800f82c:	46b3      	mov	fp, r6
 800f82e:	9e01      	ldr	r6, [sp, #4]
 800f830:	b212      	sxth	r2, r2
 800f832:	9608      	str	r6, [sp, #32]
 800f834:	4646      	mov	r6, r8
 800f836:	800a      	strh	r2, [r1, #0]
 800f838:	1325      	asrs	r5, r4, #12
 800f83a:	4690      	mov	r8, r2
 800f83c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f83e:	b22d      	sxth	r5, r5
 800f840:	804d      	strh	r5, [r1, #2]
 800f842:	9607      	str	r6, [sp, #28]
 800f844:	9501      	str	r5, [sp, #4]
 800f846:	4656      	mov	r6, sl
 800f848:	464d      	mov	r5, r9
 800f84a:	4459      	add	r1, fp
 800f84c:	46ba      	mov	sl, r7
 800f84e:	4691      	mov	r9, r2
 800f850:	e7b2      	b.n	800f7b8 <biquad_q3_12_complex_direct_form_1.lto_priv.532+0x68>
 800f852:	46c0      	nop			; (mov r8, r8)
 800f854:	fffff000 	.word	0xfffff000

0800f858 <acc_confprogram_copy>:
 800f858:	2300      	movs	r3, #0
 800f85a:	b530      	push	{r4, r5, lr}
 800f85c:	0092      	lsls	r2, r2, #2
 800f85e:	4293      	cmp	r3, r2
 800f860:	d100      	bne.n	800f864 <acc_confprogram_copy+0xc>
 800f862:	bd30      	pop	{r4, r5, pc}
 800f864:	58c4      	ldr	r4, [r0, r3]
 800f866:	0c25      	lsrs	r5, r4, #16
 800f868:	52cd      	strh	r5, [r1, r3]
 800f86a:	18cd      	adds	r5, r1, r3
 800f86c:	806c      	strh	r4, [r5, #2]
 800f86e:	3304      	adds	r3, #4
 800f870:	e7f5      	b.n	800f85e <acc_confprogram_copy+0x6>

0800f872 <acc_confprogram_modify_runif>:
 800f872:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f874:	0055      	lsls	r5, r2, #1
 800f876:	b085      	sub	sp, #20
 800f878:	1945      	adds	r5, r0, r5
 800f87a:	000e      	movs	r6, r1
 800f87c:	0028      	movs	r0, r5
 800f87e:	a903      	add	r1, sp, #12
 800f880:	0014      	movs	r4, r2
 800f882:	001f      	movs	r7, r3
 800f884:	f7fb fca0 	bl	800b1c8 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800f888:	230f      	movs	r3, #15
 800f88a:	9a03      	ldr	r2, [sp, #12]
 800f88c:	439a      	bics	r2, r3
 800f88e:	9202      	str	r2, [sp, #8]
 800f890:	0013      	movs	r3, r2
 800f892:	4a11      	ldr	r2, [pc, #68]	; (800f8d8 <acc_confprogram_modify_runif+0x66>)
 800f894:	0011      	movs	r1, r2
 800f896:	3130      	adds	r1, #48	; 0x30
 800f898:	7809      	ldrb	r1, [r1, #0]
 800f89a:	2f00      	cmp	r7, #0
 800f89c:	d011      	beq.n	800f8c2 <acc_confprogram_modify_runif+0x50>
 800f89e:	4333      	orrs	r3, r6
 800f8a0:	9302      	str	r3, [sp, #8]
 800f8a2:	2903      	cmp	r1, #3
 800f8a4:	d906      	bls.n	800f8b4 <acc_confprogram_modify_runif+0x42>
 800f8a6:	9600      	str	r6, [sp, #0]
 800f8a8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800f8aa:	0863      	lsrs	r3, r4, #1
 800f8ac:	4a0b      	ldr	r2, [pc, #44]	; (800f8dc <acc_confprogram_modify_runif+0x6a>)
 800f8ae:	490c      	ldr	r1, [pc, #48]	; (800f8e0 <acc_confprogram_modify_runif+0x6e>)
 800f8b0:	2004      	movs	r0, #4
 800f8b2:	47b0      	blx	r6
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	0029      	movs	r1, r5
 800f8b8:	a802      	add	r0, sp, #8
 800f8ba:	f7ff ffcd 	bl	800f858 <acc_confprogram_copy>
 800f8be:	b005      	add	sp, #20
 800f8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c2:	2903      	cmp	r1, #3
 800f8c4:	d9f6      	bls.n	800f8b4 <acc_confprogram_modify_runif+0x42>
 800f8c6:	9600      	str	r6, [sp, #0]
 800f8c8:	0863      	lsrs	r3, r4, #1
 800f8ca:	4905      	ldr	r1, [pc, #20]	; (800f8e0 <acc_confprogram_modify_runif+0x6e>)
 800f8cc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f8ce:	2004      	movs	r0, #4
 800f8d0:	4a04      	ldr	r2, [pc, #16]	; (800f8e4 <acc_confprogram_modify_runif+0x72>)
 800f8d2:	47a0      	blx	r4
 800f8d4:	e7ee      	b.n	800f8b4 <acc_confprogram_modify_runif+0x42>
 800f8d6:	46c0      	nop			; (mov r8, r8)
 800f8d8:	200005d0 	.word	0x200005d0
 800f8dc:	0801ed7e 	.word	0x0801ed7e
 800f8e0:	0801e068 	.word	0x0801e068
 800f8e4:	0801eea0 	.word	0x0801eea0

0800f8e8 <acc_confprogram_patch_offset>:
 800f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ea:	464e      	mov	r6, r9
 800f8ec:	4645      	mov	r5, r8
 800f8ee:	4657      	mov	r7, sl
 800f8f0:	46de      	mov	lr, fp
 800f8f2:	b5e0      	push	{r5, r6, r7, lr}
 800f8f4:	b089      	sub	sp, #36	; 0x24
 800f8f6:	4698      	mov	r8, r3
 800f8f8:	ab12      	add	r3, sp, #72	; 0x48
 800f8fa:	881c      	ldrh	r4, [r3, #0]
 800f8fc:	4b48      	ldr	r3, [pc, #288]	; (800fa20 <acc_confprogram_patch_offset+0x138>)
 800f8fe:	9204      	str	r2, [sp, #16]
 800f900:	4699      	mov	r9, r3
 800f902:	3330      	adds	r3, #48	; 0x30
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	4682      	mov	sl, r0
 800f908:	000e      	movs	r6, r1
 800f90a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d907      	bls.n	800f920 <acc_confprogram_patch_offset+0x38>
 800f910:	464f      	mov	r7, r9
 800f912:	9500      	str	r5, [sp, #0]
 800f914:	0023      	movs	r3, r4
 800f916:	4a43      	ldr	r2, [pc, #268]	; (800fa24 <acc_confprogram_patch_offset+0x13c>)
 800f918:	4943      	ldr	r1, [pc, #268]	; (800fa28 <acc_confprogram_patch_offset+0x140>)
 800f91a:	2004      	movs	r0, #4
 800f91c:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800f91e:	47b8      	blx	r7
 800f920:	002b      	movs	r3, r5
 800f922:	1e5a      	subs	r2, r3, #1
 800f924:	4193      	sbcs	r3, r2
 800f926:	2700      	movs	r7, #0
 800f928:	00e4      	lsls	r4, r4, #3
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	44a0      	add	r8, r4
 800f92e:	9305      	str	r3, [sp, #20]
 800f930:	4643      	mov	r3, r8
 800f932:	885b      	ldrh	r3, [r3, #2]
 800f934:	42bb      	cmp	r3, r7
 800f936:	d806      	bhi.n	800f946 <acc_confprogram_patch_offset+0x5e>
 800f938:	b009      	add	sp, #36	; 0x24
 800f93a:	bc3c      	pop	{r2, r3, r4, r5}
 800f93c:	4690      	mov	r8, r2
 800f93e:	4699      	mov	r9, r3
 800f940:	46a2      	mov	sl, r4
 800f942:	46ab      	mov	fp, r5
 800f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f946:	4643      	mov	r3, r8
 800f948:	2106      	movs	r1, #6
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	4379      	muls	r1, r7
 800f94e:	469c      	mov	ip, r3
 800f950:	4461      	add	r1, ip
 800f952:	7808      	ldrb	r0, [r1, #0]
 800f954:	2800      	cmp	r0, #0
 800f956:	d003      	beq.n	800f960 <acc_confprogram_patch_offset+0x78>
 800f958:	2802      	cmp	r0, #2
 800f95a:	d81d      	bhi.n	800f998 <acc_confprogram_patch_offset+0xb0>
 800f95c:	888a      	ldrh	r2, [r1, #4]
 800f95e:	e000      	b.n	800f962 <acc_confprogram_patch_offset+0x7a>
 800f960:	884a      	ldrh	r2, [r1, #2]
 800f962:	4b32      	ldr	r3, [pc, #200]	; (800fa2c <acc_confprogram_patch_offset+0x144>)
 800f964:	429a      	cmp	r2, r3
 800f966:	d01d      	beq.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800f968:	0052      	lsls	r2, r2, #1
 800f96a:	b292      	uxth	r2, r2
 800f96c:	42b2      	cmp	r2, r6
 800f96e:	d319      	bcc.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800f970:	9b04      	ldr	r3, [sp, #16]
 800f972:	18f3      	adds	r3, r6, r3
 800f974:	429a      	cmp	r2, r3
 800f976:	da15      	bge.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800f978:	2801      	cmp	r0, #1
 800f97a:	d049      	beq.n	800fa10 <acc_confprogram_patch_offset+0x128>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	d013      	beq.n	800f9a8 <acc_confprogram_patch_offset+0xc0>
 800f980:	2802      	cmp	r0, #2
 800f982:	d10f      	bne.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800f984:	426b      	negs	r3, r5
 800f986:	416b      	adcs	r3, r5
 800f988:	1b92      	subs	r2, r2, r6
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	b292      	uxth	r2, r2
 800f98e:	8849      	ldrh	r1, [r1, #2]
 800f990:	4650      	mov	r0, sl
 800f992:	f7ff ff6e 	bl	800f872 <acc_confprogram_modify_runif>
 800f996:	e005      	b.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800f998:	464b      	mov	r3, r9
 800f99a:	4a25      	ldr	r2, [pc, #148]	; (800fa30 <acc_confprogram_patch_offset+0x148>)
 800f99c:	4922      	ldr	r1, [pc, #136]	; (800fa28 <acc_confprogram_patch_offset+0x140>)
 800f99e:	2000      	movs	r0, #0
 800f9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a2:	4798      	blx	r3
 800f9a4:	3701      	adds	r7, #1
 800f9a6:	e7c3      	b.n	800f930 <acc_confprogram_patch_offset+0x48>
 800f9a8:	1b92      	subs	r2, r2, r6
 800f9aa:	b293      	uxth	r3, r2
 800f9ac:	790a      	ldrb	r2, [r1, #4]
 800f9ae:	9203      	str	r2, [sp, #12]
 800f9b0:	794a      	ldrb	r2, [r1, #5]
 800f9b2:	4693      	mov	fp, r2
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	4659      	mov	r1, fp
 800f9b8:	408a      	lsls	r2, r1
 800f9ba:	4295      	cmp	r5, r2
 800f9bc:	d30b      	bcc.n	800f9d6 <acc_confprogram_patch_offset+0xee>
 800f9be:	3a01      	subs	r2, #1
 800f9c0:	9201      	str	r2, [sp, #4]
 800f9c2:	464a      	mov	r2, r9
 800f9c4:	9500      	str	r5, [sp, #0]
 800f9c6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800f9c8:	4917      	ldr	r1, [pc, #92]	; (800fa28 <acc_confprogram_patch_offset+0x140>)
 800f9ca:	4a1a      	ldr	r2, [pc, #104]	; (800fa34 <acc_confprogram_patch_offset+0x14c>)
 800f9cc:	47a0      	blx	r4
 800f9ce:	2139      	movs	r1, #57	; 0x39
 800f9d0:	4819      	ldr	r0, [pc, #100]	; (800fa38 <acc_confprogram_patch_offset+0x150>)
 800f9d2:	f7f5 fbef 	bl	80051b4 <acc_assert_fail>
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	4453      	add	r3, sl
 800f9da:	a906      	add	r1, sp, #24
 800f9dc:	0018      	movs	r0, r3
 800f9de:	001c      	movs	r4, r3
 800f9e0:	f7fb fbf2 	bl	800b1c8 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800f9e4:	465b      	mov	r3, fp
 800f9e6:	2220      	movs	r2, #32
 800f9e8:	1ad2      	subs	r2, r2, r3
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	425b      	negs	r3, r3
 800f9ee:	40d3      	lsrs	r3, r2
 800f9f0:	9a03      	ldr	r2, [sp, #12]
 800f9f2:	9903      	ldr	r1, [sp, #12]
 800f9f4:	4093      	lsls	r3, r2
 800f9f6:	9a06      	ldr	r2, [sp, #24]
 800f9f8:	a807      	add	r0, sp, #28
 800f9fa:	439a      	bics	r2, r3
 800f9fc:	0013      	movs	r3, r2
 800f9fe:	002a      	movs	r2, r5
 800fa00:	408a      	lsls	r2, r1
 800fa02:	0021      	movs	r1, r4
 800fa04:	4313      	orrs	r3, r2
 800fa06:	2201      	movs	r2, #1
 800fa08:	9307      	str	r3, [sp, #28]
 800fa0a:	f7ff ff25 	bl	800f858 <acc_confprogram_copy>
 800fa0e:	e7c9      	b.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800fa10:	1b92      	subs	r2, r2, r6
 800fa12:	b292      	uxth	r2, r2
 800fa14:	8849      	ldrh	r1, [r1, #2]
 800fa16:	9b05      	ldr	r3, [sp, #20]
 800fa18:	4650      	mov	r0, sl
 800fa1a:	f7ff ff2a 	bl	800f872 <acc_confprogram_modify_runif>
 800fa1e:	e7c1      	b.n	800f9a4 <acc_confprogram_patch_offset+0xbc>
 800fa20:	200005d0 	.word	0x200005d0
 800fa24:	0801ede7 	.word	0x0801ede7
 800fa28:	0801e068 	.word	0x0801e068
 800fa2c:	0000ffff 	.word	0x0000ffff
 800fa30:	0801eed2 	.word	0x0801eed2
 800fa34:	0801eeff 	.word	0x0801eeff
 800fa38:	0801ee3d 	.word	0x0801ee3d

0800fa3c <acc_diagnostic_log_data_u16>:
 800fa3c:	4770      	bx	lr

0800fa3e <acc_diagnostic_log_scalar>:
 800fa3e:	4770      	bx	lr

0800fa40 <acc_diagnostic_log_array>:
 800fa40:	4770      	bx	lr

0800fa42 <acc_diagnostic_log_set_parameter>:
 800fa42:	4770      	bx	lr

0800fa44 <acc_diagnostic_log_declare_parameter>:
 800fa44:	4770      	bx	lr

0800fa46 <acc_diagnostic_log_set_scope>:
 800fa46:	4770      	bx	lr

0800fa48 <accumulator_mod.lto_priv.531>:
 800fa48:	b510      	push	{r4, lr}
 800fa4a:	1c04      	adds	r4, r0, #0
 800fa4c:	f001 fe58 	bl	8011700 <__aeabi_f2iz>
 800fa50:	f001 fe76 	bl	8011740 <__aeabi_i2f>
 800fa54:	1c01      	adds	r1, r0, #0
 800fa56:	1c20      	adds	r0, r4, #0
 800fa58:	f001 f88e 	bl	8010b78 <__aeabi_fsub>
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	1c04      	adds	r4, r0, #0
 800fa60:	f001 fc6e 	bl	8011340 <__aeabi_fcmpge>
 800fa64:	2800      	cmp	r0, #0
 800fa66:	d10b      	bne.n	800fa80 <accumulator_mod.lto_priv.531+0x38>
 800fa68:	20fe      	movs	r0, #254	; 0xfe
 800fa6a:	0580      	lsls	r0, r0, #22
 800fa6c:	1c21      	adds	r1, r4, #0
 800fa6e:	f000 fca5 	bl	80103bc <__aeabi_fadd>
 800fa72:	219f      	movs	r1, #159	; 0x9f
 800fa74:	05c9      	lsls	r1, r1, #23
 800fa76:	f000 ff4d 	bl	8010914 <__aeabi_fmul>
 800fa7a:	f001 fc8b 	bl	8011394 <__aeabi_f2uiz>
 800fa7e:	bd10      	pop	{r4, pc}
 800fa80:	2000      	movs	r0, #0
 800fa82:	e7f3      	b.n	800fa6c <accumulator_mod.lto_priv.531+0x24>

0800fa84 <acc_alg_basic_saturation_check_u16>:
 800fa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa86:	0005      	movs	r5, r0
 800fa88:	000c      	movs	r4, r1
 800fa8a:	1c10      	adds	r0, r2, #0
 800fa8c:	4912      	ldr	r1, [pc, #72]	; (800fad8 <acc_alg_basic_saturation_check_u16+0x54>)
 800fa8e:	1c17      	adds	r7, r2, #0
 800fa90:	f000 fe2e 	bl	80106f0 <__aeabi_fdiv>
 800fa94:	4911      	ldr	r1, [pc, #68]	; (800fadc <acc_alg_basic_saturation_check_u16+0x58>)
 800fa96:	f000 ff3d 	bl	8010914 <__aeabi_fmul>
 800fa9a:	f001 fc7b 	bl	8011394 <__aeabi_f2uiz>
 800fa9e:	1c39      	adds	r1, r7, #0
 800faa0:	b286      	uxth	r6, r0
 800faa2:	480d      	ldr	r0, [pc, #52]	; (800fad8 <acc_alg_basic_saturation_check_u16+0x54>)
 800faa4:	f001 f868 	bl	8010b78 <__aeabi_fsub>
 800faa8:	490b      	ldr	r1, [pc, #44]	; (800fad8 <acc_alg_basic_saturation_check_u16+0x54>)
 800faaa:	f000 fe21 	bl	80106f0 <__aeabi_fdiv>
 800faae:	490b      	ldr	r1, [pc, #44]	; (800fadc <acc_alg_basic_saturation_check_u16+0x58>)
 800fab0:	f000 ff30 	bl	8010914 <__aeabi_fmul>
 800fab4:	f001 fc6e 	bl	8011394 <__aeabi_f2uiz>
 800fab8:	0864      	lsrs	r4, r4, #1
 800faba:	0064      	lsls	r4, r4, #1
 800fabc:	b280      	uxth	r0, r0
 800fabe:	192c      	adds	r4, r5, r4
 800fac0:	42a5      	cmp	r5, r4
 800fac2:	d101      	bne.n	800fac8 <acc_alg_basic_saturation_check_u16+0x44>
 800fac4:	2000      	movs	r0, #0
 800fac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac8:	882a      	ldrh	r2, [r5, #0]
 800faca:	4282      	cmp	r2, r0
 800facc:	d202      	bcs.n	800fad4 <acc_alg_basic_saturation_check_u16+0x50>
 800face:	3502      	adds	r5, #2
 800fad0:	42b2      	cmp	r2, r6
 800fad2:	d8f5      	bhi.n	800fac0 <acc_alg_basic_saturation_check_u16+0x3c>
 800fad4:	2001      	movs	r0, #1
 800fad6:	e7f6      	b.n	800fac6 <acc_alg_basic_saturation_check_u16+0x42>
 800fad8:	42c80000 	.word	0x42c80000
 800fadc:	477fff00 	.word	0x477fff00

0800fae0 <eval_even_poly_f32.lto_priv.534>:
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	0005      	movs	r5, r0
 800fae4:	000c      	movs	r4, r1
 800fae6:	1c10      	adds	r0, r2, #0
 800fae8:	1c11      	adds	r1, r2, #0
 800faea:	f000 ff13 	bl	8010914 <__aeabi_fmul>
 800faee:	1c06      	adds	r6, r0, #0
 800faf0:	2000      	movs	r0, #0
 800faf2:	3c01      	subs	r4, #1
 800faf4:	b2a4      	uxth	r4, r4
 800faf6:	00a4      	lsls	r4, r4, #2
 800faf8:	192c      	adds	r4, r5, r4
 800fafa:	6821      	ldr	r1, [r4, #0]
 800fafc:	f000 fc5e 	bl	80103bc <__aeabi_fadd>
 800fb00:	42a5      	cmp	r5, r4
 800fb02:	d005      	beq.n	800fb10 <eval_even_poly_f32.lto_priv.534+0x30>
 800fb04:	1c01      	adds	r1, r0, #0
 800fb06:	1c30      	adds	r0, r6, #0
 800fb08:	f000 ff04 	bl	8010914 <__aeabi_fmul>
 800fb0c:	3c04      	subs	r4, #4
 800fb0e:	e7f4      	b.n	800fafa <eval_even_poly_f32.lto_priv.534+0x1a>
 800fb10:	bd70      	pop	{r4, r5, r6, pc}

0800fb12 <quarter_pi_cos_sin_f32.lto_priv.533>:
 800fb12:	b570      	push	{r4, r5, r6, lr}
 800fb14:	000d      	movs	r5, r1
 800fb16:	490d      	ldr	r1, [pc, #52]	; (800fb4c <quarter_pi_cos_sin_f32.lto_priv.533+0x3a>)
 800fb18:	1c04      	adds	r4, r0, #0
 800fb1a:	f001 fbf3 	bl	8011304 <__aeabi_fcmplt>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d112      	bne.n	800fb48 <quarter_pi_cos_sin_f32.lto_priv.533+0x36>
 800fb22:	2d00      	cmp	r5, #0
 800fb24:	d006      	beq.n	800fb34 <quarter_pi_cos_sin_f32.lto_priv.533+0x22>
 800fb26:	480a      	ldr	r0, [pc, #40]	; (800fb50 <quarter_pi_cos_sin_f32.lto_priv.533+0x3e>)
 800fb28:	1c22      	adds	r2, r4, #0
 800fb2a:	2105      	movs	r1, #5
 800fb2c:	3070      	adds	r0, #112	; 0x70
 800fb2e:	f7ff ffd7 	bl	800fae0 <eval_even_poly_f32.lto_priv.534>
 800fb32:	bd70      	pop	{r4, r5, r6, pc}
 800fb34:	2104      	movs	r1, #4
 800fb36:	4807      	ldr	r0, [pc, #28]	; (800fb54 <quarter_pi_cos_sin_f32.lto_priv.533+0x42>)
 800fb38:	1c22      	adds	r2, r4, #0
 800fb3a:	1840      	adds	r0, r0, r1
 800fb3c:	f7ff ffd0 	bl	800fae0 <eval_even_poly_f32.lto_priv.534>
 800fb40:	1c21      	adds	r1, r4, #0
 800fb42:	f000 fee7 	bl	8010914 <__aeabi_fmul>
 800fb46:	e7f4      	b.n	800fb32 <quarter_pi_cos_sin_f32.lto_priv.533+0x20>
 800fb48:	4803      	ldr	r0, [pc, #12]	; (800fb58 <quarter_pi_cos_sin_f32.lto_priv.533+0x46>)
 800fb4a:	e7f2      	b.n	800fb32 <quarter_pi_cos_sin_f32.lto_priv.533+0x20>
 800fb4c:	bf490fdb 	.word	0xbf490fdb
 800fb50:	0801ad7c 	.word	0x0801ad7c
 800fb54:	0801adfc 	.word	0x0801adfc
 800fb58:	7fc00000 	.word	0x7fc00000

0800fb5c <acc_alg_basic_math_q3_12_sin>:
 800fb5c:	0002      	movs	r2, r0
 800fb5e:	0003      	movs	r3, r0
 800fb60:	0041      	lsls	r1, r0, #1
 800fb62:	d500      	bpl.n	800fb66 <acc_alg_basic_math_q3_12_sin+0xa>
 800fb64:	43c3      	mvns	r3, r0
 800fb66:	2180      	movs	r1, #128	; 0x80
 800fb68:	0389      	lsls	r1, r1, #14
 800fb6a:	468c      	mov	ip, r1
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	089b      	lsrs	r3, r3, #2
 800fb70:	4463      	add	r3, ip
 800fb72:	0d9b      	lsrs	r3, r3, #22
 800fb74:	4903      	ldr	r1, [pc, #12]	; (800fb84 <acc_alg_basic_math_q3_12_sin+0x28>)
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	5e58      	ldrsh	r0, [r3, r1]
 800fb7a:	2a00      	cmp	r2, #0
 800fb7c:	da01      	bge.n	800fb82 <acc_alg_basic_math_q3_12_sin+0x26>
 800fb7e:	4240      	negs	r0, r0
 800fb80:	b200      	sxth	r0, r0
 800fb82:	4770      	bx	lr
 800fb84:	0801ba10 	.word	0x0801ba10

0800fb88 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800fb88:	b203      	sxth	r3, r0
 800fb8a:	17da      	asrs	r2, r3, #31
 800fb8c:	189b      	adds	r3, r3, r2
 800fb8e:	1400      	asrs	r0, r0, #16
 800fb90:	4053      	eors	r3, r2
 800fb92:	17c2      	asrs	r2, r0, #31
 800fb94:	1880      	adds	r0, r0, r2
 800fb96:	4050      	eors	r0, r2
 800fb98:	b21b      	sxth	r3, r3
 800fb9a:	b202      	sxth	r2, r0
 800fb9c:	b082      	sub	sp, #8
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	db02      	blt.n	800fba8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800fba2:	0011      	movs	r1, r2
 800fba4:	001a      	movs	r2, r3
 800fba6:	000b      	movs	r3, r1
 800fba8:	480c      	ldr	r0, [pc, #48]	; (800fbdc <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800fbaa:	4350      	muls	r0, r2
 800fbac:	17c1      	asrs	r1, r0, #31
 800fbae:	0509      	lsls	r1, r1, #20
 800fbb0:	0d09      	lsrs	r1, r1, #20
 800fbb2:	1809      	adds	r1, r1, r0
 800fbb4:	1309      	asrs	r1, r1, #12
 800fbb6:	b209      	sxth	r1, r1
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	da08      	bge.n	800fbce <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800fbbc:	4808      	ldr	r0, [pc, #32]	; (800fbe0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800fbbe:	4350      	muls	r0, r2
 800fbc0:	4a08      	ldr	r2, [pc, #32]	; (800fbe4 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800fbc2:	4353      	muls	r3, r2
 800fbc4:	18c0      	adds	r0, r0, r3
 800fbc6:	1300      	asrs	r0, r0, #12
 800fbc8:	b200      	sxth	r0, r0
 800fbca:	b002      	add	sp, #8
 800fbcc:	4770      	bx	lr
 800fbce:	4806      	ldr	r0, [pc, #24]	; (800fbe8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800fbd0:	4350      	muls	r0, r2
 800fbd2:	4a06      	ldr	r2, [pc, #24]	; (800fbec <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800fbd4:	4353      	muls	r3, r2
 800fbd6:	18c0      	adds	r0, r0, r3
 800fbd8:	e7f5      	b.n	800fbc6 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800fbda:	46c0      	nop			; (mov r8, r8)
 800fbdc:	000006a1 	.word	0x000006a1
 800fbe0:	00000fd7 	.word	0x00000fd7
 800fbe4:	00000327 	.word	0x00000327
 800fbe8:	00000d71 	.word	0x00000d71
 800fbec:	000008fa 	.word	0x000008fa

0800fbf0 <internal_reg_read.lto_priv.530>:
 800fbf0:	23c0      	movs	r3, #192	; 0xc0
 800fbf2:	b513      	push	{r0, r1, r4, lr}
 800fbf4:	019b      	lsls	r3, r3, #6
 800fbf6:	4319      	orrs	r1, r3
 800fbf8:	466b      	mov	r3, sp
 800fbfa:	0014      	movs	r4, r2
 800fbfc:	8019      	strh	r1, [r3, #0]
 800fbfe:	466a      	mov	r2, sp
 800fc00:	2300      	movs	r3, #0
 800fc02:	4669      	mov	r1, sp
 800fc04:	8053      	strh	r3, [r2, #2]
 800fc06:	8093      	strh	r3, [r2, #4]
 800fc08:	3301      	adds	r3, #1
 800fc0a:	2203      	movs	r2, #3
 800fc0c:	f7f6 fd38 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 800fc10:	466b      	mov	r3, sp
 800fc12:	889b      	ldrh	r3, [r3, #4]
 800fc14:	8023      	strh	r3, [r4, #0]
 800fc16:	bd13      	pop	{r0, r1, r4, pc}

0800fc18 <read_reg_array>:
 800fc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc1a:	0007      	movs	r7, r0
 800fc1c:	000d      	movs	r5, r1
 800fc1e:	001e      	movs	r6, r3
 800fc20:	3a01      	subs	r2, #1
 800fc22:	b294      	uxth	r4, r2
 800fc24:	0064      	lsls	r4, r4, #1
 800fc26:	1c8a      	adds	r2, r1, #2
 800fc28:	18a4      	adds	r4, r4, r2
 800fc2a:	8829      	ldrh	r1, [r5, #0]
 800fc2c:	0032      	movs	r2, r6
 800fc2e:	0038      	movs	r0, r7
 800fc30:	3502      	adds	r5, #2
 800fc32:	f7ff ffdd 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fc36:	3602      	adds	r6, #2
 800fc38:	42a5      	cmp	r5, r4
 800fc3a:	d1f6      	bne.n	800fc2a <read_reg_array+0x12>
 800fc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc3e <acc_sensor_diagnostics_r2_sensor_status>:
 800fc3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc40:	4657      	mov	r7, sl
 800fc42:	464e      	mov	r6, r9
 800fc44:	46de      	mov	lr, fp
 800fc46:	4645      	mov	r5, r8
 800fc48:	b5e0      	push	{r5, r6, r7, lr}
 800fc4a:	4f1c      	ldr	r7, [pc, #112]	; (800fcbc <acc_sensor_diagnostics_r2_sensor_status+0x7e>)
 800fc4c:	b097      	sub	sp, #92	; 0x5c
 800fc4e:	003b      	movs	r3, r7
 800fc50:	3330      	adds	r3, #48	; 0x30
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	4681      	mov	r9, r0
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d904      	bls.n	800fc64 <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800fc5a:	4a19      	ldr	r2, [pc, #100]	; (800fcc0 <acc_sensor_diagnostics_r2_sensor_status+0x82>)
 800fc5c:	4919      	ldr	r1, [pc, #100]	; (800fcc4 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800fc5e:	2002      	movs	r0, #2
 800fc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc62:	4798      	blx	r3
 800fc64:	2201      	movs	r2, #1
 800fc66:	21b2      	movs	r1, #178	; 0xb2
 800fc68:	4648      	mov	r0, r9
 800fc6a:	f7fd f893 	bl	800cd94 <acc_sensor_reg_write>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	ac0e      	add	r4, sp, #56	; 0x38
 800fc72:	8023      	strh	r3, [r4, #0]
 800fc74:	3311      	adds	r3, #17
 800fc76:	4698      	mov	r8, r3
 800fc78:	2380      	movs	r3, #128	; 0x80
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	469b      	mov	fp, r3
 800fc7e:	2330      	movs	r3, #48	; 0x30
 800fc80:	469a      	mov	sl, r3
 800fc82:	2564      	movs	r5, #100	; 0x64
 800fc84:	44ba      	add	sl, r7
 800fc86:	0022      	movs	r2, r4
 800fc88:	4641      	mov	r1, r8
 800fc8a:	4648      	mov	r0, r9
 800fc8c:	f7ff ffb0 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fc90:	465a      	mov	r2, fp
 800fc92:	8823      	ldrh	r3, [r4, #0]
 800fc94:	4213      	tst	r3, r2
 800fc96:	d019      	beq.n	800fccc <acc_sensor_diagnostics_r2_sensor_status+0x8e>
 800fc98:	4652      	mov	r2, sl
 800fc9a:	7812      	ldrb	r2, [r2, #0]
 800fc9c:	2a01      	cmp	r2, #1
 800fc9e:	d908      	bls.n	800fcb2 <acc_sensor_diagnostics_r2_sensor_status+0x74>
 800fca0:	059b      	lsls	r3, r3, #22
 800fca2:	0d9b      	lsrs	r3, r3, #22
 800fca4:	9300      	str	r3, [sp, #0]
 800fca6:	4a08      	ldr	r2, [pc, #32]	; (800fcc8 <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800fca8:	464b      	mov	r3, r9
 800fcaa:	4906      	ldr	r1, [pc, #24]	; (800fcc4 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800fcac:	2002      	movs	r0, #2
 800fcae:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fcb0:	47b0      	blx	r6
 800fcb2:	3d01      	subs	r5, #1
 800fcb4:	b2ad      	uxth	r5, r5
 800fcb6:	2d00      	cmp	r5, #0
 800fcb8:	d1e5      	bne.n	800fc86 <acc_sensor_diagnostics_r2_sensor_status+0x48>
 800fcba:	e015      	b.n	800fce8 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800fcbc:	200005d0 	.word	0x200005d0
 800fcc0:	0801ef36 	.word	0x0801ef36
 800fcc4:	0801ef76 	.word	0x0801ef76
 800fcc8:	0801ef89 	.word	0x0801ef89
 800fccc:	003a      	movs	r2, r7
 800fcce:	3230      	adds	r2, #48	; 0x30
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	2a01      	cmp	r2, #1
 800fcd4:	d908      	bls.n	800fce8 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800fcd6:	059b      	lsls	r3, r3, #22
 800fcd8:	0d9b      	lsrs	r3, r3, #22
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	4ac9      	ldr	r2, [pc, #804]	; (8010004 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>)
 800fcde:	464b      	mov	r3, r9
 800fce0:	49c9      	ldr	r1, [pc, #804]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fce2:	2002      	movs	r0, #2
 800fce4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800fce6:	47a8      	blx	r5
 800fce8:	2500      	movs	r5, #0
 800fcea:	ab02      	add	r3, sp, #8
 800fcec:	0029      	movs	r1, r5
 800fcee:	aa0b      	add	r2, sp, #44	; 0x2c
 800fcf0:	4648      	mov	r0, r9
 800fcf2:	849d      	strh	r5, [r3, #36]	; 0x24
 800fcf4:	f7ff ff7c 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fcf8:	ab02      	add	r3, sp, #8
 800fcfa:	aa02      	add	r2, sp, #8
 800fcfc:	4694      	mov	ip, r2
 800fcfe:	84dd      	strh	r5, [r3, #38]	; 0x26
 800fd00:	2326      	movs	r3, #38	; 0x26
 800fd02:	4463      	add	r3, ip
 800fd04:	001a      	movs	r2, r3
 800fd06:	212a      	movs	r1, #42	; 0x2a
 800fd08:	4648      	mov	r0, r9
 800fd0a:	f7ff ff71 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fd0e:	ab02      	add	r3, sp, #8
 800fd10:	aa0c      	add	r2, sp, #48	; 0x30
 800fd12:	2128      	movs	r1, #40	; 0x28
 800fd14:	4648      	mov	r0, r9
 800fd16:	851d      	strh	r5, [r3, #40]	; 0x28
 800fd18:	f7ff ff6a 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fd1c:	4dbb      	ldr	r5, [pc, #748]	; (801000c <acc_sensor_diagnostics_r2_sensor_status+0x3ce>)
 800fd1e:	0023      	movs	r3, r4
 800fd20:	0029      	movs	r1, r5
 800fd22:	2210      	movs	r2, #16
 800fd24:	3114      	adds	r1, #20
 800fd26:	4648      	mov	r0, r9
 800fd28:	f7ff ff76 	bl	800fc18 <read_reg_array>
 800fd2c:	003b      	movs	r3, r7
 800fd2e:	3330      	adds	r3, #48	; 0x30
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d915      	bls.n	800fd62 <acc_sensor_diagnostics_r2_sensor_status+0x124>
 800fd36:	89e3      	ldrh	r3, [r4, #14]
 800fd38:	4ab5      	ldr	r2, [pc, #724]	; (8010010 <acc_sensor_diagnostics_r2_sensor_status+0x3d2>)
 800fd3a:	9307      	str	r3, [sp, #28]
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	49b2      	ldr	r1, [pc, #712]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fd40:	9306      	str	r3, [sp, #24]
 800fd42:	8963      	ldrh	r3, [r4, #10]
 800fd44:	2002      	movs	r0, #2
 800fd46:	9305      	str	r3, [sp, #20]
 800fd48:	8923      	ldrh	r3, [r4, #8]
 800fd4a:	9304      	str	r3, [sp, #16]
 800fd4c:	88e3      	ldrh	r3, [r4, #6]
 800fd4e:	9303      	str	r3, [sp, #12]
 800fd50:	88a3      	ldrh	r3, [r4, #4]
 800fd52:	9302      	str	r3, [sp, #8]
 800fd54:	8863      	ldrh	r3, [r4, #2]
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	8823      	ldrh	r3, [r4, #0]
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fd5e:	464b      	mov	r3, r9
 800fd60:	47b0      	blx	r6
 800fd62:	003b      	movs	r3, r7
 800fd64:	3330      	adds	r3, #48	; 0x30
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d915      	bls.n	800fd98 <acc_sensor_diagnostics_r2_sensor_status+0x15a>
 800fd6c:	8be3      	ldrh	r3, [r4, #30]
 800fd6e:	4aa9      	ldr	r2, [pc, #676]	; (8010014 <acc_sensor_diagnostics_r2_sensor_status+0x3d6>)
 800fd70:	9307      	str	r3, [sp, #28]
 800fd72:	8ba3      	ldrh	r3, [r4, #28]
 800fd74:	49a4      	ldr	r1, [pc, #656]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fd76:	9306      	str	r3, [sp, #24]
 800fd78:	8b63      	ldrh	r3, [r4, #26]
 800fd7a:	2002      	movs	r0, #2
 800fd7c:	9305      	str	r3, [sp, #20]
 800fd7e:	8b23      	ldrh	r3, [r4, #24]
 800fd80:	9304      	str	r3, [sp, #16]
 800fd82:	8ae3      	ldrh	r3, [r4, #22]
 800fd84:	9303      	str	r3, [sp, #12]
 800fd86:	8aa3      	ldrh	r3, [r4, #20]
 800fd88:	9302      	str	r3, [sp, #8]
 800fd8a:	8a63      	ldrh	r3, [r4, #18]
 800fd8c:	9301      	str	r3, [sp, #4]
 800fd8e:	8a23      	ldrh	r3, [r4, #16]
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fd94:	464b      	mov	r3, r9
 800fd96:	47b0      	blx	r6
 800fd98:	0029      	movs	r1, r5
 800fd9a:	0023      	movs	r3, r4
 800fd9c:	3134      	adds	r1, #52	; 0x34
 800fd9e:	2204      	movs	r2, #4
 800fda0:	4648      	mov	r0, r9
 800fda2:	f7ff ff39 	bl	800fc18 <read_reg_array>
 800fda6:	003b      	movs	r3, r7
 800fda8:	3330      	adds	r3, #48	; 0x30
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d90d      	bls.n	800fdcc <acc_sensor_diagnostics_r2_sensor_status+0x18e>
 800fdb0:	88e3      	ldrh	r3, [r4, #6]
 800fdb2:	4a99      	ldr	r2, [pc, #612]	; (8010018 <acc_sensor_diagnostics_r2_sensor_status+0x3da>)
 800fdb4:	9303      	str	r3, [sp, #12]
 800fdb6:	88a3      	ldrh	r3, [r4, #4]
 800fdb8:	4993      	ldr	r1, [pc, #588]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fdba:	9302      	str	r3, [sp, #8]
 800fdbc:	8863      	ldrh	r3, [r4, #2]
 800fdbe:	2002      	movs	r0, #2
 800fdc0:	9301      	str	r3, [sp, #4]
 800fdc2:	8823      	ldrh	r3, [r4, #0]
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fdc8:	464b      	mov	r3, r9
 800fdca:	47b0      	blx	r6
 800fdcc:	ab02      	add	r3, sp, #8
 800fdce:	469c      	mov	ip, r3
 800fdd0:	222a      	movs	r2, #42	; 0x2a
 800fdd2:	2600      	movs	r6, #0
 800fdd4:	4462      	add	r2, ip
 800fdd6:	2153      	movs	r1, #83	; 0x53
 800fdd8:	4648      	mov	r0, r9
 800fdda:	8016      	strh	r6, [r2, #0]
 800fddc:	f7ff ff08 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fde0:	0022      	movs	r2, r4
 800fde2:	2140      	movs	r1, #64	; 0x40
 800fde4:	4648      	mov	r0, r9
 800fde6:	8026      	strh	r6, [r4, #0]
 800fde8:	f7ff ff02 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800fdec:	003b      	movs	r3, r7
 800fdee:	3330      	adds	r3, #48	; 0x30
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d907      	bls.n	800fe06 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 800fdf6:	8823      	ldrh	r3, [r4, #0]
 800fdf8:	4a88      	ldr	r2, [pc, #544]	; (801001c <acc_sensor_diagnostics_r2_sensor_status+0x3de>)
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	4982      	ldr	r1, [pc, #520]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fdfe:	464b      	mov	r3, r9
 800fe00:	2002      	movs	r0, #2
 800fe02:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fe04:	47b0      	blx	r6
 800fe06:	003b      	movs	r3, r7
 800fe08:	3330      	adds	r3, #48	; 0x30
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	2b01      	cmp	r3, #1
 800fe0e:	d90c      	bls.n	800fe2a <acc_sensor_diagnostics_r2_sensor_status+0x1ec>
 800fe10:	2240      	movs	r2, #64	; 0x40
 800fe12:	8823      	ldrh	r3, [r4, #0]
 800fe14:	497c      	ldr	r1, [pc, #496]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fe16:	401a      	ands	r2, r3
 800fe18:	9201      	str	r2, [sp, #4]
 800fe1a:	2280      	movs	r2, #128	; 0x80
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	4a7f      	ldr	r2, [pc, #508]	; (8010020 <acc_sensor_diagnostics_r2_sensor_status+0x3e2>)
 800fe22:	464b      	mov	r3, r9
 800fe24:	2002      	movs	r0, #2
 800fe26:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fe28:	47b0      	blx	r6
 800fe2a:	003b      	movs	r3, r7
 800fe2c:	3330      	adds	r3, #48	; 0x30
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d90c      	bls.n	800fe4e <acc_sensor_diagnostics_r2_sensor_status+0x210>
 800fe34:	2210      	movs	r2, #16
 800fe36:	8823      	ldrh	r3, [r4, #0]
 800fe38:	4973      	ldr	r1, [pc, #460]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fe3a:	401a      	ands	r2, r3
 800fe3c:	9201      	str	r2, [sp, #4]
 800fe3e:	2220      	movs	r2, #32
 800fe40:	4013      	ands	r3, r2
 800fe42:	9300      	str	r3, [sp, #0]
 800fe44:	4a77      	ldr	r2, [pc, #476]	; (8010024 <acc_sensor_diagnostics_r2_sensor_status+0x3e6>)
 800fe46:	464b      	mov	r3, r9
 800fe48:	2002      	movs	r0, #2
 800fe4a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fe4c:	47b0      	blx	r6
 800fe4e:	003b      	movs	r3, r7
 800fe50:	3330      	adds	r3, #48	; 0x30
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d90c      	bls.n	800fe72 <acc_sensor_diagnostics_r2_sensor_status+0x234>
 800fe58:	2204      	movs	r2, #4
 800fe5a:	8823      	ldrh	r3, [r4, #0]
 800fe5c:	496a      	ldr	r1, [pc, #424]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fe5e:	401a      	ands	r2, r3
 800fe60:	9201      	str	r2, [sp, #4]
 800fe62:	2208      	movs	r2, #8
 800fe64:	4013      	ands	r3, r2
 800fe66:	9300      	str	r3, [sp, #0]
 800fe68:	4a6f      	ldr	r2, [pc, #444]	; (8010028 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800fe6a:	464b      	mov	r3, r9
 800fe6c:	2002      	movs	r0, #2
 800fe6e:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fe70:	47b0      	blx	r6
 800fe72:	0029      	movs	r1, r5
 800fe74:	0023      	movs	r3, r4
 800fe76:	313c      	adds	r1, #60	; 0x3c
 800fe78:	2210      	movs	r2, #16
 800fe7a:	4648      	mov	r0, r9
 800fe7c:	f7ff fecc 	bl	800fc18 <read_reg_array>
 800fe80:	003b      	movs	r3, r7
 800fe82:	3330      	adds	r3, #48	; 0x30
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	2500      	movs	r5, #0
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d908      	bls.n	800fe9e <acc_sensor_diagnostics_r2_sensor_status+0x260>
 800fe8c:	8823      	ldrh	r3, [r4, #0]
 800fe8e:	4a67      	ldr	r2, [pc, #412]	; (801002c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800fe94:	464b      	mov	r3, r9
 800fe96:	495c      	ldr	r1, [pc, #368]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fe98:	2002      	movs	r0, #2
 800fe9a:	47a8      	blx	r5
 800fe9c:	2501      	movs	r5, #1
 800fe9e:	003b      	movs	r3, r7
 800fea0:	3330      	adds	r3, #48	; 0x30
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d90b      	bls.n	800fec0 <acc_sensor_diagnostics_r2_sensor_status+0x282>
 800fea8:	1c6e      	adds	r6, r5, #1
 800feaa:	006d      	lsls	r5, r5, #1
 800feac:	5b63      	ldrh	r3, [r4, r5]
 800feae:	b2f6      	uxtb	r6, r6
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800feb4:	464b      	mov	r3, r9
 800feb6:	4a5e      	ldr	r2, [pc, #376]	; (8010030 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800feb8:	4953      	ldr	r1, [pc, #332]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800feba:	2002      	movs	r0, #2
 800febc:	47a8      	blx	r5
 800febe:	0035      	movs	r5, r6
 800fec0:	2301      	movs	r3, #1
 800fec2:	9309      	str	r3, [sp, #36]	; 0x24
 800fec4:	332f      	adds	r3, #47	; 0x2f
 800fec6:	4698      	mov	r8, r3
 800fec8:	4b5a      	ldr	r3, [pc, #360]	; (8010034 <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 800feca:	44b8      	add	r8, r7
 800fecc:	469b      	mov	fp, r3
 800fece:	4b4e      	ldr	r3, [pc, #312]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fed0:	469a      	mov	sl, r3
 800fed2:	4643      	mov	r3, r8
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d90e      	bls.n	800fef8 <acc_sensor_diagnostics_r2_sensor_status+0x2ba>
 800feda:	1c6b      	adds	r3, r5, #1
 800fedc:	005b      	lsls	r3, r3, #1
 800fede:	5ae3      	ldrh	r3, [r4, r3]
 800fee0:	465a      	mov	r2, fp
 800fee2:	9302      	str	r3, [sp, #8]
 800fee4:	006b      	lsls	r3, r5, #1
 800fee6:	5ae3      	ldrh	r3, [r4, r3]
 800fee8:	4651      	mov	r1, sl
 800feea:	9301      	str	r3, [sp, #4]
 800feec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feee:	2002      	movs	r0, #2
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fef4:	464b      	mov	r3, r9
 800fef6:	47b0      	blx	r6
 800fef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fefa:	3502      	adds	r5, #2
 800fefc:	3301      	adds	r3, #1
 800fefe:	b2ed      	uxtb	r5, r5
 800ff00:	9309      	str	r3, [sp, #36]	; 0x24
 800ff02:	2b08      	cmp	r3, #8
 800ff04:	d1e5      	bne.n	800fed2 <acc_sensor_diagnostics_r2_sensor_status+0x294>
 800ff06:	2300      	movs	r3, #0
 800ff08:	469a      	mov	sl, r3
 800ff0a:	ae0d      	add	r6, sp, #52	; 0x34
 800ff0c:	0032      	movs	r2, r6
 800ff0e:	219d      	movs	r1, #157	; 0x9d
 800ff10:	4648      	mov	r0, r9
 800ff12:	8033      	strh	r3, [r6, #0]
 800ff14:	f7ff fe6c 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800ff18:	ab02      	add	r3, sp, #8
 800ff1a:	469c      	mov	ip, r3
 800ff1c:	252e      	movs	r5, #46	; 0x2e
 800ff1e:	4653      	mov	r3, sl
 800ff20:	4465      	add	r5, ip
 800ff22:	002a      	movs	r2, r5
 800ff24:	2199      	movs	r1, #153	; 0x99
 800ff26:	4648      	mov	r0, r9
 800ff28:	802b      	strh	r3, [r5, #0]
 800ff2a:	9509      	str	r5, [sp, #36]	; 0x24
 800ff2c:	f7ff fe60 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800ff30:	4653      	mov	r3, sl
 800ff32:	0022      	movs	r2, r4
 800ff34:	2196      	movs	r1, #150	; 0x96
 800ff36:	4648      	mov	r0, r9
 800ff38:	8023      	strh	r3, [r4, #0]
 800ff3a:	f7ff fe59 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 800ff3e:	4652      	mov	r2, sl
 800ff40:	21b2      	movs	r1, #178	; 0xb2
 800ff42:	4648      	mov	r0, r9
 800ff44:	f7fc ff26 	bl	800cd94 <acc_sensor_reg_write>
 800ff48:	003b      	movs	r3, r7
 800ff4a:	3330      	adds	r3, #48	; 0x30
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d90e      	bls.n	800ff70 <acc_sensor_diagnostics_r2_sensor_status+0x332>
 800ff52:	ab02      	add	r3, sp, #8
 800ff54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff56:	4a38      	ldr	r2, [pc, #224]	; (8010038 <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 800ff58:	9302      	str	r3, [sp, #8]
 800ff5a:	ab02      	add	r3, sp, #8
 800ff5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ff5e:	492a      	ldr	r1, [pc, #168]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	ab02      	add	r3, sp, #8
 800ff64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ff66:	2002      	movs	r0, #2
 800ff68:	9300      	str	r3, [sp, #0]
 800ff6a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ff6c:	464b      	mov	r3, r9
 800ff6e:	47a8      	blx	r5
 800ff70:	003b      	movs	r3, r7
 800ff72:	3330      	adds	r3, #48	; 0x30
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d90b      	bls.n	800ff92 <acc_sensor_diagnostics_r2_sensor_status+0x354>
 800ff7a:	aa02      	add	r2, sp, #8
 800ff7c:	4694      	mov	ip, r2
 800ff7e:	232a      	movs	r3, #42	; 0x2a
 800ff80:	4463      	add	r3, ip
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	4a2d      	ldr	r2, [pc, #180]	; (801003c <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	491f      	ldr	r1, [pc, #124]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ff8a:	464b      	mov	r3, r9
 800ff8c:	2002      	movs	r0, #2
 800ff8e:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ff90:	47a8      	blx	r5
 800ff92:	003b      	movs	r3, r7
 800ff94:	3330      	adds	r3, #48	; 0x30
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d907      	bls.n	800ffac <acc_sensor_diagnostics_r2_sensor_status+0x36e>
 800ff9c:	8833      	ldrh	r3, [r6, #0]
 800ff9e:	4a28      	ldr	r2, [pc, #160]	; (8010040 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	4919      	ldr	r1, [pc, #100]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ffa4:	464b      	mov	r3, r9
 800ffa6:	2002      	movs	r0, #2
 800ffa8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ffaa:	47a8      	blx	r5
 800ffac:	003b      	movs	r3, r7
 800ffae:	3330      	adds	r3, #48	; 0x30
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d908      	bls.n	800ffc8 <acc_sensor_diagnostics_r2_sensor_status+0x38a>
 800ffb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb8:	4a22      	ldr	r2, [pc, #136]	; (8010044 <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 800ffba:	881b      	ldrh	r3, [r3, #0]
 800ffbc:	4912      	ldr	r1, [pc, #72]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	2002      	movs	r0, #2
 800ffc2:	464b      	mov	r3, r9
 800ffc4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ffc6:	47a8      	blx	r5
 800ffc8:	003b      	movs	r3, r7
 800ffca:	3330      	adds	r3, #48	; 0x30
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d907      	bls.n	800ffe2 <acc_sensor_diagnostics_r2_sensor_status+0x3a4>
 800ffd2:	8823      	ldrh	r3, [r4, #0]
 800ffd4:	4a1c      	ldr	r2, [pc, #112]	; (8010048 <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 800ffd6:	9300      	str	r3, [sp, #0]
 800ffd8:	490b      	ldr	r1, [pc, #44]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ffda:	464b      	mov	r3, r9
 800ffdc:	2002      	movs	r0, #2
 800ffde:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800ffe0:	47a0      	blx	r4
 800ffe2:	003b      	movs	r3, r7
 800ffe4:	3330      	adds	r3, #48	; 0x30
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d904      	bls.n	800fff6 <acc_sensor_diagnostics_r2_sensor_status+0x3b8>
 800ffec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffee:	4a17      	ldr	r2, [pc, #92]	; (801004c <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 800fff0:	4905      	ldr	r1, [pc, #20]	; (8010008 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800fff2:	2002      	movs	r0, #2
 800fff4:	4798      	blx	r3
 800fff6:	b017      	add	sp, #92	; 0x5c
 800fff8:	bc3c      	pop	{r2, r3, r4, r5}
 800fffa:	4690      	mov	r8, r2
 800fffc:	4699      	mov	r9, r3
 800fffe:	46a2      	mov	sl, r4
 8010000:	46ab      	mov	fp, r5
 8010002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010004:	0801efa6 	.word	0x0801efa6
 8010008:	0801ef76 	.word	0x0801ef76
 801000c:	0801adfc 	.word	0x0801adfc
 8010010:	0801efc3 	.word	0x0801efc3
 8010014:	0801f00a 	.word	0x0801f00a
 8010018:	0801f053 	.word	0x0801f053
 801001c:	0801f084 	.word	0x0801f084
 8010020:	0801f0a1 	.word	0x0801f0a1
 8010024:	0801f0cd 	.word	0x0801f0cd
 8010028:	0801f0fe 	.word	0x0801f0fe
 801002c:	0801f12e 	.word	0x0801f12e
 8010030:	0801f155 	.word	0x0801f155
 8010034:	0801f173 	.word	0x0801f173
 8010038:	0801f19b 	.word	0x0801f19b
 801003c:	0801f1ec 	.word	0x0801f1ec
 8010040:	0801f20f 	.word	0x0801f20f
 8010044:	0801f22b 	.word	0x0801f22b
 8010048:	0801f241 	.word	0x0801f241
 801004c:	0801f25b 	.word	0x0801f25b

08010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>:
 8010050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010052:	464e      	mov	r6, r9
 8010054:	46de      	mov	lr, fp
 8010056:	4645      	mov	r5, r8
 8010058:	4657      	mov	r7, sl
 801005a:	0004      	movs	r4, r0
 801005c:	b5e0      	push	{r5, r6, r7, lr}
 801005e:	468b      	mov	fp, r1
 8010060:	4691      	mov	r9, r2
 8010062:	2665      	movs	r6, #101	; 0x65
 8010064:	4d47      	ldr	r5, [pc, #284]	; (8010184 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x134>)
 8010066:	b085      	sub	sp, #20
 8010068:	4659      	mov	r1, fp
 801006a:	0020      	movs	r0, r4
 801006c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801006e:	4798      	blx	r3
 8010070:	4680      	mov	r8, r0
 8010072:	2800      	cmp	r0, #0
 8010074:	d10f      	bne.n	8010096 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x46>
 8010076:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8010078:	0023      	movs	r3, r4
 801007a:	4a43      	ldr	r2, [pc, #268]	; (8010188 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x138>)
 801007c:	4943      	ldr	r1, [pc, #268]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 801007e:	47a8      	blx	r5
 8010080:	0020      	movs	r0, r4
 8010082:	f7ff fddc 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 8010086:	4640      	mov	r0, r8
 8010088:	b005      	add	sp, #20
 801008a:	bc3c      	pop	{r2, r3, r4, r5}
 801008c:	4690      	mov	r8, r2
 801008e:	4699      	mov	r9, r3
 8010090:	46a2      	mov	sl, r4
 8010092:	46ab      	mov	fp, r5
 8010094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010096:	270e      	movs	r7, #14
 8010098:	2300      	movs	r3, #0
 801009a:	446f      	add	r7, sp
 801009c:	003a      	movs	r2, r7
 801009e:	212a      	movs	r1, #42	; 0x2a
 80100a0:	0020      	movs	r0, r4
 80100a2:	469a      	mov	sl, r3
 80100a4:	803b      	strh	r3, [r7, #0]
 80100a6:	f7ff fda3 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 80100aa:	2240      	movs	r2, #64	; 0x40
 80100ac:	883b      	ldrh	r3, [r7, #0]
 80100ae:	4213      	tst	r3, r2
 80100b0:	d04f      	beq.n	8010152 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x102>
 80100b2:	003a      	movs	r2, r7
 80100b4:	2128      	movs	r1, #40	; 0x28
 80100b6:	0020      	movs	r0, r4
 80100b8:	f7ff fd9a 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 80100bc:	4649      	mov	r1, r9
 80100be:	883a      	ldrh	r2, [r7, #0]
 80100c0:	b2d3      	uxtb	r3, r2
 80100c2:	700b      	strb	r3, [r1, #0]
 80100c4:	804a      	strh	r2, [r1, #2]
 80100c6:	2b0b      	cmp	r3, #11
 80100c8:	d839      	bhi.n	801013e <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xee>
 80100ca:	0018      	movs	r0, r3
 80100cc:	f000 ff36 	bl	8010f3c <__gnu_thumb1_case_sqi>
 80100d0:	dbdb1806 	.word	0xdbdb1806
 80100d4:	dbdbdbdb 	.word	0xdbdbdbdb
 80100d8:	dbdbdbdb 	.word	0xdbdbdbdb
 80100dc:	0023      	movs	r3, r4
 80100de:	4a2c      	ldr	r2, [pc, #176]	; (8010190 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x140>)
 80100e0:	492a      	ldr	r1, [pc, #168]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 80100e2:	2000      	movs	r0, #0
 80100e4:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80100e6:	47b0      	blx	r6
 80100e8:	0020      	movs	r0, r4
 80100ea:	f7ff fda8 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 80100ee:	0023      	movs	r3, r4
 80100f0:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80100f2:	4a28      	ldr	r2, [pc, #160]	; (8010194 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x144>)
 80100f4:	4925      	ldr	r1, [pc, #148]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 80100f6:	2000      	movs	r0, #0
 80100f8:	47a8      	blx	r5
 80100fa:	2300      	movs	r3, #0
 80100fc:	4698      	mov	r8, r3
 80100fe:	e7c2      	b.n	8010086 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x36>
 8010100:	0a11      	lsrs	r1, r2, #8
 8010102:	2910      	cmp	r1, #16
 8010104:	d804      	bhi.n	8010110 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xc0>
 8010106:	2301      	movs	r3, #1
 8010108:	408b      	lsls	r3, r1
 801010a:	4923      	ldr	r1, [pc, #140]	; (8010198 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x148>)
 801010c:	420b      	tst	r3, r1
 801010e:	d105      	bne.n	801011c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xcc>
 8010110:	2384      	movs	r3, #132	; 0x84
 8010112:	b2d2      	uxtb	r2, r2
 8010114:	019b      	lsls	r3, r3, #6
 8010116:	431a      	orrs	r2, r3
 8010118:	464b      	mov	r3, r9
 801011a:	805a      	strh	r2, [r3, #2]
 801011c:	464b      	mov	r3, r9
 801011e:	885a      	ldrh	r2, [r3, #2]
 8010120:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010122:	0a12      	lsrs	r2, r2, #8
 8010124:	3a01      	subs	r2, #1
 8010126:	b2d2      	uxtb	r2, r2
 8010128:	4b1c      	ldr	r3, [pc, #112]	; (801019c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x14c>)
 801012a:	2a20      	cmp	r2, #32
 801012c:	d802      	bhi.n	8010134 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xe4>
 801012e:	4b1c      	ldr	r3, [pc, #112]	; (80101a0 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x150>)
 8010130:	0092      	lsls	r2, r2, #2
 8010132:	58d3      	ldr	r3, [r2, r3]
 8010134:	4a1b      	ldr	r2, [pc, #108]	; (80101a4 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x154>)
 8010136:	4915      	ldr	r1, [pc, #84]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010138:	2000      	movs	r0, #0
 801013a:	47b0      	blx	r6
 801013c:	e7d4      	b.n	80100e8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x98>
 801013e:	9400      	str	r4, [sp, #0]
 8010140:	4a19      	ldr	r2, [pc, #100]	; (80101a8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x158>)
 8010142:	4912      	ldr	r1, [pc, #72]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010144:	4650      	mov	r0, sl
 8010146:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010148:	47b0      	blx	r6
 801014a:	464b      	mov	r3, r9
 801014c:	2200      	movs	r2, #0
 801014e:	701a      	strb	r2, [r3, #0]
 8010150:	e7ca      	b.n	80100e8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x98>
 8010152:	002b      	movs	r3, r5
 8010154:	3330      	adds	r3, #48	; 0x30
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d005      	beq.n	8010168 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x118>
 801015c:	0023      	movs	r3, r4
 801015e:	4a13      	ldr	r2, [pc, #76]	; (80101ac <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x15c>)
 8010160:	490a      	ldr	r1, [pc, #40]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010162:	2001      	movs	r0, #1
 8010164:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8010166:	47b8      	blx	r7
 8010168:	3e01      	subs	r6, #1
 801016a:	b2b6      	uxth	r6, r6
 801016c:	2e00      	cmp	r6, #0
 801016e:	d000      	beq.n	8010172 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x122>
 8010170:	e77a      	b.n	8010068 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x18>
 8010172:	9400      	str	r4, [sp, #0]
 8010174:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8010176:	2364      	movs	r3, #100	; 0x64
 8010178:	4a0d      	ldr	r2, [pc, #52]	; (80101b0 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x160>)
 801017a:	4904      	ldr	r1, [pc, #16]	; (801018c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 801017c:	0030      	movs	r0, r6
 801017e:	47a0      	blx	r4
 8010180:	46b0      	mov	r8, r6
 8010182:	e780      	b.n	8010086 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x36>
 8010184:	200005d0 	.word	0x200005d0
 8010188:	0801f2a9 	.word	0x0801f2a9
 801018c:	0801d2c5 	.word	0x0801d2c5
 8010190:	0801f2d1 	.word	0x0801f2d1
 8010194:	0801f343 	.word	0x0801f343
 8010198:	00010016 	.word	0x00010016
 801019c:	0801f29b 	.word	0x0801f29b
 80101a0:	0801bc18 	.word	0x0801bc18
 80101a4:	0801f2f4 	.word	0x0801f2f4
 80101a8:	0801f314 	.word	0x0801f314
 80101ac:	0801f36b 	.word	0x0801f36b
 80101b0:	0801f38c 	.word	0x0801f38c

080101b4 <acc_sensor_protocol_r2_stop.constprop.24>:
 80101b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101b6:	0005      	movs	r5, r0
 80101b8:	f7f5 fa6e 	bl	8005698 <acc_sensor_protocol_r2_is_sensor_running>
 80101bc:	1e04      	subs	r4, r0, #0
 80101be:	d109      	bne.n	80101d4 <acc_sensor_protocol_r2_stop.constprop.24+0x20>
 80101c0:	4b1a      	ldr	r3, [pc, #104]	; (801022c <acc_sensor_protocol_r2_stop.constprop.24+0x78>)
 80101c2:	4a1b      	ldr	r2, [pc, #108]	; (8010230 <acc_sensor_protocol_r2_stop.constprop.24+0x7c>)
 80101c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101c6:	491b      	ldr	r1, [pc, #108]	; (8010234 <acc_sensor_protocol_r2_stop.constprop.24+0x80>)
 80101c8:	4798      	blx	r3
 80101ca:	0028      	movs	r0, r5
 80101cc:	f7ff fd37 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 80101d0:	0020      	movs	r0, r4
 80101d2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80101d4:	4b18      	ldr	r3, [pc, #96]	; (8010238 <acc_sensor_protocol_r2_stop.constprop.24+0x84>)
 80101d6:	ae01      	add	r6, sp, #4
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	2202      	movs	r2, #2
 80101dc:	2300      	movs	r3, #0
 80101de:	0031      	movs	r1, r6
 80101e0:	0028      	movs	r0, r5
 80101e2:	f7f6 fa4d 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 80101e6:	0028      	movs	r0, r5
 80101e8:	f7f2 fc68 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 80101ec:	1e04      	subs	r4, r0, #0
 80101ee:	d0ef      	beq.n	80101d0 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 80101f0:	21fa      	movs	r1, #250	; 0xfa
 80101f2:	0032      	movs	r2, r6
 80101f4:	00c9      	lsls	r1, r1, #3
 80101f6:	0028      	movs	r0, r5
 80101f8:	f7ff ff2a 	bl	8010050 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 80101fc:	2800      	cmp	r0, #0
 80101fe:	d101      	bne.n	8010204 <acc_sensor_protocol_r2_stop.constprop.24+0x50>
 8010200:	2400      	movs	r4, #0
 8010202:	e7e5      	b.n	80101d0 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 8010204:	0028      	movs	r0, r5
 8010206:	f7f2 fc59 	bl	8002abc <acc_sensor_protocol_r2_ack_event>
 801020a:	1e04      	subs	r4, r0, #0
 801020c:	d0f8      	beq.n	8010200 <acc_sensor_protocol_r2_stop.constprop.24+0x4c>
 801020e:	7833      	ldrb	r3, [r6, #0]
 8010210:	2b02      	cmp	r3, #2
 8010212:	d0dd      	beq.n	80101d0 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 8010214:	4a05      	ldr	r2, [pc, #20]	; (801022c <acc_sensor_protocol_r2_stop.constprop.24+0x78>)
 8010216:	8873      	ldrh	r3, [r6, #2]
 8010218:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801021a:	4906      	ldr	r1, [pc, #24]	; (8010234 <acc_sensor_protocol_r2_stop.constprop.24+0x80>)
 801021c:	4a07      	ldr	r2, [pc, #28]	; (801023c <acc_sensor_protocol_r2_stop.constprop.24+0x88>)
 801021e:	2000      	movs	r0, #0
 8010220:	47a0      	blx	r4
 8010222:	0028      	movs	r0, r5
 8010224:	f7ff fd0b 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 8010228:	e7ea      	b.n	8010200 <acc_sensor_protocol_r2_stop.constprop.24+0x4c>
 801022a:	46c0      	nop			; (mov r8, r8)
 801022c:	200005d0 	.word	0x200005d0
 8010230:	0801f3c5 	.word	0x0801f3c5
 8010234:	0801d2c5 	.word	0x0801d2c5
 8010238:	00011074 	.word	0x00011074
 801023c:	0801f3f7 	.word	0x0801f3f7

08010240 <acc_sensor_protocol_r2_prepare_load.constprop.20>:
 8010240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010242:	46ce      	mov	lr, r9
 8010244:	4647      	mov	r7, r8
 8010246:	b580      	push	{r7, lr}
 8010248:	b083      	sub	sp, #12
 801024a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801024c:	0852      	lsrs	r2, r2, #1
 801024e:	4e37      	ldr	r6, [pc, #220]	; (801032c <acc_sensor_protocol_r2_prepare_load.constprop.20+0xec>)
 8010250:	602a      	str	r2, [r5, #0]
 8010252:	0004      	movs	r4, r0
 8010254:	6870      	ldr	r0, [r6, #4]
 8010256:	0840      	lsrs	r0, r0, #1
 8010258:	4290      	cmp	r0, r2
 801025a:	d900      	bls.n	801025e <acc_sensor_protocol_r2_prepare_load.constprop.20+0x1e>
 801025c:	0010      	movs	r0, r2
 801025e:	2701      	movs	r7, #1
 8010260:	3102      	adds	r1, #2
 8010262:	6019      	str	r1, [r3, #0]
 8010264:	2300      	movs	r3, #0
 8010266:	3801      	subs	r0, #1
 8010268:	43b8      	bics	r0, r7
 801026a:	6028      	str	r0, [r5, #0]
 801026c:	ad01      	add	r5, sp, #4
 801026e:	002a      	movs	r2, r5
 8010270:	212a      	movs	r1, #42	; 0x2a
 8010272:	0020      	movs	r0, r4
 8010274:	802b      	strh	r3, [r5, #0]
 8010276:	f7ff fcbb 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 801027a:	882b      	ldrh	r3, [r5, #0]
 801027c:	065b      	lsls	r3, r3, #25
 801027e:	d50d      	bpl.n	801029c <acc_sensor_protocol_r2_prepare_load.constprop.20+0x5c>
 8010280:	0033      	movs	r3, r6
 8010282:	3330      	adds	r3, #48	; 0x30
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d005      	beq.n	8010296 <acc_sensor_protocol_r2_prepare_load.constprop.20+0x56>
 801028a:	0038      	movs	r0, r7
 801028c:	0023      	movs	r3, r4
 801028e:	4a28      	ldr	r2, [pc, #160]	; (8010330 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf0>)
 8010290:	4928      	ldr	r1, [pc, #160]	; (8010334 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf4>)
 8010292:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8010294:	47b8      	blx	r7
 8010296:	0020      	movs	r0, r4
 8010298:	f7ff fcd1 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 801029c:	0020      	movs	r0, r4
 801029e:	f7f5 f9fb 	bl	8005698 <acc_sensor_protocol_r2_is_sensor_running>
 80102a2:	4680      	mov	r8, r0
 80102a4:	2800      	cmp	r0, #0
 80102a6:	d00e      	beq.n	80102c6 <acc_sensor_protocol_r2_prepare_load.constprop.20+0x86>
 80102a8:	0023      	movs	r3, r4
 80102aa:	4a23      	ldr	r2, [pc, #140]	; (8010338 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf8>)
 80102ac:	4921      	ldr	r1, [pc, #132]	; (8010334 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf4>)
 80102ae:	2000      	movs	r0, #0
 80102b0:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80102b2:	47a8      	blx	r5
 80102b4:	0020      	movs	r0, r4
 80102b6:	f7ff fcc2 	bl	800fc3e <acc_sensor_diagnostics_r2_sensor_status>
 80102ba:	2000      	movs	r0, #0
 80102bc:	b003      	add	sp, #12
 80102be:	bc0c      	pop	{r2, r3}
 80102c0:	4690      	mov	r8, r2
 80102c2:	4699      	mov	r9, r3
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	466b      	mov	r3, sp
 80102c8:	1c9e      	adds	r6, r3, #2
 80102ca:	2702      	movs	r7, #2
 80102cc:	0032      	movs	r2, r6
 80102ce:	2180      	movs	r1, #128	; 0x80
 80102d0:	0020      	movs	r0, r4
 80102d2:	f7ff fc8d 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 80102d6:	2284      	movs	r2, #132	; 0x84
 80102d8:	8833      	ldrh	r3, [r6, #0]
 80102da:	0152      	lsls	r2, r2, #5
 80102dc:	43bb      	bics	r3, r7
 80102de:	433b      	orrs	r3, r7
 80102e0:	4691      	mov	r9, r2
 80102e2:	802a      	strh	r2, [r5, #0]
 80102e4:	806b      	strh	r3, [r5, #2]
 80102e6:	003a      	movs	r2, r7
 80102e8:	4643      	mov	r3, r8
 80102ea:	0029      	movs	r1, r5
 80102ec:	0020      	movs	r0, r4
 80102ee:	f7f6 f9c7 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 80102f2:	0032      	movs	r2, r6
 80102f4:	2180      	movs	r1, #128	; 0x80
 80102f6:	0020      	movs	r0, r4
 80102f8:	f7ff fc7a 	bl	800fbf0 <internal_reg_read.lto_priv.530>
 80102fc:	2280      	movs	r2, #128	; 0x80
 80102fe:	8833      	ldrh	r3, [r6, #0]
 8010300:	0029      	movs	r1, r5
 8010302:	4393      	bics	r3, r2
 8010304:	464a      	mov	r2, r9
 8010306:	806b      	strh	r3, [r5, #2]
 8010308:	802a      	strh	r2, [r5, #0]
 801030a:	4643      	mov	r3, r8
 801030c:	003a      	movs	r2, r7
 801030e:	0020      	movs	r0, r4
 8010310:	f7f6 f9b6 	bl	8006680 <acc_rss_integration_sensor_device_transfer>
 8010314:	2201      	movs	r2, #1
 8010316:	2105      	movs	r1, #5
 8010318:	0020      	movs	r0, r4
 801031a:	f7fc fd3b 	bl	800cd94 <acc_sensor_reg_write>
 801031e:	0020      	movs	r0, r4
 8010320:	2203      	movs	r2, #3
 8010322:	217a      	movs	r1, #122	; 0x7a
 8010324:	f7fc fd36 	bl	800cd94 <acc_sensor_reg_write>
 8010328:	2001      	movs	r0, #1
 801032a:	e7c7      	b.n	80102bc <acc_sensor_protocol_r2_prepare_load.constprop.20+0x7c>
 801032c:	200005d0 	.word	0x200005d0
 8010330:	0801f417 	.word	0x0801f417
 8010334:	0801d2c5 	.word	0x0801d2c5
 8010338:	0801f443 	.word	0x0801f443

0801033c <acc_cpd_linear_sweep_get_info>:
 801033c:	30ad      	adds	r0, #173	; 0xad
 801033e:	7803      	ldrb	r3, [r0, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00a      	beq.n	801035a <acc_cpd_linear_sweep_get_info+0x1e>
 8010344:	2200      	movs	r2, #0
 8010346:	2303      	movs	r3, #3
 8010348:	604a      	str	r2, [r1, #4]
 801034a:	608a      	str	r2, [r1, #8]
 801034c:	3201      	adds	r2, #1
 801034e:	60ca      	str	r2, [r1, #12]
 8010350:	3201      	adds	r2, #1
 8010352:	600b      	str	r3, [r1, #0]
 8010354:	610a      	str	r2, [r1, #16]
 8010356:	614b      	str	r3, [r1, #20]
 8010358:	4770      	bx	lr
 801035a:	600b      	str	r3, [r1, #0]
 801035c:	604b      	str	r3, [r1, #4]
 801035e:	608b      	str	r3, [r1, #8]
 8010360:	60cb      	str	r3, [r1, #12]
 8010362:	610b      	str	r3, [r1, #16]
 8010364:	614b      	str	r3, [r1, #20]
 8010366:	e7f7      	b.n	8010358 <acc_cpd_linear_sweep_get_info+0x1c>

08010368 <acc_cpd_linear_sweep_update_program>:
 8010368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801036a:	784b      	ldrb	r3, [r1, #1]
 801036c:	0005      	movs	r5, r0
 801036e:	000c      	movs	r4, r1
 8010370:	684f      	ldr	r7, [r1, #4]
 8010372:	68ce      	ldr	r6, [r1, #12]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d007      	beq.n	8010388 <acc_cpd_linear_sweep_update_program+0x20>
 8010378:	688b      	ldr	r3, [r1, #8]
 801037a:	4a0e      	ldr	r2, [pc, #56]	; (80103b4 <acc_cpd_linear_sweep_update_program+0x4c>)
 801037c:	330e      	adds	r3, #14
 801037e:	9300      	str	r3, [sp, #0]
 8010380:	490d      	ldr	r1, [pc, #52]	; (80103b8 <acc_cpd_linear_sweep_update_program+0x50>)
 8010382:	235e      	movs	r3, #94	; 0x5e
 8010384:	f7fc fd14 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 8010388:	7823      	ldrb	r3, [r4, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d006      	beq.n	801039c <acc_cpd_linear_sweep_update_program+0x34>
 801038e:	9700      	str	r7, [sp, #0]
 8010390:	2336      	movs	r3, #54	; 0x36
 8010392:	4a08      	ldr	r2, [pc, #32]	; (80103b4 <acc_cpd_linear_sweep_update_program+0x4c>)
 8010394:	4908      	ldr	r1, [pc, #32]	; (80103b8 <acc_cpd_linear_sweep_update_program+0x50>)
 8010396:	0028      	movs	r0, r5
 8010398:	f7fc fd0a 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 801039c:	78a3      	ldrb	r3, [r4, #2]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d006      	beq.n	80103b0 <acc_cpd_linear_sweep_update_program+0x48>
 80103a2:	9600      	str	r6, [sp, #0]
 80103a4:	2372      	movs	r3, #114	; 0x72
 80103a6:	4a03      	ldr	r2, [pc, #12]	; (80103b4 <acc_cpd_linear_sweep_update_program+0x4c>)
 80103a8:	4903      	ldr	r1, [pc, #12]	; (80103b8 <acc_cpd_linear_sweep_update_program+0x50>)
 80103aa:	0028      	movs	r0, r5
 80103ac:	f7fc fd00 	bl	800cdb0 <acc_confprogram_live_patch.constprop.15>
 80103b0:	2001      	movs	r0, #1
 80103b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103b4:	0801b5d8 	.word	0x0801b5d8
 80103b8:	0801bc9c 	.word	0x0801bc9c

080103bc <__aeabi_fadd>:
 80103bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103be:	4647      	mov	r7, r8
 80103c0:	46ce      	mov	lr, r9
 80103c2:	0243      	lsls	r3, r0, #9
 80103c4:	0a5b      	lsrs	r3, r3, #9
 80103c6:	0044      	lsls	r4, r0, #1
 80103c8:	0fc2      	lsrs	r2, r0, #31
 80103ca:	469c      	mov	ip, r3
 80103cc:	0048      	lsls	r0, r1, #1
 80103ce:	00dd      	lsls	r5, r3, #3
 80103d0:	024b      	lsls	r3, r1, #9
 80103d2:	0e24      	lsrs	r4, r4, #24
 80103d4:	0a5b      	lsrs	r3, r3, #9
 80103d6:	0e00      	lsrs	r0, r0, #24
 80103d8:	b580      	push	{r7, lr}
 80103da:	4698      	mov	r8, r3
 80103dc:	0026      	movs	r6, r4
 80103de:	4691      	mov	r9, r2
 80103e0:	0fc9      	lsrs	r1, r1, #31
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	1a27      	subs	r7, r4, r0
 80103e6:	428a      	cmp	r2, r1
 80103e8:	d029      	beq.n	801043e <__aeabi_fadd+0x82>
 80103ea:	2f00      	cmp	r7, #0
 80103ec:	dd15      	ble.n	801041a <__aeabi_fadd+0x5e>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	d14a      	bne.n	8010488 <__aeabi_fadd+0xcc>
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d000      	beq.n	80103f8 <__aeabi_fadd+0x3c>
 80103f6:	e095      	b.n	8010524 <__aeabi_fadd+0x168>
 80103f8:	08ed      	lsrs	r5, r5, #3
 80103fa:	2cff      	cmp	r4, #255	; 0xff
 80103fc:	d100      	bne.n	8010400 <__aeabi_fadd+0x44>
 80103fe:	e088      	b.n	8010512 <__aeabi_fadd+0x156>
 8010400:	026b      	lsls	r3, r5, #9
 8010402:	0a5b      	lsrs	r3, r3, #9
 8010404:	b2e6      	uxtb	r6, r4
 8010406:	025b      	lsls	r3, r3, #9
 8010408:	05f6      	lsls	r6, r6, #23
 801040a:	0a58      	lsrs	r0, r3, #9
 801040c:	4330      	orrs	r0, r6
 801040e:	07d2      	lsls	r2, r2, #31
 8010410:	4310      	orrs	r0, r2
 8010412:	bc0c      	pop	{r2, r3}
 8010414:	4690      	mov	r8, r2
 8010416:	4699      	mov	r9, r3
 8010418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801041a:	2f00      	cmp	r7, #0
 801041c:	d000      	beq.n	8010420 <__aeabi_fadd+0x64>
 801041e:	e087      	b.n	8010530 <__aeabi_fadd+0x174>
 8010420:	1c60      	adds	r0, r4, #1
 8010422:	b2c0      	uxtb	r0, r0
 8010424:	2801      	cmp	r0, #1
 8010426:	dc00      	bgt.n	801042a <__aeabi_fadd+0x6e>
 8010428:	e0b6      	b.n	8010598 <__aeabi_fadd+0x1dc>
 801042a:	1aee      	subs	r6, r5, r3
 801042c:	0172      	lsls	r2, r6, #5
 801042e:	d500      	bpl.n	8010432 <__aeabi_fadd+0x76>
 8010430:	e0c5      	b.n	80105be <__aeabi_fadd+0x202>
 8010432:	2e00      	cmp	r6, #0
 8010434:	d13d      	bne.n	80104b2 <__aeabi_fadd+0xf6>
 8010436:	2200      	movs	r2, #0
 8010438:	2600      	movs	r6, #0
 801043a:	2300      	movs	r3, #0
 801043c:	e7e3      	b.n	8010406 <__aeabi_fadd+0x4a>
 801043e:	2f00      	cmp	r7, #0
 8010440:	dc00      	bgt.n	8010444 <__aeabi_fadd+0x88>
 8010442:	e096      	b.n	8010572 <__aeabi_fadd+0x1b6>
 8010444:	2800      	cmp	r0, #0
 8010446:	d05d      	beq.n	8010504 <__aeabi_fadd+0x148>
 8010448:	2cff      	cmp	r4, #255	; 0xff
 801044a:	d060      	beq.n	801050e <__aeabi_fadd+0x152>
 801044c:	2280      	movs	r2, #128	; 0x80
 801044e:	04d2      	lsls	r2, r2, #19
 8010450:	4313      	orrs	r3, r2
 8010452:	2f1b      	cmp	r7, #27
 8010454:	dd00      	ble.n	8010458 <__aeabi_fadd+0x9c>
 8010456:	e0ec      	b.n	8010632 <__aeabi_fadd+0x276>
 8010458:	2220      	movs	r2, #32
 801045a:	1bd2      	subs	r2, r2, r7
 801045c:	0018      	movs	r0, r3
 801045e:	4093      	lsls	r3, r2
 8010460:	40f8      	lsrs	r0, r7
 8010462:	1e5a      	subs	r2, r3, #1
 8010464:	4193      	sbcs	r3, r2
 8010466:	4303      	orrs	r3, r0
 8010468:	18ed      	adds	r5, r5, r3
 801046a:	016b      	lsls	r3, r5, #5
 801046c:	d57b      	bpl.n	8010566 <__aeabi_fadd+0x1aa>
 801046e:	3401      	adds	r4, #1
 8010470:	2cff      	cmp	r4, #255	; 0xff
 8010472:	d100      	bne.n	8010476 <__aeabi_fadd+0xba>
 8010474:	e0b7      	b.n	80105e6 <__aeabi_fadd+0x22a>
 8010476:	2201      	movs	r2, #1
 8010478:	2607      	movs	r6, #7
 801047a:	402a      	ands	r2, r5
 801047c:	086b      	lsrs	r3, r5, #1
 801047e:	4d9a      	ldr	r5, [pc, #616]	; (80106e8 <__aeabi_fadd+0x32c>)
 8010480:	401d      	ands	r5, r3
 8010482:	4315      	orrs	r5, r2
 8010484:	402e      	ands	r6, r5
 8010486:	e029      	b.n	80104dc <__aeabi_fadd+0x120>
 8010488:	2cff      	cmp	r4, #255	; 0xff
 801048a:	d0b5      	beq.n	80103f8 <__aeabi_fadd+0x3c>
 801048c:	2280      	movs	r2, #128	; 0x80
 801048e:	04d2      	lsls	r2, r2, #19
 8010490:	4313      	orrs	r3, r2
 8010492:	2f1b      	cmp	r7, #27
 8010494:	dd00      	ble.n	8010498 <__aeabi_fadd+0xdc>
 8010496:	e0b2      	b.n	80105fe <__aeabi_fadd+0x242>
 8010498:	2220      	movs	r2, #32
 801049a:	1bd2      	subs	r2, r2, r7
 801049c:	0019      	movs	r1, r3
 801049e:	4093      	lsls	r3, r2
 80104a0:	40f9      	lsrs	r1, r7
 80104a2:	1e5a      	subs	r2, r3, #1
 80104a4:	4193      	sbcs	r3, r2
 80104a6:	430b      	orrs	r3, r1
 80104a8:	1aed      	subs	r5, r5, r3
 80104aa:	016b      	lsls	r3, r5, #5
 80104ac:	d55b      	bpl.n	8010566 <__aeabi_fadd+0x1aa>
 80104ae:	01ad      	lsls	r5, r5, #6
 80104b0:	09ae      	lsrs	r6, r5, #6
 80104b2:	0030      	movs	r0, r6
 80104b4:	f000 fd24 	bl	8010f00 <__clzsi2>
 80104b8:	3805      	subs	r0, #5
 80104ba:	4086      	lsls	r6, r0
 80104bc:	4284      	cmp	r4, r0
 80104be:	dc65      	bgt.n	801058c <__aeabi_fadd+0x1d0>
 80104c0:	1b04      	subs	r4, r0, r4
 80104c2:	0033      	movs	r3, r6
 80104c4:	2020      	movs	r0, #32
 80104c6:	3401      	adds	r4, #1
 80104c8:	40e3      	lsrs	r3, r4
 80104ca:	1b04      	subs	r4, r0, r4
 80104cc:	40a6      	lsls	r6, r4
 80104ce:	1e75      	subs	r5, r6, #1
 80104d0:	41ae      	sbcs	r6, r5
 80104d2:	4333      	orrs	r3, r6
 80104d4:	2607      	movs	r6, #7
 80104d6:	001d      	movs	r5, r3
 80104d8:	2400      	movs	r4, #0
 80104da:	401e      	ands	r6, r3
 80104dc:	2201      	movs	r2, #1
 80104de:	464b      	mov	r3, r9
 80104e0:	401a      	ands	r2, r3
 80104e2:	2e00      	cmp	r6, #0
 80104e4:	d004      	beq.n	80104f0 <__aeabi_fadd+0x134>
 80104e6:	230f      	movs	r3, #15
 80104e8:	402b      	ands	r3, r5
 80104ea:	2b04      	cmp	r3, #4
 80104ec:	d000      	beq.n	80104f0 <__aeabi_fadd+0x134>
 80104ee:	3504      	adds	r5, #4
 80104f0:	016b      	lsls	r3, r5, #5
 80104f2:	d400      	bmi.n	80104f6 <__aeabi_fadd+0x13a>
 80104f4:	e780      	b.n	80103f8 <__aeabi_fadd+0x3c>
 80104f6:	3401      	adds	r4, #1
 80104f8:	b2e6      	uxtb	r6, r4
 80104fa:	2cff      	cmp	r4, #255	; 0xff
 80104fc:	d12f      	bne.n	801055e <__aeabi_fadd+0x1a2>
 80104fe:	26ff      	movs	r6, #255	; 0xff
 8010500:	2300      	movs	r3, #0
 8010502:	e780      	b.n	8010406 <__aeabi_fadd+0x4a>
 8010504:	2b00      	cmp	r3, #0
 8010506:	d152      	bne.n	80105ae <__aeabi_fadd+0x1f2>
 8010508:	2cff      	cmp	r4, #255	; 0xff
 801050a:	d000      	beq.n	801050e <__aeabi_fadd+0x152>
 801050c:	e774      	b.n	80103f8 <__aeabi_fadd+0x3c>
 801050e:	000a      	movs	r2, r1
 8010510:	08ed      	lsrs	r5, r5, #3
 8010512:	2d00      	cmp	r5, #0
 8010514:	d0f3      	beq.n	80104fe <__aeabi_fadd+0x142>
 8010516:	2380      	movs	r3, #128	; 0x80
 8010518:	03db      	lsls	r3, r3, #15
 801051a:	432b      	orrs	r3, r5
 801051c:	025b      	lsls	r3, r3, #9
 801051e:	0a5b      	lsrs	r3, r3, #9
 8010520:	26ff      	movs	r6, #255	; 0xff
 8010522:	e770      	b.n	8010406 <__aeabi_fadd+0x4a>
 8010524:	3f01      	subs	r7, #1
 8010526:	2f00      	cmp	r7, #0
 8010528:	d0be      	beq.n	80104a8 <__aeabi_fadd+0xec>
 801052a:	2cff      	cmp	r4, #255	; 0xff
 801052c:	d1b1      	bne.n	8010492 <__aeabi_fadd+0xd6>
 801052e:	e763      	b.n	80103f8 <__aeabi_fadd+0x3c>
 8010530:	2c00      	cmp	r4, #0
 8010532:	d047      	beq.n	80105c4 <__aeabi_fadd+0x208>
 8010534:	28ff      	cmp	r0, #255	; 0xff
 8010536:	d069      	beq.n	801060c <__aeabi_fadd+0x250>
 8010538:	2480      	movs	r4, #128	; 0x80
 801053a:	04e4      	lsls	r4, r4, #19
 801053c:	427a      	negs	r2, r7
 801053e:	4325      	orrs	r5, r4
 8010540:	2a1b      	cmp	r2, #27
 8010542:	dd00      	ble.n	8010546 <__aeabi_fadd+0x18a>
 8010544:	e0c5      	b.n	80106d2 <__aeabi_fadd+0x316>
 8010546:	002c      	movs	r4, r5
 8010548:	2620      	movs	r6, #32
 801054a:	40d4      	lsrs	r4, r2
 801054c:	1ab2      	subs	r2, r6, r2
 801054e:	4095      	lsls	r5, r2
 8010550:	1e6a      	subs	r2, r5, #1
 8010552:	4195      	sbcs	r5, r2
 8010554:	4325      	orrs	r5, r4
 8010556:	1b5d      	subs	r5, r3, r5
 8010558:	0004      	movs	r4, r0
 801055a:	4689      	mov	r9, r1
 801055c:	e7a5      	b.n	80104aa <__aeabi_fadd+0xee>
 801055e:	01ab      	lsls	r3, r5, #6
 8010560:	0a5b      	lsrs	r3, r3, #9
 8010562:	e750      	b.n	8010406 <__aeabi_fadd+0x4a>
 8010564:	2400      	movs	r4, #0
 8010566:	2201      	movs	r2, #1
 8010568:	464b      	mov	r3, r9
 801056a:	401a      	ands	r2, r3
 801056c:	076b      	lsls	r3, r5, #29
 801056e:	d1ba      	bne.n	80104e6 <__aeabi_fadd+0x12a>
 8010570:	e742      	b.n	80103f8 <__aeabi_fadd+0x3c>
 8010572:	2f00      	cmp	r7, #0
 8010574:	d13b      	bne.n	80105ee <__aeabi_fadd+0x232>
 8010576:	3401      	adds	r4, #1
 8010578:	b2e0      	uxtb	r0, r4
 801057a:	2801      	cmp	r0, #1
 801057c:	dd4a      	ble.n	8010614 <__aeabi_fadd+0x258>
 801057e:	2cff      	cmp	r4, #255	; 0xff
 8010580:	d0bd      	beq.n	80104fe <__aeabi_fadd+0x142>
 8010582:	2607      	movs	r6, #7
 8010584:	18ed      	adds	r5, r5, r3
 8010586:	086d      	lsrs	r5, r5, #1
 8010588:	402e      	ands	r6, r5
 801058a:	e7a7      	b.n	80104dc <__aeabi_fadd+0x120>
 801058c:	2307      	movs	r3, #7
 801058e:	4d57      	ldr	r5, [pc, #348]	; (80106ec <__aeabi_fadd+0x330>)
 8010590:	1a24      	subs	r4, r4, r0
 8010592:	4035      	ands	r5, r6
 8010594:	401e      	ands	r6, r3
 8010596:	e7a1      	b.n	80104dc <__aeabi_fadd+0x120>
 8010598:	2c00      	cmp	r4, #0
 801059a:	d11b      	bne.n	80105d4 <__aeabi_fadd+0x218>
 801059c:	2d00      	cmp	r5, #0
 801059e:	d16e      	bne.n	801067e <__aeabi_fadd+0x2c2>
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d100      	bne.n	80105a6 <__aeabi_fadd+0x1ea>
 80105a4:	e09a      	b.n	80106dc <__aeabi_fadd+0x320>
 80105a6:	000a      	movs	r2, r1
 80105a8:	001d      	movs	r5, r3
 80105aa:	003c      	movs	r4, r7
 80105ac:	e724      	b.n	80103f8 <__aeabi_fadd+0x3c>
 80105ae:	3f01      	subs	r7, #1
 80105b0:	2f00      	cmp	r7, #0
 80105b2:	d100      	bne.n	80105b6 <__aeabi_fadd+0x1fa>
 80105b4:	e758      	b.n	8010468 <__aeabi_fadd+0xac>
 80105b6:	2cff      	cmp	r4, #255	; 0xff
 80105b8:	d000      	beq.n	80105bc <__aeabi_fadd+0x200>
 80105ba:	e74a      	b.n	8010452 <__aeabi_fadd+0x96>
 80105bc:	e7a7      	b.n	801050e <__aeabi_fadd+0x152>
 80105be:	1b5e      	subs	r6, r3, r5
 80105c0:	4689      	mov	r9, r1
 80105c2:	e776      	b.n	80104b2 <__aeabi_fadd+0xf6>
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	d11c      	bne.n	8010602 <__aeabi_fadd+0x246>
 80105c8:	000a      	movs	r2, r1
 80105ca:	28ff      	cmp	r0, #255	; 0xff
 80105cc:	d01f      	beq.n	801060e <__aeabi_fadd+0x252>
 80105ce:	0004      	movs	r4, r0
 80105d0:	001d      	movs	r5, r3
 80105d2:	e711      	b.n	80103f8 <__aeabi_fadd+0x3c>
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	d15d      	bne.n	8010694 <__aeabi_fadd+0x2d8>
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d117      	bne.n	801060c <__aeabi_fadd+0x250>
 80105dc:	2380      	movs	r3, #128	; 0x80
 80105de:	2200      	movs	r2, #0
 80105e0:	03db      	lsls	r3, r3, #15
 80105e2:	26ff      	movs	r6, #255	; 0xff
 80105e4:	e70f      	b.n	8010406 <__aeabi_fadd+0x4a>
 80105e6:	000a      	movs	r2, r1
 80105e8:	26ff      	movs	r6, #255	; 0xff
 80105ea:	2300      	movs	r3, #0
 80105ec:	e70b      	b.n	8010406 <__aeabi_fadd+0x4a>
 80105ee:	2c00      	cmp	r4, #0
 80105f0:	d121      	bne.n	8010636 <__aeabi_fadd+0x27a>
 80105f2:	2d00      	cmp	r5, #0
 80105f4:	d166      	bne.n	80106c4 <__aeabi_fadd+0x308>
 80105f6:	28ff      	cmp	r0, #255	; 0xff
 80105f8:	d1e9      	bne.n	80105ce <__aeabi_fadd+0x212>
 80105fa:	001d      	movs	r5, r3
 80105fc:	e787      	b.n	801050e <__aeabi_fadd+0x152>
 80105fe:	2301      	movs	r3, #1
 8010600:	e752      	b.n	80104a8 <__aeabi_fadd+0xec>
 8010602:	1c7a      	adds	r2, r7, #1
 8010604:	d0a7      	beq.n	8010556 <__aeabi_fadd+0x19a>
 8010606:	43fa      	mvns	r2, r7
 8010608:	28ff      	cmp	r0, #255	; 0xff
 801060a:	d199      	bne.n	8010540 <__aeabi_fadd+0x184>
 801060c:	000a      	movs	r2, r1
 801060e:	001d      	movs	r5, r3
 8010610:	24ff      	movs	r4, #255	; 0xff
 8010612:	e6f1      	b.n	80103f8 <__aeabi_fadd+0x3c>
 8010614:	2e00      	cmp	r6, #0
 8010616:	d121      	bne.n	801065c <__aeabi_fadd+0x2a0>
 8010618:	2d00      	cmp	r5, #0
 801061a:	d04f      	beq.n	80106bc <__aeabi_fadd+0x300>
 801061c:	2b00      	cmp	r3, #0
 801061e:	d04c      	beq.n	80106ba <__aeabi_fadd+0x2fe>
 8010620:	18ed      	adds	r5, r5, r3
 8010622:	016b      	lsls	r3, r5, #5
 8010624:	d59e      	bpl.n	8010564 <__aeabi_fadd+0x1a8>
 8010626:	4b31      	ldr	r3, [pc, #196]	; (80106ec <__aeabi_fadd+0x330>)
 8010628:	3607      	adds	r6, #7
 801062a:	402e      	ands	r6, r5
 801062c:	2401      	movs	r4, #1
 801062e:	401d      	ands	r5, r3
 8010630:	e754      	b.n	80104dc <__aeabi_fadd+0x120>
 8010632:	2301      	movs	r3, #1
 8010634:	e718      	b.n	8010468 <__aeabi_fadd+0xac>
 8010636:	28ff      	cmp	r0, #255	; 0xff
 8010638:	d0df      	beq.n	80105fa <__aeabi_fadd+0x23e>
 801063a:	2480      	movs	r4, #128	; 0x80
 801063c:	04e4      	lsls	r4, r4, #19
 801063e:	427f      	negs	r7, r7
 8010640:	4325      	orrs	r5, r4
 8010642:	2f1b      	cmp	r7, #27
 8010644:	dc4d      	bgt.n	80106e2 <__aeabi_fadd+0x326>
 8010646:	2620      	movs	r6, #32
 8010648:	1bf6      	subs	r6, r6, r7
 801064a:	002c      	movs	r4, r5
 801064c:	40b5      	lsls	r5, r6
 801064e:	40fc      	lsrs	r4, r7
 8010650:	1e6a      	subs	r2, r5, #1
 8010652:	4195      	sbcs	r5, r2
 8010654:	4325      	orrs	r5, r4
 8010656:	18ed      	adds	r5, r5, r3
 8010658:	0004      	movs	r4, r0
 801065a:	e706      	b.n	801046a <__aeabi_fadd+0xae>
 801065c:	2d00      	cmp	r5, #0
 801065e:	d0cc      	beq.n	80105fa <__aeabi_fadd+0x23e>
 8010660:	2b00      	cmp	r3, #0
 8010662:	d100      	bne.n	8010666 <__aeabi_fadd+0x2aa>
 8010664:	e753      	b.n	801050e <__aeabi_fadd+0x152>
 8010666:	2180      	movs	r1, #128	; 0x80
 8010668:	4660      	mov	r0, ip
 801066a:	03c9      	lsls	r1, r1, #15
 801066c:	4208      	tst	r0, r1
 801066e:	d003      	beq.n	8010678 <__aeabi_fadd+0x2bc>
 8010670:	4640      	mov	r0, r8
 8010672:	4208      	tst	r0, r1
 8010674:	d100      	bne.n	8010678 <__aeabi_fadd+0x2bc>
 8010676:	001d      	movs	r5, r3
 8010678:	2101      	movs	r1, #1
 801067a:	4011      	ands	r1, r2
 801067c:	e747      	b.n	801050e <__aeabi_fadd+0x152>
 801067e:	2b00      	cmp	r3, #0
 8010680:	d100      	bne.n	8010684 <__aeabi_fadd+0x2c8>
 8010682:	e6b9      	b.n	80103f8 <__aeabi_fadd+0x3c>
 8010684:	1aea      	subs	r2, r5, r3
 8010686:	0150      	lsls	r0, r2, #5
 8010688:	d525      	bpl.n	80106d6 <__aeabi_fadd+0x31a>
 801068a:	2607      	movs	r6, #7
 801068c:	1b5d      	subs	r5, r3, r5
 801068e:	402e      	ands	r6, r5
 8010690:	4689      	mov	r9, r1
 8010692:	e723      	b.n	80104dc <__aeabi_fadd+0x120>
 8010694:	24ff      	movs	r4, #255	; 0xff
 8010696:	2b00      	cmp	r3, #0
 8010698:	d100      	bne.n	801069c <__aeabi_fadd+0x2e0>
 801069a:	e6ad      	b.n	80103f8 <__aeabi_fadd+0x3c>
 801069c:	2280      	movs	r2, #128	; 0x80
 801069e:	4660      	mov	r0, ip
 80106a0:	03d2      	lsls	r2, r2, #15
 80106a2:	4210      	tst	r0, r2
 80106a4:	d004      	beq.n	80106b0 <__aeabi_fadd+0x2f4>
 80106a6:	4640      	mov	r0, r8
 80106a8:	4210      	tst	r0, r2
 80106aa:	d101      	bne.n	80106b0 <__aeabi_fadd+0x2f4>
 80106ac:	001d      	movs	r5, r3
 80106ae:	4689      	mov	r9, r1
 80106b0:	2201      	movs	r2, #1
 80106b2:	464b      	mov	r3, r9
 80106b4:	24ff      	movs	r4, #255	; 0xff
 80106b6:	401a      	ands	r2, r3
 80106b8:	e69e      	b.n	80103f8 <__aeabi_fadd+0x3c>
 80106ba:	002b      	movs	r3, r5
 80106bc:	08dd      	lsrs	r5, r3, #3
 80106be:	000a      	movs	r2, r1
 80106c0:	2400      	movs	r4, #0
 80106c2:	e69d      	b.n	8010400 <__aeabi_fadd+0x44>
 80106c4:	1c7a      	adds	r2, r7, #1
 80106c6:	d0c6      	beq.n	8010656 <__aeabi_fadd+0x29a>
 80106c8:	43ff      	mvns	r7, r7
 80106ca:	28ff      	cmp	r0, #255	; 0xff
 80106cc:	d1b9      	bne.n	8010642 <__aeabi_fadd+0x286>
 80106ce:	001d      	movs	r5, r3
 80106d0:	e71d      	b.n	801050e <__aeabi_fadd+0x152>
 80106d2:	2501      	movs	r5, #1
 80106d4:	e73f      	b.n	8010556 <__aeabi_fadd+0x19a>
 80106d6:	1e15      	subs	r5, r2, #0
 80106d8:	d000      	beq.n	80106dc <__aeabi_fadd+0x320>
 80106da:	e744      	b.n	8010566 <__aeabi_fadd+0x1aa>
 80106dc:	2200      	movs	r2, #0
 80106de:	2300      	movs	r3, #0
 80106e0:	e691      	b.n	8010406 <__aeabi_fadd+0x4a>
 80106e2:	2501      	movs	r5, #1
 80106e4:	e7b7      	b.n	8010656 <__aeabi_fadd+0x29a>
 80106e6:	46c0      	nop			; (mov r8, r8)
 80106e8:	7dffffff 	.word	0x7dffffff
 80106ec:	fbffffff 	.word	0xfbffffff

080106f0 <__aeabi_fdiv>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	4657      	mov	r7, sl
 80106f4:	464e      	mov	r6, r9
 80106f6:	4645      	mov	r5, r8
 80106f8:	46de      	mov	lr, fp
 80106fa:	0244      	lsls	r4, r0, #9
 80106fc:	b5e0      	push	{r5, r6, r7, lr}
 80106fe:	0046      	lsls	r6, r0, #1
 8010700:	4688      	mov	r8, r1
 8010702:	0a64      	lsrs	r4, r4, #9
 8010704:	0e36      	lsrs	r6, r6, #24
 8010706:	0fc7      	lsrs	r7, r0, #31
 8010708:	2e00      	cmp	r6, #0
 801070a:	d063      	beq.n	80107d4 <__aeabi_fdiv+0xe4>
 801070c:	2eff      	cmp	r6, #255	; 0xff
 801070e:	d024      	beq.n	801075a <__aeabi_fdiv+0x6a>
 8010710:	2380      	movs	r3, #128	; 0x80
 8010712:	00e4      	lsls	r4, r4, #3
 8010714:	04db      	lsls	r3, r3, #19
 8010716:	431c      	orrs	r4, r3
 8010718:	2300      	movs	r3, #0
 801071a:	4699      	mov	r9, r3
 801071c:	469b      	mov	fp, r3
 801071e:	3e7f      	subs	r6, #127	; 0x7f
 8010720:	4643      	mov	r3, r8
 8010722:	4642      	mov	r2, r8
 8010724:	025d      	lsls	r5, r3, #9
 8010726:	0fd2      	lsrs	r2, r2, #31
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	0a6d      	lsrs	r5, r5, #9
 801072c:	0e1b      	lsrs	r3, r3, #24
 801072e:	4690      	mov	r8, r2
 8010730:	4692      	mov	sl, r2
 8010732:	d065      	beq.n	8010800 <__aeabi_fdiv+0x110>
 8010734:	2bff      	cmp	r3, #255	; 0xff
 8010736:	d055      	beq.n	80107e4 <__aeabi_fdiv+0xf4>
 8010738:	2280      	movs	r2, #128	; 0x80
 801073a:	2100      	movs	r1, #0
 801073c:	00ed      	lsls	r5, r5, #3
 801073e:	04d2      	lsls	r2, r2, #19
 8010740:	3b7f      	subs	r3, #127	; 0x7f
 8010742:	4315      	orrs	r5, r2
 8010744:	1af6      	subs	r6, r6, r3
 8010746:	4643      	mov	r3, r8
 8010748:	464a      	mov	r2, r9
 801074a:	407b      	eors	r3, r7
 801074c:	2a0f      	cmp	r2, #15
 801074e:	d900      	bls.n	8010752 <__aeabi_fdiv+0x62>
 8010750:	e08d      	b.n	801086e <__aeabi_fdiv+0x17e>
 8010752:	486d      	ldr	r0, [pc, #436]	; (8010908 <__aeabi_fdiv+0x218>)
 8010754:	0092      	lsls	r2, r2, #2
 8010756:	5882      	ldr	r2, [r0, r2]
 8010758:	4697      	mov	pc, r2
 801075a:	2c00      	cmp	r4, #0
 801075c:	d154      	bne.n	8010808 <__aeabi_fdiv+0x118>
 801075e:	2308      	movs	r3, #8
 8010760:	4699      	mov	r9, r3
 8010762:	3b06      	subs	r3, #6
 8010764:	26ff      	movs	r6, #255	; 0xff
 8010766:	469b      	mov	fp, r3
 8010768:	e7da      	b.n	8010720 <__aeabi_fdiv+0x30>
 801076a:	2500      	movs	r5, #0
 801076c:	4653      	mov	r3, sl
 801076e:	2902      	cmp	r1, #2
 8010770:	d01b      	beq.n	80107aa <__aeabi_fdiv+0xba>
 8010772:	2903      	cmp	r1, #3
 8010774:	d100      	bne.n	8010778 <__aeabi_fdiv+0x88>
 8010776:	e0bf      	b.n	80108f8 <__aeabi_fdiv+0x208>
 8010778:	2901      	cmp	r1, #1
 801077a:	d028      	beq.n	80107ce <__aeabi_fdiv+0xde>
 801077c:	0030      	movs	r0, r6
 801077e:	307f      	adds	r0, #127	; 0x7f
 8010780:	2800      	cmp	r0, #0
 8010782:	dd20      	ble.n	80107c6 <__aeabi_fdiv+0xd6>
 8010784:	076a      	lsls	r2, r5, #29
 8010786:	d004      	beq.n	8010792 <__aeabi_fdiv+0xa2>
 8010788:	220f      	movs	r2, #15
 801078a:	402a      	ands	r2, r5
 801078c:	2a04      	cmp	r2, #4
 801078e:	d000      	beq.n	8010792 <__aeabi_fdiv+0xa2>
 8010790:	3504      	adds	r5, #4
 8010792:	012a      	lsls	r2, r5, #4
 8010794:	d503      	bpl.n	801079e <__aeabi_fdiv+0xae>
 8010796:	0030      	movs	r0, r6
 8010798:	4a5c      	ldr	r2, [pc, #368]	; (801090c <__aeabi_fdiv+0x21c>)
 801079a:	3080      	adds	r0, #128	; 0x80
 801079c:	4015      	ands	r5, r2
 801079e:	28fe      	cmp	r0, #254	; 0xfe
 80107a0:	dc03      	bgt.n	80107aa <__aeabi_fdiv+0xba>
 80107a2:	01ac      	lsls	r4, r5, #6
 80107a4:	0a64      	lsrs	r4, r4, #9
 80107a6:	b2c2      	uxtb	r2, r0
 80107a8:	e001      	b.n	80107ae <__aeabi_fdiv+0xbe>
 80107aa:	22ff      	movs	r2, #255	; 0xff
 80107ac:	2400      	movs	r4, #0
 80107ae:	0264      	lsls	r4, r4, #9
 80107b0:	05d2      	lsls	r2, r2, #23
 80107b2:	0a60      	lsrs	r0, r4, #9
 80107b4:	07db      	lsls	r3, r3, #31
 80107b6:	4310      	orrs	r0, r2
 80107b8:	4318      	orrs	r0, r3
 80107ba:	bc3c      	pop	{r2, r3, r4, r5}
 80107bc:	4690      	mov	r8, r2
 80107be:	4699      	mov	r9, r3
 80107c0:	46a2      	mov	sl, r4
 80107c2:	46ab      	mov	fp, r5
 80107c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107c6:	2201      	movs	r2, #1
 80107c8:	1a10      	subs	r0, r2, r0
 80107ca:	281b      	cmp	r0, #27
 80107cc:	dd7c      	ble.n	80108c8 <__aeabi_fdiv+0x1d8>
 80107ce:	2200      	movs	r2, #0
 80107d0:	2400      	movs	r4, #0
 80107d2:	e7ec      	b.n	80107ae <__aeabi_fdiv+0xbe>
 80107d4:	2c00      	cmp	r4, #0
 80107d6:	d11d      	bne.n	8010814 <__aeabi_fdiv+0x124>
 80107d8:	2304      	movs	r3, #4
 80107da:	4699      	mov	r9, r3
 80107dc:	3b03      	subs	r3, #3
 80107de:	2600      	movs	r6, #0
 80107e0:	469b      	mov	fp, r3
 80107e2:	e79d      	b.n	8010720 <__aeabi_fdiv+0x30>
 80107e4:	3eff      	subs	r6, #255	; 0xff
 80107e6:	2d00      	cmp	r5, #0
 80107e8:	d120      	bne.n	801082c <__aeabi_fdiv+0x13c>
 80107ea:	2102      	movs	r1, #2
 80107ec:	4643      	mov	r3, r8
 80107ee:	464a      	mov	r2, r9
 80107f0:	407b      	eors	r3, r7
 80107f2:	430a      	orrs	r2, r1
 80107f4:	2a0f      	cmp	r2, #15
 80107f6:	d8d8      	bhi.n	80107aa <__aeabi_fdiv+0xba>
 80107f8:	4845      	ldr	r0, [pc, #276]	; (8010910 <__aeabi_fdiv+0x220>)
 80107fa:	0092      	lsls	r2, r2, #2
 80107fc:	5882      	ldr	r2, [r0, r2]
 80107fe:	4697      	mov	pc, r2
 8010800:	2d00      	cmp	r5, #0
 8010802:	d119      	bne.n	8010838 <__aeabi_fdiv+0x148>
 8010804:	2101      	movs	r1, #1
 8010806:	e7f1      	b.n	80107ec <__aeabi_fdiv+0xfc>
 8010808:	230c      	movs	r3, #12
 801080a:	4699      	mov	r9, r3
 801080c:	3b09      	subs	r3, #9
 801080e:	26ff      	movs	r6, #255	; 0xff
 8010810:	469b      	mov	fp, r3
 8010812:	e785      	b.n	8010720 <__aeabi_fdiv+0x30>
 8010814:	0020      	movs	r0, r4
 8010816:	f000 fb73 	bl	8010f00 <__clzsi2>
 801081a:	2676      	movs	r6, #118	; 0x76
 801081c:	1f43      	subs	r3, r0, #5
 801081e:	409c      	lsls	r4, r3
 8010820:	2300      	movs	r3, #0
 8010822:	4276      	negs	r6, r6
 8010824:	1a36      	subs	r6, r6, r0
 8010826:	4699      	mov	r9, r3
 8010828:	469b      	mov	fp, r3
 801082a:	e779      	b.n	8010720 <__aeabi_fdiv+0x30>
 801082c:	464a      	mov	r2, r9
 801082e:	2303      	movs	r3, #3
 8010830:	431a      	orrs	r2, r3
 8010832:	4691      	mov	r9, r2
 8010834:	2103      	movs	r1, #3
 8010836:	e786      	b.n	8010746 <__aeabi_fdiv+0x56>
 8010838:	0028      	movs	r0, r5
 801083a:	f000 fb61 	bl	8010f00 <__clzsi2>
 801083e:	1f43      	subs	r3, r0, #5
 8010840:	1836      	adds	r6, r6, r0
 8010842:	409d      	lsls	r5, r3
 8010844:	3676      	adds	r6, #118	; 0x76
 8010846:	2100      	movs	r1, #0
 8010848:	e77d      	b.n	8010746 <__aeabi_fdiv+0x56>
 801084a:	2480      	movs	r4, #128	; 0x80
 801084c:	2300      	movs	r3, #0
 801084e:	03e4      	lsls	r4, r4, #15
 8010850:	22ff      	movs	r2, #255	; 0xff
 8010852:	e7ac      	b.n	80107ae <__aeabi_fdiv+0xbe>
 8010854:	2500      	movs	r5, #0
 8010856:	2380      	movs	r3, #128	; 0x80
 8010858:	03db      	lsls	r3, r3, #15
 801085a:	421c      	tst	r4, r3
 801085c:	d028      	beq.n	80108b0 <__aeabi_fdiv+0x1c0>
 801085e:	421d      	tst	r5, r3
 8010860:	d126      	bne.n	80108b0 <__aeabi_fdiv+0x1c0>
 8010862:	432b      	orrs	r3, r5
 8010864:	025c      	lsls	r4, r3, #9
 8010866:	0a64      	lsrs	r4, r4, #9
 8010868:	4643      	mov	r3, r8
 801086a:	22ff      	movs	r2, #255	; 0xff
 801086c:	e79f      	b.n	80107ae <__aeabi_fdiv+0xbe>
 801086e:	0162      	lsls	r2, r4, #5
 8010870:	016c      	lsls	r4, r5, #5
 8010872:	42a2      	cmp	r2, r4
 8010874:	d224      	bcs.n	80108c0 <__aeabi_fdiv+0x1d0>
 8010876:	211b      	movs	r1, #27
 8010878:	2500      	movs	r5, #0
 801087a:	3e01      	subs	r6, #1
 801087c:	2701      	movs	r7, #1
 801087e:	0010      	movs	r0, r2
 8010880:	006d      	lsls	r5, r5, #1
 8010882:	0052      	lsls	r2, r2, #1
 8010884:	2800      	cmp	r0, #0
 8010886:	db01      	blt.n	801088c <__aeabi_fdiv+0x19c>
 8010888:	4294      	cmp	r4, r2
 801088a:	d801      	bhi.n	8010890 <__aeabi_fdiv+0x1a0>
 801088c:	1b12      	subs	r2, r2, r4
 801088e:	433d      	orrs	r5, r7
 8010890:	3901      	subs	r1, #1
 8010892:	2900      	cmp	r1, #0
 8010894:	d1f3      	bne.n	801087e <__aeabi_fdiv+0x18e>
 8010896:	0014      	movs	r4, r2
 8010898:	1e62      	subs	r2, r4, #1
 801089a:	4194      	sbcs	r4, r2
 801089c:	4325      	orrs	r5, r4
 801089e:	e76d      	b.n	801077c <__aeabi_fdiv+0x8c>
 80108a0:	46ba      	mov	sl, r7
 80108a2:	4659      	mov	r1, fp
 80108a4:	0025      	movs	r5, r4
 80108a6:	4653      	mov	r3, sl
 80108a8:	2902      	cmp	r1, #2
 80108aa:	d000      	beq.n	80108ae <__aeabi_fdiv+0x1be>
 80108ac:	e761      	b.n	8010772 <__aeabi_fdiv+0x82>
 80108ae:	e77c      	b.n	80107aa <__aeabi_fdiv+0xba>
 80108b0:	2380      	movs	r3, #128	; 0x80
 80108b2:	03db      	lsls	r3, r3, #15
 80108b4:	431c      	orrs	r4, r3
 80108b6:	0264      	lsls	r4, r4, #9
 80108b8:	0a64      	lsrs	r4, r4, #9
 80108ba:	003b      	movs	r3, r7
 80108bc:	22ff      	movs	r2, #255	; 0xff
 80108be:	e776      	b.n	80107ae <__aeabi_fdiv+0xbe>
 80108c0:	1b12      	subs	r2, r2, r4
 80108c2:	211a      	movs	r1, #26
 80108c4:	2501      	movs	r5, #1
 80108c6:	e7d9      	b.n	801087c <__aeabi_fdiv+0x18c>
 80108c8:	369e      	adds	r6, #158	; 0x9e
 80108ca:	002a      	movs	r2, r5
 80108cc:	40b5      	lsls	r5, r6
 80108ce:	002c      	movs	r4, r5
 80108d0:	40c2      	lsrs	r2, r0
 80108d2:	1e65      	subs	r5, r4, #1
 80108d4:	41ac      	sbcs	r4, r5
 80108d6:	4314      	orrs	r4, r2
 80108d8:	0762      	lsls	r2, r4, #29
 80108da:	d004      	beq.n	80108e6 <__aeabi_fdiv+0x1f6>
 80108dc:	220f      	movs	r2, #15
 80108de:	4022      	ands	r2, r4
 80108e0:	2a04      	cmp	r2, #4
 80108e2:	d000      	beq.n	80108e6 <__aeabi_fdiv+0x1f6>
 80108e4:	3404      	adds	r4, #4
 80108e6:	0162      	lsls	r2, r4, #5
 80108e8:	d403      	bmi.n	80108f2 <__aeabi_fdiv+0x202>
 80108ea:	01a4      	lsls	r4, r4, #6
 80108ec:	0a64      	lsrs	r4, r4, #9
 80108ee:	2200      	movs	r2, #0
 80108f0:	e75d      	b.n	80107ae <__aeabi_fdiv+0xbe>
 80108f2:	2201      	movs	r2, #1
 80108f4:	2400      	movs	r4, #0
 80108f6:	e75a      	b.n	80107ae <__aeabi_fdiv+0xbe>
 80108f8:	2480      	movs	r4, #128	; 0x80
 80108fa:	03e4      	lsls	r4, r4, #15
 80108fc:	432c      	orrs	r4, r5
 80108fe:	0264      	lsls	r4, r4, #9
 8010900:	0a64      	lsrs	r4, r4, #9
 8010902:	22ff      	movs	r2, #255	; 0xff
 8010904:	e753      	b.n	80107ae <__aeabi_fdiv+0xbe>
 8010906:	46c0      	nop			; (mov r8, r8)
 8010908:	0801cabc 	.word	0x0801cabc
 801090c:	f7ffffff 	.word	0xf7ffffff
 8010910:	0801cafc 	.word	0x0801cafc

08010914 <__aeabi_fmul>:
 8010914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010916:	464e      	mov	r6, r9
 8010918:	4657      	mov	r7, sl
 801091a:	4645      	mov	r5, r8
 801091c:	46de      	mov	lr, fp
 801091e:	b5e0      	push	{r5, r6, r7, lr}
 8010920:	0243      	lsls	r3, r0, #9
 8010922:	0a5b      	lsrs	r3, r3, #9
 8010924:	0045      	lsls	r5, r0, #1
 8010926:	b083      	sub	sp, #12
 8010928:	1c0f      	adds	r7, r1, #0
 801092a:	4699      	mov	r9, r3
 801092c:	0e2d      	lsrs	r5, r5, #24
 801092e:	0fc6      	lsrs	r6, r0, #31
 8010930:	2d00      	cmp	r5, #0
 8010932:	d057      	beq.n	80109e4 <__aeabi_fmul+0xd0>
 8010934:	2dff      	cmp	r5, #255	; 0xff
 8010936:	d024      	beq.n	8010982 <__aeabi_fmul+0x6e>
 8010938:	2080      	movs	r0, #128	; 0x80
 801093a:	00db      	lsls	r3, r3, #3
 801093c:	04c0      	lsls	r0, r0, #19
 801093e:	4318      	orrs	r0, r3
 8010940:	2300      	movs	r3, #0
 8010942:	4681      	mov	r9, r0
 8010944:	469a      	mov	sl, r3
 8010946:	469b      	mov	fp, r3
 8010948:	3d7f      	subs	r5, #127	; 0x7f
 801094a:	027c      	lsls	r4, r7, #9
 801094c:	007a      	lsls	r2, r7, #1
 801094e:	0ffb      	lsrs	r3, r7, #31
 8010950:	0a64      	lsrs	r4, r4, #9
 8010952:	0e12      	lsrs	r2, r2, #24
 8010954:	4698      	mov	r8, r3
 8010956:	d023      	beq.n	80109a0 <__aeabi_fmul+0x8c>
 8010958:	2aff      	cmp	r2, #255	; 0xff
 801095a:	d04b      	beq.n	80109f4 <__aeabi_fmul+0xe0>
 801095c:	00e3      	lsls	r3, r4, #3
 801095e:	2480      	movs	r4, #128	; 0x80
 8010960:	2000      	movs	r0, #0
 8010962:	04e4      	lsls	r4, r4, #19
 8010964:	3a7f      	subs	r2, #127	; 0x7f
 8010966:	431c      	orrs	r4, r3
 8010968:	18ad      	adds	r5, r5, r2
 801096a:	1c6b      	adds	r3, r5, #1
 801096c:	4647      	mov	r7, r8
 801096e:	9301      	str	r3, [sp, #4]
 8010970:	4653      	mov	r3, sl
 8010972:	4077      	eors	r7, r6
 8010974:	003a      	movs	r2, r7
 8010976:	2b0f      	cmp	r3, #15
 8010978:	d848      	bhi.n	8010a0c <__aeabi_fmul+0xf8>
 801097a:	497d      	ldr	r1, [pc, #500]	; (8010b70 <__aeabi_fmul+0x25c>)
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	58cb      	ldr	r3, [r1, r3]
 8010980:	469f      	mov	pc, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d000      	beq.n	8010988 <__aeabi_fmul+0x74>
 8010986:	e085      	b.n	8010a94 <__aeabi_fmul+0x180>
 8010988:	3308      	adds	r3, #8
 801098a:	469a      	mov	sl, r3
 801098c:	3b06      	subs	r3, #6
 801098e:	469b      	mov	fp, r3
 8010990:	027c      	lsls	r4, r7, #9
 8010992:	007a      	lsls	r2, r7, #1
 8010994:	0ffb      	lsrs	r3, r7, #31
 8010996:	25ff      	movs	r5, #255	; 0xff
 8010998:	0a64      	lsrs	r4, r4, #9
 801099a:	0e12      	lsrs	r2, r2, #24
 801099c:	4698      	mov	r8, r3
 801099e:	d1db      	bne.n	8010958 <__aeabi_fmul+0x44>
 80109a0:	2c00      	cmp	r4, #0
 80109a2:	d000      	beq.n	80109a6 <__aeabi_fmul+0x92>
 80109a4:	e090      	b.n	8010ac8 <__aeabi_fmul+0x1b4>
 80109a6:	4652      	mov	r2, sl
 80109a8:	2301      	movs	r3, #1
 80109aa:	431a      	orrs	r2, r3
 80109ac:	4692      	mov	sl, r2
 80109ae:	2001      	movs	r0, #1
 80109b0:	e7db      	b.n	801096a <__aeabi_fmul+0x56>
 80109b2:	464c      	mov	r4, r9
 80109b4:	4658      	mov	r0, fp
 80109b6:	0017      	movs	r7, r2
 80109b8:	2802      	cmp	r0, #2
 80109ba:	d024      	beq.n	8010a06 <__aeabi_fmul+0xf2>
 80109bc:	2803      	cmp	r0, #3
 80109be:	d100      	bne.n	80109c2 <__aeabi_fmul+0xae>
 80109c0:	e0cf      	b.n	8010b62 <__aeabi_fmul+0x24e>
 80109c2:	2200      	movs	r2, #0
 80109c4:	2300      	movs	r3, #0
 80109c6:	2801      	cmp	r0, #1
 80109c8:	d14d      	bne.n	8010a66 <__aeabi_fmul+0x152>
 80109ca:	0258      	lsls	r0, r3, #9
 80109cc:	05d2      	lsls	r2, r2, #23
 80109ce:	0a40      	lsrs	r0, r0, #9
 80109d0:	07ff      	lsls	r7, r7, #31
 80109d2:	4310      	orrs	r0, r2
 80109d4:	4338      	orrs	r0, r7
 80109d6:	b003      	add	sp, #12
 80109d8:	bc3c      	pop	{r2, r3, r4, r5}
 80109da:	4690      	mov	r8, r2
 80109dc:	4699      	mov	r9, r3
 80109de:	46a2      	mov	sl, r4
 80109e0:	46ab      	mov	fp, r5
 80109e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d15b      	bne.n	8010aa0 <__aeabi_fmul+0x18c>
 80109e8:	2304      	movs	r3, #4
 80109ea:	469a      	mov	sl, r3
 80109ec:	3b03      	subs	r3, #3
 80109ee:	2500      	movs	r5, #0
 80109f0:	469b      	mov	fp, r3
 80109f2:	e7aa      	b.n	801094a <__aeabi_fmul+0x36>
 80109f4:	35ff      	adds	r5, #255	; 0xff
 80109f6:	2c00      	cmp	r4, #0
 80109f8:	d160      	bne.n	8010abc <__aeabi_fmul+0x1a8>
 80109fa:	4652      	mov	r2, sl
 80109fc:	2302      	movs	r3, #2
 80109fe:	431a      	orrs	r2, r3
 8010a00:	4692      	mov	sl, r2
 8010a02:	2002      	movs	r0, #2
 8010a04:	e7b1      	b.n	801096a <__aeabi_fmul+0x56>
 8010a06:	22ff      	movs	r2, #255	; 0xff
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e7de      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010a0c:	464b      	mov	r3, r9
 8010a0e:	0c1b      	lsrs	r3, r3, #16
 8010a10:	469c      	mov	ip, r3
 8010a12:	464b      	mov	r3, r9
 8010a14:	0426      	lsls	r6, r4, #16
 8010a16:	0c36      	lsrs	r6, r6, #16
 8010a18:	0418      	lsls	r0, r3, #16
 8010a1a:	4661      	mov	r1, ip
 8010a1c:	0033      	movs	r3, r6
 8010a1e:	0c22      	lsrs	r2, r4, #16
 8010a20:	4664      	mov	r4, ip
 8010a22:	0c00      	lsrs	r0, r0, #16
 8010a24:	4343      	muls	r3, r0
 8010a26:	434e      	muls	r6, r1
 8010a28:	4350      	muls	r0, r2
 8010a2a:	4354      	muls	r4, r2
 8010a2c:	1980      	adds	r0, r0, r6
 8010a2e:	0c1a      	lsrs	r2, r3, #16
 8010a30:	1812      	adds	r2, r2, r0
 8010a32:	4296      	cmp	r6, r2
 8010a34:	d903      	bls.n	8010a3e <__aeabi_fmul+0x12a>
 8010a36:	2180      	movs	r1, #128	; 0x80
 8010a38:	0249      	lsls	r1, r1, #9
 8010a3a:	468c      	mov	ip, r1
 8010a3c:	4464      	add	r4, ip
 8010a3e:	041b      	lsls	r3, r3, #16
 8010a40:	0c1b      	lsrs	r3, r3, #16
 8010a42:	0410      	lsls	r0, r2, #16
 8010a44:	18c0      	adds	r0, r0, r3
 8010a46:	0183      	lsls	r3, r0, #6
 8010a48:	1e5e      	subs	r6, r3, #1
 8010a4a:	41b3      	sbcs	r3, r6
 8010a4c:	0e80      	lsrs	r0, r0, #26
 8010a4e:	4318      	orrs	r0, r3
 8010a50:	0c13      	lsrs	r3, r2, #16
 8010a52:	191b      	adds	r3, r3, r4
 8010a54:	019b      	lsls	r3, r3, #6
 8010a56:	4303      	orrs	r3, r0
 8010a58:	001c      	movs	r4, r3
 8010a5a:	0123      	lsls	r3, r4, #4
 8010a5c:	d579      	bpl.n	8010b52 <__aeabi_fmul+0x23e>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	0862      	lsrs	r2, r4, #1
 8010a62:	401c      	ands	r4, r3
 8010a64:	4314      	orrs	r4, r2
 8010a66:	9a01      	ldr	r2, [sp, #4]
 8010a68:	327f      	adds	r2, #127	; 0x7f
 8010a6a:	2a00      	cmp	r2, #0
 8010a6c:	dd4d      	ble.n	8010b0a <__aeabi_fmul+0x1f6>
 8010a6e:	0763      	lsls	r3, r4, #29
 8010a70:	d004      	beq.n	8010a7c <__aeabi_fmul+0x168>
 8010a72:	230f      	movs	r3, #15
 8010a74:	4023      	ands	r3, r4
 8010a76:	2b04      	cmp	r3, #4
 8010a78:	d000      	beq.n	8010a7c <__aeabi_fmul+0x168>
 8010a7a:	3404      	adds	r4, #4
 8010a7c:	0123      	lsls	r3, r4, #4
 8010a7e:	d503      	bpl.n	8010a88 <__aeabi_fmul+0x174>
 8010a80:	4b3c      	ldr	r3, [pc, #240]	; (8010b74 <__aeabi_fmul+0x260>)
 8010a82:	9a01      	ldr	r2, [sp, #4]
 8010a84:	401c      	ands	r4, r3
 8010a86:	3280      	adds	r2, #128	; 0x80
 8010a88:	2afe      	cmp	r2, #254	; 0xfe
 8010a8a:	dcbc      	bgt.n	8010a06 <__aeabi_fmul+0xf2>
 8010a8c:	01a3      	lsls	r3, r4, #6
 8010a8e:	0a5b      	lsrs	r3, r3, #9
 8010a90:	b2d2      	uxtb	r2, r2
 8010a92:	e79a      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010a94:	230c      	movs	r3, #12
 8010a96:	469a      	mov	sl, r3
 8010a98:	3b09      	subs	r3, #9
 8010a9a:	25ff      	movs	r5, #255	; 0xff
 8010a9c:	469b      	mov	fp, r3
 8010a9e:	e754      	b.n	801094a <__aeabi_fmul+0x36>
 8010aa0:	0018      	movs	r0, r3
 8010aa2:	f000 fa2d 	bl	8010f00 <__clzsi2>
 8010aa6:	464a      	mov	r2, r9
 8010aa8:	1f43      	subs	r3, r0, #5
 8010aaa:	2576      	movs	r5, #118	; 0x76
 8010aac:	409a      	lsls	r2, r3
 8010aae:	2300      	movs	r3, #0
 8010ab0:	426d      	negs	r5, r5
 8010ab2:	4691      	mov	r9, r2
 8010ab4:	1a2d      	subs	r5, r5, r0
 8010ab6:	469a      	mov	sl, r3
 8010ab8:	469b      	mov	fp, r3
 8010aba:	e746      	b.n	801094a <__aeabi_fmul+0x36>
 8010abc:	4652      	mov	r2, sl
 8010abe:	2303      	movs	r3, #3
 8010ac0:	431a      	orrs	r2, r3
 8010ac2:	4692      	mov	sl, r2
 8010ac4:	2003      	movs	r0, #3
 8010ac6:	e750      	b.n	801096a <__aeabi_fmul+0x56>
 8010ac8:	0020      	movs	r0, r4
 8010aca:	f000 fa19 	bl	8010f00 <__clzsi2>
 8010ace:	1f43      	subs	r3, r0, #5
 8010ad0:	1a2d      	subs	r5, r5, r0
 8010ad2:	409c      	lsls	r4, r3
 8010ad4:	3d76      	subs	r5, #118	; 0x76
 8010ad6:	2000      	movs	r0, #0
 8010ad8:	e747      	b.n	801096a <__aeabi_fmul+0x56>
 8010ada:	2380      	movs	r3, #128	; 0x80
 8010adc:	2700      	movs	r7, #0
 8010ade:	03db      	lsls	r3, r3, #15
 8010ae0:	22ff      	movs	r2, #255	; 0xff
 8010ae2:	e772      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010ae4:	4642      	mov	r2, r8
 8010ae6:	e766      	b.n	80109b6 <__aeabi_fmul+0xa2>
 8010ae8:	464c      	mov	r4, r9
 8010aea:	0032      	movs	r2, r6
 8010aec:	4658      	mov	r0, fp
 8010aee:	e762      	b.n	80109b6 <__aeabi_fmul+0xa2>
 8010af0:	2380      	movs	r3, #128	; 0x80
 8010af2:	464a      	mov	r2, r9
 8010af4:	03db      	lsls	r3, r3, #15
 8010af6:	421a      	tst	r2, r3
 8010af8:	d022      	beq.n	8010b40 <__aeabi_fmul+0x22c>
 8010afa:	421c      	tst	r4, r3
 8010afc:	d120      	bne.n	8010b40 <__aeabi_fmul+0x22c>
 8010afe:	4323      	orrs	r3, r4
 8010b00:	025b      	lsls	r3, r3, #9
 8010b02:	0a5b      	lsrs	r3, r3, #9
 8010b04:	4647      	mov	r7, r8
 8010b06:	22ff      	movs	r2, #255	; 0xff
 8010b08:	e75f      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	1a9a      	subs	r2, r3, r2
 8010b0e:	2a1b      	cmp	r2, #27
 8010b10:	dc21      	bgt.n	8010b56 <__aeabi_fmul+0x242>
 8010b12:	0023      	movs	r3, r4
 8010b14:	9901      	ldr	r1, [sp, #4]
 8010b16:	40d3      	lsrs	r3, r2
 8010b18:	319e      	adds	r1, #158	; 0x9e
 8010b1a:	408c      	lsls	r4, r1
 8010b1c:	001a      	movs	r2, r3
 8010b1e:	0023      	movs	r3, r4
 8010b20:	1e5c      	subs	r4, r3, #1
 8010b22:	41a3      	sbcs	r3, r4
 8010b24:	4313      	orrs	r3, r2
 8010b26:	075a      	lsls	r2, r3, #29
 8010b28:	d004      	beq.n	8010b34 <__aeabi_fmul+0x220>
 8010b2a:	220f      	movs	r2, #15
 8010b2c:	401a      	ands	r2, r3
 8010b2e:	2a04      	cmp	r2, #4
 8010b30:	d000      	beq.n	8010b34 <__aeabi_fmul+0x220>
 8010b32:	3304      	adds	r3, #4
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	d411      	bmi.n	8010b5c <__aeabi_fmul+0x248>
 8010b38:	019b      	lsls	r3, r3, #6
 8010b3a:	0a5b      	lsrs	r3, r3, #9
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	e744      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b40:	2380      	movs	r3, #128	; 0x80
 8010b42:	464a      	mov	r2, r9
 8010b44:	03db      	lsls	r3, r3, #15
 8010b46:	4313      	orrs	r3, r2
 8010b48:	025b      	lsls	r3, r3, #9
 8010b4a:	0a5b      	lsrs	r3, r3, #9
 8010b4c:	0037      	movs	r7, r6
 8010b4e:	22ff      	movs	r2, #255	; 0xff
 8010b50:	e73b      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b52:	9501      	str	r5, [sp, #4]
 8010b54:	e787      	b.n	8010a66 <__aeabi_fmul+0x152>
 8010b56:	2200      	movs	r2, #0
 8010b58:	2300      	movs	r3, #0
 8010b5a:	e736      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e733      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b62:	2380      	movs	r3, #128	; 0x80
 8010b64:	03db      	lsls	r3, r3, #15
 8010b66:	4323      	orrs	r3, r4
 8010b68:	025b      	lsls	r3, r3, #9
 8010b6a:	0a5b      	lsrs	r3, r3, #9
 8010b6c:	22ff      	movs	r2, #255	; 0xff
 8010b6e:	e72c      	b.n	80109ca <__aeabi_fmul+0xb6>
 8010b70:	0801cb3c 	.word	0x0801cb3c
 8010b74:	f7ffffff 	.word	0xf7ffffff

08010b78 <__aeabi_fsub>:
 8010b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7a:	4647      	mov	r7, r8
 8010b7c:	46ce      	mov	lr, r9
 8010b7e:	0044      	lsls	r4, r0, #1
 8010b80:	0fc2      	lsrs	r2, r0, #31
 8010b82:	b580      	push	{r7, lr}
 8010b84:	0247      	lsls	r7, r0, #9
 8010b86:	0248      	lsls	r0, r1, #9
 8010b88:	0a40      	lsrs	r0, r0, #9
 8010b8a:	4684      	mov	ip, r0
 8010b8c:	4666      	mov	r6, ip
 8010b8e:	0048      	lsls	r0, r1, #1
 8010b90:	0a7f      	lsrs	r7, r7, #9
 8010b92:	0e24      	lsrs	r4, r4, #24
 8010b94:	00f6      	lsls	r6, r6, #3
 8010b96:	0025      	movs	r5, r4
 8010b98:	4690      	mov	r8, r2
 8010b9a:	00fb      	lsls	r3, r7, #3
 8010b9c:	0e00      	lsrs	r0, r0, #24
 8010b9e:	0fc9      	lsrs	r1, r1, #31
 8010ba0:	46b1      	mov	r9, r6
 8010ba2:	28ff      	cmp	r0, #255	; 0xff
 8010ba4:	d100      	bne.n	8010ba8 <__aeabi_fsub+0x30>
 8010ba6:	e085      	b.n	8010cb4 <__aeabi_fsub+0x13c>
 8010ba8:	2601      	movs	r6, #1
 8010baa:	4071      	eors	r1, r6
 8010bac:	1a26      	subs	r6, r4, r0
 8010bae:	4291      	cmp	r1, r2
 8010bb0:	d057      	beq.n	8010c62 <__aeabi_fsub+0xea>
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	dd43      	ble.n	8010c3e <__aeabi_fsub+0xc6>
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	d000      	beq.n	8010bbc <__aeabi_fsub+0x44>
 8010bba:	e07f      	b.n	8010cbc <__aeabi_fsub+0x144>
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	2900      	cmp	r1, #0
 8010bc0:	d100      	bne.n	8010bc4 <__aeabi_fsub+0x4c>
 8010bc2:	e0aa      	b.n	8010d1a <__aeabi_fsub+0x1a2>
 8010bc4:	3e01      	subs	r6, #1
 8010bc6:	2e00      	cmp	r6, #0
 8010bc8:	d000      	beq.n	8010bcc <__aeabi_fsub+0x54>
 8010bca:	e0f7      	b.n	8010dbc <__aeabi_fsub+0x244>
 8010bcc:	1a5b      	subs	r3, r3, r1
 8010bce:	015a      	lsls	r2, r3, #5
 8010bd0:	d400      	bmi.n	8010bd4 <__aeabi_fsub+0x5c>
 8010bd2:	e08b      	b.n	8010cec <__aeabi_fsub+0x174>
 8010bd4:	019b      	lsls	r3, r3, #6
 8010bd6:	099c      	lsrs	r4, r3, #6
 8010bd8:	0020      	movs	r0, r4
 8010bda:	f000 f991 	bl	8010f00 <__clzsi2>
 8010bde:	3805      	subs	r0, #5
 8010be0:	4084      	lsls	r4, r0
 8010be2:	4285      	cmp	r5, r0
 8010be4:	dd00      	ble.n	8010be8 <__aeabi_fsub+0x70>
 8010be6:	e0d3      	b.n	8010d90 <__aeabi_fsub+0x218>
 8010be8:	1b45      	subs	r5, r0, r5
 8010bea:	0023      	movs	r3, r4
 8010bec:	2020      	movs	r0, #32
 8010bee:	3501      	adds	r5, #1
 8010bf0:	40eb      	lsrs	r3, r5
 8010bf2:	1b45      	subs	r5, r0, r5
 8010bf4:	40ac      	lsls	r4, r5
 8010bf6:	1e62      	subs	r2, r4, #1
 8010bf8:	4194      	sbcs	r4, r2
 8010bfa:	4323      	orrs	r3, r4
 8010bfc:	2407      	movs	r4, #7
 8010bfe:	2500      	movs	r5, #0
 8010c00:	401c      	ands	r4, r3
 8010c02:	2201      	movs	r2, #1
 8010c04:	4641      	mov	r1, r8
 8010c06:	400a      	ands	r2, r1
 8010c08:	2c00      	cmp	r4, #0
 8010c0a:	d004      	beq.n	8010c16 <__aeabi_fsub+0x9e>
 8010c0c:	210f      	movs	r1, #15
 8010c0e:	4019      	ands	r1, r3
 8010c10:	2904      	cmp	r1, #4
 8010c12:	d000      	beq.n	8010c16 <__aeabi_fsub+0x9e>
 8010c14:	3304      	adds	r3, #4
 8010c16:	0159      	lsls	r1, r3, #5
 8010c18:	d400      	bmi.n	8010c1c <__aeabi_fsub+0xa4>
 8010c1a:	e080      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	b2ec      	uxtb	r4, r5
 8010c20:	2dff      	cmp	r5, #255	; 0xff
 8010c22:	d000      	beq.n	8010c26 <__aeabi_fsub+0xae>
 8010c24:	e0a3      	b.n	8010d6e <__aeabi_fsub+0x1f6>
 8010c26:	24ff      	movs	r4, #255	; 0xff
 8010c28:	2300      	movs	r3, #0
 8010c2a:	025b      	lsls	r3, r3, #9
 8010c2c:	05e4      	lsls	r4, r4, #23
 8010c2e:	0a58      	lsrs	r0, r3, #9
 8010c30:	07d2      	lsls	r2, r2, #31
 8010c32:	4320      	orrs	r0, r4
 8010c34:	4310      	orrs	r0, r2
 8010c36:	bc0c      	pop	{r2, r3}
 8010c38:	4690      	mov	r8, r2
 8010c3a:	4699      	mov	r9, r3
 8010c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c3e:	2e00      	cmp	r6, #0
 8010c40:	d174      	bne.n	8010d2c <__aeabi_fsub+0x1b4>
 8010c42:	1c60      	adds	r0, r4, #1
 8010c44:	b2c0      	uxtb	r0, r0
 8010c46:	2801      	cmp	r0, #1
 8010c48:	dc00      	bgt.n	8010c4c <__aeabi_fsub+0xd4>
 8010c4a:	e0a7      	b.n	8010d9c <__aeabi_fsub+0x224>
 8010c4c:	464a      	mov	r2, r9
 8010c4e:	1a9c      	subs	r4, r3, r2
 8010c50:	0162      	lsls	r2, r4, #5
 8010c52:	d500      	bpl.n	8010c56 <__aeabi_fsub+0xde>
 8010c54:	e0b6      	b.n	8010dc4 <__aeabi_fsub+0x24c>
 8010c56:	2c00      	cmp	r4, #0
 8010c58:	d1be      	bne.n	8010bd8 <__aeabi_fsub+0x60>
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	2400      	movs	r4, #0
 8010c5e:	2300      	movs	r3, #0
 8010c60:	e7e3      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010c62:	2e00      	cmp	r6, #0
 8010c64:	dc00      	bgt.n	8010c68 <__aeabi_fsub+0xf0>
 8010c66:	e085      	b.n	8010d74 <__aeabi_fsub+0x1fc>
 8010c68:	2800      	cmp	r0, #0
 8010c6a:	d046      	beq.n	8010cfa <__aeabi_fsub+0x182>
 8010c6c:	2cff      	cmp	r4, #255	; 0xff
 8010c6e:	d049      	beq.n	8010d04 <__aeabi_fsub+0x18c>
 8010c70:	2280      	movs	r2, #128	; 0x80
 8010c72:	4648      	mov	r0, r9
 8010c74:	04d2      	lsls	r2, r2, #19
 8010c76:	4310      	orrs	r0, r2
 8010c78:	4681      	mov	r9, r0
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	2e1b      	cmp	r6, #27
 8010c7e:	dc09      	bgt.n	8010c94 <__aeabi_fsub+0x11c>
 8010c80:	2020      	movs	r0, #32
 8010c82:	464c      	mov	r4, r9
 8010c84:	1b80      	subs	r0, r0, r6
 8010c86:	4084      	lsls	r4, r0
 8010c88:	464a      	mov	r2, r9
 8010c8a:	0020      	movs	r0, r4
 8010c8c:	40f2      	lsrs	r2, r6
 8010c8e:	1e44      	subs	r4, r0, #1
 8010c90:	41a0      	sbcs	r0, r4
 8010c92:	4302      	orrs	r2, r0
 8010c94:	189b      	adds	r3, r3, r2
 8010c96:	015a      	lsls	r2, r3, #5
 8010c98:	d528      	bpl.n	8010cec <__aeabi_fsub+0x174>
 8010c9a:	3501      	adds	r5, #1
 8010c9c:	2dff      	cmp	r5, #255	; 0xff
 8010c9e:	d100      	bne.n	8010ca2 <__aeabi_fsub+0x12a>
 8010ca0:	e0a8      	b.n	8010df4 <__aeabi_fsub+0x27c>
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	2407      	movs	r4, #7
 8010ca6:	4994      	ldr	r1, [pc, #592]	; (8010ef8 <__aeabi_fsub+0x380>)
 8010ca8:	401a      	ands	r2, r3
 8010caa:	085b      	lsrs	r3, r3, #1
 8010cac:	400b      	ands	r3, r1
 8010cae:	4313      	orrs	r3, r2
 8010cb0:	401c      	ands	r4, r3
 8010cb2:	e7a6      	b.n	8010c02 <__aeabi_fsub+0x8a>
 8010cb4:	2e00      	cmp	r6, #0
 8010cb6:	d000      	beq.n	8010cba <__aeabi_fsub+0x142>
 8010cb8:	e778      	b.n	8010bac <__aeabi_fsub+0x34>
 8010cba:	e775      	b.n	8010ba8 <__aeabi_fsub+0x30>
 8010cbc:	2cff      	cmp	r4, #255	; 0xff
 8010cbe:	d054      	beq.n	8010d6a <__aeabi_fsub+0x1f2>
 8010cc0:	2280      	movs	r2, #128	; 0x80
 8010cc2:	4649      	mov	r1, r9
 8010cc4:	04d2      	lsls	r2, r2, #19
 8010cc6:	4311      	orrs	r1, r2
 8010cc8:	4689      	mov	r9, r1
 8010cca:	2201      	movs	r2, #1
 8010ccc:	2e1b      	cmp	r6, #27
 8010cce:	dc09      	bgt.n	8010ce4 <__aeabi_fsub+0x16c>
 8010cd0:	2120      	movs	r1, #32
 8010cd2:	4648      	mov	r0, r9
 8010cd4:	1b89      	subs	r1, r1, r6
 8010cd6:	4088      	lsls	r0, r1
 8010cd8:	464a      	mov	r2, r9
 8010cda:	0001      	movs	r1, r0
 8010cdc:	40f2      	lsrs	r2, r6
 8010cde:	1e48      	subs	r0, r1, #1
 8010ce0:	4181      	sbcs	r1, r0
 8010ce2:	430a      	orrs	r2, r1
 8010ce4:	1a9b      	subs	r3, r3, r2
 8010ce6:	015a      	lsls	r2, r3, #5
 8010ce8:	d500      	bpl.n	8010cec <__aeabi_fsub+0x174>
 8010cea:	e773      	b.n	8010bd4 <__aeabi_fsub+0x5c>
 8010cec:	2201      	movs	r2, #1
 8010cee:	4641      	mov	r1, r8
 8010cf0:	400a      	ands	r2, r1
 8010cf2:	0759      	lsls	r1, r3, #29
 8010cf4:	d000      	beq.n	8010cf8 <__aeabi_fsub+0x180>
 8010cf6:	e789      	b.n	8010c0c <__aeabi_fsub+0x94>
 8010cf8:	e011      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010cfa:	4648      	mov	r0, r9
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d158      	bne.n	8010db2 <__aeabi_fsub+0x23a>
 8010d00:	2cff      	cmp	r4, #255	; 0xff
 8010d02:	d10c      	bne.n	8010d1e <__aeabi_fsub+0x1a6>
 8010d04:	08db      	lsrs	r3, r3, #3
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d100      	bne.n	8010d0c <__aeabi_fsub+0x194>
 8010d0a:	e78c      	b.n	8010c26 <__aeabi_fsub+0xae>
 8010d0c:	2080      	movs	r0, #128	; 0x80
 8010d0e:	03c0      	lsls	r0, r0, #15
 8010d10:	4303      	orrs	r3, r0
 8010d12:	025b      	lsls	r3, r3, #9
 8010d14:	0a5b      	lsrs	r3, r3, #9
 8010d16:	24ff      	movs	r4, #255	; 0xff
 8010d18:	e787      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010d1a:	2cff      	cmp	r4, #255	; 0xff
 8010d1c:	d025      	beq.n	8010d6a <__aeabi_fsub+0x1f2>
 8010d1e:	08db      	lsrs	r3, r3, #3
 8010d20:	2dff      	cmp	r5, #255	; 0xff
 8010d22:	d0f0      	beq.n	8010d06 <__aeabi_fsub+0x18e>
 8010d24:	025b      	lsls	r3, r3, #9
 8010d26:	0a5b      	lsrs	r3, r3, #9
 8010d28:	b2ec      	uxtb	r4, r5
 8010d2a:	e77e      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010d2c:	2c00      	cmp	r4, #0
 8010d2e:	d04d      	beq.n	8010dcc <__aeabi_fsub+0x254>
 8010d30:	28ff      	cmp	r0, #255	; 0xff
 8010d32:	d018      	beq.n	8010d66 <__aeabi_fsub+0x1ee>
 8010d34:	2480      	movs	r4, #128	; 0x80
 8010d36:	04e4      	lsls	r4, r4, #19
 8010d38:	4272      	negs	r2, r6
 8010d3a:	4323      	orrs	r3, r4
 8010d3c:	2a1b      	cmp	r2, #27
 8010d3e:	dd00      	ble.n	8010d42 <__aeabi_fsub+0x1ca>
 8010d40:	e0c4      	b.n	8010ecc <__aeabi_fsub+0x354>
 8010d42:	001c      	movs	r4, r3
 8010d44:	2520      	movs	r5, #32
 8010d46:	40d4      	lsrs	r4, r2
 8010d48:	1aaa      	subs	r2, r5, r2
 8010d4a:	4093      	lsls	r3, r2
 8010d4c:	1e5a      	subs	r2, r3, #1
 8010d4e:	4193      	sbcs	r3, r2
 8010d50:	4323      	orrs	r3, r4
 8010d52:	464a      	mov	r2, r9
 8010d54:	0005      	movs	r5, r0
 8010d56:	1ad3      	subs	r3, r2, r3
 8010d58:	4688      	mov	r8, r1
 8010d5a:	e738      	b.n	8010bce <__aeabi_fsub+0x56>
 8010d5c:	1c72      	adds	r2, r6, #1
 8010d5e:	d0f8      	beq.n	8010d52 <__aeabi_fsub+0x1da>
 8010d60:	43f2      	mvns	r2, r6
 8010d62:	28ff      	cmp	r0, #255	; 0xff
 8010d64:	d1ea      	bne.n	8010d3c <__aeabi_fsub+0x1c4>
 8010d66:	000a      	movs	r2, r1
 8010d68:	464b      	mov	r3, r9
 8010d6a:	25ff      	movs	r5, #255	; 0xff
 8010d6c:	e7d7      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010d6e:	019b      	lsls	r3, r3, #6
 8010d70:	0a5b      	lsrs	r3, r3, #9
 8010d72:	e75a      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010d74:	2e00      	cmp	r6, #0
 8010d76:	d141      	bne.n	8010dfc <__aeabi_fsub+0x284>
 8010d78:	1c65      	adds	r5, r4, #1
 8010d7a:	b2e9      	uxtb	r1, r5
 8010d7c:	2901      	cmp	r1, #1
 8010d7e:	dd45      	ble.n	8010e0c <__aeabi_fsub+0x294>
 8010d80:	2dff      	cmp	r5, #255	; 0xff
 8010d82:	d100      	bne.n	8010d86 <__aeabi_fsub+0x20e>
 8010d84:	e74f      	b.n	8010c26 <__aeabi_fsub+0xae>
 8010d86:	2407      	movs	r4, #7
 8010d88:	444b      	add	r3, r9
 8010d8a:	085b      	lsrs	r3, r3, #1
 8010d8c:	401c      	ands	r4, r3
 8010d8e:	e738      	b.n	8010c02 <__aeabi_fsub+0x8a>
 8010d90:	2207      	movs	r2, #7
 8010d92:	4b5a      	ldr	r3, [pc, #360]	; (8010efc <__aeabi_fsub+0x384>)
 8010d94:	1a2d      	subs	r5, r5, r0
 8010d96:	4023      	ands	r3, r4
 8010d98:	4014      	ands	r4, r2
 8010d9a:	e732      	b.n	8010c02 <__aeabi_fsub+0x8a>
 8010d9c:	2c00      	cmp	r4, #0
 8010d9e:	d11d      	bne.n	8010ddc <__aeabi_fsub+0x264>
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d17a      	bne.n	8010e9a <__aeabi_fsub+0x322>
 8010da4:	464b      	mov	r3, r9
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d100      	bne.n	8010dac <__aeabi_fsub+0x234>
 8010daa:	e091      	b.n	8010ed0 <__aeabi_fsub+0x358>
 8010dac:	000a      	movs	r2, r1
 8010dae:	2500      	movs	r5, #0
 8010db0:	e7b5      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010db2:	3e01      	subs	r6, #1
 8010db4:	2e00      	cmp	r6, #0
 8010db6:	d119      	bne.n	8010dec <__aeabi_fsub+0x274>
 8010db8:	444b      	add	r3, r9
 8010dba:	e76c      	b.n	8010c96 <__aeabi_fsub+0x11e>
 8010dbc:	2cff      	cmp	r4, #255	; 0xff
 8010dbe:	d184      	bne.n	8010cca <__aeabi_fsub+0x152>
 8010dc0:	25ff      	movs	r5, #255	; 0xff
 8010dc2:	e7ac      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010dc4:	464a      	mov	r2, r9
 8010dc6:	4688      	mov	r8, r1
 8010dc8:	1ad4      	subs	r4, r2, r3
 8010dca:	e705      	b.n	8010bd8 <__aeabi_fsub+0x60>
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d1c5      	bne.n	8010d5c <__aeabi_fsub+0x1e4>
 8010dd0:	000a      	movs	r2, r1
 8010dd2:	28ff      	cmp	r0, #255	; 0xff
 8010dd4:	d0c8      	beq.n	8010d68 <__aeabi_fsub+0x1f0>
 8010dd6:	0005      	movs	r5, r0
 8010dd8:	464b      	mov	r3, r9
 8010dda:	e7a0      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d149      	bne.n	8010e74 <__aeabi_fsub+0x2fc>
 8010de0:	464b      	mov	r3, r9
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d077      	beq.n	8010ed6 <__aeabi_fsub+0x35e>
 8010de6:	000a      	movs	r2, r1
 8010de8:	25ff      	movs	r5, #255	; 0xff
 8010dea:	e798      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010dec:	2cff      	cmp	r4, #255	; 0xff
 8010dee:	d000      	beq.n	8010df2 <__aeabi_fsub+0x27a>
 8010df0:	e743      	b.n	8010c7a <__aeabi_fsub+0x102>
 8010df2:	e787      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010df4:	000a      	movs	r2, r1
 8010df6:	24ff      	movs	r4, #255	; 0xff
 8010df8:	2300      	movs	r3, #0
 8010dfa:	e716      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010dfc:	2c00      	cmp	r4, #0
 8010dfe:	d115      	bne.n	8010e2c <__aeabi_fsub+0x2b4>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d157      	bne.n	8010eb4 <__aeabi_fsub+0x33c>
 8010e04:	28ff      	cmp	r0, #255	; 0xff
 8010e06:	d1e6      	bne.n	8010dd6 <__aeabi_fsub+0x25e>
 8010e08:	464b      	mov	r3, r9
 8010e0a:	e77b      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010e0c:	2c00      	cmp	r4, #0
 8010e0e:	d120      	bne.n	8010e52 <__aeabi_fsub+0x2da>
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d057      	beq.n	8010ec4 <__aeabi_fsub+0x34c>
 8010e14:	4649      	mov	r1, r9
 8010e16:	2900      	cmp	r1, #0
 8010e18:	d053      	beq.n	8010ec2 <__aeabi_fsub+0x34a>
 8010e1a:	444b      	add	r3, r9
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	d568      	bpl.n	8010ef2 <__aeabi_fsub+0x37a>
 8010e20:	2407      	movs	r4, #7
 8010e22:	4a36      	ldr	r2, [pc, #216]	; (8010efc <__aeabi_fsub+0x384>)
 8010e24:	401c      	ands	r4, r3
 8010e26:	2501      	movs	r5, #1
 8010e28:	4013      	ands	r3, r2
 8010e2a:	e6ea      	b.n	8010c02 <__aeabi_fsub+0x8a>
 8010e2c:	28ff      	cmp	r0, #255	; 0xff
 8010e2e:	d0eb      	beq.n	8010e08 <__aeabi_fsub+0x290>
 8010e30:	2280      	movs	r2, #128	; 0x80
 8010e32:	04d2      	lsls	r2, r2, #19
 8010e34:	4276      	negs	r6, r6
 8010e36:	4313      	orrs	r3, r2
 8010e38:	2e1b      	cmp	r6, #27
 8010e3a:	dc53      	bgt.n	8010ee4 <__aeabi_fsub+0x36c>
 8010e3c:	2520      	movs	r5, #32
 8010e3e:	1bad      	subs	r5, r5, r6
 8010e40:	001a      	movs	r2, r3
 8010e42:	40ab      	lsls	r3, r5
 8010e44:	40f2      	lsrs	r2, r6
 8010e46:	1e5c      	subs	r4, r3, #1
 8010e48:	41a3      	sbcs	r3, r4
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	444b      	add	r3, r9
 8010e4e:	0005      	movs	r5, r0
 8010e50:	e721      	b.n	8010c96 <__aeabi_fsub+0x11e>
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d0d8      	beq.n	8010e08 <__aeabi_fsub+0x290>
 8010e56:	4649      	mov	r1, r9
 8010e58:	2900      	cmp	r1, #0
 8010e5a:	d100      	bne.n	8010e5e <__aeabi_fsub+0x2e6>
 8010e5c:	e752      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010e5e:	2180      	movs	r1, #128	; 0x80
 8010e60:	03c9      	lsls	r1, r1, #15
 8010e62:	420f      	tst	r7, r1
 8010e64:	d100      	bne.n	8010e68 <__aeabi_fsub+0x2f0>
 8010e66:	e74d      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010e68:	4660      	mov	r0, ip
 8010e6a:	4208      	tst	r0, r1
 8010e6c:	d000      	beq.n	8010e70 <__aeabi_fsub+0x2f8>
 8010e6e:	e749      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010e70:	464b      	mov	r3, r9
 8010e72:	e747      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010e74:	4648      	mov	r0, r9
 8010e76:	25ff      	movs	r5, #255	; 0xff
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d100      	bne.n	8010e7e <__aeabi_fsub+0x306>
 8010e7c:	e74f      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010e7e:	2280      	movs	r2, #128	; 0x80
 8010e80:	03d2      	lsls	r2, r2, #15
 8010e82:	4217      	tst	r7, r2
 8010e84:	d004      	beq.n	8010e90 <__aeabi_fsub+0x318>
 8010e86:	4660      	mov	r0, ip
 8010e88:	4210      	tst	r0, r2
 8010e8a:	d101      	bne.n	8010e90 <__aeabi_fsub+0x318>
 8010e8c:	464b      	mov	r3, r9
 8010e8e:	4688      	mov	r8, r1
 8010e90:	2201      	movs	r2, #1
 8010e92:	4641      	mov	r1, r8
 8010e94:	25ff      	movs	r5, #255	; 0xff
 8010e96:	400a      	ands	r2, r1
 8010e98:	e741      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010e9a:	4648      	mov	r0, r9
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d01f      	beq.n	8010ee0 <__aeabi_fsub+0x368>
 8010ea0:	1a1a      	subs	r2, r3, r0
 8010ea2:	0150      	lsls	r0, r2, #5
 8010ea4:	d520      	bpl.n	8010ee8 <__aeabi_fsub+0x370>
 8010ea6:	464a      	mov	r2, r9
 8010ea8:	2407      	movs	r4, #7
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	401c      	ands	r4, r3
 8010eae:	4688      	mov	r8, r1
 8010eb0:	2500      	movs	r5, #0
 8010eb2:	e6a6      	b.n	8010c02 <__aeabi_fsub+0x8a>
 8010eb4:	1c74      	adds	r4, r6, #1
 8010eb6:	d0c9      	beq.n	8010e4c <__aeabi_fsub+0x2d4>
 8010eb8:	43f6      	mvns	r6, r6
 8010eba:	28ff      	cmp	r0, #255	; 0xff
 8010ebc:	d1bc      	bne.n	8010e38 <__aeabi_fsub+0x2c0>
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	e720      	b.n	8010d04 <__aeabi_fsub+0x18c>
 8010ec2:	4699      	mov	r9, r3
 8010ec4:	464b      	mov	r3, r9
 8010ec6:	2500      	movs	r5, #0
 8010ec8:	08db      	lsrs	r3, r3, #3
 8010eca:	e72b      	b.n	8010d24 <__aeabi_fsub+0x1ac>
 8010ecc:	2301      	movs	r3, #1
 8010ece:	e740      	b.n	8010d52 <__aeabi_fsub+0x1da>
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	e6a9      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010ed6:	2380      	movs	r3, #128	; 0x80
 8010ed8:	2200      	movs	r2, #0
 8010eda:	03db      	lsls	r3, r3, #15
 8010edc:	24ff      	movs	r4, #255	; 0xff
 8010ede:	e6a4      	b.n	8010c2a <__aeabi_fsub+0xb2>
 8010ee0:	2500      	movs	r5, #0
 8010ee2:	e71c      	b.n	8010d1e <__aeabi_fsub+0x1a6>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e7b1      	b.n	8010e4c <__aeabi_fsub+0x2d4>
 8010ee8:	2a00      	cmp	r2, #0
 8010eea:	d0f1      	beq.n	8010ed0 <__aeabi_fsub+0x358>
 8010eec:	0013      	movs	r3, r2
 8010eee:	2500      	movs	r5, #0
 8010ef0:	e6fc      	b.n	8010cec <__aeabi_fsub+0x174>
 8010ef2:	2500      	movs	r5, #0
 8010ef4:	e6fa      	b.n	8010cec <__aeabi_fsub+0x174>
 8010ef6:	46c0      	nop			; (mov r8, r8)
 8010ef8:	7dffffff 	.word	0x7dffffff
 8010efc:	fbffffff 	.word	0xfbffffff

08010f00 <__clzsi2>:
 8010f00:	211c      	movs	r1, #28
 8010f02:	2301      	movs	r3, #1
 8010f04:	041b      	lsls	r3, r3, #16
 8010f06:	4298      	cmp	r0, r3
 8010f08:	d301      	bcc.n	8010f0e <__clzsi2+0xe>
 8010f0a:	0c00      	lsrs	r0, r0, #16
 8010f0c:	3910      	subs	r1, #16
 8010f0e:	0a1b      	lsrs	r3, r3, #8
 8010f10:	4298      	cmp	r0, r3
 8010f12:	d301      	bcc.n	8010f18 <__clzsi2+0x18>
 8010f14:	0a00      	lsrs	r0, r0, #8
 8010f16:	3908      	subs	r1, #8
 8010f18:	091b      	lsrs	r3, r3, #4
 8010f1a:	4298      	cmp	r0, r3
 8010f1c:	d301      	bcc.n	8010f22 <__clzsi2+0x22>
 8010f1e:	0900      	lsrs	r0, r0, #4
 8010f20:	3904      	subs	r1, #4
 8010f22:	a202      	add	r2, pc, #8	; (adr r2, 8010f2c <__clzsi2+0x2c>)
 8010f24:	5c10      	ldrb	r0, [r2, r0]
 8010f26:	1840      	adds	r0, r0, r1
 8010f28:	4770      	bx	lr
 8010f2a:	46c0      	nop			; (mov r8, r8)
 8010f2c:	02020304 	.word	0x02020304
 8010f30:	01010101 	.word	0x01010101
	...

08010f3c <__gnu_thumb1_case_sqi>:
 8010f3c:	b402      	push	{r1}
 8010f3e:	4671      	mov	r1, lr
 8010f40:	0849      	lsrs	r1, r1, #1
 8010f42:	0049      	lsls	r1, r1, #1
 8010f44:	5609      	ldrsb	r1, [r1, r0]
 8010f46:	0049      	lsls	r1, r1, #1
 8010f48:	448e      	add	lr, r1
 8010f4a:	bc02      	pop	{r1}
 8010f4c:	4770      	bx	lr
 8010f4e:	46c0      	nop			; (mov r8, r8)

08010f50 <__gnu_thumb1_case_uqi>:
 8010f50:	b402      	push	{r1}
 8010f52:	4671      	mov	r1, lr
 8010f54:	0849      	lsrs	r1, r1, #1
 8010f56:	0049      	lsls	r1, r1, #1
 8010f58:	5c09      	ldrb	r1, [r1, r0]
 8010f5a:	0049      	lsls	r1, r1, #1
 8010f5c:	448e      	add	lr, r1
 8010f5e:	bc02      	pop	{r1}
 8010f60:	4770      	bx	lr
 8010f62:	46c0      	nop			; (mov r8, r8)

08010f64 <__gnu_thumb1_case_uhi>:
 8010f64:	b403      	push	{r0, r1}
 8010f66:	4671      	mov	r1, lr
 8010f68:	0849      	lsrs	r1, r1, #1
 8010f6a:	0040      	lsls	r0, r0, #1
 8010f6c:	0049      	lsls	r1, r1, #1
 8010f6e:	5a09      	ldrh	r1, [r1, r0]
 8010f70:	0049      	lsls	r1, r1, #1
 8010f72:	448e      	add	lr, r1
 8010f74:	bc03      	pop	{r0, r1}
 8010f76:	4770      	bx	lr

08010f78 <__udivsi3>:
 8010f78:	2200      	movs	r2, #0
 8010f7a:	0843      	lsrs	r3, r0, #1
 8010f7c:	428b      	cmp	r3, r1
 8010f7e:	d374      	bcc.n	801106a <__udivsi3+0xf2>
 8010f80:	0903      	lsrs	r3, r0, #4
 8010f82:	428b      	cmp	r3, r1
 8010f84:	d35f      	bcc.n	8011046 <__udivsi3+0xce>
 8010f86:	0a03      	lsrs	r3, r0, #8
 8010f88:	428b      	cmp	r3, r1
 8010f8a:	d344      	bcc.n	8011016 <__udivsi3+0x9e>
 8010f8c:	0b03      	lsrs	r3, r0, #12
 8010f8e:	428b      	cmp	r3, r1
 8010f90:	d328      	bcc.n	8010fe4 <__udivsi3+0x6c>
 8010f92:	0c03      	lsrs	r3, r0, #16
 8010f94:	428b      	cmp	r3, r1
 8010f96:	d30d      	bcc.n	8010fb4 <__udivsi3+0x3c>
 8010f98:	22ff      	movs	r2, #255	; 0xff
 8010f9a:	0209      	lsls	r1, r1, #8
 8010f9c:	ba12      	rev	r2, r2
 8010f9e:	0c03      	lsrs	r3, r0, #16
 8010fa0:	428b      	cmp	r3, r1
 8010fa2:	d302      	bcc.n	8010faa <__udivsi3+0x32>
 8010fa4:	1212      	asrs	r2, r2, #8
 8010fa6:	0209      	lsls	r1, r1, #8
 8010fa8:	d065      	beq.n	8011076 <__udivsi3+0xfe>
 8010faa:	0b03      	lsrs	r3, r0, #12
 8010fac:	428b      	cmp	r3, r1
 8010fae:	d319      	bcc.n	8010fe4 <__udivsi3+0x6c>
 8010fb0:	e000      	b.n	8010fb4 <__udivsi3+0x3c>
 8010fb2:	0a09      	lsrs	r1, r1, #8
 8010fb4:	0bc3      	lsrs	r3, r0, #15
 8010fb6:	428b      	cmp	r3, r1
 8010fb8:	d301      	bcc.n	8010fbe <__udivsi3+0x46>
 8010fba:	03cb      	lsls	r3, r1, #15
 8010fbc:	1ac0      	subs	r0, r0, r3
 8010fbe:	4152      	adcs	r2, r2
 8010fc0:	0b83      	lsrs	r3, r0, #14
 8010fc2:	428b      	cmp	r3, r1
 8010fc4:	d301      	bcc.n	8010fca <__udivsi3+0x52>
 8010fc6:	038b      	lsls	r3, r1, #14
 8010fc8:	1ac0      	subs	r0, r0, r3
 8010fca:	4152      	adcs	r2, r2
 8010fcc:	0b43      	lsrs	r3, r0, #13
 8010fce:	428b      	cmp	r3, r1
 8010fd0:	d301      	bcc.n	8010fd6 <__udivsi3+0x5e>
 8010fd2:	034b      	lsls	r3, r1, #13
 8010fd4:	1ac0      	subs	r0, r0, r3
 8010fd6:	4152      	adcs	r2, r2
 8010fd8:	0b03      	lsrs	r3, r0, #12
 8010fda:	428b      	cmp	r3, r1
 8010fdc:	d301      	bcc.n	8010fe2 <__udivsi3+0x6a>
 8010fde:	030b      	lsls	r3, r1, #12
 8010fe0:	1ac0      	subs	r0, r0, r3
 8010fe2:	4152      	adcs	r2, r2
 8010fe4:	0ac3      	lsrs	r3, r0, #11
 8010fe6:	428b      	cmp	r3, r1
 8010fe8:	d301      	bcc.n	8010fee <__udivsi3+0x76>
 8010fea:	02cb      	lsls	r3, r1, #11
 8010fec:	1ac0      	subs	r0, r0, r3
 8010fee:	4152      	adcs	r2, r2
 8010ff0:	0a83      	lsrs	r3, r0, #10
 8010ff2:	428b      	cmp	r3, r1
 8010ff4:	d301      	bcc.n	8010ffa <__udivsi3+0x82>
 8010ff6:	028b      	lsls	r3, r1, #10
 8010ff8:	1ac0      	subs	r0, r0, r3
 8010ffa:	4152      	adcs	r2, r2
 8010ffc:	0a43      	lsrs	r3, r0, #9
 8010ffe:	428b      	cmp	r3, r1
 8011000:	d301      	bcc.n	8011006 <__udivsi3+0x8e>
 8011002:	024b      	lsls	r3, r1, #9
 8011004:	1ac0      	subs	r0, r0, r3
 8011006:	4152      	adcs	r2, r2
 8011008:	0a03      	lsrs	r3, r0, #8
 801100a:	428b      	cmp	r3, r1
 801100c:	d301      	bcc.n	8011012 <__udivsi3+0x9a>
 801100e:	020b      	lsls	r3, r1, #8
 8011010:	1ac0      	subs	r0, r0, r3
 8011012:	4152      	adcs	r2, r2
 8011014:	d2cd      	bcs.n	8010fb2 <__udivsi3+0x3a>
 8011016:	09c3      	lsrs	r3, r0, #7
 8011018:	428b      	cmp	r3, r1
 801101a:	d301      	bcc.n	8011020 <__udivsi3+0xa8>
 801101c:	01cb      	lsls	r3, r1, #7
 801101e:	1ac0      	subs	r0, r0, r3
 8011020:	4152      	adcs	r2, r2
 8011022:	0983      	lsrs	r3, r0, #6
 8011024:	428b      	cmp	r3, r1
 8011026:	d301      	bcc.n	801102c <__udivsi3+0xb4>
 8011028:	018b      	lsls	r3, r1, #6
 801102a:	1ac0      	subs	r0, r0, r3
 801102c:	4152      	adcs	r2, r2
 801102e:	0943      	lsrs	r3, r0, #5
 8011030:	428b      	cmp	r3, r1
 8011032:	d301      	bcc.n	8011038 <__udivsi3+0xc0>
 8011034:	014b      	lsls	r3, r1, #5
 8011036:	1ac0      	subs	r0, r0, r3
 8011038:	4152      	adcs	r2, r2
 801103a:	0903      	lsrs	r3, r0, #4
 801103c:	428b      	cmp	r3, r1
 801103e:	d301      	bcc.n	8011044 <__udivsi3+0xcc>
 8011040:	010b      	lsls	r3, r1, #4
 8011042:	1ac0      	subs	r0, r0, r3
 8011044:	4152      	adcs	r2, r2
 8011046:	08c3      	lsrs	r3, r0, #3
 8011048:	428b      	cmp	r3, r1
 801104a:	d301      	bcc.n	8011050 <__udivsi3+0xd8>
 801104c:	00cb      	lsls	r3, r1, #3
 801104e:	1ac0      	subs	r0, r0, r3
 8011050:	4152      	adcs	r2, r2
 8011052:	0883      	lsrs	r3, r0, #2
 8011054:	428b      	cmp	r3, r1
 8011056:	d301      	bcc.n	801105c <__udivsi3+0xe4>
 8011058:	008b      	lsls	r3, r1, #2
 801105a:	1ac0      	subs	r0, r0, r3
 801105c:	4152      	adcs	r2, r2
 801105e:	0843      	lsrs	r3, r0, #1
 8011060:	428b      	cmp	r3, r1
 8011062:	d301      	bcc.n	8011068 <__udivsi3+0xf0>
 8011064:	004b      	lsls	r3, r1, #1
 8011066:	1ac0      	subs	r0, r0, r3
 8011068:	4152      	adcs	r2, r2
 801106a:	1a41      	subs	r1, r0, r1
 801106c:	d200      	bcs.n	8011070 <__udivsi3+0xf8>
 801106e:	4601      	mov	r1, r0
 8011070:	4152      	adcs	r2, r2
 8011072:	4610      	mov	r0, r2
 8011074:	4770      	bx	lr
 8011076:	e7ff      	b.n	8011078 <__udivsi3+0x100>
 8011078:	b501      	push	{r0, lr}
 801107a:	2000      	movs	r0, #0
 801107c:	f000 f8f0 	bl	8011260 <__aeabi_idiv0>
 8011080:	bd02      	pop	{r1, pc}
 8011082:	46c0      	nop			; (mov r8, r8)

08011084 <__aeabi_uidivmod>:
 8011084:	2900      	cmp	r1, #0
 8011086:	d0f7      	beq.n	8011078 <__udivsi3+0x100>
 8011088:	e776      	b.n	8010f78 <__udivsi3>
 801108a:	4770      	bx	lr

0801108c <__divsi3>:
 801108c:	4603      	mov	r3, r0
 801108e:	430b      	orrs	r3, r1
 8011090:	d47f      	bmi.n	8011192 <__divsi3+0x106>
 8011092:	2200      	movs	r2, #0
 8011094:	0843      	lsrs	r3, r0, #1
 8011096:	428b      	cmp	r3, r1
 8011098:	d374      	bcc.n	8011184 <__divsi3+0xf8>
 801109a:	0903      	lsrs	r3, r0, #4
 801109c:	428b      	cmp	r3, r1
 801109e:	d35f      	bcc.n	8011160 <__divsi3+0xd4>
 80110a0:	0a03      	lsrs	r3, r0, #8
 80110a2:	428b      	cmp	r3, r1
 80110a4:	d344      	bcc.n	8011130 <__divsi3+0xa4>
 80110a6:	0b03      	lsrs	r3, r0, #12
 80110a8:	428b      	cmp	r3, r1
 80110aa:	d328      	bcc.n	80110fe <__divsi3+0x72>
 80110ac:	0c03      	lsrs	r3, r0, #16
 80110ae:	428b      	cmp	r3, r1
 80110b0:	d30d      	bcc.n	80110ce <__divsi3+0x42>
 80110b2:	22ff      	movs	r2, #255	; 0xff
 80110b4:	0209      	lsls	r1, r1, #8
 80110b6:	ba12      	rev	r2, r2
 80110b8:	0c03      	lsrs	r3, r0, #16
 80110ba:	428b      	cmp	r3, r1
 80110bc:	d302      	bcc.n	80110c4 <__divsi3+0x38>
 80110be:	1212      	asrs	r2, r2, #8
 80110c0:	0209      	lsls	r1, r1, #8
 80110c2:	d065      	beq.n	8011190 <__divsi3+0x104>
 80110c4:	0b03      	lsrs	r3, r0, #12
 80110c6:	428b      	cmp	r3, r1
 80110c8:	d319      	bcc.n	80110fe <__divsi3+0x72>
 80110ca:	e000      	b.n	80110ce <__divsi3+0x42>
 80110cc:	0a09      	lsrs	r1, r1, #8
 80110ce:	0bc3      	lsrs	r3, r0, #15
 80110d0:	428b      	cmp	r3, r1
 80110d2:	d301      	bcc.n	80110d8 <__divsi3+0x4c>
 80110d4:	03cb      	lsls	r3, r1, #15
 80110d6:	1ac0      	subs	r0, r0, r3
 80110d8:	4152      	adcs	r2, r2
 80110da:	0b83      	lsrs	r3, r0, #14
 80110dc:	428b      	cmp	r3, r1
 80110de:	d301      	bcc.n	80110e4 <__divsi3+0x58>
 80110e0:	038b      	lsls	r3, r1, #14
 80110e2:	1ac0      	subs	r0, r0, r3
 80110e4:	4152      	adcs	r2, r2
 80110e6:	0b43      	lsrs	r3, r0, #13
 80110e8:	428b      	cmp	r3, r1
 80110ea:	d301      	bcc.n	80110f0 <__divsi3+0x64>
 80110ec:	034b      	lsls	r3, r1, #13
 80110ee:	1ac0      	subs	r0, r0, r3
 80110f0:	4152      	adcs	r2, r2
 80110f2:	0b03      	lsrs	r3, r0, #12
 80110f4:	428b      	cmp	r3, r1
 80110f6:	d301      	bcc.n	80110fc <__divsi3+0x70>
 80110f8:	030b      	lsls	r3, r1, #12
 80110fa:	1ac0      	subs	r0, r0, r3
 80110fc:	4152      	adcs	r2, r2
 80110fe:	0ac3      	lsrs	r3, r0, #11
 8011100:	428b      	cmp	r3, r1
 8011102:	d301      	bcc.n	8011108 <__divsi3+0x7c>
 8011104:	02cb      	lsls	r3, r1, #11
 8011106:	1ac0      	subs	r0, r0, r3
 8011108:	4152      	adcs	r2, r2
 801110a:	0a83      	lsrs	r3, r0, #10
 801110c:	428b      	cmp	r3, r1
 801110e:	d301      	bcc.n	8011114 <__divsi3+0x88>
 8011110:	028b      	lsls	r3, r1, #10
 8011112:	1ac0      	subs	r0, r0, r3
 8011114:	4152      	adcs	r2, r2
 8011116:	0a43      	lsrs	r3, r0, #9
 8011118:	428b      	cmp	r3, r1
 801111a:	d301      	bcc.n	8011120 <__divsi3+0x94>
 801111c:	024b      	lsls	r3, r1, #9
 801111e:	1ac0      	subs	r0, r0, r3
 8011120:	4152      	adcs	r2, r2
 8011122:	0a03      	lsrs	r3, r0, #8
 8011124:	428b      	cmp	r3, r1
 8011126:	d301      	bcc.n	801112c <__divsi3+0xa0>
 8011128:	020b      	lsls	r3, r1, #8
 801112a:	1ac0      	subs	r0, r0, r3
 801112c:	4152      	adcs	r2, r2
 801112e:	d2cd      	bcs.n	80110cc <__divsi3+0x40>
 8011130:	09c3      	lsrs	r3, r0, #7
 8011132:	428b      	cmp	r3, r1
 8011134:	d301      	bcc.n	801113a <__divsi3+0xae>
 8011136:	01cb      	lsls	r3, r1, #7
 8011138:	1ac0      	subs	r0, r0, r3
 801113a:	4152      	adcs	r2, r2
 801113c:	0983      	lsrs	r3, r0, #6
 801113e:	428b      	cmp	r3, r1
 8011140:	d301      	bcc.n	8011146 <__divsi3+0xba>
 8011142:	018b      	lsls	r3, r1, #6
 8011144:	1ac0      	subs	r0, r0, r3
 8011146:	4152      	adcs	r2, r2
 8011148:	0943      	lsrs	r3, r0, #5
 801114a:	428b      	cmp	r3, r1
 801114c:	d301      	bcc.n	8011152 <__divsi3+0xc6>
 801114e:	014b      	lsls	r3, r1, #5
 8011150:	1ac0      	subs	r0, r0, r3
 8011152:	4152      	adcs	r2, r2
 8011154:	0903      	lsrs	r3, r0, #4
 8011156:	428b      	cmp	r3, r1
 8011158:	d301      	bcc.n	801115e <__divsi3+0xd2>
 801115a:	010b      	lsls	r3, r1, #4
 801115c:	1ac0      	subs	r0, r0, r3
 801115e:	4152      	adcs	r2, r2
 8011160:	08c3      	lsrs	r3, r0, #3
 8011162:	428b      	cmp	r3, r1
 8011164:	d301      	bcc.n	801116a <__divsi3+0xde>
 8011166:	00cb      	lsls	r3, r1, #3
 8011168:	1ac0      	subs	r0, r0, r3
 801116a:	4152      	adcs	r2, r2
 801116c:	0883      	lsrs	r3, r0, #2
 801116e:	428b      	cmp	r3, r1
 8011170:	d301      	bcc.n	8011176 <__divsi3+0xea>
 8011172:	008b      	lsls	r3, r1, #2
 8011174:	1ac0      	subs	r0, r0, r3
 8011176:	4152      	adcs	r2, r2
 8011178:	0843      	lsrs	r3, r0, #1
 801117a:	428b      	cmp	r3, r1
 801117c:	d301      	bcc.n	8011182 <__divsi3+0xf6>
 801117e:	004b      	lsls	r3, r1, #1
 8011180:	1ac0      	subs	r0, r0, r3
 8011182:	4152      	adcs	r2, r2
 8011184:	1a41      	subs	r1, r0, r1
 8011186:	d200      	bcs.n	801118a <__divsi3+0xfe>
 8011188:	4601      	mov	r1, r0
 801118a:	4152      	adcs	r2, r2
 801118c:	4610      	mov	r0, r2
 801118e:	4770      	bx	lr
 8011190:	e05d      	b.n	801124e <__divsi3+0x1c2>
 8011192:	0fca      	lsrs	r2, r1, #31
 8011194:	d000      	beq.n	8011198 <__divsi3+0x10c>
 8011196:	4249      	negs	r1, r1
 8011198:	1003      	asrs	r3, r0, #32
 801119a:	d300      	bcc.n	801119e <__divsi3+0x112>
 801119c:	4240      	negs	r0, r0
 801119e:	4053      	eors	r3, r2
 80111a0:	2200      	movs	r2, #0
 80111a2:	469c      	mov	ip, r3
 80111a4:	0903      	lsrs	r3, r0, #4
 80111a6:	428b      	cmp	r3, r1
 80111a8:	d32d      	bcc.n	8011206 <__divsi3+0x17a>
 80111aa:	0a03      	lsrs	r3, r0, #8
 80111ac:	428b      	cmp	r3, r1
 80111ae:	d312      	bcc.n	80111d6 <__divsi3+0x14a>
 80111b0:	22fc      	movs	r2, #252	; 0xfc
 80111b2:	0189      	lsls	r1, r1, #6
 80111b4:	ba12      	rev	r2, r2
 80111b6:	0a03      	lsrs	r3, r0, #8
 80111b8:	428b      	cmp	r3, r1
 80111ba:	d30c      	bcc.n	80111d6 <__divsi3+0x14a>
 80111bc:	0189      	lsls	r1, r1, #6
 80111be:	1192      	asrs	r2, r2, #6
 80111c0:	428b      	cmp	r3, r1
 80111c2:	d308      	bcc.n	80111d6 <__divsi3+0x14a>
 80111c4:	0189      	lsls	r1, r1, #6
 80111c6:	1192      	asrs	r2, r2, #6
 80111c8:	428b      	cmp	r3, r1
 80111ca:	d304      	bcc.n	80111d6 <__divsi3+0x14a>
 80111cc:	0189      	lsls	r1, r1, #6
 80111ce:	d03a      	beq.n	8011246 <__divsi3+0x1ba>
 80111d0:	1192      	asrs	r2, r2, #6
 80111d2:	e000      	b.n	80111d6 <__divsi3+0x14a>
 80111d4:	0989      	lsrs	r1, r1, #6
 80111d6:	09c3      	lsrs	r3, r0, #7
 80111d8:	428b      	cmp	r3, r1
 80111da:	d301      	bcc.n	80111e0 <__divsi3+0x154>
 80111dc:	01cb      	lsls	r3, r1, #7
 80111de:	1ac0      	subs	r0, r0, r3
 80111e0:	4152      	adcs	r2, r2
 80111e2:	0983      	lsrs	r3, r0, #6
 80111e4:	428b      	cmp	r3, r1
 80111e6:	d301      	bcc.n	80111ec <__divsi3+0x160>
 80111e8:	018b      	lsls	r3, r1, #6
 80111ea:	1ac0      	subs	r0, r0, r3
 80111ec:	4152      	adcs	r2, r2
 80111ee:	0943      	lsrs	r3, r0, #5
 80111f0:	428b      	cmp	r3, r1
 80111f2:	d301      	bcc.n	80111f8 <__divsi3+0x16c>
 80111f4:	014b      	lsls	r3, r1, #5
 80111f6:	1ac0      	subs	r0, r0, r3
 80111f8:	4152      	adcs	r2, r2
 80111fa:	0903      	lsrs	r3, r0, #4
 80111fc:	428b      	cmp	r3, r1
 80111fe:	d301      	bcc.n	8011204 <__divsi3+0x178>
 8011200:	010b      	lsls	r3, r1, #4
 8011202:	1ac0      	subs	r0, r0, r3
 8011204:	4152      	adcs	r2, r2
 8011206:	08c3      	lsrs	r3, r0, #3
 8011208:	428b      	cmp	r3, r1
 801120a:	d301      	bcc.n	8011210 <__divsi3+0x184>
 801120c:	00cb      	lsls	r3, r1, #3
 801120e:	1ac0      	subs	r0, r0, r3
 8011210:	4152      	adcs	r2, r2
 8011212:	0883      	lsrs	r3, r0, #2
 8011214:	428b      	cmp	r3, r1
 8011216:	d301      	bcc.n	801121c <__divsi3+0x190>
 8011218:	008b      	lsls	r3, r1, #2
 801121a:	1ac0      	subs	r0, r0, r3
 801121c:	4152      	adcs	r2, r2
 801121e:	d2d9      	bcs.n	80111d4 <__divsi3+0x148>
 8011220:	0843      	lsrs	r3, r0, #1
 8011222:	428b      	cmp	r3, r1
 8011224:	d301      	bcc.n	801122a <__divsi3+0x19e>
 8011226:	004b      	lsls	r3, r1, #1
 8011228:	1ac0      	subs	r0, r0, r3
 801122a:	4152      	adcs	r2, r2
 801122c:	1a41      	subs	r1, r0, r1
 801122e:	d200      	bcs.n	8011232 <__divsi3+0x1a6>
 8011230:	4601      	mov	r1, r0
 8011232:	4663      	mov	r3, ip
 8011234:	4152      	adcs	r2, r2
 8011236:	105b      	asrs	r3, r3, #1
 8011238:	4610      	mov	r0, r2
 801123a:	d301      	bcc.n	8011240 <__divsi3+0x1b4>
 801123c:	4240      	negs	r0, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d500      	bpl.n	8011244 <__divsi3+0x1b8>
 8011242:	4249      	negs	r1, r1
 8011244:	4770      	bx	lr
 8011246:	4663      	mov	r3, ip
 8011248:	105b      	asrs	r3, r3, #1
 801124a:	d300      	bcc.n	801124e <__divsi3+0x1c2>
 801124c:	4240      	negs	r0, r0
 801124e:	b501      	push	{r0, lr}
 8011250:	2000      	movs	r0, #0
 8011252:	f000 f805 	bl	8011260 <__aeabi_idiv0>
 8011256:	bd02      	pop	{r1, pc}

08011258 <__aeabi_idivmod>:
 8011258:	2900      	cmp	r1, #0
 801125a:	d0f8      	beq.n	801124e <__divsi3+0x1c2>
 801125c:	e716      	b.n	801108c <__divsi3>
 801125e:	4770      	bx	lr

08011260 <__aeabi_idiv0>:
 8011260:	4770      	bx	lr
 8011262:	46c0      	nop			; (mov r8, r8)

08011264 <__aeabi_cdrcmple>:
 8011264:	4684      	mov	ip, r0
 8011266:	1c10      	adds	r0, r2, #0
 8011268:	4662      	mov	r2, ip
 801126a:	468c      	mov	ip, r1
 801126c:	1c19      	adds	r1, r3, #0
 801126e:	4663      	mov	r3, ip
 8011270:	e000      	b.n	8011274 <__aeabi_cdcmpeq>
 8011272:	46c0      	nop			; (mov r8, r8)

08011274 <__aeabi_cdcmpeq>:
 8011274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011276:	f001 f9ab 	bl	80125d0 <__ledf2>
 801127a:	2800      	cmp	r0, #0
 801127c:	d401      	bmi.n	8011282 <__aeabi_cdcmpeq+0xe>
 801127e:	2100      	movs	r1, #0
 8011280:	42c8      	cmn	r0, r1
 8011282:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08011284 <__aeabi_dcmpeq>:
 8011284:	b510      	push	{r4, lr}
 8011286:	f001 f903 	bl	8012490 <__eqdf2>
 801128a:	4240      	negs	r0, r0
 801128c:	3001      	adds	r0, #1
 801128e:	bd10      	pop	{r4, pc}

08011290 <__aeabi_dcmplt>:
 8011290:	b510      	push	{r4, lr}
 8011292:	f001 f99d 	bl	80125d0 <__ledf2>
 8011296:	2800      	cmp	r0, #0
 8011298:	db01      	blt.n	801129e <__aeabi_dcmplt+0xe>
 801129a:	2000      	movs	r0, #0
 801129c:	bd10      	pop	{r4, pc}
 801129e:	2001      	movs	r0, #1
 80112a0:	bd10      	pop	{r4, pc}
 80112a2:	46c0      	nop			; (mov r8, r8)

080112a4 <__aeabi_dcmple>:
 80112a4:	b510      	push	{r4, lr}
 80112a6:	f001 f993 	bl	80125d0 <__ledf2>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	dd01      	ble.n	80112b2 <__aeabi_dcmple+0xe>
 80112ae:	2000      	movs	r0, #0
 80112b0:	bd10      	pop	{r4, pc}
 80112b2:	2001      	movs	r0, #1
 80112b4:	bd10      	pop	{r4, pc}
 80112b6:	46c0      	nop			; (mov r8, r8)

080112b8 <__aeabi_dcmpgt>:
 80112b8:	b510      	push	{r4, lr}
 80112ba:	f001 f925 	bl	8012508 <__gedf2>
 80112be:	2800      	cmp	r0, #0
 80112c0:	dc01      	bgt.n	80112c6 <__aeabi_dcmpgt+0xe>
 80112c2:	2000      	movs	r0, #0
 80112c4:	bd10      	pop	{r4, pc}
 80112c6:	2001      	movs	r0, #1
 80112c8:	bd10      	pop	{r4, pc}
 80112ca:	46c0      	nop			; (mov r8, r8)

080112cc <__aeabi_dcmpge>:
 80112cc:	b510      	push	{r4, lr}
 80112ce:	f001 f91b 	bl	8012508 <__gedf2>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	da01      	bge.n	80112da <__aeabi_dcmpge+0xe>
 80112d6:	2000      	movs	r0, #0
 80112d8:	bd10      	pop	{r4, pc}
 80112da:	2001      	movs	r0, #1
 80112dc:	bd10      	pop	{r4, pc}
 80112de:	46c0      	nop			; (mov r8, r8)

080112e0 <__aeabi_cfrcmple>:
 80112e0:	4684      	mov	ip, r0
 80112e2:	1c08      	adds	r0, r1, #0
 80112e4:	4661      	mov	r1, ip
 80112e6:	e7ff      	b.n	80112e8 <__aeabi_cfcmpeq>

080112e8 <__aeabi_cfcmpeq>:
 80112e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112ea:	f000 f9a3 	bl	8011634 <__lesf2>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d401      	bmi.n	80112f6 <__aeabi_cfcmpeq+0xe>
 80112f2:	2100      	movs	r1, #0
 80112f4:	42c8      	cmn	r0, r1
 80112f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080112f8 <__aeabi_fcmpeq>:
 80112f8:	b510      	push	{r4, lr}
 80112fa:	f000 f925 	bl	8011548 <__eqsf2>
 80112fe:	4240      	negs	r0, r0
 8011300:	3001      	adds	r0, #1
 8011302:	bd10      	pop	{r4, pc}

08011304 <__aeabi_fcmplt>:
 8011304:	b510      	push	{r4, lr}
 8011306:	f000 f995 	bl	8011634 <__lesf2>
 801130a:	2800      	cmp	r0, #0
 801130c:	db01      	blt.n	8011312 <__aeabi_fcmplt+0xe>
 801130e:	2000      	movs	r0, #0
 8011310:	bd10      	pop	{r4, pc}
 8011312:	2001      	movs	r0, #1
 8011314:	bd10      	pop	{r4, pc}
 8011316:	46c0      	nop			; (mov r8, r8)

08011318 <__aeabi_fcmple>:
 8011318:	b510      	push	{r4, lr}
 801131a:	f000 f98b 	bl	8011634 <__lesf2>
 801131e:	2800      	cmp	r0, #0
 8011320:	dd01      	ble.n	8011326 <__aeabi_fcmple+0xe>
 8011322:	2000      	movs	r0, #0
 8011324:	bd10      	pop	{r4, pc}
 8011326:	2001      	movs	r0, #1
 8011328:	bd10      	pop	{r4, pc}
 801132a:	46c0      	nop			; (mov r8, r8)

0801132c <__aeabi_fcmpgt>:
 801132c:	b510      	push	{r4, lr}
 801132e:	f000 f933 	bl	8011598 <__gesf2>
 8011332:	2800      	cmp	r0, #0
 8011334:	dc01      	bgt.n	801133a <__aeabi_fcmpgt+0xe>
 8011336:	2000      	movs	r0, #0
 8011338:	bd10      	pop	{r4, pc}
 801133a:	2001      	movs	r0, #1
 801133c:	bd10      	pop	{r4, pc}
 801133e:	46c0      	nop			; (mov r8, r8)

08011340 <__aeabi_fcmpge>:
 8011340:	b510      	push	{r4, lr}
 8011342:	f000 f929 	bl	8011598 <__gesf2>
 8011346:	2800      	cmp	r0, #0
 8011348:	da01      	bge.n	801134e <__aeabi_fcmpge+0xe>
 801134a:	2000      	movs	r0, #0
 801134c:	bd10      	pop	{r4, pc}
 801134e:	2001      	movs	r0, #1
 8011350:	bd10      	pop	{r4, pc}
 8011352:	46c0      	nop			; (mov r8, r8)

08011354 <__aeabi_uldivmod>:
 8011354:	2b00      	cmp	r3, #0
 8011356:	d111      	bne.n	801137c <__aeabi_uldivmod+0x28>
 8011358:	2a00      	cmp	r2, #0
 801135a:	d10f      	bne.n	801137c <__aeabi_uldivmod+0x28>
 801135c:	2900      	cmp	r1, #0
 801135e:	d100      	bne.n	8011362 <__aeabi_uldivmod+0xe>
 8011360:	2800      	cmp	r0, #0
 8011362:	d002      	beq.n	801136a <__aeabi_uldivmod+0x16>
 8011364:	2100      	movs	r1, #0
 8011366:	43c9      	mvns	r1, r1
 8011368:	1c08      	adds	r0, r1, #0
 801136a:	b407      	push	{r0, r1, r2}
 801136c:	4802      	ldr	r0, [pc, #8]	; (8011378 <__aeabi_uldivmod+0x24>)
 801136e:	a102      	add	r1, pc, #8	; (adr r1, 8011378 <__aeabi_uldivmod+0x24>)
 8011370:	1840      	adds	r0, r0, r1
 8011372:	9002      	str	r0, [sp, #8]
 8011374:	bd03      	pop	{r0, r1, pc}
 8011376:	46c0      	nop			; (mov r8, r8)
 8011378:	fffffee9 	.word	0xfffffee9
 801137c:	b403      	push	{r0, r1}
 801137e:	4668      	mov	r0, sp
 8011380:	b501      	push	{r0, lr}
 8011382:	9802      	ldr	r0, [sp, #8]
 8011384:	f000 f81e 	bl	80113c4 <__udivmoddi4>
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	469e      	mov	lr, r3
 801138c:	b002      	add	sp, #8
 801138e:	bc0c      	pop	{r2, r3}
 8011390:	4770      	bx	lr
 8011392:	46c0      	nop			; (mov r8, r8)

08011394 <__aeabi_f2uiz>:
 8011394:	219e      	movs	r1, #158	; 0x9e
 8011396:	b510      	push	{r4, lr}
 8011398:	05c9      	lsls	r1, r1, #23
 801139a:	1c04      	adds	r4, r0, #0
 801139c:	f7ff ffd0 	bl	8011340 <__aeabi_fcmpge>
 80113a0:	2800      	cmp	r0, #0
 80113a2:	d103      	bne.n	80113ac <__aeabi_f2uiz+0x18>
 80113a4:	1c20      	adds	r0, r4, #0
 80113a6:	f000 f9ab 	bl	8011700 <__aeabi_f2iz>
 80113aa:	bd10      	pop	{r4, pc}
 80113ac:	219e      	movs	r1, #158	; 0x9e
 80113ae:	1c20      	adds	r0, r4, #0
 80113b0:	05c9      	lsls	r1, r1, #23
 80113b2:	f7ff fbe1 	bl	8010b78 <__aeabi_fsub>
 80113b6:	f000 f9a3 	bl	8011700 <__aeabi_f2iz>
 80113ba:	2380      	movs	r3, #128	; 0x80
 80113bc:	061b      	lsls	r3, r3, #24
 80113be:	469c      	mov	ip, r3
 80113c0:	4460      	add	r0, ip
 80113c2:	e7f2      	b.n	80113aa <__aeabi_f2uiz+0x16>

080113c4 <__udivmoddi4>:
 80113c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113c6:	464f      	mov	r7, r9
 80113c8:	4646      	mov	r6, r8
 80113ca:	46d6      	mov	lr, sl
 80113cc:	b5c0      	push	{r6, r7, lr}
 80113ce:	0004      	movs	r4, r0
 80113d0:	b082      	sub	sp, #8
 80113d2:	000d      	movs	r5, r1
 80113d4:	4691      	mov	r9, r2
 80113d6:	4698      	mov	r8, r3
 80113d8:	428b      	cmp	r3, r1
 80113da:	d82f      	bhi.n	801143c <__udivmoddi4+0x78>
 80113dc:	d02c      	beq.n	8011438 <__udivmoddi4+0x74>
 80113de:	4641      	mov	r1, r8
 80113e0:	4648      	mov	r0, r9
 80113e2:	f002 f8ab 	bl	801353c <__clzdi2>
 80113e6:	0029      	movs	r1, r5
 80113e8:	0006      	movs	r6, r0
 80113ea:	0020      	movs	r0, r4
 80113ec:	f002 f8a6 	bl	801353c <__clzdi2>
 80113f0:	1a33      	subs	r3, r6, r0
 80113f2:	469c      	mov	ip, r3
 80113f4:	3b20      	subs	r3, #32
 80113f6:	469a      	mov	sl, r3
 80113f8:	d500      	bpl.n	80113fc <__udivmoddi4+0x38>
 80113fa:	e076      	b.n	80114ea <__udivmoddi4+0x126>
 80113fc:	464b      	mov	r3, r9
 80113fe:	4652      	mov	r2, sl
 8011400:	4093      	lsls	r3, r2
 8011402:	001f      	movs	r7, r3
 8011404:	464b      	mov	r3, r9
 8011406:	4662      	mov	r2, ip
 8011408:	4093      	lsls	r3, r2
 801140a:	001e      	movs	r6, r3
 801140c:	42af      	cmp	r7, r5
 801140e:	d828      	bhi.n	8011462 <__udivmoddi4+0x9e>
 8011410:	d025      	beq.n	801145e <__udivmoddi4+0x9a>
 8011412:	4653      	mov	r3, sl
 8011414:	1ba4      	subs	r4, r4, r6
 8011416:	41bd      	sbcs	r5, r7
 8011418:	2b00      	cmp	r3, #0
 801141a:	da00      	bge.n	801141e <__udivmoddi4+0x5a>
 801141c:	e07b      	b.n	8011516 <__udivmoddi4+0x152>
 801141e:	2200      	movs	r2, #0
 8011420:	2300      	movs	r3, #0
 8011422:	9200      	str	r2, [sp, #0]
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	2301      	movs	r3, #1
 8011428:	4652      	mov	r2, sl
 801142a:	4093      	lsls	r3, r2
 801142c:	9301      	str	r3, [sp, #4]
 801142e:	2301      	movs	r3, #1
 8011430:	4662      	mov	r2, ip
 8011432:	4093      	lsls	r3, r2
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	e018      	b.n	801146a <__udivmoddi4+0xa6>
 8011438:	4282      	cmp	r2, r0
 801143a:	d9d0      	bls.n	80113de <__udivmoddi4+0x1a>
 801143c:	2200      	movs	r2, #0
 801143e:	2300      	movs	r3, #0
 8011440:	9200      	str	r2, [sp, #0]
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011446:	2b00      	cmp	r3, #0
 8011448:	d001      	beq.n	801144e <__udivmoddi4+0x8a>
 801144a:	601c      	str	r4, [r3, #0]
 801144c:	605d      	str	r5, [r3, #4]
 801144e:	9800      	ldr	r0, [sp, #0]
 8011450:	9901      	ldr	r1, [sp, #4]
 8011452:	b002      	add	sp, #8
 8011454:	bc1c      	pop	{r2, r3, r4}
 8011456:	4690      	mov	r8, r2
 8011458:	4699      	mov	r9, r3
 801145a:	46a2      	mov	sl, r4
 801145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801145e:	42a3      	cmp	r3, r4
 8011460:	d9d7      	bls.n	8011412 <__udivmoddi4+0x4e>
 8011462:	2200      	movs	r2, #0
 8011464:	2300      	movs	r3, #0
 8011466:	9200      	str	r2, [sp, #0]
 8011468:	9301      	str	r3, [sp, #4]
 801146a:	4663      	mov	r3, ip
 801146c:	2b00      	cmp	r3, #0
 801146e:	d0e9      	beq.n	8011444 <__udivmoddi4+0x80>
 8011470:	07fb      	lsls	r3, r7, #31
 8011472:	4698      	mov	r8, r3
 8011474:	4641      	mov	r1, r8
 8011476:	0872      	lsrs	r2, r6, #1
 8011478:	430a      	orrs	r2, r1
 801147a:	087b      	lsrs	r3, r7, #1
 801147c:	4666      	mov	r6, ip
 801147e:	e00e      	b.n	801149e <__udivmoddi4+0xda>
 8011480:	42ab      	cmp	r3, r5
 8011482:	d101      	bne.n	8011488 <__udivmoddi4+0xc4>
 8011484:	42a2      	cmp	r2, r4
 8011486:	d80c      	bhi.n	80114a2 <__udivmoddi4+0xde>
 8011488:	1aa4      	subs	r4, r4, r2
 801148a:	419d      	sbcs	r5, r3
 801148c:	2001      	movs	r0, #1
 801148e:	1924      	adds	r4, r4, r4
 8011490:	416d      	adcs	r5, r5
 8011492:	2100      	movs	r1, #0
 8011494:	3e01      	subs	r6, #1
 8011496:	1824      	adds	r4, r4, r0
 8011498:	414d      	adcs	r5, r1
 801149a:	2e00      	cmp	r6, #0
 801149c:	d006      	beq.n	80114ac <__udivmoddi4+0xe8>
 801149e:	42ab      	cmp	r3, r5
 80114a0:	d9ee      	bls.n	8011480 <__udivmoddi4+0xbc>
 80114a2:	3e01      	subs	r6, #1
 80114a4:	1924      	adds	r4, r4, r4
 80114a6:	416d      	adcs	r5, r5
 80114a8:	2e00      	cmp	r6, #0
 80114aa:	d1f8      	bne.n	801149e <__udivmoddi4+0xda>
 80114ac:	9800      	ldr	r0, [sp, #0]
 80114ae:	9901      	ldr	r1, [sp, #4]
 80114b0:	4653      	mov	r3, sl
 80114b2:	1900      	adds	r0, r0, r4
 80114b4:	4169      	adcs	r1, r5
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	db23      	blt.n	8011502 <__udivmoddi4+0x13e>
 80114ba:	002b      	movs	r3, r5
 80114bc:	4652      	mov	r2, sl
 80114be:	40d3      	lsrs	r3, r2
 80114c0:	002a      	movs	r2, r5
 80114c2:	4664      	mov	r4, ip
 80114c4:	40e2      	lsrs	r2, r4
 80114c6:	001c      	movs	r4, r3
 80114c8:	4653      	mov	r3, sl
 80114ca:	0015      	movs	r5, r2
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	db2d      	blt.n	801152c <__udivmoddi4+0x168>
 80114d0:	0026      	movs	r6, r4
 80114d2:	4657      	mov	r7, sl
 80114d4:	40be      	lsls	r6, r7
 80114d6:	0033      	movs	r3, r6
 80114d8:	0026      	movs	r6, r4
 80114da:	4667      	mov	r7, ip
 80114dc:	40be      	lsls	r6, r7
 80114de:	0032      	movs	r2, r6
 80114e0:	1a80      	subs	r0, r0, r2
 80114e2:	4199      	sbcs	r1, r3
 80114e4:	9000      	str	r0, [sp, #0]
 80114e6:	9101      	str	r1, [sp, #4]
 80114e8:	e7ac      	b.n	8011444 <__udivmoddi4+0x80>
 80114ea:	4662      	mov	r2, ip
 80114ec:	2320      	movs	r3, #32
 80114ee:	1a9b      	subs	r3, r3, r2
 80114f0:	464a      	mov	r2, r9
 80114f2:	40da      	lsrs	r2, r3
 80114f4:	4661      	mov	r1, ip
 80114f6:	0013      	movs	r3, r2
 80114f8:	4642      	mov	r2, r8
 80114fa:	408a      	lsls	r2, r1
 80114fc:	0017      	movs	r7, r2
 80114fe:	431f      	orrs	r7, r3
 8011500:	e780      	b.n	8011404 <__udivmoddi4+0x40>
 8011502:	4662      	mov	r2, ip
 8011504:	2320      	movs	r3, #32
 8011506:	1a9b      	subs	r3, r3, r2
 8011508:	002a      	movs	r2, r5
 801150a:	4666      	mov	r6, ip
 801150c:	409a      	lsls	r2, r3
 801150e:	0023      	movs	r3, r4
 8011510:	40f3      	lsrs	r3, r6
 8011512:	4313      	orrs	r3, r2
 8011514:	e7d4      	b.n	80114c0 <__udivmoddi4+0xfc>
 8011516:	4662      	mov	r2, ip
 8011518:	2320      	movs	r3, #32
 801151a:	2100      	movs	r1, #0
 801151c:	1a9b      	subs	r3, r3, r2
 801151e:	2200      	movs	r2, #0
 8011520:	9100      	str	r1, [sp, #0]
 8011522:	9201      	str	r2, [sp, #4]
 8011524:	2201      	movs	r2, #1
 8011526:	40da      	lsrs	r2, r3
 8011528:	9201      	str	r2, [sp, #4]
 801152a:	e780      	b.n	801142e <__udivmoddi4+0x6a>
 801152c:	2320      	movs	r3, #32
 801152e:	4662      	mov	r2, ip
 8011530:	0026      	movs	r6, r4
 8011532:	1a9b      	subs	r3, r3, r2
 8011534:	40de      	lsrs	r6, r3
 8011536:	002f      	movs	r7, r5
 8011538:	46b0      	mov	r8, r6
 801153a:	4666      	mov	r6, ip
 801153c:	40b7      	lsls	r7, r6
 801153e:	4646      	mov	r6, r8
 8011540:	003b      	movs	r3, r7
 8011542:	4333      	orrs	r3, r6
 8011544:	e7c8      	b.n	80114d8 <__udivmoddi4+0x114>
 8011546:	46c0      	nop			; (mov r8, r8)

08011548 <__eqsf2>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	0042      	lsls	r2, r0, #1
 801154c:	024e      	lsls	r6, r1, #9
 801154e:	004c      	lsls	r4, r1, #1
 8011550:	0245      	lsls	r5, r0, #9
 8011552:	0a6d      	lsrs	r5, r5, #9
 8011554:	0e12      	lsrs	r2, r2, #24
 8011556:	0fc3      	lsrs	r3, r0, #31
 8011558:	0a76      	lsrs	r6, r6, #9
 801155a:	0e24      	lsrs	r4, r4, #24
 801155c:	0fc9      	lsrs	r1, r1, #31
 801155e:	2aff      	cmp	r2, #255	; 0xff
 8011560:	d00f      	beq.n	8011582 <__eqsf2+0x3a>
 8011562:	2cff      	cmp	r4, #255	; 0xff
 8011564:	d011      	beq.n	801158a <__eqsf2+0x42>
 8011566:	2001      	movs	r0, #1
 8011568:	42a2      	cmp	r2, r4
 801156a:	d000      	beq.n	801156e <__eqsf2+0x26>
 801156c:	bd70      	pop	{r4, r5, r6, pc}
 801156e:	42b5      	cmp	r5, r6
 8011570:	d1fc      	bne.n	801156c <__eqsf2+0x24>
 8011572:	428b      	cmp	r3, r1
 8011574:	d00d      	beq.n	8011592 <__eqsf2+0x4a>
 8011576:	2a00      	cmp	r2, #0
 8011578:	d1f8      	bne.n	801156c <__eqsf2+0x24>
 801157a:	0028      	movs	r0, r5
 801157c:	1e45      	subs	r5, r0, #1
 801157e:	41a8      	sbcs	r0, r5
 8011580:	e7f4      	b.n	801156c <__eqsf2+0x24>
 8011582:	2001      	movs	r0, #1
 8011584:	2d00      	cmp	r5, #0
 8011586:	d1f1      	bne.n	801156c <__eqsf2+0x24>
 8011588:	e7eb      	b.n	8011562 <__eqsf2+0x1a>
 801158a:	2001      	movs	r0, #1
 801158c:	2e00      	cmp	r6, #0
 801158e:	d1ed      	bne.n	801156c <__eqsf2+0x24>
 8011590:	e7e9      	b.n	8011566 <__eqsf2+0x1e>
 8011592:	2000      	movs	r0, #0
 8011594:	e7ea      	b.n	801156c <__eqsf2+0x24>
 8011596:	46c0      	nop			; (mov r8, r8)

08011598 <__gesf2>:
 8011598:	b570      	push	{r4, r5, r6, lr}
 801159a:	004a      	lsls	r2, r1, #1
 801159c:	024e      	lsls	r6, r1, #9
 801159e:	0245      	lsls	r5, r0, #9
 80115a0:	0044      	lsls	r4, r0, #1
 80115a2:	0a6d      	lsrs	r5, r5, #9
 80115a4:	0e24      	lsrs	r4, r4, #24
 80115a6:	0fc3      	lsrs	r3, r0, #31
 80115a8:	0a76      	lsrs	r6, r6, #9
 80115aa:	0e12      	lsrs	r2, r2, #24
 80115ac:	0fc9      	lsrs	r1, r1, #31
 80115ae:	2cff      	cmp	r4, #255	; 0xff
 80115b0:	d015      	beq.n	80115de <__gesf2+0x46>
 80115b2:	2aff      	cmp	r2, #255	; 0xff
 80115b4:	d00e      	beq.n	80115d4 <__gesf2+0x3c>
 80115b6:	2c00      	cmp	r4, #0
 80115b8:	d115      	bne.n	80115e6 <__gesf2+0x4e>
 80115ba:	2a00      	cmp	r2, #0
 80115bc:	d101      	bne.n	80115c2 <__gesf2+0x2a>
 80115be:	2e00      	cmp	r6, #0
 80115c0:	d01c      	beq.n	80115fc <__gesf2+0x64>
 80115c2:	2d00      	cmp	r5, #0
 80115c4:	d014      	beq.n	80115f0 <__gesf2+0x58>
 80115c6:	428b      	cmp	r3, r1
 80115c8:	d027      	beq.n	801161a <__gesf2+0x82>
 80115ca:	2002      	movs	r0, #2
 80115cc:	3b01      	subs	r3, #1
 80115ce:	4018      	ands	r0, r3
 80115d0:	3801      	subs	r0, #1
 80115d2:	bd70      	pop	{r4, r5, r6, pc}
 80115d4:	2e00      	cmp	r6, #0
 80115d6:	d0ee      	beq.n	80115b6 <__gesf2+0x1e>
 80115d8:	2002      	movs	r0, #2
 80115da:	4240      	negs	r0, r0
 80115dc:	e7f9      	b.n	80115d2 <__gesf2+0x3a>
 80115de:	2d00      	cmp	r5, #0
 80115e0:	d1fa      	bne.n	80115d8 <__gesf2+0x40>
 80115e2:	2aff      	cmp	r2, #255	; 0xff
 80115e4:	d00e      	beq.n	8011604 <__gesf2+0x6c>
 80115e6:	2a00      	cmp	r2, #0
 80115e8:	d10e      	bne.n	8011608 <__gesf2+0x70>
 80115ea:	2e00      	cmp	r6, #0
 80115ec:	d0ed      	beq.n	80115ca <__gesf2+0x32>
 80115ee:	e00b      	b.n	8011608 <__gesf2+0x70>
 80115f0:	2301      	movs	r3, #1
 80115f2:	3901      	subs	r1, #1
 80115f4:	4399      	bics	r1, r3
 80115f6:	0008      	movs	r0, r1
 80115f8:	3001      	adds	r0, #1
 80115fa:	e7ea      	b.n	80115d2 <__gesf2+0x3a>
 80115fc:	2000      	movs	r0, #0
 80115fe:	2d00      	cmp	r5, #0
 8011600:	d0e7      	beq.n	80115d2 <__gesf2+0x3a>
 8011602:	e7e2      	b.n	80115ca <__gesf2+0x32>
 8011604:	2e00      	cmp	r6, #0
 8011606:	d1e7      	bne.n	80115d8 <__gesf2+0x40>
 8011608:	428b      	cmp	r3, r1
 801160a:	d1de      	bne.n	80115ca <__gesf2+0x32>
 801160c:	4294      	cmp	r4, r2
 801160e:	dd05      	ble.n	801161c <__gesf2+0x84>
 8011610:	2102      	movs	r1, #2
 8011612:	1e58      	subs	r0, r3, #1
 8011614:	4008      	ands	r0, r1
 8011616:	3801      	subs	r0, #1
 8011618:	e7db      	b.n	80115d2 <__gesf2+0x3a>
 801161a:	2400      	movs	r4, #0
 801161c:	42a2      	cmp	r2, r4
 801161e:	dc04      	bgt.n	801162a <__gesf2+0x92>
 8011620:	42b5      	cmp	r5, r6
 8011622:	d8d2      	bhi.n	80115ca <__gesf2+0x32>
 8011624:	2000      	movs	r0, #0
 8011626:	42b5      	cmp	r5, r6
 8011628:	d2d3      	bcs.n	80115d2 <__gesf2+0x3a>
 801162a:	1e58      	subs	r0, r3, #1
 801162c:	2301      	movs	r3, #1
 801162e:	4398      	bics	r0, r3
 8011630:	3001      	adds	r0, #1
 8011632:	e7ce      	b.n	80115d2 <__gesf2+0x3a>

08011634 <__lesf2>:
 8011634:	b530      	push	{r4, r5, lr}
 8011636:	0042      	lsls	r2, r0, #1
 8011638:	0244      	lsls	r4, r0, #9
 801163a:	024d      	lsls	r5, r1, #9
 801163c:	0fc3      	lsrs	r3, r0, #31
 801163e:	0048      	lsls	r0, r1, #1
 8011640:	0a64      	lsrs	r4, r4, #9
 8011642:	0e12      	lsrs	r2, r2, #24
 8011644:	0a6d      	lsrs	r5, r5, #9
 8011646:	0e00      	lsrs	r0, r0, #24
 8011648:	0fc9      	lsrs	r1, r1, #31
 801164a:	2aff      	cmp	r2, #255	; 0xff
 801164c:	d012      	beq.n	8011674 <__lesf2+0x40>
 801164e:	28ff      	cmp	r0, #255	; 0xff
 8011650:	d00c      	beq.n	801166c <__lesf2+0x38>
 8011652:	2a00      	cmp	r2, #0
 8011654:	d112      	bne.n	801167c <__lesf2+0x48>
 8011656:	2800      	cmp	r0, #0
 8011658:	d119      	bne.n	801168e <__lesf2+0x5a>
 801165a:	2d00      	cmp	r5, #0
 801165c:	d117      	bne.n	801168e <__lesf2+0x5a>
 801165e:	2c00      	cmp	r4, #0
 8011660:	d02b      	beq.n	80116ba <__lesf2+0x86>
 8011662:	2002      	movs	r0, #2
 8011664:	3b01      	subs	r3, #1
 8011666:	4018      	ands	r0, r3
 8011668:	3801      	subs	r0, #1
 801166a:	e026      	b.n	80116ba <__lesf2+0x86>
 801166c:	2d00      	cmp	r5, #0
 801166e:	d0f0      	beq.n	8011652 <__lesf2+0x1e>
 8011670:	2002      	movs	r0, #2
 8011672:	e022      	b.n	80116ba <__lesf2+0x86>
 8011674:	2c00      	cmp	r4, #0
 8011676:	d1fb      	bne.n	8011670 <__lesf2+0x3c>
 8011678:	28ff      	cmp	r0, #255	; 0xff
 801167a:	d01f      	beq.n	80116bc <__lesf2+0x88>
 801167c:	2800      	cmp	r0, #0
 801167e:	d11f      	bne.n	80116c0 <__lesf2+0x8c>
 8011680:	2d00      	cmp	r5, #0
 8011682:	d11d      	bne.n	80116c0 <__lesf2+0x8c>
 8011684:	2002      	movs	r0, #2
 8011686:	3b01      	subs	r3, #1
 8011688:	4018      	ands	r0, r3
 801168a:	3801      	subs	r0, #1
 801168c:	e015      	b.n	80116ba <__lesf2+0x86>
 801168e:	2c00      	cmp	r4, #0
 8011690:	d00e      	beq.n	80116b0 <__lesf2+0x7c>
 8011692:	428b      	cmp	r3, r1
 8011694:	d1e5      	bne.n	8011662 <__lesf2+0x2e>
 8011696:	2200      	movs	r2, #0
 8011698:	4290      	cmp	r0, r2
 801169a:	dc04      	bgt.n	80116a6 <__lesf2+0x72>
 801169c:	42ac      	cmp	r4, r5
 801169e:	d8e0      	bhi.n	8011662 <__lesf2+0x2e>
 80116a0:	2000      	movs	r0, #0
 80116a2:	42ac      	cmp	r4, r5
 80116a4:	d209      	bcs.n	80116ba <__lesf2+0x86>
 80116a6:	1e58      	subs	r0, r3, #1
 80116a8:	2301      	movs	r3, #1
 80116aa:	4398      	bics	r0, r3
 80116ac:	3001      	adds	r0, #1
 80116ae:	e004      	b.n	80116ba <__lesf2+0x86>
 80116b0:	2301      	movs	r3, #1
 80116b2:	3901      	subs	r1, #1
 80116b4:	4399      	bics	r1, r3
 80116b6:	0008      	movs	r0, r1
 80116b8:	3001      	adds	r0, #1
 80116ba:	bd30      	pop	{r4, r5, pc}
 80116bc:	2d00      	cmp	r5, #0
 80116be:	d1d7      	bne.n	8011670 <__lesf2+0x3c>
 80116c0:	428b      	cmp	r3, r1
 80116c2:	d1ce      	bne.n	8011662 <__lesf2+0x2e>
 80116c4:	4282      	cmp	r2, r0
 80116c6:	dde7      	ble.n	8011698 <__lesf2+0x64>
 80116c8:	2102      	movs	r1, #2
 80116ca:	1e58      	subs	r0, r3, #1
 80116cc:	4008      	ands	r0, r1
 80116ce:	3801      	subs	r0, #1
 80116d0:	e7f3      	b.n	80116ba <__lesf2+0x86>
 80116d2:	46c0      	nop			; (mov r8, r8)

080116d4 <__aeabi_fcmpun>:
 80116d4:	0242      	lsls	r2, r0, #9
 80116d6:	024b      	lsls	r3, r1, #9
 80116d8:	0040      	lsls	r0, r0, #1
 80116da:	0049      	lsls	r1, r1, #1
 80116dc:	0a52      	lsrs	r2, r2, #9
 80116de:	0a5b      	lsrs	r3, r3, #9
 80116e0:	0e09      	lsrs	r1, r1, #24
 80116e2:	0e00      	lsrs	r0, r0, #24
 80116e4:	28ff      	cmp	r0, #255	; 0xff
 80116e6:	d006      	beq.n	80116f6 <__aeabi_fcmpun+0x22>
 80116e8:	2000      	movs	r0, #0
 80116ea:	29ff      	cmp	r1, #255	; 0xff
 80116ec:	d102      	bne.n	80116f4 <__aeabi_fcmpun+0x20>
 80116ee:	0018      	movs	r0, r3
 80116f0:	1e43      	subs	r3, r0, #1
 80116f2:	4198      	sbcs	r0, r3
 80116f4:	4770      	bx	lr
 80116f6:	38fe      	subs	r0, #254	; 0xfe
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	d1fb      	bne.n	80116f4 <__aeabi_fcmpun+0x20>
 80116fc:	e7f4      	b.n	80116e8 <__aeabi_fcmpun+0x14>
 80116fe:	46c0      	nop			; (mov r8, r8)

08011700 <__aeabi_f2iz>:
 8011700:	0241      	lsls	r1, r0, #9
 8011702:	0042      	lsls	r2, r0, #1
 8011704:	0fc3      	lsrs	r3, r0, #31
 8011706:	0a49      	lsrs	r1, r1, #9
 8011708:	0e12      	lsrs	r2, r2, #24
 801170a:	2000      	movs	r0, #0
 801170c:	2a7e      	cmp	r2, #126	; 0x7e
 801170e:	d90d      	bls.n	801172c <__aeabi_f2iz+0x2c>
 8011710:	2a9d      	cmp	r2, #157	; 0x9d
 8011712:	d80c      	bhi.n	801172e <__aeabi_f2iz+0x2e>
 8011714:	2080      	movs	r0, #128	; 0x80
 8011716:	0400      	lsls	r0, r0, #16
 8011718:	4301      	orrs	r1, r0
 801171a:	2a95      	cmp	r2, #149	; 0x95
 801171c:	dc0a      	bgt.n	8011734 <__aeabi_f2iz+0x34>
 801171e:	2096      	movs	r0, #150	; 0x96
 8011720:	1a82      	subs	r2, r0, r2
 8011722:	40d1      	lsrs	r1, r2
 8011724:	4248      	negs	r0, r1
 8011726:	2b00      	cmp	r3, #0
 8011728:	d100      	bne.n	801172c <__aeabi_f2iz+0x2c>
 801172a:	0008      	movs	r0, r1
 801172c:	4770      	bx	lr
 801172e:	4a03      	ldr	r2, [pc, #12]	; (801173c <__aeabi_f2iz+0x3c>)
 8011730:	1898      	adds	r0, r3, r2
 8011732:	e7fb      	b.n	801172c <__aeabi_f2iz+0x2c>
 8011734:	3a96      	subs	r2, #150	; 0x96
 8011736:	4091      	lsls	r1, r2
 8011738:	e7f4      	b.n	8011724 <__aeabi_f2iz+0x24>
 801173a:	46c0      	nop			; (mov r8, r8)
 801173c:	7fffffff 	.word	0x7fffffff

08011740 <__aeabi_i2f>:
 8011740:	b570      	push	{r4, r5, r6, lr}
 8011742:	2800      	cmp	r0, #0
 8011744:	d03d      	beq.n	80117c2 <__aeabi_i2f+0x82>
 8011746:	17c3      	asrs	r3, r0, #31
 8011748:	18c5      	adds	r5, r0, r3
 801174a:	405d      	eors	r5, r3
 801174c:	0fc4      	lsrs	r4, r0, #31
 801174e:	0028      	movs	r0, r5
 8011750:	f7ff fbd6 	bl	8010f00 <__clzsi2>
 8011754:	229e      	movs	r2, #158	; 0x9e
 8011756:	1a12      	subs	r2, r2, r0
 8011758:	2a96      	cmp	r2, #150	; 0x96
 801175a:	dc07      	bgt.n	801176c <__aeabi_i2f+0x2c>
 801175c:	b2d2      	uxtb	r2, r2
 801175e:	2808      	cmp	r0, #8
 8011760:	dd33      	ble.n	80117ca <__aeabi_i2f+0x8a>
 8011762:	3808      	subs	r0, #8
 8011764:	4085      	lsls	r5, r0
 8011766:	0268      	lsls	r0, r5, #9
 8011768:	0a40      	lsrs	r0, r0, #9
 801176a:	e023      	b.n	80117b4 <__aeabi_i2f+0x74>
 801176c:	2a99      	cmp	r2, #153	; 0x99
 801176e:	dd0b      	ble.n	8011788 <__aeabi_i2f+0x48>
 8011770:	2305      	movs	r3, #5
 8011772:	0029      	movs	r1, r5
 8011774:	1a1b      	subs	r3, r3, r0
 8011776:	40d9      	lsrs	r1, r3
 8011778:	0003      	movs	r3, r0
 801177a:	331b      	adds	r3, #27
 801177c:	409d      	lsls	r5, r3
 801177e:	002b      	movs	r3, r5
 8011780:	1e5d      	subs	r5, r3, #1
 8011782:	41ab      	sbcs	r3, r5
 8011784:	4319      	orrs	r1, r3
 8011786:	000d      	movs	r5, r1
 8011788:	2805      	cmp	r0, #5
 801178a:	dd01      	ble.n	8011790 <__aeabi_i2f+0x50>
 801178c:	1f43      	subs	r3, r0, #5
 801178e:	409d      	lsls	r5, r3
 8011790:	002b      	movs	r3, r5
 8011792:	490f      	ldr	r1, [pc, #60]	; (80117d0 <__aeabi_i2f+0x90>)
 8011794:	400b      	ands	r3, r1
 8011796:	076e      	lsls	r6, r5, #29
 8011798:	d009      	beq.n	80117ae <__aeabi_i2f+0x6e>
 801179a:	260f      	movs	r6, #15
 801179c:	4035      	ands	r5, r6
 801179e:	2d04      	cmp	r5, #4
 80117a0:	d005      	beq.n	80117ae <__aeabi_i2f+0x6e>
 80117a2:	3304      	adds	r3, #4
 80117a4:	015d      	lsls	r5, r3, #5
 80117a6:	d502      	bpl.n	80117ae <__aeabi_i2f+0x6e>
 80117a8:	229f      	movs	r2, #159	; 0x9f
 80117aa:	400b      	ands	r3, r1
 80117ac:	1a12      	subs	r2, r2, r0
 80117ae:	019b      	lsls	r3, r3, #6
 80117b0:	0a58      	lsrs	r0, r3, #9
 80117b2:	b2d2      	uxtb	r2, r2
 80117b4:	0240      	lsls	r0, r0, #9
 80117b6:	05d2      	lsls	r2, r2, #23
 80117b8:	0a40      	lsrs	r0, r0, #9
 80117ba:	07e4      	lsls	r4, r4, #31
 80117bc:	4310      	orrs	r0, r2
 80117be:	4320      	orrs	r0, r4
 80117c0:	bd70      	pop	{r4, r5, r6, pc}
 80117c2:	2400      	movs	r4, #0
 80117c4:	2200      	movs	r2, #0
 80117c6:	2000      	movs	r0, #0
 80117c8:	e7f4      	b.n	80117b4 <__aeabi_i2f+0x74>
 80117ca:	0268      	lsls	r0, r5, #9
 80117cc:	0a40      	lsrs	r0, r0, #9
 80117ce:	e7f1      	b.n	80117b4 <__aeabi_i2f+0x74>
 80117d0:	fbffffff 	.word	0xfbffffff

080117d4 <__aeabi_ui2f>:
 80117d4:	b570      	push	{r4, r5, r6, lr}
 80117d6:	1e04      	subs	r4, r0, #0
 80117d8:	d034      	beq.n	8011844 <__aeabi_ui2f+0x70>
 80117da:	f7ff fb91 	bl	8010f00 <__clzsi2>
 80117de:	229e      	movs	r2, #158	; 0x9e
 80117e0:	1a12      	subs	r2, r2, r0
 80117e2:	2a96      	cmp	r2, #150	; 0x96
 80117e4:	dc07      	bgt.n	80117f6 <__aeabi_ui2f+0x22>
 80117e6:	b2d2      	uxtb	r2, r2
 80117e8:	2808      	cmp	r0, #8
 80117ea:	dd2e      	ble.n	801184a <__aeabi_ui2f+0x76>
 80117ec:	3808      	subs	r0, #8
 80117ee:	4084      	lsls	r4, r0
 80117f0:	0260      	lsls	r0, r4, #9
 80117f2:	0a40      	lsrs	r0, r0, #9
 80117f4:	e021      	b.n	801183a <__aeabi_ui2f+0x66>
 80117f6:	2a99      	cmp	r2, #153	; 0x99
 80117f8:	dd09      	ble.n	801180e <__aeabi_ui2f+0x3a>
 80117fa:	0003      	movs	r3, r0
 80117fc:	0021      	movs	r1, r4
 80117fe:	331b      	adds	r3, #27
 8011800:	4099      	lsls	r1, r3
 8011802:	1e4b      	subs	r3, r1, #1
 8011804:	4199      	sbcs	r1, r3
 8011806:	2305      	movs	r3, #5
 8011808:	1a1b      	subs	r3, r3, r0
 801180a:	40dc      	lsrs	r4, r3
 801180c:	430c      	orrs	r4, r1
 801180e:	2805      	cmp	r0, #5
 8011810:	dd01      	ble.n	8011816 <__aeabi_ui2f+0x42>
 8011812:	1f43      	subs	r3, r0, #5
 8011814:	409c      	lsls	r4, r3
 8011816:	0023      	movs	r3, r4
 8011818:	490d      	ldr	r1, [pc, #52]	; (8011850 <__aeabi_ui2f+0x7c>)
 801181a:	400b      	ands	r3, r1
 801181c:	0765      	lsls	r5, r4, #29
 801181e:	d009      	beq.n	8011834 <__aeabi_ui2f+0x60>
 8011820:	250f      	movs	r5, #15
 8011822:	402c      	ands	r4, r5
 8011824:	2c04      	cmp	r4, #4
 8011826:	d005      	beq.n	8011834 <__aeabi_ui2f+0x60>
 8011828:	3304      	adds	r3, #4
 801182a:	015c      	lsls	r4, r3, #5
 801182c:	d502      	bpl.n	8011834 <__aeabi_ui2f+0x60>
 801182e:	229f      	movs	r2, #159	; 0x9f
 8011830:	400b      	ands	r3, r1
 8011832:	1a12      	subs	r2, r2, r0
 8011834:	019b      	lsls	r3, r3, #6
 8011836:	0a58      	lsrs	r0, r3, #9
 8011838:	b2d2      	uxtb	r2, r2
 801183a:	0240      	lsls	r0, r0, #9
 801183c:	05d2      	lsls	r2, r2, #23
 801183e:	0a40      	lsrs	r0, r0, #9
 8011840:	4310      	orrs	r0, r2
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	2200      	movs	r2, #0
 8011846:	2000      	movs	r0, #0
 8011848:	e7f7      	b.n	801183a <__aeabi_ui2f+0x66>
 801184a:	0260      	lsls	r0, r4, #9
 801184c:	0a40      	lsrs	r0, r0, #9
 801184e:	e7f4      	b.n	801183a <__aeabi_ui2f+0x66>
 8011850:	fbffffff 	.word	0xfbffffff

08011854 <__aeabi_dadd>:
 8011854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011856:	464f      	mov	r7, r9
 8011858:	4646      	mov	r6, r8
 801185a:	46d6      	mov	lr, sl
 801185c:	000c      	movs	r4, r1
 801185e:	0309      	lsls	r1, r1, #12
 8011860:	b5c0      	push	{r6, r7, lr}
 8011862:	0a49      	lsrs	r1, r1, #9
 8011864:	0f47      	lsrs	r7, r0, #29
 8011866:	005e      	lsls	r6, r3, #1
 8011868:	4339      	orrs	r1, r7
 801186a:	031f      	lsls	r7, r3, #12
 801186c:	0fdb      	lsrs	r3, r3, #31
 801186e:	469c      	mov	ip, r3
 8011870:	0065      	lsls	r5, r4, #1
 8011872:	0a7b      	lsrs	r3, r7, #9
 8011874:	0f57      	lsrs	r7, r2, #29
 8011876:	431f      	orrs	r7, r3
 8011878:	0d6d      	lsrs	r5, r5, #21
 801187a:	0fe4      	lsrs	r4, r4, #31
 801187c:	0d76      	lsrs	r6, r6, #21
 801187e:	46a1      	mov	r9, r4
 8011880:	00c0      	lsls	r0, r0, #3
 8011882:	46b8      	mov	r8, r7
 8011884:	00d2      	lsls	r2, r2, #3
 8011886:	1bab      	subs	r3, r5, r6
 8011888:	4564      	cmp	r4, ip
 801188a:	d07b      	beq.n	8011984 <__aeabi_dadd+0x130>
 801188c:	2b00      	cmp	r3, #0
 801188e:	dd5f      	ble.n	8011950 <__aeabi_dadd+0xfc>
 8011890:	2e00      	cmp	r6, #0
 8011892:	d000      	beq.n	8011896 <__aeabi_dadd+0x42>
 8011894:	e0a4      	b.n	80119e0 <__aeabi_dadd+0x18c>
 8011896:	003e      	movs	r6, r7
 8011898:	4316      	orrs	r6, r2
 801189a:	d100      	bne.n	801189e <__aeabi_dadd+0x4a>
 801189c:	e112      	b.n	8011ac4 <__aeabi_dadd+0x270>
 801189e:	1e5e      	subs	r6, r3, #1
 80118a0:	2e00      	cmp	r6, #0
 80118a2:	d000      	beq.n	80118a6 <__aeabi_dadd+0x52>
 80118a4:	e19e      	b.n	8011be4 <__aeabi_dadd+0x390>
 80118a6:	1a87      	subs	r7, r0, r2
 80118a8:	4643      	mov	r3, r8
 80118aa:	42b8      	cmp	r0, r7
 80118ac:	4180      	sbcs	r0, r0
 80118ae:	2501      	movs	r5, #1
 80118b0:	1ac9      	subs	r1, r1, r3
 80118b2:	4240      	negs	r0, r0
 80118b4:	1a09      	subs	r1, r1, r0
 80118b6:	020b      	lsls	r3, r1, #8
 80118b8:	d400      	bmi.n	80118bc <__aeabi_dadd+0x68>
 80118ba:	e131      	b.n	8011b20 <__aeabi_dadd+0x2cc>
 80118bc:	0249      	lsls	r1, r1, #9
 80118be:	0a4e      	lsrs	r6, r1, #9
 80118c0:	2e00      	cmp	r6, #0
 80118c2:	d100      	bne.n	80118c6 <__aeabi_dadd+0x72>
 80118c4:	e16e      	b.n	8011ba4 <__aeabi_dadd+0x350>
 80118c6:	0030      	movs	r0, r6
 80118c8:	f7ff fb1a 	bl	8010f00 <__clzsi2>
 80118cc:	0003      	movs	r3, r0
 80118ce:	3b08      	subs	r3, #8
 80118d0:	2b1f      	cmp	r3, #31
 80118d2:	dd00      	ble.n	80118d6 <__aeabi_dadd+0x82>
 80118d4:	e161      	b.n	8011b9a <__aeabi_dadd+0x346>
 80118d6:	2220      	movs	r2, #32
 80118d8:	0039      	movs	r1, r7
 80118da:	1ad2      	subs	r2, r2, r3
 80118dc:	409e      	lsls	r6, r3
 80118de:	40d1      	lsrs	r1, r2
 80118e0:	409f      	lsls	r7, r3
 80118e2:	430e      	orrs	r6, r1
 80118e4:	429d      	cmp	r5, r3
 80118e6:	dd00      	ble.n	80118ea <__aeabi_dadd+0x96>
 80118e8:	e151      	b.n	8011b8e <__aeabi_dadd+0x33a>
 80118ea:	1b5d      	subs	r5, r3, r5
 80118ec:	1c6b      	adds	r3, r5, #1
 80118ee:	2b1f      	cmp	r3, #31
 80118f0:	dd00      	ble.n	80118f4 <__aeabi_dadd+0xa0>
 80118f2:	e17c      	b.n	8011bee <__aeabi_dadd+0x39a>
 80118f4:	2120      	movs	r1, #32
 80118f6:	1ac9      	subs	r1, r1, r3
 80118f8:	003d      	movs	r5, r7
 80118fa:	0030      	movs	r0, r6
 80118fc:	408f      	lsls	r7, r1
 80118fe:	4088      	lsls	r0, r1
 8011900:	40dd      	lsrs	r5, r3
 8011902:	1e79      	subs	r1, r7, #1
 8011904:	418f      	sbcs	r7, r1
 8011906:	0031      	movs	r1, r6
 8011908:	2207      	movs	r2, #7
 801190a:	4328      	orrs	r0, r5
 801190c:	40d9      	lsrs	r1, r3
 801190e:	2500      	movs	r5, #0
 8011910:	4307      	orrs	r7, r0
 8011912:	403a      	ands	r2, r7
 8011914:	2a00      	cmp	r2, #0
 8011916:	d009      	beq.n	801192c <__aeabi_dadd+0xd8>
 8011918:	230f      	movs	r3, #15
 801191a:	403b      	ands	r3, r7
 801191c:	2b04      	cmp	r3, #4
 801191e:	d005      	beq.n	801192c <__aeabi_dadd+0xd8>
 8011920:	1d3b      	adds	r3, r7, #4
 8011922:	42bb      	cmp	r3, r7
 8011924:	41bf      	sbcs	r7, r7
 8011926:	427f      	negs	r7, r7
 8011928:	19c9      	adds	r1, r1, r7
 801192a:	001f      	movs	r7, r3
 801192c:	020b      	lsls	r3, r1, #8
 801192e:	d400      	bmi.n	8011932 <__aeabi_dadd+0xde>
 8011930:	e226      	b.n	8011d80 <__aeabi_dadd+0x52c>
 8011932:	1c6a      	adds	r2, r5, #1
 8011934:	4bc6      	ldr	r3, [pc, #792]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011936:	0555      	lsls	r5, r2, #21
 8011938:	0d6d      	lsrs	r5, r5, #21
 801193a:	429a      	cmp	r2, r3
 801193c:	d100      	bne.n	8011940 <__aeabi_dadd+0xec>
 801193e:	e106      	b.n	8011b4e <__aeabi_dadd+0x2fa>
 8011940:	4ac4      	ldr	r2, [pc, #784]	; (8011c54 <__aeabi_dadd+0x400>)
 8011942:	08ff      	lsrs	r7, r7, #3
 8011944:	400a      	ands	r2, r1
 8011946:	0753      	lsls	r3, r2, #29
 8011948:	0252      	lsls	r2, r2, #9
 801194a:	433b      	orrs	r3, r7
 801194c:	0b12      	lsrs	r2, r2, #12
 801194e:	e08e      	b.n	8011a6e <__aeabi_dadd+0x21a>
 8011950:	2b00      	cmp	r3, #0
 8011952:	d000      	beq.n	8011956 <__aeabi_dadd+0x102>
 8011954:	e0b8      	b.n	8011ac8 <__aeabi_dadd+0x274>
 8011956:	1c6b      	adds	r3, r5, #1
 8011958:	055b      	lsls	r3, r3, #21
 801195a:	0d5b      	lsrs	r3, r3, #21
 801195c:	2b01      	cmp	r3, #1
 801195e:	dc00      	bgt.n	8011962 <__aeabi_dadd+0x10e>
 8011960:	e130      	b.n	8011bc4 <__aeabi_dadd+0x370>
 8011962:	1a87      	subs	r7, r0, r2
 8011964:	4643      	mov	r3, r8
 8011966:	42b8      	cmp	r0, r7
 8011968:	41b6      	sbcs	r6, r6
 801196a:	1acb      	subs	r3, r1, r3
 801196c:	4276      	negs	r6, r6
 801196e:	1b9e      	subs	r6, r3, r6
 8011970:	0233      	lsls	r3, r6, #8
 8011972:	d500      	bpl.n	8011976 <__aeabi_dadd+0x122>
 8011974:	e14c      	b.n	8011c10 <__aeabi_dadd+0x3bc>
 8011976:	003b      	movs	r3, r7
 8011978:	4333      	orrs	r3, r6
 801197a:	d1a1      	bne.n	80118c0 <__aeabi_dadd+0x6c>
 801197c:	2200      	movs	r2, #0
 801197e:	2400      	movs	r4, #0
 8011980:	2500      	movs	r5, #0
 8011982:	e070      	b.n	8011a66 <__aeabi_dadd+0x212>
 8011984:	2b00      	cmp	r3, #0
 8011986:	dc00      	bgt.n	801198a <__aeabi_dadd+0x136>
 8011988:	e0e5      	b.n	8011b56 <__aeabi_dadd+0x302>
 801198a:	2e00      	cmp	r6, #0
 801198c:	d100      	bne.n	8011990 <__aeabi_dadd+0x13c>
 801198e:	e083      	b.n	8011a98 <__aeabi_dadd+0x244>
 8011990:	4eaf      	ldr	r6, [pc, #700]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011992:	42b5      	cmp	r5, r6
 8011994:	d060      	beq.n	8011a58 <__aeabi_dadd+0x204>
 8011996:	2680      	movs	r6, #128	; 0x80
 8011998:	0436      	lsls	r6, r6, #16
 801199a:	4337      	orrs	r7, r6
 801199c:	46b8      	mov	r8, r7
 801199e:	2b38      	cmp	r3, #56	; 0x38
 80119a0:	dc00      	bgt.n	80119a4 <__aeabi_dadd+0x150>
 80119a2:	e13e      	b.n	8011c22 <__aeabi_dadd+0x3ce>
 80119a4:	4643      	mov	r3, r8
 80119a6:	4313      	orrs	r3, r2
 80119a8:	001f      	movs	r7, r3
 80119aa:	1e7a      	subs	r2, r7, #1
 80119ac:	4197      	sbcs	r7, r2
 80119ae:	183f      	adds	r7, r7, r0
 80119b0:	4287      	cmp	r7, r0
 80119b2:	4180      	sbcs	r0, r0
 80119b4:	4240      	negs	r0, r0
 80119b6:	1809      	adds	r1, r1, r0
 80119b8:	020b      	lsls	r3, r1, #8
 80119ba:	d400      	bmi.n	80119be <__aeabi_dadd+0x16a>
 80119bc:	e0b0      	b.n	8011b20 <__aeabi_dadd+0x2cc>
 80119be:	4ba4      	ldr	r3, [pc, #656]	; (8011c50 <__aeabi_dadd+0x3fc>)
 80119c0:	3501      	adds	r5, #1
 80119c2:	429d      	cmp	r5, r3
 80119c4:	d100      	bne.n	80119c8 <__aeabi_dadd+0x174>
 80119c6:	e0c3      	b.n	8011b50 <__aeabi_dadd+0x2fc>
 80119c8:	4aa2      	ldr	r2, [pc, #648]	; (8011c54 <__aeabi_dadd+0x400>)
 80119ca:	087b      	lsrs	r3, r7, #1
 80119cc:	400a      	ands	r2, r1
 80119ce:	2101      	movs	r1, #1
 80119d0:	400f      	ands	r7, r1
 80119d2:	431f      	orrs	r7, r3
 80119d4:	0851      	lsrs	r1, r2, #1
 80119d6:	07d3      	lsls	r3, r2, #31
 80119d8:	2207      	movs	r2, #7
 80119da:	431f      	orrs	r7, r3
 80119dc:	403a      	ands	r2, r7
 80119de:	e799      	b.n	8011914 <__aeabi_dadd+0xc0>
 80119e0:	4e9b      	ldr	r6, [pc, #620]	; (8011c50 <__aeabi_dadd+0x3fc>)
 80119e2:	42b5      	cmp	r5, r6
 80119e4:	d038      	beq.n	8011a58 <__aeabi_dadd+0x204>
 80119e6:	2680      	movs	r6, #128	; 0x80
 80119e8:	0436      	lsls	r6, r6, #16
 80119ea:	4337      	orrs	r7, r6
 80119ec:	46b8      	mov	r8, r7
 80119ee:	2b38      	cmp	r3, #56	; 0x38
 80119f0:	dd00      	ble.n	80119f4 <__aeabi_dadd+0x1a0>
 80119f2:	e0dc      	b.n	8011bae <__aeabi_dadd+0x35a>
 80119f4:	2b1f      	cmp	r3, #31
 80119f6:	dc00      	bgt.n	80119fa <__aeabi_dadd+0x1a6>
 80119f8:	e130      	b.n	8011c5c <__aeabi_dadd+0x408>
 80119fa:	001e      	movs	r6, r3
 80119fc:	4647      	mov	r7, r8
 80119fe:	3e20      	subs	r6, #32
 8011a00:	40f7      	lsrs	r7, r6
 8011a02:	46bc      	mov	ip, r7
 8011a04:	2b20      	cmp	r3, #32
 8011a06:	d004      	beq.n	8011a12 <__aeabi_dadd+0x1be>
 8011a08:	2640      	movs	r6, #64	; 0x40
 8011a0a:	1af3      	subs	r3, r6, r3
 8011a0c:	4646      	mov	r6, r8
 8011a0e:	409e      	lsls	r6, r3
 8011a10:	4332      	orrs	r2, r6
 8011a12:	0017      	movs	r7, r2
 8011a14:	4663      	mov	r3, ip
 8011a16:	1e7a      	subs	r2, r7, #1
 8011a18:	4197      	sbcs	r7, r2
 8011a1a:	431f      	orrs	r7, r3
 8011a1c:	e0cc      	b.n	8011bb8 <__aeabi_dadd+0x364>
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d100      	bne.n	8011a24 <__aeabi_dadd+0x1d0>
 8011a22:	e204      	b.n	8011e2e <__aeabi_dadd+0x5da>
 8011a24:	4643      	mov	r3, r8
 8011a26:	4313      	orrs	r3, r2
 8011a28:	d100      	bne.n	8011a2c <__aeabi_dadd+0x1d8>
 8011a2a:	e159      	b.n	8011ce0 <__aeabi_dadd+0x48c>
 8011a2c:	074b      	lsls	r3, r1, #29
 8011a2e:	08c0      	lsrs	r0, r0, #3
 8011a30:	4318      	orrs	r0, r3
 8011a32:	2380      	movs	r3, #128	; 0x80
 8011a34:	08c9      	lsrs	r1, r1, #3
 8011a36:	031b      	lsls	r3, r3, #12
 8011a38:	4219      	tst	r1, r3
 8011a3a:	d008      	beq.n	8011a4e <__aeabi_dadd+0x1fa>
 8011a3c:	4645      	mov	r5, r8
 8011a3e:	08ed      	lsrs	r5, r5, #3
 8011a40:	421d      	tst	r5, r3
 8011a42:	d104      	bne.n	8011a4e <__aeabi_dadd+0x1fa>
 8011a44:	4643      	mov	r3, r8
 8011a46:	08d0      	lsrs	r0, r2, #3
 8011a48:	0759      	lsls	r1, r3, #29
 8011a4a:	4308      	orrs	r0, r1
 8011a4c:	0029      	movs	r1, r5
 8011a4e:	0f42      	lsrs	r2, r0, #29
 8011a50:	00c9      	lsls	r1, r1, #3
 8011a52:	4d7f      	ldr	r5, [pc, #508]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011a54:	4311      	orrs	r1, r2
 8011a56:	00c0      	lsls	r0, r0, #3
 8011a58:	074b      	lsls	r3, r1, #29
 8011a5a:	08ca      	lsrs	r2, r1, #3
 8011a5c:	497c      	ldr	r1, [pc, #496]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011a5e:	08c0      	lsrs	r0, r0, #3
 8011a60:	4303      	orrs	r3, r0
 8011a62:	428d      	cmp	r5, r1
 8011a64:	d068      	beq.n	8011b38 <__aeabi_dadd+0x2e4>
 8011a66:	0312      	lsls	r2, r2, #12
 8011a68:	056d      	lsls	r5, r5, #21
 8011a6a:	0b12      	lsrs	r2, r2, #12
 8011a6c:	0d6d      	lsrs	r5, r5, #21
 8011a6e:	2100      	movs	r1, #0
 8011a70:	0312      	lsls	r2, r2, #12
 8011a72:	0018      	movs	r0, r3
 8011a74:	0b13      	lsrs	r3, r2, #12
 8011a76:	0d0a      	lsrs	r2, r1, #20
 8011a78:	0512      	lsls	r2, r2, #20
 8011a7a:	431a      	orrs	r2, r3
 8011a7c:	4b76      	ldr	r3, [pc, #472]	; (8011c58 <__aeabi_dadd+0x404>)
 8011a7e:	052d      	lsls	r5, r5, #20
 8011a80:	4013      	ands	r3, r2
 8011a82:	432b      	orrs	r3, r5
 8011a84:	005b      	lsls	r3, r3, #1
 8011a86:	07e4      	lsls	r4, r4, #31
 8011a88:	085b      	lsrs	r3, r3, #1
 8011a8a:	4323      	orrs	r3, r4
 8011a8c:	0019      	movs	r1, r3
 8011a8e:	bc1c      	pop	{r2, r3, r4}
 8011a90:	4690      	mov	r8, r2
 8011a92:	4699      	mov	r9, r3
 8011a94:	46a2      	mov	sl, r4
 8011a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a98:	003e      	movs	r6, r7
 8011a9a:	4316      	orrs	r6, r2
 8011a9c:	d012      	beq.n	8011ac4 <__aeabi_dadd+0x270>
 8011a9e:	1e5e      	subs	r6, r3, #1
 8011aa0:	2e00      	cmp	r6, #0
 8011aa2:	d000      	beq.n	8011aa6 <__aeabi_dadd+0x252>
 8011aa4:	e100      	b.n	8011ca8 <__aeabi_dadd+0x454>
 8011aa6:	1887      	adds	r7, r0, r2
 8011aa8:	4287      	cmp	r7, r0
 8011aaa:	4180      	sbcs	r0, r0
 8011aac:	4441      	add	r1, r8
 8011aae:	4240      	negs	r0, r0
 8011ab0:	1809      	adds	r1, r1, r0
 8011ab2:	2501      	movs	r5, #1
 8011ab4:	020b      	lsls	r3, r1, #8
 8011ab6:	d533      	bpl.n	8011b20 <__aeabi_dadd+0x2cc>
 8011ab8:	2502      	movs	r5, #2
 8011aba:	e785      	b.n	80119c8 <__aeabi_dadd+0x174>
 8011abc:	4664      	mov	r4, ip
 8011abe:	0033      	movs	r3, r6
 8011ac0:	4641      	mov	r1, r8
 8011ac2:	0010      	movs	r0, r2
 8011ac4:	001d      	movs	r5, r3
 8011ac6:	e7c7      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011ac8:	2d00      	cmp	r5, #0
 8011aca:	d000      	beq.n	8011ace <__aeabi_dadd+0x27a>
 8011acc:	e0da      	b.n	8011c84 <__aeabi_dadd+0x430>
 8011ace:	000c      	movs	r4, r1
 8011ad0:	4304      	orrs	r4, r0
 8011ad2:	d0f3      	beq.n	8011abc <__aeabi_dadd+0x268>
 8011ad4:	1c5c      	adds	r4, r3, #1
 8011ad6:	d100      	bne.n	8011ada <__aeabi_dadd+0x286>
 8011ad8:	e19f      	b.n	8011e1a <__aeabi_dadd+0x5c6>
 8011ada:	4c5d      	ldr	r4, [pc, #372]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011adc:	42a6      	cmp	r6, r4
 8011ade:	d100      	bne.n	8011ae2 <__aeabi_dadd+0x28e>
 8011ae0:	e12f      	b.n	8011d42 <__aeabi_dadd+0x4ee>
 8011ae2:	43db      	mvns	r3, r3
 8011ae4:	2b38      	cmp	r3, #56	; 0x38
 8011ae6:	dd00      	ble.n	8011aea <__aeabi_dadd+0x296>
 8011ae8:	e166      	b.n	8011db8 <__aeabi_dadd+0x564>
 8011aea:	2b1f      	cmp	r3, #31
 8011aec:	dd00      	ble.n	8011af0 <__aeabi_dadd+0x29c>
 8011aee:	e183      	b.n	8011df8 <__aeabi_dadd+0x5a4>
 8011af0:	2420      	movs	r4, #32
 8011af2:	0005      	movs	r5, r0
 8011af4:	1ae4      	subs	r4, r4, r3
 8011af6:	000f      	movs	r7, r1
 8011af8:	40dd      	lsrs	r5, r3
 8011afa:	40d9      	lsrs	r1, r3
 8011afc:	40a0      	lsls	r0, r4
 8011afe:	4643      	mov	r3, r8
 8011b00:	40a7      	lsls	r7, r4
 8011b02:	1a5b      	subs	r3, r3, r1
 8011b04:	1e44      	subs	r4, r0, #1
 8011b06:	41a0      	sbcs	r0, r4
 8011b08:	4698      	mov	r8, r3
 8011b0a:	432f      	orrs	r7, r5
 8011b0c:	4338      	orrs	r0, r7
 8011b0e:	1a17      	subs	r7, r2, r0
 8011b10:	42ba      	cmp	r2, r7
 8011b12:	4192      	sbcs	r2, r2
 8011b14:	4643      	mov	r3, r8
 8011b16:	4252      	negs	r2, r2
 8011b18:	1a99      	subs	r1, r3, r2
 8011b1a:	4664      	mov	r4, ip
 8011b1c:	0035      	movs	r5, r6
 8011b1e:	e6ca      	b.n	80118b6 <__aeabi_dadd+0x62>
 8011b20:	2207      	movs	r2, #7
 8011b22:	403a      	ands	r2, r7
 8011b24:	2a00      	cmp	r2, #0
 8011b26:	d000      	beq.n	8011b2a <__aeabi_dadd+0x2d6>
 8011b28:	e6f6      	b.n	8011918 <__aeabi_dadd+0xc4>
 8011b2a:	074b      	lsls	r3, r1, #29
 8011b2c:	08ca      	lsrs	r2, r1, #3
 8011b2e:	4948      	ldr	r1, [pc, #288]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011b30:	08ff      	lsrs	r7, r7, #3
 8011b32:	433b      	orrs	r3, r7
 8011b34:	428d      	cmp	r5, r1
 8011b36:	d196      	bne.n	8011a66 <__aeabi_dadd+0x212>
 8011b38:	0019      	movs	r1, r3
 8011b3a:	4311      	orrs	r1, r2
 8011b3c:	d100      	bne.n	8011b40 <__aeabi_dadd+0x2ec>
 8011b3e:	e19e      	b.n	8011e7e <__aeabi_dadd+0x62a>
 8011b40:	2180      	movs	r1, #128	; 0x80
 8011b42:	0309      	lsls	r1, r1, #12
 8011b44:	430a      	orrs	r2, r1
 8011b46:	0312      	lsls	r2, r2, #12
 8011b48:	0b12      	lsrs	r2, r2, #12
 8011b4a:	4d41      	ldr	r5, [pc, #260]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011b4c:	e78f      	b.n	8011a6e <__aeabi_dadd+0x21a>
 8011b4e:	0015      	movs	r5, r2
 8011b50:	2200      	movs	r2, #0
 8011b52:	2300      	movs	r3, #0
 8011b54:	e78b      	b.n	8011a6e <__aeabi_dadd+0x21a>
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d000      	beq.n	8011b5c <__aeabi_dadd+0x308>
 8011b5a:	e0c7      	b.n	8011cec <__aeabi_dadd+0x498>
 8011b5c:	1c6b      	adds	r3, r5, #1
 8011b5e:	055f      	lsls	r7, r3, #21
 8011b60:	0d7f      	lsrs	r7, r7, #21
 8011b62:	2f01      	cmp	r7, #1
 8011b64:	dc00      	bgt.n	8011b68 <__aeabi_dadd+0x314>
 8011b66:	e0f1      	b.n	8011d4c <__aeabi_dadd+0x4f8>
 8011b68:	4d39      	ldr	r5, [pc, #228]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011b6a:	42ab      	cmp	r3, r5
 8011b6c:	d100      	bne.n	8011b70 <__aeabi_dadd+0x31c>
 8011b6e:	e0b9      	b.n	8011ce4 <__aeabi_dadd+0x490>
 8011b70:	1885      	adds	r5, r0, r2
 8011b72:	000a      	movs	r2, r1
 8011b74:	4285      	cmp	r5, r0
 8011b76:	4189      	sbcs	r1, r1
 8011b78:	4442      	add	r2, r8
 8011b7a:	4249      	negs	r1, r1
 8011b7c:	1851      	adds	r1, r2, r1
 8011b7e:	2207      	movs	r2, #7
 8011b80:	07cf      	lsls	r7, r1, #31
 8011b82:	086d      	lsrs	r5, r5, #1
 8011b84:	432f      	orrs	r7, r5
 8011b86:	0849      	lsrs	r1, r1, #1
 8011b88:	403a      	ands	r2, r7
 8011b8a:	001d      	movs	r5, r3
 8011b8c:	e6c2      	b.n	8011914 <__aeabi_dadd+0xc0>
 8011b8e:	2207      	movs	r2, #7
 8011b90:	4930      	ldr	r1, [pc, #192]	; (8011c54 <__aeabi_dadd+0x400>)
 8011b92:	1aed      	subs	r5, r5, r3
 8011b94:	4031      	ands	r1, r6
 8011b96:	403a      	ands	r2, r7
 8011b98:	e6bc      	b.n	8011914 <__aeabi_dadd+0xc0>
 8011b9a:	003e      	movs	r6, r7
 8011b9c:	3828      	subs	r0, #40	; 0x28
 8011b9e:	4086      	lsls	r6, r0
 8011ba0:	2700      	movs	r7, #0
 8011ba2:	e69f      	b.n	80118e4 <__aeabi_dadd+0x90>
 8011ba4:	0038      	movs	r0, r7
 8011ba6:	f7ff f9ab 	bl	8010f00 <__clzsi2>
 8011baa:	3020      	adds	r0, #32
 8011bac:	e68e      	b.n	80118cc <__aeabi_dadd+0x78>
 8011bae:	4643      	mov	r3, r8
 8011bb0:	4313      	orrs	r3, r2
 8011bb2:	001f      	movs	r7, r3
 8011bb4:	1e7a      	subs	r2, r7, #1
 8011bb6:	4197      	sbcs	r7, r2
 8011bb8:	1bc7      	subs	r7, r0, r7
 8011bba:	42b8      	cmp	r0, r7
 8011bbc:	4180      	sbcs	r0, r0
 8011bbe:	4240      	negs	r0, r0
 8011bc0:	1a09      	subs	r1, r1, r0
 8011bc2:	e678      	b.n	80118b6 <__aeabi_dadd+0x62>
 8011bc4:	000e      	movs	r6, r1
 8011bc6:	003b      	movs	r3, r7
 8011bc8:	4306      	orrs	r6, r0
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	2d00      	cmp	r5, #0
 8011bce:	d161      	bne.n	8011c94 <__aeabi_dadd+0x440>
 8011bd0:	2e00      	cmp	r6, #0
 8011bd2:	d000      	beq.n	8011bd6 <__aeabi_dadd+0x382>
 8011bd4:	e0f4      	b.n	8011dc0 <__aeabi_dadd+0x56c>
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d100      	bne.n	8011bdc <__aeabi_dadd+0x388>
 8011bda:	e11b      	b.n	8011e14 <__aeabi_dadd+0x5c0>
 8011bdc:	4664      	mov	r4, ip
 8011bde:	0039      	movs	r1, r7
 8011be0:	0010      	movs	r0, r2
 8011be2:	e739      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011be4:	4f1a      	ldr	r7, [pc, #104]	; (8011c50 <__aeabi_dadd+0x3fc>)
 8011be6:	42bb      	cmp	r3, r7
 8011be8:	d07a      	beq.n	8011ce0 <__aeabi_dadd+0x48c>
 8011bea:	0033      	movs	r3, r6
 8011bec:	e6ff      	b.n	80119ee <__aeabi_dadd+0x19a>
 8011bee:	0030      	movs	r0, r6
 8011bf0:	3d1f      	subs	r5, #31
 8011bf2:	40e8      	lsrs	r0, r5
 8011bf4:	2b20      	cmp	r3, #32
 8011bf6:	d003      	beq.n	8011c00 <__aeabi_dadd+0x3ac>
 8011bf8:	2140      	movs	r1, #64	; 0x40
 8011bfa:	1acb      	subs	r3, r1, r3
 8011bfc:	409e      	lsls	r6, r3
 8011bfe:	4337      	orrs	r7, r6
 8011c00:	1e7b      	subs	r3, r7, #1
 8011c02:	419f      	sbcs	r7, r3
 8011c04:	2207      	movs	r2, #7
 8011c06:	4307      	orrs	r7, r0
 8011c08:	403a      	ands	r2, r7
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	2500      	movs	r5, #0
 8011c0e:	e789      	b.n	8011b24 <__aeabi_dadd+0x2d0>
 8011c10:	1a17      	subs	r7, r2, r0
 8011c12:	4643      	mov	r3, r8
 8011c14:	42ba      	cmp	r2, r7
 8011c16:	41b6      	sbcs	r6, r6
 8011c18:	1a59      	subs	r1, r3, r1
 8011c1a:	4276      	negs	r6, r6
 8011c1c:	1b8e      	subs	r6, r1, r6
 8011c1e:	4664      	mov	r4, ip
 8011c20:	e64e      	b.n	80118c0 <__aeabi_dadd+0x6c>
 8011c22:	2b1f      	cmp	r3, #31
 8011c24:	dd00      	ble.n	8011c28 <__aeabi_dadd+0x3d4>
 8011c26:	e0ad      	b.n	8011d84 <__aeabi_dadd+0x530>
 8011c28:	2620      	movs	r6, #32
 8011c2a:	4647      	mov	r7, r8
 8011c2c:	1af6      	subs	r6, r6, r3
 8011c2e:	40b7      	lsls	r7, r6
 8011c30:	46b9      	mov	r9, r7
 8011c32:	0017      	movs	r7, r2
 8011c34:	46b2      	mov	sl, r6
 8011c36:	40df      	lsrs	r7, r3
 8011c38:	464e      	mov	r6, r9
 8011c3a:	433e      	orrs	r6, r7
 8011c3c:	0037      	movs	r7, r6
 8011c3e:	4656      	mov	r6, sl
 8011c40:	40b2      	lsls	r2, r6
 8011c42:	1e56      	subs	r6, r2, #1
 8011c44:	41b2      	sbcs	r2, r6
 8011c46:	4317      	orrs	r7, r2
 8011c48:	4642      	mov	r2, r8
 8011c4a:	40da      	lsrs	r2, r3
 8011c4c:	1889      	adds	r1, r1, r2
 8011c4e:	e6ae      	b.n	80119ae <__aeabi_dadd+0x15a>
 8011c50:	000007ff 	.word	0x000007ff
 8011c54:	ff7fffff 	.word	0xff7fffff
 8011c58:	800fffff 	.word	0x800fffff
 8011c5c:	2620      	movs	r6, #32
 8011c5e:	4647      	mov	r7, r8
 8011c60:	1af6      	subs	r6, r6, r3
 8011c62:	40b7      	lsls	r7, r6
 8011c64:	46b9      	mov	r9, r7
 8011c66:	0017      	movs	r7, r2
 8011c68:	46b2      	mov	sl, r6
 8011c6a:	40df      	lsrs	r7, r3
 8011c6c:	464e      	mov	r6, r9
 8011c6e:	433e      	orrs	r6, r7
 8011c70:	0037      	movs	r7, r6
 8011c72:	4656      	mov	r6, sl
 8011c74:	40b2      	lsls	r2, r6
 8011c76:	1e56      	subs	r6, r2, #1
 8011c78:	41b2      	sbcs	r2, r6
 8011c7a:	4317      	orrs	r7, r2
 8011c7c:	4642      	mov	r2, r8
 8011c7e:	40da      	lsrs	r2, r3
 8011c80:	1a89      	subs	r1, r1, r2
 8011c82:	e799      	b.n	8011bb8 <__aeabi_dadd+0x364>
 8011c84:	4c7f      	ldr	r4, [pc, #508]	; (8011e84 <__aeabi_dadd+0x630>)
 8011c86:	42a6      	cmp	r6, r4
 8011c88:	d05b      	beq.n	8011d42 <__aeabi_dadd+0x4ee>
 8011c8a:	2480      	movs	r4, #128	; 0x80
 8011c8c:	0424      	lsls	r4, r4, #16
 8011c8e:	425b      	negs	r3, r3
 8011c90:	4321      	orrs	r1, r4
 8011c92:	e727      	b.n	8011ae4 <__aeabi_dadd+0x290>
 8011c94:	2e00      	cmp	r6, #0
 8011c96:	d10c      	bne.n	8011cb2 <__aeabi_dadd+0x45e>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d100      	bne.n	8011c9e <__aeabi_dadd+0x44a>
 8011c9c:	e0cb      	b.n	8011e36 <__aeabi_dadd+0x5e2>
 8011c9e:	4664      	mov	r4, ip
 8011ca0:	0039      	movs	r1, r7
 8011ca2:	0010      	movs	r0, r2
 8011ca4:	4d77      	ldr	r5, [pc, #476]	; (8011e84 <__aeabi_dadd+0x630>)
 8011ca6:	e6d7      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011ca8:	4f76      	ldr	r7, [pc, #472]	; (8011e84 <__aeabi_dadd+0x630>)
 8011caa:	42bb      	cmp	r3, r7
 8011cac:	d018      	beq.n	8011ce0 <__aeabi_dadd+0x48c>
 8011cae:	0033      	movs	r3, r6
 8011cb0:	e675      	b.n	801199e <__aeabi_dadd+0x14a>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d014      	beq.n	8011ce0 <__aeabi_dadd+0x48c>
 8011cb6:	074b      	lsls	r3, r1, #29
 8011cb8:	08c0      	lsrs	r0, r0, #3
 8011cba:	4318      	orrs	r0, r3
 8011cbc:	2380      	movs	r3, #128	; 0x80
 8011cbe:	08c9      	lsrs	r1, r1, #3
 8011cc0:	031b      	lsls	r3, r3, #12
 8011cc2:	4219      	tst	r1, r3
 8011cc4:	d007      	beq.n	8011cd6 <__aeabi_dadd+0x482>
 8011cc6:	08fc      	lsrs	r4, r7, #3
 8011cc8:	421c      	tst	r4, r3
 8011cca:	d104      	bne.n	8011cd6 <__aeabi_dadd+0x482>
 8011ccc:	0779      	lsls	r1, r7, #29
 8011cce:	08d0      	lsrs	r0, r2, #3
 8011cd0:	4308      	orrs	r0, r1
 8011cd2:	46e1      	mov	r9, ip
 8011cd4:	0021      	movs	r1, r4
 8011cd6:	464c      	mov	r4, r9
 8011cd8:	0f42      	lsrs	r2, r0, #29
 8011cda:	00c9      	lsls	r1, r1, #3
 8011cdc:	4311      	orrs	r1, r2
 8011cde:	00c0      	lsls	r0, r0, #3
 8011ce0:	4d68      	ldr	r5, [pc, #416]	; (8011e84 <__aeabi_dadd+0x630>)
 8011ce2:	e6b9      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011ce4:	001d      	movs	r5, r3
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	2300      	movs	r3, #0
 8011cea:	e6c0      	b.n	8011a6e <__aeabi_dadd+0x21a>
 8011cec:	2d00      	cmp	r5, #0
 8011cee:	d15b      	bne.n	8011da8 <__aeabi_dadd+0x554>
 8011cf0:	000d      	movs	r5, r1
 8011cf2:	4305      	orrs	r5, r0
 8011cf4:	d100      	bne.n	8011cf8 <__aeabi_dadd+0x4a4>
 8011cf6:	e6e2      	b.n	8011abe <__aeabi_dadd+0x26a>
 8011cf8:	1c5d      	adds	r5, r3, #1
 8011cfa:	d100      	bne.n	8011cfe <__aeabi_dadd+0x4aa>
 8011cfc:	e0b0      	b.n	8011e60 <__aeabi_dadd+0x60c>
 8011cfe:	4d61      	ldr	r5, [pc, #388]	; (8011e84 <__aeabi_dadd+0x630>)
 8011d00:	42ae      	cmp	r6, r5
 8011d02:	d01f      	beq.n	8011d44 <__aeabi_dadd+0x4f0>
 8011d04:	43db      	mvns	r3, r3
 8011d06:	2b38      	cmp	r3, #56	; 0x38
 8011d08:	dc71      	bgt.n	8011dee <__aeabi_dadd+0x59a>
 8011d0a:	2b1f      	cmp	r3, #31
 8011d0c:	dd00      	ble.n	8011d10 <__aeabi_dadd+0x4bc>
 8011d0e:	e096      	b.n	8011e3e <__aeabi_dadd+0x5ea>
 8011d10:	2520      	movs	r5, #32
 8011d12:	000f      	movs	r7, r1
 8011d14:	1aed      	subs	r5, r5, r3
 8011d16:	40af      	lsls	r7, r5
 8011d18:	46b9      	mov	r9, r7
 8011d1a:	0007      	movs	r7, r0
 8011d1c:	46aa      	mov	sl, r5
 8011d1e:	40df      	lsrs	r7, r3
 8011d20:	464d      	mov	r5, r9
 8011d22:	433d      	orrs	r5, r7
 8011d24:	002f      	movs	r7, r5
 8011d26:	4655      	mov	r5, sl
 8011d28:	40a8      	lsls	r0, r5
 8011d2a:	40d9      	lsrs	r1, r3
 8011d2c:	1e45      	subs	r5, r0, #1
 8011d2e:	41a8      	sbcs	r0, r5
 8011d30:	4488      	add	r8, r1
 8011d32:	4307      	orrs	r7, r0
 8011d34:	18bf      	adds	r7, r7, r2
 8011d36:	4297      	cmp	r7, r2
 8011d38:	4192      	sbcs	r2, r2
 8011d3a:	4251      	negs	r1, r2
 8011d3c:	4441      	add	r1, r8
 8011d3e:	0035      	movs	r5, r6
 8011d40:	e63a      	b.n	80119b8 <__aeabi_dadd+0x164>
 8011d42:	4664      	mov	r4, ip
 8011d44:	0035      	movs	r5, r6
 8011d46:	4641      	mov	r1, r8
 8011d48:	0010      	movs	r0, r2
 8011d4a:	e685      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011d4c:	000b      	movs	r3, r1
 8011d4e:	4303      	orrs	r3, r0
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	d000      	beq.n	8011d56 <__aeabi_dadd+0x502>
 8011d54:	e663      	b.n	8011a1e <__aeabi_dadd+0x1ca>
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d0f5      	beq.n	8011d46 <__aeabi_dadd+0x4f2>
 8011d5a:	4643      	mov	r3, r8
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	d100      	bne.n	8011d62 <__aeabi_dadd+0x50e>
 8011d60:	e67a      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011d62:	1887      	adds	r7, r0, r2
 8011d64:	4287      	cmp	r7, r0
 8011d66:	4180      	sbcs	r0, r0
 8011d68:	2207      	movs	r2, #7
 8011d6a:	4441      	add	r1, r8
 8011d6c:	4240      	negs	r0, r0
 8011d6e:	1809      	adds	r1, r1, r0
 8011d70:	403a      	ands	r2, r7
 8011d72:	020b      	lsls	r3, r1, #8
 8011d74:	d400      	bmi.n	8011d78 <__aeabi_dadd+0x524>
 8011d76:	e6d5      	b.n	8011b24 <__aeabi_dadd+0x2d0>
 8011d78:	4b43      	ldr	r3, [pc, #268]	; (8011e88 <__aeabi_dadd+0x634>)
 8011d7a:	3501      	adds	r5, #1
 8011d7c:	4019      	ands	r1, r3
 8011d7e:	e5c9      	b.n	8011914 <__aeabi_dadd+0xc0>
 8011d80:	0038      	movs	r0, r7
 8011d82:	e669      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011d84:	001e      	movs	r6, r3
 8011d86:	4647      	mov	r7, r8
 8011d88:	3e20      	subs	r6, #32
 8011d8a:	40f7      	lsrs	r7, r6
 8011d8c:	46bc      	mov	ip, r7
 8011d8e:	2b20      	cmp	r3, #32
 8011d90:	d004      	beq.n	8011d9c <__aeabi_dadd+0x548>
 8011d92:	2640      	movs	r6, #64	; 0x40
 8011d94:	1af3      	subs	r3, r6, r3
 8011d96:	4646      	mov	r6, r8
 8011d98:	409e      	lsls	r6, r3
 8011d9a:	4332      	orrs	r2, r6
 8011d9c:	0017      	movs	r7, r2
 8011d9e:	4663      	mov	r3, ip
 8011da0:	1e7a      	subs	r2, r7, #1
 8011da2:	4197      	sbcs	r7, r2
 8011da4:	431f      	orrs	r7, r3
 8011da6:	e602      	b.n	80119ae <__aeabi_dadd+0x15a>
 8011da8:	4d36      	ldr	r5, [pc, #216]	; (8011e84 <__aeabi_dadd+0x630>)
 8011daa:	42ae      	cmp	r6, r5
 8011dac:	d0ca      	beq.n	8011d44 <__aeabi_dadd+0x4f0>
 8011dae:	2580      	movs	r5, #128	; 0x80
 8011db0:	042d      	lsls	r5, r5, #16
 8011db2:	425b      	negs	r3, r3
 8011db4:	4329      	orrs	r1, r5
 8011db6:	e7a6      	b.n	8011d06 <__aeabi_dadd+0x4b2>
 8011db8:	4308      	orrs	r0, r1
 8011dba:	1e41      	subs	r1, r0, #1
 8011dbc:	4188      	sbcs	r0, r1
 8011dbe:	e6a6      	b.n	8011b0e <__aeabi_dadd+0x2ba>
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d100      	bne.n	8011dc6 <__aeabi_dadd+0x572>
 8011dc4:	e648      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011dc6:	1a87      	subs	r7, r0, r2
 8011dc8:	4643      	mov	r3, r8
 8011dca:	42b8      	cmp	r0, r7
 8011dcc:	41b6      	sbcs	r6, r6
 8011dce:	1acb      	subs	r3, r1, r3
 8011dd0:	4276      	negs	r6, r6
 8011dd2:	1b9e      	subs	r6, r3, r6
 8011dd4:	0233      	lsls	r3, r6, #8
 8011dd6:	d54b      	bpl.n	8011e70 <__aeabi_dadd+0x61c>
 8011dd8:	1a17      	subs	r7, r2, r0
 8011dda:	4643      	mov	r3, r8
 8011ddc:	42ba      	cmp	r2, r7
 8011dde:	4192      	sbcs	r2, r2
 8011de0:	1a59      	subs	r1, r3, r1
 8011de2:	4252      	negs	r2, r2
 8011de4:	1a89      	subs	r1, r1, r2
 8011de6:	2207      	movs	r2, #7
 8011de8:	4664      	mov	r4, ip
 8011dea:	403a      	ands	r2, r7
 8011dec:	e592      	b.n	8011914 <__aeabi_dadd+0xc0>
 8011dee:	4301      	orrs	r1, r0
 8011df0:	000f      	movs	r7, r1
 8011df2:	1e79      	subs	r1, r7, #1
 8011df4:	418f      	sbcs	r7, r1
 8011df6:	e79d      	b.n	8011d34 <__aeabi_dadd+0x4e0>
 8011df8:	001c      	movs	r4, r3
 8011dfa:	000f      	movs	r7, r1
 8011dfc:	3c20      	subs	r4, #32
 8011dfe:	40e7      	lsrs	r7, r4
 8011e00:	2b20      	cmp	r3, #32
 8011e02:	d003      	beq.n	8011e0c <__aeabi_dadd+0x5b8>
 8011e04:	2440      	movs	r4, #64	; 0x40
 8011e06:	1ae3      	subs	r3, r4, r3
 8011e08:	4099      	lsls	r1, r3
 8011e0a:	4308      	orrs	r0, r1
 8011e0c:	1e41      	subs	r1, r0, #1
 8011e0e:	4188      	sbcs	r0, r1
 8011e10:	4338      	orrs	r0, r7
 8011e12:	e67c      	b.n	8011b0e <__aeabi_dadd+0x2ba>
 8011e14:	2200      	movs	r2, #0
 8011e16:	2400      	movs	r4, #0
 8011e18:	e625      	b.n	8011a66 <__aeabi_dadd+0x212>
 8011e1a:	1a17      	subs	r7, r2, r0
 8011e1c:	4643      	mov	r3, r8
 8011e1e:	42ba      	cmp	r2, r7
 8011e20:	4192      	sbcs	r2, r2
 8011e22:	1a59      	subs	r1, r3, r1
 8011e24:	4252      	negs	r2, r2
 8011e26:	1a89      	subs	r1, r1, r2
 8011e28:	4664      	mov	r4, ip
 8011e2a:	0035      	movs	r5, r6
 8011e2c:	e543      	b.n	80118b6 <__aeabi_dadd+0x62>
 8011e2e:	4641      	mov	r1, r8
 8011e30:	0010      	movs	r0, r2
 8011e32:	4d14      	ldr	r5, [pc, #80]	; (8011e84 <__aeabi_dadd+0x630>)
 8011e34:	e610      	b.n	8011a58 <__aeabi_dadd+0x204>
 8011e36:	2280      	movs	r2, #128	; 0x80
 8011e38:	2400      	movs	r4, #0
 8011e3a:	0312      	lsls	r2, r2, #12
 8011e3c:	e680      	b.n	8011b40 <__aeabi_dadd+0x2ec>
 8011e3e:	001d      	movs	r5, r3
 8011e40:	000f      	movs	r7, r1
 8011e42:	3d20      	subs	r5, #32
 8011e44:	40ef      	lsrs	r7, r5
 8011e46:	46bc      	mov	ip, r7
 8011e48:	2b20      	cmp	r3, #32
 8011e4a:	d003      	beq.n	8011e54 <__aeabi_dadd+0x600>
 8011e4c:	2540      	movs	r5, #64	; 0x40
 8011e4e:	1aeb      	subs	r3, r5, r3
 8011e50:	4099      	lsls	r1, r3
 8011e52:	4308      	orrs	r0, r1
 8011e54:	0007      	movs	r7, r0
 8011e56:	4663      	mov	r3, ip
 8011e58:	1e78      	subs	r0, r7, #1
 8011e5a:	4187      	sbcs	r7, r0
 8011e5c:	431f      	orrs	r7, r3
 8011e5e:	e769      	b.n	8011d34 <__aeabi_dadd+0x4e0>
 8011e60:	1887      	adds	r7, r0, r2
 8011e62:	4297      	cmp	r7, r2
 8011e64:	419b      	sbcs	r3, r3
 8011e66:	4441      	add	r1, r8
 8011e68:	425b      	negs	r3, r3
 8011e6a:	18c9      	adds	r1, r1, r3
 8011e6c:	0035      	movs	r5, r6
 8011e6e:	e5a3      	b.n	80119b8 <__aeabi_dadd+0x164>
 8011e70:	003b      	movs	r3, r7
 8011e72:	4333      	orrs	r3, r6
 8011e74:	d0ce      	beq.n	8011e14 <__aeabi_dadd+0x5c0>
 8011e76:	2207      	movs	r2, #7
 8011e78:	0031      	movs	r1, r6
 8011e7a:	403a      	ands	r2, r7
 8011e7c:	e652      	b.n	8011b24 <__aeabi_dadd+0x2d0>
 8011e7e:	2300      	movs	r3, #0
 8011e80:	001a      	movs	r2, r3
 8011e82:	e5f4      	b.n	8011a6e <__aeabi_dadd+0x21a>
 8011e84:	000007ff 	.word	0x000007ff
 8011e88:	ff7fffff 	.word	0xff7fffff

08011e8c <__aeabi_ddiv>:
 8011e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e8e:	4657      	mov	r7, sl
 8011e90:	46de      	mov	lr, fp
 8011e92:	464e      	mov	r6, r9
 8011e94:	4645      	mov	r5, r8
 8011e96:	b5e0      	push	{r5, r6, r7, lr}
 8011e98:	4683      	mov	fp, r0
 8011e9a:	0007      	movs	r7, r0
 8011e9c:	030e      	lsls	r6, r1, #12
 8011e9e:	0048      	lsls	r0, r1, #1
 8011ea0:	b085      	sub	sp, #20
 8011ea2:	4692      	mov	sl, r2
 8011ea4:	001c      	movs	r4, r3
 8011ea6:	0b36      	lsrs	r6, r6, #12
 8011ea8:	0d40      	lsrs	r0, r0, #21
 8011eaa:	0fcd      	lsrs	r5, r1, #31
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d100      	bne.n	8011eb2 <__aeabi_ddiv+0x26>
 8011eb0:	e09d      	b.n	8011fee <__aeabi_ddiv+0x162>
 8011eb2:	4b95      	ldr	r3, [pc, #596]	; (8012108 <__aeabi_ddiv+0x27c>)
 8011eb4:	4298      	cmp	r0, r3
 8011eb6:	d039      	beq.n	8011f2c <__aeabi_ddiv+0xa0>
 8011eb8:	2380      	movs	r3, #128	; 0x80
 8011eba:	00f6      	lsls	r6, r6, #3
 8011ebc:	041b      	lsls	r3, r3, #16
 8011ebe:	431e      	orrs	r6, r3
 8011ec0:	4a92      	ldr	r2, [pc, #584]	; (801210c <__aeabi_ddiv+0x280>)
 8011ec2:	0f7b      	lsrs	r3, r7, #29
 8011ec4:	4333      	orrs	r3, r6
 8011ec6:	4699      	mov	r9, r3
 8011ec8:	4694      	mov	ip, r2
 8011eca:	0003      	movs	r3, r0
 8011ecc:	4463      	add	r3, ip
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	2600      	movs	r6, #0
 8011ed4:	00ff      	lsls	r7, r7, #3
 8011ed6:	9302      	str	r3, [sp, #8]
 8011ed8:	0323      	lsls	r3, r4, #12
 8011eda:	0b1b      	lsrs	r3, r3, #12
 8011edc:	4698      	mov	r8, r3
 8011ede:	0063      	lsls	r3, r4, #1
 8011ee0:	0fe4      	lsrs	r4, r4, #31
 8011ee2:	4652      	mov	r2, sl
 8011ee4:	0d5b      	lsrs	r3, r3, #21
 8011ee6:	9401      	str	r4, [sp, #4]
 8011ee8:	d100      	bne.n	8011eec <__aeabi_ddiv+0x60>
 8011eea:	e0b3      	b.n	8012054 <__aeabi_ddiv+0x1c8>
 8011eec:	4986      	ldr	r1, [pc, #536]	; (8012108 <__aeabi_ddiv+0x27c>)
 8011eee:	428b      	cmp	r3, r1
 8011ef0:	d100      	bne.n	8011ef4 <__aeabi_ddiv+0x68>
 8011ef2:	e09e      	b.n	8012032 <__aeabi_ddiv+0x1a6>
 8011ef4:	4642      	mov	r2, r8
 8011ef6:	00d1      	lsls	r1, r2, #3
 8011ef8:	2280      	movs	r2, #128	; 0x80
 8011efa:	0412      	lsls	r2, r2, #16
 8011efc:	430a      	orrs	r2, r1
 8011efe:	4651      	mov	r1, sl
 8011f00:	0f49      	lsrs	r1, r1, #29
 8011f02:	4311      	orrs	r1, r2
 8011f04:	468b      	mov	fp, r1
 8011f06:	4981      	ldr	r1, [pc, #516]	; (801210c <__aeabi_ddiv+0x280>)
 8011f08:	4652      	mov	r2, sl
 8011f0a:	468c      	mov	ip, r1
 8011f0c:	9900      	ldr	r1, [sp, #0]
 8011f0e:	4463      	add	r3, ip
 8011f10:	1acb      	subs	r3, r1, r3
 8011f12:	2100      	movs	r1, #0
 8011f14:	00d2      	lsls	r2, r2, #3
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	002b      	movs	r3, r5
 8011f1a:	4063      	eors	r3, r4
 8011f1c:	469a      	mov	sl, r3
 8011f1e:	2e0f      	cmp	r6, #15
 8011f20:	d900      	bls.n	8011f24 <__aeabi_ddiv+0x98>
 8011f22:	e105      	b.n	8012130 <__aeabi_ddiv+0x2a4>
 8011f24:	4b7a      	ldr	r3, [pc, #488]	; (8012110 <__aeabi_ddiv+0x284>)
 8011f26:	00b6      	lsls	r6, r6, #2
 8011f28:	599b      	ldr	r3, [r3, r6]
 8011f2a:	469f      	mov	pc, r3
 8011f2c:	465b      	mov	r3, fp
 8011f2e:	4333      	orrs	r3, r6
 8011f30:	4699      	mov	r9, r3
 8011f32:	d000      	beq.n	8011f36 <__aeabi_ddiv+0xaa>
 8011f34:	e0b8      	b.n	80120a8 <__aeabi_ddiv+0x21c>
 8011f36:	2302      	movs	r3, #2
 8011f38:	2608      	movs	r6, #8
 8011f3a:	2700      	movs	r7, #0
 8011f3c:	9000      	str	r0, [sp, #0]
 8011f3e:	9302      	str	r3, [sp, #8]
 8011f40:	e7ca      	b.n	8011ed8 <__aeabi_ddiv+0x4c>
 8011f42:	46cb      	mov	fp, r9
 8011f44:	003a      	movs	r2, r7
 8011f46:	9902      	ldr	r1, [sp, #8]
 8011f48:	9501      	str	r5, [sp, #4]
 8011f4a:	9b01      	ldr	r3, [sp, #4]
 8011f4c:	469a      	mov	sl, r3
 8011f4e:	2902      	cmp	r1, #2
 8011f50:	d027      	beq.n	8011fa2 <__aeabi_ddiv+0x116>
 8011f52:	2903      	cmp	r1, #3
 8011f54:	d100      	bne.n	8011f58 <__aeabi_ddiv+0xcc>
 8011f56:	e280      	b.n	801245a <__aeabi_ddiv+0x5ce>
 8011f58:	2901      	cmp	r1, #1
 8011f5a:	d044      	beq.n	8011fe6 <__aeabi_ddiv+0x15a>
 8011f5c:	496d      	ldr	r1, [pc, #436]	; (8012114 <__aeabi_ddiv+0x288>)
 8011f5e:	9b00      	ldr	r3, [sp, #0]
 8011f60:	468c      	mov	ip, r1
 8011f62:	4463      	add	r3, ip
 8011f64:	001c      	movs	r4, r3
 8011f66:	2c00      	cmp	r4, #0
 8011f68:	dd38      	ble.n	8011fdc <__aeabi_ddiv+0x150>
 8011f6a:	0753      	lsls	r3, r2, #29
 8011f6c:	d000      	beq.n	8011f70 <__aeabi_ddiv+0xe4>
 8011f6e:	e213      	b.n	8012398 <__aeabi_ddiv+0x50c>
 8011f70:	08d2      	lsrs	r2, r2, #3
 8011f72:	465b      	mov	r3, fp
 8011f74:	01db      	lsls	r3, r3, #7
 8011f76:	d509      	bpl.n	8011f8c <__aeabi_ddiv+0x100>
 8011f78:	4659      	mov	r1, fp
 8011f7a:	4b67      	ldr	r3, [pc, #412]	; (8012118 <__aeabi_ddiv+0x28c>)
 8011f7c:	4019      	ands	r1, r3
 8011f7e:	468b      	mov	fp, r1
 8011f80:	2180      	movs	r1, #128	; 0x80
 8011f82:	00c9      	lsls	r1, r1, #3
 8011f84:	468c      	mov	ip, r1
 8011f86:	9b00      	ldr	r3, [sp, #0]
 8011f88:	4463      	add	r3, ip
 8011f8a:	001c      	movs	r4, r3
 8011f8c:	4b63      	ldr	r3, [pc, #396]	; (801211c <__aeabi_ddiv+0x290>)
 8011f8e:	429c      	cmp	r4, r3
 8011f90:	dc07      	bgt.n	8011fa2 <__aeabi_ddiv+0x116>
 8011f92:	465b      	mov	r3, fp
 8011f94:	0564      	lsls	r4, r4, #21
 8011f96:	075f      	lsls	r7, r3, #29
 8011f98:	025b      	lsls	r3, r3, #9
 8011f9a:	4317      	orrs	r7, r2
 8011f9c:	0b1b      	lsrs	r3, r3, #12
 8011f9e:	0d62      	lsrs	r2, r4, #21
 8011fa0:	e002      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	2700      	movs	r7, #0
 8011fa6:	4a58      	ldr	r2, [pc, #352]	; (8012108 <__aeabi_ddiv+0x27c>)
 8011fa8:	2100      	movs	r1, #0
 8011faa:	031b      	lsls	r3, r3, #12
 8011fac:	0b1c      	lsrs	r4, r3, #12
 8011fae:	0d0b      	lsrs	r3, r1, #20
 8011fb0:	051b      	lsls	r3, r3, #20
 8011fb2:	4323      	orrs	r3, r4
 8011fb4:	0514      	lsls	r4, r2, #20
 8011fb6:	4a5a      	ldr	r2, [pc, #360]	; (8012120 <__aeabi_ddiv+0x294>)
 8011fb8:	0038      	movs	r0, r7
 8011fba:	4013      	ands	r3, r2
 8011fbc:	431c      	orrs	r4, r3
 8011fbe:	4653      	mov	r3, sl
 8011fc0:	0064      	lsls	r4, r4, #1
 8011fc2:	07db      	lsls	r3, r3, #31
 8011fc4:	0864      	lsrs	r4, r4, #1
 8011fc6:	431c      	orrs	r4, r3
 8011fc8:	0021      	movs	r1, r4
 8011fca:	b005      	add	sp, #20
 8011fcc:	bc3c      	pop	{r2, r3, r4, r5}
 8011fce:	4690      	mov	r8, r2
 8011fd0:	4699      	mov	r9, r3
 8011fd2:	46a2      	mov	sl, r4
 8011fd4:	46ab      	mov	fp, r5
 8011fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd8:	2201      	movs	r2, #1
 8011fda:	4252      	negs	r2, r2
 8011fdc:	2301      	movs	r3, #1
 8011fde:	1b1b      	subs	r3, r3, r4
 8011fe0:	2b38      	cmp	r3, #56	; 0x38
 8011fe2:	dc00      	bgt.n	8011fe6 <__aeabi_ddiv+0x15a>
 8011fe4:	e1ad      	b.n	8012342 <__aeabi_ddiv+0x4b6>
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	2300      	movs	r3, #0
 8011fea:	2700      	movs	r7, #0
 8011fec:	e7dc      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 8011fee:	465b      	mov	r3, fp
 8011ff0:	4333      	orrs	r3, r6
 8011ff2:	4699      	mov	r9, r3
 8011ff4:	d05e      	beq.n	80120b4 <__aeabi_ddiv+0x228>
 8011ff6:	2e00      	cmp	r6, #0
 8011ff8:	d100      	bne.n	8011ffc <__aeabi_ddiv+0x170>
 8011ffa:	e18a      	b.n	8012312 <__aeabi_ddiv+0x486>
 8011ffc:	0030      	movs	r0, r6
 8011ffe:	f7fe ff7f 	bl	8010f00 <__clzsi2>
 8012002:	0003      	movs	r3, r0
 8012004:	3b0b      	subs	r3, #11
 8012006:	2b1c      	cmp	r3, #28
 8012008:	dd00      	ble.n	801200c <__aeabi_ddiv+0x180>
 801200a:	e17b      	b.n	8012304 <__aeabi_ddiv+0x478>
 801200c:	221d      	movs	r2, #29
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	465a      	mov	r2, fp
 8012012:	0001      	movs	r1, r0
 8012014:	40da      	lsrs	r2, r3
 8012016:	3908      	subs	r1, #8
 8012018:	408e      	lsls	r6, r1
 801201a:	0013      	movs	r3, r2
 801201c:	465f      	mov	r7, fp
 801201e:	4333      	orrs	r3, r6
 8012020:	4699      	mov	r9, r3
 8012022:	408f      	lsls	r7, r1
 8012024:	4b3f      	ldr	r3, [pc, #252]	; (8012124 <__aeabi_ddiv+0x298>)
 8012026:	2600      	movs	r6, #0
 8012028:	1a1b      	subs	r3, r3, r0
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	2300      	movs	r3, #0
 801202e:	9302      	str	r3, [sp, #8]
 8012030:	e752      	b.n	8011ed8 <__aeabi_ddiv+0x4c>
 8012032:	4641      	mov	r1, r8
 8012034:	4653      	mov	r3, sl
 8012036:	430b      	orrs	r3, r1
 8012038:	493b      	ldr	r1, [pc, #236]	; (8012128 <__aeabi_ddiv+0x29c>)
 801203a:	469b      	mov	fp, r3
 801203c:	468c      	mov	ip, r1
 801203e:	9b00      	ldr	r3, [sp, #0]
 8012040:	4463      	add	r3, ip
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	465b      	mov	r3, fp
 8012046:	2b00      	cmp	r3, #0
 8012048:	d13b      	bne.n	80120c2 <__aeabi_ddiv+0x236>
 801204a:	2302      	movs	r3, #2
 801204c:	2200      	movs	r2, #0
 801204e:	431e      	orrs	r6, r3
 8012050:	2102      	movs	r1, #2
 8012052:	e761      	b.n	8011f18 <__aeabi_ddiv+0x8c>
 8012054:	4643      	mov	r3, r8
 8012056:	4313      	orrs	r3, r2
 8012058:	469b      	mov	fp, r3
 801205a:	d037      	beq.n	80120cc <__aeabi_ddiv+0x240>
 801205c:	4643      	mov	r3, r8
 801205e:	2b00      	cmp	r3, #0
 8012060:	d100      	bne.n	8012064 <__aeabi_ddiv+0x1d8>
 8012062:	e162      	b.n	801232a <__aeabi_ddiv+0x49e>
 8012064:	4640      	mov	r0, r8
 8012066:	f7fe ff4b 	bl	8010f00 <__clzsi2>
 801206a:	0003      	movs	r3, r0
 801206c:	3b0b      	subs	r3, #11
 801206e:	2b1c      	cmp	r3, #28
 8012070:	dd00      	ble.n	8012074 <__aeabi_ddiv+0x1e8>
 8012072:	e153      	b.n	801231c <__aeabi_ddiv+0x490>
 8012074:	0002      	movs	r2, r0
 8012076:	4641      	mov	r1, r8
 8012078:	3a08      	subs	r2, #8
 801207a:	4091      	lsls	r1, r2
 801207c:	4688      	mov	r8, r1
 801207e:	211d      	movs	r1, #29
 8012080:	1acb      	subs	r3, r1, r3
 8012082:	4651      	mov	r1, sl
 8012084:	40d9      	lsrs	r1, r3
 8012086:	000b      	movs	r3, r1
 8012088:	4641      	mov	r1, r8
 801208a:	430b      	orrs	r3, r1
 801208c:	469b      	mov	fp, r3
 801208e:	4653      	mov	r3, sl
 8012090:	4093      	lsls	r3, r2
 8012092:	001a      	movs	r2, r3
 8012094:	9b00      	ldr	r3, [sp, #0]
 8012096:	4925      	ldr	r1, [pc, #148]	; (801212c <__aeabi_ddiv+0x2a0>)
 8012098:	469c      	mov	ip, r3
 801209a:	4460      	add	r0, ip
 801209c:	0003      	movs	r3, r0
 801209e:	468c      	mov	ip, r1
 80120a0:	4463      	add	r3, ip
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	2100      	movs	r1, #0
 80120a6:	e737      	b.n	8011f18 <__aeabi_ddiv+0x8c>
 80120a8:	2303      	movs	r3, #3
 80120aa:	46b1      	mov	r9, r6
 80120ac:	9000      	str	r0, [sp, #0]
 80120ae:	260c      	movs	r6, #12
 80120b0:	9302      	str	r3, [sp, #8]
 80120b2:	e711      	b.n	8011ed8 <__aeabi_ddiv+0x4c>
 80120b4:	2300      	movs	r3, #0
 80120b6:	9300      	str	r3, [sp, #0]
 80120b8:	3301      	adds	r3, #1
 80120ba:	2604      	movs	r6, #4
 80120bc:	2700      	movs	r7, #0
 80120be:	9302      	str	r3, [sp, #8]
 80120c0:	e70a      	b.n	8011ed8 <__aeabi_ddiv+0x4c>
 80120c2:	2303      	movs	r3, #3
 80120c4:	46c3      	mov	fp, r8
 80120c6:	431e      	orrs	r6, r3
 80120c8:	2103      	movs	r1, #3
 80120ca:	e725      	b.n	8011f18 <__aeabi_ddiv+0x8c>
 80120cc:	3301      	adds	r3, #1
 80120ce:	431e      	orrs	r6, r3
 80120d0:	2200      	movs	r2, #0
 80120d2:	2101      	movs	r1, #1
 80120d4:	e720      	b.n	8011f18 <__aeabi_ddiv+0x8c>
 80120d6:	2300      	movs	r3, #0
 80120d8:	469a      	mov	sl, r3
 80120da:	2380      	movs	r3, #128	; 0x80
 80120dc:	2700      	movs	r7, #0
 80120de:	031b      	lsls	r3, r3, #12
 80120e0:	4a09      	ldr	r2, [pc, #36]	; (8012108 <__aeabi_ddiv+0x27c>)
 80120e2:	e761      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 80120e4:	2380      	movs	r3, #128	; 0x80
 80120e6:	4649      	mov	r1, r9
 80120e8:	031b      	lsls	r3, r3, #12
 80120ea:	4219      	tst	r1, r3
 80120ec:	d100      	bne.n	80120f0 <__aeabi_ddiv+0x264>
 80120ee:	e0e2      	b.n	80122b6 <__aeabi_ddiv+0x42a>
 80120f0:	4659      	mov	r1, fp
 80120f2:	4219      	tst	r1, r3
 80120f4:	d000      	beq.n	80120f8 <__aeabi_ddiv+0x26c>
 80120f6:	e0de      	b.n	80122b6 <__aeabi_ddiv+0x42a>
 80120f8:	430b      	orrs	r3, r1
 80120fa:	031b      	lsls	r3, r3, #12
 80120fc:	0017      	movs	r7, r2
 80120fe:	0b1b      	lsrs	r3, r3, #12
 8012100:	46a2      	mov	sl, r4
 8012102:	4a01      	ldr	r2, [pc, #4]	; (8012108 <__aeabi_ddiv+0x27c>)
 8012104:	e750      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 8012106:	46c0      	nop			; (mov r8, r8)
 8012108:	000007ff 	.word	0x000007ff
 801210c:	fffffc01 	.word	0xfffffc01
 8012110:	0801cb7c 	.word	0x0801cb7c
 8012114:	000003ff 	.word	0x000003ff
 8012118:	feffffff 	.word	0xfeffffff
 801211c:	000007fe 	.word	0x000007fe
 8012120:	800fffff 	.word	0x800fffff
 8012124:	fffffc0d 	.word	0xfffffc0d
 8012128:	fffff801 	.word	0xfffff801
 801212c:	000003f3 	.word	0x000003f3
 8012130:	45d9      	cmp	r9, fp
 8012132:	d900      	bls.n	8012136 <__aeabi_ddiv+0x2aa>
 8012134:	e0cb      	b.n	80122ce <__aeabi_ddiv+0x442>
 8012136:	d100      	bne.n	801213a <__aeabi_ddiv+0x2ae>
 8012138:	e0c6      	b.n	80122c8 <__aeabi_ddiv+0x43c>
 801213a:	003c      	movs	r4, r7
 801213c:	4648      	mov	r0, r9
 801213e:	2700      	movs	r7, #0
 8012140:	9b00      	ldr	r3, [sp, #0]
 8012142:	3b01      	subs	r3, #1
 8012144:	9300      	str	r3, [sp, #0]
 8012146:	465b      	mov	r3, fp
 8012148:	0e16      	lsrs	r6, r2, #24
 801214a:	021b      	lsls	r3, r3, #8
 801214c:	431e      	orrs	r6, r3
 801214e:	0213      	lsls	r3, r2, #8
 8012150:	4698      	mov	r8, r3
 8012152:	0433      	lsls	r3, r6, #16
 8012154:	0c1b      	lsrs	r3, r3, #16
 8012156:	4699      	mov	r9, r3
 8012158:	0c31      	lsrs	r1, r6, #16
 801215a:	9101      	str	r1, [sp, #4]
 801215c:	f7fe ff92 	bl	8011084 <__aeabi_uidivmod>
 8012160:	464a      	mov	r2, r9
 8012162:	4342      	muls	r2, r0
 8012164:	040b      	lsls	r3, r1, #16
 8012166:	0c21      	lsrs	r1, r4, #16
 8012168:	0005      	movs	r5, r0
 801216a:	4319      	orrs	r1, r3
 801216c:	428a      	cmp	r2, r1
 801216e:	d907      	bls.n	8012180 <__aeabi_ddiv+0x2f4>
 8012170:	1989      	adds	r1, r1, r6
 8012172:	3d01      	subs	r5, #1
 8012174:	428e      	cmp	r6, r1
 8012176:	d803      	bhi.n	8012180 <__aeabi_ddiv+0x2f4>
 8012178:	428a      	cmp	r2, r1
 801217a:	d901      	bls.n	8012180 <__aeabi_ddiv+0x2f4>
 801217c:	1e85      	subs	r5, r0, #2
 801217e:	1989      	adds	r1, r1, r6
 8012180:	1a88      	subs	r0, r1, r2
 8012182:	9901      	ldr	r1, [sp, #4]
 8012184:	f7fe ff7e 	bl	8011084 <__aeabi_uidivmod>
 8012188:	0409      	lsls	r1, r1, #16
 801218a:	468c      	mov	ip, r1
 801218c:	464a      	mov	r2, r9
 801218e:	0421      	lsls	r1, r4, #16
 8012190:	4664      	mov	r4, ip
 8012192:	4342      	muls	r2, r0
 8012194:	0c09      	lsrs	r1, r1, #16
 8012196:	0003      	movs	r3, r0
 8012198:	4321      	orrs	r1, r4
 801219a:	428a      	cmp	r2, r1
 801219c:	d904      	bls.n	80121a8 <__aeabi_ddiv+0x31c>
 801219e:	1989      	adds	r1, r1, r6
 80121a0:	3b01      	subs	r3, #1
 80121a2:	428e      	cmp	r6, r1
 80121a4:	d800      	bhi.n	80121a8 <__aeabi_ddiv+0x31c>
 80121a6:	e0f1      	b.n	801238c <__aeabi_ddiv+0x500>
 80121a8:	042d      	lsls	r5, r5, #16
 80121aa:	431d      	orrs	r5, r3
 80121ac:	46ab      	mov	fp, r5
 80121ae:	4643      	mov	r3, r8
 80121b0:	1a89      	subs	r1, r1, r2
 80121b2:	4642      	mov	r2, r8
 80121b4:	0c28      	lsrs	r0, r5, #16
 80121b6:	0412      	lsls	r2, r2, #16
 80121b8:	0c1d      	lsrs	r5, r3, #16
 80121ba:	465b      	mov	r3, fp
 80121bc:	0c14      	lsrs	r4, r2, #16
 80121be:	0022      	movs	r2, r4
 80121c0:	041b      	lsls	r3, r3, #16
 80121c2:	0c1b      	lsrs	r3, r3, #16
 80121c4:	435a      	muls	r2, r3
 80121c6:	9403      	str	r4, [sp, #12]
 80121c8:	436b      	muls	r3, r5
 80121ca:	4344      	muls	r4, r0
 80121cc:	9502      	str	r5, [sp, #8]
 80121ce:	4368      	muls	r0, r5
 80121d0:	191b      	adds	r3, r3, r4
 80121d2:	0c15      	lsrs	r5, r2, #16
 80121d4:	18eb      	adds	r3, r5, r3
 80121d6:	429c      	cmp	r4, r3
 80121d8:	d903      	bls.n	80121e2 <__aeabi_ddiv+0x356>
 80121da:	2480      	movs	r4, #128	; 0x80
 80121dc:	0264      	lsls	r4, r4, #9
 80121de:	46a4      	mov	ip, r4
 80121e0:	4460      	add	r0, ip
 80121e2:	0c1c      	lsrs	r4, r3, #16
 80121e4:	0415      	lsls	r5, r2, #16
 80121e6:	041b      	lsls	r3, r3, #16
 80121e8:	0c2d      	lsrs	r5, r5, #16
 80121ea:	1820      	adds	r0, r4, r0
 80121ec:	195d      	adds	r5, r3, r5
 80121ee:	4281      	cmp	r1, r0
 80121f0:	d377      	bcc.n	80122e2 <__aeabi_ddiv+0x456>
 80121f2:	d073      	beq.n	80122dc <__aeabi_ddiv+0x450>
 80121f4:	1a0c      	subs	r4, r1, r0
 80121f6:	4aa2      	ldr	r2, [pc, #648]	; (8012480 <__aeabi_ddiv+0x5f4>)
 80121f8:	1b7d      	subs	r5, r7, r5
 80121fa:	42af      	cmp	r7, r5
 80121fc:	41bf      	sbcs	r7, r7
 80121fe:	4694      	mov	ip, r2
 8012200:	9b00      	ldr	r3, [sp, #0]
 8012202:	427f      	negs	r7, r7
 8012204:	4463      	add	r3, ip
 8012206:	1be0      	subs	r0, r4, r7
 8012208:	001c      	movs	r4, r3
 801220a:	4286      	cmp	r6, r0
 801220c:	d100      	bne.n	8012210 <__aeabi_ddiv+0x384>
 801220e:	e0db      	b.n	80123c8 <__aeabi_ddiv+0x53c>
 8012210:	9901      	ldr	r1, [sp, #4]
 8012212:	f7fe ff37 	bl	8011084 <__aeabi_uidivmod>
 8012216:	464a      	mov	r2, r9
 8012218:	4342      	muls	r2, r0
 801221a:	040b      	lsls	r3, r1, #16
 801221c:	0c29      	lsrs	r1, r5, #16
 801221e:	0007      	movs	r7, r0
 8012220:	4319      	orrs	r1, r3
 8012222:	428a      	cmp	r2, r1
 8012224:	d907      	bls.n	8012236 <__aeabi_ddiv+0x3aa>
 8012226:	1989      	adds	r1, r1, r6
 8012228:	3f01      	subs	r7, #1
 801222a:	428e      	cmp	r6, r1
 801222c:	d803      	bhi.n	8012236 <__aeabi_ddiv+0x3aa>
 801222e:	428a      	cmp	r2, r1
 8012230:	d901      	bls.n	8012236 <__aeabi_ddiv+0x3aa>
 8012232:	1e87      	subs	r7, r0, #2
 8012234:	1989      	adds	r1, r1, r6
 8012236:	1a88      	subs	r0, r1, r2
 8012238:	9901      	ldr	r1, [sp, #4]
 801223a:	f7fe ff23 	bl	8011084 <__aeabi_uidivmod>
 801223e:	0409      	lsls	r1, r1, #16
 8012240:	464a      	mov	r2, r9
 8012242:	4689      	mov	r9, r1
 8012244:	0429      	lsls	r1, r5, #16
 8012246:	464d      	mov	r5, r9
 8012248:	4342      	muls	r2, r0
 801224a:	0c09      	lsrs	r1, r1, #16
 801224c:	0003      	movs	r3, r0
 801224e:	4329      	orrs	r1, r5
 8012250:	428a      	cmp	r2, r1
 8012252:	d907      	bls.n	8012264 <__aeabi_ddiv+0x3d8>
 8012254:	1989      	adds	r1, r1, r6
 8012256:	3b01      	subs	r3, #1
 8012258:	428e      	cmp	r6, r1
 801225a:	d803      	bhi.n	8012264 <__aeabi_ddiv+0x3d8>
 801225c:	428a      	cmp	r2, r1
 801225e:	d901      	bls.n	8012264 <__aeabi_ddiv+0x3d8>
 8012260:	1e83      	subs	r3, r0, #2
 8012262:	1989      	adds	r1, r1, r6
 8012264:	043f      	lsls	r7, r7, #16
 8012266:	1a89      	subs	r1, r1, r2
 8012268:	003a      	movs	r2, r7
 801226a:	9f03      	ldr	r7, [sp, #12]
 801226c:	431a      	orrs	r2, r3
 801226e:	0038      	movs	r0, r7
 8012270:	0413      	lsls	r3, r2, #16
 8012272:	0c1b      	lsrs	r3, r3, #16
 8012274:	4358      	muls	r0, r3
 8012276:	4681      	mov	r9, r0
 8012278:	9802      	ldr	r0, [sp, #8]
 801227a:	0c15      	lsrs	r5, r2, #16
 801227c:	436f      	muls	r7, r5
 801227e:	4343      	muls	r3, r0
 8012280:	4345      	muls	r5, r0
 8012282:	4648      	mov	r0, r9
 8012284:	0c00      	lsrs	r0, r0, #16
 8012286:	4684      	mov	ip, r0
 8012288:	19db      	adds	r3, r3, r7
 801228a:	4463      	add	r3, ip
 801228c:	429f      	cmp	r7, r3
 801228e:	d903      	bls.n	8012298 <__aeabi_ddiv+0x40c>
 8012290:	2080      	movs	r0, #128	; 0x80
 8012292:	0240      	lsls	r0, r0, #9
 8012294:	4684      	mov	ip, r0
 8012296:	4465      	add	r5, ip
 8012298:	4648      	mov	r0, r9
 801229a:	0c1f      	lsrs	r7, r3, #16
 801229c:	0400      	lsls	r0, r0, #16
 801229e:	041b      	lsls	r3, r3, #16
 80122a0:	0c00      	lsrs	r0, r0, #16
 80122a2:	197d      	adds	r5, r7, r5
 80122a4:	1818      	adds	r0, r3, r0
 80122a6:	42a9      	cmp	r1, r5
 80122a8:	d200      	bcs.n	80122ac <__aeabi_ddiv+0x420>
 80122aa:	e084      	b.n	80123b6 <__aeabi_ddiv+0x52a>
 80122ac:	d100      	bne.n	80122b0 <__aeabi_ddiv+0x424>
 80122ae:	e07f      	b.n	80123b0 <__aeabi_ddiv+0x524>
 80122b0:	2301      	movs	r3, #1
 80122b2:	431a      	orrs	r2, r3
 80122b4:	e657      	b.n	8011f66 <__aeabi_ddiv+0xda>
 80122b6:	2380      	movs	r3, #128	; 0x80
 80122b8:	464a      	mov	r2, r9
 80122ba:	031b      	lsls	r3, r3, #12
 80122bc:	4313      	orrs	r3, r2
 80122be:	031b      	lsls	r3, r3, #12
 80122c0:	0b1b      	lsrs	r3, r3, #12
 80122c2:	46aa      	mov	sl, r5
 80122c4:	4a6f      	ldr	r2, [pc, #444]	; (8012484 <__aeabi_ddiv+0x5f8>)
 80122c6:	e66f      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 80122c8:	42ba      	cmp	r2, r7
 80122ca:	d900      	bls.n	80122ce <__aeabi_ddiv+0x442>
 80122cc:	e735      	b.n	801213a <__aeabi_ddiv+0x2ae>
 80122ce:	464b      	mov	r3, r9
 80122d0:	07dc      	lsls	r4, r3, #31
 80122d2:	0858      	lsrs	r0, r3, #1
 80122d4:	087b      	lsrs	r3, r7, #1
 80122d6:	431c      	orrs	r4, r3
 80122d8:	07ff      	lsls	r7, r7, #31
 80122da:	e734      	b.n	8012146 <__aeabi_ddiv+0x2ba>
 80122dc:	2400      	movs	r4, #0
 80122de:	42af      	cmp	r7, r5
 80122e0:	d289      	bcs.n	80121f6 <__aeabi_ddiv+0x36a>
 80122e2:	4447      	add	r7, r8
 80122e4:	4547      	cmp	r7, r8
 80122e6:	41a4      	sbcs	r4, r4
 80122e8:	465b      	mov	r3, fp
 80122ea:	4264      	negs	r4, r4
 80122ec:	19a4      	adds	r4, r4, r6
 80122ee:	1864      	adds	r4, r4, r1
 80122f0:	3b01      	subs	r3, #1
 80122f2:	42a6      	cmp	r6, r4
 80122f4:	d21e      	bcs.n	8012334 <__aeabi_ddiv+0x4a8>
 80122f6:	42a0      	cmp	r0, r4
 80122f8:	d86d      	bhi.n	80123d6 <__aeabi_ddiv+0x54a>
 80122fa:	d100      	bne.n	80122fe <__aeabi_ddiv+0x472>
 80122fc:	e0b6      	b.n	801246c <__aeabi_ddiv+0x5e0>
 80122fe:	1a24      	subs	r4, r4, r0
 8012300:	469b      	mov	fp, r3
 8012302:	e778      	b.n	80121f6 <__aeabi_ddiv+0x36a>
 8012304:	0003      	movs	r3, r0
 8012306:	465a      	mov	r2, fp
 8012308:	3b28      	subs	r3, #40	; 0x28
 801230a:	409a      	lsls	r2, r3
 801230c:	2700      	movs	r7, #0
 801230e:	4691      	mov	r9, r2
 8012310:	e688      	b.n	8012024 <__aeabi_ddiv+0x198>
 8012312:	4658      	mov	r0, fp
 8012314:	f7fe fdf4 	bl	8010f00 <__clzsi2>
 8012318:	3020      	adds	r0, #32
 801231a:	e672      	b.n	8012002 <__aeabi_ddiv+0x176>
 801231c:	0003      	movs	r3, r0
 801231e:	4652      	mov	r2, sl
 8012320:	3b28      	subs	r3, #40	; 0x28
 8012322:	409a      	lsls	r2, r3
 8012324:	4693      	mov	fp, r2
 8012326:	2200      	movs	r2, #0
 8012328:	e6b4      	b.n	8012094 <__aeabi_ddiv+0x208>
 801232a:	4650      	mov	r0, sl
 801232c:	f7fe fde8 	bl	8010f00 <__clzsi2>
 8012330:	3020      	adds	r0, #32
 8012332:	e69a      	b.n	801206a <__aeabi_ddiv+0x1de>
 8012334:	42a6      	cmp	r6, r4
 8012336:	d1e2      	bne.n	80122fe <__aeabi_ddiv+0x472>
 8012338:	45b8      	cmp	r8, r7
 801233a:	d9dc      	bls.n	80122f6 <__aeabi_ddiv+0x46a>
 801233c:	1a34      	subs	r4, r6, r0
 801233e:	469b      	mov	fp, r3
 8012340:	e759      	b.n	80121f6 <__aeabi_ddiv+0x36a>
 8012342:	2b1f      	cmp	r3, #31
 8012344:	dc65      	bgt.n	8012412 <__aeabi_ddiv+0x586>
 8012346:	4c50      	ldr	r4, [pc, #320]	; (8012488 <__aeabi_ddiv+0x5fc>)
 8012348:	9900      	ldr	r1, [sp, #0]
 801234a:	46a4      	mov	ip, r4
 801234c:	465c      	mov	r4, fp
 801234e:	4461      	add	r1, ip
 8012350:	0008      	movs	r0, r1
 8012352:	408c      	lsls	r4, r1
 8012354:	0011      	movs	r1, r2
 8012356:	4082      	lsls	r2, r0
 8012358:	40d9      	lsrs	r1, r3
 801235a:	1e50      	subs	r0, r2, #1
 801235c:	4182      	sbcs	r2, r0
 801235e:	430c      	orrs	r4, r1
 8012360:	4314      	orrs	r4, r2
 8012362:	465a      	mov	r2, fp
 8012364:	40da      	lsrs	r2, r3
 8012366:	0013      	movs	r3, r2
 8012368:	0762      	lsls	r2, r4, #29
 801236a:	d009      	beq.n	8012380 <__aeabi_ddiv+0x4f4>
 801236c:	220f      	movs	r2, #15
 801236e:	4022      	ands	r2, r4
 8012370:	2a04      	cmp	r2, #4
 8012372:	d005      	beq.n	8012380 <__aeabi_ddiv+0x4f4>
 8012374:	0022      	movs	r2, r4
 8012376:	1d14      	adds	r4, r2, #4
 8012378:	4294      	cmp	r4, r2
 801237a:	4189      	sbcs	r1, r1
 801237c:	4249      	negs	r1, r1
 801237e:	185b      	adds	r3, r3, r1
 8012380:	021a      	lsls	r2, r3, #8
 8012382:	d562      	bpl.n	801244a <__aeabi_ddiv+0x5be>
 8012384:	2201      	movs	r2, #1
 8012386:	2300      	movs	r3, #0
 8012388:	2700      	movs	r7, #0
 801238a:	e60d      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 801238c:	428a      	cmp	r2, r1
 801238e:	d800      	bhi.n	8012392 <__aeabi_ddiv+0x506>
 8012390:	e70a      	b.n	80121a8 <__aeabi_ddiv+0x31c>
 8012392:	1e83      	subs	r3, r0, #2
 8012394:	1989      	adds	r1, r1, r6
 8012396:	e707      	b.n	80121a8 <__aeabi_ddiv+0x31c>
 8012398:	230f      	movs	r3, #15
 801239a:	4013      	ands	r3, r2
 801239c:	2b04      	cmp	r3, #4
 801239e:	d100      	bne.n	80123a2 <__aeabi_ddiv+0x516>
 80123a0:	e5e6      	b.n	8011f70 <__aeabi_ddiv+0xe4>
 80123a2:	1d17      	adds	r7, r2, #4
 80123a4:	4297      	cmp	r7, r2
 80123a6:	4192      	sbcs	r2, r2
 80123a8:	4253      	negs	r3, r2
 80123aa:	449b      	add	fp, r3
 80123ac:	08fa      	lsrs	r2, r7, #3
 80123ae:	e5e0      	b.n	8011f72 <__aeabi_ddiv+0xe6>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d100      	bne.n	80123b6 <__aeabi_ddiv+0x52a>
 80123b4:	e5d7      	b.n	8011f66 <__aeabi_ddiv+0xda>
 80123b6:	1871      	adds	r1, r6, r1
 80123b8:	1e53      	subs	r3, r2, #1
 80123ba:	42b1      	cmp	r1, r6
 80123bc:	d327      	bcc.n	801240e <__aeabi_ddiv+0x582>
 80123be:	42a9      	cmp	r1, r5
 80123c0:	d315      	bcc.n	80123ee <__aeabi_ddiv+0x562>
 80123c2:	d058      	beq.n	8012476 <__aeabi_ddiv+0x5ea>
 80123c4:	001a      	movs	r2, r3
 80123c6:	e773      	b.n	80122b0 <__aeabi_ddiv+0x424>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	dc00      	bgt.n	80123ce <__aeabi_ddiv+0x542>
 80123cc:	e604      	b.n	8011fd8 <__aeabi_ddiv+0x14c>
 80123ce:	2301      	movs	r3, #1
 80123d0:	2200      	movs	r2, #0
 80123d2:	449b      	add	fp, r3
 80123d4:	e5cd      	b.n	8011f72 <__aeabi_ddiv+0xe6>
 80123d6:	2302      	movs	r3, #2
 80123d8:	4447      	add	r7, r8
 80123da:	4547      	cmp	r7, r8
 80123dc:	4189      	sbcs	r1, r1
 80123de:	425b      	negs	r3, r3
 80123e0:	469c      	mov	ip, r3
 80123e2:	4249      	negs	r1, r1
 80123e4:	1989      	adds	r1, r1, r6
 80123e6:	190c      	adds	r4, r1, r4
 80123e8:	44e3      	add	fp, ip
 80123ea:	1a24      	subs	r4, r4, r0
 80123ec:	e703      	b.n	80121f6 <__aeabi_ddiv+0x36a>
 80123ee:	4643      	mov	r3, r8
 80123f0:	005f      	lsls	r7, r3, #1
 80123f2:	4547      	cmp	r7, r8
 80123f4:	419b      	sbcs	r3, r3
 80123f6:	46b8      	mov	r8, r7
 80123f8:	425b      	negs	r3, r3
 80123fa:	199e      	adds	r6, r3, r6
 80123fc:	3a02      	subs	r2, #2
 80123fe:	1989      	adds	r1, r1, r6
 8012400:	42a9      	cmp	r1, r5
 8012402:	d000      	beq.n	8012406 <__aeabi_ddiv+0x57a>
 8012404:	e754      	b.n	80122b0 <__aeabi_ddiv+0x424>
 8012406:	4540      	cmp	r0, r8
 8012408:	d000      	beq.n	801240c <__aeabi_ddiv+0x580>
 801240a:	e751      	b.n	80122b0 <__aeabi_ddiv+0x424>
 801240c:	e5ab      	b.n	8011f66 <__aeabi_ddiv+0xda>
 801240e:	001a      	movs	r2, r3
 8012410:	e7f6      	b.n	8012400 <__aeabi_ddiv+0x574>
 8012412:	211f      	movs	r1, #31
 8012414:	465f      	mov	r7, fp
 8012416:	4249      	negs	r1, r1
 8012418:	1b0c      	subs	r4, r1, r4
 801241a:	40e7      	lsrs	r7, r4
 801241c:	2b20      	cmp	r3, #32
 801241e:	d007      	beq.n	8012430 <__aeabi_ddiv+0x5a4>
 8012420:	491a      	ldr	r1, [pc, #104]	; (801248c <__aeabi_ddiv+0x600>)
 8012422:	9b00      	ldr	r3, [sp, #0]
 8012424:	468c      	mov	ip, r1
 8012426:	4463      	add	r3, ip
 8012428:	0018      	movs	r0, r3
 801242a:	465b      	mov	r3, fp
 801242c:	4083      	lsls	r3, r0
 801242e:	431a      	orrs	r2, r3
 8012430:	1e50      	subs	r0, r2, #1
 8012432:	4182      	sbcs	r2, r0
 8012434:	433a      	orrs	r2, r7
 8012436:	2707      	movs	r7, #7
 8012438:	2300      	movs	r3, #0
 801243a:	4017      	ands	r7, r2
 801243c:	d009      	beq.n	8012452 <__aeabi_ddiv+0x5c6>
 801243e:	210f      	movs	r1, #15
 8012440:	2300      	movs	r3, #0
 8012442:	4011      	ands	r1, r2
 8012444:	0014      	movs	r4, r2
 8012446:	2904      	cmp	r1, #4
 8012448:	d195      	bne.n	8012376 <__aeabi_ddiv+0x4ea>
 801244a:	0022      	movs	r2, r4
 801244c:	075f      	lsls	r7, r3, #29
 801244e:	025b      	lsls	r3, r3, #9
 8012450:	0b1b      	lsrs	r3, r3, #12
 8012452:	08d2      	lsrs	r2, r2, #3
 8012454:	4317      	orrs	r7, r2
 8012456:	2200      	movs	r2, #0
 8012458:	e5a6      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 801245a:	2380      	movs	r3, #128	; 0x80
 801245c:	4659      	mov	r1, fp
 801245e:	031b      	lsls	r3, r3, #12
 8012460:	430b      	orrs	r3, r1
 8012462:	031b      	lsls	r3, r3, #12
 8012464:	0017      	movs	r7, r2
 8012466:	0b1b      	lsrs	r3, r3, #12
 8012468:	4a06      	ldr	r2, [pc, #24]	; (8012484 <__aeabi_ddiv+0x5f8>)
 801246a:	e59d      	b.n	8011fa8 <__aeabi_ddiv+0x11c>
 801246c:	42bd      	cmp	r5, r7
 801246e:	d8b2      	bhi.n	80123d6 <__aeabi_ddiv+0x54a>
 8012470:	469b      	mov	fp, r3
 8012472:	2400      	movs	r4, #0
 8012474:	e6bf      	b.n	80121f6 <__aeabi_ddiv+0x36a>
 8012476:	4580      	cmp	r8, r0
 8012478:	d3b9      	bcc.n	80123ee <__aeabi_ddiv+0x562>
 801247a:	001a      	movs	r2, r3
 801247c:	e7c3      	b.n	8012406 <__aeabi_ddiv+0x57a>
 801247e:	46c0      	nop			; (mov r8, r8)
 8012480:	000003ff 	.word	0x000003ff
 8012484:	000007ff 	.word	0x000007ff
 8012488:	0000041e 	.word	0x0000041e
 801248c:	0000043e 	.word	0x0000043e

08012490 <__eqdf2>:
 8012490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012492:	464f      	mov	r7, r9
 8012494:	4646      	mov	r6, r8
 8012496:	46d6      	mov	lr, sl
 8012498:	4684      	mov	ip, r0
 801249a:	b5c0      	push	{r6, r7, lr}
 801249c:	4680      	mov	r8, r0
 801249e:	4e19      	ldr	r6, [pc, #100]	; (8012504 <__eqdf2+0x74>)
 80124a0:	0318      	lsls	r0, r3, #12
 80124a2:	030f      	lsls	r7, r1, #12
 80124a4:	004d      	lsls	r5, r1, #1
 80124a6:	0b00      	lsrs	r0, r0, #12
 80124a8:	005c      	lsls	r4, r3, #1
 80124aa:	4682      	mov	sl, r0
 80124ac:	0b3f      	lsrs	r7, r7, #12
 80124ae:	0d6d      	lsrs	r5, r5, #21
 80124b0:	0fc9      	lsrs	r1, r1, #31
 80124b2:	4691      	mov	r9, r2
 80124b4:	0d64      	lsrs	r4, r4, #21
 80124b6:	0fdb      	lsrs	r3, r3, #31
 80124b8:	2001      	movs	r0, #1
 80124ba:	42b5      	cmp	r5, r6
 80124bc:	d00a      	beq.n	80124d4 <__eqdf2+0x44>
 80124be:	42b4      	cmp	r4, r6
 80124c0:	d003      	beq.n	80124ca <__eqdf2+0x3a>
 80124c2:	42a5      	cmp	r5, r4
 80124c4:	d101      	bne.n	80124ca <__eqdf2+0x3a>
 80124c6:	4557      	cmp	r7, sl
 80124c8:	d00c      	beq.n	80124e4 <__eqdf2+0x54>
 80124ca:	bc1c      	pop	{r2, r3, r4}
 80124cc:	4690      	mov	r8, r2
 80124ce:	4699      	mov	r9, r3
 80124d0:	46a2      	mov	sl, r4
 80124d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d4:	4666      	mov	r6, ip
 80124d6:	433e      	orrs	r6, r7
 80124d8:	d1f7      	bne.n	80124ca <__eqdf2+0x3a>
 80124da:	42ac      	cmp	r4, r5
 80124dc:	d1f5      	bne.n	80124ca <__eqdf2+0x3a>
 80124de:	4654      	mov	r4, sl
 80124e0:	4314      	orrs	r4, r2
 80124e2:	d1f2      	bne.n	80124ca <__eqdf2+0x3a>
 80124e4:	2001      	movs	r0, #1
 80124e6:	45c8      	cmp	r8, r9
 80124e8:	d1ef      	bne.n	80124ca <__eqdf2+0x3a>
 80124ea:	4299      	cmp	r1, r3
 80124ec:	d007      	beq.n	80124fe <__eqdf2+0x6e>
 80124ee:	2d00      	cmp	r5, #0
 80124f0:	d1eb      	bne.n	80124ca <__eqdf2+0x3a>
 80124f2:	4663      	mov	r3, ip
 80124f4:	431f      	orrs	r7, r3
 80124f6:	0038      	movs	r0, r7
 80124f8:	1e47      	subs	r7, r0, #1
 80124fa:	41b8      	sbcs	r0, r7
 80124fc:	e7e5      	b.n	80124ca <__eqdf2+0x3a>
 80124fe:	2000      	movs	r0, #0
 8012500:	e7e3      	b.n	80124ca <__eqdf2+0x3a>
 8012502:	46c0      	nop			; (mov r8, r8)
 8012504:	000007ff 	.word	0x000007ff

08012508 <__gedf2>:
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250a:	464f      	mov	r7, r9
 801250c:	4646      	mov	r6, r8
 801250e:	46d6      	mov	lr, sl
 8012510:	004d      	lsls	r5, r1, #1
 8012512:	b5c0      	push	{r6, r7, lr}
 8012514:	030e      	lsls	r6, r1, #12
 8012516:	0fc9      	lsrs	r1, r1, #31
 8012518:	468a      	mov	sl, r1
 801251a:	492c      	ldr	r1, [pc, #176]	; (80125cc <__gedf2+0xc4>)
 801251c:	031f      	lsls	r7, r3, #12
 801251e:	005c      	lsls	r4, r3, #1
 8012520:	4680      	mov	r8, r0
 8012522:	0b36      	lsrs	r6, r6, #12
 8012524:	0d6d      	lsrs	r5, r5, #21
 8012526:	4691      	mov	r9, r2
 8012528:	0b3f      	lsrs	r7, r7, #12
 801252a:	0d64      	lsrs	r4, r4, #21
 801252c:	0fdb      	lsrs	r3, r3, #31
 801252e:	428d      	cmp	r5, r1
 8012530:	d01e      	beq.n	8012570 <__gedf2+0x68>
 8012532:	428c      	cmp	r4, r1
 8012534:	d016      	beq.n	8012564 <__gedf2+0x5c>
 8012536:	2d00      	cmp	r5, #0
 8012538:	d11e      	bne.n	8012578 <__gedf2+0x70>
 801253a:	4330      	orrs	r0, r6
 801253c:	4684      	mov	ip, r0
 801253e:	2c00      	cmp	r4, #0
 8012540:	d101      	bne.n	8012546 <__gedf2+0x3e>
 8012542:	433a      	orrs	r2, r7
 8012544:	d023      	beq.n	801258e <__gedf2+0x86>
 8012546:	4662      	mov	r2, ip
 8012548:	2a00      	cmp	r2, #0
 801254a:	d01a      	beq.n	8012582 <__gedf2+0x7a>
 801254c:	459a      	cmp	sl, r3
 801254e:	d029      	beq.n	80125a4 <__gedf2+0x9c>
 8012550:	4651      	mov	r1, sl
 8012552:	2002      	movs	r0, #2
 8012554:	3901      	subs	r1, #1
 8012556:	4008      	ands	r0, r1
 8012558:	3801      	subs	r0, #1
 801255a:	bc1c      	pop	{r2, r3, r4}
 801255c:	4690      	mov	r8, r2
 801255e:	4699      	mov	r9, r3
 8012560:	46a2      	mov	sl, r4
 8012562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012564:	0039      	movs	r1, r7
 8012566:	4311      	orrs	r1, r2
 8012568:	d0e5      	beq.n	8012536 <__gedf2+0x2e>
 801256a:	2002      	movs	r0, #2
 801256c:	4240      	negs	r0, r0
 801256e:	e7f4      	b.n	801255a <__gedf2+0x52>
 8012570:	4330      	orrs	r0, r6
 8012572:	d1fa      	bne.n	801256a <__gedf2+0x62>
 8012574:	42ac      	cmp	r4, r5
 8012576:	d00f      	beq.n	8012598 <__gedf2+0x90>
 8012578:	2c00      	cmp	r4, #0
 801257a:	d10f      	bne.n	801259c <__gedf2+0x94>
 801257c:	433a      	orrs	r2, r7
 801257e:	d0e7      	beq.n	8012550 <__gedf2+0x48>
 8012580:	e00c      	b.n	801259c <__gedf2+0x94>
 8012582:	2201      	movs	r2, #1
 8012584:	3b01      	subs	r3, #1
 8012586:	4393      	bics	r3, r2
 8012588:	0018      	movs	r0, r3
 801258a:	3001      	adds	r0, #1
 801258c:	e7e5      	b.n	801255a <__gedf2+0x52>
 801258e:	4663      	mov	r3, ip
 8012590:	2000      	movs	r0, #0
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0e1      	beq.n	801255a <__gedf2+0x52>
 8012596:	e7db      	b.n	8012550 <__gedf2+0x48>
 8012598:	433a      	orrs	r2, r7
 801259a:	d1e6      	bne.n	801256a <__gedf2+0x62>
 801259c:	459a      	cmp	sl, r3
 801259e:	d1d7      	bne.n	8012550 <__gedf2+0x48>
 80125a0:	42a5      	cmp	r5, r4
 80125a2:	dcd5      	bgt.n	8012550 <__gedf2+0x48>
 80125a4:	42a5      	cmp	r5, r4
 80125a6:	db05      	blt.n	80125b4 <__gedf2+0xac>
 80125a8:	42be      	cmp	r6, r7
 80125aa:	d8d1      	bhi.n	8012550 <__gedf2+0x48>
 80125ac:	d008      	beq.n	80125c0 <__gedf2+0xb8>
 80125ae:	2000      	movs	r0, #0
 80125b0:	42be      	cmp	r6, r7
 80125b2:	d2d2      	bcs.n	801255a <__gedf2+0x52>
 80125b4:	4650      	mov	r0, sl
 80125b6:	2301      	movs	r3, #1
 80125b8:	3801      	subs	r0, #1
 80125ba:	4398      	bics	r0, r3
 80125bc:	3001      	adds	r0, #1
 80125be:	e7cc      	b.n	801255a <__gedf2+0x52>
 80125c0:	45c8      	cmp	r8, r9
 80125c2:	d8c5      	bhi.n	8012550 <__gedf2+0x48>
 80125c4:	2000      	movs	r0, #0
 80125c6:	45c8      	cmp	r8, r9
 80125c8:	d3f4      	bcc.n	80125b4 <__gedf2+0xac>
 80125ca:	e7c6      	b.n	801255a <__gedf2+0x52>
 80125cc:	000007ff 	.word	0x000007ff

080125d0 <__ledf2>:
 80125d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125d2:	464f      	mov	r7, r9
 80125d4:	4646      	mov	r6, r8
 80125d6:	46d6      	mov	lr, sl
 80125d8:	004d      	lsls	r5, r1, #1
 80125da:	b5c0      	push	{r6, r7, lr}
 80125dc:	030e      	lsls	r6, r1, #12
 80125de:	0fc9      	lsrs	r1, r1, #31
 80125e0:	468a      	mov	sl, r1
 80125e2:	492e      	ldr	r1, [pc, #184]	; (801269c <__ledf2+0xcc>)
 80125e4:	031f      	lsls	r7, r3, #12
 80125e6:	005c      	lsls	r4, r3, #1
 80125e8:	4680      	mov	r8, r0
 80125ea:	0b36      	lsrs	r6, r6, #12
 80125ec:	0d6d      	lsrs	r5, r5, #21
 80125ee:	4691      	mov	r9, r2
 80125f0:	0b3f      	lsrs	r7, r7, #12
 80125f2:	0d64      	lsrs	r4, r4, #21
 80125f4:	0fdb      	lsrs	r3, r3, #31
 80125f6:	428d      	cmp	r5, r1
 80125f8:	d018      	beq.n	801262c <__ledf2+0x5c>
 80125fa:	428c      	cmp	r4, r1
 80125fc:	d011      	beq.n	8012622 <__ledf2+0x52>
 80125fe:	2d00      	cmp	r5, #0
 8012600:	d118      	bne.n	8012634 <__ledf2+0x64>
 8012602:	4330      	orrs	r0, r6
 8012604:	4684      	mov	ip, r0
 8012606:	2c00      	cmp	r4, #0
 8012608:	d11e      	bne.n	8012648 <__ledf2+0x78>
 801260a:	433a      	orrs	r2, r7
 801260c:	d11c      	bne.n	8012648 <__ledf2+0x78>
 801260e:	4663      	mov	r3, ip
 8012610:	2000      	movs	r0, #0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d030      	beq.n	8012678 <__ledf2+0xa8>
 8012616:	4651      	mov	r1, sl
 8012618:	2002      	movs	r0, #2
 801261a:	3901      	subs	r1, #1
 801261c:	4008      	ands	r0, r1
 801261e:	3801      	subs	r0, #1
 8012620:	e02a      	b.n	8012678 <__ledf2+0xa8>
 8012622:	0039      	movs	r1, r7
 8012624:	4311      	orrs	r1, r2
 8012626:	d0ea      	beq.n	80125fe <__ledf2+0x2e>
 8012628:	2002      	movs	r0, #2
 801262a:	e025      	b.n	8012678 <__ledf2+0xa8>
 801262c:	4330      	orrs	r0, r6
 801262e:	d1fb      	bne.n	8012628 <__ledf2+0x58>
 8012630:	42ac      	cmp	r4, r5
 8012632:	d026      	beq.n	8012682 <__ledf2+0xb2>
 8012634:	2c00      	cmp	r4, #0
 8012636:	d126      	bne.n	8012686 <__ledf2+0xb6>
 8012638:	433a      	orrs	r2, r7
 801263a:	d124      	bne.n	8012686 <__ledf2+0xb6>
 801263c:	4651      	mov	r1, sl
 801263e:	2002      	movs	r0, #2
 8012640:	3901      	subs	r1, #1
 8012642:	4008      	ands	r0, r1
 8012644:	3801      	subs	r0, #1
 8012646:	e017      	b.n	8012678 <__ledf2+0xa8>
 8012648:	4662      	mov	r2, ip
 801264a:	2a00      	cmp	r2, #0
 801264c:	d00f      	beq.n	801266e <__ledf2+0x9e>
 801264e:	459a      	cmp	sl, r3
 8012650:	d1e1      	bne.n	8012616 <__ledf2+0x46>
 8012652:	42a5      	cmp	r5, r4
 8012654:	db05      	blt.n	8012662 <__ledf2+0x92>
 8012656:	42be      	cmp	r6, r7
 8012658:	d8dd      	bhi.n	8012616 <__ledf2+0x46>
 801265a:	d019      	beq.n	8012690 <__ledf2+0xc0>
 801265c:	2000      	movs	r0, #0
 801265e:	42be      	cmp	r6, r7
 8012660:	d20a      	bcs.n	8012678 <__ledf2+0xa8>
 8012662:	4650      	mov	r0, sl
 8012664:	2301      	movs	r3, #1
 8012666:	3801      	subs	r0, #1
 8012668:	4398      	bics	r0, r3
 801266a:	3001      	adds	r0, #1
 801266c:	e004      	b.n	8012678 <__ledf2+0xa8>
 801266e:	2201      	movs	r2, #1
 8012670:	3b01      	subs	r3, #1
 8012672:	4393      	bics	r3, r2
 8012674:	0018      	movs	r0, r3
 8012676:	3001      	adds	r0, #1
 8012678:	bc1c      	pop	{r2, r3, r4}
 801267a:	4690      	mov	r8, r2
 801267c:	4699      	mov	r9, r3
 801267e:	46a2      	mov	sl, r4
 8012680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012682:	433a      	orrs	r2, r7
 8012684:	d1d0      	bne.n	8012628 <__ledf2+0x58>
 8012686:	459a      	cmp	sl, r3
 8012688:	d1c5      	bne.n	8012616 <__ledf2+0x46>
 801268a:	42a5      	cmp	r5, r4
 801268c:	dcc3      	bgt.n	8012616 <__ledf2+0x46>
 801268e:	e7e0      	b.n	8012652 <__ledf2+0x82>
 8012690:	45c8      	cmp	r8, r9
 8012692:	d8c0      	bhi.n	8012616 <__ledf2+0x46>
 8012694:	2000      	movs	r0, #0
 8012696:	45c8      	cmp	r8, r9
 8012698:	d3e3      	bcc.n	8012662 <__ledf2+0x92>
 801269a:	e7ed      	b.n	8012678 <__ledf2+0xa8>
 801269c:	000007ff 	.word	0x000007ff

080126a0 <__aeabi_dmul>:
 80126a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126a2:	4657      	mov	r7, sl
 80126a4:	46de      	mov	lr, fp
 80126a6:	464e      	mov	r6, r9
 80126a8:	4645      	mov	r5, r8
 80126aa:	b5e0      	push	{r5, r6, r7, lr}
 80126ac:	4683      	mov	fp, r0
 80126ae:	0006      	movs	r6, r0
 80126b0:	030f      	lsls	r7, r1, #12
 80126b2:	0048      	lsls	r0, r1, #1
 80126b4:	b087      	sub	sp, #28
 80126b6:	4692      	mov	sl, r2
 80126b8:	001d      	movs	r5, r3
 80126ba:	0b3f      	lsrs	r7, r7, #12
 80126bc:	0d40      	lsrs	r0, r0, #21
 80126be:	0fcc      	lsrs	r4, r1, #31
 80126c0:	2800      	cmp	r0, #0
 80126c2:	d100      	bne.n	80126c6 <__aeabi_dmul+0x26>
 80126c4:	e06f      	b.n	80127a6 <__aeabi_dmul+0x106>
 80126c6:	4bde      	ldr	r3, [pc, #888]	; (8012a40 <__aeabi_dmul+0x3a0>)
 80126c8:	4298      	cmp	r0, r3
 80126ca:	d038      	beq.n	801273e <__aeabi_dmul+0x9e>
 80126cc:	2380      	movs	r3, #128	; 0x80
 80126ce:	00ff      	lsls	r7, r7, #3
 80126d0:	041b      	lsls	r3, r3, #16
 80126d2:	431f      	orrs	r7, r3
 80126d4:	0f73      	lsrs	r3, r6, #29
 80126d6:	433b      	orrs	r3, r7
 80126d8:	9301      	str	r3, [sp, #4]
 80126da:	4bda      	ldr	r3, [pc, #872]	; (8012a44 <__aeabi_dmul+0x3a4>)
 80126dc:	2700      	movs	r7, #0
 80126de:	4699      	mov	r9, r3
 80126e0:	2300      	movs	r3, #0
 80126e2:	469b      	mov	fp, r3
 80126e4:	00f6      	lsls	r6, r6, #3
 80126e6:	4481      	add	r9, r0
 80126e8:	032b      	lsls	r3, r5, #12
 80126ea:	0069      	lsls	r1, r5, #1
 80126ec:	0b1b      	lsrs	r3, r3, #12
 80126ee:	4652      	mov	r2, sl
 80126f0:	4698      	mov	r8, r3
 80126f2:	0d49      	lsrs	r1, r1, #21
 80126f4:	0fed      	lsrs	r5, r5, #31
 80126f6:	2900      	cmp	r1, #0
 80126f8:	d100      	bne.n	80126fc <__aeabi_dmul+0x5c>
 80126fa:	e085      	b.n	8012808 <__aeabi_dmul+0x168>
 80126fc:	4bd0      	ldr	r3, [pc, #832]	; (8012a40 <__aeabi_dmul+0x3a0>)
 80126fe:	4299      	cmp	r1, r3
 8012700:	d100      	bne.n	8012704 <__aeabi_dmul+0x64>
 8012702:	e073      	b.n	80127ec <__aeabi_dmul+0x14c>
 8012704:	4643      	mov	r3, r8
 8012706:	00da      	lsls	r2, r3, #3
 8012708:	2380      	movs	r3, #128	; 0x80
 801270a:	041b      	lsls	r3, r3, #16
 801270c:	4313      	orrs	r3, r2
 801270e:	4652      	mov	r2, sl
 8012710:	48cc      	ldr	r0, [pc, #816]	; (8012a44 <__aeabi_dmul+0x3a4>)
 8012712:	0f52      	lsrs	r2, r2, #29
 8012714:	4684      	mov	ip, r0
 8012716:	4313      	orrs	r3, r2
 8012718:	4652      	mov	r2, sl
 801271a:	2000      	movs	r0, #0
 801271c:	4461      	add	r1, ip
 801271e:	00d2      	lsls	r2, r2, #3
 8012720:	4489      	add	r9, r1
 8012722:	0021      	movs	r1, r4
 8012724:	4069      	eors	r1, r5
 8012726:	9100      	str	r1, [sp, #0]
 8012728:	468c      	mov	ip, r1
 801272a:	2101      	movs	r1, #1
 801272c:	4449      	add	r1, r9
 801272e:	468a      	mov	sl, r1
 8012730:	2f0f      	cmp	r7, #15
 8012732:	d900      	bls.n	8012736 <__aeabi_dmul+0x96>
 8012734:	e090      	b.n	8012858 <__aeabi_dmul+0x1b8>
 8012736:	49c4      	ldr	r1, [pc, #784]	; (8012a48 <__aeabi_dmul+0x3a8>)
 8012738:	00bf      	lsls	r7, r7, #2
 801273a:	59cf      	ldr	r7, [r1, r7]
 801273c:	46bf      	mov	pc, r7
 801273e:	465b      	mov	r3, fp
 8012740:	433b      	orrs	r3, r7
 8012742:	9301      	str	r3, [sp, #4]
 8012744:	d000      	beq.n	8012748 <__aeabi_dmul+0xa8>
 8012746:	e16a      	b.n	8012a1e <__aeabi_dmul+0x37e>
 8012748:	2302      	movs	r3, #2
 801274a:	2708      	movs	r7, #8
 801274c:	2600      	movs	r6, #0
 801274e:	4681      	mov	r9, r0
 8012750:	469b      	mov	fp, r3
 8012752:	e7c9      	b.n	80126e8 <__aeabi_dmul+0x48>
 8012754:	0032      	movs	r2, r6
 8012756:	4658      	mov	r0, fp
 8012758:	9b01      	ldr	r3, [sp, #4]
 801275a:	4661      	mov	r1, ip
 801275c:	9100      	str	r1, [sp, #0]
 801275e:	2802      	cmp	r0, #2
 8012760:	d100      	bne.n	8012764 <__aeabi_dmul+0xc4>
 8012762:	e075      	b.n	8012850 <__aeabi_dmul+0x1b0>
 8012764:	2803      	cmp	r0, #3
 8012766:	d100      	bne.n	801276a <__aeabi_dmul+0xca>
 8012768:	e1fe      	b.n	8012b68 <__aeabi_dmul+0x4c8>
 801276a:	2801      	cmp	r0, #1
 801276c:	d000      	beq.n	8012770 <__aeabi_dmul+0xd0>
 801276e:	e12c      	b.n	80129ca <__aeabi_dmul+0x32a>
 8012770:	2300      	movs	r3, #0
 8012772:	2700      	movs	r7, #0
 8012774:	2600      	movs	r6, #0
 8012776:	2500      	movs	r5, #0
 8012778:	033f      	lsls	r7, r7, #12
 801277a:	0d2a      	lsrs	r2, r5, #20
 801277c:	0b3f      	lsrs	r7, r7, #12
 801277e:	48b3      	ldr	r0, [pc, #716]	; (8012a4c <__aeabi_dmul+0x3ac>)
 8012780:	0512      	lsls	r2, r2, #20
 8012782:	433a      	orrs	r2, r7
 8012784:	4002      	ands	r2, r0
 8012786:	051b      	lsls	r3, r3, #20
 8012788:	4313      	orrs	r3, r2
 801278a:	9a00      	ldr	r2, [sp, #0]
 801278c:	005b      	lsls	r3, r3, #1
 801278e:	07d1      	lsls	r1, r2, #31
 8012790:	085b      	lsrs	r3, r3, #1
 8012792:	430b      	orrs	r3, r1
 8012794:	0030      	movs	r0, r6
 8012796:	0019      	movs	r1, r3
 8012798:	b007      	add	sp, #28
 801279a:	bc3c      	pop	{r2, r3, r4, r5}
 801279c:	4690      	mov	r8, r2
 801279e:	4699      	mov	r9, r3
 80127a0:	46a2      	mov	sl, r4
 80127a2:	46ab      	mov	fp, r5
 80127a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a6:	465b      	mov	r3, fp
 80127a8:	433b      	orrs	r3, r7
 80127aa:	9301      	str	r3, [sp, #4]
 80127ac:	d100      	bne.n	80127b0 <__aeabi_dmul+0x110>
 80127ae:	e12f      	b.n	8012a10 <__aeabi_dmul+0x370>
 80127b0:	2f00      	cmp	r7, #0
 80127b2:	d100      	bne.n	80127b6 <__aeabi_dmul+0x116>
 80127b4:	e1a5      	b.n	8012b02 <__aeabi_dmul+0x462>
 80127b6:	0038      	movs	r0, r7
 80127b8:	f7fe fba2 	bl	8010f00 <__clzsi2>
 80127bc:	0003      	movs	r3, r0
 80127be:	3b0b      	subs	r3, #11
 80127c0:	2b1c      	cmp	r3, #28
 80127c2:	dd00      	ble.n	80127c6 <__aeabi_dmul+0x126>
 80127c4:	e196      	b.n	8012af4 <__aeabi_dmul+0x454>
 80127c6:	221d      	movs	r2, #29
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	465a      	mov	r2, fp
 80127cc:	0001      	movs	r1, r0
 80127ce:	40da      	lsrs	r2, r3
 80127d0:	465e      	mov	r6, fp
 80127d2:	3908      	subs	r1, #8
 80127d4:	408f      	lsls	r7, r1
 80127d6:	0013      	movs	r3, r2
 80127d8:	408e      	lsls	r6, r1
 80127da:	433b      	orrs	r3, r7
 80127dc:	9301      	str	r3, [sp, #4]
 80127de:	4b9c      	ldr	r3, [pc, #624]	; (8012a50 <__aeabi_dmul+0x3b0>)
 80127e0:	2700      	movs	r7, #0
 80127e2:	1a1b      	subs	r3, r3, r0
 80127e4:	4699      	mov	r9, r3
 80127e6:	2300      	movs	r3, #0
 80127e8:	469b      	mov	fp, r3
 80127ea:	e77d      	b.n	80126e8 <__aeabi_dmul+0x48>
 80127ec:	4641      	mov	r1, r8
 80127ee:	4653      	mov	r3, sl
 80127f0:	430b      	orrs	r3, r1
 80127f2:	4993      	ldr	r1, [pc, #588]	; (8012a40 <__aeabi_dmul+0x3a0>)
 80127f4:	468c      	mov	ip, r1
 80127f6:	44e1      	add	r9, ip
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d000      	beq.n	80127fe <__aeabi_dmul+0x15e>
 80127fc:	e11a      	b.n	8012a34 <__aeabi_dmul+0x394>
 80127fe:	2202      	movs	r2, #2
 8012800:	2002      	movs	r0, #2
 8012802:	4317      	orrs	r7, r2
 8012804:	2200      	movs	r2, #0
 8012806:	e78c      	b.n	8012722 <__aeabi_dmul+0x82>
 8012808:	4313      	orrs	r3, r2
 801280a:	d100      	bne.n	801280e <__aeabi_dmul+0x16e>
 801280c:	e10d      	b.n	8012a2a <__aeabi_dmul+0x38a>
 801280e:	4643      	mov	r3, r8
 8012810:	2b00      	cmp	r3, #0
 8012812:	d100      	bne.n	8012816 <__aeabi_dmul+0x176>
 8012814:	e181      	b.n	8012b1a <__aeabi_dmul+0x47a>
 8012816:	4640      	mov	r0, r8
 8012818:	f7fe fb72 	bl	8010f00 <__clzsi2>
 801281c:	0002      	movs	r2, r0
 801281e:	3a0b      	subs	r2, #11
 8012820:	2a1c      	cmp	r2, #28
 8012822:	dd00      	ble.n	8012826 <__aeabi_dmul+0x186>
 8012824:	e172      	b.n	8012b0c <__aeabi_dmul+0x46c>
 8012826:	0001      	movs	r1, r0
 8012828:	4643      	mov	r3, r8
 801282a:	3908      	subs	r1, #8
 801282c:	408b      	lsls	r3, r1
 801282e:	4698      	mov	r8, r3
 8012830:	231d      	movs	r3, #29
 8012832:	1a9a      	subs	r2, r3, r2
 8012834:	4653      	mov	r3, sl
 8012836:	40d3      	lsrs	r3, r2
 8012838:	001a      	movs	r2, r3
 801283a:	4643      	mov	r3, r8
 801283c:	4313      	orrs	r3, r2
 801283e:	4652      	mov	r2, sl
 8012840:	408a      	lsls	r2, r1
 8012842:	4649      	mov	r1, r9
 8012844:	1a08      	subs	r0, r1, r0
 8012846:	4982      	ldr	r1, [pc, #520]	; (8012a50 <__aeabi_dmul+0x3b0>)
 8012848:	4689      	mov	r9, r1
 801284a:	4481      	add	r9, r0
 801284c:	2000      	movs	r0, #0
 801284e:	e768      	b.n	8012722 <__aeabi_dmul+0x82>
 8012850:	4b7b      	ldr	r3, [pc, #492]	; (8012a40 <__aeabi_dmul+0x3a0>)
 8012852:	2700      	movs	r7, #0
 8012854:	2600      	movs	r6, #0
 8012856:	e78e      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012858:	0c14      	lsrs	r4, r2, #16
 801285a:	0412      	lsls	r2, r2, #16
 801285c:	0c12      	lsrs	r2, r2, #16
 801285e:	0011      	movs	r1, r2
 8012860:	0c37      	lsrs	r7, r6, #16
 8012862:	0436      	lsls	r6, r6, #16
 8012864:	0c35      	lsrs	r5, r6, #16
 8012866:	4379      	muls	r1, r7
 8012868:	0028      	movs	r0, r5
 801286a:	468c      	mov	ip, r1
 801286c:	002e      	movs	r6, r5
 801286e:	4360      	muls	r0, r4
 8012870:	4460      	add	r0, ip
 8012872:	4683      	mov	fp, r0
 8012874:	4356      	muls	r6, r2
 8012876:	0021      	movs	r1, r4
 8012878:	0c30      	lsrs	r0, r6, #16
 801287a:	4680      	mov	r8, r0
 801287c:	4658      	mov	r0, fp
 801287e:	4379      	muls	r1, r7
 8012880:	4440      	add	r0, r8
 8012882:	9102      	str	r1, [sp, #8]
 8012884:	4584      	cmp	ip, r0
 8012886:	d906      	bls.n	8012896 <__aeabi_dmul+0x1f6>
 8012888:	4688      	mov	r8, r1
 801288a:	2180      	movs	r1, #128	; 0x80
 801288c:	0249      	lsls	r1, r1, #9
 801288e:	468c      	mov	ip, r1
 8012890:	44e0      	add	r8, ip
 8012892:	4641      	mov	r1, r8
 8012894:	9102      	str	r1, [sp, #8]
 8012896:	0436      	lsls	r6, r6, #16
 8012898:	0c01      	lsrs	r1, r0, #16
 801289a:	0c36      	lsrs	r6, r6, #16
 801289c:	0400      	lsls	r0, r0, #16
 801289e:	468b      	mov	fp, r1
 80128a0:	1981      	adds	r1, r0, r6
 80128a2:	0c1e      	lsrs	r6, r3, #16
 80128a4:	041b      	lsls	r3, r3, #16
 80128a6:	0c1b      	lsrs	r3, r3, #16
 80128a8:	9103      	str	r1, [sp, #12]
 80128aa:	0019      	movs	r1, r3
 80128ac:	4379      	muls	r1, r7
 80128ae:	468c      	mov	ip, r1
 80128b0:	0028      	movs	r0, r5
 80128b2:	4375      	muls	r5, r6
 80128b4:	4465      	add	r5, ip
 80128b6:	46a8      	mov	r8, r5
 80128b8:	4358      	muls	r0, r3
 80128ba:	0c05      	lsrs	r5, r0, #16
 80128bc:	4445      	add	r5, r8
 80128be:	4377      	muls	r7, r6
 80128c0:	42a9      	cmp	r1, r5
 80128c2:	d903      	bls.n	80128cc <__aeabi_dmul+0x22c>
 80128c4:	2180      	movs	r1, #128	; 0x80
 80128c6:	0249      	lsls	r1, r1, #9
 80128c8:	468c      	mov	ip, r1
 80128ca:	4467      	add	r7, ip
 80128cc:	0c29      	lsrs	r1, r5, #16
 80128ce:	468c      	mov	ip, r1
 80128d0:	0039      	movs	r1, r7
 80128d2:	0400      	lsls	r0, r0, #16
 80128d4:	0c00      	lsrs	r0, r0, #16
 80128d6:	042d      	lsls	r5, r5, #16
 80128d8:	182d      	adds	r5, r5, r0
 80128da:	4461      	add	r1, ip
 80128dc:	44ab      	add	fp, r5
 80128de:	9105      	str	r1, [sp, #20]
 80128e0:	4659      	mov	r1, fp
 80128e2:	9104      	str	r1, [sp, #16]
 80128e4:	9901      	ldr	r1, [sp, #4]
 80128e6:	040f      	lsls	r7, r1, #16
 80128e8:	0c3f      	lsrs	r7, r7, #16
 80128ea:	0c08      	lsrs	r0, r1, #16
 80128ec:	0039      	movs	r1, r7
 80128ee:	4351      	muls	r1, r2
 80128f0:	4342      	muls	r2, r0
 80128f2:	4690      	mov	r8, r2
 80128f4:	0002      	movs	r2, r0
 80128f6:	468c      	mov	ip, r1
 80128f8:	0c09      	lsrs	r1, r1, #16
 80128fa:	468b      	mov	fp, r1
 80128fc:	4362      	muls	r2, r4
 80128fe:	437c      	muls	r4, r7
 8012900:	4444      	add	r4, r8
 8012902:	445c      	add	r4, fp
 8012904:	45a0      	cmp	r8, r4
 8012906:	d903      	bls.n	8012910 <__aeabi_dmul+0x270>
 8012908:	2180      	movs	r1, #128	; 0x80
 801290a:	0249      	lsls	r1, r1, #9
 801290c:	4688      	mov	r8, r1
 801290e:	4442      	add	r2, r8
 8012910:	0c21      	lsrs	r1, r4, #16
 8012912:	4688      	mov	r8, r1
 8012914:	4661      	mov	r1, ip
 8012916:	0409      	lsls	r1, r1, #16
 8012918:	0c09      	lsrs	r1, r1, #16
 801291a:	468c      	mov	ip, r1
 801291c:	0039      	movs	r1, r7
 801291e:	4359      	muls	r1, r3
 8012920:	4343      	muls	r3, r0
 8012922:	4370      	muls	r0, r6
 8012924:	437e      	muls	r6, r7
 8012926:	0c0f      	lsrs	r7, r1, #16
 8012928:	18f6      	adds	r6, r6, r3
 801292a:	0424      	lsls	r4, r4, #16
 801292c:	19be      	adds	r6, r7, r6
 801292e:	4464      	add	r4, ip
 8012930:	4442      	add	r2, r8
 8012932:	468c      	mov	ip, r1
 8012934:	42b3      	cmp	r3, r6
 8012936:	d903      	bls.n	8012940 <__aeabi_dmul+0x2a0>
 8012938:	2380      	movs	r3, #128	; 0x80
 801293a:	025b      	lsls	r3, r3, #9
 801293c:	4698      	mov	r8, r3
 801293e:	4440      	add	r0, r8
 8012940:	9b02      	ldr	r3, [sp, #8]
 8012942:	4661      	mov	r1, ip
 8012944:	4698      	mov	r8, r3
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	0437      	lsls	r7, r6, #16
 801294a:	4443      	add	r3, r8
 801294c:	469b      	mov	fp, r3
 801294e:	45ab      	cmp	fp, r5
 8012950:	41ad      	sbcs	r5, r5
 8012952:	426b      	negs	r3, r5
 8012954:	040d      	lsls	r5, r1, #16
 8012956:	9905      	ldr	r1, [sp, #20]
 8012958:	0c2d      	lsrs	r5, r5, #16
 801295a:	468c      	mov	ip, r1
 801295c:	197f      	adds	r7, r7, r5
 801295e:	4467      	add	r7, ip
 8012960:	18fd      	adds	r5, r7, r3
 8012962:	46a8      	mov	r8, r5
 8012964:	465d      	mov	r5, fp
 8012966:	192d      	adds	r5, r5, r4
 8012968:	42a5      	cmp	r5, r4
 801296a:	41a4      	sbcs	r4, r4
 801296c:	4693      	mov	fp, r2
 801296e:	4264      	negs	r4, r4
 8012970:	46a4      	mov	ip, r4
 8012972:	44c3      	add	fp, r8
 8012974:	44dc      	add	ip, fp
 8012976:	428f      	cmp	r7, r1
 8012978:	41bf      	sbcs	r7, r7
 801297a:	4598      	cmp	r8, r3
 801297c:	419b      	sbcs	r3, r3
 801297e:	4593      	cmp	fp, r2
 8012980:	4192      	sbcs	r2, r2
 8012982:	45a4      	cmp	ip, r4
 8012984:	41a4      	sbcs	r4, r4
 8012986:	425b      	negs	r3, r3
 8012988:	427f      	negs	r7, r7
 801298a:	431f      	orrs	r7, r3
 801298c:	0c36      	lsrs	r6, r6, #16
 801298e:	4252      	negs	r2, r2
 8012990:	4264      	negs	r4, r4
 8012992:	19bf      	adds	r7, r7, r6
 8012994:	4322      	orrs	r2, r4
 8012996:	18bf      	adds	r7, r7, r2
 8012998:	4662      	mov	r2, ip
 801299a:	1838      	adds	r0, r7, r0
 801299c:	0243      	lsls	r3, r0, #9
 801299e:	0dd2      	lsrs	r2, r2, #23
 80129a0:	9903      	ldr	r1, [sp, #12]
 80129a2:	4313      	orrs	r3, r2
 80129a4:	026a      	lsls	r2, r5, #9
 80129a6:	430a      	orrs	r2, r1
 80129a8:	1e50      	subs	r0, r2, #1
 80129aa:	4182      	sbcs	r2, r0
 80129ac:	4661      	mov	r1, ip
 80129ae:	0ded      	lsrs	r5, r5, #23
 80129b0:	432a      	orrs	r2, r5
 80129b2:	024e      	lsls	r6, r1, #9
 80129b4:	4332      	orrs	r2, r6
 80129b6:	01d9      	lsls	r1, r3, #7
 80129b8:	d400      	bmi.n	80129bc <__aeabi_dmul+0x31c>
 80129ba:	e0b3      	b.n	8012b24 <__aeabi_dmul+0x484>
 80129bc:	2601      	movs	r6, #1
 80129be:	0850      	lsrs	r0, r2, #1
 80129c0:	4032      	ands	r2, r6
 80129c2:	4302      	orrs	r2, r0
 80129c4:	07de      	lsls	r6, r3, #31
 80129c6:	4332      	orrs	r2, r6
 80129c8:	085b      	lsrs	r3, r3, #1
 80129ca:	4c22      	ldr	r4, [pc, #136]	; (8012a54 <__aeabi_dmul+0x3b4>)
 80129cc:	4454      	add	r4, sl
 80129ce:	2c00      	cmp	r4, #0
 80129d0:	dd62      	ble.n	8012a98 <__aeabi_dmul+0x3f8>
 80129d2:	0751      	lsls	r1, r2, #29
 80129d4:	d009      	beq.n	80129ea <__aeabi_dmul+0x34a>
 80129d6:	200f      	movs	r0, #15
 80129d8:	4010      	ands	r0, r2
 80129da:	2804      	cmp	r0, #4
 80129dc:	d005      	beq.n	80129ea <__aeabi_dmul+0x34a>
 80129de:	1d10      	adds	r0, r2, #4
 80129e0:	4290      	cmp	r0, r2
 80129e2:	4192      	sbcs	r2, r2
 80129e4:	4252      	negs	r2, r2
 80129e6:	189b      	adds	r3, r3, r2
 80129e8:	0002      	movs	r2, r0
 80129ea:	01d9      	lsls	r1, r3, #7
 80129ec:	d504      	bpl.n	80129f8 <__aeabi_dmul+0x358>
 80129ee:	2480      	movs	r4, #128	; 0x80
 80129f0:	4819      	ldr	r0, [pc, #100]	; (8012a58 <__aeabi_dmul+0x3b8>)
 80129f2:	00e4      	lsls	r4, r4, #3
 80129f4:	4003      	ands	r3, r0
 80129f6:	4454      	add	r4, sl
 80129f8:	4818      	ldr	r0, [pc, #96]	; (8012a5c <__aeabi_dmul+0x3bc>)
 80129fa:	4284      	cmp	r4, r0
 80129fc:	dd00      	ble.n	8012a00 <__aeabi_dmul+0x360>
 80129fe:	e727      	b.n	8012850 <__aeabi_dmul+0x1b0>
 8012a00:	075e      	lsls	r6, r3, #29
 8012a02:	025b      	lsls	r3, r3, #9
 8012a04:	08d2      	lsrs	r2, r2, #3
 8012a06:	0b1f      	lsrs	r7, r3, #12
 8012a08:	0563      	lsls	r3, r4, #21
 8012a0a:	4316      	orrs	r6, r2
 8012a0c:	0d5b      	lsrs	r3, r3, #21
 8012a0e:	e6b2      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012a10:	2300      	movs	r3, #0
 8012a12:	4699      	mov	r9, r3
 8012a14:	3301      	adds	r3, #1
 8012a16:	2704      	movs	r7, #4
 8012a18:	2600      	movs	r6, #0
 8012a1a:	469b      	mov	fp, r3
 8012a1c:	e664      	b.n	80126e8 <__aeabi_dmul+0x48>
 8012a1e:	2303      	movs	r3, #3
 8012a20:	9701      	str	r7, [sp, #4]
 8012a22:	4681      	mov	r9, r0
 8012a24:	270c      	movs	r7, #12
 8012a26:	469b      	mov	fp, r3
 8012a28:	e65e      	b.n	80126e8 <__aeabi_dmul+0x48>
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	2001      	movs	r0, #1
 8012a2e:	4317      	orrs	r7, r2
 8012a30:	2200      	movs	r2, #0
 8012a32:	e676      	b.n	8012722 <__aeabi_dmul+0x82>
 8012a34:	2303      	movs	r3, #3
 8012a36:	2003      	movs	r0, #3
 8012a38:	431f      	orrs	r7, r3
 8012a3a:	4643      	mov	r3, r8
 8012a3c:	e671      	b.n	8012722 <__aeabi_dmul+0x82>
 8012a3e:	46c0      	nop			; (mov r8, r8)
 8012a40:	000007ff 	.word	0x000007ff
 8012a44:	fffffc01 	.word	0xfffffc01
 8012a48:	0801cbbc 	.word	0x0801cbbc
 8012a4c:	800fffff 	.word	0x800fffff
 8012a50:	fffffc0d 	.word	0xfffffc0d
 8012a54:	000003ff 	.word	0x000003ff
 8012a58:	feffffff 	.word	0xfeffffff
 8012a5c:	000007fe 	.word	0x000007fe
 8012a60:	2300      	movs	r3, #0
 8012a62:	2780      	movs	r7, #128	; 0x80
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	033f      	lsls	r7, r7, #12
 8012a68:	2600      	movs	r6, #0
 8012a6a:	4b43      	ldr	r3, [pc, #268]	; (8012b78 <__aeabi_dmul+0x4d8>)
 8012a6c:	e683      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012a6e:	9b01      	ldr	r3, [sp, #4]
 8012a70:	0032      	movs	r2, r6
 8012a72:	46a4      	mov	ip, r4
 8012a74:	4658      	mov	r0, fp
 8012a76:	e670      	b.n	801275a <__aeabi_dmul+0xba>
 8012a78:	46ac      	mov	ip, r5
 8012a7a:	e66e      	b.n	801275a <__aeabi_dmul+0xba>
 8012a7c:	2780      	movs	r7, #128	; 0x80
 8012a7e:	9901      	ldr	r1, [sp, #4]
 8012a80:	033f      	lsls	r7, r7, #12
 8012a82:	4239      	tst	r1, r7
 8012a84:	d02d      	beq.n	8012ae2 <__aeabi_dmul+0x442>
 8012a86:	423b      	tst	r3, r7
 8012a88:	d12b      	bne.n	8012ae2 <__aeabi_dmul+0x442>
 8012a8a:	431f      	orrs	r7, r3
 8012a8c:	033f      	lsls	r7, r7, #12
 8012a8e:	0b3f      	lsrs	r7, r7, #12
 8012a90:	9500      	str	r5, [sp, #0]
 8012a92:	0016      	movs	r6, r2
 8012a94:	4b38      	ldr	r3, [pc, #224]	; (8012b78 <__aeabi_dmul+0x4d8>)
 8012a96:	e66e      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012a98:	2501      	movs	r5, #1
 8012a9a:	1b2d      	subs	r5, r5, r4
 8012a9c:	2d38      	cmp	r5, #56	; 0x38
 8012a9e:	dd00      	ble.n	8012aa2 <__aeabi_dmul+0x402>
 8012aa0:	e666      	b.n	8012770 <__aeabi_dmul+0xd0>
 8012aa2:	2d1f      	cmp	r5, #31
 8012aa4:	dc40      	bgt.n	8012b28 <__aeabi_dmul+0x488>
 8012aa6:	4835      	ldr	r0, [pc, #212]	; (8012b7c <__aeabi_dmul+0x4dc>)
 8012aa8:	001c      	movs	r4, r3
 8012aaa:	4450      	add	r0, sl
 8012aac:	0016      	movs	r6, r2
 8012aae:	4082      	lsls	r2, r0
 8012ab0:	4084      	lsls	r4, r0
 8012ab2:	40ee      	lsrs	r6, r5
 8012ab4:	1e50      	subs	r0, r2, #1
 8012ab6:	4182      	sbcs	r2, r0
 8012ab8:	4334      	orrs	r4, r6
 8012aba:	4314      	orrs	r4, r2
 8012abc:	40eb      	lsrs	r3, r5
 8012abe:	0762      	lsls	r2, r4, #29
 8012ac0:	d009      	beq.n	8012ad6 <__aeabi_dmul+0x436>
 8012ac2:	220f      	movs	r2, #15
 8012ac4:	4022      	ands	r2, r4
 8012ac6:	2a04      	cmp	r2, #4
 8012ac8:	d005      	beq.n	8012ad6 <__aeabi_dmul+0x436>
 8012aca:	0022      	movs	r2, r4
 8012acc:	1d14      	adds	r4, r2, #4
 8012ace:	4294      	cmp	r4, r2
 8012ad0:	4180      	sbcs	r0, r0
 8012ad2:	4240      	negs	r0, r0
 8012ad4:	181b      	adds	r3, r3, r0
 8012ad6:	021a      	lsls	r2, r3, #8
 8012ad8:	d53e      	bpl.n	8012b58 <__aeabi_dmul+0x4b8>
 8012ada:	2301      	movs	r3, #1
 8012adc:	2700      	movs	r7, #0
 8012ade:	2600      	movs	r6, #0
 8012ae0:	e649      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012ae2:	2780      	movs	r7, #128	; 0x80
 8012ae4:	9b01      	ldr	r3, [sp, #4]
 8012ae6:	033f      	lsls	r7, r7, #12
 8012ae8:	431f      	orrs	r7, r3
 8012aea:	033f      	lsls	r7, r7, #12
 8012aec:	0b3f      	lsrs	r7, r7, #12
 8012aee:	9400      	str	r4, [sp, #0]
 8012af0:	4b21      	ldr	r3, [pc, #132]	; (8012b78 <__aeabi_dmul+0x4d8>)
 8012af2:	e640      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012af4:	0003      	movs	r3, r0
 8012af6:	465a      	mov	r2, fp
 8012af8:	3b28      	subs	r3, #40	; 0x28
 8012afa:	409a      	lsls	r2, r3
 8012afc:	2600      	movs	r6, #0
 8012afe:	9201      	str	r2, [sp, #4]
 8012b00:	e66d      	b.n	80127de <__aeabi_dmul+0x13e>
 8012b02:	4658      	mov	r0, fp
 8012b04:	f7fe f9fc 	bl	8010f00 <__clzsi2>
 8012b08:	3020      	adds	r0, #32
 8012b0a:	e657      	b.n	80127bc <__aeabi_dmul+0x11c>
 8012b0c:	0003      	movs	r3, r0
 8012b0e:	4652      	mov	r2, sl
 8012b10:	3b28      	subs	r3, #40	; 0x28
 8012b12:	409a      	lsls	r2, r3
 8012b14:	0013      	movs	r3, r2
 8012b16:	2200      	movs	r2, #0
 8012b18:	e693      	b.n	8012842 <__aeabi_dmul+0x1a2>
 8012b1a:	4650      	mov	r0, sl
 8012b1c:	f7fe f9f0 	bl	8010f00 <__clzsi2>
 8012b20:	3020      	adds	r0, #32
 8012b22:	e67b      	b.n	801281c <__aeabi_dmul+0x17c>
 8012b24:	46ca      	mov	sl, r9
 8012b26:	e750      	b.n	80129ca <__aeabi_dmul+0x32a>
 8012b28:	201f      	movs	r0, #31
 8012b2a:	001e      	movs	r6, r3
 8012b2c:	4240      	negs	r0, r0
 8012b2e:	1b04      	subs	r4, r0, r4
 8012b30:	40e6      	lsrs	r6, r4
 8012b32:	2d20      	cmp	r5, #32
 8012b34:	d003      	beq.n	8012b3e <__aeabi_dmul+0x49e>
 8012b36:	4c12      	ldr	r4, [pc, #72]	; (8012b80 <__aeabi_dmul+0x4e0>)
 8012b38:	4454      	add	r4, sl
 8012b3a:	40a3      	lsls	r3, r4
 8012b3c:	431a      	orrs	r2, r3
 8012b3e:	1e50      	subs	r0, r2, #1
 8012b40:	4182      	sbcs	r2, r0
 8012b42:	4332      	orrs	r2, r6
 8012b44:	2607      	movs	r6, #7
 8012b46:	2700      	movs	r7, #0
 8012b48:	4016      	ands	r6, r2
 8012b4a:	d009      	beq.n	8012b60 <__aeabi_dmul+0x4c0>
 8012b4c:	200f      	movs	r0, #15
 8012b4e:	2300      	movs	r3, #0
 8012b50:	4010      	ands	r0, r2
 8012b52:	0014      	movs	r4, r2
 8012b54:	2804      	cmp	r0, #4
 8012b56:	d1b9      	bne.n	8012acc <__aeabi_dmul+0x42c>
 8012b58:	0022      	movs	r2, r4
 8012b5a:	075e      	lsls	r6, r3, #29
 8012b5c:	025b      	lsls	r3, r3, #9
 8012b5e:	0b1f      	lsrs	r7, r3, #12
 8012b60:	08d2      	lsrs	r2, r2, #3
 8012b62:	4316      	orrs	r6, r2
 8012b64:	2300      	movs	r3, #0
 8012b66:	e606      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012b68:	2780      	movs	r7, #128	; 0x80
 8012b6a:	033f      	lsls	r7, r7, #12
 8012b6c:	431f      	orrs	r7, r3
 8012b6e:	033f      	lsls	r7, r7, #12
 8012b70:	0b3f      	lsrs	r7, r7, #12
 8012b72:	0016      	movs	r6, r2
 8012b74:	4b00      	ldr	r3, [pc, #0]	; (8012b78 <__aeabi_dmul+0x4d8>)
 8012b76:	e5fe      	b.n	8012776 <__aeabi_dmul+0xd6>
 8012b78:	000007ff 	.word	0x000007ff
 8012b7c:	0000041e 	.word	0x0000041e
 8012b80:	0000043e 	.word	0x0000043e

08012b84 <__aeabi_dsub>:
 8012b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b86:	4657      	mov	r7, sl
 8012b88:	464e      	mov	r6, r9
 8012b8a:	4645      	mov	r5, r8
 8012b8c:	46de      	mov	lr, fp
 8012b8e:	000c      	movs	r4, r1
 8012b90:	0309      	lsls	r1, r1, #12
 8012b92:	b5e0      	push	{r5, r6, r7, lr}
 8012b94:	0a49      	lsrs	r1, r1, #9
 8012b96:	0f46      	lsrs	r6, r0, #29
 8012b98:	005f      	lsls	r7, r3, #1
 8012b9a:	4331      	orrs	r1, r6
 8012b9c:	031e      	lsls	r6, r3, #12
 8012b9e:	0fdb      	lsrs	r3, r3, #31
 8012ba0:	0a76      	lsrs	r6, r6, #9
 8012ba2:	469b      	mov	fp, r3
 8012ba4:	0f53      	lsrs	r3, r2, #29
 8012ba6:	4333      	orrs	r3, r6
 8012ba8:	4ec8      	ldr	r6, [pc, #800]	; (8012ecc <__aeabi_dsub+0x348>)
 8012baa:	0065      	lsls	r5, r4, #1
 8012bac:	00c0      	lsls	r0, r0, #3
 8012bae:	0fe4      	lsrs	r4, r4, #31
 8012bb0:	00d2      	lsls	r2, r2, #3
 8012bb2:	0d6d      	lsrs	r5, r5, #21
 8012bb4:	46a2      	mov	sl, r4
 8012bb6:	4681      	mov	r9, r0
 8012bb8:	0d7f      	lsrs	r7, r7, #21
 8012bba:	469c      	mov	ip, r3
 8012bbc:	4690      	mov	r8, r2
 8012bbe:	42b7      	cmp	r7, r6
 8012bc0:	d100      	bne.n	8012bc4 <__aeabi_dsub+0x40>
 8012bc2:	e0b9      	b.n	8012d38 <__aeabi_dsub+0x1b4>
 8012bc4:	465b      	mov	r3, fp
 8012bc6:	2601      	movs	r6, #1
 8012bc8:	4073      	eors	r3, r6
 8012bca:	469b      	mov	fp, r3
 8012bcc:	1bee      	subs	r6, r5, r7
 8012bce:	45a3      	cmp	fp, r4
 8012bd0:	d100      	bne.n	8012bd4 <__aeabi_dsub+0x50>
 8012bd2:	e083      	b.n	8012cdc <__aeabi_dsub+0x158>
 8012bd4:	2e00      	cmp	r6, #0
 8012bd6:	dd63      	ble.n	8012ca0 <__aeabi_dsub+0x11c>
 8012bd8:	2f00      	cmp	r7, #0
 8012bda:	d000      	beq.n	8012bde <__aeabi_dsub+0x5a>
 8012bdc:	e0b1      	b.n	8012d42 <__aeabi_dsub+0x1be>
 8012bde:	4663      	mov	r3, ip
 8012be0:	4313      	orrs	r3, r2
 8012be2:	d100      	bne.n	8012be6 <__aeabi_dsub+0x62>
 8012be4:	e123      	b.n	8012e2e <__aeabi_dsub+0x2aa>
 8012be6:	1e73      	subs	r3, r6, #1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d000      	beq.n	8012bee <__aeabi_dsub+0x6a>
 8012bec:	e1ba      	b.n	8012f64 <__aeabi_dsub+0x3e0>
 8012bee:	1a86      	subs	r6, r0, r2
 8012bf0:	4663      	mov	r3, ip
 8012bf2:	42b0      	cmp	r0, r6
 8012bf4:	4180      	sbcs	r0, r0
 8012bf6:	2501      	movs	r5, #1
 8012bf8:	1ac9      	subs	r1, r1, r3
 8012bfa:	4240      	negs	r0, r0
 8012bfc:	1a09      	subs	r1, r1, r0
 8012bfe:	020b      	lsls	r3, r1, #8
 8012c00:	d400      	bmi.n	8012c04 <__aeabi_dsub+0x80>
 8012c02:	e147      	b.n	8012e94 <__aeabi_dsub+0x310>
 8012c04:	0249      	lsls	r1, r1, #9
 8012c06:	0a4b      	lsrs	r3, r1, #9
 8012c08:	4698      	mov	r8, r3
 8012c0a:	4643      	mov	r3, r8
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d100      	bne.n	8012c12 <__aeabi_dsub+0x8e>
 8012c10:	e189      	b.n	8012f26 <__aeabi_dsub+0x3a2>
 8012c12:	4640      	mov	r0, r8
 8012c14:	f7fe f974 	bl	8010f00 <__clzsi2>
 8012c18:	0003      	movs	r3, r0
 8012c1a:	3b08      	subs	r3, #8
 8012c1c:	2b1f      	cmp	r3, #31
 8012c1e:	dd00      	ble.n	8012c22 <__aeabi_dsub+0x9e>
 8012c20:	e17c      	b.n	8012f1c <__aeabi_dsub+0x398>
 8012c22:	2220      	movs	r2, #32
 8012c24:	0030      	movs	r0, r6
 8012c26:	1ad2      	subs	r2, r2, r3
 8012c28:	4641      	mov	r1, r8
 8012c2a:	40d0      	lsrs	r0, r2
 8012c2c:	4099      	lsls	r1, r3
 8012c2e:	0002      	movs	r2, r0
 8012c30:	409e      	lsls	r6, r3
 8012c32:	430a      	orrs	r2, r1
 8012c34:	429d      	cmp	r5, r3
 8012c36:	dd00      	ble.n	8012c3a <__aeabi_dsub+0xb6>
 8012c38:	e16a      	b.n	8012f10 <__aeabi_dsub+0x38c>
 8012c3a:	1b5d      	subs	r5, r3, r5
 8012c3c:	1c6b      	adds	r3, r5, #1
 8012c3e:	2b1f      	cmp	r3, #31
 8012c40:	dd00      	ble.n	8012c44 <__aeabi_dsub+0xc0>
 8012c42:	e194      	b.n	8012f6e <__aeabi_dsub+0x3ea>
 8012c44:	2120      	movs	r1, #32
 8012c46:	0010      	movs	r0, r2
 8012c48:	0035      	movs	r5, r6
 8012c4a:	1ac9      	subs	r1, r1, r3
 8012c4c:	408e      	lsls	r6, r1
 8012c4e:	40da      	lsrs	r2, r3
 8012c50:	4088      	lsls	r0, r1
 8012c52:	40dd      	lsrs	r5, r3
 8012c54:	1e71      	subs	r1, r6, #1
 8012c56:	418e      	sbcs	r6, r1
 8012c58:	0011      	movs	r1, r2
 8012c5a:	2207      	movs	r2, #7
 8012c5c:	4328      	orrs	r0, r5
 8012c5e:	2500      	movs	r5, #0
 8012c60:	4306      	orrs	r6, r0
 8012c62:	4032      	ands	r2, r6
 8012c64:	2a00      	cmp	r2, #0
 8012c66:	d009      	beq.n	8012c7c <__aeabi_dsub+0xf8>
 8012c68:	230f      	movs	r3, #15
 8012c6a:	4033      	ands	r3, r6
 8012c6c:	2b04      	cmp	r3, #4
 8012c6e:	d005      	beq.n	8012c7c <__aeabi_dsub+0xf8>
 8012c70:	1d33      	adds	r3, r6, #4
 8012c72:	42b3      	cmp	r3, r6
 8012c74:	41b6      	sbcs	r6, r6
 8012c76:	4276      	negs	r6, r6
 8012c78:	1989      	adds	r1, r1, r6
 8012c7a:	001e      	movs	r6, r3
 8012c7c:	020b      	lsls	r3, r1, #8
 8012c7e:	d400      	bmi.n	8012c82 <__aeabi_dsub+0xfe>
 8012c80:	e23d      	b.n	80130fe <__aeabi_dsub+0x57a>
 8012c82:	1c6a      	adds	r2, r5, #1
 8012c84:	4b91      	ldr	r3, [pc, #580]	; (8012ecc <__aeabi_dsub+0x348>)
 8012c86:	0555      	lsls	r5, r2, #21
 8012c88:	0d6d      	lsrs	r5, r5, #21
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d100      	bne.n	8012c90 <__aeabi_dsub+0x10c>
 8012c8e:	e119      	b.n	8012ec4 <__aeabi_dsub+0x340>
 8012c90:	4a8f      	ldr	r2, [pc, #572]	; (8012ed0 <__aeabi_dsub+0x34c>)
 8012c92:	08f6      	lsrs	r6, r6, #3
 8012c94:	400a      	ands	r2, r1
 8012c96:	0757      	lsls	r7, r2, #29
 8012c98:	0252      	lsls	r2, r2, #9
 8012c9a:	4337      	orrs	r7, r6
 8012c9c:	0b12      	lsrs	r2, r2, #12
 8012c9e:	e09b      	b.n	8012dd8 <__aeabi_dsub+0x254>
 8012ca0:	2e00      	cmp	r6, #0
 8012ca2:	d000      	beq.n	8012ca6 <__aeabi_dsub+0x122>
 8012ca4:	e0c5      	b.n	8012e32 <__aeabi_dsub+0x2ae>
 8012ca6:	1c6e      	adds	r6, r5, #1
 8012ca8:	0576      	lsls	r6, r6, #21
 8012caa:	0d76      	lsrs	r6, r6, #21
 8012cac:	2e01      	cmp	r6, #1
 8012cae:	dc00      	bgt.n	8012cb2 <__aeabi_dsub+0x12e>
 8012cb0:	e148      	b.n	8012f44 <__aeabi_dsub+0x3c0>
 8012cb2:	4667      	mov	r7, ip
 8012cb4:	1a86      	subs	r6, r0, r2
 8012cb6:	1bcb      	subs	r3, r1, r7
 8012cb8:	42b0      	cmp	r0, r6
 8012cba:	41bf      	sbcs	r7, r7
 8012cbc:	427f      	negs	r7, r7
 8012cbe:	46b8      	mov	r8, r7
 8012cc0:	001f      	movs	r7, r3
 8012cc2:	4643      	mov	r3, r8
 8012cc4:	1aff      	subs	r7, r7, r3
 8012cc6:	003b      	movs	r3, r7
 8012cc8:	46b8      	mov	r8, r7
 8012cca:	021b      	lsls	r3, r3, #8
 8012ccc:	d500      	bpl.n	8012cd0 <__aeabi_dsub+0x14c>
 8012cce:	e15f      	b.n	8012f90 <__aeabi_dsub+0x40c>
 8012cd0:	4337      	orrs	r7, r6
 8012cd2:	d19a      	bne.n	8012c0a <__aeabi_dsub+0x86>
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	2400      	movs	r4, #0
 8012cd8:	2500      	movs	r5, #0
 8012cda:	e079      	b.n	8012dd0 <__aeabi_dsub+0x24c>
 8012cdc:	2e00      	cmp	r6, #0
 8012cde:	dc00      	bgt.n	8012ce2 <__aeabi_dsub+0x15e>
 8012ce0:	e0fa      	b.n	8012ed8 <__aeabi_dsub+0x354>
 8012ce2:	2f00      	cmp	r7, #0
 8012ce4:	d100      	bne.n	8012ce8 <__aeabi_dsub+0x164>
 8012ce6:	e08d      	b.n	8012e04 <__aeabi_dsub+0x280>
 8012ce8:	4b78      	ldr	r3, [pc, #480]	; (8012ecc <__aeabi_dsub+0x348>)
 8012cea:	429d      	cmp	r5, r3
 8012cec:	d067      	beq.n	8012dbe <__aeabi_dsub+0x23a>
 8012cee:	2380      	movs	r3, #128	; 0x80
 8012cf0:	4667      	mov	r7, ip
 8012cf2:	041b      	lsls	r3, r3, #16
 8012cf4:	431f      	orrs	r7, r3
 8012cf6:	46bc      	mov	ip, r7
 8012cf8:	2e38      	cmp	r6, #56	; 0x38
 8012cfa:	dc00      	bgt.n	8012cfe <__aeabi_dsub+0x17a>
 8012cfc:	e152      	b.n	8012fa4 <__aeabi_dsub+0x420>
 8012cfe:	4663      	mov	r3, ip
 8012d00:	4313      	orrs	r3, r2
 8012d02:	1e5a      	subs	r2, r3, #1
 8012d04:	4193      	sbcs	r3, r2
 8012d06:	181e      	adds	r6, r3, r0
 8012d08:	4286      	cmp	r6, r0
 8012d0a:	4180      	sbcs	r0, r0
 8012d0c:	4240      	negs	r0, r0
 8012d0e:	1809      	adds	r1, r1, r0
 8012d10:	020b      	lsls	r3, r1, #8
 8012d12:	d400      	bmi.n	8012d16 <__aeabi_dsub+0x192>
 8012d14:	e0be      	b.n	8012e94 <__aeabi_dsub+0x310>
 8012d16:	4b6d      	ldr	r3, [pc, #436]	; (8012ecc <__aeabi_dsub+0x348>)
 8012d18:	3501      	adds	r5, #1
 8012d1a:	429d      	cmp	r5, r3
 8012d1c:	d100      	bne.n	8012d20 <__aeabi_dsub+0x19c>
 8012d1e:	e0d2      	b.n	8012ec6 <__aeabi_dsub+0x342>
 8012d20:	4a6b      	ldr	r2, [pc, #428]	; (8012ed0 <__aeabi_dsub+0x34c>)
 8012d22:	0873      	lsrs	r3, r6, #1
 8012d24:	400a      	ands	r2, r1
 8012d26:	2101      	movs	r1, #1
 8012d28:	400e      	ands	r6, r1
 8012d2a:	431e      	orrs	r6, r3
 8012d2c:	0851      	lsrs	r1, r2, #1
 8012d2e:	07d3      	lsls	r3, r2, #31
 8012d30:	2207      	movs	r2, #7
 8012d32:	431e      	orrs	r6, r3
 8012d34:	4032      	ands	r2, r6
 8012d36:	e795      	b.n	8012c64 <__aeabi_dsub+0xe0>
 8012d38:	001e      	movs	r6, r3
 8012d3a:	4316      	orrs	r6, r2
 8012d3c:	d000      	beq.n	8012d40 <__aeabi_dsub+0x1bc>
 8012d3e:	e745      	b.n	8012bcc <__aeabi_dsub+0x48>
 8012d40:	e740      	b.n	8012bc4 <__aeabi_dsub+0x40>
 8012d42:	4b62      	ldr	r3, [pc, #392]	; (8012ecc <__aeabi_dsub+0x348>)
 8012d44:	429d      	cmp	r5, r3
 8012d46:	d03a      	beq.n	8012dbe <__aeabi_dsub+0x23a>
 8012d48:	2380      	movs	r3, #128	; 0x80
 8012d4a:	4667      	mov	r7, ip
 8012d4c:	041b      	lsls	r3, r3, #16
 8012d4e:	431f      	orrs	r7, r3
 8012d50:	46bc      	mov	ip, r7
 8012d52:	2e38      	cmp	r6, #56	; 0x38
 8012d54:	dd00      	ble.n	8012d58 <__aeabi_dsub+0x1d4>
 8012d56:	e0eb      	b.n	8012f30 <__aeabi_dsub+0x3ac>
 8012d58:	2e1f      	cmp	r6, #31
 8012d5a:	dc00      	bgt.n	8012d5e <__aeabi_dsub+0x1da>
 8012d5c:	e13a      	b.n	8012fd4 <__aeabi_dsub+0x450>
 8012d5e:	0033      	movs	r3, r6
 8012d60:	4667      	mov	r7, ip
 8012d62:	3b20      	subs	r3, #32
 8012d64:	40df      	lsrs	r7, r3
 8012d66:	003b      	movs	r3, r7
 8012d68:	2e20      	cmp	r6, #32
 8012d6a:	d005      	beq.n	8012d78 <__aeabi_dsub+0x1f4>
 8012d6c:	2740      	movs	r7, #64	; 0x40
 8012d6e:	1bbf      	subs	r7, r7, r6
 8012d70:	4666      	mov	r6, ip
 8012d72:	40be      	lsls	r6, r7
 8012d74:	4332      	orrs	r2, r6
 8012d76:	4690      	mov	r8, r2
 8012d78:	4646      	mov	r6, r8
 8012d7a:	1e72      	subs	r2, r6, #1
 8012d7c:	4196      	sbcs	r6, r2
 8012d7e:	4333      	orrs	r3, r6
 8012d80:	e0da      	b.n	8012f38 <__aeabi_dsub+0x3b4>
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d100      	bne.n	8012d88 <__aeabi_dsub+0x204>
 8012d86:	e214      	b.n	80131b2 <__aeabi_dsub+0x62e>
 8012d88:	4663      	mov	r3, ip
 8012d8a:	4313      	orrs	r3, r2
 8012d8c:	d100      	bne.n	8012d90 <__aeabi_dsub+0x20c>
 8012d8e:	e168      	b.n	8013062 <__aeabi_dsub+0x4de>
 8012d90:	2380      	movs	r3, #128	; 0x80
 8012d92:	074e      	lsls	r6, r1, #29
 8012d94:	08c0      	lsrs	r0, r0, #3
 8012d96:	08c9      	lsrs	r1, r1, #3
 8012d98:	031b      	lsls	r3, r3, #12
 8012d9a:	4306      	orrs	r6, r0
 8012d9c:	4219      	tst	r1, r3
 8012d9e:	d008      	beq.n	8012db2 <__aeabi_dsub+0x22e>
 8012da0:	4660      	mov	r0, ip
 8012da2:	08c0      	lsrs	r0, r0, #3
 8012da4:	4218      	tst	r0, r3
 8012da6:	d104      	bne.n	8012db2 <__aeabi_dsub+0x22e>
 8012da8:	4663      	mov	r3, ip
 8012daa:	0001      	movs	r1, r0
 8012dac:	08d2      	lsrs	r2, r2, #3
 8012dae:	075e      	lsls	r6, r3, #29
 8012db0:	4316      	orrs	r6, r2
 8012db2:	00f3      	lsls	r3, r6, #3
 8012db4:	4699      	mov	r9, r3
 8012db6:	00c9      	lsls	r1, r1, #3
 8012db8:	0f72      	lsrs	r2, r6, #29
 8012dba:	4d44      	ldr	r5, [pc, #272]	; (8012ecc <__aeabi_dsub+0x348>)
 8012dbc:	4311      	orrs	r1, r2
 8012dbe:	464b      	mov	r3, r9
 8012dc0:	08de      	lsrs	r6, r3, #3
 8012dc2:	4b42      	ldr	r3, [pc, #264]	; (8012ecc <__aeabi_dsub+0x348>)
 8012dc4:	074f      	lsls	r7, r1, #29
 8012dc6:	4337      	orrs	r7, r6
 8012dc8:	08ca      	lsrs	r2, r1, #3
 8012dca:	429d      	cmp	r5, r3
 8012dcc:	d100      	bne.n	8012dd0 <__aeabi_dsub+0x24c>
 8012dce:	e06e      	b.n	8012eae <__aeabi_dsub+0x32a>
 8012dd0:	0312      	lsls	r2, r2, #12
 8012dd2:	056d      	lsls	r5, r5, #21
 8012dd4:	0b12      	lsrs	r2, r2, #12
 8012dd6:	0d6d      	lsrs	r5, r5, #21
 8012dd8:	2100      	movs	r1, #0
 8012dda:	0312      	lsls	r2, r2, #12
 8012ddc:	0b13      	lsrs	r3, r2, #12
 8012dde:	0d0a      	lsrs	r2, r1, #20
 8012de0:	0512      	lsls	r2, r2, #20
 8012de2:	431a      	orrs	r2, r3
 8012de4:	4b3b      	ldr	r3, [pc, #236]	; (8012ed4 <__aeabi_dsub+0x350>)
 8012de6:	052d      	lsls	r5, r5, #20
 8012de8:	4013      	ands	r3, r2
 8012dea:	432b      	orrs	r3, r5
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	07e4      	lsls	r4, r4, #31
 8012df0:	085b      	lsrs	r3, r3, #1
 8012df2:	4323      	orrs	r3, r4
 8012df4:	0038      	movs	r0, r7
 8012df6:	0019      	movs	r1, r3
 8012df8:	bc3c      	pop	{r2, r3, r4, r5}
 8012dfa:	4690      	mov	r8, r2
 8012dfc:	4699      	mov	r9, r3
 8012dfe:	46a2      	mov	sl, r4
 8012e00:	46ab      	mov	fp, r5
 8012e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e04:	4663      	mov	r3, ip
 8012e06:	4313      	orrs	r3, r2
 8012e08:	d011      	beq.n	8012e2e <__aeabi_dsub+0x2aa>
 8012e0a:	1e73      	subs	r3, r6, #1
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d000      	beq.n	8012e12 <__aeabi_dsub+0x28e>
 8012e10:	e107      	b.n	8013022 <__aeabi_dsub+0x49e>
 8012e12:	1886      	adds	r6, r0, r2
 8012e14:	4286      	cmp	r6, r0
 8012e16:	4180      	sbcs	r0, r0
 8012e18:	4461      	add	r1, ip
 8012e1a:	4240      	negs	r0, r0
 8012e1c:	1809      	adds	r1, r1, r0
 8012e1e:	2501      	movs	r5, #1
 8012e20:	020b      	lsls	r3, r1, #8
 8012e22:	d537      	bpl.n	8012e94 <__aeabi_dsub+0x310>
 8012e24:	2502      	movs	r5, #2
 8012e26:	e77b      	b.n	8012d20 <__aeabi_dsub+0x19c>
 8012e28:	003e      	movs	r6, r7
 8012e2a:	4661      	mov	r1, ip
 8012e2c:	4691      	mov	r9, r2
 8012e2e:	0035      	movs	r5, r6
 8012e30:	e7c5      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8012e32:	465c      	mov	r4, fp
 8012e34:	2d00      	cmp	r5, #0
 8012e36:	d000      	beq.n	8012e3a <__aeabi_dsub+0x2b6>
 8012e38:	e0e1      	b.n	8012ffe <__aeabi_dsub+0x47a>
 8012e3a:	000b      	movs	r3, r1
 8012e3c:	4303      	orrs	r3, r0
 8012e3e:	d0f3      	beq.n	8012e28 <__aeabi_dsub+0x2a4>
 8012e40:	1c73      	adds	r3, r6, #1
 8012e42:	d100      	bne.n	8012e46 <__aeabi_dsub+0x2c2>
 8012e44:	e1ac      	b.n	80131a0 <__aeabi_dsub+0x61c>
 8012e46:	4b21      	ldr	r3, [pc, #132]	; (8012ecc <__aeabi_dsub+0x348>)
 8012e48:	429f      	cmp	r7, r3
 8012e4a:	d100      	bne.n	8012e4e <__aeabi_dsub+0x2ca>
 8012e4c:	e13a      	b.n	80130c4 <__aeabi_dsub+0x540>
 8012e4e:	43f3      	mvns	r3, r6
 8012e50:	2b38      	cmp	r3, #56	; 0x38
 8012e52:	dd00      	ble.n	8012e56 <__aeabi_dsub+0x2d2>
 8012e54:	e16f      	b.n	8013136 <__aeabi_dsub+0x5b2>
 8012e56:	2b1f      	cmp	r3, #31
 8012e58:	dd00      	ble.n	8012e5c <__aeabi_dsub+0x2d8>
 8012e5a:	e18c      	b.n	8013176 <__aeabi_dsub+0x5f2>
 8012e5c:	2520      	movs	r5, #32
 8012e5e:	000e      	movs	r6, r1
 8012e60:	1aed      	subs	r5, r5, r3
 8012e62:	40ae      	lsls	r6, r5
 8012e64:	46b0      	mov	r8, r6
 8012e66:	0006      	movs	r6, r0
 8012e68:	46aa      	mov	sl, r5
 8012e6a:	40de      	lsrs	r6, r3
 8012e6c:	4645      	mov	r5, r8
 8012e6e:	4335      	orrs	r5, r6
 8012e70:	002e      	movs	r6, r5
 8012e72:	4655      	mov	r5, sl
 8012e74:	40d9      	lsrs	r1, r3
 8012e76:	40a8      	lsls	r0, r5
 8012e78:	4663      	mov	r3, ip
 8012e7a:	1e45      	subs	r5, r0, #1
 8012e7c:	41a8      	sbcs	r0, r5
 8012e7e:	1a5b      	subs	r3, r3, r1
 8012e80:	469c      	mov	ip, r3
 8012e82:	4330      	orrs	r0, r6
 8012e84:	1a16      	subs	r6, r2, r0
 8012e86:	42b2      	cmp	r2, r6
 8012e88:	4192      	sbcs	r2, r2
 8012e8a:	4663      	mov	r3, ip
 8012e8c:	4252      	negs	r2, r2
 8012e8e:	1a99      	subs	r1, r3, r2
 8012e90:	003d      	movs	r5, r7
 8012e92:	e6b4      	b.n	8012bfe <__aeabi_dsub+0x7a>
 8012e94:	2207      	movs	r2, #7
 8012e96:	4032      	ands	r2, r6
 8012e98:	2a00      	cmp	r2, #0
 8012e9a:	d000      	beq.n	8012e9e <__aeabi_dsub+0x31a>
 8012e9c:	e6e4      	b.n	8012c68 <__aeabi_dsub+0xe4>
 8012e9e:	4b0b      	ldr	r3, [pc, #44]	; (8012ecc <__aeabi_dsub+0x348>)
 8012ea0:	08f6      	lsrs	r6, r6, #3
 8012ea2:	074f      	lsls	r7, r1, #29
 8012ea4:	4337      	orrs	r7, r6
 8012ea6:	08ca      	lsrs	r2, r1, #3
 8012ea8:	429d      	cmp	r5, r3
 8012eaa:	d000      	beq.n	8012eae <__aeabi_dsub+0x32a>
 8012eac:	e790      	b.n	8012dd0 <__aeabi_dsub+0x24c>
 8012eae:	003b      	movs	r3, r7
 8012eb0:	4313      	orrs	r3, r2
 8012eb2:	d100      	bne.n	8012eb6 <__aeabi_dsub+0x332>
 8012eb4:	e1a6      	b.n	8013204 <__aeabi_dsub+0x680>
 8012eb6:	2380      	movs	r3, #128	; 0x80
 8012eb8:	031b      	lsls	r3, r3, #12
 8012eba:	431a      	orrs	r2, r3
 8012ebc:	0312      	lsls	r2, r2, #12
 8012ebe:	0b12      	lsrs	r2, r2, #12
 8012ec0:	4d02      	ldr	r5, [pc, #8]	; (8012ecc <__aeabi_dsub+0x348>)
 8012ec2:	e789      	b.n	8012dd8 <__aeabi_dsub+0x254>
 8012ec4:	0015      	movs	r5, r2
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	2700      	movs	r7, #0
 8012eca:	e785      	b.n	8012dd8 <__aeabi_dsub+0x254>
 8012ecc:	000007ff 	.word	0x000007ff
 8012ed0:	ff7fffff 	.word	0xff7fffff
 8012ed4:	800fffff 	.word	0x800fffff
 8012ed8:	2e00      	cmp	r6, #0
 8012eda:	d000      	beq.n	8012ede <__aeabi_dsub+0x35a>
 8012edc:	e0c7      	b.n	801306e <__aeabi_dsub+0x4ea>
 8012ede:	1c6b      	adds	r3, r5, #1
 8012ee0:	055e      	lsls	r6, r3, #21
 8012ee2:	0d76      	lsrs	r6, r6, #21
 8012ee4:	2e01      	cmp	r6, #1
 8012ee6:	dc00      	bgt.n	8012eea <__aeabi_dsub+0x366>
 8012ee8:	e0f0      	b.n	80130cc <__aeabi_dsub+0x548>
 8012eea:	4dc8      	ldr	r5, [pc, #800]	; (801320c <__aeabi_dsub+0x688>)
 8012eec:	42ab      	cmp	r3, r5
 8012eee:	d100      	bne.n	8012ef2 <__aeabi_dsub+0x36e>
 8012ef0:	e0b9      	b.n	8013066 <__aeabi_dsub+0x4e2>
 8012ef2:	1885      	adds	r5, r0, r2
 8012ef4:	000a      	movs	r2, r1
 8012ef6:	4285      	cmp	r5, r0
 8012ef8:	4189      	sbcs	r1, r1
 8012efa:	4462      	add	r2, ip
 8012efc:	4249      	negs	r1, r1
 8012efe:	1851      	adds	r1, r2, r1
 8012f00:	2207      	movs	r2, #7
 8012f02:	07ce      	lsls	r6, r1, #31
 8012f04:	086d      	lsrs	r5, r5, #1
 8012f06:	432e      	orrs	r6, r5
 8012f08:	0849      	lsrs	r1, r1, #1
 8012f0a:	4032      	ands	r2, r6
 8012f0c:	001d      	movs	r5, r3
 8012f0e:	e6a9      	b.n	8012c64 <__aeabi_dsub+0xe0>
 8012f10:	49bf      	ldr	r1, [pc, #764]	; (8013210 <__aeabi_dsub+0x68c>)
 8012f12:	1aed      	subs	r5, r5, r3
 8012f14:	4011      	ands	r1, r2
 8012f16:	2207      	movs	r2, #7
 8012f18:	4032      	ands	r2, r6
 8012f1a:	e6a3      	b.n	8012c64 <__aeabi_dsub+0xe0>
 8012f1c:	0032      	movs	r2, r6
 8012f1e:	3828      	subs	r0, #40	; 0x28
 8012f20:	4082      	lsls	r2, r0
 8012f22:	2600      	movs	r6, #0
 8012f24:	e686      	b.n	8012c34 <__aeabi_dsub+0xb0>
 8012f26:	0030      	movs	r0, r6
 8012f28:	f7fd ffea 	bl	8010f00 <__clzsi2>
 8012f2c:	3020      	adds	r0, #32
 8012f2e:	e673      	b.n	8012c18 <__aeabi_dsub+0x94>
 8012f30:	4663      	mov	r3, ip
 8012f32:	4313      	orrs	r3, r2
 8012f34:	1e5a      	subs	r2, r3, #1
 8012f36:	4193      	sbcs	r3, r2
 8012f38:	1ac6      	subs	r6, r0, r3
 8012f3a:	42b0      	cmp	r0, r6
 8012f3c:	4180      	sbcs	r0, r0
 8012f3e:	4240      	negs	r0, r0
 8012f40:	1a09      	subs	r1, r1, r0
 8012f42:	e65c      	b.n	8012bfe <__aeabi_dsub+0x7a>
 8012f44:	000e      	movs	r6, r1
 8012f46:	4667      	mov	r7, ip
 8012f48:	4306      	orrs	r6, r0
 8012f4a:	4317      	orrs	r7, r2
 8012f4c:	2d00      	cmp	r5, #0
 8012f4e:	d15e      	bne.n	801300e <__aeabi_dsub+0x48a>
 8012f50:	2e00      	cmp	r6, #0
 8012f52:	d000      	beq.n	8012f56 <__aeabi_dsub+0x3d2>
 8012f54:	e0f3      	b.n	801313e <__aeabi_dsub+0x5ba>
 8012f56:	2f00      	cmp	r7, #0
 8012f58:	d100      	bne.n	8012f5c <__aeabi_dsub+0x3d8>
 8012f5a:	e11e      	b.n	801319a <__aeabi_dsub+0x616>
 8012f5c:	465c      	mov	r4, fp
 8012f5e:	4661      	mov	r1, ip
 8012f60:	4691      	mov	r9, r2
 8012f62:	e72c      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8012f64:	4fa9      	ldr	r7, [pc, #676]	; (801320c <__aeabi_dsub+0x688>)
 8012f66:	42be      	cmp	r6, r7
 8012f68:	d07b      	beq.n	8013062 <__aeabi_dsub+0x4de>
 8012f6a:	001e      	movs	r6, r3
 8012f6c:	e6f1      	b.n	8012d52 <__aeabi_dsub+0x1ce>
 8012f6e:	0010      	movs	r0, r2
 8012f70:	3d1f      	subs	r5, #31
 8012f72:	40e8      	lsrs	r0, r5
 8012f74:	2b20      	cmp	r3, #32
 8012f76:	d003      	beq.n	8012f80 <__aeabi_dsub+0x3fc>
 8012f78:	2140      	movs	r1, #64	; 0x40
 8012f7a:	1acb      	subs	r3, r1, r3
 8012f7c:	409a      	lsls	r2, r3
 8012f7e:	4316      	orrs	r6, r2
 8012f80:	1e73      	subs	r3, r6, #1
 8012f82:	419e      	sbcs	r6, r3
 8012f84:	2207      	movs	r2, #7
 8012f86:	4306      	orrs	r6, r0
 8012f88:	4032      	ands	r2, r6
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	2500      	movs	r5, #0
 8012f8e:	e783      	b.n	8012e98 <__aeabi_dsub+0x314>
 8012f90:	1a16      	subs	r6, r2, r0
 8012f92:	4663      	mov	r3, ip
 8012f94:	42b2      	cmp	r2, r6
 8012f96:	4180      	sbcs	r0, r0
 8012f98:	1a59      	subs	r1, r3, r1
 8012f9a:	4240      	negs	r0, r0
 8012f9c:	1a0b      	subs	r3, r1, r0
 8012f9e:	4698      	mov	r8, r3
 8012fa0:	465c      	mov	r4, fp
 8012fa2:	e632      	b.n	8012c0a <__aeabi_dsub+0x86>
 8012fa4:	2e1f      	cmp	r6, #31
 8012fa6:	dd00      	ble.n	8012faa <__aeabi_dsub+0x426>
 8012fa8:	e0ab      	b.n	8013102 <__aeabi_dsub+0x57e>
 8012faa:	2720      	movs	r7, #32
 8012fac:	1bbb      	subs	r3, r7, r6
 8012fae:	469a      	mov	sl, r3
 8012fb0:	4663      	mov	r3, ip
 8012fb2:	4657      	mov	r7, sl
 8012fb4:	40bb      	lsls	r3, r7
 8012fb6:	4699      	mov	r9, r3
 8012fb8:	0013      	movs	r3, r2
 8012fba:	464f      	mov	r7, r9
 8012fbc:	40f3      	lsrs	r3, r6
 8012fbe:	431f      	orrs	r7, r3
 8012fc0:	003b      	movs	r3, r7
 8012fc2:	4657      	mov	r7, sl
 8012fc4:	40ba      	lsls	r2, r7
 8012fc6:	1e57      	subs	r7, r2, #1
 8012fc8:	41ba      	sbcs	r2, r7
 8012fca:	4313      	orrs	r3, r2
 8012fcc:	4662      	mov	r2, ip
 8012fce:	40f2      	lsrs	r2, r6
 8012fd0:	1889      	adds	r1, r1, r2
 8012fd2:	e698      	b.n	8012d06 <__aeabi_dsub+0x182>
 8012fd4:	2720      	movs	r7, #32
 8012fd6:	1bbb      	subs	r3, r7, r6
 8012fd8:	469a      	mov	sl, r3
 8012fda:	4663      	mov	r3, ip
 8012fdc:	4657      	mov	r7, sl
 8012fde:	40bb      	lsls	r3, r7
 8012fe0:	4699      	mov	r9, r3
 8012fe2:	0013      	movs	r3, r2
 8012fe4:	464f      	mov	r7, r9
 8012fe6:	40f3      	lsrs	r3, r6
 8012fe8:	431f      	orrs	r7, r3
 8012fea:	003b      	movs	r3, r7
 8012fec:	4657      	mov	r7, sl
 8012fee:	40ba      	lsls	r2, r7
 8012ff0:	1e57      	subs	r7, r2, #1
 8012ff2:	41ba      	sbcs	r2, r7
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	4662      	mov	r2, ip
 8012ff8:	40f2      	lsrs	r2, r6
 8012ffa:	1a89      	subs	r1, r1, r2
 8012ffc:	e79c      	b.n	8012f38 <__aeabi_dsub+0x3b4>
 8012ffe:	4b83      	ldr	r3, [pc, #524]	; (801320c <__aeabi_dsub+0x688>)
 8013000:	429f      	cmp	r7, r3
 8013002:	d05f      	beq.n	80130c4 <__aeabi_dsub+0x540>
 8013004:	2580      	movs	r5, #128	; 0x80
 8013006:	042d      	lsls	r5, r5, #16
 8013008:	4273      	negs	r3, r6
 801300a:	4329      	orrs	r1, r5
 801300c:	e720      	b.n	8012e50 <__aeabi_dsub+0x2cc>
 801300e:	2e00      	cmp	r6, #0
 8013010:	d10c      	bne.n	801302c <__aeabi_dsub+0x4a8>
 8013012:	2f00      	cmp	r7, #0
 8013014:	d100      	bne.n	8013018 <__aeabi_dsub+0x494>
 8013016:	e0d0      	b.n	80131ba <__aeabi_dsub+0x636>
 8013018:	465c      	mov	r4, fp
 801301a:	4661      	mov	r1, ip
 801301c:	4691      	mov	r9, r2
 801301e:	4d7b      	ldr	r5, [pc, #492]	; (801320c <__aeabi_dsub+0x688>)
 8013020:	e6cd      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8013022:	4f7a      	ldr	r7, [pc, #488]	; (801320c <__aeabi_dsub+0x688>)
 8013024:	42be      	cmp	r6, r7
 8013026:	d01c      	beq.n	8013062 <__aeabi_dsub+0x4de>
 8013028:	001e      	movs	r6, r3
 801302a:	e665      	b.n	8012cf8 <__aeabi_dsub+0x174>
 801302c:	2f00      	cmp	r7, #0
 801302e:	d018      	beq.n	8013062 <__aeabi_dsub+0x4de>
 8013030:	08c0      	lsrs	r0, r0, #3
 8013032:	074e      	lsls	r6, r1, #29
 8013034:	4306      	orrs	r6, r0
 8013036:	2080      	movs	r0, #128	; 0x80
 8013038:	08c9      	lsrs	r1, r1, #3
 801303a:	0300      	lsls	r0, r0, #12
 801303c:	4201      	tst	r1, r0
 801303e:	d008      	beq.n	8013052 <__aeabi_dsub+0x4ce>
 8013040:	4663      	mov	r3, ip
 8013042:	08dc      	lsrs	r4, r3, #3
 8013044:	4204      	tst	r4, r0
 8013046:	d104      	bne.n	8013052 <__aeabi_dsub+0x4ce>
 8013048:	0021      	movs	r1, r4
 801304a:	46da      	mov	sl, fp
 801304c:	08d2      	lsrs	r2, r2, #3
 801304e:	075e      	lsls	r6, r3, #29
 8013050:	4316      	orrs	r6, r2
 8013052:	00f3      	lsls	r3, r6, #3
 8013054:	4699      	mov	r9, r3
 8013056:	2401      	movs	r4, #1
 8013058:	4653      	mov	r3, sl
 801305a:	00c9      	lsls	r1, r1, #3
 801305c:	0f72      	lsrs	r2, r6, #29
 801305e:	4311      	orrs	r1, r2
 8013060:	401c      	ands	r4, r3
 8013062:	4d6a      	ldr	r5, [pc, #424]	; (801320c <__aeabi_dsub+0x688>)
 8013064:	e6ab      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8013066:	001d      	movs	r5, r3
 8013068:	2200      	movs	r2, #0
 801306a:	2700      	movs	r7, #0
 801306c:	e6b4      	b.n	8012dd8 <__aeabi_dsub+0x254>
 801306e:	2d00      	cmp	r5, #0
 8013070:	d159      	bne.n	8013126 <__aeabi_dsub+0x5a2>
 8013072:	000b      	movs	r3, r1
 8013074:	4303      	orrs	r3, r0
 8013076:	d100      	bne.n	801307a <__aeabi_dsub+0x4f6>
 8013078:	e6d6      	b.n	8012e28 <__aeabi_dsub+0x2a4>
 801307a:	1c73      	adds	r3, r6, #1
 801307c:	d100      	bne.n	8013080 <__aeabi_dsub+0x4fc>
 801307e:	e0b2      	b.n	80131e6 <__aeabi_dsub+0x662>
 8013080:	4b62      	ldr	r3, [pc, #392]	; (801320c <__aeabi_dsub+0x688>)
 8013082:	429f      	cmp	r7, r3
 8013084:	d01e      	beq.n	80130c4 <__aeabi_dsub+0x540>
 8013086:	43f3      	mvns	r3, r6
 8013088:	2b38      	cmp	r3, #56	; 0x38
 801308a:	dc6f      	bgt.n	801316c <__aeabi_dsub+0x5e8>
 801308c:	2b1f      	cmp	r3, #31
 801308e:	dd00      	ble.n	8013092 <__aeabi_dsub+0x50e>
 8013090:	e097      	b.n	80131c2 <__aeabi_dsub+0x63e>
 8013092:	2520      	movs	r5, #32
 8013094:	000e      	movs	r6, r1
 8013096:	1aed      	subs	r5, r5, r3
 8013098:	40ae      	lsls	r6, r5
 801309a:	46b0      	mov	r8, r6
 801309c:	0006      	movs	r6, r0
 801309e:	46aa      	mov	sl, r5
 80130a0:	40de      	lsrs	r6, r3
 80130a2:	4645      	mov	r5, r8
 80130a4:	4335      	orrs	r5, r6
 80130a6:	002e      	movs	r6, r5
 80130a8:	4655      	mov	r5, sl
 80130aa:	40a8      	lsls	r0, r5
 80130ac:	40d9      	lsrs	r1, r3
 80130ae:	1e45      	subs	r5, r0, #1
 80130b0:	41a8      	sbcs	r0, r5
 80130b2:	448c      	add	ip, r1
 80130b4:	4306      	orrs	r6, r0
 80130b6:	18b6      	adds	r6, r6, r2
 80130b8:	4296      	cmp	r6, r2
 80130ba:	4192      	sbcs	r2, r2
 80130bc:	4251      	negs	r1, r2
 80130be:	4461      	add	r1, ip
 80130c0:	003d      	movs	r5, r7
 80130c2:	e625      	b.n	8012d10 <__aeabi_dsub+0x18c>
 80130c4:	003d      	movs	r5, r7
 80130c6:	4661      	mov	r1, ip
 80130c8:	4691      	mov	r9, r2
 80130ca:	e678      	b.n	8012dbe <__aeabi_dsub+0x23a>
 80130cc:	000b      	movs	r3, r1
 80130ce:	4303      	orrs	r3, r0
 80130d0:	2d00      	cmp	r5, #0
 80130d2:	d000      	beq.n	80130d6 <__aeabi_dsub+0x552>
 80130d4:	e655      	b.n	8012d82 <__aeabi_dsub+0x1fe>
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d0f5      	beq.n	80130c6 <__aeabi_dsub+0x542>
 80130da:	4663      	mov	r3, ip
 80130dc:	4313      	orrs	r3, r2
 80130de:	d100      	bne.n	80130e2 <__aeabi_dsub+0x55e>
 80130e0:	e66d      	b.n	8012dbe <__aeabi_dsub+0x23a>
 80130e2:	1886      	adds	r6, r0, r2
 80130e4:	4286      	cmp	r6, r0
 80130e6:	4180      	sbcs	r0, r0
 80130e8:	4461      	add	r1, ip
 80130ea:	4240      	negs	r0, r0
 80130ec:	1809      	adds	r1, r1, r0
 80130ee:	2200      	movs	r2, #0
 80130f0:	020b      	lsls	r3, r1, #8
 80130f2:	d400      	bmi.n	80130f6 <__aeabi_dsub+0x572>
 80130f4:	e6d0      	b.n	8012e98 <__aeabi_dsub+0x314>
 80130f6:	4b46      	ldr	r3, [pc, #280]	; (8013210 <__aeabi_dsub+0x68c>)
 80130f8:	3501      	adds	r5, #1
 80130fa:	4019      	ands	r1, r3
 80130fc:	e5b2      	b.n	8012c64 <__aeabi_dsub+0xe0>
 80130fe:	46b1      	mov	r9, r6
 8013100:	e65d      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8013102:	0033      	movs	r3, r6
 8013104:	4667      	mov	r7, ip
 8013106:	3b20      	subs	r3, #32
 8013108:	40df      	lsrs	r7, r3
 801310a:	003b      	movs	r3, r7
 801310c:	2e20      	cmp	r6, #32
 801310e:	d005      	beq.n	801311c <__aeabi_dsub+0x598>
 8013110:	2740      	movs	r7, #64	; 0x40
 8013112:	1bbf      	subs	r7, r7, r6
 8013114:	4666      	mov	r6, ip
 8013116:	40be      	lsls	r6, r7
 8013118:	4332      	orrs	r2, r6
 801311a:	4690      	mov	r8, r2
 801311c:	4646      	mov	r6, r8
 801311e:	1e72      	subs	r2, r6, #1
 8013120:	4196      	sbcs	r6, r2
 8013122:	4333      	orrs	r3, r6
 8013124:	e5ef      	b.n	8012d06 <__aeabi_dsub+0x182>
 8013126:	4b39      	ldr	r3, [pc, #228]	; (801320c <__aeabi_dsub+0x688>)
 8013128:	429f      	cmp	r7, r3
 801312a:	d0cb      	beq.n	80130c4 <__aeabi_dsub+0x540>
 801312c:	2580      	movs	r5, #128	; 0x80
 801312e:	042d      	lsls	r5, r5, #16
 8013130:	4273      	negs	r3, r6
 8013132:	4329      	orrs	r1, r5
 8013134:	e7a8      	b.n	8013088 <__aeabi_dsub+0x504>
 8013136:	4308      	orrs	r0, r1
 8013138:	1e41      	subs	r1, r0, #1
 801313a:	4188      	sbcs	r0, r1
 801313c:	e6a2      	b.n	8012e84 <__aeabi_dsub+0x300>
 801313e:	2f00      	cmp	r7, #0
 8013140:	d100      	bne.n	8013144 <__aeabi_dsub+0x5c0>
 8013142:	e63c      	b.n	8012dbe <__aeabi_dsub+0x23a>
 8013144:	4663      	mov	r3, ip
 8013146:	1a86      	subs	r6, r0, r2
 8013148:	1acf      	subs	r7, r1, r3
 801314a:	42b0      	cmp	r0, r6
 801314c:	419b      	sbcs	r3, r3
 801314e:	425b      	negs	r3, r3
 8013150:	1afb      	subs	r3, r7, r3
 8013152:	4698      	mov	r8, r3
 8013154:	021b      	lsls	r3, r3, #8
 8013156:	d54e      	bpl.n	80131f6 <__aeabi_dsub+0x672>
 8013158:	1a16      	subs	r6, r2, r0
 801315a:	4663      	mov	r3, ip
 801315c:	42b2      	cmp	r2, r6
 801315e:	4192      	sbcs	r2, r2
 8013160:	1a59      	subs	r1, r3, r1
 8013162:	4252      	negs	r2, r2
 8013164:	1a89      	subs	r1, r1, r2
 8013166:	465c      	mov	r4, fp
 8013168:	2200      	movs	r2, #0
 801316a:	e57b      	b.n	8012c64 <__aeabi_dsub+0xe0>
 801316c:	4301      	orrs	r1, r0
 801316e:	000e      	movs	r6, r1
 8013170:	1e71      	subs	r1, r6, #1
 8013172:	418e      	sbcs	r6, r1
 8013174:	e79f      	b.n	80130b6 <__aeabi_dsub+0x532>
 8013176:	001d      	movs	r5, r3
 8013178:	000e      	movs	r6, r1
 801317a:	3d20      	subs	r5, #32
 801317c:	40ee      	lsrs	r6, r5
 801317e:	46b0      	mov	r8, r6
 8013180:	2b20      	cmp	r3, #32
 8013182:	d004      	beq.n	801318e <__aeabi_dsub+0x60a>
 8013184:	2540      	movs	r5, #64	; 0x40
 8013186:	1aeb      	subs	r3, r5, r3
 8013188:	4099      	lsls	r1, r3
 801318a:	4308      	orrs	r0, r1
 801318c:	4681      	mov	r9, r0
 801318e:	4648      	mov	r0, r9
 8013190:	4643      	mov	r3, r8
 8013192:	1e41      	subs	r1, r0, #1
 8013194:	4188      	sbcs	r0, r1
 8013196:	4318      	orrs	r0, r3
 8013198:	e674      	b.n	8012e84 <__aeabi_dsub+0x300>
 801319a:	2200      	movs	r2, #0
 801319c:	2400      	movs	r4, #0
 801319e:	e617      	b.n	8012dd0 <__aeabi_dsub+0x24c>
 80131a0:	1a16      	subs	r6, r2, r0
 80131a2:	4663      	mov	r3, ip
 80131a4:	42b2      	cmp	r2, r6
 80131a6:	4192      	sbcs	r2, r2
 80131a8:	1a59      	subs	r1, r3, r1
 80131aa:	4252      	negs	r2, r2
 80131ac:	1a89      	subs	r1, r1, r2
 80131ae:	003d      	movs	r5, r7
 80131b0:	e525      	b.n	8012bfe <__aeabi_dsub+0x7a>
 80131b2:	4661      	mov	r1, ip
 80131b4:	4691      	mov	r9, r2
 80131b6:	4d15      	ldr	r5, [pc, #84]	; (801320c <__aeabi_dsub+0x688>)
 80131b8:	e601      	b.n	8012dbe <__aeabi_dsub+0x23a>
 80131ba:	2280      	movs	r2, #128	; 0x80
 80131bc:	2400      	movs	r4, #0
 80131be:	0312      	lsls	r2, r2, #12
 80131c0:	e679      	b.n	8012eb6 <__aeabi_dsub+0x332>
 80131c2:	001d      	movs	r5, r3
 80131c4:	000e      	movs	r6, r1
 80131c6:	3d20      	subs	r5, #32
 80131c8:	40ee      	lsrs	r6, r5
 80131ca:	46b0      	mov	r8, r6
 80131cc:	2b20      	cmp	r3, #32
 80131ce:	d004      	beq.n	80131da <__aeabi_dsub+0x656>
 80131d0:	2540      	movs	r5, #64	; 0x40
 80131d2:	1aeb      	subs	r3, r5, r3
 80131d4:	4099      	lsls	r1, r3
 80131d6:	4308      	orrs	r0, r1
 80131d8:	4681      	mov	r9, r0
 80131da:	464e      	mov	r6, r9
 80131dc:	4643      	mov	r3, r8
 80131de:	1e71      	subs	r1, r6, #1
 80131e0:	418e      	sbcs	r6, r1
 80131e2:	431e      	orrs	r6, r3
 80131e4:	e767      	b.n	80130b6 <__aeabi_dsub+0x532>
 80131e6:	1886      	adds	r6, r0, r2
 80131e8:	4296      	cmp	r6, r2
 80131ea:	419b      	sbcs	r3, r3
 80131ec:	4461      	add	r1, ip
 80131ee:	425b      	negs	r3, r3
 80131f0:	18c9      	adds	r1, r1, r3
 80131f2:	003d      	movs	r5, r7
 80131f4:	e58c      	b.n	8012d10 <__aeabi_dsub+0x18c>
 80131f6:	4647      	mov	r7, r8
 80131f8:	4337      	orrs	r7, r6
 80131fa:	d0ce      	beq.n	801319a <__aeabi_dsub+0x616>
 80131fc:	2207      	movs	r2, #7
 80131fe:	4641      	mov	r1, r8
 8013200:	4032      	ands	r2, r6
 8013202:	e649      	b.n	8012e98 <__aeabi_dsub+0x314>
 8013204:	2700      	movs	r7, #0
 8013206:	003a      	movs	r2, r7
 8013208:	e5e6      	b.n	8012dd8 <__aeabi_dsub+0x254>
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	000007ff 	.word	0x000007ff
 8013210:	ff7fffff 	.word	0xff7fffff

08013214 <__aeabi_dcmpun>:
 8013214:	b570      	push	{r4, r5, r6, lr}
 8013216:	4e0c      	ldr	r6, [pc, #48]	; (8013248 <__aeabi_dcmpun+0x34>)
 8013218:	030d      	lsls	r5, r1, #12
 801321a:	031c      	lsls	r4, r3, #12
 801321c:	0049      	lsls	r1, r1, #1
 801321e:	005b      	lsls	r3, r3, #1
 8013220:	0b2d      	lsrs	r5, r5, #12
 8013222:	0d49      	lsrs	r1, r1, #21
 8013224:	0b24      	lsrs	r4, r4, #12
 8013226:	0d5b      	lsrs	r3, r3, #21
 8013228:	42b1      	cmp	r1, r6
 801322a:	d008      	beq.n	801323e <__aeabi_dcmpun+0x2a>
 801322c:	4906      	ldr	r1, [pc, #24]	; (8013248 <__aeabi_dcmpun+0x34>)
 801322e:	2000      	movs	r0, #0
 8013230:	428b      	cmp	r3, r1
 8013232:	d103      	bne.n	801323c <__aeabi_dcmpun+0x28>
 8013234:	4314      	orrs	r4, r2
 8013236:	0020      	movs	r0, r4
 8013238:	1e44      	subs	r4, r0, #1
 801323a:	41a0      	sbcs	r0, r4
 801323c:	bd70      	pop	{r4, r5, r6, pc}
 801323e:	4305      	orrs	r5, r0
 8013240:	2001      	movs	r0, #1
 8013242:	2d00      	cmp	r5, #0
 8013244:	d1fa      	bne.n	801323c <__aeabi_dcmpun+0x28>
 8013246:	e7f1      	b.n	801322c <__aeabi_dcmpun+0x18>
 8013248:	000007ff 	.word	0x000007ff

0801324c <__aeabi_d2iz>:
 801324c:	b530      	push	{r4, r5, lr}
 801324e:	4d14      	ldr	r5, [pc, #80]	; (80132a0 <__aeabi_d2iz+0x54>)
 8013250:	030a      	lsls	r2, r1, #12
 8013252:	004b      	lsls	r3, r1, #1
 8013254:	0b12      	lsrs	r2, r2, #12
 8013256:	0d5b      	lsrs	r3, r3, #21
 8013258:	0fc9      	lsrs	r1, r1, #31
 801325a:	2400      	movs	r4, #0
 801325c:	42ab      	cmp	r3, r5
 801325e:	dd11      	ble.n	8013284 <__aeabi_d2iz+0x38>
 8013260:	4c10      	ldr	r4, [pc, #64]	; (80132a4 <__aeabi_d2iz+0x58>)
 8013262:	42a3      	cmp	r3, r4
 8013264:	dc10      	bgt.n	8013288 <__aeabi_d2iz+0x3c>
 8013266:	2480      	movs	r4, #128	; 0x80
 8013268:	0364      	lsls	r4, r4, #13
 801326a:	4322      	orrs	r2, r4
 801326c:	4c0e      	ldr	r4, [pc, #56]	; (80132a8 <__aeabi_d2iz+0x5c>)
 801326e:	1ae4      	subs	r4, r4, r3
 8013270:	2c1f      	cmp	r4, #31
 8013272:	dd0c      	ble.n	801328e <__aeabi_d2iz+0x42>
 8013274:	480d      	ldr	r0, [pc, #52]	; (80132ac <__aeabi_d2iz+0x60>)
 8013276:	1ac3      	subs	r3, r0, r3
 8013278:	40da      	lsrs	r2, r3
 801327a:	0013      	movs	r3, r2
 801327c:	425c      	negs	r4, r3
 801327e:	2900      	cmp	r1, #0
 8013280:	d100      	bne.n	8013284 <__aeabi_d2iz+0x38>
 8013282:	001c      	movs	r4, r3
 8013284:	0020      	movs	r0, r4
 8013286:	bd30      	pop	{r4, r5, pc}
 8013288:	4b09      	ldr	r3, [pc, #36]	; (80132b0 <__aeabi_d2iz+0x64>)
 801328a:	18cc      	adds	r4, r1, r3
 801328c:	e7fa      	b.n	8013284 <__aeabi_d2iz+0x38>
 801328e:	4d09      	ldr	r5, [pc, #36]	; (80132b4 <__aeabi_d2iz+0x68>)
 8013290:	40e0      	lsrs	r0, r4
 8013292:	46ac      	mov	ip, r5
 8013294:	4463      	add	r3, ip
 8013296:	409a      	lsls	r2, r3
 8013298:	0013      	movs	r3, r2
 801329a:	4303      	orrs	r3, r0
 801329c:	e7ee      	b.n	801327c <__aeabi_d2iz+0x30>
 801329e:	46c0      	nop			; (mov r8, r8)
 80132a0:	000003fe 	.word	0x000003fe
 80132a4:	0000041d 	.word	0x0000041d
 80132a8:	00000433 	.word	0x00000433
 80132ac:	00000413 	.word	0x00000413
 80132b0:	7fffffff 	.word	0x7fffffff
 80132b4:	fffffbed 	.word	0xfffffbed

080132b8 <__aeabi_i2d>:
 80132b8:	b570      	push	{r4, r5, r6, lr}
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d02d      	beq.n	801331a <__aeabi_i2d+0x62>
 80132be:	17c3      	asrs	r3, r0, #31
 80132c0:	18c5      	adds	r5, r0, r3
 80132c2:	405d      	eors	r5, r3
 80132c4:	0fc4      	lsrs	r4, r0, #31
 80132c6:	0028      	movs	r0, r5
 80132c8:	f7fd fe1a 	bl	8010f00 <__clzsi2>
 80132cc:	4b15      	ldr	r3, [pc, #84]	; (8013324 <__aeabi_i2d+0x6c>)
 80132ce:	1a1b      	subs	r3, r3, r0
 80132d0:	055b      	lsls	r3, r3, #21
 80132d2:	0d5b      	lsrs	r3, r3, #21
 80132d4:	280a      	cmp	r0, #10
 80132d6:	dd15      	ble.n	8013304 <__aeabi_i2d+0x4c>
 80132d8:	380b      	subs	r0, #11
 80132da:	4085      	lsls	r5, r0
 80132dc:	2200      	movs	r2, #0
 80132de:	032d      	lsls	r5, r5, #12
 80132e0:	0b2d      	lsrs	r5, r5, #12
 80132e2:	2100      	movs	r1, #0
 80132e4:	0010      	movs	r0, r2
 80132e6:	032d      	lsls	r5, r5, #12
 80132e8:	0d0a      	lsrs	r2, r1, #20
 80132ea:	0b2d      	lsrs	r5, r5, #12
 80132ec:	0512      	lsls	r2, r2, #20
 80132ee:	432a      	orrs	r2, r5
 80132f0:	4d0d      	ldr	r5, [pc, #52]	; (8013328 <__aeabi_i2d+0x70>)
 80132f2:	051b      	lsls	r3, r3, #20
 80132f4:	402a      	ands	r2, r5
 80132f6:	4313      	orrs	r3, r2
 80132f8:	005b      	lsls	r3, r3, #1
 80132fa:	07e4      	lsls	r4, r4, #31
 80132fc:	085b      	lsrs	r3, r3, #1
 80132fe:	4323      	orrs	r3, r4
 8013300:	0019      	movs	r1, r3
 8013302:	bd70      	pop	{r4, r5, r6, pc}
 8013304:	0002      	movs	r2, r0
 8013306:	0029      	movs	r1, r5
 8013308:	3215      	adds	r2, #21
 801330a:	4091      	lsls	r1, r2
 801330c:	000a      	movs	r2, r1
 801330e:	210b      	movs	r1, #11
 8013310:	1a08      	subs	r0, r1, r0
 8013312:	40c5      	lsrs	r5, r0
 8013314:	032d      	lsls	r5, r5, #12
 8013316:	0b2d      	lsrs	r5, r5, #12
 8013318:	e7e3      	b.n	80132e2 <__aeabi_i2d+0x2a>
 801331a:	2400      	movs	r4, #0
 801331c:	2300      	movs	r3, #0
 801331e:	2500      	movs	r5, #0
 8013320:	2200      	movs	r2, #0
 8013322:	e7de      	b.n	80132e2 <__aeabi_i2d+0x2a>
 8013324:	0000041e 	.word	0x0000041e
 8013328:	800fffff 	.word	0x800fffff

0801332c <__aeabi_ui2d>:
 801332c:	b510      	push	{r4, lr}
 801332e:	1e04      	subs	r4, r0, #0
 8013330:	d025      	beq.n	801337e <__aeabi_ui2d+0x52>
 8013332:	f7fd fde5 	bl	8010f00 <__clzsi2>
 8013336:	4b14      	ldr	r3, [pc, #80]	; (8013388 <__aeabi_ui2d+0x5c>)
 8013338:	1a1b      	subs	r3, r3, r0
 801333a:	055b      	lsls	r3, r3, #21
 801333c:	0d5b      	lsrs	r3, r3, #21
 801333e:	280a      	cmp	r0, #10
 8013340:	dd12      	ble.n	8013368 <__aeabi_ui2d+0x3c>
 8013342:	380b      	subs	r0, #11
 8013344:	4084      	lsls	r4, r0
 8013346:	2200      	movs	r2, #0
 8013348:	0324      	lsls	r4, r4, #12
 801334a:	0b24      	lsrs	r4, r4, #12
 801334c:	2100      	movs	r1, #0
 801334e:	0010      	movs	r0, r2
 8013350:	0324      	lsls	r4, r4, #12
 8013352:	0d0a      	lsrs	r2, r1, #20
 8013354:	0b24      	lsrs	r4, r4, #12
 8013356:	0512      	lsls	r2, r2, #20
 8013358:	4322      	orrs	r2, r4
 801335a:	4c0c      	ldr	r4, [pc, #48]	; (801338c <__aeabi_ui2d+0x60>)
 801335c:	051b      	lsls	r3, r3, #20
 801335e:	4022      	ands	r2, r4
 8013360:	4313      	orrs	r3, r2
 8013362:	005b      	lsls	r3, r3, #1
 8013364:	0859      	lsrs	r1, r3, #1
 8013366:	bd10      	pop	{r4, pc}
 8013368:	0002      	movs	r2, r0
 801336a:	0021      	movs	r1, r4
 801336c:	3215      	adds	r2, #21
 801336e:	4091      	lsls	r1, r2
 8013370:	000a      	movs	r2, r1
 8013372:	210b      	movs	r1, #11
 8013374:	1a08      	subs	r0, r1, r0
 8013376:	40c4      	lsrs	r4, r0
 8013378:	0324      	lsls	r4, r4, #12
 801337a:	0b24      	lsrs	r4, r4, #12
 801337c:	e7e6      	b.n	801334c <__aeabi_ui2d+0x20>
 801337e:	2300      	movs	r3, #0
 8013380:	2400      	movs	r4, #0
 8013382:	2200      	movs	r2, #0
 8013384:	e7e2      	b.n	801334c <__aeabi_ui2d+0x20>
 8013386:	46c0      	nop			; (mov r8, r8)
 8013388:	0000041e 	.word	0x0000041e
 801338c:	800fffff 	.word	0x800fffff

08013390 <__aeabi_f2d>:
 8013390:	0041      	lsls	r1, r0, #1
 8013392:	0e09      	lsrs	r1, r1, #24
 8013394:	1c4b      	adds	r3, r1, #1
 8013396:	b570      	push	{r4, r5, r6, lr}
 8013398:	b2db      	uxtb	r3, r3
 801339a:	0246      	lsls	r6, r0, #9
 801339c:	0a75      	lsrs	r5, r6, #9
 801339e:	0fc4      	lsrs	r4, r0, #31
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	dd14      	ble.n	80133ce <__aeabi_f2d+0x3e>
 80133a4:	23e0      	movs	r3, #224	; 0xe0
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	076d      	lsls	r5, r5, #29
 80133aa:	0b36      	lsrs	r6, r6, #12
 80133ac:	18cb      	adds	r3, r1, r3
 80133ae:	2100      	movs	r1, #0
 80133b0:	0d0a      	lsrs	r2, r1, #20
 80133b2:	0028      	movs	r0, r5
 80133b4:	0512      	lsls	r2, r2, #20
 80133b6:	4d1c      	ldr	r5, [pc, #112]	; (8013428 <__aeabi_f2d+0x98>)
 80133b8:	4332      	orrs	r2, r6
 80133ba:	055b      	lsls	r3, r3, #21
 80133bc:	402a      	ands	r2, r5
 80133be:	085b      	lsrs	r3, r3, #1
 80133c0:	4313      	orrs	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	07e4      	lsls	r4, r4, #31
 80133c6:	085b      	lsrs	r3, r3, #1
 80133c8:	4323      	orrs	r3, r4
 80133ca:	0019      	movs	r1, r3
 80133cc:	bd70      	pop	{r4, r5, r6, pc}
 80133ce:	2900      	cmp	r1, #0
 80133d0:	d114      	bne.n	80133fc <__aeabi_f2d+0x6c>
 80133d2:	2d00      	cmp	r5, #0
 80133d4:	d01e      	beq.n	8013414 <__aeabi_f2d+0x84>
 80133d6:	0028      	movs	r0, r5
 80133d8:	f7fd fd92 	bl	8010f00 <__clzsi2>
 80133dc:	280a      	cmp	r0, #10
 80133de:	dc1c      	bgt.n	801341a <__aeabi_f2d+0x8a>
 80133e0:	230b      	movs	r3, #11
 80133e2:	002a      	movs	r2, r5
 80133e4:	1a1b      	subs	r3, r3, r0
 80133e6:	40da      	lsrs	r2, r3
 80133e8:	0003      	movs	r3, r0
 80133ea:	3315      	adds	r3, #21
 80133ec:	409d      	lsls	r5, r3
 80133ee:	4b0f      	ldr	r3, [pc, #60]	; (801342c <__aeabi_f2d+0x9c>)
 80133f0:	0312      	lsls	r2, r2, #12
 80133f2:	1a1b      	subs	r3, r3, r0
 80133f4:	055b      	lsls	r3, r3, #21
 80133f6:	0b16      	lsrs	r6, r2, #12
 80133f8:	0d5b      	lsrs	r3, r3, #21
 80133fa:	e7d8      	b.n	80133ae <__aeabi_f2d+0x1e>
 80133fc:	2d00      	cmp	r5, #0
 80133fe:	d006      	beq.n	801340e <__aeabi_f2d+0x7e>
 8013400:	0b32      	lsrs	r2, r6, #12
 8013402:	2680      	movs	r6, #128	; 0x80
 8013404:	0336      	lsls	r6, r6, #12
 8013406:	076d      	lsls	r5, r5, #29
 8013408:	4316      	orrs	r6, r2
 801340a:	4b09      	ldr	r3, [pc, #36]	; (8013430 <__aeabi_f2d+0xa0>)
 801340c:	e7cf      	b.n	80133ae <__aeabi_f2d+0x1e>
 801340e:	4b08      	ldr	r3, [pc, #32]	; (8013430 <__aeabi_f2d+0xa0>)
 8013410:	2600      	movs	r6, #0
 8013412:	e7cc      	b.n	80133ae <__aeabi_f2d+0x1e>
 8013414:	2300      	movs	r3, #0
 8013416:	2600      	movs	r6, #0
 8013418:	e7c9      	b.n	80133ae <__aeabi_f2d+0x1e>
 801341a:	0003      	movs	r3, r0
 801341c:	002a      	movs	r2, r5
 801341e:	3b0b      	subs	r3, #11
 8013420:	409a      	lsls	r2, r3
 8013422:	2500      	movs	r5, #0
 8013424:	e7e3      	b.n	80133ee <__aeabi_f2d+0x5e>
 8013426:	46c0      	nop			; (mov r8, r8)
 8013428:	800fffff 	.word	0x800fffff
 801342c:	00000389 	.word	0x00000389
 8013430:	000007ff 	.word	0x000007ff

08013434 <__aeabi_d2f>:
 8013434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013436:	004c      	lsls	r4, r1, #1
 8013438:	0d64      	lsrs	r4, r4, #21
 801343a:	030b      	lsls	r3, r1, #12
 801343c:	1c62      	adds	r2, r4, #1
 801343e:	0a5b      	lsrs	r3, r3, #9
 8013440:	0f46      	lsrs	r6, r0, #29
 8013442:	0552      	lsls	r2, r2, #21
 8013444:	0fc9      	lsrs	r1, r1, #31
 8013446:	431e      	orrs	r6, r3
 8013448:	00c5      	lsls	r5, r0, #3
 801344a:	0d52      	lsrs	r2, r2, #21
 801344c:	2a01      	cmp	r2, #1
 801344e:	dd29      	ble.n	80134a4 <__aeabi_d2f+0x70>
 8013450:	4b37      	ldr	r3, [pc, #220]	; (8013530 <__aeabi_d2f+0xfc>)
 8013452:	18e7      	adds	r7, r4, r3
 8013454:	2ffe      	cmp	r7, #254	; 0xfe
 8013456:	dc1c      	bgt.n	8013492 <__aeabi_d2f+0x5e>
 8013458:	2f00      	cmp	r7, #0
 801345a:	dd3b      	ble.n	80134d4 <__aeabi_d2f+0xa0>
 801345c:	0180      	lsls	r0, r0, #6
 801345e:	1e43      	subs	r3, r0, #1
 8013460:	4198      	sbcs	r0, r3
 8013462:	2207      	movs	r2, #7
 8013464:	00f3      	lsls	r3, r6, #3
 8013466:	0f6d      	lsrs	r5, r5, #29
 8013468:	4303      	orrs	r3, r0
 801346a:	432b      	orrs	r3, r5
 801346c:	401a      	ands	r2, r3
 801346e:	2a00      	cmp	r2, #0
 8013470:	d004      	beq.n	801347c <__aeabi_d2f+0x48>
 8013472:	220f      	movs	r2, #15
 8013474:	401a      	ands	r2, r3
 8013476:	2a04      	cmp	r2, #4
 8013478:	d000      	beq.n	801347c <__aeabi_d2f+0x48>
 801347a:	3304      	adds	r3, #4
 801347c:	2280      	movs	r2, #128	; 0x80
 801347e:	04d2      	lsls	r2, r2, #19
 8013480:	401a      	ands	r2, r3
 8013482:	d024      	beq.n	80134ce <__aeabi_d2f+0x9a>
 8013484:	3701      	adds	r7, #1
 8013486:	b2fa      	uxtb	r2, r7
 8013488:	2fff      	cmp	r7, #255	; 0xff
 801348a:	d002      	beq.n	8013492 <__aeabi_d2f+0x5e>
 801348c:	019b      	lsls	r3, r3, #6
 801348e:	0a58      	lsrs	r0, r3, #9
 8013490:	e001      	b.n	8013496 <__aeabi_d2f+0x62>
 8013492:	22ff      	movs	r2, #255	; 0xff
 8013494:	2000      	movs	r0, #0
 8013496:	0240      	lsls	r0, r0, #9
 8013498:	05d2      	lsls	r2, r2, #23
 801349a:	0a40      	lsrs	r0, r0, #9
 801349c:	07c9      	lsls	r1, r1, #31
 801349e:	4310      	orrs	r0, r2
 80134a0:	4308      	orrs	r0, r1
 80134a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134a4:	4335      	orrs	r5, r6
 80134a6:	2c00      	cmp	r4, #0
 80134a8:	d104      	bne.n	80134b4 <__aeabi_d2f+0x80>
 80134aa:	2d00      	cmp	r5, #0
 80134ac:	d10a      	bne.n	80134c4 <__aeabi_d2f+0x90>
 80134ae:	2200      	movs	r2, #0
 80134b0:	2000      	movs	r0, #0
 80134b2:	e7f0      	b.n	8013496 <__aeabi_d2f+0x62>
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	d0ec      	beq.n	8013492 <__aeabi_d2f+0x5e>
 80134b8:	2080      	movs	r0, #128	; 0x80
 80134ba:	03c0      	lsls	r0, r0, #15
 80134bc:	4330      	orrs	r0, r6
 80134be:	22ff      	movs	r2, #255	; 0xff
 80134c0:	e7e9      	b.n	8013496 <__aeabi_d2f+0x62>
 80134c2:	2400      	movs	r4, #0
 80134c4:	2300      	movs	r3, #0
 80134c6:	025b      	lsls	r3, r3, #9
 80134c8:	0a58      	lsrs	r0, r3, #9
 80134ca:	b2e2      	uxtb	r2, r4
 80134cc:	e7e3      	b.n	8013496 <__aeabi_d2f+0x62>
 80134ce:	08db      	lsrs	r3, r3, #3
 80134d0:	003c      	movs	r4, r7
 80134d2:	e7f8      	b.n	80134c6 <__aeabi_d2f+0x92>
 80134d4:	003b      	movs	r3, r7
 80134d6:	3317      	adds	r3, #23
 80134d8:	dbf3      	blt.n	80134c2 <__aeabi_d2f+0x8e>
 80134da:	2380      	movs	r3, #128	; 0x80
 80134dc:	041b      	lsls	r3, r3, #16
 80134de:	4333      	orrs	r3, r6
 80134e0:	261e      	movs	r6, #30
 80134e2:	1bf6      	subs	r6, r6, r7
 80134e4:	2e1f      	cmp	r6, #31
 80134e6:	dd14      	ble.n	8013512 <__aeabi_d2f+0xde>
 80134e8:	2202      	movs	r2, #2
 80134ea:	4252      	negs	r2, r2
 80134ec:	1bd7      	subs	r7, r2, r7
 80134ee:	001a      	movs	r2, r3
 80134f0:	40fa      	lsrs	r2, r7
 80134f2:	0017      	movs	r7, r2
 80134f4:	2e20      	cmp	r6, #32
 80134f6:	d004      	beq.n	8013502 <__aeabi_d2f+0xce>
 80134f8:	4a0e      	ldr	r2, [pc, #56]	; (8013534 <__aeabi_d2f+0x100>)
 80134fa:	4694      	mov	ip, r2
 80134fc:	4464      	add	r4, ip
 80134fe:	40a3      	lsls	r3, r4
 8013500:	431d      	orrs	r5, r3
 8013502:	002b      	movs	r3, r5
 8013504:	1e5d      	subs	r5, r3, #1
 8013506:	41ab      	sbcs	r3, r5
 8013508:	2207      	movs	r2, #7
 801350a:	433b      	orrs	r3, r7
 801350c:	401a      	ands	r2, r3
 801350e:	2700      	movs	r7, #0
 8013510:	e7ad      	b.n	801346e <__aeabi_d2f+0x3a>
 8013512:	4a09      	ldr	r2, [pc, #36]	; (8013538 <__aeabi_d2f+0x104>)
 8013514:	0028      	movs	r0, r5
 8013516:	18a2      	adds	r2, r4, r2
 8013518:	4095      	lsls	r5, r2
 801351a:	4093      	lsls	r3, r2
 801351c:	1e6c      	subs	r4, r5, #1
 801351e:	41a5      	sbcs	r5, r4
 8013520:	40f0      	lsrs	r0, r6
 8013522:	2207      	movs	r2, #7
 8013524:	432b      	orrs	r3, r5
 8013526:	4303      	orrs	r3, r0
 8013528:	401a      	ands	r2, r3
 801352a:	2700      	movs	r7, #0
 801352c:	e79f      	b.n	801346e <__aeabi_d2f+0x3a>
 801352e:	46c0      	nop			; (mov r8, r8)
 8013530:	fffffc80 	.word	0xfffffc80
 8013534:	fffffca2 	.word	0xfffffca2
 8013538:	fffffc82 	.word	0xfffffc82

0801353c <__clzdi2>:
 801353c:	b510      	push	{r4, lr}
 801353e:	2900      	cmp	r1, #0
 8013540:	d103      	bne.n	801354a <__clzdi2+0xe>
 8013542:	f7fd fcdd 	bl	8010f00 <__clzsi2>
 8013546:	3020      	adds	r0, #32
 8013548:	e002      	b.n	8013550 <__clzdi2+0x14>
 801354a:	1c08      	adds	r0, r1, #0
 801354c:	f7fd fcd8 	bl	8010f00 <__clzsi2>
 8013550:	bd10      	pop	{r4, pc}
 8013552:	46c0      	nop			; (mov r8, r8)

08013554 <strlen>:
 8013554:	2300      	movs	r3, #0
 8013556:	5cc2      	ldrb	r2, [r0, r3]
 8013558:	3301      	adds	r3, #1
 801355a:	2a00      	cmp	r2, #0
 801355c:	d1fb      	bne.n	8013556 <strlen+0x2>
 801355e:	1e58      	subs	r0, r3, #1
 8013560:	4770      	bx	lr
	...

08013564 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8013564:	b510      	push	{r4, lr}
 8013566:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8013568:	b292      	uxth	r2, r2
 801356a:	4b03      	ldr	r3, [pc, #12]	; (8013578 <_write+0x14>)
 801356c:	4803      	ldr	r0, [pc, #12]	; (801357c <_write+0x18>)
 801356e:	f7fa f9df 	bl	800d930 <HAL_UART_Transmit>
	return len;
}
 8013572:	0020      	movs	r0, r4
 8013574:	bd10      	pop	{r4, pc}
 8013576:	46c0      	nop			; (mov r8, r8)
 8013578:	0000ffff 	.word	0x0000ffff
 801357c:	20000630 	.word	0x20000630

08013580 <Reset_Handler>:
 8013580:	480d      	ldr	r0, [pc, #52]	; (80135b8 <LoopForever+0x2>)
 8013582:	4685      	mov	sp, r0
 8013584:	2100      	movs	r1, #0
 8013586:	e003      	b.n	8013590 <LoopCopyDataInit>

08013588 <CopyDataInit>:
 8013588:	4b0c      	ldr	r3, [pc, #48]	; (80135bc <LoopForever+0x6>)
 801358a:	585b      	ldr	r3, [r3, r1]
 801358c:	5043      	str	r3, [r0, r1]
 801358e:	3104      	adds	r1, #4

08013590 <LoopCopyDataInit>:
 8013590:	480b      	ldr	r0, [pc, #44]	; (80135c0 <LoopForever+0xa>)
 8013592:	4b0c      	ldr	r3, [pc, #48]	; (80135c4 <LoopForever+0xe>)
 8013594:	1842      	adds	r2, r0, r1
 8013596:	429a      	cmp	r2, r3
 8013598:	d3f6      	bcc.n	8013588 <CopyDataInit>
 801359a:	4a0b      	ldr	r2, [pc, #44]	; (80135c8 <LoopForever+0x12>)
 801359c:	e002      	b.n	80135a4 <LoopFillZerobss>

0801359e <FillZerobss>:
 801359e:	2300      	movs	r3, #0
 80135a0:	6013      	str	r3, [r2, #0]
 80135a2:	3204      	adds	r2, #4

080135a4 <LoopFillZerobss>:
 80135a4:	4b09      	ldr	r3, [pc, #36]	; (80135cc <LoopForever+0x16>)
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d3f9      	bcc.n	801359e <FillZerobss>
 80135aa:	f7f7 fad1 	bl	800ab50 <SystemInit>
 80135ae:	f000 fa35 	bl	8013a1c <__libc_init_array>
 80135b2:	f7f7 fddf 	bl	800b174 <main>

080135b6 <LoopForever>:
 80135b6:	e7fe      	b.n	80135b6 <LoopForever>
 80135b8:	20009000 	.word	0x20009000
 80135bc:	0801f980 	.word	0x0801f980
 80135c0:	20000000 	.word	0x20000000
 80135c4:	20000070 	.word	0x20000070
 80135c8:	20000070 	.word	0x20000070
 80135cc:	200006c0 	.word	0x200006c0

080135d0 <ADC1_COMP_IRQHandler>:
 80135d0:	e7fe      	b.n	80135d0 <ADC1_COMP_IRQHandler>
	...

080135d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80135d4:	b510      	push	{r4, lr}
 80135d6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80135d8:	4a0c      	ldr	r2, [pc, #48]	; (801360c <_sbrk+0x38>)
 80135da:	490d      	ldr	r1, [pc, #52]	; (8013610 <_sbrk+0x3c>)
 80135dc:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80135de:	490d      	ldr	r1, [pc, #52]	; (8013614 <_sbrk+0x40>)
 80135e0:	6809      	ldr	r1, [r1, #0]
 80135e2:	2900      	cmp	r1, #0
 80135e4:	d007      	beq.n	80135f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80135e6:	490b      	ldr	r1, [pc, #44]	; (8013614 <_sbrk+0x40>)
 80135e8:	6808      	ldr	r0, [r1, #0]
 80135ea:	18c3      	adds	r3, r0, r3
 80135ec:	4293      	cmp	r3, r2
 80135ee:	d806      	bhi.n	80135fe <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80135f0:	4a08      	ldr	r2, [pc, #32]	; (8013614 <_sbrk+0x40>)
 80135f2:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80135f4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80135f6:	4907      	ldr	r1, [pc, #28]	; (8013614 <_sbrk+0x40>)
 80135f8:	4807      	ldr	r0, [pc, #28]	; (8013618 <_sbrk+0x44>)
 80135fa:	6008      	str	r0, [r1, #0]
 80135fc:	e7f3      	b.n	80135e6 <_sbrk+0x12>
    errno = ENOMEM;
 80135fe:	f000 f867 	bl	80136d0 <__errno>
 8013602:	230c      	movs	r3, #12
 8013604:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8013606:	2001      	movs	r0, #1
 8013608:	4240      	negs	r0, r0
 801360a:	e7f3      	b.n	80135f4 <_sbrk+0x20>
 801360c:	20009000 	.word	0x20009000
 8013610:	00001400 	.word	0x00001400
 8013614:	20000624 	.word	0x20000624
 8013618:	200006c0 	.word	0x200006c0

0801361c <__ieee754_sqrtf>:
 801361c:	492a      	ldr	r1, [pc, #168]	; (80136c8 <__ieee754_sqrtf+0xac>)
 801361e:	0043      	lsls	r3, r0, #1
 8013620:	b570      	push	{r4, r5, r6, lr}
 8013622:	0002      	movs	r2, r0
 8013624:	1c04      	adds	r4, r0, #0
 8013626:	085b      	lsrs	r3, r3, #1
 8013628:	428b      	cmp	r3, r1
 801362a:	d83b      	bhi.n	80136a4 <__ieee754_sqrtf+0x88>
 801362c:	2b00      	cmp	r3, #0
 801362e:	d038      	beq.n	80136a2 <__ieee754_sqrtf+0x86>
 8013630:	2800      	cmp	r0, #0
 8013632:	db3e      	blt.n	80136b2 <__ieee754_sqrtf+0x96>
 8013634:	4925      	ldr	r1, [pc, #148]	; (80136cc <__ieee754_sqrtf+0xb0>)
 8013636:	15c6      	asrs	r6, r0, #23
 8013638:	428b      	cmp	r3, r1
 801363a:	d80b      	bhi.n	8013654 <__ieee754_sqrtf+0x38>
 801363c:	2080      	movs	r0, #128	; 0x80
 801363e:	0400      	lsls	r0, r0, #16
 8013640:	4220      	tst	r0, r4
 8013642:	d13d      	bne.n	80136c0 <__ieee754_sqrtf+0xa4>
 8013644:	2300      	movs	r3, #0
 8013646:	e000      	b.n	801364a <__ieee754_sqrtf+0x2e>
 8013648:	000b      	movs	r3, r1
 801364a:	0052      	lsls	r2, r2, #1
 801364c:	1c59      	adds	r1, r3, #1
 801364e:	4202      	tst	r2, r0
 8013650:	d0fa      	beq.n	8013648 <__ieee754_sqrtf+0x2c>
 8013652:	1af6      	subs	r6, r6, r3
 8013654:	2380      	movs	r3, #128	; 0x80
 8013656:	0252      	lsls	r2, r2, #9
 8013658:	041b      	lsls	r3, r3, #16
 801365a:	0a52      	lsrs	r2, r2, #9
 801365c:	431a      	orrs	r2, r3
 801365e:	3e7f      	subs	r6, #127	; 0x7f
 8013660:	0053      	lsls	r3, r2, #1
 8013662:	07f1      	lsls	r1, r6, #31
 8013664:	d500      	bpl.n	8013668 <__ieee754_sqrtf+0x4c>
 8013666:	0093      	lsls	r3, r2, #2
 8013668:	2280      	movs	r2, #128	; 0x80
 801366a:	1070      	asrs	r0, r6, #1
 801366c:	2119      	movs	r1, #25
 801366e:	2600      	movs	r6, #0
 8013670:	2500      	movs	r5, #0
 8013672:	0452      	lsls	r2, r2, #17
 8013674:	18ac      	adds	r4, r5, r2
 8013676:	429c      	cmp	r4, r3
 8013678:	dc02      	bgt.n	8013680 <__ieee754_sqrtf+0x64>
 801367a:	18a5      	adds	r5, r4, r2
 801367c:	1b1b      	subs	r3, r3, r4
 801367e:	18b6      	adds	r6, r6, r2
 8013680:	3901      	subs	r1, #1
 8013682:	005b      	lsls	r3, r3, #1
 8013684:	0852      	lsrs	r2, r2, #1
 8013686:	2900      	cmp	r1, #0
 8013688:	d1f4      	bne.n	8013674 <__ieee754_sqrtf+0x58>
 801368a:	2b00      	cmp	r3, #0
 801368c:	d002      	beq.n	8013694 <__ieee754_sqrtf+0x78>
 801368e:	2301      	movs	r3, #1
 8013690:	3601      	adds	r6, #1
 8013692:	439e      	bics	r6, r3
 8013694:	23fc      	movs	r3, #252	; 0xfc
 8013696:	059b      	lsls	r3, r3, #22
 8013698:	469c      	mov	ip, r3
 801369a:	1076      	asrs	r6, r6, #1
 801369c:	4466      	add	r6, ip
 801369e:	05c0      	lsls	r0, r0, #23
 80136a0:	1980      	adds	r0, r0, r6
 80136a2:	bd70      	pop	{r4, r5, r6, pc}
 80136a4:	1c01      	adds	r1, r0, #0
 80136a6:	f7fd f935 	bl	8010914 <__aeabi_fmul>
 80136aa:	1c21      	adds	r1, r4, #0
 80136ac:	f7fc fe86 	bl	80103bc <__aeabi_fadd>
 80136b0:	e7f7      	b.n	80136a2 <__ieee754_sqrtf+0x86>
 80136b2:	1c01      	adds	r1, r0, #0
 80136b4:	f7fd fa60 	bl	8010b78 <__aeabi_fsub>
 80136b8:	1c01      	adds	r1, r0, #0
 80136ba:	f7fd f819 	bl	80106f0 <__aeabi_fdiv>
 80136be:	e7f0      	b.n	80136a2 <__ieee754_sqrtf+0x86>
 80136c0:	2301      	movs	r3, #1
 80136c2:	425b      	negs	r3, r3
 80136c4:	e7c5      	b.n	8013652 <__ieee754_sqrtf+0x36>
 80136c6:	46c0      	nop			; (mov r8, r8)
 80136c8:	7f7fffff 	.word	0x7f7fffff
 80136cc:	007fffff 	.word	0x007fffff

080136d0 <__errno>:
 80136d0:	4b01      	ldr	r3, [pc, #4]	; (80136d8 <__errno+0x8>)
 80136d2:	6818      	ldr	r0, [r3, #0]
 80136d4:	4770      	bx	lr
 80136d6:	46c0      	nop			; (mov r8, r8)
 80136d8:	20000008 	.word	0x20000008

080136dc <__sflush_r>:
 80136dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136de:	898a      	ldrh	r2, [r1, #12]
 80136e0:	0005      	movs	r5, r0
 80136e2:	000c      	movs	r4, r1
 80136e4:	0713      	lsls	r3, r2, #28
 80136e6:	d460      	bmi.n	80137aa <__sflush_r+0xce>
 80136e8:	684b      	ldr	r3, [r1, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	dc04      	bgt.n	80136f8 <__sflush_r+0x1c>
 80136ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	dc01      	bgt.n	80136f8 <__sflush_r+0x1c>
 80136f4:	2000      	movs	r0, #0
 80136f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80136f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80136fa:	2f00      	cmp	r7, #0
 80136fc:	d0fa      	beq.n	80136f4 <__sflush_r+0x18>
 80136fe:	2300      	movs	r3, #0
 8013700:	682e      	ldr	r6, [r5, #0]
 8013702:	602b      	str	r3, [r5, #0]
 8013704:	2380      	movs	r3, #128	; 0x80
 8013706:	015b      	lsls	r3, r3, #5
 8013708:	6a21      	ldr	r1, [r4, #32]
 801370a:	401a      	ands	r2, r3
 801370c:	d034      	beq.n	8013778 <__sflush_r+0x9c>
 801370e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013710:	89a3      	ldrh	r3, [r4, #12]
 8013712:	075b      	lsls	r3, r3, #29
 8013714:	d506      	bpl.n	8013724 <__sflush_r+0x48>
 8013716:	6863      	ldr	r3, [r4, #4]
 8013718:	1ac0      	subs	r0, r0, r3
 801371a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801371c:	2b00      	cmp	r3, #0
 801371e:	d001      	beq.n	8013724 <__sflush_r+0x48>
 8013720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013722:	1ac0      	subs	r0, r0, r3
 8013724:	0002      	movs	r2, r0
 8013726:	6a21      	ldr	r1, [r4, #32]
 8013728:	2300      	movs	r3, #0
 801372a:	0028      	movs	r0, r5
 801372c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801372e:	47b8      	blx	r7
 8013730:	89a1      	ldrh	r1, [r4, #12]
 8013732:	1c43      	adds	r3, r0, #1
 8013734:	d106      	bne.n	8013744 <__sflush_r+0x68>
 8013736:	682b      	ldr	r3, [r5, #0]
 8013738:	2b1d      	cmp	r3, #29
 801373a:	d830      	bhi.n	801379e <__sflush_r+0xc2>
 801373c:	4a2b      	ldr	r2, [pc, #172]	; (80137ec <__sflush_r+0x110>)
 801373e:	40da      	lsrs	r2, r3
 8013740:	07d3      	lsls	r3, r2, #31
 8013742:	d52c      	bpl.n	801379e <__sflush_r+0xc2>
 8013744:	2300      	movs	r3, #0
 8013746:	6063      	str	r3, [r4, #4]
 8013748:	6923      	ldr	r3, [r4, #16]
 801374a:	6023      	str	r3, [r4, #0]
 801374c:	04cb      	lsls	r3, r1, #19
 801374e:	d505      	bpl.n	801375c <__sflush_r+0x80>
 8013750:	1c43      	adds	r3, r0, #1
 8013752:	d102      	bne.n	801375a <__sflush_r+0x7e>
 8013754:	682b      	ldr	r3, [r5, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d100      	bne.n	801375c <__sflush_r+0x80>
 801375a:	6560      	str	r0, [r4, #84]	; 0x54
 801375c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801375e:	602e      	str	r6, [r5, #0]
 8013760:	2900      	cmp	r1, #0
 8013762:	d0c7      	beq.n	80136f4 <__sflush_r+0x18>
 8013764:	0023      	movs	r3, r4
 8013766:	3344      	adds	r3, #68	; 0x44
 8013768:	4299      	cmp	r1, r3
 801376a:	d002      	beq.n	8013772 <__sflush_r+0x96>
 801376c:	0028      	movs	r0, r5
 801376e:	f000 f981 	bl	8013a74 <_free_r>
 8013772:	2000      	movs	r0, #0
 8013774:	6360      	str	r0, [r4, #52]	; 0x34
 8013776:	e7be      	b.n	80136f6 <__sflush_r+0x1a>
 8013778:	2301      	movs	r3, #1
 801377a:	0028      	movs	r0, r5
 801377c:	47b8      	blx	r7
 801377e:	1c43      	adds	r3, r0, #1
 8013780:	d1c6      	bne.n	8013710 <__sflush_r+0x34>
 8013782:	682b      	ldr	r3, [r5, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d0c3      	beq.n	8013710 <__sflush_r+0x34>
 8013788:	2b1d      	cmp	r3, #29
 801378a:	d001      	beq.n	8013790 <__sflush_r+0xb4>
 801378c:	2b16      	cmp	r3, #22
 801378e:	d101      	bne.n	8013794 <__sflush_r+0xb8>
 8013790:	602e      	str	r6, [r5, #0]
 8013792:	e7af      	b.n	80136f4 <__sflush_r+0x18>
 8013794:	2340      	movs	r3, #64	; 0x40
 8013796:	89a2      	ldrh	r2, [r4, #12]
 8013798:	4313      	orrs	r3, r2
 801379a:	81a3      	strh	r3, [r4, #12]
 801379c:	e7ab      	b.n	80136f6 <__sflush_r+0x1a>
 801379e:	2340      	movs	r3, #64	; 0x40
 80137a0:	430b      	orrs	r3, r1
 80137a2:	2001      	movs	r0, #1
 80137a4:	81a3      	strh	r3, [r4, #12]
 80137a6:	4240      	negs	r0, r0
 80137a8:	e7a5      	b.n	80136f6 <__sflush_r+0x1a>
 80137aa:	690f      	ldr	r7, [r1, #16]
 80137ac:	2f00      	cmp	r7, #0
 80137ae:	d0a1      	beq.n	80136f4 <__sflush_r+0x18>
 80137b0:	680b      	ldr	r3, [r1, #0]
 80137b2:	600f      	str	r7, [r1, #0]
 80137b4:	1bdb      	subs	r3, r3, r7
 80137b6:	9301      	str	r3, [sp, #4]
 80137b8:	2300      	movs	r3, #0
 80137ba:	0792      	lsls	r2, r2, #30
 80137bc:	d100      	bne.n	80137c0 <__sflush_r+0xe4>
 80137be:	694b      	ldr	r3, [r1, #20]
 80137c0:	60a3      	str	r3, [r4, #8]
 80137c2:	9b01      	ldr	r3, [sp, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dc00      	bgt.n	80137ca <__sflush_r+0xee>
 80137c8:	e794      	b.n	80136f4 <__sflush_r+0x18>
 80137ca:	9b01      	ldr	r3, [sp, #4]
 80137cc:	003a      	movs	r2, r7
 80137ce:	6a21      	ldr	r1, [r4, #32]
 80137d0:	0028      	movs	r0, r5
 80137d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137d4:	47b0      	blx	r6
 80137d6:	2800      	cmp	r0, #0
 80137d8:	dc03      	bgt.n	80137e2 <__sflush_r+0x106>
 80137da:	2340      	movs	r3, #64	; 0x40
 80137dc:	89a2      	ldrh	r2, [r4, #12]
 80137de:	4313      	orrs	r3, r2
 80137e0:	e7df      	b.n	80137a2 <__sflush_r+0xc6>
 80137e2:	9b01      	ldr	r3, [sp, #4]
 80137e4:	183f      	adds	r7, r7, r0
 80137e6:	1a1b      	subs	r3, r3, r0
 80137e8:	9301      	str	r3, [sp, #4]
 80137ea:	e7ea      	b.n	80137c2 <__sflush_r+0xe6>
 80137ec:	20400001 	.word	0x20400001

080137f0 <_fflush_r>:
 80137f0:	690b      	ldr	r3, [r1, #16]
 80137f2:	b570      	push	{r4, r5, r6, lr}
 80137f4:	0005      	movs	r5, r0
 80137f6:	000c      	movs	r4, r1
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d101      	bne.n	8013800 <_fflush_r+0x10>
 80137fc:	2000      	movs	r0, #0
 80137fe:	bd70      	pop	{r4, r5, r6, pc}
 8013800:	2800      	cmp	r0, #0
 8013802:	d004      	beq.n	801380e <_fflush_r+0x1e>
 8013804:	6983      	ldr	r3, [r0, #24]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d101      	bne.n	801380e <_fflush_r+0x1e>
 801380a:	f000 f873 	bl	80138f4 <__sinit>
 801380e:	4b0b      	ldr	r3, [pc, #44]	; (801383c <_fflush_r+0x4c>)
 8013810:	429c      	cmp	r4, r3
 8013812:	d109      	bne.n	8013828 <_fflush_r+0x38>
 8013814:	686c      	ldr	r4, [r5, #4]
 8013816:	220c      	movs	r2, #12
 8013818:	5ea3      	ldrsh	r3, [r4, r2]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d0ee      	beq.n	80137fc <_fflush_r+0xc>
 801381e:	0021      	movs	r1, r4
 8013820:	0028      	movs	r0, r5
 8013822:	f7ff ff5b 	bl	80136dc <__sflush_r>
 8013826:	e7ea      	b.n	80137fe <_fflush_r+0xe>
 8013828:	4b05      	ldr	r3, [pc, #20]	; (8013840 <_fflush_r+0x50>)
 801382a:	429c      	cmp	r4, r3
 801382c:	d101      	bne.n	8013832 <_fflush_r+0x42>
 801382e:	68ac      	ldr	r4, [r5, #8]
 8013830:	e7f1      	b.n	8013816 <_fflush_r+0x26>
 8013832:	4b04      	ldr	r3, [pc, #16]	; (8013844 <_fflush_r+0x54>)
 8013834:	429c      	cmp	r4, r3
 8013836:	d1ee      	bne.n	8013816 <_fflush_r+0x26>
 8013838:	68ec      	ldr	r4, [r5, #12]
 801383a:	e7ec      	b.n	8013816 <_fflush_r+0x26>
 801383c:	0801f540 	.word	0x0801f540
 8013840:	0801f560 	.word	0x0801f560
 8013844:	0801f520 	.word	0x0801f520

08013848 <fflush>:
 8013848:	b510      	push	{r4, lr}
 801384a:	1e01      	subs	r1, r0, #0
 801384c:	d105      	bne.n	801385a <fflush+0x12>
 801384e:	4b05      	ldr	r3, [pc, #20]	; (8013864 <fflush+0x1c>)
 8013850:	4905      	ldr	r1, [pc, #20]	; (8013868 <fflush+0x20>)
 8013852:	6818      	ldr	r0, [r3, #0]
 8013854:	f000 f8c0 	bl	80139d8 <_fwalk_reent>
 8013858:	bd10      	pop	{r4, pc}
 801385a:	4b04      	ldr	r3, [pc, #16]	; (801386c <fflush+0x24>)
 801385c:	6818      	ldr	r0, [r3, #0]
 801385e:	f7ff ffc7 	bl	80137f0 <_fflush_r>
 8013862:	e7f9      	b.n	8013858 <fflush+0x10>
 8013864:	0801f580 	.word	0x0801f580
 8013868:	080137f1 	.word	0x080137f1
 801386c:	20000008 	.word	0x20000008

08013870 <std>:
 8013870:	2300      	movs	r3, #0
 8013872:	b510      	push	{r4, lr}
 8013874:	0004      	movs	r4, r0
 8013876:	6003      	str	r3, [r0, #0]
 8013878:	6043      	str	r3, [r0, #4]
 801387a:	6083      	str	r3, [r0, #8]
 801387c:	8181      	strh	r1, [r0, #12]
 801387e:	6643      	str	r3, [r0, #100]	; 0x64
 8013880:	81c2      	strh	r2, [r0, #14]
 8013882:	6103      	str	r3, [r0, #16]
 8013884:	6143      	str	r3, [r0, #20]
 8013886:	6183      	str	r3, [r0, #24]
 8013888:	0019      	movs	r1, r3
 801388a:	2208      	movs	r2, #8
 801388c:	305c      	adds	r0, #92	; 0x5c
 801388e:	f000 f8e9 	bl	8013a64 <memset>
 8013892:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <std+0x38>)
 8013894:	6224      	str	r4, [r4, #32]
 8013896:	6263      	str	r3, [r4, #36]	; 0x24
 8013898:	4b04      	ldr	r3, [pc, #16]	; (80138ac <std+0x3c>)
 801389a:	62a3      	str	r3, [r4, #40]	; 0x28
 801389c:	4b04      	ldr	r3, [pc, #16]	; (80138b0 <std+0x40>)
 801389e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138a0:	4b04      	ldr	r3, [pc, #16]	; (80138b4 <std+0x44>)
 80138a2:	6323      	str	r3, [r4, #48]	; 0x30
 80138a4:	bd10      	pop	{r4, pc}
 80138a6:	46c0      	nop			; (mov r8, r8)
 80138a8:	08013be9 	.word	0x08013be9
 80138ac:	08013c11 	.word	0x08013c11
 80138b0:	08013c49 	.word	0x08013c49
 80138b4:	08013c75 	.word	0x08013c75

080138b8 <_cleanup_r>:
 80138b8:	b510      	push	{r4, lr}
 80138ba:	4902      	ldr	r1, [pc, #8]	; (80138c4 <_cleanup_r+0xc>)
 80138bc:	f000 f88c 	bl	80139d8 <_fwalk_reent>
 80138c0:	bd10      	pop	{r4, pc}
 80138c2:	46c0      	nop			; (mov r8, r8)
 80138c4:	080137f1 	.word	0x080137f1

080138c8 <__sfmoreglue>:
 80138c8:	b570      	push	{r4, r5, r6, lr}
 80138ca:	2568      	movs	r5, #104	; 0x68
 80138cc:	1e4a      	subs	r2, r1, #1
 80138ce:	4355      	muls	r5, r2
 80138d0:	000e      	movs	r6, r1
 80138d2:	0029      	movs	r1, r5
 80138d4:	3174      	adds	r1, #116	; 0x74
 80138d6:	f000 f917 	bl	8013b08 <_malloc_r>
 80138da:	1e04      	subs	r4, r0, #0
 80138dc:	d008      	beq.n	80138f0 <__sfmoreglue+0x28>
 80138de:	2100      	movs	r1, #0
 80138e0:	002a      	movs	r2, r5
 80138e2:	6001      	str	r1, [r0, #0]
 80138e4:	6046      	str	r6, [r0, #4]
 80138e6:	300c      	adds	r0, #12
 80138e8:	60a0      	str	r0, [r4, #8]
 80138ea:	3268      	adds	r2, #104	; 0x68
 80138ec:	f000 f8ba 	bl	8013a64 <memset>
 80138f0:	0020      	movs	r0, r4
 80138f2:	bd70      	pop	{r4, r5, r6, pc}

080138f4 <__sinit>:
 80138f4:	6983      	ldr	r3, [r0, #24]
 80138f6:	b513      	push	{r0, r1, r4, lr}
 80138f8:	0004      	movs	r4, r0
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d128      	bne.n	8013950 <__sinit+0x5c>
 80138fe:	6483      	str	r3, [r0, #72]	; 0x48
 8013900:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013902:	6503      	str	r3, [r0, #80]	; 0x50
 8013904:	4b13      	ldr	r3, [pc, #76]	; (8013954 <__sinit+0x60>)
 8013906:	4a14      	ldr	r2, [pc, #80]	; (8013958 <__sinit+0x64>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	6282      	str	r2, [r0, #40]	; 0x28
 801390c:	9301      	str	r3, [sp, #4]
 801390e:	4298      	cmp	r0, r3
 8013910:	d101      	bne.n	8013916 <__sinit+0x22>
 8013912:	2301      	movs	r3, #1
 8013914:	6183      	str	r3, [r0, #24]
 8013916:	0020      	movs	r0, r4
 8013918:	f000 f820 	bl	801395c <__sfp>
 801391c:	6060      	str	r0, [r4, #4]
 801391e:	0020      	movs	r0, r4
 8013920:	f000 f81c 	bl	801395c <__sfp>
 8013924:	60a0      	str	r0, [r4, #8]
 8013926:	0020      	movs	r0, r4
 8013928:	f000 f818 	bl	801395c <__sfp>
 801392c:	2200      	movs	r2, #0
 801392e:	60e0      	str	r0, [r4, #12]
 8013930:	2104      	movs	r1, #4
 8013932:	6860      	ldr	r0, [r4, #4]
 8013934:	f7ff ff9c 	bl	8013870 <std>
 8013938:	2201      	movs	r2, #1
 801393a:	2109      	movs	r1, #9
 801393c:	68a0      	ldr	r0, [r4, #8]
 801393e:	f7ff ff97 	bl	8013870 <std>
 8013942:	2202      	movs	r2, #2
 8013944:	2112      	movs	r1, #18
 8013946:	68e0      	ldr	r0, [r4, #12]
 8013948:	f7ff ff92 	bl	8013870 <std>
 801394c:	2301      	movs	r3, #1
 801394e:	61a3      	str	r3, [r4, #24]
 8013950:	bd13      	pop	{r0, r1, r4, pc}
 8013952:	46c0      	nop			; (mov r8, r8)
 8013954:	0801f580 	.word	0x0801f580
 8013958:	080138b9 	.word	0x080138b9

0801395c <__sfp>:
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	4b1c      	ldr	r3, [pc, #112]	; (80139d0 <__sfp+0x74>)
 8013960:	0007      	movs	r7, r0
 8013962:	681e      	ldr	r6, [r3, #0]
 8013964:	69b3      	ldr	r3, [r6, #24]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d102      	bne.n	8013970 <__sfp+0x14>
 801396a:	0030      	movs	r0, r6
 801396c:	f7ff ffc2 	bl	80138f4 <__sinit>
 8013970:	3648      	adds	r6, #72	; 0x48
 8013972:	68b4      	ldr	r4, [r6, #8]
 8013974:	6873      	ldr	r3, [r6, #4]
 8013976:	3b01      	subs	r3, #1
 8013978:	d504      	bpl.n	8013984 <__sfp+0x28>
 801397a:	6833      	ldr	r3, [r6, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d007      	beq.n	8013990 <__sfp+0x34>
 8013980:	6836      	ldr	r6, [r6, #0]
 8013982:	e7f6      	b.n	8013972 <__sfp+0x16>
 8013984:	220c      	movs	r2, #12
 8013986:	5ea5      	ldrsh	r5, [r4, r2]
 8013988:	2d00      	cmp	r5, #0
 801398a:	d00d      	beq.n	80139a8 <__sfp+0x4c>
 801398c:	3468      	adds	r4, #104	; 0x68
 801398e:	e7f2      	b.n	8013976 <__sfp+0x1a>
 8013990:	2104      	movs	r1, #4
 8013992:	0038      	movs	r0, r7
 8013994:	f7ff ff98 	bl	80138c8 <__sfmoreglue>
 8013998:	6030      	str	r0, [r6, #0]
 801399a:	2800      	cmp	r0, #0
 801399c:	d1f0      	bne.n	8013980 <__sfp+0x24>
 801399e:	230c      	movs	r3, #12
 80139a0:	0004      	movs	r4, r0
 80139a2:	603b      	str	r3, [r7, #0]
 80139a4:	0020      	movs	r0, r4
 80139a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139a8:	0020      	movs	r0, r4
 80139aa:	4b0a      	ldr	r3, [pc, #40]	; (80139d4 <__sfp+0x78>)
 80139ac:	6665      	str	r5, [r4, #100]	; 0x64
 80139ae:	6025      	str	r5, [r4, #0]
 80139b0:	6065      	str	r5, [r4, #4]
 80139b2:	60a5      	str	r5, [r4, #8]
 80139b4:	60e3      	str	r3, [r4, #12]
 80139b6:	6125      	str	r5, [r4, #16]
 80139b8:	6165      	str	r5, [r4, #20]
 80139ba:	61a5      	str	r5, [r4, #24]
 80139bc:	2208      	movs	r2, #8
 80139be:	0029      	movs	r1, r5
 80139c0:	305c      	adds	r0, #92	; 0x5c
 80139c2:	f000 f84f 	bl	8013a64 <memset>
 80139c6:	6365      	str	r5, [r4, #52]	; 0x34
 80139c8:	63a5      	str	r5, [r4, #56]	; 0x38
 80139ca:	64a5      	str	r5, [r4, #72]	; 0x48
 80139cc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80139ce:	e7e9      	b.n	80139a4 <__sfp+0x48>
 80139d0:	0801f580 	.word	0x0801f580
 80139d4:	ffff0001 	.word	0xffff0001

080139d8 <_fwalk_reent>:
 80139d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80139da:	0004      	movs	r4, r0
 80139dc:	0007      	movs	r7, r0
 80139de:	2600      	movs	r6, #0
 80139e0:	9101      	str	r1, [sp, #4]
 80139e2:	3448      	adds	r4, #72	; 0x48
 80139e4:	2c00      	cmp	r4, #0
 80139e6:	d101      	bne.n	80139ec <_fwalk_reent+0x14>
 80139e8:	0030      	movs	r0, r6
 80139ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80139ec:	6863      	ldr	r3, [r4, #4]
 80139ee:	68a5      	ldr	r5, [r4, #8]
 80139f0:	9300      	str	r3, [sp, #0]
 80139f2:	9b00      	ldr	r3, [sp, #0]
 80139f4:	3b01      	subs	r3, #1
 80139f6:	9300      	str	r3, [sp, #0]
 80139f8:	d501      	bpl.n	80139fe <_fwalk_reent+0x26>
 80139fa:	6824      	ldr	r4, [r4, #0]
 80139fc:	e7f2      	b.n	80139e4 <_fwalk_reent+0xc>
 80139fe:	89ab      	ldrh	r3, [r5, #12]
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d908      	bls.n	8013a16 <_fwalk_reent+0x3e>
 8013a04:	220e      	movs	r2, #14
 8013a06:	5eab      	ldrsh	r3, [r5, r2]
 8013a08:	3301      	adds	r3, #1
 8013a0a:	d004      	beq.n	8013a16 <_fwalk_reent+0x3e>
 8013a0c:	0029      	movs	r1, r5
 8013a0e:	0038      	movs	r0, r7
 8013a10:	9b01      	ldr	r3, [sp, #4]
 8013a12:	4798      	blx	r3
 8013a14:	4306      	orrs	r6, r0
 8013a16:	3568      	adds	r5, #104	; 0x68
 8013a18:	e7eb      	b.n	80139f2 <_fwalk_reent+0x1a>
	...

08013a1c <__libc_init_array>:
 8013a1c:	b570      	push	{r4, r5, r6, lr}
 8013a1e:	2600      	movs	r6, #0
 8013a20:	4d0c      	ldr	r5, [pc, #48]	; (8013a54 <__libc_init_array+0x38>)
 8013a22:	4c0d      	ldr	r4, [pc, #52]	; (8013a58 <__libc_init_array+0x3c>)
 8013a24:	1b64      	subs	r4, r4, r5
 8013a26:	10a4      	asrs	r4, r4, #2
 8013a28:	42a6      	cmp	r6, r4
 8013a2a:	d109      	bne.n	8013a40 <__libc_init_array+0x24>
 8013a2c:	2600      	movs	r6, #0
 8013a2e:	f002 ff09 	bl	8016844 <_init>
 8013a32:	4d0a      	ldr	r5, [pc, #40]	; (8013a5c <__libc_init_array+0x40>)
 8013a34:	4c0a      	ldr	r4, [pc, #40]	; (8013a60 <__libc_init_array+0x44>)
 8013a36:	1b64      	subs	r4, r4, r5
 8013a38:	10a4      	asrs	r4, r4, #2
 8013a3a:	42a6      	cmp	r6, r4
 8013a3c:	d105      	bne.n	8013a4a <__libc_init_array+0x2e>
 8013a3e:	bd70      	pop	{r4, r5, r6, pc}
 8013a40:	00b3      	lsls	r3, r6, #2
 8013a42:	58eb      	ldr	r3, [r5, r3]
 8013a44:	4798      	blx	r3
 8013a46:	3601      	adds	r6, #1
 8013a48:	e7ee      	b.n	8013a28 <__libc_init_array+0xc>
 8013a4a:	00b3      	lsls	r3, r6, #2
 8013a4c:	58eb      	ldr	r3, [r5, r3]
 8013a4e:	4798      	blx	r3
 8013a50:	3601      	adds	r6, #1
 8013a52:	e7f2      	b.n	8013a3a <__libc_init_array+0x1e>
 8013a54:	0801f978 	.word	0x0801f978
 8013a58:	0801f978 	.word	0x0801f978
 8013a5c:	0801f978 	.word	0x0801f978
 8013a60:	0801f97c 	.word	0x0801f97c

08013a64 <memset>:
 8013a64:	0003      	movs	r3, r0
 8013a66:	1812      	adds	r2, r2, r0
 8013a68:	4293      	cmp	r3, r2
 8013a6a:	d100      	bne.n	8013a6e <memset+0xa>
 8013a6c:	4770      	bx	lr
 8013a6e:	7019      	strb	r1, [r3, #0]
 8013a70:	3301      	adds	r3, #1
 8013a72:	e7f9      	b.n	8013a68 <memset+0x4>

08013a74 <_free_r>:
 8013a74:	b570      	push	{r4, r5, r6, lr}
 8013a76:	0005      	movs	r5, r0
 8013a78:	2900      	cmp	r1, #0
 8013a7a:	d010      	beq.n	8013a9e <_free_r+0x2a>
 8013a7c:	1f0c      	subs	r4, r1, #4
 8013a7e:	6823      	ldr	r3, [r4, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da00      	bge.n	8013a86 <_free_r+0x12>
 8013a84:	18e4      	adds	r4, r4, r3
 8013a86:	0028      	movs	r0, r5
 8013a88:	f000 f934 	bl	8013cf4 <__malloc_lock>
 8013a8c:	4a1d      	ldr	r2, [pc, #116]	; (8013b04 <_free_r+0x90>)
 8013a8e:	6813      	ldr	r3, [r2, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d105      	bne.n	8013aa0 <_free_r+0x2c>
 8013a94:	6063      	str	r3, [r4, #4]
 8013a96:	6014      	str	r4, [r2, #0]
 8013a98:	0028      	movs	r0, r5
 8013a9a:	f000 f92c 	bl	8013cf6 <__malloc_unlock>
 8013a9e:	bd70      	pop	{r4, r5, r6, pc}
 8013aa0:	42a3      	cmp	r3, r4
 8013aa2:	d909      	bls.n	8013ab8 <_free_r+0x44>
 8013aa4:	6821      	ldr	r1, [r4, #0]
 8013aa6:	1860      	adds	r0, r4, r1
 8013aa8:	4283      	cmp	r3, r0
 8013aaa:	d1f3      	bne.n	8013a94 <_free_r+0x20>
 8013aac:	6818      	ldr	r0, [r3, #0]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	1841      	adds	r1, r0, r1
 8013ab2:	6021      	str	r1, [r4, #0]
 8013ab4:	e7ee      	b.n	8013a94 <_free_r+0x20>
 8013ab6:	0013      	movs	r3, r2
 8013ab8:	685a      	ldr	r2, [r3, #4]
 8013aba:	2a00      	cmp	r2, #0
 8013abc:	d001      	beq.n	8013ac2 <_free_r+0x4e>
 8013abe:	42a2      	cmp	r2, r4
 8013ac0:	d9f9      	bls.n	8013ab6 <_free_r+0x42>
 8013ac2:	6819      	ldr	r1, [r3, #0]
 8013ac4:	1858      	adds	r0, r3, r1
 8013ac6:	42a0      	cmp	r0, r4
 8013ac8:	d10b      	bne.n	8013ae2 <_free_r+0x6e>
 8013aca:	6820      	ldr	r0, [r4, #0]
 8013acc:	1809      	adds	r1, r1, r0
 8013ace:	1858      	adds	r0, r3, r1
 8013ad0:	6019      	str	r1, [r3, #0]
 8013ad2:	4282      	cmp	r2, r0
 8013ad4:	d1e0      	bne.n	8013a98 <_free_r+0x24>
 8013ad6:	6810      	ldr	r0, [r2, #0]
 8013ad8:	6852      	ldr	r2, [r2, #4]
 8013ada:	1841      	adds	r1, r0, r1
 8013adc:	6019      	str	r1, [r3, #0]
 8013ade:	605a      	str	r2, [r3, #4]
 8013ae0:	e7da      	b.n	8013a98 <_free_r+0x24>
 8013ae2:	42a0      	cmp	r0, r4
 8013ae4:	d902      	bls.n	8013aec <_free_r+0x78>
 8013ae6:	230c      	movs	r3, #12
 8013ae8:	602b      	str	r3, [r5, #0]
 8013aea:	e7d5      	b.n	8013a98 <_free_r+0x24>
 8013aec:	6821      	ldr	r1, [r4, #0]
 8013aee:	1860      	adds	r0, r4, r1
 8013af0:	4282      	cmp	r2, r0
 8013af2:	d103      	bne.n	8013afc <_free_r+0x88>
 8013af4:	6810      	ldr	r0, [r2, #0]
 8013af6:	6852      	ldr	r2, [r2, #4]
 8013af8:	1841      	adds	r1, r0, r1
 8013afa:	6021      	str	r1, [r4, #0]
 8013afc:	6062      	str	r2, [r4, #4]
 8013afe:	605c      	str	r4, [r3, #4]
 8013b00:	e7ca      	b.n	8013a98 <_free_r+0x24>
 8013b02:	46c0      	nop			; (mov r8, r8)
 8013b04:	20000628 	.word	0x20000628

08013b08 <_malloc_r>:
 8013b08:	2303      	movs	r3, #3
 8013b0a:	b570      	push	{r4, r5, r6, lr}
 8013b0c:	1ccd      	adds	r5, r1, #3
 8013b0e:	439d      	bics	r5, r3
 8013b10:	3508      	adds	r5, #8
 8013b12:	0006      	movs	r6, r0
 8013b14:	2d0c      	cmp	r5, #12
 8013b16:	d21e      	bcs.n	8013b56 <_malloc_r+0x4e>
 8013b18:	250c      	movs	r5, #12
 8013b1a:	42a9      	cmp	r1, r5
 8013b1c:	d81d      	bhi.n	8013b5a <_malloc_r+0x52>
 8013b1e:	0030      	movs	r0, r6
 8013b20:	f000 f8e8 	bl	8013cf4 <__malloc_lock>
 8013b24:	4a25      	ldr	r2, [pc, #148]	; (8013bbc <_malloc_r+0xb4>)
 8013b26:	6814      	ldr	r4, [r2, #0]
 8013b28:	0021      	movs	r1, r4
 8013b2a:	2900      	cmp	r1, #0
 8013b2c:	d119      	bne.n	8013b62 <_malloc_r+0x5a>
 8013b2e:	4c24      	ldr	r4, [pc, #144]	; (8013bc0 <_malloc_r+0xb8>)
 8013b30:	6823      	ldr	r3, [r4, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d103      	bne.n	8013b3e <_malloc_r+0x36>
 8013b36:	0030      	movs	r0, r6
 8013b38:	f000 f844 	bl	8013bc4 <_sbrk_r>
 8013b3c:	6020      	str	r0, [r4, #0]
 8013b3e:	0029      	movs	r1, r5
 8013b40:	0030      	movs	r0, r6
 8013b42:	f000 f83f 	bl	8013bc4 <_sbrk_r>
 8013b46:	1c43      	adds	r3, r0, #1
 8013b48:	d12b      	bne.n	8013ba2 <_malloc_r+0x9a>
 8013b4a:	230c      	movs	r3, #12
 8013b4c:	0030      	movs	r0, r6
 8013b4e:	6033      	str	r3, [r6, #0]
 8013b50:	f000 f8d1 	bl	8013cf6 <__malloc_unlock>
 8013b54:	e003      	b.n	8013b5e <_malloc_r+0x56>
 8013b56:	2d00      	cmp	r5, #0
 8013b58:	dadf      	bge.n	8013b1a <_malloc_r+0x12>
 8013b5a:	230c      	movs	r3, #12
 8013b5c:	6033      	str	r3, [r6, #0]
 8013b5e:	2000      	movs	r0, #0
 8013b60:	bd70      	pop	{r4, r5, r6, pc}
 8013b62:	680b      	ldr	r3, [r1, #0]
 8013b64:	1b5b      	subs	r3, r3, r5
 8013b66:	d419      	bmi.n	8013b9c <_malloc_r+0x94>
 8013b68:	2b0b      	cmp	r3, #11
 8013b6a:	d903      	bls.n	8013b74 <_malloc_r+0x6c>
 8013b6c:	600b      	str	r3, [r1, #0]
 8013b6e:	18cc      	adds	r4, r1, r3
 8013b70:	6025      	str	r5, [r4, #0]
 8013b72:	e003      	b.n	8013b7c <_malloc_r+0x74>
 8013b74:	684b      	ldr	r3, [r1, #4]
 8013b76:	428c      	cmp	r4, r1
 8013b78:	d10d      	bne.n	8013b96 <_malloc_r+0x8e>
 8013b7a:	6013      	str	r3, [r2, #0]
 8013b7c:	0030      	movs	r0, r6
 8013b7e:	f000 f8ba 	bl	8013cf6 <__malloc_unlock>
 8013b82:	0020      	movs	r0, r4
 8013b84:	2207      	movs	r2, #7
 8013b86:	300b      	adds	r0, #11
 8013b88:	1d23      	adds	r3, r4, #4
 8013b8a:	4390      	bics	r0, r2
 8013b8c:	1ac3      	subs	r3, r0, r3
 8013b8e:	d0e7      	beq.n	8013b60 <_malloc_r+0x58>
 8013b90:	425a      	negs	r2, r3
 8013b92:	50e2      	str	r2, [r4, r3]
 8013b94:	e7e4      	b.n	8013b60 <_malloc_r+0x58>
 8013b96:	6063      	str	r3, [r4, #4]
 8013b98:	000c      	movs	r4, r1
 8013b9a:	e7ef      	b.n	8013b7c <_malloc_r+0x74>
 8013b9c:	000c      	movs	r4, r1
 8013b9e:	6849      	ldr	r1, [r1, #4]
 8013ba0:	e7c3      	b.n	8013b2a <_malloc_r+0x22>
 8013ba2:	2303      	movs	r3, #3
 8013ba4:	1cc4      	adds	r4, r0, #3
 8013ba6:	439c      	bics	r4, r3
 8013ba8:	42a0      	cmp	r0, r4
 8013baa:	d0e1      	beq.n	8013b70 <_malloc_r+0x68>
 8013bac:	1a21      	subs	r1, r4, r0
 8013bae:	0030      	movs	r0, r6
 8013bb0:	f000 f808 	bl	8013bc4 <_sbrk_r>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d1db      	bne.n	8013b70 <_malloc_r+0x68>
 8013bb8:	e7c7      	b.n	8013b4a <_malloc_r+0x42>
 8013bba:	46c0      	nop			; (mov r8, r8)
 8013bbc:	20000628 	.word	0x20000628
 8013bc0:	2000062c 	.word	0x2000062c

08013bc4 <_sbrk_r>:
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	b570      	push	{r4, r5, r6, lr}
 8013bc8:	4c06      	ldr	r4, [pc, #24]	; (8013be4 <_sbrk_r+0x20>)
 8013bca:	0005      	movs	r5, r0
 8013bcc:	0008      	movs	r0, r1
 8013bce:	6023      	str	r3, [r4, #0]
 8013bd0:	f7ff fd00 	bl	80135d4 <_sbrk>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d103      	bne.n	8013be0 <_sbrk_r+0x1c>
 8013bd8:	6823      	ldr	r3, [r4, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d000      	beq.n	8013be0 <_sbrk_r+0x1c>
 8013bde:	602b      	str	r3, [r5, #0]
 8013be0:	bd70      	pop	{r4, r5, r6, pc}
 8013be2:	46c0      	nop			; (mov r8, r8)
 8013be4:	200006bc 	.word	0x200006bc

08013be8 <__sread>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	000c      	movs	r4, r1
 8013bec:	250e      	movs	r5, #14
 8013bee:	5f49      	ldrsh	r1, [r1, r5]
 8013bf0:	f000 f882 	bl	8013cf8 <_read_r>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	db03      	blt.n	8013c00 <__sread+0x18>
 8013bf8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013bfa:	181b      	adds	r3, r3, r0
 8013bfc:	6563      	str	r3, [r4, #84]	; 0x54
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}
 8013c00:	89a3      	ldrh	r3, [r4, #12]
 8013c02:	4a02      	ldr	r2, [pc, #8]	; (8013c0c <__sread+0x24>)
 8013c04:	4013      	ands	r3, r2
 8013c06:	81a3      	strh	r3, [r4, #12]
 8013c08:	e7f9      	b.n	8013bfe <__sread+0x16>
 8013c0a:	46c0      	nop			; (mov r8, r8)
 8013c0c:	ffffefff 	.word	0xffffefff

08013c10 <__swrite>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	001f      	movs	r7, r3
 8013c14:	898b      	ldrh	r3, [r1, #12]
 8013c16:	0005      	movs	r5, r0
 8013c18:	000c      	movs	r4, r1
 8013c1a:	0016      	movs	r6, r2
 8013c1c:	05db      	lsls	r3, r3, #23
 8013c1e:	d505      	bpl.n	8013c2c <__swrite+0x1c>
 8013c20:	230e      	movs	r3, #14
 8013c22:	5ec9      	ldrsh	r1, [r1, r3]
 8013c24:	2200      	movs	r2, #0
 8013c26:	2302      	movs	r3, #2
 8013c28:	f000 f850 	bl	8013ccc <_lseek_r>
 8013c2c:	89a3      	ldrh	r3, [r4, #12]
 8013c2e:	4a05      	ldr	r2, [pc, #20]	; (8013c44 <__swrite+0x34>)
 8013c30:	0028      	movs	r0, r5
 8013c32:	4013      	ands	r3, r2
 8013c34:	81a3      	strh	r3, [r4, #12]
 8013c36:	0032      	movs	r2, r6
 8013c38:	230e      	movs	r3, #14
 8013c3a:	5ee1      	ldrsh	r1, [r4, r3]
 8013c3c:	003b      	movs	r3, r7
 8013c3e:	f000 f81f 	bl	8013c80 <_write_r>
 8013c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c44:	ffffefff 	.word	0xffffefff

08013c48 <__sseek>:
 8013c48:	b570      	push	{r4, r5, r6, lr}
 8013c4a:	000c      	movs	r4, r1
 8013c4c:	250e      	movs	r5, #14
 8013c4e:	5f49      	ldrsh	r1, [r1, r5]
 8013c50:	f000 f83c 	bl	8013ccc <_lseek_r>
 8013c54:	89a3      	ldrh	r3, [r4, #12]
 8013c56:	1c42      	adds	r2, r0, #1
 8013c58:	d103      	bne.n	8013c62 <__sseek+0x1a>
 8013c5a:	4a05      	ldr	r2, [pc, #20]	; (8013c70 <__sseek+0x28>)
 8013c5c:	4013      	ands	r3, r2
 8013c5e:	81a3      	strh	r3, [r4, #12]
 8013c60:	bd70      	pop	{r4, r5, r6, pc}
 8013c62:	2280      	movs	r2, #128	; 0x80
 8013c64:	0152      	lsls	r2, r2, #5
 8013c66:	4313      	orrs	r3, r2
 8013c68:	81a3      	strh	r3, [r4, #12]
 8013c6a:	6560      	str	r0, [r4, #84]	; 0x54
 8013c6c:	e7f8      	b.n	8013c60 <__sseek+0x18>
 8013c6e:	46c0      	nop			; (mov r8, r8)
 8013c70:	ffffefff 	.word	0xffffefff

08013c74 <__sclose>:
 8013c74:	b510      	push	{r4, lr}
 8013c76:	230e      	movs	r3, #14
 8013c78:	5ec9      	ldrsh	r1, [r1, r3]
 8013c7a:	f000 f815 	bl	8013ca8 <_close_r>
 8013c7e:	bd10      	pop	{r4, pc}

08013c80 <_write_r>:
 8013c80:	b570      	push	{r4, r5, r6, lr}
 8013c82:	0005      	movs	r5, r0
 8013c84:	0008      	movs	r0, r1
 8013c86:	0011      	movs	r1, r2
 8013c88:	2200      	movs	r2, #0
 8013c8a:	4c06      	ldr	r4, [pc, #24]	; (8013ca4 <_write_r+0x24>)
 8013c8c:	6022      	str	r2, [r4, #0]
 8013c8e:	001a      	movs	r2, r3
 8013c90:	f7ff fc68 	bl	8013564 <_write>
 8013c94:	1c43      	adds	r3, r0, #1
 8013c96:	d103      	bne.n	8013ca0 <_write_r+0x20>
 8013c98:	6823      	ldr	r3, [r4, #0]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d000      	beq.n	8013ca0 <_write_r+0x20>
 8013c9e:	602b      	str	r3, [r5, #0]
 8013ca0:	bd70      	pop	{r4, r5, r6, pc}
 8013ca2:	46c0      	nop			; (mov r8, r8)
 8013ca4:	200006bc 	.word	0x200006bc

08013ca8 <_close_r>:
 8013ca8:	2300      	movs	r3, #0
 8013caa:	b570      	push	{r4, r5, r6, lr}
 8013cac:	4c06      	ldr	r4, [pc, #24]	; (8013cc8 <_close_r+0x20>)
 8013cae:	0005      	movs	r5, r0
 8013cb0:	0008      	movs	r0, r1
 8013cb2:	6023      	str	r3, [r4, #0]
 8013cb4:	f000 f834 	bl	8013d20 <_close>
 8013cb8:	1c43      	adds	r3, r0, #1
 8013cba:	d103      	bne.n	8013cc4 <_close_r+0x1c>
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d000      	beq.n	8013cc4 <_close_r+0x1c>
 8013cc2:	602b      	str	r3, [r5, #0]
 8013cc4:	bd70      	pop	{r4, r5, r6, pc}
 8013cc6:	46c0      	nop			; (mov r8, r8)
 8013cc8:	200006bc 	.word	0x200006bc

08013ccc <_lseek_r>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	0005      	movs	r5, r0
 8013cd0:	0008      	movs	r0, r1
 8013cd2:	0011      	movs	r1, r2
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4c06      	ldr	r4, [pc, #24]	; (8013cf0 <_lseek_r+0x24>)
 8013cd8:	6022      	str	r2, [r4, #0]
 8013cda:	001a      	movs	r2, r3
 8013cdc:	f000 f828 	bl	8013d30 <_lseek>
 8013ce0:	1c43      	adds	r3, r0, #1
 8013ce2:	d103      	bne.n	8013cec <_lseek_r+0x20>
 8013ce4:	6823      	ldr	r3, [r4, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d000      	beq.n	8013cec <_lseek_r+0x20>
 8013cea:	602b      	str	r3, [r5, #0]
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	46c0      	nop			; (mov r8, r8)
 8013cf0:	200006bc 	.word	0x200006bc

08013cf4 <__malloc_lock>:
 8013cf4:	4770      	bx	lr

08013cf6 <__malloc_unlock>:
 8013cf6:	4770      	bx	lr

08013cf8 <_read_r>:
 8013cf8:	b570      	push	{r4, r5, r6, lr}
 8013cfa:	0005      	movs	r5, r0
 8013cfc:	0008      	movs	r0, r1
 8013cfe:	0011      	movs	r1, r2
 8013d00:	2200      	movs	r2, #0
 8013d02:	4c06      	ldr	r4, [pc, #24]	; (8013d1c <_read_r+0x24>)
 8013d04:	6022      	str	r2, [r4, #0]
 8013d06:	001a      	movs	r2, r3
 8013d08:	f000 f81a 	bl	8013d40 <_read>
 8013d0c:	1c43      	adds	r3, r0, #1
 8013d0e:	d103      	bne.n	8013d18 <_read_r+0x20>
 8013d10:	6823      	ldr	r3, [r4, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d000      	beq.n	8013d18 <_read_r+0x20>
 8013d16:	602b      	str	r3, [r5, #0]
 8013d18:	bd70      	pop	{r4, r5, r6, pc}
 8013d1a:	46c0      	nop			; (mov r8, r8)
 8013d1c:	200006bc 	.word	0x200006bc

08013d20 <_close>:
 8013d20:	2258      	movs	r2, #88	; 0x58
 8013d22:	2001      	movs	r0, #1
 8013d24:	4b01      	ldr	r3, [pc, #4]	; (8013d2c <_close+0xc>)
 8013d26:	4240      	negs	r0, r0
 8013d28:	601a      	str	r2, [r3, #0]
 8013d2a:	4770      	bx	lr
 8013d2c:	200006bc 	.word	0x200006bc

08013d30 <_lseek>:
 8013d30:	2258      	movs	r2, #88	; 0x58
 8013d32:	2001      	movs	r0, #1
 8013d34:	4b01      	ldr	r3, [pc, #4]	; (8013d3c <_lseek+0xc>)
 8013d36:	4240      	negs	r0, r0
 8013d38:	601a      	str	r2, [r3, #0]
 8013d3a:	4770      	bx	lr
 8013d3c:	200006bc 	.word	0x200006bc

08013d40 <_read>:
 8013d40:	2258      	movs	r2, #88	; 0x58
 8013d42:	2001      	movs	r0, #1
 8013d44:	4b01      	ldr	r3, [pc, #4]	; (8013d4c <_read+0xc>)
 8013d46:	4240      	negs	r0, r0
 8013d48:	601a      	str	r2, [r3, #0]
 8013d4a:	4770      	bx	lr
 8013d4c:	200006bc 	.word	0x200006bc

08013d50 <cos>:
 8013d50:	b530      	push	{r4, r5, lr}
 8013d52:	4a20      	ldr	r2, [pc, #128]	; (8013dd4 <cos+0x84>)
 8013d54:	004b      	lsls	r3, r1, #1
 8013d56:	b087      	sub	sp, #28
 8013d58:	085b      	lsrs	r3, r3, #1
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	dd1c      	ble.n	8013d98 <cos+0x48>
 8013d5e:	4a1e      	ldr	r2, [pc, #120]	; (8013dd8 <cos+0x88>)
 8013d60:	4293      	cmp	r3, r2
 8013d62:	dd05      	ble.n	8013d70 <cos+0x20>
 8013d64:	0002      	movs	r2, r0
 8013d66:	000b      	movs	r3, r1
 8013d68:	f7fe ff0c 	bl	8012b84 <__aeabi_dsub>
 8013d6c:	b007      	add	sp, #28
 8013d6e:	bd30      	pop	{r4, r5, pc}
 8013d70:	aa02      	add	r2, sp, #8
 8013d72:	f000 f9db 	bl	801412c <__ieee754_rem_pio2>
 8013d76:	2303      	movs	r3, #3
 8013d78:	4018      	ands	r0, r3
 8013d7a:	9a04      	ldr	r2, [sp, #16]
 8013d7c:	9b05      	ldr	r3, [sp, #20]
 8013d7e:	2801      	cmp	r0, #1
 8013d80:	d00f      	beq.n	8013da2 <cos+0x52>
 8013d82:	2802      	cmp	r0, #2
 8013d84:	d01c      	beq.n	8013dc0 <cos+0x70>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d015      	beq.n	8013db6 <cos+0x66>
 8013d8a:	9802      	ldr	r0, [sp, #8]
 8013d8c:	9903      	ldr	r1, [sp, #12]
 8013d8e:	2401      	movs	r4, #1
 8013d90:	9400      	str	r4, [sp, #0]
 8013d92:	f001 fb7f 	bl	8015494 <__kernel_sin>
 8013d96:	e7e9      	b.n	8013d6c <cos+0x1c>
 8013d98:	2200      	movs	r2, #0
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	f000 fe00 	bl	80149a0 <__kernel_cos>
 8013da0:	e7e4      	b.n	8013d6c <cos+0x1c>
 8013da2:	9000      	str	r0, [sp, #0]
 8013da4:	9802      	ldr	r0, [sp, #8]
 8013da6:	9903      	ldr	r1, [sp, #12]
 8013da8:	f001 fb74 	bl	8015494 <__kernel_sin>
 8013dac:	2380      	movs	r3, #128	; 0x80
 8013dae:	061b      	lsls	r3, r3, #24
 8013db0:	469c      	mov	ip, r3
 8013db2:	4461      	add	r1, ip
 8013db4:	e7da      	b.n	8013d6c <cos+0x1c>
 8013db6:	9802      	ldr	r0, [sp, #8]
 8013db8:	9903      	ldr	r1, [sp, #12]
 8013dba:	f000 fdf1 	bl	80149a0 <__kernel_cos>
 8013dbe:	e7d5      	b.n	8013d6c <cos+0x1c>
 8013dc0:	9802      	ldr	r0, [sp, #8]
 8013dc2:	9903      	ldr	r1, [sp, #12]
 8013dc4:	f000 fdec 	bl	80149a0 <__kernel_cos>
 8013dc8:	2380      	movs	r3, #128	; 0x80
 8013dca:	061b      	lsls	r3, r3, #24
 8013dcc:	469c      	mov	ip, r3
 8013dce:	4461      	add	r1, ip
 8013dd0:	e7cc      	b.n	8013d6c <cos+0x1c>
 8013dd2:	46c0      	nop			; (mov r8, r8)
 8013dd4:	3fe921fb 	.word	0x3fe921fb
 8013dd8:	7fefffff 	.word	0x7fefffff

08013ddc <fmaxf>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	1c04      	adds	r4, r0, #0
 8013de0:	1c0d      	adds	r5, r1, #0
 8013de2:	f000 f811 	bl	8013e08 <__fpclassifyf>
 8013de6:	2800      	cmp	r0, #0
 8013de8:	d102      	bne.n	8013df0 <fmaxf+0x14>
 8013dea:	1c2c      	adds	r4, r5, #0
 8013dec:	1c20      	adds	r0, r4, #0
 8013dee:	bd70      	pop	{r4, r5, r6, pc}
 8013df0:	1c28      	adds	r0, r5, #0
 8013df2:	f000 f809 	bl	8013e08 <__fpclassifyf>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d0f8      	beq.n	8013dec <fmaxf+0x10>
 8013dfa:	1c29      	adds	r1, r5, #0
 8013dfc:	1c20      	adds	r0, r4, #0
 8013dfe:	f7fd fa95 	bl	801132c <__aeabi_fcmpgt>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	d0f1      	beq.n	8013dea <fmaxf+0xe>
 8013e06:	e7f1      	b.n	8013dec <fmaxf+0x10>

08013e08 <__fpclassifyf>:
 8013e08:	0040      	lsls	r0, r0, #1
 8013e0a:	0840      	lsrs	r0, r0, #1
 8013e0c:	d00e      	beq.n	8013e2c <__fpclassifyf+0x24>
 8013e0e:	4b0a      	ldr	r3, [pc, #40]	; (8013e38 <__fpclassifyf+0x30>)
 8013e10:	4a0a      	ldr	r2, [pc, #40]	; (8013e3c <__fpclassifyf+0x34>)
 8013e12:	18c3      	adds	r3, r0, r3
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d90b      	bls.n	8013e30 <__fpclassifyf+0x28>
 8013e18:	4a09      	ldr	r2, [pc, #36]	; (8013e40 <__fpclassifyf+0x38>)
 8013e1a:	1e43      	subs	r3, r0, #1
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	d909      	bls.n	8013e34 <__fpclassifyf+0x2c>
 8013e20:	4b08      	ldr	r3, [pc, #32]	; (8013e44 <__fpclassifyf+0x3c>)
 8013e22:	469c      	mov	ip, r3
 8013e24:	4460      	add	r0, ip
 8013e26:	4243      	negs	r3, r0
 8013e28:	4158      	adcs	r0, r3
 8013e2a:	4770      	bx	lr
 8013e2c:	2002      	movs	r0, #2
 8013e2e:	e7fc      	b.n	8013e2a <__fpclassifyf+0x22>
 8013e30:	2004      	movs	r0, #4
 8013e32:	e7fa      	b.n	8013e2a <__fpclassifyf+0x22>
 8013e34:	2003      	movs	r0, #3
 8013e36:	e7f8      	b.n	8013e2a <__fpclassifyf+0x22>
 8013e38:	ff800000 	.word	0xff800000
 8013e3c:	7effffff 	.word	0x7effffff
 8013e40:	007ffffe 	.word	0x007ffffe
 8013e44:	80800000 	.word	0x80800000

08013e48 <roundf>:
 8013e48:	0043      	lsls	r3, r0, #1
 8013e4a:	0e1b      	lsrs	r3, r3, #24
 8013e4c:	3b7f      	subs	r3, #127	; 0x7f
 8013e4e:	b510      	push	{r4, lr}
 8013e50:	1c01      	adds	r1, r0, #0
 8013e52:	2b16      	cmp	r3, #22
 8013e54:	dc0b      	bgt.n	8013e6e <roundf+0x26>
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	db0e      	blt.n	8013e78 <roundf+0x30>
 8013e5a:	4c0b      	ldr	r4, [pc, #44]	; (8013e88 <roundf+0x40>)
 8013e5c:	411c      	asrs	r4, r3
 8013e5e:	4204      	tst	r4, r0
 8013e60:	d004      	beq.n	8013e6c <roundf+0x24>
 8013e62:	2280      	movs	r2, #128	; 0x80
 8013e64:	03d2      	lsls	r2, r2, #15
 8013e66:	411a      	asrs	r2, r3
 8013e68:	1810      	adds	r0, r2, r0
 8013e6a:	43a0      	bics	r0, r4
 8013e6c:	bd10      	pop	{r4, pc}
 8013e6e:	2b80      	cmp	r3, #128	; 0x80
 8013e70:	d1fc      	bne.n	8013e6c <roundf+0x24>
 8013e72:	f7fc faa3 	bl	80103bc <__aeabi_fadd>
 8013e76:	e7f9      	b.n	8013e6c <roundf+0x24>
 8013e78:	0fc0      	lsrs	r0, r0, #31
 8013e7a:	07c0      	lsls	r0, r0, #31
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	d1f5      	bne.n	8013e6c <roundf+0x24>
 8013e80:	23fe      	movs	r3, #254	; 0xfe
 8013e82:	059b      	lsls	r3, r3, #22
 8013e84:	4318      	orrs	r0, r3
 8013e86:	e7f1      	b.n	8013e6c <roundf+0x24>
 8013e88:	007fffff 	.word	0x007fffff

08013e8c <sqrt>:
 8013e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e8e:	4647      	mov	r7, r8
 8013e90:	46ce      	mov	lr, r9
 8013e92:	b580      	push	{r7, lr}
 8013e94:	b08d      	sub	sp, #52	; 0x34
 8013e96:	0004      	movs	r4, r0
 8013e98:	000d      	movs	r5, r1
 8013e9a:	f000 fb57 	bl	801454c <__ieee754_sqrt>
 8013e9e:	4b29      	ldr	r3, [pc, #164]	; (8013f44 <sqrt+0xb8>)
 8013ea0:	0006      	movs	r6, r0
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	000f      	movs	r7, r1
 8013ea6:	b25b      	sxtb	r3, r3
 8013ea8:	4698      	mov	r8, r3
 8013eaa:	3301      	adds	r3, #1
 8013eac:	d010      	beq.n	8013ed0 <sqrt+0x44>
 8013eae:	0022      	movs	r2, r4
 8013eb0:	002b      	movs	r3, r5
 8013eb2:	0020      	movs	r0, r4
 8013eb4:	0029      	movs	r1, r5
 8013eb6:	f7ff f9ad 	bl	8013214 <__aeabi_dcmpun>
 8013eba:	4681      	mov	r9, r0
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d107      	bne.n	8013ed0 <sqrt+0x44>
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	0020      	movs	r0, r4
 8013ec6:	0029      	movs	r1, r5
 8013ec8:	f7fd f9e2 	bl	8011290 <__aeabi_dcmplt>
 8013ecc:	2800      	cmp	r0, #0
 8013ece:	d106      	bne.n	8013ede <sqrt+0x52>
 8013ed0:	0030      	movs	r0, r6
 8013ed2:	0039      	movs	r1, r7
 8013ed4:	b00d      	add	sp, #52	; 0x34
 8013ed6:	bc0c      	pop	{r2, r3}
 8013ed8:	4690      	mov	r8, r2
 8013eda:	4699      	mov	r9, r3
 8013edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ede:	2301      	movs	r3, #1
 8013ee0:	9302      	str	r3, [sp, #8]
 8013ee2:	4b19      	ldr	r3, [pc, #100]	; (8013f48 <sqrt+0xbc>)
 8013ee4:	9406      	str	r4, [sp, #24]
 8013ee6:	9507      	str	r5, [sp, #28]
 8013ee8:	9303      	str	r3, [sp, #12]
 8013eea:	464b      	mov	r3, r9
 8013eec:	930a      	str	r3, [sp, #40]	; 0x28
 8013eee:	4643      	mov	r3, r8
 8013ef0:	9404      	str	r4, [sp, #16]
 8013ef2:	9505      	str	r5, [sp, #20]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d015      	beq.n	8013f24 <sqrt+0x98>
 8013ef8:	2300      	movs	r3, #0
 8013efa:	2200      	movs	r2, #0
 8013efc:	0019      	movs	r1, r3
 8013efe:	0010      	movs	r0, r2
 8013f00:	f7fd ffc4 	bl	8011e8c <__aeabi_ddiv>
 8013f04:	4643      	mov	r3, r8
 8013f06:	9008      	str	r0, [sp, #32]
 8013f08:	9109      	str	r1, [sp, #36]	; 0x24
 8013f0a:	2b02      	cmp	r3, #2
 8013f0c:	d10e      	bne.n	8013f2c <sqrt+0xa0>
 8013f0e:	f7ff fbdf 	bl	80136d0 <__errno>
 8013f12:	2321      	movs	r3, #33	; 0x21
 8013f14:	6003      	str	r3, [r0, #0]
 8013f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d10c      	bne.n	8013f38 <sqrt+0xac>
 8013f1e:	9e08      	ldr	r6, [sp, #32]
 8013f20:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013f22:	e7d5      	b.n	8013ed0 <sqrt+0x44>
 8013f24:	2300      	movs	r3, #0
 8013f26:	2400      	movs	r4, #0
 8013f28:	9308      	str	r3, [sp, #32]
 8013f2a:	9409      	str	r4, [sp, #36]	; 0x24
 8013f2c:	a802      	add	r0, sp, #8
 8013f2e:	f001 fc03 	bl	8015738 <matherr>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d1ef      	bne.n	8013f16 <sqrt+0x8a>
 8013f36:	e7ea      	b.n	8013f0e <sqrt+0x82>
 8013f38:	f7ff fbca 	bl	80136d0 <__errno>
 8013f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f3e:	9301      	str	r3, [sp, #4]
 8013f40:	6003      	str	r3, [r0, #0]
 8013f42:	e7ec      	b.n	8013f1e <sqrt+0x92>
 8013f44:	2000006c 	.word	0x2000006c
 8013f48:	0801f584 	.word	0x0801f584

08013f4c <expf>:
 8013f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4e:	b08b      	sub	sp, #44	; 0x2c
 8013f50:	1c04      	adds	r4, r0, #0
 8013f52:	f000 fbd3 	bl	80146fc <__ieee754_expf>
 8013f56:	2300      	movs	r3, #0
 8013f58:	4e30      	ldr	r6, [pc, #192]	; (801401c <expf+0xd0>)
 8013f5a:	1c05      	adds	r5, r0, #0
 8013f5c:	56f3      	ldrsb	r3, [r6, r3]
 8013f5e:	3301      	adds	r3, #1
 8013f60:	d036      	beq.n	8013fd0 <expf+0x84>
 8013f62:	1c20      	adds	r0, r4, #0
 8013f64:	f001 fc58 	bl	8015818 <finitef>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d031      	beq.n	8013fd0 <expf+0x84>
 8013f6c:	492c      	ldr	r1, [pc, #176]	; (8014020 <expf+0xd4>)
 8013f6e:	1c20      	adds	r0, r4, #0
 8013f70:	f7fd f9dc 	bl	801132c <__aeabi_fcmpgt>
 8013f74:	1e07      	subs	r7, r0, #0
 8013f76:	d12e      	bne.n	8013fd6 <expf+0x8a>
 8013f78:	492a      	ldr	r1, [pc, #168]	; (8014024 <expf+0xd8>)
 8013f7a:	1c20      	adds	r0, r4, #0
 8013f7c:	f7fd f9c2 	bl	8011304 <__aeabi_fcmplt>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d025      	beq.n	8013fd0 <expf+0x84>
 8013f84:	2304      	movs	r3, #4
 8013f86:	466d      	mov	r5, sp
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	4b27      	ldr	r3, [pc, #156]	; (8014028 <expf+0xdc>)
 8013f8c:	622f      	str	r7, [r5, #32]
 8013f8e:	606b      	str	r3, [r5, #4]
 8013f90:	1c20      	adds	r0, r4, #0
 8013f92:	f7ff f9fd 	bl	8013390 <__aeabi_f2d>
 8013f96:	2300      	movs	r3, #0
 8013f98:	2200      	movs	r2, #0
 8013f9a:	61aa      	str	r2, [r5, #24]
 8013f9c:	61eb      	str	r3, [r5, #28]
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	56f3      	ldrsb	r3, [r6, r3]
 8013fa2:	6128      	str	r0, [r5, #16]
 8013fa4:	6169      	str	r1, [r5, #20]
 8013fa6:	60a8      	str	r0, [r5, #8]
 8013fa8:	60e9      	str	r1, [r5, #12]
 8013faa:	2b02      	cmp	r3, #2
 8013fac:	d031      	beq.n	8014012 <expf+0xc6>
 8013fae:	0028      	movs	r0, r5
 8013fb0:	f001 fbc2 	bl	8015738 <matherr>
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	d02c      	beq.n	8014012 <expf+0xc6>
 8013fb8:	6a2b      	ldr	r3, [r5, #32]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d003      	beq.n	8013fc6 <expf+0x7a>
 8013fbe:	f7ff fb87 	bl	80136d0 <__errno>
 8013fc2:	6a2b      	ldr	r3, [r5, #32]
 8013fc4:	6003      	str	r3, [r0, #0]
 8013fc6:	69a8      	ldr	r0, [r5, #24]
 8013fc8:	69e9      	ldr	r1, [r5, #28]
 8013fca:	f7ff fa33 	bl	8013434 <__aeabi_d2f>
 8013fce:	1c05      	adds	r5, r0, #0
 8013fd0:	1c28      	adds	r0, r5, #0
 8013fd2:	b00b      	add	sp, #44	; 0x2c
 8013fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fd6:	2303      	movs	r3, #3
 8013fd8:	466d      	mov	r5, sp
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	4b12      	ldr	r3, [pc, #72]	; (8014028 <expf+0xdc>)
 8013fde:	1c20      	adds	r0, r4, #0
 8013fe0:	606b      	str	r3, [r5, #4]
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	622b      	str	r3, [r5, #32]
 8013fe6:	f7ff f9d3 	bl	8013390 <__aeabi_f2d>
 8013fea:	2300      	movs	r3, #0
 8013fec:	56f3      	ldrsb	r3, [r6, r3]
 8013fee:	6128      	str	r0, [r5, #16]
 8013ff0:	6169      	str	r1, [r5, #20]
 8013ff2:	60a8      	str	r0, [r5, #8]
 8013ff4:	60e9      	str	r1, [r5, #12]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d105      	bne.n	8014006 <expf+0xba>
 8013ffa:	22e0      	movs	r2, #224	; 0xe0
 8013ffc:	4b0b      	ldr	r3, [pc, #44]	; (801402c <expf+0xe0>)
 8013ffe:	0612      	lsls	r2, r2, #24
 8014000:	61aa      	str	r2, [r5, #24]
 8014002:	61eb      	str	r3, [r5, #28]
 8014004:	e7d3      	b.n	8013fae <expf+0x62>
 8014006:	2000      	movs	r0, #0
 8014008:	4909      	ldr	r1, [pc, #36]	; (8014030 <expf+0xe4>)
 801400a:	61a8      	str	r0, [r5, #24]
 801400c:	61e9      	str	r1, [r5, #28]
 801400e:	2b02      	cmp	r3, #2
 8014010:	d1cd      	bne.n	8013fae <expf+0x62>
 8014012:	f7ff fb5d 	bl	80136d0 <__errno>
 8014016:	2322      	movs	r3, #34	; 0x22
 8014018:	6003      	str	r3, [r0, #0]
 801401a:	e7cd      	b.n	8013fb8 <expf+0x6c>
 801401c:	2000006c 	.word	0x2000006c
 8014020:	42b17180 	.word	0x42b17180
 8014024:	c2cff1b5 	.word	0xc2cff1b5
 8014028:	0801f58c 	.word	0x0801f58c
 801402c:	47efffff 	.word	0x47efffff
 8014030:	7ff00000 	.word	0x7ff00000

08014034 <log10f>:
 8014034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014036:	2500      	movs	r5, #0
 8014038:	b08d      	sub	sp, #52	; 0x34
 801403a:	1c04      	adds	r4, r0, #0
 801403c:	f000 fc58 	bl	80148f0 <__ieee754_log10f>
 8014040:	4b35      	ldr	r3, [pc, #212]	; (8014118 <log10f+0xe4>)
 8014042:	1c06      	adds	r6, r0, #0
 8014044:	575d      	ldrsb	r5, [r3, r5]
 8014046:	1c6b      	adds	r3, r5, #1
 8014048:	d00b      	beq.n	8014062 <log10f+0x2e>
 801404a:	1c21      	adds	r1, r4, #0
 801404c:	1c20      	adds	r0, r4, #0
 801404e:	f7fd fb41 	bl	80116d4 <__aeabi_fcmpun>
 8014052:	1e07      	subs	r7, r0, #0
 8014054:	d105      	bne.n	8014062 <log10f+0x2e>
 8014056:	2100      	movs	r1, #0
 8014058:	1c20      	adds	r0, r4, #0
 801405a:	f7fd f95d 	bl	8011318 <__aeabi_fcmple>
 801405e:	2800      	cmp	r0, #0
 8014060:	d102      	bne.n	8014068 <log10f+0x34>
 8014062:	1c30      	adds	r0, r6, #0
 8014064:	b00d      	add	sp, #52	; 0x34
 8014066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014068:	4b2c      	ldr	r3, [pc, #176]	; (801411c <log10f+0xe8>)
 801406a:	1c20      	adds	r0, r4, #0
 801406c:	9303      	str	r3, [sp, #12]
 801406e:	970a      	str	r7, [sp, #40]	; 0x28
 8014070:	f7ff f98e 	bl	8013390 <__aeabi_f2d>
 8014074:	9006      	str	r0, [sp, #24]
 8014076:	9107      	str	r1, [sp, #28]
 8014078:	9004      	str	r0, [sp, #16]
 801407a:	9105      	str	r1, [sp, #20]
 801407c:	2d00      	cmp	r5, #0
 801407e:	d11b      	bne.n	80140b8 <log10f+0x84>
 8014080:	22e0      	movs	r2, #224	; 0xe0
 8014082:	4b27      	ldr	r3, [pc, #156]	; (8014120 <log10f+0xec>)
 8014084:	0612      	lsls	r2, r2, #24
 8014086:	2100      	movs	r1, #0
 8014088:	1c20      	adds	r0, r4, #0
 801408a:	9208      	str	r2, [sp, #32]
 801408c:	9309      	str	r3, [sp, #36]	; 0x24
 801408e:	f7fd f933 	bl	80112f8 <__aeabi_fcmpeq>
 8014092:	2800      	cmp	r0, #0
 8014094:	d037      	beq.n	8014106 <log10f+0xd2>
 8014096:	2302      	movs	r3, #2
 8014098:	9302      	str	r3, [sp, #8]
 801409a:	a802      	add	r0, sp, #8
 801409c:	f001 fb4c 	bl	8015738 <matherr>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d017      	beq.n	80140d4 <log10f+0xa0>
 80140a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140a6:	9301      	str	r3, [sp, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d118      	bne.n	80140de <log10f+0xaa>
 80140ac:	9808      	ldr	r0, [sp, #32]
 80140ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140b0:	f7ff f9c0 	bl	8013434 <__aeabi_d2f>
 80140b4:	1c06      	adds	r6, r0, #0
 80140b6:	e7d4      	b.n	8014062 <log10f+0x2e>
 80140b8:	2200      	movs	r2, #0
 80140ba:	4b1a      	ldr	r3, [pc, #104]	; (8014124 <log10f+0xf0>)
 80140bc:	2100      	movs	r1, #0
 80140be:	1c20      	adds	r0, r4, #0
 80140c0:	9208      	str	r2, [sp, #32]
 80140c2:	9309      	str	r3, [sp, #36]	; 0x24
 80140c4:	f7fd f918 	bl	80112f8 <__aeabi_fcmpeq>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	d00e      	beq.n	80140ea <log10f+0xb6>
 80140cc:	2302      	movs	r3, #2
 80140ce:	9302      	str	r3, [sp, #8]
 80140d0:	2d02      	cmp	r5, #2
 80140d2:	d1e2      	bne.n	801409a <log10f+0x66>
 80140d4:	f7ff fafc 	bl	80136d0 <__errno>
 80140d8:	2322      	movs	r3, #34	; 0x22
 80140da:	6003      	str	r3, [r0, #0]
 80140dc:	e7e2      	b.n	80140a4 <log10f+0x70>
 80140de:	f7ff faf7 	bl	80136d0 <__errno>
 80140e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140e4:	9301      	str	r3, [sp, #4]
 80140e6:	6003      	str	r3, [r0, #0]
 80140e8:	e7e0      	b.n	80140ac <log10f+0x78>
 80140ea:	2301      	movs	r3, #1
 80140ec:	9302      	str	r3, [sp, #8]
 80140ee:	2d02      	cmp	r5, #2
 80140f0:	d10b      	bne.n	801410a <log10f+0xd6>
 80140f2:	f7ff faed 	bl	80136d0 <__errno>
 80140f6:	2321      	movs	r3, #33	; 0x21
 80140f8:	6003      	str	r3, [r0, #0]
 80140fa:	480b      	ldr	r0, [pc, #44]	; (8014128 <log10f+0xf4>)
 80140fc:	f001 fb1e 	bl	801573c <nan>
 8014100:	9008      	str	r0, [sp, #32]
 8014102:	9109      	str	r1, [sp, #36]	; 0x24
 8014104:	e7ce      	b.n	80140a4 <log10f+0x70>
 8014106:	2301      	movs	r3, #1
 8014108:	9302      	str	r3, [sp, #8]
 801410a:	a802      	add	r0, sp, #8
 801410c:	f001 fb14 	bl	8015738 <matherr>
 8014110:	2800      	cmp	r0, #0
 8014112:	d1f2      	bne.n	80140fa <log10f+0xc6>
 8014114:	e7ed      	b.n	80140f2 <log10f+0xbe>
 8014116:	46c0      	nop			; (mov r8, r8)
 8014118:	2000006c 	.word	0x2000006c
 801411c:	0801f594 	.word	0x0801f594
 8014120:	c7efffff 	.word	0xc7efffff
 8014124:	fff00000 	.word	0xfff00000
 8014128:	0801e964 	.word	0x0801e964

0801412c <__ieee754_rem_pio2>:
 801412c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801412e:	464e      	mov	r6, r9
 8014130:	4645      	mov	r5, r8
 8014132:	46de      	mov	lr, fp
 8014134:	4657      	mov	r7, sl
 8014136:	b5e0      	push	{r5, r6, r7, lr}
 8014138:	4be1      	ldr	r3, [pc, #900]	; (80144c0 <__ieee754_rem_pio2+0x394>)
 801413a:	004c      	lsls	r4, r1, #1
 801413c:	b08f      	sub	sp, #60	; 0x3c
 801413e:	4690      	mov	r8, r2
 8014140:	4689      	mov	r9, r1
 8014142:	0864      	lsrs	r4, r4, #1
 8014144:	429c      	cmp	r4, r3
 8014146:	dc00      	bgt.n	801414a <__ieee754_rem_pio2+0x1e>
 8014148:	e087      	b.n	801425a <__ieee754_rem_pio2+0x12e>
 801414a:	4bde      	ldr	r3, [pc, #888]	; (80144c4 <__ieee754_rem_pio2+0x398>)
 801414c:	429c      	cmp	r4, r3
 801414e:	dc22      	bgt.n	8014196 <__ieee754_rem_pio2+0x6a>
 8014150:	4add      	ldr	r2, [pc, #884]	; (80144c8 <__ieee754_rem_pio2+0x39c>)
 8014152:	2900      	cmp	r1, #0
 8014154:	dc00      	bgt.n	8014158 <__ieee754_rem_pio2+0x2c>
 8014156:	e092      	b.n	801427e <__ieee754_rem_pio2+0x152>
 8014158:	4bdc      	ldr	r3, [pc, #880]	; (80144cc <__ieee754_rem_pio2+0x3a0>)
 801415a:	f7fe fd13 	bl	8012b84 <__aeabi_dsub>
 801415e:	4bdb      	ldr	r3, [pc, #876]	; (80144cc <__ieee754_rem_pio2+0x3a0>)
 8014160:	0006      	movs	r6, r0
 8014162:	000f      	movs	r7, r1
 8014164:	429c      	cmp	r4, r3
 8014166:	d100      	bne.n	801416a <__ieee754_rem_pio2+0x3e>
 8014168:	e17e      	b.n	8014468 <__ieee754_rem_pio2+0x33c>
 801416a:	4ad9      	ldr	r2, [pc, #868]	; (80144d0 <__ieee754_rem_pio2+0x3a4>)
 801416c:	4bd9      	ldr	r3, [pc, #868]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 801416e:	f7fe fd09 	bl	8012b84 <__aeabi_dsub>
 8014172:	0002      	movs	r2, r0
 8014174:	000b      	movs	r3, r1
 8014176:	4641      	mov	r1, r8
 8014178:	0030      	movs	r0, r6
 801417a:	600a      	str	r2, [r1, #0]
 801417c:	604b      	str	r3, [r1, #4]
 801417e:	0039      	movs	r1, r7
 8014180:	f7fe fd00 	bl	8012b84 <__aeabi_dsub>
 8014184:	4bd3      	ldr	r3, [pc, #844]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 8014186:	4ad2      	ldr	r2, [pc, #840]	; (80144d0 <__ieee754_rem_pio2+0x3a4>)
 8014188:	f7fe fcfc 	bl	8012b84 <__aeabi_dsub>
 801418c:	4643      	mov	r3, r8
 801418e:	2501      	movs	r5, #1
 8014190:	6098      	str	r0, [r3, #8]
 8014192:	60d9      	str	r1, [r3, #12]
 8014194:	e06b      	b.n	801426e <__ieee754_rem_pio2+0x142>
 8014196:	4bd0      	ldr	r3, [pc, #832]	; (80144d8 <__ieee754_rem_pio2+0x3ac>)
 8014198:	429c      	cmp	r4, r3
 801419a:	dc00      	bgt.n	801419e <__ieee754_rem_pio2+0x72>
 801419c:	e08f      	b.n	80142be <__ieee754_rem_pio2+0x192>
 801419e:	4bcf      	ldr	r3, [pc, #828]	; (80144dc <__ieee754_rem_pio2+0x3b0>)
 80141a0:	429c      	cmp	r4, r3
 80141a2:	dd00      	ble.n	80141a6 <__ieee754_rem_pio2+0x7a>
 80141a4:	e155      	b.n	8014452 <__ieee754_rem_pio2+0x326>
 80141a6:	4ace      	ldr	r2, [pc, #824]	; (80144e0 <__ieee754_rem_pio2+0x3b4>)
 80141a8:	1523      	asrs	r3, r4, #20
 80141aa:	4692      	mov	sl, r2
 80141ac:	449a      	add	sl, r3
 80141ae:	4651      	mov	r1, sl
 80141b0:	0509      	lsls	r1, r1, #20
 80141b2:	1a63      	subs	r3, r4, r1
 80141b4:	0019      	movs	r1, r3
 80141b6:	001d      	movs	r5, r3
 80141b8:	0004      	movs	r4, r0
 80141ba:	f7ff f847 	bl	801324c <__aeabi_d2iz>
 80141be:	f7ff f87b 	bl	80132b8 <__aeabi_i2d>
 80141c2:	0002      	movs	r2, r0
 80141c4:	000b      	movs	r3, r1
 80141c6:	0020      	movs	r0, r4
 80141c8:	0029      	movs	r1, r5
 80141ca:	9208      	str	r2, [sp, #32]
 80141cc:	9309      	str	r3, [sp, #36]	; 0x24
 80141ce:	f7fe fcd9 	bl	8012b84 <__aeabi_dsub>
 80141d2:	2200      	movs	r2, #0
 80141d4:	4bc3      	ldr	r3, [pc, #780]	; (80144e4 <__ieee754_rem_pio2+0x3b8>)
 80141d6:	f7fe fa63 	bl	80126a0 <__aeabi_dmul>
 80141da:	000f      	movs	r7, r1
 80141dc:	0006      	movs	r6, r0
 80141de:	f7ff f835 	bl	801324c <__aeabi_d2iz>
 80141e2:	f7ff f869 	bl	80132b8 <__aeabi_i2d>
 80141e6:	0004      	movs	r4, r0
 80141e8:	000d      	movs	r5, r1
 80141ea:	0002      	movs	r2, r0
 80141ec:	000b      	movs	r3, r1
 80141ee:	0030      	movs	r0, r6
 80141f0:	0039      	movs	r1, r7
 80141f2:	940a      	str	r4, [sp, #40]	; 0x28
 80141f4:	950b      	str	r5, [sp, #44]	; 0x2c
 80141f6:	f7fe fcc5 	bl	8012b84 <__aeabi_dsub>
 80141fa:	2200      	movs	r2, #0
 80141fc:	4bb9      	ldr	r3, [pc, #740]	; (80144e4 <__ieee754_rem_pio2+0x3b8>)
 80141fe:	f7fe fa4f 	bl	80126a0 <__aeabi_dmul>
 8014202:	2200      	movs	r2, #0
 8014204:	2300      	movs	r3, #0
 8014206:	900c      	str	r0, [sp, #48]	; 0x30
 8014208:	910d      	str	r1, [sp, #52]	; 0x34
 801420a:	f7fd f83b 	bl	8011284 <__aeabi_dcmpeq>
 801420e:	2800      	cmp	r0, #0
 8014210:	d100      	bne.n	8014214 <__ieee754_rem_pio2+0xe8>
 8014212:	e192      	b.n	801453a <__ieee754_rem_pio2+0x40e>
 8014214:	2300      	movs	r3, #0
 8014216:	2200      	movs	r2, #0
 8014218:	0020      	movs	r0, r4
 801421a:	0029      	movs	r1, r5
 801421c:	f7fd f832 	bl	8011284 <__aeabi_dcmpeq>
 8014220:	4243      	negs	r3, r0
 8014222:	4143      	adcs	r3, r0
 8014224:	3301      	adds	r3, #1
 8014226:	4ab0      	ldr	r2, [pc, #704]	; (80144e8 <__ieee754_rem_pio2+0x3bc>)
 8014228:	4641      	mov	r1, r8
 801422a:	9201      	str	r2, [sp, #4]
 801422c:	2202      	movs	r2, #2
 801422e:	a808      	add	r0, sp, #32
 8014230:	9200      	str	r2, [sp, #0]
 8014232:	4652      	mov	r2, sl
 8014234:	f000 fcce 	bl	8014bd4 <__kernel_rem_pio2>
 8014238:	464b      	mov	r3, r9
 801423a:	0005      	movs	r5, r0
 801423c:	2b00      	cmp	r3, #0
 801423e:	da16      	bge.n	801426e <__ieee754_rem_pio2+0x142>
 8014240:	2280      	movs	r2, #128	; 0x80
 8014242:	4643      	mov	r3, r8
 8014244:	0612      	lsls	r2, r2, #24
 8014246:	4694      	mov	ip, r2
 8014248:	4642      	mov	r2, r8
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	4245      	negs	r5, r0
 801424e:	4463      	add	r3, ip
 8014250:	6053      	str	r3, [r2, #4]
 8014252:	68d3      	ldr	r3, [r2, #12]
 8014254:	4463      	add	r3, ip
 8014256:	60d3      	str	r3, [r2, #12]
 8014258:	e009      	b.n	801426e <__ieee754_rem_pio2+0x142>
 801425a:	000b      	movs	r3, r1
 801425c:	0002      	movs	r2, r0
 801425e:	4641      	mov	r1, r8
 8014260:	600a      	str	r2, [r1, #0]
 8014262:	604b      	str	r3, [r1, #4]
 8014264:	2200      	movs	r2, #0
 8014266:	2300      	movs	r3, #0
 8014268:	2500      	movs	r5, #0
 801426a:	608a      	str	r2, [r1, #8]
 801426c:	60cb      	str	r3, [r1, #12]
 801426e:	0028      	movs	r0, r5
 8014270:	b00f      	add	sp, #60	; 0x3c
 8014272:	bc3c      	pop	{r2, r3, r4, r5}
 8014274:	4690      	mov	r8, r2
 8014276:	4699      	mov	r9, r3
 8014278:	46a2      	mov	sl, r4
 801427a:	46ab      	mov	fp, r5
 801427c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801427e:	4b93      	ldr	r3, [pc, #588]	; (80144cc <__ieee754_rem_pio2+0x3a0>)
 8014280:	f7fd fae8 	bl	8011854 <__aeabi_dadd>
 8014284:	4b91      	ldr	r3, [pc, #580]	; (80144cc <__ieee754_rem_pio2+0x3a0>)
 8014286:	0006      	movs	r6, r0
 8014288:	000f      	movs	r7, r1
 801428a:	429c      	cmp	r4, r3
 801428c:	d100      	bne.n	8014290 <__ieee754_rem_pio2+0x164>
 801428e:	e13d      	b.n	801450c <__ieee754_rem_pio2+0x3e0>
 8014290:	4a8f      	ldr	r2, [pc, #572]	; (80144d0 <__ieee754_rem_pio2+0x3a4>)
 8014292:	4b90      	ldr	r3, [pc, #576]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 8014294:	f7fd fade 	bl	8011854 <__aeabi_dadd>
 8014298:	0002      	movs	r2, r0
 801429a:	000b      	movs	r3, r1
 801429c:	4641      	mov	r1, r8
 801429e:	0030      	movs	r0, r6
 80142a0:	600a      	str	r2, [r1, #0]
 80142a2:	604b      	str	r3, [r1, #4]
 80142a4:	0039      	movs	r1, r7
 80142a6:	f7fe fc6d 	bl	8012b84 <__aeabi_dsub>
 80142aa:	4a89      	ldr	r2, [pc, #548]	; (80144d0 <__ieee754_rem_pio2+0x3a4>)
 80142ac:	4b89      	ldr	r3, [pc, #548]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 80142ae:	f7fd fad1 	bl	8011854 <__aeabi_dadd>
 80142b2:	2501      	movs	r5, #1
 80142b4:	4643      	mov	r3, r8
 80142b6:	426d      	negs	r5, r5
 80142b8:	6098      	str	r0, [r3, #8]
 80142ba:	60d9      	str	r1, [r3, #12]
 80142bc:	e7d7      	b.n	801426e <__ieee754_rem_pio2+0x142>
 80142be:	f001 f99b 	bl	80155f8 <fabs>
 80142c2:	4a8a      	ldr	r2, [pc, #552]	; (80144ec <__ieee754_rem_pio2+0x3c0>)
 80142c4:	4b8a      	ldr	r3, [pc, #552]	; (80144f0 <__ieee754_rem_pio2+0x3c4>)
 80142c6:	0006      	movs	r6, r0
 80142c8:	000f      	movs	r7, r1
 80142ca:	f7fe f9e9 	bl	80126a0 <__aeabi_dmul>
 80142ce:	2200      	movs	r2, #0
 80142d0:	4b88      	ldr	r3, [pc, #544]	; (80144f4 <__ieee754_rem_pio2+0x3c8>)
 80142d2:	f7fd fabf 	bl	8011854 <__aeabi_dadd>
 80142d6:	f7fe ffb9 	bl	801324c <__aeabi_d2iz>
 80142da:	0005      	movs	r5, r0
 80142dc:	f7fe ffec 	bl	80132b8 <__aeabi_i2d>
 80142e0:	4a79      	ldr	r2, [pc, #484]	; (80144c8 <__ieee754_rem_pio2+0x39c>)
 80142e2:	4b7a      	ldr	r3, [pc, #488]	; (80144cc <__ieee754_rem_pio2+0x3a0>)
 80142e4:	9004      	str	r0, [sp, #16]
 80142e6:	9105      	str	r1, [sp, #20]
 80142e8:	f7fe f9da 	bl	80126a0 <__aeabi_dmul>
 80142ec:	0002      	movs	r2, r0
 80142ee:	000b      	movs	r3, r1
 80142f0:	0030      	movs	r0, r6
 80142f2:	0039      	movs	r1, r7
 80142f4:	f7fe fc46 	bl	8012b84 <__aeabi_dsub>
 80142f8:	4a75      	ldr	r2, [pc, #468]	; (80144d0 <__ieee754_rem_pio2+0x3a4>)
 80142fa:	0006      	movs	r6, r0
 80142fc:	000f      	movs	r7, r1
 80142fe:	9804      	ldr	r0, [sp, #16]
 8014300:	9905      	ldr	r1, [sp, #20]
 8014302:	4b74      	ldr	r3, [pc, #464]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 8014304:	f7fe f9cc 	bl	80126a0 <__aeabi_dmul>
 8014308:	9002      	str	r0, [sp, #8]
 801430a:	9103      	str	r1, [sp, #12]
 801430c:	2d1f      	cmp	r5, #31
 801430e:	dc00      	bgt.n	8014312 <__ieee754_rem_pio2+0x1e6>
 8014310:	e0c7      	b.n	80144a2 <__ieee754_rem_pio2+0x376>
 8014312:	9a02      	ldr	r2, [sp, #8]
 8014314:	9b03      	ldr	r3, [sp, #12]
 8014316:	0030      	movs	r0, r6
 8014318:	0039      	movs	r1, r7
 801431a:	f7fe fc33 	bl	8012b84 <__aeabi_dsub>
 801431e:	4683      	mov	fp, r0
 8014320:	468a      	mov	sl, r1
 8014322:	4653      	mov	r3, sl
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	1524      	asrs	r4, r4, #20
 8014328:	0d5b      	lsrs	r3, r3, #21
 801432a:	1ae3      	subs	r3, r4, r3
 801432c:	2b10      	cmp	r3, #16
 801432e:	dd6c      	ble.n	801440a <__ieee754_rem_pio2+0x2de>
 8014330:	9804      	ldr	r0, [sp, #16]
 8014332:	9905      	ldr	r1, [sp, #20]
 8014334:	22d3      	movs	r2, #211	; 0xd3
 8014336:	4b67      	ldr	r3, [pc, #412]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 8014338:	0552      	lsls	r2, r2, #21
 801433a:	f7fe f9b1 	bl	80126a0 <__aeabi_dmul>
 801433e:	0002      	movs	r2, r0
 8014340:	000b      	movs	r3, r1
 8014342:	0030      	movs	r0, r6
 8014344:	0039      	movs	r1, r7
 8014346:	9202      	str	r2, [sp, #8]
 8014348:	9303      	str	r3, [sp, #12]
 801434a:	f7fe fc1b 	bl	8012b84 <__aeabi_dsub>
 801434e:	000a      	movs	r2, r1
 8014350:	0001      	movs	r1, r0
 8014352:	0013      	movs	r3, r2
 8014354:	9106      	str	r1, [sp, #24]
 8014356:	9207      	str	r2, [sp, #28]
 8014358:	0002      	movs	r2, r0
 801435a:	0039      	movs	r1, r7
 801435c:	0030      	movs	r0, r6
 801435e:	f7fe fc11 	bl	8012b84 <__aeabi_dsub>
 8014362:	9a02      	ldr	r2, [sp, #8]
 8014364:	9b03      	ldr	r3, [sp, #12]
 8014366:	f7fe fc0d 	bl	8012b84 <__aeabi_dsub>
 801436a:	0006      	movs	r6, r0
 801436c:	000f      	movs	r7, r1
 801436e:	9804      	ldr	r0, [sp, #16]
 8014370:	9905      	ldr	r1, [sp, #20]
 8014372:	4a61      	ldr	r2, [pc, #388]	; (80144f8 <__ieee754_rem_pio2+0x3cc>)
 8014374:	4b61      	ldr	r3, [pc, #388]	; (80144fc <__ieee754_rem_pio2+0x3d0>)
 8014376:	f7fe f993 	bl	80126a0 <__aeabi_dmul>
 801437a:	0032      	movs	r2, r6
 801437c:	003b      	movs	r3, r7
 801437e:	f7fe fc01 	bl	8012b84 <__aeabi_dsub>
 8014382:	9e06      	ldr	r6, [sp, #24]
 8014384:	9f07      	ldr	r7, [sp, #28]
 8014386:	000b      	movs	r3, r1
 8014388:	0002      	movs	r2, r0
 801438a:	0039      	movs	r1, r7
 801438c:	0030      	movs	r0, r6
 801438e:	9202      	str	r2, [sp, #8]
 8014390:	9303      	str	r3, [sp, #12]
 8014392:	f7fe fbf7 	bl	8012b84 <__aeabi_dsub>
 8014396:	004b      	lsls	r3, r1, #1
 8014398:	0d5b      	lsrs	r3, r3, #21
 801439a:	4683      	mov	fp, r0
 801439c:	468a      	mov	sl, r1
 801439e:	1ae4      	subs	r4, r4, r3
 80143a0:	2c31      	cmp	r4, #49	; 0x31
 80143a2:	dd32      	ble.n	801440a <__ieee754_rem_pio2+0x2de>
 80143a4:	9804      	ldr	r0, [sp, #16]
 80143a6:	9905      	ldr	r1, [sp, #20]
 80143a8:	22b8      	movs	r2, #184	; 0xb8
 80143aa:	4b54      	ldr	r3, [pc, #336]	; (80144fc <__ieee754_rem_pio2+0x3d0>)
 80143ac:	0592      	lsls	r2, r2, #22
 80143ae:	f7fe f977 	bl	80126a0 <__aeabi_dmul>
 80143b2:	0003      	movs	r3, r0
 80143b4:	000c      	movs	r4, r1
 80143b6:	0002      	movs	r2, r0
 80143b8:	9302      	str	r3, [sp, #8]
 80143ba:	9403      	str	r4, [sp, #12]
 80143bc:	000b      	movs	r3, r1
 80143be:	9806      	ldr	r0, [sp, #24]
 80143c0:	9907      	ldr	r1, [sp, #28]
 80143c2:	f7fe fbdf 	bl	8012b84 <__aeabi_dsub>
 80143c6:	0002      	movs	r2, r0
 80143c8:	000b      	movs	r3, r1
 80143ca:	0006      	movs	r6, r0
 80143cc:	000f      	movs	r7, r1
 80143ce:	9806      	ldr	r0, [sp, #24]
 80143d0:	9907      	ldr	r1, [sp, #28]
 80143d2:	f7fe fbd7 	bl	8012b84 <__aeabi_dsub>
 80143d6:	9a02      	ldr	r2, [sp, #8]
 80143d8:	9b03      	ldr	r3, [sp, #12]
 80143da:	f7fe fbd3 	bl	8012b84 <__aeabi_dsub>
 80143de:	4a48      	ldr	r2, [pc, #288]	; (8014500 <__ieee754_rem_pio2+0x3d4>)
 80143e0:	9002      	str	r0, [sp, #8]
 80143e2:	9103      	str	r1, [sp, #12]
 80143e4:	9804      	ldr	r0, [sp, #16]
 80143e6:	9905      	ldr	r1, [sp, #20]
 80143e8:	4b46      	ldr	r3, [pc, #280]	; (8014504 <__ieee754_rem_pio2+0x3d8>)
 80143ea:	f7fe f959 	bl	80126a0 <__aeabi_dmul>
 80143ee:	9a02      	ldr	r2, [sp, #8]
 80143f0:	9b03      	ldr	r3, [sp, #12]
 80143f2:	f7fe fbc7 	bl	8012b84 <__aeabi_dsub>
 80143f6:	0002      	movs	r2, r0
 80143f8:	000b      	movs	r3, r1
 80143fa:	0030      	movs	r0, r6
 80143fc:	0039      	movs	r1, r7
 80143fe:	9202      	str	r2, [sp, #8]
 8014400:	9303      	str	r3, [sp, #12]
 8014402:	f7fe fbbf 	bl	8012b84 <__aeabi_dsub>
 8014406:	4683      	mov	fp, r0
 8014408:	468a      	mov	sl, r1
 801440a:	465a      	mov	r2, fp
 801440c:	4653      	mov	r3, sl
 801440e:	4641      	mov	r1, r8
 8014410:	0030      	movs	r0, r6
 8014412:	600a      	str	r2, [r1, #0]
 8014414:	604b      	str	r3, [r1, #4]
 8014416:	0039      	movs	r1, r7
 8014418:	f7fe fbb4 	bl	8012b84 <__aeabi_dsub>
 801441c:	9a02      	ldr	r2, [sp, #8]
 801441e:	9b03      	ldr	r3, [sp, #12]
 8014420:	f7fe fbb0 	bl	8012b84 <__aeabi_dsub>
 8014424:	4644      	mov	r4, r8
 8014426:	000b      	movs	r3, r1
 8014428:	0002      	movs	r2, r0
 801442a:	60a2      	str	r2, [r4, #8]
 801442c:	60e3      	str	r3, [r4, #12]
 801442e:	464b      	mov	r3, r9
 8014430:	2b00      	cmp	r3, #0
 8014432:	db00      	blt.n	8014436 <__ieee754_rem_pio2+0x30a>
 8014434:	e71b      	b.n	801426e <__ieee754_rem_pio2+0x142>
 8014436:	465b      	mov	r3, fp
 8014438:	6023      	str	r3, [r4, #0]
 801443a:	2380      	movs	r3, #128	; 0x80
 801443c:	061b      	lsls	r3, r3, #24
 801443e:	4453      	add	r3, sl
 8014440:	6063      	str	r3, [r4, #4]
 8014442:	2380      	movs	r3, #128	; 0x80
 8014444:	061b      	lsls	r3, r3, #24
 8014446:	469c      	mov	ip, r3
 8014448:	4461      	add	r1, ip
 801444a:	60a0      	str	r0, [r4, #8]
 801444c:	60e1      	str	r1, [r4, #12]
 801444e:	426d      	negs	r5, r5
 8014450:	e70d      	b.n	801426e <__ieee754_rem_pio2+0x142>
 8014452:	000b      	movs	r3, r1
 8014454:	0002      	movs	r2, r0
 8014456:	f7fe fb95 	bl	8012b84 <__aeabi_dsub>
 801445a:	4643      	mov	r3, r8
 801445c:	2500      	movs	r5, #0
 801445e:	6098      	str	r0, [r3, #8]
 8014460:	60d9      	str	r1, [r3, #12]
 8014462:	6018      	str	r0, [r3, #0]
 8014464:	6059      	str	r1, [r3, #4]
 8014466:	e702      	b.n	801426e <__ieee754_rem_pio2+0x142>
 8014468:	22d3      	movs	r2, #211	; 0xd3
 801446a:	4b1a      	ldr	r3, [pc, #104]	; (80144d4 <__ieee754_rem_pio2+0x3a8>)
 801446c:	0552      	lsls	r2, r2, #21
 801446e:	f7fe fb89 	bl	8012b84 <__aeabi_dsub>
 8014472:	4a21      	ldr	r2, [pc, #132]	; (80144f8 <__ieee754_rem_pio2+0x3cc>)
 8014474:	4b21      	ldr	r3, [pc, #132]	; (80144fc <__ieee754_rem_pio2+0x3d0>)
 8014476:	000d      	movs	r5, r1
 8014478:	0004      	movs	r4, r0
 801447a:	f7fe fb83 	bl	8012b84 <__aeabi_dsub>
 801447e:	0002      	movs	r2, r0
 8014480:	000b      	movs	r3, r1
 8014482:	4641      	mov	r1, r8
 8014484:	0020      	movs	r0, r4
 8014486:	600a      	str	r2, [r1, #0]
 8014488:	604b      	str	r3, [r1, #4]
 801448a:	0029      	movs	r1, r5
 801448c:	f7fe fb7a 	bl	8012b84 <__aeabi_dsub>
 8014490:	4b1a      	ldr	r3, [pc, #104]	; (80144fc <__ieee754_rem_pio2+0x3d0>)
 8014492:	4a19      	ldr	r2, [pc, #100]	; (80144f8 <__ieee754_rem_pio2+0x3cc>)
 8014494:	f7fe fb76 	bl	8012b84 <__aeabi_dsub>
 8014498:	4643      	mov	r3, r8
 801449a:	2501      	movs	r5, #1
 801449c:	6098      	str	r0, [r3, #8]
 801449e:	60d9      	str	r1, [r3, #12]
 80144a0:	e6e5      	b.n	801426e <__ieee754_rem_pio2+0x142>
 80144a2:	0002      	movs	r2, r0
 80144a4:	000b      	movs	r3, r1
 80144a6:	0030      	movs	r0, r6
 80144a8:	0039      	movs	r1, r7
 80144aa:	f7fe fb6b 	bl	8012b84 <__aeabi_dsub>
 80144ae:	1e6b      	subs	r3, r5, #1
 80144b0:	4a15      	ldr	r2, [pc, #84]	; (8014508 <__ieee754_rem_pio2+0x3dc>)
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	589b      	ldr	r3, [r3, r2]
 80144b6:	4683      	mov	fp, r0
 80144b8:	468a      	mov	sl, r1
 80144ba:	42a3      	cmp	r3, r4
 80144bc:	d1a5      	bne.n	801440a <__ieee754_rem_pio2+0x2de>
 80144be:	e730      	b.n	8014322 <__ieee754_rem_pio2+0x1f6>
 80144c0:	3fe921fb 	.word	0x3fe921fb
 80144c4:	4002d97b 	.word	0x4002d97b
 80144c8:	54400000 	.word	0x54400000
 80144cc:	3ff921fb 	.word	0x3ff921fb
 80144d0:	1a626331 	.word	0x1a626331
 80144d4:	3dd0b461 	.word	0x3dd0b461
 80144d8:	413921fb 	.word	0x413921fb
 80144dc:	7fefffff 	.word	0x7fefffff
 80144e0:	fffffbea 	.word	0xfffffbea
 80144e4:	41700000 	.word	0x41700000
 80144e8:	0801f61c 	.word	0x0801f61c
 80144ec:	6dc9c883 	.word	0x6dc9c883
 80144f0:	3fe45f30 	.word	0x3fe45f30
 80144f4:	3fe00000 	.word	0x3fe00000
 80144f8:	2e037073 	.word	0x2e037073
 80144fc:	3ba3198a 	.word	0x3ba3198a
 8014500:	252049c1 	.word	0x252049c1
 8014504:	397b839a 	.word	0x397b839a
 8014508:	0801f59c 	.word	0x0801f59c
 801450c:	22d3      	movs	r2, #211	; 0xd3
 801450e:	4b0c      	ldr	r3, [pc, #48]	; (8014540 <__ieee754_rem_pio2+0x414>)
 8014510:	0552      	lsls	r2, r2, #21
 8014512:	f7fd f99f 	bl	8011854 <__aeabi_dadd>
 8014516:	4a0b      	ldr	r2, [pc, #44]	; (8014544 <__ieee754_rem_pio2+0x418>)
 8014518:	4b0b      	ldr	r3, [pc, #44]	; (8014548 <__ieee754_rem_pio2+0x41c>)
 801451a:	0004      	movs	r4, r0
 801451c:	000d      	movs	r5, r1
 801451e:	f7fd f999 	bl	8011854 <__aeabi_dadd>
 8014522:	0002      	movs	r2, r0
 8014524:	000b      	movs	r3, r1
 8014526:	4641      	mov	r1, r8
 8014528:	0020      	movs	r0, r4
 801452a:	600a      	str	r2, [r1, #0]
 801452c:	604b      	str	r3, [r1, #4]
 801452e:	0029      	movs	r1, r5
 8014530:	f7fe fb28 	bl	8012b84 <__aeabi_dsub>
 8014534:	4a03      	ldr	r2, [pc, #12]	; (8014544 <__ieee754_rem_pio2+0x418>)
 8014536:	4b04      	ldr	r3, [pc, #16]	; (8014548 <__ieee754_rem_pio2+0x41c>)
 8014538:	e6b9      	b.n	80142ae <__ieee754_rem_pio2+0x182>
 801453a:	2303      	movs	r3, #3
 801453c:	e673      	b.n	8014226 <__ieee754_rem_pio2+0xfa>
 801453e:	46c0      	nop			; (mov r8, r8)
 8014540:	3dd0b461 	.word	0x3dd0b461
 8014544:	2e037073 	.word	0x2e037073
 8014548:	3ba3198a 	.word	0x3ba3198a

0801454c <__ieee754_sqrt>:
 801454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801454e:	4647      	mov	r7, r8
 8014550:	46ce      	mov	lr, r9
 8014552:	4b67      	ldr	r3, [pc, #412]	; (80146f0 <__ieee754_sqrt+0x1a4>)
 8014554:	b580      	push	{r7, lr}
 8014556:	000a      	movs	r2, r1
 8014558:	000f      	movs	r7, r1
 801455a:	0019      	movs	r1, r3
 801455c:	0005      	movs	r5, r0
 801455e:	4039      	ands	r1, r7
 8014560:	4299      	cmp	r1, r3
 8014562:	d100      	bne.n	8014566 <__ieee754_sqrt+0x1a>
 8014564:	e09b      	b.n	801469e <__ieee754_sqrt+0x152>
 8014566:	0004      	movs	r4, r0
 8014568:	0001      	movs	r1, r0
 801456a:	2f00      	cmp	r7, #0
 801456c:	dd69      	ble.n	8014642 <__ieee754_sqrt+0xf6>
 801456e:	153f      	asrs	r7, r7, #20
 8014570:	d100      	bne.n	8014574 <__ieee754_sqrt+0x28>
 8014572:	e0b4      	b.n	80146de <__ieee754_sqrt+0x192>
 8014574:	4b5f      	ldr	r3, [pc, #380]	; (80146f4 <__ieee754_sqrt+0x1a8>)
 8014576:	0312      	lsls	r2, r2, #12
 8014578:	469c      	mov	ip, r3
 801457a:	2380      	movs	r3, #128	; 0x80
 801457c:	0b12      	lsrs	r2, r2, #12
 801457e:	035b      	lsls	r3, r3, #13
 8014580:	4313      	orrs	r3, r2
 8014582:	005b      	lsls	r3, r3, #1
 8014584:	0fca      	lsrs	r2, r1, #31
 8014586:	4467      	add	r7, ip
 8014588:	189b      	adds	r3, r3, r2
 801458a:	004a      	lsls	r2, r1, #1
 801458c:	07f8      	lsls	r0, r7, #31
 801458e:	d503      	bpl.n	8014598 <__ieee754_sqrt+0x4c>
 8014590:	0fd2      	lsrs	r2, r2, #31
 8014592:	005b      	lsls	r3, r3, #1
 8014594:	189b      	adds	r3, r3, r2
 8014596:	008a      	lsls	r2, r1, #2
 8014598:	1079      	asrs	r1, r7, #1
 801459a:	468c      	mov	ip, r1
 801459c:	2100      	movs	r1, #0
 801459e:	2080      	movs	r0, #128	; 0x80
 80145a0:	2416      	movs	r4, #22
 80145a2:	4689      	mov	r9, r1
 80145a4:	0380      	lsls	r0, r0, #14
 80145a6:	180d      	adds	r5, r1, r0
 80145a8:	429d      	cmp	r5, r3
 80145aa:	dc02      	bgt.n	80145b2 <__ieee754_sqrt+0x66>
 80145ac:	1829      	adds	r1, r5, r0
 80145ae:	1b5b      	subs	r3, r3, r5
 80145b0:	4481      	add	r9, r0
 80145b2:	0fd5      	lsrs	r5, r2, #31
 80145b4:	005b      	lsls	r3, r3, #1
 80145b6:	3c01      	subs	r4, #1
 80145b8:	195b      	adds	r3, r3, r5
 80145ba:	0052      	lsls	r2, r2, #1
 80145bc:	0840      	lsrs	r0, r0, #1
 80145be:	2c00      	cmp	r4, #0
 80145c0:	d1f1      	bne.n	80145a6 <__ieee754_sqrt+0x5a>
 80145c2:	2000      	movs	r0, #0
 80145c4:	4680      	mov	r8, r0
 80145c6:	2080      	movs	r0, #128	; 0x80
 80145c8:	2520      	movs	r5, #32
 80145ca:	2700      	movs	r7, #0
 80145cc:	0600      	lsls	r0, r0, #24
 80145ce:	e009      	b.n	80145e4 <__ieee754_sqrt+0x98>
 80145d0:	428b      	cmp	r3, r1
 80145d2:	d05c      	beq.n	801468e <__ieee754_sqrt+0x142>
 80145d4:	0fd4      	lsrs	r4, r2, #31
 80145d6:	005b      	lsls	r3, r3, #1
 80145d8:	3d01      	subs	r5, #1
 80145da:	18e3      	adds	r3, r4, r3
 80145dc:	0052      	lsls	r2, r2, #1
 80145de:	0840      	lsrs	r0, r0, #1
 80145e0:	2d00      	cmp	r5, #0
 80145e2:	d016      	beq.n	8014612 <__ieee754_sqrt+0xc6>
 80145e4:	19c4      	adds	r4, r0, r7
 80145e6:	428b      	cmp	r3, r1
 80145e8:	ddf2      	ble.n	80145d0 <__ieee754_sqrt+0x84>
 80145ea:	1827      	adds	r7, r4, r0
 80145ec:	000e      	movs	r6, r1
 80145ee:	2c00      	cmp	r4, #0
 80145f0:	db49      	blt.n	8014686 <__ieee754_sqrt+0x13a>
 80145f2:	1a5b      	subs	r3, r3, r1
 80145f4:	42a2      	cmp	r2, r4
 80145f6:	4189      	sbcs	r1, r1
 80145f8:	4249      	negs	r1, r1
 80145fa:	1a5b      	subs	r3, r3, r1
 80145fc:	1b12      	subs	r2, r2, r4
 80145fe:	0fd4      	lsrs	r4, r2, #31
 8014600:	005b      	lsls	r3, r3, #1
 8014602:	3d01      	subs	r5, #1
 8014604:	4480      	add	r8, r0
 8014606:	0031      	movs	r1, r6
 8014608:	18e3      	adds	r3, r4, r3
 801460a:	0052      	lsls	r2, r2, #1
 801460c:	0840      	lsrs	r0, r0, #1
 801460e:	2d00      	cmp	r5, #0
 8014610:	d1e8      	bne.n	80145e4 <__ieee754_sqrt+0x98>
 8014612:	4313      	orrs	r3, r2
 8014614:	d14e      	bne.n	80146b4 <__ieee754_sqrt+0x168>
 8014616:	4643      	mov	r3, r8
 8014618:	085b      	lsrs	r3, r3, #1
 801461a:	4937      	ldr	r1, [pc, #220]	; (80146f8 <__ieee754_sqrt+0x1ac>)
 801461c:	464a      	mov	r2, r9
 801461e:	4688      	mov	r8, r1
 8014620:	4649      	mov	r1, r9
 8014622:	1052      	asrs	r2, r2, #1
 8014624:	4442      	add	r2, r8
 8014626:	07c9      	lsls	r1, r1, #31
 8014628:	d502      	bpl.n	8014630 <__ieee754_sqrt+0xe4>
 801462a:	2180      	movs	r1, #128	; 0x80
 801462c:	0609      	lsls	r1, r1, #24
 801462e:	430b      	orrs	r3, r1
 8014630:	4661      	mov	r1, ip
 8014632:	050f      	lsls	r7, r1, #20
 8014634:	18bd      	adds	r5, r7, r2
 8014636:	0018      	movs	r0, r3
 8014638:	0029      	movs	r1, r5
 801463a:	bc0c      	pop	{r2, r3}
 801463c:	4690      	mov	r8, r2
 801463e:	4699      	mov	r9, r3
 8014640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014642:	007b      	lsls	r3, r7, #1
 8014644:	085b      	lsrs	r3, r3, #1
 8014646:	4303      	orrs	r3, r0
 8014648:	0039      	movs	r1, r7
 801464a:	2b00      	cmp	r3, #0
 801464c:	d0f5      	beq.n	801463a <__ieee754_sqrt+0xee>
 801464e:	2f00      	cmp	r7, #0
 8014650:	d13c      	bne.n	80146cc <__ieee754_sqrt+0x180>
 8014652:	0ae3      	lsrs	r3, r4, #11
 8014654:	3a15      	subs	r2, #21
 8014656:	0564      	lsls	r4, r4, #21
 8014658:	2b00      	cmp	r3, #0
 801465a:	d0fa      	beq.n	8014652 <__ieee754_sqrt+0x106>
 801465c:	2080      	movs	r0, #128	; 0x80
 801465e:	0340      	lsls	r0, r0, #13
 8014660:	4203      	tst	r3, r0
 8014662:	d13f      	bne.n	80146e4 <__ieee754_sqrt+0x198>
 8014664:	2700      	movs	r7, #0
 8014666:	e000      	b.n	801466a <__ieee754_sqrt+0x11e>
 8014668:	000f      	movs	r7, r1
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	1c79      	adds	r1, r7, #1
 801466e:	4203      	tst	r3, r0
 8014670:	d0fa      	beq.n	8014668 <__ieee754_sqrt+0x11c>
 8014672:	0025      	movs	r5, r4
 8014674:	2020      	movs	r0, #32
 8014676:	408d      	lsls	r5, r1
 8014678:	1a40      	subs	r0, r0, r1
 801467a:	0029      	movs	r1, r5
 801467c:	1bd7      	subs	r7, r2, r7
 801467e:	0022      	movs	r2, r4
 8014680:	40c2      	lsrs	r2, r0
 8014682:	431a      	orrs	r2, r3
 8014684:	e776      	b.n	8014574 <__ieee754_sqrt+0x28>
 8014686:	43fe      	mvns	r6, r7
 8014688:	0ff6      	lsrs	r6, r6, #31
 801468a:	198e      	adds	r6, r1, r6
 801468c:	e7b1      	b.n	80145f2 <__ieee754_sqrt+0xa6>
 801468e:	4294      	cmp	r4, r2
 8014690:	d8a0      	bhi.n	80145d4 <__ieee754_sqrt+0x88>
 8014692:	1827      	adds	r7, r4, r0
 8014694:	2c00      	cmp	r4, #0
 8014696:	dbf6      	blt.n	8014686 <__ieee754_sqrt+0x13a>
 8014698:	001e      	movs	r6, r3
 801469a:	2300      	movs	r3, #0
 801469c:	e7ae      	b.n	80145fc <__ieee754_sqrt+0xb0>
 801469e:	0002      	movs	r2, r0
 80146a0:	003b      	movs	r3, r7
 80146a2:	0028      	movs	r0, r5
 80146a4:	0039      	movs	r1, r7
 80146a6:	f7fd fffb 	bl	80126a0 <__aeabi_dmul>
 80146aa:	002a      	movs	r2, r5
 80146ac:	003b      	movs	r3, r7
 80146ae:	f7fd f8d1 	bl	8011854 <__aeabi_dadd>
 80146b2:	e7c2      	b.n	801463a <__ieee754_sqrt+0xee>
 80146b4:	4643      	mov	r3, r8
 80146b6:	3301      	adds	r3, #1
 80146b8:	d003      	beq.n	80146c2 <__ieee754_sqrt+0x176>
 80146ba:	4643      	mov	r3, r8
 80146bc:	3301      	adds	r3, #1
 80146be:	085b      	lsrs	r3, r3, #1
 80146c0:	e7ab      	b.n	801461a <__ieee754_sqrt+0xce>
 80146c2:	2301      	movs	r3, #1
 80146c4:	4698      	mov	r8, r3
 80146c6:	2300      	movs	r3, #0
 80146c8:	44c1      	add	r9, r8
 80146ca:	e7a6      	b.n	801461a <__ieee754_sqrt+0xce>
 80146cc:	003b      	movs	r3, r7
 80146ce:	0002      	movs	r2, r0
 80146d0:	f7fe fa58 	bl	8012b84 <__aeabi_dsub>
 80146d4:	0002      	movs	r2, r0
 80146d6:	000b      	movs	r3, r1
 80146d8:	f7fd fbd8 	bl	8011e8c <__aeabi_ddiv>
 80146dc:	e7ad      	b.n	801463a <__ieee754_sqrt+0xee>
 80146de:	0013      	movs	r3, r2
 80146e0:	2200      	movs	r2, #0
 80146e2:	e7bb      	b.n	801465c <__ieee754_sqrt+0x110>
 80146e4:	2701      	movs	r7, #1
 80146e6:	0021      	movs	r1, r4
 80146e8:	2020      	movs	r0, #32
 80146ea:	427f      	negs	r7, r7
 80146ec:	e7c6      	b.n	801467c <__ieee754_sqrt+0x130>
 80146ee:	46c0      	nop			; (mov r8, r8)
 80146f0:	7ff00000 	.word	0x7ff00000
 80146f4:	fffffc01 	.word	0xfffffc01
 80146f8:	3fe00000 	.word	0x3fe00000

080146fc <__ieee754_expf>:
 80146fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146fe:	22ff      	movs	r2, #255	; 0xff
 8014700:	46d6      	mov	lr, sl
 8014702:	464f      	mov	r7, r9
 8014704:	4646      	mov	r6, r8
 8014706:	0043      	lsls	r3, r0, #1
 8014708:	b5c0      	push	{r6, r7, lr}
 801470a:	1c04      	adds	r4, r0, #0
 801470c:	0001      	movs	r1, r0
 801470e:	085b      	lsrs	r3, r3, #1
 8014710:	05d2      	lsls	r2, r2, #23
 8014712:	4293      	cmp	r3, r2
 8014714:	d831      	bhi.n	801477a <__ieee754_expf+0x7e>
 8014716:	0fc5      	lsrs	r5, r0, #31
 8014718:	4293      	cmp	r3, r2
 801471a:	d035      	beq.n	8014788 <__ieee754_expf+0x8c>
 801471c:	4a63      	ldr	r2, [pc, #396]	; (80148ac <__ieee754_expf+0x1b0>)
 801471e:	4290      	cmp	r0, r2
 8014720:	dc36      	bgt.n	8014790 <__ieee754_expf+0x94>
 8014722:	2800      	cmp	r0, #0
 8014724:	da00      	bge.n	8014728 <__ieee754_expf+0x2c>
 8014726:	e088      	b.n	801483a <__ieee754_expf+0x13e>
 8014728:	4a61      	ldr	r2, [pc, #388]	; (80148b0 <__ieee754_expf+0x1b4>)
 801472a:	4293      	cmp	r3, r2
 801472c:	d935      	bls.n	801479a <__ieee754_expf+0x9e>
 801472e:	4a61      	ldr	r2, [pc, #388]	; (80148b4 <__ieee754_expf+0x1b8>)
 8014730:	4293      	cmp	r3, r2
 8014732:	d800      	bhi.n	8014736 <__ieee754_expf+0x3a>
 8014734:	e0a9      	b.n	801488a <__ieee754_expf+0x18e>
 8014736:	4960      	ldr	r1, [pc, #384]	; (80148b8 <__ieee754_expf+0x1bc>)
 8014738:	1c20      	adds	r0, r4, #0
 801473a:	f7fc f8eb 	bl	8010914 <__aeabi_fmul>
 801473e:	4b5f      	ldr	r3, [pc, #380]	; (80148bc <__ieee754_expf+0x1c0>)
 8014740:	00ad      	lsls	r5, r5, #2
 8014742:	58e9      	ldr	r1, [r5, r3]
 8014744:	f7fb fe3a 	bl	80103bc <__aeabi_fadd>
 8014748:	f7fc ffda 	bl	8011700 <__aeabi_f2iz>
 801474c:	0005      	movs	r5, r0
 801474e:	f7fc fff7 	bl	8011740 <__aeabi_i2f>
 8014752:	495b      	ldr	r1, [pc, #364]	; (80148c0 <__ieee754_expf+0x1c4>)
 8014754:	1c07      	adds	r7, r0, #0
 8014756:	f7fc f8dd 	bl	8010914 <__aeabi_fmul>
 801475a:	1c01      	adds	r1, r0, #0
 801475c:	1c20      	adds	r0, r4, #0
 801475e:	f7fc fa0b 	bl	8010b78 <__aeabi_fsub>
 8014762:	4958      	ldr	r1, [pc, #352]	; (80148c4 <__ieee754_expf+0x1c8>)
 8014764:	4682      	mov	sl, r0
 8014766:	1c38      	adds	r0, r7, #0
 8014768:	f7fc f8d4 	bl	8010914 <__aeabi_fmul>
 801476c:	1c07      	adds	r7, r0, #0
 801476e:	1c39      	adds	r1, r7, #0
 8014770:	4650      	mov	r0, sl
 8014772:	f7fc fa01 	bl	8010b78 <__aeabi_fsub>
 8014776:	1c04      	adds	r4, r0, #0
 8014778:	e013      	b.n	80147a2 <__ieee754_expf+0xa6>
 801477a:	f7fb fe1f 	bl	80103bc <__aeabi_fadd>
 801477e:	bc1c      	pop	{r2, r3, r4}
 8014780:	4690      	mov	r8, r2
 8014782:	4699      	mov	r9, r3
 8014784:	46a2      	mov	sl, r4
 8014786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014788:	2d00      	cmp	r5, #0
 801478a:	d0f8      	beq.n	801477e <__ieee754_expf+0x82>
 801478c:	2000      	movs	r0, #0
 801478e:	e7f6      	b.n	801477e <__ieee754_expf+0x82>
 8014790:	494d      	ldr	r1, [pc, #308]	; (80148c8 <__ieee754_expf+0x1cc>)
 8014792:	1c08      	adds	r0, r1, #0
 8014794:	f7fc f8be 	bl	8010914 <__aeabi_fmul>
 8014798:	e7f1      	b.n	801477e <__ieee754_expf+0x82>
 801479a:	4a4c      	ldr	r2, [pc, #304]	; (80148cc <__ieee754_expf+0x1d0>)
 801479c:	4293      	cmp	r3, r2
 801479e:	d964      	bls.n	801486a <__ieee754_expf+0x16e>
 80147a0:	2500      	movs	r5, #0
 80147a2:	1c21      	adds	r1, r4, #0
 80147a4:	1c20      	adds	r0, r4, #0
 80147a6:	f7fc f8b5 	bl	8010914 <__aeabi_fmul>
 80147aa:	4949      	ldr	r1, [pc, #292]	; (80148d0 <__ieee754_expf+0x1d4>)
 80147ac:	1c06      	adds	r6, r0, #0
 80147ae:	f7fc f8b1 	bl	8010914 <__aeabi_fmul>
 80147b2:	4948      	ldr	r1, [pc, #288]	; (80148d4 <__ieee754_expf+0x1d8>)
 80147b4:	f7fc f9e0 	bl	8010b78 <__aeabi_fsub>
 80147b8:	1c31      	adds	r1, r6, #0
 80147ba:	f7fc f8ab 	bl	8010914 <__aeabi_fmul>
 80147be:	4946      	ldr	r1, [pc, #280]	; (80148d8 <__ieee754_expf+0x1dc>)
 80147c0:	f7fb fdfc 	bl	80103bc <__aeabi_fadd>
 80147c4:	1c31      	adds	r1, r6, #0
 80147c6:	f7fc f8a5 	bl	8010914 <__aeabi_fmul>
 80147ca:	4944      	ldr	r1, [pc, #272]	; (80148dc <__ieee754_expf+0x1e0>)
 80147cc:	f7fc f9d4 	bl	8010b78 <__aeabi_fsub>
 80147d0:	1c31      	adds	r1, r6, #0
 80147d2:	f7fc f89f 	bl	8010914 <__aeabi_fmul>
 80147d6:	4942      	ldr	r1, [pc, #264]	; (80148e0 <__ieee754_expf+0x1e4>)
 80147d8:	f7fb fdf0 	bl	80103bc <__aeabi_fadd>
 80147dc:	1c31      	adds	r1, r6, #0
 80147de:	f7fc f899 	bl	8010914 <__aeabi_fmul>
 80147e2:	1c01      	adds	r1, r0, #0
 80147e4:	1c20      	adds	r0, r4, #0
 80147e6:	f7fc f9c7 	bl	8010b78 <__aeabi_fsub>
 80147ea:	1c01      	adds	r1, r0, #0
 80147ec:	4680      	mov	r8, r0
 80147ee:	1c20      	adds	r0, r4, #0
 80147f0:	f7fc f890 	bl	8010914 <__aeabi_fmul>
 80147f4:	4681      	mov	r9, r0
 80147f6:	2d00      	cmp	r5, #0
 80147f8:	d025      	beq.n	8014846 <__ieee754_expf+0x14a>
 80147fa:	2080      	movs	r0, #128	; 0x80
 80147fc:	4641      	mov	r1, r8
 80147fe:	05c0      	lsls	r0, r0, #23
 8014800:	f7fc f9ba 	bl	8010b78 <__aeabi_fsub>
 8014804:	1c01      	adds	r1, r0, #0
 8014806:	4648      	mov	r0, r9
 8014808:	f7fb ff72 	bl	80106f0 <__aeabi_fdiv>
 801480c:	1c01      	adds	r1, r0, #0
 801480e:	1c38      	adds	r0, r7, #0
 8014810:	f7fc f9b2 	bl	8010b78 <__aeabi_fsub>
 8014814:	4651      	mov	r1, sl
 8014816:	f7fc f9af 	bl	8010b78 <__aeabi_fsub>
 801481a:	1c01      	adds	r1, r0, #0
 801481c:	20fe      	movs	r0, #254	; 0xfe
 801481e:	0580      	lsls	r0, r0, #22
 8014820:	f7fc f9aa 	bl	8010b78 <__aeabi_fsub>
 8014824:	002b      	movs	r3, r5
 8014826:	337d      	adds	r3, #125	; 0x7d
 8014828:	da3c      	bge.n	80148a4 <__ieee754_expf+0x1a8>
 801482a:	21d8      	movs	r1, #216	; 0xd8
 801482c:	3564      	adds	r5, #100	; 0x64
 801482e:	05ed      	lsls	r5, r5, #23
 8014830:	1828      	adds	r0, r5, r0
 8014832:	0509      	lsls	r1, r1, #20
 8014834:	f7fc f86e 	bl	8010914 <__aeabi_fmul>
 8014838:	e7a1      	b.n	801477e <__ieee754_expf+0x82>
 801483a:	4a2a      	ldr	r2, [pc, #168]	; (80148e4 <__ieee754_expf+0x1e8>)
 801483c:	4293      	cmp	r3, r2
 801483e:	d800      	bhi.n	8014842 <__ieee754_expf+0x146>
 8014840:	e772      	b.n	8014728 <__ieee754_expf+0x2c>
 8014842:	2000      	movs	r0, #0
 8014844:	e79b      	b.n	801477e <__ieee754_expf+0x82>
 8014846:	2180      	movs	r1, #128	; 0x80
 8014848:	4640      	mov	r0, r8
 801484a:	05c9      	lsls	r1, r1, #23
 801484c:	f7fc f994 	bl	8010b78 <__aeabi_fsub>
 8014850:	1c01      	adds	r1, r0, #0
 8014852:	4648      	mov	r0, r9
 8014854:	f7fb ff4c 	bl	80106f0 <__aeabi_fdiv>
 8014858:	1c21      	adds	r1, r4, #0
 801485a:	f7fc f98d 	bl	8010b78 <__aeabi_fsub>
 801485e:	1c01      	adds	r1, r0, #0
 8014860:	20fe      	movs	r0, #254	; 0xfe
 8014862:	0580      	lsls	r0, r0, #22
 8014864:	f7fc f988 	bl	8010b78 <__aeabi_fsub>
 8014868:	e789      	b.n	801477e <__ieee754_expf+0x82>
 801486a:	4917      	ldr	r1, [pc, #92]	; (80148c8 <__ieee754_expf+0x1cc>)
 801486c:	1c20      	adds	r0, r4, #0
 801486e:	f7fb fda5 	bl	80103bc <__aeabi_fadd>
 8014872:	21fe      	movs	r1, #254	; 0xfe
 8014874:	0589      	lsls	r1, r1, #22
 8014876:	f7fc fd59 	bl	801132c <__aeabi_fcmpgt>
 801487a:	2800      	cmp	r0, #0
 801487c:	d090      	beq.n	80147a0 <__ieee754_expf+0xa4>
 801487e:	21fe      	movs	r1, #254	; 0xfe
 8014880:	1c20      	adds	r0, r4, #0
 8014882:	0589      	lsls	r1, r1, #22
 8014884:	f7fb fd9a 	bl	80103bc <__aeabi_fadd>
 8014888:	e779      	b.n	801477e <__ieee754_expf+0x82>
 801488a:	4b17      	ldr	r3, [pc, #92]	; (80148e8 <__ieee754_expf+0x1ec>)
 801488c:	00af      	lsls	r7, r5, #2
 801488e:	58f9      	ldr	r1, [r7, r3]
 8014890:	1c20      	adds	r0, r4, #0
 8014892:	2401      	movs	r4, #1
 8014894:	f7fc f970 	bl	8010b78 <__aeabi_fsub>
 8014898:	4b14      	ldr	r3, [pc, #80]	; (80148ec <__ieee754_expf+0x1f0>)
 801489a:	1b64      	subs	r4, r4, r5
 801489c:	4682      	mov	sl, r0
 801489e:	58ff      	ldr	r7, [r7, r3]
 80148a0:	1b65      	subs	r5, r4, r5
 80148a2:	e764      	b.n	801476e <__ieee754_expf+0x72>
 80148a4:	05ed      	lsls	r5, r5, #23
 80148a6:	1828      	adds	r0, r5, r0
 80148a8:	e769      	b.n	801477e <__ieee754_expf+0x82>
 80148aa:	46c0      	nop			; (mov r8, r8)
 80148ac:	42b17217 	.word	0x42b17217
 80148b0:	3eb17218 	.word	0x3eb17218
 80148b4:	3f851591 	.word	0x3f851591
 80148b8:	3fb8aa3b 	.word	0x3fb8aa3b
 80148bc:	0801f724 	.word	0x0801f724
 80148c0:	3f317180 	.word	0x3f317180
 80148c4:	3717f7d1 	.word	0x3717f7d1
 80148c8:	7149f2ca 	.word	0x7149f2ca
 80148cc:	317fffff 	.word	0x317fffff
 80148d0:	3331bb4c 	.word	0x3331bb4c
 80148d4:	35ddea0e 	.word	0x35ddea0e
 80148d8:	388ab355 	.word	0x388ab355
 80148dc:	3b360b61 	.word	0x3b360b61
 80148e0:	3e2aaaab 	.word	0x3e2aaaab
 80148e4:	42cff1b5 	.word	0x42cff1b5
 80148e8:	0801f72c 	.word	0x0801f72c
 80148ec:	0801f734 	.word	0x0801f734

080148f0 <__ieee754_log10f>:
 80148f0:	b570      	push	{r4, r5, r6, lr}
 80148f2:	0003      	movs	r3, r0
 80148f4:	0042      	lsls	r2, r0, #1
 80148f6:	d037      	beq.n	8014968 <__ieee754_log10f+0x78>
 80148f8:	2800      	cmp	r0, #0
 80148fa:	db3b      	blt.n	8014974 <__ieee754_log10f+0x84>
 80148fc:	4a23      	ldr	r2, [pc, #140]	; (801498c <__ieee754_log10f+0x9c>)
 80148fe:	4290      	cmp	r0, r2
 8014900:	dc3f      	bgt.n	8014982 <__ieee754_log10f+0x92>
 8014902:	4923      	ldr	r1, [pc, #140]	; (8014990 <__ieee754_log10f+0xa0>)
 8014904:	2200      	movs	r2, #0
 8014906:	4288      	cmp	r0, r1
 8014908:	dc06      	bgt.n	8014918 <__ieee754_log10f+0x28>
 801490a:	2198      	movs	r1, #152	; 0x98
 801490c:	05c9      	lsls	r1, r1, #23
 801490e:	f7fc f801 	bl	8010914 <__aeabi_fmul>
 8014912:	2219      	movs	r2, #25
 8014914:	0003      	movs	r3, r0
 8014916:	4252      	negs	r2, r2
 8014918:	15d8      	asrs	r0, r3, #23
 801491a:	387f      	subs	r0, #127	; 0x7f
 801491c:	1880      	adds	r0, r0, r2
 801491e:	0fc6      	lsrs	r6, r0, #31
 8014920:	025b      	lsls	r3, r3, #9
 8014922:	1980      	adds	r0, r0, r6
 8014924:	0a5c      	lsrs	r4, r3, #9
 8014926:	f7fc ff0b 	bl	8011740 <__aeabi_i2f>
 801492a:	1c05      	adds	r5, r0, #0
 801492c:	207f      	movs	r0, #127	; 0x7f
 801492e:	1b80      	subs	r0, r0, r6
 8014930:	05c0      	lsls	r0, r0, #23
 8014932:	4320      	orrs	r0, r4
 8014934:	f000 ff7a 	bl	801582c <__ieee754_logf>
 8014938:	4916      	ldr	r1, [pc, #88]	; (8014994 <__ieee754_log10f+0xa4>)
 801493a:	1c06      	adds	r6, r0, #0
 801493c:	1c28      	adds	r0, r5, #0
 801493e:	f7fb ffe9 	bl	8010914 <__aeabi_fmul>
 8014942:	4915      	ldr	r1, [pc, #84]	; (8014998 <__ieee754_log10f+0xa8>)
 8014944:	1c04      	adds	r4, r0, #0
 8014946:	1c30      	adds	r0, r6, #0
 8014948:	f7fb ffe4 	bl	8010914 <__aeabi_fmul>
 801494c:	1c01      	adds	r1, r0, #0
 801494e:	1c20      	adds	r0, r4, #0
 8014950:	f7fb fd34 	bl	80103bc <__aeabi_fadd>
 8014954:	4911      	ldr	r1, [pc, #68]	; (801499c <__ieee754_log10f+0xac>)
 8014956:	1c04      	adds	r4, r0, #0
 8014958:	1c28      	adds	r0, r5, #0
 801495a:	f7fb ffdb 	bl	8010914 <__aeabi_fmul>
 801495e:	1c01      	adds	r1, r0, #0
 8014960:	1c20      	adds	r0, r4, #0
 8014962:	f7fb fd2b 	bl	80103bc <__aeabi_fadd>
 8014966:	e004      	b.n	8014972 <__ieee754_log10f+0x82>
 8014968:	20cc      	movs	r0, #204	; 0xcc
 801496a:	2100      	movs	r1, #0
 801496c:	0600      	lsls	r0, r0, #24
 801496e:	f7fb febf 	bl	80106f0 <__aeabi_fdiv>
 8014972:	bd70      	pop	{r4, r5, r6, pc}
 8014974:	1c01      	adds	r1, r0, #0
 8014976:	f7fc f8ff 	bl	8010b78 <__aeabi_fsub>
 801497a:	2100      	movs	r1, #0
 801497c:	f7fb feb8 	bl	80106f0 <__aeabi_fdiv>
 8014980:	e7f7      	b.n	8014972 <__ieee754_log10f+0x82>
 8014982:	1c01      	adds	r1, r0, #0
 8014984:	f7fb fd1a 	bl	80103bc <__aeabi_fadd>
 8014988:	e7f3      	b.n	8014972 <__ieee754_log10f+0x82>
 801498a:	46c0      	nop			; (mov r8, r8)
 801498c:	7f7fffff 	.word	0x7f7fffff
 8014990:	007fffff 	.word	0x007fffff
 8014994:	355427db 	.word	0x355427db
 8014998:	3ede5bd9 	.word	0x3ede5bd9
 801499c:	3e9a2080 	.word	0x3e9a2080

080149a0 <__kernel_cos>:
 80149a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a2:	4647      	mov	r7, r8
 80149a4:	46ce      	mov	lr, r9
 80149a6:	b580      	push	{r7, lr}
 80149a8:	b087      	sub	sp, #28
 80149aa:	9200      	str	r2, [sp, #0]
 80149ac:	9301      	str	r3, [sp, #4]
 80149ae:	4b75      	ldr	r3, [pc, #468]	; (8014b84 <__kernel_cos+0x1e4>)
 80149b0:	004f      	lsls	r7, r1, #1
 80149b2:	4681      	mov	r9, r0
 80149b4:	4688      	mov	r8, r1
 80149b6:	087f      	lsrs	r7, r7, #1
 80149b8:	429f      	cmp	r7, r3
 80149ba:	dc63      	bgt.n	8014a84 <__kernel_cos+0xe4>
 80149bc:	f7fe fc46 	bl	801324c <__aeabi_d2iz>
 80149c0:	2800      	cmp	r0, #0
 80149c2:	d100      	bne.n	80149c6 <__kernel_cos+0x26>
 80149c4:	e0d4      	b.n	8014b70 <__kernel_cos+0x1d0>
 80149c6:	464a      	mov	r2, r9
 80149c8:	4643      	mov	r3, r8
 80149ca:	4648      	mov	r0, r9
 80149cc:	4641      	mov	r1, r8
 80149ce:	f7fd fe67 	bl	80126a0 <__aeabi_dmul>
 80149d2:	0004      	movs	r4, r0
 80149d4:	000d      	movs	r5, r1
 80149d6:	4a6c      	ldr	r2, [pc, #432]	; (8014b88 <__kernel_cos+0x1e8>)
 80149d8:	4b6c      	ldr	r3, [pc, #432]	; (8014b8c <__kernel_cos+0x1ec>)
 80149da:	f7fd fe61 	bl	80126a0 <__aeabi_dmul>
 80149de:	4a6c      	ldr	r2, [pc, #432]	; (8014b90 <__kernel_cos+0x1f0>)
 80149e0:	4b6c      	ldr	r3, [pc, #432]	; (8014b94 <__kernel_cos+0x1f4>)
 80149e2:	f7fc ff37 	bl	8011854 <__aeabi_dadd>
 80149e6:	0022      	movs	r2, r4
 80149e8:	002b      	movs	r3, r5
 80149ea:	f7fd fe59 	bl	80126a0 <__aeabi_dmul>
 80149ee:	4a6a      	ldr	r2, [pc, #424]	; (8014b98 <__kernel_cos+0x1f8>)
 80149f0:	4b6a      	ldr	r3, [pc, #424]	; (8014b9c <__kernel_cos+0x1fc>)
 80149f2:	f7fe f8c7 	bl	8012b84 <__aeabi_dsub>
 80149f6:	0022      	movs	r2, r4
 80149f8:	002b      	movs	r3, r5
 80149fa:	f7fd fe51 	bl	80126a0 <__aeabi_dmul>
 80149fe:	4a68      	ldr	r2, [pc, #416]	; (8014ba0 <__kernel_cos+0x200>)
 8014a00:	4b68      	ldr	r3, [pc, #416]	; (8014ba4 <__kernel_cos+0x204>)
 8014a02:	f7fc ff27 	bl	8011854 <__aeabi_dadd>
 8014a06:	0022      	movs	r2, r4
 8014a08:	002b      	movs	r3, r5
 8014a0a:	f7fd fe49 	bl	80126a0 <__aeabi_dmul>
 8014a0e:	4a66      	ldr	r2, [pc, #408]	; (8014ba8 <__kernel_cos+0x208>)
 8014a10:	4b66      	ldr	r3, [pc, #408]	; (8014bac <__kernel_cos+0x20c>)
 8014a12:	f7fe f8b7 	bl	8012b84 <__aeabi_dsub>
 8014a16:	0022      	movs	r2, r4
 8014a18:	002b      	movs	r3, r5
 8014a1a:	f7fd fe41 	bl	80126a0 <__aeabi_dmul>
 8014a1e:	4a64      	ldr	r2, [pc, #400]	; (8014bb0 <__kernel_cos+0x210>)
 8014a20:	4b64      	ldr	r3, [pc, #400]	; (8014bb4 <__kernel_cos+0x214>)
 8014a22:	f7fc ff17 	bl	8011854 <__aeabi_dadd>
 8014a26:	0022      	movs	r2, r4
 8014a28:	002b      	movs	r3, r5
 8014a2a:	f7fd fe39 	bl	80126a0 <__aeabi_dmul>
 8014a2e:	9002      	str	r0, [sp, #8]
 8014a30:	9103      	str	r1, [sp, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	4b60      	ldr	r3, [pc, #384]	; (8014bb8 <__kernel_cos+0x218>)
 8014a36:	0020      	movs	r0, r4
 8014a38:	0029      	movs	r1, r5
 8014a3a:	f7fd fe31 	bl	80126a0 <__aeabi_dmul>
 8014a3e:	9a02      	ldr	r2, [sp, #8]
 8014a40:	9b03      	ldr	r3, [sp, #12]
 8014a42:	0006      	movs	r6, r0
 8014a44:	000f      	movs	r7, r1
 8014a46:	0020      	movs	r0, r4
 8014a48:	0029      	movs	r1, r5
 8014a4a:	f7fd fe29 	bl	80126a0 <__aeabi_dmul>
 8014a4e:	9a00      	ldr	r2, [sp, #0]
 8014a50:	9b01      	ldr	r3, [sp, #4]
 8014a52:	0004      	movs	r4, r0
 8014a54:	000d      	movs	r5, r1
 8014a56:	4648      	mov	r0, r9
 8014a58:	4641      	mov	r1, r8
 8014a5a:	f7fd fe21 	bl	80126a0 <__aeabi_dmul>
 8014a5e:	0002      	movs	r2, r0
 8014a60:	000b      	movs	r3, r1
 8014a62:	0020      	movs	r0, r4
 8014a64:	0029      	movs	r1, r5
 8014a66:	f7fe f88d 	bl	8012b84 <__aeabi_dsub>
 8014a6a:	0002      	movs	r2, r0
 8014a6c:	000b      	movs	r3, r1
 8014a6e:	0030      	movs	r0, r6
 8014a70:	0039      	movs	r1, r7
 8014a72:	f7fe f887 	bl	8012b84 <__aeabi_dsub>
 8014a76:	0002      	movs	r2, r0
 8014a78:	000b      	movs	r3, r1
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	494f      	ldr	r1, [pc, #316]	; (8014bbc <__kernel_cos+0x21c>)
 8014a7e:	f7fe f881 	bl	8012b84 <__aeabi_dsub>
 8014a82:	e070      	b.n	8014b66 <__kernel_cos+0x1c6>
 8014a84:	0002      	movs	r2, r0
 8014a86:	000b      	movs	r3, r1
 8014a88:	f7fd fe0a 	bl	80126a0 <__aeabi_dmul>
 8014a8c:	0004      	movs	r4, r0
 8014a8e:	000d      	movs	r5, r1
 8014a90:	4a3d      	ldr	r2, [pc, #244]	; (8014b88 <__kernel_cos+0x1e8>)
 8014a92:	4b3e      	ldr	r3, [pc, #248]	; (8014b8c <__kernel_cos+0x1ec>)
 8014a94:	f7fd fe04 	bl	80126a0 <__aeabi_dmul>
 8014a98:	4a3d      	ldr	r2, [pc, #244]	; (8014b90 <__kernel_cos+0x1f0>)
 8014a9a:	4b3e      	ldr	r3, [pc, #248]	; (8014b94 <__kernel_cos+0x1f4>)
 8014a9c:	f7fc feda 	bl	8011854 <__aeabi_dadd>
 8014aa0:	0022      	movs	r2, r4
 8014aa2:	002b      	movs	r3, r5
 8014aa4:	f7fd fdfc 	bl	80126a0 <__aeabi_dmul>
 8014aa8:	4a3b      	ldr	r2, [pc, #236]	; (8014b98 <__kernel_cos+0x1f8>)
 8014aaa:	4b3c      	ldr	r3, [pc, #240]	; (8014b9c <__kernel_cos+0x1fc>)
 8014aac:	f7fe f86a 	bl	8012b84 <__aeabi_dsub>
 8014ab0:	0022      	movs	r2, r4
 8014ab2:	002b      	movs	r3, r5
 8014ab4:	f7fd fdf4 	bl	80126a0 <__aeabi_dmul>
 8014ab8:	4a39      	ldr	r2, [pc, #228]	; (8014ba0 <__kernel_cos+0x200>)
 8014aba:	4b3a      	ldr	r3, [pc, #232]	; (8014ba4 <__kernel_cos+0x204>)
 8014abc:	f7fc feca 	bl	8011854 <__aeabi_dadd>
 8014ac0:	0022      	movs	r2, r4
 8014ac2:	002b      	movs	r3, r5
 8014ac4:	f7fd fdec 	bl	80126a0 <__aeabi_dmul>
 8014ac8:	4a37      	ldr	r2, [pc, #220]	; (8014ba8 <__kernel_cos+0x208>)
 8014aca:	4b38      	ldr	r3, [pc, #224]	; (8014bac <__kernel_cos+0x20c>)
 8014acc:	f7fe f85a 	bl	8012b84 <__aeabi_dsub>
 8014ad0:	0022      	movs	r2, r4
 8014ad2:	002b      	movs	r3, r5
 8014ad4:	f7fd fde4 	bl	80126a0 <__aeabi_dmul>
 8014ad8:	4a35      	ldr	r2, [pc, #212]	; (8014bb0 <__kernel_cos+0x210>)
 8014ada:	4b36      	ldr	r3, [pc, #216]	; (8014bb4 <__kernel_cos+0x214>)
 8014adc:	f7fc feba 	bl	8011854 <__aeabi_dadd>
 8014ae0:	002b      	movs	r3, r5
 8014ae2:	0022      	movs	r2, r4
 8014ae4:	f7fd fddc 	bl	80126a0 <__aeabi_dmul>
 8014ae8:	4b35      	ldr	r3, [pc, #212]	; (8014bc0 <__kernel_cos+0x220>)
 8014aea:	9002      	str	r0, [sp, #8]
 8014aec:	9103      	str	r1, [sp, #12]
 8014aee:	429f      	cmp	r7, r3
 8014af0:	dd9f      	ble.n	8014a32 <__kernel_cos+0x92>
 8014af2:	4b34      	ldr	r3, [pc, #208]	; (8014bc4 <__kernel_cos+0x224>)
 8014af4:	2200      	movs	r2, #0
 8014af6:	429f      	cmp	r7, r3
 8014af8:	dc3d      	bgt.n	8014b76 <__kernel_cos+0x1d6>
 8014afa:	4933      	ldr	r1, [pc, #204]	; (8014bc8 <__kernel_cos+0x228>)
 8014afc:	2000      	movs	r0, #0
 8014afe:	187b      	adds	r3, r7, r1
 8014b00:	492e      	ldr	r1, [pc, #184]	; (8014bbc <__kernel_cos+0x21c>)
 8014b02:	0016      	movs	r6, r2
 8014b04:	001f      	movs	r7, r3
 8014b06:	f7fe f83d 	bl	8012b84 <__aeabi_dsub>
 8014b0a:	9004      	str	r0, [sp, #16]
 8014b0c:	9105      	str	r1, [sp, #20]
 8014b0e:	2200      	movs	r2, #0
 8014b10:	4b29      	ldr	r3, [pc, #164]	; (8014bb8 <__kernel_cos+0x218>)
 8014b12:	0020      	movs	r0, r4
 8014b14:	0029      	movs	r1, r5
 8014b16:	f7fd fdc3 	bl	80126a0 <__aeabi_dmul>
 8014b1a:	0032      	movs	r2, r6
 8014b1c:	003b      	movs	r3, r7
 8014b1e:	f7fe f831 	bl	8012b84 <__aeabi_dsub>
 8014b22:	9a02      	ldr	r2, [sp, #8]
 8014b24:	9b03      	ldr	r3, [sp, #12]
 8014b26:	0006      	movs	r6, r0
 8014b28:	000f      	movs	r7, r1
 8014b2a:	0020      	movs	r0, r4
 8014b2c:	0029      	movs	r1, r5
 8014b2e:	f7fd fdb7 	bl	80126a0 <__aeabi_dmul>
 8014b32:	9a00      	ldr	r2, [sp, #0]
 8014b34:	9b01      	ldr	r3, [sp, #4]
 8014b36:	0004      	movs	r4, r0
 8014b38:	000d      	movs	r5, r1
 8014b3a:	4648      	mov	r0, r9
 8014b3c:	4641      	mov	r1, r8
 8014b3e:	f7fd fdaf 	bl	80126a0 <__aeabi_dmul>
 8014b42:	0002      	movs	r2, r0
 8014b44:	000b      	movs	r3, r1
 8014b46:	0020      	movs	r0, r4
 8014b48:	0029      	movs	r1, r5
 8014b4a:	f7fe f81b 	bl	8012b84 <__aeabi_dsub>
 8014b4e:	0002      	movs	r2, r0
 8014b50:	000b      	movs	r3, r1
 8014b52:	0030      	movs	r0, r6
 8014b54:	0039      	movs	r1, r7
 8014b56:	f7fe f815 	bl	8012b84 <__aeabi_dsub>
 8014b5a:	0002      	movs	r2, r0
 8014b5c:	000b      	movs	r3, r1
 8014b5e:	9804      	ldr	r0, [sp, #16]
 8014b60:	9905      	ldr	r1, [sp, #20]
 8014b62:	f7fe f80f 	bl	8012b84 <__aeabi_dsub>
 8014b66:	b007      	add	sp, #28
 8014b68:	bc0c      	pop	{r2, r3}
 8014b6a:	4690      	mov	r8, r2
 8014b6c:	4699      	mov	r9, r3
 8014b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b70:	2000      	movs	r0, #0
 8014b72:	4912      	ldr	r1, [pc, #72]	; (8014bbc <__kernel_cos+0x21c>)
 8014b74:	e7f7      	b.n	8014b66 <__kernel_cos+0x1c6>
 8014b76:	4b15      	ldr	r3, [pc, #84]	; (8014bcc <__kernel_cos+0x22c>)
 8014b78:	2600      	movs	r6, #0
 8014b7a:	9204      	str	r2, [sp, #16]
 8014b7c:	9305      	str	r3, [sp, #20]
 8014b7e:	4f14      	ldr	r7, [pc, #80]	; (8014bd0 <__kernel_cos+0x230>)
 8014b80:	e7c5      	b.n	8014b0e <__kernel_cos+0x16e>
 8014b82:	46c0      	nop			; (mov r8, r8)
 8014b84:	3e3fffff 	.word	0x3e3fffff
 8014b88:	be8838d4 	.word	0xbe8838d4
 8014b8c:	bda8fae9 	.word	0xbda8fae9
 8014b90:	bdb4b1c4 	.word	0xbdb4b1c4
 8014b94:	3e21ee9e 	.word	0x3e21ee9e
 8014b98:	809c52ad 	.word	0x809c52ad
 8014b9c:	3e927e4f 	.word	0x3e927e4f
 8014ba0:	19cb1590 	.word	0x19cb1590
 8014ba4:	3efa01a0 	.word	0x3efa01a0
 8014ba8:	16c15177 	.word	0x16c15177
 8014bac:	3f56c16c 	.word	0x3f56c16c
 8014bb0:	5555554c 	.word	0x5555554c
 8014bb4:	3fa55555 	.word	0x3fa55555
 8014bb8:	3fe00000 	.word	0x3fe00000
 8014bbc:	3ff00000 	.word	0x3ff00000
 8014bc0:	3fd33332 	.word	0x3fd33332
 8014bc4:	3fe90000 	.word	0x3fe90000
 8014bc8:	ffe00000 	.word	0xffe00000
 8014bcc:	3fe70000 	.word	0x3fe70000
 8014bd0:	3fd20000 	.word	0x3fd20000

08014bd4 <__kernel_rem_pio2>:
 8014bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bd6:	46de      	mov	lr, fp
 8014bd8:	464e      	mov	r6, r9
 8014bda:	4645      	mov	r5, r8
 8014bdc:	4657      	mov	r7, sl
 8014bde:	b5e0      	push	{r5, r6, r7, lr}
 8014be0:	4cdc      	ldr	r4, [pc, #880]	; (8014f54 <__kernel_rem_pio2+0x380>)
 8014be2:	44a5      	add	sp, r4
 8014be4:	910d      	str	r1, [sp, #52]	; 0x34
 8014be6:	0014      	movs	r4, r2
 8014be8:	0019      	movs	r1, r3
 8014bea:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 8014bec:	9309      	str	r3, [sp, #36]	; 0x24
 8014bee:	4bda      	ldr	r3, [pc, #872]	; (8014f58 <__kernel_rem_pio2+0x384>)
 8014bf0:	0092      	lsls	r2, r2, #2
 8014bf2:	58d6      	ldr	r6, [r2, r3]
 8014bf4:	1e4d      	subs	r5, r1, #1
 8014bf6:	9003      	str	r0, [sp, #12]
 8014bf8:	2118      	movs	r1, #24
 8014bfa:	1ee0      	subs	r0, r4, #3
 8014bfc:	9606      	str	r6, [sp, #24]
 8014bfe:	9502      	str	r5, [sp, #8]
 8014c00:	f7fc fa44 	bl	801108c <__divsi3>
 8014c04:	43c3      	mvns	r3, r0
 8014c06:	0001      	movs	r1, r0
 8014c08:	17db      	asrs	r3, r3, #31
 8014c0a:	4019      	ands	r1, r3
 8014c0c:	1c4b      	adds	r3, r1, #1
 8014c0e:	009a      	lsls	r2, r3, #2
 8014c10:	1a9b      	subs	r3, r3, r2
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	191b      	adds	r3, r3, r4
 8014c16:	910b      	str	r1, [sp, #44]	; 0x2c
 8014c18:	9305      	str	r3, [sp, #20]
 8014c1a:	1b4c      	subs	r4, r1, r5
 8014c1c:	1977      	adds	r7, r6, r5
 8014c1e:	d418      	bmi.n	8014c52 <__kernel_rem_pio2+0x7e>
 8014c20:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014c22:	00a5      	lsls	r5, r4, #2
 8014c24:	469c      	mov	ip, r3
 8014c26:	193f      	adds	r7, r7, r4
 8014c28:	ae22      	add	r6, sp, #136	; 0x88
 8014c2a:	4465      	add	r5, ip
 8014c2c:	3701      	adds	r7, #1
 8014c2e:	e007      	b.n	8014c40 <__kernel_rem_pio2+0x6c>
 8014c30:	6828      	ldr	r0, [r5, #0]
 8014c32:	f7fe fb41 	bl	80132b8 <__aeabi_i2d>
 8014c36:	3401      	adds	r4, #1
 8014c38:	c603      	stmia	r6!, {r0, r1}
 8014c3a:	3504      	adds	r5, #4
 8014c3c:	42bc      	cmp	r4, r7
 8014c3e:	d008      	beq.n	8014c52 <__kernel_rem_pio2+0x7e>
 8014c40:	2c00      	cmp	r4, #0
 8014c42:	daf5      	bge.n	8014c30 <__kernel_rem_pio2+0x5c>
 8014c44:	2000      	movs	r0, #0
 8014c46:	2100      	movs	r1, #0
 8014c48:	3401      	adds	r4, #1
 8014c4a:	c603      	stmia	r6!, {r0, r1}
 8014c4c:	3504      	adds	r5, #4
 8014c4e:	42bc      	cmp	r4, r7
 8014c50:	d1f6      	bne.n	8014c40 <__kernel_rem_pio2+0x6c>
 8014c52:	9b06      	ldr	r3, [sp, #24]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	da01      	bge.n	8014c5c <__kernel_rem_pio2+0x88>
 8014c58:	f000 fbfd 	bl	8015456 <__kernel_rem_pio2+0x882>
 8014c5c:	9b06      	ldr	r3, [sp, #24]
 8014c5e:	9903      	ldr	r1, [sp, #12]
 8014c60:	3301      	adds	r3, #1
 8014c62:	00db      	lsls	r3, r3, #3
 8014c64:	469a      	mov	sl, r3
 8014c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c68:	00da      	lsls	r2, r3, #3
 8014c6a:	4694      	mov	ip, r2
 8014c6c:	9200      	str	r2, [sp, #0]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	4691      	mov	r9, r2
 8014c72:	aa72      	add	r2, sp, #456	; 0x1c8
 8014c74:	9204      	str	r2, [sp, #16]
 8014c76:	4ab9      	ldr	r2, [pc, #740]	; (8014f5c <__kernel_rem_pio2+0x388>)
 8014c78:	4461      	add	r1, ip
 8014c7a:	4693      	mov	fp, r2
 8014c7c:	4688      	mov	r8, r1
 8014c7e:	ab9a      	add	r3, sp, #616	; 0x268
 8014c80:	4463      	add	r3, ip
 8014c82:	449b      	add	fp, r3
 8014c84:	9b02      	ldr	r3, [sp, #8]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	da00      	bge.n	8014c8c <__kernel_rem_pio2+0xb8>
 8014c8a:	e1bc      	b.n	8015006 <__kernel_rem_pio2+0x432>
 8014c8c:	465d      	mov	r5, fp
 8014c8e:	2600      	movs	r6, #0
 8014c90:	2700      	movs	r7, #0
 8014c92:	9c03      	ldr	r4, [sp, #12]
 8014c94:	444d      	add	r5, r9
 8014c96:	682a      	ldr	r2, [r5, #0]
 8014c98:	686b      	ldr	r3, [r5, #4]
 8014c9a:	cc03      	ldmia	r4!, {r0, r1}
 8014c9c:	f7fd fd00 	bl	80126a0 <__aeabi_dmul>
 8014ca0:	0002      	movs	r2, r0
 8014ca2:	000b      	movs	r3, r1
 8014ca4:	0030      	movs	r0, r6
 8014ca6:	0039      	movs	r1, r7
 8014ca8:	f7fc fdd4 	bl	8011854 <__aeabi_dadd>
 8014cac:	3d08      	subs	r5, #8
 8014cae:	0006      	movs	r6, r0
 8014cb0:	000f      	movs	r7, r1
 8014cb2:	4544      	cmp	r4, r8
 8014cb4:	d1ef      	bne.n	8014c96 <__kernel_rem_pio2+0xc2>
 8014cb6:	9b04      	ldr	r3, [sp, #16]
 8014cb8:	444b      	add	r3, r9
 8014cba:	601e      	str	r6, [r3, #0]
 8014cbc:	605f      	str	r7, [r3, #4]
 8014cbe:	2308      	movs	r3, #8
 8014cc0:	469c      	mov	ip, r3
 8014cc2:	44e1      	add	r9, ip
 8014cc4:	45d1      	cmp	r9, sl
 8014cc6:	d1dd      	bne.n	8014c84 <__kernel_rem_pio2+0xb0>
 8014cc8:	a80e      	add	r0, sp, #56	; 0x38
 8014cca:	2104      	movs	r1, #4
 8014ccc:	4684      	mov	ip, r0
 8014cce:	4249      	negs	r1, r1
 8014cd0:	4461      	add	r1, ip
 8014cd2:	468c      	mov	ip, r1
 8014cd4:	9a06      	ldr	r2, [sp, #24]
 8014cd6:	0093      	lsls	r3, r2, #2
 8014cd8:	449c      	add	ip, r3
 8014cda:	4661      	mov	r1, ip
 8014cdc:	4684      	mov	ip, r0
 8014cde:	910a      	str	r1, [sp, #40]	; 0x28
 8014ce0:	9903      	ldr	r1, [sp, #12]
 8014ce2:	3b08      	subs	r3, #8
 8014ce4:	4463      	add	r3, ip
 8014ce6:	468c      	mov	ip, r1
 8014ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8014cea:	9b00      	ldr	r3, [sp, #0]
 8014cec:	9200      	str	r2, [sp, #0]
 8014cee:	4463      	add	r3, ip
 8014cf0:	469b      	mov	fp, r3
 8014cf2:	9a00      	ldr	r2, [sp, #0]
 8014cf4:	9804      	ldr	r0, [sp, #16]
 8014cf6:	00d1      	lsls	r1, r2, #3
 8014cf8:	0003      	movs	r3, r0
 8014cfa:	468c      	mov	ip, r1
 8014cfc:	4463      	add	r3, ip
 8014cfe:	9108      	str	r1, [sp, #32]
 8014d00:	681e      	ldr	r6, [r3, #0]
 8014d02:	685f      	ldr	r7, [r3, #4]
 8014d04:	2a00      	cmp	r2, #0
 8014d06:	dd33      	ble.n	8014d70 <__kernel_rem_pio2+0x19c>
 8014d08:	4995      	ldr	r1, [pc, #596]	; (8014f60 <__kernel_rem_pio2+0x38c>)
 8014d0a:	4680      	mov	r8, r0
 8014d0c:	468c      	mov	ip, r1
 8014d0e:	4462      	add	r2, ip
 8014d10:	00d3      	lsls	r3, r2, #3
 8014d12:	4498      	add	r8, r3
 8014d14:	ab70      	add	r3, sp, #448	; 0x1c0
 8014d16:	469a      	mov	sl, r3
 8014d18:	ab0e      	add	r3, sp, #56	; 0x38
 8014d1a:	4699      	mov	r9, r3
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	4b91      	ldr	r3, [pc, #580]	; (8014f64 <__kernel_rem_pio2+0x390>)
 8014d20:	0030      	movs	r0, r6
 8014d22:	0039      	movs	r1, r7
 8014d24:	f7fd fcbc 	bl	80126a0 <__aeabi_dmul>
 8014d28:	f7fe fa90 	bl	801324c <__aeabi_d2iz>
 8014d2c:	f7fe fac4 	bl	80132b8 <__aeabi_i2d>
 8014d30:	2200      	movs	r2, #0
 8014d32:	4b8d      	ldr	r3, [pc, #564]	; (8014f68 <__kernel_rem_pio2+0x394>)
 8014d34:	0004      	movs	r4, r0
 8014d36:	000d      	movs	r5, r1
 8014d38:	f7fd fcb2 	bl	80126a0 <__aeabi_dmul>
 8014d3c:	0002      	movs	r2, r0
 8014d3e:	000b      	movs	r3, r1
 8014d40:	0030      	movs	r0, r6
 8014d42:	0039      	movs	r1, r7
 8014d44:	f7fd ff1e 	bl	8012b84 <__aeabi_dsub>
 8014d48:	f7fe fa80 	bl	801324c <__aeabi_d2iz>
 8014d4c:	464b      	mov	r3, r9
 8014d4e:	c301      	stmia	r3!, {r0}
 8014d50:	4699      	mov	r9, r3
 8014d52:	4643      	mov	r3, r8
 8014d54:	0020      	movs	r0, r4
 8014d56:	681a      	ldr	r2, [r3, #0]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	0029      	movs	r1, r5
 8014d5c:	f7fc fd7a 	bl	8011854 <__aeabi_dadd>
 8014d60:	2308      	movs	r3, #8
 8014d62:	425b      	negs	r3, r3
 8014d64:	469c      	mov	ip, r3
 8014d66:	44e0      	add	r8, ip
 8014d68:	0006      	movs	r6, r0
 8014d6a:	000f      	movs	r7, r1
 8014d6c:	45d0      	cmp	r8, sl
 8014d6e:	d1d5      	bne.n	8014d1c <__kernel_rem_pio2+0x148>
 8014d70:	9b05      	ldr	r3, [sp, #20]
 8014d72:	0030      	movs	r0, r6
 8014d74:	001a      	movs	r2, r3
 8014d76:	0039      	movs	r1, r7
 8014d78:	4698      	mov	r8, r3
 8014d7a:	f000 fce5 	bl	8015748 <scalbn>
 8014d7e:	23ff      	movs	r3, #255	; 0xff
 8014d80:	2200      	movs	r2, #0
 8014d82:	059b      	lsls	r3, r3, #22
 8014d84:	0004      	movs	r4, r0
 8014d86:	000d      	movs	r5, r1
 8014d88:	f7fd fc8a 	bl	80126a0 <__aeabi_dmul>
 8014d8c:	f000 fc38 	bl	8015600 <floor>
 8014d90:	2200      	movs	r2, #0
 8014d92:	4b76      	ldr	r3, [pc, #472]	; (8014f6c <__kernel_rem_pio2+0x398>)
 8014d94:	f7fd fc84 	bl	80126a0 <__aeabi_dmul>
 8014d98:	0002      	movs	r2, r0
 8014d9a:	000b      	movs	r3, r1
 8014d9c:	0020      	movs	r0, r4
 8014d9e:	0029      	movs	r1, r5
 8014da0:	f7fd fef0 	bl	8012b84 <__aeabi_dsub>
 8014da4:	000d      	movs	r5, r1
 8014da6:	0004      	movs	r4, r0
 8014da8:	f7fe fa50 	bl	801324c <__aeabi_d2iz>
 8014dac:	4681      	mov	r9, r0
 8014dae:	f7fe fa83 	bl	80132b8 <__aeabi_i2d>
 8014db2:	0002      	movs	r2, r0
 8014db4:	000b      	movs	r3, r1
 8014db6:	0020      	movs	r0, r4
 8014db8:	0029      	movs	r1, r5
 8014dba:	f7fd fee3 	bl	8012b84 <__aeabi_dsub>
 8014dbe:	0006      	movs	r6, r0
 8014dc0:	4640      	mov	r0, r8
 8014dc2:	000f      	movs	r7, r1
 8014dc4:	2800      	cmp	r0, #0
 8014dc6:	dc00      	bgt.n	8014dca <__kernel_rem_pio2+0x1f6>
 8014dc8:	e0ee      	b.n	8014fa8 <__kernel_rem_pio2+0x3d4>
 8014dca:	9b00      	ldr	r3, [sp, #0]
 8014dcc:	2118      	movs	r1, #24
 8014dce:	1e5a      	subs	r2, r3, #1
 8014dd0:	0092      	lsls	r2, r2, #2
 8014dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8014dd4:	589b      	ldr	r3, [r3, r2]
 8014dd6:	1a09      	subs	r1, r1, r0
 8014dd8:	001d      	movs	r5, r3
 8014dda:	410d      	asrs	r5, r1
 8014ddc:	44a9      	add	r9, r5
 8014dde:	408d      	lsls	r5, r1
 8014de0:	1b5d      	subs	r5, r3, r5
 8014de2:	ab0e      	add	r3, sp, #56	; 0x38
 8014de4:	509d      	str	r5, [r3, r2]
 8014de6:	2317      	movs	r3, #23
 8014de8:	1a1b      	subs	r3, r3, r0
 8014dea:	411d      	asrs	r5, r3
 8014dec:	2d00      	cmp	r5, #0
 8014dee:	dd2d      	ble.n	8014e4c <__kernel_rem_pio2+0x278>
 8014df0:	2301      	movs	r3, #1
 8014df2:	469c      	mov	ip, r3
 8014df4:	9b00      	ldr	r3, [sp, #0]
 8014df6:	44e1      	add	r9, ip
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	dc00      	bgt.n	8014dfe <__kernel_rem_pio2+0x22a>
 8014dfc:	e21c      	b.n	8015238 <__kernel_rem_pio2+0x664>
 8014dfe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014e00:	2301      	movs	r3, #1
 8014e02:	2c00      	cmp	r4, #0
 8014e04:	d000      	beq.n	8014e08 <__kernel_rem_pio2+0x234>
 8014e06:	e0b5      	b.n	8014f74 <__kernel_rem_pio2+0x3a0>
 8014e08:	9a00      	ldr	r2, [sp, #0]
 8014e0a:	2a01      	cmp	r2, #1
 8014e0c:	d009      	beq.n	8014e22 <__kernel_rem_pio2+0x24e>
 8014e0e:	0099      	lsls	r1, r3, #2
 8014e10:	aa0e      	add	r2, sp, #56	; 0x38
 8014e12:	5854      	ldr	r4, [r2, r1]
 8014e14:	3301      	adds	r3, #1
 8014e16:	2c00      	cmp	r4, #0
 8014e18:	d000      	beq.n	8014e1c <__kernel_rem_pio2+0x248>
 8014e1a:	e0ac      	b.n	8014f76 <__kernel_rem_pio2+0x3a2>
 8014e1c:	9a00      	ldr	r2, [sp, #0]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d1f5      	bne.n	8014e0e <__kernel_rem_pio2+0x23a>
 8014e22:	9b05      	ldr	r3, [sp, #20]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	dd0e      	ble.n	8014e46 <__kernel_rem_pio2+0x272>
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	d100      	bne.n	8014e2e <__kernel_rem_pio2+0x25a>
 8014e2c:	e1a8      	b.n	8015180 <__kernel_rem_pio2+0x5ac>
 8014e2e:	2b02      	cmp	r3, #2
 8014e30:	d109      	bne.n	8014e46 <__kernel_rem_pio2+0x272>
 8014e32:	9b00      	ldr	r3, [sp, #0]
 8014e34:	a90e      	add	r1, sp, #56	; 0x38
 8014e36:	1e5a      	subs	r2, r3, #1
 8014e38:	0092      	lsls	r2, r2, #2
 8014e3a:	ab0e      	add	r3, sp, #56	; 0x38
 8014e3c:	589b      	ldr	r3, [r3, r2]
 8014e3e:	9307      	str	r3, [sp, #28]
 8014e40:	029b      	lsls	r3, r3, #10
 8014e42:	0a9b      	lsrs	r3, r3, #10
 8014e44:	508b      	str	r3, [r1, r2]
 8014e46:	2d02      	cmp	r5, #2
 8014e48:	d100      	bne.n	8014e4c <__kernel_rem_pio2+0x278>
 8014e4a:	e0c1      	b.n	8014fd0 <__kernel_rem_pio2+0x3fc>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	2200      	movs	r2, #0
 8014e50:	0030      	movs	r0, r6
 8014e52:	0039      	movs	r1, r7
 8014e54:	f7fc fa16 	bl	8011284 <__aeabi_dcmpeq>
 8014e58:	9b00      	ldr	r3, [sp, #0]
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d100      	bne.n	8014e60 <__kernel_rem_pio2+0x28c>
 8014e5e:	e294      	b.n	801538a <__kernel_rem_pio2+0x7b6>
 8014e60:	9a06      	ldr	r2, [sp, #24]
 8014e62:	1e59      	subs	r1, r3, #1
 8014e64:	428a      	cmp	r2, r1
 8014e66:	dc10      	bgt.n	8014e8a <__kernel_rem_pio2+0x2b6>
 8014e68:	4a41      	ldr	r2, [pc, #260]	; (8014f70 <__kernel_rem_pio2+0x39c>)
 8014e6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e6c:	4694      	mov	ip, r2
 8014e6e:	aa0e      	add	r2, sp, #56	; 0x38
 8014e70:	4463      	add	r3, ip
 8014e72:	4694      	mov	ip, r2
 8014e74:	2200      	movs	r2, #0
 8014e76:	009b      	lsls	r3, r3, #2
 8014e78:	4463      	add	r3, ip
 8014e7a:	681c      	ldr	r4, [r3, #0]
 8014e7c:	3b04      	subs	r3, #4
 8014e7e:	4322      	orrs	r2, r4
 8014e80:	4283      	cmp	r3, r0
 8014e82:	d1fa      	bne.n	8014e7a <__kernel_rem_pio2+0x2a6>
 8014e84:	2a00      	cmp	r2, #0
 8014e86:	d000      	beq.n	8014e8a <__kernel_rem_pio2+0x2b6>
 8014e88:	e0c0      	b.n	801500c <__kernel_rem_pio2+0x438>
 8014e8a:	9b06      	ldr	r3, [sp, #24]
 8014e8c:	aa0e      	add	r2, sp, #56	; 0x38
 8014e8e:	3b01      	subs	r3, #1
 8014e90:	009b      	lsls	r3, r3, #2
 8014e92:	58d3      	ldr	r3, [r2, r3]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d000      	beq.n	8014e9a <__kernel_rem_pio2+0x2c6>
 8014e98:	e0b3      	b.n	8015002 <__kernel_rem_pio2+0x42e>
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e9e:	3b04      	subs	r3, #4
 8014ea0:	6859      	ldr	r1, [r3, #4]
 8014ea2:	3201      	adds	r2, #1
 8014ea4:	2900      	cmp	r1, #0
 8014ea6:	d0fa      	beq.n	8014e9e <__kernel_rem_pio2+0x2ca>
 8014ea8:	9b00      	ldr	r3, [sp, #0]
 8014eaa:	469c      	mov	ip, r3
 8014eac:	4462      	add	r2, ip
 8014eae:	0011      	movs	r1, r2
 8014eb0:	9207      	str	r2, [sp, #28]
 8014eb2:	001a      	movs	r2, r3
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	428b      	cmp	r3, r1
 8014eb8:	dc46      	bgt.n	8014f48 <__kernel_rem_pio2+0x374>
 8014eba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014ebc:	4663      	mov	r3, ip
 8014ebe:	4680      	mov	r8, r0
 8014ec0:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 8014ec2:	4443      	add	r3, r8
 8014ec4:	46a0      	mov	r8, r4
 8014ec6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	46a1      	mov	r9, r4
 8014ecc:	444a      	add	r2, r9
 8014ece:	4498      	add	r8, r3
 8014ed0:	00d3      	lsls	r3, r2, #3
 8014ed2:	aa22      	add	r2, sp, #136	; 0x88
 8014ed4:	4691      	mov	r9, r2
 8014ed6:	9a04      	ldr	r2, [sp, #16]
 8014ed8:	4499      	add	r9, r3
 8014eda:	4694      	mov	ip, r2
 8014edc:	9b08      	ldr	r3, [sp, #32]
 8014ede:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 8014ee0:	4463      	add	r3, ip
 8014ee2:	4684      	mov	ip, r0
 8014ee4:	4461      	add	r1, ip
 8014ee6:	4694      	mov	ip, r2
 8014ee8:	469a      	mov	sl, r3
 8014eea:	008b      	lsls	r3, r1, #2
 8014eec:	4463      	add	r3, ip
 8014eee:	9300      	str	r3, [sp, #0]
 8014ef0:	4643      	mov	r3, r8
 8014ef2:	6858      	ldr	r0, [r3, #4]
 8014ef4:	f7fe f9e0 	bl	80132b8 <__aeabi_i2d>
 8014ef8:	464b      	mov	r3, r9
 8014efa:	6018      	str	r0, [r3, #0]
 8014efc:	6059      	str	r1, [r3, #4]
 8014efe:	9b02      	ldr	r3, [sp, #8]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	db24      	blt.n	8014f4e <__kernel_rem_pio2+0x37a>
 8014f04:	464d      	mov	r5, r9
 8014f06:	9c03      	ldr	r4, [sp, #12]
 8014f08:	2600      	movs	r6, #0
 8014f0a:	2700      	movs	r7, #0
 8014f0c:	e001      	b.n	8014f12 <__kernel_rem_pio2+0x33e>
 8014f0e:	6828      	ldr	r0, [r5, #0]
 8014f10:	6869      	ldr	r1, [r5, #4]
 8014f12:	cc0c      	ldmia	r4!, {r2, r3}
 8014f14:	f7fd fbc4 	bl	80126a0 <__aeabi_dmul>
 8014f18:	0002      	movs	r2, r0
 8014f1a:	000b      	movs	r3, r1
 8014f1c:	0030      	movs	r0, r6
 8014f1e:	0039      	movs	r1, r7
 8014f20:	f7fc fc98 	bl	8011854 <__aeabi_dadd>
 8014f24:	3d08      	subs	r5, #8
 8014f26:	0006      	movs	r6, r0
 8014f28:	000f      	movs	r7, r1
 8014f2a:	455c      	cmp	r4, fp
 8014f2c:	d1ef      	bne.n	8014f0e <__kernel_rem_pio2+0x33a>
 8014f2e:	4653      	mov	r3, sl
 8014f30:	609e      	str	r6, [r3, #8]
 8014f32:	60df      	str	r7, [r3, #12]
 8014f34:	2304      	movs	r3, #4
 8014f36:	469c      	mov	ip, r3
 8014f38:	3304      	adds	r3, #4
 8014f3a:	44e0      	add	r8, ip
 8014f3c:	469c      	mov	ip, r3
 8014f3e:	9b00      	ldr	r3, [sp, #0]
 8014f40:	44e1      	add	r9, ip
 8014f42:	44e2      	add	sl, ip
 8014f44:	4598      	cmp	r8, r3
 8014f46:	d1d3      	bne.n	8014ef0 <__kernel_rem_pio2+0x31c>
 8014f48:	9b07      	ldr	r3, [sp, #28]
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	e6d1      	b.n	8014cf2 <__kernel_rem_pio2+0x11e>
 8014f4e:	2600      	movs	r6, #0
 8014f50:	2700      	movs	r7, #0
 8014f52:	e7ec      	b.n	8014f2e <__kernel_rem_pio2+0x35a>
 8014f54:	fffffd94 	.word	0xfffffd94
 8014f58:	0801f780 	.word	0x0801f780
 8014f5c:	fffffe18 	.word	0xfffffe18
 8014f60:	1fffffff 	.word	0x1fffffff
 8014f64:	3e700000 	.word	0x3e700000
 8014f68:	41700000 	.word	0x41700000
 8014f6c:	40200000 	.word	0x40200000
 8014f70:	3fffffff 	.word	0x3fffffff
 8014f74:	2100      	movs	r1, #0
 8014f76:	2280      	movs	r2, #128	; 0x80
 8014f78:	0452      	lsls	r2, r2, #17
 8014f7a:	1b14      	subs	r4, r2, r4
 8014f7c:	aa0e      	add	r2, sp, #56	; 0x38
 8014f7e:	5054      	str	r4, [r2, r1]
 8014f80:	9900      	ldr	r1, [sp, #0]
 8014f82:	4299      	cmp	r1, r3
 8014f84:	dd0e      	ble.n	8014fa4 <__kernel_rem_pio2+0x3d0>
 8014f86:	a80e      	add	r0, sp, #56	; 0x38
 8014f88:	4684      	mov	ip, r0
 8014f8a:	009b      	lsls	r3, r3, #2
 8014f8c:	aa0e      	add	r2, sp, #56	; 0x38
 8014f8e:	0089      	lsls	r1, r1, #2
 8014f90:	58d2      	ldr	r2, [r2, r3]
 8014f92:	4461      	add	r1, ip
 8014f94:	4463      	add	r3, ip
 8014f96:	48cf      	ldr	r0, [pc, #828]	; (80152d4 <__kernel_rem_pio2+0x700>)
 8014f98:	e000      	b.n	8014f9c <__kernel_rem_pio2+0x3c8>
 8014f9a:	681a      	ldr	r2, [r3, #0]
 8014f9c:	1a82      	subs	r2, r0, r2
 8014f9e:	c304      	stmia	r3!, {r2}
 8014fa0:	428b      	cmp	r3, r1
 8014fa2:	d1fa      	bne.n	8014f9a <__kernel_rem_pio2+0x3c6>
 8014fa4:	2401      	movs	r4, #1
 8014fa6:	e73c      	b.n	8014e22 <__kernel_rem_pio2+0x24e>
 8014fa8:	9b05      	ldr	r3, [sp, #20]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d106      	bne.n	8014fbc <__kernel_rem_pio2+0x3e8>
 8014fae:	9b00      	ldr	r3, [sp, #0]
 8014fb0:	aa0e      	add	r2, sp, #56	; 0x38
 8014fb2:	3b01      	subs	r3, #1
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	58d5      	ldr	r5, [r2, r3]
 8014fb8:	15ed      	asrs	r5, r5, #23
 8014fba:	e717      	b.n	8014dec <__kernel_rem_pio2+0x218>
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	4bc6      	ldr	r3, [pc, #792]	; (80152d8 <__kernel_rem_pio2+0x704>)
 8014fc0:	0030      	movs	r0, r6
 8014fc2:	f7fc f983 	bl	80112cc <__aeabi_dcmpge>
 8014fc6:	2800      	cmp	r0, #0
 8014fc8:	d000      	beq.n	8014fcc <__kernel_rem_pio2+0x3f8>
 8014fca:	e124      	b.n	8015216 <__kernel_rem_pio2+0x642>
 8014fcc:	2500      	movs	r5, #0
 8014fce:	e73d      	b.n	8014e4c <__kernel_rem_pio2+0x278>
 8014fd0:	0032      	movs	r2, r6
 8014fd2:	003b      	movs	r3, r7
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	49c1      	ldr	r1, [pc, #772]	; (80152dc <__kernel_rem_pio2+0x708>)
 8014fd8:	f7fd fdd4 	bl	8012b84 <__aeabi_dsub>
 8014fdc:	0006      	movs	r6, r0
 8014fde:	000f      	movs	r7, r1
 8014fe0:	2c00      	cmp	r4, #0
 8014fe2:	d100      	bne.n	8014fe6 <__kernel_rem_pio2+0x412>
 8014fe4:	e732      	b.n	8014e4c <__kernel_rem_pio2+0x278>
 8014fe6:	9a05      	ldr	r2, [sp, #20]
 8014fe8:	2000      	movs	r0, #0
 8014fea:	49bc      	ldr	r1, [pc, #752]	; (80152dc <__kernel_rem_pio2+0x708>)
 8014fec:	f000 fbac 	bl	8015748 <scalbn>
 8014ff0:	0002      	movs	r2, r0
 8014ff2:	000b      	movs	r3, r1
 8014ff4:	0030      	movs	r0, r6
 8014ff6:	0039      	movs	r1, r7
 8014ff8:	f7fd fdc4 	bl	8012b84 <__aeabi_dsub>
 8014ffc:	0006      	movs	r6, r0
 8014ffe:	000f      	movs	r7, r1
 8015000:	e724      	b.n	8014e4c <__kernel_rem_pio2+0x278>
 8015002:	2201      	movs	r2, #1
 8015004:	e750      	b.n	8014ea8 <__kernel_rem_pio2+0x2d4>
 8015006:	2600      	movs	r6, #0
 8015008:	2700      	movs	r7, #0
 801500a:	e654      	b.n	8014cb6 <__kernel_rem_pio2+0xe2>
 801500c:	464b      	mov	r3, r9
 801500e:	9a05      	ldr	r2, [sp, #20]
 8015010:	9307      	str	r3, [sp, #28]
 8015012:	4688      	mov	r8, r1
 8015014:	008b      	lsls	r3, r1, #2
 8015016:	a90e      	add	r1, sp, #56	; 0x38
 8015018:	58cb      	ldr	r3, [r1, r3]
 801501a:	3a18      	subs	r2, #24
 801501c:	9508      	str	r5, [sp, #32]
 801501e:	9205      	str	r2, [sp, #20]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d10d      	bne.n	8015040 <__kernel_rem_pio2+0x46c>
 8015024:	468c      	mov	ip, r1
 8015026:	4641      	mov	r1, r8
 8015028:	4bad      	ldr	r3, [pc, #692]	; (80152e0 <__kernel_rem_pio2+0x70c>)
 801502a:	4443      	add	r3, r8
 801502c:	009b      	lsls	r3, r3, #2
 801502e:	4463      	add	r3, ip
 8015030:	3b04      	subs	r3, #4
 8015032:	6858      	ldr	r0, [r3, #4]
 8015034:	3901      	subs	r1, #1
 8015036:	3a18      	subs	r2, #24
 8015038:	2800      	cmp	r0, #0
 801503a:	d0f9      	beq.n	8015030 <__kernel_rem_pio2+0x45c>
 801503c:	4688      	mov	r8, r1
 801503e:	9205      	str	r2, [sp, #20]
 8015040:	9a05      	ldr	r2, [sp, #20]
 8015042:	2000      	movs	r0, #0
 8015044:	49a5      	ldr	r1, [pc, #660]	; (80152dc <__kernel_rem_pio2+0x708>)
 8015046:	f000 fb7f 	bl	8015748 <scalbn>
 801504a:	4643      	mov	r3, r8
 801504c:	0004      	movs	r4, r0
 801504e:	000d      	movs	r5, r1
 8015050:	2b00      	cmp	r3, #0
 8015052:	da00      	bge.n	8015056 <__kernel_rem_pio2+0x482>
 8015054:	e205      	b.n	8015462 <__kernel_rem_pio2+0x88e>
 8015056:	009e      	lsls	r6, r3, #2
 8015058:	ab0e      	add	r3, sp, #56	; 0x38
 801505a:	469c      	mov	ip, r3
 801505c:	4643      	mov	r3, r8
 801505e:	00db      	lsls	r3, r3, #3
 8015060:	4466      	add	r6, ip
 8015062:	469c      	mov	ip, r3
 8015064:	9305      	str	r3, [sp, #20]
 8015066:	ab70      	add	r3, sp, #448	; 0x1c0
 8015068:	4699      	mov	r9, r3
 801506a:	9f04      	ldr	r7, [sp, #16]
 801506c:	4467      	add	r7, ip
 801506e:	9700      	str	r7, [sp, #0]
 8015070:	6830      	ldr	r0, [r6, #0]
 8015072:	f7fe f921 	bl	80132b8 <__aeabi_i2d>
 8015076:	0022      	movs	r2, r4
 8015078:	002b      	movs	r3, r5
 801507a:	f7fd fb11 	bl	80126a0 <__aeabi_dmul>
 801507e:	2200      	movs	r2, #0
 8015080:	6038      	str	r0, [r7, #0]
 8015082:	6079      	str	r1, [r7, #4]
 8015084:	4b97      	ldr	r3, [pc, #604]	; (80152e4 <__kernel_rem_pio2+0x710>)
 8015086:	0020      	movs	r0, r4
 8015088:	0029      	movs	r1, r5
 801508a:	f7fd fb09 	bl	80126a0 <__aeabi_dmul>
 801508e:	3f08      	subs	r7, #8
 8015090:	0004      	movs	r4, r0
 8015092:	000d      	movs	r5, r1
 8015094:	3e04      	subs	r6, #4
 8015096:	45b9      	cmp	r9, r7
 8015098:	d1ea      	bne.n	8015070 <__kernel_rem_pio2+0x49c>
 801509a:	ab4a      	add	r3, sp, #296	; 0x128
 801509c:	9303      	str	r3, [sp, #12]
 801509e:	469b      	mov	fp, r3
 80150a0:	2300      	movs	r3, #0
 80150a2:	469a      	mov	sl, r3
 80150a4:	9b06      	ldr	r3, [sp, #24]
 80150a6:	4642      	mov	r2, r8
 80150a8:	4699      	mov	r9, r3
 80150aa:	4643      	mov	r3, r8
 80150ac:	3201      	adds	r2, #1
 80150ae:	9202      	str	r2, [sp, #8]
 80150b0:	9304      	str	r3, [sp, #16]
 80150b2:	464b      	mov	r3, r9
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	da00      	bge.n	80150ba <__kernel_rem_pio2+0x4e6>
 80150b8:	e0aa      	b.n	8015210 <__kernel_rem_pio2+0x63c>
 80150ba:	2080      	movs	r0, #128	; 0x80
 80150bc:	4b8a      	ldr	r3, [pc, #552]	; (80152e8 <__kernel_rem_pio2+0x714>)
 80150be:	9d00      	ldr	r5, [sp, #0]
 80150c0:	4698      	mov	r8, r3
 80150c2:	05c0      	lsls	r0, r0, #23
 80150c4:	4989      	ldr	r1, [pc, #548]	; (80152ec <__kernel_rem_pio2+0x718>)
 80150c6:	2600      	movs	r6, #0
 80150c8:	2700      	movs	r7, #0
 80150ca:	2400      	movs	r4, #0
 80150cc:	e008      	b.n	80150e0 <__kernel_rem_pio2+0x50c>
 80150ce:	2308      	movs	r3, #8
 80150d0:	469c      	mov	ip, r3
 80150d2:	3508      	adds	r5, #8
 80150d4:	44e0      	add	r8, ip
 80150d6:	4554      	cmp	r4, sl
 80150d8:	dc11      	bgt.n	80150fe <__kernel_rem_pio2+0x52a>
 80150da:	4643      	mov	r3, r8
 80150dc:	6818      	ldr	r0, [r3, #0]
 80150de:	6859      	ldr	r1, [r3, #4]
 80150e0:	682a      	ldr	r2, [r5, #0]
 80150e2:	686b      	ldr	r3, [r5, #4]
 80150e4:	f7fd fadc 	bl	80126a0 <__aeabi_dmul>
 80150e8:	0002      	movs	r2, r0
 80150ea:	000b      	movs	r3, r1
 80150ec:	0030      	movs	r0, r6
 80150ee:	0039      	movs	r1, r7
 80150f0:	f7fc fbb0 	bl	8011854 <__aeabi_dadd>
 80150f4:	3401      	adds	r4, #1
 80150f6:	0006      	movs	r6, r0
 80150f8:	000f      	movs	r7, r1
 80150fa:	45a1      	cmp	r9, r4
 80150fc:	dae7      	bge.n	80150ce <__kernel_rem_pio2+0x4fa>
 80150fe:	465b      	mov	r3, fp
 8015100:	c3c0      	stmia	r3!, {r6, r7}
 8015102:	469b      	mov	fp, r3
 8015104:	2301      	movs	r3, #1
 8015106:	469c      	mov	ip, r3
 8015108:	9b00      	ldr	r3, [sp, #0]
 801510a:	44e2      	add	sl, ip
 801510c:	3b08      	subs	r3, #8
 801510e:	9300      	str	r3, [sp, #0]
 8015110:	9b02      	ldr	r3, [sp, #8]
 8015112:	459a      	cmp	sl, r3
 8015114:	d1cd      	bne.n	80150b2 <__kernel_rem_pio2+0x4de>
 8015116:	9b04      	ldr	r3, [sp, #16]
 8015118:	4698      	mov	r8, r3
 801511a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801511c:	2b02      	cmp	r3, #2
 801511e:	dd00      	ble.n	8015122 <__kernel_rem_pio2+0x54e>
 8015120:	e08e      	b.n	8015240 <__kernel_rem_pio2+0x66c>
 8015122:	2b00      	cmp	r3, #0
 8015124:	dc37      	bgt.n	8015196 <__kernel_rem_pio2+0x5c2>
 8015126:	d11f      	bne.n	8015168 <__kernel_rem_pio2+0x594>
 8015128:	9b05      	ldr	r3, [sp, #20]
 801512a:	2700      	movs	r7, #0
 801512c:	001d      	movs	r5, r3
 801512e:	9b03      	ldr	r3, [sp, #12]
 8015130:	2400      	movs	r4, #0
 8015132:	469c      	mov	ip, r3
 8015134:	001e      	movs	r6, r3
 8015136:	4465      	add	r5, ip
 8015138:	3e08      	subs	r6, #8
 801513a:	682a      	ldr	r2, [r5, #0]
 801513c:	686b      	ldr	r3, [r5, #4]
 801513e:	0038      	movs	r0, r7
 8015140:	0021      	movs	r1, r4
 8015142:	f7fc fb87 	bl	8011854 <__aeabi_dadd>
 8015146:	3d08      	subs	r5, #8
 8015148:	0007      	movs	r7, r0
 801514a:	000c      	movs	r4, r1
 801514c:	42ae      	cmp	r6, r5
 801514e:	d1f4      	bne.n	801513a <__kernel_rem_pio2+0x566>
 8015150:	9b08      	ldr	r3, [sp, #32]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d003      	beq.n	801515e <__kernel_rem_pio2+0x58a>
 8015156:	2380      	movs	r3, #128	; 0x80
 8015158:	061b      	lsls	r3, r3, #24
 801515a:	469c      	mov	ip, r3
 801515c:	4464      	add	r4, ip
 801515e:	003a      	movs	r2, r7
 8015160:	0023      	movs	r3, r4
 8015162:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015164:	600a      	str	r2, [r1, #0]
 8015166:	604b      	str	r3, [r1, #4]
 8015168:	2007      	movs	r0, #7
 801516a:	9b07      	ldr	r3, [sp, #28]
 801516c:	4018      	ands	r0, r3
 801516e:	239b      	movs	r3, #155	; 0x9b
 8015170:	009b      	lsls	r3, r3, #2
 8015172:	449d      	add	sp, r3
 8015174:	bc3c      	pop	{r2, r3, r4, r5}
 8015176:	4690      	mov	r8, r2
 8015178:	4699      	mov	r9, r3
 801517a:	46a2      	mov	sl, r4
 801517c:	46ab      	mov	fp, r5
 801517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015180:	9b00      	ldr	r3, [sp, #0]
 8015182:	a90e      	add	r1, sp, #56	; 0x38
 8015184:	1e5a      	subs	r2, r3, #1
 8015186:	0092      	lsls	r2, r2, #2
 8015188:	ab0e      	add	r3, sp, #56	; 0x38
 801518a:	589b      	ldr	r3, [r3, r2]
 801518c:	9307      	str	r3, [sp, #28]
 801518e:	025b      	lsls	r3, r3, #9
 8015190:	0a5b      	lsrs	r3, r3, #9
 8015192:	508b      	str	r3, [r1, r2]
 8015194:	e657      	b.n	8014e46 <__kernel_rem_pio2+0x272>
 8015196:	4643      	mov	r3, r8
 8015198:	2b00      	cmp	r3, #0
 801519a:	da00      	bge.n	801519e <__kernel_rem_pio2+0x5ca>
 801519c:	e170      	b.n	8015480 <__kernel_rem_pio2+0x8ac>
 801519e:	2000      	movs	r0, #0
 80151a0:	2100      	movs	r1, #0
 80151a2:	00db      	lsls	r3, r3, #3
 80151a4:	aa4a      	add	r2, sp, #296	; 0x128
 80151a6:	18d6      	adds	r6, r2, r3
 80151a8:	af48      	add	r7, sp, #288	; 0x120
 80151aa:	6832      	ldr	r2, [r6, #0]
 80151ac:	6873      	ldr	r3, [r6, #4]
 80151ae:	3e08      	subs	r6, #8
 80151b0:	f7fc fb50 	bl	8011854 <__aeabi_dadd>
 80151b4:	42b7      	cmp	r7, r6
 80151b6:	d1f8      	bne.n	80151aa <__kernel_rem_pio2+0x5d6>
 80151b8:	9b08      	ldr	r3, [sp, #32]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d000      	beq.n	80151c0 <__kernel_rem_pio2+0x5ec>
 80151be:	e125      	b.n	801540c <__kernel_rem_pio2+0x838>
 80151c0:	000b      	movs	r3, r1
 80151c2:	0002      	movs	r2, r0
 80151c4:	984a      	ldr	r0, [sp, #296]	; 0x128
 80151c6:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80151c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80151ca:	6022      	str	r2, [r4, #0]
 80151cc:	6063      	str	r3, [r4, #4]
 80151ce:	f7fd fcd9 	bl	8012b84 <__aeabi_dsub>
 80151d2:	4643      	mov	r3, r8
 80151d4:	0007      	movs	r7, r0
 80151d6:	000c      	movs	r4, r1
 80151d8:	2b00      	cmp	r3, #0
 80151da:	dd13      	ble.n	8015204 <__kernel_rem_pio2+0x630>
 80151dc:	2501      	movs	r5, #1
 80151de:	ae4c      	add	r6, sp, #304	; 0x130
 80151e0:	46b1      	mov	r9, r6
 80151e2:	0038      	movs	r0, r7
 80151e4:	002e      	movs	r6, r5
 80151e6:	0021      	movs	r1, r4
 80151e8:	464c      	mov	r4, r9
 80151ea:	3601      	adds	r6, #1
 80151ec:	cc0c      	ldmia	r4!, {r2, r3}
 80151ee:	f7fc fb31 	bl	8011854 <__aeabi_dadd>
 80151f2:	46a1      	mov	r9, r4
 80151f4:	45b0      	cmp	r8, r6
 80151f6:	daf7      	bge.n	80151e8 <__kernel_rem_pio2+0x614>
 80151f8:	9b08      	ldr	r3, [sp, #32]
 80151fa:	0007      	movs	r7, r0
 80151fc:	000c      	movs	r4, r1
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d000      	beq.n	8015204 <__kernel_rem_pio2+0x630>
 8015202:	e115      	b.n	8015430 <__kernel_rem_pio2+0x85c>
 8015204:	003a      	movs	r2, r7
 8015206:	0023      	movs	r3, r4
 8015208:	990d      	ldr	r1, [sp, #52]	; 0x34
 801520a:	608a      	str	r2, [r1, #8]
 801520c:	60cb      	str	r3, [r1, #12]
 801520e:	e7ab      	b.n	8015168 <__kernel_rem_pio2+0x594>
 8015210:	2600      	movs	r6, #0
 8015212:	2700      	movs	r7, #0
 8015214:	e773      	b.n	80150fe <__kernel_rem_pio2+0x52a>
 8015216:	2301      	movs	r3, #1
 8015218:	469c      	mov	ip, r3
 801521a:	9b00      	ldr	r3, [sp, #0]
 801521c:	44e1      	add	r9, ip
 801521e:	2502      	movs	r5, #2
 8015220:	2b00      	cmp	r3, #0
 8015222:	dd00      	ble.n	8015226 <__kernel_rem_pio2+0x652>
 8015224:	e5eb      	b.n	8014dfe <__kernel_rem_pio2+0x22a>
 8015226:	0032      	movs	r2, r6
 8015228:	003b      	movs	r3, r7
 801522a:	2000      	movs	r0, #0
 801522c:	492b      	ldr	r1, [pc, #172]	; (80152dc <__kernel_rem_pio2+0x708>)
 801522e:	f7fd fca9 	bl	8012b84 <__aeabi_dsub>
 8015232:	0006      	movs	r6, r0
 8015234:	000f      	movs	r7, r1
 8015236:	e609      	b.n	8014e4c <__kernel_rem_pio2+0x278>
 8015238:	2400      	movs	r4, #0
 801523a:	e5f2      	b.n	8014e22 <__kernel_rem_pio2+0x24e>
 801523c:	ab4a      	add	r3, sp, #296	; 0x128
 801523e:	9303      	str	r3, [sp, #12]
 8015240:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015242:	2b03      	cmp	r3, #3
 8015244:	d000      	beq.n	8015248 <__kernel_rem_pio2+0x674>
 8015246:	e78f      	b.n	8015168 <__kernel_rem_pio2+0x594>
 8015248:	4643      	mov	r3, r8
 801524a:	2b00      	cmp	r3, #0
 801524c:	dc00      	bgt.n	8015250 <__kernel_rem_pio2+0x67c>
 801524e:	e114      	b.n	801547a <__kernel_rem_pio2+0x8a6>
 8015250:	9a03      	ldr	r2, [sp, #12]
 8015252:	00db      	lsls	r3, r3, #3
 8015254:	469b      	mov	fp, r3
 8015256:	0013      	movs	r3, r2
 8015258:	4691      	mov	r9, r2
 801525a:	445b      	add	r3, fp
 801525c:	681e      	ldr	r6, [r3, #0]
 801525e:	685f      	ldr	r7, [r3, #4]
 8015260:	4b23      	ldr	r3, [pc, #140]	; (80152f0 <__kernel_rem_pio2+0x71c>)
 8015262:	4443      	add	r3, r8
 8015264:	9302      	str	r3, [sp, #8]
 8015266:	00db      	lsls	r3, r3, #3
 8015268:	4499      	add	r9, r3
 801526a:	ab48      	add	r3, sp, #288	; 0x120
 801526c:	469a      	mov	sl, r3
 801526e:	464b      	mov	r3, r9
 8015270:	685c      	ldr	r4, [r3, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	0018      	movs	r0, r3
 8015276:	0021      	movs	r1, r4
 8015278:	0032      	movs	r2, r6
 801527a:	003b      	movs	r3, r7
 801527c:	9000      	str	r0, [sp, #0]
 801527e:	9101      	str	r1, [sp, #4]
 8015280:	f7fc fae8 	bl	8011854 <__aeabi_dadd>
 8015284:	0004      	movs	r4, r0
 8015286:	000d      	movs	r5, r1
 8015288:	0002      	movs	r2, r0
 801528a:	000b      	movs	r3, r1
 801528c:	9800      	ldr	r0, [sp, #0]
 801528e:	9901      	ldr	r1, [sp, #4]
 8015290:	f7fd fc78 	bl	8012b84 <__aeabi_dsub>
 8015294:	003b      	movs	r3, r7
 8015296:	0032      	movs	r2, r6
 8015298:	f7fc fadc 	bl	8011854 <__aeabi_dadd>
 801529c:	464b      	mov	r3, r9
 801529e:	6098      	str	r0, [r3, #8]
 80152a0:	60d9      	str	r1, [r3, #12]
 80152a2:	601c      	str	r4, [r3, #0]
 80152a4:	605d      	str	r5, [r3, #4]
 80152a6:	2308      	movs	r3, #8
 80152a8:	425b      	negs	r3, r3
 80152aa:	469c      	mov	ip, r3
 80152ac:	44e1      	add	r9, ip
 80152ae:	0026      	movs	r6, r4
 80152b0:	002f      	movs	r7, r5
 80152b2:	45ca      	cmp	sl, r9
 80152b4:	d1db      	bne.n	801526e <__kernel_rem_pio2+0x69a>
 80152b6:	4643      	mov	r3, r8
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	dc00      	bgt.n	80152be <__kernel_rem_pio2+0x6ea>
 80152bc:	e0e3      	b.n	8015486 <__kernel_rem_pio2+0x8b2>
 80152be:	9a03      	ldr	r2, [sp, #12]
 80152c0:	0013      	movs	r3, r2
 80152c2:	445b      	add	r3, fp
 80152c4:	681e      	ldr	r6, [r3, #0]
 80152c6:	685f      	ldr	r7, [r3, #4]
 80152c8:	9b02      	ldr	r3, [sp, #8]
 80152ca:	00db      	lsls	r3, r3, #3
 80152cc:	4699      	mov	r9, r3
 80152ce:	444a      	add	r2, r9
 80152d0:	4690      	mov	r8, r2
 80152d2:	e010      	b.n	80152f6 <__kernel_rem_pio2+0x722>
 80152d4:	00ffffff 	.word	0x00ffffff
 80152d8:	3fe00000 	.word	0x3fe00000
 80152dc:	3ff00000 	.word	0x3ff00000
 80152e0:	3fffffff 	.word	0x3fffffff
 80152e4:	3e700000 	.word	0x3e700000
 80152e8:	0801f740 	.word	0x0801f740
 80152ec:	3ff921fb 	.word	0x3ff921fb
 80152f0:	1fffffff 	.word	0x1fffffff
 80152f4:	4698      	mov	r8, r3
 80152f6:	4643      	mov	r3, r8
 80152f8:	685c      	ldr	r4, [r3, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	0018      	movs	r0, r3
 80152fe:	0021      	movs	r1, r4
 8015300:	0032      	movs	r2, r6
 8015302:	003b      	movs	r3, r7
 8015304:	9000      	str	r0, [sp, #0]
 8015306:	9101      	str	r1, [sp, #4]
 8015308:	f7fc faa4 	bl	8011854 <__aeabi_dadd>
 801530c:	0004      	movs	r4, r0
 801530e:	000d      	movs	r5, r1
 8015310:	0002      	movs	r2, r0
 8015312:	000b      	movs	r3, r1
 8015314:	9800      	ldr	r0, [sp, #0]
 8015316:	9901      	ldr	r1, [sp, #4]
 8015318:	f7fd fc34 	bl	8012b84 <__aeabi_dsub>
 801531c:	0032      	movs	r2, r6
 801531e:	003b      	movs	r3, r7
 8015320:	f7fc fa98 	bl	8011854 <__aeabi_dadd>
 8015324:	4643      	mov	r3, r8
 8015326:	9a03      	ldr	r2, [sp, #12]
 8015328:	6098      	str	r0, [r3, #8]
 801532a:	60d9      	str	r1, [r3, #12]
 801532c:	601c      	str	r4, [r3, #0]
 801532e:	605d      	str	r5, [r3, #4]
 8015330:	3b08      	subs	r3, #8
 8015332:	0026      	movs	r6, r4
 8015334:	002f      	movs	r7, r5
 8015336:	429a      	cmp	r2, r3
 8015338:	d1dc      	bne.n	80152f4 <__kernel_rem_pio2+0x720>
 801533a:	464d      	mov	r5, r9
 801533c:	4694      	mov	ip, r2
 801533e:	2600      	movs	r6, #0
 8015340:	2400      	movs	r4, #0
 8015342:	4647      	mov	r7, r8
 8015344:	3508      	adds	r5, #8
 8015346:	4465      	add	r5, ip
 8015348:	682a      	ldr	r2, [r5, #0]
 801534a:	686b      	ldr	r3, [r5, #4]
 801534c:	0030      	movs	r0, r6
 801534e:	0021      	movs	r1, r4
 8015350:	f7fc fa80 	bl	8011854 <__aeabi_dadd>
 8015354:	3d08      	subs	r5, #8
 8015356:	0006      	movs	r6, r0
 8015358:	000c      	movs	r4, r1
 801535a:	42af      	cmp	r7, r5
 801535c:	d1f4      	bne.n	8015348 <__kernel_rem_pio2+0x774>
 801535e:	9b03      	ldr	r3, [sp, #12]
 8015360:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8015362:	685d      	ldr	r5, [r3, #4]
 8015364:	6899      	ldr	r1, [r3, #8]
 8015366:	68d8      	ldr	r0, [r3, #12]
 8015368:	9b08      	ldr	r3, [sp, #32]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d065      	beq.n	801543a <__kernel_rem_pio2+0x866>
 801536e:	2280      	movs	r2, #128	; 0x80
 8015370:	0612      	lsls	r2, r2, #24
 8015372:	4694      	mov	ip, r2
 8015374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015376:	4465      	add	r5, ip
 8015378:	4460      	add	r0, ip
 801537a:	4464      	add	r4, ip
 801537c:	601f      	str	r7, [r3, #0]
 801537e:	605d      	str	r5, [r3, #4]
 8015380:	6099      	str	r1, [r3, #8]
 8015382:	60d8      	str	r0, [r3, #12]
 8015384:	611e      	str	r6, [r3, #16]
 8015386:	615c      	str	r4, [r3, #20]
 8015388:	e6ee      	b.n	8015168 <__kernel_rem_pio2+0x594>
 801538a:	469a      	mov	sl, r3
 801538c:	464b      	mov	r3, r9
 801538e:	9307      	str	r3, [sp, #28]
 8015390:	9b05      	ldr	r3, [sp, #20]
 8015392:	0030      	movs	r0, r6
 8015394:	425a      	negs	r2, r3
 8015396:	0039      	movs	r1, r7
 8015398:	9508      	str	r5, [sp, #32]
 801539a:	f000 f9d5 	bl	8015748 <scalbn>
 801539e:	2200      	movs	r2, #0
 80153a0:	4b3a      	ldr	r3, [pc, #232]	; (801548c <__kernel_rem_pio2+0x8b8>)
 80153a2:	0006      	movs	r6, r0
 80153a4:	000f      	movs	r7, r1
 80153a6:	f7fb ff91 	bl	80112cc <__aeabi_dcmpge>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d024      	beq.n	80153f8 <__kernel_rem_pio2+0x824>
 80153ae:	4b38      	ldr	r3, [pc, #224]	; (8015490 <__kernel_rem_pio2+0x8bc>)
 80153b0:	2200      	movs	r2, #0
 80153b2:	0030      	movs	r0, r6
 80153b4:	0039      	movs	r1, r7
 80153b6:	f7fd f973 	bl	80126a0 <__aeabi_dmul>
 80153ba:	f7fd ff47 	bl	801324c <__aeabi_d2iz>
 80153be:	4652      	mov	r2, sl
 80153c0:	0004      	movs	r4, r0
 80153c2:	0095      	lsls	r5, r2, #2
 80153c4:	f7fd ff78 	bl	80132b8 <__aeabi_i2d>
 80153c8:	2200      	movs	r2, #0
 80153ca:	4b30      	ldr	r3, [pc, #192]	; (801548c <__kernel_rem_pio2+0x8b8>)
 80153cc:	f7fd f968 	bl	80126a0 <__aeabi_dmul>
 80153d0:	0002      	movs	r2, r0
 80153d2:	000b      	movs	r3, r1
 80153d4:	0030      	movs	r0, r6
 80153d6:	0039      	movs	r1, r7
 80153d8:	f7fd fbd4 	bl	8012b84 <__aeabi_dsub>
 80153dc:	f7fd ff36 	bl	801324c <__aeabi_d2iz>
 80153e0:	aa0e      	add	r2, sp, #56	; 0x38
 80153e2:	5150      	str	r0, [r2, r5]
 80153e4:	2201      	movs	r2, #1
 80153e6:	9b05      	ldr	r3, [sp, #20]
 80153e8:	4452      	add	r2, sl
 80153ea:	3318      	adds	r3, #24
 80153ec:	4690      	mov	r8, r2
 80153ee:	9305      	str	r3, [sp, #20]
 80153f0:	0093      	lsls	r3, r2, #2
 80153f2:	aa0e      	add	r2, sp, #56	; 0x38
 80153f4:	50d4      	str	r4, [r2, r3]
 80153f6:	e623      	b.n	8015040 <__kernel_rem_pio2+0x46c>
 80153f8:	4653      	mov	r3, sl
 80153fa:	0030      	movs	r0, r6
 80153fc:	0039      	movs	r1, r7
 80153fe:	009c      	lsls	r4, r3, #2
 8015400:	f7fd ff24 	bl	801324c <__aeabi_d2iz>
 8015404:	ab0e      	add	r3, sp, #56	; 0x38
 8015406:	5118      	str	r0, [r3, r4]
 8015408:	46d0      	mov	r8, sl
 801540a:	e619      	b.n	8015040 <__kernel_rem_pio2+0x46c>
 801540c:	2380      	movs	r3, #128	; 0x80
 801540e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015410:	061b      	lsls	r3, r3, #24
 8015412:	18cb      	adds	r3, r1, r3
 8015414:	6010      	str	r0, [r2, #0]
 8015416:	6053      	str	r3, [r2, #4]
 8015418:	000b      	movs	r3, r1
 801541a:	0002      	movs	r2, r0
 801541c:	984a      	ldr	r0, [sp, #296]	; 0x128
 801541e:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8015420:	f7fd fbb0 	bl	8012b84 <__aeabi_dsub>
 8015424:	4643      	mov	r3, r8
 8015426:	0007      	movs	r7, r0
 8015428:	000c      	movs	r4, r1
 801542a:	2b00      	cmp	r3, #0
 801542c:	dd00      	ble.n	8015430 <__kernel_rem_pio2+0x85c>
 801542e:	e6d5      	b.n	80151dc <__kernel_rem_pio2+0x608>
 8015430:	2380      	movs	r3, #128	; 0x80
 8015432:	061b      	lsls	r3, r3, #24
 8015434:	469c      	mov	ip, r3
 8015436:	4464      	add	r4, ip
 8015438:	e6e4      	b.n	8015204 <__kernel_rem_pio2+0x630>
 801543a:	002b      	movs	r3, r5
 801543c:	003a      	movs	r2, r7
 801543e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015440:	602a      	str	r2, [r5, #0]
 8015442:	606b      	str	r3, [r5, #4]
 8015444:	000a      	movs	r2, r1
 8015446:	0003      	movs	r3, r0
 8015448:	60aa      	str	r2, [r5, #8]
 801544a:	60eb      	str	r3, [r5, #12]
 801544c:	0032      	movs	r2, r6
 801544e:	0023      	movs	r3, r4
 8015450:	612a      	str	r2, [r5, #16]
 8015452:	616b      	str	r3, [r5, #20]
 8015454:	e688      	b.n	8015168 <__kernel_rem_pio2+0x594>
 8015456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015458:	00db      	lsls	r3, r3, #3
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	ab72      	add	r3, sp, #456	; 0x1c8
 801545e:	9304      	str	r3, [sp, #16]
 8015460:	e432      	b.n	8014cc8 <__kernel_rem_pio2+0xf4>
 8015462:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015464:	2b02      	cmp	r3, #2
 8015466:	dd00      	ble.n	801546a <__kernel_rem_pio2+0x896>
 8015468:	e6e8      	b.n	801523c <__kernel_rem_pio2+0x668>
 801546a:	2b00      	cmp	r3, #0
 801546c:	dd00      	ble.n	8015470 <__kernel_rem_pio2+0x89c>
 801546e:	e692      	b.n	8015196 <__kernel_rem_pio2+0x5c2>
 8015470:	d000      	beq.n	8015474 <__kernel_rem_pio2+0x8a0>
 8015472:	e679      	b.n	8015168 <__kernel_rem_pio2+0x594>
 8015474:	2700      	movs	r7, #0
 8015476:	2400      	movs	r4, #0
 8015478:	e66a      	b.n	8015150 <__kernel_rem_pio2+0x57c>
 801547a:	2600      	movs	r6, #0
 801547c:	2400      	movs	r4, #0
 801547e:	e76e      	b.n	801535e <__kernel_rem_pio2+0x78a>
 8015480:	2000      	movs	r0, #0
 8015482:	2100      	movs	r1, #0
 8015484:	e698      	b.n	80151b8 <__kernel_rem_pio2+0x5e4>
 8015486:	2600      	movs	r6, #0
 8015488:	0034      	movs	r4, r6
 801548a:	e768      	b.n	801535e <__kernel_rem_pio2+0x78a>
 801548c:	41700000 	.word	0x41700000
 8015490:	3e700000 	.word	0x3e700000

08015494 <__kernel_sin>:
 8015494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015496:	46ce      	mov	lr, r9
 8015498:	4647      	mov	r7, r8
 801549a:	b580      	push	{r7, lr}
 801549c:	b087      	sub	sp, #28
 801549e:	9200      	str	r2, [sp, #0]
 80154a0:	9301      	str	r3, [sp, #4]
 80154a2:	4a47      	ldr	r2, [pc, #284]	; (80155c0 <__kernel_sin+0x12c>)
 80154a4:	004b      	lsls	r3, r1, #1
 80154a6:	4681      	mov	r9, r0
 80154a8:	4688      	mov	r8, r1
 80154aa:	085b      	lsrs	r3, r3, #1
 80154ac:	4293      	cmp	r3, r2
 80154ae:	dc07      	bgt.n	80154c0 <__kernel_sin+0x2c>
 80154b0:	4641      	mov	r1, r8
 80154b2:	4648      	mov	r0, r9
 80154b4:	f7fd feca 	bl	801324c <__aeabi_d2iz>
 80154b8:	4641      	mov	r1, r8
 80154ba:	1e03      	subs	r3, r0, #0
 80154bc:	4648      	mov	r0, r9
 80154be:	d066      	beq.n	801558e <__kernel_sin+0xfa>
 80154c0:	464a      	mov	r2, r9
 80154c2:	4643      	mov	r3, r8
 80154c4:	4648      	mov	r0, r9
 80154c6:	4641      	mov	r1, r8
 80154c8:	f7fd f8ea 	bl	80126a0 <__aeabi_dmul>
 80154cc:	0004      	movs	r4, r0
 80154ce:	000d      	movs	r5, r1
 80154d0:	0002      	movs	r2, r0
 80154d2:	000b      	movs	r3, r1
 80154d4:	4648      	mov	r0, r9
 80154d6:	4641      	mov	r1, r8
 80154d8:	f7fd f8e2 	bl	80126a0 <__aeabi_dmul>
 80154dc:	4a39      	ldr	r2, [pc, #228]	; (80155c4 <__kernel_sin+0x130>)
 80154de:	4b3a      	ldr	r3, [pc, #232]	; (80155c8 <__kernel_sin+0x134>)
 80154e0:	0006      	movs	r6, r0
 80154e2:	000f      	movs	r7, r1
 80154e4:	0020      	movs	r0, r4
 80154e6:	0029      	movs	r1, r5
 80154e8:	f7fd f8da 	bl	80126a0 <__aeabi_dmul>
 80154ec:	4a37      	ldr	r2, [pc, #220]	; (80155cc <__kernel_sin+0x138>)
 80154ee:	4b38      	ldr	r3, [pc, #224]	; (80155d0 <__kernel_sin+0x13c>)
 80154f0:	f7fd fb48 	bl	8012b84 <__aeabi_dsub>
 80154f4:	0022      	movs	r2, r4
 80154f6:	002b      	movs	r3, r5
 80154f8:	f7fd f8d2 	bl	80126a0 <__aeabi_dmul>
 80154fc:	4a35      	ldr	r2, [pc, #212]	; (80155d4 <__kernel_sin+0x140>)
 80154fe:	4b36      	ldr	r3, [pc, #216]	; (80155d8 <__kernel_sin+0x144>)
 8015500:	f7fc f9a8 	bl	8011854 <__aeabi_dadd>
 8015504:	0022      	movs	r2, r4
 8015506:	002b      	movs	r3, r5
 8015508:	f7fd f8ca 	bl	80126a0 <__aeabi_dmul>
 801550c:	4a33      	ldr	r2, [pc, #204]	; (80155dc <__kernel_sin+0x148>)
 801550e:	4b34      	ldr	r3, [pc, #208]	; (80155e0 <__kernel_sin+0x14c>)
 8015510:	f7fd fb38 	bl	8012b84 <__aeabi_dsub>
 8015514:	0022      	movs	r2, r4
 8015516:	002b      	movs	r3, r5
 8015518:	f7fd f8c2 	bl	80126a0 <__aeabi_dmul>
 801551c:	4b31      	ldr	r3, [pc, #196]	; (80155e4 <__kernel_sin+0x150>)
 801551e:	4a32      	ldr	r2, [pc, #200]	; (80155e8 <__kernel_sin+0x154>)
 8015520:	f7fc f998 	bl	8011854 <__aeabi_dadd>
 8015524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015526:	9002      	str	r0, [sp, #8]
 8015528:	9103      	str	r1, [sp, #12]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d034      	beq.n	8015598 <__kernel_sin+0x104>
 801552e:	9800      	ldr	r0, [sp, #0]
 8015530:	9901      	ldr	r1, [sp, #4]
 8015532:	2200      	movs	r2, #0
 8015534:	4b2d      	ldr	r3, [pc, #180]	; (80155ec <__kernel_sin+0x158>)
 8015536:	f7fd f8b3 	bl	80126a0 <__aeabi_dmul>
 801553a:	9a02      	ldr	r2, [sp, #8]
 801553c:	9b03      	ldr	r3, [sp, #12]
 801553e:	9004      	str	r0, [sp, #16]
 8015540:	9105      	str	r1, [sp, #20]
 8015542:	0030      	movs	r0, r6
 8015544:	0039      	movs	r1, r7
 8015546:	f7fd f8ab 	bl	80126a0 <__aeabi_dmul>
 801554a:	0002      	movs	r2, r0
 801554c:	000b      	movs	r3, r1
 801554e:	9804      	ldr	r0, [sp, #16]
 8015550:	9905      	ldr	r1, [sp, #20]
 8015552:	f7fd fb17 	bl	8012b84 <__aeabi_dsub>
 8015556:	0022      	movs	r2, r4
 8015558:	002b      	movs	r3, r5
 801555a:	f7fd f8a1 	bl	80126a0 <__aeabi_dmul>
 801555e:	9a00      	ldr	r2, [sp, #0]
 8015560:	9b01      	ldr	r3, [sp, #4]
 8015562:	f7fd fb0f 	bl	8012b84 <__aeabi_dsub>
 8015566:	4a22      	ldr	r2, [pc, #136]	; (80155f0 <__kernel_sin+0x15c>)
 8015568:	0004      	movs	r4, r0
 801556a:	000d      	movs	r5, r1
 801556c:	4b21      	ldr	r3, [pc, #132]	; (80155f4 <__kernel_sin+0x160>)
 801556e:	0030      	movs	r0, r6
 8015570:	0039      	movs	r1, r7
 8015572:	f7fd f895 	bl	80126a0 <__aeabi_dmul>
 8015576:	0002      	movs	r2, r0
 8015578:	000b      	movs	r3, r1
 801557a:	0020      	movs	r0, r4
 801557c:	0029      	movs	r1, r5
 801557e:	f7fc f969 	bl	8011854 <__aeabi_dadd>
 8015582:	0002      	movs	r2, r0
 8015584:	000b      	movs	r3, r1
 8015586:	4648      	mov	r0, r9
 8015588:	4641      	mov	r1, r8
 801558a:	f7fd fafb 	bl	8012b84 <__aeabi_dsub>
 801558e:	b007      	add	sp, #28
 8015590:	bc0c      	pop	{r2, r3}
 8015592:	4690      	mov	r8, r2
 8015594:	4699      	mov	r9, r3
 8015596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015598:	0002      	movs	r2, r0
 801559a:	000b      	movs	r3, r1
 801559c:	0020      	movs	r0, r4
 801559e:	0029      	movs	r1, r5
 80155a0:	f7fd f87e 	bl	80126a0 <__aeabi_dmul>
 80155a4:	4a12      	ldr	r2, [pc, #72]	; (80155f0 <__kernel_sin+0x15c>)
 80155a6:	4b13      	ldr	r3, [pc, #76]	; (80155f4 <__kernel_sin+0x160>)
 80155a8:	f7fd faec 	bl	8012b84 <__aeabi_dsub>
 80155ac:	0032      	movs	r2, r6
 80155ae:	003b      	movs	r3, r7
 80155b0:	f7fd f876 	bl	80126a0 <__aeabi_dmul>
 80155b4:	464a      	mov	r2, r9
 80155b6:	4643      	mov	r3, r8
 80155b8:	f7fc f94c 	bl	8011854 <__aeabi_dadd>
 80155bc:	e7e7      	b.n	801558e <__kernel_sin+0xfa>
 80155be:	46c0      	nop			; (mov r8, r8)
 80155c0:	3e3fffff 	.word	0x3e3fffff
 80155c4:	5acfd57c 	.word	0x5acfd57c
 80155c8:	3de5d93a 	.word	0x3de5d93a
 80155cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80155d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80155d4:	57b1fe7d 	.word	0x57b1fe7d
 80155d8:	3ec71de3 	.word	0x3ec71de3
 80155dc:	19c161d5 	.word	0x19c161d5
 80155e0:	3f2a01a0 	.word	0x3f2a01a0
 80155e4:	3f811111 	.word	0x3f811111
 80155e8:	1110f8a6 	.word	0x1110f8a6
 80155ec:	3fe00000 	.word	0x3fe00000
 80155f0:	55555549 	.word	0x55555549
 80155f4:	3fc55555 	.word	0x3fc55555

080155f8 <fabs>:
 80155f8:	0049      	lsls	r1, r1, #1
 80155fa:	084b      	lsrs	r3, r1, #1
 80155fc:	0019      	movs	r1, r3
 80155fe:	4770      	bx	lr

08015600 <floor>:
 8015600:	4a47      	ldr	r2, [pc, #284]	; (8015720 <floor+0x120>)
 8015602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015604:	464f      	mov	r7, r9
 8015606:	4691      	mov	r9, r2
 8015608:	004b      	lsls	r3, r1, #1
 801560a:	0d5b      	lsrs	r3, r3, #21
 801560c:	4499      	add	r9, r3
 801560e:	4646      	mov	r6, r8
 8015610:	46d6      	mov	lr, sl
 8015612:	464a      	mov	r2, r9
 8015614:	b5c0      	push	{r6, r7, lr}
 8015616:	0005      	movs	r5, r0
 8015618:	000c      	movs	r4, r1
 801561a:	000e      	movs	r6, r1
 801561c:	4688      	mov	r8, r1
 801561e:	0007      	movs	r7, r0
 8015620:	2a13      	cmp	r2, #19
 8015622:	dc27      	bgt.n	8015674 <floor+0x74>
 8015624:	2a00      	cmp	r2, #0
 8015626:	db4b      	blt.n	80156c0 <floor+0xc0>
 8015628:	4b3e      	ldr	r3, [pc, #248]	; (8015724 <floor+0x124>)
 801562a:	4113      	asrs	r3, r2
 801562c:	469a      	mov	sl, r3
 801562e:	000b      	movs	r3, r1
 8015630:	4652      	mov	r2, sl
 8015632:	4013      	ands	r3, r2
 8015634:	4303      	orrs	r3, r0
 8015636:	d018      	beq.n	801566a <floor+0x6a>
 8015638:	4a3b      	ldr	r2, [pc, #236]	; (8015728 <floor+0x128>)
 801563a:	4b3c      	ldr	r3, [pc, #240]	; (801572c <floor+0x12c>)
 801563c:	0028      	movs	r0, r5
 801563e:	0021      	movs	r1, r4
 8015640:	f7fc f908 	bl	8011854 <__aeabi_dadd>
 8015644:	2200      	movs	r2, #0
 8015646:	2300      	movs	r3, #0
 8015648:	f7fb fe36 	bl	80112b8 <__aeabi_dcmpgt>
 801564c:	2800      	cmp	r0, #0
 801564e:	d047      	beq.n	80156e0 <floor+0xe0>
 8015650:	2c00      	cmp	r4, #0
 8015652:	da04      	bge.n	801565e <floor+0x5e>
 8015654:	2380      	movs	r3, #128	; 0x80
 8015656:	464a      	mov	r2, r9
 8015658:	035b      	lsls	r3, r3, #13
 801565a:	4113      	asrs	r3, r2
 801565c:	4498      	add	r8, r3
 801565e:	4646      	mov	r6, r8
 8015660:	4653      	mov	r3, sl
 8015662:	2700      	movs	r7, #0
 8015664:	439e      	bics	r6, r3
 8015666:	0038      	movs	r0, r7
 8015668:	0031      	movs	r1, r6
 801566a:	bc1c      	pop	{r2, r3, r4}
 801566c:	4690      	mov	r8, r2
 801566e:	4699      	mov	r9, r3
 8015670:	46a2      	mov	sl, r4
 8015672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015674:	2a33      	cmp	r2, #51	; 0x33
 8015676:	dd08      	ble.n	801568a <floor+0x8a>
 8015678:	2380      	movs	r3, #128	; 0x80
 801567a:	00db      	lsls	r3, r3, #3
 801567c:	4599      	cmp	r9, r3
 801567e:	d1f4      	bne.n	801566a <floor+0x6a>
 8015680:	0002      	movs	r2, r0
 8015682:	000b      	movs	r3, r1
 8015684:	f7fc f8e6 	bl	8011854 <__aeabi_dadd>
 8015688:	e7ef      	b.n	801566a <floor+0x6a>
 801568a:	4a29      	ldr	r2, [pc, #164]	; (8015730 <floor+0x130>)
 801568c:	4694      	mov	ip, r2
 801568e:	2201      	movs	r2, #1
 8015690:	4463      	add	r3, ip
 8015692:	4252      	negs	r2, r2
 8015694:	40da      	lsrs	r2, r3
 8015696:	4692      	mov	sl, r2
 8015698:	4202      	tst	r2, r0
 801569a:	d0e6      	beq.n	801566a <floor+0x6a>
 801569c:	4a22      	ldr	r2, [pc, #136]	; (8015728 <floor+0x128>)
 801569e:	4b23      	ldr	r3, [pc, #140]	; (801572c <floor+0x12c>)
 80156a0:	0028      	movs	r0, r5
 80156a2:	0021      	movs	r1, r4
 80156a4:	f7fc f8d6 	bl	8011854 <__aeabi_dadd>
 80156a8:	2200      	movs	r2, #0
 80156aa:	2300      	movs	r3, #0
 80156ac:	f7fb fe04 	bl	80112b8 <__aeabi_dcmpgt>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d015      	beq.n	80156e0 <floor+0xe0>
 80156b4:	2c00      	cmp	r4, #0
 80156b6:	db1e      	blt.n	80156f6 <floor+0xf6>
 80156b8:	4653      	mov	r3, sl
 80156ba:	4646      	mov	r6, r8
 80156bc:	439f      	bics	r7, r3
 80156be:	e00f      	b.n	80156e0 <floor+0xe0>
 80156c0:	4a19      	ldr	r2, [pc, #100]	; (8015728 <floor+0x128>)
 80156c2:	4b1a      	ldr	r3, [pc, #104]	; (801572c <floor+0x12c>)
 80156c4:	0028      	movs	r0, r5
 80156c6:	0021      	movs	r1, r4
 80156c8:	f7fc f8c4 	bl	8011854 <__aeabi_dadd>
 80156cc:	2200      	movs	r2, #0
 80156ce:	2300      	movs	r3, #0
 80156d0:	f7fb fdf2 	bl	80112b8 <__aeabi_dcmpgt>
 80156d4:	2800      	cmp	r0, #0
 80156d6:	d003      	beq.n	80156e0 <floor+0xe0>
 80156d8:	2c00      	cmp	r4, #0
 80156da:	db04      	blt.n	80156e6 <floor+0xe6>
 80156dc:	2700      	movs	r7, #0
 80156de:	2600      	movs	r6, #0
 80156e0:	0038      	movs	r0, r7
 80156e2:	0031      	movs	r1, r6
 80156e4:	e7c1      	b.n	801566a <floor+0x6a>
 80156e6:	0064      	lsls	r4, r4, #1
 80156e8:	0864      	lsrs	r4, r4, #1
 80156ea:	4325      	orrs	r5, r4
 80156ec:	2700      	movs	r7, #0
 80156ee:	2d00      	cmp	r5, #0
 80156f0:	d0f6      	beq.n	80156e0 <floor+0xe0>
 80156f2:	4e10      	ldr	r6, [pc, #64]	; (8015734 <floor+0x134>)
 80156f4:	e7f4      	b.n	80156e0 <floor+0xe0>
 80156f6:	464b      	mov	r3, r9
 80156f8:	2b14      	cmp	r3, #20
 80156fa:	d00b      	beq.n	8015714 <floor+0x114>
 80156fc:	2234      	movs	r2, #52	; 0x34
 80156fe:	1ad2      	subs	r2, r2, r3
 8015700:	2301      	movs	r3, #1
 8015702:	4093      	lsls	r3, r2
 8015704:	195d      	adds	r5, r3, r5
 8015706:	42bd      	cmp	r5, r7
 8015708:	d208      	bcs.n	801571c <floor+0x11c>
 801570a:	2301      	movs	r3, #1
 801570c:	469c      	mov	ip, r3
 801570e:	002f      	movs	r7, r5
 8015710:	44e0      	add	r8, ip
 8015712:	e7d1      	b.n	80156b8 <floor+0xb8>
 8015714:	3b13      	subs	r3, #19
 8015716:	469c      	mov	ip, r3
 8015718:	44e0      	add	r8, ip
 801571a:	e7cd      	b.n	80156b8 <floor+0xb8>
 801571c:	002f      	movs	r7, r5
 801571e:	e7cb      	b.n	80156b8 <floor+0xb8>
 8015720:	fffffc01 	.word	0xfffffc01
 8015724:	000fffff 	.word	0x000fffff
 8015728:	8800759c 	.word	0x8800759c
 801572c:	7e37e43c 	.word	0x7e37e43c
 8015730:	fffffbed 	.word	0xfffffbed
 8015734:	bff00000 	.word	0xbff00000

08015738 <matherr>:
 8015738:	2000      	movs	r0, #0
 801573a:	4770      	bx	lr

0801573c <nan>:
 801573c:	2000      	movs	r0, #0
 801573e:	4901      	ldr	r1, [pc, #4]	; (8015744 <nan+0x8>)
 8015740:	4770      	bx	lr
 8015742:	46c0      	nop			; (mov r8, r8)
 8015744:	7ff80000 	.word	0x7ff80000

08015748 <scalbn>:
 8015748:	004b      	lsls	r3, r1, #1
 801574a:	b570      	push	{r4, r5, r6, lr}
 801574c:	0d5b      	lsrs	r3, r3, #21
 801574e:	0014      	movs	r4, r2
 8015750:	000a      	movs	r2, r1
 8015752:	2b00      	cmp	r3, #0
 8015754:	d11a      	bne.n	801578c <scalbn+0x44>
 8015756:	004b      	lsls	r3, r1, #1
 8015758:	085b      	lsrs	r3, r3, #1
 801575a:	4303      	orrs	r3, r0
 801575c:	d015      	beq.n	801578a <scalbn+0x42>
 801575e:	4b23      	ldr	r3, [pc, #140]	; (80157ec <scalbn+0xa4>)
 8015760:	2200      	movs	r2, #0
 8015762:	f7fc ff9d 	bl	80126a0 <__aeabi_dmul>
 8015766:	4b22      	ldr	r3, [pc, #136]	; (80157f0 <scalbn+0xa8>)
 8015768:	429c      	cmp	r4, r3
 801576a:	db2d      	blt.n	80157c8 <scalbn+0x80>
 801576c:	000a      	movs	r2, r1
 801576e:	004b      	lsls	r3, r1, #1
 8015770:	0d5b      	lsrs	r3, r3, #21
 8015772:	3b36      	subs	r3, #54	; 0x36
 8015774:	4d1f      	ldr	r5, [pc, #124]	; (80157f4 <scalbn+0xac>)
 8015776:	18e3      	adds	r3, r4, r3
 8015778:	42ab      	cmp	r3, r5
 801577a:	dc2a      	bgt.n	80157d2 <scalbn+0x8a>
 801577c:	2b00      	cmp	r3, #0
 801577e:	dd0d      	ble.n	801579c <scalbn+0x54>
 8015780:	4c1d      	ldr	r4, [pc, #116]	; (80157f8 <scalbn+0xb0>)
 8015782:	051b      	lsls	r3, r3, #20
 8015784:	4022      	ands	r2, r4
 8015786:	431a      	orrs	r2, r3
 8015788:	0011      	movs	r1, r2
 801578a:	bd70      	pop	{r4, r5, r6, pc}
 801578c:	4d1b      	ldr	r5, [pc, #108]	; (80157fc <scalbn+0xb4>)
 801578e:	42ab      	cmp	r3, r5
 8015790:	d1f0      	bne.n	8015774 <scalbn+0x2c>
 8015792:	0002      	movs	r2, r0
 8015794:	000b      	movs	r3, r1
 8015796:	f7fc f85d 	bl	8011854 <__aeabi_dadd>
 801579a:	e7f6      	b.n	801578a <scalbn+0x42>
 801579c:	001d      	movs	r5, r3
 801579e:	3535      	adds	r5, #53	; 0x35
 80157a0:	da19      	bge.n	80157d6 <scalbn+0x8e>
 80157a2:	4b17      	ldr	r3, [pc, #92]	; (8015800 <scalbn+0xb8>)
 80157a4:	0002      	movs	r2, r0
 80157a6:	429c      	cmp	r4, r3
 80157a8:	dd09      	ble.n	80157be <scalbn+0x76>
 80157aa:	000b      	movs	r3, r1
 80157ac:	4815      	ldr	r0, [pc, #84]	; (8015804 <scalbn+0xbc>)
 80157ae:	4916      	ldr	r1, [pc, #88]	; (8015808 <scalbn+0xc0>)
 80157b0:	f000 f982 	bl	8015ab8 <copysign>
 80157b4:	4a13      	ldr	r2, [pc, #76]	; (8015804 <scalbn+0xbc>)
 80157b6:	4b14      	ldr	r3, [pc, #80]	; (8015808 <scalbn+0xc0>)
 80157b8:	f7fc ff72 	bl	80126a0 <__aeabi_dmul>
 80157bc:	e7e5      	b.n	801578a <scalbn+0x42>
 80157be:	000b      	movs	r3, r1
 80157c0:	4812      	ldr	r0, [pc, #72]	; (801580c <scalbn+0xc4>)
 80157c2:	4913      	ldr	r1, [pc, #76]	; (8015810 <scalbn+0xc8>)
 80157c4:	f000 f978 	bl	8015ab8 <copysign>
 80157c8:	4a10      	ldr	r2, [pc, #64]	; (801580c <scalbn+0xc4>)
 80157ca:	4b11      	ldr	r3, [pc, #68]	; (8015810 <scalbn+0xc8>)
 80157cc:	f7fc ff68 	bl	80126a0 <__aeabi_dmul>
 80157d0:	e7db      	b.n	801578a <scalbn+0x42>
 80157d2:	0002      	movs	r2, r0
 80157d4:	e7e9      	b.n	80157aa <scalbn+0x62>
 80157d6:	4c08      	ldr	r4, [pc, #32]	; (80157f8 <scalbn+0xb0>)
 80157d8:	3336      	adds	r3, #54	; 0x36
 80157da:	4022      	ands	r2, r4
 80157dc:	051b      	lsls	r3, r3, #20
 80157de:	4313      	orrs	r3, r2
 80157e0:	0019      	movs	r1, r3
 80157e2:	2200      	movs	r2, #0
 80157e4:	4b0b      	ldr	r3, [pc, #44]	; (8015814 <scalbn+0xcc>)
 80157e6:	f7fc ff5b 	bl	80126a0 <__aeabi_dmul>
 80157ea:	e7ce      	b.n	801578a <scalbn+0x42>
 80157ec:	43500000 	.word	0x43500000
 80157f0:	ffff3cb0 	.word	0xffff3cb0
 80157f4:	000007fe 	.word	0x000007fe
 80157f8:	800fffff 	.word	0x800fffff
 80157fc:	000007ff 	.word	0x000007ff
 8015800:	0000c350 	.word	0x0000c350
 8015804:	8800759c 	.word	0x8800759c
 8015808:	7e37e43c 	.word	0x7e37e43c
 801580c:	c2f8f359 	.word	0xc2f8f359
 8015810:	01a56e1f 	.word	0x01a56e1f
 8015814:	3c900000 	.word	0x3c900000

08015818 <finitef>:
 8015818:	0043      	lsls	r3, r0, #1
 801581a:	2000      	movs	r0, #0
 801581c:	4a02      	ldr	r2, [pc, #8]	; (8015828 <finitef+0x10>)
 801581e:	085b      	lsrs	r3, r3, #1
 8015820:	429a      	cmp	r2, r3
 8015822:	4140      	adcs	r0, r0
 8015824:	4770      	bx	lr
 8015826:	46c0      	nop			; (mov r8, r8)
 8015828:	7f7fffff 	.word	0x7f7fffff

0801582c <__ieee754_logf>:
 801582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582e:	46de      	mov	lr, fp
 8015830:	4657      	mov	r7, sl
 8015832:	464e      	mov	r6, r9
 8015834:	4645      	mov	r5, r8
 8015836:	0003      	movs	r3, r0
 8015838:	b5e0      	push	{r5, r6, r7, lr}
 801583a:	0042      	lsls	r2, r0, #1
 801583c:	d044      	beq.n	80158c8 <__ieee754_logf+0x9c>
 801583e:	2800      	cmp	r0, #0
 8015840:	db4d      	blt.n	80158de <__ieee754_logf+0xb2>
 8015842:	4a8e      	ldr	r2, [pc, #568]	; (8015a7c <__ieee754_logf+0x250>)
 8015844:	4290      	cmp	r0, r2
 8015846:	dc51      	bgt.n	80158ec <__ieee754_logf+0xc0>
 8015848:	4a8d      	ldr	r2, [pc, #564]	; (8015a80 <__ieee754_logf+0x254>)
 801584a:	2100      	movs	r1, #0
 801584c:	4290      	cmp	r0, r2
 801584e:	dc06      	bgt.n	801585e <__ieee754_logf+0x32>
 8015850:	2198      	movs	r1, #152	; 0x98
 8015852:	05c9      	lsls	r1, r1, #23
 8015854:	f7fb f85e 	bl	8010914 <__aeabi_fmul>
 8015858:	2119      	movs	r1, #25
 801585a:	0003      	movs	r3, r0
 801585c:	4249      	negs	r1, r1
 801585e:	15da      	asrs	r2, r3, #23
 8015860:	025b      	lsls	r3, r3, #9
 8015862:	0a5c      	lsrs	r4, r3, #9
 8015864:	4b87      	ldr	r3, [pc, #540]	; (8015a84 <__ieee754_logf+0x258>)
 8015866:	3a7f      	subs	r2, #127	; 0x7f
 8015868:	18e0      	adds	r0, r4, r3
 801586a:	2380      	movs	r3, #128	; 0x80
 801586c:	041b      	lsls	r3, r3, #16
 801586e:	4003      	ands	r3, r0
 8015870:	20fe      	movs	r0, #254	; 0xfe
 8015872:	1852      	adds	r2, r2, r1
 8015874:	21fe      	movs	r1, #254	; 0xfe
 8015876:	0580      	lsls	r0, r0, #22
 8015878:	4058      	eors	r0, r3
 801587a:	15dd      	asrs	r5, r3, #23
 801587c:	4320      	orrs	r0, r4
 801587e:	0589      	lsls	r1, r1, #22
 8015880:	18ad      	adds	r5, r5, r2
 8015882:	f7fb f979 	bl	8010b78 <__aeabi_fsub>
 8015886:	0023      	movs	r3, r4
 8015888:	330f      	adds	r3, #15
 801588a:	025b      	lsls	r3, r3, #9
 801588c:	1c06      	adds	r6, r0, #0
 801588e:	0a5b      	lsrs	r3, r3, #9
 8015890:	2b0f      	cmp	r3, #15
 8015892:	dc2f      	bgt.n	80158f4 <__ieee754_logf+0xc8>
 8015894:	2100      	movs	r1, #0
 8015896:	f7fb fd2f 	bl	80112f8 <__aeabi_fcmpeq>
 801589a:	2800      	cmp	r0, #0
 801589c:	d100      	bne.n	80158a0 <__ieee754_logf+0x74>
 801589e:	e09e      	b.n	80159de <__ieee754_logf+0x1b2>
 80158a0:	2000      	movs	r0, #0
 80158a2:	2d00      	cmp	r5, #0
 80158a4:	d015      	beq.n	80158d2 <__ieee754_logf+0xa6>
 80158a6:	0028      	movs	r0, r5
 80158a8:	f7fb ff4a 	bl	8011740 <__aeabi_i2f>
 80158ac:	4976      	ldr	r1, [pc, #472]	; (8015a88 <__ieee754_logf+0x25c>)
 80158ae:	1c04      	adds	r4, r0, #0
 80158b0:	f7fb f830 	bl	8010914 <__aeabi_fmul>
 80158b4:	4975      	ldr	r1, [pc, #468]	; (8015a8c <__ieee754_logf+0x260>)
 80158b6:	1c05      	adds	r5, r0, #0
 80158b8:	1c20      	adds	r0, r4, #0
 80158ba:	f7fb f82b 	bl	8010914 <__aeabi_fmul>
 80158be:	1c01      	adds	r1, r0, #0
 80158c0:	1c28      	adds	r0, r5, #0
 80158c2:	f7fa fd7b 	bl	80103bc <__aeabi_fadd>
 80158c6:	e004      	b.n	80158d2 <__ieee754_logf+0xa6>
 80158c8:	20cc      	movs	r0, #204	; 0xcc
 80158ca:	2100      	movs	r1, #0
 80158cc:	0600      	lsls	r0, r0, #24
 80158ce:	f7fa ff0f 	bl	80106f0 <__aeabi_fdiv>
 80158d2:	bc3c      	pop	{r2, r3, r4, r5}
 80158d4:	4690      	mov	r8, r2
 80158d6:	4699      	mov	r9, r3
 80158d8:	46a2      	mov	sl, r4
 80158da:	46ab      	mov	fp, r5
 80158dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158de:	1c01      	adds	r1, r0, #0
 80158e0:	f7fb f94a 	bl	8010b78 <__aeabi_fsub>
 80158e4:	2100      	movs	r1, #0
 80158e6:	f7fa ff03 	bl	80106f0 <__aeabi_fdiv>
 80158ea:	e7f2      	b.n	80158d2 <__ieee754_logf+0xa6>
 80158ec:	1c01      	adds	r1, r0, #0
 80158ee:	f7fa fd65 	bl	80103bc <__aeabi_fadd>
 80158f2:	e7ee      	b.n	80158d2 <__ieee754_logf+0xa6>
 80158f4:	2180      	movs	r1, #128	; 0x80
 80158f6:	05c9      	lsls	r1, r1, #23
 80158f8:	f7fa fd60 	bl	80103bc <__aeabi_fadd>
 80158fc:	1c01      	adds	r1, r0, #0
 80158fe:	1c30      	adds	r0, r6, #0
 8015900:	f7fa fef6 	bl	80106f0 <__aeabi_fdiv>
 8015904:	4680      	mov	r8, r0
 8015906:	0028      	movs	r0, r5
 8015908:	f7fb ff1a 	bl	8011740 <__aeabi_i2f>
 801590c:	4641      	mov	r1, r8
 801590e:	4681      	mov	r9, r0
 8015910:	4640      	mov	r0, r8
 8015912:	f7fa ffff 	bl	8010914 <__aeabi_fmul>
 8015916:	4b5e      	ldr	r3, [pc, #376]	; (8015a90 <__ieee754_logf+0x264>)
 8015918:	1c01      	adds	r1, r0, #0
 801591a:	469a      	mov	sl, r3
 801591c:	4683      	mov	fp, r0
 801591e:	f7fa fff9 	bl	8010914 <__aeabi_fmul>
 8015922:	495c      	ldr	r1, [pc, #368]	; (8015a94 <__ieee754_logf+0x268>)
 8015924:	1c07      	adds	r7, r0, #0
 8015926:	f7fa fff5 	bl	8010914 <__aeabi_fmul>
 801592a:	495b      	ldr	r1, [pc, #364]	; (8015a98 <__ieee754_logf+0x26c>)
 801592c:	f7fa fd46 	bl	80103bc <__aeabi_fadd>
 8015930:	1c39      	adds	r1, r7, #0
 8015932:	f7fa ffef 	bl	8010914 <__aeabi_fmul>
 8015936:	4959      	ldr	r1, [pc, #356]	; (8015a9c <__ieee754_logf+0x270>)
 8015938:	f7fa fd40 	bl	80103bc <__aeabi_fadd>
 801593c:	1c39      	adds	r1, r7, #0
 801593e:	f7fa ffe9 	bl	8010914 <__aeabi_fmul>
 8015942:	4957      	ldr	r1, [pc, #348]	; (8015aa0 <__ieee754_logf+0x274>)
 8015944:	f7fa fd3a 	bl	80103bc <__aeabi_fadd>
 8015948:	4659      	mov	r1, fp
 801594a:	f7fa ffe3 	bl	8010914 <__aeabi_fmul>
 801594e:	4955      	ldr	r1, [pc, #340]	; (8015aa4 <__ieee754_logf+0x278>)
 8015950:	4683      	mov	fp, r0
 8015952:	1c38      	adds	r0, r7, #0
 8015954:	f7fa ffde 	bl	8010914 <__aeabi_fmul>
 8015958:	4953      	ldr	r1, [pc, #332]	; (8015aa8 <__ieee754_logf+0x27c>)
 801595a:	f7fa fd2f 	bl	80103bc <__aeabi_fadd>
 801595e:	1c39      	adds	r1, r7, #0
 8015960:	f7fa ffd8 	bl	8010914 <__aeabi_fmul>
 8015964:	4951      	ldr	r1, [pc, #324]	; (8015aac <__ieee754_logf+0x280>)
 8015966:	f7fa fd29 	bl	80103bc <__aeabi_fadd>
 801596a:	1c39      	adds	r1, r7, #0
 801596c:	f7fa ffd2 	bl	8010914 <__aeabi_fmul>
 8015970:	1c01      	adds	r1, r0, #0
 8015972:	4658      	mov	r0, fp
 8015974:	f7fa fd22 	bl	80103bc <__aeabi_fadd>
 8015978:	4b4d      	ldr	r3, [pc, #308]	; (8015ab0 <__ieee754_logf+0x284>)
 801597a:	44a2      	add	sl, r4
 801597c:	1b1c      	subs	r4, r3, r4
 801597e:	4653      	mov	r3, sl
 8015980:	1c07      	adds	r7, r0, #0
 8015982:	431c      	orrs	r4, r3
 8015984:	2c00      	cmp	r4, #0
 8015986:	dd65      	ble.n	8015a54 <__ieee754_logf+0x228>
 8015988:	21fc      	movs	r1, #252	; 0xfc
 801598a:	1c30      	adds	r0, r6, #0
 801598c:	0589      	lsls	r1, r1, #22
 801598e:	f7fa ffc1 	bl	8010914 <__aeabi_fmul>
 8015992:	1c31      	adds	r1, r6, #0
 8015994:	f7fa ffbe 	bl	8010914 <__aeabi_fmul>
 8015998:	1c01      	adds	r1, r0, #0
 801599a:	1c04      	adds	r4, r0, #0
 801599c:	1c38      	adds	r0, r7, #0
 801599e:	f7fa fd0d 	bl	80103bc <__aeabi_fadd>
 80159a2:	4641      	mov	r1, r8
 80159a4:	f7fa ffb6 	bl	8010914 <__aeabi_fmul>
 80159a8:	1c07      	adds	r7, r0, #0
 80159aa:	2d00      	cmp	r5, #0
 80159ac:	d044      	beq.n	8015a38 <__ieee754_logf+0x20c>
 80159ae:	4936      	ldr	r1, [pc, #216]	; (8015a88 <__ieee754_logf+0x25c>)
 80159b0:	4648      	mov	r0, r9
 80159b2:	f7fa ffaf 	bl	8010914 <__aeabi_fmul>
 80159b6:	4935      	ldr	r1, [pc, #212]	; (8015a8c <__ieee754_logf+0x260>)
 80159b8:	1c05      	adds	r5, r0, #0
 80159ba:	4648      	mov	r0, r9
 80159bc:	f7fa ffaa 	bl	8010914 <__aeabi_fmul>
 80159c0:	1c39      	adds	r1, r7, #0
 80159c2:	f7fa fcfb 	bl	80103bc <__aeabi_fadd>
 80159c6:	1c01      	adds	r1, r0, #0
 80159c8:	1c20      	adds	r0, r4, #0
 80159ca:	f7fb f8d5 	bl	8010b78 <__aeabi_fsub>
 80159ce:	1c31      	adds	r1, r6, #0
 80159d0:	f7fb f8d2 	bl	8010b78 <__aeabi_fsub>
 80159d4:	1c01      	adds	r1, r0, #0
 80159d6:	1c28      	adds	r0, r5, #0
 80159d8:	f7fb f8ce 	bl	8010b78 <__aeabi_fsub>
 80159dc:	e779      	b.n	80158d2 <__ieee754_logf+0xa6>
 80159de:	4935      	ldr	r1, [pc, #212]	; (8015ab4 <__ieee754_logf+0x288>)
 80159e0:	1c30      	adds	r0, r6, #0
 80159e2:	f7fa ff97 	bl	8010914 <__aeabi_fmul>
 80159e6:	1c01      	adds	r1, r0, #0
 80159e8:	20fc      	movs	r0, #252	; 0xfc
 80159ea:	0580      	lsls	r0, r0, #22
 80159ec:	f7fb f8c4 	bl	8010b78 <__aeabi_fsub>
 80159f0:	1c31      	adds	r1, r6, #0
 80159f2:	1c04      	adds	r4, r0, #0
 80159f4:	1c30      	adds	r0, r6, #0
 80159f6:	f7fa ff8d 	bl	8010914 <__aeabi_fmul>
 80159fa:	1c01      	adds	r1, r0, #0
 80159fc:	1c20      	adds	r0, r4, #0
 80159fe:	f7fa ff89 	bl	8010914 <__aeabi_fmul>
 8015a02:	1c04      	adds	r4, r0, #0
 8015a04:	2d00      	cmp	r5, #0
 8015a06:	d020      	beq.n	8015a4a <__ieee754_logf+0x21e>
 8015a08:	0028      	movs	r0, r5
 8015a0a:	f7fb fe99 	bl	8011740 <__aeabi_i2f>
 8015a0e:	491e      	ldr	r1, [pc, #120]	; (8015a88 <__ieee754_logf+0x25c>)
 8015a10:	1c05      	adds	r5, r0, #0
 8015a12:	f7fa ff7f 	bl	8010914 <__aeabi_fmul>
 8015a16:	491d      	ldr	r1, [pc, #116]	; (8015a8c <__ieee754_logf+0x260>)
 8015a18:	1c07      	adds	r7, r0, #0
 8015a1a:	1c28      	adds	r0, r5, #0
 8015a1c:	f7fa ff7a 	bl	8010914 <__aeabi_fmul>
 8015a20:	1c01      	adds	r1, r0, #0
 8015a22:	1c20      	adds	r0, r4, #0
 8015a24:	f7fb f8a8 	bl	8010b78 <__aeabi_fsub>
 8015a28:	1c31      	adds	r1, r6, #0
 8015a2a:	f7fb f8a5 	bl	8010b78 <__aeabi_fsub>
 8015a2e:	1c01      	adds	r1, r0, #0
 8015a30:	1c38      	adds	r0, r7, #0
 8015a32:	f7fb f8a1 	bl	8010b78 <__aeabi_fsub>
 8015a36:	e74c      	b.n	80158d2 <__ieee754_logf+0xa6>
 8015a38:	1c01      	adds	r1, r0, #0
 8015a3a:	1c20      	adds	r0, r4, #0
 8015a3c:	f7fb f89c 	bl	8010b78 <__aeabi_fsub>
 8015a40:	1c01      	adds	r1, r0, #0
 8015a42:	1c30      	adds	r0, r6, #0
 8015a44:	f7fb f898 	bl	8010b78 <__aeabi_fsub>
 8015a48:	e743      	b.n	80158d2 <__ieee754_logf+0xa6>
 8015a4a:	1c21      	adds	r1, r4, #0
 8015a4c:	1c30      	adds	r0, r6, #0
 8015a4e:	f7fb f893 	bl	8010b78 <__aeabi_fsub>
 8015a52:	e73e      	b.n	80158d2 <__ieee754_logf+0xa6>
 8015a54:	1c01      	adds	r1, r0, #0
 8015a56:	1c30      	adds	r0, r6, #0
 8015a58:	f7fb f88e 	bl	8010b78 <__aeabi_fsub>
 8015a5c:	4641      	mov	r1, r8
 8015a5e:	f7fa ff59 	bl	8010914 <__aeabi_fmul>
 8015a62:	1c04      	adds	r4, r0, #0
 8015a64:	2d00      	cmp	r5, #0
 8015a66:	d0f0      	beq.n	8015a4a <__ieee754_logf+0x21e>
 8015a68:	4907      	ldr	r1, [pc, #28]	; (8015a88 <__ieee754_logf+0x25c>)
 8015a6a:	4648      	mov	r0, r9
 8015a6c:	f7fa ff52 	bl	8010914 <__aeabi_fmul>
 8015a70:	4906      	ldr	r1, [pc, #24]	; (8015a8c <__ieee754_logf+0x260>)
 8015a72:	1c05      	adds	r5, r0, #0
 8015a74:	4648      	mov	r0, r9
 8015a76:	f7fa ff4d 	bl	8010914 <__aeabi_fmul>
 8015a7a:	e7a4      	b.n	80159c6 <__ieee754_logf+0x19a>
 8015a7c:	7f7fffff 	.word	0x7f7fffff
 8015a80:	007fffff 	.word	0x007fffff
 8015a84:	004afb20 	.word	0x004afb20
 8015a88:	3f317180 	.word	0x3f317180
 8015a8c:	3717f7d1 	.word	0x3717f7d1
 8015a90:	ffcf5c30 	.word	0xffcf5c30
 8015a94:	3e178897 	.word	0x3e178897
 8015a98:	3e3a3325 	.word	0x3e3a3325
 8015a9c:	3e924925 	.word	0x3e924925
 8015aa0:	3f2aaaab 	.word	0x3f2aaaab
 8015aa4:	3e1cd04f 	.word	0x3e1cd04f
 8015aa8:	3e638e29 	.word	0x3e638e29
 8015aac:	3ecccccd 	.word	0x3ecccccd
 8015ab0:	0035c288 	.word	0x0035c288
 8015ab4:	3eaaaaab 	.word	0x3eaaaaab

08015ab8 <copysign>:
 8015ab8:	b530      	push	{r4, r5, lr}
 8015aba:	004a      	lsls	r2, r1, #1
 8015abc:	0fdb      	lsrs	r3, r3, #31
 8015abe:	07db      	lsls	r3, r3, #31
 8015ac0:	0852      	lsrs	r2, r2, #1
 8015ac2:	431a      	orrs	r2, r3
 8015ac4:	0011      	movs	r1, r2
 8015ac6:	bd30      	pop	{r4, r5, pc}

08015ac8 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	000c      	movs	r4, r1
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 8015acc:	21c8      	movs	r1, #200	; 0xc8
 8015ace:	5a62      	ldrh	r2, [r4, r1]
 8015ad0:	1c53      	adds	r3, r2, #1
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	5263      	strh	r3, [r4, r1]
 8015ad6:	54a0      	strb	r0, [r4, r2]
	if (buf->position == BUF_SIZE)
 8015ad8:	2bc8      	cmp	r3, #200	; 0xc8
 8015ada:	d000      	beq.n	8015ade <out_func+0x16>
	{
		_write(0, buf->buffer, BUF_SIZE);
		buf->position = 0;
	}
}
 8015adc:	bd10      	pop	{r4, pc}
		_write(0, buf->buffer, BUF_SIZE);
 8015ade:	22c8      	movs	r2, #200	; 0xc8
 8015ae0:	0021      	movs	r1, r4
 8015ae2:	2000      	movs	r0, #0
 8015ae4:	f7fd fd3e 	bl	8013564 <_write>
		buf->position = 0;
 8015ae8:	23c8      	movs	r3, #200	; 0xc8
 8015aea:	2200      	movs	r2, #0
 8015aec:	52e2      	strh	r2, [r4, r3]
}
 8015aee:	e7f5      	b.n	8015adc <out_func+0x14>

08015af0 <__wrap_puts>:


int __wrap_puts(const char *str)
{
 8015af0:	b510      	push	{r4, lr}
 8015af2:	0004      	movs	r4, r0
	size_t len = strlen(str);
 8015af4:	f7fd fd2e 	bl	8013554 <strlen>
 8015af8:	0002      	movs	r2, r0

	_write(0, str, len);
 8015afa:	0021      	movs	r1, r4
 8015afc:	2000      	movs	r0, #0
 8015afe:	f7fd fd31 	bl	8013564 <_write>
	_write(0, "\n", 1);
 8015b02:	2201      	movs	r2, #1
 8015b04:	4902      	ldr	r1, [pc, #8]	; (8015b10 <__wrap_puts+0x20>)
 8015b06:	2000      	movs	r0, #0
 8015b08:	f7fd fd2c 	bl	8013564 <_write>
	return 0;
}
 8015b0c:	2000      	movs	r0, #0
 8015b0e:	bd10      	pop	{r4, pc}
 8015b10:	0801e8bc 	.word	0x0801e8bc

08015b14 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 8015b14:	b40f      	push	{r0, r1, r2, r3}
 8015b16:	b570      	push	{r4, r5, r6, lr}
 8015b18:	b0b4      	sub	sp, #208	; 0xd0
 8015b1a:	ac38      	add	r4, sp, #224	; 0xe0
 8015b1c:	cc40      	ldmia	r4!, {r6}
	print_buffer_t buf = {
 8015b1e:	ad01      	add	r5, sp, #4
 8015b20:	22ca      	movs	r2, #202	; 0xca
 8015b22:	2100      	movs	r1, #0
 8015b24:	0028      	movs	r0, r5
 8015b26:	f7fd ff9d 	bl	8013a64 <memset>
		.position = 0,
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
 8015b2a:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8015b2c:	0023      	movs	r3, r4
 8015b2e:	0032      	movs	r2, r6
 8015b30:	0029      	movs	r1, r5
 8015b32:	4809      	ldr	r0, [pc, #36]	; (8015b58 <__wrap_printf+0x44>)
 8015b34:	f000 fc90 	bl	8016458 <fctvprintf>
 8015b38:	0004      	movs	r4, r0
	if (buf.position != 0)
 8015b3a:	23c8      	movs	r3, #200	; 0xc8
 8015b3c:	5aea      	ldrh	r2, [r5, r3]
 8015b3e:	2a00      	cmp	r2, #0
 8015b40:	d105      	bne.n	8015b4e <__wrap_printf+0x3a>
	}

	va_end(va);

	return ret;
}
 8015b42:	0020      	movs	r0, r4
 8015b44:	b034      	add	sp, #208	; 0xd0
 8015b46:	bc70      	pop	{r4, r5, r6}
 8015b48:	bc08      	pop	{r3}
 8015b4a:	b004      	add	sp, #16
 8015b4c:	4718      	bx	r3
		_write(0, buf.buffer, buf.position);
 8015b4e:	a901      	add	r1, sp, #4
 8015b50:	2000      	movs	r0, #0
 8015b52:	f7fd fd07 	bl	8013564 <_write>
	return ret;
 8015b56:	e7f4      	b.n	8015b42 <__wrap_printf+0x2e>
 8015b58:	08015ac9 	.word	0x08015ac9

08015b5c <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8015b5c:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8015b5e:	f000 fc6d 	bl	801643c <vsnprintf_>
}
 8015b62:	bd10      	pop	{r4, pc}

08015b64 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d200      	bcs.n	8015b6a <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8015b68:	5488      	strb	r0, [r1, r2]
  }
}
 8015b6a:	4770      	bx	lr

08015b6c <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8015b6c:	4770      	bx	lr

08015b6e <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8015b6e:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8015b70:	2800      	cmp	r0, #0
 8015b72:	d002      	beq.n	8015b7a <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8015b74:	680b      	ldr	r3, [r1, #0]
 8015b76:	6849      	ldr	r1, [r1, #4]
 8015b78:	4798      	blx	r3
  }
}
 8015b7a:	bd10      	pop	{r4, pc}

08015b7c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 8015b7c:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 8015b7e:	e007      	b.n	8015b90 <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015b80:	009a      	lsls	r2, r3, #2
 8015b82:	18d3      	adds	r3, r2, r3
 8015b84:	005a      	lsls	r2, r3, #1
 8015b86:	1c4b      	adds	r3, r1, #1
 8015b88:	6003      	str	r3, [r0, #0]
 8015b8a:	780b      	ldrb	r3, [r1, #0]
 8015b8c:	189b      	adds	r3, r3, r2
 8015b8e:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 8015b90:	6801      	ldr	r1, [r0, #0]
 8015b92:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 8015b94:	3a30      	subs	r2, #48	; 0x30
 8015b96:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 8015b98:	2a09      	cmp	r2, #9
 8015b9a:	d9f1      	bls.n	8015b80 <_atoi+0x4>
  }
  return i;
}
 8015b9c:	0018      	movs	r0, r3
 8015b9e:	4770      	bx	lr

08015ba0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8015ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ba2:	46d6      	mov	lr, sl
 8015ba4:	464f      	mov	r7, r9
 8015ba6:	4646      	mov	r6, r8
 8015ba8:	b5c0      	push	{r6, r7, lr}
 8015baa:	b082      	sub	sp, #8
 8015bac:	0005      	movs	r5, r0
 8015bae:	9100      	str	r1, [sp, #0]
 8015bb0:	4690      	mov	r8, r2
 8015bb2:	9301      	str	r3, [sp, #4]
 8015bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bb6:	4699      	mov	r9, r3
 8015bb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015bba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8015bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015bbe:	079b      	lsls	r3, r3, #30
 8015bc0:	d012      	beq.n	8015be8 <_out_rev+0x48>
 8015bc2:	464e      	mov	r6, r9
 8015bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015bc6:	4699      	mov	r9, r3
 8015bc8:	e018      	b.n	8015bfc <_out_rev+0x5c>
    for (size_t i = len; i < width; i++) {
      out(' ', buffer, idx++, maxlen);
 8015bca:	1c54      	adds	r4, r2, #1
 8015bcc:	9b01      	ldr	r3, [sp, #4]
 8015bce:	9900      	ldr	r1, [sp, #0]
 8015bd0:	2020      	movs	r0, #32
 8015bd2:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 8015bd4:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8015bd6:	0022      	movs	r2, r4
    for (size_t i = len; i < width; i++) {
 8015bd8:	42b7      	cmp	r7, r6
 8015bda:	d3f6      	bcc.n	8015bca <_out_rev+0x2a>
 8015bdc:	4654      	mov	r4, sl
 8015bde:	960c      	str	r6, [sp, #48]	; 0x30
 8015be0:	464e      	mov	r6, r9
 8015be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015be4:	4699      	mov	r9, r3
 8015be6:	e009      	b.n	8015bfc <_out_rev+0x5c>
 8015be8:	0027      	movs	r7, r4
 8015bea:	46a2      	mov	sl, r4
 8015bec:	e7f4      	b.n	8015bd8 <_out_rev+0x38>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 8015bee:	3c01      	subs	r4, #1
 8015bf0:	1c57      	adds	r7, r2, #1
 8015bf2:	5d30      	ldrb	r0, [r6, r4]
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	9900      	ldr	r1, [sp, #0]
 8015bf8:	47a8      	blx	r5
 8015bfa:	003a      	movs	r2, r7
  while (len) {
 8015bfc:	2c00      	cmp	r4, #0
 8015bfe:	d1f6      	bne.n	8015bee <_out_rev+0x4e>
 8015c00:	464e      	mov	r6, r9
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8015c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c04:	079b      	lsls	r3, r3, #30
 8015c06:	d50a      	bpl.n	8015c1e <_out_rev+0x7e>
 8015c08:	4647      	mov	r7, r8
 8015c0a:	e005      	b.n	8015c18 <_out_rev+0x78>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 8015c0c:	1c54      	adds	r4, r2, #1
 8015c0e:	9b01      	ldr	r3, [sp, #4]
 8015c10:	9900      	ldr	r1, [sp, #0]
 8015c12:	2020      	movs	r0, #32
 8015c14:	47a8      	blx	r5
 8015c16:	0022      	movs	r2, r4
    while (idx - start_idx < width) {
 8015c18:	1bd3      	subs	r3, r2, r7
 8015c1a:	42b3      	cmp	r3, r6
 8015c1c:	d3f6      	bcc.n	8015c0c <_out_rev+0x6c>
    }
  }

  return idx;
}
 8015c1e:	0010      	movs	r0, r2
 8015c20:	b002      	add	sp, #8
 8015c22:	bc1c      	pop	{r2, r3, r4}
 8015c24:	4690      	mov	r8, r2
 8015c26:	4699      	mov	r9, r3
 8015c28:	46a2      	mov	sl, r4
 8015c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c2c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c2e:	46ce      	mov	lr, r9
 8015c30:	4647      	mov	r7, r8
 8015c32:	b580      	push	{r7, lr}
 8015c34:	b087      	sub	sp, #28
 8015c36:	9204      	str	r2, [sp, #16]
 8015c38:	9305      	str	r3, [sp, #20]
 8015c3a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015c3c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015c3e:	ad10      	add	r5, sp, #64	; 0x40
 8015c40:	782b      	ldrb	r3, [r5, #0]
 8015c42:	4699      	mov	r9, r3
 8015c44:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c48:	9d14      	ldr	r5, [sp, #80]	; 0x50
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8015c4a:	07aa      	lsls	r2, r5, #30
 8015c4c:	d41c      	bmi.n	8015c88 <_ntoa_format+0x5c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d00c      	beq.n	8015c6c <_ntoa_format+0x40>
 8015c52:	07ea      	lsls	r2, r5, #31
 8015c54:	d50a      	bpl.n	8015c6c <_ntoa_format+0x40>
 8015c56:	464a      	mov	r2, r9
 8015c58:	2a00      	cmp	r2, #0
 8015c5a:	d102      	bne.n	8015c62 <_ntoa_format+0x36>
 8015c5c:	320c      	adds	r2, #12
 8015c5e:	422a      	tst	r2, r5
 8015c60:	d004      	beq.n	8015c6c <_ntoa_format+0x40>
      width--;
 8015c62:	3b01      	subs	r3, #1
 8015c64:	e002      	b.n	8015c6c <_ntoa_format+0x40>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015c66:	2230      	movs	r2, #48	; 0x30
 8015c68:	5532      	strb	r2, [r6, r4]
 8015c6a:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015c6c:	42bc      	cmp	r4, r7
 8015c6e:	d205      	bcs.n	8015c7c <_ntoa_format+0x50>
 8015c70:	2c1f      	cmp	r4, #31
 8015c72:	d9f8      	bls.n	8015c66 <_ntoa_format+0x3a>
 8015c74:	e002      	b.n	8015c7c <_ntoa_format+0x50>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015c76:	2230      	movs	r2, #48	; 0x30
 8015c78:	5532      	strb	r2, [r6, r4]
 8015c7a:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015c7c:	07ea      	lsls	r2, r5, #31
 8015c7e:	d503      	bpl.n	8015c88 <_ntoa_format+0x5c>
 8015c80:	429c      	cmp	r4, r3
 8015c82:	d201      	bcs.n	8015c88 <_ntoa_format+0x5c>
 8015c84:	2c1f      	cmp	r4, #31
 8015c86:	d9f6      	bls.n	8015c76 <_ntoa_format+0x4a>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8015c88:	06ea      	lsls	r2, r5, #27
 8015c8a:	d515      	bpl.n	8015cb8 <_ntoa_format+0x8c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8015c8c:	056a      	lsls	r2, r5, #21
 8015c8e:	d405      	bmi.n	8015c9c <_ntoa_format+0x70>
 8015c90:	2c00      	cmp	r4, #0
 8015c92:	d003      	beq.n	8015c9c <_ntoa_format+0x70>
 8015c94:	42bc      	cmp	r4, r7
 8015c96:	d01c      	beq.n	8015cd2 <_ntoa_format+0xa6>
 8015c98:	429c      	cmp	r4, r3
 8015c9a:	d01a      	beq.n	8015cd2 <_ntoa_format+0xa6>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015c9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c9e:	2a10      	cmp	r2, #16
 8015ca0:	d023      	beq.n	8015cea <_ntoa_format+0xbe>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015ca2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ca4:	2a10      	cmp	r2, #16
 8015ca6:	d028      	beq.n	8015cfa <_ntoa_format+0xce>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015ca8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015caa:	2a02      	cmp	r2, #2
 8015cac:	d02d      	beq.n	8015d0a <_ntoa_format+0xde>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015cae:	2c1f      	cmp	r4, #31
 8015cb0:	d802      	bhi.n	8015cb8 <_ntoa_format+0x8c>
      buf[len++] = '0';
 8015cb2:	2730      	movs	r7, #48	; 0x30
 8015cb4:	5537      	strb	r7, [r6, r4]
 8015cb6:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015cb8:	2c1f      	cmp	r4, #31
 8015cba:	d82f      	bhi.n	8015d1c <_ntoa_format+0xf0>
    if (negative) {
 8015cbc:	464a      	mov	r2, r9
 8015cbe:	2a00      	cmp	r2, #0
 8015cc0:	d129      	bne.n	8015d16 <_ntoa_format+0xea>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 8015cc2:	076a      	lsls	r2, r5, #29
 8015cc4:	d437      	bmi.n	8015d36 <_ntoa_format+0x10a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 8015cc6:	072a      	lsls	r2, r5, #28
 8015cc8:	d528      	bpl.n	8015d1c <_ntoa_format+0xf0>
      buf[len++] = ' ';
 8015cca:	2720      	movs	r7, #32
 8015ccc:	5537      	strb	r7, [r6, r4]
 8015cce:	3401      	adds	r4, #1
 8015cd0:	e024      	b.n	8015d1c <_ntoa_format+0xf0>
      len--;
 8015cd2:	1e67      	subs	r7, r4, #1
      if (len && (base == 16U)) {
 8015cd4:	2f00      	cmp	r7, #0
 8015cd6:	d006      	beq.n	8015ce6 <_ntoa_format+0xba>
 8015cd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015cda:	2a10      	cmp	r2, #16
 8015cdc:	d001      	beq.n	8015ce2 <_ntoa_format+0xb6>
      len--;
 8015cde:	003c      	movs	r4, r7
 8015ce0:	e7dc      	b.n	8015c9c <_ntoa_format+0x70>
        len--;
 8015ce2:	3c02      	subs	r4, #2
 8015ce4:	e7da      	b.n	8015c9c <_ntoa_format+0x70>
      len--;
 8015ce6:	003c      	movs	r4, r7
 8015ce8:	e7d8      	b.n	8015c9c <_ntoa_format+0x70>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015cea:	06aa      	lsls	r2, r5, #26
 8015cec:	d4d9      	bmi.n	8015ca2 <_ntoa_format+0x76>
 8015cee:	2c1f      	cmp	r4, #31
 8015cf0:	d8d7      	bhi.n	8015ca2 <_ntoa_format+0x76>
      buf[len++] = 'x';
 8015cf2:	2778      	movs	r7, #120	; 0x78
 8015cf4:	5537      	strb	r7, [r6, r4]
 8015cf6:	3401      	adds	r4, #1
 8015cf8:	e7d9      	b.n	8015cae <_ntoa_format+0x82>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015cfa:	06aa      	lsls	r2, r5, #26
 8015cfc:	d5d4      	bpl.n	8015ca8 <_ntoa_format+0x7c>
 8015cfe:	2c1f      	cmp	r4, #31
 8015d00:	d8d2      	bhi.n	8015ca8 <_ntoa_format+0x7c>
      buf[len++] = 'X';
 8015d02:	2758      	movs	r7, #88	; 0x58
 8015d04:	5537      	strb	r7, [r6, r4]
 8015d06:	3401      	adds	r4, #1
 8015d08:	e7d1      	b.n	8015cae <_ntoa_format+0x82>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015d0a:	2c1f      	cmp	r4, #31
 8015d0c:	d8cf      	bhi.n	8015cae <_ntoa_format+0x82>
      buf[len++] = 'b';
 8015d0e:	2762      	movs	r7, #98	; 0x62
 8015d10:	5537      	strb	r7, [r6, r4]
 8015d12:	3401      	adds	r4, #1
 8015d14:	e7cb      	b.n	8015cae <_ntoa_format+0x82>
      buf[len++] = '-';
 8015d16:	272d      	movs	r7, #45	; 0x2d
 8015d18:	5537      	strb	r7, [r6, r4]
 8015d1a:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8015d1c:	9503      	str	r5, [sp, #12]
 8015d1e:	9302      	str	r3, [sp, #8]
 8015d20:	9401      	str	r4, [sp, #4]
 8015d22:	9600      	str	r6, [sp, #0]
 8015d24:	9b05      	ldr	r3, [sp, #20]
 8015d26:	9a04      	ldr	r2, [sp, #16]
 8015d28:	f7ff ff3a 	bl	8015ba0 <_out_rev>
}
 8015d2c:	b007      	add	sp, #28
 8015d2e:	bc0c      	pop	{r2, r3}
 8015d30:	4690      	mov	r8, r2
 8015d32:	4699      	mov	r9, r3
 8015d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 8015d36:	272b      	movs	r7, #43	; 0x2b
 8015d38:	5537      	strb	r7, [r6, r4]
 8015d3a:	3401      	adds	r4, #1
 8015d3c:	e7ee      	b.n	8015d1c <_ntoa_format+0xf0>

08015d3e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d40:	46c6      	mov	lr, r8
 8015d42:	b500      	push	{lr}
 8015d44:	b094      	sub	sp, #80	; 0x50
 8015d46:	9008      	str	r0, [sp, #32]
 8015d48:	9109      	str	r1, [sp, #36]	; 0x24
 8015d4a:	920a      	str	r2, [sp, #40]	; 0x28
 8015d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d4e:	ab1a      	add	r3, sp, #104	; 0x68
 8015d50:	cb10      	ldmia	r3!, {r4}
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	4698      	mov	r8, r3
 8015d56:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015d58:	2c00      	cmp	r4, #0
 8015d5a:	d101      	bne.n	8015d60 <_ntoa_long+0x22>
    flags &= ~FLAGS_HASH;
 8015d5c:	2310      	movs	r3, #16
 8015d5e:	439d      	bics	r5, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015d60:	2780      	movs	r7, #128	; 0x80
 8015d62:	00ff      	lsls	r7, r7, #3
 8015d64:	402f      	ands	r7, r5
 8015d66:	d016      	beq.n	8015d96 <_ntoa_long+0x58>
 8015d68:	2c00      	cmp	r4, #0
 8015d6a:	d020      	beq.n	8015dae <_ntoa_long+0x70>
 8015d6c:	2700      	movs	r7, #0
 8015d6e:	e012      	b.n	8015d96 <_ntoa_long+0x58>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015d70:	06aa      	lsls	r2, r5, #26
 8015d72:	d51a      	bpl.n	8015daa <_ntoa_long+0x6c>
 8015d74:	2141      	movs	r1, #65	; 0x41
 8015d76:	18c9      	adds	r1, r1, r3
 8015d78:	b2c9      	uxtb	r1, r1
 8015d7a:	390a      	subs	r1, #10
 8015d7c:	b2c9      	uxtb	r1, r1
 8015d7e:	1c7e      	adds	r6, r7, #1
 8015d80:	ab0c      	add	r3, sp, #48	; 0x30
 8015d82:	55d9      	strb	r1, [r3, r7]
      value /= base;
 8015d84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d86:	0020      	movs	r0, r4
 8015d88:	f7fb f8f6 	bl	8010f78 <__udivsi3>
 8015d8c:	1e04      	subs	r4, r0, #0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015d8e:	d00f      	beq.n	8015db0 <_ntoa_long+0x72>
 8015d90:	2e1f      	cmp	r6, #31
 8015d92:	d80d      	bhi.n	8015db0 <_ntoa_long+0x72>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015d94:	0037      	movs	r7, r6
      const char digit = (char)(value % base);
 8015d96:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015d98:	0020      	movs	r0, r4
 8015d9a:	f7fb f973 	bl	8011084 <__aeabi_uidivmod>
 8015d9e:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015da0:	2b09      	cmp	r3, #9
 8015da2:	d8e5      	bhi.n	8015d70 <_ntoa_long+0x32>
 8015da4:	3330      	adds	r3, #48	; 0x30
 8015da6:	b2d9      	uxtb	r1, r3
 8015da8:	e7e9      	b.n	8015d7e <_ntoa_long+0x40>
 8015daa:	2161      	movs	r1, #97	; 0x61
 8015dac:	e7e3      	b.n	8015d76 <_ntoa_long+0x38>
  size_t len = 0U;
 8015dae:	2600      	movs	r6, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015db0:	9506      	str	r5, [sp, #24]
 8015db2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015db4:	9305      	str	r3, [sp, #20]
 8015db6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015db8:	9304      	str	r3, [sp, #16]
 8015dba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015dbc:	9303      	str	r3, [sp, #12]
 8015dbe:	4643      	mov	r3, r8
 8015dc0:	9302      	str	r3, [sp, #8]
 8015dc2:	9601      	str	r6, [sp, #4]
 8015dc4:	ab0c      	add	r3, sp, #48	; 0x30
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015dce:	9808      	ldr	r0, [sp, #32]
 8015dd0:	f7ff ff2c 	bl	8015c2c <_ntoa_format>
}
 8015dd4:	b014      	add	sp, #80	; 0x50
 8015dd6:	bc04      	pop	{r2}
 8015dd8:	4690      	mov	r8, r2
 8015dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ddc <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dde:	46d6      	mov	lr, sl
 8015de0:	464f      	mov	r7, r9
 8015de2:	b580      	push	{r7, lr}
 8015de4:	b099      	sub	sp, #100	; 0x64
 8015de6:	900c      	str	r0, [sp, #48]	; 0x30
 8015de8:	910d      	str	r1, [sp, #52]	; 0x34
 8015dea:	920e      	str	r2, [sp, #56]	; 0x38
 8015dec:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dee:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015df0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015df2:	ab22      	add	r3, sp, #136	; 0x88
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	469a      	mov	sl, r3
 8015df8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8015dfc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e02:	4699      	mov	r9, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015e04:	0023      	movs	r3, r4
 8015e06:	432b      	orrs	r3, r5
 8015e08:	d103      	bne.n	8015e12 <_ntoa_long_long+0x36>
    flags &= ~FLAGS_HASH;
 8015e0a:	3310      	adds	r3, #16
 8015e0c:	464a      	mov	r2, r9
 8015e0e:	439a      	bics	r2, r3
 8015e10:	4691      	mov	r9, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015e12:	2680      	movs	r6, #128	; 0x80
 8015e14:	00f6      	lsls	r6, r6, #3
 8015e16:	464b      	mov	r3, r9
 8015e18:	401e      	ands	r6, r3
 8015e1a:	d007      	beq.n	8015e2c <_ntoa_long_long+0x50>
 8015e1c:	0023      	movs	r3, r4
 8015e1e:	432b      	orrs	r3, r5
 8015e20:	d031      	beq.n	8015e86 <_ntoa_long_long+0xaa>
 8015e22:	2600      	movs	r6, #0
 8015e24:	0037      	movs	r7, r6
 8015e26:	464e      	mov	r6, r9
 8015e28:	9409      	str	r4, [sp, #36]	; 0x24
 8015e2a:	e01b      	b.n	8015e64 <_ntoa_long_long+0x88>
 8015e2c:	0037      	movs	r7, r6
 8015e2e:	464e      	mov	r6, r9
 8015e30:	9409      	str	r4, [sp, #36]	; 0x24
 8015e32:	e017      	b.n	8015e64 <_ntoa_long_long+0x88>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015e34:	06b2      	lsls	r2, r6, #26
 8015e36:	d521      	bpl.n	8015e7c <_ntoa_long_long+0xa0>
 8015e38:	2241      	movs	r2, #65	; 0x41
 8015e3a:	18d2      	adds	r2, r2, r3
 8015e3c:	b2d2      	uxtb	r2, r2
 8015e3e:	3a0a      	subs	r2, #10
 8015e40:	b2d2      	uxtb	r2, r2
 8015e42:	1c7c      	adds	r4, r7, #1
 8015e44:	ab10      	add	r3, sp, #64	; 0x40
 8015e46:	55da      	strb	r2, [r3, r7]
      value /= base;
 8015e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e4e:	0029      	movs	r1, r5
 8015e50:	f7fb fa80 	bl	8011354 <__aeabi_uldivmod>
 8015e54:	9009      	str	r0, [sp, #36]	; 0x24
 8015e56:	000d      	movs	r5, r1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015e58:	000b      	movs	r3, r1
 8015e5a:	4303      	orrs	r3, r0
 8015e5c:	d015      	beq.n	8015e8a <_ntoa_long_long+0xae>
 8015e5e:	2c1f      	cmp	r4, #31
 8015e60:	d80e      	bhi.n	8015e80 <_ntoa_long_long+0xa4>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015e62:	0027      	movs	r7, r4
      const char digit = (char)(value % base);
 8015e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e6a:	0029      	movs	r1, r5
 8015e6c:	f7fb fa72 	bl	8011354 <__aeabi_uldivmod>
 8015e70:	b2d3      	uxtb	r3, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015e72:	2b09      	cmp	r3, #9
 8015e74:	d8de      	bhi.n	8015e34 <_ntoa_long_long+0x58>
 8015e76:	3330      	adds	r3, #48	; 0x30
 8015e78:	b2da      	uxtb	r2, r3
 8015e7a:	e7e2      	b.n	8015e42 <_ntoa_long_long+0x66>
 8015e7c:	2261      	movs	r2, #97	; 0x61
 8015e7e:	e7dc      	b.n	8015e3a <_ntoa_long_long+0x5e>
 8015e80:	0027      	movs	r7, r4
 8015e82:	46b1      	mov	r9, r6
 8015e84:	e003      	b.n	8015e8e <_ntoa_long_long+0xb2>
  size_t len = 0U;
 8015e86:	2700      	movs	r7, #0
 8015e88:	e001      	b.n	8015e8e <_ntoa_long_long+0xb2>
 8015e8a:	0027      	movs	r7, r4
 8015e8c:	46b1      	mov	r9, r6
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015e8e:	464b      	mov	r3, r9
 8015e90:	9306      	str	r3, [sp, #24]
 8015e92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8015e94:	9305      	str	r3, [sp, #20]
 8015e96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e98:	9304      	str	r3, [sp, #16]
 8015e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e9c:	9303      	str	r3, [sp, #12]
 8015e9e:	4653      	mov	r3, sl
 8015ea0:	9302      	str	r3, [sp, #8]
 8015ea2:	9701      	str	r7, [sp, #4]
 8015ea4:	ab10      	add	r3, sp, #64	; 0x40
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015eaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eac:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015eae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015eb0:	f7ff febc 	bl	8015c2c <_ntoa_format>
}
 8015eb4:	b019      	add	sp, #100	; 0x64
 8015eb6:	bc0c      	pop	{r2, r3}
 8015eb8:	4691      	mov	r9, r2
 8015eba:	469a      	mov	sl, r3
 8015ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08015ec0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8015ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ec2:	46de      	mov	lr, fp
 8015ec4:	4657      	mov	r7, sl
 8015ec6:	464e      	mov	r6, r9
 8015ec8:	4645      	mov	r5, r8
 8015eca:	b5e0      	push	{r5, r6, r7, lr}
 8015ecc:	b093      	sub	sp, #76	; 0x4c
 8015ece:	0006      	movs	r6, r0
 8015ed0:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ed2:	920a      	str	r2, [sp, #40]	; 0x28
 8015ed4:	9311      	str	r3, [sp, #68]	; 0x44
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8015ed6:	2900      	cmp	r1, #0
 8015ed8:	d100      	bne.n	8015edc <_vsnprintf+0x1c>
 8015eda:	e299      	b.n	8016410 <_vsnprintf+0x550>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8015edc:	2700      	movs	r7, #0
  while (*format)
 8015ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ee0:	7818      	ldrb	r0, [r3, #0]
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	d100      	bne.n	8015ee8 <_vsnprintf+0x28>
 8015ee6:	e295      	b.n	8016414 <_vsnprintf+0x554>
    if (*format != '%') {
 8015ee8:	2825      	cmp	r0, #37	; 0x25
 8015eea:	d009      	beq.n	8015f00 <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8015eec:	1c7c      	adds	r4, r7, #1
 8015eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ef0:	003a      	movs	r2, r7
 8015ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ef4:	47b0      	blx	r6
      format++;
 8015ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ef8:	3301      	adds	r3, #1
 8015efa:	9311      	str	r3, [sp, #68]	; 0x44
      out(*format, buffer, idx++, maxlen);
 8015efc:	0027      	movs	r7, r4
      continue;
 8015efe:	e7ee      	b.n	8015ede <_vsnprintf+0x1e>
      format++;
 8015f00:	3301      	adds	r3, #1
 8015f02:	9311      	str	r3, [sp, #68]	; 0x44
    flags = 0U;
 8015f04:	2500      	movs	r5, #0
 8015f06:	e01d      	b.n	8015f44 <_vsnprintf+0x84>
  return (ch >= '0') && (ch <= '9');
 8015f08:	000b      	movs	r3, r1
 8015f0a:	3b30      	subs	r3, #48	; 0x30
 8015f0c:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 8015f0e:	2b09      	cmp	r3, #9
 8015f10:	d937      	bls.n	8015f82 <_vsnprintf+0xc2>
    else if (*format == '*') {
 8015f12:	292a      	cmp	r1, #42	; 0x2a
 8015f14:	d03a      	beq.n	8015f8c <_vsnprintf+0xcc>
    width = 0U;
 8015f16:	2300      	movs	r3, #0
 8015f18:	4698      	mov	r8, r3
    if (*format == '.') {
 8015f1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f1c:	781a      	ldrb	r2, [r3, #0]
 8015f1e:	2a2e      	cmp	r2, #46	; 0x2e
 8015f20:	d044      	beq.n	8015fac <_vsnprintf+0xec>
    precision = 0U;
 8015f22:	2300      	movs	r3, #0
 8015f24:	469b      	mov	fp, r3
    switch (*format) {
 8015f26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f28:	7813      	ldrb	r3, [r2, #0]
 8015f2a:	3b68      	subs	r3, #104	; 0x68
 8015f2c:	b2d9      	uxtb	r1, r3
 8015f2e:	2912      	cmp	r1, #18
 8015f30:	d900      	bls.n	8015f34 <_vsnprintf+0x74>
 8015f32:	e080      	b.n	8016036 <_vsnprintf+0x176>
 8015f34:	008b      	lsls	r3, r1, #2
 8015f36:	49ce      	ldr	r1, [pc, #824]	; (8016270 <_vsnprintf+0x3b0>)
 8015f38:	58cb      	ldr	r3, [r1, r3]
 8015f3a:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	431d      	orrs	r5, r3
 8015f40:	3201      	adds	r2, #1
 8015f42:	9211      	str	r2, [sp, #68]	; 0x44
      switch (*format) {
 8015f44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f46:	7811      	ldrb	r1, [r2, #0]
 8015f48:	000b      	movs	r3, r1
 8015f4a:	3b20      	subs	r3, #32
 8015f4c:	b2d8      	uxtb	r0, r3
 8015f4e:	2810      	cmp	r0, #16
 8015f50:	d8da      	bhi.n	8015f08 <_vsnprintf+0x48>
 8015f52:	0083      	lsls	r3, r0, #2
 8015f54:	48c7      	ldr	r0, [pc, #796]	; (8016274 <_vsnprintf+0x3b4>)
 8015f56:	58c3      	ldr	r3, [r0, r3]
 8015f58:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015f5a:	2302      	movs	r3, #2
 8015f5c:	431d      	orrs	r5, r3
 8015f5e:	3201      	adds	r2, #1
 8015f60:	9211      	str	r2, [sp, #68]	; 0x44
 8015f62:	e7ef      	b.n	8015f44 <_vsnprintf+0x84>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8015f64:	2304      	movs	r3, #4
 8015f66:	431d      	orrs	r5, r3
 8015f68:	3201      	adds	r2, #1
 8015f6a:	9211      	str	r2, [sp, #68]	; 0x44
 8015f6c:	e7ea      	b.n	8015f44 <_vsnprintf+0x84>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015f6e:	2308      	movs	r3, #8
 8015f70:	431d      	orrs	r5, r3
 8015f72:	3201      	adds	r2, #1
 8015f74:	9211      	str	r2, [sp, #68]	; 0x44
 8015f76:	e7e5      	b.n	8015f44 <_vsnprintf+0x84>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8015f78:	2310      	movs	r3, #16
 8015f7a:	431d      	orrs	r5, r3
 8015f7c:	3201      	adds	r2, #1
 8015f7e:	9211      	str	r2, [sp, #68]	; 0x44
 8015f80:	e7e0      	b.n	8015f44 <_vsnprintf+0x84>
      width = _atoi(&format);
 8015f82:	a811      	add	r0, sp, #68	; 0x44
 8015f84:	f7ff fdfa 	bl	8015b7c <_atoi>
 8015f88:	4680      	mov	r8, r0
 8015f8a:	e7c6      	b.n	8015f1a <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 8015f8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015f8e:	1d1a      	adds	r2, r3, #4
 8015f90:	921c      	str	r2, [sp, #112]	; 0x70
 8015f92:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	db04      	blt.n	8015fa2 <_vsnprintf+0xe2>
        width = (unsigned int)w;
 8015f98:	4698      	mov	r8, r3
      format++;
 8015f9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f9c:	3301      	adds	r3, #1
 8015f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8015fa0:	e7bb      	b.n	8015f1a <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 8015fa2:	2202      	movs	r2, #2
 8015fa4:	4315      	orrs	r5, r2
        width = (unsigned int)-w;
 8015fa6:	425b      	negs	r3, r3
 8015fa8:	4698      	mov	r8, r3
 8015faa:	e7f6      	b.n	8015f9a <_vsnprintf+0xda>
      flags |= FLAGS_PRECISION;
 8015fac:	2280      	movs	r2, #128	; 0x80
 8015fae:	00d2      	lsls	r2, r2, #3
 8015fb0:	4315      	orrs	r5, r2
      format++;
 8015fb2:	1c5a      	adds	r2, r3, #1
 8015fb4:	9211      	str	r2, [sp, #68]	; 0x44
      if (_is_digit(*format)) {
 8015fb6:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 8015fb8:	0013      	movs	r3, r2
 8015fba:	3b30      	subs	r3, #48	; 0x30
 8015fbc:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 8015fbe:	2b09      	cmp	r3, #9
 8015fc0:	d904      	bls.n	8015fcc <_vsnprintf+0x10c>
      else if (*format == '*') {
 8015fc2:	2a2a      	cmp	r2, #42	; 0x2a
 8015fc4:	d007      	beq.n	8015fd6 <_vsnprintf+0x116>
    precision = 0U;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	469b      	mov	fp, r3
 8015fca:	e7ac      	b.n	8015f26 <_vsnprintf+0x66>
        precision = _atoi(&format);
 8015fcc:	a811      	add	r0, sp, #68	; 0x44
 8015fce:	f7ff fdd5 	bl	8015b7c <_atoi>
 8015fd2:	4683      	mov	fp, r0
 8015fd4:	e7a7      	b.n	8015f26 <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 8015fd6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015fd8:	1d1a      	adds	r2, r3, #4
 8015fda:	921c      	str	r2, [sp, #112]	; 0x70
 8015fdc:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	db04      	blt.n	8015fec <_vsnprintf+0x12c>
 8015fe2:	469b      	mov	fp, r3
        format++;
 8015fe4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fe6:	3301      	adds	r3, #1
 8015fe8:	9311      	str	r3, [sp, #68]	; 0x44
 8015fea:	e79c      	b.n	8015f26 <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015fec:	2300      	movs	r3, #0
 8015fee:	e7f8      	b.n	8015fe2 <_vsnprintf+0x122>
        flags |= FLAGS_LONG;
 8015ff0:	2380      	movs	r3, #128	; 0x80
 8015ff2:	005b      	lsls	r3, r3, #1
 8015ff4:	432b      	orrs	r3, r5
        format++;
 8015ff6:	1c51      	adds	r1, r2, #1
 8015ff8:	9111      	str	r1, [sp, #68]	; 0x44
        if (*format == 'l') {
 8015ffa:	7852      	ldrb	r2, [r2, #1]
 8015ffc:	2a6c      	cmp	r2, #108	; 0x6c
 8015ffe:	d001      	beq.n	8016004 <_vsnprintf+0x144>
        flags |= FLAGS_LONG;
 8016000:	001d      	movs	r5, r3
 8016002:	e018      	b.n	8016036 <_vsnprintf+0x176>
          flags |= FLAGS_LONG_LONG;
 8016004:	23c0      	movs	r3, #192	; 0xc0
 8016006:	009b      	lsls	r3, r3, #2
 8016008:	431d      	orrs	r5, r3
          format++;
 801600a:	3101      	adds	r1, #1
 801600c:	9111      	str	r1, [sp, #68]	; 0x44
 801600e:	e012      	b.n	8016036 <_vsnprintf+0x176>
        flags |= FLAGS_SHORT;
 8016010:	2380      	movs	r3, #128	; 0x80
 8016012:	432b      	orrs	r3, r5
        format++;
 8016014:	1c51      	adds	r1, r2, #1
 8016016:	9111      	str	r1, [sp, #68]	; 0x44
        if (*format == 'h') {
 8016018:	7852      	ldrb	r2, [r2, #1]
 801601a:	2a68      	cmp	r2, #104	; 0x68
 801601c:	d001      	beq.n	8016022 <_vsnprintf+0x162>
        flags |= FLAGS_SHORT;
 801601e:	001d      	movs	r5, r3
 8016020:	e009      	b.n	8016036 <_vsnprintf+0x176>
          flags |= FLAGS_CHAR;
 8016022:	23c0      	movs	r3, #192	; 0xc0
 8016024:	431d      	orrs	r5, r3
          format++;
 8016026:	3101      	adds	r1, #1
 8016028:	9111      	str	r1, [sp, #68]	; 0x44
 801602a:	e004      	b.n	8016036 <_vsnprintf+0x176>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801602c:	2380      	movs	r3, #128	; 0x80
 801602e:	005b      	lsls	r3, r3, #1
 8016030:	431d      	orrs	r5, r3
        format++;
 8016032:	3201      	adds	r2, #1
 8016034:	9211      	str	r2, [sp, #68]	; 0x44
    switch (*format) {
 8016036:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016038:	7818      	ldrb	r0, [r3, #0]
 801603a:	0003      	movs	r3, r0
 801603c:	3b25      	subs	r3, #37	; 0x25
 801603e:	b2da      	uxtb	r2, r3
 8016040:	2a53      	cmp	r2, #83	; 0x53
 8016042:	d900      	bls.n	8016046 <_vsnprintf+0x186>
 8016044:	e1da      	b.n	80163fc <_vsnprintf+0x53c>
 8016046:	0093      	lsls	r3, r2, #2
 8016048:	4a8b      	ldr	r2, [pc, #556]	; (8016278 <_vsnprintf+0x3b8>)
 801604a:	58d3      	ldr	r3, [r2, r3]
 801604c:	469f      	mov	pc, r3
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801604e:	2380      	movs	r3, #128	; 0x80
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	431d      	orrs	r5, r3
        format++;
 8016054:	3201      	adds	r2, #1
 8016056:	9211      	str	r2, [sp, #68]	; 0x44
        break;
 8016058:	e7ed      	b.n	8016036 <_vsnprintf+0x176>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801605a:	2380      	movs	r3, #128	; 0x80
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	431d      	orrs	r5, r3
        format++;
 8016060:	3201      	adds	r2, #1
 8016062:	9211      	str	r2, [sp, #68]	; 0x44
        break;
 8016064:	e7e7      	b.n	8016036 <_vsnprintf+0x176>
        if (*format == 'x' || *format == 'X') {
 8016066:	2878      	cmp	r0, #120	; 0x78
 8016068:	d00a      	beq.n	8016080 <_vsnprintf+0x1c0>
 801606a:	2858      	cmp	r0, #88	; 0x58
 801606c:	d03b      	beq.n	80160e6 <_vsnprintf+0x226>
        else if (*format == 'o') {
 801606e:	286f      	cmp	r0, #111	; 0x6f
 8016070:	d03c      	beq.n	80160ec <_vsnprintf+0x22c>
        else if (*format == 'b') {
 8016072:	2862      	cmp	r0, #98	; 0x62
 8016074:	d03d      	beq.n	80160f2 <_vsnprintf+0x232>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8016076:	2310      	movs	r3, #16
 8016078:	439d      	bics	r5, r3
          base = 10U;
 801607a:	3b06      	subs	r3, #6
 801607c:	469c      	mov	ip, r3
 801607e:	e001      	b.n	8016084 <_vsnprintf+0x1c4>
          base = 16U;
 8016080:	2310      	movs	r3, #16
 8016082:	469c      	mov	ip, r3
        if (*format == 'X') {
 8016084:	2858      	cmp	r0, #88	; 0x58
 8016086:	d037      	beq.n	80160f8 <_vsnprintf+0x238>
        if ((*format != 'i') && (*format != 'd')) {
 8016088:	2869      	cmp	r0, #105	; 0x69
 801608a:	d003      	beq.n	8016094 <_vsnprintf+0x1d4>
 801608c:	2864      	cmp	r0, #100	; 0x64
 801608e:	d001      	beq.n	8016094 <_vsnprintf+0x1d4>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8016090:	220c      	movs	r2, #12
 8016092:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8016094:	056b      	lsls	r3, r5, #21
 8016096:	d501      	bpl.n	801609c <_vsnprintf+0x1dc>
          flags &= ~FLAGS_ZEROPAD;
 8016098:	2201      	movs	r2, #1
 801609a:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 801609c:	2869      	cmp	r0, #105	; 0x69
 801609e:	d02e      	beq.n	80160fe <_vsnprintf+0x23e>
 80160a0:	2864      	cmp	r0, #100	; 0x64
 80160a2:	d02c      	beq.n	80160fe <_vsnprintf+0x23e>
          if (flags & FLAGS_LONG_LONG) {
 80160a4:	05ab      	lsls	r3, r5, #22
 80160a6:	d500      	bpl.n	80160aa <_vsnprintf+0x1ea>
 80160a8:	e0a1      	b.n	80161ee <_vsnprintf+0x32e>
          else if (flags & FLAGS_LONG) {
 80160aa:	05eb      	lsls	r3, r5, #23
 80160ac:	d500      	bpl.n	80160b0 <_vsnprintf+0x1f0>
 80160ae:	e0bb      	b.n	8016228 <_vsnprintf+0x368>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80160b0:	066b      	lsls	r3, r5, #25
 80160b2:	d400      	bmi.n	80160b6 <_vsnprintf+0x1f6>
 80160b4:	e0ce      	b.n	8016254 <_vsnprintf+0x394>
 80160b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80160b8:	1d11      	adds	r1, r2, #4
 80160ba:	911c      	str	r1, [sp, #112]	; 0x70
 80160bc:	6811      	ldr	r1, [r2, #0]
 80160be:	22ff      	movs	r2, #255	; 0xff
 80160c0:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80160c2:	9505      	str	r5, [sp, #20]
 80160c4:	4643      	mov	r3, r8
 80160c6:	9304      	str	r3, [sp, #16]
 80160c8:	465b      	mov	r3, fp
 80160ca:	9303      	str	r3, [sp, #12]
 80160cc:	4663      	mov	r3, ip
 80160ce:	9302      	str	r3, [sp, #8]
 80160d0:	2300      	movs	r3, #0
 80160d2:	9301      	str	r3, [sp, #4]
 80160d4:	9200      	str	r2, [sp, #0]
 80160d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160d8:	003a      	movs	r2, r7
 80160da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160dc:	0030      	movs	r0, r6
 80160de:	f7ff fe2e 	bl	8015d3e <_ntoa_long>
 80160e2:	0007      	movs	r7, r0
 80160e4:	e02a      	b.n	801613c <_vsnprintf+0x27c>
          base = 16U;
 80160e6:	2310      	movs	r3, #16
 80160e8:	469c      	mov	ip, r3
 80160ea:	e7cb      	b.n	8016084 <_vsnprintf+0x1c4>
          base =  8U;
 80160ec:	2308      	movs	r3, #8
 80160ee:	469c      	mov	ip, r3
 80160f0:	e7c8      	b.n	8016084 <_vsnprintf+0x1c4>
          base =  2U;
 80160f2:	2302      	movs	r3, #2
 80160f4:	469c      	mov	ip, r3
 80160f6:	e7c5      	b.n	8016084 <_vsnprintf+0x1c4>
          flags |= FLAGS_UPPERCASE;
 80160f8:	2220      	movs	r2, #32
 80160fa:	4315      	orrs	r5, r2
 80160fc:	e7c4      	b.n	8016088 <_vsnprintf+0x1c8>
          if (flags & FLAGS_LONG_LONG) {
 80160fe:	05ab      	lsls	r3, r5, #22
 8016100:	d420      	bmi.n	8016144 <_vsnprintf+0x284>
          else if (flags & FLAGS_LONG) {
 8016102:	05eb      	lsls	r3, r5, #23
 8016104:	d44d      	bmi.n	80161a2 <_vsnprintf+0x2e2>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8016106:	066b      	lsls	r3, r5, #25
 8016108:	d564      	bpl.n	80161d4 <_vsnprintf+0x314>
 801610a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801610c:	1d11      	adds	r1, r2, #4
 801610e:	911c      	str	r1, [sp, #112]	; 0x70
 8016110:	7812      	ldrb	r2, [r2, #0]
 8016112:	b252      	sxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016114:	17d3      	asrs	r3, r2, #31
 8016116:	18d1      	adds	r1, r2, r3
 8016118:	4059      	eors	r1, r3
 801611a:	0fd2      	lsrs	r2, r2, #31
 801611c:	9505      	str	r5, [sp, #20]
 801611e:	4643      	mov	r3, r8
 8016120:	9304      	str	r3, [sp, #16]
 8016122:	465b      	mov	r3, fp
 8016124:	9303      	str	r3, [sp, #12]
 8016126:	4663      	mov	r3, ip
 8016128:	9302      	str	r3, [sp, #8]
 801612a:	9201      	str	r2, [sp, #4]
 801612c:	9100      	str	r1, [sp, #0]
 801612e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016130:	003a      	movs	r2, r7
 8016132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016134:	0030      	movs	r0, r6
 8016136:	f7ff fe02 	bl	8015d3e <_ntoa_long>
 801613a:	0007      	movs	r7, r0
        format++;
 801613c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801613e:	3301      	adds	r3, #1
 8016140:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 8016142:	e6cc      	b.n	8015ede <_vsnprintf+0x1e>
            const long long value = va_arg(va, long long);
 8016144:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016146:	1dda      	adds	r2, r3, #7
 8016148:	2107      	movs	r1, #7
 801614a:	438a      	bics	r2, r1
 801614c:	0011      	movs	r1, r2
 801614e:	3108      	adds	r1, #8
 8016150:	911c      	str	r1, [sp, #112]	; 0x70
 8016152:	6811      	ldr	r1, [r2, #0]
 8016154:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016156:	17d3      	asrs	r3, r2, #31
 8016158:	930e      	str	r3, [sp, #56]	; 0x38
 801615a:	930f      	str	r3, [sp, #60]	; 0x3c
 801615c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801615e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8016160:	0018      	movs	r0, r3
 8016162:	4048      	eors	r0, r1
 8016164:	900c      	str	r0, [sp, #48]	; 0x30
 8016166:	0021      	movs	r1, r4
 8016168:	4051      	eors	r1, r2
 801616a:	910d      	str	r1, [sp, #52]	; 0x34
 801616c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801616e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016170:	1ac0      	subs	r0, r0, r3
 8016172:	41a1      	sbcs	r1, r4
 8016174:	900c      	str	r0, [sp, #48]	; 0x30
 8016176:	910d      	str	r1, [sp, #52]	; 0x34
 8016178:	0fd2      	lsrs	r2, r2, #31
 801617a:	9508      	str	r5, [sp, #32]
 801617c:	4643      	mov	r3, r8
 801617e:	9307      	str	r3, [sp, #28]
 8016180:	465b      	mov	r3, fp
 8016182:	9306      	str	r3, [sp, #24]
 8016184:	4663      	mov	r3, ip
 8016186:	9304      	str	r3, [sp, #16]
 8016188:	2300      	movs	r3, #0
 801618a:	9305      	str	r3, [sp, #20]
 801618c:	9202      	str	r2, [sp, #8]
 801618e:	9000      	str	r0, [sp, #0]
 8016190:	9101      	str	r1, [sp, #4]
 8016192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016194:	003a      	movs	r2, r7
 8016196:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016198:	0030      	movs	r0, r6
 801619a:	f7ff fe1f 	bl	8015ddc <_ntoa_long_long>
 801619e:	0007      	movs	r7, r0
 80161a0:	e7cc      	b.n	801613c <_vsnprintf+0x27c>
            const long value = va_arg(va, long);
 80161a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161a4:	1d11      	adds	r1, r2, #4
 80161a6:	911c      	str	r1, [sp, #112]	; 0x70
 80161a8:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80161aa:	17d3      	asrs	r3, r2, #31
 80161ac:	18d1      	adds	r1, r2, r3
 80161ae:	4059      	eors	r1, r3
 80161b0:	0fd2      	lsrs	r2, r2, #31
 80161b2:	9505      	str	r5, [sp, #20]
 80161b4:	4643      	mov	r3, r8
 80161b6:	9304      	str	r3, [sp, #16]
 80161b8:	465b      	mov	r3, fp
 80161ba:	9303      	str	r3, [sp, #12]
 80161bc:	4663      	mov	r3, ip
 80161be:	9302      	str	r3, [sp, #8]
 80161c0:	9201      	str	r2, [sp, #4]
 80161c2:	9100      	str	r1, [sp, #0]
 80161c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161c6:	003a      	movs	r2, r7
 80161c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161ca:	0030      	movs	r0, r6
 80161cc:	f7ff fdb7 	bl	8015d3e <_ntoa_long>
 80161d0:	0007      	movs	r7, r0
 80161d2:	e7b3      	b.n	801613c <_vsnprintf+0x27c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80161d4:	062b      	lsls	r3, r5, #24
 80161d6:	d505      	bpl.n	80161e4 <_vsnprintf+0x324>
 80161d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161da:	1d11      	adds	r1, r2, #4
 80161dc:	911c      	str	r1, [sp, #112]	; 0x70
 80161de:	2300      	movs	r3, #0
 80161e0:	5ed2      	ldrsh	r2, [r2, r3]
 80161e2:	e797      	b.n	8016114 <_vsnprintf+0x254>
 80161e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161e6:	1d11      	adds	r1, r2, #4
 80161e8:	911c      	str	r1, [sp, #112]	; 0x70
 80161ea:	6812      	ldr	r2, [r2, #0]
 80161ec:	e792      	b.n	8016114 <_vsnprintf+0x254>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80161ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161f0:	1dda      	adds	r2, r3, #7
 80161f2:	2107      	movs	r1, #7
 80161f4:	438a      	bics	r2, r1
 80161f6:	0011      	movs	r1, r2
 80161f8:	3108      	adds	r1, #8
 80161fa:	911c      	str	r1, [sp, #112]	; 0x70
 80161fc:	6813      	ldr	r3, [r2, #0]
 80161fe:	6854      	ldr	r4, [r2, #4]
 8016200:	9300      	str	r3, [sp, #0]
 8016202:	9401      	str	r4, [sp, #4]
 8016204:	2200      	movs	r2, #0
 8016206:	9508      	str	r5, [sp, #32]
 8016208:	4643      	mov	r3, r8
 801620a:	9307      	str	r3, [sp, #28]
 801620c:	465b      	mov	r3, fp
 801620e:	9306      	str	r3, [sp, #24]
 8016210:	4663      	mov	r3, ip
 8016212:	9304      	str	r3, [sp, #16]
 8016214:	9205      	str	r2, [sp, #20]
 8016216:	9202      	str	r2, [sp, #8]
 8016218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801621a:	003a      	movs	r2, r7
 801621c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801621e:	0030      	movs	r0, r6
 8016220:	f7ff fddc 	bl	8015ddc <_ntoa_long_long>
 8016224:	0007      	movs	r7, r0
 8016226:	e789      	b.n	801613c <_vsnprintf+0x27c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8016228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801622a:	1d11      	adds	r1, r2, #4
 801622c:	911c      	str	r1, [sp, #112]	; 0x70
 801622e:	6813      	ldr	r3, [r2, #0]
 8016230:	9300      	str	r3, [sp, #0]
 8016232:	9505      	str	r5, [sp, #20]
 8016234:	4643      	mov	r3, r8
 8016236:	9304      	str	r3, [sp, #16]
 8016238:	465b      	mov	r3, fp
 801623a:	9303      	str	r3, [sp, #12]
 801623c:	4663      	mov	r3, ip
 801623e:	9302      	str	r3, [sp, #8]
 8016240:	2300      	movs	r3, #0
 8016242:	9301      	str	r3, [sp, #4]
 8016244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016246:	003a      	movs	r2, r7
 8016248:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801624a:	0030      	movs	r0, r6
 801624c:	f7ff fd77 	bl	8015d3e <_ntoa_long>
 8016250:	0007      	movs	r7, r0
 8016252:	e773      	b.n	801613c <_vsnprintf+0x27c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8016254:	062b      	lsls	r3, r5, #24
 8016256:	d506      	bpl.n	8016266 <_vsnprintf+0x3a6>
 8016258:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801625a:	1d11      	adds	r1, r2, #4
 801625c:	911c      	str	r1, [sp, #112]	; 0x70
 801625e:	6812      	ldr	r2, [r2, #0]
 8016260:	0412      	lsls	r2, r2, #16
 8016262:	0c12      	lsrs	r2, r2, #16
 8016264:	e72d      	b.n	80160c2 <_vsnprintf+0x202>
 8016266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016268:	1d11      	adds	r1, r2, #4
 801626a:	911c      	str	r1, [sp, #112]	; 0x70
 801626c:	6812      	ldr	r2, [r2, #0]
 801626e:	e728      	b.n	80160c2 <_vsnprintf+0x202>
 8016270:	0801f790 	.word	0x0801f790
 8016274:	0801f7dc 	.word	0x0801f7dc
 8016278:	0801f820 	.word	0x0801f820
        if (!(flags & FLAGS_LEFT)) {
 801627c:	2302      	movs	r3, #2
 801627e:	402b      	ands	r3, r5
 8016280:	469a      	mov	sl, r3
 8016282:	d01e      	beq.n	80162c2 <_vsnprintf+0x402>
        unsigned int l = 1U;
 8016284:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8016286:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016288:	1d1a      	adds	r2, r3, #4
 801628a:	921c      	str	r2, [sp, #112]	; 0x70
 801628c:	1c7c      	adds	r4, r7, #1
 801628e:	7818      	ldrb	r0, [r3, #0]
 8016290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016292:	003a      	movs	r2, r7
 8016294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016296:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8016298:	4653      	mov	r3, sl
 801629a:	2b00      	cmp	r3, #0
 801629c:	d115      	bne.n	80162ca <_vsnprintf+0x40a>
        format++;
 801629e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80162a0:	3301      	adds	r3, #1
 80162a2:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 80162a4:	0027      	movs	r7, r4
 80162a6:	e61a      	b.n	8015ede <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 80162a8:	1c54      	adds	r4, r2, #1
 80162aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162ae:	2020      	movs	r0, #32
 80162b0:	47b0      	blx	r6
          while (l++ < width) {
 80162b2:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 80162b4:	0022      	movs	r2, r4
          while (l++ < width) {
 80162b6:	1c5d      	adds	r5, r3, #1
 80162b8:	429f      	cmp	r7, r3
 80162ba:	d8f5      	bhi.n	80162a8 <_vsnprintf+0x3e8>
 80162bc:	46b8      	mov	r8, r7
 80162be:	0017      	movs	r7, r2
 80162c0:	e7e1      	b.n	8016286 <_vsnprintf+0x3c6>
        unsigned int l = 1U;
 80162c2:	2301      	movs	r3, #1
 80162c4:	003a      	movs	r2, r7
 80162c6:	4647      	mov	r7, r8
 80162c8:	e7f5      	b.n	80162b6 <_vsnprintf+0x3f6>
 80162ca:	0022      	movs	r2, r4
 80162cc:	0033      	movs	r3, r6
 80162ce:	4646      	mov	r6, r8
 80162d0:	4698      	mov	r8, r3
 80162d2:	e006      	b.n	80162e2 <_vsnprintf+0x422>
            out(' ', buffer, idx++, maxlen);
 80162d4:	1c57      	adds	r7, r2, #1
 80162d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162da:	2020      	movs	r0, #32
 80162dc:	47c0      	blx	r8
          while (l++ < width) {
 80162de:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 80162e0:	003a      	movs	r2, r7
          while (l++ < width) {
 80162e2:	1c6c      	adds	r4, r5, #1
 80162e4:	42ae      	cmp	r6, r5
 80162e6:	d8f5      	bhi.n	80162d4 <_vsnprintf+0x414>
 80162e8:	0014      	movs	r4, r2
 80162ea:	4646      	mov	r6, r8
 80162ec:	e7d7      	b.n	801629e <_vsnprintf+0x3de>
        const char* p = va_arg(va, char*);
 80162ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80162f0:	1d1a      	adds	r2, r3, #4
 80162f2:	921c      	str	r2, [sp, #112]	; 0x70
 80162f4:	681c      	ldr	r4, [r3, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80162f6:	465b      	mov	r3, fp
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d100      	bne.n	80162fe <_vsnprintf+0x43e>
 80162fc:	3b01      	subs	r3, #1
 80162fe:	0021      	movs	r1, r4
 8016300:	e001      	b.n	8016306 <_vsnprintf+0x446>
  for (s = str; *s && maxsize--; ++s);
 8016302:	3101      	adds	r1, #1
 8016304:	0013      	movs	r3, r2
 8016306:	780a      	ldrb	r2, [r1, #0]
 8016308:	2a00      	cmp	r2, #0
 801630a:	d002      	beq.n	8016312 <_vsnprintf+0x452>
 801630c:	1e5a      	subs	r2, r3, #1
 801630e:	2b00      	cmp	r3, #0
 8016310:	d1f7      	bne.n	8016302 <_vsnprintf+0x442>
  return (unsigned int)(s - str);
 8016312:	1b0b      	subs	r3, r1, r4
 8016314:	469a      	mov	sl, r3
        if (flags & FLAGS_PRECISION) {
 8016316:	2380      	movs	r3, #128	; 0x80
 8016318:	00db      	lsls	r3, r3, #3
 801631a:	402b      	ands	r3, r5
 801631c:	4699      	mov	r9, r3
 801631e:	d002      	beq.n	8016326 <_vsnprintf+0x466>
          l = (l < precision ? l : precision);
 8016320:	45da      	cmp	sl, fp
 8016322:	d900      	bls.n	8016326 <_vsnprintf+0x466>
 8016324:	46da      	mov	sl, fp
        if (!(flags & FLAGS_LEFT)) {
 8016326:	2302      	movs	r3, #2
 8016328:	402b      	ands	r3, r5
 801632a:	9310      	str	r3, [sp, #64]	; 0x40
 801632c:	d002      	beq.n	8016334 <_vsnprintf+0x474>
 801632e:	003a      	movs	r2, r7
 8016330:	464f      	mov	r7, r9
 8016332:	e01c      	b.n	801636e <_vsnprintf+0x4ae>
 8016334:	003a      	movs	r2, r7
 8016336:	0021      	movs	r1, r4
 8016338:	4644      	mov	r4, r8
 801633a:	4653      	mov	r3, sl
 801633c:	4688      	mov	r8, r1
 801633e:	e006      	b.n	801634e <_vsnprintf+0x48e>
            out(' ', buffer, idx++, maxlen);
 8016340:	1c57      	adds	r7, r2, #1
 8016342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016344:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016346:	2020      	movs	r0, #32
 8016348:	47b0      	blx	r6
          while (l++ < width) {
 801634a:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 801634c:	003a      	movs	r2, r7
          while (l++ < width) {
 801634e:	1c5d      	adds	r5, r3, #1
 8016350:	429c      	cmp	r4, r3
 8016352:	d8f5      	bhi.n	8016340 <_vsnprintf+0x480>
 8016354:	4643      	mov	r3, r8
 8016356:	46a0      	mov	r8, r4
 8016358:	001c      	movs	r4, r3
 801635a:	46aa      	mov	sl, r5
 801635c:	464f      	mov	r7, r9
 801635e:	e006      	b.n	801636e <_vsnprintf+0x4ae>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8016360:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 8016362:	3401      	adds	r4, #1
 8016364:	1c55      	adds	r5, r2, #1
 8016366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801636a:	47b0      	blx	r6
 801636c:	002a      	movs	r2, r5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801636e:	7820      	ldrb	r0, [r4, #0]
 8016370:	2800      	cmp	r0, #0
 8016372:	d006      	beq.n	8016382 <_vsnprintf+0x4c2>
 8016374:	2f00      	cmp	r7, #0
 8016376:	d0f4      	beq.n	8016362 <_vsnprintf+0x4a2>
 8016378:	465b      	mov	r3, fp
 801637a:	3b01      	subs	r3, #1
 801637c:	4659      	mov	r1, fp
 801637e:	2900      	cmp	r1, #0
 8016380:	d1ee      	bne.n	8016360 <_vsnprintf+0x4a0>
 8016382:	0017      	movs	r7, r2
        if (flags & FLAGS_LEFT) {
 8016384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016386:	2b00      	cmp	r3, #0
 8016388:	d103      	bne.n	8016392 <_vsnprintf+0x4d2>
        format++;
 801638a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801638c:	3301      	adds	r3, #1
 801638e:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 8016390:	e5a5      	b.n	8015ede <_vsnprintf+0x1e>
 8016392:	4647      	mov	r7, r8
 8016394:	4653      	mov	r3, sl
 8016396:	e006      	b.n	80163a6 <_vsnprintf+0x4e6>
            out(' ', buffer, idx++, maxlen);
 8016398:	1c55      	adds	r5, r2, #1
 801639a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801639c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801639e:	2020      	movs	r0, #32
 80163a0:	47b0      	blx	r6
          while (l++ < width) {
 80163a2:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 80163a4:	002a      	movs	r2, r5
          while (l++ < width) {
 80163a6:	1c5c      	adds	r4, r3, #1
 80163a8:	429f      	cmp	r7, r3
 80163aa:	d8f5      	bhi.n	8016398 <_vsnprintf+0x4d8>
 80163ac:	0017      	movs	r7, r2
 80163ae:	e7ec      	b.n	801638a <_vsnprintf+0x4ca>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80163b0:	2321      	movs	r3, #33	; 0x21
 80163b2:	432b      	orrs	r3, r5
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80163b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80163b6:	1d11      	adds	r1, r2, #4
 80163b8:	911c      	str	r1, [sp, #112]	; 0x70
 80163ba:	6812      	ldr	r2, [r2, #0]
 80163bc:	9200      	str	r2, [sp, #0]
 80163be:	9305      	str	r3, [sp, #20]
 80163c0:	2308      	movs	r3, #8
 80163c2:	9304      	str	r3, [sp, #16]
 80163c4:	465b      	mov	r3, fp
 80163c6:	9303      	str	r3, [sp, #12]
 80163c8:	2310      	movs	r3, #16
 80163ca:	9302      	str	r3, [sp, #8]
 80163cc:	2300      	movs	r3, #0
 80163ce:	9301      	str	r3, [sp, #4]
 80163d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163d2:	003a      	movs	r2, r7
 80163d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163d6:	0030      	movs	r0, r6
 80163d8:	f7ff fcb1 	bl	8015d3e <_ntoa_long>
 80163dc:	0007      	movs	r7, r0
        format++;
 80163de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163e0:	3301      	adds	r3, #1
 80163e2:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 80163e4:	e57b      	b.n	8015ede <_vsnprintf+0x1e>
        out('%', buffer, idx++, maxlen);
 80163e6:	1c7c      	adds	r4, r7, #1
 80163e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163ea:	003a      	movs	r2, r7
 80163ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163ee:	2025      	movs	r0, #37	; 0x25
 80163f0:	47b0      	blx	r6
        format++;
 80163f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80163f4:	3301      	adds	r3, #1
 80163f6:	9311      	str	r3, [sp, #68]	; 0x44
        out('%', buffer, idx++, maxlen);
 80163f8:	0027      	movs	r7, r4
        break;
 80163fa:	e570      	b.n	8015ede <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 80163fc:	1c7c      	adds	r4, r7, #1
 80163fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016400:	003a      	movs	r2, r7
 8016402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016404:	47b0      	blx	r6
        format++;
 8016406:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016408:	3301      	adds	r3, #1
 801640a:	9311      	str	r3, [sp, #68]	; 0x44
        out(*format, buffer, idx++, maxlen);
 801640c:	0027      	movs	r7, r4
        break;
 801640e:	e566      	b.n	8015ede <_vsnprintf+0x1e>
    out = _out_null;
 8016410:	4e09      	ldr	r6, [pc, #36]	; (8016438 <_vsnprintf+0x578>)
 8016412:	e563      	b.n	8015edc <_vsnprintf+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8016414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016416:	429f      	cmp	r7, r3
 8016418:	d30c      	bcc.n	8016434 <_vsnprintf+0x574>
 801641a:	1e5a      	subs	r2, r3, #1
 801641c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016420:	2000      	movs	r0, #0
 8016422:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 8016424:	0038      	movs	r0, r7
 8016426:	b013      	add	sp, #76	; 0x4c
 8016428:	bc3c      	pop	{r2, r3, r4, r5}
 801642a:	4690      	mov	r8, r2
 801642c:	4699      	mov	r9, r3
 801642e:	46a2      	mov	sl, r4
 8016430:	46ab      	mov	fp, r5
 8016432:	bdf0      	pop	{r4, r5, r6, r7, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8016434:	003a      	movs	r2, r7
 8016436:	e7f1      	b.n	801641c <_vsnprintf+0x55c>
 8016438:	08015b6d 	.word	0x08015b6d

0801643c <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 801643c:	b500      	push	{lr}
 801643e:	b083      	sub	sp, #12
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	0013      	movs	r3, r2
 8016444:	000a      	movs	r2, r1
 8016446:	0001      	movs	r1, r0
 8016448:	4802      	ldr	r0, [pc, #8]	; (8016454 <vsnprintf_+0x18>)
 801644a:	f7ff fd39 	bl	8015ec0 <_vsnprintf>
}
 801644e:	b003      	add	sp, #12
 8016450:	bd00      	pop	{pc}
 8016452:	46c0      	nop			; (mov r8, r8)
 8016454:	08015b65 	.word	0x08015b65

08016458 <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8016458:	b500      	push	{lr}
 801645a:	b085      	sub	sp, #20
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 801645c:	9002      	str	r0, [sp, #8]
 801645e:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8016460:	2101      	movs	r1, #1
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	0013      	movs	r3, r2
 8016466:	424a      	negs	r2, r1
 8016468:	a902      	add	r1, sp, #8
 801646a:	4802      	ldr	r0, [pc, #8]	; (8016474 <fctvprintf+0x1c>)
 801646c:	f7ff fd28 	bl	8015ec0 <_vsnprintf>
}
 8016470:	b005      	add	sp, #20
 8016472:	bd00      	pop	{pc}
 8016474:	08015b6f 	.word	0x08015b6f

08016478 <malloc>:
 8016478:	b510      	push	{r4, lr}
 801647a:	4b03      	ldr	r3, [pc, #12]	; (8016488 <malloc+0x10>)
 801647c:	0001      	movs	r1, r0
 801647e:	6818      	ldr	r0, [r3, #0]
 8016480:	f7fd fb42 	bl	8013b08 <_malloc_r>
 8016484:	bd10      	pop	{r4, pc}
 8016486:	46c0      	nop			; (mov r8, r8)
 8016488:	20000008 	.word	0x20000008

0801648c <free>:
 801648c:	b510      	push	{r4, lr}
 801648e:	4b03      	ldr	r3, [pc, #12]	; (801649c <free+0x10>)
 8016490:	0001      	movs	r1, r0
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	f7fd faee 	bl	8013a74 <_free_r>
 8016498:	bd10      	pop	{r4, pc}
 801649a:	46c0      	nop			; (mov r8, r8)
 801649c:	20000008 	.word	0x20000008

080164a0 <memcpy>:
 80164a0:	2300      	movs	r3, #0
 80164a2:	b510      	push	{r4, lr}
 80164a4:	429a      	cmp	r2, r3
 80164a6:	d100      	bne.n	80164aa <memcpy+0xa>
 80164a8:	bd10      	pop	{r4, pc}
 80164aa:	5ccc      	ldrb	r4, [r1, r3]
 80164ac:	54c4      	strb	r4, [r0, r3]
 80164ae:	3301      	adds	r3, #1
 80164b0:	e7f8      	b.n	80164a4 <memcpy+0x4>

080164b2 <memmove>:
 80164b2:	b510      	push	{r4, lr}
 80164b4:	4288      	cmp	r0, r1
 80164b6:	d902      	bls.n	80164be <memmove+0xc>
 80164b8:	188b      	adds	r3, r1, r2
 80164ba:	4298      	cmp	r0, r3
 80164bc:	d303      	bcc.n	80164c6 <memmove+0x14>
 80164be:	2300      	movs	r3, #0
 80164c0:	e007      	b.n	80164d2 <memmove+0x20>
 80164c2:	5c8b      	ldrb	r3, [r1, r2]
 80164c4:	5483      	strb	r3, [r0, r2]
 80164c6:	3a01      	subs	r2, #1
 80164c8:	d2fb      	bcs.n	80164c2 <memmove+0x10>
 80164ca:	bd10      	pop	{r4, pc}
 80164cc:	5ccc      	ldrb	r4, [r1, r3]
 80164ce:	54c4      	strb	r4, [r0, r3]
 80164d0:	3301      	adds	r3, #1
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d1fa      	bne.n	80164cc <memmove+0x1a>
 80164d6:	e7f8      	b.n	80164ca <memmove+0x18>

080164d8 <putchar>:
 80164d8:	4b08      	ldr	r3, [pc, #32]	; (80164fc <putchar+0x24>)
 80164da:	b570      	push	{r4, r5, r6, lr}
 80164dc:	681c      	ldr	r4, [r3, #0]
 80164de:	0005      	movs	r5, r0
 80164e0:	2c00      	cmp	r4, #0
 80164e2:	d005      	beq.n	80164f0 <putchar+0x18>
 80164e4:	69a3      	ldr	r3, [r4, #24]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d102      	bne.n	80164f0 <putchar+0x18>
 80164ea:	0020      	movs	r0, r4
 80164ec:	f7fd fa02 	bl	80138f4 <__sinit>
 80164f0:	0029      	movs	r1, r5
 80164f2:	68a2      	ldr	r2, [r4, #8]
 80164f4:	0020      	movs	r0, r4
 80164f6:	f000 f803 	bl	8016500 <_putc_r>
 80164fa:	bd70      	pop	{r4, r5, r6, pc}
 80164fc:	20000008 	.word	0x20000008

08016500 <_putc_r>:
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	0006      	movs	r6, r0
 8016504:	000d      	movs	r5, r1
 8016506:	0014      	movs	r4, r2
 8016508:	2800      	cmp	r0, #0
 801650a:	d004      	beq.n	8016516 <_putc_r+0x16>
 801650c:	6983      	ldr	r3, [r0, #24]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d101      	bne.n	8016516 <_putc_r+0x16>
 8016512:	f7fd f9ef 	bl	80138f4 <__sinit>
 8016516:	4b12      	ldr	r3, [pc, #72]	; (8016560 <_putc_r+0x60>)
 8016518:	429c      	cmp	r4, r3
 801651a:	d111      	bne.n	8016540 <_putc_r+0x40>
 801651c:	6874      	ldr	r4, [r6, #4]
 801651e:	68a3      	ldr	r3, [r4, #8]
 8016520:	3b01      	subs	r3, #1
 8016522:	60a3      	str	r3, [r4, #8]
 8016524:	2b00      	cmp	r3, #0
 8016526:	da05      	bge.n	8016534 <_putc_r+0x34>
 8016528:	69a2      	ldr	r2, [r4, #24]
 801652a:	4293      	cmp	r3, r2
 801652c:	db12      	blt.n	8016554 <_putc_r+0x54>
 801652e:	b2eb      	uxtb	r3, r5
 8016530:	2b0a      	cmp	r3, #10
 8016532:	d00f      	beq.n	8016554 <_putc_r+0x54>
 8016534:	6823      	ldr	r3, [r4, #0]
 8016536:	b2e8      	uxtb	r0, r5
 8016538:	1c5a      	adds	r2, r3, #1
 801653a:	6022      	str	r2, [r4, #0]
 801653c:	701d      	strb	r5, [r3, #0]
 801653e:	bd70      	pop	{r4, r5, r6, pc}
 8016540:	4b08      	ldr	r3, [pc, #32]	; (8016564 <_putc_r+0x64>)
 8016542:	429c      	cmp	r4, r3
 8016544:	d101      	bne.n	801654a <_putc_r+0x4a>
 8016546:	68b4      	ldr	r4, [r6, #8]
 8016548:	e7e9      	b.n	801651e <_putc_r+0x1e>
 801654a:	4b07      	ldr	r3, [pc, #28]	; (8016568 <_putc_r+0x68>)
 801654c:	429c      	cmp	r4, r3
 801654e:	d1e6      	bne.n	801651e <_putc_r+0x1e>
 8016550:	68f4      	ldr	r4, [r6, #12]
 8016552:	e7e4      	b.n	801651e <_putc_r+0x1e>
 8016554:	0022      	movs	r2, r4
 8016556:	0029      	movs	r1, r5
 8016558:	0030      	movs	r0, r6
 801655a:	f000 f807 	bl	801656c <__swbuf_r>
 801655e:	e7ee      	b.n	801653e <_putc_r+0x3e>
 8016560:	0801f540 	.word	0x0801f540
 8016564:	0801f560 	.word	0x0801f560
 8016568:	0801f520 	.word	0x0801f520

0801656c <__swbuf_r>:
 801656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656e:	0005      	movs	r5, r0
 8016570:	000e      	movs	r6, r1
 8016572:	0014      	movs	r4, r2
 8016574:	2800      	cmp	r0, #0
 8016576:	d004      	beq.n	8016582 <__swbuf_r+0x16>
 8016578:	6983      	ldr	r3, [r0, #24]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d101      	bne.n	8016582 <__swbuf_r+0x16>
 801657e:	f7fd f9b9 	bl	80138f4 <__sinit>
 8016582:	4b22      	ldr	r3, [pc, #136]	; (801660c <__swbuf_r+0xa0>)
 8016584:	429c      	cmp	r4, r3
 8016586:	d12d      	bne.n	80165e4 <__swbuf_r+0x78>
 8016588:	686c      	ldr	r4, [r5, #4]
 801658a:	69a3      	ldr	r3, [r4, #24]
 801658c:	60a3      	str	r3, [r4, #8]
 801658e:	89a3      	ldrh	r3, [r4, #12]
 8016590:	071b      	lsls	r3, r3, #28
 8016592:	d531      	bpl.n	80165f8 <__swbuf_r+0x8c>
 8016594:	6923      	ldr	r3, [r4, #16]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d02e      	beq.n	80165f8 <__swbuf_r+0x8c>
 801659a:	6823      	ldr	r3, [r4, #0]
 801659c:	6922      	ldr	r2, [r4, #16]
 801659e:	b2f7      	uxtb	r7, r6
 80165a0:	1a98      	subs	r0, r3, r2
 80165a2:	6963      	ldr	r3, [r4, #20]
 80165a4:	b2f6      	uxtb	r6, r6
 80165a6:	4283      	cmp	r3, r0
 80165a8:	dc05      	bgt.n	80165b6 <__swbuf_r+0x4a>
 80165aa:	0021      	movs	r1, r4
 80165ac:	0028      	movs	r0, r5
 80165ae:	f7fd f91f 	bl	80137f0 <_fflush_r>
 80165b2:	2800      	cmp	r0, #0
 80165b4:	d126      	bne.n	8016604 <__swbuf_r+0x98>
 80165b6:	68a3      	ldr	r3, [r4, #8]
 80165b8:	3001      	adds	r0, #1
 80165ba:	3b01      	subs	r3, #1
 80165bc:	60a3      	str	r3, [r4, #8]
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	1c5a      	adds	r2, r3, #1
 80165c2:	6022      	str	r2, [r4, #0]
 80165c4:	701f      	strb	r7, [r3, #0]
 80165c6:	6963      	ldr	r3, [r4, #20]
 80165c8:	4283      	cmp	r3, r0
 80165ca:	d004      	beq.n	80165d6 <__swbuf_r+0x6a>
 80165cc:	89a3      	ldrh	r3, [r4, #12]
 80165ce:	07db      	lsls	r3, r3, #31
 80165d0:	d51a      	bpl.n	8016608 <__swbuf_r+0x9c>
 80165d2:	2e0a      	cmp	r6, #10
 80165d4:	d118      	bne.n	8016608 <__swbuf_r+0x9c>
 80165d6:	0021      	movs	r1, r4
 80165d8:	0028      	movs	r0, r5
 80165da:	f7fd f909 	bl	80137f0 <_fflush_r>
 80165de:	2800      	cmp	r0, #0
 80165e0:	d012      	beq.n	8016608 <__swbuf_r+0x9c>
 80165e2:	e00f      	b.n	8016604 <__swbuf_r+0x98>
 80165e4:	4b0a      	ldr	r3, [pc, #40]	; (8016610 <__swbuf_r+0xa4>)
 80165e6:	429c      	cmp	r4, r3
 80165e8:	d101      	bne.n	80165ee <__swbuf_r+0x82>
 80165ea:	68ac      	ldr	r4, [r5, #8]
 80165ec:	e7cd      	b.n	801658a <__swbuf_r+0x1e>
 80165ee:	4b09      	ldr	r3, [pc, #36]	; (8016614 <__swbuf_r+0xa8>)
 80165f0:	429c      	cmp	r4, r3
 80165f2:	d1ca      	bne.n	801658a <__swbuf_r+0x1e>
 80165f4:	68ec      	ldr	r4, [r5, #12]
 80165f6:	e7c8      	b.n	801658a <__swbuf_r+0x1e>
 80165f8:	0021      	movs	r1, r4
 80165fa:	0028      	movs	r0, r5
 80165fc:	f000 f80c 	bl	8016618 <__swsetup_r>
 8016600:	2800      	cmp	r0, #0
 8016602:	d0ca      	beq.n	801659a <__swbuf_r+0x2e>
 8016604:	2601      	movs	r6, #1
 8016606:	4276      	negs	r6, r6
 8016608:	0030      	movs	r0, r6
 801660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801660c:	0801f540 	.word	0x0801f540
 8016610:	0801f560 	.word	0x0801f560
 8016614:	0801f520 	.word	0x0801f520

08016618 <__swsetup_r>:
 8016618:	4b36      	ldr	r3, [pc, #216]	; (80166f4 <__swsetup_r+0xdc>)
 801661a:	b570      	push	{r4, r5, r6, lr}
 801661c:	681d      	ldr	r5, [r3, #0]
 801661e:	0006      	movs	r6, r0
 8016620:	000c      	movs	r4, r1
 8016622:	2d00      	cmp	r5, #0
 8016624:	d005      	beq.n	8016632 <__swsetup_r+0x1a>
 8016626:	69ab      	ldr	r3, [r5, #24]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d102      	bne.n	8016632 <__swsetup_r+0x1a>
 801662c:	0028      	movs	r0, r5
 801662e:	f7fd f961 	bl	80138f4 <__sinit>
 8016632:	4b31      	ldr	r3, [pc, #196]	; (80166f8 <__swsetup_r+0xe0>)
 8016634:	429c      	cmp	r4, r3
 8016636:	d10f      	bne.n	8016658 <__swsetup_r+0x40>
 8016638:	686c      	ldr	r4, [r5, #4]
 801663a:	230c      	movs	r3, #12
 801663c:	5ee2      	ldrsh	r2, [r4, r3]
 801663e:	b293      	uxth	r3, r2
 8016640:	0719      	lsls	r1, r3, #28
 8016642:	d42d      	bmi.n	80166a0 <__swsetup_r+0x88>
 8016644:	06d9      	lsls	r1, r3, #27
 8016646:	d411      	bmi.n	801666c <__swsetup_r+0x54>
 8016648:	2309      	movs	r3, #9
 801664a:	2001      	movs	r0, #1
 801664c:	6033      	str	r3, [r6, #0]
 801664e:	3337      	adds	r3, #55	; 0x37
 8016650:	4313      	orrs	r3, r2
 8016652:	81a3      	strh	r3, [r4, #12]
 8016654:	4240      	negs	r0, r0
 8016656:	bd70      	pop	{r4, r5, r6, pc}
 8016658:	4b28      	ldr	r3, [pc, #160]	; (80166fc <__swsetup_r+0xe4>)
 801665a:	429c      	cmp	r4, r3
 801665c:	d101      	bne.n	8016662 <__swsetup_r+0x4a>
 801665e:	68ac      	ldr	r4, [r5, #8]
 8016660:	e7eb      	b.n	801663a <__swsetup_r+0x22>
 8016662:	4b27      	ldr	r3, [pc, #156]	; (8016700 <__swsetup_r+0xe8>)
 8016664:	429c      	cmp	r4, r3
 8016666:	d1e8      	bne.n	801663a <__swsetup_r+0x22>
 8016668:	68ec      	ldr	r4, [r5, #12]
 801666a:	e7e6      	b.n	801663a <__swsetup_r+0x22>
 801666c:	075b      	lsls	r3, r3, #29
 801666e:	d513      	bpl.n	8016698 <__swsetup_r+0x80>
 8016670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016672:	2900      	cmp	r1, #0
 8016674:	d008      	beq.n	8016688 <__swsetup_r+0x70>
 8016676:	0023      	movs	r3, r4
 8016678:	3344      	adds	r3, #68	; 0x44
 801667a:	4299      	cmp	r1, r3
 801667c:	d002      	beq.n	8016684 <__swsetup_r+0x6c>
 801667e:	0030      	movs	r0, r6
 8016680:	f7fd f9f8 	bl	8013a74 <_free_r>
 8016684:	2300      	movs	r3, #0
 8016686:	6363      	str	r3, [r4, #52]	; 0x34
 8016688:	2224      	movs	r2, #36	; 0x24
 801668a:	89a3      	ldrh	r3, [r4, #12]
 801668c:	4393      	bics	r3, r2
 801668e:	81a3      	strh	r3, [r4, #12]
 8016690:	2300      	movs	r3, #0
 8016692:	6063      	str	r3, [r4, #4]
 8016694:	6923      	ldr	r3, [r4, #16]
 8016696:	6023      	str	r3, [r4, #0]
 8016698:	2308      	movs	r3, #8
 801669a:	89a2      	ldrh	r2, [r4, #12]
 801669c:	4313      	orrs	r3, r2
 801669e:	81a3      	strh	r3, [r4, #12]
 80166a0:	6923      	ldr	r3, [r4, #16]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d10b      	bne.n	80166be <__swsetup_r+0xa6>
 80166a6:	21a0      	movs	r1, #160	; 0xa0
 80166a8:	2280      	movs	r2, #128	; 0x80
 80166aa:	89a3      	ldrh	r3, [r4, #12]
 80166ac:	0089      	lsls	r1, r1, #2
 80166ae:	0092      	lsls	r2, r2, #2
 80166b0:	400b      	ands	r3, r1
 80166b2:	4293      	cmp	r3, r2
 80166b4:	d003      	beq.n	80166be <__swsetup_r+0xa6>
 80166b6:	0021      	movs	r1, r4
 80166b8:	0030      	movs	r0, r6
 80166ba:	f000 f84b 	bl	8016754 <__smakebuf_r>
 80166be:	2301      	movs	r3, #1
 80166c0:	89a2      	ldrh	r2, [r4, #12]
 80166c2:	4013      	ands	r3, r2
 80166c4:	d011      	beq.n	80166ea <__swsetup_r+0xd2>
 80166c6:	2300      	movs	r3, #0
 80166c8:	60a3      	str	r3, [r4, #8]
 80166ca:	6963      	ldr	r3, [r4, #20]
 80166cc:	425b      	negs	r3, r3
 80166ce:	61a3      	str	r3, [r4, #24]
 80166d0:	2000      	movs	r0, #0
 80166d2:	6923      	ldr	r3, [r4, #16]
 80166d4:	4283      	cmp	r3, r0
 80166d6:	d1be      	bne.n	8016656 <__swsetup_r+0x3e>
 80166d8:	230c      	movs	r3, #12
 80166da:	5ee2      	ldrsh	r2, [r4, r3]
 80166dc:	0613      	lsls	r3, r2, #24
 80166de:	d5ba      	bpl.n	8016656 <__swsetup_r+0x3e>
 80166e0:	2340      	movs	r3, #64	; 0x40
 80166e2:	4313      	orrs	r3, r2
 80166e4:	81a3      	strh	r3, [r4, #12]
 80166e6:	3801      	subs	r0, #1
 80166e8:	e7b5      	b.n	8016656 <__swsetup_r+0x3e>
 80166ea:	0792      	lsls	r2, r2, #30
 80166ec:	d400      	bmi.n	80166f0 <__swsetup_r+0xd8>
 80166ee:	6963      	ldr	r3, [r4, #20]
 80166f0:	60a3      	str	r3, [r4, #8]
 80166f2:	e7ed      	b.n	80166d0 <__swsetup_r+0xb8>
 80166f4:	20000008 	.word	0x20000008
 80166f8:	0801f540 	.word	0x0801f540
 80166fc:	0801f560 	.word	0x0801f560
 8016700:	0801f520 	.word	0x0801f520

08016704 <__swhatbuf_r>:
 8016704:	b570      	push	{r4, r5, r6, lr}
 8016706:	000e      	movs	r6, r1
 8016708:	001d      	movs	r5, r3
 801670a:	230e      	movs	r3, #14
 801670c:	5ec9      	ldrsh	r1, [r1, r3]
 801670e:	b096      	sub	sp, #88	; 0x58
 8016710:	0014      	movs	r4, r2
 8016712:	2900      	cmp	r1, #0
 8016714:	da07      	bge.n	8016726 <__swhatbuf_r+0x22>
 8016716:	2300      	movs	r3, #0
 8016718:	602b      	str	r3, [r5, #0]
 801671a:	89b3      	ldrh	r3, [r6, #12]
 801671c:	061b      	lsls	r3, r3, #24
 801671e:	d411      	bmi.n	8016744 <__swhatbuf_r+0x40>
 8016720:	2380      	movs	r3, #128	; 0x80
 8016722:	00db      	lsls	r3, r3, #3
 8016724:	e00f      	b.n	8016746 <__swhatbuf_r+0x42>
 8016726:	466a      	mov	r2, sp
 8016728:	f000 f858 	bl	80167dc <_fstat_r>
 801672c:	2800      	cmp	r0, #0
 801672e:	dbf2      	blt.n	8016716 <__swhatbuf_r+0x12>
 8016730:	22f0      	movs	r2, #240	; 0xf0
 8016732:	9b01      	ldr	r3, [sp, #4]
 8016734:	0212      	lsls	r2, r2, #8
 8016736:	4013      	ands	r3, r2
 8016738:	4a05      	ldr	r2, [pc, #20]	; (8016750 <__swhatbuf_r+0x4c>)
 801673a:	189b      	adds	r3, r3, r2
 801673c:	425a      	negs	r2, r3
 801673e:	4153      	adcs	r3, r2
 8016740:	602b      	str	r3, [r5, #0]
 8016742:	e7ed      	b.n	8016720 <__swhatbuf_r+0x1c>
 8016744:	2340      	movs	r3, #64	; 0x40
 8016746:	2000      	movs	r0, #0
 8016748:	6023      	str	r3, [r4, #0]
 801674a:	b016      	add	sp, #88	; 0x58
 801674c:	bd70      	pop	{r4, r5, r6, pc}
 801674e:	46c0      	nop			; (mov r8, r8)
 8016750:	ffffe000 	.word	0xffffe000

08016754 <__smakebuf_r>:
 8016754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016756:	2602      	movs	r6, #2
 8016758:	898b      	ldrh	r3, [r1, #12]
 801675a:	0005      	movs	r5, r0
 801675c:	000c      	movs	r4, r1
 801675e:	4233      	tst	r3, r6
 8016760:	d006      	beq.n	8016770 <__smakebuf_r+0x1c>
 8016762:	0023      	movs	r3, r4
 8016764:	3347      	adds	r3, #71	; 0x47
 8016766:	6023      	str	r3, [r4, #0]
 8016768:	6123      	str	r3, [r4, #16]
 801676a:	2301      	movs	r3, #1
 801676c:	6163      	str	r3, [r4, #20]
 801676e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8016770:	ab01      	add	r3, sp, #4
 8016772:	466a      	mov	r2, sp
 8016774:	f7ff ffc6 	bl	8016704 <__swhatbuf_r>
 8016778:	9900      	ldr	r1, [sp, #0]
 801677a:	0007      	movs	r7, r0
 801677c:	0028      	movs	r0, r5
 801677e:	f7fd f9c3 	bl	8013b08 <_malloc_r>
 8016782:	2800      	cmp	r0, #0
 8016784:	d108      	bne.n	8016798 <__smakebuf_r+0x44>
 8016786:	220c      	movs	r2, #12
 8016788:	5ea3      	ldrsh	r3, [r4, r2]
 801678a:	059a      	lsls	r2, r3, #22
 801678c:	d4ef      	bmi.n	801676e <__smakebuf_r+0x1a>
 801678e:	2203      	movs	r2, #3
 8016790:	4393      	bics	r3, r2
 8016792:	431e      	orrs	r6, r3
 8016794:	81a6      	strh	r6, [r4, #12]
 8016796:	e7e4      	b.n	8016762 <__smakebuf_r+0xe>
 8016798:	4b0f      	ldr	r3, [pc, #60]	; (80167d8 <__smakebuf_r+0x84>)
 801679a:	62ab      	str	r3, [r5, #40]	; 0x28
 801679c:	2380      	movs	r3, #128	; 0x80
 801679e:	89a2      	ldrh	r2, [r4, #12]
 80167a0:	6020      	str	r0, [r4, #0]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	81a3      	strh	r3, [r4, #12]
 80167a6:	9b00      	ldr	r3, [sp, #0]
 80167a8:	6120      	str	r0, [r4, #16]
 80167aa:	6163      	str	r3, [r4, #20]
 80167ac:	9b01      	ldr	r3, [sp, #4]
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d00d      	beq.n	80167ce <__smakebuf_r+0x7a>
 80167b2:	230e      	movs	r3, #14
 80167b4:	5ee1      	ldrsh	r1, [r4, r3]
 80167b6:	0028      	movs	r0, r5
 80167b8:	f000 f822 	bl	8016800 <_isatty_r>
 80167bc:	2800      	cmp	r0, #0
 80167be:	d006      	beq.n	80167ce <__smakebuf_r+0x7a>
 80167c0:	2203      	movs	r2, #3
 80167c2:	89a3      	ldrh	r3, [r4, #12]
 80167c4:	4393      	bics	r3, r2
 80167c6:	001a      	movs	r2, r3
 80167c8:	2301      	movs	r3, #1
 80167ca:	4313      	orrs	r3, r2
 80167cc:	81a3      	strh	r3, [r4, #12]
 80167ce:	89a0      	ldrh	r0, [r4, #12]
 80167d0:	4338      	orrs	r0, r7
 80167d2:	81a0      	strh	r0, [r4, #12]
 80167d4:	e7cb      	b.n	801676e <__smakebuf_r+0x1a>
 80167d6:	46c0      	nop			; (mov r8, r8)
 80167d8:	080138b9 	.word	0x080138b9

080167dc <_fstat_r>:
 80167dc:	2300      	movs	r3, #0
 80167de:	b570      	push	{r4, r5, r6, lr}
 80167e0:	4c06      	ldr	r4, [pc, #24]	; (80167fc <_fstat_r+0x20>)
 80167e2:	0005      	movs	r5, r0
 80167e4:	0008      	movs	r0, r1
 80167e6:	0011      	movs	r1, r2
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	f000 f81b 	bl	8016824 <_fstat>
 80167ee:	1c43      	adds	r3, r0, #1
 80167f0:	d103      	bne.n	80167fa <_fstat_r+0x1e>
 80167f2:	6823      	ldr	r3, [r4, #0]
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d000      	beq.n	80167fa <_fstat_r+0x1e>
 80167f8:	602b      	str	r3, [r5, #0]
 80167fa:	bd70      	pop	{r4, r5, r6, pc}
 80167fc:	200006bc 	.word	0x200006bc

08016800 <_isatty_r>:
 8016800:	2300      	movs	r3, #0
 8016802:	b570      	push	{r4, r5, r6, lr}
 8016804:	4c06      	ldr	r4, [pc, #24]	; (8016820 <_isatty_r+0x20>)
 8016806:	0005      	movs	r5, r0
 8016808:	0008      	movs	r0, r1
 801680a:	6023      	str	r3, [r4, #0]
 801680c:	f000 f812 	bl	8016834 <_isatty>
 8016810:	1c43      	adds	r3, r0, #1
 8016812:	d103      	bne.n	801681c <_isatty_r+0x1c>
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d000      	beq.n	801681c <_isatty_r+0x1c>
 801681a:	602b      	str	r3, [r5, #0]
 801681c:	bd70      	pop	{r4, r5, r6, pc}
 801681e:	46c0      	nop			; (mov r8, r8)
 8016820:	200006bc 	.word	0x200006bc

08016824 <_fstat>:
 8016824:	2258      	movs	r2, #88	; 0x58
 8016826:	2001      	movs	r0, #1
 8016828:	4b01      	ldr	r3, [pc, #4]	; (8016830 <_fstat+0xc>)
 801682a:	4240      	negs	r0, r0
 801682c:	601a      	str	r2, [r3, #0]
 801682e:	4770      	bx	lr
 8016830:	200006bc 	.word	0x200006bc

08016834 <_isatty>:
 8016834:	2258      	movs	r2, #88	; 0x58
 8016836:	4b02      	ldr	r3, [pc, #8]	; (8016840 <_isatty+0xc>)
 8016838:	2000      	movs	r0, #0
 801683a:	601a      	str	r2, [r3, #0]
 801683c:	4770      	bx	lr
 801683e:	46c0      	nop			; (mov r8, r8)
 8016840:	200006bc 	.word	0x200006bc

08016844 <_init>:
 8016844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016846:	46c0      	nop			; (mov r8, r8)
 8016848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801684a:	bc08      	pop	{r3}
 801684c:	469e      	mov	lr, r3
 801684e:	4770      	bx	lr

08016850 <_fini>:
 8016850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016852:	46c0      	nop			; (mov r8, r8)
 8016854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016856:	bc08      	pop	{r3}
 8016858:	469e      	mov	lr, r3
 801685a:	4770      	bx	lr
