
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a50  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009128  08015b10  08015b10  00025b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ec38  0801ec38  0002ec38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ec40  0801ec40  0002ec40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ec44  0801ec44  0002ec44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801ec48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000664  20000070  0801ecb8  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001604  200006d4  0801ecb8  000306d4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032d22  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002384  00000000  00000000  00062dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001b5f8  00000000  00000000  0006513e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000001e8  00000000  00000000  00080736  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00006200  00000000  00000000  0008091e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000939b  00000000  00000000  00086b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000d1cb  00000000  00000000  0008feb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  0009d084  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003618  00000000  00000000  0009d104  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  000a071c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  000a0770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08015af4 	.word	0x08015af4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08015af4 	.word	0x08015af4

08000104 <acc_service_maximize_signal_attenuation_set.part.8>:
 8000104:	b510      	push	{r4, lr}
 8000106:	4b03      	ldr	r3, [pc, #12]	; (8000114 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8000108:	4a03      	ldr	r2, [pc, #12]	; (8000118 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800010c:	4903      	ldr	r1, [pc, #12]	; (800011c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800010e:	2001      	movs	r0, #1
 8000110:	4798      	blx	r3
 8000112:	bd10      	pop	{r4, pc}
 8000114:	200002b0 	.word	0x200002b0
 8000118:	0801bee4 	.word	0x0801bee4
 800011c:	0801d3e8 	.word	0x0801d3e8

08000120 <acc_service_configuration_valid>:
 8000120:	b510      	push	{r4, lr}
 8000122:	2800      	cmp	r0, #0
 8000124:	d00a      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000126:	4b09      	ldr	r3, [pc, #36]	; (800014c <acc_service_configuration_valid+0x2c>)
 8000128:	6802      	ldr	r2, [r0, #0]
 800012a:	429a      	cmp	r2, r3
 800012c:	d106      	bne.n	800013c <acc_service_configuration_valid+0x1c>
 800012e:	8b03      	ldrh	r3, [r0, #24]
 8000130:	2b00      	cmp	r3, #0
 8000132:	d003      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000134:	6943      	ldr	r3, [r0, #20]
 8000136:	2001      	movs	r0, #1
 8000138:	2b00      	cmp	r3, #0
 800013a:	d106      	bne.n	800014a <acc_service_configuration_valid+0x2a>
 800013c:	4b04      	ldr	r3, [pc, #16]	; (8000150 <acc_service_configuration_valid+0x30>)
 800013e:	2000      	movs	r0, #0
 8000140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000142:	4a04      	ldr	r2, [pc, #16]	; (8000154 <acc_service_configuration_valid+0x34>)
 8000144:	4904      	ldr	r1, [pc, #16]	; (8000158 <acc_service_configuration_valid+0x38>)
 8000146:	4798      	blx	r3
 8000148:	2000      	movs	r0, #0
 800014a:	bd10      	pop	{r4, pc}
 800014c:	acc09dd7 	.word	0xacc09dd7
 8000150:	200002b0 	.word	0x200002b0
 8000154:	0801bee4 	.word	0x0801bee4
 8000158:	0801d3e8 	.word	0x0801d3e8

0800015c <acc_service_configuration_check>:
 800015c:	b510      	push	{r4, lr}
 800015e:	0004      	movs	r4, r0
 8000160:	f7ff ffde 	bl	8000120 <acc_service_configuration_valid>
 8000164:	2800      	cmp	r0, #0
 8000166:	d00a      	beq.n	800017e <acc_service_configuration_check+0x22>
 8000168:	7963      	ldrb	r3, [r4, #5]
 800016a:	3b01      	subs	r3, #1
 800016c:	2b04      	cmp	r3, #4
 800016e:	d906      	bls.n	800017e <acc_service_configuration_check+0x22>
 8000170:	4b03      	ldr	r3, [pc, #12]	; (8000180 <acc_service_configuration_check+0x24>)
 8000172:	2000      	movs	r0, #0
 8000174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000176:	4a03      	ldr	r2, [pc, #12]	; (8000184 <acc_service_configuration_check+0x28>)
 8000178:	4903      	ldr	r1, [pc, #12]	; (8000188 <acc_service_configuration_check+0x2c>)
 800017a:	4798      	blx	r3
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}
 8000180:	200002b0 	.word	0x200002b0
 8000184:	0801befa 	.word	0x0801befa
 8000188:	0801d3e8 	.word	0x0801d3e8

0800018c <acc_service_pipeline_destroy>:
 800018c:	b510      	push	{r4, lr}
 800018e:	0004      	movs	r4, r0
 8000190:	6900      	ldr	r0, [r0, #16]
 8000192:	2800      	cmp	r0, #0
 8000194:	d003      	beq.n	800019e <acc_service_pipeline_destroy+0x12>
 8000196:	68c3      	ldr	r3, [r0, #12]
 8000198:	4798      	blx	r3
 800019a:	2300      	movs	r3, #0
 800019c:	6123      	str	r3, [r4, #16]
 800019e:	bd10      	pop	{r4, pc}

080001a0 <acc_service_get_base_configuration>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	1e04      	subs	r4, r0, #0
 80001a4:	d001      	beq.n	80001aa <acc_service_get_base_configuration+0xa>
 80001a6:	6900      	ldr	r0, [r0, #16]
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <acc_service_get_base_configuration+0x24>)
 80001ac:	001a      	movs	r2, r3
 80001ae:	3230      	adds	r2, #48	; 0x30
 80001b0:	7812      	ldrb	r2, [r2, #0]
 80001b2:	1e10      	subs	r0, r2, #0
 80001b4:	d0f8      	beq.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001b6:	2001      	movs	r0, #1
 80001b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <acc_service_get_base_configuration+0x28>)
 80001bc:	4903      	ldr	r1, [pc, #12]	; (80001cc <acc_service_get_base_configuration+0x2c>)
 80001be:	4798      	blx	r3
 80001c0:	0020      	movs	r0, r4
 80001c2:	e7f1      	b.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001c4:	200002b0 	.word	0x200002b0
 80001c8:	0801bee4 	.word	0x0801bee4
 80001cc:	0801d3e8 	.word	0x0801d3e8

080001d0 <get_sparse_configuration>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	1e04      	subs	r4, r0, #0
 80001d4:	d004      	beq.n	80001e0 <get_sparse_configuration+0x10>
 80001d6:	7903      	ldrb	r3, [r0, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10d      	bne.n	80001f8 <get_sparse_configuration+0x28>
 80001dc:	0020      	movs	r0, r4
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <get_sparse_configuration+0x2c>)
 80001e2:	001a      	movs	r2, r3
 80001e4:	3230      	adds	r2, #48	; 0x30
 80001e6:	7812      	ldrb	r2, [r2, #0]
 80001e8:	2a00      	cmp	r2, #0
 80001ea:	d0f7      	beq.n	80001dc <get_sparse_configuration+0xc>
 80001ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ee:	4a04      	ldr	r2, [pc, #16]	; (8000200 <get_sparse_configuration+0x30>)
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <get_sparse_configuration+0x34>)
 80001f2:	2001      	movs	r0, #1
 80001f4:	4798      	blx	r3
 80001f6:	e7f1      	b.n	80001dc <get_sparse_configuration+0xc>
 80001f8:	2400      	movs	r4, #0
 80001fa:	e7ef      	b.n	80001dc <get_sparse_configuration+0xc>
 80001fc:	200002b0 	.word	0x200002b0
 8000200:	0801bee4 	.word	0x0801bee4
 8000204:	0801bf12 	.word	0x0801bf12

08000208 <acc_service_sparse_get_metadata>:
 8000208:	b510      	push	{r4, lr}
 800020a:	000c      	movs	r4, r1
 800020c:	2800      	cmp	r0, #0
 800020e:	d015      	beq.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000210:	7a03      	ldrb	r3, [r0, #8]
 8000212:	2b03      	cmp	r3, #3
 8000214:	d112      	bne.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000216:	6903      	ldr	r3, [r0, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	699a      	ldr	r2, [r3, #24]
 800021c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800021e:	600a      	str	r2, [r1, #0]
 8000220:	69da      	ldr	r2, [r3, #28]
 8000222:	604a      	str	r2, [r1, #4]
 8000224:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000226:	810a      	strh	r2, [r1, #8]
 8000228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800022a:	60ca      	str	r2, [r1, #12]
 800022c:	4904      	ldr	r1, [pc, #16]	; (8000240 <acc_service_sparse_get_metadata+0x38>)
 800022e:	f00e fbad 	bl	800e98c <__aeabi_fmul>
 8000232:	21fc      	movs	r1, #252	; 0xfc
 8000234:	0589      	lsls	r1, r1, #22
 8000236:	f00e fba9 	bl	800e98c <__aeabi_fmul>
 800023a:	6120      	str	r0, [r4, #16]
 800023c:	bd10      	pop	{r4, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	4d8ef3c2 	.word	0x4d8ef3c2

08000244 <get_and_validate_envelope_configuration>:
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
 8000248:	f7ff ff6a 	bl	8000120 <acc_service_configuration_valid>
 800024c:	2800      	cmp	r0, #0
 800024e:	d002      	beq.n	8000256 <get_and_validate_envelope_configuration+0x12>
 8000250:	7923      	ldrb	r3, [r4, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00b      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <get_and_validate_envelope_configuration+0x30>)
 8000258:	001a      	movs	r2, r3
 800025a:	3230      	adds	r2, #48	; 0x30
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	1e14      	subs	r4, r2, #0
 8000260:	d005      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <get_and_validate_envelope_configuration+0x34>)
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <get_and_validate_envelope_configuration+0x38>)
 8000268:	2001      	movs	r0, #1
 800026a:	4798      	blx	r3
 800026c:	2400      	movs	r4, #0
 800026e:	0020      	movs	r0, r4
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	200002b0 	.word	0x200002b0
 8000278:	0801bee4 	.word	0x0801bee4
 800027c:	0801bf21 	.word	0x0801bf21

08000280 <sq_acc_accumulant>:
		accumulant[j][i] += d;
	}
	}
}

void sq_acc_accumulant(void){
 8000280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000282:	46de      	mov	lr, fp
 8000284:	4657      	mov	r7, sl
 8000286:	464e      	mov	r6, r9
 8000288:	4645      	mov	r5, r8
	for(uint16_t i = 0; i<bins; i++){
 800028a:	4b1c      	ldr	r3, [pc, #112]	; (80002fc <sq_acc_accumulant+0x7c>)
void sq_acc_accumulant(void){
 800028c:	b5e0      	push	{r5, r6, r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 800028e:	881a      	ldrh	r2, [r3, #0]
 8000290:	2a00      	cmp	r2, #0
 8000292:	d02d      	beq.n	80002f0 <sq_acc_accumulant+0x70>
	for(uint16_t j = 0; j<sweeps/2; j++){
		float d = data[j][i];
 8000294:	491a      	ldr	r1, [pc, #104]	; (8000300 <sq_acc_accumulant+0x80>)
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000296:	4b1b      	ldr	r3, [pc, #108]	; (8000304 <sq_acc_accumulant+0x84>)
		float d = data[j][i];
 8000298:	6809      	ldr	r1, [r1, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800029a:	881b      	ldrh	r3, [r3, #0]
		float d = data[j][i];
 800029c:	4689      	mov	r9, r1
		accumulant[j][i] += d*d;
 800029e:	491a      	ldr	r1, [pc, #104]	; (8000308 <sq_acc_accumulant+0x88>)
	for(uint16_t j = 0; j<sweeps/2; j++){
 80002a0:	085b      	lsrs	r3, r3, #1
		accumulant[j][i] += d*d;
 80002a2:	6809      	ldr	r1, [r1, #0]
 80002a4:	468a      	mov	sl, r1
 80002a6:	d023      	beq.n	80002f0 <sq_acc_accumulant+0x70>
 80002a8:	3a01      	subs	r2, #1
 80002aa:	b292      	uxth	r2, r2
 80002ac:	3201      	adds	r2, #1
 80002ae:	0052      	lsls	r2, r2, #1
 80002b0:	4693      	mov	fp, r2
 80002b2:	2600      	movs	r6, #0
 80002b4:	3b01      	subs	r3, #1
 80002b6:	b29f      	uxth	r7, r3
 80002b8:	3701      	adds	r7, #1
 80002ba:	00bf      	lsls	r7, r7, #2
 80002bc:	0073      	lsls	r3, r6, #1
 80002be:	4698      	mov	r8, r3
 80002c0:	2400      	movs	r4, #0
		float d = data[j][i];
 80002c2:	464b      	mov	r3, r9
 80002c4:	591b      	ldr	r3, [r3, r4]
 80002c6:	5b98      	ldrh	r0, [r3, r6]
 80002c8:	f00f fade 	bl	800f888 <__aeabi_ui2f>
		accumulant[j][i] += d*d;
 80002cc:	4653      	mov	r3, sl
 80002ce:	591b      	ldr	r3, [r3, r4]
 80002d0:	1c01      	adds	r1, r0, #0
 80002d2:	4443      	add	r3, r8
 80002d4:	001d      	movs	r5, r3
 80002d6:	f00e fb59 	bl	800e98c <__aeabi_fmul>
 80002da:	1c01      	adds	r1, r0, #0
 80002dc:	6828      	ldr	r0, [r5, #0]
 80002de:	f00e f8a9 	bl	800e434 <__aeabi_fadd>
 80002e2:	3404      	adds	r4, #4
 80002e4:	6028      	str	r0, [r5, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 80002e6:	42a7      	cmp	r7, r4
 80002e8:	d1eb      	bne.n	80002c2 <sq_acc_accumulant+0x42>
 80002ea:	3602      	adds	r6, #2
	for(uint16_t i = 0; i<bins; i++){
 80002ec:	45b3      	cmp	fp, r6
 80002ee:	d1e5      	bne.n	80002bc <sq_acc_accumulant+0x3c>
	}
	}
}
 80002f0:	bc3c      	pop	{r2, r3, r4, r5}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	46ab      	mov	fp, r5
 80002fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002fc:	200003a8 	.word	0x200003a8
 8000300:	200003ac 	.word	0x200003ac
 8000304:	200003b0 	.word	0x200003b0
 8000308:	200003b4 	.word	0x200003b4

0800030c <acc_accumulant>:
void acc_accumulant(void){
 800030c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030e:	46de      	mov	lr, fp
 8000310:	4657      	mov	r7, sl
 8000312:	464e      	mov	r6, r9
 8000314:	4645      	mov	r5, r8
	for(uint16_t i = 0; i<bins; i++){
 8000316:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <acc_accumulant+0x78>)
void acc_accumulant(void){
 8000318:	b5e0      	push	{r5, r6, r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 800031a:	881a      	ldrh	r2, [r3, #0]
 800031c:	2a00      	cmp	r2, #0
 800031e:	d02a      	beq.n	8000376 <acc_accumulant+0x6a>
		float d = data[j][i];
 8000320:	4919      	ldr	r1, [pc, #100]	; (8000388 <acc_accumulant+0x7c>)
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000322:	4b1a      	ldr	r3, [pc, #104]	; (800038c <acc_accumulant+0x80>)
		float d = data[j][i];
 8000324:	6809      	ldr	r1, [r1, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000326:	881b      	ldrh	r3, [r3, #0]
		float d = data[j][i];
 8000328:	4689      	mov	r9, r1
		accumulant[j][i] += d;
 800032a:	4919      	ldr	r1, [pc, #100]	; (8000390 <acc_accumulant+0x84>)
	for(uint16_t j = 0; j<sweeps/2; j++){
 800032c:	085b      	lsrs	r3, r3, #1
		accumulant[j][i] += d;
 800032e:	6809      	ldr	r1, [r1, #0]
 8000330:	468a      	mov	sl, r1
 8000332:	d020      	beq.n	8000376 <acc_accumulant+0x6a>
 8000334:	3a01      	subs	r2, #1
 8000336:	b292      	uxth	r2, r2
 8000338:	3201      	adds	r2, #1
 800033a:	0052      	lsls	r2, r2, #1
 800033c:	4693      	mov	fp, r2
 800033e:	2600      	movs	r6, #0
 8000340:	3b01      	subs	r3, #1
 8000342:	b29f      	uxth	r7, r3
 8000344:	3701      	adds	r7, #1
 8000346:	00bf      	lsls	r7, r7, #2
 8000348:	0073      	lsls	r3, r6, #1
 800034a:	4698      	mov	r8, r3
 800034c:	2400      	movs	r4, #0
 800034e:	4653      	mov	r3, sl
 8000350:	591b      	ldr	r3, [r3, r4]
 8000352:	4443      	add	r3, r8
 8000354:	001d      	movs	r5, r3
		float d = data[j][i];
 8000356:	464b      	mov	r3, r9
 8000358:	591b      	ldr	r3, [r3, r4]
 800035a:	3404      	adds	r4, #4
 800035c:	5b98      	ldrh	r0, [r3, r6]
 800035e:	f00f fa93 	bl	800f888 <__aeabi_ui2f>
 8000362:	1c01      	adds	r1, r0, #0
		accumulant[j][i] += d;
 8000364:	6828      	ldr	r0, [r5, #0]
 8000366:	f00e f865 	bl	800e434 <__aeabi_fadd>
 800036a:	6028      	str	r0, [r5, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800036c:	42a7      	cmp	r7, r4
 800036e:	d1ee      	bne.n	800034e <acc_accumulant+0x42>
 8000370:	3602      	adds	r6, #2
	for(uint16_t i = 0; i<bins; i++){
 8000372:	45b3      	cmp	fp, r6
 8000374:	d1e8      	bne.n	8000348 <acc_accumulant+0x3c>
}
 8000376:	bc3c      	pop	{r2, r3, r4, r5}
 8000378:	4690      	mov	r8, r2
 800037a:	4699      	mov	r9, r3
 800037c:	46a2      	mov	sl, r4
 800037e:	46ab      	mov	fp, r5
 8000380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	200003a8 	.word	0x200003a8
 8000388:	200003ac 	.word	0x200003ac
 800038c:	200003b0 	.word	0x200003b0
 8000390:	200003b4 	.word	0x200003b4

08000394 <load_accumulant>:
void load_accumulant(void){
 8000394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000396:	46de      	mov	lr, fp
 8000398:	4657      	mov	r7, sl
 800039a:	464e      	mov	r6, r9
 800039c:	4645      	mov	r5, r8
 800039e:	b5e0      	push	{r5, r6, r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <load_accumulant+0x80>)
void load_accumulant(void){
 80003a2:	b083      	sub	sp, #12
	for(uint16_t i = 0; i<bins; i++){
 80003a4:	881a      	ldrh	r2, [r3, #0]
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d02c      	beq.n	8000404 <load_accumulant+0x70>
 80003aa:	2100      	movs	r1, #0
		data[j][i] = accumulant[j][i];
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <load_accumulant+0x84>)
	for(uint16_t i = 0; i<bins; i++){
 80003ae:	9101      	str	r1, [sp, #4]
		data[j][i] = accumulant[j][i];
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	469b      	mov	fp, r3
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <load_accumulant+0x88>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	469a      	mov	sl, r3
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <load_accumulant+0x8c>)
 80003bc:	4699      	mov	r9, r3
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	085b      	lsrs	r3, r3, #1
	for(uint16_t j = 0; j<sweeps/2; j++){
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d018      	beq.n	80003f8 <load_accumulant+0x64>
		data[j][i] = accumulant[j][i];
 80003c6:	9b01      	ldr	r3, [sp, #4]
 80003c8:	2500      	movs	r5, #0
 80003ca:	009a      	lsls	r2, r3, #2
 80003cc:	4690      	mov	r8, r2
	for(uint16_t j = 0; j<sweeps/2; j++){
 80003ce:	2400      	movs	r4, #0
		data[j][i] = accumulant[j][i];
 80003d0:	005f      	lsls	r7, r3, #1
 80003d2:	4653      	mov	r3, sl
 80003d4:	595e      	ldr	r6, [r3, r5]
 80003d6:	465b      	mov	r3, fp
 80003d8:	4642      	mov	r2, r8
 80003da:	595b      	ldr	r3, [r3, r5]
	for(uint16_t j = 0; j<sweeps/2; j++){
 80003dc:	3401      	adds	r4, #1
		data[j][i] = accumulant[j][i];
 80003de:	5898      	ldr	r0, [r3, r2]
 80003e0:	f00f f814 	bl	800f40c <__aeabi_f2uiz>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80003e4:	464b      	mov	r3, r9
		data[j][i] = accumulant[j][i];
 80003e6:	53f0      	strh	r0, [r6, r7]
	for(uint16_t j = 0; j<sweeps/2; j++){
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	3504      	adds	r5, #4
 80003ee:	085b      	lsrs	r3, r3, #1
 80003f0:	42a3      	cmp	r3, r4
 80003f2:	d8ee      	bhi.n	80003d2 <load_accumulant+0x3e>
 80003f4:	4a07      	ldr	r2, [pc, #28]	; (8000414 <load_accumulant+0x80>)
 80003f6:	8812      	ldrh	r2, [r2, #0]
	for(uint16_t i = 0; i<bins; i++){
 80003f8:	9901      	ldr	r1, [sp, #4]
 80003fa:	3101      	adds	r1, #1
 80003fc:	b289      	uxth	r1, r1
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	4291      	cmp	r1, r2
 8000402:	d3de      	bcc.n	80003c2 <load_accumulant+0x2e>
}
 8000404:	b003      	add	sp, #12
 8000406:	bc3c      	pop	{r2, r3, r4, r5}
 8000408:	4690      	mov	r8, r2
 800040a:	4699      	mov	r9, r3
 800040c:	46a2      	mov	sl, r4
 800040e:	46ab      	mov	fp, r5
 8000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	200003a8 	.word	0x200003a8
 8000418:	200003b4 	.word	0x200003b4
 800041c:	200003ac 	.word	0x200003ac
 8000420:	200003b0 	.word	0x200003b0

08000424 <RegInt_getreg>:
//0x03 05    :: perform measurment
//0x03 06 	 :: evaluate data
//0x03 07    :: accumulant dsp
//0xFA E9    :: dump 256 bytes of data from buffer with given offset
uint32_t* RegInt_regmap(uint8_t reg){
	REGADRERR = -1;
 8000424:	2201      	movs	r2, #1
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <RegInt_getreg+0x58>)
 8000428:	4252      	negs	r2, r2
 800042a:	601a      	str	r2, [r3, #0]
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 800042c:	2812      	cmp	r0, #18
 800042e:	d820      	bhi.n	8000472 <RegInt_getreg+0x4e>
		ptr = &GENERAL_REGISTERS[reg];
 8000430:	4a13      	ldr	r2, [pc, #76]	; (8000480 <RegInt_getreg+0x5c>)
 8000432:	0083      	lsls	r3, r0, #2
 8000434:	189b      	adds	r3, r3, r2
	}
	if (reg == 0xE9){
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8000436:	0002      	movs	r2, r0
 8000438:	3a20      	subs	r2, #32
 800043a:	b2d1      	uxtb	r1, r2
 800043c:	2922      	cmp	r1, #34	; 0x22
 800043e:	d802      	bhi.n	8000446 <RegInt_getreg+0x22>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <RegInt_getreg+0x60>)
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	18d3      	adds	r3, r2, r3
	}
	if (0x81 <= reg && reg <= 0x85){
 8000446:	0002      	movs	r2, r0
 8000448:	327f      	adds	r2, #127	; 0x7f
 800044a:	b2d2      	uxtb	r2, r2
 800044c:	2a04      	cmp	r2, #4
 800044e:	d804      	bhi.n	800045a <RegInt_getreg+0x36>
		ptr = &META_REGISTERS[reg - 0x81];
 8000450:	0003      	movs	r3, r0
 8000452:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <RegInt_getreg+0x64>)
 8000454:	3b81      	subs	r3, #129	; 0x81
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	189b      	adds	r3, r3, r2
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 800045a:	0002      	movs	r2, r0
 800045c:	3230      	adds	r2, #48	; 0x30
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	2a09      	cmp	r2, #9
 8000462:	d804      	bhi.n	800046e <RegInt_getreg+0x4a>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8000464:	0003      	movs	r3, r0
 8000466:	4809      	ldr	r0, [pc, #36]	; (800048c <RegInt_getreg+0x68>)
 8000468:	3bd0      	subs	r3, #208	; 0xd0
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	181b      	adds	r3, r3, r0
	return ptr;
}

uint32_t RegInt_getreg(uint8_t reg){
	uint32_t* regptr = RegInt_regmap(reg);
	return *regptr;
 800046e:	6818      	ldr	r0, [r3, #0]
}
 8000470:	4770      	bx	lr
	if (reg == 0xE9){
 8000472:	28e9      	cmp	r0, #233	; 0xe9
 8000474:	d1df      	bne.n	8000436 <RegInt_getreg+0x12>
		ptr = &OUTPUT_BUFFER_LENGTH;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <RegInt_getreg+0x6c>)
 8000478:	e7ef      	b.n	800045a <RegInt_getreg+0x36>
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	200003b8 	.word	0x200003b8
 8000480:	200003bc 	.word	0x200003bc
 8000484:	2000051c 	.word	0x2000051c
 8000488:	20000508 	.word	0x20000508
 800048c:	200004c8 	.word	0x200004c8
 8000490:	200005a8 	.word	0x200005a8

08000494 <Reg_store_sparse_metadata>:
		sleepMCU(val);
	}
}


void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8000494:	b084      	sub	sp, #16
 8000496:	b510      	push	{r4, lr}
 8000498:	9204      	str	r2, [sp, #16]
	REGADRERR = -1;
 800049a:	2201      	movs	r2, #1
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 800049c:	9305      	str	r3, [sp, #20]
	if (!(*regptr == (uint32_t)-1)){
 800049e:	4c1e      	ldr	r4, [pc, #120]	; (8000518 <Reg_store_sparse_metadata+0x84>)
	REGADRERR = -1;
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <Reg_store_sparse_metadata+0x88>)
 80004a2:	4252      	negs	r2, r2
 80004a4:	601a      	str	r2, [r3, #0]
	if (!(*regptr == (uint32_t)-1)){
 80004a6:	6823      	ldr	r3, [r4, #0]
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	9103      	str	r1, [sp, #12]

	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 80004ac:	9802      	ldr	r0, [sp, #8]
	if (!(*regptr == (uint32_t)-1)){
 80004ae:	3301      	adds	r3, #1
 80004b0:	d005      	beq.n	80004be <Reg_store_sparse_metadata+0x2a>
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 80004b2:	491b      	ldr	r1, [pc, #108]	; (8000520 <Reg_store_sparse_metadata+0x8c>)
 80004b4:	f00e fa6a 	bl	800e98c <__aeabi_fmul>
 80004b8:	f00e ffa8 	bl	800f40c <__aeabi_f2uiz>
 80004bc:	6020      	str	r0, [r4, #0]
	if (!(*regptr == (uint32_t)-1)){
 80004be:	6863      	ldr	r3, [r4, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	d006      	beq.n	80004d2 <Reg_store_sparse_metadata+0x3e>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 80004c4:	4916      	ldr	r1, [pc, #88]	; (8000520 <Reg_store_sparse_metadata+0x8c>)
 80004c6:	9803      	ldr	r0, [sp, #12]
 80004c8:	f00e fa60 	bl	800e98c <__aeabi_fmul>
 80004cc:	f00e ff9e 	bl	800f40c <__aeabi_f2uiz>
 80004d0:	6060      	str	r0, [r4, #4]
	uint32_t bufflen = metadata.data_length;
	if(metadata_far_ptr != NULL){
 80004d2:	9a07      	ldr	r2, [sp, #28]
	uint32_t bufflen = metadata.data_length;
 80004d4:	ab02      	add	r3, sp, #8
 80004d6:	891b      	ldrh	r3, [r3, #8]
	if(metadata_far_ptr != NULL){
 80004d8:	2a00      	cmp	r2, #0
 80004da:	d001      	beq.n	80004e0 <Reg_store_sparse_metadata+0x4c>
		bufflen += (*metadata_far_ptr).data_length;
 80004dc:	8912      	ldrh	r2, [r2, #8]
 80004de:	189b      	adds	r3, r3, r2
	if (!(*regptr == (uint32_t)-1)){
 80004e0:	68a2      	ldr	r2, [r4, #8]
 80004e2:	3201      	adds	r2, #1
 80004e4:	d000      	beq.n	80004e8 <Reg_store_sparse_metadata+0x54>
		*regptr = val;
 80004e6:	60a3      	str	r3, [r4, #8]
	if (!(*regptr == (uint32_t)-1)){
 80004e8:	68e3      	ldr	r3, [r4, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	d006      	beq.n	80004fc <Reg_store_sparse_metadata+0x68>
	}
	RegInt_setregf(0x83, bufflen ,1);
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 80004ee:	490c      	ldr	r1, [pc, #48]	; (8000520 <Reg_store_sparse_metadata+0x8c>)
 80004f0:	9805      	ldr	r0, [sp, #20]
 80004f2:	f00e fa4b 	bl	800e98c <__aeabi_fmul>
 80004f6:	f00e ff89 	bl	800f40c <__aeabi_f2uiz>
 80004fa:	60e0      	str	r0, [r4, #12]
	if (!(*regptr == (uint32_t)-1)){
 80004fc:	6923      	ldr	r3, [r4, #16]
 80004fe:	3301      	adds	r3, #1
 8000500:	d006      	beq.n	8000510 <Reg_store_sparse_metadata+0x7c>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8000502:	4908      	ldr	r1, [pc, #32]	; (8000524 <Reg_store_sparse_metadata+0x90>)
 8000504:	9806      	ldr	r0, [sp, #24]
 8000506:	f00e fa41 	bl	800e98c <__aeabi_fmul>
 800050a:	f00e ff7f 	bl	800f40c <__aeabi_f2uiz>
 800050e:	6120      	str	r0, [r4, #16]
}
 8000510:	bc10      	pop	{r4}
 8000512:	bc08      	pop	{r3}
 8000514:	b004      	add	sp, #16
 8000516:	4718      	bx	r3
 8000518:	20000508 	.word	0x20000508
 800051c:	200003b8 	.word	0x200003b8
 8000520:	447a0000 	.word	0x447a0000
 8000524:	49742400 	.word	0x49742400

08000528 <acc_integration_get_time>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000528:	4b01      	ldr	r3, [pc, #4]	; (8000530 <acc_integration_get_time+0x8>)
 800052a:	6818      	ldr	r0, [r3, #0]


uint32_t acc_integration_get_time(void)
{
	return HAL_GetTick();
}
 800052c:	4770      	bx	lr
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	200002ac 	.word	0x200002ac

08000534 <pulse_hibernate_pin>:
}


static void pulse_hibernate_pin(uint32_t nbr_pulses)
{
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8000534:	2100      	movs	r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000536:	2210      	movs	r2, #16
{
 8000538:	b510      	push	{r4, lr}
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <pulse_hibernate_pin+0x24>)
 800053c:	691c      	ldr	r4, [r3, #16]
 800053e:	4214      	tst	r4, r2
 8000540:	d102      	bne.n	8000548 <pulse_hibernate_pin+0x14>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000542:	619a      	str	r2, [r3, #24]
 8000544:	e7fa      	b.n	800053c <pulse_hibernate_pin+0x8>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000546:	629a      	str	r2, [r3, #40]	; 0x28
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000548:	691c      	ldr	r4, [r3, #16]
 800054a:	4214      	tst	r4, r2
 800054c:	d1fb      	bne.n	8000546 <pulse_hibernate_pin+0x12>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 800054e:	3101      	adds	r1, #1
 8000550:	4288      	cmp	r0, r1
 8000552:	d1f3      	bne.n	800053c <pulse_hibernate_pin+0x8>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
		{
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	50000400 	.word	0x50000400

0800055c <acc_hal_integration_sensor_hibernate_enter>:


static void acc_hal_integration_sensor_hibernate_enter(acc_sensor_id_t sensor_id)
{
 800055c:	b510      	push	{r4, lr}
	(void)sensor_id;  // Ignore parameter sensor_id

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 800055e:	200a      	movs	r0, #10
 8000560:	f7ff ffe8 	bl	8000534 <pulse_hibernate_pin>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	4b02      	ldr	r3, [pc, #8]	; (8000570 <acc_hal_integration_sensor_hibernate_enter+0x14>)
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	629a      	str	r2, [r3, #40]	; 0x28

	// Turn off sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
}
 800056c:	bd10      	pop	{r4, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	50000400 	.word	0x50000400

08000574 <acc_hal_integration_get_reference_frequency>:
}
 8000574:	4800      	ldr	r0, [pc, #0]	; (8000578 <acc_hal_integration_get_reference_frequency+0x4>)
 8000576:	4770      	bx	lr
 8000578:	4bb71b00 	.word	0x4bb71b00

0800057c <acc_hal_integration_wait_for_sensor_interrupt>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <acc_hal_integration_wait_for_sensor_interrupt+0x34>)
{
 800057e:	b570      	push	{r4, r5, r6, lr}
 8000580:	2408      	movs	r4, #8
 8000582:	0015      	movs	r5, r2
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <acc_hal_integration_wait_for_sensor_interrupt+0x38>)
 8000586:	6806      	ldr	r6, [r0, #0]
 8000588:	6913      	ldr	r3, [r2, #16]
 800058a:	4223      	tst	r3, r4
 800058c:	d103      	bne.n	8000596 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 800058e:	6803      	ldr	r3, [r0, #0]
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000590:	1b9b      	subs	r3, r3, r6
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000592:	428b      	cmp	r3, r1
 8000594:	d303      	bcc.n	800059e <acc_hal_integration_wait_for_sensor_interrupt+0x22>
 8000596:	6928      	ldr	r0, [r5, #16]
 8000598:	0700      	lsls	r0, r0, #28
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 800059a:	0fc0      	lsrs	r0, r0, #31
}
 800059c:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059e:	b672      	cpsid	i
 80005a0:	6913      	ldr	r3, [r2, #16]
 80005a2:	4223      	tst	r3, r4
 80005a4:	d100      	bne.n	80005a8 <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
			__WFI();
 80005a6:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 80005a8:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	e7eb      	b.n	8000588 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
 80005b0:	50000400 	.word	0x50000400
 80005b4:	200002ac 	.word	0x200002ac

080005b8 <data_free>:
	}
	
	return 0;
}

void data_free(void){
 80005b8:	b570      	push	{r4, r5, r6, lr}
	free(accumulant);
	accumulant = NULL;
 80005ba:	2400      	movs	r4, #0
	free(accumulant);
 80005bc:	4d07      	ldr	r5, [pc, #28]	; (80005dc <data_free+0x24>)
 80005be:	6828      	ldr	r0, [r5, #0]
 80005c0:	f015 fa72 	bl	8015aa8 <free>
	accumulant = NULL;
 80005c4:	602c      	str	r4, [r5, #0]
	free(data);
 80005c6:	4d06      	ldr	r5, [pc, #24]	; (80005e0 <data_free+0x28>)
 80005c8:	6828      	ldr	r0, [r5, #0]
 80005ca:	f015 fa6d 	bl	8015aa8 <free>
	data = NULL;
	sweeps = 0;
 80005ce:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <data_free+0x2c>)
	data = NULL;
 80005d0:	602c      	str	r4, [r5, #0]
	sweeps = 0;
 80005d2:	801c      	strh	r4, [r3, #0]
	bins = 0;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <data_free+0x30>)
 80005d6:	801c      	strh	r4, [r3, #0]
}
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	200003b4 	.word	0x200003b4
 80005e0:	200003ac 	.word	0x200003ac
 80005e4:	200003b0 	.word	0x200003b0
 80005e8:	200003a8 	.word	0x200003a8

080005ec <acc_base_configuration_downsampling_factor_set>:
 80005ec:	b570      	push	{r4, r5, r6, lr}
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f006 f981 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d001      	beq.n	80005fe <acc_base_configuration_downsampling_factor_set+0x12>
 80005fa:	3468      	adds	r4, #104	; 0x68
 80005fc:	8025      	strh	r5, [r4, #0]
 80005fe:	bd70      	pop	{r4, r5, r6, pc}

08000600 <acc_base_configuration_integrator_ramp_up_set>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0004      	movs	r4, r0
 8000604:	000d      	movs	r5, r1
 8000606:	f006 f977 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800060a:	2800      	cmp	r0, #0
 800060c:	d001      	beq.n	8000612 <acc_base_configuration_integrator_ramp_up_set+0x12>
 800060e:	3406      	adds	r4, #6
 8000610:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000612:	bd70      	pop	{r4, r5, r6, pc}

08000614 <acc_base_configuration_wg_duration_set>:
 8000614:	b570      	push	{r4, r5, r6, lr}
 8000616:	0004      	movs	r4, r0
 8000618:	000d      	movs	r5, r1
 800061a:	f006 f96d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800061e:	2800      	cmp	r0, #0
 8000620:	d001      	beq.n	8000626 <acc_base_configuration_wg_duration_set+0x12>
 8000622:	3404      	adds	r4, #4
 8000624:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000626:	bd70      	pop	{r4, r5, r6, pc}

08000628 <acc_base_configuration_integrator_set>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	0004      	movs	r4, r0
 800062c:	000d      	movs	r5, r1
 800062e:	f006 f963 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000632:	2800      	cmp	r0, #0
 8000634:	d001      	beq.n	800063a <acc_base_configuration_integrator_set+0x12>
 8000636:	3402      	adds	r4, #2
 8000638:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800063a:	bd70      	pop	{r4, r5, r6, pc}

0800063c <set_configuration_for_profile.lto_priv.631>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	000d      	movs	r5, r1
 8000640:	f7ff fdc6 	bl	80001d0 <get_sparse_configuration>
 8000644:	2800      	cmp	r0, #0
 8000646:	d011      	beq.n	800066c <set_configuration_for_profile.lto_priv.631+0x30>
 8000648:	301c      	adds	r0, #28
 800064a:	0004      	movs	r4, r0
 800064c:	1e68      	subs	r0, r5, #1
 800064e:	2804      	cmp	r0, #4
 8000650:	d80c      	bhi.n	800066c <set_configuration_for_profile.lto_priv.631+0x30>
 8000652:	f00e fcb9 	bl	800efc8 <__gnu_thumb1_case_uqi>
 8000656:	0c03      	.short	0x0c03
 8000658:	170e      	.short	0x170e
 800065a:	20          	.byte	0x20
 800065b:	00          	.byte	0x00
 800065c:	2100      	movs	r1, #0
 800065e:	0020      	movs	r0, r4
 8000660:	f7ff ffd8 	bl	8000614 <acc_base_configuration_wg_duration_set>
 8000664:	2100      	movs	r1, #0
 8000666:	0020      	movs	r0, r4
 8000668:	f7ff ffde 	bl	8000628 <acc_base_configuration_integrator_set>
 800066c:	bd70      	pop	{r4, r5, r6, pc}
 800066e:	2107      	movs	r1, #7
 8000670:	e7f5      	b.n	800065e <set_configuration_for_profile.lto_priv.631+0x22>
 8000672:	0020      	movs	r0, r4
 8000674:	2109      	movs	r1, #9
 8000676:	f7ff ffcd 	bl	8000614 <acc_base_configuration_wg_duration_set>
 800067a:	2103      	movs	r1, #3
 800067c:	0020      	movs	r0, r4
 800067e:	f7ff ffd3 	bl	8000628 <acc_base_configuration_integrator_set>
 8000682:	e7f3      	b.n	800066c <set_configuration_for_profile.lto_priv.631+0x30>
 8000684:	210c      	movs	r1, #12
 8000686:	0020      	movs	r0, r4
 8000688:	f7ff ffc4 	bl	8000614 <acc_base_configuration_wg_duration_set>
 800068c:	2106      	movs	r1, #6
 800068e:	0020      	movs	r0, r4
 8000690:	f7ff ffca 	bl	8000628 <acc_base_configuration_integrator_set>
 8000694:	e7ea      	b.n	800066c <set_configuration_for_profile.lto_priv.631+0x30>
 8000696:	2110      	movs	r1, #16
 8000698:	e7f5      	b.n	8000686 <set_configuration_for_profile.lto_priv.631+0x4a>

0800069a <set_configuration_for_profile.lto_priv.630>:
 800069a:	b570      	push	{r4, r5, r6, lr}
 800069c:	000e      	movs	r6, r1
 800069e:	f7ff fdd1 	bl	8000244 <get_and_validate_envelope_configuration>
 80006a2:	1e05      	subs	r5, r0, #0
 80006a4:	d018      	beq.n	80006d8 <set_configuration_for_profile.lto_priv.630+0x3e>
 80006a6:	0004      	movs	r4, r0
 80006a8:	1e70      	subs	r0, r6, #1
 80006aa:	341c      	adds	r4, #28
 80006ac:	2804      	cmp	r0, #4
 80006ae:	d813      	bhi.n	80006d8 <set_configuration_for_profile.lto_priv.630+0x3e>
 80006b0:	358c      	adds	r5, #140	; 0x8c
 80006b2:	f00e fc89 	bl	800efc8 <__gnu_thumb1_case_uqi>
 80006b6:	1203      	.short	0x1203
 80006b8:	2321      	.short	0x2321
 80006ba:	32          	.byte	0x32
 80006bb:	00          	.byte	0x00
 80006bc:	2100      	movs	r1, #0
 80006be:	0020      	movs	r0, r4
 80006c0:	f7ff ffa8 	bl	8000614 <acc_base_configuration_wg_duration_set>
 80006c4:	2100      	movs	r1, #0
 80006c6:	0020      	movs	r0, r4
 80006c8:	f7ff ffae 	bl	8000628 <acc_base_configuration_integrator_set>
 80006cc:	2103      	movs	r1, #3
 80006ce:	0020      	movs	r0, r4
 80006d0:	f7ff ff96 	bl	8000600 <acc_base_configuration_integrator_ramp_up_set>
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <set_configuration_for_profile.lto_priv.630+0x86>)
 80006d6:	602b      	str	r3, [r5, #0]
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	2107      	movs	r1, #7
 80006dc:	0020      	movs	r0, r4
 80006de:	f7ff ff99 	bl	8000614 <acc_base_configuration_wg_duration_set>
 80006e2:	2106      	movs	r1, #6
 80006e4:	0020      	movs	r0, r4
 80006e6:	f7ff ff9f 	bl	8000628 <acc_base_configuration_integrator_set>
 80006ea:	2109      	movs	r1, #9
 80006ec:	0020      	movs	r0, r4
 80006ee:	f7ff ff87 	bl	8000600 <acc_base_configuration_integrator_ramp_up_set>
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <set_configuration_for_profile.lto_priv.630+0x8a>)
 80006f4:	602b      	str	r3, [r5, #0]
 80006f6:	e7ef      	b.n	80006d8 <set_configuration_for_profile.lto_priv.630+0x3e>
 80006f8:	2109      	movs	r1, #9
 80006fa:	e7ef      	b.n	80006dc <set_configuration_for_profile.lto_priv.630+0x42>
 80006fc:	210c      	movs	r1, #12
 80006fe:	0020      	movs	r0, r4
 8000700:	f7ff ff88 	bl	8000614 <acc_base_configuration_wg_duration_set>
 8000704:	2106      	movs	r1, #6
 8000706:	0020      	movs	r0, r4
 8000708:	f7ff ff8e 	bl	8000628 <acc_base_configuration_integrator_set>
 800070c:	2101      	movs	r1, #1
 800070e:	0020      	movs	r0, r4
 8000710:	f7ff ff76 	bl	8000600 <acc_base_configuration_integrator_ramp_up_set>
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <set_configuration_for_profile.lto_priv.630+0x8a>)
 8000716:	602b      	str	r3, [r5, #0]
 8000718:	e7de      	b.n	80006d8 <set_configuration_for_profile.lto_priv.630+0x3e>
 800071a:	2110      	movs	r1, #16
 800071c:	e7ef      	b.n	80006fe <set_configuration_for_profile.lto_priv.630+0x64>
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	3c8461fa 	.word	0x3c8461fa
 8000724:	3b843809 	.word	0x3b843809

08000728 <acc_base_configuration_repetition_mode_on_demand_set>:
 8000728:	b510      	push	{r4, lr}
 800072a:	0004      	movs	r4, r0
 800072c:	f006 f8e4 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000730:	2800      	cmp	r0, #0
 8000732:	d001      	beq.n	8000738 <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 8000734:	2301      	movs	r3, #1
 8000736:	7123      	strb	r3, [r4, #4]
 8000738:	bd10      	pop	{r4, pc}

0800073a <set_maximize_signal_attenuation>:
 800073a:	b570      	push	{r4, r5, r6, lr}
 800073c:	0005      	movs	r5, r0
 800073e:	000e      	movs	r6, r1
 8000740:	f7ff fd2e 	bl	80001a0 <acc_service_get_base_configuration>
 8000744:	1e04      	subs	r4, r0, #0
 8000746:	d010      	beq.n	800076a <set_maximize_signal_attenuation+0x30>
 8000748:	f006 f8d6 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800074c:	2800      	cmp	r0, #0
 800074e:	d002      	beq.n	8000756 <set_maximize_signal_attenuation+0x1c>
 8000750:	0023      	movs	r3, r4
 8000752:	334a      	adds	r3, #74	; 0x4a
 8000754:	701e      	strb	r6, [r3, #0]
 8000756:	2e00      	cmp	r6, #0
 8000758:	d008      	beq.n	800076c <set_maximize_signal_attenuation+0x32>
 800075a:	210f      	movs	r1, #15
 800075c:	0020      	movs	r0, r4
 800075e:	f7ff ff63 	bl	8000628 <acc_base_configuration_integrator_set>
 8000762:	2101      	movs	r1, #1
 8000764:	0020      	movs	r0, r4
 8000766:	f7ff ff4b 	bl	8000600 <acc_base_configuration_integrator_ramp_up_set>
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	68ab      	ldr	r3, [r5, #8]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0fb      	beq.n	800076a <set_maximize_signal_attenuation+0x30>
 8000772:	7969      	ldrb	r1, [r5, #5]
 8000774:	0028      	movs	r0, r5
 8000776:	4798      	blx	r3
 8000778:	e7f7      	b.n	800076a <set_maximize_signal_attenuation+0x30>

0800077a <acc_service_maximize_signal_attenuation_set>:
 800077a:	b510      	push	{r4, lr}
 800077c:	2800      	cmp	r0, #0
 800077e:	d003      	beq.n	8000788 <acc_service_maximize_signal_attenuation_set+0xe>
 8000780:	7301      	strb	r1, [r0, #12]
 8000782:	f7ff ffda 	bl	800073a <set_maximize_signal_attenuation>
 8000786:	bd10      	pop	{r4, pc}
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <acc_service_maximize_signal_attenuation_set+0x1e>)
 800078a:	3330      	adds	r3, #48	; 0x30
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <acc_service_maximize_signal_attenuation_set+0xc>
 8000792:	f7ff fcb7 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 8000796:	e7f6      	b.n	8000786 <acc_service_maximize_signal_attenuation_set+0xc>
 8000798:	200002b0 	.word	0x200002b0

0800079c <acc_service_profile_set>:
 800079c:	b510      	push	{r4, lr}
 800079e:	1e04      	subs	r4, r0, #0
 80007a0:	d00c      	beq.n	80007bc <acc_service_profile_set+0x20>
 80007a2:	6883      	ldr	r3, [r0, #8]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d009      	beq.n	80007bc <acc_service_profile_set+0x20>
 80007a8:	7141      	strb	r1, [r0, #5]
 80007aa:	4798      	blx	r3
 80007ac:	7b23      	ldrb	r3, [r4, #12]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <acc_service_profile_set+0x1e>
 80007b2:	2101      	movs	r1, #1
 80007b4:	0020      	movs	r0, r4
 80007b6:	f7ff ffc0 	bl	800073a <set_maximize_signal_attenuation>
 80007ba:	bd10      	pop	{r4, pc}
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <acc_service_profile_set+0x30>)
 80007be:	3330      	adds	r3, #48	; 0x30
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <acc_service_profile_set+0x1e>
 80007c6:	f7ff fc9d 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 80007ca:	e7f6      	b.n	80007ba <acc_service_profile_set+0x1e>
 80007cc:	200002b0 	.word	0x200002b0

080007d0 <acc_service_receiver_gain_set>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	1c0d      	adds	r5, r1, #0
 80007d4:	f7ff fce4 	bl	80001a0 <acc_service_get_base_configuration>
 80007d8:	0004      	movs	r4, r0
 80007da:	f006 f88d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80007de:	2800      	cmp	r0, #0
 80007e0:	d00e      	beq.n	8000800 <acc_service_receiver_gain_set+0x30>
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <acc_service_receiver_gain_set+0x34>)
 80007e4:	1c28      	adds	r0, r5, #0
 80007e6:	f00e f8d1 	bl	800e98c <__aeabi_fmul>
 80007ea:	1c01      	adds	r1, r0, #0
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <acc_service_receiver_gain_set+0x34>)
 80007ee:	f00e f9ff 	bl	800ebf0 <__aeabi_fsub>
 80007f2:	21fc      	movs	r1, #252	; 0xfc
 80007f4:	0589      	lsls	r1, r1, #22
 80007f6:	f00d fe1d 	bl	800e434 <__aeabi_fadd>
 80007fa:	f00e ffdb 	bl	800f7b4 <__aeabi_f2iz>
 80007fe:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	41b00000 	.word	0x41b00000

08000808 <acc_service_send_data>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	9d04      	ldr	r5, [sp, #16]
 800080c:	001e      	movs	r6, r3
 800080e:	782b      	ldrb	r3, [r5, #0]
 8000810:	6944      	ldr	r4, [r0, #20]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d10a      	bne.n	800082c <acc_service_send_data+0x24>
 8000816:	7ea3      	ldrb	r3, [r4, #26]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d011      	beq.n	8000840 <acc_service_send_data+0x38>
 800081c:	68e3      	ldr	r3, [r4, #12]
 800081e:	6860      	ldr	r0, [r4, #4]
 8000820:	4293      	cmp	r3, r2
 8000822:	d900      	bls.n	8000826 <acc_service_send_data+0x1e>
 8000824:	0013      	movs	r3, r2
 8000826:	001a      	movs	r2, r3
 8000828:	f015 f948 	bl	8015abc <memcpy>
 800082c:	782b      	ldrb	r3, [r5, #0]
 800082e:	6920      	ldr	r0, [r4, #16]
 8000830:	7663      	strb	r3, [r4, #25]
 8000832:	2800      	cmp	r0, #0
 8000834:	d003      	beq.n	800083e <acc_service_send_data+0x36>
 8000836:	6962      	ldr	r2, [r4, #20]
 8000838:	0031      	movs	r1, r6
 800083a:	f015 f93f 	bl	8015abc <memcpy>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	68a3      	ldr	r3, [r4, #8]
 8000842:	6019      	str	r1, [r3, #0]
 8000844:	e7f2      	b.n	800082c <acc_service_send_data+0x24>

08000846 <sparse_send_data>:
 8000846:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000848:	0005      	movs	r5, r0
 800084a:	0010      	movs	r0, r2
 800084c:	798a      	ldrb	r2, [r1, #6]
 800084e:	790e      	ldrb	r6, [r1, #4]
 8000850:	794c      	ldrb	r4, [r1, #5]
 8000852:	ab03      	add	r3, sp, #12
 8000854:	709a      	strb	r2, [r3, #2]
 8000856:	aa02      	add	r2, sp, #8
 8000858:	705e      	strb	r6, [r3, #1]
 800085a:	7014      	strb	r4, [r2, #0]
 800085c:	701c      	strb	r4, [r3, #0]
 800085e:	9200      	str	r2, [sp, #0]
 8000860:	694a      	ldr	r2, [r1, #20]
 8000862:	0029      	movs	r1, r5
 8000864:	f7ff ffd0 	bl	8000808 <acc_service_send_data>
 8000868:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0800086a <envelope_send_data>:
 800086a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086c:	0005      	movs	r5, r0
 800086e:	b085      	sub	sp, #20
 8000870:	0010      	movs	r0, r2
 8000872:	79ca      	ldrb	r2, [r1, #7]
 8000874:	794c      	ldrb	r4, [r1, #5]
 8000876:	ab03      	add	r3, sp, #12
 8000878:	790e      	ldrb	r6, [r1, #4]
 800087a:	798f      	ldrb	r7, [r1, #6]
 800087c:	70da      	strb	r2, [r3, #3]
 800087e:	aa02      	add	r2, sp, #8
 8000880:	7014      	strb	r4, [r2, #0]
 8000882:	701f      	strb	r7, [r3, #0]
 8000884:	705c      	strb	r4, [r3, #1]
 8000886:	709e      	strb	r6, [r3, #2]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	694a      	ldr	r2, [r1, #20]
 800088c:	0029      	movs	r1, r5
 800088e:	f7ff ffbb 	bl	8000808 <acc_service_send_data>
 8000892:	b005      	add	sp, #20
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000896 <destroy_handle>:
 8000896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000898:	46c6      	mov	lr, r8
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <destroy_handle+0x5e>)
 800089c:	4e16      	ldr	r6, [pc, #88]	; (80008f8 <destroy_handle+0x62>)
 800089e:	4698      	mov	r8, r3
 80008a0:	68dc      	ldr	r4, [r3, #12]
 80008a2:	0033      	movs	r3, r6
 80008a4:	b500      	push	{lr}
 80008a6:	3330      	adds	r3, #48	; 0x30
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0005      	movs	r5, r0
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d905      	bls.n	80008bc <destroy_handle+0x26>
 80008b0:	6843      	ldr	r3, [r0, #4]
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <destroy_handle+0x66>)
 80008b4:	4912      	ldr	r1, [pc, #72]	; (8000900 <destroy_handle+0x6a>)
 80008b6:	2004      	movs	r0, #4
 80008b8:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80008ba:	47b8      	blx	r7
 80008bc:	2300      	movs	r3, #0
 80008be:	2c00      	cmp	r4, #0
 80008c0:	d00d      	beq.n	80008de <destroy_handle+0x48>
 80008c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80008c4:	42ac      	cmp	r4, r5
 80008c6:	d107      	bne.n	80008d8 <destroy_handle+0x42>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d111      	bne.n	80008f0 <destroy_handle+0x5a>
 80008cc:	4643      	mov	r3, r8
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	0020      	movs	r0, r4
 80008d2:	f005 fd0d 	bl	80062f0 <acc_rss_integration_mem_free>
 80008d6:	e008      	b.n	80008ea <destroy_handle+0x54>
 80008d8:	0023      	movs	r3, r4
 80008da:	0014      	movs	r4, r2
 80008dc:	e7ef      	b.n	80008be <destroy_handle+0x28>
 80008de:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80008e0:	686b      	ldr	r3, [r5, #4]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <destroy_handle+0x6e>)
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <destroy_handle+0x6a>)
 80008e6:	0020      	movs	r0, r4
 80008e8:	47b0      	blx	r6
 80008ea:	bc04      	pop	{r2}
 80008ec:	4690      	mov	r8, r2
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	655a      	str	r2, [r3, #84]	; 0x54
 80008f2:	e7ed      	b.n	80008d0 <destroy_handle+0x3a>
 80008f4:	2000008c 	.word	0x2000008c
 80008f8:	200002b0 	.word	0x200002b0
 80008fc:	0801bf32 	.word	0x0801bf32
 8000900:	0801bf53 	.word	0x0801bf53
 8000904:	0801bf63 	.word	0x0801bf63

08000908 <acc_service_sparse_configuration_create>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	2260      	movs	r2, #96	; 0x60
 800090c:	4972      	ldr	r1, [pc, #456]	; (8000ad8 <acc_service_sparse_configuration_create+0x1d0>)
 800090e:	208c      	movs	r0, #140	; 0x8c
 8000910:	f00a fb9c 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000914:	1e04      	subs	r4, r0, #0
 8000916:	d100      	bne.n	800091a <acc_service_sparse_configuration_create+0x12>
 8000918:	e0db      	b.n	8000ad2 <acc_service_sparse_configuration_create+0x1ca>
 800091a:	4b70      	ldr	r3, [pc, #448]	; (8000adc <acc_service_sparse_configuration_create+0x1d4>)
 800091c:	0005      	movs	r5, r0
 800091e:	6003      	str	r3, [r0, #0]
 8000920:	2303      	movs	r3, #3
 8000922:	7103      	strb	r3, [r0, #4]
 8000924:	4b6e      	ldr	r3, [pc, #440]	; (8000ae0 <acc_service_sparse_configuration_create+0x1d8>)
 8000926:	351c      	adds	r5, #28
 8000928:	6083      	str	r3, [r0, #8]
 800092a:	4b6e      	ldr	r3, [pc, #440]	; (8000ae4 <acc_service_sparse_configuration_create+0x1dc>)
 800092c:	6105      	str	r5, [r0, #16]
 800092e:	6143      	str	r3, [r0, #20]
 8000930:	2358      	movs	r3, #88	; 0x58
 8000932:	2102      	movs	r1, #2
 8000934:	8303      	strh	r3, [r0, #24]
 8000936:	f7ff ff31 	bl	800079c <acc_service_profile_set>
 800093a:	0020      	movs	r0, r4
 800093c:	2100      	movs	r1, #0
 800093e:	f7ff ff1c 	bl	800077a <acc_service_maximize_signal_attenuation_set>
 8000942:	0028      	movs	r0, r5
 8000944:	f005 ffd8 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000948:	2800      	cmp	r0, #0
 800094a:	d001      	beq.n	8000950 <acc_service_sparse_configuration_create+0x48>
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <acc_service_sparse_configuration_create+0x1e0>)
 800094e:	6423      	str	r3, [r4, #64]	; 0x40
 8000950:	0028      	movs	r0, r5
 8000952:	f005 ffd1 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000956:	2800      	cmp	r0, #0
 8000958:	d001      	beq.n	800095e <acc_service_sparse_configuration_create+0x56>
 800095a:	4b64      	ldr	r3, [pc, #400]	; (8000aec <acc_service_sparse_configuration_create+0x1e4>)
 800095c:	6463      	str	r3, [r4, #68]	; 0x44
 800095e:	0028      	movs	r0, r5
 8000960:	f005 ffca 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000964:	2800      	cmp	r0, #0
 8000966:	d003      	beq.n	8000970 <acc_service_sparse_configuration_create+0x68>
 8000968:	0023      	movs	r3, r4
 800096a:	2206      	movs	r2, #6
 800096c:	334e      	adds	r3, #78	; 0x4e
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	0028      	movs	r0, r5
 8000972:	f005 ffc1 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000976:	2800      	cmp	r0, #0
 8000978:	d001      	beq.n	800097e <acc_service_sparse_configuration_create+0x76>
 800097a:	2301      	movs	r3, #1
 800097c:	62a3      	str	r3, [r4, #40]	; 0x28
 800097e:	0028      	movs	r0, r5
 8000980:	f7ff fed2 	bl	8000728 <acc_base_configuration_repetition_mode_on_demand_set>
 8000984:	0028      	movs	r0, r5
 8000986:	f005 ffb7 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800098a:	2800      	cmp	r0, #0
 800098c:	d001      	beq.n	8000992 <acc_service_sparse_configuration_create+0x8a>
 800098e:	2302      	movs	r3, #2
 8000990:	6563      	str	r3, [r4, #84]	; 0x54
 8000992:	0028      	movs	r0, r5
 8000994:	f005 ffb0 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000998:	2800      	cmp	r0, #0
 800099a:	d003      	beq.n	80009a4 <acc_service_sparse_configuration_create+0x9c>
 800099c:	0023      	movs	r3, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	3348      	adds	r3, #72	; 0x48
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	0028      	movs	r0, r5
 80009a6:	f005 ffa7 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80009aa:	2800      	cmp	r0, #0
 80009ac:	d003      	beq.n	80009b6 <acc_service_sparse_configuration_create+0xae>
 80009ae:	0023      	movs	r3, r4
 80009b0:	2210      	movs	r2, #16
 80009b2:	337c      	adds	r3, #124	; 0x7c
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	0028      	movs	r0, r5
 80009b8:	f005 ff9e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80009bc:	2800      	cmp	r0, #0
 80009be:	d002      	beq.n	80009c6 <acc_service_sparse_configuration_create+0xbe>
 80009c0:	2200      	movs	r2, #0
 80009c2:	1d23      	adds	r3, r4, #4
 80009c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80009c6:	0028      	movs	r0, r5
 80009c8:	f005 ff96 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d003      	beq.n	80009d8 <acc_service_sparse_configuration_create+0xd0>
 80009d0:	0023      	movs	r3, r4
 80009d2:	2200      	movs	r2, #0
 80009d4:	3362      	adds	r3, #98	; 0x62
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	0028      	movs	r0, r5
 80009da:	f005 ff8d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d003      	beq.n	80009ea <acc_service_sparse_configuration_create+0xe2>
 80009e2:	0023      	movs	r3, r4
 80009e4:	2200      	movs	r2, #0
 80009e6:	3363      	adds	r3, #99	; 0x63
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	0028      	movs	r0, r5
 80009ec:	f005 ff84 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80009f0:	2800      	cmp	r0, #0
 80009f2:	d003      	beq.n	80009fc <acc_service_sparse_configuration_create+0xf4>
 80009f4:	0023      	movs	r3, r4
 80009f6:	2200      	movs	r2, #0
 80009f8:	3364      	adds	r3, #100	; 0x64
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	0028      	movs	r0, r5
 80009fe:	f005 ff7b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d007      	beq.n	8000a16 <acc_service_sparse_configuration_create+0x10e>
 8000a06:	0023      	movs	r3, r4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	336b      	adds	r3, #107	; 0x6b
 8000a0c:	705a      	strb	r2, [r3, #1]
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	3240      	adds	r2, #64	; 0x40
 8000a14:	805a      	strh	r2, [r3, #2]
 8000a16:	0028      	movs	r0, r5
 8000a18:	f005 ff6e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a1c:	2800      	cmp	r0, #0
 8000a1e:	d003      	beq.n	8000a28 <acc_service_sparse_configuration_create+0x120>
 8000a20:	0023      	movs	r3, r4
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	3372      	adds	r3, #114	; 0x72
 8000a26:	801a      	strh	r2, [r3, #0]
 8000a28:	0028      	movs	r0, r5
 8000a2a:	f005 ff65 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	d003      	beq.n	8000a3a <acc_service_sparse_configuration_create+0x132>
 8000a32:	0023      	movs	r3, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	3374      	adds	r3, #116	; 0x74
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	0028      	movs	r0, r5
 8000a3c:	f005 ff5c 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d004      	beq.n	8000a4e <acc_service_sparse_configuration_create+0x146>
 8000a44:	0023      	movs	r3, r4
 8000a46:	2200      	movs	r2, #0
 8000a48:	3376      	adds	r3, #118	; 0x76
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	67a2      	str	r2, [r4, #120]	; 0x78
 8000a4e:	0028      	movs	r0, r5
 8000a50:	2101      	movs	r1, #1
 8000a52:	f7ff fdcb 	bl	80005ec <acc_base_configuration_downsampling_factor_set>
 8000a56:	0028      	movs	r0, r5
 8000a58:	f005 ff4e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d003      	beq.n	8000a68 <acc_service_sparse_configuration_create+0x160>
 8000a60:	0023      	movs	r3, r4
 8000a62:	2201      	movs	r2, #1
 8000a64:	3386      	adds	r3, #134	; 0x86
 8000a66:	701a      	strb	r2, [r3, #0]
 8000a68:	0028      	movs	r0, r5
 8000a6a:	f005 ff45 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d003      	beq.n	8000a7a <acc_service_sparse_configuration_create+0x172>
 8000a72:	0023      	movs	r3, r4
 8000a74:	220b      	movs	r2, #11
 8000a76:	335a      	adds	r3, #90	; 0x5a
 8000a78:	801a      	strh	r2, [r3, #0]
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	f005 ff3c 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	d003      	beq.n	8000a8c <acc_service_sparse_configuration_create+0x184>
 8000a84:	0023      	movs	r3, r4
 8000a86:	220a      	movs	r2, #10
 8000a88:	3358      	adds	r3, #88	; 0x58
 8000a8a:	801a      	strh	r2, [r3, #0]
 8000a8c:	0028      	movs	r0, r5
 8000a8e:	f005 ff33 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d003      	beq.n	8000a9e <acc_service_sparse_configuration_create+0x196>
 8000a96:	0023      	movs	r3, r4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	3365      	adds	r3, #101	; 0x65
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	0028      	movs	r0, r5
 8000aa0:	f005 ff2a 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000aa4:	2800      	cmp	r0, #0
 8000aa6:	d003      	beq.n	8000ab0 <acc_service_sparse_configuration_create+0x1a8>
 8000aa8:	0023      	movs	r3, r4
 8000aaa:	2201      	movs	r2, #1
 8000aac:	336a      	adds	r3, #106	; 0x6a
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	0028      	movs	r0, r5
 8000ab2:	f005 ff21 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d004      	beq.n	8000ac4 <acc_service_sparse_configuration_create+0x1bc>
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	0023      	movs	r3, r4
 8000abe:	0152      	lsls	r2, r2, #5
 8000ac0:	3370      	adds	r3, #112	; 0x70
 8000ac2:	801a      	strh	r2, [r3, #0]
 8000ac4:	0028      	movs	r0, r5
 8000ac6:	f005 ff17 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d001      	beq.n	8000ad2 <acc_service_sparse_configuration_create+0x1ca>
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <acc_service_sparse_configuration_create+0x1e8>)
 8000ad0:	61e3      	str	r3, [r4, #28]
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	0801bf97 	.word	0x0801bf97
 8000adc:	acc09dd7 	.word	0xacc09dd7
 8000ae0:	0800063d 	.word	0x0800063d
 8000ae4:	08000be1 	.word	0x08000be1
 8000ae8:	3e4ccccd 	.word	0x3e4ccccd
 8000aec:	3e99999a 	.word	0x3e99999a
 8000af0:	08005953 	.word	0x08005953

08000af4 <acc_service_create>:
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	46c6      	mov	lr, r8
 8000af8:	4d30      	ldr	r5, [pc, #192]	; (8000bbc <acc_service_create+0xc8>)
 8000afa:	b500      	push	{lr}
 8000afc:	7a2c      	ldrb	r4, [r5, #8]
 8000afe:	0007      	movs	r7, r0
 8000b00:	2c00      	cmp	r4, #0
 8000b02:	d04d      	beq.n	8000ba0 <acc_service_create+0xac>
 8000b04:	f7ff fb0c 	bl	8000120 <acc_service_configuration_valid>
 8000b08:	2800      	cmp	r0, #0
 8000b0a:	d101      	bne.n	8000b10 <acc_service_create+0x1c>
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	e00b      	b.n	8000b28 <acc_service_create+0x34>
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	68de      	ldr	r6, [r3, #12]
 8000b14:	2e2a      	cmp	r6, #42	; 0x2a
 8000b16:	d90b      	bls.n	8000b30 <acc_service_create+0x3c>
 8000b18:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <acc_service_create+0xcc>)
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	; (8000bc4 <acc_service_create+0xd0>)
 8000b1c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000b1e:	492a      	ldr	r1, [pc, #168]	; (8000bc8 <acc_service_create+0xd4>)
 8000b20:	232a      	movs	r3, #42	; 0x2a
 8000b22:	2000      	movs	r0, #0
 8000b24:	47a0      	blx	r4
 8000b26:	2400      	movs	r4, #0
 8000b28:	0020      	movs	r0, r4
 8000b2a:	bc04      	pop	{r2}
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	7a6b      	ldrb	r3, [r5, #9]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <acc_service_create+0x48>
 8000b36:	68eb      	ldr	r3, [r5, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d129      	bne.n	8000b90 <acc_service_create+0x9c>
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <acc_service_create+0xcc>)
 8000b3e:	8b3c      	ldrh	r4, [r7, #24]
 8000b40:	001a      	movs	r2, r3
 8000b42:	3230      	adds	r2, #48	; 0x30
 8000b44:	7812      	ldrb	r2, [r2, #0]
 8000b46:	2a03      	cmp	r2, #3
 8000b48:	d906      	bls.n	8000b58 <acc_service_create+0x64>
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <acc_service_create+0xd8>)
 8000b4e:	4698      	mov	r8, r3
 8000b50:	491d      	ldr	r1, [pc, #116]	; (8000bc8 <acc_service_create+0xd4>)
 8000b52:	0033      	movs	r3, r6
 8000b54:	2004      	movs	r0, #4
 8000b56:	47c0      	blx	r8
 8000b58:	0020      	movs	r0, r4
 8000b5a:	22bd      	movs	r2, #189	; 0xbd
 8000b5c:	491c      	ldr	r1, [pc, #112]	; (8000bd0 <acc_service_create+0xdc>)
 8000b5e:	f00a fa75 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000b62:	1e04      	subs	r4, r0, #0
 8000b64:	d0d2      	beq.n	8000b0c <acc_service_create+0x18>
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <acc_service_create+0xe0>)
 8000b68:	6046      	str	r6, [r0, #4]
 8000b6a:	6003      	str	r3, [r0, #0]
 8000b6c:	68eb      	ldr	r3, [r5, #12]
 8000b6e:	0039      	movs	r1, r7
 8000b70:	6543      	str	r3, [r0, #84]	; 0x54
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	60e8      	str	r0, [r5, #12]
 8000b76:	4798      	blx	r3
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d10e      	bne.n	8000b9a <acc_service_create+0xa6>
 8000b7c:	68e3      	ldr	r3, [r4, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <acc_service_create+0x92>
 8000b82:	0020      	movs	r0, r4
 8000b84:	4798      	blx	r3
 8000b86:	0020      	movs	r0, r4
 8000b88:	f7ff fe85 	bl	8000896 <destroy_handle>
 8000b8c:	2400      	movs	r4, #0
 8000b8e:	e7cb      	b.n	8000b28 <acc_service_create+0x34>
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	4296      	cmp	r6, r2
 8000b94:	d00b      	beq.n	8000bae <acc_service_create+0xba>
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	e7ce      	b.n	8000b38 <acc_service_create+0x44>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	7263      	strb	r3, [r4, #9]
 8000b9e:	e7c3      	b.n	8000b28 <acc_service_create+0x34>
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <acc_service_create+0xcc>)
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	; (8000bd8 <acc_service_create+0xe4>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <acc_service_create+0xd4>)
 8000ba8:	0020      	movs	r0, r4
 8000baa:	4798      	blx	r3
 8000bac:	e7bc      	b.n	8000b28 <acc_service_create+0x34>
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <acc_service_create+0xcc>)
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <acc_service_create+0xe8>)
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <acc_service_create+0xd4>)
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	4798      	blx	r3
 8000bba:	e7a7      	b.n	8000b0c <acc_service_create+0x18>
 8000bbc:	2000008c 	.word	0x2000008c
 8000bc0:	200002b0 	.word	0x200002b0
 8000bc4:	0801bfb8 	.word	0x0801bfb8
 8000bc8:	0801bf53 	.word	0x0801bf53
 8000bcc:	0801bfd1 	.word	0x0801bfd1
 8000bd0:	0801bff0 	.word	0x0801bff0
 8000bd4:	acc09ee8 	.word	0xacc09ee8
 8000bd8:	0801c012 	.word	0x0801c012
 8000bdc:	0801c024 	.word	0x0801c024

08000be0 <sparse_create_service>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	46de      	mov	lr, fp
 8000be4:	4645      	mov	r5, r8
 8000be6:	4657      	mov	r7, sl
 8000be8:	464e      	mov	r6, r9
 8000bea:	b5e0      	push	{r5, r6, r7, lr}
 8000bec:	b0a5      	sub	sp, #148	; 0x94
 8000bee:	4680      	mov	r8, r0
 8000bf0:	228c      	movs	r2, #140	; 0x8c
 8000bf2:	a801      	add	r0, sp, #4
 8000bf4:	000c      	movs	r4, r1
 8000bf6:	f014 ff61 	bl	8015abc <memcpy>
 8000bfa:	a801      	add	r0, sp, #4
 8000bfc:	f7ff faae 	bl	800015c <acc_service_configuration_check>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d101      	bne.n	8000c08 <sparse_create_service+0x28>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e014      	b.n	8000c32 <sparse_create_service+0x52>
 8000c08:	a808      	add	r0, sp, #32
 8000c0a:	f005 fe75 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d0f8      	beq.n	8000c04 <sparse_create_service+0x24>
 8000c12:	a808      	add	r0, sp, #32
 8000c14:	f005 fdf0 	bl	80067f8 <acc_base_configuration_check.part.6>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d0f3      	beq.n	8000c04 <sparse_create_service+0x24>
 8000c1c:	ab22      	add	r3, sp, #136	; 0x88
 8000c1e:	881d      	ldrh	r5, [r3, #0]
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d10d      	bne.n	8000c40 <sparse_create_service+0x60>
 8000c24:	4b73      	ldr	r3, [pc, #460]	; (8000df4 <sparse_create_service+0x214>)
 8000c26:	0028      	movs	r0, r5
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	4a73      	ldr	r2, [pc, #460]	; (8000df8 <sparse_create_service+0x218>)
 8000c2c:	4973      	ldr	r1, [pc, #460]	; (8000dfc <sparse_create_service+0x21c>)
 8000c2e:	4798      	blx	r3
 8000c30:	0028      	movs	r0, r5
 8000c32:	b025      	add	sp, #148	; 0x94
 8000c34:	bc3c      	pop	{r2, r3, r4, r5}
 8000c36:	4690      	mov	r8, r2
 8000c38:	4699      	mov	r9, r3
 8000c3a:	46a2      	mov	sl, r4
 8000c3c:	46ab      	mov	fp, r5
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	238a      	movs	r3, #138	; 0x8a
 8000c42:	446b      	add	r3, sp
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10a      	bne.n	8000c60 <sparse_create_service+0x80>
 8000c4a:	ab20      	add	r3, sp, #128	; 0x80
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2b40      	cmp	r3, #64	; 0x40
 8000c50:	d906      	bls.n	8000c60 <sparse_create_service+0x80>
 8000c52:	4b68      	ldr	r3, [pc, #416]	; (8000df4 <sparse_create_service+0x214>)
 8000c54:	4a6a      	ldr	r2, [pc, #424]	; (8000e00 <sparse_create_service+0x220>)
 8000c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c58:	4968      	ldr	r1, [pc, #416]	; (8000dfc <sparse_create_service+0x21c>)
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	4798      	blx	r3
 8000c5e:	e7d1      	b.n	8000c04 <sparse_create_service+0x24>
 8000c60:	4642      	mov	r2, r8
 8000c62:	7923      	ldrb	r3, [r4, #4]
 8000c64:	2010      	movs	r0, #16
 8000c66:	7213      	strb	r3, [r2, #8]
 8000c68:	4b66      	ldr	r3, [pc, #408]	; (8000e04 <sparse_create_service+0x224>)
 8000c6a:	22ec      	movs	r2, #236	; 0xec
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	469b      	mov	fp, r3
 8000c70:	f00a f9ec 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000c74:	0005      	movs	r5, r0
 8000c76:	2090      	movs	r0, #144	; 0x90
 8000c78:	22ed      	movs	r2, #237	; 0xed
 8000c7a:	4659      	mov	r1, fp
 8000c7c:	0040      	lsls	r0, r0, #1
 8000c7e:	f00a f9e5 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000c82:	0004      	movs	r4, r0
 8000c84:	2d00      	cmp	r5, #0
 8000c86:	d001      	beq.n	8000c8c <sparse_create_service+0xac>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d10f      	bne.n	8000cac <sparse_create_service+0xcc>
 8000c8c:	0028      	movs	r0, r5
 8000c8e:	f005 fb2f 	bl	80062f0 <acc_rss_integration_mem_free>
 8000c92:	0020      	movs	r0, r4
 8000c94:	f005 fb2c 	bl	80062f0 <acc_rss_integration_mem_free>
 8000c98:	2500      	movs	r5, #0
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	611d      	str	r5, [r3, #16]
 8000ca0:	1e68      	subs	r0, r5, #1
 8000ca2:	4185      	sbcs	r5, r0
 8000ca4:	4b58      	ldr	r3, [pc, #352]	; (8000e08 <sparse_create_service+0x228>)
 8000ca6:	b2e8      	uxtb	r0, r5
 8000ca8:	60d3      	str	r3, [r2, #12]
 8000caa:	e7c2      	b.n	8000c32 <sparse_create_service+0x52>
 8000cac:	2318      	movs	r3, #24
 8000cae:	469a      	mov	sl, r3
 8000cb0:	6028      	str	r0, [r5, #0]
 8000cb2:	4482      	add	sl, r0
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	18c0      	adds	r0, r0, r3
 8000cb8:	33e4      	adds	r3, #228	; 0xe4
 8000cba:	4699      	mov	r9, r3
 8000cbc:	44a1      	add	r9, r4
 8000cbe:	464b      	mov	r3, r9
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	6760      	str	r0, [r4, #116]	; 0x74
 8000cc4:	a908      	add	r1, sp, #32
 8000cc6:	f005 ff25 	bl	8006b14 <acc_sensor_manager_prepare_radar_engine>
 8000cca:	464b      	mov	r3, r9
 8000ccc:	895a      	ldrh	r2, [r3, #10]
 8000cce:	0023      	movs	r3, r4
 8000cd0:	3370      	adds	r3, #112	; 0x70
 8000cd2:	1e06      	subs	r6, r0, #0
 8000cd4:	801a      	strh	r2, [r3, #0]
 8000cd6:	d104      	bne.n	8000ce2 <sparse_create_service+0x102>
 8000cd8:	0028      	movs	r0, r5
 8000cda:	f005 fb39 	bl	8006350 <disassemble.lto_priv.324.lto_priv.634>
 8000cde:	0035      	movs	r5, r6
 8000ce0:	e7db      	b.n	8000c9a <sparse_create_service+0xba>
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	89db      	ldrh	r3, [r3, #14]
 8000ce6:	189b      	adds	r3, r3, r2
 8000ce8:	464a      	mov	r2, r9
 8000cea:	8997      	ldrh	r7, [r2, #12]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	007f      	lsls	r7, r7, #1
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	d200      	bcs.n	8000cf6 <sparse_create_service+0x116>
 8000cf4:	001f      	movs	r7, r3
 8000cf6:	a808      	add	r0, sp, #32
 8000cf8:	f005 fdfe 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	42b0      	cmp	r0, r6
 8000d00:	d001      	beq.n	8000d06 <sparse_create_service+0x126>
 8000d02:	ab1d      	add	r3, sp, #116	; 0x74
 8000d04:	881e      	ldrh	r6, [r3, #0]
 8000d06:	42be      	cmp	r6, r7
 8000d08:	d200      	bcs.n	8000d0c <sparse_create_service+0x12c>
 8000d0a:	003e      	movs	r6, r7
 8000d0c:	2298      	movs	r2, #152	; 0x98
 8000d0e:	4659      	mov	r1, fp
 8000d10:	0052      	lsls	r2, r2, #1
 8000d12:	0030      	movs	r0, r6
 8000d14:	f005 fb30 	bl	8006378 <acc_rss_integration_mem_alloc_debug>
 8000d18:	464b      	mov	r3, r9
 8000d1a:	1e07      	subs	r7, r0, #0
 8000d1c:	61d8      	str	r0, [r3, #28]
 8000d1e:	d056      	beq.n	8000dce <sparse_create_service+0x1ee>
 8000d20:	621e      	str	r6, [r3, #32]
 8000d22:	0022      	movs	r2, r4
 8000d24:	0026      	movs	r6, r4
 8000d26:	1da3      	adds	r3, r4, #6
 8000d28:	6623      	str	r3, [r4, #96]	; 0x60
 8000d2a:	1de3      	adds	r3, r4, #7
 8000d2c:	6663      	str	r3, [r4, #100]	; 0x64
 8000d2e:	3214      	adds	r2, #20
 8000d30:	3305      	adds	r3, #5
 8000d32:	3608      	adds	r6, #8
 8000d34:	66a3      	str	r3, [r4, #104]	; 0x68
 8000d36:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000d38:	65e2      	str	r2, [r4, #92]	; 0x5c
 8000d3a:	65a4      	str	r4, [r4, #88]	; 0x58
 8000d3c:	66e6      	str	r6, [r4, #108]	; 0x6c
 8000d3e:	67d8      	str	r0, [r3, #124]	; 0x7c
 8000d40:	1d23      	adds	r3, r4, #4
 8000d42:	4699      	mov	r9, r3
 8000d44:	4649      	mov	r1, r9
 8000d46:	3388      	adds	r3, #136	; 0x88
 8000d48:	6019      	str	r1, [r3, #0]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	63d8      	str	r0, [r3, #60]	; 0x3c
 8000d4e:	665c      	str	r4, [r3, #100]	; 0x64
 8000d50:	238c      	movs	r3, #140	; 0x8c
 8000d52:	4f28      	ldr	r7, [pc, #160]	; (8000df4 <sparse_create_service+0x214>)
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	469b      	mov	fp, r3
 8000d58:	003b      	movs	r3, r7
 8000d5a:	3330      	adds	r3, #48	; 0x30
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	44a3      	add	fp, r4
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d839      	bhi.n	8000dd8 <sparse_create_service+0x1f8>
 8000d64:	4652      	mov	r2, sl
 8000d66:	465b      	mov	r3, fp
 8000d68:	a908      	add	r1, sp, #32
 8000d6a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000d6c:	f005 fdde 	bl	800692c <acc_sensor_manager_prepare_measurement>
 8000d70:	4682      	mov	sl, r0
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d034      	beq.n	8000de0 <sparse_create_service+0x200>
 8000d76:	0023      	movs	r3, r4
 8000d78:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <sparse_create_service+0x22c>)
 8000d7a:	33b0      	adds	r3, #176	; 0xb0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <sparse_create_service+0x230>)
 8000d80:	0020      	movs	r0, r4
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	464a      	mov	r2, r9
 8000d86:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <sparse_create_service+0x234>)
 8000d88:	3078      	adds	r0, #120	; 0x78
 8000d8a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <sparse_create_service+0x238>)
 8000d8e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <sparse_create_service+0x23c>)
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <sparse_create_service+0x240>)
 8000d94:	67f3      	str	r3, [r6, #124]	; 0x7c
 8000d96:	0023      	movs	r3, r4
 8000d98:	33b8      	adds	r3, #184	; 0xb8
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9c:	4a21      	ldr	r2, [pc, #132]	; (8000e24 <sparse_create_service+0x244>)
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <sparse_create_service+0x248>)
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	4a21      	ldr	r2, [pc, #132]	; (8000e2c <sparse_create_service+0x24c>)
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000daa:	67a3      	str	r3, [r4, #120]	; 0x78
 8000dac:	f009 fb45 	bl	800a43a <validate.lto_priv.172>
 8000db0:	1e06      	subs	r6, r0, #0
 8000db2:	d01a      	beq.n	8000dea <sparse_create_service+0x20a>
 8000db4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000db6:	34f4      	adds	r4, #244	; 0xf4
 8000db8:	68c3      	ldr	r3, [r0, #12]
 8000dba:	4798      	blx	r3
 8000dbc:	4643      	mov	r3, r8
 8000dbe:	6023      	str	r3, [r4, #0]
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <sparse_create_service+0x250>)
 8000dc2:	606b      	str	r3, [r5, #4]
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <sparse_create_service+0x254>)
 8000dc6:	60ab      	str	r3, [r5, #8]
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <sparse_create_service+0x258>)
 8000dca:	60eb      	str	r3, [r5, #12]
 8000dcc:	e765      	b.n	8000c9a <sparse_create_service+0xba>
 8000dce:	0028      	movs	r0, r5
 8000dd0:	f005 fabe 	bl	8006350 <disassemble.lto_priv.324.lto_priv.634>
 8000dd4:	003d      	movs	r5, r7
 8000dd6:	e760      	b.n	8000c9a <sparse_create_service+0xba>
 8000dd8:	a808      	add	r0, sp, #32
 8000dda:	f007 f96d 	bl	80080b8 <acc_base_configuration_print.part.5>
 8000dde:	e7c1      	b.n	8000d64 <sparse_create_service+0x184>
 8000de0:	0028      	movs	r0, r5
 8000de2:	f005 fab5 	bl	8006350 <disassemble.lto_priv.324.lto_priv.634>
 8000de6:	4655      	mov	r5, sl
 8000de8:	e757      	b.n	8000c9a <sparse_create_service+0xba>
 8000dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <sparse_create_service+0x25c>)
 8000dee:	4914      	ldr	r1, [pc, #80]	; (8000e40 <sparse_create_service+0x260>)
 8000df0:	4798      	blx	r3
 8000df2:	e771      	b.n	8000cd8 <sparse_create_service+0xf8>
 8000df4:	200002b0 	.word	0x200002b0
 8000df8:	0801c04b 	.word	0x0801c04b
 8000dfc:	0801bf12 	.word	0x0801bf12
 8000e00:	0801c07b 	.word	0x0801c07b
 8000e04:	0801c0a6 	.word	0x0801c0a6
 8000e08:	0800018d 	.word	0x0800018d
 8000e0c:	40400000 	.word	0x40400000
 8000e10:	0800ccdd 	.word	0x0800ccdd
 8000e14:	0800a491 	.word	0x0800a491
 8000e18:	0800a43b 	.word	0x0800a43b
 8000e1c:	0800a81b 	.word	0x0800a81b
 8000e20:	08000847 	.word	0x08000847
 8000e24:	0800a32b 	.word	0x0800a32b
 8000e28:	0800a2c1 	.word	0x0800a2c1
 8000e2c:	0800a329 	.word	0x0800a329
 8000e30:	08005c37 	.word	0x08005c37
 8000e34:	08005c03 	.word	0x08005c03
 8000e38:	08006351 	.word	0x08006351
 8000e3c:	0801c0cf 	.word	0x0801c0cf
 8000e40:	0801c0ef 	.word	0x0801c0ef

08000e44 <sqrt_accumulant>:

void sqrt_accumulant(void){
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	46ce      	mov	lr, r9
 8000e48:	4647      	mov	r7, r8
	for(uint16_t i = 0; i<bins; i++){
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <sqrt_accumulant+0x60>)
void sqrt_accumulant(void){
 8000e4c:	b580      	push	{r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d022      	beq.n	8000e9a <sqrt_accumulant+0x56>
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <sqrt_accumulant+0x64>)
		accumulant[j][i] = sqrt(accumulant[j][i]);
 8000e56:	4915      	ldr	r1, [pc, #84]	; (8000eac <sqrt_accumulant+0x68>)
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000e58:	881b      	ldrh	r3, [r3, #0]
		accumulant[j][i] = sqrt(accumulant[j][i]);
 8000e5a:	6809      	ldr	r1, [r1, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000e5c:	085b      	lsrs	r3, r3, #1
		accumulant[j][i] = sqrt(accumulant[j][i]);
 8000e5e:	4689      	mov	r9, r1
 8000e60:	d01b      	beq.n	8000e9a <sqrt_accumulant+0x56>
 8000e62:	3a01      	subs	r2, #1
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b292      	uxth	r2, r2
 8000e68:	b29f      	uxth	r7, r3
 8000e6a:	3201      	adds	r2, #1
 8000e6c:	000b      	movs	r3, r1
 8000e6e:	0092      	lsls	r2, r2, #2
 8000e70:	4690      	mov	r8, r2
 8000e72:	2600      	movs	r6, #0
 8000e74:	00bf      	lsls	r7, r7, #2
 8000e76:	3304      	adds	r3, #4
 8000e78:	18ff      	adds	r7, r7, r3
void sqrt_accumulant(void){
 8000e7a:	464d      	mov	r5, r9
		accumulant[j][i] = sqrt(accumulant[j][i]);
 8000e7c:	cd10      	ldmia	r5!, {r4}
 8000e7e:	19a4      	adds	r4, r4, r6
 8000e80:	6820      	ldr	r0, [r4, #0]
 8000e82:	f010 fadf 	bl	8011444 <__aeabi_f2d>
 8000e86:	f012 fc09 	bl	801369c <sqrt>
 8000e8a:	f010 fb2d 	bl	80114e8 <__aeabi_d2f>
 8000e8e:	6020      	str	r0, [r4, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000e90:	42af      	cmp	r7, r5
 8000e92:	d1f3      	bne.n	8000e7c <sqrt_accumulant+0x38>
 8000e94:	3604      	adds	r6, #4
	for(uint16_t i = 0; i<bins; i++){
 8000e96:	45b0      	cmp	r8, r6
 8000e98:	d1ef      	bne.n	8000e7a <sqrt_accumulant+0x36>
	}
	}
}
 8000e9a:	bc0c      	pop	{r2, r3}
 8000e9c:	4690      	mov	r8, r2
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	200003a8 	.word	0x200003a8
 8000ea8:	200003b0 	.word	0x200003b0
 8000eac:	200003b4 	.word	0x200003b4

08000eb0 <printf_sparse_metadata>:
	filldata_envelope();
	DBG_PRINTLN("Envelope measurement complete");
	
}

void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	b500      	push	{lr}
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000eb8:	4e44      	ldr	r6, [pc, #272]	; (8000fcc <printf_sparse_metadata+0x11c>)
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000eba:	9107      	str	r1, [sp, #28]
 8000ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8000ebe:	9b07      	ldr	r3, [sp, #28]
 8000ec0:	9006      	str	r0, [sp, #24]
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000ec2:	0030      	movs	r0, r6
 8000ec4:	4698      	mov	r8, r3
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000ec6:	9208      	str	r2, [sp, #32]
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000ec8:	f014 fa28 	bl	801531c <__wrap_printf>
 8000ecc:	4840      	ldr	r0, [pc, #256]	; (8000fd0 <printf_sparse_metadata+0x120>)
 8000ece:	f014 fa25 	bl	801531c <__wrap_printf>
 8000ed2:	22c9      	movs	r2, #201	; 0xc9
 8000ed4:	4d3f      	ldr	r5, [pc, #252]	; (8000fd4 <printf_sparse_metadata+0x124>)
 8000ed6:	4c40      	ldr	r4, [pc, #256]	; (8000fd8 <printf_sparse_metadata+0x128>)
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	0029      	movs	r1, r5
 8000edc:	0020      	movs	r0, r4
 8000ede:	f014 fa1d 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 8000ee2:	0030      	movs	r0, r6
 8000ee4:	f014 fa1a 	bl	801531c <__wrap_printf>
 8000ee8:	493c      	ldr	r1, [pc, #240]	; (8000fdc <printf_sparse_metadata+0x12c>)
 8000eea:	9806      	ldr	r0, [sp, #24]
 8000eec:	f00d fd4e 	bl	800e98c <__aeabi_fmul>
 8000ef0:	f00e fc60 	bl	800f7b4 <__aeabi_f2iz>
 8000ef4:	0001      	movs	r1, r0
 8000ef6:	483a      	ldr	r0, [pc, #232]	; (8000fe0 <printf_sparse_metadata+0x130>)
 8000ef8:	f014 fa10 	bl	801531c <__wrap_printf>
 8000efc:	4a39      	ldr	r2, [pc, #228]	; (8000fe4 <printf_sparse_metadata+0x134>)
 8000efe:	0029      	movs	r1, r5
 8000f00:	0020      	movs	r0, r4
 8000f02:	f014 fa0b 	bl	801531c <__wrap_printf>
    if(! far_active){
 8000f06:	4f38      	ldr	r7, [pc, #224]	; (8000fe8 <printf_sparse_metadata+0x138>)
        INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 8000f08:	0030      	movs	r0, r6
    if(! far_active){
 8000f0a:	7c3b      	ldrb	r3, [r7, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d04b      	beq.n	8000fa8 <printf_sparse_metadata+0xf8>
    }else{
       INF_PRINTLN("Length (far): %lu mm", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8000f10:	f014 fa04 	bl	801531c <__wrap_printf>
 8000f14:	69b9      	ldr	r1, [r7, #24]
 8000f16:	4640      	mov	r0, r8
 8000f18:	f00d fa8c 	bl	800e434 <__aeabi_fadd>
 8000f1c:	492f      	ldr	r1, [pc, #188]	; (8000fdc <printf_sparse_metadata+0x12c>)
 8000f1e:	f00d fd35 	bl	800e98c <__aeabi_fmul>
 8000f22:	f00e fa73 	bl	800f40c <__aeabi_f2uiz>
 8000f26:	0001      	movs	r1, r0
 8000f28:	4830      	ldr	r0, [pc, #192]	; (8000fec <printf_sparse_metadata+0x13c>)
 8000f2a:	f014 f9f7 	bl	801531c <__wrap_printf>
 8000f2e:	4a30      	ldr	r2, [pc, #192]	; (8000ff0 <printf_sparse_metadata+0x140>)
 8000f30:	0029      	movs	r1, r5
 8000f32:	0020      	movs	r0, r4
 8000f34:	f014 f9f2 	bl	801531c <__wrap_printf>
    }
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 8000f38:	0030      	movs	r0, r6
 8000f3a:	f014 f9ef 	bl	801531c <__wrap_printf>
 8000f3e:	ab06      	add	r3, sp, #24
 8000f40:	8919      	ldrh	r1, [r3, #8]
 8000f42:	482c      	ldr	r0, [pc, #176]	; (8000ff4 <printf_sparse_metadata+0x144>)
 8000f44:	f014 f9ea 	bl	801531c <__wrap_printf>
 8000f48:	4a2b      	ldr	r2, [pc, #172]	; (8000ff8 <printf_sparse_metadata+0x148>)
 8000f4a:	0029      	movs	r1, r5
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	f014 f9e5 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8000f52:	0030      	movs	r0, r6
 8000f54:	f014 f9e2 	bl	801531c <__wrap_printf>
 8000f58:	4920      	ldr	r1, [pc, #128]	; (8000fdc <printf_sparse_metadata+0x12c>)
 8000f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f5c:	f00d fd16 	bl	800e98c <__aeabi_fmul>
 8000f60:	f00e fa54 	bl	800f40c <__aeabi_f2uiz>
 8000f64:	0001      	movs	r1, r0
 8000f66:	4825      	ldr	r0, [pc, #148]	; (8000ffc <printf_sparse_metadata+0x14c>)
 8000f68:	f014 f9d8 	bl	801531c <__wrap_printf>
 8000f6c:	22cb      	movs	r2, #203	; 0xcb
 8000f6e:	0029      	movs	r1, r5
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	0020      	movs	r0, r4
 8000f74:	f014 f9d2 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 8000f78:	0030      	movs	r0, r6
 8000f7a:	f014 f9cf 	bl	801531c <__wrap_printf>
 8000f7e:	4920      	ldr	r1, [pc, #128]	; (8001000 <printf_sparse_metadata+0x150>)
 8000f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000f82:	f00d fd03 	bl	800e98c <__aeabi_fmul>
 8000f86:	f00e fa41 	bl	800f40c <__aeabi_f2uiz>
 8000f8a:	0001      	movs	r1, r0
 8000f8c:	481d      	ldr	r0, [pc, #116]	; (8001004 <printf_sparse_metadata+0x154>)
 8000f8e:	f014 f9c5 	bl	801531c <__wrap_printf>
 8000f92:	0029      	movs	r1, r5
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <printf_sparse_metadata+0x158>)
 8000f96:	0020      	movs	r0, r4
 8000f98:	f014 f9c0 	bl	801531c <__wrap_printf>
}
 8000f9c:	bc04      	pop	{r2}
 8000f9e:	4690      	mov	r8, r2
 8000fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4718      	bx	r3
        INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 8000fa8:	f014 f9b8 	bl	801531c <__wrap_printf>
 8000fac:	490b      	ldr	r1, [pc, #44]	; (8000fdc <printf_sparse_metadata+0x12c>)
 8000fae:	4640      	mov	r0, r8
 8000fb0:	f00d fcec 	bl	800e98c <__aeabi_fmul>
 8000fb4:	f00e fa2a 	bl	800f40c <__aeabi_f2uiz>
 8000fb8:	0001      	movs	r1, r0
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <printf_sparse_metadata+0x15c>)
 8000fbc:	f014 f9ae 	bl	801531c <__wrap_printf>
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <printf_sparse_metadata+0x160>)
 8000fc2:	0029      	movs	r1, r5
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f014 f9a9 	bl	801531c <__wrap_printf>
 8000fca:	e7b5      	b.n	8000f38 <printf_sparse_metadata+0x88>
 8000fcc:	0801c2d0 	.word	0x0801c2d0
 8000fd0:	0801c2d8 	.word	0x0801c2d8
 8000fd4:	0801c2f4 	.word	0x0801c2f4
 8000fd8:	0801c308 	.word	0x0801c308
 8000fdc:	447a0000 	.word	0x447a0000
 8000fe0:	0801c314 	.word	0x0801c314
 8000fe4:	00000325 	.word	0x00000325
 8000fe8:	2000008c 	.word	0x2000008c
 8000fec:	0801c334 	.word	0x0801c334
 8000ff0:	00000329 	.word	0x00000329
 8000ff4:	0801c34c 	.word	0x0801c34c
 8000ff8:	0000032b 	.word	0x0000032b
 8000ffc:	0801c360 	.word	0x0801c360
 8001000:	49742400 	.word	0x49742400
 8001004:	0801c374 	.word	0x0801c374
 8001008:	0000032d 	.word	0x0000032d
 800100c:	0801c324 	.word	0x0801c324
 8001010:	00000327 	.word	0x00000327

08001014 <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	46d6      	mov	lr, sl
 8001018:	464f      	mov	r7, r9
 800101a:	4646      	mov	r6, r8
 800101c:	0004      	movs	r4, r0
 800101e:	b5c0      	push	{r6, r7, lr}
	DBG_PRINTLN("updating config");
 8001020:	4887      	ldr	r0, [pc, #540]	; (8001240 <updateSparseConfig+0x22c>)
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8001022:	4689      	mov	r9, r1
 8001024:	4690      	mov	r8, r2
	DBG_PRINTLN("updating config");
 8001026:	f014 f979 	bl	801531c <__wrap_printf>
 800102a:	4886      	ldr	r0, [pc, #536]	; (8001244 <updateSparseConfig+0x230>)
 800102c:	f014 f976 	bl	801531c <__wrap_printf>
 8001030:	22e6      	movs	r2, #230	; 0xe6
	REGADRERR = -1;
 8001032:	2701      	movs	r7, #1
	DBG_PRINTLN("updating config");
 8001034:	32ff      	adds	r2, #255	; 0xff
 8001036:	4984      	ldr	r1, [pc, #528]	; (8001248 <updateSparseConfig+0x234>)
 8001038:	4884      	ldr	r0, [pc, #528]	; (800124c <updateSparseConfig+0x238>)
 800103a:	f014 f96f 	bl	801531c <__wrap_printf>
	return *regptr;
 800103e:	4d84      	ldr	r5, [pc, #528]	; (8001250 <updateSparseConfig+0x23c>)
	REGADRERR = -1;
 8001040:	4e84      	ldr	r6, [pc, #528]	; (8001254 <updateSparseConfig+0x240>)
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8001042:	6a2b      	ldr	r3, [r5, #32]
	REGADRERR = -1;
 8001044:	427f      	negs	r7, r7
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8001046:	b2d9      	uxtb	r1, r3
 8001048:	0020      	movs	r0, r4
	REGADRERR = -1;
 800104a:	6037      	str	r7, [r6, #0]
	acc_service_profile_set(config, RegInt_getreg(0x28));
 800104c:	f7ff fba6 	bl	800079c <acc_service_profile_set>
	return *regptr;
 8001050:	68ab      	ldr	r3, [r5, #8]
	REGADRERR = -1;
 8001052:	6037      	str	r7, [r6, #0]
	if(rep_mode == 0x01){
 8001054:	2b01      	cmp	r3, #1
 8001056:	d100      	bne.n	800105a <updateSparseConfig+0x46>
 8001058:	e0dd      	b.n	8001216 <updateSparseConfig+0x202>
	}else if (rep_mode == 0x02){
 800105a:	2b02      	cmp	r3, #2
 800105c:	d100      	bne.n	8001060 <updateSparseConfig+0x4c>
 800105e:	e0d4      	b.n	800120a <updateSparseConfig+0x1f6>
	REGADRERR = -1;
 8001060:	2301      	movs	r3, #1
 8001062:	0020      	movs	r0, r4
 8001064:	425b      	negs	r3, r3
 8001066:	6033      	str	r3, [r6, #0]
	return *regptr;
 8001068:	69af      	ldr	r7, [r5, #24]
 800106a:	f7ff f899 	bl	80001a0 <acc_service_get_base_configuration>
 800106e:	4682      	mov	sl, r0
 8001070:	f005 fc42 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001074:	2800      	cmp	r0, #0
 8001076:	d004      	beq.n	8001082 <updateSparseConfig+0x6e>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8001078:	1e7b      	subs	r3, r7, #1
 800107a:	419f      	sbcs	r7, r3
 800107c:	4652      	mov	r2, sl
 800107e:	2347      	movs	r3, #71	; 0x47
 8001080:	54d7      	strb	r7, [r2, r3]
	REGADRERR = -1;
 8001082:	2301      	movs	r3, #1
 8001084:	425b      	negs	r3, r3
 8001086:	6033      	str	r3, [r6, #0]
	return *regptr;
 8001088:	696b      	ldr	r3, [r5, #20]
 800108a:	0020      	movs	r0, r4
 800108c:	469a      	mov	sl, r3
 800108e:	f7ff f887 	bl	80001a0 <acc_service_get_base_configuration>
 8001092:	0007      	movs	r7, r0
 8001094:	f005 fc30 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001098:	2800      	cmp	r0, #0
 800109a:	d001      	beq.n	80010a0 <updateSparseConfig+0x8c>
 800109c:	4653      	mov	r3, sl
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
	REGADRERR = -1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	0020      	movs	r0, r4
 80010a4:	425b      	negs	r3, r3
 80010a6:	6033      	str	r3, [r6, #0]
	return *regptr;
 80010a8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80010aa:	f7ff f879 	bl	80001a0 <acc_service_get_base_configuration>
 80010ae:	4682      	mov	sl, r0
 80010b0:	f005 fc22 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d004      	beq.n	80010c2 <updateSparseConfig+0xae>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 80010b8:	1e7b      	subs	r3, r7, #1
 80010ba:	419f      	sbcs	r7, r3
 80010bc:	4652      	mov	r2, sl
 80010be:	234e      	movs	r3, #78	; 0x4e
 80010c0:	54d7      	strb	r7, [r2, r3]
 80010c2:	0020      	movs	r0, r4
 80010c4:	f7ff f86c 	bl	80001a0 <acc_service_get_base_configuration>
 80010c8:	0007      	movs	r7, r0
 80010ca:	f005 fc15 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80010ce:	2800      	cmp	r0, #0
 80010d0:	d006      	beq.n	80010e0 <updateSparseConfig+0xcc>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 80010d2:	4648      	mov	r0, r9
 80010d4:	f00e fbd8 	bl	800f888 <__aeabi_ui2f>
 80010d8:	495f      	ldr	r1, [pc, #380]	; (8001258 <updateSparseConfig+0x244>)
 80010da:	f00d fb45 	bl	800e768 <__aeabi_fdiv>
 80010de:	6278      	str	r0, [r7, #36]	; 0x24
 80010e0:	0020      	movs	r0, r4
 80010e2:	f7ff f85d 	bl	80001a0 <acc_service_get_base_configuration>
 80010e6:	0007      	movs	r7, r0
 80010e8:	f005 fc06 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80010ec:	2800      	cmp	r0, #0
 80010ee:	d006      	beq.n	80010fe <updateSparseConfig+0xea>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 80010f0:	4640      	mov	r0, r8
 80010f2:	f00e fbc9 	bl	800f888 <__aeabi_ui2f>
 80010f6:	4958      	ldr	r1, [pc, #352]	; (8001258 <updateSparseConfig+0x244>)
 80010f8:	f00d fb36 	bl	800e768 <__aeabi_fdiv>
 80010fc:	62b8      	str	r0, [r7, #40]	; 0x28
	REGADRERR = -1;
 80010fe:	2701      	movs	r7, #1
 8001100:	427f      	negs	r7, r7
 8001102:	6037      	str	r7, [r6, #0]
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8001104:	6928      	ldr	r0, [r5, #16]
 8001106:	f00e fbbf 	bl	800f888 <__aeabi_ui2f>
 800110a:	4953      	ldr	r1, [pc, #332]	; (8001258 <updateSparseConfig+0x244>)
 800110c:	f00d fb2c 	bl	800e768 <__aeabi_fdiv>
 8001110:	1c01      	adds	r1, r0, #0
 8001112:	0020      	movs	r0, r4
 8001114:	f7ff fb5c 	bl	80007d0 <acc_service_receiver_gain_set>
 8001118:	0020      	movs	r0, r4
	REGADRERR = -1;
 800111a:	6037      	str	r7, [r6, #0]
	return *regptr;
 800111c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800111e:	f7ff f83f 	bl	80001a0 <acc_service_get_base_configuration>
 8001122:	4680      	mov	r8, r0
 8001124:	f005 fbe8 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001128:	2800      	cmp	r0, #0
 800112a:	d002      	beq.n	8001132 <updateSparseConfig+0x11e>
 800112c:	4643      	mov	r3, r8
 800112e:	b2ff      	uxtb	r7, r7
 8001130:	879f      	strh	r7, [r3, #60]	; 0x3c
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8001132:	6ca9      	ldr	r1, [r5, #72]	; 0x48
	REGADRERR = -1;
 8001134:	2701      	movs	r7, #1
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8001136:	1e4b      	subs	r3, r1, #1
 8001138:	4199      	sbcs	r1, r3
	REGADRERR = -1;
 800113a:	427f      	negs	r7, r7
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800113c:	0020      	movs	r0, r4
 800113e:	b2c9      	uxtb	r1, r1
	REGADRERR = -1;
 8001140:	6037      	str	r7, [r6, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8001142:	f7ff fb1a 	bl	800077a <acc_service_maximize_signal_attenuation_set>
	return *regptr;
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	0020      	movs	r0, r4
	REGADRERR = -1;
 800114a:	6037      	str	r7, [r6, #0]
	return *regptr;
 800114c:	58ef      	ldr	r7, [r5, r3]
 800114e:	f7fe ffe7 	bl	8000120 <acc_service_configuration_valid>
 8001152:	2800      	cmp	r0, #0
 8001154:	d14e      	bne.n	80011f4 <updateSparseConfig+0x1e0>
	REGADRERR = -1;
 8001156:	2301      	movs	r3, #1
 8001158:	425b      	negs	r3, r3
 800115a:	6033      	str	r3, [r6, #0]
 800115c:	0020      	movs	r0, r4
	return *regptr;
 800115e:	3385      	adds	r3, #133	; 0x85
 8001160:	58ef      	ldr	r7, [r5, r3]
 8001162:	f7fe ffdd 	bl	8000120 <acc_service_configuration_valid>
 8001166:	2800      	cmp	r0, #0
 8001168:	d134      	bne.n	80011d4 <updateSparseConfig+0x1c0>
	REGADRERR = -1;
 800116a:	2301      	movs	r3, #1
 800116c:	425b      	negs	r3, r3
 800116e:	6033      	str	r3, [r6, #0]
 8001170:	0020      	movs	r0, r4
	return *regptr;
 8001172:	3389      	adds	r3, #137	; 0x89
 8001174:	58ef      	ldr	r7, [r5, r3]
 8001176:	f7ff f82b 	bl	80001d0 <get_sparse_configuration>
 800117a:	2800      	cmp	r0, #0
 800117c:	d00d      	beq.n	800119a <updateSparseConfig+0x186>
 800117e:	2f00      	cmp	r7, #0
 8001180:	d01d      	beq.n	80011be <updateSparseConfig+0x1aa>
 8001182:	2f01      	cmp	r7, #1
 8001184:	d01b      	beq.n	80011be <updateSparseConfig+0x1aa>
 8001186:	2230      	movs	r2, #48	; 0x30
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <updateSparseConfig+0x248>)
 800118a:	5c9a      	ldrb	r2, [r3, r2]
 800118c:	2a00      	cmp	r2, #0
 800118e:	d004      	beq.n	800119a <updateSparseConfig+0x186>
 8001190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001192:	4a33      	ldr	r2, [pc, #204]	; (8001260 <updateSparseConfig+0x24c>)
 8001194:	4933      	ldr	r1, [pc, #204]	; (8001264 <updateSparseConfig+0x250>)
 8001196:	2001      	movs	r0, #1
 8001198:	4798      	blx	r3
	REGADRERR = -1;
 800119a:	2301      	movs	r3, #1
 800119c:	0020      	movs	r0, r4
 800119e:	425b      	negs	r3, r3
 80011a0:	6033      	str	r3, [r6, #0]
	return *regptr;
 80011a2:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 80011a4:	f7fe ffbc 	bl	8000120 <acc_service_configuration_valid>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d003      	beq.n	80011b4 <updateSparseConfig+0x1a0>
 80011ac:	b2a9      	uxth	r1, r5
 80011ae:	6920      	ldr	r0, [r4, #16]
 80011b0:	f7ff fa1c 	bl	80005ec <acc_base_configuration_downsampling_factor_set>
}
 80011b4:	bc1c      	pop	{r2, r3, r4}
 80011b6:	4690      	mov	r8, r2
 80011b8:	4699      	mov	r9, r3
 80011ba:	46a2      	mov	sl, r4
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011be:	6923      	ldr	r3, [r4, #16]
 80011c0:	0018      	movs	r0, r3
 80011c2:	4698      	mov	r8, r3
 80011c4:	f005 fb98 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d0e6      	beq.n	800119a <updateSparseConfig+0x186>
 80011cc:	236a      	movs	r3, #106	; 0x6a
 80011ce:	4642      	mov	r2, r8
 80011d0:	54d7      	strb	r7, [r2, r3]
 80011d2:	e7e2      	b.n	800119a <updateSparseConfig+0x186>
 80011d4:	6923      	ldr	r3, [r4, #16]
 80011d6:	0018      	movs	r0, r3
 80011d8:	4698      	mov	r8, r3
 80011da:	f005 fb8d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d0c3      	beq.n	800116a <updateSparseConfig+0x156>
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 80011e2:	0038      	movs	r0, r7
 80011e4:	f00e fb50 	bl	800f888 <__aeabi_ui2f>
 80011e8:	491b      	ldr	r1, [pc, #108]	; (8001258 <updateSparseConfig+0x244>)
 80011ea:	f00d fabd 	bl	800e768 <__aeabi_fdiv>
 80011ee:	4643      	mov	r3, r8
 80011f0:	6658      	str	r0, [r3, #100]	; 0x64
 80011f2:	e7ba      	b.n	800116a <updateSparseConfig+0x156>
 80011f4:	6923      	ldr	r3, [r4, #16]
 80011f6:	0018      	movs	r0, r3
 80011f8:	4698      	mov	r8, r3
 80011fa:	f005 fb7d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0a9      	beq.n	8001156 <updateSparseConfig+0x142>
 8001202:	2360      	movs	r3, #96	; 0x60
 8001204:	4642      	mov	r2, r8
 8001206:	52d7      	strh	r7, [r2, r3]
 8001208:	e7a5      	b.n	8001156 <updateSparseConfig+0x142>
 800120a:	0020      	movs	r0, r4
 800120c:	f7fe ffc8 	bl	80001a0 <acc_service_get_base_configuration>
 8001210:	f7ff fa8a 	bl	8000728 <acc_base_configuration_repetition_mode_on_demand_set>
 8001214:	e724      	b.n	8001060 <updateSparseConfig+0x4c>
	return *regptr;
 8001216:	68eb      	ldr	r3, [r5, #12]
 8001218:	0020      	movs	r0, r4
 800121a:	469a      	mov	sl, r3
 800121c:	f7fe ffc0 	bl	80001a0 <acc_service_get_base_configuration>
 8001220:	0007      	movs	r7, r0
 8001222:	f005 fb69 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001226:	2800      	cmp	r0, #0
 8001228:	d100      	bne.n	800122c <updateSparseConfig+0x218>
 800122a:	e719      	b.n	8001060 <updateSparseConfig+0x4c>
 800122c:	2303      	movs	r3, #3
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 800122e:	4650      	mov	r0, sl
 8001230:	713b      	strb	r3, [r7, #4]
 8001232:	f00e fb29 	bl	800f888 <__aeabi_ui2f>
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <updateSparseConfig+0x244>)
 8001238:	f00d fa96 	bl	800e768 <__aeabi_fdiv>
 800123c:	60b8      	str	r0, [r7, #8]
 800123e:	e70f      	b.n	8001060 <updateSparseConfig+0x4c>
 8001240:	0801c388 	.word	0x0801c388
 8001244:	0801c390 	.word	0x0801c390
 8001248:	0801c2f4 	.word	0x0801c2f4
 800124c:	0801c308 	.word	0x0801c308
 8001250:	2000051c 	.word	0x2000051c
 8001254:	200003b8 	.word	0x200003b8
 8001258:	447a0000 	.word	0x447a0000
 800125c:	200002b0 	.word	0x200002b0
 8001260:	0801c3a0 	.word	0x0801c3a0
 8001264:	0801bf12 	.word	0x0801bf12

08001268 <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	46d6      	mov	lr, sl
 800126c:	464f      	mov	r7, r9
 800126e:	4646      	mov	r6, r8
 8001270:	0004      	movs	r4, r0
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <data_malloc+0xe0>)
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001274:	b5c0      	push	{r6, r7, lr}
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001276:	0018      	movs	r0, r3
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001278:	000d      	movs	r5, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 800127a:	4699      	mov	r9, r3
 800127c:	f014 f84e 	bl	801531c <__wrap_printf>
 8001280:	0021      	movs	r1, r4
 8001282:	4832      	ldr	r0, [pc, #200]	; (800134c <data_malloc+0xe4>)
 8001284:	f014 f84a 	bl	801531c <__wrap_printf>
 8001288:	22d5      	movs	r2, #213	; 0xd5
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <data_malloc+0xe8>)
 800128c:	4f31      	ldr	r7, [pc, #196]	; (8001354 <data_malloc+0xec>)
 800128e:	0019      	movs	r1, r3
 8001290:	0052      	lsls	r2, r2, #1
 8001292:	0038      	movs	r0, r7
 8001294:	4698      	mov	r8, r3
 8001296:	f014 f841 	bl	801531c <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 800129a:	4648      	mov	r0, r9
 800129c:	f014 f83e 	bl	801531c <__wrap_printf>
 80012a0:	0029      	movs	r1, r5
 80012a2:	482d      	ldr	r0, [pc, #180]	; (8001358 <data_malloc+0xf0>)
 80012a4:	f014 f83a 	bl	801531c <__wrap_printf>
 80012a8:	22ac      	movs	r2, #172	; 0xac
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 80012aa:	1cae      	adds	r6, r5, #2
 80012ac:	4366      	muls	r6, r4
	DBG_PRINTLN("malloc bins: %d", bins);
 80012ae:	32ff      	adds	r2, #255	; 0xff
 80012b0:	4641      	mov	r1, r8
 80012b2:	0038      	movs	r0, r7
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 80012b4:	0076      	lsls	r6, r6, #1
	DBG_PRINTLN("malloc bins: %d", bins);
 80012b6:	f014 f831 	bl	801531c <__wrap_printf>
    data = (uint16_t **)malloc(len);
 80012ba:	0030      	movs	r0, r6
 80012bc:	f014 fbea 	bl	8015a94 <malloc>
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <data_malloc+0xf4>)
 80012c2:	469a      	mov	sl, r3
 80012c4:	6018      	str	r0, [r3, #0]
	if (data == NULL){
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d02e      	beq.n	8001328 <data_malloc+0xc0>
		DBG_PRINTLN("data buffer allociation success");
 80012ca:	4648      	mov	r0, r9
 80012cc:	f014 f826 	bl	801531c <__wrap_printf>
 80012d0:	4823      	ldr	r0, [pc, #140]	; (8001360 <data_malloc+0xf8>)
 80012d2:	f014 f823 	bl	801531c <__wrap_printf>
 80012d6:	22dc      	movs	r2, #220	; 0xdc
 80012d8:	4641      	mov	r1, r8
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	0038      	movs	r0, r7
 80012de:	f014 f81d 	bl	801531c <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 80012e2:	4648      	mov	r0, r9
 80012e4:	f014 f81a 	bl	801531c <__wrap_printf>
 80012e8:	0031      	movs	r1, r6
 80012ea:	481e      	ldr	r0, [pc, #120]	; (8001364 <data_malloc+0xfc>)
 80012ec:	f014 f816 	bl	801531c <__wrap_printf>
 80012f0:	22ba      	movs	r2, #186	; 0xba
 80012f2:	4641      	mov	r1, r8
 80012f4:	32ff      	adds	r2, #255	; 0xff
 80012f6:	0038      	movs	r0, r7
 80012f8:	f014 f810 	bl	801531c <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 80012fc:	4653      	mov	r3, sl
 80012fe:	00a2      	lsls	r2, r4, #2
 8001300:	681b      	ldr	r3, [r3, #0]
    for(uint16_t i = 0; i < r; i++){
 8001302:	2c00      	cmp	r4, #0
 8001304:	d00a      	beq.n	800131c <data_malloc+0xb4>
 8001306:	3c01      	subs	r4, #1
 8001308:	b2a0      	uxth	r0, r4
 800130a:	0080      	lsls	r0, r0, #2
 800130c:	1d1c      	adds	r4, r3, #4
 800130e:	006d      	lsls	r5, r5, #1
 8001310:	189a      	adds	r2, r3, r2
 8001312:	1900      	adds	r0, r0, r4
        data[i] = (ptr + c * i);
 8001314:	c304      	stmia	r3!, {r2}
 8001316:	1952      	adds	r2, r2, r5
    for(uint16_t i = 0; i < r; i++){
 8001318:	4298      	cmp	r0, r3
 800131a:	d1fb      	bne.n	8001314 <data_malloc+0xac>
	return 0;
 800131c:	2000      	movs	r0, #0
}
 800131e:	bc1c      	pop	{r2, r3, r4}
 8001320:	4690      	mov	r8, r2
 8001322:	4699      	mov	r9, r3
 8001324:	46a2      	mov	sl, r4
 8001326:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ERR_PRINTLN("data buffer allociation failed");
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <data_malloc+0x100>)
 800132a:	f013 fff7 	bl	801531c <__wrap_printf>
 800132e:	480f      	ldr	r0, [pc, #60]	; (800136c <data_malloc+0x104>)
 8001330:	f013 fff4 	bl	801531c <__wrap_printf>
 8001334:	22b6      	movs	r2, #182	; 0xb6
 8001336:	4641      	mov	r1, r8
 8001338:	32ff      	adds	r2, #255	; 0xff
 800133a:	0038      	movs	r0, r7
 800133c:	f013 ffee 	bl	801531c <__wrap_printf>
		return -1;
 8001340:	2001      	movs	r0, #1
 8001342:	4240      	negs	r0, r0
 8001344:	e7eb      	b.n	800131e <data_malloc+0xb6>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	0801c388 	.word	0x0801c388
 800134c:	0801c3c8 	.word	0x0801c3c8
 8001350:	0801c2f4 	.word	0x0801c2f4
 8001354:	0801c308 	.word	0x0801c308
 8001358:	0801c3dc 	.word	0x0801c3dc
 800135c:	200003ac 	.word	0x200003ac
 8001360:	0801c414 	.word	0x0801c414
 8001364:	0801c434 	.word	0x0801c434
 8001368:	0801c3ec 	.word	0x0801c3ec
 800136c:	0801c3f4 	.word	0x0801c3f4

08001370 <initRSS>:
void initRSS(void){
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	46de      	mov	lr, fp
 8001374:	4645      	mov	r5, r8
 8001376:	4657      	mov	r7, sl
 8001378:	464e      	mov	r6, r9
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 800137a:	4cd1      	ldr	r4, [pc, #836]	; (80016c0 <initRSS+0x350>)
void initRSS(void){
 800137c:	b5e0      	push	{r5, r6, r7, lr}
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 800137e:	0020      	movs	r0, r4
 8001380:	f013 ffcc 	bl	801531c <__wrap_printf>
 8001384:	4acf      	ldr	r2, [pc, #828]	; (80016c4 <initRSS+0x354>)
 8001386:	49d0      	ldr	r1, [pc, #832]	; (80016c8 <initRSS+0x358>)
 8001388:	48d0      	ldr	r0, [pc, #832]	; (80016cc <initRSS+0x35c>)
 800138a:	f013 ffc7 	bl	801531c <__wrap_printf>
 800138e:	22aa      	movs	r2, #170	; 0xaa
 8001390:	4dcf      	ldr	r5, [pc, #828]	; (80016d0 <initRSS+0x360>)
 8001392:	4ed0      	ldr	r6, [pc, #832]	; (80016d4 <initRSS+0x364>)
 8001394:	0052      	lsls	r2, r2, #1
 8001396:	0029      	movs	r1, r5
 8001398:	0030      	movs	r0, r6
 800139a:	f013 ffbf 	bl	801531c <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 800139e:	0020      	movs	r0, r4
 80013a0:	f013 ffbc 	bl	801531c <__wrap_printf>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2205      	movs	r2, #5
 80013a8:	2101      	movs	r1, #1
 80013aa:	48cb      	ldr	r0, [pc, #812]	; (80016d8 <initRSS+0x368>)
 80013ac:	f013 ffb6 	bl	801531c <__wrap_printf>
 80013b0:	2256      	movs	r2, #86	; 0x56
 80013b2:	0029      	movs	r1, r5
 80013b4:	32ff      	adds	r2, #255	; 0xff
 80013b6:	0030      	movs	r0, r6
 80013b8:	f013 ffb0 	bl	801531c <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 80013bc:	0020      	movs	r0, r4
 80013be:	f013 ffad 	bl	801531c <__wrap_printf>
 80013c2:	2300      	movs	r3, #0
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	48c4      	ldr	r0, [pc, #784]	; (80016dc <initRSS+0x36c>)
 80013ca:	f013 ffa7 	bl	801531c <__wrap_printf>
 80013ce:	22ab      	movs	r2, #171	; 0xab
 80013d0:	0029      	movs	r1, r5
 80013d2:	0052      	lsls	r2, r2, #1
 80013d4:	0030      	movs	r0, r6
 80013d6:	f013 ffa1 	bl	801531c <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 80013da:	2370      	movs	r3, #112	; 0x70
 80013dc:	4698      	mov	r8, r3
 80013de:	4fc0      	ldr	r7, [pc, #768]	; (80016e0 <initRSS+0x370>)
 80013e0:	2238      	movs	r2, #56	; 0x38
 80013e2:	44b8      	add	r8, r7
 80013e4:	49bf      	ldr	r1, [pc, #764]	; (80016e4 <initRSS+0x374>)
 80013e6:	4640      	mov	r0, r8
 80013e8:	f014 fb68 	bl	8015abc <memcpy>
 80013ec:	2328      	movs	r3, #40	; 0x28
 80013ee:	4cbe      	ldr	r4, [pc, #760]	; (80016e8 <initRSS+0x378>)
 80013f0:	5ce3      	ldrb	r3, [r4, r3]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <initRSS+0x88>
 80013f6:	e11d      	b.n	8001634 <initRSS+0x2c4>
 80013f8:	4bbc      	ldr	r3, [pc, #752]	; (80016ec <initRSS+0x37c>)
 80013fa:	2238      	movs	r2, #56	; 0x38
 80013fc:	0018      	movs	r0, r3
 80013fe:	4641      	mov	r1, r8
 8001400:	4699      	mov	r9, r3
 8001402:	f014 fb5b 	bl	8015abc <memcpy>
 8001406:	7a3b      	ldrb	r3, [r7, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <initRSS+0x9e>
 800140c:	e11e      	b.n	800164c <initRSS+0x2dc>
 800140e:	232a      	movs	r3, #42	; 0x2a
 8001410:	5ce3      	ldrb	r3, [r4, r3]
 8001412:	469a      	mov	sl, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d100      	bne.n	800141a <initRSS+0xaa>
 8001418:	e11d      	b.n	8001656 <initRSS+0x2e6>
 800141a:	2328      	movs	r3, #40	; 0x28
 800141c:	2201      	movs	r2, #1
 800141e:	54e2      	strb	r2, [r4, r3]
 8001420:	464a      	mov	r2, r9
 8001422:	3308      	adds	r3, #8
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d914      	bls.n	8001454 <initRSS+0xe4>
 800142a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800142c:	49b0      	ldr	r1, [pc, #704]	; (80016f0 <initRSS+0x380>)
 800142e:	4ab1      	ldr	r2, [pc, #708]	; (80016f4 <initRSS+0x384>)
 8001430:	2002      	movs	r0, #2
 8001432:	4798      	blx	r3
 8001434:	2328      	movs	r3, #40	; 0x28
	if (!acc_rss_activate(&radar_hal))
 8001436:	5ce3      	ldrb	r3, [r4, r3]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <initRSS+0xe4>
		ERR_PRINTLN("RSS activation fail");
 800143c:	48ae      	ldr	r0, [pc, #696]	; (80016f8 <initRSS+0x388>)
 800143e:	f013 ff6d 	bl	801531c <__wrap_printf>
 8001442:	48ae      	ldr	r0, [pc, #696]	; (80016fc <initRSS+0x38c>)
 8001444:	f013 ff6a 	bl	801531c <__wrap_printf>
 8001448:	225e      	movs	r2, #94	; 0x5e
 800144a:	0029      	movs	r1, r5
 800144c:	32ff      	adds	r2, #255	; 0xff
 800144e:	0030      	movs	r0, r6
 8001450:	f013 ff64 	bl	801531c <__wrap_printf>
 8001454:	2301      	movs	r3, #1
 8001456:	727b      	strb	r3, [r7, #9]
	sparse_config = acc_service_sparse_configuration_create();
 8001458:	f7ff fa56 	bl	8000908 <acc_service_sparse_configuration_create>
 800145c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (sparse_config == NULL)
 800145e:	2800      	cmp	r0, #0
 8001460:	d100      	bne.n	8001464 <initRSS+0xf4>
 8001462:	e178      	b.n	8001756 <initRSS+0x3e6>
	sparse_config_far = acc_service_sparse_configuration_create();
 8001464:	f7ff fa50 	bl	8000908 <acc_service_sparse_configuration_create>
 8001468:	6320      	str	r0, [r4, #48]	; 0x30
	if (sparse_config_far == NULL)
 800146a:	2800      	cmp	r0, #0
 800146c:	d100      	bne.n	8001470 <initRSS+0x100>
 800146e:	e165      	b.n	800173c <initRSS+0x3cc>
 8001470:	226d      	movs	r2, #109	; 0x6d
 8001472:	49a3      	ldr	r1, [pc, #652]	; (8001700 <initRSS+0x390>)
 8001474:	2090      	movs	r0, #144	; 0x90
 8001476:	f009 fde9 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 800147a:	1e05      	subs	r5, r0, #0
 800147c:	d100      	bne.n	8001480 <initRSS+0x110>
 800147e:	e0d4      	b.n	800162a <initRSS+0x2ba>
 8001480:	4ba0      	ldr	r3, [pc, #640]	; (8001704 <initRSS+0x394>)
 8001482:	0006      	movs	r6, r0
 8001484:	6003      	str	r3, [r0, #0]
 8001486:	4ba0      	ldr	r3, [pc, #640]	; (8001708 <initRSS+0x398>)
 8001488:	2700      	movs	r7, #0
 800148a:	6083      	str	r3, [r0, #8]
 800148c:	4b9f      	ldr	r3, [pc, #636]	; (800170c <initRSS+0x39c>)
 800148e:	361c      	adds	r6, #28
 8001490:	6143      	str	r3, [r0, #20]
 8001492:	2358      	movs	r3, #88	; 0x58
 8001494:	7107      	strb	r7, [r0, #4]
 8001496:	8303      	strh	r3, [r0, #24]
 8001498:	6106      	str	r6, [r0, #16]
 800149a:	2102      	movs	r1, #2
 800149c:	f7ff f97e 	bl	800079c <acc_service_profile_set>
 80014a0:	0028      	movs	r0, r5
 80014a2:	0039      	movs	r1, r7
 80014a4:	f7ff f969 	bl	800077a <acc_service_maximize_signal_attenuation_set>
 80014a8:	0030      	movs	r0, r6
 80014aa:	f005 fa25 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014ae:	42b8      	cmp	r0, r7
 80014b0:	d001      	beq.n	80014b6 <initRSS+0x146>
 80014b2:	4b97      	ldr	r3, [pc, #604]	; (8001710 <initRSS+0x3a0>)
 80014b4:	642b      	str	r3, [r5, #64]	; 0x40
 80014b6:	0030      	movs	r0, r6
 80014b8:	f005 fa1e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d001      	beq.n	80014c4 <initRSS+0x154>
 80014c0:	4b94      	ldr	r3, [pc, #592]	; (8001714 <initRSS+0x3a4>)
 80014c2:	646b      	str	r3, [r5, #68]	; 0x44
 80014c4:	0030      	movs	r0, r6
 80014c6:	f005 fa17 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d002      	beq.n	80014d4 <initRSS+0x164>
 80014ce:	234e      	movs	r3, #78	; 0x4e
 80014d0:	2206      	movs	r2, #6
 80014d2:	54ea      	strb	r2, [r5, r3]
 80014d4:	0030      	movs	r0, r6
 80014d6:	f005 fa0f 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d002      	beq.n	80014e4 <initRSS+0x174>
 80014de:	2358      	movs	r3, #88	; 0x58
 80014e0:	220a      	movs	r2, #10
 80014e2:	52ea      	strh	r2, [r5, r3]
 80014e4:	0030      	movs	r0, r6
 80014e6:	f005 fa07 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d001      	beq.n	80014f2 <initRSS+0x182>
 80014ee:	2301      	movs	r3, #1
 80014f0:	62ab      	str	r3, [r5, #40]	; 0x28
 80014f2:	0030      	movs	r0, r6
 80014f4:	f7ff f918 	bl	8000728 <acc_base_configuration_repetition_mode_on_demand_set>
 80014f8:	0030      	movs	r0, r6
 80014fa:	f005 f9fd 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d001      	beq.n	8001506 <initRSS+0x196>
 8001502:	2302      	movs	r3, #2
 8001504:	656b      	str	r3, [r5, #84]	; 0x54
 8001506:	0030      	movs	r0, r6
 8001508:	f005 f9f6 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800150c:	2800      	cmp	r0, #0
 800150e:	d002      	beq.n	8001516 <initRSS+0x1a6>
 8001510:	2348      	movs	r3, #72	; 0x48
 8001512:	2200      	movs	r2, #0
 8001514:	54ea      	strb	r2, [r5, r3]
 8001516:	0030      	movs	r0, r6
 8001518:	f005 f9ee 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800151c:	2800      	cmp	r0, #0
 800151e:	d002      	beq.n	8001526 <initRSS+0x1b6>
 8001520:	2362      	movs	r3, #98	; 0x62
 8001522:	2200      	movs	r2, #0
 8001524:	54ea      	strb	r2, [r5, r3]
 8001526:	0030      	movs	r0, r6
 8001528:	f005 f9e6 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800152c:	2800      	cmp	r0, #0
 800152e:	d002      	beq.n	8001536 <initRSS+0x1c6>
 8001530:	2363      	movs	r3, #99	; 0x63
 8001532:	2200      	movs	r2, #0
 8001534:	54ea      	strb	r2, [r5, r3]
 8001536:	0030      	movs	r0, r6
 8001538:	f005 f9de 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800153c:	2800      	cmp	r0, #0
 800153e:	d002      	beq.n	8001546 <initRSS+0x1d6>
 8001540:	2364      	movs	r3, #100	; 0x64
 8001542:	2200      	movs	r2, #0
 8001544:	54ea      	strb	r2, [r5, r3]
 8001546:	0030      	movs	r0, r6
 8001548:	f005 f9d6 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800154c:	2800      	cmp	r0, #0
 800154e:	d007      	beq.n	8001560 <initRSS+0x1f0>
 8001550:	2300      	movs	r3, #0
 8001552:	226b      	movs	r2, #107	; 0x6b
 8001554:	54ab      	strb	r3, [r5, r2]
 8001556:	3201      	adds	r2, #1
 8001558:	54ab      	strb	r3, [r5, r2]
 800155a:	336e      	adds	r3, #110	; 0x6e
 800155c:	3a2c      	subs	r2, #44	; 0x2c
 800155e:	52ea      	strh	r2, [r5, r3]
 8001560:	0030      	movs	r0, r6
 8001562:	f005 f9c9 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001566:	2800      	cmp	r0, #0
 8001568:	d002      	beq.n	8001570 <initRSS+0x200>
 800156a:	2372      	movs	r3, #114	; 0x72
 800156c:	22ff      	movs	r2, #255	; 0xff
 800156e:	52ea      	strh	r2, [r5, r3]
 8001570:	0030      	movs	r0, r6
 8001572:	f005 f9c1 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001576:	2800      	cmp	r0, #0
 8001578:	d002      	beq.n	8001580 <initRSS+0x210>
 800157a:	2374      	movs	r3, #116	; 0x74
 800157c:	2200      	movs	r2, #0
 800157e:	54ea      	strb	r2, [r5, r3]
 8001580:	0030      	movs	r0, r6
 8001582:	f005 f9b9 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001586:	2800      	cmp	r0, #0
 8001588:	d003      	beq.n	8001592 <initRSS+0x222>
 800158a:	2300      	movs	r3, #0
 800158c:	2276      	movs	r2, #118	; 0x76
 800158e:	54ab      	strb	r3, [r5, r2]
 8001590:	67ab      	str	r3, [r5, #120]	; 0x78
 8001592:	0030      	movs	r0, r6
 8001594:	2101      	movs	r1, #1
 8001596:	f7ff f829 	bl	80005ec <acc_base_configuration_downsampling_factor_set>
 800159a:	0030      	movs	r0, r6
 800159c:	f005 f9ac 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d002      	beq.n	80015aa <initRSS+0x23a>
 80015a4:	235a      	movs	r3, #90	; 0x5a
 80015a6:	220b      	movs	r2, #11
 80015a8:	52ea      	strh	r2, [r5, r3]
 80015aa:	0030      	movs	r0, r6
 80015ac:	f005 f9a4 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d002      	beq.n	80015ba <initRSS+0x24a>
 80015b4:	2365      	movs	r3, #101	; 0x65
 80015b6:	2201      	movs	r2, #1
 80015b8:	54ea      	strb	r2, [r5, r3]
 80015ba:	0030      	movs	r0, r6
 80015bc:	f005 f99c 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d001      	beq.n	80015c8 <initRSS+0x258>
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <initRSS+0x3a8>)
 80015c6:	62eb      	str	r3, [r5, #44]	; 0x2c
 80015c8:	0030      	movs	r0, r6
 80015ca:	f005 f995 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d004      	beq.n	80015dc <initRSS+0x26c>
 80015d2:	4b52      	ldr	r3, [pc, #328]	; (800171c <initRSS+0x3ac>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	632b      	str	r3, [r5, #48]	; 0x30
 80015d8:	2334      	movs	r3, #52	; 0x34
 80015da:	54ea      	strb	r2, [r5, r3]
 80015dc:	0030      	movs	r0, r6
 80015de:	f005 f98b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d002      	beq.n	80015ec <initRSS+0x27c>
 80015e6:	2338      	movs	r3, #56	; 0x38
 80015e8:	2201      	movs	r2, #1
 80015ea:	54ea      	strb	r2, [r5, r3]
 80015ec:	0030      	movs	r0, r6
 80015ee:	f005 f983 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80015f2:	2800      	cmp	r0, #0
 80015f4:	d002      	beq.n	80015fc <initRSS+0x28c>
 80015f6:	236a      	movs	r3, #106	; 0x6a
 80015f8:	2201      	movs	r2, #1
 80015fa:	54ea      	strb	r2, [r5, r3]
 80015fc:	0030      	movs	r0, r6
 80015fe:	f005 f97b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001602:	2800      	cmp	r0, #0
 8001604:	d003      	beq.n	800160e <initRSS+0x29e>
 8001606:	2296      	movs	r2, #150	; 0x96
 8001608:	2370      	movs	r3, #112	; 0x70
 800160a:	0152      	lsls	r2, r2, #5
 800160c:	52ea      	strh	r2, [r5, r3]
 800160e:	0030      	movs	r0, r6
 8001610:	f005 f972 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8001614:	2800      	cmp	r0, #0
 8001616:	d001      	beq.n	800161c <initRSS+0x2ac>
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <initRSS+0x3b0>)
 800161a:	61eb      	str	r3, [r5, #28]
    envelope_config = acc_service_envelope_configuration_create();
 800161c:	6365      	str	r5, [r4, #52]	; 0x34
}
 800161e:	bc3c      	pop	{r2, r3, r4, r5}
 8001620:	4690      	mov	r8, r2
 8001622:	4699      	mov	r9, r3
 8001624:	46a2      	mov	sl, r4
 8001626:	46ab      	mov	fp, r5
 8001628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    envelope_config = acc_service_envelope_configuration_create();
 800162a:	6360      	str	r0, [r4, #52]	; 0x34
		printf("envelope config creation fail");
 800162c:	483d      	ldr	r0, [pc, #244]	; (8001724 <initRSS+0x3b4>)
 800162e:	f013 fe75 	bl	801531c <__wrap_printf>
 8001632:	e7f4      	b.n	800161e <initRSS+0x2ae>
 8001634:	2230      	movs	r2, #48	; 0x30
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <initRSS+0x37c>)
 8001638:	5c9a      	ldrb	r2, [r3, r2]
 800163a:	2a01      	cmp	r2, #1
 800163c:	d800      	bhi.n	8001640 <initRSS+0x2d0>
 800163e:	e709      	b.n	8001454 <initRSS+0xe4>
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <initRSS+0x3b8>)
 8001644:	492a      	ldr	r1, [pc, #168]	; (80016f0 <initRSS+0x380>)
 8001646:	2002      	movs	r0, #2
 8001648:	4798      	blx	r3
 800164a:	e6f3      	b.n	8001434 <initRSS+0xc4>
 800164c:	2229      	movs	r2, #41	; 0x29
 800164e:	3301      	adds	r3, #1
 8001650:	723b      	strb	r3, [r7, #8]
 8001652:	54a3      	strb	r3, [r4, r2]
 8001654:	e6db      	b.n	800140e <initRSS+0x9e>
 8001656:	2254      	movs	r2, #84	; 0x54
 8001658:	4934      	ldr	r1, [pc, #208]	; (800172c <initRSS+0x3bc>)
 800165a:	32ff      	adds	r2, #255	; 0xff
 800165c:	2048      	movs	r0, #72	; 0x48
 800165e:	f004 fe8b 	bl	8006378 <acc_rss_integration_mem_alloc_debug>
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <initRSS+0x3c0>)
 8001664:	469b      	mov	fp, r3
 8001666:	6018      	str	r0, [r3, #0]
 8001668:	2800      	cmp	r0, #0
 800166a:	d11a      	bne.n	80016a2 <initRSS+0x332>
 800166c:	e021      	b.n	80016b2 <initRSS+0x342>
 800166e:	4652      	mov	r2, sl
 8001670:	2348      	movs	r3, #72	; 0x48
 8001672:	4353      	muls	r3, r2
 8001674:	465a      	mov	r2, fp
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	2100      	movs	r1, #0
 800167a:	4690      	mov	r8, r2
 800167c:	4498      	add	r8, r3
 800167e:	2244      	movs	r2, #68	; 0x44
 8001680:	4640      	mov	r0, r8
 8001682:	f011 fdf7 	bl	8013274 <memset>
 8001686:	2300      	movs	r3, #0
 8001688:	4642      	mov	r2, r8
 800168a:	2141      	movs	r1, #65	; 0x41
 800168c:	5453      	strb	r3, [r2, r1]
 800168e:	3901      	subs	r1, #1
 8001690:	5453      	strb	r3, [r2, r1]
 8001692:	4641      	mov	r1, r8
 8001694:	2242      	movs	r2, #66	; 0x42
 8001696:	548b      	strb	r3, [r1, r2]
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <initRSS+0x3c4>)
 800169a:	644b      	str	r3, [r1, #68]	; 0x44
 800169c:	2301      	movs	r3, #1
 800169e:	469c      	mov	ip, r3
 80016a0:	44e2      	add	sl, ip
 80016a2:	464b      	mov	r3, r9
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	459a      	cmp	sl, r3
 80016a8:	d3e1      	bcc.n	800166e <initRSS+0x2fe>
 80016aa:	232a      	movs	r3, #42	; 0x2a
 80016ac:	2201      	movs	r2, #1
 80016ae:	54e2      	strb	r2, [r4, r3]
 80016b0:	e6b3      	b.n	800141a <initRSS+0xaa>
 80016b2:	464b      	mov	r3, r9
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <initRSS+0x3c8>)
 80016b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b8:	490d      	ldr	r1, [pc, #52]	; (80016f0 <initRSS+0x380>)
 80016ba:	4798      	blx	r3
 80016bc:	e6ba      	b.n	8001434 <initRSS+0xc4>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	0801c2d0 	.word	0x0801c2d0
 80016c4:	0801c480 	.word	0x0801c480
 80016c8:	0801c48c 	.word	0x0801c48c
 80016cc:	0801c498 	.word	0x0801c498
 80016d0:	0801c2f4 	.word	0x0801c2f4
 80016d4:	0801c308 	.word	0x0801c308
 80016d8:	0801c4a8 	.word	0x0801c4a8
 80016dc:	0801c4c8 	.word	0x0801c4c8
 80016e0:	2000008c 	.word	0x2000008c
 80016e4:	08015b34 	.word	0x08015b34
 80016e8:	2000010c 	.word	0x2000010c
 80016ec:	200002b0 	.word	0x200002b0
 80016f0:	0801c538 	.word	0x0801c538
 80016f4:	0801c518 	.word	0x0801c518
 80016f8:	0801c3ec 	.word	0x0801c3ec
 80016fc:	0801c57c 	.word	0x0801c57c
 8001700:	0801c5b0 	.word	0x0801c5b0
 8001704:	acc09dd7 	.word	0xacc09dd7
 8001708:	0800069b 	.word	0x0800069b
 800170c:	080020bf 	.word	0x080020bf
 8001710:	3e4ccccd 	.word	0x3e4ccccd
 8001714:	3ecccccd 	.word	0x3ecccccd
 8001718:	3dcccccd 	.word	0x3dcccccd
 800171c:	3e99999a 	.word	0x3e99999a
 8001720:	080059a5 	.word	0x080059a5
 8001724:	0801c5d4 	.word	0x0801c5d4
 8001728:	0801c554 	.word	0x0801c554
 800172c:	0801c4e8 	.word	0x0801c4e8
 8001730:	200004c0 	.word	0x200004c0
 8001734:	ff800000 	.word	0xff800000
 8001738:	0801c53c 	.word	0x0801c53c
		ERR_PRINTLN("far sparse config creation fail");
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <initRSS+0x400>)
 800173e:	f013 fded 	bl	801531c <__wrap_printf>
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <initRSS+0x404>)
 8001744:	f013 fdea 	bl	801531c <__wrap_printf>
 8001748:	22b6      	movs	r2, #182	; 0xb6
 800174a:	0029      	movs	r1, r5
 800174c:	0052      	lsls	r2, r2, #1
 800174e:	0030      	movs	r0, r6
 8001750:	f013 fde4 	bl	801531c <__wrap_printf>
 8001754:	e68c      	b.n	8001470 <initRSS+0x100>
		ERR_PRINTLN("sparse config creation fail");
 8001756:	4806      	ldr	r0, [pc, #24]	; (8001770 <initRSS+0x400>)
 8001758:	f013 fde0 	bl	801531c <__wrap_printf>
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <initRSS+0x408>)
 800175e:	f013 fddd 	bl	801531c <__wrap_printf>
 8001762:	2266      	movs	r2, #102	; 0x66
 8001764:	0029      	movs	r1, r5
 8001766:	32ff      	adds	r2, #255	; 0xff
 8001768:	0030      	movs	r0, r6
 800176a:	f013 fdd7 	bl	801531c <__wrap_printf>
 800176e:	e679      	b.n	8001464 <initRSS+0xf4>
 8001770:	0801c3ec 	.word	0x0801c3ec
 8001774:	0801c590 	.word	0x0801c590
 8001778:	0801c594 	.word	0x0801c594

0800177c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(uint32_t baudrate)
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	46c6      	mov	lr, r8
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001780:	4c29      	ldr	r4, [pc, #164]	; (8001828 <MX_USART1_UART_Init+0xac>)
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <MX_USART1_UART_Init+0xb0>)
{
 8001784:	b500      	push	{lr}
  huart1.Instance = USART1;
 8001786:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001788:	230c      	movs	r3, #12
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800178a:	0026      	movs	r6, r4
 800178c:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800178e:	23c0      	movs	r3, #192	; 0xc0
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001790:	2500      	movs	r5, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001792:	009b      	lsls	r3, r3, #2
  huart1.Init.BaudRate = baudrate;
 8001794:	6060      	str	r0, [r4, #4]
 8001796:	367c      	adds	r6, #124	; 0x7c
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001798:	0020      	movs	r0, r4
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800179a:	61a3      	str	r3, [r4, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800179c:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179e:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a0:	6125      	str	r5, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a2:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a4:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017a6:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a8:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017aa:	f00a fafd 	bl	800bda8 <HAL_UART_Init.constprop.107>
 80017ae:	7833      	ldrb	r3, [r6, #0]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d017      	beq.n	80017e4 <MX_USART1_UART_Init+0x68>

  huart->gState = HAL_UART_STATE_BUSY;
 80017b4:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80017b6:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80017b8:	1d27      	adds	r7, r4, #4
 80017ba:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80017bc:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 80017be:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80017c0:	681a      	ldr	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80017c2:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80017c4:	4690      	mov	r8, r2
  __HAL_UART_DISABLE(huart);
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	438a      	bics	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	00d2      	lsls	r2, r2, #3
 80017d0:	08d2      	lsrs	r2, r2, #3
 80017d2:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80017d4:	f009 fd88 	bl	800b2e8 <UARTEx_SetNbDataToProcess.lto_priv.684>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80017d8:	4642      	mov	r2, r8
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80017de:	2320      	movs	r3, #32

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80017e0:	7035      	strb	r5, [r6, #0]
  huart->gState = HAL_UART_STATE_READY;
 80017e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80017e4:	0025      	movs	r5, r4
 80017e6:	357c      	adds	r5, #124	; 0x7c
 80017e8:	782b      	ldrb	r3, [r5, #0]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d016      	beq.n	800181c <MX_USART1_UART_Init+0xa0>

  huart->gState = HAL_UART_STATE_BUSY;
 80017ee:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80017f0:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80017f2:	1d26      	adds	r6, r4, #4
 80017f4:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80017f6:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 80017f8:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80017fa:	681f      	ldr	r7, [r3, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80017fc:	681a      	ldr	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80017fe:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001800:	438a      	bics	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	490a      	ldr	r1, [pc, #40]	; (8001830 <MX_USART1_UART_Init+0xb4>)
 8001808:	400a      	ands	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 800180c:	f009 fd6c 	bl	800b2e8 <UARTEx_SetNbDataToProcess.lto_priv.684>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	601f      	str	r7, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8001814:	2320      	movs	r3, #32
 8001816:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001818:	2300      	movs	r3, #0
 800181a:	702b      	strb	r3, [r5, #0]
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800181c:	0020      	movs	r0, r4
 800181e:	f009 fd97 	bl	800b350 <HAL_UARTEx_DisableFifoMode>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001822:	bc04      	pop	{r2}
 8001824:	4690      	mov	r8, r2
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	200005ac 	.word	0x200005ac
 800182c:	40013800 	.word	0x40013800
 8001830:	f1ffffff 	.word	0xf1ffffff

08001834 <changeUART1baud>:
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	2224      	movs	r2, #36	; 0x24

  __HAL_UART_DISABLE(huart);
 8001838:	2101      	movs	r1, #1
void changeUART1baud(uint32_t baudrate){
 800183a:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800183c:	4c23      	ldr	r4, [pc, #140]	; (80018cc <changeUART1baud+0x98>)
 800183e:	0005      	movs	r5, r0
 8001840:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	438a      	bics	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800184e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8001850:	609a      	str	r2, [r3, #8]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <changeUART1baud+0x9c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d01c      	beq.n	8001892 <changeUART1baud+0x5e>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8001858:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <changeUART1baud+0xa0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d010      	beq.n	8001880 <changeUART1baud+0x4c>
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800185e:	2300      	movs	r3, #0
 8001860:	2288      	movs	r2, #136	; 0x88
 8001862:	50a3      	str	r3, [r4, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8001864:	3a08      	subs	r2, #8
 8001866:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8001868:	3204      	adds	r2, #4
 800186a:	50a3      	str	r3, [r4, r2]
	MX_USART1_UART_Init(baudrate);
 800186c:	0028      	movs	r0, r5

  __HAL_UNLOCK(huart);
 800186e:	3a08      	subs	r2, #8
 8001870:	54a3      	strb	r3, [r4, r2]
 8001872:	f7ff ff83 	bl	800177c <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8001876:	2101      	movs	r1, #1
 8001878:	0020      	movs	r0, r4
 800187a:	f009 fa3b 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
}
 800187e:	bd70      	pop	{r4, r5, r6, pc}
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <changeUART1baud+0xa4>)
 8001882:	4916      	ldr	r1, [pc, #88]	; (80018dc <changeUART1baud+0xa8>)
 8001884:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001886:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8001888:	400b      	ands	r3, r1
 800188a:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800188c:	f009 f8ce 	bl	800aa2c <HAL_GPIO_DeInit.constprop.155>
 8001890:	e7e5      	b.n	800185e <changeUART1baud+0x2a>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8001892:	20f0      	movs	r0, #240	; 0xf0
    __HAL_RCC_USART1_CLK_DISABLE();
 8001894:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <changeUART1baud+0xa4>)
 8001896:	4912      	ldr	r1, [pc, #72]	; (80018e0 <changeUART1baud+0xac>)
 8001898:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800189a:	0140      	lsls	r0, r0, #5
    __HAL_RCC_USART1_CLK_DISABLE();
 800189c:	400b      	ands	r3, r1
 800189e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80018a0:	f009 f8c4 	bl	800aa2c <HAL_GPIO_DeInit.constprop.155>
    HAL_DMA_DeInit(huart->hdmatx);
 80018a4:	6f60      	ldr	r0, [r4, #116]	; 0x74
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80018a6:	2800      	cmp	r0, #0
 80018a8:	d001      	beq.n	80018ae <changeUART1baud+0x7a>
 80018aa:	f009 fec5 	bl	800b638 <HAL_DMA_DeInit.part.1>
    HAL_DMA_DeInit(huart->hdmarx);
 80018ae:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80018b0:	2800      	cmp	r0, #0
 80018b2:	d001      	beq.n	80018b8 <changeUART1baud+0x84>
 80018b4:	f009 fec0 	bl	800b638 <HAL_DMA_DeInit.part.1>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <changeUART1baud+0xb0>)
 80018be:	0509      	lsls	r1, r1, #20
 80018c0:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80018c6:	f3bf 8f6f 	isb	sy
 80018ca:	e7c8      	b.n	800185e <changeUART1baud+0x2a>
 80018cc:	200005ac 	.word	0x200005ac
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	fffdffff 	.word	0xfffdffff
 80018e0:	ffffbfff 	.word	0xffffbfff
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <SystemClock_Config>:
{
 80018e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018ea:	4eb5      	ldr	r6, [pc, #724]	; (8001bc0 <SystemClock_Config+0x2d8>)
 80018ec:	4ab5      	ldr	r2, [pc, #724]	; (8001bc4 <SystemClock_Config+0x2dc>)
 80018ee:	6833      	ldr	r3, [r6, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80018f0:	2006      	movs	r0, #6
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018f2:	401a      	ands	r2, r3
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4313      	orrs	r3, r2
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80018fa:	4fb3      	ldr	r7, [pc, #716]	; (8001bc8 <SystemClock_Config+0x2e0>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018fc:	6033      	str	r3, [r6, #0]
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	49b2      	ldr	r1, [pc, #712]	; (8001bcc <SystemClock_Config+0x2e4>)
 8001902:	4358      	muls	r0, r3
 8001904:	f00d fb74 	bl	800eff0 <__udivsi3>

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001908:	2380      	movs	r3, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800190a:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	6972      	ldr	r2, [r6, #20]
 8001910:	421a      	tst	r2, r3
 8001912:	d000      	beq.n	8001916 <SystemClock_Config+0x2e>
 8001914:	e086      	b.n	8001a24 <SystemClock_Config+0x13c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001916:	2338      	movs	r3, #56	; 0x38
 8001918:	4cad      	ldr	r4, [pc, #692]	; (8001bd0 <SystemClock_Config+0x2e8>)
 800191a:	4dae      	ldr	r5, [pc, #696]	; (8001bd4 <SystemClock_Config+0x2ec>)
 800191c:	68a2      	ldr	r2, [r4, #8]
 800191e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001920:	68e2      	ldr	r2, [r4, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001922:	2b10      	cmp	r3, #16
 8001924:	d000      	beq.n	8001928 <SystemClock_Config+0x40>
 8001926:	e082      	b.n	8001a2e <SystemClock_Config+0x146>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001928:	2103      	movs	r1, #3
 800192a:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800192c:	2a02      	cmp	r2, #2
 800192e:	d000      	beq.n	8001932 <SystemClock_Config+0x4a>
 8001930:	e080      	b.n	8001a34 <SystemClock_Config+0x14c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001932:	6822      	ldr	r2, [r4, #0]
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	49a8      	ldr	r1, [pc, #672]	; (8001bd8 <SystemClock_Config+0x2f0>)
 8001936:	6862      	ldr	r2, [r4, #4]
 8001938:	4011      	ands	r1, r2
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	01d2      	lsls	r2, r2, #7
 800193e:	430a      	orrs	r2, r1
 8001940:	6062      	str	r2, [r4, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <SystemClock_Config+0x72>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	4aa4      	ldr	r2, [pc, #656]	; (8001bdc <SystemClock_Config+0x2f4>)
 800194a:	4013      	ands	r3, r2
 800194c:	6023      	str	r3, [r4, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	4aa3      	ldr	r2, [pc, #652]	; (8001be0 <SystemClock_Config+0x2f8>)
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	0f5b      	lsrs	r3, r3, #29
 8001956:	40da      	lsrs	r2, r3
 8001958:	603a      	str	r2, [r7, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800195a:	4ba2      	ldr	r3, [pc, #648]	; (8001be4 <SystemClock_Config+0x2fc>)
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	f009 fe3d 	bl	800b5dc <HAL_InitTick>
 8001962:	2800      	cmp	r0, #0
 8001964:	d07c      	beq.n	8001a60 <SystemClock_Config+0x178>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001966:	2207      	movs	r2, #7
 8001968:	4b9f      	ldr	r3, [pc, #636]	; (8001be8 <SystemClock_Config+0x300>)
 800196a:	6819      	ldr	r1, [r3, #0]
 800196c:	4011      	ands	r1, r2
 800196e:	2901      	cmp	r1, #1
 8001970:	d80c      	bhi.n	800198c <SystemClock_Config+0xa4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	2102      	movs	r1, #2
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	4390      	bics	r0, r2
 8001978:	4301      	orrs	r1, r0
 800197a:	6019      	str	r1, [r3, #0]
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	499b      	ldr	r1, [pc, #620]	; (8001bec <SystemClock_Config+0x304>)
 800197e:	6828      	ldr	r0, [r5, #0]
 8001980:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001982:	6819      	ldr	r1, [r3, #0]
 8001984:	4011      	ands	r1, r2
 8001986:	2902      	cmp	r1, #2
 8001988:	d000      	beq.n	800198c <SystemClock_Config+0xa4>
 800198a:	e0b4      	b.n	8001af6 <SystemClock_Config+0x20e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800198c:	22e0      	movs	r2, #224	; 0xe0
 800198e:	68a1      	ldr	r1, [r4, #8]
 8001990:	01d2      	lsls	r2, r2, #7
 8001992:	430a      	orrs	r2, r1
 8001994:	60a2      	str	r2, [r4, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001996:	68a2      	ldr	r2, [r4, #8]
 8001998:	4995      	ldr	r1, [pc, #596]	; (8001bf0 <SystemClock_Config+0x308>)
 800199a:	400a      	ands	r2, r1
 800199c:	60a2      	str	r2, [r4, #8]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	6822      	ldr	r2, [r4, #0]
 80019a0:	0192      	lsls	r2, r2, #6
 80019a2:	d500      	bpl.n	80019a6 <SystemClock_Config+0xbe>
 80019a4:	e0ad      	b.n	8001b02 <SystemClock_Config+0x21a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	2280      	movs	r2, #128	; 0x80
 80019a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019aa:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2100      	movs	r1, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4213      	tst	r3, r2
 80019b0:	d107      	bne.n	80019c2 <SystemClock_Config+0xda>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      pwrclkchanged = SET;
 80019b4:	3101      	adds	r1, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4313      	orrs	r3, r2
 80019b8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80019ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019bc:	4013      	ands	r3, r2
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	6832      	ldr	r2, [r6, #0]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	6032      	str	r2, [r6, #0]
 80019cc:	6828      	ldr	r0, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ce:	6832      	ldr	r2, [r6, #0]
 80019d0:	421a      	tst	r2, r3
 80019d2:	d100      	bne.n	80019d6 <SystemClock_Config+0xee>
 80019d4:	e0d5      	b.n	8001b82 <SystemClock_Config+0x29a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019d6:	22c0      	movs	r2, #192	; 0xc0
 80019d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019de:	d010      	beq.n	8001a02 <SystemClock_Config+0x11a>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00c      	beq.n	8001a02 <SystemClock_Config+0x11a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019e8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019ea:	4a82      	ldr	r2, [pc, #520]	; (8001bf4 <SystemClock_Config+0x30c>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019ec:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019ee:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0252      	lsls	r2, r2, #9
 80019f4:	4302      	orrs	r2, r0
 80019f6:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80019f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019fa:	487f      	ldr	r0, [pc, #508]	; (8001bf8 <SystemClock_Config+0x310>)
 80019fc:	4002      	ands	r2, r0
 80019fe:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a00:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a02:	07db      	lsls	r3, r3, #31
 8001a04:	d506      	bpl.n	8001a14 <SystemClock_Config+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	2202      	movs	r2, #2
 8001a08:	6828      	ldr	r0, [r5, #0]
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	4e78      	ldr	r6, [pc, #480]	; (8001bec <SystemClock_Config+0x304>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a0e:	4213      	tst	r3, r2
 8001a10:	d100      	bne.n	8001a14 <SystemClock_Config+0x12c>
 8001a12:	e0ce      	b.n	8001bb2 <SystemClock_Config+0x2ca>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a14:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <SystemClock_Config+0x30c>)
 8001a18:	401a      	ands	r2, r3
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001a22:	e0b3      	b.n	8001b8c <SystemClock_Config+0x2a4>
    {
      if(wait_loop_index != 0U)
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d100      	bne.n	8001a2a <SystemClock_Config+0x142>
 8001a28:	e775      	b.n	8001916 <SystemClock_Config+0x2e>
      {
        wait_loop_index--;
 8001a2a:	3801      	subs	r0, #1
 8001a2c:	e76f      	b.n	800190e <SystemClock_Config+0x26>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d100      	bne.n	8001a34 <SystemClock_Config+0x14c>
 8001a32:	e77e      	b.n	8001932 <SystemClock_Config+0x4a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	4a69      	ldr	r2, [pc, #420]	; (8001bdc <SystemClock_Config+0x2f4>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_HSI_ENABLE();
 8001a46:	6023      	str	r3, [r4, #0]
 8001a48:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4a:	00d2      	lsls	r2, r2, #3
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	4213      	tst	r3, r2
 8001a50:	d037      	beq.n	8001ac2 <SystemClock_Config+0x1da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <SystemClock_Config+0x2f0>)
 8001a56:	401a      	ands	r2, r3
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	01db      	lsls	r3, r3, #7
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	6063      	str	r3, [r4, #4]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a60:	2238      	movs	r2, #56	; 0x38
 8001a62:	68a3      	ldr	r3, [r4, #8]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b18      	cmp	r3, #24
 8001a68:	d130      	bne.n	8001acc <SystemClock_Config+0x1e4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a6a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a6c:	2238      	movs	r2, #56	; 0x38
 8001a6e:	68a3      	ldr	r3, [r4, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d03d      	beq.n	8001af2 <SystemClock_Config+0x20a>
        __HAL_RCC_PLL_DISABLE();
 8001a76:	6823      	ldr	r3, [r4, #0]
 8001a78:	4a60      	ldr	r2, [pc, #384]	; (8001bfc <SystemClock_Config+0x314>)
 8001a7a:	4013      	ands	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	6023      	str	r3, [r4, #0]
 8001a80:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a82:	0492      	lsls	r2, r2, #18
 8001a84:	6823      	ldr	r3, [r4, #0]
 8001a86:	4213      	tst	r3, r2
 8001a88:	d12e      	bne.n	8001ae8 <SystemClock_Config+0x200>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	4a5c      	ldr	r2, [pc, #368]	; (8001c00 <SystemClock_Config+0x318>)
 8001a8e:	401a      	ands	r2, r3
 8001a90:	4b5c      	ldr	r3, [pc, #368]	; (8001c04 <SystemClock_Config+0x31c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	045b      	lsls	r3, r3, #17
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	68e2      	ldr	r2, [r4, #12]
 8001aa4:	055b      	lsls	r3, r3, #21
 8001aa6:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa8:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001aaa:	60e3      	str	r3, [r4, #12]
 8001aac:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	0492      	lsls	r2, r2, #18
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	4213      	tst	r3, r2
 8001ab4:	d000      	beq.n	8001ab8 <SystemClock_Config+0x1d0>
 8001ab6:	e756      	b.n	8001966 <SystemClock_Config+0x7e>
 8001ab8:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aba:	1a5b      	subs	r3, r3, r1
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d9f7      	bls.n	8001ab0 <SystemClock_Config+0x1c8>
 8001ac0:	e751      	b.n	8001966 <SystemClock_Config+0x7e>
 8001ac2:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac4:	1a5b      	subs	r3, r3, r1
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d9c0      	bls.n	8001a4c <SystemClock_Config+0x164>
 8001aca:	e74c      	b.n	8001966 <SystemClock_Config+0x7e>
        __HAL_RCC_LSI_ENABLE();
 8001acc:	2301      	movs	r3, #1
 8001ace:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ad0:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad2:	2202      	movs	r2, #2
        __HAL_RCC_LSI_ENABLE();
 8001ad4:	6623      	str	r3, [r4, #96]	; 0x60
 8001ad6:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001ada:	4213      	tst	r3, r2
 8001adc:	d1c6      	bne.n	8001a6c <SystemClock_Config+0x184>
 8001ade:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	1a5b      	subs	r3, r3, r1
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d9f8      	bls.n	8001ad8 <SystemClock_Config+0x1f0>
 8001ae6:	e73e      	b.n	8001966 <SystemClock_Config+0x7e>
 8001ae8:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	1a5b      	subs	r3, r3, r1
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d9c9      	bls.n	8001a84 <SystemClock_Config+0x19c>
 8001af0:	e739      	b.n	8001966 <SystemClock_Config+0x7e>
        temp_pllckcfg = RCC->PLLCFGR;
 8001af2:	68e3      	ldr	r3, [r4, #12]
 8001af4:	e737      	b.n	8001966 <SystemClock_Config+0x7e>
 8001af6:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	1a09      	subs	r1, r1, r0
 8001afa:	4561      	cmp	r1, ip
 8001afc:	d800      	bhi.n	8001b00 <SystemClock_Config+0x218>
 8001afe:	e740      	b.n	8001982 <SystemClock_Config+0x9a>
 8001b00:	e751      	b.n	80019a6 <SystemClock_Config+0xbe>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b02:	2107      	movs	r1, #7
 8001b04:	68a2      	ldr	r2, [r4, #8]
 8001b06:	438a      	bics	r2, r1
 8001b08:	0011      	movs	r1, r2
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60a2      	str	r2, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	4a36      	ldr	r2, [pc, #216]	; (8001bec <SystemClock_Config+0x304>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	2138      	movs	r1, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	4694      	mov	ip, r2
 8001b16:	6828      	ldr	r0, [r5, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	68a2      	ldr	r2, [r4, #8]
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	2a10      	cmp	r2, #16
 8001b1e:	d11a      	bne.n	8001b56 <SystemClock_Config+0x26e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	3a09      	subs	r2, #9
 8001b24:	4011      	ands	r1, r2
 8001b26:	2902      	cmp	r1, #2
 8001b28:	d81a      	bhi.n	8001b60 <SystemClock_Config+0x278>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b2a:	68a3      	ldr	r3, [r4, #8]
 8001b2c:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <SystemClock_Config+0x320>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b32:	f00a f801 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	4a34      	ldr	r2, [pc, #208]	; (8001c0c <SystemClock_Config+0x324>)
 8001b3a:	051b      	lsls	r3, r3, #20
 8001b3c:	0f1b      	lsrs	r3, r3, #28
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	18d3      	adds	r3, r2, r3
 8001b42:	221f      	movs	r2, #31
 8001b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b46:	4013      	ands	r3, r2
 8001b48:	40d8      	lsrs	r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <SystemClock_Config+0x2fc>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b4c:	6038      	str	r0, [r7, #0]
  return HAL_InitTick(uwTickPrio);
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f009 fd44 	bl	800b5dc <HAL_InitTick>
 8001b54:	e727      	b.n	80019a6 <SystemClock_Config+0xbe>
 8001b56:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	1a12      	subs	r2, r2, r0
 8001b5a:	4562      	cmp	r2, ip
 8001b5c:	d9dc      	bls.n	8001b18 <SystemClock_Config+0x230>
 8001b5e:	e722      	b.n	80019a6 <SystemClock_Config+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b60:	2102      	movs	r1, #2
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	4390      	bics	r0, r2
 8001b66:	4301      	orrs	r1, r0
 8001b68:	6019      	str	r1, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	4920      	ldr	r1, [pc, #128]	; (8001bec <SystemClock_Config+0x304>)
 8001b6c:	6828      	ldr	r0, [r5, #0]
 8001b6e:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	4011      	ands	r1, r2
 8001b74:	2902      	cmp	r1, #2
 8001b76:	d0d8      	beq.n	8001b2a <SystemClock_Config+0x242>
 8001b78:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	1a09      	subs	r1, r1, r0
 8001b7c:	4561      	cmp	r1, ip
 8001b7e:	d9f7      	bls.n	8001b70 <SystemClock_Config+0x288>
 8001b80:	e711      	b.n	80019a6 <SystemClock_Config+0xbe>
 8001b82:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b84:	1a12      	subs	r2, r2, r0
 8001b86:	2a02      	cmp	r2, #2
 8001b88:	d800      	bhi.n	8001b8c <SystemClock_Config+0x2a4>
 8001b8a:	e720      	b.n	80019ce <SystemClock_Config+0xe6>
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8c:	2901      	cmp	r1, #1
 8001b8e:	d103      	bne.n	8001b98 <SystemClock_Config+0x2b0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <SystemClock_Config+0x328>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	63e3      	str	r3, [r4, #60]	; 0x3c
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b98:	2203      	movs	r2, #3
 8001b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ba0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ba2:	3209      	adds	r2, #9
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ba8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <SystemClock_Config+0x32c>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	6563      	str	r3, [r4, #84]	; 0x54
}
 8001bb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001bb2:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	1a1b      	subs	r3, r3, r0
 8001bb6:	42b3      	cmp	r3, r6
 8001bb8:	d800      	bhi.n	8001bbc <SystemClock_Config+0x2d4>
 8001bba:	e727      	b.n	8001a0c <SystemClock_Config+0x124>
 8001bbc:	e7e6      	b.n	8001b8c <SystemClock_Config+0x2a4>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	fffff9ff 	.word	0xfffff9ff
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	000f4240 	.word	0x000f4240
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	200002ac 	.word	0x200002ac
 8001bd8:	ffff80ff 	.word	0xffff80ff
 8001bdc:	ffffc7ff 	.word	0xffffc7ff
 8001be0:	00f42400 	.word	0x00f42400
 8001be4:	20000004 	.word	0x20000004
 8001be8:	40022000 	.word	0x40022000
 8001bec:	00001388 	.word	0x00001388
 8001bf0:	fffff0ff 	.word	0xfffff0ff
 8001bf4:	fffffcff 	.word	0xfffffcff
 8001bf8:	fffeffff 	.word	0xfffeffff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	11c1808c 	.word	0x11c1808c
 8001c04:	22020802 	.word	0x22020802
 8001c08:	ffff8fff 	.word	0xffff8fff
 8001c0c:	08015b34 	.word	0x08015b34
 8001c10:	efffffff 	.word	0xefffffff
 8001c14:	ffffcfff 	.word	0xffffcfff

08001c18 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8001c18:	b40c      	push	{r2, r3}
 8001c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1c:	464f      	mov	r7, r9
 8001c1e:	4646      	mov	r6, r8
 8001c20:	46d6      	mov	lr, sl
 8001c22:	b5c0      	push	{r6, r7, lr}
 8001c24:	b0ac      	sub	sp, #176	; 0xb0
 8001c26:	ab34      	add	r3, sp, #208	; 0xd0
 8001c28:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001c2a:	ad06      	add	r5, sp, #24
{
 8001c2c:	0006      	movs	r6, r0
 8001c2e:	4689      	mov	r9, r1
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001c30:	0028      	movs	r0, r5
 8001c32:	2196      	movs	r1, #150	; 0x96
	va_start(ap, format);
 8001c34:	9305      	str	r3, [sp, #20]
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 8001c36:	f013 fb93 	bl	8015360 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 8001c3a:	2895      	cmp	r0, #149	; 0x95
 8001c3c:	dd06      	ble.n	8001c4c <acc_integration_log+0x34>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 8001c3e:	23aa      	movs	r3, #170	; 0xaa
 8001c40:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <acc_integration_log+0xac>)
 8001c42:	446b      	add	r3, sp
 8001c44:	801a      	strh	r2, [r3, #0]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001c46:	222e      	movs	r2, #46	; 0x2e
 8001c48:	ab2b      	add	r3, sp, #172	; 0xac
 8001c4a:	801a      	strh	r2, [r3, #0]
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <acc_integration_log+0xb0>)

	uint32_t time_ms = acc_integration_get_time();
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001c4e:	491f      	ldr	r1, [pc, #124]	; (8001ccc <acc_integration_log+0xb4>)
 8001c50:	681c      	ldr	r4, [r3, #0]
 8001c52:	0020      	movs	r0, r4
 8001c54:	f00d f9cc 	bl	800eff0 <__udivsi3>
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001c58:	491d      	ldr	r1, [pc, #116]	; (8001cd0 <acc_integration_log+0xb8>)
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001c5a:	0007      	movs	r7, r0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001c5c:	0020      	movs	r0, r4
 8001c5e:	f00d f9c7 	bl	800eff0 <__udivsi3>
 8001c62:	213c      	movs	r1, #60	; 0x3c
 8001c64:	f00d fa4a 	bl	800f0fc <__aeabi_uidivmod>
 8001c68:	4688      	mov	r8, r1
	unsigned int seconds      = timestamp / 1000 % 60;
 8001c6a:	21fa      	movs	r1, #250	; 0xfa
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	0089      	lsls	r1, r1, #2
 8001c70:	f00d f9be 	bl	800eff0 <__udivsi3>
 8001c74:	213c      	movs	r1, #60	; 0x3c
 8001c76:	f00d fa41 	bl	800f0fc <__aeabi_uidivmod>
 8001c7a:	468a      	mov	sl, r1
	unsigned int milliseconds = timestamp % 1000;
 8001c7c:	21fa      	movs	r1, #250	; 0xfa
 8001c7e:	0020      	movs	r0, r4
 8001c80:	0089      	lsls	r1, r1, #2
 8001c82:	f00d fa3b 	bl	800f0fc <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001c86:	233f      	movs	r3, #63	; 0x3f
 8001c88:	2e04      	cmp	r6, #4
 8001c8a:	d801      	bhi.n	8001c90 <acc_integration_log+0x78>
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <acc_integration_log+0xbc>)
 8001c8e:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001c90:	464a      	mov	r2, r9
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	9202      	str	r2, [sp, #8]
 8001c96:	9100      	str	r1, [sp, #0]
 8001c98:	4653      	mov	r3, sl
 8001c9a:	4642      	mov	r2, r8
 8001c9c:	0039      	movs	r1, r7
 8001c9e:	9503      	str	r5, [sp, #12]
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <acc_integration_log+0xc0>)
 8001ca2:	f013 fb3b 	bl	801531c <__wrap_printf>

	fflush(stdout);
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <acc_integration_log+0xc4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6898      	ldr	r0, [r3, #8]
 8001cac:	f011 f9d4 	bl	8013058 <fflush>

	va_end(ap);
}
 8001cb0:	b02c      	add	sp, #176	; 0xb0
 8001cb2:	bc1c      	pop	{r2, r3, r4}
 8001cb4:	4690      	mov	r8, r2
 8001cb6:	4699      	mov	r9, r3
 8001cb8:	46a2      	mov	sl, r4
 8001cba:	bcf0      	pop	{r4, r5, r6, r7}
 8001cbc:	bc08      	pop	{r3}
 8001cbe:	b002      	add	sp, #8
 8001cc0:	4718      	bx	r3
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	00002e2e 	.word	0x00002e2e
 8001cc8:	200002ac 	.word	0x200002ac
 8001ccc:	0036ee80 	.word	0x0036ee80
 8001cd0:	0000ea60 	.word	0x0000ea60
 8001cd4:	0801c121 	.word	0x0801c121
 8001cd8:	0801c0ff 	.word	0x0801c0ff
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <acc_hal_integration_sensor_hibernate_exit>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce0:	2280      	movs	r2, #128	; 0x80


static void acc_hal_integration_sensor_hibernate_exit(acc_sensor_id_t sensor_id)
{
 8001ce2:	b510      	push	{r4, lr}
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <acc_hal_integration_sensor_hibernate_exit+0x1c>)
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	619a      	str	r2, [r3, #24]
	(void)sensor_id;  // Ignore parameter sensor_id

	// Turn on sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f7fe fc22 	bl	8000534 <pulse_hibernate_pin>

	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 8001cf0:	f008 fe7a 	bl	800a9e8 <acc_integration_sleep_us.constprop.158>

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f7fe fc1d 	bl	8000534 <pulse_hibernate_pin>
}
 8001cfa:	bd10      	pop	{r4, pc}
 8001cfc:	50000400 	.word	0x50000400

08001d00 <acc_hal_integration_sensor_power_off>:
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d00:	2201      	movs	r2, #1
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <acc_hal_integration_sensor_power_off+0x20>)
{
 8001d04:	b510      	push	{r4, lr}
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28
 8001d0a:	22a0      	movs	r2, #160	; 0xa0
 8001d0c:	0049      	lsls	r1, r1, #1
 8001d0e:	05d2      	lsls	r2, r2, #23
 8001d10:	6291      	str	r1, [r2, #40]	; 0x28
 8001d12:	2280      	movs	r2, #128	; 0x80
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
	acc_integration_sleep_us(2000);
 8001d18:	f008 fe66 	bl	800a9e8 <acc_integration_sleep_us.constprop.158>
}
 8001d1c:	bd10      	pop	{r4, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	50000400 	.word	0x50000400

08001d24 <acc_hal_integration_sensor_power_on>:
 8001d24:	2210      	movs	r2, #16
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <acc_hal_integration_sensor_power_on+0x24>)
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d2c:	32f1      	adds	r2, #241	; 0xf1
 8001d2e:	32ff      	adds	r2, #255	; 0xff
 8001d30:	619a      	str	r2, [r3, #24]
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	22a0      	movs	r2, #160	; 0xa0
 8001d36:	0049      	lsls	r1, r1, #1
 8001d38:	05d2      	lsls	r2, r2, #23
 8001d3a:	6191      	str	r1, [r2, #24]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	619a      	str	r2, [r3, #24]
	acc_integration_sleep_us(2000);
 8001d40:	f008 fe52 	bl	800a9e8 <acc_integration_sleep_us.constprop.158>
}
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	50000400 	.word	0x50000400

08001d4c <acc_hal_integration_sensor_transfer>:
{
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	4657      	mov	r7, sl
 8001d50:	4645      	mov	r5, r8
 8001d52:	46de      	mov	lr, fp
 8001d54:	464e      	mov	r6, r9

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d56:	4cbb      	ldr	r4, [pc, #748]	; (8002044 <acc_hal_integration_sensor_transfer+0x2f8>)
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d58:	2001      	movs	r0, #1
 8001d5a:	0023      	movs	r3, r4
 8001d5c:	b5e0      	push	{r5, r6, r7, lr}
 8001d5e:	4fba      	ldr	r7, [pc, #744]	; (8002048 <acc_hal_integration_sensor_transfer+0x2fc>)
 8001d60:	335c      	adds	r3, #92	; 0x5c
 8001d62:	62b8      	str	r0, [r7, #40]	; 0x28
 8001d64:	781d      	ldrb	r5, [r3, #0]
 8001d66:	b083      	sub	sp, #12
 8001d68:	9701      	str	r7, [sp, #4]
 8001d6a:	4285      	cmp	r5, r0
 8001d6c:	d100      	bne.n	8001d70 <acc_hal_integration_sensor_transfer+0x24>
 8001d6e:	e0f3      	b.n	8001f58 <acc_hal_integration_sensor_transfer+0x20c>
 8001d70:	7018      	strb	r0, [r3, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d72:	0023      	movs	r3, r4
 8001d74:	4db5      	ldr	r5, [pc, #724]	; (800204c <acc_hal_integration_sensor_transfer+0x300>)
 8001d76:	335d      	adds	r3, #93	; 0x5d
 8001d78:	682e      	ldr	r6, [r5, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001d7c:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 8001d7e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001d80:	4684      	mov	ip, r0
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d00b      	beq.n	8001d9e <acc_hal_integration_sensor_transfer+0x52>
 8001d86:	2082      	movs	r0, #130	; 0x82
 8001d88:	0040      	lsls	r0, r0, #1
 8001d8a:	4584      	cmp	ip, r0
 8001d8c:	d000      	beq.n	8001d90 <acc_hal_integration_sensor_transfer+0x44>
 8001d8e:	e0dc      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d90:	68a0      	ldr	r0, [r4, #8]
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d000      	beq.n	8001d98 <acc_hal_integration_sensor_transfer+0x4c>
 8001d96:	e0d8      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d000      	beq.n	8001d9e <acc_hal_integration_sensor_transfer+0x52>
 8001d9c:	e0d5      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d9e:	2900      	cmp	r1, #0
 8001da0:	d100      	bne.n	8001da4 <acc_hal_integration_sensor_transfer+0x58>
 8001da2:	e0d2      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8001da4:	b292      	uxth	r2, r2
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d100      	bne.n	8001dac <acc_hal_integration_sensor_transfer+0x60>
 8001daa:	e0ce      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001dac:	0023      	movs	r3, r4
 8001dae:	335d      	adds	r3, #93	; 0x5d
 8001db0:	7818      	ldrb	r0, [r3, #0]
 8001db2:	2804      	cmp	r0, #4
 8001db4:	d001      	beq.n	8001dba <acc_hal_integration_sensor_transfer+0x6e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001db6:	2005      	movs	r0, #5
 8001db8:	7018      	strb	r0, [r3, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8001dbc:	0020      	movs	r0, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dbe:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001dc0:	3008      	adds	r0, #8
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001dc2:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001dc4:	6523      	str	r3, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001dc6:	68e3      	ldr	r3, [r4, #12]
  hspi->RxXferCount = Size;
 8001dc8:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001dca:	1da0      	adds	r0, r4, #6
 8001dcc:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001dce:	4698      	mov	r8, r3
 8001dd0:	20e0      	movs	r0, #224	; 0xe0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dd2:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dd4:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001dd6:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001dd8:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8001dda:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001ddc:	00c0      	lsls	r0, r0, #3
 8001dde:	4580      	cmp	r8, r0
 8001de0:	d801      	bhi.n	8001de6 <acc_hal_integration_sensor_transfer+0x9a>
 8001de2:	2a01      	cmp	r2, #1
 8001de4:	d06c      	beq.n	8001ec0 <acc_hal_integration_sensor_transfer+0x174>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001de6:	6858      	ldr	r0, [r3, #4]
 8001de8:	4f99      	ldr	r7, [pc, #612]	; (8002050 <acc_hal_integration_sensor_transfer+0x304>)
 8001dea:	4038      	ands	r0, r7
 8001dec:	6058      	str	r0, [r3, #4]
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	4681      	mov	r9, r0
 8001df2:	2040      	movs	r0, #64	; 0x40
 8001df4:	464f      	mov	r7, r9
 8001df6:	4207      	tst	r7, r0
 8001df8:	d102      	bne.n	8001e00 <acc_hal_integration_sensor_transfer+0xb4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfa:	681f      	ldr	r7, [r3, #0]
 8001dfc:	4338      	orrs	r0, r7
 8001dfe:	6018      	str	r0, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e00:	20e0      	movs	r0, #224	; 0xe0
 8001e02:	00c0      	lsls	r0, r0, #3
 8001e04:	4580      	cmp	r8, r0
 8001e06:	d800      	bhi.n	8001e0a <acc_hal_integration_sensor_transfer+0xbe>
 8001e08:	e0b0      	b.n	8001f6c <acc_hal_integration_sensor_transfer+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e0a:	4660      	mov	r0, ip
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d001      	beq.n	8001e14 <acc_hal_integration_sensor_transfer+0xc8>
 8001e10:	2a01      	cmp	r2, #1
 8001e12:	d107      	bne.n	8001e24 <acc_hal_integration_sensor_transfer+0xd8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e14:	880a      	ldrh	r2, [r1, #0]
 8001e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e18:	1c8a      	adds	r2, r1, #2
 8001e1a:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001e1c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001e1e:	3a01      	subs	r2, #1
 8001e20:	b292      	uxth	r2, r2
 8001e22:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8001e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e26:	2708      	movs	r7, #8
 8001e28:	9200      	str	r2, [sp, #0]
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001e2a:	2200      	movs	r2, #0
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e2c:	46b8      	mov	r8, r7
        txallowed = 1U;
 8001e2e:	4694      	mov	ip, r2
 8001e30:	4691      	mov	r9, r2
 8001e32:	3201      	adds	r2, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e34:	4693      	mov	fp, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e36:	44a0      	add	r8, r4
 8001e38:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001e3a:	2800      	cmp	r0, #0
 8001e3c:	d148      	bne.n	8001ed0 <acc_hal_integration_sensor_transfer+0x184>
 8001e3e:	4640      	mov	r0, r8
 8001e40:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d144      	bne.n	8001ed0 <acc_hal_integration_sensor_transfer+0x184>
 8001e46:	464b      	mov	r3, r9
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <acc_hal_integration_sensor_transfer+0x104>
 8001e4c:	9b00      	ldr	r3, [sp, #0]
 8001e4e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001e50:	4663      	mov	r3, ip
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d000      	beq.n	8001e58 <acc_hal_integration_sensor_transfer+0x10c>
 8001e56:	6421      	str	r1, [r4, #64]	; 0x40
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8001e58:	22c0      	movs	r2, #192	; 0xc0
 8001e5a:	6821      	ldr	r1, [r4, #0]
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e5c:	487d      	ldr	r0, [pc, #500]	; (8002054 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8001e5e:	0152      	lsls	r2, r2, #5
 8001e60:	688b      	ldr	r3, [r1, #8]
 8001e62:	4213      	tst	r3, r2
 8001e64:	d007      	beq.n	8001e76 <acc_hal_integration_sensor_transfer+0x12a>
 8001e66:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e68:	1b9b      	subs	r3, r3, r6
 8001e6a:	4283      	cmp	r3, r0
 8001e6c:	d9f8      	bls.n	8001e60 <acc_hal_integration_sensor_transfer+0x114>
 8001e6e:	f008 fce6 	bl	800a83e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e72:	2800      	cmp	r0, #0
 8001e74:	d11d      	bne.n	8001eb2 <acc_hal_integration_sensor_transfer+0x166>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e7a:	4876      	ldr	r0, [pc, #472]	; (8002054 <acc_hal_integration_sensor_transfer+0x308>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e7c:	688b      	ldr	r3, [r1, #8]
 8001e7e:	4213      	tst	r3, r2
 8001e80:	d007      	beq.n	8001e92 <acc_hal_integration_sensor_transfer+0x146>
 8001e82:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e84:	1b9b      	subs	r3, r3, r6
 8001e86:	4283      	cmp	r3, r0
 8001e88:	d9f8      	bls.n	8001e7c <acc_hal_integration_sensor_transfer+0x130>
 8001e8a:	f008 fcd8 	bl	800a83e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	d10f      	bne.n	8001eb2 <acc_hal_integration_sensor_transfer+0x166>
  while ((hspi->Instance->SR & Fifo) != State)
 8001e92:	21c0      	movs	r1, #192	; 0xc0
 8001e94:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e96:	486f      	ldr	r0, [pc, #444]	; (8002054 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8001e98:	00c9      	lsls	r1, r1, #3
 8001e9a:	6893      	ldr	r3, [r2, #8]
 8001e9c:	420b      	tst	r3, r1
 8001e9e:	d054      	beq.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001ea0:	7b13      	ldrb	r3, [r2, #12]
 8001ea2:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001ea4:	1b9b      	subs	r3, r3, r6
 8001ea6:	4283      	cmp	r3, r0
 8001ea8:	d9f7      	bls.n	8001e9a <acc_hal_integration_sensor_transfer+0x14e>
 8001eaa:	f008 fcc8 	bl	800a83e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d04b      	beq.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001eb2:	2320      	movs	r3, #32
 8001eb4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	6623      	str	r3, [r4, #96]	; 0x60
 8001ebe:	e044      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ec0:	6858      	ldr	r0, [r3, #4]
 8001ec2:	4681      	mov	r9, r0
 8001ec4:	2080      	movs	r0, #128	; 0x80
 8001ec6:	464f      	mov	r7, r9
 8001ec8:	0140      	lsls	r0, r0, #5
 8001eca:	4338      	orrs	r0, r7
 8001ecc:	6058      	str	r0, [r3, #4]
 8001ece:	e78e      	b.n	8001dee <acc_hal_integration_sensor_transfer+0xa2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	689f      	ldr	r7, [r3, #8]
 8001ed4:	4207      	tst	r7, r0
 8001ed6:	d015      	beq.n	8001f04 <acc_hal_integration_sensor_transfer+0x1b8>
 8001ed8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d012      	beq.n	8001f04 <acc_hal_integration_sensor_transfer+0x1b8>
 8001ede:	2a01      	cmp	r2, #1
 8001ee0:	d110      	bne.n	8001f04 <acc_hal_integration_sensor_transfer+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ee2:	9800      	ldr	r0, [sp, #0]
 8001ee4:	8800      	ldrh	r0, [r0, #0]
 8001ee6:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ee8:	9800      	ldr	r0, [sp, #0]
 8001eea:	3002      	adds	r0, #2
 8001eec:	9000      	str	r0, [sp, #0]
        hspi->TxXferCount--;
 8001eee:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001ef0:	4681      	mov	r9, r0
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	4240      	negs	r0, r0
 8001ef6:	4682      	mov	sl, r0
 8001ef8:	44d1      	add	r9, sl
 8001efa:	4648      	mov	r0, r9
 8001efc:	4691      	mov	r9, r2
        txallowed = 0U;
 8001efe:	2200      	movs	r2, #0
        hspi->TxXferCount--;
 8001f00:	b280      	uxth	r0, r0
 8001f02:	87e0      	strh	r0, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f04:	465f      	mov	r7, fp
 8001f06:	6898      	ldr	r0, [r3, #8]
 8001f08:	4238      	tst	r0, r7
 8001f0a:	d00e      	beq.n	8001f2a <acc_hal_integration_sensor_transfer+0x1de>
 8001f0c:	4640      	mov	r0, r8
 8001f0e:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8001f10:	2800      	cmp	r0, #0
 8001f12:	d00a      	beq.n	8001f2a <acc_hal_integration_sensor_transfer+0x1de>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f14:	68da      	ldr	r2, [r3, #12]
        hspi->RxXferCount--;
 8001f16:	4640      	mov	r0, r8
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f18:	800a      	strh	r2, [r1, #0]
        hspi->RxXferCount--;
 8001f1a:	4642      	mov	r2, r8
 8001f1c:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8001f1e:	46dc      	mov	ip, fp
 8001f20:	3a01      	subs	r2, #1
 8001f22:	b292      	uxth	r2, r2
 8001f24:	87c2      	strh	r2, [r0, #62]	; 0x3e
        txallowed = 1U;
 8001f26:	2201      	movs	r2, #1
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f28:	3102      	adds	r1, #2
 8001f2a:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f2c:	1b80      	subs	r0, r0, r6
 8001f2e:	4682      	mov	sl, r0
 8001f30:	4848      	ldr	r0, [pc, #288]	; (8002054 <acc_hal_integration_sensor_transfer+0x308>)
 8001f32:	4582      	cmp	sl, r0
 8001f34:	d800      	bhi.n	8001f38 <acc_hal_integration_sensor_transfer+0x1ec>
 8001f36:	e77f      	b.n	8001e38 <acc_hal_integration_sensor_transfer+0xec>
 8001f38:	464b      	mov	r3, r9
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <acc_hal_integration_sensor_transfer+0x1f6>
 8001f3e:	9b00      	ldr	r3, [sp, #0]
 8001f40:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f42:	4663      	mov	r3, ip
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d000      	beq.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
 8001f48:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->State = HAL_SPI_STATE_READY;
 8001f4a:	0023      	movs	r3, r4
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	335d      	adds	r3, #93	; 0x5d
 8001f50:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001f52:	2300      	movs	r3, #0
 8001f54:	345c      	adds	r4, #92	; 0x5c
 8001f56:	7023      	strb	r3, [r4, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9a01      	ldr	r2, [sp, #4]
 8001f5c:	6193      	str	r3, [r2, #24]
}
 8001f5e:	b003      	add	sp, #12
 8001f60:	bc3c      	pop	{r2, r3, r4, r5}
 8001f62:	4690      	mov	r8, r2
 8001f64:	4699      	mov	r9, r3
 8001f66:	46a2      	mov	sl, r4
 8001f68:	46ab      	mov	fp, r5
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f6c:	4660      	mov	r0, ip
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d001      	beq.n	8001f76 <acc_hal_integration_sensor_transfer+0x22a>
 8001f72:	2a01      	cmp	r2, #1
 8001f74:	d10a      	bne.n	8001f8c <acc_hal_integration_sensor_transfer+0x240>
      if (hspi->TxXferCount > 1U)
 8001f76:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001f78:	2a01      	cmp	r2, #1
 8001f7a:	d958      	bls.n	800202e <acc_hal_integration_sensor_transfer+0x2e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7c:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f7e:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f80:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f84:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001f86:	3b02      	subs	r3, #2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4694      	mov	ip, r2
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f90:	2280      	movs	r2, #128	; 0x80
        txallowed = 1U;
 8001f92:	2101      	movs	r1, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f94:	0152      	lsls	r2, r2, #5
 8001f96:	4690      	mov	r8, r2
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f98:	4a2e      	ldr	r2, [pc, #184]	; (8002054 <acc_hal_integration_sensor_transfer+0x308>)
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f9a:	0023      	movs	r3, r4
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f9c:	468b      	mov	fp, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001f9e:	4691      	mov	r9, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d103      	bne.n	8001fb0 <acc_hal_integration_sensor_transfer+0x264>
 8001fa8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001faa:	2a00      	cmp	r2, #0
 8001fac:	d100      	bne.n	8001fb0 <acc_hal_integration_sensor_transfer+0x264>
 8001fae:	e753      	b.n	8001e58 <acc_hal_integration_sensor_transfer+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fb0:	4660      	mov	r0, ip
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	6897      	ldr	r7, [r2, #8]
 8001fb6:	4207      	tst	r7, r0
 8001fb8:	d013      	beq.n	8001fe2 <acc_hal_integration_sensor_transfer+0x296>
 8001fba:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d010      	beq.n	8001fe2 <acc_hal_integration_sensor_transfer+0x296>
 8001fc0:	2901      	cmp	r1, #1
 8001fc2:	d10e      	bne.n	8001fe2 <acc_hal_integration_sensor_transfer+0x296>
        if (hspi->TxXferCount > 1U)
 8001fc4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001fc6:	468a      	mov	sl, r1
 8001fc8:	4650      	mov	r0, sl
 8001fca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001fcc:	2801      	cmp	r0, #1
 8001fce:	d943      	bls.n	8002058 <acc_hal_integration_sensor_transfer+0x30c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd0:	8808      	ldrh	r0, [r1, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd2:	3102      	adds	r1, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fd4:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fd6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001fd8:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001fda:	3902      	subs	r1, #2
 8001fdc:	b289      	uxth	r1, r1
 8001fde:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001fe0:	2100      	movs	r1, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fe2:	465f      	mov	r7, fp
 8001fe4:	6890      	ldr	r0, [r2, #8]
 8001fe6:	4238      	tst	r0, r7
 8001fe8:	d01b      	beq.n	8002022 <acc_hal_integration_sensor_transfer+0x2d6>
 8001fea:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d018      	beq.n	8002022 <acc_hal_integration_sensor_transfer+0x2d6>
        if (hspi->RxXferCount > 1U)
 8001ff0:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8001ff2:	468a      	mov	sl, r1
 8001ff4:	4650      	mov	r0, sl
 8001ff6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ff8:	2801      	cmp	r0, #1
 8001ffa:	d938      	bls.n	800206e <acc_hal_integration_sensor_transfer+0x322>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ffc:	68d0      	ldr	r0, [r2, #12]
 8001ffe:	8008      	strh	r0, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002000:	3102      	adds	r1, #2
 8002002:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002004:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002006:	3902      	subs	r1, #2
 8002008:	b289      	uxth	r1, r1
 800200a:	87d9      	strh	r1, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 800200c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800200e:	468a      	mov	sl, r1
 8002010:	4650      	mov	r0, sl
        txallowed = 1U;
 8002012:	4659      	mov	r1, fp
          if (hspi->RxXferCount <= 1U)
 8002014:	2801      	cmp	r0, #1
 8002016:	d804      	bhi.n	8002022 <acc_hal_integration_sensor_transfer+0x2d6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002018:	4640      	mov	r0, r8
 800201a:	6851      	ldr	r1, [r2, #4]
 800201c:	4301      	orrs	r1, r0
 800201e:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8002020:	4659      	mov	r1, fp
 8002022:	682a      	ldr	r2, [r5, #0]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002024:	1b92      	subs	r2, r2, r6
 8002026:	454a      	cmp	r2, r9
 8002028:	d900      	bls.n	800202c <acc_hal_integration_sensor_transfer+0x2e0>
 800202a:	e78e      	b.n	8001f4a <acc_hal_integration_sensor_transfer+0x1fe>
 800202c:	e7b9      	b.n	8001fa2 <acc_hal_integration_sensor_transfer+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800202e:	780a      	ldrb	r2, [r1, #0]
 8002030:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002034:	3301      	adds	r3, #1
 8002036:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002038:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800203a:	3b01      	subs	r3, #1
 800203c:	b29b      	uxth	r3, r3
 800203e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002040:	e7a4      	b.n	8001f8c <acc_hal_integration_sensor_transfer+0x240>
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	200002e8 	.word	0x200002e8
 8002048:	50000400 	.word	0x50000400
 800204c:	200002ac 	.word	0x200002ac
 8002050:	ffffefff 	.word	0xffffefff
 8002054:	00001387 	.word	0x00001387
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002058:	7809      	ldrb	r1, [r1, #0]
 800205a:	7311      	strb	r1, [r2, #12]
          hspi->pTxBuffPtr++;
 800205c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800205e:	3101      	adds	r1, #1
 8002060:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002062:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002064:	3901      	subs	r1, #1
 8002066:	b289      	uxth	r1, r1
 8002068:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 800206a:	2100      	movs	r1, #0
 800206c:	e7b9      	b.n	8001fe2 <acc_hal_integration_sensor_transfer+0x296>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800206e:	7b12      	ldrb	r2, [r2, #12]
 8002070:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002072:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 8002074:	4659      	mov	r1, fp
          hspi->pRxBuffPtr++;
 8002076:	3201      	adds	r2, #1
 8002078:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800207a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800207c:	3a01      	subs	r2, #1
 800207e:	b292      	uxth	r2, r2
 8002080:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002082:	e7ce      	b.n	8002022 <acc_hal_integration_sensor_transfer+0x2d6>

08002084 <acc_base_configuration_asynchronous_measurement_get>:
 8002084:	b510      	push	{r4, lr}
 8002086:	0004      	movs	r4, r0
 8002088:	f004 fc36 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800208c:	2800      	cmp	r0, #0
 800208e:	d001      	beq.n	8002094 <acc_base_configuration_asynchronous_measurement_get+0x10>
 8002090:	344e      	adds	r4, #78	; 0x4e
 8002092:	7820      	ldrb	r0, [r4, #0]
 8002094:	bd10      	pop	{r4, pc}

08002096 <acc_base_configuration_noise_level_normalization_get>:
 8002096:	b510      	push	{r4, lr}
 8002098:	0004      	movs	r4, r0
 800209a:	f004 fc2d 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d001      	beq.n	80020a6 <acc_base_configuration_noise_level_normalization_get+0x10>
 80020a2:	3449      	adds	r4, #73	; 0x49
 80020a4:	7820      	ldrb	r0, [r4, #0]
 80020a6:	bd10      	pop	{r4, pc}

080020a8 <acc_base_configuration_downsampling_factor_get>:
 80020a8:	b510      	push	{r4, lr}
 80020aa:	0004      	movs	r4, r0
 80020ac:	f004 fc24 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80020b0:	2300      	movs	r3, #0
 80020b2:	4298      	cmp	r0, r3
 80020b4:	d001      	beq.n	80020ba <acc_base_configuration_downsampling_factor_get+0x12>
 80020b6:	3468      	adds	r4, #104	; 0x68
 80020b8:	8823      	ldrh	r3, [r4, #0]
 80020ba:	0018      	movs	r0, r3
 80020bc:	bd10      	pop	{r4, pc}

080020be <envelope_create_service>:
 80020be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c0:	46de      	mov	lr, fp
 80020c2:	464e      	mov	r6, r9
 80020c4:	4645      	mov	r5, r8
 80020c6:	4657      	mov	r7, sl
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	b0a9      	sub	sp, #164	; 0xa4
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	2290      	movs	r2, #144	; 0x90
 80020d0:	a804      	add	r0, sp, #16
 80020d2:	000d      	movs	r5, r1
 80020d4:	f013 fcf2 	bl	8015abc <memcpy>
 80020d8:	a80b      	add	r0, sp, #44	; 0x2c
 80020da:	f7ff ffe5 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 80020de:	0006      	movs	r6, r0
 80020e0:	a80b      	add	r0, sp, #44	; 0x2c
 80020e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80020e4:	f004 fc08 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d006      	beq.n	80020fa <envelope_create_service+0x3c>
 80020ec:	0030      	movs	r0, r6
 80020ee:	f00d fb81 	bl	800f7f4 <__aeabi_i2f>
 80020f2:	1c21      	adds	r1, r4, #0
 80020f4:	f00c fc4a 	bl	800e98c <__aeabi_fmul>
 80020f8:	9013      	str	r0, [sp, #76]	; 0x4c
 80020fa:	a804      	add	r0, sp, #16
 80020fc:	f7fe f82e 	bl	800015c <acc_service_configuration_check>
 8002100:	2800      	cmp	r0, #0
 8002102:	d101      	bne.n	8002108 <envelope_create_service+0x4a>
 8002104:	2000      	movs	r0, #0
 8002106:	e009      	b.n	800211c <envelope_create_service+0x5e>
 8002108:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800210a:	2b04      	cmp	r3, #4
 800210c:	d10d      	bne.n	800212a <envelope_create_service+0x6c>
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <envelope_create_service+0x16a>)
 8002110:	2000      	movs	r0, #0
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	4a45      	ldr	r2, [pc, #276]	; (800222c <envelope_create_service+0x16e>)
 8002116:	4946      	ldr	r1, [pc, #280]	; (8002230 <envelope_create_service+0x172>)
 8002118:	4798      	blx	r3
 800211a:	2000      	movs	r0, #0
 800211c:	b029      	add	sp, #164	; 0xa4
 800211e:	bc3c      	pop	{r2, r3, r4, r5}
 8002120:	4690      	mov	r8, r2
 8002122:	4699      	mov	r9, r3
 8002124:	46a2      	mov	sl, r4
 8002126:	46ab      	mov	fp, r5
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800212a:	a80b      	add	r0, sp, #44	; 0x2c
 800212c:	f004 fbe4 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002130:	2800      	cmp	r0, #0
 8002132:	d0e7      	beq.n	8002104 <envelope_create_service+0x46>
 8002134:	a80b      	add	r0, sp, #44	; 0x2c
 8002136:	f004 fb5f 	bl	80067f8 <acc_base_configuration_check.part.6>
 800213a:	2800      	cmp	r0, #0
 800213c:	d0e2      	beq.n	8002104 <envelope_create_service+0x46>
 800213e:	a80b      	add	r0, sp, #44	; 0x2c
 8002140:	f7ff ffb2 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 8002144:	1e43      	subs	r3, r0, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d908      	bls.n	800215e <envelope_create_service+0xa0>
 800214c:	2804      	cmp	r0, #4
 800214e:	d006      	beq.n	800215e <envelope_create_service+0xa0>
 8002150:	4b35      	ldr	r3, [pc, #212]	; (8002228 <envelope_create_service+0x16a>)
 8002152:	4a38      	ldr	r2, [pc, #224]	; (8002234 <envelope_create_service+0x176>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	4936      	ldr	r1, [pc, #216]	; (8002230 <envelope_create_service+0x172>)
 8002158:	2000      	movs	r0, #0
 800215a:	4798      	blx	r3
 800215c:	e7d2      	b.n	8002104 <envelope_create_service+0x46>
 800215e:	a80b      	add	r0, sp, #44	; 0x2c
 8002160:	f004 fbca 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002164:	1e04      	subs	r4, r0, #0
 8002166:	d004      	beq.n	8002172 <envelope_create_service+0xb4>
 8002168:	aa04      	add	r2, sp, #16
 800216a:	236b      	movs	r3, #107	; 0x6b
 800216c:	4694      	mov	ip, r2
 800216e:	4463      	add	r3, ip
 8002170:	781c      	ldrb	r4, [r3, #0]
 8002172:	a80b      	add	r0, sp, #44	; 0x2c
 8002174:	f004 fbc0 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002178:	2800      	cmp	r0, #0
 800217a:	d010      	beq.n	800219e <envelope_create_service+0xe0>
 800217c:	2c00      	cmp	r4, #0
 800217e:	d00e      	beq.n	800219e <envelope_create_service+0xe0>
 8002180:	ab11      	add	r3, sp, #68	; 0x44
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <envelope_create_service+0xe0>
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <envelope_create_service+0x16a>)
 800218a:	001a      	movs	r2, r3
 800218c:	3230      	adds	r2, #48	; 0x30
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	2a00      	cmp	r2, #0
 8002192:	d004      	beq.n	800219e <envelope_create_service+0xe0>
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	4a28      	ldr	r2, [pc, #160]	; (8002238 <envelope_create_service+0x17a>)
 8002198:	4925      	ldr	r1, [pc, #148]	; (8002230 <envelope_create_service+0x172>)
 800219a:	2001      	movs	r0, #1
 800219c:	4798      	blx	r3
 800219e:	792b      	ldrb	r3, [r5, #4]
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	2010      	movs	r0, #16
 80021a4:	7213      	strb	r3, [r2, #8]
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	4b24      	ldr	r3, [pc, #144]	; (800223c <envelope_create_service+0x17e>)
 80021aa:	0052      	lsls	r2, r2, #1
 80021ac:	0019      	movs	r1, r3
 80021ae:	4699      	mov	r9, r3
 80021b0:	f008 ff4c 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 80021b4:	2202      	movs	r2, #2
 80021b6:	0005      	movs	r5, r0
 80021b8:	20ec      	movs	r0, #236	; 0xec
 80021ba:	32ff      	adds	r2, #255	; 0xff
 80021bc:	4649      	mov	r1, r9
 80021be:	0080      	lsls	r0, r0, #2
 80021c0:	f008 ff44 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 80021c4:	0004      	movs	r4, r0
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d001      	beq.n	80021ce <envelope_create_service+0x110>
 80021ca:	2800      	cmp	r0, #0
 80021cc:	d10f      	bne.n	80021ee <envelope_create_service+0x130>
 80021ce:	0028      	movs	r0, r5
 80021d0:	f004 f88e 	bl	80062f0 <acc_rss_integration_mem_free>
 80021d4:	0020      	movs	r0, r4
 80021d6:	f004 f88b 	bl	80062f0 <acc_rss_integration_mem_free>
 80021da:	2500      	movs	r5, #0
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	9a01      	ldr	r2, [sp, #4]
 80021e0:	611d      	str	r5, [r3, #16]
 80021e2:	1e68      	subs	r0, r5, #1
 80021e4:	4185      	sbcs	r5, r0
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <envelope_create_service+0x182>)
 80021e8:	b2e8      	uxtb	r0, r5
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	e796      	b.n	800211c <envelope_create_service+0x5e>
 80021ee:	2318      	movs	r3, #24
 80021f0:	469c      	mov	ip, r3
 80021f2:	4484      	add	ip, r0
 80021f4:	4663      	mov	r3, ip
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	23e3      	movs	r3, #227	; 0xe3
 80021fa:	6028      	str	r0, [r5, #0]
 80021fc:	9801      	ldr	r0, [sp, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3018      	adds	r0, #24
 8002202:	18e7      	adds	r7, r4, r3
 8002204:	003b      	movs	r3, r7
 8002206:	4662      	mov	r2, ip
 8002208:	6760      	str	r0, [r4, #116]	; 0x74
 800220a:	a90b      	add	r1, sp, #44	; 0x2c
 800220c:	f004 fc82 	bl	8006b14 <acc_sensor_manager_prepare_radar_engine>
 8002210:	0023      	movs	r3, r4
 8002212:	897a      	ldrh	r2, [r7, #10]
 8002214:	3370      	adds	r3, #112	; 0x70
 8002216:	1e06      	subs	r6, r0, #0
 8002218:	801a      	strh	r2, [r3, #0]
 800221a:	d113      	bne.n	8002244 <envelope_create_service+0x186>
 800221c:	0028      	movs	r0, r5
 800221e:	f004 f883 	bl	8006328 <disassemble.lto_priv.325.lto_priv.650>
 8002222:	0035      	movs	r5, r6
 8002224:	e7da      	b.n	80021dc <envelope_create_service+0x11e>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	200002b0 	.word	0x200002b0
 800222c:	0801c127 	.word	0x0801c127
 8002230:	0801bf21 	.word	0x0801bf21
 8002234:	0801c162 	.word	0x0801c162
 8002238:	0801c182 	.word	0x0801c182
 800223c:	0801c1c7 	.word	0x0801c1c7
 8002240:	0800018d 	.word	0x0800018d
 8002244:	a80b      	add	r0, sp, #44	; 0x2c
 8002246:	f004 fb57 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800224a:	4682      	mov	sl, r0
 800224c:	2800      	cmp	r0, #0
 800224e:	d002      	beq.n	8002256 <envelope_create_service+0x198>
 8002250:	ab11      	add	r3, sp, #68	; 0x44
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	469a      	mov	sl, r3
 8002256:	23e3      	movs	r3, #227	; 0xe3
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	5ae2      	ldrh	r2, [r4, r3]
 800225c:	89bb      	ldrh	r3, [r7, #12]
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4293      	cmp	r3, r2
 8002264:	d200      	bcs.n	8002268 <envelope_create_service+0x1aa>
 8002266:	0013      	movs	r3, r2
 8002268:	897e      	ldrh	r6, [r7, #10]
 800226a:	89fa      	ldrh	r2, [r7, #14]
 800226c:	18b6      	adds	r6, r6, r2
 800226e:	0076      	lsls	r6, r6, #1
 8002270:	429e      	cmp	r6, r3
 8002272:	d200      	bcs.n	8002276 <envelope_create_service+0x1b8>
 8002274:	001e      	movs	r6, r3
 8002276:	a80b      	add	r0, sp, #44	; 0x2c
 8002278:	f004 fb3e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800227c:	2300      	movs	r3, #0
 800227e:	4298      	cmp	r0, r3
 8002280:	d001      	beq.n	8002286 <envelope_create_service+0x1c8>
 8002282:	ab20      	add	r3, sp, #128	; 0x80
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	4698      	mov	r8, r3
 8002288:	42b3      	cmp	r3, r6
 800228a:	d200      	bcs.n	800228e <envelope_create_service+0x1d0>
 800228c:	46b0      	mov	r8, r6
 800228e:	23eb      	movs	r3, #235	; 0xeb
 8002290:	4642      	mov	r2, r8
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	50e2      	str	r2, [r4, r3]
 8002296:	4653      	mov	r3, sl
 8002298:	4640      	mov	r0, r8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <envelope_create_service+0x1ec>
 800229e:	23e3      	movs	r3, #227	; 0xe3
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	5ae0      	ldrh	r0, [r4, r3]
 80022a4:	0080      	lsls	r0, r0, #2
 80022a6:	300a      	adds	r0, #10
 80022a8:	4440      	add	r0, r8
 80022aa:	2286      	movs	r2, #134	; 0x86
 80022ac:	4649      	mov	r1, r9
 80022ae:	32ff      	adds	r2, #255	; 0xff
 80022b0:	f004 f862 	bl	8006378 <acc_rss_integration_mem_alloc_debug>
 80022b4:	23ea      	movs	r3, #234	; 0xea
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	1e06      	subs	r6, r0, #0
 80022ba:	50e0      	str	r0, [r4, r3]
 80022bc:	d0ae      	beq.n	800221c <envelope_create_service+0x15e>
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4699      	mov	r9, r3
 80022c4:	4653      	mov	r3, sl
 80022c6:	4481      	add	r9, r0
 80022c8:	46cb      	mov	fp, r9
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <envelope_create_service+0x218>
 80022ce:	4643      	mov	r3, r8
 80022d0:	3304      	adds	r3, #4
 80022d2:	469b      	mov	fp, r3
 80022d4:	4483      	add	fp, r0
 80022d6:	1da3      	adds	r3, r4, #6
 80022d8:	6623      	str	r3, [r4, #96]	; 0x60
 80022da:	1de3      	adds	r3, r4, #7
 80022dc:	6663      	str	r3, [r4, #100]	; 0x64
 80022de:	230c      	movs	r3, #12
 80022e0:	469c      	mov	ip, r3
 80022e2:	44a4      	add	ip, r4
 80022e4:	4663      	mov	r3, ip
 80022e6:	0027      	movs	r7, r4
 80022e8:	66a3      	str	r3, [r4, #104]	; 0x68
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	3b04      	subs	r3, #4
 80022ee:	66e3      	str	r3, [r4, #108]	; 0x6c
 80022f0:	3714      	adds	r7, #20
 80022f2:	3380      	adds	r3, #128	; 0x80
 80022f4:	1d22      	adds	r2, r4, #4
 80022f6:	64e6      	str	r6, [r4, #76]	; 0x4c
 80022f8:	65e7      	str	r7, [r4, #92]	; 0x5c
 80022fa:	65a4      	str	r4, [r4, #88]	; 0x58
 80022fc:	a80b      	add	r0, sp, #44	; 0x2c
 80022fe:	601e      	str	r6, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	615f      	str	r7, [r3, #20]
 8002304:	641e      	str	r6, [r3, #64]	; 0x40
 8002306:	645e      	str	r6, [r3, #68]	; 0x44
 8002308:	655f      	str	r7, [r3, #84]	; 0x54
 800230a:	f7ff fec4 	bl	8002096 <acc_base_configuration_noise_level_normalization_get>
 800230e:	2800      	cmp	r0, #0
 8002310:	d004      	beq.n	800231c <envelope_create_service+0x25e>
 8002312:	0023      	movs	r3, r4
 8002314:	33fc      	adds	r3, #252	; 0xfc
 8002316:	60de      	str	r6, [r3, #12]
 8002318:	611e      	str	r6, [r3, #16]
 800231a:	621f      	str	r7, [r3, #32]
 800231c:	0023      	movs	r3, r4
 800231e:	33fc      	adds	r3, #252	; 0xfc
 8002320:	64de      	str	r6, [r3, #76]	; 0x4c
 8002322:	651e      	str	r6, [r3, #80]	; 0x50
 8002324:	661f      	str	r7, [r3, #96]	; 0x60
 8002326:	23c2      	movs	r3, #194	; 0xc2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	50e6      	str	r6, [r4, r3]
 800232c:	3304      	adds	r3, #4
 800232e:	50e6      	str	r6, [r4, r3]
 8002330:	9a03      	ldr	r2, [sp, #12]
 8002332:	3310      	adds	r3, #16
 8002334:	50e7      	str	r7, [r4, r3]
 8002336:	330c      	adds	r3, #12
 8002338:	50e2      	str	r2, [r4, r3]
 800233a:	464a      	mov	r2, r9
 800233c:	3324      	adds	r3, #36	; 0x24
 800233e:	50e6      	str	r6, [r4, r3]
 8002340:	3304      	adds	r3, #4
 8002342:	50e6      	str	r6, [r4, r3]
 8002344:	3310      	adds	r3, #16
 8002346:	50e7      	str	r7, [r4, r3]
 8002348:	3334      	adds	r3, #52	; 0x34
 800234a:	50e6      	str	r6, [r4, r3]
 800234c:	3304      	adds	r3, #4
 800234e:	50e2      	str	r2, [r4, r3]
 8002350:	3310      	adds	r3, #16
 8002352:	50e7      	str	r7, [r4, r3]
 8002354:	3328      	adds	r3, #40	; 0x28
 8002356:	50e2      	str	r2, [r4, r3]
 8002358:	3304      	adds	r3, #4
 800235a:	50e2      	str	r2, [r4, r3]
 800235c:	3310      	adds	r3, #16
 800235e:	50e7      	str	r7, [r4, r3]
 8002360:	4653      	mov	r3, sl
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <envelope_create_service+0x2c4>
 8002366:	23a8      	movs	r3, #168	; 0xa8
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	50e2      	str	r2, [r4, r3]
 800236c:	4643      	mov	r3, r8
 800236e:	22ab      	movs	r2, #171	; 0xab
 8002370:	18f3      	adds	r3, r6, r3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	50a3      	str	r3, [r4, r2]
 8002376:	23a9      	movs	r3, #169	; 0xa9
 8002378:	465a      	mov	r2, fp
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	50e2      	str	r2, [r4, r3]
 800237e:	3310      	adds	r3, #16
 8002380:	50e7      	str	r7, [r4, r3]
 8002382:	23b8      	movs	r3, #184	; 0xb8
 8002384:	465a      	mov	r2, fp
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	50e2      	str	r2, [r4, r3]
 800238a:	3304      	adds	r3, #4
 800238c:	50e6      	str	r6, [r4, r3]
 800238e:	3310      	adds	r3, #16
 8002390:	50e7      	str	r7, [r4, r3]
 8002392:	3328      	adds	r3, #40	; 0x28
 8002394:	50e6      	str	r6, [r4, r3]
 8002396:	3304      	adds	r3, #4
 8002398:	50e6      	str	r6, [r4, r3]
 800239a:	3310      	adds	r3, #16
 800239c:	50e7      	str	r7, [r4, r3]
 800239e:	3328      	adds	r3, #40	; 0x28
 80023a0:	50e6      	str	r6, [r4, r3]
 80023a2:	3328      	adds	r3, #40	; 0x28
 80023a4:	50e4      	str	r4, [r4, r3]
 80023a6:	3328      	adds	r3, #40	; 0x28
 80023a8:	18e6      	adds	r6, r4, r3
 80023aa:	4be9      	ldr	r3, [pc, #932]	; (8002750 <envelope_create_service+0x692>)
 80023ac:	469b      	mov	fp, r3
 80023ae:	3330      	adds	r3, #48	; 0x30
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d900      	bls.n	80023b8 <envelope_create_service+0x2fa>
 80023b6:	e270      	b.n	800289a <envelope_create_service+0x7dc>
 80023b8:	0033      	movs	r3, r6
 80023ba:	9a02      	ldr	r2, [sp, #8]
 80023bc:	a90b      	add	r1, sp, #44	; 0x2c
 80023be:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80023c0:	f004 fab4 	bl	800692c <acc_sensor_manager_prepare_measurement>
 80023c4:	1e06      	subs	r6, r0, #0
 80023c6:	d100      	bne.n	80023ca <envelope_create_service+0x30c>
 80023c8:	e728      	b.n	800221c <envelope_create_service+0x15e>
 80023ca:	0023      	movs	r3, r4
 80023cc:	2700      	movs	r7, #0
 80023ce:	0026      	movs	r6, r4
 80023d0:	4ae0      	ldr	r2, [pc, #896]	; (8002754 <envelope_create_service+0x696>)
 80023d2:	33b0      	adds	r3, #176	; 0xb0
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	601f      	str	r7, [r3, #0]
 80023d8:	4bdf      	ldr	r3, [pc, #892]	; (8002758 <envelope_create_service+0x69a>)
 80023da:	4ae0      	ldr	r2, [pc, #896]	; (800275c <envelope_create_service+0x69e>)
 80023dc:	67e3      	str	r3, [r4, #124]	; 0x7c
 80023de:	1d23      	adds	r3, r4, #4
 80023e0:	67da      	str	r2, [r3, #124]	; 0x7c
 80023e2:	4adf      	ldr	r2, [pc, #892]	; (8002760 <envelope_create_service+0x6a2>)
 80023e4:	3304      	adds	r3, #4
 80023e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80023e8:	4bde      	ldr	r3, [pc, #888]	; (8002764 <envelope_create_service+0x6a6>)
 80023ea:	36b8      	adds	r6, #184	; 0xb8
 80023ec:	6073      	str	r3, [r6, #4]
 80023ee:	4bde      	ldr	r3, [pc, #888]	; (8002768 <envelope_create_service+0x6aa>)
 80023f0:	a80b      	add	r0, sp, #44	; 0x2c
 80023f2:	60b3      	str	r3, [r6, #8]
 80023f4:	4bdd      	ldr	r3, [pc, #884]	; (800276c <envelope_create_service+0x6ae>)
 80023f6:	60f3      	str	r3, [r6, #12]
 80023f8:	4bdd      	ldr	r3, [pc, #884]	; (8002770 <envelope_create_service+0x6b2>)
 80023fa:	63b3      	str	r3, [r6, #56]	; 0x38
 80023fc:	2300      	movs	r3, #0
 80023fe:	87b3      	strh	r3, [r6, #60]	; 0x3c
 8002400:	f7ff fe49 	bl	8002096 <acc_base_configuration_noise_level_normalization_get>
 8002404:	9702      	str	r7, [sp, #8]
 8002406:	2800      	cmp	r0, #0
 8002408:	d01b      	beq.n	8002442 <envelope_create_service+0x384>
 800240a:	a80b      	add	r0, sp, #44	; 0x2c
 800240c:	f004 fa74 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002410:	2800      	cmp	r0, #0
 8002412:	d007      	beq.n	8002424 <envelope_create_service+0x366>
 8002414:	aa04      	add	r2, sp, #16
 8002416:	4694      	mov	ip, r2
 8002418:	2366      	movs	r3, #102	; 0x66
 800241a:	4463      	add	r3, ip
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	221e      	movs	r2, #30
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <envelope_create_service+0x36a>
 8002424:	2296      	movs	r2, #150	; 0x96
 8002426:	0052      	lsls	r2, r2, #1
 8002428:	0023      	movs	r3, r4
 800242a:	33f8      	adds	r3, #248	; 0xf8
 800242c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800242e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002430:	4ad0      	ldr	r2, [pc, #832]	; (8002774 <envelope_create_service+0x6b6>)
 8002432:	8719      	strh	r1, [r3, #56]	; 0x38
 8002434:	63da      	str	r2, [r3, #60]	; 0x3c
 8002436:	4ad0      	ldr	r2, [pc, #832]	; (8002778 <envelope_create_service+0x6ba>)
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	4ad0      	ldr	r2, [pc, #832]	; (800277c <envelope_create_service+0x6be>)
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	4ad0      	ldr	r2, [pc, #832]	; (8002780 <envelope_create_service+0x6c2>)
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	0023      	movs	r3, r4
 8002444:	4acf      	ldr	r2, [pc, #828]	; (8002784 <envelope_create_service+0x6c6>)
 8002446:	3339      	adds	r3, #57	; 0x39
 8002448:	33ff      	adds	r3, #255	; 0xff
 800244a:	639a      	str	r2, [r3, #56]	; 0x38
 800244c:	4ace      	ldr	r2, [pc, #824]	; (8002788 <envelope_create_service+0x6ca>)
 800244e:	49cf      	ldr	r1, [pc, #828]	; (800278c <envelope_create_service+0x6ce>)
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	4acf      	ldr	r2, [pc, #828]	; (8002790 <envelope_create_service+0x6d2>)
 8002454:	a80b      	add	r0, sp, #44	; 0x2c
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	4ace      	ldr	r2, [pc, #824]	; (8002794 <envelope_create_service+0x6d6>)
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800245e:	6419      	str	r1, [r3, #64]	; 0x40
 8002460:	679a      	str	r2, [r3, #120]	; 0x78
 8002462:	49cd      	ldr	r1, [pc, #820]	; (8002798 <envelope_create_service+0x6da>)
 8002464:	9a02      	ldr	r2, [sp, #8]
 8002466:	6459      	str	r1, [r3, #68]	; 0x44
 8002468:	67da      	str	r2, [r3, #124]	; 0x7c
 800246a:	49cc      	ldr	r1, [pc, #816]	; (800279c <envelope_create_service+0x6de>)
 800246c:	4acc      	ldr	r2, [pc, #816]	; (80027a0 <envelope_create_service+0x6e2>)
 800246e:	6499      	str	r1, [r3, #72]	; 0x48
 8002470:	675a      	str	r2, [r3, #116]	; 0x74
 8002472:	23e3      	movs	r3, #227	; 0xe3
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4698      	mov	r8, r3
 8002478:	44a0      	add	r8, r4
 800247a:	4643      	mov	r3, r8
 800247c:	891b      	ldrh	r3, [r3, #8]
 800247e:	469a      	mov	sl, r3
 8002480:	4643      	mov	r3, r8
 8002482:	88db      	ldrh	r3, [r3, #6]
 8002484:	9303      	str	r3, [sp, #12]
 8002486:	f004 fa37 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800248a:	2800      	cmp	r0, #0
 800248c:	d100      	bne.n	8002490 <envelope_create_service+0x3d2>
 800248e:	e208      	b.n	80028a2 <envelope_create_service+0x7e4>
 8002490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002492:	4699      	mov	r9, r3
 8002494:	0027      	movs	r7, r4
 8002496:	4bc3      	ldr	r3, [pc, #780]	; (80027a4 <envelope_create_service+0x6e6>)
 8002498:	37b9      	adds	r7, #185	; 0xb9
 800249a:	37ff      	adds	r7, #255	; 0xff
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4bc2      	ldr	r3, [pc, #776]	; (80027a8 <envelope_create_service+0x6ea>)
 80024a0:	218b      	movs	r1, #139	; 0x8b
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	4bc1      	ldr	r3, [pc, #772]	; (80027ac <envelope_create_service+0x6ee>)
 80024a6:	05c9      	lsls	r1, r1, #23
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	9b03      	ldr	r3, [sp, #12]
 80024ac:	4648      	mov	r0, r9
 80024ae:	643b      	str	r3, [r7, #64]	; 0x40
 80024b0:	4653      	mov	r3, sl
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b4:	f00c fa6a 	bl	800e98c <__aeabi_fmul>
 80024b8:	2100      	movs	r1, #0
 80024ba:	4682      	mov	sl, r0
 80024bc:	4648      	mov	r0, r9
 80024be:	f00c ff7b 	bl	800f3b8 <__aeabi_fcmpge>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d100      	bne.n	80024c8 <envelope_create_service+0x40a>
 80024c6:	e1ef      	b.n	80028a8 <envelope_create_service+0x7ea>
 80024c8:	21fc      	movs	r1, #252	; 0xfc
 80024ca:	0589      	lsls	r1, r1, #22
 80024cc:	4650      	mov	r0, sl
 80024ce:	f00b ffb1 	bl	800e434 <__aeabi_fadd>
 80024d2:	f00d f96f 	bl	800f7b4 <__aeabi_f2iz>
 80024d6:	0023      	movs	r3, r4
 80024d8:	33bf      	adds	r3, #191	; 0xbf
 80024da:	33ff      	adds	r3, #255	; 0xff
 80024dc:	87d8      	strh	r0, [r3, #62]	; 0x3e
 80024de:	4bb4      	ldr	r3, [pc, #720]	; (80027b0 <envelope_create_service+0x6f2>)
 80024e0:	4642      	mov	r2, r8
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	8892      	ldrh	r2, [r2, #4]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	18e3      	adds	r3, r4, r3
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38
 80024f0:	4ab0      	ldr	r2, [pc, #704]	; (80027b4 <envelope_create_service+0x6f6>)
 80024f2:	a80b      	add	r0, sp, #44	; 0x2c
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	4ab0      	ldr	r2, [pc, #704]	; (80027b8 <envelope_create_service+0x6fa>)
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	4ab0      	ldr	r2, [pc, #704]	; (80027bc <envelope_create_service+0x6fe>)
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	f004 f9fb 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002502:	4681      	mov	r9, r0
 8002504:	2800      	cmp	r0, #0
 8002506:	d002      	beq.n	800250e <envelope_create_service+0x450>
 8002508:	ab12      	add	r3, sp, #72	; 0x48
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4699      	mov	r9, r3
 800250e:	a80b      	add	r0, sp, #44	; 0x2c
 8002510:	f004 f9f2 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002514:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8002516:	2800      	cmp	r0, #0
 8002518:	d100      	bne.n	800251c <envelope_create_service+0x45e>
 800251a:	2700      	movs	r7, #0
 800251c:	238f      	movs	r3, #143	; 0x8f
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4698      	mov	r8, r3
 8002522:	44a0      	add	r8, r4
 8002524:	4642      	mov	r2, r8
 8002526:	4ba6      	ldr	r3, [pc, #664]	; (80027c0 <envelope_create_service+0x702>)
 8002528:	6053      	str	r3, [r2, #4]
 800252a:	4ba6      	ldr	r3, [pc, #664]	; (80027c4 <envelope_create_service+0x706>)
 800252c:	6093      	str	r3, [r2, #8]
 800252e:	4ba6      	ldr	r3, [pc, #664]	; (80027c8 <envelope_create_service+0x70a>)
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	464b      	mov	r3, r9
 8002534:	2b00      	cmp	r3, #0
 8002536:	d100      	bne.n	800253a <envelope_create_service+0x47c>
 8002538:	e1b9      	b.n	80028ae <envelope_create_service+0x7f0>
 800253a:	49a4      	ldr	r1, [pc, #656]	; (80027cc <envelope_create_service+0x70e>)
 800253c:	1c38      	adds	r0, r7, #0
 800253e:	f00c ff1d 	bl	800f37c <__aeabi_fcmplt>
 8002542:	4682      	mov	sl, r0
 8002544:	2800      	cmp	r0, #0
 8002546:	d000      	beq.n	800254a <envelope_create_service+0x48c>
 8002548:	e1b4      	b.n	80028b4 <envelope_create_service+0x7f6>
 800254a:	49a1      	ldr	r1, [pc, #644]	; (80027d0 <envelope_create_service+0x712>)
 800254c:	1c38      	adds	r0, r7, #0
 800254e:	f00c ff29 	bl	800f3a4 <__aeabi_fcmpgt>
 8002552:	2800      	cmp	r0, #0
 8002554:	d000      	beq.n	8002558 <envelope_create_service+0x49a>
 8002556:	e1af      	b.n	80028b8 <envelope_create_service+0x7fa>
 8002558:	4643      	mov	r3, r8
 800255a:	63df      	str	r7, [r3, #60]	; 0x3c
 800255c:	464b      	mov	r3, r9
 800255e:	2b00      	cmp	r3, #0
 8002560:	d100      	bne.n	8002564 <envelope_create_service+0x4a6>
 8002562:	e28c      	b.n	8002a7e <envelope_create_service+0x9c0>
 8002564:	4642      	mov	r2, r8
 8002566:	4b9b      	ldr	r3, [pc, #620]	; (80027d4 <envelope_create_service+0x716>)
 8002568:	007f      	lsls	r7, r7, #1
 800256a:	087f      	lsrs	r7, r7, #1
 800256c:	6393      	str	r3, [r2, #56]	; 0x38
 800256e:	499a      	ldr	r1, [pc, #616]	; (80027d8 <envelope_create_service+0x71a>)
 8002570:	1c38      	adds	r0, r7, #0
 8002572:	f00c ff17 	bl	800f3a4 <__aeabi_fcmpgt>
 8002576:	2800      	cmp	r0, #0
 8002578:	d000      	beq.n	800257c <envelope_create_service+0x4be>
 800257a:	4f97      	ldr	r7, [pc, #604]	; (80027d8 <envelope_create_service+0x71a>)
 800257c:	2191      	movs	r1, #145	; 0x91
 800257e:	1c38      	adds	r0, r7, #0
 8002580:	05c9      	lsls	r1, r1, #23
 8002582:	f00c fa03 	bl	800e98c <__aeabi_fmul>
 8002586:	f011 f867 	bl	8013658 <roundf>
 800258a:	21da      	movs	r1, #218	; 0xda
 800258c:	0589      	lsls	r1, r1, #22
 800258e:	f00c f9fd 	bl	800e98c <__aeabi_fmul>
 8002592:	4992      	ldr	r1, [pc, #584]	; (80027dc <envelope_create_service+0x71e>)
 8002594:	f00c f9fa 	bl	800e98c <__aeabi_fmul>
 8002598:	1c01      	adds	r1, r0, #0
 800259a:	1c07      	adds	r7, r0, #0
 800259c:	4890      	ldr	r0, [pc, #576]	; (80027e0 <envelope_create_service+0x722>)
 800259e:	f00c fb27 	bl	800ebf0 <__aeabi_fsub>
 80025a2:	4990      	ldr	r1, [pc, #576]	; (80027e4 <envelope_create_service+0x726>)
 80025a4:	f00c fb24 	bl	800ebf0 <__aeabi_fsub>
 80025a8:	4680      	mov	r8, r0
 80025aa:	1c01      	adds	r1, r0, #0
 80025ac:	1c38      	adds	r0, r7, #0
 80025ae:	f00c fee5 	bl	800f37c <__aeabi_fcmplt>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d100      	bne.n	80025b8 <envelope_create_service+0x4fa>
 80025b6:	e183      	b.n	80028c0 <envelope_create_service+0x802>
 80025b8:	2100      	movs	r1, #0
 80025ba:	1c38      	adds	r0, r7, #0
 80025bc:	f00a fbab 	bl	800cd16 <quarter_pi_cos_sin_f32.lto_priv.682>
 80025c0:	2101      	movs	r1, #1
 80025c2:	4681      	mov	r9, r0
 80025c4:	1c38      	adds	r0, r7, #0
 80025c6:	f00a fba6 	bl	800cd16 <quarter_pi_cos_sin_f32.lto_priv.682>
 80025ca:	1c01      	adds	r1, r0, #0
 80025cc:	4648      	mov	r0, r9
 80025ce:	f00c f8cb 	bl	800e768 <__aeabi_fdiv>
 80025d2:	4985      	ldr	r1, [pc, #532]	; (80027e8 <envelope_create_service+0x72a>)
 80025d4:	f00c f9da 	bl	800e98c <__aeabi_fmul>
 80025d8:	4984      	ldr	r1, [pc, #528]	; (80027ec <envelope_create_service+0x72e>)
 80025da:	1c07      	adds	r7, r0, #0
 80025dc:	f00b ff2a 	bl	800e434 <__aeabi_fadd>
 80025e0:	1c39      	adds	r1, r7, #0
 80025e2:	f00c f9d3 	bl	800e98c <__aeabi_fmul>
 80025e6:	4981      	ldr	r1, [pc, #516]	; (80027ec <envelope_create_service+0x72e>)
 80025e8:	4680      	mov	r8, r0
 80025ea:	1c38      	adds	r0, r7, #0
 80025ec:	f00c f9ce 	bl	800e98c <__aeabi_fmul>
 80025f0:	21fe      	movs	r1, #254	; 0xfe
 80025f2:	0589      	lsls	r1, r1, #22
 80025f4:	f00b ff1e 	bl	800e434 <__aeabi_fadd>
 80025f8:	1c01      	adds	r1, r0, #0
 80025fa:	4640      	mov	r0, r8
 80025fc:	f00c f8b4 	bl	800e768 <__aeabi_fdiv>
 8002600:	1c01      	adds	r1, r0, #0
 8002602:	1c07      	adds	r7, r0, #0
 8002604:	f00c f9c2 	bl	800e98c <__aeabi_fmul>
 8002608:	21fe      	movs	r1, #254	; 0xfe
 800260a:	0589      	lsls	r1, r1, #22
 800260c:	f00b ff12 	bl	800e434 <__aeabi_fadd>
 8002610:	f010 fc0c 	bl	8012e2c <__ieee754_sqrtf>
 8002614:	1c01      	adds	r1, r0, #0
 8002616:	20fe      	movs	r0, #254	; 0xfe
 8002618:	0580      	lsls	r0, r0, #22
 800261a:	f00c f8a5 	bl	800e768 <__aeabi_fdiv>
 800261e:	2181      	movs	r1, #129	; 0x81
 8002620:	4680      	mov	r8, r0
 8002622:	05c9      	lsls	r1, r1, #23
 8002624:	1c38      	adds	r0, r7, #0
 8002626:	f00c fea9 	bl	800f37c <__aeabi_fcmplt>
 800262a:	2800      	cmp	r0, #0
 800262c:	d100      	bne.n	8002630 <envelope_create_service+0x572>
 800262e:	e15e      	b.n	80028ee <envelope_create_service+0x830>
 8002630:	21fe      	movs	r1, #254	; 0xfe
 8002632:	1c38      	adds	r0, r7, #0
 8002634:	0589      	lsls	r1, r1, #22
 8002636:	f00c feb5 	bl	800f3a4 <__aeabi_fcmpgt>
 800263a:	2800      	cmp	r0, #0
 800263c:	d100      	bne.n	8002640 <envelope_create_service+0x582>
 800263e:	e149      	b.n	80028d4 <envelope_create_service+0x816>
 8002640:	218a      	movs	r1, #138	; 0x8a
 8002642:	4640      	mov	r0, r8
 8002644:	05c9      	lsls	r1, r1, #23
 8002646:	f00c f9a1 	bl	800e98c <__aeabi_fmul>
 800264a:	21fc      	movs	r1, #252	; 0xfc
 800264c:	0589      	lsls	r1, r1, #22
 800264e:	f00b fef1 	bl	800e434 <__aeabi_fadd>
 8002652:	f00d f8af 	bl	800f7b4 <__aeabi_f2iz>
 8002656:	0043      	lsls	r3, r0, #1
 8002658:	4698      	mov	r8, r3
 800265a:	4643      	mov	r3, r8
 800265c:	4642      	mov	r2, r8
 800265e:	2080      	movs	r0, #128	; 0x80
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4353      	muls	r3, r2
 8002664:	04c0      	lsls	r0, r0, #19
 8002666:	1ac0      	subs	r0, r0, r3
 8002668:	f00d f90e 	bl	800f888 <__aeabi_ui2f>
 800266c:	f010 fbde 	bl	8012e2c <__ieee754_sqrtf>
 8002670:	21fc      	movs	r1, #252	; 0xfc
 8002672:	0589      	lsls	r1, r1, #22
 8002674:	f00b fede 	bl	800e434 <__aeabi_fadd>
 8002678:	f00d f89c 	bl	800f7b4 <__aeabi_f2iz>
 800267c:	0007      	movs	r7, r0
 800267e:	239f      	movs	r3, #159	; 0x9f
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4699      	mov	r9, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	015b      	lsls	r3, r3, #5
 8002688:	469a      	mov	sl, r3
 800268a:	4643      	mov	r3, r8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d000      	beq.n	8002692 <envelope_create_service+0x5d4>
 8002690:	e151      	b.n	8002936 <envelope_create_service+0x878>
 8002692:	229e      	movs	r2, #158	; 0x9e
 8002694:	21fc      	movs	r1, #252	; 0xfc
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	0589      	lsls	r1, r1, #22
 800269a:	50a1      	str	r1, [r4, r2]
 800269c:	4653      	mov	r3, sl
 800269e:	464a      	mov	r2, r9
 80026a0:	50a3      	str	r3, [r4, r2]
 80026a2:	23a0      	movs	r3, #160	; 0xa0
 80026a4:	4642      	mov	r2, r8
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	50e2      	str	r2, [r4, r3]
 80026aa:	3304      	adds	r3, #4
 80026ac:	52e2      	strh	r2, [r4, r3]
 80026ae:	465b      	mov	r3, fp
 80026b0:	4a4f      	ldr	r2, [pc, #316]	; (80027f0 <envelope_create_service+0x732>)
 80026b2:	4950      	ldr	r1, [pc, #320]	; (80027f4 <envelope_create_service+0x736>)
 80026b4:	2000      	movs	r0, #0
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	4798      	blx	r3
 80026ba:	a80b      	add	r0, sp, #44	; 0x2c
 80026bc:	f004 f91c 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d010      	beq.n	80026e6 <envelope_create_service+0x628>
 80026c4:	ab11      	add	r3, sp, #68	; 0x44
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00c      	beq.n	80026e6 <envelope_create_service+0x628>
 80026cc:	23a4      	movs	r3, #164	; 0xa4
 80026ce:	494a      	ldr	r1, [pc, #296]	; (80027f8 <envelope_create_service+0x73a>)
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	18e3      	adds	r3, r4, r3
 80026d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80026d6:	6059      	str	r1, [r3, #4]
 80026d8:	4948      	ldr	r1, [pc, #288]	; (80027fc <envelope_create_service+0x73e>)
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
 80026dc:	6099      	str	r1, [r3, #8]
 80026de:	4a48      	ldr	r2, [pc, #288]	; (8002800 <envelope_create_service+0x742>)
 80026e0:	4948      	ldr	r1, [pc, #288]	; (8002804 <envelope_create_service+0x746>)
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
 80026e4:	60d9      	str	r1, [r3, #12]
 80026e6:	23b4      	movs	r3, #180	; 0xb4
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4699      	mov	r9, r3
 80026ec:	44a1      	add	r9, r4
 80026ee:	464a      	mov	r2, r9
 80026f0:	4b45      	ldr	r3, [pc, #276]	; (8002808 <envelope_create_service+0x74a>)
 80026f2:	a80b      	add	r0, sp, #44	; 0x2c
 80026f4:	6053      	str	r3, [r2, #4]
 80026f6:	4b45      	ldr	r3, [pc, #276]	; (800280c <envelope_create_service+0x74e>)
 80026f8:	6093      	str	r3, [r2, #8]
 80026fa:	4b45      	ldr	r3, [pc, #276]	; (8002810 <envelope_create_service+0x752>)
 80026fc:	60d3      	str	r3, [r2, #12]
 80026fe:	4b45      	ldr	r3, [pc, #276]	; (8002814 <envelope_create_service+0x756>)
 8002700:	6393      	str	r3, [r2, #56]	; 0x38
 8002702:	23c3      	movs	r3, #195	; 0xc3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4698      	mov	r8, r3
 8002708:	44a0      	add	r8, r4
 800270a:	4642      	mov	r2, r8
 800270c:	4b42      	ldr	r3, [pc, #264]	; (8002818 <envelope_create_service+0x75a>)
 800270e:	6393      	str	r3, [r2, #56]	; 0x38
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <envelope_create_service+0x6ca>)
 8002712:	6053      	str	r3, [r2, #4]
 8002714:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <envelope_create_service+0x6d2>)
 8002716:	6093      	str	r3, [r2, #8]
 8002718:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <envelope_create_service+0x6d6>)
 800271a:	60d3      	str	r3, [r2, #12]
 800271c:	23d2      	movs	r3, #210	; 0xd2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	18e7      	adds	r7, r4, r3
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <envelope_create_service+0x75e>)
 8002724:	643b      	str	r3, [r7, #64]	; 0x40
 8002726:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <envelope_create_service+0x762>)
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <envelope_create_service+0x766>)
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <envelope_create_service+0x76a>)
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	0023      	movs	r3, r4
 8002734:	3378      	adds	r3, #120	; 0x78
 8002736:	63a3      	str	r3, [r4, #56]	; 0x38
 8002738:	3340      	adds	r3, #64	; 0x40
 800273a:	67a3      	str	r3, [r4, #120]	; 0x78
 800273c:	f7ff fcab 	bl	8002096 <acc_base_configuration_noise_level_normalization_get>
 8002740:	0023      	movs	r3, r4
 8002742:	3339      	adds	r3, #57	; 0x39
 8002744:	33ff      	adds	r3, #255	; 0xff
 8002746:	2800      	cmp	r0, #0
 8002748:	d000      	beq.n	800274c <envelope_create_service+0x68e>
 800274a:	e19c      	b.n	8002a86 <envelope_create_service+0x9c8>
 800274c:	e06e      	b.n	800282c <envelope_create_service+0x76e>
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	200002b0 	.word	0x200002b0
 8002754:	0800ccdd 	.word	0x0800ccdd
 8002758:	0800a491 	.word	0x0800a491
 800275c:	0800a43b 	.word	0x0800a43b
 8002760:	0800a81b 	.word	0x0800a81b
 8002764:	080050c9 	.word	0x080050c9
 8002768:	08005073 	.word	0x08005073
 800276c:	08005167 	.word	0x08005167
 8002770:	080053b9 	.word	0x080053b9
 8002774:	08004cd7 	.word	0x08004cd7
 8002778:	08004cbd 	.word	0x08004cbd
 800277c:	08004c69 	.word	0x08004c69
 8002780:	0800513f 	.word	0x0800513f
 8002784:	08004f45 	.word	0x08004f45
 8002788:	08005189 	.word	0x08005189
 800278c:	08004df9 	.word	0x08004df9
 8002790:	08004ef1 	.word	0x08004ef1
 8002794:	0800515f 	.word	0x0800515f
 8002798:	08004d41 	.word	0x08004d41
 800279c:	08005147 	.word	0x08005147
 80027a0:	08005219 	.word	0x08005219
 80027a4:	0800a579 	.word	0x0800a579
 80027a8:	0800a509 	.word	0x0800a509
 80027ac:	0800a823 	.word	0x0800a823
 80027b0:	0800a82b 	.word	0x0800a82b
 80027b4:	08004ee1 	.word	0x08004ee1
 80027b8:	08004e8b 	.word	0x08004e8b
 80027bc:	08005157 	.word	0x08005157
 80027c0:	08004e79 	.word	0x08004e79
 80027c4:	08004e09 	.word	0x08004e09
 80027c8:	0800514f 	.word	0x0800514f
 80027cc:	3b843809 	.word	0x3b843809
 80027d0:	3efdca08 	.word	0x3efdca08
 80027d4:	08005367 	.word	0x08005367
 80027d8:	3effffde 	.word	0x3effffde
 80027dc:	40490fdb 	.word	0x40490fdb
 80027e0:	3fc90fdb 	.word	0x3fc90fdb
 80027e4:	333bbd2e 	.word	0x333bbd2e
 80027e8:	3f9f8d77 	.word	0x3f9f8d77
 80027ec:	3fb504f3 	.word	0x3fb504f3
 80027f0:	0801c1f2 	.word	0x0801c1f2
 80027f4:	0801c21b 	.word	0x0801c21b
 80027f8:	0800a7e9 	.word	0x0800a7e9
 80027fc:	0800a341 	.word	0x0800a341
 8002800:	0800a3b5 	.word	0x0800a3b5
 8002804:	0800a3a5 	.word	0x0800a3a5
 8002808:	0800516f 	.word	0x0800516f
 800280c:	080050e1 	.word	0x080050e1
 8002810:	08005135 	.word	0x08005135
 8002814:	080051e5 	.word	0x080051e5
 8002818:	08005057 	.word	0x08005057
 800281c:	0800086b 	.word	0x0800086b
 8002820:	0800a32b 	.word	0x0800a32b
 8002824:	0800a2c1 	.word	0x0800a2c1
 8002828:	0800a329 	.word	0x0800a329
 800282c:	6033      	str	r3, [r6, #0]
 800282e:	0023      	movs	r3, r4
 8002830:	229c      	movs	r2, #156	; 0x9c
 8002832:	3375      	adds	r3, #117	; 0x75
 8002834:	0052      	lsls	r2, r2, #1
 8002836:	33ff      	adds	r3, #255	; 0xff
 8002838:	50a3      	str	r3, [r4, r2]
 800283a:	323c      	adds	r2, #60	; 0x3c
 800283c:	3344      	adds	r3, #68	; 0x44
 800283e:	50a3      	str	r3, [r4, r2]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	3244      	adds	r2, #68	; 0x44
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	50a3      	str	r3, [r4, r2]
 800284a:	238f      	movs	r3, #143	; 0x8f
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	18e3      	adds	r3, r4, r3
 8002850:	3248      	adds	r2, #72	; 0x48
 8002852:	50a3      	str	r3, [r4, r2]
 8002854:	a80b      	add	r0, sp, #44	; 0x2c
 8002856:	f004 f84f 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800285a:	464b      	mov	r3, r9
 800285c:	2800      	cmp	r0, #0
 800285e:	d007      	beq.n	8002870 <envelope_create_service+0x7b2>
 8002860:	aa11      	add	r2, sp, #68	; 0x44
 8002862:	7812      	ldrb	r2, [r2, #0]
 8002864:	2a00      	cmp	r2, #0
 8002866:	d003      	beq.n	8002870 <envelope_create_service+0x7b2>
 8002868:	22a4      	movs	r2, #164	; 0xa4
 800286a:	0092      	lsls	r2, r2, #2
 800286c:	50a3      	str	r3, [r4, r2]
 800286e:	18a3      	adds	r3, r4, r2
 8002870:	228f      	movs	r2, #143	; 0x8f
 8002872:	0092      	lsls	r2, r2, #2
 8002874:	50a3      	str	r3, [r4, r2]
 8002876:	23b4      	movs	r3, #180	; 0xb4
 8002878:	4642      	mov	r2, r8
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	50e2      	str	r2, [r4, r3]
 800287e:	333c      	adds	r3, #60	; 0x3c
 8002880:	50e7      	str	r7, [r4, r3]
 8002882:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002884:	6883      	ldr	r3, [r0, #8]
 8002886:	4798      	blx	r3
 8002888:	1e06      	subs	r6, r0, #0
 800288a:	d000      	beq.n	800288e <envelope_create_service+0x7d0>
 800288c:	e100      	b.n	8002a90 <envelope_create_service+0x9d2>
 800288e:	465b      	mov	r3, fp
 8002890:	4a87      	ldr	r2, [pc, #540]	; (8002ab0 <envelope_create_service+0x9f2>)
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	4987      	ldr	r1, [pc, #540]	; (8002ab4 <envelope_create_service+0x9f6>)
 8002896:	4798      	blx	r3
 8002898:	e4c0      	b.n	800221c <envelope_create_service+0x15e>
 800289a:	a80b      	add	r0, sp, #44	; 0x2c
 800289c:	f005 fc0c 	bl	80080b8 <acc_base_configuration_print.part.5>
 80028a0:	e58a      	b.n	80023b8 <envelope_create_service+0x2fa>
 80028a2:	2300      	movs	r3, #0
 80028a4:	4699      	mov	r9, r3
 80028a6:	e5f5      	b.n	8002494 <envelope_create_service+0x3d6>
 80028a8:	21bf      	movs	r1, #191	; 0xbf
 80028aa:	0609      	lsls	r1, r1, #24
 80028ac:	e60e      	b.n	80024cc <envelope_create_service+0x40e>
 80028ae:	27fc      	movs	r7, #252	; 0xfc
 80028b0:	05bf      	lsls	r7, r7, #22
 80028b2:	e651      	b.n	8002558 <envelope_create_service+0x49a>
 80028b4:	4f80      	ldr	r7, [pc, #512]	; (8002ab8 <envelope_create_service+0x9fa>)
 80028b6:	e64f      	b.n	8002558 <envelope_create_service+0x49a>
 80028b8:	27fc      	movs	r7, #252	; 0xfc
 80028ba:	46d1      	mov	r9, sl
 80028bc:	05bf      	lsls	r7, r7, #22
 80028be:	e64b      	b.n	8002558 <envelope_create_service+0x49a>
 80028c0:	2101      	movs	r1, #1
 80028c2:	4640      	mov	r0, r8
 80028c4:	f00a fa27 	bl	800cd16 <quarter_pi_cos_sin_f32.lto_priv.682>
 80028c8:	2100      	movs	r1, #0
 80028ca:	4681      	mov	r9, r0
 80028cc:	4640      	mov	r0, r8
 80028ce:	f00a fa22 	bl	800cd16 <quarter_pi_cos_sin_f32.lto_priv.682>
 80028d2:	e67a      	b.n	80025ca <envelope_create_service+0x50c>
 80028d4:	218b      	movs	r1, #139	; 0x8b
 80028d6:	4640      	mov	r0, r8
 80028d8:	05c9      	lsls	r1, r1, #23
 80028da:	f00c f857 	bl	800e98c <__aeabi_fmul>
 80028de:	21fc      	movs	r1, #252	; 0xfc
 80028e0:	0589      	lsls	r1, r1, #22
 80028e2:	f00b fda7 	bl	800e434 <__aeabi_fadd>
 80028e6:	f00c ff65 	bl	800f7b4 <__aeabi_f2iz>
 80028ea:	4680      	mov	r8, r0
 80028ec:	e6b5      	b.n	800265a <envelope_create_service+0x59c>
 80028ee:	218c      	movs	r1, #140	; 0x8c
 80028f0:	1c38      	adds	r0, r7, #0
 80028f2:	05c9      	lsls	r1, r1, #23
 80028f4:	f00c f84a 	bl	800e98c <__aeabi_fmul>
 80028f8:	4641      	mov	r1, r8
 80028fa:	f00c f847 	bl	800e98c <__aeabi_fmul>
 80028fe:	21fc      	movs	r1, #252	; 0xfc
 8002900:	0589      	lsls	r1, r1, #22
 8002902:	f00b fd97 	bl	800e434 <__aeabi_fadd>
 8002906:	f00c ff55 	bl	800f7b4 <__aeabi_f2iz>
 800290a:	0003      	movs	r3, r0
 800290c:	0007      	movs	r7, r0
 800290e:	4343      	muls	r3, r0
 8002910:	2080      	movs	r0, #128	; 0x80
 8002912:	04c0      	lsls	r0, r0, #19
 8002914:	1ac0      	subs	r0, r0, r3
 8002916:	f00c ffb7 	bl	800f888 <__aeabi_ui2f>
 800291a:	f010 fa87 	bl	8012e2c <__ieee754_sqrtf>
 800291e:	21fc      	movs	r1, #252	; 0xfc
 8002920:	0589      	lsls	r1, r1, #22
 8002922:	f00c f833 	bl	800e98c <__aeabi_fmul>
 8002926:	21fc      	movs	r1, #252	; 0xfc
 8002928:	0589      	lsls	r1, r1, #22
 800292a:	f00b fd83 	bl	800e434 <__aeabi_fadd>
 800292e:	f00c ff41 	bl	800f7b4 <__aeabi_f2iz>
 8002932:	4680      	mov	r8, r0
 8002934:	e6a3      	b.n	800267e <envelope_create_service+0x5c0>
 8002936:	4642      	mov	r2, r8
 8002938:	4653      	mov	r3, sl
 800293a:	b292      	uxth	r2, r2
 800293c:	1a99      	subs	r1, r3, r2
 800293e:	464b      	mov	r3, r9
 8002940:	b289      	uxth	r1, r1
 8002942:	b208      	sxth	r0, r1
 8002944:	52e0      	strh	r0, [r4, r3]
 8002946:	004b      	lsls	r3, r1, #1
 8002948:	4699      	mov	r9, r3
 800294a:	239f      	movs	r3, #159	; 0x9f
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	18e1      	adds	r1, r4, r3
 8002950:	464b      	mov	r3, r9
 8002952:	8088      	strh	r0, [r1, #4]
 8002954:	0052      	lsls	r2, r2, #1
 8002956:	b2b8      	uxth	r0, r7
 8002958:	1a82      	subs	r2, r0, r2
 800295a:	80ca      	strh	r2, [r1, #6]
 800295c:	22c0      	movs	r2, #192	; 0xc0
 800295e:	804b      	strh	r3, [r1, #2]
 8002960:	4643      	mov	r3, r8
 8002962:	0152      	lsls	r2, r2, #5
 8002964:	1ad2      	subs	r2, r2, r3
 8002966:	0052      	lsls	r2, r2, #1
 8002968:	1a10      	subs	r0, r2, r0
 800296a:	8108      	strh	r0, [r1, #8]
 800296c:	2f00      	cmp	r7, #0
 800296e:	d104      	bne.n	800297a <envelope_create_service+0x8bc>
 8002970:	239e      	movs	r3, #158	; 0x9e
 8002972:	9a02      	ldr	r2, [sp, #8]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	50e2      	str	r2, [r4, r3]
 8002978:	e699      	b.n	80026ae <envelope_create_service+0x5f0>
 800297a:	4652      	mov	r2, sl
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	4642      	mov	r2, r8
 8002980:	0090      	lsls	r0, r2, #2
 8002982:	4350      	muls	r0, r2
 8002984:	003a      	movs	r2, r7
 8002986:	437a      	muls	r2, r7
 8002988:	1880      	adds	r0, r0, r2
 800298a:	22fc      	movs	r2, #252	; 0xfc
 800298c:	0612      	lsls	r2, r2, #24
 800298e:	4694      	mov	ip, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	1bdb      	subs	r3, r3, r7
 8002994:	435b      	muls	r3, r3
 8002996:	4460      	add	r0, ip
 8002998:	0042      	lsls	r2, r0, #1
 800299a:	1a98      	subs	r0, r3, r2
 800299c:	4690      	mov	r8, r2
 800299e:	f00c ff29 	bl	800f7f4 <__aeabi_i2f>
 80029a2:	4682      	mov	sl, r0
 80029a4:	4640      	mov	r0, r8
 80029a6:	f00c ff25 	bl	800f7f4 <__aeabi_i2f>
 80029aa:	4651      	mov	r1, sl
 80029ac:	f00b fedc 	bl	800e768 <__aeabi_fdiv>
 80029b0:	4942      	ldr	r1, [pc, #264]	; (8002abc <envelope_create_service+0x9fe>)
 80029b2:	4680      	mov	r8, r0
 80029b4:	f00b fd3e 	bl	800e434 <__aeabi_fadd>
 80029b8:	4681      	mov	r9, r0
 80029ba:	4650      	mov	r0, sl
 80029bc:	f010 fa36 	bl	8012e2c <__ieee754_sqrtf>
 80029c0:	4682      	mov	sl, r0
 80029c2:	2080      	movs	r0, #128	; 0x80
 80029c4:	0180      	lsls	r0, r0, #6
 80029c6:	1bc0      	subs	r0, r0, r7
 80029c8:	0040      	lsls	r0, r0, #1
 80029ca:	f00c ff13 	bl	800f7f4 <__aeabi_i2f>
 80029ce:	1c01      	adds	r1, r0, #0
 80029d0:	4650      	mov	r0, sl
 80029d2:	f00b fec9 	bl	800e768 <__aeabi_fdiv>
 80029d6:	493a      	ldr	r1, [pc, #232]	; (8002ac0 <envelope_create_service+0xa02>)
 80029d8:	1c07      	adds	r7, r0, #0
 80029da:	4648      	mov	r0, r9
 80029dc:	f00b ffd6 	bl	800e98c <__aeabi_fmul>
 80029e0:	4649      	mov	r1, r9
 80029e2:	f00b ffd3 	bl	800e98c <__aeabi_fmul>
 80029e6:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <envelope_create_service+0xa06>)
 80029e8:	f00b fd24 	bl	800e434 <__aeabi_fadd>
 80029ec:	f010 fa1e 	bl	8012e2c <__ieee754_sqrtf>
 80029f0:	4641      	mov	r1, r8
 80029f2:	f00c f8fd 	bl	800ebf0 <__aeabi_fsub>
 80029f6:	f010 fa19 	bl	8012e2c <__ieee754_sqrtf>
 80029fa:	1c01      	adds	r1, r0, #0
 80029fc:	1c38      	adds	r0, r7, #0
 80029fe:	f00b ffc5 	bl	800e98c <__aeabi_fmul>
 8002a02:	4931      	ldr	r1, [pc, #196]	; (8002ac8 <envelope_create_service+0xa0a>)
 8002a04:	4680      	mov	r8, r0
 8002a06:	f00c fcb9 	bl	800f37c <__aeabi_fcmplt>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d135      	bne.n	8002a7a <envelope_create_service+0x9bc>
 8002a0e:	21fe      	movs	r1, #254	; 0xfe
 8002a10:	4640      	mov	r0, r8
 8002a12:	0589      	lsls	r1, r1, #22
 8002a14:	f00c fcc6 	bl	800f3a4 <__aeabi_fcmpgt>
 8002a18:	4f2c      	ldr	r7, [pc, #176]	; (8002acc <envelope_create_service+0xa0e>)
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d022      	beq.n	8002a64 <envelope_create_service+0x9a6>
 8002a1e:	20fe      	movs	r0, #254	; 0xfe
 8002a20:	4641      	mov	r1, r8
 8002a22:	0580      	lsls	r0, r0, #22
 8002a24:	f00b fea0 	bl	800e768 <__aeabi_fdiv>
 8002a28:	4680      	mov	r8, r0
 8002a2a:	0038      	movs	r0, r7
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	2109      	movs	r1, #9
 8002a30:	3078      	adds	r0, #120	; 0x78
 8002a32:	f00a f957 	bl	800cce4 <eval_even_poly_f32.lto_priv.683>
 8002a36:	1c01      	adds	r1, r0, #0
 8002a38:	4640      	mov	r0, r8
 8002a3a:	f00b ffa7 	bl	800e98c <__aeabi_fmul>
 8002a3e:	1c01      	adds	r1, r0, #0
 8002a40:	4823      	ldr	r0, [pc, #140]	; (8002ad0 <envelope_create_service+0xa12>)
 8002a42:	f00c f8d5 	bl	800ebf0 <__aeabi_fsub>
 8002a46:	4923      	ldr	r1, [pc, #140]	; (8002ad4 <envelope_create_service+0xa16>)
 8002a48:	f00c f8d2 	bl	800ebf0 <__aeabi_fsub>
 8002a4c:	4922      	ldr	r1, [pc, #136]	; (8002ad8 <envelope_create_service+0xa1a>)
 8002a4e:	f00b fe8b 	bl	800e768 <__aeabi_fdiv>
 8002a52:	239e      	movs	r3, #158	; 0x9e
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	50e0      	str	r0, [r4, r3]
 8002a58:	238f      	movs	r3, #143	; 0x8f
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	18e3      	adds	r3, r4, r3
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	6363      	str	r3, [r4, #52]	; 0x34
 8002a62:	e62a      	b.n	80026ba <envelope_create_service+0x5fc>
 8002a64:	0038      	movs	r0, r7
 8002a66:	4642      	mov	r2, r8
 8002a68:	2109      	movs	r1, #9
 8002a6a:	3078      	adds	r0, #120	; 0x78
 8002a6c:	f00a f93a 	bl	800cce4 <eval_even_poly_f32.lto_priv.683>
 8002a70:	1c01      	adds	r1, r0, #0
 8002a72:	4640      	mov	r0, r8
 8002a74:	f00b ff8a 	bl	800e98c <__aeabi_fmul>
 8002a78:	e7e8      	b.n	8002a4c <envelope_create_service+0x98e>
 8002a7a:	4818      	ldr	r0, [pc, #96]	; (8002adc <envelope_create_service+0xa1e>)
 8002a7c:	e7e6      	b.n	8002a4c <envelope_create_service+0x98e>
 8002a7e:	4642      	mov	r2, r8
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <envelope_create_service+0xa22>)
 8002a82:	6393      	str	r3, [r2, #56]	; 0x38
 8002a84:	e7e8      	b.n	8002a58 <envelope_create_service+0x99a>
 8002a86:	0022      	movs	r2, r4
 8002a88:	32f8      	adds	r2, #248	; 0xf8
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	0013      	movs	r3, r2
 8002a8e:	e6cd      	b.n	800282c <envelope_create_service+0x76e>
 8002a90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a92:	68c3      	ldr	r3, [r0, #12]
 8002a94:	4798      	blx	r3
 8002a96:	23e1      	movs	r3, #225	; 0xe1
 8002a98:	9a01      	ldr	r2, [sp, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	50e2      	str	r2, [r4, r3]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <envelope_create_service+0xa26>)
 8002aa0:	606b      	str	r3, [r5, #4]
 8002aa2:	4b11      	ldr	r3, [pc, #68]	; (8002ae8 <envelope_create_service+0xa2a>)
 8002aa4:	60ab      	str	r3, [r5, #8]
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <envelope_create_service+0xa2e>)
 8002aa8:	60eb      	str	r3, [r5, #12]
 8002aaa:	f7ff fb97 	bl	80021dc <envelope_create_service+0x11e>
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	0801c0cf 	.word	0x0801c0cf
 8002ab4:	0801c233 	.word	0x0801c233
 8002ab8:	3b843809 	.word	0x3b843809
 8002abc:	3f15f61a 	.word	0x3f15f61a
 8002ac0:	3fb504f3 	.word	0x3fb504f3
 8002ac4:	3f95f61a 	.word	0x3f95f61a
 8002ac8:	bf800000 	.word	0xbf800000
 8002acc:	08015b34 	.word	0x08015b34
 8002ad0:	3fc90fdb 	.word	0x3fc90fdb
 8002ad4:	333bbd2e 	.word	0x333bbd2e
 8002ad8:	40490fdb 	.word	0x40490fdb
 8002adc:	7fc00000 	.word	0x7fc00000
 8002ae0:	08004e89 	.word	0x08004e89
 8002ae4:	08005c0d 	.word	0x08005c0d
 8002ae8:	08005bf9 	.word	0x08005bf9
 8002aec:	08006329 	.word	0x08006329

08002af0 <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	0004      	movs	r4, r0
 8002af4:	f003 ff00 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002af8:	2300      	movs	r3, #0
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d001      	beq.n	8002b02 <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 8002afe:	3460      	adds	r4, #96	; 0x60
 8002b00:	8823      	ldrh	r3, [r4, #0]
 8002b02:	0018      	movs	r0, r3
 8002b04:	bd10      	pop	{r4, pc}

08002b06 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 8002b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b08:	4645      	mov	r5, r8
 8002b0a:	46de      	mov	lr, fp
 8002b0c:	4657      	mov	r7, sl
 8002b0e:	464e      	mov	r6, r9
 8002b10:	b5e0      	push	{r5, r6, r7, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8002b12:	4d4c      	ldr	r5, [pc, #304]	; (8002c44 <sparse_data_malloc+0x13e>)
int8_t sparse_data_malloc(void){
 8002b14:	b083      	sub	sp, #12
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8002b16:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8002b18:	0020      	movs	r0, r4
 8002b1a:	f7fd fb01 	bl	8000120 <acc_service_configuration_valid>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d102      	bne.n	8002b28 <sparse_data_malloc+0x22>
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <sparse_data_malloc+0x142>)
 8002b24:	8018      	strh	r0, [r3, #0]
 8002b26:	deff      	udf	#255	; 0xff
 8002b28:	6920      	ldr	r0, [r4, #16]
 8002b2a:	f7ff ffe1 	bl	8002af0 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <sparse_data_malloc+0x142>)
 8002b30:	0004      	movs	r4, r0
 8002b32:	8018      	strh	r0, [r3, #0]
 8002b34:	4698      	mov	r8, r3
	bins = sparse_metadata.data_length/sweeps;
 8002b36:	2340      	movs	r3, #64	; 0x40
 8002b38:	0021      	movs	r1, r4
 8002b3a:	5ae8      	ldrh	r0, [r5, r3]
 8002b3c:	f00c fa58 	bl	800eff0 <__udivsi3>
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <sparse_data_malloc+0x146>)
 8002b42:	b285      	uxth	r5, r0
 8002b44:	469a      	mov	sl, r3
 8002b46:	801d      	strh	r5, [r3, #0]
	if(far_active){
 8002b48:	4b41      	ldr	r3, [pc, #260]	; (8002c50 <sparse_data_malloc+0x14a>)
 8002b4a:	7c1a      	ldrb	r2, [r3, #16]
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d007      	beq.n	8002b60 <sparse_data_malloc+0x5a>
		bins += sparse_metadata_far.data_length/sweeps;
 8002b50:	8b98      	ldrh	r0, [r3, #28]
 8002b52:	0021      	movs	r1, r4
 8002b54:	f00c fa4c 	bl	800eff0 <__udivsi3>
 8002b58:	4653      	mov	r3, sl
 8002b5a:	182d      	adds	r5, r5, r0
 8002b5c:	b2ad      	uxth	r5, r5
 8002b5e:	801d      	strh	r5, [r3, #0]
	DBG_PRINTLN("accumulant malloc sweeps: %d", sweeps);
 8002b60:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <sparse_data_malloc+0x14e>)
	accumulant_malloc(sweeps/2,bins);
 8002b62:	0864      	lsrs	r4, r4, #1
	DBG_PRINTLN("accumulant malloc sweeps: %d", sweeps);
 8002b64:	0018      	movs	r0, r3
	accumulant_malloc(sweeps/2,bins);
 8002b66:	b2a4      	uxth	r4, r4
	DBG_PRINTLN("accumulant malloc sweeps: %d", sweeps);
 8002b68:	4699      	mov	r9, r3
 8002b6a:	f012 fbd7 	bl	801531c <__wrap_printf>
 8002b6e:	0021      	movs	r1, r4
 8002b70:	4839      	ldr	r0, [pc, #228]	; (8002c58 <sparse_data_malloc+0x152>)
 8002b72:	f012 fbd3 	bl	801531c <__wrap_printf>
 8002b76:	228c      	movs	r2, #140	; 0x8c
 8002b78:	4f38      	ldr	r7, [pc, #224]	; (8002c5c <sparse_data_malloc+0x156>)
 8002b7a:	4e39      	ldr	r6, [pc, #228]	; (8002c60 <sparse_data_malloc+0x15a>)
 8002b7c:	32ff      	adds	r2, #255	; 0xff
 8002b7e:	0039      	movs	r1, r7
 8002b80:	0030      	movs	r0, r6
 8002b82:	f012 fbcb 	bl	801531c <__wrap_printf>
	DBG_PRINTLN("accumulant malloc bins: %d", bins);
 8002b86:	4648      	mov	r0, r9
 8002b88:	f012 fbc8 	bl	801531c <__wrap_printf>
 8002b8c:	0029      	movs	r1, r5
 8002b8e:	4835      	ldr	r0, [pc, #212]	; (8002c64 <sparse_data_malloc+0x15e>)
 8002b90:	f012 fbc4 	bl	801531c <__wrap_printf>
 8002b94:	22c6      	movs	r2, #198	; 0xc6
 8002b96:	0039      	movs	r1, r7
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	0030      	movs	r0, r6
 8002b9c:	f012 fbbe 	bl	801531c <__wrap_printf>
 8002ba0:	00a3      	lsls	r3, r4, #2
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	9301      	str	r3, [sp, #4]
    len = sizeof(float *) * r + sizeof(float) * c * r;
 8002ba6:	1c6b      	adds	r3, r5, #1
 8002ba8:	435a      	muls	r2, r3
    accumulant = (float **)malloc(len);
 8002baa:	0010      	movs	r0, r2
    len = sizeof(float *) * r + sizeof(float) * c * r;
 8002bac:	9200      	str	r2, [sp, #0]
    accumulant = (float **)malloc(len);
 8002bae:	f012 ff71 	bl	8015a94 <malloc>
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <sparse_data_malloc+0x162>)
 8002bb4:	469b      	mov	fp, r3
 8002bb6:	6018      	str	r0, [r3, #0]
	if (accumulant == NULL){
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d035      	beq.n	8002c28 <sparse_data_malloc+0x122>
		DBG_PRINTLN("accumulant buffer allociation success");
 8002bbc:	4648      	mov	r0, r9
 8002bbe:	f012 fbad 	bl	801531c <__wrap_printf>
 8002bc2:	482a      	ldr	r0, [pc, #168]	; (8002c6c <sparse_data_malloc+0x166>)
 8002bc4:	f012 fbaa 	bl	801531c <__wrap_printf>
 8002bc8:	229a      	movs	r2, #154	; 0x9a
 8002bca:	0039      	movs	r1, r7
 8002bcc:	32ff      	adds	r2, #255	; 0xff
 8002bce:	0030      	movs	r0, r6
 8002bd0:	f012 fba4 	bl	801531c <__wrap_printf>
		DBG_PRINTLN("accumulant buffer len: %ld", len);
 8002bd4:	4648      	mov	r0, r9
 8002bd6:	f012 fba1 	bl	801531c <__wrap_printf>
 8002bda:	9900      	ldr	r1, [sp, #0]
 8002bdc:	4824      	ldr	r0, [pc, #144]	; (8002c70 <sparse_data_malloc+0x16a>)
 8002bde:	f012 fb9d 	bl	801531c <__wrap_printf>
 8002be2:	22cd      	movs	r2, #205	; 0xcd
 8002be4:	0039      	movs	r1, r7
 8002be6:	0052      	lsls	r2, r2, #1
 8002be8:	0030      	movs	r0, r6
 8002bea:	f012 fb97 	bl	801531c <__wrap_printf>
    ptr = (float *)(accumulant + r);
 8002bee:	465b      	mov	r3, fp
 8002bf0:	681b      	ldr	r3, [r3, #0]
    for(uint16_t i = 0; i < r; i++){
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d00b      	beq.n	8002c0e <sparse_data_malloc+0x108>
 8002bf6:	3c01      	subs	r4, #1
 8002bf8:	9a01      	ldr	r2, [sp, #4]
 8002bfa:	b2a4      	uxth	r4, r4
 8002bfc:	00a4      	lsls	r4, r4, #2
 8002bfe:	1d19      	adds	r1, r3, #4
 8002c00:	00ad      	lsls	r5, r5, #2
 8002c02:	189a      	adds	r2, r3, r2
 8002c04:	1864      	adds	r4, r4, r1
        accumulant[i] = (ptr + c * i);
 8002c06:	c304      	stmia	r3!, {r2}
 8002c08:	1952      	adds	r2, r2, r5
    for(uint16_t i = 0; i < r; i++){
 8002c0a:	42a3      	cmp	r3, r4
 8002c0c:	d1fb      	bne.n	8002c06 <sparse_data_malloc+0x100>
	return data_malloc(sweeps,bins);
 8002c0e:	4653      	mov	r3, sl
 8002c10:	8819      	ldrh	r1, [r3, #0]
 8002c12:	4643      	mov	r3, r8
 8002c14:	8818      	ldrh	r0, [r3, #0]
 8002c16:	f7fe fb27 	bl	8001268 <data_malloc>
}
 8002c1a:	b003      	add	sp, #12
 8002c1c:	bc3c      	pop	{r2, r3, r4, r5}
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	46a2      	mov	sl, r4
 8002c24:	46ab      	mov	fp, r5
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ERR_PRINTLN("accumulant buffer allociation failed");
 8002c28:	4812      	ldr	r0, [pc, #72]	; (8002c74 <sparse_data_malloc+0x16e>)
 8002c2a:	f012 fb77 	bl	801531c <__wrap_printf>
 8002c2e:	4812      	ldr	r0, [pc, #72]	; (8002c78 <sparse_data_malloc+0x172>)
 8002c30:	f012 fb74 	bl	801531c <__wrap_printf>
 8002c34:	22cb      	movs	r2, #203	; 0xcb
 8002c36:	0039      	movs	r1, r7
 8002c38:	0052      	lsls	r2, r2, #1
 8002c3a:	0030      	movs	r0, r6
 8002c3c:	f012 fb6e 	bl	801531c <__wrap_printf>
 8002c40:	e7e5      	b.n	8002c0e <sparse_data_malloc+0x108>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	2000010c 	.word	0x2000010c
 8002c48:	200003b0 	.word	0x200003b0
 8002c4c:	200003a8 	.word	0x200003a8
 8002c50:	2000008c 	.word	0x2000008c
 8002c54:	0801c388 	.word	0x0801c388
 8002c58:	0801c5f4 	.word	0x0801c5f4
 8002c5c:	0801c2f4 	.word	0x0801c2f4
 8002c60:	0801c308 	.word	0x0801c308
 8002c64:	0801c614 	.word	0x0801c614
 8002c68:	200003b4 	.word	0x200003b4
 8002c6c:	0801c658 	.word	0x0801c658
 8002c70:	0801c680 	.word	0x0801c680
 8002c74:	0801c3ec 	.word	0x0801c3ec
 8002c78:	0801c630 	.word	0x0801c630

08002c7c <acc_base_configuration_wg_duration_get>:
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	0004      	movs	r4, r0
 8002c80:	f003 fe3a 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002c84:	2300      	movs	r3, #0
 8002c86:	4298      	cmp	r0, r3
 8002c88:	d001      	beq.n	8002c8e <acc_base_configuration_wg_duration_get+0x12>
 8002c8a:	3404      	adds	r4, #4
 8002c8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002c8e:	0018      	movs	r0, r3
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <acc_base_configuration_integrator_get>:
 8002c92:	b510      	push	{r4, lr}
 8002c94:	0004      	movs	r4, r0
 8002c96:	f003 fe2f 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	4298      	cmp	r0, r3
 8002c9e:	d001      	beq.n	8002ca4 <acc_base_configuration_integrator_get+0x12>
 8002ca0:	3402      	adds	r4, #2
 8002ca2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	bd10      	pop	{r4, pc}

08002ca8 <acc_base_configuration_update_rate_get>:
 8002ca8:	b510      	push	{r4, lr}
 8002caa:	0004      	movs	r4, r0
 8002cac:	f003 fe24 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d00b      	beq.n	8002ccc <acc_base_configuration_update_rate_get+0x24>
 8002cb4:	7920      	ldrb	r0, [r4, #4]
 8002cb6:	2803      	cmp	r0, #3
 8002cb8:	d808      	bhi.n	8002ccc <acc_base_configuration_update_rate_get+0x24>
 8002cba:	f00c f985 	bl	800efc8 <__gnu_thumb1_case_uqi>
 8002cbe:	0202      	.short	0x0202
 8002cc0:	0505      	.short	0x0505
 8002cc2:	20ff      	movs	r0, #255	; 0xff
 8002cc4:	05c0      	lsls	r0, r0, #23
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	68a0      	ldr	r0, [r4, #8]
 8002cca:	e7fc      	b.n	8002cc6 <acc_base_configuration_update_rate_get+0x1e>
 8002ccc:	4800      	ldr	r0, [pc, #0]	; (8002cd0 <acc_base_configuration_update_rate_get+0x28>)
 8002cce:	e7fa      	b.n	8002cc6 <acc_base_configuration_update_rate_get+0x1e>
 8002cd0:	7fc00000 	.word	0x7fc00000

08002cd4 <acc_base_configuration_repetition_mode_get>:
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	0004      	movs	r4, r0
 8002cd8:	f003 fe0e 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4298      	cmp	r0, r3
 8002ce0:	d000      	beq.n	8002ce4 <acc_base_configuration_repetition_mode_get+0x10>
 8002ce2:	7923      	ldrb	r3, [r4, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	bd10      	pop	{r4, pc}

08002ce8 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	0004      	movs	r4, r0
 8002cec:	f003 fe04 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	d001      	beq.n	8002cfa <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 8002cf6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	bd10      	pop	{r4, pc}

08002cfe <acc_base_configuration_decrease_tx_emission_get>:
 8002cfe:	b510      	push	{r4, lr}
 8002d00:	0004      	movs	r4, r0
 8002d02:	f003 fdf9 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d001      	beq.n	8002d0e <acc_base_configuration_decrease_tx_emission_get+0x10>
 8002d0a:	3448      	adds	r4, #72	; 0x48
 8002d0c:	7820      	ldrb	r0, [r4, #0]
 8002d0e:	bd10      	pop	{r4, pc}

08002d10 <acc_base_configuration_tx_disable_get>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	0004      	movs	r4, r0
 8002d14:	f003 fdf0 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	d001      	beq.n	8002d20 <acc_base_configuration_tx_disable_get+0x10>
 8002d1c:	3447      	adds	r4, #71	; 0x47
 8002d1e:	7820      	ldrb	r0, [r4, #0]
 8002d20:	bd10      	pop	{r4, pc}

08002d22 <acc_base_configuration_power_save_mode_get>:
 8002d22:	b510      	push	{r4, lr}
 8002d24:	0004      	movs	r4, r0
 8002d26:	f003 fde7 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d000      	beq.n	8002d32 <acc_base_configuration_power_save_mode_get+0x10>
 8002d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d32:	0018      	movs	r0, r3
 8002d34:	bd10      	pop	{r4, pc}

08002d36 <acc_base_configuration_sensor_get>:
 8002d36:	b510      	push	{r4, lr}
 8002d38:	0004      	movs	r4, r0
 8002d3a:	f003 fddd 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	4298      	cmp	r0, r3
 8002d42:	d000      	beq.n	8002d46 <acc_base_configuration_sensor_get+0x10>
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	0018      	movs	r0, r3
 8002d48:	bd10      	pop	{r4, pc}

08002d4a <acc_service_handle_valid>:
 8002d4a:	b510      	push	{r4, lr}
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	d004      	beq.n	8002d5a <acc_service_handle_valid+0x10>
 8002d50:	6802      	ldr	r2, [r0, #0]
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <acc_service_handle_valid+0x22>)
 8002d54:	2001      	movs	r0, #1
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d006      	beq.n	8002d68 <acc_service_handle_valid+0x1e>
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <acc_service_handle_valid+0x26>)
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <acc_service_handle_valid+0x2a>)
 8002d62:	4905      	ldr	r1, [pc, #20]	; (8002d78 <acc_service_handle_valid+0x2e>)
 8002d64:	4798      	blx	r3
 8002d66:	2000      	movs	r0, #0
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	acc09ee8 	.word	0xacc09ee8
 8002d70:	200002b0 	.word	0x200002b0
 8002d74:	0801c245 	.word	0x0801c245
 8002d78:	0801d3e8 	.word	0x0801d3e8

08002d7c <acc_service_deactivate>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	0004      	movs	r4, r0
 8002d80:	f7ff ffe3 	bl	8002d4a <acc_service_handle_valid>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d02d      	beq.n	8002de4 <acc_service_deactivate+0x68>
 8002d88:	4d1a      	ldr	r5, [pc, #104]	; (8002df4 <acc_service_deactivate+0x78>)
 8002d8a:	002b      	movs	r3, r5
 8002d8c:	3329      	adds	r3, #41	; 0x29
 8002d8e:	781e      	ldrb	r6, [r3, #0]
 8002d90:	2e00      	cmp	r6, #0
 8002d92:	d027      	beq.n	8002de4 <acc_service_deactivate+0x68>
 8002d94:	7a63      	ldrb	r3, [r4, #9]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d122      	bne.n	8002de0 <acc_service_deactivate+0x64>
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d9e:	d821      	bhi.n	8002de4 <acc_service_deactivate+0x68>
 8002da0:	002a      	movs	r2, r5
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	324c      	adds	r2, #76	; 0x4c
 8002da6:	5c9f      	ldrb	r7, [r3, r2]
 8002da8:	2f00      	cmp	r7, #0
 8002daa:	d11b      	bne.n	8002de4 <acc_service_deactivate+0x68>
 8002dac:	2101      	movs	r1, #1
 8002dae:	5499      	strb	r1, [r3, r2]
 8002db0:	7ee3      	ldrb	r3, [r4, #27]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <acc_service_deactivate+0x42>
 8002db6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002db8:	f003 fb48 	bl	800644c <acc_rss_integration_sensor_device_power_off>
 8002dbc:	76e7      	strb	r7, [r4, #27]
 8002dbe:	6863      	ldr	r3, [r4, #4]
 8002dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc2:	d805      	bhi.n	8002dd0 <acc_service_deactivate+0x54>
 8002dc4:	002a      	movs	r2, r5
 8002dc6:	0059      	lsls	r1, r3, #1
 8002dc8:	324c      	adds	r2, #76	; 0x4c
 8002dca:	1852      	adds	r2, r2, r1
 8002dcc:	2100      	movs	r1, #0
 8002dce:	7051      	strb	r1, [r2, #1]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	7262      	strb	r2, [r4, #9]
 8002dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd6:	d803      	bhi.n	8002de0 <acc_service_deactivate+0x64>
 8002dd8:	4093      	lsls	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	354c      	adds	r5, #76	; 0x4c
 8002dde:	555a      	strb	r2, [r3, r5]
 8002de0:	0030      	movs	r0, r6
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de4:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <acc_service_deactivate+0x7c>)
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <acc_service_deactivate+0x80>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	4905      	ldr	r1, [pc, #20]	; (8002e00 <acc_service_deactivate+0x84>)
 8002dec:	2000      	movs	r0, #0
 8002dee:	4798      	blx	r3
 8002df0:	2600      	movs	r6, #0
 8002df2:	e7f5      	b.n	8002de0 <acc_service_deactivate+0x64>
 8002df4:	2000010c 	.word	0x2000010c
 8002df8:	200002b0 	.word	0x200002b0
 8002dfc:	0801c254 	.word	0x0801c254
 8002e00:	0801d3e8 	.word	0x0801d3e8

08002e04 <acc_service_destroy>:
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <acc_service_destroy+0x4c>)
 8002e06:	b510      	push	{r4, lr}
 8002e08:	7a1b      	ldrb	r3, [r3, #8]
 8002e0a:	0004      	movs	r4, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <acc_service_destroy+0x32>
 8002e10:	6800      	ldr	r0, [r0, #0]
 8002e12:	f7ff ff9a 	bl	8002d4a <acc_service_handle_valid>
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d00c      	beq.n	8002e34 <acc_service_destroy+0x30>
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	f7ff ffae 	bl	8002d7c <acc_service_deactivate>
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	68c3      	ldr	r3, [r0, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d000      	beq.n	8002e2a <acc_service_destroy+0x26>
 8002e28:	4798      	blx	r3
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	f7fd fd33 	bl	8000896 <destroy_handle>
 8002e30:	2300      	movs	r3, #0
 8002e32:	6023      	str	r3, [r4, #0]
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <acc_service_destroy+0x50>)
 8002e38:	001a      	movs	r2, r3
 8002e3a:	3230      	adds	r2, #48	; 0x30
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	2a00      	cmp	r2, #0
 8002e40:	d0f8      	beq.n	8002e34 <acc_service_destroy+0x30>
 8002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <acc_service_destroy+0x54>)
 8002e46:	4905      	ldr	r1, [pc, #20]	; (8002e5c <acc_service_destroy+0x58>)
 8002e48:	2001      	movs	r0, #1
 8002e4a:	4798      	blx	r3
 8002e4c:	e7f2      	b.n	8002e34 <acc_service_destroy+0x30>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	2000008c 	.word	0x2000008c
 8002e54:	200002b0 	.word	0x200002b0
 8002e58:	0801c012 	.word	0x0801c012
 8002e5c:	0801bf53 	.word	0x0801bf53

08002e60 <stopService>:
void stopService(void){
 8002e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e62:	46d6      	mov	lr, sl
 8002e64:	4646      	mov	r6, r8
 8002e66:	464f      	mov	r7, r9
 8002e68:	b5c0      	push	{r6, r7, lr}
    DBG_PRINTLN("stopping service");
 8002e6a:	4f4a      	ldr	r7, [pc, #296]	; (8002f94 <stopService+0x134>)
void stopService(void){
 8002e6c:	b082      	sub	sp, #8
    DBG_PRINTLN("stopping service");
 8002e6e:	0038      	movs	r0, r7
 8002e70:	f012 fa54 	bl	801531c <__wrap_printf>
 8002e74:	4848      	ldr	r0, [pc, #288]	; (8002f98 <stopService+0x138>)
 8002e76:	f012 fa51 	bl	801531c <__wrap_printf>
 8002e7a:	4e48      	ldr	r6, [pc, #288]	; (8002f9c <stopService+0x13c>)
 8002e7c:	4d48      	ldr	r5, [pc, #288]	; (8002fa0 <stopService+0x140>)
 8002e7e:	4a49      	ldr	r2, [pc, #292]	; (8002fa4 <stopService+0x144>)
 8002e80:	0031      	movs	r1, r6
 8002e82:	0028      	movs	r0, r5
 8002e84:	f012 fa4a 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <stopService+0x148>)
	return *regptr;
 8002e8a:	4c48      	ldr	r4, [pc, #288]	; (8002fac <stopService+0x14c>)
	REGADRERR = -1;
 8002e8c:	4698      	mov	r8, r3
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4642      	mov	r2, r8
 8002e92:	425b      	negs	r3, r3
 8002e94:	6013      	str	r3, [r2, #0]
    if(!(RegInt_getreg(0x06) && 0x00000001)){DBG_PRINTLN("no active service"); return;}
 8002e96:	69a3      	ldr	r3, [r4, #24]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02d      	beq.n	8002ef8 <stopService+0x98>
	return *regptr;
 8002e9c:	68a3      	ldr	r3, [r4, #8]
    if(service_type == 0x02){handle = envelope_handle;}
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d007      	beq.n	8002eb2 <stopService+0x52>
    else if(service_type == 0x04){handle = sparse_handle;}
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d064      	beq.n	8002f70 <stopService+0x110>
}
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bc1c      	pop	{r2, r3, r4}
 8002eaa:	4690      	mov	r8, r2
 8002eac:	4699      	mov	r9, r3
 8002eae:	46a2      	mov	sl, r4
 8002eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(service_type == 0x02){handle = envelope_handle;}
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <stopService+0x150>)
 8002eb4:	4699      	mov	r9, r3
 8002eb6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002eb8:	9001      	str	r0, [sp, #4]
	if(acc_service_deactivate(handle)){
 8002eba:	f7ff ff5f 	bl	8002d7c <acc_service_deactivate>
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d126      	bne.n	8002f10 <stopService+0xb0>
		ERR_PRINTLN("sparse service deactivation fail");
 8002ec2:	483c      	ldr	r0, [pc, #240]	; (8002fb4 <stopService+0x154>)
 8002ec4:	f012 fa2a 	bl	801531c <__wrap_printf>
 8002ec8:	483b      	ldr	r0, [pc, #236]	; (8002fb8 <stopService+0x158>)
 8002eca:	f012 fa27 	bl	801531c <__wrap_printf>
 8002ece:	4a3b      	ldr	r2, [pc, #236]	; (8002fbc <stopService+0x15c>)
 8002ed0:	0031      	movs	r1, r6
 8002ed2:	0028      	movs	r0, r5
 8002ed4:	f012 fa22 	bl	801531c <__wrap_printf>
	if(far_active){
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <stopService+0x160>)
 8002eda:	469a      	mov	sl, r3
 8002edc:	7c1b      	ldrb	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d12b      	bne.n	8002f3a <stopService+0xda>
	REGADRERR = -1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	6013      	str	r3, [r2, #0]
	return *regptr;
 8002eea:	69a3      	ldr	r3, [r4, #24]
	if (!(*regptr == (uint32_t)-1)){
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	d0da      	beq.n	8002ea6 <stopService+0x46>
    setbits &= 0xFFFFFFFC;
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	4393      	bics	r3, r2
		*regptr = val;
 8002ef4:	61a3      	str	r3, [r4, #24]
 8002ef6:	e7d6      	b.n	8002ea6 <stopService+0x46>
    if(!(RegInt_getreg(0x06) && 0x00000001)){DBG_PRINTLN("no active service"); return;}
 8002ef8:	0038      	movs	r0, r7
 8002efa:	f012 fa0f 	bl	801531c <__wrap_printf>
 8002efe:	4831      	ldr	r0, [pc, #196]	; (8002fc4 <stopService+0x164>)
 8002f00:	f012 fa0c 	bl	801531c <__wrap_printf>
 8002f04:	4a30      	ldr	r2, [pc, #192]	; (8002fc8 <stopService+0x168>)
 8002f06:	0031      	movs	r1, r6
 8002f08:	0028      	movs	r0, r5
 8002f0a:	f012 fa07 	bl	801531c <__wrap_printf>
 8002f0e:	e7ca      	b.n	8002ea6 <stopService+0x46>
		acc_service_destroy(&handle);	
 8002f10:	a801      	add	r0, sp, #4
 8002f12:	f7ff ff77 	bl	8002e04 <acc_service_destroy>
		data_free();//maybe a memory leak?
 8002f16:	f7fd fb4f 	bl	80005b8 <data_free>
		DBG_PRINTLN("sparse service destroyed");
 8002f1a:	0038      	movs	r0, r7
 8002f1c:	f012 f9fe 	bl	801531c <__wrap_printf>
 8002f20:	482a      	ldr	r0, [pc, #168]	; (8002fcc <stopService+0x16c>)
 8002f22:	f012 f9fb 	bl	801531c <__wrap_printf>
 8002f26:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <stopService+0x170>)
 8002f28:	0031      	movs	r1, r6
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	f012 f9f6 	bl	801531c <__wrap_printf>
	if(far_active){
 8002f30:	4b23      	ldr	r3, [pc, #140]	; (8002fc0 <stopService+0x160>)
 8002f32:	469a      	mov	sl, r3
 8002f34:	7c1b      	ldrb	r3, [r3, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0d3      	beq.n	8002ee2 <stopService+0x82>
	if(acc_service_deactivate(sparse_handle_far)){
 8002f3a:	464b      	mov	r3, r9
 8002f3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002f3e:	f7ff ff1d 	bl	8002d7c <acc_service_deactivate>
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d019      	beq.n	8002f7a <stopService+0x11a>
		acc_service_destroy(&sparse_handle_far);	
 8002f46:	4648      	mov	r0, r9
 8002f48:	302c      	adds	r0, #44	; 0x2c
 8002f4a:	f7ff ff5b 	bl	8002e04 <acc_service_destroy>
		data_free();
 8002f4e:	f7fd fb33 	bl	80005b8 <data_free>
		far_active = 0;
 8002f52:	4652      	mov	r2, sl
 8002f54:	2300      	movs	r3, #0
		DBG_PRINTLN("far sparse service destroyed");
 8002f56:	0038      	movs	r0, r7
		far_active = 0;
 8002f58:	7413      	strb	r3, [r2, #16]
		DBG_PRINTLN("far sparse service destroyed");
 8002f5a:	f012 f9df 	bl	801531c <__wrap_printf>
 8002f5e:	481d      	ldr	r0, [pc, #116]	; (8002fd4 <stopService+0x174>)
 8002f60:	f012 f9dc 	bl	801531c <__wrap_printf>
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <stopService+0x178>)
 8002f66:	0031      	movs	r1, r6
 8002f68:	0028      	movs	r0, r5
 8002f6a:	f012 f9d7 	bl	801531c <__wrap_printf>
 8002f6e:	e7b8      	b.n	8002ee2 <stopService+0x82>
    else if(service_type == 0x04){handle = sparse_handle;}
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <stopService+0x150>)
 8002f72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f74:	4699      	mov	r9, r3
 8002f76:	9001      	str	r0, [sp, #4]
 8002f78:	e79f      	b.n	8002eba <stopService+0x5a>
		ERR_PRINTLN("far sparse service deactivation fail");
 8002f7a:	480e      	ldr	r0, [pc, #56]	; (8002fb4 <stopService+0x154>)
 8002f7c:	f012 f9ce 	bl	801531c <__wrap_printf>
 8002f80:	4816      	ldr	r0, [pc, #88]	; (8002fdc <stopService+0x17c>)
 8002f82:	f012 f9cb 	bl	801531c <__wrap_printf>
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <stopService+0x180>)
 8002f88:	0031      	movs	r1, r6
 8002f8a:	0028      	movs	r0, r5
 8002f8c:	f012 f9c6 	bl	801531c <__wrap_printf>
 8002f90:	e7a7      	b.n	8002ee2 <stopService+0x82>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	0801c388 	.word	0x0801c388
 8002f98:	0801c69c 	.word	0x0801c69c
 8002f9c:	0801c2f4 	.word	0x0801c2f4
 8002fa0:	0801c308 	.word	0x0801c308
 8002fa4:	000002c6 	.word	0x000002c6
 8002fa8:	200003b8 	.word	0x200003b8
 8002fac:	200003bc 	.word	0x200003bc
 8002fb0:	2000018c 	.word	0x2000018c
 8002fb4:	0801c3ec 	.word	0x0801c3ec
 8002fb8:	0801c6e8 	.word	0x0801c6e8
 8002fbc:	000002d7 	.word	0x000002d7
 8002fc0:	2000008c 	.word	0x2000008c
 8002fc4:	0801c6b0 	.word	0x0801c6b0
 8002fc8:	000002c9 	.word	0x000002c9
 8002fcc:	0801c6c8 	.word	0x0801c6c8
 8002fd0:	000002d5 	.word	0x000002d5
 8002fd4:	0801c6c4 	.word	0x0801c6c4
 8002fd8:	000002df 	.word	0x000002df
 8002fdc:	0801c6e4 	.word	0x0801c6e4
 8002fe0:	000002e1 	.word	0x000002e1

08002fe4 <createService>:
int8_t createService(void){
 8002fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fe6:	46de      	mov	lr, fp
 8002fe8:	4657      	mov	r7, sl
 8002fea:	464e      	mov	r6, r9
 8002fec:	4645      	mov	r5, r8
 8002fee:	b5e0      	push	{r5, r6, r7, lr}
    DBG_PRINTLN("creating service");
 8002ff0:	4b65      	ldr	r3, [pc, #404]	; (8003188 <createService+0x1a4>)
int8_t createService(void){
 8002ff2:	b085      	sub	sp, #20
    DBG_PRINTLN("creating service");
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	469a      	mov	sl, r3
 8002ff8:	f012 f990 	bl	801531c <__wrap_printf>
 8002ffc:	4863      	ldr	r0, [pc, #396]	; (800318c <createService+0x1a8>)
 8002ffe:	f012 f98d 	bl	801531c <__wrap_printf>
 8003002:	4e63      	ldr	r6, [pc, #396]	; (8003190 <createService+0x1ac>)
 8003004:	4d63      	ldr	r5, [pc, #396]	; (8003194 <createService+0x1b0>)
 8003006:	4a64      	ldr	r2, [pc, #400]	; (8003198 <createService+0x1b4>)
 8003008:	0031      	movs	r1, r6
 800300a:	0028      	movs	r0, r5
 800300c:	f012 f986 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8003010:	2301      	movs	r3, #1
 8003012:	4c62      	ldr	r4, [pc, #392]	; (800319c <createService+0x1b8>)
 8003014:	425b      	negs	r3, r3
 8003016:	469b      	mov	fp, r3
 8003018:	6023      	str	r3, [r4, #0]
	return *regptr;
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <createService+0x1bc>)
 800301c:	689b      	ldr	r3, [r3, #8]
    if(service_type == 0x02){success = createEnvelopeService();}
 800301e:	2b02      	cmp	r3, #2
 8003020:	d100      	bne.n	8003024 <createService+0x40>
 8003022:	e0dd      	b.n	80031e0 <createService+0x1fc>
    else if(service_type == 0x04){success = createSparseService();}
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00b      	beq.n	8003040 <createService+0x5c>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 8003028:	2080      	movs	r0, #128	; 0x80
 800302a:	02c0      	lsls	r0, r0, #11
 800302c:	f008 f800 	bl	800b030 <Reg_regor.constprop.76>
 8003030:	2000      	movs	r0, #0
}
 8003032:	b005      	add	sp, #20
 8003034:	bc3c      	pop	{r2, r3, r4, r5}
 8003036:	4690      	mov	r8, r2
 8003038:	4699      	mov	r9, r3
 800303a:	46a2      	mov	sl, r4
 800303c:	46ab      	mov	fp, r5
 800303e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return *regptr;
 8003040:	4c58      	ldr	r4, [pc, #352]	; (80031a4 <createService+0x1c0>)
uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
    if (multiple == 0)
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 8003042:	213c      	movs	r1, #60	; 0x3c
 8003044:	6827      	ldr	r7, [r4, #0]
 8003046:	0038      	movs	r0, r7
 8003048:	f00c f858 	bl	800f0fc <__aeabi_uidivmod>
 800304c:	6864      	ldr	r4, [r4, #4]
    if (remainder == 0)
        return numToRound;

    return numToRound - remainder;
 800304e:	1a7f      	subs	r7, r7, r1
    uint32_t remainder = numToRound % multiple;
 8003050:	0020      	movs	r0, r4
 8003052:	213c      	movs	r1, #60	; 0x3c
 8003054:	f00c f852 	bl	800f0fc <__aeabi_uidivmod>
	if (len_reg < 1891){
 8003058:	4b53      	ldr	r3, [pc, #332]	; (80031a8 <createService+0x1c4>)
    return numToRound - remainder;
 800305a:	1a64      	subs	r4, r4, r1
 800305c:	469b      	mov	fp, r3
 800305e:	429c      	cmp	r4, r3
 8003060:	d800      	bhi.n	8003064 <createService+0x80>
 8003062:	e2d0      	b.n	8003606 <createService+0x622>
	}else if (len_reg < 3811){
 8003064:	4b51      	ldr	r3, [pc, #324]	; (80031ac <createService+0x1c8>)
 8003066:	429c      	cmp	r4, r3
 8003068:	d900      	bls.n	800306c <createService+0x88>
 800306a:	e2bb      	b.n	80035e4 <createService+0x600>
		far_active = 1;
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <createService+0x1cc>)
		DBG_PRINTLN("updating sparse config");
 800306e:	4650      	mov	r0, sl
		far_active = 1;
 8003070:	4699      	mov	r9, r3
 8003072:	2301      	movs	r3, #1
 8003074:	464a      	mov	r2, r9
 8003076:	7413      	strb	r3, [r2, #16]
		DBG_PRINTLN("updating sparse config");
 8003078:	f012 f950 	bl	801531c <__wrap_printf>
 800307c:	484d      	ldr	r0, [pc, #308]	; (80031b4 <createService+0x1d0>)
 800307e:	f012 f94d 	bl	801531c <__wrap_printf>
 8003082:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <createService+0x1d4>)
 8003084:	0031      	movs	r1, r6
 8003086:	0028      	movs	r0, r5
 8003088:	f012 f948 	bl	801531c <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 800308c:	b2bb      	uxth	r3, r7
 800308e:	4f4b      	ldr	r7, [pc, #300]	; (80031bc <createService+0x1d8>)
 8003090:	0019      	movs	r1, r3
 8003092:	465a      	mov	r2, fp
 8003094:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003096:	4698      	mov	r8, r3
 8003098:	f7fd ffbc 	bl	8001014 <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 800309c:	4650      	mov	r0, sl
 800309e:	f012 f93d 	bl	801531c <__wrap_printf>
 80030a2:	4847      	ldr	r0, [pc, #284]	; (80031c0 <createService+0x1dc>)
 80030a4:	f012 f93a 	bl	801531c <__wrap_printf>
 80030a8:	4a46      	ldr	r2, [pc, #280]	; (80031c4 <createService+0x1e0>)
 80030aa:	0031      	movs	r1, r6
 80030ac:	0028      	movs	r0, r5
 80030ae:	f012 f935 	bl	801531c <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80030b2:	4b45      	ldr	r3, [pc, #276]	; (80031c8 <createService+0x1e4>)
 80030b4:	429c      	cmp	r4, r3
 80030b6:	d200      	bcs.n	80030ba <createService+0xd6>
 80030b8:	001c      	movs	r4, r3
 80030ba:	4b44      	ldr	r3, [pc, #272]	; (80031cc <createService+0x1e8>)
		DBG_PRINTINT(far_len);
 80030bc:	4650      	mov	r0, sl
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80030be:	469c      	mov	ip, r3
 80030c0:	4464      	add	r4, ip
 80030c2:	b2a4      	uxth	r4, r4
		DBG_PRINTINT(far_len);
 80030c4:	f012 f92a 	bl	801531c <__wrap_printf>
 80030c8:	0022      	movs	r2, r4
 80030ca:	4941      	ldr	r1, [pc, #260]	; (80031d0 <createService+0x1ec>)
 80030cc:	4841      	ldr	r0, [pc, #260]	; (80031d4 <createService+0x1f0>)
 80030ce:	f012 f925 	bl	801531c <__wrap_printf>
 80030d2:	4a41      	ldr	r2, [pc, #260]	; (80031d8 <createService+0x1f4>)
 80030d4:	0031      	movs	r1, r6
 80030d6:	0028      	movs	r0, r5
 80030d8:	f012 f920 	bl	801531c <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 80030dc:	21f0      	movs	r1, #240	; 0xf0
 80030de:	00c9      	lsls	r1, r1, #3
 80030e0:	4441      	add	r1, r8
 80030e2:	b289      	uxth	r1, r1
 80030e4:	0022      	movs	r2, r4
 80030e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e8:	f7fd ff94 	bl	8001014 <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 80030ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ee:	f7fd fd01 	bl	8000af4 <acc_service_create>
 80030f2:	4b3a      	ldr	r3, [pc, #232]	; (80031dc <createService+0x1f8>)
 80030f4:	4698      	mov	r8, r3
 80030f6:	6298      	str	r0, [r3, #40]	; 0x28
	if (sparse_handle == NULL){//handles error
 80030f8:	2800      	cmp	r0, #0
 80030fa:	d100      	bne.n	80030fe <createService+0x11a>
 80030fc:	e2a4      	b.n	8003648 <createService+0x664>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 80030fe:	0039      	movs	r1, r7
 8003100:	3138      	adds	r1, #56	; 0x38
 8003102:	f7fd f881 	bl	8000208 <acc_service_sparse_get_metadata>
		if(!far_active){
 8003106:	464b      	mov	r3, r9
 8003108:	7c1b      	ldrb	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d100      	bne.n	8003110 <createService+0x12c>
 800310e:	e2b3      	b.n	8003678 <createService+0x694>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 8003110:	2300      	movs	r3, #0
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800311a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800311c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800311e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003120:	f7fd f9b8 	bl	8000494 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 8003124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800312c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	f7fd febe 	bl	8000eb0 <printf_sparse_metadata>
	if(far_active){
 8003134:	464b      	mov	r3, r9
 8003136:	7c1b      	ldrb	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <createService+0x15a>
 800313c:	e219      	b.n	8003572 <createService+0x58e>
	sparse_handle_far = acc_service_create(sparse_config_far);
 800313e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003140:	f7fd fcd8 	bl	8000af4 <acc_service_create>
 8003144:	4643      	mov	r3, r8
 8003146:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (sparse_handle_far == NULL){//handles error		
 8003148:	2800      	cmp	r0, #0
 800314a:	d100      	bne.n	800314e <createService+0x16a>
 800314c:	e2c2      	b.n	80036d4 <createService+0x6f0>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 800314e:	4649      	mov	r1, r9
 8003150:	3114      	adds	r1, #20
 8003152:	f7fd f859 	bl	8000208 <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){
 8003156:	f7ff fcd6 	bl	8002b06 <sparse_data_malloc>
 800315a:	1c43      	adds	r3, r0, #1
 800315c:	d100      	bne.n	8003160 <createService+0x17c>
 800315e:	e2f2      	b.n	8003746 <createService+0x762>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 8003160:	464b      	mov	r3, r9
 8003162:	3314      	adds	r3, #20
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	3738      	adds	r7, #56	; 0x38
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800316e:	f7fd f991 	bl	8000494 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 8003172:	464b      	mov	r3, r9
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	464b      	mov	r3, r9
 800317a:	6958      	ldr	r0, [r3, #20]
 800317c:	6999      	ldr	r1, [r3, #24]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f7fd fe95 	bl	8000eb0 <printf_sparse_metadata>
 8003186:	e1f4      	b.n	8003572 <createService+0x58e>
 8003188:	0801c388 	.word	0x0801c388
 800318c:	0801c70c 	.word	0x0801c70c
 8003190:	0801c2f4 	.word	0x0801c2f4
 8003194:	0801c308 	.word	0x0801c308
 8003198:	00000236 	.word	0x00000236
 800319c:	200003b8 	.word	0x200003b8
 80031a0:	200003bc 	.word	0x200003bc
 80031a4:	2000051c 	.word	0x2000051c
 80031a8:	00000762 	.word	0x00000762
 80031ac:	00000ee2 	.word	0x00000ee2
 80031b0:	2000008c 	.word	0x2000008c
 80031b4:	0801c7c4 	.word	0x0801c7c4
 80031b8:	0000026d 	.word	0x0000026d
 80031bc:	2000010c 	.word	0x2000010c
 80031c0:	0801c7dc 	.word	0x0801c7dc
 80031c4:	0000026f 	.word	0x0000026f
 80031c8:	00000781 	.word	0x00000781
 80031cc:	fffff880 	.word	0xfffff880
 80031d0:	0801c7f8 	.word	0x0801c7f8
 80031d4:	0801c800 	.word	0x0801c800
 80031d8:	00000272 	.word	0x00000272
 80031dc:	2000018c 	.word	0x2000018c
    updateEnvelopeConfig(envelope_config);
 80031e0:	4fe6      	ldr	r7, [pc, #920]	; (800357c <createService+0x598>)
    DBG_PRINTLN("updating config");
 80031e2:	4650      	mov	r0, sl
    updateEnvelopeConfig(envelope_config);
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	4698      	mov	r8, r3
    DBG_PRINTLN("updating config");
 80031e8:	f012 f898 	bl	801531c <__wrap_printf>
 80031ec:	48e4      	ldr	r0, [pc, #912]	; (8003580 <createService+0x59c>)
 80031ee:	f012 f895 	bl	801531c <__wrap_printf>
 80031f2:	4ae4      	ldr	r2, [pc, #912]	; (8003584 <createService+0x5a0>)
 80031f4:	0031      	movs	r1, r6
 80031f6:	0028      	movs	r0, r5
 80031f8:	f012 f890 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 80031fc:	465b      	mov	r3, fp
 80031fe:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003200:	4be1      	ldr	r3, [pc, #900]	; (8003588 <createService+0x5a4>)
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8003202:	4640      	mov	r0, r8
	return *regptr;
 8003204:	4699      	mov	r9, r3
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	b2d9      	uxtb	r1, r3
 800320a:	f7fd fac7 	bl	800079c <acc_service_profile_set>
	REGADRERR = -1;
 800320e:	465b      	mov	r3, fp
 8003210:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003212:	464b      	mov	r3, r9
 8003214:	689b      	ldr	r3, [r3, #8]
	if(rep_mode == 0x01){
 8003216:	2b01      	cmp	r3, #1
 8003218:	d100      	bne.n	800321c <createService+0x238>
 800321a:	e243      	b.n	80036a4 <createService+0x6c0>
	}else if (rep_mode == 0x02){
 800321c:	2b02      	cmp	r3, #2
 800321e:	d100      	bne.n	8003222 <createService+0x23e>
 8003220:	e264      	b.n	80036ec <createService+0x708>
	REGADRERR = -1;
 8003222:	2301      	movs	r3, #1
 8003224:	425b      	negs	r3, r3
 8003226:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003228:	464b      	mov	r3, r9
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	4640      	mov	r0, r8
 800322e:	9303      	str	r3, [sp, #12]
 8003230:	f7fc ffb6 	bl	80001a0 <acc_service_get_base_configuration>
 8003234:	4683      	mov	fp, r0
 8003236:	f003 fb5f 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800323a:	2800      	cmp	r0, #0
 800323c:	d005      	beq.n	800324a <createService+0x266>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 800323e:	9b03      	ldr	r3, [sp, #12]
 8003240:	4659      	mov	r1, fp
 8003242:	1e5a      	subs	r2, r3, #1
 8003244:	4193      	sbcs	r3, r2
 8003246:	2247      	movs	r2, #71	; 0x47
 8003248:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 800324a:	2301      	movs	r3, #1
 800324c:	425b      	negs	r3, r3
 800324e:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003250:	464b      	mov	r3, r9
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	4640      	mov	r0, r8
 8003256:	469b      	mov	fp, r3
 8003258:	f7fc fff4 	bl	8000244 <get_and_validate_envelope_configuration>
 800325c:	2800      	cmp	r0, #0
 800325e:	d005      	beq.n	800326c <createService+0x288>
 8003260:	465b      	mov	r3, fp
 8003262:	b299      	uxth	r1, r3
 8003264:	4643      	mov	r3, r8
 8003266:	6918      	ldr	r0, [r3, #16]
 8003268:	f7fd f9c0 	bl	80005ec <acc_base_configuration_downsampling_factor_set>
	REGADRERR = -1;
 800326c:	2301      	movs	r3, #1
 800326e:	425b      	negs	r3, r3
 8003270:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003272:	464b      	mov	r3, r9
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	4640      	mov	r0, r8
 8003278:	9303      	str	r3, [sp, #12]
 800327a:	f7fc ff91 	bl	80001a0 <acc_service_get_base_configuration>
 800327e:	4683      	mov	fp, r0
 8003280:	f003 fb3a 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8003284:	2800      	cmp	r0, #0
 8003286:	d002      	beq.n	800328e <createService+0x2aa>
 8003288:	465a      	mov	r2, fp
 800328a:	9b03      	ldr	r3, [sp, #12]
 800328c:	6393      	str	r3, [r2, #56]	; 0x38
	REGADRERR = -1;
 800328e:	2301      	movs	r3, #1
 8003290:	425b      	negs	r3, r3
 8003292:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003294:	464b      	mov	r3, r9
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	4640      	mov	r0, r8
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	f7fc ff80 	bl	80001a0 <acc_service_get_base_configuration>
 80032a0:	4683      	mov	fp, r0
 80032a2:	f003 fb29 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	d005      	beq.n	80032b6 <createService+0x2d2>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 80032aa:	9b03      	ldr	r3, [sp, #12]
 80032ac:	4659      	mov	r1, fp
 80032ae:	1e5a      	subs	r2, r3, #1
 80032b0:	4193      	sbcs	r3, r2
 80032b2:	224e      	movs	r2, #78	; 0x4e
 80032b4:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	425b      	negs	r3, r3
 80032ba:	6023      	str	r3, [r4, #0]
	return *regptr;
 80032bc:	464b      	mov	r3, r9
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4640      	mov	r0, r8
 80032c2:	9303      	str	r3, [sp, #12]
 80032c4:	f7fc ff6c 	bl	80001a0 <acc_service_get_base_configuration>
 80032c8:	4683      	mov	fp, r0
 80032ca:	f003 fb15 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d007      	beq.n	80032e2 <createService+0x2fe>
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 80032d2:	9803      	ldr	r0, [sp, #12]
 80032d4:	f00c fad8 	bl	800f888 <__aeabi_ui2f>
 80032d8:	49ac      	ldr	r1, [pc, #688]	; (800358c <createService+0x5a8>)
 80032da:	f00b fa45 	bl	800e768 <__aeabi_fdiv>
 80032de:	465b      	mov	r3, fp
 80032e0:	6258      	str	r0, [r3, #36]	; 0x24
	REGADRERR = -1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	425b      	negs	r3, r3
 80032e6:	6023      	str	r3, [r4, #0]
	return *regptr;
 80032e8:	464b      	mov	r3, r9
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4640      	mov	r0, r8
 80032ee:	9303      	str	r3, [sp, #12]
 80032f0:	f7fc ff56 	bl	80001a0 <acc_service_get_base_configuration>
 80032f4:	4683      	mov	fp, r0
 80032f6:	f003 faff 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d007      	beq.n	800330e <createService+0x32a>
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 80032fe:	9803      	ldr	r0, [sp, #12]
 8003300:	f00c fac2 	bl	800f888 <__aeabi_ui2f>
 8003304:	49a1      	ldr	r1, [pc, #644]	; (800358c <createService+0x5a8>)
 8003306:	f00b fa2f 	bl	800e768 <__aeabi_fdiv>
 800330a:	465b      	mov	r3, fp
 800330c:	6298      	str	r0, [r3, #40]	; 0x28
	REGADRERR = -1;
 800330e:	2301      	movs	r3, #1
 8003310:	425b      	negs	r3, r3
 8003312:	469b      	mov	fp, r3
 8003314:	6023      	str	r3, [r4, #0]
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8003316:	464b      	mov	r3, r9
 8003318:	6918      	ldr	r0, [r3, #16]
 800331a:	f00c fab5 	bl	800f888 <__aeabi_ui2f>
 800331e:	499b      	ldr	r1, [pc, #620]	; (800358c <createService+0x5a8>)
 8003320:	f00b fa22 	bl	800e768 <__aeabi_fdiv>
 8003324:	1c01      	adds	r1, r0, #0
 8003326:	4640      	mov	r0, r8
 8003328:	f7fd fa52 	bl	80007d0 <acc_service_receiver_gain_set>
	REGADRERR = -1;
 800332c:	465b      	mov	r3, fp
 800332e:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003330:	464b      	mov	r3, r9
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4640      	mov	r0, r8
 8003336:	9303      	str	r3, [sp, #12]
 8003338:	f7fc ff32 	bl	80001a0 <acc_service_get_base_configuration>
 800333c:	4683      	mov	fp, r0
 800333e:	f003 fadb 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8003342:	2800      	cmp	r0, #0
 8003344:	d003      	beq.n	800334e <createService+0x36a>
 8003346:	466b      	mov	r3, sp
 8003348:	465a      	mov	r2, fp
 800334a:	7b1b      	ldrb	r3, [r3, #12]
 800334c:	8793      	strh	r3, [r2, #60]	; 0x3c
	REGADRERR = -1;
 800334e:	2301      	movs	r3, #1
 8003350:	425b      	negs	r3, r3
 8003352:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003354:	464b      	mov	r3, r9
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	4640      	mov	r0, r8
 800335a:	9303      	str	r3, [sp, #12]
 800335c:	f7fc ff72 	bl	8000244 <get_and_validate_envelope_configuration>
 8003360:	2800      	cmp	r0, #0
 8003362:	d00d      	beq.n	8003380 <createService+0x39c>
 8003364:	4640      	mov	r0, r8
 8003366:	f7fc ff1b 	bl	80001a0 <acc_service_get_base_configuration>
 800336a:	4683      	mov	fp, r0
 800336c:	f003 fac4 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8003370:	2800      	cmp	r0, #0
 8003372:	d005      	beq.n	8003380 <createService+0x39c>
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 8003374:	9b03      	ldr	r3, [sp, #12]
 8003376:	4659      	mov	r1, fp
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	4193      	sbcs	r3, r2
 800337c:	2249      	movs	r2, #73	; 0x49
 800337e:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 8003380:	2301      	movs	r3, #1
 8003382:	425b      	negs	r3, r3
 8003384:	469b      	mov	fp, r3
 8003386:	6023      	str	r3, [r4, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8003388:	464b      	mov	r3, r9
 800338a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800338c:	4640      	mov	r0, r8
 800338e:	1e4b      	subs	r3, r1, #1
 8003390:	4199      	sbcs	r1, r3
 8003392:	b2c9      	uxtb	r1, r1
 8003394:	f7fd f9f1 	bl	800077a <acc_service_maximize_signal_attenuation_set>
	REGADRERR = -1;
 8003398:	465b      	mov	r3, fp
 800339a:	6023      	str	r3, [r4, #0]
	return *regptr;
 800339c:	464b      	mov	r3, r9
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	4640      	mov	r0, r8
 80033a2:	9303      	str	r3, [sp, #12]
 80033a4:	f7fc fefc 	bl	80001a0 <acc_service_get_base_configuration>
 80033a8:	4683      	mov	fp, r0
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d100      	bne.n	80033b0 <createService+0x3cc>
 80033ae:	e142      	b.n	8003636 <createService+0x652>
 80033b0:	f003 faa2 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d003      	beq.n	80033c0 <createService+0x3dc>
 80033b8:	2332      	movs	r3, #50	; 0x32
 80033ba:	4659      	mov	r1, fp
 80033bc:	9a03      	ldr	r2, [sp, #12]
 80033be:	54ca      	strb	r2, [r1, r3]
	REGADRERR = -1;
 80033c0:	2301      	movs	r3, #1
	return *regptr;
 80033c2:	464a      	mov	r2, r9
	REGADRERR = -1;
 80033c4:	425b      	negs	r3, r3
 80033c6:	6023      	str	r3, [r4, #0]
	return *regptr;
 80033c8:	3381      	adds	r3, #129	; 0x81
 80033ca:	58d3      	ldr	r3, [r2, r3]
 80033cc:	4640      	mov	r0, r8
 80033ce:	4699      	mov	r9, r3
 80033d0:	f7fc ff38 	bl	8000244 <get_and_validate_envelope_configuration>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d017      	beq.n	8003408 <createService+0x424>
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 80033d8:	4648      	mov	r0, r9
 80033da:	f00c fa55 	bl	800f888 <__aeabi_ui2f>
 80033de:	496b      	ldr	r1, [pc, #428]	; (800358c <createService+0x5a8>)
 80033e0:	f00b f9c2 	bl	800e768 <__aeabi_fdiv>
 80033e4:	21fe      	movs	r1, #254	; 0xfe
 80033e6:	0589      	lsls	r1, r1, #22
 80033e8:	4681      	mov	r9, r0
 80033ea:	f00b ffdb 	bl	800f3a4 <__aeabi_fcmpgt>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d100      	bne.n	80033f4 <createService+0x410>
 80033f2:	e18f      	b.n	8003714 <createService+0x730>
 80033f4:	2230      	movs	r2, #48	; 0x30
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <createService+0x5ac>)
 80033f8:	5c9a      	ldrb	r2, [r3, r2]
 80033fa:	2a00      	cmp	r2, #0
 80033fc:	d004      	beq.n	8003408 <createService+0x424>
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	4a64      	ldr	r2, [pc, #400]	; (8003594 <createService+0x5b0>)
 8003402:	4965      	ldr	r1, [pc, #404]	; (8003598 <createService+0x5b4>)
 8003404:	2001      	movs	r0, #1
 8003406:	4798      	blx	r3
   	envelope_handle = acc_service_create(envelope_config);	
 8003408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800340a:	f7fd fb73 	bl	8000af4 <acc_service_create>
 800340e:	4b63      	ldr	r3, [pc, #396]	; (800359c <createService+0x5b8>)
 8003410:	4698      	mov	r8, r3
 8003412:	6258      	str	r0, [r3, #36]	; 0x24
	if (envelope_handle == NULL){//handles error
 8003414:	2800      	cmp	r0, #0
 8003416:	d100      	bne.n	800341a <createService+0x436>
 8003418:	e122      	b.n	8003660 <createService+0x67c>
 800341a:	7a03      	ldrb	r3, [r0, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d000      	beq.n	8003422 <createService+0x43e>
 8003420:	e13d      	b.n	800369e <createService+0x6ba>
 8003422:	4642      	mov	r2, r8
 8003424:	6903      	ldr	r3, [r0, #16]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6999      	ldr	r1, [r3, #24]
 800342a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800342c:	6311      	str	r1, [r2, #48]	; 0x30
 800342e:	69d9      	ldr	r1, [r3, #28]
 8003430:	6351      	str	r1, [r2, #52]	; 0x34
 8003432:	4641      	mov	r1, r8
 8003434:	8ddf      	ldrh	r7, [r3, #46]	; 0x2e
 8003436:	8717      	strh	r7, [r2, #56]	; 0x38
 8003438:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800343a:	3a01      	subs	r2, #1
 800343c:	874a      	strh	r2, [r1, #58]	; 0x3a
 800343e:	4958      	ldr	r1, [pc, #352]	; (80035a0 <createService+0x5bc>)
 8003440:	f00b faa4 	bl	800e98c <__aeabi_fmul>
 8003444:	21fc      	movs	r1, #252	; 0xfc
 8003446:	0589      	lsls	r1, r1, #22
 8003448:	f00b faa0 	bl	800e98c <__aeabi_fmul>
 800344c:	4643      	mov	r3, r8
 800344e:	63d8      	str	r0, [r3, #60]	; 0x3c
    sweeps = 1;
 8003450:	2201      	movs	r2, #1
    bins = envelope_metadata.data_length;
 8003452:	4b54      	ldr	r3, [pc, #336]	; (80035a4 <createService+0x5c0>)
    return data_malloc(sweeps,bins);
 8003454:	0039      	movs	r1, r7
    bins = envelope_metadata.data_length;
 8003456:	801f      	strh	r7, [r3, #0]
    sweeps = 1;
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <createService+0x5c4>)
    return data_malloc(sweeps,bins);
 800345a:	2001      	movs	r0, #1
    sweeps = 1;
 800345c:	801a      	strh	r2, [r3, #0]
    return data_malloc(sweeps,bins);
 800345e:	f7fd ff03 	bl	8001268 <data_malloc>
        if(envelope_data_malloc() == -1){
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	d100      	bne.n	8003468 <createService+0x484>
 8003466:	e147      	b.n	80036f8 <createService+0x714>
 8003468:	4643      	mov	r3, r8
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 800346c:	4947      	ldr	r1, [pc, #284]	; (800358c <createService+0x5a8>)
 800346e:	469b      	mov	fp, r3
 8003470:	4643      	mov	r3, r8
 8003472:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003474:	4699      	mov	r9, r3
 8003476:	4643      	mov	r3, r8
 8003478:	8f5f      	ldrh	r7, [r3, #58]	; 0x3a
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	469a      	mov	sl, r3
 800347e:	4643      	mov	r3, r8
 8003480:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003482:	f00b fa83 	bl	800e98c <__aeabi_fmul>
	REGADRERR = -1;
 8003486:	2301      	movs	r3, #1
 8003488:	425b      	negs	r3, r3
 800348a:	6023      	str	r3, [r4, #0]
	if (!(*regptr == (uint32_t)-1)){
 800348c:	4c47      	ldr	r4, [pc, #284]	; (80035ac <createService+0x5c8>)
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 800348e:	4680      	mov	r8, r0
	if (!(*regptr == (uint32_t)-1)){
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	d002      	beq.n	800349c <createService+0x4b8>
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003496:	f00b ffb9 	bl	800f40c <__aeabi_f2uiz>
 800349a:	6020      	str	r0, [r4, #0]
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800349c:	493b      	ldr	r1, [pc, #236]	; (800358c <createService+0x5a8>)
 800349e:	4658      	mov	r0, fp
 80034a0:	f00b fa74 	bl	800e98c <__aeabi_fmul>
 80034a4:	f00b ffb2 	bl	800f40c <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 80034a8:	6863      	ldr	r3, [r4, #4]
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 80034aa:	4683      	mov	fp, r0
	if (!(*regptr == (uint32_t)-1)){
 80034ac:	3301      	adds	r3, #1
 80034ae:	d000      	beq.n	80034b2 <createService+0x4ce>
		*regptr = val;
 80034b0:	6060      	str	r0, [r4, #4]
	if (!(*regptr == (uint32_t)-1)){
 80034b2:	68a3      	ldr	r3, [r4, #8]
 80034b4:	3301      	adds	r3, #1
 80034b6:	d001      	beq.n	80034bc <createService+0x4d8>
		*regptr = val;
 80034b8:	464b      	mov	r3, r9
 80034ba:	60a3      	str	r3, [r4, #8]
	if (!(*regptr == (uint32_t)-1)){
 80034bc:	68e3      	ldr	r3, [r4, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	d000      	beq.n	80034c4 <createService+0x4e0>
		*regptr = val;
 80034c2:	60e7      	str	r7, [r4, #12]
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 80034c4:	493a      	ldr	r1, [pc, #232]	; (80035b0 <createService+0x5cc>)
 80034c6:	4650      	mov	r0, sl
 80034c8:	f00b fa60 	bl	800e98c <__aeabi_fmul>
 80034cc:	f00b ff9e 	bl	800f40c <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 80034d0:	6923      	ldr	r3, [r4, #16]
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 80034d2:	4682      	mov	sl, r0
	if (!(*regptr == (uint32_t)-1)){
 80034d4:	3301      	adds	r3, #1
 80034d6:	d000      	beq.n	80034da <createService+0x4f6>
		*regptr = val;
 80034d8:	6120      	str	r0, [r4, #16]

void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
    INF_PRINTLN("Envelope Serivce Metadata");
 80034da:	4c36      	ldr	r4, [pc, #216]	; (80035b4 <createService+0x5d0>)
 80034dc:	0020      	movs	r0, r4
 80034de:	f011 ff1d 	bl	801531c <__wrap_printf>
 80034e2:	4835      	ldr	r0, [pc, #212]	; (80035b8 <createService+0x5d4>)
 80034e4:	f011 ff1a 	bl	801531c <__wrap_printf>
 80034e8:	4a34      	ldr	r2, [pc, #208]	; (80035bc <createService+0x5d8>)
 80034ea:	0031      	movs	r1, r6
 80034ec:	0028      	movs	r0, r5
 80034ee:	f011 ff15 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 80034f2:	0020      	movs	r0, r4
 80034f4:	f011 ff12 	bl	801531c <__wrap_printf>
 80034f8:	4640      	mov	r0, r8
 80034fa:	f00c f95b 	bl	800f7b4 <__aeabi_f2iz>
 80034fe:	0001      	movs	r1, r0
 8003500:	482f      	ldr	r0, [pc, #188]	; (80035c0 <createService+0x5dc>)
 8003502:	f011 ff0b 	bl	801531c <__wrap_printf>
 8003506:	4a2f      	ldr	r2, [pc, #188]	; (80035c4 <createService+0x5e0>)
 8003508:	0031      	movs	r1, r6
 800350a:	0028      	movs	r0, r5
 800350c:	f011 ff06 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 8003510:	0020      	movs	r0, r4
 8003512:	f011 ff03 	bl	801531c <__wrap_printf>
 8003516:	4659      	mov	r1, fp
 8003518:	482b      	ldr	r0, [pc, #172]	; (80035c8 <createService+0x5e4>)
 800351a:	f011 feff 	bl	801531c <__wrap_printf>
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <createService+0x5e8>)
 8003520:	0031      	movs	r1, r6
 8003522:	0028      	movs	r0, r5
 8003524:	f011 fefa 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 8003528:	0020      	movs	r0, r4
 800352a:	f011 fef7 	bl	801531c <__wrap_printf>
 800352e:	4649      	mov	r1, r9
 8003530:	4827      	ldr	r0, [pc, #156]	; (80035d0 <createService+0x5ec>)
 8003532:	f011 fef3 	bl	801531c <__wrap_printf>
 8003536:	22cd      	movs	r2, #205	; 0xcd
 8003538:	0031      	movs	r1, r6
 800353a:	0092      	lsls	r2, r2, #2
 800353c:	0028      	movs	r0, r5
 800353e:	f011 feed 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.stitch_count));
 8003542:	0020      	movs	r0, r4
 8003544:	f011 feea 	bl	801531c <__wrap_printf>
 8003548:	0039      	movs	r1, r7
 800354a:	4822      	ldr	r0, [pc, #136]	; (80035d4 <createService+0x5f0>)
 800354c:	f011 fee6 	bl	801531c <__wrap_printf>
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <createService+0x5f4>)
 8003552:	0031      	movs	r1, r6
 8003554:	0028      	movs	r0, r5
 8003556:	f011 fee1 	bl	801531c <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 800355a:	0020      	movs	r0, r4
 800355c:	f011 fede 	bl	801531c <__wrap_printf>
 8003560:	4651      	mov	r1, sl
 8003562:	481e      	ldr	r0, [pc, #120]	; (80035dc <createService+0x5f8>)
 8003564:	f011 feda 	bl	801531c <__wrap_printf>
 8003568:	4a1d      	ldr	r2, [pc, #116]	; (80035e0 <createService+0x5fc>)
 800356a:	0031      	movs	r1, r6
 800356c:	0028      	movs	r0, r5
 800356e:	f011 fed5 	bl	801531c <__wrap_printf>
        Reg_regor(0x06, 0x00000001);
 8003572:	2001      	movs	r0, #1
 8003574:	f007 fd5c 	bl	800b030 <Reg_regor.constprop.76>
 8003578:	2001      	movs	r0, #1
 800357a:	e55a      	b.n	8003032 <createService+0x4e>
 800357c:	2000010c 	.word	0x2000010c
 8003580:	0801c390 	.word	0x0801c390
 8003584:	0000020f 	.word	0x0000020f
 8003588:	2000051c 	.word	0x2000051c
 800358c:	447a0000 	.word	0x447a0000
 8003590:	200002b0 	.word	0x200002b0
 8003594:	0801c720 	.word	0x0801c720
 8003598:	0801bf21 	.word	0x0801bf21
 800359c:	2000018c 	.word	0x2000018c
 80035a0:	4d8ef3c2 	.word	0x4d8ef3c2
 80035a4:	200003a8 	.word	0x200003a8
 80035a8:	200003b0 	.word	0x200003b0
 80035ac:	20000508 	.word	0x20000508
 80035b0:	49742400 	.word	0x49742400
 80035b4:	0801c2d0 	.word	0x0801c2d0
 80035b8:	0801c7a8 	.word	0x0801c7a8
 80035bc:	00000331 	.word	0x00000331
 80035c0:	0801c314 	.word	0x0801c314
 80035c4:	00000332 	.word	0x00000332
 80035c8:	0801c324 	.word	0x0801c324
 80035cc:	00000333 	.word	0x00000333
 80035d0:	0801c34c 	.word	0x0801c34c
 80035d4:	0801c360 	.word	0x0801c360
 80035d8:	00000335 	.word	0x00000335
 80035dc:	0801c374 	.word	0x0801c374
 80035e0:	00000336 	.word	0x00000336
		ERR_PRINTLN("sparse service creation failed (too long)");
 80035e4:	485f      	ldr	r0, [pc, #380]	; (8003764 <createService+0x780>)
 80035e6:	f011 fe99 	bl	801531c <__wrap_printf>
 80035ea:	485f      	ldr	r0, [pc, #380]	; (8003768 <createService+0x784>)
 80035ec:	f011 fe96 	bl	801531c <__wrap_printf>
 80035f0:	4a5e      	ldr	r2, [pc, #376]	; (800376c <createService+0x788>)
 80035f2:	0031      	movs	r1, r6
 80035f4:	0028      	movs	r0, r5
 80035f6:	f011 fe91 	bl	801531c <__wrap_printf>
        Reg_regor(0x06, 0x00080000);
 80035fa:	2080      	movs	r0, #128	; 0x80
 80035fc:	0300      	lsls	r0, r0, #12
 80035fe:	f007 fd17 	bl	800b030 <Reg_regor.constprop.76>
        return 0;
 8003602:	2000      	movs	r0, #0
 8003604:	e515      	b.n	8003032 <createService+0x4e>
		far_active = 0;
 8003606:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <createService+0x78c>)
        DBG_PRINTLN("updating sparse config");
 8003608:	4650      	mov	r0, sl
		far_active = 0;
 800360a:	4699      	mov	r9, r3
 800360c:	2300      	movs	r3, #0
 800360e:	464a      	mov	r2, r9
 8003610:	7413      	strb	r3, [r2, #16]
        DBG_PRINTLN("updating sparse config");
 8003612:	f011 fe83 	bl	801531c <__wrap_printf>
 8003616:	4857      	ldr	r0, [pc, #348]	; (8003774 <createService+0x790>)
 8003618:	f011 fe80 	bl	801531c <__wrap_printf>
 800361c:	229a      	movs	r2, #154	; 0x9a
 800361e:	0031      	movs	r1, r6
 8003620:	0092      	lsls	r2, r2, #2
 8003622:	0028      	movs	r0, r5
 8003624:	f011 fe7a 	bl	801531c <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 8003628:	b2b9      	uxth	r1, r7
 800362a:	4f53      	ldr	r7, [pc, #332]	; (8003778 <createService+0x794>)
 800362c:	b2a2      	uxth	r2, r4
 800362e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003630:	f7fd fcf0 	bl	8001014 <updateSparseConfig>
 8003634:	e55a      	b.n	80030ec <createService+0x108>
 8003636:	2330      	movs	r3, #48	; 0x30
 8003638:	4a50      	ldr	r2, [pc, #320]	; (800377c <createService+0x798>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d100      	bne.n	8003642 <createService+0x65e>
 8003640:	e6be      	b.n	80033c0 <createService+0x3dc>
 8003642:	f7fc fd5f 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 8003646:	e6bb      	b.n	80033c0 <createService+0x3dc>
		ERR_PRINTLN("sparse service creation fail");
 8003648:	4846      	ldr	r0, [pc, #280]	; (8003764 <createService+0x780>)
 800364a:	f011 fe67 	bl	801531c <__wrap_printf>
 800364e:	484c      	ldr	r0, [pc, #304]	; (8003780 <createService+0x79c>)
 8003650:	f011 fe64 	bl	801531c <__wrap_printf>
 8003654:	4a4b      	ldr	r2, [pc, #300]	; (8003784 <createService+0x7a0>)
 8003656:	0031      	movs	r1, r6
 8003658:	0028      	movs	r0, r5
 800365a:	f011 fe5f 	bl	801531c <__wrap_printf>
 800365e:	e7cc      	b.n	80035fa <createService+0x616>
		ERR_PRINTLN("envelope service creation failed");
 8003660:	4840      	ldr	r0, [pc, #256]	; (8003764 <createService+0x780>)
 8003662:	f011 fe5b 	bl	801531c <__wrap_printf>
 8003666:	4848      	ldr	r0, [pc, #288]	; (8003788 <createService+0x7a4>)
 8003668:	f011 fe58 	bl	801531c <__wrap_printf>
 800366c:	4a47      	ldr	r2, [pc, #284]	; (800378c <createService+0x7a8>)
 800366e:	0031      	movs	r1, r6
 8003670:	0028      	movs	r0, r5
 8003672:	f011 fe53 	bl	801531c <__wrap_printf>
 8003676:	e7c0      	b.n	80035fa <createService+0x616>
			if(sparse_data_malloc() == -1){
 8003678:	f7ff fa45 	bl	8002b06 <sparse_data_malloc>
 800367c:	1c43      	adds	r3, r0, #1
 800367e:	d000      	beq.n	8003682 <createService+0x69e>
 8003680:	e546      	b.n	8003110 <createService+0x12c>
                DBG_PRINTLN("data buffer allocation failed");
 8003682:	4650      	mov	r0, sl
 8003684:	f011 fe4a 	bl	801531c <__wrap_printf>
 8003688:	4841      	ldr	r0, [pc, #260]	; (8003790 <createService+0x7ac>)
 800368a:	f011 fe47 	bl	801531c <__wrap_printf>
 800368e:	4a41      	ldr	r2, [pc, #260]	; (8003794 <createService+0x7b0>)
 8003690:	0031      	movs	r1, r6
 8003692:	0028      	movs	r0, r5
 8003694:	f011 fe42 	bl	801531c <__wrap_printf>
                stopService();
 8003698:	f7ff fbe2 	bl	8002e60 <stopService>
 800369c:	e538      	b.n	8003110 <createService+0x12c>
 800369e:	4643      	mov	r3, r8
 80036a0:	8f1f      	ldrh	r7, [r3, #56]	; 0x38
 80036a2:	e6d5      	b.n	8003450 <createService+0x46c>
	return *regptr;
 80036a4:	464b      	mov	r3, r9
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4640      	mov	r0, r8
 80036aa:	9303      	str	r3, [sp, #12]
 80036ac:	f7fc fd78 	bl	80001a0 <acc_service_get_base_configuration>
 80036b0:	4683      	mov	fp, r0
 80036b2:	f003 f921 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d100      	bne.n	80036bc <createService+0x6d8>
 80036ba:	e5b2      	b.n	8003222 <createService+0x23e>
 80036bc:	2303      	movs	r3, #3
 80036be:	465a      	mov	r2, fp
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 80036c0:	9803      	ldr	r0, [sp, #12]
 80036c2:	7113      	strb	r3, [r2, #4]
 80036c4:	f00c f8e0 	bl	800f888 <__aeabi_ui2f>
 80036c8:	4933      	ldr	r1, [pc, #204]	; (8003798 <createService+0x7b4>)
 80036ca:	f00b f84d 	bl	800e768 <__aeabi_fdiv>
 80036ce:	465b      	mov	r3, fp
 80036d0:	6098      	str	r0, [r3, #8]
 80036d2:	e5a6      	b.n	8003222 <createService+0x23e>
		ERR_PRINTLN("sparse far service creation fail");
 80036d4:	4823      	ldr	r0, [pc, #140]	; (8003764 <createService+0x780>)
 80036d6:	f011 fe21 	bl	801531c <__wrap_printf>
 80036da:	4830      	ldr	r0, [pc, #192]	; (800379c <createService+0x7b8>)
 80036dc:	f011 fe1e 	bl	801531c <__wrap_printf>
 80036e0:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <createService+0x7bc>)
 80036e2:	0031      	movs	r1, r6
 80036e4:	0028      	movs	r0, r5
 80036e6:	f011 fe19 	bl	801531c <__wrap_printf>
 80036ea:	e786      	b.n	80035fa <createService+0x616>
 80036ec:	4640      	mov	r0, r8
 80036ee:	f7fc fd57 	bl	80001a0 <acc_service_get_base_configuration>
 80036f2:	f7fd f819 	bl	8000728 <acc_base_configuration_repetition_mode_on_demand_set>
 80036f6:	e594      	b.n	8003222 <createService+0x23e>
            DBG_PRINTLN("data buffer allocation failed");
 80036f8:	4650      	mov	r0, sl
 80036fa:	f011 fe0f 	bl	801531c <__wrap_printf>
 80036fe:	4824      	ldr	r0, [pc, #144]	; (8003790 <createService+0x7ac>)
 8003700:	f011 fe0c 	bl	801531c <__wrap_printf>
 8003704:	4a27      	ldr	r2, [pc, #156]	; (80037a4 <createService+0x7c0>)
 8003706:	0031      	movs	r1, r6
 8003708:	0028      	movs	r0, r5
 800370a:	f011 fe07 	bl	801531c <__wrap_printf>
            stopService();
 800370e:	f7ff fba7 	bl	8002e60 <stopService>
 8003712:	e6a9      	b.n	8003468 <createService+0x484>
 8003714:	4640      	mov	r0, r8
 8003716:	f7fc fd43 	bl	80001a0 <acc_service_get_base_configuration>
 800371a:	4680      	mov	r8, r0
 800371c:	f003 f8ec 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8003720:	2800      	cmp	r0, #0
 8003722:	d100      	bne.n	8003726 <createService+0x742>
 8003724:	e670      	b.n	8003408 <createService+0x424>
 8003726:	20fe      	movs	r0, #254	; 0xfe
 8003728:	4649      	mov	r1, r9
 800372a:	0580      	lsls	r0, r0, #22
 800372c:	f00b fa60 	bl	800ebf0 <__aeabi_fsub>
 8003730:	4643      	mov	r3, r8
 8003732:	2100      	movs	r1, #0
 8003734:	6158      	str	r0, [r3, #20]
 8003736:	4648      	mov	r0, r9
 8003738:	f00b fe1a 	bl	800f370 <__aeabi_fcmpeq>
 800373c:	4243      	negs	r3, r0
 800373e:	4158      	adcs	r0, r3
 8003740:	4643      	mov	r3, r8
 8003742:	7618      	strb	r0, [r3, #24]
 8003744:	e660      	b.n	8003408 <createService+0x424>
            DBG_PRINTLN("data buffer allocation failed");
 8003746:	4650      	mov	r0, sl
 8003748:	f011 fde8 	bl	801531c <__wrap_printf>
 800374c:	4810      	ldr	r0, [pc, #64]	; (8003790 <createService+0x7ac>)
 800374e:	f011 fde5 	bl	801531c <__wrap_printf>
 8003752:	22a5      	movs	r2, #165	; 0xa5
 8003754:	0031      	movs	r1, r6
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	0028      	movs	r0, r5
 800375a:	f011 fddf 	bl	801531c <__wrap_printf>
            stopService();
 800375e:	f7ff fb7f 	bl	8002e60 <stopService>
 8003762:	e4fd      	b.n	8003160 <createService+0x17c>
 8003764:	0801c3ec 	.word	0x0801c3ec
 8003768:	0801c808 	.word	0x0801c808
 800376c:	00000275 	.word	0x00000275
 8003770:	2000008c 	.word	0x2000008c
 8003774:	0801c7c4 	.word	0x0801c7c4
 8003778:	2000010c 	.word	0x2000010c
 800377c:	200002b0 	.word	0x200002b0
 8003780:	0801c834 	.word	0x0801c834
 8003784:	0000027b 	.word	0x0000027b
 8003788:	0801c764 	.word	0x0801c764
 800378c:	00000251 	.word	0x00000251
 8003790:	0801c788 	.word	0x0801c788
 8003794:	00000281 	.word	0x00000281
 8003798:	447a0000 	.word	0x447a0000
 800379c:	0801c854 	.word	0x0801c854
 80037a0:	0000028f 	.word	0x0000028f
 80037a4:	00000257 	.word	0x00000257

080037a8 <acc_service_activate>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	46ce      	mov	lr, r9
 80037ac:	4647      	mov	r7, r8
 80037ae:	b580      	push	{r7, lr}
 80037b0:	0004      	movs	r4, r0
 80037b2:	f7ff faca 	bl	8002d4a <acc_service_handle_valid>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d10b      	bne.n	80037d2 <acc_service_activate+0x2a>
 80037ba:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <acc_service_activate+0x104>)
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <acc_service_activate+0x108>)
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	493c      	ldr	r1, [pc, #240]	; (80038b4 <acc_service_activate+0x10c>)
 80037c2:	2000      	movs	r0, #0
 80037c4:	4798      	blx	r3
 80037c6:	2600      	movs	r6, #0
 80037c8:	0030      	movs	r0, r6
 80037ca:	bc0c      	pop	{r2, r3}
 80037cc:	4690      	mov	r8, r2
 80037ce:	4699      	mov	r9, r3
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d2:	4d39      	ldr	r5, [pc, #228]	; (80038b8 <acc_service_activate+0x110>)
 80037d4:	002b      	movs	r3, r5
 80037d6:	3329      	adds	r3, #41	; 0x29
 80037d8:	781e      	ldrb	r6, [r3, #0]
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d0ed      	beq.n	80037ba <acc_service_activate+0x12>
 80037de:	7a63      	ldrb	r3, [r4, #9]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f1      	beq.n	80037c8 <acc_service_activate+0x20>
 80037e4:	6863      	ldr	r3, [r4, #4]
 80037e6:	2b2a      	cmp	r3, #42	; 0x2a
 80037e8:	d8e7      	bhi.n	80037ba <acc_service_activate+0x12>
 80037ea:	002a      	movs	r2, r5
 80037ec:	0059      	lsls	r1, r3, #1
 80037ee:	324c      	adds	r2, #76	; 0x4c
 80037f0:	5c8f      	ldrb	r7, [r1, r2]
 80037f2:	2f00      	cmp	r7, #0
 80037f4:	d1e1      	bne.n	80037ba <acc_service_activate+0x12>
 80037f6:	2001      	movs	r0, #1
 80037f8:	5488      	strb	r0, [r1, r2]
 80037fa:	1852      	adds	r2, r2, r1
 80037fc:	7852      	ldrb	r2, [r2, #1]
 80037fe:	2a00      	cmp	r2, #0
 8003800:	d144      	bne.n	800388c <acc_service_activate+0xe4>
 8003802:	3218      	adds	r2, #24
 8003804:	4690      	mov	r8, r2
 8003806:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <acc_service_activate+0x114>)
 8003808:	44a0      	add	r8, r4
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	2a00      	cmp	r2, #0
 800380e:	d002      	beq.n	8003816 <acc_service_activate+0x6e>
 8003810:	6892      	ldr	r2, [r2, #8]
 8003812:	2a00      	cmp	r2, #0
 8003814:	d145      	bne.n	80038a2 <acc_service_activate+0xfa>
 8003816:	7e22      	ldrb	r2, [r4, #24]
 8003818:	2a02      	cmp	r2, #2
 800381a:	d01f      	beq.n	800385c <acc_service_activate+0xb4>
 800381c:	4640      	mov	r0, r8
 800381e:	f002 fe1d 	bl	800645c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261>
 8003822:	2800      	cmp	r0, #0
 8003824:	d032      	beq.n	800388c <acc_service_activate+0xe4>
 8003826:	7ea3      	ldrb	r3, [r4, #26]
 8003828:	4699      	mov	r9, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <acc_service_activate+0xc8>
 800382e:	7e23      	ldrb	r3, [r4, #24]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d110      	bne.n	8003856 <acc_service_activate+0xae>
 8003834:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003836:	2200      	movs	r2, #0
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	69e1      	ldr	r1, [r4, #28]
 800383c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800383e:	4798      	blx	r3
 8003840:	2800      	cmp	r0, #0
 8003842:	d023      	beq.n	800388c <acc_service_activate+0xe4>
 8003844:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003846:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	4798      	blx	r3
 800384c:	2800      	cmp	r0, #0
 800384e:	d01d      	beq.n	800388c <acc_service_activate+0xe4>
 8003850:	4640      	mov	r0, r8
 8003852:	f002 fd31 	bl	80062b8 <acc_sensor_manager_hibernate_enter.lto_priv.260>
 8003856:	6863      	ldr	r3, [r4, #4]
 8003858:	2b2a      	cmp	r3, #42	; 0x2a
 800385a:	d805      	bhi.n	8003868 <acc_service_activate+0xc0>
 800385c:	002a      	movs	r2, r5
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	324c      	adds	r2, #76	; 0x4c
 8003862:	18d3      	adds	r3, r2, r3
 8003864:	2201      	movs	r2, #1
 8003866:	705a      	strb	r2, [r3, #1]
 8003868:	2300      	movs	r3, #0
 800386a:	0037      	movs	r7, r6
 800386c:	7263      	strb	r3, [r4, #9]
 800386e:	e00d      	b.n	800388c <acc_service_activate+0xe4>
 8003870:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003872:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	4798      	blx	r3
 8003878:	2800      	cmp	r0, #0
 800387a:	d007      	beq.n	800388c <acc_service_activate+0xe4>
 800387c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800387e:	464a      	mov	r2, r9
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	69e1      	ldr	r1, [r4, #28]
 8003884:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003886:	4798      	blx	r3
 8003888:	2800      	cmp	r0, #0
 800388a:	d1d0      	bne.n	800382e <acc_service_activate+0x86>
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	2b2a      	cmp	r3, #42	; 0x2a
 8003890:	d803      	bhi.n	800389a <acc_service_activate+0xf2>
 8003892:	2200      	movs	r2, #0
 8003894:	354c      	adds	r5, #76	; 0x4c
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	555a      	strb	r2, [r3, r5]
 800389a:	2f00      	cmp	r7, #0
 800389c:	d100      	bne.n	80038a0 <acc_service_activate+0xf8>
 800389e:	e78c      	b.n	80037ba <acc_service_activate+0x12>
 80038a0:	e792      	b.n	80037c8 <acc_service_activate+0x20>
 80038a2:	4640      	mov	r0, r8
 80038a4:	4790      	blx	r2
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d0f0      	beq.n	800388c <acc_service_activate+0xe4>
 80038aa:	e7d4      	b.n	8003856 <acc_service_activate+0xae>
 80038ac:	200002b0 	.word	0x200002b0
 80038b0:	0801c270 	.word	0x0801c270
 80038b4:	0801d3e8 	.word	0x0801d3e8
 80038b8:	2000010c 	.word	0x2000010c
 80038bc:	200004c4 	.word	0x200004c4

080038c0 <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 80038c0:	b510      	push	{r4, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 80038c6:	f7ff ff6f 	bl	80037a8 <acc_service_activate>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d117      	bne.n	80038fe <activateService_handle+0x3e>
		ERR_PRINTLN("acc_service_activate() failed");
 80038ce:	4815      	ldr	r0, [pc, #84]	; (8003924 <activateService_handle+0x64>)
 80038d0:	f011 fd24 	bl	801531c <__wrap_printf>
 80038d4:	4814      	ldr	r0, [pc, #80]	; (8003928 <activateService_handle+0x68>)
 80038d6:	f011 fd21 	bl	801531c <__wrap_printf>
 80038da:	4a14      	ldr	r2, [pc, #80]	; (800392c <activateService_handle+0x6c>)
 80038dc:	4914      	ldr	r1, [pc, #80]	; (8003930 <activateService_handle+0x70>)
 80038de:	4815      	ldr	r0, [pc, #84]	; (8003934 <activateService_handle+0x74>)
 80038e0:	f011 fd1c 	bl	801531c <__wrap_printf>
		acc_service_destroy(&handle);
 80038e4:	a801      	add	r0, sp, #4
 80038e6:	f7ff fa8d 	bl	8002e04 <acc_service_destroy>
		data_free();
 80038ea:	f7fc fe65 	bl	80005b8 <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <activateService_handle+0x78>)
		return 0;
 80038f0:	2400      	movs	r4, #0
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80038f2:	7c1b      	ldrb	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <activateService_handle+0x58>
}
 80038f8:	0020      	movs	r0, r4
 80038fa:	b002      	add	sp, #8
 80038fc:	bd10      	pop	{r4, pc}
		DBG_PRINTLN("service handle activated");
 80038fe:	480f      	ldr	r0, [pc, #60]	; (800393c <activateService_handle+0x7c>)
 8003900:	f011 fd0c 	bl	801531c <__wrap_printf>
 8003904:	480e      	ldr	r0, [pc, #56]	; (8003940 <activateService_handle+0x80>)
 8003906:	f011 fd09 	bl	801531c <__wrap_printf>
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <activateService_handle+0x84>)
 800390c:	4908      	ldr	r1, [pc, #32]	; (8003930 <activateService_handle+0x70>)
 800390e:	4809      	ldr	r0, [pc, #36]	; (8003934 <activateService_handle+0x74>)
 8003910:	f011 fd04 	bl	801531c <__wrap_printf>
 8003914:	2401      	movs	r4, #1
 8003916:	e7ef      	b.n	80038f8 <activateService_handle+0x38>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 8003918:	480b      	ldr	r0, [pc, #44]	; (8003948 <activateService_handle+0x88>)
 800391a:	302c      	adds	r0, #44	; 0x2c
 800391c:	f7ff fa72 	bl	8002e04 <acc_service_destroy>
 8003920:	e7ea      	b.n	80038f8 <activateService_handle+0x38>
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	0801c3ec 	.word	0x0801c3ec
 8003928:	0801c878 	.word	0x0801c878
 800392c:	000002b5 	.word	0x000002b5
 8003930:	0801c2f4 	.word	0x0801c2f4
 8003934:	0801c308 	.word	0x0801c308
 8003938:	2000008c 	.word	0x2000008c
 800393c:	0801c388 	.word	0x0801c388
 8003940:	0801c898 	.word	0x0801c898
 8003944:	000002bf 	.word	0x000002bf
 8003948:	2000018c 	.word	0x2000018c

0800394c <activateService>:
int8_t activateService(void){
 800394c:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 800394e:	4819      	ldr	r0, [pc, #100]	; (80039b4 <activateService+0x68>)
 8003950:	f011 fce4 	bl	801531c <__wrap_printf>
 8003954:	4818      	ldr	r0, [pc, #96]	; (80039b8 <activateService+0x6c>)
 8003956:	f011 fce1 	bl	801531c <__wrap_printf>
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <activateService+0x70>)
 800395c:	4918      	ldr	r1, [pc, #96]	; (80039c0 <activateService+0x74>)
 800395e:	4819      	ldr	r0, [pc, #100]	; (80039c4 <activateService+0x78>)
 8003960:	f011 fcdc 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8003964:	2201      	movs	r2, #1
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <activateService+0x7c>)
 8003968:	4252      	negs	r2, r2
 800396a:	601a      	str	r2, [r3, #0]
	return *regptr;
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <activateService+0x80>)
 800396e:	689b      	ldr	r3, [r3, #8]
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 8003970:	2b02      	cmp	r3, #2
 8003972:	d018      	beq.n	80039a6 <activateService+0x5a>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 8003974:	2b04      	cmp	r3, #4
 8003976:	d006      	beq.n	8003986 <activateService+0x3a>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 8003978:	2080      	movs	r0, #128	; 0x80
 800397a:	02c0      	lsls	r0, r0, #11
 800397c:	f007 fb58 	bl	800b030 <Reg_regor.constprop.76>
 8003980:	2400      	movs	r4, #0
}
 8003982:	0020      	movs	r0, r4
 8003984:	bd10      	pop	{r4, pc}
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <activateService+0x84>)
 8003988:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800398a:	f7ff ff99 	bl	80038c0 <activateService_handle>
 800398e:	0004      	movs	r4, r0
    if(success){
 8003990:	2c00      	cmp	r4, #0
 8003992:	d104      	bne.n	800399e <activateService+0x52>
        Reg_regor(0x06, 0x00100000);
 8003994:	2080      	movs	r0, #128	; 0x80
 8003996:	0340      	lsls	r0, r0, #13
 8003998:	f007 fb4a 	bl	800b030 <Reg_regor.constprop.76>
 800399c:	e7f1      	b.n	8003982 <activateService+0x36>
        Reg_regor(0x06, 0x00000002);
 800399e:	2002      	movs	r0, #2
 80039a0:	f007 fb46 	bl	800b030 <Reg_regor.constprop.76>
 80039a4:	e7ed      	b.n	8003982 <activateService+0x36>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <activateService+0x84>)
 80039a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039aa:	f7ff ff89 	bl	80038c0 <activateService_handle>
 80039ae:	0004      	movs	r4, r0
 80039b0:	e7ee      	b.n	8003990 <activateService+0x44>
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	0801c388 	.word	0x0801c388
 80039b8:	0801c8b4 	.word	0x0801c8b4
 80039bc:	000002a2 	.word	0x000002a2
 80039c0:	0801c2f4 	.word	0x0801c2f4
 80039c4:	0801c308 	.word	0x0801c308
 80039c8:	200003b8 	.word	0x200003b8
 80039cc:	200003bc 	.word	0x200003bc
 80039d0:	2000018c 	.word	0x2000018c

080039d4 <HAL_UART_RxCpltCallback>:
	if (uart_state == 0){
 80039d4:	2240      	movs	r2, #64	; 0x40
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80039d6:	b570      	push	{r4, r5, r6, lr}
	if (uart_state == 0){
 80039d8:	4c17      	ldr	r4, [pc, #92]	; (8003a38 <HAL_UART_RxCpltCallback+0x64>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80039da:	0005      	movs	r5, r0
	if (uart_state == 0){
 80039dc:	5ca3      	ldrb	r3, [r4, r2]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d107      	bne.n	80039f2 <HAL_UART_RxCpltCallback+0x1e>
		if (uart_rx_buff[0] == 0xCC){
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_UART_RxCpltCallback+0x68>)
 80039e4:	7809      	ldrb	r1, [r1, #0]
 80039e6:	29cc      	cmp	r1, #204	; 0xcc
 80039e8:	d00a      	beq.n	8003a00 <HAL_UART_RxCpltCallback+0x2c>
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 80039ea:	2101      	movs	r1, #1
 80039ec:	f007 f982 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
}
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
	}else if (uart_state == 1){
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d00c      	beq.n	8003a10 <HAL_UART_RxCpltCallback+0x3c>
	}else if (uart_state == 3){
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d1fa      	bne.n	80039f0 <HAL_UART_RxCpltCallback+0x1c>
		uart_state = 4;
 80039fa:	3301      	adds	r3, #1
 80039fc:	54a3      	strb	r3, [r4, r2]
 80039fe:	e7f7      	b.n	80039f0 <HAL_UART_RxCpltCallback+0x1c>
			uart_state = 1;
 8003a00:	39cb      	subs	r1, #203	; 0xcb
 8003a02:	54a1      	strb	r1, [r4, r2]
			cmd_length = 0;
 8003a04:	3201      	adds	r2, #1
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 8003a06:	3101      	adds	r1, #1
			cmd_length = 0;
 8003a08:	54a3      	strb	r3, [r4, r2]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 8003a0a:	f007 f973 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
 8003a0e:	e7ef      	b.n	80039f0 <HAL_UART_RxCpltCallback+0x1c>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 8003a10:	2641      	movs	r6, #65	; 0x41
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_UART_RxCpltCallback+0x68>)
 8003a14:	7819      	ldrb	r1, [r3, #0]
 8003a16:	55a1      	strb	r1, [r4, r6]
		if (cmd_length +2 > UART_BUFF){
 8003a18:	293e      	cmp	r1, #62	; 0x3e
 8003a1a:	d806      	bhi.n	8003a2a <HAL_UART_RxCpltCallback+0x56>
		uart_state = 3;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	54a3      	strb	r3, [r4, r2]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 8003a20:	3102      	adds	r1, #2
 8003a22:	0028      	movs	r0, r5
 8003a24:	f007 f966 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
 8003a28:	e7e2      	b.n	80039f0 <HAL_UART_RxCpltCallback+0x1c>
			uart_state = 0;
 8003a2a:	2300      	movs	r3, #0
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003a2c:	2101      	movs	r1, #1
			uart_state = 0;
 8003a2e:	54a3      	strb	r3, [r4, r2]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003a30:	f007 f960 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
 8003a34:	5da1      	ldrb	r1, [r4, r6]
 8003a36:	e7f3      	b.n	8003a20 <HAL_UART_RxCpltCallback+0x4c>
 8003a38:	2000018c 	.word	0x2000018c
 8003a3c:	20000368 	.word	0x20000368

08003a40 <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	b084      	sub	sp, #16
	if(!force){
 8003a44:	2a00      	cmp	r2, #0
 8003a46:	d02f      	beq.n	8003aa8 <RegInt_setregf+0x68>
	REGADRERR = -1;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <RegInt_setregf+0xc0>)
 8003a4c:	4252      	negs	r2, r2
 8003a4e:	601a      	str	r2, [r3, #0]
	if (reg <= 0x12){
 8003a50:	2812      	cmp	r0, #18
 8003a52:	d913      	bls.n	8003a7c <RegInt_setregf+0x3c>
	if (reg == 0xE9){
 8003a54:	28e9      	cmp	r0, #233	; 0xe9
 8003a56:	d114      	bne.n	8003a82 <RegInt_setregf+0x42>
		ptr = &OUTPUT_BUFFER_LENGTH;
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <RegInt_setregf+0xc4>)
	if (0xD0 <= reg && reg <= 0xD9){
 8003a5a:	0002      	movs	r2, r0
 8003a5c:	3230      	adds	r2, #48	; 0x30
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	2a09      	cmp	r2, #9
 8003a62:	d804      	bhi.n	8003a6e <RegInt_setregf+0x2e>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8003a64:	0003      	movs	r3, r0
 8003a66:	4828      	ldr	r0, [pc, #160]	; (8003b08 <RegInt_setregf+0xc8>)
 8003a68:	3bd0      	subs	r3, #208	; 0xd0
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	181b      	adds	r3, r3, r0
	if (!(*regptr == (uint32_t)-1)){
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	3201      	adds	r2, #1
 8003a72:	d03a      	beq.n	8003aea <RegInt_setregf+0xaa>
	return 1;
 8003a74:	2001      	movs	r0, #1
		*regptr = val;
 8003a76:	6019      	str	r1, [r3, #0]
}
 8003a78:	b004      	add	sp, #16
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
		ptr = &GENERAL_REGISTERS[reg];
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <RegInt_setregf+0xcc>)
 8003a7e:	0083      	lsls	r3, r0, #2
 8003a80:	189b      	adds	r3, r3, r2
	if (0x20 <= reg && reg <= 0x42){
 8003a82:	0002      	movs	r2, r0
 8003a84:	3a20      	subs	r2, #32
 8003a86:	b2d4      	uxtb	r4, r2
 8003a88:	2c22      	cmp	r4, #34	; 0x22
 8003a8a:	d802      	bhi.n	8003a92 <RegInt_setregf+0x52>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8003a8c:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <RegInt_setregf+0xd0>)
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	18d3      	adds	r3, r2, r3
	if (0x81 <= reg && reg <= 0x85){
 8003a92:	0002      	movs	r2, r0
 8003a94:	327f      	adds	r2, #127	; 0x7f
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	2a04      	cmp	r2, #4
 8003a9a:	d8de      	bhi.n	8003a5a <RegInt_setregf+0x1a>
		ptr = &META_REGISTERS[reg - 0x81];
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <RegInt_setregf+0xd4>)
 8003aa0:	3b81      	subs	r3, #129	; 0x81
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	189b      	adds	r3, r3, r2
 8003aa6:	e7d8      	b.n	8003a5a <RegInt_setregf+0x1a>
    if(reg == 0x02){
 8003aa8:	2802      	cmp	r0, #2
 8003aaa:	d020      	beq.n	8003aee <RegInt_setregf+0xae>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8003aac:	ac01      	add	r4, sp, #4
 8003aae:	0022      	movs	r2, r4
 8003ab0:	4b19      	ldr	r3, [pc, #100]	; (8003b18 <RegInt_setregf+0xd8>)
 8003ab2:	331c      	adds	r3, #28
 8003ab4:	cb60      	ldmia	r3!, {r5, r6}
 8003ab6:	c260      	stmia	r2!, {r5, r6}
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	8013      	strh	r3, [r2, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	e004      	b.n	8003aca <RegInt_setregf+0x8a>
		if (reg < read_only_addr[i]){break;}
 8003ac0:	4290      	cmp	r0, r2
 8003ac2:	d3c1      	bcc.n	8003a48 <RegInt_setregf+0x8>
 8003ac4:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 10; i++){
 8003ac6:	2b0a      	cmp	r3, #10
 8003ac8:	d0be      	beq.n	8003a48 <RegInt_setregf+0x8>
		if (reg == read_only_addr[i]){return 0;}
 8003aca:	5ce2      	ldrb	r2, [r4, r3]
 8003acc:	4290      	cmp	r0, r2
 8003ace:	d1f7      	bne.n	8003ac0 <RegInt_setregf+0x80>
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8003ad0:	4812      	ldr	r0, [pc, #72]	; (8003b1c <RegInt_setregf+0xdc>)
 8003ad2:	f011 fc23 	bl	801531c <__wrap_printf>
 8003ad6:	4812      	ldr	r0, [pc, #72]	; (8003b20 <RegInt_setregf+0xe0>)
 8003ad8:	f011 fc20 	bl	801531c <__wrap_printf>
 8003adc:	224f      	movs	r2, #79	; 0x4f
 8003ade:	4911      	ldr	r1, [pc, #68]	; (8003b24 <RegInt_setregf+0xe4>)
 8003ae0:	4811      	ldr	r0, [pc, #68]	; (8003b28 <RegInt_setregf+0xe8>)
 8003ae2:	f011 fc1b 	bl	801531c <__wrap_printf>
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	e7c6      	b.n	8003a78 <RegInt_setregf+0x38>
	return 1;
 8003aea:	2001      	movs	r0, #1
 8003aec:	e7c4      	b.n	8003a78 <RegInt_setregf+0x38>
	REGADRERR = -1;
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <RegInt_setregf+0xc0>)
 8003af0:	3a01      	subs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
	return *regptr;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <RegInt_setregf+0xcc>)
        if(RegInt_getreg(0x06) && 0x00000001){
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0d7      	beq.n	8003aac <RegInt_setregf+0x6c>
 8003afc:	e7e8      	b.n	8003ad0 <RegInt_setregf+0x90>
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	200003b8 	.word	0x200003b8
 8003b04:	200005a8 	.word	0x200005a8
 8003b08:	200004c8 	.word	0x200004c8
 8003b0c:	200003bc 	.word	0x200003bc
 8003b10:	2000051c 	.word	0x2000051c
 8003b14:	20000508 	.word	0x20000508
 8003b18:	08015bb4 	.word	0x08015bb4
 8003b1c:	0801c388 	.word	0x0801c388
 8003b20:	0801c8c8 	.word	0x0801c8c8
 8003b24:	0801c2f4 	.word	0x0801c2f4
 8003b28:	0801c308 	.word	0x0801c308

08003b2c <RegInt_Init>:
	queue_cmd_end = 0;
 8003b2c:	2342      	movs	r3, #66	; 0x42
 8003b2e:	2200      	movs	r2, #0
void RegInt_Init(void){
 8003b30:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 0; i < 0xFF; i++){
 8003b32:	2400      	movs	r4, #0
	queue_cmd_end = 0;
 8003b34:	4d2c      	ldr	r5, [pc, #176]	; (8003be8 <RegInt_Init+0xbc>)
 8003b36:	54ea      	strb	r2, [r5, r3]
		RegInt_setregf(i, 0, 1);
 8003b38:	0020      	movs	r0, r4
	for(uint8_t i = 0; i < 0xFF; i++){
 8003b3a:	3401      	adds	r4, #1
		RegInt_setregf(i, 0, 1);
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	2100      	movs	r1, #0
	for(uint8_t i = 0; i < 0xFF; i++){
 8003b40:	b2e4      	uxtb	r4, r4
		RegInt_setregf(i, 0, 1);
 8003b42:	f7ff ff7d 	bl	8003a40 <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 8003b46:	2cff      	cmp	r4, #255	; 0xff
 8003b48:	d1f6      	bne.n	8003b38 <RegInt_Init+0xc>
	REGADRERR = -1;
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <RegInt_Init+0xc0>)
 8003b4e:	4252      	negs	r2, r2
 8003b50:	601a      	str	r2, [r3, #0]
	if (!(*regptr == (uint32_t)-1)){
 8003b52:	4b27      	ldr	r3, [pc, #156]	; (8003bf0 <RegInt_Init+0xc4>)
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	3201      	adds	r2, #1
 8003b58:	d002      	beq.n	8003b60 <RegInt_Init+0x34>
		*regptr = val;
 8003b5a:	22e1      	movs	r2, #225	; 0xe1
 8003b5c:	0252      	lsls	r2, r2, #9
 8003b5e:	61da      	str	r2, [r3, #28]
	if (!(*regptr == (uint32_t)-1)){
 8003b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b62:	3201      	adds	r2, #1
 8003b64:	d001      	beq.n	8003b6a <RegInt_Init+0x3e>
		*regptr = val;
 8003b66:	2200      	movs	r2, #0
 8003b68:	629a      	str	r2, [r3, #40]	; 0x28
	if (!(*regptr == (uint32_t)-1)){
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6c:	3201      	adds	r2, #1
 8003b6e:	d001      	beq.n	8003b74 <RegInt_Init+0x48>
		*regptr = val;
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <RegInt_Init+0xc8>)
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
	if (!(*regptr == (uint32_t)-1)){
 8003b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b76:	3201      	adds	r2, #1
 8003b78:	d001      	beq.n	8003b7e <RegInt_Init+0x52>
		*regptr = val;
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <RegInt_Init+0xcc>)
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
	if (!(*regptr == (uint32_t)-1)){
 8003b7e:	4b1f      	ldr	r3, [pc, #124]	; (8003bfc <RegInt_Init+0xd0>)
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	3201      	adds	r2, #1
 8003b84:	d002      	beq.n	8003b8c <RegInt_Init+0x60>
		*regptr = val;
 8003b86:	2296      	movs	r2, #150	; 0x96
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	611a      	str	r2, [r3, #16]
	if (!(*regptr == (uint32_t)-1)){
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	3201      	adds	r2, #1
 8003b90:	d002      	beq.n	8003b98 <RegInt_Init+0x6c>
		*regptr = val;
 8003b92:	22fa      	movs	r2, #250	; 0xfa
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	615a      	str	r2, [r3, #20]
	if (!(*regptr == (uint32_t)-1)){
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	3201      	adds	r2, #1
 8003b9c:	d001      	beq.n	8003ba2 <RegInt_Init+0x76>
		*regptr = val;
 8003b9e:	220f      	movs	r2, #15
 8003ba0:	619a      	str	r2, [r3, #24]
	if (!(*regptr == (uint32_t)-1)){
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	3201      	adds	r2, #1
 8003ba6:	d001      	beq.n	8003bac <RegInt_Init+0x80>
		*regptr = val;
 8003ba8:	2202      	movs	r2, #2
 8003baa:	61da      	str	r2, [r3, #28]
	if (!(*regptr == (uint32_t)-1)){
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	3201      	adds	r2, #1
 8003bb0:	d002      	beq.n	8003bb8 <RegInt_Init+0x8c>
		*regptr = val;
 8003bb2:	22fa      	movs	r2, #250	; 0xfa
 8003bb4:	0052      	lsls	r2, r2, #1
 8003bb6:	621a      	str	r2, [r3, #32]
	if (!(*regptr == (uint32_t)-1)){
 8003bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bba:	3201      	adds	r2, #1
 8003bbc:	d001      	beq.n	8003bc2 <RegInt_Init+0x96>
		*regptr = val;
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24
	uart_state = 0;
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	2200      	movs	r2, #0
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <RegInt_Init+0xd4>)
	uart_state = 0;
 8003bca:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003bcc:	f007 f892 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
	DBG_PRINTLN("Registers Initialised");
 8003bd0:	480c      	ldr	r0, [pc, #48]	; (8003c04 <RegInt_Init+0xd8>)
 8003bd2:	f011 fba3 	bl	801531c <__wrap_printf>
 8003bd6:	480c      	ldr	r0, [pc, #48]	; (8003c08 <RegInt_Init+0xdc>)
 8003bd8:	f011 fba0 	bl	801531c <__wrap_printf>
 8003bdc:	228c      	movs	r2, #140	; 0x8c
 8003bde:	490b      	ldr	r1, [pc, #44]	; (8003c0c <RegInt_Init+0xe0>)
 8003be0:	480b      	ldr	r0, [pc, #44]	; (8003c10 <RegInt_Init+0xe4>)
 8003be2:	f011 fb9b 	bl	801531c <__wrap_printf>
}
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	2000018c 	.word	0x2000018c
 8003bec:	200003b8 	.word	0x200003b8
 8003bf0:	200003bc 	.word	0x200003bc
 8003bf4:	bd010100 	.word	0xbd010100
 8003bf8:	bf010500 	.word	0xbf010500
 8003bfc:	200004c8 	.word	0x200004c8
 8003c00:	200005ac 	.word	0x200005ac
 8003c04:	0801c388 	.word	0x0801c388
 8003c08:	0801c8d8 	.word	0x0801c8d8
 8003c0c:	0801c2f4 	.word	0x0801c2f4
 8003c10:	0801c308 	.word	0x0801c308

08003c14 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c14:	2280      	movs	r2, #128	; 0x80
 8003c16:	4b02      	ldr	r3, [pc, #8]	; (8003c20 <SystemInit+0xc>)
 8003c18:	0512      	lsls	r2, r2, #20
 8003c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8003c1c:	4770      	bx	lr
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	46c6      	mov	lr, r8
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c28:	4c65      	ldr	r4, [pc, #404]	; (8003dc0 <USART1_IRQHandler+0x19c>)
 8003c2a:	b500      	push	{lr}
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b082      	sub	sp, #8
 8003c30:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c32:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c34:	6898      	ldr	r0, [r3, #8]
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 8003c36:	0715      	lsls	r5, r2, #28
 8003c38:	d10e      	bne.n	8003c58 <USART1_IRQHandler+0x34>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c3a:	2520      	movs	r5, #32
 8003c3c:	422a      	tst	r2, r5
 8003c3e:	d100      	bne.n	8003c42 <USART1_IRQHandler+0x1e>
 8003c40:	e08b      	b.n	8003d5a <USART1_IRQHandler+0x136>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c42:	4229      	tst	r1, r5
 8003c44:	d102      	bne.n	8003c4c <USART1_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c46:	00c5      	lsls	r5, r0, #3
 8003c48:	d400      	bmi.n	8003c4c <USART1_IRQHandler+0x28>
 8003c4a:	e086      	b.n	8003d5a <USART1_IRQHandler+0x136>
    {
      if (huart->RxISR != NULL)
 8003c4c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d07d      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
 8003c52:	0020      	movs	r0, r4
 8003c54:	4798      	blx	r3
 8003c56:	e07a      	b.n	8003d4e <USART1_IRQHandler+0x12a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c58:	4e5a      	ldr	r6, [pc, #360]	; (8003dc4 <USART1_IRQHandler+0x1a0>)
 8003c5a:	4006      	ands	r6, r0
 8003c5c:	46b0      	mov	r8, r6
 8003c5e:	1e35      	subs	r5, r6, #0
 8003c60:	d104      	bne.n	8003c6c <USART1_IRQHandler+0x48>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003c62:	3521      	adds	r5, #33	; 0x21
 8003c64:	35ff      	adds	r5, #255	; 0xff
 8003c66:	4229      	tst	r1, r5
 8003c68:	d100      	bne.n	8003c6c <USART1_IRQHandler+0x48>
 8003c6a:	e076      	b.n	8003d5a <USART1_IRQHandler+0x136>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c6c:	2501      	movs	r5, #1
 8003c6e:	422a      	tst	r2, r5
 8003c70:	d007      	beq.n	8003c82 <USART1_IRQHandler+0x5e>
 8003c72:	05ce      	lsls	r6, r1, #23
 8003c74:	d505      	bpl.n	8003c82 <USART1_IRQHandler+0x5e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c76:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c78:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c7a:	3788      	adds	r7, #136	; 0x88
 8003c7c:	683e      	ldr	r6, [r7, #0]
 8003c7e:	4335      	orrs	r5, r6
 8003c80:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c82:	2502      	movs	r5, #2
 8003c84:	422a      	tst	r2, r5
 8003c86:	d00a      	beq.n	8003c9e <USART1_IRQHandler+0x7a>
 8003c88:	07c6      	lsls	r6, r0, #31
 8003c8a:	d508      	bpl.n	8003c9e <USART1_IRQHandler+0x7a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c8c:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c90:	3788      	adds	r7, #136	; 0x88
 8003c92:	683d      	ldr	r5, [r7, #0]
 8003c94:	46ac      	mov	ip, r5
 8003c96:	2504      	movs	r5, #4
 8003c98:	4666      	mov	r6, ip
 8003c9a:	4335      	orrs	r5, r6
 8003c9c:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c9e:	2504      	movs	r5, #4
 8003ca0:	422a      	tst	r2, r5
 8003ca2:	d00a      	beq.n	8003cba <USART1_IRQHandler+0x96>
 8003ca4:	07c6      	lsls	r6, r0, #31
 8003ca6:	d508      	bpl.n	8003cba <USART1_IRQHandler+0x96>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ca8:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003caa:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cac:	3788      	adds	r7, #136	; 0x88
 8003cae:	683d      	ldr	r5, [r7, #0]
 8003cb0:	46ac      	mov	ip, r5
 8003cb2:	2502      	movs	r5, #2
 8003cb4:	4666      	mov	r6, ip
 8003cb6:	4335      	orrs	r5, r6
 8003cb8:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cba:	0715      	lsls	r5, r2, #28
 8003cbc:	d50b      	bpl.n	8003cd6 <USART1_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cbe:	068d      	lsls	r5, r1, #26
 8003cc0:	d402      	bmi.n	8003cc8 <USART1_IRQHandler+0xa4>
 8003cc2:	4645      	mov	r5, r8
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	d006      	beq.n	8003cd6 <USART1_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cc8:	2508      	movs	r5, #8
 8003cca:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ccc:	0023      	movs	r3, r4
 8003cce:	3388      	adds	r3, #136	; 0x88
 8003cd0:	681e      	ldr	r6, [r3, #0]
 8003cd2:	4335      	orrs	r5, r6
 8003cd4:	601d      	str	r5, [r3, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd6:	0023      	movs	r3, r4
 8003cd8:	3388      	adds	r3, #136	; 0x88
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d036      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ce0:	2320      	movs	r3, #32
 8003ce2:	421a      	tst	r2, r3
 8003ce4:	d008      	beq.n	8003cf8 <USART1_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ce6:	4219      	tst	r1, r3
 8003ce8:	d101      	bne.n	8003cee <USART1_IRQHandler+0xca>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cea:	00c3      	lsls	r3, r0, #3
 8003cec:	d504      	bpl.n	8003cf8 <USART1_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 8003cee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <USART1_IRQHandler+0xd4>
          huart->RxISR(huart);
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003cf8:	0021      	movs	r1, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cfa:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003cfc:	3188      	adds	r1, #136	; 0x88
 8003cfe:	680a      	ldr	r2, [r1, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d00:	6898      	ldr	r0, [r3, #8]
 8003d02:	0640      	lsls	r0, r0, #25
 8003d04:	d402      	bmi.n	8003d0c <USART1_IRQHandler+0xe8>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003d06:	2008      	movs	r0, #8
 8003d08:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d0a:	d024      	beq.n	8003d56 <USART1_IRQHandler+0x132>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	492e      	ldr	r1, [pc, #184]	; (8003dc8 <USART1_IRQHandler+0x1a4>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	492d      	ldr	r1, [pc, #180]	; (8003dcc <USART1_IRQHandler+0x1a8>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	0022      	movs	r2, r4
 8003d1e:	2120      	movs	r1, #32
 8003d20:	3208      	adds	r2, #8
 8003d22:	67d1      	str	r1, [r2, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d24:	2200      	movs	r2, #0
 8003d26:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	1849      	adds	r1, r1, r1
 8003d2c:	420a      	tst	r2, r1
 8003d2e:	d00e      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d30:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003d32:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d34:	438a      	bics	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	d008      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <USART1_IRQHandler+0x1ac>)
 8003d3e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d40:	f007 fd12 	bl	800b768 <HAL_DMA_Abort_IT>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d002      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d48:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003d4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d4c:	4798      	blx	r3
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8003d4e:	b002      	add	sp, #8
 8003d50:	bc04      	pop	{r2}
 8003d52:	4690      	mov	r8, r2
 8003d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	600a      	str	r2, [r1, #0]
 8003d58:	e7f9      	b.n	8003d4e <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d5a:	2580      	movs	r5, #128	; 0x80
 8003d5c:	036d      	lsls	r5, r5, #13
 8003d5e:	422a      	tst	r2, r5
 8003d60:	d003      	beq.n	8003d6a <USART1_IRQHandler+0x146>
 8003d62:	0246      	lsls	r6, r0, #9
 8003d64:	d501      	bpl.n	8003d6a <USART1_IRQHandler+0x146>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d66:	621d      	str	r5, [r3, #32]
 8003d68:	e7f1      	b.n	8003d4e <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d6a:	2580      	movs	r5, #128	; 0x80
 8003d6c:	422a      	tst	r2, r5
 8003d6e:	d008      	beq.n	8003d82 <USART1_IRQHandler+0x15e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d70:	4229      	tst	r1, r5
 8003d72:	d101      	bne.n	8003d78 <USART1_IRQHandler+0x154>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d74:	0200      	lsls	r0, r0, #8
 8003d76:	d504      	bpl.n	8003d82 <USART1_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 8003d78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d000      	beq.n	8003d80 <USART1_IRQHandler+0x15c>
 8003d7e:	e768      	b.n	8003c52 <USART1_IRQHandler+0x2e>
 8003d80:	e7e5      	b.n	8003d4e <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d82:	2040      	movs	r0, #64	; 0x40
 8003d84:	4202      	tst	r2, r0
 8003d86:	d0e2      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
 8003d88:	4201      	tst	r1, r0
 8003d8a:	d0e0      	beq.n	8003d4e <USART1_IRQHandler+0x12a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4382      	bics	r2, r0
 8003d90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d92:	2220      	movs	r2, #32
 8003d94:	1d23      	adds	r3, r4, #4
 8003d96:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d98:	2200      	movs	r2, #0
	if (queue_cmd_end == 2){
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <USART1_IRQHandler+0x1b0>)
 8003d9c:	6722      	str	r2, [r4, #112]	; 0x70
 8003d9e:	3342      	adds	r3, #66	; 0x42
 8003da0:	7819      	ldrb	r1, [r3, #0]
 8003da2:	2902      	cmp	r1, #2
 8003da4:	d102      	bne.n	8003dac <USART1_IRQHandler+0x188>
		queue_cmd_end = 1;
 8003da6:	3201      	adds	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	e7d0      	b.n	8003d4e <USART1_IRQHandler+0x12a>
	}else if(queue_cmd_end == 1){
 8003dac:	2901      	cmp	r1, #1
 8003dae:	d1ce      	bne.n	8003d4e <USART1_IRQHandler+0x12a>
		queue_cmd_end = 0;
 8003db0:	701a      	strb	r2, [r3, #0]
		uint8_t end = 0xCD;
 8003db2:	466b      	mov	r3, sp
 8003db4:	1dd8      	adds	r0, r3, #7
 8003db6:	23cd      	movs	r3, #205	; 0xcd
 8003db8:	7003      	strb	r3, [r0, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 8003dba:	f006 fead 	bl	800ab18 <HAL_UART_Transmit_IT.constprop.132>
 8003dbe:	e7c6      	b.n	8003d4e <USART1_IRQHandler+0x12a>
 8003dc0:	200005ac 	.word	0x200005ac
 8003dc4:	10000001 	.word	0x10000001
 8003dc8:	fffffedf 	.word	0xfffffedf
 8003dcc:	effffffe 	.word	0xeffffffe
 8003dd0:	0800a095 	.word	0x0800a095
 8003dd4:	2000018c 	.word	0x2000018c

08003dd8 <I2C1_IRQHandler>:
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003dd8:	22e0      	movs	r2, #224	; 0xe0
 8003dda:	4823      	ldr	r0, [pc, #140]	; (8003e68 <I2C1_IRQHandler+0x90>)
 8003ddc:	00d2      	lsls	r2, r2, #3
 8003dde:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003de0:	b570      	push	{r4, r5, r6, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003de2:	6999      	ldr	r1, [r3, #24]
 8003de4:	4211      	tst	r1, r2
 8003de6:	d037      	beq.n	8003e58 <I2C1_IRQHandler+0x80>
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003de8:	699c      	ldr	r4, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dea:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dec:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dee:	05e5      	lsls	r5, r4, #23
 8003df0:	d50a      	bpl.n	8003e08 <I2C1_IRQHandler+0x30>
 8003df2:	09d5      	lsrs	r5, r2, #7
 8003df4:	420d      	tst	r5, r1
 8003df6:	d007      	beq.n	8003e08 <I2C1_IRQHandler+0x30>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003df8:	0005      	movs	r5, r0
 8003dfa:	3588      	adds	r5, #136	; 0x88
 8003dfc:	682e      	ldr	r6, [r5, #0]
 8003dfe:	4331      	orrs	r1, r6
 8003e00:	6029      	str	r1, [r5, #0]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	0049      	lsls	r1, r1, #1
 8003e06:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e08:	2101      	movs	r1, #1
 8003e0a:	0565      	lsls	r5, r4, #21
 8003e0c:	d50b      	bpl.n	8003e26 <I2C1_IRQHandler+0x4e>
 8003e0e:	09d5      	lsrs	r5, r2, #7
 8003e10:	420d      	tst	r5, r1
 8003e12:	d008      	beq.n	8003e26 <I2C1_IRQHandler+0x4e>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e14:	0005      	movs	r5, r0
 8003e16:	3588      	adds	r5, #136	; 0x88
 8003e18:	682e      	ldr	r6, [r5, #0]
 8003e1a:	3107      	adds	r1, #7
 8003e1c:	4331      	orrs	r1, r6
 8003e1e:	6029      	str	r1, [r5, #0]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	00c9      	lsls	r1, r1, #3
 8003e24:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e26:	2101      	movs	r1, #1
 8003e28:	05a4      	lsls	r4, r4, #22
 8003e2a:	d50b      	bpl.n	8003e44 <I2C1_IRQHandler+0x6c>
 8003e2c:	09d2      	lsrs	r2, r2, #7
 8003e2e:	420a      	tst	r2, r1
 8003e30:	d008      	beq.n	8003e44 <I2C1_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e32:	0001      	movs	r1, r0
 8003e34:	2202      	movs	r2, #2
 8003e36:	3188      	adds	r1, #136	; 0x88
 8003e38:	680c      	ldr	r4, [r1, #0]
 8003e3a:	4322      	orrs	r2, r4
 8003e3c:	600a      	str	r2, [r1, #0]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e44:	0003      	movs	r3, r0
 8003e46:	3388      	adds	r3, #136	; 0x88
 8003e48:	6819      	ldr	r1, [r3, #0]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e4a:	230b      	movs	r3, #11
 8003e4c:	4219      	tst	r1, r3
 8003e4e:	d002      	beq.n	8003e56 <I2C1_IRQHandler+0x7e>
  {
    I2C_ITError(hi2c, tmperror);
 8003e50:	3044      	adds	r0, #68	; 0x44
 8003e52:	f007 fcc7 	bl	800b7e4 <I2C_ITError.lto_priv.685>
}
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e58:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e5a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8003e5c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f9      	beq.n	8003e56 <I2C1_IRQHandler+0x7e>
    hi2c->XferISR(hi2c, itflags, itsources);
 8003e62:	3044      	adds	r0, #68	; 0x44
 8003e64:	4798      	blx	r3
 8003e66:	e7f6      	b.n	8003e56 <I2C1_IRQHandler+0x7e>
 8003e68:	2000018c 	.word	0x2000018c

08003e6c <DMA1_Channel2_3_IRQHandler>:
{
 8003e6c:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003e6e:	4802      	ldr	r0, [pc, #8]	; (8003e78 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003e70:	f007 fc24 	bl	800b6bc <HAL_DMA_IRQHandler>
}
 8003e74:	bd10      	pop	{r4, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	20000464 	.word	0x20000464

08003e7c <DMA1_Channel1_IRQHandler>:
{
 8003e7c:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003e7e:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA1_Channel1_IRQHandler+0xc>)
 8003e80:	f007 fc1c 	bl	800b6bc <HAL_DMA_IRQHandler>
}
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000408 	.word	0x20000408

08003e8c <EXTI4_15_IRQHandler>:
{
 8003e8c:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003e8e:	2020      	movs	r0, #32
 8003e90:	f007 fe9c 	bl	800bbcc <HAL_GPIO_EXTI_IRQHandler>
}
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <EXTI2_3_IRQHandler>:
{
 8003e96:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003e98:	2008      	movs	r0, #8
 8003e9a:	f007 fe97 	bl	800bbcc <HAL_GPIO_EXTI_IRQHandler>
}
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <RTC_TAMP_IRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003ea0:	4a14      	ldr	r2, [pc, #80]	; (8003ef4 <RTC_TAMP_IRQHandler+0x54>)
{
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	6999      	ldr	r1, [r3, #24]
 8003ea8:	04c9      	lsls	r1, r1, #19
 8003eaa:	d508      	bpl.n	8003ebe <RTC_TAMP_IRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003eac:	2101      	movs	r1, #1
 8003eae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003eb0:	4208      	tst	r0, r1
 8003eb2:	d004      	beq.n	8003ebe <RTC_TAMP_IRQHandler+0x1e>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003eb4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003eb6:	4308      	orrs	r0, r1
 8003eb8:	65d8      	str	r0, [r3, #92]	; 0x5c
	rtc_alarm_triggered = true;
 8003eba:	480f      	ldr	r0, [pc, #60]	; (8003ef8 <RTC_TAMP_IRQHandler+0x58>)
 8003ebc:	7401      	strb	r1, [r0, #16]
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003ebe:	6999      	ldr	r1, [r3, #24]
 8003ec0:	0489      	lsls	r1, r1, #18
 8003ec2:	d506      	bpl.n	8003ed2 <RTC_TAMP_IRQHandler+0x32>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003ec8:	4208      	tst	r0, r1
 8003eca:	d002      	beq.n	8003ed2 <RTC_TAMP_IRQHandler+0x32>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003ecc:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003ece:	4301      	orrs	r1, r0
 8003ed0:	65d9      	str	r1, [r3, #92]	; 0x5c
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	3129      	adds	r1, #41	; 0x29
 8003ed8:	7008      	strb	r0, [r1, #0]
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003eda:	2104      	movs	r1, #4
 8003edc:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8003ede:	420c      	tst	r4, r1
 8003ee0:	d004      	beq.n	8003eec <RTC_TAMP_IRQHandler+0x4c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003ee2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8003ee4:	4321      	orrs	r1, r4
 8003ee6:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_wakeup_triggered = true;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <RTC_TAMP_IRQHandler+0x5c>)
 8003eea:	7018      	strb	r0, [r3, #0]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003eec:	2301      	movs	r3, #1
 8003eee:	3229      	adds	r2, #41	; 0x29
 8003ef0:	7013      	strb	r3, [r2, #0]
}
 8003ef2:	bd10      	pop	{r4, pc}
 8003ef4:	20000280 	.word	0x20000280
 8003ef8:	2000020c 	.word	0x2000020c
 8003efc:	2000034c 	.word	0x2000034c

08003f00 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8003f00:	4a02      	ldr	r2, [pc, #8]	; (8003f0c <SysTick_Handler+0xc>)
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	4770      	bx	lr
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	200002ac 	.word	0x200002ac

08003f10 <PendSV_Handler>:
 8003f10:	4770      	bx	lr

08003f12 <NMI_Handler>:
}
 8003f12:	4770      	bx	lr

08003f14 <SVC_Handler>:
 8003f14:	4770      	bx	lr

08003f16 <HardFault_Handler>:
{
 8003f16:	e7fe      	b.n	8003f16 <HardFault_Handler>

08003f18 <RegInt_parsecmd.part.9>:
void RegInt_parsecmd(void){
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	4657      	mov	r7, sl
 8003f1c:	4645      	mov	r5, r8
 8003f1e:	46de      	mov	lr, fp
 8003f20:	464e      	mov	r6, r9
 8003f22:	b5e0      	push	{r5, r6, r7, lr}
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003f24:	4db7      	ldr	r5, [pc, #732]	; (8004204 <RegInt_parsecmd.part.9+0x2ec>)
void RegInt_parsecmd(void){
 8003f26:	b09f      	sub	sp, #124	; 0x7c
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003f28:	782b      	ldrb	r3, [r5, #0]
void RegInt_parsecmd(void){
 8003f2a:	af02      	add	r7, sp, #8
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003f2c:	2bf8      	cmp	r3, #248	; 0xf8
 8003f2e:	d052      	beq.n	8003fd6 <RegInt_parsecmd.part.9+0xbe>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 8003f30:	2bf9      	cmp	r3, #249	; 0xf9
 8003f32:	d019      	beq.n	8003f68 <RegInt_parsecmd.part.9+0x50>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 8003f34:	2bfa      	cmp	r3, #250	; 0xfa
 8003f36:	d000      	beq.n	8003f3a <RegInt_parsecmd.part.9+0x22>
 8003f38:	e0f0      	b.n	800411c <RegInt_parsecmd.part.9+0x204>
 8003f3a:	786a      	ldrb	r2, [r5, #1]
 8003f3c:	4cb2      	ldr	r4, [pc, #712]	; (8004208 <RegInt_parsecmd.part.9+0x2f0>)
 8003f3e:	0013      	movs	r3, r2
 8003f40:	3318      	adds	r3, #24
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d969      	bls.n	800401c <RegInt_parsecmd.part.9+0x104>
 8003f48:	4db0      	ldr	r5, [pc, #704]	; (800420c <RegInt_parsecmd.part.9+0x2f4>)
	uart_state = 0;
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	2200      	movs	r2, #0
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	0028      	movs	r0, r5
	uart_state = 0;
 8003f52:	54e2      	strb	r2, [r4, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003f54:	f006 fece 	bl	800acf4 <HAL_UART_Receive_IT.constprop.93>
}
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b01d      	add	sp, #116	; 0x74
 8003f5c:	bc3c      	pop	{r2, r3, r4, r5}
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	46a2      	mov	sl, r4
 8003f64:	46ab      	mov	fp, r5
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 8003f68:	4ca7      	ldr	r4, [pc, #668]	; (8004208 <RegInt_parsecmd.part.9+0x2f0>)
 8003f6a:	3bb8      	subs	r3, #184	; 0xb8
 8003f6c:	5ce3      	ldrb	r3, [r4, r3]
 8003f6e:	2b05      	cmp	r3, #5
 8003f70:	d1ea      	bne.n	8003f48 <RegInt_parsecmd.part.9+0x30>
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003f72:	1caa      	adds	r2, r5, #2
 8003f74:	7853      	ldrb	r3, [r2, #1]
		uint8_t reg = uart_rx_buff[1];
 8003f76:	7868      	ldrb	r0, [r5, #1]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003f78:	78ad      	ldrb	r5, [r5, #2]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	432b      	orrs	r3, r5
 8003f7e:	7895      	ldrb	r5, [r2, #2]
		uint8_t reg = uart_rx_buff[1];
 8003f80:	6378      	str	r0, [r7, #52]	; 0x34
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003f82:	042d      	lsls	r5, r5, #16
 8003f84:	432b      	orrs	r3, r5
 8003f86:	78d5      	ldrb	r5, [r2, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 8003f88:	2200      	movs	r2, #0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003f8a:	062d      	lsls	r5, r5, #24
 8003f8c:	431d      	orrs	r5, r3
	int8_t success = RegInt_setregf(reg, val, 0);
 8003f8e:	0029      	movs	r1, r5
 8003f90:	f7ff fd56 	bl	8003a40 <RegInt_setregf>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d000      	beq.n	8003f9a <RegInt_parsecmd.part.9+0x82>
 8003f98:	e0c3      	b.n	8004122 <RegInt_parsecmd.part.9+0x20a>
 8003f9a:	4e9d      	ldr	r6, [pc, #628]	; (8004210 <RegInt_parsecmd.part.9+0x2f8>)
		val = RegInt_getreg(reg);
 8003f9c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003f9e:	0028      	movs	r0, r5
 8003fa0:	f7fc fa40 	bl	8000424 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 8003fa4:	23cc      	movs	r3, #204	; 0xcc
 8003fa6:	7533      	strb	r3, [r6, #20]
		uart_tx_buff[1] = 0x05;
 8003fa8:	3bc7      	subs	r3, #199	; 0xc7
 8003faa:	7573      	strb	r3, [r6, #21]
		uart_tx_buff[2] = 0x00;
 8003fac:	2300      	movs	r3, #0
 8003fae:	75b3      	strb	r3, [r6, #22]
		uart_tx_buff[3] = 0xF5;
 8003fb0:	33f5      	adds	r3, #245	; 0xf5
 8003fb2:	75f3      	strb	r3, [r6, #23]
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8003fb4:	0a03      	lsrs	r3, r0, #8
		uart_tx_buff[5] = get_byte(val,0);
 8003fb6:	7670      	strb	r0, [r6, #25]
		uart_tx_buff[6] = get_byte(val,1);
 8003fb8:	76b3      	strb	r3, [r6, #26]
 8003fba:	0c03      	lsrs	r3, r0, #16
 8003fbc:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[8] = get_byte(val,3);
 8003fbe:	7730      	strb	r0, [r6, #28]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003fc0:	0030      	movs	r0, r6
		uart_tx_buff[7] = get_byte(val,2);
 8003fc2:	76f3      	strb	r3, [r6, #27]
		uart_tx_buff[9] = 0xCD;
 8003fc4:	23cd      	movs	r3, #205	; 0xcd
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003fc6:	3014      	adds	r0, #20
 8003fc8:	210a      	movs	r1, #10
		uart_tx_buff[4] = reg;
 8003fca:	7635      	strb	r5, [r6, #24]
		uart_tx_buff[9] = 0xCD;
 8003fcc:	7773      	strb	r3, [r6, #29]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003fce:	f006 fda3 	bl	800ab18 <HAL_UART_Transmit_IT.constprop.132>
 8003fd2:	4d8e      	ldr	r5, [pc, #568]	; (800420c <RegInt_parsecmd.part.9+0x2f4>)
 8003fd4:	e7b9      	b.n	8003f4a <RegInt_parsecmd.part.9+0x32>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003fd6:	4c8c      	ldr	r4, [pc, #560]	; (8004208 <RegInt_parsecmd.part.9+0x2f0>)
 8003fd8:	3bb7      	subs	r3, #183	; 0xb7
 8003fda:	5ce3      	ldrb	r3, [r4, r3]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d1b3      	bne.n	8003f48 <RegInt_parsecmd.part.9+0x30>
		uint8_t reg = uart_rx_buff[1];
 8003fe0:	786d      	ldrb	r5, [r5, #1]
		uint32_t val = RegInt_getreg(reg);
 8003fe2:	0028      	movs	r0, r5
 8003fe4:	f7fc fa1e 	bl	8000424 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 8003fe8:	22cc      	movs	r2, #204	; 0xcc
 8003fea:	4b89      	ldr	r3, [pc, #548]	; (8004210 <RegInt_parsecmd.part.9+0x2f8>)
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003fec:	210a      	movs	r1, #10
		uart_tx_buff[0] = 0xCC;
 8003fee:	751a      	strb	r2, [r3, #20]
		uart_tx_buff[1] = 0x05;
 8003ff0:	3ac7      	subs	r2, #199	; 0xc7
 8003ff2:	755a      	strb	r2, [r3, #21]
		uart_tx_buff[2] = 0x00;
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	759a      	strb	r2, [r3, #22]
		uart_tx_buff[3] = 0xF6;
 8003ff8:	32f6      	adds	r2, #246	; 0xf6
 8003ffa:	75da      	strb	r2, [r3, #23]
 8003ffc:	0a02      	lsrs	r2, r0, #8
		uart_tx_buff[6] = get_byte(val,1);
 8003ffe:	769a      	strb	r2, [r3, #26]
 8004000:	0c02      	lsrs	r2, r0, #16
		uart_tx_buff[7] = get_byte(val,2);
 8004002:	76da      	strb	r2, [r3, #27]
		uart_tx_buff[9] = 0xCD;
 8004004:	22cd      	movs	r2, #205	; 0xcd
		uart_tx_buff[5] = get_byte(val,0);
 8004006:	7658      	strb	r0, [r3, #25]
 8004008:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[4] = reg;
 800400a:	761d      	strb	r5, [r3, #24]
		uart_tx_buff[8] = get_byte(val,3);
 800400c:	7718      	strb	r0, [r3, #28]
		uart_tx_buff[9] = 0xCD;
 800400e:	775a      	strb	r2, [r3, #29]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8004010:	3314      	adds	r3, #20
 8004012:	0018      	movs	r0, r3
 8004014:	f006 fd80 	bl	800ab18 <HAL_UART_Transmit_IT.constprop.132>
 8004018:	4d7c      	ldr	r5, [pc, #496]	; (800420c <RegInt_parsecmd.part.9+0x2f4>)
 800401a:	e796      	b.n	8003f4a <RegInt_parsecmd.part.9+0x32>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800401c:	2341      	movs	r3, #65	; 0x41
 800401e:	5ce3      	ldrb	r3, [r4, r3]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d191      	bne.n	8003f48 <RegInt_parsecmd.part.9+0x30>
		uint16_t offst = (offst_h << 8) | offst_l;
 8004024:	78e8      	ldrb	r0, [r5, #3]
 8004026:	78ab      	ldrb	r3, [r5, #2]
 8004028:	0200      	lsls	r0, r0, #8
 800402a:	4303      	orrs	r3, r0
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	4978      	ldr	r1, [pc, #480]	; (8004214 <RegInt_parsecmd.part.9+0x2fc>)
 8004032:	4e77      	ldr	r6, [pc, #476]	; (8004210 <RegInt_parsecmd.part.9+0x2f8>)
 8004034:	5acb      	ldrh	r3, [r1, r3]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	66f3      	str	r3, [r6, #108]	; 0x6c
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 800403a:	4b77      	ldr	r3, [pc, #476]	; (8004218 <RegInt_parsecmd.part.9+0x300>)
 800403c:	8b9b      	ldrh	r3, [r3, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	6733      	str	r3, [r6, #112]	; 0x70
		if(uart_rx_buff[1] == 0xE8){
 8004042:	2ae8      	cmp	r2, #232	; 0xe8
 8004044:	d100      	bne.n	8004048 <RegInt_parsecmd.part.9+0x130>
 8004046:	e0a1      	b.n	800418c <RegInt_parsecmd.part.9+0x274>
 8004048:	4874      	ldr	r0, [pc, #464]	; (800421c <RegInt_parsecmd.part.9+0x304>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	4683      	mov	fp, r0
 800404e:	4874      	ldr	r0, [pc, #464]	; (8004220 <RegInt_parsecmd.part.9+0x308>)
 8004050:	2301      	movs	r3, #1
 8004052:	4681      	mov	r9, r0
 8004054:	4873      	ldr	r0, [pc, #460]	; (8004224 <RegInt_parsecmd.part.9+0x30c>)
 8004056:	2201      	movs	r2, #1
 8004058:	4682      	mov	sl, r0
 800405a:	4873      	ldr	r0, [pc, #460]	; (8004228 <RegInt_parsecmd.part.9+0x310>)
 800405c:	0049      	lsls	r1, r1, #1
 800405e:	4680      	mov	r8, r0
 8004060:	6339      	str	r1, [r7, #48]	; 0x30
 8004062:	000d      	movs	r5, r1
 8004064:	3917      	subs	r1, #23
		uart_tx_buff[0] = 0xCC;
 8004066:	20cc      	movs	r0, #204	; 0xcc
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8004068:	7573      	strb	r3, [r6, #21]
		uart_tx_buff[3] = 0xF7;
 800406a:	23f7      	movs	r3, #247	; 0xf7
		uart_tx_buff[0] = 0xCC;
 800406c:	7530      	strb	r0, [r6, #20]
		DBG_PRINTLN("buffer transmitt");
 800406e:	4650      	mov	r0, sl
		uart_tx_buff[3] = 0xF7;
 8004070:	75f3      	strb	r3, [r6, #23]
		uart_tx_buff[2] = get_byte(datalen+1,1);
 8004072:	75b2      	strb	r2, [r6, #22]
		uart_tx_buff[4] = uart_rx_buff[1];
 8004074:	7631      	strb	r1, [r6, #24]
		DBG_PRINTLN("buffer transmitt");
 8004076:	f011 f951 	bl	801531c <__wrap_printf>
 800407a:	486c      	ldr	r0, [pc, #432]	; (800422c <RegInt_parsecmd.part.9+0x314>)
 800407c:	f011 f94e 	bl	801531c <__wrap_printf>
 8004080:	4659      	mov	r1, fp
 8004082:	22d0      	movs	r2, #208	; 0xd0
 8004084:	4648      	mov	r0, r9
 8004086:	f011 f949 	bl	801531c <__wrap_printf>
		DBG_PRINTINT(datalen);
 800408a:	4650      	mov	r0, sl
 800408c:	f011 f946 	bl	801531c <__wrap_printf>
 8004090:	002a      	movs	r2, r5
 8004092:	4967      	ldr	r1, [pc, #412]	; (8004230 <RegInt_parsecmd.part.9+0x318>)
 8004094:	4640      	mov	r0, r8
 8004096:	f011 f941 	bl	801531c <__wrap_printf>
 800409a:	4659      	mov	r1, fp
 800409c:	22d1      	movs	r2, #209	; 0xd1
 800409e:	4648      	mov	r0, r9
 80040a0:	f011 f93c 	bl	801531c <__wrap_printf>
		DBG_PRINTINT(bufflen);
 80040a4:	4650      	mov	r0, sl
 80040a6:	f011 f939 	bl	801531c <__wrap_printf>
 80040aa:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
 80040ac:	4961      	ldr	r1, [pc, #388]	; (8004234 <RegInt_parsecmd.part.9+0x31c>)
 80040ae:	4640      	mov	r0, r8
 80040b0:	f011 f934 	bl	801531c <__wrap_printf>
 80040b4:	4659      	mov	r1, fp
 80040b6:	22d2      	movs	r2, #210	; 0xd2
 80040b8:	4648      	mov	r0, r9
 80040ba:	f011 f92f 	bl	801531c <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 80040be:	4650      	mov	r0, sl
 80040c0:	f011 f92c 	bl	801531c <__wrap_printf>
 80040c4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80040c6:	495c      	ldr	r1, [pc, #368]	; (8004238 <RegInt_parsecmd.part.9+0x320>)
 80040c8:	4640      	mov	r0, r8
 80040ca:	f011 f927 	bl	801531c <__wrap_printf>
 80040ce:	4659      	mov	r1, fp
 80040d0:	22d3      	movs	r2, #211	; 0xd3
 80040d2:	4648      	mov	r0, r9
 80040d4:	f011 f922 	bl	801531c <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 80040d8:	0031      	movs	r1, r6
 80040da:	4d4c      	ldr	r5, [pc, #304]	; (800420c <RegInt_parsecmd.part.9+0x2f4>)
 80040dc:	3114      	adds	r1, #20
 80040de:	2205      	movs	r2, #5
 80040e0:	230a      	movs	r3, #10
 80040e2:	0028      	movs	r0, r5
 80040e4:	f007 f950 	bl	800b388 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 80040e8:	2642      	movs	r6, #66	; 0x42
 80040ea:	2301      	movs	r3, #1
		DBG_PRINTINT(queue_cmd_end);
 80040ec:	4650      	mov	r0, sl
		queue_cmd_end = 1;
 80040ee:	55a3      	strb	r3, [r4, r6]
		DBG_PRINTINT(queue_cmd_end);
 80040f0:	f011 f914 	bl	801531c <__wrap_printf>
 80040f4:	5da2      	ldrb	r2, [r4, r6]
 80040f6:	4951      	ldr	r1, [pc, #324]	; (800423c <RegInt_parsecmd.part.9+0x324>)
 80040f8:	4640      	mov	r0, r8
 80040fa:	f011 f90f 	bl	801531c <__wrap_printf>
 80040fe:	4659      	mov	r1, fp
 8004100:	22d7      	movs	r2, #215	; 0xd7
 8004102:	4648      	mov	r0, r9
 8004104:	f011 f90a 	bl	801531c <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 8004108:	4b4d      	ldr	r3, [pc, #308]	; (8004240 <RegInt_parsecmd.part.9+0x328>)
 800410a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	469c      	mov	ip, r3
 8004114:	4460      	add	r0, ip
 8004116:	f006 fcff 	bl	800ab18 <HAL_UART_Transmit_IT.constprop.132>
 800411a:	e716      	b.n	8003f4a <RegInt_parsecmd.part.9+0x32>
 800411c:	4c3a      	ldr	r4, [pc, #232]	; (8004208 <RegInt_parsecmd.part.9+0x2f0>)
 800411e:	4d3b      	ldr	r5, [pc, #236]	; (800420c <RegInt_parsecmd.part.9+0x2f4>)
 8004120:	e713      	b.n	8003f4a <RegInt_parsecmd.part.9+0x32>
	if(reg == 0x03){
 8004122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004124:	2b03      	cmp	r3, #3
 8004126:	d01f      	beq.n	8004168 <RegInt_parsecmd.part.9+0x250>
	if(reg == 0x07){
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	2b07      	cmp	r3, #7
 800412c:	d017      	beq.n	800415e <RegInt_parsecmd.part.9+0x246>
    if(reg == 0x0A){
 800412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004130:	2b0a      	cmp	r3, #10
 8004132:	d000      	beq.n	8004136 <RegInt_parsecmd.part.9+0x21e>
 8004134:	e731      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
    if(mode == 0x00000000){return;}
 8004136:	2d00      	cmp	r5, #0
 8004138:	d100      	bne.n	800413c <RegInt_parsecmd.part.9+0x224>
 800413a:	e72e      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
    if(mode == 0x00000001){    
 800413c:	2d01      	cmp	r5, #1
 800413e:	d100      	bne.n	8004142 <RegInt_parsecmd.part.9+0x22a>
 8004140:	e08c      	b.n	800425c <RegInt_parsecmd.part.9+0x344>
 8004142:	4b40      	ldr	r3, [pc, #256]	; (8004244 <RegInt_parsecmd.part.9+0x32c>)
 8004144:	4d40      	ldr	r5, [pc, #256]	; (8004248 <RegInt_parsecmd.part.9+0x330>)
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
	REGADRERR = -1;
 8004148:	2301      	movs	r3, #1
 800414a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414c:	425b      	negs	r3, r3
 800414e:	6013      	str	r3, [r2, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004150:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004152:	3301      	adds	r3, #1
 8004154:	d100      	bne.n	8004158 <RegInt_parsecmd.part.9+0x240>
 8004156:	e720      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
		*regptr = val;
 8004158:	2300      	movs	r3, #0
 800415a:	62ab      	str	r3, [r5, #40]	; 0x28
 800415c:	e71d      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
		changeUART1baud(val);
 800415e:	0028      	movs	r0, r5
 8004160:	f7fd fb68 	bl	8001834 <changeUART1baud>
 8004164:	4e2a      	ldr	r6, [pc, #168]	; (8004210 <RegInt_parsecmd.part.9+0x2f8>)
 8004166:	e719      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
	if (val == 0x00){stopService();}
 8004168:	2d00      	cmp	r5, #0
 800416a:	d042      	beq.n	80041f2 <RegInt_parsecmd.part.9+0x2da>
	if (val == 0x01){createService();}
 800416c:	2d01      	cmp	r5, #1
 800416e:	d043      	beq.n	80041f8 <RegInt_parsecmd.part.9+0x2e0>
	if (val == 0x02){activateService();}
 8004170:	2d02      	cmp	r5, #2
 8004172:	d044      	beq.n	80041fe <RegInt_parsecmd.part.9+0x2e6>
	if (val == 0x03){
 8004174:	2d03      	cmp	r5, #3
 8004176:	d000      	beq.n	800417a <RegInt_parsecmd.part.9+0x262>
 8004178:	e0bf      	b.n	80042fa <RegInt_parsecmd.part.9+0x3e2>
		if(createService()){activateService();}
 800417a:	f7fe ff33 	bl	8002fe4 <createService>
 800417e:	2800      	cmp	r0, #0
 8004180:	d100      	bne.n	8004184 <RegInt_parsecmd.part.9+0x26c>
 8004182:	e70a      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
 8004184:	f7ff fbe2 	bl	800394c <activateService>
 8004188:	4e21      	ldr	r6, [pc, #132]	; (8004210 <RegInt_parsecmd.part.9+0x2f8>)
 800418a:	e707      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
        DBG_PRINTINT(bins);
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <RegInt_parsecmd.part.9+0x30c>)
 800418e:	0018      	movs	r0, r3
 8004190:	469a      	mov	sl, r3
 8004192:	f011 f8c3 	bl	801531c <__wrap_printf>
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <RegInt_parsecmd.part.9+0x334>)
 8004198:	492d      	ldr	r1, [pc, #180]	; (8004250 <RegInt_parsecmd.part.9+0x338>)
 800419a:	881a      	ldrh	r2, [r3, #0]
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <RegInt_parsecmd.part.9+0x310>)
 800419e:	0018      	movs	r0, r3
 80041a0:	4698      	mov	r8, r3
 80041a2:	f011 f8bb 	bl	801531c <__wrap_printf>
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <RegInt_parsecmd.part.9+0x304>)
 80041a8:	22c3      	movs	r2, #195	; 0xc3
 80041aa:	469b      	mov	fp, r3
 80041ac:	4b1c      	ldr	r3, [pc, #112]	; (8004220 <RegInt_parsecmd.part.9+0x308>)
 80041ae:	4659      	mov	r1, fp
 80041b0:	4699      	mov	r9, r3
 80041b2:	0018      	movs	r0, r3
 80041b4:	f011 f8b2 	bl	801531c <__wrap_printf>
        DBG_PRINTINT(sweeps);
 80041b8:	4650      	mov	r0, sl
 80041ba:	f011 f8af 	bl	801531c <__wrap_printf>
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RegInt_parsecmd.part.9+0x33c>)
 80041c0:	4925      	ldr	r1, [pc, #148]	; (8004258 <RegInt_parsecmd.part.9+0x340>)
 80041c2:	881a      	ldrh	r2, [r3, #0]
 80041c4:	4640      	mov	r0, r8
 80041c6:	f011 f8a9 	bl	801531c <__wrap_printf>
 80041ca:	22c4      	movs	r2, #196	; 0xc4
 80041cc:	4659      	mov	r1, fp
 80041ce:	4648      	mov	r0, r9
 80041d0:	f011 f8a4 	bl	801531c <__wrap_printf>
		datalen = sweeps*bins*sizeof(uint16_t);
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <RegInt_parsecmd.part.9+0x33c>)
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <RegInt_parsecmd.part.9+0x334>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	8812      	ldrh	r2, [r2, #0]
 80041dc:	7869      	ldrb	r1, [r5, #1]
 80041de:	435a      	muls	r2, r3
 80041e0:	0052      	lsls	r2, r2, #1
 80041e2:	1c53      	adds	r3, r2, #1
 80041e4:	0015      	movs	r5, r2
 80041e6:	b292      	uxth	r2, r2
 80041e8:	633a      	str	r2, [r7, #48]	; 0x30
 80041ea:	0a1a      	lsrs	r2, r3, #8
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	e739      	b.n	8004066 <RegInt_parsecmd.part.9+0x14e>
	if (val == 0x00){stopService();}
 80041f2:	f7fe fe35 	bl	8002e60 <stopService>
 80041f6:	e6d0      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
	if (val == 0x01){createService();}
 80041f8:	f7fe fef4 	bl	8002fe4 <createService>
 80041fc:	e6cd      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
	if (val == 0x02){activateService();}
 80041fe:	f7ff fba5 	bl	800394c <activateService>
 8004202:	e6ca      	b.n	8003f9a <RegInt_parsecmd.part.9+0x82>
 8004204:	20000368 	.word	0x20000368
 8004208:	2000018c 	.word	0x2000018c
 800420c:	200005ac 	.word	0x200005ac
 8004210:	2000020c 	.word	0x2000020c
 8004214:	2000010c 	.word	0x2000010c
 8004218:	2000008c 	.word	0x2000008c
 800421c:	0801c2f4 	.word	0x0801c2f4
 8004220:	0801c308 	.word	0x0801c308
 8004224:	0801c388 	.word	0x0801c388
 8004228:	0801c800 	.word	0x0801c800
 800422c:	0801cb64 	.word	0x0801cb64
 8004230:	0801cb78 	.word	0x0801cb78
 8004234:	0801cb80 	.word	0x0801cb80
 8004238:	0801cb88 	.word	0x0801cb88
 800423c:	0801cb94 	.word	0x0801cb94
 8004240:	200003ac 	.word	0x200003ac
 8004244:	200003b8 	.word	0x200003b8
 8004248:	200003bc 	.word	0x200003bc
 800424c:	200003a8 	.word	0x200003a8
 8004250:	0801cb54 	.word	0x0801cb54
 8004254:	200003b0 	.word	0x200003b0
 8004258:	0801cb5c 	.word	0x0801cb5c
        stopService();
 800425c:	f7fe fe00 	bl	8002e60 <stopService>
        INF_PRINTLN("STM32 Sleep");
 8004260:	4b89      	ldr	r3, [pc, #548]	; (8004488 <RegInt_parsecmd.part.9+0x570>)
 8004262:	0018      	movs	r0, r3
 8004264:	4698      	mov	r8, r3
 8004266:	f011 f859 	bl	801531c <__wrap_printf>
 800426a:	4888      	ldr	r0, [pc, #544]	; (800448c <RegInt_parsecmd.part.9+0x574>)
 800426c:	f011 f856 	bl	801531c <__wrap_printf>
 8004270:	2234      	movs	r2, #52	; 0x34
 8004272:	4b87      	ldr	r3, [pc, #540]	; (8004490 <RegInt_parsecmd.part.9+0x578>)
 8004274:	4e87      	ldr	r6, [pc, #540]	; (8004494 <RegInt_parsecmd.part.9+0x57c>)
 8004276:	0019      	movs	r1, r3
 8004278:	32ff      	adds	r2, #255	; 0xff
 800427a:	0030      	movs	r0, r6
 800427c:	4699      	mov	r9, r3
 800427e:	f011 f84d 	bl	801531c <__wrap_printf>
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004282:	2202      	movs	r2, #2
 8004284:	4b84      	ldr	r3, [pc, #528]	; (8004498 <RegInt_parsecmd.part.9+0x580>)
 8004286:	4693      	mov	fp, r2
 8004288:	469a      	mov	sl, r3
 800428a:	681b      	ldr	r3, [r3, #0]
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800428c:	4659      	mov	r1, fp
 800428e:	4393      	bics	r3, r2
 8004290:	4652      	mov	r2, sl
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004292:	2007      	movs	r0, #7
 8004294:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8004296:	4b81      	ldr	r3, [pc, #516]	; (800449c <RegInt_parsecmd.part.9+0x584>)
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	438a      	bics	r2, r1
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800429c:	4980      	ldr	r1, [pc, #512]	; (80044a0 <RegInt_parsecmd.part.9+0x588>)
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800429e:	611a      	str	r2, [r3, #16]
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80042a0:	680a      	ldr	r2, [r1, #0]
 80042a2:	4382      	bics	r2, r0
 80042a4:	4315      	orrs	r5, r2
 80042a6:	600d      	str	r5, [r1, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042a8:	2104      	movs	r1, #4
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	611a      	str	r2, [r3, #16]
    __SEV();
 80042b0:	bf40      	sev
    __WFE();
 80042b2:	bf20      	wfe
    __WFE();
 80042b4:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	438a      	bics	r2, r1
 80042ba:	611a      	str	r2, [r3, #16]
        SystemClock_Config();
 80042bc:	f7fd fb14 	bl	80018e8 <SystemClock_Config>
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80042c0:	4653      	mov	r3, sl
 80042c2:	465a      	mov	r2, fp
 80042c4:	681b      	ldr	r3, [r3, #0]
	return *regptr;
 80042c6:	4d77      	ldr	r5, [pc, #476]	; (80044a4 <RegInt_parsecmd.part.9+0x58c>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	4652      	mov	r2, sl
 80042cc:	6013      	str	r3, [r2, #0]
	REGADRERR = -1;
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <RegInt_parsecmd.part.9+0x590>)
        changeUART1baud(baudrate);
 80042d0:	69e8      	ldr	r0, [r5, #28]
	REGADRERR = -1;
 80042d2:	001a      	movs	r2, r3
 80042d4:	633b      	str	r3, [r7, #48]	; 0x30
 80042d6:	2301      	movs	r3, #1
 80042d8:	425b      	negs	r3, r3
 80042da:	6013      	str	r3, [r2, #0]
        changeUART1baud(baudrate);
 80042dc:	f7fd faaa 	bl	8001834 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 80042e0:	4640      	mov	r0, r8
 80042e2:	f011 f81b 	bl	801531c <__wrap_printf>
 80042e6:	4871      	ldr	r0, [pc, #452]	; (80044ac <RegInt_parsecmd.part.9+0x594>)
 80042e8:	f011 f818 	bl	801531c <__wrap_printf>
 80042ec:	229f      	movs	r2, #159	; 0x9f
 80042ee:	4649      	mov	r1, r9
 80042f0:	0052      	lsls	r2, r2, #1
 80042f2:	0030      	movs	r0, r6
 80042f4:	f011 f812 	bl	801531c <__wrap_printf>
 80042f8:	e726      	b.n	8004148 <RegInt_parsecmd.part.9+0x230>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 80042fa:	2d04      	cmp	r5, #4
 80042fc:	d10b      	bne.n	8004316 <RegInt_parsecmd.part.9+0x3fe>
	REGADRERR = -1;
 80042fe:	2201      	movs	r2, #1
 8004300:	4b69      	ldr	r3, [pc, #420]	; (80044a8 <RegInt_parsecmd.part.9+0x590>)
 8004302:	4252      	negs	r2, r2
 8004304:	601a      	str	r2, [r3, #0]
	flags &= andbits;
 8004306:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <RegInt_parsecmd.part.9+0x58c>)
	RegInt_setregf(reg, flags, 1);
 8004308:	3202      	adds	r2, #2
	flags &= andbits;
 800430a:	7e19      	ldrb	r1, [r3, #24]
	RegInt_setregf(reg, flags, 1);
 800430c:	2006      	movs	r0, #6
 800430e:	f7ff fb97 	bl	8003a40 <RegInt_setregf>
 8004312:	4e67      	ldr	r6, [pc, #412]	; (80044b0 <RegInt_parsecmd.part.9+0x598>)
 8004314:	e642      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
	if (val == 0x05){measure();}
 8004316:	2d05      	cmp	r5, #5
 8004318:	d000      	beq.n	800431c <RegInt_parsecmd.part.9+0x404>
 800431a:	e0e1      	b.n	80044e0 <RegInt_parsecmd.part.9+0x5c8>
	REGADRERR = -1;
 800431c:	2601      	movs	r6, #1
	return *regptr;
 800431e:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <RegInt_parsecmd.part.9+0x58c>)
	REGADRERR = -1;
 8004320:	4d61      	ldr	r5, [pc, #388]	; (80044a8 <RegInt_parsecmd.part.9+0x590>)
	return *regptr;
 8004322:	689b      	ldr	r3, [r3, #8]
	REGADRERR = -1;
 8004324:	4276      	negs	r6, r6
 8004326:	602e      	str	r6, [r5, #0]
    if(service_type == 0x02){envelopeMeasure();}
 8004328:	2b02      	cmp	r3, #2
 800432a:	d100      	bne.n	800432e <RegInt_parsecmd.part.9+0x416>
 800432c:	e2c6      	b.n	80048bc <RegInt_parsecmd.part.9+0x9a4>
 800432e:	4e60      	ldr	r6, [pc, #384]	; (80044b0 <RegInt_parsecmd.part.9+0x598>)
    else if(service_type == 0x04){sparseMeasure();}
 8004330:	2b04      	cmp	r3, #4
 8004332:	d000      	beq.n	8004336 <RegInt_parsecmd.part.9+0x41e>
 8004334:	e632      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
	INF_PRINTLN("Start Sparse measurement");
 8004336:	4854      	ldr	r0, [pc, #336]	; (8004488 <RegInt_parsecmd.part.9+0x570>)
 8004338:	f010 fff0 	bl	801531c <__wrap_printf>
 800433c:	485d      	ldr	r0, [pc, #372]	; (80044b4 <RegInt_parsecmd.part.9+0x59c>)
 800433e:	f010 ffed 	bl	801531c <__wrap_printf>
 8004342:	4b53      	ldr	r3, [pc, #332]	; (8004490 <RegInt_parsecmd.part.9+0x578>)
 8004344:	4a5c      	ldr	r2, [pc, #368]	; (80044b8 <RegInt_parsecmd.part.9+0x5a0>)
 8004346:	469b      	mov	fp, r3
 8004348:	4b52      	ldr	r3, [pc, #328]	; (8004494 <RegInt_parsecmd.part.9+0x57c>)
 800434a:	4659      	mov	r1, fp
 800434c:	0018      	movs	r0, r3
 800434e:	4699      	mov	r9, r3
 8004350:	f010 ffe4 	bl	801531c <__wrap_printf>
 8004354:	0032      	movs	r2, r6
 8004356:	0031      	movs	r1, r6
 8004358:	325c      	adds	r2, #92	; 0x5c
 800435a:	3160      	adds	r1, #96	; 0x60
 800435c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800435e:	f00d fc31 	bl	8011bc4 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 8004362:	4b56      	ldr	r3, [pc, #344]	; (80044bc <RegInt_parsecmd.part.9+0x5a4>)
 8004364:	4a56      	ldr	r2, [pc, #344]	; (80044c0 <RegInt_parsecmd.part.9+0x5a8>)
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	881d      	ldrh	r5, [r3, #0]
 800436a:	2340      	movs	r3, #64	; 0x40
 800436c:	0029      	movs	r1, r5
 800436e:	5ad0      	ldrh	r0, [r2, r3]
 8004370:	f00a fe3e 	bl	800eff0 <__udivsi3>
 8004374:	b283      	uxth	r3, r0
 8004376:	469a      	mov	sl, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8004378:	2d00      	cmp	r5, #0
 800437a:	d017      	beq.n	80043ac <RegInt_parsecmd.part.9+0x494>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
 8004380:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <RegInt_parsecmd.part.9+0x5ac>)
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8004382:	2500      	movs	r5, #0
 8004384:	4698      	mov	r8, r3
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8004386:	4642      	mov	r2, r8
 8004388:	4651      	mov	r1, sl
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	00ab      	lsls	r3, r5, #2
 800438e:	5898      	ldr	r0, [r3, r2]
 8004390:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8004392:	4369      	muls	r1, r5
 8004394:	469c      	mov	ip, r3
 8004396:	0049      	lsls	r1, r1, #1
 8004398:	4461      	add	r1, ip
 800439a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439c:	f011 fb8e 	bl	8015abc <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	3501      	adds	r5, #1
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b2ad      	uxth	r5, r5
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	d8ec      	bhi.n	8004386 <RegInt_parsecmd.part.9+0x46e>
	DBG_PRINTLN("Sparse measurement complete");
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <RegInt_parsecmd.part.9+0x5b0>)
 80043ae:	0018      	movs	r0, r3
 80043b0:	469a      	mov	sl, r3
 80043b2:	f010 ffb3 	bl	801531c <__wrap_printf>
 80043b6:	4845      	ldr	r0, [pc, #276]	; (80044cc <RegInt_parsecmd.part.9+0x5b4>)
 80043b8:	f010 ffb0 	bl	801531c <__wrap_printf>
 80043bc:	4a44      	ldr	r2, [pc, #272]	; (80044d0 <RegInt_parsecmd.part.9+0x5b8>)
 80043be:	4659      	mov	r1, fp
 80043c0:	4648      	mov	r0, r9
 80043c2:	f010 ffab 	bl	801531c <__wrap_printf>
	if(far_active){
 80043c6:	4b43      	ldr	r3, [pc, #268]	; (80044d4 <RegInt_parsecmd.part.9+0x5bc>)
 80043c8:	4698      	mov	r8, r3
 80043ca:	7c1b      	ldrb	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d100      	bne.n	80043d2 <RegInt_parsecmd.part.9+0x4ba>
 80043d0:	e5e4      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
		if(!acc_service_deactivate(sparse_handle)){
 80043d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043d4:	f7fe fcd2 	bl	8002d7c <acc_service_deactivate>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d100      	bne.n	80043de <RegInt_parsecmd.part.9+0x4c6>
 80043dc:	e3d1      	b.n	8004b82 <RegInt_parsecmd.part.9+0xc6a>
		if (!acc_service_activate(sparse_handle_far)){
 80043de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80043e0:	f7ff f9e2 	bl	80037a8 <acc_service_activate>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d100      	bne.n	80043ea <RegInt_parsecmd.part.9+0x4d2>
 80043e8:	e3bf      	b.n	8004b6a <RegInt_parsecmd.part.9+0xc52>
 80043ea:	0032      	movs	r2, r6
 80043ec:	0031      	movs	r1, r6
 80043ee:	3264      	adds	r2, #100	; 0x64
 80043f0:	3168      	adds	r1, #104	; 0x68
 80043f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80043f4:	f00d fbe6 	bl	8011bc4 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	881d      	ldrh	r5, [r3, #0]
		bins_far = sparse_metadata_far.data_length/sweeps;
 80043fc:	4643      	mov	r3, r8
 80043fe:	0029      	movs	r1, r5
 8004400:	8b98      	ldrh	r0, [r3, #28]
 8004402:	f00a fdf5 	bl	800eff0 <__udivsi3>
 8004406:	b283      	uxth	r3, r0
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 800440a:	2340      	movs	r3, #64	; 0x40
 800440c:	4a2c      	ldr	r2, [pc, #176]	; (80044c0 <RegInt_parsecmd.part.9+0x5a8>)
 800440e:	0029      	movs	r1, r5
 8004410:	5ad0      	ldrh	r0, [r2, r3]
 8004412:	f00a fded 	bl	800eff0 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	b280      	uxth	r0, r0
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <RegInt_parsecmd.part.9+0x5ac>)
 8004420:	0042      	lsls	r2, r0, #1
 8004422:	62fa      	str	r2, [r7, #44]	; 0x2c
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8004424:	2500      	movs	r5, #0
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8004426:	4698      	mov	r8, r3
 8004428:	e011      	b.n	800444e <RegInt_parsecmd.part.9+0x536>
 800442a:	4642      	mov	r2, r8
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	00ab      	lsls	r3, r5, #2
 8004430:	5898      	ldr	r0, [r3, r2]
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004436:	469c      	mov	ip, r3
 8004438:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800443a:	4460      	add	r0, ip
 800443c:	469c      	mov	ip, r3
 800443e:	4369      	muls	r1, r5
 8004440:	0049      	lsls	r1, r1, #1
 8004442:	4461      	add	r1, ip
 8004444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004446:	f011 fb39 	bl	8015abc <memcpy>
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800444a:	3501      	adds	r5, #1
 800444c:	b2ad      	uxth	r5, r5
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	42ab      	cmp	r3, r5
 8004454:	d8e9      	bhi.n	800442a <RegInt_parsecmd.part.9+0x512>
		if(!acc_service_deactivate(sparse_handle_far)){
 8004456:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004458:	f7fe fc90 	bl	8002d7c <acc_service_deactivate>
 800445c:	2800      	cmp	r0, #0
 800445e:	d100      	bne.n	8004462 <RegInt_parsecmd.part.9+0x54a>
 8004460:	e3a7      	b.n	8004bb2 <RegInt_parsecmd.part.9+0xc9a>
		if (!acc_service_activate(sparse_handle)){
 8004462:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004464:	f7ff f9a0 	bl	80037a8 <acc_service_activate>
 8004468:	2800      	cmp	r0, #0
 800446a:	d100      	bne.n	800446e <RegInt_parsecmd.part.9+0x556>
 800446c:	e395      	b.n	8004b9a <RegInt_parsecmd.part.9+0xc82>
		DBG_PRINTLN("Sparse Far measurement end");
 800446e:	4650      	mov	r0, sl
 8004470:	f010 ff54 	bl	801531c <__wrap_printf>
 8004474:	4818      	ldr	r0, [pc, #96]	; (80044d8 <RegInt_parsecmd.part.9+0x5c0>)
 8004476:	f010 ff51 	bl	801531c <__wrap_printf>
 800447a:	4a18      	ldr	r2, [pc, #96]	; (80044dc <RegInt_parsecmd.part.9+0x5c4>)
 800447c:	4659      	mov	r1, fp
 800447e:	4648      	mov	r0, r9
 8004480:	f010 ff4c 	bl	801531c <__wrap_printf>
 8004484:	e58a      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	0801c2d0 	.word	0x0801c2d0
 800448c:	0801cb3c 	.word	0x0801cb3c
 8004490:	0801c2f4 	.word	0x0801c2f4
 8004494:	0801c308 	.word	0x0801c308
 8004498:	e000e010 	.word	0xe000e010
 800449c:	e000ed00 	.word	0xe000ed00
 80044a0:	40007000 	.word	0x40007000
 80044a4:	200003bc 	.word	0x200003bc
 80044a8:	200003b8 	.word	0x200003b8
 80044ac:	0801cb48 	.word	0x0801cb48
 80044b0:	2000020c 	.word	0x2000020c
 80044b4:	0801c934 	.word	0x0801c934
 80044b8:	000002f5 	.word	0x000002f5
 80044bc:	200003b0 	.word	0x200003b0
 80044c0:	2000010c 	.word	0x2000010c
 80044c4:	200003ac 	.word	0x200003ac
 80044c8:	0801c388 	.word	0x0801c388
 80044cc:	0801c950 	.word	0x0801c950
 80044d0:	000002f9 	.word	0x000002f9
 80044d4:	2000008c 	.word	0x2000008c
 80044d8:	0801ca24 	.word	0x0801ca24
 80044dc:	00000311 	.word	0x00000311
	if (val == 0x06){evalData();}
 80044e0:	2d06      	cmp	r5, #6
 80044e2:	d000      	beq.n	80044e6 <RegInt_parsecmd.part.9+0x5ce>
 80044e4:	e171      	b.n	80047ca <RegInt_parsecmd.part.9+0x8b2>
	REGADRERR = -1;
 80044e6:	4bd5      	ldr	r3, [pc, #852]	; (800483c <RegInt_parsecmd.part.9+0x924>)
 80044e8:	001a      	movs	r2, r3
 80044ea:	633b      	str	r3, [r7, #48]	; 0x30
 80044ec:	2301      	movs	r3, #1
 80044ee:	425b      	negs	r3, r3
 80044f0:	6013      	str	r3, [r2, #0]
	return *regptr;
 80044f2:	4bd3      	ldr	r3, [pc, #844]	; (8004840 <RegInt_parsecmd.part.9+0x928>)
 80044f4:	689b      	ldr	r3, [r3, #8]
}


void evalData(void){
	uint32_t service_type = RegInt_getreg(0x02);
    if(service_type == 0x02){evalEnvelopeData();}
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d100      	bne.n	80044fc <RegInt_parsecmd.part.9+0x5e4>
 80044fa:	e246      	b.n	800498a <RegInt_parsecmd.part.9+0xa72>
 80044fc:	4ed1      	ldr	r6, [pc, #836]	; (8004844 <RegInt_parsecmd.part.9+0x92c>)
    else if(service_type == 0x04){evalSparseData();}
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d000      	beq.n	8004504 <RegInt_parsecmd.part.9+0x5ec>
 8004502:	e54b      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
7.  detrend
*/
void evalSparseData(void){
    // #warning implentation removed for debuging
    // return;
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8004504:	4bd0      	ldr	r3, [pc, #832]	; (8004848 <RegInt_parsecmd.part.9+0x930>)
	return *regptr;
 8004506:	4dd1      	ldr	r5, [pc, #836]	; (800484c <RegInt_parsecmd.part.9+0x934>)
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8004508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
	return *regptr;
 800450a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 800450c:	61fa      	str	r2, [r7, #28]
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800450e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	float sweep_rate = sparse_metadata.sweep_rate;
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8004512:	61ba      	str	r2, [r7, #24]
	uint8v2_t data_size = {sweeps,bins};
 8004514:	2244      	movs	r2, #68	; 0x44
	float sweep_rate = sparse_metadata.sweep_rate;
 8004516:	617b      	str	r3, [r7, #20]
	uint8v2_t data_size = {sweeps,bins};
 8004518:	4bcd      	ldr	r3, [pc, #820]	; (8004850 <RegInt_parsecmd.part.9+0x938>)
 800451a:	18ba      	adds	r2, r7, r2
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	7013      	strb	r3, [r2, #0]
 8004522:	2245      	movs	r2, #69	; 0x45
 8004524:	4bcb      	ldr	r3, [pc, #812]	; (8004854 <RegInt_parsecmd.part.9+0x93c>)
 8004526:	18ba      	adds	r2, r7, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	7013      	strb	r3, [r2, #0]
	return *regptr;
 800452c:	692b      	ldr	r3, [r5, #16]
 800452e:	69ea      	ldr	r2, [r5, #28]
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	6a2b      	ldr	r3, [r5, #32]
 8004534:	60ba      	str	r2, [r7, #8]
	float velocity;
	float distance;
	float amplitude;
	float meansqdist;

	DBG_PRINTINT(mode);
 8004536:	4ac8      	ldr	r2, [pc, #800]	; (8004858 <RegInt_parsecmd.part.9+0x940>)
	return *regptr;
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	69ab      	ldr	r3, [r5, #24]
	DBG_PRINTINT(mode);
 800453c:	0010      	movs	r0, r2
	return *regptr;
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
	DBG_PRINTINT(mode);
 8004540:	4692      	mov	sl, r2
 8004542:	f010 feeb 	bl	801531c <__wrap_printf>
 8004546:	4ac5      	ldr	r2, [pc, #788]	; (800485c <RegInt_parsecmd.part.9+0x944>)
 8004548:	49c5      	ldr	r1, [pc, #788]	; (8004860 <RegInt_parsecmd.part.9+0x948>)
 800454a:	4690      	mov	r8, r2
 800454c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454e:	4640      	mov	r0, r8
 8004550:	f010 fee4 	bl	801531c <__wrap_printf>
 8004554:	4ac3      	ldr	r2, [pc, #780]	; (8004864 <RegInt_parsecmd.part.9+0x94c>)
 8004556:	4693      	mov	fp, r2
 8004558:	4ac3      	ldr	r2, [pc, #780]	; (8004868 <RegInt_parsecmd.part.9+0x950>)
 800455a:	4659      	mov	r1, fp
 800455c:	4691      	mov	r9, r2
 800455e:	4ac3      	ldr	r2, [pc, #780]	; (800486c <RegInt_parsecmd.part.9+0x954>)
 8004560:	4648      	mov	r0, r9
 8004562:	f010 fedb 	bl	801531c <__wrap_printf>

	//dc removal
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	07db      	lsls	r3, r3, #31
 800456a:	d504      	bpl.n	8004576 <RegInt_parsecmd.part.9+0x65e>
 800456c:	4bc0      	ldr	r3, [pc, #768]	; (8004870 <RegInt_parsecmd.part.9+0x958>)
 800456e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f00d faf8 	bl	8011b66 <dcdatarm>
	if(mode & 0x00000040){detrend(data, data_size);}
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	065b      	lsls	r3, r3, #25
 800457a:	d504      	bpl.n	8004586 <RegInt_parsecmd.part.9+0x66e>
 800457c:	4bbc      	ldr	r3, [pc, #752]	; (8004870 <RegInt_parsecmd.part.9+0x958>)
 800457e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f00d fa66 	bl	8011a52 <detrend>
	
	//do fft on each row of data
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	079b      	lsls	r3, r3, #30
 800458a:	d500      	bpl.n	800458e <RegInt_parsecmd.part.9+0x676>
 800458c:	e2d6      	b.n	8004b3c <RegInt_parsecmd.part.9+0xc24>
	float min_scale = 1.0f;
 800458e:	23fe      	movs	r3, #254	; 0xfe
 8004590:	059b      	lsls	r3, r3, #22
 8004592:	623b      	str	r3, [r7, #32]
	
	//bandstop filter
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	d505      	bpl.n	80045a6 <RegInt_parsecmd.part.9+0x68e>
 800459a:	4bb5      	ldr	r3, [pc, #724]	; (8004870 <RegInt_parsecmd.part.9+0x958>)
 800459c:	0032      	movs	r2, r6
 800459e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f00d fa26 	bl	80119f2 <dobandstop>
	
	//do convolution
	if(mode & 0x00000004){
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	075b      	lsls	r3, r3, #29
 80045aa:	d50f      	bpl.n	80045cc <RegInt_parsecmd.part.9+0x6b4>
	REGADRERR = -1;
 80045ac:	2301      	movs	r3, #1
 80045ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b0:	425b      	negs	r3, r3
 80045b2:	6013      	str	r3, [r2, #0]
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80045b4:	6968      	ldr	r0, [r5, #20]
 80045b6:	f00b f967 	bl	800f888 <__aeabi_ui2f>
 80045ba:	49ae      	ldr	r1, [pc, #696]	; (8004874 <RegInt_parsecmd.part.9+0x95c>)
 80045bc:	f00a f8d4 	bl	800e768 <__aeabi_fdiv>
		doconv(data, data_size, st_dev);
 80045c0:	4bab      	ldr	r3, [pc, #684]	; (8004870 <RegInt_parsecmd.part.9+0x958>)
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80045c2:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 80045c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	f00d fb10 	bl	8011bec <doconv>
	}
	//calulate velocity parameters
	if(mode & 0x00000008){
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	4e9d      	ldr	r6, [pc, #628]	; (8004844 <RegInt_parsecmd.part.9+0x92c>)
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	d400      	bmi.n	80045d6 <RegInt_parsecmd.part.9+0x6be>
 80045d4:	e4e2      	b.n	8003f9c <RegInt_parsecmd.part.9+0x84>
			//get maximum index and maximum
		uint8v2_t max_index = max2d(data, data_size);
 80045d6:	4ea6      	ldr	r6, [pc, #664]	; (8004870 <RegInt_parsecmd.part.9+0x958>)
 80045d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045da:	6830      	ldr	r0, [r6, #0]
 80045dc:	f00d f9d3 	bl	8011986 <max2d>
 80045e0:	224c      	movs	r2, #76	; 0x4c
 80045e2:	18ba      	adds	r2, r7, r2
 80045e4:	0403      	lsls	r3, r0, #16
 80045e6:	8010      	strh	r0, [r2, #0]
 80045e8:	b2c2      	uxtb	r2, r0
		uint16_t apex = data[max_index.x1][max_index.x2];
 80045ea:	6830      	ldr	r0, [r6, #0]
		uint8v2_t max_index = max2d(data, data_size);
 80045ec:	0e19      	lsrs	r1, r3, #24
		uint16_t apex = data[max_index.x1][max_index.x2];
 80045ee:	0093      	lsls	r3, r2, #2
 80045f0:	581b      	ldr	r3, [r3, r0]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	004a      	lsls	r2, r1, #1
 80045f6:	5ad3      	ldrh	r3, [r2, r3]
		
		DBG_PRINTINT(apex);
 80045f8:	4650      	mov	r0, sl
		uint16_t apex = data[max_index.x1][max_index.x2];
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	6039      	str	r1, [r7, #0]
		DBG_PRINTINT(apex);
 80045fe:	f010 fe8d 	bl	801531c <__wrap_printf>
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	499c      	ldr	r1, [pc, #624]	; (8004878 <RegInt_parsecmd.part.9+0x960>)
 8004606:	4640      	mov	r0, r8
 8004608:	f010 fe88 	bl	801531c <__wrap_printf>
 800460c:	4a9b      	ldr	r2, [pc, #620]	; (800487c <RegInt_parsecmd.part.9+0x964>)
 800460e:	4659      	mov	r1, fp
 8004610:	4648      	mov	r0, r9
 8004612:	f010 fe83 	bl	801531c <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 8004616:	4650      	mov	r0, sl
 8004618:	f010 fe80 	bl	801531c <__wrap_printf>
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4998      	ldr	r1, [pc, #608]	; (8004880 <RegInt_parsecmd.part.9+0x968>)
 8004620:	4640      	mov	r0, r8
 8004622:	f010 fe7b 	bl	801531c <__wrap_printf>
 8004626:	4a97      	ldr	r2, [pc, #604]	; (8004884 <RegInt_parsecmd.part.9+0x96c>)
 8004628:	4659      	mov	r1, fp
 800462a:	4648      	mov	r0, r9
 800462c:	f010 fe76 	bl	801531c <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 8004630:	4650      	mov	r0, sl
 8004632:	f010 fe73 	bl	801531c <__wrap_printf>
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4993      	ldr	r1, [pc, #588]	; (8004888 <RegInt_parsecmd.part.9+0x970>)
 800463a:	4640      	mov	r0, r8
 800463c:	f010 fe6e 	bl	801531c <__wrap_printf>
 8004640:	22de      	movs	r2, #222	; 0xde
 8004642:	4659      	mov	r1, fp
 8004644:	0092      	lsls	r2, r2, #2
 8004646:	4648      	mov	r0, r9
 8004648:	f010 fe68 	bl	801531c <__wrap_printf>
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800464c:	6938      	ldr	r0, [r7, #16]
 800464e:	f00b f91b 	bl	800f888 <__aeabi_ui2f>
 8004652:	4988      	ldr	r1, [pc, #544]	; (8004874 <RegInt_parsecmd.part.9+0x95c>)
 8004654:	f00a f888 	bl	800e768 <__aeabi_fdiv>
		
		//get mean square distnace from maximum
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8004658:	6836      	ldr	r6, [r6, #0]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800465a:	1c03      	adds	r3, r0, #0
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800465c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800465e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004660:	0030      	movs	r0, r6
 8004662:	f00d f91f 	bl	80118a4 <get_msd>
				
		//null data less than threshold
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8004668:	4680      	mov	r8, r0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 800466a:	06db      	lsls	r3, r3, #27
 800466c:	d500      	bpl.n	8004670 <RegInt_parsecmd.part.9+0x758>
 800466e:	e26f      	b.n	8004b50 <RegInt_parsecmd.part.9+0xc38>
		
		//the center of mass of the image need to be computed
		floatv2_t com = center_of_mass(max_index, roi_radius);
 8004670:	2038      	movs	r0, #56	; 0x38
 8004672:	231c      	movs	r3, #28
 8004674:	1838      	adds	r0, r7, r0
 8004676:	7a3a      	ldrb	r2, [r7, #8]
 8004678:	18c0      	adds	r0, r0, r3
 800467a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800467c:	f00d f856 	bl	801172c <center_of_mass>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8004680:	497c      	ldr	r1, [pc, #496]	; (8004874 <RegInt_parsecmd.part.9+0x95c>)
 8004682:	69f8      	ldr	r0, [r7, #28]
 8004684:	f00a f982 	bl	800e98c <__aeabi_fmul>
 8004688:	f00a fec0 	bl	800f40c <__aeabi_f2uiz>
		
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800468c:	b280      	uxth	r0, r0
 800468e:	f00b f8b1 	bl	800f7f4 <__aeabi_i2f>
 8004692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004694:	f00a f97a 	bl	800e98c <__aeabi_fmul>
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8004698:	4976      	ldr	r1, [pc, #472]	; (8004874 <RegInt_parsecmd.part.9+0x95c>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800469a:	1c06      	adds	r6, r0, #0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800469c:	69b8      	ldr	r0, [r7, #24]
 800469e:	f00a f975 	bl	800e98c <__aeabi_fmul>
 80046a2:	f00a feb3 	bl	800f40c <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80046a6:	b280      	uxth	r0, r0
 80046a8:	f00b f8a4 	bl	800f7f4 <__aeabi_i2f>
 80046ac:	1c01      	adds	r1, r0, #0
 80046ae:	1c30      	adds	r0, r6, #0
 80046b0:	f009 fec0 	bl	800e434 <__aeabi_fadd>
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80046b6:	1c06      	adds	r6, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80046b8:	8818      	ldrh	r0, [r3, #0]
 80046ba:	f00b f89b 	bl	800f7f4 <__aeabi_i2f>
 80046be:	1c01      	adds	r1, r0, #0
 80046c0:	6978      	ldr	r0, [r7, #20]
 80046c2:	f00a f851 	bl	800e768 <__aeabi_fdiv>
 80046c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80046c8:	f00a f960 	bl	800e98c <__aeabi_fmul>
 80046cc:	496f      	ldr	r1, [pc, #444]	; (800488c <RegInt_parsecmd.part.9+0x974>)
 80046ce:	f00a f95d 	bl	800e98c <__aeabi_fmul>
		
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80046d2:	6a3b      	ldr	r3, [r7, #32]
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80046d4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80046d6:	2100      	movs	r1, #0
 80046d8:	1c18      	adds	r0, r3, #0
 80046da:	469a      	mov	sl, r3
 80046dc:	f00a fe48 	bl	800f370 <__aeabi_fcmpeq>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d000      	beq.n	80046e6 <RegInt_parsecmd.part.9+0x7ce>
 80046e4:	e231      	b.n	8004b4a <RegInt_parsecmd.part.9+0xc32>
 80046e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046e8:	f00b f884 	bl	800f7f4 <__aeabi_i2f>
 80046ec:	4651      	mov	r1, sl
 80046ee:	f00a f83b 	bl	800e768 <__aeabi_fdiv>
 80046f2:	4682      	mov	sl, r0
		else{amplitude = 0;}
		
		//store results
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 80046f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046f6:	f00a fe89 	bl	800f40c <__aeabi_f2uiz>
	REGADRERR = -1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fe:	425b      	negs	r3, r3
 8004700:	6013      	str	r3, [r2, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004702:	682b      	ldr	r3, [r5, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	d000      	beq.n	800470a <RegInt_parsecmd.part.9+0x7f2>
		*regptr = val;
 8004708:	6028      	str	r0, [r5, #0]
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 800470a:	1c30      	adds	r0, r6, #0
 800470c:	f00a fe7e 	bl	800f40c <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 8004710:	686b      	ldr	r3, [r5, #4]
 8004712:	3301      	adds	r3, #1
 8004714:	d000      	beq.n	8004718 <RegInt_parsecmd.part.9+0x800>
		*regptr = val;
 8004716:	6068      	str	r0, [r5, #4]
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 8004718:	4650      	mov	r0, sl
 800471a:	f00a fe77 	bl	800f40c <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 800471e:	68ab      	ldr	r3, [r5, #8]
 8004720:	3301      	adds	r3, #1
 8004722:	d000      	beq.n	8004726 <RegInt_parsecmd.part.9+0x80e>
		*regptr = val;
 8004724:	60a8      	str	r0, [r5, #8]
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 8004726:	4640      	mov	r0, r8
 8004728:	f00a fe70 	bl	800f40c <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 800472c:	68eb      	ldr	r3, [r5, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	d000      	beq.n	8004734 <RegInt_parsecmd.part.9+0x81c>
		*regptr = val;
 8004732:	60e8      	str	r0, [r5, #12]
	}
	
}

void print_sparse_results(void){
		INF_PRINTLN("RESULTS");
 8004734:	4b56      	ldr	r3, [pc, #344]	; (8004890 <RegInt_parsecmd.part.9+0x978>)
	REGADRERR = -1;
 8004736:	2601      	movs	r6, #1
		INF_PRINTLN("RESULTS");
 8004738:	4698      	mov	r8, r3
 800473a:	0018      	movs	r0, r3
 800473c:	f010 fdee 	bl	801531c <__wrap_printf>
 8004740:	4854      	ldr	r0, [pc, #336]	; (8004894 <RegInt_parsecmd.part.9+0x97c>)
 8004742:	f010 fdeb 	bl	801531c <__wrap_printf>
 8004746:	4a54      	ldr	r2, [pc, #336]	; (8004898 <RegInt_parsecmd.part.9+0x980>)
 8004748:	4659      	mov	r1, fp
 800474a:	4648      	mov	r0, r9
 800474c:	f010 fde6 	bl	801531c <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8004750:	4640      	mov	r0, r8
 8004752:	f010 fde3 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	4276      	negs	r6, r6
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 800475a:	6829      	ldr	r1, [r5, #0]
 800475c:	484f      	ldr	r0, [pc, #316]	; (800489c <RegInt_parsecmd.part.9+0x984>)
	REGADRERR = -1;
 800475e:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8004760:	f010 fddc 	bl	801531c <__wrap_printf>
 8004764:	22f8      	movs	r2, #248	; 0xf8
 8004766:	4659      	mov	r1, fp
 8004768:	0092      	lsls	r2, r2, #2
 800476a:	4648      	mov	r0, r9
 800476c:	f010 fdd6 	bl	801531c <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8004770:	4640      	mov	r0, r8
 8004772:	f010 fdd3 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8004778:	6869      	ldr	r1, [r5, #4]
 800477a:	4849      	ldr	r0, [pc, #292]	; (80048a0 <RegInt_parsecmd.part.9+0x988>)
	REGADRERR = -1;
 800477c:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 800477e:	f010 fdcd 	bl	801531c <__wrap_printf>
 8004782:	4a48      	ldr	r2, [pc, #288]	; (80048a4 <RegInt_parsecmd.part.9+0x98c>)
 8004784:	4659      	mov	r1, fp
 8004786:	4648      	mov	r0, r9
 8004788:	f010 fdc8 	bl	801531c <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 800478c:	4640      	mov	r0, r8
 800478e:	f010 fdc5 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 8004794:	68a9      	ldr	r1, [r5, #8]
 8004796:	4844      	ldr	r0, [pc, #272]	; (80048a8 <RegInt_parsecmd.part.9+0x990>)
	REGADRERR = -1;
 8004798:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 800479a:	f010 fdbf 	bl	801531c <__wrap_printf>
 800479e:	4a43      	ldr	r2, [pc, #268]	; (80048ac <RegInt_parsecmd.part.9+0x994>)
 80047a0:	4659      	mov	r1, fp
 80047a2:	4648      	mov	r0, r9
 80047a4:	f010 fdba 	bl	801531c <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80047a8:	4640      	mov	r0, r8
 80047aa:	f010 fdb7 	bl	801531c <__wrap_printf>
	REGADRERR = -1;
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80047b0:	68e9      	ldr	r1, [r5, #12]
 80047b2:	483f      	ldr	r0, [pc, #252]	; (80048b0 <RegInt_parsecmd.part.9+0x998>)
	REGADRERR = -1;
 80047b4:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80047b6:	f010 fdb1 	bl	801531c <__wrap_printf>
 80047ba:	4a3e      	ldr	r2, [pc, #248]	; (80048b4 <RegInt_parsecmd.part.9+0x99c>)
 80047bc:	4659      	mov	r1, fp
 80047be:	4648      	mov	r0, r9
 80047c0:	f010 fdac 	bl	801531c <__wrap_printf>
 80047c4:	4e1f      	ldr	r6, [pc, #124]	; (8004844 <RegInt_parsecmd.part.9+0x92c>)
 80047c6:	f7ff fbe9 	bl	8003f9c <RegInt_parsecmd.part.9+0x84>
	if (val == 0x07){dsp_burst();}
 80047ca:	2d07      	cmp	r5, #7
 80047cc:	d001      	beq.n	80047d2 <RegInt_parsecmd.part.9+0x8ba>
 80047ce:	f7ff fbe4 	bl	8003f9a <RegInt_parsecmd.part.9+0x82>
	REGADRERR = -1;
 80047d2:	2601      	movs	r6, #1
 80047d4:	4b19      	ldr	r3, [pc, #100]	; (800483c <RegInt_parsecmd.part.9+0x924>)
 80047d6:	4276      	negs	r6, r6
 80047d8:	601e      	str	r6, [r3, #0]
		uint8_t cmd = (dsp_cmds >> 4*i) & 0x0F;
 80047da:	230f      	movs	r3, #15
 80047dc:	4699      	mov	r9, r3
		switch (cmd){
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <RegInt_parsecmd.part.9+0x9a0>)
	REGADRERR = -1;
 80047e0:	2504      	movs	r5, #4
		switch (cmd){
 80047e2:	4698      	mov	r8, r3
 80047e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e6:	469a      	mov	sl, r3
		uint8_t cmd = (dsp_cmds >> 4*i) & 0x0F;
 80047e8:	0033      	movs	r3, r6
		switch (cmd){
 80047ea:	464a      	mov	r2, r9
		uint8_t cmd = (dsp_cmds >> 4*i) & 0x0F;
 80047ec:	40eb      	lsrs	r3, r5
		switch (cmd){
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d805      	bhi.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
 80047f4:	4642      	mov	r2, r8
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	58d3      	ldr	r3, [r2, r3]
 80047fa:	469f      	mov	pc, r3
			sqrt_accumulant();
 80047fc:	f7fc fb22 	bl	8000e44 <sqrt_accumulant>
 8004800:	3504      	adds	r5, #4
	for(uint8_t i = 0; i < 8; i++){
 8004802:	2d20      	cmp	r5, #32
 8004804:	d1f0      	bne.n	80047e8 <RegInt_parsecmd.part.9+0x8d0>
 8004806:	4653      	mov	r3, sl
 8004808:	4e0e      	ldr	r6, [pc, #56]	; (8004844 <RegInt_parsecmd.part.9+0x92c>)
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	f7ff fbc6 	bl	8003f9c <RegInt_parsecmd.part.9+0x84>
			sq_acc_accumulant();
 8004810:	f7fb fd36 	bl	8000280 <sq_acc_accumulant>
 8004814:	e7f4      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			acc_accumulant();
 8004816:	f7fb fd79 	bl	800030c <acc_accumulant>
 800481a:	e7f1      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			mult_accumulant(dsp_val);
 800481c:	f006 fb26 	bl	800ae6c <mult_accumulant.constprop.89>
 8004820:	e7ee      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			set_accumulant(dsp_val);
 8004822:	f006 fb7f 	bl	800af24 <set_accumulant.constprop.87>
 8004826:	e7eb      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			add_accumulant(dsp_val);
 8004828:	f006 fb4e 	bl	800aec8 <add_accumulant.constprop.88>
 800482c:	e7e8      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			load_accumulant();
 800482e:	f7fb fdb1 	bl	8000394 <load_accumulant>
 8004832:	e7e5      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
			add_data(dsp_val);
 8004834:	f006 faf0 	bl	800ae18 <add_data.constprop.90>
 8004838:	e7e2      	b.n	8004800 <RegInt_parsecmd.part.9+0x8e8>
 800483a:	46c0      	nop			; (mov r8, r8)
 800483c:	200003b8 	.word	0x200003b8
 8004840:	200003bc 	.word	0x200003bc
 8004844:	2000020c 	.word	0x2000020c
 8004848:	2000010c 	.word	0x2000010c
 800484c:	200004c8 	.word	0x200004c8
 8004850:	200003b0 	.word	0x200003b0
 8004854:	200003a8 	.word	0x200003a8
 8004858:	0801c388 	.word	0x0801c388
 800485c:	0801c800 	.word	0x0801c800
 8004860:	0801cab0 	.word	0x0801cab0
 8004864:	0801c2f4 	.word	0x0801c2f4
 8004868:	0801c308 	.word	0x0801c308
 800486c:	0000035f 	.word	0x0000035f
 8004870:	200003ac 	.word	0x200003ac
 8004874:	447a0000 	.word	0x447a0000
 8004878:	0801cab8 	.word	0x0801cab8
 800487c:	00000376 	.word	0x00000376
 8004880:	0801cac0 	.word	0x0801cac0
 8004884:	00000377 	.word	0x00000377
 8004888:	0801cad0 	.word	0x0801cad0
 800488c:	401c7ae1 	.word	0x401c7ae1
 8004890:	0801c2d0 	.word	0x0801c2d0
 8004894:	0801ca48 	.word	0x0801ca48
 8004898:	000003df 	.word	0x000003df
 800489c:	0801cae0 	.word	0x0801cae0
 80048a0:	0801caf4 	.word	0x0801caf4
 80048a4:	000003e1 	.word	0x000003e1
 80048a8:	0801cb08 	.word	0x0801cb08
 80048ac:	000003e2 	.word	0x000003e2
 80048b0:	0801cb1c 	.word	0x0801cb1c
 80048b4:	000003e3 	.word	0x000003e3
 80048b8:	08015b10 	.word	0x08015b10
	INF_PRINTLN("Start Envelope measurement");
 80048bc:	48c3      	ldr	r0, [pc, #780]	; (8004bcc <RegInt_parsecmd.part.9+0xcb4>)
 80048be:	f010 fd2d 	bl	801531c <__wrap_printf>
 80048c2:	48c3      	ldr	r0, [pc, #780]	; (8004bd0 <RegInt_parsecmd.part.9+0xcb8>)
 80048c4:	f010 fd2a 	bl	801531c <__wrap_printf>
 80048c8:	4bc2      	ldr	r3, [pc, #776]	; (8004bd4 <RegInt_parsecmd.part.9+0xcbc>)
 80048ca:	4ac3      	ldr	r2, [pc, #780]	; (8004bd8 <RegInt_parsecmd.part.9+0xcc0>)
 80048cc:	469b      	mov	fp, r3
 80048ce:	4bc3      	ldr	r3, [pc, #780]	; (8004bdc <RegInt_parsecmd.part.9+0xcc4>)
 80048d0:	4659      	mov	r1, fp
 80048d2:	0018      	movs	r0, r3
 80048d4:	4699      	mov	r9, r3
 80048d6:	f010 fd21 	bl	801531c <__wrap_printf>
	return *regptr;
 80048da:	2384      	movs	r3, #132	; 0x84
 80048dc:	4ac0      	ldr	r2, [pc, #768]	; (8004be0 <RegInt_parsecmd.part.9+0xcc8>)
	REGADRERR = -1;
 80048de:	602e      	str	r6, [r5, #0]
	return *regptr;
 80048e0:	58d5      	ldr	r5, [r2, r3]
	DBG_PRINTINT(repeats);
 80048e2:	4bc0      	ldr	r3, [pc, #768]	; (8004be4 <RegInt_parsecmd.part.9+0xccc>)
	return *regptr;
 80048e4:	62fd      	str	r5, [r7, #44]	; 0x2c
	DBG_PRINTINT(repeats);
 80048e6:	0018      	movs	r0, r3
 80048e8:	469a      	mov	sl, r3
 80048ea:	f010 fd17 	bl	801531c <__wrap_printf>
 80048ee:	002a      	movs	r2, r5
 80048f0:	49bd      	ldr	r1, [pc, #756]	; (8004be8 <RegInt_parsecmd.part.9+0xcd0>)
 80048f2:	48be      	ldr	r0, [pc, #760]	; (8004bec <RegInt_parsecmd.part.9+0xcd4>)
 80048f4:	f010 fd12 	bl	801531c <__wrap_printf>
 80048f8:	4abd      	ldr	r2, [pc, #756]	; (8004bf0 <RegInt_parsecmd.part.9+0xcd8>)
 80048fa:	4659      	mov	r1, fp
 80048fc:	4648      	mov	r0, r9
 80048fe:	f010 fd0d 	bl	801531c <__wrap_printf>
 8004902:	4ebc      	ldr	r6, [pc, #752]	; (8004bf4 <RegInt_parsecmd.part.9+0xcdc>)
	for(uint32_t i=0; i < repeats; i++){
 8004904:	2d00      	cmp	r5, #0
 8004906:	d02b      	beq.n	8004960 <RegInt_parsecmd.part.9+0xa48>
 8004908:	231c      	movs	r3, #28
 800490a:	4698      	mov	r8, r3
 800490c:	18db      	adds	r3, r3, r3
 800490e:	469c      	mov	ip, r3
 8004910:	44bc      	add	ip, r7
 8004912:	44e0      	add	r8, ip
 8004914:	4643      	mov	r3, r8
 8004916:	4eb7      	ldr	r6, [pc, #732]	; (8004bf4 <RegInt_parsecmd.part.9+0xcdc>)
 8004918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491a:	2500      	movs	r5, #0
 800491c:	637e      	str	r6, [r7, #52]	; 0x34
 800491e:	4690      	mov	r8, r2
 8004920:	0026      	movs	r6, r4
 8004922:	001c      	movs	r4, r3
 8004924:	633d      	str	r5, [r7, #48]	; 0x30
 8004926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004928:	0021      	movs	r1, r4
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004930:	6063      	str	r3, [r4, #4]
 8004932:	4bb1      	ldr	r3, [pc, #708]	; (8004bf8 <RegInt_parsecmd.part.9+0xce0>)
 8004934:	7025      	strb	r5, [r4, #0]
 8004936:	60a3      	str	r3, [r4, #8]
 8004938:	4bb0      	ldr	r3, [pc, #704]	; (8004bfc <RegInt_parsecmd.part.9+0xce4>)
 800493a:	60e5      	str	r5, [r4, #12]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2304      	movs	r3, #4
 8004940:	7625      	strb	r5, [r4, #24]
 8004942:	6163      	str	r3, [r4, #20]
 8004944:	7665      	strb	r5, [r4, #25]
 8004946:	76a5      	strb	r5, [r4, #26]
 8004948:	f006 fb0c 	bl	800af64 <acc_service_get_next.constprop.80>
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	3301      	adds	r3, #1
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
 8004954:	429a      	cmp	r2, r3
 8004956:	d1e6      	bne.n	8004926 <RegInt_parsecmd.part.9+0xa0e>
 8004958:	4643      	mov	r3, r8
 800495a:	0034      	movs	r4, r6
 800495c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 8004960:	4ba7      	ldr	r3, [pc, #668]	; (8004c00 <RegInt_parsecmd.part.9+0xce8>)
 8004962:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	0052      	lsls	r2, r2, #1
 800496c:	f011 f8a6 	bl	8015abc <memcpy>
	DBG_PRINTLN("Envelope measurement complete");
 8004970:	4650      	mov	r0, sl
 8004972:	f010 fcd3 	bl	801531c <__wrap_printf>
 8004976:	48a3      	ldr	r0, [pc, #652]	; (8004c04 <RegInt_parsecmd.part.9+0xcec>)
 8004978:	f010 fcd0 	bl	801531c <__wrap_printf>
 800497c:	4aa2      	ldr	r2, [pc, #648]	; (8004c08 <RegInt_parsecmd.part.9+0xcf0>)
 800497e:	4659      	mov	r1, fp
 8004980:	4648      	mov	r0, r9
 8004982:	f010 fccb 	bl	801531c <__wrap_printf>
 8004986:	f7ff fb09 	bl	8003f9c <RegInt_parsecmd.part.9+0x84>
void evalEnvelopeData(void){
 800498a:	466b      	mov	r3, sp
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 800498c:	499f      	ldr	r1, [pc, #636]	; (8004c0c <RegInt_parsecmd.part.9+0xcf4>)
 800498e:	6b20      	ldr	r0, [r4, #48]	; 0x30
void evalEnvelopeData(void){
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 8004992:	f009 fffb 	bl	800e98c <__aeabi_fmul>
 8004996:	f00a fd39 	bl	800f40c <__aeabi_f2uiz>
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 800499a:	499d      	ldr	r1, [pc, #628]	; (8004c10 <RegInt_parsecmd.part.9+0xcf8>)
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 800499c:	b283      	uxth	r3, r0
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 800499e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 80049a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 80049a2:	f009 fff3 	bl	800e98c <__aeabi_fmul>
 80049a6:	f00a fd31 	bl	800f40c <__aeabi_f2uiz>
	uint16_t min_sep = (uint16_t)((1000*(uint32_t)RegInt_getreg(0xD4))/dist_res);
 80049aa:	b281      	uxth	r1, r0
 80049ac:	20fa      	movs	r0, #250	; 0xfa
	return *regptr;
 80049ae:	4d99      	ldr	r5, [pc, #612]	; (8004c14 <RegInt_parsecmd.part.9+0xcfc>)
	uint16_t min_sep = (uint16_t)((1000*(uint32_t)RegInt_getreg(0xD4))/dist_res);
 80049b0:	0080      	lsls	r0, r0, #2
 80049b2:	692b      	ldr	r3, [r5, #16]
 80049b4:	6279      	str	r1, [r7, #36]	; 0x24
 80049b6:	4358      	muls	r0, r3
 80049b8:	f00a fb1a 	bl	800eff0 <__udivsi3>
 80049bc:	0006      	movs	r6, r0
	DBG_PRINTINT(min_sep);
 80049be:	4889      	ldr	r0, [pc, #548]	; (8004be4 <RegInt_parsecmd.part.9+0xccc>)
 80049c0:	f010 fcac 	bl	801531c <__wrap_printf>
 80049c4:	b2b2      	uxth	r2, r6
 80049c6:	4994      	ldr	r1, [pc, #592]	; (8004c18 <RegInt_parsecmd.part.9+0xd00>)
 80049c8:	4888      	ldr	r0, [pc, #544]	; (8004bec <RegInt_parsecmd.part.9+0xcd4>)
 80049ca:	f010 fca7 	bl	801531c <__wrap_printf>
 80049ce:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <RegInt_parsecmd.part.9+0xcbc>)
 80049d0:	22e7      	movs	r2, #231	; 0xe7
 80049d2:	469b      	mov	fp, r3
 80049d4:	4b81      	ldr	r3, [pc, #516]	; (8004bdc <RegInt_parsecmd.part.9+0xcc4>)
 80049d6:	0092      	lsls	r2, r2, #2
 80049d8:	4659      	mov	r1, fp
 80049da:	0018      	movs	r0, r3
 80049dc:	4699      	mov	r9, r3
 80049de:	f010 fc9d 	bl	801531c <__wrap_printf>
	getpeaks(data, bins, indexes, amplitudes, min_sep);
 80049e2:	2314      	movs	r3, #20
 80049e4:	4698      	mov	r8, r3
 80049e6:	3324      	adds	r3, #36	; 0x24
 80049e8:	469c      	mov	ip, r3
 80049ea:	2238      	movs	r2, #56	; 0x38
 80049ec:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <RegInt_parsecmd.part.9+0xd04>)
 80049ee:	44bc      	add	ip, r7
 80049f0:	8819      	ldrh	r1, [r3, #0]
 80049f2:	44e0      	add	r8, ip
 80049f4:	b2b3      	uxth	r3, r6
 80049f6:	4694      	mov	ip, r2
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	230c      	movs	r3, #12
 80049fc:	4880      	ldr	r0, [pc, #512]	; (8004c00 <RegInt_parsecmd.part.9+0xce8>)
 80049fe:	44bc      	add	ip, r7
 8004a00:	4463      	add	r3, ip
 8004a02:	4642      	mov	r2, r8
 8004a04:	6800      	ldr	r0, [r0, #0]
 8004a06:	f00c fe13 	bl	8011630 <getpeaks>
 8004a0a:	233c      	movs	r3, #60	; 0x3c
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2600      	movs	r6, #0
 8004a10:	469a      	mov	sl, r3
		distances[i] = (uint16_t)(((uint32_t)indexes[i]*(uint32_t)dist_res)/1e3) + dist_start;
 8004a12:	4643      	mov	r3, r8
 8004a14:	5b98      	ldrh	r0, [r3, r6]
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	4358      	muls	r0, r3
 8004a1a:	f00c fce1 	bl	80113e0 <__aeabi_ui2d>
 8004a1e:	4b80      	ldr	r3, [pc, #512]	; (8004c20 <RegInt_parsecmd.part.9+0xd08>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	f00b fa8d 	bl	800ff40 <__aeabi_ddiv>
 8004a26:	f00a fd09 	bl	800f43c <__aeabi_d2uiz>
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	469c      	mov	ip, r3
 8004a2e:	4653      	mov	r3, sl
 8004a30:	4460      	add	r0, ip
 8004a32:	5398      	strh	r0, [r3, r6]
 8004a34:	3602      	adds	r6, #2
	for(uint8_t i = 0; i < n; i++){
 8004a36:	2e08      	cmp	r6, #8
 8004a38:	d1eb      	bne.n	8004a12 <RegInt_parsecmd.part.9+0xafa>
	pack16to32array(distamp_pack, distances, amplitudes);
 8004a3a:	231c      	movs	r3, #28
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	469c      	mov	ip, r3
 8004a42:	44bc      	add	ip, r7
 8004a44:	4662      	mov	r2, ip
 8004a46:	3b2c      	subs	r3, #44	; 0x2c
 8004a48:	44e0      	add	r8, ip
 8004a4a:	18d2      	adds	r2, r2, r3
 8004a4c:	4651      	mov	r1, sl
 8004a4e:	4640      	mov	r0, r8
 8004a50:	f00c fde2 	bl	8011618 <pack16to32array>
	REGADRERR = -1;
 8004a54:	2201      	movs	r2, #1
 8004a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a58:	4252      	negs	r2, r2
 8004a5a:	600a      	str	r2, [r1, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004a5c:	682a      	ldr	r2, [r5, #0]
	RegInt_setregf(0xD0,(uint32_t)distamp_pack[0], 1);
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	if (!(*regptr == (uint32_t)-1)){
 8004a60:	3201      	adds	r2, #1
 8004a62:	d000      	beq.n	8004a66 <RegInt_parsecmd.part.9+0xb4e>
		*regptr = val;
 8004a64:	602b      	str	r3, [r5, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004a66:	686b      	ldr	r3, [r5, #4]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <RegInt_parsecmd.part.9+0xb5a>
		*regptr = val;
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	606b      	str	r3, [r5, #4]
	if (!(*regptr == (uint32_t)-1)){
 8004a72:	68ab      	ldr	r3, [r5, #8]
 8004a74:	3301      	adds	r3, #1
 8004a76:	d002      	beq.n	8004a7e <RegInt_parsecmd.part.9+0xb66>
		*regptr = val;
 8004a78:	4643      	mov	r3, r8
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	60ab      	str	r3, [r5, #8]
	if (!(*regptr == (uint32_t)-1)){
 8004a7e:	68eb      	ldr	r3, [r5, #12]
 8004a80:	3301      	adds	r3, #1
 8004a82:	d002      	beq.n	8004a8a <RegInt_parsecmd.part.9+0xb72>
		*regptr = val;
 8004a84:	4643      	mov	r3, r8
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60eb      	str	r3, [r5, #12]
}


void print_envelope_results(void){
	INF_PRINTLN("RESULTS");
 8004a8a:	4b50      	ldr	r3, [pc, #320]	; (8004bcc <RegInt_parsecmd.part.9+0xcb4>)
	REGADRERR = -1;
 8004a8c:	2601      	movs	r6, #1
	INF_PRINTLN("RESULTS");
 8004a8e:	0018      	movs	r0, r3
 8004a90:	4698      	mov	r8, r3
 8004a92:	f010 fc43 	bl	801531c <__wrap_printf>
 8004a96:	4863      	ldr	r0, [pc, #396]	; (8004c24 <RegInt_parsecmd.part.9+0xd0c>)
 8004a98:	f010 fc40 	bl	801531c <__wrap_printf>
 8004a9c:	22fa      	movs	r2, #250	; 0xfa
 8004a9e:	4659      	mov	r1, fp
 8004aa0:	0092      	lsls	r2, r2, #2
 8004aa2:	4648      	mov	r0, r9
 8004aa4:	f010 fc3a 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	f010 fc37 	bl	801531c <__wrap_printf>
	return (val & (0xFFFFL << (8*byte))) >> (8*byte);
 8004aae:	682a      	ldr	r2, [r5, #0]
 8004ab0:	6829      	ldr	r1, [r5, #0]
	REGADRERR = -1;
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	4276      	negs	r6, r6
 8004ab6:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 8004ab8:	0c09      	lsrs	r1, r1, #16
 8004aba:	485b      	ldr	r0, [pc, #364]	; (8004c28 <RegInt_parsecmd.part.9+0xd10>)
	REGADRERR = -1;
 8004abc:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 8004abe:	f010 fc2d 	bl	801531c <__wrap_printf>
 8004ac2:	4a5a      	ldr	r2, [pc, #360]	; (8004c2c <RegInt_parsecmd.part.9+0xd14>)
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	4648      	mov	r0, r9
 8004ac8:	f010 fc28 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004acc:	4640      	mov	r0, r8
 8004ace:	f010 fc25 	bl	801531c <__wrap_printf>
 8004ad2:	686a      	ldr	r2, [r5, #4]
 8004ad4:	6869      	ldr	r1, [r5, #4]
	REGADRERR = -1;
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004ada:	0c09      	lsrs	r1, r1, #16
 8004adc:	4854      	ldr	r0, [pc, #336]	; (8004c30 <RegInt_parsecmd.part.9+0xd18>)
	REGADRERR = -1;
 8004ade:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004ae0:	f010 fc1c 	bl	801531c <__wrap_printf>
 8004ae4:	4a53      	ldr	r2, [pc, #332]	; (8004c34 <RegInt_parsecmd.part.9+0xd1c>)
 8004ae6:	4659      	mov	r1, fp
 8004ae8:	4648      	mov	r0, r9
 8004aea:	f010 fc17 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 8004aee:	4640      	mov	r0, r8
 8004af0:	f010 fc14 	bl	801531c <__wrap_printf>
 8004af4:	68aa      	ldr	r2, [r5, #8]
 8004af6:	68a9      	ldr	r1, [r5, #8]
	REGADRERR = -1;
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 8004afc:	0c09      	lsrs	r1, r1, #16
 8004afe:	484e      	ldr	r0, [pc, #312]	; (8004c38 <RegInt_parsecmd.part.9+0xd20>)
	REGADRERR = -1;
 8004b00:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 8004b02:	f010 fc0b 	bl	801531c <__wrap_printf>
 8004b06:	4a4d      	ldr	r2, [pc, #308]	; (8004c3c <RegInt_parsecmd.part.9+0xd24>)
 8004b08:	4659      	mov	r1, fp
 8004b0a:	4648      	mov	r0, r9
 8004b0c:	f010 fc06 	bl	801531c <__wrap_printf>
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 8004b10:	4640      	mov	r0, r8
 8004b12:	f010 fc03 	bl	801531c <__wrap_printf>
	return *regptr;
 8004b16:	68e9      	ldr	r1, [r5, #12]
	REGADRERR = -1;
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	b28a      	uxth	r2, r1
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 8004b1c:	4848      	ldr	r0, [pc, #288]	; (8004c40 <RegInt_parsecmd.part.9+0xd28>)
 8004b1e:	0c09      	lsrs	r1, r1, #16
	REGADRERR = -1;
 8004b20:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 8004b22:	f010 fbfb 	bl	801531c <__wrap_printf>
 8004b26:	22fb      	movs	r2, #251	; 0xfb
 8004b28:	4659      	mov	r1, fp
 8004b2a:	0092      	lsls	r2, r2, #2
 8004b2c:	4648      	mov	r0, r9
 8004b2e:	f010 fbf5 	bl	801531c <__wrap_printf>
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	4e2f      	ldr	r6, [pc, #188]	; (8004bf4 <RegInt_parsecmd.part.9+0xcdc>)
 8004b36:	469d      	mov	sp, r3
 8004b38:	f7ff fa30 	bl	8003f9c <RegInt_parsecmd.part.9+0x84>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <RegInt_parsecmd.part.9+0xce8>)
 8004b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	f00d f99b 	bl	8011e7c <dofft>
 8004b46:	6238      	str	r0, [r7, #32]
 8004b48:	e524      	b.n	8004594 <RegInt_parsecmd.part.9+0x67c>
		else{amplitude = 0;}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	e5d1      	b.n	80046f4 <RegInt_parsecmd.part.9+0x7dc>
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f00a fe99 	bl	800f888 <__aeabi_ui2f>
 8004b56:	492d      	ldr	r1, [pc, #180]	; (8004c0c <RegInt_parsecmd.part.9+0xcf4>)
 8004b58:	f009 fe06 	bl	800e768 <__aeabi_fdiv>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 8004b5e:	1c03      	adds	r3, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004b60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b62:	0030      	movs	r0, r6
 8004b64:	f00c fe62 	bl	801182c <null_data>
 8004b68:	e582      	b.n	8004670 <RegInt_parsecmd.part.9+0x758>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 8004b6a:	4836      	ldr	r0, [pc, #216]	; (8004c44 <RegInt_parsecmd.part.9+0xd2c>)
 8004b6c:	f010 fbd6 	bl	801531c <__wrap_printf>
 8004b70:	4835      	ldr	r0, [pc, #212]	; (8004c48 <RegInt_parsecmd.part.9+0xd30>)
 8004b72:	f010 fbd3 	bl	801531c <__wrap_printf>
 8004b76:	4a35      	ldr	r2, [pc, #212]	; (8004c4c <RegInt_parsecmd.part.9+0xd34>)
 8004b78:	4659      	mov	r1, fp
 8004b7a:	4648      	mov	r0, r9
 8004b7c:	f010 fbce 	bl	801531c <__wrap_printf>
 8004b80:	e433      	b.n	80043ea <RegInt_parsecmd.part.9+0x4d2>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 8004b82:	4830      	ldr	r0, [pc, #192]	; (8004c44 <RegInt_parsecmd.part.9+0xd2c>)
 8004b84:	f010 fbca 	bl	801531c <__wrap_printf>
 8004b88:	4831      	ldr	r0, [pc, #196]	; (8004c50 <RegInt_parsecmd.part.9+0xd38>)
 8004b8a:	f010 fbc7 	bl	801531c <__wrap_printf>
 8004b8e:	4a31      	ldr	r2, [pc, #196]	; (8004c54 <RegInt_parsecmd.part.9+0xd3c>)
 8004b90:	4659      	mov	r1, fp
 8004b92:	4648      	mov	r0, r9
 8004b94:	f010 fbc2 	bl	801531c <__wrap_printf>
 8004b98:	e421      	b.n	80043de <RegInt_parsecmd.part.9+0x4c6>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 8004b9a:	482a      	ldr	r0, [pc, #168]	; (8004c44 <RegInt_parsecmd.part.9+0xd2c>)
 8004b9c:	f010 fbbe 	bl	801531c <__wrap_printf>
 8004ba0:	482d      	ldr	r0, [pc, #180]	; (8004c58 <RegInt_parsecmd.part.9+0xd40>)
 8004ba2:	f010 fbbb 	bl	801531c <__wrap_printf>
 8004ba6:	4a2d      	ldr	r2, [pc, #180]	; (8004c5c <RegInt_parsecmd.part.9+0xd44>)
 8004ba8:	4659      	mov	r1, fp
 8004baa:	4648      	mov	r0, r9
 8004bac:	f010 fbb6 	bl	801531c <__wrap_printf>
 8004bb0:	e45d      	b.n	800446e <RegInt_parsecmd.part.9+0x556>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 8004bb2:	4824      	ldr	r0, [pc, #144]	; (8004c44 <RegInt_parsecmd.part.9+0xd2c>)
 8004bb4:	f010 fbb2 	bl	801531c <__wrap_printf>
 8004bb8:	4829      	ldr	r0, [pc, #164]	; (8004c60 <RegInt_parsecmd.part.9+0xd48>)
 8004bba:	f010 fbaf 	bl	801531c <__wrap_printf>
 8004bbe:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <RegInt_parsecmd.part.9+0xd4c>)
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	4648      	mov	r0, r9
 8004bc4:	f010 fbaa 	bl	801531c <__wrap_printf>
 8004bc8:	e44b      	b.n	8004462 <RegInt_parsecmd.part.9+0x54a>
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	0801c2d0 	.word	0x0801c2d0
 8004bd0:	0801c8f0 	.word	0x0801c8f0
 8004bd4:	0801c2f4 	.word	0x0801c2f4
 8004bd8:	00000317 	.word	0x00000317
 8004bdc:	0801c308 	.word	0x0801c308
 8004be0:	2000051c 	.word	0x2000051c
 8004be4:	0801c388 	.word	0x0801c388
 8004be8:	0801c90c 	.word	0x0801c90c
 8004bec:	0801c800 	.word	0x0801c800
 8004bf0:	00000319 	.word	0x00000319
 8004bf4:	2000020c 	.word	0x2000020c
 8004bf8:	20000260 	.word	0x20000260
 8004bfc:	20000264 	.word	0x20000264
 8004c00:	200003ac 	.word	0x200003ac
 8004c04:	0801c914 	.word	0x0801c914
 8004c08:	0000031f 	.word	0x0000031f
 8004c0c:	447a0000 	.word	0x447a0000
 8004c10:	49742400 	.word	0x49742400
 8004c14:	200004c8 	.word	0x200004c8
 8004c18:	0801ca40 	.word	0x0801ca40
 8004c1c:	200003a8 	.word	0x200003a8
 8004c20:	408f4000 	.word	0x408f4000
 8004c24:	0801ca48 	.word	0x0801ca48
 8004c28:	0801ca50 	.word	0x0801ca50
 8004c2c:	000003e9 	.word	0x000003e9
 8004c30:	0801ca68 	.word	0x0801ca68
 8004c34:	000003ea 	.word	0x000003ea
 8004c38:	0801ca80 	.word	0x0801ca80
 8004c3c:	000003eb 	.word	0x000003eb
 8004c40:	0801ca98 	.word	0x0801ca98
 8004c44:	0801c3ec 	.word	0x0801c3ec
 8004c48:	0801c998 	.word	0x0801c998
 8004c4c:	00000301 	.word	0x00000301
 8004c50:	0801c96c 	.word	0x0801c96c
 8004c54:	000002fd 	.word	0x000002fd
 8004c58:	0801c9f8 	.word	0x0801c9f8
 8004c5c:	0000030d 	.word	0x0000030d
 8004c60:	0801c9c8 	.word	0x0801c9c8
 8004c64:	0000030a 	.word	0x0000030a

08004c68 <validate.lto_priv.270>:
 8004c68:	6983      	ldr	r3, [r0, #24]
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	0004      	movs	r4, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <validate.lto_priv.270+0x20>
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <validate.lto_priv.270+0x44>)
 8004c74:	001a      	movs	r2, r3
 8004c76:	3230      	adds	r2, #48	; 0x30
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	d004      	beq.n	8004c88 <validate.lto_priv.270+0x20>
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	4a0b      	ldr	r2, [pc, #44]	; (8004cb0 <validate.lto_priv.270+0x48>)
 8004c82:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <validate.lto_priv.270+0x4c>)
 8004c84:	2001      	movs	r0, #1
 8004c86:	4798      	blx	r3
 8004c88:	69e3      	ldr	r3, [r4, #28]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <validate.lto_priv.270+0x3c>
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <validate.lto_priv.270+0x44>)
 8004c90:	001a      	movs	r2, r3
 8004c92:	3230      	adds	r2, #48	; 0x30
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	d004      	beq.n	8004ca4 <validate.lto_priv.270+0x3c>
 8004c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9c:	4a06      	ldr	r2, [pc, #24]	; (8004cb8 <validate.lto_priv.270+0x50>)
 8004c9e:	4905      	ldr	r1, [pc, #20]	; (8004cb4 <validate.lto_priv.270+0x4c>)
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	4798      	blx	r3
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	6883      	ldr	r3, [r0, #8]
 8004ca8:	4798      	blx	r3
 8004caa:	bd10      	pop	{r4, pc}
 8004cac:	200002b0 	.word	0x200002b0
 8004cb0:	0801cba2 	.word	0x0801cba2
 8004cb4:	0801cbb3 	.word	0x0801cbb3
 8004cb8:	0801cbd5 	.word	0x0801cbd5

08004cbc <event.lto_priv.283>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004cc2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8004cc4:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8004cc6:	6809      	ldr	r1, [r1, #0]
 8004cc8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004cca:	6900      	ldr	r0, [r0, #16]
 8004ccc:	47a8      	blx	r5
 8004cce:	6820      	ldr	r0, [r4, #0]
 8004cd0:	6843      	ldr	r3, [r0, #4]
 8004cd2:	4798      	blx	r3
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}

08004cd6 <noise_level_normalization_u16.lto_priv.677>:
 8004cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd8:	464f      	mov	r7, r9
 8004cda:	4646      	mov	r6, r8
 8004cdc:	46d6      	mov	lr, sl
 8004cde:	b5c0      	push	{r6, r7, lr}
 8004ce0:	001f      	movs	r7, r3
 8004ce2:	4b15      	ldr	r3, [pc, #84]	; (8004d38 <noise_level_normalization_u16.lto_priv.677+0x62>)
 8004ce4:	0016      	movs	r6, r2
 8004ce6:	4698      	mov	r8, r3
 8004ce8:	2301      	movs	r3, #1
 8004cea:	425b      	negs	r3, r3
 8004cec:	4699      	mov	r9, r3
 8004cee:	2300      	movs	r3, #0
 8004cf0:	0004      	movs	r4, r0
 8004cf2:	469a      	mov	sl, r3
 8004cf4:	084d      	lsrs	r5, r1, #1
 8004cf6:	006d      	lsls	r5, r5, #1
 8004cf8:	1945      	adds	r5, r0, r5
 8004cfa:	42ac      	cmp	r4, r5
 8004cfc:	d104      	bne.n	8004d08 <noise_level_normalization_u16.lto_priv.677+0x32>
 8004cfe:	bc1c      	pop	{r2, r3, r4}
 8004d00:	4690      	mov	r8, r2
 8004d02:	4699      	mov	r9, r3
 8004d04:	46a2      	mov	sl, r4
 8004d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <noise_level_normalization_u16.lto_priv.677+0x66>)
 8004d0a:	8820      	ldrh	r0, [r4, #0]
 8004d0c:	469c      	mov	ip, r3
 8004d0e:	4460      	add	r0, ip
 8004d10:	4378      	muls	r0, r7
 8004d12:	0031      	movs	r1, r6
 8004d14:	f00a f9f6 	bl	800f104 <__divsi3>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	18c0      	adds	r0, r0, r3
 8004d1e:	d503      	bpl.n	8004d28 <noise_level_normalization_u16.lto_priv.677+0x52>
 8004d20:	4653      	mov	r3, sl
 8004d22:	8023      	strh	r3, [r4, #0]
 8004d24:	3402      	adds	r4, #2
 8004d26:	e7e8      	b.n	8004cfa <noise_level_normalization_u16.lto_priv.677+0x24>
 8004d28:	4540      	cmp	r0, r8
 8004d2a:	dd02      	ble.n	8004d32 <noise_level_normalization_u16.lto_priv.677+0x5c>
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	8023      	strh	r3, [r4, #0]
 8004d30:	e7f8      	b.n	8004d24 <noise_level_normalization_u16.lto_priv.677+0x4e>
 8004d32:	8020      	strh	r0, [r4, #0]
 8004d34:	e7f6      	b.n	8004d24 <noise_level_normalization_u16.lto_priv.677+0x4e>
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	0000ffff 	.word	0x0000ffff
 8004d3c:	ffff8000 	.word	0xffff8000

08004d40 <validate.lto_priv.269>:
 8004d40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d42:	4a24      	ldr	r2, [pc, #144]	; (8004dd4 <validate.lto_priv.269+0x94>)
 8004d44:	b510      	push	{r4, lr}
 8004d46:	0004      	movs	r4, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10b      	bne.n	8004d64 <validate.lto_priv.269+0x24>
 8004d4c:	6903      	ldr	r3, [r0, #16]
 8004d4e:	6942      	ldr	r2, [r0, #20]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d01e      	beq.n	8004d92 <validate.lto_priv.269+0x52>
 8004d54:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <validate.lto_priv.269+0x98>)
 8004d56:	2000      	movs	r0, #0
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <validate.lto_priv.269+0x9c>)
 8004d5c:	4920      	ldr	r1, [pc, #128]	; (8004de0 <validate.lto_priv.269+0xa0>)
 8004d5e:	4798      	blx	r3
 8004d60:	2000      	movs	r0, #0
 8004d62:	bd10      	pop	{r4, pc}
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <validate.lto_priv.269+0xa4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10b      	bne.n	8004d82 <validate.lto_priv.269+0x42>
 8004d6a:	6903      	ldr	r3, [r0, #16]
 8004d6c:	6942      	ldr	r2, [r0, #20]
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10f      	bne.n	8004d92 <validate.lto_priv.269+0x52>
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <validate.lto_priv.269+0x98>)
 8004d74:	2000      	movs	r0, #0
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	4a1b      	ldr	r2, [pc, #108]	; (8004de8 <validate.lto_priv.269+0xa8>)
 8004d7a:	4919      	ldr	r1, [pc, #100]	; (8004de0 <validate.lto_priv.269+0xa0>)
 8004d7c:	4798      	blx	r3
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e7ef      	b.n	8004d62 <validate.lto_priv.269+0x22>
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <validate.lto_priv.269+0x98>)
 8004d84:	2000      	movs	r0, #0
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <validate.lto_priv.269+0xac>)
 8004d8a:	4915      	ldr	r1, [pc, #84]	; (8004de0 <validate.lto_priv.269+0xa0>)
 8004d8c:	4798      	blx	r3
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7e7      	b.n	8004d62 <validate.lto_priv.269+0x22>
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <validate.lto_priv.269+0x6e>
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <validate.lto_priv.269+0x98>)
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	3230      	adds	r2, #48	; 0x30
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d004      	beq.n	8004dae <validate.lto_priv.269+0x6e>
 8004da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da6:	4a12      	ldr	r2, [pc, #72]	; (8004df0 <validate.lto_priv.269+0xb0>)
 8004da8:	490d      	ldr	r1, [pc, #52]	; (8004de0 <validate.lto_priv.269+0xa0>)
 8004daa:	2001      	movs	r0, #1
 8004dac:	4798      	blx	r3
 8004dae:	69e3      	ldr	r3, [r4, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <validate.lto_priv.269+0x8a>
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <validate.lto_priv.269+0x98>)
 8004db6:	001a      	movs	r2, r3
 8004db8:	3230      	adds	r2, #48	; 0x30
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	2a00      	cmp	r2, #0
 8004dbe:	d004      	beq.n	8004dca <validate.lto_priv.269+0x8a>
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	4a0c      	ldr	r2, [pc, #48]	; (8004df4 <validate.lto_priv.269+0xb4>)
 8004dc4:	4906      	ldr	r1, [pc, #24]	; (8004de0 <validate.lto_priv.269+0xa0>)
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	4798      	blx	r3
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	6883      	ldr	r3, [r0, #8]
 8004dce:	4798      	blx	r3
 8004dd0:	e7c7      	b.n	8004d62 <validate.lto_priv.269+0x22>
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	08005219 	.word	0x08005219
 8004dd8:	200002b0 	.word	0x200002b0
 8004ddc:	0801cbe4 	.word	0x0801cbe4
 8004de0:	0801cc0c 	.word	0x0801cc0c
 8004de4:	080052d3 	.word	0x080052d3
 8004de8:	0801cc1d 	.word	0x0801cc1d
 8004dec:	0801cc52 	.word	0x0801cc52
 8004df0:	0801cba2 	.word	0x0801cba2
 8004df4:	0801cbd5 	.word	0x0801cbd5

08004df8 <event.lto_priv.282.lto_priv.672>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	0004      	movs	r4, r0
 8004dfc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dfe:	4798      	blx	r3
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	6843      	ldr	r3, [r0, #4]
 8004e04:	4798      	blx	r3
 8004e06:	bd10      	pop	{r4, pc}

08004e08 <validate.lto_priv.268>:
 8004e08:	6903      	ldr	r3, [r0, #16]
 8004e0a:	6942      	ldr	r2, [r0, #20]
 8004e0c:	b510      	push	{r4, lr}
 8004e0e:	0004      	movs	r4, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <validate.lto_priv.268+0x1c>
 8004e14:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <validate.lto_priv.268+0x5c>)
 8004e16:	2000      	movs	r0, #0
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <validate.lto_priv.268+0x60>)
 8004e1c:	4913      	ldr	r1, [pc, #76]	; (8004e6c <validate.lto_priv.268+0x64>)
 8004e1e:	4798      	blx	r3
 8004e20:	2000      	movs	r0, #0
 8004e22:	bd10      	pop	{r4, pc}
 8004e24:	6983      	ldr	r3, [r0, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <validate.lto_priv.268+0x38>
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <validate.lto_priv.268+0x5c>)
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	3230      	adds	r2, #48	; 0x30
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d004      	beq.n	8004e40 <validate.lto_priv.268+0x38>
 8004e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e38:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <validate.lto_priv.268+0x68>)
 8004e3a:	490c      	ldr	r1, [pc, #48]	; (8004e6c <validate.lto_priv.268+0x64>)
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	4798      	blx	r3
 8004e40:	69e3      	ldr	r3, [r4, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <validate.lto_priv.268+0x54>
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <validate.lto_priv.268+0x5c>)
 8004e48:	001a      	movs	r2, r3
 8004e4a:	3230      	adds	r2, #48	; 0x30
 8004e4c:	7812      	ldrb	r2, [r2, #0]
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	d004      	beq.n	8004e5c <validate.lto_priv.268+0x54>
 8004e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e54:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <validate.lto_priv.268+0x6c>)
 8004e56:	4905      	ldr	r1, [pc, #20]	; (8004e6c <validate.lto_priv.268+0x64>)
 8004e58:	2001      	movs	r0, #1
 8004e5a:	4798      	blx	r3
 8004e5c:	6820      	ldr	r0, [r4, #0]
 8004e5e:	6883      	ldr	r3, [r0, #8]
 8004e60:	4798      	blx	r3
 8004e62:	e7de      	b.n	8004e22 <validate.lto_priv.268+0x1a>
 8004e64:	200002b0 	.word	0x200002b0
 8004e68:	0801cbe4 	.word	0x0801cbe4
 8004e6c:	0801c21b 	.word	0x0801c21b
 8004e70:	0801cba2 	.word	0x0801cba2
 8004e74:	0801cbd5 	.word	0x0801cbd5

08004e78 <event.lto_priv.281.lto_priv.666>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	0004      	movs	r4, r0
 8004e7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e7e:	4798      	blx	r3
 8004e80:	6820      	ldr	r0, [r4, #0]
 8004e82:	6843      	ldr	r3, [r0, #4]
 8004e84:	4798      	blx	r3
 8004e86:	bd10      	pop	{r4, pc}

08004e88 <filter_no_operation.lto_priv.180>:
 8004e88:	4770      	bx	lr

08004e8a <validate.lto_priv.267>:
 8004e8a:	6983      	ldr	r3, [r0, #24]
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	0004      	movs	r4, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <validate.lto_priv.267+0x20>
 8004e94:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <validate.lto_priv.267+0x46>)
 8004e96:	001a      	movs	r2, r3
 8004e98:	3230      	adds	r2, #48	; 0x30
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	2a00      	cmp	r2, #0
 8004e9e:	d004      	beq.n	8004eaa <validate.lto_priv.267+0x20>
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	; (8004ed4 <validate.lto_priv.267+0x4a>)
 8004ea4:	490c      	ldr	r1, [pc, #48]	; (8004ed8 <validate.lto_priv.267+0x4e>)
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	4798      	blx	r3
 8004eaa:	69e3      	ldr	r3, [r4, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <validate.lto_priv.267+0x3c>
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <validate.lto_priv.267+0x46>)
 8004eb2:	001a      	movs	r2, r3
 8004eb4:	3230      	adds	r2, #48	; 0x30
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d004      	beq.n	8004ec6 <validate.lto_priv.267+0x3c>
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	4a07      	ldr	r2, [pc, #28]	; (8004edc <validate.lto_priv.267+0x52>)
 8004ec0:	4905      	ldr	r1, [pc, #20]	; (8004ed8 <validate.lto_priv.267+0x4e>)
 8004ec2:	2001      	movs	r0, #1
 8004ec4:	4798      	blx	r3
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	6883      	ldr	r3, [r0, #8]
 8004eca:	4798      	blx	r3
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	200002b0 	.word	0x200002b0
 8004ed4:	0801cba2 	.word	0x0801cba2
 8004ed8:	0801cc67 	.word	0x0801cc67
 8004edc:	0801cbd5 	.word	0x0801cbd5

08004ee0 <event.lto_priv.280>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ee4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004ee6:	6800      	ldr	r0, [r0, #0]
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	6843      	ldr	r3, [r0, #4]
 8004eec:	4798      	blx	r3
 8004eee:	bd10      	pop	{r4, pc}

08004ef0 <validate.lto_priv.266>:
 8004ef0:	6983      	ldr	r3, [r0, #24]
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	0004      	movs	r4, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <validate.lto_priv.266+0x20>
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <validate.lto_priv.266+0x44>)
 8004efc:	001a      	movs	r2, r3
 8004efe:	3230      	adds	r2, #48	; 0x30
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	2a00      	cmp	r2, #0
 8004f04:	d004      	beq.n	8004f10 <validate.lto_priv.266+0x20>
 8004f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f08:	4a0b      	ldr	r2, [pc, #44]	; (8004f38 <validate.lto_priv.266+0x48>)
 8004f0a:	490c      	ldr	r1, [pc, #48]	; (8004f3c <validate.lto_priv.266+0x4c>)
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	4798      	blx	r3
 8004f10:	69e3      	ldr	r3, [r4, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <validate.lto_priv.266+0x3c>
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <validate.lto_priv.266+0x44>)
 8004f18:	001a      	movs	r2, r3
 8004f1a:	3230      	adds	r2, #48	; 0x30
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	2a00      	cmp	r2, #0
 8004f20:	d004      	beq.n	8004f2c <validate.lto_priv.266+0x3c>
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	4a06      	ldr	r2, [pc, #24]	; (8004f40 <validate.lto_priv.266+0x50>)
 8004f26:	4905      	ldr	r1, [pc, #20]	; (8004f3c <validate.lto_priv.266+0x4c>)
 8004f28:	2001      	movs	r0, #1
 8004f2a:	4798      	blx	r3
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	6883      	ldr	r3, [r0, #8]
 8004f30:	4798      	blx	r3
 8004f32:	bd10      	pop	{r4, pc}
 8004f34:	200002b0 	.word	0x200002b0
 8004f38:	0801cba2 	.word	0x0801cba2
 8004f3c:	0801cc74 	.word	0x0801cc74
 8004f40:	0801cbd5 	.word	0x0801cbd5

08004f44 <convert_q12_4_to_q3_12_complex.lto_priv.655>:
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	2600      	movs	r6, #0
 8004f48:	0852      	lsrs	r2, r2, #1
 8004f4a:	0004      	movs	r4, r0
 8004f4c:	4d06      	ldr	r5, [pc, #24]	; (8004f68 <convert_q12_4_to_q3_12_complex.lto_priv.655+0x24>)
 8004f4e:	0090      	lsls	r0, r2, #2
 8004f50:	1809      	adds	r1, r1, r0
 8004f52:	3904      	subs	r1, #4
 8004f54:	3a01      	subs	r2, #1
 8004f56:	d200      	bcs.n	8004f5a <convert_q12_4_to_q3_12_complex.lto_priv.655+0x16>
 8004f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f5a:	0053      	lsls	r3, r2, #1
 8004f5c:	5ee3      	ldrsh	r3, [r4, r3]
 8004f5e:	804e      	strh	r6, [r1, #2]
 8004f60:	105b      	asrs	r3, r3, #1
 8004f62:	406b      	eors	r3, r5
 8004f64:	800b      	strh	r3, [r1, #0]
 8004f66:	e7f4      	b.n	8004f52 <convert_q12_4_to_q3_12_complex.lto_priv.655+0xe>
 8004f68:	ffffc000 	.word	0xffffc000

08004f6c <convert_q12_4_to_q3_12.lto_priv.657>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	0853      	lsrs	r3, r2, #1
 8004f70:	4d06      	ldr	r5, [pc, #24]	; (8004f8c <convert_q12_4_to_q3_12.lto_priv.657+0x20>)
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	3b02      	subs	r3, #2
 8004f76:	1c9c      	adds	r4, r3, #2
 8004f78:	d103      	bne.n	8004f82 <convert_q12_4_to_q3_12.lto_priv.657+0x16>
 8004f7a:	3303      	adds	r3, #3
 8004f7c:	439a      	bics	r2, r3
 8004f7e:	0010      	movs	r0, r2
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
 8004f82:	5ec4      	ldrsh	r4, [r0, r3]
 8004f84:	1064      	asrs	r4, r4, #1
 8004f86:	406c      	eors	r4, r5
 8004f88:	52cc      	strh	r4, [r1, r3]
 8004f8a:	e7f3      	b.n	8004f74 <convert_q12_4_to_q3_12.lto_priv.657+0x8>
 8004f8c:	ffffc000 	.word	0xffffc000

08004f90 <convert_q12_4_to_q15_16.lto_priv.658>:
 8004f90:	0852      	lsrs	r2, r2, #1
 8004f92:	0013      	movs	r3, r2
 8004f94:	b530      	push	{r4, r5, lr}
 8004f96:	3b01      	subs	r3, #1
 8004f98:	d201      	bcs.n	8004f9e <convert_q12_4_to_q15_16.lto_priv.658+0xe>
 8004f9a:	0090      	lsls	r0, r2, #2
 8004f9c:	bd30      	pop	{r4, r5, pc}
 8004f9e:	005c      	lsls	r4, r3, #1
 8004fa0:	5b04      	ldrh	r4, [r0, r4]
 8004fa2:	009d      	lsls	r5, r3, #2
 8004fa4:	0324      	lsls	r4, r4, #12
 8004fa6:	514c      	str	r4, [r1, r5]
 8004fa8:	e7f5      	b.n	8004f96 <convert_q12_4_to_q15_16.lto_priv.658+0x6>

08004faa <convert_q3_12_complex_to_f32_complex.lto_priv.654>:
 8004faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fac:	4647      	mov	r7, r8
 8004fae:	46ce      	mov	lr, r9
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	0007      	movs	r7, r0
 8004fb4:	0894      	lsrs	r4, r2, #2
 8004fb6:	00e6      	lsls	r6, r4, #3
 8004fb8:	198d      	adds	r5, r1, r6
 8004fba:	00a4      	lsls	r4, r4, #2
 8004fbc:	3c04      	subs	r4, #4
 8004fbe:	3d08      	subs	r5, #8
 8004fc0:	1d23      	adds	r3, r4, #4
 8004fc2:	d104      	bne.n	8004fce <convert_q3_12_complex_to_f32_complex.lto_priv.654+0x24>
 8004fc4:	0030      	movs	r0, r6
 8004fc6:	bc0c      	pop	{r2, r3}
 8004fc8:	4690      	mov	r8, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fce:	193b      	adds	r3, r7, r4
 8004fd0:	2002      	movs	r0, #2
 8004fd2:	5e18      	ldrsh	r0, [r3, r0]
 8004fd4:	f00a fc0e 	bl	800f7f4 <__aeabi_i2f>
 8004fd8:	21e6      	movs	r1, #230	; 0xe6
 8004fda:	0589      	lsls	r1, r1, #22
 8004fdc:	f009 fcd6 	bl	800e98c <__aeabi_fmul>
 8004fe0:	4680      	mov	r8, r0
 8004fe2:	5f38      	ldrsh	r0, [r7, r4]
 8004fe4:	f00a fc06 	bl	800f7f4 <__aeabi_i2f>
 8004fe8:	21e6      	movs	r1, #230	; 0xe6
 8004fea:	0589      	lsls	r1, r1, #22
 8004fec:	f009 fcce 	bl	800e98c <__aeabi_fmul>
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	4640      	mov	r0, r8
 8004ff6:	f009 fcc9 	bl	800e98c <__aeabi_fmul>
 8004ffa:	1c01      	adds	r1, r0, #0
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	f009 fa19 	bl	800e434 <__aeabi_fadd>
 8005002:	4643      	mov	r3, r8
 8005004:	6028      	str	r0, [r5, #0]
 8005006:	606b      	str	r3, [r5, #4]
 8005008:	e7d8      	b.n	8004fbc <convert_q3_12_complex_to_f32_complex.lto_priv.654+0x12>

0800500a <convert_q15_16_to_f32.lto_priv.656>:
 800500a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500c:	4647      	mov	r7, r8
 800500e:	46ce      	mov	lr, r9
 8005010:	4688      	mov	r8, r1
 8005012:	b580      	push	{r7, lr}
 8005014:	0015      	movs	r5, r2
 8005016:	0007      	movs	r7, r0
 8005018:	0894      	lsrs	r4, r2, #2
 800501a:	00a4      	lsls	r4, r4, #2
 800501c:	3c04      	subs	r4, #4
 800501e:	1d23      	adds	r3, r4, #4
 8005020:	d106      	bne.n	8005030 <convert_q15_16_to_f32.lto_priv.656+0x26>
 8005022:	0028      	movs	r0, r5
 8005024:	2303      	movs	r3, #3
 8005026:	4398      	bics	r0, r3
 8005028:	bc0c      	pop	{r2, r3}
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005030:	593e      	ldr	r6, [r7, r4]
 8005032:	b2b0      	uxth	r0, r6
 8005034:	f00a fbde 	bl	800f7f4 <__aeabi_i2f>
 8005038:	21de      	movs	r1, #222	; 0xde
 800503a:	0589      	lsls	r1, r1, #22
 800503c:	f009 fca6 	bl	800e98c <__aeabi_fmul>
 8005040:	4681      	mov	r9, r0
 8005042:	1430      	asrs	r0, r6, #16
 8005044:	f00a fbd6 	bl	800f7f4 <__aeabi_i2f>
 8005048:	1c01      	adds	r1, r0, #0
 800504a:	4648      	mov	r0, r9
 800504c:	f009 f9f2 	bl	800e434 <__aeabi_fadd>
 8005050:	4643      	mov	r3, r8
 8005052:	5118      	str	r0, [r3, r4]
 8005054:	e7e2      	b.n	800501c <convert_q15_16_to_f32.lto_priv.656+0x12>

08005056 <convert_q3_12_to_u16.lto_priv.659>:
 8005056:	b510      	push	{r4, lr}
 8005058:	0853      	lsrs	r3, r2, #1
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	3b02      	subs	r3, #2
 800505e:	1c9c      	adds	r4, r3, #2
 8005060:	d103      	bne.n	800506a <convert_q3_12_to_u16.lto_priv.659+0x14>
 8005062:	3303      	adds	r3, #3
 8005064:	439a      	bics	r2, r3
 8005066:	0010      	movs	r0, r2
 8005068:	bd10      	pop	{r4, pc}
 800506a:	5ac4      	ldrh	r4, [r0, r3]
 800506c:	0064      	lsls	r4, r4, #1
 800506e:	52cc      	strh	r4, [r1, r3]
 8005070:	e7f4      	b.n	800505c <convert_q3_12_to_u16.lto_priv.659+0x6>

08005072 <validate.lto_priv.265>:
 8005072:	6983      	ldr	r3, [r0, #24]
 8005074:	b510      	push	{r4, lr}
 8005076:	0004      	movs	r4, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <validate.lto_priv.265+0x20>
 800507c:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <validate.lto_priv.265+0x46>)
 800507e:	001a      	movs	r2, r3
 8005080:	3230      	adds	r2, #48	; 0x30
 8005082:	7812      	ldrb	r2, [r2, #0]
 8005084:	2a00      	cmp	r2, #0
 8005086:	d004      	beq.n	8005092 <validate.lto_priv.265+0x20>
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <validate.lto_priv.265+0x4a>)
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <validate.lto_priv.265+0x4e>)
 800508e:	2001      	movs	r0, #1
 8005090:	4798      	blx	r3
 8005092:	69e3      	ldr	r3, [r4, #28]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <validate.lto_priv.265+0x3c>
 8005098:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <validate.lto_priv.265+0x46>)
 800509a:	001a      	movs	r2, r3
 800509c:	3230      	adds	r2, #48	; 0x30
 800509e:	7812      	ldrb	r2, [r2, #0]
 80050a0:	2a00      	cmp	r2, #0
 80050a2:	d004      	beq.n	80050ae <validate.lto_priv.265+0x3c>
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	4a07      	ldr	r2, [pc, #28]	; (80050c4 <validate.lto_priv.265+0x52>)
 80050a8:	4905      	ldr	r1, [pc, #20]	; (80050c0 <validate.lto_priv.265+0x4e>)
 80050aa:	2001      	movs	r0, #1
 80050ac:	4798      	blx	r3
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	6883      	ldr	r3, [r0, #8]
 80050b2:	4798      	blx	r3
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	200002b0 	.word	0x200002b0
 80050bc:	0801cba2 	.word	0x0801cba2
 80050c0:	0801cc86 	.word	0x0801cc86
 80050c4:	0801cbd5 	.word	0x0801cbd5

080050c8 <event.lto_priv.278>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	0004      	movs	r4, r0
 80050cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050ce:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	6900      	ldr	r0, [r0, #16]
 80050d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050d6:	4798      	blx	r3
 80050d8:	6820      	ldr	r0, [r4, #0]
 80050da:	6843      	ldr	r3, [r0, #4]
 80050dc:	4798      	blx	r3
 80050de:	bd10      	pop	{r4, pc}

080050e0 <validate.lto_priv.264>:
 80050e0:	6983      	ldr	r3, [r0, #24]
 80050e2:	b510      	push	{r4, lr}
 80050e4:	0004      	movs	r4, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <validate.lto_priv.264+0x20>
 80050ea:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <validate.lto_priv.264+0x44>)
 80050ec:	001a      	movs	r2, r3
 80050ee:	3230      	adds	r2, #48	; 0x30
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d004      	beq.n	8005100 <validate.lto_priv.264+0x20>
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <validate.lto_priv.264+0x48>)
 80050fa:	490c      	ldr	r1, [pc, #48]	; (800512c <validate.lto_priv.264+0x4c>)
 80050fc:	2001      	movs	r0, #1
 80050fe:	4798      	blx	r3
 8005100:	69e3      	ldr	r3, [r4, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <validate.lto_priv.264+0x3c>
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <validate.lto_priv.264+0x44>)
 8005108:	001a      	movs	r2, r3
 800510a:	3230      	adds	r2, #48	; 0x30
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	2a00      	cmp	r2, #0
 8005110:	d004      	beq.n	800511c <validate.lto_priv.264+0x3c>
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	4a06      	ldr	r2, [pc, #24]	; (8005130 <validate.lto_priv.264+0x50>)
 8005116:	4905      	ldr	r1, [pc, #20]	; (800512c <validate.lto_priv.264+0x4c>)
 8005118:	2001      	movs	r0, #1
 800511a:	4798      	blx	r3
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	6883      	ldr	r3, [r0, #8]
 8005120:	4798      	blx	r3
 8005122:	bd10      	pop	{r4, pc}
 8005124:	200002b0 	.word	0x200002b0
 8005128:	0801cba2 	.word	0x0801cba2
 800512c:	0801cc98 	.word	0x0801cc98
 8005130:	0801cbd5 	.word	0x0801cbd5

08005134 <reset.lto_priv.175.lto_priv.262>:
 8005134:	b510      	push	{r4, lr}
 8005136:	6800      	ldr	r0, [r0, #0]
 8005138:	68c3      	ldr	r3, [r0, #12]
 800513a:	4798      	blx	r3
 800513c:	bd10      	pop	{r4, pc}

0800513e <reset.lto_priv.276.lto_priv.676>:
 800513e:	b510      	push	{r4, lr}
 8005140:	f7ff fff8 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 8005144:	bd10      	pop	{r4, pc}

08005146 <reset.lto_priv.275.lto_priv.673>:
 8005146:	b510      	push	{r4, lr}
 8005148:	f7ff fff4 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 800514c:	bd10      	pop	{r4, pc}

0800514e <reset.lto_priv.274.lto_priv.667>:
 800514e:	b510      	push	{r4, lr}
 8005150:	f7ff fff0 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 8005154:	bd10      	pop	{r4, pc}

08005156 <reset.lto_priv.273.lto_priv.668>:
 8005156:	b510      	push	{r4, lr}
 8005158:	f7ff ffec 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 800515c:	bd10      	pop	{r4, pc}

0800515e <reset.lto_priv.272.lto_priv.653>:
 800515e:	b510      	push	{r4, lr}
 8005160:	f7ff ffe8 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 8005164:	bd10      	pop	{r4, pc}

08005166 <reset.lto_priv.271.lto_priv.678>:
 8005166:	b510      	push	{r4, lr}
 8005168:	f7ff ffe4 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 800516c:	bd10      	pop	{r4, pc}

0800516e <event.lto_priv.277.lto_priv.660>:
 800516e:	b570      	push	{r4, r5, r6, lr}
 8005170:	0004      	movs	r4, r0
 8005172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005174:	6941      	ldr	r1, [r0, #20]
 8005176:	682a      	ldr	r2, [r5, #0]
 8005178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800517a:	6900      	ldr	r0, [r0, #16]
 800517c:	4798      	blx	r3
 800517e:	6028      	str	r0, [r5, #0]
 8005180:	6820      	ldr	r0, [r4, #0]
 8005182:	6843      	ldr	r3, [r0, #4]
 8005184:	4798      	blx	r3
 8005186:	bd70      	pop	{r4, r5, r6, pc}

08005188 <event.lto_priv.279.lto_priv.652>:
 8005188:	b510      	push	{r4, lr}
 800518a:	f7ff fff0 	bl	800516e <event.lto_priv.277.lto_priv.660>
 800518e:	bd10      	pop	{r4, pc}

08005190 <acc_sweep_manager_release>:
 8005190:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005192:	b510      	push	{r4, lr}
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <acc_sweep_manager_release+0xe>
 8005198:	3014      	adds	r0, #20
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	4798      	blx	r3
 800519e:	bd10      	pop	{r4, pc}

080051a0 <acc_sensor_manager_release_measurement>:
 80051a0:	6982      	ldr	r2, [r0, #24]
 80051a2:	b510      	push	{r4, lr}
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d00f      	beq.n	80051c8 <acc_sensor_manager_release_measurement+0x28>
 80051a8:	2348      	movs	r3, #72	; 0x48
 80051aa:	435a      	muls	r2, r3
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <acc_sensor_manager_release_measurement+0x2c>)
 80051ae:	3a48      	subs	r2, #72	; 0x48
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	189b      	adds	r3, r3, r2
 80051b4:	001a      	movs	r2, r3
 80051b6:	3240      	adds	r2, #64	; 0x40
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	2a00      	cmp	r2, #0
 80051bc:	d101      	bne.n	80051c2 <acc_sensor_manager_release_measurement+0x22>
 80051be:	3341      	adds	r3, #65	; 0x41
 80051c0:	701a      	strb	r2, [r3, #0]
 80051c2:	3004      	adds	r0, #4
 80051c4:	f7ff ffe4 	bl	8005190 <acc_sweep_manager_release>
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	200004c0 	.word	0x200004c0

080051d0 <measure_noise.lto_priv.289>:
 80051d0:	2000      	movs	r0, #0
 80051d2:	4770      	bx	lr

080051d4 <acc_rss_integration_sensor_device_power_on>:
 80051d4:	b510      	push	{r4, lr}
 80051d6:	4b02      	ldr	r3, [pc, #8]	; (80051e0 <acc_rss_integration_sensor_device_power_on+0xc>)
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4798      	blx	r3
 80051dc:	bd10      	pop	{r4, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	200002b0 	.word	0x200002b0

080051e4 <abs_q3_12_complex.lto_priv.661>:
 80051e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e6:	46c6      	mov	lr, r8
 80051e8:	0007      	movs	r7, r0
 80051ea:	4688      	mov	r8, r1
 80051ec:	2400      	movs	r4, #0
 80051ee:	b500      	push	{lr}
 80051f0:	0895      	lsrs	r5, r2, #2
 80051f2:	0066      	lsls	r6, r4, #1
 80051f4:	42ac      	cmp	r4, r5
 80051f6:	d103      	bne.n	8005200 <abs_q3_12_complex.lto_priv.661+0x1c>
 80051f8:	0030      	movs	r0, r6
 80051fa:	bc04      	pop	{r2}
 80051fc:	4690      	mov	r8, r2
 80051fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005200:	00a3      	lsls	r3, r4, #2
 8005202:	5bda      	ldrh	r2, [r3, r7]
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	8858      	ldrh	r0, [r3, #2]
 8005208:	3401      	adds	r4, #1
 800520a:	0400      	lsls	r0, r0, #16
 800520c:	4310      	orrs	r0, r2
 800520e:	f007 fdbb 	bl	800cd88 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8005212:	4643      	mov	r3, r8
 8005214:	5398      	strh	r0, [r3, r6]
 8005216:	e7ec      	b.n	80051f2 <abs_q3_12_complex.lto_priv.661+0xe>

08005218 <iq_mix_q3_12_complex.lto_priv.675>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	46de      	mov	lr, fp
 800521c:	464e      	mov	r6, r9
 800521e:	4645      	mov	r5, r8
 8005220:	4657      	mov	r7, sl
 8005222:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005224:	b5e0      	push	{r5, r6, r7, lr}
 8005226:	4698      	mov	r8, r3
 8005228:	681e      	ldr	r6, [r3, #0]
 800522a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800522c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800522e:	681d      	ldr	r5, [r3, #0]
 8005230:	0004      	movs	r4, r0
 8005232:	1c28      	adds	r0, r5, #0
 8005234:	f009 fbaa 	bl	800e98c <__aeabi_fmul>
 8005238:	f007 fd04 	bl	800cc44 <accumulator_mod.lto_priv.625>
 800523c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800523e:	0007      	movs	r7, r0
 8005240:	1c28      	adds	r0, r5, #0
 8005242:	f009 fba3 	bl	800e98c <__aeabi_fmul>
 8005246:	f007 fcfd 	bl	800cc44 <accumulator_mod.lto_priv.625>
 800524a:	4681      	mov	r9, r0
 800524c:	6924      	ldr	r4, [r4, #16]
 800524e:	08b5      	lsrs	r5, r6, #2
 8005250:	00ad      	lsls	r5, r5, #2
 8005252:	192d      	adds	r5, r5, r4
 8005254:	42ac      	cmp	r4, r5
 8005256:	d109      	bne.n	800526c <iq_mix_q3_12_complex.lto_priv.675+0x54>
 8005258:	2303      	movs	r3, #3
 800525a:	439e      	bics	r6, r3
 800525c:	4643      	mov	r3, r8
 800525e:	601e      	str	r6, [r3, #0]
 8005260:	bc3c      	pop	{r2, r3, r4, r5}
 8005262:	4690      	mov	r8, r2
 8005264:	4699      	mov	r9, r3
 8005266:	46a2      	mov	sl, r4
 8005268:	46ab      	mov	fp, r5
 800526a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	18f8      	adds	r0, r7, r3
 8005272:	f007 fd73 	bl	800cd5c <acc_alg_basic_math_q3_12_sin>
 8005276:	4682      	mov	sl, r0
 8005278:	0038      	movs	r0, r7
 800527a:	f007 fd6f 	bl	800cd5c <acc_alg_basic_math_q3_12_sin>
 800527e:	2200      	movs	r2, #0
 8005280:	5ea3      	ldrsh	r3, [r4, r2]
 8005282:	4651      	mov	r1, sl
 8005284:	469c      	mov	ip, r3
 8005286:	2202      	movs	r2, #2
 8005288:	5ea3      	ldrsh	r3, [r4, r2]
 800528a:	4662      	mov	r2, ip
 800528c:	4351      	muls	r1, r2
 800528e:	17ca      	asrs	r2, r1, #31
 8005290:	0512      	lsls	r2, r2, #20
 8005292:	0d12      	lsrs	r2, r2, #20
 8005294:	1852      	adds	r2, r2, r1
 8005296:	0001      	movs	r1, r0
 8005298:	4359      	muls	r1, r3
 800529a:	468b      	mov	fp, r1
 800529c:	17c9      	asrs	r1, r1, #31
 800529e:	0509      	lsls	r1, r1, #20
 80052a0:	0d09      	lsrs	r1, r1, #20
 80052a2:	4459      	add	r1, fp
 80052a4:	1312      	asrs	r2, r2, #12
 80052a6:	1309      	asrs	r1, r1, #12
 80052a8:	1a52      	subs	r2, r2, r1
 80052aa:	8022      	strh	r2, [r4, #0]
 80052ac:	4652      	mov	r2, sl
 80052ae:	435a      	muls	r2, r3
 80052b0:	17d3      	asrs	r3, r2, #31
 80052b2:	051b      	lsls	r3, r3, #20
 80052b4:	0d1b      	lsrs	r3, r3, #20
 80052b6:	189b      	adds	r3, r3, r2
 80052b8:	4662      	mov	r2, ip
 80052ba:	4342      	muls	r2, r0
 80052bc:	17d0      	asrs	r0, r2, #31
 80052be:	0500      	lsls	r0, r0, #20
 80052c0:	0d00      	lsrs	r0, r0, #20
 80052c2:	1880      	adds	r0, r0, r2
 80052c4:	131b      	asrs	r3, r3, #12
 80052c6:	1300      	asrs	r0, r0, #12
 80052c8:	181b      	adds	r3, r3, r0
 80052ca:	8063      	strh	r3, [r4, #2]
 80052cc:	444f      	add	r7, r9
 80052ce:	3404      	adds	r4, #4
 80052d0:	e7c0      	b.n	8005254 <iq_mix_q3_12_complex.lto_priv.675+0x3c>

080052d2 <iq_mix_q3_12.lto_priv.674>:
 80052d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d4:	46de      	mov	lr, fp
 80052d6:	4657      	mov	r7, sl
 80052d8:	464e      	mov	r6, r9
 80052da:	4645      	mov	r5, r8
 80052dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80052de:	b5e0      	push	{r5, r6, r7, lr}
 80052e0:	4699      	mov	r9, r3
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	0006      	movs	r6, r0
 80052e6:	085c      	lsrs	r4, r3, #1
 80052e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052ea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80052ec:	681d      	ldr	r5, [r3, #0]
 80052ee:	1c28      	adds	r0, r5, #0
 80052f0:	f009 fb4c 	bl	800e98c <__aeabi_fmul>
 80052f4:	f007 fca6 	bl	800cc44 <accumulator_mod.lto_priv.625>
 80052f8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 80052fa:	0007      	movs	r7, r0
 80052fc:	1c28      	adds	r0, r5, #0
 80052fe:	f009 fb45 	bl	800e98c <__aeabi_fmul>
 8005302:	f007 fc9f 	bl	800cc44 <accumulator_mod.lto_priv.625>
 8005306:	0063      	lsls	r3, r4, #1
 8005308:	4698      	mov	r8, r3
 800530a:	4682      	mov	sl, r0
 800530c:	6935      	ldr	r5, [r6, #16]
 800530e:	6976      	ldr	r6, [r6, #20]
 8005310:	44a8      	add	r8, r5
 8005312:	4545      	cmp	r5, r8
 8005314:	d108      	bne.n	8005328 <iq_mix_q3_12.lto_priv.674+0x56>
 8005316:	464b      	mov	r3, r9
 8005318:	00a4      	lsls	r4, r4, #2
 800531a:	601c      	str	r4, [r3, #0]
 800531c:	bc3c      	pop	{r2, r3, r4, r5}
 800531e:	4690      	mov	r8, r2
 8005320:	4699      	mov	r9, r3
 8005322:	46a2      	mov	sl, r4
 8005324:	46ab      	mov	fp, r5
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005328:	2200      	movs	r2, #0
 800532a:	5eab      	ldrsh	r3, [r5, r2]
 800532c:	3502      	adds	r5, #2
 800532e:	469b      	mov	fp, r3
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	05db      	lsls	r3, r3, #23
 8005334:	18f8      	adds	r0, r7, r3
 8005336:	f007 fd11 	bl	800cd5c <acc_alg_basic_math_q3_12_sin>
 800533a:	465b      	mov	r3, fp
 800533c:	4343      	muls	r3, r0
 800533e:	17d8      	asrs	r0, r3, #31
 8005340:	0500      	lsls	r0, r0, #20
 8005342:	0d00      	lsrs	r0, r0, #20
 8005344:	18c0      	adds	r0, r0, r3
 8005346:	1300      	asrs	r0, r0, #12
 8005348:	8030      	strh	r0, [r6, #0]
 800534a:	0038      	movs	r0, r7
 800534c:	f007 fd06 	bl	800cd5c <acc_alg_basic_math_q3_12_sin>
 8005350:	465b      	mov	r3, fp
 8005352:	4343      	muls	r3, r0
 8005354:	17d8      	asrs	r0, r3, #31
 8005356:	0500      	lsls	r0, r0, #20
 8005358:	0d00      	lsrs	r0, r0, #20
 800535a:	18c0      	adds	r0, r0, r3
 800535c:	1300      	asrs	r0, r0, #12
 800535e:	8070      	strh	r0, [r6, #2]
 8005360:	4457      	add	r7, sl
 8005362:	3604      	adds	r6, #4
 8005364:	e7d5      	b.n	8005312 <iq_mix_q3_12.lto_priv.674+0x40>

08005366 <filter_q3_12_complex.lto_priv.664>:
 8005366:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005368:	2200      	movs	r2, #0
 800536a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800536c:	6906      	ldr	r6, [r0, #16]
 800536e:	681d      	ldr	r5, [r3, #0]
 8005370:	ab03      	add	r3, sp, #12
 8005372:	801a      	strh	r2, [r3, #0]
 8005374:	805a      	strh	r2, [r3, #2]
 8005376:	9b03      	ldr	r3, [sp, #12]
 8005378:	08ad      	lsrs	r5, r5, #2
 800537a:	002a      	movs	r2, r5
 800537c:	0031      	movs	r1, r6
 800537e:	3040      	adds	r0, #64	; 0x40
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	2301      	movs	r3, #1
 8005384:	0004      	movs	r4, r0
 8005386:	f007 fae1 	bl	800c94c <biquad_q3_12_complex_direct_form_1.lto_priv.626>
 800538a:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <filter_q3_12_complex.lto_priv.664+0x4e>)
 800538c:	0020      	movs	r0, r4
 800538e:	18eb      	adds	r3, r5, r3
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	18f3      	adds	r3, r6, r3
 8005394:	2202      	movs	r2, #2
 8005396:	5e99      	ldrsh	r1, [r3, r2]
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	aa02      	add	r2, sp, #8
 800539c:	8013      	strh	r3, [r2, #0]
 800539e:	2301      	movs	r3, #1
 80053a0:	8051      	strh	r1, [r2, #2]
 80053a2:	9a02      	ldr	r2, [sp, #8]
 80053a4:	0031      	movs	r1, r6
 80053a6:	9200      	str	r2, [sp, #0]
 80053a8:	425b      	negs	r3, r3
 80053aa:	002a      	movs	r2, r5
 80053ac:	f007 face 	bl	800c94c <biquad_q3_12_complex_direct_form_1.lto_priv.626>
 80053b0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	3fffffff 	.word	0x3fffffff

080053b8 <centering_q12_4.lto_priv.679>:
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	4657      	mov	r7, sl
 80053bc:	464e      	mov	r6, r9
 80053be:	4645      	mov	r5, r8
 80053c0:	46de      	mov	lr, fp
 80053c2:	b5e0      	push	{r5, r6, r7, lr}
 80053c4:	0849      	lsrs	r1, r1, #1
 80053c6:	0852      	lsrs	r2, r2, #1
 80053c8:	b28b      	uxth	r3, r1
 80053ca:	b295      	uxth	r5, r2
 80053cc:	b083      	sub	sp, #12
 80053ce:	4682      	mov	sl, r0
 80053d0:	4699      	mov	r9, r3
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	d100      	bne.n	80053d8 <centering_q12_4.lto_priv.679+0x20>
 80053d6:	001d      	movs	r5, r3
 80053d8:	b28b      	uxth	r3, r1
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	2301      	movs	r3, #1
 80053de:	425b      	negs	r3, r3
 80053e0:	46c8      	mov	r8, r9
 80053e2:	002f      	movs	r7, r5
 80053e4:	2600      	movs	r6, #0
 80053e6:	469b      	mov	fp, r3
 80053e8:	45b1      	cmp	r9, r6
 80053ea:	d806      	bhi.n	80053fa <centering_q12_4.lto_priv.679+0x42>
 80053ec:	b003      	add	sp, #12
 80053ee:	bc3c      	pop	{r2, r3, r4, r5}
 80053f0:	4690      	mov	r8, r2
 80053f2:	4699      	mov	r9, r3
 80053f4:	46a2      	mov	sl, r4
 80053f6:	46ab      	mov	fp, r5
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fa:	9a01      	ldr	r2, [sp, #4]
 80053fc:	19f3      	adds	r3, r6, r7
 80053fe:	4293      	cmp	r3, r2
 8005400:	dd00      	ble.n	8005404 <centering_q12_4.lto_priv.679+0x4c>
 8005402:	4647      	mov	r7, r8
 8005404:	2f00      	cmp	r7, #0
 8005406:	d020      	beq.n	800544a <centering_q12_4.lto_priv.679+0x92>
 8005408:	2200      	movs	r2, #0
 800540a:	0010      	movs	r0, r2
 800540c:	0074      	lsls	r4, r6, #1
 800540e:	4454      	add	r4, sl
 8005410:	42ba      	cmp	r2, r7
 8005412:	d321      	bcc.n	8005458 <centering_q12_4.lto_priv.679+0xa0>
 8005414:	2301      	movs	r3, #1
 8005416:	2800      	cmp	r0, #0
 8005418:	da00      	bge.n	800541c <centering_q12_4.lto_priv.679+0x64>
 800541a:	465b      	mov	r3, fp
 800541c:	087a      	lsrs	r2, r7, #1
 800541e:	b292      	uxth	r2, r2
 8005420:	4353      	muls	r3, r2
 8005422:	0039      	movs	r1, r7
 8005424:	1818      	adds	r0, r3, r0
 8005426:	f009 fe6d 	bl	800f104 <__divsi3>
 800542a:	007a      	lsls	r2, r7, #1
 800542c:	b201      	sxth	r1, r0
 800542e:	18a2      	adds	r2, r4, r2
 8005430:	2900      	cmp	r1, #0
 8005432:	dd19      	ble.n	8005468 <centering_q12_4.lto_priv.679+0xb0>
 8005434:	b280      	uxth	r0, r0
 8005436:	8823      	ldrh	r3, [r4, #0]
 8005438:	2100      	movs	r1, #0
 800543a:	4283      	cmp	r3, r0
 800543c:	d301      	bcc.n	8005442 <centering_q12_4.lto_priv.679+0x8a>
 800543e:	1a1b      	subs	r3, r3, r0
 8005440:	b299      	uxth	r1, r3
 8005442:	8021      	strh	r1, [r4, #0]
 8005444:	3402      	adds	r4, #2
 8005446:	42a2      	cmp	r2, r4
 8005448:	d1f5      	bne.n	8005436 <centering_q12_4.lto_priv.679+0x7e>
 800544a:	4643      	mov	r3, r8
 800544c:	1b5b      	subs	r3, r3, r5
 800544e:	1976      	adds	r6, r6, r5
 8005450:	b29b      	uxth	r3, r3
 8005452:	b2b6      	uxth	r6, r6
 8005454:	4698      	mov	r8, r3
 8005456:	e7c7      	b.n	80053e8 <centering_q12_4.lto_priv.679+0x30>
 8005458:	490b      	ldr	r1, [pc, #44]	; (8005488 <centering_q12_4.lto_priv.679+0xd0>)
 800545a:	0053      	lsls	r3, r2, #1
 800545c:	468c      	mov	ip, r1
 800545e:	5ae3      	ldrh	r3, [r4, r3]
 8005460:	3201      	adds	r2, #1
 8005462:	4463      	add	r3, ip
 8005464:	18c0      	adds	r0, r0, r3
 8005466:	e7d3      	b.n	8005410 <centering_q12_4.lto_priv.679+0x58>
 8005468:	4b08      	ldr	r3, [pc, #32]	; (800548c <centering_q12_4.lto_priv.679+0xd4>)
 800546a:	469c      	mov	ip, r3
 800546c:	4461      	add	r1, ip
 800546e:	8823      	ldrh	r3, [r4, #0]
 8005470:	428b      	cmp	r3, r1
 8005472:	dc06      	bgt.n	8005482 <centering_q12_4.lto_priv.679+0xca>
 8005474:	1a1b      	subs	r3, r3, r0
 8005476:	b29b      	uxth	r3, r3
 8005478:	8023      	strh	r3, [r4, #0]
 800547a:	3402      	adds	r4, #2
 800547c:	42a2      	cmp	r2, r4
 800547e:	d1f6      	bne.n	800546e <centering_q12_4.lto_priv.679+0xb6>
 8005480:	e7e3      	b.n	800544a <centering_q12_4.lto_priv.679+0x92>
 8005482:	4b02      	ldr	r3, [pc, #8]	; (800548c <centering_q12_4.lto_priv.679+0xd4>)
 8005484:	e7f8      	b.n	8005478 <centering_q12_4.lto_priv.679+0xc0>
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	ffff8000 	.word	0xffff8000
 800548c:	0000ffff 	.word	0x0000ffff

08005490 <acc_alg_cca_calculate>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	0003      	movs	r3, r0
 8005494:	000c      	movs	r4, r1
 8005496:	2201      	movs	r2, #1
 8005498:	2000      	movs	r0, #0
 800549a:	42a2      	cmp	r2, r4
 800549c:	d30f      	bcc.n	80054be <acc_alg_cca_calculate+0x2e>
 800549e:	f00a f9a9 	bl	800f7f4 <__aeabi_i2f>
 80054a2:	1c05      	adds	r5, r0, #0
 80054a4:	1e60      	subs	r0, r4, #1
 80054a6:	f00a f9a5 	bl	800f7f4 <__aeabi_i2f>
 80054aa:	1c01      	adds	r1, r0, #0
 80054ac:	1c28      	adds	r0, r5, #0
 80054ae:	f009 f95b 	bl	800e768 <__aeabi_fdiv>
 80054b2:	f00e f9c7 	bl	8013844 <log10f>
 80054b6:	4907      	ldr	r1, [pc, #28]	; (80054d4 <acc_alg_cca_calculate+0x44>)
 80054b8:	f009 fa68 	bl	800e98c <__aeabi_fmul>
 80054bc:	bd70      	pop	{r4, r5, r6, pc}
 80054be:	881d      	ldrh	r5, [r3, #0]
 80054c0:	8859      	ldrh	r1, [r3, #2]
 80054c2:	3201      	adds	r2, #1
 80054c4:	1b49      	subs	r1, r1, r5
 80054c6:	17cd      	asrs	r5, r1, #31
 80054c8:	1949      	adds	r1, r1, r5
 80054ca:	4069      	eors	r1, r5
 80054cc:	1840      	adds	r0, r0, r1
 80054ce:	b292      	uxth	r2, r2
 80054d0:	3302      	adds	r3, #2
 80054d2:	e7e2      	b.n	800549a <acc_alg_cca_calculate+0xa>
 80054d4:	41a00000 	.word	0x41a00000

080054d8 <acc_sensor_protocol_r2_check_asic_id>:
 80054d8:	b530      	push	{r4, r5, lr}
 80054da:	250e      	movs	r5, #14
 80054dc:	2400      	movs	r4, #0
 80054de:	b085      	sub	sp, #20
 80054e0:	446d      	add	r5, sp
 80054e2:	002a      	movs	r2, r5
 80054e4:	0021      	movs	r1, r4
 80054e6:	802c      	strh	r4, [r5, #0]
 80054e8:	f007 fc82 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 80054ec:	882a      	ldrh	r2, [r5, #0]
 80054ee:	4b07      	ldr	r3, [pc, #28]	; (800550c <acc_sensor_protocol_r2_check_asic_id+0x34>)
 80054f0:	2001      	movs	r0, #1
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d007      	beq.n	8005506 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 80054f6:	9200      	str	r2, [sp, #0]
 80054f8:	4a05      	ldr	r2, [pc, #20]	; (8005510 <acc_sensor_protocol_r2_check_asic_id+0x38>)
 80054fa:	0020      	movs	r0, r4
 80054fc:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80054fe:	4905      	ldr	r1, [pc, #20]	; (8005514 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 8005500:	4a05      	ldr	r2, [pc, #20]	; (8005518 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 8005502:	47a8      	blx	r5
 8005504:	0020      	movs	r0, r4
 8005506:	b005      	add	sp, #20
 8005508:	bd30      	pop	{r4, r5, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	00001112 	.word	0x00001112
 8005510:	200002b0 	.word	0x200002b0
 8005514:	0801ccd2 	.word	0x0801ccd2
 8005518:	0801cca4 	.word	0x0801cca4

0800551c <process_data.lto_priv.298>:
 800551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551e:	001d      	movs	r5, r3
 8005520:	23b8      	movs	r3, #184	; 0xb8
 8005522:	46ce      	mov	lr, r9
 8005524:	4699      	mov	r9, r3
 8005526:	4647      	mov	r7, r8
 8005528:	6944      	ldr	r4, [r0, #20]
 800552a:	b580      	push	{r7, lr}
 800552c:	44a1      	add	r9, r4
 800552e:	464b      	mov	r3, r9
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	0017      	movs	r7, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d028      	beq.n	800558a <process_data.lto_priv.298+0x6e>
 8005538:	0026      	movs	r6, r4
 800553a:	6809      	ldr	r1, [r1, #0]
 800553c:	36b4      	adds	r6, #180	; 0xb4
 800553e:	4688      	mov	r8, r1
 8005540:	8832      	ldrh	r2, [r6, #0]
 8005542:	6801      	ldr	r1, [r0, #0]
 8005544:	0052      	lsls	r2, r2, #1
 8005546:	4490      	add	r8, r2
 8005548:	4642      	mov	r2, r8
 800554a:	2001      	movs	r0, #1
 800554c:	f008 fcec 	bl	800df28 <acc_probes_execute_uint16>
 8005550:	464b      	mov	r3, r9
 8005552:	4640      	mov	r0, r8
 8005554:	8819      	ldrh	r1, [r3, #0]
 8005556:	f7ff ff9b 	bl	8005490 <acc_alg_cca_calculate>
 800555a:	2301      	movs	r3, #1
 800555c:	6068      	str	r0, [r5, #4]
 800555e:	490d      	ldr	r1, [pc, #52]	; (8005594 <process_data.lto_priv.298+0x78>)
 8005560:	4698      	mov	r8, r3
 8005562:	f009 ff1f 	bl	800f3a4 <__aeabi_fcmpgt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d100      	bne.n	800556c <process_data.lto_priv.298+0x50>
 800556a:	4680      	mov	r8, r0
 800556c:	4643      	mov	r3, r8
 800556e:	702b      	strb	r3, [r5, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005574:	429a      	cmp	r2, r3
 8005576:	d103      	bne.n	8005580 <process_data.lto_priv.298+0x64>
 8005578:	34ba      	adds	r4, #186	; 0xba
 800557a:	7822      	ldrb	r2, [r4, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	4053      	eors	r3, r2
 8005580:	2201      	movs	r2, #1
 8005582:	4013      	ands	r3, r2
 8005584:	722b      	strb	r3, [r5, #8]
 8005586:	8833      	ldrh	r3, [r6, #0]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	2001      	movs	r0, #1
 800558c:	bc0c      	pop	{r2, r3}
 800558e:	4690      	mov	r8, r2
 8005590:	4699      	mov	r9, r3
 8005592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005594:	42640000 	.word	0x42640000

08005598 <process_data.lto_priv.297>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	4657      	mov	r7, sl
 800559c:	464e      	mov	r6, r9
 800559e:	4645      	mov	r5, r8
 80055a0:	46de      	mov	lr, fp
 80055a2:	6944      	ldr	r4, [r0, #20]
 80055a4:	b5e0      	push	{r5, r6, r7, lr}
 80055a6:	0027      	movs	r7, r4
 80055a8:	37ce      	adds	r7, #206	; 0xce
 80055aa:	001d      	movs	r5, r3
 80055ac:	883b      	ldrh	r3, [r7, #0]
 80055ae:	4680      	mov	r8, r0
 80055b0:	468a      	mov	sl, r1
 80055b2:	0016      	movs	r6, r2
 80055b4:	4699      	mov	r9, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d03a      	beq.n	8005630 <process_data.lto_priv.297+0x98>
 80055ba:	0023      	movs	r3, r4
 80055bc:	33c8      	adds	r3, #200	; 0xc8
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	b280      	uxth	r0, r0
 80055c2:	0043      	lsls	r3, r0, #1
 80055c4:	469b      	mov	fp, r3
 80055c6:	0023      	movs	r3, r4
 80055c8:	33cc      	adds	r3, #204	; 0xcc
 80055ca:	8819      	ldrh	r1, [r3, #0]
 80055cc:	207c      	movs	r0, #124	; 0x7c
 80055ce:	f009 fd0f 	bl	800eff0 <__udivsi3>
 80055d2:	465b      	mov	r3, fp
 80055d4:	4358      	muls	r0, r3
 80055d6:	0023      	movs	r3, r4
 80055d8:	33c4      	adds	r3, #196	; 0xc4
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	4641      	mov	r1, r8
 80055de:	18c0      	adds	r0, r0, r3
 80055e0:	4653      	mov	r3, sl
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6809      	ldr	r1, [r1, #0]
 80055e6:	469a      	mov	sl, r3
 80055e8:	4482      	add	sl, r0
 80055ea:	464b      	mov	r3, r9
 80055ec:	4652      	mov	r2, sl
 80055ee:	2001      	movs	r0, #1
 80055f0:	f008 fc9a 	bl	800df28 <acc_probes_execute_uint16>
 80055f4:	883f      	ldrh	r7, [r7, #0]
 80055f6:	4650      	mov	r0, sl
 80055f8:	0039      	movs	r1, r7
 80055fa:	f7ff ff49 	bl	8005490 <acc_alg_cca_calculate>
 80055fe:	2301      	movs	r3, #1
 8005600:	6068      	str	r0, [r5, #4]
 8005602:	490f      	ldr	r1, [pc, #60]	; (8005640 <process_data.lto_priv.297+0xa8>)
 8005604:	4698      	mov	r8, r3
 8005606:	f009 fecd 	bl	800f3a4 <__aeabi_fcmpgt>
 800560a:	2800      	cmp	r0, #0
 800560c:	d100      	bne.n	8005610 <process_data.lto_priv.297+0x78>
 800560e:	4680      	mov	r8, r0
 8005610:	4643      	mov	r3, r8
 8005612:	702b      	strb	r3, [r5, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005618:	429a      	cmp	r2, r3
 800561a:	d103      	bne.n	8005624 <process_data.lto_priv.297+0x8c>
 800561c:	34c0      	adds	r4, #192	; 0xc0
 800561e:	7822      	ldrb	r2, [r4, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	4053      	eors	r3, r2
 8005624:	2201      	movs	r2, #1
 8005626:	4013      	ands	r3, r2
 8005628:	722b      	strb	r3, [r5, #8]
 800562a:	6833      	ldr	r3, [r6, #0]
 800562c:	1bdf      	subs	r7, r3, r7
 800562e:	6037      	str	r7, [r6, #0]
 8005630:	2001      	movs	r0, #1
 8005632:	bc3c      	pop	{r2, r3, r4, r5}
 8005634:	4690      	mov	r8, r2
 8005636:	4699      	mov	r9, r3
 8005638:	46a2      	mov	sl, r4
 800563a:	46ab      	mov	fp, r5
 800563c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	42640000 	.word	0x42640000

08005644 <acc_sensor_protocol_r2_transfer_data>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	0016      	movs	r6, r2
 8005648:	0005      	movs	r5, r0
 800564a:	f005 fd0b 	bl	800b064 <internal_buffer_processed_read.constprop.30>
 800564e:	0004      	movs	r4, r0
 8005650:	0033      	movs	r3, r6
 8005652:	0002      	movs	r2, r0
 8005654:	0029      	movs	r1, r5
 8005656:	2000      	movs	r0, #0
 8005658:	f008 fc66 	bl	800df28 <acc_probes_execute_uint16>
 800565c:	0020      	movs	r0, r4
 800565e:	bd70      	pop	{r4, r5, r6, pc}

08005660 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8005660:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005662:	ae03      	add	r6, sp, #12
 8005664:	0032      	movs	r2, r6
 8005666:	0005      	movs	r5, r0
 8005668:	f007 fe06 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800566c:	1e04      	subs	r4, r0, #0
 800566e:	d108      	bne.n	8005682 <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 8005670:	4b0a      	ldr	r3, [pc, #40]	; (800569c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 8005672:	4a0b      	ldr	r2, [pc, #44]	; (80056a0 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 8005674:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005676:	490b      	ldr	r1, [pc, #44]	; (80056a4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8005678:	002b      	movs	r3, r5
 800567a:	47b0      	blx	r6
 800567c:	0020      	movs	r0, r4
 800567e:	b004      	add	sp, #16
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	8873      	ldrh	r3, [r6, #2]
 8005684:	2b06      	cmp	r3, #6
 8005686:	d0f9      	beq.n	800567c <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4b04      	ldr	r3, [pc, #16]	; (800569c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 800568c:	4a06      	ldr	r2, [pc, #24]	; (80056a8 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800568e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005690:	4904      	ldr	r1, [pc, #16]	; (80056a4 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8005692:	002b      	movs	r3, r5
 8005694:	2000      	movs	r0, #0
 8005696:	47a0      	blx	r4
 8005698:	2400      	movs	r4, #0
 800569a:	e7ef      	b.n	800567c <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 800569c:	200002b0 	.word	0x200002b0
 80056a0:	0801cce2 	.word	0x0801cce2
 80056a4:	0801ccd2 	.word	0x0801ccd2
 80056a8:	0801cd14 	.word	0x0801cd14

080056ac <acc_sensor_protocol_r2_wait_for_radar_data>:
 80056ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ae:	b085      	sub	sp, #20
 80056b0:	ac03      	add	r4, sp, #12
 80056b2:	0017      	movs	r7, r2
 80056b4:	0022      	movs	r2, r4
 80056b6:	0006      	movs	r6, r0
 80056b8:	f007 fdde 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80056bc:	1e05      	subs	r5, r0, #0
 80056be:	d032      	beq.n	8005726 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80056c0:	7822      	ldrb	r2, [r4, #0]
 80056c2:	8863      	ldrh	r3, [r4, #2]
 80056c4:	2a06      	cmp	r2, #6
 80056c6:	d125      	bne.n	8005714 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80056c8:	051a      	lsls	r2, r3, #20
 80056ca:	d523      	bpl.n	8005714 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80056cc:	2280      	movs	r2, #128	; 0x80
 80056ce:	00d2      	lsls	r2, r2, #3
 80056d0:	4013      	ands	r3, r2
 80056d2:	d12b      	bne.n	800572c <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	d000      	beq.n	80056da <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80056d8:	703b      	strb	r3, [r7, #0]
 80056da:	8863      	ldrh	r3, [r4, #2]
 80056dc:	05db      	lsls	r3, r3, #23
 80056de:	d50a      	bpl.n	80056f6 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80056e0:	4b15      	ldr	r3, [pc, #84]	; (8005738 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80056e2:	001a      	movs	r2, r3
 80056e4:	3230      	adds	r2, #48	; 0x30
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	2a03      	cmp	r2, #3
 80056ea:	d904      	bls.n	80056f6 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	4a13      	ldr	r2, [pc, #76]	; (800573c <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 80056f0:	4913      	ldr	r1, [pc, #76]	; (8005740 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80056f2:	2004      	movs	r0, #4
 80056f4:	4798      	blx	r3
 80056f6:	8863      	ldrh	r3, [r4, #2]
 80056f8:	059b      	lsls	r3, r3, #22
 80056fa:	d514      	bpl.n	8005726 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80056fc:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80056fe:	001a      	movs	r2, r3
 8005700:	3230      	adds	r2, #48	; 0x30
 8005702:	7812      	ldrb	r2, [r2, #0]
 8005704:	2a03      	cmp	r2, #3
 8005706:	d90e      	bls.n	8005726 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570a:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800570e:	2004      	movs	r0, #4
 8005710:	4798      	blx	r3
 8005712:	e008      	b.n	8005726 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8005718:	4a0b      	ldr	r2, [pc, #44]	; (8005748 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800571a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800571c:	4908      	ldr	r1, [pc, #32]	; (8005740 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800571e:	0033      	movs	r3, r6
 8005720:	2000      	movs	r0, #0
 8005722:	47a0      	blx	r4
 8005724:	2500      	movs	r5, #0
 8005726:	0028      	movs	r0, r5
 8005728:	b005      	add	sp, #20
 800572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800572c:	0031      	movs	r1, r6
 800572e:	200f      	movs	r0, #15
 8005730:	f008 fbee 	bl	800df10 <acc_probes_execute_primitive_probe>
 8005734:	002b      	movs	r3, r5
 8005736:	e7cd      	b.n	80056d4 <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 8005738:	200002b0 	.word	0x200002b0
 800573c:	0801cd7e 	.word	0x0801cd7e
 8005740:	0801ccd2 	.word	0x0801ccd2
 8005744:	0801cd97 	.word	0x0801cd97
 8005748:	0801cd4e 	.word	0x0801cd4e

0800574c <acc_sensor_protocol_r2_ack_event>:
 800574c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800574e:	466b      	mov	r3, sp
 8005750:	1d9c      	adds	r4, r3, #6
 8005752:	2300      	movs	r3, #0
 8005754:	0022      	movs	r2, r4
 8005756:	2138      	movs	r1, #56	; 0x38
 8005758:	0005      	movs	r5, r0
 800575a:	8023      	strh	r3, [r4, #0]
 800575c:	f007 fb48 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 8005760:	8824      	ldrh	r4, [r4, #0]
 8005762:	2001      	movs	r0, #1
 8005764:	2c00      	cmp	r4, #0
 8005766:	d10a      	bne.n	800577e <acc_sensor_protocol_r2_ack_event+0x32>
 8005768:	4b05      	ldr	r3, [pc, #20]	; (8005780 <acc_sensor_protocol_r2_ack_event+0x34>)
 800576a:	4a06      	ldr	r2, [pc, #24]	; (8005784 <acc_sensor_protocol_r2_ack_event+0x38>)
 800576c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800576e:	4906      	ldr	r1, [pc, #24]	; (8005788 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8005770:	002b      	movs	r3, r5
 8005772:	0020      	movs	r0, r4
 8005774:	47b0      	blx	r6
 8005776:	0028      	movs	r0, r5
 8005778:	f007 fb61 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800577c:	0020      	movs	r0, r4
 800577e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005780:	200002b0 	.word	0x200002b0
 8005784:	0801cdaf 	.word	0x0801cdaf
 8005788:	0801ccd2 	.word	0x0801ccd2

0800578c <acc_radar_engine_common_get_timeout_ms>:
 800578c:	b510      	push	{r4, lr}
 800578e:	0004      	movs	r4, r0
 8005790:	f7fd faa0 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 8005794:	2801      	cmp	r0, #1
 8005796:	d00c      	beq.n	80057b2 <acc_radar_engine_common_get_timeout_ms+0x26>
 8005798:	0020      	movs	r0, r4
 800579a:	f7fd fa85 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 800579e:	1c01      	adds	r1, r0, #0
 80057a0:	4805      	ldr	r0, [pc, #20]	; (80057b8 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 80057a2:	f008 ffe1 	bl	800e768 <__aeabi_fdiv>
 80057a6:	4904      	ldr	r1, [pc, #16]	; (80057b8 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 80057a8:	f008 fe44 	bl	800e434 <__aeabi_fadd>
 80057ac:	f009 fe2e 	bl	800f40c <__aeabi_f2uiz>
 80057b0:	bd10      	pop	{r4, pc}
 80057b2:	20fa      	movs	r0, #250	; 0xfa
 80057b4:	00c0      	lsls	r0, r0, #3
 80057b6:	e7fb      	b.n	80057b0 <acc_radar_engine_common_get_timeout_ms+0x24>
 80057b8:	44fa0000 	.word	0x44fa0000

080057bc <acc_radar_engine_acquire_adc_data>:
 80057bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057be:	4657      	mov	r7, sl
 80057c0:	464e      	mov	r6, r9
 80057c2:	4645      	mov	r5, r8
 80057c4:	46de      	mov	lr, fp
 80057c6:	2300      	movs	r3, #0
 80057c8:	b5e0      	push	{r5, r6, r7, lr}
 80057ca:	0005      	movs	r5, r0
 80057cc:	4698      	mov	r8, r3
 80057ce:	b08d      	sub	sp, #52	; 0x34
 80057d0:	4689      	mov	r9, r1
 80057d2:	4945      	ldr	r1, [pc, #276]	; (80058e8 <acc_radar_engine_acquire_adc_data+0x12c>)
 80057d4:	a806      	add	r0, sp, #24
 80057d6:	7093      	strb	r3, [r2, #2]
 80057d8:	70d3      	strb	r3, [r2, #3]
 80057da:	8013      	strh	r3, [r2, #0]
 80057dc:	7313      	strb	r3, [r2, #12]
 80057de:	7113      	strb	r3, [r2, #4]
 80057e0:	6091      	str	r1, [r2, #8]
 80057e2:	1d87      	adds	r7, r0, #6
 80057e4:	0014      	movs	r4, r2
 80057e6:	6828      	ldr	r0, [r5, #0]
 80057e8:	aa06      	add	r2, sp, #24
 80057ea:	71d3      	strb	r3, [r2, #7]
 80057ec:	703b      	strb	r3, [r7, #0]
 80057ee:	4682      	mov	sl, r0
 80057f0:	7ba8      	ldrb	r0, [r5, #14]
 80057f2:	3207      	adds	r2, #7
 80057f4:	9000      	str	r0, [sp, #0]
 80057f6:	7be8      	ldrb	r0, [r5, #15]
 80057f8:	9105      	str	r1, [sp, #20]
 80057fa:	9003      	str	r0, [sp, #12]
 80057fc:	89a8      	ldrh	r0, [r5, #12]
 80057fe:	9202      	str	r2, [sp, #8]
 8005800:	9001      	str	r0, [sp, #4]
 8005802:	6928      	ldr	r0, [r5, #16]
 8005804:	ae09      	add	r6, sp, #36	; 0x24
 8005806:	9004      	str	r0, [sp, #16]
 8005808:	4643      	mov	r3, r8
 800580a:	9a01      	ldr	r2, [sp, #4]
 800580c:	b29b      	uxth	r3, r3
 800580e:	429a      	cmp	r2, r3
 8005810:	d959      	bls.n	80058c6 <acc_radar_engine_acquire_adc_data+0x10a>
 8005812:	9b00      	ldr	r3, [sp, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00f      	beq.n	8005838 <acc_radar_engine_acquire_adc_data+0x7c>
 8005818:	69ab      	ldr	r3, [r5, #24]
 800581a:	9a02      	ldr	r2, [sp, #8]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	9904      	ldr	r1, [sp, #16]
 8005820:	4650      	mov	r0, sl
 8005822:	4798      	blx	r3
 8005824:	2800      	cmp	r0, #0
 8005826:	d10e      	bne.n	8005846 <acc_radar_engine_acquire_adc_data+0x8a>
 8005828:	2000      	movs	r0, #0
 800582a:	b00d      	add	sp, #52	; 0x34
 800582c:	bc3c      	pop	{r2, r3, r4, r5}
 800582e:	4690      	mov	r8, r2
 8005830:	4699      	mov	r9, r3
 8005832:	46a2      	mov	sl, r4
 8005834:	46ab      	mov	fp, r5
 8005836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005838:	69ab      	ldr	r3, [r5, #24]
 800583a:	4650      	mov	r0, sl
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583e:	4798      	blx	r3
 8005840:	2800      	cmp	r0, #0
 8005842:	d1e9      	bne.n	8005818 <acc_radar_engine_acquire_adc_data+0x5c>
 8005844:	e7f0      	b.n	8005828 <acc_radar_engine_acquire_adc_data+0x6c>
 8005846:	9b02      	ldr	r3, [sp, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d100      	bne.n	8005850 <acc_radar_engine_acquire_adc_data+0x94>
 800584e:	78a3      	ldrb	r3, [r4, #2]
 8005850:	70a3      	strb	r3, [r4, #2]
 8005852:	69ab      	ldr	r3, [r5, #24]
 8005854:	003a      	movs	r2, r7
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	4649      	mov	r1, r9
 800585a:	0028      	movs	r0, r5
 800585c:	4798      	blx	r3
 800585e:	2300      	movs	r3, #0
 8005860:	7033      	strb	r3, [r6, #0]
 8005862:	7233      	strb	r3, [r6, #8]
 8005864:	69ab      	ldr	r3, [r5, #24]
 8005866:	9a05      	ldr	r2, [sp, #20]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	9008      	str	r0, [sp, #32]
 800586c:	6072      	str	r2, [r6, #4]
 800586e:	469b      	mov	fp, r3
 8005870:	aa08      	add	r2, sp, #32
 8005872:	0033      	movs	r3, r6
 8005874:	4649      	mov	r1, r9
 8005876:	0028      	movs	r0, r5
 8005878:	47d8      	blx	fp
 800587a:	7a33      	ldrb	r3, [r6, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d100      	bne.n	8005882 <acc_radar_engine_acquire_adc_data+0xc6>
 8005880:	7b23      	ldrb	r3, [r4, #12]
 8005882:	7323      	strb	r3, [r4, #12]
 8005884:	7833      	ldrb	r3, [r6, #0]
 8005886:	469b      	mov	fp, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d100      	bne.n	800588e <acc_radar_engine_acquire_adc_data+0xd2>
 800588c:	7923      	ldrb	r3, [r4, #4]
 800588e:	7123      	strb	r3, [r4, #4]
 8005890:	68a1      	ldr	r1, [r4, #8]
 8005892:	6870      	ldr	r0, [r6, #4]
 8005894:	f00d feaa 	bl	80135ec <fmaxf>
 8005898:	783b      	ldrb	r3, [r7, #0]
 800589a:	60a0      	str	r0, [r4, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d100      	bne.n	80058a2 <acc_radar_engine_acquire_adc_data+0xe6>
 80058a0:	78e3      	ldrb	r3, [r4, #3]
 80058a2:	9a08      	ldr	r2, [sp, #32]
 80058a4:	70e3      	strb	r3, [r4, #3]
 80058a6:	4694      	mov	ip, r2
 80058a8:	8823      	ldrh	r3, [r4, #0]
 80058aa:	4659      	mov	r1, fp
 80058ac:	4463      	add	r3, ip
 80058ae:	8023      	strh	r3, [r4, #0]
 80058b0:	69ab      	ldr	r3, [r5, #24]
 80058b2:	0028      	movs	r0, r5
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	4798      	blx	r3
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <acc_radar_engine_acquire_adc_data+0x110>
 80058be:	9b01      	ldr	r3, [sp, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	4598      	cmp	r8, r3
 80058c4:	d102      	bne.n	80058cc <acc_radar_engine_acquire_adc_data+0x110>
 80058c6:	464b      	mov	r3, r9
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	e7ae      	b.n	800582a <acc_radar_engine_acquire_adc_data+0x6e>
 80058cc:	9b00      	ldr	r3, [sp, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d103      	bne.n	80058da <acc_radar_engine_acquire_adc_data+0x11e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	469c      	mov	ip, r3
 80058d6:	44e0      	add	r8, ip
 80058d8:	e796      	b.n	8005808 <acc_radar_engine_acquire_adc_data+0x4c>
 80058da:	69ab      	ldr	r3, [r5, #24]
 80058dc:	4650      	mov	r0, sl
 80058de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e0:	4798      	blx	r3
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1f5      	bne.n	80058d2 <acc_radar_engine_acquire_adc_data+0x116>
 80058e6:	e79f      	b.n	8005828 <acc_radar_engine_acquire_adc_data+0x6c>
 80058e8:	ff800000 	.word	0xff800000

080058ec <update_program.lto_priv.296>:
 80058ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ee:	6945      	ldr	r5, [r0, #20]
 80058f0:	2401      	movs	r4, #1
 80058f2:	002b      	movs	r3, r5
 80058f4:	33ba      	adds	r3, #186	; 0xba
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	4319      	orrs	r1, r3
 80058fa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058fc:	404c      	eors	r4, r1
 80058fe:	425a      	negs	r2, r3
 8005900:	4153      	adcs	r3, r2
 8005902:	428b      	cmp	r3, r1
 8005904:	d006      	beq.n	8005914 <update_program.lto_priv.296+0x28>
 8005906:	9400      	str	r4, [sp, #0]
 8005908:	23ef      	movs	r3, #239	; 0xef
 800590a:	4a04      	ldr	r2, [pc, #16]	; (800591c <update_program.lto_priv.296+0x30>)
 800590c:	4904      	ldr	r1, [pc, #16]	; (8005920 <update_program.lto_priv.296+0x34>)
 800590e:	6800      	ldr	r0, [r0, #0]
 8005910:	f005 fc0a 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 8005914:	642c      	str	r4, [r5, #64]	; 0x40
 8005916:	2001      	movs	r0, #1
 8005918:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	08016dc4 	.word	0x08016dc4
 8005920:	08018304 	.word	0x08018304

08005924 <transfer_data.lto_priv.300>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	000d      	movs	r5, r1
 8005928:	2100      	movs	r1, #0
 800592a:	6943      	ldr	r3, [r0, #20]
 800592c:	7011      	strb	r1, [r2, #0]
 800592e:	001a      	movs	r2, r3
 8005930:	33b8      	adds	r3, #184	; 0xb8
 8005932:	32b4      	adds	r2, #180	; 0xb4
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	8814      	ldrh	r4, [r2, #0]
 8005938:	6829      	ldr	r1, [r5, #0]
 800593a:	18e4      	adds	r4, r4, r3
 800593c:	0022      	movs	r2, r4
 800593e:	6800      	ldr	r0, [r0, #0]
 8005940:	f7ff fe80 	bl	8005644 <acc_sensor_protocol_r2_transfer_data>
 8005944:	0062      	lsls	r2, r4, #1
 8005946:	0001      	movs	r1, r0
 8005948:	6828      	ldr	r0, [r5, #0]
 800594a:	f010 f8c0 	bl	8015ace <memmove>
 800594e:	0020      	movs	r0, r4
 8005950:	bd70      	pop	{r4, r5, r6, pc}

08005952 <acc_radar_engine_sparse_create>:
 8005952:	22cd      	movs	r2, #205	; 0xcd
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	0052      	lsls	r2, r2, #1
 8005958:	0004      	movs	r4, r0
 800595a:	000d      	movs	r5, r1
 800595c:	20bc      	movs	r0, #188	; 0xbc
 800595e:	490f      	ldr	r1, [pc, #60]	; (800599c <acc_radar_engine_sparse_create+0x4a>)
 8005960:	f005 fb74 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 8005964:	2300      	movs	r3, #0
 8005966:	6160      	str	r0, [r4, #20]
 8005968:	4298      	cmp	r0, r3
 800596a:	d014      	beq.n	8005996 <acc_radar_engine_sparse_create+0x44>
 800596c:	0028      	movs	r0, r5
 800596e:	f7fd f9e2 	bl	8002d36 <acc_base_configuration_sensor_get>
 8005972:	6020      	str	r0, [r4, #0]
 8005974:	0028      	movs	r0, r5
 8005976:	f7fc fb85 	bl	8002084 <acc_base_configuration_asynchronous_measurement_get>
 800597a:	73a0      	strb	r0, [r4, #14]
 800597c:	0028      	movs	r0, r5
 800597e:	f7fd f9d0 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 8005982:	4243      	negs	r3, r0
 8005984:	4158      	adcs	r0, r3
 8005986:	73e0      	strb	r0, [r4, #15]
 8005988:	0028      	movs	r0, r5
 800598a:	f7ff feff 	bl	800578c <acc_radar_engine_common_get_timeout_ms>
 800598e:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <acc_radar_engine_sparse_create+0x4e>)
 8005990:	6120      	str	r0, [r4, #16]
 8005992:	61a3      	str	r3, [r4, #24]
 8005994:	2301      	movs	r3, #1
 8005996:	0018      	movs	r0, r3
 8005998:	bd70      	pop	{r4, r5, r6, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	0801cde0 	.word	0x0801cde0
 80059a0:	08015bdc 	.word	0x08015bdc

080059a4 <acc_radar_engine_linear_create>:
 80059a4:	222c      	movs	r2, #44	; 0x2c
 80059a6:	b570      	push	{r4, r5, r6, lr}
 80059a8:	32ff      	adds	r2, #255	; 0xff
 80059aa:	0004      	movs	r4, r0
 80059ac:	000d      	movs	r5, r1
 80059ae:	20d4      	movs	r0, #212	; 0xd4
 80059b0:	490f      	ldr	r1, [pc, #60]	; (80059f0 <acc_radar_engine_linear_create+0x4c>)
 80059b2:	f005 fb4b 	bl	800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>
 80059b6:	2300      	movs	r3, #0
 80059b8:	6160      	str	r0, [r4, #20]
 80059ba:	4298      	cmp	r0, r3
 80059bc:	d015      	beq.n	80059ea <acc_radar_engine_linear_create+0x46>
 80059be:	0028      	movs	r0, r5
 80059c0:	f7fd f9b9 	bl	8002d36 <acc_base_configuration_sensor_get>
 80059c4:	6020      	str	r0, [r4, #0]
 80059c6:	0028      	movs	r0, r5
 80059c8:	f7fc fb5c 	bl	8002084 <acc_base_configuration_asynchronous_measurement_get>
 80059cc:	73a0      	strb	r0, [r4, #14]
 80059ce:	0028      	movs	r0, r5
 80059d0:	f7fd f9a7 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 80059d4:	4243      	negs	r3, r0
 80059d6:	4158      	adcs	r0, r3
 80059d8:	73e0      	strb	r0, [r4, #15]
 80059da:	0028      	movs	r0, r5
 80059dc:	f7ff fed6 	bl	800578c <acc_radar_engine_common_get_timeout_ms>
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <acc_radar_engine_linear_create+0x50>)
 80059e2:	6120      	str	r0, [r4, #16]
 80059e4:	3338      	adds	r3, #56	; 0x38
 80059e6:	61a3      	str	r3, [r4, #24]
 80059e8:	2301      	movs	r3, #1
 80059ea:	0018      	movs	r0, r3
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	0801ce12 	.word	0x0801ce12
 80059f4:	08015bdc 	.word	0x08015bdc

080059f8 <transfer_data.lto_priv.299>:
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	4657      	mov	r7, sl
 80059fc:	464e      	mov	r6, r9
 80059fe:	4645      	mov	r5, r8
 8005a00:	46de      	mov	lr, fp
 8005a02:	6944      	ldr	r4, [r0, #20]
 8005a04:	b5e0      	push	{r5, r6, r7, lr}
 8005a06:	0023      	movs	r3, r4
 8005a08:	0025      	movs	r5, r4
 8005a0a:	b08d      	sub	sp, #52	; 0x34
 8005a0c:	9204      	str	r2, [sp, #16]
 8005a0e:	33c2      	adds	r3, #194	; 0xc2
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	0006      	movs	r6, r0
 8005a14:	468a      	mov	sl, r1
 8005a16:	35c6      	adds	r5, #198	; 0xc6
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d100      	bne.n	8005a1e <transfer_data.lto_priv.299+0x26>
 8005a1c:	802b      	strh	r3, [r5, #0]
 8005a1e:	23cc      	movs	r3, #204	; 0xcc
 8005a20:	469b      	mov	fp, r3
 8005a22:	44a3      	add	fp, r4
 8005a24:	465b      	mov	r3, fp
 8005a26:	207c      	movs	r0, #124	; 0x7c
 8005a28:	8819      	ldrh	r1, [r3, #0]
 8005a2a:	f009 fae1 	bl	800eff0 <__udivsi3>
 8005a2e:	23c8      	movs	r3, #200	; 0xc8
 8005a30:	4699      	mov	r9, r3
 8005a32:	44a1      	add	r9, r4
 8005a34:	464b      	mov	r3, r9
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	a906      	add	r1, sp, #24
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	4358      	muls	r0, r3
 8005a3e:	0023      	movs	r3, r4
 8005a40:	4680      	mov	r8, r0
 8005a42:	33ce      	adds	r3, #206	; 0xce
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	0020      	movs	r0, r4
 8005a48:	4498      	add	r8, r3
 8005a4a:	f007 fd8b 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 8005a4e:	9b06      	ldr	r3, [sp, #24]
 8005a50:	8829      	ldrh	r1, [r5, #0]
 8005a52:	4443      	add	r3, r8
 8005a54:	001a      	movs	r2, r3
 8005a56:	4653      	mov	r3, sl
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6830      	ldr	r0, [r6, #0]
 8005a5c:	469c      	mov	ip, r3
 8005a5e:	4461      	add	r1, ip
 8005a60:	f7ff fdf0 	bl	8005644 <acc_sensor_protocol_r2_transfer_data>
 8005a64:	0023      	movs	r3, r4
 8005a66:	33ad      	adds	r3, #173	; 0xad
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	0006      	movs	r6, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d128      	bne.n	8005ac2 <transfer_data.lto_priv.299+0xca>
 8005a70:	2300      	movs	r3, #0
 8005a72:	9a04      	ldr	r2, [sp, #16]
 8005a74:	a906      	add	r1, sp, #24
 8005a76:	7013      	strb	r3, [r2, #0]
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f007 fd73 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 8005a7e:	4643      	mov	r3, r8
 8005a80:	4650      	mov	r0, sl
 8005a82:	005a      	lsls	r2, r3, #1
 8005a84:	9b06      	ldr	r3, [sp, #24]
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	0059      	lsls	r1, r3, #1
 8005a8a:	882b      	ldrh	r3, [r5, #0]
 8005a8c:	1871      	adds	r1, r6, r1
 8005a8e:	18c0      	adds	r0, r0, r3
 8005a90:	f010 f81d 	bl	8015ace <memmove>
 8005a94:	464b      	mov	r3, r9
 8005a96:	882e      	ldrh	r6, [r5, #0]
 8005a98:	34c4      	adds	r4, #196	; 0xc4
 8005a9a:	8026      	strh	r6, [r4, #0]
 8005a9c:	681c      	ldr	r4, [r3, #0]
 8005a9e:	465b      	mov	r3, fp
 8005aa0:	207c      	movs	r0, #124	; 0x7c
 8005aa2:	8819      	ldrh	r1, [r3, #0]
 8005aa4:	f009 faa4 	bl	800eff0 <__udivsi3>
 8005aa8:	b2a4      	uxth	r4, r4
 8005aaa:	0064      	lsls	r4, r4, #1
 8005aac:	4344      	muls	r4, r0
 8005aae:	4640      	mov	r0, r8
 8005ab0:	1936      	adds	r6, r6, r4
 8005ab2:	802e      	strh	r6, [r5, #0]
 8005ab4:	b00d      	add	sp, #52	; 0x34
 8005ab6:	bc3c      	pop	{r2, r3, r4, r5}
 8005ab8:	4690      	mov	r8, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	46a2      	mov	sl, r4
 8005abe:	46ab      	mov	fp, r5
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac2:	0022      	movs	r2, r4
 8005ac4:	211f      	movs	r1, #31
 8005ac6:	32bc      	adds	r2, #188	; 0xbc
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	400b      	ands	r3, r1
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4a3f      	ldr	r2, [pc, #252]	; (8005bd0 <transfer_data.lto_priv.299+0x1d8>)
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	3130      	adds	r1, #48	; 0x30
 8005ad6:	7809      	ldrb	r1, [r1, #0]
 8005ad8:	2903      	cmp	r1, #3
 8005ada:	d904      	bls.n	8005ae6 <transfer_data.lto_priv.299+0xee>
 8005adc:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005ade:	493d      	ldr	r1, [pc, #244]	; (8005bd4 <transfer_data.lto_priv.299+0x1dc>)
 8005ae0:	4a3d      	ldr	r2, [pc, #244]	; (8005bd8 <transfer_data.lto_priv.299+0x1e0>)
 8005ae2:	2004      	movs	r0, #4
 8005ae4:	47b8      	blx	r7
 8005ae6:	6a23      	ldr	r3, [r4, #32]
 8005ae8:	4a3c      	ldr	r2, [pc, #240]	; (8005bdc <transfer_data.lto_priv.299+0x1e4>)
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	3270      	adds	r2, #112	; 0x70
 8005af0:	5e98      	ldrsh	r0, [r3, r2]
 8005af2:	f009 fe7f 	bl	800f7f4 <__aeabi_i2f>
 8005af6:	1c07      	adds	r7, r0, #0
 8005af8:	8830      	ldrh	r0, [r6, #0]
 8005afa:	f009 fec5 	bl	800f888 <__aeabi_ui2f>
 8005afe:	21de      	movs	r1, #222	; 0xde
 8005b00:	0589      	lsls	r1, r1, #22
 8005b02:	f008 ff43 	bl	800e98c <__aeabi_fmul>
 8005b06:	21fc      	movs	r1, #252	; 0xfc
 8005b08:	0589      	lsls	r1, r1, #22
 8005b0a:	f009 f871 	bl	800ebf0 <__aeabi_fsub>
 8005b0e:	4934      	ldr	r1, [pc, #208]	; (8005be0 <transfer_data.lto_priv.299+0x1e8>)
 8005b10:	f008 ff3c 	bl	800e98c <__aeabi_fmul>
 8005b14:	4933      	ldr	r1, [pc, #204]	; (8005be4 <transfer_data.lto_priv.299+0x1ec>)
 8005b16:	f008 ff39 	bl	800e98c <__aeabi_fmul>
 8005b1a:	1c01      	adds	r1, r0, #0
 8005b1c:	1c38      	adds	r0, r7, #0
 8005b1e:	f009 f867 	bl	800ebf0 <__aeabi_fsub>
 8005b22:	f009 fe47 	bl	800f7b4 <__aeabi_f2iz>
 8005b26:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <transfer_data.lto_priv.299+0x1f0>)
 8005b28:	b207      	sxth	r7, r0
 8005b2a:	b2bb      	uxth	r3, r7
 8005b2c:	189a      	adds	r2, r3, r2
 8005b2e:	492f      	ldr	r1, [pc, #188]	; (8005bec <transfer_data.lto_priv.299+0x1f4>)
 8005b30:	b292      	uxth	r2, r2
 8005b32:	428a      	cmp	r2, r1
 8005b34:	d82a      	bhi.n	8005b8c <transfer_data.lto_priv.299+0x194>
 8005b36:	2126      	movs	r1, #38	; 0x26
 8005b38:	5e62      	ldrsh	r2, [r4, r1]
 8005b3a:	8870      	ldrh	r0, [r6, #2]
 8005b3c:	9203      	str	r2, [sp, #12]
 8005b3e:	4a2c      	ldr	r2, [pc, #176]	; (8005bf0 <transfer_data.lto_priv.299+0x1f8>)
 8005b40:	4694      	mov	ip, r2
 8005b42:	22e6      	movs	r2, #230	; 0xe6
 8005b44:	4463      	add	r3, ip
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	0052      	lsls	r2, r2, #1
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d924      	bls.n	8005b98 <transfer_data.lto_priv.299+0x1a0>
 8005b4e:	f009 fe9b 	bl	800f888 <__aeabi_ui2f>
 8005b52:	21de      	movs	r1, #222	; 0xde
 8005b54:	0589      	lsls	r1, r1, #22
 8005b56:	f008 ff19 	bl	800e98c <__aeabi_fmul>
 8005b5a:	21fc      	movs	r1, #252	; 0xfc
 8005b5c:	0589      	lsls	r1, r1, #22
 8005b5e:	f009 f847 	bl	800ebf0 <__aeabi_fsub>
 8005b62:	491f      	ldr	r1, [pc, #124]	; (8005be0 <transfer_data.lto_priv.299+0x1e8>)
 8005b64:	f008 ff12 	bl	800e98c <__aeabi_fmul>
 8005b68:	491e      	ldr	r1, [pc, #120]	; (8005be4 <transfer_data.lto_priv.299+0x1ec>)
 8005b6a:	f008 ff0f 	bl	800e98c <__aeabi_fmul>
 8005b6e:	9005      	str	r0, [sp, #20]
 8005b70:	0038      	movs	r0, r7
 8005b72:	f009 fe3f 	bl	800f7f4 <__aeabi_i2f>
 8005b76:	1c01      	adds	r1, r0, #0
 8005b78:	9805      	ldr	r0, [sp, #20]
 8005b7a:	f008 fc5b 	bl	800e434 <__aeabi_fadd>
 8005b7e:	f009 fe19 	bl	800f7b4 <__aeabi_f2iz>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	b200      	sxth	r0, r0
 8005b86:	3364      	adds	r3, #100	; 0x64
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	dd05      	ble.n	8005b98 <transfer_data.lto_priv.299+0x1a0>
 8005b8c:	0022      	movs	r2, r4
 8005b8e:	2301      	movs	r3, #1
 8005b90:	32bc      	adds	r2, #188	; 0xbc
 8005b92:	6811      	ldr	r1, [r2, #0]
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	0023      	movs	r3, r4
 8005b9a:	33bc      	adds	r3, #188	; 0xbc
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d111      	bne.n	8005bc8 <transfer_data.lto_priv.299+0x1d0>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d800      	bhi.n	8005baa <transfer_data.lto_priv.299+0x1b2>
 8005ba8:	e762      	b.n	8005a70 <transfer_data.lto_priv.299+0x78>
 8005baa:	4a09      	ldr	r2, [pc, #36]	; (8005bd0 <transfer_data.lto_priv.299+0x1d8>)
 8005bac:	0011      	movs	r1, r2
 8005bae:	3130      	adds	r1, #48	; 0x30
 8005bb0:	7809      	ldrb	r1, [r1, #0]
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d006      	beq.n	8005bc4 <transfer_data.lto_priv.299+0x1cc>
 8005bb6:	2105      	movs	r1, #5
 8005bb8:	9100      	str	r1, [sp, #0]
 8005bba:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005bbc:	4905      	ldr	r1, [pc, #20]	; (8005bd4 <transfer_data.lto_priv.299+0x1dc>)
 8005bbe:	4a0d      	ldr	r2, [pc, #52]	; (8005bf4 <transfer_data.lto_priv.299+0x1fc>)
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	47b8      	blx	r7
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e754      	b.n	8005a72 <transfer_data.lto_priv.299+0x7a>
 8005bc8:	1e51      	subs	r1, r2, #1
 8005bca:	400a      	ands	r2, r1
 8005bcc:	3301      	adds	r3, #1
 8005bce:	e7e7      	b.n	8005ba0 <transfer_data.lto_priv.299+0x1a8>
 8005bd0:	200002b0 	.word	0x200002b0
 8005bd4:	0801ce5b 	.word	0x0801ce5b
 8005bd8:	0801ce44 	.word	0x0801ce44
 8005bdc:	08015bdc 	.word	0x08015bdc
 8005be0:	3f99999a 	.word	0x3f99999a
 8005be4:	447a0000 	.word	0x447a0000
 8005be8:	fffffd12 	.word	0xfffffd12
 8005bec:	00000217 	.word	0x00000217
 8005bf0:	fffffcf4 	.word	0xfffffcf4
 8005bf4:	0801ce6c 	.word	0x0801ce6c

08005bf8 <inject_data.lto_priv.327.lto_priv.649>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	3038      	adds	r0, #56	; 0x38
 8005bfc:	f008 fb42 	bl	800e284 <acc_element_source_adc_inject_data>
 8005c00:	bd10      	pop	{r4, pc}

08005c02 <inject_data.lto_priv.326.lto_priv.633>:
 8005c02:	b510      	push	{r4, lr}
 8005c04:	3038      	adds	r0, #56	; 0x38
 8005c06:	f008 fb3d 	bl	800e284 <acc_element_source_adc_inject_data>
 8005c0a:	bd10      	pop	{r4, pc}

08005c0c <produce.lto_priv.329.lto_priv.648>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	0004      	movs	r4, r0
 8005c10:	3038      	adds	r0, #56	; 0x38
 8005c12:	f008 fb4b 	bl	800e2ac <acc_element_source_adc_produce>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d10c      	bne.n	8005c34 <produce.lto_priv.329.lto_priv.648+0x28>
 8005c1a:	23e0      	movs	r3, #224	; 0xe0
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	58e3      	ldr	r3, [r4, r3]
 8005c22:	6158      	str	r0, [r3, #20]
 8005c24:	7198      	strb	r0, [r3, #6]
 8005c26:	715a      	strb	r2, [r3, #5]
 8005c28:	23d2      	movs	r3, #210	; 0xd2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	18e0      	adds	r0, r4, r3
 8005c2e:	3304      	adds	r3, #4
 8005c30:	58e3      	ldr	r3, [r4, r3]
 8005c32:	4798      	blx	r3
 8005c34:	bd10      	pop	{r4, pc}

08005c36 <produce.lto_priv.328.lto_priv.632>:
 8005c36:	b510      	push	{r4, lr}
 8005c38:	0004      	movs	r4, r0
 8005c3a:	3038      	adds	r0, #56	; 0x38
 8005c3c:	f008 fb36 	bl	800e2ac <acc_element_source_adc_produce>
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d10b      	bne.n	8005c5c <produce.lto_priv.328.lto_priv.632+0x26>
 8005c44:	0023      	movs	r3, r4
 8005c46:	33f0      	adds	r3, #240	; 0xf0
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	6158      	str	r0, [r3, #20]
 8005c4e:	7198      	strb	r0, [r3, #6]
 8005c50:	0020      	movs	r0, r4
 8005c52:	34bc      	adds	r4, #188	; 0xbc
 8005c54:	715a      	strb	r2, [r3, #5]
 8005c56:	30b8      	adds	r0, #184	; 0xb8
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	4798      	blx	r3
 8005c5c:	bd10      	pop	{r4, pc}

08005c5e <acc_assert_fail>:
 8005c5e:	b513      	push	{r0, r1, r4, lr}
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <acc_assert_fail+0x16>)
 8005c62:	9100      	str	r1, [sp, #0]
 8005c64:	0003      	movs	r3, r0
 8005c66:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005c68:	4903      	ldr	r1, [pc, #12]	; (8005c78 <acc_assert_fail+0x1a>)
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <acc_assert_fail+0x1e>)
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	47a0      	blx	r4
 8005c70:	e7fe      	b.n	8005c70 <acc_assert_fail+0x12>
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	200002b0 	.word	0x200002b0
 8005c78:	0801cebc 	.word	0x0801cebc
 8005c7c:	0801cea7 	.word	0x0801cea7

08005c80 <do_phase_compensation_q3_12.lto_priv.263>:
 8005c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c82:	4657      	mov	r7, sl
 8005c84:	4645      	mov	r5, r8
 8005c86:	46de      	mov	lr, fp
 8005c88:	464e      	mov	r6, r9
 8005c8a:	b5e0      	push	{r5, r6, r7, lr}
 8005c8c:	4c6b      	ldr	r4, [pc, #428]	; (8005e3c <do_phase_compensation_q3_12.lto_priv.263+0x1bc>)
 8005c8e:	0017      	movs	r7, r2
 8005c90:	44a5      	add	sp, r4
 8005c92:	9102      	str	r1, [sp, #8]
 8005c94:	4698      	mov	r8, r3
 8005c96:	2a7c      	cmp	r2, #124	; 0x7c
 8005c98:	d816      	bhi.n	8005cc8 <do_phase_compensation_q3_12.lto_priv.263+0x48>
 8005c9a:	0093      	lsls	r3, r2, #2
 8005c9c:	469b      	mov	fp, r3
 8005c9e:	ab80      	add	r3, sp, #512	; 0x200
 8005ca0:	445b      	add	r3, fp
 8005ca2:	3bf7      	subs	r3, #247	; 0xf7
 8005ca4:	3bff      	subs	r3, #255	; 0xff
 8005ca6:	9301      	str	r3, [sp, #4]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	0005      	movs	r5, r0
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	9a00      	ldr	r2, [sp, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d10c      	bne.n	8005cd0 <do_phase_compensation_q3_12.lto_priv.263+0x50>
 8005cb6:	2381      	movs	r3, #129	; 0x81
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	449d      	add	sp, r3
 8005cbc:	bc3c      	pop	{r2, r3, r4, r5}
 8005cbe:	4690      	mov	r8, r2
 8005cc0:	4699      	mov	r9, r3
 8005cc2:	46a2      	mov	sl, r4
 8005cc4:	46ab      	mov	fp, r5
 8005cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc8:	217d      	movs	r1, #125	; 0x7d
 8005cca:	485d      	ldr	r0, [pc, #372]	; (8005e40 <do_phase_compensation_q3_12.lto_priv.263+0x1c0>)
 8005ccc:	f7ff ffc7 	bl	8005c5e <acc_assert_fail>
 8005cd0:	465a      	mov	r2, fp
 8005cd2:	0029      	movs	r1, r5
 8005cd4:	a804      	add	r0, sp, #16
 8005cd6:	f00f fef1 	bl	8015abc <memcpy>
 8005cda:	a980      	add	r1, sp, #512	; 0x200
 8005cdc:	468c      	mov	ip, r1
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2401      	movs	r4, #1
 8005ce2:	1e78      	subs	r0, r7, #1
 8005ce4:	0083      	lsls	r3, r0, #2
 8005ce6:	4463      	add	r3, ip
 8005ce8:	3bf1      	subs	r3, #241	; 0xf1
 8005cea:	3bff      	subs	r3, #255	; 0xff
 8005cec:	9204      	str	r2, [sp, #16]
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	aa04      	add	r2, sp, #16
 8005cf2:	42a7      	cmp	r7, r4
 8005cf4:	d80f      	bhi.n	8005d16 <do_phase_compensation_q3_12.lto_priv.263+0x96>
 8005cf6:	9a01      	ldr	r2, [sp, #4]
 8005cf8:	3a04      	subs	r2, #4
 8005cfa:	3801      	subs	r0, #1
 8005cfc:	d22e      	bcs.n	8005d5c <do_phase_compensation_q3_12.lto_priv.263+0xdc>
 8005cfe:	2400      	movs	r4, #0
 8005d00:	45a3      	cmp	fp, r4
 8005d02:	d148      	bne.n	8005d96 <do_phase_compensation_q3_12.lto_priv.263+0x116>
 8005d04:	0029      	movs	r1, r5
 8005d06:	2200      	movs	r2, #0
 8005d08:	42a2      	cmp	r2, r4
 8005d0a:	d172      	bne.n	8005df2 <do_phase_compensation_q3_12.lto_priv.263+0x172>
 8005d0c:	9b00      	ldr	r3, [sp, #0]
 8005d0e:	18ad      	adds	r5, r5, r2
 8005d10:	3301      	adds	r3, #1
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	e7cb      	b.n	8005cae <do_phase_compensation_q3_12.lto_priv.263+0x2e>
 8005d16:	2100      	movs	r1, #0
 8005d18:	5e53      	ldrsh	r3, [r2, r1]
 8005d1a:	3401      	adds	r4, #1
 8005d1c:	469c      	mov	ip, r3
 8005d1e:	2304      	movs	r3, #4
 8005d20:	5ed1      	ldrsh	r1, [r2, r3]
 8005d22:	4663      	mov	r3, ip
 8005d24:	1ac9      	subs	r1, r1, r3
 8005d26:	4643      	mov	r3, r8
 8005d28:	4359      	muls	r1, r3
 8005d2a:	17cb      	asrs	r3, r1, #31
 8005d2c:	051b      	lsls	r3, r3, #20
 8005d2e:	0d1b      	lsrs	r3, r3, #20
 8005d30:	185b      	adds	r3, r3, r1
 8005d32:	131b      	asrs	r3, r3, #12
 8005d34:	4463      	add	r3, ip
 8005d36:	8093      	strh	r3, [r2, #4]
 8005d38:	2102      	movs	r1, #2
 8005d3a:	5e53      	ldrsh	r3, [r2, r1]
 8005d3c:	3204      	adds	r2, #4
 8005d3e:	469c      	mov	ip, r3
 8005d40:	2302      	movs	r3, #2
 8005d42:	5ed1      	ldrsh	r1, [r2, r3]
 8005d44:	4663      	mov	r3, ip
 8005d46:	1ac9      	subs	r1, r1, r3
 8005d48:	4643      	mov	r3, r8
 8005d4a:	4359      	muls	r1, r3
 8005d4c:	17cb      	asrs	r3, r1, #31
 8005d4e:	051b      	lsls	r3, r3, #20
 8005d50:	0d1b      	lsrs	r3, r3, #20
 8005d52:	185b      	adds	r3, r3, r1
 8005d54:	131b      	asrs	r3, r3, #12
 8005d56:	4463      	add	r3, ip
 8005d58:	8053      	strh	r3, [r2, #2]
 8005d5a:	e7ca      	b.n	8005cf2 <do_phase_compensation_q3_12.lto_priv.263+0x72>
 8005d5c:	2306      	movs	r3, #6
 8005d5e:	5ed1      	ldrsh	r1, [r2, r3]
 8005d60:	2302      	movs	r3, #2
 8005d62:	5ed4      	ldrsh	r4, [r2, r3]
 8005d64:	4643      	mov	r3, r8
 8005d66:	1a64      	subs	r4, r4, r1
 8005d68:	435c      	muls	r4, r3
 8005d6a:	17e3      	asrs	r3, r4, #31
 8005d6c:	051b      	lsls	r3, r3, #20
 8005d6e:	0d1b      	lsrs	r3, r3, #20
 8005d70:	191b      	adds	r3, r3, r4
 8005d72:	131b      	asrs	r3, r3, #12
 8005d74:	185b      	adds	r3, r3, r1
 8005d76:	8053      	strh	r3, [r2, #2]
 8005d78:	2308      	movs	r3, #8
 8005d7a:	5ed1      	ldrsh	r1, [r2, r3]
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	5ed4      	ldrsh	r4, [r2, r3]
 8005d80:	4643      	mov	r3, r8
 8005d82:	1a64      	subs	r4, r4, r1
 8005d84:	435c      	muls	r4, r3
 8005d86:	17e3      	asrs	r3, r4, #31
 8005d88:	051b      	lsls	r3, r3, #20
 8005d8a:	0d1b      	lsrs	r3, r3, #20
 8005d8c:	191b      	adds	r3, r3, r4
 8005d8e:	131b      	asrs	r3, r3, #12
 8005d90:	185b      	adds	r3, r3, r1
 8005d92:	8093      	strh	r3, [r2, #4]
 8005d94:	e7b0      	b.n	8005cf8 <do_phase_compensation_q3_12.lto_priv.263+0x78>
 8005d96:	a904      	add	r1, sp, #16
 8005d98:	468c      	mov	ip, r1
 8005d9a:	0022      	movs	r2, r4
 8005d9c:	4462      	add	r2, ip
 8005d9e:	8850      	ldrh	r0, [r2, #2]
 8005da0:	ab04      	add	r3, sp, #16
 8005da2:	5b1b      	ldrh	r3, [r3, r4]
 8005da4:	0400      	lsls	r0, r0, #16
 8005da6:	4318      	orrs	r0, r3
 8005da8:	f006 ffee 	bl	800cd88 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8005dac:	4681      	mov	r9, r0
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d01d      	beq.n	8005dee <do_phase_compensation_q3_12.lto_priv.263+0x16e>
 8005db2:	ab04      	add	r3, sp, #16
 8005db4:	5ee0      	ldrsh	r0, [r4, r3]
 8005db6:	4649      	mov	r1, r9
 8005db8:	0300      	lsls	r0, r0, #12
 8005dba:	f009 f9a3 	bl	800f104 <__divsi3>
 8005dbe:	aa04      	add	r2, sp, #16
 8005dc0:	b203      	sxth	r3, r0
 8005dc2:	4694      	mov	ip, r2
 8005dc4:	469a      	mov	sl, r3
 8005dc6:	0023      	movs	r3, r4
 8005dc8:	4463      	add	r3, ip
 8005dca:	2002      	movs	r0, #2
 8005dcc:	5e18      	ldrsh	r0, [r3, r0]
 8005dce:	4649      	mov	r1, r9
 8005dd0:	0300      	lsls	r0, r0, #12
 8005dd2:	4240      	negs	r0, r0
 8005dd4:	f009 f996 	bl	800f104 <__divsi3>
 8005dd8:	b200      	sxth	r0, r0
 8005dda:	aa04      	add	r2, sp, #16
 8005ddc:	0023      	movs	r3, r4
 8005dde:	4694      	mov	ip, r2
 8005de0:	4463      	add	r3, ip
 8005de2:	8058      	strh	r0, [r3, #2]
 8005de4:	0013      	movs	r3, r2
 8005de6:	4652      	mov	r2, sl
 8005de8:	52e2      	strh	r2, [r4, r3]
 8005dea:	3404      	adds	r4, #4
 8005dec:	e788      	b.n	8005d00 <do_phase_compensation_q3_12.lto_priv.263+0x80>
 8005dee:	4682      	mov	sl, r0
 8005df0:	e7f3      	b.n	8005dda <do_phase_compensation_q3_12.lto_priv.263+0x15a>
 8005df2:	2000      	movs	r0, #0
 8005df4:	5e0b      	ldrsh	r3, [r1, r0]
 8005df6:	4699      	mov	r9, r3
 8005df8:	ab04      	add	r3, sp, #16
 8005dfa:	5ed3      	ldrsh	r3, [r2, r3]
 8005dfc:	2602      	movs	r6, #2
 8005dfe:	5f88      	ldrsh	r0, [r1, r6]
 8005e00:	ae04      	add	r6, sp, #16
 8005e02:	46b4      	mov	ip, r6
 8005e04:	4682      	mov	sl, r0
 8005e06:	0010      	movs	r0, r2
 8005e08:	4460      	add	r0, ip
 8005e0a:	2602      	movs	r6, #2
 8005e0c:	5f80      	ldrsh	r0, [r0, r6]
 8005e0e:	3204      	adds	r2, #4
 8005e10:	4684      	mov	ip, r0
 8005e12:	4648      	mov	r0, r9
 8005e14:	4358      	muls	r0, r3
 8005e16:	4666      	mov	r6, ip
 8005e18:	9003      	str	r0, [sp, #12]
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	4370      	muls	r0, r6
 8005e1e:	9e03      	ldr	r6, [sp, #12]
 8005e20:	1a30      	subs	r0, r6, r0
 8005e22:	1300      	asrs	r0, r0, #12
 8005e24:	8008      	strh	r0, [r1, #0]
 8005e26:	4650      	mov	r0, sl
 8005e28:	4666      	mov	r6, ip
 8005e2a:	4343      	muls	r3, r0
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	4370      	muls	r0, r6
 8005e30:	181b      	adds	r3, r3, r0
 8005e32:	131b      	asrs	r3, r3, #12
 8005e34:	804b      	strh	r3, [r1, #2]
 8005e36:	3104      	adds	r1, #4
 8005e38:	e766      	b.n	8005d08 <do_phase_compensation_q3_12.lto_priv.263+0x88>
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	fffffdfc 	.word	0xfffffdfc
 8005e40:	0801cec7 	.word	0x0801cec7

08005e44 <get_package_range_coarse_max>:
 8005e44:	0003      	movs	r3, r0
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	33cc      	adds	r3, #204	; 0xcc
 8005e4a:	881d      	ldrh	r5, [r3, #0]
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	d104      	bne.n	8005e5c <get_package_range_coarse_max+0x18>
 8005e52:	2158      	movs	r1, #88	; 0x58
 8005e54:	480c      	ldr	r0, [pc, #48]	; (8005e88 <get_package_range_coarse_max+0x44>)
 8005e56:	31ff      	adds	r1, #255	; 0xff
 8005e58:	f7ff ff01 	bl	8005c5e <acc_assert_fail>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	2480      	movs	r4, #128	; 0x80
 8005e60:	33ce      	adds	r3, #206	; 0xce
 8005e62:	4669      	mov	r1, sp
 8005e64:	881e      	ldrh	r6, [r3, #0]
 8005e66:	f007 fb7d 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 8005e6a:	9b00      	ldr	r3, [sp, #0]
 8005e6c:	0029      	movs	r1, r5
 8005e6e:	0124      	lsls	r4, r4, #4
 8005e70:	207c      	movs	r0, #124	; 0x7c
 8005e72:	1ae4      	subs	r4, r4, r3
 8005e74:	f009 f8bc 	bl	800eff0 <__udivsi3>
 8005e78:	1ba4      	subs	r4, r4, r6
 8005e7a:	0001      	movs	r1, r0
 8005e7c:	0020      	movs	r0, r4
 8005e7e:	f009 f8b7 	bl	800eff0 <__udivsi3>
 8005e82:	b006      	add	sp, #24
 8005e84:	bd70      	pop	{r4, r5, r6, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	0801ce12 	.word	0x0801ce12

08005e8c <coarse_count_for_next_package>:
 8005e8c:	b570      	push	{r4, r5, r6, lr}
 8005e8e:	0004      	movs	r4, r0
 8005e90:	6940      	ldr	r0, [r0, #20]
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	0002      	movs	r2, r0
 8005e96:	32c2      	adds	r2, #194	; 0xc2
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d002      	beq.n	8005ea8 <coarse_count_for_next_package+0x1c>
 8005ea2:	f7ff ffcf 	bl	8005e44 <get_package_range_coarse_max>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	8965      	ldrh	r5, [r4, #10]
 8005eaa:	f7ff ffcb 	bl	8005e44 <get_package_range_coarse_max>
 8005eae:	0001      	movs	r1, r0
 8005eb0:	0028      	movs	r0, r5
 8005eb2:	f009 f923 	bl	800f0fc <__aeabi_uidivmod>
 8005eb6:	1e08      	subs	r0, r1, #0
 8005eb8:	d1f5      	bne.n	8005ea6 <coarse_count_for_next_package+0x1a>
 8005eba:	6960      	ldr	r0, [r4, #20]
 8005ebc:	e7f1      	b.n	8005ea2 <coarse_count_for_next_package+0x16>

08005ebe <update_program.lto_priv.295>:
 8005ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec0:	4657      	mov	r7, sl
 8005ec2:	464e      	mov	r6, r9
 8005ec4:	4645      	mov	r5, r8
 8005ec6:	46de      	mov	lr, fp
 8005ec8:	b5e0      	push	{r5, r6, r7, lr}
 8005eca:	6944      	ldr	r4, [r0, #20]
 8005ecc:	000f      	movs	r7, r1
 8005ece:	0006      	movs	r6, r0
 8005ed0:	8981      	ldrh	r1, [r0, #12]
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	4288      	cmp	r0, r1
 8005ed6:	419b      	sbcs	r3, r3
 8005ed8:	425b      	negs	r3, r3
 8005eda:	4698      	mov	r8, r3
 8005edc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005ede:	b085      	sub	sp, #20
 8005ee0:	425a      	negs	r2, r3
 8005ee2:	4153      	adcs	r3, r2
 8005ee4:	22c0      	movs	r2, #192	; 0xc0
 8005ee6:	4691      	mov	r9, r2
 8005ee8:	44a1      	add	r9, r4
 8005eea:	464a      	mov	r2, r9
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	001d      	movs	r5, r3
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	433a      	orrs	r2, r7
 8005ef4:	4055      	eors	r5, r2
 8005ef6:	46aa      	mov	sl, r5
 8005ef8:	4281      	cmp	r1, r0
 8005efa:	d808      	bhi.n	8005f0e <update_program.lto_priv.295+0x50>
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d136      	bne.n	8005f6e <update_program.lto_priv.295+0xb0>
 8005f00:	b005      	add	sp, #20
 8005f02:	bc3c      	pop	{r2, r3, r4, r5}
 8005f04:	4690      	mov	r8, r2
 8005f06:	4699      	mov	r9, r3
 8005f08:	46a2      	mov	sl, r4
 8005f0a:	46ab      	mov	fp, r5
 8005f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f0e:	0025      	movs	r5, r4
 8005f10:	35c2      	adds	r5, #194	; 0xc2
 8005f12:	8828      	ldrh	r0, [r5, #0]
 8005f14:	3001      	adds	r0, #1
 8005f16:	b280      	uxth	r0, r0
 8005f18:	f009 f8f0 	bl	800f0fc <__aeabi_uidivmod>
 8005f1c:	b28b      	uxth	r3, r1
 8005f1e:	469b      	mov	fp, r3
 8005f20:	802b      	strh	r3, [r5, #0]
 8005f22:	0020      	movs	r0, r4
 8005f24:	2308      	movs	r3, #8
 8005f26:	5ef5      	ldrsh	r5, [r6, r3]
 8005f28:	f7ff ff8c 	bl	8005e44 <get_package_range_coarse_max>
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	4358      	muls	r0, r3
 8005f30:	1945      	adds	r5, r0, r5
 8005f32:	0030      	movs	r0, r6
 8005f34:	f7ff ffaa 	bl	8005e8c <coarse_count_for_next_package>
 8005f38:	0023      	movs	r3, r4
 8005f3a:	33c8      	adds	r3, #200	; 0xc8
 8005f3c:	6018      	str	r0, [r3, #0]
 8005f3e:	466b      	mov	r3, sp
 8005f40:	4642      	mov	r2, r8
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	705a      	strb	r2, [r3, #1]
 8005f46:	4652      	mov	r2, sl
 8005f48:	709a      	strb	r2, [r3, #2]
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	3801      	subs	r0, #1
 8005f4e:	9001      	str	r0, [sp, #4]
 8005f50:	9502      	str	r5, [sp, #8]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	4669      	mov	r1, sp
 8005f56:	431f      	orrs	r7, r3
 8005f58:	2301      	movs	r3, #1
 8005f5a:	6830      	ldr	r0, [r6, #0]
 8005f5c:	405f      	eors	r7, r3
 8005f5e:	9703      	str	r7, [sp, #12]
 8005f60:	f007 fb16 	bl	800d590 <acc_cpd_linear_sweep_update_program>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d0cb      	beq.n	8005f00 <update_program.lto_priv.295+0x42>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005f6c:	e7c8      	b.n	8005f00 <update_program.lto_priv.295+0x42>
 8005f6e:	2000      	movs	r0, #0
 8005f70:	0005      	movs	r5, r0
 8005f72:	e7e4      	b.n	8005f3e <update_program.lto_priv.295+0x80>

08005f74 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8005f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f76:	b085      	sub	sp, #20
 8005f78:	ae03      	add	r6, sp, #12
 8005f7a:	0015      	movs	r5, r2
 8005f7c:	0032      	movs	r2, r6
 8005f7e:	0004      	movs	r4, r0
 8005f80:	001f      	movs	r7, r3
 8005f82:	f007 f979 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d00d      	beq.n	8005fa6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005f8a:	7832      	ldrb	r2, [r6, #0]
 8005f8c:	42aa      	cmp	r2, r5
 8005f8e:	d00c      	beq.n	8005faa <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 8005f90:	9200      	str	r2, [sp, #0]
 8005f92:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8005f94:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8005f96:	9501      	str	r5, [sp, #4]
 8005f98:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	3378      	adds	r3, #120	; 0x78
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8005fa0:	4908      	ldr	r1, [pc, #32]	; (8005fc4 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8005fa2:	47a0      	blx	r4
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	b005      	add	sp, #20
 8005fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005faa:	2f00      	cmp	r7, #0
 8005fac:	d0fb      	beq.n	8005fa6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005fae:	0020      	movs	r0, r4
 8005fb0:	f7ff fbcc 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 8005fb4:	e7f7      	b.n	8005fa6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	08015bdc 	.word	0x08015bdc
 8005fbc:	200002b0 	.word	0x200002b0
 8005fc0:	0801cefa 	.word	0x0801cefa
 8005fc4:	0801ccd2 	.word	0x0801ccd2

08005fc8 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	2301      	movs	r3, #1
 8005fcc:	220b      	movs	r2, #11
 8005fce:	f7ff ffd1 	bl	8005f74 <acc_sensor_protocol_r2_wait_for_specific_event>
 8005fd2:	bd10      	pop	{r4, pc}

08005fd4 <acc_sensor_protocol_r2_is_sensor_running>:
 8005fd4:	b513      	push	{r0, r1, r4, lr}
 8005fd6:	466b      	mov	r3, sp
 8005fd8:	1d9c      	adds	r4, r3, #6
 8005fda:	2300      	movs	r3, #0
 8005fdc:	0022      	movs	r2, r4
 8005fde:	2111      	movs	r1, #17
 8005fe0:	8023      	strh	r3, [r4, #0]
 8005fe2:	f006 ff05 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 8005fe6:	8820      	ldrh	r0, [r4, #0]
 8005fe8:	0540      	lsls	r0, r0, #21
 8005fea:	0fc0      	lsrs	r0, r0, #31
 8005fec:	bd16      	pop	{r1, r2, r4, pc}

08005fee <acc_sensor_protocol_r2_run_program>:
 8005fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff0:	4d15      	ldr	r5, [pc, #84]	; (8006048 <acc_sensor_protocol_r2_run_program+0x5a>)
 8005ff2:	0004      	movs	r4, r0
 8005ff4:	002b      	movs	r3, r5
 8005ff6:	3330      	adds	r3, #48	; 0x30
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	000e      	movs	r6, r1
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d906      	bls.n	800600e <acc_sensor_protocol_r2_run_program+0x20>
 8006000:	9100      	str	r1, [sp, #0]
 8006002:	0003      	movs	r3, r0
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <acc_sensor_protocol_r2_run_program+0x5e>)
 8006006:	4912      	ldr	r1, [pc, #72]	; (8006050 <acc_sensor_protocol_r2_run_program+0x62>)
 8006008:	2004      	movs	r0, #4
 800600a:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800600c:	47b8      	blx	r7
 800600e:	0020      	movs	r0, r4
 8006010:	f7ff ffe0 	bl	8005fd4 <acc_sensor_protocol_r2_is_sensor_running>
 8006014:	1e02      	subs	r2, r0, #0
 8006016:	d00a      	beq.n	800602e <acc_sensor_protocol_r2_run_program+0x40>
 8006018:	0023      	movs	r3, r4
 800601a:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <acc_sensor_protocol_r2_run_program+0x66>)
 800601c:	490c      	ldr	r1, [pc, #48]	; (8006050 <acc_sensor_protocol_r2_run_program+0x62>)
 800601e:	2000      	movs	r0, #0
 8006020:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8006022:	47a8      	blx	r5
 8006024:	0020      	movs	r0, r4
 8006026:	f006 ff0a 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800602a:	2000      	movs	r0, #0
 800602c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800602e:	2110      	movs	r1, #16
 8006030:	0020      	movs	r0, r4
 8006032:	f005 f86b 	bl	800b10c <acc_sensor_reg_write>
 8006036:	2280      	movs	r2, #128	; 0x80
 8006038:	00d2      	lsls	r2, r2, #3
 800603a:	0020      	movs	r0, r4
 800603c:	4332      	orrs	r2, r6
 800603e:	2110      	movs	r1, #16
 8006040:	f005 f864 	bl	800b10c <acc_sensor_reg_write>
 8006044:	2001      	movs	r0, #1
 8006046:	e7f1      	b.n	800602c <acc_sensor_protocol_r2_run_program+0x3e>
 8006048:	200002b0 	.word	0x200002b0
 800604c:	0801cf25 	.word	0x0801cf25
 8006050:	0801ccd2 	.word	0x0801ccd2
 8006054:	0801cf48 	.word	0x0801cf48

08006058 <start.lto_priv.301>:
 8006058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800605a:	464f      	mov	r7, r9
 800605c:	46d6      	mov	lr, sl
 800605e:	4646      	mov	r6, r8
 8006060:	6944      	ldr	r4, [r0, #20]
 8006062:	2300      	movs	r3, #0
 8006064:	0022      	movs	r2, r4
 8006066:	b5c0      	push	{r6, r7, lr}
 8006068:	32c2      	adds	r2, #194	; 0xc2
 800606a:	8013      	strh	r3, [r2, #0]
 800606c:	8053      	strh	r3, [r2, #2]
 800606e:	8093      	strh	r3, [r2, #4]
 8006070:	3a16      	subs	r2, #22
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	b084      	sub	sp, #16
 8006076:	4692      	mov	sl, r2
 8006078:	0022      	movs	r2, r4
 800607a:	32b4      	adds	r2, #180	; 0xb4
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	0007      	movs	r7, r0
 8006080:	4691      	mov	r9, r2
 8006082:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006084:	000d      	movs	r5, r1
 8006086:	4690      	mov	r8, r2
 8006088:	464a      	mov	r2, r9
 800608a:	429a      	cmp	r2, r3
 800608c:	d003      	beq.n	8006096 <start.lto_priv.301+0x3e>
 800608e:	4652      	mov	r2, sl
 8006090:	429a      	cmp	r2, r3
 8006092:	d000      	beq.n	8006096 <start.lto_priv.301+0x3e>
 8006094:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006096:	0038      	movs	r0, r7
 8006098:	f7ff fef8 	bl	8005e8c <coarse_count_for_next_package>
 800609c:	0023      	movs	r3, r4
 800609e:	4e2c      	ldr	r6, [pc, #176]	; (8006150 <start.lto_priv.301+0xf8>)
 80060a0:	33c8      	adds	r3, #200	; 0xc8
 80060a2:	6018      	str	r0, [r3, #0]
 80060a4:	0033      	movs	r3, r6
 80060a6:	3330      	adds	r3, #48	; 0x30
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d904      	bls.n	80060b8 <start.lto_priv.301+0x60>
 80060ae:	4a29      	ldr	r2, [pc, #164]	; (8006154 <start.lto_priv.301+0xfc>)
 80060b0:	4929      	ldr	r1, [pc, #164]	; (8006158 <start.lto_priv.301+0x100>)
 80060b2:	2004      	movs	r0, #4
 80060b4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80060b6:	4798      	blx	r3
 80060b8:	cd06      	ldmia	r5!, {r1, r2}
 80060ba:	0023      	movs	r3, r4
 80060bc:	6838      	ldr	r0, [r7, #0]
 80060be:	f007 fa9f 	bl	800d600 <acc_cpd_linear_sweep_load_program>
 80060c2:	1e05      	subs	r5, r0, #0
 80060c4:	d10a      	bne.n	80060dc <start.lto_priv.301+0x84>
 80060c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80060c8:	4a24      	ldr	r2, [pc, #144]	; (800615c <start.lto_priv.301+0x104>)
 80060ca:	4923      	ldr	r1, [pc, #140]	; (8006158 <start.lto_priv.301+0x100>)
 80060cc:	4798      	blx	r3
 80060ce:	0028      	movs	r0, r5
 80060d0:	b004      	add	sp, #16
 80060d2:	bc1c      	pop	{r2, r3, r4}
 80060d4:	4690      	mov	r8, r2
 80060d6:	4699      	mov	r9, r3
 80060d8:	46a2      	mov	sl, r4
 80060da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060dc:	4920      	ldr	r1, [pc, #128]	; (8006160 <start.lto_priv.301+0x108>)
 80060de:	6838      	ldr	r0, [r7, #0]
 80060e0:	f7ff ff85 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 80060e4:	1e05      	subs	r5, r0, #0
 80060e6:	d101      	bne.n	80060ec <start.lto_priv.301+0x94>
 80060e8:	2500      	movs	r5, #0
 80060ea:	e7f0      	b.n	80060ce <start.lto_priv.301+0x76>
 80060ec:	4653      	mov	r3, sl
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d023      	beq.n	800613a <start.lto_priv.301+0xe2>
 80060f2:	6939      	ldr	r1, [r7, #16]
 80060f4:	6838      	ldr	r0, [r7, #0]
 80060f6:	f7ff fab3 	bl	8005660 <acc_sensor_protocol_r2_wait_for_sync_start>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d0f4      	beq.n	80060e8 <start.lto_priv.301+0x90>
 80060fe:	0033      	movs	r3, r6
 8006100:	3330      	adds	r3, #48	; 0x30
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d904      	bls.n	8006112 <start.lto_priv.301+0xba>
 8006108:	4a16      	ldr	r2, [pc, #88]	; (8006164 <start.lto_priv.301+0x10c>)
 800610a:	4913      	ldr	r1, [pc, #76]	; (8006158 <start.lto_priv.301+0x100>)
 800610c:	2002      	movs	r0, #2
 800610e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006110:	4798      	blx	r3
 8006112:	464b      	mov	r3, r9
 8006114:	2b00      	cmp	r3, #0
 8006116:	d010      	beq.n	800613a <start.lto_priv.301+0xe2>
 8006118:	2300      	movs	r3, #0
 800611a:	466a      	mov	r2, sp
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	7013      	strb	r3, [r2, #0]
 8006120:	7053      	strb	r3, [r2, #1]
 8006122:	9302      	str	r3, [sp, #8]
 8006124:	4643      	mov	r3, r8
 8006126:	2201      	movs	r2, #1
 8006128:	4669      	mov	r1, sp
 800612a:	66e3      	str	r3, [r4, #108]	; 0x6c
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	708a      	strb	r2, [r1, #2]
 8006130:	9303      	str	r3, [sp, #12]
 8006132:	f007 fa2d 	bl	800d590 <acc_cpd_linear_sweep_update_program>
 8006136:	2800      	cmp	r0, #0
 8006138:	d0d6      	beq.n	80060e8 <start.lto_priv.301+0x90>
 800613a:	0033      	movs	r3, r6
 800613c:	3330      	adds	r3, #48	; 0x30
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d9c4      	bls.n	80060ce <start.lto_priv.301+0x76>
 8006144:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <start.lto_priv.301+0x110>)
 8006148:	4903      	ldr	r1, [pc, #12]	; (8006158 <start.lto_priv.301+0x100>)
 800614a:	2004      	movs	r0, #4
 800614c:	4798      	blx	r3
 800614e:	e7be      	b.n	80060ce <start.lto_priv.301+0x76>
 8006150:	200002b0 	.word	0x200002b0
 8006154:	0801cf77 	.word	0x0801cf77
 8006158:	0801cf9c 	.word	0x0801cf9c
 800615c:	0801cfb0 	.word	0x0801cfb0
 8006160:	0000023a 	.word	0x0000023a
 8006164:	0801cfca 	.word	0x0801cfca
 8006168:	0801cfee 	.word	0x0801cfee

0800616c <measure_noise.lto_priv.288>:
 800616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800616e:	464e      	mov	r6, r9
 8006170:	46de      	mov	lr, fp
 8006172:	4657      	mov	r7, sl
 8006174:	4645      	mov	r5, r8
 8006176:	b5e0      	push	{r5, r6, r7, lr}
 8006178:	4e4a      	ldr	r6, [pc, #296]	; (80062a4 <measure_noise.lto_priv.288+0x138>)
 800617a:	b0b9      	sub	sp, #228	; 0xe4
 800617c:	0033      	movs	r3, r6
 800617e:	9201      	str	r2, [sp, #4]
 8006180:	3330      	adds	r3, #48	; 0x30
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	0004      	movs	r4, r0
 8006186:	4689      	mov	r9, r1
 8006188:	2b03      	cmp	r3, #3
 800618a:	d904      	bls.n	8006196 <measure_noise.lto_priv.288+0x2a>
 800618c:	4a46      	ldr	r2, [pc, #280]	; (80062a8 <measure_noise.lto_priv.288+0x13c>)
 800618e:	4947      	ldr	r1, [pc, #284]	; (80062ac <measure_noise.lto_priv.288+0x140>)
 8006190:	2004      	movs	r0, #4
 8006192:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006194:	4798      	blx	r3
 8006196:	6967      	ldr	r7, [r4, #20]
 8006198:	22bc      	movs	r2, #188	; 0xbc
 800619a:	0039      	movs	r1, r7
 800619c:	a809      	add	r0, sp, #36	; 0x24
 800619e:	6825      	ldr	r5, [r4, #0]
 80061a0:	f00f fc8c 	bl	8015abc <memcpy>
 80061a4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80061a6:	2400      	movs	r4, #0
 80061a8:	4698      	mov	r8, r3
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	3b01      	subs	r3, #1
 80061ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80061b0:	2301      	movs	r3, #1
 80061b2:	2202      	movs	r2, #2
 80061b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80061b6:	ab34      	add	r3, sp, #208	; 0xd0
 80061b8:	701c      	strb	r4, [r3, #0]
 80061ba:	003b      	movs	r3, r7
 80061bc:	922f      	str	r2, [sp, #188]	; 0xbc
 80061be:	4649      	mov	r1, r9
 80061c0:	464a      	mov	r2, r9
 80061c2:	9424      	str	r4, [sp, #144]	; 0x90
 80061c4:	941e      	str	r4, [sp, #120]	; 0x78
 80061c6:	9436      	str	r4, [sp, #216]	; 0xd8
 80061c8:	33cc      	adds	r3, #204	; 0xcc
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	6852      	ldr	r2, [r2, #4]
 80061ce:	6809      	ldr	r1, [r1, #0]
 80061d0:	469b      	mov	fp, r3
 80061d2:	0028      	movs	r0, r5
 80061d4:	ab09      	add	r3, sp, #36	; 0x24
 80061d6:	f007 fa13 	bl	800d600 <acc_cpd_linear_sweep_load_program>
 80061da:	4935      	ldr	r1, [pc, #212]	; (80062b0 <measure_noise.lto_priv.288+0x144>)
 80061dc:	0028      	movs	r0, r5
 80061de:	f7ff ff06 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 80061e2:	21fa      	movs	r1, #250	; 0xfa
 80061e4:	aa02      	add	r2, sp, #8
 80061e6:	00c9      	lsls	r1, r1, #3
 80061e8:	0028      	movs	r0, r5
 80061ea:	f007 f845 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80061ee:	4682      	mov	sl, r0
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d040      	beq.n	8006276 <measure_noise.lto_priv.288+0x10a>
 80061f4:	4643      	mov	r3, r8
 80061f6:	049b      	lsls	r3, r3, #18
 80061f8:	0c1b      	lsrs	r3, r3, #16
 80061fa:	4698      	mov	r8, r3
 80061fc:	4659      	mov	r1, fp
 80061fe:	207c      	movs	r0, #124	; 0x7c
 8006200:	f008 fef6 	bl	800eff0 <__udivsi3>
 8006204:	4643      	mov	r3, r8
 8006206:	4343      	muls	r3, r0
 8006208:	4698      	mov	r8, r3
 800620a:	464b      	mov	r3, r9
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	a903      	add	r1, sp, #12
 8006210:	4699      	mov	r9, r3
 8006212:	0038      	movs	r0, r7
 8006214:	f007 f9a6 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 8006218:	9b03      	ldr	r3, [sp, #12]
 800621a:	4649      	mov	r1, r9
 800621c:	4443      	add	r3, r8
 800621e:	001a      	movs	r2, r3
 8006220:	0028      	movs	r0, r5
 8006222:	f7ff fa0f 	bl	8005644 <acc_sensor_protocol_r2_transfer_data>
 8006226:	4681      	mov	r9, r0
 8006228:	0028      	movs	r0, r5
 800622a:	f007 f8d7 	bl	800d3dc <acc_sensor_protocol_r2_stop.constprop.25>
 800622e:	0038      	movs	r0, r7
 8006230:	a903      	add	r1, sp, #12
 8006232:	f007 f997 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	0020      	movs	r0, r4
 800623a:	005d      	lsls	r5, r3, #1
 800623c:	230e      	movs	r3, #14
 800623e:	444d      	add	r5, r9
 8006240:	4598      	cmp	r8, r3
 8006242:	d820      	bhi.n	8006286 <measure_noise.lto_priv.288+0x11a>
 8006244:	4644      	mov	r4, r8
 8006246:	3c0e      	subs	r4, #14
 8006248:	0021      	movs	r1, r4
 800624a:	f008 fed1 	bl	800eff0 <__udivsi3>
 800624e:	220e      	movs	r2, #14
 8006250:	0001      	movs	r1, r0
 8006252:	2000      	movs	r0, #0
 8006254:	4590      	cmp	r8, r2
 8006256:	d81b      	bhi.n	8006290 <measure_noise.lto_priv.288+0x124>
 8006258:	0021      	movs	r1, r4
 800625a:	f008 fec9 	bl	800eff0 <__udivsi3>
 800625e:	9b01      	ldr	r3, [sp, #4]
 8006260:	8018      	strh	r0, [r3, #0]
 8006262:	0033      	movs	r3, r6
 8006264:	3330      	adds	r3, #48	; 0x30
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d904      	bls.n	8006276 <measure_noise.lto_priv.288+0x10a>
 800626c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800626e:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <measure_noise.lto_priv.288+0x148>)
 8006270:	490e      	ldr	r1, [pc, #56]	; (80062ac <measure_noise.lto_priv.288+0x140>)
 8006272:	2004      	movs	r0, #4
 8006274:	4798      	blx	r3
 8006276:	4650      	mov	r0, sl
 8006278:	b039      	add	sp, #228	; 0xe4
 800627a:	bc3c      	pop	{r2, r3, r4, r5}
 800627c:	4690      	mov	r8, r2
 800627e:	4699      	mov	r9, r3
 8006280:	46a2      	mov	sl, r4
 8006282:	46ab      	mov	fp, r5
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006286:	005a      	lsls	r2, r3, #1
 8006288:	5aaa      	ldrh	r2, [r5, r2]
 800628a:	3301      	adds	r3, #1
 800628c:	1880      	adds	r0, r0, r2
 800628e:	e7d7      	b.n	8006240 <measure_noise.lto_priv.288+0xd4>
 8006290:	0053      	lsls	r3, r2, #1
 8006292:	5aeb      	ldrh	r3, [r5, r3]
 8006294:	3201      	adds	r2, #1
 8006296:	1a5b      	subs	r3, r3, r1
 8006298:	17df      	asrs	r7, r3, #31
 800629a:	19db      	adds	r3, r3, r7
 800629c:	407b      	eors	r3, r7
 800629e:	18c0      	adds	r0, r0, r3
 80062a0:	e7d8      	b.n	8006254 <measure_noise.lto_priv.288+0xe8>
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200002b0 	.word	0x200002b0
 80062a8:	0801d011 	.word	0x0801d011
 80062ac:	0801cf9c 	.word	0x0801cf9c
 80062b0:	0000023a 	.word	0x0000023a
 80062b4:	0801d032 	.word	0x0801d032

080062b8 <acc_sensor_manager_hibernate_enter.lto_priv.260>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80062bc:	6985      	ldr	r5, [r0, #24]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	6841      	ldr	r1, [r0, #4]
 80062c2:	0028      	movs	r0, r5
 80062c4:	4798      	blx	r3
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <acc_sensor_manager_hibernate_enter.lto_priv.260+0x2c>)
 80062c8:	1e04      	subs	r4, r0, #0
 80062ca:	d105      	bne.n	80062d8 <acc_sensor_manager_hibernate_enter.lto_priv.260+0x20>
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	4a06      	ldr	r2, [pc, #24]	; (80062e8 <acc_sensor_manager_hibernate_enter.lto_priv.260+0x30>)
 80062d0:	4906      	ldr	r1, [pc, #24]	; (80062ec <acc_sensor_manager_hibernate_enter.lto_priv.260+0x34>)
 80062d2:	4798      	blx	r3
 80062d4:	0020      	movs	r0, r4
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0fa      	beq.n	80062d4 <acc_sensor_manager_hibernate_enter.lto_priv.260+0x1c>
 80062de:	0028      	movs	r0, r5
 80062e0:	4798      	blx	r3
 80062e2:	e7f7      	b.n	80062d4 <acc_sensor_manager_hibernate_enter.lto_priv.260+0x1c>
 80062e4:	200002b0 	.word	0x200002b0
 80062e8:	0801d051 	.word	0x0801d051
 80062ec:	0801d071 	.word	0x0801d071

080062f0 <acc_rss_integration_mem_free>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	4b02      	ldr	r3, [pc, #8]	; (80062fc <acc_rss_integration_mem_free+0xc>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	4798      	blx	r3
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	200002b0 	.word	0x200002b0

08006300 <destroy.lto_priv.320>:
 8006300:	b510      	push	{r4, lr}
 8006302:	0004      	movs	r4, r0
 8006304:	6940      	ldr	r0, [r0, #20]
 8006306:	2800      	cmp	r0, #0
 8006308:	d003      	beq.n	8006312 <destroy.lto_priv.320+0x12>
 800630a:	f7ff fff1 	bl	80062f0 <acc_rss_integration_mem_free>
 800630e:	2300      	movs	r3, #0
 8006310:	6163      	str	r3, [r4, #20]
 8006312:	bd10      	pop	{r4, pc}

08006314 <destroy.lto_priv.319>:
 8006314:	b510      	push	{r4, lr}
 8006316:	0004      	movs	r4, r0
 8006318:	6940      	ldr	r0, [r0, #20]
 800631a:	2800      	cmp	r0, #0
 800631c:	d003      	beq.n	8006326 <destroy.lto_priv.319+0x12>
 800631e:	f7ff ffe7 	bl	80062f0 <acc_rss_integration_mem_free>
 8006322:	2300      	movs	r3, #0
 8006324:	6163      	str	r3, [r4, #20]
 8006326:	bd10      	pop	{r4, pc}

08006328 <disassemble.lto_priv.325.lto_priv.650>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	6804      	ldr	r4, [r0, #0]
 800632c:	0005      	movs	r5, r0
 800632e:	2c00      	cmp	r4, #0
 8006330:	d00a      	beq.n	8006348 <disassemble.lto_priv.325.lto_priv.650+0x20>
 8006332:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006334:	f7fe ff34 	bl	80051a0 <acc_sensor_manager_release_measurement>
 8006338:	23ea      	movs	r3, #234	; 0xea
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	58e0      	ldr	r0, [r4, r3]
 800633e:	f7ff ffd7 	bl	80062f0 <acc_rss_integration_mem_free>
 8006342:	0020      	movs	r0, r4
 8006344:	f7ff ffd4 	bl	80062f0 <acc_rss_integration_mem_free>
 8006348:	0028      	movs	r0, r5
 800634a:	f7ff ffd1 	bl	80062f0 <acc_rss_integration_mem_free>
 800634e:	bd70      	pop	{r4, r5, r6, pc}

08006350 <disassemble.lto_priv.324.lto_priv.634>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	6804      	ldr	r4, [r0, #0]
 8006354:	0005      	movs	r5, r0
 8006356:	2c00      	cmp	r4, #0
 8006358:	d00a      	beq.n	8006370 <disassemble.lto_priv.324.lto_priv.634+0x20>
 800635a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800635c:	f7fe ff20 	bl	80051a0 <acc_sensor_manager_release_measurement>
 8006360:	0023      	movs	r3, r4
 8006362:	33fc      	adds	r3, #252	; 0xfc
 8006364:	69d8      	ldr	r0, [r3, #28]
 8006366:	f7ff ffc3 	bl	80062f0 <acc_rss_integration_mem_free>
 800636a:	0020      	movs	r0, r4
 800636c:	f7ff ffc0 	bl	80062f0 <acc_rss_integration_mem_free>
 8006370:	0028      	movs	r0, r5
 8006372:	f7ff ffbd 	bl	80062f0 <acc_rss_integration_mem_free>
 8006376:	bd70      	pop	{r4, r5, r6, pc}

08006378 <acc_rss_integration_mem_alloc_debug>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4d05      	ldr	r5, [pc, #20]	; (8006390 <acc_rss_integration_mem_alloc_debug+0x18>)
 800637c:	68ab      	ldr	r3, [r5, #8]
 800637e:	4798      	blx	r3
 8006380:	1e04      	subs	r4, r0, #0
 8006382:	d103      	bne.n	800638c <acc_rss_integration_mem_alloc_debug+0x14>
 8006384:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006386:	4a03      	ldr	r2, [pc, #12]	; (8006394 <acc_rss_integration_mem_alloc_debug+0x1c>)
 8006388:	4903      	ldr	r1, [pc, #12]	; (8006398 <acc_rss_integration_mem_alloc_debug+0x20>)
 800638a:	4798      	blx	r3
 800638c:	0020      	movs	r0, r4
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	200002b0 	.word	0x200002b0
 8006394:	0801d080 	.word	0x0801d080
 8006398:	0801daf0 	.word	0x0801daf0

0800639c <acc_rss_integration_sensor_device_transfer>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	001e      	movs	r6, r3
 80063a0:	000c      	movs	r4, r1
 80063a2:	0015      	movs	r5, r2
 80063a4:	000b      	movs	r3, r1
 80063a6:	3a01      	subs	r2, #1
 80063a8:	d209      	bcs.n	80063be <acc_rss_integration_sensor_device_transfer+0x22>
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <acc_rss_integration_sensor_device_transfer+0x38>)
 80063ac:	006a      	lsls	r2, r5, #1
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	0021      	movs	r1, r4
 80063b2:	4798      	blx	r3
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	d001      	beq.n	80063bc <acc_rss_integration_sensor_device_transfer+0x20>
 80063b8:	3d01      	subs	r5, #1
 80063ba:	d205      	bcs.n	80063c8 <acc_rss_integration_sensor_device_transfer+0x2c>
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	8819      	ldrh	r1, [r3, #0]
 80063c0:	ba49      	rev16	r1, r1
 80063c2:	8019      	strh	r1, [r3, #0]
 80063c4:	3302      	adds	r3, #2
 80063c6:	e7ee      	b.n	80063a6 <acc_rss_integration_sensor_device_transfer+0xa>
 80063c8:	8823      	ldrh	r3, [r4, #0]
 80063ca:	ba5b      	rev16	r3, r3
 80063cc:	8023      	strh	r3, [r4, #0]
 80063ce:	3402      	adds	r4, #2
 80063d0:	e7f2      	b.n	80063b8 <acc_rss_integration_sensor_device_transfer+0x1c>
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	200002b0 	.word	0x200002b0

080063d8 <acc_sensor_r2_load_confmem>:
 80063d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063da:	4647      	mov	r7, r8
 80063dc:	46ce      	mov	lr, r9
 80063de:	1c5c      	adds	r4, r3, #1
 80063e0:	4d16      	ldr	r5, [pc, #88]	; (800643c <acc_sensor_r2_load_confmem+0x64>)
 80063e2:	0063      	lsls	r3, r4, #1
 80063e4:	4699      	mov	r9, r3
 80063e6:	002b      	movs	r3, r5
 80063e8:	b580      	push	{r7, lr}
 80063ea:	3330      	adds	r3, #48	; 0x30
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b083      	sub	sp, #12
 80063f0:	0006      	movs	r6, r0
 80063f2:	4688      	mov	r8, r1
 80063f4:	0017      	movs	r7, r2
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d906      	bls.n	8006408 <acc_sensor_r2_load_confmem+0x30>
 80063fa:	9100      	str	r1, [sp, #0]
 80063fc:	0003      	movs	r3, r0
 80063fe:	4a10      	ldr	r2, [pc, #64]	; (8006440 <acc_sensor_r2_load_confmem+0x68>)
 8006400:	4910      	ldr	r1, [pc, #64]	; (8006444 <acc_sensor_r2_load_confmem+0x6c>)
 8006402:	2004      	movs	r0, #4
 8006404:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8006406:	47a0      	blx	r4
 8006408:	686b      	ldr	r3, [r5, #4]
 800640a:	4599      	cmp	r9, r3
 800640c:	d909      	bls.n	8006422 <acc_sensor_r2_load_confmem+0x4a>
 800640e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006410:	4a0d      	ldr	r2, [pc, #52]	; (8006448 <acc_sensor_r2_load_confmem+0x70>)
 8006412:	490c      	ldr	r1, [pc, #48]	; (8006444 <acc_sensor_r2_load_confmem+0x6c>)
 8006414:	2000      	movs	r0, #0
 8006416:	4798      	blx	r3
 8006418:	b003      	add	sp, #12
 800641a:	bc0c      	pop	{r2, r3}
 800641c:	4690      	mov	r8, r2
 800641e:	4699      	mov	r9, r3
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006422:	21a0      	movs	r1, #160	; 0xa0
 8006424:	4643      	mov	r3, r8
 8006426:	01c9      	lsls	r1, r1, #7
 8006428:	4319      	orrs	r1, r3
 800642a:	464b      	mov	r3, r9
 800642c:	8039      	strh	r1, [r7, #0]
 800642e:	085a      	lsrs	r2, r3, #1
 8006430:	0039      	movs	r1, r7
 8006432:	2300      	movs	r3, #0
 8006434:	0030      	movs	r0, r6
 8006436:	f7ff ffb1 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800643a:	e7ed      	b.n	8006418 <acc_sensor_r2_load_confmem+0x40>
 800643c:	200002b0 	.word	0x200002b0
 8006440:	0801d08e 	.word	0x0801d08e
 8006444:	0801d0b4 	.word	0x0801d0b4
 8006448:	0801d0be 	.word	0x0801d0be

0800644c <acc_rss_integration_sensor_device_power_off>:
 800644c:	b510      	push	{r4, lr}
 800644e:	4b02      	ldr	r3, [pc, #8]	; (8006458 <acc_rss_integration_sensor_device_power_off+0xc>)
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	4798      	blx	r3
 8006454:	bd10      	pop	{r4, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	200002b0 	.word	0x200002b0

0800645c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	6985      	ldr	r5, [r0, #24]
 8006460:	0004      	movs	r4, r0
 8006462:	0028      	movs	r0, r5
 8006464:	f7fe feb6 	bl	80051d4 <acc_rss_integration_sensor_device_power_on>
 8006468:	2148      	movs	r1, #72	; 0x48
 800646a:	4369      	muls	r1, r5
 800646c:	4b0d      	ldr	r3, [pc, #52]	; (80064a4 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261+0x48>)
 800646e:	3948      	subs	r1, #72	; 0x48
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006474:	1859      	adds	r1, r3, r1
 8006476:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006478:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4798      	blx	r3
 800647e:	2800      	cmp	r0, #0
 8006480:	d104      	bne.n	800648c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261+0x30>
 8006482:	0028      	movs	r0, r5
 8006484:	f7ff ffe2 	bl	800644c <acc_rss_integration_sensor_device_power_off>
 8006488:	2000      	movs	r0, #0
 800648a:	bd70      	pop	{r4, r5, r6, pc}
 800648c:	0020      	movs	r0, r4
 800648e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006490:	0031      	movs	r1, r6
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	3018      	adds	r0, #24
 8006496:	4798      	blx	r3
 8006498:	2800      	cmp	r0, #0
 800649a:	d0f2      	beq.n	8006482 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261+0x26>
 800649c:	2301      	movs	r3, #1
 800649e:	70e3      	strb	r3, [r4, #3]
 80064a0:	e7f3      	b.n	800648a <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261+0x2e>
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	200004c0 	.word	0x200004c0

080064a8 <acc_rss_integration_get_sensor_reference_frequency>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	4798      	blx	r3
 80064b0:	bd10      	pop	{r4, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	200002b0 	.word	0x200002b0

080064b8 <acc_radar_engine_common_frequency_to_main_clk>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	1c06      	adds	r6, r0, #0
 80064bc:	0015      	movs	r5, r2
 80064be:	000c      	movs	r4, r1
 80064c0:	f7ff fff2 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 80064c4:	1c31      	adds	r1, r6, #0
 80064c6:	f008 f94f 	bl	800e768 <__aeabi_fdiv>
 80064ca:	f008 ff9f 	bl	800f40c <__aeabi_f2uiz>
 80064ce:	0c03      	lsrs	r3, r0, #16
 80064d0:	b280      	uxth	r0, r0
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	6020      	str	r0, [r4, #0]
 80064d6:	bd70      	pop	{r4, r5, r6, pc}

080064d8 <calculate_pll_divisors.lto_priv.303>:
 80064d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064da:	0005      	movs	r5, r0
 80064dc:	f7ff ffe4 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 80064e0:	1c01      	adds	r1, r0, #0
 80064e2:	1c06      	adds	r6, r0, #0
 80064e4:	4830      	ldr	r0, [pc, #192]	; (80065a8 <calculate_pll_divisors.lto_priv.303+0xd0>)
 80064e6:	f008 f93f 	bl	800e768 <__aeabi_fdiv>
 80064ea:	21fc      	movs	r1, #252	; 0xfc
 80064ec:	0589      	lsls	r1, r1, #22
 80064ee:	f007 ffa1 	bl	800e434 <__aeabi_fadd>
 80064f2:	f008 ff8b 	bl	800f40c <__aeabi_f2uiz>
 80064f6:	492d      	ldr	r1, [pc, #180]	; (80065ac <calculate_pll_divisors.lto_priv.303+0xd4>)
 80064f8:	b284      	uxth	r4, r0
 80064fa:	1c30      	adds	r0, r6, #0
 80064fc:	f008 fb78 	bl	800ebf0 <__aeabi_fsub>
 8006500:	492b      	ldr	r1, [pc, #172]	; (80065b0 <calculate_pll_divisors.lto_priv.303+0xd8>)
 8006502:	f008 fa43 	bl	800e98c <__aeabi_fmul>
 8006506:	492b      	ldr	r1, [pc, #172]	; (80065b4 <calculate_pll_divisors.lto_priv.303+0xdc>)
 8006508:	f007 ff94 	bl	800e434 <__aeabi_fadd>
 800650c:	f008 ff7e 	bl	800f40c <__aeabi_f2uiz>
 8006510:	0023      	movs	r3, r4
 8006512:	3b10      	subs	r3, #16
 8006514:	b29b      	uxth	r3, r3
 8006516:	8128      	strh	r0, [r5, #8]
 8006518:	2bef      	cmp	r3, #239	; 0xef
 800651a:	d92b      	bls.n	8006574 <calculate_pll_divisors.lto_priv.303+0x9c>
 800651c:	4b26      	ldr	r3, [pc, #152]	; (80065b8 <calculate_pll_divisors.lto_priv.303+0xe0>)
 800651e:	2100      	movs	r1, #0
 8006520:	1c30      	adds	r0, r6, #0
 8006522:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006524:	f008 ff2a 	bl	800f37c <__aeabi_fcmplt>
 8006528:	2800      	cmp	r0, #0
 800652a:	d01f      	beq.n	800656c <calculate_pll_divisors.lto_priv.303+0x94>
 800652c:	4c23      	ldr	r4, [pc, #140]	; (80065bc <calculate_pll_divisors.lto_priv.303+0xe4>)
 800652e:	4924      	ldr	r1, [pc, #144]	; (80065c0 <calculate_pll_divisors.lto_priv.303+0xe8>)
 8006530:	1c30      	adds	r0, r6, #0
 8006532:	f008 fa2b 	bl	800e98c <__aeabi_fmul>
 8006536:	4923      	ldr	r1, [pc, #140]	; (80065c4 <calculate_pll_divisors.lto_priv.303+0xec>)
 8006538:	f007 ff7c 	bl	800e434 <__aeabi_fadd>
 800653c:	1c06      	adds	r6, r0, #0
 800653e:	f008 ff65 	bl	800f40c <__aeabi_f2uiz>
 8006542:	0005      	movs	r5, r0
 8006544:	f009 f9a0 	bl	800f888 <__aeabi_ui2f>
 8006548:	1c01      	adds	r1, r0, #0
 800654a:	1c30      	adds	r0, r6, #0
 800654c:	f008 fb50 	bl	800ebf0 <__aeabi_fsub>
 8006550:	491d      	ldr	r1, [pc, #116]	; (80065c8 <calculate_pll_divisors.lto_priv.303+0xf0>)
 8006552:	f008 fa1b 	bl	800e98c <__aeabi_fmul>
 8006556:	f008 ff59 	bl	800f40c <__aeabi_f2uiz>
 800655a:	9500      	str	r5, [sp, #0]
 800655c:	9001      	str	r0, [sp, #4]
 800655e:	0023      	movs	r3, r4
 8006560:	2000      	movs	r0, #0
 8006562:	4a1a      	ldr	r2, [pc, #104]	; (80065cc <calculate_pll_divisors.lto_priv.303+0xf4>)
 8006564:	491a      	ldr	r1, [pc, #104]	; (80065d0 <calculate_pll_divisors.lto_priv.303+0xf8>)
 8006566:	47b8      	blx	r7
 8006568:	2000      	movs	r0, #0
 800656a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800656c:	21fe      	movs	r1, #254	; 0xfe
 800656e:	4c19      	ldr	r4, [pc, #100]	; (80065d4 <calculate_pll_divisors.lto_priv.303+0xfc>)
 8006570:	0589      	lsls	r1, r1, #22
 8006572:	e7dd      	b.n	8006530 <calculate_pll_divisors.lto_priv.303+0x58>
 8006574:	2c3f      	cmp	r4, #63	; 0x3f
 8006576:	d809      	bhi.n	800658c <calculate_pll_divisors.lto_priv.303+0xb4>
 8006578:	2200      	movs	r2, #0
 800657a:	806a      	strh	r2, [r5, #2]
 800657c:	2c2f      	cmp	r4, #47	; 0x2f
 800657e:	d900      	bls.n	8006582 <calculate_pll_divisors.lto_priv.303+0xaa>
 8006580:	0023      	movs	r3, r4
 8006582:	80ab      	strh	r3, [r5, #4]
 8006584:	80ea      	strh	r2, [r5, #6]
 8006586:	802c      	strh	r4, [r5, #0]
 8006588:	2001      	movs	r0, #1
 800658a:	e7ee      	b.n	800656a <calculate_pll_divisors.lto_priv.303+0x92>
 800658c:	2301      	movs	r3, #1
 800658e:	806b      	strh	r3, [r5, #2]
 8006590:	08e3      	lsrs	r3, r4, #3
 8006592:	2cbf      	cmp	r4, #191	; 0xbf
 8006594:	d803      	bhi.n	800659e <calculate_pll_divisors.lto_priv.303+0xc6>
 8006596:	0023      	movs	r3, r4
 8006598:	3b40      	subs	r3, #64	; 0x40
 800659a:	10db      	asrs	r3, r3, #3
 800659c:	b29b      	uxth	r3, r3
 800659e:	80ab      	strh	r3, [r5, #4]
 80065a0:	2307      	movs	r3, #7
 80065a2:	4023      	ands	r3, r4
 80065a4:	80eb      	strh	r3, [r5, #6]
 80065a6:	e7ee      	b.n	8006586 <calculate_pll_divisors.lto_priv.303+0xae>
 80065a8:	4f1502f9 	.word	0x4f1502f9
 80065ac:	4b989680 	.word	0x4b989680
 80065b0:	b55b38e8 	.word	0xb55b38e8
 80065b4:	427c0000 	.word	0x427c0000
 80065b8:	200002b0 	.word	0x200002b0
 80065bc:	0801e12c 	.word	0x0801e12c
 80065c0:	bf800000 	.word	0xbf800000
 80065c4:	350637bd 	.word	0x350637bd
 80065c8:	49742400 	.word	0x49742400
 80065cc:	0801d0de 	.word	0x0801d0de
 80065d0:	0801d109 	.word	0x0801d109
 80065d4:	0801e057 	.word	0x0801e057

080065d8 <set_calibration_context.lto_priv.292>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	680b      	ldr	r3, [r1, #0]
 80065dc:	b086      	sub	sp, #24
 80065de:	0004      	movs	r4, r0
 80065e0:	000e      	movs	r6, r1
 80065e2:	2b06      	cmp	r3, #6
 80065e4:	d00a      	beq.n	80065fc <set_calibration_context.lto_priv.292+0x24>
 80065e6:	2206      	movs	r2, #6
 80065e8:	9200      	str	r2, [sp, #0]
 80065ea:	4a0e      	ldr	r2, [pc, #56]	; (8006624 <set_calibration_context.lto_priv.292+0x4c>)
 80065ec:	2000      	movs	r0, #0
 80065ee:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80065f0:	490d      	ldr	r1, [pc, #52]	; (8006628 <set_calibration_context.lto_priv.292+0x50>)
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <set_calibration_context.lto_priv.292+0x54>)
 80065f4:	47a0      	blx	r4
 80065f6:	2000      	movs	r0, #0
 80065f8:	b006      	add	sp, #24
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	ad03      	add	r5, sp, #12
 80065fe:	0028      	movs	r0, r5
 8006600:	f7ff ff6a 	bl	80064d8 <calculate_pll_divisors.lto_priv.303>
 8006604:	2800      	cmp	r0, #0
 8006606:	d0f7      	beq.n	80065f8 <set_calibration_context.lto_priv.292+0x20>
 8006608:	88ab      	ldrh	r3, [r5, #4]
 800660a:	6063      	str	r3, [r4, #4]
 800660c:	88eb      	ldrh	r3, [r5, #6]
 800660e:	60a3      	str	r3, [r4, #8]
 8006610:	886b      	ldrh	r3, [r5, #2]
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	892b      	ldrh	r3, [r5, #8]
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	88b3      	ldrh	r3, [r6, #4]
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	88f3      	ldrh	r3, [r6, #6]
 800661e:	6163      	str	r3, [r4, #20]
 8006620:	e7ea      	b.n	80065f8 <set_calibration_context.lto_priv.292+0x20>
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	200002b0 	.word	0x200002b0
 8006628:	0801d158 	.word	0x0801d158
 800662c:	0801d11a 	.word	0x0801d11a

08006630 <calibrate.lto_priv.306>:
 8006630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006632:	b08b      	sub	sp, #44	; 0x2c
 8006634:	ac02      	add	r4, sp, #8
 8006636:	6807      	ldr	r7, [r0, #0]
 8006638:	0020      	movs	r0, r4
 800663a:	000e      	movs	r6, r1
 800663c:	0015      	movs	r5, r2
 800663e:	f7ff ff4b 	bl	80064d8 <calculate_pll_divisors.lto_priv.303>
 8006642:	2800      	cmp	r0, #0
 8006644:	d103      	bne.n	800664e <calibrate.lto_priv.306+0x1e>
 8006646:	2400      	movs	r4, #0
 8006648:	0020      	movs	r0, r4
 800664a:	b00b      	add	sp, #44	; 0x2c
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	9705      	str	r7, [sp, #20]
 8006650:	8863      	ldrh	r3, [r4, #2]
 8006652:	aa05      	add	r2, sp, #20
 8006654:	6053      	str	r3, [r2, #4]
 8006656:	88a3      	ldrh	r3, [r4, #4]
 8006658:	ce03      	ldmia	r6!, {r0, r1}
 800665a:	6093      	str	r3, [r2, #8]
 800665c:	88e3      	ldrh	r3, [r4, #6]
 800665e:	60d3      	str	r3, [r2, #12]
 8006660:	8923      	ldrh	r3, [r4, #8]
 8006662:	8213      	strh	r3, [r2, #16]
 8006664:	466b      	mov	r3, sp
 8006666:	f007 fc6e 	bl	800df46 <acc_cpd_cbank_and_vana_calibration>
 800666a:	1e04      	subs	r4, r0, #0
 800666c:	d0eb      	beq.n	8006646 <calibrate.lto_priv.306+0x16>
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	80ab      	strh	r3, [r5, #4]
 8006672:	466b      	mov	r3, sp
 8006674:	791b      	ldrb	r3, [r3, #4]
 8006676:	80eb      	strh	r3, [r5, #6]
 8006678:	2306      	movs	r3, #6
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <calibrate.lto_priv.306+0x64>)
 800667e:	001a      	movs	r2, r3
 8006680:	3230      	adds	r2, #48	; 0x30
 8006682:	7812      	ldrb	r2, [r2, #0]
 8006684:	2a01      	cmp	r2, #1
 8006686:	d9df      	bls.n	8006648 <calibrate.lto_priv.306+0x18>
 8006688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668a:	4a03      	ldr	r2, [pc, #12]	; (8006698 <calibrate.lto_priv.306+0x68>)
 800668c:	4903      	ldr	r1, [pc, #12]	; (800669c <calibrate.lto_priv.306+0x6c>)
 800668e:	2002      	movs	r0, #2
 8006690:	4798      	blx	r3
 8006692:	e7d9      	b.n	8006648 <calibrate.lto_priv.306+0x18>
 8006694:	200002b0 	.word	0x200002b0
 8006698:	0801d16c 	.word	0x0801d16c
 800669c:	0801d158 	.word	0x0801d158

080066a0 <set_calibration_context.lto_priv.291>:
 80066a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a2:	680b      	ldr	r3, [r1, #0]
 80066a4:	b087      	sub	sp, #28
 80066a6:	0004      	movs	r4, r0
 80066a8:	000d      	movs	r5, r1
 80066aa:	2b06      	cmp	r3, #6
 80066ac:	d00b      	beq.n	80066c6 <set_calibration_context.lto_priv.291+0x26>
 80066ae:	2206      	movs	r2, #6
 80066b0:	9200      	str	r2, [sp, #0]
 80066b2:	4a22      	ldr	r2, [pc, #136]	; (800673c <set_calibration_context.lto_priv.291+0x9c>)
 80066b4:	4922      	ldr	r1, [pc, #136]	; (8006740 <set_calibration_context.lto_priv.291+0xa0>)
 80066b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80066b8:	2000      	movs	r0, #0
 80066ba:	4a22      	ldr	r2, [pc, #136]	; (8006744 <set_calibration_context.lto_priv.291+0xa4>)
 80066bc:	47a0      	blx	r4
 80066be:	2700      	movs	r7, #0
 80066c0:	0038      	movs	r0, r7
 80066c2:	b007      	add	sp, #28
 80066c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c6:	ae03      	add	r6, sp, #12
 80066c8:	0030      	movs	r0, r6
 80066ca:	f7ff ff05 	bl	80064d8 <calculate_pll_divisors.lto_priv.303>
 80066ce:	1e07      	subs	r7, r0, #0
 80066d0:	d0f6      	beq.n	80066c0 <set_calibration_context.lto_priv.291+0x20>
 80066d2:	88b3      	ldrh	r3, [r6, #4]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	88f3      	ldrh	r3, [r6, #6]
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	8873      	ldrh	r3, [r6, #2]
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	8933      	ldrh	r3, [r6, #8]
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	88ab      	ldrh	r3, [r5, #4]
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	88eb      	ldrh	r3, [r5, #6]
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	892b      	ldrh	r3, [r5, #8]
 80066ec:	61a3      	str	r3, [r4, #24]
 80066ee:	896b      	ldrh	r3, [r5, #10]
 80066f0:	61e3      	str	r3, [r4, #28]
 80066f2:	89ab      	ldrh	r3, [r5, #12]
 80066f4:	6223      	str	r3, [r4, #32]
 80066f6:	8a2b      	ldrh	r3, [r5, #16]
 80066f8:	84a3      	strh	r3, [r4, #36]	; 0x24
 80066fa:	8a6b      	ldrh	r3, [r5, #18]
 80066fc:	84e3      	strh	r3, [r4, #38]	; 0x26
 80066fe:	89ed      	ldrh	r5, [r5, #14]
 8006700:	00ad      	lsls	r5, r5, #2
 8006702:	b2ad      	uxth	r5, r5
 8006704:	0028      	movs	r0, r5
 8006706:	303e      	adds	r0, #62	; 0x3e
 8006708:	b280      	uxth	r0, r0
 800670a:	287b      	cmp	r0, #123	; 0x7b
 800670c:	d912      	bls.n	8006734 <set_calibration_context.lto_priv.291+0x94>
 800670e:	217c      	movs	r1, #124	; 0x7c
 8006710:	f008 fcf4 	bl	800f0fc <__aeabi_uidivmod>
 8006714:	2200      	movs	r2, #0
 8006716:	0028      	movs	r0, r5
 8006718:	2301      	movs	r3, #1
 800671a:	b28d      	uxth	r5, r1
 800671c:	0011      	movs	r1, r2
 800671e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006720:	6323      	str	r3, [r4, #48]	; 0x30
 8006722:	2003      	movs	r0, #3
 8006724:	6423      	str	r3, [r4, #64]	; 0x40
 8006726:	2300      	movs	r3, #0
 8006728:	62a5      	str	r5, [r4, #40]	; 0x28
 800672a:	6360      	str	r0, [r4, #52]	; 0x34
 800672c:	63a1      	str	r1, [r4, #56]	; 0x38
 800672e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006730:	6463      	str	r3, [r4, #68]	; 0x44
 8006732:	e7c5      	b.n	80066c0 <set_calibration_context.lto_priv.291+0x20>
 8006734:	2203      	movs	r2, #3
 8006736:	2101      	movs	r1, #1
 8006738:	2300      	movs	r3, #0
 800673a:	e7f0      	b.n	800671e <set_calibration_context.lto_priv.291+0x7e>
 800673c:	200002b0 	.word	0x200002b0
 8006740:	0801cf9c 	.word	0x0801cf9c
 8006744:	0801d11a 	.word	0x0801d11a

08006748 <get_pll_freq>:
 8006748:	b510      	push	{r4, lr}
 800674a:	f7ff fead 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 800674e:	1c01      	adds	r1, r0, #0
 8006750:	1c04      	adds	r4, r0, #0
 8006752:	4805      	ldr	r0, [pc, #20]	; (8006768 <get_pll_freq+0x20>)
 8006754:	f008 f808 	bl	800e768 <__aeabi_fdiv>
 8006758:	f00c ff7e 	bl	8013658 <roundf>
 800675c:	1c01      	adds	r1, r0, #0
 800675e:	1c20      	adds	r0, r4, #0
 8006760:	f008 f914 	bl	800e98c <__aeabi_fmul>
 8006764:	bd10      	pop	{r4, pc}
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	4f1502f9 	.word	0x4f1502f9

0800676c <points_to_meter.lto_priv.307>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	0004      	movs	r4, r0
 8006770:	f7ff ffea 	bl	8006748 <get_pll_freq>
 8006774:	1c05      	adds	r5, r0, #0
 8006776:	0020      	movs	r0, r4
 8006778:	f009 f83c 	bl	800f7f4 <__aeabi_i2f>
 800677c:	1c04      	adds	r4, r0, #0
 800677e:	20fe      	movs	r0, #254	; 0xfe
 8006780:	1c29      	adds	r1, r5, #0
 8006782:	0580      	lsls	r0, r0, #22
 8006784:	f007 fff0 	bl	800e768 <__aeabi_fdiv>
 8006788:	1c01      	adds	r1, r0, #0
 800678a:	1c20      	adds	r0, r4, #0
 800678c:	f008 f8fe 	bl	800e98c <__aeabi_fmul>
 8006790:	4903      	ldr	r1, [pc, #12]	; (80067a0 <points_to_meter.lto_priv.307+0x34>)
 8006792:	f008 f8fb 	bl	800e98c <__aeabi_fmul>
 8006796:	21fc      	movs	r1, #252	; 0xfc
 8006798:	0589      	lsls	r1, r1, #22
 800679a:	f008 f8f7 	bl	800e98c <__aeabi_fmul>
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	4d8ef3c2 	.word	0x4d8ef3c2

080067a4 <meter_to_points.lto_priv.311>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	1c04      	adds	r4, r0, #0
 80067a8:	f7ff ffce 	bl	8006748 <get_pll_freq>
 80067ac:	1c21      	adds	r1, r4, #0
 80067ae:	1c06      	adds	r6, r0, #0
 80067b0:	1c20      	adds	r0, r4, #0
 80067b2:	f007 fe3f 	bl	800e434 <__aeabi_fadd>
 80067b6:	1c05      	adds	r5, r0, #0
 80067b8:	20fe      	movs	r0, #254	; 0xfe
 80067ba:	1c31      	adds	r1, r6, #0
 80067bc:	0580      	lsls	r0, r0, #22
 80067be:	f007 ffd3 	bl	800e768 <__aeabi_fdiv>
 80067c2:	490c      	ldr	r1, [pc, #48]	; (80067f4 <meter_to_points.lto_priv.311+0x50>)
 80067c4:	f008 f8e2 	bl	800e98c <__aeabi_fmul>
 80067c8:	1c01      	adds	r1, r0, #0
 80067ca:	1c28      	adds	r0, r5, #0
 80067cc:	f007 ffcc 	bl	800e768 <__aeabi_fdiv>
 80067d0:	2100      	movs	r1, #0
 80067d2:	1c05      	adds	r5, r0, #0
 80067d4:	1c20      	adds	r0, r4, #0
 80067d6:	f008 fdd1 	bl	800f37c <__aeabi_fcmplt>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d107      	bne.n	80067ee <meter_to_points.lto_priv.311+0x4a>
 80067de:	21fc      	movs	r1, #252	; 0xfc
 80067e0:	0589      	lsls	r1, r1, #22
 80067e2:	1c28      	adds	r0, r5, #0
 80067e4:	f007 fe26 	bl	800e434 <__aeabi_fadd>
 80067e8:	f008 ffe4 	bl	800f7b4 <__aeabi_f2iz>
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
 80067ee:	21bf      	movs	r1, #191	; 0xbf
 80067f0:	0609      	lsls	r1, r1, #24
 80067f2:	e7f6      	b.n	80067e2 <meter_to_points.lto_priv.311+0x3e>
 80067f4:	4d8ef3c2 	.word	0x4d8ef3c2

080067f8 <acc_base_configuration_check.part.6>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80067fc:	2d04      	cmp	r5, #4
 80067fe:	d908      	bls.n	8006812 <acc_base_configuration_check.part.6+0x1a>
 8006800:	4b33      	ldr	r3, [pc, #204]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 8006802:	4a34      	ldr	r2, [pc, #208]	; (80068d4 <acc_base_configuration_check.part.6+0xdc>)
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	4934      	ldr	r1, [pc, #208]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 8006808:	2000      	movs	r0, #0
 800680a:	4798      	blx	r3
 800680c:	2400      	movs	r4, #0
 800680e:	0020      	movs	r0, r4
 8006810:	bd70      	pop	{r4, r5, r6, pc}
 8006812:	2d04      	cmp	r5, #4
 8006814:	d113      	bne.n	800683e <acc_base_configuration_check.part.6+0x46>
 8006816:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 8006818:	69dc      	ldr	r4, [r3, #28]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d105      	bne.n	800682a <acc_base_configuration_check.part.6+0x32>
 800681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006820:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <acc_base_configuration_check.part.6+0xe4>)
 8006822:	492d      	ldr	r1, [pc, #180]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 8006824:	0020      	movs	r0, r4
 8006826:	4798      	blx	r3
 8006828:	e7f1      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 800682a:	7902      	ldrb	r2, [r0, #4]
 800682c:	2a03      	cmp	r2, #3
 800682e:	d106      	bne.n	800683e <acc_base_configuration_check.part.6+0x46>
 8006830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006832:	4a2b      	ldr	r2, [pc, #172]	; (80068e0 <acc_base_configuration_check.part.6+0xe8>)
 8006834:	4928      	ldr	r1, [pc, #160]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 8006836:	2000      	movs	r0, #0
 8006838:	4798      	blx	r3
 800683a:	2400      	movs	r4, #0
 800683c:	e7e7      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 800683e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006840:	2b16      	cmp	r3, #22
 8006842:	d907      	bls.n	8006854 <acc_base_configuration_check.part.6+0x5c>
 8006844:	4b22      	ldr	r3, [pc, #136]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 8006846:	4a27      	ldr	r2, [pc, #156]	; (80068e4 <acc_base_configuration_check.part.6+0xec>)
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	4923      	ldr	r1, [pc, #140]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 800684c:	2000      	movs	r0, #0
 800684e:	4798      	blx	r3
 8006850:	2400      	movs	r4, #0
 8006852:	e7dc      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 8006854:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8006856:	3b01      	subs	r3, #1
 8006858:	2b3e      	cmp	r3, #62	; 0x3e
 800685a:	d907      	bls.n	800686c <acc_base_configuration_check.part.6+0x74>
 800685c:	4b1c      	ldr	r3, [pc, #112]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 800685e:	4a22      	ldr	r2, [pc, #136]	; (80068e8 <acc_base_configuration_check.part.6+0xf0>)
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	491d      	ldr	r1, [pc, #116]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 8006864:	2000      	movs	r0, #0
 8006866:	4798      	blx	r3
 8006868:	2400      	movs	r4, #0
 800686a:	e7d0      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 800686c:	7903      	ldrb	r3, [r0, #4]
 800686e:	2d00      	cmp	r5, #0
 8006870:	d109      	bne.n	8006886 <acc_base_configuration_check.part.6+0x8e>
 8006872:	2b03      	cmp	r3, #3
 8006874:	d115      	bne.n	80068a2 <acc_base_configuration_check.part.6+0xaa>
 8006876:	4b16      	ldr	r3, [pc, #88]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 8006878:	4a1c      	ldr	r2, [pc, #112]	; (80068ec <acc_base_configuration_check.part.6+0xf4>)
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	4916      	ldr	r1, [pc, #88]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 800687e:	0028      	movs	r0, r5
 8006880:	4798      	blx	r3
 8006882:	002c      	movs	r4, r5
 8006884:	e7c3      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 8006886:	2b03      	cmp	r3, #3
 8006888:	d10b      	bne.n	80068a2 <acc_base_configuration_check.part.6+0xaa>
 800688a:	0003      	movs	r3, r0
 800688c:	334e      	adds	r3, #78	; 0x4e
 800688e:	781c      	ldrb	r4, [r3, #0]
 8006890:	2c00      	cmp	r4, #0
 8006892:	d106      	bne.n	80068a2 <acc_base_configuration_check.part.6+0xaa>
 8006894:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <acc_base_configuration_check.part.6+0xf8>)
 8006898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689a:	490f      	ldr	r1, [pc, #60]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 800689c:	0020      	movs	r0, r4
 800689e:	4798      	blx	r3
 80068a0:	e7b5      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 80068a2:	2304      	movs	r3, #4
 80068a4:	439d      	bics	r5, r3
 80068a6:	d103      	bne.n	80068b0 <acc_base_configuration_check.part.6+0xb8>
 80068a8:	0003      	movs	r3, r0
 80068aa:	2201      	movs	r2, #1
 80068ac:	334e      	adds	r3, #78	; 0x4e
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	3032      	adds	r0, #50	; 0x32
 80068b2:	7803      	ldrb	r3, [r0, #0]
 80068b4:	2401      	movs	r4, #1
 80068b6:	2b06      	cmp	r3, #6
 80068b8:	d0a9      	beq.n	800680e <acc_base_configuration_check.part.6+0x16>
 80068ba:	2b09      	cmp	r3, #9
 80068bc:	d0a7      	beq.n	800680e <acc_base_configuration_check.part.6+0x16>
 80068be:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <acc_base_configuration_check.part.6+0xd8>)
 80068c0:	4a0c      	ldr	r2, [pc, #48]	; (80068f4 <acc_base_configuration_check.part.6+0xfc>)
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	4904      	ldr	r1, [pc, #16]	; (80068d8 <acc_base_configuration_check.part.6+0xe0>)
 80068c6:	2000      	movs	r0, #0
 80068c8:	4798      	blx	r3
 80068ca:	2400      	movs	r4, #0
 80068cc:	e79f      	b.n	800680e <acc_base_configuration_check.part.6+0x16>
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	200002b0 	.word	0x200002b0
 80068d4:	0801d18a 	.word	0x0801d18a
 80068d8:	0801d1a2 	.word	0x0801d1a2
 80068dc:	0801d1b5 	.word	0x0801d1b5
 80068e0:	0801d1f4 	.word	0x0801d1f4
 80068e4:	0801d236 	.word	0x0801d236
 80068e8:	0801d26a 	.word	0x0801d26a
 80068ec:	0801d2bc 	.word	0x0801d2bc
 80068f0:	0801d2f8 	.word	0x0801d2f8
 80068f4:	0801d338 	.word	0x0801d338

080068f8 <configuration_is_valid.lto_priv.681>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	0004      	movs	r4, r0
 80068fc:	2001      	movs	r0, #1
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d10a      	bne.n	8006918 <configuration_is_valid.lto_priv.681+0x20>
 8006902:	4a07      	ldr	r2, [pc, #28]	; (8006920 <configuration_is_valid.lto_priv.681+0x28>)
 8006904:	0013      	movs	r3, r2
 8006906:	3330      	adds	r3, #48	; 0x30
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <configuration_is_valid.lto_priv.681+0x22>
 800690e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006910:	4904      	ldr	r1, [pc, #16]	; (8006924 <configuration_is_valid.lto_priv.681+0x2c>)
 8006912:	4a05      	ldr	r2, [pc, #20]	; (8006928 <configuration_is_valid.lto_priv.681+0x30>)
 8006914:	4798      	blx	r3
 8006916:	0020      	movs	r0, r4
 8006918:	bd10      	pop	{r4, pc}
 800691a:	0018      	movs	r0, r3
 800691c:	e7fc      	b.n	8006918 <configuration_is_valid.lto_priv.681+0x20>
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	200002b0 	.word	0x200002b0
 8006924:	0801d1a2 	.word	0x0801d1a2
 8006928:	0801d34c 	.word	0x0801d34c

0800692c <acc_sensor_manager_prepare_measurement>:
 800692c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800692e:	46de      	mov	lr, fp
 8006930:	4657      	mov	r7, sl
 8006932:	464e      	mov	r6, r9
 8006934:	4645      	mov	r5, r8
 8006936:	b5e0      	push	{r5, r6, r7, lr}
 8006938:	0004      	movs	r4, r0
 800693a:	b089      	sub	sp, #36	; 0x24
 800693c:	0008      	movs	r0, r1
 800693e:	000f      	movs	r7, r1
 8006940:	469a      	mov	sl, r3
 8006942:	9201      	str	r2, [sp, #4]
 8006944:	f7fc f9f7 	bl	8002d36 <acc_base_configuration_sensor_get>
 8006948:	0006      	movs	r6, r0
 800694a:	0038      	movs	r0, r7
 800694c:	f7ff ffd4 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006950:	2300      	movs	r3, #0
 8006952:	469b      	mov	fp, r3
 8006954:	4298      	cmp	r0, r3
 8006956:	d003      	beq.n	8006960 <acc_sensor_manager_prepare_measurement+0x34>
 8006958:	003b      	movs	r3, r7
 800695a:	334c      	adds	r3, #76	; 0x4c
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	469b      	mov	fp, r3
 8006960:	2348      	movs	r3, #72	; 0x48
 8006962:	4373      	muls	r3, r6
 8006964:	3b48      	subs	r3, #72	; 0x48
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	9900      	ldr	r1, [sp, #0]
 800696a:	4b63      	ldr	r3, [pc, #396]	; (8006af8 <acc_sensor_manager_prepare_measurement+0x1cc>)
 800696c:	468c      	mov	ip, r1
 800696e:	4698      	mov	r8, r3
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4862      	ldr	r0, [pc, #392]	; (8006afc <acc_sensor_manager_prepare_measurement+0x1d0>)
 8006974:	4463      	add	r3, ip
 8006976:	0019      	movs	r1, r3
 8006978:	001a      	movs	r2, r3
 800697a:	2300      	movs	r3, #0
 800697c:	3142      	adds	r1, #66	; 0x42
 800697e:	700b      	strb	r3, [r1, #0]
 8006980:	4b5f      	ldr	r3, [pc, #380]	; (8006b00 <acc_sensor_manager_prepare_measurement+0x1d4>)
 8006982:	6450      	str	r0, [r2, #68]	; 0x44
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	9003      	str	r0, [sp, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <acc_sensor_manager_prepare_measurement+0x68>
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d000      	beq.n	8006994 <acc_sensor_manager_prepare_measurement+0x68>
 8006992:	e0a7      	b.n	8006ae4 <acc_sensor_manager_prepare_measurement+0x1b8>
 8006994:	4653      	mov	r3, sl
 8006996:	63a3      	str	r3, [r4, #56]	; 0x38
 8006998:	0013      	movs	r3, r2
 800699a:	3341      	adds	r3, #65	; 0x41
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	9302      	str	r3, [sp, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d161      	bne.n	8006a68 <acc_sensor_manager_prepare_measurement+0x13c>
 80069a4:	700b      	strb	r3, [r1, #0]
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	0030      	movs	r0, r6
 80069aa:	6453      	str	r3, [r2, #68]	; 0x44
 80069ac:	f7fe fc12 	bl	80051d4 <acc_rss_integration_sensor_device_power_on>
 80069b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069b2:	69a0      	ldr	r0, [r4, #24]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4798      	blx	r3
 80069b8:	1e05      	subs	r5, r0, #0
 80069ba:	d036      	beq.n	8006a2a <acc_sensor_manager_prepare_measurement+0xfe>
 80069bc:	0031      	movs	r1, r6
 80069be:	200b      	movs	r0, #11
 80069c0:	f007 faa6 	bl	800df10 <acc_probes_execute_primitive_probe>
 80069c4:	ab05      	add	r3, sp, #20
 80069c6:	4699      	mov	r9, r3
 80069c8:	220c      	movs	r2, #12
 80069ca:	9902      	ldr	r1, [sp, #8]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f00c fc51 	bl	8013274 <memset>
 80069d2:	464b      	mov	r3, r9
 80069d4:	9a03      	ldr	r2, [sp, #12]
 80069d6:	9900      	ldr	r1, [sp, #0]
 80069d8:	605a      	str	r2, [r3, #4]
 80069da:	4643      	mov	r3, r8
 80069dc:	468c      	mov	ip, r1
 80069de:	0020      	movs	r0, r4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4651      	mov	r1, sl
 80069e4:	4463      	add	r3, ip
 80069e6:	001a      	movs	r2, r3
 80069e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069ea:	3018      	adds	r0, #24
 80069ec:	68dd      	ldr	r5, [r3, #12]
 80069ee:	464b      	mov	r3, r9
 80069f0:	47a8      	blx	r5
 80069f2:	1e05      	subs	r5, r0, #0
 80069f4:	d030      	beq.n	8006a58 <acc_sensor_manager_prepare_measurement+0x12c>
 80069f6:	9a00      	ldr	r2, [sp, #0]
 80069f8:	4643      	mov	r3, r8
 80069fa:	4694      	mov	ip, r2
 80069fc:	2201      	movs	r2, #1
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4463      	add	r3, ip
 8006a02:	3341      	adds	r3, #65	; 0x41
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	4642      	mov	r2, r8
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	4694      	mov	ip, r2
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4463      	add	r3, ip
 8006a12:	001a      	movs	r2, r3
 8006a14:	7809      	ldrb	r1, [r1, #0]
 8006a16:	3242      	adds	r2, #66	; 0x42
 8006a18:	7011      	strb	r1, [r2, #0]
 8006a1a:	464a      	mov	r2, r9
 8006a1c:	6852      	ldr	r2, [r2, #4]
 8006a1e:	0031      	movs	r1, r6
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
 8006a22:	200c      	movs	r0, #12
 8006a24:	f007 fa74 	bl	800df10 <acc_probes_execute_primitive_probe>
 8006a28:	e006      	b.n	8006a38 <acc_sensor_manager_prepare_measurement+0x10c>
 8006a2a:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <acc_sensor_manager_prepare_measurement+0x1d8>)
 8006a2c:	4a36      	ldr	r2, [pc, #216]	; (8006b08 <acc_sensor_manager_prepare_measurement+0x1dc>)
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	4936      	ldr	r1, [pc, #216]	; (8006b0c <acc_sensor_manager_prepare_measurement+0x1e0>)
 8006a32:	4699      	mov	r9, r3
 8006a34:	0033      	movs	r3, r6
 8006a36:	47c8      	blx	r9
 8006a38:	0030      	movs	r0, r6
 8006a3a:	f7ff fd07 	bl	800644c <acc_rss_integration_sensor_device_power_off>
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	d112      	bne.n	8006a68 <acc_sensor_manager_prepare_measurement+0x13c>
 8006a42:	1d20      	adds	r0, r4, #4
 8006a44:	f7fe fba4 	bl	8005190 <acc_sweep_manager_release>
 8006a48:	0028      	movs	r0, r5
 8006a4a:	b009      	add	sp, #36	; 0x24
 8006a4c:	bc3c      	pop	{r2, r3, r4, r5}
 8006a4e:	4690      	mov	r8, r2
 8006a50:	4699      	mov	r9, r3
 8006a52:	46a2      	mov	sl, r4
 8006a54:	46ab      	mov	fp, r5
 8006a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a58:	4b2a      	ldr	r3, [pc, #168]	; (8006b04 <acc_sensor_manager_prepare_measurement+0x1d8>)
 8006a5a:	4a2d      	ldr	r2, [pc, #180]	; (8006b10 <acc_sensor_manager_prepare_measurement+0x1e4>)
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5e:	492b      	ldr	r1, [pc, #172]	; (8006b0c <acc_sensor_manager_prepare_measurement+0x1e0>)
 8006a60:	469a      	mov	sl, r3
 8006a62:	0033      	movs	r3, r6
 8006a64:	47d0      	blx	sl
 8006a66:	e7ce      	b.n	8006a06 <acc_sensor_manager_prepare_measurement+0xda>
 8006a68:	465b      	mov	r3, fp
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00e      	beq.n	8006a8c <acc_sensor_manager_prepare_measurement+0x160>
 8006a6e:	465a      	mov	r2, fp
 8006a70:	9b01      	ldr	r3, [sp, #4]
 8006a72:	829a      	strh	r2, [r3, #20]
 8006a74:	230e      	movs	r3, #14
 8006a76:	a805      	add	r0, sp, #20
 8006a78:	7003      	strb	r3, [r0, #0]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	3b07      	subs	r3, #7
 8006a7e:	9901      	ldr	r1, [sp, #4]
 8006a80:	6046      	str	r6, [r0, #4]
 8006a82:	6083      	str	r3, [r0, #8]
 8006a84:	2501      	movs	r5, #1
 8006a86:	f006 fdad 	bl	800d5e4 <acc_probes_execute>
 8006a8a:	e7dd      	b.n	8006a48 <acc_sensor_manager_prepare_measurement+0x11c>
 8006a8c:	0038      	movs	r0, r7
 8006a8e:	f7fb fb02 	bl	8002096 <acc_base_configuration_noise_level_normalization_get>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d0ee      	beq.n	8006a74 <acc_sensor_manager_prepare_measurement+0x148>
 8006a96:	2214      	movs	r2, #20
 8006a98:	4694      	mov	ip, r2
 8006a9a:	69a7      	ldr	r7, [r4, #24]
 8006a9c:	9b01      	ldr	r3, [sp, #4]
 8006a9e:	0038      	movs	r0, r7
 8006aa0:	4463      	add	r3, ip
 8006aa2:	469b      	mov	fp, r3
 8006aa4:	f7fe fb96 	bl	80051d4 <acc_rss_integration_sensor_device_power_on>
 8006aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006aaa:	2148      	movs	r1, #72	; 0x48
 8006aac:	469a      	mov	sl, r3
 8006aae:	2318      	movs	r3, #24
 8006ab0:	4699      	mov	r9, r3
 8006ab2:	4643      	mov	r3, r8
 8006ab4:	4379      	muls	r1, r7
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3948      	subs	r1, #72	; 0x48
 8006aba:	1859      	adds	r1, r3, r1
 8006abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006abe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	4798      	blx	r3
 8006ac4:	44a1      	add	r9, r4
 8006ac6:	1e05      	subs	r5, r0, #0
 8006ac8:	d006      	beq.n	8006ad8 <acc_sensor_manager_prepare_measurement+0x1ac>
 8006aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006acc:	465a      	mov	r2, fp
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	4648      	mov	r0, r9
 8006ad4:	4798      	blx	r3
 8006ad6:	0005      	movs	r5, r0
 8006ad8:	0038      	movs	r0, r7
 8006ada:	f7ff fcb7 	bl	800644c <acc_rss_integration_sensor_device_power_off>
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d1c8      	bne.n	8006a74 <acc_sensor_manager_prepare_measurement+0x148>
 8006ae2:	e7ae      	b.n	8006a42 <acc_sensor_manager_prepare_measurement+0x116>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	9901      	ldr	r1, [sp, #4]
 8006ae8:	0038      	movs	r0, r7
 8006aea:	4798      	blx	r3
 8006aec:	1e05      	subs	r5, r0, #0
 8006aee:	d0ab      	beq.n	8006a48 <acc_sensor_manager_prepare_measurement+0x11c>
 8006af0:	465b      	mov	r3, fp
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0be      	beq.n	8006a74 <acc_sensor_manager_prepare_measurement+0x148>
 8006af6:	e7ba      	b.n	8006a6e <acc_sensor_manager_prepare_measurement+0x142>
 8006af8:	200004c0 	.word	0x200004c0
 8006afc:	ff800000 	.word	0xff800000
 8006b00:	200004c4 	.word	0x200004c4
 8006b04:	200002b0 	.word	0x200002b0
 8006b08:	0801d367 	.word	0x0801d367
 8006b0c:	0801d071 	.word	0x0801d071
 8006b10:	0801d3a2 	.word	0x0801d3a2

08006b14 <acc_sensor_manager_prepare_radar_engine>:
 8006b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b16:	464e      	mov	r6, r9
 8006b18:	4645      	mov	r5, r8
 8006b1a:	46de      	mov	lr, fp
 8006b1c:	4657      	mov	r7, sl
 8006b1e:	b5e0      	push	{r5, r6, r7, lr}
 8006b20:	4699      	mov	r9, r3
 8006b22:	1d03      	adds	r3, r0, #4
 8006b24:	b093      	sub	sp, #76	; 0x4c
 8006b26:	0005      	movs	r5, r0
 8006b28:	000c      	movs	r4, r1
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	4690      	mov	r8, r2
 8006b2e:	2100      	movs	r1, #0
 8006b30:	2234      	movs	r2, #52	; 0x34
 8006b32:	469a      	mov	sl, r3
 8006b34:	f00c fb9e 	bl	8013274 <memset>
 8006b38:	4b57      	ldr	r3, [pc, #348]	; (8006c98 <acc_sensor_manager_prepare_radar_engine+0x184>)
 8006b3a:	ae0a      	add	r6, sp, #40	; 0x28
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <acc_sensor_manager_prepare_radar_engine+0x34>
 8006b42:	681f      	ldr	r7, [r3, #0]
 8006b44:	2f00      	cmp	r7, #0
 8006b46:	d17b      	bne.n	8006c40 <acc_sensor_manager_prepare_radar_engine+0x12c>
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f7fc f8f4 	bl	8002d36 <acc_base_configuration_sensor_get>
 8006b4e:	4682      	mov	sl, r0
 8006b50:	0020      	movs	r0, r4
 8006b52:	f7fc f893 	bl	8002c7c <acc_base_configuration_wg_duration_get>
 8006b56:	af01      	add	r7, sp, #4
 8006b58:	8038      	strh	r0, [r7, #0]
 8006b5a:	0020      	movs	r0, r4
 8006b5c:	f7fc f899 	bl	8002c92 <acc_base_configuration_integrator_get>
 8006b60:	8078      	strh	r0, [r7, #2]
 8006b62:	0020      	movs	r0, r4
 8006b64:	f7ff fec8 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	d001      	beq.n	8006b72 <acc_sensor_manager_prepare_radar_engine+0x5e>
 8006b6e:	1da3      	adds	r3, r4, #6
 8006b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b72:	0020      	movs	r0, r4
 8006b74:	80bb      	strh	r3, [r7, #4]
 8006b76:	f7fc f8c2 	bl	8002cfe <acc_base_configuration_decrease_tx_emission_get>
 8006b7a:	4651      	mov	r1, sl
 8006b7c:	80f8      	strh	r0, [r7, #6]
 8006b7e:	2304      	movs	r3, #4
 8006b80:	003a      	movs	r2, r7
 8006b82:	2012      	movs	r0, #18
 8006b84:	f007 f9d0 	bl	800df28 <acc_probes_execute_uint16>
 8006b88:	2318      	movs	r3, #24
 8006b8a:	469a      	mov	sl, r3
 8006b8c:	44aa      	add	sl, r5
 8006b8e:	2220      	movs	r2, #32
 8006b90:	2100      	movs	r1, #0
 8006b92:	4650      	mov	r0, sl
 8006b94:	f00c fb6e 	bl	8013274 <memset>
 8006b98:	0021      	movs	r1, r4
 8006b9a:	4650      	mov	r0, sl
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	4798      	blx	r3
 8006ba0:	4683      	mov	fp, r0
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d017      	beq.n	8006bd6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	2100      	movs	r1, #0
 8006baa:	0030      	movs	r0, r6
 8006bac:	f00c fb62 	bl	8013274 <memset>
 8006bb0:	221c      	movs	r2, #28
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	a803      	add	r0, sp, #12
 8006bb6:	f00c fb5d 	bl	8013274 <memset>
 8006bba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bbc:	0032      	movs	r2, r6
 8006bbe:	681f      	ldr	r7, [r3, #0]
 8006bc0:	0021      	movs	r1, r4
 8006bc2:	ab03      	add	r3, sp, #12
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	47b8      	blx	r7
 8006bc8:	4683      	mov	fp, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d10d      	bne.n	8006bea <acc_sensor_manager_prepare_radar_engine+0xd6>
 8006bce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	4798      	blx	r3
 8006bd6:	0020      	movs	r0, r4
 8006bd8:	f7fc f8a3 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d036      	beq.n	8006c4e <acc_sensor_manager_prepare_radar_engine+0x13a>
 8006be0:	2804      	cmp	r0, #4
 8006be2:	d055      	beq.n	8006c90 <acc_sensor_manager_prepare_radar_engine+0x17c>
 8006be4:	2300      	movs	r3, #0
 8006be6:	702b      	strb	r3, [r5, #0]
 8006be8:	e033      	b.n	8006c52 <acc_sensor_manager_prepare_radar_engine+0x13e>
 8006bea:	4643      	mov	r3, r8
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <acc_sensor_manager_prepare_radar_engine+0xea>
 8006bf0:	0032      	movs	r2, r6
 8006bf2:	ca83      	ldmia	r2!, {r0, r1, r7}
 8006bf4:	c383      	stmia	r3!, {r0, r1, r7}
 8006bf6:	ca83      	ldmia	r2!, {r0, r1, r7}
 8006bf8:	c383      	stmia	r3!, {r0, r1, r7}
 8006bfa:	ca03      	ldmia	r2!, {r0, r1}
 8006bfc:	c303      	stmia	r3!, {r0, r1}
 8006bfe:	464b      	mov	r3, r9
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <acc_sensor_manager_prepare_radar_engine+0xfa>
 8006c04:	221c      	movs	r2, #28
 8006c06:	a903      	add	r1, sp, #12
 8006c08:	4648      	mov	r0, r9
 8006c0a:	f00e ff57 	bl	8015abc <memcpy>
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f7fc f860 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 8006c14:	2801      	cmp	r0, #1
 8006c16:	d010      	beq.n	8006c3a <acc_sensor_manager_prepare_radar_engine+0x126>
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f7fc f845 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 8006c1e:	1c01      	adds	r1, r0, #0
 8006c20:	481e      	ldr	r0, [pc, #120]	; (8006c9c <acc_sensor_manager_prepare_radar_engine+0x188>)
 8006c22:	f007 fda1 	bl	800e768 <__aeabi_fdiv>
 8006c26:	491d      	ldr	r1, [pc, #116]	; (8006c9c <acc_sensor_manager_prepare_radar_engine+0x188>)
 8006c28:	f007 fc04 	bl	800e434 <__aeabi_fadd>
 8006c2c:	f008 fbee 	bl	800f40c <__aeabi_f2uiz>
 8006c30:	2300      	movs	r3, #0
 8006c32:	6068      	str	r0, [r5, #4]
 8006c34:	60eb      	str	r3, [r5, #12]
 8006c36:	816b      	strh	r3, [r5, #10]
 8006c38:	e7cd      	b.n	8006bd6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 8006c3a:	20fa      	movs	r0, #250	; 0xfa
 8006c3c:	00c0      	lsls	r0, r0, #3
 8006c3e:	e7f7      	b.n	8006c30 <acc_sensor_manager_prepare_radar_engine+0x11c>
 8006c40:	464b      	mov	r3, r9
 8006c42:	4642      	mov	r2, r8
 8006c44:	0021      	movs	r1, r4
 8006c46:	4650      	mov	r0, sl
 8006c48:	47b8      	blx	r7
 8006c4a:	4683      	mov	fp, r0
 8006c4c:	e7c3      	b.n	8006bd6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 8006c4e:	2302      	movs	r3, #2
 8006c50:	702b      	strb	r3, [r5, #0]
 8006c52:	0020      	movs	r0, r4
 8006c54:	f7fc f83e 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 8006c58:	4243      	negs	r3, r0
 8006c5a:	4158      	adcs	r0, r3
 8006c5c:	7068      	strb	r0, [r5, #1]
 8006c5e:	0020      	movs	r0, r4
 8006c60:	f7fb fa10 	bl	8002084 <acc_base_configuration_asynchronous_measurement_get>
 8006c64:	70a8      	strb	r0, [r5, #2]
 8006c66:	0020      	movs	r0, r4
 8006c68:	f7fc f865 	bl	8002d36 <acc_base_configuration_sensor_get>
 8006c6c:	2305      	movs	r3, #5
 8006c6e:	6070      	str	r0, [r6, #4]
 8006c70:	7033      	strb	r3, [r6, #0]
 8006c72:	0030      	movs	r0, r6
 8006c74:	3302      	adds	r3, #2
 8006c76:	221c      	movs	r2, #28
 8006c78:	4649      	mov	r1, r9
 8006c7a:	60b3      	str	r3, [r6, #8]
 8006c7c:	f006 fcb2 	bl	800d5e4 <acc_probes_execute>
 8006c80:	4658      	mov	r0, fp
 8006c82:	b013      	add	sp, #76	; 0x4c
 8006c84:	bc3c      	pop	{r2, r3, r4, r5}
 8006c86:	4690      	mov	r8, r2
 8006c88:	4699      	mov	r9, r3
 8006c8a:	46a2      	mov	sl, r4
 8006c8c:	46ab      	mov	fp, r5
 8006c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c90:	2301      	movs	r3, #1
 8006c92:	702b      	strb	r3, [r5, #0]
 8006c94:	e7dd      	b.n	8006c52 <acc_sensor_manager_prepare_radar_engine+0x13e>
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	200004c4 	.word	0x200004c4
 8006c9c:	44fa0000 	.word	0x44fa0000

08006ca0 <initialize.lto_priv.314>:
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	4657      	mov	r7, sl
 8006ca4:	46de      	mov	lr, fp
 8006ca6:	464e      	mov	r6, r9
 8006ca8:	4645      	mov	r5, r8
 8006caa:	b5e0      	push	{r5, r6, r7, lr}
 8006cac:	000f      	movs	r7, r1
 8006cae:	b09d      	sub	sp, #116	; 0x74
 8006cb0:	3732      	adds	r7, #50	; 0x32
 8006cb2:	9308      	str	r3, [sp, #32]
 8006cb4:	783b      	ldrb	r3, [r7, #0]
 8006cb6:	4683      	mov	fp, r0
 8006cb8:	000e      	movs	r6, r1
 8006cba:	4692      	mov	sl, r2
 8006cbc:	2b06      	cmp	r3, #6
 8006cbe:	d00f      	beq.n	8006ce0 <initialize.lto_priv.314+0x40>
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d00d      	beq.n	8006ce0 <initialize.lto_priv.314+0x40>
 8006cc4:	4bb7      	ldr	r3, [pc, #732]	; (8006fa4 <initialize.lto_priv.314+0x304>)
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	4ab7      	ldr	r2, [pc, #732]	; (8006fa8 <initialize.lto_priv.314+0x308>)
 8006ccc:	49b7      	ldr	r1, [pc, #732]	; (8006fac <initialize.lto_priv.314+0x30c>)
 8006cce:	4798      	blx	r3
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	b01d      	add	sp, #116	; 0x74
 8006cd4:	bc3c      	pop	{r2, r3, r4, r5}
 8006cd6:	4690      	mov	r8, r2
 8006cd8:	4699      	mov	r9, r3
 8006cda:	46a2      	mov	sl, r4
 8006cdc:	46ab      	mov	fp, r5
 8006cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ce0:	465b      	mov	r3, fp
 8006ce2:	0030      	movs	r0, r6
 8006ce4:	695d      	ldr	r5, [r3, #20]
 8006ce6:	f7ff fe07 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d040      	beq.n	8006d70 <initialize.lto_priv.314+0xd0>
 8006cee:	0033      	movs	r3, r6
 8006cf0:	332c      	adds	r3, #44	; 0x2c
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d03b      	beq.n	8006d70 <initialize.lto_priv.314+0xd0>
 8006cf8:	0030      	movs	r0, r6
 8006cfa:	f7ff fdfd 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006cfe:	2400      	movs	r4, #0
 8006d00:	42a0      	cmp	r0, r4
 8006d02:	d001      	beq.n	8006d08 <initialize.lto_priv.314+0x68>
 8006d04:	2334      	movs	r3, #52	; 0x34
 8006d06:	5ef4      	ldrsh	r4, [r6, r3]
 8006d08:	b223      	sxth	r3, r4
 8006d0a:	0030      	movs	r0, r6
 8006d0c:	9307      	str	r3, [sp, #28]
 8006d0e:	f7ff fdf3 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006d12:	2300      	movs	r3, #0
 8006d14:	b2a4      	uxth	r4, r4
 8006d16:	4298      	cmp	r0, r3
 8006d18:	d001      	beq.n	8006d1e <initialize.lto_priv.314+0x7e>
 8006d1a:	2236      	movs	r2, #54	; 0x36
 8006d1c:	5eb3      	ldrsh	r3, [r6, r2]
 8006d1e:	18e4      	adds	r4, r4, r3
 8006d20:	b223      	sxth	r3, r4
 8006d22:	4698      	mov	r8, r3
 8006d24:	0030      	movs	r0, r6
 8006d26:	f7fb f9bf 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 8006d2a:	4643      	mov	r3, r8
 8006d2c:	9a07      	ldr	r2, [sp, #28]
 8006d2e:	0001      	movs	r1, r0
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f008 facc 	bl	800f2d0 <__aeabi_idivmod>
 8006d38:	1e0c      	subs	r4, r1, #0
 8006d3a:	dd0e      	ble.n	8006d5a <initialize.lto_priv.314+0xba>
 8006d3c:	4b99      	ldr	r3, [pc, #612]	; (8006fa4 <initialize.lto_priv.314+0x304>)
 8006d3e:	001a      	movs	r2, r3
 8006d40:	3230      	adds	r2, #48	; 0x30
 8006d42:	7812      	ldrb	r2, [r2, #0]
 8006d44:	2a01      	cmp	r2, #1
 8006d46:	d904      	bls.n	8006d52 <initialize.lto_priv.314+0xb2>
 8006d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4a:	4a99      	ldr	r2, [pc, #612]	; (8006fb0 <initialize.lto_priv.314+0x310>)
 8006d4c:	4997      	ldr	r1, [pc, #604]	; (8006fac <initialize.lto_priv.314+0x30c>)
 8006d4e:	2002      	movs	r0, #2
 8006d50:	4798      	blx	r3
 8006d52:	4643      	mov	r3, r8
 8006d54:	1b1c      	subs	r4, r3, r4
 8006d56:	b223      	sxth	r3, r4
 8006d58:	4698      	mov	r8, r3
 8006d5a:	9b07      	ldr	r3, [sp, #28]
 8006d5c:	4543      	cmp	r3, r8
 8006d5e:	dd28      	ble.n	8006db2 <initialize.lto_priv.314+0x112>
 8006d60:	4b90      	ldr	r3, [pc, #576]	; (8006fa4 <initialize.lto_priv.314+0x304>)
 8006d62:	2000      	movs	r0, #0
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	4a93      	ldr	r2, [pc, #588]	; (8006fb4 <initialize.lto_priv.314+0x314>)
 8006d68:	4990      	ldr	r1, [pc, #576]	; (8006fac <initialize.lto_priv.314+0x30c>)
 8006d6a:	4798      	blx	r3
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	e7b0      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 8006d70:	0030      	movs	r0, r6
 8006d72:	f7ff fdc1 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d016      	beq.n	8006da8 <initialize.lto_priv.314+0x108>
 8006d7a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006d7c:	4698      	mov	r8, r3
 8006d7e:	0030      	movs	r0, r6
 8006d80:	f7ff fdba 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d012      	beq.n	8006dae <initialize.lto_priv.314+0x10e>
 8006d88:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	f007 fb52 	bl	800e434 <__aeabi_fadd>
 8006d90:	1c04      	adds	r4, r0, #0
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7ff fd06 	bl	80067a4 <meter_to_points.lto_priv.311>
 8006d98:	b203      	sxth	r3, r0
 8006d9a:	1c20      	adds	r0, r4, #0
 8006d9c:	9307      	str	r3, [sp, #28]
 8006d9e:	f7ff fd01 	bl	80067a4 <meter_to_points.lto_priv.311>
 8006da2:	b203      	sxth	r3, r0
 8006da4:	4698      	mov	r8, r3
 8006da6:	e7bd      	b.n	8006d24 <initialize.lto_priv.314+0x84>
 8006da8:	2300      	movs	r3, #0
 8006daa:	4698      	mov	r8, r3
 8006dac:	e7e7      	b.n	8006d7e <initialize.lto_priv.314+0xde>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e7eb      	b.n	8006d8a <initialize.lto_priv.314+0xea>
 8006db2:	0030      	movs	r0, r6
 8006db4:	f7ff fda0 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	d005      	beq.n	8006dc8 <initialize.lto_priv.314+0x128>
 8006dbc:	0033      	movs	r3, r6
 8006dbe:	336e      	adds	r3, #110	; 0x6e
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d000      	beq.n	8006dc8 <initialize.lto_priv.314+0x128>
 8006dc6:	e1d7      	b.n	8007178 <initialize.lto_priv.314+0x4d8>
 8006dc8:	0033      	movs	r3, r6
 8006dca:	332e      	adds	r3, #46	; 0x2e
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d100      	bne.n	8006dd4 <initialize.lto_priv.314+0x134>
 8006dd2:	e0d2      	b.n	8006f7a <initialize.lto_priv.314+0x2da>
 8006dd4:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006dd6:	b213      	sxth	r3, r2
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	2007      	movs	r0, #7
 8006ddc:	015b      	lsls	r3, r3, #5
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	0019      	movs	r1, r3
 8006de2:	0152      	lsls	r2, r2, #5
 8006de4:	3a1a      	subs	r2, #26
 8006de6:	b212      	sxth	r2, r2
 8006de8:	17d4      	asrs	r4, r2, #31
 8006dea:	4004      	ands	r4, r0
 8006dec:	18a2      	adds	r2, r4, r2
 8006dee:	10d2      	asrs	r2, r2, #3
 8006df0:	00d2      	lsls	r2, r2, #3
 8006df2:	390f      	subs	r1, #15
 8006df4:	1a8c      	subs	r4, r1, r2
 8006df6:	9a07      	ldr	r2, [sp, #28]
 8006df8:	b224      	sxth	r4, r4
 8006dfa:	4294      	cmp	r4, r2
 8006dfc:	dc00      	bgt.n	8006e00 <initialize.lto_priv.314+0x160>
 8006dfe:	e0e7      	b.n	8006fd0 <initialize.lto_priv.314+0x330>
 8006e00:	4b68      	ldr	r3, [pc, #416]	; (8006fa4 <initialize.lto_priv.314+0x304>)
 8006e02:	0010      	movs	r0, r2
 8006e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e06:	9308      	str	r3, [sp, #32]
 8006e08:	f7ff fcb0 	bl	800676c <points_to_meter.lto_priv.307>
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	f008 fab5 	bl	800f37c <__aeabi_fcmplt>
 8006e12:	4d69      	ldr	r5, [pc, #420]	; (8006fb8 <initialize.lto_priv.314+0x318>)
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d100      	bne.n	8006e1a <initialize.lto_priv.314+0x17a>
 8006e18:	4d68      	ldr	r5, [pc, #416]	; (8006fbc <initialize.lto_priv.314+0x31c>)
 8006e1a:	9807      	ldr	r0, [sp, #28]
 8006e1c:	f7ff fca6 	bl	800676c <points_to_meter.lto_priv.307>
 8006e20:	1c06      	adds	r6, r0, #0
 8006e22:	9807      	ldr	r0, [sp, #28]
 8006e24:	f7ff fca2 	bl	800676c <points_to_meter.lto_priv.307>
 8006e28:	2100      	movs	r1, #0
 8006e2a:	f008 faa7 	bl	800f37c <__aeabi_fcmplt>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d100      	bne.n	8006e34 <initialize.lto_priv.314+0x194>
 8006e32:	e0a4      	b.n	8006f7e <initialize.lto_priv.314+0x2de>
 8006e34:	4962      	ldr	r1, [pc, #392]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006e36:	1c30      	adds	r0, r6, #0
 8006e38:	f007 fda8 	bl	800e98c <__aeabi_fmul>
 8006e3c:	4961      	ldr	r1, [pc, #388]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006e3e:	f007 faf9 	bl	800e434 <__aeabi_fadd>
 8006e42:	f008 fae3 	bl	800f40c <__aeabi_f2uiz>
 8006e46:	0007      	movs	r7, r0
 8006e48:	9807      	ldr	r0, [sp, #28]
 8006e4a:	f7ff fc8f 	bl	800676c <points_to_meter.lto_priv.307>
 8006e4e:	1c06      	adds	r6, r0, #0
 8006e50:	9807      	ldr	r0, [sp, #28]
 8006e52:	f7ff fc8b 	bl	800676c <points_to_meter.lto_priv.307>
 8006e56:	2100      	movs	r1, #0
 8006e58:	f008 fa90 	bl	800f37c <__aeabi_fcmplt>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d100      	bne.n	8006e62 <initialize.lto_priv.314+0x1c2>
 8006e60:	e090      	b.n	8006f84 <initialize.lto_priv.314+0x2e4>
 8006e62:	4957      	ldr	r1, [pc, #348]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006e64:	1c30      	adds	r0, r6, #0
 8006e66:	f007 fd91 	bl	800e98c <__aeabi_fmul>
 8006e6a:	4956      	ldr	r1, [pc, #344]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006e6c:	f007 fae2 	bl	800e434 <__aeabi_fadd>
 8006e70:	1c06      	adds	r6, r0, #0
 8006e72:	9807      	ldr	r0, [sp, #28]
 8006e74:	f7ff fc7a 	bl	800676c <points_to_meter.lto_priv.307>
 8006e78:	4680      	mov	r8, r0
 8006e7a:	9807      	ldr	r0, [sp, #28]
 8006e7c:	f7ff fc76 	bl	800676c <points_to_meter.lto_priv.307>
 8006e80:	2100      	movs	r1, #0
 8006e82:	f008 fa7b 	bl	800f37c <__aeabi_fcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d07f      	beq.n	8006f8a <initialize.lto_priv.314+0x2ea>
 8006e8a:	494d      	ldr	r1, [pc, #308]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	f007 fd7d 	bl	800e98c <__aeabi_fmul>
 8006e92:	494c      	ldr	r1, [pc, #304]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006e94:	f007 face 	bl	800e434 <__aeabi_fadd>
 8006e98:	f008 fab8 	bl	800f40c <__aeabi_f2uiz>
 8006e9c:	f008 fcf4 	bl	800f888 <__aeabi_ui2f>
 8006ea0:	1c01      	adds	r1, r0, #0
 8006ea2:	1c30      	adds	r0, r6, #0
 8006ea4:	f007 fea4 	bl	800ebf0 <__aeabi_fsub>
 8006ea8:	4947      	ldr	r1, [pc, #284]	; (8006fc8 <initialize.lto_priv.314+0x328>)
 8006eaa:	f007 fd6f 	bl	800e98c <__aeabi_fmul>
 8006eae:	f008 faad 	bl	800f40c <__aeabi_f2uiz>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	0020      	movs	r0, r4
 8006eb6:	f7ff fc59 	bl	800676c <points_to_meter.lto_priv.307>
 8006eba:	2100      	movs	r1, #0
 8006ebc:	f008 fa5e 	bl	800f37c <__aeabi_fcmplt>
 8006ec0:	4e3d      	ldr	r6, [pc, #244]	; (8006fb8 <initialize.lto_priv.314+0x318>)
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d100      	bne.n	8006ec8 <initialize.lto_priv.314+0x228>
 8006ec6:	4e3d      	ldr	r6, [pc, #244]	; (8006fbc <initialize.lto_priv.314+0x31c>)
 8006ec8:	0020      	movs	r0, r4
 8006eca:	f7ff fc4f 	bl	800676c <points_to_meter.lto_priv.307>
 8006ece:	4681      	mov	r9, r0
 8006ed0:	0020      	movs	r0, r4
 8006ed2:	f7ff fc4b 	bl	800676c <points_to_meter.lto_priv.307>
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f008 fa50 	bl	800f37c <__aeabi_fcmplt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d057      	beq.n	8006f90 <initialize.lto_priv.314+0x2f0>
 8006ee0:	4937      	ldr	r1, [pc, #220]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	f007 fd52 	bl	800e98c <__aeabi_fmul>
 8006ee8:	4936      	ldr	r1, [pc, #216]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006eea:	f007 faa3 	bl	800e434 <__aeabi_fadd>
 8006eee:	f008 fa8d 	bl	800f40c <__aeabi_f2uiz>
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	0020      	movs	r0, r4
 8006ef6:	f7ff fc39 	bl	800676c <points_to_meter.lto_priv.307>
 8006efa:	4682      	mov	sl, r0
 8006efc:	0020      	movs	r0, r4
 8006efe:	f7ff fc35 	bl	800676c <points_to_meter.lto_priv.307>
 8006f02:	2100      	movs	r1, #0
 8006f04:	f008 fa3a 	bl	800f37c <__aeabi_fcmplt>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	d044      	beq.n	8006f96 <initialize.lto_priv.314+0x2f6>
 8006f0c:	492c      	ldr	r1, [pc, #176]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f007 fd3c 	bl	800e98c <__aeabi_fmul>
 8006f14:	492b      	ldr	r1, [pc, #172]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006f16:	f007 fa8d 	bl	800e434 <__aeabi_fadd>
 8006f1a:	4682      	mov	sl, r0
 8006f1c:	0020      	movs	r0, r4
 8006f1e:	f7ff fc25 	bl	800676c <points_to_meter.lto_priv.307>
 8006f22:	4683      	mov	fp, r0
 8006f24:	0020      	movs	r0, r4
 8006f26:	f7ff fc21 	bl	800676c <points_to_meter.lto_priv.307>
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f008 fa26 	bl	800f37c <__aeabi_fcmplt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d033      	beq.n	8006f9c <initialize.lto_priv.314+0x2fc>
 8006f34:	4922      	ldr	r1, [pc, #136]	; (8006fc0 <initialize.lto_priv.314+0x320>)
 8006f36:	4658      	mov	r0, fp
 8006f38:	f007 fd28 	bl	800e98c <__aeabi_fmul>
 8006f3c:	4921      	ldr	r1, [pc, #132]	; (8006fc4 <initialize.lto_priv.314+0x324>)
 8006f3e:	f007 fa79 	bl	800e434 <__aeabi_fadd>
 8006f42:	f008 fa63 	bl	800f40c <__aeabi_f2uiz>
 8006f46:	f008 fc9f 	bl	800f888 <__aeabi_ui2f>
 8006f4a:	1c01      	adds	r1, r0, #0
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	f007 fe4f 	bl	800ebf0 <__aeabi_fsub>
 8006f52:	491d      	ldr	r1, [pc, #116]	; (8006fc8 <initialize.lto_priv.314+0x328>)
 8006f54:	f007 fd1a 	bl	800e98c <__aeabi_fmul>
 8006f58:	f008 fa58 	bl	800f40c <__aeabi_f2uiz>
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	9303      	str	r3, [sp, #12]
 8006f60:	4643      	mov	r3, r8
 8006f62:	9004      	str	r0, [sp, #16]
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	2000      	movs	r0, #0
 8006f68:	9602      	str	r6, [sp, #8]
 8006f6a:	9700      	str	r7, [sp, #0]
 8006f6c:	002b      	movs	r3, r5
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <initialize.lto_priv.314+0x32c>)
 8006f70:	490e      	ldr	r1, [pc, #56]	; (8006fac <initialize.lto_priv.314+0x30c>)
 8006f72:	9c08      	ldr	r4, [sp, #32]
 8006f74:	47a0      	blx	r4
 8006f76:	2000      	movs	r0, #0
 8006f78:	e6ab      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 8006f7a:	783a      	ldrb	r2, [r7, #0]
 8006f7c:	e72b      	b.n	8006dd6 <initialize.lto_priv.314+0x136>
 8006f7e:	21fe      	movs	r1, #254	; 0xfe
 8006f80:	0589      	lsls	r1, r1, #22
 8006f82:	e758      	b.n	8006e36 <initialize.lto_priv.314+0x196>
 8006f84:	21fe      	movs	r1, #254	; 0xfe
 8006f86:	0589      	lsls	r1, r1, #22
 8006f88:	e76c      	b.n	8006e64 <initialize.lto_priv.314+0x1c4>
 8006f8a:	21fe      	movs	r1, #254	; 0xfe
 8006f8c:	0589      	lsls	r1, r1, #22
 8006f8e:	e77d      	b.n	8006e8c <initialize.lto_priv.314+0x1ec>
 8006f90:	21fe      	movs	r1, #254	; 0xfe
 8006f92:	0589      	lsls	r1, r1, #22
 8006f94:	e7a5      	b.n	8006ee2 <initialize.lto_priv.314+0x242>
 8006f96:	21fe      	movs	r1, #254	; 0xfe
 8006f98:	0589      	lsls	r1, r1, #22
 8006f9a:	e7b8      	b.n	8006f0e <initialize.lto_priv.314+0x26e>
 8006f9c:	21fe      	movs	r1, #254	; 0xfe
 8006f9e:	0589      	lsls	r1, r1, #22
 8006fa0:	e7c9      	b.n	8006f36 <initialize.lto_priv.314+0x296>
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	200002b0 	.word	0x200002b0
 8006fa8:	0801d3c5 	.word	0x0801d3c5
 8006fac:	0801d158 	.word	0x0801d158
 8006fb0:	0801d3f0 	.word	0x0801d3f0
 8006fb4:	0801d423 	.word	0x0801d423
 8006fb8:	0801e12c 	.word	0x0801e12c
 8006fbc:	0801e057 	.word	0x0801e057
 8006fc0:	bf800000 	.word	0xbf800000
 8006fc4:	350637bd 	.word	0x350637bd
 8006fc8:	49742400 	.word	0x49742400
 8006fcc:	0801d452 	.word	0x0801d452
 8006fd0:	3b30      	subs	r3, #48	; 0x30
 8006fd2:	b21c      	sxth	r4, r3
 8006fd4:	4544      	cmp	r4, r8
 8006fd6:	db00      	blt.n	8006fda <initialize.lto_priv.314+0x33a>
 8006fd8:	e0ce      	b.n	8007178 <initialize.lto_priv.314+0x4d8>
 8006fda:	4bd7      	ldr	r3, [pc, #860]	; (8007338 <initialize.lto_priv.314+0x698>)
 8006fdc:	4640      	mov	r0, r8
 8006fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	f7ff fbc3 	bl	800676c <points_to_meter.lto_priv.307>
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	f008 f9c8 	bl	800f37c <__aeabi_fcmplt>
 8006fec:	4dd3      	ldr	r5, [pc, #844]	; (800733c <initialize.lto_priv.314+0x69c>)
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d100      	bne.n	8006ff4 <initialize.lto_priv.314+0x354>
 8006ff2:	4dd3      	ldr	r5, [pc, #844]	; (8007340 <initialize.lto_priv.314+0x6a0>)
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	f7ff fbb9 	bl	800676c <points_to_meter.lto_priv.307>
 8006ffa:	1c06      	adds	r6, r0, #0
 8006ffc:	4640      	mov	r0, r8
 8006ffe:	f7ff fbb5 	bl	800676c <points_to_meter.lto_priv.307>
 8007002:	2100      	movs	r1, #0
 8007004:	f008 f9ba 	bl	800f37c <__aeabi_fcmplt>
 8007008:	2800      	cmp	r0, #0
 800700a:	d100      	bne.n	800700e <initialize.lto_priv.314+0x36e>
 800700c:	e0a2      	b.n	8007154 <initialize.lto_priv.314+0x4b4>
 800700e:	49cd      	ldr	r1, [pc, #820]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 8007010:	1c30      	adds	r0, r6, #0
 8007012:	f007 fcbb 	bl	800e98c <__aeabi_fmul>
 8007016:	49cc      	ldr	r1, [pc, #816]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 8007018:	f007 fa0c 	bl	800e434 <__aeabi_fadd>
 800701c:	f008 f9f6 	bl	800f40c <__aeabi_f2uiz>
 8007020:	0007      	movs	r7, r0
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff fba2 	bl	800676c <points_to_meter.lto_priv.307>
 8007028:	1c06      	adds	r6, r0, #0
 800702a:	4640      	mov	r0, r8
 800702c:	f7ff fb9e 	bl	800676c <points_to_meter.lto_priv.307>
 8007030:	2100      	movs	r1, #0
 8007032:	f008 f9a3 	bl	800f37c <__aeabi_fcmplt>
 8007036:	2800      	cmp	r0, #0
 8007038:	d100      	bne.n	800703c <initialize.lto_priv.314+0x39c>
 800703a:	e08e      	b.n	800715a <initialize.lto_priv.314+0x4ba>
 800703c:	49c1      	ldr	r1, [pc, #772]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 800703e:	1c30      	adds	r0, r6, #0
 8007040:	f007 fca4 	bl	800e98c <__aeabi_fmul>
 8007044:	49c0      	ldr	r1, [pc, #768]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 8007046:	f007 f9f5 	bl	800e434 <__aeabi_fadd>
 800704a:	1c06      	adds	r6, r0, #0
 800704c:	4640      	mov	r0, r8
 800704e:	f7ff fb8d 	bl	800676c <points_to_meter.lto_priv.307>
 8007052:	4681      	mov	r9, r0
 8007054:	4640      	mov	r0, r8
 8007056:	f7ff fb89 	bl	800676c <points_to_meter.lto_priv.307>
 800705a:	2100      	movs	r1, #0
 800705c:	f008 f98e 	bl	800f37c <__aeabi_fcmplt>
 8007060:	2800      	cmp	r0, #0
 8007062:	d07d      	beq.n	8007160 <initialize.lto_priv.314+0x4c0>
 8007064:	49b7      	ldr	r1, [pc, #732]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 8007066:	4648      	mov	r0, r9
 8007068:	f007 fc90 	bl	800e98c <__aeabi_fmul>
 800706c:	49b6      	ldr	r1, [pc, #728]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 800706e:	f007 f9e1 	bl	800e434 <__aeabi_fadd>
 8007072:	f008 f9cb 	bl	800f40c <__aeabi_f2uiz>
 8007076:	f008 fc07 	bl	800f888 <__aeabi_ui2f>
 800707a:	1c01      	adds	r1, r0, #0
 800707c:	1c30      	adds	r0, r6, #0
 800707e:	f007 fdb7 	bl	800ebf0 <__aeabi_fsub>
 8007082:	49b2      	ldr	r1, [pc, #712]	; (800734c <initialize.lto_priv.314+0x6ac>)
 8007084:	f007 fc82 	bl	800e98c <__aeabi_fmul>
 8007088:	f008 f9c0 	bl	800f40c <__aeabi_f2uiz>
 800708c:	4680      	mov	r8, r0
 800708e:	0020      	movs	r0, r4
 8007090:	f7ff fb6c 	bl	800676c <points_to_meter.lto_priv.307>
 8007094:	2100      	movs	r1, #0
 8007096:	f008 f971 	bl	800f37c <__aeabi_fcmplt>
 800709a:	4ea8      	ldr	r6, [pc, #672]	; (800733c <initialize.lto_priv.314+0x69c>)
 800709c:	2800      	cmp	r0, #0
 800709e:	d100      	bne.n	80070a2 <initialize.lto_priv.314+0x402>
 80070a0:	4ea7      	ldr	r6, [pc, #668]	; (8007340 <initialize.lto_priv.314+0x6a0>)
 80070a2:	0020      	movs	r0, r4
 80070a4:	f7ff fb62 	bl	800676c <points_to_meter.lto_priv.307>
 80070a8:	4681      	mov	r9, r0
 80070aa:	0020      	movs	r0, r4
 80070ac:	f7ff fb5e 	bl	800676c <points_to_meter.lto_priv.307>
 80070b0:	2100      	movs	r1, #0
 80070b2:	f008 f963 	bl	800f37c <__aeabi_fcmplt>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d055      	beq.n	8007166 <initialize.lto_priv.314+0x4c6>
 80070ba:	49a2      	ldr	r1, [pc, #648]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 80070bc:	4648      	mov	r0, r9
 80070be:	f007 fc65 	bl	800e98c <__aeabi_fmul>
 80070c2:	49a1      	ldr	r1, [pc, #644]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 80070c4:	f007 f9b6 	bl	800e434 <__aeabi_fadd>
 80070c8:	f008 f9a0 	bl	800f40c <__aeabi_f2uiz>
 80070cc:	4681      	mov	r9, r0
 80070ce:	0020      	movs	r0, r4
 80070d0:	f7ff fb4c 	bl	800676c <points_to_meter.lto_priv.307>
 80070d4:	4682      	mov	sl, r0
 80070d6:	0020      	movs	r0, r4
 80070d8:	f7ff fb48 	bl	800676c <points_to_meter.lto_priv.307>
 80070dc:	2100      	movs	r1, #0
 80070de:	f008 f94d 	bl	800f37c <__aeabi_fcmplt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d042      	beq.n	800716c <initialize.lto_priv.314+0x4cc>
 80070e6:	4997      	ldr	r1, [pc, #604]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 80070e8:	4650      	mov	r0, sl
 80070ea:	f007 fc4f 	bl	800e98c <__aeabi_fmul>
 80070ee:	4996      	ldr	r1, [pc, #600]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 80070f0:	f007 f9a0 	bl	800e434 <__aeabi_fadd>
 80070f4:	4682      	mov	sl, r0
 80070f6:	0020      	movs	r0, r4
 80070f8:	f7ff fb38 	bl	800676c <points_to_meter.lto_priv.307>
 80070fc:	4683      	mov	fp, r0
 80070fe:	0020      	movs	r0, r4
 8007100:	f7ff fb34 	bl	800676c <points_to_meter.lto_priv.307>
 8007104:	2100      	movs	r1, #0
 8007106:	f008 f939 	bl	800f37c <__aeabi_fcmplt>
 800710a:	2800      	cmp	r0, #0
 800710c:	d031      	beq.n	8007172 <initialize.lto_priv.314+0x4d2>
 800710e:	498d      	ldr	r1, [pc, #564]	; (8007344 <initialize.lto_priv.314+0x6a4>)
 8007110:	4658      	mov	r0, fp
 8007112:	f007 fc3b 	bl	800e98c <__aeabi_fmul>
 8007116:	498c      	ldr	r1, [pc, #560]	; (8007348 <initialize.lto_priv.314+0x6a8>)
 8007118:	f007 f98c 	bl	800e434 <__aeabi_fadd>
 800711c:	f008 f976 	bl	800f40c <__aeabi_f2uiz>
 8007120:	f008 fbb2 	bl	800f888 <__aeabi_ui2f>
 8007124:	1c01      	adds	r1, r0, #0
 8007126:	4650      	mov	r0, sl
 8007128:	f007 fd62 	bl	800ebf0 <__aeabi_fsub>
 800712c:	4987      	ldr	r1, [pc, #540]	; (800734c <initialize.lto_priv.314+0x6ac>)
 800712e:	f007 fc2d 	bl	800e98c <__aeabi_fmul>
 8007132:	f008 f96b 	bl	800f40c <__aeabi_f2uiz>
 8007136:	464b      	mov	r3, r9
 8007138:	9303      	str	r3, [sp, #12]
 800713a:	4643      	mov	r3, r8
 800713c:	9004      	str	r0, [sp, #16]
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	2000      	movs	r0, #0
 8007142:	9602      	str	r6, [sp, #8]
 8007144:	9700      	str	r7, [sp, #0]
 8007146:	002b      	movs	r3, r5
 8007148:	4a81      	ldr	r2, [pc, #516]	; (8007350 <initialize.lto_priv.314+0x6b0>)
 800714a:	4982      	ldr	r1, [pc, #520]	; (8007354 <initialize.lto_priv.314+0x6b4>)
 800714c:	9c07      	ldr	r4, [sp, #28]
 800714e:	47a0      	blx	r4
 8007150:	2000      	movs	r0, #0
 8007152:	e5be      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 8007154:	21fe      	movs	r1, #254	; 0xfe
 8007156:	0589      	lsls	r1, r1, #22
 8007158:	e75a      	b.n	8007010 <initialize.lto_priv.314+0x370>
 800715a:	21fe      	movs	r1, #254	; 0xfe
 800715c:	0589      	lsls	r1, r1, #22
 800715e:	e76e      	b.n	800703e <initialize.lto_priv.314+0x39e>
 8007160:	21fe      	movs	r1, #254	; 0xfe
 8007162:	0589      	lsls	r1, r1, #22
 8007164:	e77f      	b.n	8007066 <initialize.lto_priv.314+0x3c6>
 8007166:	21fe      	movs	r1, #254	; 0xfe
 8007168:	0589      	lsls	r1, r1, #22
 800716a:	e7a7      	b.n	80070bc <initialize.lto_priv.314+0x41c>
 800716c:	21fe      	movs	r1, #254	; 0xfe
 800716e:	0589      	lsls	r1, r1, #22
 8007170:	e7ba      	b.n	80070e8 <initialize.lto_priv.314+0x448>
 8007172:	21fe      	movs	r1, #254	; 0xfe
 8007174:	0589      	lsls	r1, r1, #22
 8007176:	e7cb      	b.n	8007110 <initialize.lto_priv.314+0x470>
 8007178:	0030      	movs	r0, r6
 800717a:	f7fa ff95 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 800717e:	4643      	mov	r3, r8
 8007180:	9a07      	ldr	r2, [sp, #28]
 8007182:	9009      	str	r0, [sp, #36]	; 0x24
 8007184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007186:	1a98      	subs	r0, r3, r2
 8007188:	f007 ffbc 	bl	800f104 <__divsi3>
 800718c:	3001      	adds	r0, #1
 800718e:	b283      	uxth	r3, r0
 8007190:	0030      	movs	r0, r6
 8007192:	930a      	str	r3, [sp, #40]	; 0x28
 8007194:	f7fb fcac 	bl	8002af0 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	4358      	muls	r0, r3
 800719c:	b283      	uxth	r3, r0
 800719e:	0030      	movs	r0, r6
 80071a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071a2:	f7ff fba9 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80071a6:	2300      	movs	r3, #0
 80071a8:	4298      	cmp	r0, r3
 80071aa:	d009      	beq.n	80071c0 <initialize.lto_priv.314+0x520>
 80071ac:	0032      	movs	r2, r6
 80071ae:	324f      	adds	r2, #79	; 0x4f
 80071b0:	0033      	movs	r3, r6
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	3352      	adds	r3, #82	; 0x52
 80071b6:	1e51      	subs	r1, r2, #1
 80071b8:	418a      	sbcs	r2, r1
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	4252      	negs	r2, r2
 80071be:	4013      	ands	r3, r2
 80071c0:	002a      	movs	r2, r5
 80071c2:	32b8      	adds	r2, #184	; 0xb8
 80071c4:	8013      	strh	r3, [r2, #0]
 80071c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071c8:	4694      	mov	ip, r2
 80071ca:	2280      	movs	r2, #128	; 0x80
 80071cc:	4463      	add	r3, ip
 80071ce:	0112      	lsls	r2, r2, #4
 80071d0:	4293      	cmp	r3, r2
 80071d2:	dd07      	ble.n	80071e4 <initialize.lto_priv.314+0x544>
 80071d4:	4b58      	ldr	r3, [pc, #352]	; (8007338 <initialize.lto_priv.314+0x698>)
 80071d6:	2000      	movs	r0, #0
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	4a5f      	ldr	r2, [pc, #380]	; (8007358 <initialize.lto_priv.314+0x6b8>)
 80071dc:	495d      	ldr	r1, [pc, #372]	; (8007354 <initialize.lto_priv.314+0x6b4>)
 80071de:	4798      	blx	r3
 80071e0:	2000      	movs	r0, #0
 80071e2:	e576      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 80071e4:	0030      	movs	r0, r6
 80071e6:	f7fb fd7f 	bl	8002ce8 <acc_base_configuration_hw_accelerated_average_samples_get>
 80071ea:	4681      	mov	r9, r0
 80071ec:	0030      	movs	r0, r6
 80071ee:	f7ff fb83 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80071f2:	2406      	movs	r4, #6
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d000      	beq.n	80071fa <initialize.lto_priv.314+0x55a>
 80071f8:	783c      	ldrb	r4, [r7, #0]
 80071fa:	0030      	movs	r0, r6
 80071fc:	f7ff fb7c 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007200:	2303      	movs	r3, #3
 8007202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007204:	435a      	muls	r2, r3
 8007206:	920c      	str	r2, [sp, #48]	; 0x30
 8007208:	2800      	cmp	r0, #0
 800720a:	d004      	beq.n	8007216 <initialize.lto_priv.314+0x576>
 800720c:	0032      	movs	r2, r6
 800720e:	326a      	adds	r2, #106	; 0x6a
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	2a00      	cmp	r2, #0
 8007214:	d142      	bne.n	800729c <initialize.lto_priv.314+0x5fc>
 8007216:	464b      	mov	r3, r9
 8007218:	2007      	movs	r0, #7
 800721a:	4358      	muls	r0, r3
 800721c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721e:	300d      	adds	r0, #13
 8007220:	4358      	muls	r0, r3
 8007222:	4344      	muls	r4, r0
 8007224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007226:	0023      	movs	r3, r4
 8007228:	4694      	mov	ip, r2
 800722a:	4463      	add	r3, ip
 800722c:	9313      	str	r3, [sp, #76]	; 0x4c
 800722e:	f7ff fa8b 	bl	8006748 <get_pll_freq>
 8007232:	21f4      	movs	r1, #244	; 0xf4
 8007234:	0589      	lsls	r1, r1, #22
 8007236:	f007 fba9 	bl	800e98c <__aeabi_fmul>
 800723a:	9014      	str	r0, [sp, #80]	; 0x50
 800723c:	0030      	movs	r0, r6
 800723e:	f7ff fb5b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007242:	2800      	cmp	r0, #0
 8007244:	d03d      	beq.n	80072c2 <initialize.lto_priv.314+0x622>
 8007246:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007248:	f008 fb1e 	bl	800f888 <__aeabi_ui2f>
 800724c:	6e74      	ldr	r4, [r6, #100]	; 0x64
 800724e:	1c07      	adds	r7, r0, #0
 8007250:	2100      	movs	r1, #0
 8007252:	1c20      	adds	r0, r4, #0
 8007254:	f008 f8a6 	bl	800f3a4 <__aeabi_fcmpgt>
 8007258:	2800      	cmp	r0, #0
 800725a:	d032      	beq.n	80072c2 <initialize.lto_priv.314+0x622>
 800725c:	1c21      	adds	r1, r4, #0
 800725e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007260:	f007 fa82 	bl	800e768 <__aeabi_fdiv>
 8007264:	1c39      	adds	r1, r7, #0
 8007266:	f007 fcc3 	bl	800ebf0 <__aeabi_fsub>
 800726a:	1c04      	adds	r4, r0, #0
 800726c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800726e:	f008 fb0b 	bl	800f888 <__aeabi_ui2f>
 8007272:	1c01      	adds	r1, r0, #0
 8007274:	1c20      	adds	r0, r4, #0
 8007276:	f007 fa77 	bl	800e768 <__aeabi_fdiv>
 800727a:	21fc      	movs	r1, #252	; 0xfc
 800727c:	0589      	lsls	r1, r1, #22
 800727e:	f007 f8d9 	bl	800e434 <__aeabi_fadd>
 8007282:	f008 fa97 	bl	800f7b4 <__aeabi_f2iz>
 8007286:	900d      	str	r0, [sp, #52]	; 0x34
 8007288:	2800      	cmp	r0, #0
 800728a:	da0f      	bge.n	80072ac <initialize.lto_priv.314+0x60c>
 800728c:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <initialize.lto_priv.314+0x698>)
 800728e:	2000      	movs	r0, #0
 8007290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007292:	4a32      	ldr	r2, [pc, #200]	; (800735c <initialize.lto_priv.314+0x6bc>)
 8007294:	492f      	ldr	r1, [pc, #188]	; (8007354 <initialize.lto_priv.314+0x6b4>)
 8007296:	4798      	blx	r3
 8007298:	2000      	movs	r0, #0
 800729a:	e51a      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 800729c:	464a      	mov	r2, r9
 800729e:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072a0:	930c      	str	r3, [sp, #48]	; 0x30
 80072a2:	4350      	muls	r0, r2
 80072a4:	300f      	adds	r0, #15
 80072a6:	4344      	muls	r4, r0
 80072a8:	34d4      	adds	r4, #212	; 0xd4
 80072aa:	e7bb      	b.n	8007224 <initialize.lto_priv.314+0x584>
 80072ac:	4b2c      	ldr	r3, [pc, #176]	; (8007360 <initialize.lto_priv.314+0x6c0>)
 80072ae:	4298      	cmp	r0, r3
 80072b0:	dd08      	ble.n	80072c4 <initialize.lto_priv.314+0x624>
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <initialize.lto_priv.314+0x698>)
 80072b4:	2000      	movs	r0, #0
 80072b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b8:	4a2a      	ldr	r2, [pc, #168]	; (8007364 <initialize.lto_priv.314+0x6c4>)
 80072ba:	4926      	ldr	r1, [pc, #152]	; (8007354 <initialize.lto_priv.314+0x6b4>)
 80072bc:	4798      	blx	r3
 80072be:	2000      	movs	r0, #0
 80072c0:	e507      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 80072c2:	900d      	str	r0, [sp, #52]	; 0x34
 80072c4:	002b      	movs	r3, r5
 80072c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072c8:	33b6      	adds	r3, #182	; 0xb6
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	0030      	movs	r0, r6
 80072ce:	f7fb fd1f 	bl	8002d10 <acc_base_configuration_tx_disable_get>
 80072d2:	002b      	movs	r3, r5
 80072d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072d6:	33ba      	adds	r3, #186	; 0xba
 80072d8:	7018      	strb	r0, [r3, #0]
 80072da:	3b06      	subs	r3, #6
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	0033      	movs	r3, r6
 80072e0:	332e      	adds	r3, #46	; 0x2e
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d022      	beq.n	800732e <initialize.lto_priv.314+0x68e>
 80072e8:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 80072ea:	465b      	mov	r3, fp
 80072ec:	809c      	strh	r4, [r3, #4]
 80072ee:	466b      	mov	r3, sp
 80072f0:	8b9f      	ldrh	r7, [r3, #28]
 80072f2:	465b      	mov	r3, fp
 80072f4:	9a07      	ldr	r2, [sp, #28]
 80072f6:	811a      	strh	r2, [r3, #8]
 80072f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072fa:	815a      	strh	r2, [r3, #10]
 80072fc:	2301      	movs	r3, #1
 80072fe:	4699      	mov	r9, r3
 8007300:	465b      	mov	r3, fp
 8007302:	464a      	mov	r2, r9
 8007304:	819a      	strh	r2, [r3, #12]
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	3b01      	subs	r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	2b07      	cmp	r3, #7
 800730e:	d806      	bhi.n	800731e <initialize.lto_priv.314+0x67e>
 8007310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007312:	2008      	movs	r0, #8
 8007314:	f007 ffdc 	bl	800f2d0 <__aeabi_idivmod>
 8007318:	910e      	str	r1, [sp, #56]	; 0x38
 800731a:	2900      	cmp	r1, #0
 800731c:	d026      	beq.n	800736c <initialize.lto_priv.314+0x6cc>
 800731e:	4b06      	ldr	r3, [pc, #24]	; (8007338 <initialize.lto_priv.314+0x698>)
 8007320:	2000      	movs	r0, #0
 8007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007324:	4a10      	ldr	r2, [pc, #64]	; (8007368 <initialize.lto_priv.314+0x6c8>)
 8007326:	490b      	ldr	r1, [pc, #44]	; (8007354 <initialize.lto_priv.314+0x6b4>)
 8007328:	4798      	blx	r3
 800732a:	2000      	movs	r0, #0
 800732c:	e4d1      	b.n	8006cd2 <initialize.lto_priv.314+0x32>
 800732e:	0033      	movs	r3, r6
 8007330:	3332      	adds	r3, #50	; 0x32
 8007332:	781c      	ldrb	r4, [r3, #0]
 8007334:	e7d9      	b.n	80072ea <initialize.lto_priv.314+0x64a>
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	200002b0 	.word	0x200002b0
 800733c:	0801e12c 	.word	0x0801e12c
 8007340:	0801e057 	.word	0x0801e057
 8007344:	bf800000 	.word	0xbf800000
 8007348:	350637bd 	.word	0x350637bd
 800734c:	49742400 	.word	0x49742400
 8007350:	0801d48f 	.word	0x0801d48f
 8007354:	0801d158 	.word	0x0801d158
 8007358:	0801d4cc 	.word	0x0801d4cc
 800735c:	0801d52c 	.word	0x0801d52c
 8007360:	0000fffe 	.word	0x0000fffe
 8007364:	0801d54d 	.word	0x0801d54d
 8007368:	0801d56d 	.word	0x0801d56d
 800736c:	b224      	sxth	r4, r4
 800736e:	3c01      	subs	r4, #1
 8007370:	0164      	lsls	r4, r4, #5
 8007372:	b2a3      	uxth	r3, r4
 8007374:	001c      	movs	r4, r3
 8007376:	3c0f      	subs	r4, #15
 8007378:	b2a4      	uxth	r4, r4
 800737a:	1b3f      	subs	r7, r7, r4
 800737c:	b23f      	sxth	r7, r7
 800737e:	9315      	str	r3, [sp, #84]	; 0x54
 8007380:	10fb      	asrs	r3, r7, #3
 8007382:	9318      	str	r3, [sp, #96]	; 0x60
 8007384:	4643      	mov	r3, r8
 8007386:	1b1c      	subs	r4, r3, r4
 8007388:	464b      	mov	r3, r9
 800738a:	10f9      	asrs	r1, r7, #3
 800738c:	b224      	sxth	r4, r4
 800738e:	10e2      	asrs	r2, r4, #3
 8007390:	1a5b      	subs	r3, r3, r1
 8007392:	189b      	adds	r3, r3, r2
 8007394:	b29b      	uxth	r3, r3
 8007396:	9311      	str	r3, [sp, #68]	; 0x44
 8007398:	2244      	movs	r2, #68	; 0x44
 800739a:	466b      	mov	r3, sp
 800739c:	189b      	adds	r3, r3, r2
 800739e:	2200      	movs	r2, #0
 80073a0:	5e9b      	ldrsh	r3, [r3, r2]
 80073a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a4:	2008      	movs	r0, #8
 80073a6:	4699      	mov	r9, r3
 80073a8:	f007 feac 	bl	800f104 <__divsi3>
 80073ac:	9010      	str	r0, [sp, #64]	; 0x40
 80073ae:	48db      	ldr	r0, [pc, #876]	; (800771c <initialize.lto_priv.314+0xa7c>)
 80073b0:	4007      	ands	r7, r0
 80073b2:	9012      	str	r0, [sp, #72]	; 0x48
 80073b4:	d504      	bpl.n	80073c0 <initialize.lto_priv.314+0x720>
 80073b6:	2308      	movs	r3, #8
 80073b8:	3f01      	subs	r7, #1
 80073ba:	425b      	negs	r3, r3
 80073bc:	431f      	orrs	r7, r3
 80073be:	3701      	adds	r7, #1
 80073c0:	b23f      	sxth	r7, r7
 80073c2:	2f00      	cmp	r7, #0
 80073c4:	da01      	bge.n	80073ca <initialize.lto_priv.314+0x72a>
 80073c6:	3708      	adds	r7, #8
 80073c8:	b23f      	sxth	r7, r7
 80073ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073cc:	0038      	movs	r0, r7
 80073ce:	f007 ff7f 	bl	800f2d0 <__aeabi_idivmod>
 80073d2:	466b      	mov	r3, sp
 80073d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80073d6:	213c      	movs	r1, #60	; 0x3c
 80073d8:	5e59      	ldrsh	r1, [r3, r1]
 80073da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80073de:	3b01      	subs	r3, #1
 80073e0:	9316      	str	r3, [sp, #88]	; 0x58
 80073e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80073e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e6:	4004      	ands	r4, r0
 80073e8:	4353      	muls	r3, r2
 80073ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073ec:	4694      	mov	ip, r2
 80073ee:	4463      	add	r3, ip
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	b21a      	sxth	r2, r3
 80073f4:	2c00      	cmp	r4, #0
 80073f6:	da04      	bge.n	8007402 <initialize.lto_priv.314+0x762>
 80073f8:	2008      	movs	r0, #8
 80073fa:	3c01      	subs	r4, #1
 80073fc:	4240      	negs	r0, r0
 80073fe:	4304      	orrs	r4, r0
 8007400:	3401      	adds	r4, #1
 8007402:	b224      	sxth	r4, r4
 8007404:	2c00      	cmp	r4, #0
 8007406:	da01      	bge.n	800740c <initialize.lto_priv.314+0x76c>
 8007408:	3408      	adds	r4, #8
 800740a:	b224      	sxth	r4, r4
 800740c:	4648      	mov	r0, r9
 800740e:	2801      	cmp	r0, #1
 8007410:	d172      	bne.n	80074f8 <initialize.lto_priv.314+0x858>
 8007412:	46cc      	mov	ip, r9
 8007414:	42b9      	cmp	r1, r7
 8007416:	d102      	bne.n	800741e <initialize.lto_priv.314+0x77e>
 8007418:	1b10      	subs	r0, r2, r4
 800741a:	1e42      	subs	r2, r0, #1
 800741c:	4190      	sbcs	r0, r2
 800741e:	4662      	mov	r2, ip
 8007420:	4002      	ands	r2, r0
 8007422:	9210      	str	r2, [sp, #64]	; 0x40
 8007424:	2200      	movs	r2, #0
 8007426:	9212      	str	r2, [sp, #72]	; 0x48
 8007428:	2000      	movs	r0, #0
 800742a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800742c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800742e:	1a52      	subs	r2, r2, r1
 8007430:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007432:	1a52      	subs	r2, r2, r1
 8007434:	b212      	sxth	r2, r2
 8007436:	9211      	str	r2, [sp, #68]	; 0x44
 8007438:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800743a:	4282      	cmp	r2, r0
 800743c:	d008      	beq.n	8007450 <initialize.lto_priv.314+0x7b0>
 800743e:	464a      	mov	r2, r9
 8007440:	2a01      	cmp	r2, #1
 8007442:	d100      	bne.n	8007446 <initialize.lto_priv.314+0x7a6>
 8007444:	b2a3      	uxth	r3, r4
 8007446:	1bd8      	subs	r0, r3, r7
 8007448:	9909      	ldr	r1, [sp, #36]	; 0x24
 800744a:	f007 fe5b 	bl	800f104 <__divsi3>
 800744e:	b280      	uxth	r0, r0
 8007450:	465b      	mov	r3, fp
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	2205      	movs	r2, #5
 8007456:	0019      	movs	r1, r3
 8007458:	4699      	mov	r9, r3
 800745a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800745c:	318c      	adds	r1, #140	; 0x8c
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	600b      	str	r3, [r1, #0]
 8007464:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007466:	464a      	mov	r2, r9
 8007468:	468c      	mov	ip, r1
 800746a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800746c:	3290      	adds	r2, #144	; 0x90
 800746e:	3b32      	subs	r3, #50	; 0x32
 8007470:	b21b      	sxth	r3, r3
 8007472:	18ff      	adds	r7, r7, r3
 8007474:	4463      	add	r3, ip
 8007476:	6053      	str	r3, [r2, #4]
 8007478:	464b      	mov	r3, r9
 800747a:	6017      	str	r7, [r2, #0]
 800747c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800747e:	3398      	adds	r3, #152	; 0x98
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	464a      	mov	r2, r9
 8007484:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007486:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007488:	17db      	asrs	r3, r3, #31
 800748a:	1a5b      	subs	r3, r3, r1
 800748c:	329c      	adds	r2, #156	; 0x9c
 800748e:	0fdb      	lsrs	r3, r3, #31
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	464b      	mov	r3, r9
 8007494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007496:	33a0      	adds	r3, #160	; 0xa0
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800749c:	6058      	str	r0, [r3, #4]
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	4663      	mov	r3, ip
 80074a2:	464f      	mov	r7, r9
 80074a4:	1ae0      	subs	r0, r4, r3
 80074a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074a8:	f007 fe2c 	bl	800f104 <__divsi3>
 80074ac:	2200      	movs	r2, #0
 80074ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074b0:	37ac      	adds	r7, #172	; 0xac
 80074b2:	6038      	str	r0, [r7, #0]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	dd01      	ble.n	80074bc <initialize.lto_priv.314+0x81c>
 80074b8:	001a      	movs	r2, r3
 80074ba:	3a01      	subs	r2, #1
 80074bc:	464b      	mov	r3, r9
 80074be:	33b0      	adds	r3, #176	; 0xb0
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	0030      	movs	r0, r6
 80074c4:	f7ff fa18 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80074c8:	2300      	movs	r3, #0
 80074ca:	4298      	cmp	r0, r3
 80074cc:	d005      	beq.n	80074da <initialize.lto_priv.314+0x83a>
 80074ce:	0033      	movs	r3, r6
 80074d0:	336a      	adds	r3, #106	; 0x6a
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	1e5a      	subs	r2, r3, #1
 80074d6:	4193      	sbcs	r3, r2
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	222e      	movs	r2, #46	; 0x2e
 80074dc:	66aa      	str	r2, [r5, #104]	; 0x68
 80074de:	002a      	movs	r2, r5
 80074e0:	3270      	adds	r2, #112	; 0x70
 80074e2:	7013      	strb	r3, [r2, #0]
 80074e4:	0030      	movs	r0, r6
 80074e6:	f7fb fbf5 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 80074ea:	2803      	cmp	r0, #3
 80074ec:	d813      	bhi.n	8007516 <initialize.lto_priv.314+0x876>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f007 fd6a 	bl	800efc8 <__gnu_thumb1_case_uqi>
 80074f4:	33231d0d 	.word	0x33231d0d
 80074f8:	1bc9      	subs	r1, r1, r7
 80074fa:	1e48      	subs	r0, r1, #1
 80074fc:	4181      	sbcs	r1, r0
 80074fe:	1b12      	subs	r2, r2, r4
 8007500:	b2c9      	uxtb	r1, r1
 8007502:	9110      	str	r1, [sp, #64]	; 0x40
 8007504:	1e51      	subs	r1, r2, #1
 8007506:	418a      	sbcs	r2, r1
 8007508:	b2d2      	uxtb	r2, r2
 800750a:	9212      	str	r2, [sp, #72]	; 0x48
 800750c:	e78c      	b.n	8007428 <initialize.lto_priv.314+0x788>
 800750e:	626b      	str	r3, [r5, #36]	; 0x24
 8007510:	62ab      	str	r3, [r5, #40]	; 0x28
 8007512:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007514:	632b      	str	r3, [r5, #48]	; 0x30
 8007516:	0030      	movs	r0, r6
 8007518:	f7fb fc03 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 800751c:	2804      	cmp	r0, #4
 800751e:	d829      	bhi.n	8007574 <initialize.lto_priv.314+0x8d4>
 8007520:	2300      	movs	r3, #0
 8007522:	2201      	movs	r2, #1
 8007524:	f007 fd50 	bl	800efc8 <__gnu_thumb1_case_uqi>
 8007528:	f0ec2323 	.word	0xf0ec2323
 800752c:	e8          	.byte	0xe8
 800752d:	00          	.byte	0x00
 800752e:	2201      	movs	r2, #1
 8007530:	626b      	str	r3, [r5, #36]	; 0x24
 8007532:	62aa      	str	r2, [r5, #40]	; 0x28
 8007534:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007536:	632b      	str	r3, [r5, #48]	; 0x30
 8007538:	e7ed      	b.n	8007516 <initialize.lto_priv.314+0x876>
 800753a:	0030      	movs	r0, r6
 800753c:	f7fb fbb4 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 8007540:	aa1a      	add	r2, sp, #104	; 0x68
 8007542:	a91b      	add	r1, sp, #108	; 0x6c
 8007544:	f7fe ffb8 	bl	80064b8 <acc_radar_engine_common_frequency_to_main_clk>
 8007548:	2301      	movs	r3, #1
 800754a:	626b      	str	r3, [r5, #36]	; 0x24
 800754c:	2300      	movs	r3, #0
 800754e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007550:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007552:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007556:	632b      	str	r3, [r5, #48]	; 0x30
 8007558:	e7dd      	b.n	8007516 <initialize.lto_priv.314+0x876>
 800755a:	0030      	movs	r0, r6
 800755c:	f7fb fba4 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 8007560:	aa1a      	add	r2, sp, #104	; 0x68
 8007562:	a91b      	add	r1, sp, #108	; 0x6c
 8007564:	f7fe ffa8 	bl	80064b8 <acc_radar_engine_common_frequency_to_main_clk>
 8007568:	2301      	movs	r3, #1
 800756a:	626b      	str	r3, [r5, #36]	; 0x24
 800756c:	e7ef      	b.n	800754e <initialize.lto_priv.314+0x8ae>
 800756e:	636a      	str	r2, [r5, #52]	; 0x34
 8007570:	63aa      	str	r2, [r5, #56]	; 0x38
 8007572:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007574:	0030      	movs	r0, r6
 8007576:	f7ff f9bf 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800757a:	2300      	movs	r3, #0
 800757c:	0004      	movs	r4, r0
 800757e:	4298      	cmp	r0, r3
 8007580:	d00b      	beq.n	800759a <initialize.lto_priv.314+0x8fa>
 8007582:	0033      	movs	r3, r6
 8007584:	3350      	adds	r3, #80	; 0x50
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	9317      	str	r3, [sp, #92]	; 0x5c
 800758a:	0033      	movs	r3, r6
 800758c:	3352      	adds	r3, #82	; 0x52
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	9319      	str	r3, [sp, #100]	; 0x64
 8007592:	0033      	movs	r3, r6
 8007594:	334f      	adds	r3, #79	; 0x4f
 8007596:	781c      	ldrb	r4, [r3, #0]
 8007598:	0023      	movs	r3, r4
 800759a:	002a      	movs	r2, r5
 800759c:	3208      	adds	r2, #8
 800759e:	67d3      	str	r3, [r2, #124]	; 0x7c
 80075a0:	2c00      	cmp	r4, #0
 80075a2:	d003      	beq.n	80075ac <initialize.lto_priv.314+0x90c>
 80075a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075a6:	3280      	adds	r2, #128	; 0x80
 80075a8:	3b01      	subs	r3, #1
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	0030      	movs	r0, r6
 80075ae:	f7fb fbaf 	bl	8002d10 <acc_base_configuration_tx_disable_get>
 80075b2:	2701      	movs	r7, #1
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d000      	beq.n	80075ba <initialize.lto_priv.314+0x91a>
 80075b8:	e0aa      	b.n	8007710 <initialize.lto_priv.314+0xa70>
 80075ba:	2c00      	cmp	r4, #0
 80075bc:	d001      	beq.n	80075c2 <initialize.lto_priv.314+0x922>
 80075be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075c0:	930e      	str	r3, [sp, #56]	; 0x38
 80075c2:	003b      	movs	r3, r7
 80075c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c6:	0030      	movs	r0, r6
 80075c8:	4393      	bics	r3, r2
 80075ca:	642b      	str	r3, [r5, #64]	; 0x40
 80075cc:	f7fb fb97 	bl	8002cfe <acc_base_configuration_decrease_tx_emission_get>
 80075d0:	4078      	eors	r0, r7
 80075d2:	b2c0      	uxtb	r0, r0
 80075d4:	6468      	str	r0, [r5, #68]	; 0x44
 80075d6:	64af      	str	r7, [r5, #72]	; 0x48
 80075d8:	0030      	movs	r0, r6
 80075da:	f7fb fb85 	bl	8002ce8 <acc_base_configuration_hw_accelerated_average_samples_get>
 80075de:	2801      	cmp	r0, #1
 80075e0:	d800      	bhi.n	80075e4 <initialize.lto_priv.314+0x944>
 80075e2:	e097      	b.n	8007714 <initialize.lto_priv.314+0xa74>
 80075e4:	2301      	movs	r3, #1
 80075e6:	3802      	subs	r0, #2
 80075e8:	6528      	str	r0, [r5, #80]	; 0x50
 80075ea:	64eb      	str	r3, [r5, #76]	; 0x4c
 80075ec:	0030      	movs	r0, r6
 80075ee:	f7ff f983 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80075f2:	2300      	movs	r3, #0
 80075f4:	4298      	cmp	r0, r3
 80075f6:	d000      	beq.n	80075fa <initialize.lto_priv.314+0x95a>
 80075f8:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80075fa:	656b      	str	r3, [r5, #84]	; 0x54
 80075fc:	0030      	movs	r0, r6
 80075fe:	f7fb fb48 	bl	8002c92 <acc_base_configuration_integrator_get>
 8007602:	65a8      	str	r0, [r5, #88]	; 0x58
 8007604:	0030      	movs	r0, r6
 8007606:	f7fb fb39 	bl	8002c7c <acc_base_configuration_wg_duration_get>
 800760a:	65e8      	str	r0, [r5, #92]	; 0x5c
 800760c:	0030      	movs	r0, r6
 800760e:	f7fb fa6f 	bl	8002af0 <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007612:	6628      	str	r0, [r5, #96]	; 0x60
 8007614:	0030      	movs	r0, r6
 8007616:	f7fa fd47 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 800761a:	67a8      	str	r0, [r5, #120]	; 0x78
 800761c:	0030      	movs	r0, r6
 800761e:	f7fa fd31 	bl	8002084 <acc_base_configuration_asynchronous_measurement_get>
 8007622:	2601      	movs	r6, #1
 8007624:	465b      	mov	r3, fp
 8007626:	4070      	eors	r0, r6
 8007628:	b2c0      	uxtb	r0, r0
 800762a:	67e8      	str	r0, [r5, #124]	; 0x7c
 800762c:	889b      	ldrh	r3, [r3, #4]
 800762e:	666b      	str	r3, [r5, #100]	; 0x64
 8007630:	465b      	mov	r3, fp
 8007632:	895b      	ldrh	r3, [r3, #10]
 8007634:	3b01      	subs	r3, #1
 8007636:	66eb      	str	r3, [r5, #108]	; 0x6c
 8007638:	465b      	mov	r3, fp
 800763a:	695b      	ldr	r3, [r3, #20]
 800763c:	33b6      	adds	r3, #182	; 0xb6
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	676b      	str	r3, [r5, #116]	; 0x74
 8007642:	f7fe ff31 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 8007646:	1d2b      	adds	r3, r5, #4
 8007648:	67d8      	str	r0, [r3, #124]	; 0x7c
 800764a:	f7ff f87d 	bl	8006748 <get_pll_freq>
 800764e:	1c07      	adds	r7, r0, #0
 8007650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007652:	f008 f919 	bl	800f888 <__aeabi_ui2f>
 8007656:	1c04      	adds	r4, r0, #0
 8007658:	20fe      	movs	r0, #254	; 0xfe
 800765a:	1c39      	adds	r1, r7, #0
 800765c:	0580      	lsls	r0, r0, #22
 800765e:	f007 f883 	bl	800e768 <__aeabi_fdiv>
 8007662:	1c01      	adds	r1, r0, #0
 8007664:	1c20      	adds	r0, r4, #0
 8007666:	f007 f991 	bl	800e98c <__aeabi_fmul>
 800766a:	4653      	mov	r3, sl
 800766c:	60d8      	str	r0, [r3, #12]
 800766e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007670:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007672:	35b8      	adds	r5, #184	; 0xb8
 8007674:	4358      	muls	r0, r3
 8007676:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007678:	469c      	mov	ip, r3
 800767a:	4460      	add	r0, ip
 800767c:	f008 f904 	bl	800f888 <__aeabi_ui2f>
 8007680:	1c01      	adds	r1, r0, #0
 8007682:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007684:	f007 f870 	bl	800e768 <__aeabi_fdiv>
 8007688:	4653      	mov	r3, sl
 800768a:	6118      	str	r0, [r3, #16]
 800768c:	9807      	ldr	r0, [sp, #28]
 800768e:	f7ff f86d 	bl	800676c <points_to_meter.lto_priv.307>
 8007692:	4653      	mov	r3, sl
 8007694:	6018      	str	r0, [r3, #0]
 8007696:	4640      	mov	r0, r8
 8007698:	f7ff f868 	bl	800676c <points_to_meter.lto_priv.307>
 800769c:	4653      	mov	r3, sl
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	6098      	str	r0, [r3, #8]
 80076a2:	f007 faa5 	bl	800ebf0 <__aeabi_fsub>
 80076a6:	4653      	mov	r3, sl
 80076a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076aa:	6058      	str	r0, [r3, #4]
 80076ac:	82da      	strh	r2, [r3, #22]
 80076ae:	2300      	movs	r3, #0
 80076b0:	4652      	mov	r2, sl
 80076b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076b4:	8293      	strh	r3, [r2, #20]
 80076b6:	8316      	strh	r6, [r2, #24]
 80076b8:	9a08      	ldr	r2, [sp, #32]
 80076ba:	2013      	movs	r0, #19
 80076bc:	8011      	strh	r1, [r2, #0]
 80076be:	8151      	strh	r1, [r2, #10]
 80076c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c2:	8053      	strh	r3, [r2, #2]
 80076c4:	8111      	strh	r1, [r2, #8]
 80076c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076c8:	8313      	strh	r3, [r2, #24]
 80076ca:	8091      	strh	r1, [r2, #4]
 80076cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076ce:	80d6      	strh	r6, [r2, #6]
 80076d0:	8291      	strh	r1, [r2, #20]
 80076d2:	82d1      	strh	r1, [r2, #22]
 80076d4:	4659      	mov	r1, fp
 80076d6:	8216      	strh	r6, [r2, #16]
 80076d8:	aa1b      	add	r2, sp, #108	; 0x6c
 80076da:	8013      	strh	r3, [r2, #0]
 80076dc:	6809      	ldr	r1, [r1, #0]
 80076de:	0033      	movs	r3, r6
 80076e0:	f006 fc22 	bl	800df28 <acc_probes_execute_uint16>
 80076e4:	882b      	ldrh	r3, [r5, #0]
 80076e6:	9a08      	ldr	r2, [sp, #32]
 80076e8:	3303      	adds	r3, #3
 80076ea:	81d3      	strh	r3, [r2, #14]
 80076ec:	2380      	movs	r3, #128	; 0x80
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	8193      	strh	r3, [r2, #12]
 80076f2:	0030      	movs	r0, r6
 80076f4:	f7ff faed 	bl	8006cd2 <initialize.lto_priv.314+0x32>
 80076f8:	636a      	str	r2, [r5, #52]	; 0x34
 80076fa:	63aa      	str	r2, [r5, #56]	; 0x38
 80076fc:	63ea      	str	r2, [r5, #60]	; 0x3c
 80076fe:	e739      	b.n	8007574 <initialize.lto_priv.314+0x8d4>
 8007700:	636a      	str	r2, [r5, #52]	; 0x34
 8007702:	63ab      	str	r3, [r5, #56]	; 0x38
 8007704:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007706:	e735      	b.n	8007574 <initialize.lto_priv.314+0x8d4>
 8007708:	636b      	str	r3, [r5, #52]	; 0x34
 800770a:	63ab      	str	r3, [r5, #56]	; 0x38
 800770c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800770e:	e731      	b.n	8007574 <initialize.lto_priv.314+0x8d4>
 8007710:	970e      	str	r7, [sp, #56]	; 0x38
 8007712:	e756      	b.n	80075c2 <initialize.lto_priv.314+0x922>
 8007714:	2000      	movs	r0, #0
 8007716:	0003      	movs	r3, r0
 8007718:	e766      	b.n	80075e8 <initialize.lto_priv.314+0x948>
 800771a:	46c0      	nop			; (mov r8, r8)
 800771c:	80000007 	.word	0x80000007

08007720 <initialize.lto_priv.313>:
 8007720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007722:	464e      	mov	r6, r9
 8007724:	46de      	mov	lr, fp
 8007726:	4657      	mov	r7, sl
 8007728:	4645      	mov	r5, r8
 800772a:	b5e0      	push	{r5, r6, r7, lr}
 800772c:	b097      	sub	sp, #92	; 0x5c
 800772e:	9306      	str	r3, [sp, #24]
 8007730:	2332      	movs	r3, #50	; 0x32
 8007732:	469a      	mov	sl, r3
 8007734:	448a      	add	sl, r1
 8007736:	4653      	mov	r3, sl
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	4681      	mov	r9, r0
 800773c:	000e      	movs	r6, r1
 800773e:	4693      	mov	fp, r2
 8007740:	2b06      	cmp	r3, #6
 8007742:	d00f      	beq.n	8007764 <initialize.lto_priv.313+0x44>
 8007744:	2b09      	cmp	r3, #9
 8007746:	d00d      	beq.n	8007764 <initialize.lto_priv.313+0x44>
 8007748:	4b7a      	ldr	r3, [pc, #488]	; (8007934 <initialize.lto_priv.313+0x214>)
 800774a:	2000      	movs	r0, #0
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	4a7a      	ldr	r2, [pc, #488]	; (8007938 <initialize.lto_priv.313+0x218>)
 8007750:	497a      	ldr	r1, [pc, #488]	; (800793c <initialize.lto_priv.313+0x21c>)
 8007752:	4798      	blx	r3
 8007754:	2000      	movs	r0, #0
 8007756:	b017      	add	sp, #92	; 0x5c
 8007758:	bc3c      	pop	{r2, r3, r4, r5}
 800775a:	4690      	mov	r8, r2
 800775c:	4699      	mov	r9, r3
 800775e:	46a2      	mov	sl, r4
 8007760:	46ab      	mov	fp, r5
 8007762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007764:	464b      	mov	r3, r9
 8007766:	0030      	movs	r0, r6
 8007768:	695d      	ldr	r5, [r3, #20]
 800776a:	f7ff f8c5 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800776e:	2300      	movs	r3, #0
 8007770:	4298      	cmp	r0, r3
 8007772:	d00c      	beq.n	800778e <initialize.lto_priv.313+0x6e>
 8007774:	0032      	movs	r2, r6
 8007776:	324f      	adds	r2, #79	; 0x4f
 8007778:	7810      	ldrb	r0, [r2, #0]
 800777a:	0033      	movs	r3, r6
 800777c:	0002      	movs	r2, r0
 800777e:	1e51      	subs	r1, r2, #1
 8007780:	418a      	sbcs	r2, r1
 8007782:	3350      	adds	r3, #80	; 0x50
 8007784:	781c      	ldrb	r4, [r3, #0]
 8007786:	3302      	adds	r3, #2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	4252      	negs	r2, r2
 800778c:	4013      	ands	r3, r2
 800778e:	002a      	movs	r2, r5
 8007790:	32ce      	adds	r2, #206	; 0xce
 8007792:	8013      	strh	r3, [r2, #0]
 8007794:	2800      	cmp	r0, #0
 8007796:	d000      	beq.n	800779a <initialize.lto_priv.313+0x7a>
 8007798:	0020      	movs	r0, r4
 800779a:	002b      	movs	r3, r5
 800779c:	33d0      	adds	r3, #208	; 0xd0
 800779e:	7018      	strb	r0, [r3, #0]
 80077a0:	0030      	movs	r0, r6
 80077a2:	f7fa fc81 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 80077a6:	002b      	movs	r3, r5
 80077a8:	2700      	movs	r7, #0
 80077aa:	33cc      	adds	r3, #204	; 0xcc
 80077ac:	8018      	strh	r0, [r3, #0]
 80077ae:	3b10      	subs	r3, #16
 80077b0:	601f      	str	r7, [r3, #0]
 80077b2:	0030      	movs	r0, r6
 80077b4:	f7fb faac 	bl	8002d10 <acc_base_configuration_tx_disable_get>
 80077b8:	002b      	movs	r3, r5
 80077ba:	2201      	movs	r2, #1
 80077bc:	33c0      	adds	r3, #192	; 0xc0
 80077be:	7018      	strb	r0, [r3, #0]
 80077c0:	3b13      	subs	r3, #19
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	0028      	movs	r0, r5
 80077c6:	f7fe fb3d 	bl	8005e44 <get_package_range_coarse_max>
 80077ca:	9008      	str	r0, [sp, #32]
 80077cc:	0030      	movs	r0, r6
 80077ce:	f7ff f893 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80077d2:	42b8      	cmp	r0, r7
 80077d4:	d052      	beq.n	800787c <initialize.lto_priv.313+0x15c>
 80077d6:	0033      	movs	r3, r6
 80077d8:	332c      	adds	r3, #44	; 0x2c
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	42bb      	cmp	r3, r7
 80077de:	d04d      	beq.n	800787c <initialize.lto_priv.313+0x15c>
 80077e0:	0030      	movs	r0, r6
 80077e2:	f7ff f889 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80077e6:	42b8      	cmp	r0, r7
 80077e8:	d001      	beq.n	80077ee <initialize.lto_priv.313+0xce>
 80077ea:	2334      	movs	r3, #52	; 0x34
 80077ec:	5ef7      	ldrsh	r7, [r6, r3]
 80077ee:	0030      	movs	r0, r6
 80077f0:	f7ff f882 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80077f4:	2300      	movs	r3, #0
 80077f6:	4298      	cmp	r0, r3
 80077f8:	d001      	beq.n	80077fe <initialize.lto_priv.313+0xde>
 80077fa:	2236      	movs	r2, #54	; 0x36
 80077fc:	5eb3      	ldrsh	r3, [r6, r2]
 80077fe:	4698      	mov	r8, r3
 8007800:	44b8      	add	r8, r7
 8007802:	0033      	movs	r3, r6
 8007804:	332e      	adds	r3, #46	; 0x2e
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d100      	bne.n	800780e <initialize.lto_priv.313+0xee>
 800780c:	e08e      	b.n	800792c <initialize.lto_priv.313+0x20c>
 800780e:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8007810:	0030      	movs	r0, r6
 8007812:	f7fa fc49 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 8007816:	4682      	mov	sl, r0
 8007818:	2801      	cmp	r0, #1
 800781a:	d925      	bls.n	8007868 <initialize.lto_priv.313+0x148>
 800781c:	2802      	cmp	r0, #2
 800781e:	d10c      	bne.n	800783a <initialize.lto_priv.313+0x11a>
 8007820:	07fb      	lsls	r3, r7, #31
 8007822:	d40a      	bmi.n	800783a <initialize.lto_priv.313+0x11a>
 8007824:	4b43      	ldr	r3, [pc, #268]	; (8007934 <initialize.lto_priv.313+0x214>)
 8007826:	001a      	movs	r2, r3
 8007828:	3230      	adds	r2, #48	; 0x30
 800782a:	7812      	ldrb	r2, [r2, #0]
 800782c:	2a01      	cmp	r2, #1
 800782e:	d903      	bls.n	8007838 <initialize.lto_priv.313+0x118>
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	4a43      	ldr	r2, [pc, #268]	; (8007940 <initialize.lto_priv.313+0x220>)
 8007834:	4943      	ldr	r1, [pc, #268]	; (8007944 <initialize.lto_priv.313+0x224>)
 8007836:	4798      	blx	r3
 8007838:	3701      	adds	r7, #1
 800783a:	4643      	mov	r3, r8
 800783c:	4651      	mov	r1, sl
 800783e:	1bd8      	subs	r0, r3, r7
 8007840:	f007 fd46 	bl	800f2d0 <__aeabi_idivmod>
 8007844:	468a      	mov	sl, r1
 8007846:	2900      	cmp	r1, #0
 8007848:	dd0e      	ble.n	8007868 <initialize.lto_priv.313+0x148>
 800784a:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <initialize.lto_priv.313+0x214>)
 800784c:	001a      	movs	r2, r3
 800784e:	3230      	adds	r2, #48	; 0x30
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	2a01      	cmp	r2, #1
 8007854:	d904      	bls.n	8007860 <initialize.lto_priv.313+0x140>
 8007856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007858:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <initialize.lto_priv.313+0x228>)
 800785a:	493a      	ldr	r1, [pc, #232]	; (8007944 <initialize.lto_priv.313+0x224>)
 800785c:	2002      	movs	r0, #2
 800785e:	4798      	blx	r3
 8007860:	4643      	mov	r3, r8
 8007862:	4652      	mov	r2, sl
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	4698      	mov	r8, r3
 8007868:	45b8      	cmp	r8, r7
 800786a:	da73      	bge.n	8007954 <initialize.lto_priv.313+0x234>
 800786c:	4b31      	ldr	r3, [pc, #196]	; (8007934 <initialize.lto_priv.313+0x214>)
 800786e:	4a37      	ldr	r2, [pc, #220]	; (800794c <initialize.lto_priv.313+0x22c>)
 8007870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007872:	4934      	ldr	r1, [pc, #208]	; (8007944 <initialize.lto_priv.313+0x224>)
 8007874:	2000      	movs	r0, #0
 8007876:	4798      	blx	r3
 8007878:	2000      	movs	r0, #0
 800787a:	e76c      	b.n	8007756 <initialize.lto_priv.313+0x36>
 800787c:	0030      	movs	r0, r6
 800787e:	f7ff f83b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007882:	2400      	movs	r4, #0
 8007884:	2800      	cmp	r0, #0
 8007886:	d000      	beq.n	800788a <initialize.lto_priv.313+0x16a>
 8007888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800788a:	0030      	movs	r0, r6
 800788c:	f7ff f834 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007890:	2800      	cmp	r0, #0
 8007892:	d043      	beq.n	800791c <initialize.lto_priv.313+0x1fc>
 8007894:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8007896:	1c21      	adds	r1, r4, #0
 8007898:	f006 fdcc 	bl	800e434 <__aeabi_fadd>
 800789c:	4680      	mov	r8, r0
 800789e:	f003 fcf1 	bl	800b284 <get_dt.constprop.10>
 80078a2:	1c21      	adds	r1, r4, #0
 80078a4:	9007      	str	r0, [sp, #28]
 80078a6:	1c20      	adds	r0, r4, #0
 80078a8:	f006 fdc4 	bl	800e434 <__aeabi_fadd>
 80078ac:	4928      	ldr	r1, [pc, #160]	; (8007950 <initialize.lto_priv.313+0x230>)
 80078ae:	1c07      	adds	r7, r0, #0
 80078b0:	9807      	ldr	r0, [sp, #28]
 80078b2:	f007 f86b 	bl	800e98c <__aeabi_fmul>
 80078b6:	1c01      	adds	r1, r0, #0
 80078b8:	1c38      	adds	r0, r7, #0
 80078ba:	f006 ff55 	bl	800e768 <__aeabi_fdiv>
 80078be:	2100      	movs	r1, #0
 80078c0:	1c07      	adds	r7, r0, #0
 80078c2:	1c20      	adds	r0, r4, #0
 80078c4:	f007 fd5a 	bl	800f37c <__aeabi_fcmplt>
 80078c8:	2800      	cmp	r0, #0
 80078ca:	d129      	bne.n	8007920 <initialize.lto_priv.313+0x200>
 80078cc:	21fc      	movs	r1, #252	; 0xfc
 80078ce:	0589      	lsls	r1, r1, #22
 80078d0:	1c38      	adds	r0, r7, #0
 80078d2:	f006 fdaf 	bl	800e434 <__aeabi_fadd>
 80078d6:	f007 ff6d 	bl	800f7b4 <__aeabi_f2iz>
 80078da:	0007      	movs	r7, r0
 80078dc:	f003 fcd2 	bl	800b284 <get_dt.constprop.10>
 80078e0:	4641      	mov	r1, r8
 80078e2:	9007      	str	r0, [sp, #28]
 80078e4:	4640      	mov	r0, r8
 80078e6:	f006 fda5 	bl	800e434 <__aeabi_fadd>
 80078ea:	4919      	ldr	r1, [pc, #100]	; (8007950 <initialize.lto_priv.313+0x230>)
 80078ec:	1c04      	adds	r4, r0, #0
 80078ee:	9807      	ldr	r0, [sp, #28]
 80078f0:	f007 f84c 	bl	800e98c <__aeabi_fmul>
 80078f4:	1c01      	adds	r1, r0, #0
 80078f6:	1c20      	adds	r0, r4, #0
 80078f8:	f006 ff36 	bl	800e768 <__aeabi_fdiv>
 80078fc:	2100      	movs	r1, #0
 80078fe:	1c04      	adds	r4, r0, #0
 8007900:	4640      	mov	r0, r8
 8007902:	f007 fd3b 	bl	800f37c <__aeabi_fcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d10d      	bne.n	8007926 <initialize.lto_priv.313+0x206>
 800790a:	21fc      	movs	r1, #252	; 0xfc
 800790c:	0589      	lsls	r1, r1, #22
 800790e:	1c20      	adds	r0, r4, #0
 8007910:	f006 fd90 	bl	800e434 <__aeabi_fadd>
 8007914:	f007 ff4e 	bl	800f7b4 <__aeabi_f2iz>
 8007918:	4680      	mov	r8, r0
 800791a:	e772      	b.n	8007802 <initialize.lto_priv.313+0xe2>
 800791c:	2000      	movs	r0, #0
 800791e:	e7ba      	b.n	8007896 <initialize.lto_priv.313+0x176>
 8007920:	21bf      	movs	r1, #191	; 0xbf
 8007922:	0609      	lsls	r1, r1, #24
 8007924:	e7d4      	b.n	80078d0 <initialize.lto_priv.313+0x1b0>
 8007926:	21bf      	movs	r1, #191	; 0xbf
 8007928:	0609      	lsls	r1, r1, #24
 800792a:	e7f0      	b.n	800790e <initialize.lto_priv.313+0x1ee>
 800792c:	4653      	mov	r3, sl
 800792e:	781c      	ldrb	r4, [r3, #0]
 8007930:	e76e      	b.n	8007810 <initialize.lto_priv.313+0xf0>
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	200002b0 	.word	0x200002b0
 8007938:	0801d338 	.word	0x0801d338
 800793c:	0801cf9c 	.word	0x0801cf9c
 8007940:	0801d589 	.word	0x0801d589
 8007944:	0801d5be 	.word	0x0801d5be
 8007948:	0801d3f0 	.word	0x0801d3f0
 800794c:	0801d423 	.word	0x0801d423
 8007950:	4d8ef3c2 	.word	0x4d8ef3c2
 8007954:	0030      	movs	r0, r6
 8007956:	f7fe ffcf 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 800795a:	2800      	cmp	r0, #0
 800795c:	d005      	beq.n	800796a <initialize.lto_priv.313+0x24a>
 800795e:	0033      	movs	r3, r6
 8007960:	336e      	adds	r3, #110	; 0x6e
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d000      	beq.n	800796a <initialize.lto_priv.313+0x24a>
 8007968:	e1b8      	b.n	8007cdc <initialize.lto_priv.313+0x5bc>
 800796a:	4bd2      	ldr	r3, [pc, #840]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 800796c:	429f      	cmp	r7, r3
 800796e:	db00      	blt.n	8007972 <initialize.lto_priv.313+0x252>
 8007970:	e0cb      	b.n	8007b0a <initialize.lto_priv.313+0x3ea>
 8007972:	4bd1      	ldr	r3, [pc, #836]	; (8007cb8 <initialize.lto_priv.313+0x598>)
 8007974:	0038      	movs	r0, r7
 8007976:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007978:	f003 fca0 	bl	800b2bc <points_to_meter.constprop.9>
 800797c:	2100      	movs	r1, #0
 800797e:	f007 fcfd 	bl	800f37c <__aeabi_fcmplt>
 8007982:	4cce      	ldr	r4, [pc, #824]	; (8007cbc <initialize.lto_priv.313+0x59c>)
 8007984:	2800      	cmp	r0, #0
 8007986:	d100      	bne.n	800798a <initialize.lto_priv.313+0x26a>
 8007988:	4ccd      	ldr	r4, [pc, #820]	; (8007cc0 <initialize.lto_priv.313+0x5a0>)
 800798a:	0038      	movs	r0, r7
 800798c:	f003 fc96 	bl	800b2bc <points_to_meter.constprop.9>
 8007990:	1c05      	adds	r5, r0, #0
 8007992:	0038      	movs	r0, r7
 8007994:	f003 fc92 	bl	800b2bc <points_to_meter.constprop.9>
 8007998:	2100      	movs	r1, #0
 800799a:	f007 fcef 	bl	800f37c <__aeabi_fcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d000      	beq.n	80079a4 <initialize.lto_priv.313+0x284>
 80079a2:	e0a6      	b.n	8007af2 <initialize.lto_priv.313+0x3d2>
 80079a4:	21fe      	movs	r1, #254	; 0xfe
 80079a6:	0589      	lsls	r1, r1, #22
 80079a8:	1c28      	adds	r0, r5, #0
 80079aa:	f006 ffef 	bl	800e98c <__aeabi_fmul>
 80079ae:	49c5      	ldr	r1, [pc, #788]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 80079b0:	f006 fd40 	bl	800e434 <__aeabi_fadd>
 80079b4:	f007 fd2a 	bl	800f40c <__aeabi_f2uiz>
 80079b8:	4680      	mov	r8, r0
 80079ba:	0038      	movs	r0, r7
 80079bc:	f003 fc7e 	bl	800b2bc <points_to_meter.constprop.9>
 80079c0:	1c05      	adds	r5, r0, #0
 80079c2:	0038      	movs	r0, r7
 80079c4:	f003 fc7a 	bl	800b2bc <points_to_meter.constprop.9>
 80079c8:	2100      	movs	r1, #0
 80079ca:	f007 fcd7 	bl	800f37c <__aeabi_fcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d000      	beq.n	80079d4 <initialize.lto_priv.313+0x2b4>
 80079d2:	e090      	b.n	8007af6 <initialize.lto_priv.313+0x3d6>
 80079d4:	21fe      	movs	r1, #254	; 0xfe
 80079d6:	0589      	lsls	r1, r1, #22
 80079d8:	1c28      	adds	r0, r5, #0
 80079da:	f006 ffd7 	bl	800e98c <__aeabi_fmul>
 80079de:	49b9      	ldr	r1, [pc, #740]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 80079e0:	f006 fd28 	bl	800e434 <__aeabi_fadd>
 80079e4:	1c05      	adds	r5, r0, #0
 80079e6:	0038      	movs	r0, r7
 80079e8:	f003 fc68 	bl	800b2bc <points_to_meter.constprop.9>
 80079ec:	4681      	mov	r9, r0
 80079ee:	0038      	movs	r0, r7
 80079f0:	f003 fc64 	bl	800b2bc <points_to_meter.constprop.9>
 80079f4:	2100      	movs	r1, #0
 80079f6:	f007 fcc1 	bl	800f37c <__aeabi_fcmplt>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d17d      	bne.n	8007afa <initialize.lto_priv.313+0x3da>
 80079fe:	21fe      	movs	r1, #254	; 0xfe
 8007a00:	0589      	lsls	r1, r1, #22
 8007a02:	4648      	mov	r0, r9
 8007a04:	f006 ffc2 	bl	800e98c <__aeabi_fmul>
 8007a08:	49ae      	ldr	r1, [pc, #696]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007a0a:	f006 fd13 	bl	800e434 <__aeabi_fadd>
 8007a0e:	f007 fcfd 	bl	800f40c <__aeabi_f2uiz>
 8007a12:	f007 ff39 	bl	800f888 <__aeabi_ui2f>
 8007a16:	1c01      	adds	r1, r0, #0
 8007a18:	1c28      	adds	r0, r5, #0
 8007a1a:	f007 f8e9 	bl	800ebf0 <__aeabi_fsub>
 8007a1e:	49aa      	ldr	r1, [pc, #680]	; (8007cc8 <initialize.lto_priv.313+0x5a8>)
 8007a20:	f006 ffb4 	bl	800e98c <__aeabi_fmul>
 8007a24:	f007 fcf2 	bl	800f40c <__aeabi_f2uiz>
 8007a28:	0007      	movs	r7, r0
 8007a2a:	48a2      	ldr	r0, [pc, #648]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a2c:	f003 fc46 	bl	800b2bc <points_to_meter.constprop.9>
 8007a30:	2100      	movs	r1, #0
 8007a32:	f007 fca3 	bl	800f37c <__aeabi_fcmplt>
 8007a36:	4da1      	ldr	r5, [pc, #644]	; (8007cbc <initialize.lto_priv.313+0x59c>)
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d100      	bne.n	8007a3e <initialize.lto_priv.313+0x31e>
 8007a3c:	4da0      	ldr	r5, [pc, #640]	; (8007cc0 <initialize.lto_priv.313+0x5a0>)
 8007a3e:	489d      	ldr	r0, [pc, #628]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a40:	f003 fc3c 	bl	800b2bc <points_to_meter.constprop.9>
 8007a44:	4681      	mov	r9, r0
 8007a46:	489b      	ldr	r0, [pc, #620]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a48:	f003 fc38 	bl	800b2bc <points_to_meter.constprop.9>
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f007 fc95 	bl	800f37c <__aeabi_fcmplt>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d153      	bne.n	8007afe <initialize.lto_priv.313+0x3de>
 8007a56:	21fe      	movs	r1, #254	; 0xfe
 8007a58:	0589      	lsls	r1, r1, #22
 8007a5a:	4648      	mov	r0, r9
 8007a5c:	f006 ff96 	bl	800e98c <__aeabi_fmul>
 8007a60:	4998      	ldr	r1, [pc, #608]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007a62:	f006 fce7 	bl	800e434 <__aeabi_fadd>
 8007a66:	f007 fcd1 	bl	800f40c <__aeabi_f2uiz>
 8007a6a:	4681      	mov	r9, r0
 8007a6c:	4891      	ldr	r0, [pc, #580]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a6e:	f003 fc25 	bl	800b2bc <points_to_meter.constprop.9>
 8007a72:	4682      	mov	sl, r0
 8007a74:	488f      	ldr	r0, [pc, #572]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a76:	f003 fc21 	bl	800b2bc <points_to_meter.constprop.9>
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f007 fc7e 	bl	800f37c <__aeabi_fcmplt>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d13e      	bne.n	8007b02 <initialize.lto_priv.313+0x3e2>
 8007a84:	21fe      	movs	r1, #254	; 0xfe
 8007a86:	0589      	lsls	r1, r1, #22
 8007a88:	4650      	mov	r0, sl
 8007a8a:	f006 ff7f 	bl	800e98c <__aeabi_fmul>
 8007a8e:	498d      	ldr	r1, [pc, #564]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007a90:	f006 fcd0 	bl	800e434 <__aeabi_fadd>
 8007a94:	4682      	mov	sl, r0
 8007a96:	4887      	ldr	r0, [pc, #540]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007a98:	f003 fc10 	bl	800b2bc <points_to_meter.constprop.9>
 8007a9c:	4683      	mov	fp, r0
 8007a9e:	4885      	ldr	r0, [pc, #532]	; (8007cb4 <initialize.lto_priv.313+0x594>)
 8007aa0:	f003 fc0c 	bl	800b2bc <points_to_meter.constprop.9>
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	f007 fc69 	bl	800f37c <__aeabi_fcmplt>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d12b      	bne.n	8007b06 <initialize.lto_priv.313+0x3e6>
 8007aae:	21fe      	movs	r1, #254	; 0xfe
 8007ab0:	0589      	lsls	r1, r1, #22
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f006 ff6a 	bl	800e98c <__aeabi_fmul>
 8007ab8:	4982      	ldr	r1, [pc, #520]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007aba:	f006 fcbb 	bl	800e434 <__aeabi_fadd>
 8007abe:	f007 fca5 	bl	800f40c <__aeabi_f2uiz>
 8007ac2:	f007 fee1 	bl	800f888 <__aeabi_ui2f>
 8007ac6:	1c01      	adds	r1, r0, #0
 8007ac8:	4650      	mov	r0, sl
 8007aca:	f007 f891 	bl	800ebf0 <__aeabi_fsub>
 8007ace:	497e      	ldr	r1, [pc, #504]	; (8007cc8 <initialize.lto_priv.313+0x5a8>)
 8007ad0:	f006 ff5c 	bl	800e98c <__aeabi_fmul>
 8007ad4:	f007 fc9a 	bl	800f40c <__aeabi_f2uiz>
 8007ad8:	464b      	mov	r3, r9
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	4643      	mov	r3, r8
 8007ade:	9004      	str	r0, [sp, #16]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	9502      	str	r5, [sp, #8]
 8007ae4:	9701      	str	r7, [sp, #4]
 8007ae6:	0023      	movs	r3, r4
 8007ae8:	4a78      	ldr	r2, [pc, #480]	; (8007ccc <initialize.lto_priv.313+0x5ac>)
 8007aea:	4979      	ldr	r1, [pc, #484]	; (8007cd0 <initialize.lto_priv.313+0x5b0>)
 8007aec:	2000      	movs	r0, #0
 8007aee:	47b0      	blx	r6
 8007af0:	e6c2      	b.n	8007878 <initialize.lto_priv.313+0x158>
 8007af2:	4978      	ldr	r1, [pc, #480]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007af4:	e758      	b.n	80079a8 <initialize.lto_priv.313+0x288>
 8007af6:	4977      	ldr	r1, [pc, #476]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007af8:	e76e      	b.n	80079d8 <initialize.lto_priv.313+0x2b8>
 8007afa:	4976      	ldr	r1, [pc, #472]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007afc:	e781      	b.n	8007a02 <initialize.lto_priv.313+0x2e2>
 8007afe:	4975      	ldr	r1, [pc, #468]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007b00:	e7ab      	b.n	8007a5a <initialize.lto_priv.313+0x33a>
 8007b02:	4974      	ldr	r1, [pc, #464]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007b04:	e7c0      	b.n	8007a88 <initialize.lto_priv.313+0x368>
 8007b06:	4973      	ldr	r1, [pc, #460]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007b08:	e7d3      	b.n	8007ab2 <initialize.lto_priv.313+0x392>
 8007b0a:	237c      	movs	r3, #124	; 0x7c
 8007b0c:	0164      	lsls	r4, r4, #5
 8007b0e:	3c4b      	subs	r4, #75	; 0x4b
 8007b10:	435c      	muls	r4, r3
 8007b12:	4544      	cmp	r4, r8
 8007b14:	db00      	blt.n	8007b18 <initialize.lto_priv.313+0x3f8>
 8007b16:	e0e1      	b.n	8007cdc <initialize.lto_priv.313+0x5bc>
 8007b18:	4b67      	ldr	r3, [pc, #412]	; (8007cb8 <initialize.lto_priv.313+0x598>)
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	9306      	str	r3, [sp, #24]
 8007b20:	f003 fbcc 	bl	800b2bc <points_to_meter.constprop.9>
 8007b24:	2100      	movs	r1, #0
 8007b26:	f007 fc29 	bl	800f37c <__aeabi_fcmplt>
 8007b2a:	4d64      	ldr	r5, [pc, #400]	; (8007cbc <initialize.lto_priv.313+0x59c>)
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d100      	bne.n	8007b32 <initialize.lto_priv.313+0x412>
 8007b30:	4d63      	ldr	r5, [pc, #396]	; (8007cc0 <initialize.lto_priv.313+0x5a0>)
 8007b32:	4640      	mov	r0, r8
 8007b34:	f003 fbc2 	bl	800b2bc <points_to_meter.constprop.9>
 8007b38:	1c06      	adds	r6, r0, #0
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f003 fbbe 	bl	800b2bc <points_to_meter.constprop.9>
 8007b40:	2100      	movs	r1, #0
 8007b42:	f007 fc1b 	bl	800f37c <__aeabi_fcmplt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d000      	beq.n	8007b4c <initialize.lto_priv.313+0x42c>
 8007b4a:	e0a7      	b.n	8007c9c <initialize.lto_priv.313+0x57c>
 8007b4c:	21fe      	movs	r1, #254	; 0xfe
 8007b4e:	0589      	lsls	r1, r1, #22
 8007b50:	1c30      	adds	r0, r6, #0
 8007b52:	f006 ff1b 	bl	800e98c <__aeabi_fmul>
 8007b56:	495b      	ldr	r1, [pc, #364]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007b58:	f006 fc6c 	bl	800e434 <__aeabi_fadd>
 8007b5c:	f007 fc56 	bl	800f40c <__aeabi_f2uiz>
 8007b60:	0007      	movs	r7, r0
 8007b62:	4640      	mov	r0, r8
 8007b64:	f003 fbaa 	bl	800b2bc <points_to_meter.constprop.9>
 8007b68:	1c06      	adds	r6, r0, #0
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	f003 fba6 	bl	800b2bc <points_to_meter.constprop.9>
 8007b70:	2100      	movs	r1, #0
 8007b72:	f007 fc03 	bl	800f37c <__aeabi_fcmplt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d000      	beq.n	8007b7c <initialize.lto_priv.313+0x45c>
 8007b7a:	e091      	b.n	8007ca0 <initialize.lto_priv.313+0x580>
 8007b7c:	21fe      	movs	r1, #254	; 0xfe
 8007b7e:	0589      	lsls	r1, r1, #22
 8007b80:	1c30      	adds	r0, r6, #0
 8007b82:	f006 ff03 	bl	800e98c <__aeabi_fmul>
 8007b86:	494f      	ldr	r1, [pc, #316]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007b88:	f006 fc54 	bl	800e434 <__aeabi_fadd>
 8007b8c:	1c06      	adds	r6, r0, #0
 8007b8e:	4640      	mov	r0, r8
 8007b90:	f003 fb94 	bl	800b2bc <points_to_meter.constprop.9>
 8007b94:	4681      	mov	r9, r0
 8007b96:	4640      	mov	r0, r8
 8007b98:	f003 fb90 	bl	800b2bc <points_to_meter.constprop.9>
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	f007 fbed 	bl	800f37c <__aeabi_fcmplt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d17e      	bne.n	8007ca4 <initialize.lto_priv.313+0x584>
 8007ba6:	21fe      	movs	r1, #254	; 0xfe
 8007ba8:	0589      	lsls	r1, r1, #22
 8007baa:	4648      	mov	r0, r9
 8007bac:	f006 feee 	bl	800e98c <__aeabi_fmul>
 8007bb0:	4944      	ldr	r1, [pc, #272]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007bb2:	f006 fc3f 	bl	800e434 <__aeabi_fadd>
 8007bb6:	f007 fc29 	bl	800f40c <__aeabi_f2uiz>
 8007bba:	f007 fe65 	bl	800f888 <__aeabi_ui2f>
 8007bbe:	1c01      	adds	r1, r0, #0
 8007bc0:	1c30      	adds	r0, r6, #0
 8007bc2:	f007 f815 	bl	800ebf0 <__aeabi_fsub>
 8007bc6:	4940      	ldr	r1, [pc, #256]	; (8007cc8 <initialize.lto_priv.313+0x5a8>)
 8007bc8:	f006 fee0 	bl	800e98c <__aeabi_fmul>
 8007bcc:	f007 fc1e 	bl	800f40c <__aeabi_f2uiz>
 8007bd0:	4680      	mov	r8, r0
 8007bd2:	0020      	movs	r0, r4
 8007bd4:	f003 fb72 	bl	800b2bc <points_to_meter.constprop.9>
 8007bd8:	2100      	movs	r1, #0
 8007bda:	f007 fbcf 	bl	800f37c <__aeabi_fcmplt>
 8007bde:	4e37      	ldr	r6, [pc, #220]	; (8007cbc <initialize.lto_priv.313+0x59c>)
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d100      	bne.n	8007be6 <initialize.lto_priv.313+0x4c6>
 8007be4:	4e36      	ldr	r6, [pc, #216]	; (8007cc0 <initialize.lto_priv.313+0x5a0>)
 8007be6:	0020      	movs	r0, r4
 8007be8:	f003 fb68 	bl	800b2bc <points_to_meter.constprop.9>
 8007bec:	4681      	mov	r9, r0
 8007bee:	0020      	movs	r0, r4
 8007bf0:	f003 fb64 	bl	800b2bc <points_to_meter.constprop.9>
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	f007 fbc1 	bl	800f37c <__aeabi_fcmplt>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d154      	bne.n	8007ca8 <initialize.lto_priv.313+0x588>
 8007bfe:	21fe      	movs	r1, #254	; 0xfe
 8007c00:	0589      	lsls	r1, r1, #22
 8007c02:	4648      	mov	r0, r9
 8007c04:	f006 fec2 	bl	800e98c <__aeabi_fmul>
 8007c08:	492e      	ldr	r1, [pc, #184]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007c0a:	f006 fc13 	bl	800e434 <__aeabi_fadd>
 8007c0e:	f007 fbfd 	bl	800f40c <__aeabi_f2uiz>
 8007c12:	4681      	mov	r9, r0
 8007c14:	0020      	movs	r0, r4
 8007c16:	f003 fb51 	bl	800b2bc <points_to_meter.constprop.9>
 8007c1a:	4682      	mov	sl, r0
 8007c1c:	0020      	movs	r0, r4
 8007c1e:	f003 fb4d 	bl	800b2bc <points_to_meter.constprop.9>
 8007c22:	2100      	movs	r1, #0
 8007c24:	f007 fbaa 	bl	800f37c <__aeabi_fcmplt>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d13f      	bne.n	8007cac <initialize.lto_priv.313+0x58c>
 8007c2c:	21fe      	movs	r1, #254	; 0xfe
 8007c2e:	0589      	lsls	r1, r1, #22
 8007c30:	4650      	mov	r0, sl
 8007c32:	f006 feab 	bl	800e98c <__aeabi_fmul>
 8007c36:	4923      	ldr	r1, [pc, #140]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007c38:	f006 fbfc 	bl	800e434 <__aeabi_fadd>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	0020      	movs	r0, r4
 8007c40:	f003 fb3c 	bl	800b2bc <points_to_meter.constprop.9>
 8007c44:	4683      	mov	fp, r0
 8007c46:	0020      	movs	r0, r4
 8007c48:	f003 fb38 	bl	800b2bc <points_to_meter.constprop.9>
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	f007 fb95 	bl	800f37c <__aeabi_fcmplt>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d12c      	bne.n	8007cb0 <initialize.lto_priv.313+0x590>
 8007c56:	21fe      	movs	r1, #254	; 0xfe
 8007c58:	0589      	lsls	r1, r1, #22
 8007c5a:	4658      	mov	r0, fp
 8007c5c:	f006 fe96 	bl	800e98c <__aeabi_fmul>
 8007c60:	4918      	ldr	r1, [pc, #96]	; (8007cc4 <initialize.lto_priv.313+0x5a4>)
 8007c62:	f006 fbe7 	bl	800e434 <__aeabi_fadd>
 8007c66:	f007 fbd1 	bl	800f40c <__aeabi_f2uiz>
 8007c6a:	f007 fe0d 	bl	800f888 <__aeabi_ui2f>
 8007c6e:	1c01      	adds	r1, r0, #0
 8007c70:	4650      	mov	r0, sl
 8007c72:	f006 ffbd 	bl	800ebf0 <__aeabi_fsub>
 8007c76:	4914      	ldr	r1, [pc, #80]	; (8007cc8 <initialize.lto_priv.313+0x5a8>)
 8007c78:	f006 fe88 	bl	800e98c <__aeabi_fmul>
 8007c7c:	f007 fbc6 	bl	800f40c <__aeabi_f2uiz>
 8007c80:	464b      	mov	r3, r9
 8007c82:	9303      	str	r3, [sp, #12]
 8007c84:	4643      	mov	r3, r8
 8007c86:	9004      	str	r0, [sp, #16]
 8007c88:	9301      	str	r3, [sp, #4]
 8007c8a:	9602      	str	r6, [sp, #8]
 8007c8c:	9700      	str	r7, [sp, #0]
 8007c8e:	002b      	movs	r3, r5
 8007c90:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <initialize.lto_priv.313+0x5b8>)
 8007c92:	490f      	ldr	r1, [pc, #60]	; (8007cd0 <initialize.lto_priv.313+0x5b0>)
 8007c94:	2000      	movs	r0, #0
 8007c96:	9c06      	ldr	r4, [sp, #24]
 8007c98:	47a0      	blx	r4
 8007c9a:	e5ed      	b.n	8007878 <initialize.lto_priv.313+0x158>
 8007c9c:	490d      	ldr	r1, [pc, #52]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007c9e:	e757      	b.n	8007b50 <initialize.lto_priv.313+0x430>
 8007ca0:	490c      	ldr	r1, [pc, #48]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007ca2:	e76d      	b.n	8007b80 <initialize.lto_priv.313+0x460>
 8007ca4:	490b      	ldr	r1, [pc, #44]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007ca6:	e780      	b.n	8007baa <initialize.lto_priv.313+0x48a>
 8007ca8:	490a      	ldr	r1, [pc, #40]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007caa:	e7aa      	b.n	8007c02 <initialize.lto_priv.313+0x4e2>
 8007cac:	4909      	ldr	r1, [pc, #36]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007cae:	e7bf      	b.n	8007c30 <initialize.lto_priv.313+0x510>
 8007cb0:	4908      	ldr	r1, [pc, #32]	; (8007cd4 <initialize.lto_priv.313+0x5b4>)
 8007cb2:	e7d2      	b.n	8007c5a <initialize.lto_priv.313+0x53a>
 8007cb4:	fffffa30 	.word	0xfffffa30
 8007cb8:	200002b0 	.word	0x200002b0
 8007cbc:	0801e12c 	.word	0x0801e12c
 8007cc0:	0801e057 	.word	0x0801e057
 8007cc4:	350637bd 	.word	0x350637bd
 8007cc8:	49742400 	.word	0x49742400
 8007ccc:	0801d452 	.word	0x0801d452
 8007cd0:	0801d5be 	.word	0x0801d5be
 8007cd4:	bf800000 	.word	0xbf800000
 8007cd8:	0801d48f 	.word	0x0801d48f
 8007cdc:	0030      	movs	r0, r6
 8007cde:	f7fa f9e3 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 8007ce2:	0033      	movs	r3, r6
 8007ce4:	332e      	adds	r3, #46	; 0x2e
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	4682      	mov	sl, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d049      	beq.n	8007d82 <initialize.lto_priv.313+0x662>
 8007cee:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8007cf0:	466a      	mov	r2, sp
 8007cf2:	8c12      	ldrh	r2, [r2, #32]
 8007cf4:	0ffc      	lsrs	r4, r7, #31
 8007cf6:	9207      	str	r2, [sp, #28]
 8007cf8:	464a      	mov	r2, r9
 8007cfa:	19e0      	adds	r0, r4, r7
 8007cfc:	8093      	strh	r3, [r2, #4]
 8007cfe:	217c      	movs	r1, #124	; 0x7c
 8007d00:	f007 fa00 	bl	800f104 <__divsi3>
 8007d04:	464b      	mov	r3, r9
 8007d06:	1b04      	subs	r4, r0, r4
 8007d08:	811c      	strh	r4, [r3, #8]
 8007d0a:	4643      	mov	r3, r8
 8007d0c:	0fdb      	lsrs	r3, r3, #31
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	4443      	add	r3, r8
 8007d12:	0018      	movs	r0, r3
 8007d14:	217c      	movs	r1, #124	; 0x7c
 8007d16:	f007 f9f5 	bl	800f104 <__divsi3>
 8007d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	1ac0      	subs	r0, r0, r3
 8007d20:	464b      	mov	r3, r9
 8007d22:	3001      	adds	r0, #1
 8007d24:	1b04      	subs	r4, r0, r4
 8007d26:	b2a4      	uxth	r4, r4
 8007d28:	815c      	strh	r4, [r3, #10]
 8007d2a:	0038      	movs	r0, r7
 8007d2c:	f007 fad0 	bl	800f2d0 <__aeabi_idivmod>
 8007d30:	4451      	add	r1, sl
 8007d32:	0008      	movs	r0, r1
 8007d34:	4651      	mov	r1, sl
 8007d36:	f007 facb 	bl	800f2d0 <__aeabi_idivmod>
 8007d3a:	464b      	mov	r3, r9
 8007d3c:	0020      	movs	r0, r4
 8007d3e:	80d9      	strh	r1, [r3, #6]
 8007d40:	9907      	ldr	r1, [sp, #28]
 8007d42:	f007 f9db 	bl	800f0fc <__aeabi_uidivmod>
 8007d46:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d48:	b280      	uxth	r0, r0
 8007d4a:	2900      	cmp	r1, #0
 8007d4c:	d11d      	bne.n	8007d8a <initialize.lto_priv.313+0x66a>
 8007d4e:	464b      	mov	r3, r9
 8007d50:	8198      	strh	r0, [r3, #12]
 8007d52:	0030      	movs	r0, r6
 8007d54:	f7fa ffe5 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 8007d58:	0004      	movs	r4, r0
 8007d5a:	0030      	movs	r0, r6
 8007d5c:	f7fa ffba 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 8007d60:	2c04      	cmp	r4, #4
 8007d62:	d001      	beq.n	8007d68 <initialize.lto_priv.313+0x648>
 8007d64:	2801      	cmp	r0, #1
 8007d66:	d012      	beq.n	8007d8e <initialize.lto_priv.313+0x66e>
 8007d68:	464b      	mov	r3, r9
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	895b      	ldrh	r3, [r3, #10]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d20d      	bcs.n	8007d8e <initialize.lto_priv.313+0x66e>
 8007d72:	4bce      	ldr	r3, [pc, #824]	; (80080ac <initialize.lto_priv.313+0x98c>)
 8007d74:	2000      	movs	r0, #0
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	4acd      	ldr	r2, [pc, #820]	; (80080b0 <initialize.lto_priv.313+0x990>)
 8007d7a:	49ce      	ldr	r1, [pc, #824]	; (80080b4 <initialize.lto_priv.313+0x994>)
 8007d7c:	4798      	blx	r3
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e4e9      	b.n	8007756 <initialize.lto_priv.313+0x36>
 8007d82:	0033      	movs	r3, r6
 8007d84:	3332      	adds	r3, #50	; 0x32
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	e7b2      	b.n	8007cf0 <initialize.lto_priv.313+0x5d0>
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	e7df      	b.n	8007d4e <initialize.lto_priv.313+0x62e>
 8007d8e:	f003 fa79 	bl	800b284 <get_dt.constprop.10>
 8007d92:	1c04      	adds	r4, r0, #0
 8007d94:	4650      	mov	r0, sl
 8007d96:	f007 fd77 	bl	800f888 <__aeabi_ui2f>
 8007d9a:	1c21      	adds	r1, r4, #0
 8007d9c:	f006 fdf6 	bl	800e98c <__aeabi_fmul>
 8007da0:	465b      	mov	r3, fp
 8007da2:	60d8      	str	r0, [r3, #12]
 8007da4:	0038      	movs	r0, r7
 8007da6:	f003 fa89 	bl	800b2bc <points_to_meter.constprop.9>
 8007daa:	465b      	mov	r3, fp
 8007dac:	6018      	str	r0, [r3, #0]
 8007dae:	4640      	mov	r0, r8
 8007db0:	f003 fa84 	bl	800b2bc <points_to_meter.constprop.9>
 8007db4:	465b      	mov	r3, fp
 8007db6:	6819      	ldr	r1, [r3, #0]
 8007db8:	6098      	str	r0, [r3, #8]
 8007dba:	f006 ff19 	bl	800ebf0 <__aeabi_fsub>
 8007dbe:	465b      	mov	r3, fp
 8007dc0:	6058      	str	r0, [r3, #4]
 8007dc2:	4643      	mov	r3, r8
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	1bd8      	subs	r0, r3, r7
 8007dc8:	f007 f99c 	bl	800f104 <__divsi3>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	b283      	uxth	r3, r0
 8007dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	82da      	strh	r2, [r3, #22]
 8007dda:	464b      	mov	r3, r9
 8007ddc:	899b      	ldrh	r3, [r3, #12]
 8007dde:	930a      	str	r3, [sp, #40]	; 0x28
 8007de0:	465b      	mov	r3, fp
 8007de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de4:	831a      	strh	r2, [r3, #24]
 8007de6:	464b      	mov	r3, r9
 8007de8:	895c      	ldrh	r4, [r3, #10]
 8007dea:	237c      	movs	r3, #124	; 0x7c
 8007dec:	0018      	movs	r0, r3
 8007dee:	4360      	muls	r0, r4
 8007df0:	4698      	mov	r8, r3
 8007df2:	f007 f8fd 	bl	800eff0 <__udivsi3>
 8007df6:	9b06      	ldr	r3, [sp, #24]
 8007df8:	4641      	mov	r1, r8
 8007dfa:	8018      	strh	r0, [r3, #0]
 8007dfc:	811c      	strh	r4, [r3, #8]
 8007dfe:	0038      	movs	r0, r7
 8007e00:	f007 fa66 	bl	800f2d0 <__aeabi_idivmod>
 8007e04:	4441      	add	r1, r8
 8007e06:	0008      	movs	r0, r1
 8007e08:	4641      	mov	r1, r8
 8007e0a:	f007 fa61 	bl	800f2d0 <__aeabi_idivmod>
 8007e0e:	0008      	movs	r0, r1
 8007e10:	4651      	mov	r1, sl
 8007e12:	f007 f977 	bl	800f104 <__divsi3>
 8007e16:	9b06      	ldr	r3, [sp, #24]
 8007e18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e1a:	8058      	strh	r0, [r3, #2]
 8007e1c:	809a      	strh	r2, [r3, #4]
 8007e1e:	4651      	mov	r1, sl
 8007e20:	4640      	mov	r0, r8
 8007e22:	f007 f8e5 	bl	800eff0 <__udivsi3>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e2a:	80d8      	strh	r0, [r3, #6]
 8007e2c:	821a      	strh	r2, [r3, #16]
 8007e2e:	9b07      	ldr	r3, [sp, #28]
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d228      	bcs.n	8007e86 <initialize.lto_priv.313+0x766>
 8007e34:	466b      	mov	r3, sp
 8007e36:	8c19      	ldrh	r1, [r3, #32]
 8007e38:	9b06      	ldr	r3, [sp, #24]
 8007e3a:	8299      	strh	r1, [r3, #20]
 8007e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <initialize.lto_priv.313+0x72c>
 8007e42:	9907      	ldr	r1, [sp, #28]
 8007e44:	0020      	movs	r0, r4
 8007e46:	f007 f959 	bl	800f0fc <__aeabi_uidivmod>
 8007e4a:	b289      	uxth	r1, r1
 8007e4c:	9b06      	ldr	r3, [sp, #24]
 8007e4e:	82d9      	strh	r1, [r3, #22]
 8007e50:	0030      	movs	r0, r6
 8007e52:	f7fe fd51 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d019      	beq.n	8007e8e <initialize.lto_priv.313+0x76e>
 8007e5a:	0033      	movs	r3, r6
 8007e5c:	3346      	adds	r3, #70	; 0x46
 8007e5e:	7818      	ldrb	r0, [r3, #0]
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d014      	beq.n	8007e8e <initialize.lto_priv.313+0x76e>
 8007e64:	2300      	movs	r3, #0
 8007e66:	2001      	movs	r0, #1
 8007e68:	2400      	movs	r4, #0
 8007e6a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007e6c:	64a8      	str	r0, [r5, #72]	; 0x48
 8007e6e:	652c      	str	r4, [r5, #80]	; 0x50
 8007e70:	0030      	movs	r0, r6
 8007e72:	f7fa ff2f 	bl	8002cd4 <acc_base_configuration_repetition_mode_get>
 8007e76:	0023      	movs	r3, r4
 8007e78:	ac10      	add	r4, sp, #64	; 0x40
 8007e7a:	2803      	cmp	r0, #3
 8007e7c:	d80d      	bhi.n	8007e9a <initialize.lto_priv.313+0x77a>
 8007e7e:	f007 f8a3 	bl	800efc8 <__gnu_thumb1_case_uqi>
 8007e82:	1a08      	.short	0x1a08
 8007e84:	3020      	.short	0x3020
 8007e86:	9b06      	ldr	r3, [sp, #24]
 8007e88:	829c      	strh	r4, [r3, #20]
 8007e8a:	82dc      	strh	r4, [r3, #22]
 8007e8c:	e7e0      	b.n	8007e50 <initialize.lto_priv.313+0x730>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e7ea      	b.n	8007e68 <initialize.lto_priv.313+0x748>
 8007e92:	656b      	str	r3, [r5, #84]	; 0x54
 8007e94:	65ab      	str	r3, [r5, #88]	; 0x58
 8007e96:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007e98:	662b      	str	r3, [r5, #96]	; 0x60
 8007e9a:	0030      	movs	r0, r6
 8007e9c:	f7fa ff41 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 8007ea0:	2804      	cmp	r0, #4
 8007ea2:	d82a      	bhi.n	8007efa <initialize.lto_priv.313+0x7da>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f007 f898 	bl	800efdc <__gnu_thumb1_case_uhi>
 8007eac:	00250025 	.word	0x00250025
 8007eb0:	00fa00f7 	.word	0x00fa00f7
 8007eb4:	0025      	.short	0x0025
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	656b      	str	r3, [r5, #84]	; 0x54
 8007eba:	65aa      	str	r2, [r5, #88]	; 0x58
 8007ebc:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007ebe:	662b      	str	r3, [r5, #96]	; 0x60
 8007ec0:	e7eb      	b.n	8007e9a <initialize.lto_priv.313+0x77a>
 8007ec2:	0030      	movs	r0, r6
 8007ec4:	f7fa fef0 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 8007ec8:	aa0f      	add	r2, sp, #60	; 0x3c
 8007eca:	0021      	movs	r1, r4
 8007ecc:	f7fe faf4 	bl	80064b8 <acc_radar_engine_common_frequency_to_main_clk>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	656b      	str	r3, [r5, #84]	; 0x54
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	65ab      	str	r3, [r5, #88]	; 0x58
 8007ed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007eda:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ede:	662b      	str	r3, [r5, #96]	; 0x60
 8007ee0:	e7db      	b.n	8007e9a <initialize.lto_priv.313+0x77a>
 8007ee2:	0030      	movs	r0, r6
 8007ee4:	f7fa fee0 	bl	8002ca8 <acc_base_configuration_update_rate_get>
 8007ee8:	aa0f      	add	r2, sp, #60	; 0x3c
 8007eea:	0021      	movs	r1, r4
 8007eec:	f7fe fae4 	bl	80064b8 <acc_radar_engine_common_frequency_to_main_clk>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	656b      	str	r3, [r5, #84]	; 0x54
 8007ef4:	e7ef      	b.n	8007ed6 <initialize.lto_priv.313+0x7b6>
 8007ef6:	666a      	str	r2, [r5, #100]	; 0x64
 8007ef8:	66aa      	str	r2, [r5, #104]	; 0x68
 8007efa:	0030      	movs	r0, r6
 8007efc:	f7fe fcfc 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007f00:	2300      	movs	r3, #0
 8007f02:	0007      	movs	r7, r0
 8007f04:	4298      	cmp	r0, r3
 8007f06:	d00b      	beq.n	8007f20 <initialize.lto_priv.313+0x800>
 8007f08:	0033      	movs	r3, r6
 8007f0a:	3350      	adds	r3, #80	; 0x50
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f10:	0033      	movs	r3, r6
 8007f12:	3352      	adds	r3, #82	; 0x52
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	930c      	str	r3, [sp, #48]	; 0x30
 8007f18:	0033      	movs	r3, r6
 8007f1a:	334f      	adds	r3, #79	; 0x4f
 8007f1c:	781f      	ldrb	r7, [r3, #0]
 8007f1e:	003b      	movs	r3, r7
 8007f20:	002a      	movs	r2, r5
 8007f22:	32b4      	adds	r2, #180	; 0xb4
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	2f00      	cmp	r7, #0
 8007f28:	d002      	beq.n	8007f30 <initialize.lto_priv.313+0x810>
 8007f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	6053      	str	r3, [r2, #4]
 8007f30:	0030      	movs	r0, r6
 8007f32:	f7fa feed 	bl	8002d10 <acc_base_configuration_tx_disable_get>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4698      	mov	r8, r3
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d103      	bne.n	8007f46 <initialize.lto_priv.313+0x826>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	d000      	beq.n	8007f46 <initialize.lto_priv.313+0x826>
 8007f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f46:	4642      	mov	r2, r8
 8007f48:	439a      	bics	r2, r3
 8007f4a:	66ea      	str	r2, [r5, #108]	; 0x6c
 8007f4c:	0030      	movs	r0, r6
 8007f4e:	f7fa fed6 	bl	8002cfe <acc_base_configuration_decrease_tx_emission_get>
 8007f52:	4643      	mov	r3, r8
 8007f54:	4058      	eors	r0, r3
 8007f56:	b2c0      	uxtb	r0, r0
 8007f58:	676b      	str	r3, [r5, #116]	; 0x74
 8007f5a:	6728      	str	r0, [r5, #112]	; 0x70
 8007f5c:	0030      	movs	r0, r6
 8007f5e:	f7fa fec3 	bl	8002ce8 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007f62:	3801      	subs	r0, #1
 8007f64:	67a8      	str	r0, [r5, #120]	; 0x78
 8007f66:	0030      	movs	r0, r6
 8007f68:	f7fe fcc6 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4298      	cmp	r0, r3
 8007f70:	d000      	beq.n	8007f74 <initialize.lto_priv.313+0x854>
 8007f72:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8007f74:	67eb      	str	r3, [r5, #124]	; 0x7c
 8007f76:	0030      	movs	r0, r6
 8007f78:	f7fa fe8b 	bl	8002c92 <acc_base_configuration_integrator_get>
 8007f7c:	1d2b      	adds	r3, r5, #4
 8007f7e:	67d8      	str	r0, [r3, #124]	; 0x7c
 8007f80:	0030      	movs	r0, r6
 8007f82:	f7fe fcb9 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007f86:	2300      	movs	r3, #0
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	d001      	beq.n	8007f90 <initialize.lto_priv.313+0x870>
 8007f8c:	1db3      	adds	r3, r6, #6
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f90:	002a      	movs	r2, r5
 8007f92:	3b01      	subs	r3, #1
 8007f94:	3208      	adds	r2, #8
 8007f96:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007f98:	0030      	movs	r0, r6
 8007f9a:	f7fa fe6f 	bl	8002c7c <acc_base_configuration_wg_duration_get>
 8007f9e:	002b      	movs	r3, r5
 8007fa0:	3388      	adds	r3, #136	; 0x88
 8007fa2:	6018      	str	r0, [r3, #0]
 8007fa4:	0030      	movs	r0, r6
 8007fa6:	f7fe fca7 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d002      	beq.n	8007fb4 <initialize.lto_priv.313+0x894>
 8007fae:	0033      	movs	r3, r6
 8007fb0:	336d      	adds	r3, #109	; 0x6d
 8007fb2:	7818      	ldrb	r0, [r3, #0]
 8007fb4:	002b      	movs	r3, r5
 8007fb6:	338d      	adds	r3, #141	; 0x8d
 8007fb8:	7018      	strb	r0, [r3, #0]
 8007fba:	0030      	movs	r0, r6
 8007fbc:	f7fa f874 	bl	80020a8 <acc_base_configuration_downsampling_factor_get>
 8007fc0:	002b      	movs	r3, r5
 8007fc2:	33a4      	adds	r3, #164	; 0xa4
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	0030      	movs	r0, r6
 8007fc8:	f7fe fc96 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4298      	cmp	r0, r3
 8007fd0:	d002      	beq.n	8007fd8 <initialize.lto_priv.313+0x8b8>
 8007fd2:	0033      	movs	r3, r6
 8007fd4:	336b      	adds	r3, #107	; 0x6b
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	002a      	movs	r2, r5
 8007fda:	329c      	adds	r2, #156	; 0x9c
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	0030      	movs	r0, r6
 8007fe0:	f7fe fc8a 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	d002      	beq.n	8007ff0 <initialize.lto_priv.313+0x8d0>
 8007fea:	0033      	movs	r3, r6
 8007fec:	336c      	adds	r3, #108	; 0x6c
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	002a      	movs	r2, r5
 8007ff2:	32a0      	adds	r2, #160	; 0xa0
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	0030      	movs	r0, r6
 8007ff8:	f7fa f844 	bl	8002084 <acc_base_configuration_asynchronous_measurement_get>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	002a      	movs	r2, r5
 8008000:	4058      	eors	r0, r3
 8008002:	32ac      	adds	r2, #172	; 0xac
 8008004:	7053      	strb	r3, [r2, #1]
 8008006:	7010      	strb	r0, [r2, #0]
 8008008:	464a      	mov	r2, r9
 800800a:	002b      	movs	r3, r5
 800800c:	8892      	ldrh	r2, [r2, #4]
 800800e:	3390      	adds	r3, #144	; 0x90
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	464b      	mov	r3, r9
 8008014:	899b      	ldrh	r3, [r3, #12]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d945      	bls.n	80080a6 <initialize.lto_priv.313+0x986>
 800801a:	464b      	mov	r3, r9
 800801c:	6958      	ldr	r0, [r3, #20]
 800801e:	f7fd ff11 	bl	8005e44 <get_package_range_coarse_max>
 8008022:	002b      	movs	r3, r5
 8008024:	464a      	mov	r2, r9
 8008026:	3394      	adds	r3, #148	; 0x94
 8008028:	3801      	subs	r0, #1
 800802a:	6018      	str	r0, [r3, #0]
 800802c:	2108      	movs	r1, #8
 800802e:	5e52      	ldrsh	r2, [r2, r1]
 8008030:	605a      	str	r2, [r3, #4]
 8008032:	464a      	mov	r2, r9
 8008034:	88d2      	ldrh	r2, [r2, #6]
 8008036:	615a      	str	r2, [r3, #20]
 8008038:	f7fe fa36 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 800803c:	002b      	movs	r3, r5
 800803e:	33b0      	adds	r3, #176	; 0xb0
 8008040:	6018      	str	r0, [r3, #0]
 8008042:	23e1      	movs	r3, #225	; 0xe1
 8008044:	465a      	mov	r2, fp
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	8293      	strh	r3, [r2, #20]
 800804a:	002b      	movs	r3, r5
 800804c:	33cc      	adds	r3, #204	; 0xcc
 800804e:	8819      	ldrh	r1, [r3, #0]
 8008050:	207c      	movs	r0, #124	; 0x7c
 8008052:	f006 ffcd 	bl	800eff0 <__udivsi3>
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	9a06      	ldr	r2, [sp, #24]
 800805a:	891b      	ldrh	r3, [r3, #8]
 800805c:	0021      	movs	r1, r4
 800805e:	4358      	muls	r0, r3
 8008060:	9b06      	ldr	r3, [sp, #24]
 8008062:	8158      	strh	r0, [r3, #10]
 8008064:	2300      	movs	r3, #0
 8008066:	0028      	movs	r0, r5
 8008068:	8313      	strh	r3, [r2, #24]
 800806a:	f005 fa7b 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 800806e:	4649      	mov	r1, r9
 8008070:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008072:	0022      	movs	r2, r4
 8008074:	8023      	strh	r3, [r4, #0]
 8008076:	2013      	movs	r0, #19
 8008078:	2301      	movs	r3, #1
 800807a:	6809      	ldr	r1, [r1, #0]
 800807c:	f005 ff54 	bl	800df28 <acc_probes_execute_uint16>
 8008080:	35ce      	adds	r5, #206	; 0xce
 8008082:	8823      	ldrh	r3, [r4, #0]
 8008084:	882a      	ldrh	r2, [r5, #0]
 8008086:	3303      	adds	r3, #3
 8008088:	189b      	adds	r3, r3, r2
 800808a:	9a06      	ldr	r2, [sp, #24]
 800808c:	2001      	movs	r0, #1
 800808e:	81d3      	strh	r3, [r2, #14]
 8008090:	2396      	movs	r3, #150	; 0x96
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	8193      	strh	r3, [r2, #12]
 8008096:	f7ff fb5e 	bl	8007756 <initialize.lto_priv.313+0x36>
 800809a:	666a      	str	r2, [r5, #100]	; 0x64
 800809c:	66ab      	str	r3, [r5, #104]	; 0x68
 800809e:	e72c      	b.n	8007efa <initialize.lto_priv.313+0x7da>
 80080a0:	666b      	str	r3, [r5, #100]	; 0x64
 80080a2:	66ab      	str	r3, [r5, #104]	; 0x68
 80080a4:	e729      	b.n	8007efa <initialize.lto_priv.313+0x7da>
 80080a6:	464b      	mov	r3, r9
 80080a8:	8958      	ldrh	r0, [r3, #10]
 80080aa:	e7ba      	b.n	8008022 <initialize.lto_priv.313+0x902>
 80080ac:	200002b0 	.word	0x200002b0
 80080b0:	0801d5de 	.word	0x0801d5de
 80080b4:	0801d5be 	.word	0x0801d5be

080080b8 <acc_base_configuration_print.part.5>:
 80080b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ba:	46de      	mov	lr, fp
 80080bc:	4645      	mov	r5, r8
 80080be:	4657      	mov	r7, sl
 80080c0:	464e      	mov	r6, r9
 80080c2:	b5e0      	push	{r5, r6, r7, lr}
 80080c4:	4b32      	ldr	r3, [pc, #200]	; (8008190 <acc_base_configuration_print.part.5+0xd8>)
 80080c6:	b08f      	sub	sp, #60	; 0x3c
 80080c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ca:	0004      	movs	r4, r0
 80080cc:	930a      	str	r3, [sp, #40]	; 0x28
 80080ce:	f7fa fe32 	bl	8002d36 <acc_base_configuration_sensor_get>
 80080d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80080d4:	0020      	movs	r0, r4
 80080d6:	f7fa fe07 	bl	8002ce8 <acc_base_configuration_hw_accelerated_average_samples_get>
 80080da:	900c      	str	r0, [sp, #48]	; 0x30
 80080dc:	0020      	movs	r0, r4
 80080de:	f7fe fc0b 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 80080e2:	2300      	movs	r3, #0
 80080e4:	4698      	mov	r8, r3
 80080e6:	4298      	cmp	r0, r3
 80080e8:	d001      	beq.n	80080ee <acc_base_configuration_print.part.5+0x36>
 80080ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80080ec:	4698      	mov	r8, r3
 80080ee:	0020      	movs	r0, r4
 80080f0:	f7fa fdcf 	bl	8002c92 <acc_base_configuration_integrator_get>
 80080f4:	900d      	str	r0, [sp, #52]	; 0x34
 80080f6:	0020      	movs	r0, r4
 80080f8:	f7fa fdc0 	bl	8002c7c <acc_base_configuration_wg_duration_get>
 80080fc:	4681      	mov	r9, r0
 80080fe:	0020      	movs	r0, r4
 8008100:	f7fe fbfa 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8008104:	2600      	movs	r6, #0
 8008106:	42b0      	cmp	r0, r6
 8008108:	d001      	beq.n	800810e <acc_base_configuration_print.part.5+0x56>
 800810a:	1da3      	adds	r3, r4, #6
 800810c:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 800810e:	0020      	movs	r0, r4
 8008110:	f7fa fe07 	bl	8002d22 <acc_base_configuration_power_save_mode_get>
 8008114:	4f1f      	ldr	r7, [pc, #124]	; (8008194 <acc_base_configuration_print.part.5+0xdc>)
 8008116:	2804      	cmp	r0, #4
 8008118:	d803      	bhi.n	8008122 <acc_base_configuration_print.part.5+0x6a>
 800811a:	4b1f      	ldr	r3, [pc, #124]	; (8008198 <acc_base_configuration_print.part.5+0xe0>)
 800811c:	0080      	lsls	r0, r0, #2
 800811e:	1818      	adds	r0, r3, r0
 8008120:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008122:	0020      	movs	r0, r4
 8008124:	f7fe fbe8 	bl	80068f8 <configuration_is_valid.lto_priv.681>
 8008128:	4d1c      	ldr	r5, [pc, #112]	; (800819c <acc_base_configuration_print.part.5+0xe4>)
 800812a:	2800      	cmp	r0, #0
 800812c:	d008      	beq.n	8008140 <acc_base_configuration_print.part.5+0x88>
 800812e:	0023      	movs	r3, r4
 8008130:	336a      	adds	r3, #106	; 0x6a
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <acc_base_configuration_print.part.5+0x88>
 8008138:	4d19      	ldr	r5, [pc, #100]	; (80081a0 <acc_base_configuration_print.part.5+0xe8>)
 800813a:	2b01      	cmp	r3, #1
 800813c:	d000      	beq.n	8008140 <acc_base_configuration_print.part.5+0x88>
 800813e:	4d15      	ldr	r5, [pc, #84]	; (8008194 <acc_base_configuration_print.part.5+0xdc>)
 8008140:	0020      	movs	r0, r4
 8008142:	f7fa fde5 	bl	8002d10 <acc_base_configuration_tx_disable_get>
 8008146:	4682      	mov	sl, r0
 8008148:	0020      	movs	r0, r4
 800814a:	f7fa fcd1 	bl	8002af0 <acc_base_configuration_sparse_sweeps_per_frame_get>
 800814e:	4683      	mov	fp, r0
 8008150:	0020      	movs	r0, r4
 8008152:	f7fa fdd4 	bl	8002cfe <acc_base_configuration_decrease_tx_emission_get>
 8008156:	465b      	mov	r3, fp
 8008158:	9308      	str	r3, [sp, #32]
 800815a:	4653      	mov	r3, sl
 800815c:	9307      	str	r3, [sp, #28]
 800815e:	464b      	mov	r3, r9
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008164:	9009      	str	r0, [sp, #36]	; 0x24
 8008166:	9302      	str	r3, [sp, #8]
 8008168:	4643      	mov	r3, r8
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800816e:	9506      	str	r5, [sp, #24]
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	9705      	str	r7, [sp, #20]
 8008174:	9604      	str	r6, [sp, #16]
 8008176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008178:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <acc_base_configuration_print.part.5+0xec>)
 800817a:	490b      	ldr	r1, [pc, #44]	; (80081a8 <acc_base_configuration_print.part.5+0xf0>)
 800817c:	2002      	movs	r0, #2
 800817e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008180:	47a0      	blx	r4
 8008182:	b00f      	add	sp, #60	; 0x3c
 8008184:	bc3c      	pop	{r2, r3, r4, r5}
 8008186:	4690      	mov	r8, r2
 8008188:	4699      	mov	r9, r3
 800818a:	46a2      	mov	sl, r4
 800818c:	46ab      	mov	fp, r5
 800818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008190:	200002b0 	.word	0x200002b0
 8008194:	0801e057 	.word	0x0801e057
 8008198:	08015c5c 	.word	0x08015c5c
 800819c:	0801d609 	.word	0x0801d609
 80081a0:	0801c0a4 	.word	0x0801c0a4
 80081a4:	0801d60b 	.word	0x0801d60b
 80081a8:	0801d1a2 	.word	0x0801d1a2

080081ac <start.lto_priv.302>:
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	46de      	mov	lr, fp
 80081b0:	4657      	mov	r7, sl
 80081b2:	464e      	mov	r6, r9
 80081b4:	4645      	mov	r5, r8
 80081b6:	b5e0      	push	{r5, r6, r7, lr}
 80081b8:	6947      	ldr	r7, [r0, #20]
 80081ba:	b093      	sub	sp, #76	; 0x4c
 80081bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081be:	4683      	mov	fp, r0
 80081c0:	9307      	str	r3, [sp, #28]
 80081c2:	003b      	movs	r3, r7
 80081c4:	3308      	adds	r3, #8
 80081c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081cc:	930a      	str	r3, [sp, #40]	; 0x28
 80081ce:	9b08      	ldr	r3, [sp, #32]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d004      	beq.n	80081de <start.lto_priv.302+0x32>
 80081d4:	9b07      	ldr	r3, [sp, #28]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <start.lto_priv.302+0x32>
 80081da:	2300      	movs	r3, #0
 80081dc:	643b      	str	r3, [r7, #64]	; 0x40
 80081de:	465b      	mov	r3, fp
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	ac0f      	add	r4, sp, #60	; 0x3c
 80081e4:	9306      	str	r3, [sp, #24]
 80081e6:	680b      	ldr	r3, [r1, #0]
 80081e8:	2500      	movs	r5, #0
 80081ea:	9309      	str	r3, [sp, #36]	; 0x24
 80081ec:	2315      	movs	r3, #21
 80081ee:	7023      	strb	r3, [r4, #0]
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	684e      	ldr	r6, [r1, #4]
 80081f4:	9310      	str	r3, [sp, #64]	; 0x40
 80081f6:	2307      	movs	r3, #7
 80081f8:	0020      	movs	r0, r4
 80081fa:	22b4      	movs	r2, #180	; 0xb4
 80081fc:	0039      	movs	r1, r7
 80081fe:	9311      	str	r3, [sp, #68]	; 0x44
 8008200:	f005 f9f0 	bl	800d5e4 <acc_probes_execute>
 8008204:	9400      	str	r4, [sp, #0]
 8008206:	ab0e      	add	r3, sp, #56	; 0x38
 8008208:	0032      	movs	r2, r6
 800820a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800820c:	9806      	ldr	r0, [sp, #24]
 800820e:	950e      	str	r5, [sp, #56]	; 0x38
 8008210:	950f      	str	r5, [sp, #60]	; 0x3c
 8008212:	f005 f929 	bl	800d468 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8008216:	9503      	str	r5, [sp, #12]
 8008218:	0004      	movs	r4, r0
 800821a:	42a8      	cmp	r0, r5
 800821c:	d112      	bne.n	8008244 <start.lto_priv.302+0x98>
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <start.lto_priv.302+0x8c>)
 8008220:	4a06      	ldr	r2, [pc, #24]	; (800823c <start.lto_priv.302+0x90>)
 8008222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008224:	4906      	ldr	r1, [pc, #24]	; (8008240 <start.lto_priv.302+0x94>)
 8008226:	4798      	blx	r3
 8008228:	0020      	movs	r0, r4
 800822a:	b013      	add	sp, #76	; 0x4c
 800822c:	bc3c      	pop	{r2, r3, r4, r5}
 800822e:	4690      	mov	r8, r2
 8008230:	4699      	mov	r9, r3
 8008232:	46a2      	mov	sl, r4
 8008234:	46ab      	mov	fp, r5
 8008236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008238:	200002b0 	.word	0x200002b0
 800823c:	0801d643 	.word	0x0801d643
 8008240:	0801d158 	.word	0x0801d158
 8008244:	9a03      	ldr	r2, [sp, #12]
 8008246:	4bfa      	ldr	r3, [pc, #1000]	; (8008630 <start.lto_priv.302+0x484>)
 8008248:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800824e:	9205      	str	r2, [sp, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	d900      	bls.n	8008256 <start.lto_priv.302+0xaa>
 8008254:	9305      	str	r3, [sp, #20]
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	0021      	movs	r1, r4
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	930b      	str	r3, [sp, #44]	; 0x2c
 800825e:	9b05      	ldr	r3, [sp, #20]
 8008260:	085a      	lsrs	r2, r3, #1
 8008262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008264:	0098      	lsls	r0, r3, #2
 8008266:	4bf3      	ldr	r3, [pc, #972]	; (8008634 <start.lto_priv.302+0x488>)
 8008268:	18c0      	adds	r0, r0, r3
 800826a:	f004 fbf3 	bl	800ca54 <acc_confprogram_copy>
 800826e:	466b      	mov	r3, sp
 8008270:	899d      	ldrh	r5, [r3, #12]
 8008272:	8a9e      	ldrh	r6, [r3, #20]
 8008274:	4bf0      	ldr	r3, [pc, #960]	; (8008638 <start.lto_priv.302+0x48c>)
 8008276:	0032      	movs	r2, r6
 8008278:	4698      	mov	r8, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	0029      	movs	r1, r5
 800827e:	9301      	str	r3, [sp, #4]
 8008280:	23d2      	movs	r3, #210	; 0xd2
 8008282:	0020      	movs	r0, r4
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	4643      	mov	r3, r8
 8008288:	f004 fc2c 	bl	800cae4 <acc_confprogram_patch_offset>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0032      	movs	r2, r6
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	23d0      	movs	r3, #208	; 0xd0
 8008294:	0029      	movs	r1, r5
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	0020      	movs	r0, r4
 800829a:	4643      	mov	r3, r8
 800829c:	f004 fc22 	bl	800cae4 <acc_confprogram_patch_offset>
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	0032      	movs	r2, r6
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	23d1      	movs	r3, #209	; 0xd1
 80082a8:	0029      	movs	r1, r5
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	0020      	movs	r0, r4
 80082ae:	4643      	mov	r3, r8
 80082b0:	f004 fc18 	bl	800cae4 <acc_confprogram_patch_offset>
 80082b4:	89bb      	ldrh	r3, [r7, #12]
 80082b6:	0032      	movs	r2, r6
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	23ce      	movs	r3, #206	; 0xce
 80082bc:	0029      	movs	r1, r5
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	0020      	movs	r0, r4
 80082c2:	4643      	mov	r3, r8
 80082c4:	f004 fc0e 	bl	800cae4 <acc_confprogram_patch_offset>
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	0032      	movs	r2, r6
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	2365      	movs	r3, #101	; 0x65
 80082d0:	0029      	movs	r1, r5
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	0020      	movs	r0, r4
 80082d6:	4643      	mov	r3, r8
 80082d8:	f004 fc04 	bl	800cae4 <acc_confprogram_patch_offset>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	0032      	movs	r2, r6
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	23f0      	movs	r3, #240	; 0xf0
 80082e4:	0029      	movs	r1, r5
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	0020      	movs	r0, r4
 80082ea:	4643      	mov	r3, r8
 80082ec:	f004 fbfa 	bl	800cae4 <acc_confprogram_patch_offset>
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	0032      	movs	r2, r6
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	23e8      	movs	r3, #232	; 0xe8
 80082f8:	0029      	movs	r1, r5
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	0020      	movs	r0, r4
 80082fe:	4643      	mov	r3, r8
 8008300:	f004 fbf0 	bl	800cae4 <acc_confprogram_patch_offset>
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	0032      	movs	r2, r6
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	23fc      	movs	r3, #252	; 0xfc
 800830c:	0029      	movs	r1, r5
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	0020      	movs	r0, r4
 8008312:	4643      	mov	r3, r8
 8008314:	f004 fbe6 	bl	800cae4 <acc_confprogram_patch_offset>
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	0032      	movs	r2, r6
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	23e0      	movs	r3, #224	; 0xe0
 8008320:	0029      	movs	r1, r5
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	0020      	movs	r0, r4
 8008326:	4643      	mov	r3, r8
 8008328:	f004 fbdc 	bl	800cae4 <acc_confprogram_patch_offset>
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	0032      	movs	r2, r6
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	23e1      	movs	r3, #225	; 0xe1
 8008334:	0029      	movs	r1, r5
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	0020      	movs	r0, r4
 800833a:	4643      	mov	r3, r8
 800833c:	f004 fbd2 	bl	800cae4 <acc_confprogram_patch_offset>
 8008340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008342:	0032      	movs	r2, r6
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	2380      	movs	r3, #128	; 0x80
 8008348:	0029      	movs	r1, r5
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	0020      	movs	r0, r4
 800834e:	4643      	mov	r3, r8
 8008350:	f004 fbc8 	bl	800cae4 <acc_confprogram_patch_offset>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	0032      	movs	r2, r6
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	2381      	movs	r3, #129	; 0x81
 800835c:	0029      	movs	r1, r5
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	0020      	movs	r0, r4
 8008362:	4643      	mov	r3, r8
 8008364:	f004 fbbe 	bl	800cae4 <acc_confprogram_patch_offset>
 8008368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836a:	0032      	movs	r2, r6
 800836c:	9301      	str	r3, [sp, #4]
 800836e:	237f      	movs	r3, #127	; 0x7f
 8008370:	0029      	movs	r1, r5
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	0020      	movs	r0, r4
 8008376:	4643      	mov	r3, r8
 8008378:	f004 fbb4 	bl	800cae4 <acc_confprogram_patch_offset>
 800837c:	2300      	movs	r3, #0
 800837e:	0032      	movs	r2, r6
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	0029      	movs	r1, r5
 8008386:	0020      	movs	r0, r4
 8008388:	469a      	mov	sl, r3
 800838a:	4643      	mov	r3, r8
 800838c:	f004 fbaa 	bl	800cae4 <acc_confprogram_patch_offset>
 8008390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008392:	0032      	movs	r2, r6
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	23ef      	movs	r3, #239	; 0xef
 8008398:	0029      	movs	r1, r5
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	0020      	movs	r0, r4
 800839e:	4643      	mov	r3, r8
 80083a0:	f004 fba0 	bl	800cae4 <acc_confprogram_patch_offset>
 80083a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a6:	0032      	movs	r2, r6
 80083a8:	9301      	str	r3, [sp, #4]
 80083aa:	23d6      	movs	r3, #214	; 0xd6
 80083ac:	0029      	movs	r1, r5
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	0020      	movs	r0, r4
 80083b2:	4643      	mov	r3, r8
 80083b4:	f004 fb96 	bl	800cae4 <acc_confprogram_patch_offset>
 80083b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ba:	0032      	movs	r2, r6
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	2378      	movs	r3, #120	; 0x78
 80083c0:	0029      	movs	r1, r5
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	0020      	movs	r0, r4
 80083c6:	4643      	mov	r3, r8
 80083c8:	f004 fb8c 	bl	800cae4 <acc_confprogram_patch_offset>
 80083cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ce:	4553      	cmp	r3, sl
 80083d0:	d06e      	beq.n	80084b0 <start.lto_priv.302+0x304>
 80083d2:	2301      	movs	r3, #1
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	330e      	adds	r3, #14
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	0032      	movs	r2, r6
 80083dc:	4643      	mov	r3, r8
 80083de:	0029      	movs	r1, r5
 80083e0:	0020      	movs	r0, r4
 80083e2:	f004 fb7f 	bl	800cae4 <acc_confprogram_patch_offset>
 80083e6:	4b95      	ldr	r3, [pc, #596]	; (800863c <start.lto_priv.302+0x490>)
 80083e8:	0032      	movs	r2, r6
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	2311      	movs	r3, #17
 80083ee:	0029      	movs	r1, r5
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	0020      	movs	r0, r4
 80083f4:	4643      	mov	r3, r8
 80083f6:	f004 fb75 	bl	800cae4 <acc_confprogram_patch_offset>
 80083fa:	2207      	movs	r2, #7
 80083fc:	2313      	movs	r3, #19
 80083fe:	4691      	mov	r9, r2
 8008400:	9201      	str	r2, [sp, #4]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	0032      	movs	r2, r6
 8008406:	4643      	mov	r3, r8
 8008408:	0029      	movs	r1, r5
 800840a:	0020      	movs	r0, r4
 800840c:	f004 fb6a 	bl	800cae4 <acc_confprogram_patch_offset>
 8008410:	4b8a      	ldr	r3, [pc, #552]	; (800863c <start.lto_priv.302+0x490>)
 8008412:	0032      	movs	r2, r6
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	2310      	movs	r3, #16
 8008418:	0029      	movs	r1, r5
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	0020      	movs	r0, r4
 800841e:	4643      	mov	r3, r8
 8008420:	f004 fb60 	bl	800cae4 <acc_confprogram_patch_offset>
 8008424:	4653      	mov	r3, sl
 8008426:	9301      	str	r3, [sp, #4]
 8008428:	3312      	adds	r3, #18
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	0032      	movs	r2, r6
 800842e:	4643      	mov	r3, r8
 8008430:	0029      	movs	r1, r5
 8008432:	0020      	movs	r0, r4
 8008434:	f004 fb56 	bl	800cae4 <acc_confprogram_patch_offset>
 8008438:	4b81      	ldr	r3, [pc, #516]	; (8008640 <start.lto_priv.302+0x494>)
 800843a:	0032      	movs	r2, r6
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2314      	movs	r3, #20
 8008440:	0029      	movs	r1, r5
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	0020      	movs	r0, r4
 8008446:	4643      	mov	r3, r8
 8008448:	f004 fb4c 	bl	800cae4 <acc_confprogram_patch_offset>
 800844c:	464b      	mov	r3, r9
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	330e      	adds	r3, #14
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	0032      	movs	r2, r6
 8008456:	4643      	mov	r3, r8
 8008458:	0029      	movs	r1, r5
 800845a:	0020      	movs	r0, r4
 800845c:	f004 fb42 	bl	800cae4 <acc_confprogram_patch_offset>
 8008460:	4b78      	ldr	r3, [pc, #480]	; (8008644 <start.lto_priv.302+0x498>)
 8008462:	0032      	movs	r2, r6
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	230d      	movs	r3, #13
 8008468:	0029      	movs	r1, r5
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	0020      	movs	r0, r4
 800846e:	4643      	mov	r3, r8
 8008470:	f004 fb38 	bl	800cae4 <acc_confprogram_patch_offset>
 8008474:	464b      	mov	r3, r9
 8008476:	9301      	str	r3, [sp, #4]
 8008478:	18db      	adds	r3, r3, r3
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	0032      	movs	r2, r6
 800847e:	4643      	mov	r3, r8
 8008480:	0029      	movs	r1, r5
 8008482:	0020      	movs	r0, r4
 8008484:	f004 fb2e 	bl	800cae4 <acc_confprogram_patch_offset>
 8008488:	4b6f      	ldr	r3, [pc, #444]	; (8008648 <start.lto_priv.302+0x49c>)
 800848a:	0032      	movs	r2, r6
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2316      	movs	r3, #22
 8008490:	0029      	movs	r1, r5
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	0020      	movs	r0, r4
 8008496:	4643      	mov	r3, r8
 8008498:	f004 fb24 	bl	800cae4 <acc_confprogram_patch_offset>
 800849c:	464b      	mov	r3, r9
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	3310      	adds	r3, #16
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	0032      	movs	r2, r6
 80084a6:	4643      	mov	r3, r8
 80084a8:	0029      	movs	r1, r5
 80084aa:	0020      	movs	r0, r4
 80084ac:	f004 fb1a 	bl	800cae4 <acc_confprogram_patch_offset>
 80084b0:	4b61      	ldr	r3, [pc, #388]	; (8008638 <start.lto_priv.302+0x48c>)
 80084b2:	0032      	movs	r2, r6
 80084b4:	4699      	mov	r9, r3
 80084b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b8:	0029      	movs	r1, r5
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	2386      	movs	r3, #134	; 0x86
 80084be:	0020      	movs	r0, r4
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	464b      	mov	r3, r9
 80084c4:	f004 fb0e 	bl	800cae4 <acc_confprogram_patch_offset>
 80084c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ca:	0032      	movs	r2, r6
 80084cc:	9301      	str	r3, [sp, #4]
 80084ce:	23d3      	movs	r3, #211	; 0xd3
 80084d0:	0029      	movs	r1, r5
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	0020      	movs	r0, r4
 80084d6:	464b      	mov	r3, r9
 80084d8:	f004 fb04 	bl	800cae4 <acc_confprogram_patch_offset>
 80084dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084de:	0032      	movs	r2, r6
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	23f3      	movs	r3, #243	; 0xf3
 80084e4:	0029      	movs	r1, r5
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	0020      	movs	r0, r4
 80084ea:	464b      	mov	r3, r9
 80084ec:	f004 fafa 	bl	800cae4 <acc_confprogram_patch_offset>
 80084f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084f2:	0032      	movs	r2, r6
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	2382      	movs	r3, #130	; 0x82
 80084f8:	0029      	movs	r1, r5
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	0020      	movs	r0, r4
 80084fe:	464b      	mov	r3, r9
 8008500:	f004 faf0 	bl	800cae4 <acc_confprogram_patch_offset>
 8008504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008506:	b29a      	uxth	r2, r3
 8008508:	4690      	mov	r8, r2
 800850a:	2200      	movs	r2, #0
 800850c:	9204      	str	r2, [sp, #16]
 800850e:	4642      	mov	r2, r8
 8008510:	2a08      	cmp	r2, #8
 8008512:	d914      	bls.n	800853e <start.lto_priv.302+0x392>
 8008514:	4643      	mov	r3, r8
 8008516:	22ff      	movs	r2, #255	; 0xff
 8008518:	3b08      	subs	r3, #8
 800851a:	409a      	lsls	r2, r3
 800851c:	0013      	movs	r3, r2
 800851e:	22ff      	movs	r2, #255	; 0xff
 8008520:	4393      	bics	r3, r2
 8008522:	b29b      	uxth	r3, r3
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	2302      	movs	r3, #2
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	33e0      	adds	r3, #224	; 0xe0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	0032      	movs	r2, r6
 8008530:	464b      	mov	r3, r9
 8008532:	0029      	movs	r1, r5
 8008534:	0020      	movs	r0, r4
 8008536:	f004 fad5 	bl	800cae4 <acc_confprogram_patch_offset>
 800853a:	2308      	movs	r3, #8
 800853c:	4698      	mov	r8, r3
 800853e:	4b3e      	ldr	r3, [pc, #248]	; (8008638 <start.lto_priv.302+0x48c>)
 8008540:	0032      	movs	r2, r6
 8008542:	469a      	mov	sl, r3
 8008544:	4643      	mov	r3, r8
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	23e9      	movs	r3, #233	; 0xe9
 800854a:	0029      	movs	r1, r5
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	0020      	movs	r0, r4
 8008550:	4653      	mov	r3, sl
 8008552:	f004 fac7 	bl	800cae4 <acc_confprogram_patch_offset>
 8008556:	4643      	mov	r3, r8
 8008558:	9301      	str	r3, [sp, #4]
 800855a:	23d9      	movs	r3, #217	; 0xd9
 800855c:	0032      	movs	r2, r6
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	0029      	movs	r1, r5
 8008562:	4653      	mov	r3, sl
 8008564:	0020      	movs	r0, r4
 8008566:	f004 fabd 	bl	800cae4 <acc_confprogram_patch_offset>
 800856a:	2380      	movs	r3, #128	; 0x80
 800856c:	9a04      	ldr	r2, [sp, #16]
 800856e:	0029      	movs	r1, r5
 8008570:	4313      	orrs	r3, r2
 8008572:	930c      	str	r3, [sp, #48]	; 0x30
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	23eb      	movs	r3, #235	; 0xeb
 8008578:	0032      	movs	r2, r6
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	0020      	movs	r0, r4
 800857e:	4653      	mov	r3, sl
 8008580:	f004 fab0 	bl	800cae4 <acc_confprogram_patch_offset>
 8008584:	23c0      	movs	r3, #192	; 0xc0
 8008586:	9a04      	ldr	r2, [sp, #16]
 8008588:	0029      	movs	r1, r5
 800858a:	431a      	orrs	r2, r3
 800858c:	23ed      	movs	r3, #237	; 0xed
 800858e:	4690      	mov	r8, r2
 8008590:	9201      	str	r2, [sp, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	0032      	movs	r2, r6
 8008596:	4653      	mov	r3, sl
 8008598:	0020      	movs	r0, r4
 800859a:	f004 faa3 	bl	800cae4 <acc_confprogram_patch_offset>
 800859e:	23ff      	movs	r3, #255	; 0xff
 80085a0:	9a04      	ldr	r2, [sp, #16]
 80085a2:	0029      	movs	r1, r5
 80085a4:	4313      	orrs	r3, r2
 80085a6:	4699      	mov	r9, r3
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	23ec      	movs	r3, #236	; 0xec
 80085ac:	0032      	movs	r2, r6
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	0020      	movs	r0, r4
 80085b2:	4653      	mov	r3, sl
 80085b4:	f004 fa96 	bl	800cae4 <acc_confprogram_patch_offset>
 80085b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ba:	0032      	movs	r2, r6
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	23db      	movs	r3, #219	; 0xdb
 80085c0:	0029      	movs	r1, r5
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	0020      	movs	r0, r4
 80085c6:	4653      	mov	r3, sl
 80085c8:	f004 fa8c 	bl	800cae4 <acc_confprogram_patch_offset>
 80085cc:	4643      	mov	r3, r8
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	23dd      	movs	r3, #221	; 0xdd
 80085d2:	0032      	movs	r2, r6
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	0029      	movs	r1, r5
 80085d8:	4653      	mov	r3, sl
 80085da:	0020      	movs	r0, r4
 80085dc:	f004 fa82 	bl	800cae4 <acc_confprogram_patch_offset>
 80085e0:	464b      	mov	r3, r9
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	23dc      	movs	r3, #220	; 0xdc
 80085e6:	0032      	movs	r2, r6
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	0029      	movs	r1, r5
 80085ec:	4653      	mov	r3, sl
 80085ee:	0020      	movs	r0, r4
 80085f0:	f004 fa78 	bl	800cae4 <acc_confprogram_patch_offset>
 80085f4:	22f0      	movs	r2, #240	; 0xf0
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	0029      	movs	r1, r5
 80085fa:	4313      	orrs	r3, r2
 80085fc:	4698      	mov	r8, r3
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	23cd      	movs	r3, #205	; 0xcd
 8008602:	0032      	movs	r2, r6
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	0020      	movs	r0, r4
 8008608:	4653      	mov	r3, sl
 800860a:	f004 fa6b 	bl	800cae4 <acc_confprogram_patch_offset>
 800860e:	4643      	mov	r3, r8
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	2385      	movs	r3, #133	; 0x85
 8008614:	0032      	movs	r2, r6
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	0029      	movs	r1, r5
 800861a:	4653      	mov	r3, sl
 800861c:	0020      	movs	r0, r4
 800861e:	f004 fa61 	bl	800cae4 <acc_confprogram_patch_offset>
 8008622:	464b      	mov	r3, r9
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	2321      	movs	r3, #33	; 0x21
 8008628:	0032      	movs	r2, r6
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	e00e      	b.n	800864c <start.lto_priv.302+0x4a0>
 800862e:	46c0      	nop			; (mov r8, r8)
 8008630:	0000076a 	.word	0x0000076a
 8008634:	08018304 	.word	0x08018304
 8008638:	08016dc4 	.word	0x08016dc4
 800863c:	0000ff80 	.word	0x0000ff80
 8008640:	0000ffc0 	.word	0x0000ffc0
 8008644:	0000fff0 	.word	0x0000fff0
 8008648:	0000ffff 	.word	0x0000ffff
 800864c:	0029      	movs	r1, r5
 800864e:	4653      	mov	r3, sl
 8008650:	0020      	movs	r0, r4
 8008652:	f004 fa47 	bl	800cae4 <acc_confprogram_patch_offset>
 8008656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008658:	0032      	movs	r2, r6
 800865a:	3b01      	subs	r3, #1
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	2374      	movs	r3, #116	; 0x74
 8008660:	0029      	movs	r1, r5
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	0020      	movs	r0, r4
 8008666:	4653      	mov	r3, sl
 8008668:	f004 fa3c 	bl	800cae4 <acc_confprogram_patch_offset>
 800866c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800866e:	0032      	movs	r2, r6
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	2305      	movs	r3, #5
 8008674:	0029      	movs	r1, r5
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	0020      	movs	r0, r4
 800867a:	4653      	mov	r3, sl
 800867c:	f004 fa32 	bl	800cae4 <acc_confprogram_patch_offset>
 8008680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008682:	0032      	movs	r2, r6
 8008684:	015b      	lsls	r3, r3, #5
 8008686:	3b03      	subs	r3, #3
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	2363      	movs	r3, #99	; 0x63
 800868c:	0029      	movs	r1, r5
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	0020      	movs	r0, r4
 8008692:	4653      	mov	r3, sl
 8008694:	f004 fa26 	bl	800cae4 <acc_confprogram_patch_offset>
 8008698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800869a:	0032      	movs	r2, r6
 800869c:	015b      	lsls	r3, r3, #5
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	3b03      	subs	r3, #3
 80086a2:	9301      	str	r3, [sp, #4]
 80086a4:	2364      	movs	r3, #100	; 0x64
 80086a6:	0029      	movs	r1, r5
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	0020      	movs	r0, r4
 80086ac:	4653      	mov	r3, sl
 80086ae:	f004 fa19 	bl	800cae4 <acc_confprogram_patch_offset>
 80086b2:	2390      	movs	r3, #144	; 0x90
 80086b4:	4698      	mov	r8, r3
 80086b6:	44b8      	add	r8, r7
 80086b8:	4643      	mov	r3, r8
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	0032      	movs	r2, r6
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	23de      	movs	r3, #222	; 0xde
 80086c2:	0029      	movs	r1, r5
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	0020      	movs	r0, r4
 80086c8:	4653      	mov	r3, sl
 80086ca:	f004 fa0b 	bl	800cae4 <acc_confprogram_patch_offset>
 80086ce:	003b      	movs	r3, r7
 80086d0:	338c      	adds	r3, #140	; 0x8c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	0032      	movs	r2, r6
 80086d6:	9301      	str	r3, [sp, #4]
 80086d8:	23ee      	movs	r3, #238	; 0xee
 80086da:	0029      	movs	r1, r5
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	0020      	movs	r0, r4
 80086e0:	4653      	mov	r3, sl
 80086e2:	f004 f9ff 	bl	800cae4 <acc_confprogram_patch_offset>
 80086e6:	4643      	mov	r3, r8
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	0032      	movs	r2, r6
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	237e      	movs	r3, #126	; 0x7e
 80086f0:	0029      	movs	r1, r5
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	0020      	movs	r0, r4
 80086f6:	4653      	mov	r3, sl
 80086f8:	f004 f9f4 	bl	800cae4 <acc_confprogram_patch_offset>
 80086fc:	003b      	movs	r3, r7
 80086fe:	3394      	adds	r3, #148	; 0x94
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	0032      	movs	r2, r6
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	23e4      	movs	r3, #228	; 0xe4
 8008708:	0029      	movs	r1, r5
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	0020      	movs	r0, r4
 800870e:	4653      	mov	r3, sl
 8008710:	f004 f9e8 	bl	800cae4 <acc_confprogram_patch_offset>
 8008714:	003b      	movs	r3, r7
 8008716:	3398      	adds	r3, #152	; 0x98
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	0032      	movs	r2, r6
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	237c      	movs	r3, #124	; 0x7c
 8008720:	0029      	movs	r1, r5
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	0020      	movs	r0, r4
 8008726:	4653      	mov	r3, sl
 8008728:	f004 f9dc 	bl	800cae4 <acc_confprogram_patch_offset>
 800872c:	003b      	movs	r3, r7
 800872e:	339c      	adds	r3, #156	; 0x9c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	0032      	movs	r2, r6
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	23c9      	movs	r3, #201	; 0xc9
 8008738:	0029      	movs	r1, r5
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	0020      	movs	r0, r4
 800873e:	4653      	mov	r3, sl
 8008740:	f004 f9d0 	bl	800cae4 <acc_confprogram_patch_offset>
 8008744:	003b      	movs	r3, r7
 8008746:	33a0      	adds	r3, #160	; 0xa0
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	0032      	movs	r2, r6
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	2384      	movs	r3, #132	; 0x84
 8008750:	0029      	movs	r1, r5
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	0020      	movs	r0, r4
 8008756:	4653      	mov	r3, sl
 8008758:	f004 f9c4 	bl	800cae4 <acc_confprogram_patch_offset>
 800875c:	003b      	movs	r3, r7
 800875e:	33a4      	adds	r3, #164	; 0xa4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	0032      	movs	r2, r6
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	237b      	movs	r3, #123	; 0x7b
 8008768:	0029      	movs	r1, r5
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	0020      	movs	r0, r4
 800876e:	4653      	mov	r3, sl
 8008770:	f004 f9b8 	bl	800cae4 <acc_confprogram_patch_offset>
 8008774:	003b      	movs	r3, r7
 8008776:	33a8      	adds	r3, #168	; 0xa8
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	0032      	movs	r2, r6
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	23c7      	movs	r3, #199	; 0xc7
 8008780:	0029      	movs	r1, r5
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	0020      	movs	r0, r4
 8008786:	4653      	mov	r3, sl
 8008788:	f004 f9ac 	bl	800cae4 <acc_confprogram_patch_offset>
 800878c:	003b      	movs	r3, r7
 800878e:	33ac      	adds	r3, #172	; 0xac
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	0032      	movs	r2, r6
 8008794:	9301      	str	r3, [sp, #4]
 8008796:	2383      	movs	r3, #131	; 0x83
 8008798:	0029      	movs	r1, r5
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	0020      	movs	r0, r4
 800879e:	4653      	mov	r3, sl
 80087a0:	f004 f9a0 	bl	800cae4 <acc_confprogram_patch_offset>
 80087a4:	003b      	movs	r3, r7
 80087a6:	33b0      	adds	r3, #176	; 0xb0
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	0032      	movs	r2, r6
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	23c8      	movs	r3, #200	; 0xc8
 80087b0:	0029      	movs	r1, r5
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	0020      	movs	r0, r4
 80087b6:	4653      	mov	r3, sl
 80087b8:	f004 f994 	bl	800cae4 <acc_confprogram_patch_offset>
 80087bc:	003b      	movs	r3, r7
 80087be:	3370      	adds	r3, #112	; 0x70
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	4698      	mov	r8, r3
 80087c4:	4642      	mov	r2, r8
 80087c6:	23d7      	movs	r3, #215	; 0xd7
 80087c8:	2a00      	cmp	r2, #0
 80087ca:	d000      	beq.n	80087ce <start.lto_priv.302+0x622>
 80087cc:	e07e      	b.n	80088cc <start.lto_priv.302+0x720>
 80087ce:	3201      	adds	r2, #1
 80087d0:	9201      	str	r2, [sp, #4]
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	0032      	movs	r2, r6
 80087d6:	4653      	mov	r3, sl
 80087d8:	0029      	movs	r1, r5
 80087da:	0020      	movs	r0, r4
 80087dc:	f004 f982 	bl	800cae4 <acc_confprogram_patch_offset>
 80087e0:	4643      	mov	r3, r8
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	23d8      	movs	r3, #216	; 0xd8
 80087e6:	0032      	movs	r2, r6
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	0029      	movs	r1, r5
 80087ec:	4653      	mov	r3, sl
 80087ee:	0020      	movs	r0, r4
 80087f0:	f004 f978 	bl	800cae4 <acc_confprogram_patch_offset>
 80087f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087f6:	0032      	movs	r2, r6
 80087f8:	3b01      	subs	r3, #1
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	23e3      	movs	r3, #227	; 0xe3
 80087fe:	0029      	movs	r1, r5
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	0020      	movs	r0, r4
 8008804:	4653      	mov	r3, sl
 8008806:	f004 f96d 	bl	800cae4 <acc_confprogram_patch_offset>
 800880a:	4b66      	ldr	r3, [pc, #408]	; (80089a4 <start.lto_priv.302+0x7f8>)
 800880c:	0032      	movs	r2, r6
 800880e:	4698      	mov	r8, r3
 8008810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008812:	0029      	movs	r1, r5
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	23d4      	movs	r3, #212	; 0xd4
 8008818:	0020      	movs	r0, r4
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4643      	mov	r3, r8
 800881e:	f004 f961 	bl	800cae4 <acc_confprogram_patch_offset>
 8008822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008824:	0032      	movs	r2, r6
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	2375      	movs	r3, #117	; 0x75
 800882a:	0029      	movs	r1, r5
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	0020      	movs	r0, r4
 8008830:	4643      	mov	r3, r8
 8008832:	f004 f957 	bl	800cae4 <acc_confprogram_patch_offset>
 8008836:	1d3b      	adds	r3, r7, #4
 8008838:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800883a:	495b      	ldr	r1, [pc, #364]	; (80089a8 <start.lto_priv.302+0x7fc>)
 800883c:	f006 f8a6 	bl	800e98c <__aeabi_fmul>
 8008840:	f006 fde4 	bl	800f40c <__aeabi_f2uiz>
 8008844:	23e5      	movs	r3, #229	; 0xe5
 8008846:	3801      	subs	r0, #1
 8008848:	b280      	uxth	r0, r0
 800884a:	9001      	str	r0, [sp, #4]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	0032      	movs	r2, r6
 8008850:	4643      	mov	r3, r8
 8008852:	0029      	movs	r1, r5
 8008854:	0020      	movs	r0, r4
 8008856:	f004 f945 	bl	800cae4 <acc_confprogram_patch_offset>
 800885a:	2308      	movs	r3, #8
 800885c:	4699      	mov	r9, r3
 800885e:	44b9      	add	r9, r7
 8008860:	464b      	mov	r3, r9
 8008862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008864:	0032      	movs	r2, r6
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	23d5      	movs	r3, #213	; 0xd5
 800886a:	0029      	movs	r1, r5
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	0020      	movs	r0, r4
 8008870:	4643      	mov	r3, r8
 8008872:	f004 f937 	bl	800cae4 <acc_confprogram_patch_offset>
 8008876:	464b      	mov	r3, r9
 8008878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <start.lto_priv.302+0x6ea>
 800887e:	003b      	movs	r3, r7
 8008880:	3388      	adds	r3, #136	; 0x88
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	0032      	movs	r2, r6
 8008886:	9301      	str	r3, [sp, #4]
 8008888:	2371      	movs	r3, #113	; 0x71
 800888a:	0029      	movs	r1, r5
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	0020      	movs	r0, r4
 8008890:	4643      	mov	r3, r8
 8008892:	f004 f927 	bl	800cae4 <acc_confprogram_patch_offset>
 8008896:	466b      	mov	r3, sp
 8008898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800889a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800889c:	9806      	ldr	r0, [sp, #24]
 800889e:	9b05      	ldr	r3, [sp, #20]
 80088a0:	f7fd fd9a 	bl	80063d8 <acc_sensor_r2_load_confmem>
 80088a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	4694      	mov	ip, r2
 80088aa:	4463      	add	r3, ip
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	9a03      	ldr	r2, [sp, #12]
 80088b0:	4b3e      	ldr	r3, [pc, #248]	; (80089ac <start.lto_priv.302+0x800>)
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d800      	bhi.n	80088b8 <start.lto_priv.302+0x70c>
 80088b6:	e4c5      	b.n	8008244 <start.lto_priv.302+0x98>
 80088b8:	465b      	mov	r3, fp
 80088ba:	21f4      	movs	r1, #244	; 0xf4
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	0049      	lsls	r1, r1, #1
 80088c0:	f7fd fb95 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 80088c4:	1e04      	subs	r4, r0, #0
 80088c6:	d146      	bne.n	8008956 <start.lto_priv.302+0x7aa>
 80088c8:	2400      	movs	r4, #0
 80088ca:	e4ad      	b.n	8008228 <start.lto_priv.302+0x7c>
 80088cc:	2200      	movs	r2, #0
 80088ce:	4690      	mov	r8, r2
 80088d0:	9201      	str	r2, [sp, #4]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	0032      	movs	r2, r6
 80088d6:	4653      	mov	r3, sl
 80088d8:	0029      	movs	r1, r5
 80088da:	0020      	movs	r0, r4
 80088dc:	f004 f902 	bl	800cae4 <acc_confprogram_patch_offset>
 80088e0:	2301      	movs	r3, #1
 80088e2:	46c1      	mov	r9, r8
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	33d7      	adds	r3, #215	; 0xd7
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	0032      	movs	r2, r6
 80088ec:	4653      	mov	r3, sl
 80088ee:	0029      	movs	r1, r5
 80088f0:	0020      	movs	r0, r4
 80088f2:	f004 f8f7 	bl	800cae4 <acc_confprogram_patch_offset>
 80088f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f8:	3301      	adds	r3, #1
 80088fa:	930d      	str	r3, [sp, #52]	; 0x34
 80088fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fe:	0029      	movs	r1, r5
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	464b      	mov	r3, r9
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	930c      	str	r3, [sp, #48]	; 0x30
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800890c:	4599      	cmp	r9, r3
 800890e:	419b      	sbcs	r3, r3
 8008910:	425b      	negs	r3, r3
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <start.lto_priv.302+0x804>)
 8008916:	0020      	movs	r0, r4
 8008918:	5a9b      	ldrh	r3, [r3, r2]
 800891a:	0032      	movs	r2, r6
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4653      	mov	r3, sl
 8008920:	f004 f8e0 	bl	800cae4 <acc_confprogram_patch_offset>
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	4599      	cmp	r9, r3
 8008928:	d20b      	bcs.n	8008942 <start.lto_priv.302+0x796>
 800892a:	4643      	mov	r3, r8
 800892c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	4b20      	ldr	r3, [pc, #128]	; (80089b4 <start.lto_priv.302+0x808>)
 8008932:	0029      	movs	r1, r5
 8008934:	5a9b      	ldrh	r3, [r3, r2]
 8008936:	0020      	movs	r0, r4
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	0032      	movs	r2, r6
 800893c:	4653      	mov	r3, sl
 800893e:	f004 f8d1 	bl	800cae4 <acc_confprogram_patch_offset>
 8008942:	2301      	movs	r3, #1
 8008944:	469c      	mov	ip, r3
 8008946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008948:	44e1      	add	r9, ip
 800894a:	469c      	mov	ip, r3
 800894c:	464b      	mov	r3, r9
 800894e:	44e0      	add	r8, ip
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d1d3      	bne.n	80088fc <start.lto_priv.302+0x750>
 8008954:	e759      	b.n	800880a <start.lto_priv.302+0x65e>
 8008956:	9b07      	ldr	r3, [sp, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d100      	bne.n	800895e <start.lto_priv.302+0x7b2>
 800895c:	e464      	b.n	8008228 <start.lto_priv.302+0x7c>
 800895e:	465b      	mov	r3, fp
 8008960:	6919      	ldr	r1, [r3, #16]
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	f7fc fe7c 	bl	8005660 <acc_sensor_protocol_r2_wait_for_sync_start>
 8008968:	1e05      	subs	r5, r0, #0
 800896a:	d0ad      	beq.n	80088c8 <start.lto_priv.302+0x71c>
 800896c:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <start.lto_priv.302+0x80c>)
 800896e:	001a      	movs	r2, r3
 8008970:	3230      	adds	r2, #48	; 0x30
 8008972:	7812      	ldrb	r2, [r2, #0]
 8008974:	2a01      	cmp	r2, #1
 8008976:	d904      	bls.n	8008982 <start.lto_priv.302+0x7d6>
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	4a10      	ldr	r2, [pc, #64]	; (80089bc <start.lto_priv.302+0x810>)
 800897c:	4910      	ldr	r1, [pc, #64]	; (80089c0 <start.lto_priv.302+0x814>)
 800897e:	2002      	movs	r0, #2
 8008980:	4798      	blx	r3
 8008982:	9b08      	ldr	r3, [sp, #32]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d100      	bne.n	800898a <start.lto_priv.302+0x7de>
 8008988:	e44e      	b.n	8008228 <start.lto_priv.302+0x7c>
 800898a:	4658      	mov	r0, fp
 800898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898e:	4642      	mov	r2, r8
 8008990:	643b      	str	r3, [r7, #64]	; 0x40
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	490b      	ldr	r1, [pc, #44]	; (80089c4 <start.lto_priv.302+0x818>)
 8008996:	23ef      	movs	r3, #239	; 0xef
 8008998:	6800      	ldr	r0, [r0, #0]
 800899a:	f002 fbc5 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800899e:	002c      	movs	r4, r5
 80089a0:	e442      	b.n	8008228 <start.lto_priv.302+0x7c>
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	08016dc4 	.word	0x08016dc4
 80089a8:	3751b717 	.word	0x3751b717
 80089ac:	00000769 	.word	0x00000769
 80089b0:	08016d44 	.word	0x08016d44
 80089b4:	08016cc4 	.word	0x08016cc4
 80089b8:	200002b0 	.word	0x200002b0
 80089bc:	0801cfca 	.word	0x0801cfca
 80089c0:	0801d158 	.word	0x0801d158
 80089c4:	08018304 	.word	0x08018304

080089c8 <calibrate.lto_priv.305>:
 80089c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ca:	4657      	mov	r7, sl
 80089cc:	4645      	mov	r5, r8
 80089ce:	46de      	mov	lr, fp
 80089d0:	464e      	mov	r6, r9
 80089d2:	b5e0      	push	{r5, r6, r7, lr}
 80089d4:	4cb4      	ldr	r4, [pc, #720]	; (8008ca8 <calibrate.lto_priv.305+0x2e0>)
 80089d6:	000f      	movs	r7, r1
 80089d8:	44a5      	add	sp, r4
 80089da:	9337      	str	r3, [sp, #220]	; 0xdc
 80089dc:	4bb3      	ldr	r3, [pc, #716]	; (8008cac <calibrate.lto_priv.305+0x2e4>)
 80089de:	920f      	str	r2, [sp, #60]	; 0x3c
 80089e0:	4698      	mov	r8, r3
 80089e2:	3330      	adds	r3, #48	; 0x30
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	0004      	movs	r4, r0
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d905      	bls.n	80089f8 <calibrate.lto_priv.305+0x30>
 80089ec:	4643      	mov	r3, r8
 80089ee:	4ab0      	ldr	r2, [pc, #704]	; (8008cb0 <calibrate.lto_priv.305+0x2e8>)
 80089f0:	49b0      	ldr	r1, [pc, #704]	; (8008cb4 <calibrate.lto_priv.305+0x2ec>)
 80089f2:	2004      	movs	r0, #4
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	4798      	blx	r3
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	6965      	ldr	r5, [r4, #20]
 80089fc:	9309      	str	r3, [sp, #36]	; 0x24
 80089fe:	002b      	movs	r3, r5
 8008a00:	2600      	movs	r6, #0
 8008a02:	33bc      	adds	r3, #188	; 0xbc
 8008a04:	ac48      	add	r4, sp, #288	; 0x120
 8008a06:	601e      	str	r6, [r3, #0]
 8008a08:	0020      	movs	r0, r4
 8008a0a:	f7fd fd65 	bl	80064d8 <calculate_pll_divisors.lto_priv.303>
 8008a0e:	42b0      	cmp	r0, r6
 8008a10:	d10a      	bne.n	8008a28 <calibrate.lto_priv.305+0x60>
 8008a12:	2400      	movs	r4, #0
 8008a14:	0020      	movs	r0, r4
 8008a16:	239b      	movs	r3, #155	; 0x9b
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	449d      	add	sp, r3
 8008a1c:	bc3c      	pop	{r2, r3, r4, r5}
 8008a1e:	4690      	mov	r8, r2
 8008a20:	4699      	mov	r9, r3
 8008a22:	46a2      	mov	sl, r4
 8008a24:	46ab      	mov	fp, r5
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a2a:	aa4e      	add	r2, sp, #312	; 0x138
 8008a2c:	934e      	str	r3, [sp, #312]	; 0x138
 8008a2e:	8863      	ldrh	r3, [r4, #2]
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	6053      	str	r3, [r2, #4]
 8008a34:	88a3      	ldrh	r3, [r4, #4]
 8008a36:	6838      	ldr	r0, [r7, #0]
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	88e3      	ldrh	r3, [r4, #6]
 8008a3c:	60d3      	str	r3, [r2, #12]
 8008a3e:	8923      	ldrh	r3, [r4, #8]
 8008a40:	8213      	strh	r3, [r2, #16]
 8008a42:	ab46      	add	r3, sp, #280	; 0x118
 8008a44:	4699      	mov	r9, r3
 8008a46:	f005 fa7e 	bl	800df46 <acc_cpd_cbank_and_vana_calibration>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0e1      	beq.n	8008a12 <calibrate.lto_priv.305+0x4a>
 8008a4e:	002b      	movs	r3, r5
 8008a50:	33ce      	adds	r3, #206	; 0xce
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	35d0      	adds	r5, #208	; 0xd0
 8008a56:	930c      	str	r3, [sp, #48]	; 0x30
 8008a58:	1e5a      	subs	r2, r3, #1
 8008a5a:	4193      	sbcs	r3, r2
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	9338      	str	r3, [sp, #224]	; 0xe0
 8008a60:	782b      	ldrb	r3, [r5, #0]
 8008a62:	4a95      	ldr	r2, [pc, #596]	; (8008cb8 <calibrate.lto_priv.305+0x2f0>)
 8008a64:	932a      	str	r3, [sp, #168]	; 0xa8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d80e      	bhi.n	8008a8a <calibrate.lto_priv.305+0xc2>
 8008a6c:	4643      	mov	r3, r8
 8008a6e:	4a93      	ldr	r2, [pc, #588]	; (8008cbc <calibrate.lto_priv.305+0x2f4>)
 8008a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a72:	4993      	ldr	r1, [pc, #588]	; (8008cc0 <calibrate.lto_priv.305+0x2f8>)
 8008a74:	0030      	movs	r0, r6
 8008a76:	4798      	blx	r3
 8008a78:	4b92      	ldr	r3, [pc, #584]	; (8008cc4 <calibrate.lto_priv.305+0x2fc>)
 8008a7a:	9617      	str	r6, [sp, #92]	; 0x5c
 8008a7c:	9316      	str	r3, [sp, #88]	; 0x58
 8008a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0c6      	beq.n	8008a12 <calibrate.lto_priv.305+0x4a>
 8008a84:	2400      	movs	r4, #0
 8008a86:	f001 f986 	bl	8009d96 <calibrate.lto_priv.305+0x13ce>
 8008a8a:	8862      	ldrh	r2, [r4, #2]
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	9224      	str	r2, [sp, #144]	; 0x90
 8008a90:	88a2      	ldrh	r2, [r4, #4]
 8008a92:	9225      	str	r2, [sp, #148]	; 0x94
 8008a94:	88e2      	ldrh	r2, [r4, #6]
 8008a96:	9226      	str	r2, [sp, #152]	; 0x98
 8008a98:	8922      	ldrh	r2, [r4, #8]
 8008a9a:	9227      	str	r2, [sp, #156]	; 0x9c
 8008a9c:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8008a9e:	9228      	str	r2, [sp, #160]	; 0xa0
 8008aa0:	464a      	mov	r2, r9
 8008aa2:	7912      	ldrb	r2, [r2, #4]
 8008aa4:	9229      	str	r2, [sp, #164]	; 0xa4
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	9210      	str	r2, [sp, #64]	; 0x40
 8008aaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008aac:	4a86      	ldr	r2, [pc, #536]	; (8008cc8 <calibrate.lto_priv.305+0x300>)
 8008aae:	4684      	mov	ip, r0
 8008ab0:	189a      	adds	r2, r3, r2
 8008ab2:	438a      	bics	r2, r1
 8008ab4:	4462      	add	r2, ip
 8008ab6:	922b      	str	r2, [sp, #172]	; 0xac
 8008ab8:	4a84      	ldr	r2, [pc, #528]	; (8008ccc <calibrate.lto_priv.305+0x304>)
 8008aba:	4683      	mov	fp, r0
 8008abc:	4694      	mov	ip, r2
 8008abe:	4463      	add	r3, ip
 8008ac0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ac2:	438b      	bics	r3, r1
 8008ac4:	449b      	add	fp, r3
 8008ac6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ac8:	4b81      	ldr	r3, [pc, #516]	; (8008cd0 <calibrate.lto_priv.305+0x308>)
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d80a      	bhi.n	8008ae4 <calibrate.lto_priv.305+0x11c>
 8008ace:	4b77      	ldr	r3, [pc, #476]	; (8008cac <calibrate.lto_priv.305+0x2e4>)
 8008ad0:	001a      	movs	r2, r3
 8008ad2:	3230      	adds	r2, #48	; 0x30
 8008ad4:	7812      	ldrb	r2, [r2, #0]
 8008ad6:	428a      	cmp	r2, r1
 8008ad8:	d904      	bls.n	8008ae4 <calibrate.lto_priv.305+0x11c>
 8008ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008adc:	4a7d      	ldr	r2, [pc, #500]	; (8008cd4 <calibrate.lto_priv.305+0x30c>)
 8008ade:	4978      	ldr	r1, [pc, #480]	; (8008cc0 <calibrate.lto_priv.305+0x2f8>)
 8008ae0:	2002      	movs	r0, #2
 8008ae2:	4798      	blx	r3
 8008ae4:	487c      	ldr	r0, [pc, #496]	; (8008cd8 <calibrate.lto_priv.305+0x310>)
 8008ae6:	f004 f8ac 	bl	800cc42 <acc_diagnostic_log_set_scope>
 8008aea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008aec:	487b      	ldr	r0, [pc, #492]	; (8008cdc <calibrate.lto_priv.305+0x314>)
 8008aee:	f004 f8a4 	bl	800cc3a <acc_diagnostic_log_scalar>
 8008af2:	2202      	movs	r2, #2
 8008af4:	2101      	movs	r1, #1
 8008af6:	487a      	ldr	r0, [pc, #488]	; (8008ce0 <calibrate.lto_priv.305+0x318>)
 8008af8:	f004 f8a2 	bl	800cc40 <acc_diagnostic_log_declare_parameter>
 8008afc:	221f      	movs	r2, #31
 8008afe:	2100      	movs	r1, #0
 8008b00:	4878      	ldr	r0, [pc, #480]	; (8008ce4 <calibrate.lto_priv.305+0x31c>)
 8008b02:	f004 f89d 	bl	800cc40 <acc_diagnostic_log_declare_parameter>
 8008b06:	227b      	movs	r2, #123	; 0x7b
 8008b08:	2100      	movs	r1, #0
 8008b0a:	4877      	ldr	r0, [pc, #476]	; (8008ce8 <calibrate.lto_priv.305+0x320>)
 8008b0c:	f004 f898 	bl	800cc40 <acc_diagnostic_log_declare_parameter>
 8008b10:	220b      	movs	r2, #11
 8008b12:	2100      	movs	r1, #0
 8008b14:	4875      	ldr	r0, [pc, #468]	; (8008cec <calibrate.lto_priv.305+0x324>)
 8008b16:	f004 f893 	bl	800cc40 <acc_diagnostic_log_declare_parameter>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	9336      	str	r3, [sp, #216]	; 0xd8
 8008b1e:	4b69      	ldr	r3, [pc, #420]	; (8008cc4 <calibrate.lto_priv.305+0x2fc>)
 8008b20:	9316      	str	r3, [sp, #88]	; 0x58
 8008b22:	2300      	movs	r3, #0
 8008b24:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b26:	3302      	adds	r3, #2
 8008b28:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b2c:	486c      	ldr	r0, [pc, #432]	; (8008ce0 <calibrate.lto_priv.305+0x318>)
 8008b2e:	f004 f886 	bl	800cc3e <acc_diagnostic_log_set_parameter>
 8008b32:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008b34:	930a      	str	r3, [sp, #40]	; 0x28
 8008b36:	2300      	movs	r3, #0
 8008b38:	4699      	mov	r9, r3
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b42:	4b6b      	ldr	r3, [pc, #428]	; (8008cf0 <calibrate.lto_priv.305+0x328>)
 8008b44:	4694      	mov	ip, r2
 8008b46:	4463      	add	r3, ip
 8008b48:	9312      	str	r3, [sp, #72]	; 0x48
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	4867      	ldr	r0, [pc, #412]	; (8008cec <calibrate.lto_priv.305+0x324>)
 8008b50:	f004 f875 	bl	800cc3e <acc_diagnostic_log_set_parameter>
 8008b54:	ab8d      	add	r3, sp, #564	; 0x234
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b5a:	ab80      	add	r3, sp, #512	; 0x200
 8008b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b60:	9480      	str	r4, [sp, #512]	; 0x200
 8008b62:	948d      	str	r4, [sp, #564]	; 0x234
 8008b64:	f004 fc80 	bl	800d468 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8008b68:	42a0      	cmp	r0, r4
 8008b6a:	d105      	bne.n	8008b78 <calibrate.lto_priv.305+0x1b0>
 8008b6c:	4b4f      	ldr	r3, [pc, #316]	; (8008cac <calibrate.lto_priv.305+0x2e4>)
 8008b6e:	4a61      	ldr	r2, [pc, #388]	; (8008cf4 <calibrate.lto_priv.305+0x32c>)
 8008b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b72:	4961      	ldr	r1, [pc, #388]	; (8008cf8 <calibrate.lto_priv.305+0x330>)
 8008b74:	4798      	blx	r3
 8008b76:	e782      	b.n	8008a7e <calibrate.lto_priv.305+0xb6>
 8008b78:	4b60      	ldr	r3, [pc, #384]	; (8008cfc <calibrate.lto_priv.305+0x334>)
 8008b7a:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 8008b7c:	9d80      	ldr	r5, [sp, #512]	; 0x200
 8008b7e:	1b1b      	subs	r3, r3, r4
 8008b80:	4692      	mov	sl, r2
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d900      	bls.n	8008b88 <calibrate.lto_priv.305+0x1c0>
 8008b86:	469a      	mov	sl, r3
 8008b88:	0863      	lsrs	r3, r4, #1
 8008b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b8c:	4653      	mov	r3, sl
 8008b8e:	085a      	lsrs	r2, r3, #1
 8008b90:	0863      	lsrs	r3, r4, #1
 8008b92:	0098      	lsls	r0, r3, #2
 8008b94:	4b5a      	ldr	r3, [pc, #360]	; (8008d00 <calibrate.lto_priv.305+0x338>)
 8008b96:	0029      	movs	r1, r5
 8008b98:	18c0      	adds	r0, r0, r3
 8008b9a:	f003 ff5b 	bl	800ca54 <acc_confprogram_copy>
 8008b9e:	4653      	mov	r3, sl
 8008ba0:	b29f      	uxth	r7, r3
 8008ba2:	4b58      	ldr	r3, [pc, #352]	; (8008d04 <calibrate.lto_priv.305+0x33c>)
 8008ba4:	b2a6      	uxth	r6, r4
 8008ba6:	4698      	mov	r8, r3
 8008ba8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008baa:	003a      	movs	r2, r7
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	231b      	movs	r3, #27
 8008bb0:	0031      	movs	r1, r6
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	0028      	movs	r0, r5
 8008bb6:	4643      	mov	r3, r8
 8008bb8:	f003 ff94 	bl	800cae4 <acc_confprogram_patch_offset>
 8008bbc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008bbe:	003a      	movs	r2, r7
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	2319      	movs	r3, #25
 8008bc4:	0031      	movs	r1, r6
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	0028      	movs	r0, r5
 8008bca:	4643      	mov	r3, r8
 8008bcc:	f003 ff8a 	bl	800cae4 <acc_confprogram_patch_offset>
 8008bd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bd2:	003a      	movs	r2, r7
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	231a      	movs	r3, #26
 8008bd8:	0031      	movs	r1, r6
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	0028      	movs	r0, r5
 8008bde:	4643      	mov	r3, r8
 8008be0:	f003 ff80 	bl	800cae4 <acc_confprogram_patch_offset>
 8008be4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008be6:	003a      	movs	r2, r7
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	2317      	movs	r3, #23
 8008bec:	0031      	movs	r1, r6
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	0028      	movs	r0, r5
 8008bf2:	4643      	mov	r3, r8
 8008bf4:	f003 ff76 	bl	800cae4 <acc_confprogram_patch_offset>
 8008bf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008bfa:	003a      	movs	r2, r7
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	230d      	movs	r3, #13
 8008c00:	0031      	movs	r1, r6
 8008c02:	9300      	str	r3, [sp, #0]
 8008c04:	0028      	movs	r0, r5
 8008c06:	4643      	mov	r3, r8
 8008c08:	f003 ff6c 	bl	800cae4 <acc_confprogram_patch_offset>
 8008c0c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008c0e:	003a      	movs	r2, r7
 8008c10:	9301      	str	r3, [sp, #4]
 8008c12:	232a      	movs	r3, #42	; 0x2a
 8008c14:	0031      	movs	r1, r6
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	0028      	movs	r0, r5
 8008c1a:	4643      	mov	r3, r8
 8008c1c:	f003 ff62 	bl	800cae4 <acc_confprogram_patch_offset>
 8008c20:	464b      	mov	r3, r9
 8008c22:	9301      	str	r3, [sp, #4]
 8008c24:	230f      	movs	r3, #15
 8008c26:	003a      	movs	r2, r7
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	0031      	movs	r1, r6
 8008c2c:	4643      	mov	r3, r8
 8008c2e:	0028      	movs	r0, r5
 8008c30:	f003 ff58 	bl	800cae4 <acc_confprogram_patch_offset>
 8008c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c36:	003a      	movs	r2, r7
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	232c      	movs	r3, #44	; 0x2c
 8008c3c:	0031      	movs	r1, r6
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	0028      	movs	r0, r5
 8008c42:	4643      	mov	r3, r8
 8008c44:	f003 ff4e 	bl	800cae4 <acc_confprogram_patch_offset>
 8008c48:	2244      	movs	r2, #68	; 0x44
 8008c4a:	466b      	mov	r3, sp
 8008c4c:	189b      	adds	r3, r3, r2
 8008c4e:	8819      	ldrh	r1, [r3, #0]
 8008c50:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008c52:	4653      	mov	r3, sl
 8008c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c56:	f7fd fbbf 	bl	80063d8 <acc_sensor_r2_load_confmem>
 8008c5a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8008c5c:	469c      	mov	ip, r3
 8008c5e:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <calibrate.lto_priv.305+0x340>)
 8008c60:	4464      	add	r4, ip
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d988      	bls.n	8008b78 <calibrate.lto_priv.305+0x1b0>
 8008c66:	2118      	movs	r1, #24
 8008c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6a:	f7fd f9c0 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d105      	bne.n	8008c7e <calibrate.lto_priv.305+0x2b6>
 8008c72:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <calibrate.lto_priv.305+0x2e4>)
 8008c74:	4a25      	ldr	r2, [pc, #148]	; (8008d0c <calibrate.lto_priv.305+0x344>)
 8008c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c78:	491f      	ldr	r1, [pc, #124]	; (8008cf8 <calibrate.lto_priv.305+0x330>)
 8008c7a:	4798      	blx	r3
 8008c7c:	e6ff      	b.n	8008a7e <calibrate.lto_priv.305+0xb6>
 8008c7e:	21fa      	movs	r1, #250	; 0xfa
 8008c80:	2300      	movs	r3, #0
 8008c82:	2208      	movs	r2, #8
 8008c84:	00c9      	lsls	r1, r1, #3
 8008c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c88:	f7fd f974 	bl	8005f74 <acc_sensor_protocol_r2_wait_for_specific_event>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d100      	bne.n	8008c92 <calibrate.lto_priv.305+0x2ca>
 8008c90:	e6f5      	b.n	8008a7e <calibrate.lto_priv.305+0xb6>
 8008c92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c94:	2b37      	cmp	r3, #55	; 0x37
 8008c96:	d83d      	bhi.n	8008d14 <calibrate.lto_priv.305+0x34c>
 8008c98:	4b04      	ldr	r3, [pc, #16]	; (8008cac <calibrate.lto_priv.305+0x2e4>)
 8008c9a:	4a1d      	ldr	r2, [pc, #116]	; (8008d10 <calibrate.lto_priv.305+0x348>)
 8008c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9e:	4916      	ldr	r1, [pc, #88]	; (8008cf8 <calibrate.lto_priv.305+0x330>)
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	4798      	blx	r3
 8008ca4:	e6eb      	b.n	8008a7e <calibrate.lto_priv.305+0xb6>
 8008ca6:	46c0      	nop			; (mov r8, r8)
 8008ca8:	fffffd94 	.word	0xfffffd94
 8008cac:	200002b0 	.word	0x200002b0
 8008cb0:	0801d66b 	.word	0x0801d66b
 8008cb4:	0801cf9c 	.word	0x0801cf9c
 8008cb8:	00000313 	.word	0x00000313
 8008cbc:	0801d080 	.word	0x0801d080
 8008cc0:	0801d688 	.word	0x0801d688
 8008cc4:	ff800000 	.word	0xff800000
 8008cc8:	fffffda8 	.word	0xfffffda8
 8008ccc:	fffffcec 	.word	0xfffffcec
 8008cd0:	000001ff 	.word	0x000001ff
 8008cd4:	0801d698 	.word	0x0801d698
 8008cd8:	0801d6c3 	.word	0x0801d6c3
 8008cdc:	0801d6d2 	.word	0x0801d6d2
 8008ce0:	0801d6dc 	.word	0x0801d6dc
 8008ce4:	0801db6f 	.word	0x0801db6f
 8008ce8:	0801d9ae 	.word	0x0801d9ae
 8008cec:	0801d776 	.word	0x0801d776
 8008cf0:	08015c5c 	.word	0x08015c5c
 8008cf4:	0801d6e5 	.word	0x0801d6e5
 8008cf8:	0801d70a 	.word	0x0801d70a
 8008cfc:	000006ac 	.word	0x000006ac
 8008d00:	080175ac 	.word	0x080175ac
 8008d04:	08016afc 	.word	0x08016afc
 8008d08:	000006ab 	.word	0x000006ab
 8008d0c:	0801d722 	.word	0x0801d722
 8008d10:	0801d754 	.word	0x0801d754
 8008d14:	2219      	movs	r2, #25
 8008d16:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1a:	f002 f9a3 	bl	800b064 <internal_buffer_processed_read.constprop.30>
 8008d1e:	0004      	movs	r4, r0
 8008d20:	2319      	movs	r3, #25
 8008d22:	0002      	movs	r2, r0
 8008d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d26:	200a      	movs	r0, #10
 8008d28:	f005 f8fe 	bl	800df28 <acc_probes_execute_uint16>
 8008d2c:	2232      	movs	r2, #50	; 0x32
 8008d2e:	0021      	movs	r1, r4
 8008d30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d32:	f00c fec3 	bl	8015abc <memcpy>
 8008d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d38:	f7fc fd08 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 8008d3c:	9018      	str	r0, [sp, #96]	; 0x60
 8008d3e:	902d      	str	r0, [sp, #180]	; 0xb4
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d100      	bne.n	8008d46 <calibrate.lto_priv.305+0x37e>
 8008d44:	e69b      	b.n	8008a7e <calibrate.lto_priv.305+0xb6>
 8008d46:	4cbf      	ldr	r4, [pc, #764]	; (8009044 <calibrate.lto_priv.305+0x67c>)
 8008d48:	48bf      	ldr	r0, [pc, #764]	; (8009048 <calibrate.lto_priv.305+0x680>)
 8008d4a:	0021      	movs	r1, r4
 8008d4c:	f003 ff76 	bl	800cc3c <acc_diagnostic_log_array>
 8008d50:	2119      	movs	r1, #25
 8008d52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d54:	f003 ff70 	bl	800cc38 <acc_diagnostic_log_data_u16>
 8008d58:	464b      	mov	r3, r9
 8008d5a:	005e      	lsls	r6, r3, #1
 8008d5c:	4bbb      	ldr	r3, [pc, #748]	; (800904c <calibrate.lto_priv.305+0x684>)
 8008d5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d60:	3370      	adds	r3, #112	; 0x70
 8008d62:	5ad0      	ldrh	r0, [r2, r3]
 8008d64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d66:	ad53      	add	r5, sp, #332	; 0x14c
 8008d68:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008d6a:	1ac0      	subs	r0, r0, r3
 8008d6c:	b200      	sxth	r0, r0
 8008d6e:	f006 fd41 	bl	800f7f4 <__aeabi_i2f>
 8008d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d74:	1c07      	adds	r7, r0, #0
 8008d76:	8818      	ldrh	r0, [r3, #0]
 8008d78:	f006 fd86 	bl	800f888 <__aeabi_ui2f>
 8008d7c:	21de      	movs	r1, #222	; 0xde
 8008d7e:	0589      	lsls	r1, r1, #22
 8008d80:	f005 fe04 	bl	800e98c <__aeabi_fmul>
 8008d84:	21fc      	movs	r1, #252	; 0xfc
 8008d86:	0589      	lsls	r1, r1, #22
 8008d88:	f005 ff32 	bl	800ebf0 <__aeabi_fsub>
 8008d8c:	49b0      	ldr	r1, [pc, #704]	; (8009050 <calibrate.lto_priv.305+0x688>)
 8008d8e:	f005 fdfd 	bl	800e98c <__aeabi_fmul>
 8008d92:	49b0      	ldr	r1, [pc, #704]	; (8009054 <calibrate.lto_priv.305+0x68c>)
 8008d94:	f005 fdfa 	bl	800e98c <__aeabi_fmul>
 8008d98:	1c01      	adds	r1, r0, #0
 8008d9a:	1c38      	adds	r0, r7, #0
 8008d9c:	f005 ff28 	bl	800ebf0 <__aeabi_fsub>
 8008da0:	f006 fd08 	bl	800f7b4 <__aeabi_f2iz>
 8008da4:	2301      	movs	r3, #1
 8008da6:	469c      	mov	ip, r3
 8008da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008daa:	44e1      	add	r9, ip
 8008dac:	3332      	adds	r3, #50	; 0x32
 8008dae:	930a      	str	r3, [sp, #40]	; 0x28
 8008db0:	464b      	mov	r3, r9
 8008db2:	5370      	strh	r0, [r6, r5]
 8008db4:	2b0c      	cmp	r3, #12
 8008db6:	d000      	beq.n	8008dba <calibrate.lto_priv.305+0x3f2>
 8008db8:	e6c7      	b.n	8008b4a <calibrate.lto_priv.305+0x182>
 8008dba:	0021      	movs	r1, r4
 8008dbc:	48a6      	ldr	r0, [pc, #664]	; (8009058 <calibrate.lto_priv.305+0x690>)
 8008dbe:	f003 ff3d 	bl	800cc3c <acc_diagnostic_log_array>
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	0028      	movs	r0, r5
 8008dc6:	f003 ff37 	bl	800cc38 <acc_diagnostic_log_data_u16>
 8008dca:	2214      	movs	r2, #20
 8008dcc:	5eab      	ldrsh	r3, [r5, r2]
 8008dce:	2700      	movs	r7, #0
 8008dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8008dd2:	2216      	movs	r2, #22
 8008dd4:	5eab      	ldrsh	r3, [r5, r2]
 8008dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dd8:	9311      	str	r3, [sp, #68]	; 0x44
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	9314      	str	r3, [sp, #80]	; 0x50
 8008dde:	2200      	movs	r2, #0
 8008de0:	5eab      	ldrsh	r3, [r5, r2]
 8008de2:	2632      	movs	r6, #50	; 0x32
 8008de4:	4699      	mov	r9, r3
 8008de6:	2202      	movs	r2, #2
 8008de8:	5eab      	ldrsh	r3, [r5, r2]
 8008dea:	464a      	mov	r2, r9
 8008dec:	930d      	str	r3, [sp, #52]	; 0x34
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	9312      	str	r3, [sp, #72]	; 0x48
 8008df2:	4b9a      	ldr	r3, [pc, #616]	; (800905c <calibrate.lto_priv.305+0x694>)
 8008df4:	469a      	mov	sl, r3
 8008df6:	b2fb      	uxtb	r3, r7
 8008df8:	9315      	str	r3, [sp, #84]	; 0x54
 8008dfa:	007b      	lsls	r3, r7, #1
 8008dfc:	5f5a      	ldrsh	r2, [r3, r5]
 8008dfe:	4690      	mov	r8, r2
 8008e00:	2f00      	cmp	r7, #0
 8008e02:	d000      	beq.n	8008e06 <calibrate.lto_priv.305+0x43e>
 8008e04:	e0d8      	b.n	8008fb8 <calibrate.lto_priv.305+0x5f0>
 8008e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e08:	0034      	movs	r4, r6
 8008e0a:	4599      	cmp	r9, r3
 8008e0c:	dd0b      	ble.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008e0e:	45d1      	cmp	r9, sl
 8008e10:	dc09      	bgt.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008e12:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e14:	f006 fcee 	bl	800f7f4 <__aeabi_i2f>
 8008e18:	4991      	ldr	r1, [pc, #580]	; (8009060 <calibrate.lto_priv.305+0x698>)
 8008e1a:	f006 faaf 	bl	800f37c <__aeabi_fcmplt>
 8008e1e:	2400      	movs	r4, #0
 8008e20:	42a0      	cmp	r0, r4
 8008e22:	d100      	bne.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008e24:	0034      	movs	r4, r6
 8008e26:	488f      	ldr	r0, [pc, #572]	; (8009064 <calibrate.lto_priv.305+0x69c>)
 8008e28:	4440      	add	r0, r8
 8008e2a:	17c3      	asrs	r3, r0, #31
 8008e2c:	18c0      	adds	r0, r0, r3
 8008e2e:	4058      	eors	r0, r3
 8008e30:	f006 fce0 	bl	800f7f4 <__aeabi_i2f>
 8008e34:	4987      	ldr	r1, [pc, #540]	; (8009054 <calibrate.lto_priv.305+0x68c>)
 8008e36:	f005 fc97 	bl	800e768 <__aeabi_fdiv>
 8008e3a:	498b      	ldr	r1, [pc, #556]	; (8009068 <calibrate.lto_priv.305+0x6a0>)
 8008e3c:	f005 fda6 	bl	800e98c <__aeabi_fmul>
 8008e40:	4680      	mov	r8, r0
 8008e42:	0020      	movs	r0, r4
 8008e44:	f006 fcd6 	bl	800f7f4 <__aeabi_i2f>
 8008e48:	1c01      	adds	r1, r0, #0
 8008e4a:	4640      	mov	r0, r8
 8008e4c:	f005 faf2 	bl	800e434 <__aeabi_fadd>
 8008e50:	f006 fadc 	bl	800f40c <__aeabi_f2uiz>
 8008e54:	22a2      	movs	r2, #162	; 0xa2
 8008e56:	ab3c      	add	r3, sp, #240	; 0xf0
 8008e58:	0052      	lsls	r2, r2, #1
 8008e5a:	189b      	adds	r3, r3, r2
 8008e5c:	55d8      	strb	r0, [r3, r7]
 8008e5e:	a94b      	add	r1, sp, #300	; 0x12c
 8008e60:	b2fb      	uxtb	r3, r7
 8008e62:	547b      	strb	r3, [r7, r1]
 8008e64:	3701      	adds	r7, #1
 8008e66:	2f0c      	cmp	r7, #12
 8008e68:	d1c5      	bne.n	8008df6 <calibrate.lto_priv.305+0x42e>
 8008e6a:	3a3a      	subs	r2, #58	; 0x3a
 8008e6c:	3aff      	subs	r2, #255	; 0xff
 8008e6e:	ac8d      	add	r4, sp, #564	; 0x234
 8008e70:	2300      	movs	r3, #0
 8008e72:	0018      	movs	r0, r3
 8008e74:	5c5e      	ldrb	r6, [r3, r1]
 8008e76:	18cd      	adds	r5, r1, r3
 8008e78:	786f      	ldrb	r7, [r5, #1]
 8008e7a:	46a9      	mov	r9, r5
 8008e7c:	5da5      	ldrb	r5, [r4, r6]
 8008e7e:	46a8      	mov	r8, r5
 8008e80:	5de5      	ldrb	r5, [r4, r7]
 8008e82:	45a8      	cmp	r8, r5
 8008e84:	d904      	bls.n	8008e90 <calibrate.lto_priv.305+0x4c8>
 8008e86:	464d      	mov	r5, r9
 8008e88:	3001      	adds	r0, #1
 8008e8a:	545f      	strb	r7, [r3, r1]
 8008e8c:	b2c0      	uxtb	r0, r0
 8008e8e:	706e      	strb	r6, [r5, #1]
 8008e90:	3301      	adds	r3, #1
 8008e92:	b2dd      	uxtb	r5, r3
 8008e94:	4295      	cmp	r5, r2
 8008e96:	d3ed      	bcc.n	8008e74 <calibrate.lto_priv.305+0x4ac>
 8008e98:	3a01      	subs	r2, #1
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	2a00      	cmp	r2, #0
 8008e9e:	d001      	beq.n	8008ea4 <calibrate.lto_priv.305+0x4dc>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d1e5      	bne.n	8008e70 <calibrate.lto_priv.305+0x4a8>
 8008ea4:	4967      	ldr	r1, [pc, #412]	; (8009044 <calibrate.lto_priv.305+0x67c>)
 8008ea6:	4871      	ldr	r0, [pc, #452]	; (800906c <calibrate.lto_priv.305+0x6a4>)
 8008ea8:	f003 fec8 	bl	800cc3c <acc_diagnostic_log_array>
 8008eac:	2300      	movs	r3, #0
 8008eae:	931a      	str	r3, [sp, #104]	; 0x68
 8008eb0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008eb2:	ab4b      	add	r3, sp, #300	; 0x12c
 8008eb4:	5cd3      	ldrb	r3, [r2, r3]
 8008eb6:	2601      	movs	r6, #1
 8008eb8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eba:	932c      	str	r3, [sp, #176]	; 0xb0
 8008ebc:	2332      	movs	r3, #50	; 0x32
 8008ebe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ec0:	2700      	movs	r7, #0
 8008ec2:	4353      	muls	r3, r2
 8008ec4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008ec6:	4694      	mov	ip, r2
 8008ec8:	4463      	add	r3, ip
 8008eca:	930a      	str	r3, [sp, #40]	; 0x28
 8008ecc:	4698      	mov	r8, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4699      	mov	r9, r3
 8008ed2:	001d      	movs	r5, r3
 8008ed4:	001c      	movs	r4, r3
 8008ed6:	b2b3      	uxth	r3, r6
 8008ed8:	930d      	str	r3, [sp, #52]	; 0x34
 8008eda:	4643      	mov	r3, r8
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	3401      	adds	r4, #1
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	f006 fc86 	bl	800f7f4 <__aeabi_i2f>
 8008ee8:	1c01      	adds	r1, r0, #0
 8008eea:	1c38      	adds	r0, r7, #0
 8008eec:	f005 faa2 	bl	800e434 <__aeabi_fadd>
 8008ef0:	b2b3      	uxth	r3, r6
 8008ef2:	469c      	mov	ip, r3
 8008ef4:	4643      	mov	r3, r8
 8008ef6:	885b      	ldrh	r3, [r3, #2]
 8008ef8:	4465      	add	r5, ip
 8008efa:	1c07      	adds	r7, r0, #0
 8008efc:	b2a4      	uxth	r4, r4
 8008efe:	b2ad      	uxth	r5, r5
 8008f00:	4652      	mov	r2, sl
 8008f02:	459a      	cmp	sl, r3
 8008f04:	d300      	bcc.n	8008f08 <calibrate.lto_priv.305+0x540>
 8008f06:	e082      	b.n	800900e <calibrate.lto_priv.305+0x646>
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	22fa      	movs	r2, #250	; 0xfa
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d801      	bhi.n	8008f18 <calibrate.lto_priv.305+0x550>
 8008f14:	2e18      	cmp	r6, #24
 8008f16:	d136      	bne.n	8008f86 <calibrate.lto_priv.305+0x5be>
 8008f18:	2c02      	cmp	r4, #2
 8008f1a:	d97b      	bls.n	8009014 <calibrate.lto_priv.305+0x64c>
 8008f1c:	0028      	movs	r0, r5
 8008f1e:	f006 fcb3 	bl	800f888 <__aeabi_ui2f>
 8008f22:	1c05      	adds	r5, r0, #0
 8008f24:	0020      	movs	r0, r4
 8008f26:	f006 fcaf 	bl	800f888 <__aeabi_ui2f>
 8008f2a:	1c01      	adds	r1, r0, #0
 8008f2c:	1c28      	adds	r0, r5, #0
 8008f2e:	f005 fc1b 	bl	800e768 <__aeabi_fdiv>
 8008f32:	21fe      	movs	r1, #254	; 0xfe
 8008f34:	0589      	lsls	r1, r1, #22
 8008f36:	f005 fe5b 	bl	800ebf0 <__aeabi_fsub>
 8008f3a:	f006 fa67 	bl	800f40c <__aeabi_f2uiz>
 8008f3e:	b283      	uxth	r3, r0
 8008f40:	469a      	mov	sl, r3
 8008f42:	464b      	mov	r3, r9
 8008f44:	b2b2      	uxth	r2, r6
 8008f46:	005d      	lsls	r5, r3, #1
 8008f48:	ab73      	add	r3, sp, #460	; 0x1cc
 8008f4a:	52ea      	strh	r2, [r5, r3]
 8008f4c:	ab8d      	add	r3, sp, #564	; 0x234
 8008f4e:	52ec      	strh	r4, [r5, r3]
 8008f50:	0020      	movs	r0, r4
 8008f52:	f006 fc4f 	bl	800f7f4 <__aeabi_i2f>
 8008f56:	1c01      	adds	r1, r0, #0
 8008f58:	1c38      	adds	r0, r7, #0
 8008f5a:	f005 fc05 	bl	800e768 <__aeabi_fdiv>
 8008f5e:	f006 fa55 	bl	800f40c <__aeabi_f2uiz>
 8008f62:	ab80      	add	r3, sp, #512	; 0x200
 8008f64:	52e8      	strh	r0, [r5, r3]
 8008f66:	ab9a      	add	r3, sp, #616	; 0x268
 8008f68:	469c      	mov	ip, r3
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	2305      	movs	r3, #5
 8008f6e:	4358      	muls	r0, r3
 8008f70:	4465      	add	r5, ip
 8008f72:	464b      	mov	r3, r9
 8008f74:	3d05      	subs	r5, #5
 8008f76:	3dff      	subs	r5, #255	; 0xff
 8008f78:	8028      	strh	r0, [r5, #0]
 8008f7a:	2500      	movs	r5, #0
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4699      	mov	r9, r3
 8008f82:	002c      	movs	r4, r5
 8008f84:	2700      	movs	r7, #0
 8008f86:	2302      	movs	r3, #2
 8008f88:	469c      	mov	ip, r3
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	44e0      	add	r8, ip
 8008f8e:	2e19      	cmp	r6, #25
 8008f90:	d1a1      	bne.n	8008ed6 <calibrate.lto_priv.305+0x50e>
 8008f92:	4b37      	ldr	r3, [pc, #220]	; (8009070 <calibrate.lto_priv.305+0x6a8>)
 8008f94:	001a      	movs	r2, r3
 8008f96:	3230      	adds	r2, #48	; 0x30
 8008f98:	7812      	ldrb	r2, [r2, #0]
 8008f9a:	2a03      	cmp	r2, #3
 8008f9c:	d905      	bls.n	8008faa <calibrate.lto_priv.305+0x5e2>
 8008f9e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008fa0:	4a34      	ldr	r2, [pc, #208]	; (8009074 <calibrate.lto_priv.305+0x6ac>)
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	4934      	ldr	r1, [pc, #208]	; (8009078 <calibrate.lto_priv.305+0x6b0>)
 8008fa6:	2004      	movs	r0, #4
 8008fa8:	47a0      	blx	r4
 8008faa:	4d31      	ldr	r5, [pc, #196]	; (8009070 <calibrate.lto_priv.305+0x6a8>)
 8008fac:	4b33      	ldr	r3, [pc, #204]	; (800907c <calibrate.lto_priv.305+0x6b4>)
 8008fae:	002e      	movs	r6, r5
 8008fb0:	2400      	movs	r4, #0
 8008fb2:	3630      	adds	r6, #48	; 0x30
 8008fb4:	4698      	mov	r8, r3
 8008fb6:	e07b      	b.n	80090b0 <calibrate.lto_priv.305+0x6e8>
 8008fb8:	b2fa      	uxtb	r2, r7
 8008fba:	2a0b      	cmp	r2, #11
 8008fbc:	d10c      	bne.n	8008fd8 <calibrate.lto_priv.305+0x610>
 8008fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fc2:	0034      	movs	r4, r6
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	dc00      	bgt.n	8008fca <calibrate.lto_priv.305+0x602>
 8008fc8:	e72d      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008fca:	4553      	cmp	r3, sl
 8008fcc:	dd00      	ble.n	8008fd0 <calibrate.lto_priv.305+0x608>
 8008fce:	e72a      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008fd0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008fd2:	f006 fc0f 	bl	800f7f4 <__aeabi_i2f>
 8008fd6:	e71f      	b.n	8008e18 <calibrate.lto_priv.305+0x450>
 8008fd8:	18eb      	adds	r3, r5, r3
 8008fda:	1e9a      	subs	r2, r3, #2
 8008fdc:	2100      	movs	r1, #0
 8008fde:	5e52      	ldrsh	r2, [r2, r1]
 8008fe0:	0034      	movs	r4, r6
 8008fe2:	4542      	cmp	r2, r8
 8008fe4:	dc00      	bgt.n	8008fe8 <calibrate.lto_priv.305+0x620>
 8008fe6:	e71e      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008fe8:	2002      	movs	r0, #2
 8008fea:	5e18      	ldrsh	r0, [r3, r0]
 8008fec:	4540      	cmp	r0, r8
 8008fee:	db00      	blt.n	8008ff2 <calibrate.lto_priv.305+0x62a>
 8008ff0:	e719      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008ff2:	4552      	cmp	r2, sl
 8008ff4:	dd00      	ble.n	8008ff8 <calibrate.lto_priv.305+0x630>
 8008ff6:	e716      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008ff8:	45d0      	cmp	r8, sl
 8008ffa:	dd00      	ble.n	8008ffe <calibrate.lto_priv.305+0x636>
 8008ffc:	e713      	b.n	8008e26 <calibrate.lto_priv.305+0x45e>
 8008ffe:	1a80      	subs	r0, r0, r2
 8009000:	f006 fbf8 	bl	800f7f4 <__aeabi_i2f>
 8009004:	21fc      	movs	r1, #252	; 0xfc
 8009006:	0589      	lsls	r1, r1, #22
 8009008:	f005 fcc0 	bl	800e98c <__aeabi_fmul>
 800900c:	e704      	b.n	8008e18 <calibrate.lto_priv.305+0x450>
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	b29b      	uxth	r3, r3
 8009012:	e77b      	b.n	8008f0c <calibrate.lto_priv.305+0x544>
 8009014:	4b16      	ldr	r3, [pc, #88]	; (8009070 <calibrate.lto_priv.305+0x6a8>)
 8009016:	001a      	movs	r2, r3
 8009018:	3230      	adds	r2, #48	; 0x30
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	2a03      	cmp	r2, #3
 800901e:	d90c      	bls.n	800903a <calibrate.lto_priv.305+0x672>
 8009020:	4652      	mov	r2, sl
 8009022:	9401      	str	r4, [sp, #4]
 8009024:	9200      	str	r2, [sp, #0]
 8009026:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <calibrate.lto_priv.305+0x6b8>)
 800902a:	0033      	movs	r3, r6
 800902c:	4912      	ldr	r1, [pc, #72]	; (8009078 <calibrate.lto_priv.305+0x6b0>)
 800902e:	2004      	movs	r0, #4
 8009030:	47a0      	blx	r4
 8009032:	2400      	movs	r4, #0
 8009034:	2700      	movs	r7, #0
 8009036:	0025      	movs	r5, r4
 8009038:	e7a5      	b.n	8008f86 <calibrate.lto_priv.305+0x5be>
 800903a:	2500      	movs	r5, #0
 800903c:	2700      	movs	r7, #0
 800903e:	002c      	movs	r4, r5
 8009040:	e7a1      	b.n	8008f86 <calibrate.lto_priv.305+0x5be>
 8009042:	46c0      	nop			; (mov r8, r8)
 8009044:	0801d76c 	.word	0x0801d76c
 8009048:	0801d781 	.word	0x0801d781
 800904c:	08015bdc 	.word	0x08015bdc
 8009050:	3f99999a 	.word	0x3f99999a
 8009054:	447a0000 	.word	0x447a0000
 8009058:	0801d791 	.word	0x0801d791
 800905c:	00000513 	.word	0x00000513
 8009060:	c2c80000 	.word	0xc2c80000
 8009064:	fffffc18 	.word	0xfffffc18
 8009068:	42c80000 	.word	0x42c80000
 800906c:	0801d7a2 	.word	0x0801d7a2
 8009070:	200002b0 	.word	0x200002b0
 8009074:	0801d821 	.word	0x0801d821
 8009078:	0801d80a 	.word	0x0801d80a
 800907c:	0801d834 	.word	0x0801d834
 8009080:	0801d7b9 	.word	0x0801d7b9
 8009084:	2f03      	cmp	r7, #3
 8009086:	d912      	bls.n	80090ae <calibrate.lto_priv.305+0x6e6>
 8009088:	0063      	lsls	r3, r4, #1
 800908a:	aa80      	add	r2, sp, #512	; 0x200
 800908c:	5a9a      	ldrh	r2, [r3, r2]
 800908e:	49c4      	ldr	r1, [pc, #784]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 8009090:	9203      	str	r2, [sp, #12]
 8009092:	aa8d      	add	r2, sp, #564	; 0x234
 8009094:	5a9a      	ldrh	r2, [r3, r2]
 8009096:	2004      	movs	r0, #4
 8009098:	9202      	str	r2, [sp, #8]
 800909a:	aa59      	add	r2, sp, #356	; 0x164
 800909c:	5a9a      	ldrh	r2, [r3, r2]
 800909e:	9201      	str	r2, [sp, #4]
 80090a0:	aa73      	add	r2, sp, #460	; 0x1cc
 80090a2:	5a9b      	ldrh	r3, [r3, r2]
 80090a4:	4642      	mov	r2, r8
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80090aa:	0023      	movs	r3, r4
 80090ac:	47b8      	blx	r7
 80090ae:	3401      	adds	r4, #1
 80090b0:	b2a3      	uxth	r3, r4
 80090b2:	7837      	ldrb	r7, [r6, #0]
 80090b4:	4599      	cmp	r9, r3
 80090b6:	d8e5      	bhi.n	8009084 <calibrate.lto_priv.305+0x6bc>
 80090b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ba:	881e      	ldrh	r6, [r3, #0]
 80090bc:	4bb9      	ldr	r3, [pc, #740]	; (80093a4 <calibrate.lto_priv.305+0x9dc>)
 80090be:	429e      	cmp	r6, r3
 80090c0:	d825      	bhi.n	800910e <calibrate.lto_priv.305+0x746>
 80090c2:	2f03      	cmp	r7, #3
 80090c4:	d905      	bls.n	80090d2 <calibrate.lto_priv.305+0x70a>
 80090c6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80090c8:	0033      	movs	r3, r6
 80090ca:	4ab7      	ldr	r2, [pc, #732]	; (80093a8 <calibrate.lto_priv.305+0x9e0>)
 80090cc:	49b4      	ldr	r1, [pc, #720]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 80090ce:	2004      	movs	r0, #4
 80090d0:	47a0      	blx	r4
 80090d2:	4bb6      	ldr	r3, [pc, #728]	; (80093ac <calibrate.lto_priv.305+0x9e4>)
 80090d4:	001a      	movs	r2, r3
 80090d6:	3230      	adds	r2, #48	; 0x30
 80090d8:	7812      	ldrb	r2, [r2, #0]
 80090da:	2a03      	cmp	r2, #3
 80090dc:	d907      	bls.n	80090ee <calibrate.lto_priv.305+0x726>
 80090de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090e0:	49b3      	ldr	r1, [pc, #716]	; (80093b0 <calibrate.lto_priv.305+0x9e8>)
 80090e2:	9200      	str	r2, [sp, #0]
 80090e4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80090e6:	4ab3      	ldr	r2, [pc, #716]	; (80093b4 <calibrate.lto_priv.305+0x9ec>)
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	2004      	movs	r0, #4
 80090ec:	47a0      	blx	r4
 80090ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090f0:	3301      	adds	r3, #1
 80090f2:	931a      	str	r3, [sp, #104]	; 0x68
 80090f4:	2b0c      	cmp	r3, #12
 80090f6:	d000      	beq.n	80090fa <calibrate.lto_priv.305+0x732>
 80090f8:	e6da      	b.n	8008eb0 <calibrate.lto_priv.305+0x4e8>
 80090fa:	3b0b      	subs	r3, #11
 80090fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80090fe:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8009100:	2b01      	cmp	r3, #1
 8009102:	d101      	bne.n	8009108 <calibrate.lto_priv.305+0x740>
 8009104:	f000 fe3c 	bl	8009d80 <calibrate.lto_priv.305+0x13b8>
 8009108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910a:	9336      	str	r3, [sp, #216]	; 0xd8
 800910c:	e50d      	b.n	8008b2a <calibrate.lto_priv.305+0x162>
 800910e:	4baa      	ldr	r3, [pc, #680]	; (80093b8 <calibrate.lto_priv.305+0x9f0>)
 8009110:	18f0      	adds	r0, r6, r3
 8009112:	f006 fbb9 	bl	800f888 <__aeabi_ui2f>
 8009116:	49a9      	ldr	r1, [pc, #676]	; (80093bc <calibrate.lto_priv.305+0x9f4>)
 8009118:	f005 fc38 	bl	800e98c <__aeabi_fmul>
 800911c:	21de      	movs	r1, #222	; 0xde
 800911e:	0589      	lsls	r1, r1, #22
 8009120:	f005 fc34 	bl	800e98c <__aeabi_fmul>
 8009124:	1c01      	adds	r1, r0, #0
 8009126:	48a5      	ldr	r0, [pc, #660]	; (80093bc <calibrate.lto_priv.305+0x9f4>)
 8009128:	f005 fd62 	bl	800ebf0 <__aeabi_fsub>
 800912c:	1c01      	adds	r1, r0, #0
 800912e:	48a4      	ldr	r0, [pc, #656]	; (80093c0 <calibrate.lto_priv.305+0x9f8>)
 8009130:	f005 fd5e 	bl	800ebf0 <__aeabi_fsub>
 8009134:	49a1      	ldr	r1, [pc, #644]	; (80093bc <calibrate.lto_priv.305+0x9f4>)
 8009136:	f005 fb17 	bl	800e768 <__aeabi_fdiv>
 800913a:	218f      	movs	r1, #143	; 0x8f
 800913c:	05c9      	lsls	r1, r1, #23
 800913e:	f005 fc25 	bl	800e98c <__aeabi_fmul>
 8009142:	218e      	movs	r1, #142	; 0x8e
 8009144:	05c9      	lsls	r1, r1, #23
 8009146:	f005 f975 	bl	800e434 <__aeabi_fadd>
 800914a:	f006 f95f 	bl	800f40c <__aeabi_f2uiz>
 800914e:	b284      	uxth	r4, r0
 8009150:	2f03      	cmp	r7, #3
 8009152:	d905      	bls.n	8009160 <calibrate.lto_priv.305+0x798>
 8009154:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8009156:	0023      	movs	r3, r4
 8009158:	4a9a      	ldr	r2, [pc, #616]	; (80093c4 <calibrate.lto_priv.305+0x9fc>)
 800915a:	4991      	ldr	r1, [pc, #580]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 800915c:	2004      	movs	r0, #4
 800915e:	47a8      	blx	r5
 8009160:	2300      	movs	r3, #0
 8009162:	9312      	str	r3, [sp, #72]	; 0x48
 8009164:	930d      	str	r3, [sp, #52]	; 0x34
 8009166:	3330      	adds	r3, #48	; 0x30
 8009168:	4698      	mov	r8, r3
 800916a:	4f90      	ldr	r7, [pc, #576]	; (80093ac <calibrate.lto_priv.305+0x9e4>)
 800916c:	ab80      	add	r3, sp, #512	; 0x200
 800916e:	44b8      	add	r8, r7
 8009170:	469a      	mov	sl, r3
 8009172:	e010      	b.n	8009196 <calibrate.lto_priv.305+0x7ce>
 8009174:	4650      	mov	r0, sl
 8009176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	5a1b      	ldrh	r3, [r3, r0]
 800917c:	4892      	ldr	r0, [pc, #584]	; (80093c8 <calibrate.lto_priv.305+0xa00>)
 800917e:	4283      	cmp	r3, r0
 8009180:	d84f      	bhi.n	8009222 <calibrate.lto_priv.305+0x85a>
 8009182:	2903      	cmp	r1, #3
 8009184:	d904      	bls.n	8009190 <calibrate.lto_priv.305+0x7c8>
 8009186:	4a91      	ldr	r2, [pc, #580]	; (80093cc <calibrate.lto_priv.305+0xa04>)
 8009188:	4985      	ldr	r1, [pc, #532]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 800918a:	2004      	movs	r0, #4
 800918c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800918e:	47a8      	blx	r5
 8009190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009192:	3301      	adds	r3, #1
 8009194:	9312      	str	r3, [sp, #72]	; 0x48
 8009196:	2248      	movs	r2, #72	; 0x48
 8009198:	466b      	mov	r3, sp
 800919a:	189b      	adds	r3, r3, r2
 800919c:	881a      	ldrh	r2, [r3, #0]
 800919e:	4643      	mov	r3, r8
 80091a0:	7819      	ldrb	r1, [r3, #0]
 80091a2:	454a      	cmp	r2, r9
 80091a4:	d3e6      	bcc.n	8009174 <calibrate.lto_priv.305+0x7ac>
 80091a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d933      	bls.n	8009214 <calibrate.lto_priv.305+0x84c>
 80091ac:	1e9f      	subs	r7, r3, #2
 80091ae:	b23f      	sxth	r7, r7
 80091b0:	007b      	lsls	r3, r7, #1
 80091b2:	9312      	str	r3, [sp, #72]	; 0x48
 80091b4:	ad66      	add	r5, sp, #408	; 0x198
 80091b6:	ae80      	add	r6, sp, #512	; 0x200
 80091b8:	2300      	movs	r3, #0
 80091ba:	0039      	movs	r1, r7
 80091bc:	469c      	mov	ip, r3
 80091be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80091c0:	2900      	cmp	r1, #0
 80091c2:	da46      	bge.n	8009252 <calibrate.lto_priv.305+0x88a>
 80091c4:	4663      	mov	r3, ip
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f6      	bne.n	80091b8 <calibrate.lto_priv.305+0x7f0>
 80091ca:	2201      	movs	r2, #1
 80091cc:	0015      	movs	r5, r2
 80091ce:	a866      	add	r0, sp, #408	; 0x198
 80091d0:	8803      	ldrh	r3, [r0, #0]
 80091d2:	a980      	add	r1, sp, #512	; 0x200
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	5a5c      	ldrh	r4, [r3, r1]
 80091d8:	4e7d      	ldr	r6, [pc, #500]	; (80093d0 <calibrate.lto_priv.305+0xa08>)
 80091da:	0053      	lsls	r3, r2, #1
 80091dc:	5a1b      	ldrh	r3, [r3, r0]
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	5a5b      	ldrh	r3, [r3, r1]
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d25c      	bcs.n	80092a0 <calibrate.lto_priv.305+0x8d8>
 80091e6:	1b1b      	subs	r3, r3, r4
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	42b3      	cmp	r3, r6
 80091ec:	d801      	bhi.n	80091f2 <calibrate.lto_priv.305+0x82a>
 80091ee:	3501      	adds	r5, #1
 80091f0:	b2ad      	uxth	r5, r5
 80091f2:	3201      	adds	r2, #1
 80091f4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80091f6:	b293      	uxth	r3, r2
 80091f8:	429f      	cmp	r7, r3
 80091fa:	d8ee      	bhi.n	80091da <calibrate.lto_priv.305+0x812>
 80091fc:	4e6b      	ldr	r6, [pc, #428]	; (80093ac <calibrate.lto_priv.305+0x9e4>)
 80091fe:	0037      	movs	r7, r6
 8009200:	3730      	adds	r7, #48	; 0x30
 8009202:	9714      	str	r7, [sp, #80]	; 0x50
 8009204:	2200      	movs	r2, #0
 8009206:	1e6b      	subs	r3, r5, #1
 8009208:	0014      	movs	r4, r2
 800920a:	4698      	mov	r8, r3
 800920c:	4544      	cmp	r4, r8
 800920e:	d34a      	bcc.n	80092a6 <calibrate.lto_priv.305+0x8de>
 8009210:	2a00      	cmp	r2, #0
 8009212:	d1f7      	bne.n	8009204 <calibrate.lto_priv.305+0x83c>
 8009214:	4c65      	ldr	r4, [pc, #404]	; (80093ac <calibrate.lto_priv.305+0x9e4>)
 8009216:	ab66      	add	r3, sp, #408	; 0x198
 8009218:	0027      	movs	r7, r4
 800921a:	2500      	movs	r5, #0
 800921c:	3730      	adds	r7, #48	; 0x30
 800921e:	4698      	mov	r8, r3
 8009220:	e07b      	b.n	800931a <calibrate.lto_priv.305+0x952>
 8009222:	486c      	ldr	r0, [pc, #432]	; (80093d4 <calibrate.lto_priv.305+0xa0c>)
 8009224:	1830      	adds	r0, r6, r0
 8009226:	4283      	cmp	r3, r0
 8009228:	d907      	bls.n	800923a <calibrate.lto_priv.305+0x872>
 800922a:	2903      	cmp	r1, #3
 800922c:	d9b0      	bls.n	8009190 <calibrate.lto_priv.305+0x7c8>
 800922e:	4a6a      	ldr	r2, [pc, #424]	; (80093d8 <calibrate.lto_priv.305+0xa10>)
 8009230:	495b      	ldr	r1, [pc, #364]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 8009232:	2004      	movs	r0, #4
 8009234:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8009236:	47a8      	blx	r5
 8009238:	e7aa      	b.n	8009190 <calibrate.lto_priv.305+0x7c8>
 800923a:	a99a      	add	r1, sp, #616	; 0x268
 800923c:	468c      	mov	ip, r1
 800923e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	4463      	add	r3, ip
 8009244:	3bd0      	subs	r3, #208	; 0xd0
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800924a:	3301      	adds	r3, #1
 800924c:	b29b      	uxth	r3, r3
 800924e:	930d      	str	r3, [sp, #52]	; 0x34
 8009250:	e79e      	b.n	8009190 <calibrate.lto_priv.305+0x7c8>
 8009252:	5b43      	ldrh	r3, [r0, r5]
 8009254:	4699      	mov	r9, r3
 8009256:	182b      	adds	r3, r5, r0
 8009258:	4698      	mov	r8, r3
 800925a:	885b      	ldrh	r3, [r3, #2]
 800925c:	469a      	mov	sl, r3
 800925e:	464b      	mov	r3, r9
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	5b9a      	ldrh	r2, [r3, r6]
 8009264:	4294      	cmp	r4, r2
 8009266:	d215      	bcs.n	8009294 <calibrate.lto_priv.305+0x8cc>
 8009268:	1b12      	subs	r2, r2, r4
 800926a:	b292      	uxth	r2, r2
 800926c:	4653      	mov	r3, sl
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	5af3      	ldrh	r3, [r6, r3]
 8009272:	429c      	cmp	r4, r3
 8009274:	d211      	bcs.n	800929a <calibrate.lto_priv.305+0x8d2>
 8009276:	1b1b      	subs	r3, r3, r4
 8009278:	b29b      	uxth	r3, r3
 800927a:	429a      	cmp	r2, r3
 800927c:	d906      	bls.n	800928c <calibrate.lto_priv.305+0x8c4>
 800927e:	4653      	mov	r3, sl
 8009280:	464a      	mov	r2, r9
 8009282:	5343      	strh	r3, [r0, r5]
 8009284:	4643      	mov	r3, r8
 8009286:	805a      	strh	r2, [r3, #2]
 8009288:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800928a:	469c      	mov	ip, r3
 800928c:	3901      	subs	r1, #1
 800928e:	b209      	sxth	r1, r1
 8009290:	3802      	subs	r0, #2
 8009292:	e795      	b.n	80091c0 <calibrate.lto_priv.305+0x7f8>
 8009294:	1aa2      	subs	r2, r4, r2
 8009296:	b292      	uxth	r2, r2
 8009298:	e7e8      	b.n	800926c <calibrate.lto_priv.305+0x8a4>
 800929a:	1ae3      	subs	r3, r4, r3
 800929c:	b29b      	uxth	r3, r3
 800929e:	e7ec      	b.n	800927a <calibrate.lto_priv.305+0x8b2>
 80092a0:	1ae3      	subs	r3, r4, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	e7a1      	b.n	80091ea <calibrate.lto_priv.305+0x822>
 80092a6:	a966      	add	r1, sp, #408	; 0x198
 80092a8:	468c      	mov	ip, r1
 80092aa:	a866      	add	r0, sp, #408	; 0x198
 80092ac:	4681      	mov	r9, r0
 80092ae:	0063      	lsls	r3, r4, #1
 80092b0:	449c      	add	ip, r3
 80092b2:	3302      	adds	r3, #2
 80092b4:	444b      	add	r3, r9
 80092b6:	4661      	mov	r1, ip
 80092b8:	8818      	ldrh	r0, [r3, #0]
 80092ba:	8809      	ldrh	r1, [r1, #0]
 80092bc:	4681      	mov	r9, r0
 80092be:	004f      	lsls	r7, r1, #1
 80092c0:	46ba      	mov	sl, r7
 80092c2:	464f      	mov	r7, r9
 80092c4:	007f      	lsls	r7, r7, #1
 80092c6:	9712      	str	r7, [sp, #72]	; 0x48
 80092c8:	4657      	mov	r7, sl
 80092ca:	a88d      	add	r0, sp, #564	; 0x234
 80092cc:	5a3f      	ldrh	r7, [r7, r0]
 80092ce:	46ba      	mov	sl, r7
 80092d0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80092d2:	5a38      	ldrh	r0, [r7, r0]
 80092d4:	4582      	cmp	sl, r0
 80092d6:	d20e      	bcs.n	80092f6 <calibrate.lto_priv.305+0x92e>
 80092d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092da:	464f      	mov	r7, r9
 80092dc:	7810      	ldrb	r0, [r2, #0]
 80092de:	4662      	mov	r2, ip
 80092e0:	8017      	strh	r7, [r2, #0]
 80092e2:	8019      	strh	r1, [r3, #0]
 80092e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092e6:	2803      	cmp	r0, #3
 80092e8:	d905      	bls.n	80092f6 <calibrate.lto_priv.305+0x92e>
 80092ea:	4a3c      	ldr	r2, [pc, #240]	; (80093dc <calibrate.lto_priv.305+0xa14>)
 80092ec:	492c      	ldr	r1, [pc, #176]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 80092ee:	2004      	movs	r0, #4
 80092f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80092f2:	4798      	blx	r3
 80092f4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092f6:	3401      	adds	r4, #1
 80092f8:	b2a4      	uxth	r4, r4
 80092fa:	e787      	b.n	800920c <calibrate.lto_priv.305+0x844>
 80092fc:	2e03      	cmp	r6, #3
 80092fe:	d90b      	bls.n	8009318 <calibrate.lto_priv.305+0x950>
 8009300:	4642      	mov	r2, r8
 8009302:	006b      	lsls	r3, r5, #1
 8009304:	5a9b      	ldrh	r3, [r3, r2]
 8009306:	aa80      	add	r2, sp, #512	; 0x200
 8009308:	0059      	lsls	r1, r3, #1
 800930a:	5a8a      	ldrh	r2, [r1, r2]
 800930c:	2004      	movs	r0, #4
 800930e:	9200      	str	r2, [sp, #0]
 8009310:	4923      	ldr	r1, [pc, #140]	; (80093a0 <calibrate.lto_priv.305+0x9d8>)
 8009312:	4a33      	ldr	r2, [pc, #204]	; (80093e0 <calibrate.lto_priv.305+0xa18>)
 8009314:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8009316:	47b0      	blx	r6
 8009318:	3501      	adds	r5, #1
 800931a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800931c:	b2ab      	uxth	r3, r5
 800931e:	783e      	ldrb	r6, [r7, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d8eb      	bhi.n	80092fc <calibrate.lto_priv.305+0x934>
 8009324:	2a00      	cmp	r2, #0
 8009326:	d100      	bne.n	800932a <calibrate.lto_priv.305+0x962>
 8009328:	e6d3      	b.n	80090d2 <calibrate.lto_priv.305+0x70a>
 800932a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932c:	4a2d      	ldr	r2, [pc, #180]	; (80093e4 <calibrate.lto_priv.305+0xa1c>)
 800932e:	0059      	lsls	r1, r3, #1
 8009330:	4b2d      	ldr	r3, [pc, #180]	; (80093e8 <calibrate.lto_priv.305+0xa20>)
 8009332:	3270      	adds	r2, #112	; 0x70
 8009334:	185b      	adds	r3, r3, r1
 8009336:	5a88      	ldrh	r0, [r1, r2]
 8009338:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800933a:	1ac0      	subs	r0, r0, r3
 800933c:	b200      	sxth	r0, r0
 800933e:	f006 fa59 	bl	800f7f4 <__aeabi_i2f>
 8009342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009344:	1c05      	adds	r5, r0, #0
 8009346:	8818      	ldrh	r0, [r3, #0]
 8009348:	f006 fa9e 	bl	800f888 <__aeabi_ui2f>
 800934c:	21de      	movs	r1, #222	; 0xde
 800934e:	0589      	lsls	r1, r1, #22
 8009350:	f005 fb1c 	bl	800e98c <__aeabi_fmul>
 8009354:	21fc      	movs	r1, #252	; 0xfc
 8009356:	0589      	lsls	r1, r1, #22
 8009358:	f005 fc4a 	bl	800ebf0 <__aeabi_fsub>
 800935c:	4917      	ldr	r1, [pc, #92]	; (80093bc <calibrate.lto_priv.305+0x9f4>)
 800935e:	f005 fb15 	bl	800e98c <__aeabi_fmul>
 8009362:	4922      	ldr	r1, [pc, #136]	; (80093ec <calibrate.lto_priv.305+0xa24>)
 8009364:	f005 fb12 	bl	800e98c <__aeabi_fmul>
 8009368:	1c01      	adds	r1, r0, #0
 800936a:	1c28      	adds	r0, r5, #0
 800936c:	f005 fc40 	bl	800ebf0 <__aeabi_fsub>
 8009370:	f006 fa20 	bl	800f7b4 <__aeabi_f2iz>
 8009374:	aa3c      	add	r2, sp, #240	; 0xf0
 8009376:	4694      	mov	ip, r2
 8009378:	2322      	movs	r3, #34	; 0x22
 800937a:	22e6      	movs	r2, #230	; 0xe6
 800937c:	b205      	sxth	r5, r0
 800937e:	4463      	add	r3, ip
 8009380:	801d      	strh	r5, [r3, #0]
 8009382:	4b1b      	ldr	r3, [pc, #108]	; (80093f0 <calibrate.lto_priv.305+0xa28>)
 8009384:	0052      	lsls	r2, r2, #1
 8009386:	18eb      	adds	r3, r5, r3
 8009388:	b29b      	uxth	r3, r3
 800938a:	4293      	cmp	r3, r2
 800938c:	d934      	bls.n	80093f8 <calibrate.lto_priv.305+0xa30>
 800938e:	2e03      	cmp	r6, #3
 8009390:	d800      	bhi.n	8009394 <calibrate.lto_priv.305+0x9cc>
 8009392:	e69e      	b.n	80090d2 <calibrate.lto_priv.305+0x70a>
 8009394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009396:	4a17      	ldr	r2, [pc, #92]	; (80093f4 <calibrate.lto_priv.305+0xa2c>)
 8009398:	4905      	ldr	r1, [pc, #20]	; (80093b0 <calibrate.lto_priv.305+0x9e8>)
 800939a:	2004      	movs	r0, #4
 800939c:	4798      	blx	r3
 800939e:	e698      	b.n	80090d2 <calibrate.lto_priv.305+0x70a>
 80093a0:	0801d80a 	.word	0x0801d80a
 80093a4:	000087cf 	.word	0x000087cf
 80093a8:	0801d876 	.word	0x0801d876
 80093ac:	200002b0 	.word	0x200002b0
 80093b0:	0801d688 	.word	0x0801d688
 80093b4:	0801dd4e 	.word	0x0801dd4e
 80093b8:	ffff8000 	.word	0xffff8000
 80093bc:	3f99999a 	.word	0x3f99999a
 80093c0:	3f866666 	.word	0x3f866666
 80093c4:	0801d89b 	.word	0x0801d89b
 80093c8:	00001387 	.word	0x00001387
 80093cc:	0801d8ab 	.word	0x0801d8ab
 80093d0:	000007cf 	.word	0x000007cf
 80093d4:	fffff830 	.word	0xfffff830
 80093d8:	0801d8d9 	.word	0x0801d8d9
 80093dc:	0801d907 	.word	0x0801d907
 80093e0:	0801d938 	.word	0x0801d938
 80093e4:	08015bdc 	.word	0x08015bdc
 80093e8:	08015c5c 	.word	0x08015c5c
 80093ec:	447a0000 	.word	0x447a0000
 80093f0:	fffffcf4 	.word	0xfffffcf4
 80093f4:	0801d95a 	.word	0x0801d95a
 80093f8:	ab66      	add	r3, sp, #408	; 0x198
 80093fa:	881f      	ldrh	r7, [r3, #0]
 80093fc:	ab59      	add	r3, sp, #356	; 0x164
 80093fe:	007a      	lsls	r2, r7, #1
 8009400:	5ad3      	ldrh	r3, [r2, r3]
 8009402:	2105      	movs	r1, #5
 8009404:	0018      	movs	r0, r3
 8009406:	9312      	str	r3, [sp, #72]	; 0x48
 8009408:	f005 fdf2 	bl	800eff0 <__udivsi3>
 800940c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800940e:	b2c0      	uxtb	r0, r0
 8009410:	0040      	lsls	r0, r0, #1
 8009412:	5ac0      	ldrh	r0, [r0, r3]
 8009414:	f006 fa38 	bl	800f888 <__aeabi_ui2f>
 8009418:	21de      	movs	r1, #222	; 0xde
 800941a:	0589      	lsls	r1, r1, #22
 800941c:	f005 fab6 	bl	800e98c <__aeabi_fmul>
 8009420:	21fc      	movs	r1, #252	; 0xfc
 8009422:	0589      	lsls	r1, r1, #22
 8009424:	f005 fbe4 	bl	800ebf0 <__aeabi_fsub>
 8009428:	49cd      	ldr	r1, [pc, #820]	; (8009760 <calibrate.lto_priv.305+0xd98>)
 800942a:	f005 faaf 	bl	800e98c <__aeabi_fmul>
 800942e:	49cd      	ldr	r1, [pc, #820]	; (8009764 <calibrate.lto_priv.305+0xd9c>)
 8009430:	f005 faac 	bl	800e98c <__aeabi_fmul>
 8009434:	4680      	mov	r8, r0
 8009436:	0028      	movs	r0, r5
 8009438:	f006 f9dc 	bl	800f7f4 <__aeabi_i2f>
 800943c:	1c01      	adds	r1, r0, #0
 800943e:	4640      	mov	r0, r8
 8009440:	f004 fff8 	bl	800e434 <__aeabi_fadd>
 8009444:	f006 f9b6 	bl	800f7b4 <__aeabi_f2iz>
 8009448:	ab45      	add	r3, sp, #276	; 0x114
 800944a:	8018      	strh	r0, [r3, #0]
 800944c:	2e03      	cmp	r6, #3
 800944e:	d907      	bls.n	8009460 <calibrate.lto_priv.305+0xa98>
 8009450:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009452:	4ac5      	ldr	r2, [pc, #788]	; (8009768 <calibrate.lto_priv.305+0xda0>)
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009458:	003b      	movs	r3, r7
 800945a:	49c4      	ldr	r1, [pc, #784]	; (800976c <calibrate.lto_priv.305+0xda4>)
 800945c:	2004      	movs	r0, #4
 800945e:	47a0      	blx	r4
 8009460:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009462:	48c3      	ldr	r0, [pc, #780]	; (8009770 <calibrate.lto_priv.305+0xda8>)
 8009464:	f003 fbeb 	bl	800cc3e <acc_diagnostic_log_set_parameter>
 8009468:	4dc2      	ldr	r5, [pc, #776]	; (8009774 <calibrate.lto_priv.305+0xdac>)
 800946a:	48c3      	ldr	r0, [pc, #780]	; (8009778 <calibrate.lto_priv.305+0xdb0>)
 800946c:	0029      	movs	r1, r5
 800946e:	ac45      	add	r4, sp, #276	; 0x114
 8009470:	f003 fbe4 	bl	800cc3c <acc_diagnostic_log_array>
 8009474:	0020      	movs	r0, r4
 8009476:	f001 fe56 	bl	800b126 <acc_diagnostic_log_data_i16.constprop.20>
 800947a:	0029      	movs	r1, r5
 800947c:	48bf      	ldr	r0, [pc, #764]	; (800977c <calibrate.lto_priv.305+0xdb4>)
 800947e:	f003 fbdd 	bl	800cc3c <acc_diagnostic_log_array>
 8009482:	ab3c      	add	r3, sp, #240	; 0xf0
 8009484:	469c      	mov	ip, r3
 8009486:	2022      	movs	r0, #34	; 0x22
 8009488:	4460      	add	r0, ip
 800948a:	f001 fe4c 	bl	800b126 <acc_diagnostic_log_data_i16.constprop.20>
 800948e:	4abc      	ldr	r2, [pc, #752]	; (8009780 <calibrate.lto_priv.305+0xdb8>)
 8009490:	8823      	ldrh	r3, [r4, #0]
 8009492:	4694      	mov	ip, r2
 8009494:	2200      	movs	r2, #0
 8009496:	4463      	add	r3, ip
 8009498:	9223      	str	r2, [sp, #140]	; 0x8c
 800949a:	2bc8      	cmp	r3, #200	; 0xc8
 800949c:	d900      	bls.n	80094a0 <calibrate.lto_priv.305+0xad8>
 800949e:	e0a9      	b.n	80095f4 <calibrate.lto_priv.305+0xc2c>
 80094a0:	2301      	movs	r3, #1
 80094a2:	469a      	mov	sl, r3
 80094a4:	4bb7      	ldr	r3, [pc, #732]	; (8009784 <calibrate.lto_priv.305+0xdbc>)
 80094a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80094a8:	3344      	adds	r3, #68	; 0x44
 80094aa:	5cd3      	ldrb	r3, [r2, r3]
 80094ac:	48b6      	ldr	r0, [pc, #728]	; (8009788 <calibrate.lto_priv.305+0xdc0>)
 80094ae:	0019      	movs	r1, r3
 80094b0:	9320      	str	r3, [sp, #128]	; 0x80
 80094b2:	f003 fbc4 	bl	800cc3e <acc_diagnostic_log_set_parameter>
 80094b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094b8:	2280      	movs	r2, #128	; 0x80
 80094ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80094bc:	466b      	mov	r3, sp
 80094be:	189b      	adds	r3, r3, r2
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	009c      	lsls	r4, r3, #2
 80094c4:	0020      	movs	r0, r4
 80094c6:	303e      	adds	r0, #62	; 0x3e
 80094c8:	9322      	str	r3, [sp, #136]	; 0x88
 80094ca:	287b      	cmp	r0, #123	; 0x7b
 80094cc:	d800      	bhi.n	80094d0 <calibrate.lto_priv.305+0xb08>
 80094ce:	e09e      	b.n	800960e <calibrate.lto_priv.305+0xc46>
 80094d0:	217c      	movs	r1, #124	; 0x7c
 80094d2:	f005 fe13 	bl	800f0fc <__aeabi_uidivmod>
 80094d6:	2200      	movs	r2, #0
 80094d8:	4653      	mov	r3, sl
 80094da:	0015      	movs	r5, r2
 80094dc:	0020      	movs	r0, r4
 80094de:	b28c      	uxth	r4, r1
 80094e0:	2100      	movs	r1, #0
 80094e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80094e4:	428e      	cmp	r6, r1
 80094e6:	d000      	beq.n	80094ea <calibrate.lto_priv.305+0xb22>
 80094e8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80094ea:	465e      	mov	r6, fp
 80094ec:	62b4      	str	r4, [r6, #40]	; 0x28
 80094ee:	4654      	mov	r4, sl
 80094f0:	62f0      	str	r0, [r6, #44]	; 0x2c
 80094f2:	6333      	str	r3, [r6, #48]	; 0x30
 80094f4:	6433      	str	r3, [r6, #64]	; 0x40
 80094f6:	64f4      	str	r4, [r6, #76]	; 0x4c
 80094f8:	2300      	movs	r3, #0
 80094fa:	65b4      	str	r4, [r6, #88]	; 0x58
 80094fc:	2003      	movs	r0, #3
 80094fe:	465c      	mov	r4, fp
 8009500:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8009502:	6370      	str	r0, [r6, #52]	; 0x34
 8009504:	6037      	str	r7, [r6, #0]
 8009506:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009508:	63b5      	str	r5, [r6, #56]	; 0x38
 800950a:	6077      	str	r7, [r6, #4]
 800950c:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800950e:	63f2      	str	r2, [r6, #60]	; 0x3c
 8009510:	60b7      	str	r7, [r6, #8]
 8009512:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8009514:	001a      	movs	r2, r3
 8009516:	81b7      	strh	r7, [r6, #12]
 8009518:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800951a:	6473      	str	r3, [r6, #68]	; 0x44
 800951c:	6137      	str	r7, [r6, #16]
 800951e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8009520:	64b3      	str	r3, [r6, #72]	; 0x48
 8009522:	6177      	str	r7, [r6, #20]
 8009524:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009526:	6533      	str	r3, [r6, #80]	; 0x50
 8009528:	61b7      	str	r7, [r6, #24]
 800952a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800952c:	6573      	str	r3, [r6, #84]	; 0x54
 800952e:	61f7      	str	r7, [r6, #28]
 8009530:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009532:	3604      	adds	r6, #4
 8009534:	61f7      	str	r7, [r6, #28]
 8009536:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009538:	4653      	mov	r3, sl
 800953a:	438b      	bics	r3, r1
 800953c:	65f2      	str	r2, [r6, #92]	; 0x5c
 800953e:	4651      	mov	r1, sl
 8009540:	66b3      	str	r3, [r6, #104]	; 0x68
 8009542:	465b      	mov	r3, fp
 8009544:	6632      	str	r2, [r6, #96]	; 0x60
 8009546:	6672      	str	r2, [r6, #100]	; 0x64
 8009548:	66f1      	str	r1, [r6, #108]	; 0x6c
 800954a:	6731      	str	r1, [r6, #112]	; 0x70
 800954c:	679a      	str	r2, [r3, #120]	; 0x78
 800954e:	2316      	movs	r3, #22
 8009550:	67b3      	str	r3, [r6, #120]	; 0x78
 8009552:	230f      	movs	r3, #15
 8009554:	67f3      	str	r3, [r6, #124]	; 0x7c
 8009556:	465b      	mov	r3, fp
 8009558:	0011      	movs	r1, r2
 800955a:	3308      	adds	r3, #8
 800955c:	67d9      	str	r1, [r3, #124]	; 0x7c
 800955e:	465d      	mov	r5, fp
 8009560:	465b      	mov	r3, fp
 8009562:	2207      	movs	r2, #7
 8009564:	3388      	adds	r3, #136	; 0x88
 8009566:	358c      	adds	r5, #140	; 0x8c
 8009568:	7029      	strb	r1, [r5, #0]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	3a01      	subs	r2, #1
 800956e:	609a      	str	r2, [r3, #8]
 8009570:	3494      	adds	r4, #148	; 0x94
 8009572:	3a08      	subs	r2, #8
 8009574:	6020      	str	r0, [r4, #0]
 8009576:	465f      	mov	r7, fp
 8009578:	611a      	str	r2, [r3, #16]
 800957a:	6159      	str	r1, [r3, #20]
 800957c:	6199      	str	r1, [r3, #24]
 800957e:	3305      	adds	r3, #5
 8009580:	7019      	strb	r1, [r3, #0]
 8009582:	4653      	mov	r3, sl
 8009584:	37a4      	adds	r7, #164	; 0xa4
 8009586:	603b      	str	r3, [r7, #0]
 8009588:	465b      	mov	r3, fp
 800958a:	4652      	mov	r2, sl
 800958c:	33a8      	adds	r3, #168	; 0xa8
 800958e:	6019      	str	r1, [r3, #0]
 8009590:	715a      	strb	r2, [r3, #5]
 8009592:	f7fc ff89 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 8009596:	465b      	mov	r3, fp
 8009598:	2100      	movs	r1, #0
 800959a:	33b0      	adds	r3, #176	; 0xb0
 800959c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800959e:	6018      	str	r0, [r3, #0]
 80095a0:	3b04      	subs	r3, #4
 80095a2:	609a      	str	r2, [r3, #8]
 80095a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095a6:	7019      	strb	r1, [r3, #0]
 80095a8:	3a01      	subs	r2, #1
 80095aa:	60da      	str	r2, [r3, #12]
 80095ac:	aa3c      	add	r2, sp, #240	; 0xf0
 80095ae:	4694      	mov	ip, r2
 80095b0:	2322      	movs	r3, #34	; 0x22
 80095b2:	4463      	add	r3, ip
 80095b4:	2200      	movs	r2, #0
 80095b6:	5e9b      	ldrsh	r3, [r3, r2]
 80095b8:	a98d      	add	r1, sp, #564	; 0x234
 80095ba:	933a      	str	r3, [sp, #232]	; 0xe8
 80095bc:	ab45      	add	r3, sp, #276	; 0x114
 80095be:	2200      	movs	r2, #0
 80095c0:	5e9b      	ldrsh	r3, [r3, r2]
 80095c2:	4658      	mov	r0, fp
 80095c4:	933b      	str	r3, [sp, #236]	; 0xec
 80095c6:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 80095c8:	6824      	ldr	r4, [r4, #0]
 80095ca:	4699      	mov	r9, r3
 80095cc:	782b      	ldrb	r3, [r5, #0]
 80095ce:	683f      	ldr	r7, [r7, #0]
 80095d0:	930a      	str	r3, [sp, #40]	; 0x28
 80095d2:	f003 ffc7 	bl	800d564 <acc_cpd_linear_sweep_get_info>
 80095d6:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 80095d8:	9b92      	ldr	r3, [sp, #584]	; 0x248
 80095da:	429a      	cmp	r2, r3
 80095dc:	d11b      	bne.n	8009616 <calibrate.lto_priv.305+0xc4e>
 80095de:	4b6b      	ldr	r3, [pc, #428]	; (800978c <calibrate.lto_priv.305+0xdc4>)
 80095e0:	4a6b      	ldr	r2, [pc, #428]	; (8009790 <calibrate.lto_priv.305+0xdc8>)
 80095e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e4:	4961      	ldr	r1, [pc, #388]	; (800976c <calibrate.lto_priv.305+0xda4>)
 80095e6:	2000      	movs	r0, #0
 80095e8:	4798      	blx	r3
 80095ea:	2300      	movs	r3, #0
 80095ec:	9322      	str	r3, [sp, #136]	; 0x88
 80095ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80095f0:	931c      	str	r3, [sp, #112]	; 0x70
 80095f2:	e085      	b.n	8009700 <calibrate.lto_priv.305+0xd38>
 80095f4:	4b65      	ldr	r3, [pc, #404]	; (800978c <calibrate.lto_priv.305+0xdc4>)
 80095f6:	001a      	movs	r2, r3
 80095f8:	3230      	adds	r2, #48	; 0x30
 80095fa:	7812      	ldrb	r2, [r2, #0]
 80095fc:	2a03      	cmp	r2, #3
 80095fe:	d800      	bhi.n	8009602 <calibrate.lto_priv.305+0xc3a>
 8009600:	e567      	b.n	80090d2 <calibrate.lto_priv.305+0x70a>
 8009602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009604:	4a63      	ldr	r2, [pc, #396]	; (8009794 <calibrate.lto_priv.305+0xdcc>)
 8009606:	4959      	ldr	r1, [pc, #356]	; (800976c <calibrate.lto_priv.305+0xda4>)
 8009608:	2004      	movs	r0, #4
 800960a:	4798      	blx	r3
 800960c:	e561      	b.n	80090d2 <calibrate.lto_priv.305+0x70a>
 800960e:	2203      	movs	r2, #3
 8009610:	4655      	mov	r5, sl
 8009612:	2300      	movs	r3, #0
 8009614:	e764      	b.n	80094e0 <calibrate.lto_priv.305+0xb18>
 8009616:	465b      	mov	r3, fp
 8009618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800961a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800961c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800961e:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 8009620:	f003 ffee 	bl	800d600 <acc_cpd_linear_sweep_load_program>
 8009624:	901f      	str	r0, [sp, #124]	; 0x7c
 8009626:	901c      	str	r0, [sp, #112]	; 0x70
 8009628:	2800      	cmp	r0, #0
 800962a:	d0de      	beq.n	80095ea <calibrate.lto_priv.305+0xc22>
 800962c:	2600      	movs	r6, #0
 800962e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009630:	42b3      	cmp	r3, r6
 8009632:	d000      	beq.n	8009636 <calibrate.lto_priv.305+0xc6e>
 8009634:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8009636:	0038      	movs	r0, r7
 8009638:	f006 f926 	bl	800f888 <__aeabi_ui2f>
 800963c:	1c01      	adds	r1, r0, #0
 800963e:	4856      	ldr	r0, [pc, #344]	; (8009798 <calibrate.lto_priv.305+0xdd0>)
 8009640:	f005 f892 	bl	800e768 <__aeabi_fdiv>
 8009644:	f005 fee2 	bl	800f40c <__aeabi_f2uiz>
 8009648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800964a:	3401      	adds	r4, #1
 800964c:	469c      	mov	ip, r3
 800964e:	b280      	uxth	r0, r0
 8009650:	b2a4      	uxth	r4, r4
 8009652:	4344      	muls	r4, r0
 8009654:	4465      	add	r5, ip
 8009656:	002b      	movs	r3, r5
 8009658:	46a4      	mov	ip, r4
 800965a:	4463      	add	r3, ip
 800965c:	9331      	str	r3, [sp, #196]	; 0xc4
 800965e:	4653      	mov	r3, sl
 8009660:	4033      	ands	r3, r6
 8009662:	22c4      	movs	r2, #196	; 0xc4
 8009664:	9314      	str	r3, [sp, #80]	; 0x50
 8009666:	466b      	mov	r3, sp
 8009668:	189b      	adds	r3, r3, r2
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	2105      	movs	r1, #5
 800966e:	3303      	adds	r3, #3
 8009670:	005b      	lsls	r3, r3, #1
 8009672:	9340      	str	r3, [sp, #256]	; 0x100
 8009674:	0020      	movs	r0, r4
 8009676:	0063      	lsls	r3, r4, #1
 8009678:	9321      	str	r3, [sp, #132]	; 0x84
 800967a:	941b      	str	r4, [sp, #108]	; 0x6c
 800967c:	f005 fcb8 	bl	800eff0 <__udivsi3>
 8009680:	2700      	movs	r7, #0
 8009682:	2305      	movs	r3, #5
 8009684:	0002      	movs	r2, r0
 8009686:	003e      	movs	r6, r7
 8009688:	003d      	movs	r5, r7
 800968a:	435a      	muls	r2, r3
 800968c:	0843      	lsrs	r3, r0, #1
 800968e:	9333      	str	r3, [sp, #204]	; 0xcc
 8009690:	3308      	adds	r3, #8
 8009692:	9334      	str	r3, [sp, #208]	; 0xd0
 8009694:	0053      	lsls	r3, r2, #1
 8009696:	9342      	str	r3, [sp, #264]	; 0x108
 8009698:	0043      	lsls	r3, r0, #1
 800969a:	9343      	str	r3, [sp, #268]	; 0x10c
 800969c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800969e:	9015      	str	r0, [sp, #84]	; 0x54
 80096a0:	921d      	str	r2, [sp, #116]	; 0x74
 80096a2:	9332      	str	r3, [sp, #200]	; 0xc8
 80096a4:	2e00      	cmp	r6, #0
 80096a6:	d03c      	beq.n	8009722 <calibrate.lto_priv.305+0xd5a>
 80096a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096aa:	f7fc fc93 	bl	8005fd4 <acc_sensor_protocol_r2_is_sensor_running>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d02d      	beq.n	800970e <calibrate.lto_priv.305+0xd46>
 80096b2:	4b36      	ldr	r3, [pc, #216]	; (800978c <calibrate.lto_priv.305+0xdc4>)
 80096b4:	4a39      	ldr	r2, [pc, #228]	; (800979c <calibrate.lto_priv.305+0xdd4>)
 80096b6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80096b8:	492c      	ldr	r1, [pc, #176]	; (800976c <calibrate.lto_priv.305+0xda4>)
 80096ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096bc:	2000      	movs	r0, #0
 80096be:	47a0      	blx	r4
 80096c0:	2f00      	cmp	r7, #0
 80096c2:	d092      	beq.n	80095ea <calibrate.lto_priv.305+0xc22>
 80096c4:	2700      	movs	r7, #0
 80096c6:	aa3c      	add	r2, sp, #240	; 0xf0
 80096c8:	4694      	mov	ip, r2
 80096ca:	2322      	movs	r3, #34	; 0x22
 80096cc:	4463      	add	r3, ip
 80096ce:	2200      	movs	r2, #0
 80096d0:	5e9b      	ldrsh	r3, [r3, r2]
 80096d2:	9330      	str	r3, [sp, #192]	; 0xc0
 80096d4:	ab45      	add	r3, sp, #276	; 0x114
 80096d6:	2200      	movs	r2, #0
 80096d8:	5e9b      	ldrsh	r3, [r3, r2]
 80096da:	932f      	str	r3, [sp, #188]	; 0xbc
 80096dc:	4b2b      	ldr	r3, [pc, #172]	; (800978c <calibrate.lto_priv.305+0xdc4>)
 80096de:	001a      	movs	r2, r3
 80096e0:	3230      	adds	r2, #48	; 0x30
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	2a03      	cmp	r2, #3
 80096e6:	d800      	bhi.n	80096ea <calibrate.lto_priv.305+0xd22>
 80096e8:	e30b      	b.n	8009d02 <calibrate.lto_priv.305+0x133a>
 80096ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096ec:	491f      	ldr	r1, [pc, #124]	; (800976c <calibrate.lto_priv.305+0xda4>)
 80096ee:	9200      	str	r2, [sp, #0]
 80096f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80096f2:	4a2b      	ldr	r2, [pc, #172]	; (80097a0 <calibrate.lto_priv.305+0xdd8>)
 80096f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096f6:	2004      	movs	r0, #4
 80096f8:	47a0      	blx	r4
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	d000      	beq.n	8009700 <calibrate.lto_priv.305+0xd38>
 80096fe:	e303      	b.n	8009d08 <calibrate.lto_priv.305+0x1340>
 8009700:	2300      	movs	r3, #0
 8009702:	2200      	movs	r2, #0
 8009704:	930b      	str	r3, [sp, #44]	; 0x2c
 8009706:	932c      	str	r3, [sp, #176]	; 0xb0
 8009708:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800970a:	921c      	str	r2, [sp, #112]	; 0x70
 800970c:	e31b      	b.n	8009d46 <calibrate.lto_priv.305+0x137e>
 800970e:	2d00      	cmp	r5, #0
 8009710:	d110      	bne.n	8009734 <calibrate.lto_priv.305+0xd6c>
 8009712:	4653      	mov	r3, sl
 8009714:	4a23      	ldr	r2, [pc, #140]	; (80097a4 <calibrate.lto_priv.305+0xddc>)
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	4923      	ldr	r1, [pc, #140]	; (80097a8 <calibrate.lto_priv.305+0xde0>)
 800971a:	2372      	movs	r3, #114	; 0x72
 800971c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800971e:	f001 fd03 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 8009722:	4922      	ldr	r1, [pc, #136]	; (80097ac <calibrate.lto_priv.305+0xde4>)
 8009724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009726:	f7fc fc62 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 800972a:	2800      	cmp	r0, #0
 800972c:	d0c8      	beq.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 800972e:	2300      	movs	r3, #0
 8009730:	931e      	str	r3, [sp, #120]	; 0x78
 8009732:	e176      	b.n	8009a22 <calibrate.lto_priv.305+0x105a>
 8009734:	464b      	mov	r3, r9
 8009736:	4d1b      	ldr	r5, [pc, #108]	; (80097a4 <calibrate.lto_priv.305+0xddc>)
 8009738:	4c1b      	ldr	r4, [pc, #108]	; (80097a8 <calibrate.lto_priv.305+0xde0>)
 800973a:	9300      	str	r3, [sp, #0]
 800973c:	002a      	movs	r2, r5
 800973e:	2344      	movs	r3, #68	; 0x44
 8009740:	0021      	movs	r1, r4
 8009742:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009744:	f001 fcf0 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 8009748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800974a:	002a      	movs	r2, r5
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	0021      	movs	r1, r4
 8009750:	2342      	movs	r3, #66	; 0x42
 8009752:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009754:	f001 fce8 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 8009758:	2e00      	cmp	r6, #0
 800975a:	d0e2      	beq.n	8009722 <calibrate.lto_priv.305+0xd5a>
 800975c:	e7d9      	b.n	8009712 <calibrate.lto_priv.305+0xd4a>
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	3f99999a 	.word	0x3f99999a
 8009764:	447a0000 	.word	0x447a0000
 8009768:	0801d980 	.word	0x0801d980
 800976c:	0801d688 	.word	0x0801d688
 8009770:	0801d9ae 	.word	0x0801d9ae
 8009774:	0801d998 	.word	0x0801d998
 8009778:	0801d9ba 	.word	0x0801d9ba
 800977c:	0801d9c1 	.word	0x0801d9c1
 8009780:	fffffbe6 	.word	0xfffffbe6
 8009784:	08015c5c 	.word	0x08015c5c
 8009788:	0801db6f 	.word	0x0801db6f
 800978c:	200002b0 	.word	0x200002b0
 8009790:	0801d9ee 	.word	0x0801d9ee
 8009794:	0801d9c9 	.word	0x0801d9c9
 8009798:	42f80000 	.word	0x42f80000
 800979c:	0801da0c 	.word	0x0801da0c
 80097a0:	0801dcc0 	.word	0x0801dcc0
 80097a4:	08019dd8 	.word	0x08019dd8
 80097a8:	0801af84 	.word	0x0801af84
 80097ac:	0000023a 	.word	0x0000023a
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d904      	bls.n	80097be <calibrate.lto_priv.305+0xdf6>
 80097b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80097b6:	49d1      	ldr	r1, [pc, #836]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 80097b8:	4ad1      	ldr	r2, [pc, #836]	; (8009b00 <calibrate.lto_priv.305+0x1138>)
 80097ba:	2004      	movs	r0, #4
 80097bc:	4798      	blx	r3
 80097be:	4ad1      	ldr	r2, [pc, #836]	; (8009b04 <calibrate.lto_priv.305+0x113c>)
 80097c0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80097c2:	0020      	movs	r0, r4
 80097c4:	f003 fa5c 	bl	800cc80 <acc_alg_basic_saturation_check_u16>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d012      	beq.n	80097f2 <calibrate.lto_priv.305+0xe2a>
 80097cc:	4ace      	ldr	r2, [pc, #824]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 80097ce:	4649      	mov	r1, r9
 80097d0:	0013      	movs	r3, r2
 80097d2:	3330      	adds	r3, #48	; 0x30
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	290f      	cmp	r1, #15
 80097d8:	d000      	beq.n	80097dc <calibrate.lto_priv.305+0xe14>
 80097da:	e0f8      	b.n	80099ce <calibrate.lto_priv.305+0x1006>
 80097dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097de:	2900      	cmp	r1, #0
 80097e0:	d100      	bne.n	80097e4 <calibrate.lto_priv.305+0xe1c>
 80097e2:	e0e7      	b.n	80099b4 <calibrate.lto_priv.305+0xfec>
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d904      	bls.n	80097f2 <calibrate.lto_priv.305+0xe2a>
 80097e8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80097ea:	49c4      	ldr	r1, [pc, #784]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 80097ec:	4ac7      	ldr	r2, [pc, #796]	; (8009b0c <calibrate.lto_priv.305+0x1144>)
 80097ee:	2004      	movs	r0, #4
 80097f0:	4798      	blx	r3
 80097f2:	4642      	mov	r2, r8
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	49c6      	ldr	r1, [pc, #792]	; (8009b10 <calibrate.lto_priv.305+0x1148>)
 80097f8:	9341      	str	r3, [sp, #260]	; 0x104
 80097fa:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80097fc:	3170      	adds	r1, #112	; 0x70
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	5a9b      	ldrh	r3, [r3, r2]
 8009802:	ad73      	add	r5, sp, #460	; 0x1cc
 8009804:	9335      	str	r3, [sp, #212]	; 0xd4
 8009806:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	5a9b      	ldrh	r3, [r3, r2]
 800980c:	4ac1      	ldr	r2, [pc, #772]	; (8009b14 <calibrate.lto_priv.305+0x114c>)
 800980e:	933f      	str	r3, [sp, #252]	; 0xfc
 8009810:	465b      	mov	r3, fp
 8009812:	6a1b      	ldr	r3, [r3, #32]
 8009814:	005b      	lsls	r3, r3, #1
 8009816:	18d2      	adds	r2, r2, r3
 8009818:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800981a:	5a5b      	ldrh	r3, [r3, r1]
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	b21b      	sxth	r3, r3
 8009820:	0018      	movs	r0, r3
 8009822:	930e      	str	r3, [sp, #56]	; 0x38
 8009824:	f005 ffe6 	bl	800f7f4 <__aeabi_i2f>
 8009828:	4642      	mov	r2, r8
 800982a:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 800982c:	1c06      	adds	r6, r0, #0
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	5a98      	ldrh	r0, [r3, r2]
 8009832:	f006 f829 	bl	800f888 <__aeabi_ui2f>
 8009836:	21de      	movs	r1, #222	; 0xde
 8009838:	0589      	lsls	r1, r1, #22
 800983a:	f005 f8a7 	bl	800e98c <__aeabi_fmul>
 800983e:	21fc      	movs	r1, #252	; 0xfc
 8009840:	0589      	lsls	r1, r1, #22
 8009842:	f005 f9d5 	bl	800ebf0 <__aeabi_fsub>
 8009846:	49b4      	ldr	r1, [pc, #720]	; (8009b18 <calibrate.lto_priv.305+0x1150>)
 8009848:	f005 f8a0 	bl	800e98c <__aeabi_fmul>
 800984c:	49b3      	ldr	r1, [pc, #716]	; (8009b1c <calibrate.lto_priv.305+0x1154>)
 800984e:	f005 f89d 	bl	800e98c <__aeabi_fmul>
 8009852:	1c01      	adds	r1, r0, #0
 8009854:	1c30      	adds	r0, r6, #0
 8009856:	f005 f9cb 	bl	800ebf0 <__aeabi_fsub>
 800985a:	f005 ffab 	bl	800f7b4 <__aeabi_f2iz>
 800985e:	b203      	sxth	r3, r0
 8009860:	4698      	mov	r8, r3
 8009862:	ab3c      	add	r3, sp, #240	; 0xf0
 8009864:	469c      	mov	ip, r3
 8009866:	2626      	movs	r6, #38	; 0x26
 8009868:	4643      	mov	r3, r8
 800986a:	4466      	add	r6, ip
 800986c:	8033      	strh	r3, [r6, #0]
 800986e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009870:	f006 f80a 	bl	800f888 <__aeabi_ui2f>
 8009874:	21de      	movs	r1, #222	; 0xde
 8009876:	0589      	lsls	r1, r1, #22
 8009878:	f005 f888 	bl	800e98c <__aeabi_fmul>
 800987c:	21fc      	movs	r1, #252	; 0xfc
 800987e:	0589      	lsls	r1, r1, #22
 8009880:	f005 f9b6 	bl	800ebf0 <__aeabi_fsub>
 8009884:	49a4      	ldr	r1, [pc, #656]	; (8009b18 <calibrate.lto_priv.305+0x1150>)
 8009886:	f005 f881 	bl	800e98c <__aeabi_fmul>
 800988a:	49a4      	ldr	r1, [pc, #656]	; (8009b1c <calibrate.lto_priv.305+0x1154>)
 800988c:	f005 f87e 	bl	800e98c <__aeabi_fmul>
 8009890:	9035      	str	r0, [sp, #212]	; 0xd4
 8009892:	4640      	mov	r0, r8
 8009894:	f005 ffae 	bl	800f7f4 <__aeabi_i2f>
 8009898:	1c01      	adds	r1, r0, #0
 800989a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800989c:	f004 fdca 	bl	800e434 <__aeabi_fadd>
 80098a0:	f005 ff88 	bl	800f7b4 <__aeabi_f2iz>
 80098a4:	8028      	strh	r0, [r5, #0]
 80098a6:	983f      	ldr	r0, [sp, #252]	; 0xfc
 80098a8:	f005 ffee 	bl	800f888 <__aeabi_ui2f>
 80098ac:	21de      	movs	r1, #222	; 0xde
 80098ae:	0589      	lsls	r1, r1, #22
 80098b0:	f005 f86c 	bl	800e98c <__aeabi_fmul>
 80098b4:	21fc      	movs	r1, #252	; 0xfc
 80098b6:	0589      	lsls	r1, r1, #22
 80098b8:	f005 f99a 	bl	800ebf0 <__aeabi_fsub>
 80098bc:	4996      	ldr	r1, [pc, #600]	; (8009b18 <calibrate.lto_priv.305+0x1150>)
 80098be:	f005 f865 	bl	800e98c <__aeabi_fmul>
 80098c2:	4996      	ldr	r1, [pc, #600]	; (8009b1c <calibrate.lto_priv.305+0x1154>)
 80098c4:	f005 f862 	bl	800e98c <__aeabi_fmul>
 80098c8:	f005 ff74 	bl	800f7b4 <__aeabi_f2iz>
 80098cc:	2288      	movs	r2, #136	; 0x88
 80098ce:	ab3c      	add	r3, sp, #240	; 0xf0
 80098d0:	0052      	lsls	r2, r2, #1
 80098d2:	189b      	adds	r3, r3, r2
 80098d4:	8018      	strh	r0, [r3, #0]
 80098d6:	4b92      	ldr	r3, [pc, #584]	; (8009b20 <calibrate.lto_priv.305+0x1158>)
 80098d8:	4892      	ldr	r0, [pc, #584]	; (8009b24 <calibrate.lto_priv.305+0x115c>)
 80098da:	4698      	mov	r8, r3
 80098dc:	0019      	movs	r1, r3
 80098de:	f003 f9ad 	bl	800cc3c <acc_diagnostic_log_array>
 80098e2:	0030      	movs	r0, r6
 80098e4:	f001 fc1f 	bl	800b126 <acc_diagnostic_log_data_i16.constprop.20>
 80098e8:	4641      	mov	r1, r8
 80098ea:	488e      	ldr	r0, [pc, #568]	; (8009b24 <calibrate.lto_priv.305+0x115c>)
 80098ec:	f003 f9a6 	bl	800cc3c <acc_diagnostic_log_array>
 80098f0:	0028      	movs	r0, r5
 80098f2:	f001 fc18 	bl	800b126 <acc_diagnostic_log_data_i16.constprop.20>
 80098f6:	4641      	mov	r1, r8
 80098f8:	488b      	ldr	r0, [pc, #556]	; (8009b28 <calibrate.lto_priv.305+0x1160>)
 80098fa:	f003 f99f 	bl	800cc3c <acc_diagnostic_log_array>
 80098fe:	a880      	add	r0, sp, #512	; 0x200
 8009900:	f001 fc11 	bl	800b126 <acc_diagnostic_log_data_i16.constprop.20>
 8009904:	8832      	ldrh	r2, [r6, #0]
 8009906:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	b21b      	sxth	r3, r3
 800990c:	17d9      	asrs	r1, r3, #31
 800990e:	185b      	adds	r3, r3, r1
 8009910:	404b      	eors	r3, r1
 8009912:	b21b      	sxth	r3, r3
 8009914:	2b64      	cmp	r3, #100	; 0x64
 8009916:	dc6d      	bgt.n	80099f4 <calibrate.lto_priv.305+0x102c>
 8009918:	4b84      	ldr	r3, [pc, #528]	; (8009b2c <calibrate.lto_priv.305+0x1164>)
 800991a:	469c      	mov	ip, r3
 800991c:	23e6      	movs	r3, #230	; 0xe6
 800991e:	4462      	add	r2, ip
 8009920:	b292      	uxth	r2, r2
 8009922:	005b      	lsls	r3, r3, #1
 8009924:	429a      	cmp	r2, r3
 8009926:	d865      	bhi.n	80099f4 <calibrate.lto_priv.305+0x102c>
 8009928:	2300      	movs	r3, #0
 800992a:	5eea      	ldrsh	r2, [r5, r3]
 800992c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	b21b      	sxth	r3, r3
 8009932:	17d9      	asrs	r1, r3, #31
 8009934:	185b      	adds	r3, r3, r1
 8009936:	404b      	eors	r3, r1
 8009938:	b21b      	sxth	r3, r3
 800993a:	2b64      	cmp	r3, #100	; 0x64
 800993c:	dc5a      	bgt.n	80099f4 <calibrate.lto_priv.305+0x102c>
 800993e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009940:	4293      	cmp	r3, r2
 8009942:	db57      	blt.n	80099f4 <calibrate.lto_priv.305+0x102c>
 8009944:	497a      	ldr	r1, [pc, #488]	; (8009b30 <calibrate.lto_priv.305+0x1168>)
 8009946:	487b      	ldr	r0, [pc, #492]	; (8009b34 <calibrate.lto_priv.305+0x116c>)
 8009948:	f003 f978 	bl	800cc3c <acc_diagnostic_log_array>
 800994c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800994e:	0020      	movs	r0, r4
 8009950:	f003 f972 	bl	800cc38 <acc_diagnostic_log_data_u16>
 8009954:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009956:	2b00      	cmp	r3, #0
 8009958:	d000      	beq.n	800995c <calibrate.lto_priv.305+0xf94>
 800995a:	e08d      	b.n	8009a78 <calibrate.lto_priv.305+0x10b0>
 800995c:	2124      	movs	r1, #36	; 0x24
 800995e:	4876      	ldr	r0, [pc, #472]	; (8009b38 <calibrate.lto_priv.305+0x1170>)
 8009960:	f7fc f97d 	bl	8005c5e <acc_assert_fail>
 8009964:	464a      	mov	r2, r9
 8009966:	2908      	cmp	r1, #8
 8009968:	d200      	bcs.n	800996c <calibrate.lto_priv.305+0xfa4>
 800996a:	2208      	movs	r2, #8
 800996c:	2108      	movs	r1, #8
 800996e:	4249      	negs	r1, r1
 8009970:	4689      	mov	r9, r1
 8009972:	4491      	add	r9, r2
 8009974:	2b03      	cmp	r3, #3
 8009976:	d906      	bls.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 800997a:	4a70      	ldr	r2, [pc, #448]	; (8009b3c <calibrate.lto_priv.305+0x1174>)
 800997c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800997e:	495f      	ldr	r1, [pc, #380]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 8009980:	464b      	mov	r3, r9
 8009982:	2004      	movs	r0, #4
 8009984:	47a0      	blx	r4
 8009986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009988:	f003 fd28 	bl	800d3dc <acc_sensor_protocol_r2_stop.constprop.25>
 800998c:	2d00      	cmp	r5, #0
 800998e:	d000      	beq.n	8009992 <calibrate.lto_priv.305+0xfca>
 8009990:	e68a      	b.n	80096a8 <calibrate.lto_priv.305+0xce0>
 8009992:	2e00      	cmp	r6, #0
 8009994:	d000      	beq.n	8009998 <calibrate.lto_priv.305+0xfd0>
 8009996:	e685      	b.n	80096a4 <calibrate.lto_priv.305+0xcdc>
 8009998:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d100      	bne.n	80099a0 <calibrate.lto_priv.305+0xfd8>
 800999e:	e68f      	b.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	d000      	beq.n	80099a6 <calibrate.lto_priv.305+0xfde>
 80099a4:	e68f      	b.n	80096c6 <calibrate.lto_priv.305+0xcfe>
 80099a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d100      	bne.n	80099ae <calibrate.lto_priv.305+0xfe6>
 80099ac:	e1d6      	b.n	8009d5c <calibrate.lto_priv.305+0x1394>
 80099ae:	4653      	mov	r3, sl
 80099b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80099b2:	e577      	b.n	80094a4 <calibrate.lto_priv.305+0xadc>
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d800      	bhi.n	80099ba <calibrate.lto_priv.305+0xff2>
 80099b8:	e198      	b.n	8009cec <calibrate.lto_priv.305+0x1324>
 80099ba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80099bc:	494f      	ldr	r1, [pc, #316]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 80099be:	4a60      	ldr	r2, [pc, #384]	; (8009b40 <calibrate.lto_priv.305+0x1178>)
 80099c0:	2004      	movs	r0, #4
 80099c2:	4798      	blx	r3
 80099c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80099c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099c8:	46b1      	mov	r9, r6
 80099ca:	930a      	str	r3, [sp, #40]	; 0x28
 80099cc:	e7db      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 80099ce:	2208      	movs	r2, #8
 80099d0:	4694      	mov	ip, r2
 80099d2:	44e1      	add	r9, ip
 80099d4:	464a      	mov	r2, r9
 80099d6:	2a0f      	cmp	r2, #15
 80099d8:	d901      	bls.n	80099de <calibrate.lto_priv.305+0x1016>
 80099da:	220f      	movs	r2, #15
 80099dc:	4691      	mov	r9, r2
 80099de:	2600      	movs	r6, #0
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d9d0      	bls.n	8009986 <calibrate.lto_priv.305+0xfbe>
 80099e4:	4b48      	ldr	r3, [pc, #288]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 80099e6:	4a57      	ldr	r2, [pc, #348]	; (8009b44 <calibrate.lto_priv.305+0x117c>)
 80099e8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80099ea:	4944      	ldr	r1, [pc, #272]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 80099ec:	464b      	mov	r3, r9
 80099ee:	2004      	movs	r0, #4
 80099f0:	47a0      	blx	r4
 80099f2:	e7c8      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 80099f4:	4b44      	ldr	r3, [pc, #272]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 80099f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099f8:	001a      	movs	r2, r3
 80099fa:	3230      	adds	r2, #48	; 0x30
 80099fc:	7812      	ldrb	r2, [r2, #0]
 80099fe:	2902      	cmp	r1, #2
 8009a00:	d02d      	beq.n	8009a5e <calibrate.lto_priv.305+0x1096>
 8009a02:	2a03      	cmp	r2, #3
 8009a04:	d905      	bls.n	8009a12 <calibrate.lto_priv.305+0x104a>
 8009a06:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a08:	4a4f      	ldr	r2, [pc, #316]	; (8009b48 <calibrate.lto_priv.305+0x1180>)
 8009a0a:	000b      	movs	r3, r1
 8009a0c:	2004      	movs	r0, #4
 8009a0e:	493b      	ldr	r1, [pc, #236]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 8009a10:	47a0      	blx	r4
 8009a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a14:	f7fb fe9a 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 8009a18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	931e      	str	r3, [sp, #120]	; 0x78
 8009a1e:	464b      	mov	r3, r9
 8009a20:	930e      	str	r3, [sp, #56]	; 0x38
 8009a22:	21fa      	movs	r1, #250	; 0xfa
 8009a24:	ac80      	add	r4, sp, #512	; 0x200
 8009a26:	0022      	movs	r2, r4
 8009a28:	00c9      	lsls	r1, r1, #3
 8009a2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a2c:	f003 fc24 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8009a30:	9019      	str	r0, [sp, #100]	; 0x64
 8009a32:	1e05      	subs	r5, r0, #0
 8009a34:	d100      	bne.n	8009a38 <calibrate.lto_priv.305+0x1070>
 8009a36:	e643      	b.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 8009a38:	7823      	ldrb	r3, [r4, #0]
 8009a3a:	2b06      	cmp	r3, #6
 8009a3c:	d000      	beq.n	8009a40 <calibrate.lto_priv.305+0x1078>
 8009a3e:	e63f      	b.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 8009a40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a42:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d300      	bcc.n	8009a4a <calibrate.lto_priv.305+0x1082>
 8009a48:	e0f6      	b.n	8009c38 <calibrate.lto_priv.305+0x1270>
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 8009a4c:	4a3f      	ldr	r2, [pc, #252]	; (8009b4c <calibrate.lto_priv.305+0x1184>)
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	492a      	ldr	r1, [pc, #168]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 8009a52:	2000      	movs	r0, #0
 8009a54:	4798      	blx	r3
 8009a56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a58:	f003 fcc0 	bl	800d3dc <acc_sensor_protocol_r2_stop.constprop.25>
 8009a5c:	e630      	b.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 8009a5e:	2a03      	cmp	r2, #3
 8009a60:	d904      	bls.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a64:	4a3a      	ldr	r2, [pc, #232]	; (8009b50 <calibrate.lto_priv.305+0x1188>)
 8009a66:	4925      	ldr	r1, [pc, #148]	; (8009afc <calibrate.lto_priv.305+0x1134>)
 8009a68:	2004      	movs	r0, #4
 8009a6a:	4798      	blx	r3
 8009a6c:	2700      	movs	r7, #0
 8009a6e:	464b      	mov	r3, r9
 8009a70:	003e      	movs	r6, r7
 8009a72:	930e      	str	r3, [sp, #56]	; 0x38
 8009a74:	003d      	movs	r5, r7
 8009a76:	e786      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009a78:	0025      	movs	r5, r4
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8009a7e:	940e      	str	r4, [sp, #56]	; 0x38
 8009a80:	191b      	adds	r3, r3, r4
 8009a82:	882a      	ldrh	r2, [r5, #0]
 8009a84:	3502      	adds	r5, #2
 8009a86:	1880      	adds	r0, r0, r2
 8009a88:	42ab      	cmp	r3, r5
 8009a8a:	d1fa      	bne.n	8009a82 <calibrate.lto_priv.305+0x10ba>
 8009a8c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009a8e:	f005 faaf 	bl	800eff0 <__udivsi3>
 8009a92:	0022      	movs	r2, r4
 8009a94:	b280      	uxth	r0, r0
 8009a96:	8813      	ldrh	r3, [r2, #0]
 8009a98:	4283      	cmp	r3, r0
 8009a9a:	d92b      	bls.n	8009af4 <calibrate.lto_priv.305+0x112c>
 8009a9c:	1a1b      	subs	r3, r3, r0
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	8013      	strh	r3, [r2, #0]
 8009aa2:	3202      	adds	r2, #2
 8009aa4:	4295      	cmp	r5, r2
 8009aa6:	d1f6      	bne.n	8009a96 <calibrate.lto_priv.305+0x10ce>
 8009aa8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009aaa:	0027      	movs	r7, r4
 8009aac:	469c      	mov	ip, r3
 8009aae:	44a4      	add	ip, r4
 8009ab0:	4663      	mov	r3, ip
 8009ab2:	46a0      	mov	r8, r4
 8009ab4:	9335      	str	r3, [sp, #212]	; 0xd4
 8009ab6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ab8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009aba:	931e      	str	r3, [sp, #120]	; 0x78
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	d14d      	bne.n	8009b5c <calibrate.lto_priv.305+0x1194>
 8009ac0:	0023      	movs	r3, r4
 8009ac2:	0028      	movs	r0, r5
 8009ac4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d168      	bne.n	8009b9c <calibrate.lto_priv.305+0x11d4>
 8009aca:	2103      	movs	r1, #3
 8009acc:	f005 fa90 	bl	800eff0 <__udivsi3>
 8009ad0:	0025      	movs	r5, r4
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	b280      	uxth	r0, r0
 8009ad6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d867      	bhi.n	8009bac <calibrate.lto_priv.305+0x11e4>
 8009adc:	0013      	movs	r3, r2
 8009ade:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d300      	bcc.n	8009ae6 <calibrate.lto_priv.305+0x111e>
 8009ae4:	e081      	b.n	8009bea <calibrate.lto_priv.305+0x1222>
 8009ae6:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <calibrate.lto_priv.305+0x1140>)
 8009ae8:	4a1a      	ldr	r2, [pc, #104]	; (8009b54 <calibrate.lto_priv.305+0x118c>)
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	491a      	ldr	r1, [pc, #104]	; (8009b58 <calibrate.lto_priv.305+0x1190>)
 8009aee:	2000      	movs	r0, #0
 8009af0:	4798      	blx	r3
 8009af2:	e7bb      	b.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009af4:	1ac3      	subs	r3, r0, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	e7d2      	b.n	8009aa0 <calibrate.lto_priv.305+0x10d8>
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	0801d688 	.word	0x0801d688
 8009b00:	0801da64 	.word	0x0801da64
 8009b04:	402ca8ad 	.word	0x402ca8ad
 8009b08:	200002b0 	.word	0x200002b0
 8009b0c:	0801dab4 	.word	0x0801dab4
 8009b10:	08015bdc 	.word	0x08015bdc
 8009b14:	08015c5c 	.word	0x08015c5c
 8009b18:	3f99999a 	.word	0x3f99999a
 8009b1c:	447a0000 	.word	0x447a0000
 8009b20:	0801d998 	.word	0x0801d998
 8009b24:	0801db30 	.word	0x0801db30
 8009b28:	0801db3e 	.word	0x0801db3e
 8009b2c:	fffffcf4 	.word	0xfffffcf4
 8009b30:	0801db4c 	.word	0x0801db4c
 8009b34:	0801db7a 	.word	0x0801db7a
 8009b38:	0801dbcc 	.word	0x0801dbcc
 8009b3c:	0801da82 	.word	0x0801da82
 8009b40:	0801dad4 	.word	0x0801dad4
 8009b44:	0801dafc 	.word	0x0801dafc
 8009b48:	0801db8e 	.word	0x0801db8e
 8009b4c:	0801d754 	.word	0x0801d754
 8009b50:	0801dbb5 	.word	0x0801dbb5
 8009b54:	0801dc73 	.word	0x0801dc73
 8009b58:	0801dc56 	.word	0x0801dc56
 8009b5c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b5e:	0058      	lsls	r0, r3, #1
 8009b60:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009b62:	1940      	adds	r0, r0, r5
 8009b64:	1bd9      	subs	r1, r3, r7
 8009b66:	f005 fa43 	bl	800eff0 <__udivsi3>
 8009b6a:	1e06      	subs	r6, r0, #0
 8009b6c:	d014      	beq.n	8009b98 <calibrate.lto_priv.305+0x11d0>
 8009b6e:	0042      	lsls	r2, r0, #1
 8009b70:	4643      	mov	r3, r8
 8009b72:	2000      	movs	r0, #0
 8009b74:	4442      	add	r2, r8
 8009b76:	8819      	ldrh	r1, [r3, #0]
 8009b78:	3302      	adds	r3, #2
 8009b7a:	1840      	adds	r0, r0, r1
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1fa      	bne.n	8009b76 <calibrate.lto_priv.305+0x11ae>
 8009b80:	0031      	movs	r1, r6
 8009b82:	f005 fa35 	bl	800eff0 <__udivsi3>
 8009b86:	8038      	strh	r0, [r7, #0]
 8009b88:	0073      	lsls	r3, r6, #1
 8009b8a:	4498      	add	r8, r3
 8009b8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009b8e:	3d01      	subs	r5, #1
 8009b90:	1b9b      	subs	r3, r3, r6
 8009b92:	931e      	str	r3, [sp, #120]	; 0x78
 8009b94:	3702      	adds	r7, #2
 8009b96:	e791      	b.n	8009abc <calibrate.lto_priv.305+0x10f4>
 8009b98:	8038      	strh	r0, [r7, #0]
 8009b9a:	e7f5      	b.n	8009b88 <calibrate.lto_priv.305+0x11c0>
 8009b9c:	8819      	ldrh	r1, [r3, #0]
 8009b9e:	1c0a      	adds	r2, r1, #0
 8009ba0:	4281      	cmp	r1, r0
 8009ba2:	d200      	bcs.n	8009ba6 <calibrate.lto_priv.305+0x11de>
 8009ba4:	1c02      	adds	r2, r0, #0
 8009ba6:	b290      	uxth	r0, r2
 8009ba8:	3302      	adds	r3, #2
 8009baa:	e78b      	b.n	8009ac4 <calibrate.lto_priv.305+0x10fc>
 8009bac:	882a      	ldrh	r2, [r5, #0]
 8009bae:	88a9      	ldrh	r1, [r5, #4]
 8009bb0:	428a      	cmp	r2, r1
 8009bb2:	d802      	bhi.n	8009bba <calibrate.lto_priv.305+0x11f2>
 8009bb4:	0016      	movs	r6, r2
 8009bb6:	000a      	movs	r2, r1
 8009bb8:	0031      	movs	r1, r6
 8009bba:	4290      	cmp	r0, r2
 8009bbc:	d212      	bcs.n	8009be4 <calibrate.lto_priv.305+0x121c>
 8009bbe:	00ce      	lsls	r6, r1, #3
 8009bc0:	42b2      	cmp	r2, r6
 8009bc2:	d90f      	bls.n	8009be4 <calibrate.lto_priv.305+0x121c>
 8009bc4:	4c90      	ldr	r4, [pc, #576]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009bc6:	0025      	movs	r5, r4
 8009bc8:	3530      	adds	r5, #48	; 0x30
 8009bca:	782d      	ldrb	r5, [r5, #0]
 8009bcc:	2d03      	cmp	r5, #3
 8009bce:	d800      	bhi.n	8009bd2 <calibrate.lto_priv.305+0x120a>
 8009bd0:	e74c      	b.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009bd2:	9002      	str	r0, [sp, #8]
 8009bd4:	9101      	str	r1, [sp, #4]
 8009bd6:	9200      	str	r2, [sp, #0]
 8009bd8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009bda:	4a8c      	ldr	r2, [pc, #560]	; (8009e0c <calibrate.lto_priv.305+0x1444>)
 8009bdc:	498c      	ldr	r1, [pc, #560]	; (8009e10 <calibrate.lto_priv.305+0x1448>)
 8009bde:	2004      	movs	r0, #4
 8009be0:	47a0      	blx	r4
 8009be2:	e743      	b.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009be4:	3301      	adds	r3, #1
 8009be6:	3502      	adds	r5, #2
 8009be8:	e775      	b.n	8009ad6 <calibrate.lto_priv.305+0x110e>
 8009bea:	0022      	movs	r2, r4
 8009bec:	2300      	movs	r3, #0
 8009bee:	3210      	adds	r2, #16
 8009bf0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bf2:	8809      	ldrh	r1, [r1, #0]
 8009bf4:	185b      	adds	r3, r3, r1
 8009bf6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009bf8:	3102      	adds	r1, #2
 8009bfa:	910e      	str	r1, [sp, #56]	; 0x38
 8009bfc:	428a      	cmp	r2, r1
 8009bfe:	d1f7      	bne.n	8009bf0 <calibrate.lto_priv.305+0x1228>
 8009c00:	2200      	movs	r2, #0
 8009c02:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8009c04:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8009c06:	4288      	cmp	r0, r1
 8009c08:	d811      	bhi.n	8009c2e <calibrate.lto_priv.305+0x1266>
 8009c0a:	2105      	movs	r1, #5
 8009c0c:	4359      	muls	r1, r3
 8009c0e:	428a      	cmp	r2, r1
 8009c10:	d271      	bcs.n	8009cf6 <calibrate.lto_priv.305+0x132e>
 8009c12:	497d      	ldr	r1, [pc, #500]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009c14:	0008      	movs	r0, r1
 8009c16:	3030      	adds	r0, #48	; 0x30
 8009c18:	7800      	ldrb	r0, [r0, #0]
 8009c1a:	2803      	cmp	r0, #3
 8009c1c:	d800      	bhi.n	8009c20 <calibrate.lto_priv.305+0x1258>
 8009c1e:	e725      	b.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009c20:	9200      	str	r2, [sp, #0]
 8009c22:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009c24:	4a7b      	ldr	r2, [pc, #492]	; (8009e14 <calibrate.lto_priv.305+0x144c>)
 8009c26:	497a      	ldr	r1, [pc, #488]	; (8009e10 <calibrate.lto_priv.305+0x1448>)
 8009c28:	2004      	movs	r0, #4
 8009c2a:	47a0      	blx	r4
 8009c2c:	e71e      	b.n	8009a6c <calibrate.lto_priv.305+0x10a4>
 8009c2e:	0048      	lsls	r0, r1, #1
 8009c30:	5a20      	ldrh	r0, [r4, r0]
 8009c32:	3101      	adds	r1, #1
 8009c34:	1812      	adds	r2, r2, r0
 8009c36:	e7e5      	b.n	8009c04 <calibrate.lto_priv.305+0x123c>
 8009c38:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8009c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3e:	f7fb fd01 	bl	8005644 <acc_sensor_protocol_r2_transfer_data>
 8009c42:	4680      	mov	r8, r0
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d100      	bne.n	8009c4a <calibrate.lto_priv.305+0x1282>
 8009c48:	e53a      	b.n	80096c0 <calibrate.lto_priv.305+0xcf8>
 8009c4a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8009c4c:	005c      	lsls	r4, r3, #1
 8009c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c50:	4444      	add	r4, r8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01f      	beq.n	8009c96 <calibrate.lto_priv.305+0x12ce>
 8009c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c5a:	18e6      	adds	r6, r4, r3
 8009c5c:	0032      	movs	r2, r6
 8009c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c60:	4650      	mov	r0, sl
 8009c62:	f004 f961 	bl	800df28 <acc_probes_execute_uint16>
 8009c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c68:	0030      	movs	r0, r6
 8009c6a:	f7fb fc11 	bl	8005490 <acc_alg_cca_calculate>
 8009c6e:	496a      	ldr	r1, [pc, #424]	; (8009e18 <calibrate.lto_priv.305+0x1450>)
 8009c70:	9016      	str	r0, [sp, #88]	; 0x58
 8009c72:	2601      	movs	r6, #1
 8009c74:	f005 fb96 	bl	800f3a4 <__aeabi_fcmpgt>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	d100      	bne.n	8009c7e <calibrate.lto_priv.305+0x12b6>
 8009c7c:	1c06      	adds	r6, r0, #0
 8009c7e:	b2f3      	uxtb	r3, r6
 8009c80:	4965      	ldr	r1, [pc, #404]	; (8009e18 <calibrate.lto_priv.305+0x1450>)
 8009c82:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009c84:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c86:	f005 fb8d 	bl	800f3a4 <__aeabi_fcmpgt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d124      	bne.n	8009cd8 <calibrate.lto_priv.305+0x1310>
 8009c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d126      	bne.n	8009ce2 <calibrate.lto_priv.305+0x131a>
 8009c94:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c96:	4a61      	ldr	r2, [pc, #388]	; (8009e1c <calibrate.lto_priv.305+0x1454>)
 8009c98:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009c9a:	0020      	movs	r0, r4
 8009c9c:	f002 fff0 	bl	800cc80 <acc_alg_basic_saturation_check_u16>
 8009ca0:	1e06      	subs	r6, r0, #0
 8009ca2:	d000      	beq.n	8009ca6 <calibrate.lto_priv.305+0x12de>
 8009ca4:	e58b      	b.n	80097be <calibrate.lto_priv.305+0xdf6>
 8009ca6:	4a58      	ldr	r2, [pc, #352]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009ca8:	4649      	mov	r1, r9
 8009caa:	0013      	movs	r3, r2
 8009cac:	3330      	adds	r3, #48	; 0x30
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	2900      	cmp	r1, #0
 8009cb2:	d000      	beq.n	8009cb6 <calibrate.lto_priv.305+0x12ee>
 8009cb4:	e656      	b.n	8009964 <calibrate.lto_priv.305+0xf9c>
 8009cb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	d100      	bne.n	8009cbe <calibrate.lto_priv.305+0x12f6>
 8009cbc:	e578      	b.n	80097b0 <calibrate.lto_priv.305+0xde8>
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d904      	bls.n	8009ccc <calibrate.lto_priv.305+0x1304>
 8009cc2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009cc4:	4956      	ldr	r1, [pc, #344]	; (8009e20 <calibrate.lto_priv.305+0x1458>)
 8009cc6:	4a57      	ldr	r2, [pc, #348]	; (8009e24 <calibrate.lto_priv.305+0x145c>)
 8009cc8:	2004      	movs	r0, #4
 8009cca:	4798      	blx	r3
 8009ccc:	464b      	mov	r3, r9
 8009cce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd2:	230f      	movs	r3, #15
 8009cd4:	4699      	mov	r9, r3
 8009cd6:	e656      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9332      	str	r3, [sp, #200]	; 0xc8
 8009cdc:	001e      	movs	r6, r3
 8009cde:	001d      	movs	r5, r3
 8009ce0:	e651      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009ce2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009ce4:	9017      	str	r0, [sp, #92]	; 0x5c
 8009ce6:	9014      	str	r0, [sp, #80]	; 0x50
 8009ce8:	0005      	movs	r5, r0
 8009cea:	e64c      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009cec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009cf0:	46b1      	mov	r9, r6
 8009cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cf4:	e647      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	2500      	movs	r5, #0
 8009cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8009cfc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009cfe:	002e      	movs	r6, r5
 8009d00:	e641      	b.n	8009986 <calibrate.lto_priv.305+0xfbe>
 8009d02:	2f00      	cmp	r7, #0
 8009d04:	d100      	bne.n	8009d08 <calibrate.lto_priv.305+0x1340>
 8009d06:	e4fb      	b.n	8009700 <calibrate.lto_priv.305+0xd38>
 8009d08:	4b3f      	ldr	r3, [pc, #252]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009d0a:	001a      	movs	r2, r3
 8009d0c:	3230      	adds	r2, #48	; 0x30
 8009d0e:	7812      	ldrb	r2, [r2, #0]
 8009d10:	2a01      	cmp	r2, #1
 8009d12:	d917      	bls.n	8009d44 <calibrate.lto_priv.305+0x137c>
 8009d14:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009d16:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009d18:	4b43      	ldr	r3, [pc, #268]	; (8009e28 <calibrate.lto_priv.305+0x1460>)
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d000      	beq.n	8009d20 <calibrate.lto_priv.305+0x1358>
 8009d1e:	4b43      	ldr	r3, [pc, #268]	; (8009e2c <calibrate.lto_priv.305+0x1464>)
 8009d20:	9306      	str	r3, [sp, #24]
 8009d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d24:	4a42      	ldr	r2, [pc, #264]	; (8009e30 <calibrate.lto_priv.305+0x1468>)
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8009d2a:	493d      	ldr	r1, [pc, #244]	; (8009e20 <calibrate.lto_priv.305+0x1458>)
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009d30:	2002      	movs	r0, #2
 8009d32:	9303      	str	r3, [sp, #12]
 8009d34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d36:	9302      	str	r3, [sp, #8]
 8009d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d3e:	9300      	str	r3, [sp, #0]
 8009d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d42:	47a0      	blx	r4
 8009d44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d46:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009d48:	9239      	str	r2, [sp, #228]	; 0xe4
 8009d4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009d4c:	923e      	str	r2, [sp, #248]	; 0xf8
 8009d4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d50:	923d      	str	r2, [sp, #244]	; 0xf4
 8009d52:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009d54:	923c      	str	r2, [sp, #240]	; 0xf0
 8009d56:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d58:	922d      	str	r2, [sp, #180]	; 0xb4
 8009d5a:	e012      	b.n	8009d82 <calibrate.lto_priv.305+0x13ba>
 8009d5c:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009d5e:	001a      	movs	r2, r3
 8009d60:	3230      	adds	r2, #48	; 0x30
 8009d62:	7812      	ldrb	r2, [r2, #0]
 8009d64:	2a03      	cmp	r2, #3
 8009d66:	d801      	bhi.n	8009d6c <calibrate.lto_priv.305+0x13a4>
 8009d68:	f7ff f9b3 	bl	80090d2 <calibrate.lto_priv.305+0x70a>
 8009d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d6e:	492c      	ldr	r1, [pc, #176]	; (8009e20 <calibrate.lto_priv.305+0x1458>)
 8009d70:	9200      	str	r2, [sp, #0]
 8009d72:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009d74:	4a2f      	ldr	r2, [pc, #188]	; (8009e34 <calibrate.lto_priv.305+0x146c>)
 8009d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d78:	2004      	movs	r0, #4
 8009d7a:	47a0      	blx	r4
 8009d7c:	f7ff f9a9 	bl	80090d2 <calibrate.lto_priv.305+0x70a>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2400      	movs	r4, #0
 8009d84:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009d86:	42a2      	cmp	r2, r4
 8009d88:	d000      	beq.n	8009d8c <calibrate.lto_priv.305+0x13c4>
 8009d8a:	001c      	movs	r4, r3
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	401c      	ands	r4, r3
 8009d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <calibrate.lto_priv.305+0x13d8>
 8009d96:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009d98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009d9e:	605a      	str	r2, [r3, #4]
 8009da0:	2c00      	cmp	r4, #0
 8009da2:	d101      	bne.n	8009da8 <calibrate.lto_priv.305+0x13e0>
 8009da4:	f7fe fe35 	bl	8008a12 <calibrate.lto_priv.305+0x4a>
 8009da8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009daa:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009dac:	4d16      	ldr	r5, [pc, #88]	; (8009e08 <calibrate.lto_priv.305+0x1440>)
 8009dae:	8093      	strh	r3, [r2, #4]
 8009db0:	ab46      	add	r3, sp, #280	; 0x118
 8009db2:	791b      	ldrb	r3, [r3, #4]
 8009db4:	80d3      	strh	r3, [r2, #6]
 8009db6:	0013      	movs	r3, r2
 8009db8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8009dba:	811a      	strh	r2, [r3, #8]
 8009dbc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8009dbe:	815a      	strh	r2, [r3, #10]
 8009dc0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009dc2:	819a      	strh	r2, [r3, #12]
 8009dc4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8009dc6:	81da      	strh	r2, [r3, #14]
 8009dc8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009dca:	821a      	strh	r2, [r3, #16]
 8009dcc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009dce:	825a      	strh	r2, [r3, #18]
 8009dd0:	2306      	movs	r3, #6
 8009dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	002b      	movs	r3, r5
 8009dd8:	3330      	adds	r3, #48	; 0x30
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d904      	bls.n	8009dea <calibrate.lto_priv.305+0x1422>
 8009de0:	4a15      	ldr	r2, [pc, #84]	; (8009e38 <calibrate.lto_priv.305+0x1470>)
 8009de2:	4916      	ldr	r1, [pc, #88]	; (8009e3c <calibrate.lto_priv.305+0x1474>)
 8009de4:	2004      	movs	r0, #4
 8009de6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009de8:	4798      	blx	r3
 8009dea:	002b      	movs	r3, r5
 8009dec:	3330      	adds	r3, #48	; 0x30
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d801      	bhi.n	8009df8 <calibrate.lto_priv.305+0x1430>
 8009df4:	f7fe fe0e 	bl	8008a14 <calibrate.lto_priv.305+0x4c>
 8009df8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009dfa:	4a11      	ldr	r2, [pc, #68]	; (8009e40 <calibrate.lto_priv.305+0x1478>)
 8009dfc:	490f      	ldr	r1, [pc, #60]	; (8009e3c <calibrate.lto_priv.305+0x1474>)
 8009dfe:	2002      	movs	r0, #2
 8009e00:	4798      	blx	r3
 8009e02:	f7fe fe07 	bl	8008a14 <calibrate.lto_priv.305+0x4c>
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	200002b0 	.word	0x200002b0
 8009e0c:	0801dbfa 	.word	0x0801dbfa
 8009e10:	0801dc56 	.word	0x0801dc56
 8009e14:	0801dc83 	.word	0x0801dc83
 8009e18:	42640000 	.word	0x42640000
 8009e1c:	42172c98 	.word	0x42172c98
 8009e20:	0801d688 	.word	0x0801d688
 8009e24:	0801da3d 	.word	0x0801da3d
 8009e28:	0801d665 	.word	0x0801d665
 8009e2c:	0801d660 	.word	0x0801d660
 8009e30:	0801dd21 	.word	0x0801dd21
 8009e34:	0801dced 	.word	0x0801dced
 8009e38:	0801dd89 	.word	0x0801dd89
 8009e3c:	0801cf9c 	.word	0x0801cf9c
 8009e40:	0801d16c 	.word	0x0801d16c

08009e44 <acc_sensor_r2_conf_write_instr>:
 8009e44:	23a0      	movs	r3, #160	; 0xa0
 8009e46:	b530      	push	{r4, r5, lr}
 8009e48:	01db      	lsls	r3, r3, #7
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	4319      	orrs	r1, r3
 8009e4e:	ac02      	add	r4, sp, #8
 8009e50:	8021      	strh	r1, [r4, #0]
 8009e52:	210a      	movs	r1, #10
 8009e54:	0005      	movs	r5, r0
 8009e56:	9201      	str	r2, [sp, #4]
 8009e58:	4469      	add	r1, sp
 8009e5a:	a801      	add	r0, sp, #4
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f002 fdf9 	bl	800ca54 <acc_confprogram_copy>
 8009e62:	2300      	movs	r3, #0
 8009e64:	2203      	movs	r2, #3
 8009e66:	0021      	movs	r1, r4
 8009e68:	0028      	movs	r0, r5
 8009e6a:	f7fc fa97 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 8009e6e:	b005      	add	sp, #20
 8009e70:	bd30      	pop	{r4, r5, pc}
 8009e72:	46c0      	nop			; (mov r8, r8)

08009e74 <HAL_RTC_WaitForSynchro.constprop.121>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009e74:	20a0      	movs	r0, #160	; 0xa0
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
 8009e76:	b530      	push	{r4, r5, lr}
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e78:	25fa      	movs	r5, #250	; 0xfa
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009e7a:	4a09      	ldr	r2, [pc, #36]	; (8009ea0 <HAL_RTC_WaitForSynchro.constprop.121+0x2c>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e7c:	00ad      	lsls	r5, r5, #2
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009e7e:	6813      	ldr	r3, [r2, #0]
 8009e80:	68d9      	ldr	r1, [r3, #12]
 8009e82:	4381      	bics	r1, r0
 8009e84:	60d9      	str	r1, [r3, #12]
  return uwTick;
 8009e86:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009e88:	3880      	subs	r0, #128	; 0x80
 8009e8a:	68d9      	ldr	r1, [r3, #12]
 8009e8c:	4201      	tst	r1, r0
 8009e8e:	d001      	beq.n	8009e94 <HAL_RTC_WaitForSynchro.constprop.121+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009e90:	2000      	movs	r0, #0
}
 8009e92:	bd30      	pop	{r4, r5, pc}
 8009e94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e96:	1b09      	subs	r1, r1, r4
 8009e98:	42a9      	cmp	r1, r5
 8009e9a:	d9f6      	bls.n	8009e8a <HAL_RTC_WaitForSynchro.constprop.121+0x16>
      return HAL_TIMEOUT;
 8009e9c:	2003      	movs	r0, #3
 8009e9e:	e7f8      	b.n	8009e92 <HAL_RTC_WaitForSynchro.constprop.121+0x1e>
 8009ea0:	20000280 	.word	0x20000280

08009ea4 <UART_WaitOnFlagUntilTimeout.constprop.108>:
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009ea4:	b570      	push	{r4, r5, r6, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea6:	6804      	ldr	r4, [r0, #0]
 8009ea8:	4e11      	ldr	r6, [pc, #68]	; (8009ef0 <UART_WaitOnFlagUntilTimeout.constprop.108+0x4c>)
 8009eaa:	69e5      	ldr	r5, [r4, #28]
 8009eac:	400d      	ands	r5, r1
 8009eae:	42a9      	cmp	r1, r5
 8009eb0:	d101      	bne.n	8009eb6 <UART_WaitOnFlagUntilTimeout.constprop.108+0x12>
  return HAL_OK;
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e017      	b.n	8009ee6 <UART_WaitOnFlagUntilTimeout.constprop.108+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009eb6:	1c5d      	adds	r5, r3, #1
 8009eb8:	d0f7      	beq.n	8009eaa <UART_WaitOnFlagUntilTimeout.constprop.108+0x6>
 8009eba:	6af5      	ldr	r5, [r6, #44]	; 0x2c
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ebc:	1aad      	subs	r5, r5, r2
 8009ebe:	42ab      	cmp	r3, r5
 8009ec0:	d212      	bcs.n	8009ee8 <UART_WaitOnFlagUntilTimeout.constprop.108+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	4a0b      	ldr	r2, [pc, #44]	; (8009ef4 <UART_WaitOnFlagUntilTimeout.constprop.108+0x50>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	32a3      	adds	r2, #163	; 0xa3
 8009ece:	32ff      	adds	r2, #255	; 0xff
 8009ed0:	4393      	bics	r3, r2
 8009ed2:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009ed4:	2320      	movs	r3, #32
 8009ed6:	1d02      	adds	r2, r0, #4
 8009ed8:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009eda:	3204      	adds	r2, #4
 8009edc:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8009ede:	2300      	movs	r3, #0
 8009ee0:	307c      	adds	r0, #124	; 0x7c
 8009ee2:	7003      	strb	r3, [r0, #0]
 8009ee4:	2003      	movs	r0, #3
}
 8009ee6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d1de      	bne.n	8009eaa <UART_WaitOnFlagUntilTimeout.constprop.108+0x6>
 8009eec:	e7e9      	b.n	8009ec2 <UART_WaitOnFlagUntilTimeout.constprop.108+0x1e>
 8009eee:	46c0      	nop			; (mov r8, r8)
 8009ef0:	20000280 	.word	0x20000280
 8009ef4:	fffffe5f 	.word	0xfffffe5f

08009ef8 <acc_utils_transfer_buffer_to_uint32.constprop.24>:
 8009ef8:	8803      	ldrh	r3, [r0, #0]
 8009efa:	8842      	ldrh	r2, [r0, #2]
 8009efc:	041b      	lsls	r3, r3, #16
 8009efe:	4313      	orrs	r3, r2
 8009f00:	600b      	str	r3, [r1, #0]
 8009f02:	4770      	bx	lr

08009f04 <acc_confprogram_modify_runif_sensor.constprop.19>:
 8009f04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f06:	0015      	movs	r5, r2
 8009f08:	aa08      	add	r2, sp, #32
 8009f0a:	0006      	movs	r6, r0
 8009f0c:	7810      	ldrb	r0, [r2, #0]
 8009f0e:	00aa      	lsls	r2, r5, #2
 8009f10:	5854      	ldr	r4, [r2, r1]
 8009f12:	220f      	movs	r2, #15
 8009f14:	4394      	bics	r4, r2
 8009f16:	4a0f      	ldr	r2, [pc, #60]	; (8009f54 <acc_confprogram_modify_runif_sensor.constprop.19+0x50>)
 8009f18:	0011      	movs	r1, r2
 8009f1a:	3160      	adds	r1, #96	; 0x60
 8009f1c:	7809      	ldrb	r1, [r1, #0]
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d00f      	beq.n	8009f42 <acc_confprogram_modify_runif_sensor.constprop.19+0x3e>
 8009f22:	431c      	orrs	r4, r3
 8009f24:	2903      	cmp	r1, #3
 8009f26:	d906      	bls.n	8009f36 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009f2c:	002b      	movs	r3, r5
 8009f2e:	4a0a      	ldr	r2, [pc, #40]	; (8009f58 <acc_confprogram_modify_runif_sensor.constprop.19+0x54>)
 8009f30:	490a      	ldr	r1, [pc, #40]	; (8009f5c <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009f32:	2004      	movs	r0, #4
 8009f34:	47b8      	blx	r7
 8009f36:	0029      	movs	r1, r5
 8009f38:	0030      	movs	r0, r6
 8009f3a:	0022      	movs	r2, r4
 8009f3c:	f7ff ff82 	bl	8009e44 <acc_sensor_r2_conf_write_instr>
 8009f40:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009f42:	2903      	cmp	r1, #3
 8009f44:	d9f7      	bls.n	8009f36 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009f46:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009f48:	002b      	movs	r3, r5
 8009f4a:	4a05      	ldr	r2, [pc, #20]	; (8009f60 <acc_confprogram_modify_runif_sensor.constprop.19+0x5c>)
 8009f4c:	4903      	ldr	r1, [pc, #12]	; (8009f5c <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009f4e:	2004      	movs	r0, #4
 8009f50:	47b8      	blx	r7
 8009f52:	e7f0      	b.n	8009f36 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009f54:	20000280 	.word	0x20000280
 8009f58:	0801ddca 	.word	0x0801ddca
 8009f5c:	0801d748 	.word	0x0801d748
 8009f60:	0801de00 	.word	0x0801de00

08009f64 <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f64:	1d03      	adds	r3, r0, #4
 8009f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009f68:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f6a:	2b21      	cmp	r3, #33	; 0x21
 8009f6c:	d113      	bne.n	8009f96 <UART_TxISR_16BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f6e:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009f70:	0005      	movs	r5, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f72:	2680      	movs	r6, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f74:	336a      	adds	r3, #106	; 0x6a
 8009f76:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009f78:	3556      	adds	r5, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f7a:	2a00      	cmp	r2, #0
 8009f7c:	d00b      	beq.n	8009f96 <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009f7e:	8829      	ldrh	r1, [r5, #0]
 8009f80:	6803      	ldr	r3, [r0, #0]
 8009f82:	2900      	cmp	r1, #0
 8009f84:	d108      	bne.n	8009f98 <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	490c      	ldr	r1, [pc, #48]	; (8009fbc <UART_TxISR_16BIT_FIFOEN+0x58>)
 8009f8a:	400a      	ands	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	6819      	ldr	r1, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	601a      	str	r2, [r3, #0]
}
 8009f96:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f98:	69d9      	ldr	r1, [r3, #28]
 8009f9a:	4231      	tst	r1, r6
 8009f9c:	d00a      	beq.n	8009fb4 <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009f9e:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009fa0:	8821      	ldrh	r1, [r4, #0]
        huart->pTxBuffPtr += 2U;
 8009fa2:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009fa4:	05c9      	lsls	r1, r1, #23
 8009fa6:	0dc9      	lsrs	r1, r1, #23
 8009fa8:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009faa:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009fac:	882b      	ldrh	r3, [r5, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	802b      	strh	r3, [r5, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fb4:	3a01      	subs	r2, #1
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	e7df      	b.n	8009f7a <UART_TxISR_16BIT_FIFOEN+0x16>
 8009fba:	46c0      	nop			; (mov r8, r8)
 8009fbc:	ff7fffff 	.word	0xff7fffff

08009fc0 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc0:	1d03      	adds	r3, r0, #4
 8009fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009fc4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fc6:	2b21      	cmp	r3, #33	; 0x21
 8009fc8:	d113      	bne.n	8009ff2 <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fca:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009fcc:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009fce:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fd0:	336a      	adds	r3, #106	; 0x6a
 8009fd2:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009fd4:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	d00b      	beq.n	8009ff2 <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009fda:	8821      	ldrh	r1, [r4, #0]
 8009fdc:	6803      	ldr	r3, [r0, #0]
 8009fde:	2900      	cmp	r1, #0
 8009fe0:	d108      	bne.n	8009ff4 <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	490b      	ldr	r1, [pc, #44]	; (800a014 <UART_TxISR_8BIT_FIFOEN+0x54>)
 8009fe6:	400a      	ands	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fea:	2240      	movs	r2, #64	; 0x40
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	601a      	str	r2, [r3, #0]
}
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009ff4:	69d9      	ldr	r1, [r3, #28]
 8009ff6:	4229      	tst	r1, r5
 8009ff8:	d008      	beq.n	800a00c <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ffa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009ffc:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8009ffe:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a000:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a002:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800a004:	8823      	ldrh	r3, [r4, #0]
 800a006:	3b01      	subs	r3, #1
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a00c:	3a01      	subs	r2, #1
 800a00e:	b292      	uxth	r2, r2
 800a010:	e7e1      	b.n	8009fd6 <UART_TxISR_8BIT_FIFOEN+0x16>
 800a012:	46c0      	nop			; (mov r8, r8)
 800a014:	ff7fffff 	.word	0xff7fffff

0800a018 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a018:	1d03      	adds	r3, r0, #4
 800a01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a01c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a01e:	2b21      	cmp	r3, #33	; 0x21
 800a020:	d10d      	bne.n	800a03e <UART_TxISR_16BIT+0x26>
    if (huart->TxXferCount == 0U)
 800a022:	0004      	movs	r4, r0
 800a024:	3456      	adds	r4, #86	; 0x56
 800a026:	8822      	ldrh	r2, [r4, #0]
 800a028:	6803      	ldr	r3, [r0, #0]
 800a02a:	2a00      	cmp	r2, #0
 800a02c:	d108      	bne.n	800a040 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a02e:	2180      	movs	r1, #128	; 0x80
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	438a      	bics	r2, r1
 800a034:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a036:	2240      	movs	r2, #64	; 0x40
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	430a      	orrs	r2, r1
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a040:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a042:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 800a044:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a046:	05d2      	lsls	r2, r2, #23
 800a048:	0dd2      	lsrs	r2, r2, #23
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a04c:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800a04e:	8823      	ldrh	r3, [r4, #0]
 800a050:	3b01      	subs	r3, #1
 800a052:	b29b      	uxth	r3, r3
 800a054:	8023      	strh	r3, [r4, #0]
 800a056:	e7f2      	b.n	800a03e <UART_TxISR_16BIT+0x26>

0800a058 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a058:	1d03      	adds	r3, r0, #4
 800a05a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a05c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a05e:	2b21      	cmp	r3, #33	; 0x21
 800a060:	d10d      	bne.n	800a07e <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 800a062:	0001      	movs	r1, r0
 800a064:	3156      	adds	r1, #86	; 0x56
 800a066:	880a      	ldrh	r2, [r1, #0]
 800a068:	6803      	ldr	r3, [r0, #0]
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	d108      	bne.n	800a080 <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a06e:	2180      	movs	r1, #128	; 0x80
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	438a      	bics	r2, r1
 800a074:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a076:	2240      	movs	r2, #64	; 0x40
 800a078:	6819      	ldr	r1, [r3, #0]
 800a07a:	430a      	orrs	r2, r1
 800a07c:	601a      	str	r2, [r3, #0]
}
 800a07e:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a080:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a082:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 800a084:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a086:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a088:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800a08a:	880b      	ldrh	r3, [r1, #0]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	b29b      	uxth	r3, r3
 800a090:	800b      	strh	r3, [r1, #0]
 800a092:	e7f4      	b.n	800a07e <UART_TxISR_8BIT+0x26>

0800a094 <UART_DMAAbortOnError.lto_priv.680>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a094:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a096:	2200      	movs	r2, #0
 800a098:	0019      	movs	r1, r3
  huart->TxXferCount = 0U;
 800a09a:	3356      	adds	r3, #86	; 0x56
  huart->RxXferCount = 0U;
 800a09c:	315e      	adds	r1, #94	; 0x5e
 800a09e:	800a      	strh	r2, [r1, #0]
  huart->TxXferCount = 0U;
 800a0a0:	801a      	strh	r2, [r3, #0]
}
 800a0a2:	4770      	bx	lr

0800a0a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a0a4:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 800a0a6:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a0a8:	07ca      	lsls	r2, r1, #31
 800a0aa:	d508      	bpl.n	800a0be <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0ac:	0003      	movs	r3, r0
 800a0ae:	3341      	adds	r3, #65	; 0x41
 800a0b0:	781a      	ldrb	r2, [r3, #0]
 800a0b2:	2328      	movs	r3, #40	; 0x28
 800a0b4:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a0b6:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0b8:	2a28      	cmp	r2, #40	; 0x28
 800a0ba:	d000      	beq.n	800a0be <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0bc:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a0be:	078a      	lsls	r2, r1, #30
 800a0c0:	d508      	bpl.n	800a0d4 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0c2:	0002      	movs	r2, r0
 800a0c4:	2428      	movs	r4, #40	; 0x28
 800a0c6:	3241      	adds	r2, #65	; 0x41
 800a0c8:	7812      	ldrb	r2, [r2, #0]
 800a0ca:	4022      	ands	r2, r4
 800a0cc:	42a2      	cmp	r2, r4
 800a0ce:	d10a      	bne.n	800a0e6 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a0d0:	2244      	movs	r2, #68	; 0x44
 800a0d2:	4313      	orrs	r3, r2
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a0d4:	074a      	lsls	r2, r1, #29
 800a0d6:	d501      	bpl.n	800a0dc <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0d8:	22b8      	movs	r2, #184	; 0xb8
 800a0da:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a0dc:	6801      	ldr	r1, [r0, #0]
 800a0de:	680a      	ldr	r2, [r1, #0]
 800a0e0:	439a      	bics	r2, r3
 800a0e2:	600a      	str	r2, [r1, #0]
}
 800a0e4:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0e6:	22f4      	movs	r2, #244	; 0xf4
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	e7f3      	b.n	800a0d4 <I2C_Disable_IRQ+0x30>

0800a0ec <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a0ec:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a0ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800a0f0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800a0f2:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a0f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0f6:	3341      	adds	r3, #65	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 800a0f8:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a0fa:	781a      	ldrb	r2, [r3, #0]
 800a0fc:	2a60      	cmp	r2, #96	; 0x60
 800a0fe:	d101      	bne.n	800a104 <I2C_DMAAbort+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 800a100:	3a40      	subs	r2, #64	; 0x40
 800a102:	701a      	strb	r2, [r3, #0]
}
 800a104:	4770      	bx	lr

0800a106 <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a106:	6803      	ldr	r3, [r0, #0]
 800a108:	699a      	ldr	r2, [r3, #24]
 800a10a:	0792      	lsls	r2, r2, #30
 800a10c:	d501      	bpl.n	800a112 <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 800a10e:	2200      	movs	r2, #0
 800a110:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a112:	2201      	movs	r2, #1
 800a114:	6999      	ldr	r1, [r3, #24]
 800a116:	4211      	tst	r1, r2
 800a118:	d102      	bne.n	800a120 <I2C_Flush_TXDR+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a11a:	6999      	ldr	r1, [r3, #24]
 800a11c:	430a      	orrs	r2, r1
 800a11e:	619a      	str	r2, [r3, #24]
}
 800a120:	4770      	bx	lr

0800a122 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a122:	4b16      	ldr	r3, [pc, #88]	; (800a17c <I2C_ITListenCplt+0x5a>)
{
 800a124:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a126:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a128:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800a12a:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 800a12c:	6303      	str	r3, [r0, #48]	; 0x30
{
 800a12e:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 800a130:	2020      	movs	r0, #32
 800a132:	3241      	adds	r2, #65	; 0x41
 800a134:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a136:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 800a138:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a13a:	074b      	lsls	r3, r1, #29
 800a13c:	d513      	bpl.n	800a166 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800a146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a148:	3301      	adds	r3, #1
 800a14a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800a14c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800a152:	3b01      	subs	r3, #1
 800a154:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a156:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a158:	3b01      	subs	r3, #1
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a15e:	2304      	movs	r3, #4
 800a160:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a162:	4313      	orrs	r3, r2
 800a164:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a166:	0020      	movs	r0, r4
 800a168:	2107      	movs	r1, #7
 800a16a:	f7ff ff9b 	bl	800a0a4 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a16e:	2210      	movs	r2, #16
 800a170:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2c);
 800a172:	3440      	adds	r4, #64	; 0x40
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a174:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800a176:	2300      	movs	r3, #0
 800a178:	7023      	strb	r3, [r4, #0]
}
 800a17a:	bd10      	pop	{r4, pc}
 800a17c:	ffff0000 	.word	0xffff0000

0800a180 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a180:	0003      	movs	r3, r0
{
 800a182:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a184:	2500      	movs	r5, #0
 800a186:	3342      	adds	r3, #66	; 0x42
 800a188:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a18a:	3b01      	subs	r3, #1
 800a18c:	781a      	ldrb	r2, [r3, #0]
{
 800a18e:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a190:	2a29      	cmp	r2, #41	; 0x29
 800a192:	d109      	bne.n	800a1a8 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a194:	3a01      	subs	r2, #1
 800a196:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a198:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a19a:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a19c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a19e:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a1a0:	f7ff ff80 	bl	800a0a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a1a4:	7025      	strb	r5, [r4, #0]
}
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a1a8:	781a      	ldrb	r2, [r3, #0]
 800a1aa:	2a2a      	cmp	r2, #42	; 0x2a
 800a1ac:	d1fb      	bne.n	800a1a6 <I2C_ITSlaveSeqCplt+0x26>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a1ae:	3a02      	subs	r2, #2
 800a1b0:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a1b2:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a1b4:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a1b6:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a1b8:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a1ba:	f7ff ff73 	bl	800a0a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a1be:	7025      	strb	r5, [r4, #0]
 800a1c0:	e7f1      	b.n	800a1a6 <I2C_ITSlaveSeqCplt+0x26>

0800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask>:
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a1c2:	6803      	ldr	r3, [r0, #0]
{
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a1c8:	b2d8      	uxtb	r0, r3
 800a1ca:	2114      	movs	r1, #20
 800a1cc:	3808      	subs	r0, #8
 800a1ce:	f004 ff0f 	bl	800eff0 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a1d2:	4a07      	ldr	r2, [pc, #28]	; (800a1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>)
 800a1d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1d6:	4694      	mov	ip, r2
 800a1d8:	089b      	lsrs	r3, r3, #2
 800a1da:	4463      	add	r3, ip
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1e0:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>)
 800a1e2:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800a1e4:	231c      	movs	r3, #28
 800a1e6:	4018      	ands	r0, r3
 800a1e8:	3b1b      	subs	r3, #27
 800a1ea:	4083      	lsls	r3, r0
 800a1ec:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800a1ee:	bd10      	pop	{r4, pc}
 800a1f0:	10008200 	.word	0x10008200
 800a1f4:	40020880 	.word	0x40020880

0800a1f8 <HAL_DMA_Init.part.0.constprop.148>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800a1f8:	b570      	push	{r4, r5, r6, lr}
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a1fa:	4b23      	ldr	r3, [pc, #140]	; (800a288 <HAL_DMA_Init.part.0.constprop.148+0x90>)
 800a1fc:	6805      	ldr	r5, [r0, #0]
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 800a1fe:	0004      	movs	r4, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a200:	2114      	movs	r1, #20
 800a202:	18e8      	adds	r0, r5, r3
 800a204:	f004 fef4 	bl	800eff0 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 800a208:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a20a:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 800a20c:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a20e:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800a210:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a212:	682b      	ldr	r3, [r5, #0]
 800a214:	4a1d      	ldr	r2, [pc, #116]	; (800a28c <HAL_DMA_Init.part.0.constprop.148+0x94>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800a216:	68a1      	ldr	r1, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a218:	4013      	ands	r3, r2
 800a21a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800a21c:	2380      	movs	r3, #128	; 0x80
 800a21e:	682a      	ldr	r2, [r5, #0]
 800a220:	430b      	orrs	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a226:	0020      	movs	r0, r4
 800a228:	f7ff ffcb 	bl	800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a22c:	2380      	movs	r3, #128	; 0x80
 800a22e:	68a2      	ldr	r2, [r4, #8]
 800a230:	01db      	lsls	r3, r3, #7
 800a232:	429a      	cmp	r2, r3
 800a234:	d101      	bne.n	800a23a <HAL_DMA_Init.part.0.constprop.148+0x42>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a236:	2300      	movs	r3, #0
 800a238:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a23e:	b2d3      	uxtb	r3, r2
 800a240:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a242:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a244:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a246:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a248:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a24a:	2a03      	cmp	r2, #3
 800a24c:	d816      	bhi.n	800a27c <HAL_DMA_Init.part.0.constprop.148+0x84>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a24e:	4a10      	ldr	r2, [pc, #64]	; (800a290 <HAL_DMA_Init.part.0.constprop.148+0x98>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a250:	4810      	ldr	r0, [pc, #64]	; (800a294 <HAL_DMA_Init.part.0.constprop.148+0x9c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a252:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a254:	2203      	movs	r2, #3
 800a256:	3b01      	subs	r3, #1
 800a258:	4013      	ands	r3, r2
 800a25a:	3a02      	subs	r2, #2
 800a25c:	409a      	lsls	r2, r3
 800a25e:	65a2      	str	r2, [r4, #88]	; 0x58
 800a260:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a262:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a264:	0089      	lsls	r1, r1, #2
 800a266:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a268:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a26a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a26c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a26e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800a270:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a272:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 800a274:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800a276:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800a278:	77e0      	strb	r0, [r4, #31]
}
 800a27a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800a280:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a282:	65a3      	str	r3, [r4, #88]	; 0x58
 800a284:	e7f3      	b.n	800a26e <HAL_DMA_Init.part.0.constprop.148+0x76>
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	bffdfff8 	.word	0xbffdfff8
 800a28c:	ffff800f 	.word	0xffff800f
 800a290:	1000823f 	.word	0x1000823f
 800a294:	40020940 	.word	0x40020940

0800a298 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a298:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a29a:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	045b      	lsls	r3, r3, #17
 800a2a0:	0f5b      	lsrs	r3, r3, #29
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	589b      	ldr	r3, [r3, r2]
 800a2a6:	221f      	movs	r2, #31
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	4a04      	ldr	r2, [pc, #16]	; (800a2bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a2ac:	6810      	ldr	r0, [r2, #0]
 800a2ae:	40d8      	lsrs	r0, r3
}
 800a2b0:	4770      	bx	lr
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	40021000 	.word	0x40021000
 800a2b8:	080191d8 	.word	0x080191d8
 800a2bc:	20000000 	.word	0x20000000

0800a2c0 <validate.lto_priv.174>:
 800a2c0:	6983      	ldr	r3, [r0, #24]
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	0004      	movs	r4, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <validate.lto_priv.174+0x20>
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <validate.lto_priv.174+0x54>)
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	3260      	adds	r2, #96	; 0x60
 800a2d0:	7812      	ldrb	r2, [r2, #0]
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d004      	beq.n	800a2e0 <validate.lto_priv.174+0x20>
 800a2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2d8:	4a0f      	ldr	r2, [pc, #60]	; (800a318 <validate.lto_priv.174+0x58>)
 800a2da:	4910      	ldr	r1, [pc, #64]	; (800a31c <validate.lto_priv.174+0x5c>)
 800a2dc:	2001      	movs	r0, #1
 800a2de:	4798      	blx	r3
 800a2e0:	69e3      	ldr	r3, [r4, #28]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <validate.lto_priv.174+0x3c>
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <validate.lto_priv.174+0x54>)
 800a2e8:	001a      	movs	r2, r3
 800a2ea:	3260      	adds	r2, #96	; 0x60
 800a2ec:	7812      	ldrb	r2, [r2, #0]
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d004      	beq.n	800a2fc <validate.lto_priv.174+0x3c>
 800a2f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2f4:	4a0a      	ldr	r2, [pc, #40]	; (800a320 <validate.lto_priv.174+0x60>)
 800a2f6:	4909      	ldr	r1, [pc, #36]	; (800a31c <validate.lto_priv.174+0x5c>)
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	4798      	blx	r3
 800a2fc:	6963      	ldr	r3, [r4, #20]
 800a2fe:	2001      	movs	r0, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d006      	beq.n	800a312 <validate.lto_priv.174+0x52>
 800a304:	4b03      	ldr	r3, [pc, #12]	; (800a314 <validate.lto_priv.174+0x54>)
 800a306:	2000      	movs	r0, #0
 800a308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a30a:	4a06      	ldr	r2, [pc, #24]	; (800a324 <validate.lto_priv.174+0x64>)
 800a30c:	4903      	ldr	r1, [pc, #12]	; (800a31c <validate.lto_priv.174+0x5c>)
 800a30e:	4798      	blx	r3
 800a310:	2000      	movs	r0, #0
 800a312:	bd10      	pop	{r4, pc}
 800a314:	20000280 	.word	0x20000280
 800a318:	0801cba2 	.word	0x0801cba2
 800a31c:	0801de2f 	.word	0x0801de2f
 800a320:	0801cbd5 	.word	0x0801cbd5
 800a324:	0801de45 	.word	0x0801de45

0800a328 <reset.lto_priv.179.lto_priv.640>:
 800a328:	4770      	bx	lr

0800a32a <consume.lto_priv.639>:
 800a32a:	b510      	push	{r4, lr}
 800a32c:	0004      	movs	r4, r0
 800a32e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a330:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a334:	6900      	ldr	r0, [r0, #16]
 800a336:	4798      	blx	r3
 800a338:	2200      	movs	r2, #0
 800a33a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a33c:	615a      	str	r2, [r3, #20]
 800a33e:	bd10      	pop	{r4, pc}

0800a340 <validate.lto_priv.173>:
 800a340:	6942      	ldr	r2, [r0, #20]
 800a342:	6903      	ldr	r3, [r0, #16]
 800a344:	b510      	push	{r4, lr}
 800a346:	4293      	cmp	r3, r2
 800a348:	d107      	bne.n	800a35a <validate.lto_priv.173+0x1a>
 800a34a:	4b11      	ldr	r3, [pc, #68]	; (800a390 <validate.lto_priv.173+0x50>)
 800a34c:	2000      	movs	r0, #0
 800a34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a350:	4a10      	ldr	r2, [pc, #64]	; (800a394 <validate.lto_priv.173+0x54>)
 800a352:	4911      	ldr	r1, [pc, #68]	; (800a398 <validate.lto_priv.173+0x58>)
 800a354:	4798      	blx	r3
 800a356:	2000      	movs	r0, #0
 800a358:	bd10      	pop	{r4, pc}
 800a35a:	6984      	ldr	r4, [r0, #24]
 800a35c:	2c00      	cmp	r4, #0
 800a35e:	d007      	beq.n	800a370 <validate.lto_priv.173+0x30>
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <validate.lto_priv.173+0x50>)
 800a362:	2000      	movs	r0, #0
 800a364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a366:	4a0d      	ldr	r2, [pc, #52]	; (800a39c <validate.lto_priv.173+0x5c>)
 800a368:	490b      	ldr	r1, [pc, #44]	; (800a398 <validate.lto_priv.173+0x58>)
 800a36a:	4798      	blx	r3
 800a36c:	2000      	movs	r0, #0
 800a36e:	e7f3      	b.n	800a358 <validate.lto_priv.173+0x18>
 800a370:	69c3      	ldr	r3, [r0, #28]
 800a372:	3304      	adds	r3, #4
 800a374:	429a      	cmp	r2, r3
 800a376:	d007      	beq.n	800a388 <validate.lto_priv.173+0x48>
 800a378:	4b05      	ldr	r3, [pc, #20]	; (800a390 <validate.lto_priv.173+0x50>)
 800a37a:	0020      	movs	r0, r4
 800a37c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a37e:	4a08      	ldr	r2, [pc, #32]	; (800a3a0 <validate.lto_priv.173+0x60>)
 800a380:	4905      	ldr	r1, [pc, #20]	; (800a398 <validate.lto_priv.173+0x58>)
 800a382:	4798      	blx	r3
 800a384:	0020      	movs	r0, r4
 800a386:	e7e7      	b.n	800a358 <validate.lto_priv.173+0x18>
 800a388:	6800      	ldr	r0, [r0, #0]
 800a38a:	6883      	ldr	r3, [r0, #8]
 800a38c:	4798      	blx	r3
 800a38e:	e7e3      	b.n	800a358 <validate.lto_priv.173+0x18>
 800a390:	20000280 	.word	0x20000280
 800a394:	0801de6c 	.word	0x0801de6c
 800a398:	0801de98 	.word	0x0801de98
 800a39c:	0801debc 	.word	0x0801debc
 800a3a0:	0801dedc 	.word	0x0801dedc

0800a3a4 <reset.lto_priv.178>:
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	69c2      	ldr	r2, [r0, #28]
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	7013      	strb	r3, [r2, #0]
 800a3ae:	68c3      	ldr	r3, [r0, #12]
 800a3b0:	4798      	blx	r3
 800a3b2:	bd10      	pop	{r4, pc}

0800a3b4 <filter_q3_12_complex.lto_priv.665>:
 800a3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b6:	46c6      	mov	lr, r8
 800a3b8:	000f      	movs	r7, r1
 800a3ba:	218b      	movs	r1, #139	; 0x8b
 800a3bc:	b500      	push	{lr}
 800a3be:	05c9      	lsls	r1, r1, #23
 800a3c0:	0006      	movs	r6, r0
 800a3c2:	1c18      	adds	r0, r3, #0
 800a3c4:	1c1c      	adds	r4, r3, #0
 800a3c6:	0895      	lsrs	r5, r2, #2
 800a3c8:	f004 fae0 	bl	800e98c <__aeabi_fmul>
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4680      	mov	r8, r0
 800a3d0:	1c20      	adds	r0, r4, #0
 800a3d2:	f004 fff1 	bl	800f3b8 <__aeabi_fcmpge>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d10f      	bne.n	800a3fa <filter_q3_12_complex.lto_priv.665+0x46>
 800a3da:	21bf      	movs	r1, #191	; 0xbf
 800a3dc:	0609      	lsls	r1, r1, #24
 800a3de:	4640      	mov	r0, r8
 800a3e0:	f004 f828 	bl	800e434 <__aeabi_fadd>
 800a3e4:	f005 f9e6 	bl	800f7b4 <__aeabi_f2iz>
 800a3e8:	b204      	sxth	r4, r0
 800a3ea:	0030      	movs	r0, r6
 800a3ec:	00aa      	lsls	r2, r5, #2
 800a3ee:	18ba      	adds	r2, r7, r2
 800a3f0:	42ba      	cmp	r2, r7
 800a3f2:	d105      	bne.n	800a400 <filter_q3_12_complex.lto_priv.665+0x4c>
 800a3f4:	bc04      	pop	{r2}
 800a3f6:	4690      	mov	r8, r2
 800a3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3fa:	21fc      	movs	r1, #252	; 0xfc
 800a3fc:	0589      	lsls	r1, r1, #22
 800a3fe:	e7ee      	b.n	800a3de <filter_q3_12_complex.lto_priv.665+0x2a>
 800a400:	2300      	movs	r3, #0
 800a402:	5efe      	ldrsh	r6, [r7, r3]
 800a404:	2300      	movs	r3, #0
 800a406:	5ec5      	ldrsh	r5, [r0, r3]
 800a408:	1bad      	subs	r5, r5, r6
 800a40a:	4365      	muls	r5, r4
 800a40c:	17eb      	asrs	r3, r5, #31
 800a40e:	051b      	lsls	r3, r3, #20
 800a410:	0d1b      	lsrs	r3, r3, #20
 800a412:	195b      	adds	r3, r3, r5
 800a414:	131b      	asrs	r3, r3, #12
 800a416:	199b      	adds	r3, r3, r6
 800a418:	803b      	strh	r3, [r7, #0]
 800a41a:	2302      	movs	r3, #2
 800a41c:	5ec5      	ldrsh	r5, [r0, r3]
 800a41e:	2302      	movs	r3, #2
 800a420:	5efe      	ldrsh	r6, [r7, r3]
 800a422:	3004      	adds	r0, #4
 800a424:	1bad      	subs	r5, r5, r6
 800a426:	4365      	muls	r5, r4
 800a428:	17eb      	asrs	r3, r5, #31
 800a42a:	051b      	lsls	r3, r3, #20
 800a42c:	0d1b      	lsrs	r3, r3, #20
 800a42e:	195b      	adds	r3, r3, r5
 800a430:	131b      	asrs	r3, r3, #12
 800a432:	199b      	adds	r3, r3, r6
 800a434:	807b      	strh	r3, [r7, #2]
 800a436:	3704      	adds	r7, #4
 800a438:	e7da      	b.n	800a3f0 <filter_q3_12_complex.lto_priv.665+0x3c>

0800a43a <validate.lto_priv.172>:
 800a43a:	6983      	ldr	r3, [r0, #24]
 800a43c:	b510      	push	{r4, lr}
 800a43e:	0004      	movs	r4, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <validate.lto_priv.172+0x20>
 800a444:	4b0e      	ldr	r3, [pc, #56]	; (800a480 <validate.lto_priv.172+0x46>)
 800a446:	001a      	movs	r2, r3
 800a448:	3260      	adds	r2, #96	; 0x60
 800a44a:	7812      	ldrb	r2, [r2, #0]
 800a44c:	2a00      	cmp	r2, #0
 800a44e:	d004      	beq.n	800a45a <validate.lto_priv.172+0x20>
 800a450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a452:	4a0c      	ldr	r2, [pc, #48]	; (800a484 <validate.lto_priv.172+0x4a>)
 800a454:	490c      	ldr	r1, [pc, #48]	; (800a488 <validate.lto_priv.172+0x4e>)
 800a456:	2001      	movs	r0, #1
 800a458:	4798      	blx	r3
 800a45a:	69e3      	ldr	r3, [r4, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <validate.lto_priv.172+0x3c>
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <validate.lto_priv.172+0x46>)
 800a462:	001a      	movs	r2, r3
 800a464:	3260      	adds	r2, #96	; 0x60
 800a466:	7812      	ldrb	r2, [r2, #0]
 800a468:	2a00      	cmp	r2, #0
 800a46a:	d004      	beq.n	800a476 <validate.lto_priv.172+0x3c>
 800a46c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a46e:	4a07      	ldr	r2, [pc, #28]	; (800a48c <validate.lto_priv.172+0x52>)
 800a470:	4905      	ldr	r1, [pc, #20]	; (800a488 <validate.lto_priv.172+0x4e>)
 800a472:	2001      	movs	r0, #1
 800a474:	4798      	blx	r3
 800a476:	6820      	ldr	r0, [r4, #0]
 800a478:	6883      	ldr	r3, [r0, #8]
 800a47a:	4798      	blx	r3
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	20000280 	.word	0x20000280
 800a484:	0801cba2 	.word	0x0801cba2
 800a488:	0801df03 	.word	0x0801df03
 800a48c:	0801cbd5 	.word	0x0801cbd5

0800a490 <event.lto_priv.184>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	0004      	movs	r4, r0
 800a494:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a496:	6945      	ldr	r5, [r0, #20]
 800a498:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	6900      	ldr	r0, [r0, #16]
 800a49e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4a0:	4798      	blx	r3
 800a4a2:	7028      	strb	r0, [r5, #0]
 800a4a4:	6820      	ldr	r0, [r4, #0]
 800a4a6:	6843      	ldr	r3, [r0, #4]
 800a4a8:	4798      	blx	r3
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}

0800a4ac <saturation_check_i16.lto_priv.643>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	0005      	movs	r5, r0
 800a4b0:	000c      	movs	r4, r1
 800a4b2:	4813      	ldr	r0, [pc, #76]	; (800a500 <saturation_check_i16.lto_priv.643+0x54>)
 800a4b4:	1c11      	adds	r1, r2, #0
 800a4b6:	f004 fb9b 	bl	800ebf0 <__aeabi_fsub>
 800a4ba:	4911      	ldr	r1, [pc, #68]	; (800a500 <saturation_check_i16.lto_priv.643+0x54>)
 800a4bc:	f004 f954 	bl	800e768 <__aeabi_fdiv>
 800a4c0:	21c7      	movs	r1, #199	; 0xc7
 800a4c2:	0609      	lsls	r1, r1, #24
 800a4c4:	1c07      	adds	r7, r0, #0
 800a4c6:	f004 fa61 	bl	800e98c <__aeabi_fmul>
 800a4ca:	f005 f973 	bl	800f7b4 <__aeabi_f2iz>
 800a4ce:	490d      	ldr	r1, [pc, #52]	; (800a504 <saturation_check_i16.lto_priv.643+0x58>)
 800a4d0:	b206      	sxth	r6, r0
 800a4d2:	1c38      	adds	r0, r7, #0
 800a4d4:	f004 fa5a 	bl	800e98c <__aeabi_fmul>
 800a4d8:	f005 f96c 	bl	800f7b4 <__aeabi_f2iz>
 800a4dc:	0864      	lsrs	r4, r4, #1
 800a4de:	0064      	lsls	r4, r4, #1
 800a4e0:	b200      	sxth	r0, r0
 800a4e2:	192c      	adds	r4, r5, r4
 800a4e4:	42a5      	cmp	r5, r4
 800a4e6:	d101      	bne.n	800a4ec <saturation_check_i16.lto_priv.643+0x40>
 800a4e8:	2000      	movs	r0, #0
 800a4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	5eea      	ldrsh	r2, [r5, r3]
 800a4f0:	4290      	cmp	r0, r2
 800a4f2:	dd02      	ble.n	800a4fa <saturation_check_i16.lto_priv.643+0x4e>
 800a4f4:	3502      	adds	r5, #2
 800a4f6:	4296      	cmp	r6, r2
 800a4f8:	dbf4      	blt.n	800a4e4 <saturation_check_i16.lto_priv.643+0x38>
 800a4fa:	2001      	movs	r0, #1
 800a4fc:	e7f5      	b.n	800a4ea <saturation_check_i16.lto_priv.643+0x3e>
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	42c80000 	.word	0x42c80000
 800a504:	46fffe00 	.word	0x46fffe00

0800a508 <validate.lto_priv.171>:
 800a508:	6903      	ldr	r3, [r0, #16]
 800a50a:	6942      	ldr	r2, [r0, #20]
 800a50c:	b510      	push	{r4, lr}
 800a50e:	0004      	movs	r4, r0
 800a510:	4293      	cmp	r3, r2
 800a512:	d007      	beq.n	800a524 <validate.lto_priv.171+0x1c>
 800a514:	4b13      	ldr	r3, [pc, #76]	; (800a564 <validate.lto_priv.171+0x5c>)
 800a516:	2000      	movs	r0, #0
 800a518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a51a:	4a13      	ldr	r2, [pc, #76]	; (800a568 <validate.lto_priv.171+0x60>)
 800a51c:	4913      	ldr	r1, [pc, #76]	; (800a56c <validate.lto_priv.171+0x64>)
 800a51e:	4798      	blx	r3
 800a520:	2000      	movs	r0, #0
 800a522:	bd10      	pop	{r4, pc}
 800a524:	6983      	ldr	r3, [r0, #24]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <validate.lto_priv.171+0x38>
 800a52a:	4b0e      	ldr	r3, [pc, #56]	; (800a564 <validate.lto_priv.171+0x5c>)
 800a52c:	001a      	movs	r2, r3
 800a52e:	3260      	adds	r2, #96	; 0x60
 800a530:	7812      	ldrb	r2, [r2, #0]
 800a532:	2a00      	cmp	r2, #0
 800a534:	d004      	beq.n	800a540 <validate.lto_priv.171+0x38>
 800a536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a538:	4a0d      	ldr	r2, [pc, #52]	; (800a570 <validate.lto_priv.171+0x68>)
 800a53a:	490c      	ldr	r1, [pc, #48]	; (800a56c <validate.lto_priv.171+0x64>)
 800a53c:	2001      	movs	r0, #1
 800a53e:	4798      	blx	r3
 800a540:	69e3      	ldr	r3, [r4, #28]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <validate.lto_priv.171+0x54>
 800a546:	4b07      	ldr	r3, [pc, #28]	; (800a564 <validate.lto_priv.171+0x5c>)
 800a548:	001a      	movs	r2, r3
 800a54a:	3260      	adds	r2, #96	; 0x60
 800a54c:	7812      	ldrb	r2, [r2, #0]
 800a54e:	2a00      	cmp	r2, #0
 800a550:	d004      	beq.n	800a55c <validate.lto_priv.171+0x54>
 800a552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a554:	4a07      	ldr	r2, [pc, #28]	; (800a574 <validate.lto_priv.171+0x6c>)
 800a556:	4905      	ldr	r1, [pc, #20]	; (800a56c <validate.lto_priv.171+0x64>)
 800a558:	2001      	movs	r0, #1
 800a55a:	4798      	blx	r3
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	6883      	ldr	r3, [r0, #8]
 800a560:	4798      	blx	r3
 800a562:	e7de      	b.n	800a522 <validate.lto_priv.171+0x1a>
 800a564:	20000280 	.word	0x20000280
 800a568:	0801cbe4 	.word	0x0801cbe4
 800a56c:	0801df1c 	.word	0x0801df1c
 800a570:	0801cba2 	.word	0x0801cba2
 800a574:	0801cbd5 	.word	0x0801cbd5

0800a578 <event.lto_priv.183.lto_priv.669>:
 800a578:	b510      	push	{r4, lr}
 800a57a:	0004      	movs	r4, r0
 800a57c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a57e:	4798      	blx	r3
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	6843      	ldr	r3, [r0, #4]
 800a584:	4798      	blx	r3
 800a586:	bd10      	pop	{r4, pc}

0800a588 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a58a:	2308      	movs	r3, #8
{
 800a58c:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a58e:	4698      	mov	r8, r3
 800a590:	4480      	add	r8, r0
 800a592:	4643      	mov	r3, r8
{
 800a594:	46de      	mov	lr, fp
 800a596:	4657      	mov	r7, sl
 800a598:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a59a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a59c:	b5e0      	push	{r5, r6, r7, lr}
 800a59e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5a0:	2b22      	cmp	r3, #34	; 0x22
 800a5a2:	d149      	bne.n	800a638 <UART_RxISR_16BIT_FIFOEN+0xb0>
  uint16_t  uhMask = huart->Mask;
 800a5a4:	0003      	movs	r3, r0
 800a5a6:	3360      	adds	r3, #96	; 0x60
 800a5a8:	881b      	ldrh	r3, [r3, #0]
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a5aa:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a5ac:	4699      	mov	r9, r3
      huart->RxXferCount--;

      if (huart->RxXferCount == 0U)
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ae:	4b25      	ldr	r3, [pc, #148]	; (800a644 <UART_RxISR_16BIT_FIFOEN+0xbc>)
 800a5b0:	0006      	movs	r6, r0
 800a5b2:	469a      	mov	sl, r3

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5b4:	3322      	adds	r3, #34	; 0x22
 800a5b6:	33ff      	adds	r3, #255	; 0xff
 800a5b8:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a5ba:	3768      	adds	r7, #104	; 0x68
 800a5bc:	883d      	ldrh	r5, [r7, #0]
 800a5be:	365e      	adds	r6, #94	; 0x5e
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	d117      	bne.n	800a5f4 <UART_RxISR_16BIT_FIFOEN+0x6c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5c4:	8833      	ldrh	r3, [r6, #0]
 800a5c6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00d      	beq.n	800a5e8 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a5cc:	883a      	ldrh	r2, [r7, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d90a      	bls.n	800a5e8 <UART_RxISR_16BIT_FIFOEN+0x60>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	491c      	ldr	r1, [pc, #112]	; (800a648 <UART_RxISR_16BIT_FIFOEN+0xc0>)
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	400a      	ands	r2, r1
 800a5da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a5dc:	4a1b      	ldr	r2, [pc, #108]	; (800a64c <UART_RxISR_16BIT_FIFOEN+0xc4>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5de:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800a5e0:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a5e8:	bc3c      	pop	{r2, r3, r4, r5}
 800a5ea:	4690      	mov	r8, r2
 800a5ec:	4699      	mov	r9, r3
 800a5ee:	46a2      	mov	sl, r4
 800a5f0:	46ab      	mov	fp, r5
 800a5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *tmp = (uint16_t)(uhdata & uhMask);
 800a5f4:	4648      	mov	r0, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5f6:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a5f8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a5fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a5fc:	4001      	ands	r1, r0
 800a5fe:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800a600:	3202      	adds	r2, #2
 800a602:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a604:	8832      	ldrh	r2, [r6, #0]
 800a606:	3a01      	subs	r2, #1
 800a608:	b292      	uxth	r2, r2
 800a60a:	8032      	strh	r2, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a60c:	8832      	ldrh	r2, [r6, #0]
 800a60e:	b292      	uxth	r2, r2
 800a610:	2a00      	cmp	r2, #0
 800a612:	d10e      	bne.n	800a632 <UART_RxISR_16BIT_FIFOEN+0xaa>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a614:	4650      	mov	r0, sl
 800a616:	6819      	ldr	r1, [r3, #0]
 800a618:	4001      	ands	r1, r0
 800a61a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a61c:	6899      	ldr	r1, [r3, #8]
 800a61e:	480c      	ldr	r0, [pc, #48]	; (800a650 <UART_RxISR_16BIT_FIFOEN+0xc8>)
 800a620:	4001      	ands	r1, r0
 800a622:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a624:	4643      	mov	r3, r8
 800a626:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a628:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a62a:	67d9      	str	r1, [r3, #124]	; 0x7c
        huart->RxISR = NULL;
 800a62c:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a62e:	f7f9 f9d1 	bl	80039d4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a632:	3d01      	subs	r5, #1
 800a634:	b2ad      	uxth	r5, r5
 800a636:	e7c3      	b.n	800a5c0 <UART_RxISR_16BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a638:	2308      	movs	r3, #8
 800a63a:	6802      	ldr	r2, [r0, #0]
 800a63c:	6991      	ldr	r1, [r2, #24]
 800a63e:	430b      	orrs	r3, r1
 800a640:	6193      	str	r3, [r2, #24]
 800a642:	e7d1      	b.n	800a5e8 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a644:	fffffeff 	.word	0xfffffeff
 800a648:	efffffff 	.word	0xefffffff
 800a64c:	0800a725 	.word	0x0800a725
 800a650:	effffffe 	.word	0xeffffffe

0800a654 <UART_RxISR_8BIT_FIFOEN>:
{
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a656:	2308      	movs	r3, #8
{
 800a658:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a65a:	4698      	mov	r8, r3
 800a65c:	4480      	add	r8, r0
 800a65e:	4643      	mov	r3, r8
{
 800a660:	46de      	mov	lr, fp
 800a662:	4657      	mov	r7, sl
 800a664:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a668:	b5e0      	push	{r5, r6, r7, lr}
 800a66a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a66c:	2b22      	cmp	r3, #34	; 0x22
 800a66e:	d14b      	bne.n	800a708 <UART_RxISR_8BIT_FIFOEN+0xb4>
  uint16_t  uhMask = huart->Mask;
 800a670:	0003      	movs	r3, r0
 800a672:	3360      	adds	r3, #96	; 0x60
 800a674:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a676:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a678:	4699      	mov	r9, r3
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a67a:	4b26      	ldr	r3, [pc, #152]	; (800a714 <UART_RxISR_8BIT_FIFOEN+0xc0>)
 800a67c:	0006      	movs	r6, r0
 800a67e:	469a      	mov	sl, r3
        huart->RxState = HAL_UART_STATE_READY;
 800a680:	3322      	adds	r3, #34	; 0x22
 800a682:	33ff      	adds	r3, #255	; 0xff
 800a684:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a686:	3768      	adds	r7, #104	; 0x68
 800a688:	883d      	ldrh	r5, [r7, #0]
 800a68a:	365e      	adds	r6, #94	; 0x5e
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	d117      	bne.n	800a6c0 <UART_RxISR_8BIT_FIFOEN+0x6c>
    rxdatacount = huart->RxXferCount;
 800a690:	8833      	ldrh	r3, [r6, #0]
 800a692:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00d      	beq.n	800a6b4 <UART_RxISR_8BIT_FIFOEN+0x60>
 800a698:	883a      	ldrh	r2, [r7, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d90a      	bls.n	800a6b4 <UART_RxISR_8BIT_FIFOEN+0x60>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	491d      	ldr	r1, [pc, #116]	; (800a718 <UART_RxISR_8BIT_FIFOEN+0xc4>)
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	400a      	ands	r2, r1
 800a6a6:	609a      	str	r2, [r3, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800a6a8:	4a1c      	ldr	r2, [pc, #112]	; (800a71c <UART_RxISR_8BIT_FIFOEN+0xc8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6aa:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800a6ac:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	601a      	str	r2, [r3, #0]
}
 800a6b4:	bc3c      	pop	{r2, r3, r4, r5}
 800a6b6:	4690      	mov	r8, r2
 800a6b8:	4699      	mov	r9, r3
 800a6ba:	46a2      	mov	sl, r4
 800a6bc:	46ab      	mov	fp, r5
 800a6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6c0:	464a      	mov	r2, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6c6:	4013      	ands	r3, r2
 800a6c8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a6ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800a6cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a6d2:	8833      	ldrh	r3, [r6, #0]
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	8033      	strh	r3, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a6da:	8833      	ldrh	r3, [r6, #0]
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10f      	bne.n	800a702 <UART_RxISR_8BIT_FIFOEN+0xae>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	6822      	ldr	r2, [r4, #0]
 800a6e6:	6811      	ldr	r1, [r2, #0]
 800a6e8:	4001      	ands	r1, r0
 800a6ea:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6ec:	6891      	ldr	r1, [r2, #8]
 800a6ee:	480c      	ldr	r0, [pc, #48]	; (800a720 <UART_RxISR_8BIT_FIFOEN+0xcc>)
 800a6f0:	4001      	ands	r1, r0
 800a6f2:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a6f4:	4642      	mov	r2, r8
 800a6f6:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a6f8:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a6fa:	67d1      	str	r1, [r2, #124]	; 0x7c
        huart->RxISR = NULL;
 800a6fc:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a6fe:	f7f9 f969 	bl	80039d4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a702:	3d01      	subs	r5, #1
 800a704:	b2ad      	uxth	r5, r5
 800a706:	e7c1      	b.n	800a68c <UART_RxISR_8BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a708:	2308      	movs	r3, #8
 800a70a:	6802      	ldr	r2, [r0, #0]
 800a70c:	6991      	ldr	r1, [r2, #24]
 800a70e:	430b      	orrs	r3, r1
 800a710:	6193      	str	r3, [r2, #24]
 800a712:	e7cf      	b.n	800a6b4 <UART_RxISR_8BIT_FIFOEN+0x60>
 800a714:	fffffeff 	.word	0xfffffeff
 800a718:	efffffff 	.word	0xefffffff
 800a71c:	0800a785 	.word	0x0800a785
 800a720:	effffffe 	.word	0xeffffffe

0800a724 <UART_RxISR_16BIT>:
{
 800a724:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a726:	0004      	movs	r4, r0
 800a728:	3408      	adds	r4, #8
 800a72a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a72c:	6803      	ldr	r3, [r0, #0]
 800a72e:	2a22      	cmp	r2, #34	; 0x22
 800a730:	d121      	bne.n	800a776 <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800a732:	0005      	movs	r5, r0
 800a734:	3560      	adds	r5, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a736:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800a738:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a73a:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800a73c:	4029      	ands	r1, r5
 800a73e:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 800a740:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800a742:	3202      	adds	r2, #2
 800a744:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a746:	315e      	adds	r1, #94	; 0x5e
 800a748:	880a      	ldrh	r2, [r1, #0]
 800a74a:	3a01      	subs	r2, #1
 800a74c:	b292      	uxth	r2, r2
 800a74e:	800a      	strh	r2, [r1, #0]
    if (huart->RxXferCount == 0U)
 800a750:	880a      	ldrh	r2, [r1, #0]
 800a752:	b292      	uxth	r2, r2
 800a754:	2a00      	cmp	r2, #0
 800a756:	d10d      	bne.n	800a774 <UART_RxISR_16BIT+0x50>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a758:	6819      	ldr	r1, [r3, #0]
 800a75a:	4d09      	ldr	r5, [pc, #36]	; (800a780 <UART_RxISR_16BIT+0x5c>)
 800a75c:	4029      	ands	r1, r5
 800a75e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a760:	6899      	ldr	r1, [r3, #8]
 800a762:	3523      	adds	r5, #35	; 0x23
 800a764:	35ff      	adds	r5, #255	; 0xff
 800a766:	43a9      	bics	r1, r5
 800a768:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a76a:	2320      	movs	r3, #32
 800a76c:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a76e:	66c2      	str	r2, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a770:	f7f9 f930 	bl	80039d4 <HAL_UART_RxCpltCallback>
}
 800a774:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a776:	2208      	movs	r2, #8
 800a778:	6999      	ldr	r1, [r3, #24]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	619a      	str	r2, [r3, #24]
 800a77e:	e7f9      	b.n	800a774 <UART_RxISR_16BIT+0x50>
 800a780:	fffffedf 	.word	0xfffffedf

0800a784 <UART_RxISR_8BIT>:
{
 800a784:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a786:	0004      	movs	r4, r0
 800a788:	3408      	adds	r4, #8
 800a78a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a78c:	6803      	ldr	r3, [r0, #0]
 800a78e:	2a22      	cmp	r2, #34	; 0x22
 800a790:	d123      	bne.n	800a7da <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800a792:	0002      	movs	r2, r0
 800a794:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a798:	8812      	ldrh	r2, [r2, #0]
 800a79a:	4013      	ands	r3, r2
 800a79c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a79e:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800a7a0:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800a7a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a7a4:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a7aa:	8813      	ldrh	r3, [r2, #0]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 800a7b2:	8813      	ldrh	r3, [r2, #0]
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10e      	bne.n	800a7d8 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7ba:	6802      	ldr	r2, [r0, #0]
 800a7bc:	4d09      	ldr	r5, [pc, #36]	; (800a7e4 <UART_RxISR_8BIT+0x60>)
 800a7be:	6811      	ldr	r1, [r2, #0]
 800a7c0:	4029      	ands	r1, r5
 800a7c2:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c4:	6891      	ldr	r1, [r2, #8]
 800a7c6:	3523      	adds	r5, #35	; 0x23
 800a7c8:	35ff      	adds	r5, #255	; 0xff
 800a7ca:	43a9      	bics	r1, r5
 800a7cc:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	67e2      	str	r2, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a7d2:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a7d4:	f7f9 f8fe 	bl	80039d4 <HAL_UART_RxCpltCallback>
}
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a7da:	2208      	movs	r2, #8
 800a7dc:	6999      	ldr	r1, [r3, #24]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	619a      	str	r2, [r3, #24]
 800a7e2:	e7f9      	b.n	800a7d8 <UART_RxISR_8BIT+0x54>
 800a7e4:	fffffedf 	.word	0xfffffedf

0800a7e8 <event.lto_priv.185>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	0004      	movs	r4, r0
 800a7ec:	69c5      	ldr	r5, [r0, #28]
 800a7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f0:	1d2e      	adds	r6, r5, #4
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	782b      	ldrb	r3, [r5, #0]
 800a7f6:	6900      	ldr	r0, [r0, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d009      	beq.n	800a810 <event.lto_priv.185+0x28>
 800a7fc:	0001      	movs	r1, r0
 800a7fe:	0030      	movs	r0, r6
 800a800:	f00b f95c 	bl	8015abc <memcpy>
 800a804:	2300      	movs	r3, #0
 800a806:	702b      	strb	r3, [r5, #0]
 800a808:	6820      	ldr	r0, [r4, #0]
 800a80a:	6843      	ldr	r3, [r0, #4]
 800a80c:	4798      	blx	r3
 800a80e:	bd70      	pop	{r4, r5, r6, pc}
 800a810:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a812:	0031      	movs	r1, r6
 800a814:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a816:	47a8      	blx	r5
 800a818:	e7f6      	b.n	800a808 <event.lto_priv.185+0x20>

0800a81a <reset.lto_priv.177.lto_priv.641>:
 800a81a:	b510      	push	{r4, lr}
 800a81c:	f7fa fc8a 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 800a820:	bd10      	pop	{r4, pc}

0800a822 <reset.lto_priv.176.lto_priv.670>:
 800a822:	b510      	push	{r4, lr}
 800a824:	f7fa fc86 	bl	8005134 <reset.lto_priv.175.lto_priv.262>
 800a828:	bd10      	pop	{r4, pc}

0800a82a <phase_compensate_q3_12_complex.lto_priv.671>:
 800a82a:	b510      	push	{r4, lr}
 800a82c:	1d83      	adds	r3, r0, #6
 800a82e:	223e      	movs	r2, #62	; 0x3e
 800a830:	5e9b      	ldrsh	r3, [r3, r2]
 800a832:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a834:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a836:	6900      	ldr	r0, [r0, #16]
 800a838:	f7fb fa22 	bl	8005c80 <do_phase_compensation_q3_12.lto_priv.263>
 800a83c:	bd10      	pop	{r4, pc}

0800a83e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170>:
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a83e:	20e0      	movs	r0, #224	; 0xe0
 800a840:	4b17      	ldr	r3, [pc, #92]	; (800a8a0 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x62>)
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a842:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a844:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a846:	6851      	ldr	r1, [r2, #4]
 800a848:	4381      	bics	r1, r0
 800a84a:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a84c:	2182      	movs	r1, #130	; 0x82
 800a84e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a850:	0049      	lsls	r1, r1, #1
 800a852:	4288      	cmp	r0, r1
 800a854:	d10c      	bne.n	800a870 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x32>
 800a856:	2080      	movs	r0, #128	; 0x80
 800a858:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a85a:	0200      	lsls	r0, r0, #8
 800a85c:	4281      	cmp	r1, r0
 800a85e:	d003      	beq.n	800a868 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a860:	2080      	movs	r0, #128	; 0x80
 800a862:	00c0      	lsls	r0, r0, #3
 800a864:	4281      	cmp	r1, r0
 800a866:	d103      	bne.n	800a870 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x32>
          __HAL_SPI_DISABLE(hspi);
 800a868:	2040      	movs	r0, #64	; 0x40
 800a86a:	6811      	ldr	r1, [r2, #0]
 800a86c:	4381      	bics	r1, r0
 800a86e:	6011      	str	r1, [r2, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a870:	0019      	movs	r1, r3
 800a872:	2080      	movs	r0, #128	; 0x80
 800a874:	3190      	adds	r1, #144	; 0x90
 800a876:	6809      	ldr	r1, [r1, #0]
 800a878:	0180      	lsls	r0, r0, #6
 800a87a:	4281      	cmp	r1, r0
 800a87c:	d106      	bne.n	800a88c <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x4e>
          SPI_RESET_CRC(hspi);
 800a87e:	6810      	ldr	r0, [r2, #0]
 800a880:	4c08      	ldr	r4, [pc, #32]	; (800a8a4 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.170+0x66>)
 800a882:	4020      	ands	r0, r4
 800a884:	6010      	str	r0, [r2, #0]
 800a886:	6810      	ldr	r0, [r2, #0]
 800a888:	4301      	orrs	r1, r0
 800a88a:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a88c:	001a      	movs	r2, r3
 800a88e:	2101      	movs	r1, #1
 800a890:	32c5      	adds	r2, #197	; 0xc5
 800a892:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hspi);
 800a894:	2200      	movs	r2, #0
 800a896:	33c4      	adds	r3, #196	; 0xc4
}
 800a898:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800a89a:	701a      	strb	r2, [r3, #0]
}
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	46c0      	nop			; (mov r8, r8)
 800a8a0:	20000280 	.word	0x20000280
 800a8a4:	ffffdfff 	.word	0xffffdfff

0800a8a8 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161>:
  __HAL_LOCK(hrtc);
 800a8a8:	4b1c      	ldr	r3, [pc, #112]	; (800a91c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x74>)
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	0019      	movs	r1, r3
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
 800a8ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 800a8b0:	3128      	adds	r1, #40	; 0x28
 800a8b2:	780c      	ldrb	r4, [r1, #0]
 800a8b4:	0010      	movs	r0, r2
 800a8b6:	2c01      	cmp	r4, #1
 800a8b8:	d02e      	beq.n	800a918 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x70>
 800a8ba:	3801      	subs	r0, #1
 800a8bc:	7008      	strb	r0, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8be:	0019      	movs	r1, r3
 800a8c0:	3129      	adds	r1, #41	; 0x29
 800a8c2:	700a      	strb	r2, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8c4:	21ca      	movs	r1, #202	; 0xca
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8c6:	26fa      	movs	r6, #250	; 0xfa
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a8c8:	2404      	movs	r4, #4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8ca:	681a      	ldr	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a8cc:	4814      	ldr	r0, [pc, #80]	; (800a920 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x78>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8ce:	6251      	str	r1, [r2, #36]	; 0x24
 800a8d0:	3977      	subs	r1, #119	; 0x77
 800a8d2:	6251      	str	r1, [r2, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a8d4:	6991      	ldr	r1, [r2, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8d6:	00b6      	lsls	r6, r6, #2
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a8d8:	4001      	ands	r1, r0
 800a8da:	6191      	str	r1, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800a8dc:	6991      	ldr	r1, [r2, #24]
 800a8de:	4811      	ldr	r0, [pc, #68]	; (800a924 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x7c>)
 800a8e0:	4001      	ands	r1, r0
 800a8e2:	6191      	str	r1, [r2, #24]
 800a8e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a8e6:	68d1      	ldr	r1, [r2, #12]
 800a8e8:	4021      	ands	r1, r4
 800a8ea:	d009      	beq.n	800a900 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x58>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8ec:	21ff      	movs	r1, #255	; 0xff
 800a8ee:	6251      	str	r1, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a8f0:	001a      	movs	r2, r3
  __HAL_UNLOCK(hrtc);
 800a8f2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a8f4:	3229      	adds	r2, #41	; 0x29
 800a8f6:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a8f8:	3328      	adds	r3, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a8fa:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hrtc);
 800a8fc:	7018      	strb	r0, [r3, #0]
 800a8fe:	e00b      	b.n	800a918 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x70>
 800a900:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a902:	1b40      	subs	r0, r0, r5
 800a904:	42b0      	cmp	r0, r6
 800a906:	d9ee      	bls.n	800a8e6 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a908:	20ff      	movs	r0, #255	; 0xff
 800a90a:	6250      	str	r0, [r2, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a90c:	001a      	movs	r2, r3
 800a90e:	38fc      	subs	r0, #252	; 0xfc
 800a910:	3229      	adds	r2, #41	; 0x29
      __HAL_UNLOCK(hrtc);
 800a912:	3328      	adds	r3, #40	; 0x28
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a914:	7010      	strb	r0, [r2, #0]
      __HAL_UNLOCK(hrtc);
 800a916:	7019      	strb	r1, [r3, #0]
}
 800a918:	bd70      	pop	{r4, r5, r6, pc}
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	20000280 	.word	0x20000280
 800a920:	fffffbff 	.word	0xfffffbff
 800a924:	ffffbfff 	.word	0xffffbfff

0800a928 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160>:
  __HAL_LOCK(hrtc);
 800a928:	4a2b      	ldr	r2, [pc, #172]	; (800a9d8 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xb0>)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a92a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800a92c:	0014      	movs	r4, r2
 800a92e:	2302      	movs	r3, #2
 800a930:	3428      	adds	r4, #40	; 0x28
 800a932:	7825      	ldrb	r5, [r4, #0]
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a934:	0007      	movs	r7, r0
  __HAL_LOCK(hrtc);
 800a936:	0018      	movs	r0, r3
 800a938:	2d01      	cmp	r5, #1
 800a93a:	d04b      	beq.n	800a9d4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xac>
 800a93c:	3801      	subs	r0, #1
 800a93e:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a940:	0010      	movs	r0, r2
 800a942:	3029      	adds	r0, #41	; 0x29
 800a944:	7003      	strb	r3, [r0, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a946:	20ca      	movs	r0, #202	; 0xca
 800a948:	6813      	ldr	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a94a:	4c24      	ldr	r4, [pc, #144]	; (800a9dc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xb4>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a94c:	6258      	str	r0, [r3, #36]	; 0x24
 800a94e:	3877      	subs	r0, #119	; 0x77
 800a950:	6258      	str	r0, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a952:	6998      	ldr	r0, [r3, #24]
 800a954:	4020      	ands	r0, r4
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a956:	2404      	movs	r4, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a958:	6198      	str	r0, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a95a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a95c:	4820      	ldr	r0, [pc, #128]	; (800a9e0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xb8>)
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a95e:	4325      	orrs	r5, r4
 800a960:	65dd      	str	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a962:	68c0      	ldr	r0, [r0, #12]
 800a964:	0640      	lsls	r0, r0, #25
 800a966:	d407      	bmi.n	800a978 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0x50>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a968:	0025      	movs	r5, r4
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a96a:	24fa      	movs	r4, #250	; 0xfa
 800a96c:	00a4      	lsls	r4, r4, #2
 800a96e:	46a4      	mov	ip, r4
 800a970:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a972:	68dc      	ldr	r4, [r3, #12]
 800a974:	402c      	ands	r4, r5
 800a976:	d021      	beq.n	800a9bc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0x94>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a978:	2407      	movs	r4, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a97a:	615f      	str	r7, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a97c:	6998      	ldr	r0, [r3, #24]
 800a97e:	43a0      	bics	r0, r4
 800a980:	6198      	str	r0, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a982:	6998      	ldr	r0, [r3, #24]
 800a984:	4301      	orrs	r1, r0
 800a986:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a988:	2180      	movs	r1, #128	; 0x80
 800a98a:	4816      	ldr	r0, [pc, #88]	; (800a9e4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xbc>)
 800a98c:	0309      	lsls	r1, r1, #12
 800a98e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 800a990:	4321      	orrs	r1, r4
 800a992:	67c1      	str	r1, [r0, #124]	; 0x7c
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800a994:	2180      	movs	r1, #128	; 0x80
 800a996:	6998      	ldr	r0, [r3, #24]
 800a998:	01c9      	lsls	r1, r1, #7
 800a99a:	4301      	orrs	r1, r0
 800a99c:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a99e:	2180      	movs	r1, #128	; 0x80
 800a9a0:	6998      	ldr	r0, [r3, #24]
 800a9a2:	00c9      	lsls	r1, r1, #3
 800a9a4:	4301      	orrs	r1, r0
 800a9a6:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a8:	21ff      	movs	r1, #255	; 0xff
 800a9aa:	6259      	str	r1, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a9ac:	0013      	movs	r3, r2
  __HAL_UNLOCK(hrtc);
 800a9ae:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a9b0:	3329      	adds	r3, #41	; 0x29
 800a9b2:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a9b4:	3228      	adds	r2, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a9b6:	7019      	strb	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800a9b8:	7010      	strb	r0, [r2, #0]
 800a9ba:	e00b      	b.n	800a9d4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0xac>
 800a9bc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a9be:	1a36      	subs	r6, r6, r0
 800a9c0:	4566      	cmp	r6, ip
 800a9c2:	d9d6      	bls.n	800a972 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160+0x4a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9c4:	21ff      	movs	r1, #255	; 0xff
 800a9c6:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9c8:	0013      	movs	r3, r2
 800a9ca:	2003      	movs	r0, #3
 800a9cc:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800a9ce:	3228      	adds	r2, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a9d0:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800a9d2:	7014      	strb	r4, [r2, #0]
}
 800a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	20000280 	.word	0x20000280
 800a9dc:	fffffbff 	.word	0xfffffbff
 800a9e0:	40002800 	.word	0x40002800
 800a9e4:	40021804 	.word	0x40021804

0800a9e8 <acc_integration_sleep_us.constprop.158>:
	rtc_wakeup_triggered = false;
 800a9e8:	2300      	movs	r3, #0
void acc_integration_sleep_us(uint32_t time_usec)
 800a9ea:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 800a9ec:	4c0e      	ldr	r4, [pc, #56]	; (800aa28 <acc_integration_sleep_us.constprop.158+0x40>)
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a9ee:	2103      	movs	r1, #3
	rtc_wakeup_triggered = false;
 800a9f0:	344c      	adds	r4, #76	; 0x4c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a9f2:	201f      	movs	r0, #31
	rtc_wakeup_triggered = false;
 800a9f4:	7023      	strb	r3, [r4, #0]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a9f6:	f7ff ff97 	bl	800a928 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160>
	while (!rtc_wakeup_triggered)
 800a9fa:	7822      	ldrb	r2, [r4, #0]
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	d004      	beq.n	800aa0a <acc_integration_sleep_us.constprop.158+0x22>
	rtc_wakeup_triggered = false;
 800aa00:	2200      	movs	r2, #0
 800aa02:	7022      	strb	r2, [r4, #0]
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800aa04:	f7ff ff50 	bl	800a8a8 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161>
}
 800aa08:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800aa0a:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800aa0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa10:	f3bf 8f6f 	isb	sy
		if (!rtc_wakeup_triggered)
 800aa14:	7822      	ldrb	r2, [r4, #0]
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	d100      	bne.n	800aa1c <acc_integration_sleep_us.constprop.158+0x34>
			__WFI();
 800aa1a:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 800aa1c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 800aa1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	e7e8      	b.n	800a9fa <acc_integration_sleep_us.constprop.158+0x12>
 800aa28:	20000300 	.word	0x20000300

0800aa2c <HAL_GPIO_DeInit.constprop.155>:
        EXTI->IMR1 &= ~(iocurrent);
 800aa2c:	4937      	ldr	r1, [pc, #220]	; (800ab0c <HAL_GPIO_DeInit.constprop.155+0xe0>)
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800aa2e:	b5f0      	push	{r4, r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800aa30:	468c      	mov	ip, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800aa32:	4645      	mov	r5, r8
 800aa34:	46de      	mov	lr, fp
 800aa36:	4657      	mov	r7, sl
 800aa38:	464e      	mov	r6, r9
        EXTI->EMR1 &= ~(iocurrent);
 800aa3a:	4935      	ldr	r1, [pc, #212]	; (800ab10 <HAL_GPIO_DeInit.constprop.155+0xe4>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aa3c:	22a0      	movs	r2, #160	; 0xa0
  uint32_t position = 0x00u;
 800aa3e:	2300      	movs	r3, #0
        EXTI->EMR1 &= ~(iocurrent);
 800aa40:	4688      	mov	r8, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800aa42:	b5e0      	push	{r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800aa44:	4d33      	ldr	r5, [pc, #204]	; (800ab14 <HAL_GPIO_DeInit.constprop.155+0xe8>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aa46:	05d2      	lsls	r2, r2, #23
  while ((GPIO_Pin >> position) != 0x00u)
 800aa48:	0001      	movs	r1, r0
 800aa4a:	40d9      	lsrs	r1, r3
 800aa4c:	d105      	bne.n	800aa5a <HAL_GPIO_DeInit.constprop.155+0x2e>
}
 800aa4e:	bc3c      	pop	{r2, r3, r4, r5}
 800aa50:	4690      	mov	r8, r2
 800aa52:	4699      	mov	r9, r3
 800aa54:	46a2      	mov	sl, r4
 800aa56:	46ab      	mov	fp, r5
 800aa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	4099      	lsls	r1, r3
 800aa5e:	000c      	movs	r4, r1
 800aa60:	4689      	mov	r9, r1
 800aa62:	4004      	ands	r4, r0
    if (iocurrent != 0x00u)
 800aa64:	d04f      	beq.n	800ab06 <HAL_GPIO_DeInit.constprop.155+0xda>
 800aa66:	4f2b      	ldr	r7, [pc, #172]	; (800ab14 <HAL_GPIO_DeInit.constprop.155+0xe8>)
      tmp = EXTI->EXTICR[position >> 2u];
 800aa68:	0899      	lsrs	r1, r3, #2
 800aa6a:	46ba      	mov	sl, r7
 800aa6c:	0089      	lsls	r1, r1, #2
 800aa6e:	4451      	add	r1, sl
 800aa70:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800aa72:	2603      	movs	r6, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800aa74:	46ba      	mov	sl, r7
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800aa76:	001f      	movs	r7, r3
 800aa78:	4037      	ands	r7, r6
 800aa7a:	40b7      	lsls	r7, r6
 800aa7c:	46bb      	mov	fp, r7
 800aa7e:	270f      	movs	r7, #15
 800aa80:	465e      	mov	r6, fp
 800aa82:	40b7      	lsls	r7, r6
 800aa84:	46bb      	mov	fp, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800aa86:	003e      	movs	r6, r7
 800aa88:	4657      	mov	r7, sl
 800aa8a:	423e      	tst	r6, r7
 800aa8c:	d117      	bne.n	800aabe <HAL_GPIO_DeInit.constprop.155+0x92>
        EXTI->IMR1 &= ~(iocurrent);
 800aa8e:	4666      	mov	r6, ip
 800aa90:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800aa92:	43e4      	mvns	r4, r4
 800aa94:	0037      	movs	r7, r6
 800aa96:	4666      	mov	r6, ip
 800aa98:	4027      	ands	r7, r4
 800aa9a:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800aa9c:	4646      	mov	r6, r8
 800aa9e:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800aaa0:	0037      	movs	r7, r6
 800aaa2:	4646      	mov	r6, r8
 800aaa4:	4027      	ands	r7, r4
 800aaa6:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 800aaa8:	682e      	ldr	r6, [r5, #0]
 800aaaa:	0037      	movs	r7, r6
 800aaac:	4027      	ands	r7, r4
 800aaae:	602f      	str	r7, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800aab0:	686e      	ldr	r6, [r5, #4]
 800aab2:	4034      	ands	r4, r6
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800aab4:	465e      	mov	r6, fp
        EXTI->FTSR1 &= ~(iocurrent);
 800aab6:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800aab8:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 800aaba:	43b4      	bics	r4, r6
 800aabc:	660c      	str	r4, [r1, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aabe:	2703      	movs	r7, #3
 800aac0:	26a0      	movs	r6, #160	; 0xa0
 800aac2:	005c      	lsls	r4, r3, #1
 800aac4:	40a7      	lsls	r7, r4
 800aac6:	05f6      	lsls	r6, r6, #23
 800aac8:	6811      	ldr	r1, [r2, #0]
 800aaca:	46b2      	mov	sl, r6
 800aacc:	4339      	orrs	r1, r7
 800aace:	003c      	movs	r4, r7
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aad0:	2707      	movs	r7, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aad2:	6011      	str	r1, [r2, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aad4:	08d9      	lsrs	r1, r3, #3
 800aad6:	0089      	lsls	r1, r1, #2
 800aad8:	4451      	add	r1, sl
 800aada:	6a0e      	ldr	r6, [r1, #32]
 800aadc:	401f      	ands	r7, r3
 800aade:	46b2      	mov	sl, r6
 800aae0:	00be      	lsls	r6, r7, #2
 800aae2:	270f      	movs	r7, #15
 800aae4:	40b7      	lsls	r7, r6
 800aae6:	46bb      	mov	fp, r7
 800aae8:	4657      	mov	r7, sl
 800aaea:	465e      	mov	r6, fp
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aaec:	43e4      	mvns	r4, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aaee:	43b7      	bics	r7, r6
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800aaf0:	464e      	mov	r6, r9
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800aaf2:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aaf4:	6891      	ldr	r1, [r2, #8]
 800aaf6:	4021      	ands	r1, r4
 800aaf8:	6091      	str	r1, [r2, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800aafa:	6851      	ldr	r1, [r2, #4]
 800aafc:	43b1      	bics	r1, r6
 800aafe:	6051      	str	r1, [r2, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ab00:	68d1      	ldr	r1, [r2, #12]
 800ab02:	400c      	ands	r4, r1
 800ab04:	60d4      	str	r4, [r2, #12]
    position++;
 800ab06:	3301      	adds	r3, #1
 800ab08:	e79e      	b.n	800aa48 <HAL_GPIO_DeInit.constprop.155+0x1c>
 800ab0a:	46c0      	nop			; (mov r8, r8)
 800ab0c:	40021804 	.word	0x40021804
 800ab10:	40021808 	.word	0x40021808
 800ab14:	40021800 	.word	0x40021800

0800ab18 <HAL_UART_Transmit_IT.constprop.132>:
  if (huart->gState == HAL_UART_STATE_READY)
 800ab18:	4b2b      	ldr	r3, [pc, #172]	; (800abc8 <HAL_UART_Transmit_IT.constprop.132+0xb0>)
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800ab1a:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800ab1c:	1d1a      	adds	r2, r3, #4
 800ab1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800ab20:	0004      	movs	r4, r0
    return HAL_BUSY;
 800ab22:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800ab24:	2a20      	cmp	r2, #32
 800ab26:	d13b      	bne.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
      return HAL_ERROR;
 800ab28:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800ab2a:	2c00      	cmp	r4, #0
 800ab2c:	d038      	beq.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
 800ab2e:	2900      	cmp	r1, #0
 800ab30:	d036      	beq.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab32:	2580      	movs	r5, #128	; 0x80
 800ab34:	689a      	ldr	r2, [r3, #8]
 800ab36:	016d      	lsls	r5, r5, #5
 800ab38:	42aa      	cmp	r2, r5
 800ab3a:	d104      	bne.n	800ab46 <HAL_UART_Transmit_IT.constprop.132+0x2e>
 800ab3c:	691d      	ldr	r5, [r3, #16]
 800ab3e:	2d00      	cmp	r5, #0
 800ab40:	d101      	bne.n	800ab46 <HAL_UART_Transmit_IT.constprop.132+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ab42:	4204      	tst	r4, r0
 800ab44:	d12c      	bne.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
    __HAL_LOCK(huart);
 800ab46:	0018      	movs	r0, r3
 800ab48:	307c      	adds	r0, #124	; 0x7c
 800ab4a:	7805      	ldrb	r5, [r0, #0]
    return HAL_BUSY;
 800ab4c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800ab4e:	2d01      	cmp	r5, #1
 800ab50:	d026      	beq.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
    huart->TxXferSize  = Size;
 800ab52:	0018      	movs	r0, r3
 800ab54:	3054      	adds	r0, #84	; 0x54
 800ab56:	8001      	strh	r1, [r0, #0]
    huart->TxXferCount = Size;
 800ab58:	0018      	movs	r0, r3
 800ab5a:	3056      	adds	r0, #86	; 0x56
 800ab5c:	8001      	strh	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5e:	0019      	movs	r1, r3
 800ab60:	2000      	movs	r0, #0
 800ab62:	3188      	adds	r1, #136	; 0x88
 800ab64:	6008      	str	r0, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab66:	1d19      	adds	r1, r3, #4
 800ab68:	3021      	adds	r0, #33	; 0x21
 800ab6a:	67c8      	str	r0, [r1, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ab6c:	2180      	movs	r1, #128	; 0x80
 800ab6e:	2080      	movs	r0, #128	; 0x80
    huart->pTxBuffPtr  = pData;
 800ab70:	651c      	str	r4, [r3, #80]	; 0x50
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ab72:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800ab74:	0589      	lsls	r1, r1, #22
 800ab76:	0140      	lsls	r0, r0, #5
 800ab78:	428c      	cmp	r4, r1
 800ab7a:	d112      	bne.n	800aba2 <HAL_UART_Transmit_IT.constprop.132+0x8a>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ab7c:	4913      	ldr	r1, [pc, #76]	; (800abcc <HAL_UART_Transmit_IT.constprop.132+0xb4>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab7e:	4282      	cmp	r2, r0
 800ab80:	d103      	bne.n	800ab8a <HAL_UART_Transmit_IT.constprop.132+0x72>
 800ab82:	691a      	ldr	r2, [r3, #16]
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	d100      	bne.n	800ab8a <HAL_UART_Transmit_IT.constprop.132+0x72>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ab88:	4911      	ldr	r1, [pc, #68]	; (800abd0 <HAL_UART_Transmit_IT.constprop.132+0xb8>)
      __HAL_UNLOCK(huart);
 800ab8a:	001a      	movs	r2, r3
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	327c      	adds	r2, #124	; 0x7c
 800ab90:	6719      	str	r1, [r3, #112]	; 0x70
 800ab92:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	2380      	movs	r3, #128	; 0x80
 800ab98:	6891      	ldr	r1, [r2, #8]
 800ab9a:	041b      	lsls	r3, r3, #16
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6093      	str	r3, [r2, #8]
}
 800aba0:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800aba2:	490c      	ldr	r1, [pc, #48]	; (800abd4 <HAL_UART_Transmit_IT.constprop.132+0xbc>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aba4:	4282      	cmp	r2, r0
 800aba6:	d103      	bne.n	800abb0 <HAL_UART_Transmit_IT.constprop.132+0x98>
 800aba8:	691a      	ldr	r2, [r3, #16]
 800abaa:	2a00      	cmp	r2, #0
 800abac:	d100      	bne.n	800abb0 <HAL_UART_Transmit_IT.constprop.132+0x98>
        huart->TxISR = UART_TxISR_16BIT;
 800abae:	490a      	ldr	r1, [pc, #40]	; (800abd8 <HAL_UART_Transmit_IT.constprop.132+0xc0>)
      __HAL_UNLOCK(huart);
 800abb0:	001a      	movs	r2, r3
 800abb2:	2000      	movs	r0, #0
 800abb4:	327c      	adds	r2, #124	; 0x7c
 800abb6:	6719      	str	r1, [r3, #112]	; 0x70
 800abb8:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	2380      	movs	r3, #128	; 0x80
 800abbe:	6811      	ldr	r1, [r2, #0]
 800abc0:	430b      	orrs	r3, r1
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	e7ec      	b.n	800aba0 <HAL_UART_Transmit_IT.constprop.132+0x88>
 800abc6:	46c0      	nop			; (mov r8, r8)
 800abc8:	200005ac 	.word	0x200005ac
 800abcc:	08009fc1 	.word	0x08009fc1
 800abd0:	08009f65 	.word	0x08009f65
 800abd4:	0800a059 	.word	0x0800a059
 800abd8:	0800a019 	.word	0x0800a019

0800abdc <RTC_ExitInitMode.constprop.119>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800abdc:	2280      	movs	r2, #128	; 0x80
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
 800abde:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800abe0:	4c10      	ldr	r4, [pc, #64]	; (800ac24 <RTC_ExitInitMode.constprop.119+0x48>)
 800abe2:	68e3      	ldr	r3, [r4, #12]
 800abe4:	4393      	bics	r3, r2
 800abe6:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800abe8:	69a3      	ldr	r3, [r4, #24]
 800abea:	3a60      	subs	r2, #96	; 0x60
 800abec:	4213      	tst	r3, r2
 800abee:	d108      	bne.n	800ac02 <RTC_ExitInitMode.constprop.119+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800abf0:	f7ff f940 	bl	8009e74 <HAL_RTC_WaitForSynchro.constprop.121>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d003      	beq.n	800ac00 <RTC_ExitInitMode.constprop.119+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800abf8:	2003      	movs	r0, #3
 800abfa:	4b0b      	ldr	r3, [pc, #44]	; (800ac28 <RTC_ExitInitMode.constprop.119+0x4c>)
 800abfc:	3329      	adds	r3, #41	; 0x29
 800abfe:	7018      	strb	r0, [r3, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800ac00:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ac02:	69a3      	ldr	r3, [r4, #24]
 800ac04:	4393      	bics	r3, r2
 800ac06:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ac08:	f7ff f934 	bl	8009e74 <HAL_RTC_WaitForSynchro.constprop.121>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d003      	beq.n	800ac18 <RTC_ExitInitMode.constprop.119+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac10:	2003      	movs	r0, #3
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <RTC_ExitInitMode.constprop.119+0x4c>)
 800ac14:	3329      	adds	r3, #41	; 0x29
 800ac16:	7018      	strb	r0, [r3, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ac18:	2320      	movs	r3, #32
 800ac1a:	69a2      	ldr	r2, [r4, #24]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	61a3      	str	r3, [r4, #24]
 800ac20:	e7ee      	b.n	800ac00 <RTC_ExitInitMode.constprop.119+0x24>
 800ac22:	46c0      	nop			; (mov r8, r8)
 800ac24:	40002800 	.word	0x40002800
 800ac28:	20000280 	.word	0x20000280

0800ac2c <RTC_EnterInitMode.constprop.118>:
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac2c:	2140      	movs	r1, #64	; 0x40
 800ac2e:	4a10      	ldr	r2, [pc, #64]	; (800ac70 <RTC_EnterInitMode.constprop.118+0x44>)
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac32:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;  
 800ac34:	2000      	movs	r0, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800ac36:	68dc      	ldr	r4, [r3, #12]
 800ac38:	420c      	tst	r4, r1
 800ac3a:	d10f      	bne.n	800ac5c <RTC_EnterInitMode.constprop.118+0x30>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ac3c:	2480      	movs	r4, #128	; 0x80
 800ac3e:	68dd      	ldr	r5, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac40:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800ac42:	432c      	orrs	r4, r5
 800ac44:	60dc      	str	r4, [r3, #12]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac46:	2429      	movs	r4, #41	; 0x29
 800ac48:	46a4      	mov	ip, r4
 800ac4a:	2503      	movs	r5, #3
 800ac4c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac4e:	00bf      	lsls	r7, r7, #2
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac50:	4494      	add	ip, r2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ac52:	68dc      	ldr	r4, [r3, #12]
 800ac54:	420c      	tst	r4, r1
 800ac56:	d101      	bne.n	800ac5c <RTC_EnterInitMode.constprop.118+0x30>
 800ac58:	2803      	cmp	r0, #3
 800ac5a:	d100      	bne.n	800ac5e <RTC_EnterInitMode.constprop.118+0x32>
}
 800ac5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac5e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac60:	1ba4      	subs	r4, r4, r6
 800ac62:	42bc      	cmp	r4, r7
 800ac64:	d9f5      	bls.n	800ac52 <RTC_EnterInitMode.constprop.118+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac66:	4660      	mov	r0, ip
 800ac68:	7005      	strb	r5, [r0, #0]
        status = HAL_TIMEOUT;
 800ac6a:	0028      	movs	r0, r5
 800ac6c:	e7f1      	b.n	800ac52 <RTC_EnterInitMode.constprop.118+0x26>
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	20000280 	.word	0x20000280

0800ac74 <FLASH_WaitForLastOperation.constprop.105>:
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800ac74:	23fa      	movs	r3, #250	; 0xfa
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	469c      	mov	ip, r3

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800ac7a:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <FLASH_WaitForLastOperation.constprop.105+0x6c>)
 800ac7c:	2180      	movs	r1, #128	; 0x80
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 800ac7e:	b530      	push	{r4, r5, lr}
 800ac80:	001d      	movs	r5, r3
 800ac82:	4c18      	ldr	r4, [pc, #96]	; (800ace4 <FLASH_WaitForLastOperation.constprop.105+0x70>)
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800ac84:	0249      	lsls	r1, r1, #9
 800ac86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t timeout = HAL_GetTick() + Timeout;
 800ac88:	4462      	add	r2, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800ac8a:	6918      	ldr	r0, [r3, #16]
 800ac8c:	4208      	tst	r0, r1
 800ac8e:	d111      	bne.n	800acb4 <FLASH_WaitForLastOperation.constprop.105+0x40>

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;

  /* Update error with ECC error value */
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800ac90:	2080      	movs	r0, #128	; 0x80
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	4914      	ldr	r1, [pc, #80]	; (800ace8 <FLASH_WaitForLastOperation.constprop.105+0x74>)
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800ac96:	05c0      	lsls	r0, r0, #23
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800ac98:	400a      	ands	r2, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800ac9a:	4914      	ldr	r1, [pc, #80]	; (800acec <FLASH_WaitForLastOperation.constprop.105+0x78>)
 800ac9c:	6119      	str	r1, [r3, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800ac9e:	6999      	ldr	r1, [r3, #24]
 800aca0:	4001      	ands	r1, r0

  if(eccerr != 0x00u)
 800aca2:	d00c      	beq.n	800acbe <FLASH_WaitForLastOperation.constprop.105+0x4a>
  {
    FLASH->ECCR |= eccerr;
 800aca4:	6998      	ldr	r0, [r3, #24]
    error |= eccerr;
 800aca6:	430a      	orrs	r2, r1
    FLASH->ECCR |= eccerr;
 800aca8:	4308      	orrs	r0, r1
 800acaa:	6198      	str	r0, [r3, #24]
  }

  if (error != 0x00U)
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800acac:	4b10      	ldr	r3, [pc, #64]	; (800acf0 <FLASH_WaitForLastOperation.constprop.105+0x7c>)

    return HAL_ERROR;
 800acae:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800acb0:	655a      	str	r2, [r3, #84]	; 0x54
 800acb2:	e003      	b.n	800acbc <FLASH_WaitForLastOperation.constprop.105+0x48>
 800acb4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800acb6:	4282      	cmp	r2, r0
 800acb8:	d8e7      	bhi.n	800ac8a <FLASH_WaitForLastOperation.constprop.105+0x16>
      return HAL_TIMEOUT;
 800acba:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800acbc:	bd30      	pop	{r4, r5, pc}
  if (error != 0x00U)
 800acbe:	2a00      	cmp	r2, #0
 800acc0:	d1f4      	bne.n	800acac <FLASH_WaitForLastOperation.constprop.105+0x38>
  timeout = HAL_GetTick() + Timeout;
 800acc2:	22fa      	movs	r2, #250	; 0xfa
 800acc4:	0092      	lsls	r2, r2, #2
 800acc6:	4694      	mov	ip, r2
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800acc8:	2280      	movs	r2, #128	; 0x80
 800acca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800accc:	02d2      	lsls	r2, r2, #11
  timeout = HAL_GetTick() + Timeout;
 800acce:	4463      	add	r3, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800acd0:	6928      	ldr	r0, [r5, #16]
 800acd2:	4010      	ands	r0, r2
 800acd4:	d0f2      	beq.n	800acbc <FLASH_WaitForLastOperation.constprop.105+0x48>
 800acd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800acd8:	428b      	cmp	r3, r1
 800acda:	d8f9      	bhi.n	800acd0 <FLASH_WaitForLastOperation.constprop.105+0x5c>
 800acdc:	e7ed      	b.n	800acba <FLASH_WaitForLastOperation.constprop.105+0x46>
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	40022000 	.word	0x40022000
 800ace4:	20000280 	.word	0x20000280
 800ace8:	0000c3fa 	.word	0x0000c3fa
 800acec:	0000c3fb 	.word	0x0000c3fb
 800acf0:	20000300 	.word	0x20000300

0800acf4 <HAL_UART_Receive_IT.constprop.93>:
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800acf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800acf6:	0006      	movs	r6, r0
 800acf8:	3608      	adds	r6, #8
 800acfa:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800acfc:	0003      	movs	r3, r0
    return HAL_BUSY;
 800acfe:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad00:	2a20      	cmp	r2, #32
 800ad02:	d154      	bne.n	800adae <HAL_UART_Receive_IT.constprop.93+0xba>
      return HAL_ERROR;
 800ad04:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800ad06:	2900      	cmp	r1, #0
 800ad08:	d051      	beq.n	800adae <HAL_UART_Receive_IT.constprop.93+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad0a:	2280      	movs	r2, #128	; 0x80
 800ad0c:	689c      	ldr	r4, [r3, #8]
 800ad0e:	0152      	lsls	r2, r2, #5
 800ad10:	4294      	cmp	r4, r2
 800ad12:	d106      	bne.n	800ad22 <HAL_UART_Receive_IT.constprop.93+0x2e>
 800ad14:	691a      	ldr	r2, [r3, #16]
 800ad16:	2a00      	cmp	r2, #0
 800ad18:	d103      	bne.n	800ad22 <HAL_UART_Receive_IT.constprop.93+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad1a:	4a39      	ldr	r2, [pc, #228]	; (800ae00 <HAL_UART_Receive_IT.constprop.93+0x10c>)
 800ad1c:	3268      	adds	r2, #104	; 0x68
 800ad1e:	4202      	tst	r2, r0
 800ad20:	d145      	bne.n	800adae <HAL_UART_Receive_IT.constprop.93+0xba>
    __HAL_LOCK(huart);
 800ad22:	001d      	movs	r5, r3
 800ad24:	357c      	adds	r5, #124	; 0x7c
 800ad26:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800ad28:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800ad2a:	2a01      	cmp	r2, #1
 800ad2c:	d03f      	beq.n	800adae <HAL_UART_Receive_IT.constprop.93+0xba>
 800ad2e:	2201      	movs	r2, #1
 800ad30:	702a      	strb	r2, [r5, #0]
    huart->pRxBuffPtr  = pData;
 800ad32:	4a33      	ldr	r2, [pc, #204]	; (800ae00 <HAL_UART_Receive_IT.constprop.93+0x10c>)
    huart->RxISR       = NULL;
 800ad34:	2000      	movs	r0, #0
    huart->pRxBuffPtr  = pData;
 800ad36:	3268      	adds	r2, #104	; 0x68
 800ad38:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800ad3a:	001a      	movs	r2, r3
    UART_MASK_COMPUTATION(huart);
 800ad3c:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 800ad3e:	325c      	adds	r2, #92	; 0x5c
 800ad40:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount = Size;
 800ad42:	8051      	strh	r1, [r2, #2]
    UART_MASK_COMPUTATION(huart);
 800ad44:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 800ad46:	66d8      	str	r0, [r3, #108]	; 0x6c
 800ad48:	3204      	adds	r2, #4
    UART_MASK_COMPUTATION(huart);
 800ad4a:	42bc      	cmp	r4, r7
 800ad4c:	d133      	bne.n	800adb6 <HAL_UART_Receive_IT.constprop.93+0xc2>
 800ad4e:	6918      	ldr	r0, [r3, #16]
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d12d      	bne.n	800adb0 <HAL_UART_Receive_IT.constprop.93+0xbc>
 800ad54:	482b      	ldr	r0, [pc, #172]	; (800ae04 <HAL_UART_Receive_IT.constprop.93+0x110>)
 800ad56:	8010      	strh	r0, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad58:	001a      	movs	r2, r3
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	3288      	adds	r2, #136	; 0x88
 800ad5e:	6010      	str	r0, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad60:	2222      	movs	r2, #34	; 0x22
 800ad62:	67f2      	str	r2, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	3001      	adds	r0, #1
 800ad68:	6896      	ldr	r6, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ad6a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6c:	4330      	orrs	r0, r6
 800ad6e:	6090      	str	r0, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ad70:	2680      	movs	r6, #128	; 0x80
 800ad72:	2080      	movs	r0, #128	; 0x80
 800ad74:	05b6      	lsls	r6, r6, #22
 800ad76:	0140      	lsls	r0, r0, #5
 800ad78:	42b7      	cmp	r7, r6
 800ad7a:	d130      	bne.n	800adde <HAL_UART_Receive_IT.constprop.93+0xea>
 800ad7c:	001e      	movs	r6, r3
 800ad7e:	3668      	adds	r6, #104	; 0x68
 800ad80:	8836      	ldrh	r6, [r6, #0]
 800ad82:	428e      	cmp	r6, r1
 800ad84:	d82b      	bhi.n	800adde <HAL_UART_Receive_IT.constprop.93+0xea>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ad86:	4920      	ldr	r1, [pc, #128]	; (800ae08 <HAL_UART_Receive_IT.constprop.93+0x114>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad88:	4284      	cmp	r4, r0
 800ad8a:	d103      	bne.n	800ad94 <HAL_UART_Receive_IT.constprop.93+0xa0>
 800ad8c:	6918      	ldr	r0, [r3, #16]
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d100      	bne.n	800ad94 <HAL_UART_Receive_IT.constprop.93+0xa0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ad92:	491e      	ldr	r1, [pc, #120]	; (800ae0c <HAL_UART_Receive_IT.constprop.93+0x118>)
      __HAL_UNLOCK(huart);
 800ad94:	2000      	movs	r0, #0
 800ad96:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad98:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 800ad9a:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad9c:	6811      	ldr	r1, [r2, #0]
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ada4:	2380      	movs	r3, #128	; 0x80
 800ada6:	6891      	ldr	r1, [r2, #8]
 800ada8:	055b      	lsls	r3, r3, #21
 800adaa:	430b      	orrs	r3, r1
 800adac:	6093      	str	r3, [r2, #8]
}
 800adae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800adb0:	20ff      	movs	r0, #255	; 0xff
 800adb2:	8010      	strh	r0, [r2, #0]
 800adb4:	e7d0      	b.n	800ad58 <HAL_UART_Receive_IT.constprop.93+0x64>
 800adb6:	2c00      	cmp	r4, #0
 800adb8:	d105      	bne.n	800adc6 <HAL_UART_Receive_IT.constprop.93+0xd2>
 800adba:	6918      	ldr	r0, [r3, #16]
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d0f7      	beq.n	800adb0 <HAL_UART_Receive_IT.constprop.93+0xbc>
 800adc0:	207f      	movs	r0, #127	; 0x7f
 800adc2:	8010      	strh	r0, [r2, #0]
 800adc4:	e7c8      	b.n	800ad58 <HAL_UART_Receive_IT.constprop.93+0x64>
 800adc6:	2780      	movs	r7, #128	; 0x80
 800adc8:	057f      	lsls	r7, r7, #21
 800adca:	42bc      	cmp	r4, r7
 800adcc:	d105      	bne.n	800adda <HAL_UART_Receive_IT.constprop.93+0xe6>
 800adce:	6918      	ldr	r0, [r3, #16]
 800add0:	2800      	cmp	r0, #0
 800add2:	d0f5      	beq.n	800adc0 <HAL_UART_Receive_IT.constprop.93+0xcc>
 800add4:	203f      	movs	r0, #63	; 0x3f
 800add6:	8010      	strh	r0, [r2, #0]
 800add8:	e7be      	b.n	800ad58 <HAL_UART_Receive_IT.constprop.93+0x64>
 800adda:	8010      	strh	r0, [r2, #0]
 800addc:	e7bc      	b.n	800ad58 <HAL_UART_Receive_IT.constprop.93+0x64>
        huart->RxISR = UART_RxISR_8BIT;
 800adde:	490c      	ldr	r1, [pc, #48]	; (800ae10 <HAL_UART_Receive_IT.constprop.93+0x11c>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ade0:	4284      	cmp	r4, r0
 800ade2:	d103      	bne.n	800adec <HAL_UART_Receive_IT.constprop.93+0xf8>
 800ade4:	6918      	ldr	r0, [r3, #16]
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d100      	bne.n	800adec <HAL_UART_Receive_IT.constprop.93+0xf8>
        huart->RxISR = UART_RxISR_16BIT;
 800adea:	490a      	ldr	r1, [pc, #40]	; (800ae14 <HAL_UART_Receive_IT.constprop.93+0x120>)
      __HAL_UNLOCK(huart);
 800adec:	2000      	movs	r0, #0
 800adee:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800adf0:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800adf2:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800adf4:	6811      	ldr	r1, [r2, #0]
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	430b      	orrs	r3, r1
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	e7d7      	b.n	800adae <HAL_UART_Receive_IT.constprop.93+0xba>
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	20000300 	.word	0x20000300
 800ae04:	000001ff 	.word	0x000001ff
 800ae08:	0800a655 	.word	0x0800a655
 800ae0c:	0800a589 	.word	0x0800a589
 800ae10:	0800a785 	.word	0x0800a785
 800ae14:	0800a725 	.word	0x0800a725

0800ae18 <add_data.constprop.90>:


void add_data(int16_t v){
 800ae18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae1a:	46c6      	mov	lr, r8
	for(uint16_t i = 0; i<bins; i++){
 800ae1c:	4c11      	ldr	r4, [pc, #68]	; (800ae64 <add_data.constprop.90+0x4c>)
void add_data(int16_t v){
 800ae1e:	b500      	push	{lr}
	for(uint16_t i = 0; i<bins; i++){
 800ae20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01b      	beq.n	800ae5e <add_data.constprop.90+0x46>
 800ae26:	2600      	movs	r6, #0
	for(uint16_t j = 0; j<sweeps/2; j++){
		data[j][i] += v;
 800ae28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae2a:	4690      	mov	r8, r2
 800ae2c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800ae2e:	0852      	lsrs	r2, r2, #1
	for(uint16_t j = 0; j<sweeps/2; j++){
 800ae30:	2a00      	cmp	r2, #0
 800ae32:	d010      	beq.n	800ae56 <add_data.constprop.90+0x3e>
 800ae34:	4640      	mov	r0, r8
 800ae36:	2300      	movs	r3, #0
		data[j][i] += v;
 800ae38:	0075      	lsls	r5, r6, #1
 800ae3a:	4f0b      	ldr	r7, [pc, #44]	; (800ae68 <add_data.constprop.90+0x50>)
 800ae3c:	c804      	ldmia	r0!, {r2}
 800ae3e:	46bc      	mov	ip, r7
 800ae40:	1952      	adds	r2, r2, r5
 800ae42:	8811      	ldrh	r1, [r2, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800ae44:	3301      	adds	r3, #1
		data[j][i] += v;
 800ae46:	4461      	add	r1, ip
 800ae48:	8011      	strh	r1, [r2, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800ae4a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	0852      	lsrs	r2, r2, #1
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d3f2      	bcc.n	800ae3a <add_data.constprop.90+0x22>
 800ae54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
	for(uint16_t i = 0; i<bins; i++){
 800ae56:	3601      	adds	r6, #1
 800ae58:	b2b6      	uxth	r6, r6
 800ae5a:	429e      	cmp	r6, r3
 800ae5c:	d3e8      	bcc.n	800ae30 <add_data.constprop.90+0x18>
	}
	}
}
 800ae5e:	bc04      	pop	{r2}
 800ae60:	4690      	mov	r8, r2
 800ae62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae64:	20000380 	.word	0x20000380
 800ae68:	00007fff 	.word	0x00007fff

0800ae6c <mult_accumulant.constprop.89>:
void mult_accumulant(float v){
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	46ce      	mov	lr, r9
 800ae70:	4647      	mov	r7, r8
	for(uint16_t i = 0; i<bins; i++){
 800ae72:	4914      	ldr	r1, [pc, #80]	; (800aec4 <mult_accumulant.constprop.89+0x58>)
void mult_accumulant(float v){
 800ae74:	b580      	push	{r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 800ae76:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d01e      	beq.n	800aeba <mult_accumulant.constprop.89+0x4e>
	for(uint16_t j = 0; j<sweeps/2; j++){
 800ae7c:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
		accumulant[j][i] *= v;
 800ae7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
	for(uint16_t j = 0; j<sweeps/2; j++){
 800ae80:	085b      	lsrs	r3, r3, #1
		accumulant[j][i] *= v;
 800ae82:	4689      	mov	r9, r1
 800ae84:	d019      	beq.n	800aeba <mult_accumulant.constprop.89+0x4e>
 800ae86:	3a01      	subs	r2, #1
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b292      	uxth	r2, r2
 800ae8c:	b29f      	uxth	r7, r3
 800ae8e:	3201      	adds	r2, #1
 800ae90:	000b      	movs	r3, r1
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	4690      	mov	r8, r2
 800ae96:	2600      	movs	r6, #0
 800ae98:	00bf      	lsls	r7, r7, #2
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	18ff      	adds	r7, r7, r3
void mult_accumulant(float v){
 800ae9e:	464d      	mov	r5, r9
		accumulant[j][i] *= v;
 800aea0:	219f      	movs	r1, #159	; 0x9f
 800aea2:	cd10      	ldmia	r5!, {r4}
 800aea4:	05c9      	lsls	r1, r1, #23
 800aea6:	19a4      	adds	r4, r4, r6
 800aea8:	6820      	ldr	r0, [r4, #0]
 800aeaa:	f003 fd6f 	bl	800e98c <__aeabi_fmul>
 800aeae:	6020      	str	r0, [r4, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800aeb0:	42af      	cmp	r7, r5
 800aeb2:	d1f5      	bne.n	800aea0 <mult_accumulant.constprop.89+0x34>
 800aeb4:	3604      	adds	r6, #4
	for(uint16_t i = 0; i<bins; i++){
 800aeb6:	45b0      	cmp	r8, r6
 800aeb8:	d1f1      	bne.n	800ae9e <mult_accumulant.constprop.89+0x32>
}
 800aeba:	bc0c      	pop	{r2, r3}
 800aebc:	4690      	mov	r8, r2
 800aebe:	4699      	mov	r9, r3
 800aec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	20000380 	.word	0x20000380

0800aec8 <add_accumulant.constprop.88>:
void add_accumulant(float v){
 800aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeca:	46ce      	mov	lr, r9
 800aecc:	4647      	mov	r7, r8
	for(uint16_t i = 0; i<bins; i++){
 800aece:	4914      	ldr	r1, [pc, #80]	; (800af20 <add_accumulant.constprop.88+0x58>)
void add_accumulant(float v){
 800aed0:	b580      	push	{r7, lr}
	for(uint16_t i = 0; i<bins; i++){
 800aed2:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
 800aed4:	2a00      	cmp	r2, #0
 800aed6:	d01e      	beq.n	800af16 <add_accumulant.constprop.88+0x4e>
	for(uint16_t j = 0; j<sweeps/2; j++){
 800aed8:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
		accumulant[j][i] += v;
 800aeda:	6b49      	ldr	r1, [r1, #52]	; 0x34
	for(uint16_t j = 0; j<sweeps/2; j++){
 800aedc:	085b      	lsrs	r3, r3, #1
		accumulant[j][i] += v;
 800aede:	4689      	mov	r9, r1
 800aee0:	d019      	beq.n	800af16 <add_accumulant.constprop.88+0x4e>
 800aee2:	3a01      	subs	r2, #1
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b292      	uxth	r2, r2
 800aee8:	b29f      	uxth	r7, r3
 800aeea:	3201      	adds	r2, #1
 800aeec:	000b      	movs	r3, r1
 800aeee:	0092      	lsls	r2, r2, #2
 800aef0:	4690      	mov	r8, r2
 800aef2:	2600      	movs	r6, #0
 800aef4:	00bf      	lsls	r7, r7, #2
 800aef6:	3304      	adds	r3, #4
 800aef8:	18ff      	adds	r7, r7, r3
void add_accumulant(float v){
 800aefa:	464d      	mov	r5, r9
		accumulant[j][i] += v;
 800aefc:	219f      	movs	r1, #159	; 0x9f
 800aefe:	cd10      	ldmia	r5!, {r4}
 800af00:	05c9      	lsls	r1, r1, #23
 800af02:	19a4      	adds	r4, r4, r6
 800af04:	6820      	ldr	r0, [r4, #0]
 800af06:	f003 fa95 	bl	800e434 <__aeabi_fadd>
 800af0a:	6020      	str	r0, [r4, #0]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800af0c:	42af      	cmp	r7, r5
 800af0e:	d1f5      	bne.n	800aefc <add_accumulant.constprop.88+0x34>
 800af10:	3604      	adds	r6, #4
	for(uint16_t i = 0; i<bins; i++){
 800af12:	45b0      	cmp	r8, r6
 800af14:	d1f1      	bne.n	800aefa <add_accumulant.constprop.88+0x32>
}
 800af16:	bc0c      	pop	{r2, r3}
 800af18:	4690      	mov	r8, r2
 800af1a:	4699      	mov	r9, r3
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af1e:	46c0      	nop			; (mov r8, r8)
 800af20:	20000380 	.word	0x20000380

0800af24 <set_accumulant.constprop.87>:
	for(uint16_t i = 0; i<bins; i++){
 800af24:	490e      	ldr	r1, [pc, #56]	; (800af60 <set_accumulant.constprop.87+0x3c>)
void set_accumulant(float v){
 800af26:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i = 0; i<bins; i++){
 800af28:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
 800af2a:	2a00      	cmp	r2, #0
 800af2c:	d017      	beq.n	800af5e <set_accumulant.constprop.87+0x3a>
	for(uint16_t j = 0; j<sweeps/2; j++){
 800af2e:	8e0b      	ldrh	r3, [r1, #48]	; 0x30
		accumulant[j][i] = v;
 800af30:	6b4e      	ldr	r6, [r1, #52]	; 0x34
	for(uint16_t j = 0; j<sweeps/2; j++){
 800af32:	085b      	lsrs	r3, r3, #1
 800af34:	d013      	beq.n	800af5e <set_accumulant.constprop.87+0x3a>
		accumulant[j][i] = v;
 800af36:	249f      	movs	r4, #159	; 0x9f
 800af38:	2100      	movs	r1, #0
 800af3a:	3b01      	subs	r3, #1
 800af3c:	3a01      	subs	r2, #1
 800af3e:	b298      	uxth	r0, r3
 800af40:	b295      	uxth	r5, r2
 800af42:	3501      	adds	r5, #1
 800af44:	0080      	lsls	r0, r0, #2
 800af46:	1d33      	adds	r3, r6, #4
 800af48:	00ad      	lsls	r5, r5, #2
 800af4a:	18c0      	adds	r0, r0, r3
 800af4c:	05e4      	lsls	r4, r4, #23
void set_accumulant(float v){
 800af4e:	0033      	movs	r3, r6
		accumulant[j][i] = v;
 800af50:	cb04      	ldmia	r3!, {r2}
 800af52:	5054      	str	r4, [r2, r1]
	for(uint16_t j = 0; j<sweeps/2; j++){
 800af54:	4298      	cmp	r0, r3
 800af56:	d1fb      	bne.n	800af50 <set_accumulant.constprop.87+0x2c>
 800af58:	3104      	adds	r1, #4
	for(uint16_t i = 0; i<bins; i++){
 800af5a:	42a9      	cmp	r1, r5
 800af5c:	d1f7      	bne.n	800af4e <set_accumulant.constprop.87+0x2a>
}
 800af5e:	bd70      	pop	{r4, r5, r6, pc}
 800af60:	20000380 	.word	0x20000380

0800af64 <acc_service_get_next.constprop.80>:
 800af64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af66:	46c6      	mov	lr, r8
 800af68:	000e      	movs	r6, r1
 800af6a:	b500      	push	{lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	0005      	movs	r5, r0
 800af70:	f7f7 feeb 	bl	8002d4a <acc_service_handle_valid>
 800af74:	7eb4      	ldrb	r4, [r6, #26]
 800af76:	2c00      	cmp	r4, #0
 800af78:	d011      	beq.n	800af9e <acc_service_get_next.constprop.80+0x3a>
 800af7a:	6873      	ldr	r3, [r6, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <acc_service_get_next.constprop.80+0x22>
 800af80:	68f3      	ldr	r3, [r6, #12]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d115      	bne.n	800afb2 <acc_service_get_next.constprop.80+0x4e>
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <acc_service_get_next.constprop.80+0xb4>)
 800af88:	4a24      	ldr	r2, [pc, #144]	; (800b01c <acc_service_get_next.constprop.80+0xb8>)
 800af8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af8c:	4924      	ldr	r1, [pc, #144]	; (800b020 <acc_service_get_next.constprop.80+0xbc>)
 800af8e:	2000      	movs	r0, #0
 800af90:	4798      	blx	r3
 800af92:	2400      	movs	r4, #0
 800af94:	0020      	movs	r0, r4
 800af96:	b002      	add	sp, #8
 800af98:	bc04      	pop	{r2}
 800af9a:	4690      	mov	r8, r2
 800af9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9e:	68b3      	ldr	r3, [r6, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d106      	bne.n	800afb2 <acc_service_get_next.constprop.80+0x4e>
 800afa4:	4b1c      	ldr	r3, [pc, #112]	; (800b018 <acc_service_get_next.constprop.80+0xb4>)
 800afa6:	4a1f      	ldr	r2, [pc, #124]	; (800b024 <acc_service_get_next.constprop.80+0xc0>)
 800afa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afaa:	491d      	ldr	r1, [pc, #116]	; (800b020 <acc_service_get_next.constprop.80+0xbc>)
 800afac:	0020      	movs	r0, r4
 800afae:	4798      	blx	r3
 800afb0:	e7f0      	b.n	800af94 <acc_service_get_next.constprop.80+0x30>
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d101      	bne.n	800afba <acc_service_get_next.constprop.80+0x56>
 800afb6:	2400      	movs	r4, #0
 800afb8:	e7ec      	b.n	800af94 <acc_service_get_next.constprop.80+0x30>
 800afba:	7a2b      	ldrb	r3, [r5, #8]
 800afbc:	7832      	ldrb	r2, [r6, #0]
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d007      	beq.n	800afd2 <acc_service_get_next.constprop.80+0x6e>
 800afc2:	9200      	str	r2, [sp, #0]
 800afc4:	4a14      	ldr	r2, [pc, #80]	; (800b018 <acc_service_get_next.constprop.80+0xb4>)
 800afc6:	4916      	ldr	r1, [pc, #88]	; (800b020 <acc_service_get_next.constprop.80+0xbc>)
 800afc8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800afca:	2000      	movs	r0, #0
 800afcc:	4a16      	ldr	r2, [pc, #88]	; (800b028 <acc_service_get_next.constprop.80+0xc4>)
 800afce:	47a0      	blx	r4
 800afd0:	e7f1      	b.n	800afb6 <acc_service_get_next.constprop.80+0x52>
 800afd2:	7e37      	ldrb	r7, [r6, #24]
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	d004      	beq.n	800afe2 <acc_service_get_next.constprop.80+0x7e>
 800afd8:	0028      	movs	r0, r5
 800afda:	f7f8 fbe5 	bl	80037a8 <acc_service_activate>
 800afde:	1e07      	subs	r7, r0, #0
 800afe0:	d0e9      	beq.n	800afb6 <acc_service_get_next.constprop.80+0x52>
 800afe2:	7a6b      	ldrb	r3, [r5, #9]
 800afe4:	4698      	mov	r8, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00c      	beq.n	800b004 <acc_service_get_next.constprop.80+0xa0>
 800afea:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <acc_service_get_next.constprop.80+0xb4>)
 800afec:	4a0f      	ldr	r2, [pc, #60]	; (800b02c <acc_service_get_next.constprop.80+0xc8>)
 800afee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff0:	490b      	ldr	r1, [pc, #44]	; (800b020 <acc_service_get_next.constprop.80+0xbc>)
 800aff2:	2000      	movs	r0, #0
 800aff4:	4798      	blx	r3
 800aff6:	2400      	movs	r4, #0
 800aff8:	2f00      	cmp	r7, #0
 800affa:	d0cb      	beq.n	800af94 <acc_service_get_next.constprop.80+0x30>
 800affc:	0028      	movs	r0, r5
 800affe:	f7f7 febd 	bl	8002d7c <acc_service_deactivate>
 800b002:	e7c7      	b.n	800af94 <acc_service_get_next.constprop.80+0x30>
 800b004:	2401      	movs	r4, #1
 800b006:	692b      	ldr	r3, [r5, #16]
 800b008:	616e      	str	r6, [r5, #20]
 800b00a:	cb05      	ldmia	r3!, {r0, r2}
 800b00c:	4790      	blx	r2
 800b00e:	7e73      	ldrb	r3, [r6, #25]
 800b010:	405c      	eors	r4, r3
 800b012:	4643      	mov	r3, r8
 800b014:	616b      	str	r3, [r5, #20]
 800b016:	e7ef      	b.n	800aff8 <acc_service_get_next.constprop.80+0x94>
 800b018:	20000280 	.word	0x20000280
 800b01c:	0801df37 	.word	0x0801df37
 800b020:	0801d3e8 	.word	0x0801d3e8
 800b024:	0801df54 	.word	0x0801df54
 800b028:	0801df69 	.word	0x0801df69
 800b02c:	0801df85 	.word	0x0801df85

0800b030 <Reg_regor.constprop.76>:
	REGADRERR = -1;
 800b030:	2201      	movs	r2, #1
void Reg_regor(uint8_t reg, uint32_t orbits){
 800b032:	b510      	push	{r4, lr}
	REGADRERR = -1;
 800b034:	4b04      	ldr	r3, [pc, #16]	; (800b048 <Reg_regor.constprop.76+0x18>)
 800b036:	4252      	negs	r2, r2
	flags |= orbits;
 800b038:	6d59      	ldr	r1, [r3, #84]	; 0x54
	REGADRERR = -1;
 800b03a:	639a      	str	r2, [r3, #56]	; 0x38
	flags |= orbits;
 800b03c:	4301      	orrs	r1, r0
	RegInt_setregf(reg, flags, 1);
 800b03e:	3202      	adds	r2, #2
 800b040:	2006      	movs	r0, #6
 800b042:	f7f8 fcfd 	bl	8003a40 <RegInt_setregf>
}
 800b046:	bd10      	pop	{r4, pc}
 800b048:	20000380 	.word	0x20000380

0800b04c <acc_rss_integration_mem_calloc_debug.constprop.75>:
 800b04c:	b570      	push	{r4, r5, r6, lr}
 800b04e:	0005      	movs	r5, r0
 800b050:	f7fb f992 	bl	8006378 <acc_rss_integration_mem_alloc_debug>
 800b054:	1e04      	subs	r4, r0, #0
 800b056:	d003      	beq.n	800b060 <acc_rss_integration_mem_calloc_debug.constprop.75+0x14>
 800b058:	002a      	movs	r2, r5
 800b05a:	2100      	movs	r1, #0
 800b05c:	f008 f90a 	bl	8013274 <memset>
 800b060:	0020      	movs	r0, r4
 800b062:	bd70      	pop	{r4, r5, r6, pc}

0800b064 <internal_buffer_processed_read.constprop.30>:
 800b064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b066:	46de      	mov	lr, fp
 800b068:	464e      	mov	r6, r9
 800b06a:	4645      	mov	r5, r8
 800b06c:	4657      	mov	r7, sl
 800b06e:	b5e0      	push	{r5, r6, r7, lr}
 800b070:	4b24      	ldr	r3, [pc, #144]	; (800b104 <internal_buffer_processed_read.constprop.30+0xa0>)
 800b072:	b085      	sub	sp, #20
 800b074:	9001      	str	r0, [sp, #4]
 800b076:	4688      	mov	r8, r1
 800b078:	0017      	movs	r7, r2
 800b07a:	2100      	movs	r1, #0
 800b07c:	2206      	movs	r2, #6
 800b07e:	a802      	add	r0, sp, #8
 800b080:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800b082:	f008 f8f7 	bl	8013274 <memset>
 800b086:	2300      	movs	r3, #0
 800b088:	4699      	mov	r9, r3
 800b08a:	3301      	adds	r3, #1
 800b08c:	4645      	mov	r5, r8
 800b08e:	469b      	mov	fp, r3
 800b090:	0876      	lsrs	r6, r6, #1
 800b092:	3e03      	subs	r6, #3
 800b094:	2f00      	cmp	r7, #0
 800b096:	d108      	bne.n	800b0aa <internal_buffer_processed_read.constprop.30+0x46>
 800b098:	4640      	mov	r0, r8
 800b09a:	3006      	adds	r0, #6
 800b09c:	b005      	add	sp, #20
 800b09e:	bc3c      	pop	{r2, r3, r4, r5}
 800b0a0:	4690      	mov	r8, r2
 800b0a2:	4699      	mov	r9, r3
 800b0a4:	46a2      	mov	sl, r4
 800b0a6:	46ab      	mov	fp, r5
 800b0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0aa:	0034      	movs	r4, r6
 800b0ac:	42be      	cmp	r6, r7
 800b0ae:	d900      	bls.n	800b0b2 <internal_buffer_processed_read.constprop.30+0x4e>
 800b0b0:	003c      	movs	r4, r7
 800b0b2:	42be      	cmp	r6, r7
 800b0b4:	d202      	bcs.n	800b0bc <internal_buffer_processed_read.constprop.30+0x58>
 800b0b6:	465b      	mov	r3, fp
 800b0b8:	421c      	tst	r4, r3
 800b0ba:	d121      	bne.n	800b100 <internal_buffer_processed_read.constprop.30+0x9c>
 800b0bc:	464a      	mov	r2, r9
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <internal_buffer_processed_read.constprop.30+0xa4>)
 800b0c0:	0029      	movs	r1, r5
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	802b      	strh	r3, [r5, #0]
 800b0c6:	b2a3      	uxth	r3, r4
 800b0c8:	469a      	mov	sl, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	806b      	strh	r3, [r5, #2]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	1ce2      	adds	r2, r4, #3
 800b0d2:	80ab      	strh	r3, [r5, #4]
 800b0d4:	9801      	ldr	r0, [sp, #4]
 800b0d6:	465b      	mov	r3, fp
 800b0d8:	f7fb f960 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800b0dc:	a902      	add	r1, sp, #8
 800b0de:	2206      	movs	r2, #6
 800b0e0:	0028      	movs	r0, r5
 800b0e2:	f00a fceb 	bl	8015abc <memcpy>
 800b0e6:	464b      	mov	r3, r9
 800b0e8:	1b3f      	subs	r7, r7, r4
 800b0ea:	0064      	lsls	r4, r4, #1
 800b0ec:	4453      	add	r3, sl
 800b0ee:	192d      	adds	r5, r5, r4
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	2206      	movs	r2, #6
 800b0f4:	0029      	movs	r1, r5
 800b0f6:	a802      	add	r0, sp, #8
 800b0f8:	4699      	mov	r9, r3
 800b0fa:	f00a fcdf 	bl	8015abc <memcpy>
 800b0fe:	e7c9      	b.n	800b094 <internal_buffer_processed_read.constprop.30+0x30>
 800b100:	3c01      	subs	r4, #1
 800b102:	e7d8      	b.n	800b0b6 <internal_buffer_processed_read.constprop.30+0x52>
 800b104:	20000280 	.word	0x20000280
 800b108:	ffff8000 	.word	0xffff8000

0800b10c <acc_sensor_reg_write>:
 800b10c:	2380      	movs	r3, #128	; 0x80
 800b10e:	b513      	push	{r0, r1, r4, lr}
 800b110:	015b      	lsls	r3, r3, #5
 800b112:	ac01      	add	r4, sp, #4
 800b114:	4319      	orrs	r1, r3
 800b116:	8021      	strh	r1, [r4, #0]
 800b118:	8062      	strh	r2, [r4, #2]
 800b11a:	2300      	movs	r3, #0
 800b11c:	2202      	movs	r2, #2
 800b11e:	0021      	movs	r1, r4
 800b120:	f7fb f93c 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800b124:	bd13      	pop	{r0, r1, r4, pc}

0800b126 <acc_diagnostic_log_data_i16.constprop.20>:
 800b126:	4770      	bx	lr

0800b128 <acc_confprogram_live_patch.constprop.16>:
 800b128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b12a:	4645      	mov	r5, r8
 800b12c:	46de      	mov	lr, fp
 800b12e:	464e      	mov	r6, r9
 800b130:	4657      	mov	r7, sl
 800b132:	b5e0      	push	{r5, r6, r7, lr}
 800b134:	001d      	movs	r5, r3
 800b136:	4b4c      	ldr	r3, [pc, #304]	; (800b268 <acc_confprogram_live_patch.constprop.16+0x140>)
 800b138:	0016      	movs	r6, r2
 800b13a:	001a      	movs	r2, r3
 800b13c:	3260      	adds	r2, #96	; 0x60
 800b13e:	7812      	ldrb	r2, [r2, #0]
 800b140:	b08b      	sub	sp, #44	; 0x2c
 800b142:	4680      	mov	r8, r0
 800b144:	468b      	mov	fp, r1
 800b146:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800b148:	2a03      	cmp	r2, #3
 800b14a:	d906      	bls.n	800b15a <acc_confprogram_live_patch.constprop.16+0x32>
 800b14c:	9400      	str	r4, [sp, #0]
 800b14e:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800b150:	4a46      	ldr	r2, [pc, #280]	; (800b26c <acc_confprogram_live_patch.constprop.16+0x144>)
 800b152:	002b      	movs	r3, r5
 800b154:	4946      	ldr	r1, [pc, #280]	; (800b270 <acc_confprogram_live_patch.constprop.16+0x148>)
 800b156:	2004      	movs	r0, #4
 800b158:	47b8      	blx	r7
 800b15a:	0023      	movs	r3, r4
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	4193      	sbcs	r3, r2
 800b160:	00ed      	lsls	r5, r5, #3
 800b162:	1976      	adds	r6, r6, r5
 800b164:	2500      	movs	r5, #0
 800b166:	b2db      	uxtb	r3, r3
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	8873      	ldrh	r3, [r6, #2]
 800b16c:	429d      	cmp	r5, r3
 800b16e:	d306      	bcc.n	800b17e <acc_confprogram_live_patch.constprop.16+0x56>
 800b170:	b00b      	add	sp, #44	; 0x2c
 800b172:	bc3c      	pop	{r2, r3, r4, r5}
 800b174:	4690      	mov	r8, r2
 800b176:	4699      	mov	r9, r3
 800b178:	46a2      	mov	sl, r4
 800b17a:	46ab      	mov	fp, r5
 800b17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17e:	2206      	movs	r2, #6
 800b180:	6873      	ldr	r3, [r6, #4]
 800b182:	436a      	muls	r2, r5
 800b184:	469c      	mov	ip, r3
 800b186:	4462      	add	r2, ip
 800b188:	7810      	ldrb	r0, [r2, #0]
 800b18a:	2801      	cmp	r0, #1
 800b18c:	d059      	beq.n	800b242 <acc_confprogram_live_patch.constprop.16+0x11a>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d00b      	beq.n	800b1aa <acc_confprogram_live_patch.constprop.16+0x82>
 800b192:	2802      	cmp	r0, #2
 800b194:	d05e      	beq.n	800b254 <acc_confprogram_live_patch.constprop.16+0x12c>
 800b196:	4b34      	ldr	r3, [pc, #208]	; (800b268 <acc_confprogram_live_patch.constprop.16+0x140>)
 800b198:	4935      	ldr	r1, [pc, #212]	; (800b270 <acc_confprogram_live_patch.constprop.16+0x148>)
 800b19a:	2000      	movs	r0, #0
 800b19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b19e:	4a35      	ldr	r2, [pc, #212]	; (800b274 <acc_confprogram_live_patch.constprop.16+0x14c>)
 800b1a0:	4798      	blx	r3
 800b1a2:	21e7      	movs	r1, #231	; 0xe7
 800b1a4:	4834      	ldr	r0, [pc, #208]	; (800b278 <acc_confprogram_live_patch.constprop.16+0x150>)
 800b1a6:	f7fa fd5a 	bl	8005c5e <acc_assert_fail>
 800b1aa:	8853      	ldrh	r3, [r2, #2]
 800b1ac:	4699      	mov	r9, r3
 800b1ae:	7913      	ldrb	r3, [r2, #4]
 800b1b0:	9303      	str	r3, [sp, #12]
 800b1b2:	7953      	ldrb	r3, [r2, #5]
 800b1b4:	9304      	str	r3, [sp, #16]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9a04      	ldr	r2, [sp, #16]
 800b1ba:	469a      	mov	sl, r3
 800b1bc:	4093      	lsls	r3, r2
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d30c      	bcc.n	800b1dc <acc_confprogram_live_patch.constprop.16+0xb4>
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	4b28      	ldr	r3, [pc, #160]	; (800b268 <acc_confprogram_live_patch.constprop.16+0x140>)
 800b1c8:	9400      	str	r4, [sp, #0]
 800b1ca:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800b1cc:	4928      	ldr	r1, [pc, #160]	; (800b270 <acc_confprogram_live_patch.constprop.16+0x148>)
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	4a2a      	ldr	r2, [pc, #168]	; (800b27c <acc_confprogram_live_patch.constprop.16+0x154>)
 800b1d2:	47a0      	blx	r4
 800b1d4:	2129      	movs	r1, #41	; 0x29
 800b1d6:	4828      	ldr	r0, [pc, #160]	; (800b278 <acc_confprogram_live_patch.constprop.16+0x150>)
 800b1d8:	f7fa fd41 	bl	8005c5e <acc_assert_fail>
 800b1dc:	464a      	mov	r2, r9
 800b1de:	4b28      	ldr	r3, [pc, #160]	; (800b280 <acc_confprogram_live_patch.constprop.16+0x158>)
 800b1e0:	af07      	add	r7, sp, #28
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	803b      	strh	r3, [r7, #0]
 800b1e6:	4653      	mov	r3, sl
 800b1e8:	0001      	movs	r1, r0
 800b1ea:	80b8      	strh	r0, [r7, #4]
 800b1ec:	a804      	add	r0, sp, #16
 800b1ee:	4684      	mov	ip, r0
 800b1f0:	807b      	strh	r3, [r7, #2]
 800b1f2:	2312      	movs	r3, #18
 800b1f4:	4463      	add	r3, ip
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	f008 f83b 	bl	8013274 <memset>
 800b1fe:	4653      	mov	r3, sl
 800b200:	2205      	movs	r2, #5
 800b202:	0039      	movs	r1, r7
 800b204:	4640      	mov	r0, r8
 800b206:	f7fb f8c9 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800b20a:	aa04      	add	r2, sp, #16
 800b20c:	4694      	mov	ip, r2
 800b20e:	2312      	movs	r3, #18
 800b210:	4463      	add	r3, ip
 800b212:	0018      	movs	r0, r3
 800b214:	a906      	add	r1, sp, #24
 800b216:	f7fe fe6f 	bl	8009ef8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800b21a:	2220      	movs	r2, #32
 800b21c:	9b04      	ldr	r3, [sp, #16]
 800b21e:	9903      	ldr	r1, [sp, #12]
 800b220:	1ad2      	subs	r2, r2, r3
 800b222:	2301      	movs	r3, #1
 800b224:	425b      	negs	r3, r3
 800b226:	40d3      	lsrs	r3, r2
 800b228:	9a03      	ldr	r2, [sp, #12]
 800b22a:	4640      	mov	r0, r8
 800b22c:	4093      	lsls	r3, r2
 800b22e:	9a06      	ldr	r2, [sp, #24]
 800b230:	439a      	bics	r2, r3
 800b232:	0023      	movs	r3, r4
 800b234:	408b      	lsls	r3, r1
 800b236:	4649      	mov	r1, r9
 800b238:	431a      	orrs	r2, r3
 800b23a:	f7fe fe03 	bl	8009e44 <acc_sensor_r2_conf_write_instr>
 800b23e:	3501      	adds	r5, #1
 800b240:	e793      	b.n	800b16a <acc_confprogram_live_patch.constprop.16+0x42>
 800b242:	9905      	ldr	r1, [sp, #20]
 800b244:	8853      	ldrh	r3, [r2, #2]
 800b246:	4640      	mov	r0, r8
 800b248:	8892      	ldrh	r2, [r2, #4]
 800b24a:	9100      	str	r1, [sp, #0]
 800b24c:	4659      	mov	r1, fp
 800b24e:	f7fe fe59 	bl	8009f04 <acc_confprogram_modify_runif_sensor.constprop.19>
 800b252:	e7f4      	b.n	800b23e <acc_confprogram_live_patch.constprop.16+0x116>
 800b254:	4261      	negs	r1, r4
 800b256:	4161      	adcs	r1, r4
 800b258:	8853      	ldrh	r3, [r2, #2]
 800b25a:	4640      	mov	r0, r8
 800b25c:	8892      	ldrh	r2, [r2, #4]
 800b25e:	9100      	str	r1, [sp, #0]
 800b260:	4659      	mov	r1, fp
 800b262:	f7fe fe4f 	bl	8009f04 <acc_confprogram_modify_runif_sensor.constprop.19>
 800b266:	e7ea      	b.n	800b23e <acc_confprogram_live_patch.constprop.16+0x116>
 800b268:	20000280 	.word	0x20000280
 800b26c:	0801df9b 	.word	0x0801df9b
 800b270:	0801d748 	.word	0x0801d748
 800b274:	0801e026 	.word	0x0801e026
 800b278:	0801dff5 	.word	0x0801dff5
 800b27c:	0801dfbd 	.word	0x0801dfbd
 800b280:	ffffa000 	.word	0xffffa000

0800b284 <get_dt.constprop.10>:
 800b284:	b510      	push	{r4, lr}
 800b286:	f7fb f90f 	bl	80064a8 <acc_rss_integration_get_sensor_reference_frequency>
 800b28a:	1c01      	adds	r1, r0, #0
 800b28c:	1c04      	adds	r4, r0, #0
 800b28e:	4809      	ldr	r0, [pc, #36]	; (800b2b4 <get_dt.constprop.10+0x30>)
 800b290:	f003 fa6a 	bl	800e768 <__aeabi_fdiv>
 800b294:	f008 f9e0 	bl	8013658 <roundf>
 800b298:	1c01      	adds	r1, r0, #0
 800b29a:	1c20      	adds	r0, r4, #0
 800b29c:	f003 fb76 	bl	800e98c <__aeabi_fmul>
 800b2a0:	1c01      	adds	r1, r0, #0
 800b2a2:	20fe      	movs	r0, #254	; 0xfe
 800b2a4:	0580      	lsls	r0, r0, #22
 800b2a6:	f003 fa5f 	bl	800e768 <__aeabi_fdiv>
 800b2aa:	4903      	ldr	r1, [pc, #12]	; (800b2b8 <get_dt.constprop.10+0x34>)
 800b2ac:	f003 fa5c 	bl	800e768 <__aeabi_fdiv>
 800b2b0:	bd10      	pop	{r4, pc}
 800b2b2:	46c0      	nop			; (mov r8, r8)
 800b2b4:	4f1502f9 	.word	0x4f1502f9
 800b2b8:	42f80000 	.word	0x42f80000

0800b2bc <points_to_meter.constprop.9>:
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	0005      	movs	r5, r0
 800b2c0:	f7ff ffe0 	bl	800b284 <get_dt.constprop.10>
 800b2c4:	1c04      	adds	r4, r0, #0
 800b2c6:	0028      	movs	r0, r5
 800b2c8:	f004 fa94 	bl	800f7f4 <__aeabi_i2f>
 800b2cc:	1c21      	adds	r1, r4, #0
 800b2ce:	f003 fb5d 	bl	800e98c <__aeabi_fmul>
 800b2d2:	4904      	ldr	r1, [pc, #16]	; (800b2e4 <points_to_meter.constprop.9+0x28>)
 800b2d4:	f003 fb5a 	bl	800e98c <__aeabi_fmul>
 800b2d8:	21fc      	movs	r1, #252	; 0xfc
 800b2da:	0589      	lsls	r1, r1, #22
 800b2dc:	f003 fb56 	bl	800e98c <__aeabi_fmul>
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	4d8ef3c2 	.word	0x4d8ef3c2

0800b2e8 <UARTEx_SetNbDataToProcess.lto_priv.684>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b2ea:	4b16      	ldr	r3, [pc, #88]	; (800b344 <UARTEx_SetNbDataToProcess.lto_priv.684+0x5c>)
{
 800b2ec:	b085      	sub	sp, #20
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b2ee:	9302      	str	r3, [sp, #8]
 800b2f0:	2308      	movs	r3, #8
 800b2f2:	33ff      	adds	r3, #255	; 0xff
 800b2f4:	9303      	str	r3, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <UARTEx_SetNbDataToProcess.lto_priv.684+0x60>)
{
 800b2f8:	0004      	movs	r4, r0
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	4b13      	ldr	r3, [pc, #76]	; (800b34c <UARTEx_SetNbDataToProcess.lto_priv.684+0x64>)
 800b2fe:	9301      	str	r3, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b300:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800b302:	2b00      	cmp	r3, #0
 800b304:	d01b      	beq.n	800b33e <UARTEx_SetNbDataToProcess.lto_priv.684+0x56>
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b306:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b308:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b30a:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b30c:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b312:	5cf0      	ldrb	r0, [r6, r3]
 800b314:	5cd1      	ldrb	r1, [r2, r3]
 800b316:	00c0      	lsls	r0, r0, #3
 800b318:	f003 fef4 	bl	800f104 <__divsi3>
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b31c:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b31e:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b320:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b322:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b324:	5cf0      	ldrb	r0, [r6, r3]
 800b326:	5cd1      	ldrb	r1, [r2, r3]
 800b328:	00c0      	lsls	r0, r0, #3
 800b32a:	f003 feeb 	bl	800f104 <__divsi3>
 800b32e:	b280      	uxth	r0, r0
 800b330:	0023      	movs	r3, r4
 800b332:	346a      	adds	r4, #106	; 0x6a
 800b334:	3368      	adds	r3, #104	; 0x68
 800b336:	8018      	strh	r0, [r3, #0]
 800b338:	8027      	strh	r7, [r4, #0]
  }
}
 800b33a:	b005      	add	sp, #20
 800b33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800b33e:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800b340:	0007      	movs	r7, r0
 800b342:	e7f5      	b.n	800b330 <UARTEx_SetNbDataToProcess.lto_priv.684+0x48>
 800b344:	03010101 	.word	0x03010101
 800b348:	04020408 	.word	0x04020408
 800b34c:	01010108 	.word	0x01010108

0800b350 <HAL_UARTEx_DisableFifoMode>:
{
 800b350:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b352:	0004      	movs	r4, r0
 800b354:	347c      	adds	r4, #124	; 0x7c
 800b356:	7822      	ldrb	r2, [r4, #0]
 800b358:	2302      	movs	r3, #2
 800b35a:	2a01      	cmp	r2, #1
 800b35c:	d010      	beq.n	800b380 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800b35e:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b360:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b362:	1d05      	adds	r5, r0, #4
 800b364:	3322      	adds	r3, #34	; 0x22
 800b366:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b368:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	43b3      	bics	r3, r6
 800b36e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b370:	4b04      	ldr	r3, [pc, #16]	; (800b384 <HAL_UARTEx_DisableFifoMode+0x34>)
 800b372:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b374:	2300      	movs	r3, #0
 800b376:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b378:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b37a:	2220      	movs	r2, #32
 800b37c:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800b37e:	7023      	strb	r3, [r4, #0]
}
 800b380:	0018      	movs	r0, r3
 800b382:	bd70      	pop	{r4, r5, r6, pc}
 800b384:	dfffffff 	.word	0xdfffffff

0800b388 <HAL_UART_Transmit>:
{
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	46de      	mov	lr, fp
 800b38c:	464e      	mov	r6, r9
 800b38e:	4645      	mov	r5, r8
 800b390:	4657      	mov	r7, sl
 800b392:	469b      	mov	fp, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800b394:	1d03      	adds	r3, r0, #4
 800b396:	4699      	mov	r9, r3
 800b398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800b39a:	b5e0      	push	{r5, r6, r7, lr}
 800b39c:	0004      	movs	r4, r0
 800b39e:	000d      	movs	r5, r1
    return HAL_BUSY;
 800b3a0:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	d14c      	bne.n	800b440 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800b3a6:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	d049      	beq.n	800b440 <HAL_UART_Transmit+0xb8>
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d047      	beq.n	800b440 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3b0:	2380      	movs	r3, #128	; 0x80
 800b3b2:	68a1      	ldr	r1, [r4, #8]
 800b3b4:	015b      	lsls	r3, r3, #5
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d104      	bne.n	800b3c4 <HAL_UART_Transmit+0x3c>
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <HAL_UART_Transmit+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800b3c0:	4205      	tst	r5, r0
 800b3c2:	d13d      	bne.n	800b440 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800b3c4:	237c      	movs	r3, #124	; 0x7c
 800b3c6:	4698      	mov	r8, r3
 800b3c8:	44a0      	add	r8, r4
 800b3ca:	4643      	mov	r3, r8
 800b3cc:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800b3ce:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d035      	beq.n	800b440 <HAL_UART_Transmit+0xb8>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	7003      	strb	r3, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3da:	0023      	movs	r3, r4
 800b3dc:	2600      	movs	r6, #0
 800b3de:	3388      	adds	r3, #136	; 0x88
 800b3e0:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	2321      	movs	r3, #33	; 0x21
 800b3e6:	67c3      	str	r3, [r0, #124]	; 0x7c
 800b3e8:	4b21      	ldr	r3, [pc, #132]	; (800b470 <HAL_UART_Transmit+0xe8>)
    huart->TxXferCount = Size;
 800b3ea:	0027      	movs	r7, r4
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	3756      	adds	r7, #86	; 0x56
 800b3f0:	469a      	mov	sl, r3
    huart->TxXferSize  = Size;
 800b3f2:	0023      	movs	r3, r4
 800b3f4:	3354      	adds	r3, #84	; 0x54
 800b3f6:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3f8:	2380      	movs	r3, #128	; 0x80
    huart->TxXferCount = Size;
 800b3fa:	803a      	strh	r2, [r7, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3fc:	015b      	lsls	r3, r3, #5
 800b3fe:	4299      	cmp	r1, r3
 800b400:	d104      	bne.n	800b40c <HAL_UART_Transmit+0x84>
 800b402:	6923      	ldr	r3, [r4, #16]
 800b404:	42b3      	cmp	r3, r6
 800b406:	d101      	bne.n	800b40c <HAL_UART_Transmit+0x84>
 800b408:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800b40a:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800b40c:	883b      	ldrh	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10d      	bne.n	800b42e <HAL_UART_Transmit+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b412:	465b      	mov	r3, fp
 800b414:	4652      	mov	r2, sl
 800b416:	2140      	movs	r1, #64	; 0x40
 800b418:	0020      	movs	r0, r4
 800b41a:	f7fe fd43 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout.constprop.108>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d10d      	bne.n	800b43e <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800b422:	2320      	movs	r3, #32
 800b424:	464a      	mov	r2, r9
 800b426:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800b428:	4643      	mov	r3, r8
 800b42a:	7018      	strb	r0, [r3, #0]
 800b42c:	e008      	b.n	800b440 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b42e:	465b      	mov	r3, fp
 800b430:	4652      	mov	r2, sl
 800b432:	2180      	movs	r1, #128	; 0x80
 800b434:	0020      	movs	r0, r4
 800b436:	f7fe fd35 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout.constprop.108>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d006      	beq.n	800b44c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800b43e:	2003      	movs	r0, #3
}
 800b440:	bc3c      	pop	{r2, r3, r4, r5}
 800b442:	4690      	mov	r8, r2
 800b444:	4699      	mov	r9, r3
 800b446:	46a2      	mov	sl, r4
 800b448:	46ab      	mov	fp, r5
 800b44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800b44e:	2d00      	cmp	r5, #0
 800b450:	d109      	bne.n	800b466 <HAL_UART_Transmit+0xde>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b452:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800b454:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b456:	05db      	lsls	r3, r3, #23
 800b458:	0ddb      	lsrs	r3, r3, #23
 800b45a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800b45c:	883b      	ldrh	r3, [r7, #0]
 800b45e:	3b01      	subs	r3, #1
 800b460:	b29b      	uxth	r3, r3
 800b462:	803b      	strh	r3, [r7, #0]
 800b464:	e7d2      	b.n	800b40c <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b466:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800b468:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b46a:	6293      	str	r3, [r2, #40]	; 0x28
 800b46c:	e7f6      	b.n	800b45c <HAL_UART_Transmit+0xd4>
 800b46e:	46c0      	nop			; (mov r8, r8)
 800b470:	20000280 	.word	0x20000280

0800b474 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800b474:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800b476:	2809      	cmp	r0, #9
 800b478:	d803      	bhi.n	800b482 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b47a:	011b      	lsls	r3, r3, #4
 800b47c:	4318      	orrs	r0, r3
 800b47e:	b2c0      	uxtb	r0, r0
}
 800b480:	4770      	bx	lr
    Param -= 10U;
 800b482:	380a      	subs	r0, #10
    bcdhigh++;
 800b484:	3301      	adds	r3, #1
    Param -= 10U;
 800b486:	b2c0      	uxtb	r0, r0
 800b488:	e7f5      	b.n	800b476 <RTC_ByteToBcd2+0x2>

0800b48a <HAL_RTC_SetAlarm_IT.constprop.142>:
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48c:	46ce      	mov	lr, r9
 800b48e:	4647      	mov	r7, r8
  __HAL_LOCK(hrtc);
 800b490:	4d4e      	ldr	r5, [pc, #312]	; (800b5cc <HAL_RTC_SetAlarm_IT.constprop.142+0x142>)
 800b492:	2302      	movs	r3, #2
 800b494:	002a      	movs	r2, r5
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b496:	b580      	push	{r7, lr}
  __HAL_LOCK(hrtc);
 800b498:	3228      	adds	r2, #40	; 0x28
 800b49a:	7811      	ldrb	r1, [r2, #0]
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b49c:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 800b49e:	0018      	movs	r0, r3
 800b4a0:	2901      	cmp	r1, #1
 800b4a2:	d06c      	beq.n	800b57e <HAL_RTC_SetAlarm_IT.constprop.142+0xf4>
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b4a8:	002a      	movs	r2, r5
 800b4aa:	3229      	adds	r2, #41	; 0x29
 800b4ac:	7013      	strb	r3, [r2, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b4ae:	2240      	movs	r2, #64	; 0x40
 800b4b0:	682c      	ldr	r4, [r5, #0]
 800b4b2:	69a3      	ldr	r3, [r4, #24]
 800b4b4:	4013      	ands	r3, r2
 800b4b6:	d100      	bne.n	800b4ba <HAL_RTC_SetAlarm_IT.constprop.142+0x30>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b4b8:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4ba:	7830      	ldrb	r0, [r6, #0]
 800b4bc:	f7ff ffda 	bl	800b474 <RTC_ByteToBcd2>
 800b4c0:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b4c2:	7870      	ldrb	r0, [r6, #1]
 800b4c4:	f7ff ffd6 	bl	800b474 <RTC_ByteToBcd2>
 800b4c8:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b4ca:	78b0      	ldrb	r0, [r6, #2]
 800b4cc:	f7ff ffd2 	bl	800b474 <RTC_ByteToBcd2>
 800b4d0:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b4d2:	1c73      	adds	r3, r6, #1
 800b4d4:	7fd8      	ldrb	r0, [r3, #31]
 800b4d6:	f7ff ffcd 	bl	800b474 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4da:	6972      	ldr	r2, [r6, #20]
 800b4dc:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b4de:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4e0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b4e2:	78f2      	ldrb	r2, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b4e4:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b4e6:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	464a      	mov	r2, r9
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	4642      	mov	r2, r8
 800b4f0:	0412      	lsls	r2, r2, #16
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	433b      	orrs	r3, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b4f6:	69b2      	ldr	r2, [r6, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b4f8:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b4fa:	6873      	ldr	r3, [r6, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b4fc:	6a71      	ldr	r1, [r6, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b4fe:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b500:	22ca      	movs	r2, #202	; 0xca
 800b502:	6262      	str	r2, [r4, #36]	; 0x24
 800b504:	3a77      	subs	r2, #119	; 0x77
 800b506:	6262      	str	r2, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b508:	32ad      	adds	r2, #173	; 0xad
 800b50a:	4291      	cmp	r1, r2
 800b50c:	d13b      	bne.n	800b586 <HAL_RTC_SetAlarm_IT.constprop.142+0xfc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b50e:	69a2      	ldr	r2, [r4, #24]
 800b510:	492f      	ldr	r1, [pc, #188]	; (800b5d0 <HAL_RTC_SetAlarm_IT.constprop.142+0x146>)
 800b512:	400a      	ands	r2, r1
 800b514:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b516:	2201      	movs	r2, #1
 800b518:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b51a:	4311      	orrs	r1, r2
 800b51c:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b51e:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b520:	22fa      	movs	r2, #250	; 0xfa
 800b522:	0092      	lsls	r2, r2, #2
 800b524:	4694      	mov	ip, r2
 800b526:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b528:	68e2      	ldr	r2, [r4, #12]
 800b52a:	400a      	ands	r2, r1
 800b52c:	d01b      	beq.n	800b566 <HAL_RTC_SetAlarm_IT.constprop.142+0xdc>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b52e:	6420      	str	r0, [r4, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b530:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b532:	2380      	movs	r3, #128	; 0x80
 800b534:	69a2      	ldr	r2, [r4, #24]
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	4313      	orrs	r3, r2
 800b53a:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b53c:	2380      	movs	r3, #128	; 0x80
 800b53e:	69a2      	ldr	r2, [r4, #24]
 800b540:	015b      	lsls	r3, r3, #5
 800b542:	4313      	orrs	r3, r2
 800b544:	61a3      	str	r3, [r4, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b546:	2380      	movs	r3, #128	; 0x80
 800b548:	4a22      	ldr	r2, [pc, #136]	; (800b5d4 <HAL_RTC_SetAlarm_IT.constprop.142+0x14a>)
 800b54a:	031b      	lsls	r3, r3, #12
 800b54c:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  __HAL_UNLOCK(hrtc);
 800b54e:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b550:	430b      	orrs	r3, r1
 800b552:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b554:	23ff      	movs	r3, #255	; 0xff
 800b556:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800b558:	002b      	movs	r3, r5
 800b55a:	2201      	movs	r2, #1
 800b55c:	3329      	adds	r3, #41	; 0x29
  __HAL_UNLOCK(hrtc);
 800b55e:	3528      	adds	r5, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800b560:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800b562:	7028      	strb	r0, [r5, #0]
 800b564:	e00b      	b.n	800b57e <HAL_RTC_SetAlarm_IT.constprop.142+0xf4>
 800b566:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b568:	1bf6      	subs	r6, r6, r7
 800b56a:	4566      	cmp	r6, ip
 800b56c:	d9dc      	bls.n	800b528 <HAL_RTC_SetAlarm_IT.constprop.142+0x9e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b56e:	23ff      	movs	r3, #255	; 0xff
 800b570:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b572:	002b      	movs	r3, r5
 800b574:	2003      	movs	r0, #3
 800b576:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800b578:	3528      	adds	r5, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b57a:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800b57c:	702a      	strb	r2, [r5, #0]
}
 800b57e:	bc0c      	pop	{r2, r3}
 800b580:	4690      	mov	r8, r2
 800b582:	4699      	mov	r9, r3
 800b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b586:	69a2      	ldr	r2, [r4, #24]
 800b588:	4913      	ldr	r1, [pc, #76]	; (800b5d8 <HAL_RTC_SetAlarm_IT.constprop.142+0x14e>)
 800b58a:	400a      	ands	r2, r1
 800b58c:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b58e:	2202      	movs	r2, #2
 800b590:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b592:	4311      	orrs	r1, r2
 800b594:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b596:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b598:	22fa      	movs	r2, #250	; 0xfa
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	4694      	mov	ip, r2
 800b59e:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b5a0:	68e2      	ldr	r2, [r4, #12]
 800b5a2:	400a      	ands	r2, r1
 800b5a4:	d00c      	beq.n	800b5c0 <HAL_RTC_SetAlarm_IT.constprop.142+0x136>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b5a6:	64a0      	str	r0, [r4, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b5a8:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b5aa:	2380      	movs	r3, #128	; 0x80
 800b5ac:	69a2      	ldr	r2, [r4, #24]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b5b4:	2380      	movs	r3, #128	; 0x80
 800b5b6:	69a2      	ldr	r2, [r4, #24]
 800b5b8:	019b      	lsls	r3, r3, #6
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	61a3      	str	r3, [r4, #24]
 800b5be:	e7c2      	b.n	800b546 <HAL_RTC_SetAlarm_IT.constprop.142+0xbc>
 800b5c0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b5c2:	1bf6      	subs	r6, r6, r7
 800b5c4:	4566      	cmp	r6, ip
 800b5c6:	d9eb      	bls.n	800b5a0 <HAL_RTC_SetAlarm_IT.constprop.142+0x116>
 800b5c8:	e7d1      	b.n	800b56e <HAL_RTC_SetAlarm_IT.constprop.142+0xe4>
 800b5ca:	46c0      	nop			; (mov r8, r8)
 800b5cc:	20000280 	.word	0x20000280
 800b5d0:	fffffeff 	.word	0xfffffeff
 800b5d4:	40021804 	.word	0x40021804
 800b5d8:	fffffdff 	.word	0xfffffdff

0800b5dc <HAL_InitTick>:
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b5dc:	21fa      	movs	r1, #250	; 0xfa
{
 800b5de:	b570      	push	{r4, r5, r6, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b5e0:	4d11      	ldr	r5, [pc, #68]	; (800b628 <HAL_InitTick+0x4c>)
{
 800b5e2:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b5e4:	0089      	lsls	r1, r1, #2
 800b5e6:	6828      	ldr	r0, [r5, #0]
 800b5e8:	f003 fd02 	bl	800eff0 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b5ec:	4b0f      	ldr	r3, [pc, #60]	; (800b62c <HAL_InitTick+0x50>)
 800b5ee:	3801      	subs	r0, #1
 800b5f0:	4298      	cmp	r0, r3
 800b5f2:	d901      	bls.n	800b5f8 <HAL_InitTick+0x1c>
      status = HAL_ERROR;
 800b5f4:	2001      	movs	r0, #1
}
 800b5f6:	bd70      	pop	{r4, r5, r6, pc}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b5f8:	490d      	ldr	r1, [pc, #52]	; (800b630 <HAL_InitTick+0x54>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b5fa:	4a0e      	ldr	r2, [pc, #56]	; (800b634 <HAL_InitTick+0x58>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b5fc:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b5fe:	20c0      	movs	r0, #192	; 0xc0
 800b600:	6a13      	ldr	r3, [r2, #32]
 800b602:	0600      	lsls	r0, r0, #24
 800b604:	021b      	lsls	r3, r3, #8
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	4303      	orrs	r3, r0
 800b60a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b60c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b60e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b610:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b612:	600b      	str	r3, [r1, #0]
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b614:	2c03      	cmp	r4, #3
 800b616:	d8ed      	bhi.n	800b5f4 <HAL_InitTick+0x18>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b618:	6a13      	ldr	r3, [r2, #32]
 800b61a:	07a1      	lsls	r1, r4, #30
 800b61c:	021b      	lsls	r3, r3, #8
 800b61e:	0a1b      	lsrs	r3, r3, #8
 800b620:	430b      	orrs	r3, r1
 800b622:	6213      	str	r3, [r2, #32]
        uwTickPrio = TickPriority;
 800b624:	606c      	str	r4, [r5, #4]
 800b626:	e7e6      	b.n	800b5f6 <HAL_InitTick+0x1a>
 800b628:	20000000 	.word	0x20000000
 800b62c:	00ffffff 	.word	0x00ffffff
 800b630:	e000e010 	.word	0xe000e010
 800b634:	e000ed00 	.word	0xe000ed00

0800b638 <HAL_DMA_DeInit.part.1>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800b63a:	2501      	movs	r5, #1
 800b63c:	6807      	ldr	r7, [r0, #0]
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b63e:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800b640:	683b      	ldr	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b642:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800b644:	43ab      	bics	r3, r5
 800b646:	603b      	str	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b648:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <HAL_DMA_DeInit.part.1+0x74>)
  hdma->Instance->CCR  = 0U;
 800b64a:	2600      	movs	r6, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b64c:	18f8      	adds	r0, r7, r3
 800b64e:	f003 fccf 	bl	800eff0 <__udivsi3>
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b652:	231c      	movs	r3, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b654:	0080      	lsls	r0, r0, #2
 800b656:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b658:	4018      	ands	r0, r3
 800b65a:	002b      	movs	r3, r5
 800b65c:	4083      	lsls	r3, r0
 800b65e:	4a14      	ldr	r2, [pc, #80]	; (800b6b0 <HAL_DMA_DeInit.part.1+0x78>)
  hdma->Instance->CCR  = 0U;
 800b660:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b662:	6851      	ldr	r1, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b664:	0020      	movs	r0, r4
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b666:	430b      	orrs	r3, r1
 800b668:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b66a:	f7fe fdaa 	bl	800a1c2 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800b66e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b670:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 800b672:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b674:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b676:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	1e5a      	subs	r2, r3, #1
 800b67c:	2a03      	cmp	r2, #3
 800b67e:	d807      	bhi.n	800b690 <HAL_DMA_DeInit.part.1+0x58>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b680:	490c      	ldr	r1, [pc, #48]	; (800b6b4 <HAL_DMA_DeInit.part.1+0x7c>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b682:	4095      	lsls	r5, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b684:	468c      	mov	ip, r1
 800b686:	4463      	add	r3, ip
 800b688:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b68a:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b68c:	4b0a      	ldr	r3, [pc, #40]	; (800b6b8 <HAL_DMA_DeInit.part.1+0x80>)
 800b68e:	605d      	str	r5, [r3, #4]
  hdma->XferCpltCallback = NULL;
 800b690:	2000      	movs	r0, #0
 800b692:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b694:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b696:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b698:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800b69a:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800b69c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800b69e:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800b6a2:	1da3      	adds	r3, r4, #6
  __HAL_UNLOCK(hdma);
 800b6a4:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 800b6a6:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800b6a8:	77e0      	strb	r0, [r4, #31]
}
 800b6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ac:	bffdfff8 	.word	0xbffdfff8
 800b6b0:	40020000 	.word	0x40020000
 800b6b4:	1000823f 	.word	0x1000823f
 800b6b8:	40020940 	.word	0x40020940

0800b6bc <HAL_DMA_IRQHandler>:
{
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b6be:	211c      	movs	r1, #28
 800b6c0:	2704      	movs	r7, #4
 800b6c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 800b6c4:	4b27      	ldr	r3, [pc, #156]	; (800b764 <HAL_DMA_IRQHandler+0xa8>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b6c6:	4021      	ands	r1, r4
 800b6c8:	003c      	movs	r4, r7
 800b6ca:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800b6cc:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b6ce:	6802      	ldr	r2, [r0, #0]
 800b6d0:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b6d2:	4226      	tst	r6, r4
 800b6d4:	d00f      	beq.n	800b6f6 <HAL_DMA_IRQHandler+0x3a>
 800b6d6:	423d      	tst	r5, r7
 800b6d8:	d00d      	beq.n	800b6f6 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b6da:	6811      	ldr	r1, [r2, #0]
 800b6dc:	0689      	lsls	r1, r1, #26
 800b6de:	d402      	bmi.n	800b6e6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b6e0:	6811      	ldr	r1, [r2, #0]
 800b6e2:	43b9      	bics	r1, r7
 800b6e4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800b6e6:	685a      	ldr	r2, [r3, #4]
 800b6e8:	4314      	orrs	r4, r2
 800b6ea:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800b6ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d01b      	beq.n	800b72a <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800b6f2:	4798      	blx	r3
 800b6f4:	e019      	b.n	800b72a <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b6f6:	2702      	movs	r7, #2
 800b6f8:	003c      	movs	r4, r7
 800b6fa:	408c      	lsls	r4, r1
 800b6fc:	4226      	tst	r6, r4
 800b6fe:	d015      	beq.n	800b72c <HAL_DMA_IRQHandler+0x70>
 800b700:	423d      	tst	r5, r7
 800b702:	d013      	beq.n	800b72c <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b704:	6811      	ldr	r1, [r2, #0]
 800b706:	0689      	lsls	r1, r1, #26
 800b708:	d406      	bmi.n	800b718 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b70a:	250a      	movs	r5, #10
 800b70c:	6811      	ldr	r1, [r2, #0]
 800b70e:	43a9      	bics	r1, r5
 800b710:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b712:	2101      	movs	r1, #1
 800b714:	1d82      	adds	r2, r0, #6
 800b716:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 800b71c:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b71e:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 800b720:	1d43      	adds	r3, r0, #5
 800b722:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800b724:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b726:	4293      	cmp	r3, r2
 800b728:	d1e3      	bne.n	800b6f2 <HAL_DMA_IRQHandler+0x36>
}
 800b72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b72c:	2408      	movs	r4, #8
 800b72e:	0027      	movs	r7, r4
 800b730:	408f      	lsls	r7, r1
 800b732:	423e      	tst	r6, r7
 800b734:	d0f9      	beq.n	800b72a <HAL_DMA_IRQHandler+0x6e>
 800b736:	4225      	tst	r5, r4
 800b738:	d0f7      	beq.n	800b72a <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b73a:	250e      	movs	r5, #14
 800b73c:	6814      	ldr	r4, [r2, #0]
 800b73e:	43ac      	bics	r4, r5
 800b740:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800b742:	2201      	movs	r2, #1
 800b744:	0015      	movs	r5, r2
 800b746:	408d      	lsls	r5, r1
 800b748:	0029      	movs	r1, r5
 800b74a:	685c      	ldr	r4, [r3, #4]
 800b74c:	4321      	orrs	r1, r4
 800b74e:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b750:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b752:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800b754:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800b756:	2200      	movs	r2, #0
 800b758:	1d43      	adds	r3, r0, #5
 800b75a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800b75c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b75e:	4293      	cmp	r3, r2
 800b760:	d1c7      	bne.n	800b6f2 <HAL_DMA_IRQHandler+0x36>
 800b762:	e7e2      	b.n	800b72a <HAL_DMA_IRQHandler+0x6e>
 800b764:	40020000 	.word	0x40020000

0800b768 <HAL_DMA_Abort_IT>:
{
 800b768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800b76a:	2301      	movs	r3, #1
 800b76c:	1d44      	adds	r4, r0, #5
 800b76e:	77e3      	strb	r3, [r4, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b770:	1d85      	adds	r5, r0, #6
 800b772:	7fea      	ldrb	r2, [r5, #31]
 800b774:	2a02      	cmp	r2, #2
 800b776:	d003      	beq.n	800b780 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b778:	2204      	movs	r2, #4
 800b77a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800b77c:	0018      	movs	r0, r3
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b780:	260e      	movs	r6, #14
 800b782:	6802      	ldr	r2, [r0, #0]
 800b784:	6811      	ldr	r1, [r2, #0]
 800b786:	43b1      	bics	r1, r6
 800b788:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b78a:	6811      	ldr	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b78c:	4e13      	ldr	r6, [pc, #76]	; (800b7dc <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE(hdma);
 800b78e:	4399      	bics	r1, r3
 800b790:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b792:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b794:	6811      	ldr	r1, [r2, #0]
 800b796:	4031      	ands	r1, r6
 800b798:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800b79a:	4a11      	ldr	r2, [pc, #68]	; (800b7e0 <HAL_DMA_Abort_IT+0x78>)
 800b79c:	211c      	movs	r1, #28
 800b79e:	4694      	mov	ip, r2
 800b7a0:	6857      	ldr	r7, [r2, #4]
 800b7a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b7a4:	4011      	ands	r1, r2
 800b7a6:	408b      	lsls	r3, r1
 800b7a8:	4662      	mov	r2, ip
 800b7aa:	433b      	orrs	r3, r7
 800b7ac:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7ae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b7b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b7b2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b7b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d005      	beq.n	800b7c6 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	4032      	ands	r2, r6
 800b7be:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b7c0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b7c2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b7c4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	77eb      	strb	r3, [r5, #31]
    __HAL_UNLOCK(hdma);
 800b7ca:	2500      	movs	r5, #0
 800b7cc:	77e5      	strb	r5, [r4, #31]
    if (hdma->XferAbortCallback != NULL)
 800b7ce:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b7d0:	0013      	movs	r3, r2
 800b7d2:	42aa      	cmp	r2, r5
 800b7d4:	d0d2      	beq.n	800b77c <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800b7d6:	4790      	blx	r2
 800b7d8:	002b      	movs	r3, r5
 800b7da:	e7cf      	b.n	800b77c <HAL_DMA_Abort_IT+0x14>
 800b7dc:	fffffeff 	.word	0xfffffeff
 800b7e0:	40020000 	.word	0x40020000

0800b7e4 <I2C_ITError.lto_priv.685>:
{
 800b7e4:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b7e6:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b7e8:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b7ea:	2600      	movs	r6, #0
 800b7ec:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b7ee:	3541      	adds	r5, #65	; 0x41
 800b7f0:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b7f2:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b7f4:	4a2d      	ldr	r2, [pc, #180]	; (800b8ac <I2C_ITError.lto_priv.685+0xc8>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b7f6:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b7f8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b7fa:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b7fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800b7fe:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800b800:	4311      	orrs	r1, r2
 800b802:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b804:	2b02      	cmp	r3, #2
 800b806:	d822      	bhi.n	800b84e <I2C_ITError.lto_priv.685+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b808:	2103      	movs	r1, #3
 800b80a:	f7fe fc4b 	bl	800a0a4 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b80e:	2328      	movs	r3, #40	; 0x28
 800b810:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b812:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <I2C_ITError.lto_priv.685+0xcc>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800b814:	6326      	str	r6, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b816:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b818:	2280      	movs	r2, #128	; 0x80
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	01d2      	lsls	r2, r2, #7
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b822:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b824:	d01f      	beq.n	800b866 <I2C_ITError.lto_priv.685+0x82>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b826:	4923      	ldr	r1, [pc, #140]	; (800b8b4 <I2C_ITError.lto_priv.685+0xd0>)
    if (hi2c->hdmatx != NULL)
 800b828:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b82a:	400a      	ands	r2, r1
 800b82c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b82e:	2800      	cmp	r0, #0
 800b830:	d00c      	beq.n	800b84c <I2C_ITError.lto_priv.685+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b832:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <I2C_ITError.lto_priv.685+0xd4>)
      __HAL_UNLOCK(hi2c);
 800b834:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b836:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b838:	0023      	movs	r3, r4
 800b83a:	3340      	adds	r3, #64	; 0x40
 800b83c:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b83e:	f7ff ff93 	bl	800b768 <HAL_DMA_Abort_IT>
 800b842:	2800      	cmp	r0, #0
 800b844:	d002      	beq.n	800b84c <I2C_ITError.lto_priv.685+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b846:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b84a:	4798      	blx	r3
}
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b84e:	2107      	movs	r1, #7
 800b850:	f7fe fc28 	bl	800a0a4 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b854:	782b      	ldrb	r3, [r5, #0]
 800b856:	2b60      	cmp	r3, #96	; 0x60
 800b858:	d001      	beq.n	800b85e <I2C_ITError.lto_priv.685+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b85a:	2320      	movs	r3, #32
 800b85c:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b85e:	2300      	movs	r3, #0
 800b860:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b862:	6363      	str	r3, [r4, #52]	; 0x34
 800b864:	e7d8      	b.n	800b818 <I2C_ITError.lto_priv.685+0x34>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b866:	2080      	movs	r0, #128	; 0x80
 800b868:	0200      	lsls	r0, r0, #8
 800b86a:	4002      	ands	r2, r0
 800b86c:	d013      	beq.n	800b896 <I2C_ITError.lto_priv.685+0xb2>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	4812      	ldr	r0, [pc, #72]	; (800b8bc <I2C_ITError.lto_priv.685+0xd8>)
 800b872:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800b874:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b876:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b878:	2800      	cmp	r0, #0
 800b87a:	d0e7      	beq.n	800b84c <I2C_ITError.lto_priv.685+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b87c:	4b0e      	ldr	r3, [pc, #56]	; (800b8b8 <I2C_ITError.lto_priv.685+0xd4>)
 800b87e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b880:	0023      	movs	r3, r4
 800b882:	3340      	adds	r3, #64	; 0x40
 800b884:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b886:	f7ff ff6f 	bl	800b768 <HAL_DMA_Abort_IT>
 800b88a:	2800      	cmp	r0, #0
 800b88c:	d0de      	beq.n	800b84c <I2C_ITError.lto_priv.685+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b88e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b890:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b892:	4798      	blx	r3
 800b894:	e7da      	b.n	800b84c <I2C_ITError.lto_priv.685+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b896:	782b      	ldrb	r3, [r5, #0]
 800b898:	3440      	adds	r4, #64	; 0x40
 800b89a:	2b60      	cmp	r3, #96	; 0x60
 800b89c:	d103      	bne.n	800b8a6 <I2C_ITError.lto_priv.685+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 800b89e:	3b40      	subs	r3, #64	; 0x40
 800b8a0:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800b8a2:	7022      	strb	r2, [r4, #0]
 800b8a4:	e7d2      	b.n	800b84c <I2C_ITError.lto_priv.685+0x68>
    __HAL_UNLOCK(hi2c);
 800b8a6:	7022      	strb	r2, [r4, #0]
 800b8a8:	e7d0      	b.n	800b84c <I2C_ITError.lto_priv.685+0x68>
 800b8aa:	46c0      	nop			; (mov r8, r8)
 800b8ac:	ffff0000 	.word	0xffff0000
 800b8b0:	0800b8c1 	.word	0x0800b8c1
 800b8b4:	ffffbfff 	.word	0xffffbfff
 800b8b8:	0800a0ed 	.word	0x0800a0ed
 800b8bc:	ffff7fff 	.word	0xffff7fff

0800b8c0 <I2C_Slave_ISR_IT>:
{
 800b8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8c2:	46c6      	mov	lr, r8
  __HAL_LOCK(hi2c);
 800b8c4:	0007      	movs	r7, r0
{
 800b8c6:	b500      	push	{lr}
  __HAL_LOCK(hi2c);
 800b8c8:	3740      	adds	r7, #64	; 0x40
{
 800b8ca:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800b8cc:	783a      	ldrb	r2, [r7, #0]
{
 800b8ce:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800b8d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800b8d2:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 800b8d4:	2002      	movs	r0, #2
 800b8d6:	2a01      	cmp	r2, #1
 800b8d8:	d100      	bne.n	800b8dc <I2C_Slave_ISR_IT+0x1c>
 800b8da:	e114      	b.n	800bb06 <I2C_Slave_ISR_IT+0x246>
 800b8dc:	2201      	movs	r2, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b8de:	0909      	lsrs	r1, r1, #4
  __HAL_LOCK(hi2c);
 800b8e0:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b8e2:	4211      	tst	r1, r2
 800b8e4:	d05e      	beq.n	800b9a4 <I2C_Slave_ISR_IT+0xe4>
 800b8e6:	0931      	lsrs	r1, r6, #4
 800b8e8:	4211      	tst	r1, r2
 800b8ea:	d05b      	beq.n	800b9a4 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount == 0U)
 800b8ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b8ee:	2a00      	cmp	r2, #0
 800b8f0:	d149      	bne.n	800b986 <I2C_Slave_ISR_IT+0xc6>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800b8f2:	0022      	movs	r2, r4
 800b8f4:	3241      	adds	r2, #65	; 0x41
 800b8f6:	7811      	ldrb	r1, [r2, #0]
 800b8f8:	2928      	cmp	r1, #40	; 0x28
 800b8fa:	d134      	bne.n	800b966 <I2C_Slave_ISR_IT+0xa6>
 800b8fc:	2180      	movs	r1, #128	; 0x80
 800b8fe:	0489      	lsls	r1, r1, #18
 800b900:	428b      	cmp	r3, r1
 800b902:	d130      	bne.n	800b966 <I2C_Slave_ISR_IT+0xa6>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b904:	0029      	movs	r1, r5
 800b906:	0020      	movs	r0, r4
 800b908:	f7fe fc0b 	bl	800a122 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b90c:	2301      	movs	r3, #1
 800b90e:	4698      	mov	r8, r3
 800b910:	06ab      	lsls	r3, r5, #26
 800b912:	d400      	bmi.n	800b916 <I2C_Slave_ISR_IT+0x56>
 800b914:	e0f5      	b.n	800bb02 <I2C_Slave_ISR_IT+0x242>
 800b916:	4643      	mov	r3, r8
 800b918:	0976      	lsrs	r6, r6, #5
 800b91a:	421e      	tst	r6, r3
 800b91c:	d100      	bne.n	800b920 <I2C_Slave_ISR_IT+0x60>
 800b91e:	e0f0      	b.n	800bb02 <I2C_Slave_ISR_IT+0x242>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b920:	2220      	movs	r2, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b922:	6823      	ldr	r3, [r4, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b924:	2107      	movs	r1, #7
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b926:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b928:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b92a:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b92c:	f7fe fbba 	bl	800a0a4 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b930:	2280      	movs	r2, #128	; 0x80
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	0212      	lsls	r2, r2, #8
 800b936:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b938:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b93a:	430a      	orrs	r2, r1
 800b93c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800b93e:	685a      	ldr	r2, [r3, #4]
 800b940:	497a      	ldr	r1, [pc, #488]	; (800bb2c <I2C_Slave_ISR_IT+0x26c>)
 800b942:	400a      	ands	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b946:	f7fe fbde 	bl	800a106 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b94a:	4642      	mov	r2, r8
 800b94c:	0bb3      	lsrs	r3, r6, #14
 800b94e:	4213      	tst	r3, r2
 800b950:	d100      	bne.n	800b954 <I2C_Slave_ISR_IT+0x94>
 800b952:	e09e      	b.n	800ba92 <I2C_Slave_ISR_IT+0x1d2>
    if (hi2c->hdmatx != NULL)
 800b954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d100      	bne.n	800b95c <I2C_Slave_ISR_IT+0x9c>
 800b95a:	e0a1      	b.n	800baa0 <I2C_Slave_ISR_IT+0x1e0>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	b29b      	uxth	r3, r3
 800b962:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b964:	e09c      	b.n	800baa0 <I2C_Slave_ISR_IT+0x1e0>
 800b966:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b968:	7810      	ldrb	r0, [r2, #0]
 800b96a:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b96c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b96e:	2829      	cmp	r0, #41	; 0x29
 800b970:	d1cc      	bne.n	800b90c <I2C_Slave_ISR_IT+0x4c>
 800b972:	486f      	ldr	r0, [pc, #444]	; (800bb30 <I2C_Slave_ISR_IT+0x270>)
 800b974:	4283      	cmp	r3, r0
 800b976:	d0c9      	beq.n	800b90c <I2C_Slave_ISR_IT+0x4c>
        I2C_Flush_TXDR(hi2c);
 800b978:	0020      	movs	r0, r4
 800b97a:	f7fe fbc4 	bl	800a106 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800b97e:	0020      	movs	r0, r4
 800b980:	f7fe fbfe 	bl	800a180 <I2C_ITSlaveSeqCplt>
 800b984:	e7c2      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b986:	2110      	movs	r1, #16
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b98c:	2204      	movs	r2, #4
 800b98e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b990:	430a      	orrs	r2, r1
 800b992:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b994:	4a67      	ldr	r2, [pc, #412]	; (800bb34 <I2C_Slave_ISR_IT+0x274>)
 800b996:	4213      	tst	r3, r2
 800b998:	d1b8      	bne.n	800b90c <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b99a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b99c:	0020      	movs	r0, r4
 800b99e:	f7ff ff21 	bl	800b7e4 <I2C_ITError.lto_priv.685>
 800b9a2:	e7b3      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	0769      	lsls	r1, r5, #29
 800b9a8:	d51f      	bpl.n	800b9ea <I2C_Slave_ISR_IT+0x12a>
 800b9aa:	08b1      	lsrs	r1, r6, #2
 800b9ac:	4211      	tst	r1, r2
 800b9ae:	d01c      	beq.n	800b9ea <I2C_Slave_ISR_IT+0x12a>
    if (hi2c->XferCount > 0U)
 800b9b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b9b2:	2a00      	cmp	r2, #0
 800b9b4:	d00f      	beq.n	800b9d6 <I2C_Slave_ISR_IT+0x116>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b9ba:	6822      	ldr	r2, [r4, #0]
 800b9bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b9be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b9c0:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800b9c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b9c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b9ca:	3a01      	subs	r2, #1
 800b9cc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b9ce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b9d0:	3a01      	subs	r2, #1
 800b9d2:	b292      	uxth	r2, r2
 800b9d4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b9d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	d197      	bne.n	800b90c <I2C_Slave_ISR_IT+0x4c>
 800b9dc:	4a54      	ldr	r2, [pc, #336]	; (800bb30 <I2C_Slave_ISR_IT+0x270>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d094      	beq.n	800b90c <I2C_Slave_ISR_IT+0x4c>
        I2C_ITSlaveSeqCplt(hi2c);
 800b9e2:	0020      	movs	r0, r4
 800b9e4:	f7fe fbcc 	bl	800a180 <I2C_ITSlaveSeqCplt>
 800b9e8:	e790      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	0729      	lsls	r1, r5, #28
 800b9ee:	d532      	bpl.n	800ba56 <I2C_Slave_ISR_IT+0x196>
 800b9f0:	08f1      	lsrs	r1, r6, #3
 800b9f2:	4211      	tst	r1, r2
 800b9f4:	d02f      	beq.n	800ba56 <I2C_Slave_ISR_IT+0x196>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b9f6:	0023      	movs	r3, r4
 800b9f8:	2128      	movs	r1, #40	; 0x28
 800b9fa:	3341      	adds	r3, #65	; 0x41
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	400b      	ands	r3, r1
 800ba02:	428b      	cmp	r3, r1
 800ba04:	d122      	bne.n	800ba4c <I2C_Slave_ISR_IT+0x18c>
    transferdirection = I2C_GET_DIR(hi2c);
 800ba06:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba08:	6993      	ldr	r3, [r2, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ba0a:	6891      	ldr	r1, [r2, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ba0c:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba0e:	68e0      	ldr	r0, [r4, #12]
 800ba10:	2802      	cmp	r0, #2
 800ba12:	d114      	bne.n	800ba3e <I2C_Slave_ISR_IT+0x17e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba14:	0c1b      	lsrs	r3, r3, #16
 800ba16:	30fc      	adds	r0, #252	; 0xfc
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800ba18:	0589      	lsls	r1, r1, #22
 800ba1a:	0f49      	lsrs	r1, r1, #29
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ba1c:	4003      	ands	r3, r0
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800ba1e:	404b      	eors	r3, r1
 800ba20:	2106      	movs	r1, #6
 800ba22:	400b      	ands	r3, r1
 800ba24:	d10b      	bne.n	800ba3e <I2C_Slave_ISR_IT+0x17e>
        hi2c->AddrEventCount++;
 800ba26:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba28:	3101      	adds	r1, #1
 800ba2a:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ba2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba2e:	2902      	cmp	r1, #2
 800ba30:	d000      	beq.n	800ba34 <I2C_Slave_ISR_IT+0x174>
 800ba32:	e76b      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba34:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800ba36:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba38:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800ba3a:	703b      	strb	r3, [r7, #0]
 800ba3c:	e766      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ba3e:	2104      	movs	r1, #4
 800ba40:	0020      	movs	r0, r4
 800ba42:	f7fe fb2f 	bl	800a0a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ba46:	2300      	movs	r3, #0
 800ba48:	703b      	strb	r3, [r7, #0]
 800ba4a:	e75f      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 800ba50:	2300      	movs	r3, #0
 800ba52:	703b      	strb	r3, [r7, #0]
 800ba54:	e75a      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ba56:	2201      	movs	r2, #1
 800ba58:	07a9      	lsls	r1, r5, #30
 800ba5a:	d400      	bmi.n	800ba5e <I2C_Slave_ISR_IT+0x19e>
 800ba5c:	e756      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
 800ba5e:	0871      	lsrs	r1, r6, #1
 800ba60:	4211      	tst	r1, r2
 800ba62:	d100      	bne.n	800ba66 <I2C_Slave_ISR_IT+0x1a6>
 800ba64:	e752      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 800ba66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ba68:	2a00      	cmp	r2, #0
 800ba6a:	d00d      	beq.n	800ba88 <I2C_Slave_ISR_IT+0x1c8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba6e:	6822      	ldr	r2, [r4, #0]
 800ba70:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800ba72:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba74:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800ba76:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800ba78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ba80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ba82:	3b01      	subs	r3, #1
 800ba84:	8523      	strh	r3, [r4, #40]	; 0x28
 800ba86:	e741      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ba88:	4a2a      	ldr	r2, [pc, #168]	; (800bb34 <I2C_Slave_ISR_IT+0x274>)
 800ba8a:	4213      	tst	r3, r2
 800ba8c:	d000      	beq.n	800ba90 <I2C_Slave_ISR_IT+0x1d0>
 800ba8e:	e73d      	b.n	800b90c <I2C_Slave_ISR_IT+0x4c>
 800ba90:	e7a7      	b.n	800b9e2 <I2C_Slave_ISR_IT+0x122>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ba92:	0bf6      	lsrs	r6, r6, #15
 800ba94:	4216      	tst	r6, r2
 800ba96:	d003      	beq.n	800baa0 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->hdmarx != NULL)
 800ba98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d000      	beq.n	800baa0 <I2C_Slave_ISR_IT+0x1e0>
 800ba9e:	e75d      	b.n	800b95c <I2C_Slave_ISR_IT+0x9c>
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800baa0:	076b      	lsls	r3, r5, #29
 800baa2:	d511      	bpl.n	800bac8 <I2C_Slave_ISR_IT+0x208>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800baa4:	2304      	movs	r3, #4
 800baa6:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800baac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baae:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800bab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bab2:	3301      	adds	r3, #1
 800bab4:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800bab6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d005      	beq.n	800bac8 <I2C_Slave_ISR_IT+0x208>
      hi2c->XferSize--;
 800babc:	3b01      	subs	r3, #1
 800babe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bac0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bac2:	3b01      	subs	r3, #1
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800bac8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <I2C_Slave_ISR_IT+0x216>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bace:	2304      	movs	r3, #4
 800bad0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bad2:	4313      	orrs	r3, r2
 800bad4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bad6:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 800bad8:	2300      	movs	r3, #0
 800bada:	0026      	movs	r6, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800badc:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 800bade:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae0:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 800bae2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bae6:	3641      	adds	r6, #65	; 0x41
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00f      	beq.n	800bb0c <I2C_Slave_ISR_IT+0x24c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800baec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800baee:	0020      	movs	r0, r4
 800baf0:	f7ff fe78 	bl	800b7e4 <I2C_ITError.lto_priv.685>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800baf4:	7833      	ldrb	r3, [r6, #0]
 800baf6:	2b28      	cmp	r3, #40	; 0x28
 800baf8:	d103      	bne.n	800bb02 <I2C_Slave_ISR_IT+0x242>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bafa:	0029      	movs	r1, r5
 800bafc:	0020      	movs	r0, r4
 800bafe:	f7fe fb10 	bl	800a122 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800bb02:	2000      	movs	r0, #0
 800bb04:	7038      	strb	r0, [r7, #0]
}
 800bb06:	bc04      	pop	{r2}
 800bb08:	4690      	mov	r8, r2
 800bb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bb0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb0e:	4d08      	ldr	r5, [pc, #32]	; (800bb30 <I2C_Slave_ISR_IT+0x270>)
 800bb10:	42ab      	cmp	r3, r5
 800bb12:	d006      	beq.n	800bb22 <I2C_Slave_ISR_IT+0x262>
    I2C_ITSlaveSeqCplt(hi2c);
 800bb14:	0020      	movs	r0, r4
 800bb16:	f7fe fb33 	bl	800a180 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb1a:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb1c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bb1e:	7033      	strb	r3, [r6, #0]
 800bb20:	e7ef      	b.n	800bb02 <I2C_Slave_ISR_IT+0x242>
 800bb22:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb24:	7832      	ldrb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800bb26:	7033      	strb	r3, [r6, #0]
 800bb28:	e7eb      	b.n	800bb02 <I2C_Slave_ISR_IT+0x242>
 800bb2a:	46c0      	nop			; (mov r8, r8)
 800bb2c:	fe00e800 	.word	0xfe00e800
 800bb30:	ffff0000 	.word	0xffff0000
 800bb34:	feffffff 	.word	0xfeffffff

0800bb38 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bb38:	2338      	movs	r3, #56	; 0x38
 800bb3a:	4a21      	ldr	r2, [pc, #132]	; (800bbc0 <HAL_RCC_GetSysClockFreq+0x88>)
{
 800bb3c:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bb3e:	6891      	ldr	r1, [r2, #8]
 800bb40:	0014      	movs	r4, r2
 800bb42:	4219      	tst	r1, r3
 800bb44:	d108      	bne.n	800bb58 <HAL_RCC_GetSysClockFreq+0x20>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bb46:	2101      	movs	r1, #1
 800bb48:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bb4a:	481e      	ldr	r0, [pc, #120]	; (800bbc4 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bb4c:	049b      	lsls	r3, r3, #18
 800bb4e:	0f5b      	lsrs	r3, r3, #29
 800bb50:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bb52:	f003 fa4d 	bl	800eff0 <__udivsi3>
}
 800bb56:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bb58:	6891      	ldr	r1, [r2, #8]
 800bb5a:	4019      	ands	r1, r3
 800bb5c:	2908      	cmp	r1, #8
 800bb5e:	d02a      	beq.n	800bbb6 <HAL_RCC_GetSysClockFreq+0x7e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bb60:	6891      	ldr	r1, [r2, #8]
 800bb62:	4019      	ands	r1, r3
 800bb64:	2910      	cmp	r1, #16
 800bb66:	d11a      	bne.n	800bb9e <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bb68:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb6a:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bb6c:	43db      	mvns	r3, r3
 800bb6e:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb70:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb72:	0649      	lsls	r1, r1, #25
 800bb74:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb76:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb78:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb7a:	4015      	ands	r5, r2
    switch (pllsource)
 800bb7c:	079b      	lsls	r3, r3, #30
 800bb7e:	d109      	bne.n	800bb94 <HAL_RCC_GetSysClockFreq+0x5c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb80:	4811      	ldr	r0, [pc, #68]	; (800bbc8 <HAL_RCC_GetSysClockFreq+0x90>)
 800bb82:	f003 fa35 	bl	800eff0 <__udivsi3>
 800bb86:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bb88:	68e1      	ldr	r1, [r4, #12]
 800bb8a:	0f49      	lsrs	r1, r1, #29
 800bb8c:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800bb8e:	f003 fa2f 	bl	800eff0 <__udivsi3>
 800bb92:	e7e0      	b.n	800bb56 <HAL_RCC_GetSysClockFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bb94:	480b      	ldr	r0, [pc, #44]	; (800bbc4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800bb96:	f003 fa2b 	bl	800eff0 <__udivsi3>
 800bb9a:	4368      	muls	r0, r5
 800bb9c:	e7f4      	b.n	800bb88 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800bb9e:	6891      	ldr	r1, [r2, #8]
 800bba0:	4019      	ands	r1, r3
 800bba2:	2920      	cmp	r1, #32
 800bba4:	d009      	beq.n	800bbba <HAL_RCC_GetSysClockFreq+0x82>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800bba6:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800bba8:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b18      	cmp	r3, #24
 800bbae:	d1d2      	bne.n	800bb56 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 800bbb0:	20fa      	movs	r0, #250	; 0xfa
 800bbb2:	01c0      	lsls	r0, r0, #7
 800bbb4:	e7cf      	b.n	800bb56 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800bbb6:	4804      	ldr	r0, [pc, #16]	; (800bbc8 <HAL_RCC_GetSysClockFreq+0x90>)
 800bbb8:	e7cd      	b.n	800bb56 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800bbba:	2080      	movs	r0, #128	; 0x80
 800bbbc:	0200      	lsls	r0, r0, #8
 800bbbe:	e7ca      	b.n	800bb56 <HAL_RCC_GetSysClockFreq+0x1e>
 800bbc0:	40021000 	.word	0x40021000
 800bbc4:	00f42400 	.word	0x00f42400
 800bbc8:	007a1200 	.word	0x007a1200

0800bbcc <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800bbcc:	4b04      	ldr	r3, [pc, #16]	; (800bbe0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800bbce:	68da      	ldr	r2, [r3, #12]
 800bbd0:	4210      	tst	r0, r2
 800bbd2:	d000      	beq.n	800bbd6 <HAL_GPIO_EXTI_IRQHandler+0xa>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800bbd4:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800bbd6:	691a      	ldr	r2, [r3, #16]
 800bbd8:	4202      	tst	r2, r0
 800bbda:	d000      	beq.n	800bbde <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800bbdc:	6118      	str	r0, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 800bbde:	4770      	bx	lr
 800bbe0:	40021800 	.word	0x40021800

0800bbe4 <HAL_GPIO_Init>:
{
 800bbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbe6:	4645      	mov	r5, r8
 800bbe8:	46de      	mov	lr, fp
 800bbea:	4657      	mov	r7, sl
 800bbec:	464e      	mov	r6, r9
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bbee:	2201      	movs	r2, #1
{
 800bbf0:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bbf2:	680b      	ldr	r3, [r1, #0]
{
 800bbf4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bbf6:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bbf8:	4690      	mov	r8, r2
  uint32_t position = 0x00u;
 800bbfa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800bbfc:	9a00      	ldr	r2, [sp, #0]
 800bbfe:	40da      	lsrs	r2, r3
 800bc00:	d106      	bne.n	800bc10 <HAL_GPIO_Init+0x2c>
}
 800bc02:	b003      	add	sp, #12
 800bc04:	bc3c      	pop	{r2, r3, r4, r5}
 800bc06:	4690      	mov	r8, r2
 800bc08:	4699      	mov	r9, r3
 800bc0a:	46a2      	mov	sl, r4
 800bc0c:	46ab      	mov	fp, r5
 800bc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800bc10:	4642      	mov	r2, r8
 800bc12:	409a      	lsls	r2, r3
 800bc14:	4691      	mov	r9, r2
 800bc16:	464c      	mov	r4, r9
 800bc18:	9a00      	ldr	r2, [sp, #0]
 800bc1a:	4022      	ands	r2, r4
    if (iocurrent != 0x00u)
 800bc1c:	d100      	bne.n	800bc20 <HAL_GPIO_Init+0x3c>
 800bc1e:	e0b4      	b.n	800bd8a <HAL_GPIO_Init+0x1a6>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bc20:	684c      	ldr	r4, [r1, #4]
 800bc22:	2610      	movs	r6, #16
 800bc24:	0025      	movs	r5, r4
 800bc26:	43b5      	bics	r5, r6
 800bc28:	46ac      	mov	ip, r5
 800bc2a:	2d02      	cmp	r5, #2
 800bc2c:	d116      	bne.n	800bc5c <HAL_GPIO_Init+0x78>
        temp = GPIOx->AFR[position >> 3u];
 800bc2e:	08dd      	lsrs	r5, r3, #3
 800bc30:	00ad      	lsls	r5, r5, #2
 800bc32:	1945      	adds	r5, r0, r5
 800bc34:	6a2e      	ldr	r6, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bc36:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3u];
 800bc38:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800bc3a:	2607      	movs	r6, #7
 800bc3c:	401e      	ands	r6, r3
 800bc3e:	00b6      	lsls	r6, r6, #2
 800bc40:	40b7      	lsls	r7, r6
 800bc42:	46bb      	mov	fp, r7
 800bc44:	9501      	str	r5, [sp, #4]
 800bc46:	4657      	mov	r7, sl
 800bc48:	465d      	mov	r5, fp
 800bc4a:	43af      	bics	r7, r5
 800bc4c:	46ba      	mov	sl, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800bc4e:	690f      	ldr	r7, [r1, #16]
 800bc50:	4655      	mov	r5, sl
 800bc52:	40b7      	lsls	r7, r6
 800bc54:	003e      	movs	r6, r7
 800bc56:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800bc58:	9d01      	ldr	r5, [sp, #4]
 800bc5a:	622e      	str	r6, [r5, #32]
 800bc5c:	005d      	lsls	r5, r3, #1
 800bc5e:	46aa      	mov	sl, r5
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bc60:	2503      	movs	r5, #3
 800bc62:	4657      	mov	r7, sl
 800bc64:	40bd      	lsls	r5, r7
 800bc66:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800bc68:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bc6a:	2703      	movs	r7, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800bc6c:	402e      	ands	r6, r5
 800bc6e:	46b3      	mov	fp, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800bc70:	0026      	movs	r6, r4
 800bc72:	403e      	ands	r6, r7
 800bc74:	4657      	mov	r7, sl
 800bc76:	40be      	lsls	r6, r7
 800bc78:	465f      	mov	r7, fp
 800bc7a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800bc7c:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bc7e:	4666      	mov	r6, ip
 800bc80:	3e01      	subs	r6, #1
 800bc82:	2e01      	cmp	r6, #1
 800bc84:	d813      	bhi.n	800bcae <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR;
 800bc86:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bc88:	4657      	mov	r7, sl
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800bc8a:	402e      	ands	r6, r5
 800bc8c:	46b4      	mov	ip, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800bc8e:	68ce      	ldr	r6, [r1, #12]
 800bc90:	40be      	lsls	r6, r7
 800bc92:	4667      	mov	r7, ip
 800bc94:	433e      	orrs	r6, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc96:	464f      	mov	r7, r9
        GPIOx->OSPEEDR = temp;
 800bc98:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800bc9a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bc9c:	43be      	bics	r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800bc9e:	4647      	mov	r7, r8
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bca0:	46b4      	mov	ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800bca2:	0926      	lsrs	r6, r4, #4
 800bca4:	403e      	ands	r6, r7
 800bca6:	409e      	lsls	r6, r3
 800bca8:	4667      	mov	r7, ip
 800bcaa:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800bcac:	6046      	str	r6, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800bcae:	4657      	mov	r7, sl
      temp = GPIOx->PUPDR;
 800bcb0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800bcb2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800bcb4:	688e      	ldr	r6, [r1, #8]
 800bcb6:	40be      	lsls	r6, r7
 800bcb8:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800bcba:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800bcbc:	2580      	movs	r5, #128	; 0x80
 800bcbe:	056d      	lsls	r5, r5, #21
 800bcc0:	422c      	tst	r4, r5
 800bcc2:	d062      	beq.n	800bd8a <HAL_GPIO_Init+0x1a6>
 800bcc4:	4d32      	ldr	r5, [pc, #200]	; (800bd90 <HAL_GPIO_Init+0x1ac>)
        temp = EXTI->EXTICR[position >> 2u];
 800bcc6:	089e      	lsrs	r6, r3, #2
 800bcc8:	46ac      	mov	ip, r5
 800bcca:	00b6      	lsls	r6, r6, #2
 800bccc:	4466      	add	r6, ip
 800bcce:	6e35      	ldr	r5, [r6, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800bcd0:	001f      	movs	r7, r3
        temp = EXTI->EXTICR[position >> 2u];
 800bcd2:	46aa      	mov	sl, r5
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800bcd4:	2503      	movs	r5, #3
 800bcd6:	402f      	ands	r7, r5
 800bcd8:	40af      	lsls	r7, r5
 800bcda:	46bc      	mov	ip, r7
 800bcdc:	270f      	movs	r7, #15
 800bcde:	4665      	mov	r5, ip
 800bce0:	40af      	lsls	r7, r5
 800bce2:	4655      	mov	r5, sl
 800bce4:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800bce6:	27a0      	movs	r7, #160	; 0xa0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800bce8:	46a9      	mov	r9, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800bcea:	05ff      	lsls	r7, r7, #23
 800bcec:	2500      	movs	r5, #0
 800bcee:	42b8      	cmp	r0, r7
 800bcf0:	d00f      	beq.n	800bd12 <HAL_GPIO_Init+0x12e>
 800bcf2:	4d28      	ldr	r5, [pc, #160]	; (800bd94 <HAL_GPIO_Init+0x1b0>)
 800bcf4:	46aa      	mov	sl, r5
 800bcf6:	4645      	mov	r5, r8
 800bcf8:	4550      	cmp	r0, sl
 800bcfa:	d00a      	beq.n	800bd12 <HAL_GPIO_Init+0x12e>
 800bcfc:	4d26      	ldr	r5, [pc, #152]	; (800bd98 <HAL_GPIO_Init+0x1b4>)
 800bcfe:	46aa      	mov	sl, r5
 800bd00:	2502      	movs	r5, #2
 800bd02:	4550      	cmp	r0, sl
 800bd04:	d005      	beq.n	800bd12 <HAL_GPIO_Init+0x12e>
 800bd06:	4d25      	ldr	r5, [pc, #148]	; (800bd9c <HAL_GPIO_Init+0x1b8>)
 800bd08:	46aa      	mov	sl, r5
 800bd0a:	2505      	movs	r5, #5
 800bd0c:	4550      	cmp	r0, sl
 800bd0e:	d100      	bne.n	800bd12 <HAL_GPIO_Init+0x12e>
 800bd10:	3d02      	subs	r5, #2
 800bd12:	4667      	mov	r7, ip
 800bd14:	40bd      	lsls	r5, r7
 800bd16:	464f      	mov	r7, r9
 800bd18:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800bd1a:	6635      	str	r5, [r6, #96]	; 0x60
        temp = EXTI->IMR1;
 800bd1c:	4d20      	ldr	r5, [pc, #128]	; (800bda0 <HAL_GPIO_Init+0x1bc>)
 800bd1e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800bd20:	46b1      	mov	r9, r6
          temp |= iocurrent;
 800bd22:	464f      	mov	r7, r9
 800bd24:	4317      	orrs	r7, r2
 800bd26:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bd28:	2780      	movs	r7, #128	; 0x80
 800bd2a:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 800bd2c:	43d6      	mvns	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bd2e:	423c      	tst	r4, r7
 800bd30:	d102      	bne.n	800bd38 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800bd32:	464f      	mov	r7, r9
 800bd34:	4037      	ands	r7, r6
 800bd36:	46bc      	mov	ip, r7
        EXTI->IMR1 = temp;
 800bd38:	4667      	mov	r7, ip
 800bd3a:	67ef      	str	r7, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800bd3c:	0017      	movs	r7, r2
        temp = EXTI->EMR1;
 800bd3e:	4d19      	ldr	r5, [pc, #100]	; (800bda4 <HAL_GPIO_Init+0x1c0>)
 800bd40:	46ac      	mov	ip, r5
 800bd42:	6fed      	ldr	r5, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800bd44:	432f      	orrs	r7, r5
 800bd46:	46b9      	mov	r9, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bd48:	2780      	movs	r7, #128	; 0x80
 800bd4a:	02bf      	lsls	r7, r7, #10
 800bd4c:	423c      	tst	r4, r7
 800bd4e:	d101      	bne.n	800bd54 <HAL_GPIO_Init+0x170>
        temp &= ~(iocurrent);
 800bd50:	4035      	ands	r5, r6
 800bd52:	46a9      	mov	r9, r5
        EXTI->EMR1 = temp;
 800bd54:	4d0e      	ldr	r5, [pc, #56]	; (800bd90 <HAL_GPIO_Init+0x1ac>)
 800bd56:	4667      	mov	r7, ip
 800bd58:	46aa      	mov	sl, r5
 800bd5a:	464d      	mov	r5, r9
 800bd5c:	67fd      	str	r5, [r7, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800bd5e:	4655      	mov	r5, sl
 800bd60:	682d      	ldr	r5, [r5, #0]
          temp |= iocurrent;
 800bd62:	002f      	movs	r7, r5
 800bd64:	4317      	orrs	r7, r2
        temp = EXTI->RTSR1;
 800bd66:	46a9      	mov	r9, r5
          temp |= iocurrent;
 800bd68:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bd6a:	02e5      	lsls	r5, r4, #11
 800bd6c:	d402      	bmi.n	800bd74 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800bd6e:	464f      	mov	r7, r9
 800bd70:	4037      	ands	r7, r6
 800bd72:	46bc      	mov	ip, r7
        EXTI->RTSR1 = temp;
 800bd74:	4665      	mov	r5, ip
 800bd76:	4657      	mov	r7, sl
 800bd78:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 800bd7a:	687d      	ldr	r5, [r7, #4]
          temp |= iocurrent;
 800bd7c:	432a      	orrs	r2, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bd7e:	02a4      	lsls	r4, r4, #10
 800bd80:	d401      	bmi.n	800bd86 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800bd82:	002a      	movs	r2, r5
 800bd84:	4032      	ands	r2, r6
        EXTI->FTSR1 = temp;
 800bd86:	4654      	mov	r4, sl
 800bd88:	6062      	str	r2, [r4, #4]
    position++;
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	e736      	b.n	800bbfc <HAL_GPIO_Init+0x18>
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	40021800 	.word	0x40021800
 800bd94:	50000400 	.word	0x50000400
 800bd98:	50000800 	.word	0x50000800
 800bd9c:	50000c00 	.word	0x50000c00
 800bda0:	40021804 	.word	0x40021804
 800bda4:	40021808 	.word	0x40021808

0800bda8 <HAL_UART_Init.constprop.107>:
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdaa:	464f      	mov	r7, r9
 800bdac:	4646      	mov	r6, r8
 800bdae:	46d6      	mov	lr, sl
 800bdb0:	b5c0      	push	{r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800bdb2:	1d05      	adds	r5, r0, #4
 800bdb4:	4bd8      	ldr	r3, [pc, #864]	; (800c118 <HAL_UART_Init.constprop.107+0x370>)
 800bdb6:	6fef      	ldr	r7, [r5, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800bdb8:	b08a      	sub	sp, #40	; 0x28
 800bdba:	0004      	movs	r4, r0
 800bdbc:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_RESET)
 800bdbe:	2f00      	cmp	r7, #0
 800bdc0:	d160      	bne.n	800be84 <HAL_UART_Init.constprop.107+0xdc>
    huart->Lock = HAL_UNLOCKED;
 800bdc2:	0003      	movs	r3, r0
 800bdc4:	6806      	ldr	r6, [r0, #0]
 800bdc6:	337c      	adds	r3, #124	; 0x7c
 800bdc8:	701f      	strb	r7, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdca:	2214      	movs	r2, #20
 800bdcc:	0039      	movs	r1, r7
 800bdce:	a805      	add	r0, sp, #20
 800bdd0:	f007 fa50 	bl	8013274 <memset>
  if(huart->Instance==USART1)
 800bdd4:	4546      	cmp	r6, r8
 800bdd6:	d000      	beq.n	800bdda <HAL_UART_Init.constprop.107+0x32>
 800bdd8:	e09d      	b.n	800bf16 <HAL_UART_Init.constprop.107+0x16e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800bdda:	2080      	movs	r0, #128	; 0x80
 800bddc:	4bcf      	ldr	r3, [pc, #828]	; (800c11c <HAL_UART_Init.constprop.107+0x374>)
 800bdde:	01c0      	lsls	r0, r0, #7
 800bde0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bde2:	4301      	orrs	r1, r0
 800bde4:	6419      	str	r1, [r3, #64]	; 0x40
 800bde6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bde8:	4002      	ands	r2, r0
 800bdea:	9204      	str	r2, [sp, #16]
 800bdec:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdee:	2201      	movs	r2, #1
 800bdf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdf2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdf4:	4311      	orrs	r1, r2
 800bdf6:	6359      	str	r1, [r3, #52]	; 0x34
 800bdf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bdfa:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	9303      	str	r3, [sp, #12]
 800be00:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800be02:	23f0      	movs	r3, #240	; 0xf0
 800be04:	015b      	lsls	r3, r3, #5
 800be06:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be08:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be0a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800be0c:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be0e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be10:	f7ff fee8 	bl	800bbe4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800be14:	4ec2      	ldr	r6, [pc, #776]	; (800c120 <HAL_UART_Init.constprop.107+0x378>)
 800be16:	4bc3      	ldr	r3, [pc, #780]	; (800c124 <HAL_UART_Init.constprop.107+0x37c>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be18:	6177      	str	r7, [r6, #20]
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800be1a:	60b3      	str	r3, [r6, #8]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800be1c:	2333      	movs	r3, #51	; 0x33
 800be1e:	60f3      	str	r3, [r6, #12]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800be20:	3b23      	subs	r3, #35	; 0x23
 800be22:	6133      	str	r3, [r6, #16]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800be24:	3370      	adds	r3, #112	; 0x70
 800be26:	61b3      	str	r3, [r6, #24]
 800be28:	469a      	mov	sl, r3
 800be2a:	3b78      	subs	r3, #120	; 0x78
 800be2c:	4699      	mov	r9, r3
 800be2e:	44b1      	add	r9, r6
 800be30:	4648      	mov	r0, r9
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be32:	61f7      	str	r7, [r6, #28]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be34:	6237      	str	r7, [r6, #32]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800be36:	6277      	str	r7, [r6, #36]	; 0x24
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800be38:	62b7      	str	r7, [r6, #40]	; 0x28
 800be3a:	f7fe f9dd 	bl	800a1f8 <HAL_DMA_Init.part.0.constprop.148>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800be3e:	464b      	mov	r3, r9
 800be40:	6763      	str	r3, [r4, #116]	; 0x74
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800be42:	4bb9      	ldr	r3, [pc, #740]	; (800c128 <HAL_UART_Init.constprop.107+0x380>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be44:	66f7      	str	r7, [r6, #108]	; 0x6c
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800be46:	6673      	str	r3, [r6, #100]	; 0x64
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800be48:	2332      	movs	r3, #50	; 0x32
 800be4a:	66b3      	str	r3, [r6, #104]	; 0x68
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800be4c:	4653      	mov	r3, sl
 800be4e:	6773      	str	r3, [r6, #116]	; 0x74
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800be50:	1d33      	adds	r3, r6, #4
 800be52:	67df      	str	r7, [r3, #124]	; 0x7c
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be54:	464b      	mov	r3, r9
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800be56:	6737      	str	r7, [r6, #112]	; 0x70
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800be58:	67b7      	str	r7, [r6, #120]	; 0x78
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800be5a:	67f7      	str	r7, [r6, #124]	; 0x7c
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800be5c:	67df      	str	r7, [r3, #124]	; 0x7c
 800be5e:	0037      	movs	r7, r6
 800be60:	3764      	adds	r7, #100	; 0x64
 800be62:	0038      	movs	r0, r7
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800be64:	6334      	str	r4, [r6, #48]	; 0x30
 800be66:	f7fe f9c7 	bl	800a1f8 <HAL_DMA_Init.part.0.constprop.148>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800be6a:	21c6      	movs	r1, #198	; 0xc6
 800be6c:	4aaf      	ldr	r2, [pc, #700]	; (800c12c <HAL_UART_Init.constprop.107+0x384>)
 800be6e:	0089      	lsls	r1, r1, #2
 800be70:	5853      	ldr	r3, [r2, r1]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800be72:	368c      	adds	r6, #140	; 0x8c
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	0a1b      	lsrs	r3, r3, #8
 800be78:	67a7      	str	r7, [r4, #120]	; 0x78
 800be7a:	6034      	str	r4, [r6, #0]
 800be7c:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be7e:	2380      	movs	r3, #128	; 0x80
 800be80:	051b      	lsls	r3, r3, #20
 800be82:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800be84:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800be86:	2101      	movs	r1, #1
 800be88:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800be8a:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800be8c:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be8e:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800be90:	438b      	bics	r3, r1
 800be92:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	69e1      	ldr	r1, [r4, #28]
 800be98:	4303      	orrs	r3, r0
 800be9a:	6960      	ldr	r0, [r4, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800be9c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be9e:	4303      	orrs	r3, r0
 800bea0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bea2:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800bea4:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bea6:	4ea2      	ldr	r6, [pc, #648]	; (800c130 <HAL_UART_Init.constprop.107+0x388>)
 800bea8:	4030      	ands	r0, r6
 800beaa:	4303      	orrs	r3, r0
 800beac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beae:	6853      	ldr	r3, [r2, #4]
 800beb0:	48a0      	ldr	r0, [pc, #640]	; (800c134 <HAL_UART_Init.constprop.107+0x38c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800beb2:	4ea1      	ldr	r6, [pc, #644]	; (800c138 <HAL_UART_Init.constprop.107+0x390>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beb4:	4003      	ands	r3, r0
 800beb6:	68e0      	ldr	r0, [r4, #12]
 800beb8:	4303      	orrs	r3, r0
 800beba:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bebc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bebe:	42b2      	cmp	r2, r6
 800bec0:	d001      	beq.n	800bec6 <HAL_UART_Init.constprop.107+0x11e>
    tmpreg |= huart->Init.OneBitSampling;
 800bec2:	6a23      	ldr	r3, [r4, #32]
 800bec4:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bec6:	6893      	ldr	r3, [r2, #8]
 800bec8:	4f9c      	ldr	r7, [pc, #624]	; (800c13c <HAL_UART_Init.constprop.107+0x394>)
 800beca:	403b      	ands	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800becc:	270f      	movs	r7, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bece:	4303      	orrs	r3, r0
 800bed0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bed2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800bed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed6:	43b8      	bics	r0, r7
 800bed8:	4318      	orrs	r0, r3
 800beda:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bedc:	4542      	cmp	r2, r8
 800bede:	d13a      	bne.n	800bf56 <HAL_UART_Init.constprop.107+0x1ae>
 800bee0:	2603      	movs	r6, #3
 800bee2:	4a8e      	ldr	r2, [pc, #568]	; (800c11c <HAL_UART_Init.constprop.107+0x374>)
 800bee4:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800bee6:	4a96      	ldr	r2, [pc, #600]	; (800c140 <HAL_UART_Init.constprop.107+0x398>)
 800bee8:	4030      	ands	r0, r6
 800beea:	3201      	adds	r2, #1
 800beec:	1812      	adds	r2, r2, r0
 800beee:	7fd0      	ldrb	r0, [r2, #31]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bef0:	2280      	movs	r2, #128	; 0x80
 800bef2:	0212      	lsls	r2, r2, #8
 800bef4:	4291      	cmp	r1, r2
 800bef6:	d000      	beq.n	800befa <HAL_UART_Init.constprop.107+0x152>
 800bef8:	e3dc      	b.n	800c6b4 <HAL_UART_Init.constprop.107+0x90c>
    switch (clocksource)
 800befa:	2808      	cmp	r0, #8
 800befc:	d900      	bls.n	800bf00 <HAL_UART_Init.constprop.107+0x158>
 800befe:	e3d6      	b.n	800c6ae <HAL_UART_Init.constprop.107+0x906>
 800bf00:	f003 f86c 	bl	800efdc <__gnu_thumb1_case_uhi>
 800bf04:	03d504ec 	.word	0x03d504ec
 800bf08:	03d5033e 	.word	0x03d5033e
 800bf0c:	03d5037d 	.word	0x03d5037d
 800bf10:	03d503d5 	.word	0x03d503d5
 800bf14:	039e      	.short	0x039e
  else if(huart->Instance==USART2)
 800bf16:	4b8b      	ldr	r3, [pc, #556]	; (800c144 <HAL_UART_Init.constprop.107+0x39c>)
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	d1b3      	bne.n	800be84 <HAL_UART_Init.constprop.107+0xdc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800bf1c:	2080      	movs	r0, #128	; 0x80
 800bf1e:	4b7f      	ldr	r3, [pc, #508]	; (800c11c <HAL_UART_Init.constprop.107+0x374>)
 800bf20:	0280      	lsls	r0, r0, #10
 800bf22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bf24:	4301      	orrs	r1, r0
 800bf26:	63d9      	str	r1, [r3, #60]	; 0x3c
 800bf28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf2a:	4002      	ands	r2, r0
 800bf2c:	9202      	str	r2, [sp, #8]
 800bf2e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf30:	2201      	movs	r2, #1
 800bf32:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf34:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf36:	4311      	orrs	r1, r2
 800bf38:	6359      	str	r1, [r3, #52]	; 0x34
 800bf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf3c:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf3e:	4013      	ands	r3, r2
 800bf40:	9301      	str	r3, [sp, #4]
 800bf42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bf44:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf46:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bf48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf4a:	3b0a      	subs	r3, #10
 800bf4c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800bf4e:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bf50:	f7ff fe48 	bl	800bbe4 <HAL_GPIO_Init>
 800bf54:	e796      	b.n	800be84 <HAL_UART_Init.constprop.107+0xdc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf56:	487b      	ldr	r0, [pc, #492]	; (800c144 <HAL_UART_Init.constprop.107+0x39c>)
 800bf58:	4282      	cmp	r2, r0
 800bf5a:	d108      	bne.n	800bf6e <HAL_UART_Init.constprop.107+0x1c6>
 800bf5c:	260c      	movs	r6, #12
 800bf5e:	4a6f      	ldr	r2, [pc, #444]	; (800c11c <HAL_UART_Init.constprop.107+0x374>)
 800bf60:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800bf62:	4a77      	ldr	r2, [pc, #476]	; (800c140 <HAL_UART_Init.constprop.107+0x398>)
 800bf64:	4030      	ands	r0, r6
 800bf66:	3205      	adds	r2, #5
 800bf68:	1812      	adds	r2, r2, r0
 800bf6a:	7fd0      	ldrb	r0, [r2, #31]
 800bf6c:	e7c0      	b.n	800bef0 <HAL_UART_Init.constprop.107+0x148>
 800bf6e:	4876      	ldr	r0, [pc, #472]	; (800c148 <HAL_UART_Init.constprop.107+0x3a0>)
 800bf70:	4282      	cmp	r2, r0
 800bf72:	d101      	bne.n	800bf78 <HAL_UART_Init.constprop.107+0x1d0>
 800bf74:	f000 fcad 	bl	800c8d2 <HAL_UART_Init.constprop.107+0xb2a>
 800bf78:	4874      	ldr	r0, [pc, #464]	; (800c14c <HAL_UART_Init.constprop.107+0x3a4>)
 800bf7a:	4282      	cmp	r2, r0
 800bf7c:	d101      	bne.n	800bf82 <HAL_UART_Init.constprop.107+0x1da>
 800bf7e:	f000 fca8 	bl	800c8d2 <HAL_UART_Init.constprop.107+0xb2a>
 800bf82:	42b2      	cmp	r2, r6
 800bf84:	d001      	beq.n	800bf8a <HAL_UART_Init.constprop.107+0x1e2>
 800bf86:	f000 fc9c 	bl	800c8c2 <HAL_UART_Init.constprop.107+0xb1a>
 800bf8a:	21c0      	movs	r1, #192	; 0xc0
 800bf8c:	2080      	movs	r0, #128	; 0x80
 800bf8e:	4a63      	ldr	r2, [pc, #396]	; (800c11c <HAL_UART_Init.constprop.107+0x374>)
 800bf90:	0109      	lsls	r1, r1, #4
 800bf92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bf94:	00c0      	lsls	r0, r0, #3
 800bf96:	400a      	ands	r2, r1
 800bf98:	4282      	cmp	r2, r0
 800bf9a:	d100      	bne.n	800bf9e <HAL_UART_Init.constprop.107+0x1f6>
 800bf9c:	e155      	b.n	800c24a <HAL_UART_Init.constprop.107+0x4a2>
 800bf9e:	d900      	bls.n	800bfa2 <HAL_UART_Init.constprop.107+0x1fa>
 800bfa0:	e08a      	b.n	800c0b8 <HAL_UART_Init.constprop.107+0x310>
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	d100      	bne.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
 800bfa6:	e0ed      	b.n	800c184 <HAL_UART_Init.constprop.107+0x3dc>
        ret = HAL_ERROR;
 800bfa8:	2601      	movs	r6, #1
  huart->NbRxDataToProcess = 1;
 800bfaa:	4b69      	ldr	r3, [pc, #420]	; (800c150 <HAL_UART_Init.constprop.107+0x3a8>)
 800bfac:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->NbTxDataToProcess = 1;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 800bfb2:	6723      	str	r3, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfb4:	2e01      	cmp	r6, #1
 800bfb6:	d101      	bne.n	800bfbc <HAL_UART_Init.constprop.107+0x214>
 800bfb8:	f000 fc7c 	bl	800c8b4 <HAL_UART_Init.constprop.107+0xb0c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	2a00      	cmp	r2, #0
 800bfc2:	d049      	beq.n	800c058 <HAL_UART_Init.constprop.107+0x2b0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfc4:	07d1      	lsls	r1, r2, #31
 800bfc6:	d505      	bpl.n	800bfd4 <HAL_UART_Init.constprop.107+0x22c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfc8:	6859      	ldr	r1, [r3, #4]
 800bfca:	4862      	ldr	r0, [pc, #392]	; (800c154 <HAL_UART_Init.constprop.107+0x3ac>)
 800bfcc:	4001      	ands	r1, r0
 800bfce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bfd0:	4301      	orrs	r1, r0
 800bfd2:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfd4:	0791      	lsls	r1, r2, #30
 800bfd6:	d505      	bpl.n	800bfe4 <HAL_UART_Init.constprop.107+0x23c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfd8:	6859      	ldr	r1, [r3, #4]
 800bfda:	485f      	ldr	r0, [pc, #380]	; (800c158 <HAL_UART_Init.constprop.107+0x3b0>)
 800bfdc:	4001      	ands	r1, r0
 800bfde:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bfe0:	4301      	orrs	r1, r0
 800bfe2:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfe4:	0751      	lsls	r1, r2, #29
 800bfe6:	d505      	bpl.n	800bff4 <HAL_UART_Init.constprop.107+0x24c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bfe8:	6859      	ldr	r1, [r3, #4]
 800bfea:	485c      	ldr	r0, [pc, #368]	; (800c15c <HAL_UART_Init.constprop.107+0x3b4>)
 800bfec:	4001      	ands	r1, r0
 800bfee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bff0:	4301      	orrs	r1, r0
 800bff2:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bff4:	0711      	lsls	r1, r2, #28
 800bff6:	d505      	bpl.n	800c004 <HAL_UART_Init.constprop.107+0x25c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bff8:	6859      	ldr	r1, [r3, #4]
 800bffa:	4859      	ldr	r0, [pc, #356]	; (800c160 <HAL_UART_Init.constprop.107+0x3b8>)
 800bffc:	4001      	ands	r1, r0
 800bffe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c000:	4301      	orrs	r1, r0
 800c002:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c004:	06d1      	lsls	r1, r2, #27
 800c006:	d505      	bpl.n	800c014 <HAL_UART_Init.constprop.107+0x26c>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c008:	6899      	ldr	r1, [r3, #8]
 800c00a:	4856      	ldr	r0, [pc, #344]	; (800c164 <HAL_UART_Init.constprop.107+0x3bc>)
 800c00c:	4001      	ands	r1, r0
 800c00e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800c010:	4301      	orrs	r1, r0
 800c012:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c014:	0691      	lsls	r1, r2, #26
 800c016:	d505      	bpl.n	800c024 <HAL_UART_Init.constprop.107+0x27c>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c018:	6899      	ldr	r1, [r3, #8]
 800c01a:	4853      	ldr	r0, [pc, #332]	; (800c168 <HAL_UART_Init.constprop.107+0x3c0>)
 800c01c:	4001      	ands	r1, r0
 800c01e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800c020:	4301      	orrs	r1, r0
 800c022:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c024:	0651      	lsls	r1, r2, #25
 800c026:	d50f      	bpl.n	800c048 <HAL_UART_Init.constprop.107+0x2a0>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c028:	6859      	ldr	r1, [r3, #4]
 800c02a:	4f50      	ldr	r7, [pc, #320]	; (800c16c <HAL_UART_Init.constprop.107+0x3c4>)
 800c02c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c02e:	4039      	ands	r1, r7
 800c030:	4301      	orrs	r1, r0
 800c032:	6059      	str	r1, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c034:	2180      	movs	r1, #128	; 0x80
 800c036:	0349      	lsls	r1, r1, #13
 800c038:	4288      	cmp	r0, r1
 800c03a:	d105      	bne.n	800c048 <HAL_UART_Init.constprop.107+0x2a0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c03c:	6859      	ldr	r1, [r3, #4]
 800c03e:	484c      	ldr	r0, [pc, #304]	; (800c170 <HAL_UART_Init.constprop.107+0x3c8>)
 800c040:	4001      	ands	r1, r0
 800c042:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c044:	4301      	orrs	r1, r0
 800c046:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c048:	0612      	lsls	r2, r2, #24
 800c04a:	d505      	bpl.n	800c058 <HAL_UART_Init.constprop.107+0x2b0>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	4949      	ldr	r1, [pc, #292]	; (800c174 <HAL_UART_Init.constprop.107+0x3cc>)
 800c050:	400a      	ands	r2, r1
 800c052:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c054:	430a      	orrs	r2, r1
 800c056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	4947      	ldr	r1, [pc, #284]	; (800c178 <HAL_UART_Init.constprop.107+0x3d0>)
 800c05c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c05e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	438a      	bics	r2, r1
 800c066:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c068:	2201      	movs	r2, #1
 800c06a:	6819      	ldr	r1, [r3, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c070:	0022      	movs	r2, r4
 800c072:	2100      	movs	r1, #0
 800c074:	3288      	adds	r2, #136	; 0x88
 800c076:	6011      	str	r1, [r2, #0]
  return uwTick;
 800c078:	4a40      	ldr	r2, [pc, #256]	; (800c17c <HAL_UART_Init.constprop.107+0x3d4>)
 800c07a:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	071b      	lsls	r3, r3, #28
 800c080:	d501      	bpl.n	800c086 <HAL_UART_Init.constprop.107+0x2de>
 800c082:	f000 fc0b 	bl	800c89c <HAL_UART_Init.constprop.107+0xaf4>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	075b      	lsls	r3, r3, #29
 800c08c:	d50a      	bpl.n	800c0a4 <HAL_UART_Init.constprop.107+0x2fc>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c08e:	2180      	movs	r1, #128	; 0x80
 800c090:	4b3b      	ldr	r3, [pc, #236]	; (800c180 <HAL_UART_Init.constprop.107+0x3d8>)
 800c092:	003a      	movs	r2, r7
 800c094:	03c9      	lsls	r1, r1, #15
 800c096:	0020      	movs	r0, r4
 800c098:	f7fd ff04 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout.constprop.108>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d001      	beq.n	800c0a4 <HAL_UART_Init.constprop.107+0x2fc>
 800c0a0:	f000 fc07 	bl	800c8b2 <HAL_UART_Init.constprop.107+0xb0a>
  huart->RxState = HAL_UART_STATE_READY;
 800c0a4:	0022      	movs	r2, r4
  huart->gState = HAL_UART_STATE_READY;
 800c0a6:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800c0a8:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_READY;
 800c0aa:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c0ac:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	347c      	adds	r4, #124	; 0x7c
 800c0b2:	7023      	strb	r3, [r4, #0]
 800c0b4:	f000 fbfe 	bl	800c8b4 <HAL_UART_Init.constprop.107+0xb0c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0b8:	2080      	movs	r0, #128	; 0x80
 800c0ba:	0100      	lsls	r0, r0, #4
 800c0bc:	4282      	cmp	r2, r0
 800c0be:	d100      	bne.n	800c0c2 <HAL_UART_Init.constprop.107+0x31a>
 800c0c0:	e0a8      	b.n	800c214 <HAL_UART_Init.constprop.107+0x46c>
 800c0c2:	428a      	cmp	r2, r1
 800c0c4:	d000      	beq.n	800c0c8 <HAL_UART_Init.constprop.107+0x320>
 800c0c6:	e76f      	b.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d020      	beq.n	800c10e <HAL_UART_Init.constprop.107+0x366>
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d100      	bne.n	800c0d2 <HAL_UART_Init.constprop.107+0x32a>
 800c0d0:	e107      	b.n	800c2e2 <HAL_UART_Init.constprop.107+0x53a>
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d100      	bne.n	800c0d8 <HAL_UART_Init.constprop.107+0x330>
 800c0d6:	e108      	b.n	800c2ea <HAL_UART_Init.constprop.107+0x542>
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d100      	bne.n	800c0de <HAL_UART_Init.constprop.107+0x336>
 800c0dc:	e109      	b.n	800c2f2 <HAL_UART_Init.constprop.107+0x54a>
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d100      	bne.n	800c0e4 <HAL_UART_Init.constprop.107+0x33c>
 800c0e2:	e109      	b.n	800c2f8 <HAL_UART_Init.constprop.107+0x550>
 800c0e4:	2b05      	cmp	r3, #5
 800c0e6:	d100      	bne.n	800c0ea <HAL_UART_Init.constprop.107+0x342>
 800c0e8:	e10a      	b.n	800c300 <HAL_UART_Init.constprop.107+0x558>
 800c0ea:	2b06      	cmp	r3, #6
 800c0ec:	d100      	bne.n	800c0f0 <HAL_UART_Init.constprop.107+0x348>
 800c0ee:	e10a      	b.n	800c306 <HAL_UART_Init.constprop.107+0x55e>
 800c0f0:	2b07      	cmp	r3, #7
 800c0f2:	d100      	bne.n	800c0f6 <HAL_UART_Init.constprop.107+0x34e>
 800c0f4:	e10a      	b.n	800c30c <HAL_UART_Init.constprop.107+0x564>
 800c0f6:	2b08      	cmp	r3, #8
 800c0f8:	d100      	bne.n	800c0fc <HAL_UART_Init.constprop.107+0x354>
 800c0fa:	e10b      	b.n	800c314 <HAL_UART_Init.constprop.107+0x56c>
 800c0fc:	2b09      	cmp	r3, #9
 800c0fe:	d100      	bne.n	800c102 <HAL_UART_Init.constprop.107+0x35a>
 800c100:	e10b      	b.n	800c31a <HAL_UART_Init.constprop.107+0x572>
 800c102:	2b0a      	cmp	r3, #10
 800c104:	d100      	bne.n	800c108 <HAL_UART_Init.constprop.107+0x360>
 800c106:	e10c      	b.n	800c322 <HAL_UART_Init.constprop.107+0x57a>
 800c108:	2b0b      	cmp	r3, #11
 800c10a:	d100      	bne.n	800c10e <HAL_UART_Init.constprop.107+0x366>
 800c10c:	e10d      	b.n	800c32a <HAL_UART_Init.constprop.107+0x582>
 800c10e:	2080      	movs	r0, #128	; 0x80
 800c110:	2308      	movs	r3, #8
 800c112:	0200      	lsls	r0, r0, #8
 800c114:	e065      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c116:	46c0      	nop			; (mov r8, r8)
 800c118:	40013800 	.word	0x40013800
 800c11c:	40021000 	.word	0x40021000
 800c120:	20000400 	.word	0x20000400
 800c124:	40020008 	.word	0x40020008
 800c128:	4002001c 	.word	0x4002001c
 800c12c:	e000e100 	.word	0xe000e100
 800c130:	cfff69f3 	.word	0xcfff69f3
 800c134:	ffffcfff 	.word	0xffffcfff
 800c138:	40008000 	.word	0x40008000
 800c13c:	11fff4ff 	.word	0x11fff4ff
 800c140:	080191d8 	.word	0x080191d8
 800c144:	40004400 	.word	0x40004400
 800c148:	40004800 	.word	0x40004800
 800c14c:	40004c00 	.word	0x40004c00
 800c150:	00010001 	.word	0x00010001
 800c154:	fffdffff 	.word	0xfffdffff
 800c158:	fffeffff 	.word	0xfffeffff
 800c15c:	fffbffff 	.word	0xfffbffff
 800c160:	ffff7fff 	.word	0xffff7fff
 800c164:	ffffefff 	.word	0xffffefff
 800c168:	ffffdfff 	.word	0xffffdfff
 800c16c:	ffefffff 	.word	0xffefffff
 800c170:	ff9fffff 	.word	0xff9fffff
 800c174:	fff7ffff 	.word	0xfff7ffff
 800c178:	ffffb7ff 	.word	0xffffb7ff
 800c17c:	20000280 	.word	0x20000280
 800c180:	01ffffff 	.word	0x01ffffff
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c184:	f7fe f888 	bl	800a298 <HAL_RCC_GetPCLK1Freq>
 800c188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c18a:	2101      	movs	r1, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d021      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c190:	1849      	adds	r1, r1, r1
 800c192:	2b01      	cmp	r3, #1
 800c194:	d01e      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c196:	3102      	adds	r1, #2
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d01b      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c19c:	3102      	adds	r1, #2
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d018      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1a2:	3102      	adds	r1, #2
 800c1a4:	2b04      	cmp	r3, #4
 800c1a6:	d015      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1a8:	3102      	adds	r1, #2
 800c1aa:	2b05      	cmp	r3, #5
 800c1ac:	d012      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1ae:	3102      	adds	r1, #2
 800c1b0:	2b06      	cmp	r3, #6
 800c1b2:	d00f      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1b4:	3104      	adds	r1, #4
 800c1b6:	2b07      	cmp	r3, #7
 800c1b8:	d00c      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1ba:	3110      	adds	r1, #16
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d009      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1c0:	3120      	adds	r1, #32
 800c1c2:	2b09      	cmp	r3, #9
 800c1c4:	d006      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1c6:	3140      	adds	r1, #64	; 0x40
 800c1c8:	2b0a      	cmp	r3, #10
 800c1ca:	d003      	beq.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1cc:	397f      	subs	r1, #127	; 0x7f
 800c1ce:	2b0b      	cmp	r3, #11
 800c1d0:	d100      	bne.n	800c1d4 <HAL_UART_Init.constprop.107+0x42c>
 800c1d2:	31ff      	adds	r1, #255	; 0xff
 800c1d4:	f002 ff0c 	bl	800eff0 <__udivsi3>
 800c1d8:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800c1da:	2600      	movs	r6, #0
 800c1dc:	42b0      	cmp	r0, r6
 800c1de:	d100      	bne.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c1e0:	e6e3      	b.n	800bfaa <HAL_UART_Init.constprop.107+0x202>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1e2:	2103      	movs	r1, #3
 800c1e4:	6862      	ldr	r2, [r4, #4]
 800c1e6:	4351      	muls	r1, r2
 800c1e8:	4281      	cmp	r1, r0
 800c1ea:	d900      	bls.n	800c1ee <HAL_UART_Init.constprop.107+0x446>
 800c1ec:	e6dc      	b.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c1ee:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c1f0:	4281      	cmp	r1, r0
 800c1f2:	d200      	bcs.n	800c1f6 <HAL_UART_Init.constprop.107+0x44e>
 800c1f4:	e6d8      	b.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
        switch (clocksource)
 800c1f6:	2b08      	cmp	r3, #8
 800c1f8:	d900      	bls.n	800c1fc <HAL_UART_Init.constprop.107+0x454>
 800c1fa:	e17f      	b.n	800c4fc <HAL_UART_Init.constprop.107+0x754>
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f002 feed 	bl	800efdc <__gnu_thumb1_case_uhi>
 800c202:	0097      	.short	0x0097
 800c204:	00ce017d 	.word	0x00ce017d
 800c208:	0113017d 	.word	0x0113017d
 800c20c:	017d017d 	.word	0x017d017d
 800c210:	0138017d 	.word	0x0138017d
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c214:	2b00      	cmp	r3, #0
 800c216:	d015      	beq.n	800c244 <HAL_UART_Init.constprop.107+0x49c>
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d042      	beq.n	800c2a2 <HAL_UART_Init.constprop.107+0x4fa>
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	d043      	beq.n	800c2a8 <HAL_UART_Init.constprop.107+0x500>
 800c220:	2b03      	cmp	r3, #3
 800c222:	d043      	beq.n	800c2ac <HAL_UART_Init.constprop.107+0x504>
 800c224:	2b04      	cmp	r3, #4
 800c226:	d044      	beq.n	800c2b2 <HAL_UART_Init.constprop.107+0x50a>
 800c228:	2b05      	cmp	r3, #5
 800c22a:	d045      	beq.n	800c2b8 <HAL_UART_Init.constprop.107+0x510>
 800c22c:	2b06      	cmp	r3, #6
 800c22e:	d046      	beq.n	800c2be <HAL_UART_Init.constprop.107+0x516>
 800c230:	2b07      	cmp	r3, #7
 800c232:	d047      	beq.n	800c2c4 <HAL_UART_Init.constprop.107+0x51c>
 800c234:	2b08      	cmp	r3, #8
 800c236:	d048      	beq.n	800c2ca <HAL_UART_Init.constprop.107+0x522>
 800c238:	2b09      	cmp	r3, #9
 800c23a:	d049      	beq.n	800c2d0 <HAL_UART_Init.constprop.107+0x528>
 800c23c:	2b0a      	cmp	r3, #10
 800c23e:	d04a      	beq.n	800c2d6 <HAL_UART_Init.constprop.107+0x52e>
 800c240:	2b0b      	cmp	r3, #11
 800c242:	d04b      	beq.n	800c2dc <HAL_UART_Init.constprop.107+0x534>
 800c244:	2302      	movs	r3, #2
 800c246:	48af      	ldr	r0, [pc, #700]	; (800c504 <HAL_UART_Init.constprop.107+0x75c>)
 800c248:	e7cb      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c24a:	f7ff fc75 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
 800c24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c250:	2101      	movs	r1, #1
 800c252:	2b00      	cmp	r3, #0
 800c254:	d021      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c256:	1849      	adds	r1, r1, r1
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d01e      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c25c:	3102      	adds	r1, #2
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d01b      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c262:	3102      	adds	r1, #2
 800c264:	2b03      	cmp	r3, #3
 800c266:	d018      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c268:	3102      	adds	r1, #2
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d015      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c26e:	3102      	adds	r1, #2
 800c270:	2b05      	cmp	r3, #5
 800c272:	d012      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c274:	3102      	adds	r1, #2
 800c276:	2b06      	cmp	r3, #6
 800c278:	d00f      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c27a:	3104      	adds	r1, #4
 800c27c:	2b07      	cmp	r3, #7
 800c27e:	d00c      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c280:	3110      	adds	r1, #16
 800c282:	2b08      	cmp	r3, #8
 800c284:	d009      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c286:	3120      	adds	r1, #32
 800c288:	2b09      	cmp	r3, #9
 800c28a:	d006      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c28c:	3140      	adds	r1, #64	; 0x40
 800c28e:	2b0a      	cmp	r3, #10
 800c290:	d003      	beq.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c292:	397f      	subs	r1, #127	; 0x7f
 800c294:	2b0b      	cmp	r3, #11
 800c296:	d100      	bne.n	800c29a <HAL_UART_Init.constprop.107+0x4f2>
 800c298:	31ff      	adds	r1, #255	; 0xff
 800c29a:	f002 fea9 	bl	800eff0 <__udivsi3>
 800c29e:	2304      	movs	r3, #4
 800c2a0:	e79b      	b.n	800c1da <HAL_UART_Init.constprop.107+0x432>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	4898      	ldr	r0, [pc, #608]	; (800c508 <HAL_UART_Init.constprop.107+0x760>)
 800c2a6:	e79c      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2a8:	4898      	ldr	r0, [pc, #608]	; (800c50c <HAL_UART_Init.constprop.107+0x764>)
 800c2aa:	e79a      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	4898      	ldr	r0, [pc, #608]	; (800c510 <HAL_UART_Init.constprop.107+0x768>)
 800c2b0:	e797      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	4897      	ldr	r0, [pc, #604]	; (800c514 <HAL_UART_Init.constprop.107+0x76c>)
 800c2b6:	e794      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	4897      	ldr	r0, [pc, #604]	; (800c518 <HAL_UART_Init.constprop.107+0x770>)
 800c2bc:	e791      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	4896      	ldr	r0, [pc, #600]	; (800c51c <HAL_UART_Init.constprop.107+0x774>)
 800c2c2:	e78e      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	4896      	ldr	r0, [pc, #600]	; (800c520 <HAL_UART_Init.constprop.107+0x778>)
 800c2c8:	e78b      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	4895      	ldr	r0, [pc, #596]	; (800c524 <HAL_UART_Init.constprop.107+0x77c>)
 800c2ce:	e788      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	4895      	ldr	r0, [pc, #596]	; (800c528 <HAL_UART_Init.constprop.107+0x780>)
 800c2d4:	e785      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2d6:	2302      	movs	r3, #2
 800c2d8:	4894      	ldr	r0, [pc, #592]	; (800c52c <HAL_UART_Init.constprop.107+0x784>)
 800c2da:	e782      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	4894      	ldr	r0, [pc, #592]	; (800c530 <HAL_UART_Init.constprop.107+0x788>)
 800c2e0:	e77f      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c2e2:	2080      	movs	r0, #128	; 0x80
 800c2e4:	2308      	movs	r3, #8
 800c2e6:	01c0      	lsls	r0, r0, #7
 800c2e8:	e77b      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2ea:	2080      	movs	r0, #128	; 0x80
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	0180      	lsls	r0, r0, #6
 800c2f0:	e777      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2f2:	2308      	movs	r3, #8
 800c2f4:	488f      	ldr	r0, [pc, #572]	; (800c534 <HAL_UART_Init.constprop.107+0x78c>)
 800c2f6:	e774      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c2f8:	2080      	movs	r0, #128	; 0x80
 800c2fa:	2308      	movs	r3, #8
 800c2fc:	0140      	lsls	r0, r0, #5
 800c2fe:	e770      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c300:	2308      	movs	r3, #8
 800c302:	488d      	ldr	r0, [pc, #564]	; (800c538 <HAL_UART_Init.constprop.107+0x790>)
 800c304:	e76d      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c306:	2308      	movs	r3, #8
 800c308:	488c      	ldr	r0, [pc, #560]	; (800c53c <HAL_UART_Init.constprop.107+0x794>)
 800c30a:	e76a      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c30c:	2080      	movs	r0, #128	; 0x80
 800c30e:	2308      	movs	r3, #8
 800c310:	0100      	lsls	r0, r0, #4
 800c312:	e766      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c314:	2080      	movs	r0, #128	; 0x80
 800c316:	00c0      	lsls	r0, r0, #3
 800c318:	e763      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c31a:	2080      	movs	r0, #128	; 0x80
 800c31c:	2308      	movs	r3, #8
 800c31e:	0080      	lsls	r0, r0, #2
 800c320:	e75f      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c322:	2080      	movs	r0, #128	; 0x80
 800c324:	2308      	movs	r3, #8
 800c326:	0040      	lsls	r0, r0, #1
 800c328:	e75b      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
 800c32a:	2308      	movs	r3, #8
 800c32c:	2080      	movs	r0, #128	; 0x80
 800c32e:	e758      	b.n	800c1e2 <HAL_UART_Init.constprop.107+0x43a>
            pclk = HAL_RCC_GetPCLK1Freq();
 800c330:	f7fd ffb2 	bl	800a298 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c336:	2201      	movs	r2, #1
 800c338:	2300      	movs	r3, #0
 800c33a:	2900      	cmp	r1, #0
 800c33c:	d07b      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c33e:	2202      	movs	r2, #2
 800c340:	2300      	movs	r3, #0
 800c342:	2901      	cmp	r1, #1
 800c344:	d077      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c346:	2204      	movs	r2, #4
 800c348:	2300      	movs	r3, #0
 800c34a:	2902      	cmp	r1, #2
 800c34c:	d073      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c34e:	2206      	movs	r2, #6
 800c350:	2300      	movs	r3, #0
 800c352:	2903      	cmp	r1, #3
 800c354:	d06f      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c356:	2208      	movs	r2, #8
 800c358:	2300      	movs	r3, #0
 800c35a:	2904      	cmp	r1, #4
 800c35c:	d06b      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c35e:	220a      	movs	r2, #10
 800c360:	2300      	movs	r3, #0
 800c362:	2905      	cmp	r1, #5
 800c364:	d067      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c366:	220c      	movs	r2, #12
 800c368:	2300      	movs	r3, #0
 800c36a:	2906      	cmp	r1, #6
 800c36c:	d063      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c36e:	2210      	movs	r2, #16
 800c370:	2300      	movs	r3, #0
 800c372:	2907      	cmp	r1, #7
 800c374:	d05f      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c376:	2220      	movs	r2, #32
 800c378:	2300      	movs	r3, #0
 800c37a:	2908      	cmp	r1, #8
 800c37c:	d05b      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c37e:	2240      	movs	r2, #64	; 0x40
 800c380:	2300      	movs	r3, #0
 800c382:	2909      	cmp	r1, #9
 800c384:	d057      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c386:	2280      	movs	r2, #128	; 0x80
 800c388:	2300      	movs	r3, #0
 800c38a:	290a      	cmp	r1, #10
 800c38c:	d053      	beq.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c38e:	2201      	movs	r2, #1
 800c390:	2300      	movs	r3, #0
 800c392:	290b      	cmp	r1, #11
 800c394:	d14f      	bne.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
 800c396:	2280      	movs	r2, #128	; 0x80
 800c398:	2300      	movs	r3, #0
 800c39a:	0052      	lsls	r2, r2, #1
 800c39c:	e04b      	b.n	800c436 <HAL_UART_Init.constprop.107+0x68e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d03e      	beq.n	800c422 <HAL_UART_Init.constprop.107+0x67a>
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d01e      	beq.n	800c3e6 <HAL_UART_Init.constprop.107+0x63e>
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d01f      	beq.n	800c3ec <HAL_UART_Init.constprop.107+0x644>
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d020      	beq.n	800c3f2 <HAL_UART_Init.constprop.107+0x64a>
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d021      	beq.n	800c3f8 <HAL_UART_Init.constprop.107+0x650>
 800c3b4:	2b05      	cmp	r3, #5
 800c3b6:	d022      	beq.n	800c3fe <HAL_UART_Init.constprop.107+0x656>
 800c3b8:	2b06      	cmp	r3, #6
 800c3ba:	d023      	beq.n	800c404 <HAL_UART_Init.constprop.107+0x65c>
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d024      	beq.n	800c40a <HAL_UART_Init.constprop.107+0x662>
 800c3c0:	2b08      	cmp	r3, #8
 800c3c2:	d025      	beq.n	800c410 <HAL_UART_Init.constprop.107+0x668>
 800c3c4:	2b09      	cmp	r3, #9
 800c3c6:	d026      	beq.n	800c416 <HAL_UART_Init.constprop.107+0x66e>
 800c3c8:	2b0a      	cmp	r3, #10
 800c3ca:	d027      	beq.n	800c41c <HAL_UART_Init.constprop.107+0x674>
 800c3cc:	2b0b      	cmp	r3, #11
 800c3ce:	d128      	bne.n	800c422 <HAL_UART_Init.constprop.107+0x67a>
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	484c      	ldr	r0, [pc, #304]	; (800c504 <HAL_UART_Init.constprop.107+0x75c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3d4:	2700      	movs	r7, #0
 800c3d6:	0856      	lsrs	r6, r2, #1
 800c3d8:	1980      	adds	r0, r0, r6
 800c3da:	4179      	adcs	r1, r7
 800c3dc:	003b      	movs	r3, r7
 800c3de:	f002 fff5 	bl	800f3cc <__aeabi_uldivmod>
 800c3e2:	003e      	movs	r6, r7
 800c3e4:	e03c      	b.n	800c460 <HAL_UART_Init.constprop.107+0x6b8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3e6:	4856      	ldr	r0, [pc, #344]	; (800c540 <HAL_UART_Init.constprop.107+0x798>)
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	e7f3      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c3ec:	4855      	ldr	r0, [pc, #340]	; (800c544 <HAL_UART_Init.constprop.107+0x79c>)
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	e7f0      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c3f2:	4855      	ldr	r0, [pc, #340]	; (800c548 <HAL_UART_Init.constprop.107+0x7a0>)
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	e7ed      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c3f8:	4854      	ldr	r0, [pc, #336]	; (800c54c <HAL_UART_Init.constprop.107+0x7a4>)
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	e7ea      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c3fe:	4854      	ldr	r0, [pc, #336]	; (800c550 <HAL_UART_Init.constprop.107+0x7a8>)
 800c400:	2100      	movs	r1, #0
 800c402:	e7e7      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c404:	4853      	ldr	r0, [pc, #332]	; (800c554 <HAL_UART_Init.constprop.107+0x7ac>)
 800c406:	2100      	movs	r1, #0
 800c408:	e7e4      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c40a:	4853      	ldr	r0, [pc, #332]	; (800c558 <HAL_UART_Init.constprop.107+0x7b0>)
 800c40c:	2100      	movs	r1, #0
 800c40e:	e7e1      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c410:	4852      	ldr	r0, [pc, #328]	; (800c55c <HAL_UART_Init.constprop.107+0x7b4>)
 800c412:	2100      	movs	r1, #0
 800c414:	e7de      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c416:	4852      	ldr	r0, [pc, #328]	; (800c560 <HAL_UART_Init.constprop.107+0x7b8>)
 800c418:	2100      	movs	r1, #0
 800c41a:	e7db      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c41c:	4851      	ldr	r0, [pc, #324]	; (800c564 <HAL_UART_Init.constprop.107+0x7bc>)
 800c41e:	2100      	movs	r1, #0
 800c420:	e7d8      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c422:	4851      	ldr	r0, [pc, #324]	; (800c568 <HAL_UART_Init.constprop.107+0x7c0>)
 800c424:	2100      	movs	r1, #0
 800c426:	e7d5      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
            pclk = HAL_RCC_GetSysClockFreq();
 800c428:	f7ff fb86 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c42c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c42e:	2201      	movs	r2, #1
 800c430:	2300      	movs	r3, #0
 800c432:	2900      	cmp	r1, #0
 800c434:	d183      	bne.n	800c33e <HAL_UART_Init.constprop.107+0x596>
 800c436:	6861      	ldr	r1, [r4, #4]
 800c438:	2700      	movs	r7, #0
 800c43a:	4688      	mov	r8, r1
 800c43c:	2100      	movs	r1, #0
 800c43e:	f002 ffc5 	bl	800f3cc <__aeabi_uldivmod>
 800c442:	020b      	lsls	r3, r1, #8
 800c444:	4641      	mov	r1, r8
 800c446:	0e06      	lsrs	r6, r0, #24
 800c448:	4333      	orrs	r3, r6
 800c44a:	0202      	lsls	r2, r0, #8
 800c44c:	084e      	lsrs	r6, r1, #1
 800c44e:	1992      	adds	r2, r2, r6
 800c450:	417b      	adcs	r3, r7
 800c452:	0010      	movs	r0, r2
 800c454:	0019      	movs	r1, r3
 800c456:	4642      	mov	r2, r8
 800c458:	003b      	movs	r3, r7
 800c45a:	f002 ffb7 	bl	800f3cc <__aeabi_uldivmod>
 800c45e:	003e      	movs	r6, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c460:	4b42      	ldr	r3, [pc, #264]	; (800c56c <HAL_UART_Init.constprop.107+0x7c4>)
 800c462:	4a43      	ldr	r2, [pc, #268]	; (800c570 <HAL_UART_Init.constprop.107+0x7c8>)
 800c464:	18c3      	adds	r3, r0, r3
 800c466:	4293      	cmp	r3, r2
 800c468:	d900      	bls.n	800c46c <HAL_UART_Init.constprop.107+0x6c4>
 800c46a:	e59d      	b.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
      huart->Instance->BRR = usartdiv;
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	60d8      	str	r0, [r3, #12]
 800c470:	e59b      	b.n	800bfaa <HAL_UART_Init.constprop.107+0x202>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c474:	2b00      	cmp	r3, #0
 800c476:	d019      	beq.n	800c4ac <HAL_UART_Init.constprop.107+0x704>
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d01b      	beq.n	800c4b4 <HAL_UART_Init.constprop.107+0x70c>
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	d01d      	beq.n	800c4bc <HAL_UART_Init.constprop.107+0x714>
 800c480:	2b03      	cmp	r3, #3
 800c482:	d01f      	beq.n	800c4c4 <HAL_UART_Init.constprop.107+0x71c>
 800c484:	2b04      	cmp	r3, #4
 800c486:	d020      	beq.n	800c4ca <HAL_UART_Init.constprop.107+0x722>
 800c488:	2b05      	cmp	r3, #5
 800c48a:	d022      	beq.n	800c4d2 <HAL_UART_Init.constprop.107+0x72a>
 800c48c:	2b06      	cmp	r3, #6
 800c48e:	d023      	beq.n	800c4d8 <HAL_UART_Init.constprop.107+0x730>
 800c490:	2080      	movs	r0, #128	; 0x80
 800c492:	2b07      	cmp	r3, #7
 800c494:	d023      	beq.n	800c4de <HAL_UART_Init.constprop.107+0x736>
 800c496:	2b08      	cmp	r3, #8
 800c498:	d024      	beq.n	800c4e4 <HAL_UART_Init.constprop.107+0x73c>
 800c49a:	2b09      	cmp	r3, #9
 800c49c:	d025      	beq.n	800c4ea <HAL_UART_Init.constprop.107+0x742>
 800c49e:	2b0a      	cmp	r3, #10
 800c4a0:	d026      	beq.n	800c4f0 <HAL_UART_Init.constprop.107+0x748>
 800c4a2:	2b0b      	cmp	r3, #11
 800c4a4:	d127      	bne.n	800c4f6 <HAL_UART_Init.constprop.107+0x74e>
 800c4a6:	0200      	lsls	r0, r0, #8
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	e793      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4ac:	2080      	movs	r0, #128	; 0x80
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	0400      	lsls	r0, r0, #16
 800c4b2:	e78f      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4b4:	2080      	movs	r0, #128	; 0x80
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	03c0      	lsls	r0, r0, #15
 800c4ba:	e78b      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4bc:	2080      	movs	r0, #128	; 0x80
 800c4be:	2100      	movs	r1, #0
 800c4c0:	0380      	lsls	r0, r0, #14
 800c4c2:	e787      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4c4:	482b      	ldr	r0, [pc, #172]	; (800c574 <HAL_UART_Init.constprop.107+0x7cc>)
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	e784      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4ca:	2080      	movs	r0, #128	; 0x80
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	0340      	lsls	r0, r0, #13
 800c4d0:	e780      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4d2:	4829      	ldr	r0, [pc, #164]	; (800c578 <HAL_UART_Init.constprop.107+0x7d0>)
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	e77d      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4d8:	4828      	ldr	r0, [pc, #160]	; (800c57c <HAL_UART_Init.constprop.107+0x7d4>)
 800c4da:	2100      	movs	r1, #0
 800c4dc:	e77a      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4de:	0300      	lsls	r0, r0, #12
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	e777      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4e4:	02c0      	lsls	r0, r0, #11
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	e774      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4ea:	0280      	lsls	r0, r0, #10
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	e771      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4f0:	0240      	lsls	r0, r0, #9
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	e76e      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
 800c4f6:	0400      	lsls	r0, r0, #16
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	e76b      	b.n	800c3d4 <HAL_UART_Init.constprop.107+0x62c>
            ret = HAL_ERROR;
 800c4fc:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c4fe:	2000      	movs	r0, #0
 800c500:	e7ae      	b.n	800c460 <HAL_UART_Init.constprop.107+0x6b8>
 800c502:	46c0      	nop			; (mov r8, r8)
 800c504:	00f42400 	.word	0x00f42400
 800c508:	007a1200 	.word	0x007a1200
 800c50c:	003d0900 	.word	0x003d0900
 800c510:	0028b0aa 	.word	0x0028b0aa
 800c514:	001e8480 	.word	0x001e8480
 800c518:	00186a00 	.word	0x00186a00
 800c51c:	00145855 	.word	0x00145855
 800c520:	000f4240 	.word	0x000f4240
 800c524:	0007a120 	.word	0x0007a120
 800c528:	0003d090 	.word	0x0003d090
 800c52c:	0001e848 	.word	0x0001e848
 800c530:	0000f424 	.word	0x0000f424
 800c534:	00001555 	.word	0x00001555
 800c538:	00000ccc 	.word	0x00000ccc
 800c53c:	00000aaa 	.word	0x00000aaa
 800c540:	7a120000 	.word	0x7a120000
 800c544:	3d090000 	.word	0x3d090000
 800c548:	28b0aa00 	.word	0x28b0aa00
 800c54c:	1e848000 	.word	0x1e848000
 800c550:	186a0000 	.word	0x186a0000
 800c554:	14585500 	.word	0x14585500
 800c558:	0f424000 	.word	0x0f424000
 800c55c:	07a12000 	.word	0x07a12000
 800c560:	03d09000 	.word	0x03d09000
 800c564:	01e84800 	.word	0x01e84800
 800c568:	f4240000 	.word	0xf4240000
 800c56c:	fffffd00 	.word	0xfffffd00
 800c570:	000ffcff 	.word	0x000ffcff
 800c574:	00155500 	.word	0x00155500
 800c578:	000ccc00 	.word	0x000ccc00
 800c57c:	000aaa00 	.word	0x000aaa00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c580:	2b00      	cmp	r3, #0
 800c582:	d026      	beq.n	800c5d2 <HAL_UART_Init.constprop.107+0x82a>
 800c584:	2b01      	cmp	r3, #1
 800c586:	d026      	beq.n	800c5d6 <HAL_UART_Init.constprop.107+0x82e>
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d026      	beq.n	800c5da <HAL_UART_Init.constprop.107+0x832>
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d026      	beq.n	800c5de <HAL_UART_Init.constprop.107+0x836>
 800c590:	2b04      	cmp	r3, #4
 800c592:	d026      	beq.n	800c5e2 <HAL_UART_Init.constprop.107+0x83a>
 800c594:	2b05      	cmp	r3, #5
 800c596:	d026      	beq.n	800c5e6 <HAL_UART_Init.constprop.107+0x83e>
 800c598:	2b06      	cmp	r3, #6
 800c59a:	d026      	beq.n	800c5ea <HAL_UART_Init.constprop.107+0x842>
 800c59c:	2b07      	cmp	r3, #7
 800c59e:	d026      	beq.n	800c5ee <HAL_UART_Init.constprop.107+0x846>
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d026      	beq.n	800c5f2 <HAL_UART_Init.constprop.107+0x84a>
 800c5a4:	2b09      	cmp	r3, #9
 800c5a6:	d026      	beq.n	800c5f6 <HAL_UART_Init.constprop.107+0x84e>
 800c5a8:	2b0a      	cmp	r3, #10
 800c5aa:	d026      	beq.n	800c5fa <HAL_UART_Init.constprop.107+0x852>
 800c5ac:	3b0b      	subs	r3, #11
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	1e43      	subs	r3, r0, #1
 800c5b2:	4198      	sbcs	r0, r3
 800c5b4:	4ba1      	ldr	r3, [pc, #644]	; (800c83c <HAL_UART_Init.constprop.107+0xa94>)
 800c5b6:	4240      	negs	r0, r0
 800c5b8:	4018      	ands	r0, r3
 800c5ba:	4ba1      	ldr	r3, [pc, #644]	; (800c840 <HAL_UART_Init.constprop.107+0xa98>)
 800c5bc:	469c      	mov	ip, r3
 800c5be:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5c0:	6863      	ldr	r3, [r4, #4]
 800c5c2:	6861      	ldr	r1, [r4, #4]
 800c5c4:	085b      	lsrs	r3, r3, #1
 800c5c6:	1818      	adds	r0, r3, r0
 800c5c8:	f002 fd12 	bl	800eff0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5cc:	2600      	movs	r6, #0
 800c5ce:	b280      	uxth	r0, r0
 800c5d0:	e027      	b.n	800c622 <HAL_UART_Init.constprop.107+0x87a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5d2:	489c      	ldr	r0, [pc, #624]	; (800c844 <HAL_UART_Init.constprop.107+0xa9c>)
 800c5d4:	e7f4      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5d6:	489c      	ldr	r0, [pc, #624]	; (800c848 <HAL_UART_Init.constprop.107+0xaa0>)
 800c5d8:	e7f2      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5da:	489c      	ldr	r0, [pc, #624]	; (800c84c <HAL_UART_Init.constprop.107+0xaa4>)
 800c5dc:	e7f0      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5de:	489c      	ldr	r0, [pc, #624]	; (800c850 <HAL_UART_Init.constprop.107+0xaa8>)
 800c5e0:	e7ee      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5e2:	489c      	ldr	r0, [pc, #624]	; (800c854 <HAL_UART_Init.constprop.107+0xaac>)
 800c5e4:	e7ec      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5e6:	489c      	ldr	r0, [pc, #624]	; (800c858 <HAL_UART_Init.constprop.107+0xab0>)
 800c5e8:	e7ea      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5ea:	489c      	ldr	r0, [pc, #624]	; (800c85c <HAL_UART_Init.constprop.107+0xab4>)
 800c5ec:	e7e8      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5ee:	489c      	ldr	r0, [pc, #624]	; (800c860 <HAL_UART_Init.constprop.107+0xab8>)
 800c5f0:	e7e6      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5f2:	489c      	ldr	r0, [pc, #624]	; (800c864 <HAL_UART_Init.constprop.107+0xabc>)
 800c5f4:	e7e4      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5f6:	489c      	ldr	r0, [pc, #624]	; (800c868 <HAL_UART_Init.constprop.107+0xac0>)
 800c5f8:	e7e2      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c5fa:	489c      	ldr	r0, [pc, #624]	; (800c86c <HAL_UART_Init.constprop.107+0xac4>)
 800c5fc:	e7e0      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
        pclk = HAL_RCC_GetSysClockFreq();
 800c5fe:	f7ff fa9b 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c604:	2101      	movs	r1, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d000      	beq.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c60a:	e16e      	b.n	800c8ea <HAL_UART_Init.constprop.107+0xb42>
 800c60c:	f002 fcf0 	bl	800eff0 <__udivsi3>
 800c610:	6866      	ldr	r6, [r4, #4]
 800c612:	0040      	lsls	r0, r0, #1
 800c614:	0873      	lsrs	r3, r6, #1
 800c616:	0031      	movs	r1, r6
 800c618:	18c0      	adds	r0, r0, r3
 800c61a:	f002 fce9 	bl	800eff0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c61e:	2600      	movs	r6, #0
 800c620:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c622:	0003      	movs	r3, r0
 800c624:	4a92      	ldr	r2, [pc, #584]	; (800c870 <HAL_UART_Init.constprop.107+0xac8>)
 800c626:	3b10      	subs	r3, #16
 800c628:	4293      	cmp	r3, r2
 800c62a:	d900      	bls.n	800c62e <HAL_UART_Init.constprop.107+0x886>
 800c62c:	e4bc      	b.n	800bfa8 <HAL_UART_Init.constprop.107+0x200>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c62e:	230f      	movs	r3, #15
 800c630:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c632:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c634:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c636:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	4310      	orrs	r0, r2
 800c63c:	60d8      	str	r0, [r3, #12]
 800c63e:	e4b4      	b.n	800bfaa <HAL_UART_Init.constprop.107+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c640:	2b00      	cmp	r3, #0
 800c642:	d018      	beq.n	800c676 <HAL_UART_Init.constprop.107+0x8ce>
 800c644:	2b01      	cmp	r3, #1
 800c646:	d019      	beq.n	800c67c <HAL_UART_Init.constprop.107+0x8d4>
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d01a      	beq.n	800c682 <HAL_UART_Init.constprop.107+0x8da>
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d01b      	beq.n	800c688 <HAL_UART_Init.constprop.107+0x8e0>
 800c650:	2b04      	cmp	r3, #4
 800c652:	d01b      	beq.n	800c68c <HAL_UART_Init.constprop.107+0x8e4>
 800c654:	2b05      	cmp	r3, #5
 800c656:	d01c      	beq.n	800c692 <HAL_UART_Init.constprop.107+0x8ea>
 800c658:	2b06      	cmp	r3, #6
 800c65a:	d01c      	beq.n	800c696 <HAL_UART_Init.constprop.107+0x8ee>
 800c65c:	2080      	movs	r0, #128	; 0x80
 800c65e:	2b07      	cmp	r3, #7
 800c660:	d01b      	beq.n	800c69a <HAL_UART_Init.constprop.107+0x8f2>
 800c662:	2b08      	cmp	r3, #8
 800c664:	d01b      	beq.n	800c69e <HAL_UART_Init.constprop.107+0x8f6>
 800c666:	2b09      	cmp	r3, #9
 800c668:	d01b      	beq.n	800c6a2 <HAL_UART_Init.constprop.107+0x8fa>
 800c66a:	2b0a      	cmp	r3, #10
 800c66c:	d01b      	beq.n	800c6a6 <HAL_UART_Init.constprop.107+0x8fe>
 800c66e:	2b0b      	cmp	r3, #11
 800c670:	d11b      	bne.n	800c6aa <HAL_UART_Init.constprop.107+0x902>
 800c672:	0040      	lsls	r0, r0, #1
 800c674:	e7a4      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c676:	2080      	movs	r0, #128	; 0x80
 800c678:	0240      	lsls	r0, r0, #9
 800c67a:	e7a1      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c67c:	2080      	movs	r0, #128	; 0x80
 800c67e:	0200      	lsls	r0, r0, #8
 800c680:	e79e      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c682:	2080      	movs	r0, #128	; 0x80
 800c684:	01c0      	lsls	r0, r0, #7
 800c686:	e79b      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c688:	487a      	ldr	r0, [pc, #488]	; (800c874 <HAL_UART_Init.constprop.107+0xacc>)
 800c68a:	e799      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c68c:	2080      	movs	r0, #128	; 0x80
 800c68e:	0180      	lsls	r0, r0, #6
 800c690:	e796      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c692:	4879      	ldr	r0, [pc, #484]	; (800c878 <HAL_UART_Init.constprop.107+0xad0>)
 800c694:	e794      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c696:	4879      	ldr	r0, [pc, #484]	; (800c87c <HAL_UART_Init.constprop.107+0xad4>)
 800c698:	e792      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c69a:	0140      	lsls	r0, r0, #5
 800c69c:	e790      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c69e:	0100      	lsls	r0, r0, #4
 800c6a0:	e78e      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c6a2:	00c0      	lsls	r0, r0, #3
 800c6a4:	e78c      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c6a6:	0080      	lsls	r0, r0, #2
 800c6a8:	e78a      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
 800c6aa:	0240      	lsls	r0, r0, #9
 800c6ac:	e788      	b.n	800c5c0 <HAL_UART_Init.constprop.107+0x818>
        ret = HAL_ERROR;
 800c6ae:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e7b6      	b.n	800c622 <HAL_UART_Init.constprop.107+0x87a>
    switch (clocksource)
 800c6b4:	2808      	cmp	r0, #8
 800c6b6:	d900      	bls.n	800c6ba <HAL_UART_Init.constprop.107+0x912>
 800c6b8:	e108      	b.n	800c8cc <HAL_UART_Init.constprop.107+0xb24>
 800c6ba:	f002 fc8f 	bl	800efdc <__gnu_thumb1_case_uhi>
 800c6be:	0009      	.short	0x0009
 800c6c0:	00320107 	.word	0x00320107
 800c6c4:	00710107 	.word	0x00710107
 800c6c8:	01070107 	.word	0x01070107
 800c6cc:	00890107 	.word	0x00890107
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6d0:	f7fd fde2 	bl	800a298 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d067      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6dc:	1849      	adds	r1, r1, r1
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d064      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c6e2:	3102      	adds	r1, #2
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d061      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c6e8:	3102      	adds	r1, #2
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d05e      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c6ee:	3102      	adds	r1, #2
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	d05b      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c6f4:	3102      	adds	r1, #2
 800c6f6:	2b05      	cmp	r3, #5
 800c6f8:	d058      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c6fa:	3102      	adds	r1, #2
 800c6fc:	2b06      	cmp	r3, #6
 800c6fe:	d055      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c700:	3104      	adds	r1, #4
 800c702:	2b07      	cmp	r3, #7
 800c704:	d052      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c706:	3110      	adds	r1, #16
 800c708:	2b08      	cmp	r3, #8
 800c70a:	d04f      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c70c:	3120      	adds	r1, #32
 800c70e:	2b09      	cmp	r3, #9
 800c710:	d04c      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c712:	3140      	adds	r1, #64	; 0x40
 800c714:	2b0a      	cmp	r3, #10
 800c716:	d049      	beq.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c718:	397f      	subs	r1, #127	; 0x7f
 800c71a:	2b0b      	cmp	r3, #11
 800c71c:	d146      	bne.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
 800c71e:	31ff      	adds	r1, #255	; 0xff
 800c720:	e044      	b.n	800c7ac <HAL_UART_Init.constprop.107+0xa04>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c722:	2b00      	cmp	r3, #0
 800c724:	d026      	beq.n	800c774 <HAL_UART_Init.constprop.107+0x9cc>
 800c726:	2b01      	cmp	r3, #1
 800c728:	d026      	beq.n	800c778 <HAL_UART_Init.constprop.107+0x9d0>
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d026      	beq.n	800c77c <HAL_UART_Init.constprop.107+0x9d4>
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d026      	beq.n	800c780 <HAL_UART_Init.constprop.107+0x9d8>
 800c732:	2b04      	cmp	r3, #4
 800c734:	d026      	beq.n	800c784 <HAL_UART_Init.constprop.107+0x9dc>
 800c736:	2b05      	cmp	r3, #5
 800c738:	d026      	beq.n	800c788 <HAL_UART_Init.constprop.107+0x9e0>
 800c73a:	2b06      	cmp	r3, #6
 800c73c:	d026      	beq.n	800c78c <HAL_UART_Init.constprop.107+0x9e4>
 800c73e:	2b07      	cmp	r3, #7
 800c740:	d026      	beq.n	800c790 <HAL_UART_Init.constprop.107+0x9e8>
 800c742:	2b08      	cmp	r3, #8
 800c744:	d026      	beq.n	800c794 <HAL_UART_Init.constprop.107+0x9ec>
 800c746:	2b09      	cmp	r3, #9
 800c748:	d026      	beq.n	800c798 <HAL_UART_Init.constprop.107+0x9f0>
 800c74a:	2b0a      	cmp	r3, #10
 800c74c:	d026      	beq.n	800c79c <HAL_UART_Init.constprop.107+0x9f4>
 800c74e:	3b0b      	subs	r3, #11
 800c750:	0018      	movs	r0, r3
 800c752:	1e43      	subs	r3, r0, #1
 800c754:	4198      	sbcs	r0, r3
 800c756:	4b4a      	ldr	r3, [pc, #296]	; (800c880 <HAL_UART_Init.constprop.107+0xad8>)
 800c758:	4240      	negs	r0, r0
 800c75a:	4018      	ands	r0, r3
 800c75c:	4b49      	ldr	r3, [pc, #292]	; (800c884 <HAL_UART_Init.constprop.107+0xadc>)
 800c75e:	469c      	mov	ip, r3
 800c760:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c762:	6863      	ldr	r3, [r4, #4]
 800c764:	6861      	ldr	r1, [r4, #4]
 800c766:	085b      	lsrs	r3, r3, #1
 800c768:	1818      	adds	r0, r3, r0
 800c76a:	f002 fc41 	bl	800eff0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c76e:	2600      	movs	r6, #0
 800c770:	b280      	uxth	r0, r0
 800c772:	e025      	b.n	800c7c0 <HAL_UART_Init.constprop.107+0xa18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c774:	4834      	ldr	r0, [pc, #208]	; (800c848 <HAL_UART_Init.constprop.107+0xaa0>)
 800c776:	e7f4      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c778:	4834      	ldr	r0, [pc, #208]	; (800c84c <HAL_UART_Init.constprop.107+0xaa4>)
 800c77a:	e7f2      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c77c:	4835      	ldr	r0, [pc, #212]	; (800c854 <HAL_UART_Init.constprop.107+0xaac>)
 800c77e:	e7f0      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c780:	4836      	ldr	r0, [pc, #216]	; (800c85c <HAL_UART_Init.constprop.107+0xab4>)
 800c782:	e7ee      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c784:	4836      	ldr	r0, [pc, #216]	; (800c860 <HAL_UART_Init.constprop.107+0xab8>)
 800c786:	e7ec      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c788:	483f      	ldr	r0, [pc, #252]	; (800c888 <HAL_UART_Init.constprop.107+0xae0>)
 800c78a:	e7ea      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c78c:	483f      	ldr	r0, [pc, #252]	; (800c88c <HAL_UART_Init.constprop.107+0xae4>)
 800c78e:	e7e8      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c790:	4834      	ldr	r0, [pc, #208]	; (800c864 <HAL_UART_Init.constprop.107+0xabc>)
 800c792:	e7e6      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c794:	4834      	ldr	r0, [pc, #208]	; (800c868 <HAL_UART_Init.constprop.107+0xac0>)
 800c796:	e7e4      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c798:	4834      	ldr	r0, [pc, #208]	; (800c86c <HAL_UART_Init.constprop.107+0xac4>)
 800c79a:	e7e2      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c79c:	4828      	ldr	r0, [pc, #160]	; (800c840 <HAL_UART_Init.constprop.107+0xa98>)
 800c79e:	e7e0      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
        pclk = HAL_RCC_GetSysClockFreq();
 800c7a0:	f7ff f9ca 	bl	800bb38 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d197      	bne.n	800c6dc <HAL_UART_Init.constprop.107+0x934>
 800c7ac:	f002 fc20 	bl	800eff0 <__udivsi3>
 800c7b0:	6866      	ldr	r6, [r4, #4]
 800c7b2:	0873      	lsrs	r3, r6, #1
 800c7b4:	0031      	movs	r1, r6
 800c7b6:	18c0      	adds	r0, r0, r3
 800c7b8:	f002 fc1a 	bl	800eff0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7bc:	2600      	movs	r6, #0
 800c7be:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7c0:	0003      	movs	r3, r0
 800c7c2:	4a2b      	ldr	r2, [pc, #172]	; (800c870 <HAL_UART_Init.constprop.107+0xac8>)
 800c7c4:	3b10      	subs	r3, #16
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d800      	bhi.n	800c7cc <HAL_UART_Init.constprop.107+0xa24>
 800c7ca:	e64f      	b.n	800c46c <HAL_UART_Init.constprop.107+0x6c4>
 800c7cc:	f7ff fbec 	bl	800bfa8 <HAL_UART_Init.constprop.107+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d018      	beq.n	800c806 <HAL_UART_Init.constprop.107+0xa5e>
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d019      	beq.n	800c80c <HAL_UART_Init.constprop.107+0xa64>
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d01a      	beq.n	800c812 <HAL_UART_Init.constprop.107+0xa6a>
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d01b      	beq.n	800c818 <HAL_UART_Init.constprop.107+0xa70>
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d01b      	beq.n	800c81c <HAL_UART_Init.constprop.107+0xa74>
 800c7e4:	2b05      	cmp	r3, #5
 800c7e6:	d01c      	beq.n	800c822 <HAL_UART_Init.constprop.107+0xa7a>
 800c7e8:	2b06      	cmp	r3, #6
 800c7ea:	d01c      	beq.n	800c826 <HAL_UART_Init.constprop.107+0xa7e>
 800c7ec:	2080      	movs	r0, #128	; 0x80
 800c7ee:	2b07      	cmp	r3, #7
 800c7f0:	d01b      	beq.n	800c82a <HAL_UART_Init.constprop.107+0xa82>
 800c7f2:	2b08      	cmp	r3, #8
 800c7f4:	d01b      	beq.n	800c82e <HAL_UART_Init.constprop.107+0xa86>
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	d01b      	beq.n	800c832 <HAL_UART_Init.constprop.107+0xa8a>
 800c7fa:	2b0a      	cmp	r3, #10
 800c7fc:	d01b      	beq.n	800c836 <HAL_UART_Init.constprop.107+0xa8e>
 800c7fe:	2b0b      	cmp	r3, #11
 800c800:	d0af      	beq.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c802:	0200      	lsls	r0, r0, #8
 800c804:	e7ad      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c806:	2080      	movs	r0, #128	; 0x80
 800c808:	0200      	lsls	r0, r0, #8
 800c80a:	e7aa      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c80c:	2080      	movs	r0, #128	; 0x80
 800c80e:	01c0      	lsls	r0, r0, #7
 800c810:	e7a7      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c812:	2080      	movs	r0, #128	; 0x80
 800c814:	0180      	lsls	r0, r0, #6
 800c816:	e7a4      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c818:	481d      	ldr	r0, [pc, #116]	; (800c890 <HAL_UART_Init.constprop.107+0xae8>)
 800c81a:	e7a2      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c81c:	2080      	movs	r0, #128	; 0x80
 800c81e:	0140      	lsls	r0, r0, #5
 800c820:	e79f      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c822:	481c      	ldr	r0, [pc, #112]	; (800c894 <HAL_UART_Init.constprop.107+0xaec>)
 800c824:	e79d      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c826:	481c      	ldr	r0, [pc, #112]	; (800c898 <HAL_UART_Init.constprop.107+0xaf0>)
 800c828:	e79b      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c82a:	0100      	lsls	r0, r0, #4
 800c82c:	e799      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c82e:	00c0      	lsls	r0, r0, #3
 800c830:	e797      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c832:	0080      	lsls	r0, r0, #2
 800c834:	e795      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c836:	0040      	lsls	r0, r0, #1
 800c838:	e793      	b.n	800c762 <HAL_UART_Init.constprop.107+0x9ba>
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	01e65fb8 	.word	0x01e65fb8
 800c840:	0001e848 	.word	0x0001e848
 800c844:	01e84800 	.word	0x01e84800
 800c848:	00f42400 	.word	0x00f42400
 800c84c:	007a1200 	.word	0x007a1200
 800c850:	00516154 	.word	0x00516154
 800c854:	003d0900 	.word	0x003d0900
 800c858:	0030d400 	.word	0x0030d400
 800c85c:	0028b0aa 	.word	0x0028b0aa
 800c860:	001e8480 	.word	0x001e8480
 800c864:	000f4240 	.word	0x000f4240
 800c868:	0007a120 	.word	0x0007a120
 800c86c:	0003d090 	.word	0x0003d090
 800c870:	0000ffef 	.word	0x0000ffef
 800c874:	00002aaa 	.word	0x00002aaa
 800c878:	00001998 	.word	0x00001998
 800c87c:	00001554 	.word	0x00001554
 800c880:	00f32fdc 	.word	0x00f32fdc
 800c884:	0000f424 	.word	0x0000f424
 800c888:	00186a00 	.word	0x00186a00
 800c88c:	00145855 	.word	0x00145855
 800c890:	00001555 	.word	0x00001555
 800c894:	00000ccc 	.word	0x00000ccc
 800c898:	00000aaa 	.word	0x00000aaa
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c89c:	2180      	movs	r1, #128	; 0x80
 800c89e:	4b2a      	ldr	r3, [pc, #168]	; (800c948 <HAL_UART_Init.constprop.107+0xba0>)
 800c8a0:	003a      	movs	r2, r7
 800c8a2:	0389      	lsls	r1, r1, #14
 800c8a4:	0020      	movs	r0, r4
 800c8a6:	f7fd fafd 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout.constprop.108>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d101      	bne.n	800c8b2 <HAL_UART_Init.constprop.107+0xb0a>
 800c8ae:	f7ff fbea 	bl	800c086 <HAL_UART_Init.constprop.107+0x2de>
      return HAL_TIMEOUT;
 800c8b2:	2603      	movs	r6, #3
}
 800c8b4:	0030      	movs	r0, r6
 800c8b6:	b00a      	add	sp, #40	; 0x28
 800c8b8:	bc1c      	pop	{r2, r3, r4}
 800c8ba:	4690      	mov	r8, r2
 800c8bc:	4699      	mov	r9, r3
 800c8be:	46a2      	mov	sl, r4
 800c8c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8c2:	2380      	movs	r3, #128	; 0x80
 800c8c4:	021b      	lsls	r3, r3, #8
 800c8c6:	4299      	cmp	r1, r3
 800c8c8:	d100      	bne.n	800c8cc <HAL_UART_Init.constprop.107+0xb24>
 800c8ca:	e6f0      	b.n	800c6ae <HAL_UART_Init.constprop.107+0x906>
        ret = HAL_ERROR;
 800c8cc:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	e776      	b.n	800c7c0 <HAL_UART_Init.constprop.107+0xa18>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8d2:	2380      	movs	r3, #128	; 0x80
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	4299      	cmp	r1, r3
 800c8d8:	d000      	beq.n	800c8dc <HAL_UART_Init.constprop.107+0xb34>
 800c8da:	e6f9      	b.n	800c6d0 <HAL_UART_Init.constprop.107+0x928>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8dc:	f7fd fcdc 	bl	800a298 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d100      	bne.n	800c8ea <HAL_UART_Init.constprop.107+0xb42>
 800c8e8:	e690      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8ea:	1849      	adds	r1, r1, r1
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d100      	bne.n	800c8f2 <HAL_UART_Init.constprop.107+0xb4a>
 800c8f0:	e68c      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c8f2:	3102      	adds	r1, #2
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d100      	bne.n	800c8fa <HAL_UART_Init.constprop.107+0xb52>
 800c8f8:	e688      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c8fa:	3102      	adds	r1, #2
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d100      	bne.n	800c902 <HAL_UART_Init.constprop.107+0xb5a>
 800c900:	e684      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c902:	3102      	adds	r1, #2
 800c904:	2b04      	cmp	r3, #4
 800c906:	d100      	bne.n	800c90a <HAL_UART_Init.constprop.107+0xb62>
 800c908:	e680      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c90a:	3102      	adds	r1, #2
 800c90c:	2b05      	cmp	r3, #5
 800c90e:	d100      	bne.n	800c912 <HAL_UART_Init.constprop.107+0xb6a>
 800c910:	e67c      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c912:	3102      	adds	r1, #2
 800c914:	2b06      	cmp	r3, #6
 800c916:	d100      	bne.n	800c91a <HAL_UART_Init.constprop.107+0xb72>
 800c918:	e678      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c91a:	3104      	adds	r1, #4
 800c91c:	2b07      	cmp	r3, #7
 800c91e:	d100      	bne.n	800c922 <HAL_UART_Init.constprop.107+0xb7a>
 800c920:	e674      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c922:	3110      	adds	r1, #16
 800c924:	2b08      	cmp	r3, #8
 800c926:	d100      	bne.n	800c92a <HAL_UART_Init.constprop.107+0xb82>
 800c928:	e670      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c92a:	3120      	adds	r1, #32
 800c92c:	2b09      	cmp	r3, #9
 800c92e:	d100      	bne.n	800c932 <HAL_UART_Init.constprop.107+0xb8a>
 800c930:	e66c      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c932:	3140      	adds	r1, #64	; 0x40
 800c934:	2b0a      	cmp	r3, #10
 800c936:	d100      	bne.n	800c93a <HAL_UART_Init.constprop.107+0xb92>
 800c938:	e668      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c93a:	397f      	subs	r1, #127	; 0x7f
 800c93c:	2b0b      	cmp	r3, #11
 800c93e:	d000      	beq.n	800c942 <HAL_UART_Init.constprop.107+0xb9a>
 800c940:	e664      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c942:	31ff      	adds	r1, #255	; 0xff
 800c944:	e662      	b.n	800c60c <HAL_UART_Init.constprop.107+0x864>
 800c946:	46c0      	nop			; (mov r8, r8)
 800c948:	01ffffff 	.word	0x01ffffff

0800c94c <biquad_q3_12_complex_direct_form_1.lto_priv.626>:
 800c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94e:	4645      	mov	r5, r8
 800c950:	4657      	mov	r7, sl
 800c952:	464e      	mov	r6, r9
 800c954:	46de      	mov	lr, fp
 800c956:	b5e0      	push	{r5, r6, r7, lr}
 800c958:	b08d      	sub	sp, #52	; 0x34
 800c95a:	ac16      	add	r4, sp, #88	; 0x58
 800c95c:	4688      	mov	r8, r1
 800c95e:	2100      	movs	r1, #0
 800c960:	5e65      	ldrsh	r5, [r4, r1]
 800c962:	2102      	movs	r1, #2
 800c964:	5e66      	ldrsh	r6, [r4, r1]
 800c966:	2400      	movs	r4, #0
 800c968:	5f01      	ldrsh	r1, [r0, r4]
 800c96a:	9102      	str	r1, [sp, #8]
 800c96c:	2402      	movs	r4, #2
 800c96e:	5f01      	ldrsh	r1, [r0, r4]
 800c970:	9103      	str	r1, [sp, #12]
 800c972:	2404      	movs	r4, #4
 800c974:	5f01      	ldrsh	r1, [r0, r4]
 800c976:	4c36      	ldr	r4, [pc, #216]	; (800ca50 <biquad_q3_12_complex_direct_form_1.lto_priv.626+0x104>)
 800c978:	9104      	str	r1, [sp, #16]
 800c97a:	88c7      	ldrh	r7, [r0, #6]
 800c97c:	1be4      	subs	r4, r4, r7
 800c97e:	b221      	sxth	r1, r4
 800c980:	9105      	str	r1, [sp, #20]
 800c982:	2108      	movs	r1, #8
 800c984:	5e41      	ldrsh	r1, [r0, r1]
 800c986:	0334      	lsls	r4, r6, #12
 800c988:	9106      	str	r1, [sp, #24]
 800c98a:	0328      	lsls	r0, r5, #12
 800c98c:	0097      	lsls	r7, r2, #2
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d001      	beq.n	800c996 <biquad_q3_12_complex_direct_form_1.lto_priv.626+0x4a>
 800c992:	2704      	movs	r7, #4
 800c994:	427f      	negs	r7, r7
 800c996:	4259      	negs	r1, r3
 800c998:	4351      	muls	r1, r2
 800c99a:	009a      	lsls	r2, r3, #2
 800c99c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c99e:	008a      	lsls	r2, r1, #2
 800c9a0:	19d2      	adds	r2, r2, r7
 800c9a2:	4442      	add	r2, r8
 800c9a4:	468c      	mov	ip, r1
 800c9a6:	46a8      	mov	r8, r5
 800c9a8:	0011      	movs	r1, r2
 800c9aa:	46b2      	mov	sl, r6
 800c9ac:	46a9      	mov	r9, r5
 800c9ae:	9608      	str	r6, [sp, #32]
 800c9b0:	9507      	str	r5, [sp, #28]
 800c9b2:	9601      	str	r6, [sp, #4]
 800c9b4:	4662      	mov	r2, ip
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	d106      	bne.n	800c9c8 <biquad_q3_12_complex_direct_form_1.lto_priv.626+0x7c>
 800c9ba:	b00d      	add	sp, #52	; 0x34
 800c9bc:	bc3c      	pop	{r2, r3, r4, r5}
 800c9be:	4690      	mov	r8, r2
 800c9c0:	4699      	mov	r9, r3
 800c9c2:	46a2      	mov	sl, r4
 800c9c4:	46ab      	mov	fp, r5
 800c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c8:	2700      	movs	r7, #0
 800c9ca:	5fca      	ldrsh	r2, [r1, r7]
 800c9cc:	449c      	add	ip, r3
 800c9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d0:	2702      	movs	r7, #2
 800c9d2:	5fca      	ldrsh	r2, [r1, r7]
 800c9d4:	464f      	mov	r7, r9
 800c9d6:	920a      	str	r2, [sp, #40]	; 0x28
 800c9d8:	9a03      	ldr	r2, [sp, #12]
 800c9da:	437a      	muls	r2, r7
 800c9dc:	4647      	mov	r7, r8
 800c9de:	4693      	mov	fp, r2
 800c9e0:	9a05      	ldr	r2, [sp, #20]
 800c9e2:	437a      	muls	r2, r7
 800c9e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c9e6:	4493      	add	fp, r2
 800c9e8:	9a02      	ldr	r2, [sp, #8]
 800c9ea:	437a      	muls	r2, r7
 800c9ec:	1810      	adds	r0, r2, r0
 800c9ee:	9a04      	ldr	r2, [sp, #16]
 800c9f0:	9f07      	ldr	r7, [sp, #28]
 800c9f2:	4355      	muls	r5, r2
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	4458      	add	r0, fp
 800c9f8:	4357      	muls	r7, r2
 800c9fa:	1bed      	subs	r5, r5, r7
 800c9fc:	1940      	adds	r0, r0, r5
 800c9fe:	4655      	mov	r5, sl
 800ca00:	9a03      	ldr	r2, [sp, #12]
 800ca02:	9f01      	ldr	r7, [sp, #4]
 800ca04:	436a      	muls	r2, r5
 800ca06:	9d05      	ldr	r5, [sp, #20]
 800ca08:	437d      	muls	r5, r7
 800ca0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800ca0c:	1955      	adds	r5, r2, r5
 800ca0e:	9a02      	ldr	r2, [sp, #8]
 800ca10:	437a      	muls	r2, r7
 800ca12:	1914      	adds	r4, r2, r4
 800ca14:	9a04      	ldr	r2, [sp, #16]
 800ca16:	192c      	adds	r4, r5, r4
 800ca18:	4356      	muls	r6, r2
 800ca1a:	9d06      	ldr	r5, [sp, #24]
 800ca1c:	9a08      	ldr	r2, [sp, #32]
 800ca1e:	436a      	muls	r2, r5
 800ca20:	1ab6      	subs	r6, r6, r2
 800ca22:	19a4      	adds	r4, r4, r6
 800ca24:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ca26:	1302      	asrs	r2, r0, #12
 800ca28:	46b3      	mov	fp, r6
 800ca2a:	9e01      	ldr	r6, [sp, #4]
 800ca2c:	b212      	sxth	r2, r2
 800ca2e:	9608      	str	r6, [sp, #32]
 800ca30:	4646      	mov	r6, r8
 800ca32:	800a      	strh	r2, [r1, #0]
 800ca34:	1325      	asrs	r5, r4, #12
 800ca36:	4690      	mov	r8, r2
 800ca38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca3a:	b22d      	sxth	r5, r5
 800ca3c:	804d      	strh	r5, [r1, #2]
 800ca3e:	9607      	str	r6, [sp, #28]
 800ca40:	9501      	str	r5, [sp, #4]
 800ca42:	4656      	mov	r6, sl
 800ca44:	464d      	mov	r5, r9
 800ca46:	4459      	add	r1, fp
 800ca48:	46ba      	mov	sl, r7
 800ca4a:	4691      	mov	r9, r2
 800ca4c:	e7b2      	b.n	800c9b4 <biquad_q3_12_complex_direct_form_1.lto_priv.626+0x68>
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	fffff000 	.word	0xfffff000

0800ca54 <acc_confprogram_copy>:
 800ca54:	2300      	movs	r3, #0
 800ca56:	b530      	push	{r4, r5, lr}
 800ca58:	0092      	lsls	r2, r2, #2
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d100      	bne.n	800ca60 <acc_confprogram_copy+0xc>
 800ca5e:	bd30      	pop	{r4, r5, pc}
 800ca60:	58c4      	ldr	r4, [r0, r3]
 800ca62:	0c25      	lsrs	r5, r4, #16
 800ca64:	52cd      	strh	r5, [r1, r3]
 800ca66:	18cd      	adds	r5, r1, r3
 800ca68:	806c      	strh	r4, [r5, #2]
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	e7f5      	b.n	800ca5a <acc_confprogram_copy+0x6>

0800ca6e <acc_confprogram_modify_runif>:
 800ca6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca70:	0055      	lsls	r5, r2, #1
 800ca72:	b085      	sub	sp, #20
 800ca74:	1945      	adds	r5, r0, r5
 800ca76:	000e      	movs	r6, r1
 800ca78:	0028      	movs	r0, r5
 800ca7a:	a903      	add	r1, sp, #12
 800ca7c:	0014      	movs	r4, r2
 800ca7e:	001f      	movs	r7, r3
 800ca80:	f7fd fa3a 	bl	8009ef8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800ca84:	230f      	movs	r3, #15
 800ca86:	9a03      	ldr	r2, [sp, #12]
 800ca88:	439a      	bics	r2, r3
 800ca8a:	9202      	str	r2, [sp, #8]
 800ca8c:	0013      	movs	r3, r2
 800ca8e:	4a11      	ldr	r2, [pc, #68]	; (800cad4 <acc_confprogram_modify_runif+0x66>)
 800ca90:	0011      	movs	r1, r2
 800ca92:	3160      	adds	r1, #96	; 0x60
 800ca94:	7809      	ldrb	r1, [r1, #0]
 800ca96:	2f00      	cmp	r7, #0
 800ca98:	d011      	beq.n	800cabe <acc_confprogram_modify_runif+0x50>
 800ca9a:	4333      	orrs	r3, r6
 800ca9c:	9302      	str	r3, [sp, #8]
 800ca9e:	2903      	cmp	r1, #3
 800caa0:	d906      	bls.n	800cab0 <acc_confprogram_modify_runif+0x42>
 800caa2:	9600      	str	r6, [sp, #0]
 800caa4:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800caa6:	0863      	lsrs	r3, r4, #1
 800caa8:	4a0b      	ldr	r2, [pc, #44]	; (800cad8 <acc_confprogram_modify_runif+0x6a>)
 800caaa:	490c      	ldr	r1, [pc, #48]	; (800cadc <acc_confprogram_modify_runif+0x6e>)
 800caac:	2004      	movs	r0, #4
 800caae:	47b0      	blx	r6
 800cab0:	2201      	movs	r2, #1
 800cab2:	0029      	movs	r1, r5
 800cab4:	a802      	add	r0, sp, #8
 800cab6:	f7ff ffcd 	bl	800ca54 <acc_confprogram_copy>
 800caba:	b005      	add	sp, #20
 800cabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cabe:	2903      	cmp	r1, #3
 800cac0:	d9f6      	bls.n	800cab0 <acc_confprogram_modify_runif+0x42>
 800cac2:	9600      	str	r6, [sp, #0]
 800cac4:	0863      	lsrs	r3, r4, #1
 800cac6:	4905      	ldr	r1, [pc, #20]	; (800cadc <acc_confprogram_modify_runif+0x6e>)
 800cac8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800caca:	2004      	movs	r0, #4
 800cacc:	4a04      	ldr	r2, [pc, #16]	; (800cae0 <acc_confprogram_modify_runif+0x72>)
 800cace:	47a0      	blx	r4
 800cad0:	e7ee      	b.n	800cab0 <acc_confprogram_modify_runif+0x42>
 800cad2:	46c0      	nop			; (mov r8, r8)
 800cad4:	20000280 	.word	0x20000280
 800cad8:	0801ddca 	.word	0x0801ddca
 800cadc:	0801d748 	.word	0x0801d748
 800cae0:	0801e058 	.word	0x0801e058

0800cae4 <acc_confprogram_patch_offset>:
 800cae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cae6:	464e      	mov	r6, r9
 800cae8:	4645      	mov	r5, r8
 800caea:	4657      	mov	r7, sl
 800caec:	46de      	mov	lr, fp
 800caee:	b5e0      	push	{r5, r6, r7, lr}
 800caf0:	b089      	sub	sp, #36	; 0x24
 800caf2:	4698      	mov	r8, r3
 800caf4:	ab12      	add	r3, sp, #72	; 0x48
 800caf6:	881c      	ldrh	r4, [r3, #0]
 800caf8:	4b48      	ldr	r3, [pc, #288]	; (800cc1c <acc_confprogram_patch_offset+0x138>)
 800cafa:	9204      	str	r2, [sp, #16]
 800cafc:	4699      	mov	r9, r3
 800cafe:	3360      	adds	r3, #96	; 0x60
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	4682      	mov	sl, r0
 800cb04:	000e      	movs	r6, r1
 800cb06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800cb08:	2b03      	cmp	r3, #3
 800cb0a:	d907      	bls.n	800cb1c <acc_confprogram_patch_offset+0x38>
 800cb0c:	464f      	mov	r7, r9
 800cb0e:	9500      	str	r5, [sp, #0]
 800cb10:	0023      	movs	r3, r4
 800cb12:	4a43      	ldr	r2, [pc, #268]	; (800cc20 <acc_confprogram_patch_offset+0x13c>)
 800cb14:	4943      	ldr	r1, [pc, #268]	; (800cc24 <acc_confprogram_patch_offset+0x140>)
 800cb16:	2004      	movs	r0, #4
 800cb18:	6e7f      	ldr	r7, [r7, #100]	; 0x64
 800cb1a:	47b8      	blx	r7
 800cb1c:	002b      	movs	r3, r5
 800cb1e:	1e5a      	subs	r2, r3, #1
 800cb20:	4193      	sbcs	r3, r2
 800cb22:	2700      	movs	r7, #0
 800cb24:	00e4      	lsls	r4, r4, #3
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	44a0      	add	r8, r4
 800cb2a:	9305      	str	r3, [sp, #20]
 800cb2c:	4643      	mov	r3, r8
 800cb2e:	885b      	ldrh	r3, [r3, #2]
 800cb30:	42bb      	cmp	r3, r7
 800cb32:	d806      	bhi.n	800cb42 <acc_confprogram_patch_offset+0x5e>
 800cb34:	b009      	add	sp, #36	; 0x24
 800cb36:	bc3c      	pop	{r2, r3, r4, r5}
 800cb38:	4690      	mov	r8, r2
 800cb3a:	4699      	mov	r9, r3
 800cb3c:	46a2      	mov	sl, r4
 800cb3e:	46ab      	mov	fp, r5
 800cb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb42:	4643      	mov	r3, r8
 800cb44:	2106      	movs	r1, #6
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4379      	muls	r1, r7
 800cb4a:	469c      	mov	ip, r3
 800cb4c:	4461      	add	r1, ip
 800cb4e:	7808      	ldrb	r0, [r1, #0]
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d003      	beq.n	800cb5c <acc_confprogram_patch_offset+0x78>
 800cb54:	2802      	cmp	r0, #2
 800cb56:	d81d      	bhi.n	800cb94 <acc_confprogram_patch_offset+0xb0>
 800cb58:	888a      	ldrh	r2, [r1, #4]
 800cb5a:	e000      	b.n	800cb5e <acc_confprogram_patch_offset+0x7a>
 800cb5c:	884a      	ldrh	r2, [r1, #2]
 800cb5e:	4b32      	ldr	r3, [pc, #200]	; (800cc28 <acc_confprogram_patch_offset+0x144>)
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d01d      	beq.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cb64:	0052      	lsls	r2, r2, #1
 800cb66:	b292      	uxth	r2, r2
 800cb68:	42b2      	cmp	r2, r6
 800cb6a:	d319      	bcc.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cb6c:	9b04      	ldr	r3, [sp, #16]
 800cb6e:	18f3      	adds	r3, r6, r3
 800cb70:	429a      	cmp	r2, r3
 800cb72:	da15      	bge.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cb74:	2801      	cmp	r0, #1
 800cb76:	d049      	beq.n	800cc0c <acc_confprogram_patch_offset+0x128>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d013      	beq.n	800cba4 <acc_confprogram_patch_offset+0xc0>
 800cb7c:	2802      	cmp	r0, #2
 800cb7e:	d10f      	bne.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cb80:	426b      	negs	r3, r5
 800cb82:	416b      	adcs	r3, r5
 800cb84:	1b92      	subs	r2, r2, r6
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	b292      	uxth	r2, r2
 800cb8a:	8849      	ldrh	r1, [r1, #2]
 800cb8c:	4650      	mov	r0, sl
 800cb8e:	f7ff ff6e 	bl	800ca6e <acc_confprogram_modify_runif>
 800cb92:	e005      	b.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cb94:	464b      	mov	r3, r9
 800cb96:	4a25      	ldr	r2, [pc, #148]	; (800cc2c <acc_confprogram_patch_offset+0x148>)
 800cb98:	4922      	ldr	r1, [pc, #136]	; (800cc24 <acc_confprogram_patch_offset+0x140>)
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb9e:	4798      	blx	r3
 800cba0:	3701      	adds	r7, #1
 800cba2:	e7c3      	b.n	800cb2c <acc_confprogram_patch_offset+0x48>
 800cba4:	1b92      	subs	r2, r2, r6
 800cba6:	b293      	uxth	r3, r2
 800cba8:	790a      	ldrb	r2, [r1, #4]
 800cbaa:	9203      	str	r2, [sp, #12]
 800cbac:	794a      	ldrb	r2, [r1, #5]
 800cbae:	4693      	mov	fp, r2
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	4659      	mov	r1, fp
 800cbb4:	408a      	lsls	r2, r1
 800cbb6:	4295      	cmp	r5, r2
 800cbb8:	d30b      	bcc.n	800cbd2 <acc_confprogram_patch_offset+0xee>
 800cbba:	3a01      	subs	r2, #1
 800cbbc:	9201      	str	r2, [sp, #4]
 800cbbe:	464a      	mov	r2, r9
 800cbc0:	9500      	str	r5, [sp, #0]
 800cbc2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800cbc4:	4917      	ldr	r1, [pc, #92]	; (800cc24 <acc_confprogram_patch_offset+0x140>)
 800cbc6:	4a1a      	ldr	r2, [pc, #104]	; (800cc30 <acc_confprogram_patch_offset+0x14c>)
 800cbc8:	47a0      	blx	r4
 800cbca:	2139      	movs	r1, #57	; 0x39
 800cbcc:	4819      	ldr	r0, [pc, #100]	; (800cc34 <acc_confprogram_patch_offset+0x150>)
 800cbce:	f7f9 f846 	bl	8005c5e <acc_assert_fail>
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4453      	add	r3, sl
 800cbd6:	a906      	add	r1, sp, #24
 800cbd8:	0018      	movs	r0, r3
 800cbda:	001c      	movs	r4, r3
 800cbdc:	f7fd f98c 	bl	8009ef8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800cbe0:	465b      	mov	r3, fp
 800cbe2:	2220      	movs	r2, #32
 800cbe4:	1ad2      	subs	r2, r2, r3
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	425b      	negs	r3, r3
 800cbea:	40d3      	lsrs	r3, r2
 800cbec:	9a03      	ldr	r2, [sp, #12]
 800cbee:	9903      	ldr	r1, [sp, #12]
 800cbf0:	4093      	lsls	r3, r2
 800cbf2:	9a06      	ldr	r2, [sp, #24]
 800cbf4:	a807      	add	r0, sp, #28
 800cbf6:	439a      	bics	r2, r3
 800cbf8:	0013      	movs	r3, r2
 800cbfa:	002a      	movs	r2, r5
 800cbfc:	408a      	lsls	r2, r1
 800cbfe:	0021      	movs	r1, r4
 800cc00:	4313      	orrs	r3, r2
 800cc02:	2201      	movs	r2, #1
 800cc04:	9307      	str	r3, [sp, #28]
 800cc06:	f7ff ff25 	bl	800ca54 <acc_confprogram_copy>
 800cc0a:	e7c9      	b.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cc0c:	1b92      	subs	r2, r2, r6
 800cc0e:	b292      	uxth	r2, r2
 800cc10:	8849      	ldrh	r1, [r1, #2]
 800cc12:	9b05      	ldr	r3, [sp, #20]
 800cc14:	4650      	mov	r0, sl
 800cc16:	f7ff ff2a 	bl	800ca6e <acc_confprogram_modify_runif>
 800cc1a:	e7c1      	b.n	800cba0 <acc_confprogram_patch_offset+0xbc>
 800cc1c:	20000280 	.word	0x20000280
 800cc20:	0801df9f 	.word	0x0801df9f
 800cc24:	0801d748 	.word	0x0801d748
 800cc28:	0000ffff 	.word	0x0000ffff
 800cc2c:	0801e08a 	.word	0x0801e08a
 800cc30:	0801e0b7 	.word	0x0801e0b7
 800cc34:	0801dff5 	.word	0x0801dff5

0800cc38 <acc_diagnostic_log_data_u16>:
 800cc38:	4770      	bx	lr

0800cc3a <acc_diagnostic_log_scalar>:
 800cc3a:	4770      	bx	lr

0800cc3c <acc_diagnostic_log_array>:
 800cc3c:	4770      	bx	lr

0800cc3e <acc_diagnostic_log_set_parameter>:
 800cc3e:	4770      	bx	lr

0800cc40 <acc_diagnostic_log_declare_parameter>:
 800cc40:	4770      	bx	lr

0800cc42 <acc_diagnostic_log_set_scope>:
 800cc42:	4770      	bx	lr

0800cc44 <accumulator_mod.lto_priv.625>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	1c04      	adds	r4, r0, #0
 800cc48:	f002 fdb4 	bl	800f7b4 <__aeabi_f2iz>
 800cc4c:	f002 fdd2 	bl	800f7f4 <__aeabi_i2f>
 800cc50:	1c01      	adds	r1, r0, #0
 800cc52:	1c20      	adds	r0, r4, #0
 800cc54:	f001 ffcc 	bl	800ebf0 <__aeabi_fsub>
 800cc58:	2100      	movs	r1, #0
 800cc5a:	1c04      	adds	r4, r0, #0
 800cc5c:	f002 fbac 	bl	800f3b8 <__aeabi_fcmpge>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d10b      	bne.n	800cc7c <accumulator_mod.lto_priv.625+0x38>
 800cc64:	20fe      	movs	r0, #254	; 0xfe
 800cc66:	0580      	lsls	r0, r0, #22
 800cc68:	1c21      	adds	r1, r4, #0
 800cc6a:	f001 fbe3 	bl	800e434 <__aeabi_fadd>
 800cc6e:	219f      	movs	r1, #159	; 0x9f
 800cc70:	05c9      	lsls	r1, r1, #23
 800cc72:	f001 fe8b 	bl	800e98c <__aeabi_fmul>
 800cc76:	f002 fbc9 	bl	800f40c <__aeabi_f2uiz>
 800cc7a:	bd10      	pop	{r4, pc}
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	e7f3      	b.n	800cc68 <accumulator_mod.lto_priv.625+0x24>

0800cc80 <acc_alg_basic_saturation_check_u16>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	0005      	movs	r5, r0
 800cc84:	000c      	movs	r4, r1
 800cc86:	1c10      	adds	r0, r2, #0
 800cc88:	4912      	ldr	r1, [pc, #72]	; (800ccd4 <acc_alg_basic_saturation_check_u16+0x54>)
 800cc8a:	1c17      	adds	r7, r2, #0
 800cc8c:	f001 fd6c 	bl	800e768 <__aeabi_fdiv>
 800cc90:	4911      	ldr	r1, [pc, #68]	; (800ccd8 <acc_alg_basic_saturation_check_u16+0x58>)
 800cc92:	f001 fe7b 	bl	800e98c <__aeabi_fmul>
 800cc96:	f002 fbb9 	bl	800f40c <__aeabi_f2uiz>
 800cc9a:	1c39      	adds	r1, r7, #0
 800cc9c:	b286      	uxth	r6, r0
 800cc9e:	480d      	ldr	r0, [pc, #52]	; (800ccd4 <acc_alg_basic_saturation_check_u16+0x54>)
 800cca0:	f001 ffa6 	bl	800ebf0 <__aeabi_fsub>
 800cca4:	490b      	ldr	r1, [pc, #44]	; (800ccd4 <acc_alg_basic_saturation_check_u16+0x54>)
 800cca6:	f001 fd5f 	bl	800e768 <__aeabi_fdiv>
 800ccaa:	490b      	ldr	r1, [pc, #44]	; (800ccd8 <acc_alg_basic_saturation_check_u16+0x58>)
 800ccac:	f001 fe6e 	bl	800e98c <__aeabi_fmul>
 800ccb0:	f002 fbac 	bl	800f40c <__aeabi_f2uiz>
 800ccb4:	0864      	lsrs	r4, r4, #1
 800ccb6:	0064      	lsls	r4, r4, #1
 800ccb8:	b280      	uxth	r0, r0
 800ccba:	192c      	adds	r4, r5, r4
 800ccbc:	42a5      	cmp	r5, r4
 800ccbe:	d101      	bne.n	800ccc4 <acc_alg_basic_saturation_check_u16+0x44>
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc4:	882a      	ldrh	r2, [r5, #0]
 800ccc6:	4282      	cmp	r2, r0
 800ccc8:	d202      	bcs.n	800ccd0 <acc_alg_basic_saturation_check_u16+0x50>
 800ccca:	3502      	adds	r5, #2
 800cccc:	42b2      	cmp	r2, r6
 800ccce:	d8f5      	bhi.n	800ccbc <acc_alg_basic_saturation_check_u16+0x3c>
 800ccd0:	2001      	movs	r0, #1
 800ccd2:	e7f6      	b.n	800ccc2 <acc_alg_basic_saturation_check_u16+0x42>
 800ccd4:	42c80000 	.word	0x42c80000
 800ccd8:	477fff00 	.word	0x477fff00

0800ccdc <saturation_check_u16.lto_priv.642>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	f7ff ffcf 	bl	800cc80 <acc_alg_basic_saturation_check_u16>
 800cce2:	bd10      	pop	{r4, pc}

0800cce4 <eval_even_poly_f32.lto_priv.683>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	0005      	movs	r5, r0
 800cce8:	000c      	movs	r4, r1
 800ccea:	1c10      	adds	r0, r2, #0
 800ccec:	1c11      	adds	r1, r2, #0
 800ccee:	f001 fe4d 	bl	800e98c <__aeabi_fmul>
 800ccf2:	1c06      	adds	r6, r0, #0
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	3c01      	subs	r4, #1
 800ccf8:	b2a4      	uxth	r4, r4
 800ccfa:	00a4      	lsls	r4, r4, #2
 800ccfc:	192c      	adds	r4, r5, r4
 800ccfe:	6821      	ldr	r1, [r4, #0]
 800cd00:	f001 fb98 	bl	800e434 <__aeabi_fadd>
 800cd04:	42a5      	cmp	r5, r4
 800cd06:	d005      	beq.n	800cd14 <eval_even_poly_f32.lto_priv.683+0x30>
 800cd08:	1c01      	adds	r1, r0, #0
 800cd0a:	1c30      	adds	r0, r6, #0
 800cd0c:	f001 fe3e 	bl	800e98c <__aeabi_fmul>
 800cd10:	3c04      	subs	r4, #4
 800cd12:	e7f4      	b.n	800ccfe <eval_even_poly_f32.lto_priv.683+0x1a>
 800cd14:	bd70      	pop	{r4, r5, r6, pc}

0800cd16 <quarter_pi_cos_sin_f32.lto_priv.682>:
 800cd16:	b570      	push	{r4, r5, r6, lr}
 800cd18:	000d      	movs	r5, r1
 800cd1a:	490d      	ldr	r1, [pc, #52]	; (800cd50 <quarter_pi_cos_sin_f32.lto_priv.682+0x3a>)
 800cd1c:	1c04      	adds	r4, r0, #0
 800cd1e:	f002 fb2d 	bl	800f37c <__aeabi_fcmplt>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d111      	bne.n	800cd4a <quarter_pi_cos_sin_f32.lto_priv.682+0x34>
 800cd26:	480b      	ldr	r0, [pc, #44]	; (800cd54 <quarter_pi_cos_sin_f32.lto_priv.682+0x3e>)
 800cd28:	2d00      	cmp	r5, #0
 800cd2a:	d005      	beq.n	800cd38 <quarter_pi_cos_sin_f32.lto_priv.682+0x22>
 800cd2c:	3034      	adds	r0, #52	; 0x34
 800cd2e:	1c22      	adds	r2, r4, #0
 800cd30:	2105      	movs	r1, #5
 800cd32:	f7ff ffd7 	bl	800cce4 <eval_even_poly_f32.lto_priv.683>
 800cd36:	bd70      	pop	{r4, r5, r6, pc}
 800cd38:	1c22      	adds	r2, r4, #0
 800cd3a:	2104      	movs	r1, #4
 800cd3c:	3048      	adds	r0, #72	; 0x48
 800cd3e:	f7ff ffd1 	bl	800cce4 <eval_even_poly_f32.lto_priv.683>
 800cd42:	1c21      	adds	r1, r4, #0
 800cd44:	f001 fe22 	bl	800e98c <__aeabi_fmul>
 800cd48:	e7f5      	b.n	800cd36 <quarter_pi_cos_sin_f32.lto_priv.682+0x20>
 800cd4a:	4803      	ldr	r0, [pc, #12]	; (800cd58 <quarter_pi_cos_sin_f32.lto_priv.682+0x42>)
 800cd4c:	e7f3      	b.n	800cd36 <quarter_pi_cos_sin_f32.lto_priv.682+0x20>
 800cd4e:	46c0      	nop			; (mov r8, r8)
 800cd50:	bf490fdb 	.word	0xbf490fdb
 800cd54:	080191d8 	.word	0x080191d8
 800cd58:	7fc00000 	.word	0x7fc00000

0800cd5c <acc_alg_basic_math_q3_12_sin>:
 800cd5c:	0002      	movs	r2, r0
 800cd5e:	0003      	movs	r3, r0
 800cd60:	0041      	lsls	r1, r0, #1
 800cd62:	d500      	bpl.n	800cd66 <acc_alg_basic_math_q3_12_sin+0xa>
 800cd64:	43c3      	mvns	r3, r0
 800cd66:	2180      	movs	r1, #128	; 0x80
 800cd68:	0389      	lsls	r1, r1, #14
 800cd6a:	468c      	mov	ip, r1
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	089b      	lsrs	r3, r3, #2
 800cd70:	4463      	add	r3, ip
 800cd72:	0d9b      	lsrs	r3, r3, #22
 800cd74:	4903      	ldr	r1, [pc, #12]	; (800cd84 <acc_alg_basic_math_q3_12_sin+0x28>)
 800cd76:	005b      	lsls	r3, r3, #1
 800cd78:	5e58      	ldrsh	r0, [r3, r1]
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	da01      	bge.n	800cd82 <acc_alg_basic_math_q3_12_sin+0x26>
 800cd7e:	4240      	negs	r0, r0
 800cd80:	b200      	sxth	r0, r0
 800cd82:	4770      	bx	lr
 800cd84:	0801a210 	.word	0x0801a210

0800cd88 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800cd88:	b203      	sxth	r3, r0
 800cd8a:	17da      	asrs	r2, r3, #31
 800cd8c:	189b      	adds	r3, r3, r2
 800cd8e:	1400      	asrs	r0, r0, #16
 800cd90:	4053      	eors	r3, r2
 800cd92:	17c2      	asrs	r2, r0, #31
 800cd94:	1880      	adds	r0, r0, r2
 800cd96:	4050      	eors	r0, r2
 800cd98:	b21b      	sxth	r3, r3
 800cd9a:	b202      	sxth	r2, r0
 800cd9c:	b082      	sub	sp, #8
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	db02      	blt.n	800cda8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800cda2:	0011      	movs	r1, r2
 800cda4:	001a      	movs	r2, r3
 800cda6:	000b      	movs	r3, r1
 800cda8:	480c      	ldr	r0, [pc, #48]	; (800cddc <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800cdaa:	4350      	muls	r0, r2
 800cdac:	17c1      	asrs	r1, r0, #31
 800cdae:	0509      	lsls	r1, r1, #20
 800cdb0:	0d09      	lsrs	r1, r1, #20
 800cdb2:	1809      	adds	r1, r1, r0
 800cdb4:	1309      	asrs	r1, r1, #12
 800cdb6:	b209      	sxth	r1, r1
 800cdb8:	428b      	cmp	r3, r1
 800cdba:	da08      	bge.n	800cdce <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800cdbc:	4808      	ldr	r0, [pc, #32]	; (800cde0 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800cdbe:	4350      	muls	r0, r2
 800cdc0:	4a08      	ldr	r2, [pc, #32]	; (800cde4 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800cdc2:	4353      	muls	r3, r2
 800cdc4:	18c0      	adds	r0, r0, r3
 800cdc6:	1300      	asrs	r0, r0, #12
 800cdc8:	b200      	sxth	r0, r0
 800cdca:	b002      	add	sp, #8
 800cdcc:	4770      	bx	lr
 800cdce:	4806      	ldr	r0, [pc, #24]	; (800cde8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800cdd0:	4350      	muls	r0, r2
 800cdd2:	4a06      	ldr	r2, [pc, #24]	; (800cdec <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800cdd4:	4353      	muls	r3, r2
 800cdd6:	18c0      	adds	r0, r0, r3
 800cdd8:	e7f5      	b.n	800cdc6 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	000006a1 	.word	0x000006a1
 800cde0:	00000fd7 	.word	0x00000fd7
 800cde4:	00000327 	.word	0x00000327
 800cde8:	00000d71 	.word	0x00000d71
 800cdec:	000008fa 	.word	0x000008fa

0800cdf0 <internal_reg_read.lto_priv.627>:
 800cdf0:	23c0      	movs	r3, #192	; 0xc0
 800cdf2:	b513      	push	{r0, r1, r4, lr}
 800cdf4:	019b      	lsls	r3, r3, #6
 800cdf6:	4319      	orrs	r1, r3
 800cdf8:	466b      	mov	r3, sp
 800cdfa:	0014      	movs	r4, r2
 800cdfc:	8019      	strh	r1, [r3, #0]
 800cdfe:	466a      	mov	r2, sp
 800ce00:	2300      	movs	r3, #0
 800ce02:	4669      	mov	r1, sp
 800ce04:	8053      	strh	r3, [r2, #2]
 800ce06:	8093      	strh	r3, [r2, #4]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	2203      	movs	r2, #3
 800ce0c:	f7f9 fac6 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800ce10:	466b      	mov	r3, sp
 800ce12:	889b      	ldrh	r3, [r3, #4]
 800ce14:	8023      	strh	r3, [r4, #0]
 800ce16:	bd13      	pop	{r0, r1, r4, pc}

0800ce18 <read_reg_array>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	0007      	movs	r7, r0
 800ce1c:	000d      	movs	r5, r1
 800ce1e:	001e      	movs	r6, r3
 800ce20:	3a01      	subs	r2, #1
 800ce22:	b294      	uxth	r4, r2
 800ce24:	0064      	lsls	r4, r4, #1
 800ce26:	1c8a      	adds	r2, r1, #2
 800ce28:	18a4      	adds	r4, r4, r2
 800ce2a:	8829      	ldrh	r1, [r5, #0]
 800ce2c:	0032      	movs	r2, r6
 800ce2e:	0038      	movs	r0, r7
 800ce30:	3502      	adds	r5, #2
 800ce32:	f7ff ffdd 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800ce36:	3602      	adds	r6, #2
 800ce38:	42a5      	cmp	r5, r4
 800ce3a:	d1f6      	bne.n	800ce2a <read_reg_array+0x12>
 800ce3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce3e <acc_sensor_diagnostics_r2_sensor_status>:
 800ce3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce40:	4657      	mov	r7, sl
 800ce42:	464e      	mov	r6, r9
 800ce44:	46de      	mov	lr, fp
 800ce46:	4645      	mov	r5, r8
 800ce48:	b5e0      	push	{r5, r6, r7, lr}
 800ce4a:	4f1e      	ldr	r7, [pc, #120]	; (800cec4 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800ce4c:	b097      	sub	sp, #92	; 0x5c
 800ce4e:	003b      	movs	r3, r7
 800ce50:	3360      	adds	r3, #96	; 0x60
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	0006      	movs	r6, r0
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d904      	bls.n	800ce64 <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800ce5a:	4a1b      	ldr	r2, [pc, #108]	; (800cec8 <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800ce5c:	491b      	ldr	r1, [pc, #108]	; (800cecc <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800ce5e:	2002      	movs	r0, #2
 800ce60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce62:	4798      	blx	r3
 800ce64:	2201      	movs	r2, #1
 800ce66:	21b2      	movs	r1, #178	; 0xb2
 800ce68:	0030      	movs	r0, r6
 800ce6a:	f7fe f94f 	bl	800b10c <acc_sensor_reg_write>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	ac0e      	add	r4, sp, #56	; 0x38
 800ce72:	8023      	strh	r3, [r4, #0]
 800ce74:	3364      	adds	r3, #100	; 0x64
 800ce76:	469b      	mov	fp, r3
 800ce78:	3b53      	subs	r3, #83	; 0x53
 800ce7a:	4699      	mov	r9, r3
 800ce7c:	2380      	movs	r3, #128	; 0x80
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	4698      	mov	r8, r3
 800ce82:	2360      	movs	r3, #96	; 0x60
 800ce84:	469a      	mov	sl, r3
 800ce86:	44ba      	add	sl, r7
 800ce88:	0022      	movs	r2, r4
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	0030      	movs	r0, r6
 800ce8e:	f7ff ffaf 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800ce92:	4642      	mov	r2, r8
 800ce94:	8823      	ldrh	r3, [r4, #0]
 800ce96:	4213      	tst	r3, r2
 800ce98:	d01c      	beq.n	800ced4 <acc_sensor_diagnostics_r2_sensor_status+0x96>
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	2a01      	cmp	r2, #1
 800cea0:	d908      	bls.n	800ceb4 <acc_sensor_diagnostics_r2_sensor_status+0x76>
 800cea2:	059b      	lsls	r3, r3, #22
 800cea4:	0d9b      	lsrs	r3, r3, #22
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <acc_sensor_diagnostics_r2_sensor_status+0x92>)
 800ceaa:	0033      	movs	r3, r6
 800ceac:	4907      	ldr	r1, [pc, #28]	; (800cecc <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800ceae:	2002      	movs	r0, #2
 800ceb0:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ceb2:	47a8      	blx	r5
 800ceb4:	465d      	mov	r5, fp
 800ceb6:	3d01      	subs	r5, #1
 800ceb8:	b2ab      	uxth	r3, r5
 800ceba:	469b      	mov	fp, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e3      	bne.n	800ce88 <acc_sensor_diagnostics_r2_sensor_status+0x4a>
 800cec0:	e016      	b.n	800cef0 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800cec2:	46c0      	nop			; (mov r8, r8)
 800cec4:	20000280 	.word	0x20000280
 800cec8:	0801e0ee 	.word	0x0801e0ee
 800cecc:	0801e12e 	.word	0x0801e12e
 800ced0:	0801e141 	.word	0x0801e141
 800ced4:	003a      	movs	r2, r7
 800ced6:	3260      	adds	r2, #96	; 0x60
 800ced8:	7812      	ldrb	r2, [r2, #0]
 800ceda:	2a01      	cmp	r2, #1
 800cedc:	d908      	bls.n	800cef0 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800cede:	059b      	lsls	r3, r3, #22
 800cee0:	0d9b      	lsrs	r3, r3, #22
 800cee2:	9300      	str	r3, [sp, #0]
 800cee4:	4ad0      	ldr	r2, [pc, #832]	; (800d228 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800cee6:	0033      	movs	r3, r6
 800cee8:	49d0      	ldr	r1, [pc, #832]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ceea:	2002      	movs	r0, #2
 800ceec:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ceee:	47a8      	blx	r5
 800cef0:	2500      	movs	r5, #0
 800cef2:	ab02      	add	r3, sp, #8
 800cef4:	aa0b      	add	r2, sp, #44	; 0x2c
 800cef6:	0029      	movs	r1, r5
 800cef8:	0030      	movs	r0, r6
 800cefa:	849d      	strh	r5, [r3, #36]	; 0x24
 800cefc:	f7ff ff78 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800cf00:	ab02      	add	r3, sp, #8
 800cf02:	aa02      	add	r2, sp, #8
 800cf04:	4694      	mov	ip, r2
 800cf06:	84dd      	strh	r5, [r3, #38]	; 0x26
 800cf08:	2326      	movs	r3, #38	; 0x26
 800cf0a:	4463      	add	r3, ip
 800cf0c:	001a      	movs	r2, r3
 800cf0e:	212a      	movs	r1, #42	; 0x2a
 800cf10:	0030      	movs	r0, r6
 800cf12:	f7ff ff6d 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800cf16:	ab02      	add	r3, sp, #8
 800cf18:	aa0c      	add	r2, sp, #48	; 0x30
 800cf1a:	2128      	movs	r1, #40	; 0x28
 800cf1c:	0030      	movs	r0, r6
 800cf1e:	851d      	strh	r5, [r3, #40]	; 0x28
 800cf20:	f7ff ff66 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800cf24:	4bc2      	ldr	r3, [pc, #776]	; (800d230 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800cf26:	2210      	movs	r2, #16
 800cf28:	0019      	movs	r1, r3
 800cf2a:	4698      	mov	r8, r3
 800cf2c:	3158      	adds	r1, #88	; 0x58
 800cf2e:	0023      	movs	r3, r4
 800cf30:	0030      	movs	r0, r6
 800cf32:	f7ff ff71 	bl	800ce18 <read_reg_array>
 800cf36:	003b      	movs	r3, r7
 800cf38:	3360      	adds	r3, #96	; 0x60
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d915      	bls.n	800cf6c <acc_sensor_diagnostics_r2_sensor_status+0x12e>
 800cf40:	89e3      	ldrh	r3, [r4, #14]
 800cf42:	4abc      	ldr	r2, [pc, #752]	; (800d234 <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 800cf44:	9307      	str	r3, [sp, #28]
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	49b8      	ldr	r1, [pc, #736]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cf4a:	9306      	str	r3, [sp, #24]
 800cf4c:	8963      	ldrh	r3, [r4, #10]
 800cf4e:	2002      	movs	r0, #2
 800cf50:	9305      	str	r3, [sp, #20]
 800cf52:	8923      	ldrh	r3, [r4, #8]
 800cf54:	9304      	str	r3, [sp, #16]
 800cf56:	88e3      	ldrh	r3, [r4, #6]
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	88a3      	ldrh	r3, [r4, #4]
 800cf5c:	9302      	str	r3, [sp, #8]
 800cf5e:	8863      	ldrh	r3, [r4, #2]
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	8823      	ldrh	r3, [r4, #0]
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cf68:	0033      	movs	r3, r6
 800cf6a:	47a8      	blx	r5
 800cf6c:	003b      	movs	r3, r7
 800cf6e:	3360      	adds	r3, #96	; 0x60
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d915      	bls.n	800cfa2 <acc_sensor_diagnostics_r2_sensor_status+0x164>
 800cf76:	8be3      	ldrh	r3, [r4, #30]
 800cf78:	4aaf      	ldr	r2, [pc, #700]	; (800d238 <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 800cf7a:	9307      	str	r3, [sp, #28]
 800cf7c:	8ba3      	ldrh	r3, [r4, #28]
 800cf7e:	49ab      	ldr	r1, [pc, #684]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cf80:	9306      	str	r3, [sp, #24]
 800cf82:	8b63      	ldrh	r3, [r4, #26]
 800cf84:	2002      	movs	r0, #2
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	8b23      	ldrh	r3, [r4, #24]
 800cf8a:	9304      	str	r3, [sp, #16]
 800cf8c:	8ae3      	ldrh	r3, [r4, #22]
 800cf8e:	9303      	str	r3, [sp, #12]
 800cf90:	8aa3      	ldrh	r3, [r4, #20]
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	8a63      	ldrh	r3, [r4, #18]
 800cf96:	9301      	str	r3, [sp, #4]
 800cf98:	8a23      	ldrh	r3, [r4, #16]
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cf9e:	0033      	movs	r3, r6
 800cfa0:	47a8      	blx	r5
 800cfa2:	4641      	mov	r1, r8
 800cfa4:	0023      	movs	r3, r4
 800cfa6:	3178      	adds	r1, #120	; 0x78
 800cfa8:	2204      	movs	r2, #4
 800cfaa:	0030      	movs	r0, r6
 800cfac:	f7ff ff34 	bl	800ce18 <read_reg_array>
 800cfb0:	003b      	movs	r3, r7
 800cfb2:	3360      	adds	r3, #96	; 0x60
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d90d      	bls.n	800cfd6 <acc_sensor_diagnostics_r2_sensor_status+0x198>
 800cfba:	88e3      	ldrh	r3, [r4, #6]
 800cfbc:	4a9f      	ldr	r2, [pc, #636]	; (800d23c <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 800cfbe:	9303      	str	r3, [sp, #12]
 800cfc0:	88a3      	ldrh	r3, [r4, #4]
 800cfc2:	499a      	ldr	r1, [pc, #616]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cfc4:	9302      	str	r3, [sp, #8]
 800cfc6:	8863      	ldrh	r3, [r4, #2]
 800cfc8:	2002      	movs	r0, #2
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	8823      	ldrh	r3, [r4, #0]
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cfd2:	0033      	movs	r3, r6
 800cfd4:	47a8      	blx	r5
 800cfd6:	ab02      	add	r3, sp, #8
 800cfd8:	469c      	mov	ip, r3
 800cfda:	222a      	movs	r2, #42	; 0x2a
 800cfdc:	2500      	movs	r5, #0
 800cfde:	4462      	add	r2, ip
 800cfe0:	2153      	movs	r1, #83	; 0x53
 800cfe2:	0030      	movs	r0, r6
 800cfe4:	8015      	strh	r5, [r2, #0]
 800cfe6:	f7ff ff03 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800cfea:	0022      	movs	r2, r4
 800cfec:	2140      	movs	r1, #64	; 0x40
 800cfee:	0030      	movs	r0, r6
 800cff0:	8025      	strh	r5, [r4, #0]
 800cff2:	f7ff fefd 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800cff6:	003b      	movs	r3, r7
 800cff8:	3360      	adds	r3, #96	; 0x60
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d907      	bls.n	800d010 <acc_sensor_diagnostics_r2_sensor_status+0x1d2>
 800d000:	8823      	ldrh	r3, [r4, #0]
 800d002:	4a8f      	ldr	r2, [pc, #572]	; (800d240 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	4989      	ldr	r1, [pc, #548]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d008:	0033      	movs	r3, r6
 800d00a:	2002      	movs	r0, #2
 800d00c:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d00e:	47a8      	blx	r5
 800d010:	003b      	movs	r3, r7
 800d012:	3360      	adds	r3, #96	; 0x60
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	2b01      	cmp	r3, #1
 800d018:	d90c      	bls.n	800d034 <acc_sensor_diagnostics_r2_sensor_status+0x1f6>
 800d01a:	2240      	movs	r2, #64	; 0x40
 800d01c:	8823      	ldrh	r3, [r4, #0]
 800d01e:	4983      	ldr	r1, [pc, #524]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d020:	401a      	ands	r2, r3
 800d022:	9201      	str	r2, [sp, #4]
 800d024:	2280      	movs	r2, #128	; 0x80
 800d026:	4013      	ands	r3, r2
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4a86      	ldr	r2, [pc, #536]	; (800d244 <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 800d02c:	0033      	movs	r3, r6
 800d02e:	2002      	movs	r0, #2
 800d030:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d032:	47a8      	blx	r5
 800d034:	003b      	movs	r3, r7
 800d036:	3360      	adds	r3, #96	; 0x60
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d90c      	bls.n	800d058 <acc_sensor_diagnostics_r2_sensor_status+0x21a>
 800d03e:	2210      	movs	r2, #16
 800d040:	8823      	ldrh	r3, [r4, #0]
 800d042:	497a      	ldr	r1, [pc, #488]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d044:	401a      	ands	r2, r3
 800d046:	9201      	str	r2, [sp, #4]
 800d048:	2220      	movs	r2, #32
 800d04a:	4013      	ands	r3, r2
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	4a7e      	ldr	r2, [pc, #504]	; (800d248 <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 800d050:	0033      	movs	r3, r6
 800d052:	2002      	movs	r0, #2
 800d054:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d056:	47a8      	blx	r5
 800d058:	003b      	movs	r3, r7
 800d05a:	3360      	adds	r3, #96	; 0x60
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d90c      	bls.n	800d07c <acc_sensor_diagnostics_r2_sensor_status+0x23e>
 800d062:	2204      	movs	r2, #4
 800d064:	8823      	ldrh	r3, [r4, #0]
 800d066:	4971      	ldr	r1, [pc, #452]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d068:	401a      	ands	r2, r3
 800d06a:	9201      	str	r2, [sp, #4]
 800d06c:	2208      	movs	r2, #8
 800d06e:	4013      	ands	r3, r2
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	4a76      	ldr	r2, [pc, #472]	; (800d24c <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 800d074:	0033      	movs	r3, r6
 800d076:	2002      	movs	r0, #2
 800d078:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d07a:	47a8      	blx	r5
 800d07c:	0023      	movs	r3, r4
 800d07e:	2210      	movs	r2, #16
 800d080:	4973      	ldr	r1, [pc, #460]	; (800d250 <acc_sensor_diagnostics_r2_sensor_status+0x412>)
 800d082:	0030      	movs	r0, r6
 800d084:	f7ff fec8 	bl	800ce18 <read_reg_array>
 800d088:	003b      	movs	r3, r7
 800d08a:	2200      	movs	r2, #0
 800d08c:	3360      	adds	r3, #96	; 0x60
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	9209      	str	r2, [sp, #36]	; 0x24
 800d092:	2b01      	cmp	r3, #1
 800d094:	d909      	bls.n	800d0aa <acc_sensor_diagnostics_r2_sensor_status+0x26c>
 800d096:	8823      	ldrh	r3, [r4, #0]
 800d098:	4a6e      	ldr	r2, [pc, #440]	; (800d254 <acc_sensor_diagnostics_r2_sensor_status+0x416>)
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	4963      	ldr	r1, [pc, #396]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d09e:	0033      	movs	r3, r6
 800d0a0:	2002      	movs	r0, #2
 800d0a2:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d0a4:	47a8      	blx	r5
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0aa:	003b      	movs	r3, r7
 800d0ac:	3360      	adds	r3, #96	; 0x60
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d90f      	bls.n	800d0d4 <acc_sensor_diagnostics_r2_sensor_status+0x296>
 800d0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b6:	4a68      	ldr	r2, [pc, #416]	; (800d258 <acc_sensor_diagnostics_r2_sensor_status+0x41a>)
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	4698      	mov	r8, r3
 800d0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c0:	495a      	ldr	r1, [pc, #360]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d0c2:	005d      	lsls	r5, r3, #1
 800d0c4:	5b63      	ldrh	r3, [r4, r5]
 800d0c6:	2002      	movs	r0, #2
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d0cc:	0033      	movs	r3, r6
 800d0ce:	47a8      	blx	r5
 800d0d0:	4643      	mov	r3, r8
 800d0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	4698      	mov	r8, r3
 800d0d8:	335f      	adds	r3, #95	; 0x5f
 800d0da:	4699      	mov	r9, r3
 800d0dc:	4b5f      	ldr	r3, [pc, #380]	; (800d25c <acc_sensor_diagnostics_r2_sensor_status+0x41e>)
 800d0de:	44b9      	add	r9, r7
 800d0e0:	469b      	mov	fp, r3
 800d0e2:	4b52      	ldr	r3, [pc, #328]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d0e4:	469a      	mov	sl, r3
 800d0e6:	464b      	mov	r3, r9
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d910      	bls.n	800d110 <acc_sensor_diagnostics_r2_sensor_status+0x2d2>
 800d0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0f0:	465a      	mov	r2, fp
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	5ae3      	ldrh	r3, [r4, r3]
 800d0f8:	4651      	mov	r1, sl
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0fe:	2002      	movs	r0, #2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	5ae3      	ldrh	r3, [r4, r3]
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	4643      	mov	r3, r8
 800d108:	9300      	str	r3, [sp, #0]
 800d10a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d10c:	0033      	movs	r3, r6
 800d10e:	47a8      	blx	r5
 800d110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d112:	3502      	adds	r5, #2
 800d114:	b2eb      	uxtb	r3, r5
 800d116:	9309      	str	r3, [sp, #36]	; 0x24
 800d118:	2301      	movs	r3, #1
 800d11a:	469c      	mov	ip, r3
 800d11c:	44e0      	add	r8, ip
 800d11e:	4643      	mov	r3, r8
 800d120:	2b08      	cmp	r3, #8
 800d122:	d1e0      	bne.n	800d0e6 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>
 800d124:	2300      	movs	r3, #0
 800d126:	469a      	mov	sl, r3
 800d128:	4652      	mov	r2, sl
 800d12a:	ab02      	add	r3, sp, #8
 800d12c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800d12e:	219d      	movs	r1, #157	; 0x9d
 800d130:	aa0d      	add	r2, sp, #52	; 0x34
 800d132:	0030      	movs	r0, r6
 800d134:	f7ff fe5c 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d138:	ab02      	add	r3, sp, #8
 800d13a:	469c      	mov	ip, r3
 800d13c:	252e      	movs	r5, #46	; 0x2e
 800d13e:	4653      	mov	r3, sl
 800d140:	4465      	add	r5, ip
 800d142:	002a      	movs	r2, r5
 800d144:	2199      	movs	r1, #153	; 0x99
 800d146:	0030      	movs	r0, r6
 800d148:	802b      	strh	r3, [r5, #0]
 800d14a:	9509      	str	r5, [sp, #36]	; 0x24
 800d14c:	f7ff fe50 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d150:	4653      	mov	r3, sl
 800d152:	0022      	movs	r2, r4
 800d154:	2196      	movs	r1, #150	; 0x96
 800d156:	0030      	movs	r0, r6
 800d158:	8023      	strh	r3, [r4, #0]
 800d15a:	f7ff fe49 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d15e:	4652      	mov	r2, sl
 800d160:	21b2      	movs	r1, #178	; 0xb2
 800d162:	0030      	movs	r0, r6
 800d164:	f7fd ffd2 	bl	800b10c <acc_sensor_reg_write>
 800d168:	003b      	movs	r3, r7
 800d16a:	3360      	adds	r3, #96	; 0x60
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d90e      	bls.n	800d190 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800d172:	ab02      	add	r3, sp, #8
 800d174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d176:	4a3a      	ldr	r2, [pc, #232]	; (800d260 <acc_sensor_diagnostics_r2_sensor_status+0x422>)
 800d178:	9302      	str	r3, [sp, #8]
 800d17a:	ab02      	add	r3, sp, #8
 800d17c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d17e:	492b      	ldr	r1, [pc, #172]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	ab02      	add	r3, sp, #8
 800d184:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d186:	2002      	movs	r0, #2
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d18c:	0033      	movs	r3, r6
 800d18e:	47a8      	blx	r5
 800d190:	003b      	movs	r3, r7
 800d192:	3360      	adds	r3, #96	; 0x60
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d90b      	bls.n	800d1b2 <acc_sensor_diagnostics_r2_sensor_status+0x374>
 800d19a:	aa02      	add	r2, sp, #8
 800d19c:	4694      	mov	ip, r2
 800d19e:	232a      	movs	r3, #42	; 0x2a
 800d1a0:	4463      	add	r3, ip
 800d1a2:	881b      	ldrh	r3, [r3, #0]
 800d1a4:	4a2f      	ldr	r2, [pc, #188]	; (800d264 <acc_sensor_diagnostics_r2_sensor_status+0x426>)
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	4920      	ldr	r1, [pc, #128]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d1aa:	0033      	movs	r3, r6
 800d1ac:	2002      	movs	r0, #2
 800d1ae:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d1b0:	47a8      	blx	r5
 800d1b2:	003b      	movs	r3, r7
 800d1b4:	3360      	adds	r3, #96	; 0x60
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d908      	bls.n	800d1ce <acc_sensor_diagnostics_r2_sensor_status+0x390>
 800d1bc:	ab02      	add	r3, sp, #8
 800d1be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d1c0:	4a29      	ldr	r2, [pc, #164]	; (800d268 <acc_sensor_diagnostics_r2_sensor_status+0x42a>)
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	4919      	ldr	r1, [pc, #100]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d1c6:	0033      	movs	r3, r6
 800d1c8:	2002      	movs	r0, #2
 800d1ca:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d1cc:	47a8      	blx	r5
 800d1ce:	003b      	movs	r3, r7
 800d1d0:	3360      	adds	r3, #96	; 0x60
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d908      	bls.n	800d1ea <acc_sensor_diagnostics_r2_sensor_status+0x3ac>
 800d1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1da:	4a24      	ldr	r2, [pc, #144]	; (800d26c <acc_sensor_diagnostics_r2_sensor_status+0x42e>)
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	4913      	ldr	r1, [pc, #76]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	2002      	movs	r0, #2
 800d1e4:	0033      	movs	r3, r6
 800d1e6:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800d1e8:	47a8      	blx	r5
 800d1ea:	003b      	movs	r3, r7
 800d1ec:	3360      	adds	r3, #96	; 0x60
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d907      	bls.n	800d204 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>
 800d1f4:	8823      	ldrh	r3, [r4, #0]
 800d1f6:	4a1e      	ldr	r2, [pc, #120]	; (800d270 <acc_sensor_diagnostics_r2_sensor_status+0x432>)
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	490c      	ldr	r1, [pc, #48]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d1fc:	0033      	movs	r3, r6
 800d1fe:	2002      	movs	r0, #2
 800d200:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800d202:	47a0      	blx	r4
 800d204:	003b      	movs	r3, r7
 800d206:	3360      	adds	r3, #96	; 0x60
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d904      	bls.n	800d218 <acc_sensor_diagnostics_r2_sensor_status+0x3da>
 800d20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d210:	4a18      	ldr	r2, [pc, #96]	; (800d274 <acc_sensor_diagnostics_r2_sensor_status+0x436>)
 800d212:	4906      	ldr	r1, [pc, #24]	; (800d22c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800d214:	2002      	movs	r0, #2
 800d216:	4798      	blx	r3
 800d218:	b017      	add	sp, #92	; 0x5c
 800d21a:	bc3c      	pop	{r2, r3, r4, r5}
 800d21c:	4690      	mov	r8, r2
 800d21e:	4699      	mov	r9, r3
 800d220:	46a2      	mov	sl, r4
 800d222:	46ab      	mov	fp, r5
 800d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d226:	46c0      	nop			; (mov r8, r8)
 800d228:	0801e15e 	.word	0x0801e15e
 800d22c:	0801e12e 	.word	0x0801e12e
 800d230:	080191d8 	.word	0x080191d8
 800d234:	0801e17b 	.word	0x0801e17b
 800d238:	0801e1c2 	.word	0x0801e1c2
 800d23c:	0801e20b 	.word	0x0801e20b
 800d240:	0801e23c 	.word	0x0801e23c
 800d244:	0801e259 	.word	0x0801e259
 800d248:	0801e285 	.word	0x0801e285
 800d24c:	0801e2b6 	.word	0x0801e2b6
 800d250:	08019258 	.word	0x08019258
 800d254:	0801e2e6 	.word	0x0801e2e6
 800d258:	0801e30d 	.word	0x0801e30d
 800d25c:	0801e32b 	.word	0x0801e32b
 800d260:	0801e353 	.word	0x0801e353
 800d264:	0801e3a4 	.word	0x0801e3a4
 800d268:	0801e3c7 	.word	0x0801e3c7
 800d26c:	0801e3e3 	.word	0x0801e3e3
 800d270:	0801e3f9 	.word	0x0801e3f9
 800d274:	0801e413 	.word	0x0801e413

0800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>:
 800d278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27a:	464e      	mov	r6, r9
 800d27c:	46de      	mov	lr, fp
 800d27e:	4645      	mov	r5, r8
 800d280:	4657      	mov	r7, sl
 800d282:	0004      	movs	r4, r0
 800d284:	b5e0      	push	{r5, r6, r7, lr}
 800d286:	468b      	mov	fp, r1
 800d288:	4691      	mov	r9, r2
 800d28a:	2665      	movs	r6, #101	; 0x65
 800d28c:	4d47      	ldr	r5, [pc, #284]	; (800d3ac <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x134>)
 800d28e:	b085      	sub	sp, #20
 800d290:	4659      	mov	r1, fp
 800d292:	0020      	movs	r0, r4
 800d294:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800d296:	4798      	blx	r3
 800d298:	4680      	mov	r8, r0
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d10f      	bne.n	800d2be <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x46>
 800d29e:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800d2a0:	0023      	movs	r3, r4
 800d2a2:	4a43      	ldr	r2, [pc, #268]	; (800d3b0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x138>)
 800d2a4:	4943      	ldr	r1, [pc, #268]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d2a6:	47a8      	blx	r5
 800d2a8:	0020      	movs	r0, r4
 800d2aa:	f7ff fdc8 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	b005      	add	sp, #20
 800d2b2:	bc3c      	pop	{r2, r3, r4, r5}
 800d2b4:	4690      	mov	r8, r2
 800d2b6:	4699      	mov	r9, r3
 800d2b8:	46a2      	mov	sl, r4
 800d2ba:	46ab      	mov	fp, r5
 800d2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2be:	270e      	movs	r7, #14
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	446f      	add	r7, sp
 800d2c4:	003a      	movs	r2, r7
 800d2c6:	212a      	movs	r1, #42	; 0x2a
 800d2c8:	0020      	movs	r0, r4
 800d2ca:	469a      	mov	sl, r3
 800d2cc:	803b      	strh	r3, [r7, #0]
 800d2ce:	f7ff fd8f 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d2d2:	2240      	movs	r2, #64	; 0x40
 800d2d4:	883b      	ldrh	r3, [r7, #0]
 800d2d6:	4213      	tst	r3, r2
 800d2d8:	d04f      	beq.n	800d37a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x102>
 800d2da:	003a      	movs	r2, r7
 800d2dc:	2128      	movs	r1, #40	; 0x28
 800d2de:	0020      	movs	r0, r4
 800d2e0:	f7ff fd86 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	883a      	ldrh	r2, [r7, #0]
 800d2e8:	b2d3      	uxtb	r3, r2
 800d2ea:	700b      	strb	r3, [r1, #0]
 800d2ec:	804a      	strh	r2, [r1, #2]
 800d2ee:	2b0b      	cmp	r3, #11
 800d2f0:	d839      	bhi.n	800d366 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xee>
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f001 fe5e 	bl	800efb4 <__gnu_thumb1_case_sqi>
 800d2f8:	dbdb1806 	.word	0xdbdb1806
 800d2fc:	dbdbdbdb 	.word	0xdbdbdbdb
 800d300:	dbdbdbdb 	.word	0xdbdbdbdb
 800d304:	0023      	movs	r3, r4
 800d306:	4a2c      	ldr	r2, [pc, #176]	; (800d3b8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x140>)
 800d308:	492a      	ldr	r1, [pc, #168]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d30a:	2000      	movs	r0, #0
 800d30c:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800d30e:	47b0      	blx	r6
 800d310:	0020      	movs	r0, r4
 800d312:	f7ff fd94 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d316:	0023      	movs	r3, r4
 800d318:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800d31a:	4a28      	ldr	r2, [pc, #160]	; (800d3bc <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x144>)
 800d31c:	4925      	ldr	r1, [pc, #148]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d31e:	2000      	movs	r0, #0
 800d320:	47a8      	blx	r5
 800d322:	2300      	movs	r3, #0
 800d324:	4698      	mov	r8, r3
 800d326:	e7c2      	b.n	800d2ae <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800d328:	0a11      	lsrs	r1, r2, #8
 800d32a:	2910      	cmp	r1, #16
 800d32c:	d804      	bhi.n	800d338 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xc0>
 800d32e:	2301      	movs	r3, #1
 800d330:	408b      	lsls	r3, r1
 800d332:	4923      	ldr	r1, [pc, #140]	; (800d3c0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x148>)
 800d334:	420b      	tst	r3, r1
 800d336:	d105      	bne.n	800d344 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xcc>
 800d338:	2384      	movs	r3, #132	; 0x84
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	019b      	lsls	r3, r3, #6
 800d33e:	431a      	orrs	r2, r3
 800d340:	464b      	mov	r3, r9
 800d342:	805a      	strh	r2, [r3, #2]
 800d344:	464b      	mov	r3, r9
 800d346:	885a      	ldrh	r2, [r3, #2]
 800d348:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800d34a:	0a12      	lsrs	r2, r2, #8
 800d34c:	3a01      	subs	r2, #1
 800d34e:	b2d2      	uxtb	r2, r2
 800d350:	4b1c      	ldr	r3, [pc, #112]	; (800d3c4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x14c>)
 800d352:	2a20      	cmp	r2, #32
 800d354:	d802      	bhi.n	800d35c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xe4>
 800d356:	4b1c      	ldr	r3, [pc, #112]	; (800d3c8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x150>)
 800d358:	0092      	lsls	r2, r2, #2
 800d35a:	58d3      	ldr	r3, [r2, r3]
 800d35c:	4a1b      	ldr	r2, [pc, #108]	; (800d3cc <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x154>)
 800d35e:	4915      	ldr	r1, [pc, #84]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d360:	2000      	movs	r0, #0
 800d362:	47b0      	blx	r6
 800d364:	e7d4      	b.n	800d310 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800d366:	9400      	str	r4, [sp, #0]
 800d368:	4a19      	ldr	r2, [pc, #100]	; (800d3d0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x158>)
 800d36a:	4912      	ldr	r1, [pc, #72]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d36c:	4650      	mov	r0, sl
 800d36e:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800d370:	47b0      	blx	r6
 800d372:	464b      	mov	r3, r9
 800d374:	2200      	movs	r2, #0
 800d376:	701a      	strb	r2, [r3, #0]
 800d378:	e7ca      	b.n	800d310 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800d37a:	002b      	movs	r3, r5
 800d37c:	3360      	adds	r3, #96	; 0x60
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d005      	beq.n	800d390 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x118>
 800d384:	0023      	movs	r3, r4
 800d386:	4a13      	ldr	r2, [pc, #76]	; (800d3d4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x15c>)
 800d388:	490a      	ldr	r1, [pc, #40]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d38a:	2001      	movs	r0, #1
 800d38c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800d38e:	47b8      	blx	r7
 800d390:	3e01      	subs	r6, #1
 800d392:	b2b6      	uxth	r6, r6
 800d394:	2e00      	cmp	r6, #0
 800d396:	d000      	beq.n	800d39a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x122>
 800d398:	e77a      	b.n	800d290 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x18>
 800d39a:	9400      	str	r4, [sp, #0]
 800d39c:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 800d39e:	2364      	movs	r3, #100	; 0x64
 800d3a0:	4a0d      	ldr	r2, [pc, #52]	; (800d3d8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x160>)
 800d3a2:	4904      	ldr	r1, [pc, #16]	; (800d3b4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800d3a4:	0030      	movs	r0, r6
 800d3a6:	47a0      	blx	r4
 800d3a8:	46b0      	mov	r8, r6
 800d3aa:	e780      	b.n	800d2ae <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800d3ac:	20000280 	.word	0x20000280
 800d3b0:	0801e461 	.word	0x0801e461
 800d3b4:	0801ccd2 	.word	0x0801ccd2
 800d3b8:	0801e489 	.word	0x0801e489
 800d3bc:	0801e4fb 	.word	0x0801e4fb
 800d3c0:	00010016 	.word	0x00010016
 800d3c4:	0801e453 	.word	0x0801e453
 800d3c8:	0801a41c 	.word	0x0801a41c
 800d3cc:	0801e4ac 	.word	0x0801e4ac
 800d3d0:	0801e4cc 	.word	0x0801e4cc
 800d3d4:	0801e523 	.word	0x0801e523
 800d3d8:	0801e544 	.word	0x0801e544

0800d3dc <acc_sensor_protocol_r2_stop.constprop.25>:
 800d3dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3de:	0005      	movs	r5, r0
 800d3e0:	f7f8 fdf8 	bl	8005fd4 <acc_sensor_protocol_r2_is_sensor_running>
 800d3e4:	1e04      	subs	r4, r0, #0
 800d3e6:	d109      	bne.n	800d3fc <acc_sensor_protocol_r2_stop.constprop.25+0x20>
 800d3e8:	4b1a      	ldr	r3, [pc, #104]	; (800d454 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800d3ea:	4a1b      	ldr	r2, [pc, #108]	; (800d458 <acc_sensor_protocol_r2_stop.constprop.25+0x7c>)
 800d3ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ee:	491b      	ldr	r1, [pc, #108]	; (800d45c <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800d3f0:	4798      	blx	r3
 800d3f2:	0028      	movs	r0, r5
 800d3f4:	f7ff fd23 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d3f8:	0020      	movs	r0, r4
 800d3fa:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d3fc:	4b18      	ldr	r3, [pc, #96]	; (800d460 <acc_sensor_protocol_r2_stop.constprop.25+0x84>)
 800d3fe:	ae01      	add	r6, sp, #4
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	2202      	movs	r2, #2
 800d404:	2300      	movs	r3, #0
 800d406:	0031      	movs	r1, r6
 800d408:	0028      	movs	r0, r5
 800d40a:	f7f8 ffc7 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800d40e:	0028      	movs	r0, r5
 800d410:	f7f8 f99c 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 800d414:	1e04      	subs	r4, r0, #0
 800d416:	d0ef      	beq.n	800d3f8 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800d418:	21fa      	movs	r1, #250	; 0xfa
 800d41a:	0032      	movs	r2, r6
 800d41c:	00c9      	lsls	r1, r1, #3
 800d41e:	0028      	movs	r0, r5
 800d420:	f7ff ff2a 	bl	800d278 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800d424:	2800      	cmp	r0, #0
 800d426:	d101      	bne.n	800d42c <acc_sensor_protocol_r2_stop.constprop.25+0x50>
 800d428:	2400      	movs	r4, #0
 800d42a:	e7e5      	b.n	800d3f8 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800d42c:	0028      	movs	r0, r5
 800d42e:	f7f8 f98d 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 800d432:	1e04      	subs	r4, r0, #0
 800d434:	d0f8      	beq.n	800d428 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800d436:	7833      	ldrb	r3, [r6, #0]
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d0dd      	beq.n	800d3f8 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800d43c:	4a05      	ldr	r2, [pc, #20]	; (800d454 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800d43e:	8873      	ldrh	r3, [r6, #2]
 800d440:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800d442:	4906      	ldr	r1, [pc, #24]	; (800d45c <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800d444:	4a07      	ldr	r2, [pc, #28]	; (800d464 <acc_sensor_protocol_r2_stop.constprop.25+0x88>)
 800d446:	2000      	movs	r0, #0
 800d448:	47a0      	blx	r4
 800d44a:	0028      	movs	r0, r5
 800d44c:	f7ff fcf7 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d450:	e7ea      	b.n	800d428 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800d452:	46c0      	nop			; (mov r8, r8)
 800d454:	20000280 	.word	0x20000280
 800d458:	0801e57d 	.word	0x0801e57d
 800d45c:	0801ccd2 	.word	0x0801ccd2
 800d460:	00011074 	.word	0x00011074
 800d464:	0801e5af 	.word	0x0801e5af

0800d468 <acc_sensor_protocol_r2_prepare_load.constprop.21>:
 800d468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d46a:	46ce      	mov	lr, r9
 800d46c:	4647      	mov	r7, r8
 800d46e:	b580      	push	{r7, lr}
 800d470:	b083      	sub	sp, #12
 800d472:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d474:	0852      	lsrs	r2, r2, #1
 800d476:	4e37      	ldr	r6, [pc, #220]	; (800d554 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xec>)
 800d478:	602a      	str	r2, [r5, #0]
 800d47a:	0004      	movs	r4, r0
 800d47c:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800d47e:	0840      	lsrs	r0, r0, #1
 800d480:	4290      	cmp	r0, r2
 800d482:	d900      	bls.n	800d486 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x1e>
 800d484:	0010      	movs	r0, r2
 800d486:	2701      	movs	r7, #1
 800d488:	3102      	adds	r1, #2
 800d48a:	6019      	str	r1, [r3, #0]
 800d48c:	2300      	movs	r3, #0
 800d48e:	3801      	subs	r0, #1
 800d490:	43b8      	bics	r0, r7
 800d492:	6028      	str	r0, [r5, #0]
 800d494:	ad01      	add	r5, sp, #4
 800d496:	002a      	movs	r2, r5
 800d498:	212a      	movs	r1, #42	; 0x2a
 800d49a:	0020      	movs	r0, r4
 800d49c:	802b      	strh	r3, [r5, #0]
 800d49e:	f7ff fca7 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d4a2:	882b      	ldrh	r3, [r5, #0]
 800d4a4:	065b      	lsls	r3, r3, #25
 800d4a6:	d50d      	bpl.n	800d4c4 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x5c>
 800d4a8:	0033      	movs	r3, r6
 800d4aa:	3360      	adds	r3, #96	; 0x60
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d005      	beq.n	800d4be <acc_sensor_protocol_r2_prepare_load.constprop.21+0x56>
 800d4b2:	0038      	movs	r0, r7
 800d4b4:	0023      	movs	r3, r4
 800d4b6:	4a28      	ldr	r2, [pc, #160]	; (800d558 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf0>)
 800d4b8:	4928      	ldr	r1, [pc, #160]	; (800d55c <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800d4ba:	6e77      	ldr	r7, [r6, #100]	; 0x64
 800d4bc:	47b8      	blx	r7
 800d4be:	0020      	movs	r0, r4
 800d4c0:	f7ff fcbd 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d4c4:	0020      	movs	r0, r4
 800d4c6:	f7f8 fd85 	bl	8005fd4 <acc_sensor_protocol_r2_is_sensor_running>
 800d4ca:	4680      	mov	r8, r0
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d00e      	beq.n	800d4ee <acc_sensor_protocol_r2_prepare_load.constprop.21+0x86>
 800d4d0:	0023      	movs	r3, r4
 800d4d2:	4a23      	ldr	r2, [pc, #140]	; (800d560 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf8>)
 800d4d4:	4921      	ldr	r1, [pc, #132]	; (800d55c <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800d4da:	47a8      	blx	r5
 800d4dc:	0020      	movs	r0, r4
 800d4de:	f7ff fcae 	bl	800ce3e <acc_sensor_diagnostics_r2_sensor_status>
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	b003      	add	sp, #12
 800d4e6:	bc0c      	pop	{r2, r3}
 800d4e8:	4690      	mov	r8, r2
 800d4ea:	4699      	mov	r9, r3
 800d4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ee:	466b      	mov	r3, sp
 800d4f0:	1c9e      	adds	r6, r3, #2
 800d4f2:	2702      	movs	r7, #2
 800d4f4:	0032      	movs	r2, r6
 800d4f6:	2180      	movs	r1, #128	; 0x80
 800d4f8:	0020      	movs	r0, r4
 800d4fa:	f7ff fc79 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d4fe:	2284      	movs	r2, #132	; 0x84
 800d500:	8833      	ldrh	r3, [r6, #0]
 800d502:	0152      	lsls	r2, r2, #5
 800d504:	43bb      	bics	r3, r7
 800d506:	433b      	orrs	r3, r7
 800d508:	4691      	mov	r9, r2
 800d50a:	802a      	strh	r2, [r5, #0]
 800d50c:	806b      	strh	r3, [r5, #2]
 800d50e:	003a      	movs	r2, r7
 800d510:	4643      	mov	r3, r8
 800d512:	0029      	movs	r1, r5
 800d514:	0020      	movs	r0, r4
 800d516:	f7f8 ff41 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800d51a:	0032      	movs	r2, r6
 800d51c:	2180      	movs	r1, #128	; 0x80
 800d51e:	0020      	movs	r0, r4
 800d520:	f7ff fc66 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800d524:	2280      	movs	r2, #128	; 0x80
 800d526:	8833      	ldrh	r3, [r6, #0]
 800d528:	0029      	movs	r1, r5
 800d52a:	4393      	bics	r3, r2
 800d52c:	464a      	mov	r2, r9
 800d52e:	806b      	strh	r3, [r5, #2]
 800d530:	802a      	strh	r2, [r5, #0]
 800d532:	4643      	mov	r3, r8
 800d534:	003a      	movs	r2, r7
 800d536:	0020      	movs	r0, r4
 800d538:	f7f8 ff30 	bl	800639c <acc_rss_integration_sensor_device_transfer>
 800d53c:	2201      	movs	r2, #1
 800d53e:	2105      	movs	r1, #5
 800d540:	0020      	movs	r0, r4
 800d542:	f7fd fde3 	bl	800b10c <acc_sensor_reg_write>
 800d546:	0020      	movs	r0, r4
 800d548:	2203      	movs	r2, #3
 800d54a:	217a      	movs	r1, #122	; 0x7a
 800d54c:	f7fd fdde 	bl	800b10c <acc_sensor_reg_write>
 800d550:	2001      	movs	r0, #1
 800d552:	e7c7      	b.n	800d4e4 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x7c>
 800d554:	20000280 	.word	0x20000280
 800d558:	0801e5cf 	.word	0x0801e5cf
 800d55c:	0801ccd2 	.word	0x0801ccd2
 800d560:	0801e5fb 	.word	0x0801e5fb

0800d564 <acc_cpd_linear_sweep_get_info>:
 800d564:	30ad      	adds	r0, #173	; 0xad
 800d566:	7803      	ldrb	r3, [r0, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00a      	beq.n	800d582 <acc_cpd_linear_sweep_get_info+0x1e>
 800d56c:	2200      	movs	r2, #0
 800d56e:	2303      	movs	r3, #3
 800d570:	604a      	str	r2, [r1, #4]
 800d572:	608a      	str	r2, [r1, #8]
 800d574:	3201      	adds	r2, #1
 800d576:	60ca      	str	r2, [r1, #12]
 800d578:	3201      	adds	r2, #1
 800d57a:	600b      	str	r3, [r1, #0]
 800d57c:	610a      	str	r2, [r1, #16]
 800d57e:	614b      	str	r3, [r1, #20]
 800d580:	4770      	bx	lr
 800d582:	600b      	str	r3, [r1, #0]
 800d584:	604b      	str	r3, [r1, #4]
 800d586:	608b      	str	r3, [r1, #8]
 800d588:	60cb      	str	r3, [r1, #12]
 800d58a:	610b      	str	r3, [r1, #16]
 800d58c:	614b      	str	r3, [r1, #20]
 800d58e:	e7f7      	b.n	800d580 <acc_cpd_linear_sweep_get_info+0x1c>

0800d590 <acc_cpd_linear_sweep_update_program>:
 800d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d592:	784b      	ldrb	r3, [r1, #1]
 800d594:	0005      	movs	r5, r0
 800d596:	000c      	movs	r4, r1
 800d598:	684f      	ldr	r7, [r1, #4]
 800d59a:	68ce      	ldr	r6, [r1, #12]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <acc_cpd_linear_sweep_update_program+0x20>
 800d5a0:	688b      	ldr	r3, [r1, #8]
 800d5a2:	4a0e      	ldr	r2, [pc, #56]	; (800d5dc <acc_cpd_linear_sweep_update_program+0x4c>)
 800d5a4:	330e      	adds	r3, #14
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	490d      	ldr	r1, [pc, #52]	; (800d5e0 <acc_cpd_linear_sweep_update_program+0x50>)
 800d5aa:	235e      	movs	r3, #94	; 0x5e
 800d5ac:	f7fd fdbc 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800d5b0:	7823      	ldrb	r3, [r4, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d006      	beq.n	800d5c4 <acc_cpd_linear_sweep_update_program+0x34>
 800d5b6:	9700      	str	r7, [sp, #0]
 800d5b8:	2336      	movs	r3, #54	; 0x36
 800d5ba:	4a08      	ldr	r2, [pc, #32]	; (800d5dc <acc_cpd_linear_sweep_update_program+0x4c>)
 800d5bc:	4908      	ldr	r1, [pc, #32]	; (800d5e0 <acc_cpd_linear_sweep_update_program+0x50>)
 800d5be:	0028      	movs	r0, r5
 800d5c0:	f7fd fdb2 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800d5c4:	78a3      	ldrb	r3, [r4, #2]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d006      	beq.n	800d5d8 <acc_cpd_linear_sweep_update_program+0x48>
 800d5ca:	9600      	str	r6, [sp, #0]
 800d5cc:	2372      	movs	r3, #114	; 0x72
 800d5ce:	4a03      	ldr	r2, [pc, #12]	; (800d5dc <acc_cpd_linear_sweep_update_program+0x4c>)
 800d5d0:	4903      	ldr	r1, [pc, #12]	; (800d5e0 <acc_cpd_linear_sweep_update_program+0x50>)
 800d5d2:	0028      	movs	r0, r5
 800d5d4:	f7fd fda8 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800d5d8:	2001      	movs	r0, #1
 800d5da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5dc:	08019dd8 	.word	0x08019dd8
 800d5e0:	0801af84 	.word	0x0801af84

0800d5e4 <acc_probes_execute>:
 800d5e4:	230c      	movs	r3, #12
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	7804      	ldrb	r4, [r0, #0]
 800d5ea:	435c      	muls	r4, r3
 800d5ec:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <acc_probes_execute+0x18>)
 800d5ee:	191b      	adds	r3, r3, r4
 800d5f0:	685c      	ldr	r4, [r3, #4]
 800d5f2:	2c00      	cmp	r4, #0
 800d5f4:	d001      	beq.n	800d5fa <acc_probes_execute+0x16>
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	47a0      	blx	r4
 800d5fa:	bd10      	pop	{r4, pc}
 800d5fc:	08019b90 	.word	0x08019b90

0800d600 <acc_cpd_linear_sweep_load_program>:
 800d600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d602:	46de      	mov	lr, fp
 800d604:	4657      	mov	r7, sl
 800d606:	4645      	mov	r5, r8
 800d608:	464e      	mov	r6, r9
 800d60a:	b5e0      	push	{r5, r6, r7, lr}
 800d60c:	001f      	movs	r7, r3
 800d60e:	2316      	movs	r3, #22
 800d610:	b08f      	sub	sp, #60	; 0x3c
 800d612:	ac0b      	add	r4, sp, #44	; 0x2c
 800d614:	7023      	strb	r3, [r4, #0]
 800d616:	2307      	movs	r3, #7
 800d618:	9005      	str	r0, [sp, #20]
 800d61a:	9108      	str	r1, [sp, #32]
 800d61c:	0015      	movs	r5, r2
 800d61e:	900c      	str	r0, [sp, #48]	; 0x30
 800d620:	22bc      	movs	r2, #188	; 0xbc
 800d622:	0039      	movs	r1, r7
 800d624:	0020      	movs	r0, r4
 800d626:	930d      	str	r3, [sp, #52]	; 0x34
 800d628:	f7ff ffdc 	bl	800d5e4 <acc_probes_execute>
 800d62c:	2300      	movs	r3, #0
 800d62e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d630:	930a      	str	r3, [sp, #40]	; 0x28
 800d632:	ab0a      	add	r3, sp, #40	; 0x28
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	002a      	movs	r2, r5
 800d638:	0023      	movs	r3, r4
 800d63a:	9908      	ldr	r1, [sp, #32]
 800d63c:	9805      	ldr	r0, [sp, #20]
 800d63e:	f7ff ff13 	bl	800d468 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800d642:	9009      	str	r0, [sp, #36]	; 0x24
 800d644:	2800      	cmp	r0, #0
 800d646:	d101      	bne.n	800d64c <acc_cpd_linear_sweep_load_program+0x4c>
 800d648:	f000 fc50 	bl	800deec <acc_cpd_linear_sweep_load_program+0x8ec>
 800d64c:	4bf9      	ldr	r3, [pc, #996]	; (800da34 <acc_cpd_linear_sweep_load_program+0x434>)
 800d64e:	001a      	movs	r2, r3
 800d650:	3260      	adds	r2, #96	; 0x60
 800d652:	7812      	ldrb	r2, [r2, #0]
 800d654:	2a03      	cmp	r2, #3
 800d656:	d904      	bls.n	800d662 <acc_cpd_linear_sweep_load_program+0x62>
 800d658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d65a:	4af7      	ldr	r2, [pc, #988]	; (800da38 <acc_cpd_linear_sweep_load_program+0x438>)
 800d65c:	49f7      	ldr	r1, [pc, #988]	; (800da3c <acc_cpd_linear_sweep_load_program+0x43c>)
 800d65e:	2004      	movs	r0, #4
 800d660:	4798      	blx	r3
 800d662:	2300      	movs	r3, #0
 800d664:	469b      	mov	fp, r3
 800d666:	23e2      	movs	r3, #226	; 0xe2
 800d668:	465a      	mov	r2, fp
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	1a9b      	subs	r3, r3, r2
 800d66e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d672:	9203      	str	r2, [sp, #12]
 800d674:	429a      	cmp	r2, r3
 800d676:	d900      	bls.n	800d67a <acc_cpd_linear_sweep_load_program+0x7a>
 800d678:	9303      	str	r3, [sp, #12]
 800d67a:	465b      	mov	r3, fp
 800d67c:	085b      	lsrs	r3, r3, #1
 800d67e:	9306      	str	r3, [sp, #24]
 800d680:	9b03      	ldr	r3, [sp, #12]
 800d682:	0021      	movs	r1, r4
 800d684:	085a      	lsrs	r2, r3, #1
 800d686:	9b06      	ldr	r3, [sp, #24]
 800d688:	0098      	lsls	r0, r3, #2
 800d68a:	4bed      	ldr	r3, [pc, #948]	; (800da40 <acc_cpd_linear_sweep_load_program+0x440>)
 800d68c:	18c0      	adds	r0, r0, r3
 800d68e:	f7ff f9e1 	bl	800ca54 <acc_confprogram_copy>
 800d692:	465b      	mov	r3, fp
 800d694:	b29d      	uxth	r5, r3
 800d696:	466b      	mov	r3, sp
 800d698:	899e      	ldrh	r6, [r3, #12]
 800d69a:	4bea      	ldr	r3, [pc, #936]	; (800da44 <acc_cpd_linear_sweep_load_program+0x444>)
 800d69c:	0032      	movs	r2, r6
 800d69e:	4698      	mov	r8, r3
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	0029      	movs	r1, r5
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	2350      	movs	r3, #80	; 0x50
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	4643      	mov	r3, r8
 800d6ae:	f7ff fa19 	bl	800cae4 <acc_confprogram_patch_offset>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	0032      	movs	r2, r6
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	234e      	movs	r3, #78	; 0x4e
 800d6ba:	0029      	movs	r1, r5
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	0020      	movs	r0, r4
 800d6c0:	4643      	mov	r3, r8
 800d6c2:	f7ff fa0f 	bl	800cae4 <acc_confprogram_patch_offset>
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	0032      	movs	r2, r6
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	234f      	movs	r3, #79	; 0x4f
 800d6ce:	0029      	movs	r1, r5
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	0020      	movs	r0, r4
 800d6d4:	4643      	mov	r3, r8
 800d6d6:	f7ff fa05 	bl	800cae4 <acc_confprogram_patch_offset>
 800d6da:	89bb      	ldrh	r3, [r7, #12]
 800d6dc:	0032      	movs	r2, r6
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	234c      	movs	r3, #76	; 0x4c
 800d6e2:	0029      	movs	r1, r5
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	0020      	movs	r0, r4
 800d6e8:	4643      	mov	r3, r8
 800d6ea:	f7ff f9fb 	bl	800cae4 <acc_confprogram_patch_offset>
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	0032      	movs	r2, r6
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	2326      	movs	r3, #38	; 0x26
 800d6f6:	0029      	movs	r1, r5
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	0020      	movs	r0, r4
 800d6fc:	4643      	mov	r3, r8
 800d6fe:	f7ff f9f1 	bl	800cae4 <acc_confprogram_patch_offset>
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	0032      	movs	r2, r6
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	2373      	movs	r3, #115	; 0x73
 800d70a:	0029      	movs	r1, r5
 800d70c:	9300      	str	r3, [sp, #0]
 800d70e:	0020      	movs	r0, r4
 800d710:	4643      	mov	r3, r8
 800d712:	f7ff f9e7 	bl	800cae4 <acc_confprogram_patch_offset>
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	0032      	movs	r2, r6
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	2362      	movs	r3, #98	; 0x62
 800d71e:	0029      	movs	r1, r5
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	0020      	movs	r0, r4
 800d724:	4643      	mov	r3, r8
 800d726:	f7ff f9dd 	bl	800cae4 <acc_confprogram_patch_offset>
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	0032      	movs	r2, r6
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	2337      	movs	r3, #55	; 0x37
 800d732:	0029      	movs	r1, r5
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	0020      	movs	r0, r4
 800d738:	4643      	mov	r3, r8
 800d73a:	f7ff f9d3 	bl	800cae4 <acc_confprogram_patch_offset>
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	0032      	movs	r2, r6
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	2376      	movs	r3, #118	; 0x76
 800d746:	0029      	movs	r1, r5
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	0020      	movs	r0, r4
 800d74c:	4643      	mov	r3, r8
 800d74e:	f7ff f9c9 	bl	800cae4 <acc_confprogram_patch_offset>
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	0032      	movs	r2, r6
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	2369      	movs	r3, #105	; 0x69
 800d75a:	0029      	movs	r1, r5
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	0020      	movs	r0, r4
 800d760:	4643      	mov	r3, r8
 800d762:	f7ff f9bf 	bl	800cae4 <acc_confprogram_patch_offset>
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	0032      	movs	r2, r6
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	236a      	movs	r3, #106	; 0x6a
 800d76e:	0029      	movs	r1, r5
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	0020      	movs	r0, r4
 800d774:	4643      	mov	r3, r8
 800d776:	f7ff f9b5 	bl	800cae4 <acc_confprogram_patch_offset>
 800d77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77c:	0032      	movs	r2, r6
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	2319      	movs	r3, #25
 800d782:	0029      	movs	r1, r5
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	0020      	movs	r0, r4
 800d788:	4643      	mov	r3, r8
 800d78a:	f7ff f9ab 	bl	800cae4 <acc_confprogram_patch_offset>
 800d78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d790:	0032      	movs	r2, r6
 800d792:	9301      	str	r3, [sp, #4]
 800d794:	231a      	movs	r3, #26
 800d796:	0029      	movs	r1, r5
 800d798:	9300      	str	r3, [sp, #0]
 800d79a:	0020      	movs	r0, r4
 800d79c:	4643      	mov	r3, r8
 800d79e:	f7ff f9a1 	bl	800cae4 <acc_confprogram_patch_offset>
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	0032      	movs	r2, r6
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	231b      	movs	r3, #27
 800d7aa:	0029      	movs	r1, r5
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	0020      	movs	r0, r4
 800d7b0:	4643      	mov	r3, r8
 800d7b2:	f7ff f997 	bl	800cae4 <acc_confprogram_patch_offset>
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b8:	0032      	movs	r2, r6
 800d7ba:	9301      	str	r3, [sp, #4]
 800d7bc:	231c      	movs	r3, #28
 800d7be:	0029      	movs	r1, r5
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	0020      	movs	r0, r4
 800d7c4:	4643      	mov	r3, r8
 800d7c6:	f7ff f98d 	bl	800cae4 <acc_confprogram_patch_offset>
 800d7ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7cc:	0032      	movs	r2, r6
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	231d      	movs	r3, #29
 800d7d2:	0029      	movs	r1, r5
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	0020      	movs	r0, r4
 800d7d8:	4643      	mov	r3, r8
 800d7da:	f7ff f983 	bl	800cae4 <acc_confprogram_patch_offset>
 800d7de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e0:	0032      	movs	r2, r6
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	231e      	movs	r3, #30
 800d7e6:	0029      	movs	r1, r5
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	0020      	movs	r0, r4
 800d7ec:	4643      	mov	r3, r8
 800d7ee:	f7ff f979 	bl	800cae4 <acc_confprogram_patch_offset>
 800d7f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7f4:	0032      	movs	r2, r6
 800d7f6:	9301      	str	r3, [sp, #4]
 800d7f8:	2355      	movs	r3, #85	; 0x55
 800d7fa:	0029      	movs	r1, r5
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	0020      	movs	r0, r4
 800d800:	4643      	mov	r3, r8
 800d802:	f7ff f96f 	bl	800cae4 <acc_confprogram_patch_offset>
 800d806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d808:	0032      	movs	r2, r6
 800d80a:	9301      	str	r3, [sp, #4]
 800d80c:	2356      	movs	r3, #86	; 0x56
 800d80e:	0029      	movs	r1, r5
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	0020      	movs	r0, r4
 800d814:	4643      	mov	r3, r8
 800d816:	f7ff f965 	bl	800cae4 <acc_confprogram_patch_offset>
 800d81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d81c:	0032      	movs	r2, r6
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	2358      	movs	r3, #88	; 0x58
 800d822:	0029      	movs	r1, r5
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	0020      	movs	r0, r4
 800d828:	4643      	mov	r3, r8
 800d82a:	f7ff f95b 	bl	800cae4 <acc_confprogram_patch_offset>
 800d82e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d830:	0032      	movs	r2, r6
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	236b      	movs	r3, #107	; 0x6b
 800d836:	0029      	movs	r1, r5
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	0020      	movs	r0, r4
 800d83c:	4643      	mov	r3, r8
 800d83e:	f7ff f951 	bl	800cae4 <acc_confprogram_patch_offset>
 800d842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d844:	0032      	movs	r2, r6
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	2386      	movs	r3, #134	; 0x86
 800d84a:	0029      	movs	r1, r5
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	0020      	movs	r0, r4
 800d850:	4643      	mov	r3, r8
 800d852:	f7ff f947 	bl	800cae4 <acc_confprogram_patch_offset>
 800d856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d858:	0032      	movs	r2, r6
 800d85a:	9301      	str	r3, [sp, #4]
 800d85c:	2364      	movs	r3, #100	; 0x64
 800d85e:	0029      	movs	r1, r5
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	0020      	movs	r0, r4
 800d864:	4643      	mov	r3, r8
 800d866:	f7ff f93d 	bl	800cae4 <acc_confprogram_patch_offset>
 800d86a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d86c:	0032      	movs	r2, r6
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	2365      	movs	r3, #101	; 0x65
 800d872:	0029      	movs	r1, r5
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	0020      	movs	r0, r4
 800d878:	4643      	mov	r3, r8
 800d87a:	f7ff f933 	bl	800cae4 <acc_confprogram_patch_offset>
 800d87e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d880:	0032      	movs	r2, r6
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	2340      	movs	r3, #64	; 0x40
 800d886:	0029      	movs	r1, r5
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	0020      	movs	r0, r4
 800d88c:	4643      	mov	r3, r8
 800d88e:	f7ff f929 	bl	800cae4 <acc_confprogram_patch_offset>
 800d892:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d894:	0032      	movs	r2, r6
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	2341      	movs	r3, #65	; 0x41
 800d89a:	0029      	movs	r1, r5
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	0020      	movs	r0, r4
 800d8a0:	4643      	mov	r3, r8
 800d8a2:	f7ff f91f 	bl	800cae4 <acc_confprogram_patch_offset>
 800d8a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8a8:	0032      	movs	r2, r6
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	2372      	movs	r3, #114	; 0x72
 800d8ae:	0029      	movs	r1, r5
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	0020      	movs	r0, r4
 800d8b4:	4643      	mov	r3, r8
 800d8b6:	f7ff f915 	bl	800cae4 <acc_confprogram_patch_offset>
 800d8ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8bc:	0032      	movs	r2, r6
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	2354      	movs	r3, #84	; 0x54
 800d8c2:	0029      	movs	r1, r5
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	0020      	movs	r0, r4
 800d8c8:	4643      	mov	r3, r8
 800d8ca:	f7ff f90b 	bl	800cae4 <acc_confprogram_patch_offset>
 800d8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8d0:	0032      	movs	r2, r6
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	2339      	movs	r3, #57	; 0x39
 800d8d6:	0029      	movs	r1, r5
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	0020      	movs	r0, r4
 800d8dc:	4643      	mov	r3, r8
 800d8de:	f7ff f901 	bl	800cae4 <acc_confprogram_patch_offset>
 800d8e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d06f      	beq.n	800d9c8 <acc_cpd_linear_sweep_load_program+0x3c8>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	330f      	adds	r3, #15
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	0032      	movs	r2, r6
 800d8f2:	4643      	mov	r3, r8
 800d8f4:	0029      	movs	r1, r5
 800d8f6:	0020      	movs	r0, r4
 800d8f8:	f7ff f8f4 	bl	800cae4 <acc_confprogram_patch_offset>
 800d8fc:	4b52      	ldr	r3, [pc, #328]	; (800da48 <acc_cpd_linear_sweep_load_program+0x448>)
 800d8fe:	0032      	movs	r2, r6
 800d900:	469a      	mov	sl, r3
 800d902:	9301      	str	r3, [sp, #4]
 800d904:	2312      	movs	r3, #18
 800d906:	0029      	movs	r1, r5
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	0020      	movs	r0, r4
 800d90c:	4643      	mov	r3, r8
 800d90e:	f7ff f8e9 	bl	800cae4 <acc_confprogram_patch_offset>
 800d912:	2307      	movs	r3, #7
 800d914:	4699      	mov	r9, r3
 800d916:	9301      	str	r3, [sp, #4]
 800d918:	330d      	adds	r3, #13
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	0032      	movs	r2, r6
 800d91e:	4643      	mov	r3, r8
 800d920:	0029      	movs	r1, r5
 800d922:	0020      	movs	r0, r4
 800d924:	f7ff f8de 	bl	800cae4 <acc_confprogram_patch_offset>
 800d928:	4653      	mov	r3, sl
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	2311      	movs	r3, #17
 800d92e:	0032      	movs	r2, r6
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	0029      	movs	r1, r5
 800d934:	4643      	mov	r3, r8
 800d936:	0020      	movs	r0, r4
 800d938:	f7ff f8d4 	bl	800cae4 <acc_confprogram_patch_offset>
 800d93c:	2300      	movs	r3, #0
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	3313      	adds	r3, #19
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	0032      	movs	r2, r6
 800d946:	4643      	mov	r3, r8
 800d948:	0029      	movs	r1, r5
 800d94a:	0020      	movs	r0, r4
 800d94c:	f7ff f8ca 	bl	800cae4 <acc_confprogram_patch_offset>
 800d950:	4b3e      	ldr	r3, [pc, #248]	; (800da4c <acc_cpd_linear_sweep_load_program+0x44c>)
 800d952:	0032      	movs	r2, r6
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	2315      	movs	r3, #21
 800d958:	0029      	movs	r1, r5
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	0020      	movs	r0, r4
 800d95e:	4643      	mov	r3, r8
 800d960:	f7ff f8c0 	bl	800cae4 <acc_confprogram_patch_offset>
 800d964:	464b      	mov	r3, r9
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	330f      	adds	r3, #15
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	0032      	movs	r2, r6
 800d96e:	4643      	mov	r3, r8
 800d970:	0029      	movs	r1, r5
 800d972:	0020      	movs	r0, r4
 800d974:	f7ff f8b6 	bl	800cae4 <acc_confprogram_patch_offset>
 800d978:	4b35      	ldr	r3, [pc, #212]	; (800da50 <acc_cpd_linear_sweep_load_program+0x450>)
 800d97a:	0032      	movs	r2, r6
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	230e      	movs	r3, #14
 800d980:	0029      	movs	r1, r5
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	0020      	movs	r0, r4
 800d986:	4643      	mov	r3, r8
 800d988:	f7ff f8ac 	bl	800cae4 <acc_confprogram_patch_offset>
 800d98c:	464b      	mov	r3, r9
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	3308      	adds	r3, #8
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	0032      	movs	r2, r6
 800d996:	4643      	mov	r3, r8
 800d998:	0029      	movs	r1, r5
 800d99a:	0020      	movs	r0, r4
 800d99c:	f7ff f8a2 	bl	800cae4 <acc_confprogram_patch_offset>
 800d9a0:	4b2c      	ldr	r3, [pc, #176]	; (800da54 <acc_cpd_linear_sweep_load_program+0x454>)
 800d9a2:	0032      	movs	r2, r6
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	2317      	movs	r3, #23
 800d9a8:	0029      	movs	r1, r5
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	0020      	movs	r0, r4
 800d9ae:	4643      	mov	r3, r8
 800d9b0:	f7ff f898 	bl	800cae4 <acc_confprogram_patch_offset>
 800d9b4:	464b      	mov	r3, r9
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	3311      	adds	r3, #17
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	0032      	movs	r2, r6
 800d9be:	4643      	mov	r3, r8
 800d9c0:	0029      	movs	r1, r5
 800d9c2:	0020      	movs	r0, r4
 800d9c4:	f7ff f88e 	bl	800cae4 <acc_confprogram_patch_offset>
 800d9c8:	4b1e      	ldr	r3, [pc, #120]	; (800da44 <acc_cpd_linear_sweep_load_program+0x444>)
 800d9ca:	0032      	movs	r2, r6
 800d9cc:	4698      	mov	r8, r3
 800d9ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9d0:	0029      	movs	r1, r5
 800d9d2:	9301      	str	r3, [sp, #4]
 800d9d4:	2351      	movs	r3, #81	; 0x51
 800d9d6:	0020      	movs	r0, r4
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	4643      	mov	r3, r8
 800d9dc:	f7ff f882 	bl	800cae4 <acc_confprogram_patch_offset>
 800d9e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9e2:	0032      	movs	r2, r6
 800d9e4:	9301      	str	r3, [sp, #4]
 800d9e6:	2377      	movs	r3, #119	; 0x77
 800d9e8:	0029      	movs	r1, r5
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	0020      	movs	r0, r4
 800d9ee:	4643      	mov	r3, r8
 800d9f0:	f7ff f878 	bl	800cae4 <acc_confprogram_patch_offset>
 800d9f4:	1d3b      	adds	r3, r7, #4
 800d9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d9f8:	0032      	movs	r2, r6
 800d9fa:	9301      	str	r3, [sp, #4]
 800d9fc:	2344      	movs	r3, #68	; 0x44
 800d9fe:	0029      	movs	r1, r5
 800da00:	9300      	str	r3, [sp, #0]
 800da02:	0020      	movs	r0, r4
 800da04:	4643      	mov	r3, r8
 800da06:	f7ff f86d 	bl	800cae4 <acc_confprogram_patch_offset>
 800da0a:	003b      	movs	r3, r7
 800da0c:	3308      	adds	r3, #8
 800da0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da10:	0032      	movs	r2, r6
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	2343      	movs	r3, #67	; 0x43
 800da16:	0029      	movs	r1, r5
 800da18:	9300      	str	r3, [sp, #0]
 800da1a:	0020      	movs	r0, r4
 800da1c:	4643      	mov	r3, r8
 800da1e:	f7ff f861 	bl	800cae4 <acc_confprogram_patch_offset>
 800da22:	003b      	movs	r3, r7
 800da24:	3388      	adds	r3, #136	; 0x88
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	b29a      	uxth	r2, r3
 800da2a:	4691      	mov	r9, r2
 800da2c:	2200      	movs	r2, #0
 800da2e:	4692      	mov	sl, r2
 800da30:	464a      	mov	r2, r9
 800da32:	e011      	b.n	800da58 <acc_cpd_linear_sweep_load_program+0x458>
 800da34:	20000280 	.word	0x20000280
 800da38:	0801e62a 	.word	0x0801e62a
 800da3c:	0801ce5b 	.word	0x0801ce5b
 800da40:	0801af84 	.word	0x0801af84
 800da44:	08019dd8 	.word	0x08019dd8
 800da48:	0000ff80 	.word	0x0000ff80
 800da4c:	0000ffc0 	.word	0x0000ffc0
 800da50:	0000fff0 	.word	0x0000fff0
 800da54:	0000ffff 	.word	0x0000ffff
 800da58:	2a08      	cmp	r2, #8
 800da5a:	d914      	bls.n	800da86 <acc_cpd_linear_sweep_load_program+0x486>
 800da5c:	464b      	mov	r3, r9
 800da5e:	22ff      	movs	r2, #255	; 0xff
 800da60:	3b08      	subs	r3, #8
 800da62:	409a      	lsls	r2, r3
 800da64:	0013      	movs	r3, r2
 800da66:	22ff      	movs	r2, #255	; 0xff
 800da68:	4393      	bics	r3, r2
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	469a      	mov	sl, r3
 800da6e:	2302      	movs	r3, #2
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	3365      	adds	r3, #101	; 0x65
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	0032      	movs	r2, r6
 800da78:	4643      	mov	r3, r8
 800da7a:	0029      	movs	r1, r5
 800da7c:	0020      	movs	r0, r4
 800da7e:	f7ff f831 	bl	800cae4 <acc_confprogram_patch_offset>
 800da82:	2308      	movs	r3, #8
 800da84:	4699      	mov	r9, r3
 800da86:	4bf2      	ldr	r3, [pc, #968]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800da88:	0032      	movs	r2, r6
 800da8a:	4698      	mov	r8, r3
 800da8c:	464b      	mov	r3, r9
 800da8e:	9301      	str	r3, [sp, #4]
 800da90:	236c      	movs	r3, #108	; 0x6c
 800da92:	0029      	movs	r1, r5
 800da94:	9300      	str	r3, [sp, #0]
 800da96:	0020      	movs	r0, r4
 800da98:	4643      	mov	r3, r8
 800da9a:	f7ff f823 	bl	800cae4 <acc_confprogram_patch_offset>
 800da9e:	464b      	mov	r3, r9
 800daa0:	9301      	str	r3, [sp, #4]
 800daa2:	2359      	movs	r3, #89	; 0x59
 800daa4:	0032      	movs	r2, r6
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	0029      	movs	r1, r5
 800daaa:	4643      	mov	r3, r8
 800daac:	0020      	movs	r0, r4
 800daae:	f7ff f819 	bl	800cae4 <acc_confprogram_patch_offset>
 800dab2:	2380      	movs	r3, #128	; 0x80
 800dab4:	4652      	mov	r2, sl
 800dab6:	431a      	orrs	r2, r3
 800dab8:	236e      	movs	r3, #110	; 0x6e
 800daba:	9207      	str	r2, [sp, #28]
 800dabc:	9201      	str	r2, [sp, #4]
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	0032      	movs	r2, r6
 800dac2:	4643      	mov	r3, r8
 800dac4:	0029      	movs	r1, r5
 800dac6:	0020      	movs	r0, r4
 800dac8:	f7ff f80c 	bl	800cae4 <acc_confprogram_patch_offset>
 800dacc:	23c0      	movs	r3, #192	; 0xc0
 800dace:	4652      	mov	r2, sl
 800dad0:	431a      	orrs	r2, r3
 800dad2:	2370      	movs	r3, #112	; 0x70
 800dad4:	4691      	mov	r9, r2
 800dad6:	9201      	str	r2, [sp, #4]
 800dad8:	9300      	str	r3, [sp, #0]
 800dada:	0032      	movs	r2, r6
 800dadc:	4643      	mov	r3, r8
 800dade:	0029      	movs	r1, r5
 800dae0:	0020      	movs	r0, r4
 800dae2:	f7fe ffff 	bl	800cae4 <acc_confprogram_patch_offset>
 800dae6:	4652      	mov	r2, sl
 800dae8:	23ff      	movs	r3, #255	; 0xff
 800daea:	4313      	orrs	r3, r2
 800daec:	9304      	str	r3, [sp, #16]
 800daee:	9301      	str	r3, [sp, #4]
 800daf0:	236f      	movs	r3, #111	; 0x6f
 800daf2:	0032      	movs	r2, r6
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	0029      	movs	r1, r5
 800daf8:	4643      	mov	r3, r8
 800dafa:	0020      	movs	r0, r4
 800dafc:	f7fe fff2 	bl	800cae4 <acc_confprogram_patch_offset>
 800db00:	9b07      	ldr	r3, [sp, #28]
 800db02:	0032      	movs	r2, r6
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	235b      	movs	r3, #91	; 0x5b
 800db08:	0029      	movs	r1, r5
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	0020      	movs	r0, r4
 800db0e:	4643      	mov	r3, r8
 800db10:	f7fe ffe8 	bl	800cae4 <acc_confprogram_patch_offset>
 800db14:	464b      	mov	r3, r9
 800db16:	9301      	str	r3, [sp, #4]
 800db18:	235d      	movs	r3, #93	; 0x5d
 800db1a:	0032      	movs	r2, r6
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	0029      	movs	r1, r5
 800db20:	4643      	mov	r3, r8
 800db22:	0020      	movs	r0, r4
 800db24:	f7fe ffde 	bl	800cae4 <acc_confprogram_patch_offset>
 800db28:	9b04      	ldr	r3, [sp, #16]
 800db2a:	0032      	movs	r2, r6
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	235c      	movs	r3, #92	; 0x5c
 800db30:	0029      	movs	r1, r5
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	0020      	movs	r0, r4
 800db36:	4643      	mov	r3, r8
 800db38:	f7fe ffd4 	bl	800cae4 <acc_confprogram_patch_offset>
 800db3c:	23f0      	movs	r3, #240	; 0xf0
 800db3e:	4652      	mov	r2, sl
 800db40:	431a      	orrs	r2, r3
 800db42:	234a      	movs	r3, #74	; 0x4a
 800db44:	4691      	mov	r9, r2
 800db46:	9201      	str	r2, [sp, #4]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	0032      	movs	r2, r6
 800db4c:	4643      	mov	r3, r8
 800db4e:	0029      	movs	r1, r5
 800db50:	0020      	movs	r0, r4
 800db52:	f7fe ffc7 	bl	800cae4 <acc_confprogram_patch_offset>
 800db56:	464b      	mov	r3, r9
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	2345      	movs	r3, #69	; 0x45
 800db5c:	0032      	movs	r2, r6
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	0029      	movs	r1, r5
 800db62:	4643      	mov	r3, r8
 800db64:	0020      	movs	r0, r4
 800db66:	f7fe ffbd 	bl	800cae4 <acc_confprogram_patch_offset>
 800db6a:	9b04      	ldr	r3, [sp, #16]
 800db6c:	0032      	movs	r2, r6
 800db6e:	9301      	str	r3, [sp, #4]
 800db70:	2322      	movs	r3, #34	; 0x22
 800db72:	0029      	movs	r1, r5
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	0020      	movs	r0, r4
 800db78:	4643      	mov	r3, r8
 800db7a:	f7fe ffb3 	bl	800cae4 <acc_confprogram_patch_offset>
 800db7e:	003b      	movs	r3, r7
 800db80:	3390      	adds	r3, #144	; 0x90
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	2364      	movs	r3, #100	; 0x64
 800db86:	2a05      	cmp	r2, #5
 800db88:	d800      	bhi.n	800db8c <acc_cpd_linear_sweep_load_program+0x58c>
 800db8a:	3b20      	subs	r3, #32
 800db8c:	9301      	str	r3, [sp, #4]
 800db8e:	2305      	movs	r3, #5
 800db90:	0032      	movs	r2, r6
 800db92:	4699      	mov	r9, r3
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	0029      	movs	r1, r5
 800db98:	4643      	mov	r3, r8
 800db9a:	0020      	movs	r0, r4
 800db9c:	f7fe ffa2 	bl	800cae4 <acc_confprogram_patch_offset>
 800dba0:	2390      	movs	r3, #144	; 0x90
 800dba2:	469a      	mov	sl, r3
 800dba4:	44ba      	add	sl, r7
 800dba6:	4653      	mov	r3, sl
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	0032      	movs	r2, r6
 800dbac:	015b      	lsls	r3, r3, #5
 800dbae:	3b03      	subs	r3, #3
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	2324      	movs	r3, #36	; 0x24
 800dbb4:	0029      	movs	r1, r5
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	0020      	movs	r0, r4
 800dbba:	4643      	mov	r3, r8
 800dbbc:	f7fe ff92 	bl	800cae4 <acc_confprogram_patch_offset>
 800dbc0:	4653      	mov	r3, sl
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	0032      	movs	r2, r6
 800dbc6:	015b      	lsls	r3, r3, #5
 800dbc8:	085b      	lsrs	r3, r3, #1
 800dbca:	3b03      	subs	r3, #3
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	2325      	movs	r3, #37	; 0x25
 800dbd0:	0029      	movs	r1, r5
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	0020      	movs	r0, r4
 800dbd6:	4643      	mov	r3, r8
 800dbd8:	f7fe ff84 	bl	800cae4 <acc_confprogram_patch_offset>
 800dbdc:	003b      	movs	r3, r7
 800dbde:	3394      	adds	r3, #148	; 0x94
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	0032      	movs	r2, r6
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	2336      	movs	r3, #54	; 0x36
 800dbe8:	0029      	movs	r1, r5
 800dbea:	9300      	str	r3, [sp, #0]
 800dbec:	0020      	movs	r0, r4
 800dbee:	4643      	mov	r3, r8
 800dbf0:	f7fe ff78 	bl	800cae4 <acc_confprogram_patch_offset>
 800dbf4:	003b      	movs	r3, r7
 800dbf6:	3398      	adds	r3, #152	; 0x98
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	0032      	movs	r2, r6
 800dbfc:	330e      	adds	r3, #14
 800dbfe:	9301      	str	r3, [sp, #4]
 800dc00:	235e      	movs	r3, #94	; 0x5e
 800dc02:	0029      	movs	r1, r5
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	0020      	movs	r0, r4
 800dc08:	4643      	mov	r3, r8
 800dc0a:	f7fe ff6b 	bl	800cae4 <acc_confprogram_patch_offset>
 800dc0e:	4653      	mov	r3, sl
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	469a      	mov	sl, r3
 800dc14:	4599      	cmp	r9, r3
 800dc16:	4180      	sbcs	r0, r0
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4398      	bics	r0, r3
 800dc1c:	4b8d      	ldr	r3, [pc, #564]	; (800de54 <acc_cpd_linear_sweep_load_program+0x854>)
 800dc1e:	4651      	mov	r1, sl
 800dc20:	469c      	mov	ip, r3
 800dc22:	4460      	add	r0, ip
 800dc24:	f001 fa6a 	bl	800f0fc <__aeabi_uidivmod>
 800dc28:	4688      	mov	r8, r1
 800dc2a:	2900      	cmp	r1, #0
 800dc2c:	d002      	beq.n	800dc34 <acc_cpd_linear_sweep_load_program+0x634>
 800dc2e:	4653      	mov	r3, sl
 800dc30:	1a5b      	subs	r3, r3, r1
 800dc32:	4698      	mov	r8, r3
 800dc34:	239c      	movs	r3, #156	; 0x9c
 800dc36:	469a      	mov	sl, r3
 800dc38:	44ba      	add	sl, r7
 800dc3a:	4653      	mov	r3, sl
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	0032      	movs	r2, r6
 800dc40:	4443      	add	r3, r8
 800dc42:	9301      	str	r3, [sp, #4]
 800dc44:	4699      	mov	r9, r3
 800dc46:	231f      	movs	r3, #31
 800dc48:	0029      	movs	r1, r5
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	0020      	movs	r0, r4
 800dc4e:	4b80      	ldr	r3, [pc, #512]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800dc50:	f7fe ff48 	bl	800cae4 <acc_confprogram_patch_offset>
 800dc54:	4653      	mov	r3, sl
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d019      	beq.n	800dc90 <acc_cpd_linear_sweep_load_program+0x690>
 800dc5c:	4b7e      	ldr	r3, [pc, #504]	; (800de58 <acc_cpd_linear_sweep_load_program+0x858>)
 800dc5e:	001a      	movs	r2, r3
 800dc60:	3260      	adds	r2, #96	; 0x60
 800dc62:	7812      	ldrb	r2, [r2, #0]
 800dc64:	2a01      	cmp	r2, #1
 800dc66:	d906      	bls.n	800dc76 <acc_cpd_linear_sweep_load_program+0x676>
 800dc68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc6a:	4a7c      	ldr	r2, [pc, #496]	; (800de5c <acc_cpd_linear_sweep_load_program+0x85c>)
 800dc6c:	469a      	mov	sl, r3
 800dc6e:	497c      	ldr	r1, [pc, #496]	; (800de60 <acc_cpd_linear_sweep_load_program+0x860>)
 800dc70:	4643      	mov	r3, r8
 800dc72:	2002      	movs	r0, #2
 800dc74:	47d0      	blx	sl
 800dc76:	4b78      	ldr	r3, [pc, #480]	; (800de58 <acc_cpd_linear_sweep_load_program+0x858>)
 800dc78:	001a      	movs	r2, r3
 800dc7a:	3260      	adds	r2, #96	; 0x60
 800dc7c:	7812      	ldrb	r2, [r2, #0]
 800dc7e:	2a01      	cmp	r2, #1
 800dc80:	d906      	bls.n	800dc90 <acc_cpd_linear_sweep_load_program+0x690>
 800dc82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc84:	4a77      	ldr	r2, [pc, #476]	; (800de64 <acc_cpd_linear_sweep_load_program+0x864>)
 800dc86:	4698      	mov	r8, r3
 800dc88:	4975      	ldr	r1, [pc, #468]	; (800de60 <acc_cpd_linear_sweep_load_program+0x860>)
 800dc8a:	464b      	mov	r3, r9
 800dc8c:	2002      	movs	r0, #2
 800dc8e:	47c0      	blx	r8
 800dc90:	003b      	movs	r3, r7
 800dc92:	3390      	adds	r3, #144	; 0x90
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2008      	movs	r0, #8
 800dc98:	4699      	mov	r9, r3
 800dc9a:	2b05      	cmp	r3, #5
 800dc9c:	d800      	bhi.n	800dca0 <acc_cpd_linear_sweep_load_program+0x6a0>
 800dc9e:	3002      	adds	r0, #2
 800dca0:	4649      	mov	r1, r9
 800dca2:	f001 fa2b 	bl	800f0fc <__aeabi_uidivmod>
 800dca6:	4688      	mov	r8, r1
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	d002      	beq.n	800dcb2 <acc_cpd_linear_sweep_load_program+0x6b2>
 800dcac:	464b      	mov	r3, r9
 800dcae:	1a5b      	subs	r3, r3, r1
 800dcb0:	4698      	mov	r8, r3
 800dcb2:	23a0      	movs	r3, #160	; 0xa0
 800dcb4:	469a      	mov	sl, r3
 800dcb6:	44ba      	add	sl, r7
 800dcb8:	4653      	mov	r3, sl
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	0032      	movs	r2, r6
 800dcbe:	4443      	add	r3, r8
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	4699      	mov	r9, r3
 800dcc4:	2366      	movs	r3, #102	; 0x66
 800dcc6:	0029      	movs	r1, r5
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	0020      	movs	r0, r4
 800dccc:	4b60      	ldr	r3, [pc, #384]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800dcce:	f7fe ff09 	bl	800cae4 <acc_confprogram_patch_offset>
 800dcd2:	4653      	mov	r3, sl
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d019      	beq.n	800dd0e <acc_cpd_linear_sweep_load_program+0x70e>
 800dcda:	4b5f      	ldr	r3, [pc, #380]	; (800de58 <acc_cpd_linear_sweep_load_program+0x858>)
 800dcdc:	001a      	movs	r2, r3
 800dcde:	3260      	adds	r2, #96	; 0x60
 800dce0:	7812      	ldrb	r2, [r2, #0]
 800dce2:	2a01      	cmp	r2, #1
 800dce4:	d906      	bls.n	800dcf4 <acc_cpd_linear_sweep_load_program+0x6f4>
 800dce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dce8:	4a5f      	ldr	r2, [pc, #380]	; (800de68 <acc_cpd_linear_sweep_load_program+0x868>)
 800dcea:	469a      	mov	sl, r3
 800dcec:	495c      	ldr	r1, [pc, #368]	; (800de60 <acc_cpd_linear_sweep_load_program+0x860>)
 800dcee:	4643      	mov	r3, r8
 800dcf0:	2002      	movs	r0, #2
 800dcf2:	47d0      	blx	sl
 800dcf4:	4b58      	ldr	r3, [pc, #352]	; (800de58 <acc_cpd_linear_sweep_load_program+0x858>)
 800dcf6:	001a      	movs	r2, r3
 800dcf8:	3260      	adds	r2, #96	; 0x60
 800dcfa:	7812      	ldrb	r2, [r2, #0]
 800dcfc:	2a01      	cmp	r2, #1
 800dcfe:	d906      	bls.n	800dd0e <acc_cpd_linear_sweep_load_program+0x70e>
 800dd00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd02:	4a5a      	ldr	r2, [pc, #360]	; (800de6c <acc_cpd_linear_sweep_load_program+0x86c>)
 800dd04:	4698      	mov	r8, r3
 800dd06:	4956      	ldr	r1, [pc, #344]	; (800de60 <acc_cpd_linear_sweep_load_program+0x860>)
 800dd08:	464b      	mov	r3, r9
 800dd0a:	2002      	movs	r0, #2
 800dd0c:	47c0      	blx	r8
 800dd0e:	003b      	movs	r3, r7
 800dd10:	338d      	adds	r3, #141	; 0x8d
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d014      	beq.n	800dd42 <acc_cpd_linear_sweep_load_program+0x742>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	9301      	str	r3, [sp, #4]
 800dd1c:	333b      	adds	r3, #59	; 0x3b
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	0032      	movs	r2, r6
 800dd22:	4b4b      	ldr	r3, [pc, #300]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800dd24:	0029      	movs	r1, r5
 800dd26:	0020      	movs	r0, r4
 800dd28:	f7fe fedc 	bl	800cae4 <acc_confprogram_patch_offset>
 800dd2c:	4b4a      	ldr	r3, [pc, #296]	; (800de58 <acc_cpd_linear_sweep_load_program+0x858>)
 800dd2e:	001a      	movs	r2, r3
 800dd30:	3260      	adds	r2, #96	; 0x60
 800dd32:	7812      	ldrb	r2, [r2, #0]
 800dd34:	2a01      	cmp	r2, #1
 800dd36:	d904      	bls.n	800dd42 <acc_cpd_linear_sweep_load_program+0x742>
 800dd38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd3a:	4a4d      	ldr	r2, [pc, #308]	; (800de70 <acc_cpd_linear_sweep_load_program+0x870>)
 800dd3c:	4948      	ldr	r1, [pc, #288]	; (800de60 <acc_cpd_linear_sweep_load_program+0x860>)
 800dd3e:	2002      	movs	r0, #2
 800dd40:	4798      	blx	r3
 800dd42:	003b      	movs	r3, r7
 800dd44:	33a4      	adds	r3, #164	; 0xa4
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	0032      	movs	r2, r6
 800dd4a:	4699      	mov	r9, r3
 800dd4c:	4b40      	ldr	r3, [pc, #256]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800dd4e:	0029      	movs	r1, r5
 800dd50:	4698      	mov	r8, r3
 800dd52:	464b      	mov	r3, r9
 800dd54:	3b01      	subs	r3, #1
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	2306      	movs	r3, #6
 800dd5a:	0020      	movs	r0, r4
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	4643      	mov	r3, r8
 800dd60:	f7fe fec0 	bl	800cae4 <acc_confprogram_patch_offset>
 800dd64:	4649      	mov	r1, r9
 800dd66:	2004      	movs	r0, #4
 800dd68:	f001 f942 	bl	800eff0 <__udivsi3>
 800dd6c:	2363      	movs	r3, #99	; 0x63
 800dd6e:	3801      	subs	r0, #1
 800dd70:	9001      	str	r0, [sp, #4]
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	0032      	movs	r2, r6
 800dd76:	4643      	mov	r3, r8
 800dd78:	0029      	movs	r1, r5
 800dd7a:	0020      	movs	r0, r4
 800dd7c:	f7fe feb2 	bl	800cae4 <acc_confprogram_patch_offset>
 800dd80:	003b      	movs	r3, r7
 800dd82:	33a8      	adds	r3, #168	; 0xa8
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	0032      	movs	r2, r6
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	2361      	movs	r3, #97	; 0x61
 800dd8c:	0029      	movs	r1, r5
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	0020      	movs	r0, r4
 800dd92:	4643      	mov	r3, r8
 800dd94:	f7fe fea6 	bl	800cae4 <acc_confprogram_patch_offset>
 800dd98:	23ad      	movs	r3, #173	; 0xad
 800dd9a:	4699      	mov	r9, r3
 800dd9c:	44b9      	add	r9, r7
 800dd9e:	464b      	mov	r3, r9
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	0032      	movs	r2, r6
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	2346      	movs	r3, #70	; 0x46
 800dda8:	0029      	movs	r1, r5
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	0020      	movs	r0, r4
 800ddae:	4643      	mov	r3, r8
 800ddb0:	f7fe fe98 	bl	800cae4 <acc_confprogram_patch_offset>
 800ddb4:	464b      	mov	r3, r9
 800ddb6:	781a      	ldrb	r2, [r3, #0]
 800ddb8:	2323      	movs	r3, #35	; 0x23
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	d100      	bne.n	800ddc0 <acc_cpd_linear_sweep_load_program+0x7c0>
 800ddbe:	e09d      	b.n	800defc <acc_cpd_linear_sweep_load_program+0x8fc>
 800ddc0:	2203      	movs	r2, #3
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	9201      	str	r2, [sp, #4]
 800ddc6:	4643      	mov	r3, r8
 800ddc8:	0032      	movs	r2, r6
 800ddca:	0029      	movs	r1, r5
 800ddcc:	0020      	movs	r0, r4
 800ddce:	f7fe fe89 	bl	800cae4 <acc_confprogram_patch_offset>
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	9301      	str	r3, [sp, #4]
 800ddd6:	337d      	adds	r3, #125	; 0x7d
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	0032      	movs	r2, r6
 800dddc:	4643      	mov	r3, r8
 800ddde:	0029      	movs	r1, r5
 800dde0:	0020      	movs	r0, r4
 800dde2:	f7fe fe7f 	bl	800cae4 <acc_confprogram_patch_offset>
 800dde6:	2301      	movs	r3, #1
 800dde8:	9301      	str	r3, [sp, #4]
 800ddea:	3380      	adds	r3, #128	; 0x80
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	0032      	movs	r2, r6
 800ddf0:	4643      	mov	r3, r8
 800ddf2:	0029      	movs	r1, r5
 800ddf4:	0020      	movs	r0, r4
 800ddf6:	f7fe fe75 	bl	800cae4 <acc_confprogram_patch_offset>
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	3373      	adds	r3, #115	; 0x73
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	0032      	movs	r2, r6
 800de04:	4643      	mov	r3, r8
 800de06:	0029      	movs	r1, r5
 800de08:	0020      	movs	r0, r4
 800de0a:	f7fe fe6b 	bl	800cae4 <acc_confprogram_patch_offset>
 800de0e:	4b10      	ldr	r3, [pc, #64]	; (800de50 <acc_cpd_linear_sweep_load_program+0x850>)
 800de10:	0032      	movs	r2, r6
 800de12:	4698      	mov	r8, r3
 800de14:	003b      	movs	r3, r7
 800de16:	33ac      	adds	r3, #172	; 0xac
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	0029      	movs	r1, r5
 800de1c:	9301      	str	r3, [sp, #4]
 800de1e:	2352      	movs	r3, #82	; 0x52
 800de20:	0020      	movs	r0, r4
 800de22:	9300      	str	r3, [sp, #0]
 800de24:	4643      	mov	r3, r8
 800de26:	f7fe fe5d 	bl	800cae4 <acc_confprogram_patch_offset>
 800de2a:	003b      	movs	r3, r7
 800de2c:	33b0      	adds	r3, #176	; 0xb0
 800de2e:	6818      	ldr	r0, [r3, #0]
 800de30:	4910      	ldr	r1, [pc, #64]	; (800de74 <acc_cpd_linear_sweep_load_program+0x874>)
 800de32:	f000 fdab 	bl	800e98c <__aeabi_fmul>
 800de36:	f001 fae9 	bl	800f40c <__aeabi_f2uiz>
 800de3a:	2368      	movs	r3, #104	; 0x68
 800de3c:	3801      	subs	r0, #1
 800de3e:	b280      	uxth	r0, r0
 800de40:	9001      	str	r0, [sp, #4]
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	0032      	movs	r2, r6
 800de46:	4643      	mov	r3, r8
 800de48:	0029      	movs	r1, r5
 800de4a:	0020      	movs	r0, r4
 800de4c:	e014      	b.n	800de78 <acc_cpd_linear_sweep_load_program+0x878>
 800de4e:	46c0      	nop			; (mov r8, r8)
 800de50:	08019dd8 	.word	0x08019dd8
 800de54:	000004e4 	.word	0x000004e4
 800de58:	20000280 	.word	0x20000280
 800de5c:	0801e64f 	.word	0x0801e64f
 800de60:	0801ce5b 	.word	0x0801ce5b
 800de64:	0801e686 	.word	0x0801e686
 800de68:	0801e6bd 	.word	0x0801e6bd
 800de6c:	0801e6e2 	.word	0x0801e6e2
 800de70:	0801e707 	.word	0x0801e707
 800de74:	3751b717 	.word	0x3751b717
 800de78:	f7fe fe34 	bl	800cae4 <acc_confprogram_patch_offset>
 800de7c:	23b4      	movs	r3, #180	; 0xb4
 800de7e:	4699      	mov	r9, r3
 800de80:	44b9      	add	r9, r7
 800de82:	464b      	mov	r3, r9
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	0032      	movs	r2, r6
 800de88:	9301      	str	r3, [sp, #4]
 800de8a:	2353      	movs	r3, #83	; 0x53
 800de8c:	0029      	movs	r1, r5
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	0020      	movs	r0, r4
 800de92:	4643      	mov	r3, r8
 800de94:	f7fe fe26 	bl	800cae4 <acc_confprogram_patch_offset>
 800de98:	464b      	mov	r3, r9
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00b      	beq.n	800deb8 <acc_cpd_linear_sweep_load_program+0x8b8>
 800dea0:	003b      	movs	r3, r7
 800dea2:	33b8      	adds	r3, #184	; 0xb8
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	0032      	movs	r2, r6
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	2332      	movs	r3, #50	; 0x32
 800deac:	0029      	movs	r1, r5
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	0020      	movs	r0, r4
 800deb2:	4643      	mov	r3, r8
 800deb4:	f7fe fe16 	bl	800cae4 <acc_confprogram_patch_offset>
 800deb8:	466b      	mov	r3, sp
 800deba:	9a08      	ldr	r2, [sp, #32]
 800debc:	8b19      	ldrh	r1, [r3, #24]
 800debe:	9805      	ldr	r0, [sp, #20]
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	f7f8 fa89 	bl	80063d8 <acc_sensor_r2_load_confmem>
 800dec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec8:	469c      	mov	ip, r3
 800deca:	4b0d      	ldr	r3, [pc, #52]	; (800df00 <acc_cpd_linear_sweep_load_program+0x900>)
 800decc:	44e3      	add	fp, ip
 800dece:	459b      	cmp	fp, r3
 800ded0:	d801      	bhi.n	800ded6 <acc_cpd_linear_sweep_load_program+0x8d6>
 800ded2:	f7ff fbc8 	bl	800d666 <acc_cpd_linear_sweep_load_program+0x66>
 800ded6:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <acc_cpd_linear_sweep_load_program+0x904>)
 800ded8:	001a      	movs	r2, r3
 800deda:	3260      	adds	r2, #96	; 0x60
 800dedc:	7812      	ldrb	r2, [r2, #0]
 800dede:	2a03      	cmp	r2, #3
 800dee0:	d904      	bls.n	800deec <acc_cpd_linear_sweep_load_program+0x8ec>
 800dee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee4:	4a08      	ldr	r2, [pc, #32]	; (800df08 <acc_cpd_linear_sweep_load_program+0x908>)
 800dee6:	4909      	ldr	r1, [pc, #36]	; (800df0c <acc_cpd_linear_sweep_load_program+0x90c>)
 800dee8:	2004      	movs	r0, #4
 800deea:	4798      	blx	r3
 800deec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deee:	b00f      	add	sp, #60	; 0x3c
 800def0:	bc3c      	pop	{r2, r3, r4, r5}
 800def2:	4690      	mov	r8, r2
 800def4:	4699      	mov	r9, r3
 800def6:	46a2      	mov	sl, r4
 800def8:	46ab      	mov	fp, r5
 800defa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800defc:	9201      	str	r2, [sp, #4]
 800defe:	e77f      	b.n	800de00 <acc_cpd_linear_sweep_load_program+0x800>
 800df00:	0000070f 	.word	0x0000070f
 800df04:	20000280 	.word	0x20000280
 800df08:	0801e721 	.word	0x0801e721
 800df0c:	0801ce5b 	.word	0x0801ce5b

0800df10 <acc_probes_execute_primitive_probe>:
 800df10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df12:	9102      	str	r1, [sp, #8]
 800df14:	2100      	movs	r1, #0
 800df16:	ab01      	add	r3, sp, #4
 800df18:	7018      	strb	r0, [r3, #0]
 800df1a:	000a      	movs	r2, r1
 800df1c:	0018      	movs	r0, r3
 800df1e:	9103      	str	r1, [sp, #12]
 800df20:	f7ff fb60 	bl	800d5e4 <acc_probes_execute>
 800df24:	b005      	add	sp, #20
 800df26:	bd00      	pop	{pc}

0800df28 <acc_probes_execute_uint16>:
 800df28:	b530      	push	{r4, r5, lr}
 800df2a:	000c      	movs	r4, r1
 800df2c:	0011      	movs	r1, r2
 800df2e:	2201      	movs	r2, #1
 800df30:	0005      	movs	r5, r0
 800df32:	b085      	sub	sp, #20
 800df34:	a801      	add	r0, sp, #4
 800df36:	6082      	str	r2, [r0, #8]
 800df38:	005a      	lsls	r2, r3, #1
 800df3a:	7005      	strb	r5, [r0, #0]
 800df3c:	6044      	str	r4, [r0, #4]
 800df3e:	f7ff fb51 	bl	800d5e4 <acc_probes_execute>
 800df42:	b005      	add	sp, #20
 800df44:	bd30      	pop	{r4, r5, pc}

0800df46 <acc_cpd_cbank_and_vana_calibration>:
 800df46:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df48:	4657      	mov	r7, sl
 800df4a:	46de      	mov	lr, fp
 800df4c:	4645      	mov	r5, r8
 800df4e:	464e      	mov	r6, r9
 800df50:	b5e0      	push	{r5, r6, r7, lr}
 800df52:	0015      	movs	r5, r2
 800df54:	2400      	movs	r4, #0
 800df56:	b089      	sub	sp, #36	; 0x24
 800df58:	469a      	mov	sl, r3
 800df5a:	ab07      	add	r3, sp, #28
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	9003      	str	r0, [sp, #12]
 800df60:	9104      	str	r1, [sp, #16]
 800df62:	000a      	movs	r2, r1
 800df64:	ab06      	add	r3, sp, #24
 800df66:	0001      	movs	r1, r0
 800df68:	6828      	ldr	r0, [r5, #0]
 800df6a:	9406      	str	r4, [sp, #24]
 800df6c:	9407      	str	r4, [sp, #28]
 800df6e:	f7ff fa7b 	bl	800d468 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800df72:	0007      	movs	r7, r0
 800df74:	42a0      	cmp	r0, r4
 800df76:	d10c      	bne.n	800df92 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800df78:	4bb0      	ldr	r3, [pc, #704]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800df7a:	4ab1      	ldr	r2, [pc, #708]	; (800e240 <acc_cpd_cbank_and_vana_calibration+0x2fa>)
 800df7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df7e:	49b1      	ldr	r1, [pc, #708]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800df80:	4798      	blx	r3
 800df82:	0038      	movs	r0, r7
 800df84:	b009      	add	sp, #36	; 0x24
 800df86:	bc3c      	pop	{r2, r3, r4, r5}
 800df88:	4690      	mov	r8, r2
 800df8a:	4699      	mov	r9, r3
 800df8c:	46a2      	mov	sl, r4
 800df8e:	46ab      	mov	fp, r5
 800df90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df92:	4bad      	ldr	r3, [pc, #692]	; (800e248 <acc_cpd_cbank_and_vana_calibration+0x302>)
 800df94:	9a07      	ldr	r2, [sp, #28]
 800df96:	9f06      	ldr	r7, [sp, #24]
 800df98:	1b1b      	subs	r3, r3, r4
 800df9a:	4690      	mov	r8, r2
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d900      	bls.n	800dfa2 <acc_cpd_cbank_and_vana_calibration+0x5c>
 800dfa0:	4698      	mov	r8, r3
 800dfa2:	0863      	lsrs	r3, r4, #1
 800dfa4:	9302      	str	r3, [sp, #8]
 800dfa6:	4643      	mov	r3, r8
 800dfa8:	085a      	lsrs	r2, r3, #1
 800dfaa:	0863      	lsrs	r3, r4, #1
 800dfac:	0098      	lsls	r0, r3, #2
 800dfae:	4ba7      	ldr	r3, [pc, #668]	; (800e24c <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dfb0:	0039      	movs	r1, r7
 800dfb2:	469c      	mov	ip, r3
 800dfb4:	4460      	add	r0, ip
 800dfb6:	f7fe fd4d 	bl	800ca54 <acc_confprogram_copy>
 800dfba:	b2a3      	uxth	r3, r4
 800dfbc:	4699      	mov	r9, r3
 800dfbe:	4643      	mov	r3, r8
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	469b      	mov	fp, r3
 800dfc4:	686b      	ldr	r3, [r5, #4]
 800dfc6:	4ea2      	ldr	r6, [pc, #648]	; (800e250 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	231b      	movs	r3, #27
 800dfcc:	465a      	mov	r2, fp
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4649      	mov	r1, r9
 800dfd2:	0033      	movs	r3, r6
 800dfd4:	0038      	movs	r0, r7
 800dfd6:	f7fe fd85 	bl	800cae4 <acc_confprogram_patch_offset>
 800dfda:	68ab      	ldr	r3, [r5, #8]
 800dfdc:	465a      	mov	r2, fp
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	2319      	movs	r3, #25
 800dfe2:	4649      	mov	r1, r9
 800dfe4:	9300      	str	r3, [sp, #0]
 800dfe6:	0038      	movs	r0, r7
 800dfe8:	0033      	movs	r3, r6
 800dfea:	f7fe fd7b 	bl	800cae4 <acc_confprogram_patch_offset>
 800dfee:	68eb      	ldr	r3, [r5, #12]
 800dff0:	465a      	mov	r2, fp
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	231a      	movs	r3, #26
 800dff6:	4649      	mov	r1, r9
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	0038      	movs	r0, r7
 800dffc:	0033      	movs	r3, r6
 800dffe:	f7fe fd71 	bl	800cae4 <acc_confprogram_patch_offset>
 800e002:	8a2b      	ldrh	r3, [r5, #16]
 800e004:	465a      	mov	r2, fp
 800e006:	9301      	str	r3, [sp, #4]
 800e008:	2317      	movs	r3, #23
 800e00a:	4649      	mov	r1, r9
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	0038      	movs	r0, r7
 800e010:	0033      	movs	r3, r6
 800e012:	f7fe fd67 	bl	800cae4 <acc_confprogram_patch_offset>
 800e016:	2310      	movs	r3, #16
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	2300      	movs	r3, #0
 800e01c:	465a      	mov	r2, fp
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	4649      	mov	r1, r9
 800e022:	0033      	movs	r3, r6
 800e024:	0038      	movs	r0, r7
 800e026:	f7fe fd5d 	bl	800cae4 <acc_confprogram_patch_offset>
 800e02a:	466b      	mov	r3, sp
 800e02c:	9a03      	ldr	r2, [sp, #12]
 800e02e:	8919      	ldrh	r1, [r3, #8]
 800e030:	6828      	ldr	r0, [r5, #0]
 800e032:	4643      	mov	r3, r8
 800e034:	f7f8 f9d0 	bl	80063d8 <acc_sensor_r2_load_confmem>
 800e038:	9b07      	ldr	r3, [sp, #28]
 800e03a:	469c      	mov	ip, r3
 800e03c:	4b85      	ldr	r3, [pc, #532]	; (800e254 <acc_cpd_cbank_and_vana_calibration+0x30e>)
 800e03e:	4464      	add	r4, ip
 800e040:	429c      	cmp	r4, r3
 800e042:	d9a6      	bls.n	800df92 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800e044:	2118      	movs	r1, #24
 800e046:	6828      	ldr	r0, [r5, #0]
 800e048:	f7f7 ffd1 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 800e04c:	1e07      	subs	r7, r0, #0
 800e04e:	d105      	bne.n	800e05c <acc_cpd_cbank_and_vana_calibration+0x116>
 800e050:	4b7a      	ldr	r3, [pc, #488]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e052:	4a81      	ldr	r2, [pc, #516]	; (800e258 <acc_cpd_cbank_and_vana_calibration+0x312>)
 800e054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e056:	497b      	ldr	r1, [pc, #492]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e058:	4798      	blx	r3
 800e05a:	e792      	b.n	800df82 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800e05c:	21fa      	movs	r1, #250	; 0xfa
 800e05e:	682f      	ldr	r7, [r5, #0]
 800e060:	2300      	movs	r3, #0
 800e062:	2203      	movs	r2, #3
 800e064:	00c9      	lsls	r1, r1, #3
 800e066:	0038      	movs	r0, r7
 800e068:	f7f7 ff84 	bl	8005f74 <acc_sensor_protocol_r2_wait_for_specific_event>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d04b      	beq.n	800e108 <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800e070:	ac07      	add	r4, sp, #28
 800e072:	0022      	movs	r2, r4
 800e074:	219d      	movs	r1, #157	; 0x9d
 800e076:	0038      	movs	r0, r7
 800e078:	f7fe feba 	bl	800cdf0 <internal_reg_read.lto_priv.627>
 800e07c:	2207      	movs	r2, #7
 800e07e:	8823      	ldrh	r3, [r4, #0]
 800e080:	2006      	movs	r0, #6
 800e082:	4013      	ands	r3, r2
 800e084:	8023      	strh	r3, [r4, #0]
 800e086:	0022      	movs	r2, r4
 800e088:	2301      	movs	r3, #1
 800e08a:	0039      	movs	r1, r7
 800e08c:	f7ff ff4c 	bl	800df28 <acc_probes_execute_uint16>
 800e090:	0038      	movs	r0, r7
 800e092:	f7f7 fb5b 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 800e096:	2800      	cmp	r0, #0
 800e098:	d036      	beq.n	800e108 <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800e09a:	4653      	mov	r3, sl
 800e09c:	8827      	ldrh	r7, [r4, #0]
 800e09e:	601f      	str	r7, [r3, #0]
 800e0a0:	23c0      	movs	r3, #192	; 0xc0
 800e0a2:	682d      	ldr	r5, [r5, #0]
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	8023      	strh	r3, [r4, #0]
 800e0a8:	0028      	movs	r0, r5
 800e0aa:	f7f7 ff93 	bl	8005fd4 <acc_sensor_protocol_r2_is_sensor_running>
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d131      	bne.n	800e118 <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800e0b4:	0032      	movs	r2, r6
 800e0b6:	2311      	movs	r3, #17
 800e0b8:	4964      	ldr	r1, [pc, #400]	; (800e24c <acc_cpd_cbank_and_vana_calibration+0x306>)
 800e0ba:	0028      	movs	r0, r5
 800e0bc:	9700      	str	r7, [sp, #0]
 800e0be:	f7fd f833 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800e0c2:	4643      	mov	r3, r8
 800e0c4:	0032      	movs	r2, r6
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	4960      	ldr	r1, [pc, #384]	; (800e24c <acc_cpd_cbank_and_vana_calibration+0x306>)
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	0028      	movs	r0, r5
 800e0ce:	f7fd f82b 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800e0d2:	23c8      	movs	r3, #200	; 0xc8
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4646      	mov	r6, r8
 800e0d8:	469b      	mov	fp, r3
 800e0da:	5da3      	ldrb	r3, [r4, r6]
 800e0dc:	495b      	ldr	r1, [pc, #364]	; (800e24c <acc_cpd_cbank_and_vana_calibration+0x306>)
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	0028      	movs	r0, r5
 800e0e2:	4698      	mov	r8, r3
 800e0e4:	4a5a      	ldr	r2, [pc, #360]	; (800e250 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800e0e6:	231f      	movs	r3, #31
 800e0e8:	f7fd f81e 	bl	800b128 <acc_confprogram_live_patch.constprop.16>
 800e0ec:	21e8      	movs	r1, #232	; 0xe8
 800e0ee:	0028      	movs	r0, r5
 800e0f0:	0049      	lsls	r1, r1, #1
 800e0f2:	f7f7 ff7c 	bl	8005fee <acc_sensor_protocol_r2_run_program>
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d11d      	bne.n	800e136 <acc_cpd_cbank_and_vana_calibration+0x1f0>
 800e0fa:	4b50      	ldr	r3, [pc, #320]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e0fc:	4a57      	ldr	r2, [pc, #348]	; (800e25c <acc_cpd_cbank_and_vana_calibration+0x316>)
 800e0fe:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800e100:	4950      	ldr	r1, [pc, #320]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e102:	4643      	mov	r3, r8
 800e104:	47a0      	blx	r4
 800e106:	e00e      	b.n	800e126 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800e108:	4b4c      	ldr	r3, [pc, #304]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e10a:	4a55      	ldr	r2, [pc, #340]	; (800e260 <acc_cpd_cbank_and_vana_calibration+0x31a>)
 800e10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e10e:	494d      	ldr	r1, [pc, #308]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e110:	2000      	movs	r0, #0
 800e112:	4798      	blx	r3
 800e114:	2700      	movs	r7, #0
 800e116:	e734      	b.n	800df82 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800e118:	4b48      	ldr	r3, [pc, #288]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e11a:	4a52      	ldr	r2, [pc, #328]	; (800e264 <acc_cpd_cbank_and_vana_calibration+0x31e>)
 800e11c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800e11e:	4949      	ldr	r1, [pc, #292]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e120:	002b      	movs	r3, r5
 800e122:	2000      	movs	r0, #0
 800e124:	47a0      	blx	r4
 800e126:	4b45      	ldr	r3, [pc, #276]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e128:	4a4f      	ldr	r2, [pc, #316]	; (800e268 <acc_cpd_cbank_and_vana_calibration+0x322>)
 800e12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12c:	4945      	ldr	r1, [pc, #276]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e12e:	2000      	movs	r0, #0
 800e130:	4798      	blx	r3
 800e132:	2700      	movs	r7, #0
 800e134:	e725      	b.n	800df82 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800e136:	21fa      	movs	r1, #250	; 0xfa
 800e138:	2300      	movs	r3, #0
 800e13a:	2209      	movs	r2, #9
 800e13c:	00c9      	lsls	r1, r1, #3
 800e13e:	0028      	movs	r0, r5
 800e140:	f7f7 ff18 	bl	8005f74 <acc_sensor_protocol_r2_wait_for_specific_event>
 800e144:	2800      	cmp	r0, #0
 800e146:	d008      	beq.n	800e15a <acc_cpd_cbank_and_vana_calibration+0x214>
 800e148:	9b04      	ldr	r3, [sp, #16]
 800e14a:	2b25      	cmp	r3, #37	; 0x25
 800e14c:	d80d      	bhi.n	800e16a <acc_cpd_cbank_and_vana_calibration+0x224>
 800e14e:	4b3b      	ldr	r3, [pc, #236]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e150:	4a46      	ldr	r2, [pc, #280]	; (800e26c <acc_cpd_cbank_and_vana_calibration+0x326>)
 800e152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e154:	493b      	ldr	r1, [pc, #236]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e156:	2000      	movs	r0, #0
 800e158:	4798      	blx	r3
 800e15a:	4b38      	ldr	r3, [pc, #224]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e15c:	4a44      	ldr	r2, [pc, #272]	; (800e270 <acc_cpd_cbank_and_vana_calibration+0x32a>)
 800e15e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800e160:	4938      	ldr	r1, [pc, #224]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e162:	4643      	mov	r3, r8
 800e164:	2000      	movs	r0, #0
 800e166:	47a0      	blx	r4
 800e168:	e7dd      	b.n	800e126 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800e16a:	2210      	movs	r2, #16
 800e16c:	9903      	ldr	r1, [sp, #12]
 800e16e:	0028      	movs	r0, r5
 800e170:	f7fc ff78 	bl	800b064 <internal_buffer_processed_read.constprop.30>
 800e174:	2310      	movs	r3, #16
 800e176:	0002      	movs	r2, r0
 800e178:	0007      	movs	r7, r0
 800e17a:	0029      	movs	r1, r5
 800e17c:	2000      	movs	r0, #0
 800e17e:	f7ff fed3 	bl	800df28 <acc_probes_execute_uint16>
 800e182:	0028      	movs	r0, r5
 800e184:	f7f7 fae2 	bl	800574c <acc_sensor_protocol_r2_ack_event>
 800e188:	2800      	cmp	r0, #0
 800e18a:	d0e6      	beq.n	800e15a <acc_cpd_cbank_and_vana_calibration+0x214>
 800e18c:	231e      	movs	r3, #30
 800e18e:	469c      	mov	ip, r3
 800e190:	44bc      	add	ip, r7
 800e192:	4663      	mov	r3, ip
 800e194:	9305      	str	r3, [sp, #20]
 800e196:	2300      	movs	r3, #0
 800e198:	003a      	movs	r2, r7
 800e19a:	9302      	str	r3, [sp, #8]
 800e19c:	9802      	ldr	r0, [sp, #8]
 800e19e:	8851      	ldrh	r1, [r2, #2]
 800e1a0:	4684      	mov	ip, r0
 800e1a2:	448c      	add	ip, r1
 800e1a4:	4660      	mov	r0, ip
 800e1a6:	9002      	str	r0, [sp, #8]
 800e1a8:	8810      	ldrh	r0, [r2, #0]
 800e1aa:	4681      	mov	r9, r0
 800e1ac:	1a08      	subs	r0, r1, r0
 800e1ae:	4684      	mov	ip, r0
 800e1b0:	4549      	cmp	r1, r9
 800e1b2:	d202      	bcs.n	800e1ba <acc_cpd_cbank_and_vana_calibration+0x274>
 800e1b4:	4648      	mov	r0, r9
 800e1b6:	1a41      	subs	r1, r0, r1
 800e1b8:	468c      	mov	ip, r1
 800e1ba:	4563      	cmp	r3, ip
 800e1bc:	d200      	bcs.n	800e1c0 <acc_cpd_cbank_and_vana_calibration+0x27a>
 800e1be:	4663      	mov	r3, ip
 800e1c0:	9905      	ldr	r1, [sp, #20]
 800e1c2:	3202      	adds	r2, #2
 800e1c4:	4291      	cmp	r1, r2
 800e1c6:	d1e9      	bne.n	800e19c <acc_cpd_cbank_and_vana_calibration+0x256>
 800e1c8:	883a      	ldrh	r2, [r7, #0]
 800e1ca:	9902      	ldr	r1, [sp, #8]
 800e1cc:	2700      	movs	r7, #0
 800e1ce:	1850      	adds	r0, r2, r1
 800e1d0:	4a28      	ldr	r2, [pc, #160]	; (800e274 <acc_cpd_cbank_and_vana_calibration+0x32e>)
 800e1d2:	0900      	lsrs	r0, r0, #4
 800e1d4:	1882      	adds	r2, r0, r2
 800e1d6:	4928      	ldr	r1, [pc, #160]	; (800e278 <acc_cpd_cbank_and_vana_calibration+0x332>)
 800e1d8:	b292      	uxth	r2, r2
 800e1da:	428a      	cmp	r2, r1
 800e1dc:	d803      	bhi.n	800e1e6 <acc_cpd_cbank_and_vana_calibration+0x2a0>
 800e1de:	465a      	mov	r2, fp
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	417f      	adcs	r7, r7
 800e1e4:	b2ff      	uxtb	r7, r7
 800e1e6:	4a15      	ldr	r2, [pc, #84]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e1e8:	0011      	movs	r1, r2
 800e1ea:	3160      	adds	r1, #96	; 0x60
 800e1ec:	7809      	ldrb	r1, [r1, #0]
 800e1ee:	2903      	cmp	r1, #3
 800e1f0:	d909      	bls.n	800e206 <acc_cpd_cbank_and_vana_calibration+0x2c0>
 800e1f2:	b280      	uxth	r0, r0
 800e1f4:	9000      	str	r0, [sp, #0]
 800e1f6:	9301      	str	r3, [sp, #4]
 800e1f8:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e1fa:	4912      	ldr	r1, [pc, #72]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e1fc:	4699      	mov	r9, r3
 800e1fe:	4a1f      	ldr	r2, [pc, #124]	; (800e27c <acc_cpd_cbank_and_vana_calibration+0x336>)
 800e200:	002b      	movs	r3, r5
 800e202:	2004      	movs	r0, #4
 800e204:	47c8      	blx	r9
 800e206:	2f00      	cmp	r7, #0
 800e208:	d013      	beq.n	800e232 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800e20a:	4653      	mov	r3, sl
 800e20c:	4642      	mov	r2, r8
 800e20e:	711a      	strb	r2, [r3, #4]
 800e210:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800e212:	001a      	movs	r2, r3
 800e214:	3260      	adds	r2, #96	; 0x60
 800e216:	7812      	ldrb	r2, [r2, #0]
 800e218:	2a01      	cmp	r2, #1
 800e21a:	d800      	bhi.n	800e21e <acc_cpd_cbank_and_vana_calibration+0x2d8>
 800e21c:	e6b1      	b.n	800df82 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800e21e:	4642      	mov	r2, r8
 800e220:	9200      	str	r2, [sp, #0]
 800e222:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800e224:	4653      	mov	r3, sl
 800e226:	4a16      	ldr	r2, [pc, #88]	; (800e280 <acc_cpd_cbank_and_vana_calibration+0x33a>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4906      	ldr	r1, [pc, #24]	; (800e244 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800e22c:	2002      	movs	r0, #2
 800e22e:	47a0      	blx	r4
 800e230:	e6a7      	b.n	800df82 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800e232:	2e01      	cmp	r6, #1
 800e234:	d100      	bne.n	800e238 <acc_cpd_cbank_and_vana_calibration+0x2f2>
 800e236:	e776      	b.n	800e126 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800e238:	2601      	movs	r6, #1
 800e23a:	e74e      	b.n	800e0da <acc_cpd_cbank_and_vana_calibration+0x194>
 800e23c:	20000280 	.word	0x20000280
 800e240:	0801e744 	.word	0x0801e744
 800e244:	0801e785 	.word	0x0801e785
 800e248:	00000572 	.word	0x00000572
 800e24c:	0801a4a0 	.word	0x0801a4a0
 800e250:	08019cb0 	.word	0x08019cb0
 800e254:	00000571 	.word	0x00000571
 800e258:	0801e7a4 	.word	0x0801e7a4
 800e25c:	0801e7ee 	.word	0x0801e7ee
 800e260:	0801e7d6 	.word	0x0801e7d6
 800e264:	0801da0c 	.word	0x0801da0c
 800e268:	0801e877 	.word	0x0801e877
 800e26c:	0801d754 	.word	0x0801d754
 800e270:	0801e84c 	.word	0x0801e84c
 800e274:	ffff86e8 	.word	0xffff86e8
 800e278:	00000bb8 	.word	0x00000bb8
 800e27c:	0801e82e 	.word	0x0801e82e
 800e280:	0801e88e 	.word	0x0801e88e

0800e284 <acc_element_source_adc_inject_data>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	0004      	movs	r4, r0
 800e288:	0015      	movs	r5, r2
 800e28a:	6940      	ldr	r0, [r0, #20]
 800e28c:	f007 fc16 	bl	8015abc <memcpy>
 800e290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e292:	4a05      	ldr	r2, [pc, #20]	; (800e2a8 <acc_element_source_adc_inject_data+0x24>)
 800e294:	601d      	str	r5, [r3, #0]
 800e296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	601a      	str	r2, [r3, #0]
 800e29c:	2200      	movs	r2, #0
 800e29e:	6a23      	ldr	r3, [r4, #32]
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	6843      	ldr	r3, [r0, #4]
 800e2a4:	4798      	blx	r3
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	51645c3c 	.word	0x51645c3c

0800e2ac <acc_element_source_adc_produce>:
 800e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ae:	4645      	mov	r5, r8
 800e2b0:	46de      	mov	lr, fp
 800e2b2:	4657      	mov	r7, sl
 800e2b4:	464e      	mov	r6, r9
 800e2b6:	b5e0      	push	{r5, r6, r7, lr}
 800e2b8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800e2ba:	b087      	sub	sp, #28
 800e2bc:	0005      	movs	r5, r0
 800e2be:	2c00      	cmp	r4, #0
 800e2c0:	d100      	bne.n	800e2c4 <acc_element_source_adc_produce+0x18>
 800e2c2:	e09d      	b.n	800e400 <acc_element_source_adc_produce+0x154>
 800e2c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e2c6:	4a53      	ldr	r2, [pc, #332]	; (800e414 <acc_element_source_adc_produce+0x168>)
 800e2c8:	601a      	str	r2, [r3, #0]
 800e2ca:	6a03      	ldr	r3, [r0, #32]
 800e2cc:	69a2      	ldr	r2, [r4, #24]
 800e2ce:	601a      	str	r2, [r3, #0]
 800e2d0:	6943      	ldr	r3, [r0, #20]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800e2d6:	9301      	str	r3, [sp, #4]
 800e2d8:	7866      	ldrb	r6, [r4, #1]
 800e2da:	69a3      	ldr	r3, [r4, #24]
 800e2dc:	469a      	mov	sl, r3
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	d000      	beq.n	800e2e4 <acc_element_source_adc_produce+0x38>
 800e2e2:	e088      	b.n	800e3f6 <acc_element_source_adc_produce+0x14a>
 800e2e4:	7823      	ldrb	r3, [r4, #0]
 800e2e6:	469b      	mov	fp, r3
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d133      	bne.n	800e354 <acc_element_source_adc_produce+0xa8>
 800e2ec:	0020      	movs	r0, r4
 800e2ee:	f7f8 f8b5 	bl	800645c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.261>
 800e2f2:	2800      	cmp	r0, #0
 800e2f4:	d027      	beq.n	800e346 <acc_element_source_adc_produce+0x9a>
 800e2f6:	0020      	movs	r0, r4
 800e2f8:	2210      	movs	r2, #16
 800e2fa:	2100      	movs	r1, #0
 800e2fc:	3008      	adds	r0, #8
 800e2fe:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800e300:	f004 ffb8 	bl	8013274 <memset>
 800e304:	0020      	movs	r0, r4
 800e306:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e308:	0039      	movs	r1, r7
 800e30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e30c:	aa02      	add	r2, sp, #8
 800e30e:	3018      	adds	r0, #24
 800e310:	4798      	blx	r3
 800e312:	ab02      	add	r3, sp, #8
 800e314:	881b      	ldrh	r3, [r3, #0]
 800e316:	60e0      	str	r0, [r4, #12]
 800e318:	8163      	strh	r3, [r4, #10]
 800e31a:	aa02      	add	r2, sp, #8
 800e31c:	7892      	ldrb	r2, [r2, #2]
 800e31e:	9904      	ldr	r1, [sp, #16]
 800e320:	7222      	strb	r2, [r4, #8]
 800e322:	4691      	mov	r9, r2
 800e324:	aa02      	add	r2, sp, #8
 800e326:	78d2      	ldrb	r2, [r2, #3]
 800e328:	7262      	strb	r2, [r4, #9]
 800e32a:	4690      	mov	r8, r2
 800e32c:	aa02      	add	r2, sp, #8
 800e32e:	7b17      	ldrb	r7, [r2, #12]
 800e330:	7427      	strb	r7, [r4, #16]
 800e332:	7912      	ldrb	r2, [r2, #4]
 800e334:	6161      	str	r1, [r4, #20]
 800e336:	7462      	strb	r2, [r4, #17]
 800e338:	2800      	cmp	r0, #0
 800e33a:	d163      	bne.n	800e404 <acc_element_source_adc_produce+0x158>
 800e33c:	4b36      	ldr	r3, [pc, #216]	; (800e418 <acc_element_source_adc_produce+0x16c>)
 800e33e:	4a37      	ldr	r2, [pc, #220]	; (800e41c <acc_element_source_adc_produce+0x170>)
 800e340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e342:	4937      	ldr	r1, [pc, #220]	; (800e420 <acc_element_source_adc_produce+0x174>)
 800e344:	4798      	blx	r3
 800e346:	4b34      	ldr	r3, [pc, #208]	; (800e418 <acc_element_source_adc_produce+0x16c>)
 800e348:	4a36      	ldr	r2, [pc, #216]	; (800e424 <acc_element_source_adc_produce+0x178>)
 800e34a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e34c:	4936      	ldr	r1, [pc, #216]	; (800e428 <acc_element_source_adc_produce+0x17c>)
 800e34e:	2000      	movs	r0, #0
 800e350:	4798      	blx	r3
 800e352:	e042      	b.n	800e3da <acc_element_source_adc_produce+0x12e>
 800e354:	2b01      	cmp	r3, #1
 800e356:	d1ce      	bne.n	800e2f6 <acc_element_source_adc_produce+0x4a>
 800e358:	4b2f      	ldr	r3, [pc, #188]	; (800e418 <acc_element_source_adc_produce+0x16c>)
 800e35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d0ca      	beq.n	800e2f6 <acc_element_source_adc_produce+0x4a>
 800e360:	4650      	mov	r0, sl
 800e362:	4798      	blx	r3
 800e364:	e7c7      	b.n	800e2f6 <acc_element_source_adc_produce+0x4a>
 800e366:	9801      	ldr	r0, [sp, #4]
 800e368:	4298      	cmp	r0, r3
 800e36a:	d004      	beq.n	800e376 <acc_element_source_adc_produce+0xca>
 800e36c:	21ca      	movs	r1, #202	; 0xca
 800e36e:	482f      	ldr	r0, [pc, #188]	; (800e42c <acc_element_source_adc_produce+0x180>)
 800e370:	31ff      	adds	r1, #255	; 0xff
 800e372:	f7f7 fc74 	bl	8005c5e <acc_assert_fail>
 800e376:	0016      	movs	r6, r2
 800e378:	2348      	movs	r3, #72	; 0x48
 800e37a:	4652      	mov	r2, sl
 800e37c:	4353      	muls	r3, r2
 800e37e:	4a2c      	ldr	r2, [pc, #176]	; (800e430 <acc_element_source_adc_produce+0x184>)
 800e380:	3b48      	subs	r3, #72	; 0x48
 800e382:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e384:	18d3      	adds	r3, r2, r3
 800e386:	001a      	movs	r2, r3
 800e388:	3242      	adds	r2, #66	; 0x42
 800e38a:	7016      	strb	r6, [r2, #0]
 800e38c:	6459      	str	r1, [r3, #68]	; 0x44
 800e38e:	465b      	mov	r3, fp
 800e390:	2b02      	cmp	r3, #2
 800e392:	d12a      	bne.n	800e3ea <acc_element_source_adc_produce+0x13e>
 800e394:	4650      	mov	r0, sl
 800e396:	f7f8 f859 	bl	800644c <acc_rss_integration_sensor_device_power_off>
 800e39a:	2300      	movs	r3, #0
 800e39c:	70e3      	strb	r3, [r4, #3]
 800e39e:	7863      	ldrb	r3, [r4, #1]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d105      	bne.n	800e3b0 <acc_element_source_adc_produce+0x104>
 800e3a4:	9b01      	ldr	r3, [sp, #4]
 800e3a6:	9a00      	ldr	r2, [sp, #0]
 800e3a8:	4651      	mov	r1, sl
 800e3aa:	2002      	movs	r0, #2
 800e3ac:	f7ff fdbc 	bl	800df28 <acc_probes_execute_uint16>
 800e3b0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800e3b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	464a      	mov	r2, r9
 800e3ba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e3bc:	701a      	strb	r2, [r3, #0]
 800e3be:	4642      	mov	r2, r8
 800e3c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e3c2:	701a      	strb	r2, [r3, #0]
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	d100      	bne.n	800e3cc <acc_element_source_adc_produce+0x120>
 800e3ca:	003b      	movs	r3, r7
 800e3cc:	2601      	movs	r6, #1
 800e3ce:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800e3d0:	6828      	ldr	r0, [r5, #0]
 800e3d2:	4033      	ands	r3, r6
 800e3d4:	7013      	strb	r3, [r2, #0]
 800e3d6:	6843      	ldr	r3, [r0, #4]
 800e3d8:	4798      	blx	r3
 800e3da:	0030      	movs	r0, r6
 800e3dc:	b007      	add	sp, #28
 800e3de:	bc3c      	pop	{r2, r3, r4, r5}
 800e3e0:	4690      	mov	r8, r2
 800e3e2:	4699      	mov	r9, r3
 800e3e4:	46a2      	mov	sl, r4
 800e3e6:	46ab      	mov	fp, r5
 800e3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d1d7      	bne.n	800e39e <acc_element_source_adc_produce+0xf2>
 800e3ee:	0020      	movs	r0, r4
 800e3f0:	f7f7 ff62 	bl	80062b8 <acc_sensor_manager_hibernate_enter.lto_priv.260>
 800e3f4:	e7d3      	b.n	800e39e <acc_element_source_adc_produce+0xf2>
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	0037      	movs	r7, r6
 800e3fa:	46b0      	mov	r8, r6
 800e3fc:	46b1      	mov	r9, r6
 800e3fe:	e7ce      	b.n	800e39e <acc_element_source_adc_produce+0xf2>
 800e400:	0026      	movs	r6, r4
 800e402:	e7ea      	b.n	800e3da <acc_element_source_adc_produce+0x12e>
 800e404:	9e00      	ldr	r6, [sp, #0]
 800e406:	4286      	cmp	r6, r0
 800e408:	d0ad      	beq.n	800e366 <acc_element_source_adc_produce+0xba>
 800e40a:	21e4      	movs	r1, #228	; 0xe4
 800e40c:	4807      	ldr	r0, [pc, #28]	; (800e42c <acc_element_source_adc_produce+0x180>)
 800e40e:	0049      	lsls	r1, r1, #1
 800e410:	f7f7 fc25 	bl	8005c5e <acc_assert_fail>
 800e414:	51645c3c 	.word	0x51645c3c
 800e418:	20000280 	.word	0x20000280
 800e41c:	0801e8a1 	.word	0x0801e8a1
 800e420:	0801d071 	.word	0x0801d071
 800e424:	0801e8e8 	.word	0x0801e8e8
 800e428:	0801e905 	.word	0x0801e905
 800e42c:	0801e8b9 	.word	0x0801e8b9
 800e430:	20000480 	.word	0x20000480

0800e434 <__aeabi_fadd>:
 800e434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e436:	4647      	mov	r7, r8
 800e438:	46ce      	mov	lr, r9
 800e43a:	0243      	lsls	r3, r0, #9
 800e43c:	0a5b      	lsrs	r3, r3, #9
 800e43e:	0044      	lsls	r4, r0, #1
 800e440:	0fc2      	lsrs	r2, r0, #31
 800e442:	469c      	mov	ip, r3
 800e444:	0048      	lsls	r0, r1, #1
 800e446:	00dd      	lsls	r5, r3, #3
 800e448:	024b      	lsls	r3, r1, #9
 800e44a:	0e24      	lsrs	r4, r4, #24
 800e44c:	0a5b      	lsrs	r3, r3, #9
 800e44e:	0e00      	lsrs	r0, r0, #24
 800e450:	b580      	push	{r7, lr}
 800e452:	4698      	mov	r8, r3
 800e454:	0026      	movs	r6, r4
 800e456:	4691      	mov	r9, r2
 800e458:	0fc9      	lsrs	r1, r1, #31
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	1a27      	subs	r7, r4, r0
 800e45e:	428a      	cmp	r2, r1
 800e460:	d029      	beq.n	800e4b6 <__aeabi_fadd+0x82>
 800e462:	2f00      	cmp	r7, #0
 800e464:	dd15      	ble.n	800e492 <__aeabi_fadd+0x5e>
 800e466:	2800      	cmp	r0, #0
 800e468:	d14a      	bne.n	800e500 <__aeabi_fadd+0xcc>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d000      	beq.n	800e470 <__aeabi_fadd+0x3c>
 800e46e:	e095      	b.n	800e59c <__aeabi_fadd+0x168>
 800e470:	08ed      	lsrs	r5, r5, #3
 800e472:	2cff      	cmp	r4, #255	; 0xff
 800e474:	d100      	bne.n	800e478 <__aeabi_fadd+0x44>
 800e476:	e088      	b.n	800e58a <__aeabi_fadd+0x156>
 800e478:	026b      	lsls	r3, r5, #9
 800e47a:	0a5b      	lsrs	r3, r3, #9
 800e47c:	b2e6      	uxtb	r6, r4
 800e47e:	025b      	lsls	r3, r3, #9
 800e480:	05f6      	lsls	r6, r6, #23
 800e482:	0a58      	lsrs	r0, r3, #9
 800e484:	4330      	orrs	r0, r6
 800e486:	07d2      	lsls	r2, r2, #31
 800e488:	4310      	orrs	r0, r2
 800e48a:	bc0c      	pop	{r2, r3}
 800e48c:	4690      	mov	r8, r2
 800e48e:	4699      	mov	r9, r3
 800e490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e492:	2f00      	cmp	r7, #0
 800e494:	d000      	beq.n	800e498 <__aeabi_fadd+0x64>
 800e496:	e087      	b.n	800e5a8 <__aeabi_fadd+0x174>
 800e498:	1c60      	adds	r0, r4, #1
 800e49a:	b2c0      	uxtb	r0, r0
 800e49c:	2801      	cmp	r0, #1
 800e49e:	dc00      	bgt.n	800e4a2 <__aeabi_fadd+0x6e>
 800e4a0:	e0b6      	b.n	800e610 <__aeabi_fadd+0x1dc>
 800e4a2:	1aee      	subs	r6, r5, r3
 800e4a4:	0172      	lsls	r2, r6, #5
 800e4a6:	d500      	bpl.n	800e4aa <__aeabi_fadd+0x76>
 800e4a8:	e0c5      	b.n	800e636 <__aeabi_fadd+0x202>
 800e4aa:	2e00      	cmp	r6, #0
 800e4ac:	d13d      	bne.n	800e52a <__aeabi_fadd+0xf6>
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	2600      	movs	r6, #0
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e7e3      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	dc00      	bgt.n	800e4bc <__aeabi_fadd+0x88>
 800e4ba:	e096      	b.n	800e5ea <__aeabi_fadd+0x1b6>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d05d      	beq.n	800e57c <__aeabi_fadd+0x148>
 800e4c0:	2cff      	cmp	r4, #255	; 0xff
 800e4c2:	d060      	beq.n	800e586 <__aeabi_fadd+0x152>
 800e4c4:	2280      	movs	r2, #128	; 0x80
 800e4c6:	04d2      	lsls	r2, r2, #19
 800e4c8:	4313      	orrs	r3, r2
 800e4ca:	2f1b      	cmp	r7, #27
 800e4cc:	dd00      	ble.n	800e4d0 <__aeabi_fadd+0x9c>
 800e4ce:	e0ec      	b.n	800e6aa <__aeabi_fadd+0x276>
 800e4d0:	2220      	movs	r2, #32
 800e4d2:	1bd2      	subs	r2, r2, r7
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	4093      	lsls	r3, r2
 800e4d8:	40f8      	lsrs	r0, r7
 800e4da:	1e5a      	subs	r2, r3, #1
 800e4dc:	4193      	sbcs	r3, r2
 800e4de:	4303      	orrs	r3, r0
 800e4e0:	18ed      	adds	r5, r5, r3
 800e4e2:	016b      	lsls	r3, r5, #5
 800e4e4:	d57b      	bpl.n	800e5de <__aeabi_fadd+0x1aa>
 800e4e6:	3401      	adds	r4, #1
 800e4e8:	2cff      	cmp	r4, #255	; 0xff
 800e4ea:	d100      	bne.n	800e4ee <__aeabi_fadd+0xba>
 800e4ec:	e0b7      	b.n	800e65e <__aeabi_fadd+0x22a>
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	2607      	movs	r6, #7
 800e4f2:	402a      	ands	r2, r5
 800e4f4:	086b      	lsrs	r3, r5, #1
 800e4f6:	4d9a      	ldr	r5, [pc, #616]	; (800e760 <__aeabi_fadd+0x32c>)
 800e4f8:	401d      	ands	r5, r3
 800e4fa:	4315      	orrs	r5, r2
 800e4fc:	402e      	ands	r6, r5
 800e4fe:	e029      	b.n	800e554 <__aeabi_fadd+0x120>
 800e500:	2cff      	cmp	r4, #255	; 0xff
 800e502:	d0b5      	beq.n	800e470 <__aeabi_fadd+0x3c>
 800e504:	2280      	movs	r2, #128	; 0x80
 800e506:	04d2      	lsls	r2, r2, #19
 800e508:	4313      	orrs	r3, r2
 800e50a:	2f1b      	cmp	r7, #27
 800e50c:	dd00      	ble.n	800e510 <__aeabi_fadd+0xdc>
 800e50e:	e0b2      	b.n	800e676 <__aeabi_fadd+0x242>
 800e510:	2220      	movs	r2, #32
 800e512:	1bd2      	subs	r2, r2, r7
 800e514:	0019      	movs	r1, r3
 800e516:	4093      	lsls	r3, r2
 800e518:	40f9      	lsrs	r1, r7
 800e51a:	1e5a      	subs	r2, r3, #1
 800e51c:	4193      	sbcs	r3, r2
 800e51e:	430b      	orrs	r3, r1
 800e520:	1aed      	subs	r5, r5, r3
 800e522:	016b      	lsls	r3, r5, #5
 800e524:	d55b      	bpl.n	800e5de <__aeabi_fadd+0x1aa>
 800e526:	01ad      	lsls	r5, r5, #6
 800e528:	09ae      	lsrs	r6, r5, #6
 800e52a:	0030      	movs	r0, r6
 800e52c:	f000 fd24 	bl	800ef78 <__clzsi2>
 800e530:	3805      	subs	r0, #5
 800e532:	4086      	lsls	r6, r0
 800e534:	4284      	cmp	r4, r0
 800e536:	dc65      	bgt.n	800e604 <__aeabi_fadd+0x1d0>
 800e538:	1b04      	subs	r4, r0, r4
 800e53a:	0033      	movs	r3, r6
 800e53c:	2020      	movs	r0, #32
 800e53e:	3401      	adds	r4, #1
 800e540:	40e3      	lsrs	r3, r4
 800e542:	1b04      	subs	r4, r0, r4
 800e544:	40a6      	lsls	r6, r4
 800e546:	1e75      	subs	r5, r6, #1
 800e548:	41ae      	sbcs	r6, r5
 800e54a:	4333      	orrs	r3, r6
 800e54c:	2607      	movs	r6, #7
 800e54e:	001d      	movs	r5, r3
 800e550:	2400      	movs	r4, #0
 800e552:	401e      	ands	r6, r3
 800e554:	2201      	movs	r2, #1
 800e556:	464b      	mov	r3, r9
 800e558:	401a      	ands	r2, r3
 800e55a:	2e00      	cmp	r6, #0
 800e55c:	d004      	beq.n	800e568 <__aeabi_fadd+0x134>
 800e55e:	230f      	movs	r3, #15
 800e560:	402b      	ands	r3, r5
 800e562:	2b04      	cmp	r3, #4
 800e564:	d000      	beq.n	800e568 <__aeabi_fadd+0x134>
 800e566:	3504      	adds	r5, #4
 800e568:	016b      	lsls	r3, r5, #5
 800e56a:	d400      	bmi.n	800e56e <__aeabi_fadd+0x13a>
 800e56c:	e780      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e56e:	3401      	adds	r4, #1
 800e570:	b2e6      	uxtb	r6, r4
 800e572:	2cff      	cmp	r4, #255	; 0xff
 800e574:	d12f      	bne.n	800e5d6 <__aeabi_fadd+0x1a2>
 800e576:	26ff      	movs	r6, #255	; 0xff
 800e578:	2300      	movs	r3, #0
 800e57a:	e780      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d152      	bne.n	800e626 <__aeabi_fadd+0x1f2>
 800e580:	2cff      	cmp	r4, #255	; 0xff
 800e582:	d000      	beq.n	800e586 <__aeabi_fadd+0x152>
 800e584:	e774      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e586:	000a      	movs	r2, r1
 800e588:	08ed      	lsrs	r5, r5, #3
 800e58a:	2d00      	cmp	r5, #0
 800e58c:	d0f3      	beq.n	800e576 <__aeabi_fadd+0x142>
 800e58e:	2380      	movs	r3, #128	; 0x80
 800e590:	03db      	lsls	r3, r3, #15
 800e592:	432b      	orrs	r3, r5
 800e594:	025b      	lsls	r3, r3, #9
 800e596:	0a5b      	lsrs	r3, r3, #9
 800e598:	26ff      	movs	r6, #255	; 0xff
 800e59a:	e770      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e59c:	3f01      	subs	r7, #1
 800e59e:	2f00      	cmp	r7, #0
 800e5a0:	d0be      	beq.n	800e520 <__aeabi_fadd+0xec>
 800e5a2:	2cff      	cmp	r4, #255	; 0xff
 800e5a4:	d1b1      	bne.n	800e50a <__aeabi_fadd+0xd6>
 800e5a6:	e763      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e5a8:	2c00      	cmp	r4, #0
 800e5aa:	d047      	beq.n	800e63c <__aeabi_fadd+0x208>
 800e5ac:	28ff      	cmp	r0, #255	; 0xff
 800e5ae:	d069      	beq.n	800e684 <__aeabi_fadd+0x250>
 800e5b0:	2480      	movs	r4, #128	; 0x80
 800e5b2:	04e4      	lsls	r4, r4, #19
 800e5b4:	427a      	negs	r2, r7
 800e5b6:	4325      	orrs	r5, r4
 800e5b8:	2a1b      	cmp	r2, #27
 800e5ba:	dd00      	ble.n	800e5be <__aeabi_fadd+0x18a>
 800e5bc:	e0c5      	b.n	800e74a <__aeabi_fadd+0x316>
 800e5be:	002c      	movs	r4, r5
 800e5c0:	2620      	movs	r6, #32
 800e5c2:	40d4      	lsrs	r4, r2
 800e5c4:	1ab2      	subs	r2, r6, r2
 800e5c6:	4095      	lsls	r5, r2
 800e5c8:	1e6a      	subs	r2, r5, #1
 800e5ca:	4195      	sbcs	r5, r2
 800e5cc:	4325      	orrs	r5, r4
 800e5ce:	1b5d      	subs	r5, r3, r5
 800e5d0:	0004      	movs	r4, r0
 800e5d2:	4689      	mov	r9, r1
 800e5d4:	e7a5      	b.n	800e522 <__aeabi_fadd+0xee>
 800e5d6:	01ab      	lsls	r3, r5, #6
 800e5d8:	0a5b      	lsrs	r3, r3, #9
 800e5da:	e750      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e5dc:	2400      	movs	r4, #0
 800e5de:	2201      	movs	r2, #1
 800e5e0:	464b      	mov	r3, r9
 800e5e2:	401a      	ands	r2, r3
 800e5e4:	076b      	lsls	r3, r5, #29
 800e5e6:	d1ba      	bne.n	800e55e <__aeabi_fadd+0x12a>
 800e5e8:	e742      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e5ea:	2f00      	cmp	r7, #0
 800e5ec:	d13b      	bne.n	800e666 <__aeabi_fadd+0x232>
 800e5ee:	3401      	adds	r4, #1
 800e5f0:	b2e0      	uxtb	r0, r4
 800e5f2:	2801      	cmp	r0, #1
 800e5f4:	dd4a      	ble.n	800e68c <__aeabi_fadd+0x258>
 800e5f6:	2cff      	cmp	r4, #255	; 0xff
 800e5f8:	d0bd      	beq.n	800e576 <__aeabi_fadd+0x142>
 800e5fa:	2607      	movs	r6, #7
 800e5fc:	18ed      	adds	r5, r5, r3
 800e5fe:	086d      	lsrs	r5, r5, #1
 800e600:	402e      	ands	r6, r5
 800e602:	e7a7      	b.n	800e554 <__aeabi_fadd+0x120>
 800e604:	2307      	movs	r3, #7
 800e606:	4d57      	ldr	r5, [pc, #348]	; (800e764 <__aeabi_fadd+0x330>)
 800e608:	1a24      	subs	r4, r4, r0
 800e60a:	4035      	ands	r5, r6
 800e60c:	401e      	ands	r6, r3
 800e60e:	e7a1      	b.n	800e554 <__aeabi_fadd+0x120>
 800e610:	2c00      	cmp	r4, #0
 800e612:	d11b      	bne.n	800e64c <__aeabi_fadd+0x218>
 800e614:	2d00      	cmp	r5, #0
 800e616:	d16e      	bne.n	800e6f6 <__aeabi_fadd+0x2c2>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d100      	bne.n	800e61e <__aeabi_fadd+0x1ea>
 800e61c:	e09a      	b.n	800e754 <__aeabi_fadd+0x320>
 800e61e:	000a      	movs	r2, r1
 800e620:	001d      	movs	r5, r3
 800e622:	003c      	movs	r4, r7
 800e624:	e724      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e626:	3f01      	subs	r7, #1
 800e628:	2f00      	cmp	r7, #0
 800e62a:	d100      	bne.n	800e62e <__aeabi_fadd+0x1fa>
 800e62c:	e758      	b.n	800e4e0 <__aeabi_fadd+0xac>
 800e62e:	2cff      	cmp	r4, #255	; 0xff
 800e630:	d000      	beq.n	800e634 <__aeabi_fadd+0x200>
 800e632:	e74a      	b.n	800e4ca <__aeabi_fadd+0x96>
 800e634:	e7a7      	b.n	800e586 <__aeabi_fadd+0x152>
 800e636:	1b5e      	subs	r6, r3, r5
 800e638:	4689      	mov	r9, r1
 800e63a:	e776      	b.n	800e52a <__aeabi_fadd+0xf6>
 800e63c:	2d00      	cmp	r5, #0
 800e63e:	d11c      	bne.n	800e67a <__aeabi_fadd+0x246>
 800e640:	000a      	movs	r2, r1
 800e642:	28ff      	cmp	r0, #255	; 0xff
 800e644:	d01f      	beq.n	800e686 <__aeabi_fadd+0x252>
 800e646:	0004      	movs	r4, r0
 800e648:	001d      	movs	r5, r3
 800e64a:	e711      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e64c:	2d00      	cmp	r5, #0
 800e64e:	d15d      	bne.n	800e70c <__aeabi_fadd+0x2d8>
 800e650:	2b00      	cmp	r3, #0
 800e652:	d117      	bne.n	800e684 <__aeabi_fadd+0x250>
 800e654:	2380      	movs	r3, #128	; 0x80
 800e656:	2200      	movs	r2, #0
 800e658:	03db      	lsls	r3, r3, #15
 800e65a:	26ff      	movs	r6, #255	; 0xff
 800e65c:	e70f      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e65e:	000a      	movs	r2, r1
 800e660:	26ff      	movs	r6, #255	; 0xff
 800e662:	2300      	movs	r3, #0
 800e664:	e70b      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e666:	2c00      	cmp	r4, #0
 800e668:	d121      	bne.n	800e6ae <__aeabi_fadd+0x27a>
 800e66a:	2d00      	cmp	r5, #0
 800e66c:	d166      	bne.n	800e73c <__aeabi_fadd+0x308>
 800e66e:	28ff      	cmp	r0, #255	; 0xff
 800e670:	d1e9      	bne.n	800e646 <__aeabi_fadd+0x212>
 800e672:	001d      	movs	r5, r3
 800e674:	e787      	b.n	800e586 <__aeabi_fadd+0x152>
 800e676:	2301      	movs	r3, #1
 800e678:	e752      	b.n	800e520 <__aeabi_fadd+0xec>
 800e67a:	1c7a      	adds	r2, r7, #1
 800e67c:	d0a7      	beq.n	800e5ce <__aeabi_fadd+0x19a>
 800e67e:	43fa      	mvns	r2, r7
 800e680:	28ff      	cmp	r0, #255	; 0xff
 800e682:	d199      	bne.n	800e5b8 <__aeabi_fadd+0x184>
 800e684:	000a      	movs	r2, r1
 800e686:	001d      	movs	r5, r3
 800e688:	24ff      	movs	r4, #255	; 0xff
 800e68a:	e6f1      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e68c:	2e00      	cmp	r6, #0
 800e68e:	d121      	bne.n	800e6d4 <__aeabi_fadd+0x2a0>
 800e690:	2d00      	cmp	r5, #0
 800e692:	d04f      	beq.n	800e734 <__aeabi_fadd+0x300>
 800e694:	2b00      	cmp	r3, #0
 800e696:	d04c      	beq.n	800e732 <__aeabi_fadd+0x2fe>
 800e698:	18ed      	adds	r5, r5, r3
 800e69a:	016b      	lsls	r3, r5, #5
 800e69c:	d59e      	bpl.n	800e5dc <__aeabi_fadd+0x1a8>
 800e69e:	4b31      	ldr	r3, [pc, #196]	; (800e764 <__aeabi_fadd+0x330>)
 800e6a0:	3607      	adds	r6, #7
 800e6a2:	402e      	ands	r6, r5
 800e6a4:	2401      	movs	r4, #1
 800e6a6:	401d      	ands	r5, r3
 800e6a8:	e754      	b.n	800e554 <__aeabi_fadd+0x120>
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e718      	b.n	800e4e0 <__aeabi_fadd+0xac>
 800e6ae:	28ff      	cmp	r0, #255	; 0xff
 800e6b0:	d0df      	beq.n	800e672 <__aeabi_fadd+0x23e>
 800e6b2:	2480      	movs	r4, #128	; 0x80
 800e6b4:	04e4      	lsls	r4, r4, #19
 800e6b6:	427f      	negs	r7, r7
 800e6b8:	4325      	orrs	r5, r4
 800e6ba:	2f1b      	cmp	r7, #27
 800e6bc:	dc4d      	bgt.n	800e75a <__aeabi_fadd+0x326>
 800e6be:	2620      	movs	r6, #32
 800e6c0:	1bf6      	subs	r6, r6, r7
 800e6c2:	002c      	movs	r4, r5
 800e6c4:	40b5      	lsls	r5, r6
 800e6c6:	40fc      	lsrs	r4, r7
 800e6c8:	1e6a      	subs	r2, r5, #1
 800e6ca:	4195      	sbcs	r5, r2
 800e6cc:	4325      	orrs	r5, r4
 800e6ce:	18ed      	adds	r5, r5, r3
 800e6d0:	0004      	movs	r4, r0
 800e6d2:	e706      	b.n	800e4e2 <__aeabi_fadd+0xae>
 800e6d4:	2d00      	cmp	r5, #0
 800e6d6:	d0cc      	beq.n	800e672 <__aeabi_fadd+0x23e>
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d100      	bne.n	800e6de <__aeabi_fadd+0x2aa>
 800e6dc:	e753      	b.n	800e586 <__aeabi_fadd+0x152>
 800e6de:	2180      	movs	r1, #128	; 0x80
 800e6e0:	4660      	mov	r0, ip
 800e6e2:	03c9      	lsls	r1, r1, #15
 800e6e4:	4208      	tst	r0, r1
 800e6e6:	d003      	beq.n	800e6f0 <__aeabi_fadd+0x2bc>
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	4208      	tst	r0, r1
 800e6ec:	d100      	bne.n	800e6f0 <__aeabi_fadd+0x2bc>
 800e6ee:	001d      	movs	r5, r3
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	4011      	ands	r1, r2
 800e6f4:	e747      	b.n	800e586 <__aeabi_fadd+0x152>
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d100      	bne.n	800e6fc <__aeabi_fadd+0x2c8>
 800e6fa:	e6b9      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e6fc:	1aea      	subs	r2, r5, r3
 800e6fe:	0150      	lsls	r0, r2, #5
 800e700:	d525      	bpl.n	800e74e <__aeabi_fadd+0x31a>
 800e702:	2607      	movs	r6, #7
 800e704:	1b5d      	subs	r5, r3, r5
 800e706:	402e      	ands	r6, r5
 800e708:	4689      	mov	r9, r1
 800e70a:	e723      	b.n	800e554 <__aeabi_fadd+0x120>
 800e70c:	24ff      	movs	r4, #255	; 0xff
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d100      	bne.n	800e714 <__aeabi_fadd+0x2e0>
 800e712:	e6ad      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e714:	2280      	movs	r2, #128	; 0x80
 800e716:	4660      	mov	r0, ip
 800e718:	03d2      	lsls	r2, r2, #15
 800e71a:	4210      	tst	r0, r2
 800e71c:	d004      	beq.n	800e728 <__aeabi_fadd+0x2f4>
 800e71e:	4640      	mov	r0, r8
 800e720:	4210      	tst	r0, r2
 800e722:	d101      	bne.n	800e728 <__aeabi_fadd+0x2f4>
 800e724:	001d      	movs	r5, r3
 800e726:	4689      	mov	r9, r1
 800e728:	2201      	movs	r2, #1
 800e72a:	464b      	mov	r3, r9
 800e72c:	24ff      	movs	r4, #255	; 0xff
 800e72e:	401a      	ands	r2, r3
 800e730:	e69e      	b.n	800e470 <__aeabi_fadd+0x3c>
 800e732:	002b      	movs	r3, r5
 800e734:	08dd      	lsrs	r5, r3, #3
 800e736:	000a      	movs	r2, r1
 800e738:	2400      	movs	r4, #0
 800e73a:	e69d      	b.n	800e478 <__aeabi_fadd+0x44>
 800e73c:	1c7a      	adds	r2, r7, #1
 800e73e:	d0c6      	beq.n	800e6ce <__aeabi_fadd+0x29a>
 800e740:	43ff      	mvns	r7, r7
 800e742:	28ff      	cmp	r0, #255	; 0xff
 800e744:	d1b9      	bne.n	800e6ba <__aeabi_fadd+0x286>
 800e746:	001d      	movs	r5, r3
 800e748:	e71d      	b.n	800e586 <__aeabi_fadd+0x152>
 800e74a:	2501      	movs	r5, #1
 800e74c:	e73f      	b.n	800e5ce <__aeabi_fadd+0x19a>
 800e74e:	1e15      	subs	r5, r2, #0
 800e750:	d000      	beq.n	800e754 <__aeabi_fadd+0x320>
 800e752:	e744      	b.n	800e5de <__aeabi_fadd+0x1aa>
 800e754:	2200      	movs	r2, #0
 800e756:	2300      	movs	r3, #0
 800e758:	e691      	b.n	800e47e <__aeabi_fadd+0x4a>
 800e75a:	2501      	movs	r5, #1
 800e75c:	e7b7      	b.n	800e6ce <__aeabi_fadd+0x29a>
 800e75e:	46c0      	nop			; (mov r8, r8)
 800e760:	7dffffff 	.word	0x7dffffff
 800e764:	fbffffff 	.word	0xfbffffff

0800e768 <__aeabi_fdiv>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	4657      	mov	r7, sl
 800e76c:	464e      	mov	r6, r9
 800e76e:	4645      	mov	r5, r8
 800e770:	46de      	mov	lr, fp
 800e772:	0244      	lsls	r4, r0, #9
 800e774:	b5e0      	push	{r5, r6, r7, lr}
 800e776:	0046      	lsls	r6, r0, #1
 800e778:	4688      	mov	r8, r1
 800e77a:	0a64      	lsrs	r4, r4, #9
 800e77c:	0e36      	lsrs	r6, r6, #24
 800e77e:	0fc7      	lsrs	r7, r0, #31
 800e780:	2e00      	cmp	r6, #0
 800e782:	d063      	beq.n	800e84c <__aeabi_fdiv+0xe4>
 800e784:	2eff      	cmp	r6, #255	; 0xff
 800e786:	d024      	beq.n	800e7d2 <__aeabi_fdiv+0x6a>
 800e788:	2380      	movs	r3, #128	; 0x80
 800e78a:	00e4      	lsls	r4, r4, #3
 800e78c:	04db      	lsls	r3, r3, #19
 800e78e:	431c      	orrs	r4, r3
 800e790:	2300      	movs	r3, #0
 800e792:	4699      	mov	r9, r3
 800e794:	469b      	mov	fp, r3
 800e796:	3e7f      	subs	r6, #127	; 0x7f
 800e798:	4643      	mov	r3, r8
 800e79a:	4642      	mov	r2, r8
 800e79c:	025d      	lsls	r5, r3, #9
 800e79e:	0fd2      	lsrs	r2, r2, #31
 800e7a0:	005b      	lsls	r3, r3, #1
 800e7a2:	0a6d      	lsrs	r5, r5, #9
 800e7a4:	0e1b      	lsrs	r3, r3, #24
 800e7a6:	4690      	mov	r8, r2
 800e7a8:	4692      	mov	sl, r2
 800e7aa:	d065      	beq.n	800e878 <__aeabi_fdiv+0x110>
 800e7ac:	2bff      	cmp	r3, #255	; 0xff
 800e7ae:	d055      	beq.n	800e85c <__aeabi_fdiv+0xf4>
 800e7b0:	2280      	movs	r2, #128	; 0x80
 800e7b2:	2100      	movs	r1, #0
 800e7b4:	00ed      	lsls	r5, r5, #3
 800e7b6:	04d2      	lsls	r2, r2, #19
 800e7b8:	3b7f      	subs	r3, #127	; 0x7f
 800e7ba:	4315      	orrs	r5, r2
 800e7bc:	1af6      	subs	r6, r6, r3
 800e7be:	4643      	mov	r3, r8
 800e7c0:	464a      	mov	r2, r9
 800e7c2:	407b      	eors	r3, r7
 800e7c4:	2a0f      	cmp	r2, #15
 800e7c6:	d900      	bls.n	800e7ca <__aeabi_fdiv+0x62>
 800e7c8:	e08d      	b.n	800e8e6 <__aeabi_fdiv+0x17e>
 800e7ca:	486d      	ldr	r0, [pc, #436]	; (800e980 <__aeabi_fdiv+0x218>)
 800e7cc:	0092      	lsls	r2, r2, #2
 800e7ce:	5882      	ldr	r2, [r0, r2]
 800e7d0:	4697      	mov	pc, r2
 800e7d2:	2c00      	cmp	r4, #0
 800e7d4:	d154      	bne.n	800e880 <__aeabi_fdiv+0x118>
 800e7d6:	2308      	movs	r3, #8
 800e7d8:	4699      	mov	r9, r3
 800e7da:	3b06      	subs	r3, #6
 800e7dc:	26ff      	movs	r6, #255	; 0xff
 800e7de:	469b      	mov	fp, r3
 800e7e0:	e7da      	b.n	800e798 <__aeabi_fdiv+0x30>
 800e7e2:	2500      	movs	r5, #0
 800e7e4:	4653      	mov	r3, sl
 800e7e6:	2902      	cmp	r1, #2
 800e7e8:	d01b      	beq.n	800e822 <__aeabi_fdiv+0xba>
 800e7ea:	2903      	cmp	r1, #3
 800e7ec:	d100      	bne.n	800e7f0 <__aeabi_fdiv+0x88>
 800e7ee:	e0bf      	b.n	800e970 <__aeabi_fdiv+0x208>
 800e7f0:	2901      	cmp	r1, #1
 800e7f2:	d028      	beq.n	800e846 <__aeabi_fdiv+0xde>
 800e7f4:	0030      	movs	r0, r6
 800e7f6:	307f      	adds	r0, #127	; 0x7f
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	dd20      	ble.n	800e83e <__aeabi_fdiv+0xd6>
 800e7fc:	076a      	lsls	r2, r5, #29
 800e7fe:	d004      	beq.n	800e80a <__aeabi_fdiv+0xa2>
 800e800:	220f      	movs	r2, #15
 800e802:	402a      	ands	r2, r5
 800e804:	2a04      	cmp	r2, #4
 800e806:	d000      	beq.n	800e80a <__aeabi_fdiv+0xa2>
 800e808:	3504      	adds	r5, #4
 800e80a:	012a      	lsls	r2, r5, #4
 800e80c:	d503      	bpl.n	800e816 <__aeabi_fdiv+0xae>
 800e80e:	0030      	movs	r0, r6
 800e810:	4a5c      	ldr	r2, [pc, #368]	; (800e984 <__aeabi_fdiv+0x21c>)
 800e812:	3080      	adds	r0, #128	; 0x80
 800e814:	4015      	ands	r5, r2
 800e816:	28fe      	cmp	r0, #254	; 0xfe
 800e818:	dc03      	bgt.n	800e822 <__aeabi_fdiv+0xba>
 800e81a:	01ac      	lsls	r4, r5, #6
 800e81c:	0a64      	lsrs	r4, r4, #9
 800e81e:	b2c2      	uxtb	r2, r0
 800e820:	e001      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e822:	22ff      	movs	r2, #255	; 0xff
 800e824:	2400      	movs	r4, #0
 800e826:	0264      	lsls	r4, r4, #9
 800e828:	05d2      	lsls	r2, r2, #23
 800e82a:	0a60      	lsrs	r0, r4, #9
 800e82c:	07db      	lsls	r3, r3, #31
 800e82e:	4310      	orrs	r0, r2
 800e830:	4318      	orrs	r0, r3
 800e832:	bc3c      	pop	{r2, r3, r4, r5}
 800e834:	4690      	mov	r8, r2
 800e836:	4699      	mov	r9, r3
 800e838:	46a2      	mov	sl, r4
 800e83a:	46ab      	mov	fp, r5
 800e83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e83e:	2201      	movs	r2, #1
 800e840:	1a10      	subs	r0, r2, r0
 800e842:	281b      	cmp	r0, #27
 800e844:	dd7c      	ble.n	800e940 <__aeabi_fdiv+0x1d8>
 800e846:	2200      	movs	r2, #0
 800e848:	2400      	movs	r4, #0
 800e84a:	e7ec      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e84c:	2c00      	cmp	r4, #0
 800e84e:	d11d      	bne.n	800e88c <__aeabi_fdiv+0x124>
 800e850:	2304      	movs	r3, #4
 800e852:	4699      	mov	r9, r3
 800e854:	3b03      	subs	r3, #3
 800e856:	2600      	movs	r6, #0
 800e858:	469b      	mov	fp, r3
 800e85a:	e79d      	b.n	800e798 <__aeabi_fdiv+0x30>
 800e85c:	3eff      	subs	r6, #255	; 0xff
 800e85e:	2d00      	cmp	r5, #0
 800e860:	d120      	bne.n	800e8a4 <__aeabi_fdiv+0x13c>
 800e862:	2102      	movs	r1, #2
 800e864:	4643      	mov	r3, r8
 800e866:	464a      	mov	r2, r9
 800e868:	407b      	eors	r3, r7
 800e86a:	430a      	orrs	r2, r1
 800e86c:	2a0f      	cmp	r2, #15
 800e86e:	d8d8      	bhi.n	800e822 <__aeabi_fdiv+0xba>
 800e870:	4845      	ldr	r0, [pc, #276]	; (800e988 <__aeabi_fdiv+0x220>)
 800e872:	0092      	lsls	r2, r2, #2
 800e874:	5882      	ldr	r2, [r0, r2]
 800e876:	4697      	mov	pc, r2
 800e878:	2d00      	cmp	r5, #0
 800e87a:	d119      	bne.n	800e8b0 <__aeabi_fdiv+0x148>
 800e87c:	2101      	movs	r1, #1
 800e87e:	e7f1      	b.n	800e864 <__aeabi_fdiv+0xfc>
 800e880:	230c      	movs	r3, #12
 800e882:	4699      	mov	r9, r3
 800e884:	3b09      	subs	r3, #9
 800e886:	26ff      	movs	r6, #255	; 0xff
 800e888:	469b      	mov	fp, r3
 800e88a:	e785      	b.n	800e798 <__aeabi_fdiv+0x30>
 800e88c:	0020      	movs	r0, r4
 800e88e:	f000 fb73 	bl	800ef78 <__clzsi2>
 800e892:	2676      	movs	r6, #118	; 0x76
 800e894:	1f43      	subs	r3, r0, #5
 800e896:	409c      	lsls	r4, r3
 800e898:	2300      	movs	r3, #0
 800e89a:	4276      	negs	r6, r6
 800e89c:	1a36      	subs	r6, r6, r0
 800e89e:	4699      	mov	r9, r3
 800e8a0:	469b      	mov	fp, r3
 800e8a2:	e779      	b.n	800e798 <__aeabi_fdiv+0x30>
 800e8a4:	464a      	mov	r2, r9
 800e8a6:	2303      	movs	r3, #3
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	4691      	mov	r9, r2
 800e8ac:	2103      	movs	r1, #3
 800e8ae:	e786      	b.n	800e7be <__aeabi_fdiv+0x56>
 800e8b0:	0028      	movs	r0, r5
 800e8b2:	f000 fb61 	bl	800ef78 <__clzsi2>
 800e8b6:	1f43      	subs	r3, r0, #5
 800e8b8:	1836      	adds	r6, r6, r0
 800e8ba:	409d      	lsls	r5, r3
 800e8bc:	3676      	adds	r6, #118	; 0x76
 800e8be:	2100      	movs	r1, #0
 800e8c0:	e77d      	b.n	800e7be <__aeabi_fdiv+0x56>
 800e8c2:	2480      	movs	r4, #128	; 0x80
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	03e4      	lsls	r4, r4, #15
 800e8c8:	22ff      	movs	r2, #255	; 0xff
 800e8ca:	e7ac      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e8cc:	2500      	movs	r5, #0
 800e8ce:	2380      	movs	r3, #128	; 0x80
 800e8d0:	03db      	lsls	r3, r3, #15
 800e8d2:	421c      	tst	r4, r3
 800e8d4:	d028      	beq.n	800e928 <__aeabi_fdiv+0x1c0>
 800e8d6:	421d      	tst	r5, r3
 800e8d8:	d126      	bne.n	800e928 <__aeabi_fdiv+0x1c0>
 800e8da:	432b      	orrs	r3, r5
 800e8dc:	025c      	lsls	r4, r3, #9
 800e8de:	0a64      	lsrs	r4, r4, #9
 800e8e0:	4643      	mov	r3, r8
 800e8e2:	22ff      	movs	r2, #255	; 0xff
 800e8e4:	e79f      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e8e6:	0162      	lsls	r2, r4, #5
 800e8e8:	016c      	lsls	r4, r5, #5
 800e8ea:	42a2      	cmp	r2, r4
 800e8ec:	d224      	bcs.n	800e938 <__aeabi_fdiv+0x1d0>
 800e8ee:	211b      	movs	r1, #27
 800e8f0:	2500      	movs	r5, #0
 800e8f2:	3e01      	subs	r6, #1
 800e8f4:	2701      	movs	r7, #1
 800e8f6:	0010      	movs	r0, r2
 800e8f8:	006d      	lsls	r5, r5, #1
 800e8fa:	0052      	lsls	r2, r2, #1
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	db01      	blt.n	800e904 <__aeabi_fdiv+0x19c>
 800e900:	4294      	cmp	r4, r2
 800e902:	d801      	bhi.n	800e908 <__aeabi_fdiv+0x1a0>
 800e904:	1b12      	subs	r2, r2, r4
 800e906:	433d      	orrs	r5, r7
 800e908:	3901      	subs	r1, #1
 800e90a:	2900      	cmp	r1, #0
 800e90c:	d1f3      	bne.n	800e8f6 <__aeabi_fdiv+0x18e>
 800e90e:	0014      	movs	r4, r2
 800e910:	1e62      	subs	r2, r4, #1
 800e912:	4194      	sbcs	r4, r2
 800e914:	4325      	orrs	r5, r4
 800e916:	e76d      	b.n	800e7f4 <__aeabi_fdiv+0x8c>
 800e918:	46ba      	mov	sl, r7
 800e91a:	4659      	mov	r1, fp
 800e91c:	0025      	movs	r5, r4
 800e91e:	4653      	mov	r3, sl
 800e920:	2902      	cmp	r1, #2
 800e922:	d000      	beq.n	800e926 <__aeabi_fdiv+0x1be>
 800e924:	e761      	b.n	800e7ea <__aeabi_fdiv+0x82>
 800e926:	e77c      	b.n	800e822 <__aeabi_fdiv+0xba>
 800e928:	2380      	movs	r3, #128	; 0x80
 800e92a:	03db      	lsls	r3, r3, #15
 800e92c:	431c      	orrs	r4, r3
 800e92e:	0264      	lsls	r4, r4, #9
 800e930:	0a64      	lsrs	r4, r4, #9
 800e932:	003b      	movs	r3, r7
 800e934:	22ff      	movs	r2, #255	; 0xff
 800e936:	e776      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e938:	1b12      	subs	r2, r2, r4
 800e93a:	211a      	movs	r1, #26
 800e93c:	2501      	movs	r5, #1
 800e93e:	e7d9      	b.n	800e8f4 <__aeabi_fdiv+0x18c>
 800e940:	369e      	adds	r6, #158	; 0x9e
 800e942:	002a      	movs	r2, r5
 800e944:	40b5      	lsls	r5, r6
 800e946:	002c      	movs	r4, r5
 800e948:	40c2      	lsrs	r2, r0
 800e94a:	1e65      	subs	r5, r4, #1
 800e94c:	41ac      	sbcs	r4, r5
 800e94e:	4314      	orrs	r4, r2
 800e950:	0762      	lsls	r2, r4, #29
 800e952:	d004      	beq.n	800e95e <__aeabi_fdiv+0x1f6>
 800e954:	220f      	movs	r2, #15
 800e956:	4022      	ands	r2, r4
 800e958:	2a04      	cmp	r2, #4
 800e95a:	d000      	beq.n	800e95e <__aeabi_fdiv+0x1f6>
 800e95c:	3404      	adds	r4, #4
 800e95e:	0162      	lsls	r2, r4, #5
 800e960:	d403      	bmi.n	800e96a <__aeabi_fdiv+0x202>
 800e962:	01a4      	lsls	r4, r4, #6
 800e964:	0a64      	lsrs	r4, r4, #9
 800e966:	2200      	movs	r2, #0
 800e968:	e75d      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e96a:	2201      	movs	r2, #1
 800e96c:	2400      	movs	r4, #0
 800e96e:	e75a      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e970:	2480      	movs	r4, #128	; 0x80
 800e972:	03e4      	lsls	r4, r4, #15
 800e974:	432c      	orrs	r4, r5
 800e976:	0264      	lsls	r4, r4, #9
 800e978:	0a64      	lsrs	r4, r4, #9
 800e97a:	22ff      	movs	r2, #255	; 0xff
 800e97c:	e753      	b.n	800e826 <__aeabi_fdiv+0xbe>
 800e97e:	46c0      	nop			; (mov r8, r8)
 800e980:	0801bda4 	.word	0x0801bda4
 800e984:	f7ffffff 	.word	0xf7ffffff
 800e988:	0801bde4 	.word	0x0801bde4

0800e98c <__aeabi_fmul>:
 800e98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e98e:	464e      	mov	r6, r9
 800e990:	4657      	mov	r7, sl
 800e992:	4645      	mov	r5, r8
 800e994:	46de      	mov	lr, fp
 800e996:	b5e0      	push	{r5, r6, r7, lr}
 800e998:	0243      	lsls	r3, r0, #9
 800e99a:	0a5b      	lsrs	r3, r3, #9
 800e99c:	0045      	lsls	r5, r0, #1
 800e99e:	b083      	sub	sp, #12
 800e9a0:	1c0f      	adds	r7, r1, #0
 800e9a2:	4699      	mov	r9, r3
 800e9a4:	0e2d      	lsrs	r5, r5, #24
 800e9a6:	0fc6      	lsrs	r6, r0, #31
 800e9a8:	2d00      	cmp	r5, #0
 800e9aa:	d057      	beq.n	800ea5c <__aeabi_fmul+0xd0>
 800e9ac:	2dff      	cmp	r5, #255	; 0xff
 800e9ae:	d024      	beq.n	800e9fa <__aeabi_fmul+0x6e>
 800e9b0:	2080      	movs	r0, #128	; 0x80
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	04c0      	lsls	r0, r0, #19
 800e9b6:	4318      	orrs	r0, r3
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4681      	mov	r9, r0
 800e9bc:	469a      	mov	sl, r3
 800e9be:	469b      	mov	fp, r3
 800e9c0:	3d7f      	subs	r5, #127	; 0x7f
 800e9c2:	027c      	lsls	r4, r7, #9
 800e9c4:	007a      	lsls	r2, r7, #1
 800e9c6:	0ffb      	lsrs	r3, r7, #31
 800e9c8:	0a64      	lsrs	r4, r4, #9
 800e9ca:	0e12      	lsrs	r2, r2, #24
 800e9cc:	4698      	mov	r8, r3
 800e9ce:	d023      	beq.n	800ea18 <__aeabi_fmul+0x8c>
 800e9d0:	2aff      	cmp	r2, #255	; 0xff
 800e9d2:	d04b      	beq.n	800ea6c <__aeabi_fmul+0xe0>
 800e9d4:	00e3      	lsls	r3, r4, #3
 800e9d6:	2480      	movs	r4, #128	; 0x80
 800e9d8:	2000      	movs	r0, #0
 800e9da:	04e4      	lsls	r4, r4, #19
 800e9dc:	3a7f      	subs	r2, #127	; 0x7f
 800e9de:	431c      	orrs	r4, r3
 800e9e0:	18ad      	adds	r5, r5, r2
 800e9e2:	1c6b      	adds	r3, r5, #1
 800e9e4:	4647      	mov	r7, r8
 800e9e6:	9301      	str	r3, [sp, #4]
 800e9e8:	4653      	mov	r3, sl
 800e9ea:	4077      	eors	r7, r6
 800e9ec:	003a      	movs	r2, r7
 800e9ee:	2b0f      	cmp	r3, #15
 800e9f0:	d848      	bhi.n	800ea84 <__aeabi_fmul+0xf8>
 800e9f2:	497d      	ldr	r1, [pc, #500]	; (800ebe8 <__aeabi_fmul+0x25c>)
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	58cb      	ldr	r3, [r1, r3]
 800e9f8:	469f      	mov	pc, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d000      	beq.n	800ea00 <__aeabi_fmul+0x74>
 800e9fe:	e085      	b.n	800eb0c <__aeabi_fmul+0x180>
 800ea00:	3308      	adds	r3, #8
 800ea02:	469a      	mov	sl, r3
 800ea04:	3b06      	subs	r3, #6
 800ea06:	469b      	mov	fp, r3
 800ea08:	027c      	lsls	r4, r7, #9
 800ea0a:	007a      	lsls	r2, r7, #1
 800ea0c:	0ffb      	lsrs	r3, r7, #31
 800ea0e:	25ff      	movs	r5, #255	; 0xff
 800ea10:	0a64      	lsrs	r4, r4, #9
 800ea12:	0e12      	lsrs	r2, r2, #24
 800ea14:	4698      	mov	r8, r3
 800ea16:	d1db      	bne.n	800e9d0 <__aeabi_fmul+0x44>
 800ea18:	2c00      	cmp	r4, #0
 800ea1a:	d000      	beq.n	800ea1e <__aeabi_fmul+0x92>
 800ea1c:	e090      	b.n	800eb40 <__aeabi_fmul+0x1b4>
 800ea1e:	4652      	mov	r2, sl
 800ea20:	2301      	movs	r3, #1
 800ea22:	431a      	orrs	r2, r3
 800ea24:	4692      	mov	sl, r2
 800ea26:	2001      	movs	r0, #1
 800ea28:	e7db      	b.n	800e9e2 <__aeabi_fmul+0x56>
 800ea2a:	464c      	mov	r4, r9
 800ea2c:	4658      	mov	r0, fp
 800ea2e:	0017      	movs	r7, r2
 800ea30:	2802      	cmp	r0, #2
 800ea32:	d024      	beq.n	800ea7e <__aeabi_fmul+0xf2>
 800ea34:	2803      	cmp	r0, #3
 800ea36:	d100      	bne.n	800ea3a <__aeabi_fmul+0xae>
 800ea38:	e0cf      	b.n	800ebda <__aeabi_fmul+0x24e>
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	2801      	cmp	r0, #1
 800ea40:	d14d      	bne.n	800eade <__aeabi_fmul+0x152>
 800ea42:	0258      	lsls	r0, r3, #9
 800ea44:	05d2      	lsls	r2, r2, #23
 800ea46:	0a40      	lsrs	r0, r0, #9
 800ea48:	07ff      	lsls	r7, r7, #31
 800ea4a:	4310      	orrs	r0, r2
 800ea4c:	4338      	orrs	r0, r7
 800ea4e:	b003      	add	sp, #12
 800ea50:	bc3c      	pop	{r2, r3, r4, r5}
 800ea52:	4690      	mov	r8, r2
 800ea54:	4699      	mov	r9, r3
 800ea56:	46a2      	mov	sl, r4
 800ea58:	46ab      	mov	fp, r5
 800ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d15b      	bne.n	800eb18 <__aeabi_fmul+0x18c>
 800ea60:	2304      	movs	r3, #4
 800ea62:	469a      	mov	sl, r3
 800ea64:	3b03      	subs	r3, #3
 800ea66:	2500      	movs	r5, #0
 800ea68:	469b      	mov	fp, r3
 800ea6a:	e7aa      	b.n	800e9c2 <__aeabi_fmul+0x36>
 800ea6c:	35ff      	adds	r5, #255	; 0xff
 800ea6e:	2c00      	cmp	r4, #0
 800ea70:	d160      	bne.n	800eb34 <__aeabi_fmul+0x1a8>
 800ea72:	4652      	mov	r2, sl
 800ea74:	2302      	movs	r3, #2
 800ea76:	431a      	orrs	r2, r3
 800ea78:	4692      	mov	sl, r2
 800ea7a:	2002      	movs	r0, #2
 800ea7c:	e7b1      	b.n	800e9e2 <__aeabi_fmul+0x56>
 800ea7e:	22ff      	movs	r2, #255	; 0xff
 800ea80:	2300      	movs	r3, #0
 800ea82:	e7de      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ea84:	464b      	mov	r3, r9
 800ea86:	0c1b      	lsrs	r3, r3, #16
 800ea88:	469c      	mov	ip, r3
 800ea8a:	464b      	mov	r3, r9
 800ea8c:	0426      	lsls	r6, r4, #16
 800ea8e:	0c36      	lsrs	r6, r6, #16
 800ea90:	0418      	lsls	r0, r3, #16
 800ea92:	4661      	mov	r1, ip
 800ea94:	0033      	movs	r3, r6
 800ea96:	0c22      	lsrs	r2, r4, #16
 800ea98:	4664      	mov	r4, ip
 800ea9a:	0c00      	lsrs	r0, r0, #16
 800ea9c:	4343      	muls	r3, r0
 800ea9e:	434e      	muls	r6, r1
 800eaa0:	4350      	muls	r0, r2
 800eaa2:	4354      	muls	r4, r2
 800eaa4:	1980      	adds	r0, r0, r6
 800eaa6:	0c1a      	lsrs	r2, r3, #16
 800eaa8:	1812      	adds	r2, r2, r0
 800eaaa:	4296      	cmp	r6, r2
 800eaac:	d903      	bls.n	800eab6 <__aeabi_fmul+0x12a>
 800eaae:	2180      	movs	r1, #128	; 0x80
 800eab0:	0249      	lsls	r1, r1, #9
 800eab2:	468c      	mov	ip, r1
 800eab4:	4464      	add	r4, ip
 800eab6:	041b      	lsls	r3, r3, #16
 800eab8:	0c1b      	lsrs	r3, r3, #16
 800eaba:	0410      	lsls	r0, r2, #16
 800eabc:	18c0      	adds	r0, r0, r3
 800eabe:	0183      	lsls	r3, r0, #6
 800eac0:	1e5e      	subs	r6, r3, #1
 800eac2:	41b3      	sbcs	r3, r6
 800eac4:	0e80      	lsrs	r0, r0, #26
 800eac6:	4318      	orrs	r0, r3
 800eac8:	0c13      	lsrs	r3, r2, #16
 800eaca:	191b      	adds	r3, r3, r4
 800eacc:	019b      	lsls	r3, r3, #6
 800eace:	4303      	orrs	r3, r0
 800ead0:	001c      	movs	r4, r3
 800ead2:	0123      	lsls	r3, r4, #4
 800ead4:	d579      	bpl.n	800ebca <__aeabi_fmul+0x23e>
 800ead6:	2301      	movs	r3, #1
 800ead8:	0862      	lsrs	r2, r4, #1
 800eada:	401c      	ands	r4, r3
 800eadc:	4314      	orrs	r4, r2
 800eade:	9a01      	ldr	r2, [sp, #4]
 800eae0:	327f      	adds	r2, #127	; 0x7f
 800eae2:	2a00      	cmp	r2, #0
 800eae4:	dd4d      	ble.n	800eb82 <__aeabi_fmul+0x1f6>
 800eae6:	0763      	lsls	r3, r4, #29
 800eae8:	d004      	beq.n	800eaf4 <__aeabi_fmul+0x168>
 800eaea:	230f      	movs	r3, #15
 800eaec:	4023      	ands	r3, r4
 800eaee:	2b04      	cmp	r3, #4
 800eaf0:	d000      	beq.n	800eaf4 <__aeabi_fmul+0x168>
 800eaf2:	3404      	adds	r4, #4
 800eaf4:	0123      	lsls	r3, r4, #4
 800eaf6:	d503      	bpl.n	800eb00 <__aeabi_fmul+0x174>
 800eaf8:	4b3c      	ldr	r3, [pc, #240]	; (800ebec <__aeabi_fmul+0x260>)
 800eafa:	9a01      	ldr	r2, [sp, #4]
 800eafc:	401c      	ands	r4, r3
 800eafe:	3280      	adds	r2, #128	; 0x80
 800eb00:	2afe      	cmp	r2, #254	; 0xfe
 800eb02:	dcbc      	bgt.n	800ea7e <__aeabi_fmul+0xf2>
 800eb04:	01a3      	lsls	r3, r4, #6
 800eb06:	0a5b      	lsrs	r3, r3, #9
 800eb08:	b2d2      	uxtb	r2, r2
 800eb0a:	e79a      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800eb0c:	230c      	movs	r3, #12
 800eb0e:	469a      	mov	sl, r3
 800eb10:	3b09      	subs	r3, #9
 800eb12:	25ff      	movs	r5, #255	; 0xff
 800eb14:	469b      	mov	fp, r3
 800eb16:	e754      	b.n	800e9c2 <__aeabi_fmul+0x36>
 800eb18:	0018      	movs	r0, r3
 800eb1a:	f000 fa2d 	bl	800ef78 <__clzsi2>
 800eb1e:	464a      	mov	r2, r9
 800eb20:	1f43      	subs	r3, r0, #5
 800eb22:	2576      	movs	r5, #118	; 0x76
 800eb24:	409a      	lsls	r2, r3
 800eb26:	2300      	movs	r3, #0
 800eb28:	426d      	negs	r5, r5
 800eb2a:	4691      	mov	r9, r2
 800eb2c:	1a2d      	subs	r5, r5, r0
 800eb2e:	469a      	mov	sl, r3
 800eb30:	469b      	mov	fp, r3
 800eb32:	e746      	b.n	800e9c2 <__aeabi_fmul+0x36>
 800eb34:	4652      	mov	r2, sl
 800eb36:	2303      	movs	r3, #3
 800eb38:	431a      	orrs	r2, r3
 800eb3a:	4692      	mov	sl, r2
 800eb3c:	2003      	movs	r0, #3
 800eb3e:	e750      	b.n	800e9e2 <__aeabi_fmul+0x56>
 800eb40:	0020      	movs	r0, r4
 800eb42:	f000 fa19 	bl	800ef78 <__clzsi2>
 800eb46:	1f43      	subs	r3, r0, #5
 800eb48:	1a2d      	subs	r5, r5, r0
 800eb4a:	409c      	lsls	r4, r3
 800eb4c:	3d76      	subs	r5, #118	; 0x76
 800eb4e:	2000      	movs	r0, #0
 800eb50:	e747      	b.n	800e9e2 <__aeabi_fmul+0x56>
 800eb52:	2380      	movs	r3, #128	; 0x80
 800eb54:	2700      	movs	r7, #0
 800eb56:	03db      	lsls	r3, r3, #15
 800eb58:	22ff      	movs	r2, #255	; 0xff
 800eb5a:	e772      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800eb5c:	4642      	mov	r2, r8
 800eb5e:	e766      	b.n	800ea2e <__aeabi_fmul+0xa2>
 800eb60:	464c      	mov	r4, r9
 800eb62:	0032      	movs	r2, r6
 800eb64:	4658      	mov	r0, fp
 800eb66:	e762      	b.n	800ea2e <__aeabi_fmul+0xa2>
 800eb68:	2380      	movs	r3, #128	; 0x80
 800eb6a:	464a      	mov	r2, r9
 800eb6c:	03db      	lsls	r3, r3, #15
 800eb6e:	421a      	tst	r2, r3
 800eb70:	d022      	beq.n	800ebb8 <__aeabi_fmul+0x22c>
 800eb72:	421c      	tst	r4, r3
 800eb74:	d120      	bne.n	800ebb8 <__aeabi_fmul+0x22c>
 800eb76:	4323      	orrs	r3, r4
 800eb78:	025b      	lsls	r3, r3, #9
 800eb7a:	0a5b      	lsrs	r3, r3, #9
 800eb7c:	4647      	mov	r7, r8
 800eb7e:	22ff      	movs	r2, #255	; 0xff
 800eb80:	e75f      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800eb82:	2301      	movs	r3, #1
 800eb84:	1a9a      	subs	r2, r3, r2
 800eb86:	2a1b      	cmp	r2, #27
 800eb88:	dc21      	bgt.n	800ebce <__aeabi_fmul+0x242>
 800eb8a:	0023      	movs	r3, r4
 800eb8c:	9901      	ldr	r1, [sp, #4]
 800eb8e:	40d3      	lsrs	r3, r2
 800eb90:	319e      	adds	r1, #158	; 0x9e
 800eb92:	408c      	lsls	r4, r1
 800eb94:	001a      	movs	r2, r3
 800eb96:	0023      	movs	r3, r4
 800eb98:	1e5c      	subs	r4, r3, #1
 800eb9a:	41a3      	sbcs	r3, r4
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	075a      	lsls	r2, r3, #29
 800eba0:	d004      	beq.n	800ebac <__aeabi_fmul+0x220>
 800eba2:	220f      	movs	r2, #15
 800eba4:	401a      	ands	r2, r3
 800eba6:	2a04      	cmp	r2, #4
 800eba8:	d000      	beq.n	800ebac <__aeabi_fmul+0x220>
 800ebaa:	3304      	adds	r3, #4
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	d411      	bmi.n	800ebd4 <__aeabi_fmul+0x248>
 800ebb0:	019b      	lsls	r3, r3, #6
 800ebb2:	0a5b      	lsrs	r3, r3, #9
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	e744      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	464a      	mov	r2, r9
 800ebbc:	03db      	lsls	r3, r3, #15
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	025b      	lsls	r3, r3, #9
 800ebc2:	0a5b      	lsrs	r3, r3, #9
 800ebc4:	0037      	movs	r7, r6
 800ebc6:	22ff      	movs	r2, #255	; 0xff
 800ebc8:	e73b      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ebca:	9501      	str	r5, [sp, #4]
 800ebcc:	e787      	b.n	800eade <__aeabi_fmul+0x152>
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e736      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	e733      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ebda:	2380      	movs	r3, #128	; 0x80
 800ebdc:	03db      	lsls	r3, r3, #15
 800ebde:	4323      	orrs	r3, r4
 800ebe0:	025b      	lsls	r3, r3, #9
 800ebe2:	0a5b      	lsrs	r3, r3, #9
 800ebe4:	22ff      	movs	r2, #255	; 0xff
 800ebe6:	e72c      	b.n	800ea42 <__aeabi_fmul+0xb6>
 800ebe8:	0801be24 	.word	0x0801be24
 800ebec:	f7ffffff 	.word	0xf7ffffff

0800ebf0 <__aeabi_fsub>:
 800ebf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebf2:	4647      	mov	r7, r8
 800ebf4:	46ce      	mov	lr, r9
 800ebf6:	0044      	lsls	r4, r0, #1
 800ebf8:	0fc2      	lsrs	r2, r0, #31
 800ebfa:	b580      	push	{r7, lr}
 800ebfc:	0247      	lsls	r7, r0, #9
 800ebfe:	0248      	lsls	r0, r1, #9
 800ec00:	0a40      	lsrs	r0, r0, #9
 800ec02:	4684      	mov	ip, r0
 800ec04:	4666      	mov	r6, ip
 800ec06:	0048      	lsls	r0, r1, #1
 800ec08:	0a7f      	lsrs	r7, r7, #9
 800ec0a:	0e24      	lsrs	r4, r4, #24
 800ec0c:	00f6      	lsls	r6, r6, #3
 800ec0e:	0025      	movs	r5, r4
 800ec10:	4690      	mov	r8, r2
 800ec12:	00fb      	lsls	r3, r7, #3
 800ec14:	0e00      	lsrs	r0, r0, #24
 800ec16:	0fc9      	lsrs	r1, r1, #31
 800ec18:	46b1      	mov	r9, r6
 800ec1a:	28ff      	cmp	r0, #255	; 0xff
 800ec1c:	d100      	bne.n	800ec20 <__aeabi_fsub+0x30>
 800ec1e:	e085      	b.n	800ed2c <__aeabi_fsub+0x13c>
 800ec20:	2601      	movs	r6, #1
 800ec22:	4071      	eors	r1, r6
 800ec24:	1a26      	subs	r6, r4, r0
 800ec26:	4291      	cmp	r1, r2
 800ec28:	d057      	beq.n	800ecda <__aeabi_fsub+0xea>
 800ec2a:	2e00      	cmp	r6, #0
 800ec2c:	dd43      	ble.n	800ecb6 <__aeabi_fsub+0xc6>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d000      	beq.n	800ec34 <__aeabi_fsub+0x44>
 800ec32:	e07f      	b.n	800ed34 <__aeabi_fsub+0x144>
 800ec34:	4649      	mov	r1, r9
 800ec36:	2900      	cmp	r1, #0
 800ec38:	d100      	bne.n	800ec3c <__aeabi_fsub+0x4c>
 800ec3a:	e0aa      	b.n	800ed92 <__aeabi_fsub+0x1a2>
 800ec3c:	3e01      	subs	r6, #1
 800ec3e:	2e00      	cmp	r6, #0
 800ec40:	d000      	beq.n	800ec44 <__aeabi_fsub+0x54>
 800ec42:	e0f7      	b.n	800ee34 <__aeabi_fsub+0x244>
 800ec44:	1a5b      	subs	r3, r3, r1
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	d400      	bmi.n	800ec4c <__aeabi_fsub+0x5c>
 800ec4a:	e08b      	b.n	800ed64 <__aeabi_fsub+0x174>
 800ec4c:	019b      	lsls	r3, r3, #6
 800ec4e:	099c      	lsrs	r4, r3, #6
 800ec50:	0020      	movs	r0, r4
 800ec52:	f000 f991 	bl	800ef78 <__clzsi2>
 800ec56:	3805      	subs	r0, #5
 800ec58:	4084      	lsls	r4, r0
 800ec5a:	4285      	cmp	r5, r0
 800ec5c:	dd00      	ble.n	800ec60 <__aeabi_fsub+0x70>
 800ec5e:	e0d3      	b.n	800ee08 <__aeabi_fsub+0x218>
 800ec60:	1b45      	subs	r5, r0, r5
 800ec62:	0023      	movs	r3, r4
 800ec64:	2020      	movs	r0, #32
 800ec66:	3501      	adds	r5, #1
 800ec68:	40eb      	lsrs	r3, r5
 800ec6a:	1b45      	subs	r5, r0, r5
 800ec6c:	40ac      	lsls	r4, r5
 800ec6e:	1e62      	subs	r2, r4, #1
 800ec70:	4194      	sbcs	r4, r2
 800ec72:	4323      	orrs	r3, r4
 800ec74:	2407      	movs	r4, #7
 800ec76:	2500      	movs	r5, #0
 800ec78:	401c      	ands	r4, r3
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	4641      	mov	r1, r8
 800ec7e:	400a      	ands	r2, r1
 800ec80:	2c00      	cmp	r4, #0
 800ec82:	d004      	beq.n	800ec8e <__aeabi_fsub+0x9e>
 800ec84:	210f      	movs	r1, #15
 800ec86:	4019      	ands	r1, r3
 800ec88:	2904      	cmp	r1, #4
 800ec8a:	d000      	beq.n	800ec8e <__aeabi_fsub+0x9e>
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	0159      	lsls	r1, r3, #5
 800ec90:	d400      	bmi.n	800ec94 <__aeabi_fsub+0xa4>
 800ec92:	e080      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ec94:	3501      	adds	r5, #1
 800ec96:	b2ec      	uxtb	r4, r5
 800ec98:	2dff      	cmp	r5, #255	; 0xff
 800ec9a:	d000      	beq.n	800ec9e <__aeabi_fsub+0xae>
 800ec9c:	e0a3      	b.n	800ede6 <__aeabi_fsub+0x1f6>
 800ec9e:	24ff      	movs	r4, #255	; 0xff
 800eca0:	2300      	movs	r3, #0
 800eca2:	025b      	lsls	r3, r3, #9
 800eca4:	05e4      	lsls	r4, r4, #23
 800eca6:	0a58      	lsrs	r0, r3, #9
 800eca8:	07d2      	lsls	r2, r2, #31
 800ecaa:	4320      	orrs	r0, r4
 800ecac:	4310      	orrs	r0, r2
 800ecae:	bc0c      	pop	{r2, r3}
 800ecb0:	4690      	mov	r8, r2
 800ecb2:	4699      	mov	r9, r3
 800ecb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb6:	2e00      	cmp	r6, #0
 800ecb8:	d174      	bne.n	800eda4 <__aeabi_fsub+0x1b4>
 800ecba:	1c60      	adds	r0, r4, #1
 800ecbc:	b2c0      	uxtb	r0, r0
 800ecbe:	2801      	cmp	r0, #1
 800ecc0:	dc00      	bgt.n	800ecc4 <__aeabi_fsub+0xd4>
 800ecc2:	e0a7      	b.n	800ee14 <__aeabi_fsub+0x224>
 800ecc4:	464a      	mov	r2, r9
 800ecc6:	1a9c      	subs	r4, r3, r2
 800ecc8:	0162      	lsls	r2, r4, #5
 800ecca:	d500      	bpl.n	800ecce <__aeabi_fsub+0xde>
 800eccc:	e0b6      	b.n	800ee3c <__aeabi_fsub+0x24c>
 800ecce:	2c00      	cmp	r4, #0
 800ecd0:	d1be      	bne.n	800ec50 <__aeabi_fsub+0x60>
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	2400      	movs	r4, #0
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	e7e3      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800ecda:	2e00      	cmp	r6, #0
 800ecdc:	dc00      	bgt.n	800ece0 <__aeabi_fsub+0xf0>
 800ecde:	e085      	b.n	800edec <__aeabi_fsub+0x1fc>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d046      	beq.n	800ed72 <__aeabi_fsub+0x182>
 800ece4:	2cff      	cmp	r4, #255	; 0xff
 800ece6:	d049      	beq.n	800ed7c <__aeabi_fsub+0x18c>
 800ece8:	2280      	movs	r2, #128	; 0x80
 800ecea:	4648      	mov	r0, r9
 800ecec:	04d2      	lsls	r2, r2, #19
 800ecee:	4310      	orrs	r0, r2
 800ecf0:	4681      	mov	r9, r0
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	2e1b      	cmp	r6, #27
 800ecf6:	dc09      	bgt.n	800ed0c <__aeabi_fsub+0x11c>
 800ecf8:	2020      	movs	r0, #32
 800ecfa:	464c      	mov	r4, r9
 800ecfc:	1b80      	subs	r0, r0, r6
 800ecfe:	4084      	lsls	r4, r0
 800ed00:	464a      	mov	r2, r9
 800ed02:	0020      	movs	r0, r4
 800ed04:	40f2      	lsrs	r2, r6
 800ed06:	1e44      	subs	r4, r0, #1
 800ed08:	41a0      	sbcs	r0, r4
 800ed0a:	4302      	orrs	r2, r0
 800ed0c:	189b      	adds	r3, r3, r2
 800ed0e:	015a      	lsls	r2, r3, #5
 800ed10:	d528      	bpl.n	800ed64 <__aeabi_fsub+0x174>
 800ed12:	3501      	adds	r5, #1
 800ed14:	2dff      	cmp	r5, #255	; 0xff
 800ed16:	d100      	bne.n	800ed1a <__aeabi_fsub+0x12a>
 800ed18:	e0a8      	b.n	800ee6c <__aeabi_fsub+0x27c>
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	2407      	movs	r4, #7
 800ed1e:	4994      	ldr	r1, [pc, #592]	; (800ef70 <__aeabi_fsub+0x380>)
 800ed20:	401a      	ands	r2, r3
 800ed22:	085b      	lsrs	r3, r3, #1
 800ed24:	400b      	ands	r3, r1
 800ed26:	4313      	orrs	r3, r2
 800ed28:	401c      	ands	r4, r3
 800ed2a:	e7a6      	b.n	800ec7a <__aeabi_fsub+0x8a>
 800ed2c:	2e00      	cmp	r6, #0
 800ed2e:	d000      	beq.n	800ed32 <__aeabi_fsub+0x142>
 800ed30:	e778      	b.n	800ec24 <__aeabi_fsub+0x34>
 800ed32:	e775      	b.n	800ec20 <__aeabi_fsub+0x30>
 800ed34:	2cff      	cmp	r4, #255	; 0xff
 800ed36:	d054      	beq.n	800ede2 <__aeabi_fsub+0x1f2>
 800ed38:	2280      	movs	r2, #128	; 0x80
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	04d2      	lsls	r2, r2, #19
 800ed3e:	4311      	orrs	r1, r2
 800ed40:	4689      	mov	r9, r1
 800ed42:	2201      	movs	r2, #1
 800ed44:	2e1b      	cmp	r6, #27
 800ed46:	dc09      	bgt.n	800ed5c <__aeabi_fsub+0x16c>
 800ed48:	2120      	movs	r1, #32
 800ed4a:	4648      	mov	r0, r9
 800ed4c:	1b89      	subs	r1, r1, r6
 800ed4e:	4088      	lsls	r0, r1
 800ed50:	464a      	mov	r2, r9
 800ed52:	0001      	movs	r1, r0
 800ed54:	40f2      	lsrs	r2, r6
 800ed56:	1e48      	subs	r0, r1, #1
 800ed58:	4181      	sbcs	r1, r0
 800ed5a:	430a      	orrs	r2, r1
 800ed5c:	1a9b      	subs	r3, r3, r2
 800ed5e:	015a      	lsls	r2, r3, #5
 800ed60:	d500      	bpl.n	800ed64 <__aeabi_fsub+0x174>
 800ed62:	e773      	b.n	800ec4c <__aeabi_fsub+0x5c>
 800ed64:	2201      	movs	r2, #1
 800ed66:	4641      	mov	r1, r8
 800ed68:	400a      	ands	r2, r1
 800ed6a:	0759      	lsls	r1, r3, #29
 800ed6c:	d000      	beq.n	800ed70 <__aeabi_fsub+0x180>
 800ed6e:	e789      	b.n	800ec84 <__aeabi_fsub+0x94>
 800ed70:	e011      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ed72:	4648      	mov	r0, r9
 800ed74:	2800      	cmp	r0, #0
 800ed76:	d158      	bne.n	800ee2a <__aeabi_fsub+0x23a>
 800ed78:	2cff      	cmp	r4, #255	; 0xff
 800ed7a:	d10c      	bne.n	800ed96 <__aeabi_fsub+0x1a6>
 800ed7c:	08db      	lsrs	r3, r3, #3
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d100      	bne.n	800ed84 <__aeabi_fsub+0x194>
 800ed82:	e78c      	b.n	800ec9e <__aeabi_fsub+0xae>
 800ed84:	2080      	movs	r0, #128	; 0x80
 800ed86:	03c0      	lsls	r0, r0, #15
 800ed88:	4303      	orrs	r3, r0
 800ed8a:	025b      	lsls	r3, r3, #9
 800ed8c:	0a5b      	lsrs	r3, r3, #9
 800ed8e:	24ff      	movs	r4, #255	; 0xff
 800ed90:	e787      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800ed92:	2cff      	cmp	r4, #255	; 0xff
 800ed94:	d025      	beq.n	800ede2 <__aeabi_fsub+0x1f2>
 800ed96:	08db      	lsrs	r3, r3, #3
 800ed98:	2dff      	cmp	r5, #255	; 0xff
 800ed9a:	d0f0      	beq.n	800ed7e <__aeabi_fsub+0x18e>
 800ed9c:	025b      	lsls	r3, r3, #9
 800ed9e:	0a5b      	lsrs	r3, r3, #9
 800eda0:	b2ec      	uxtb	r4, r5
 800eda2:	e77e      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800eda4:	2c00      	cmp	r4, #0
 800eda6:	d04d      	beq.n	800ee44 <__aeabi_fsub+0x254>
 800eda8:	28ff      	cmp	r0, #255	; 0xff
 800edaa:	d018      	beq.n	800edde <__aeabi_fsub+0x1ee>
 800edac:	2480      	movs	r4, #128	; 0x80
 800edae:	04e4      	lsls	r4, r4, #19
 800edb0:	4272      	negs	r2, r6
 800edb2:	4323      	orrs	r3, r4
 800edb4:	2a1b      	cmp	r2, #27
 800edb6:	dd00      	ble.n	800edba <__aeabi_fsub+0x1ca>
 800edb8:	e0c4      	b.n	800ef44 <__aeabi_fsub+0x354>
 800edba:	001c      	movs	r4, r3
 800edbc:	2520      	movs	r5, #32
 800edbe:	40d4      	lsrs	r4, r2
 800edc0:	1aaa      	subs	r2, r5, r2
 800edc2:	4093      	lsls	r3, r2
 800edc4:	1e5a      	subs	r2, r3, #1
 800edc6:	4193      	sbcs	r3, r2
 800edc8:	4323      	orrs	r3, r4
 800edca:	464a      	mov	r2, r9
 800edcc:	0005      	movs	r5, r0
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	4688      	mov	r8, r1
 800edd2:	e738      	b.n	800ec46 <__aeabi_fsub+0x56>
 800edd4:	1c72      	adds	r2, r6, #1
 800edd6:	d0f8      	beq.n	800edca <__aeabi_fsub+0x1da>
 800edd8:	43f2      	mvns	r2, r6
 800edda:	28ff      	cmp	r0, #255	; 0xff
 800eddc:	d1ea      	bne.n	800edb4 <__aeabi_fsub+0x1c4>
 800edde:	000a      	movs	r2, r1
 800ede0:	464b      	mov	r3, r9
 800ede2:	25ff      	movs	r5, #255	; 0xff
 800ede4:	e7d7      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ede6:	019b      	lsls	r3, r3, #6
 800ede8:	0a5b      	lsrs	r3, r3, #9
 800edea:	e75a      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800edec:	2e00      	cmp	r6, #0
 800edee:	d141      	bne.n	800ee74 <__aeabi_fsub+0x284>
 800edf0:	1c65      	adds	r5, r4, #1
 800edf2:	b2e9      	uxtb	r1, r5
 800edf4:	2901      	cmp	r1, #1
 800edf6:	dd45      	ble.n	800ee84 <__aeabi_fsub+0x294>
 800edf8:	2dff      	cmp	r5, #255	; 0xff
 800edfa:	d100      	bne.n	800edfe <__aeabi_fsub+0x20e>
 800edfc:	e74f      	b.n	800ec9e <__aeabi_fsub+0xae>
 800edfe:	2407      	movs	r4, #7
 800ee00:	444b      	add	r3, r9
 800ee02:	085b      	lsrs	r3, r3, #1
 800ee04:	401c      	ands	r4, r3
 800ee06:	e738      	b.n	800ec7a <__aeabi_fsub+0x8a>
 800ee08:	2207      	movs	r2, #7
 800ee0a:	4b5a      	ldr	r3, [pc, #360]	; (800ef74 <__aeabi_fsub+0x384>)
 800ee0c:	1a2d      	subs	r5, r5, r0
 800ee0e:	4023      	ands	r3, r4
 800ee10:	4014      	ands	r4, r2
 800ee12:	e732      	b.n	800ec7a <__aeabi_fsub+0x8a>
 800ee14:	2c00      	cmp	r4, #0
 800ee16:	d11d      	bne.n	800ee54 <__aeabi_fsub+0x264>
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d17a      	bne.n	800ef12 <__aeabi_fsub+0x322>
 800ee1c:	464b      	mov	r3, r9
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d100      	bne.n	800ee24 <__aeabi_fsub+0x234>
 800ee22:	e091      	b.n	800ef48 <__aeabi_fsub+0x358>
 800ee24:	000a      	movs	r2, r1
 800ee26:	2500      	movs	r5, #0
 800ee28:	e7b5      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ee2a:	3e01      	subs	r6, #1
 800ee2c:	2e00      	cmp	r6, #0
 800ee2e:	d119      	bne.n	800ee64 <__aeabi_fsub+0x274>
 800ee30:	444b      	add	r3, r9
 800ee32:	e76c      	b.n	800ed0e <__aeabi_fsub+0x11e>
 800ee34:	2cff      	cmp	r4, #255	; 0xff
 800ee36:	d184      	bne.n	800ed42 <__aeabi_fsub+0x152>
 800ee38:	25ff      	movs	r5, #255	; 0xff
 800ee3a:	e7ac      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ee3c:	464a      	mov	r2, r9
 800ee3e:	4688      	mov	r8, r1
 800ee40:	1ad4      	subs	r4, r2, r3
 800ee42:	e705      	b.n	800ec50 <__aeabi_fsub+0x60>
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1c5      	bne.n	800edd4 <__aeabi_fsub+0x1e4>
 800ee48:	000a      	movs	r2, r1
 800ee4a:	28ff      	cmp	r0, #255	; 0xff
 800ee4c:	d0c8      	beq.n	800ede0 <__aeabi_fsub+0x1f0>
 800ee4e:	0005      	movs	r5, r0
 800ee50:	464b      	mov	r3, r9
 800ee52:	e7a0      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d149      	bne.n	800eeec <__aeabi_fsub+0x2fc>
 800ee58:	464b      	mov	r3, r9
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d077      	beq.n	800ef4e <__aeabi_fsub+0x35e>
 800ee5e:	000a      	movs	r2, r1
 800ee60:	25ff      	movs	r5, #255	; 0xff
 800ee62:	e798      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ee64:	2cff      	cmp	r4, #255	; 0xff
 800ee66:	d000      	beq.n	800ee6a <__aeabi_fsub+0x27a>
 800ee68:	e743      	b.n	800ecf2 <__aeabi_fsub+0x102>
 800ee6a:	e787      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800ee6c:	000a      	movs	r2, r1
 800ee6e:	24ff      	movs	r4, #255	; 0xff
 800ee70:	2300      	movs	r3, #0
 800ee72:	e716      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800ee74:	2c00      	cmp	r4, #0
 800ee76:	d115      	bne.n	800eea4 <__aeabi_fsub+0x2b4>
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d157      	bne.n	800ef2c <__aeabi_fsub+0x33c>
 800ee7c:	28ff      	cmp	r0, #255	; 0xff
 800ee7e:	d1e6      	bne.n	800ee4e <__aeabi_fsub+0x25e>
 800ee80:	464b      	mov	r3, r9
 800ee82:	e77b      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800ee84:	2c00      	cmp	r4, #0
 800ee86:	d120      	bne.n	800eeca <__aeabi_fsub+0x2da>
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d057      	beq.n	800ef3c <__aeabi_fsub+0x34c>
 800ee8c:	4649      	mov	r1, r9
 800ee8e:	2900      	cmp	r1, #0
 800ee90:	d053      	beq.n	800ef3a <__aeabi_fsub+0x34a>
 800ee92:	444b      	add	r3, r9
 800ee94:	015a      	lsls	r2, r3, #5
 800ee96:	d568      	bpl.n	800ef6a <__aeabi_fsub+0x37a>
 800ee98:	2407      	movs	r4, #7
 800ee9a:	4a36      	ldr	r2, [pc, #216]	; (800ef74 <__aeabi_fsub+0x384>)
 800ee9c:	401c      	ands	r4, r3
 800ee9e:	2501      	movs	r5, #1
 800eea0:	4013      	ands	r3, r2
 800eea2:	e6ea      	b.n	800ec7a <__aeabi_fsub+0x8a>
 800eea4:	28ff      	cmp	r0, #255	; 0xff
 800eea6:	d0eb      	beq.n	800ee80 <__aeabi_fsub+0x290>
 800eea8:	2280      	movs	r2, #128	; 0x80
 800eeaa:	04d2      	lsls	r2, r2, #19
 800eeac:	4276      	negs	r6, r6
 800eeae:	4313      	orrs	r3, r2
 800eeb0:	2e1b      	cmp	r6, #27
 800eeb2:	dc53      	bgt.n	800ef5c <__aeabi_fsub+0x36c>
 800eeb4:	2520      	movs	r5, #32
 800eeb6:	1bad      	subs	r5, r5, r6
 800eeb8:	001a      	movs	r2, r3
 800eeba:	40ab      	lsls	r3, r5
 800eebc:	40f2      	lsrs	r2, r6
 800eebe:	1e5c      	subs	r4, r3, #1
 800eec0:	41a3      	sbcs	r3, r4
 800eec2:	4313      	orrs	r3, r2
 800eec4:	444b      	add	r3, r9
 800eec6:	0005      	movs	r5, r0
 800eec8:	e721      	b.n	800ed0e <__aeabi_fsub+0x11e>
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d0d8      	beq.n	800ee80 <__aeabi_fsub+0x290>
 800eece:	4649      	mov	r1, r9
 800eed0:	2900      	cmp	r1, #0
 800eed2:	d100      	bne.n	800eed6 <__aeabi_fsub+0x2e6>
 800eed4:	e752      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800eed6:	2180      	movs	r1, #128	; 0x80
 800eed8:	03c9      	lsls	r1, r1, #15
 800eeda:	420f      	tst	r7, r1
 800eedc:	d100      	bne.n	800eee0 <__aeabi_fsub+0x2f0>
 800eede:	e74d      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800eee0:	4660      	mov	r0, ip
 800eee2:	4208      	tst	r0, r1
 800eee4:	d000      	beq.n	800eee8 <__aeabi_fsub+0x2f8>
 800eee6:	e749      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800eee8:	464b      	mov	r3, r9
 800eeea:	e747      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800eeec:	4648      	mov	r0, r9
 800eeee:	25ff      	movs	r5, #255	; 0xff
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d100      	bne.n	800eef6 <__aeabi_fsub+0x306>
 800eef4:	e74f      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800eef6:	2280      	movs	r2, #128	; 0x80
 800eef8:	03d2      	lsls	r2, r2, #15
 800eefa:	4217      	tst	r7, r2
 800eefc:	d004      	beq.n	800ef08 <__aeabi_fsub+0x318>
 800eefe:	4660      	mov	r0, ip
 800ef00:	4210      	tst	r0, r2
 800ef02:	d101      	bne.n	800ef08 <__aeabi_fsub+0x318>
 800ef04:	464b      	mov	r3, r9
 800ef06:	4688      	mov	r8, r1
 800ef08:	2201      	movs	r2, #1
 800ef0a:	4641      	mov	r1, r8
 800ef0c:	25ff      	movs	r5, #255	; 0xff
 800ef0e:	400a      	ands	r2, r1
 800ef10:	e741      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ef12:	4648      	mov	r0, r9
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d01f      	beq.n	800ef58 <__aeabi_fsub+0x368>
 800ef18:	1a1a      	subs	r2, r3, r0
 800ef1a:	0150      	lsls	r0, r2, #5
 800ef1c:	d520      	bpl.n	800ef60 <__aeabi_fsub+0x370>
 800ef1e:	464a      	mov	r2, r9
 800ef20:	2407      	movs	r4, #7
 800ef22:	1ad3      	subs	r3, r2, r3
 800ef24:	401c      	ands	r4, r3
 800ef26:	4688      	mov	r8, r1
 800ef28:	2500      	movs	r5, #0
 800ef2a:	e6a6      	b.n	800ec7a <__aeabi_fsub+0x8a>
 800ef2c:	1c74      	adds	r4, r6, #1
 800ef2e:	d0c9      	beq.n	800eec4 <__aeabi_fsub+0x2d4>
 800ef30:	43f6      	mvns	r6, r6
 800ef32:	28ff      	cmp	r0, #255	; 0xff
 800ef34:	d1bc      	bne.n	800eeb0 <__aeabi_fsub+0x2c0>
 800ef36:	464b      	mov	r3, r9
 800ef38:	e720      	b.n	800ed7c <__aeabi_fsub+0x18c>
 800ef3a:	4699      	mov	r9, r3
 800ef3c:	464b      	mov	r3, r9
 800ef3e:	2500      	movs	r5, #0
 800ef40:	08db      	lsrs	r3, r3, #3
 800ef42:	e72b      	b.n	800ed9c <__aeabi_fsub+0x1ac>
 800ef44:	2301      	movs	r3, #1
 800ef46:	e740      	b.n	800edca <__aeabi_fsub+0x1da>
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	e6a9      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800ef4e:	2380      	movs	r3, #128	; 0x80
 800ef50:	2200      	movs	r2, #0
 800ef52:	03db      	lsls	r3, r3, #15
 800ef54:	24ff      	movs	r4, #255	; 0xff
 800ef56:	e6a4      	b.n	800eca2 <__aeabi_fsub+0xb2>
 800ef58:	2500      	movs	r5, #0
 800ef5a:	e71c      	b.n	800ed96 <__aeabi_fsub+0x1a6>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e7b1      	b.n	800eec4 <__aeabi_fsub+0x2d4>
 800ef60:	2a00      	cmp	r2, #0
 800ef62:	d0f1      	beq.n	800ef48 <__aeabi_fsub+0x358>
 800ef64:	0013      	movs	r3, r2
 800ef66:	2500      	movs	r5, #0
 800ef68:	e6fc      	b.n	800ed64 <__aeabi_fsub+0x174>
 800ef6a:	2500      	movs	r5, #0
 800ef6c:	e6fa      	b.n	800ed64 <__aeabi_fsub+0x174>
 800ef6e:	46c0      	nop			; (mov r8, r8)
 800ef70:	7dffffff 	.word	0x7dffffff
 800ef74:	fbffffff 	.word	0xfbffffff

0800ef78 <__clzsi2>:
 800ef78:	211c      	movs	r1, #28
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	041b      	lsls	r3, r3, #16
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	d301      	bcc.n	800ef86 <__clzsi2+0xe>
 800ef82:	0c00      	lsrs	r0, r0, #16
 800ef84:	3910      	subs	r1, #16
 800ef86:	0a1b      	lsrs	r3, r3, #8
 800ef88:	4298      	cmp	r0, r3
 800ef8a:	d301      	bcc.n	800ef90 <__clzsi2+0x18>
 800ef8c:	0a00      	lsrs	r0, r0, #8
 800ef8e:	3908      	subs	r1, #8
 800ef90:	091b      	lsrs	r3, r3, #4
 800ef92:	4298      	cmp	r0, r3
 800ef94:	d301      	bcc.n	800ef9a <__clzsi2+0x22>
 800ef96:	0900      	lsrs	r0, r0, #4
 800ef98:	3904      	subs	r1, #4
 800ef9a:	a202      	add	r2, pc, #8	; (adr r2, 800efa4 <__clzsi2+0x2c>)
 800ef9c:	5c10      	ldrb	r0, [r2, r0]
 800ef9e:	1840      	adds	r0, r0, r1
 800efa0:	4770      	bx	lr
 800efa2:	46c0      	nop			; (mov r8, r8)
 800efa4:	02020304 	.word	0x02020304
 800efa8:	01010101 	.word	0x01010101
	...

0800efb4 <__gnu_thumb1_case_sqi>:
 800efb4:	b402      	push	{r1}
 800efb6:	4671      	mov	r1, lr
 800efb8:	0849      	lsrs	r1, r1, #1
 800efba:	0049      	lsls	r1, r1, #1
 800efbc:	5609      	ldrsb	r1, [r1, r0]
 800efbe:	0049      	lsls	r1, r1, #1
 800efc0:	448e      	add	lr, r1
 800efc2:	bc02      	pop	{r1}
 800efc4:	4770      	bx	lr
 800efc6:	46c0      	nop			; (mov r8, r8)

0800efc8 <__gnu_thumb1_case_uqi>:
 800efc8:	b402      	push	{r1}
 800efca:	4671      	mov	r1, lr
 800efcc:	0849      	lsrs	r1, r1, #1
 800efce:	0049      	lsls	r1, r1, #1
 800efd0:	5c09      	ldrb	r1, [r1, r0]
 800efd2:	0049      	lsls	r1, r1, #1
 800efd4:	448e      	add	lr, r1
 800efd6:	bc02      	pop	{r1}
 800efd8:	4770      	bx	lr
 800efda:	46c0      	nop			; (mov r8, r8)

0800efdc <__gnu_thumb1_case_uhi>:
 800efdc:	b403      	push	{r0, r1}
 800efde:	4671      	mov	r1, lr
 800efe0:	0849      	lsrs	r1, r1, #1
 800efe2:	0040      	lsls	r0, r0, #1
 800efe4:	0049      	lsls	r1, r1, #1
 800efe6:	5a09      	ldrh	r1, [r1, r0]
 800efe8:	0049      	lsls	r1, r1, #1
 800efea:	448e      	add	lr, r1
 800efec:	bc03      	pop	{r0, r1}
 800efee:	4770      	bx	lr

0800eff0 <__udivsi3>:
 800eff0:	2200      	movs	r2, #0
 800eff2:	0843      	lsrs	r3, r0, #1
 800eff4:	428b      	cmp	r3, r1
 800eff6:	d374      	bcc.n	800f0e2 <__udivsi3+0xf2>
 800eff8:	0903      	lsrs	r3, r0, #4
 800effa:	428b      	cmp	r3, r1
 800effc:	d35f      	bcc.n	800f0be <__udivsi3+0xce>
 800effe:	0a03      	lsrs	r3, r0, #8
 800f000:	428b      	cmp	r3, r1
 800f002:	d344      	bcc.n	800f08e <__udivsi3+0x9e>
 800f004:	0b03      	lsrs	r3, r0, #12
 800f006:	428b      	cmp	r3, r1
 800f008:	d328      	bcc.n	800f05c <__udivsi3+0x6c>
 800f00a:	0c03      	lsrs	r3, r0, #16
 800f00c:	428b      	cmp	r3, r1
 800f00e:	d30d      	bcc.n	800f02c <__udivsi3+0x3c>
 800f010:	22ff      	movs	r2, #255	; 0xff
 800f012:	0209      	lsls	r1, r1, #8
 800f014:	ba12      	rev	r2, r2
 800f016:	0c03      	lsrs	r3, r0, #16
 800f018:	428b      	cmp	r3, r1
 800f01a:	d302      	bcc.n	800f022 <__udivsi3+0x32>
 800f01c:	1212      	asrs	r2, r2, #8
 800f01e:	0209      	lsls	r1, r1, #8
 800f020:	d065      	beq.n	800f0ee <__udivsi3+0xfe>
 800f022:	0b03      	lsrs	r3, r0, #12
 800f024:	428b      	cmp	r3, r1
 800f026:	d319      	bcc.n	800f05c <__udivsi3+0x6c>
 800f028:	e000      	b.n	800f02c <__udivsi3+0x3c>
 800f02a:	0a09      	lsrs	r1, r1, #8
 800f02c:	0bc3      	lsrs	r3, r0, #15
 800f02e:	428b      	cmp	r3, r1
 800f030:	d301      	bcc.n	800f036 <__udivsi3+0x46>
 800f032:	03cb      	lsls	r3, r1, #15
 800f034:	1ac0      	subs	r0, r0, r3
 800f036:	4152      	adcs	r2, r2
 800f038:	0b83      	lsrs	r3, r0, #14
 800f03a:	428b      	cmp	r3, r1
 800f03c:	d301      	bcc.n	800f042 <__udivsi3+0x52>
 800f03e:	038b      	lsls	r3, r1, #14
 800f040:	1ac0      	subs	r0, r0, r3
 800f042:	4152      	adcs	r2, r2
 800f044:	0b43      	lsrs	r3, r0, #13
 800f046:	428b      	cmp	r3, r1
 800f048:	d301      	bcc.n	800f04e <__udivsi3+0x5e>
 800f04a:	034b      	lsls	r3, r1, #13
 800f04c:	1ac0      	subs	r0, r0, r3
 800f04e:	4152      	adcs	r2, r2
 800f050:	0b03      	lsrs	r3, r0, #12
 800f052:	428b      	cmp	r3, r1
 800f054:	d301      	bcc.n	800f05a <__udivsi3+0x6a>
 800f056:	030b      	lsls	r3, r1, #12
 800f058:	1ac0      	subs	r0, r0, r3
 800f05a:	4152      	adcs	r2, r2
 800f05c:	0ac3      	lsrs	r3, r0, #11
 800f05e:	428b      	cmp	r3, r1
 800f060:	d301      	bcc.n	800f066 <__udivsi3+0x76>
 800f062:	02cb      	lsls	r3, r1, #11
 800f064:	1ac0      	subs	r0, r0, r3
 800f066:	4152      	adcs	r2, r2
 800f068:	0a83      	lsrs	r3, r0, #10
 800f06a:	428b      	cmp	r3, r1
 800f06c:	d301      	bcc.n	800f072 <__udivsi3+0x82>
 800f06e:	028b      	lsls	r3, r1, #10
 800f070:	1ac0      	subs	r0, r0, r3
 800f072:	4152      	adcs	r2, r2
 800f074:	0a43      	lsrs	r3, r0, #9
 800f076:	428b      	cmp	r3, r1
 800f078:	d301      	bcc.n	800f07e <__udivsi3+0x8e>
 800f07a:	024b      	lsls	r3, r1, #9
 800f07c:	1ac0      	subs	r0, r0, r3
 800f07e:	4152      	adcs	r2, r2
 800f080:	0a03      	lsrs	r3, r0, #8
 800f082:	428b      	cmp	r3, r1
 800f084:	d301      	bcc.n	800f08a <__udivsi3+0x9a>
 800f086:	020b      	lsls	r3, r1, #8
 800f088:	1ac0      	subs	r0, r0, r3
 800f08a:	4152      	adcs	r2, r2
 800f08c:	d2cd      	bcs.n	800f02a <__udivsi3+0x3a>
 800f08e:	09c3      	lsrs	r3, r0, #7
 800f090:	428b      	cmp	r3, r1
 800f092:	d301      	bcc.n	800f098 <__udivsi3+0xa8>
 800f094:	01cb      	lsls	r3, r1, #7
 800f096:	1ac0      	subs	r0, r0, r3
 800f098:	4152      	adcs	r2, r2
 800f09a:	0983      	lsrs	r3, r0, #6
 800f09c:	428b      	cmp	r3, r1
 800f09e:	d301      	bcc.n	800f0a4 <__udivsi3+0xb4>
 800f0a0:	018b      	lsls	r3, r1, #6
 800f0a2:	1ac0      	subs	r0, r0, r3
 800f0a4:	4152      	adcs	r2, r2
 800f0a6:	0943      	lsrs	r3, r0, #5
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	d301      	bcc.n	800f0b0 <__udivsi3+0xc0>
 800f0ac:	014b      	lsls	r3, r1, #5
 800f0ae:	1ac0      	subs	r0, r0, r3
 800f0b0:	4152      	adcs	r2, r2
 800f0b2:	0903      	lsrs	r3, r0, #4
 800f0b4:	428b      	cmp	r3, r1
 800f0b6:	d301      	bcc.n	800f0bc <__udivsi3+0xcc>
 800f0b8:	010b      	lsls	r3, r1, #4
 800f0ba:	1ac0      	subs	r0, r0, r3
 800f0bc:	4152      	adcs	r2, r2
 800f0be:	08c3      	lsrs	r3, r0, #3
 800f0c0:	428b      	cmp	r3, r1
 800f0c2:	d301      	bcc.n	800f0c8 <__udivsi3+0xd8>
 800f0c4:	00cb      	lsls	r3, r1, #3
 800f0c6:	1ac0      	subs	r0, r0, r3
 800f0c8:	4152      	adcs	r2, r2
 800f0ca:	0883      	lsrs	r3, r0, #2
 800f0cc:	428b      	cmp	r3, r1
 800f0ce:	d301      	bcc.n	800f0d4 <__udivsi3+0xe4>
 800f0d0:	008b      	lsls	r3, r1, #2
 800f0d2:	1ac0      	subs	r0, r0, r3
 800f0d4:	4152      	adcs	r2, r2
 800f0d6:	0843      	lsrs	r3, r0, #1
 800f0d8:	428b      	cmp	r3, r1
 800f0da:	d301      	bcc.n	800f0e0 <__udivsi3+0xf0>
 800f0dc:	004b      	lsls	r3, r1, #1
 800f0de:	1ac0      	subs	r0, r0, r3
 800f0e0:	4152      	adcs	r2, r2
 800f0e2:	1a41      	subs	r1, r0, r1
 800f0e4:	d200      	bcs.n	800f0e8 <__udivsi3+0xf8>
 800f0e6:	4601      	mov	r1, r0
 800f0e8:	4152      	adcs	r2, r2
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	4770      	bx	lr
 800f0ee:	e7ff      	b.n	800f0f0 <__udivsi3+0x100>
 800f0f0:	b501      	push	{r0, lr}
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	f000 f8f0 	bl	800f2d8 <__aeabi_idiv0>
 800f0f8:	bd02      	pop	{r1, pc}
 800f0fa:	46c0      	nop			; (mov r8, r8)

0800f0fc <__aeabi_uidivmod>:
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	d0f7      	beq.n	800f0f0 <__udivsi3+0x100>
 800f100:	e776      	b.n	800eff0 <__udivsi3>
 800f102:	4770      	bx	lr

0800f104 <__divsi3>:
 800f104:	4603      	mov	r3, r0
 800f106:	430b      	orrs	r3, r1
 800f108:	d47f      	bmi.n	800f20a <__divsi3+0x106>
 800f10a:	2200      	movs	r2, #0
 800f10c:	0843      	lsrs	r3, r0, #1
 800f10e:	428b      	cmp	r3, r1
 800f110:	d374      	bcc.n	800f1fc <__divsi3+0xf8>
 800f112:	0903      	lsrs	r3, r0, #4
 800f114:	428b      	cmp	r3, r1
 800f116:	d35f      	bcc.n	800f1d8 <__divsi3+0xd4>
 800f118:	0a03      	lsrs	r3, r0, #8
 800f11a:	428b      	cmp	r3, r1
 800f11c:	d344      	bcc.n	800f1a8 <__divsi3+0xa4>
 800f11e:	0b03      	lsrs	r3, r0, #12
 800f120:	428b      	cmp	r3, r1
 800f122:	d328      	bcc.n	800f176 <__divsi3+0x72>
 800f124:	0c03      	lsrs	r3, r0, #16
 800f126:	428b      	cmp	r3, r1
 800f128:	d30d      	bcc.n	800f146 <__divsi3+0x42>
 800f12a:	22ff      	movs	r2, #255	; 0xff
 800f12c:	0209      	lsls	r1, r1, #8
 800f12e:	ba12      	rev	r2, r2
 800f130:	0c03      	lsrs	r3, r0, #16
 800f132:	428b      	cmp	r3, r1
 800f134:	d302      	bcc.n	800f13c <__divsi3+0x38>
 800f136:	1212      	asrs	r2, r2, #8
 800f138:	0209      	lsls	r1, r1, #8
 800f13a:	d065      	beq.n	800f208 <__divsi3+0x104>
 800f13c:	0b03      	lsrs	r3, r0, #12
 800f13e:	428b      	cmp	r3, r1
 800f140:	d319      	bcc.n	800f176 <__divsi3+0x72>
 800f142:	e000      	b.n	800f146 <__divsi3+0x42>
 800f144:	0a09      	lsrs	r1, r1, #8
 800f146:	0bc3      	lsrs	r3, r0, #15
 800f148:	428b      	cmp	r3, r1
 800f14a:	d301      	bcc.n	800f150 <__divsi3+0x4c>
 800f14c:	03cb      	lsls	r3, r1, #15
 800f14e:	1ac0      	subs	r0, r0, r3
 800f150:	4152      	adcs	r2, r2
 800f152:	0b83      	lsrs	r3, r0, #14
 800f154:	428b      	cmp	r3, r1
 800f156:	d301      	bcc.n	800f15c <__divsi3+0x58>
 800f158:	038b      	lsls	r3, r1, #14
 800f15a:	1ac0      	subs	r0, r0, r3
 800f15c:	4152      	adcs	r2, r2
 800f15e:	0b43      	lsrs	r3, r0, #13
 800f160:	428b      	cmp	r3, r1
 800f162:	d301      	bcc.n	800f168 <__divsi3+0x64>
 800f164:	034b      	lsls	r3, r1, #13
 800f166:	1ac0      	subs	r0, r0, r3
 800f168:	4152      	adcs	r2, r2
 800f16a:	0b03      	lsrs	r3, r0, #12
 800f16c:	428b      	cmp	r3, r1
 800f16e:	d301      	bcc.n	800f174 <__divsi3+0x70>
 800f170:	030b      	lsls	r3, r1, #12
 800f172:	1ac0      	subs	r0, r0, r3
 800f174:	4152      	adcs	r2, r2
 800f176:	0ac3      	lsrs	r3, r0, #11
 800f178:	428b      	cmp	r3, r1
 800f17a:	d301      	bcc.n	800f180 <__divsi3+0x7c>
 800f17c:	02cb      	lsls	r3, r1, #11
 800f17e:	1ac0      	subs	r0, r0, r3
 800f180:	4152      	adcs	r2, r2
 800f182:	0a83      	lsrs	r3, r0, #10
 800f184:	428b      	cmp	r3, r1
 800f186:	d301      	bcc.n	800f18c <__divsi3+0x88>
 800f188:	028b      	lsls	r3, r1, #10
 800f18a:	1ac0      	subs	r0, r0, r3
 800f18c:	4152      	adcs	r2, r2
 800f18e:	0a43      	lsrs	r3, r0, #9
 800f190:	428b      	cmp	r3, r1
 800f192:	d301      	bcc.n	800f198 <__divsi3+0x94>
 800f194:	024b      	lsls	r3, r1, #9
 800f196:	1ac0      	subs	r0, r0, r3
 800f198:	4152      	adcs	r2, r2
 800f19a:	0a03      	lsrs	r3, r0, #8
 800f19c:	428b      	cmp	r3, r1
 800f19e:	d301      	bcc.n	800f1a4 <__divsi3+0xa0>
 800f1a0:	020b      	lsls	r3, r1, #8
 800f1a2:	1ac0      	subs	r0, r0, r3
 800f1a4:	4152      	adcs	r2, r2
 800f1a6:	d2cd      	bcs.n	800f144 <__divsi3+0x40>
 800f1a8:	09c3      	lsrs	r3, r0, #7
 800f1aa:	428b      	cmp	r3, r1
 800f1ac:	d301      	bcc.n	800f1b2 <__divsi3+0xae>
 800f1ae:	01cb      	lsls	r3, r1, #7
 800f1b0:	1ac0      	subs	r0, r0, r3
 800f1b2:	4152      	adcs	r2, r2
 800f1b4:	0983      	lsrs	r3, r0, #6
 800f1b6:	428b      	cmp	r3, r1
 800f1b8:	d301      	bcc.n	800f1be <__divsi3+0xba>
 800f1ba:	018b      	lsls	r3, r1, #6
 800f1bc:	1ac0      	subs	r0, r0, r3
 800f1be:	4152      	adcs	r2, r2
 800f1c0:	0943      	lsrs	r3, r0, #5
 800f1c2:	428b      	cmp	r3, r1
 800f1c4:	d301      	bcc.n	800f1ca <__divsi3+0xc6>
 800f1c6:	014b      	lsls	r3, r1, #5
 800f1c8:	1ac0      	subs	r0, r0, r3
 800f1ca:	4152      	adcs	r2, r2
 800f1cc:	0903      	lsrs	r3, r0, #4
 800f1ce:	428b      	cmp	r3, r1
 800f1d0:	d301      	bcc.n	800f1d6 <__divsi3+0xd2>
 800f1d2:	010b      	lsls	r3, r1, #4
 800f1d4:	1ac0      	subs	r0, r0, r3
 800f1d6:	4152      	adcs	r2, r2
 800f1d8:	08c3      	lsrs	r3, r0, #3
 800f1da:	428b      	cmp	r3, r1
 800f1dc:	d301      	bcc.n	800f1e2 <__divsi3+0xde>
 800f1de:	00cb      	lsls	r3, r1, #3
 800f1e0:	1ac0      	subs	r0, r0, r3
 800f1e2:	4152      	adcs	r2, r2
 800f1e4:	0883      	lsrs	r3, r0, #2
 800f1e6:	428b      	cmp	r3, r1
 800f1e8:	d301      	bcc.n	800f1ee <__divsi3+0xea>
 800f1ea:	008b      	lsls	r3, r1, #2
 800f1ec:	1ac0      	subs	r0, r0, r3
 800f1ee:	4152      	adcs	r2, r2
 800f1f0:	0843      	lsrs	r3, r0, #1
 800f1f2:	428b      	cmp	r3, r1
 800f1f4:	d301      	bcc.n	800f1fa <__divsi3+0xf6>
 800f1f6:	004b      	lsls	r3, r1, #1
 800f1f8:	1ac0      	subs	r0, r0, r3
 800f1fa:	4152      	adcs	r2, r2
 800f1fc:	1a41      	subs	r1, r0, r1
 800f1fe:	d200      	bcs.n	800f202 <__divsi3+0xfe>
 800f200:	4601      	mov	r1, r0
 800f202:	4152      	adcs	r2, r2
 800f204:	4610      	mov	r0, r2
 800f206:	4770      	bx	lr
 800f208:	e05d      	b.n	800f2c6 <__divsi3+0x1c2>
 800f20a:	0fca      	lsrs	r2, r1, #31
 800f20c:	d000      	beq.n	800f210 <__divsi3+0x10c>
 800f20e:	4249      	negs	r1, r1
 800f210:	1003      	asrs	r3, r0, #32
 800f212:	d300      	bcc.n	800f216 <__divsi3+0x112>
 800f214:	4240      	negs	r0, r0
 800f216:	4053      	eors	r3, r2
 800f218:	2200      	movs	r2, #0
 800f21a:	469c      	mov	ip, r3
 800f21c:	0903      	lsrs	r3, r0, #4
 800f21e:	428b      	cmp	r3, r1
 800f220:	d32d      	bcc.n	800f27e <__divsi3+0x17a>
 800f222:	0a03      	lsrs	r3, r0, #8
 800f224:	428b      	cmp	r3, r1
 800f226:	d312      	bcc.n	800f24e <__divsi3+0x14a>
 800f228:	22fc      	movs	r2, #252	; 0xfc
 800f22a:	0189      	lsls	r1, r1, #6
 800f22c:	ba12      	rev	r2, r2
 800f22e:	0a03      	lsrs	r3, r0, #8
 800f230:	428b      	cmp	r3, r1
 800f232:	d30c      	bcc.n	800f24e <__divsi3+0x14a>
 800f234:	0189      	lsls	r1, r1, #6
 800f236:	1192      	asrs	r2, r2, #6
 800f238:	428b      	cmp	r3, r1
 800f23a:	d308      	bcc.n	800f24e <__divsi3+0x14a>
 800f23c:	0189      	lsls	r1, r1, #6
 800f23e:	1192      	asrs	r2, r2, #6
 800f240:	428b      	cmp	r3, r1
 800f242:	d304      	bcc.n	800f24e <__divsi3+0x14a>
 800f244:	0189      	lsls	r1, r1, #6
 800f246:	d03a      	beq.n	800f2be <__divsi3+0x1ba>
 800f248:	1192      	asrs	r2, r2, #6
 800f24a:	e000      	b.n	800f24e <__divsi3+0x14a>
 800f24c:	0989      	lsrs	r1, r1, #6
 800f24e:	09c3      	lsrs	r3, r0, #7
 800f250:	428b      	cmp	r3, r1
 800f252:	d301      	bcc.n	800f258 <__divsi3+0x154>
 800f254:	01cb      	lsls	r3, r1, #7
 800f256:	1ac0      	subs	r0, r0, r3
 800f258:	4152      	adcs	r2, r2
 800f25a:	0983      	lsrs	r3, r0, #6
 800f25c:	428b      	cmp	r3, r1
 800f25e:	d301      	bcc.n	800f264 <__divsi3+0x160>
 800f260:	018b      	lsls	r3, r1, #6
 800f262:	1ac0      	subs	r0, r0, r3
 800f264:	4152      	adcs	r2, r2
 800f266:	0943      	lsrs	r3, r0, #5
 800f268:	428b      	cmp	r3, r1
 800f26a:	d301      	bcc.n	800f270 <__divsi3+0x16c>
 800f26c:	014b      	lsls	r3, r1, #5
 800f26e:	1ac0      	subs	r0, r0, r3
 800f270:	4152      	adcs	r2, r2
 800f272:	0903      	lsrs	r3, r0, #4
 800f274:	428b      	cmp	r3, r1
 800f276:	d301      	bcc.n	800f27c <__divsi3+0x178>
 800f278:	010b      	lsls	r3, r1, #4
 800f27a:	1ac0      	subs	r0, r0, r3
 800f27c:	4152      	adcs	r2, r2
 800f27e:	08c3      	lsrs	r3, r0, #3
 800f280:	428b      	cmp	r3, r1
 800f282:	d301      	bcc.n	800f288 <__divsi3+0x184>
 800f284:	00cb      	lsls	r3, r1, #3
 800f286:	1ac0      	subs	r0, r0, r3
 800f288:	4152      	adcs	r2, r2
 800f28a:	0883      	lsrs	r3, r0, #2
 800f28c:	428b      	cmp	r3, r1
 800f28e:	d301      	bcc.n	800f294 <__divsi3+0x190>
 800f290:	008b      	lsls	r3, r1, #2
 800f292:	1ac0      	subs	r0, r0, r3
 800f294:	4152      	adcs	r2, r2
 800f296:	d2d9      	bcs.n	800f24c <__divsi3+0x148>
 800f298:	0843      	lsrs	r3, r0, #1
 800f29a:	428b      	cmp	r3, r1
 800f29c:	d301      	bcc.n	800f2a2 <__divsi3+0x19e>
 800f29e:	004b      	lsls	r3, r1, #1
 800f2a0:	1ac0      	subs	r0, r0, r3
 800f2a2:	4152      	adcs	r2, r2
 800f2a4:	1a41      	subs	r1, r0, r1
 800f2a6:	d200      	bcs.n	800f2aa <__divsi3+0x1a6>
 800f2a8:	4601      	mov	r1, r0
 800f2aa:	4663      	mov	r3, ip
 800f2ac:	4152      	adcs	r2, r2
 800f2ae:	105b      	asrs	r3, r3, #1
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	d301      	bcc.n	800f2b8 <__divsi3+0x1b4>
 800f2b4:	4240      	negs	r0, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d500      	bpl.n	800f2bc <__divsi3+0x1b8>
 800f2ba:	4249      	negs	r1, r1
 800f2bc:	4770      	bx	lr
 800f2be:	4663      	mov	r3, ip
 800f2c0:	105b      	asrs	r3, r3, #1
 800f2c2:	d300      	bcc.n	800f2c6 <__divsi3+0x1c2>
 800f2c4:	4240      	negs	r0, r0
 800f2c6:	b501      	push	{r0, lr}
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	f000 f805 	bl	800f2d8 <__aeabi_idiv0>
 800f2ce:	bd02      	pop	{r1, pc}

0800f2d0 <__aeabi_idivmod>:
 800f2d0:	2900      	cmp	r1, #0
 800f2d2:	d0f8      	beq.n	800f2c6 <__divsi3+0x1c2>
 800f2d4:	e716      	b.n	800f104 <__divsi3>
 800f2d6:	4770      	bx	lr

0800f2d8 <__aeabi_idiv0>:
 800f2d8:	4770      	bx	lr
 800f2da:	46c0      	nop			; (mov r8, r8)

0800f2dc <__aeabi_cdrcmple>:
 800f2dc:	4684      	mov	ip, r0
 800f2de:	1c10      	adds	r0, r2, #0
 800f2e0:	4662      	mov	r2, ip
 800f2e2:	468c      	mov	ip, r1
 800f2e4:	1c19      	adds	r1, r3, #0
 800f2e6:	4663      	mov	r3, ip
 800f2e8:	e000      	b.n	800f2ec <__aeabi_cdcmpeq>
 800f2ea:	46c0      	nop			; (mov r8, r8)

0800f2ec <__aeabi_cdcmpeq>:
 800f2ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2ee:	f001 f9c9 	bl	8010684 <__ledf2>
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	d401      	bmi.n	800f2fa <__aeabi_cdcmpeq+0xe>
 800f2f6:	2100      	movs	r1, #0
 800f2f8:	42c8      	cmn	r0, r1
 800f2fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800f2fc <__aeabi_dcmpeq>:
 800f2fc:	b510      	push	{r4, lr}
 800f2fe:	f001 f921 	bl	8010544 <__eqdf2>
 800f302:	4240      	negs	r0, r0
 800f304:	3001      	adds	r0, #1
 800f306:	bd10      	pop	{r4, pc}

0800f308 <__aeabi_dcmplt>:
 800f308:	b510      	push	{r4, lr}
 800f30a:	f001 f9bb 	bl	8010684 <__ledf2>
 800f30e:	2800      	cmp	r0, #0
 800f310:	db01      	blt.n	800f316 <__aeabi_dcmplt+0xe>
 800f312:	2000      	movs	r0, #0
 800f314:	bd10      	pop	{r4, pc}
 800f316:	2001      	movs	r0, #1
 800f318:	bd10      	pop	{r4, pc}
 800f31a:	46c0      	nop			; (mov r8, r8)

0800f31c <__aeabi_dcmple>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	f001 f9b1 	bl	8010684 <__ledf2>
 800f322:	2800      	cmp	r0, #0
 800f324:	dd01      	ble.n	800f32a <__aeabi_dcmple+0xe>
 800f326:	2000      	movs	r0, #0
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	2001      	movs	r0, #1
 800f32c:	bd10      	pop	{r4, pc}
 800f32e:	46c0      	nop			; (mov r8, r8)

0800f330 <__aeabi_dcmpgt>:
 800f330:	b510      	push	{r4, lr}
 800f332:	f001 f943 	bl	80105bc <__gedf2>
 800f336:	2800      	cmp	r0, #0
 800f338:	dc01      	bgt.n	800f33e <__aeabi_dcmpgt+0xe>
 800f33a:	2000      	movs	r0, #0
 800f33c:	bd10      	pop	{r4, pc}
 800f33e:	2001      	movs	r0, #1
 800f340:	bd10      	pop	{r4, pc}
 800f342:	46c0      	nop			; (mov r8, r8)

0800f344 <__aeabi_dcmpge>:
 800f344:	b510      	push	{r4, lr}
 800f346:	f001 f939 	bl	80105bc <__gedf2>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	da01      	bge.n	800f352 <__aeabi_dcmpge+0xe>
 800f34e:	2000      	movs	r0, #0
 800f350:	bd10      	pop	{r4, pc}
 800f352:	2001      	movs	r0, #1
 800f354:	bd10      	pop	{r4, pc}
 800f356:	46c0      	nop			; (mov r8, r8)

0800f358 <__aeabi_cfrcmple>:
 800f358:	4684      	mov	ip, r0
 800f35a:	1c08      	adds	r0, r1, #0
 800f35c:	4661      	mov	r1, ip
 800f35e:	e7ff      	b.n	800f360 <__aeabi_cfcmpeq>

0800f360 <__aeabi_cfcmpeq>:
 800f360:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f362:	f000 f9c1 	bl	800f6e8 <__lesf2>
 800f366:	2800      	cmp	r0, #0
 800f368:	d401      	bmi.n	800f36e <__aeabi_cfcmpeq+0xe>
 800f36a:	2100      	movs	r1, #0
 800f36c:	42c8      	cmn	r0, r1
 800f36e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800f370 <__aeabi_fcmpeq>:
 800f370:	b510      	push	{r4, lr}
 800f372:	f000 f943 	bl	800f5fc <__eqsf2>
 800f376:	4240      	negs	r0, r0
 800f378:	3001      	adds	r0, #1
 800f37a:	bd10      	pop	{r4, pc}

0800f37c <__aeabi_fcmplt>:
 800f37c:	b510      	push	{r4, lr}
 800f37e:	f000 f9b3 	bl	800f6e8 <__lesf2>
 800f382:	2800      	cmp	r0, #0
 800f384:	db01      	blt.n	800f38a <__aeabi_fcmplt+0xe>
 800f386:	2000      	movs	r0, #0
 800f388:	bd10      	pop	{r4, pc}
 800f38a:	2001      	movs	r0, #1
 800f38c:	bd10      	pop	{r4, pc}
 800f38e:	46c0      	nop			; (mov r8, r8)

0800f390 <__aeabi_fcmple>:
 800f390:	b510      	push	{r4, lr}
 800f392:	f000 f9a9 	bl	800f6e8 <__lesf2>
 800f396:	2800      	cmp	r0, #0
 800f398:	dd01      	ble.n	800f39e <__aeabi_fcmple+0xe>
 800f39a:	2000      	movs	r0, #0
 800f39c:	bd10      	pop	{r4, pc}
 800f39e:	2001      	movs	r0, #1
 800f3a0:	bd10      	pop	{r4, pc}
 800f3a2:	46c0      	nop			; (mov r8, r8)

0800f3a4 <__aeabi_fcmpgt>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	f000 f951 	bl	800f64c <__gesf2>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	dc01      	bgt.n	800f3b2 <__aeabi_fcmpgt+0xe>
 800f3ae:	2000      	movs	r0, #0
 800f3b0:	bd10      	pop	{r4, pc}
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	46c0      	nop			; (mov r8, r8)

0800f3b8 <__aeabi_fcmpge>:
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	f000 f947 	bl	800f64c <__gesf2>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	da01      	bge.n	800f3c6 <__aeabi_fcmpge+0xe>
 800f3c2:	2000      	movs	r0, #0
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	2001      	movs	r0, #1
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	46c0      	nop			; (mov r8, r8)

0800f3cc <__aeabi_uldivmod>:
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d111      	bne.n	800f3f4 <__aeabi_uldivmod+0x28>
 800f3d0:	2a00      	cmp	r2, #0
 800f3d2:	d10f      	bne.n	800f3f4 <__aeabi_uldivmod+0x28>
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	d100      	bne.n	800f3da <__aeabi_uldivmod+0xe>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d002      	beq.n	800f3e2 <__aeabi_uldivmod+0x16>
 800f3dc:	2100      	movs	r1, #0
 800f3de:	43c9      	mvns	r1, r1
 800f3e0:	1c08      	adds	r0, r1, #0
 800f3e2:	b407      	push	{r0, r1, r2}
 800f3e4:	4802      	ldr	r0, [pc, #8]	; (800f3f0 <__aeabi_uldivmod+0x24>)
 800f3e6:	a102      	add	r1, pc, #8	; (adr r1, 800f3f0 <__aeabi_uldivmod+0x24>)
 800f3e8:	1840      	adds	r0, r0, r1
 800f3ea:	9002      	str	r0, [sp, #8]
 800f3ec:	bd03      	pop	{r0, r1, pc}
 800f3ee:	46c0      	nop			; (mov r8, r8)
 800f3f0:	fffffee9 	.word	0xfffffee9
 800f3f4:	b403      	push	{r0, r1}
 800f3f6:	4668      	mov	r0, sp
 800f3f8:	b501      	push	{r0, lr}
 800f3fa:	9802      	ldr	r0, [sp, #8]
 800f3fc:	f000 f83c 	bl	800f478 <__udivmoddi4>
 800f400:	9b01      	ldr	r3, [sp, #4]
 800f402:	469e      	mov	lr, r3
 800f404:	b002      	add	sp, #8
 800f406:	bc0c      	pop	{r2, r3}
 800f408:	4770      	bx	lr
 800f40a:	46c0      	nop			; (mov r8, r8)

0800f40c <__aeabi_f2uiz>:
 800f40c:	219e      	movs	r1, #158	; 0x9e
 800f40e:	b510      	push	{r4, lr}
 800f410:	05c9      	lsls	r1, r1, #23
 800f412:	1c04      	adds	r4, r0, #0
 800f414:	f7ff ffd0 	bl	800f3b8 <__aeabi_fcmpge>
 800f418:	2800      	cmp	r0, #0
 800f41a:	d103      	bne.n	800f424 <__aeabi_f2uiz+0x18>
 800f41c:	1c20      	adds	r0, r4, #0
 800f41e:	f000 f9c9 	bl	800f7b4 <__aeabi_f2iz>
 800f422:	bd10      	pop	{r4, pc}
 800f424:	219e      	movs	r1, #158	; 0x9e
 800f426:	1c20      	adds	r0, r4, #0
 800f428:	05c9      	lsls	r1, r1, #23
 800f42a:	f7ff fbe1 	bl	800ebf0 <__aeabi_fsub>
 800f42e:	f000 f9c1 	bl	800f7b4 <__aeabi_f2iz>
 800f432:	2380      	movs	r3, #128	; 0x80
 800f434:	061b      	lsls	r3, r3, #24
 800f436:	469c      	mov	ip, r3
 800f438:	4460      	add	r0, ip
 800f43a:	e7f2      	b.n	800f422 <__aeabi_f2uiz+0x16>

0800f43c <__aeabi_d2uiz>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	2200      	movs	r2, #0
 800f440:	4b0c      	ldr	r3, [pc, #48]	; (800f474 <__aeabi_d2uiz+0x38>)
 800f442:	0004      	movs	r4, r0
 800f444:	000d      	movs	r5, r1
 800f446:	f7ff ff7d 	bl	800f344 <__aeabi_dcmpge>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d104      	bne.n	800f458 <__aeabi_d2uiz+0x1c>
 800f44e:	0020      	movs	r0, r4
 800f450:	0029      	movs	r1, r5
 800f452:	f001 ff55 	bl	8011300 <__aeabi_d2iz>
 800f456:	bd70      	pop	{r4, r5, r6, pc}
 800f458:	4b06      	ldr	r3, [pc, #24]	; (800f474 <__aeabi_d2uiz+0x38>)
 800f45a:	2200      	movs	r2, #0
 800f45c:	0020      	movs	r0, r4
 800f45e:	0029      	movs	r1, r5
 800f460:	f001 fbea 	bl	8010c38 <__aeabi_dsub>
 800f464:	f001 ff4c 	bl	8011300 <__aeabi_d2iz>
 800f468:	2380      	movs	r3, #128	; 0x80
 800f46a:	061b      	lsls	r3, r3, #24
 800f46c:	469c      	mov	ip, r3
 800f46e:	4460      	add	r0, ip
 800f470:	e7f1      	b.n	800f456 <__aeabi_d2uiz+0x1a>
 800f472:	46c0      	nop			; (mov r8, r8)
 800f474:	41e00000 	.word	0x41e00000

0800f478 <__udivmoddi4>:
 800f478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f47a:	464f      	mov	r7, r9
 800f47c:	4646      	mov	r6, r8
 800f47e:	46d6      	mov	lr, sl
 800f480:	b5c0      	push	{r6, r7, lr}
 800f482:	0004      	movs	r4, r0
 800f484:	b082      	sub	sp, #8
 800f486:	000d      	movs	r5, r1
 800f488:	4691      	mov	r9, r2
 800f48a:	4698      	mov	r8, r3
 800f48c:	428b      	cmp	r3, r1
 800f48e:	d82f      	bhi.n	800f4f0 <__udivmoddi4+0x78>
 800f490:	d02c      	beq.n	800f4ec <__udivmoddi4+0x74>
 800f492:	4641      	mov	r1, r8
 800f494:	4648      	mov	r0, r9
 800f496:	f002 f8ab 	bl	80115f0 <__clzdi2>
 800f49a:	0029      	movs	r1, r5
 800f49c:	0006      	movs	r6, r0
 800f49e:	0020      	movs	r0, r4
 800f4a0:	f002 f8a6 	bl	80115f0 <__clzdi2>
 800f4a4:	1a33      	subs	r3, r6, r0
 800f4a6:	469c      	mov	ip, r3
 800f4a8:	3b20      	subs	r3, #32
 800f4aa:	469a      	mov	sl, r3
 800f4ac:	d500      	bpl.n	800f4b0 <__udivmoddi4+0x38>
 800f4ae:	e076      	b.n	800f59e <__udivmoddi4+0x126>
 800f4b0:	464b      	mov	r3, r9
 800f4b2:	4652      	mov	r2, sl
 800f4b4:	4093      	lsls	r3, r2
 800f4b6:	001f      	movs	r7, r3
 800f4b8:	464b      	mov	r3, r9
 800f4ba:	4662      	mov	r2, ip
 800f4bc:	4093      	lsls	r3, r2
 800f4be:	001e      	movs	r6, r3
 800f4c0:	42af      	cmp	r7, r5
 800f4c2:	d828      	bhi.n	800f516 <__udivmoddi4+0x9e>
 800f4c4:	d025      	beq.n	800f512 <__udivmoddi4+0x9a>
 800f4c6:	4653      	mov	r3, sl
 800f4c8:	1ba4      	subs	r4, r4, r6
 800f4ca:	41bd      	sbcs	r5, r7
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	da00      	bge.n	800f4d2 <__udivmoddi4+0x5a>
 800f4d0:	e07b      	b.n	800f5ca <__udivmoddi4+0x152>
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	9200      	str	r2, [sp, #0]
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	2301      	movs	r3, #1
 800f4dc:	4652      	mov	r2, sl
 800f4de:	4093      	lsls	r3, r2
 800f4e0:	9301      	str	r3, [sp, #4]
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	4662      	mov	r2, ip
 800f4e6:	4093      	lsls	r3, r2
 800f4e8:	9300      	str	r3, [sp, #0]
 800f4ea:	e018      	b.n	800f51e <__udivmoddi4+0xa6>
 800f4ec:	4282      	cmp	r2, r0
 800f4ee:	d9d0      	bls.n	800f492 <__udivmoddi4+0x1a>
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9200      	str	r2, [sp, #0]
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <__udivmoddi4+0x8a>
 800f4fe:	601c      	str	r4, [r3, #0]
 800f500:	605d      	str	r5, [r3, #4]
 800f502:	9800      	ldr	r0, [sp, #0]
 800f504:	9901      	ldr	r1, [sp, #4]
 800f506:	b002      	add	sp, #8
 800f508:	bc1c      	pop	{r2, r3, r4}
 800f50a:	4690      	mov	r8, r2
 800f50c:	4699      	mov	r9, r3
 800f50e:	46a2      	mov	sl, r4
 800f510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f512:	42a3      	cmp	r3, r4
 800f514:	d9d7      	bls.n	800f4c6 <__udivmoddi4+0x4e>
 800f516:	2200      	movs	r2, #0
 800f518:	2300      	movs	r3, #0
 800f51a:	9200      	str	r2, [sp, #0]
 800f51c:	9301      	str	r3, [sp, #4]
 800f51e:	4663      	mov	r3, ip
 800f520:	2b00      	cmp	r3, #0
 800f522:	d0e9      	beq.n	800f4f8 <__udivmoddi4+0x80>
 800f524:	07fb      	lsls	r3, r7, #31
 800f526:	4698      	mov	r8, r3
 800f528:	4641      	mov	r1, r8
 800f52a:	0872      	lsrs	r2, r6, #1
 800f52c:	430a      	orrs	r2, r1
 800f52e:	087b      	lsrs	r3, r7, #1
 800f530:	4666      	mov	r6, ip
 800f532:	e00e      	b.n	800f552 <__udivmoddi4+0xda>
 800f534:	42ab      	cmp	r3, r5
 800f536:	d101      	bne.n	800f53c <__udivmoddi4+0xc4>
 800f538:	42a2      	cmp	r2, r4
 800f53a:	d80c      	bhi.n	800f556 <__udivmoddi4+0xde>
 800f53c:	1aa4      	subs	r4, r4, r2
 800f53e:	419d      	sbcs	r5, r3
 800f540:	2001      	movs	r0, #1
 800f542:	1924      	adds	r4, r4, r4
 800f544:	416d      	adcs	r5, r5
 800f546:	2100      	movs	r1, #0
 800f548:	3e01      	subs	r6, #1
 800f54a:	1824      	adds	r4, r4, r0
 800f54c:	414d      	adcs	r5, r1
 800f54e:	2e00      	cmp	r6, #0
 800f550:	d006      	beq.n	800f560 <__udivmoddi4+0xe8>
 800f552:	42ab      	cmp	r3, r5
 800f554:	d9ee      	bls.n	800f534 <__udivmoddi4+0xbc>
 800f556:	3e01      	subs	r6, #1
 800f558:	1924      	adds	r4, r4, r4
 800f55a:	416d      	adcs	r5, r5
 800f55c:	2e00      	cmp	r6, #0
 800f55e:	d1f8      	bne.n	800f552 <__udivmoddi4+0xda>
 800f560:	9800      	ldr	r0, [sp, #0]
 800f562:	9901      	ldr	r1, [sp, #4]
 800f564:	4653      	mov	r3, sl
 800f566:	1900      	adds	r0, r0, r4
 800f568:	4169      	adcs	r1, r5
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	db23      	blt.n	800f5b6 <__udivmoddi4+0x13e>
 800f56e:	002b      	movs	r3, r5
 800f570:	4652      	mov	r2, sl
 800f572:	40d3      	lsrs	r3, r2
 800f574:	002a      	movs	r2, r5
 800f576:	4664      	mov	r4, ip
 800f578:	40e2      	lsrs	r2, r4
 800f57a:	001c      	movs	r4, r3
 800f57c:	4653      	mov	r3, sl
 800f57e:	0015      	movs	r5, r2
 800f580:	2b00      	cmp	r3, #0
 800f582:	db2d      	blt.n	800f5e0 <__udivmoddi4+0x168>
 800f584:	0026      	movs	r6, r4
 800f586:	4657      	mov	r7, sl
 800f588:	40be      	lsls	r6, r7
 800f58a:	0033      	movs	r3, r6
 800f58c:	0026      	movs	r6, r4
 800f58e:	4667      	mov	r7, ip
 800f590:	40be      	lsls	r6, r7
 800f592:	0032      	movs	r2, r6
 800f594:	1a80      	subs	r0, r0, r2
 800f596:	4199      	sbcs	r1, r3
 800f598:	9000      	str	r0, [sp, #0]
 800f59a:	9101      	str	r1, [sp, #4]
 800f59c:	e7ac      	b.n	800f4f8 <__udivmoddi4+0x80>
 800f59e:	4662      	mov	r2, ip
 800f5a0:	2320      	movs	r3, #32
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	464a      	mov	r2, r9
 800f5a6:	40da      	lsrs	r2, r3
 800f5a8:	4661      	mov	r1, ip
 800f5aa:	0013      	movs	r3, r2
 800f5ac:	4642      	mov	r2, r8
 800f5ae:	408a      	lsls	r2, r1
 800f5b0:	0017      	movs	r7, r2
 800f5b2:	431f      	orrs	r7, r3
 800f5b4:	e780      	b.n	800f4b8 <__udivmoddi4+0x40>
 800f5b6:	4662      	mov	r2, ip
 800f5b8:	2320      	movs	r3, #32
 800f5ba:	1a9b      	subs	r3, r3, r2
 800f5bc:	002a      	movs	r2, r5
 800f5be:	4666      	mov	r6, ip
 800f5c0:	409a      	lsls	r2, r3
 800f5c2:	0023      	movs	r3, r4
 800f5c4:	40f3      	lsrs	r3, r6
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	e7d4      	b.n	800f574 <__udivmoddi4+0xfc>
 800f5ca:	4662      	mov	r2, ip
 800f5cc:	2320      	movs	r3, #32
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	1a9b      	subs	r3, r3, r2
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	9100      	str	r1, [sp, #0]
 800f5d6:	9201      	str	r2, [sp, #4]
 800f5d8:	2201      	movs	r2, #1
 800f5da:	40da      	lsrs	r2, r3
 800f5dc:	9201      	str	r2, [sp, #4]
 800f5de:	e780      	b.n	800f4e2 <__udivmoddi4+0x6a>
 800f5e0:	2320      	movs	r3, #32
 800f5e2:	4662      	mov	r2, ip
 800f5e4:	0026      	movs	r6, r4
 800f5e6:	1a9b      	subs	r3, r3, r2
 800f5e8:	40de      	lsrs	r6, r3
 800f5ea:	002f      	movs	r7, r5
 800f5ec:	46b0      	mov	r8, r6
 800f5ee:	4666      	mov	r6, ip
 800f5f0:	40b7      	lsls	r7, r6
 800f5f2:	4646      	mov	r6, r8
 800f5f4:	003b      	movs	r3, r7
 800f5f6:	4333      	orrs	r3, r6
 800f5f8:	e7c8      	b.n	800f58c <__udivmoddi4+0x114>
 800f5fa:	46c0      	nop			; (mov r8, r8)

0800f5fc <__eqsf2>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	0042      	lsls	r2, r0, #1
 800f600:	024e      	lsls	r6, r1, #9
 800f602:	004c      	lsls	r4, r1, #1
 800f604:	0245      	lsls	r5, r0, #9
 800f606:	0a6d      	lsrs	r5, r5, #9
 800f608:	0e12      	lsrs	r2, r2, #24
 800f60a:	0fc3      	lsrs	r3, r0, #31
 800f60c:	0a76      	lsrs	r6, r6, #9
 800f60e:	0e24      	lsrs	r4, r4, #24
 800f610:	0fc9      	lsrs	r1, r1, #31
 800f612:	2aff      	cmp	r2, #255	; 0xff
 800f614:	d00f      	beq.n	800f636 <__eqsf2+0x3a>
 800f616:	2cff      	cmp	r4, #255	; 0xff
 800f618:	d011      	beq.n	800f63e <__eqsf2+0x42>
 800f61a:	2001      	movs	r0, #1
 800f61c:	42a2      	cmp	r2, r4
 800f61e:	d000      	beq.n	800f622 <__eqsf2+0x26>
 800f620:	bd70      	pop	{r4, r5, r6, pc}
 800f622:	42b5      	cmp	r5, r6
 800f624:	d1fc      	bne.n	800f620 <__eqsf2+0x24>
 800f626:	428b      	cmp	r3, r1
 800f628:	d00d      	beq.n	800f646 <__eqsf2+0x4a>
 800f62a:	2a00      	cmp	r2, #0
 800f62c:	d1f8      	bne.n	800f620 <__eqsf2+0x24>
 800f62e:	0028      	movs	r0, r5
 800f630:	1e45      	subs	r5, r0, #1
 800f632:	41a8      	sbcs	r0, r5
 800f634:	e7f4      	b.n	800f620 <__eqsf2+0x24>
 800f636:	2001      	movs	r0, #1
 800f638:	2d00      	cmp	r5, #0
 800f63a:	d1f1      	bne.n	800f620 <__eqsf2+0x24>
 800f63c:	e7eb      	b.n	800f616 <__eqsf2+0x1a>
 800f63e:	2001      	movs	r0, #1
 800f640:	2e00      	cmp	r6, #0
 800f642:	d1ed      	bne.n	800f620 <__eqsf2+0x24>
 800f644:	e7e9      	b.n	800f61a <__eqsf2+0x1e>
 800f646:	2000      	movs	r0, #0
 800f648:	e7ea      	b.n	800f620 <__eqsf2+0x24>
 800f64a:	46c0      	nop			; (mov r8, r8)

0800f64c <__gesf2>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	004a      	lsls	r2, r1, #1
 800f650:	024e      	lsls	r6, r1, #9
 800f652:	0245      	lsls	r5, r0, #9
 800f654:	0044      	lsls	r4, r0, #1
 800f656:	0a6d      	lsrs	r5, r5, #9
 800f658:	0e24      	lsrs	r4, r4, #24
 800f65a:	0fc3      	lsrs	r3, r0, #31
 800f65c:	0a76      	lsrs	r6, r6, #9
 800f65e:	0e12      	lsrs	r2, r2, #24
 800f660:	0fc9      	lsrs	r1, r1, #31
 800f662:	2cff      	cmp	r4, #255	; 0xff
 800f664:	d015      	beq.n	800f692 <__gesf2+0x46>
 800f666:	2aff      	cmp	r2, #255	; 0xff
 800f668:	d00e      	beq.n	800f688 <__gesf2+0x3c>
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	d115      	bne.n	800f69a <__gesf2+0x4e>
 800f66e:	2a00      	cmp	r2, #0
 800f670:	d101      	bne.n	800f676 <__gesf2+0x2a>
 800f672:	2e00      	cmp	r6, #0
 800f674:	d01c      	beq.n	800f6b0 <__gesf2+0x64>
 800f676:	2d00      	cmp	r5, #0
 800f678:	d014      	beq.n	800f6a4 <__gesf2+0x58>
 800f67a:	428b      	cmp	r3, r1
 800f67c:	d027      	beq.n	800f6ce <__gesf2+0x82>
 800f67e:	2002      	movs	r0, #2
 800f680:	3b01      	subs	r3, #1
 800f682:	4018      	ands	r0, r3
 800f684:	3801      	subs	r0, #1
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	2e00      	cmp	r6, #0
 800f68a:	d0ee      	beq.n	800f66a <__gesf2+0x1e>
 800f68c:	2002      	movs	r0, #2
 800f68e:	4240      	negs	r0, r0
 800f690:	e7f9      	b.n	800f686 <__gesf2+0x3a>
 800f692:	2d00      	cmp	r5, #0
 800f694:	d1fa      	bne.n	800f68c <__gesf2+0x40>
 800f696:	2aff      	cmp	r2, #255	; 0xff
 800f698:	d00e      	beq.n	800f6b8 <__gesf2+0x6c>
 800f69a:	2a00      	cmp	r2, #0
 800f69c:	d10e      	bne.n	800f6bc <__gesf2+0x70>
 800f69e:	2e00      	cmp	r6, #0
 800f6a0:	d0ed      	beq.n	800f67e <__gesf2+0x32>
 800f6a2:	e00b      	b.n	800f6bc <__gesf2+0x70>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	3901      	subs	r1, #1
 800f6a8:	4399      	bics	r1, r3
 800f6aa:	0008      	movs	r0, r1
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	e7ea      	b.n	800f686 <__gesf2+0x3a>
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	d0e7      	beq.n	800f686 <__gesf2+0x3a>
 800f6b6:	e7e2      	b.n	800f67e <__gesf2+0x32>
 800f6b8:	2e00      	cmp	r6, #0
 800f6ba:	d1e7      	bne.n	800f68c <__gesf2+0x40>
 800f6bc:	428b      	cmp	r3, r1
 800f6be:	d1de      	bne.n	800f67e <__gesf2+0x32>
 800f6c0:	4294      	cmp	r4, r2
 800f6c2:	dd05      	ble.n	800f6d0 <__gesf2+0x84>
 800f6c4:	2102      	movs	r1, #2
 800f6c6:	1e58      	subs	r0, r3, #1
 800f6c8:	4008      	ands	r0, r1
 800f6ca:	3801      	subs	r0, #1
 800f6cc:	e7db      	b.n	800f686 <__gesf2+0x3a>
 800f6ce:	2400      	movs	r4, #0
 800f6d0:	42a2      	cmp	r2, r4
 800f6d2:	dc04      	bgt.n	800f6de <__gesf2+0x92>
 800f6d4:	42b5      	cmp	r5, r6
 800f6d6:	d8d2      	bhi.n	800f67e <__gesf2+0x32>
 800f6d8:	2000      	movs	r0, #0
 800f6da:	42b5      	cmp	r5, r6
 800f6dc:	d2d3      	bcs.n	800f686 <__gesf2+0x3a>
 800f6de:	1e58      	subs	r0, r3, #1
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	4398      	bics	r0, r3
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	e7ce      	b.n	800f686 <__gesf2+0x3a>

0800f6e8 <__lesf2>:
 800f6e8:	b530      	push	{r4, r5, lr}
 800f6ea:	0042      	lsls	r2, r0, #1
 800f6ec:	0244      	lsls	r4, r0, #9
 800f6ee:	024d      	lsls	r5, r1, #9
 800f6f0:	0fc3      	lsrs	r3, r0, #31
 800f6f2:	0048      	lsls	r0, r1, #1
 800f6f4:	0a64      	lsrs	r4, r4, #9
 800f6f6:	0e12      	lsrs	r2, r2, #24
 800f6f8:	0a6d      	lsrs	r5, r5, #9
 800f6fa:	0e00      	lsrs	r0, r0, #24
 800f6fc:	0fc9      	lsrs	r1, r1, #31
 800f6fe:	2aff      	cmp	r2, #255	; 0xff
 800f700:	d012      	beq.n	800f728 <__lesf2+0x40>
 800f702:	28ff      	cmp	r0, #255	; 0xff
 800f704:	d00c      	beq.n	800f720 <__lesf2+0x38>
 800f706:	2a00      	cmp	r2, #0
 800f708:	d112      	bne.n	800f730 <__lesf2+0x48>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	d119      	bne.n	800f742 <__lesf2+0x5a>
 800f70e:	2d00      	cmp	r5, #0
 800f710:	d117      	bne.n	800f742 <__lesf2+0x5a>
 800f712:	2c00      	cmp	r4, #0
 800f714:	d02b      	beq.n	800f76e <__lesf2+0x86>
 800f716:	2002      	movs	r0, #2
 800f718:	3b01      	subs	r3, #1
 800f71a:	4018      	ands	r0, r3
 800f71c:	3801      	subs	r0, #1
 800f71e:	e026      	b.n	800f76e <__lesf2+0x86>
 800f720:	2d00      	cmp	r5, #0
 800f722:	d0f0      	beq.n	800f706 <__lesf2+0x1e>
 800f724:	2002      	movs	r0, #2
 800f726:	e022      	b.n	800f76e <__lesf2+0x86>
 800f728:	2c00      	cmp	r4, #0
 800f72a:	d1fb      	bne.n	800f724 <__lesf2+0x3c>
 800f72c:	28ff      	cmp	r0, #255	; 0xff
 800f72e:	d01f      	beq.n	800f770 <__lesf2+0x88>
 800f730:	2800      	cmp	r0, #0
 800f732:	d11f      	bne.n	800f774 <__lesf2+0x8c>
 800f734:	2d00      	cmp	r5, #0
 800f736:	d11d      	bne.n	800f774 <__lesf2+0x8c>
 800f738:	2002      	movs	r0, #2
 800f73a:	3b01      	subs	r3, #1
 800f73c:	4018      	ands	r0, r3
 800f73e:	3801      	subs	r0, #1
 800f740:	e015      	b.n	800f76e <__lesf2+0x86>
 800f742:	2c00      	cmp	r4, #0
 800f744:	d00e      	beq.n	800f764 <__lesf2+0x7c>
 800f746:	428b      	cmp	r3, r1
 800f748:	d1e5      	bne.n	800f716 <__lesf2+0x2e>
 800f74a:	2200      	movs	r2, #0
 800f74c:	4290      	cmp	r0, r2
 800f74e:	dc04      	bgt.n	800f75a <__lesf2+0x72>
 800f750:	42ac      	cmp	r4, r5
 800f752:	d8e0      	bhi.n	800f716 <__lesf2+0x2e>
 800f754:	2000      	movs	r0, #0
 800f756:	42ac      	cmp	r4, r5
 800f758:	d209      	bcs.n	800f76e <__lesf2+0x86>
 800f75a:	1e58      	subs	r0, r3, #1
 800f75c:	2301      	movs	r3, #1
 800f75e:	4398      	bics	r0, r3
 800f760:	3001      	adds	r0, #1
 800f762:	e004      	b.n	800f76e <__lesf2+0x86>
 800f764:	2301      	movs	r3, #1
 800f766:	3901      	subs	r1, #1
 800f768:	4399      	bics	r1, r3
 800f76a:	0008      	movs	r0, r1
 800f76c:	3001      	adds	r0, #1
 800f76e:	bd30      	pop	{r4, r5, pc}
 800f770:	2d00      	cmp	r5, #0
 800f772:	d1d7      	bne.n	800f724 <__lesf2+0x3c>
 800f774:	428b      	cmp	r3, r1
 800f776:	d1ce      	bne.n	800f716 <__lesf2+0x2e>
 800f778:	4282      	cmp	r2, r0
 800f77a:	dde7      	ble.n	800f74c <__lesf2+0x64>
 800f77c:	2102      	movs	r1, #2
 800f77e:	1e58      	subs	r0, r3, #1
 800f780:	4008      	ands	r0, r1
 800f782:	3801      	subs	r0, #1
 800f784:	e7f3      	b.n	800f76e <__lesf2+0x86>
 800f786:	46c0      	nop			; (mov r8, r8)

0800f788 <__aeabi_fcmpun>:
 800f788:	0242      	lsls	r2, r0, #9
 800f78a:	024b      	lsls	r3, r1, #9
 800f78c:	0040      	lsls	r0, r0, #1
 800f78e:	0049      	lsls	r1, r1, #1
 800f790:	0a52      	lsrs	r2, r2, #9
 800f792:	0a5b      	lsrs	r3, r3, #9
 800f794:	0e09      	lsrs	r1, r1, #24
 800f796:	0e00      	lsrs	r0, r0, #24
 800f798:	28ff      	cmp	r0, #255	; 0xff
 800f79a:	d006      	beq.n	800f7aa <__aeabi_fcmpun+0x22>
 800f79c:	2000      	movs	r0, #0
 800f79e:	29ff      	cmp	r1, #255	; 0xff
 800f7a0:	d102      	bne.n	800f7a8 <__aeabi_fcmpun+0x20>
 800f7a2:	0018      	movs	r0, r3
 800f7a4:	1e43      	subs	r3, r0, #1
 800f7a6:	4198      	sbcs	r0, r3
 800f7a8:	4770      	bx	lr
 800f7aa:	38fe      	subs	r0, #254	; 0xfe
 800f7ac:	2a00      	cmp	r2, #0
 800f7ae:	d1fb      	bne.n	800f7a8 <__aeabi_fcmpun+0x20>
 800f7b0:	e7f4      	b.n	800f79c <__aeabi_fcmpun+0x14>
 800f7b2:	46c0      	nop			; (mov r8, r8)

0800f7b4 <__aeabi_f2iz>:
 800f7b4:	0241      	lsls	r1, r0, #9
 800f7b6:	0042      	lsls	r2, r0, #1
 800f7b8:	0fc3      	lsrs	r3, r0, #31
 800f7ba:	0a49      	lsrs	r1, r1, #9
 800f7bc:	0e12      	lsrs	r2, r2, #24
 800f7be:	2000      	movs	r0, #0
 800f7c0:	2a7e      	cmp	r2, #126	; 0x7e
 800f7c2:	d90d      	bls.n	800f7e0 <__aeabi_f2iz+0x2c>
 800f7c4:	2a9d      	cmp	r2, #157	; 0x9d
 800f7c6:	d80c      	bhi.n	800f7e2 <__aeabi_f2iz+0x2e>
 800f7c8:	2080      	movs	r0, #128	; 0x80
 800f7ca:	0400      	lsls	r0, r0, #16
 800f7cc:	4301      	orrs	r1, r0
 800f7ce:	2a95      	cmp	r2, #149	; 0x95
 800f7d0:	dc0a      	bgt.n	800f7e8 <__aeabi_f2iz+0x34>
 800f7d2:	2096      	movs	r0, #150	; 0x96
 800f7d4:	1a82      	subs	r2, r0, r2
 800f7d6:	40d1      	lsrs	r1, r2
 800f7d8:	4248      	negs	r0, r1
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d100      	bne.n	800f7e0 <__aeabi_f2iz+0x2c>
 800f7de:	0008      	movs	r0, r1
 800f7e0:	4770      	bx	lr
 800f7e2:	4a03      	ldr	r2, [pc, #12]	; (800f7f0 <__aeabi_f2iz+0x3c>)
 800f7e4:	1898      	adds	r0, r3, r2
 800f7e6:	e7fb      	b.n	800f7e0 <__aeabi_f2iz+0x2c>
 800f7e8:	3a96      	subs	r2, #150	; 0x96
 800f7ea:	4091      	lsls	r1, r2
 800f7ec:	e7f4      	b.n	800f7d8 <__aeabi_f2iz+0x24>
 800f7ee:	46c0      	nop			; (mov r8, r8)
 800f7f0:	7fffffff 	.word	0x7fffffff

0800f7f4 <__aeabi_i2f>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d03d      	beq.n	800f876 <__aeabi_i2f+0x82>
 800f7fa:	17c3      	asrs	r3, r0, #31
 800f7fc:	18c5      	adds	r5, r0, r3
 800f7fe:	405d      	eors	r5, r3
 800f800:	0fc4      	lsrs	r4, r0, #31
 800f802:	0028      	movs	r0, r5
 800f804:	f7ff fbb8 	bl	800ef78 <__clzsi2>
 800f808:	229e      	movs	r2, #158	; 0x9e
 800f80a:	1a12      	subs	r2, r2, r0
 800f80c:	2a96      	cmp	r2, #150	; 0x96
 800f80e:	dc07      	bgt.n	800f820 <__aeabi_i2f+0x2c>
 800f810:	b2d2      	uxtb	r2, r2
 800f812:	2808      	cmp	r0, #8
 800f814:	dd33      	ble.n	800f87e <__aeabi_i2f+0x8a>
 800f816:	3808      	subs	r0, #8
 800f818:	4085      	lsls	r5, r0
 800f81a:	0268      	lsls	r0, r5, #9
 800f81c:	0a40      	lsrs	r0, r0, #9
 800f81e:	e023      	b.n	800f868 <__aeabi_i2f+0x74>
 800f820:	2a99      	cmp	r2, #153	; 0x99
 800f822:	dd0b      	ble.n	800f83c <__aeabi_i2f+0x48>
 800f824:	2305      	movs	r3, #5
 800f826:	0029      	movs	r1, r5
 800f828:	1a1b      	subs	r3, r3, r0
 800f82a:	40d9      	lsrs	r1, r3
 800f82c:	0003      	movs	r3, r0
 800f82e:	331b      	adds	r3, #27
 800f830:	409d      	lsls	r5, r3
 800f832:	002b      	movs	r3, r5
 800f834:	1e5d      	subs	r5, r3, #1
 800f836:	41ab      	sbcs	r3, r5
 800f838:	4319      	orrs	r1, r3
 800f83a:	000d      	movs	r5, r1
 800f83c:	2805      	cmp	r0, #5
 800f83e:	dd01      	ble.n	800f844 <__aeabi_i2f+0x50>
 800f840:	1f43      	subs	r3, r0, #5
 800f842:	409d      	lsls	r5, r3
 800f844:	002b      	movs	r3, r5
 800f846:	490f      	ldr	r1, [pc, #60]	; (800f884 <__aeabi_i2f+0x90>)
 800f848:	400b      	ands	r3, r1
 800f84a:	076e      	lsls	r6, r5, #29
 800f84c:	d009      	beq.n	800f862 <__aeabi_i2f+0x6e>
 800f84e:	260f      	movs	r6, #15
 800f850:	4035      	ands	r5, r6
 800f852:	2d04      	cmp	r5, #4
 800f854:	d005      	beq.n	800f862 <__aeabi_i2f+0x6e>
 800f856:	3304      	adds	r3, #4
 800f858:	015d      	lsls	r5, r3, #5
 800f85a:	d502      	bpl.n	800f862 <__aeabi_i2f+0x6e>
 800f85c:	229f      	movs	r2, #159	; 0x9f
 800f85e:	400b      	ands	r3, r1
 800f860:	1a12      	subs	r2, r2, r0
 800f862:	019b      	lsls	r3, r3, #6
 800f864:	0a58      	lsrs	r0, r3, #9
 800f866:	b2d2      	uxtb	r2, r2
 800f868:	0240      	lsls	r0, r0, #9
 800f86a:	05d2      	lsls	r2, r2, #23
 800f86c:	0a40      	lsrs	r0, r0, #9
 800f86e:	07e4      	lsls	r4, r4, #31
 800f870:	4310      	orrs	r0, r2
 800f872:	4320      	orrs	r0, r4
 800f874:	bd70      	pop	{r4, r5, r6, pc}
 800f876:	2400      	movs	r4, #0
 800f878:	2200      	movs	r2, #0
 800f87a:	2000      	movs	r0, #0
 800f87c:	e7f4      	b.n	800f868 <__aeabi_i2f+0x74>
 800f87e:	0268      	lsls	r0, r5, #9
 800f880:	0a40      	lsrs	r0, r0, #9
 800f882:	e7f1      	b.n	800f868 <__aeabi_i2f+0x74>
 800f884:	fbffffff 	.word	0xfbffffff

0800f888 <__aeabi_ui2f>:
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	1e04      	subs	r4, r0, #0
 800f88c:	d034      	beq.n	800f8f8 <__aeabi_ui2f+0x70>
 800f88e:	f7ff fb73 	bl	800ef78 <__clzsi2>
 800f892:	229e      	movs	r2, #158	; 0x9e
 800f894:	1a12      	subs	r2, r2, r0
 800f896:	2a96      	cmp	r2, #150	; 0x96
 800f898:	dc07      	bgt.n	800f8aa <__aeabi_ui2f+0x22>
 800f89a:	b2d2      	uxtb	r2, r2
 800f89c:	2808      	cmp	r0, #8
 800f89e:	dd2e      	ble.n	800f8fe <__aeabi_ui2f+0x76>
 800f8a0:	3808      	subs	r0, #8
 800f8a2:	4084      	lsls	r4, r0
 800f8a4:	0260      	lsls	r0, r4, #9
 800f8a6:	0a40      	lsrs	r0, r0, #9
 800f8a8:	e021      	b.n	800f8ee <__aeabi_ui2f+0x66>
 800f8aa:	2a99      	cmp	r2, #153	; 0x99
 800f8ac:	dd09      	ble.n	800f8c2 <__aeabi_ui2f+0x3a>
 800f8ae:	0003      	movs	r3, r0
 800f8b0:	0021      	movs	r1, r4
 800f8b2:	331b      	adds	r3, #27
 800f8b4:	4099      	lsls	r1, r3
 800f8b6:	1e4b      	subs	r3, r1, #1
 800f8b8:	4199      	sbcs	r1, r3
 800f8ba:	2305      	movs	r3, #5
 800f8bc:	1a1b      	subs	r3, r3, r0
 800f8be:	40dc      	lsrs	r4, r3
 800f8c0:	430c      	orrs	r4, r1
 800f8c2:	2805      	cmp	r0, #5
 800f8c4:	dd01      	ble.n	800f8ca <__aeabi_ui2f+0x42>
 800f8c6:	1f43      	subs	r3, r0, #5
 800f8c8:	409c      	lsls	r4, r3
 800f8ca:	0023      	movs	r3, r4
 800f8cc:	490d      	ldr	r1, [pc, #52]	; (800f904 <__aeabi_ui2f+0x7c>)
 800f8ce:	400b      	ands	r3, r1
 800f8d0:	0765      	lsls	r5, r4, #29
 800f8d2:	d009      	beq.n	800f8e8 <__aeabi_ui2f+0x60>
 800f8d4:	250f      	movs	r5, #15
 800f8d6:	402c      	ands	r4, r5
 800f8d8:	2c04      	cmp	r4, #4
 800f8da:	d005      	beq.n	800f8e8 <__aeabi_ui2f+0x60>
 800f8dc:	3304      	adds	r3, #4
 800f8de:	015c      	lsls	r4, r3, #5
 800f8e0:	d502      	bpl.n	800f8e8 <__aeabi_ui2f+0x60>
 800f8e2:	229f      	movs	r2, #159	; 0x9f
 800f8e4:	400b      	ands	r3, r1
 800f8e6:	1a12      	subs	r2, r2, r0
 800f8e8:	019b      	lsls	r3, r3, #6
 800f8ea:	0a58      	lsrs	r0, r3, #9
 800f8ec:	b2d2      	uxtb	r2, r2
 800f8ee:	0240      	lsls	r0, r0, #9
 800f8f0:	05d2      	lsls	r2, r2, #23
 800f8f2:	0a40      	lsrs	r0, r0, #9
 800f8f4:	4310      	orrs	r0, r2
 800f8f6:	bd70      	pop	{r4, r5, r6, pc}
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	e7f7      	b.n	800f8ee <__aeabi_ui2f+0x66>
 800f8fe:	0260      	lsls	r0, r4, #9
 800f900:	0a40      	lsrs	r0, r0, #9
 800f902:	e7f4      	b.n	800f8ee <__aeabi_ui2f+0x66>
 800f904:	fbffffff 	.word	0xfbffffff

0800f908 <__aeabi_dadd>:
 800f908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90a:	464f      	mov	r7, r9
 800f90c:	4646      	mov	r6, r8
 800f90e:	46d6      	mov	lr, sl
 800f910:	000c      	movs	r4, r1
 800f912:	0309      	lsls	r1, r1, #12
 800f914:	b5c0      	push	{r6, r7, lr}
 800f916:	0a49      	lsrs	r1, r1, #9
 800f918:	0f47      	lsrs	r7, r0, #29
 800f91a:	005e      	lsls	r6, r3, #1
 800f91c:	4339      	orrs	r1, r7
 800f91e:	031f      	lsls	r7, r3, #12
 800f920:	0fdb      	lsrs	r3, r3, #31
 800f922:	469c      	mov	ip, r3
 800f924:	0065      	lsls	r5, r4, #1
 800f926:	0a7b      	lsrs	r3, r7, #9
 800f928:	0f57      	lsrs	r7, r2, #29
 800f92a:	431f      	orrs	r7, r3
 800f92c:	0d6d      	lsrs	r5, r5, #21
 800f92e:	0fe4      	lsrs	r4, r4, #31
 800f930:	0d76      	lsrs	r6, r6, #21
 800f932:	46a1      	mov	r9, r4
 800f934:	00c0      	lsls	r0, r0, #3
 800f936:	46b8      	mov	r8, r7
 800f938:	00d2      	lsls	r2, r2, #3
 800f93a:	1bab      	subs	r3, r5, r6
 800f93c:	4564      	cmp	r4, ip
 800f93e:	d07b      	beq.n	800fa38 <__aeabi_dadd+0x130>
 800f940:	2b00      	cmp	r3, #0
 800f942:	dd5f      	ble.n	800fa04 <__aeabi_dadd+0xfc>
 800f944:	2e00      	cmp	r6, #0
 800f946:	d000      	beq.n	800f94a <__aeabi_dadd+0x42>
 800f948:	e0a4      	b.n	800fa94 <__aeabi_dadd+0x18c>
 800f94a:	003e      	movs	r6, r7
 800f94c:	4316      	orrs	r6, r2
 800f94e:	d100      	bne.n	800f952 <__aeabi_dadd+0x4a>
 800f950:	e112      	b.n	800fb78 <__aeabi_dadd+0x270>
 800f952:	1e5e      	subs	r6, r3, #1
 800f954:	2e00      	cmp	r6, #0
 800f956:	d000      	beq.n	800f95a <__aeabi_dadd+0x52>
 800f958:	e19e      	b.n	800fc98 <__aeabi_dadd+0x390>
 800f95a:	1a87      	subs	r7, r0, r2
 800f95c:	4643      	mov	r3, r8
 800f95e:	42b8      	cmp	r0, r7
 800f960:	4180      	sbcs	r0, r0
 800f962:	2501      	movs	r5, #1
 800f964:	1ac9      	subs	r1, r1, r3
 800f966:	4240      	negs	r0, r0
 800f968:	1a09      	subs	r1, r1, r0
 800f96a:	020b      	lsls	r3, r1, #8
 800f96c:	d400      	bmi.n	800f970 <__aeabi_dadd+0x68>
 800f96e:	e131      	b.n	800fbd4 <__aeabi_dadd+0x2cc>
 800f970:	0249      	lsls	r1, r1, #9
 800f972:	0a4e      	lsrs	r6, r1, #9
 800f974:	2e00      	cmp	r6, #0
 800f976:	d100      	bne.n	800f97a <__aeabi_dadd+0x72>
 800f978:	e16e      	b.n	800fc58 <__aeabi_dadd+0x350>
 800f97a:	0030      	movs	r0, r6
 800f97c:	f7ff fafc 	bl	800ef78 <__clzsi2>
 800f980:	0003      	movs	r3, r0
 800f982:	3b08      	subs	r3, #8
 800f984:	2b1f      	cmp	r3, #31
 800f986:	dd00      	ble.n	800f98a <__aeabi_dadd+0x82>
 800f988:	e161      	b.n	800fc4e <__aeabi_dadd+0x346>
 800f98a:	2220      	movs	r2, #32
 800f98c:	0039      	movs	r1, r7
 800f98e:	1ad2      	subs	r2, r2, r3
 800f990:	409e      	lsls	r6, r3
 800f992:	40d1      	lsrs	r1, r2
 800f994:	409f      	lsls	r7, r3
 800f996:	430e      	orrs	r6, r1
 800f998:	429d      	cmp	r5, r3
 800f99a:	dd00      	ble.n	800f99e <__aeabi_dadd+0x96>
 800f99c:	e151      	b.n	800fc42 <__aeabi_dadd+0x33a>
 800f99e:	1b5d      	subs	r5, r3, r5
 800f9a0:	1c6b      	adds	r3, r5, #1
 800f9a2:	2b1f      	cmp	r3, #31
 800f9a4:	dd00      	ble.n	800f9a8 <__aeabi_dadd+0xa0>
 800f9a6:	e17c      	b.n	800fca2 <__aeabi_dadd+0x39a>
 800f9a8:	2120      	movs	r1, #32
 800f9aa:	1ac9      	subs	r1, r1, r3
 800f9ac:	003d      	movs	r5, r7
 800f9ae:	0030      	movs	r0, r6
 800f9b0:	408f      	lsls	r7, r1
 800f9b2:	4088      	lsls	r0, r1
 800f9b4:	40dd      	lsrs	r5, r3
 800f9b6:	1e79      	subs	r1, r7, #1
 800f9b8:	418f      	sbcs	r7, r1
 800f9ba:	0031      	movs	r1, r6
 800f9bc:	2207      	movs	r2, #7
 800f9be:	4328      	orrs	r0, r5
 800f9c0:	40d9      	lsrs	r1, r3
 800f9c2:	2500      	movs	r5, #0
 800f9c4:	4307      	orrs	r7, r0
 800f9c6:	403a      	ands	r2, r7
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	d009      	beq.n	800f9e0 <__aeabi_dadd+0xd8>
 800f9cc:	230f      	movs	r3, #15
 800f9ce:	403b      	ands	r3, r7
 800f9d0:	2b04      	cmp	r3, #4
 800f9d2:	d005      	beq.n	800f9e0 <__aeabi_dadd+0xd8>
 800f9d4:	1d3b      	adds	r3, r7, #4
 800f9d6:	42bb      	cmp	r3, r7
 800f9d8:	41bf      	sbcs	r7, r7
 800f9da:	427f      	negs	r7, r7
 800f9dc:	19c9      	adds	r1, r1, r7
 800f9de:	001f      	movs	r7, r3
 800f9e0:	020b      	lsls	r3, r1, #8
 800f9e2:	d400      	bmi.n	800f9e6 <__aeabi_dadd+0xde>
 800f9e4:	e226      	b.n	800fe34 <__aeabi_dadd+0x52c>
 800f9e6:	1c6a      	adds	r2, r5, #1
 800f9e8:	4bc6      	ldr	r3, [pc, #792]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800f9ea:	0555      	lsls	r5, r2, #21
 800f9ec:	0d6d      	lsrs	r5, r5, #21
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d100      	bne.n	800f9f4 <__aeabi_dadd+0xec>
 800f9f2:	e106      	b.n	800fc02 <__aeabi_dadd+0x2fa>
 800f9f4:	4ac4      	ldr	r2, [pc, #784]	; (800fd08 <__aeabi_dadd+0x400>)
 800f9f6:	08ff      	lsrs	r7, r7, #3
 800f9f8:	400a      	ands	r2, r1
 800f9fa:	0753      	lsls	r3, r2, #29
 800f9fc:	0252      	lsls	r2, r2, #9
 800f9fe:	433b      	orrs	r3, r7
 800fa00:	0b12      	lsrs	r2, r2, #12
 800fa02:	e08e      	b.n	800fb22 <__aeabi_dadd+0x21a>
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d000      	beq.n	800fa0a <__aeabi_dadd+0x102>
 800fa08:	e0b8      	b.n	800fb7c <__aeabi_dadd+0x274>
 800fa0a:	1c6b      	adds	r3, r5, #1
 800fa0c:	055b      	lsls	r3, r3, #21
 800fa0e:	0d5b      	lsrs	r3, r3, #21
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	dc00      	bgt.n	800fa16 <__aeabi_dadd+0x10e>
 800fa14:	e130      	b.n	800fc78 <__aeabi_dadd+0x370>
 800fa16:	1a87      	subs	r7, r0, r2
 800fa18:	4643      	mov	r3, r8
 800fa1a:	42b8      	cmp	r0, r7
 800fa1c:	41b6      	sbcs	r6, r6
 800fa1e:	1acb      	subs	r3, r1, r3
 800fa20:	4276      	negs	r6, r6
 800fa22:	1b9e      	subs	r6, r3, r6
 800fa24:	0233      	lsls	r3, r6, #8
 800fa26:	d500      	bpl.n	800fa2a <__aeabi_dadd+0x122>
 800fa28:	e14c      	b.n	800fcc4 <__aeabi_dadd+0x3bc>
 800fa2a:	003b      	movs	r3, r7
 800fa2c:	4333      	orrs	r3, r6
 800fa2e:	d1a1      	bne.n	800f974 <__aeabi_dadd+0x6c>
 800fa30:	2200      	movs	r2, #0
 800fa32:	2400      	movs	r4, #0
 800fa34:	2500      	movs	r5, #0
 800fa36:	e070      	b.n	800fb1a <__aeabi_dadd+0x212>
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	dc00      	bgt.n	800fa3e <__aeabi_dadd+0x136>
 800fa3c:	e0e5      	b.n	800fc0a <__aeabi_dadd+0x302>
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	d100      	bne.n	800fa44 <__aeabi_dadd+0x13c>
 800fa42:	e083      	b.n	800fb4c <__aeabi_dadd+0x244>
 800fa44:	4eaf      	ldr	r6, [pc, #700]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fa46:	42b5      	cmp	r5, r6
 800fa48:	d060      	beq.n	800fb0c <__aeabi_dadd+0x204>
 800fa4a:	2680      	movs	r6, #128	; 0x80
 800fa4c:	0436      	lsls	r6, r6, #16
 800fa4e:	4337      	orrs	r7, r6
 800fa50:	46b8      	mov	r8, r7
 800fa52:	2b38      	cmp	r3, #56	; 0x38
 800fa54:	dc00      	bgt.n	800fa58 <__aeabi_dadd+0x150>
 800fa56:	e13e      	b.n	800fcd6 <__aeabi_dadd+0x3ce>
 800fa58:	4643      	mov	r3, r8
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	001f      	movs	r7, r3
 800fa5e:	1e7a      	subs	r2, r7, #1
 800fa60:	4197      	sbcs	r7, r2
 800fa62:	183f      	adds	r7, r7, r0
 800fa64:	4287      	cmp	r7, r0
 800fa66:	4180      	sbcs	r0, r0
 800fa68:	4240      	negs	r0, r0
 800fa6a:	1809      	adds	r1, r1, r0
 800fa6c:	020b      	lsls	r3, r1, #8
 800fa6e:	d400      	bmi.n	800fa72 <__aeabi_dadd+0x16a>
 800fa70:	e0b0      	b.n	800fbd4 <__aeabi_dadd+0x2cc>
 800fa72:	4ba4      	ldr	r3, [pc, #656]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fa74:	3501      	adds	r5, #1
 800fa76:	429d      	cmp	r5, r3
 800fa78:	d100      	bne.n	800fa7c <__aeabi_dadd+0x174>
 800fa7a:	e0c3      	b.n	800fc04 <__aeabi_dadd+0x2fc>
 800fa7c:	4aa2      	ldr	r2, [pc, #648]	; (800fd08 <__aeabi_dadd+0x400>)
 800fa7e:	087b      	lsrs	r3, r7, #1
 800fa80:	400a      	ands	r2, r1
 800fa82:	2101      	movs	r1, #1
 800fa84:	400f      	ands	r7, r1
 800fa86:	431f      	orrs	r7, r3
 800fa88:	0851      	lsrs	r1, r2, #1
 800fa8a:	07d3      	lsls	r3, r2, #31
 800fa8c:	2207      	movs	r2, #7
 800fa8e:	431f      	orrs	r7, r3
 800fa90:	403a      	ands	r2, r7
 800fa92:	e799      	b.n	800f9c8 <__aeabi_dadd+0xc0>
 800fa94:	4e9b      	ldr	r6, [pc, #620]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fa96:	42b5      	cmp	r5, r6
 800fa98:	d038      	beq.n	800fb0c <__aeabi_dadd+0x204>
 800fa9a:	2680      	movs	r6, #128	; 0x80
 800fa9c:	0436      	lsls	r6, r6, #16
 800fa9e:	4337      	orrs	r7, r6
 800faa0:	46b8      	mov	r8, r7
 800faa2:	2b38      	cmp	r3, #56	; 0x38
 800faa4:	dd00      	ble.n	800faa8 <__aeabi_dadd+0x1a0>
 800faa6:	e0dc      	b.n	800fc62 <__aeabi_dadd+0x35a>
 800faa8:	2b1f      	cmp	r3, #31
 800faaa:	dc00      	bgt.n	800faae <__aeabi_dadd+0x1a6>
 800faac:	e130      	b.n	800fd10 <__aeabi_dadd+0x408>
 800faae:	001e      	movs	r6, r3
 800fab0:	4647      	mov	r7, r8
 800fab2:	3e20      	subs	r6, #32
 800fab4:	40f7      	lsrs	r7, r6
 800fab6:	46bc      	mov	ip, r7
 800fab8:	2b20      	cmp	r3, #32
 800faba:	d004      	beq.n	800fac6 <__aeabi_dadd+0x1be>
 800fabc:	2640      	movs	r6, #64	; 0x40
 800fabe:	1af3      	subs	r3, r6, r3
 800fac0:	4646      	mov	r6, r8
 800fac2:	409e      	lsls	r6, r3
 800fac4:	4332      	orrs	r2, r6
 800fac6:	0017      	movs	r7, r2
 800fac8:	4663      	mov	r3, ip
 800faca:	1e7a      	subs	r2, r7, #1
 800facc:	4197      	sbcs	r7, r2
 800face:	431f      	orrs	r7, r3
 800fad0:	e0cc      	b.n	800fc6c <__aeabi_dadd+0x364>
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d100      	bne.n	800fad8 <__aeabi_dadd+0x1d0>
 800fad6:	e204      	b.n	800fee2 <__aeabi_dadd+0x5da>
 800fad8:	4643      	mov	r3, r8
 800fada:	4313      	orrs	r3, r2
 800fadc:	d100      	bne.n	800fae0 <__aeabi_dadd+0x1d8>
 800fade:	e159      	b.n	800fd94 <__aeabi_dadd+0x48c>
 800fae0:	074b      	lsls	r3, r1, #29
 800fae2:	08c0      	lsrs	r0, r0, #3
 800fae4:	4318      	orrs	r0, r3
 800fae6:	2380      	movs	r3, #128	; 0x80
 800fae8:	08c9      	lsrs	r1, r1, #3
 800faea:	031b      	lsls	r3, r3, #12
 800faec:	4219      	tst	r1, r3
 800faee:	d008      	beq.n	800fb02 <__aeabi_dadd+0x1fa>
 800faf0:	4645      	mov	r5, r8
 800faf2:	08ed      	lsrs	r5, r5, #3
 800faf4:	421d      	tst	r5, r3
 800faf6:	d104      	bne.n	800fb02 <__aeabi_dadd+0x1fa>
 800faf8:	4643      	mov	r3, r8
 800fafa:	08d0      	lsrs	r0, r2, #3
 800fafc:	0759      	lsls	r1, r3, #29
 800fafe:	4308      	orrs	r0, r1
 800fb00:	0029      	movs	r1, r5
 800fb02:	0f42      	lsrs	r2, r0, #29
 800fb04:	00c9      	lsls	r1, r1, #3
 800fb06:	4d7f      	ldr	r5, [pc, #508]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fb08:	4311      	orrs	r1, r2
 800fb0a:	00c0      	lsls	r0, r0, #3
 800fb0c:	074b      	lsls	r3, r1, #29
 800fb0e:	08ca      	lsrs	r2, r1, #3
 800fb10:	497c      	ldr	r1, [pc, #496]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fb12:	08c0      	lsrs	r0, r0, #3
 800fb14:	4303      	orrs	r3, r0
 800fb16:	428d      	cmp	r5, r1
 800fb18:	d068      	beq.n	800fbec <__aeabi_dadd+0x2e4>
 800fb1a:	0312      	lsls	r2, r2, #12
 800fb1c:	056d      	lsls	r5, r5, #21
 800fb1e:	0b12      	lsrs	r2, r2, #12
 800fb20:	0d6d      	lsrs	r5, r5, #21
 800fb22:	2100      	movs	r1, #0
 800fb24:	0312      	lsls	r2, r2, #12
 800fb26:	0018      	movs	r0, r3
 800fb28:	0b13      	lsrs	r3, r2, #12
 800fb2a:	0d0a      	lsrs	r2, r1, #20
 800fb2c:	0512      	lsls	r2, r2, #20
 800fb2e:	431a      	orrs	r2, r3
 800fb30:	4b76      	ldr	r3, [pc, #472]	; (800fd0c <__aeabi_dadd+0x404>)
 800fb32:	052d      	lsls	r5, r5, #20
 800fb34:	4013      	ands	r3, r2
 800fb36:	432b      	orrs	r3, r5
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	07e4      	lsls	r4, r4, #31
 800fb3c:	085b      	lsrs	r3, r3, #1
 800fb3e:	4323      	orrs	r3, r4
 800fb40:	0019      	movs	r1, r3
 800fb42:	bc1c      	pop	{r2, r3, r4}
 800fb44:	4690      	mov	r8, r2
 800fb46:	4699      	mov	r9, r3
 800fb48:	46a2      	mov	sl, r4
 800fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb4c:	003e      	movs	r6, r7
 800fb4e:	4316      	orrs	r6, r2
 800fb50:	d012      	beq.n	800fb78 <__aeabi_dadd+0x270>
 800fb52:	1e5e      	subs	r6, r3, #1
 800fb54:	2e00      	cmp	r6, #0
 800fb56:	d000      	beq.n	800fb5a <__aeabi_dadd+0x252>
 800fb58:	e100      	b.n	800fd5c <__aeabi_dadd+0x454>
 800fb5a:	1887      	adds	r7, r0, r2
 800fb5c:	4287      	cmp	r7, r0
 800fb5e:	4180      	sbcs	r0, r0
 800fb60:	4441      	add	r1, r8
 800fb62:	4240      	negs	r0, r0
 800fb64:	1809      	adds	r1, r1, r0
 800fb66:	2501      	movs	r5, #1
 800fb68:	020b      	lsls	r3, r1, #8
 800fb6a:	d533      	bpl.n	800fbd4 <__aeabi_dadd+0x2cc>
 800fb6c:	2502      	movs	r5, #2
 800fb6e:	e785      	b.n	800fa7c <__aeabi_dadd+0x174>
 800fb70:	4664      	mov	r4, ip
 800fb72:	0033      	movs	r3, r6
 800fb74:	4641      	mov	r1, r8
 800fb76:	0010      	movs	r0, r2
 800fb78:	001d      	movs	r5, r3
 800fb7a:	e7c7      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fb7c:	2d00      	cmp	r5, #0
 800fb7e:	d000      	beq.n	800fb82 <__aeabi_dadd+0x27a>
 800fb80:	e0da      	b.n	800fd38 <__aeabi_dadd+0x430>
 800fb82:	000c      	movs	r4, r1
 800fb84:	4304      	orrs	r4, r0
 800fb86:	d0f3      	beq.n	800fb70 <__aeabi_dadd+0x268>
 800fb88:	1c5c      	adds	r4, r3, #1
 800fb8a:	d100      	bne.n	800fb8e <__aeabi_dadd+0x286>
 800fb8c:	e19f      	b.n	800fece <__aeabi_dadd+0x5c6>
 800fb8e:	4c5d      	ldr	r4, [pc, #372]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fb90:	42a6      	cmp	r6, r4
 800fb92:	d100      	bne.n	800fb96 <__aeabi_dadd+0x28e>
 800fb94:	e12f      	b.n	800fdf6 <__aeabi_dadd+0x4ee>
 800fb96:	43db      	mvns	r3, r3
 800fb98:	2b38      	cmp	r3, #56	; 0x38
 800fb9a:	dd00      	ble.n	800fb9e <__aeabi_dadd+0x296>
 800fb9c:	e166      	b.n	800fe6c <__aeabi_dadd+0x564>
 800fb9e:	2b1f      	cmp	r3, #31
 800fba0:	dd00      	ble.n	800fba4 <__aeabi_dadd+0x29c>
 800fba2:	e183      	b.n	800feac <__aeabi_dadd+0x5a4>
 800fba4:	2420      	movs	r4, #32
 800fba6:	0005      	movs	r5, r0
 800fba8:	1ae4      	subs	r4, r4, r3
 800fbaa:	000f      	movs	r7, r1
 800fbac:	40dd      	lsrs	r5, r3
 800fbae:	40d9      	lsrs	r1, r3
 800fbb0:	40a0      	lsls	r0, r4
 800fbb2:	4643      	mov	r3, r8
 800fbb4:	40a7      	lsls	r7, r4
 800fbb6:	1a5b      	subs	r3, r3, r1
 800fbb8:	1e44      	subs	r4, r0, #1
 800fbba:	41a0      	sbcs	r0, r4
 800fbbc:	4698      	mov	r8, r3
 800fbbe:	432f      	orrs	r7, r5
 800fbc0:	4338      	orrs	r0, r7
 800fbc2:	1a17      	subs	r7, r2, r0
 800fbc4:	42ba      	cmp	r2, r7
 800fbc6:	4192      	sbcs	r2, r2
 800fbc8:	4643      	mov	r3, r8
 800fbca:	4252      	negs	r2, r2
 800fbcc:	1a99      	subs	r1, r3, r2
 800fbce:	4664      	mov	r4, ip
 800fbd0:	0035      	movs	r5, r6
 800fbd2:	e6ca      	b.n	800f96a <__aeabi_dadd+0x62>
 800fbd4:	2207      	movs	r2, #7
 800fbd6:	403a      	ands	r2, r7
 800fbd8:	2a00      	cmp	r2, #0
 800fbda:	d000      	beq.n	800fbde <__aeabi_dadd+0x2d6>
 800fbdc:	e6f6      	b.n	800f9cc <__aeabi_dadd+0xc4>
 800fbde:	074b      	lsls	r3, r1, #29
 800fbe0:	08ca      	lsrs	r2, r1, #3
 800fbe2:	4948      	ldr	r1, [pc, #288]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fbe4:	08ff      	lsrs	r7, r7, #3
 800fbe6:	433b      	orrs	r3, r7
 800fbe8:	428d      	cmp	r5, r1
 800fbea:	d196      	bne.n	800fb1a <__aeabi_dadd+0x212>
 800fbec:	0019      	movs	r1, r3
 800fbee:	4311      	orrs	r1, r2
 800fbf0:	d100      	bne.n	800fbf4 <__aeabi_dadd+0x2ec>
 800fbf2:	e19e      	b.n	800ff32 <__aeabi_dadd+0x62a>
 800fbf4:	2180      	movs	r1, #128	; 0x80
 800fbf6:	0309      	lsls	r1, r1, #12
 800fbf8:	430a      	orrs	r2, r1
 800fbfa:	0312      	lsls	r2, r2, #12
 800fbfc:	0b12      	lsrs	r2, r2, #12
 800fbfe:	4d41      	ldr	r5, [pc, #260]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fc00:	e78f      	b.n	800fb22 <__aeabi_dadd+0x21a>
 800fc02:	0015      	movs	r5, r2
 800fc04:	2200      	movs	r2, #0
 800fc06:	2300      	movs	r3, #0
 800fc08:	e78b      	b.n	800fb22 <__aeabi_dadd+0x21a>
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d000      	beq.n	800fc10 <__aeabi_dadd+0x308>
 800fc0e:	e0c7      	b.n	800fda0 <__aeabi_dadd+0x498>
 800fc10:	1c6b      	adds	r3, r5, #1
 800fc12:	055f      	lsls	r7, r3, #21
 800fc14:	0d7f      	lsrs	r7, r7, #21
 800fc16:	2f01      	cmp	r7, #1
 800fc18:	dc00      	bgt.n	800fc1c <__aeabi_dadd+0x314>
 800fc1a:	e0f1      	b.n	800fe00 <__aeabi_dadd+0x4f8>
 800fc1c:	4d39      	ldr	r5, [pc, #228]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fc1e:	42ab      	cmp	r3, r5
 800fc20:	d100      	bne.n	800fc24 <__aeabi_dadd+0x31c>
 800fc22:	e0b9      	b.n	800fd98 <__aeabi_dadd+0x490>
 800fc24:	1885      	adds	r5, r0, r2
 800fc26:	000a      	movs	r2, r1
 800fc28:	4285      	cmp	r5, r0
 800fc2a:	4189      	sbcs	r1, r1
 800fc2c:	4442      	add	r2, r8
 800fc2e:	4249      	negs	r1, r1
 800fc30:	1851      	adds	r1, r2, r1
 800fc32:	2207      	movs	r2, #7
 800fc34:	07cf      	lsls	r7, r1, #31
 800fc36:	086d      	lsrs	r5, r5, #1
 800fc38:	432f      	orrs	r7, r5
 800fc3a:	0849      	lsrs	r1, r1, #1
 800fc3c:	403a      	ands	r2, r7
 800fc3e:	001d      	movs	r5, r3
 800fc40:	e6c2      	b.n	800f9c8 <__aeabi_dadd+0xc0>
 800fc42:	2207      	movs	r2, #7
 800fc44:	4930      	ldr	r1, [pc, #192]	; (800fd08 <__aeabi_dadd+0x400>)
 800fc46:	1aed      	subs	r5, r5, r3
 800fc48:	4031      	ands	r1, r6
 800fc4a:	403a      	ands	r2, r7
 800fc4c:	e6bc      	b.n	800f9c8 <__aeabi_dadd+0xc0>
 800fc4e:	003e      	movs	r6, r7
 800fc50:	3828      	subs	r0, #40	; 0x28
 800fc52:	4086      	lsls	r6, r0
 800fc54:	2700      	movs	r7, #0
 800fc56:	e69f      	b.n	800f998 <__aeabi_dadd+0x90>
 800fc58:	0038      	movs	r0, r7
 800fc5a:	f7ff f98d 	bl	800ef78 <__clzsi2>
 800fc5e:	3020      	adds	r0, #32
 800fc60:	e68e      	b.n	800f980 <__aeabi_dadd+0x78>
 800fc62:	4643      	mov	r3, r8
 800fc64:	4313      	orrs	r3, r2
 800fc66:	001f      	movs	r7, r3
 800fc68:	1e7a      	subs	r2, r7, #1
 800fc6a:	4197      	sbcs	r7, r2
 800fc6c:	1bc7      	subs	r7, r0, r7
 800fc6e:	42b8      	cmp	r0, r7
 800fc70:	4180      	sbcs	r0, r0
 800fc72:	4240      	negs	r0, r0
 800fc74:	1a09      	subs	r1, r1, r0
 800fc76:	e678      	b.n	800f96a <__aeabi_dadd+0x62>
 800fc78:	000e      	movs	r6, r1
 800fc7a:	003b      	movs	r3, r7
 800fc7c:	4306      	orrs	r6, r0
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	2d00      	cmp	r5, #0
 800fc82:	d161      	bne.n	800fd48 <__aeabi_dadd+0x440>
 800fc84:	2e00      	cmp	r6, #0
 800fc86:	d000      	beq.n	800fc8a <__aeabi_dadd+0x382>
 800fc88:	e0f4      	b.n	800fe74 <__aeabi_dadd+0x56c>
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d100      	bne.n	800fc90 <__aeabi_dadd+0x388>
 800fc8e:	e11b      	b.n	800fec8 <__aeabi_dadd+0x5c0>
 800fc90:	4664      	mov	r4, ip
 800fc92:	0039      	movs	r1, r7
 800fc94:	0010      	movs	r0, r2
 800fc96:	e739      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fc98:	4f1a      	ldr	r7, [pc, #104]	; (800fd04 <__aeabi_dadd+0x3fc>)
 800fc9a:	42bb      	cmp	r3, r7
 800fc9c:	d07a      	beq.n	800fd94 <__aeabi_dadd+0x48c>
 800fc9e:	0033      	movs	r3, r6
 800fca0:	e6ff      	b.n	800faa2 <__aeabi_dadd+0x19a>
 800fca2:	0030      	movs	r0, r6
 800fca4:	3d1f      	subs	r5, #31
 800fca6:	40e8      	lsrs	r0, r5
 800fca8:	2b20      	cmp	r3, #32
 800fcaa:	d003      	beq.n	800fcb4 <__aeabi_dadd+0x3ac>
 800fcac:	2140      	movs	r1, #64	; 0x40
 800fcae:	1acb      	subs	r3, r1, r3
 800fcb0:	409e      	lsls	r6, r3
 800fcb2:	4337      	orrs	r7, r6
 800fcb4:	1e7b      	subs	r3, r7, #1
 800fcb6:	419f      	sbcs	r7, r3
 800fcb8:	2207      	movs	r2, #7
 800fcba:	4307      	orrs	r7, r0
 800fcbc:	403a      	ands	r2, r7
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	2500      	movs	r5, #0
 800fcc2:	e789      	b.n	800fbd8 <__aeabi_dadd+0x2d0>
 800fcc4:	1a17      	subs	r7, r2, r0
 800fcc6:	4643      	mov	r3, r8
 800fcc8:	42ba      	cmp	r2, r7
 800fcca:	41b6      	sbcs	r6, r6
 800fccc:	1a59      	subs	r1, r3, r1
 800fcce:	4276      	negs	r6, r6
 800fcd0:	1b8e      	subs	r6, r1, r6
 800fcd2:	4664      	mov	r4, ip
 800fcd4:	e64e      	b.n	800f974 <__aeabi_dadd+0x6c>
 800fcd6:	2b1f      	cmp	r3, #31
 800fcd8:	dd00      	ble.n	800fcdc <__aeabi_dadd+0x3d4>
 800fcda:	e0ad      	b.n	800fe38 <__aeabi_dadd+0x530>
 800fcdc:	2620      	movs	r6, #32
 800fcde:	4647      	mov	r7, r8
 800fce0:	1af6      	subs	r6, r6, r3
 800fce2:	40b7      	lsls	r7, r6
 800fce4:	46b9      	mov	r9, r7
 800fce6:	0017      	movs	r7, r2
 800fce8:	46b2      	mov	sl, r6
 800fcea:	40df      	lsrs	r7, r3
 800fcec:	464e      	mov	r6, r9
 800fcee:	433e      	orrs	r6, r7
 800fcf0:	0037      	movs	r7, r6
 800fcf2:	4656      	mov	r6, sl
 800fcf4:	40b2      	lsls	r2, r6
 800fcf6:	1e56      	subs	r6, r2, #1
 800fcf8:	41b2      	sbcs	r2, r6
 800fcfa:	4317      	orrs	r7, r2
 800fcfc:	4642      	mov	r2, r8
 800fcfe:	40da      	lsrs	r2, r3
 800fd00:	1889      	adds	r1, r1, r2
 800fd02:	e6ae      	b.n	800fa62 <__aeabi_dadd+0x15a>
 800fd04:	000007ff 	.word	0x000007ff
 800fd08:	ff7fffff 	.word	0xff7fffff
 800fd0c:	800fffff 	.word	0x800fffff
 800fd10:	2620      	movs	r6, #32
 800fd12:	4647      	mov	r7, r8
 800fd14:	1af6      	subs	r6, r6, r3
 800fd16:	40b7      	lsls	r7, r6
 800fd18:	46b9      	mov	r9, r7
 800fd1a:	0017      	movs	r7, r2
 800fd1c:	46b2      	mov	sl, r6
 800fd1e:	40df      	lsrs	r7, r3
 800fd20:	464e      	mov	r6, r9
 800fd22:	433e      	orrs	r6, r7
 800fd24:	0037      	movs	r7, r6
 800fd26:	4656      	mov	r6, sl
 800fd28:	40b2      	lsls	r2, r6
 800fd2a:	1e56      	subs	r6, r2, #1
 800fd2c:	41b2      	sbcs	r2, r6
 800fd2e:	4317      	orrs	r7, r2
 800fd30:	4642      	mov	r2, r8
 800fd32:	40da      	lsrs	r2, r3
 800fd34:	1a89      	subs	r1, r1, r2
 800fd36:	e799      	b.n	800fc6c <__aeabi_dadd+0x364>
 800fd38:	4c7f      	ldr	r4, [pc, #508]	; (800ff38 <__aeabi_dadd+0x630>)
 800fd3a:	42a6      	cmp	r6, r4
 800fd3c:	d05b      	beq.n	800fdf6 <__aeabi_dadd+0x4ee>
 800fd3e:	2480      	movs	r4, #128	; 0x80
 800fd40:	0424      	lsls	r4, r4, #16
 800fd42:	425b      	negs	r3, r3
 800fd44:	4321      	orrs	r1, r4
 800fd46:	e727      	b.n	800fb98 <__aeabi_dadd+0x290>
 800fd48:	2e00      	cmp	r6, #0
 800fd4a:	d10c      	bne.n	800fd66 <__aeabi_dadd+0x45e>
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d100      	bne.n	800fd52 <__aeabi_dadd+0x44a>
 800fd50:	e0cb      	b.n	800feea <__aeabi_dadd+0x5e2>
 800fd52:	4664      	mov	r4, ip
 800fd54:	0039      	movs	r1, r7
 800fd56:	0010      	movs	r0, r2
 800fd58:	4d77      	ldr	r5, [pc, #476]	; (800ff38 <__aeabi_dadd+0x630>)
 800fd5a:	e6d7      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fd5c:	4f76      	ldr	r7, [pc, #472]	; (800ff38 <__aeabi_dadd+0x630>)
 800fd5e:	42bb      	cmp	r3, r7
 800fd60:	d018      	beq.n	800fd94 <__aeabi_dadd+0x48c>
 800fd62:	0033      	movs	r3, r6
 800fd64:	e675      	b.n	800fa52 <__aeabi_dadd+0x14a>
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <__aeabi_dadd+0x48c>
 800fd6a:	074b      	lsls	r3, r1, #29
 800fd6c:	08c0      	lsrs	r0, r0, #3
 800fd6e:	4318      	orrs	r0, r3
 800fd70:	2380      	movs	r3, #128	; 0x80
 800fd72:	08c9      	lsrs	r1, r1, #3
 800fd74:	031b      	lsls	r3, r3, #12
 800fd76:	4219      	tst	r1, r3
 800fd78:	d007      	beq.n	800fd8a <__aeabi_dadd+0x482>
 800fd7a:	08fc      	lsrs	r4, r7, #3
 800fd7c:	421c      	tst	r4, r3
 800fd7e:	d104      	bne.n	800fd8a <__aeabi_dadd+0x482>
 800fd80:	0779      	lsls	r1, r7, #29
 800fd82:	08d0      	lsrs	r0, r2, #3
 800fd84:	4308      	orrs	r0, r1
 800fd86:	46e1      	mov	r9, ip
 800fd88:	0021      	movs	r1, r4
 800fd8a:	464c      	mov	r4, r9
 800fd8c:	0f42      	lsrs	r2, r0, #29
 800fd8e:	00c9      	lsls	r1, r1, #3
 800fd90:	4311      	orrs	r1, r2
 800fd92:	00c0      	lsls	r0, r0, #3
 800fd94:	4d68      	ldr	r5, [pc, #416]	; (800ff38 <__aeabi_dadd+0x630>)
 800fd96:	e6b9      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fd98:	001d      	movs	r5, r3
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	e6c0      	b.n	800fb22 <__aeabi_dadd+0x21a>
 800fda0:	2d00      	cmp	r5, #0
 800fda2:	d15b      	bne.n	800fe5c <__aeabi_dadd+0x554>
 800fda4:	000d      	movs	r5, r1
 800fda6:	4305      	orrs	r5, r0
 800fda8:	d100      	bne.n	800fdac <__aeabi_dadd+0x4a4>
 800fdaa:	e6e2      	b.n	800fb72 <__aeabi_dadd+0x26a>
 800fdac:	1c5d      	adds	r5, r3, #1
 800fdae:	d100      	bne.n	800fdb2 <__aeabi_dadd+0x4aa>
 800fdb0:	e0b0      	b.n	800ff14 <__aeabi_dadd+0x60c>
 800fdb2:	4d61      	ldr	r5, [pc, #388]	; (800ff38 <__aeabi_dadd+0x630>)
 800fdb4:	42ae      	cmp	r6, r5
 800fdb6:	d01f      	beq.n	800fdf8 <__aeabi_dadd+0x4f0>
 800fdb8:	43db      	mvns	r3, r3
 800fdba:	2b38      	cmp	r3, #56	; 0x38
 800fdbc:	dc71      	bgt.n	800fea2 <__aeabi_dadd+0x59a>
 800fdbe:	2b1f      	cmp	r3, #31
 800fdc0:	dd00      	ble.n	800fdc4 <__aeabi_dadd+0x4bc>
 800fdc2:	e096      	b.n	800fef2 <__aeabi_dadd+0x5ea>
 800fdc4:	2520      	movs	r5, #32
 800fdc6:	000f      	movs	r7, r1
 800fdc8:	1aed      	subs	r5, r5, r3
 800fdca:	40af      	lsls	r7, r5
 800fdcc:	46b9      	mov	r9, r7
 800fdce:	0007      	movs	r7, r0
 800fdd0:	46aa      	mov	sl, r5
 800fdd2:	40df      	lsrs	r7, r3
 800fdd4:	464d      	mov	r5, r9
 800fdd6:	433d      	orrs	r5, r7
 800fdd8:	002f      	movs	r7, r5
 800fdda:	4655      	mov	r5, sl
 800fddc:	40a8      	lsls	r0, r5
 800fdde:	40d9      	lsrs	r1, r3
 800fde0:	1e45      	subs	r5, r0, #1
 800fde2:	41a8      	sbcs	r0, r5
 800fde4:	4488      	add	r8, r1
 800fde6:	4307      	orrs	r7, r0
 800fde8:	18bf      	adds	r7, r7, r2
 800fdea:	4297      	cmp	r7, r2
 800fdec:	4192      	sbcs	r2, r2
 800fdee:	4251      	negs	r1, r2
 800fdf0:	4441      	add	r1, r8
 800fdf2:	0035      	movs	r5, r6
 800fdf4:	e63a      	b.n	800fa6c <__aeabi_dadd+0x164>
 800fdf6:	4664      	mov	r4, ip
 800fdf8:	0035      	movs	r5, r6
 800fdfa:	4641      	mov	r1, r8
 800fdfc:	0010      	movs	r0, r2
 800fdfe:	e685      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fe00:	000b      	movs	r3, r1
 800fe02:	4303      	orrs	r3, r0
 800fe04:	2d00      	cmp	r5, #0
 800fe06:	d000      	beq.n	800fe0a <__aeabi_dadd+0x502>
 800fe08:	e663      	b.n	800fad2 <__aeabi_dadd+0x1ca>
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0f5      	beq.n	800fdfa <__aeabi_dadd+0x4f2>
 800fe0e:	4643      	mov	r3, r8
 800fe10:	4313      	orrs	r3, r2
 800fe12:	d100      	bne.n	800fe16 <__aeabi_dadd+0x50e>
 800fe14:	e67a      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fe16:	1887      	adds	r7, r0, r2
 800fe18:	4287      	cmp	r7, r0
 800fe1a:	4180      	sbcs	r0, r0
 800fe1c:	2207      	movs	r2, #7
 800fe1e:	4441      	add	r1, r8
 800fe20:	4240      	negs	r0, r0
 800fe22:	1809      	adds	r1, r1, r0
 800fe24:	403a      	ands	r2, r7
 800fe26:	020b      	lsls	r3, r1, #8
 800fe28:	d400      	bmi.n	800fe2c <__aeabi_dadd+0x524>
 800fe2a:	e6d5      	b.n	800fbd8 <__aeabi_dadd+0x2d0>
 800fe2c:	4b43      	ldr	r3, [pc, #268]	; (800ff3c <__aeabi_dadd+0x634>)
 800fe2e:	3501      	adds	r5, #1
 800fe30:	4019      	ands	r1, r3
 800fe32:	e5c9      	b.n	800f9c8 <__aeabi_dadd+0xc0>
 800fe34:	0038      	movs	r0, r7
 800fe36:	e669      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fe38:	001e      	movs	r6, r3
 800fe3a:	4647      	mov	r7, r8
 800fe3c:	3e20      	subs	r6, #32
 800fe3e:	40f7      	lsrs	r7, r6
 800fe40:	46bc      	mov	ip, r7
 800fe42:	2b20      	cmp	r3, #32
 800fe44:	d004      	beq.n	800fe50 <__aeabi_dadd+0x548>
 800fe46:	2640      	movs	r6, #64	; 0x40
 800fe48:	1af3      	subs	r3, r6, r3
 800fe4a:	4646      	mov	r6, r8
 800fe4c:	409e      	lsls	r6, r3
 800fe4e:	4332      	orrs	r2, r6
 800fe50:	0017      	movs	r7, r2
 800fe52:	4663      	mov	r3, ip
 800fe54:	1e7a      	subs	r2, r7, #1
 800fe56:	4197      	sbcs	r7, r2
 800fe58:	431f      	orrs	r7, r3
 800fe5a:	e602      	b.n	800fa62 <__aeabi_dadd+0x15a>
 800fe5c:	4d36      	ldr	r5, [pc, #216]	; (800ff38 <__aeabi_dadd+0x630>)
 800fe5e:	42ae      	cmp	r6, r5
 800fe60:	d0ca      	beq.n	800fdf8 <__aeabi_dadd+0x4f0>
 800fe62:	2580      	movs	r5, #128	; 0x80
 800fe64:	042d      	lsls	r5, r5, #16
 800fe66:	425b      	negs	r3, r3
 800fe68:	4329      	orrs	r1, r5
 800fe6a:	e7a6      	b.n	800fdba <__aeabi_dadd+0x4b2>
 800fe6c:	4308      	orrs	r0, r1
 800fe6e:	1e41      	subs	r1, r0, #1
 800fe70:	4188      	sbcs	r0, r1
 800fe72:	e6a6      	b.n	800fbc2 <__aeabi_dadd+0x2ba>
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d100      	bne.n	800fe7a <__aeabi_dadd+0x572>
 800fe78:	e648      	b.n	800fb0c <__aeabi_dadd+0x204>
 800fe7a:	1a87      	subs	r7, r0, r2
 800fe7c:	4643      	mov	r3, r8
 800fe7e:	42b8      	cmp	r0, r7
 800fe80:	41b6      	sbcs	r6, r6
 800fe82:	1acb      	subs	r3, r1, r3
 800fe84:	4276      	negs	r6, r6
 800fe86:	1b9e      	subs	r6, r3, r6
 800fe88:	0233      	lsls	r3, r6, #8
 800fe8a:	d54b      	bpl.n	800ff24 <__aeabi_dadd+0x61c>
 800fe8c:	1a17      	subs	r7, r2, r0
 800fe8e:	4643      	mov	r3, r8
 800fe90:	42ba      	cmp	r2, r7
 800fe92:	4192      	sbcs	r2, r2
 800fe94:	1a59      	subs	r1, r3, r1
 800fe96:	4252      	negs	r2, r2
 800fe98:	1a89      	subs	r1, r1, r2
 800fe9a:	2207      	movs	r2, #7
 800fe9c:	4664      	mov	r4, ip
 800fe9e:	403a      	ands	r2, r7
 800fea0:	e592      	b.n	800f9c8 <__aeabi_dadd+0xc0>
 800fea2:	4301      	orrs	r1, r0
 800fea4:	000f      	movs	r7, r1
 800fea6:	1e79      	subs	r1, r7, #1
 800fea8:	418f      	sbcs	r7, r1
 800feaa:	e79d      	b.n	800fde8 <__aeabi_dadd+0x4e0>
 800feac:	001c      	movs	r4, r3
 800feae:	000f      	movs	r7, r1
 800feb0:	3c20      	subs	r4, #32
 800feb2:	40e7      	lsrs	r7, r4
 800feb4:	2b20      	cmp	r3, #32
 800feb6:	d003      	beq.n	800fec0 <__aeabi_dadd+0x5b8>
 800feb8:	2440      	movs	r4, #64	; 0x40
 800feba:	1ae3      	subs	r3, r4, r3
 800febc:	4099      	lsls	r1, r3
 800febe:	4308      	orrs	r0, r1
 800fec0:	1e41      	subs	r1, r0, #1
 800fec2:	4188      	sbcs	r0, r1
 800fec4:	4338      	orrs	r0, r7
 800fec6:	e67c      	b.n	800fbc2 <__aeabi_dadd+0x2ba>
 800fec8:	2200      	movs	r2, #0
 800feca:	2400      	movs	r4, #0
 800fecc:	e625      	b.n	800fb1a <__aeabi_dadd+0x212>
 800fece:	1a17      	subs	r7, r2, r0
 800fed0:	4643      	mov	r3, r8
 800fed2:	42ba      	cmp	r2, r7
 800fed4:	4192      	sbcs	r2, r2
 800fed6:	1a59      	subs	r1, r3, r1
 800fed8:	4252      	negs	r2, r2
 800feda:	1a89      	subs	r1, r1, r2
 800fedc:	4664      	mov	r4, ip
 800fede:	0035      	movs	r5, r6
 800fee0:	e543      	b.n	800f96a <__aeabi_dadd+0x62>
 800fee2:	4641      	mov	r1, r8
 800fee4:	0010      	movs	r0, r2
 800fee6:	4d14      	ldr	r5, [pc, #80]	; (800ff38 <__aeabi_dadd+0x630>)
 800fee8:	e610      	b.n	800fb0c <__aeabi_dadd+0x204>
 800feea:	2280      	movs	r2, #128	; 0x80
 800feec:	2400      	movs	r4, #0
 800feee:	0312      	lsls	r2, r2, #12
 800fef0:	e680      	b.n	800fbf4 <__aeabi_dadd+0x2ec>
 800fef2:	001d      	movs	r5, r3
 800fef4:	000f      	movs	r7, r1
 800fef6:	3d20      	subs	r5, #32
 800fef8:	40ef      	lsrs	r7, r5
 800fefa:	46bc      	mov	ip, r7
 800fefc:	2b20      	cmp	r3, #32
 800fefe:	d003      	beq.n	800ff08 <__aeabi_dadd+0x600>
 800ff00:	2540      	movs	r5, #64	; 0x40
 800ff02:	1aeb      	subs	r3, r5, r3
 800ff04:	4099      	lsls	r1, r3
 800ff06:	4308      	orrs	r0, r1
 800ff08:	0007      	movs	r7, r0
 800ff0a:	4663      	mov	r3, ip
 800ff0c:	1e78      	subs	r0, r7, #1
 800ff0e:	4187      	sbcs	r7, r0
 800ff10:	431f      	orrs	r7, r3
 800ff12:	e769      	b.n	800fde8 <__aeabi_dadd+0x4e0>
 800ff14:	1887      	adds	r7, r0, r2
 800ff16:	4297      	cmp	r7, r2
 800ff18:	419b      	sbcs	r3, r3
 800ff1a:	4441      	add	r1, r8
 800ff1c:	425b      	negs	r3, r3
 800ff1e:	18c9      	adds	r1, r1, r3
 800ff20:	0035      	movs	r5, r6
 800ff22:	e5a3      	b.n	800fa6c <__aeabi_dadd+0x164>
 800ff24:	003b      	movs	r3, r7
 800ff26:	4333      	orrs	r3, r6
 800ff28:	d0ce      	beq.n	800fec8 <__aeabi_dadd+0x5c0>
 800ff2a:	2207      	movs	r2, #7
 800ff2c:	0031      	movs	r1, r6
 800ff2e:	403a      	ands	r2, r7
 800ff30:	e652      	b.n	800fbd8 <__aeabi_dadd+0x2d0>
 800ff32:	2300      	movs	r3, #0
 800ff34:	001a      	movs	r2, r3
 800ff36:	e5f4      	b.n	800fb22 <__aeabi_dadd+0x21a>
 800ff38:	000007ff 	.word	0x000007ff
 800ff3c:	ff7fffff 	.word	0xff7fffff

0800ff40 <__aeabi_ddiv>:
 800ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff42:	4657      	mov	r7, sl
 800ff44:	46de      	mov	lr, fp
 800ff46:	464e      	mov	r6, r9
 800ff48:	4645      	mov	r5, r8
 800ff4a:	b5e0      	push	{r5, r6, r7, lr}
 800ff4c:	4683      	mov	fp, r0
 800ff4e:	0007      	movs	r7, r0
 800ff50:	030e      	lsls	r6, r1, #12
 800ff52:	0048      	lsls	r0, r1, #1
 800ff54:	b085      	sub	sp, #20
 800ff56:	4692      	mov	sl, r2
 800ff58:	001c      	movs	r4, r3
 800ff5a:	0b36      	lsrs	r6, r6, #12
 800ff5c:	0d40      	lsrs	r0, r0, #21
 800ff5e:	0fcd      	lsrs	r5, r1, #31
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d100      	bne.n	800ff66 <__aeabi_ddiv+0x26>
 800ff64:	e09d      	b.n	80100a2 <__aeabi_ddiv+0x162>
 800ff66:	4b95      	ldr	r3, [pc, #596]	; (80101bc <__aeabi_ddiv+0x27c>)
 800ff68:	4298      	cmp	r0, r3
 800ff6a:	d039      	beq.n	800ffe0 <__aeabi_ddiv+0xa0>
 800ff6c:	2380      	movs	r3, #128	; 0x80
 800ff6e:	00f6      	lsls	r6, r6, #3
 800ff70:	041b      	lsls	r3, r3, #16
 800ff72:	431e      	orrs	r6, r3
 800ff74:	4a92      	ldr	r2, [pc, #584]	; (80101c0 <__aeabi_ddiv+0x280>)
 800ff76:	0f7b      	lsrs	r3, r7, #29
 800ff78:	4333      	orrs	r3, r6
 800ff7a:	4699      	mov	r9, r3
 800ff7c:	4694      	mov	ip, r2
 800ff7e:	0003      	movs	r3, r0
 800ff80:	4463      	add	r3, ip
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	2300      	movs	r3, #0
 800ff86:	2600      	movs	r6, #0
 800ff88:	00ff      	lsls	r7, r7, #3
 800ff8a:	9302      	str	r3, [sp, #8]
 800ff8c:	0323      	lsls	r3, r4, #12
 800ff8e:	0b1b      	lsrs	r3, r3, #12
 800ff90:	4698      	mov	r8, r3
 800ff92:	0063      	lsls	r3, r4, #1
 800ff94:	0fe4      	lsrs	r4, r4, #31
 800ff96:	4652      	mov	r2, sl
 800ff98:	0d5b      	lsrs	r3, r3, #21
 800ff9a:	9401      	str	r4, [sp, #4]
 800ff9c:	d100      	bne.n	800ffa0 <__aeabi_ddiv+0x60>
 800ff9e:	e0b3      	b.n	8010108 <__aeabi_ddiv+0x1c8>
 800ffa0:	4986      	ldr	r1, [pc, #536]	; (80101bc <__aeabi_ddiv+0x27c>)
 800ffa2:	428b      	cmp	r3, r1
 800ffa4:	d100      	bne.n	800ffa8 <__aeabi_ddiv+0x68>
 800ffa6:	e09e      	b.n	80100e6 <__aeabi_ddiv+0x1a6>
 800ffa8:	4642      	mov	r2, r8
 800ffaa:	00d1      	lsls	r1, r2, #3
 800ffac:	2280      	movs	r2, #128	; 0x80
 800ffae:	0412      	lsls	r2, r2, #16
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	4651      	mov	r1, sl
 800ffb4:	0f49      	lsrs	r1, r1, #29
 800ffb6:	4311      	orrs	r1, r2
 800ffb8:	468b      	mov	fp, r1
 800ffba:	4981      	ldr	r1, [pc, #516]	; (80101c0 <__aeabi_ddiv+0x280>)
 800ffbc:	4652      	mov	r2, sl
 800ffbe:	468c      	mov	ip, r1
 800ffc0:	9900      	ldr	r1, [sp, #0]
 800ffc2:	4463      	add	r3, ip
 800ffc4:	1acb      	subs	r3, r1, r3
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	00d2      	lsls	r2, r2, #3
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	002b      	movs	r3, r5
 800ffce:	4063      	eors	r3, r4
 800ffd0:	469a      	mov	sl, r3
 800ffd2:	2e0f      	cmp	r6, #15
 800ffd4:	d900      	bls.n	800ffd8 <__aeabi_ddiv+0x98>
 800ffd6:	e105      	b.n	80101e4 <__aeabi_ddiv+0x2a4>
 800ffd8:	4b7a      	ldr	r3, [pc, #488]	; (80101c4 <__aeabi_ddiv+0x284>)
 800ffda:	00b6      	lsls	r6, r6, #2
 800ffdc:	599b      	ldr	r3, [r3, r6]
 800ffde:	469f      	mov	pc, r3
 800ffe0:	465b      	mov	r3, fp
 800ffe2:	4333      	orrs	r3, r6
 800ffe4:	4699      	mov	r9, r3
 800ffe6:	d000      	beq.n	800ffea <__aeabi_ddiv+0xaa>
 800ffe8:	e0b8      	b.n	801015c <__aeabi_ddiv+0x21c>
 800ffea:	2302      	movs	r3, #2
 800ffec:	2608      	movs	r6, #8
 800ffee:	2700      	movs	r7, #0
 800fff0:	9000      	str	r0, [sp, #0]
 800fff2:	9302      	str	r3, [sp, #8]
 800fff4:	e7ca      	b.n	800ff8c <__aeabi_ddiv+0x4c>
 800fff6:	46cb      	mov	fp, r9
 800fff8:	003a      	movs	r2, r7
 800fffa:	9902      	ldr	r1, [sp, #8]
 800fffc:	9501      	str	r5, [sp, #4]
 800fffe:	9b01      	ldr	r3, [sp, #4]
 8010000:	469a      	mov	sl, r3
 8010002:	2902      	cmp	r1, #2
 8010004:	d027      	beq.n	8010056 <__aeabi_ddiv+0x116>
 8010006:	2903      	cmp	r1, #3
 8010008:	d100      	bne.n	801000c <__aeabi_ddiv+0xcc>
 801000a:	e280      	b.n	801050e <__aeabi_ddiv+0x5ce>
 801000c:	2901      	cmp	r1, #1
 801000e:	d044      	beq.n	801009a <__aeabi_ddiv+0x15a>
 8010010:	496d      	ldr	r1, [pc, #436]	; (80101c8 <__aeabi_ddiv+0x288>)
 8010012:	9b00      	ldr	r3, [sp, #0]
 8010014:	468c      	mov	ip, r1
 8010016:	4463      	add	r3, ip
 8010018:	001c      	movs	r4, r3
 801001a:	2c00      	cmp	r4, #0
 801001c:	dd38      	ble.n	8010090 <__aeabi_ddiv+0x150>
 801001e:	0753      	lsls	r3, r2, #29
 8010020:	d000      	beq.n	8010024 <__aeabi_ddiv+0xe4>
 8010022:	e213      	b.n	801044c <__aeabi_ddiv+0x50c>
 8010024:	08d2      	lsrs	r2, r2, #3
 8010026:	465b      	mov	r3, fp
 8010028:	01db      	lsls	r3, r3, #7
 801002a:	d509      	bpl.n	8010040 <__aeabi_ddiv+0x100>
 801002c:	4659      	mov	r1, fp
 801002e:	4b67      	ldr	r3, [pc, #412]	; (80101cc <__aeabi_ddiv+0x28c>)
 8010030:	4019      	ands	r1, r3
 8010032:	468b      	mov	fp, r1
 8010034:	2180      	movs	r1, #128	; 0x80
 8010036:	00c9      	lsls	r1, r1, #3
 8010038:	468c      	mov	ip, r1
 801003a:	9b00      	ldr	r3, [sp, #0]
 801003c:	4463      	add	r3, ip
 801003e:	001c      	movs	r4, r3
 8010040:	4b63      	ldr	r3, [pc, #396]	; (80101d0 <__aeabi_ddiv+0x290>)
 8010042:	429c      	cmp	r4, r3
 8010044:	dc07      	bgt.n	8010056 <__aeabi_ddiv+0x116>
 8010046:	465b      	mov	r3, fp
 8010048:	0564      	lsls	r4, r4, #21
 801004a:	075f      	lsls	r7, r3, #29
 801004c:	025b      	lsls	r3, r3, #9
 801004e:	4317      	orrs	r7, r2
 8010050:	0b1b      	lsrs	r3, r3, #12
 8010052:	0d62      	lsrs	r2, r4, #21
 8010054:	e002      	b.n	801005c <__aeabi_ddiv+0x11c>
 8010056:	2300      	movs	r3, #0
 8010058:	2700      	movs	r7, #0
 801005a:	4a58      	ldr	r2, [pc, #352]	; (80101bc <__aeabi_ddiv+0x27c>)
 801005c:	2100      	movs	r1, #0
 801005e:	031b      	lsls	r3, r3, #12
 8010060:	0b1c      	lsrs	r4, r3, #12
 8010062:	0d0b      	lsrs	r3, r1, #20
 8010064:	051b      	lsls	r3, r3, #20
 8010066:	4323      	orrs	r3, r4
 8010068:	0514      	lsls	r4, r2, #20
 801006a:	4a5a      	ldr	r2, [pc, #360]	; (80101d4 <__aeabi_ddiv+0x294>)
 801006c:	0038      	movs	r0, r7
 801006e:	4013      	ands	r3, r2
 8010070:	431c      	orrs	r4, r3
 8010072:	4653      	mov	r3, sl
 8010074:	0064      	lsls	r4, r4, #1
 8010076:	07db      	lsls	r3, r3, #31
 8010078:	0864      	lsrs	r4, r4, #1
 801007a:	431c      	orrs	r4, r3
 801007c:	0021      	movs	r1, r4
 801007e:	b005      	add	sp, #20
 8010080:	bc3c      	pop	{r2, r3, r4, r5}
 8010082:	4690      	mov	r8, r2
 8010084:	4699      	mov	r9, r3
 8010086:	46a2      	mov	sl, r4
 8010088:	46ab      	mov	fp, r5
 801008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008c:	2201      	movs	r2, #1
 801008e:	4252      	negs	r2, r2
 8010090:	2301      	movs	r3, #1
 8010092:	1b1b      	subs	r3, r3, r4
 8010094:	2b38      	cmp	r3, #56	; 0x38
 8010096:	dc00      	bgt.n	801009a <__aeabi_ddiv+0x15a>
 8010098:	e1ad      	b.n	80103f6 <__aeabi_ddiv+0x4b6>
 801009a:	2200      	movs	r2, #0
 801009c:	2300      	movs	r3, #0
 801009e:	2700      	movs	r7, #0
 80100a0:	e7dc      	b.n	801005c <__aeabi_ddiv+0x11c>
 80100a2:	465b      	mov	r3, fp
 80100a4:	4333      	orrs	r3, r6
 80100a6:	4699      	mov	r9, r3
 80100a8:	d05e      	beq.n	8010168 <__aeabi_ddiv+0x228>
 80100aa:	2e00      	cmp	r6, #0
 80100ac:	d100      	bne.n	80100b0 <__aeabi_ddiv+0x170>
 80100ae:	e18a      	b.n	80103c6 <__aeabi_ddiv+0x486>
 80100b0:	0030      	movs	r0, r6
 80100b2:	f7fe ff61 	bl	800ef78 <__clzsi2>
 80100b6:	0003      	movs	r3, r0
 80100b8:	3b0b      	subs	r3, #11
 80100ba:	2b1c      	cmp	r3, #28
 80100bc:	dd00      	ble.n	80100c0 <__aeabi_ddiv+0x180>
 80100be:	e17b      	b.n	80103b8 <__aeabi_ddiv+0x478>
 80100c0:	221d      	movs	r2, #29
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	465a      	mov	r2, fp
 80100c6:	0001      	movs	r1, r0
 80100c8:	40da      	lsrs	r2, r3
 80100ca:	3908      	subs	r1, #8
 80100cc:	408e      	lsls	r6, r1
 80100ce:	0013      	movs	r3, r2
 80100d0:	465f      	mov	r7, fp
 80100d2:	4333      	orrs	r3, r6
 80100d4:	4699      	mov	r9, r3
 80100d6:	408f      	lsls	r7, r1
 80100d8:	4b3f      	ldr	r3, [pc, #252]	; (80101d8 <__aeabi_ddiv+0x298>)
 80100da:	2600      	movs	r6, #0
 80100dc:	1a1b      	subs	r3, r3, r0
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	2300      	movs	r3, #0
 80100e2:	9302      	str	r3, [sp, #8]
 80100e4:	e752      	b.n	800ff8c <__aeabi_ddiv+0x4c>
 80100e6:	4641      	mov	r1, r8
 80100e8:	4653      	mov	r3, sl
 80100ea:	430b      	orrs	r3, r1
 80100ec:	493b      	ldr	r1, [pc, #236]	; (80101dc <__aeabi_ddiv+0x29c>)
 80100ee:	469b      	mov	fp, r3
 80100f0:	468c      	mov	ip, r1
 80100f2:	9b00      	ldr	r3, [sp, #0]
 80100f4:	4463      	add	r3, ip
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	465b      	mov	r3, fp
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d13b      	bne.n	8010176 <__aeabi_ddiv+0x236>
 80100fe:	2302      	movs	r3, #2
 8010100:	2200      	movs	r2, #0
 8010102:	431e      	orrs	r6, r3
 8010104:	2102      	movs	r1, #2
 8010106:	e761      	b.n	800ffcc <__aeabi_ddiv+0x8c>
 8010108:	4643      	mov	r3, r8
 801010a:	4313      	orrs	r3, r2
 801010c:	469b      	mov	fp, r3
 801010e:	d037      	beq.n	8010180 <__aeabi_ddiv+0x240>
 8010110:	4643      	mov	r3, r8
 8010112:	2b00      	cmp	r3, #0
 8010114:	d100      	bne.n	8010118 <__aeabi_ddiv+0x1d8>
 8010116:	e162      	b.n	80103de <__aeabi_ddiv+0x49e>
 8010118:	4640      	mov	r0, r8
 801011a:	f7fe ff2d 	bl	800ef78 <__clzsi2>
 801011e:	0003      	movs	r3, r0
 8010120:	3b0b      	subs	r3, #11
 8010122:	2b1c      	cmp	r3, #28
 8010124:	dd00      	ble.n	8010128 <__aeabi_ddiv+0x1e8>
 8010126:	e153      	b.n	80103d0 <__aeabi_ddiv+0x490>
 8010128:	0002      	movs	r2, r0
 801012a:	4641      	mov	r1, r8
 801012c:	3a08      	subs	r2, #8
 801012e:	4091      	lsls	r1, r2
 8010130:	4688      	mov	r8, r1
 8010132:	211d      	movs	r1, #29
 8010134:	1acb      	subs	r3, r1, r3
 8010136:	4651      	mov	r1, sl
 8010138:	40d9      	lsrs	r1, r3
 801013a:	000b      	movs	r3, r1
 801013c:	4641      	mov	r1, r8
 801013e:	430b      	orrs	r3, r1
 8010140:	469b      	mov	fp, r3
 8010142:	4653      	mov	r3, sl
 8010144:	4093      	lsls	r3, r2
 8010146:	001a      	movs	r2, r3
 8010148:	9b00      	ldr	r3, [sp, #0]
 801014a:	4925      	ldr	r1, [pc, #148]	; (80101e0 <__aeabi_ddiv+0x2a0>)
 801014c:	469c      	mov	ip, r3
 801014e:	4460      	add	r0, ip
 8010150:	0003      	movs	r3, r0
 8010152:	468c      	mov	ip, r1
 8010154:	4463      	add	r3, ip
 8010156:	9300      	str	r3, [sp, #0]
 8010158:	2100      	movs	r1, #0
 801015a:	e737      	b.n	800ffcc <__aeabi_ddiv+0x8c>
 801015c:	2303      	movs	r3, #3
 801015e:	46b1      	mov	r9, r6
 8010160:	9000      	str	r0, [sp, #0]
 8010162:	260c      	movs	r6, #12
 8010164:	9302      	str	r3, [sp, #8]
 8010166:	e711      	b.n	800ff8c <__aeabi_ddiv+0x4c>
 8010168:	2300      	movs	r3, #0
 801016a:	9300      	str	r3, [sp, #0]
 801016c:	3301      	adds	r3, #1
 801016e:	2604      	movs	r6, #4
 8010170:	2700      	movs	r7, #0
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	e70a      	b.n	800ff8c <__aeabi_ddiv+0x4c>
 8010176:	2303      	movs	r3, #3
 8010178:	46c3      	mov	fp, r8
 801017a:	431e      	orrs	r6, r3
 801017c:	2103      	movs	r1, #3
 801017e:	e725      	b.n	800ffcc <__aeabi_ddiv+0x8c>
 8010180:	3301      	adds	r3, #1
 8010182:	431e      	orrs	r6, r3
 8010184:	2200      	movs	r2, #0
 8010186:	2101      	movs	r1, #1
 8010188:	e720      	b.n	800ffcc <__aeabi_ddiv+0x8c>
 801018a:	2300      	movs	r3, #0
 801018c:	469a      	mov	sl, r3
 801018e:	2380      	movs	r3, #128	; 0x80
 8010190:	2700      	movs	r7, #0
 8010192:	031b      	lsls	r3, r3, #12
 8010194:	4a09      	ldr	r2, [pc, #36]	; (80101bc <__aeabi_ddiv+0x27c>)
 8010196:	e761      	b.n	801005c <__aeabi_ddiv+0x11c>
 8010198:	2380      	movs	r3, #128	; 0x80
 801019a:	4649      	mov	r1, r9
 801019c:	031b      	lsls	r3, r3, #12
 801019e:	4219      	tst	r1, r3
 80101a0:	d100      	bne.n	80101a4 <__aeabi_ddiv+0x264>
 80101a2:	e0e2      	b.n	801036a <__aeabi_ddiv+0x42a>
 80101a4:	4659      	mov	r1, fp
 80101a6:	4219      	tst	r1, r3
 80101a8:	d000      	beq.n	80101ac <__aeabi_ddiv+0x26c>
 80101aa:	e0de      	b.n	801036a <__aeabi_ddiv+0x42a>
 80101ac:	430b      	orrs	r3, r1
 80101ae:	031b      	lsls	r3, r3, #12
 80101b0:	0017      	movs	r7, r2
 80101b2:	0b1b      	lsrs	r3, r3, #12
 80101b4:	46a2      	mov	sl, r4
 80101b6:	4a01      	ldr	r2, [pc, #4]	; (80101bc <__aeabi_ddiv+0x27c>)
 80101b8:	e750      	b.n	801005c <__aeabi_ddiv+0x11c>
 80101ba:	46c0      	nop			; (mov r8, r8)
 80101bc:	000007ff 	.word	0x000007ff
 80101c0:	fffffc01 	.word	0xfffffc01
 80101c4:	0801be64 	.word	0x0801be64
 80101c8:	000003ff 	.word	0x000003ff
 80101cc:	feffffff 	.word	0xfeffffff
 80101d0:	000007fe 	.word	0x000007fe
 80101d4:	800fffff 	.word	0x800fffff
 80101d8:	fffffc0d 	.word	0xfffffc0d
 80101dc:	fffff801 	.word	0xfffff801
 80101e0:	000003f3 	.word	0x000003f3
 80101e4:	45d9      	cmp	r9, fp
 80101e6:	d900      	bls.n	80101ea <__aeabi_ddiv+0x2aa>
 80101e8:	e0cb      	b.n	8010382 <__aeabi_ddiv+0x442>
 80101ea:	d100      	bne.n	80101ee <__aeabi_ddiv+0x2ae>
 80101ec:	e0c6      	b.n	801037c <__aeabi_ddiv+0x43c>
 80101ee:	003c      	movs	r4, r7
 80101f0:	4648      	mov	r0, r9
 80101f2:	2700      	movs	r7, #0
 80101f4:	9b00      	ldr	r3, [sp, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	465b      	mov	r3, fp
 80101fc:	0e16      	lsrs	r6, r2, #24
 80101fe:	021b      	lsls	r3, r3, #8
 8010200:	431e      	orrs	r6, r3
 8010202:	0213      	lsls	r3, r2, #8
 8010204:	4698      	mov	r8, r3
 8010206:	0433      	lsls	r3, r6, #16
 8010208:	0c1b      	lsrs	r3, r3, #16
 801020a:	4699      	mov	r9, r3
 801020c:	0c31      	lsrs	r1, r6, #16
 801020e:	9101      	str	r1, [sp, #4]
 8010210:	f7fe ff74 	bl	800f0fc <__aeabi_uidivmod>
 8010214:	464a      	mov	r2, r9
 8010216:	4342      	muls	r2, r0
 8010218:	040b      	lsls	r3, r1, #16
 801021a:	0c21      	lsrs	r1, r4, #16
 801021c:	0005      	movs	r5, r0
 801021e:	4319      	orrs	r1, r3
 8010220:	428a      	cmp	r2, r1
 8010222:	d907      	bls.n	8010234 <__aeabi_ddiv+0x2f4>
 8010224:	1989      	adds	r1, r1, r6
 8010226:	3d01      	subs	r5, #1
 8010228:	428e      	cmp	r6, r1
 801022a:	d803      	bhi.n	8010234 <__aeabi_ddiv+0x2f4>
 801022c:	428a      	cmp	r2, r1
 801022e:	d901      	bls.n	8010234 <__aeabi_ddiv+0x2f4>
 8010230:	1e85      	subs	r5, r0, #2
 8010232:	1989      	adds	r1, r1, r6
 8010234:	1a88      	subs	r0, r1, r2
 8010236:	9901      	ldr	r1, [sp, #4]
 8010238:	f7fe ff60 	bl	800f0fc <__aeabi_uidivmod>
 801023c:	0409      	lsls	r1, r1, #16
 801023e:	468c      	mov	ip, r1
 8010240:	464a      	mov	r2, r9
 8010242:	0421      	lsls	r1, r4, #16
 8010244:	4664      	mov	r4, ip
 8010246:	4342      	muls	r2, r0
 8010248:	0c09      	lsrs	r1, r1, #16
 801024a:	0003      	movs	r3, r0
 801024c:	4321      	orrs	r1, r4
 801024e:	428a      	cmp	r2, r1
 8010250:	d904      	bls.n	801025c <__aeabi_ddiv+0x31c>
 8010252:	1989      	adds	r1, r1, r6
 8010254:	3b01      	subs	r3, #1
 8010256:	428e      	cmp	r6, r1
 8010258:	d800      	bhi.n	801025c <__aeabi_ddiv+0x31c>
 801025a:	e0f1      	b.n	8010440 <__aeabi_ddiv+0x500>
 801025c:	042d      	lsls	r5, r5, #16
 801025e:	431d      	orrs	r5, r3
 8010260:	46ab      	mov	fp, r5
 8010262:	4643      	mov	r3, r8
 8010264:	1a89      	subs	r1, r1, r2
 8010266:	4642      	mov	r2, r8
 8010268:	0c28      	lsrs	r0, r5, #16
 801026a:	0412      	lsls	r2, r2, #16
 801026c:	0c1d      	lsrs	r5, r3, #16
 801026e:	465b      	mov	r3, fp
 8010270:	0c14      	lsrs	r4, r2, #16
 8010272:	0022      	movs	r2, r4
 8010274:	041b      	lsls	r3, r3, #16
 8010276:	0c1b      	lsrs	r3, r3, #16
 8010278:	435a      	muls	r2, r3
 801027a:	9403      	str	r4, [sp, #12]
 801027c:	436b      	muls	r3, r5
 801027e:	4344      	muls	r4, r0
 8010280:	9502      	str	r5, [sp, #8]
 8010282:	4368      	muls	r0, r5
 8010284:	191b      	adds	r3, r3, r4
 8010286:	0c15      	lsrs	r5, r2, #16
 8010288:	18eb      	adds	r3, r5, r3
 801028a:	429c      	cmp	r4, r3
 801028c:	d903      	bls.n	8010296 <__aeabi_ddiv+0x356>
 801028e:	2480      	movs	r4, #128	; 0x80
 8010290:	0264      	lsls	r4, r4, #9
 8010292:	46a4      	mov	ip, r4
 8010294:	4460      	add	r0, ip
 8010296:	0c1c      	lsrs	r4, r3, #16
 8010298:	0415      	lsls	r5, r2, #16
 801029a:	041b      	lsls	r3, r3, #16
 801029c:	0c2d      	lsrs	r5, r5, #16
 801029e:	1820      	adds	r0, r4, r0
 80102a0:	195d      	adds	r5, r3, r5
 80102a2:	4281      	cmp	r1, r0
 80102a4:	d377      	bcc.n	8010396 <__aeabi_ddiv+0x456>
 80102a6:	d073      	beq.n	8010390 <__aeabi_ddiv+0x450>
 80102a8:	1a0c      	subs	r4, r1, r0
 80102aa:	4aa2      	ldr	r2, [pc, #648]	; (8010534 <__aeabi_ddiv+0x5f4>)
 80102ac:	1b7d      	subs	r5, r7, r5
 80102ae:	42af      	cmp	r7, r5
 80102b0:	41bf      	sbcs	r7, r7
 80102b2:	4694      	mov	ip, r2
 80102b4:	9b00      	ldr	r3, [sp, #0]
 80102b6:	427f      	negs	r7, r7
 80102b8:	4463      	add	r3, ip
 80102ba:	1be0      	subs	r0, r4, r7
 80102bc:	001c      	movs	r4, r3
 80102be:	4286      	cmp	r6, r0
 80102c0:	d100      	bne.n	80102c4 <__aeabi_ddiv+0x384>
 80102c2:	e0db      	b.n	801047c <__aeabi_ddiv+0x53c>
 80102c4:	9901      	ldr	r1, [sp, #4]
 80102c6:	f7fe ff19 	bl	800f0fc <__aeabi_uidivmod>
 80102ca:	464a      	mov	r2, r9
 80102cc:	4342      	muls	r2, r0
 80102ce:	040b      	lsls	r3, r1, #16
 80102d0:	0c29      	lsrs	r1, r5, #16
 80102d2:	0007      	movs	r7, r0
 80102d4:	4319      	orrs	r1, r3
 80102d6:	428a      	cmp	r2, r1
 80102d8:	d907      	bls.n	80102ea <__aeabi_ddiv+0x3aa>
 80102da:	1989      	adds	r1, r1, r6
 80102dc:	3f01      	subs	r7, #1
 80102de:	428e      	cmp	r6, r1
 80102e0:	d803      	bhi.n	80102ea <__aeabi_ddiv+0x3aa>
 80102e2:	428a      	cmp	r2, r1
 80102e4:	d901      	bls.n	80102ea <__aeabi_ddiv+0x3aa>
 80102e6:	1e87      	subs	r7, r0, #2
 80102e8:	1989      	adds	r1, r1, r6
 80102ea:	1a88      	subs	r0, r1, r2
 80102ec:	9901      	ldr	r1, [sp, #4]
 80102ee:	f7fe ff05 	bl	800f0fc <__aeabi_uidivmod>
 80102f2:	0409      	lsls	r1, r1, #16
 80102f4:	464a      	mov	r2, r9
 80102f6:	4689      	mov	r9, r1
 80102f8:	0429      	lsls	r1, r5, #16
 80102fa:	464d      	mov	r5, r9
 80102fc:	4342      	muls	r2, r0
 80102fe:	0c09      	lsrs	r1, r1, #16
 8010300:	0003      	movs	r3, r0
 8010302:	4329      	orrs	r1, r5
 8010304:	428a      	cmp	r2, r1
 8010306:	d907      	bls.n	8010318 <__aeabi_ddiv+0x3d8>
 8010308:	1989      	adds	r1, r1, r6
 801030a:	3b01      	subs	r3, #1
 801030c:	428e      	cmp	r6, r1
 801030e:	d803      	bhi.n	8010318 <__aeabi_ddiv+0x3d8>
 8010310:	428a      	cmp	r2, r1
 8010312:	d901      	bls.n	8010318 <__aeabi_ddiv+0x3d8>
 8010314:	1e83      	subs	r3, r0, #2
 8010316:	1989      	adds	r1, r1, r6
 8010318:	043f      	lsls	r7, r7, #16
 801031a:	1a89      	subs	r1, r1, r2
 801031c:	003a      	movs	r2, r7
 801031e:	9f03      	ldr	r7, [sp, #12]
 8010320:	431a      	orrs	r2, r3
 8010322:	0038      	movs	r0, r7
 8010324:	0413      	lsls	r3, r2, #16
 8010326:	0c1b      	lsrs	r3, r3, #16
 8010328:	4358      	muls	r0, r3
 801032a:	4681      	mov	r9, r0
 801032c:	9802      	ldr	r0, [sp, #8]
 801032e:	0c15      	lsrs	r5, r2, #16
 8010330:	436f      	muls	r7, r5
 8010332:	4343      	muls	r3, r0
 8010334:	4345      	muls	r5, r0
 8010336:	4648      	mov	r0, r9
 8010338:	0c00      	lsrs	r0, r0, #16
 801033a:	4684      	mov	ip, r0
 801033c:	19db      	adds	r3, r3, r7
 801033e:	4463      	add	r3, ip
 8010340:	429f      	cmp	r7, r3
 8010342:	d903      	bls.n	801034c <__aeabi_ddiv+0x40c>
 8010344:	2080      	movs	r0, #128	; 0x80
 8010346:	0240      	lsls	r0, r0, #9
 8010348:	4684      	mov	ip, r0
 801034a:	4465      	add	r5, ip
 801034c:	4648      	mov	r0, r9
 801034e:	0c1f      	lsrs	r7, r3, #16
 8010350:	0400      	lsls	r0, r0, #16
 8010352:	041b      	lsls	r3, r3, #16
 8010354:	0c00      	lsrs	r0, r0, #16
 8010356:	197d      	adds	r5, r7, r5
 8010358:	1818      	adds	r0, r3, r0
 801035a:	42a9      	cmp	r1, r5
 801035c:	d200      	bcs.n	8010360 <__aeabi_ddiv+0x420>
 801035e:	e084      	b.n	801046a <__aeabi_ddiv+0x52a>
 8010360:	d100      	bne.n	8010364 <__aeabi_ddiv+0x424>
 8010362:	e07f      	b.n	8010464 <__aeabi_ddiv+0x524>
 8010364:	2301      	movs	r3, #1
 8010366:	431a      	orrs	r2, r3
 8010368:	e657      	b.n	801001a <__aeabi_ddiv+0xda>
 801036a:	2380      	movs	r3, #128	; 0x80
 801036c:	464a      	mov	r2, r9
 801036e:	031b      	lsls	r3, r3, #12
 8010370:	4313      	orrs	r3, r2
 8010372:	031b      	lsls	r3, r3, #12
 8010374:	0b1b      	lsrs	r3, r3, #12
 8010376:	46aa      	mov	sl, r5
 8010378:	4a6f      	ldr	r2, [pc, #444]	; (8010538 <__aeabi_ddiv+0x5f8>)
 801037a:	e66f      	b.n	801005c <__aeabi_ddiv+0x11c>
 801037c:	42ba      	cmp	r2, r7
 801037e:	d900      	bls.n	8010382 <__aeabi_ddiv+0x442>
 8010380:	e735      	b.n	80101ee <__aeabi_ddiv+0x2ae>
 8010382:	464b      	mov	r3, r9
 8010384:	07dc      	lsls	r4, r3, #31
 8010386:	0858      	lsrs	r0, r3, #1
 8010388:	087b      	lsrs	r3, r7, #1
 801038a:	431c      	orrs	r4, r3
 801038c:	07ff      	lsls	r7, r7, #31
 801038e:	e734      	b.n	80101fa <__aeabi_ddiv+0x2ba>
 8010390:	2400      	movs	r4, #0
 8010392:	42af      	cmp	r7, r5
 8010394:	d289      	bcs.n	80102aa <__aeabi_ddiv+0x36a>
 8010396:	4447      	add	r7, r8
 8010398:	4547      	cmp	r7, r8
 801039a:	41a4      	sbcs	r4, r4
 801039c:	465b      	mov	r3, fp
 801039e:	4264      	negs	r4, r4
 80103a0:	19a4      	adds	r4, r4, r6
 80103a2:	1864      	adds	r4, r4, r1
 80103a4:	3b01      	subs	r3, #1
 80103a6:	42a6      	cmp	r6, r4
 80103a8:	d21e      	bcs.n	80103e8 <__aeabi_ddiv+0x4a8>
 80103aa:	42a0      	cmp	r0, r4
 80103ac:	d86d      	bhi.n	801048a <__aeabi_ddiv+0x54a>
 80103ae:	d100      	bne.n	80103b2 <__aeabi_ddiv+0x472>
 80103b0:	e0b6      	b.n	8010520 <__aeabi_ddiv+0x5e0>
 80103b2:	1a24      	subs	r4, r4, r0
 80103b4:	469b      	mov	fp, r3
 80103b6:	e778      	b.n	80102aa <__aeabi_ddiv+0x36a>
 80103b8:	0003      	movs	r3, r0
 80103ba:	465a      	mov	r2, fp
 80103bc:	3b28      	subs	r3, #40	; 0x28
 80103be:	409a      	lsls	r2, r3
 80103c0:	2700      	movs	r7, #0
 80103c2:	4691      	mov	r9, r2
 80103c4:	e688      	b.n	80100d8 <__aeabi_ddiv+0x198>
 80103c6:	4658      	mov	r0, fp
 80103c8:	f7fe fdd6 	bl	800ef78 <__clzsi2>
 80103cc:	3020      	adds	r0, #32
 80103ce:	e672      	b.n	80100b6 <__aeabi_ddiv+0x176>
 80103d0:	0003      	movs	r3, r0
 80103d2:	4652      	mov	r2, sl
 80103d4:	3b28      	subs	r3, #40	; 0x28
 80103d6:	409a      	lsls	r2, r3
 80103d8:	4693      	mov	fp, r2
 80103da:	2200      	movs	r2, #0
 80103dc:	e6b4      	b.n	8010148 <__aeabi_ddiv+0x208>
 80103de:	4650      	mov	r0, sl
 80103e0:	f7fe fdca 	bl	800ef78 <__clzsi2>
 80103e4:	3020      	adds	r0, #32
 80103e6:	e69a      	b.n	801011e <__aeabi_ddiv+0x1de>
 80103e8:	42a6      	cmp	r6, r4
 80103ea:	d1e2      	bne.n	80103b2 <__aeabi_ddiv+0x472>
 80103ec:	45b8      	cmp	r8, r7
 80103ee:	d9dc      	bls.n	80103aa <__aeabi_ddiv+0x46a>
 80103f0:	1a34      	subs	r4, r6, r0
 80103f2:	469b      	mov	fp, r3
 80103f4:	e759      	b.n	80102aa <__aeabi_ddiv+0x36a>
 80103f6:	2b1f      	cmp	r3, #31
 80103f8:	dc65      	bgt.n	80104c6 <__aeabi_ddiv+0x586>
 80103fa:	4c50      	ldr	r4, [pc, #320]	; (801053c <__aeabi_ddiv+0x5fc>)
 80103fc:	9900      	ldr	r1, [sp, #0]
 80103fe:	46a4      	mov	ip, r4
 8010400:	465c      	mov	r4, fp
 8010402:	4461      	add	r1, ip
 8010404:	0008      	movs	r0, r1
 8010406:	408c      	lsls	r4, r1
 8010408:	0011      	movs	r1, r2
 801040a:	4082      	lsls	r2, r0
 801040c:	40d9      	lsrs	r1, r3
 801040e:	1e50      	subs	r0, r2, #1
 8010410:	4182      	sbcs	r2, r0
 8010412:	430c      	orrs	r4, r1
 8010414:	4314      	orrs	r4, r2
 8010416:	465a      	mov	r2, fp
 8010418:	40da      	lsrs	r2, r3
 801041a:	0013      	movs	r3, r2
 801041c:	0762      	lsls	r2, r4, #29
 801041e:	d009      	beq.n	8010434 <__aeabi_ddiv+0x4f4>
 8010420:	220f      	movs	r2, #15
 8010422:	4022      	ands	r2, r4
 8010424:	2a04      	cmp	r2, #4
 8010426:	d005      	beq.n	8010434 <__aeabi_ddiv+0x4f4>
 8010428:	0022      	movs	r2, r4
 801042a:	1d14      	adds	r4, r2, #4
 801042c:	4294      	cmp	r4, r2
 801042e:	4189      	sbcs	r1, r1
 8010430:	4249      	negs	r1, r1
 8010432:	185b      	adds	r3, r3, r1
 8010434:	021a      	lsls	r2, r3, #8
 8010436:	d562      	bpl.n	80104fe <__aeabi_ddiv+0x5be>
 8010438:	2201      	movs	r2, #1
 801043a:	2300      	movs	r3, #0
 801043c:	2700      	movs	r7, #0
 801043e:	e60d      	b.n	801005c <__aeabi_ddiv+0x11c>
 8010440:	428a      	cmp	r2, r1
 8010442:	d800      	bhi.n	8010446 <__aeabi_ddiv+0x506>
 8010444:	e70a      	b.n	801025c <__aeabi_ddiv+0x31c>
 8010446:	1e83      	subs	r3, r0, #2
 8010448:	1989      	adds	r1, r1, r6
 801044a:	e707      	b.n	801025c <__aeabi_ddiv+0x31c>
 801044c:	230f      	movs	r3, #15
 801044e:	4013      	ands	r3, r2
 8010450:	2b04      	cmp	r3, #4
 8010452:	d100      	bne.n	8010456 <__aeabi_ddiv+0x516>
 8010454:	e5e6      	b.n	8010024 <__aeabi_ddiv+0xe4>
 8010456:	1d17      	adds	r7, r2, #4
 8010458:	4297      	cmp	r7, r2
 801045a:	4192      	sbcs	r2, r2
 801045c:	4253      	negs	r3, r2
 801045e:	449b      	add	fp, r3
 8010460:	08fa      	lsrs	r2, r7, #3
 8010462:	e5e0      	b.n	8010026 <__aeabi_ddiv+0xe6>
 8010464:	2800      	cmp	r0, #0
 8010466:	d100      	bne.n	801046a <__aeabi_ddiv+0x52a>
 8010468:	e5d7      	b.n	801001a <__aeabi_ddiv+0xda>
 801046a:	1871      	adds	r1, r6, r1
 801046c:	1e53      	subs	r3, r2, #1
 801046e:	42b1      	cmp	r1, r6
 8010470:	d327      	bcc.n	80104c2 <__aeabi_ddiv+0x582>
 8010472:	42a9      	cmp	r1, r5
 8010474:	d315      	bcc.n	80104a2 <__aeabi_ddiv+0x562>
 8010476:	d058      	beq.n	801052a <__aeabi_ddiv+0x5ea>
 8010478:	001a      	movs	r2, r3
 801047a:	e773      	b.n	8010364 <__aeabi_ddiv+0x424>
 801047c:	2b00      	cmp	r3, #0
 801047e:	dc00      	bgt.n	8010482 <__aeabi_ddiv+0x542>
 8010480:	e604      	b.n	801008c <__aeabi_ddiv+0x14c>
 8010482:	2301      	movs	r3, #1
 8010484:	2200      	movs	r2, #0
 8010486:	449b      	add	fp, r3
 8010488:	e5cd      	b.n	8010026 <__aeabi_ddiv+0xe6>
 801048a:	2302      	movs	r3, #2
 801048c:	4447      	add	r7, r8
 801048e:	4547      	cmp	r7, r8
 8010490:	4189      	sbcs	r1, r1
 8010492:	425b      	negs	r3, r3
 8010494:	469c      	mov	ip, r3
 8010496:	4249      	negs	r1, r1
 8010498:	1989      	adds	r1, r1, r6
 801049a:	190c      	adds	r4, r1, r4
 801049c:	44e3      	add	fp, ip
 801049e:	1a24      	subs	r4, r4, r0
 80104a0:	e703      	b.n	80102aa <__aeabi_ddiv+0x36a>
 80104a2:	4643      	mov	r3, r8
 80104a4:	005f      	lsls	r7, r3, #1
 80104a6:	4547      	cmp	r7, r8
 80104a8:	419b      	sbcs	r3, r3
 80104aa:	46b8      	mov	r8, r7
 80104ac:	425b      	negs	r3, r3
 80104ae:	199e      	adds	r6, r3, r6
 80104b0:	3a02      	subs	r2, #2
 80104b2:	1989      	adds	r1, r1, r6
 80104b4:	42a9      	cmp	r1, r5
 80104b6:	d000      	beq.n	80104ba <__aeabi_ddiv+0x57a>
 80104b8:	e754      	b.n	8010364 <__aeabi_ddiv+0x424>
 80104ba:	4540      	cmp	r0, r8
 80104bc:	d000      	beq.n	80104c0 <__aeabi_ddiv+0x580>
 80104be:	e751      	b.n	8010364 <__aeabi_ddiv+0x424>
 80104c0:	e5ab      	b.n	801001a <__aeabi_ddiv+0xda>
 80104c2:	001a      	movs	r2, r3
 80104c4:	e7f6      	b.n	80104b4 <__aeabi_ddiv+0x574>
 80104c6:	211f      	movs	r1, #31
 80104c8:	465f      	mov	r7, fp
 80104ca:	4249      	negs	r1, r1
 80104cc:	1b0c      	subs	r4, r1, r4
 80104ce:	40e7      	lsrs	r7, r4
 80104d0:	2b20      	cmp	r3, #32
 80104d2:	d007      	beq.n	80104e4 <__aeabi_ddiv+0x5a4>
 80104d4:	491a      	ldr	r1, [pc, #104]	; (8010540 <__aeabi_ddiv+0x600>)
 80104d6:	9b00      	ldr	r3, [sp, #0]
 80104d8:	468c      	mov	ip, r1
 80104da:	4463      	add	r3, ip
 80104dc:	0018      	movs	r0, r3
 80104de:	465b      	mov	r3, fp
 80104e0:	4083      	lsls	r3, r0
 80104e2:	431a      	orrs	r2, r3
 80104e4:	1e50      	subs	r0, r2, #1
 80104e6:	4182      	sbcs	r2, r0
 80104e8:	433a      	orrs	r2, r7
 80104ea:	2707      	movs	r7, #7
 80104ec:	2300      	movs	r3, #0
 80104ee:	4017      	ands	r7, r2
 80104f0:	d009      	beq.n	8010506 <__aeabi_ddiv+0x5c6>
 80104f2:	210f      	movs	r1, #15
 80104f4:	2300      	movs	r3, #0
 80104f6:	4011      	ands	r1, r2
 80104f8:	0014      	movs	r4, r2
 80104fa:	2904      	cmp	r1, #4
 80104fc:	d195      	bne.n	801042a <__aeabi_ddiv+0x4ea>
 80104fe:	0022      	movs	r2, r4
 8010500:	075f      	lsls	r7, r3, #29
 8010502:	025b      	lsls	r3, r3, #9
 8010504:	0b1b      	lsrs	r3, r3, #12
 8010506:	08d2      	lsrs	r2, r2, #3
 8010508:	4317      	orrs	r7, r2
 801050a:	2200      	movs	r2, #0
 801050c:	e5a6      	b.n	801005c <__aeabi_ddiv+0x11c>
 801050e:	2380      	movs	r3, #128	; 0x80
 8010510:	4659      	mov	r1, fp
 8010512:	031b      	lsls	r3, r3, #12
 8010514:	430b      	orrs	r3, r1
 8010516:	031b      	lsls	r3, r3, #12
 8010518:	0017      	movs	r7, r2
 801051a:	0b1b      	lsrs	r3, r3, #12
 801051c:	4a06      	ldr	r2, [pc, #24]	; (8010538 <__aeabi_ddiv+0x5f8>)
 801051e:	e59d      	b.n	801005c <__aeabi_ddiv+0x11c>
 8010520:	42bd      	cmp	r5, r7
 8010522:	d8b2      	bhi.n	801048a <__aeabi_ddiv+0x54a>
 8010524:	469b      	mov	fp, r3
 8010526:	2400      	movs	r4, #0
 8010528:	e6bf      	b.n	80102aa <__aeabi_ddiv+0x36a>
 801052a:	4580      	cmp	r8, r0
 801052c:	d3b9      	bcc.n	80104a2 <__aeabi_ddiv+0x562>
 801052e:	001a      	movs	r2, r3
 8010530:	e7c3      	b.n	80104ba <__aeabi_ddiv+0x57a>
 8010532:	46c0      	nop			; (mov r8, r8)
 8010534:	000003ff 	.word	0x000003ff
 8010538:	000007ff 	.word	0x000007ff
 801053c:	0000041e 	.word	0x0000041e
 8010540:	0000043e 	.word	0x0000043e

08010544 <__eqdf2>:
 8010544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010546:	464f      	mov	r7, r9
 8010548:	4646      	mov	r6, r8
 801054a:	46d6      	mov	lr, sl
 801054c:	4684      	mov	ip, r0
 801054e:	b5c0      	push	{r6, r7, lr}
 8010550:	4680      	mov	r8, r0
 8010552:	4e19      	ldr	r6, [pc, #100]	; (80105b8 <__eqdf2+0x74>)
 8010554:	0318      	lsls	r0, r3, #12
 8010556:	030f      	lsls	r7, r1, #12
 8010558:	004d      	lsls	r5, r1, #1
 801055a:	0b00      	lsrs	r0, r0, #12
 801055c:	005c      	lsls	r4, r3, #1
 801055e:	4682      	mov	sl, r0
 8010560:	0b3f      	lsrs	r7, r7, #12
 8010562:	0d6d      	lsrs	r5, r5, #21
 8010564:	0fc9      	lsrs	r1, r1, #31
 8010566:	4691      	mov	r9, r2
 8010568:	0d64      	lsrs	r4, r4, #21
 801056a:	0fdb      	lsrs	r3, r3, #31
 801056c:	2001      	movs	r0, #1
 801056e:	42b5      	cmp	r5, r6
 8010570:	d00a      	beq.n	8010588 <__eqdf2+0x44>
 8010572:	42b4      	cmp	r4, r6
 8010574:	d003      	beq.n	801057e <__eqdf2+0x3a>
 8010576:	42a5      	cmp	r5, r4
 8010578:	d101      	bne.n	801057e <__eqdf2+0x3a>
 801057a:	4557      	cmp	r7, sl
 801057c:	d00c      	beq.n	8010598 <__eqdf2+0x54>
 801057e:	bc1c      	pop	{r2, r3, r4}
 8010580:	4690      	mov	r8, r2
 8010582:	4699      	mov	r9, r3
 8010584:	46a2      	mov	sl, r4
 8010586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010588:	4666      	mov	r6, ip
 801058a:	433e      	orrs	r6, r7
 801058c:	d1f7      	bne.n	801057e <__eqdf2+0x3a>
 801058e:	42ac      	cmp	r4, r5
 8010590:	d1f5      	bne.n	801057e <__eqdf2+0x3a>
 8010592:	4654      	mov	r4, sl
 8010594:	4314      	orrs	r4, r2
 8010596:	d1f2      	bne.n	801057e <__eqdf2+0x3a>
 8010598:	2001      	movs	r0, #1
 801059a:	45c8      	cmp	r8, r9
 801059c:	d1ef      	bne.n	801057e <__eqdf2+0x3a>
 801059e:	4299      	cmp	r1, r3
 80105a0:	d007      	beq.n	80105b2 <__eqdf2+0x6e>
 80105a2:	2d00      	cmp	r5, #0
 80105a4:	d1eb      	bne.n	801057e <__eqdf2+0x3a>
 80105a6:	4663      	mov	r3, ip
 80105a8:	431f      	orrs	r7, r3
 80105aa:	0038      	movs	r0, r7
 80105ac:	1e47      	subs	r7, r0, #1
 80105ae:	41b8      	sbcs	r0, r7
 80105b0:	e7e5      	b.n	801057e <__eqdf2+0x3a>
 80105b2:	2000      	movs	r0, #0
 80105b4:	e7e3      	b.n	801057e <__eqdf2+0x3a>
 80105b6:	46c0      	nop			; (mov r8, r8)
 80105b8:	000007ff 	.word	0x000007ff

080105bc <__gedf2>:
 80105bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105be:	464f      	mov	r7, r9
 80105c0:	4646      	mov	r6, r8
 80105c2:	46d6      	mov	lr, sl
 80105c4:	004d      	lsls	r5, r1, #1
 80105c6:	b5c0      	push	{r6, r7, lr}
 80105c8:	030e      	lsls	r6, r1, #12
 80105ca:	0fc9      	lsrs	r1, r1, #31
 80105cc:	468a      	mov	sl, r1
 80105ce:	492c      	ldr	r1, [pc, #176]	; (8010680 <__gedf2+0xc4>)
 80105d0:	031f      	lsls	r7, r3, #12
 80105d2:	005c      	lsls	r4, r3, #1
 80105d4:	4680      	mov	r8, r0
 80105d6:	0b36      	lsrs	r6, r6, #12
 80105d8:	0d6d      	lsrs	r5, r5, #21
 80105da:	4691      	mov	r9, r2
 80105dc:	0b3f      	lsrs	r7, r7, #12
 80105de:	0d64      	lsrs	r4, r4, #21
 80105e0:	0fdb      	lsrs	r3, r3, #31
 80105e2:	428d      	cmp	r5, r1
 80105e4:	d01e      	beq.n	8010624 <__gedf2+0x68>
 80105e6:	428c      	cmp	r4, r1
 80105e8:	d016      	beq.n	8010618 <__gedf2+0x5c>
 80105ea:	2d00      	cmp	r5, #0
 80105ec:	d11e      	bne.n	801062c <__gedf2+0x70>
 80105ee:	4330      	orrs	r0, r6
 80105f0:	4684      	mov	ip, r0
 80105f2:	2c00      	cmp	r4, #0
 80105f4:	d101      	bne.n	80105fa <__gedf2+0x3e>
 80105f6:	433a      	orrs	r2, r7
 80105f8:	d023      	beq.n	8010642 <__gedf2+0x86>
 80105fa:	4662      	mov	r2, ip
 80105fc:	2a00      	cmp	r2, #0
 80105fe:	d01a      	beq.n	8010636 <__gedf2+0x7a>
 8010600:	459a      	cmp	sl, r3
 8010602:	d029      	beq.n	8010658 <__gedf2+0x9c>
 8010604:	4651      	mov	r1, sl
 8010606:	2002      	movs	r0, #2
 8010608:	3901      	subs	r1, #1
 801060a:	4008      	ands	r0, r1
 801060c:	3801      	subs	r0, #1
 801060e:	bc1c      	pop	{r2, r3, r4}
 8010610:	4690      	mov	r8, r2
 8010612:	4699      	mov	r9, r3
 8010614:	46a2      	mov	sl, r4
 8010616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010618:	0039      	movs	r1, r7
 801061a:	4311      	orrs	r1, r2
 801061c:	d0e5      	beq.n	80105ea <__gedf2+0x2e>
 801061e:	2002      	movs	r0, #2
 8010620:	4240      	negs	r0, r0
 8010622:	e7f4      	b.n	801060e <__gedf2+0x52>
 8010624:	4330      	orrs	r0, r6
 8010626:	d1fa      	bne.n	801061e <__gedf2+0x62>
 8010628:	42ac      	cmp	r4, r5
 801062a:	d00f      	beq.n	801064c <__gedf2+0x90>
 801062c:	2c00      	cmp	r4, #0
 801062e:	d10f      	bne.n	8010650 <__gedf2+0x94>
 8010630:	433a      	orrs	r2, r7
 8010632:	d0e7      	beq.n	8010604 <__gedf2+0x48>
 8010634:	e00c      	b.n	8010650 <__gedf2+0x94>
 8010636:	2201      	movs	r2, #1
 8010638:	3b01      	subs	r3, #1
 801063a:	4393      	bics	r3, r2
 801063c:	0018      	movs	r0, r3
 801063e:	3001      	adds	r0, #1
 8010640:	e7e5      	b.n	801060e <__gedf2+0x52>
 8010642:	4663      	mov	r3, ip
 8010644:	2000      	movs	r0, #0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d0e1      	beq.n	801060e <__gedf2+0x52>
 801064a:	e7db      	b.n	8010604 <__gedf2+0x48>
 801064c:	433a      	orrs	r2, r7
 801064e:	d1e6      	bne.n	801061e <__gedf2+0x62>
 8010650:	459a      	cmp	sl, r3
 8010652:	d1d7      	bne.n	8010604 <__gedf2+0x48>
 8010654:	42a5      	cmp	r5, r4
 8010656:	dcd5      	bgt.n	8010604 <__gedf2+0x48>
 8010658:	42a5      	cmp	r5, r4
 801065a:	db05      	blt.n	8010668 <__gedf2+0xac>
 801065c:	42be      	cmp	r6, r7
 801065e:	d8d1      	bhi.n	8010604 <__gedf2+0x48>
 8010660:	d008      	beq.n	8010674 <__gedf2+0xb8>
 8010662:	2000      	movs	r0, #0
 8010664:	42be      	cmp	r6, r7
 8010666:	d2d2      	bcs.n	801060e <__gedf2+0x52>
 8010668:	4650      	mov	r0, sl
 801066a:	2301      	movs	r3, #1
 801066c:	3801      	subs	r0, #1
 801066e:	4398      	bics	r0, r3
 8010670:	3001      	adds	r0, #1
 8010672:	e7cc      	b.n	801060e <__gedf2+0x52>
 8010674:	45c8      	cmp	r8, r9
 8010676:	d8c5      	bhi.n	8010604 <__gedf2+0x48>
 8010678:	2000      	movs	r0, #0
 801067a:	45c8      	cmp	r8, r9
 801067c:	d3f4      	bcc.n	8010668 <__gedf2+0xac>
 801067e:	e7c6      	b.n	801060e <__gedf2+0x52>
 8010680:	000007ff 	.word	0x000007ff

08010684 <__ledf2>:
 8010684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010686:	464f      	mov	r7, r9
 8010688:	4646      	mov	r6, r8
 801068a:	46d6      	mov	lr, sl
 801068c:	004d      	lsls	r5, r1, #1
 801068e:	b5c0      	push	{r6, r7, lr}
 8010690:	030e      	lsls	r6, r1, #12
 8010692:	0fc9      	lsrs	r1, r1, #31
 8010694:	468a      	mov	sl, r1
 8010696:	492e      	ldr	r1, [pc, #184]	; (8010750 <__ledf2+0xcc>)
 8010698:	031f      	lsls	r7, r3, #12
 801069a:	005c      	lsls	r4, r3, #1
 801069c:	4680      	mov	r8, r0
 801069e:	0b36      	lsrs	r6, r6, #12
 80106a0:	0d6d      	lsrs	r5, r5, #21
 80106a2:	4691      	mov	r9, r2
 80106a4:	0b3f      	lsrs	r7, r7, #12
 80106a6:	0d64      	lsrs	r4, r4, #21
 80106a8:	0fdb      	lsrs	r3, r3, #31
 80106aa:	428d      	cmp	r5, r1
 80106ac:	d018      	beq.n	80106e0 <__ledf2+0x5c>
 80106ae:	428c      	cmp	r4, r1
 80106b0:	d011      	beq.n	80106d6 <__ledf2+0x52>
 80106b2:	2d00      	cmp	r5, #0
 80106b4:	d118      	bne.n	80106e8 <__ledf2+0x64>
 80106b6:	4330      	orrs	r0, r6
 80106b8:	4684      	mov	ip, r0
 80106ba:	2c00      	cmp	r4, #0
 80106bc:	d11e      	bne.n	80106fc <__ledf2+0x78>
 80106be:	433a      	orrs	r2, r7
 80106c0:	d11c      	bne.n	80106fc <__ledf2+0x78>
 80106c2:	4663      	mov	r3, ip
 80106c4:	2000      	movs	r0, #0
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d030      	beq.n	801072c <__ledf2+0xa8>
 80106ca:	4651      	mov	r1, sl
 80106cc:	2002      	movs	r0, #2
 80106ce:	3901      	subs	r1, #1
 80106d0:	4008      	ands	r0, r1
 80106d2:	3801      	subs	r0, #1
 80106d4:	e02a      	b.n	801072c <__ledf2+0xa8>
 80106d6:	0039      	movs	r1, r7
 80106d8:	4311      	orrs	r1, r2
 80106da:	d0ea      	beq.n	80106b2 <__ledf2+0x2e>
 80106dc:	2002      	movs	r0, #2
 80106de:	e025      	b.n	801072c <__ledf2+0xa8>
 80106e0:	4330      	orrs	r0, r6
 80106e2:	d1fb      	bne.n	80106dc <__ledf2+0x58>
 80106e4:	42ac      	cmp	r4, r5
 80106e6:	d026      	beq.n	8010736 <__ledf2+0xb2>
 80106e8:	2c00      	cmp	r4, #0
 80106ea:	d126      	bne.n	801073a <__ledf2+0xb6>
 80106ec:	433a      	orrs	r2, r7
 80106ee:	d124      	bne.n	801073a <__ledf2+0xb6>
 80106f0:	4651      	mov	r1, sl
 80106f2:	2002      	movs	r0, #2
 80106f4:	3901      	subs	r1, #1
 80106f6:	4008      	ands	r0, r1
 80106f8:	3801      	subs	r0, #1
 80106fa:	e017      	b.n	801072c <__ledf2+0xa8>
 80106fc:	4662      	mov	r2, ip
 80106fe:	2a00      	cmp	r2, #0
 8010700:	d00f      	beq.n	8010722 <__ledf2+0x9e>
 8010702:	459a      	cmp	sl, r3
 8010704:	d1e1      	bne.n	80106ca <__ledf2+0x46>
 8010706:	42a5      	cmp	r5, r4
 8010708:	db05      	blt.n	8010716 <__ledf2+0x92>
 801070a:	42be      	cmp	r6, r7
 801070c:	d8dd      	bhi.n	80106ca <__ledf2+0x46>
 801070e:	d019      	beq.n	8010744 <__ledf2+0xc0>
 8010710:	2000      	movs	r0, #0
 8010712:	42be      	cmp	r6, r7
 8010714:	d20a      	bcs.n	801072c <__ledf2+0xa8>
 8010716:	4650      	mov	r0, sl
 8010718:	2301      	movs	r3, #1
 801071a:	3801      	subs	r0, #1
 801071c:	4398      	bics	r0, r3
 801071e:	3001      	adds	r0, #1
 8010720:	e004      	b.n	801072c <__ledf2+0xa8>
 8010722:	2201      	movs	r2, #1
 8010724:	3b01      	subs	r3, #1
 8010726:	4393      	bics	r3, r2
 8010728:	0018      	movs	r0, r3
 801072a:	3001      	adds	r0, #1
 801072c:	bc1c      	pop	{r2, r3, r4}
 801072e:	4690      	mov	r8, r2
 8010730:	4699      	mov	r9, r3
 8010732:	46a2      	mov	sl, r4
 8010734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010736:	433a      	orrs	r2, r7
 8010738:	d1d0      	bne.n	80106dc <__ledf2+0x58>
 801073a:	459a      	cmp	sl, r3
 801073c:	d1c5      	bne.n	80106ca <__ledf2+0x46>
 801073e:	42a5      	cmp	r5, r4
 8010740:	dcc3      	bgt.n	80106ca <__ledf2+0x46>
 8010742:	e7e0      	b.n	8010706 <__ledf2+0x82>
 8010744:	45c8      	cmp	r8, r9
 8010746:	d8c0      	bhi.n	80106ca <__ledf2+0x46>
 8010748:	2000      	movs	r0, #0
 801074a:	45c8      	cmp	r8, r9
 801074c:	d3e3      	bcc.n	8010716 <__ledf2+0x92>
 801074e:	e7ed      	b.n	801072c <__ledf2+0xa8>
 8010750:	000007ff 	.word	0x000007ff

08010754 <__aeabi_dmul>:
 8010754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010756:	4657      	mov	r7, sl
 8010758:	46de      	mov	lr, fp
 801075a:	464e      	mov	r6, r9
 801075c:	4645      	mov	r5, r8
 801075e:	b5e0      	push	{r5, r6, r7, lr}
 8010760:	4683      	mov	fp, r0
 8010762:	0006      	movs	r6, r0
 8010764:	030f      	lsls	r7, r1, #12
 8010766:	0048      	lsls	r0, r1, #1
 8010768:	b087      	sub	sp, #28
 801076a:	4692      	mov	sl, r2
 801076c:	001d      	movs	r5, r3
 801076e:	0b3f      	lsrs	r7, r7, #12
 8010770:	0d40      	lsrs	r0, r0, #21
 8010772:	0fcc      	lsrs	r4, r1, #31
 8010774:	2800      	cmp	r0, #0
 8010776:	d100      	bne.n	801077a <__aeabi_dmul+0x26>
 8010778:	e06f      	b.n	801085a <__aeabi_dmul+0x106>
 801077a:	4bde      	ldr	r3, [pc, #888]	; (8010af4 <__aeabi_dmul+0x3a0>)
 801077c:	4298      	cmp	r0, r3
 801077e:	d038      	beq.n	80107f2 <__aeabi_dmul+0x9e>
 8010780:	2380      	movs	r3, #128	; 0x80
 8010782:	00ff      	lsls	r7, r7, #3
 8010784:	041b      	lsls	r3, r3, #16
 8010786:	431f      	orrs	r7, r3
 8010788:	0f73      	lsrs	r3, r6, #29
 801078a:	433b      	orrs	r3, r7
 801078c:	9301      	str	r3, [sp, #4]
 801078e:	4bda      	ldr	r3, [pc, #872]	; (8010af8 <__aeabi_dmul+0x3a4>)
 8010790:	2700      	movs	r7, #0
 8010792:	4699      	mov	r9, r3
 8010794:	2300      	movs	r3, #0
 8010796:	469b      	mov	fp, r3
 8010798:	00f6      	lsls	r6, r6, #3
 801079a:	4481      	add	r9, r0
 801079c:	032b      	lsls	r3, r5, #12
 801079e:	0069      	lsls	r1, r5, #1
 80107a0:	0b1b      	lsrs	r3, r3, #12
 80107a2:	4652      	mov	r2, sl
 80107a4:	4698      	mov	r8, r3
 80107a6:	0d49      	lsrs	r1, r1, #21
 80107a8:	0fed      	lsrs	r5, r5, #31
 80107aa:	2900      	cmp	r1, #0
 80107ac:	d100      	bne.n	80107b0 <__aeabi_dmul+0x5c>
 80107ae:	e085      	b.n	80108bc <__aeabi_dmul+0x168>
 80107b0:	4bd0      	ldr	r3, [pc, #832]	; (8010af4 <__aeabi_dmul+0x3a0>)
 80107b2:	4299      	cmp	r1, r3
 80107b4:	d100      	bne.n	80107b8 <__aeabi_dmul+0x64>
 80107b6:	e073      	b.n	80108a0 <__aeabi_dmul+0x14c>
 80107b8:	4643      	mov	r3, r8
 80107ba:	00da      	lsls	r2, r3, #3
 80107bc:	2380      	movs	r3, #128	; 0x80
 80107be:	041b      	lsls	r3, r3, #16
 80107c0:	4313      	orrs	r3, r2
 80107c2:	4652      	mov	r2, sl
 80107c4:	48cc      	ldr	r0, [pc, #816]	; (8010af8 <__aeabi_dmul+0x3a4>)
 80107c6:	0f52      	lsrs	r2, r2, #29
 80107c8:	4684      	mov	ip, r0
 80107ca:	4313      	orrs	r3, r2
 80107cc:	4652      	mov	r2, sl
 80107ce:	2000      	movs	r0, #0
 80107d0:	4461      	add	r1, ip
 80107d2:	00d2      	lsls	r2, r2, #3
 80107d4:	4489      	add	r9, r1
 80107d6:	0021      	movs	r1, r4
 80107d8:	4069      	eors	r1, r5
 80107da:	9100      	str	r1, [sp, #0]
 80107dc:	468c      	mov	ip, r1
 80107de:	2101      	movs	r1, #1
 80107e0:	4449      	add	r1, r9
 80107e2:	468a      	mov	sl, r1
 80107e4:	2f0f      	cmp	r7, #15
 80107e6:	d900      	bls.n	80107ea <__aeabi_dmul+0x96>
 80107e8:	e090      	b.n	801090c <__aeabi_dmul+0x1b8>
 80107ea:	49c4      	ldr	r1, [pc, #784]	; (8010afc <__aeabi_dmul+0x3a8>)
 80107ec:	00bf      	lsls	r7, r7, #2
 80107ee:	59cf      	ldr	r7, [r1, r7]
 80107f0:	46bf      	mov	pc, r7
 80107f2:	465b      	mov	r3, fp
 80107f4:	433b      	orrs	r3, r7
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	d000      	beq.n	80107fc <__aeabi_dmul+0xa8>
 80107fa:	e16a      	b.n	8010ad2 <__aeabi_dmul+0x37e>
 80107fc:	2302      	movs	r3, #2
 80107fe:	2708      	movs	r7, #8
 8010800:	2600      	movs	r6, #0
 8010802:	4681      	mov	r9, r0
 8010804:	469b      	mov	fp, r3
 8010806:	e7c9      	b.n	801079c <__aeabi_dmul+0x48>
 8010808:	0032      	movs	r2, r6
 801080a:	4658      	mov	r0, fp
 801080c:	9b01      	ldr	r3, [sp, #4]
 801080e:	4661      	mov	r1, ip
 8010810:	9100      	str	r1, [sp, #0]
 8010812:	2802      	cmp	r0, #2
 8010814:	d100      	bne.n	8010818 <__aeabi_dmul+0xc4>
 8010816:	e075      	b.n	8010904 <__aeabi_dmul+0x1b0>
 8010818:	2803      	cmp	r0, #3
 801081a:	d100      	bne.n	801081e <__aeabi_dmul+0xca>
 801081c:	e1fe      	b.n	8010c1c <__aeabi_dmul+0x4c8>
 801081e:	2801      	cmp	r0, #1
 8010820:	d000      	beq.n	8010824 <__aeabi_dmul+0xd0>
 8010822:	e12c      	b.n	8010a7e <__aeabi_dmul+0x32a>
 8010824:	2300      	movs	r3, #0
 8010826:	2700      	movs	r7, #0
 8010828:	2600      	movs	r6, #0
 801082a:	2500      	movs	r5, #0
 801082c:	033f      	lsls	r7, r7, #12
 801082e:	0d2a      	lsrs	r2, r5, #20
 8010830:	0b3f      	lsrs	r7, r7, #12
 8010832:	48b3      	ldr	r0, [pc, #716]	; (8010b00 <__aeabi_dmul+0x3ac>)
 8010834:	0512      	lsls	r2, r2, #20
 8010836:	433a      	orrs	r2, r7
 8010838:	4002      	ands	r2, r0
 801083a:	051b      	lsls	r3, r3, #20
 801083c:	4313      	orrs	r3, r2
 801083e:	9a00      	ldr	r2, [sp, #0]
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	07d1      	lsls	r1, r2, #31
 8010844:	085b      	lsrs	r3, r3, #1
 8010846:	430b      	orrs	r3, r1
 8010848:	0030      	movs	r0, r6
 801084a:	0019      	movs	r1, r3
 801084c:	b007      	add	sp, #28
 801084e:	bc3c      	pop	{r2, r3, r4, r5}
 8010850:	4690      	mov	r8, r2
 8010852:	4699      	mov	r9, r3
 8010854:	46a2      	mov	sl, r4
 8010856:	46ab      	mov	fp, r5
 8010858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801085a:	465b      	mov	r3, fp
 801085c:	433b      	orrs	r3, r7
 801085e:	9301      	str	r3, [sp, #4]
 8010860:	d100      	bne.n	8010864 <__aeabi_dmul+0x110>
 8010862:	e12f      	b.n	8010ac4 <__aeabi_dmul+0x370>
 8010864:	2f00      	cmp	r7, #0
 8010866:	d100      	bne.n	801086a <__aeabi_dmul+0x116>
 8010868:	e1a5      	b.n	8010bb6 <__aeabi_dmul+0x462>
 801086a:	0038      	movs	r0, r7
 801086c:	f7fe fb84 	bl	800ef78 <__clzsi2>
 8010870:	0003      	movs	r3, r0
 8010872:	3b0b      	subs	r3, #11
 8010874:	2b1c      	cmp	r3, #28
 8010876:	dd00      	ble.n	801087a <__aeabi_dmul+0x126>
 8010878:	e196      	b.n	8010ba8 <__aeabi_dmul+0x454>
 801087a:	221d      	movs	r2, #29
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	465a      	mov	r2, fp
 8010880:	0001      	movs	r1, r0
 8010882:	40da      	lsrs	r2, r3
 8010884:	465e      	mov	r6, fp
 8010886:	3908      	subs	r1, #8
 8010888:	408f      	lsls	r7, r1
 801088a:	0013      	movs	r3, r2
 801088c:	408e      	lsls	r6, r1
 801088e:	433b      	orrs	r3, r7
 8010890:	9301      	str	r3, [sp, #4]
 8010892:	4b9c      	ldr	r3, [pc, #624]	; (8010b04 <__aeabi_dmul+0x3b0>)
 8010894:	2700      	movs	r7, #0
 8010896:	1a1b      	subs	r3, r3, r0
 8010898:	4699      	mov	r9, r3
 801089a:	2300      	movs	r3, #0
 801089c:	469b      	mov	fp, r3
 801089e:	e77d      	b.n	801079c <__aeabi_dmul+0x48>
 80108a0:	4641      	mov	r1, r8
 80108a2:	4653      	mov	r3, sl
 80108a4:	430b      	orrs	r3, r1
 80108a6:	4993      	ldr	r1, [pc, #588]	; (8010af4 <__aeabi_dmul+0x3a0>)
 80108a8:	468c      	mov	ip, r1
 80108aa:	44e1      	add	r9, ip
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d000      	beq.n	80108b2 <__aeabi_dmul+0x15e>
 80108b0:	e11a      	b.n	8010ae8 <__aeabi_dmul+0x394>
 80108b2:	2202      	movs	r2, #2
 80108b4:	2002      	movs	r0, #2
 80108b6:	4317      	orrs	r7, r2
 80108b8:	2200      	movs	r2, #0
 80108ba:	e78c      	b.n	80107d6 <__aeabi_dmul+0x82>
 80108bc:	4313      	orrs	r3, r2
 80108be:	d100      	bne.n	80108c2 <__aeabi_dmul+0x16e>
 80108c0:	e10d      	b.n	8010ade <__aeabi_dmul+0x38a>
 80108c2:	4643      	mov	r3, r8
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d100      	bne.n	80108ca <__aeabi_dmul+0x176>
 80108c8:	e181      	b.n	8010bce <__aeabi_dmul+0x47a>
 80108ca:	4640      	mov	r0, r8
 80108cc:	f7fe fb54 	bl	800ef78 <__clzsi2>
 80108d0:	0002      	movs	r2, r0
 80108d2:	3a0b      	subs	r2, #11
 80108d4:	2a1c      	cmp	r2, #28
 80108d6:	dd00      	ble.n	80108da <__aeabi_dmul+0x186>
 80108d8:	e172      	b.n	8010bc0 <__aeabi_dmul+0x46c>
 80108da:	0001      	movs	r1, r0
 80108dc:	4643      	mov	r3, r8
 80108de:	3908      	subs	r1, #8
 80108e0:	408b      	lsls	r3, r1
 80108e2:	4698      	mov	r8, r3
 80108e4:	231d      	movs	r3, #29
 80108e6:	1a9a      	subs	r2, r3, r2
 80108e8:	4653      	mov	r3, sl
 80108ea:	40d3      	lsrs	r3, r2
 80108ec:	001a      	movs	r2, r3
 80108ee:	4643      	mov	r3, r8
 80108f0:	4313      	orrs	r3, r2
 80108f2:	4652      	mov	r2, sl
 80108f4:	408a      	lsls	r2, r1
 80108f6:	4649      	mov	r1, r9
 80108f8:	1a08      	subs	r0, r1, r0
 80108fa:	4982      	ldr	r1, [pc, #520]	; (8010b04 <__aeabi_dmul+0x3b0>)
 80108fc:	4689      	mov	r9, r1
 80108fe:	4481      	add	r9, r0
 8010900:	2000      	movs	r0, #0
 8010902:	e768      	b.n	80107d6 <__aeabi_dmul+0x82>
 8010904:	4b7b      	ldr	r3, [pc, #492]	; (8010af4 <__aeabi_dmul+0x3a0>)
 8010906:	2700      	movs	r7, #0
 8010908:	2600      	movs	r6, #0
 801090a:	e78e      	b.n	801082a <__aeabi_dmul+0xd6>
 801090c:	0c14      	lsrs	r4, r2, #16
 801090e:	0412      	lsls	r2, r2, #16
 8010910:	0c12      	lsrs	r2, r2, #16
 8010912:	0011      	movs	r1, r2
 8010914:	0c37      	lsrs	r7, r6, #16
 8010916:	0436      	lsls	r6, r6, #16
 8010918:	0c35      	lsrs	r5, r6, #16
 801091a:	4379      	muls	r1, r7
 801091c:	0028      	movs	r0, r5
 801091e:	468c      	mov	ip, r1
 8010920:	002e      	movs	r6, r5
 8010922:	4360      	muls	r0, r4
 8010924:	4460      	add	r0, ip
 8010926:	4683      	mov	fp, r0
 8010928:	4356      	muls	r6, r2
 801092a:	0021      	movs	r1, r4
 801092c:	0c30      	lsrs	r0, r6, #16
 801092e:	4680      	mov	r8, r0
 8010930:	4658      	mov	r0, fp
 8010932:	4379      	muls	r1, r7
 8010934:	4440      	add	r0, r8
 8010936:	9102      	str	r1, [sp, #8]
 8010938:	4584      	cmp	ip, r0
 801093a:	d906      	bls.n	801094a <__aeabi_dmul+0x1f6>
 801093c:	4688      	mov	r8, r1
 801093e:	2180      	movs	r1, #128	; 0x80
 8010940:	0249      	lsls	r1, r1, #9
 8010942:	468c      	mov	ip, r1
 8010944:	44e0      	add	r8, ip
 8010946:	4641      	mov	r1, r8
 8010948:	9102      	str	r1, [sp, #8]
 801094a:	0436      	lsls	r6, r6, #16
 801094c:	0c01      	lsrs	r1, r0, #16
 801094e:	0c36      	lsrs	r6, r6, #16
 8010950:	0400      	lsls	r0, r0, #16
 8010952:	468b      	mov	fp, r1
 8010954:	1981      	adds	r1, r0, r6
 8010956:	0c1e      	lsrs	r6, r3, #16
 8010958:	041b      	lsls	r3, r3, #16
 801095a:	0c1b      	lsrs	r3, r3, #16
 801095c:	9103      	str	r1, [sp, #12]
 801095e:	0019      	movs	r1, r3
 8010960:	4379      	muls	r1, r7
 8010962:	468c      	mov	ip, r1
 8010964:	0028      	movs	r0, r5
 8010966:	4375      	muls	r5, r6
 8010968:	4465      	add	r5, ip
 801096a:	46a8      	mov	r8, r5
 801096c:	4358      	muls	r0, r3
 801096e:	0c05      	lsrs	r5, r0, #16
 8010970:	4445      	add	r5, r8
 8010972:	4377      	muls	r7, r6
 8010974:	42a9      	cmp	r1, r5
 8010976:	d903      	bls.n	8010980 <__aeabi_dmul+0x22c>
 8010978:	2180      	movs	r1, #128	; 0x80
 801097a:	0249      	lsls	r1, r1, #9
 801097c:	468c      	mov	ip, r1
 801097e:	4467      	add	r7, ip
 8010980:	0c29      	lsrs	r1, r5, #16
 8010982:	468c      	mov	ip, r1
 8010984:	0039      	movs	r1, r7
 8010986:	0400      	lsls	r0, r0, #16
 8010988:	0c00      	lsrs	r0, r0, #16
 801098a:	042d      	lsls	r5, r5, #16
 801098c:	182d      	adds	r5, r5, r0
 801098e:	4461      	add	r1, ip
 8010990:	44ab      	add	fp, r5
 8010992:	9105      	str	r1, [sp, #20]
 8010994:	4659      	mov	r1, fp
 8010996:	9104      	str	r1, [sp, #16]
 8010998:	9901      	ldr	r1, [sp, #4]
 801099a:	040f      	lsls	r7, r1, #16
 801099c:	0c3f      	lsrs	r7, r7, #16
 801099e:	0c08      	lsrs	r0, r1, #16
 80109a0:	0039      	movs	r1, r7
 80109a2:	4351      	muls	r1, r2
 80109a4:	4342      	muls	r2, r0
 80109a6:	4690      	mov	r8, r2
 80109a8:	0002      	movs	r2, r0
 80109aa:	468c      	mov	ip, r1
 80109ac:	0c09      	lsrs	r1, r1, #16
 80109ae:	468b      	mov	fp, r1
 80109b0:	4362      	muls	r2, r4
 80109b2:	437c      	muls	r4, r7
 80109b4:	4444      	add	r4, r8
 80109b6:	445c      	add	r4, fp
 80109b8:	45a0      	cmp	r8, r4
 80109ba:	d903      	bls.n	80109c4 <__aeabi_dmul+0x270>
 80109bc:	2180      	movs	r1, #128	; 0x80
 80109be:	0249      	lsls	r1, r1, #9
 80109c0:	4688      	mov	r8, r1
 80109c2:	4442      	add	r2, r8
 80109c4:	0c21      	lsrs	r1, r4, #16
 80109c6:	4688      	mov	r8, r1
 80109c8:	4661      	mov	r1, ip
 80109ca:	0409      	lsls	r1, r1, #16
 80109cc:	0c09      	lsrs	r1, r1, #16
 80109ce:	468c      	mov	ip, r1
 80109d0:	0039      	movs	r1, r7
 80109d2:	4359      	muls	r1, r3
 80109d4:	4343      	muls	r3, r0
 80109d6:	4370      	muls	r0, r6
 80109d8:	437e      	muls	r6, r7
 80109da:	0c0f      	lsrs	r7, r1, #16
 80109dc:	18f6      	adds	r6, r6, r3
 80109de:	0424      	lsls	r4, r4, #16
 80109e0:	19be      	adds	r6, r7, r6
 80109e2:	4464      	add	r4, ip
 80109e4:	4442      	add	r2, r8
 80109e6:	468c      	mov	ip, r1
 80109e8:	42b3      	cmp	r3, r6
 80109ea:	d903      	bls.n	80109f4 <__aeabi_dmul+0x2a0>
 80109ec:	2380      	movs	r3, #128	; 0x80
 80109ee:	025b      	lsls	r3, r3, #9
 80109f0:	4698      	mov	r8, r3
 80109f2:	4440      	add	r0, r8
 80109f4:	9b02      	ldr	r3, [sp, #8]
 80109f6:	4661      	mov	r1, ip
 80109f8:	4698      	mov	r8, r3
 80109fa:	9b04      	ldr	r3, [sp, #16]
 80109fc:	0437      	lsls	r7, r6, #16
 80109fe:	4443      	add	r3, r8
 8010a00:	469b      	mov	fp, r3
 8010a02:	45ab      	cmp	fp, r5
 8010a04:	41ad      	sbcs	r5, r5
 8010a06:	426b      	negs	r3, r5
 8010a08:	040d      	lsls	r5, r1, #16
 8010a0a:	9905      	ldr	r1, [sp, #20]
 8010a0c:	0c2d      	lsrs	r5, r5, #16
 8010a0e:	468c      	mov	ip, r1
 8010a10:	197f      	adds	r7, r7, r5
 8010a12:	4467      	add	r7, ip
 8010a14:	18fd      	adds	r5, r7, r3
 8010a16:	46a8      	mov	r8, r5
 8010a18:	465d      	mov	r5, fp
 8010a1a:	192d      	adds	r5, r5, r4
 8010a1c:	42a5      	cmp	r5, r4
 8010a1e:	41a4      	sbcs	r4, r4
 8010a20:	4693      	mov	fp, r2
 8010a22:	4264      	negs	r4, r4
 8010a24:	46a4      	mov	ip, r4
 8010a26:	44c3      	add	fp, r8
 8010a28:	44dc      	add	ip, fp
 8010a2a:	428f      	cmp	r7, r1
 8010a2c:	41bf      	sbcs	r7, r7
 8010a2e:	4598      	cmp	r8, r3
 8010a30:	419b      	sbcs	r3, r3
 8010a32:	4593      	cmp	fp, r2
 8010a34:	4192      	sbcs	r2, r2
 8010a36:	45a4      	cmp	ip, r4
 8010a38:	41a4      	sbcs	r4, r4
 8010a3a:	425b      	negs	r3, r3
 8010a3c:	427f      	negs	r7, r7
 8010a3e:	431f      	orrs	r7, r3
 8010a40:	0c36      	lsrs	r6, r6, #16
 8010a42:	4252      	negs	r2, r2
 8010a44:	4264      	negs	r4, r4
 8010a46:	19bf      	adds	r7, r7, r6
 8010a48:	4322      	orrs	r2, r4
 8010a4a:	18bf      	adds	r7, r7, r2
 8010a4c:	4662      	mov	r2, ip
 8010a4e:	1838      	adds	r0, r7, r0
 8010a50:	0243      	lsls	r3, r0, #9
 8010a52:	0dd2      	lsrs	r2, r2, #23
 8010a54:	9903      	ldr	r1, [sp, #12]
 8010a56:	4313      	orrs	r3, r2
 8010a58:	026a      	lsls	r2, r5, #9
 8010a5a:	430a      	orrs	r2, r1
 8010a5c:	1e50      	subs	r0, r2, #1
 8010a5e:	4182      	sbcs	r2, r0
 8010a60:	4661      	mov	r1, ip
 8010a62:	0ded      	lsrs	r5, r5, #23
 8010a64:	432a      	orrs	r2, r5
 8010a66:	024e      	lsls	r6, r1, #9
 8010a68:	4332      	orrs	r2, r6
 8010a6a:	01d9      	lsls	r1, r3, #7
 8010a6c:	d400      	bmi.n	8010a70 <__aeabi_dmul+0x31c>
 8010a6e:	e0b3      	b.n	8010bd8 <__aeabi_dmul+0x484>
 8010a70:	2601      	movs	r6, #1
 8010a72:	0850      	lsrs	r0, r2, #1
 8010a74:	4032      	ands	r2, r6
 8010a76:	4302      	orrs	r2, r0
 8010a78:	07de      	lsls	r6, r3, #31
 8010a7a:	4332      	orrs	r2, r6
 8010a7c:	085b      	lsrs	r3, r3, #1
 8010a7e:	4c22      	ldr	r4, [pc, #136]	; (8010b08 <__aeabi_dmul+0x3b4>)
 8010a80:	4454      	add	r4, sl
 8010a82:	2c00      	cmp	r4, #0
 8010a84:	dd62      	ble.n	8010b4c <__aeabi_dmul+0x3f8>
 8010a86:	0751      	lsls	r1, r2, #29
 8010a88:	d009      	beq.n	8010a9e <__aeabi_dmul+0x34a>
 8010a8a:	200f      	movs	r0, #15
 8010a8c:	4010      	ands	r0, r2
 8010a8e:	2804      	cmp	r0, #4
 8010a90:	d005      	beq.n	8010a9e <__aeabi_dmul+0x34a>
 8010a92:	1d10      	adds	r0, r2, #4
 8010a94:	4290      	cmp	r0, r2
 8010a96:	4192      	sbcs	r2, r2
 8010a98:	4252      	negs	r2, r2
 8010a9a:	189b      	adds	r3, r3, r2
 8010a9c:	0002      	movs	r2, r0
 8010a9e:	01d9      	lsls	r1, r3, #7
 8010aa0:	d504      	bpl.n	8010aac <__aeabi_dmul+0x358>
 8010aa2:	2480      	movs	r4, #128	; 0x80
 8010aa4:	4819      	ldr	r0, [pc, #100]	; (8010b0c <__aeabi_dmul+0x3b8>)
 8010aa6:	00e4      	lsls	r4, r4, #3
 8010aa8:	4003      	ands	r3, r0
 8010aaa:	4454      	add	r4, sl
 8010aac:	4818      	ldr	r0, [pc, #96]	; (8010b10 <__aeabi_dmul+0x3bc>)
 8010aae:	4284      	cmp	r4, r0
 8010ab0:	dd00      	ble.n	8010ab4 <__aeabi_dmul+0x360>
 8010ab2:	e727      	b.n	8010904 <__aeabi_dmul+0x1b0>
 8010ab4:	075e      	lsls	r6, r3, #29
 8010ab6:	025b      	lsls	r3, r3, #9
 8010ab8:	08d2      	lsrs	r2, r2, #3
 8010aba:	0b1f      	lsrs	r7, r3, #12
 8010abc:	0563      	lsls	r3, r4, #21
 8010abe:	4316      	orrs	r6, r2
 8010ac0:	0d5b      	lsrs	r3, r3, #21
 8010ac2:	e6b2      	b.n	801082a <__aeabi_dmul+0xd6>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	4699      	mov	r9, r3
 8010ac8:	3301      	adds	r3, #1
 8010aca:	2704      	movs	r7, #4
 8010acc:	2600      	movs	r6, #0
 8010ace:	469b      	mov	fp, r3
 8010ad0:	e664      	b.n	801079c <__aeabi_dmul+0x48>
 8010ad2:	2303      	movs	r3, #3
 8010ad4:	9701      	str	r7, [sp, #4]
 8010ad6:	4681      	mov	r9, r0
 8010ad8:	270c      	movs	r7, #12
 8010ada:	469b      	mov	fp, r3
 8010adc:	e65e      	b.n	801079c <__aeabi_dmul+0x48>
 8010ade:	2201      	movs	r2, #1
 8010ae0:	2001      	movs	r0, #1
 8010ae2:	4317      	orrs	r7, r2
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	e676      	b.n	80107d6 <__aeabi_dmul+0x82>
 8010ae8:	2303      	movs	r3, #3
 8010aea:	2003      	movs	r0, #3
 8010aec:	431f      	orrs	r7, r3
 8010aee:	4643      	mov	r3, r8
 8010af0:	e671      	b.n	80107d6 <__aeabi_dmul+0x82>
 8010af2:	46c0      	nop			; (mov r8, r8)
 8010af4:	000007ff 	.word	0x000007ff
 8010af8:	fffffc01 	.word	0xfffffc01
 8010afc:	0801bea4 	.word	0x0801bea4
 8010b00:	800fffff 	.word	0x800fffff
 8010b04:	fffffc0d 	.word	0xfffffc0d
 8010b08:	000003ff 	.word	0x000003ff
 8010b0c:	feffffff 	.word	0xfeffffff
 8010b10:	000007fe 	.word	0x000007fe
 8010b14:	2300      	movs	r3, #0
 8010b16:	2780      	movs	r7, #128	; 0x80
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	033f      	lsls	r7, r7, #12
 8010b1c:	2600      	movs	r6, #0
 8010b1e:	4b43      	ldr	r3, [pc, #268]	; (8010c2c <__aeabi_dmul+0x4d8>)
 8010b20:	e683      	b.n	801082a <__aeabi_dmul+0xd6>
 8010b22:	9b01      	ldr	r3, [sp, #4]
 8010b24:	0032      	movs	r2, r6
 8010b26:	46a4      	mov	ip, r4
 8010b28:	4658      	mov	r0, fp
 8010b2a:	e670      	b.n	801080e <__aeabi_dmul+0xba>
 8010b2c:	46ac      	mov	ip, r5
 8010b2e:	e66e      	b.n	801080e <__aeabi_dmul+0xba>
 8010b30:	2780      	movs	r7, #128	; 0x80
 8010b32:	9901      	ldr	r1, [sp, #4]
 8010b34:	033f      	lsls	r7, r7, #12
 8010b36:	4239      	tst	r1, r7
 8010b38:	d02d      	beq.n	8010b96 <__aeabi_dmul+0x442>
 8010b3a:	423b      	tst	r3, r7
 8010b3c:	d12b      	bne.n	8010b96 <__aeabi_dmul+0x442>
 8010b3e:	431f      	orrs	r7, r3
 8010b40:	033f      	lsls	r7, r7, #12
 8010b42:	0b3f      	lsrs	r7, r7, #12
 8010b44:	9500      	str	r5, [sp, #0]
 8010b46:	0016      	movs	r6, r2
 8010b48:	4b38      	ldr	r3, [pc, #224]	; (8010c2c <__aeabi_dmul+0x4d8>)
 8010b4a:	e66e      	b.n	801082a <__aeabi_dmul+0xd6>
 8010b4c:	2501      	movs	r5, #1
 8010b4e:	1b2d      	subs	r5, r5, r4
 8010b50:	2d38      	cmp	r5, #56	; 0x38
 8010b52:	dd00      	ble.n	8010b56 <__aeabi_dmul+0x402>
 8010b54:	e666      	b.n	8010824 <__aeabi_dmul+0xd0>
 8010b56:	2d1f      	cmp	r5, #31
 8010b58:	dc40      	bgt.n	8010bdc <__aeabi_dmul+0x488>
 8010b5a:	4835      	ldr	r0, [pc, #212]	; (8010c30 <__aeabi_dmul+0x4dc>)
 8010b5c:	001c      	movs	r4, r3
 8010b5e:	4450      	add	r0, sl
 8010b60:	0016      	movs	r6, r2
 8010b62:	4082      	lsls	r2, r0
 8010b64:	4084      	lsls	r4, r0
 8010b66:	40ee      	lsrs	r6, r5
 8010b68:	1e50      	subs	r0, r2, #1
 8010b6a:	4182      	sbcs	r2, r0
 8010b6c:	4334      	orrs	r4, r6
 8010b6e:	4314      	orrs	r4, r2
 8010b70:	40eb      	lsrs	r3, r5
 8010b72:	0762      	lsls	r2, r4, #29
 8010b74:	d009      	beq.n	8010b8a <__aeabi_dmul+0x436>
 8010b76:	220f      	movs	r2, #15
 8010b78:	4022      	ands	r2, r4
 8010b7a:	2a04      	cmp	r2, #4
 8010b7c:	d005      	beq.n	8010b8a <__aeabi_dmul+0x436>
 8010b7e:	0022      	movs	r2, r4
 8010b80:	1d14      	adds	r4, r2, #4
 8010b82:	4294      	cmp	r4, r2
 8010b84:	4180      	sbcs	r0, r0
 8010b86:	4240      	negs	r0, r0
 8010b88:	181b      	adds	r3, r3, r0
 8010b8a:	021a      	lsls	r2, r3, #8
 8010b8c:	d53e      	bpl.n	8010c0c <__aeabi_dmul+0x4b8>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	2700      	movs	r7, #0
 8010b92:	2600      	movs	r6, #0
 8010b94:	e649      	b.n	801082a <__aeabi_dmul+0xd6>
 8010b96:	2780      	movs	r7, #128	; 0x80
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	033f      	lsls	r7, r7, #12
 8010b9c:	431f      	orrs	r7, r3
 8010b9e:	033f      	lsls	r7, r7, #12
 8010ba0:	0b3f      	lsrs	r7, r7, #12
 8010ba2:	9400      	str	r4, [sp, #0]
 8010ba4:	4b21      	ldr	r3, [pc, #132]	; (8010c2c <__aeabi_dmul+0x4d8>)
 8010ba6:	e640      	b.n	801082a <__aeabi_dmul+0xd6>
 8010ba8:	0003      	movs	r3, r0
 8010baa:	465a      	mov	r2, fp
 8010bac:	3b28      	subs	r3, #40	; 0x28
 8010bae:	409a      	lsls	r2, r3
 8010bb0:	2600      	movs	r6, #0
 8010bb2:	9201      	str	r2, [sp, #4]
 8010bb4:	e66d      	b.n	8010892 <__aeabi_dmul+0x13e>
 8010bb6:	4658      	mov	r0, fp
 8010bb8:	f7fe f9de 	bl	800ef78 <__clzsi2>
 8010bbc:	3020      	adds	r0, #32
 8010bbe:	e657      	b.n	8010870 <__aeabi_dmul+0x11c>
 8010bc0:	0003      	movs	r3, r0
 8010bc2:	4652      	mov	r2, sl
 8010bc4:	3b28      	subs	r3, #40	; 0x28
 8010bc6:	409a      	lsls	r2, r3
 8010bc8:	0013      	movs	r3, r2
 8010bca:	2200      	movs	r2, #0
 8010bcc:	e693      	b.n	80108f6 <__aeabi_dmul+0x1a2>
 8010bce:	4650      	mov	r0, sl
 8010bd0:	f7fe f9d2 	bl	800ef78 <__clzsi2>
 8010bd4:	3020      	adds	r0, #32
 8010bd6:	e67b      	b.n	80108d0 <__aeabi_dmul+0x17c>
 8010bd8:	46ca      	mov	sl, r9
 8010bda:	e750      	b.n	8010a7e <__aeabi_dmul+0x32a>
 8010bdc:	201f      	movs	r0, #31
 8010bde:	001e      	movs	r6, r3
 8010be0:	4240      	negs	r0, r0
 8010be2:	1b04      	subs	r4, r0, r4
 8010be4:	40e6      	lsrs	r6, r4
 8010be6:	2d20      	cmp	r5, #32
 8010be8:	d003      	beq.n	8010bf2 <__aeabi_dmul+0x49e>
 8010bea:	4c12      	ldr	r4, [pc, #72]	; (8010c34 <__aeabi_dmul+0x4e0>)
 8010bec:	4454      	add	r4, sl
 8010bee:	40a3      	lsls	r3, r4
 8010bf0:	431a      	orrs	r2, r3
 8010bf2:	1e50      	subs	r0, r2, #1
 8010bf4:	4182      	sbcs	r2, r0
 8010bf6:	4332      	orrs	r2, r6
 8010bf8:	2607      	movs	r6, #7
 8010bfa:	2700      	movs	r7, #0
 8010bfc:	4016      	ands	r6, r2
 8010bfe:	d009      	beq.n	8010c14 <__aeabi_dmul+0x4c0>
 8010c00:	200f      	movs	r0, #15
 8010c02:	2300      	movs	r3, #0
 8010c04:	4010      	ands	r0, r2
 8010c06:	0014      	movs	r4, r2
 8010c08:	2804      	cmp	r0, #4
 8010c0a:	d1b9      	bne.n	8010b80 <__aeabi_dmul+0x42c>
 8010c0c:	0022      	movs	r2, r4
 8010c0e:	075e      	lsls	r6, r3, #29
 8010c10:	025b      	lsls	r3, r3, #9
 8010c12:	0b1f      	lsrs	r7, r3, #12
 8010c14:	08d2      	lsrs	r2, r2, #3
 8010c16:	4316      	orrs	r6, r2
 8010c18:	2300      	movs	r3, #0
 8010c1a:	e606      	b.n	801082a <__aeabi_dmul+0xd6>
 8010c1c:	2780      	movs	r7, #128	; 0x80
 8010c1e:	033f      	lsls	r7, r7, #12
 8010c20:	431f      	orrs	r7, r3
 8010c22:	033f      	lsls	r7, r7, #12
 8010c24:	0b3f      	lsrs	r7, r7, #12
 8010c26:	0016      	movs	r6, r2
 8010c28:	4b00      	ldr	r3, [pc, #0]	; (8010c2c <__aeabi_dmul+0x4d8>)
 8010c2a:	e5fe      	b.n	801082a <__aeabi_dmul+0xd6>
 8010c2c:	000007ff 	.word	0x000007ff
 8010c30:	0000041e 	.word	0x0000041e
 8010c34:	0000043e 	.word	0x0000043e

08010c38 <__aeabi_dsub>:
 8010c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c3a:	4657      	mov	r7, sl
 8010c3c:	464e      	mov	r6, r9
 8010c3e:	4645      	mov	r5, r8
 8010c40:	46de      	mov	lr, fp
 8010c42:	000c      	movs	r4, r1
 8010c44:	0309      	lsls	r1, r1, #12
 8010c46:	b5e0      	push	{r5, r6, r7, lr}
 8010c48:	0a49      	lsrs	r1, r1, #9
 8010c4a:	0f46      	lsrs	r6, r0, #29
 8010c4c:	005f      	lsls	r7, r3, #1
 8010c4e:	4331      	orrs	r1, r6
 8010c50:	031e      	lsls	r6, r3, #12
 8010c52:	0fdb      	lsrs	r3, r3, #31
 8010c54:	0a76      	lsrs	r6, r6, #9
 8010c56:	469b      	mov	fp, r3
 8010c58:	0f53      	lsrs	r3, r2, #29
 8010c5a:	4333      	orrs	r3, r6
 8010c5c:	4ec8      	ldr	r6, [pc, #800]	; (8010f80 <__aeabi_dsub+0x348>)
 8010c5e:	0065      	lsls	r5, r4, #1
 8010c60:	00c0      	lsls	r0, r0, #3
 8010c62:	0fe4      	lsrs	r4, r4, #31
 8010c64:	00d2      	lsls	r2, r2, #3
 8010c66:	0d6d      	lsrs	r5, r5, #21
 8010c68:	46a2      	mov	sl, r4
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	0d7f      	lsrs	r7, r7, #21
 8010c6e:	469c      	mov	ip, r3
 8010c70:	4690      	mov	r8, r2
 8010c72:	42b7      	cmp	r7, r6
 8010c74:	d100      	bne.n	8010c78 <__aeabi_dsub+0x40>
 8010c76:	e0b9      	b.n	8010dec <__aeabi_dsub+0x1b4>
 8010c78:	465b      	mov	r3, fp
 8010c7a:	2601      	movs	r6, #1
 8010c7c:	4073      	eors	r3, r6
 8010c7e:	469b      	mov	fp, r3
 8010c80:	1bee      	subs	r6, r5, r7
 8010c82:	45a3      	cmp	fp, r4
 8010c84:	d100      	bne.n	8010c88 <__aeabi_dsub+0x50>
 8010c86:	e083      	b.n	8010d90 <__aeabi_dsub+0x158>
 8010c88:	2e00      	cmp	r6, #0
 8010c8a:	dd63      	ble.n	8010d54 <__aeabi_dsub+0x11c>
 8010c8c:	2f00      	cmp	r7, #0
 8010c8e:	d000      	beq.n	8010c92 <__aeabi_dsub+0x5a>
 8010c90:	e0b1      	b.n	8010df6 <__aeabi_dsub+0x1be>
 8010c92:	4663      	mov	r3, ip
 8010c94:	4313      	orrs	r3, r2
 8010c96:	d100      	bne.n	8010c9a <__aeabi_dsub+0x62>
 8010c98:	e123      	b.n	8010ee2 <__aeabi_dsub+0x2aa>
 8010c9a:	1e73      	subs	r3, r6, #1
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d000      	beq.n	8010ca2 <__aeabi_dsub+0x6a>
 8010ca0:	e1ba      	b.n	8011018 <__aeabi_dsub+0x3e0>
 8010ca2:	1a86      	subs	r6, r0, r2
 8010ca4:	4663      	mov	r3, ip
 8010ca6:	42b0      	cmp	r0, r6
 8010ca8:	4180      	sbcs	r0, r0
 8010caa:	2501      	movs	r5, #1
 8010cac:	1ac9      	subs	r1, r1, r3
 8010cae:	4240      	negs	r0, r0
 8010cb0:	1a09      	subs	r1, r1, r0
 8010cb2:	020b      	lsls	r3, r1, #8
 8010cb4:	d400      	bmi.n	8010cb8 <__aeabi_dsub+0x80>
 8010cb6:	e147      	b.n	8010f48 <__aeabi_dsub+0x310>
 8010cb8:	0249      	lsls	r1, r1, #9
 8010cba:	0a4b      	lsrs	r3, r1, #9
 8010cbc:	4698      	mov	r8, r3
 8010cbe:	4643      	mov	r3, r8
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d100      	bne.n	8010cc6 <__aeabi_dsub+0x8e>
 8010cc4:	e189      	b.n	8010fda <__aeabi_dsub+0x3a2>
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	f7fe f956 	bl	800ef78 <__clzsi2>
 8010ccc:	0003      	movs	r3, r0
 8010cce:	3b08      	subs	r3, #8
 8010cd0:	2b1f      	cmp	r3, #31
 8010cd2:	dd00      	ble.n	8010cd6 <__aeabi_dsub+0x9e>
 8010cd4:	e17c      	b.n	8010fd0 <__aeabi_dsub+0x398>
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	0030      	movs	r0, r6
 8010cda:	1ad2      	subs	r2, r2, r3
 8010cdc:	4641      	mov	r1, r8
 8010cde:	40d0      	lsrs	r0, r2
 8010ce0:	4099      	lsls	r1, r3
 8010ce2:	0002      	movs	r2, r0
 8010ce4:	409e      	lsls	r6, r3
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	429d      	cmp	r5, r3
 8010cea:	dd00      	ble.n	8010cee <__aeabi_dsub+0xb6>
 8010cec:	e16a      	b.n	8010fc4 <__aeabi_dsub+0x38c>
 8010cee:	1b5d      	subs	r5, r3, r5
 8010cf0:	1c6b      	adds	r3, r5, #1
 8010cf2:	2b1f      	cmp	r3, #31
 8010cf4:	dd00      	ble.n	8010cf8 <__aeabi_dsub+0xc0>
 8010cf6:	e194      	b.n	8011022 <__aeabi_dsub+0x3ea>
 8010cf8:	2120      	movs	r1, #32
 8010cfa:	0010      	movs	r0, r2
 8010cfc:	0035      	movs	r5, r6
 8010cfe:	1ac9      	subs	r1, r1, r3
 8010d00:	408e      	lsls	r6, r1
 8010d02:	40da      	lsrs	r2, r3
 8010d04:	4088      	lsls	r0, r1
 8010d06:	40dd      	lsrs	r5, r3
 8010d08:	1e71      	subs	r1, r6, #1
 8010d0a:	418e      	sbcs	r6, r1
 8010d0c:	0011      	movs	r1, r2
 8010d0e:	2207      	movs	r2, #7
 8010d10:	4328      	orrs	r0, r5
 8010d12:	2500      	movs	r5, #0
 8010d14:	4306      	orrs	r6, r0
 8010d16:	4032      	ands	r2, r6
 8010d18:	2a00      	cmp	r2, #0
 8010d1a:	d009      	beq.n	8010d30 <__aeabi_dsub+0xf8>
 8010d1c:	230f      	movs	r3, #15
 8010d1e:	4033      	ands	r3, r6
 8010d20:	2b04      	cmp	r3, #4
 8010d22:	d005      	beq.n	8010d30 <__aeabi_dsub+0xf8>
 8010d24:	1d33      	adds	r3, r6, #4
 8010d26:	42b3      	cmp	r3, r6
 8010d28:	41b6      	sbcs	r6, r6
 8010d2a:	4276      	negs	r6, r6
 8010d2c:	1989      	adds	r1, r1, r6
 8010d2e:	001e      	movs	r6, r3
 8010d30:	020b      	lsls	r3, r1, #8
 8010d32:	d400      	bmi.n	8010d36 <__aeabi_dsub+0xfe>
 8010d34:	e23d      	b.n	80111b2 <__aeabi_dsub+0x57a>
 8010d36:	1c6a      	adds	r2, r5, #1
 8010d38:	4b91      	ldr	r3, [pc, #580]	; (8010f80 <__aeabi_dsub+0x348>)
 8010d3a:	0555      	lsls	r5, r2, #21
 8010d3c:	0d6d      	lsrs	r5, r5, #21
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d100      	bne.n	8010d44 <__aeabi_dsub+0x10c>
 8010d42:	e119      	b.n	8010f78 <__aeabi_dsub+0x340>
 8010d44:	4a8f      	ldr	r2, [pc, #572]	; (8010f84 <__aeabi_dsub+0x34c>)
 8010d46:	08f6      	lsrs	r6, r6, #3
 8010d48:	400a      	ands	r2, r1
 8010d4a:	0757      	lsls	r7, r2, #29
 8010d4c:	0252      	lsls	r2, r2, #9
 8010d4e:	4337      	orrs	r7, r6
 8010d50:	0b12      	lsrs	r2, r2, #12
 8010d52:	e09b      	b.n	8010e8c <__aeabi_dsub+0x254>
 8010d54:	2e00      	cmp	r6, #0
 8010d56:	d000      	beq.n	8010d5a <__aeabi_dsub+0x122>
 8010d58:	e0c5      	b.n	8010ee6 <__aeabi_dsub+0x2ae>
 8010d5a:	1c6e      	adds	r6, r5, #1
 8010d5c:	0576      	lsls	r6, r6, #21
 8010d5e:	0d76      	lsrs	r6, r6, #21
 8010d60:	2e01      	cmp	r6, #1
 8010d62:	dc00      	bgt.n	8010d66 <__aeabi_dsub+0x12e>
 8010d64:	e148      	b.n	8010ff8 <__aeabi_dsub+0x3c0>
 8010d66:	4667      	mov	r7, ip
 8010d68:	1a86      	subs	r6, r0, r2
 8010d6a:	1bcb      	subs	r3, r1, r7
 8010d6c:	42b0      	cmp	r0, r6
 8010d6e:	41bf      	sbcs	r7, r7
 8010d70:	427f      	negs	r7, r7
 8010d72:	46b8      	mov	r8, r7
 8010d74:	001f      	movs	r7, r3
 8010d76:	4643      	mov	r3, r8
 8010d78:	1aff      	subs	r7, r7, r3
 8010d7a:	003b      	movs	r3, r7
 8010d7c:	46b8      	mov	r8, r7
 8010d7e:	021b      	lsls	r3, r3, #8
 8010d80:	d500      	bpl.n	8010d84 <__aeabi_dsub+0x14c>
 8010d82:	e15f      	b.n	8011044 <__aeabi_dsub+0x40c>
 8010d84:	4337      	orrs	r7, r6
 8010d86:	d19a      	bne.n	8010cbe <__aeabi_dsub+0x86>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	2400      	movs	r4, #0
 8010d8c:	2500      	movs	r5, #0
 8010d8e:	e079      	b.n	8010e84 <__aeabi_dsub+0x24c>
 8010d90:	2e00      	cmp	r6, #0
 8010d92:	dc00      	bgt.n	8010d96 <__aeabi_dsub+0x15e>
 8010d94:	e0fa      	b.n	8010f8c <__aeabi_dsub+0x354>
 8010d96:	2f00      	cmp	r7, #0
 8010d98:	d100      	bne.n	8010d9c <__aeabi_dsub+0x164>
 8010d9a:	e08d      	b.n	8010eb8 <__aeabi_dsub+0x280>
 8010d9c:	4b78      	ldr	r3, [pc, #480]	; (8010f80 <__aeabi_dsub+0x348>)
 8010d9e:	429d      	cmp	r5, r3
 8010da0:	d067      	beq.n	8010e72 <__aeabi_dsub+0x23a>
 8010da2:	2380      	movs	r3, #128	; 0x80
 8010da4:	4667      	mov	r7, ip
 8010da6:	041b      	lsls	r3, r3, #16
 8010da8:	431f      	orrs	r7, r3
 8010daa:	46bc      	mov	ip, r7
 8010dac:	2e38      	cmp	r6, #56	; 0x38
 8010dae:	dc00      	bgt.n	8010db2 <__aeabi_dsub+0x17a>
 8010db0:	e152      	b.n	8011058 <__aeabi_dsub+0x420>
 8010db2:	4663      	mov	r3, ip
 8010db4:	4313      	orrs	r3, r2
 8010db6:	1e5a      	subs	r2, r3, #1
 8010db8:	4193      	sbcs	r3, r2
 8010dba:	181e      	adds	r6, r3, r0
 8010dbc:	4286      	cmp	r6, r0
 8010dbe:	4180      	sbcs	r0, r0
 8010dc0:	4240      	negs	r0, r0
 8010dc2:	1809      	adds	r1, r1, r0
 8010dc4:	020b      	lsls	r3, r1, #8
 8010dc6:	d400      	bmi.n	8010dca <__aeabi_dsub+0x192>
 8010dc8:	e0be      	b.n	8010f48 <__aeabi_dsub+0x310>
 8010dca:	4b6d      	ldr	r3, [pc, #436]	; (8010f80 <__aeabi_dsub+0x348>)
 8010dcc:	3501      	adds	r5, #1
 8010dce:	429d      	cmp	r5, r3
 8010dd0:	d100      	bne.n	8010dd4 <__aeabi_dsub+0x19c>
 8010dd2:	e0d2      	b.n	8010f7a <__aeabi_dsub+0x342>
 8010dd4:	4a6b      	ldr	r2, [pc, #428]	; (8010f84 <__aeabi_dsub+0x34c>)
 8010dd6:	0873      	lsrs	r3, r6, #1
 8010dd8:	400a      	ands	r2, r1
 8010dda:	2101      	movs	r1, #1
 8010ddc:	400e      	ands	r6, r1
 8010dde:	431e      	orrs	r6, r3
 8010de0:	0851      	lsrs	r1, r2, #1
 8010de2:	07d3      	lsls	r3, r2, #31
 8010de4:	2207      	movs	r2, #7
 8010de6:	431e      	orrs	r6, r3
 8010de8:	4032      	ands	r2, r6
 8010dea:	e795      	b.n	8010d18 <__aeabi_dsub+0xe0>
 8010dec:	001e      	movs	r6, r3
 8010dee:	4316      	orrs	r6, r2
 8010df0:	d000      	beq.n	8010df4 <__aeabi_dsub+0x1bc>
 8010df2:	e745      	b.n	8010c80 <__aeabi_dsub+0x48>
 8010df4:	e740      	b.n	8010c78 <__aeabi_dsub+0x40>
 8010df6:	4b62      	ldr	r3, [pc, #392]	; (8010f80 <__aeabi_dsub+0x348>)
 8010df8:	429d      	cmp	r5, r3
 8010dfa:	d03a      	beq.n	8010e72 <__aeabi_dsub+0x23a>
 8010dfc:	2380      	movs	r3, #128	; 0x80
 8010dfe:	4667      	mov	r7, ip
 8010e00:	041b      	lsls	r3, r3, #16
 8010e02:	431f      	orrs	r7, r3
 8010e04:	46bc      	mov	ip, r7
 8010e06:	2e38      	cmp	r6, #56	; 0x38
 8010e08:	dd00      	ble.n	8010e0c <__aeabi_dsub+0x1d4>
 8010e0a:	e0eb      	b.n	8010fe4 <__aeabi_dsub+0x3ac>
 8010e0c:	2e1f      	cmp	r6, #31
 8010e0e:	dc00      	bgt.n	8010e12 <__aeabi_dsub+0x1da>
 8010e10:	e13a      	b.n	8011088 <__aeabi_dsub+0x450>
 8010e12:	0033      	movs	r3, r6
 8010e14:	4667      	mov	r7, ip
 8010e16:	3b20      	subs	r3, #32
 8010e18:	40df      	lsrs	r7, r3
 8010e1a:	003b      	movs	r3, r7
 8010e1c:	2e20      	cmp	r6, #32
 8010e1e:	d005      	beq.n	8010e2c <__aeabi_dsub+0x1f4>
 8010e20:	2740      	movs	r7, #64	; 0x40
 8010e22:	1bbf      	subs	r7, r7, r6
 8010e24:	4666      	mov	r6, ip
 8010e26:	40be      	lsls	r6, r7
 8010e28:	4332      	orrs	r2, r6
 8010e2a:	4690      	mov	r8, r2
 8010e2c:	4646      	mov	r6, r8
 8010e2e:	1e72      	subs	r2, r6, #1
 8010e30:	4196      	sbcs	r6, r2
 8010e32:	4333      	orrs	r3, r6
 8010e34:	e0da      	b.n	8010fec <__aeabi_dsub+0x3b4>
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d100      	bne.n	8010e3c <__aeabi_dsub+0x204>
 8010e3a:	e214      	b.n	8011266 <__aeabi_dsub+0x62e>
 8010e3c:	4663      	mov	r3, ip
 8010e3e:	4313      	orrs	r3, r2
 8010e40:	d100      	bne.n	8010e44 <__aeabi_dsub+0x20c>
 8010e42:	e168      	b.n	8011116 <__aeabi_dsub+0x4de>
 8010e44:	2380      	movs	r3, #128	; 0x80
 8010e46:	074e      	lsls	r6, r1, #29
 8010e48:	08c0      	lsrs	r0, r0, #3
 8010e4a:	08c9      	lsrs	r1, r1, #3
 8010e4c:	031b      	lsls	r3, r3, #12
 8010e4e:	4306      	orrs	r6, r0
 8010e50:	4219      	tst	r1, r3
 8010e52:	d008      	beq.n	8010e66 <__aeabi_dsub+0x22e>
 8010e54:	4660      	mov	r0, ip
 8010e56:	08c0      	lsrs	r0, r0, #3
 8010e58:	4218      	tst	r0, r3
 8010e5a:	d104      	bne.n	8010e66 <__aeabi_dsub+0x22e>
 8010e5c:	4663      	mov	r3, ip
 8010e5e:	0001      	movs	r1, r0
 8010e60:	08d2      	lsrs	r2, r2, #3
 8010e62:	075e      	lsls	r6, r3, #29
 8010e64:	4316      	orrs	r6, r2
 8010e66:	00f3      	lsls	r3, r6, #3
 8010e68:	4699      	mov	r9, r3
 8010e6a:	00c9      	lsls	r1, r1, #3
 8010e6c:	0f72      	lsrs	r2, r6, #29
 8010e6e:	4d44      	ldr	r5, [pc, #272]	; (8010f80 <__aeabi_dsub+0x348>)
 8010e70:	4311      	orrs	r1, r2
 8010e72:	464b      	mov	r3, r9
 8010e74:	08de      	lsrs	r6, r3, #3
 8010e76:	4b42      	ldr	r3, [pc, #264]	; (8010f80 <__aeabi_dsub+0x348>)
 8010e78:	074f      	lsls	r7, r1, #29
 8010e7a:	4337      	orrs	r7, r6
 8010e7c:	08ca      	lsrs	r2, r1, #3
 8010e7e:	429d      	cmp	r5, r3
 8010e80:	d100      	bne.n	8010e84 <__aeabi_dsub+0x24c>
 8010e82:	e06e      	b.n	8010f62 <__aeabi_dsub+0x32a>
 8010e84:	0312      	lsls	r2, r2, #12
 8010e86:	056d      	lsls	r5, r5, #21
 8010e88:	0b12      	lsrs	r2, r2, #12
 8010e8a:	0d6d      	lsrs	r5, r5, #21
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	0312      	lsls	r2, r2, #12
 8010e90:	0b13      	lsrs	r3, r2, #12
 8010e92:	0d0a      	lsrs	r2, r1, #20
 8010e94:	0512      	lsls	r2, r2, #20
 8010e96:	431a      	orrs	r2, r3
 8010e98:	4b3b      	ldr	r3, [pc, #236]	; (8010f88 <__aeabi_dsub+0x350>)
 8010e9a:	052d      	lsls	r5, r5, #20
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	432b      	orrs	r3, r5
 8010ea0:	005b      	lsls	r3, r3, #1
 8010ea2:	07e4      	lsls	r4, r4, #31
 8010ea4:	085b      	lsrs	r3, r3, #1
 8010ea6:	4323      	orrs	r3, r4
 8010ea8:	0038      	movs	r0, r7
 8010eaa:	0019      	movs	r1, r3
 8010eac:	bc3c      	pop	{r2, r3, r4, r5}
 8010eae:	4690      	mov	r8, r2
 8010eb0:	4699      	mov	r9, r3
 8010eb2:	46a2      	mov	sl, r4
 8010eb4:	46ab      	mov	fp, r5
 8010eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010eb8:	4663      	mov	r3, ip
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	d011      	beq.n	8010ee2 <__aeabi_dsub+0x2aa>
 8010ebe:	1e73      	subs	r3, r6, #1
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d000      	beq.n	8010ec6 <__aeabi_dsub+0x28e>
 8010ec4:	e107      	b.n	80110d6 <__aeabi_dsub+0x49e>
 8010ec6:	1886      	adds	r6, r0, r2
 8010ec8:	4286      	cmp	r6, r0
 8010eca:	4180      	sbcs	r0, r0
 8010ecc:	4461      	add	r1, ip
 8010ece:	4240      	negs	r0, r0
 8010ed0:	1809      	adds	r1, r1, r0
 8010ed2:	2501      	movs	r5, #1
 8010ed4:	020b      	lsls	r3, r1, #8
 8010ed6:	d537      	bpl.n	8010f48 <__aeabi_dsub+0x310>
 8010ed8:	2502      	movs	r5, #2
 8010eda:	e77b      	b.n	8010dd4 <__aeabi_dsub+0x19c>
 8010edc:	003e      	movs	r6, r7
 8010ede:	4661      	mov	r1, ip
 8010ee0:	4691      	mov	r9, r2
 8010ee2:	0035      	movs	r5, r6
 8010ee4:	e7c5      	b.n	8010e72 <__aeabi_dsub+0x23a>
 8010ee6:	465c      	mov	r4, fp
 8010ee8:	2d00      	cmp	r5, #0
 8010eea:	d000      	beq.n	8010eee <__aeabi_dsub+0x2b6>
 8010eec:	e0e1      	b.n	80110b2 <__aeabi_dsub+0x47a>
 8010eee:	000b      	movs	r3, r1
 8010ef0:	4303      	orrs	r3, r0
 8010ef2:	d0f3      	beq.n	8010edc <__aeabi_dsub+0x2a4>
 8010ef4:	1c73      	adds	r3, r6, #1
 8010ef6:	d100      	bne.n	8010efa <__aeabi_dsub+0x2c2>
 8010ef8:	e1ac      	b.n	8011254 <__aeabi_dsub+0x61c>
 8010efa:	4b21      	ldr	r3, [pc, #132]	; (8010f80 <__aeabi_dsub+0x348>)
 8010efc:	429f      	cmp	r7, r3
 8010efe:	d100      	bne.n	8010f02 <__aeabi_dsub+0x2ca>
 8010f00:	e13a      	b.n	8011178 <__aeabi_dsub+0x540>
 8010f02:	43f3      	mvns	r3, r6
 8010f04:	2b38      	cmp	r3, #56	; 0x38
 8010f06:	dd00      	ble.n	8010f0a <__aeabi_dsub+0x2d2>
 8010f08:	e16f      	b.n	80111ea <__aeabi_dsub+0x5b2>
 8010f0a:	2b1f      	cmp	r3, #31
 8010f0c:	dd00      	ble.n	8010f10 <__aeabi_dsub+0x2d8>
 8010f0e:	e18c      	b.n	801122a <__aeabi_dsub+0x5f2>
 8010f10:	2520      	movs	r5, #32
 8010f12:	000e      	movs	r6, r1
 8010f14:	1aed      	subs	r5, r5, r3
 8010f16:	40ae      	lsls	r6, r5
 8010f18:	46b0      	mov	r8, r6
 8010f1a:	0006      	movs	r6, r0
 8010f1c:	46aa      	mov	sl, r5
 8010f1e:	40de      	lsrs	r6, r3
 8010f20:	4645      	mov	r5, r8
 8010f22:	4335      	orrs	r5, r6
 8010f24:	002e      	movs	r6, r5
 8010f26:	4655      	mov	r5, sl
 8010f28:	40d9      	lsrs	r1, r3
 8010f2a:	40a8      	lsls	r0, r5
 8010f2c:	4663      	mov	r3, ip
 8010f2e:	1e45      	subs	r5, r0, #1
 8010f30:	41a8      	sbcs	r0, r5
 8010f32:	1a5b      	subs	r3, r3, r1
 8010f34:	469c      	mov	ip, r3
 8010f36:	4330      	orrs	r0, r6
 8010f38:	1a16      	subs	r6, r2, r0
 8010f3a:	42b2      	cmp	r2, r6
 8010f3c:	4192      	sbcs	r2, r2
 8010f3e:	4663      	mov	r3, ip
 8010f40:	4252      	negs	r2, r2
 8010f42:	1a99      	subs	r1, r3, r2
 8010f44:	003d      	movs	r5, r7
 8010f46:	e6b4      	b.n	8010cb2 <__aeabi_dsub+0x7a>
 8010f48:	2207      	movs	r2, #7
 8010f4a:	4032      	ands	r2, r6
 8010f4c:	2a00      	cmp	r2, #0
 8010f4e:	d000      	beq.n	8010f52 <__aeabi_dsub+0x31a>
 8010f50:	e6e4      	b.n	8010d1c <__aeabi_dsub+0xe4>
 8010f52:	4b0b      	ldr	r3, [pc, #44]	; (8010f80 <__aeabi_dsub+0x348>)
 8010f54:	08f6      	lsrs	r6, r6, #3
 8010f56:	074f      	lsls	r7, r1, #29
 8010f58:	4337      	orrs	r7, r6
 8010f5a:	08ca      	lsrs	r2, r1, #3
 8010f5c:	429d      	cmp	r5, r3
 8010f5e:	d000      	beq.n	8010f62 <__aeabi_dsub+0x32a>
 8010f60:	e790      	b.n	8010e84 <__aeabi_dsub+0x24c>
 8010f62:	003b      	movs	r3, r7
 8010f64:	4313      	orrs	r3, r2
 8010f66:	d100      	bne.n	8010f6a <__aeabi_dsub+0x332>
 8010f68:	e1a6      	b.n	80112b8 <__aeabi_dsub+0x680>
 8010f6a:	2380      	movs	r3, #128	; 0x80
 8010f6c:	031b      	lsls	r3, r3, #12
 8010f6e:	431a      	orrs	r2, r3
 8010f70:	0312      	lsls	r2, r2, #12
 8010f72:	0b12      	lsrs	r2, r2, #12
 8010f74:	4d02      	ldr	r5, [pc, #8]	; (8010f80 <__aeabi_dsub+0x348>)
 8010f76:	e789      	b.n	8010e8c <__aeabi_dsub+0x254>
 8010f78:	0015      	movs	r5, r2
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2700      	movs	r7, #0
 8010f7e:	e785      	b.n	8010e8c <__aeabi_dsub+0x254>
 8010f80:	000007ff 	.word	0x000007ff
 8010f84:	ff7fffff 	.word	0xff7fffff
 8010f88:	800fffff 	.word	0x800fffff
 8010f8c:	2e00      	cmp	r6, #0
 8010f8e:	d000      	beq.n	8010f92 <__aeabi_dsub+0x35a>
 8010f90:	e0c7      	b.n	8011122 <__aeabi_dsub+0x4ea>
 8010f92:	1c6b      	adds	r3, r5, #1
 8010f94:	055e      	lsls	r6, r3, #21
 8010f96:	0d76      	lsrs	r6, r6, #21
 8010f98:	2e01      	cmp	r6, #1
 8010f9a:	dc00      	bgt.n	8010f9e <__aeabi_dsub+0x366>
 8010f9c:	e0f0      	b.n	8011180 <__aeabi_dsub+0x548>
 8010f9e:	4dc8      	ldr	r5, [pc, #800]	; (80112c0 <__aeabi_dsub+0x688>)
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	d100      	bne.n	8010fa6 <__aeabi_dsub+0x36e>
 8010fa4:	e0b9      	b.n	801111a <__aeabi_dsub+0x4e2>
 8010fa6:	1885      	adds	r5, r0, r2
 8010fa8:	000a      	movs	r2, r1
 8010faa:	4285      	cmp	r5, r0
 8010fac:	4189      	sbcs	r1, r1
 8010fae:	4462      	add	r2, ip
 8010fb0:	4249      	negs	r1, r1
 8010fb2:	1851      	adds	r1, r2, r1
 8010fb4:	2207      	movs	r2, #7
 8010fb6:	07ce      	lsls	r6, r1, #31
 8010fb8:	086d      	lsrs	r5, r5, #1
 8010fba:	432e      	orrs	r6, r5
 8010fbc:	0849      	lsrs	r1, r1, #1
 8010fbe:	4032      	ands	r2, r6
 8010fc0:	001d      	movs	r5, r3
 8010fc2:	e6a9      	b.n	8010d18 <__aeabi_dsub+0xe0>
 8010fc4:	49bf      	ldr	r1, [pc, #764]	; (80112c4 <__aeabi_dsub+0x68c>)
 8010fc6:	1aed      	subs	r5, r5, r3
 8010fc8:	4011      	ands	r1, r2
 8010fca:	2207      	movs	r2, #7
 8010fcc:	4032      	ands	r2, r6
 8010fce:	e6a3      	b.n	8010d18 <__aeabi_dsub+0xe0>
 8010fd0:	0032      	movs	r2, r6
 8010fd2:	3828      	subs	r0, #40	; 0x28
 8010fd4:	4082      	lsls	r2, r0
 8010fd6:	2600      	movs	r6, #0
 8010fd8:	e686      	b.n	8010ce8 <__aeabi_dsub+0xb0>
 8010fda:	0030      	movs	r0, r6
 8010fdc:	f7fd ffcc 	bl	800ef78 <__clzsi2>
 8010fe0:	3020      	adds	r0, #32
 8010fe2:	e673      	b.n	8010ccc <__aeabi_dsub+0x94>
 8010fe4:	4663      	mov	r3, ip
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	1e5a      	subs	r2, r3, #1
 8010fea:	4193      	sbcs	r3, r2
 8010fec:	1ac6      	subs	r6, r0, r3
 8010fee:	42b0      	cmp	r0, r6
 8010ff0:	4180      	sbcs	r0, r0
 8010ff2:	4240      	negs	r0, r0
 8010ff4:	1a09      	subs	r1, r1, r0
 8010ff6:	e65c      	b.n	8010cb2 <__aeabi_dsub+0x7a>
 8010ff8:	000e      	movs	r6, r1
 8010ffa:	4667      	mov	r7, ip
 8010ffc:	4306      	orrs	r6, r0
 8010ffe:	4317      	orrs	r7, r2
 8011000:	2d00      	cmp	r5, #0
 8011002:	d15e      	bne.n	80110c2 <__aeabi_dsub+0x48a>
 8011004:	2e00      	cmp	r6, #0
 8011006:	d000      	beq.n	801100a <__aeabi_dsub+0x3d2>
 8011008:	e0f3      	b.n	80111f2 <__aeabi_dsub+0x5ba>
 801100a:	2f00      	cmp	r7, #0
 801100c:	d100      	bne.n	8011010 <__aeabi_dsub+0x3d8>
 801100e:	e11e      	b.n	801124e <__aeabi_dsub+0x616>
 8011010:	465c      	mov	r4, fp
 8011012:	4661      	mov	r1, ip
 8011014:	4691      	mov	r9, r2
 8011016:	e72c      	b.n	8010e72 <__aeabi_dsub+0x23a>
 8011018:	4fa9      	ldr	r7, [pc, #676]	; (80112c0 <__aeabi_dsub+0x688>)
 801101a:	42be      	cmp	r6, r7
 801101c:	d07b      	beq.n	8011116 <__aeabi_dsub+0x4de>
 801101e:	001e      	movs	r6, r3
 8011020:	e6f1      	b.n	8010e06 <__aeabi_dsub+0x1ce>
 8011022:	0010      	movs	r0, r2
 8011024:	3d1f      	subs	r5, #31
 8011026:	40e8      	lsrs	r0, r5
 8011028:	2b20      	cmp	r3, #32
 801102a:	d003      	beq.n	8011034 <__aeabi_dsub+0x3fc>
 801102c:	2140      	movs	r1, #64	; 0x40
 801102e:	1acb      	subs	r3, r1, r3
 8011030:	409a      	lsls	r2, r3
 8011032:	4316      	orrs	r6, r2
 8011034:	1e73      	subs	r3, r6, #1
 8011036:	419e      	sbcs	r6, r3
 8011038:	2207      	movs	r2, #7
 801103a:	4306      	orrs	r6, r0
 801103c:	4032      	ands	r2, r6
 801103e:	2100      	movs	r1, #0
 8011040:	2500      	movs	r5, #0
 8011042:	e783      	b.n	8010f4c <__aeabi_dsub+0x314>
 8011044:	1a16      	subs	r6, r2, r0
 8011046:	4663      	mov	r3, ip
 8011048:	42b2      	cmp	r2, r6
 801104a:	4180      	sbcs	r0, r0
 801104c:	1a59      	subs	r1, r3, r1
 801104e:	4240      	negs	r0, r0
 8011050:	1a0b      	subs	r3, r1, r0
 8011052:	4698      	mov	r8, r3
 8011054:	465c      	mov	r4, fp
 8011056:	e632      	b.n	8010cbe <__aeabi_dsub+0x86>
 8011058:	2e1f      	cmp	r6, #31
 801105a:	dd00      	ble.n	801105e <__aeabi_dsub+0x426>
 801105c:	e0ab      	b.n	80111b6 <__aeabi_dsub+0x57e>
 801105e:	2720      	movs	r7, #32
 8011060:	1bbb      	subs	r3, r7, r6
 8011062:	469a      	mov	sl, r3
 8011064:	4663      	mov	r3, ip
 8011066:	4657      	mov	r7, sl
 8011068:	40bb      	lsls	r3, r7
 801106a:	4699      	mov	r9, r3
 801106c:	0013      	movs	r3, r2
 801106e:	464f      	mov	r7, r9
 8011070:	40f3      	lsrs	r3, r6
 8011072:	431f      	orrs	r7, r3
 8011074:	003b      	movs	r3, r7
 8011076:	4657      	mov	r7, sl
 8011078:	40ba      	lsls	r2, r7
 801107a:	1e57      	subs	r7, r2, #1
 801107c:	41ba      	sbcs	r2, r7
 801107e:	4313      	orrs	r3, r2
 8011080:	4662      	mov	r2, ip
 8011082:	40f2      	lsrs	r2, r6
 8011084:	1889      	adds	r1, r1, r2
 8011086:	e698      	b.n	8010dba <__aeabi_dsub+0x182>
 8011088:	2720      	movs	r7, #32
 801108a:	1bbb      	subs	r3, r7, r6
 801108c:	469a      	mov	sl, r3
 801108e:	4663      	mov	r3, ip
 8011090:	4657      	mov	r7, sl
 8011092:	40bb      	lsls	r3, r7
 8011094:	4699      	mov	r9, r3
 8011096:	0013      	movs	r3, r2
 8011098:	464f      	mov	r7, r9
 801109a:	40f3      	lsrs	r3, r6
 801109c:	431f      	orrs	r7, r3
 801109e:	003b      	movs	r3, r7
 80110a0:	4657      	mov	r7, sl
 80110a2:	40ba      	lsls	r2, r7
 80110a4:	1e57      	subs	r7, r2, #1
 80110a6:	41ba      	sbcs	r2, r7
 80110a8:	4313      	orrs	r3, r2
 80110aa:	4662      	mov	r2, ip
 80110ac:	40f2      	lsrs	r2, r6
 80110ae:	1a89      	subs	r1, r1, r2
 80110b0:	e79c      	b.n	8010fec <__aeabi_dsub+0x3b4>
 80110b2:	4b83      	ldr	r3, [pc, #524]	; (80112c0 <__aeabi_dsub+0x688>)
 80110b4:	429f      	cmp	r7, r3
 80110b6:	d05f      	beq.n	8011178 <__aeabi_dsub+0x540>
 80110b8:	2580      	movs	r5, #128	; 0x80
 80110ba:	042d      	lsls	r5, r5, #16
 80110bc:	4273      	negs	r3, r6
 80110be:	4329      	orrs	r1, r5
 80110c0:	e720      	b.n	8010f04 <__aeabi_dsub+0x2cc>
 80110c2:	2e00      	cmp	r6, #0
 80110c4:	d10c      	bne.n	80110e0 <__aeabi_dsub+0x4a8>
 80110c6:	2f00      	cmp	r7, #0
 80110c8:	d100      	bne.n	80110cc <__aeabi_dsub+0x494>
 80110ca:	e0d0      	b.n	801126e <__aeabi_dsub+0x636>
 80110cc:	465c      	mov	r4, fp
 80110ce:	4661      	mov	r1, ip
 80110d0:	4691      	mov	r9, r2
 80110d2:	4d7b      	ldr	r5, [pc, #492]	; (80112c0 <__aeabi_dsub+0x688>)
 80110d4:	e6cd      	b.n	8010e72 <__aeabi_dsub+0x23a>
 80110d6:	4f7a      	ldr	r7, [pc, #488]	; (80112c0 <__aeabi_dsub+0x688>)
 80110d8:	42be      	cmp	r6, r7
 80110da:	d01c      	beq.n	8011116 <__aeabi_dsub+0x4de>
 80110dc:	001e      	movs	r6, r3
 80110de:	e665      	b.n	8010dac <__aeabi_dsub+0x174>
 80110e0:	2f00      	cmp	r7, #0
 80110e2:	d018      	beq.n	8011116 <__aeabi_dsub+0x4de>
 80110e4:	08c0      	lsrs	r0, r0, #3
 80110e6:	074e      	lsls	r6, r1, #29
 80110e8:	4306      	orrs	r6, r0
 80110ea:	2080      	movs	r0, #128	; 0x80
 80110ec:	08c9      	lsrs	r1, r1, #3
 80110ee:	0300      	lsls	r0, r0, #12
 80110f0:	4201      	tst	r1, r0
 80110f2:	d008      	beq.n	8011106 <__aeabi_dsub+0x4ce>
 80110f4:	4663      	mov	r3, ip
 80110f6:	08dc      	lsrs	r4, r3, #3
 80110f8:	4204      	tst	r4, r0
 80110fa:	d104      	bne.n	8011106 <__aeabi_dsub+0x4ce>
 80110fc:	0021      	movs	r1, r4
 80110fe:	46da      	mov	sl, fp
 8011100:	08d2      	lsrs	r2, r2, #3
 8011102:	075e      	lsls	r6, r3, #29
 8011104:	4316      	orrs	r6, r2
 8011106:	00f3      	lsls	r3, r6, #3
 8011108:	4699      	mov	r9, r3
 801110a:	2401      	movs	r4, #1
 801110c:	4653      	mov	r3, sl
 801110e:	00c9      	lsls	r1, r1, #3
 8011110:	0f72      	lsrs	r2, r6, #29
 8011112:	4311      	orrs	r1, r2
 8011114:	401c      	ands	r4, r3
 8011116:	4d6a      	ldr	r5, [pc, #424]	; (80112c0 <__aeabi_dsub+0x688>)
 8011118:	e6ab      	b.n	8010e72 <__aeabi_dsub+0x23a>
 801111a:	001d      	movs	r5, r3
 801111c:	2200      	movs	r2, #0
 801111e:	2700      	movs	r7, #0
 8011120:	e6b4      	b.n	8010e8c <__aeabi_dsub+0x254>
 8011122:	2d00      	cmp	r5, #0
 8011124:	d159      	bne.n	80111da <__aeabi_dsub+0x5a2>
 8011126:	000b      	movs	r3, r1
 8011128:	4303      	orrs	r3, r0
 801112a:	d100      	bne.n	801112e <__aeabi_dsub+0x4f6>
 801112c:	e6d6      	b.n	8010edc <__aeabi_dsub+0x2a4>
 801112e:	1c73      	adds	r3, r6, #1
 8011130:	d100      	bne.n	8011134 <__aeabi_dsub+0x4fc>
 8011132:	e0b2      	b.n	801129a <__aeabi_dsub+0x662>
 8011134:	4b62      	ldr	r3, [pc, #392]	; (80112c0 <__aeabi_dsub+0x688>)
 8011136:	429f      	cmp	r7, r3
 8011138:	d01e      	beq.n	8011178 <__aeabi_dsub+0x540>
 801113a:	43f3      	mvns	r3, r6
 801113c:	2b38      	cmp	r3, #56	; 0x38
 801113e:	dc6f      	bgt.n	8011220 <__aeabi_dsub+0x5e8>
 8011140:	2b1f      	cmp	r3, #31
 8011142:	dd00      	ble.n	8011146 <__aeabi_dsub+0x50e>
 8011144:	e097      	b.n	8011276 <__aeabi_dsub+0x63e>
 8011146:	2520      	movs	r5, #32
 8011148:	000e      	movs	r6, r1
 801114a:	1aed      	subs	r5, r5, r3
 801114c:	40ae      	lsls	r6, r5
 801114e:	46b0      	mov	r8, r6
 8011150:	0006      	movs	r6, r0
 8011152:	46aa      	mov	sl, r5
 8011154:	40de      	lsrs	r6, r3
 8011156:	4645      	mov	r5, r8
 8011158:	4335      	orrs	r5, r6
 801115a:	002e      	movs	r6, r5
 801115c:	4655      	mov	r5, sl
 801115e:	40a8      	lsls	r0, r5
 8011160:	40d9      	lsrs	r1, r3
 8011162:	1e45      	subs	r5, r0, #1
 8011164:	41a8      	sbcs	r0, r5
 8011166:	448c      	add	ip, r1
 8011168:	4306      	orrs	r6, r0
 801116a:	18b6      	adds	r6, r6, r2
 801116c:	4296      	cmp	r6, r2
 801116e:	4192      	sbcs	r2, r2
 8011170:	4251      	negs	r1, r2
 8011172:	4461      	add	r1, ip
 8011174:	003d      	movs	r5, r7
 8011176:	e625      	b.n	8010dc4 <__aeabi_dsub+0x18c>
 8011178:	003d      	movs	r5, r7
 801117a:	4661      	mov	r1, ip
 801117c:	4691      	mov	r9, r2
 801117e:	e678      	b.n	8010e72 <__aeabi_dsub+0x23a>
 8011180:	000b      	movs	r3, r1
 8011182:	4303      	orrs	r3, r0
 8011184:	2d00      	cmp	r5, #0
 8011186:	d000      	beq.n	801118a <__aeabi_dsub+0x552>
 8011188:	e655      	b.n	8010e36 <__aeabi_dsub+0x1fe>
 801118a:	2b00      	cmp	r3, #0
 801118c:	d0f5      	beq.n	801117a <__aeabi_dsub+0x542>
 801118e:	4663      	mov	r3, ip
 8011190:	4313      	orrs	r3, r2
 8011192:	d100      	bne.n	8011196 <__aeabi_dsub+0x55e>
 8011194:	e66d      	b.n	8010e72 <__aeabi_dsub+0x23a>
 8011196:	1886      	adds	r6, r0, r2
 8011198:	4286      	cmp	r6, r0
 801119a:	4180      	sbcs	r0, r0
 801119c:	4461      	add	r1, ip
 801119e:	4240      	negs	r0, r0
 80111a0:	1809      	adds	r1, r1, r0
 80111a2:	2200      	movs	r2, #0
 80111a4:	020b      	lsls	r3, r1, #8
 80111a6:	d400      	bmi.n	80111aa <__aeabi_dsub+0x572>
 80111a8:	e6d0      	b.n	8010f4c <__aeabi_dsub+0x314>
 80111aa:	4b46      	ldr	r3, [pc, #280]	; (80112c4 <__aeabi_dsub+0x68c>)
 80111ac:	3501      	adds	r5, #1
 80111ae:	4019      	ands	r1, r3
 80111b0:	e5b2      	b.n	8010d18 <__aeabi_dsub+0xe0>
 80111b2:	46b1      	mov	r9, r6
 80111b4:	e65d      	b.n	8010e72 <__aeabi_dsub+0x23a>
 80111b6:	0033      	movs	r3, r6
 80111b8:	4667      	mov	r7, ip
 80111ba:	3b20      	subs	r3, #32
 80111bc:	40df      	lsrs	r7, r3
 80111be:	003b      	movs	r3, r7
 80111c0:	2e20      	cmp	r6, #32
 80111c2:	d005      	beq.n	80111d0 <__aeabi_dsub+0x598>
 80111c4:	2740      	movs	r7, #64	; 0x40
 80111c6:	1bbf      	subs	r7, r7, r6
 80111c8:	4666      	mov	r6, ip
 80111ca:	40be      	lsls	r6, r7
 80111cc:	4332      	orrs	r2, r6
 80111ce:	4690      	mov	r8, r2
 80111d0:	4646      	mov	r6, r8
 80111d2:	1e72      	subs	r2, r6, #1
 80111d4:	4196      	sbcs	r6, r2
 80111d6:	4333      	orrs	r3, r6
 80111d8:	e5ef      	b.n	8010dba <__aeabi_dsub+0x182>
 80111da:	4b39      	ldr	r3, [pc, #228]	; (80112c0 <__aeabi_dsub+0x688>)
 80111dc:	429f      	cmp	r7, r3
 80111de:	d0cb      	beq.n	8011178 <__aeabi_dsub+0x540>
 80111e0:	2580      	movs	r5, #128	; 0x80
 80111e2:	042d      	lsls	r5, r5, #16
 80111e4:	4273      	negs	r3, r6
 80111e6:	4329      	orrs	r1, r5
 80111e8:	e7a8      	b.n	801113c <__aeabi_dsub+0x504>
 80111ea:	4308      	orrs	r0, r1
 80111ec:	1e41      	subs	r1, r0, #1
 80111ee:	4188      	sbcs	r0, r1
 80111f0:	e6a2      	b.n	8010f38 <__aeabi_dsub+0x300>
 80111f2:	2f00      	cmp	r7, #0
 80111f4:	d100      	bne.n	80111f8 <__aeabi_dsub+0x5c0>
 80111f6:	e63c      	b.n	8010e72 <__aeabi_dsub+0x23a>
 80111f8:	4663      	mov	r3, ip
 80111fa:	1a86      	subs	r6, r0, r2
 80111fc:	1acf      	subs	r7, r1, r3
 80111fe:	42b0      	cmp	r0, r6
 8011200:	419b      	sbcs	r3, r3
 8011202:	425b      	negs	r3, r3
 8011204:	1afb      	subs	r3, r7, r3
 8011206:	4698      	mov	r8, r3
 8011208:	021b      	lsls	r3, r3, #8
 801120a:	d54e      	bpl.n	80112aa <__aeabi_dsub+0x672>
 801120c:	1a16      	subs	r6, r2, r0
 801120e:	4663      	mov	r3, ip
 8011210:	42b2      	cmp	r2, r6
 8011212:	4192      	sbcs	r2, r2
 8011214:	1a59      	subs	r1, r3, r1
 8011216:	4252      	negs	r2, r2
 8011218:	1a89      	subs	r1, r1, r2
 801121a:	465c      	mov	r4, fp
 801121c:	2200      	movs	r2, #0
 801121e:	e57b      	b.n	8010d18 <__aeabi_dsub+0xe0>
 8011220:	4301      	orrs	r1, r0
 8011222:	000e      	movs	r6, r1
 8011224:	1e71      	subs	r1, r6, #1
 8011226:	418e      	sbcs	r6, r1
 8011228:	e79f      	b.n	801116a <__aeabi_dsub+0x532>
 801122a:	001d      	movs	r5, r3
 801122c:	000e      	movs	r6, r1
 801122e:	3d20      	subs	r5, #32
 8011230:	40ee      	lsrs	r6, r5
 8011232:	46b0      	mov	r8, r6
 8011234:	2b20      	cmp	r3, #32
 8011236:	d004      	beq.n	8011242 <__aeabi_dsub+0x60a>
 8011238:	2540      	movs	r5, #64	; 0x40
 801123a:	1aeb      	subs	r3, r5, r3
 801123c:	4099      	lsls	r1, r3
 801123e:	4308      	orrs	r0, r1
 8011240:	4681      	mov	r9, r0
 8011242:	4648      	mov	r0, r9
 8011244:	4643      	mov	r3, r8
 8011246:	1e41      	subs	r1, r0, #1
 8011248:	4188      	sbcs	r0, r1
 801124a:	4318      	orrs	r0, r3
 801124c:	e674      	b.n	8010f38 <__aeabi_dsub+0x300>
 801124e:	2200      	movs	r2, #0
 8011250:	2400      	movs	r4, #0
 8011252:	e617      	b.n	8010e84 <__aeabi_dsub+0x24c>
 8011254:	1a16      	subs	r6, r2, r0
 8011256:	4663      	mov	r3, ip
 8011258:	42b2      	cmp	r2, r6
 801125a:	4192      	sbcs	r2, r2
 801125c:	1a59      	subs	r1, r3, r1
 801125e:	4252      	negs	r2, r2
 8011260:	1a89      	subs	r1, r1, r2
 8011262:	003d      	movs	r5, r7
 8011264:	e525      	b.n	8010cb2 <__aeabi_dsub+0x7a>
 8011266:	4661      	mov	r1, ip
 8011268:	4691      	mov	r9, r2
 801126a:	4d15      	ldr	r5, [pc, #84]	; (80112c0 <__aeabi_dsub+0x688>)
 801126c:	e601      	b.n	8010e72 <__aeabi_dsub+0x23a>
 801126e:	2280      	movs	r2, #128	; 0x80
 8011270:	2400      	movs	r4, #0
 8011272:	0312      	lsls	r2, r2, #12
 8011274:	e679      	b.n	8010f6a <__aeabi_dsub+0x332>
 8011276:	001d      	movs	r5, r3
 8011278:	000e      	movs	r6, r1
 801127a:	3d20      	subs	r5, #32
 801127c:	40ee      	lsrs	r6, r5
 801127e:	46b0      	mov	r8, r6
 8011280:	2b20      	cmp	r3, #32
 8011282:	d004      	beq.n	801128e <__aeabi_dsub+0x656>
 8011284:	2540      	movs	r5, #64	; 0x40
 8011286:	1aeb      	subs	r3, r5, r3
 8011288:	4099      	lsls	r1, r3
 801128a:	4308      	orrs	r0, r1
 801128c:	4681      	mov	r9, r0
 801128e:	464e      	mov	r6, r9
 8011290:	4643      	mov	r3, r8
 8011292:	1e71      	subs	r1, r6, #1
 8011294:	418e      	sbcs	r6, r1
 8011296:	431e      	orrs	r6, r3
 8011298:	e767      	b.n	801116a <__aeabi_dsub+0x532>
 801129a:	1886      	adds	r6, r0, r2
 801129c:	4296      	cmp	r6, r2
 801129e:	419b      	sbcs	r3, r3
 80112a0:	4461      	add	r1, ip
 80112a2:	425b      	negs	r3, r3
 80112a4:	18c9      	adds	r1, r1, r3
 80112a6:	003d      	movs	r5, r7
 80112a8:	e58c      	b.n	8010dc4 <__aeabi_dsub+0x18c>
 80112aa:	4647      	mov	r7, r8
 80112ac:	4337      	orrs	r7, r6
 80112ae:	d0ce      	beq.n	801124e <__aeabi_dsub+0x616>
 80112b0:	2207      	movs	r2, #7
 80112b2:	4641      	mov	r1, r8
 80112b4:	4032      	ands	r2, r6
 80112b6:	e649      	b.n	8010f4c <__aeabi_dsub+0x314>
 80112b8:	2700      	movs	r7, #0
 80112ba:	003a      	movs	r2, r7
 80112bc:	e5e6      	b.n	8010e8c <__aeabi_dsub+0x254>
 80112be:	46c0      	nop			; (mov r8, r8)
 80112c0:	000007ff 	.word	0x000007ff
 80112c4:	ff7fffff 	.word	0xff7fffff

080112c8 <__aeabi_dcmpun>:
 80112c8:	b570      	push	{r4, r5, r6, lr}
 80112ca:	4e0c      	ldr	r6, [pc, #48]	; (80112fc <__aeabi_dcmpun+0x34>)
 80112cc:	030d      	lsls	r5, r1, #12
 80112ce:	031c      	lsls	r4, r3, #12
 80112d0:	0049      	lsls	r1, r1, #1
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	0b2d      	lsrs	r5, r5, #12
 80112d6:	0d49      	lsrs	r1, r1, #21
 80112d8:	0b24      	lsrs	r4, r4, #12
 80112da:	0d5b      	lsrs	r3, r3, #21
 80112dc:	42b1      	cmp	r1, r6
 80112de:	d008      	beq.n	80112f2 <__aeabi_dcmpun+0x2a>
 80112e0:	4906      	ldr	r1, [pc, #24]	; (80112fc <__aeabi_dcmpun+0x34>)
 80112e2:	2000      	movs	r0, #0
 80112e4:	428b      	cmp	r3, r1
 80112e6:	d103      	bne.n	80112f0 <__aeabi_dcmpun+0x28>
 80112e8:	4314      	orrs	r4, r2
 80112ea:	0020      	movs	r0, r4
 80112ec:	1e44      	subs	r4, r0, #1
 80112ee:	41a0      	sbcs	r0, r4
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
 80112f2:	4305      	orrs	r5, r0
 80112f4:	2001      	movs	r0, #1
 80112f6:	2d00      	cmp	r5, #0
 80112f8:	d1fa      	bne.n	80112f0 <__aeabi_dcmpun+0x28>
 80112fa:	e7f1      	b.n	80112e0 <__aeabi_dcmpun+0x18>
 80112fc:	000007ff 	.word	0x000007ff

08011300 <__aeabi_d2iz>:
 8011300:	b530      	push	{r4, r5, lr}
 8011302:	4d14      	ldr	r5, [pc, #80]	; (8011354 <__aeabi_d2iz+0x54>)
 8011304:	030a      	lsls	r2, r1, #12
 8011306:	004b      	lsls	r3, r1, #1
 8011308:	0b12      	lsrs	r2, r2, #12
 801130a:	0d5b      	lsrs	r3, r3, #21
 801130c:	0fc9      	lsrs	r1, r1, #31
 801130e:	2400      	movs	r4, #0
 8011310:	42ab      	cmp	r3, r5
 8011312:	dd11      	ble.n	8011338 <__aeabi_d2iz+0x38>
 8011314:	4c10      	ldr	r4, [pc, #64]	; (8011358 <__aeabi_d2iz+0x58>)
 8011316:	42a3      	cmp	r3, r4
 8011318:	dc10      	bgt.n	801133c <__aeabi_d2iz+0x3c>
 801131a:	2480      	movs	r4, #128	; 0x80
 801131c:	0364      	lsls	r4, r4, #13
 801131e:	4322      	orrs	r2, r4
 8011320:	4c0e      	ldr	r4, [pc, #56]	; (801135c <__aeabi_d2iz+0x5c>)
 8011322:	1ae4      	subs	r4, r4, r3
 8011324:	2c1f      	cmp	r4, #31
 8011326:	dd0c      	ble.n	8011342 <__aeabi_d2iz+0x42>
 8011328:	480d      	ldr	r0, [pc, #52]	; (8011360 <__aeabi_d2iz+0x60>)
 801132a:	1ac3      	subs	r3, r0, r3
 801132c:	40da      	lsrs	r2, r3
 801132e:	0013      	movs	r3, r2
 8011330:	425c      	negs	r4, r3
 8011332:	2900      	cmp	r1, #0
 8011334:	d100      	bne.n	8011338 <__aeabi_d2iz+0x38>
 8011336:	001c      	movs	r4, r3
 8011338:	0020      	movs	r0, r4
 801133a:	bd30      	pop	{r4, r5, pc}
 801133c:	4b09      	ldr	r3, [pc, #36]	; (8011364 <__aeabi_d2iz+0x64>)
 801133e:	18cc      	adds	r4, r1, r3
 8011340:	e7fa      	b.n	8011338 <__aeabi_d2iz+0x38>
 8011342:	4d09      	ldr	r5, [pc, #36]	; (8011368 <__aeabi_d2iz+0x68>)
 8011344:	40e0      	lsrs	r0, r4
 8011346:	46ac      	mov	ip, r5
 8011348:	4463      	add	r3, ip
 801134a:	409a      	lsls	r2, r3
 801134c:	0013      	movs	r3, r2
 801134e:	4303      	orrs	r3, r0
 8011350:	e7ee      	b.n	8011330 <__aeabi_d2iz+0x30>
 8011352:	46c0      	nop			; (mov r8, r8)
 8011354:	000003fe 	.word	0x000003fe
 8011358:	0000041d 	.word	0x0000041d
 801135c:	00000433 	.word	0x00000433
 8011360:	00000413 	.word	0x00000413
 8011364:	7fffffff 	.word	0x7fffffff
 8011368:	fffffbed 	.word	0xfffffbed

0801136c <__aeabi_i2d>:
 801136c:	b570      	push	{r4, r5, r6, lr}
 801136e:	2800      	cmp	r0, #0
 8011370:	d02d      	beq.n	80113ce <__aeabi_i2d+0x62>
 8011372:	17c3      	asrs	r3, r0, #31
 8011374:	18c5      	adds	r5, r0, r3
 8011376:	405d      	eors	r5, r3
 8011378:	0fc4      	lsrs	r4, r0, #31
 801137a:	0028      	movs	r0, r5
 801137c:	f7fd fdfc 	bl	800ef78 <__clzsi2>
 8011380:	4b15      	ldr	r3, [pc, #84]	; (80113d8 <__aeabi_i2d+0x6c>)
 8011382:	1a1b      	subs	r3, r3, r0
 8011384:	055b      	lsls	r3, r3, #21
 8011386:	0d5b      	lsrs	r3, r3, #21
 8011388:	280a      	cmp	r0, #10
 801138a:	dd15      	ble.n	80113b8 <__aeabi_i2d+0x4c>
 801138c:	380b      	subs	r0, #11
 801138e:	4085      	lsls	r5, r0
 8011390:	2200      	movs	r2, #0
 8011392:	032d      	lsls	r5, r5, #12
 8011394:	0b2d      	lsrs	r5, r5, #12
 8011396:	2100      	movs	r1, #0
 8011398:	0010      	movs	r0, r2
 801139a:	032d      	lsls	r5, r5, #12
 801139c:	0d0a      	lsrs	r2, r1, #20
 801139e:	0b2d      	lsrs	r5, r5, #12
 80113a0:	0512      	lsls	r2, r2, #20
 80113a2:	432a      	orrs	r2, r5
 80113a4:	4d0d      	ldr	r5, [pc, #52]	; (80113dc <__aeabi_i2d+0x70>)
 80113a6:	051b      	lsls	r3, r3, #20
 80113a8:	402a      	ands	r2, r5
 80113aa:	4313      	orrs	r3, r2
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	07e4      	lsls	r4, r4, #31
 80113b0:	085b      	lsrs	r3, r3, #1
 80113b2:	4323      	orrs	r3, r4
 80113b4:	0019      	movs	r1, r3
 80113b6:	bd70      	pop	{r4, r5, r6, pc}
 80113b8:	0002      	movs	r2, r0
 80113ba:	0029      	movs	r1, r5
 80113bc:	3215      	adds	r2, #21
 80113be:	4091      	lsls	r1, r2
 80113c0:	000a      	movs	r2, r1
 80113c2:	210b      	movs	r1, #11
 80113c4:	1a08      	subs	r0, r1, r0
 80113c6:	40c5      	lsrs	r5, r0
 80113c8:	032d      	lsls	r5, r5, #12
 80113ca:	0b2d      	lsrs	r5, r5, #12
 80113cc:	e7e3      	b.n	8011396 <__aeabi_i2d+0x2a>
 80113ce:	2400      	movs	r4, #0
 80113d0:	2300      	movs	r3, #0
 80113d2:	2500      	movs	r5, #0
 80113d4:	2200      	movs	r2, #0
 80113d6:	e7de      	b.n	8011396 <__aeabi_i2d+0x2a>
 80113d8:	0000041e 	.word	0x0000041e
 80113dc:	800fffff 	.word	0x800fffff

080113e0 <__aeabi_ui2d>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	1e04      	subs	r4, r0, #0
 80113e4:	d025      	beq.n	8011432 <__aeabi_ui2d+0x52>
 80113e6:	f7fd fdc7 	bl	800ef78 <__clzsi2>
 80113ea:	4b14      	ldr	r3, [pc, #80]	; (801143c <__aeabi_ui2d+0x5c>)
 80113ec:	1a1b      	subs	r3, r3, r0
 80113ee:	055b      	lsls	r3, r3, #21
 80113f0:	0d5b      	lsrs	r3, r3, #21
 80113f2:	280a      	cmp	r0, #10
 80113f4:	dd12      	ble.n	801141c <__aeabi_ui2d+0x3c>
 80113f6:	380b      	subs	r0, #11
 80113f8:	4084      	lsls	r4, r0
 80113fa:	2200      	movs	r2, #0
 80113fc:	0324      	lsls	r4, r4, #12
 80113fe:	0b24      	lsrs	r4, r4, #12
 8011400:	2100      	movs	r1, #0
 8011402:	0010      	movs	r0, r2
 8011404:	0324      	lsls	r4, r4, #12
 8011406:	0d0a      	lsrs	r2, r1, #20
 8011408:	0b24      	lsrs	r4, r4, #12
 801140a:	0512      	lsls	r2, r2, #20
 801140c:	4322      	orrs	r2, r4
 801140e:	4c0c      	ldr	r4, [pc, #48]	; (8011440 <__aeabi_ui2d+0x60>)
 8011410:	051b      	lsls	r3, r3, #20
 8011412:	4022      	ands	r2, r4
 8011414:	4313      	orrs	r3, r2
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	0859      	lsrs	r1, r3, #1
 801141a:	bd10      	pop	{r4, pc}
 801141c:	0002      	movs	r2, r0
 801141e:	0021      	movs	r1, r4
 8011420:	3215      	adds	r2, #21
 8011422:	4091      	lsls	r1, r2
 8011424:	000a      	movs	r2, r1
 8011426:	210b      	movs	r1, #11
 8011428:	1a08      	subs	r0, r1, r0
 801142a:	40c4      	lsrs	r4, r0
 801142c:	0324      	lsls	r4, r4, #12
 801142e:	0b24      	lsrs	r4, r4, #12
 8011430:	e7e6      	b.n	8011400 <__aeabi_ui2d+0x20>
 8011432:	2300      	movs	r3, #0
 8011434:	2400      	movs	r4, #0
 8011436:	2200      	movs	r2, #0
 8011438:	e7e2      	b.n	8011400 <__aeabi_ui2d+0x20>
 801143a:	46c0      	nop			; (mov r8, r8)
 801143c:	0000041e 	.word	0x0000041e
 8011440:	800fffff 	.word	0x800fffff

08011444 <__aeabi_f2d>:
 8011444:	0041      	lsls	r1, r0, #1
 8011446:	0e09      	lsrs	r1, r1, #24
 8011448:	1c4b      	adds	r3, r1, #1
 801144a:	b570      	push	{r4, r5, r6, lr}
 801144c:	b2db      	uxtb	r3, r3
 801144e:	0246      	lsls	r6, r0, #9
 8011450:	0a75      	lsrs	r5, r6, #9
 8011452:	0fc4      	lsrs	r4, r0, #31
 8011454:	2b01      	cmp	r3, #1
 8011456:	dd14      	ble.n	8011482 <__aeabi_f2d+0x3e>
 8011458:	23e0      	movs	r3, #224	; 0xe0
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	076d      	lsls	r5, r5, #29
 801145e:	0b36      	lsrs	r6, r6, #12
 8011460:	18cb      	adds	r3, r1, r3
 8011462:	2100      	movs	r1, #0
 8011464:	0d0a      	lsrs	r2, r1, #20
 8011466:	0028      	movs	r0, r5
 8011468:	0512      	lsls	r2, r2, #20
 801146a:	4d1c      	ldr	r5, [pc, #112]	; (80114dc <__aeabi_f2d+0x98>)
 801146c:	4332      	orrs	r2, r6
 801146e:	055b      	lsls	r3, r3, #21
 8011470:	402a      	ands	r2, r5
 8011472:	085b      	lsrs	r3, r3, #1
 8011474:	4313      	orrs	r3, r2
 8011476:	005b      	lsls	r3, r3, #1
 8011478:	07e4      	lsls	r4, r4, #31
 801147a:	085b      	lsrs	r3, r3, #1
 801147c:	4323      	orrs	r3, r4
 801147e:	0019      	movs	r1, r3
 8011480:	bd70      	pop	{r4, r5, r6, pc}
 8011482:	2900      	cmp	r1, #0
 8011484:	d114      	bne.n	80114b0 <__aeabi_f2d+0x6c>
 8011486:	2d00      	cmp	r5, #0
 8011488:	d01e      	beq.n	80114c8 <__aeabi_f2d+0x84>
 801148a:	0028      	movs	r0, r5
 801148c:	f7fd fd74 	bl	800ef78 <__clzsi2>
 8011490:	280a      	cmp	r0, #10
 8011492:	dc1c      	bgt.n	80114ce <__aeabi_f2d+0x8a>
 8011494:	230b      	movs	r3, #11
 8011496:	002a      	movs	r2, r5
 8011498:	1a1b      	subs	r3, r3, r0
 801149a:	40da      	lsrs	r2, r3
 801149c:	0003      	movs	r3, r0
 801149e:	3315      	adds	r3, #21
 80114a0:	409d      	lsls	r5, r3
 80114a2:	4b0f      	ldr	r3, [pc, #60]	; (80114e0 <__aeabi_f2d+0x9c>)
 80114a4:	0312      	lsls	r2, r2, #12
 80114a6:	1a1b      	subs	r3, r3, r0
 80114a8:	055b      	lsls	r3, r3, #21
 80114aa:	0b16      	lsrs	r6, r2, #12
 80114ac:	0d5b      	lsrs	r3, r3, #21
 80114ae:	e7d8      	b.n	8011462 <__aeabi_f2d+0x1e>
 80114b0:	2d00      	cmp	r5, #0
 80114b2:	d006      	beq.n	80114c2 <__aeabi_f2d+0x7e>
 80114b4:	0b32      	lsrs	r2, r6, #12
 80114b6:	2680      	movs	r6, #128	; 0x80
 80114b8:	0336      	lsls	r6, r6, #12
 80114ba:	076d      	lsls	r5, r5, #29
 80114bc:	4316      	orrs	r6, r2
 80114be:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <__aeabi_f2d+0xa0>)
 80114c0:	e7cf      	b.n	8011462 <__aeabi_f2d+0x1e>
 80114c2:	4b08      	ldr	r3, [pc, #32]	; (80114e4 <__aeabi_f2d+0xa0>)
 80114c4:	2600      	movs	r6, #0
 80114c6:	e7cc      	b.n	8011462 <__aeabi_f2d+0x1e>
 80114c8:	2300      	movs	r3, #0
 80114ca:	2600      	movs	r6, #0
 80114cc:	e7c9      	b.n	8011462 <__aeabi_f2d+0x1e>
 80114ce:	0003      	movs	r3, r0
 80114d0:	002a      	movs	r2, r5
 80114d2:	3b0b      	subs	r3, #11
 80114d4:	409a      	lsls	r2, r3
 80114d6:	2500      	movs	r5, #0
 80114d8:	e7e3      	b.n	80114a2 <__aeabi_f2d+0x5e>
 80114da:	46c0      	nop			; (mov r8, r8)
 80114dc:	800fffff 	.word	0x800fffff
 80114e0:	00000389 	.word	0x00000389
 80114e4:	000007ff 	.word	0x000007ff

080114e8 <__aeabi_d2f>:
 80114e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ea:	004c      	lsls	r4, r1, #1
 80114ec:	0d64      	lsrs	r4, r4, #21
 80114ee:	030b      	lsls	r3, r1, #12
 80114f0:	1c62      	adds	r2, r4, #1
 80114f2:	0a5b      	lsrs	r3, r3, #9
 80114f4:	0f46      	lsrs	r6, r0, #29
 80114f6:	0552      	lsls	r2, r2, #21
 80114f8:	0fc9      	lsrs	r1, r1, #31
 80114fa:	431e      	orrs	r6, r3
 80114fc:	00c5      	lsls	r5, r0, #3
 80114fe:	0d52      	lsrs	r2, r2, #21
 8011500:	2a01      	cmp	r2, #1
 8011502:	dd29      	ble.n	8011558 <__aeabi_d2f+0x70>
 8011504:	4b37      	ldr	r3, [pc, #220]	; (80115e4 <__aeabi_d2f+0xfc>)
 8011506:	18e7      	adds	r7, r4, r3
 8011508:	2ffe      	cmp	r7, #254	; 0xfe
 801150a:	dc1c      	bgt.n	8011546 <__aeabi_d2f+0x5e>
 801150c:	2f00      	cmp	r7, #0
 801150e:	dd3b      	ble.n	8011588 <__aeabi_d2f+0xa0>
 8011510:	0180      	lsls	r0, r0, #6
 8011512:	1e43      	subs	r3, r0, #1
 8011514:	4198      	sbcs	r0, r3
 8011516:	2207      	movs	r2, #7
 8011518:	00f3      	lsls	r3, r6, #3
 801151a:	0f6d      	lsrs	r5, r5, #29
 801151c:	4303      	orrs	r3, r0
 801151e:	432b      	orrs	r3, r5
 8011520:	401a      	ands	r2, r3
 8011522:	2a00      	cmp	r2, #0
 8011524:	d004      	beq.n	8011530 <__aeabi_d2f+0x48>
 8011526:	220f      	movs	r2, #15
 8011528:	401a      	ands	r2, r3
 801152a:	2a04      	cmp	r2, #4
 801152c:	d000      	beq.n	8011530 <__aeabi_d2f+0x48>
 801152e:	3304      	adds	r3, #4
 8011530:	2280      	movs	r2, #128	; 0x80
 8011532:	04d2      	lsls	r2, r2, #19
 8011534:	401a      	ands	r2, r3
 8011536:	d024      	beq.n	8011582 <__aeabi_d2f+0x9a>
 8011538:	3701      	adds	r7, #1
 801153a:	b2fa      	uxtb	r2, r7
 801153c:	2fff      	cmp	r7, #255	; 0xff
 801153e:	d002      	beq.n	8011546 <__aeabi_d2f+0x5e>
 8011540:	019b      	lsls	r3, r3, #6
 8011542:	0a58      	lsrs	r0, r3, #9
 8011544:	e001      	b.n	801154a <__aeabi_d2f+0x62>
 8011546:	22ff      	movs	r2, #255	; 0xff
 8011548:	2000      	movs	r0, #0
 801154a:	0240      	lsls	r0, r0, #9
 801154c:	05d2      	lsls	r2, r2, #23
 801154e:	0a40      	lsrs	r0, r0, #9
 8011550:	07c9      	lsls	r1, r1, #31
 8011552:	4310      	orrs	r0, r2
 8011554:	4308      	orrs	r0, r1
 8011556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011558:	4335      	orrs	r5, r6
 801155a:	2c00      	cmp	r4, #0
 801155c:	d104      	bne.n	8011568 <__aeabi_d2f+0x80>
 801155e:	2d00      	cmp	r5, #0
 8011560:	d10a      	bne.n	8011578 <__aeabi_d2f+0x90>
 8011562:	2200      	movs	r2, #0
 8011564:	2000      	movs	r0, #0
 8011566:	e7f0      	b.n	801154a <__aeabi_d2f+0x62>
 8011568:	2d00      	cmp	r5, #0
 801156a:	d0ec      	beq.n	8011546 <__aeabi_d2f+0x5e>
 801156c:	2080      	movs	r0, #128	; 0x80
 801156e:	03c0      	lsls	r0, r0, #15
 8011570:	4330      	orrs	r0, r6
 8011572:	22ff      	movs	r2, #255	; 0xff
 8011574:	e7e9      	b.n	801154a <__aeabi_d2f+0x62>
 8011576:	2400      	movs	r4, #0
 8011578:	2300      	movs	r3, #0
 801157a:	025b      	lsls	r3, r3, #9
 801157c:	0a58      	lsrs	r0, r3, #9
 801157e:	b2e2      	uxtb	r2, r4
 8011580:	e7e3      	b.n	801154a <__aeabi_d2f+0x62>
 8011582:	08db      	lsrs	r3, r3, #3
 8011584:	003c      	movs	r4, r7
 8011586:	e7f8      	b.n	801157a <__aeabi_d2f+0x92>
 8011588:	003b      	movs	r3, r7
 801158a:	3317      	adds	r3, #23
 801158c:	dbf3      	blt.n	8011576 <__aeabi_d2f+0x8e>
 801158e:	2380      	movs	r3, #128	; 0x80
 8011590:	041b      	lsls	r3, r3, #16
 8011592:	4333      	orrs	r3, r6
 8011594:	261e      	movs	r6, #30
 8011596:	1bf6      	subs	r6, r6, r7
 8011598:	2e1f      	cmp	r6, #31
 801159a:	dd14      	ble.n	80115c6 <__aeabi_d2f+0xde>
 801159c:	2202      	movs	r2, #2
 801159e:	4252      	negs	r2, r2
 80115a0:	1bd7      	subs	r7, r2, r7
 80115a2:	001a      	movs	r2, r3
 80115a4:	40fa      	lsrs	r2, r7
 80115a6:	0017      	movs	r7, r2
 80115a8:	2e20      	cmp	r6, #32
 80115aa:	d004      	beq.n	80115b6 <__aeabi_d2f+0xce>
 80115ac:	4a0e      	ldr	r2, [pc, #56]	; (80115e8 <__aeabi_d2f+0x100>)
 80115ae:	4694      	mov	ip, r2
 80115b0:	4464      	add	r4, ip
 80115b2:	40a3      	lsls	r3, r4
 80115b4:	431d      	orrs	r5, r3
 80115b6:	002b      	movs	r3, r5
 80115b8:	1e5d      	subs	r5, r3, #1
 80115ba:	41ab      	sbcs	r3, r5
 80115bc:	2207      	movs	r2, #7
 80115be:	433b      	orrs	r3, r7
 80115c0:	401a      	ands	r2, r3
 80115c2:	2700      	movs	r7, #0
 80115c4:	e7ad      	b.n	8011522 <__aeabi_d2f+0x3a>
 80115c6:	4a09      	ldr	r2, [pc, #36]	; (80115ec <__aeabi_d2f+0x104>)
 80115c8:	0028      	movs	r0, r5
 80115ca:	18a2      	adds	r2, r4, r2
 80115cc:	4095      	lsls	r5, r2
 80115ce:	4093      	lsls	r3, r2
 80115d0:	1e6c      	subs	r4, r5, #1
 80115d2:	41a5      	sbcs	r5, r4
 80115d4:	40f0      	lsrs	r0, r6
 80115d6:	2207      	movs	r2, #7
 80115d8:	432b      	orrs	r3, r5
 80115da:	4303      	orrs	r3, r0
 80115dc:	401a      	ands	r2, r3
 80115de:	2700      	movs	r7, #0
 80115e0:	e79f      	b.n	8011522 <__aeabi_d2f+0x3a>
 80115e2:	46c0      	nop			; (mov r8, r8)
 80115e4:	fffffc80 	.word	0xfffffc80
 80115e8:	fffffca2 	.word	0xfffffca2
 80115ec:	fffffc82 	.word	0xfffffc82

080115f0 <__clzdi2>:
 80115f0:	b510      	push	{r4, lr}
 80115f2:	2900      	cmp	r1, #0
 80115f4:	d103      	bne.n	80115fe <__clzdi2+0xe>
 80115f6:	f7fd fcbf 	bl	800ef78 <__clzsi2>
 80115fa:	3020      	adds	r0, #32
 80115fc:	e002      	b.n	8011604 <__clzdi2+0x14>
 80115fe:	1c08      	adds	r0, r1, #0
 8011600:	f7fd fcba 	bl	800ef78 <__clzsi2>
 8011604:	bd10      	pop	{r4, pc}
 8011606:	46c0      	nop			; (mov r8, r8)

08011608 <strlen>:
 8011608:	2300      	movs	r3, #0
 801160a:	5cc2      	ldrb	r2, [r0, r3]
 801160c:	3301      	adds	r3, #1
 801160e:	2a00      	cmp	r2, #0
 8011610:	d1fb      	bne.n	801160a <strlen+0x2>
 8011612:	1e58      	subs	r0, r3, #1
 8011614:	4770      	bx	lr
	...

08011618 <pack16to32array>:
void pack16to32array(uint32_t* a, uint16_t* b, uint16_t* c){
 8011618:	2300      	movs	r3, #0
 801161a:	b570      	push	{r4, r5, r6, lr}
		a[i] = (((uint32_t)b[i])<<16) | c[i];
 801161c:	5acc      	ldrh	r4, [r1, r3]
 801161e:	5ad6      	ldrh	r6, [r2, r3]
 8011620:	0424      	lsls	r4, r4, #16
 8011622:	005d      	lsls	r5, r3, #1
 8011624:	4334      	orrs	r4, r6
 8011626:	3302      	adds	r3, #2
 8011628:	5144      	str	r4, [r0, r5]
	for(uint8_t i = 0; i < n; i++ ){
 801162a:	2b08      	cmp	r3, #8
 801162c:	d1f6      	bne.n	801161c <pack16to32array+0x4>
}
 801162e:	bd70      	pop	{r4, r5, r6, pc}

08011630 <getpeaks>:
void getpeaks(uint16_t** data, uint16_t data_len, uint16_t* indexes, uint16_t* amplitudes, uint16_t min_sep){
 8011630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011632:	4645      	mov	r5, r8
 8011634:	46de      	mov	lr, fp
 8011636:	4657      	mov	r7, sl
 8011638:	464e      	mov	r6, r9
 801163a:	b5e0      	push	{r5, r6, r7, lr}
 801163c:	b083      	sub	sp, #12
 801163e:	4680      	mov	r8, r0
 8011640:	a80c      	add	r0, sp, #48	; 0x30
 8011642:	8800      	ldrh	r0, [r0, #0]
 8011644:	9000      	str	r0, [sp, #0]
 8011646:	2000      	movs	r0, #0
		indexes[i] = 0;
 8011648:	0004      	movs	r4, r0
 801164a:	5214      	strh	r4, [r2, r0]
		amplitudes[i] = 0;
 801164c:	521c      	strh	r4, [r3, r0]
 801164e:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < n; i++){
 8011650:	2808      	cmp	r0, #8
 8011652:	d1fa      	bne.n	801164a <getpeaks+0x1a>
	uint16_t indexend = MIN(bins,index + min_sep);
 8011654:	3805      	subs	r0, #5
	for(uint16_t i = 0; i < bins; i++){
 8011656:	2400      	movs	r4, #0
	uint16_t indexend = MIN(bins,index + min_sep);
 8011658:	4684      	mov	ip, r0
 801165a:	4646      	mov	r6, r8
	for(uint16_t i = 0; i < bins; i++){
 801165c:	428c      	cmp	r4, r1
 801165e:	d25c      	bcs.n	801171a <getpeaks+0xea>
	uint16_t amp = data[0][index];
 8011660:	6835      	ldr	r5, [r6, #0]
 8011662:	0060      	lsls	r0, r4, #1
 8011664:	46a9      	mov	r9, r5
 8011666:	4481      	add	r9, r0
 8011668:	4648      	mov	r0, r9
 801166a:	8800      	ldrh	r0, [r0, #0]
 801166c:	4680      	mov	r8, r0
	uint16_t indexend = MIN(bins,index + min_sep);
 801166e:	9800      	ldr	r0, [sp, #0]
 8011670:	1825      	adds	r5, r4, r0
 8011672:	002f      	movs	r7, r5
 8011674:	428d      	cmp	r5, r1
 8011676:	dd00      	ble.n	801167a <getpeaks+0x4a>
 8011678:	000d      	movs	r5, r1
 801167a:	46ca      	mov	sl, r9
 801167c:	0020      	movs	r0, r4
 801167e:	b2ad      	uxth	r5, r5
 8011680:	9501      	str	r5, [sp, #4]
	for(uint16_t i = index; i < indexend; i ++){
 8011682:	9d01      	ldr	r5, [sp, #4]
 8011684:	4285      	cmp	r5, r0
 8011686:	d90c      	bls.n	80116a2 <getpeaks+0x72>
 8011688:	2502      	movs	r5, #2
 801168a:	46ab      	mov	fp, r5
		if(amp < data[0][i]){return i;}
 801168c:	3d04      	subs	r5, #4
 801168e:	44da      	add	sl, fp
 8011690:	4455      	add	r5, sl
 8011692:	882d      	ldrh	r5, [r5, #0]
 8011694:	4545      	cmp	r5, r8
 8011696:	d802      	bhi.n	801169e <getpeaks+0x6e>
	for(uint16_t i = index; i < indexend; i ++){
 8011698:	3001      	adds	r0, #1
 801169a:	b280      	uxth	r0, r0
 801169c:	e7f1      	b.n	8011682 <getpeaks+0x52>
		if (nxpeak == 0){
 801169e:	2800      	cmp	r0, #0
 80116a0:	d138      	bne.n	8011714 <getpeaks+0xe4>
	uint16_t indexend = MIN(bins,index + min_sep);
 80116a2:	2504      	movs	r5, #4
 80116a4:	469a      	mov	sl, r3
 80116a6:	1d98      	adds	r0, r3, #6
				if(data[0][i] > amplitudes[j]){insert_indx = j;}
 80116a8:	8803      	ldrh	r3, [r0, #0]
 80116aa:	4543      	cmp	r3, r8
 80116ac:	d206      	bcs.n	80116bc <getpeaks+0x8c>
 80116ae:	3d01      	subs	r5, #1
 80116b0:	b2ed      	uxtb	r5, r5
 80116b2:	3802      	subs	r0, #2
			for(int8_t j = n-1; j >= 0; j--){
 80116b4:	2d00      	cmp	r5, #0
 80116b6:	d1f7      	bne.n	80116a8 <getpeaks+0x78>
 80116b8:	4653      	mov	r3, sl
 80116ba:	e003      	b.n	80116c4 <getpeaks+0x94>
 80116bc:	4653      	mov	r3, sl
			if(insert_indx < 4){
 80116be:	0020      	movs	r0, r4
 80116c0:	2d04      	cmp	r5, #4
 80116c2:	d027      	beq.n	8011714 <getpeaks+0xe4>
	uint16_t indexend = MIN(bins,index + min_sep);
 80116c4:	4660      	mov	r0, ip
 80116c6:	468b      	mov	fp, r1
 80116c8:	4698      	mov	r8, r3
	for(int8_t i = n-1; i > indx; i-- ){
 80116ca:	42a8      	cmp	r0, r5
 80116cc:	dd08      	ble.n	80116e0 <getpeaks+0xb0>
		a[i] = a[i-1];
 80116ce:	4b16      	ldr	r3, [pc, #88]	; (8011728 <getpeaks+0xf8>)
 80116d0:	18c3      	adds	r3, r0, r3
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	5ad1      	ldrh	r1, [r2, r3]
 80116d6:	3801      	subs	r0, #1
 80116d8:	18d3      	adds	r3, r2, r3
 80116da:	8059      	strh	r1, [r3, #2]
 80116dc:	b240      	sxtb	r0, r0
 80116de:	e7f4      	b.n	80116ca <getpeaks+0x9a>
	a[indx] = v;
 80116e0:	0068      	lsls	r0, r5, #1
 80116e2:	5214      	strh	r4, [r2, r0]
 80116e4:	4643      	mov	r3, r8
 80116e6:	4680      	mov	r8, r0
				insert(amplitudes, n, data[0][i],insert_indx);
 80116e8:	4648      	mov	r0, r9
 80116ea:	8800      	ldrh	r0, [r0, #0]
 80116ec:	4659      	mov	r1, fp
 80116ee:	4681      	mov	r9, r0
 80116f0:	4693      	mov	fp, r2
	for(int8_t i = n-1; i > indx; i-- ){
 80116f2:	4660      	mov	r0, ip
 80116f4:	42a8      	cmp	r0, r5
 80116f6:	dd08      	ble.n	801170a <getpeaks+0xda>
		a[i] = a[i-1];
 80116f8:	4c0b      	ldr	r4, [pc, #44]	; (8011728 <getpeaks+0xf8>)
 80116fa:	1904      	adds	r4, r0, r4
 80116fc:	0064      	lsls	r4, r4, #1
 80116fe:	5b1a      	ldrh	r2, [r3, r4]
 8011700:	3801      	subs	r0, #1
 8011702:	191c      	adds	r4, r3, r4
 8011704:	8062      	strh	r2, [r4, #2]
 8011706:	b240      	sxtb	r0, r0
 8011708:	e7f4      	b.n	80116f4 <getpeaks+0xc4>
	a[indx] = v;
 801170a:	4640      	mov	r0, r8
 801170c:	464c      	mov	r4, r9
 801170e:	465a      	mov	r2, fp
 8011710:	521c      	strh	r4, [r3, r0]
				i += min_sep;
 8011712:	b2b8      	uxth	r0, r7
	for(uint16_t i = 0; i < bins; i++){
 8011714:	3001      	adds	r0, #1
 8011716:	b284      	uxth	r4, r0
 8011718:	e7a0      	b.n	801165c <getpeaks+0x2c>
}
 801171a:	b003      	add	sp, #12
 801171c:	bc3c      	pop	{r2, r3, r4, r5}
 801171e:	4690      	mov	r8, r2
 8011720:	4699      	mov	r9, r3
 8011722:	46a2      	mov	sl, r4
 8011724:	46ab      	mov	fp, r5
 8011726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011728:	7fffffff 	.word	0x7fffffff

0801172c <center_of_mass>:
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 801172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801172e:	4657      	mov	r7, sl
 8011730:	464e      	mov	r6, r9
 8011732:	4645      	mov	r5, r8
 8011734:	46de      	mov	lr, fp
 8011736:	b5e0      	push	{r5, r6, r7, lr}
 8011738:	b089      	sub	sp, #36	; 0x24
 801173a:	ac07      	add	r4, sp, #28
 801173c:	4682      	mov	sl, r0
		(sweep >= 0) && (sweep < _sweeps) &&
 801173e:	483a      	ldr	r0, [pc, #232]	; (8011828 <center_of_mass+0xfc>)
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8011740:	8021      	strh	r1, [r4, #0]
		(sweep >= 0) && (sweep < _sweeps) &&
 8011742:	7806      	ldrb	r6, [r0, #0]
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8011744:	040b      	lsls	r3, r1, #16
		(sweep >= 0) && (sweep < _sweeps) &&
 8011746:	9601      	str	r6, [sp, #4]
		(bin >= 0) && (bin < _bins)
 8011748:	7846      	ldrb	r6, [r0, #1]
	uint8_t mbin = max.x2;
 801174a:	0e1b      	lsrs	r3, r3, #24
		(bin >= 0) && (bin < _bins)
 801174c:	9602      	str	r6, [sp, #8]
	floatv2_t center = {0.0f,0.0f};
 801174e:	2600      	movs	r6, #0
	float mass = 0.0f;	
 8011750:	46b0      	mov	r8, r6
 8011752:	46b1      	mov	r9, r6
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8011754:	b295      	uxth	r5, r2
	uint8_t msweep = max.x1;
 8011756:	b2c9      	uxtb	r1, r1
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8011758:	1b5c      	subs	r4, r3, r5
 801175a:	189b      	adds	r3, r3, r2
		return _conv_data[sweep][bin];
 801175c:	6840      	ldr	r0, [r0, #4]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 801175e:	9304      	str	r3, [sp, #16]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8011760:	1b4b      	subs	r3, r1, r5
 8011762:	9305      	str	r3, [sp, #20]
 8011764:	188b      	adds	r3, r1, r2
		return _conv_data[sweep][bin];
 8011766:	9003      	str	r0, [sp, #12]
	floatv2_t center = {0.0f,0.0f};
 8011768:	1c37      	adds	r7, r6, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 801176a:	9306      	str	r3, [sp, #24]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	429c      	cmp	r4, r3
 8011770:	dc3d      	bgt.n	80117ee <center_of_mass+0xc2>
		return _conv_data[sweep][bin];
 8011772:	0063      	lsls	r3, r4, #1
 8011774:	469b      	mov	fp, r3
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8011776:	9d05      	ldr	r5, [sp, #20]
 8011778:	9b06      	ldr	r3, [sp, #24]
 801177a:	429d      	cmp	r5, r3
 801177c:	dc34      	bgt.n	80117e8 <center_of_mass+0xbc>
		return 0;
 801177e:	2600      	movs	r6, #0
	if(
 8011780:	42b5      	cmp	r5, r6
 8011782:	db0c      	blt.n	801179e <center_of_mass+0x72>
		(sweep >= 0) && (sweep < _sweeps) &&
 8011784:	9b01      	ldr	r3, [sp, #4]
 8011786:	429d      	cmp	r5, r3
 8011788:	da09      	bge.n	801179e <center_of_mass+0x72>
 801178a:	42b4      	cmp	r4, r6
 801178c:	db07      	blt.n	801179e <center_of_mass+0x72>
		(bin >= 0) && (bin < _bins)
 801178e:	9b02      	ldr	r3, [sp, #8]
 8011790:	429c      	cmp	r4, r3
 8011792:	da04      	bge.n	801179e <center_of_mass+0x72>
		return _conv_data[sweep][bin];
 8011794:	9a03      	ldr	r2, [sp, #12]
 8011796:	00ab      	lsls	r3, r5, #2
 8011798:	589b      	ldr	r3, [r3, r2]
 801179a:	465a      	mov	r2, fp
 801179c:	5a9e      	ldrh	r6, [r3, r2]
			mass += getdata(j,i);
 801179e:	0030      	movs	r0, r6
 80117a0:	f7fe f828 	bl	800f7f4 <__aeabi_i2f>
 80117a4:	1c01      	adds	r1, r0, #0
 80117a6:	4640      	mov	r0, r8
 80117a8:	f7fc fe44 	bl	800e434 <__aeabi_fadd>
 80117ac:	4680      	mov	r8, r0
			center.x1 += (float)getdata(j,i)*(float)j;
 80117ae:	0030      	movs	r0, r6
 80117b0:	f7fe f86a 	bl	800f888 <__aeabi_ui2f>
 80117b4:	1c06      	adds	r6, r0, #0
 80117b6:	0028      	movs	r0, r5
 80117b8:	f7fe f81c 	bl	800f7f4 <__aeabi_i2f>
 80117bc:	1c31      	adds	r1, r6, #0
 80117be:	f7fd f8e5 	bl	800e98c <__aeabi_fmul>
 80117c2:	1c01      	adds	r1, r0, #0
 80117c4:	1c38      	adds	r0, r7, #0
 80117c6:	f7fc fe35 	bl	800e434 <__aeabi_fadd>
 80117ca:	1c07      	adds	r7, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 80117cc:	0020      	movs	r0, r4
 80117ce:	f7fe f811 	bl	800f7f4 <__aeabi_i2f>
 80117d2:	1c31      	adds	r1, r6, #0
 80117d4:	f7fd f8da 	bl	800e98c <__aeabi_fmul>
 80117d8:	1c01      	adds	r1, r0, #0
 80117da:	4648      	mov	r0, r9
 80117dc:	f7fc fe2a 	bl	800e434 <__aeabi_fadd>
 80117e0:	3501      	adds	r5, #1
 80117e2:	4681      	mov	r9, r0
 80117e4:	b22d      	sxth	r5, r5
 80117e6:	e7c7      	b.n	8011778 <center_of_mass+0x4c>
 80117e8:	3401      	adds	r4, #1
 80117ea:	b224      	sxth	r4, r4
 80117ec:	e7be      	b.n	801176c <center_of_mass+0x40>
	if(mass != 0.0f){	
 80117ee:	2100      	movs	r1, #0
 80117f0:	4640      	mov	r0, r8
 80117f2:	464e      	mov	r6, r9
 80117f4:	f7fd fdbc 	bl	800f370 <__aeabi_fcmpeq>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d109      	bne.n	8011810 <center_of_mass+0xe4>
		center.x1 /= mass;
 80117fc:	4641      	mov	r1, r8
 80117fe:	1c38      	adds	r0, r7, #0
 8011800:	f7fc ffb2 	bl	800e768 <__aeabi_fdiv>
		center.x2 /= mass;
 8011804:	4641      	mov	r1, r8
		center.x1 /= mass;
 8011806:	1c07      	adds	r7, r0, #0
		center.x2 /= mass;
 8011808:	4648      	mov	r0, r9
 801180a:	f7fc ffad 	bl	800e768 <__aeabi_fdiv>
 801180e:	1c06      	adds	r6, r0, #0
	return center;
 8011810:	4653      	mov	r3, sl
}
 8011812:	4650      	mov	r0, sl
	return center;
 8011814:	601f      	str	r7, [r3, #0]
 8011816:	605e      	str	r6, [r3, #4]
}
 8011818:	b009      	add	sp, #36	; 0x24
 801181a:	bc3c      	pop	{r2, r3, r4, r5}
 801181c:	4690      	mov	r8, r2
 801181e:	4699      	mov	r9, r3
 8011820:	46a2      	mov	sl, r4
 8011822:	46ab      	mov	fp, r5
 8011824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011826:	46c0      	nop			; (mov r8, r8)
 8011828:	2000008c 	.word	0x2000008c

0801182c <null_data>:
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 801182c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801182e:	46ce      	mov	lr, r9
 8011830:	4647      	mov	r7, r8
 8011832:	b580      	push	{r7, lr}
 8011834:	b083      	sub	sp, #12
 8011836:	0006      	movs	r6, r0
 8011838:	466f      	mov	r7, sp
 801183a:	a801      	add	r0, sp, #4
 801183c:	8001      	strh	r1, [r0, #0]
	uint16_t apex = data[msweep][mbin];
 801183e:	b2d0      	uxtb	r0, r2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8011840:	040d      	lsls	r5, r1, #16
 8011842:	1c0c      	adds	r4, r1, #0
	uint16_t apex = data[msweep][mbin];
 8011844:	0080      	lsls	r0, r0, #2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8011846:	0411      	lsls	r1, r2, #16
 8011848:	803a      	strh	r2, [r7, #0]
	uint16_t apex = data[msweep][mbin];
 801184a:	0e09      	lsrs	r1, r1, #24
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 801184c:	1c1f      	adds	r7, r3, #0
	uint16_t apex = data[msweep][mbin];
 801184e:	5983      	ldr	r3, [r0, r6]
 8011850:	0049      	lsls	r1, r1, #1
	uint16_t halfpex = apex*threshold;
 8011852:	5ac8      	ldrh	r0, [r1, r3]
 8011854:	f7fd ffce 	bl	800f7f4 <__aeabi_i2f>
 8011858:	1c39      	adds	r1, r7, #0
 801185a:	f7fd f897 	bl	800e98c <__aeabi_fmul>
 801185e:	f7fd fdd5 	bl	800f40c <__aeabi_f2uiz>
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011862:	2300      	movs	r3, #0
			data[j][i] = 0;
 8011864:	4699      	mov	r9, r3
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011866:	b2e4      	uxtb	r4, r4
 8011868:	0864      	lsrs	r4, r4, #1
	uint8_t bins = data_size.x2;
 801186a:	0e2d      	lsrs	r5, r5, #24
 801186c:	00a4      	lsls	r4, r4, #2
	uint16_t halfpex = apex*threshold;
 801186e:	b280      	uxth	r0, r0
 8011870:	1934      	adds	r4, r6, r4
	for(uint16_t i = 0; i<bins; i++){
 8011872:	b2ad      	uxth	r5, r5
 8011874:	b29a      	uxth	r2, r3
 8011876:	4295      	cmp	r5, r2
 8011878:	d90f      	bls.n	801189a <null_data+0x6e>
 801187a:	005a      	lsls	r2, r3, #1
 801187c:	4694      	mov	ip, r2
 801187e:	0032      	movs	r2, r6
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011880:	42a2      	cmp	r2, r4
 8011882:	d008      	beq.n	8011896 <null_data+0x6a>
		if(data[j][i] > halfpex){
 8011884:	6811      	ldr	r1, [r2, #0]
 8011886:	4461      	add	r1, ip
 8011888:	880f      	ldrh	r7, [r1, #0]
 801188a:	4287      	cmp	r7, r0
 801188c:	d901      	bls.n	8011892 <null_data+0x66>
			data[j][i] = 0;
 801188e:	464f      	mov	r7, r9
 8011890:	800f      	strh	r7, [r1, #0]
 8011892:	3204      	adds	r2, #4
 8011894:	e7f4      	b.n	8011880 <null_data+0x54>
 8011896:	3301      	adds	r3, #1
 8011898:	e7ec      	b.n	8011874 <null_data+0x48>
}
 801189a:	b003      	add	sp, #12
 801189c:	bc0c      	pop	{r2, r3}
 801189e:	4690      	mov	r8, r2
 80118a0:	4699      	mov	r9, r3
 80118a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080118a4 <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80118a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118a6:	46de      	mov	lr, fp
 80118a8:	464e      	mov	r6, r9
 80118aa:	4645      	mov	r5, r8
 80118ac:	4657      	mov	r7, sl
 80118ae:	b5e0      	push	{r5, r6, r7, lr}
 80118b0:	b089      	sub	sp, #36	; 0x24
 80118b2:	040e      	lsls	r6, r1, #16
 80118b4:	4681      	mov	r9, r0
 80118b6:	ad06      	add	r5, sp, #24
 80118b8:	a807      	add	r0, sp, #28
 80118ba:	8001      	strh	r1, [r0, #0]
 80118bc:	802a      	strh	r2, [r5, #0]
 80118be:	1c1d      	adds	r5, r3, #0
	uint8_t bins = data_size.x2;
 80118c0:	0e33      	lsrs	r3, r6, #24
 80118c2:	9303      	str	r3, [sp, #12]
	uint16_t apex = data[msweep][mbin];
 80118c4:	b2d3      	uxtb	r3, r2
 80118c6:	469b      	mov	fp, r3
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80118c8:	1c0c      	adds	r4, r1, #0
 80118ca:	0411      	lsls	r1, r2, #16
	uint16_t apex = data[msweep][mbin];
 80118cc:	0e0b      	lsrs	r3, r1, #24
 80118ce:	4698      	mov	r8, r3
 80118d0:	465b      	mov	r3, fp
 80118d2:	464a      	mov	r2, r9
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	589b      	ldr	r3, [r3, r2]
 80118d8:	4642      	mov	r2, r8
 80118da:	0052      	lsls	r2, r2, #1
	uint16_t halfpex = (uint16_t)(apex * threshold);
 80118dc:	5ad0      	ldrh	r0, [r2, r3]
 80118de:	f7fd ff89 	bl	800f7f4 <__aeabi_i2f>
 80118e2:	1c29      	adds	r1, r5, #0
	float mass = 0.0f;
 80118e4:	2500      	movs	r5, #0
	uint16_t halfpex = (uint16_t)(apex * threshold);
 80118e6:	f7fd f851 	bl	800e98c <__aeabi_fmul>
 80118ea:	f7fd fd8f 	bl	800f40c <__aeabi_f2uiz>
	for(int16_t j = 0; j<sweeps/2; j++){
 80118ee:	2600      	movs	r6, #0
 80118f0:	46aa      	mov	sl, r5
	uint16_t halfpex = (uint16_t)(apex * threshold);
 80118f2:	b283      	uxth	r3, r0
	for(int16_t j = 0; j<sweeps/2; j++){
 80118f4:	b2e4      	uxtb	r4, r4
	uint16_t halfpex = (uint16_t)(apex * threshold);
 80118f6:	9304      	str	r3, [sp, #16]
	for(int16_t j = 0; j<sweeps/2; j++){
 80118f8:	0863      	lsrs	r3, r4, #1
 80118fa:	9302      	str	r3, [sp, #8]
	for(int16_t i = 0; i<bins; i++){
 80118fc:	9b03      	ldr	r3, [sp, #12]
 80118fe:	42b3      	cmp	r3, r6
 8011900:	dd2d      	ble.n	801195e <get_msd+0xba>
 8011902:	0073      	lsls	r3, r6, #1
 8011904:	9305      	str	r3, [sp, #20]
 8011906:	4643      	mov	r3, r8
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 8011908:	2700      	movs	r7, #0
 801190a:	1af3      	subs	r3, r6, r3
 801190c:	435b      	muls	r3, r3
 801190e:	9301      	str	r3, [sp, #4]
	for(int16_t j = 0; j<sweeps/2; j++){
 8011910:	9b02      	ldr	r3, [sp, #8]
 8011912:	42bb      	cmp	r3, r7
 8011914:	dd21      	ble.n	801195a <get_msd+0xb6>
		if (data[j][i] > halfpex){
 8011916:	464a      	mov	r2, r9
 8011918:	00bb      	lsls	r3, r7, #2
 801191a:	589b      	ldr	r3, [r3, r2]
 801191c:	9a05      	ldr	r2, [sp, #20]
 801191e:	5a98      	ldrh	r0, [r3, r2]
 8011920:	9b04      	ldr	r3, [sp, #16]
 8011922:	4298      	cmp	r0, r3
 8011924:	d917      	bls.n	8011956 <get_msd+0xb2>
			mass += data[j][i];
 8011926:	f7fd ff65 	bl	800f7f4 <__aeabi_i2f>
 801192a:	1c01      	adds	r1, r0, #0
 801192c:	1c04      	adds	r4, r0, #0
 801192e:	1c28      	adds	r0, r5, #0
 8011930:	f7fc fd80 	bl	800e434 <__aeabi_fadd>
 8011934:	465b      	mov	r3, fp
 8011936:	1c05      	adds	r5, r0, #0
 8011938:	1af8      	subs	r0, r7, r3
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 801193a:	9b01      	ldr	r3, [sp, #4]
 801193c:	4340      	muls	r0, r0
 801193e:	469c      	mov	ip, r3
 8011940:	4460      	add	r0, ip
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 8011942:	f7fd ffa1 	bl	800f888 <__aeabi_ui2f>
 8011946:	1c21      	adds	r1, r4, #0
 8011948:	f7fd f820 	bl	800e98c <__aeabi_fmul>
 801194c:	1c01      	adds	r1, r0, #0
 801194e:	4650      	mov	r0, sl
 8011950:	f7fc fd70 	bl	800e434 <__aeabi_fadd>
 8011954:	4682      	mov	sl, r0
 8011956:	3701      	adds	r7, #1
 8011958:	e7da      	b.n	8011910 <get_msd+0x6c>
 801195a:	3601      	adds	r6, #1
 801195c:	e7ce      	b.n	80118fc <get_msd+0x58>
	if(mass != 0.0f){
 801195e:	2100      	movs	r1, #0
 8011960:	1c28      	adds	r0, r5, #0
 8011962:	4654      	mov	r4, sl
 8011964:	f7fd fd04 	bl	800f370 <__aeabi_fcmpeq>
 8011968:	2800      	cmp	r0, #0
 801196a:	d104      	bne.n	8011976 <get_msd+0xd2>
		meansqdist /= mass;
 801196c:	1c29      	adds	r1, r5, #0
 801196e:	4650      	mov	r0, sl
 8011970:	f7fc fefa 	bl	800e768 <__aeabi_fdiv>
 8011974:	1c04      	adds	r4, r0, #0
}
 8011976:	1c20      	adds	r0, r4, #0
 8011978:	b009      	add	sp, #36	; 0x24
 801197a:	bc3c      	pop	{r2, r3, r4, r5}
 801197c:	4690      	mov	r8, r2
 801197e:	4699      	mov	r9, r3
 8011980:	46a2      	mov	sl, r4
 8011982:	46ab      	mov	fp, r5
 8011984:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011986 <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 8011986:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011988:	46d6      	mov	lr, sl
 801198a:	464f      	mov	r7, r9
 801198c:	4646      	mov	r6, r8
 801198e:	b5c0      	push	{r6, r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	aa01      	add	r2, sp, #4
 8011994:	040f      	lsls	r7, r1, #16
 8011996:	8011      	strh	r1, [r2, #0]
		for(uint16_t j = 0; j<sweeps/2; j++){
 8011998:	b2c9      	uxtb	r1, r1
 801199a:	084b      	lsrs	r3, r1, #1
 801199c:	469a      	mov	sl, r3
 801199e:	2300      	movs	r3, #0
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 80119a0:	4684      	mov	ip, r0
	uint8_t msweep = 0;
 80119a2:	001a      	movs	r2, r3
	uint8_t mbin = 0;
 80119a4:	001c      	movs	r4, r3
	uint16_t apex = 0;
 80119a6:	0018      	movs	r0, r3
	for(uint16_t i = 0; i<bins; i++){
 80119a8:	0e3f      	lsrs	r7, r7, #24
 80119aa:	b29d      	uxth	r5, r3
 80119ac:	42af      	cmp	r7, r5
 80119ae:	d915      	bls.n	80119dc <max2d+0x56>
 80119b0:	0059      	lsls	r1, r3, #1
 80119b2:	4689      	mov	r9, r1
					mbin = i;
 80119b4:	b2d9      	uxtb	r1, r3
	for(uint16_t i = 0; i<bins; i++){
 80119b6:	2500      	movs	r5, #0
					mbin = i;
 80119b8:	4688      	mov	r8, r1
		for(uint16_t j = 0; j<sweeps/2; j++){
 80119ba:	b2ae      	uxth	r6, r5
 80119bc:	45b2      	cmp	sl, r6
 80119be:	d90b      	bls.n	80119d8 <max2d+0x52>
				if(data[j][i] > apex){
 80119c0:	4661      	mov	r1, ip
 80119c2:	00ae      	lsls	r6, r5, #2
 80119c4:	598e      	ldr	r6, [r1, r6]
 80119c6:	4649      	mov	r1, r9
 80119c8:	5a76      	ldrh	r6, [r6, r1]
 80119ca:	4286      	cmp	r6, r0
 80119cc:	d902      	bls.n	80119d4 <max2d+0x4e>
					mbin = i;
 80119ce:	4644      	mov	r4, r8
					msweep = j;
 80119d0:	0030      	movs	r0, r6
 80119d2:	b2ea      	uxtb	r2, r5
 80119d4:	3501      	adds	r5, #1
 80119d6:	e7f0      	b.n	80119ba <max2d+0x34>
 80119d8:	3301      	adds	r3, #1
 80119da:	e7e6      	b.n	80119aa <max2d+0x24>
	return max_index;
 80119dc:	20ff      	movs	r0, #255	; 0xff
 80119de:	4002      	ands	r2, r0
 80119e0:	4020      	ands	r0, r4
 80119e2:	0200      	lsls	r0, r0, #8
 80119e4:	4310      	orrs	r0, r2
}
 80119e6:	b004      	add	sp, #16
 80119e8:	bc1c      	pop	{r2, r3, r4}
 80119ea:	4690      	mov	r8, r2
 80119ec:	4699      	mov	r9, r3
 80119ee:	46a2      	mov	sl, r4
 80119f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080119f2 <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 80119f2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint16_t j = 0; j<sweeps/2; j++){
 80119f4:	2300      	movs	r3, #0
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 80119f6:	46de      	mov	lr, fp
 80119f8:	4693      	mov	fp, r2
		if(mask & (1<<j)){
 80119fa:	2201      	movs	r2, #1
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 80119fc:	4657      	mov	r7, sl
 80119fe:	464e      	mov	r6, r9
 8011a00:	4645      	mov	r5, r8
		if(mask & (1<<j)){
 8011a02:	4691      	mov	r9, r2
					data[j][i] = 0;
 8011a04:	469a      	mov	sl, r3
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8011a06:	b5e0      	push	{r5, r6, r7, lr}
 8011a08:	040d      	lsls	r5, r1, #16
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011a0a:	b2c9      	uxtb	r1, r1
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8011a0c:	b083      	sub	sp, #12
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011a0e:	0849      	lsrs	r1, r1, #1
			for(uint16_t i = 0; i<bins; i++){
 8011a10:	0e2d      	lsrs	r5, r5, #24
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011a12:	b29c      	uxth	r4, r3
 8011a14:	42a1      	cmp	r1, r4
 8011a16:	d915      	bls.n	8011a44 <dobandstop+0x52>
		if(mask & (1<<j)){
 8011a18:	464c      	mov	r4, r9
 8011a1a:	465a      	mov	r2, fp
 8011a1c:	409c      	lsls	r4, r3
 8011a1e:	4222      	tst	r2, r4
 8011a20:	d101      	bne.n	8011a26 <dobandstop+0x34>
 8011a22:	3301      	adds	r3, #1
 8011a24:	e7f5      	b.n	8011a12 <dobandstop+0x20>
 8011a26:	009c      	lsls	r4, r3, #2
 8011a28:	46a4      	mov	ip, r4
 8011a2a:	2400      	movs	r4, #0
			for(uint16_t i = 0; i<bins; i++){
 8011a2c:	b2a6      	uxth	r6, r4
 8011a2e:	42b5      	cmp	r5, r6
 8011a30:	d9f7      	bls.n	8011a22 <dobandstop+0x30>
					data[j][i] = 0;
 8011a32:	0066      	lsls	r6, r4, #1
 8011a34:	46b0      	mov	r8, r6
 8011a36:	4666      	mov	r6, ip
 8011a38:	4647      	mov	r7, r8
 8011a3a:	4652      	mov	r2, sl
 8011a3c:	5986      	ldr	r6, [r0, r6]
 8011a3e:	3401      	adds	r4, #1
 8011a40:	53ba      	strh	r2, [r7, r6]
 8011a42:	e7f3      	b.n	8011a2c <dobandstop+0x3a>
}
 8011a44:	b003      	add	sp, #12
 8011a46:	bc3c      	pop	{r2, r3, r4, r5}
 8011a48:	4690      	mov	r8, r2
 8011a4a:	4699      	mov	r9, r3
 8011a4c:	46a2      	mov	sl, r4
 8011a4e:	46ab      	mov	fp, r5
 8011a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a52 <detrend>:
void detrend(uint16_t** data, uint8v2_t data_size){
 8011a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a54:	46de      	mov	lr, fp
 8011a56:	4645      	mov	r5, r8
 8011a58:	4657      	mov	r7, sl
 8011a5a:	464e      	mov	r6, r9
 8011a5c:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t sweeps = data_size.x1;
 8011a5e:	b2cc      	uxtb	r4, r1
void detrend(uint16_t** data, uint8v2_t data_size){
 8011a60:	b087      	sub	sp, #28
 8011a62:	9000      	str	r0, [sp, #0]
		uint32_t ssxx = ((sweeps*sweeps - 1)*sweeps)/12;
 8011a64:	0020      	movs	r0, r4
 8011a66:	4360      	muls	r0, r4
void detrend(uint16_t** data, uint8v2_t data_size){
 8011a68:	ab05      	add	r3, sp, #20
		uint32_t ssxx = ((sweeps*sweeps - 1)*sweeps)/12;
 8011a6a:	3801      	subs	r0, #1
void detrend(uint16_t** data, uint8v2_t data_size){
 8011a6c:	8019      	strh	r1, [r3, #0]
 8011a6e:	040d      	lsls	r5, r1, #16
		uint32_t ssxx = ((sweeps*sweeps - 1)*sweeps)/12;
 8011a70:	4360      	muls	r0, r4
 8011a72:	210c      	movs	r1, #12
 8011a74:	f7fd fb46 	bl	800f104 <__divsi3>
		uint32_t nxmean = (sweeps*(sweeps-1))/2;
 8011a78:	1e63      	subs	r3, r4, #1
 8011a7a:	4363      	muls	r3, r4
 8011a7c:	0fda      	lsrs	r2, r3, #31
 8011a7e:	18d3      	adds	r3, r2, r3
 8011a80:	105b      	asrs	r3, r3, #1
	uint8_t bins = data_size.x2;
 8011a82:	0e2d      	lsrs	r5, r5, #24
		uint32_t nxmean = (sweeps*(sweeps-1))/2;
 8011a84:	469b      	mov	fp, r3
	for(uint16_t i = 0; i<bins; i++){
 8011a86:	b2ab      	uxth	r3, r5
 8011a88:	9304      	str	r3, [sp, #16]
		for(uint16_t j = 0; j<sweeps; j++){
 8011a8a:	b2a3      	uxth	r3, r4
		uint32_t nxmean = (sweeps*(sweeps-1))/2;
 8011a8c:	2600      	movs	r6, #0
		for(uint16_t j = 0; j<sweeps; j++){
 8011a8e:	469a      	mov	sl, r3
 8011a90:	46a0      	mov	r8, r4
		uint32_t ssxx = ((sweeps*sweeps - 1)*sweeps)/12;
 8011a92:	9001      	str	r0, [sp, #4]
	for(uint16_t i = 0; i<bins; i++){
 8011a94:	9a04      	ldr	r2, [sp, #16]
 8011a96:	b2b3      	uxth	r3, r6
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d95d      	bls.n	8011b58 <detrend+0x106>
 8011a9c:	0073      	lsls	r3, r6, #1
 8011a9e:	4699      	mov	r9, r3
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4649      	mov	r1, r9
		uint32_t ymean = 0;
 8011aa4:	0018      	movs	r0, r3
		uint32_t ssxy = 0;
 8011aa6:	001c      	movs	r4, r3
 8011aa8:	4655      	mov	r5, sl
		for(uint16_t j = 0; j<sweeps; j++){
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	4295      	cmp	r5, r2
 8011aae:	d908      	bls.n	8011ac2 <detrend+0x70>
			ymean += data[j][i];
 8011ab0:	9f00      	ldr	r7, [sp, #0]
 8011ab2:	009a      	lsls	r2, r3, #2
 8011ab4:	58ba      	ldr	r2, [r7, r2]
 8011ab6:	5a52      	ldrh	r2, [r2, r1]
 8011ab8:	1880      	adds	r0, r0, r2
			ssxy += data[j][i]*j;
 8011aba:	435a      	muls	r2, r3
 8011abc:	3301      	adds	r3, #1
 8011abe:	18a4      	adds	r4, r4, r2
 8011ac0:	e7f3      	b.n	8011aaa <detrend+0x58>
 8011ac2:	4689      	mov	r9, r1
		ymean /= sweeps;
 8011ac4:	4641      	mov	r1, r8
 8011ac6:	f7fd fa93 	bl	800eff0 <__udivsi3>
 8011aca:	46aa      	mov	sl, r5
 8011acc:	0005      	movs	r5, r0
		ssxy = ssxy - nxmean*ymean;
 8011ace:	4658      	mov	r0, fp
 8011ad0:	4368      	muls	r0, r5
 8011ad2:	1a20      	subs	r0, r4, r0
		float m = ssxy/(float)ssxx;
 8011ad4:	f7fd fed8 	bl	800f888 <__aeabi_ui2f>
 8011ad8:	1c04      	adds	r4, r0, #0
 8011ada:	9801      	ldr	r0, [sp, #4]
 8011adc:	f7fd fed4 	bl	800f888 <__aeabi_ui2f>
 8011ae0:	1c01      	adds	r1, r0, #0
 8011ae2:	1c20      	adds	r0, r4, #0
 8011ae4:	f7fc fe40 	bl	800e768 <__aeabi_fdiv>
 8011ae8:	1c04      	adds	r4, r0, #0
		float b = (float)ymean - (m*nxmean)/(float)sweeps;
 8011aea:	0028      	movs	r0, r5
 8011aec:	f7fd fecc 	bl	800f888 <__aeabi_ui2f>
 8011af0:	1c05      	adds	r5, r0, #0
 8011af2:	4658      	mov	r0, fp
 8011af4:	f7fd fec8 	bl	800f888 <__aeabi_ui2f>
 8011af8:	1c21      	adds	r1, r4, #0
 8011afa:	f7fc ff47 	bl	800e98c <__aeabi_fmul>
 8011afe:	1c07      	adds	r7, r0, #0
 8011b00:	4640      	mov	r0, r8
 8011b02:	f7fd fec1 	bl	800f888 <__aeabi_ui2f>
 8011b06:	1c01      	adds	r1, r0, #0
 8011b08:	1c38      	adds	r0, r7, #0
 8011b0a:	f7fc fe2d 	bl	800e768 <__aeabi_fdiv>
 8011b0e:	1c01      	adds	r1, r0, #0
 8011b10:	1c28      	adds	r0, r5, #0
 8011b12:	f7fd f86d 	bl	800ebf0 <__aeabi_fsub>
 8011b16:	2500      	movs	r5, #0
 8011b18:	9002      	str	r0, [sp, #8]
		for(uint16_t j = 0; j<sweeps; j++){
 8011b1a:	b2ab      	uxth	r3, r5
 8011b1c:	459a      	cmp	sl, r3
 8011b1e:	d919      	bls.n	8011b54 <detrend+0x102>
			data[j][i] -= j*m + b;
 8011b20:	9a00      	ldr	r2, [sp, #0]
 8011b22:	00ab      	lsls	r3, r5, #2
 8011b24:	58d7      	ldr	r7, [r2, r3]
 8011b26:	444f      	add	r7, r9
 8011b28:	8838      	ldrh	r0, [r7, #0]
 8011b2a:	f7fd fe63 	bl	800f7f4 <__aeabi_i2f>
 8011b2e:	9003      	str	r0, [sp, #12]
 8011b30:	0028      	movs	r0, r5
 8011b32:	f7fd fe5f 	bl	800f7f4 <__aeabi_i2f>
 8011b36:	1c21      	adds	r1, r4, #0
 8011b38:	f7fc ff28 	bl	800e98c <__aeabi_fmul>
 8011b3c:	9902      	ldr	r1, [sp, #8]
 8011b3e:	f7fc fc79 	bl	800e434 <__aeabi_fadd>
 8011b42:	1c01      	adds	r1, r0, #0
 8011b44:	9803      	ldr	r0, [sp, #12]
 8011b46:	f7fd f853 	bl	800ebf0 <__aeabi_fsub>
 8011b4a:	f7fd fc5f 	bl	800f40c <__aeabi_f2uiz>
 8011b4e:	3501      	adds	r5, #1
 8011b50:	8038      	strh	r0, [r7, #0]
 8011b52:	e7e2      	b.n	8011b1a <detrend+0xc8>
 8011b54:	3601      	adds	r6, #1
 8011b56:	e79d      	b.n	8011a94 <detrend+0x42>
}
 8011b58:	b007      	add	sp, #28
 8011b5a:	bc3c      	pop	{r2, r3, r4, r5}
 8011b5c:	4690      	mov	r8, r2
 8011b5e:	4699      	mov	r9, r3
 8011b60:	46a2      	mov	sl, r4
 8011b62:	46ab      	mov	fp, r5
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011b66 <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8011b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b68:	4647      	mov	r7, r8
 8011b6a:	46ce      	mov	lr, r9
 8011b6c:	4680      	mov	r8, r0
	uint8_t bins = data_size.x2;
 8011b6e:	2400      	movs	r4, #0
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b2ce      	uxtb	r6, r1
 8011b74:	b083      	sub	sp, #12
 8011b76:	040f      	lsls	r7, r1, #16
 8011b78:	ab01      	add	r3, sp, #4
 8011b7a:	00b5      	lsls	r5, r6, #2
 8011b7c:	8019      	strh	r1, [r3, #0]
 8011b7e:	4445      	add	r5, r8
	for(uint16_t i = 0; i<bins; i++){
 8011b80:	0e3f      	lsrs	r7, r7, #24
 8011b82:	b2a3      	uxth	r3, r4
 8011b84:	429f      	cmp	r7, r3
 8011b86:	d918      	bls.n	8011bba <dcdatarm+0x54>
 8011b88:	0063      	lsls	r3, r4, #1
 8011b8a:	4699      	mov	r9, r3
		uint32_t accumulator = 0;
 8011b8c:	2000      	movs	r0, #0
	for(uint16_t i = 0; i<bins; i++){
 8011b8e:	4643      	mov	r3, r8
		for(uint16_t j = 0; j<sweeps; j++){
 8011b90:	42ab      	cmp	r3, r5
 8011b92:	d004      	beq.n	8011b9e <dcdatarm+0x38>
			accumulator += data[j][i];
 8011b94:	4649      	mov	r1, r9
 8011b96:	cb04      	ldmia	r3!, {r2}
 8011b98:	5a52      	ldrh	r2, [r2, r1]
 8011b9a:	1880      	adds	r0, r0, r2
 8011b9c:	e7f8      	b.n	8011b90 <dcdatarm+0x2a>
		uint32_t average = accumulator/sweeps;
 8011b9e:	0031      	movs	r1, r6
 8011ba0:	f7fd fa26 	bl	800eff0 <__udivsi3>
 8011ba4:	4642      	mov	r2, r8
		for(uint16_t j = 0; j<sweeps; j++){
 8011ba6:	42aa      	cmp	r2, r5
 8011ba8:	d005      	beq.n	8011bb6 <dcdatarm+0x50>
			data[j][i] -= average;
 8011baa:	ca08      	ldmia	r2!, {r3}
 8011bac:	444b      	add	r3, r9
 8011bae:	8819      	ldrh	r1, [r3, #0]
 8011bb0:	1a09      	subs	r1, r1, r0
 8011bb2:	8019      	strh	r1, [r3, #0]
 8011bb4:	e7f7      	b.n	8011ba6 <dcdatarm+0x40>
 8011bb6:	3401      	adds	r4, #1
 8011bb8:	e7e3      	b.n	8011b82 <dcdatarm+0x1c>
}
 8011bba:	b003      	add	sp, #12
 8011bbc:	bc0c      	pop	{r2, r3}
 8011bbe:	4690      	mov	r8, r2
 8011bc0:	4699      	mov	r9, r3
 8011bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bc4 <acc_service_sparse_get_next_by_reference.part.9>:
 8011bc4:	b530      	push	{r4, r5, lr}
 8011bc6:	b089      	sub	sp, #36	; 0x24
 8011bc8:	680d      	ldr	r5, [r1, #0]
 8011bca:	9103      	str	r1, [sp, #12]
 8011bcc:	2100      	movs	r1, #0
 8011bce:	2403      	movs	r4, #3
 8011bd0:	ab01      	add	r3, sp, #4
 8011bd2:	9104      	str	r1, [sp, #16]
 8011bd4:	7619      	strb	r1, [r3, #24]
 8011bd6:	7659      	strb	r1, [r3, #25]
 8011bd8:	7699      	strb	r1, [r3, #26]
 8011bda:	0019      	movs	r1, r3
 8011bdc:	701c      	strb	r4, [r3, #0]
 8011bde:	9502      	str	r5, [sp, #8]
 8011be0:	9205      	str	r2, [sp, #20]
 8011be2:	9406      	str	r4, [sp, #24]
 8011be4:	f7f9 f9be 	bl	800af64 <acc_service_get_next.constprop.80>
 8011be8:	b009      	add	sp, #36	; 0x24
 8011bea:	bd30      	pop	{r4, r5, pc}

08011bec <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8011bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bee:	4657      	mov	r7, sl
 8011bf0:	464e      	mov	r6, r9
 8011bf2:	4645      	mov	r5, r8
 8011bf4:	46de      	mov	lr, fp
 8011bf6:	b5e0      	push	{r5, r6, r7, lr}
 8011bf8:	b089      	sub	sp, #36	; 0x24
 8011bfa:	9003      	str	r0, [sp, #12]
 8011bfc:	ac07      	add	r4, sp, #28
 8011bfe:	8021      	strh	r1, [r4, #0]
 8011c00:	4690      	mov	r8, r2
	_conv_data = data;
 8011c02:	4c96      	ldr	r4, [pc, #600]	; (8011e5c <doconv+0x270>)
 8011c04:	9a03      	ldr	r2, [sp, #12]
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8011c06:	040b      	lsls	r3, r1, #16
	_bins = data_size.x2;
 8011c08:	0e1b      	lsrs	r3, r3, #24
	_conv_data = data;
 8011c0a:	6062      	str	r2, [r4, #4]
	_bins = data_size.x2;
 8011c0c:	2504      	movs	r5, #4
	_sweeps = data_size.x1;
 8011c0e:	b2ca      	uxtb	r2, r1
		kernel[i] =  expf(t);
 8011c10:	0027      	movs	r7, r4
	_sweeps = data_size.x1;
 8011c12:	4691      	mov	r9, r2
	_bins = data_size.x2;
 8011c14:	469a      	mov	sl, r3
	float norm = 0;
 8011c16:	2600      	movs	r6, #0
	_sweeps = data_size.x1;
 8011c18:	7022      	strb	r2, [r4, #0]
	_bins = data_size.x2;
 8011c1a:	7063      	strb	r3, [r4, #1]
 8011c1c:	426d      	negs	r5, r5
		kernel[i] =  expf(t);
 8011c1e:	3728      	adds	r7, #40	; 0x28
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8011c20:	0028      	movs	r0, r5
 8011c22:	f7fd fde7 	bl	800f7f4 <__aeabi_i2f>
 8011c26:	4641      	mov	r1, r8
 8011c28:	f7fc fd9e 	bl	800e768 <__aeabi_fdiv>
		t = -t*t/2;
 8011c2c:	2380      	movs	r3, #128	; 0x80
 8011c2e:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8011c30:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8011c32:	18c0      	adds	r0, r0, r3
 8011c34:	f7fc feaa 	bl	800e98c <__aeabi_fmul>
 8011c38:	21fc      	movs	r1, #252	; 0xfc
 8011c3a:	0589      	lsls	r1, r1, #22
 8011c3c:	f7fc fea6 	bl	800e98c <__aeabi_fmul>
		kernel[i] =  expf(t);
 8011c40:	f001 fd8c 	bl	801375c <expf>
 8011c44:	00ab      	lsls	r3, r5, #2
 8011c46:	18fb      	adds	r3, r7, r3
 8011c48:	1c01      	adds	r1, r0, #0
 8011c4a:	6118      	str	r0, [r3, #16]
		norm += kernel[i];
 8011c4c:	1c30      	adds	r0, r6, #0
 8011c4e:	f7fc fbf1 	bl	800e434 <__aeabi_fadd>
 8011c52:	3501      	adds	r5, #1
 8011c54:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8011c56:	2d05      	cmp	r5, #5
 8011c58:	d1e2      	bne.n	8011c20 <doconv+0x34>
	float sclfact = 1/norm;
 8011c5a:	1c01      	adds	r1, r0, #0
 8011c5c:	20fe      	movs	r0, #254	; 0xfe
 8011c5e:	0580      	lsls	r0, r0, #22
 8011c60:	f7fc fd82 	bl	800e768 <__aeabi_fdiv>
 8011c64:	2500      	movs	r5, #0
 8011c66:	1c06      	adds	r6, r0, #0
		kernel[i] *= sclfact;
 8011c68:	3428      	adds	r4, #40	; 0x28
 8011c6a:	00af      	lsls	r7, r5, #2
 8011c6c:	5938      	ldr	r0, [r7, r4]
 8011c6e:	1c31      	adds	r1, r6, #0
 8011c70:	f7fc fe8c 	bl	800e98c <__aeabi_fmul>
 8011c74:	3501      	adds	r5, #1
 8011c76:	5138      	str	r0, [r7, r4]
	for(uint16_t i = 0; i < CONVKER; i++){
 8011c78:	2d09      	cmp	r5, #9
 8011c7a:	d1f6      	bne.n	8011c6a <doconv+0x7e>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011c7c:	464b      	mov	r3, r9
 8011c7e:	085b      	lsrs	r3, r3, #1
 8011c80:	3306      	adds	r3, #6
 8011c82:	9306      	str	r3, [sp, #24]
 8011c84:	4b75      	ldr	r3, [pc, #468]	; (8011e5c <doconv+0x270>)
	for(uint16_t i = 0; i < _bins; i++){
 8011c86:	2700      	movs	r7, #0
 8011c88:	469b      	mov	fp, r3
 8011c8a:	45ba      	cmp	sl, r7
 8011c8c:	d964      	bls.n	8011d58 <doconv+0x16c>
	for(int i = 0; i < CONVKER; i++){
 8011c8e:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 8011c90:	2000      	movs	r0, #0
 8011c92:	4973      	ldr	r1, [pc, #460]	; (8011e60 <doconv+0x274>)
 8011c94:	009a      	lsls	r2, r3, #2
	for(int i = 0; i < CONVKER; i++){
 8011c96:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 8011c98:	5050      	str	r0, [r2, r1]
	for(int i = 0; i < CONVKER; i++){
 8011c9a:	2b09      	cmp	r3, #9
 8011c9c:	d1f8      	bne.n	8011c90 <doconv+0xa4>
		return _conv_data[sweep][bin];
 8011c9e:	007b      	lsls	r3, r7, #1
 8011ca0:	9304      	str	r3, [sp, #16]
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9301      	str	r3, [sp, #4]
	float popped = convstack[0];
 8011ca6:	4b6d      	ldr	r3, [pc, #436]	; (8011e5c <doconv+0x270>)
 8011ca8:	464d      	mov	r5, r9
 8011caa:	4698      	mov	r8, r3
		return _conv_data[sweep][bin];
 8011cac:	4e6d      	ldr	r6, [pc, #436]	; (8011e64 <doconv+0x278>)
 8011cae:	0033      	movs	r3, r6
 8011cb0:	3308      	adds	r3, #8
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	9302      	str	r3, [sp, #8]
			float sum = 0.0f;
 8011cb6:	2300      	movs	r3, #0
			for(int j = 0; j < CONVKER; j++){
 8011cb8:	2400      	movs	r4, #0
			float sum = 0.0f;
 8011cba:	4699      	mov	r9, r3
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011cbc:	4a6a      	ldr	r2, [pc, #424]	; (8011e68 <doconv+0x27c>)
 8011cbe:	00a3      	lsls	r3, r4, #2
 8011cc0:	589b      	ldr	r3, [r3, r2]
		return 0;
 8011cc2:	2000      	movs	r0, #0
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011cc4:	9305      	str	r3, [sp, #20]
 8011cc6:	466b      	mov	r3, sp
 8011cc8:	2208      	movs	r2, #8
 8011cca:	5e9b      	ldrsh	r3, [r3, r2]
	if(
 8011ccc:	4283      	cmp	r3, r0
 8011cce:	db08      	blt.n	8011ce2 <doconv+0xf6>
		(sweep >= 0) && (sweep < _sweeps) &&
 8011cd0:	42ab      	cmp	r3, r5
 8011cd2:	da06      	bge.n	8011ce2 <doconv+0xf6>
		(bin >= 0) && (bin < _bins)
 8011cd4:	4557      	cmp	r7, sl
 8011cd6:	da04      	bge.n	8011ce2 <doconv+0xf6>
		return _conv_data[sweep][bin];
 8011cd8:	9a03      	ldr	r2, [sp, #12]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	589b      	ldr	r3, [r3, r2]
 8011cde:	9a04      	ldr	r2, [sp, #16]
 8011ce0:	5a98      	ldrh	r0, [r3, r2]
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011ce2:	f7fd fd87 	bl	800f7f4 <__aeabi_i2f>
 8011ce6:	9905      	ldr	r1, [sp, #20]
 8011ce8:	f7fc fe50 	bl	800e98c <__aeabi_fmul>
 8011cec:	1c01      	adds	r1, r0, #0
 8011cee:	4648      	mov	r0, r9
 8011cf0:	f7fc fba0 	bl	800e434 <__aeabi_fadd>
 8011cf4:	9b02      	ldr	r3, [sp, #8]
			for(int j = 0; j < CONVKER; j++){
 8011cf6:	3401      	adds	r4, #1
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	b29b      	uxth	r3, r3
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011cfc:	4681      	mov	r9, r0
 8011cfe:	9302      	str	r3, [sp, #8]
			for(int j = 0; j < CONVKER; j++){
 8011d00:	2c09      	cmp	r4, #9
 8011d02:	d1db      	bne.n	8011cbc <doconv+0xd0>
	float popped = convstack[0];
 8011d04:	4643      	mov	r3, r8
 8011d06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011d08:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 8011d0a:	4a55      	ldr	r2, [pc, #340]	; (8011e60 <doconv+0x274>)
 8011d0c:	18d2      	adds	r2, r2, r3
 8011d0e:	6852      	ldr	r2, [r2, #4]
 8011d10:	9202      	str	r2, [sp, #8]
 8011d12:	9902      	ldr	r1, [sp, #8]
 8011d14:	4a52      	ldr	r2, [pc, #328]	; (8011e60 <doconv+0x274>)
 8011d16:	5099      	str	r1, [r3, r2]
 8011d18:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 8011d1a:	2b20      	cmp	r3, #32
 8011d1c:	d1f5      	bne.n	8011d0a <doconv+0x11e>
	convstack[(CONVKER-1)/2 -1] = val;
 8011d1e:	464a      	mov	r2, r9
 8011d20:	4b4e      	ldr	r3, [pc, #312]	; (8011e5c <doconv+0x270>)
 8011d22:	659a      	str	r2, [r3, #88]	; 0x58
			setdata(i-cent, indx, pop);
 8011d24:	b233      	sxth	r3, r6
	if(
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	db0a      	blt.n	8011d40 <doconv+0x154>
		(sweep >= 0) && (sweep < _sweeps) &&
 8011d2a:	42ab      	cmp	r3, r5
 8011d2c:	da08      	bge.n	8011d40 <doconv+0x154>
		(bin >= 0) && (bin < _bins)
 8011d2e:	4557      	cmp	r7, sl
 8011d30:	da06      	bge.n	8011d40 <doconv+0x154>
		_conv_data[sweep][bin] = val;
 8011d32:	9a03      	ldr	r2, [sp, #12]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	589c      	ldr	r4, [r3, r2]
			setdata(i-cent, indx, pop);
 8011d38:	f7fd fb68 	bl	800f40c <__aeabi_f2uiz>
 8011d3c:	9b04      	ldr	r3, [sp, #16]
 8011d3e:	52e0      	strh	r0, [r4, r3]
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011d40:	9b01      	ldr	r3, [sp, #4]
 8011d42:	9a06      	ldr	r2, [sp, #24]
 8011d44:	3301      	adds	r3, #1
 8011d46:	3601      	adds	r6, #1
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	b2b6      	uxth	r6, r6
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	ddae      	ble.n	8011cae <doconv+0xc2>
	for(uint16_t i = 0; i < _bins; i++){
 8011d50:	3701      	adds	r7, #1
 8011d52:	46a9      	mov	r9, r5
 8011d54:	b2bf      	uxth	r7, r7
 8011d56:	e798      	b.n	8011c8a <doconv+0x9e>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8011d58:	2700      	movs	r7, #0
 8011d5a:	465b      	mov	r3, fp
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	4699      	mov	r9, r3
 8011d60:	085b      	lsrs	r3, r3, #1
 8011d62:	42bb      	cmp	r3, r7
 8011d64:	d972      	bls.n	8011e4c <doconv+0x260>
	convstack[i] = 0.0f;
 8011d66:	465a      	mov	r2, fp
	for(int i = 0; i < CONVKER; i++){
 8011d68:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 8011d6a:	324c      	adds	r2, #76	; 0x4c
 8011d6c:	2000      	movs	r0, #0
 8011d6e:	0099      	lsls	r1, r3, #2
	for(int i = 0; i < CONVKER; i++){
 8011d70:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 8011d72:	5088      	str	r0, [r1, r2]
	for(int i = 0; i < CONVKER; i++){
 8011d74:	2b09      	cmp	r3, #9
 8011d76:	d1f9      	bne.n	8011d6c <doconv+0x180>
		if(indx >= _sweeps){
 8011d78:	454f      	cmp	r7, r9
 8011d7a:	d20d      	bcs.n	8011d98 <doconv+0x1ac>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8011d7c:	465b      	mov	r3, fp
 8011d7e:	785b      	ldrb	r3, [r3, #1]
		return _conv_data[sweep][bin];
 8011d80:	00be      	lsls	r6, r7, #2
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8011d82:	9301      	str	r3, [sp, #4]
 8011d84:	3306      	adds	r3, #6
 8011d86:	9303      	str	r3, [sp, #12]
		return _conv_data[sweep][bin];
 8011d88:	465b      	mov	r3, fp
 8011d8a:	685b      	ldr	r3, [r3, #4]
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8011d8c:	2400      	movs	r4, #0
		return _conv_data[sweep][bin];
 8011d8e:	469c      	mov	ip, r3
	float popped = convstack[0];
 8011d90:	4b32      	ldr	r3, [pc, #200]	; (8011e5c <doconv+0x270>)
		return _conv_data[sweep][bin];
 8011d92:	4466      	add	r6, ip
	float popped = convstack[0];
 8011d94:	469a      	mov	sl, r3
 8011d96:	e035      	b.n	8011e04 <doconv+0x218>
			ERR_PRINTLN("sweep count too great to convolve");
 8011d98:	4834      	ldr	r0, [pc, #208]	; (8011e6c <doconv+0x280>)
 8011d9a:	f003 fabf 	bl	801531c <__wrap_printf>
 8011d9e:	4834      	ldr	r0, [pc, #208]	; (8011e70 <doconv+0x284>)
 8011da0:	f003 fabc 	bl	801531c <__wrap_printf>
 8011da4:	22b9      	movs	r2, #185	; 0xb9
 8011da6:	4933      	ldr	r1, [pc, #204]	; (8011e74 <doconv+0x288>)
 8011da8:	4833      	ldr	r0, [pc, #204]	; (8011e78 <doconv+0x28c>)
 8011daa:	f003 fab7 	bl	801531c <__wrap_printf>
 8011dae:	e04a      	b.n	8011e46 <doconv+0x25a>
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011db0:	4a2d      	ldr	r2, [pc, #180]	; (8011e68 <doconv+0x27c>)
 8011db2:	00ab      	lsls	r3, r5, #2
 8011db4:	589b      	ldr	r3, [r3, r2]
		return 0;
 8011db6:	2000      	movs	r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011db8:	9302      	str	r3, [sp, #8]
		(sweep >= 0) && (sweep < _sweeps) &&
 8011dba:	454f      	cmp	r7, r9
 8011dbc:	db28      	blt.n	8011e10 <doconv+0x224>
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011dbe:	f7fd fd19 	bl	800f7f4 <__aeabi_i2f>
 8011dc2:	9902      	ldr	r1, [sp, #8]
 8011dc4:	f7fc fde2 	bl	800e98c <__aeabi_fmul>
 8011dc8:	1c01      	adds	r1, r0, #0
 8011dca:	4640      	mov	r0, r8
 8011dcc:	f7fc fb32 	bl	800e434 <__aeabi_fadd>
			for(int j = 0; j < CONVKER; j++){
 8011dd0:	3501      	adds	r5, #1
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011dd2:	4680      	mov	r8, r0
			for(int j = 0; j < CONVKER; j++){
 8011dd4:	2d09      	cmp	r5, #9
 8011dd6:	d1eb      	bne.n	8011db0 <doconv+0x1c4>
	float popped = convstack[0];
 8011dd8:	4653      	mov	r3, sl
 8011dda:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011ddc:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 8011dde:	4a20      	ldr	r2, [pc, #128]	; (8011e60 <doconv+0x274>)
 8011de0:	18d2      	adds	r2, r2, r3
 8011de2:	6852      	ldr	r2, [r2, #4]
 8011de4:	9202      	str	r2, [sp, #8]
 8011de6:	9902      	ldr	r1, [sp, #8]
 8011de8:	4a1d      	ldr	r2, [pc, #116]	; (8011e60 <doconv+0x274>)
 8011dea:	5099      	str	r1, [r3, r2]
 8011dec:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 8011dee:	2b20      	cmp	r3, #32
 8011df0:	d1f5      	bne.n	8011dde <doconv+0x1f2>
	convstack[(CONVKER-1)/2 -1] = val;
 8011df2:	4642      	mov	r2, r8
 8011df4:	4b19      	ldr	r3, [pc, #100]	; (8011e5c <doconv+0x270>)
 8011df6:	659a      	str	r2, [r3, #88]	; 0x58
		(sweep >= 0) && (sweep < _sweeps) &&
 8011df8:	454f      	cmp	r7, r9
 8011dfa:	db15      	blt.n	8011e28 <doconv+0x23c>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8011dfc:	9b03      	ldr	r3, [sp, #12]
 8011dfe:	3401      	adds	r4, #1
 8011e00:	429c      	cmp	r4, r3
 8011e02:	dc20      	bgt.n	8011e46 <doconv+0x25a>
			float sum = 0.0f;
 8011e04:	2300      	movs	r3, #0
 8011e06:	4698      	mov	r8, r3
 8011e08:	1d23      	adds	r3, r4, #4
			for(int j = 0; j < CONVKER; j++){
 8011e0a:	2500      	movs	r5, #0
 8011e0c:	9304      	str	r3, [sp, #16]
 8011e0e:	e7cf      	b.n	8011db0 <doconv+0x1c4>
 8011e10:	9b04      	ldr	r3, [sp, #16]
 8011e12:	1b5b      	subs	r3, r3, r5
 8011e14:	b21b      	sxth	r3, r3
		(sweep >= 0) && (sweep < _sweeps) &&
 8011e16:	4283      	cmp	r3, r0
 8011e18:	dbd1      	blt.n	8011dbe <doconv+0x1d2>
		(bin >= 0) && (bin < _bins)
 8011e1a:	9a01      	ldr	r2, [sp, #4]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	ddce      	ble.n	8011dbe <doconv+0x1d2>
		return _conv_data[sweep][bin];
 8011e20:	6832      	ldr	r2, [r6, #0]
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	5a98      	ldrh	r0, [r3, r2]
 8011e26:	e7ca      	b.n	8011dbe <doconv+0x1d2>
 8011e28:	1f23      	subs	r3, r4, #4
 8011e2a:	b21b      	sxth	r3, r3
		(sweep >= 0) && (sweep < _sweeps) &&
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	dbe5      	blt.n	8011dfc <doconv+0x210>
		(bin >= 0) && (bin < _bins)
 8011e30:	9a01      	ldr	r2, [sp, #4]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	dde2      	ble.n	8011dfc <doconv+0x210>
		_conv_data[sweep][bin] = val;
 8011e36:	005b      	lsls	r3, r3, #1
 8011e38:	4698      	mov	r8, r3
			setdata(indx, i-cent, pop);
 8011e3a:	f7fd fae7 	bl	800f40c <__aeabi_f2uiz>
 8011e3e:	4643      	mov	r3, r8
		_conv_data[sweep][bin] = val;
 8011e40:	6835      	ldr	r5, [r6, #0]
			setdata(indx, i-cent, pop);
 8011e42:	5358      	strh	r0, [r3, r5]
 8011e44:	e7da      	b.n	8011dfc <doconv+0x210>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8011e46:	3701      	adds	r7, #1
 8011e48:	b2bf      	uxth	r7, r7
 8011e4a:	e786      	b.n	8011d5a <doconv+0x16e>
}
 8011e4c:	b009      	add	sp, #36	; 0x24
 8011e4e:	bc3c      	pop	{r2, r3, r4, r5}
 8011e50:	4690      	mov	r8, r2
 8011e52:	4699      	mov	r9, r3
 8011e54:	46a2      	mov	sl, r4
 8011e56:	46ab      	mov	fp, r5
 8011e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e5a:	46c0      	nop			; (mov r8, r8)
 8011e5c:	2000008c 	.word	0x2000008c
 8011e60:	200000d8 	.word	0x200000d8
 8011e64:	0000fffc 	.word	0x0000fffc
 8011e68:	200000b4 	.word	0x200000b4
 8011e6c:	0801c3ec 	.word	0x0801c3ec
 8011e70:	0801c44c 	.word	0x0801c44c
 8011e74:	0801c470 	.word	0x0801c470
 8011e78:	0801c308 	.word	0x0801c308

08011e7c <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 8011e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e7e:	4657      	mov	r7, sl
 8011e80:	46de      	mov	lr, fp
 8011e82:	464e      	mov	r6, r9
 8011e84:	4645      	mov	r5, r8
 8011e86:	b5e0      	push	{r5, r6, r7, lr}
 8011e88:	b0a3      	sub	sp, #140	; 0x8c
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	65b8      	str	r0, [r7, #88]	; 0x58
 8011e8e:	2084      	movs	r0, #132	; 0x84
 8011e90:	1838      	adds	r0, r7, r0
 8011e92:	8001      	strh	r1, [r0, #0]
	uint8_t sweeps = data_size.x1;
 8011e94:	b2ca      	uxtb	r2, r1
float dofft(uint16_t** data, uint8v2_t data_size){
 8011e96:	040b      	lsls	r3, r1, #16
	uint8_t sweeps = data_size.x1;
 8011e98:	2180      	movs	r1, #128	; 0x80
 8011e9a:	1879      	adds	r1, r7, r1
 8011e9c:	600a      	str	r2, [r1, #0]
	float scales[bins];
 8011e9e:	466a      	mov	r2, sp
	uint8_t bins = data_size.x2;
 8011ea0:	0e1b      	lsrs	r3, r3, #24
 8011ea2:	633b      	str	r3, [r7, #48]	; 0x30
	float scales[bins];
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	330a      	adds	r3, #10
 8011ea8:	08db      	lsrs	r3, r3, #3
 8011eaa:	00db      	lsls	r3, r3, #3
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	469d      	mov	sp, r3
	int16_t real[sweeps];
 8011eb0:	466a      	mov	r2, sp
	float scales[bins];
 8011eb2:	653b      	str	r3, [r7, #80]	; 0x50
	int16_t real[sweeps];
 8011eb4:	680b      	ldr	r3, [r1, #0]
 8011eb6:	005b      	lsls	r3, r3, #1
 8011eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011eba:	3308      	adds	r3, #8
 8011ebc:	08db      	lsrs	r3, r3, #3
 8011ebe:	00db      	lsls	r3, r3, #3
 8011ec0:	1ad2      	subs	r2, r2, r3
 8011ec2:	4695      	mov	sp, r2
	int16_t imag[sweeps];
 8011ec4:	1ad3      	subs	r3, r2, r3
	int16_t real[sweeps];
 8011ec6:	46eb      	mov	fp, sp
	int16_t imag[sweeps];
 8011ec8:	469d      	mov	sp, r3
 8011eca:	67bb      	str	r3, [r7, #120]	; 0x78
		for (uint16_t j = 0; j < sweeps; j++) {
 8011ecc:	880b      	ldrh	r3, [r1, #0]
 8011ece:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ed0:	657b      	str	r3, [r7, #84]	; 0x54

void fftWindowing(int16_t *vData, uint16_t samples, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = ((double)samples - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011ed2:	085b      	lsrs	r3, r3, #1
 8011ed4:	60bb      	str	r3, [r7, #8]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8011ed6:	680b      	ldr	r3, [r1, #0]
 8011ed8:	4694      	mov	ip, r2
 8011eda:	085e      	lsrs	r6, r3, #1
 8011edc:	b2b3      	uxth	r3, r6
 8011ede:	637b      	str	r3, [r7, #52]	; 0x34
 8011ee0:	466b      	mov	r3, sp
 8011ee2:	4463      	add	r3, ip
 8011ee4:	607b      	str	r3, [r7, #4]
 8011ee6:	0013      	movs	r3, r2
 8011ee8:	445b      	add	r3, fp
 8011eea:	61fb      	str	r3, [r7, #28]
 8011eec:	00b3      	lsls	r3, r6, #2
 8011eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8011ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ef4:	4694      	mov	ip, r2
 8011ef6:	4463      	add	r3, ip
 8011ef8:	61bb      	str	r3, [r7, #24]
 8011efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011efc:	46da      	mov	sl, fp
 8011efe:	425b      	negs	r3, r3
 8011f00:	60fb      	str	r3, [r7, #12]
 8011f02:	2300      	movs	r3, #0
 8011f04:	65fb      	str	r3, [r7, #92]	; 0x5c
	for(uint16_t i = 0; i<bins; i++){
 8011f06:	225c      	movs	r2, #92	; 0x5c
 8011f08:	18ba      	adds	r2, r7, r2
 8011f0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011f0c:	8812      	ldrh	r2, [r2, #0]
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d800      	bhi.n	8011f14 <dofft+0x98>
 8011f12:	e22a      	b.n	801236a <dofft+0x4ee>
 8011f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011f16:	4650      	mov	r0, sl
 8011f18:	005b      	lsls	r3, r3, #1
 8011f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8011f1c:	2300      	movs	r3, #0
		for (uint16_t j = 0; j < sweeps; j++) {
 8011f1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	4291      	cmp	r1, r2
 8011f24:	d908      	bls.n	8011f38 <dofft+0xbc>
		  real[j] = data[j][i];
 8011f26:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8011f28:	0099      	lsls	r1, r3, #2
 8011f2a:	5861      	ldr	r1, [r4, r1]
 8011f2c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8011f2e:	005a      	lsls	r2, r3, #1
 8011f30:	5b09      	ldrh	r1, [r1, r4]
 8011f32:	3301      	adds	r3, #1
 8011f34:	5281      	strh	r1, [r0, r2]
 8011f36:	e7f2      	b.n	8011f1e <dofft+0xa2>
 8011f38:	4682      	mov	sl, r0
 8011f3a:	2200      	movs	r2, #0
		for (uint16_t j = 0; j < sweeps; j++) {
 8011f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
		for (uint16_t j = 0; j < sweeps; j++) {
 8011f3e:	6879      	ldr	r1, [r7, #4]
 8011f40:	428b      	cmp	r3, r1
 8011f42:	d002      	beq.n	8011f4a <dofft+0xce>
		  imag[j] = 0;
 8011f44:	801a      	strh	r2, [r3, #0]
 8011f46:	3302      	adds	r3, #2
 8011f48:	e7f9      	b.n	8011f3e <dofft+0xc2>
	for(int i =0; i<(samples);i++){
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	4651      	mov	r1, sl
	int max = 0;
 8011f4e:	0018      	movs	r0, r3
	for(int i =0; i<(samples);i++){
 8011f50:	2280      	movs	r2, #128	; 0x80
 8011f52:	18ba      	adds	r2, r7, r2
 8011f54:	6812      	ldr	r2, [r2, #0]
 8011f56:	4293      	cmp	r3, r2
 8011f58:	da09      	bge.n	8011f6e <dofft+0xf2>
		if (max < vReal[i]){
 8011f5a:	005a      	lsls	r2, r3, #1
 8011f5c:	5e8a      	ldrsh	r2, [r1, r2]
 8011f5e:	17d4      	asrs	r4, r2, #31
 8011f60:	1912      	adds	r2, r2, r4
 8011f62:	4062      	eors	r2, r4
 8011f64:	4290      	cmp	r0, r2
 8011f66:	da00      	bge.n	8011f6a <dofft+0xee>
 8011f68:	0010      	movs	r0, r2
	for(int i =0; i<(samples);i++){
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	e7f0      	b.n	8011f50 <dofft+0xd4>
 8011f6e:	468a      	mov	sl, r1
	float scaler = 256.0f/max;
 8011f70:	f7fd fc40 	bl	800f7f4 <__aeabi_i2f>
 8011f74:	1c01      	adds	r1, r0, #0
 8011f76:	2087      	movs	r0, #135	; 0x87
 8011f78:	05c0      	lsls	r0, r0, #23
 8011f7a:	f7fc fbf5 	bl	800e768 <__aeabi_fdiv>
 8011f7e:	4654      	mov	r4, sl
 8011f80:	1c05      	adds	r5, r0, #0
	for(int i =0; i<(samples);i++){
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	429c      	cmp	r4, r3
 8011f86:	d00b      	beq.n	8011fa0 <dofft+0x124>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8011f88:	2300      	movs	r3, #0
 8011f8a:	5ee0      	ldrsh	r0, [r4, r3]
 8011f8c:	f7fd fc32 	bl	800f7f4 <__aeabi_i2f>
 8011f90:	1c29      	adds	r1, r5, #0
 8011f92:	f7fc fcfb 	bl	800e98c <__aeabi_fmul>
 8011f96:	f7fd fc0d 	bl	800f7b4 <__aeabi_f2iz>
 8011f9a:	8020      	strh	r0, [r4, #0]
 8011f9c:	3402      	adds	r4, #2
 8011f9e:	e7f0      	b.n	8011f82 <dofft+0x106>
		scales[i] = fftRangeScaling(real, sweeps);
 8011fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	50d5      	str	r5, [r2, r3]
	double samplesMinusOne = ((double)samples - 1.0);
 8011fa8:	2380      	movs	r3, #128	; 0x80
 8011faa:	18fb      	adds	r3, r7, r3
 8011fac:	6818      	ldr	r0, [r3, #0]
 8011fae:	f7ff fa17 	bl	80113e0 <__aeabi_ui2d>
 8011fb2:	4bdc      	ldr	r3, [pc, #880]	; (8012324 <dofft+0x4a8>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f7fe fe3f 	bl	8010c38 <__aeabi_dsub>
 8011fba:	69fb      	ldr	r3, [r7, #28]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011fbc:	2600      	movs	r6, #0
 8011fbe:	4654      	mov	r4, sl
 8011fc0:	001d      	movs	r5, r3
	double samplesMinusOne = ((double)samples - 1.0);
 8011fc2:	66b8      	str	r0, [r7, #104]	; 0x68
 8011fc4:	66f9      	str	r1, [r7, #108]	; 0x6c
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	3d02      	subs	r5, #2
 8011fca:	429e      	cmp	r6, r3
 8011fcc:	d038      	beq.n	8012040 <dofft+0x1c4>
		double indexMinusOne = (double)i;
 8011fce:	0030      	movs	r0, r6
 8011fd0:	f7ff fa06 	bl	80113e0 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8011fd4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fd8:	f7fd ffb2 	bl	800ff40 <__aeabi_ddiv>
		double weighingFactor = 1.0;
		// Compute and record weighting factor
		// hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8011fdc:	4ad2      	ldr	r2, [pc, #840]	; (8012328 <dofft+0x4ac>)
 8011fde:	4bd3      	ldr	r3, [pc, #844]	; (801232c <dofft+0x4b0>)
 8011fe0:	f7fe fbb8 	bl	8010754 <__aeabi_dmul>
 8011fe4:	f001 fabc 	bl	8013560 <cos>
 8011fe8:	4ad1      	ldr	r2, [pc, #836]	; (8012330 <dofft+0x4b4>)
 8011fea:	4bd2      	ldr	r3, [pc, #840]	; (8012334 <dofft+0x4b8>)
 8011fec:	f7fe fbb2 	bl	8010754 <__aeabi_dmul>
 8011ff0:	000b      	movs	r3, r1
 8011ff2:	0002      	movs	r2, r0
 8011ff4:	49d0      	ldr	r1, [pc, #832]	; (8012338 <dofft+0x4bc>)
 8011ff6:	48d1      	ldr	r0, [pc, #836]	; (801233c <dofft+0x4c0>)
 8011ff8:	f7fe fe1e 	bl	8010c38 <__aeabi_dsub>
 8011ffc:	6738      	str	r0, [r7, #112]	; 0x70
 8011ffe:	6779      	str	r1, [r7, #116]	; 0x74
		if (dir == FFT_FORWARD) {
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8012000:	2300      	movs	r3, #0
 8012002:	5ee0      	ldrsh	r0, [r4, r3]
 8012004:	f7ff f9b2 	bl	801136c <__aeabi_i2d>
 8012008:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801200a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801200c:	f7fe fba2 	bl	8010754 <__aeabi_dmul>
 8012010:	f7ff f976 	bl	8011300 <__aeabi_d2iz>
 8012014:	68fb      	ldr	r3, [r7, #12]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8012016:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012018:	4698      	mov	r8, r3
 801201a:	44a8      	add	r8, r5
 801201c:	4643      	mov	r3, r8
			vData[i] = (int16_t) vData[i]* weighingFactor;
 801201e:	8020      	strh	r0, [r4, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8012020:	5e98      	ldrsh	r0, [r3, r2]
 8012022:	f7ff f9a3 	bl	801136c <__aeabi_i2d>
 8012026:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801202a:	f7fe fb93 	bl	8010754 <__aeabi_dmul>
 801202e:	f7ff f967 	bl	8011300 <__aeabi_d2iz>
 8012032:	4643      	mov	r3, r8
 8012034:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8012036:	3601      	adds	r6, #1
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8012038:	5298      	strh	r0, [r3, r2]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 801203a:	b2b6      	uxth	r6, r6
 801203c:	3402      	adds	r4, #2
 801203e:	e7c2      	b.n	8011fc6 <dofft+0x14a>


uint8_t fftExponent(int16_t value)
{
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (((value >> result) & 1) != 1) result++;
 8012044:	3301      	adds	r3, #1
 8012046:	2280      	movs	r2, #128	; 0x80
 8012048:	18ba      	adds	r2, r7, r2
 801204a:	6812      	ldr	r2, [r2, #0]
 801204c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801204e:	410a      	asrs	r2, r1
 8012050:	421a      	tst	r2, r3
 8012052:	d104      	bne.n	801205e <dofft+0x1e2>
 8012054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012056:	3201      	adds	r2, #1
 8012058:	b2d2      	uxtb	r2, r2
 801205a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801205c:	e7f3      	b.n	8012046 <dofft+0x1ca>
	for (uint16_t i = 0; i < (samples - 1); i++) {
 801205e:	2180      	movs	r1, #128	; 0x80
 8012060:	2200      	movs	r2, #0
 8012062:	1879      	adds	r1, r7, r1
 8012064:	6809      	ldr	r1, [r1, #0]
	uint16_t j = 0;
 8012066:	0013      	movs	r3, r2
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8012068:	1e4c      	subs	r4, r1, #1
 801206a:	4655      	mov	r5, sl
 801206c:	46a1      	mov	r9, r4
 801206e:	454a      	cmp	r2, r9
 8012070:	da1f      	bge.n	80120b2 <dofft+0x236>
		if (i < j) {
 8012072:	4293      	cmp	r3, r2
 8012074:	d90e      	bls.n	8012094 <dofft+0x218>
			fftSwap(&vReal[i], &vReal[j]);
 8012076:	0059      	lsls	r1, r3, #1
 8012078:	468a      	mov	sl, r1
 801207a:	0050      	lsls	r0, r2, #1
 801207c:	1828      	adds	r0, r5, r0

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
	int16_t temp = *x;
 801207e:	2400      	movs	r4, #0
 8012080:	5f01      	ldrsh	r1, [r0, r4]
			fftSwap(&vReal[i], &vReal[j]);
 8012082:	44aa      	add	sl, r5
	int16_t temp = *x;
 8012084:	468c      	mov	ip, r1
	*x = *y;
 8012086:	4651      	mov	r1, sl
 8012088:	2400      	movs	r4, #0
 801208a:	5f09      	ldrsh	r1, [r1, r4]
 801208c:	8001      	strh	r1, [r0, #0]
	*y = temp;
 801208e:	4661      	mov	r1, ip
 8012090:	4650      	mov	r0, sl
 8012092:	8001      	strh	r1, [r0, #0]
	uint8_t result = 0;
 8012094:	0031      	movs	r1, r6
 8012096:	464c      	mov	r4, r9
		while (k <= j) {
 8012098:	428b      	cmp	r3, r1
 801209a:	d304      	bcc.n	80120a6 <dofft+0x22a>
			j -= k;
 801209c:	1a5b      	subs	r3, r3, r1
			k >>= 1;
 801209e:	0849      	lsrs	r1, r1, #1
			j -= k;
 80120a0:	b29b      	uxth	r3, r3
			k >>= 1;
 80120a2:	b289      	uxth	r1, r1
 80120a4:	e7f8      	b.n	8012098 <dofft+0x21c>
		j += k;
 80120a6:	185b      	adds	r3, r3, r1
	for (uint16_t i = 0; i < (samples - 1); i++) {
 80120a8:	3201      	adds	r2, #1
 80120aa:	46a1      	mov	r9, r4
		j += k;
 80120ac:	b29b      	uxth	r3, r3
	for (uint16_t i = 0; i < (samples - 1); i++) {
 80120ae:	b292      	uxth	r2, r2
 80120b0:	e7dd      	b.n	801206e <dofft+0x1f2>
	for (uint8_t l = 0; (l < power); l++) {
 80120b2:	2300      	movs	r3, #0
 80120b4:	4698      	mov	r8, r3
	uint16_t l2 = 1;
 80120b6:	3301      	adds	r3, #1
 80120b8:	64bb      	str	r3, [r7, #72]	; 0x48
	double c2 = 0.0;
 80120ba:	4643      	mov	r3, r8
 80120bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120be:	63bb      	str	r3, [r7, #56]	; 0x38
	double c1 = -1.0;
 80120c0:	2300      	movs	r3, #0
 80120c2:	46aa      	mov	sl, r5
 80120c4:	46c1      	mov	r9, r8
 80120c6:	4c9e      	ldr	r4, [pc, #632]	; (8012340 <dofft+0x4c4>)
 80120c8:	663b      	str	r3, [r7, #96]	; 0x60
 80120ca:	667c      	str	r4, [r7, #100]	; 0x64
	for (uint8_t l = 0; (l < power); l++) {
 80120cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ce:	454b      	cmp	r3, r9
 80120d0:	d100      	bne.n	80120d4 <dofft+0x258>
 80120d2:	e0f3      	b.n	80122bc <dofft+0x440>
		l2 <<= 1;
 80120d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		double u2 = 0.0;
 80120d6:	2400      	movs	r4, #0
		l2 <<= 1;
 80120d8:	005b      	lsls	r3, r3, #1
 80120da:	b29b      	uxth	r3, r3
 80120dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		double u2 = 0.0;
 80120de:	2300      	movs	r3, #0
 80120e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80120e2:	66fc      	str	r4, [r7, #108]	; 0x6c
		double u1 = 1.0;
 80120e4:	2300      	movs	r3, #0
 80120e6:	4c8f      	ldr	r4, [pc, #572]	; (8012324 <dofft+0x4a8>)
 80120e8:	46d3      	mov	fp, sl
 80120ea:	673b      	str	r3, [r7, #112]	; 0x70
 80120ec:	677c      	str	r4, [r7, #116]	; 0x74
		for (j = 0; j < l1; j++) {
 80120ee:	2300      	movs	r3, #0
 80120f0:	46ca      	mov	sl, r9
 80120f2:	647b      	str	r3, [r7, #68]	; 0x44
 80120f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120f8:	4293      	cmp	r3, r2
 80120fa:	d100      	bne.n	80120fe <dofft+0x282>
 80120fc:	e0b4      	b.n	8012268 <dofft+0x3ec>
 80120fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012100:	001e      	movs	r6, r3
			 for (uint16_t i = j; i < samples; i += l2) {
 8012102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012104:	42b3      	cmp	r3, r6
 8012106:	d800      	bhi.n	801210a <dofft+0x28e>
 8012108:	e07b      	b.n	8012202 <dofft+0x386>
					uint16_t i1 = i + l1;
 801210a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801210c:	199c      	adds	r4, r3, r6
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 801210e:	b2a4      	uxth	r4, r4
 8012110:	0064      	lsls	r4, r4, #1
 8012112:	46a0      	mov	r8, r4
 8012114:	44d8      	add	r8, fp
 8012116:	4643      	mov	r3, r8
 8012118:	2000      	movs	r0, #0
 801211a:	5e18      	ldrsh	r0, [r3, r0]
 801211c:	f7ff f926 	bl	801136c <__aeabi_i2d>
 8012120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012122:	6238      	str	r0, [r7, #32]
 8012124:	6279      	str	r1, [r7, #36]	; 0x24
 8012126:	4699      	mov	r9, r3
 8012128:	44a1      	add	r9, r4
 801212a:	464b      	mov	r3, r9
 801212c:	2000      	movs	r0, #0
 801212e:	5e18      	ldrsh	r0, [r3, r0]
 8012130:	f7ff f91c 	bl	801136c <__aeabi_i2d>
 8012134:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012138:	0004      	movs	r4, r0
 801213a:	000d      	movs	r5, r1
 801213c:	6a38      	ldr	r0, [r7, #32]
 801213e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012140:	f7fe fb08 	bl	8010754 <__aeabi_dmul>
 8012144:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012148:	6138      	str	r0, [r7, #16]
 801214a:	6179      	str	r1, [r7, #20]
 801214c:	0020      	movs	r0, r4
 801214e:	0029      	movs	r1, r5
 8012150:	f7fe fb00 	bl	8010754 <__aeabi_dmul>
 8012154:	0002      	movs	r2, r0
 8012156:	000b      	movs	r3, r1
 8012158:	6938      	ldr	r0, [r7, #16]
 801215a:	6979      	ldr	r1, [r7, #20]
 801215c:	f7fe fd6c 	bl	8010c38 <__aeabi_dsub>
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8012160:	0022      	movs	r2, r4
 8012162:	002b      	movs	r3, r5
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8012164:	6138      	str	r0, [r7, #16]
 8012166:	6179      	str	r1, [r7, #20]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8012168:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801216a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801216c:	f7fe faf2 	bl	8010754 <__aeabi_dmul>
 8012170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012174:	0004      	movs	r4, r0
 8012176:	000d      	movs	r5, r1
 8012178:	6a38      	ldr	r0, [r7, #32]
 801217a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801217c:	f7fe faea 	bl	8010754 <__aeabi_dmul>
 8012180:	0002      	movs	r2, r0
 8012182:	000b      	movs	r3, r1
 8012184:	0020      	movs	r0, r4
 8012186:	0029      	movs	r1, r5
 8012188:	f7fd fbbe 	bl	800f908 <__aeabi_dadd>
					vReal[i1] = (int16_t) (vReal[i] - t1);
 801218c:	465b      	mov	r3, fp
 801218e:	0074      	lsls	r4, r6, #1
 8012190:	191d      	adds	r5, r3, r4
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8012192:	6238      	str	r0, [r7, #32]
 8012194:	6279      	str	r1, [r7, #36]	; 0x24
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8012196:	2300      	movs	r3, #0
 8012198:	5ee8      	ldrsh	r0, [r5, r3]
 801219a:	f7ff f8e7 	bl	801136c <__aeabi_i2d>
 801219e:	693a      	ldr	r2, [r7, #16]
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	f7fe fd49 	bl	8010c38 <__aeabi_dsub>
 80121a6:	f7ff f8ab 	bl	8011300 <__aeabi_d2iz>
 80121aa:	4643      	mov	r3, r8
 80121ac:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 80121ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121b0:	469c      	mov	ip, r3
 80121b2:	4464      	add	r4, ip
 80121b4:	2300      	movs	r3, #0
 80121b6:	5ee0      	ldrsh	r0, [r4, r3]
 80121b8:	f7ff f8d8 	bl	801136c <__aeabi_i2d>
 80121bc:	6a3a      	ldr	r2, [r7, #32]
 80121be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c0:	f7fe fd3a 	bl	8010c38 <__aeabi_dsub>
 80121c4:	f7ff f89c 	bl	8011300 <__aeabi_d2iz>
 80121c8:	464b      	mov	r3, r9
 80121ca:	8018      	strh	r0, [r3, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 80121cc:	2300      	movs	r3, #0
 80121ce:	5ee8      	ldrsh	r0, [r5, r3]
 80121d0:	f7ff f8cc 	bl	801136c <__aeabi_i2d>
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	f7fd fb96 	bl	800f908 <__aeabi_dadd>
 80121dc:	f7ff f890 	bl	8011300 <__aeabi_d2iz>
 80121e0:	8028      	strh	r0, [r5, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 80121e2:	2300      	movs	r3, #0
 80121e4:	5ee0      	ldrsh	r0, [r4, r3]
 80121e6:	f7ff f8c1 	bl	801136c <__aeabi_i2d>
 80121ea:	6a3a      	ldr	r2, [r7, #32]
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	f7fd fb8b 	bl	800f908 <__aeabi_dadd>
 80121f2:	f7ff f885 	bl	8011300 <__aeabi_d2iz>
			 for (uint16_t i = j; i < samples; i += l2) {
 80121f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
					vImag[i] = (int16_t) (vImag[i] +t2);
 80121f8:	8020      	strh	r0, [r4, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 80121fa:	469c      	mov	ip, r3
 80121fc:	4466      	add	r6, ip
 80121fe:	b2b6      	uxth	r6, r6
 8012200:	e77f      	b.n	8012102 <dofft+0x286>
			 double z = ((u1 * c1) - (u2 * c2));
 8012202:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012206:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8012208:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801220a:	f7fe faa3 	bl	8010754 <__aeabi_dmul>
 801220e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012210:	0004      	movs	r4, r0
 8012212:	000d      	movs	r5, r1
 8012214:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8012216:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801221a:	f7fe fa9b 	bl	8010754 <__aeabi_dmul>
 801221e:	0002      	movs	r2, r0
 8012220:	000b      	movs	r3, r1
 8012222:	0020      	movs	r0, r4
 8012224:	0029      	movs	r1, r5
 8012226:	f7fe fd07 	bl	8010c38 <__aeabi_dsub>
			 u2 = ((u1 * c2) + (u2 * c1));
 801222a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801222c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
			 double z = ((u1 * c1) - (u2 * c2));
 801222e:	6238      	str	r0, [r7, #32]
 8012230:	6279      	str	r1, [r7, #36]	; 0x24
			 u2 = ((u1 * c2) + (u2 * c1));
 8012232:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8012234:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8012236:	f7fe fa8d 	bl	8010754 <__aeabi_dmul>
 801223a:	0004      	movs	r4, r0
 801223c:	000d      	movs	r5, r1
 801223e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8012240:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012246:	f7fe fa85 	bl	8010754 <__aeabi_dmul>
 801224a:	0022      	movs	r2, r4
 801224c:	002b      	movs	r3, r5
 801224e:	f7fd fb5b 	bl	800f908 <__aeabi_dadd>
		for (j = 0; j < l1; j++) {
 8012252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			 u2 = ((u1 * c2) + (u2 * c1));
 8012254:	66b8      	str	r0, [r7, #104]	; 0x68
 8012256:	66f9      	str	r1, [r7, #108]	; 0x6c
		for (j = 0; j < l1; j++) {
 8012258:	3301      	adds	r3, #1
 801225a:	b29b      	uxth	r3, r3
 801225c:	647b      	str	r3, [r7, #68]	; 0x44
			 u1 = z;
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012262:	673b      	str	r3, [r7, #112]	; 0x70
 8012264:	677c      	str	r4, [r7, #116]	; 0x74
 8012266:	e745      	b.n	80120f4 <dofft+0x278>
		c2 = sqrt((1.0 - c1) / 2.0);
 8012268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801226a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801226c:	2000      	movs	r0, #0
 801226e:	492d      	ldr	r1, [pc, #180]	; (8012324 <dofft+0x4a8>)
 8012270:	f7fe fce2 	bl	8010c38 <__aeabi_dsub>
 8012274:	2200      	movs	r2, #0
 8012276:	4b33      	ldr	r3, [pc, #204]	; (8012344 <dofft+0x4c8>)
 8012278:	f7fe fa6c 	bl	8010754 <__aeabi_dmul>
 801227c:	f001 fa0e 	bl	801369c <sqrt>
			c2 = -c2;
 8012280:	2280      	movs	r2, #128	; 0x80
 8012282:	0612      	lsls	r2, r2, #24
 8012284:	4694      	mov	ip, r2
 8012286:	000b      	movs	r3, r1
 8012288:	46d1      	mov	r9, sl
 801228a:	4463      	add	r3, ip
 801228c:	63f8      	str	r0, [r7, #60]	; 0x3c
 801228e:	63bb      	str	r3, [r7, #56]	; 0x38
		c1 = sqrt((1.0 + c1) / 2.0);
 8012290:	2200      	movs	r2, #0
 8012292:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012294:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012296:	4b23      	ldr	r3, [pc, #140]	; (8012324 <dofft+0x4a8>)
 8012298:	f7fd fb36 	bl	800f908 <__aeabi_dadd>
 801229c:	4b29      	ldr	r3, [pc, #164]	; (8012344 <dofft+0x4c8>)
 801229e:	2200      	movs	r2, #0
 80122a0:	f7fe fa58 	bl	8010754 <__aeabi_dmul>
 80122a4:	f001 f9fa 	bl	801369c <sqrt>
	for (uint8_t l = 0; (l < power); l++) {
 80122a8:	464b      	mov	r3, r9
 80122aa:	3301      	adds	r3, #1
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	4699      	mov	r9, r3
		l2 <<= 1;
 80122b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122b2:	46da      	mov	sl, fp
		c1 = sqrt((1.0 + c1) / 2.0);
 80122b4:	6638      	str	r0, [r7, #96]	; 0x60
 80122b6:	6679      	str	r1, [r7, #100]	; 0x64
		l2 <<= 1;
 80122b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80122ba:	e707      	b.n	80120cc <dofft+0x250>
	for (uint8_t l = 0; (l < power); l++) {
 80122bc:	2400      	movs	r4, #0
	for (int16_t i = 0; i < samples; i++) {
 80122be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80122c0:	42a3      	cmp	r3, r4
 80122c2:	d020      	beq.n	8012306 <dofft+0x48a>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 80122c4:	4653      	mov	r3, sl
 80122c6:	5f18      	ldrsh	r0, [r3, r4]
 80122c8:	f7fd fa94 	bl	800f7f4 <__aeabi_i2f>
 80122cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80122ce:	1c06      	adds	r6, r0, #0
 80122d0:	5f18      	ldrsh	r0, [r3, r4]
 80122d2:	f7fd fa8f 	bl	800f7f4 <__aeabi_i2f>
 80122d6:	1c31      	adds	r1, r6, #0
 80122d8:	1c05      	adds	r5, r0, #0
 80122da:	1c30      	adds	r0, r6, #0
 80122dc:	f7fc fb56 	bl	800e98c <__aeabi_fmul>
 80122e0:	1c29      	adds	r1, r5, #0
 80122e2:	1c06      	adds	r6, r0, #0
 80122e4:	1c28      	adds	r0, r5, #0
 80122e6:	f7fc fb51 	bl	800e98c <__aeabi_fmul>
 80122ea:	1c01      	adds	r1, r0, #0
 80122ec:	1c30      	adds	r0, r6, #0
 80122ee:	f7fc f8a1 	bl	800e434 <__aeabi_fadd>
 80122f2:	f7ff f8a7 	bl	8011444 <__aeabi_f2d>
 80122f6:	f001 f9d1 	bl	801369c <sqrt>
 80122fa:	f7ff f801 	bl	8011300 <__aeabi_d2iz>
 80122fe:	4653      	mov	r3, sl
 8012300:	5318      	strh	r0, [r3, r4]
 8012302:	3402      	adds	r4, #2
 8012304:	e7db      	b.n	80122be <dofft+0x442>
	for (int16_t i = 0; i < samples; i++) {
 8012306:	2300      	movs	r3, #0
 8012308:	4650      	mov	r0, sl
		for (uint16_t j = 0; j < sweeps/2; j++) {
 801230a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801230c:	b29a      	uxth	r2, r3
 801230e:	4291      	cmp	r1, r2
 8012310:	d91a      	bls.n	8012348 <dofft+0x4cc>
		  data[j][i] = real[j];
 8012312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012314:	009a      	lsls	r2, r3, #2
 8012316:	588a      	ldr	r2, [r1, r2]
 8012318:	0059      	lsls	r1, r3, #1
 801231a:	5a41      	ldrh	r1, [r0, r1]
 801231c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801231e:	3301      	adds	r3, #1
 8012320:	5311      	strh	r1, [r2, r4]
 8012322:	e7f2      	b.n	801230a <dofft+0x48e>
 8012324:	3ff00000 	.word	0x3ff00000
 8012328:	5474a168 	.word	0x5474a168
 801232c:	401921fb 	.word	0x401921fb
 8012330:	d70a3d71 	.word	0xd70a3d71
 8012334:	3fdd70a3 	.word	0x3fdd70a3
 8012338:	3fe147ae 	.word	0x3fe147ae
 801233c:	147ae148 	.word	0x147ae148
 8012340:	bff00000 	.word	0xbff00000
 8012344:	3fe00000 	.word	0x3fe00000
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8012348:	000b      	movs	r3, r1
 801234a:	4682      	mov	sl, r0
		  data[j][i] = 0;
 801234c:	2100      	movs	r1, #0
		for (uint16_t j = 0; j < sweeps/2; j++) {
 801234e:	69ba      	ldr	r2, [r7, #24]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8012350:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012352:	4283      	cmp	r3, r0
 8012354:	d205      	bcs.n	8012362 <dofft+0x4e6>
		  data[j][i] = 0;
 8012356:	ca01      	ldmia	r2!, {r0}
 8012358:	6c3c      	ldr	r4, [r7, #64]	; 0x40
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 801235a:	3301      	adds	r3, #1
		  data[j][i] = 0;
 801235c:	5301      	strh	r1, [r0, r4]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 801235e:	b29b      	uxth	r3, r3
 8012360:	e7f6      	b.n	8012350 <dofft+0x4d4>
 8012362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012364:	3301      	adds	r3, #1
 8012366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012368:	e5cd      	b.n	8011f06 <dofft+0x8a>
	float min_scale = scales[0];
 801236a:	2501      	movs	r5, #1
 801236c:	469a      	mov	sl, r3
 801236e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012370:	681c      	ldr	r4, [r3, #0]
	for(uint16_t i =1; i<bins; i++){
 8012372:	b2ab      	uxth	r3, r5
 8012374:	459a      	cmp	sl, r3
 8012376:	d90c      	bls.n	8012392 <dofft+0x516>
		if (scales[i] < min_scale){
 8012378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801237a:	00ab      	lsls	r3, r5, #2
 801237c:	58d6      	ldr	r6, [r2, r3]
 801237e:	1c20      	adds	r0, r4, #0
 8012380:	1c31      	adds	r1, r6, #0
 8012382:	f7fd f80f 	bl	800f3a4 <__aeabi_fcmpgt>
 8012386:	2800      	cmp	r0, #0
 8012388:	d100      	bne.n	801238c <dofft+0x510>
 801238a:	1c26      	adds	r6, r4, #0
 801238c:	3501      	adds	r5, #1
	float min_scale = scales[0];
 801238e:	1c34      	adds	r4, r6, #0
 8012390:	e7ef      	b.n	8012372 <dofft+0x4f6>
 8012392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012396:	4694      	mov	ip, r2
 8012398:	4463      	add	r3, ip
	for(uint16_t i =1; i<bins; i++){
 801239a:	2500      	movs	r5, #0
 801239c:	4699      	mov	r9, r3
 801239e:	46a3      	mov	fp, r4
	for(uint16_t i =0; i<bins; i++){
 80123a0:	b2ab      	uxth	r3, r5
 80123a2:	459a      	cmp	sl, r3
 80123a4:	d91f      	bls.n	80123e6 <dofft+0x56a>
		float scaling_factor = min_scale/scales[i]; 
 80123a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80123a8:	00ab      	lsls	r3, r5, #2
 80123aa:	58d1      	ldr	r1, [r2, r3]
 80123ac:	4658      	mov	r0, fp
 80123ae:	f7fc f9db 	bl	800e768 <__aeabi_fdiv>
 80123b2:	2280      	movs	r2, #128	; 0x80
 80123b4:	4680      	mov	r8, r0
 80123b6:	006b      	lsls	r3, r5, #1
 80123b8:	18ba      	adds	r2, r7, r2
 80123ba:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 80123bc:	6013      	str	r3, [r2, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 80123be:	454e      	cmp	r6, r9
 80123c0:	d00f      	beq.n	80123e2 <dofft+0x566>
			data[j][i] *= scaling_factor;
 80123c2:	2380      	movs	r3, #128	; 0x80
 80123c4:	18fb      	adds	r3, r7, r3
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	ce10      	ldmia	r6!, {r4}
 80123ca:	469c      	mov	ip, r3
 80123cc:	4464      	add	r4, ip
 80123ce:	8820      	ldrh	r0, [r4, #0]
 80123d0:	f7fd fa10 	bl	800f7f4 <__aeabi_i2f>
 80123d4:	4641      	mov	r1, r8
 80123d6:	f7fc fad9 	bl	800e98c <__aeabi_fmul>
 80123da:	f7fd f817 	bl	800f40c <__aeabi_f2uiz>
 80123de:	8020      	strh	r0, [r4, #0]
 80123e0:	e7ed      	b.n	80123be <dofft+0x542>
 80123e2:	3501      	adds	r5, #1
 80123e4:	e7dc      	b.n	80123a0 <dofft+0x524>
}
 80123e6:	4658      	mov	r0, fp
 80123e8:	46bd      	mov	sp, r7
 80123ea:	b023      	add	sp, #140	; 0x8c
 80123ec:	bc3c      	pop	{r2, r3, r4, r5}
 80123ee:	4690      	mov	r8, r2
 80123f0:	4699      	mov	r9, r3
 80123f2:	46a2      	mov	sl, r4
 80123f4:	46ab      	mov	fp, r5
 80123f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080123f8 <main>:
{
 80123f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123fa:	46de      	mov	lr, fp
 80123fc:	464e      	mov	r6, r9
 80123fe:	4645      	mov	r5, r8
 8012400:	4657      	mov	r7, sl
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012402:	2380      	movs	r3, #128	; 0x80
 8012404:	b5e0      	push	{r5, r6, r7, lr}
 8012406:	4df6      	ldr	r5, [pc, #984]	; (80127e0 <main+0x3e8>)
 8012408:	005b      	lsls	r3, r3, #1
 801240a:	682a      	ldr	r2, [r5, #0]
 801240c:	b097      	sub	sp, #92	; 0x5c
 801240e:	4313      	orrs	r3, r2
 8012410:	602b      	str	r3, [r5, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012412:	2000      	movs	r0, #0
 8012414:	f7f9 f8e2 	bl	800b5dc <HAL_InitTick>
 8012418:	4ef2      	ldr	r6, [pc, #968]	; (80127e4 <main+0x3ec>)
 801241a:	2800      	cmp	r0, #0
 801241c:	d116      	bne.n	801244c <main+0x54>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801241e:	2101      	movs	r1, #1
 8012420:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8012422:	430a      	orrs	r2, r1
 8012424:	6432      	str	r2, [r6, #64]	; 0x40
 8012426:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8012428:	400b      	ands	r3, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 801242a:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801242c:	9306      	str	r3, [sp, #24]
 801242e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8012430:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8012432:	0549      	lsls	r1, r1, #21
 8012434:	430a      	orrs	r2, r1
 8012436:	63f2      	str	r2, [r6, #60]	; 0x3c
 8012438:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 801243a:	4aeb      	ldr	r2, [pc, #940]	; (80127e8 <main+0x3f0>)
 801243c:	400b      	ands	r3, r1
 801243e:	9305      	str	r3, [sp, #20]
 8012440:	9b05      	ldr	r3, [sp, #20]
 8012442:	23c0      	movs	r3, #192	; 0xc0
 8012444:	6811      	ldr	r1, [r2, #0]
 8012446:	00db      	lsls	r3, r3, #3
 8012448:	430b      	orrs	r3, r1
 801244a:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 801244c:	f7ef fa4c 	bl	80018e8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012450:	2210      	movs	r2, #16
 8012452:	2100      	movs	r1, #0
 8012454:	a80d      	add	r0, sp, #52	; 0x34
 8012456:	f000 ff0d 	bl	8013274 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801245a:	2201      	movs	r2, #1
 801245c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801245e:	4690      	mov	r8, r2
 8012460:	4313      	orrs	r3, r2
 8012462:	6373      	str	r3, [r6, #52]	; 0x34
 8012464:	6b73      	ldr	r3, [r6, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012466:	ac0c      	add	r4, sp, #48	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012468:	4013      	ands	r3, r2
 801246a:	9304      	str	r3, [sp, #16]
 801246c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801246e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012470:	1892      	adds	r2, r2, r2
 8012472:	4313      	orrs	r3, r2
 8012474:	6373      	str	r3, [r6, #52]	; 0x34
 8012476:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012478:	4692      	mov	sl, r2
 801247a:	4013      	ands	r3, r2
 801247c:	9303      	str	r3, [sp, #12]
 801247e:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012480:	23a0      	movs	r3, #160	; 0xa0
 8012482:	05db      	lsls	r3, r3, #23
 8012484:	469b      	mov	fp, r3
 8012486:	2388      	movs	r3, #136	; 0x88
 8012488:	465a      	mov	r2, fp
 801248a:	005b      	lsls	r3, r3, #1
 801248c:	6293      	str	r3, [r2, #40]	; 0x28
 801248e:	4bd7      	ldr	r3, [pc, #860]	; (80127ec <main+0x3f4>)

  /*Configure GPIO pins : MISC_GPIO2_Pin MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012490:	4658      	mov	r0, fp
 8012492:	4699      	mov	r9, r3
 8012494:	464a      	mov	r2, r9
 8012496:	4bd6      	ldr	r3, [pc, #856]	; (80127f0 <main+0x3f8>)
 8012498:	0021      	movs	r1, r4
 801249a:	6293      	str	r3, [r2, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801249c:	4652      	mov	r2, sl
 801249e:	464b      	mov	r3, r9
 80124a0:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 80124a2:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80124a4:	60a2      	str	r2, [r4, #8]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 80124a6:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80124a8:	f7f9 fb9c 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_INT_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124ac:	4641      	mov	r1, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124ae:	2700      	movs	r7, #0
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 80124b0:	2210      	movs	r2, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124b2:	2303      	movs	r3, #3
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 80124b4:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124b6:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 80124b8:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 80124ba:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80124bc:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124be:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 80124c0:	f7f9 fb90 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N_Pin PMU_ENABLE_Pin PS_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124c4:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 80124c6:	4bcb      	ldr	r3, [pc, #812]	; (80127f4 <main+0x3fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124c8:	6061      	str	r1, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124ca:	4648      	mov	r0, r9
 80124cc:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 80124ce:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124d0:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124d2:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124d4:	f7f9 fb86 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADDRESS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80124d8:	4651      	mov	r1, sl
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 80124da:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80124dc:	60a1      	str	r1, [r4, #8]
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 80124de:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124e0:	0021      	movs	r1, r4
 80124e2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 80124e4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80124e6:	6067      	str	r7, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80124e8:	f7f9 fb7c 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124ec:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 80124ee:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80124f0:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 80124f2:	005b      	lsls	r3, r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124f4:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80124f6:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 80124f8:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124fa:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124fc:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80124fe:	f7f9 fb71 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8012502:	2308      	movs	r3, #8
 8012504:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012506:	4bbc      	ldr	r3, [pc, #752]	; (80127f8 <main+0x400>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8012508:	0021      	movs	r1, r4
 801250a:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801250c:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801250e:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8012510:	f7f9 fb68 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_CTRL_Pin */
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8012514:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012516:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8012518:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801251a:	4642      	mov	r2, r8
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 801251c:	0021      	movs	r1, r4
 801251e:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012520:	6062      	str	r2, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012522:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012524:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 8012526:	f7f9 fb5d 	bl	800bbe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 801252a:	2320      	movs	r3, #32
 801252c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801252e:	4bb3      	ldr	r3, [pc, #716]	; (80127fc <main+0x404>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8012530:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8012532:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012534:	4653      	mov	r3, sl
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8012536:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012538:	60a3      	str	r3, [r4, #8]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 801253a:	f7f9 fb53 	bl	800bbe4 <HAL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801253e:	20c1      	movs	r0, #193	; 0xc1
 8012540:	4baf      	ldr	r3, [pc, #700]	; (8012800 <main+0x408>)
 8012542:	0080      	lsls	r0, r0, #2
 8012544:	581a      	ldr	r2, [r3, r0]
 8012546:	49af      	ldr	r1, [pc, #700]	; (8012804 <main+0x40c>)
 8012548:	400a      	ands	r2, r1
 801254a:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801254c:	2240      	movs	r2, #64	; 0x40
 801254e:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012550:	581a      	ldr	r2, [r3, r0]
 8012552:	0212      	lsls	r2, r2, #8
 8012554:	0a12      	lsrs	r2, r2, #8
 8012556:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012558:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 801255a:	4640      	mov	r0, r8
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8012560:	4302      	orrs	r2, r0
 8012562:	63b2      	str	r2, [r6, #56]	; 0x38
 8012564:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8012566:	4002      	ands	r2, r0
 8012568:	9202      	str	r2, [sp, #8]
 801256a:	9a02      	ldr	r2, [sp, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801256c:	22c2      	movs	r2, #194	; 0xc2
 801256e:	0092      	lsls	r2, r2, #2
 8012570:	5899      	ldr	r1, [r3, r2]
 8012572:	48a5      	ldr	r0, [pc, #660]	; (8012808 <main+0x410>)
 8012574:	4001      	ands	r1, r0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012576:	2080      	movs	r0, #128	; 0x80
 8012578:	0080      	lsls	r0, r0, #2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801257a:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801257c:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801257e:	5898      	ldr	r0, [r3, r2]
 8012580:	49a0      	ldr	r1, [pc, #640]	; (8012804 <main+0x40c>)
 8012582:	4008      	ands	r0, r1
 8012584:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012586:	32f8      	adds	r2, #248	; 0xf8
 8012588:	601a      	str	r2, [r3, #0]
  hi2c1.Instance = I2C1;
 801258a:	4aa0      	ldr	r2, [pc, #640]	; (801280c <main+0x414>)
 801258c:	4693      	mov	fp, r2
 801258e:	4658      	mov	r0, fp
 8012590:	4a9f      	ldr	r2, [pc, #636]	; (8012810 <main+0x418>)
 8012592:	6442      	str	r2, [r0, #68]	; 0x44
  hi2c1.Init.Timing = 0x10707DBC;
 8012594:	4a9f      	ldr	r2, [pc, #636]	; (8012814 <main+0x41c>)
 8012596:	6482      	str	r2, [r0, #72]	; 0x48
  hi2c1.Init.OwnAddress1 = 164;
 8012598:	22a4      	movs	r2, #164	; 0xa4
 801259a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801259c:	465a      	mov	r2, fp
 801259e:	4640      	mov	r0, r8
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80125a0:	6557      	str	r7, [r2, #84]	; 0x54
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80125a2:	6510      	str	r0, [r2, #80]	; 0x50
  hi2c1.Init.OwnAddress2 = 0;
 80125a4:	6597      	str	r7, [r2, #88]	; 0x58
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80125a6:	65d7      	str	r7, [r2, #92]	; 0x5c
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80125a8:	6617      	str	r7, [r2, #96]	; 0x60
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80125aa:	6657      	str	r7, [r2, #100]	; 0x64
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80125ac:	3285      	adds	r2, #133	; 0x85
 80125ae:	7812      	ldrb	r2, [r2, #0]
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	b2d2      	uxtb	r2, r2
 80125b4:	9101      	str	r1, [sp, #4]
 80125b6:	42ba      	cmp	r2, r7
 80125b8:	d12c      	bne.n	8012614 <main+0x21c>
    hi2c->Lock = HAL_UNLOCKED;
 80125ba:	465b      	mov	r3, fp
 80125bc:	3384      	adds	r3, #132	; 0x84
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80125be:	60e2      	str	r2, [r4, #12]
 80125c0:	701a      	strb	r2, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125c2:	4652      	mov	r2, sl
 80125c4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80125c6:	0021      	movs	r1, r4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125c8:	4313      	orrs	r3, r2
 80125ca:	6373      	str	r3, [r6, #52]	; 0x34
 80125cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80125ce:	60a0      	str	r0, [r4, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125d0:	4013      	ands	r3, r2
 80125d2:	9308      	str	r3, [sp, #32]
 80125d4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80125d6:	23c0      	movs	r3, #192	; 0xc0
 80125d8:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80125da:	3bae      	subs	r3, #174	; 0xae
 80125dc:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80125de:	4643      	mov	r3, r8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80125e0:	4648      	mov	r0, r9
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80125e2:	3305      	adds	r3, #5
 80125e4:	6123      	str	r3, [r4, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80125e6:	f7f9 fafd 	bl	800bbe4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80125ea:	2180      	movs	r1, #128	; 0x80
 80125ec:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80125ee:	0389      	lsls	r1, r1, #14
 80125f0:	430a      	orrs	r2, r1
 80125f2:	63f2      	str	r2, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80125f4:	22c5      	movs	r2, #197	; 0xc5
 80125f6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80125f8:	0092      	lsls	r2, r2, #2
 80125fa:	400b      	ands	r3, r1
 80125fc:	9307      	str	r3, [sp, #28]
 80125fe:	9b07      	ldr	r3, [sp, #28]
 8012600:	9b00      	ldr	r3, [sp, #0]
 8012602:	9900      	ldr	r1, [sp, #0]
 8012604:	589b      	ldr	r3, [r3, r2]
 8012606:	021b      	lsls	r3, r3, #8
 8012608:	0a1b      	lsrs	r3, r3, #8
 801260a:	508b      	str	r3, [r1, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801260c:	2380      	movs	r3, #128	; 0x80
 801260e:	9a00      	ldr	r2, [sp, #0]
 8012610:	041b      	lsls	r3, r3, #16
 8012612:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8012614:	465b      	mov	r3, fp
 8012616:	2224      	movs	r2, #36	; 0x24
 8012618:	3385      	adds	r3, #133	; 0x85
 801261a:	701a      	strb	r2, [r3, #0]
  __HAL_I2C_DISABLE(hi2c);
 801261c:	465b      	mov	r3, fp
 801261e:	2101      	movs	r1, #1
 8012620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	438a      	bics	r2, r1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012626:	4659      	mov	r1, fp
  __HAL_I2C_DISABLE(hi2c);
 8012628:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801262a:	6c89      	ldr	r1, [r1, #72]	; 0x48
 801262c:	4a7a      	ldr	r2, [pc, #488]	; (8012818 <main+0x420>)
 801262e:	400a      	ands	r2, r1
 8012630:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012632:	6899      	ldr	r1, [r3, #8]
 8012634:	4a79      	ldr	r2, [pc, #484]	; (801281c <main+0x424>)
 8012636:	4011      	ands	r1, r2
 8012638:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801263a:	4659      	mov	r1, fp
 801263c:	6d08      	ldr	r0, [r1, #80]	; 0x50
 801263e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8012640:	468c      	mov	ip, r1
 8012642:	2801      	cmp	r0, #1
 8012644:	d000      	beq.n	8012648 <main+0x250>
 8012646:	e2d0      	b.n	8012bea <main+0x7f2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012648:	2180      	movs	r1, #128	; 0x80
 801264a:	4660      	mov	r0, ip
 801264c:	0209      	lsls	r1, r1, #8
 801264e:	4301      	orrs	r1, r0
 8012650:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012652:	6858      	ldr	r0, [r3, #4]
 8012654:	4972      	ldr	r1, [pc, #456]	; (8012820 <main+0x428>)
  hi2c->State = HAL_I2C_STATE_READY;
 8012656:	2720      	movs	r7, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012658:	4301      	orrs	r1, r0
 801265a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801265c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801265e:	4658      	mov	r0, fp
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012660:	400a      	ands	r2, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012662:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012664:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012666:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8012668:	6d89      	ldr	r1, [r1, #88]	; 0x58
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801266a:	3088      	adds	r0, #136	; 0x88
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801266c:	430a      	orrs	r2, r1
 801266e:	4659      	mov	r1, fp
 8012670:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8012672:	0209      	lsls	r1, r1, #8
 8012674:	430a      	orrs	r2, r1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012676:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012678:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801267a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 801267c:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801267e:	430a      	orrs	r2, r1
 8012680:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8012682:	2201      	movs	r2, #1
 8012684:	6819      	ldr	r1, [r3, #0]
 8012686:	4311      	orrs	r1, r2
 8012688:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801268a:	2100      	movs	r1, #0
 801268c:	6001      	str	r1, [r0, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 801268e:	4658      	mov	r0, fp
 8012690:	3085      	adds	r0, #133	; 0x85
 8012692:	7007      	strb	r7, [r0, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8012694:	465f      	mov	r7, fp
 8012696:	6779      	str	r1, [r7, #116]	; 0x74
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012698:	2786      	movs	r7, #134	; 0x86
 801269a:	445f      	add	r7, fp
 801269c:	7039      	strb	r1, [r7, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801269e:	7807      	ldrb	r7, [r0, #0]
 80126a0:	b2ff      	uxtb	r7, r7
 80126a2:	46bc      	mov	ip, r7
 80126a4:	2f20      	cmp	r7, #32
 80126a6:	d11c      	bne.n	80126e2 <main+0x2ea>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80126a8:	3764      	adds	r7, #100	; 0x64
 80126aa:	445f      	add	r7, fp
 80126ac:	46b9      	mov	r9, r7
 80126ae:	783f      	ldrb	r7, [r7, #0]
 80126b0:	4297      	cmp	r7, r2
 80126b2:	d016      	beq.n	80126e2 <main+0x2ea>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80126b4:	2724      	movs	r7, #36	; 0x24
 80126b6:	7007      	strb	r7, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80126b8:	681f      	ldr	r7, [r3, #0]
 80126ba:	4397      	bics	r7, r2
 80126bc:	601f      	str	r7, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80126be:	681f      	ldr	r7, [r3, #0]
 80126c0:	46b8      	mov	r8, r7
 80126c2:	4f58      	ldr	r7, [pc, #352]	; (8012824 <main+0x42c>)
 80126c4:	46ba      	mov	sl, r7
 80126c6:	4647      	mov	r7, r8
 80126c8:	4652      	mov	r2, sl
 80126ca:	4017      	ands	r7, r2
 80126cc:	601f      	str	r7, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

    __HAL_I2C_ENABLE(hi2c);
 80126ce:	2701      	movs	r7, #1
    hi2c->Instance->CR1 |= AnalogFilter;
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80126d4:	681a      	ldr	r2, [r3, #0]
 80126d6:	433a      	orrs	r2, r7
 80126d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80126da:	4662      	mov	r2, ip
 80126dc:	7002      	strb	r2, [r0, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80126de:	464a      	mov	r2, r9
 80126e0:	7011      	strb	r1, [r2, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80126e2:	4658      	mov	r0, fp
 80126e4:	3085      	adds	r0, #133	; 0x85
 80126e6:	7801      	ldrb	r1, [r0, #0]
 80126e8:	b2c9      	uxtb	r1, r1
 80126ea:	2920      	cmp	r1, #32
 80126ec:	d11e      	bne.n	801272c <main+0x334>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80126ee:	2284      	movs	r2, #132	; 0x84
 80126f0:	445a      	add	r2, fp
 80126f2:	4690      	mov	r8, r2
 80126f4:	7812      	ldrb	r2, [r2, #0]
 80126f6:	2a01      	cmp	r2, #1
 80126f8:	d018      	beq.n	801272c <main+0x334>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80126fa:	2224      	movs	r2, #36	; 0x24
 80126fc:	7002      	strb	r2, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	4694      	mov	ip, r2
 8012702:	2201      	movs	r2, #1
 8012704:	4667      	mov	r7, ip
 8012706:	4397      	bics	r7, r2
 8012708:	601f      	str	r7, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801270a:	681f      	ldr	r7, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);
 801270c:	4692      	mov	sl, r2
    tmpreg = hi2c->Instance->CR1;
 801270e:	46bc      	mov	ip, r7

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012710:	4f45      	ldr	r7, [pc, #276]	; (8012828 <main+0x430>)
 8012712:	46b9      	mov	r9, r7
 8012714:	4667      	mov	r7, ip
 8012716:	464a      	mov	r2, r9
 8012718:	4017      	ands	r7, r2

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801271a:	601f      	str	r7, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801271c:	4657      	mov	r7, sl
 801271e:	681a      	ldr	r2, [r3, #0]
 8012720:	4317      	orrs	r7, r2
 8012722:	601f      	str	r7, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012724:	4642      	mov	r2, r8
 8012726:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8012728:	7001      	strb	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 801272a:	7013      	strb	r3, [r2, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 801272c:	2228      	movs	r2, #40	; 0x28
 801272e:	2100      	movs	r1, #0
 8012730:	0020      	movs	r0, r4
 8012732:	f000 fd9f 	bl	8013274 <memset>
  hrtc.Instance = RTC;
 8012736:	4b3d      	ldr	r3, [pc, #244]	; (801282c <main+0x434>)
 8012738:	4a3d      	ldr	r2, [pc, #244]	; (8012830 <main+0x438>)
 801273a:	4698      	mov	r8, r3
 801273c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801273e:	4641      	mov	r1, r8
 8012740:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 31;
 8012742:	4640      	mov	r0, r8
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012744:	608b      	str	r3, [r1, #8]
  hrtc.Init.AsynchPrediv = 31;
 8012746:	211f      	movs	r1, #31
 8012748:	60c1      	str	r1, [r0, #12]
  hrtc.Init.SynchPrediv = 999;
 801274a:	493a      	ldr	r1, [pc, #232]	; (8012834 <main+0x43c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801274c:	6143      	str	r3, [r0, #20]
  hrtc.Init.SynchPrediv = 999;
 801274e:	6101      	str	r1, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012750:	2180      	movs	r1, #128	; 0x80
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8012752:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012754:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8012756:	6243      	str	r3, [r0, #36]	; 0x24
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012758:	4643      	mov	r3, r8
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801275a:	05c9      	lsls	r1, r1, #23
 801275c:	6201      	str	r1, [r0, #32]
 801275e:	3329      	adds	r3, #41	; 0x29
 8012760:	781b      	ldrb	r3, [r3, #0]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8012762:	4641      	mov	r1, r8
 8012764:	b2db      	uxtb	r3, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	d11d      	bne.n	80127a6 <main+0x3ae>
    hrtc->Lock = HAL_UNLOCKED;
 801276a:	3128      	adds	r1, #40	; 0x28
 801276c:	700b      	strb	r3, [r1, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 801276e:	2388      	movs	r3, #136	; 0x88
 8012770:	021b      	lsls	r3, r3, #8
 8012772:	6043      	str	r3, [r0, #4]
    __HAL_RCC_RTC_ENABLE();
 8012774:	2380      	movs	r3, #128	; 0x80
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012776:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8012778:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 801277a:	021b      	lsls	r3, r3, #8
 801277c:	430b      	orrs	r3, r1
 801277e:	65f3      	str	r3, [r6, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012780:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8012782:	00c0      	lsls	r0, r0, #3
 8012784:	4301      	orrs	r1, r0
 8012786:	63f1      	str	r1, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012788:	21c0      	movs	r1, #192	; 0xc0
 801278a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801278c:	0089      	lsls	r1, r1, #2
 801278e:	4003      	ands	r3, r0
 8012790:	9309      	str	r3, [sp, #36]	; 0x24
 8012792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012794:	9b00      	ldr	r3, [sp, #0]
 8012796:	481b      	ldr	r0, [pc, #108]	; (8012804 <main+0x40c>)
 8012798:	585b      	ldr	r3, [r3, r1]
 801279a:	4003      	ands	r3, r0
 801279c:	9800      	ldr	r0, [sp, #0]
 801279e:	5043      	str	r3, [r0, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127a0:	2304      	movs	r3, #4
 80127a2:	9900      	ldr	r1, [sp, #0]
 80127a4:	600b      	str	r3, [r1, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 80127a6:	4643      	mov	r3, r8
 80127a8:	2102      	movs	r1, #2
 80127aa:	3329      	adds	r3, #41	; 0x29
 80127ac:	7019      	strb	r1, [r3, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80127ae:	23ca      	movs	r3, #202	; 0xca
 80127b0:	6253      	str	r3, [r2, #36]	; 0x24
 80127b2:	3b77      	subs	r3, #119	; 0x77
 80127b4:	6253      	str	r3, [r2, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80127b6:	f7f8 fa39 	bl	800ac2c <RTC_EnterInitMode.constprop.118>
    if(status == HAL_OK)
 80127ba:	2800      	cmp	r0, #0
 80127bc:	d15c      	bne.n	8012878 <main+0x480>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80127be:	4643      	mov	r3, r8
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80127c0:	4640      	mov	r0, r8
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	491c      	ldr	r1, [pc, #112]	; (8012838 <main+0x440>)
 80127c6:	699a      	ldr	r2, [r3, #24]
 80127c8:	400a      	ands	r2, r1
 80127ca:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80127cc:	6882      	ldr	r2, [r0, #8]
 80127ce:	6940      	ldr	r0, [r0, #20]
 80127d0:	6999      	ldr	r1, [r3, #24]
 80127d2:	4302      	orrs	r2, r0
 80127d4:	4640      	mov	r0, r8
 80127d6:	69c0      	ldr	r0, [r0, #28]
 80127d8:	4302      	orrs	r2, r0
 80127da:	430a      	orrs	r2, r1
 80127dc:	e02e      	b.n	801283c <main+0x444>
 80127de:	46c0      	nop			; (mov r8, r8)
 80127e0:	40022000 	.word	0x40022000
 80127e4:	40021000 	.word	0x40021000
 80127e8:	40010000 	.word	0x40010000
 80127ec:	50000400 	.word	0x50000400
 80127f0:	00000211 	.word	0x00000211
 80127f4:	00000203 	.word	0x00000203
 80127f8:	10110000 	.word	0x10110000
 80127fc:	10310000 	.word	0x10310000
 8012800:	e000e100 	.word	0xe000e100
 8012804:	ff00ffff 	.word	0xff00ffff
 8012808:	ffff00ff 	.word	0xffff00ff
 801280c:	2000018c 	.word	0x2000018c
 8012810:	40005400 	.word	0x40005400
 8012814:	10707dbc 	.word	0x10707dbc
 8012818:	f0ffffff 	.word	0xf0ffffff
 801281c:	ffff7fff 	.word	0xffff7fff
 8012820:	02008000 	.word	0x02008000
 8012824:	ffffefff 	.word	0xffffefff
 8012828:	fffff0ff 	.word	0xfffff0ff
 801282c:	20000280 	.word	0x20000280
 8012830:	40002800 	.word	0x40002800
 8012834:	000003e7 	.word	0x000003e7
 8012838:	fb8fffbf 	.word	0xfb8fffbf
 801283c:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 801283e:	4642      	mov	r2, r8
 8012840:	6912      	ldr	r2, [r2, #16]
 8012842:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8012844:	4642      	mov	r2, r8
 8012846:	68d2      	ldr	r2, [r2, #12]
 8012848:	6919      	ldr	r1, [r3, #16]
 801284a:	0412      	lsls	r2, r2, #16
 801284c:	430a      	orrs	r2, r1
 801284e:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8012850:	f7f8 f9c4 	bl	800abdc <RTC_ExitInitMode.constprop.119>
      if (status == HAL_OK)
 8012854:	2800      	cmp	r0, #0
 8012856:	d10f      	bne.n	8012878 <main+0x480>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012858:	4643      	mov	r3, r8
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801285a:	4647      	mov	r7, r8
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	6993      	ldr	r3, [r2, #24]
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	08db      	lsrs	r3, r3, #3
 8012864:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012868:	6a3f      	ldr	r7, [r7, #32]
 801286a:	6991      	ldr	r1, [r2, #24]
 801286c:	433b      	orrs	r3, r7
 801286e:	4647      	mov	r7, r8
 8012870:	69bf      	ldr	r7, [r7, #24]
 8012872:	433b      	orrs	r3, r7
 8012874:	430b      	orrs	r3, r1
 8012876:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012878:	4643      	mov	r3, r8
 801287a:	22ff      	movs	r2, #255	; 0xff
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8012880:	2800      	cmp	r0, #0
 8012882:	d103      	bne.n	801288c <main+0x494>
      hrtc->State = HAL_RTC_STATE_READY;
 8012884:	4642      	mov	r2, r8
 8012886:	2101      	movs	r1, #1
 8012888:	3229      	adds	r2, #41	; 0x29
 801288a:	7011      	strb	r1, [r2, #0]
  __HAL_LOCK(hrtc);
 801288c:	4642      	mov	r2, r8
 801288e:	3228      	adds	r2, #40	; 0x28
 8012890:	7811      	ldrb	r1, [r2, #0]
 8012892:	2901      	cmp	r1, #1
 8012894:	d030      	beq.n	80128f8 <main+0x500>
 8012896:	2101      	movs	r1, #1
 8012898:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 801289a:	4642      	mov	r2, r8
 801289c:	1849      	adds	r1, r1, r1
 801289e:	3229      	adds	r2, #41	; 0x29
 80128a0:	7011      	strb	r1, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128a2:	22ca      	movs	r2, #202	; 0xca
 80128a4:	625a      	str	r2, [r3, #36]	; 0x24
 80128a6:	3a77      	subs	r2, #119	; 0x77
 80128a8:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80128aa:	f7f8 f9bf 	bl	800ac2c <RTC_EnterInitMode.constprop.118>
  if(status == HAL_OK)
 80128ae:	2800      	cmp	r0, #0
 80128b0:	d114      	bne.n	80128dc <main+0x4e4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80128b2:	4643      	mov	r3, r8
 80128b4:	681f      	ldr	r7, [r3, #0]
 80128b6:	69bb      	ldr	r3, [r7, #24]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80128b8:	f7f8 fddc 	bl	800b474 <RTC_ByteToBcd2>
 80128bc:	0002      	movs	r2, r0
 80128be:	0403      	lsls	r3, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80128c0:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80128c2:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80128c4:	4be0      	ldr	r3, [pc, #896]	; (8012c48 <main+0x850>)
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80128c6:	4310      	orrs	r0, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80128c8:	4018      	ands	r0, r3
 80128ca:	6038      	str	r0, [r7, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	4adf      	ldr	r2, [pc, #892]	; (8012c4c <main+0x854>)
 80128d0:	4013      	ands	r3, r2
 80128d2:	61bb      	str	r3, [r7, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80128d4:	69bb      	ldr	r3, [r7, #24]
 80128d6:	61bb      	str	r3, [r7, #24]
    status = RTC_ExitInitMode(hrtc);
 80128d8:	f7f8 f980 	bl	800abdc <RTC_ExitInitMode.constprop.119>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80128dc:	4643      	mov	r3, r8
 80128de:	22ff      	movs	r2, #255	; 0xff
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d103      	bne.n	80128f0 <main+0x4f8>
   hrtc->State = HAL_RTC_STATE_READY;
 80128e8:	4643      	mov	r3, r8
 80128ea:	3afe      	subs	r2, #254	; 0xfe
 80128ec:	3329      	adds	r3, #41	; 0x29
 80128ee:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80128f0:	4643      	mov	r3, r8
 80128f2:	2200      	movs	r2, #0
 80128f4:	3328      	adds	r3, #40	; 0x28
 80128f6:	701a      	strb	r2, [r3, #0]
 __HAL_LOCK(hrtc);
 80128f8:	4643      	mov	r3, r8
 80128fa:	3328      	adds	r3, #40	; 0x28
 80128fc:	781a      	ldrb	r2, [r3, #0]
 80128fe:	2a01      	cmp	r2, #1
 8012900:	d033      	beq.n	801296a <main+0x572>
 8012902:	2201      	movs	r2, #1
 8012904:	701a      	strb	r2, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012906:	4643      	mov	r3, r8
 __HAL_LOCK(hrtc);
 8012908:	4691      	mov	r9, r2
  hrtc->State = HAL_RTC_STATE_BUSY;
 801290a:	3329      	adds	r3, #41	; 0x29
 801290c:	1892      	adds	r2, r2, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801290e:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012910:	701a      	strb	r2, [r3, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012912:	f7f8 fdaf 	bl	800b474 <RTC_ByteToBcd2>
 8012916:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012918:	4648      	mov	r0, r9
 801291a:	f7f8 fdab 	bl	800b474 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801291e:	2380      	movs	r3, #128	; 0x80
 8012920:	019b      	lsls	r3, r3, #6
 8012922:	4303      	orrs	r3, r0
 8012924:	043f      	lsls	r7, r7, #16
 8012926:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012928:	4643      	mov	r3, r8
 801292a:	22ca      	movs	r2, #202	; 0xca
 801292c:	681b      	ldr	r3, [r3, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801292e:	0200      	lsls	r0, r0, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012930:	625a      	str	r2, [r3, #36]	; 0x24
 8012932:	3a77      	subs	r2, #119	; 0x77
 8012934:	625a      	str	r2, [r3, #36]	; 0x24
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012936:	4307      	orrs	r7, r0
  status = RTC_EnterInitMode(hrtc);
 8012938:	f7f8 f978 	bl	800ac2c <RTC_EnterInitMode.constprop.118>
  if(status == HAL_OK)
 801293c:	2800      	cmp	r0, #0
 801293e:	d106      	bne.n	801294e <main+0x556>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012940:	4643      	mov	r3, r8
 8012942:	48c3      	ldr	r0, [pc, #780]	; (8012c50 <main+0x858>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	4007      	ands	r7, r0
 8012948:	605f      	str	r7, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 801294a:	f7f8 f947 	bl	800abdc <RTC_ExitInitMode.constprop.119>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801294e:	4643      	mov	r3, r8
 8012950:	22ff      	movs	r2, #255	; 0xff
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8012956:	2800      	cmp	r0, #0
 8012958:	d103      	bne.n	8012962 <main+0x56a>
    hrtc->State = HAL_RTC_STATE_READY;
 801295a:	4643      	mov	r3, r8
 801295c:	3afe      	subs	r2, #254	; 0xfe
 801295e:	3329      	adds	r3, #41	; 0x29
 8012960:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8012962:	4643      	mov	r3, r8
 8012964:	2200      	movs	r2, #0
 8012966:	3328      	adds	r3, #40	; 0x28
 8012968:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Hours = 0;
 801296a:	2300      	movs	r3, #0
 801296c:	4698      	mov	r8, r3
 801296e:	8023      	strh	r3, [r4, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8012970:	70a3      	strb	r3, [r4, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8012972:	6063      	str	r3, [r4, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012974:	60e3      	str	r3, [r4, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012976:	6123      	str	r3, [r4, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8012978:	6163      	str	r3, [r4, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801297a:	61a3      	str	r3, [r4, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801297c:	61e3      	str	r3, [r4, #28]
  sAlarm.AlarmDateWeekDay = 1;
 801297e:	3301      	adds	r3, #1
 8012980:	4699      	mov	r9, r3
 8012982:	aa02      	add	r2, sp, #8
 8012984:	4694      	mov	ip, r2
 8012986:	464a      	mov	r2, r9
 8012988:	3328      	adds	r3, #40	; 0x28
 801298a:	4463      	add	r3, ip
 801298c:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 801298e:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8012990:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8012996:	f7f8 fd78 	bl	800b48a <HAL_RTC_SetAlarm_IT.constprop.142>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 801299a:	4641      	mov	r1, r8
 801299c:	48ad      	ldr	r0, [pc, #692]	; (8012c54 <main+0x85c>)
 801299e:	f7f7 ffc3 	bl	800a928 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.160>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 80129a2:	f7f7 ff81 	bl	800a8a8 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.161>
  hspi1.Instance = SPI1;
 80129a6:	4fac      	ldr	r7, [pc, #688]	; (8012c58 <main+0x860>)
 80129a8:	4bac      	ldr	r3, [pc, #688]	; (8012c5c <main+0x864>)
 80129aa:	603b      	str	r3, [r7, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80129ac:	2382      	movs	r3, #130	; 0x82
 80129ae:	005b      	lsls	r3, r3, #1
 80129b0:	607b      	str	r3, [r7, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80129b2:	4643      	mov	r3, r8
 80129b4:	60bb      	str	r3, [r7, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80129b6:	23e0      	movs	r3, #224	; 0xe0
 80129b8:	00db      	lsls	r3, r3, #3
 80129ba:	60fb      	str	r3, [r7, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80129bc:	4643      	mov	r3, r8
 80129be:	613b      	str	r3, [r7, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80129c0:	617b      	str	r3, [r7, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80129c2:	2380      	movs	r3, #128	; 0x80
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	61bb      	str	r3, [r7, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80129c8:	4643      	mov	r3, r8
 80129ca:	61fb      	str	r3, [r7, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80129cc:	623b      	str	r3, [r7, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80129ce:	627b      	str	r3, [r7, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80129d0:	62bb      	str	r3, [r7, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80129d2:	3307      	adds	r3, #7
 80129d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80129d6:	4643      	mov	r3, r8
 80129d8:	633b      	str	r3, [r7, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80129da:	3308      	adds	r3, #8
 80129dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_RESET)
 80129de:	003b      	movs	r3, r7
 80129e0:	335d      	adds	r3, #93	; 0x5d
 80129e2:	7819      	ldrb	r1, [r3, #0]
 80129e4:	b2c9      	uxtb	r1, r1
 80129e6:	4541      	cmp	r1, r8
 80129e8:	d122      	bne.n	8012a30 <main+0x638>
    hspi->Lock = HAL_UNLOCKED;
 80129ea:	003b      	movs	r3, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80129ec:	220c      	movs	r2, #12
 80129ee:	335c      	adds	r3, #92	; 0x5c
 80129f0:	a80e      	add	r0, sp, #56	; 0x38
 80129f2:	7019      	strb	r1, [r3, #0]
 80129f4:	f000 fc3e 	bl	8013274 <memset>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80129f8:	2180      	movs	r1, #128	; 0x80
 80129fa:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80129fc:	0149      	lsls	r1, r1, #5
 80129fe:	430a      	orrs	r2, r1
 8012a00:	6432      	str	r2, [r6, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a02:	464a      	mov	r2, r9
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012a04:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a06:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012a08:	400b      	ands	r3, r1
 8012a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a0e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a10:	0021      	movs	r1, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a12:	4313      	orrs	r3, r2
 8012a14:	6373      	str	r3, [r6, #52]	; 0x34
 8012a16:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a18:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a1a:	4013      	ands	r3, r2
 8012a1c:	930a      	str	r3, [sp, #40]	; 0x28
 8012a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8012a20:	23e0      	movs	r3, #224	; 0xe0
 8012a22:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a24:	3bde      	subs	r3, #222	; 0xde
 8012a26:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a28:	3301      	adds	r3, #1
 8012a2a:	60e3      	str	r3, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a2c:	f7f9 f8da 	bl	800bbe4 <HAL_GPIO_Init>
  hspi->State = HAL_SPI_STATE_BUSY;
 8012a30:	003b      	movs	r3, r7
 8012a32:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8012a34:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8012a36:	335d      	adds	r3, #93	; 0x5d
 8012a38:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_DISABLE(hspi);
 8012a3a:	683a      	ldr	r2, [r7, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a3c:	68f8      	ldr	r0, [r7, #12]
  __HAL_SPI_DISABLE(hspi);
 8012a3e:	6813      	ldr	r3, [r2, #0]
 8012a40:	438b      	bics	r3, r1
 8012a42:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a44:	23e0      	movs	r3, #224	; 0xe0
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	4298      	cmp	r0, r3
 8012a4a:	d900      	bls.n	8012a4e <main+0x656>
 8012a4c:	e17c      	b.n	8012d48 <main+0x950>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012a4e:	2480      	movs	r4, #128	; 0x80
 8012a50:	0164      	lsls	r4, r4, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012a52:	4298      	cmp	r0, r3
 8012a54:	d001      	beq.n	8012a5a <main+0x662>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012a56:	2300      	movs	r3, #0
 8012a58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8012a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <main+0x676>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012a60:	23e0      	movs	r3, #224	; 0xe0
 8012a62:	00db      	lsls	r3, r3, #3
 8012a64:	4298      	cmp	r0, r3
 8012a66:	d800      	bhi.n	8012a6a <main+0x672>
 8012a68:	e0cb      	b.n	8012c02 <main+0x80a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8012a6a:	2302      	movs	r3, #2
 8012a6c:	633b      	str	r3, [r7, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8012a6e:	68be      	ldr	r6, [r7, #8]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	69b9      	ldr	r1, [r7, #24]
 8012a74:	4333      	orrs	r3, r6
 8012a76:	693e      	ldr	r6, [r7, #16]
 8012a78:	4333      	orrs	r3, r6
 8012a7a:	697e      	ldr	r6, [r7, #20]
 8012a7c:	4333      	orrs	r3, r6
 8012a7e:	69fe      	ldr	r6, [r7, #28]
 8012a80:	4333      	orrs	r3, r6
 8012a82:	6a3e      	ldr	r6, [r7, #32]
 8012a84:	4333      	orrs	r3, r6
 8012a86:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8012a88:	4333      	orrs	r3, r6
 8012a8a:	2680      	movs	r6, #128	; 0x80
 8012a8c:	00b6      	lsls	r6, r6, #2
 8012a8e:	400e      	ands	r6, r1
 8012a90:	4333      	orrs	r3, r6
 8012a92:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8012a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a96:	0c09      	lsrs	r1, r1, #16
 8012a98:	4318      	orrs	r0, r3
 8012a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012a9c:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8012a9e:	4318      	orrs	r0, r3
 8012aa0:	2304      	movs	r3, #4
 8012aa2:	4019      	ands	r1, r3
 8012aa4:	4301      	orrs	r1, r0
 8012aa6:	430c      	orrs	r4, r1
 8012aa8:	6054      	str	r4, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012aaa:	69d3      	ldr	r3, [r2, #28]
 8012aac:	496c      	ldr	r1, [pc, #432]	; (8012c60 <main+0x868>)
  MX_USART1_UART_Init(115200);
 8012aae:	20e1      	movs	r0, #225	; 0xe1
 8012ab0:	400b      	ands	r3, r1
 8012ab2:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8012ab4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012ab6:	663e      	str	r6, [r7, #96]	; 0x60
 8012ab8:	0240      	lsls	r0, r0, #9
  hspi->State     = HAL_SPI_STATE_READY;
 8012aba:	375d      	adds	r7, #93	; 0x5d
 8012abc:	703b      	strb	r3, [r7, #0]
 8012abe:	469a      	mov	sl, r3
 8012ac0:	f7ee fe5c 	bl	800177c <MX_USART1_UART_Init>
  huart2.Instance = USART2;
 8012ac4:	4c67      	ldr	r4, [pc, #412]	; (8012c64 <main+0x86c>)
 8012ac6:	4b68      	ldr	r3, [pc, #416]	; (8012c68 <main+0x870>)
  __HAL_LOCK(huart);
 8012ac8:	0027      	movs	r7, r4
 8012aca:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 8012acc:	23e1      	movs	r3, #225	; 0xe1
 8012ace:	031b      	lsls	r3, r3, #12
 8012ad0:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8012ad2:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012ad4:	0020      	movs	r0, r4
 8012ad6:	377c      	adds	r7, #124	; 0x7c
  huart2.Init.Mode = UART_MODE_TX_RX;
 8012ad8:	6163      	str	r3, [r4, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8012ada:	60a6      	str	r6, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8012adc:	60e6      	str	r6, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8012ade:	6126      	str	r6, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012ae0:	61a6      	str	r6, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012ae2:	61e6      	str	r6, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012ae4:	6226      	str	r6, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012ae6:	6266      	str	r6, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012ae8:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8012aea:	f7f9 f95d 	bl	800bda8 <HAL_UART_Init.constprop.107>
 8012aee:	783b      	ldrb	r3, [r7, #0]
 8012af0:	4553      	cmp	r3, sl
 8012af2:	d01b      	beq.n	8012b2c <main+0x734>
 8012af4:	4653      	mov	r3, sl
 8012af6:	703b      	strb	r3, [r7, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012af8:	1d23      	adds	r3, r4, #4
 8012afa:	4698      	mov	r8, r3
 8012afc:	2324      	movs	r3, #36	; 0x24
 8012afe:	4642      	mov	r2, r8
  __HAL_UART_DISABLE(huart);
 8012b00:	4651      	mov	r1, sl
  huart->gState = HAL_UART_STATE_BUSY;
 8012b02:	67d3      	str	r3, [r2, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b04:	6822      	ldr	r2, [r4, #0]
  UARTEx_SetNbDataToProcess(huart);
 8012b06:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b08:	6813      	ldr	r3, [r2, #0]
 8012b0a:	4699      	mov	r9, r3
  __HAL_UART_DISABLE(huart);
 8012b0c:	6813      	ldr	r3, [r2, #0]
 8012b0e:	438b      	bics	r3, r1
 8012b10:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b12:	6893      	ldr	r3, [r2, #8]
 8012b14:	00db      	lsls	r3, r3, #3
 8012b16:	08db      	lsrs	r3, r3, #3
 8012b18:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8012b1a:	f7f8 fbe5 	bl	800b2e8 <UARTEx_SetNbDataToProcess.lto_priv.684>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b1e:	464a      	mov	r2, r9
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012b24:	2320      	movs	r3, #32
 8012b26:	4642      	mov	r2, r8
  __HAL_UNLOCK(huart);
 8012b28:	703e      	strb	r6, [r7, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012b2a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_LOCK(huart);
 8012b2c:	0026      	movs	r6, r4
 8012b2e:	367c      	adds	r6, #124	; 0x7c
 8012b30:	7833      	ldrb	r3, [r6, #0]
 8012b32:	2b01      	cmp	r3, #1
 8012b34:	d018      	beq.n	8012b68 <main+0x770>
  huart->gState = HAL_UART_STATE_BUSY;
 8012b36:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8012b38:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8012b3a:	1d27      	adds	r7, r4, #4
 8012b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b3e:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 8012b40:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b42:	681a      	ldr	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 8012b44:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b46:	4690      	mov	r8, r2
  __HAL_UART_DISABLE(huart);
 8012b48:	681a      	ldr	r2, [r3, #0]
 8012b4a:	438a      	bics	r2, r1
 8012b4c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012b4e:	689a      	ldr	r2, [r3, #8]
 8012b50:	4946      	ldr	r1, [pc, #280]	; (8012c6c <main+0x874>)
 8012b52:	400a      	ands	r2, r1
 8012b54:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8012b56:	f7f8 fbc7 	bl	800b2e8 <UARTEx_SetNbDataToProcess.lto_priv.684>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b5a:	4642      	mov	r2, r8
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012b60:	2320      	movs	r3, #32
 8012b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 8012b64:	2300      	movs	r3, #0
 8012b66:	7033      	strb	r3, [r6, #0]
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8012b68:	0020      	movs	r0, r4
 8012b6a:	f7f8 fbf1 	bl	800b350 <HAL_UARTEx_DisableFifoMode>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
  }
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8012b6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8012b70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8012b72:	6a2b      	ldr	r3, [r5, #32]
  *         @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 8012b74:	6a2c      	ldr	r4, [r5, #32]
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 8012b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AStartAddr += FLASH_BASE;

  pcrop = FLASH->PCROP1AER;
 8012b78:	6aab      	ldr	r3, [r5, #40]	; 0x28
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 8012b7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BStartAddr += FLASH_BASE;

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8012b7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
  uint32_t secmem = FLASH->SECR;
 8012b7e:	4b3c      	ldr	r3, [pc, #240]	; (8012c70 <main+0x878>)
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 8012b80:	20c0      	movs	r0, #192	; 0xc0
 8012b82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012b84:	2380      	movs	r3, #128	; 0x80
 8012b86:	0480      	lsls	r0, r0, #18
 8012b88:	4020      	ands	r0, r4
 8012b8a:	049b      	lsls	r3, r3, #18
 8012b8c:	4298      	cmp	r0, r3
 8012b8e:	d13b      	bne.n	8012c08 <main+0x810>
    printf("Boot config OK\n");
 8012b90:	4838      	ldr	r0, [pc, #224]	; (8012c74 <main+0x87c>)
 8012b92:	f002 fbb1 	bl	80152f8 <__wrap_puts>
  return uwTick;
 8012b96:	4a38      	ldr	r2, [pc, #224]	; (8012c78 <main+0x880>)
 8012b98:	6811      	ldr	r1, [r2, #0]
 8012b9a:	6813      	ldr	r3, [r2, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8012b9c:	1a5b      	subs	r3, r3, r1
 8012b9e:	2b0a      	cmp	r3, #10
 8012ba0:	d9fb      	bls.n	8012b9a <main+0x7a2>
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8012ba2:	2780      	movs	r7, #128	; 0x80
    RegInt_Init();
 8012ba4:	f7f0 ffc2 	bl	8003b2c <RegInt_Init>
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8012ba8:	2602      	movs	r6, #2
    initRSS();
 8012baa:	f7ee fbe1 	bl	8001370 <initRSS>
 8012bae:	00bf      	lsls	r7, r7, #2
	if (uart_state != 4){return;}
 8012bb0:	465b      	mov	r3, fp
 8012bb2:	3340      	adds	r3, #64	; 0x40
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b04      	cmp	r3, #4
 8012bb8:	d101      	bne.n	8012bbe <main+0x7c6>
 8012bba:	f7f1 f9ad 	bl	8003f18 <RegInt_parsecmd.part.9>
 8012bbe:	4c2f      	ldr	r4, [pc, #188]	; (8012c7c <main+0x884>)
 8012bc0:	4d2f      	ldr	r5, [pc, #188]	; (8012c80 <main+0x888>)
 8012bc2:	6823      	ldr	r3, [r4, #0]
 8012bc4:	46a8      	mov	r8, r5
 8012bc6:	43b3      	bics	r3, r6
 8012bc8:	6023      	str	r3, [r4, #0]
 8012bca:	696b      	ldr	r3, [r5, #20]
 8012bcc:	423b      	tst	r3, r7
 8012bce:	d000      	beq.n	8012bd2 <main+0x7da>
 8012bd0:	e0a4      	b.n	8012d1c <main+0x924>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8012bd2:	2104      	movs	r1, #4
 8012bd4:	4a2b      	ldr	r2, [pc, #172]	; (8012c84 <main+0x88c>)
 8012bd6:	6913      	ldr	r3, [r2, #16]
 8012bd8:	438b      	bics	r3, r1
 8012bda:	6113      	str	r3, [r2, #16]
    __SEV();
 8012bdc:	bf40      	sev
    __WFE();
 8012bde:	bf20      	wfe
    __WFE();
 8012be0:	bf20      	wfe
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	4333      	orrs	r3, r6
 8012be6:	6023      	str	r3, [r4, #0]
 8012be8:	e7e2      	b.n	8012bb0 <main+0x7b8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012bea:	2184      	movs	r1, #132	; 0x84
 8012bec:	4667      	mov	r7, ip
 8012bee:	0209      	lsls	r1, r1, #8
 8012bf0:	4339      	orrs	r1, r7
 8012bf2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012bf4:	2802      	cmp	r0, #2
 8012bf6:	d000      	beq.n	8012bfa <main+0x802>
 8012bf8:	e52b      	b.n	8012652 <main+0x25a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8012bfa:	2180      	movs	r1, #128	; 0x80
 8012bfc:	0109      	lsls	r1, r1, #4
 8012bfe:	6059      	str	r1, [r3, #4]
 8012c00:	e527      	b.n	8012652 <main+0x25a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8012c02:	2301      	movs	r3, #1
 8012c04:	633b      	str	r3, [r7, #48]	; 0x30
 8012c06:	e732      	b.n	8012a6e <main+0x676>
  printf("Enabling BOOT0\n");
 8012c08:	481f      	ldr	r0, [pc, #124]	; (8012c88 <main+0x890>)
 8012c0a:	f002 fb75 	bl	80152f8 <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 8012c0e:	491f      	ldr	r1, [pc, #124]	; (8012c8c <main+0x894>)
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012c10:	696b      	ldr	r3, [r5, #20]
 8012c12:	4021      	ands	r1, r4
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	db0b      	blt.n	8012c30 <main+0x838>
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8012c18:	2480      	movs	r4, #128	; 0x80
 8012c1a:	696b      	ldr	r3, [r5, #20]
 8012c1c:	05e4      	lsls	r4, r4, #23
 8012c1e:	4223      	tst	r3, r4
 8012c20:	d13c      	bne.n	8012c9c <main+0x8a4>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8012c22:	2380      	movs	r3, #128	; 0x80
 8012c24:	696a      	ldr	r2, [r5, #20]
 8012c26:	061b      	lsls	r3, r3, #24
 8012c28:	4313      	orrs	r3, r2
 8012c2a:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8012c2c:	696b      	ldr	r3, [r5, #20]
 8012c2e:	e006      	b.n	8012c3e <main+0x846>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012c30:	4b17      	ldr	r3, [pc, #92]	; (8012c90 <main+0x898>)
 8012c32:	60ab      	str	r3, [r5, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8012c34:	4b17      	ldr	r3, [pc, #92]	; (8012c94 <main+0x89c>)
 8012c36:	60ab      	str	r3, [r5, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012c38:	696b      	ldr	r3, [r5, #20]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	daec      	bge.n	8012c18 <main+0x820>
  printf("BOOT0 enable failed\n");
 8012c3e:	4816      	ldr	r0, [pc, #88]	; (8012c98 <main+0x8a0>)
 8012c40:	f002 fb5a 	bl	80152f8 <__wrap_puts>
 8012c44:	e7a7      	b.n	8012b96 <main+0x79e>
 8012c46:	46c0      	nop			; (mov r8, r8)
 8012c48:	007f7f7f 	.word	0x007f7f7f
 8012c4c:	fffbffff 	.word	0xfffbffff
 8012c50:	00ffff3f 	.word	0x00ffff3f
 8012c54:	0000ffff 	.word	0x0000ffff
 8012c58:	200002e8 	.word	0x200002e8
 8012c5c:	40013000 	.word	0x40013000
 8012c60:	fffff7ff 	.word	0xfffff7ff
 8012c64:	20000644 	.word	0x20000644
 8012c68:	40004400 	.word	0x40004400
 8012c6c:	f1ffffff 	.word	0xf1ffffff
 8012c70:	40022004 	.word	0x40022004
 8012c74:	0801c28a 	.word	0x0801c28a
 8012c78:	200002ac 	.word	0x200002ac
 8012c7c:	e000e010 	.word	0xe000e010
 8012c80:	40007000 	.word	0x40007000
 8012c84:	e000ed00 	.word	0xe000ed00
 8012c88:	0801c299 	.word	0x0801c299
 8012c8c:	3c4fff00 	.word	0x3c4fff00
 8012c90:	45670123 	.word	0x45670123
 8012c94:	cdef89ab 	.word	0xcdef89ab
 8012c98:	0801c2b9 	.word	0x0801c2b9
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8012c9c:	4b2e      	ldr	r3, [pc, #184]	; (8012d58 <main+0x960>)
 8012c9e:	60eb      	str	r3, [r5, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8012ca0:	4b2e      	ldr	r3, [pc, #184]	; (8012d5c <main+0x964>)
 8012ca2:	60eb      	str	r3, [r5, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8012ca4:	6968      	ldr	r0, [r5, #20]
 8012ca6:	4020      	ands	r0, r4
 8012ca8:	d1bb      	bne.n	8012c22 <main+0x82a>
  __HAL_LOCK(&pFlash);
 8012caa:	4c2d      	ldr	r4, [pc, #180]	; (8012d60 <main+0x968>)
 8012cac:	7823      	ldrb	r3, [r4, #0]
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	d02d      	beq.n	8012d0e <main+0x916>
 8012cb2:	2301      	movs	r3, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012cb4:	6060      	str	r0, [r4, #4]
  __HAL_LOCK(&pFlash);
 8012cb6:	7023      	strb	r3, [r4, #0]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8012cb8:	6a2b      	ldr	r3, [r5, #32]
 8012cba:	b2db      	uxtb	r3, r3
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8012cbc:	2baa      	cmp	r3, #170	; 0xaa
 8012cbe:	d002      	beq.n	8012cc6 <main+0x8ce>
 8012cc0:	2bcc      	cmp	r3, #204	; 0xcc
 8012cc2:	d000      	beq.n	8012cc6 <main+0x8ce>
    return (OB_RDP_LEVEL_1);
 8012cc4:	23bb      	movs	r3, #187	; 0xbb
  optr = FLASH->OPTR;
 8012cc6:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8012cc8:	4826      	ldr	r0, [pc, #152]	; (8012d64 <main+0x96c>)
 8012cca:	4002      	ands	r2, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8012ccc:	4311      	orrs	r1, r2
 8012cce:	2280      	movs	r2, #128	; 0x80
 8012cd0:	0492      	lsls	r2, r2, #18
 8012cd2:	430a      	orrs	r2, r1
 8012cd4:	4313      	orrs	r3, r2
 8012cd6:	622b      	str	r3, [r5, #32]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012cd8:	f7f7 ffcc 	bl	800ac74 <FLASH_WaitForLastOperation.constprop.105>
  if (status == HAL_OK)
 8012cdc:	2800      	cmp	r0, #0
 8012cde:	d10a      	bne.n	8012cf6 <main+0x8fe>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8012ce0:	2380      	movs	r3, #128	; 0x80
 8012ce2:	696a      	ldr	r2, [r5, #20]
 8012ce4:	029b      	lsls	r3, r3, #10
 8012ce6:	4313      	orrs	r3, r2
 8012ce8:	616b      	str	r3, [r5, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8012cea:	f7f7 ffc3 	bl	800ac74 <FLASH_WaitForLastOperation.constprop.105>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8012cee:	696b      	ldr	r3, [r5, #20]
 8012cf0:	4a1d      	ldr	r2, [pc, #116]	; (8012d68 <main+0x970>)
 8012cf2:	4013      	ands	r3, r2
 8012cf4:	616b      	str	r3, [r5, #20]
  __HAL_UNLOCK(&pFlash);
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	7023      	strb	r3, [r4, #0]
      if (result == HAL_OK)
 8012cfa:	4298      	cmp	r0, r3
 8012cfc:	d107      	bne.n	8012d0e <main+0x916>
        printf("Reset and reload\n");
 8012cfe:	481b      	ldr	r0, [pc, #108]	; (8012d6c <main+0x974>)
 8012d00:	f002 fafa 	bl	80152f8 <__wrap_puts>
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8012d04:	2380      	movs	r3, #128	; 0x80
 8012d06:	696a      	ldr	r2, [r5, #20]
 8012d08:	051b      	lsls	r3, r3, #20
 8012d0a:	4313      	orrs	r3, r2
 8012d0c:	616b      	str	r3, [r5, #20]
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8012d0e:	2380      	movs	r3, #128	; 0x80
 8012d10:	696a      	ldr	r2, [r5, #20]
 8012d12:	05db      	lsls	r3, r3, #23
 8012d14:	4313      	orrs	r3, r2
 8012d16:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8012d18:	696b      	ldr	r3, [r5, #20]
 8012d1a:	e782      	b.n	8012c22 <main+0x82a>
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8012d1c:	4b14      	ldr	r3, [pc, #80]	; (8012d70 <main+0x978>)
 8012d1e:	4915      	ldr	r1, [pc, #84]	; (8012d74 <main+0x97c>)
 8012d20:	6818      	ldr	r0, [r3, #0]
 8012d22:	2306      	movs	r3, #6
 8012d24:	4358      	muls	r0, r3
 8012d26:	f7fc f963 	bl	800eff0 <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8012d2a:	682b      	ldr	r3, [r5, #0]
 8012d2c:	4a12      	ldr	r2, [pc, #72]	; (8012d78 <main+0x980>)
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8012d2e:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8012d30:	4013      	ands	r3, r2
 8012d32:	602b      	str	r3, [r5, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8012d34:	4643      	mov	r3, r8
 8012d36:	695b      	ldr	r3, [r3, #20]
 8012d38:	423b      	tst	r3, r7
 8012d3a:	d100      	bne.n	8012d3e <main+0x946>
 8012d3c:	e749      	b.n	8012bd2 <main+0x7da>
  {
    if(wait_loop_index != 0U)
 8012d3e:	2800      	cmp	r0, #0
 8012d40:	d100      	bne.n	8012d44 <main+0x94c>
 8012d42:	e74e      	b.n	8012be2 <main+0x7ea>
    {
      wait_loop_index--;
 8012d44:	3801      	subs	r0, #1
 8012d46:	e7f5      	b.n	8012d34 <main+0x93c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012d48:	23f0      	movs	r3, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012d4a:	2400      	movs	r4, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012d4c:	011b      	lsls	r3, r3, #4
 8012d4e:	4298      	cmp	r0, r3
 8012d50:	d000      	beq.n	8012d54 <main+0x95c>
 8012d52:	e680      	b.n	8012a56 <main+0x65e>
 8012d54:	e681      	b.n	8012a5a <main+0x662>
 8012d56:	46c0      	nop			; (mov r8, r8)
 8012d58:	08192a3b 	.word	0x08192a3b
 8012d5c:	4c5d6e7f 	.word	0x4c5d6e7f
 8012d60:	20000350 	.word	0x20000350
 8012d64:	c0b00000 	.word	0xc0b00000
 8012d68:	fffdffff 	.word	0xfffdffff
 8012d6c:	0801c2a8 	.word	0x0801c2a8
 8012d70:	20000000 	.word	0x20000000
 8012d74:	000f4240 	.word	0x000f4240
 8012d78:	ffffbfff 	.word	0xffffbfff

08012d7c <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8012d7c:	b510      	push	{r4, lr}
 8012d7e:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8012d80:	4b03      	ldr	r3, [pc, #12]	; (8012d90 <_write+0x14>)
 8012d82:	b292      	uxth	r2, r2
 8012d84:	4803      	ldr	r0, [pc, #12]	; (8012d94 <_write+0x18>)
 8012d86:	f7f8 faff 	bl	800b388 <HAL_UART_Transmit>
	return len;
}
 8012d8a:	0020      	movs	r0, r4
 8012d8c:	bd10      	pop	{r4, pc}
 8012d8e:	46c0      	nop			; (mov r8, r8)
 8012d90:	0000ffff 	.word	0x0000ffff
 8012d94:	20000644 	.word	0x20000644

08012d98 <Reset_Handler>:
 8012d98:	480d      	ldr	r0, [pc, #52]	; (8012dd0 <LoopForever+0x2>)
 8012d9a:	4685      	mov	sp, r0
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	e003      	b.n	8012da8 <LoopCopyDataInit>

08012da0 <CopyDataInit>:
 8012da0:	4b0c      	ldr	r3, [pc, #48]	; (8012dd4 <LoopForever+0x6>)
 8012da2:	585b      	ldr	r3, [r3, r1]
 8012da4:	5043      	str	r3, [r0, r1]
 8012da6:	3104      	adds	r1, #4

08012da8 <LoopCopyDataInit>:
 8012da8:	480b      	ldr	r0, [pc, #44]	; (8012dd8 <LoopForever+0xa>)
 8012daa:	4b0c      	ldr	r3, [pc, #48]	; (8012ddc <LoopForever+0xe>)
 8012dac:	1842      	adds	r2, r0, r1
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d3f6      	bcc.n	8012da0 <CopyDataInit>
 8012db2:	4a0b      	ldr	r2, [pc, #44]	; (8012de0 <LoopForever+0x12>)
 8012db4:	e002      	b.n	8012dbc <LoopFillZerobss>

08012db6 <FillZerobss>:
 8012db6:	2300      	movs	r3, #0
 8012db8:	6013      	str	r3, [r2, #0]
 8012dba:	3204      	adds	r2, #4

08012dbc <LoopFillZerobss>:
 8012dbc:	4b09      	ldr	r3, [pc, #36]	; (8012de4 <LoopForever+0x16>)
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d3f9      	bcc.n	8012db6 <FillZerobss>
 8012dc2:	f7f0 ff27 	bl	8003c14 <SystemInit>
 8012dc6:	f000 fa31 	bl	801322c <__libc_init_array>
 8012dca:	f7ff fb15 	bl	80123f8 <main>

08012dce <LoopForever>:
 8012dce:	e7fe      	b.n	8012dce <LoopForever>
 8012dd0:	20009000 	.word	0x20009000
 8012dd4:	0801ec48 	.word	0x0801ec48
 8012dd8:	20000000 	.word	0x20000000
 8012ddc:	20000070 	.word	0x20000070
 8012de0:	20000070 	.word	0x20000070
 8012de4:	200006d4 	.word	0x200006d4

08012de8 <ADC1_COMP_IRQHandler>:
 8012de8:	e7fe      	b.n	8012de8 <ADC1_COMP_IRQHandler>
	...

08012dec <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012dec:	4b0b      	ldr	r3, [pc, #44]	; (8012e1c <_sbrk+0x30>)
 8012dee:	490c      	ldr	r1, [pc, #48]	; (8012e20 <_sbrk+0x34>)
{
 8012df0:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012df2:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012df4:	4b0b      	ldr	r3, [pc, #44]	; (8012e24 <_sbrk+0x38>)
{
 8012df6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	2800      	cmp	r0, #0
 8012dfc:	d101      	bne.n	8012e02 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8012dfe:	480a      	ldr	r0, [pc, #40]	; (8012e28 <_sbrk+0x3c>)
 8012e00:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012e02:	6818      	ldr	r0, [r3, #0]
 8012e04:	1882      	adds	r2, r0, r2
 8012e06:	428a      	cmp	r2, r1
 8012e08:	d906      	bls.n	8012e18 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8012e0a:	f000 f869 	bl	8012ee0 <__errno>
 8012e0e:	230c      	movs	r3, #12
 8012e10:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8012e12:	2001      	movs	r0, #1
 8012e14:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8012e16:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8012e18:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8012e1a:	e7fc      	b.n	8012e16 <_sbrk+0x2a>
 8012e1c:	00001400 	.word	0x00001400
 8012e20:	20009000 	.word	0x20009000
 8012e24:	20000638 	.word	0x20000638
 8012e28:	200006d8 	.word	0x200006d8

08012e2c <__ieee754_sqrtf>:
 8012e2c:	492a      	ldr	r1, [pc, #168]	; (8012ed8 <__ieee754_sqrtf+0xac>)
 8012e2e:	0043      	lsls	r3, r0, #1
 8012e30:	b570      	push	{r4, r5, r6, lr}
 8012e32:	0002      	movs	r2, r0
 8012e34:	1c04      	adds	r4, r0, #0
 8012e36:	085b      	lsrs	r3, r3, #1
 8012e38:	428b      	cmp	r3, r1
 8012e3a:	d83b      	bhi.n	8012eb4 <__ieee754_sqrtf+0x88>
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d038      	beq.n	8012eb2 <__ieee754_sqrtf+0x86>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	db3e      	blt.n	8012ec2 <__ieee754_sqrtf+0x96>
 8012e44:	4925      	ldr	r1, [pc, #148]	; (8012edc <__ieee754_sqrtf+0xb0>)
 8012e46:	15c6      	asrs	r6, r0, #23
 8012e48:	428b      	cmp	r3, r1
 8012e4a:	d80b      	bhi.n	8012e64 <__ieee754_sqrtf+0x38>
 8012e4c:	2080      	movs	r0, #128	; 0x80
 8012e4e:	0400      	lsls	r0, r0, #16
 8012e50:	4220      	tst	r0, r4
 8012e52:	d13d      	bne.n	8012ed0 <__ieee754_sqrtf+0xa4>
 8012e54:	2300      	movs	r3, #0
 8012e56:	e000      	b.n	8012e5a <__ieee754_sqrtf+0x2e>
 8012e58:	000b      	movs	r3, r1
 8012e5a:	0052      	lsls	r2, r2, #1
 8012e5c:	1c59      	adds	r1, r3, #1
 8012e5e:	4202      	tst	r2, r0
 8012e60:	d0fa      	beq.n	8012e58 <__ieee754_sqrtf+0x2c>
 8012e62:	1af6      	subs	r6, r6, r3
 8012e64:	2380      	movs	r3, #128	; 0x80
 8012e66:	0252      	lsls	r2, r2, #9
 8012e68:	041b      	lsls	r3, r3, #16
 8012e6a:	0a52      	lsrs	r2, r2, #9
 8012e6c:	431a      	orrs	r2, r3
 8012e6e:	3e7f      	subs	r6, #127	; 0x7f
 8012e70:	0053      	lsls	r3, r2, #1
 8012e72:	07f1      	lsls	r1, r6, #31
 8012e74:	d500      	bpl.n	8012e78 <__ieee754_sqrtf+0x4c>
 8012e76:	0093      	lsls	r3, r2, #2
 8012e78:	2280      	movs	r2, #128	; 0x80
 8012e7a:	1070      	asrs	r0, r6, #1
 8012e7c:	2119      	movs	r1, #25
 8012e7e:	2600      	movs	r6, #0
 8012e80:	2500      	movs	r5, #0
 8012e82:	0452      	lsls	r2, r2, #17
 8012e84:	18ac      	adds	r4, r5, r2
 8012e86:	429c      	cmp	r4, r3
 8012e88:	dc02      	bgt.n	8012e90 <__ieee754_sqrtf+0x64>
 8012e8a:	18a5      	adds	r5, r4, r2
 8012e8c:	1b1b      	subs	r3, r3, r4
 8012e8e:	18b6      	adds	r6, r6, r2
 8012e90:	3901      	subs	r1, #1
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	0852      	lsrs	r2, r2, #1
 8012e96:	2900      	cmp	r1, #0
 8012e98:	d1f4      	bne.n	8012e84 <__ieee754_sqrtf+0x58>
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <__ieee754_sqrtf+0x78>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	3601      	adds	r6, #1
 8012ea2:	439e      	bics	r6, r3
 8012ea4:	23fc      	movs	r3, #252	; 0xfc
 8012ea6:	059b      	lsls	r3, r3, #22
 8012ea8:	469c      	mov	ip, r3
 8012eaa:	1076      	asrs	r6, r6, #1
 8012eac:	4466      	add	r6, ip
 8012eae:	05c0      	lsls	r0, r0, #23
 8012eb0:	1980      	adds	r0, r0, r6
 8012eb2:	bd70      	pop	{r4, r5, r6, pc}
 8012eb4:	1c01      	adds	r1, r0, #0
 8012eb6:	f7fb fd69 	bl	800e98c <__aeabi_fmul>
 8012eba:	1c21      	adds	r1, r4, #0
 8012ebc:	f7fb faba 	bl	800e434 <__aeabi_fadd>
 8012ec0:	e7f7      	b.n	8012eb2 <__ieee754_sqrtf+0x86>
 8012ec2:	1c01      	adds	r1, r0, #0
 8012ec4:	f7fb fe94 	bl	800ebf0 <__aeabi_fsub>
 8012ec8:	1c01      	adds	r1, r0, #0
 8012eca:	f7fb fc4d 	bl	800e768 <__aeabi_fdiv>
 8012ece:	e7f0      	b.n	8012eb2 <__ieee754_sqrtf+0x86>
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	425b      	negs	r3, r3
 8012ed4:	e7c5      	b.n	8012e62 <__ieee754_sqrtf+0x36>
 8012ed6:	46c0      	nop			; (mov r8, r8)
 8012ed8:	7f7fffff 	.word	0x7f7fffff
 8012edc:	007fffff 	.word	0x007fffff

08012ee0 <__errno>:
 8012ee0:	4b01      	ldr	r3, [pc, #4]	; (8012ee8 <__errno+0x8>)
 8012ee2:	6818      	ldr	r0, [r3, #0]
 8012ee4:	4770      	bx	lr
 8012ee6:	46c0      	nop			; (mov r8, r8)
 8012ee8:	20000008 	.word	0x20000008

08012eec <__sflush_r>:
 8012eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012eee:	898a      	ldrh	r2, [r1, #12]
 8012ef0:	0005      	movs	r5, r0
 8012ef2:	000c      	movs	r4, r1
 8012ef4:	0713      	lsls	r3, r2, #28
 8012ef6:	d460      	bmi.n	8012fba <__sflush_r+0xce>
 8012ef8:	684b      	ldr	r3, [r1, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	dc04      	bgt.n	8012f08 <__sflush_r+0x1c>
 8012efe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	dc01      	bgt.n	8012f08 <__sflush_r+0x1c>
 8012f04:	2000      	movs	r0, #0
 8012f06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012f08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012f0a:	2f00      	cmp	r7, #0
 8012f0c:	d0fa      	beq.n	8012f04 <__sflush_r+0x18>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	682e      	ldr	r6, [r5, #0]
 8012f12:	602b      	str	r3, [r5, #0]
 8012f14:	2380      	movs	r3, #128	; 0x80
 8012f16:	015b      	lsls	r3, r3, #5
 8012f18:	6a21      	ldr	r1, [r4, #32]
 8012f1a:	401a      	ands	r2, r3
 8012f1c:	d034      	beq.n	8012f88 <__sflush_r+0x9c>
 8012f1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f20:	89a3      	ldrh	r3, [r4, #12]
 8012f22:	075b      	lsls	r3, r3, #29
 8012f24:	d506      	bpl.n	8012f34 <__sflush_r+0x48>
 8012f26:	6863      	ldr	r3, [r4, #4]
 8012f28:	1ac0      	subs	r0, r0, r3
 8012f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <__sflush_r+0x48>
 8012f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f32:	1ac0      	subs	r0, r0, r3
 8012f34:	0002      	movs	r2, r0
 8012f36:	6a21      	ldr	r1, [r4, #32]
 8012f38:	2300      	movs	r3, #0
 8012f3a:	0028      	movs	r0, r5
 8012f3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012f3e:	47b8      	blx	r7
 8012f40:	89a1      	ldrh	r1, [r4, #12]
 8012f42:	1c43      	adds	r3, r0, #1
 8012f44:	d106      	bne.n	8012f54 <__sflush_r+0x68>
 8012f46:	682b      	ldr	r3, [r5, #0]
 8012f48:	2b1d      	cmp	r3, #29
 8012f4a:	d830      	bhi.n	8012fae <__sflush_r+0xc2>
 8012f4c:	4a2b      	ldr	r2, [pc, #172]	; (8012ffc <__sflush_r+0x110>)
 8012f4e:	40da      	lsrs	r2, r3
 8012f50:	07d3      	lsls	r3, r2, #31
 8012f52:	d52c      	bpl.n	8012fae <__sflush_r+0xc2>
 8012f54:	2300      	movs	r3, #0
 8012f56:	6063      	str	r3, [r4, #4]
 8012f58:	6923      	ldr	r3, [r4, #16]
 8012f5a:	6023      	str	r3, [r4, #0]
 8012f5c:	04cb      	lsls	r3, r1, #19
 8012f5e:	d505      	bpl.n	8012f6c <__sflush_r+0x80>
 8012f60:	1c43      	adds	r3, r0, #1
 8012f62:	d102      	bne.n	8012f6a <__sflush_r+0x7e>
 8012f64:	682b      	ldr	r3, [r5, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d100      	bne.n	8012f6c <__sflush_r+0x80>
 8012f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8012f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f6e:	602e      	str	r6, [r5, #0]
 8012f70:	2900      	cmp	r1, #0
 8012f72:	d0c7      	beq.n	8012f04 <__sflush_r+0x18>
 8012f74:	0023      	movs	r3, r4
 8012f76:	3344      	adds	r3, #68	; 0x44
 8012f78:	4299      	cmp	r1, r3
 8012f7a:	d002      	beq.n	8012f82 <__sflush_r+0x96>
 8012f7c:	0028      	movs	r0, r5
 8012f7e:	f000 f981 	bl	8013284 <_free_r>
 8012f82:	2000      	movs	r0, #0
 8012f84:	6360      	str	r0, [r4, #52]	; 0x34
 8012f86:	e7be      	b.n	8012f06 <__sflush_r+0x1a>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	0028      	movs	r0, r5
 8012f8c:	47b8      	blx	r7
 8012f8e:	1c43      	adds	r3, r0, #1
 8012f90:	d1c6      	bne.n	8012f20 <__sflush_r+0x34>
 8012f92:	682b      	ldr	r3, [r5, #0]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d0c3      	beq.n	8012f20 <__sflush_r+0x34>
 8012f98:	2b1d      	cmp	r3, #29
 8012f9a:	d001      	beq.n	8012fa0 <__sflush_r+0xb4>
 8012f9c:	2b16      	cmp	r3, #22
 8012f9e:	d101      	bne.n	8012fa4 <__sflush_r+0xb8>
 8012fa0:	602e      	str	r6, [r5, #0]
 8012fa2:	e7af      	b.n	8012f04 <__sflush_r+0x18>
 8012fa4:	2340      	movs	r3, #64	; 0x40
 8012fa6:	89a2      	ldrh	r2, [r4, #12]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	81a3      	strh	r3, [r4, #12]
 8012fac:	e7ab      	b.n	8012f06 <__sflush_r+0x1a>
 8012fae:	2340      	movs	r3, #64	; 0x40
 8012fb0:	430b      	orrs	r3, r1
 8012fb2:	2001      	movs	r0, #1
 8012fb4:	81a3      	strh	r3, [r4, #12]
 8012fb6:	4240      	negs	r0, r0
 8012fb8:	e7a5      	b.n	8012f06 <__sflush_r+0x1a>
 8012fba:	690f      	ldr	r7, [r1, #16]
 8012fbc:	2f00      	cmp	r7, #0
 8012fbe:	d0a1      	beq.n	8012f04 <__sflush_r+0x18>
 8012fc0:	680b      	ldr	r3, [r1, #0]
 8012fc2:	600f      	str	r7, [r1, #0]
 8012fc4:	1bdb      	subs	r3, r3, r7
 8012fc6:	9301      	str	r3, [sp, #4]
 8012fc8:	2300      	movs	r3, #0
 8012fca:	0792      	lsls	r2, r2, #30
 8012fcc:	d100      	bne.n	8012fd0 <__sflush_r+0xe4>
 8012fce:	694b      	ldr	r3, [r1, #20]
 8012fd0:	60a3      	str	r3, [r4, #8]
 8012fd2:	9b01      	ldr	r3, [sp, #4]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	dc00      	bgt.n	8012fda <__sflush_r+0xee>
 8012fd8:	e794      	b.n	8012f04 <__sflush_r+0x18>
 8012fda:	9b01      	ldr	r3, [sp, #4]
 8012fdc:	003a      	movs	r2, r7
 8012fde:	6a21      	ldr	r1, [r4, #32]
 8012fe0:	0028      	movs	r0, r5
 8012fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fe4:	47b0      	blx	r6
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	dc03      	bgt.n	8012ff2 <__sflush_r+0x106>
 8012fea:	2340      	movs	r3, #64	; 0x40
 8012fec:	89a2      	ldrh	r2, [r4, #12]
 8012fee:	4313      	orrs	r3, r2
 8012ff0:	e7df      	b.n	8012fb2 <__sflush_r+0xc6>
 8012ff2:	9b01      	ldr	r3, [sp, #4]
 8012ff4:	183f      	adds	r7, r7, r0
 8012ff6:	1a1b      	subs	r3, r3, r0
 8012ff8:	9301      	str	r3, [sp, #4]
 8012ffa:	e7ea      	b.n	8012fd2 <__sflush_r+0xe6>
 8012ffc:	20400001 	.word	0x20400001

08013000 <_fflush_r>:
 8013000:	690b      	ldr	r3, [r1, #16]
 8013002:	b570      	push	{r4, r5, r6, lr}
 8013004:	0005      	movs	r5, r0
 8013006:	000c      	movs	r4, r1
 8013008:	2b00      	cmp	r3, #0
 801300a:	d101      	bne.n	8013010 <_fflush_r+0x10>
 801300c:	2000      	movs	r0, #0
 801300e:	bd70      	pop	{r4, r5, r6, pc}
 8013010:	2800      	cmp	r0, #0
 8013012:	d004      	beq.n	801301e <_fflush_r+0x1e>
 8013014:	6983      	ldr	r3, [r0, #24]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <_fflush_r+0x1e>
 801301a:	f000 f873 	bl	8013104 <__sinit>
 801301e:	4b0b      	ldr	r3, [pc, #44]	; (801304c <_fflush_r+0x4c>)
 8013020:	429c      	cmp	r4, r3
 8013022:	d109      	bne.n	8013038 <_fflush_r+0x38>
 8013024:	686c      	ldr	r4, [r5, #4]
 8013026:	220c      	movs	r2, #12
 8013028:	5ea3      	ldrsh	r3, [r4, r2]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d0ee      	beq.n	801300c <_fflush_r+0xc>
 801302e:	0021      	movs	r1, r4
 8013030:	0028      	movs	r0, r5
 8013032:	f7ff ff5b 	bl	8012eec <__sflush_r>
 8013036:	e7ea      	b.n	801300e <_fflush_r+0xe>
 8013038:	4b05      	ldr	r3, [pc, #20]	; (8013050 <_fflush_r+0x50>)
 801303a:	429c      	cmp	r4, r3
 801303c:	d101      	bne.n	8013042 <_fflush_r+0x42>
 801303e:	68ac      	ldr	r4, [r5, #8]
 8013040:	e7f1      	b.n	8013026 <_fflush_r+0x26>
 8013042:	4b04      	ldr	r3, [pc, #16]	; (8013054 <_fflush_r+0x54>)
 8013044:	429c      	cmp	r4, r3
 8013046:	d1ee      	bne.n	8013026 <_fflush_r+0x26>
 8013048:	68ec      	ldr	r4, [r5, #12]
 801304a:	e7ec      	b.n	8013026 <_fflush_r+0x26>
 801304c:	0801e9e8 	.word	0x0801e9e8
 8013050:	0801ea08 	.word	0x0801ea08
 8013054:	0801e9c8 	.word	0x0801e9c8

08013058 <fflush>:
 8013058:	b510      	push	{r4, lr}
 801305a:	1e01      	subs	r1, r0, #0
 801305c:	d105      	bne.n	801306a <fflush+0x12>
 801305e:	4b05      	ldr	r3, [pc, #20]	; (8013074 <fflush+0x1c>)
 8013060:	4905      	ldr	r1, [pc, #20]	; (8013078 <fflush+0x20>)
 8013062:	6818      	ldr	r0, [r3, #0]
 8013064:	f000 f8c0 	bl	80131e8 <_fwalk_reent>
 8013068:	bd10      	pop	{r4, pc}
 801306a:	4b04      	ldr	r3, [pc, #16]	; (801307c <fflush+0x24>)
 801306c:	6818      	ldr	r0, [r3, #0]
 801306e:	f7ff ffc7 	bl	8013000 <_fflush_r>
 8013072:	e7f9      	b.n	8013068 <fflush+0x10>
 8013074:	0801ea28 	.word	0x0801ea28
 8013078:	08013001 	.word	0x08013001
 801307c:	20000008 	.word	0x20000008

08013080 <std>:
 8013080:	2300      	movs	r3, #0
 8013082:	b510      	push	{r4, lr}
 8013084:	0004      	movs	r4, r0
 8013086:	6003      	str	r3, [r0, #0]
 8013088:	6043      	str	r3, [r0, #4]
 801308a:	6083      	str	r3, [r0, #8]
 801308c:	8181      	strh	r1, [r0, #12]
 801308e:	6643      	str	r3, [r0, #100]	; 0x64
 8013090:	81c2      	strh	r2, [r0, #14]
 8013092:	6103      	str	r3, [r0, #16]
 8013094:	6143      	str	r3, [r0, #20]
 8013096:	6183      	str	r3, [r0, #24]
 8013098:	0019      	movs	r1, r3
 801309a:	2208      	movs	r2, #8
 801309c:	305c      	adds	r0, #92	; 0x5c
 801309e:	f000 f8e9 	bl	8013274 <memset>
 80130a2:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <std+0x38>)
 80130a4:	6224      	str	r4, [r4, #32]
 80130a6:	6263      	str	r3, [r4, #36]	; 0x24
 80130a8:	4b04      	ldr	r3, [pc, #16]	; (80130bc <std+0x3c>)
 80130aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80130ac:	4b04      	ldr	r3, [pc, #16]	; (80130c0 <std+0x40>)
 80130ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130b0:	4b04      	ldr	r3, [pc, #16]	; (80130c4 <std+0x44>)
 80130b2:	6323      	str	r3, [r4, #48]	; 0x30
 80130b4:	bd10      	pop	{r4, pc}
 80130b6:	46c0      	nop			; (mov r8, r8)
 80130b8:	080133f9 	.word	0x080133f9
 80130bc:	08013421 	.word	0x08013421
 80130c0:	08013459 	.word	0x08013459
 80130c4:	08013485 	.word	0x08013485

080130c8 <_cleanup_r>:
 80130c8:	b510      	push	{r4, lr}
 80130ca:	4902      	ldr	r1, [pc, #8]	; (80130d4 <_cleanup_r+0xc>)
 80130cc:	f000 f88c 	bl	80131e8 <_fwalk_reent>
 80130d0:	bd10      	pop	{r4, pc}
 80130d2:	46c0      	nop			; (mov r8, r8)
 80130d4:	08013001 	.word	0x08013001

080130d8 <__sfmoreglue>:
 80130d8:	b570      	push	{r4, r5, r6, lr}
 80130da:	2568      	movs	r5, #104	; 0x68
 80130dc:	1e4a      	subs	r2, r1, #1
 80130de:	4355      	muls	r5, r2
 80130e0:	000e      	movs	r6, r1
 80130e2:	0029      	movs	r1, r5
 80130e4:	3174      	adds	r1, #116	; 0x74
 80130e6:	f000 f917 	bl	8013318 <_malloc_r>
 80130ea:	1e04      	subs	r4, r0, #0
 80130ec:	d008      	beq.n	8013100 <__sfmoreglue+0x28>
 80130ee:	2100      	movs	r1, #0
 80130f0:	002a      	movs	r2, r5
 80130f2:	6001      	str	r1, [r0, #0]
 80130f4:	6046      	str	r6, [r0, #4]
 80130f6:	300c      	adds	r0, #12
 80130f8:	60a0      	str	r0, [r4, #8]
 80130fa:	3268      	adds	r2, #104	; 0x68
 80130fc:	f000 f8ba 	bl	8013274 <memset>
 8013100:	0020      	movs	r0, r4
 8013102:	bd70      	pop	{r4, r5, r6, pc}

08013104 <__sinit>:
 8013104:	6983      	ldr	r3, [r0, #24]
 8013106:	b513      	push	{r0, r1, r4, lr}
 8013108:	0004      	movs	r4, r0
 801310a:	2b00      	cmp	r3, #0
 801310c:	d128      	bne.n	8013160 <__sinit+0x5c>
 801310e:	6483      	str	r3, [r0, #72]	; 0x48
 8013110:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013112:	6503      	str	r3, [r0, #80]	; 0x50
 8013114:	4b13      	ldr	r3, [pc, #76]	; (8013164 <__sinit+0x60>)
 8013116:	4a14      	ldr	r2, [pc, #80]	; (8013168 <__sinit+0x64>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6282      	str	r2, [r0, #40]	; 0x28
 801311c:	9301      	str	r3, [sp, #4]
 801311e:	4298      	cmp	r0, r3
 8013120:	d101      	bne.n	8013126 <__sinit+0x22>
 8013122:	2301      	movs	r3, #1
 8013124:	6183      	str	r3, [r0, #24]
 8013126:	0020      	movs	r0, r4
 8013128:	f000 f820 	bl	801316c <__sfp>
 801312c:	6060      	str	r0, [r4, #4]
 801312e:	0020      	movs	r0, r4
 8013130:	f000 f81c 	bl	801316c <__sfp>
 8013134:	60a0      	str	r0, [r4, #8]
 8013136:	0020      	movs	r0, r4
 8013138:	f000 f818 	bl	801316c <__sfp>
 801313c:	2200      	movs	r2, #0
 801313e:	60e0      	str	r0, [r4, #12]
 8013140:	2104      	movs	r1, #4
 8013142:	6860      	ldr	r0, [r4, #4]
 8013144:	f7ff ff9c 	bl	8013080 <std>
 8013148:	2201      	movs	r2, #1
 801314a:	2109      	movs	r1, #9
 801314c:	68a0      	ldr	r0, [r4, #8]
 801314e:	f7ff ff97 	bl	8013080 <std>
 8013152:	2202      	movs	r2, #2
 8013154:	2112      	movs	r1, #18
 8013156:	68e0      	ldr	r0, [r4, #12]
 8013158:	f7ff ff92 	bl	8013080 <std>
 801315c:	2301      	movs	r3, #1
 801315e:	61a3      	str	r3, [r4, #24]
 8013160:	bd13      	pop	{r0, r1, r4, pc}
 8013162:	46c0      	nop			; (mov r8, r8)
 8013164:	0801ea28 	.word	0x0801ea28
 8013168:	080130c9 	.word	0x080130c9

0801316c <__sfp>:
 801316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316e:	4b1c      	ldr	r3, [pc, #112]	; (80131e0 <__sfp+0x74>)
 8013170:	0007      	movs	r7, r0
 8013172:	681e      	ldr	r6, [r3, #0]
 8013174:	69b3      	ldr	r3, [r6, #24]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d102      	bne.n	8013180 <__sfp+0x14>
 801317a:	0030      	movs	r0, r6
 801317c:	f7ff ffc2 	bl	8013104 <__sinit>
 8013180:	3648      	adds	r6, #72	; 0x48
 8013182:	68b4      	ldr	r4, [r6, #8]
 8013184:	6873      	ldr	r3, [r6, #4]
 8013186:	3b01      	subs	r3, #1
 8013188:	d504      	bpl.n	8013194 <__sfp+0x28>
 801318a:	6833      	ldr	r3, [r6, #0]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d007      	beq.n	80131a0 <__sfp+0x34>
 8013190:	6836      	ldr	r6, [r6, #0]
 8013192:	e7f6      	b.n	8013182 <__sfp+0x16>
 8013194:	220c      	movs	r2, #12
 8013196:	5ea5      	ldrsh	r5, [r4, r2]
 8013198:	2d00      	cmp	r5, #0
 801319a:	d00d      	beq.n	80131b8 <__sfp+0x4c>
 801319c:	3468      	adds	r4, #104	; 0x68
 801319e:	e7f2      	b.n	8013186 <__sfp+0x1a>
 80131a0:	2104      	movs	r1, #4
 80131a2:	0038      	movs	r0, r7
 80131a4:	f7ff ff98 	bl	80130d8 <__sfmoreglue>
 80131a8:	6030      	str	r0, [r6, #0]
 80131aa:	2800      	cmp	r0, #0
 80131ac:	d1f0      	bne.n	8013190 <__sfp+0x24>
 80131ae:	230c      	movs	r3, #12
 80131b0:	0004      	movs	r4, r0
 80131b2:	603b      	str	r3, [r7, #0]
 80131b4:	0020      	movs	r0, r4
 80131b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131b8:	0020      	movs	r0, r4
 80131ba:	4b0a      	ldr	r3, [pc, #40]	; (80131e4 <__sfp+0x78>)
 80131bc:	6665      	str	r5, [r4, #100]	; 0x64
 80131be:	6025      	str	r5, [r4, #0]
 80131c0:	6065      	str	r5, [r4, #4]
 80131c2:	60a5      	str	r5, [r4, #8]
 80131c4:	60e3      	str	r3, [r4, #12]
 80131c6:	6125      	str	r5, [r4, #16]
 80131c8:	6165      	str	r5, [r4, #20]
 80131ca:	61a5      	str	r5, [r4, #24]
 80131cc:	2208      	movs	r2, #8
 80131ce:	0029      	movs	r1, r5
 80131d0:	305c      	adds	r0, #92	; 0x5c
 80131d2:	f000 f84f 	bl	8013274 <memset>
 80131d6:	6365      	str	r5, [r4, #52]	; 0x34
 80131d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80131da:	64a5      	str	r5, [r4, #72]	; 0x48
 80131dc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80131de:	e7e9      	b.n	80131b4 <__sfp+0x48>
 80131e0:	0801ea28 	.word	0x0801ea28
 80131e4:	ffff0001 	.word	0xffff0001

080131e8 <_fwalk_reent>:
 80131e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80131ea:	0004      	movs	r4, r0
 80131ec:	0007      	movs	r7, r0
 80131ee:	2600      	movs	r6, #0
 80131f0:	9101      	str	r1, [sp, #4]
 80131f2:	3448      	adds	r4, #72	; 0x48
 80131f4:	2c00      	cmp	r4, #0
 80131f6:	d101      	bne.n	80131fc <_fwalk_reent+0x14>
 80131f8:	0030      	movs	r0, r6
 80131fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80131fc:	6863      	ldr	r3, [r4, #4]
 80131fe:	68a5      	ldr	r5, [r4, #8]
 8013200:	9300      	str	r3, [sp, #0]
 8013202:	9b00      	ldr	r3, [sp, #0]
 8013204:	3b01      	subs	r3, #1
 8013206:	9300      	str	r3, [sp, #0]
 8013208:	d501      	bpl.n	801320e <_fwalk_reent+0x26>
 801320a:	6824      	ldr	r4, [r4, #0]
 801320c:	e7f2      	b.n	80131f4 <_fwalk_reent+0xc>
 801320e:	89ab      	ldrh	r3, [r5, #12]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d908      	bls.n	8013226 <_fwalk_reent+0x3e>
 8013214:	220e      	movs	r2, #14
 8013216:	5eab      	ldrsh	r3, [r5, r2]
 8013218:	3301      	adds	r3, #1
 801321a:	d004      	beq.n	8013226 <_fwalk_reent+0x3e>
 801321c:	0029      	movs	r1, r5
 801321e:	0038      	movs	r0, r7
 8013220:	9b01      	ldr	r3, [sp, #4]
 8013222:	4798      	blx	r3
 8013224:	4306      	orrs	r6, r0
 8013226:	3568      	adds	r5, #104	; 0x68
 8013228:	e7eb      	b.n	8013202 <_fwalk_reent+0x1a>
	...

0801322c <__libc_init_array>:
 801322c:	b570      	push	{r4, r5, r6, lr}
 801322e:	2600      	movs	r6, #0
 8013230:	4d0c      	ldr	r5, [pc, #48]	; (8013264 <__libc_init_array+0x38>)
 8013232:	4c0d      	ldr	r4, [pc, #52]	; (8013268 <__libc_init_array+0x3c>)
 8013234:	1b64      	subs	r4, r4, r5
 8013236:	10a4      	asrs	r4, r4, #2
 8013238:	42a6      	cmp	r6, r4
 801323a:	d109      	bne.n	8013250 <__libc_init_array+0x24>
 801323c:	2600      	movs	r6, #0
 801323e:	f002 fc59 	bl	8015af4 <_init>
 8013242:	4d0a      	ldr	r5, [pc, #40]	; (801326c <__libc_init_array+0x40>)
 8013244:	4c0a      	ldr	r4, [pc, #40]	; (8013270 <__libc_init_array+0x44>)
 8013246:	1b64      	subs	r4, r4, r5
 8013248:	10a4      	asrs	r4, r4, #2
 801324a:	42a6      	cmp	r6, r4
 801324c:	d105      	bne.n	801325a <__libc_init_array+0x2e>
 801324e:	bd70      	pop	{r4, r5, r6, pc}
 8013250:	00b3      	lsls	r3, r6, #2
 8013252:	58eb      	ldr	r3, [r5, r3]
 8013254:	4798      	blx	r3
 8013256:	3601      	adds	r6, #1
 8013258:	e7ee      	b.n	8013238 <__libc_init_array+0xc>
 801325a:	00b3      	lsls	r3, r6, #2
 801325c:	58eb      	ldr	r3, [r5, r3]
 801325e:	4798      	blx	r3
 8013260:	3601      	adds	r6, #1
 8013262:	e7f2      	b.n	801324a <__libc_init_array+0x1e>
 8013264:	0801ec40 	.word	0x0801ec40
 8013268:	0801ec40 	.word	0x0801ec40
 801326c:	0801ec40 	.word	0x0801ec40
 8013270:	0801ec44 	.word	0x0801ec44

08013274 <memset>:
 8013274:	0003      	movs	r3, r0
 8013276:	1812      	adds	r2, r2, r0
 8013278:	4293      	cmp	r3, r2
 801327a:	d100      	bne.n	801327e <memset+0xa>
 801327c:	4770      	bx	lr
 801327e:	7019      	strb	r1, [r3, #0]
 8013280:	3301      	adds	r3, #1
 8013282:	e7f9      	b.n	8013278 <memset+0x4>

08013284 <_free_r>:
 8013284:	b570      	push	{r4, r5, r6, lr}
 8013286:	0005      	movs	r5, r0
 8013288:	2900      	cmp	r1, #0
 801328a:	d010      	beq.n	80132ae <_free_r+0x2a>
 801328c:	1f0c      	subs	r4, r1, #4
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	da00      	bge.n	8013296 <_free_r+0x12>
 8013294:	18e4      	adds	r4, r4, r3
 8013296:	0028      	movs	r0, r5
 8013298:	f000 f934 	bl	8013504 <__malloc_lock>
 801329c:	4a1d      	ldr	r2, [pc, #116]	; (8013314 <_free_r+0x90>)
 801329e:	6813      	ldr	r3, [r2, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d105      	bne.n	80132b0 <_free_r+0x2c>
 80132a4:	6063      	str	r3, [r4, #4]
 80132a6:	6014      	str	r4, [r2, #0]
 80132a8:	0028      	movs	r0, r5
 80132aa:	f000 f92c 	bl	8013506 <__malloc_unlock>
 80132ae:	bd70      	pop	{r4, r5, r6, pc}
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	d909      	bls.n	80132c8 <_free_r+0x44>
 80132b4:	6821      	ldr	r1, [r4, #0]
 80132b6:	1860      	adds	r0, r4, r1
 80132b8:	4283      	cmp	r3, r0
 80132ba:	d1f3      	bne.n	80132a4 <_free_r+0x20>
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	1841      	adds	r1, r0, r1
 80132c2:	6021      	str	r1, [r4, #0]
 80132c4:	e7ee      	b.n	80132a4 <_free_r+0x20>
 80132c6:	0013      	movs	r3, r2
 80132c8:	685a      	ldr	r2, [r3, #4]
 80132ca:	2a00      	cmp	r2, #0
 80132cc:	d001      	beq.n	80132d2 <_free_r+0x4e>
 80132ce:	42a2      	cmp	r2, r4
 80132d0:	d9f9      	bls.n	80132c6 <_free_r+0x42>
 80132d2:	6819      	ldr	r1, [r3, #0]
 80132d4:	1858      	adds	r0, r3, r1
 80132d6:	42a0      	cmp	r0, r4
 80132d8:	d10b      	bne.n	80132f2 <_free_r+0x6e>
 80132da:	6820      	ldr	r0, [r4, #0]
 80132dc:	1809      	adds	r1, r1, r0
 80132de:	1858      	adds	r0, r3, r1
 80132e0:	6019      	str	r1, [r3, #0]
 80132e2:	4282      	cmp	r2, r0
 80132e4:	d1e0      	bne.n	80132a8 <_free_r+0x24>
 80132e6:	6810      	ldr	r0, [r2, #0]
 80132e8:	6852      	ldr	r2, [r2, #4]
 80132ea:	1841      	adds	r1, r0, r1
 80132ec:	6019      	str	r1, [r3, #0]
 80132ee:	605a      	str	r2, [r3, #4]
 80132f0:	e7da      	b.n	80132a8 <_free_r+0x24>
 80132f2:	42a0      	cmp	r0, r4
 80132f4:	d902      	bls.n	80132fc <_free_r+0x78>
 80132f6:	230c      	movs	r3, #12
 80132f8:	602b      	str	r3, [r5, #0]
 80132fa:	e7d5      	b.n	80132a8 <_free_r+0x24>
 80132fc:	6821      	ldr	r1, [r4, #0]
 80132fe:	1860      	adds	r0, r4, r1
 8013300:	4282      	cmp	r2, r0
 8013302:	d103      	bne.n	801330c <_free_r+0x88>
 8013304:	6810      	ldr	r0, [r2, #0]
 8013306:	6852      	ldr	r2, [r2, #4]
 8013308:	1841      	adds	r1, r0, r1
 801330a:	6021      	str	r1, [r4, #0]
 801330c:	6062      	str	r2, [r4, #4]
 801330e:	605c      	str	r4, [r3, #4]
 8013310:	e7ca      	b.n	80132a8 <_free_r+0x24>
 8013312:	46c0      	nop			; (mov r8, r8)
 8013314:	2000063c 	.word	0x2000063c

08013318 <_malloc_r>:
 8013318:	2303      	movs	r3, #3
 801331a:	b570      	push	{r4, r5, r6, lr}
 801331c:	1ccd      	adds	r5, r1, #3
 801331e:	439d      	bics	r5, r3
 8013320:	3508      	adds	r5, #8
 8013322:	0006      	movs	r6, r0
 8013324:	2d0c      	cmp	r5, #12
 8013326:	d21e      	bcs.n	8013366 <_malloc_r+0x4e>
 8013328:	250c      	movs	r5, #12
 801332a:	42a9      	cmp	r1, r5
 801332c:	d81d      	bhi.n	801336a <_malloc_r+0x52>
 801332e:	0030      	movs	r0, r6
 8013330:	f000 f8e8 	bl	8013504 <__malloc_lock>
 8013334:	4a25      	ldr	r2, [pc, #148]	; (80133cc <_malloc_r+0xb4>)
 8013336:	6814      	ldr	r4, [r2, #0]
 8013338:	0021      	movs	r1, r4
 801333a:	2900      	cmp	r1, #0
 801333c:	d119      	bne.n	8013372 <_malloc_r+0x5a>
 801333e:	4c24      	ldr	r4, [pc, #144]	; (80133d0 <_malloc_r+0xb8>)
 8013340:	6823      	ldr	r3, [r4, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d103      	bne.n	801334e <_malloc_r+0x36>
 8013346:	0030      	movs	r0, r6
 8013348:	f000 f844 	bl	80133d4 <_sbrk_r>
 801334c:	6020      	str	r0, [r4, #0]
 801334e:	0029      	movs	r1, r5
 8013350:	0030      	movs	r0, r6
 8013352:	f000 f83f 	bl	80133d4 <_sbrk_r>
 8013356:	1c43      	adds	r3, r0, #1
 8013358:	d12b      	bne.n	80133b2 <_malloc_r+0x9a>
 801335a:	230c      	movs	r3, #12
 801335c:	0030      	movs	r0, r6
 801335e:	6033      	str	r3, [r6, #0]
 8013360:	f000 f8d1 	bl	8013506 <__malloc_unlock>
 8013364:	e003      	b.n	801336e <_malloc_r+0x56>
 8013366:	2d00      	cmp	r5, #0
 8013368:	dadf      	bge.n	801332a <_malloc_r+0x12>
 801336a:	230c      	movs	r3, #12
 801336c:	6033      	str	r3, [r6, #0]
 801336e:	2000      	movs	r0, #0
 8013370:	bd70      	pop	{r4, r5, r6, pc}
 8013372:	680b      	ldr	r3, [r1, #0]
 8013374:	1b5b      	subs	r3, r3, r5
 8013376:	d419      	bmi.n	80133ac <_malloc_r+0x94>
 8013378:	2b0b      	cmp	r3, #11
 801337a:	d903      	bls.n	8013384 <_malloc_r+0x6c>
 801337c:	600b      	str	r3, [r1, #0]
 801337e:	18cc      	adds	r4, r1, r3
 8013380:	6025      	str	r5, [r4, #0]
 8013382:	e003      	b.n	801338c <_malloc_r+0x74>
 8013384:	684b      	ldr	r3, [r1, #4]
 8013386:	428c      	cmp	r4, r1
 8013388:	d10d      	bne.n	80133a6 <_malloc_r+0x8e>
 801338a:	6013      	str	r3, [r2, #0]
 801338c:	0030      	movs	r0, r6
 801338e:	f000 f8ba 	bl	8013506 <__malloc_unlock>
 8013392:	0020      	movs	r0, r4
 8013394:	2207      	movs	r2, #7
 8013396:	300b      	adds	r0, #11
 8013398:	1d23      	adds	r3, r4, #4
 801339a:	4390      	bics	r0, r2
 801339c:	1ac3      	subs	r3, r0, r3
 801339e:	d0e7      	beq.n	8013370 <_malloc_r+0x58>
 80133a0:	425a      	negs	r2, r3
 80133a2:	50e2      	str	r2, [r4, r3]
 80133a4:	e7e4      	b.n	8013370 <_malloc_r+0x58>
 80133a6:	6063      	str	r3, [r4, #4]
 80133a8:	000c      	movs	r4, r1
 80133aa:	e7ef      	b.n	801338c <_malloc_r+0x74>
 80133ac:	000c      	movs	r4, r1
 80133ae:	6849      	ldr	r1, [r1, #4]
 80133b0:	e7c3      	b.n	801333a <_malloc_r+0x22>
 80133b2:	2303      	movs	r3, #3
 80133b4:	1cc4      	adds	r4, r0, #3
 80133b6:	439c      	bics	r4, r3
 80133b8:	42a0      	cmp	r0, r4
 80133ba:	d0e1      	beq.n	8013380 <_malloc_r+0x68>
 80133bc:	1a21      	subs	r1, r4, r0
 80133be:	0030      	movs	r0, r6
 80133c0:	f000 f808 	bl	80133d4 <_sbrk_r>
 80133c4:	1c43      	adds	r3, r0, #1
 80133c6:	d1db      	bne.n	8013380 <_malloc_r+0x68>
 80133c8:	e7c7      	b.n	801335a <_malloc_r+0x42>
 80133ca:	46c0      	nop			; (mov r8, r8)
 80133cc:	2000063c 	.word	0x2000063c
 80133d0:	20000640 	.word	0x20000640

080133d4 <_sbrk_r>:
 80133d4:	2300      	movs	r3, #0
 80133d6:	b570      	push	{r4, r5, r6, lr}
 80133d8:	4c06      	ldr	r4, [pc, #24]	; (80133f4 <_sbrk_r+0x20>)
 80133da:	0005      	movs	r5, r0
 80133dc:	0008      	movs	r0, r1
 80133de:	6023      	str	r3, [r4, #0]
 80133e0:	f7ff fd04 	bl	8012dec <_sbrk>
 80133e4:	1c43      	adds	r3, r0, #1
 80133e6:	d103      	bne.n	80133f0 <_sbrk_r+0x1c>
 80133e8:	6823      	ldr	r3, [r4, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d000      	beq.n	80133f0 <_sbrk_r+0x1c>
 80133ee:	602b      	str	r3, [r5, #0]
 80133f0:	bd70      	pop	{r4, r5, r6, pc}
 80133f2:	46c0      	nop			; (mov r8, r8)
 80133f4:	200006d0 	.word	0x200006d0

080133f8 <__sread>:
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	000c      	movs	r4, r1
 80133fc:	250e      	movs	r5, #14
 80133fe:	5f49      	ldrsh	r1, [r1, r5]
 8013400:	f000 f882 	bl	8013508 <_read_r>
 8013404:	2800      	cmp	r0, #0
 8013406:	db03      	blt.n	8013410 <__sread+0x18>
 8013408:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801340a:	181b      	adds	r3, r3, r0
 801340c:	6563      	str	r3, [r4, #84]	; 0x54
 801340e:	bd70      	pop	{r4, r5, r6, pc}
 8013410:	89a3      	ldrh	r3, [r4, #12]
 8013412:	4a02      	ldr	r2, [pc, #8]	; (801341c <__sread+0x24>)
 8013414:	4013      	ands	r3, r2
 8013416:	81a3      	strh	r3, [r4, #12]
 8013418:	e7f9      	b.n	801340e <__sread+0x16>
 801341a:	46c0      	nop			; (mov r8, r8)
 801341c:	ffffefff 	.word	0xffffefff

08013420 <__swrite>:
 8013420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013422:	001f      	movs	r7, r3
 8013424:	898b      	ldrh	r3, [r1, #12]
 8013426:	0005      	movs	r5, r0
 8013428:	000c      	movs	r4, r1
 801342a:	0016      	movs	r6, r2
 801342c:	05db      	lsls	r3, r3, #23
 801342e:	d505      	bpl.n	801343c <__swrite+0x1c>
 8013430:	230e      	movs	r3, #14
 8013432:	5ec9      	ldrsh	r1, [r1, r3]
 8013434:	2200      	movs	r2, #0
 8013436:	2302      	movs	r3, #2
 8013438:	f000 f850 	bl	80134dc <_lseek_r>
 801343c:	89a3      	ldrh	r3, [r4, #12]
 801343e:	4a05      	ldr	r2, [pc, #20]	; (8013454 <__swrite+0x34>)
 8013440:	0028      	movs	r0, r5
 8013442:	4013      	ands	r3, r2
 8013444:	81a3      	strh	r3, [r4, #12]
 8013446:	0032      	movs	r2, r6
 8013448:	230e      	movs	r3, #14
 801344a:	5ee1      	ldrsh	r1, [r4, r3]
 801344c:	003b      	movs	r3, r7
 801344e:	f000 f81f 	bl	8013490 <_write_r>
 8013452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013454:	ffffefff 	.word	0xffffefff

08013458 <__sseek>:
 8013458:	b570      	push	{r4, r5, r6, lr}
 801345a:	000c      	movs	r4, r1
 801345c:	250e      	movs	r5, #14
 801345e:	5f49      	ldrsh	r1, [r1, r5]
 8013460:	f000 f83c 	bl	80134dc <_lseek_r>
 8013464:	89a3      	ldrh	r3, [r4, #12]
 8013466:	1c42      	adds	r2, r0, #1
 8013468:	d103      	bne.n	8013472 <__sseek+0x1a>
 801346a:	4a05      	ldr	r2, [pc, #20]	; (8013480 <__sseek+0x28>)
 801346c:	4013      	ands	r3, r2
 801346e:	81a3      	strh	r3, [r4, #12]
 8013470:	bd70      	pop	{r4, r5, r6, pc}
 8013472:	2280      	movs	r2, #128	; 0x80
 8013474:	0152      	lsls	r2, r2, #5
 8013476:	4313      	orrs	r3, r2
 8013478:	81a3      	strh	r3, [r4, #12]
 801347a:	6560      	str	r0, [r4, #84]	; 0x54
 801347c:	e7f8      	b.n	8013470 <__sseek+0x18>
 801347e:	46c0      	nop			; (mov r8, r8)
 8013480:	ffffefff 	.word	0xffffefff

08013484 <__sclose>:
 8013484:	b510      	push	{r4, lr}
 8013486:	230e      	movs	r3, #14
 8013488:	5ec9      	ldrsh	r1, [r1, r3]
 801348a:	f000 f815 	bl	80134b8 <_close_r>
 801348e:	bd10      	pop	{r4, pc}

08013490 <_write_r>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	0005      	movs	r5, r0
 8013494:	0008      	movs	r0, r1
 8013496:	0011      	movs	r1, r2
 8013498:	2200      	movs	r2, #0
 801349a:	4c06      	ldr	r4, [pc, #24]	; (80134b4 <_write_r+0x24>)
 801349c:	6022      	str	r2, [r4, #0]
 801349e:	001a      	movs	r2, r3
 80134a0:	f7ff fc6c 	bl	8012d7c <_write>
 80134a4:	1c43      	adds	r3, r0, #1
 80134a6:	d103      	bne.n	80134b0 <_write_r+0x20>
 80134a8:	6823      	ldr	r3, [r4, #0]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d000      	beq.n	80134b0 <_write_r+0x20>
 80134ae:	602b      	str	r3, [r5, #0]
 80134b0:	bd70      	pop	{r4, r5, r6, pc}
 80134b2:	46c0      	nop			; (mov r8, r8)
 80134b4:	200006d0 	.word	0x200006d0

080134b8 <_close_r>:
 80134b8:	2300      	movs	r3, #0
 80134ba:	b570      	push	{r4, r5, r6, lr}
 80134bc:	4c06      	ldr	r4, [pc, #24]	; (80134d8 <_close_r+0x20>)
 80134be:	0005      	movs	r5, r0
 80134c0:	0008      	movs	r0, r1
 80134c2:	6023      	str	r3, [r4, #0]
 80134c4:	f000 f834 	bl	8013530 <_close>
 80134c8:	1c43      	adds	r3, r0, #1
 80134ca:	d103      	bne.n	80134d4 <_close_r+0x1c>
 80134cc:	6823      	ldr	r3, [r4, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d000      	beq.n	80134d4 <_close_r+0x1c>
 80134d2:	602b      	str	r3, [r5, #0]
 80134d4:	bd70      	pop	{r4, r5, r6, pc}
 80134d6:	46c0      	nop			; (mov r8, r8)
 80134d8:	200006d0 	.word	0x200006d0

080134dc <_lseek_r>:
 80134dc:	b570      	push	{r4, r5, r6, lr}
 80134de:	0005      	movs	r5, r0
 80134e0:	0008      	movs	r0, r1
 80134e2:	0011      	movs	r1, r2
 80134e4:	2200      	movs	r2, #0
 80134e6:	4c06      	ldr	r4, [pc, #24]	; (8013500 <_lseek_r+0x24>)
 80134e8:	6022      	str	r2, [r4, #0]
 80134ea:	001a      	movs	r2, r3
 80134ec:	f000 f828 	bl	8013540 <_lseek>
 80134f0:	1c43      	adds	r3, r0, #1
 80134f2:	d103      	bne.n	80134fc <_lseek_r+0x20>
 80134f4:	6823      	ldr	r3, [r4, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d000      	beq.n	80134fc <_lseek_r+0x20>
 80134fa:	602b      	str	r3, [r5, #0]
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	46c0      	nop			; (mov r8, r8)
 8013500:	200006d0 	.word	0x200006d0

08013504 <__malloc_lock>:
 8013504:	4770      	bx	lr

08013506 <__malloc_unlock>:
 8013506:	4770      	bx	lr

08013508 <_read_r>:
 8013508:	b570      	push	{r4, r5, r6, lr}
 801350a:	0005      	movs	r5, r0
 801350c:	0008      	movs	r0, r1
 801350e:	0011      	movs	r1, r2
 8013510:	2200      	movs	r2, #0
 8013512:	4c06      	ldr	r4, [pc, #24]	; (801352c <_read_r+0x24>)
 8013514:	6022      	str	r2, [r4, #0]
 8013516:	001a      	movs	r2, r3
 8013518:	f000 f81a 	bl	8013550 <_read>
 801351c:	1c43      	adds	r3, r0, #1
 801351e:	d103      	bne.n	8013528 <_read_r+0x20>
 8013520:	6823      	ldr	r3, [r4, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d000      	beq.n	8013528 <_read_r+0x20>
 8013526:	602b      	str	r3, [r5, #0]
 8013528:	bd70      	pop	{r4, r5, r6, pc}
 801352a:	46c0      	nop			; (mov r8, r8)
 801352c:	200006d0 	.word	0x200006d0

08013530 <_close>:
 8013530:	2258      	movs	r2, #88	; 0x58
 8013532:	2001      	movs	r0, #1
 8013534:	4b01      	ldr	r3, [pc, #4]	; (801353c <_close+0xc>)
 8013536:	4240      	negs	r0, r0
 8013538:	601a      	str	r2, [r3, #0]
 801353a:	4770      	bx	lr
 801353c:	200006d0 	.word	0x200006d0

08013540 <_lseek>:
 8013540:	2258      	movs	r2, #88	; 0x58
 8013542:	2001      	movs	r0, #1
 8013544:	4b01      	ldr	r3, [pc, #4]	; (801354c <_lseek+0xc>)
 8013546:	4240      	negs	r0, r0
 8013548:	601a      	str	r2, [r3, #0]
 801354a:	4770      	bx	lr
 801354c:	200006d0 	.word	0x200006d0

08013550 <_read>:
 8013550:	2258      	movs	r2, #88	; 0x58
 8013552:	2001      	movs	r0, #1
 8013554:	4b01      	ldr	r3, [pc, #4]	; (801355c <_read+0xc>)
 8013556:	4240      	negs	r0, r0
 8013558:	601a      	str	r2, [r3, #0]
 801355a:	4770      	bx	lr
 801355c:	200006d0 	.word	0x200006d0

08013560 <cos>:
 8013560:	b530      	push	{r4, r5, lr}
 8013562:	4a20      	ldr	r2, [pc, #128]	; (80135e4 <cos+0x84>)
 8013564:	004b      	lsls	r3, r1, #1
 8013566:	b087      	sub	sp, #28
 8013568:	085b      	lsrs	r3, r3, #1
 801356a:	4293      	cmp	r3, r2
 801356c:	dd1c      	ble.n	80135a8 <cos+0x48>
 801356e:	4a1e      	ldr	r2, [pc, #120]	; (80135e8 <cos+0x88>)
 8013570:	4293      	cmp	r3, r2
 8013572:	dd05      	ble.n	8013580 <cos+0x20>
 8013574:	0002      	movs	r2, r0
 8013576:	000b      	movs	r3, r1
 8013578:	f7fd fb5e 	bl	8010c38 <__aeabi_dsub>
 801357c:	b007      	add	sp, #28
 801357e:	bd30      	pop	{r4, r5, pc}
 8013580:	aa02      	add	r2, sp, #8
 8013582:	f000 f9db 	bl	801393c <__ieee754_rem_pio2>
 8013586:	2303      	movs	r3, #3
 8013588:	4018      	ands	r0, r3
 801358a:	9a04      	ldr	r2, [sp, #16]
 801358c:	9b05      	ldr	r3, [sp, #20]
 801358e:	2801      	cmp	r0, #1
 8013590:	d00f      	beq.n	80135b2 <cos+0x52>
 8013592:	2802      	cmp	r0, #2
 8013594:	d01c      	beq.n	80135d0 <cos+0x70>
 8013596:	2800      	cmp	r0, #0
 8013598:	d015      	beq.n	80135c6 <cos+0x66>
 801359a:	9802      	ldr	r0, [sp, #8]
 801359c:	9903      	ldr	r1, [sp, #12]
 801359e:	2401      	movs	r4, #1
 80135a0:	9400      	str	r4, [sp, #0]
 80135a2:	f001 fb7f 	bl	8014ca4 <__kernel_sin>
 80135a6:	e7e9      	b.n	801357c <cos+0x1c>
 80135a8:	2200      	movs	r2, #0
 80135aa:	2300      	movs	r3, #0
 80135ac:	f000 fe00 	bl	80141b0 <__kernel_cos>
 80135b0:	e7e4      	b.n	801357c <cos+0x1c>
 80135b2:	9000      	str	r0, [sp, #0]
 80135b4:	9802      	ldr	r0, [sp, #8]
 80135b6:	9903      	ldr	r1, [sp, #12]
 80135b8:	f001 fb74 	bl	8014ca4 <__kernel_sin>
 80135bc:	2380      	movs	r3, #128	; 0x80
 80135be:	061b      	lsls	r3, r3, #24
 80135c0:	469c      	mov	ip, r3
 80135c2:	4461      	add	r1, ip
 80135c4:	e7da      	b.n	801357c <cos+0x1c>
 80135c6:	9802      	ldr	r0, [sp, #8]
 80135c8:	9903      	ldr	r1, [sp, #12]
 80135ca:	f000 fdf1 	bl	80141b0 <__kernel_cos>
 80135ce:	e7d5      	b.n	801357c <cos+0x1c>
 80135d0:	9802      	ldr	r0, [sp, #8]
 80135d2:	9903      	ldr	r1, [sp, #12]
 80135d4:	f000 fdec 	bl	80141b0 <__kernel_cos>
 80135d8:	2380      	movs	r3, #128	; 0x80
 80135da:	061b      	lsls	r3, r3, #24
 80135dc:	469c      	mov	ip, r3
 80135de:	4461      	add	r1, ip
 80135e0:	e7cc      	b.n	801357c <cos+0x1c>
 80135e2:	46c0      	nop			; (mov r8, r8)
 80135e4:	3fe921fb 	.word	0x3fe921fb
 80135e8:	7fefffff 	.word	0x7fefffff

080135ec <fmaxf>:
 80135ec:	b570      	push	{r4, r5, r6, lr}
 80135ee:	1c04      	adds	r4, r0, #0
 80135f0:	1c0d      	adds	r5, r1, #0
 80135f2:	f000 f811 	bl	8013618 <__fpclassifyf>
 80135f6:	2800      	cmp	r0, #0
 80135f8:	d102      	bne.n	8013600 <fmaxf+0x14>
 80135fa:	1c2c      	adds	r4, r5, #0
 80135fc:	1c20      	adds	r0, r4, #0
 80135fe:	bd70      	pop	{r4, r5, r6, pc}
 8013600:	1c28      	adds	r0, r5, #0
 8013602:	f000 f809 	bl	8013618 <__fpclassifyf>
 8013606:	2800      	cmp	r0, #0
 8013608:	d0f8      	beq.n	80135fc <fmaxf+0x10>
 801360a:	1c29      	adds	r1, r5, #0
 801360c:	1c20      	adds	r0, r4, #0
 801360e:	f7fb fec9 	bl	800f3a4 <__aeabi_fcmpgt>
 8013612:	2800      	cmp	r0, #0
 8013614:	d0f1      	beq.n	80135fa <fmaxf+0xe>
 8013616:	e7f1      	b.n	80135fc <fmaxf+0x10>

08013618 <__fpclassifyf>:
 8013618:	0040      	lsls	r0, r0, #1
 801361a:	0840      	lsrs	r0, r0, #1
 801361c:	d00e      	beq.n	801363c <__fpclassifyf+0x24>
 801361e:	4b0a      	ldr	r3, [pc, #40]	; (8013648 <__fpclassifyf+0x30>)
 8013620:	4a0a      	ldr	r2, [pc, #40]	; (801364c <__fpclassifyf+0x34>)
 8013622:	18c3      	adds	r3, r0, r3
 8013624:	4293      	cmp	r3, r2
 8013626:	d90b      	bls.n	8013640 <__fpclassifyf+0x28>
 8013628:	4a09      	ldr	r2, [pc, #36]	; (8013650 <__fpclassifyf+0x38>)
 801362a:	1e43      	subs	r3, r0, #1
 801362c:	4293      	cmp	r3, r2
 801362e:	d909      	bls.n	8013644 <__fpclassifyf+0x2c>
 8013630:	4b08      	ldr	r3, [pc, #32]	; (8013654 <__fpclassifyf+0x3c>)
 8013632:	469c      	mov	ip, r3
 8013634:	4460      	add	r0, ip
 8013636:	4243      	negs	r3, r0
 8013638:	4158      	adcs	r0, r3
 801363a:	4770      	bx	lr
 801363c:	2002      	movs	r0, #2
 801363e:	e7fc      	b.n	801363a <__fpclassifyf+0x22>
 8013640:	2004      	movs	r0, #4
 8013642:	e7fa      	b.n	801363a <__fpclassifyf+0x22>
 8013644:	2003      	movs	r0, #3
 8013646:	e7f8      	b.n	801363a <__fpclassifyf+0x22>
 8013648:	ff800000 	.word	0xff800000
 801364c:	7effffff 	.word	0x7effffff
 8013650:	007ffffe 	.word	0x007ffffe
 8013654:	80800000 	.word	0x80800000

08013658 <roundf>:
 8013658:	0043      	lsls	r3, r0, #1
 801365a:	0e1b      	lsrs	r3, r3, #24
 801365c:	3b7f      	subs	r3, #127	; 0x7f
 801365e:	b510      	push	{r4, lr}
 8013660:	1c01      	adds	r1, r0, #0
 8013662:	2b16      	cmp	r3, #22
 8013664:	dc0b      	bgt.n	801367e <roundf+0x26>
 8013666:	2b00      	cmp	r3, #0
 8013668:	db0e      	blt.n	8013688 <roundf+0x30>
 801366a:	4c0b      	ldr	r4, [pc, #44]	; (8013698 <roundf+0x40>)
 801366c:	411c      	asrs	r4, r3
 801366e:	4204      	tst	r4, r0
 8013670:	d004      	beq.n	801367c <roundf+0x24>
 8013672:	2280      	movs	r2, #128	; 0x80
 8013674:	03d2      	lsls	r2, r2, #15
 8013676:	411a      	asrs	r2, r3
 8013678:	1810      	adds	r0, r2, r0
 801367a:	43a0      	bics	r0, r4
 801367c:	bd10      	pop	{r4, pc}
 801367e:	2b80      	cmp	r3, #128	; 0x80
 8013680:	d1fc      	bne.n	801367c <roundf+0x24>
 8013682:	f7fa fed7 	bl	800e434 <__aeabi_fadd>
 8013686:	e7f9      	b.n	801367c <roundf+0x24>
 8013688:	0fc0      	lsrs	r0, r0, #31
 801368a:	07c0      	lsls	r0, r0, #31
 801368c:	3301      	adds	r3, #1
 801368e:	d1f5      	bne.n	801367c <roundf+0x24>
 8013690:	23fe      	movs	r3, #254	; 0xfe
 8013692:	059b      	lsls	r3, r3, #22
 8013694:	4318      	orrs	r0, r3
 8013696:	e7f1      	b.n	801367c <roundf+0x24>
 8013698:	007fffff 	.word	0x007fffff

0801369c <sqrt>:
 801369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801369e:	4647      	mov	r7, r8
 80136a0:	46ce      	mov	lr, r9
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b08d      	sub	sp, #52	; 0x34
 80136a6:	0004      	movs	r4, r0
 80136a8:	000d      	movs	r5, r1
 80136aa:	f000 fb57 	bl	8013d5c <__ieee754_sqrt>
 80136ae:	4b29      	ldr	r3, [pc, #164]	; (8013754 <sqrt+0xb8>)
 80136b0:	0006      	movs	r6, r0
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	000f      	movs	r7, r1
 80136b6:	b25b      	sxtb	r3, r3
 80136b8:	4698      	mov	r8, r3
 80136ba:	3301      	adds	r3, #1
 80136bc:	d010      	beq.n	80136e0 <sqrt+0x44>
 80136be:	0022      	movs	r2, r4
 80136c0:	002b      	movs	r3, r5
 80136c2:	0020      	movs	r0, r4
 80136c4:	0029      	movs	r1, r5
 80136c6:	f7fd fdff 	bl	80112c8 <__aeabi_dcmpun>
 80136ca:	4681      	mov	r9, r0
 80136cc:	2800      	cmp	r0, #0
 80136ce:	d107      	bne.n	80136e0 <sqrt+0x44>
 80136d0:	2200      	movs	r2, #0
 80136d2:	2300      	movs	r3, #0
 80136d4:	0020      	movs	r0, r4
 80136d6:	0029      	movs	r1, r5
 80136d8:	f7fb fe16 	bl	800f308 <__aeabi_dcmplt>
 80136dc:	2800      	cmp	r0, #0
 80136de:	d106      	bne.n	80136ee <sqrt+0x52>
 80136e0:	0030      	movs	r0, r6
 80136e2:	0039      	movs	r1, r7
 80136e4:	b00d      	add	sp, #52	; 0x34
 80136e6:	bc0c      	pop	{r2, r3}
 80136e8:	4690      	mov	r8, r2
 80136ea:	4699      	mov	r9, r3
 80136ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136ee:	2301      	movs	r3, #1
 80136f0:	9302      	str	r3, [sp, #8]
 80136f2:	4b19      	ldr	r3, [pc, #100]	; (8013758 <sqrt+0xbc>)
 80136f4:	9406      	str	r4, [sp, #24]
 80136f6:	9507      	str	r5, [sp, #28]
 80136f8:	9303      	str	r3, [sp, #12]
 80136fa:	464b      	mov	r3, r9
 80136fc:	930a      	str	r3, [sp, #40]	; 0x28
 80136fe:	4643      	mov	r3, r8
 8013700:	9404      	str	r4, [sp, #16]
 8013702:	9505      	str	r5, [sp, #20]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d015      	beq.n	8013734 <sqrt+0x98>
 8013708:	2300      	movs	r3, #0
 801370a:	2200      	movs	r2, #0
 801370c:	0019      	movs	r1, r3
 801370e:	0010      	movs	r0, r2
 8013710:	f7fc fc16 	bl	800ff40 <__aeabi_ddiv>
 8013714:	4643      	mov	r3, r8
 8013716:	9008      	str	r0, [sp, #32]
 8013718:	9109      	str	r1, [sp, #36]	; 0x24
 801371a:	2b02      	cmp	r3, #2
 801371c:	d10e      	bne.n	801373c <sqrt+0xa0>
 801371e:	f7ff fbdf 	bl	8012ee0 <__errno>
 8013722:	2321      	movs	r3, #33	; 0x21
 8013724:	6003      	str	r3, [r0, #0]
 8013726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013728:	9301      	str	r3, [sp, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d10c      	bne.n	8013748 <sqrt+0xac>
 801372e:	9e08      	ldr	r6, [sp, #32]
 8013730:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013732:	e7d5      	b.n	80136e0 <sqrt+0x44>
 8013734:	2300      	movs	r3, #0
 8013736:	2400      	movs	r4, #0
 8013738:	9308      	str	r3, [sp, #32]
 801373a:	9409      	str	r4, [sp, #36]	; 0x24
 801373c:	a802      	add	r0, sp, #8
 801373e:	f001 fc03 	bl	8014f48 <matherr>
 8013742:	2800      	cmp	r0, #0
 8013744:	d1ef      	bne.n	8013726 <sqrt+0x8a>
 8013746:	e7ea      	b.n	801371e <sqrt+0x82>
 8013748:	f7ff fbca 	bl	8012ee0 <__errno>
 801374c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801374e:	9301      	str	r3, [sp, #4]
 8013750:	6003      	str	r3, [r0, #0]
 8013752:	e7ec      	b.n	801372e <sqrt+0x92>
 8013754:	2000006c 	.word	0x2000006c
 8013758:	0801ea2c 	.word	0x0801ea2c

0801375c <expf>:
 801375c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801375e:	b08b      	sub	sp, #44	; 0x2c
 8013760:	1c04      	adds	r4, r0, #0
 8013762:	f000 fbd3 	bl	8013f0c <__ieee754_expf>
 8013766:	2300      	movs	r3, #0
 8013768:	4e30      	ldr	r6, [pc, #192]	; (801382c <expf+0xd0>)
 801376a:	1c05      	adds	r5, r0, #0
 801376c:	56f3      	ldrsb	r3, [r6, r3]
 801376e:	3301      	adds	r3, #1
 8013770:	d036      	beq.n	80137e0 <expf+0x84>
 8013772:	1c20      	adds	r0, r4, #0
 8013774:	f001 fc58 	bl	8015028 <finitef>
 8013778:	2800      	cmp	r0, #0
 801377a:	d031      	beq.n	80137e0 <expf+0x84>
 801377c:	492c      	ldr	r1, [pc, #176]	; (8013830 <expf+0xd4>)
 801377e:	1c20      	adds	r0, r4, #0
 8013780:	f7fb fe10 	bl	800f3a4 <__aeabi_fcmpgt>
 8013784:	1e07      	subs	r7, r0, #0
 8013786:	d12e      	bne.n	80137e6 <expf+0x8a>
 8013788:	492a      	ldr	r1, [pc, #168]	; (8013834 <expf+0xd8>)
 801378a:	1c20      	adds	r0, r4, #0
 801378c:	f7fb fdf6 	bl	800f37c <__aeabi_fcmplt>
 8013790:	2800      	cmp	r0, #0
 8013792:	d025      	beq.n	80137e0 <expf+0x84>
 8013794:	2304      	movs	r3, #4
 8013796:	466d      	mov	r5, sp
 8013798:	9300      	str	r3, [sp, #0]
 801379a:	4b27      	ldr	r3, [pc, #156]	; (8013838 <expf+0xdc>)
 801379c:	622f      	str	r7, [r5, #32]
 801379e:	606b      	str	r3, [r5, #4]
 80137a0:	1c20      	adds	r0, r4, #0
 80137a2:	f7fd fe4f 	bl	8011444 <__aeabi_f2d>
 80137a6:	2300      	movs	r3, #0
 80137a8:	2200      	movs	r2, #0
 80137aa:	61aa      	str	r2, [r5, #24]
 80137ac:	61eb      	str	r3, [r5, #28]
 80137ae:	2300      	movs	r3, #0
 80137b0:	56f3      	ldrsb	r3, [r6, r3]
 80137b2:	6128      	str	r0, [r5, #16]
 80137b4:	6169      	str	r1, [r5, #20]
 80137b6:	60a8      	str	r0, [r5, #8]
 80137b8:	60e9      	str	r1, [r5, #12]
 80137ba:	2b02      	cmp	r3, #2
 80137bc:	d031      	beq.n	8013822 <expf+0xc6>
 80137be:	0028      	movs	r0, r5
 80137c0:	f001 fbc2 	bl	8014f48 <matherr>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d02c      	beq.n	8013822 <expf+0xc6>
 80137c8:	6a2b      	ldr	r3, [r5, #32]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d003      	beq.n	80137d6 <expf+0x7a>
 80137ce:	f7ff fb87 	bl	8012ee0 <__errno>
 80137d2:	6a2b      	ldr	r3, [r5, #32]
 80137d4:	6003      	str	r3, [r0, #0]
 80137d6:	69a8      	ldr	r0, [r5, #24]
 80137d8:	69e9      	ldr	r1, [r5, #28]
 80137da:	f7fd fe85 	bl	80114e8 <__aeabi_d2f>
 80137de:	1c05      	adds	r5, r0, #0
 80137e0:	1c28      	adds	r0, r5, #0
 80137e2:	b00b      	add	sp, #44	; 0x2c
 80137e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137e6:	2303      	movs	r3, #3
 80137e8:	466d      	mov	r5, sp
 80137ea:	9300      	str	r3, [sp, #0]
 80137ec:	4b12      	ldr	r3, [pc, #72]	; (8013838 <expf+0xdc>)
 80137ee:	1c20      	adds	r0, r4, #0
 80137f0:	606b      	str	r3, [r5, #4]
 80137f2:	2300      	movs	r3, #0
 80137f4:	622b      	str	r3, [r5, #32]
 80137f6:	f7fd fe25 	bl	8011444 <__aeabi_f2d>
 80137fa:	2300      	movs	r3, #0
 80137fc:	56f3      	ldrsb	r3, [r6, r3]
 80137fe:	6128      	str	r0, [r5, #16]
 8013800:	6169      	str	r1, [r5, #20]
 8013802:	60a8      	str	r0, [r5, #8]
 8013804:	60e9      	str	r1, [r5, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d105      	bne.n	8013816 <expf+0xba>
 801380a:	22e0      	movs	r2, #224	; 0xe0
 801380c:	4b0b      	ldr	r3, [pc, #44]	; (801383c <expf+0xe0>)
 801380e:	0612      	lsls	r2, r2, #24
 8013810:	61aa      	str	r2, [r5, #24]
 8013812:	61eb      	str	r3, [r5, #28]
 8013814:	e7d3      	b.n	80137be <expf+0x62>
 8013816:	2000      	movs	r0, #0
 8013818:	4909      	ldr	r1, [pc, #36]	; (8013840 <expf+0xe4>)
 801381a:	61a8      	str	r0, [r5, #24]
 801381c:	61e9      	str	r1, [r5, #28]
 801381e:	2b02      	cmp	r3, #2
 8013820:	d1cd      	bne.n	80137be <expf+0x62>
 8013822:	f7ff fb5d 	bl	8012ee0 <__errno>
 8013826:	2322      	movs	r3, #34	; 0x22
 8013828:	6003      	str	r3, [r0, #0]
 801382a:	e7cd      	b.n	80137c8 <expf+0x6c>
 801382c:	2000006c 	.word	0x2000006c
 8013830:	42b17180 	.word	0x42b17180
 8013834:	c2cff1b5 	.word	0xc2cff1b5
 8013838:	0801ea34 	.word	0x0801ea34
 801383c:	47efffff 	.word	0x47efffff
 8013840:	7ff00000 	.word	0x7ff00000

08013844 <log10f>:
 8013844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013846:	2500      	movs	r5, #0
 8013848:	b08d      	sub	sp, #52	; 0x34
 801384a:	1c04      	adds	r4, r0, #0
 801384c:	f000 fc58 	bl	8014100 <__ieee754_log10f>
 8013850:	4b35      	ldr	r3, [pc, #212]	; (8013928 <log10f+0xe4>)
 8013852:	1c06      	adds	r6, r0, #0
 8013854:	575d      	ldrsb	r5, [r3, r5]
 8013856:	1c6b      	adds	r3, r5, #1
 8013858:	d00b      	beq.n	8013872 <log10f+0x2e>
 801385a:	1c21      	adds	r1, r4, #0
 801385c:	1c20      	adds	r0, r4, #0
 801385e:	f7fb ff93 	bl	800f788 <__aeabi_fcmpun>
 8013862:	1e07      	subs	r7, r0, #0
 8013864:	d105      	bne.n	8013872 <log10f+0x2e>
 8013866:	2100      	movs	r1, #0
 8013868:	1c20      	adds	r0, r4, #0
 801386a:	f7fb fd91 	bl	800f390 <__aeabi_fcmple>
 801386e:	2800      	cmp	r0, #0
 8013870:	d102      	bne.n	8013878 <log10f+0x34>
 8013872:	1c30      	adds	r0, r6, #0
 8013874:	b00d      	add	sp, #52	; 0x34
 8013876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013878:	4b2c      	ldr	r3, [pc, #176]	; (801392c <log10f+0xe8>)
 801387a:	1c20      	adds	r0, r4, #0
 801387c:	9303      	str	r3, [sp, #12]
 801387e:	970a      	str	r7, [sp, #40]	; 0x28
 8013880:	f7fd fde0 	bl	8011444 <__aeabi_f2d>
 8013884:	9006      	str	r0, [sp, #24]
 8013886:	9107      	str	r1, [sp, #28]
 8013888:	9004      	str	r0, [sp, #16]
 801388a:	9105      	str	r1, [sp, #20]
 801388c:	2d00      	cmp	r5, #0
 801388e:	d11b      	bne.n	80138c8 <log10f+0x84>
 8013890:	22e0      	movs	r2, #224	; 0xe0
 8013892:	4b27      	ldr	r3, [pc, #156]	; (8013930 <log10f+0xec>)
 8013894:	0612      	lsls	r2, r2, #24
 8013896:	2100      	movs	r1, #0
 8013898:	1c20      	adds	r0, r4, #0
 801389a:	9208      	str	r2, [sp, #32]
 801389c:	9309      	str	r3, [sp, #36]	; 0x24
 801389e:	f7fb fd67 	bl	800f370 <__aeabi_fcmpeq>
 80138a2:	2800      	cmp	r0, #0
 80138a4:	d037      	beq.n	8013916 <log10f+0xd2>
 80138a6:	2302      	movs	r3, #2
 80138a8:	9302      	str	r3, [sp, #8]
 80138aa:	a802      	add	r0, sp, #8
 80138ac:	f001 fb4c 	bl	8014f48 <matherr>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d017      	beq.n	80138e4 <log10f+0xa0>
 80138b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138b6:	9301      	str	r3, [sp, #4]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d118      	bne.n	80138ee <log10f+0xaa>
 80138bc:	9808      	ldr	r0, [sp, #32]
 80138be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138c0:	f7fd fe12 	bl	80114e8 <__aeabi_d2f>
 80138c4:	1c06      	adds	r6, r0, #0
 80138c6:	e7d4      	b.n	8013872 <log10f+0x2e>
 80138c8:	2200      	movs	r2, #0
 80138ca:	4b1a      	ldr	r3, [pc, #104]	; (8013934 <log10f+0xf0>)
 80138cc:	2100      	movs	r1, #0
 80138ce:	1c20      	adds	r0, r4, #0
 80138d0:	9208      	str	r2, [sp, #32]
 80138d2:	9309      	str	r3, [sp, #36]	; 0x24
 80138d4:	f7fb fd4c 	bl	800f370 <__aeabi_fcmpeq>
 80138d8:	2800      	cmp	r0, #0
 80138da:	d00e      	beq.n	80138fa <log10f+0xb6>
 80138dc:	2302      	movs	r3, #2
 80138de:	9302      	str	r3, [sp, #8]
 80138e0:	2d02      	cmp	r5, #2
 80138e2:	d1e2      	bne.n	80138aa <log10f+0x66>
 80138e4:	f7ff fafc 	bl	8012ee0 <__errno>
 80138e8:	2322      	movs	r3, #34	; 0x22
 80138ea:	6003      	str	r3, [r0, #0]
 80138ec:	e7e2      	b.n	80138b4 <log10f+0x70>
 80138ee:	f7ff faf7 	bl	8012ee0 <__errno>
 80138f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	6003      	str	r3, [r0, #0]
 80138f8:	e7e0      	b.n	80138bc <log10f+0x78>
 80138fa:	2301      	movs	r3, #1
 80138fc:	9302      	str	r3, [sp, #8]
 80138fe:	2d02      	cmp	r5, #2
 8013900:	d10b      	bne.n	801391a <log10f+0xd6>
 8013902:	f7ff faed 	bl	8012ee0 <__errno>
 8013906:	2321      	movs	r3, #33	; 0x21
 8013908:	6003      	str	r3, [r0, #0]
 801390a:	480b      	ldr	r0, [pc, #44]	; (8013938 <log10f+0xf4>)
 801390c:	f001 fb1e 	bl	8014f4c <nan>
 8013910:	9008      	str	r0, [sp, #32]
 8013912:	9109      	str	r1, [sp, #36]	; 0x24
 8013914:	e7ce      	b.n	80138b4 <log10f+0x70>
 8013916:	2301      	movs	r3, #1
 8013918:	9302      	str	r3, [sp, #8]
 801391a:	a802      	add	r0, sp, #8
 801391c:	f001 fb14 	bl	8014f48 <matherr>
 8013920:	2800      	cmp	r0, #0
 8013922:	d1f2      	bne.n	801390a <log10f+0xc6>
 8013924:	e7ed      	b.n	8013902 <log10f+0xbe>
 8013926:	46c0      	nop			; (mov r8, r8)
 8013928:	2000006c 	.word	0x2000006c
 801392c:	0801ea3c 	.word	0x0801ea3c
 8013930:	c7efffff 	.word	0xc7efffff
 8013934:	fff00000 	.word	0xfff00000
 8013938:	0801cacc 	.word	0x0801cacc

0801393c <__ieee754_rem_pio2>:
 801393c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801393e:	464e      	mov	r6, r9
 8013940:	4645      	mov	r5, r8
 8013942:	46de      	mov	lr, fp
 8013944:	4657      	mov	r7, sl
 8013946:	b5e0      	push	{r5, r6, r7, lr}
 8013948:	4be1      	ldr	r3, [pc, #900]	; (8013cd0 <__ieee754_rem_pio2+0x394>)
 801394a:	004c      	lsls	r4, r1, #1
 801394c:	b08f      	sub	sp, #60	; 0x3c
 801394e:	4690      	mov	r8, r2
 8013950:	4689      	mov	r9, r1
 8013952:	0864      	lsrs	r4, r4, #1
 8013954:	429c      	cmp	r4, r3
 8013956:	dc00      	bgt.n	801395a <__ieee754_rem_pio2+0x1e>
 8013958:	e087      	b.n	8013a6a <__ieee754_rem_pio2+0x12e>
 801395a:	4bde      	ldr	r3, [pc, #888]	; (8013cd4 <__ieee754_rem_pio2+0x398>)
 801395c:	429c      	cmp	r4, r3
 801395e:	dc22      	bgt.n	80139a6 <__ieee754_rem_pio2+0x6a>
 8013960:	4add      	ldr	r2, [pc, #884]	; (8013cd8 <__ieee754_rem_pio2+0x39c>)
 8013962:	2900      	cmp	r1, #0
 8013964:	dc00      	bgt.n	8013968 <__ieee754_rem_pio2+0x2c>
 8013966:	e092      	b.n	8013a8e <__ieee754_rem_pio2+0x152>
 8013968:	4bdc      	ldr	r3, [pc, #880]	; (8013cdc <__ieee754_rem_pio2+0x3a0>)
 801396a:	f7fd f965 	bl	8010c38 <__aeabi_dsub>
 801396e:	4bdb      	ldr	r3, [pc, #876]	; (8013cdc <__ieee754_rem_pio2+0x3a0>)
 8013970:	0006      	movs	r6, r0
 8013972:	000f      	movs	r7, r1
 8013974:	429c      	cmp	r4, r3
 8013976:	d100      	bne.n	801397a <__ieee754_rem_pio2+0x3e>
 8013978:	e17e      	b.n	8013c78 <__ieee754_rem_pio2+0x33c>
 801397a:	4ad9      	ldr	r2, [pc, #868]	; (8013ce0 <__ieee754_rem_pio2+0x3a4>)
 801397c:	4bd9      	ldr	r3, [pc, #868]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 801397e:	f7fd f95b 	bl	8010c38 <__aeabi_dsub>
 8013982:	0002      	movs	r2, r0
 8013984:	000b      	movs	r3, r1
 8013986:	4641      	mov	r1, r8
 8013988:	0030      	movs	r0, r6
 801398a:	600a      	str	r2, [r1, #0]
 801398c:	604b      	str	r3, [r1, #4]
 801398e:	0039      	movs	r1, r7
 8013990:	f7fd f952 	bl	8010c38 <__aeabi_dsub>
 8013994:	4bd3      	ldr	r3, [pc, #844]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013996:	4ad2      	ldr	r2, [pc, #840]	; (8013ce0 <__ieee754_rem_pio2+0x3a4>)
 8013998:	f7fd f94e 	bl	8010c38 <__aeabi_dsub>
 801399c:	4643      	mov	r3, r8
 801399e:	2501      	movs	r5, #1
 80139a0:	6098      	str	r0, [r3, #8]
 80139a2:	60d9      	str	r1, [r3, #12]
 80139a4:	e06b      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 80139a6:	4bd0      	ldr	r3, [pc, #832]	; (8013ce8 <__ieee754_rem_pio2+0x3ac>)
 80139a8:	429c      	cmp	r4, r3
 80139aa:	dc00      	bgt.n	80139ae <__ieee754_rem_pio2+0x72>
 80139ac:	e08f      	b.n	8013ace <__ieee754_rem_pio2+0x192>
 80139ae:	4bcf      	ldr	r3, [pc, #828]	; (8013cec <__ieee754_rem_pio2+0x3b0>)
 80139b0:	429c      	cmp	r4, r3
 80139b2:	dd00      	ble.n	80139b6 <__ieee754_rem_pio2+0x7a>
 80139b4:	e155      	b.n	8013c62 <__ieee754_rem_pio2+0x326>
 80139b6:	4ace      	ldr	r2, [pc, #824]	; (8013cf0 <__ieee754_rem_pio2+0x3b4>)
 80139b8:	1523      	asrs	r3, r4, #20
 80139ba:	4692      	mov	sl, r2
 80139bc:	449a      	add	sl, r3
 80139be:	4651      	mov	r1, sl
 80139c0:	0509      	lsls	r1, r1, #20
 80139c2:	1a63      	subs	r3, r4, r1
 80139c4:	0019      	movs	r1, r3
 80139c6:	001d      	movs	r5, r3
 80139c8:	0004      	movs	r4, r0
 80139ca:	f7fd fc99 	bl	8011300 <__aeabi_d2iz>
 80139ce:	f7fd fccd 	bl	801136c <__aeabi_i2d>
 80139d2:	0002      	movs	r2, r0
 80139d4:	000b      	movs	r3, r1
 80139d6:	0020      	movs	r0, r4
 80139d8:	0029      	movs	r1, r5
 80139da:	9208      	str	r2, [sp, #32]
 80139dc:	9309      	str	r3, [sp, #36]	; 0x24
 80139de:	f7fd f92b 	bl	8010c38 <__aeabi_dsub>
 80139e2:	2200      	movs	r2, #0
 80139e4:	4bc3      	ldr	r3, [pc, #780]	; (8013cf4 <__ieee754_rem_pio2+0x3b8>)
 80139e6:	f7fc feb5 	bl	8010754 <__aeabi_dmul>
 80139ea:	000f      	movs	r7, r1
 80139ec:	0006      	movs	r6, r0
 80139ee:	f7fd fc87 	bl	8011300 <__aeabi_d2iz>
 80139f2:	f7fd fcbb 	bl	801136c <__aeabi_i2d>
 80139f6:	0004      	movs	r4, r0
 80139f8:	000d      	movs	r5, r1
 80139fa:	0002      	movs	r2, r0
 80139fc:	000b      	movs	r3, r1
 80139fe:	0030      	movs	r0, r6
 8013a00:	0039      	movs	r1, r7
 8013a02:	940a      	str	r4, [sp, #40]	; 0x28
 8013a04:	950b      	str	r5, [sp, #44]	; 0x2c
 8013a06:	f7fd f917 	bl	8010c38 <__aeabi_dsub>
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	4bb9      	ldr	r3, [pc, #740]	; (8013cf4 <__ieee754_rem_pio2+0x3b8>)
 8013a0e:	f7fc fea1 	bl	8010754 <__aeabi_dmul>
 8013a12:	2200      	movs	r2, #0
 8013a14:	2300      	movs	r3, #0
 8013a16:	900c      	str	r0, [sp, #48]	; 0x30
 8013a18:	910d      	str	r1, [sp, #52]	; 0x34
 8013a1a:	f7fb fc6f 	bl	800f2fc <__aeabi_dcmpeq>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d100      	bne.n	8013a24 <__ieee754_rem_pio2+0xe8>
 8013a22:	e192      	b.n	8013d4a <__ieee754_rem_pio2+0x40e>
 8013a24:	2300      	movs	r3, #0
 8013a26:	2200      	movs	r2, #0
 8013a28:	0020      	movs	r0, r4
 8013a2a:	0029      	movs	r1, r5
 8013a2c:	f7fb fc66 	bl	800f2fc <__aeabi_dcmpeq>
 8013a30:	4243      	negs	r3, r0
 8013a32:	4143      	adcs	r3, r0
 8013a34:	3301      	adds	r3, #1
 8013a36:	4ab0      	ldr	r2, [pc, #704]	; (8013cf8 <__ieee754_rem_pio2+0x3bc>)
 8013a38:	4641      	mov	r1, r8
 8013a3a:	9201      	str	r2, [sp, #4]
 8013a3c:	2202      	movs	r2, #2
 8013a3e:	a808      	add	r0, sp, #32
 8013a40:	9200      	str	r2, [sp, #0]
 8013a42:	4652      	mov	r2, sl
 8013a44:	f000 fcce 	bl	80143e4 <__kernel_rem_pio2>
 8013a48:	464b      	mov	r3, r9
 8013a4a:	0005      	movs	r5, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	da16      	bge.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013a50:	2280      	movs	r2, #128	; 0x80
 8013a52:	4643      	mov	r3, r8
 8013a54:	0612      	lsls	r2, r2, #24
 8013a56:	4694      	mov	ip, r2
 8013a58:	4642      	mov	r2, r8
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	4245      	negs	r5, r0
 8013a5e:	4463      	add	r3, ip
 8013a60:	6053      	str	r3, [r2, #4]
 8013a62:	68d3      	ldr	r3, [r2, #12]
 8013a64:	4463      	add	r3, ip
 8013a66:	60d3      	str	r3, [r2, #12]
 8013a68:	e009      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013a6a:	000b      	movs	r3, r1
 8013a6c:	0002      	movs	r2, r0
 8013a6e:	4641      	mov	r1, r8
 8013a70:	600a      	str	r2, [r1, #0]
 8013a72:	604b      	str	r3, [r1, #4]
 8013a74:	2200      	movs	r2, #0
 8013a76:	2300      	movs	r3, #0
 8013a78:	2500      	movs	r5, #0
 8013a7a:	608a      	str	r2, [r1, #8]
 8013a7c:	60cb      	str	r3, [r1, #12]
 8013a7e:	0028      	movs	r0, r5
 8013a80:	b00f      	add	sp, #60	; 0x3c
 8013a82:	bc3c      	pop	{r2, r3, r4, r5}
 8013a84:	4690      	mov	r8, r2
 8013a86:	4699      	mov	r9, r3
 8013a88:	46a2      	mov	sl, r4
 8013a8a:	46ab      	mov	fp, r5
 8013a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a8e:	4b93      	ldr	r3, [pc, #588]	; (8013cdc <__ieee754_rem_pio2+0x3a0>)
 8013a90:	f7fb ff3a 	bl	800f908 <__aeabi_dadd>
 8013a94:	4b91      	ldr	r3, [pc, #580]	; (8013cdc <__ieee754_rem_pio2+0x3a0>)
 8013a96:	0006      	movs	r6, r0
 8013a98:	000f      	movs	r7, r1
 8013a9a:	429c      	cmp	r4, r3
 8013a9c:	d100      	bne.n	8013aa0 <__ieee754_rem_pio2+0x164>
 8013a9e:	e13d      	b.n	8013d1c <__ieee754_rem_pio2+0x3e0>
 8013aa0:	4a8f      	ldr	r2, [pc, #572]	; (8013ce0 <__ieee754_rem_pio2+0x3a4>)
 8013aa2:	4b90      	ldr	r3, [pc, #576]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013aa4:	f7fb ff30 	bl	800f908 <__aeabi_dadd>
 8013aa8:	0002      	movs	r2, r0
 8013aaa:	000b      	movs	r3, r1
 8013aac:	4641      	mov	r1, r8
 8013aae:	0030      	movs	r0, r6
 8013ab0:	600a      	str	r2, [r1, #0]
 8013ab2:	604b      	str	r3, [r1, #4]
 8013ab4:	0039      	movs	r1, r7
 8013ab6:	f7fd f8bf 	bl	8010c38 <__aeabi_dsub>
 8013aba:	4a89      	ldr	r2, [pc, #548]	; (8013ce0 <__ieee754_rem_pio2+0x3a4>)
 8013abc:	4b89      	ldr	r3, [pc, #548]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013abe:	f7fb ff23 	bl	800f908 <__aeabi_dadd>
 8013ac2:	2501      	movs	r5, #1
 8013ac4:	4643      	mov	r3, r8
 8013ac6:	426d      	negs	r5, r5
 8013ac8:	6098      	str	r0, [r3, #8]
 8013aca:	60d9      	str	r1, [r3, #12]
 8013acc:	e7d7      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013ace:	f001 f99b 	bl	8014e08 <fabs>
 8013ad2:	4a8a      	ldr	r2, [pc, #552]	; (8013cfc <__ieee754_rem_pio2+0x3c0>)
 8013ad4:	4b8a      	ldr	r3, [pc, #552]	; (8013d00 <__ieee754_rem_pio2+0x3c4>)
 8013ad6:	0006      	movs	r6, r0
 8013ad8:	000f      	movs	r7, r1
 8013ada:	f7fc fe3b 	bl	8010754 <__aeabi_dmul>
 8013ade:	2200      	movs	r2, #0
 8013ae0:	4b88      	ldr	r3, [pc, #544]	; (8013d04 <__ieee754_rem_pio2+0x3c8>)
 8013ae2:	f7fb ff11 	bl	800f908 <__aeabi_dadd>
 8013ae6:	f7fd fc0b 	bl	8011300 <__aeabi_d2iz>
 8013aea:	0005      	movs	r5, r0
 8013aec:	f7fd fc3e 	bl	801136c <__aeabi_i2d>
 8013af0:	4a79      	ldr	r2, [pc, #484]	; (8013cd8 <__ieee754_rem_pio2+0x39c>)
 8013af2:	4b7a      	ldr	r3, [pc, #488]	; (8013cdc <__ieee754_rem_pio2+0x3a0>)
 8013af4:	9004      	str	r0, [sp, #16]
 8013af6:	9105      	str	r1, [sp, #20]
 8013af8:	f7fc fe2c 	bl	8010754 <__aeabi_dmul>
 8013afc:	0002      	movs	r2, r0
 8013afe:	000b      	movs	r3, r1
 8013b00:	0030      	movs	r0, r6
 8013b02:	0039      	movs	r1, r7
 8013b04:	f7fd f898 	bl	8010c38 <__aeabi_dsub>
 8013b08:	4a75      	ldr	r2, [pc, #468]	; (8013ce0 <__ieee754_rem_pio2+0x3a4>)
 8013b0a:	0006      	movs	r6, r0
 8013b0c:	000f      	movs	r7, r1
 8013b0e:	9804      	ldr	r0, [sp, #16]
 8013b10:	9905      	ldr	r1, [sp, #20]
 8013b12:	4b74      	ldr	r3, [pc, #464]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013b14:	f7fc fe1e 	bl	8010754 <__aeabi_dmul>
 8013b18:	9002      	str	r0, [sp, #8]
 8013b1a:	9103      	str	r1, [sp, #12]
 8013b1c:	2d1f      	cmp	r5, #31
 8013b1e:	dc00      	bgt.n	8013b22 <__ieee754_rem_pio2+0x1e6>
 8013b20:	e0c7      	b.n	8013cb2 <__ieee754_rem_pio2+0x376>
 8013b22:	9a02      	ldr	r2, [sp, #8]
 8013b24:	9b03      	ldr	r3, [sp, #12]
 8013b26:	0030      	movs	r0, r6
 8013b28:	0039      	movs	r1, r7
 8013b2a:	f7fd f885 	bl	8010c38 <__aeabi_dsub>
 8013b2e:	4683      	mov	fp, r0
 8013b30:	468a      	mov	sl, r1
 8013b32:	4653      	mov	r3, sl
 8013b34:	005b      	lsls	r3, r3, #1
 8013b36:	1524      	asrs	r4, r4, #20
 8013b38:	0d5b      	lsrs	r3, r3, #21
 8013b3a:	1ae3      	subs	r3, r4, r3
 8013b3c:	2b10      	cmp	r3, #16
 8013b3e:	dd6c      	ble.n	8013c1a <__ieee754_rem_pio2+0x2de>
 8013b40:	9804      	ldr	r0, [sp, #16]
 8013b42:	9905      	ldr	r1, [sp, #20]
 8013b44:	22d3      	movs	r2, #211	; 0xd3
 8013b46:	4b67      	ldr	r3, [pc, #412]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013b48:	0552      	lsls	r2, r2, #21
 8013b4a:	f7fc fe03 	bl	8010754 <__aeabi_dmul>
 8013b4e:	0002      	movs	r2, r0
 8013b50:	000b      	movs	r3, r1
 8013b52:	0030      	movs	r0, r6
 8013b54:	0039      	movs	r1, r7
 8013b56:	9202      	str	r2, [sp, #8]
 8013b58:	9303      	str	r3, [sp, #12]
 8013b5a:	f7fd f86d 	bl	8010c38 <__aeabi_dsub>
 8013b5e:	000a      	movs	r2, r1
 8013b60:	0001      	movs	r1, r0
 8013b62:	0013      	movs	r3, r2
 8013b64:	9106      	str	r1, [sp, #24]
 8013b66:	9207      	str	r2, [sp, #28]
 8013b68:	0002      	movs	r2, r0
 8013b6a:	0039      	movs	r1, r7
 8013b6c:	0030      	movs	r0, r6
 8013b6e:	f7fd f863 	bl	8010c38 <__aeabi_dsub>
 8013b72:	9a02      	ldr	r2, [sp, #8]
 8013b74:	9b03      	ldr	r3, [sp, #12]
 8013b76:	f7fd f85f 	bl	8010c38 <__aeabi_dsub>
 8013b7a:	0006      	movs	r6, r0
 8013b7c:	000f      	movs	r7, r1
 8013b7e:	9804      	ldr	r0, [sp, #16]
 8013b80:	9905      	ldr	r1, [sp, #20]
 8013b82:	4a61      	ldr	r2, [pc, #388]	; (8013d08 <__ieee754_rem_pio2+0x3cc>)
 8013b84:	4b61      	ldr	r3, [pc, #388]	; (8013d0c <__ieee754_rem_pio2+0x3d0>)
 8013b86:	f7fc fde5 	bl	8010754 <__aeabi_dmul>
 8013b8a:	0032      	movs	r2, r6
 8013b8c:	003b      	movs	r3, r7
 8013b8e:	f7fd f853 	bl	8010c38 <__aeabi_dsub>
 8013b92:	9e06      	ldr	r6, [sp, #24]
 8013b94:	9f07      	ldr	r7, [sp, #28]
 8013b96:	000b      	movs	r3, r1
 8013b98:	0002      	movs	r2, r0
 8013b9a:	0039      	movs	r1, r7
 8013b9c:	0030      	movs	r0, r6
 8013b9e:	9202      	str	r2, [sp, #8]
 8013ba0:	9303      	str	r3, [sp, #12]
 8013ba2:	f7fd f849 	bl	8010c38 <__aeabi_dsub>
 8013ba6:	004b      	lsls	r3, r1, #1
 8013ba8:	0d5b      	lsrs	r3, r3, #21
 8013baa:	4683      	mov	fp, r0
 8013bac:	468a      	mov	sl, r1
 8013bae:	1ae4      	subs	r4, r4, r3
 8013bb0:	2c31      	cmp	r4, #49	; 0x31
 8013bb2:	dd32      	ble.n	8013c1a <__ieee754_rem_pio2+0x2de>
 8013bb4:	9804      	ldr	r0, [sp, #16]
 8013bb6:	9905      	ldr	r1, [sp, #20]
 8013bb8:	22b8      	movs	r2, #184	; 0xb8
 8013bba:	4b54      	ldr	r3, [pc, #336]	; (8013d0c <__ieee754_rem_pio2+0x3d0>)
 8013bbc:	0592      	lsls	r2, r2, #22
 8013bbe:	f7fc fdc9 	bl	8010754 <__aeabi_dmul>
 8013bc2:	0003      	movs	r3, r0
 8013bc4:	000c      	movs	r4, r1
 8013bc6:	0002      	movs	r2, r0
 8013bc8:	9302      	str	r3, [sp, #8]
 8013bca:	9403      	str	r4, [sp, #12]
 8013bcc:	000b      	movs	r3, r1
 8013bce:	9806      	ldr	r0, [sp, #24]
 8013bd0:	9907      	ldr	r1, [sp, #28]
 8013bd2:	f7fd f831 	bl	8010c38 <__aeabi_dsub>
 8013bd6:	0002      	movs	r2, r0
 8013bd8:	000b      	movs	r3, r1
 8013bda:	0006      	movs	r6, r0
 8013bdc:	000f      	movs	r7, r1
 8013bde:	9806      	ldr	r0, [sp, #24]
 8013be0:	9907      	ldr	r1, [sp, #28]
 8013be2:	f7fd f829 	bl	8010c38 <__aeabi_dsub>
 8013be6:	9a02      	ldr	r2, [sp, #8]
 8013be8:	9b03      	ldr	r3, [sp, #12]
 8013bea:	f7fd f825 	bl	8010c38 <__aeabi_dsub>
 8013bee:	4a48      	ldr	r2, [pc, #288]	; (8013d10 <__ieee754_rem_pio2+0x3d4>)
 8013bf0:	9002      	str	r0, [sp, #8]
 8013bf2:	9103      	str	r1, [sp, #12]
 8013bf4:	9804      	ldr	r0, [sp, #16]
 8013bf6:	9905      	ldr	r1, [sp, #20]
 8013bf8:	4b46      	ldr	r3, [pc, #280]	; (8013d14 <__ieee754_rem_pio2+0x3d8>)
 8013bfa:	f7fc fdab 	bl	8010754 <__aeabi_dmul>
 8013bfe:	9a02      	ldr	r2, [sp, #8]
 8013c00:	9b03      	ldr	r3, [sp, #12]
 8013c02:	f7fd f819 	bl	8010c38 <__aeabi_dsub>
 8013c06:	0002      	movs	r2, r0
 8013c08:	000b      	movs	r3, r1
 8013c0a:	0030      	movs	r0, r6
 8013c0c:	0039      	movs	r1, r7
 8013c0e:	9202      	str	r2, [sp, #8]
 8013c10:	9303      	str	r3, [sp, #12]
 8013c12:	f7fd f811 	bl	8010c38 <__aeabi_dsub>
 8013c16:	4683      	mov	fp, r0
 8013c18:	468a      	mov	sl, r1
 8013c1a:	465a      	mov	r2, fp
 8013c1c:	4653      	mov	r3, sl
 8013c1e:	4641      	mov	r1, r8
 8013c20:	0030      	movs	r0, r6
 8013c22:	600a      	str	r2, [r1, #0]
 8013c24:	604b      	str	r3, [r1, #4]
 8013c26:	0039      	movs	r1, r7
 8013c28:	f7fd f806 	bl	8010c38 <__aeabi_dsub>
 8013c2c:	9a02      	ldr	r2, [sp, #8]
 8013c2e:	9b03      	ldr	r3, [sp, #12]
 8013c30:	f7fd f802 	bl	8010c38 <__aeabi_dsub>
 8013c34:	4644      	mov	r4, r8
 8013c36:	000b      	movs	r3, r1
 8013c38:	0002      	movs	r2, r0
 8013c3a:	60a2      	str	r2, [r4, #8]
 8013c3c:	60e3      	str	r3, [r4, #12]
 8013c3e:	464b      	mov	r3, r9
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	db00      	blt.n	8013c46 <__ieee754_rem_pio2+0x30a>
 8013c44:	e71b      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013c46:	465b      	mov	r3, fp
 8013c48:	6023      	str	r3, [r4, #0]
 8013c4a:	2380      	movs	r3, #128	; 0x80
 8013c4c:	061b      	lsls	r3, r3, #24
 8013c4e:	4453      	add	r3, sl
 8013c50:	6063      	str	r3, [r4, #4]
 8013c52:	2380      	movs	r3, #128	; 0x80
 8013c54:	061b      	lsls	r3, r3, #24
 8013c56:	469c      	mov	ip, r3
 8013c58:	4461      	add	r1, ip
 8013c5a:	60a0      	str	r0, [r4, #8]
 8013c5c:	60e1      	str	r1, [r4, #12]
 8013c5e:	426d      	negs	r5, r5
 8013c60:	e70d      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013c62:	000b      	movs	r3, r1
 8013c64:	0002      	movs	r2, r0
 8013c66:	f7fc ffe7 	bl	8010c38 <__aeabi_dsub>
 8013c6a:	4643      	mov	r3, r8
 8013c6c:	2500      	movs	r5, #0
 8013c6e:	6098      	str	r0, [r3, #8]
 8013c70:	60d9      	str	r1, [r3, #12]
 8013c72:	6018      	str	r0, [r3, #0]
 8013c74:	6059      	str	r1, [r3, #4]
 8013c76:	e702      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013c78:	22d3      	movs	r2, #211	; 0xd3
 8013c7a:	4b1a      	ldr	r3, [pc, #104]	; (8013ce4 <__ieee754_rem_pio2+0x3a8>)
 8013c7c:	0552      	lsls	r2, r2, #21
 8013c7e:	f7fc ffdb 	bl	8010c38 <__aeabi_dsub>
 8013c82:	4a21      	ldr	r2, [pc, #132]	; (8013d08 <__ieee754_rem_pio2+0x3cc>)
 8013c84:	4b21      	ldr	r3, [pc, #132]	; (8013d0c <__ieee754_rem_pio2+0x3d0>)
 8013c86:	000d      	movs	r5, r1
 8013c88:	0004      	movs	r4, r0
 8013c8a:	f7fc ffd5 	bl	8010c38 <__aeabi_dsub>
 8013c8e:	0002      	movs	r2, r0
 8013c90:	000b      	movs	r3, r1
 8013c92:	4641      	mov	r1, r8
 8013c94:	0020      	movs	r0, r4
 8013c96:	600a      	str	r2, [r1, #0]
 8013c98:	604b      	str	r3, [r1, #4]
 8013c9a:	0029      	movs	r1, r5
 8013c9c:	f7fc ffcc 	bl	8010c38 <__aeabi_dsub>
 8013ca0:	4b1a      	ldr	r3, [pc, #104]	; (8013d0c <__ieee754_rem_pio2+0x3d0>)
 8013ca2:	4a19      	ldr	r2, [pc, #100]	; (8013d08 <__ieee754_rem_pio2+0x3cc>)
 8013ca4:	f7fc ffc8 	bl	8010c38 <__aeabi_dsub>
 8013ca8:	4643      	mov	r3, r8
 8013caa:	2501      	movs	r5, #1
 8013cac:	6098      	str	r0, [r3, #8]
 8013cae:	60d9      	str	r1, [r3, #12]
 8013cb0:	e6e5      	b.n	8013a7e <__ieee754_rem_pio2+0x142>
 8013cb2:	0002      	movs	r2, r0
 8013cb4:	000b      	movs	r3, r1
 8013cb6:	0030      	movs	r0, r6
 8013cb8:	0039      	movs	r1, r7
 8013cba:	f7fc ffbd 	bl	8010c38 <__aeabi_dsub>
 8013cbe:	1e6b      	subs	r3, r5, #1
 8013cc0:	4a15      	ldr	r2, [pc, #84]	; (8013d18 <__ieee754_rem_pio2+0x3dc>)
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	589b      	ldr	r3, [r3, r2]
 8013cc6:	4683      	mov	fp, r0
 8013cc8:	468a      	mov	sl, r1
 8013cca:	42a3      	cmp	r3, r4
 8013ccc:	d1a5      	bne.n	8013c1a <__ieee754_rem_pio2+0x2de>
 8013cce:	e730      	b.n	8013b32 <__ieee754_rem_pio2+0x1f6>
 8013cd0:	3fe921fb 	.word	0x3fe921fb
 8013cd4:	4002d97b 	.word	0x4002d97b
 8013cd8:	54400000 	.word	0x54400000
 8013cdc:	3ff921fb 	.word	0x3ff921fb
 8013ce0:	1a626331 	.word	0x1a626331
 8013ce4:	3dd0b461 	.word	0x3dd0b461
 8013ce8:	413921fb 	.word	0x413921fb
 8013cec:	7fefffff 	.word	0x7fefffff
 8013cf0:	fffffbea 	.word	0xfffffbea
 8013cf4:	41700000 	.word	0x41700000
 8013cf8:	0801eac4 	.word	0x0801eac4
 8013cfc:	6dc9c883 	.word	0x6dc9c883
 8013d00:	3fe45f30 	.word	0x3fe45f30
 8013d04:	3fe00000 	.word	0x3fe00000
 8013d08:	2e037073 	.word	0x2e037073
 8013d0c:	3ba3198a 	.word	0x3ba3198a
 8013d10:	252049c1 	.word	0x252049c1
 8013d14:	397b839a 	.word	0x397b839a
 8013d18:	0801ea44 	.word	0x0801ea44
 8013d1c:	22d3      	movs	r2, #211	; 0xd3
 8013d1e:	4b0c      	ldr	r3, [pc, #48]	; (8013d50 <__ieee754_rem_pio2+0x414>)
 8013d20:	0552      	lsls	r2, r2, #21
 8013d22:	f7fb fdf1 	bl	800f908 <__aeabi_dadd>
 8013d26:	4a0b      	ldr	r2, [pc, #44]	; (8013d54 <__ieee754_rem_pio2+0x418>)
 8013d28:	4b0b      	ldr	r3, [pc, #44]	; (8013d58 <__ieee754_rem_pio2+0x41c>)
 8013d2a:	0004      	movs	r4, r0
 8013d2c:	000d      	movs	r5, r1
 8013d2e:	f7fb fdeb 	bl	800f908 <__aeabi_dadd>
 8013d32:	0002      	movs	r2, r0
 8013d34:	000b      	movs	r3, r1
 8013d36:	4641      	mov	r1, r8
 8013d38:	0020      	movs	r0, r4
 8013d3a:	600a      	str	r2, [r1, #0]
 8013d3c:	604b      	str	r3, [r1, #4]
 8013d3e:	0029      	movs	r1, r5
 8013d40:	f7fc ff7a 	bl	8010c38 <__aeabi_dsub>
 8013d44:	4a03      	ldr	r2, [pc, #12]	; (8013d54 <__ieee754_rem_pio2+0x418>)
 8013d46:	4b04      	ldr	r3, [pc, #16]	; (8013d58 <__ieee754_rem_pio2+0x41c>)
 8013d48:	e6b9      	b.n	8013abe <__ieee754_rem_pio2+0x182>
 8013d4a:	2303      	movs	r3, #3
 8013d4c:	e673      	b.n	8013a36 <__ieee754_rem_pio2+0xfa>
 8013d4e:	46c0      	nop			; (mov r8, r8)
 8013d50:	3dd0b461 	.word	0x3dd0b461
 8013d54:	2e037073 	.word	0x2e037073
 8013d58:	3ba3198a 	.word	0x3ba3198a

08013d5c <__ieee754_sqrt>:
 8013d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d5e:	4647      	mov	r7, r8
 8013d60:	46ce      	mov	lr, r9
 8013d62:	4b67      	ldr	r3, [pc, #412]	; (8013f00 <__ieee754_sqrt+0x1a4>)
 8013d64:	b580      	push	{r7, lr}
 8013d66:	000a      	movs	r2, r1
 8013d68:	000f      	movs	r7, r1
 8013d6a:	0019      	movs	r1, r3
 8013d6c:	0005      	movs	r5, r0
 8013d6e:	4039      	ands	r1, r7
 8013d70:	4299      	cmp	r1, r3
 8013d72:	d100      	bne.n	8013d76 <__ieee754_sqrt+0x1a>
 8013d74:	e09b      	b.n	8013eae <__ieee754_sqrt+0x152>
 8013d76:	0004      	movs	r4, r0
 8013d78:	0001      	movs	r1, r0
 8013d7a:	2f00      	cmp	r7, #0
 8013d7c:	dd69      	ble.n	8013e52 <__ieee754_sqrt+0xf6>
 8013d7e:	153f      	asrs	r7, r7, #20
 8013d80:	d100      	bne.n	8013d84 <__ieee754_sqrt+0x28>
 8013d82:	e0b4      	b.n	8013eee <__ieee754_sqrt+0x192>
 8013d84:	4b5f      	ldr	r3, [pc, #380]	; (8013f04 <__ieee754_sqrt+0x1a8>)
 8013d86:	0312      	lsls	r2, r2, #12
 8013d88:	469c      	mov	ip, r3
 8013d8a:	2380      	movs	r3, #128	; 0x80
 8013d8c:	0b12      	lsrs	r2, r2, #12
 8013d8e:	035b      	lsls	r3, r3, #13
 8013d90:	4313      	orrs	r3, r2
 8013d92:	005b      	lsls	r3, r3, #1
 8013d94:	0fca      	lsrs	r2, r1, #31
 8013d96:	4467      	add	r7, ip
 8013d98:	189b      	adds	r3, r3, r2
 8013d9a:	004a      	lsls	r2, r1, #1
 8013d9c:	07f8      	lsls	r0, r7, #31
 8013d9e:	d503      	bpl.n	8013da8 <__ieee754_sqrt+0x4c>
 8013da0:	0fd2      	lsrs	r2, r2, #31
 8013da2:	005b      	lsls	r3, r3, #1
 8013da4:	189b      	adds	r3, r3, r2
 8013da6:	008a      	lsls	r2, r1, #2
 8013da8:	1079      	asrs	r1, r7, #1
 8013daa:	468c      	mov	ip, r1
 8013dac:	2100      	movs	r1, #0
 8013dae:	2080      	movs	r0, #128	; 0x80
 8013db0:	2416      	movs	r4, #22
 8013db2:	4689      	mov	r9, r1
 8013db4:	0380      	lsls	r0, r0, #14
 8013db6:	180d      	adds	r5, r1, r0
 8013db8:	429d      	cmp	r5, r3
 8013dba:	dc02      	bgt.n	8013dc2 <__ieee754_sqrt+0x66>
 8013dbc:	1829      	adds	r1, r5, r0
 8013dbe:	1b5b      	subs	r3, r3, r5
 8013dc0:	4481      	add	r9, r0
 8013dc2:	0fd5      	lsrs	r5, r2, #31
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	3c01      	subs	r4, #1
 8013dc8:	195b      	adds	r3, r3, r5
 8013dca:	0052      	lsls	r2, r2, #1
 8013dcc:	0840      	lsrs	r0, r0, #1
 8013dce:	2c00      	cmp	r4, #0
 8013dd0:	d1f1      	bne.n	8013db6 <__ieee754_sqrt+0x5a>
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	4680      	mov	r8, r0
 8013dd6:	2080      	movs	r0, #128	; 0x80
 8013dd8:	2520      	movs	r5, #32
 8013dda:	2700      	movs	r7, #0
 8013ddc:	0600      	lsls	r0, r0, #24
 8013dde:	e009      	b.n	8013df4 <__ieee754_sqrt+0x98>
 8013de0:	428b      	cmp	r3, r1
 8013de2:	d05c      	beq.n	8013e9e <__ieee754_sqrt+0x142>
 8013de4:	0fd4      	lsrs	r4, r2, #31
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	3d01      	subs	r5, #1
 8013dea:	18e3      	adds	r3, r4, r3
 8013dec:	0052      	lsls	r2, r2, #1
 8013dee:	0840      	lsrs	r0, r0, #1
 8013df0:	2d00      	cmp	r5, #0
 8013df2:	d016      	beq.n	8013e22 <__ieee754_sqrt+0xc6>
 8013df4:	19c4      	adds	r4, r0, r7
 8013df6:	428b      	cmp	r3, r1
 8013df8:	ddf2      	ble.n	8013de0 <__ieee754_sqrt+0x84>
 8013dfa:	1827      	adds	r7, r4, r0
 8013dfc:	000e      	movs	r6, r1
 8013dfe:	2c00      	cmp	r4, #0
 8013e00:	db49      	blt.n	8013e96 <__ieee754_sqrt+0x13a>
 8013e02:	1a5b      	subs	r3, r3, r1
 8013e04:	42a2      	cmp	r2, r4
 8013e06:	4189      	sbcs	r1, r1
 8013e08:	4249      	negs	r1, r1
 8013e0a:	1a5b      	subs	r3, r3, r1
 8013e0c:	1b12      	subs	r2, r2, r4
 8013e0e:	0fd4      	lsrs	r4, r2, #31
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	3d01      	subs	r5, #1
 8013e14:	4480      	add	r8, r0
 8013e16:	0031      	movs	r1, r6
 8013e18:	18e3      	adds	r3, r4, r3
 8013e1a:	0052      	lsls	r2, r2, #1
 8013e1c:	0840      	lsrs	r0, r0, #1
 8013e1e:	2d00      	cmp	r5, #0
 8013e20:	d1e8      	bne.n	8013df4 <__ieee754_sqrt+0x98>
 8013e22:	4313      	orrs	r3, r2
 8013e24:	d14e      	bne.n	8013ec4 <__ieee754_sqrt+0x168>
 8013e26:	4643      	mov	r3, r8
 8013e28:	085b      	lsrs	r3, r3, #1
 8013e2a:	4937      	ldr	r1, [pc, #220]	; (8013f08 <__ieee754_sqrt+0x1ac>)
 8013e2c:	464a      	mov	r2, r9
 8013e2e:	4688      	mov	r8, r1
 8013e30:	4649      	mov	r1, r9
 8013e32:	1052      	asrs	r2, r2, #1
 8013e34:	4442      	add	r2, r8
 8013e36:	07c9      	lsls	r1, r1, #31
 8013e38:	d502      	bpl.n	8013e40 <__ieee754_sqrt+0xe4>
 8013e3a:	2180      	movs	r1, #128	; 0x80
 8013e3c:	0609      	lsls	r1, r1, #24
 8013e3e:	430b      	orrs	r3, r1
 8013e40:	4661      	mov	r1, ip
 8013e42:	050f      	lsls	r7, r1, #20
 8013e44:	18bd      	adds	r5, r7, r2
 8013e46:	0018      	movs	r0, r3
 8013e48:	0029      	movs	r1, r5
 8013e4a:	bc0c      	pop	{r2, r3}
 8013e4c:	4690      	mov	r8, r2
 8013e4e:	4699      	mov	r9, r3
 8013e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e52:	007b      	lsls	r3, r7, #1
 8013e54:	085b      	lsrs	r3, r3, #1
 8013e56:	4303      	orrs	r3, r0
 8013e58:	0039      	movs	r1, r7
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d0f5      	beq.n	8013e4a <__ieee754_sqrt+0xee>
 8013e5e:	2f00      	cmp	r7, #0
 8013e60:	d13c      	bne.n	8013edc <__ieee754_sqrt+0x180>
 8013e62:	0ae3      	lsrs	r3, r4, #11
 8013e64:	3a15      	subs	r2, #21
 8013e66:	0564      	lsls	r4, r4, #21
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d0fa      	beq.n	8013e62 <__ieee754_sqrt+0x106>
 8013e6c:	2080      	movs	r0, #128	; 0x80
 8013e6e:	0340      	lsls	r0, r0, #13
 8013e70:	4203      	tst	r3, r0
 8013e72:	d13f      	bne.n	8013ef4 <__ieee754_sqrt+0x198>
 8013e74:	2700      	movs	r7, #0
 8013e76:	e000      	b.n	8013e7a <__ieee754_sqrt+0x11e>
 8013e78:	000f      	movs	r7, r1
 8013e7a:	005b      	lsls	r3, r3, #1
 8013e7c:	1c79      	adds	r1, r7, #1
 8013e7e:	4203      	tst	r3, r0
 8013e80:	d0fa      	beq.n	8013e78 <__ieee754_sqrt+0x11c>
 8013e82:	0025      	movs	r5, r4
 8013e84:	2020      	movs	r0, #32
 8013e86:	408d      	lsls	r5, r1
 8013e88:	1a40      	subs	r0, r0, r1
 8013e8a:	0029      	movs	r1, r5
 8013e8c:	1bd7      	subs	r7, r2, r7
 8013e8e:	0022      	movs	r2, r4
 8013e90:	40c2      	lsrs	r2, r0
 8013e92:	431a      	orrs	r2, r3
 8013e94:	e776      	b.n	8013d84 <__ieee754_sqrt+0x28>
 8013e96:	43fe      	mvns	r6, r7
 8013e98:	0ff6      	lsrs	r6, r6, #31
 8013e9a:	198e      	adds	r6, r1, r6
 8013e9c:	e7b1      	b.n	8013e02 <__ieee754_sqrt+0xa6>
 8013e9e:	4294      	cmp	r4, r2
 8013ea0:	d8a0      	bhi.n	8013de4 <__ieee754_sqrt+0x88>
 8013ea2:	1827      	adds	r7, r4, r0
 8013ea4:	2c00      	cmp	r4, #0
 8013ea6:	dbf6      	blt.n	8013e96 <__ieee754_sqrt+0x13a>
 8013ea8:	001e      	movs	r6, r3
 8013eaa:	2300      	movs	r3, #0
 8013eac:	e7ae      	b.n	8013e0c <__ieee754_sqrt+0xb0>
 8013eae:	0002      	movs	r2, r0
 8013eb0:	003b      	movs	r3, r7
 8013eb2:	0028      	movs	r0, r5
 8013eb4:	0039      	movs	r1, r7
 8013eb6:	f7fc fc4d 	bl	8010754 <__aeabi_dmul>
 8013eba:	002a      	movs	r2, r5
 8013ebc:	003b      	movs	r3, r7
 8013ebe:	f7fb fd23 	bl	800f908 <__aeabi_dadd>
 8013ec2:	e7c2      	b.n	8013e4a <__ieee754_sqrt+0xee>
 8013ec4:	4643      	mov	r3, r8
 8013ec6:	3301      	adds	r3, #1
 8013ec8:	d003      	beq.n	8013ed2 <__ieee754_sqrt+0x176>
 8013eca:	4643      	mov	r3, r8
 8013ecc:	3301      	adds	r3, #1
 8013ece:	085b      	lsrs	r3, r3, #1
 8013ed0:	e7ab      	b.n	8013e2a <__ieee754_sqrt+0xce>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	4698      	mov	r8, r3
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	44c1      	add	r9, r8
 8013eda:	e7a6      	b.n	8013e2a <__ieee754_sqrt+0xce>
 8013edc:	003b      	movs	r3, r7
 8013ede:	0002      	movs	r2, r0
 8013ee0:	f7fc feaa 	bl	8010c38 <__aeabi_dsub>
 8013ee4:	0002      	movs	r2, r0
 8013ee6:	000b      	movs	r3, r1
 8013ee8:	f7fc f82a 	bl	800ff40 <__aeabi_ddiv>
 8013eec:	e7ad      	b.n	8013e4a <__ieee754_sqrt+0xee>
 8013eee:	0013      	movs	r3, r2
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	e7bb      	b.n	8013e6c <__ieee754_sqrt+0x110>
 8013ef4:	2701      	movs	r7, #1
 8013ef6:	0021      	movs	r1, r4
 8013ef8:	2020      	movs	r0, #32
 8013efa:	427f      	negs	r7, r7
 8013efc:	e7c6      	b.n	8013e8c <__ieee754_sqrt+0x130>
 8013efe:	46c0      	nop			; (mov r8, r8)
 8013f00:	7ff00000 	.word	0x7ff00000
 8013f04:	fffffc01 	.word	0xfffffc01
 8013f08:	3fe00000 	.word	0x3fe00000

08013f0c <__ieee754_expf>:
 8013f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f0e:	22ff      	movs	r2, #255	; 0xff
 8013f10:	46d6      	mov	lr, sl
 8013f12:	464f      	mov	r7, r9
 8013f14:	4646      	mov	r6, r8
 8013f16:	0043      	lsls	r3, r0, #1
 8013f18:	b5c0      	push	{r6, r7, lr}
 8013f1a:	1c04      	adds	r4, r0, #0
 8013f1c:	0001      	movs	r1, r0
 8013f1e:	085b      	lsrs	r3, r3, #1
 8013f20:	05d2      	lsls	r2, r2, #23
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d831      	bhi.n	8013f8a <__ieee754_expf+0x7e>
 8013f26:	0fc5      	lsrs	r5, r0, #31
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d035      	beq.n	8013f98 <__ieee754_expf+0x8c>
 8013f2c:	4a63      	ldr	r2, [pc, #396]	; (80140bc <__ieee754_expf+0x1b0>)
 8013f2e:	4290      	cmp	r0, r2
 8013f30:	dc36      	bgt.n	8013fa0 <__ieee754_expf+0x94>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	da00      	bge.n	8013f38 <__ieee754_expf+0x2c>
 8013f36:	e088      	b.n	801404a <__ieee754_expf+0x13e>
 8013f38:	4a61      	ldr	r2, [pc, #388]	; (80140c0 <__ieee754_expf+0x1b4>)
 8013f3a:	4293      	cmp	r3, r2
 8013f3c:	d935      	bls.n	8013faa <__ieee754_expf+0x9e>
 8013f3e:	4a61      	ldr	r2, [pc, #388]	; (80140c4 <__ieee754_expf+0x1b8>)
 8013f40:	4293      	cmp	r3, r2
 8013f42:	d800      	bhi.n	8013f46 <__ieee754_expf+0x3a>
 8013f44:	e0a9      	b.n	801409a <__ieee754_expf+0x18e>
 8013f46:	4960      	ldr	r1, [pc, #384]	; (80140c8 <__ieee754_expf+0x1bc>)
 8013f48:	1c20      	adds	r0, r4, #0
 8013f4a:	f7fa fd1f 	bl	800e98c <__aeabi_fmul>
 8013f4e:	4b5f      	ldr	r3, [pc, #380]	; (80140cc <__ieee754_expf+0x1c0>)
 8013f50:	00ad      	lsls	r5, r5, #2
 8013f52:	58e9      	ldr	r1, [r5, r3]
 8013f54:	f7fa fa6e 	bl	800e434 <__aeabi_fadd>
 8013f58:	f7fb fc2c 	bl	800f7b4 <__aeabi_f2iz>
 8013f5c:	0005      	movs	r5, r0
 8013f5e:	f7fb fc49 	bl	800f7f4 <__aeabi_i2f>
 8013f62:	495b      	ldr	r1, [pc, #364]	; (80140d0 <__ieee754_expf+0x1c4>)
 8013f64:	1c07      	adds	r7, r0, #0
 8013f66:	f7fa fd11 	bl	800e98c <__aeabi_fmul>
 8013f6a:	1c01      	adds	r1, r0, #0
 8013f6c:	1c20      	adds	r0, r4, #0
 8013f6e:	f7fa fe3f 	bl	800ebf0 <__aeabi_fsub>
 8013f72:	4958      	ldr	r1, [pc, #352]	; (80140d4 <__ieee754_expf+0x1c8>)
 8013f74:	4682      	mov	sl, r0
 8013f76:	1c38      	adds	r0, r7, #0
 8013f78:	f7fa fd08 	bl	800e98c <__aeabi_fmul>
 8013f7c:	1c07      	adds	r7, r0, #0
 8013f7e:	1c39      	adds	r1, r7, #0
 8013f80:	4650      	mov	r0, sl
 8013f82:	f7fa fe35 	bl	800ebf0 <__aeabi_fsub>
 8013f86:	1c04      	adds	r4, r0, #0
 8013f88:	e013      	b.n	8013fb2 <__ieee754_expf+0xa6>
 8013f8a:	f7fa fa53 	bl	800e434 <__aeabi_fadd>
 8013f8e:	bc1c      	pop	{r2, r3, r4}
 8013f90:	4690      	mov	r8, r2
 8013f92:	4699      	mov	r9, r3
 8013f94:	46a2      	mov	sl, r4
 8013f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f98:	2d00      	cmp	r5, #0
 8013f9a:	d0f8      	beq.n	8013f8e <__ieee754_expf+0x82>
 8013f9c:	2000      	movs	r0, #0
 8013f9e:	e7f6      	b.n	8013f8e <__ieee754_expf+0x82>
 8013fa0:	494d      	ldr	r1, [pc, #308]	; (80140d8 <__ieee754_expf+0x1cc>)
 8013fa2:	1c08      	adds	r0, r1, #0
 8013fa4:	f7fa fcf2 	bl	800e98c <__aeabi_fmul>
 8013fa8:	e7f1      	b.n	8013f8e <__ieee754_expf+0x82>
 8013faa:	4a4c      	ldr	r2, [pc, #304]	; (80140dc <__ieee754_expf+0x1d0>)
 8013fac:	4293      	cmp	r3, r2
 8013fae:	d964      	bls.n	801407a <__ieee754_expf+0x16e>
 8013fb0:	2500      	movs	r5, #0
 8013fb2:	1c21      	adds	r1, r4, #0
 8013fb4:	1c20      	adds	r0, r4, #0
 8013fb6:	f7fa fce9 	bl	800e98c <__aeabi_fmul>
 8013fba:	4949      	ldr	r1, [pc, #292]	; (80140e0 <__ieee754_expf+0x1d4>)
 8013fbc:	1c06      	adds	r6, r0, #0
 8013fbe:	f7fa fce5 	bl	800e98c <__aeabi_fmul>
 8013fc2:	4948      	ldr	r1, [pc, #288]	; (80140e4 <__ieee754_expf+0x1d8>)
 8013fc4:	f7fa fe14 	bl	800ebf0 <__aeabi_fsub>
 8013fc8:	1c31      	adds	r1, r6, #0
 8013fca:	f7fa fcdf 	bl	800e98c <__aeabi_fmul>
 8013fce:	4946      	ldr	r1, [pc, #280]	; (80140e8 <__ieee754_expf+0x1dc>)
 8013fd0:	f7fa fa30 	bl	800e434 <__aeabi_fadd>
 8013fd4:	1c31      	adds	r1, r6, #0
 8013fd6:	f7fa fcd9 	bl	800e98c <__aeabi_fmul>
 8013fda:	4944      	ldr	r1, [pc, #272]	; (80140ec <__ieee754_expf+0x1e0>)
 8013fdc:	f7fa fe08 	bl	800ebf0 <__aeabi_fsub>
 8013fe0:	1c31      	adds	r1, r6, #0
 8013fe2:	f7fa fcd3 	bl	800e98c <__aeabi_fmul>
 8013fe6:	4942      	ldr	r1, [pc, #264]	; (80140f0 <__ieee754_expf+0x1e4>)
 8013fe8:	f7fa fa24 	bl	800e434 <__aeabi_fadd>
 8013fec:	1c31      	adds	r1, r6, #0
 8013fee:	f7fa fccd 	bl	800e98c <__aeabi_fmul>
 8013ff2:	1c01      	adds	r1, r0, #0
 8013ff4:	1c20      	adds	r0, r4, #0
 8013ff6:	f7fa fdfb 	bl	800ebf0 <__aeabi_fsub>
 8013ffa:	1c01      	adds	r1, r0, #0
 8013ffc:	4680      	mov	r8, r0
 8013ffe:	1c20      	adds	r0, r4, #0
 8014000:	f7fa fcc4 	bl	800e98c <__aeabi_fmul>
 8014004:	4681      	mov	r9, r0
 8014006:	2d00      	cmp	r5, #0
 8014008:	d025      	beq.n	8014056 <__ieee754_expf+0x14a>
 801400a:	2080      	movs	r0, #128	; 0x80
 801400c:	4641      	mov	r1, r8
 801400e:	05c0      	lsls	r0, r0, #23
 8014010:	f7fa fdee 	bl	800ebf0 <__aeabi_fsub>
 8014014:	1c01      	adds	r1, r0, #0
 8014016:	4648      	mov	r0, r9
 8014018:	f7fa fba6 	bl	800e768 <__aeabi_fdiv>
 801401c:	1c01      	adds	r1, r0, #0
 801401e:	1c38      	adds	r0, r7, #0
 8014020:	f7fa fde6 	bl	800ebf0 <__aeabi_fsub>
 8014024:	4651      	mov	r1, sl
 8014026:	f7fa fde3 	bl	800ebf0 <__aeabi_fsub>
 801402a:	1c01      	adds	r1, r0, #0
 801402c:	20fe      	movs	r0, #254	; 0xfe
 801402e:	0580      	lsls	r0, r0, #22
 8014030:	f7fa fdde 	bl	800ebf0 <__aeabi_fsub>
 8014034:	002b      	movs	r3, r5
 8014036:	337d      	adds	r3, #125	; 0x7d
 8014038:	da3c      	bge.n	80140b4 <__ieee754_expf+0x1a8>
 801403a:	21d8      	movs	r1, #216	; 0xd8
 801403c:	3564      	adds	r5, #100	; 0x64
 801403e:	05ed      	lsls	r5, r5, #23
 8014040:	1828      	adds	r0, r5, r0
 8014042:	0509      	lsls	r1, r1, #20
 8014044:	f7fa fca2 	bl	800e98c <__aeabi_fmul>
 8014048:	e7a1      	b.n	8013f8e <__ieee754_expf+0x82>
 801404a:	4a2a      	ldr	r2, [pc, #168]	; (80140f4 <__ieee754_expf+0x1e8>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d800      	bhi.n	8014052 <__ieee754_expf+0x146>
 8014050:	e772      	b.n	8013f38 <__ieee754_expf+0x2c>
 8014052:	2000      	movs	r0, #0
 8014054:	e79b      	b.n	8013f8e <__ieee754_expf+0x82>
 8014056:	2180      	movs	r1, #128	; 0x80
 8014058:	4640      	mov	r0, r8
 801405a:	05c9      	lsls	r1, r1, #23
 801405c:	f7fa fdc8 	bl	800ebf0 <__aeabi_fsub>
 8014060:	1c01      	adds	r1, r0, #0
 8014062:	4648      	mov	r0, r9
 8014064:	f7fa fb80 	bl	800e768 <__aeabi_fdiv>
 8014068:	1c21      	adds	r1, r4, #0
 801406a:	f7fa fdc1 	bl	800ebf0 <__aeabi_fsub>
 801406e:	1c01      	adds	r1, r0, #0
 8014070:	20fe      	movs	r0, #254	; 0xfe
 8014072:	0580      	lsls	r0, r0, #22
 8014074:	f7fa fdbc 	bl	800ebf0 <__aeabi_fsub>
 8014078:	e789      	b.n	8013f8e <__ieee754_expf+0x82>
 801407a:	4917      	ldr	r1, [pc, #92]	; (80140d8 <__ieee754_expf+0x1cc>)
 801407c:	1c20      	adds	r0, r4, #0
 801407e:	f7fa f9d9 	bl	800e434 <__aeabi_fadd>
 8014082:	21fe      	movs	r1, #254	; 0xfe
 8014084:	0589      	lsls	r1, r1, #22
 8014086:	f7fb f98d 	bl	800f3a4 <__aeabi_fcmpgt>
 801408a:	2800      	cmp	r0, #0
 801408c:	d090      	beq.n	8013fb0 <__ieee754_expf+0xa4>
 801408e:	21fe      	movs	r1, #254	; 0xfe
 8014090:	1c20      	adds	r0, r4, #0
 8014092:	0589      	lsls	r1, r1, #22
 8014094:	f7fa f9ce 	bl	800e434 <__aeabi_fadd>
 8014098:	e779      	b.n	8013f8e <__ieee754_expf+0x82>
 801409a:	4b17      	ldr	r3, [pc, #92]	; (80140f8 <__ieee754_expf+0x1ec>)
 801409c:	00af      	lsls	r7, r5, #2
 801409e:	58f9      	ldr	r1, [r7, r3]
 80140a0:	1c20      	adds	r0, r4, #0
 80140a2:	2401      	movs	r4, #1
 80140a4:	f7fa fda4 	bl	800ebf0 <__aeabi_fsub>
 80140a8:	4b14      	ldr	r3, [pc, #80]	; (80140fc <__ieee754_expf+0x1f0>)
 80140aa:	1b64      	subs	r4, r4, r5
 80140ac:	4682      	mov	sl, r0
 80140ae:	58ff      	ldr	r7, [r7, r3]
 80140b0:	1b65      	subs	r5, r4, r5
 80140b2:	e764      	b.n	8013f7e <__ieee754_expf+0x72>
 80140b4:	05ed      	lsls	r5, r5, #23
 80140b6:	1828      	adds	r0, r5, r0
 80140b8:	e769      	b.n	8013f8e <__ieee754_expf+0x82>
 80140ba:	46c0      	nop			; (mov r8, r8)
 80140bc:	42b17217 	.word	0x42b17217
 80140c0:	3eb17218 	.word	0x3eb17218
 80140c4:	3f851591 	.word	0x3f851591
 80140c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80140cc:	0801ebcc 	.word	0x0801ebcc
 80140d0:	3f317180 	.word	0x3f317180
 80140d4:	3717f7d1 	.word	0x3717f7d1
 80140d8:	7149f2ca 	.word	0x7149f2ca
 80140dc:	317fffff 	.word	0x317fffff
 80140e0:	3331bb4c 	.word	0x3331bb4c
 80140e4:	35ddea0e 	.word	0x35ddea0e
 80140e8:	388ab355 	.word	0x388ab355
 80140ec:	3b360b61 	.word	0x3b360b61
 80140f0:	3e2aaaab 	.word	0x3e2aaaab
 80140f4:	42cff1b5 	.word	0x42cff1b5
 80140f8:	0801ebd4 	.word	0x0801ebd4
 80140fc:	0801ebdc 	.word	0x0801ebdc

08014100 <__ieee754_log10f>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	0003      	movs	r3, r0
 8014104:	0042      	lsls	r2, r0, #1
 8014106:	d037      	beq.n	8014178 <__ieee754_log10f+0x78>
 8014108:	2800      	cmp	r0, #0
 801410a:	db3b      	blt.n	8014184 <__ieee754_log10f+0x84>
 801410c:	4a23      	ldr	r2, [pc, #140]	; (801419c <__ieee754_log10f+0x9c>)
 801410e:	4290      	cmp	r0, r2
 8014110:	dc3f      	bgt.n	8014192 <__ieee754_log10f+0x92>
 8014112:	4923      	ldr	r1, [pc, #140]	; (80141a0 <__ieee754_log10f+0xa0>)
 8014114:	2200      	movs	r2, #0
 8014116:	4288      	cmp	r0, r1
 8014118:	dc06      	bgt.n	8014128 <__ieee754_log10f+0x28>
 801411a:	2198      	movs	r1, #152	; 0x98
 801411c:	05c9      	lsls	r1, r1, #23
 801411e:	f7fa fc35 	bl	800e98c <__aeabi_fmul>
 8014122:	2219      	movs	r2, #25
 8014124:	0003      	movs	r3, r0
 8014126:	4252      	negs	r2, r2
 8014128:	15d8      	asrs	r0, r3, #23
 801412a:	387f      	subs	r0, #127	; 0x7f
 801412c:	1880      	adds	r0, r0, r2
 801412e:	0fc6      	lsrs	r6, r0, #31
 8014130:	025b      	lsls	r3, r3, #9
 8014132:	1980      	adds	r0, r0, r6
 8014134:	0a5c      	lsrs	r4, r3, #9
 8014136:	f7fb fb5d 	bl	800f7f4 <__aeabi_i2f>
 801413a:	1c05      	adds	r5, r0, #0
 801413c:	207f      	movs	r0, #127	; 0x7f
 801413e:	1b80      	subs	r0, r0, r6
 8014140:	05c0      	lsls	r0, r0, #23
 8014142:	4320      	orrs	r0, r4
 8014144:	f000 ff7a 	bl	801503c <__ieee754_logf>
 8014148:	4916      	ldr	r1, [pc, #88]	; (80141a4 <__ieee754_log10f+0xa4>)
 801414a:	1c06      	adds	r6, r0, #0
 801414c:	1c28      	adds	r0, r5, #0
 801414e:	f7fa fc1d 	bl	800e98c <__aeabi_fmul>
 8014152:	4915      	ldr	r1, [pc, #84]	; (80141a8 <__ieee754_log10f+0xa8>)
 8014154:	1c04      	adds	r4, r0, #0
 8014156:	1c30      	adds	r0, r6, #0
 8014158:	f7fa fc18 	bl	800e98c <__aeabi_fmul>
 801415c:	1c01      	adds	r1, r0, #0
 801415e:	1c20      	adds	r0, r4, #0
 8014160:	f7fa f968 	bl	800e434 <__aeabi_fadd>
 8014164:	4911      	ldr	r1, [pc, #68]	; (80141ac <__ieee754_log10f+0xac>)
 8014166:	1c04      	adds	r4, r0, #0
 8014168:	1c28      	adds	r0, r5, #0
 801416a:	f7fa fc0f 	bl	800e98c <__aeabi_fmul>
 801416e:	1c01      	adds	r1, r0, #0
 8014170:	1c20      	adds	r0, r4, #0
 8014172:	f7fa f95f 	bl	800e434 <__aeabi_fadd>
 8014176:	e004      	b.n	8014182 <__ieee754_log10f+0x82>
 8014178:	20cc      	movs	r0, #204	; 0xcc
 801417a:	2100      	movs	r1, #0
 801417c:	0600      	lsls	r0, r0, #24
 801417e:	f7fa faf3 	bl	800e768 <__aeabi_fdiv>
 8014182:	bd70      	pop	{r4, r5, r6, pc}
 8014184:	1c01      	adds	r1, r0, #0
 8014186:	f7fa fd33 	bl	800ebf0 <__aeabi_fsub>
 801418a:	2100      	movs	r1, #0
 801418c:	f7fa faec 	bl	800e768 <__aeabi_fdiv>
 8014190:	e7f7      	b.n	8014182 <__ieee754_log10f+0x82>
 8014192:	1c01      	adds	r1, r0, #0
 8014194:	f7fa f94e 	bl	800e434 <__aeabi_fadd>
 8014198:	e7f3      	b.n	8014182 <__ieee754_log10f+0x82>
 801419a:	46c0      	nop			; (mov r8, r8)
 801419c:	7f7fffff 	.word	0x7f7fffff
 80141a0:	007fffff 	.word	0x007fffff
 80141a4:	355427db 	.word	0x355427db
 80141a8:	3ede5bd9 	.word	0x3ede5bd9
 80141ac:	3e9a2080 	.word	0x3e9a2080

080141b0 <__kernel_cos>:
 80141b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141b2:	4647      	mov	r7, r8
 80141b4:	46ce      	mov	lr, r9
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b087      	sub	sp, #28
 80141ba:	9200      	str	r2, [sp, #0]
 80141bc:	9301      	str	r3, [sp, #4]
 80141be:	4b75      	ldr	r3, [pc, #468]	; (8014394 <__kernel_cos+0x1e4>)
 80141c0:	004f      	lsls	r7, r1, #1
 80141c2:	4681      	mov	r9, r0
 80141c4:	4688      	mov	r8, r1
 80141c6:	087f      	lsrs	r7, r7, #1
 80141c8:	429f      	cmp	r7, r3
 80141ca:	dc63      	bgt.n	8014294 <__kernel_cos+0xe4>
 80141cc:	f7fd f898 	bl	8011300 <__aeabi_d2iz>
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d100      	bne.n	80141d6 <__kernel_cos+0x26>
 80141d4:	e0d4      	b.n	8014380 <__kernel_cos+0x1d0>
 80141d6:	464a      	mov	r2, r9
 80141d8:	4643      	mov	r3, r8
 80141da:	4648      	mov	r0, r9
 80141dc:	4641      	mov	r1, r8
 80141de:	f7fc fab9 	bl	8010754 <__aeabi_dmul>
 80141e2:	0004      	movs	r4, r0
 80141e4:	000d      	movs	r5, r1
 80141e6:	4a6c      	ldr	r2, [pc, #432]	; (8014398 <__kernel_cos+0x1e8>)
 80141e8:	4b6c      	ldr	r3, [pc, #432]	; (801439c <__kernel_cos+0x1ec>)
 80141ea:	f7fc fab3 	bl	8010754 <__aeabi_dmul>
 80141ee:	4a6c      	ldr	r2, [pc, #432]	; (80143a0 <__kernel_cos+0x1f0>)
 80141f0:	4b6c      	ldr	r3, [pc, #432]	; (80143a4 <__kernel_cos+0x1f4>)
 80141f2:	f7fb fb89 	bl	800f908 <__aeabi_dadd>
 80141f6:	0022      	movs	r2, r4
 80141f8:	002b      	movs	r3, r5
 80141fa:	f7fc faab 	bl	8010754 <__aeabi_dmul>
 80141fe:	4a6a      	ldr	r2, [pc, #424]	; (80143a8 <__kernel_cos+0x1f8>)
 8014200:	4b6a      	ldr	r3, [pc, #424]	; (80143ac <__kernel_cos+0x1fc>)
 8014202:	f7fc fd19 	bl	8010c38 <__aeabi_dsub>
 8014206:	0022      	movs	r2, r4
 8014208:	002b      	movs	r3, r5
 801420a:	f7fc faa3 	bl	8010754 <__aeabi_dmul>
 801420e:	4a68      	ldr	r2, [pc, #416]	; (80143b0 <__kernel_cos+0x200>)
 8014210:	4b68      	ldr	r3, [pc, #416]	; (80143b4 <__kernel_cos+0x204>)
 8014212:	f7fb fb79 	bl	800f908 <__aeabi_dadd>
 8014216:	0022      	movs	r2, r4
 8014218:	002b      	movs	r3, r5
 801421a:	f7fc fa9b 	bl	8010754 <__aeabi_dmul>
 801421e:	4a66      	ldr	r2, [pc, #408]	; (80143b8 <__kernel_cos+0x208>)
 8014220:	4b66      	ldr	r3, [pc, #408]	; (80143bc <__kernel_cos+0x20c>)
 8014222:	f7fc fd09 	bl	8010c38 <__aeabi_dsub>
 8014226:	0022      	movs	r2, r4
 8014228:	002b      	movs	r3, r5
 801422a:	f7fc fa93 	bl	8010754 <__aeabi_dmul>
 801422e:	4a64      	ldr	r2, [pc, #400]	; (80143c0 <__kernel_cos+0x210>)
 8014230:	4b64      	ldr	r3, [pc, #400]	; (80143c4 <__kernel_cos+0x214>)
 8014232:	f7fb fb69 	bl	800f908 <__aeabi_dadd>
 8014236:	0022      	movs	r2, r4
 8014238:	002b      	movs	r3, r5
 801423a:	f7fc fa8b 	bl	8010754 <__aeabi_dmul>
 801423e:	9002      	str	r0, [sp, #8]
 8014240:	9103      	str	r1, [sp, #12]
 8014242:	2200      	movs	r2, #0
 8014244:	4b60      	ldr	r3, [pc, #384]	; (80143c8 <__kernel_cos+0x218>)
 8014246:	0020      	movs	r0, r4
 8014248:	0029      	movs	r1, r5
 801424a:	f7fc fa83 	bl	8010754 <__aeabi_dmul>
 801424e:	9a02      	ldr	r2, [sp, #8]
 8014250:	9b03      	ldr	r3, [sp, #12]
 8014252:	0006      	movs	r6, r0
 8014254:	000f      	movs	r7, r1
 8014256:	0020      	movs	r0, r4
 8014258:	0029      	movs	r1, r5
 801425a:	f7fc fa7b 	bl	8010754 <__aeabi_dmul>
 801425e:	9a00      	ldr	r2, [sp, #0]
 8014260:	9b01      	ldr	r3, [sp, #4]
 8014262:	0004      	movs	r4, r0
 8014264:	000d      	movs	r5, r1
 8014266:	4648      	mov	r0, r9
 8014268:	4641      	mov	r1, r8
 801426a:	f7fc fa73 	bl	8010754 <__aeabi_dmul>
 801426e:	0002      	movs	r2, r0
 8014270:	000b      	movs	r3, r1
 8014272:	0020      	movs	r0, r4
 8014274:	0029      	movs	r1, r5
 8014276:	f7fc fcdf 	bl	8010c38 <__aeabi_dsub>
 801427a:	0002      	movs	r2, r0
 801427c:	000b      	movs	r3, r1
 801427e:	0030      	movs	r0, r6
 8014280:	0039      	movs	r1, r7
 8014282:	f7fc fcd9 	bl	8010c38 <__aeabi_dsub>
 8014286:	0002      	movs	r2, r0
 8014288:	000b      	movs	r3, r1
 801428a:	2000      	movs	r0, #0
 801428c:	494f      	ldr	r1, [pc, #316]	; (80143cc <__kernel_cos+0x21c>)
 801428e:	f7fc fcd3 	bl	8010c38 <__aeabi_dsub>
 8014292:	e070      	b.n	8014376 <__kernel_cos+0x1c6>
 8014294:	0002      	movs	r2, r0
 8014296:	000b      	movs	r3, r1
 8014298:	f7fc fa5c 	bl	8010754 <__aeabi_dmul>
 801429c:	0004      	movs	r4, r0
 801429e:	000d      	movs	r5, r1
 80142a0:	4a3d      	ldr	r2, [pc, #244]	; (8014398 <__kernel_cos+0x1e8>)
 80142a2:	4b3e      	ldr	r3, [pc, #248]	; (801439c <__kernel_cos+0x1ec>)
 80142a4:	f7fc fa56 	bl	8010754 <__aeabi_dmul>
 80142a8:	4a3d      	ldr	r2, [pc, #244]	; (80143a0 <__kernel_cos+0x1f0>)
 80142aa:	4b3e      	ldr	r3, [pc, #248]	; (80143a4 <__kernel_cos+0x1f4>)
 80142ac:	f7fb fb2c 	bl	800f908 <__aeabi_dadd>
 80142b0:	0022      	movs	r2, r4
 80142b2:	002b      	movs	r3, r5
 80142b4:	f7fc fa4e 	bl	8010754 <__aeabi_dmul>
 80142b8:	4a3b      	ldr	r2, [pc, #236]	; (80143a8 <__kernel_cos+0x1f8>)
 80142ba:	4b3c      	ldr	r3, [pc, #240]	; (80143ac <__kernel_cos+0x1fc>)
 80142bc:	f7fc fcbc 	bl	8010c38 <__aeabi_dsub>
 80142c0:	0022      	movs	r2, r4
 80142c2:	002b      	movs	r3, r5
 80142c4:	f7fc fa46 	bl	8010754 <__aeabi_dmul>
 80142c8:	4a39      	ldr	r2, [pc, #228]	; (80143b0 <__kernel_cos+0x200>)
 80142ca:	4b3a      	ldr	r3, [pc, #232]	; (80143b4 <__kernel_cos+0x204>)
 80142cc:	f7fb fb1c 	bl	800f908 <__aeabi_dadd>
 80142d0:	0022      	movs	r2, r4
 80142d2:	002b      	movs	r3, r5
 80142d4:	f7fc fa3e 	bl	8010754 <__aeabi_dmul>
 80142d8:	4a37      	ldr	r2, [pc, #220]	; (80143b8 <__kernel_cos+0x208>)
 80142da:	4b38      	ldr	r3, [pc, #224]	; (80143bc <__kernel_cos+0x20c>)
 80142dc:	f7fc fcac 	bl	8010c38 <__aeabi_dsub>
 80142e0:	0022      	movs	r2, r4
 80142e2:	002b      	movs	r3, r5
 80142e4:	f7fc fa36 	bl	8010754 <__aeabi_dmul>
 80142e8:	4a35      	ldr	r2, [pc, #212]	; (80143c0 <__kernel_cos+0x210>)
 80142ea:	4b36      	ldr	r3, [pc, #216]	; (80143c4 <__kernel_cos+0x214>)
 80142ec:	f7fb fb0c 	bl	800f908 <__aeabi_dadd>
 80142f0:	002b      	movs	r3, r5
 80142f2:	0022      	movs	r2, r4
 80142f4:	f7fc fa2e 	bl	8010754 <__aeabi_dmul>
 80142f8:	4b35      	ldr	r3, [pc, #212]	; (80143d0 <__kernel_cos+0x220>)
 80142fa:	9002      	str	r0, [sp, #8]
 80142fc:	9103      	str	r1, [sp, #12]
 80142fe:	429f      	cmp	r7, r3
 8014300:	dd9f      	ble.n	8014242 <__kernel_cos+0x92>
 8014302:	4b34      	ldr	r3, [pc, #208]	; (80143d4 <__kernel_cos+0x224>)
 8014304:	2200      	movs	r2, #0
 8014306:	429f      	cmp	r7, r3
 8014308:	dc3d      	bgt.n	8014386 <__kernel_cos+0x1d6>
 801430a:	4933      	ldr	r1, [pc, #204]	; (80143d8 <__kernel_cos+0x228>)
 801430c:	2000      	movs	r0, #0
 801430e:	187b      	adds	r3, r7, r1
 8014310:	492e      	ldr	r1, [pc, #184]	; (80143cc <__kernel_cos+0x21c>)
 8014312:	0016      	movs	r6, r2
 8014314:	001f      	movs	r7, r3
 8014316:	f7fc fc8f 	bl	8010c38 <__aeabi_dsub>
 801431a:	9004      	str	r0, [sp, #16]
 801431c:	9105      	str	r1, [sp, #20]
 801431e:	2200      	movs	r2, #0
 8014320:	4b29      	ldr	r3, [pc, #164]	; (80143c8 <__kernel_cos+0x218>)
 8014322:	0020      	movs	r0, r4
 8014324:	0029      	movs	r1, r5
 8014326:	f7fc fa15 	bl	8010754 <__aeabi_dmul>
 801432a:	0032      	movs	r2, r6
 801432c:	003b      	movs	r3, r7
 801432e:	f7fc fc83 	bl	8010c38 <__aeabi_dsub>
 8014332:	9a02      	ldr	r2, [sp, #8]
 8014334:	9b03      	ldr	r3, [sp, #12]
 8014336:	0006      	movs	r6, r0
 8014338:	000f      	movs	r7, r1
 801433a:	0020      	movs	r0, r4
 801433c:	0029      	movs	r1, r5
 801433e:	f7fc fa09 	bl	8010754 <__aeabi_dmul>
 8014342:	9a00      	ldr	r2, [sp, #0]
 8014344:	9b01      	ldr	r3, [sp, #4]
 8014346:	0004      	movs	r4, r0
 8014348:	000d      	movs	r5, r1
 801434a:	4648      	mov	r0, r9
 801434c:	4641      	mov	r1, r8
 801434e:	f7fc fa01 	bl	8010754 <__aeabi_dmul>
 8014352:	0002      	movs	r2, r0
 8014354:	000b      	movs	r3, r1
 8014356:	0020      	movs	r0, r4
 8014358:	0029      	movs	r1, r5
 801435a:	f7fc fc6d 	bl	8010c38 <__aeabi_dsub>
 801435e:	0002      	movs	r2, r0
 8014360:	000b      	movs	r3, r1
 8014362:	0030      	movs	r0, r6
 8014364:	0039      	movs	r1, r7
 8014366:	f7fc fc67 	bl	8010c38 <__aeabi_dsub>
 801436a:	0002      	movs	r2, r0
 801436c:	000b      	movs	r3, r1
 801436e:	9804      	ldr	r0, [sp, #16]
 8014370:	9905      	ldr	r1, [sp, #20]
 8014372:	f7fc fc61 	bl	8010c38 <__aeabi_dsub>
 8014376:	b007      	add	sp, #28
 8014378:	bc0c      	pop	{r2, r3}
 801437a:	4690      	mov	r8, r2
 801437c:	4699      	mov	r9, r3
 801437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014380:	2000      	movs	r0, #0
 8014382:	4912      	ldr	r1, [pc, #72]	; (80143cc <__kernel_cos+0x21c>)
 8014384:	e7f7      	b.n	8014376 <__kernel_cos+0x1c6>
 8014386:	4b15      	ldr	r3, [pc, #84]	; (80143dc <__kernel_cos+0x22c>)
 8014388:	2600      	movs	r6, #0
 801438a:	9204      	str	r2, [sp, #16]
 801438c:	9305      	str	r3, [sp, #20]
 801438e:	4f14      	ldr	r7, [pc, #80]	; (80143e0 <__kernel_cos+0x230>)
 8014390:	e7c5      	b.n	801431e <__kernel_cos+0x16e>
 8014392:	46c0      	nop			; (mov r8, r8)
 8014394:	3e3fffff 	.word	0x3e3fffff
 8014398:	be8838d4 	.word	0xbe8838d4
 801439c:	bda8fae9 	.word	0xbda8fae9
 80143a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80143a4:	3e21ee9e 	.word	0x3e21ee9e
 80143a8:	809c52ad 	.word	0x809c52ad
 80143ac:	3e927e4f 	.word	0x3e927e4f
 80143b0:	19cb1590 	.word	0x19cb1590
 80143b4:	3efa01a0 	.word	0x3efa01a0
 80143b8:	16c15177 	.word	0x16c15177
 80143bc:	3f56c16c 	.word	0x3f56c16c
 80143c0:	5555554c 	.word	0x5555554c
 80143c4:	3fa55555 	.word	0x3fa55555
 80143c8:	3fe00000 	.word	0x3fe00000
 80143cc:	3ff00000 	.word	0x3ff00000
 80143d0:	3fd33332 	.word	0x3fd33332
 80143d4:	3fe90000 	.word	0x3fe90000
 80143d8:	ffe00000 	.word	0xffe00000
 80143dc:	3fe70000 	.word	0x3fe70000
 80143e0:	3fd20000 	.word	0x3fd20000

080143e4 <__kernel_rem_pio2>:
 80143e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e6:	46de      	mov	lr, fp
 80143e8:	464e      	mov	r6, r9
 80143ea:	4645      	mov	r5, r8
 80143ec:	4657      	mov	r7, sl
 80143ee:	b5e0      	push	{r5, r6, r7, lr}
 80143f0:	4cdc      	ldr	r4, [pc, #880]	; (8014764 <__kernel_rem_pio2+0x380>)
 80143f2:	44a5      	add	sp, r4
 80143f4:	910d      	str	r1, [sp, #52]	; 0x34
 80143f6:	0014      	movs	r4, r2
 80143f8:	0019      	movs	r1, r3
 80143fa:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 80143fc:	9309      	str	r3, [sp, #36]	; 0x24
 80143fe:	4bda      	ldr	r3, [pc, #872]	; (8014768 <__kernel_rem_pio2+0x384>)
 8014400:	0092      	lsls	r2, r2, #2
 8014402:	58d6      	ldr	r6, [r2, r3]
 8014404:	1e4d      	subs	r5, r1, #1
 8014406:	9003      	str	r0, [sp, #12]
 8014408:	2118      	movs	r1, #24
 801440a:	1ee0      	subs	r0, r4, #3
 801440c:	9606      	str	r6, [sp, #24]
 801440e:	9502      	str	r5, [sp, #8]
 8014410:	f7fa fe78 	bl	800f104 <__divsi3>
 8014414:	43c3      	mvns	r3, r0
 8014416:	0001      	movs	r1, r0
 8014418:	17db      	asrs	r3, r3, #31
 801441a:	4019      	ands	r1, r3
 801441c:	1c4b      	adds	r3, r1, #1
 801441e:	009a      	lsls	r2, r3, #2
 8014420:	1a9b      	subs	r3, r3, r2
 8014422:	00db      	lsls	r3, r3, #3
 8014424:	191b      	adds	r3, r3, r4
 8014426:	910b      	str	r1, [sp, #44]	; 0x2c
 8014428:	9305      	str	r3, [sp, #20]
 801442a:	1b4c      	subs	r4, r1, r5
 801442c:	1977      	adds	r7, r6, r5
 801442e:	d418      	bmi.n	8014462 <__kernel_rem_pio2+0x7e>
 8014430:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014432:	00a5      	lsls	r5, r4, #2
 8014434:	469c      	mov	ip, r3
 8014436:	193f      	adds	r7, r7, r4
 8014438:	ae22      	add	r6, sp, #136	; 0x88
 801443a:	4465      	add	r5, ip
 801443c:	3701      	adds	r7, #1
 801443e:	e007      	b.n	8014450 <__kernel_rem_pio2+0x6c>
 8014440:	6828      	ldr	r0, [r5, #0]
 8014442:	f7fc ff93 	bl	801136c <__aeabi_i2d>
 8014446:	3401      	adds	r4, #1
 8014448:	c603      	stmia	r6!, {r0, r1}
 801444a:	3504      	adds	r5, #4
 801444c:	42bc      	cmp	r4, r7
 801444e:	d008      	beq.n	8014462 <__kernel_rem_pio2+0x7e>
 8014450:	2c00      	cmp	r4, #0
 8014452:	daf5      	bge.n	8014440 <__kernel_rem_pio2+0x5c>
 8014454:	2000      	movs	r0, #0
 8014456:	2100      	movs	r1, #0
 8014458:	3401      	adds	r4, #1
 801445a:	c603      	stmia	r6!, {r0, r1}
 801445c:	3504      	adds	r5, #4
 801445e:	42bc      	cmp	r4, r7
 8014460:	d1f6      	bne.n	8014450 <__kernel_rem_pio2+0x6c>
 8014462:	9b06      	ldr	r3, [sp, #24]
 8014464:	2b00      	cmp	r3, #0
 8014466:	da01      	bge.n	801446c <__kernel_rem_pio2+0x88>
 8014468:	f000 fbfd 	bl	8014c66 <__kernel_rem_pio2+0x882>
 801446c:	9b06      	ldr	r3, [sp, #24]
 801446e:	9903      	ldr	r1, [sp, #12]
 8014470:	3301      	adds	r3, #1
 8014472:	00db      	lsls	r3, r3, #3
 8014474:	469a      	mov	sl, r3
 8014476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014478:	00da      	lsls	r2, r3, #3
 801447a:	4694      	mov	ip, r2
 801447c:	9200      	str	r2, [sp, #0]
 801447e:	2200      	movs	r2, #0
 8014480:	4691      	mov	r9, r2
 8014482:	aa72      	add	r2, sp, #456	; 0x1c8
 8014484:	9204      	str	r2, [sp, #16]
 8014486:	4ab9      	ldr	r2, [pc, #740]	; (801476c <__kernel_rem_pio2+0x388>)
 8014488:	4461      	add	r1, ip
 801448a:	4693      	mov	fp, r2
 801448c:	4688      	mov	r8, r1
 801448e:	ab9a      	add	r3, sp, #616	; 0x268
 8014490:	4463      	add	r3, ip
 8014492:	449b      	add	fp, r3
 8014494:	9b02      	ldr	r3, [sp, #8]
 8014496:	2b00      	cmp	r3, #0
 8014498:	da00      	bge.n	801449c <__kernel_rem_pio2+0xb8>
 801449a:	e1bc      	b.n	8014816 <__kernel_rem_pio2+0x432>
 801449c:	465d      	mov	r5, fp
 801449e:	2600      	movs	r6, #0
 80144a0:	2700      	movs	r7, #0
 80144a2:	9c03      	ldr	r4, [sp, #12]
 80144a4:	444d      	add	r5, r9
 80144a6:	682a      	ldr	r2, [r5, #0]
 80144a8:	686b      	ldr	r3, [r5, #4]
 80144aa:	cc03      	ldmia	r4!, {r0, r1}
 80144ac:	f7fc f952 	bl	8010754 <__aeabi_dmul>
 80144b0:	0002      	movs	r2, r0
 80144b2:	000b      	movs	r3, r1
 80144b4:	0030      	movs	r0, r6
 80144b6:	0039      	movs	r1, r7
 80144b8:	f7fb fa26 	bl	800f908 <__aeabi_dadd>
 80144bc:	3d08      	subs	r5, #8
 80144be:	0006      	movs	r6, r0
 80144c0:	000f      	movs	r7, r1
 80144c2:	4544      	cmp	r4, r8
 80144c4:	d1ef      	bne.n	80144a6 <__kernel_rem_pio2+0xc2>
 80144c6:	9b04      	ldr	r3, [sp, #16]
 80144c8:	444b      	add	r3, r9
 80144ca:	601e      	str	r6, [r3, #0]
 80144cc:	605f      	str	r7, [r3, #4]
 80144ce:	2308      	movs	r3, #8
 80144d0:	469c      	mov	ip, r3
 80144d2:	44e1      	add	r9, ip
 80144d4:	45d1      	cmp	r9, sl
 80144d6:	d1dd      	bne.n	8014494 <__kernel_rem_pio2+0xb0>
 80144d8:	a80e      	add	r0, sp, #56	; 0x38
 80144da:	2104      	movs	r1, #4
 80144dc:	4684      	mov	ip, r0
 80144de:	4249      	negs	r1, r1
 80144e0:	4461      	add	r1, ip
 80144e2:	468c      	mov	ip, r1
 80144e4:	9a06      	ldr	r2, [sp, #24]
 80144e6:	0093      	lsls	r3, r2, #2
 80144e8:	449c      	add	ip, r3
 80144ea:	4661      	mov	r1, ip
 80144ec:	4684      	mov	ip, r0
 80144ee:	910a      	str	r1, [sp, #40]	; 0x28
 80144f0:	9903      	ldr	r1, [sp, #12]
 80144f2:	3b08      	subs	r3, #8
 80144f4:	4463      	add	r3, ip
 80144f6:	468c      	mov	ip, r1
 80144f8:	930c      	str	r3, [sp, #48]	; 0x30
 80144fa:	9b00      	ldr	r3, [sp, #0]
 80144fc:	9200      	str	r2, [sp, #0]
 80144fe:	4463      	add	r3, ip
 8014500:	469b      	mov	fp, r3
 8014502:	9a00      	ldr	r2, [sp, #0]
 8014504:	9804      	ldr	r0, [sp, #16]
 8014506:	00d1      	lsls	r1, r2, #3
 8014508:	0003      	movs	r3, r0
 801450a:	468c      	mov	ip, r1
 801450c:	4463      	add	r3, ip
 801450e:	9108      	str	r1, [sp, #32]
 8014510:	681e      	ldr	r6, [r3, #0]
 8014512:	685f      	ldr	r7, [r3, #4]
 8014514:	2a00      	cmp	r2, #0
 8014516:	dd33      	ble.n	8014580 <__kernel_rem_pio2+0x19c>
 8014518:	4995      	ldr	r1, [pc, #596]	; (8014770 <__kernel_rem_pio2+0x38c>)
 801451a:	4680      	mov	r8, r0
 801451c:	468c      	mov	ip, r1
 801451e:	4462      	add	r2, ip
 8014520:	00d3      	lsls	r3, r2, #3
 8014522:	4498      	add	r8, r3
 8014524:	ab70      	add	r3, sp, #448	; 0x1c0
 8014526:	469a      	mov	sl, r3
 8014528:	ab0e      	add	r3, sp, #56	; 0x38
 801452a:	4699      	mov	r9, r3
 801452c:	2200      	movs	r2, #0
 801452e:	4b91      	ldr	r3, [pc, #580]	; (8014774 <__kernel_rem_pio2+0x390>)
 8014530:	0030      	movs	r0, r6
 8014532:	0039      	movs	r1, r7
 8014534:	f7fc f90e 	bl	8010754 <__aeabi_dmul>
 8014538:	f7fc fee2 	bl	8011300 <__aeabi_d2iz>
 801453c:	f7fc ff16 	bl	801136c <__aeabi_i2d>
 8014540:	2200      	movs	r2, #0
 8014542:	4b8d      	ldr	r3, [pc, #564]	; (8014778 <__kernel_rem_pio2+0x394>)
 8014544:	0004      	movs	r4, r0
 8014546:	000d      	movs	r5, r1
 8014548:	f7fc f904 	bl	8010754 <__aeabi_dmul>
 801454c:	0002      	movs	r2, r0
 801454e:	000b      	movs	r3, r1
 8014550:	0030      	movs	r0, r6
 8014552:	0039      	movs	r1, r7
 8014554:	f7fc fb70 	bl	8010c38 <__aeabi_dsub>
 8014558:	f7fc fed2 	bl	8011300 <__aeabi_d2iz>
 801455c:	464b      	mov	r3, r9
 801455e:	c301      	stmia	r3!, {r0}
 8014560:	4699      	mov	r9, r3
 8014562:	4643      	mov	r3, r8
 8014564:	0020      	movs	r0, r4
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	0029      	movs	r1, r5
 801456c:	f7fb f9cc 	bl	800f908 <__aeabi_dadd>
 8014570:	2308      	movs	r3, #8
 8014572:	425b      	negs	r3, r3
 8014574:	469c      	mov	ip, r3
 8014576:	44e0      	add	r8, ip
 8014578:	0006      	movs	r6, r0
 801457a:	000f      	movs	r7, r1
 801457c:	45d0      	cmp	r8, sl
 801457e:	d1d5      	bne.n	801452c <__kernel_rem_pio2+0x148>
 8014580:	9b05      	ldr	r3, [sp, #20]
 8014582:	0030      	movs	r0, r6
 8014584:	001a      	movs	r2, r3
 8014586:	0039      	movs	r1, r7
 8014588:	4698      	mov	r8, r3
 801458a:	f000 fce5 	bl	8014f58 <scalbn>
 801458e:	23ff      	movs	r3, #255	; 0xff
 8014590:	2200      	movs	r2, #0
 8014592:	059b      	lsls	r3, r3, #22
 8014594:	0004      	movs	r4, r0
 8014596:	000d      	movs	r5, r1
 8014598:	f7fc f8dc 	bl	8010754 <__aeabi_dmul>
 801459c:	f000 fc38 	bl	8014e10 <floor>
 80145a0:	2200      	movs	r2, #0
 80145a2:	4b76      	ldr	r3, [pc, #472]	; (801477c <__kernel_rem_pio2+0x398>)
 80145a4:	f7fc f8d6 	bl	8010754 <__aeabi_dmul>
 80145a8:	0002      	movs	r2, r0
 80145aa:	000b      	movs	r3, r1
 80145ac:	0020      	movs	r0, r4
 80145ae:	0029      	movs	r1, r5
 80145b0:	f7fc fb42 	bl	8010c38 <__aeabi_dsub>
 80145b4:	000d      	movs	r5, r1
 80145b6:	0004      	movs	r4, r0
 80145b8:	f7fc fea2 	bl	8011300 <__aeabi_d2iz>
 80145bc:	4681      	mov	r9, r0
 80145be:	f7fc fed5 	bl	801136c <__aeabi_i2d>
 80145c2:	0002      	movs	r2, r0
 80145c4:	000b      	movs	r3, r1
 80145c6:	0020      	movs	r0, r4
 80145c8:	0029      	movs	r1, r5
 80145ca:	f7fc fb35 	bl	8010c38 <__aeabi_dsub>
 80145ce:	0006      	movs	r6, r0
 80145d0:	4640      	mov	r0, r8
 80145d2:	000f      	movs	r7, r1
 80145d4:	2800      	cmp	r0, #0
 80145d6:	dc00      	bgt.n	80145da <__kernel_rem_pio2+0x1f6>
 80145d8:	e0ee      	b.n	80147b8 <__kernel_rem_pio2+0x3d4>
 80145da:	9b00      	ldr	r3, [sp, #0]
 80145dc:	2118      	movs	r1, #24
 80145de:	1e5a      	subs	r2, r3, #1
 80145e0:	0092      	lsls	r2, r2, #2
 80145e2:	ab0e      	add	r3, sp, #56	; 0x38
 80145e4:	589b      	ldr	r3, [r3, r2]
 80145e6:	1a09      	subs	r1, r1, r0
 80145e8:	001d      	movs	r5, r3
 80145ea:	410d      	asrs	r5, r1
 80145ec:	44a9      	add	r9, r5
 80145ee:	408d      	lsls	r5, r1
 80145f0:	1b5d      	subs	r5, r3, r5
 80145f2:	ab0e      	add	r3, sp, #56	; 0x38
 80145f4:	509d      	str	r5, [r3, r2]
 80145f6:	2317      	movs	r3, #23
 80145f8:	1a1b      	subs	r3, r3, r0
 80145fa:	411d      	asrs	r5, r3
 80145fc:	2d00      	cmp	r5, #0
 80145fe:	dd2d      	ble.n	801465c <__kernel_rem_pio2+0x278>
 8014600:	2301      	movs	r3, #1
 8014602:	469c      	mov	ip, r3
 8014604:	9b00      	ldr	r3, [sp, #0]
 8014606:	44e1      	add	r9, ip
 8014608:	2b00      	cmp	r3, #0
 801460a:	dc00      	bgt.n	801460e <__kernel_rem_pio2+0x22a>
 801460c:	e21c      	b.n	8014a48 <__kernel_rem_pio2+0x664>
 801460e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014610:	2301      	movs	r3, #1
 8014612:	2c00      	cmp	r4, #0
 8014614:	d000      	beq.n	8014618 <__kernel_rem_pio2+0x234>
 8014616:	e0b5      	b.n	8014784 <__kernel_rem_pio2+0x3a0>
 8014618:	9a00      	ldr	r2, [sp, #0]
 801461a:	2a01      	cmp	r2, #1
 801461c:	d009      	beq.n	8014632 <__kernel_rem_pio2+0x24e>
 801461e:	0099      	lsls	r1, r3, #2
 8014620:	aa0e      	add	r2, sp, #56	; 0x38
 8014622:	5854      	ldr	r4, [r2, r1]
 8014624:	3301      	adds	r3, #1
 8014626:	2c00      	cmp	r4, #0
 8014628:	d000      	beq.n	801462c <__kernel_rem_pio2+0x248>
 801462a:	e0ac      	b.n	8014786 <__kernel_rem_pio2+0x3a2>
 801462c:	9a00      	ldr	r2, [sp, #0]
 801462e:	429a      	cmp	r2, r3
 8014630:	d1f5      	bne.n	801461e <__kernel_rem_pio2+0x23a>
 8014632:	9b05      	ldr	r3, [sp, #20]
 8014634:	2b00      	cmp	r3, #0
 8014636:	dd0e      	ble.n	8014656 <__kernel_rem_pio2+0x272>
 8014638:	2b01      	cmp	r3, #1
 801463a:	d100      	bne.n	801463e <__kernel_rem_pio2+0x25a>
 801463c:	e1a8      	b.n	8014990 <__kernel_rem_pio2+0x5ac>
 801463e:	2b02      	cmp	r3, #2
 8014640:	d109      	bne.n	8014656 <__kernel_rem_pio2+0x272>
 8014642:	9b00      	ldr	r3, [sp, #0]
 8014644:	a90e      	add	r1, sp, #56	; 0x38
 8014646:	1e5a      	subs	r2, r3, #1
 8014648:	0092      	lsls	r2, r2, #2
 801464a:	ab0e      	add	r3, sp, #56	; 0x38
 801464c:	589b      	ldr	r3, [r3, r2]
 801464e:	9307      	str	r3, [sp, #28]
 8014650:	029b      	lsls	r3, r3, #10
 8014652:	0a9b      	lsrs	r3, r3, #10
 8014654:	508b      	str	r3, [r1, r2]
 8014656:	2d02      	cmp	r5, #2
 8014658:	d100      	bne.n	801465c <__kernel_rem_pio2+0x278>
 801465a:	e0c1      	b.n	80147e0 <__kernel_rem_pio2+0x3fc>
 801465c:	2300      	movs	r3, #0
 801465e:	2200      	movs	r2, #0
 8014660:	0030      	movs	r0, r6
 8014662:	0039      	movs	r1, r7
 8014664:	f7fa fe4a 	bl	800f2fc <__aeabi_dcmpeq>
 8014668:	9b00      	ldr	r3, [sp, #0]
 801466a:	2800      	cmp	r0, #0
 801466c:	d100      	bne.n	8014670 <__kernel_rem_pio2+0x28c>
 801466e:	e294      	b.n	8014b9a <__kernel_rem_pio2+0x7b6>
 8014670:	9a06      	ldr	r2, [sp, #24]
 8014672:	1e59      	subs	r1, r3, #1
 8014674:	428a      	cmp	r2, r1
 8014676:	dc10      	bgt.n	801469a <__kernel_rem_pio2+0x2b6>
 8014678:	4a41      	ldr	r2, [pc, #260]	; (8014780 <__kernel_rem_pio2+0x39c>)
 801467a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801467c:	4694      	mov	ip, r2
 801467e:	aa0e      	add	r2, sp, #56	; 0x38
 8014680:	4463      	add	r3, ip
 8014682:	4694      	mov	ip, r2
 8014684:	2200      	movs	r2, #0
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4463      	add	r3, ip
 801468a:	681c      	ldr	r4, [r3, #0]
 801468c:	3b04      	subs	r3, #4
 801468e:	4322      	orrs	r2, r4
 8014690:	4283      	cmp	r3, r0
 8014692:	d1fa      	bne.n	801468a <__kernel_rem_pio2+0x2a6>
 8014694:	2a00      	cmp	r2, #0
 8014696:	d000      	beq.n	801469a <__kernel_rem_pio2+0x2b6>
 8014698:	e0c0      	b.n	801481c <__kernel_rem_pio2+0x438>
 801469a:	9b06      	ldr	r3, [sp, #24]
 801469c:	aa0e      	add	r2, sp, #56	; 0x38
 801469e:	3b01      	subs	r3, #1
 80146a0:	009b      	lsls	r3, r3, #2
 80146a2:	58d3      	ldr	r3, [r2, r3]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d000      	beq.n	80146aa <__kernel_rem_pio2+0x2c6>
 80146a8:	e0b3      	b.n	8014812 <__kernel_rem_pio2+0x42e>
 80146aa:	2201      	movs	r2, #1
 80146ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146ae:	3b04      	subs	r3, #4
 80146b0:	6859      	ldr	r1, [r3, #4]
 80146b2:	3201      	adds	r2, #1
 80146b4:	2900      	cmp	r1, #0
 80146b6:	d0fa      	beq.n	80146ae <__kernel_rem_pio2+0x2ca>
 80146b8:	9b00      	ldr	r3, [sp, #0]
 80146ba:	469c      	mov	ip, r3
 80146bc:	4462      	add	r2, ip
 80146be:	0011      	movs	r1, r2
 80146c0:	9207      	str	r2, [sp, #28]
 80146c2:	001a      	movs	r2, r3
 80146c4:	3301      	adds	r3, #1
 80146c6:	428b      	cmp	r3, r1
 80146c8:	dc46      	bgt.n	8014758 <__kernel_rem_pio2+0x374>
 80146ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80146cc:	4663      	mov	r3, ip
 80146ce:	4680      	mov	r8, r0
 80146d0:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 80146d2:	4443      	add	r3, r8
 80146d4:	46a0      	mov	r8, r4
 80146d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80146d8:	009b      	lsls	r3, r3, #2
 80146da:	46a1      	mov	r9, r4
 80146dc:	444a      	add	r2, r9
 80146de:	4498      	add	r8, r3
 80146e0:	00d3      	lsls	r3, r2, #3
 80146e2:	aa22      	add	r2, sp, #136	; 0x88
 80146e4:	4691      	mov	r9, r2
 80146e6:	9a04      	ldr	r2, [sp, #16]
 80146e8:	4499      	add	r9, r3
 80146ea:	4694      	mov	ip, r2
 80146ec:	9b08      	ldr	r3, [sp, #32]
 80146ee:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80146f0:	4463      	add	r3, ip
 80146f2:	4684      	mov	ip, r0
 80146f4:	4461      	add	r1, ip
 80146f6:	4694      	mov	ip, r2
 80146f8:	469a      	mov	sl, r3
 80146fa:	008b      	lsls	r3, r1, #2
 80146fc:	4463      	add	r3, ip
 80146fe:	9300      	str	r3, [sp, #0]
 8014700:	4643      	mov	r3, r8
 8014702:	6858      	ldr	r0, [r3, #4]
 8014704:	f7fc fe32 	bl	801136c <__aeabi_i2d>
 8014708:	464b      	mov	r3, r9
 801470a:	6018      	str	r0, [r3, #0]
 801470c:	6059      	str	r1, [r3, #4]
 801470e:	9b02      	ldr	r3, [sp, #8]
 8014710:	2b00      	cmp	r3, #0
 8014712:	db24      	blt.n	801475e <__kernel_rem_pio2+0x37a>
 8014714:	464d      	mov	r5, r9
 8014716:	9c03      	ldr	r4, [sp, #12]
 8014718:	2600      	movs	r6, #0
 801471a:	2700      	movs	r7, #0
 801471c:	e001      	b.n	8014722 <__kernel_rem_pio2+0x33e>
 801471e:	6828      	ldr	r0, [r5, #0]
 8014720:	6869      	ldr	r1, [r5, #4]
 8014722:	cc0c      	ldmia	r4!, {r2, r3}
 8014724:	f7fc f816 	bl	8010754 <__aeabi_dmul>
 8014728:	0002      	movs	r2, r0
 801472a:	000b      	movs	r3, r1
 801472c:	0030      	movs	r0, r6
 801472e:	0039      	movs	r1, r7
 8014730:	f7fb f8ea 	bl	800f908 <__aeabi_dadd>
 8014734:	3d08      	subs	r5, #8
 8014736:	0006      	movs	r6, r0
 8014738:	000f      	movs	r7, r1
 801473a:	455c      	cmp	r4, fp
 801473c:	d1ef      	bne.n	801471e <__kernel_rem_pio2+0x33a>
 801473e:	4653      	mov	r3, sl
 8014740:	609e      	str	r6, [r3, #8]
 8014742:	60df      	str	r7, [r3, #12]
 8014744:	2304      	movs	r3, #4
 8014746:	469c      	mov	ip, r3
 8014748:	3304      	adds	r3, #4
 801474a:	44e0      	add	r8, ip
 801474c:	469c      	mov	ip, r3
 801474e:	9b00      	ldr	r3, [sp, #0]
 8014750:	44e1      	add	r9, ip
 8014752:	44e2      	add	sl, ip
 8014754:	4598      	cmp	r8, r3
 8014756:	d1d3      	bne.n	8014700 <__kernel_rem_pio2+0x31c>
 8014758:	9b07      	ldr	r3, [sp, #28]
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	e6d1      	b.n	8014502 <__kernel_rem_pio2+0x11e>
 801475e:	2600      	movs	r6, #0
 8014760:	2700      	movs	r7, #0
 8014762:	e7ec      	b.n	801473e <__kernel_rem_pio2+0x35a>
 8014764:	fffffd94 	.word	0xfffffd94
 8014768:	0801ec28 	.word	0x0801ec28
 801476c:	fffffe18 	.word	0xfffffe18
 8014770:	1fffffff 	.word	0x1fffffff
 8014774:	3e700000 	.word	0x3e700000
 8014778:	41700000 	.word	0x41700000
 801477c:	40200000 	.word	0x40200000
 8014780:	3fffffff 	.word	0x3fffffff
 8014784:	2100      	movs	r1, #0
 8014786:	2280      	movs	r2, #128	; 0x80
 8014788:	0452      	lsls	r2, r2, #17
 801478a:	1b14      	subs	r4, r2, r4
 801478c:	aa0e      	add	r2, sp, #56	; 0x38
 801478e:	5054      	str	r4, [r2, r1]
 8014790:	9900      	ldr	r1, [sp, #0]
 8014792:	4299      	cmp	r1, r3
 8014794:	dd0e      	ble.n	80147b4 <__kernel_rem_pio2+0x3d0>
 8014796:	a80e      	add	r0, sp, #56	; 0x38
 8014798:	4684      	mov	ip, r0
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	aa0e      	add	r2, sp, #56	; 0x38
 801479e:	0089      	lsls	r1, r1, #2
 80147a0:	58d2      	ldr	r2, [r2, r3]
 80147a2:	4461      	add	r1, ip
 80147a4:	4463      	add	r3, ip
 80147a6:	48cf      	ldr	r0, [pc, #828]	; (8014ae4 <__kernel_rem_pio2+0x700>)
 80147a8:	e000      	b.n	80147ac <__kernel_rem_pio2+0x3c8>
 80147aa:	681a      	ldr	r2, [r3, #0]
 80147ac:	1a82      	subs	r2, r0, r2
 80147ae:	c304      	stmia	r3!, {r2}
 80147b0:	428b      	cmp	r3, r1
 80147b2:	d1fa      	bne.n	80147aa <__kernel_rem_pio2+0x3c6>
 80147b4:	2401      	movs	r4, #1
 80147b6:	e73c      	b.n	8014632 <__kernel_rem_pio2+0x24e>
 80147b8:	9b05      	ldr	r3, [sp, #20]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d106      	bne.n	80147cc <__kernel_rem_pio2+0x3e8>
 80147be:	9b00      	ldr	r3, [sp, #0]
 80147c0:	aa0e      	add	r2, sp, #56	; 0x38
 80147c2:	3b01      	subs	r3, #1
 80147c4:	009b      	lsls	r3, r3, #2
 80147c6:	58d5      	ldr	r5, [r2, r3]
 80147c8:	15ed      	asrs	r5, r5, #23
 80147ca:	e717      	b.n	80145fc <__kernel_rem_pio2+0x218>
 80147cc:	2200      	movs	r2, #0
 80147ce:	4bc6      	ldr	r3, [pc, #792]	; (8014ae8 <__kernel_rem_pio2+0x704>)
 80147d0:	0030      	movs	r0, r6
 80147d2:	f7fa fdb7 	bl	800f344 <__aeabi_dcmpge>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d000      	beq.n	80147dc <__kernel_rem_pio2+0x3f8>
 80147da:	e124      	b.n	8014a26 <__kernel_rem_pio2+0x642>
 80147dc:	2500      	movs	r5, #0
 80147de:	e73d      	b.n	801465c <__kernel_rem_pio2+0x278>
 80147e0:	0032      	movs	r2, r6
 80147e2:	003b      	movs	r3, r7
 80147e4:	2000      	movs	r0, #0
 80147e6:	49c1      	ldr	r1, [pc, #772]	; (8014aec <__kernel_rem_pio2+0x708>)
 80147e8:	f7fc fa26 	bl	8010c38 <__aeabi_dsub>
 80147ec:	0006      	movs	r6, r0
 80147ee:	000f      	movs	r7, r1
 80147f0:	2c00      	cmp	r4, #0
 80147f2:	d100      	bne.n	80147f6 <__kernel_rem_pio2+0x412>
 80147f4:	e732      	b.n	801465c <__kernel_rem_pio2+0x278>
 80147f6:	9a05      	ldr	r2, [sp, #20]
 80147f8:	2000      	movs	r0, #0
 80147fa:	49bc      	ldr	r1, [pc, #752]	; (8014aec <__kernel_rem_pio2+0x708>)
 80147fc:	f000 fbac 	bl	8014f58 <scalbn>
 8014800:	0002      	movs	r2, r0
 8014802:	000b      	movs	r3, r1
 8014804:	0030      	movs	r0, r6
 8014806:	0039      	movs	r1, r7
 8014808:	f7fc fa16 	bl	8010c38 <__aeabi_dsub>
 801480c:	0006      	movs	r6, r0
 801480e:	000f      	movs	r7, r1
 8014810:	e724      	b.n	801465c <__kernel_rem_pio2+0x278>
 8014812:	2201      	movs	r2, #1
 8014814:	e750      	b.n	80146b8 <__kernel_rem_pio2+0x2d4>
 8014816:	2600      	movs	r6, #0
 8014818:	2700      	movs	r7, #0
 801481a:	e654      	b.n	80144c6 <__kernel_rem_pio2+0xe2>
 801481c:	464b      	mov	r3, r9
 801481e:	9a05      	ldr	r2, [sp, #20]
 8014820:	9307      	str	r3, [sp, #28]
 8014822:	4688      	mov	r8, r1
 8014824:	008b      	lsls	r3, r1, #2
 8014826:	a90e      	add	r1, sp, #56	; 0x38
 8014828:	58cb      	ldr	r3, [r1, r3]
 801482a:	3a18      	subs	r2, #24
 801482c:	9508      	str	r5, [sp, #32]
 801482e:	9205      	str	r2, [sp, #20]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d10d      	bne.n	8014850 <__kernel_rem_pio2+0x46c>
 8014834:	468c      	mov	ip, r1
 8014836:	4641      	mov	r1, r8
 8014838:	4bad      	ldr	r3, [pc, #692]	; (8014af0 <__kernel_rem_pio2+0x70c>)
 801483a:	4443      	add	r3, r8
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4463      	add	r3, ip
 8014840:	3b04      	subs	r3, #4
 8014842:	6858      	ldr	r0, [r3, #4]
 8014844:	3901      	subs	r1, #1
 8014846:	3a18      	subs	r2, #24
 8014848:	2800      	cmp	r0, #0
 801484a:	d0f9      	beq.n	8014840 <__kernel_rem_pio2+0x45c>
 801484c:	4688      	mov	r8, r1
 801484e:	9205      	str	r2, [sp, #20]
 8014850:	9a05      	ldr	r2, [sp, #20]
 8014852:	2000      	movs	r0, #0
 8014854:	49a5      	ldr	r1, [pc, #660]	; (8014aec <__kernel_rem_pio2+0x708>)
 8014856:	f000 fb7f 	bl	8014f58 <scalbn>
 801485a:	4643      	mov	r3, r8
 801485c:	0004      	movs	r4, r0
 801485e:	000d      	movs	r5, r1
 8014860:	2b00      	cmp	r3, #0
 8014862:	da00      	bge.n	8014866 <__kernel_rem_pio2+0x482>
 8014864:	e205      	b.n	8014c72 <__kernel_rem_pio2+0x88e>
 8014866:	009e      	lsls	r6, r3, #2
 8014868:	ab0e      	add	r3, sp, #56	; 0x38
 801486a:	469c      	mov	ip, r3
 801486c:	4643      	mov	r3, r8
 801486e:	00db      	lsls	r3, r3, #3
 8014870:	4466      	add	r6, ip
 8014872:	469c      	mov	ip, r3
 8014874:	9305      	str	r3, [sp, #20]
 8014876:	ab70      	add	r3, sp, #448	; 0x1c0
 8014878:	4699      	mov	r9, r3
 801487a:	9f04      	ldr	r7, [sp, #16]
 801487c:	4467      	add	r7, ip
 801487e:	9700      	str	r7, [sp, #0]
 8014880:	6830      	ldr	r0, [r6, #0]
 8014882:	f7fc fd73 	bl	801136c <__aeabi_i2d>
 8014886:	0022      	movs	r2, r4
 8014888:	002b      	movs	r3, r5
 801488a:	f7fb ff63 	bl	8010754 <__aeabi_dmul>
 801488e:	2200      	movs	r2, #0
 8014890:	6038      	str	r0, [r7, #0]
 8014892:	6079      	str	r1, [r7, #4]
 8014894:	4b97      	ldr	r3, [pc, #604]	; (8014af4 <__kernel_rem_pio2+0x710>)
 8014896:	0020      	movs	r0, r4
 8014898:	0029      	movs	r1, r5
 801489a:	f7fb ff5b 	bl	8010754 <__aeabi_dmul>
 801489e:	3f08      	subs	r7, #8
 80148a0:	0004      	movs	r4, r0
 80148a2:	000d      	movs	r5, r1
 80148a4:	3e04      	subs	r6, #4
 80148a6:	45b9      	cmp	r9, r7
 80148a8:	d1ea      	bne.n	8014880 <__kernel_rem_pio2+0x49c>
 80148aa:	ab4a      	add	r3, sp, #296	; 0x128
 80148ac:	9303      	str	r3, [sp, #12]
 80148ae:	469b      	mov	fp, r3
 80148b0:	2300      	movs	r3, #0
 80148b2:	469a      	mov	sl, r3
 80148b4:	9b06      	ldr	r3, [sp, #24]
 80148b6:	4642      	mov	r2, r8
 80148b8:	4699      	mov	r9, r3
 80148ba:	4643      	mov	r3, r8
 80148bc:	3201      	adds	r2, #1
 80148be:	9202      	str	r2, [sp, #8]
 80148c0:	9304      	str	r3, [sp, #16]
 80148c2:	464b      	mov	r3, r9
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	da00      	bge.n	80148ca <__kernel_rem_pio2+0x4e6>
 80148c8:	e0aa      	b.n	8014a20 <__kernel_rem_pio2+0x63c>
 80148ca:	2080      	movs	r0, #128	; 0x80
 80148cc:	4b8a      	ldr	r3, [pc, #552]	; (8014af8 <__kernel_rem_pio2+0x714>)
 80148ce:	9d00      	ldr	r5, [sp, #0]
 80148d0:	4698      	mov	r8, r3
 80148d2:	05c0      	lsls	r0, r0, #23
 80148d4:	4989      	ldr	r1, [pc, #548]	; (8014afc <__kernel_rem_pio2+0x718>)
 80148d6:	2600      	movs	r6, #0
 80148d8:	2700      	movs	r7, #0
 80148da:	2400      	movs	r4, #0
 80148dc:	e008      	b.n	80148f0 <__kernel_rem_pio2+0x50c>
 80148de:	2308      	movs	r3, #8
 80148e0:	469c      	mov	ip, r3
 80148e2:	3508      	adds	r5, #8
 80148e4:	44e0      	add	r8, ip
 80148e6:	4554      	cmp	r4, sl
 80148e8:	dc11      	bgt.n	801490e <__kernel_rem_pio2+0x52a>
 80148ea:	4643      	mov	r3, r8
 80148ec:	6818      	ldr	r0, [r3, #0]
 80148ee:	6859      	ldr	r1, [r3, #4]
 80148f0:	682a      	ldr	r2, [r5, #0]
 80148f2:	686b      	ldr	r3, [r5, #4]
 80148f4:	f7fb ff2e 	bl	8010754 <__aeabi_dmul>
 80148f8:	0002      	movs	r2, r0
 80148fa:	000b      	movs	r3, r1
 80148fc:	0030      	movs	r0, r6
 80148fe:	0039      	movs	r1, r7
 8014900:	f7fb f802 	bl	800f908 <__aeabi_dadd>
 8014904:	3401      	adds	r4, #1
 8014906:	0006      	movs	r6, r0
 8014908:	000f      	movs	r7, r1
 801490a:	45a1      	cmp	r9, r4
 801490c:	dae7      	bge.n	80148de <__kernel_rem_pio2+0x4fa>
 801490e:	465b      	mov	r3, fp
 8014910:	c3c0      	stmia	r3!, {r6, r7}
 8014912:	469b      	mov	fp, r3
 8014914:	2301      	movs	r3, #1
 8014916:	469c      	mov	ip, r3
 8014918:	9b00      	ldr	r3, [sp, #0]
 801491a:	44e2      	add	sl, ip
 801491c:	3b08      	subs	r3, #8
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	9b02      	ldr	r3, [sp, #8]
 8014922:	459a      	cmp	sl, r3
 8014924:	d1cd      	bne.n	80148c2 <__kernel_rem_pio2+0x4de>
 8014926:	9b04      	ldr	r3, [sp, #16]
 8014928:	4698      	mov	r8, r3
 801492a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801492c:	2b02      	cmp	r3, #2
 801492e:	dd00      	ble.n	8014932 <__kernel_rem_pio2+0x54e>
 8014930:	e08e      	b.n	8014a50 <__kernel_rem_pio2+0x66c>
 8014932:	2b00      	cmp	r3, #0
 8014934:	dc37      	bgt.n	80149a6 <__kernel_rem_pio2+0x5c2>
 8014936:	d11f      	bne.n	8014978 <__kernel_rem_pio2+0x594>
 8014938:	9b05      	ldr	r3, [sp, #20]
 801493a:	2700      	movs	r7, #0
 801493c:	001d      	movs	r5, r3
 801493e:	9b03      	ldr	r3, [sp, #12]
 8014940:	2400      	movs	r4, #0
 8014942:	469c      	mov	ip, r3
 8014944:	001e      	movs	r6, r3
 8014946:	4465      	add	r5, ip
 8014948:	3e08      	subs	r6, #8
 801494a:	682a      	ldr	r2, [r5, #0]
 801494c:	686b      	ldr	r3, [r5, #4]
 801494e:	0038      	movs	r0, r7
 8014950:	0021      	movs	r1, r4
 8014952:	f7fa ffd9 	bl	800f908 <__aeabi_dadd>
 8014956:	3d08      	subs	r5, #8
 8014958:	0007      	movs	r7, r0
 801495a:	000c      	movs	r4, r1
 801495c:	42ae      	cmp	r6, r5
 801495e:	d1f4      	bne.n	801494a <__kernel_rem_pio2+0x566>
 8014960:	9b08      	ldr	r3, [sp, #32]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d003      	beq.n	801496e <__kernel_rem_pio2+0x58a>
 8014966:	2380      	movs	r3, #128	; 0x80
 8014968:	061b      	lsls	r3, r3, #24
 801496a:	469c      	mov	ip, r3
 801496c:	4464      	add	r4, ip
 801496e:	003a      	movs	r2, r7
 8014970:	0023      	movs	r3, r4
 8014972:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014974:	600a      	str	r2, [r1, #0]
 8014976:	604b      	str	r3, [r1, #4]
 8014978:	2007      	movs	r0, #7
 801497a:	9b07      	ldr	r3, [sp, #28]
 801497c:	4018      	ands	r0, r3
 801497e:	239b      	movs	r3, #155	; 0x9b
 8014980:	009b      	lsls	r3, r3, #2
 8014982:	449d      	add	sp, r3
 8014984:	bc3c      	pop	{r2, r3, r4, r5}
 8014986:	4690      	mov	r8, r2
 8014988:	4699      	mov	r9, r3
 801498a:	46a2      	mov	sl, r4
 801498c:	46ab      	mov	fp, r5
 801498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014990:	9b00      	ldr	r3, [sp, #0]
 8014992:	a90e      	add	r1, sp, #56	; 0x38
 8014994:	1e5a      	subs	r2, r3, #1
 8014996:	0092      	lsls	r2, r2, #2
 8014998:	ab0e      	add	r3, sp, #56	; 0x38
 801499a:	589b      	ldr	r3, [r3, r2]
 801499c:	9307      	str	r3, [sp, #28]
 801499e:	025b      	lsls	r3, r3, #9
 80149a0:	0a5b      	lsrs	r3, r3, #9
 80149a2:	508b      	str	r3, [r1, r2]
 80149a4:	e657      	b.n	8014656 <__kernel_rem_pio2+0x272>
 80149a6:	4643      	mov	r3, r8
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	da00      	bge.n	80149ae <__kernel_rem_pio2+0x5ca>
 80149ac:	e170      	b.n	8014c90 <__kernel_rem_pio2+0x8ac>
 80149ae:	2000      	movs	r0, #0
 80149b0:	2100      	movs	r1, #0
 80149b2:	00db      	lsls	r3, r3, #3
 80149b4:	aa4a      	add	r2, sp, #296	; 0x128
 80149b6:	18d6      	adds	r6, r2, r3
 80149b8:	af48      	add	r7, sp, #288	; 0x120
 80149ba:	6832      	ldr	r2, [r6, #0]
 80149bc:	6873      	ldr	r3, [r6, #4]
 80149be:	3e08      	subs	r6, #8
 80149c0:	f7fa ffa2 	bl	800f908 <__aeabi_dadd>
 80149c4:	42b7      	cmp	r7, r6
 80149c6:	d1f8      	bne.n	80149ba <__kernel_rem_pio2+0x5d6>
 80149c8:	9b08      	ldr	r3, [sp, #32]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d000      	beq.n	80149d0 <__kernel_rem_pio2+0x5ec>
 80149ce:	e125      	b.n	8014c1c <__kernel_rem_pio2+0x838>
 80149d0:	000b      	movs	r3, r1
 80149d2:	0002      	movs	r2, r0
 80149d4:	984a      	ldr	r0, [sp, #296]	; 0x128
 80149d6:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80149d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80149da:	6022      	str	r2, [r4, #0]
 80149dc:	6063      	str	r3, [r4, #4]
 80149de:	f7fc f92b 	bl	8010c38 <__aeabi_dsub>
 80149e2:	4643      	mov	r3, r8
 80149e4:	0007      	movs	r7, r0
 80149e6:	000c      	movs	r4, r1
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	dd13      	ble.n	8014a14 <__kernel_rem_pio2+0x630>
 80149ec:	2501      	movs	r5, #1
 80149ee:	ae4c      	add	r6, sp, #304	; 0x130
 80149f0:	46b1      	mov	r9, r6
 80149f2:	0038      	movs	r0, r7
 80149f4:	002e      	movs	r6, r5
 80149f6:	0021      	movs	r1, r4
 80149f8:	464c      	mov	r4, r9
 80149fa:	3601      	adds	r6, #1
 80149fc:	cc0c      	ldmia	r4!, {r2, r3}
 80149fe:	f7fa ff83 	bl	800f908 <__aeabi_dadd>
 8014a02:	46a1      	mov	r9, r4
 8014a04:	45b0      	cmp	r8, r6
 8014a06:	daf7      	bge.n	80149f8 <__kernel_rem_pio2+0x614>
 8014a08:	9b08      	ldr	r3, [sp, #32]
 8014a0a:	0007      	movs	r7, r0
 8014a0c:	000c      	movs	r4, r1
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d000      	beq.n	8014a14 <__kernel_rem_pio2+0x630>
 8014a12:	e115      	b.n	8014c40 <__kernel_rem_pio2+0x85c>
 8014a14:	003a      	movs	r2, r7
 8014a16:	0023      	movs	r3, r4
 8014a18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014a1a:	608a      	str	r2, [r1, #8]
 8014a1c:	60cb      	str	r3, [r1, #12]
 8014a1e:	e7ab      	b.n	8014978 <__kernel_rem_pio2+0x594>
 8014a20:	2600      	movs	r6, #0
 8014a22:	2700      	movs	r7, #0
 8014a24:	e773      	b.n	801490e <__kernel_rem_pio2+0x52a>
 8014a26:	2301      	movs	r3, #1
 8014a28:	469c      	mov	ip, r3
 8014a2a:	9b00      	ldr	r3, [sp, #0]
 8014a2c:	44e1      	add	r9, ip
 8014a2e:	2502      	movs	r5, #2
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	dd00      	ble.n	8014a36 <__kernel_rem_pio2+0x652>
 8014a34:	e5eb      	b.n	801460e <__kernel_rem_pio2+0x22a>
 8014a36:	0032      	movs	r2, r6
 8014a38:	003b      	movs	r3, r7
 8014a3a:	2000      	movs	r0, #0
 8014a3c:	492b      	ldr	r1, [pc, #172]	; (8014aec <__kernel_rem_pio2+0x708>)
 8014a3e:	f7fc f8fb 	bl	8010c38 <__aeabi_dsub>
 8014a42:	0006      	movs	r6, r0
 8014a44:	000f      	movs	r7, r1
 8014a46:	e609      	b.n	801465c <__kernel_rem_pio2+0x278>
 8014a48:	2400      	movs	r4, #0
 8014a4a:	e5f2      	b.n	8014632 <__kernel_rem_pio2+0x24e>
 8014a4c:	ab4a      	add	r3, sp, #296	; 0x128
 8014a4e:	9303      	str	r3, [sp, #12]
 8014a50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014a52:	2b03      	cmp	r3, #3
 8014a54:	d000      	beq.n	8014a58 <__kernel_rem_pio2+0x674>
 8014a56:	e78f      	b.n	8014978 <__kernel_rem_pio2+0x594>
 8014a58:	4643      	mov	r3, r8
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	dc00      	bgt.n	8014a60 <__kernel_rem_pio2+0x67c>
 8014a5e:	e114      	b.n	8014c8a <__kernel_rem_pio2+0x8a6>
 8014a60:	9a03      	ldr	r2, [sp, #12]
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	469b      	mov	fp, r3
 8014a66:	0013      	movs	r3, r2
 8014a68:	4691      	mov	r9, r2
 8014a6a:	445b      	add	r3, fp
 8014a6c:	681e      	ldr	r6, [r3, #0]
 8014a6e:	685f      	ldr	r7, [r3, #4]
 8014a70:	4b23      	ldr	r3, [pc, #140]	; (8014b00 <__kernel_rem_pio2+0x71c>)
 8014a72:	4443      	add	r3, r8
 8014a74:	9302      	str	r3, [sp, #8]
 8014a76:	00db      	lsls	r3, r3, #3
 8014a78:	4499      	add	r9, r3
 8014a7a:	ab48      	add	r3, sp, #288	; 0x120
 8014a7c:	469a      	mov	sl, r3
 8014a7e:	464b      	mov	r3, r9
 8014a80:	685c      	ldr	r4, [r3, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	0018      	movs	r0, r3
 8014a86:	0021      	movs	r1, r4
 8014a88:	0032      	movs	r2, r6
 8014a8a:	003b      	movs	r3, r7
 8014a8c:	9000      	str	r0, [sp, #0]
 8014a8e:	9101      	str	r1, [sp, #4]
 8014a90:	f7fa ff3a 	bl	800f908 <__aeabi_dadd>
 8014a94:	0004      	movs	r4, r0
 8014a96:	000d      	movs	r5, r1
 8014a98:	0002      	movs	r2, r0
 8014a9a:	000b      	movs	r3, r1
 8014a9c:	9800      	ldr	r0, [sp, #0]
 8014a9e:	9901      	ldr	r1, [sp, #4]
 8014aa0:	f7fc f8ca 	bl	8010c38 <__aeabi_dsub>
 8014aa4:	003b      	movs	r3, r7
 8014aa6:	0032      	movs	r2, r6
 8014aa8:	f7fa ff2e 	bl	800f908 <__aeabi_dadd>
 8014aac:	464b      	mov	r3, r9
 8014aae:	6098      	str	r0, [r3, #8]
 8014ab0:	60d9      	str	r1, [r3, #12]
 8014ab2:	601c      	str	r4, [r3, #0]
 8014ab4:	605d      	str	r5, [r3, #4]
 8014ab6:	2308      	movs	r3, #8
 8014ab8:	425b      	negs	r3, r3
 8014aba:	469c      	mov	ip, r3
 8014abc:	44e1      	add	r9, ip
 8014abe:	0026      	movs	r6, r4
 8014ac0:	002f      	movs	r7, r5
 8014ac2:	45ca      	cmp	sl, r9
 8014ac4:	d1db      	bne.n	8014a7e <__kernel_rem_pio2+0x69a>
 8014ac6:	4643      	mov	r3, r8
 8014ac8:	2b01      	cmp	r3, #1
 8014aca:	dc00      	bgt.n	8014ace <__kernel_rem_pio2+0x6ea>
 8014acc:	e0e3      	b.n	8014c96 <__kernel_rem_pio2+0x8b2>
 8014ace:	9a03      	ldr	r2, [sp, #12]
 8014ad0:	0013      	movs	r3, r2
 8014ad2:	445b      	add	r3, fp
 8014ad4:	681e      	ldr	r6, [r3, #0]
 8014ad6:	685f      	ldr	r7, [r3, #4]
 8014ad8:	9b02      	ldr	r3, [sp, #8]
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	4699      	mov	r9, r3
 8014ade:	444a      	add	r2, r9
 8014ae0:	4690      	mov	r8, r2
 8014ae2:	e010      	b.n	8014b06 <__kernel_rem_pio2+0x722>
 8014ae4:	00ffffff 	.word	0x00ffffff
 8014ae8:	3fe00000 	.word	0x3fe00000
 8014aec:	3ff00000 	.word	0x3ff00000
 8014af0:	3fffffff 	.word	0x3fffffff
 8014af4:	3e700000 	.word	0x3e700000
 8014af8:	0801ebe8 	.word	0x0801ebe8
 8014afc:	3ff921fb 	.word	0x3ff921fb
 8014b00:	1fffffff 	.word	0x1fffffff
 8014b04:	4698      	mov	r8, r3
 8014b06:	4643      	mov	r3, r8
 8014b08:	685c      	ldr	r4, [r3, #4]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	0018      	movs	r0, r3
 8014b0e:	0021      	movs	r1, r4
 8014b10:	0032      	movs	r2, r6
 8014b12:	003b      	movs	r3, r7
 8014b14:	9000      	str	r0, [sp, #0]
 8014b16:	9101      	str	r1, [sp, #4]
 8014b18:	f7fa fef6 	bl	800f908 <__aeabi_dadd>
 8014b1c:	0004      	movs	r4, r0
 8014b1e:	000d      	movs	r5, r1
 8014b20:	0002      	movs	r2, r0
 8014b22:	000b      	movs	r3, r1
 8014b24:	9800      	ldr	r0, [sp, #0]
 8014b26:	9901      	ldr	r1, [sp, #4]
 8014b28:	f7fc f886 	bl	8010c38 <__aeabi_dsub>
 8014b2c:	0032      	movs	r2, r6
 8014b2e:	003b      	movs	r3, r7
 8014b30:	f7fa feea 	bl	800f908 <__aeabi_dadd>
 8014b34:	4643      	mov	r3, r8
 8014b36:	9a03      	ldr	r2, [sp, #12]
 8014b38:	6098      	str	r0, [r3, #8]
 8014b3a:	60d9      	str	r1, [r3, #12]
 8014b3c:	601c      	str	r4, [r3, #0]
 8014b3e:	605d      	str	r5, [r3, #4]
 8014b40:	3b08      	subs	r3, #8
 8014b42:	0026      	movs	r6, r4
 8014b44:	002f      	movs	r7, r5
 8014b46:	429a      	cmp	r2, r3
 8014b48:	d1dc      	bne.n	8014b04 <__kernel_rem_pio2+0x720>
 8014b4a:	464d      	mov	r5, r9
 8014b4c:	4694      	mov	ip, r2
 8014b4e:	2600      	movs	r6, #0
 8014b50:	2400      	movs	r4, #0
 8014b52:	4647      	mov	r7, r8
 8014b54:	3508      	adds	r5, #8
 8014b56:	4465      	add	r5, ip
 8014b58:	682a      	ldr	r2, [r5, #0]
 8014b5a:	686b      	ldr	r3, [r5, #4]
 8014b5c:	0030      	movs	r0, r6
 8014b5e:	0021      	movs	r1, r4
 8014b60:	f7fa fed2 	bl	800f908 <__aeabi_dadd>
 8014b64:	3d08      	subs	r5, #8
 8014b66:	0006      	movs	r6, r0
 8014b68:	000c      	movs	r4, r1
 8014b6a:	42af      	cmp	r7, r5
 8014b6c:	d1f4      	bne.n	8014b58 <__kernel_rem_pio2+0x774>
 8014b6e:	9b03      	ldr	r3, [sp, #12]
 8014b70:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 8014b72:	685d      	ldr	r5, [r3, #4]
 8014b74:	6899      	ldr	r1, [r3, #8]
 8014b76:	68d8      	ldr	r0, [r3, #12]
 8014b78:	9b08      	ldr	r3, [sp, #32]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d065      	beq.n	8014c4a <__kernel_rem_pio2+0x866>
 8014b7e:	2280      	movs	r2, #128	; 0x80
 8014b80:	0612      	lsls	r2, r2, #24
 8014b82:	4694      	mov	ip, r2
 8014b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b86:	4465      	add	r5, ip
 8014b88:	4460      	add	r0, ip
 8014b8a:	4464      	add	r4, ip
 8014b8c:	601f      	str	r7, [r3, #0]
 8014b8e:	605d      	str	r5, [r3, #4]
 8014b90:	6099      	str	r1, [r3, #8]
 8014b92:	60d8      	str	r0, [r3, #12]
 8014b94:	611e      	str	r6, [r3, #16]
 8014b96:	615c      	str	r4, [r3, #20]
 8014b98:	e6ee      	b.n	8014978 <__kernel_rem_pio2+0x594>
 8014b9a:	469a      	mov	sl, r3
 8014b9c:	464b      	mov	r3, r9
 8014b9e:	9307      	str	r3, [sp, #28]
 8014ba0:	9b05      	ldr	r3, [sp, #20]
 8014ba2:	0030      	movs	r0, r6
 8014ba4:	425a      	negs	r2, r3
 8014ba6:	0039      	movs	r1, r7
 8014ba8:	9508      	str	r5, [sp, #32]
 8014baa:	f000 f9d5 	bl	8014f58 <scalbn>
 8014bae:	2200      	movs	r2, #0
 8014bb0:	4b3a      	ldr	r3, [pc, #232]	; (8014c9c <__kernel_rem_pio2+0x8b8>)
 8014bb2:	0006      	movs	r6, r0
 8014bb4:	000f      	movs	r7, r1
 8014bb6:	f7fa fbc5 	bl	800f344 <__aeabi_dcmpge>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d024      	beq.n	8014c08 <__kernel_rem_pio2+0x824>
 8014bbe:	4b38      	ldr	r3, [pc, #224]	; (8014ca0 <__kernel_rem_pio2+0x8bc>)
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	0030      	movs	r0, r6
 8014bc4:	0039      	movs	r1, r7
 8014bc6:	f7fb fdc5 	bl	8010754 <__aeabi_dmul>
 8014bca:	f7fc fb99 	bl	8011300 <__aeabi_d2iz>
 8014bce:	4652      	mov	r2, sl
 8014bd0:	0004      	movs	r4, r0
 8014bd2:	0095      	lsls	r5, r2, #2
 8014bd4:	f7fc fbca 	bl	801136c <__aeabi_i2d>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	4b30      	ldr	r3, [pc, #192]	; (8014c9c <__kernel_rem_pio2+0x8b8>)
 8014bdc:	f7fb fdba 	bl	8010754 <__aeabi_dmul>
 8014be0:	0002      	movs	r2, r0
 8014be2:	000b      	movs	r3, r1
 8014be4:	0030      	movs	r0, r6
 8014be6:	0039      	movs	r1, r7
 8014be8:	f7fc f826 	bl	8010c38 <__aeabi_dsub>
 8014bec:	f7fc fb88 	bl	8011300 <__aeabi_d2iz>
 8014bf0:	aa0e      	add	r2, sp, #56	; 0x38
 8014bf2:	5150      	str	r0, [r2, r5]
 8014bf4:	2201      	movs	r2, #1
 8014bf6:	9b05      	ldr	r3, [sp, #20]
 8014bf8:	4452      	add	r2, sl
 8014bfa:	3318      	adds	r3, #24
 8014bfc:	4690      	mov	r8, r2
 8014bfe:	9305      	str	r3, [sp, #20]
 8014c00:	0093      	lsls	r3, r2, #2
 8014c02:	aa0e      	add	r2, sp, #56	; 0x38
 8014c04:	50d4      	str	r4, [r2, r3]
 8014c06:	e623      	b.n	8014850 <__kernel_rem_pio2+0x46c>
 8014c08:	4653      	mov	r3, sl
 8014c0a:	0030      	movs	r0, r6
 8014c0c:	0039      	movs	r1, r7
 8014c0e:	009c      	lsls	r4, r3, #2
 8014c10:	f7fc fb76 	bl	8011300 <__aeabi_d2iz>
 8014c14:	ab0e      	add	r3, sp, #56	; 0x38
 8014c16:	5118      	str	r0, [r3, r4]
 8014c18:	46d0      	mov	r8, sl
 8014c1a:	e619      	b.n	8014850 <__kernel_rem_pio2+0x46c>
 8014c1c:	2380      	movs	r3, #128	; 0x80
 8014c1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c20:	061b      	lsls	r3, r3, #24
 8014c22:	18cb      	adds	r3, r1, r3
 8014c24:	6010      	str	r0, [r2, #0]
 8014c26:	6053      	str	r3, [r2, #4]
 8014c28:	000b      	movs	r3, r1
 8014c2a:	0002      	movs	r2, r0
 8014c2c:	984a      	ldr	r0, [sp, #296]	; 0x128
 8014c2e:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8014c30:	f7fc f802 	bl	8010c38 <__aeabi_dsub>
 8014c34:	4643      	mov	r3, r8
 8014c36:	0007      	movs	r7, r0
 8014c38:	000c      	movs	r4, r1
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	dd00      	ble.n	8014c40 <__kernel_rem_pio2+0x85c>
 8014c3e:	e6d5      	b.n	80149ec <__kernel_rem_pio2+0x608>
 8014c40:	2380      	movs	r3, #128	; 0x80
 8014c42:	061b      	lsls	r3, r3, #24
 8014c44:	469c      	mov	ip, r3
 8014c46:	4464      	add	r4, ip
 8014c48:	e6e4      	b.n	8014a14 <__kernel_rem_pio2+0x630>
 8014c4a:	002b      	movs	r3, r5
 8014c4c:	003a      	movs	r2, r7
 8014c4e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014c50:	602a      	str	r2, [r5, #0]
 8014c52:	606b      	str	r3, [r5, #4]
 8014c54:	000a      	movs	r2, r1
 8014c56:	0003      	movs	r3, r0
 8014c58:	60aa      	str	r2, [r5, #8]
 8014c5a:	60eb      	str	r3, [r5, #12]
 8014c5c:	0032      	movs	r2, r6
 8014c5e:	0023      	movs	r3, r4
 8014c60:	612a      	str	r2, [r5, #16]
 8014c62:	616b      	str	r3, [r5, #20]
 8014c64:	e688      	b.n	8014978 <__kernel_rem_pio2+0x594>
 8014c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c68:	00db      	lsls	r3, r3, #3
 8014c6a:	9300      	str	r3, [sp, #0]
 8014c6c:	ab72      	add	r3, sp, #456	; 0x1c8
 8014c6e:	9304      	str	r3, [sp, #16]
 8014c70:	e432      	b.n	80144d8 <__kernel_rem_pio2+0xf4>
 8014c72:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	dd00      	ble.n	8014c7a <__kernel_rem_pio2+0x896>
 8014c78:	e6e8      	b.n	8014a4c <__kernel_rem_pio2+0x668>
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	dd00      	ble.n	8014c80 <__kernel_rem_pio2+0x89c>
 8014c7e:	e692      	b.n	80149a6 <__kernel_rem_pio2+0x5c2>
 8014c80:	d000      	beq.n	8014c84 <__kernel_rem_pio2+0x8a0>
 8014c82:	e679      	b.n	8014978 <__kernel_rem_pio2+0x594>
 8014c84:	2700      	movs	r7, #0
 8014c86:	2400      	movs	r4, #0
 8014c88:	e66a      	b.n	8014960 <__kernel_rem_pio2+0x57c>
 8014c8a:	2600      	movs	r6, #0
 8014c8c:	2400      	movs	r4, #0
 8014c8e:	e76e      	b.n	8014b6e <__kernel_rem_pio2+0x78a>
 8014c90:	2000      	movs	r0, #0
 8014c92:	2100      	movs	r1, #0
 8014c94:	e698      	b.n	80149c8 <__kernel_rem_pio2+0x5e4>
 8014c96:	2600      	movs	r6, #0
 8014c98:	0034      	movs	r4, r6
 8014c9a:	e768      	b.n	8014b6e <__kernel_rem_pio2+0x78a>
 8014c9c:	41700000 	.word	0x41700000
 8014ca0:	3e700000 	.word	0x3e700000

08014ca4 <__kernel_sin>:
 8014ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca6:	46ce      	mov	lr, r9
 8014ca8:	4647      	mov	r7, r8
 8014caa:	b580      	push	{r7, lr}
 8014cac:	b087      	sub	sp, #28
 8014cae:	9200      	str	r2, [sp, #0]
 8014cb0:	9301      	str	r3, [sp, #4]
 8014cb2:	4a47      	ldr	r2, [pc, #284]	; (8014dd0 <__kernel_sin+0x12c>)
 8014cb4:	004b      	lsls	r3, r1, #1
 8014cb6:	4681      	mov	r9, r0
 8014cb8:	4688      	mov	r8, r1
 8014cba:	085b      	lsrs	r3, r3, #1
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	dc07      	bgt.n	8014cd0 <__kernel_sin+0x2c>
 8014cc0:	4641      	mov	r1, r8
 8014cc2:	4648      	mov	r0, r9
 8014cc4:	f7fc fb1c 	bl	8011300 <__aeabi_d2iz>
 8014cc8:	4641      	mov	r1, r8
 8014cca:	1e03      	subs	r3, r0, #0
 8014ccc:	4648      	mov	r0, r9
 8014cce:	d066      	beq.n	8014d9e <__kernel_sin+0xfa>
 8014cd0:	464a      	mov	r2, r9
 8014cd2:	4643      	mov	r3, r8
 8014cd4:	4648      	mov	r0, r9
 8014cd6:	4641      	mov	r1, r8
 8014cd8:	f7fb fd3c 	bl	8010754 <__aeabi_dmul>
 8014cdc:	0004      	movs	r4, r0
 8014cde:	000d      	movs	r5, r1
 8014ce0:	0002      	movs	r2, r0
 8014ce2:	000b      	movs	r3, r1
 8014ce4:	4648      	mov	r0, r9
 8014ce6:	4641      	mov	r1, r8
 8014ce8:	f7fb fd34 	bl	8010754 <__aeabi_dmul>
 8014cec:	4a39      	ldr	r2, [pc, #228]	; (8014dd4 <__kernel_sin+0x130>)
 8014cee:	4b3a      	ldr	r3, [pc, #232]	; (8014dd8 <__kernel_sin+0x134>)
 8014cf0:	0006      	movs	r6, r0
 8014cf2:	000f      	movs	r7, r1
 8014cf4:	0020      	movs	r0, r4
 8014cf6:	0029      	movs	r1, r5
 8014cf8:	f7fb fd2c 	bl	8010754 <__aeabi_dmul>
 8014cfc:	4a37      	ldr	r2, [pc, #220]	; (8014ddc <__kernel_sin+0x138>)
 8014cfe:	4b38      	ldr	r3, [pc, #224]	; (8014de0 <__kernel_sin+0x13c>)
 8014d00:	f7fb ff9a 	bl	8010c38 <__aeabi_dsub>
 8014d04:	0022      	movs	r2, r4
 8014d06:	002b      	movs	r3, r5
 8014d08:	f7fb fd24 	bl	8010754 <__aeabi_dmul>
 8014d0c:	4a35      	ldr	r2, [pc, #212]	; (8014de4 <__kernel_sin+0x140>)
 8014d0e:	4b36      	ldr	r3, [pc, #216]	; (8014de8 <__kernel_sin+0x144>)
 8014d10:	f7fa fdfa 	bl	800f908 <__aeabi_dadd>
 8014d14:	0022      	movs	r2, r4
 8014d16:	002b      	movs	r3, r5
 8014d18:	f7fb fd1c 	bl	8010754 <__aeabi_dmul>
 8014d1c:	4a33      	ldr	r2, [pc, #204]	; (8014dec <__kernel_sin+0x148>)
 8014d1e:	4b34      	ldr	r3, [pc, #208]	; (8014df0 <__kernel_sin+0x14c>)
 8014d20:	f7fb ff8a 	bl	8010c38 <__aeabi_dsub>
 8014d24:	0022      	movs	r2, r4
 8014d26:	002b      	movs	r3, r5
 8014d28:	f7fb fd14 	bl	8010754 <__aeabi_dmul>
 8014d2c:	4b31      	ldr	r3, [pc, #196]	; (8014df4 <__kernel_sin+0x150>)
 8014d2e:	4a32      	ldr	r2, [pc, #200]	; (8014df8 <__kernel_sin+0x154>)
 8014d30:	f7fa fdea 	bl	800f908 <__aeabi_dadd>
 8014d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d36:	9002      	str	r0, [sp, #8]
 8014d38:	9103      	str	r1, [sp, #12]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d034      	beq.n	8014da8 <__kernel_sin+0x104>
 8014d3e:	9800      	ldr	r0, [sp, #0]
 8014d40:	9901      	ldr	r1, [sp, #4]
 8014d42:	2200      	movs	r2, #0
 8014d44:	4b2d      	ldr	r3, [pc, #180]	; (8014dfc <__kernel_sin+0x158>)
 8014d46:	f7fb fd05 	bl	8010754 <__aeabi_dmul>
 8014d4a:	9a02      	ldr	r2, [sp, #8]
 8014d4c:	9b03      	ldr	r3, [sp, #12]
 8014d4e:	9004      	str	r0, [sp, #16]
 8014d50:	9105      	str	r1, [sp, #20]
 8014d52:	0030      	movs	r0, r6
 8014d54:	0039      	movs	r1, r7
 8014d56:	f7fb fcfd 	bl	8010754 <__aeabi_dmul>
 8014d5a:	0002      	movs	r2, r0
 8014d5c:	000b      	movs	r3, r1
 8014d5e:	9804      	ldr	r0, [sp, #16]
 8014d60:	9905      	ldr	r1, [sp, #20]
 8014d62:	f7fb ff69 	bl	8010c38 <__aeabi_dsub>
 8014d66:	0022      	movs	r2, r4
 8014d68:	002b      	movs	r3, r5
 8014d6a:	f7fb fcf3 	bl	8010754 <__aeabi_dmul>
 8014d6e:	9a00      	ldr	r2, [sp, #0]
 8014d70:	9b01      	ldr	r3, [sp, #4]
 8014d72:	f7fb ff61 	bl	8010c38 <__aeabi_dsub>
 8014d76:	4a22      	ldr	r2, [pc, #136]	; (8014e00 <__kernel_sin+0x15c>)
 8014d78:	0004      	movs	r4, r0
 8014d7a:	000d      	movs	r5, r1
 8014d7c:	4b21      	ldr	r3, [pc, #132]	; (8014e04 <__kernel_sin+0x160>)
 8014d7e:	0030      	movs	r0, r6
 8014d80:	0039      	movs	r1, r7
 8014d82:	f7fb fce7 	bl	8010754 <__aeabi_dmul>
 8014d86:	0002      	movs	r2, r0
 8014d88:	000b      	movs	r3, r1
 8014d8a:	0020      	movs	r0, r4
 8014d8c:	0029      	movs	r1, r5
 8014d8e:	f7fa fdbb 	bl	800f908 <__aeabi_dadd>
 8014d92:	0002      	movs	r2, r0
 8014d94:	000b      	movs	r3, r1
 8014d96:	4648      	mov	r0, r9
 8014d98:	4641      	mov	r1, r8
 8014d9a:	f7fb ff4d 	bl	8010c38 <__aeabi_dsub>
 8014d9e:	b007      	add	sp, #28
 8014da0:	bc0c      	pop	{r2, r3}
 8014da2:	4690      	mov	r8, r2
 8014da4:	4699      	mov	r9, r3
 8014da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014da8:	0002      	movs	r2, r0
 8014daa:	000b      	movs	r3, r1
 8014dac:	0020      	movs	r0, r4
 8014dae:	0029      	movs	r1, r5
 8014db0:	f7fb fcd0 	bl	8010754 <__aeabi_dmul>
 8014db4:	4a12      	ldr	r2, [pc, #72]	; (8014e00 <__kernel_sin+0x15c>)
 8014db6:	4b13      	ldr	r3, [pc, #76]	; (8014e04 <__kernel_sin+0x160>)
 8014db8:	f7fb ff3e 	bl	8010c38 <__aeabi_dsub>
 8014dbc:	0032      	movs	r2, r6
 8014dbe:	003b      	movs	r3, r7
 8014dc0:	f7fb fcc8 	bl	8010754 <__aeabi_dmul>
 8014dc4:	464a      	mov	r2, r9
 8014dc6:	4643      	mov	r3, r8
 8014dc8:	f7fa fd9e 	bl	800f908 <__aeabi_dadd>
 8014dcc:	e7e7      	b.n	8014d9e <__kernel_sin+0xfa>
 8014dce:	46c0      	nop			; (mov r8, r8)
 8014dd0:	3e3fffff 	.word	0x3e3fffff
 8014dd4:	5acfd57c 	.word	0x5acfd57c
 8014dd8:	3de5d93a 	.word	0x3de5d93a
 8014ddc:	8a2b9ceb 	.word	0x8a2b9ceb
 8014de0:	3e5ae5e6 	.word	0x3e5ae5e6
 8014de4:	57b1fe7d 	.word	0x57b1fe7d
 8014de8:	3ec71de3 	.word	0x3ec71de3
 8014dec:	19c161d5 	.word	0x19c161d5
 8014df0:	3f2a01a0 	.word	0x3f2a01a0
 8014df4:	3f811111 	.word	0x3f811111
 8014df8:	1110f8a6 	.word	0x1110f8a6
 8014dfc:	3fe00000 	.word	0x3fe00000
 8014e00:	55555549 	.word	0x55555549
 8014e04:	3fc55555 	.word	0x3fc55555

08014e08 <fabs>:
 8014e08:	0049      	lsls	r1, r1, #1
 8014e0a:	084b      	lsrs	r3, r1, #1
 8014e0c:	0019      	movs	r1, r3
 8014e0e:	4770      	bx	lr

08014e10 <floor>:
 8014e10:	4a47      	ldr	r2, [pc, #284]	; (8014f30 <floor+0x120>)
 8014e12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e14:	464f      	mov	r7, r9
 8014e16:	4691      	mov	r9, r2
 8014e18:	004b      	lsls	r3, r1, #1
 8014e1a:	0d5b      	lsrs	r3, r3, #21
 8014e1c:	4499      	add	r9, r3
 8014e1e:	4646      	mov	r6, r8
 8014e20:	46d6      	mov	lr, sl
 8014e22:	464a      	mov	r2, r9
 8014e24:	b5c0      	push	{r6, r7, lr}
 8014e26:	0005      	movs	r5, r0
 8014e28:	000c      	movs	r4, r1
 8014e2a:	000e      	movs	r6, r1
 8014e2c:	4688      	mov	r8, r1
 8014e2e:	0007      	movs	r7, r0
 8014e30:	2a13      	cmp	r2, #19
 8014e32:	dc27      	bgt.n	8014e84 <floor+0x74>
 8014e34:	2a00      	cmp	r2, #0
 8014e36:	db4b      	blt.n	8014ed0 <floor+0xc0>
 8014e38:	4b3e      	ldr	r3, [pc, #248]	; (8014f34 <floor+0x124>)
 8014e3a:	4113      	asrs	r3, r2
 8014e3c:	469a      	mov	sl, r3
 8014e3e:	000b      	movs	r3, r1
 8014e40:	4652      	mov	r2, sl
 8014e42:	4013      	ands	r3, r2
 8014e44:	4303      	orrs	r3, r0
 8014e46:	d018      	beq.n	8014e7a <floor+0x6a>
 8014e48:	4a3b      	ldr	r2, [pc, #236]	; (8014f38 <floor+0x128>)
 8014e4a:	4b3c      	ldr	r3, [pc, #240]	; (8014f3c <floor+0x12c>)
 8014e4c:	0028      	movs	r0, r5
 8014e4e:	0021      	movs	r1, r4
 8014e50:	f7fa fd5a 	bl	800f908 <__aeabi_dadd>
 8014e54:	2200      	movs	r2, #0
 8014e56:	2300      	movs	r3, #0
 8014e58:	f7fa fa6a 	bl	800f330 <__aeabi_dcmpgt>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d047      	beq.n	8014ef0 <floor+0xe0>
 8014e60:	2c00      	cmp	r4, #0
 8014e62:	da04      	bge.n	8014e6e <floor+0x5e>
 8014e64:	2380      	movs	r3, #128	; 0x80
 8014e66:	464a      	mov	r2, r9
 8014e68:	035b      	lsls	r3, r3, #13
 8014e6a:	4113      	asrs	r3, r2
 8014e6c:	4498      	add	r8, r3
 8014e6e:	4646      	mov	r6, r8
 8014e70:	4653      	mov	r3, sl
 8014e72:	2700      	movs	r7, #0
 8014e74:	439e      	bics	r6, r3
 8014e76:	0038      	movs	r0, r7
 8014e78:	0031      	movs	r1, r6
 8014e7a:	bc1c      	pop	{r2, r3, r4}
 8014e7c:	4690      	mov	r8, r2
 8014e7e:	4699      	mov	r9, r3
 8014e80:	46a2      	mov	sl, r4
 8014e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e84:	2a33      	cmp	r2, #51	; 0x33
 8014e86:	dd08      	ble.n	8014e9a <floor+0x8a>
 8014e88:	2380      	movs	r3, #128	; 0x80
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	4599      	cmp	r9, r3
 8014e8e:	d1f4      	bne.n	8014e7a <floor+0x6a>
 8014e90:	0002      	movs	r2, r0
 8014e92:	000b      	movs	r3, r1
 8014e94:	f7fa fd38 	bl	800f908 <__aeabi_dadd>
 8014e98:	e7ef      	b.n	8014e7a <floor+0x6a>
 8014e9a:	4a29      	ldr	r2, [pc, #164]	; (8014f40 <floor+0x130>)
 8014e9c:	4694      	mov	ip, r2
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	4463      	add	r3, ip
 8014ea2:	4252      	negs	r2, r2
 8014ea4:	40da      	lsrs	r2, r3
 8014ea6:	4692      	mov	sl, r2
 8014ea8:	4202      	tst	r2, r0
 8014eaa:	d0e6      	beq.n	8014e7a <floor+0x6a>
 8014eac:	4a22      	ldr	r2, [pc, #136]	; (8014f38 <floor+0x128>)
 8014eae:	4b23      	ldr	r3, [pc, #140]	; (8014f3c <floor+0x12c>)
 8014eb0:	0028      	movs	r0, r5
 8014eb2:	0021      	movs	r1, r4
 8014eb4:	f7fa fd28 	bl	800f908 <__aeabi_dadd>
 8014eb8:	2200      	movs	r2, #0
 8014eba:	2300      	movs	r3, #0
 8014ebc:	f7fa fa38 	bl	800f330 <__aeabi_dcmpgt>
 8014ec0:	2800      	cmp	r0, #0
 8014ec2:	d015      	beq.n	8014ef0 <floor+0xe0>
 8014ec4:	2c00      	cmp	r4, #0
 8014ec6:	db1e      	blt.n	8014f06 <floor+0xf6>
 8014ec8:	4653      	mov	r3, sl
 8014eca:	4646      	mov	r6, r8
 8014ecc:	439f      	bics	r7, r3
 8014ece:	e00f      	b.n	8014ef0 <floor+0xe0>
 8014ed0:	4a19      	ldr	r2, [pc, #100]	; (8014f38 <floor+0x128>)
 8014ed2:	4b1a      	ldr	r3, [pc, #104]	; (8014f3c <floor+0x12c>)
 8014ed4:	0028      	movs	r0, r5
 8014ed6:	0021      	movs	r1, r4
 8014ed8:	f7fa fd16 	bl	800f908 <__aeabi_dadd>
 8014edc:	2200      	movs	r2, #0
 8014ede:	2300      	movs	r3, #0
 8014ee0:	f7fa fa26 	bl	800f330 <__aeabi_dcmpgt>
 8014ee4:	2800      	cmp	r0, #0
 8014ee6:	d003      	beq.n	8014ef0 <floor+0xe0>
 8014ee8:	2c00      	cmp	r4, #0
 8014eea:	db04      	blt.n	8014ef6 <floor+0xe6>
 8014eec:	2700      	movs	r7, #0
 8014eee:	2600      	movs	r6, #0
 8014ef0:	0038      	movs	r0, r7
 8014ef2:	0031      	movs	r1, r6
 8014ef4:	e7c1      	b.n	8014e7a <floor+0x6a>
 8014ef6:	0064      	lsls	r4, r4, #1
 8014ef8:	0864      	lsrs	r4, r4, #1
 8014efa:	4325      	orrs	r5, r4
 8014efc:	2700      	movs	r7, #0
 8014efe:	2d00      	cmp	r5, #0
 8014f00:	d0f6      	beq.n	8014ef0 <floor+0xe0>
 8014f02:	4e10      	ldr	r6, [pc, #64]	; (8014f44 <floor+0x134>)
 8014f04:	e7f4      	b.n	8014ef0 <floor+0xe0>
 8014f06:	464b      	mov	r3, r9
 8014f08:	2b14      	cmp	r3, #20
 8014f0a:	d00b      	beq.n	8014f24 <floor+0x114>
 8014f0c:	2234      	movs	r2, #52	; 0x34
 8014f0e:	1ad2      	subs	r2, r2, r3
 8014f10:	2301      	movs	r3, #1
 8014f12:	4093      	lsls	r3, r2
 8014f14:	195d      	adds	r5, r3, r5
 8014f16:	42bd      	cmp	r5, r7
 8014f18:	d208      	bcs.n	8014f2c <floor+0x11c>
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	469c      	mov	ip, r3
 8014f1e:	002f      	movs	r7, r5
 8014f20:	44e0      	add	r8, ip
 8014f22:	e7d1      	b.n	8014ec8 <floor+0xb8>
 8014f24:	3b13      	subs	r3, #19
 8014f26:	469c      	mov	ip, r3
 8014f28:	44e0      	add	r8, ip
 8014f2a:	e7cd      	b.n	8014ec8 <floor+0xb8>
 8014f2c:	002f      	movs	r7, r5
 8014f2e:	e7cb      	b.n	8014ec8 <floor+0xb8>
 8014f30:	fffffc01 	.word	0xfffffc01
 8014f34:	000fffff 	.word	0x000fffff
 8014f38:	8800759c 	.word	0x8800759c
 8014f3c:	7e37e43c 	.word	0x7e37e43c
 8014f40:	fffffbed 	.word	0xfffffbed
 8014f44:	bff00000 	.word	0xbff00000

08014f48 <matherr>:
 8014f48:	2000      	movs	r0, #0
 8014f4a:	4770      	bx	lr

08014f4c <nan>:
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	4901      	ldr	r1, [pc, #4]	; (8014f54 <nan+0x8>)
 8014f50:	4770      	bx	lr
 8014f52:	46c0      	nop			; (mov r8, r8)
 8014f54:	7ff80000 	.word	0x7ff80000

08014f58 <scalbn>:
 8014f58:	004b      	lsls	r3, r1, #1
 8014f5a:	b570      	push	{r4, r5, r6, lr}
 8014f5c:	0d5b      	lsrs	r3, r3, #21
 8014f5e:	0014      	movs	r4, r2
 8014f60:	000a      	movs	r2, r1
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d11a      	bne.n	8014f9c <scalbn+0x44>
 8014f66:	004b      	lsls	r3, r1, #1
 8014f68:	085b      	lsrs	r3, r3, #1
 8014f6a:	4303      	orrs	r3, r0
 8014f6c:	d015      	beq.n	8014f9a <scalbn+0x42>
 8014f6e:	4b23      	ldr	r3, [pc, #140]	; (8014ffc <scalbn+0xa4>)
 8014f70:	2200      	movs	r2, #0
 8014f72:	f7fb fbef 	bl	8010754 <__aeabi_dmul>
 8014f76:	4b22      	ldr	r3, [pc, #136]	; (8015000 <scalbn+0xa8>)
 8014f78:	429c      	cmp	r4, r3
 8014f7a:	db2d      	blt.n	8014fd8 <scalbn+0x80>
 8014f7c:	000a      	movs	r2, r1
 8014f7e:	004b      	lsls	r3, r1, #1
 8014f80:	0d5b      	lsrs	r3, r3, #21
 8014f82:	3b36      	subs	r3, #54	; 0x36
 8014f84:	4d1f      	ldr	r5, [pc, #124]	; (8015004 <scalbn+0xac>)
 8014f86:	18e3      	adds	r3, r4, r3
 8014f88:	42ab      	cmp	r3, r5
 8014f8a:	dc2a      	bgt.n	8014fe2 <scalbn+0x8a>
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	dd0d      	ble.n	8014fac <scalbn+0x54>
 8014f90:	4c1d      	ldr	r4, [pc, #116]	; (8015008 <scalbn+0xb0>)
 8014f92:	051b      	lsls	r3, r3, #20
 8014f94:	4022      	ands	r2, r4
 8014f96:	431a      	orrs	r2, r3
 8014f98:	0011      	movs	r1, r2
 8014f9a:	bd70      	pop	{r4, r5, r6, pc}
 8014f9c:	4d1b      	ldr	r5, [pc, #108]	; (801500c <scalbn+0xb4>)
 8014f9e:	42ab      	cmp	r3, r5
 8014fa0:	d1f0      	bne.n	8014f84 <scalbn+0x2c>
 8014fa2:	0002      	movs	r2, r0
 8014fa4:	000b      	movs	r3, r1
 8014fa6:	f7fa fcaf 	bl	800f908 <__aeabi_dadd>
 8014faa:	e7f6      	b.n	8014f9a <scalbn+0x42>
 8014fac:	001d      	movs	r5, r3
 8014fae:	3535      	adds	r5, #53	; 0x35
 8014fb0:	da19      	bge.n	8014fe6 <scalbn+0x8e>
 8014fb2:	4b17      	ldr	r3, [pc, #92]	; (8015010 <scalbn+0xb8>)
 8014fb4:	0002      	movs	r2, r0
 8014fb6:	429c      	cmp	r4, r3
 8014fb8:	dd09      	ble.n	8014fce <scalbn+0x76>
 8014fba:	000b      	movs	r3, r1
 8014fbc:	4815      	ldr	r0, [pc, #84]	; (8015014 <scalbn+0xbc>)
 8014fbe:	4916      	ldr	r1, [pc, #88]	; (8015018 <scalbn+0xc0>)
 8014fc0:	f000 f982 	bl	80152c8 <copysign>
 8014fc4:	4a13      	ldr	r2, [pc, #76]	; (8015014 <scalbn+0xbc>)
 8014fc6:	4b14      	ldr	r3, [pc, #80]	; (8015018 <scalbn+0xc0>)
 8014fc8:	f7fb fbc4 	bl	8010754 <__aeabi_dmul>
 8014fcc:	e7e5      	b.n	8014f9a <scalbn+0x42>
 8014fce:	000b      	movs	r3, r1
 8014fd0:	4812      	ldr	r0, [pc, #72]	; (801501c <scalbn+0xc4>)
 8014fd2:	4913      	ldr	r1, [pc, #76]	; (8015020 <scalbn+0xc8>)
 8014fd4:	f000 f978 	bl	80152c8 <copysign>
 8014fd8:	4a10      	ldr	r2, [pc, #64]	; (801501c <scalbn+0xc4>)
 8014fda:	4b11      	ldr	r3, [pc, #68]	; (8015020 <scalbn+0xc8>)
 8014fdc:	f7fb fbba 	bl	8010754 <__aeabi_dmul>
 8014fe0:	e7db      	b.n	8014f9a <scalbn+0x42>
 8014fe2:	0002      	movs	r2, r0
 8014fe4:	e7e9      	b.n	8014fba <scalbn+0x62>
 8014fe6:	4c08      	ldr	r4, [pc, #32]	; (8015008 <scalbn+0xb0>)
 8014fe8:	3336      	adds	r3, #54	; 0x36
 8014fea:	4022      	ands	r2, r4
 8014fec:	051b      	lsls	r3, r3, #20
 8014fee:	4313      	orrs	r3, r2
 8014ff0:	0019      	movs	r1, r3
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	4b0b      	ldr	r3, [pc, #44]	; (8015024 <scalbn+0xcc>)
 8014ff6:	f7fb fbad 	bl	8010754 <__aeabi_dmul>
 8014ffa:	e7ce      	b.n	8014f9a <scalbn+0x42>
 8014ffc:	43500000 	.word	0x43500000
 8015000:	ffff3cb0 	.word	0xffff3cb0
 8015004:	000007fe 	.word	0x000007fe
 8015008:	800fffff 	.word	0x800fffff
 801500c:	000007ff 	.word	0x000007ff
 8015010:	0000c350 	.word	0x0000c350
 8015014:	8800759c 	.word	0x8800759c
 8015018:	7e37e43c 	.word	0x7e37e43c
 801501c:	c2f8f359 	.word	0xc2f8f359
 8015020:	01a56e1f 	.word	0x01a56e1f
 8015024:	3c900000 	.word	0x3c900000

08015028 <finitef>:
 8015028:	0043      	lsls	r3, r0, #1
 801502a:	2000      	movs	r0, #0
 801502c:	4a02      	ldr	r2, [pc, #8]	; (8015038 <finitef+0x10>)
 801502e:	085b      	lsrs	r3, r3, #1
 8015030:	429a      	cmp	r2, r3
 8015032:	4140      	adcs	r0, r0
 8015034:	4770      	bx	lr
 8015036:	46c0      	nop			; (mov r8, r8)
 8015038:	7f7fffff 	.word	0x7f7fffff

0801503c <__ieee754_logf>:
 801503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801503e:	46de      	mov	lr, fp
 8015040:	4657      	mov	r7, sl
 8015042:	464e      	mov	r6, r9
 8015044:	4645      	mov	r5, r8
 8015046:	0003      	movs	r3, r0
 8015048:	b5e0      	push	{r5, r6, r7, lr}
 801504a:	0042      	lsls	r2, r0, #1
 801504c:	d044      	beq.n	80150d8 <__ieee754_logf+0x9c>
 801504e:	2800      	cmp	r0, #0
 8015050:	db4d      	blt.n	80150ee <__ieee754_logf+0xb2>
 8015052:	4a8e      	ldr	r2, [pc, #568]	; (801528c <__ieee754_logf+0x250>)
 8015054:	4290      	cmp	r0, r2
 8015056:	dc51      	bgt.n	80150fc <__ieee754_logf+0xc0>
 8015058:	4a8d      	ldr	r2, [pc, #564]	; (8015290 <__ieee754_logf+0x254>)
 801505a:	2100      	movs	r1, #0
 801505c:	4290      	cmp	r0, r2
 801505e:	dc06      	bgt.n	801506e <__ieee754_logf+0x32>
 8015060:	2198      	movs	r1, #152	; 0x98
 8015062:	05c9      	lsls	r1, r1, #23
 8015064:	f7f9 fc92 	bl	800e98c <__aeabi_fmul>
 8015068:	2119      	movs	r1, #25
 801506a:	0003      	movs	r3, r0
 801506c:	4249      	negs	r1, r1
 801506e:	15da      	asrs	r2, r3, #23
 8015070:	025b      	lsls	r3, r3, #9
 8015072:	0a5c      	lsrs	r4, r3, #9
 8015074:	4b87      	ldr	r3, [pc, #540]	; (8015294 <__ieee754_logf+0x258>)
 8015076:	3a7f      	subs	r2, #127	; 0x7f
 8015078:	18e0      	adds	r0, r4, r3
 801507a:	2380      	movs	r3, #128	; 0x80
 801507c:	041b      	lsls	r3, r3, #16
 801507e:	4003      	ands	r3, r0
 8015080:	20fe      	movs	r0, #254	; 0xfe
 8015082:	1852      	adds	r2, r2, r1
 8015084:	21fe      	movs	r1, #254	; 0xfe
 8015086:	0580      	lsls	r0, r0, #22
 8015088:	4058      	eors	r0, r3
 801508a:	15dd      	asrs	r5, r3, #23
 801508c:	4320      	orrs	r0, r4
 801508e:	0589      	lsls	r1, r1, #22
 8015090:	18ad      	adds	r5, r5, r2
 8015092:	f7f9 fdad 	bl	800ebf0 <__aeabi_fsub>
 8015096:	0023      	movs	r3, r4
 8015098:	330f      	adds	r3, #15
 801509a:	025b      	lsls	r3, r3, #9
 801509c:	1c06      	adds	r6, r0, #0
 801509e:	0a5b      	lsrs	r3, r3, #9
 80150a0:	2b0f      	cmp	r3, #15
 80150a2:	dc2f      	bgt.n	8015104 <__ieee754_logf+0xc8>
 80150a4:	2100      	movs	r1, #0
 80150a6:	f7fa f963 	bl	800f370 <__aeabi_fcmpeq>
 80150aa:	2800      	cmp	r0, #0
 80150ac:	d100      	bne.n	80150b0 <__ieee754_logf+0x74>
 80150ae:	e09e      	b.n	80151ee <__ieee754_logf+0x1b2>
 80150b0:	2000      	movs	r0, #0
 80150b2:	2d00      	cmp	r5, #0
 80150b4:	d015      	beq.n	80150e2 <__ieee754_logf+0xa6>
 80150b6:	0028      	movs	r0, r5
 80150b8:	f7fa fb9c 	bl	800f7f4 <__aeabi_i2f>
 80150bc:	4976      	ldr	r1, [pc, #472]	; (8015298 <__ieee754_logf+0x25c>)
 80150be:	1c04      	adds	r4, r0, #0
 80150c0:	f7f9 fc64 	bl	800e98c <__aeabi_fmul>
 80150c4:	4975      	ldr	r1, [pc, #468]	; (801529c <__ieee754_logf+0x260>)
 80150c6:	1c05      	adds	r5, r0, #0
 80150c8:	1c20      	adds	r0, r4, #0
 80150ca:	f7f9 fc5f 	bl	800e98c <__aeabi_fmul>
 80150ce:	1c01      	adds	r1, r0, #0
 80150d0:	1c28      	adds	r0, r5, #0
 80150d2:	f7f9 f9af 	bl	800e434 <__aeabi_fadd>
 80150d6:	e004      	b.n	80150e2 <__ieee754_logf+0xa6>
 80150d8:	20cc      	movs	r0, #204	; 0xcc
 80150da:	2100      	movs	r1, #0
 80150dc:	0600      	lsls	r0, r0, #24
 80150de:	f7f9 fb43 	bl	800e768 <__aeabi_fdiv>
 80150e2:	bc3c      	pop	{r2, r3, r4, r5}
 80150e4:	4690      	mov	r8, r2
 80150e6:	4699      	mov	r9, r3
 80150e8:	46a2      	mov	sl, r4
 80150ea:	46ab      	mov	fp, r5
 80150ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150ee:	1c01      	adds	r1, r0, #0
 80150f0:	f7f9 fd7e 	bl	800ebf0 <__aeabi_fsub>
 80150f4:	2100      	movs	r1, #0
 80150f6:	f7f9 fb37 	bl	800e768 <__aeabi_fdiv>
 80150fa:	e7f2      	b.n	80150e2 <__ieee754_logf+0xa6>
 80150fc:	1c01      	adds	r1, r0, #0
 80150fe:	f7f9 f999 	bl	800e434 <__aeabi_fadd>
 8015102:	e7ee      	b.n	80150e2 <__ieee754_logf+0xa6>
 8015104:	2180      	movs	r1, #128	; 0x80
 8015106:	05c9      	lsls	r1, r1, #23
 8015108:	f7f9 f994 	bl	800e434 <__aeabi_fadd>
 801510c:	1c01      	adds	r1, r0, #0
 801510e:	1c30      	adds	r0, r6, #0
 8015110:	f7f9 fb2a 	bl	800e768 <__aeabi_fdiv>
 8015114:	4680      	mov	r8, r0
 8015116:	0028      	movs	r0, r5
 8015118:	f7fa fb6c 	bl	800f7f4 <__aeabi_i2f>
 801511c:	4641      	mov	r1, r8
 801511e:	4681      	mov	r9, r0
 8015120:	4640      	mov	r0, r8
 8015122:	f7f9 fc33 	bl	800e98c <__aeabi_fmul>
 8015126:	4b5e      	ldr	r3, [pc, #376]	; (80152a0 <__ieee754_logf+0x264>)
 8015128:	1c01      	adds	r1, r0, #0
 801512a:	469a      	mov	sl, r3
 801512c:	4683      	mov	fp, r0
 801512e:	f7f9 fc2d 	bl	800e98c <__aeabi_fmul>
 8015132:	495c      	ldr	r1, [pc, #368]	; (80152a4 <__ieee754_logf+0x268>)
 8015134:	1c07      	adds	r7, r0, #0
 8015136:	f7f9 fc29 	bl	800e98c <__aeabi_fmul>
 801513a:	495b      	ldr	r1, [pc, #364]	; (80152a8 <__ieee754_logf+0x26c>)
 801513c:	f7f9 f97a 	bl	800e434 <__aeabi_fadd>
 8015140:	1c39      	adds	r1, r7, #0
 8015142:	f7f9 fc23 	bl	800e98c <__aeabi_fmul>
 8015146:	4959      	ldr	r1, [pc, #356]	; (80152ac <__ieee754_logf+0x270>)
 8015148:	f7f9 f974 	bl	800e434 <__aeabi_fadd>
 801514c:	1c39      	adds	r1, r7, #0
 801514e:	f7f9 fc1d 	bl	800e98c <__aeabi_fmul>
 8015152:	4957      	ldr	r1, [pc, #348]	; (80152b0 <__ieee754_logf+0x274>)
 8015154:	f7f9 f96e 	bl	800e434 <__aeabi_fadd>
 8015158:	4659      	mov	r1, fp
 801515a:	f7f9 fc17 	bl	800e98c <__aeabi_fmul>
 801515e:	4955      	ldr	r1, [pc, #340]	; (80152b4 <__ieee754_logf+0x278>)
 8015160:	4683      	mov	fp, r0
 8015162:	1c38      	adds	r0, r7, #0
 8015164:	f7f9 fc12 	bl	800e98c <__aeabi_fmul>
 8015168:	4953      	ldr	r1, [pc, #332]	; (80152b8 <__ieee754_logf+0x27c>)
 801516a:	f7f9 f963 	bl	800e434 <__aeabi_fadd>
 801516e:	1c39      	adds	r1, r7, #0
 8015170:	f7f9 fc0c 	bl	800e98c <__aeabi_fmul>
 8015174:	4951      	ldr	r1, [pc, #324]	; (80152bc <__ieee754_logf+0x280>)
 8015176:	f7f9 f95d 	bl	800e434 <__aeabi_fadd>
 801517a:	1c39      	adds	r1, r7, #0
 801517c:	f7f9 fc06 	bl	800e98c <__aeabi_fmul>
 8015180:	1c01      	adds	r1, r0, #0
 8015182:	4658      	mov	r0, fp
 8015184:	f7f9 f956 	bl	800e434 <__aeabi_fadd>
 8015188:	4b4d      	ldr	r3, [pc, #308]	; (80152c0 <__ieee754_logf+0x284>)
 801518a:	44a2      	add	sl, r4
 801518c:	1b1c      	subs	r4, r3, r4
 801518e:	4653      	mov	r3, sl
 8015190:	1c07      	adds	r7, r0, #0
 8015192:	431c      	orrs	r4, r3
 8015194:	2c00      	cmp	r4, #0
 8015196:	dd65      	ble.n	8015264 <__ieee754_logf+0x228>
 8015198:	21fc      	movs	r1, #252	; 0xfc
 801519a:	1c30      	adds	r0, r6, #0
 801519c:	0589      	lsls	r1, r1, #22
 801519e:	f7f9 fbf5 	bl	800e98c <__aeabi_fmul>
 80151a2:	1c31      	adds	r1, r6, #0
 80151a4:	f7f9 fbf2 	bl	800e98c <__aeabi_fmul>
 80151a8:	1c01      	adds	r1, r0, #0
 80151aa:	1c04      	adds	r4, r0, #0
 80151ac:	1c38      	adds	r0, r7, #0
 80151ae:	f7f9 f941 	bl	800e434 <__aeabi_fadd>
 80151b2:	4641      	mov	r1, r8
 80151b4:	f7f9 fbea 	bl	800e98c <__aeabi_fmul>
 80151b8:	1c07      	adds	r7, r0, #0
 80151ba:	2d00      	cmp	r5, #0
 80151bc:	d044      	beq.n	8015248 <__ieee754_logf+0x20c>
 80151be:	4936      	ldr	r1, [pc, #216]	; (8015298 <__ieee754_logf+0x25c>)
 80151c0:	4648      	mov	r0, r9
 80151c2:	f7f9 fbe3 	bl	800e98c <__aeabi_fmul>
 80151c6:	4935      	ldr	r1, [pc, #212]	; (801529c <__ieee754_logf+0x260>)
 80151c8:	1c05      	adds	r5, r0, #0
 80151ca:	4648      	mov	r0, r9
 80151cc:	f7f9 fbde 	bl	800e98c <__aeabi_fmul>
 80151d0:	1c39      	adds	r1, r7, #0
 80151d2:	f7f9 f92f 	bl	800e434 <__aeabi_fadd>
 80151d6:	1c01      	adds	r1, r0, #0
 80151d8:	1c20      	adds	r0, r4, #0
 80151da:	f7f9 fd09 	bl	800ebf0 <__aeabi_fsub>
 80151de:	1c31      	adds	r1, r6, #0
 80151e0:	f7f9 fd06 	bl	800ebf0 <__aeabi_fsub>
 80151e4:	1c01      	adds	r1, r0, #0
 80151e6:	1c28      	adds	r0, r5, #0
 80151e8:	f7f9 fd02 	bl	800ebf0 <__aeabi_fsub>
 80151ec:	e779      	b.n	80150e2 <__ieee754_logf+0xa6>
 80151ee:	4935      	ldr	r1, [pc, #212]	; (80152c4 <__ieee754_logf+0x288>)
 80151f0:	1c30      	adds	r0, r6, #0
 80151f2:	f7f9 fbcb 	bl	800e98c <__aeabi_fmul>
 80151f6:	1c01      	adds	r1, r0, #0
 80151f8:	20fc      	movs	r0, #252	; 0xfc
 80151fa:	0580      	lsls	r0, r0, #22
 80151fc:	f7f9 fcf8 	bl	800ebf0 <__aeabi_fsub>
 8015200:	1c31      	adds	r1, r6, #0
 8015202:	1c04      	adds	r4, r0, #0
 8015204:	1c30      	adds	r0, r6, #0
 8015206:	f7f9 fbc1 	bl	800e98c <__aeabi_fmul>
 801520a:	1c01      	adds	r1, r0, #0
 801520c:	1c20      	adds	r0, r4, #0
 801520e:	f7f9 fbbd 	bl	800e98c <__aeabi_fmul>
 8015212:	1c04      	adds	r4, r0, #0
 8015214:	2d00      	cmp	r5, #0
 8015216:	d020      	beq.n	801525a <__ieee754_logf+0x21e>
 8015218:	0028      	movs	r0, r5
 801521a:	f7fa faeb 	bl	800f7f4 <__aeabi_i2f>
 801521e:	491e      	ldr	r1, [pc, #120]	; (8015298 <__ieee754_logf+0x25c>)
 8015220:	1c05      	adds	r5, r0, #0
 8015222:	f7f9 fbb3 	bl	800e98c <__aeabi_fmul>
 8015226:	491d      	ldr	r1, [pc, #116]	; (801529c <__ieee754_logf+0x260>)
 8015228:	1c07      	adds	r7, r0, #0
 801522a:	1c28      	adds	r0, r5, #0
 801522c:	f7f9 fbae 	bl	800e98c <__aeabi_fmul>
 8015230:	1c01      	adds	r1, r0, #0
 8015232:	1c20      	adds	r0, r4, #0
 8015234:	f7f9 fcdc 	bl	800ebf0 <__aeabi_fsub>
 8015238:	1c31      	adds	r1, r6, #0
 801523a:	f7f9 fcd9 	bl	800ebf0 <__aeabi_fsub>
 801523e:	1c01      	adds	r1, r0, #0
 8015240:	1c38      	adds	r0, r7, #0
 8015242:	f7f9 fcd5 	bl	800ebf0 <__aeabi_fsub>
 8015246:	e74c      	b.n	80150e2 <__ieee754_logf+0xa6>
 8015248:	1c01      	adds	r1, r0, #0
 801524a:	1c20      	adds	r0, r4, #0
 801524c:	f7f9 fcd0 	bl	800ebf0 <__aeabi_fsub>
 8015250:	1c01      	adds	r1, r0, #0
 8015252:	1c30      	adds	r0, r6, #0
 8015254:	f7f9 fccc 	bl	800ebf0 <__aeabi_fsub>
 8015258:	e743      	b.n	80150e2 <__ieee754_logf+0xa6>
 801525a:	1c21      	adds	r1, r4, #0
 801525c:	1c30      	adds	r0, r6, #0
 801525e:	f7f9 fcc7 	bl	800ebf0 <__aeabi_fsub>
 8015262:	e73e      	b.n	80150e2 <__ieee754_logf+0xa6>
 8015264:	1c01      	adds	r1, r0, #0
 8015266:	1c30      	adds	r0, r6, #0
 8015268:	f7f9 fcc2 	bl	800ebf0 <__aeabi_fsub>
 801526c:	4641      	mov	r1, r8
 801526e:	f7f9 fb8d 	bl	800e98c <__aeabi_fmul>
 8015272:	1c04      	adds	r4, r0, #0
 8015274:	2d00      	cmp	r5, #0
 8015276:	d0f0      	beq.n	801525a <__ieee754_logf+0x21e>
 8015278:	4907      	ldr	r1, [pc, #28]	; (8015298 <__ieee754_logf+0x25c>)
 801527a:	4648      	mov	r0, r9
 801527c:	f7f9 fb86 	bl	800e98c <__aeabi_fmul>
 8015280:	4906      	ldr	r1, [pc, #24]	; (801529c <__ieee754_logf+0x260>)
 8015282:	1c05      	adds	r5, r0, #0
 8015284:	4648      	mov	r0, r9
 8015286:	f7f9 fb81 	bl	800e98c <__aeabi_fmul>
 801528a:	e7a4      	b.n	80151d6 <__ieee754_logf+0x19a>
 801528c:	7f7fffff 	.word	0x7f7fffff
 8015290:	007fffff 	.word	0x007fffff
 8015294:	004afb20 	.word	0x004afb20
 8015298:	3f317180 	.word	0x3f317180
 801529c:	3717f7d1 	.word	0x3717f7d1
 80152a0:	ffcf5c30 	.word	0xffcf5c30
 80152a4:	3e178897 	.word	0x3e178897
 80152a8:	3e3a3325 	.word	0x3e3a3325
 80152ac:	3e924925 	.word	0x3e924925
 80152b0:	3f2aaaab 	.word	0x3f2aaaab
 80152b4:	3e1cd04f 	.word	0x3e1cd04f
 80152b8:	3e638e29 	.word	0x3e638e29
 80152bc:	3ecccccd 	.word	0x3ecccccd
 80152c0:	0035c288 	.word	0x0035c288
 80152c4:	3eaaaaab 	.word	0x3eaaaaab

080152c8 <copysign>:
 80152c8:	b530      	push	{r4, r5, lr}
 80152ca:	004a      	lsls	r2, r1, #1
 80152cc:	0fdb      	lsrs	r3, r3, #31
 80152ce:	07db      	lsls	r3, r3, #31
 80152d0:	0852      	lsrs	r2, r2, #1
 80152d2:	431a      	orrs	r2, r3
 80152d4:	0011      	movs	r1, r2
 80152d6:	bd30      	pop	{r4, r5, pc}

080152d8 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 80152d8:	b510      	push	{r4, lr}
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 80152da:	000c      	movs	r4, r1
 80152dc:	34c8      	adds	r4, #200	; 0xc8
 80152de:	8823      	ldrh	r3, [r4, #0]
 80152e0:	1c5a      	adds	r2, r3, #1
 80152e2:	b292      	uxth	r2, r2
 80152e4:	8022      	strh	r2, [r4, #0]
 80152e6:	54c8      	strb	r0, [r1, r3]
	if (buf->position == BUF_SIZE)
 80152e8:	2ac8      	cmp	r2, #200	; 0xc8
 80152ea:	d104      	bne.n	80152f6 <out_func+0x1e>
	{
		_write(0, buf->buffer, BUF_SIZE);
 80152ec:	2000      	movs	r0, #0
 80152ee:	f7fd fd45 	bl	8012d7c <_write>
		buf->position = 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	8023      	strh	r3, [r4, #0]
	}
}
 80152f6:	bd10      	pop	{r4, pc}

080152f8 <__wrap_puts>:


int __wrap_puts(const char *str)
{
 80152f8:	b510      	push	{r4, lr}
 80152fa:	0004      	movs	r4, r0
	size_t len = strlen(str);
 80152fc:	f7fc f984 	bl	8011608 <strlen>

	_write(0, str, len);
 8015300:	0021      	movs	r1, r4
	size_t len = strlen(str);
 8015302:	0002      	movs	r2, r0
	_write(0, str, len);
 8015304:	2000      	movs	r0, #0
 8015306:	f7fd fd39 	bl	8012d7c <_write>
	_write(0, "\n", 1);
 801530a:	2201      	movs	r2, #1
 801530c:	4902      	ldr	r1, [pc, #8]	; (8015318 <__wrap_puts+0x20>)
 801530e:	2000      	movs	r0, #0
 8015310:	f7fd fd34 	bl	8012d7c <_write>
	return 0;
}
 8015314:	2000      	movs	r0, #0
 8015316:	bd10      	pop	{r4, pc}
 8015318:	0801e056 	.word	0x0801e056

0801531c <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 801531c:	b40f      	push	{r0, r1, r2, r3}
 801531e:	b530      	push	{r4, r5, lr}
 8015320:	b0b5      	sub	sp, #212	; 0xd4
 8015322:	ac38      	add	r4, sp, #224	; 0xe0
 8015324:	cc20      	ldmia	r4!, {r5}
	print_buffer_t buf = {
 8015326:	22ca      	movs	r2, #202	; 0xca
 8015328:	2100      	movs	r1, #0
 801532a:	a801      	add	r0, sp, #4
 801532c:	f7fd ffa2 	bl	8013274 <memset>
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
	int ret = fctvprintf(out_func, &buf, format, va);
 8015330:	0023      	movs	r3, r4
 8015332:	002a      	movs	r2, r5
 8015334:	a901      	add	r1, sp, #4
 8015336:	4809      	ldr	r0, [pc, #36]	; (801535c <__wrap_printf+0x40>)
	va_start(va, format);
 8015338:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 801533a:	f000 fb9b 	bl	8015a74 <fctvprintf>
	if (buf.position != 0)
 801533e:	ab33      	add	r3, sp, #204	; 0xcc
 8015340:	881a      	ldrh	r2, [r3, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8015342:	0004      	movs	r4, r0
	if (buf.position != 0)
 8015344:	2a00      	cmp	r2, #0
 8015346:	d003      	beq.n	8015350 <__wrap_printf+0x34>
	{
		_write(0, buf.buffer, buf.position);
 8015348:	a901      	add	r1, sp, #4
 801534a:	2000      	movs	r0, #0
 801534c:	f7fd fd16 	bl	8012d7c <_write>
	}

	va_end(va);

	return ret;
}
 8015350:	0020      	movs	r0, r4
 8015352:	b035      	add	sp, #212	; 0xd4
 8015354:	bc30      	pop	{r4, r5}
 8015356:	bc08      	pop	{r3}
 8015358:	b004      	add	sp, #16
 801535a:	4718      	bx	r3
 801535c:	080152d9 	.word	0x080152d9

08015360 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8015360:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8015362:	f000 fb7b 	bl	8015a5c <vsnprintf_>
}
 8015366:	bd10      	pop	{r4, pc}

08015368 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8015368:	429a      	cmp	r2, r3
 801536a:	d200      	bcs.n	801536e <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 801536c:	5488      	strb	r0, [r1, r2]
  }
}
 801536e:	4770      	bx	lr

08015370 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8015370:	4770      	bx	lr

08015372 <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8015372:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8015374:	2800      	cmp	r0, #0
 8015376:	d002      	beq.n	801537e <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8015378:	680b      	ldr	r3, [r1, #0]
 801537a:	6849      	ldr	r1, [r1, #4]
 801537c:	4798      	blx	r3
  }
}
 801537e:	bd10      	pop	{r4, pc}

08015380 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015382:	b087      	sub	sp, #28
 8015384:	9103      	str	r1, [sp, #12]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8015386:	2102      	movs	r1, #2
{
 8015388:	9304      	str	r3, [sp, #16]
 801538a:	ab0e      	add	r3, sp, #56	; 0x38
 801538c:	781f      	ldrb	r7, [r3, #0]
 801538e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015390:	9002      	str	r0, [sp, #8]
  if (!(flags & FLAGS_LEFT)) {
 8015392:	4019      	ands	r1, r3
{
 8015394:	9201      	str	r2, [sp, #4]
 8015396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015398:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801539a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801539c:	9810      	ldr	r0, [sp, #64]	; 0x40
  if (!(flags & FLAGS_LEFT)) {
 801539e:	9105      	str	r1, [sp, #20]
 80153a0:	d11f      	bne.n	80153e2 <_ntoa_format+0x62>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80153a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80153a4:	3101      	adds	r1, #1
 80153a6:	4019      	ands	r1, r3
 80153a8:	2e00      	cmp	r6, #0
 80153aa:	d009      	beq.n	80153c0 <_ntoa_format+0x40>
 80153ac:	2900      	cmp	r1, #0
 80153ae:	d007      	beq.n	80153c0 <_ntoa_format+0x40>
 80153b0:	2f00      	cmp	r7, #0
 80153b2:	d102      	bne.n	80153ba <_ntoa_format+0x3a>
 80153b4:	260c      	movs	r6, #12
 80153b6:	4233      	tst	r3, r6
 80153b8:	d002      	beq.n	80153c0 <_ntoa_format+0x40>
      width--;
 80153ba:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80153bc:	3e01      	subs	r6, #1
 80153be:	9611      	str	r6, [sp, #68]	; 0x44
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80153c0:	2630      	movs	r6, #48	; 0x30
 80153c2:	e003      	b.n	80153cc <_ntoa_format+0x4c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80153c4:	2c20      	cmp	r4, #32
 80153c6:	d003      	beq.n	80153d0 <_ntoa_format+0x50>
      buf[len++] = '0';
 80153c8:	552e      	strb	r6, [r5, r4]
 80153ca:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80153cc:	42a0      	cmp	r0, r4
 80153ce:	d8f9      	bhi.n	80153c4 <_ntoa_format+0x44>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80153d0:	2630      	movs	r6, #48	; 0x30
 80153d2:	46b4      	mov	ip, r6
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80153d4:	2900      	cmp	r1, #0
 80153d6:	d004      	beq.n	80153e2 <_ntoa_format+0x62>
 80153d8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80153da:	42a6      	cmp	r6, r4
 80153dc:	d901      	bls.n	80153e2 <_ntoa_format+0x62>
 80153de:	2c20      	cmp	r4, #32
 80153e0:	d114      	bne.n	801540c <_ntoa_format+0x8c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80153e2:	06d9      	lsls	r1, r3, #27
 80153e4:	d536      	bpl.n	8015454 <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80153e6:	0559      	lsls	r1, r3, #21
 80153e8:	d415      	bmi.n	8015416 <_ntoa_format+0x96>
 80153ea:	2c00      	cmp	r4, #0
 80153ec:	d013      	beq.n	8015416 <_ntoa_format+0x96>
 80153ee:	4284      	cmp	r4, r0
 80153f0:	d002      	beq.n	80153f8 <_ntoa_format+0x78>
 80153f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80153f4:	428c      	cmp	r4, r1
 80153f6:	d10e      	bne.n	8015416 <_ntoa_format+0x96>
      len--;
 80153f8:	1e61      	subs	r1, r4, #1
      if (len && (base == 16U)) {
 80153fa:	2900      	cmp	r1, #0
 80153fc:	d00a      	beq.n	8015414 <_ntoa_format+0x94>
        len--;
 80153fe:	3c02      	subs	r4, #2
      if (len && (base == 16U)) {
 8015400:	2a10      	cmp	r2, #16
 8015402:	d00a      	beq.n	801541a <_ntoa_format+0x9a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015404:	000c      	movs	r4, r1
 8015406:	2a02      	cmp	r2, #2
 8015408:	d11f      	bne.n	801544a <_ntoa_format+0xca>
 801540a:	e032      	b.n	8015472 <_ntoa_format+0xf2>
      buf[len++] = '0';
 801540c:	4666      	mov	r6, ip
 801540e:	552e      	strb	r6, [r5, r4]
 8015410:	3401      	adds	r4, #1
 8015412:	e7df      	b.n	80153d4 <_ntoa_format+0x54>
 8015414:	000c      	movs	r4, r1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015416:	2a10      	cmp	r2, #16
 8015418:	d127      	bne.n	801546a <_ntoa_format+0xea>
 801541a:	069a      	lsls	r2, r3, #26
 801541c:	d410      	bmi.n	8015440 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 801541e:	2278      	movs	r2, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015420:	2c1f      	cmp	r4, #31
 8015422:	d910      	bls.n	8015446 <_ntoa_format+0xc6>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8015424:	9e01      	ldr	r6, [sp, #4]
 8015426:	079b      	lsls	r3, r3, #30
 8015428:	d031      	beq.n	801548e <_ntoa_format+0x10e>
      out(' ', buffer, idx++, maxlen);
 801542a:	9400      	str	r4, [sp, #0]
 801542c:	9b00      	ldr	r3, [sp, #0]
 801542e:	19a0      	adds	r0, r4, r6
 8015430:	1ac2      	subs	r2, r0, r3
  while (len) {
 8015432:	2b00      	cmp	r3, #0
 8015434:	d132      	bne.n	801549c <_ntoa_format+0x11c>
  if (flags & FLAGS_LEFT) {
 8015436:	9b05      	ldr	r3, [sp, #20]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d140      	bne.n	80154be <_ntoa_format+0x13e>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 801543c:	b007      	add	sp, #28
 801543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8015440:	2258      	movs	r2, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015442:	2c1f      	cmp	r4, #31
 8015444:	d8ee      	bhi.n	8015424 <_ntoa_format+0xa4>
      buf[len++] = 'b';
 8015446:	552a      	strb	r2, [r5, r4]
 8015448:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801544a:	2c1f      	cmp	r4, #31
 801544c:	d8ea      	bhi.n	8015424 <_ntoa_format+0xa4>
      buf[len++] = '0';
 801544e:	2230      	movs	r2, #48	; 0x30
 8015450:	552a      	strb	r2, [r5, r4]
 8015452:	3401      	adds	r4, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015454:	2c20      	cmp	r4, #32
 8015456:	d0e5      	beq.n	8015424 <_ntoa_format+0xa4>
      buf[len++] = '-';
 8015458:	222d      	movs	r2, #45	; 0x2d
    if (negative) {
 801545a:	2f00      	cmp	r7, #0
 801545c:	d102      	bne.n	8015464 <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
 801545e:	075a      	lsls	r2, r3, #29
 8015460:	d509      	bpl.n	8015476 <_ntoa_format+0xf6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8015462:	222b      	movs	r2, #43	; 0x2b
      buf[len++] = ' ';
 8015464:	552a      	strb	r2, [r5, r4]
 8015466:	3401      	adds	r4, #1
 8015468:	e7dc      	b.n	8015424 <_ntoa_format+0xa4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801546a:	2a02      	cmp	r2, #2
 801546c:	d1ed      	bne.n	801544a <_ntoa_format+0xca>
 801546e:	2c1f      	cmp	r4, #31
 8015470:	d8d8      	bhi.n	8015424 <_ntoa_format+0xa4>
      buf[len++] = 'b';
 8015472:	2262      	movs	r2, #98	; 0x62
 8015474:	e7e7      	b.n	8015446 <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
 8015476:	071a      	lsls	r2, r3, #28
 8015478:	d5d4      	bpl.n	8015424 <_ntoa_format+0xa4>
      buf[len++] = ' ';
 801547a:	2220      	movs	r2, #32
 801547c:	e7f2      	b.n	8015464 <_ntoa_format+0xe4>
      out(' ', buffer, idx++, maxlen);
 801547e:	1c77      	adds	r7, r6, #1
 8015480:	0032      	movs	r2, r6
 8015482:	9b04      	ldr	r3, [sp, #16]
 8015484:	9e02      	ldr	r6, [sp, #8]
 8015486:	9903      	ldr	r1, [sp, #12]
 8015488:	2020      	movs	r0, #32
 801548a:	47b0      	blx	r6
 801548c:	003e      	movs	r6, r7
    for (size_t i = len; i < width; i++) {
 801548e:	9b01      	ldr	r3, [sp, #4]
 8015490:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015492:	1ae3      	subs	r3, r4, r3
 8015494:	199b      	adds	r3, r3, r6
 8015496:	429a      	cmp	r2, r3
 8015498:	d8f1      	bhi.n	801547e <_ntoa_format+0xfe>
 801549a:	e7c6      	b.n	801542a <_ntoa_format+0xaa>
    out(buf[--len], buffer, idx++, maxlen);
 801549c:	9b00      	ldr	r3, [sp, #0]
 801549e:	9903      	ldr	r1, [sp, #12]
 80154a0:	3b01      	subs	r3, #1
 80154a2:	9300      	str	r3, [sp, #0]
 80154a4:	5ce8      	ldrb	r0, [r5, r3]
 80154a6:	9f02      	ldr	r7, [sp, #8]
 80154a8:	9b04      	ldr	r3, [sp, #16]
 80154aa:	47b8      	blx	r7
 80154ac:	e7be      	b.n	801542c <_ntoa_format+0xac>
      out(' ', buffer, idx++, maxlen);
 80154ae:	1c44      	adds	r4, r0, #1
 80154b0:	0002      	movs	r2, r0
 80154b2:	9b04      	ldr	r3, [sp, #16]
 80154b4:	2020      	movs	r0, #32
 80154b6:	9903      	ldr	r1, [sp, #12]
 80154b8:	9d02      	ldr	r5, [sp, #8]
 80154ba:	47a8      	blx	r5
 80154bc:	0020      	movs	r0, r4
    while (idx - start_idx < width) {
 80154be:	9b01      	ldr	r3, [sp, #4]
 80154c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154c2:	1ac3      	subs	r3, r0, r3
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d8f2      	bhi.n	80154ae <_ntoa_format+0x12e>
 80154c8:	e7b8      	b.n	801543c <_ntoa_format+0xbc>

080154ca <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80154ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154cc:	b095      	sub	sp, #84	; 0x54
 80154ce:	9309      	str	r3, [sp, #36]	; 0x24
 80154d0:	ab1a      	add	r3, sp, #104	; 0x68
 80154d2:	0006      	movs	r6, r0
 80154d4:	cb01      	ldmia	r3!, {r0}
 80154d6:	000f      	movs	r7, r1
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	9208      	str	r2, [sp, #32]
 80154dc:	930a      	str	r3, [sp, #40]	; 0x28
 80154de:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d101      	bne.n	80154e8 <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 80154e4:	2310      	movs	r3, #16
 80154e6:	439c      	bics	r4, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80154e8:	0563      	lsls	r3, r4, #21
 80154ea:	d502      	bpl.n	80154f2 <_ntoa_long+0x28>
  size_t len = 0U;
 80154ec:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 80154ee:	4298      	cmp	r0, r3
 80154f0:	d01d      	beq.n	801552e <_ntoa_long+0x64>
 80154f2:	2361      	movs	r3, #97	; 0x61
 80154f4:	06a2      	lsls	r2, r4, #26
 80154f6:	d500      	bpl.n	80154fa <_ntoa_long+0x30>
 80154f8:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80154fa:	2500      	movs	r5, #0
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	3b0a      	subs	r3, #10
 8015500:	930b      	str	r3, [sp, #44]	; 0x2c
 8015502:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015504:	f7f9 fdfa 	bl	800f0fc <__aeabi_uidivmod>
 8015508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 801550a:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801550c:	189a      	adds	r2, r3, r2
 801550e:	4684      	mov	ip, r0
 8015510:	b2d2      	uxtb	r2, r2
 8015512:	2909      	cmp	r1, #9
 8015514:	d801      	bhi.n	801551a <_ntoa_long+0x50>
 8015516:	3330      	adds	r3, #48	; 0x30
 8015518:	b2da      	uxtb	r2, r3
 801551a:	2020      	movs	r0, #32
 801551c:	a904      	add	r1, sp, #16
 801551e:	1809      	adds	r1, r1, r0
      value /= base;
 8015520:	4660      	mov	r0, ip
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015522:	1c6b      	adds	r3, r5, #1
 8015524:	554a      	strb	r2, [r1, r5]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015526:	2800      	cmp	r0, #0
 8015528:	d001      	beq.n	801552e <_ntoa_long+0x64>
 801552a:	2b20      	cmp	r3, #32
 801552c:	d113      	bne.n	8015556 <_ntoa_long+0x8c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801552e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015530:	9301      	str	r3, [sp, #4]
 8015532:	9205      	str	r2, [sp, #20]
 8015534:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015536:	ab0c      	add	r3, sp, #48	; 0x30
 8015538:	9204      	str	r2, [sp, #16]
 801553a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	9203      	str	r2, [sp, #12]
 8015540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015542:	9406      	str	r4, [sp, #24]
 8015544:	9202      	str	r2, [sp, #8]
 8015546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015548:	9a08      	ldr	r2, [sp, #32]
 801554a:	0039      	movs	r1, r7
 801554c:	0030      	movs	r0, r6
 801554e:	f7ff ff17 	bl	8015380 <_ntoa_format>
}
 8015552:	b015      	add	sp, #84	; 0x54
 8015554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015556:	001d      	movs	r5, r3
 8015558:	e7d3      	b.n	8015502 <_ntoa_long+0x38>

0801555a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801555a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801555c:	b099      	sub	sp, #100	; 0x64
 801555e:	930c      	str	r3, [sp, #48]	; 0x30
 8015560:	ab20      	add	r3, sp, #128	; 0x80
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	9009      	str	r0, [sp, #36]	; 0x24
 8015566:	930d      	str	r3, [sp, #52]	; 0x34
 8015568:	981e      	ldr	r0, [sp, #120]	; 0x78
 801556a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801556c:	910a      	str	r1, [sp, #40]	; 0x28
 801556e:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015570:	0003      	movs	r3, r0
{
 8015572:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015574:	920b      	str	r2, [sp, #44]	; 0x2c
 8015576:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8015578:	9e26      	ldr	r6, [sp, #152]	; 0x98
  if (!value) {
 801557a:	430b      	orrs	r3, r1
 801557c:	d101      	bne.n	8015582 <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 801557e:	3310      	adds	r3, #16
 8015580:	439e      	bics	r6, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015582:	0573      	lsls	r3, r6, #21
 8015584:	d504      	bpl.n	8015590 <_ntoa_long_long+0x36>
 8015586:	0003      	movs	r3, r0
  size_t len = 0U;
 8015588:	2200      	movs	r2, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 801558a:	430b      	orrs	r3, r1
 801558c:	4293      	cmp	r3, r2
 801558e:	d021      	beq.n	80155d4 <_ntoa_long_long+0x7a>
 8015590:	2361      	movs	r3, #97	; 0x61
 8015592:	06b2      	lsls	r2, r6, #26
 8015594:	d500      	bpl.n	8015598 <_ntoa_long_long+0x3e>
 8015596:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015598:	2400      	movs	r4, #0
 801559a:	b2db      	uxtb	r3, r3
 801559c:	3b0a      	subs	r3, #10
 801559e:	930f      	str	r3, [sp, #60]	; 0x3c
 80155a0:	002a      	movs	r2, r5
 80155a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155a4:	f7f9 ff12 	bl	800f3cc <__aeabi_uldivmod>
 80155a8:	468c      	mov	ip, r1
 80155aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 80155ac:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80155ae:	1851      	adds	r1, r2, r1
 80155b0:	0003      	movs	r3, r0
 80155b2:	b2c9      	uxtb	r1, r1
 80155b4:	2a09      	cmp	r2, #9
 80155b6:	d801      	bhi.n	80155bc <_ntoa_long_long+0x62>
 80155b8:	3230      	adds	r2, #48	; 0x30
 80155ba:	b2d1      	uxtb	r1, r2
 80155bc:	2720      	movs	r7, #32
 80155be:	a808      	add	r0, sp, #32
 80155c0:	19c0      	adds	r0, r0, r7
 80155c2:	5501      	strb	r1, [r0, r4]
 80155c4:	1c62      	adds	r2, r4, #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80155c6:	4664      	mov	r4, ip
      value /= base;
 80155c8:	0018      	movs	r0, r3
 80155ca:	4661      	mov	r1, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80155cc:	431c      	orrs	r4, r3
 80155ce:	d001      	beq.n	80155d4 <_ntoa_long_long+0x7a>
 80155d0:	42ba      	cmp	r2, r7
 80155d2:	d112      	bne.n	80155fa <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80155d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80155d6:	9201      	str	r2, [sp, #4]
 80155d8:	9305      	str	r3, [sp, #20]
 80155da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80155dc:	9606      	str	r6, [sp, #24]
 80155de:	9304      	str	r3, [sp, #16]
 80155e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155e2:	9503      	str	r5, [sp, #12]
 80155e4:	9302      	str	r3, [sp, #8]
 80155e6:	ab10      	add	r3, sp, #64	; 0x40
 80155e8:	9300      	str	r3, [sp, #0]
 80155ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80155ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80155f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155f2:	f7ff fec5 	bl	8015380 <_ntoa_format>
}
 80155f6:	b019      	add	sp, #100	; 0x64
 80155f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155fa:	0014      	movs	r4, r2
 80155fc:	e7d0      	b.n	80155a0 <_ntoa_long_long+0x46>
	...

08015600 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8015600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015602:	b099      	sub	sp, #100	; 0x64
 8015604:	900d      	str	r0, [sp, #52]	; 0x34
 8015606:	910e      	str	r1, [sp, #56]	; 0x38
 8015608:	920c      	str	r2, [sp, #48]	; 0x30
 801560a:	930a      	str	r3, [sp, #40]	; 0x28
 801560c:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 801560e:	2900      	cmp	r1, #0
 8015610:	d101      	bne.n	8015616 <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 8015612:	4bb6      	ldr	r3, [pc, #728]	; (80158ec <_vsnprintf+0x2ec>)
 8015614:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 8015616:	2700      	movs	r7, #0
 8015618:	e101      	b.n	801581e <_vsnprintf+0x21e>
 801561a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801561c:	3301      	adds	r3, #1
 801561e:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8015620:	2825      	cmp	r0, #37	; 0x25
 8015622:	d007      	beq.n	8015634 <_vsnprintf+0x34>
        out(*format, buffer, idx++, maxlen);
 8015624:	003a      	movs	r2, r7
 8015626:	1c7c      	adds	r4, r7, #1
 8015628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801562a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801562c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801562e:	47a8      	blx	r5
 8015630:	0027      	movs	r7, r4
        format++;
        break;
 8015632:	e0f4      	b.n	801581e <_vsnprintf+0x21e>
    flags = 0U;
 8015634:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8015636:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015638:	2008      	movs	r0, #8
 801563a:	e005      	b.n	8015648 <_vsnprintf+0x48>
      switch (*format) {
 801563c:	2b2d      	cmp	r3, #45	; 0x2d
 801563e:	d016      	beq.n	801566e <_vsnprintf+0x6e>
 8015640:	2b30      	cmp	r3, #48	; 0x30
 8015642:	d10c      	bne.n	801565e <_vsnprintf+0x5e>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8015644:	430c      	orrs	r4, r1
{
 8015646:	920a      	str	r2, [sp, #40]	; 0x28
      switch (*format) {
 8015648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801564a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	3201      	adds	r2, #1
 8015650:	2b2b      	cmp	r3, #43	; 0x2b
 8015652:	d00f      	beq.n	8015674 <_vsnprintf+0x74>
 8015654:	d8f2      	bhi.n	801563c <_vsnprintf+0x3c>
 8015656:	2b20      	cmp	r3, #32
 8015658:	d00e      	beq.n	8015678 <_vsnprintf+0x78>
 801565a:	2b23      	cmp	r3, #35	; 0x23
 801565c:	d00e      	beq.n	801567c <_vsnprintf+0x7c>
    if (_is_digit(*format)) {
 801565e:	0019      	movs	r1, r3
 8015660:	3930      	subs	r1, #48	; 0x30
 8015662:	2909      	cmp	r1, #9
 8015664:	d82c      	bhi.n	80156c0 <_vsnprintf+0xc0>
  unsigned int i = 0U;
 8015666:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015668:	200a      	movs	r0, #10
  unsigned int i = 0U;
 801566a:	930f      	str	r3, [sp, #60]	; 0x3c
 801566c:	e00e      	b.n	801568c <_vsnprintf+0x8c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 801566e:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8015670:	431c      	orrs	r4, r3
 8015672:	e7e8      	b.n	8015646 <_vsnprintf+0x46>
 8015674:	2304      	movs	r3, #4
 8015676:	e7fb      	b.n	8015670 <_vsnprintf+0x70>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015678:	4304      	orrs	r4, r0
 801567a:	e7e4      	b.n	8015646 <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 801567c:	2310      	movs	r3, #16
 801567e:	e7f7      	b.n	8015670 <_vsnprintf+0x70>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015682:	910a      	str	r1, [sp, #40]	; 0x28
 8015684:	4343      	muls	r3, r0
 8015686:	3b30      	subs	r3, #48	; 0x30
 8015688:	18d3      	adds	r3, r2, r3
 801568a:	930f      	str	r3, [sp, #60]	; 0x3c
  while (_is_digit(**str)) {
 801568c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801568e:	781a      	ldrb	r2, [r3, #0]
 8015690:	1c59      	adds	r1, r3, #1
 8015692:	0013      	movs	r3, r2
 8015694:	3b30      	subs	r3, #48	; 0x30
 8015696:	2b09      	cmp	r3, #9
 8015698:	d9f2      	bls.n	8015680 <_vsnprintf+0x80>
    precision = 0U;
 801569a:	2200      	movs	r2, #0
    if (*format == '.') {
 801569c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    precision = 0U;
 801569e:	920b      	str	r2, [sp, #44]	; 0x2c
    if (*format == '.') {
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b2e      	cmp	r3, #46	; 0x2e
 80156a4:	d138      	bne.n	8015718 <_vsnprintf+0x118>
      flags |= FLAGS_PRECISION;
 80156a6:	2280      	movs	r2, #128	; 0x80
 80156a8:	00d2      	lsls	r2, r2, #3
 80156aa:	4314      	orrs	r4, r2
      if (_is_digit(*format)) {
 80156ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b0:	7852      	ldrb	r2, [r2, #1]
 80156b2:	3301      	adds	r3, #1
 80156b4:	0011      	movs	r1, r2
 80156b6:	3930      	subs	r1, #48	; 0x30
 80156b8:	2909      	cmp	r1, #9
 80156ba:	d820      	bhi.n	80156fe <_vsnprintf+0xfe>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80156bc:	250a      	movs	r5, #10
 80156be:	e016      	b.n	80156ee <_vsnprintf+0xee>
    width = 0U;
 80156c0:	2100      	movs	r1, #0
 80156c2:	910f      	str	r1, [sp, #60]	; 0x3c
    else if (*format == '*') {
 80156c4:	2b2a      	cmp	r3, #42	; 0x2a
 80156c6:	d1e8      	bne.n	801569a <_vsnprintf+0x9a>
      const int w = va_arg(va, int);
 80156c8:	6831      	ldr	r1, [r6, #0]
 80156ca:	1d33      	adds	r3, r6, #4
 80156cc:	910f      	str	r1, [sp, #60]	; 0x3c
      if (w < 0) {
 80156ce:	2900      	cmp	r1, #0
 80156d0:	da04      	bge.n	80156dc <_vsnprintf+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 80156d2:	2102      	movs	r1, #2
 80156d4:	430c      	orrs	r4, r1
        width = (unsigned int)-w;
 80156d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80156d8:	4249      	negs	r1, r1
 80156da:	910f      	str	r1, [sp, #60]	; 0x3c
      const int w = va_arg(va, int);
 80156dc:	001e      	movs	r6, r3
 80156de:	920a      	str	r2, [sp, #40]	; 0x28
 80156e0:	e7db      	b.n	801569a <_vsnprintf+0x9a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80156e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156e4:	436b      	muls	r3, r5
 80156e6:	3b30      	subs	r3, #48	; 0x30
 80156e8:	18d3      	adds	r3, r2, r3
 80156ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80156ec:	0003      	movs	r3, r0
  while (_is_digit(**str)) {
 80156ee:	781a      	ldrb	r2, [r3, #0]
 80156f0:	1c58      	adds	r0, r3, #1
 80156f2:	0011      	movs	r1, r2
 80156f4:	3930      	subs	r1, #48	; 0x30
 80156f6:	2909      	cmp	r1, #9
 80156f8:	d9f3      	bls.n	80156e2 <_vsnprintf+0xe2>
      format++;
 80156fa:	930a      	str	r3, [sp, #40]	; 0x28
 80156fc:	e00c      	b.n	8015718 <_vsnprintf+0x118>
      else if (*format == '*') {
 80156fe:	2a2a      	cmp	r2, #42	; 0x2a
 8015700:	d1fb      	bne.n	80156fa <_vsnprintf+0xfa>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015702:	6833      	ldr	r3, [r6, #0]
        const int prec = (int)va_arg(va, int);
 8015704:	3604      	adds	r6, #4
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015706:	930b      	str	r3, [sp, #44]	; 0x2c
 8015708:	43db      	mvns	r3, r3
 801570a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801570c:	17db      	asrs	r3, r3, #31
 801570e:	401a      	ands	r2, r3
        format++;
 8015710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015712:	920b      	str	r2, [sp, #44]	; 0x2c
        format++;
 8015714:	3302      	adds	r3, #2
 8015716:	930a      	str	r3, [sp, #40]	; 0x28
 8015718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801571a:	1c5a      	adds	r2, r3, #1
    switch (*format) {
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	2b6c      	cmp	r3, #108	; 0x6c
 8015720:	d00d      	beq.n	801573e <_vsnprintf+0x13e>
 8015722:	d805      	bhi.n	8015730 <_vsnprintf+0x130>
 8015724:	2b68      	cmp	r3, #104	; 0x68
 8015726:	d014      	beq.n	8015752 <_vsnprintf+0x152>
 8015728:	2b6a      	cmp	r3, #106	; 0x6a
 801572a:	d02f      	beq.n	801578c <_vsnprintf+0x18c>
 801572c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801572e:	e016      	b.n	801575e <_vsnprintf+0x15e>
 8015730:	2b74      	cmp	r3, #116	; 0x74
 8015732:	d001      	beq.n	8015738 <_vsnprintf+0x138>
 8015734:	2b7a      	cmp	r3, #122	; 0x7a
 8015736:	d1f9      	bne.n	801572c <_vsnprintf+0x12c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015738:	2380      	movs	r3, #128	; 0x80
 801573a:	005b      	lsls	r3, r3, #1
 801573c:	e00e      	b.n	801575c <_vsnprintf+0x15c>
        if (*format == 'l') {
 801573e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015740:	785b      	ldrb	r3, [r3, #1]
 8015742:	2b6c      	cmp	r3, #108	; 0x6c
 8015744:	d1f8      	bne.n	8015738 <_vsnprintf+0x138>
          flags |= FLAGS_LONG_LONG;
 8015746:	23c0      	movs	r3, #192	; 0xc0
 8015748:	009b      	lsls	r3, r3, #2
          format++;
 801574a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          flags |= FLAGS_CHAR;
 801574c:	431c      	orrs	r4, r3
          format++;
 801574e:	3202      	adds	r2, #2
 8015750:	e005      	b.n	801575e <_vsnprintf+0x15e>
        if (*format == 'h') {
 8015752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015754:	785b      	ldrb	r3, [r3, #1]
 8015756:	2b68      	cmp	r3, #104	; 0x68
 8015758:	d016      	beq.n	8015788 <_vsnprintf+0x188>
        flags |= FLAGS_SHORT;
 801575a:	2380      	movs	r3, #128	; 0x80
 801575c:	431c      	orrs	r4, r3
    switch (*format) {
 801575e:	7810      	ldrb	r0, [r2, #0]
 8015760:	1c53      	adds	r3, r2, #1
 8015762:	930a      	str	r3, [sp, #40]	; 0x28
 8015764:	2869      	cmp	r0, #105	; 0x69
 8015766:	d01a      	beq.n	801579e <_vsnprintf+0x19e>
 8015768:	d900      	bls.n	801576c <_vsnprintf+0x16c>
 801576a:	e06a      	b.n	8015842 <_vsnprintf+0x242>
 801576c:	2862      	cmp	r0, #98	; 0x62
 801576e:	d100      	bne.n	8015772 <_vsnprintf+0x172>
 8015770:	e172      	b.n	8015a58 <_vsnprintf+0x458>
 8015772:	d80e      	bhi.n	8015792 <_vsnprintf+0x192>
 8015774:	2825      	cmp	r0, #37	; 0x25
 8015776:	d100      	bne.n	801577a <_vsnprintf+0x17a>
 8015778:	e754      	b.n	8015624 <_vsnprintf+0x24>
 801577a:	2858      	cmp	r0, #88	; 0x58
 801577c:	d000      	beq.n	8015780 <_vsnprintf+0x180>
 801577e:	e751      	b.n	8015624 <_vsnprintf+0x24>
          flags |= FLAGS_UPPERCASE;
 8015780:	2320      	movs	r3, #32
 8015782:	431c      	orrs	r4, r3
          base = 16U;
 8015784:	3b10      	subs	r3, #16
 8015786:	e011      	b.n	80157ac <_vsnprintf+0x1ac>
          flags |= FLAGS_CHAR;
 8015788:	23c0      	movs	r3, #192	; 0xc0
 801578a:	e7de      	b.n	801574a <_vsnprintf+0x14a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801578c:	2380      	movs	r3, #128	; 0x80
 801578e:	009b      	lsls	r3, r3, #2
 8015790:	e7e4      	b.n	801575c <_vsnprintf+0x15c>
    switch (*format) {
 8015792:	2863      	cmp	r0, #99	; 0x63
 8015794:	d100      	bne.n	8015798 <_vsnprintf+0x198>
 8015796:	e0c9      	b.n	801592c <_vsnprintf+0x32c>
 8015798:	2864      	cmp	r0, #100	; 0x64
 801579a:	d000      	beq.n	801579e <_vsnprintf+0x19e>
 801579c:	e742      	b.n	8015624 <_vsnprintf+0x24>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 801579e:	2310      	movs	r3, #16
 80157a0:	439c      	bics	r4, r3
          base = 10U;
 80157a2:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 80157a4:	2869      	cmp	r0, #105	; 0x69
 80157a6:	d003      	beq.n	80157b0 <_vsnprintf+0x1b0>
 80157a8:	2864      	cmp	r0, #100	; 0x64
 80157aa:	d001      	beq.n	80157b0 <_vsnprintf+0x1b0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80157ac:	220c      	movs	r2, #12
 80157ae:	4394      	bics	r4, r2
        if (flags & FLAGS_PRECISION) {
 80157b0:	0562      	lsls	r2, r4, #21
 80157b2:	d501      	bpl.n	80157b8 <_vsnprintf+0x1b8>
          flags &= ~FLAGS_ZEROPAD;
 80157b4:	2201      	movs	r2, #1
 80157b6:	4394      	bics	r4, r2
 80157b8:	2280      	movs	r2, #128	; 0x80
 80157ba:	0092      	lsls	r2, r2, #2
 80157bc:	4022      	ands	r2, r4
        if ((*format == 'i') || (*format == 'd')) {
 80157be:	2869      	cmp	r0, #105	; 0x69
 80157c0:	d002      	beq.n	80157c8 <_vsnprintf+0x1c8>
 80157c2:	2864      	cmp	r0, #100	; 0x64
 80157c4:	d000      	beq.n	80157c8 <_vsnprintf+0x1c8>
 80157c6:	e07b      	b.n	80158c0 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
 80157c8:	2a00      	cmp	r2, #0
 80157ca:	d059      	beq.n	8015880 <_vsnprintf+0x280>
            const long long value = va_arg(va, long long);
 80157cc:	2107      	movs	r1, #7
 80157ce:	1df2      	adds	r2, r6, #7
 80157d0:	438a      	bics	r2, r1
 80157d2:	6811      	ldr	r1, [r2, #0]
 80157d4:	0015      	movs	r5, r2
 80157d6:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80157d8:	9304      	str	r3, [sp, #16]
 80157da:	2300      	movs	r3, #0
 80157dc:	9305      	str	r3, [sp, #20]
 80157de:	0fd3      	lsrs	r3, r2, #31
 80157e0:	9302      	str	r3, [sp, #8]
 80157e2:	17d3      	asrs	r3, r2, #31
 80157e4:	9311      	str	r3, [sp, #68]	; 0x44
 80157e6:	9310      	str	r3, [sp, #64]	; 0x40
 80157e8:	404b      	eors	r3, r1
 80157ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80157ec:	9314      	str	r3, [sp, #80]	; 0x50
 80157ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157f0:	9007      	str	r0, [sp, #28]
 80157f2:	4053      	eors	r3, r2
 80157f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80157f6:	9315      	str	r3, [sp, #84]	; 0x54
 80157f8:	9006      	str	r0, [sp, #24]
 80157fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80157fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015800:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015802:	1a12      	subs	r2, r2, r0
 8015804:	418b      	sbcs	r3, r1
 8015806:	9200      	str	r2, [sp, #0]
 8015808:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 801580a:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801580c:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 801580e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015810:	003a      	movs	r2, r7
 8015812:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015814:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015816:	f7ff fea0 	bl	801555a <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801581a:	0007      	movs	r7, r0
        break;
 801581c:	002e      	movs	r6, r5
  while (*format)
 801581e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015820:	7818      	ldrb	r0, [r3, #0]
 8015822:	2800      	cmp	r0, #0
 8015824:	d000      	beq.n	8015828 <_vsnprintf+0x228>
 8015826:	e6f8      	b.n	801561a <_vsnprintf+0x1a>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801582a:	003a      	movs	r2, r7
 801582c:	429f      	cmp	r7, r3
 801582e:	d300      	bcc.n	8015832 <_vsnprintf+0x232>
 8015830:	1e5a      	subs	r2, r3, #1
 8015832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015834:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015836:	2000      	movs	r0, #0
 8015838:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801583a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 801583c:	0038      	movs	r0, r7
 801583e:	b019      	add	sp, #100	; 0x64
 8015840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (*format) {
 8015842:	2873      	cmp	r0, #115	; 0x73
 8015844:	d100      	bne.n	8015848 <_vsnprintf+0x248>
 8015846:	e0a7      	b.n	8015998 <_vsnprintf+0x398>
 8015848:	d812      	bhi.n	8015870 <_vsnprintf+0x270>
 801584a:	286f      	cmp	r0, #111	; 0x6f
 801584c:	d100      	bne.n	8015850 <_vsnprintf+0x250>
 801584e:	e101      	b.n	8015a54 <_vsnprintf+0x454>
 8015850:	2870      	cmp	r0, #112	; 0x70
 8015852:	d000      	beq.n	8015856 <_vsnprintf+0x256>
 8015854:	e6e6      	b.n	8015624 <_vsnprintf+0x24>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8015856:	2321      	movs	r3, #33	; 0x21
 8015858:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 801585a:	3b19      	subs	r3, #25
 801585c:	9304      	str	r3, [sp, #16]
 801585e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015860:	1d35      	adds	r5, r6, #4
 8015862:	9303      	str	r3, [sp, #12]
 8015864:	2310      	movs	r3, #16
 8015866:	9302      	str	r3, [sp, #8]
 8015868:	2300      	movs	r3, #0
 801586a:	9405      	str	r4, [sp, #20]
 801586c:	9301      	str	r3, [sp, #4]
 801586e:	e049      	b.n	8015904 <_vsnprintf+0x304>
    switch (*format) {
 8015870:	2875      	cmp	r0, #117	; 0x75
 8015872:	d100      	bne.n	8015876 <_vsnprintf+0x276>
 8015874:	e793      	b.n	801579e <_vsnprintf+0x19e>
 8015876:	2878      	cmp	r0, #120	; 0x78
 8015878:	d000      	beq.n	801587c <_vsnprintf+0x27c>
 801587a:	e6d3      	b.n	8015624 <_vsnprintf+0x24>
          base = 16U;
 801587c:	2310      	movs	r3, #16
 801587e:	e795      	b.n	80157ac <_vsnprintf+0x1ac>
 8015880:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 8015882:	05e2      	lsls	r2, r4, #23
 8015884:	d513      	bpl.n	80158ae <_vsnprintf+0x2ae>
            const long value = va_arg(va, long);
 8015886:	6832      	ldr	r2, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801588a:	9302      	str	r3, [sp, #8]
 801588c:	0fd3      	lsrs	r3, r2, #31
 801588e:	9104      	str	r1, [sp, #16]
 8015890:	9301      	str	r3, [sp, #4]
 8015892:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015894:	17d3      	asrs	r3, r2, #31
 8015896:	18d2      	adds	r2, r2, r3
 8015898:	9405      	str	r4, [sp, #20]
 801589a:	9103      	str	r1, [sp, #12]
 801589c:	405a      	eors	r2, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801589e:	9200      	str	r2, [sp, #0]
 80158a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158a2:	003a      	movs	r2, r7
 80158a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80158a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80158a8:	f7ff fe0f 	bl	80154ca <_ntoa_long>
 80158ac:	e7b5      	b.n	801581a <_vsnprintf+0x21a>
 80158ae:	6832      	ldr	r2, [r6, #0]
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80158b0:	0661      	lsls	r1, r4, #25
 80158b2:	d501      	bpl.n	80158b8 <_vsnprintf+0x2b8>
 80158b4:	b252      	sxtb	r2, r2
 80158b6:	e7e7      	b.n	8015888 <_vsnprintf+0x288>
 80158b8:	0621      	lsls	r1, r4, #24
 80158ba:	d5e5      	bpl.n	8015888 <_vsnprintf+0x288>
 80158bc:	b212      	sxth	r2, r2
 80158be:	e7e3      	b.n	8015888 <_vsnprintf+0x288>
          if (flags & FLAGS_LONG_LONG) {
 80158c0:	2a00      	cmp	r2, #0
 80158c2:	d015      	beq.n	80158f0 <_vsnprintf+0x2f0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80158c4:	2107      	movs	r1, #7
 80158c6:	1df2      	adds	r2, r6, #7
 80158c8:	438a      	bics	r2, r1
 80158ca:	9304      	str	r3, [sp, #16]
 80158cc:	2300      	movs	r3, #0
 80158ce:	0015      	movs	r5, r2
 80158d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80158d2:	9408      	str	r4, [sp, #32]
 80158d4:	9107      	str	r1, [sp, #28]
 80158d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158d8:	9305      	str	r3, [sp, #20]
 80158da:	9106      	str	r1, [sp, #24]
 80158dc:	9302      	str	r3, [sp, #8]
 80158de:	6813      	ldr	r3, [r2, #0]
 80158e0:	6854      	ldr	r4, [r2, #4]
 80158e2:	3508      	adds	r5, #8
 80158e4:	9300      	str	r3, [sp, #0]
 80158e6:	9401      	str	r4, [sp, #4]
 80158e8:	e791      	b.n	801580e <_vsnprintf+0x20e>
 80158ea:	46c0      	nop			; (mov r8, r8)
 80158ec:	08015371 	.word	0x08015371
 80158f0:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 80158f2:	05e1      	lsls	r1, r4, #23
 80158f4:	d509      	bpl.n	801590a <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80158f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80158f8:	9405      	str	r4, [sp, #20]
 80158fa:	9104      	str	r1, [sp, #16]
 80158fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80158fe:	9302      	str	r3, [sp, #8]
 8015900:	9103      	str	r1, [sp, #12]
 8015902:	9201      	str	r2, [sp, #4]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015904:	6833      	ldr	r3, [r6, #0]
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	e7ca      	b.n	80158a0 <_vsnprintf+0x2a0>
 801590a:	6832      	ldr	r2, [r6, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801590c:	0661      	lsls	r1, r4, #25
 801590e:	d509      	bpl.n	8015924 <_vsnprintf+0x324>
 8015910:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015912:	9302      	str	r3, [sp, #8]
 8015914:	2300      	movs	r3, #0
 8015916:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015918:	9405      	str	r4, [sp, #20]
 801591a:	9104      	str	r1, [sp, #16]
 801591c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801591e:	9301      	str	r3, [sp, #4]
 8015920:	9103      	str	r1, [sp, #12]
 8015922:	e7bc      	b.n	801589e <_vsnprintf+0x29e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8015924:	0621      	lsls	r1, r4, #24
 8015926:	d5f4      	bpl.n	8015912 <_vsnprintf+0x312>
 8015928:	b292      	uxth	r2, r2
 801592a:	e7f2      	b.n	8015912 <_vsnprintf+0x312>
        if (!(flags & FLAGS_LEFT)) {
 801592c:	2302      	movs	r3, #2
 801592e:	4023      	ands	r3, r4
 8015930:	930b      	str	r3, [sp, #44]	; 0x2c
 8015932:	d026      	beq.n	8015982 <_vsnprintf+0x382>
        unsigned int l = 1U;
 8015934:	2301      	movs	r3, #1
 8015936:	003c      	movs	r4, r7
 8015938:	9312      	str	r3, [sp, #72]	; 0x48
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801593a:	6830      	ldr	r0, [r6, #0]
 801593c:	1d33      	adds	r3, r6, #4
 801593e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015940:	b2c0      	uxtb	r0, r0
 8015942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015944:	0022      	movs	r2, r4
 8015946:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015948:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801594a:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 801594c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801594e:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 8015950:	2b00      	cmp	r3, #0
 8015952:	d006      	beq.n	8015962 <_vsnprintf+0x362>
 8015954:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015956:	3d01      	subs	r5, #1
 8015958:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 801595a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801595c:	197b      	adds	r3, r7, r5
 801595e:	4293      	cmp	r3, r2
 8015960:	d311      	bcc.n	8015986 <_vsnprintf+0x386>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015962:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        break;
 8015964:	e75b      	b.n	801581e <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 8015966:	0022      	movs	r2, r4
 8015968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801596a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801596c:	2020      	movs	r0, #32
 801596e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015970:	47a0      	blx	r4
 8015972:	1cab      	adds	r3, r5, #2
 8015974:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015978:	197c      	adds	r4, r7, r5
 801597a:	3501      	adds	r5, #1
 801597c:	429d      	cmp	r5, r3
 801597e:	d3f2      	bcc.n	8015966 <_vsnprintf+0x366>
 8015980:	e7db      	b.n	801593a <_vsnprintf+0x33a>
 8015982:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8015984:	e7f5      	b.n	8015972 <_vsnprintf+0x372>
            out(' ', buffer, idx++, maxlen);
 8015986:	003a      	movs	r2, r7
 8015988:	1c7c      	adds	r4, r7, #1
 801598a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801598c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801598e:	2020      	movs	r0, #32
 8015990:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015992:	47b0      	blx	r6
 8015994:	0027      	movs	r7, r4
 8015996:	e7e0      	b.n	801595a <_vsnprintf+0x35a>
        const char* p = va_arg(va, char*);
 8015998:	1d33      	adds	r3, r6, #4
 801599a:	9317      	str	r3, [sp, #92]	; 0x5c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 801599c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        const char* p = va_arg(va, char*);
 801599e:	6836      	ldr	r6, [r6, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d101      	bne.n	80159a8 <_vsnprintf+0x3a8>
 80159a4:	2301      	movs	r3, #1
 80159a6:	425b      	negs	r3, r3
 80159a8:	0035      	movs	r5, r6
 80159aa:	18f3      	adds	r3, r6, r3
  for (s = str; *s && maxsize--; ++s);
 80159ac:	782a      	ldrb	r2, [r5, #0]
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	d001      	beq.n	80159b6 <_vsnprintf+0x3b6>
 80159b2:	42ab      	cmp	r3, r5
 80159b4:	d112      	bne.n	80159dc <_vsnprintf+0x3dc>
        if (flags & FLAGS_PRECISION) {
 80159b6:	2380      	movs	r3, #128	; 0x80
 80159b8:	00db      	lsls	r3, r3, #3
 80159ba:	4023      	ands	r3, r4
  return (unsigned int)(s - str);
 80159bc:	1bad      	subs	r5, r5, r6
        if (flags & FLAGS_PRECISION) {
 80159be:	9313      	str	r3, [sp, #76]	; 0x4c
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d003      	beq.n	80159cc <_vsnprintf+0x3cc>
          l = (l < precision ? l : precision);
 80159c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159c6:	429d      	cmp	r5, r3
 80159c8:	d900      	bls.n	80159cc <_vsnprintf+0x3cc>
 80159ca:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 80159cc:	2302      	movs	r3, #2
 80159ce:	4023      	ands	r3, r4
 80159d0:	9316      	str	r3, [sp, #88]	; 0x58
 80159d2:	d014      	beq.n	80159fe <_vsnprintf+0x3fe>
 80159d4:	003c      	movs	r4, r7
 80159d6:	9512      	str	r5, [sp, #72]	; 0x48
 80159d8:	0025      	movs	r5, r4
 80159da:	e01a      	b.n	8015a12 <_vsnprintf+0x412>
  for (s = str; *s && maxsize--; ++s);
 80159dc:	3501      	adds	r5, #1
 80159de:	e7e5      	b.n	80159ac <_vsnprintf+0x3ac>
            out(' ', buffer, idx++, maxlen);
 80159e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159e2:	0022      	movs	r2, r4
 80159e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80159e6:	2020      	movs	r0, #32
 80159e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80159ea:	47a0      	blx	r4
          while (l++ < width) {
 80159ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159ee:	1c5a      	adds	r2, r3, #1
 80159f0:	9212      	str	r2, [sp, #72]	; 0x48
 80159f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80159f4:	1b7c      	subs	r4, r7, r5
 80159f6:	18e4      	adds	r4, r4, r3
 80159f8:	429a      	cmp	r2, r3
 80159fa:	d8f1      	bhi.n	80159e0 <_vsnprintf+0x3e0>
 80159fc:	e7ec      	b.n	80159d8 <_vsnprintf+0x3d8>
 80159fe:	002b      	movs	r3, r5
 8015a00:	e7f5      	b.n	80159ee <_vsnprintf+0x3ee>
 8015a02:	930b      	str	r3, [sp, #44]	; 0x2c
          out(*(p++), buffer, idx++, maxlen);
 8015a04:	1c6f      	adds	r7, r5, #1
 8015a06:	002a      	movs	r2, r5
 8015a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015a0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015a0e:	47a8      	blx	r5
 8015a10:	003d      	movs	r5, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015a12:	1b33      	subs	r3, r6, r4
 8015a14:	5d58      	ldrb	r0, [r3, r5]
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d007      	beq.n	8015a2a <_vsnprintf+0x42a>
 8015a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d0f1      	beq.n	8015a04 <_vsnprintf+0x404>
 8015a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a24:	3b01      	subs	r3, #1
 8015a26:	2a00      	cmp	r2, #0
 8015a28:	d1eb      	bne.n	8015a02 <_vsnprintf+0x402>
        if (flags & FLAGS_LEFT) {
 8015a2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015a2c:	002f      	movs	r7, r5
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d109      	bne.n	8015a46 <_vsnprintf+0x446>
        const char* p = va_arg(va, char*);
 8015a32:	9e17      	ldr	r6, [sp, #92]	; 0x5c
        break;
 8015a34:	e6f3      	b.n	801581e <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 8015a36:	003a      	movs	r2, r7
 8015a38:	1c7c      	adds	r4, r7, #1
 8015a3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a3c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015a3e:	2020      	movs	r0, #32
 8015a40:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015a42:	47b0      	blx	r6
 8015a44:	0027      	movs	r7, r4
 8015a46:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015a48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a4a:	1b5b      	subs	r3, r3, r5
 8015a4c:	19db      	adds	r3, r3, r7
 8015a4e:	4293      	cmp	r3, r2
 8015a50:	d3f1      	bcc.n	8015a36 <_vsnprintf+0x436>
 8015a52:	e7ee      	b.n	8015a32 <_vsnprintf+0x432>
          base =  8U;
 8015a54:	2308      	movs	r3, #8
 8015a56:	e6a9      	b.n	80157ac <_vsnprintf+0x1ac>
          base =  2U;
 8015a58:	2302      	movs	r3, #2
 8015a5a:	e6a7      	b.n	80157ac <_vsnprintf+0x1ac>

08015a5c <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8015a5c:	b507      	push	{r0, r1, r2, lr}
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8015a5e:	9300      	str	r3, [sp, #0]
 8015a60:	0013      	movs	r3, r2
 8015a62:	000a      	movs	r2, r1
 8015a64:	0001      	movs	r1, r0
 8015a66:	4802      	ldr	r0, [pc, #8]	; (8015a70 <vsnprintf_+0x14>)
 8015a68:	f7ff fdca 	bl	8015600 <_vsnprintf>
}
 8015a6c:	bd0e      	pop	{r1, r2, r3, pc}
 8015a6e:	46c0      	nop			; (mov r8, r8)
 8015a70:	08015369 	.word	0x08015369

08015a74 <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8015a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015a76:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015a78:	2101      	movs	r1, #1
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015a7a:	9002      	str	r0, [sp, #8]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	4804      	ldr	r0, [pc, #16]	; (8015a90 <fctvprintf+0x1c>)
 8015a80:	0013      	movs	r3, r2
 8015a82:	424a      	negs	r2, r1
 8015a84:	a902      	add	r1, sp, #8
 8015a86:	f7ff fdbb 	bl	8015600 <_vsnprintf>
}
 8015a8a:	b005      	add	sp, #20
 8015a8c:	bd00      	pop	{pc}
 8015a8e:	46c0      	nop			; (mov r8, r8)
 8015a90:	08015373 	.word	0x08015373

08015a94 <malloc>:
 8015a94:	b510      	push	{r4, lr}
 8015a96:	4b03      	ldr	r3, [pc, #12]	; (8015aa4 <malloc+0x10>)
 8015a98:	0001      	movs	r1, r0
 8015a9a:	6818      	ldr	r0, [r3, #0]
 8015a9c:	f7fd fc3c 	bl	8013318 <_malloc_r>
 8015aa0:	bd10      	pop	{r4, pc}
 8015aa2:	46c0      	nop			; (mov r8, r8)
 8015aa4:	20000008 	.word	0x20000008

08015aa8 <free>:
 8015aa8:	b510      	push	{r4, lr}
 8015aaa:	4b03      	ldr	r3, [pc, #12]	; (8015ab8 <free+0x10>)
 8015aac:	0001      	movs	r1, r0
 8015aae:	6818      	ldr	r0, [r3, #0]
 8015ab0:	f7fd fbe8 	bl	8013284 <_free_r>
 8015ab4:	bd10      	pop	{r4, pc}
 8015ab6:	46c0      	nop			; (mov r8, r8)
 8015ab8:	20000008 	.word	0x20000008

08015abc <memcpy>:
 8015abc:	2300      	movs	r3, #0
 8015abe:	b510      	push	{r4, lr}
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d100      	bne.n	8015ac6 <memcpy+0xa>
 8015ac4:	bd10      	pop	{r4, pc}
 8015ac6:	5ccc      	ldrb	r4, [r1, r3]
 8015ac8:	54c4      	strb	r4, [r0, r3]
 8015aca:	3301      	adds	r3, #1
 8015acc:	e7f8      	b.n	8015ac0 <memcpy+0x4>

08015ace <memmove>:
 8015ace:	b510      	push	{r4, lr}
 8015ad0:	4288      	cmp	r0, r1
 8015ad2:	d902      	bls.n	8015ada <memmove+0xc>
 8015ad4:	188b      	adds	r3, r1, r2
 8015ad6:	4298      	cmp	r0, r3
 8015ad8:	d303      	bcc.n	8015ae2 <memmove+0x14>
 8015ada:	2300      	movs	r3, #0
 8015adc:	e007      	b.n	8015aee <memmove+0x20>
 8015ade:	5c8b      	ldrb	r3, [r1, r2]
 8015ae0:	5483      	strb	r3, [r0, r2]
 8015ae2:	3a01      	subs	r2, #1
 8015ae4:	d2fb      	bcs.n	8015ade <memmove+0x10>
 8015ae6:	bd10      	pop	{r4, pc}
 8015ae8:	5ccc      	ldrb	r4, [r1, r3]
 8015aea:	54c4      	strb	r4, [r0, r3]
 8015aec:	3301      	adds	r3, #1
 8015aee:	429a      	cmp	r2, r3
 8015af0:	d1fa      	bne.n	8015ae8 <memmove+0x1a>
 8015af2:	e7f8      	b.n	8015ae6 <memmove+0x18>

08015af4 <_init>:
 8015af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015af6:	46c0      	nop			; (mov r8, r8)
 8015af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015afa:	bc08      	pop	{r3}
 8015afc:	469e      	mov	lr, r3
 8015afe:	4770      	bx	lr

08015b00 <_fini>:
 8015b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b02:	46c0      	nop			; (mov r8, r8)
 8015b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b06:	bc08      	pop	{r3}
 8015b08:	469e      	mov	lr, r3
 8015b0a:	4770      	bx	lr
