
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015638  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008f28  080156f8  080156f8  000256f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e620  0801e620  0002e620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e628  0801e628  0002e628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e62c  0801e62c  0002e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801e630  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000660  20000070  0801e6a0  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  200006d0  0801e6a0  000306d0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030897  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002361  00000000  00000000  0006092f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001b10f  00000000  00000000  00062c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000188  00000000  00000000  0007dd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005610  00000000  00000000  0007df27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008eac  00000000  00000000  00083537  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000cfef  00000000  00000000  0008c3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  000993d2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033bc  00000000  00000000  00099454  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  0009c810  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  0009c864  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080156dc 	.word	0x080156dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080156dc 	.word	0x080156dc

08000104 <acc_service_maximize_signal_attenuation_set.part.8>:
 8000104:	b510      	push	{r4, lr}
 8000106:	4b03      	ldr	r3, [pc, #12]	; (8000114 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8000108:	4a03      	ldr	r2, [pc, #12]	; (8000118 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800010c:	4903      	ldr	r1, [pc, #12]	; (800011c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800010e:	2001      	movs	r0, #1
 8000110:	4798      	blx	r3
 8000112:	bd10      	pop	{r4, pc}
 8000114:	200003f0 	.word	0x200003f0
 8000118:	0801baa8 	.word	0x0801baa8
 800011c:	0801cdfe 	.word	0x0801cdfe

08000120 <acc_service_configuration_valid>:
 8000120:	b510      	push	{r4, lr}
 8000122:	2800      	cmp	r0, #0
 8000124:	d00a      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000126:	4b09      	ldr	r3, [pc, #36]	; (800014c <acc_service_configuration_valid+0x2c>)
 8000128:	6802      	ldr	r2, [r0, #0]
 800012a:	429a      	cmp	r2, r3
 800012c:	d106      	bne.n	800013c <acc_service_configuration_valid+0x1c>
 800012e:	8b03      	ldrh	r3, [r0, #24]
 8000130:	2b00      	cmp	r3, #0
 8000132:	d003      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000134:	6943      	ldr	r3, [r0, #20]
 8000136:	2001      	movs	r0, #1
 8000138:	2b00      	cmp	r3, #0
 800013a:	d106      	bne.n	800014a <acc_service_configuration_valid+0x2a>
 800013c:	4b04      	ldr	r3, [pc, #16]	; (8000150 <acc_service_configuration_valid+0x30>)
 800013e:	2000      	movs	r0, #0
 8000140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000142:	4a04      	ldr	r2, [pc, #16]	; (8000154 <acc_service_configuration_valid+0x34>)
 8000144:	4904      	ldr	r1, [pc, #16]	; (8000158 <acc_service_configuration_valid+0x38>)
 8000146:	4798      	blx	r3
 8000148:	2000      	movs	r0, #0
 800014a:	bd10      	pop	{r4, pc}
 800014c:	acc09dd7 	.word	0xacc09dd7
 8000150:	200003f0 	.word	0x200003f0
 8000154:	0801baa8 	.word	0x0801baa8
 8000158:	0801cdfe 	.word	0x0801cdfe

0800015c <acc_service_configuration_check>:
 800015c:	b510      	push	{r4, lr}
 800015e:	0004      	movs	r4, r0
 8000160:	f7ff ffde 	bl	8000120 <acc_service_configuration_valid>
 8000164:	2800      	cmp	r0, #0
 8000166:	d00a      	beq.n	800017e <acc_service_configuration_check+0x22>
 8000168:	7963      	ldrb	r3, [r4, #5]
 800016a:	3b01      	subs	r3, #1
 800016c:	2b04      	cmp	r3, #4
 800016e:	d906      	bls.n	800017e <acc_service_configuration_check+0x22>
 8000170:	4b03      	ldr	r3, [pc, #12]	; (8000180 <acc_service_configuration_check+0x24>)
 8000172:	2000      	movs	r0, #0
 8000174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000176:	4a03      	ldr	r2, [pc, #12]	; (8000184 <acc_service_configuration_check+0x28>)
 8000178:	4903      	ldr	r1, [pc, #12]	; (8000188 <acc_service_configuration_check+0x2c>)
 800017a:	4798      	blx	r3
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}
 8000180:	200003f0 	.word	0x200003f0
 8000184:	0801babe 	.word	0x0801babe
 8000188:	0801cdfe 	.word	0x0801cdfe

0800018c <acc_service_pipeline_destroy>:
 800018c:	b510      	push	{r4, lr}
 800018e:	0004      	movs	r4, r0
 8000190:	6900      	ldr	r0, [r0, #16]
 8000192:	2800      	cmp	r0, #0
 8000194:	d003      	beq.n	800019e <acc_service_pipeline_destroy+0x12>
 8000196:	68c3      	ldr	r3, [r0, #12]
 8000198:	4798      	blx	r3
 800019a:	2300      	movs	r3, #0
 800019c:	6123      	str	r3, [r4, #16]
 800019e:	bd10      	pop	{r4, pc}

080001a0 <acc_service_get_base_configuration>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	1e04      	subs	r4, r0, #0
 80001a4:	d001      	beq.n	80001aa <acc_service_get_base_configuration+0xa>
 80001a6:	6900      	ldr	r0, [r0, #16]
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <acc_service_get_base_configuration+0x24>)
 80001ac:	001a      	movs	r2, r3
 80001ae:	3230      	adds	r2, #48	; 0x30
 80001b0:	7812      	ldrb	r2, [r2, #0]
 80001b2:	1e10      	subs	r0, r2, #0
 80001b4:	d0f8      	beq.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001b6:	2001      	movs	r0, #1
 80001b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <acc_service_get_base_configuration+0x28>)
 80001bc:	4903      	ldr	r1, [pc, #12]	; (80001cc <acc_service_get_base_configuration+0x2c>)
 80001be:	4798      	blx	r3
 80001c0:	0020      	movs	r0, r4
 80001c2:	e7f1      	b.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001c4:	200003f0 	.word	0x200003f0
 80001c8:	0801baa8 	.word	0x0801baa8
 80001cc:	0801cdfe 	.word	0x0801cdfe

080001d0 <get_sparse_configuration>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	1e04      	subs	r4, r0, #0
 80001d4:	d004      	beq.n	80001e0 <get_sparse_configuration+0x10>
 80001d6:	7903      	ldrb	r3, [r0, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10d      	bne.n	80001f8 <get_sparse_configuration+0x28>
 80001dc:	0020      	movs	r0, r4
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <get_sparse_configuration+0x2c>)
 80001e2:	001a      	movs	r2, r3
 80001e4:	3230      	adds	r2, #48	; 0x30
 80001e6:	7812      	ldrb	r2, [r2, #0]
 80001e8:	2a00      	cmp	r2, #0
 80001ea:	d0f7      	beq.n	80001dc <get_sparse_configuration+0xc>
 80001ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ee:	4a04      	ldr	r2, [pc, #16]	; (8000200 <get_sparse_configuration+0x30>)
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <get_sparse_configuration+0x34>)
 80001f2:	2001      	movs	r0, #1
 80001f4:	4798      	blx	r3
 80001f6:	e7f1      	b.n	80001dc <get_sparse_configuration+0xc>
 80001f8:	2400      	movs	r4, #0
 80001fa:	e7ef      	b.n	80001dc <get_sparse_configuration+0xc>
 80001fc:	200003f0 	.word	0x200003f0
 8000200:	0801baa8 	.word	0x0801baa8
 8000204:	0801bad6 	.word	0x0801bad6

08000208 <acc_service_sparse_get_metadata>:
 8000208:	b510      	push	{r4, lr}
 800020a:	000c      	movs	r4, r1
 800020c:	2800      	cmp	r0, #0
 800020e:	d015      	beq.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000210:	7a03      	ldrb	r3, [r0, #8]
 8000212:	2b03      	cmp	r3, #3
 8000214:	d112      	bne.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000216:	6903      	ldr	r3, [r0, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	699a      	ldr	r2, [r3, #24]
 800021c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800021e:	600a      	str	r2, [r1, #0]
 8000220:	69da      	ldr	r2, [r3, #28]
 8000222:	604a      	str	r2, [r1, #4]
 8000224:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000226:	810a      	strh	r2, [r1, #8]
 8000228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800022a:	60ca      	str	r2, [r1, #12]
 800022c:	4904      	ldr	r1, [pc, #16]	; (8000240 <acc_service_sparse_get_metadata+0x38>)
 800022e:	f00e f97d 	bl	800e52c <__aeabi_fmul>
 8000232:	21fc      	movs	r1, #252	; 0xfc
 8000234:	0589      	lsls	r1, r1, #22
 8000236:	f00e f979 	bl	800e52c <__aeabi_fmul>
 800023a:	6120      	str	r0, [r4, #16]
 800023c:	bd10      	pop	{r4, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	4d8ef3c2 	.word	0x4d8ef3c2

08000244 <get_and_validate_envelope_configuration>:
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
 8000248:	f7ff ff6a 	bl	8000120 <acc_service_configuration_valid>
 800024c:	2800      	cmp	r0, #0
 800024e:	d002      	beq.n	8000256 <get_and_validate_envelope_configuration+0x12>
 8000250:	7923      	ldrb	r3, [r4, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00b      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <get_and_validate_envelope_configuration+0x30>)
 8000258:	001a      	movs	r2, r3
 800025a:	3230      	adds	r2, #48	; 0x30
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	1e14      	subs	r4, r2, #0
 8000260:	d005      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <get_and_validate_envelope_configuration+0x34>)
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <get_and_validate_envelope_configuration+0x38>)
 8000268:	2001      	movs	r0, #1
 800026a:	4798      	blx	r3
 800026c:	2400      	movs	r4, #0
 800026e:	0020      	movs	r0, r4
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	200003f0 	.word	0x200003f0
 8000278:	0801baa8 	.word	0x0801baa8
 800027c:	0801bae5 	.word	0x0801bae5

08000280 <center_of_mass>:
		}
	}
	}
}

floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	46de      	mov	lr, fp
 8000286:	464e      	mov	r6, r9
 8000288:	4645      	mov	r5, r8
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	040b      	lsls	r3, r1, #16
 800028e:	b08b      	sub	sp, #44	; 0x2c
 8000290:	9008      	str	r0, [sp, #32]
 8000292:	ac09      	add	r4, sp, #36	; 0x24
	uint8_t msweep = max.x1;
	uint8_t mbin = max.x2;
 8000294:	0e1b      	lsrs	r3, r3, #24
	
	float mass = 0.0f;	
	floatv2_t center = {0.0f,0.0f};
	
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8000296:	b290      	uxth	r0, r2
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8000298:	8021      	strh	r1, [r4, #0]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 800029a:	1a1c      	subs	r4, r3, r0
 800029c:	189b      	adds	r3, r3, r2
	uint8_t msweep = max.x1;
 800029e:	b2c9      	uxtb	r1, r1
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80002a0:	46a2      	mov	sl, r4
 80002a2:	9304      	str	r3, [sp, #16]
 80002a4:	429c      	cmp	r4, r3
 80002a6:	dd00      	ble.n	80002aa <center_of_mass+0x2a>
 80002a8:	e0f1      	b.n	800048e <center_of_mass+0x20e>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002aa:	468b      	mov	fp, r1
	floatv2_t center = {0.0f,0.0f};
 80002ac:	2500      	movs	r5, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002ae:	1a0b      	subs	r3, r1, r0
 80002b0:	9302      	str	r3, [sp, #8]
		(sweep >= 0) && (sweep < _sweeps) &&
 80002b2:	4b78      	ldr	r3, [pc, #480]	; (8000494 <center_of_mass+0x214>)
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002b4:	4493      	add	fp, r2
		(sweep >= 0) && (sweep < _sweeps) &&
 80002b6:	781a      	ldrb	r2, [r3, #0]
	floatv2_t center = {0.0f,0.0f};
 80002b8:	1c2e      	adds	r6, r5, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 80002ba:	9203      	str	r2, [sp, #12]
		(bin >= 0) && (bin < _bins)
 80002bc:	785a      	ldrb	r2, [r3, #1]
		return _conv_data[sweep][bin];
 80002be:	685b      	ldr	r3, [r3, #4]
		(bin >= 0) && (bin < _bins)
 80002c0:	9206      	str	r2, [sp, #24]
		return _conv_data[sweep][bin];
 80002c2:	9307      	str	r3, [sp, #28]
	float mass = 0.0f;	
 80002c4:	1c2f      	adds	r7, r5, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002c6:	9b02      	ldr	r3, [sp, #8]
 80002c8:	455b      	cmp	r3, fp
 80002ca:	dc47      	bgt.n	800035c <center_of_mass+0xdc>
		return _conv_data[sweep][bin];
 80002cc:	4653      	mov	r3, sl
 80002ce:	4650      	mov	r0, sl
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	9305      	str	r3, [sp, #20]
 80002d4:	f00f f840 	bl	800f358 <__aeabi_i2f>
 80002d8:	9b06      	ldr	r3, [sp, #24]
 80002da:	9001      	str	r0, [sp, #4]
 80002dc:	4553      	cmp	r3, sl
 80002de:	dd5f      	ble.n	80003a0 <center_of_mass+0x120>
 80002e0:	4653      	mov	r3, sl
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	da00      	bge.n	80002e8 <center_of_mass+0x68>
 80002e6:	e085      	b.n	80003f4 <center_of_mass+0x174>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002e8:	9b02      	ldr	r3, [sp, #8]
		return _conv_data[sweep][bin];
 80002ea:	46b0      	mov	r8, r6
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80002ec:	001c      	movs	r4, r3
		return _conv_data[sweep][bin];
 80002ee:	1c2e      	adds	r6, r5, #0
 80002f0:	e02d      	b.n	800034e <center_of_mass+0xce>
		(sweep >= 0) && (sweep < _sweeps) &&
 80002f2:	9a03      	ldr	r2, [sp, #12]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dd2c      	ble.n	8000352 <center_of_mass+0xd2>
		return _conv_data[sweep][bin];
 80002f8:	9a07      	ldr	r2, [sp, #28]
 80002fa:	00a3      	lsls	r3, r4, #2
 80002fc:	589b      	ldr	r3, [r3, r2]
 80002fe:	9a05      	ldr	r2, [sp, #20]
 8000300:	5a9d      	ldrh	r5, [r3, r2]
 8000302:	0028      	movs	r0, r5
 8000304:	f00f f828 	bl	800f358 <__aeabi_i2f>
 8000308:	4681      	mov	r9, r0
 800030a:	0028      	movs	r0, r5
 800030c:	f00f f86e 	bl	800f3ec <__aeabi_ui2f>
 8000310:	1c05      	adds	r5, r0, #0
			mass += getdata(j,i);
 8000312:	4649      	mov	r1, r9
 8000314:	1c38      	adds	r0, r7, #0
 8000316:	f00d fe5d 	bl	800dfd4 <__aeabi_fadd>
 800031a:	1c07      	adds	r7, r0, #0
			center.x1 += (float)getdata(j,i)*(float)j;
 800031c:	0020      	movs	r0, r4
 800031e:	f00f f81b 	bl	800f358 <__aeabi_i2f>
 8000322:	1c29      	adds	r1, r5, #0
 8000324:	f00e f902 	bl	800e52c <__aeabi_fmul>
 8000328:	1c01      	adds	r1, r0, #0
 800032a:	4640      	mov	r0, r8
 800032c:	f00d fe52 	bl	800dfd4 <__aeabi_fadd>
			center.x2 += (float)getdata(j,i)*(float)i;
 8000330:	1c29      	adds	r1, r5, #0
			center.x1 += (float)getdata(j,i)*(float)j;
 8000332:	4680      	mov	r8, r0
			center.x2 += (float)getdata(j,i)*(float)i;
 8000334:	9801      	ldr	r0, [sp, #4]
 8000336:	f00e f8f9 	bl	800e52c <__aeabi_fmul>
 800033a:	1c01      	adds	r1, r0, #0
 800033c:	1c30      	adds	r0, r6, #0
 800033e:	f00d fe49 	bl	800dfd4 <__aeabi_fadd>
 8000342:	3401      	adds	r4, #1
 8000344:	b224      	sxth	r4, r4
 8000346:	1c06      	adds	r6, r0, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8000348:	0023      	movs	r3, r4
 800034a:	455c      	cmp	r4, fp
 800034c:	dc04      	bgt.n	8000358 <center_of_mass+0xd8>
	if(
 800034e:	2c00      	cmp	r4, #0
 8000350:	dacf      	bge.n	80002f2 <center_of_mass+0x72>
		(sweep >= 0) && (sweep < _sweeps) &&
 8000352:	2500      	movs	r5, #0
 8000354:	46a9      	mov	r9, r5
 8000356:	e7dc      	b.n	8000312 <center_of_mass+0x92>
 8000358:	4646      	mov	r6, r8
 800035a:	1c05      	adds	r5, r0, #0
 800035c:	4653      	mov	r3, sl
 800035e:	3301      	adds	r3, #1
 8000360:	b21b      	sxth	r3, r3
 8000362:	469a      	mov	sl, r3
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8000364:	9b04      	ldr	r3, [sp, #16]
 8000366:	459a      	cmp	sl, r3
 8000368:	ddad      	ble.n	80002c6 <center_of_mass+0x46>
	}
	}
	if(mass != 0.0f){	
 800036a:	2100      	movs	r1, #0
 800036c:	1c38      	adds	r0, r7, #0
 800036e:	f00e fdcf 	bl	800ef10 <__aeabi_fcmpeq>
 8000372:	2800      	cmp	r0, #0
 8000374:	d109      	bne.n	800038a <center_of_mass+0x10a>
		center.x1 /= mass;
 8000376:	1c39      	adds	r1, r7, #0
 8000378:	1c30      	adds	r0, r6, #0
 800037a:	f00d ffc5 	bl	800e308 <__aeabi_fdiv>
		center.x2 /= mass;
 800037e:	1c39      	adds	r1, r7, #0
		center.x1 /= mass;
 8000380:	1c06      	adds	r6, r0, #0
		center.x2 /= mass;
 8000382:	1c28      	adds	r0, r5, #0
 8000384:	f00d ffc0 	bl	800e308 <__aeabi_fdiv>
 8000388:	1c05      	adds	r5, r0, #0
	}
	return center;
 800038a:	9b08      	ldr	r3, [sp, #32]
}
 800038c:	0018      	movs	r0, r3
	return center;
 800038e:	601e      	str	r6, [r3, #0]
 8000390:	605d      	str	r5, [r3, #4]
}
 8000392:	b00b      	add	sp, #44	; 0x2c
 8000394:	bc3c      	pop	{r2, r3, r4, r5}
 8000396:	4690      	mov	r8, r2
 8000398:	4699      	mov	r9, r3
 800039a:	46a2      	mov	sl, r4
 800039c:	46ab      	mov	fp, r5
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	4653      	mov	r3, sl
			center.x2 += (float)getdata(j,i)*(float)i;
 80003a2:	2100      	movs	r1, #0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db4c      	blt.n	8000442 <center_of_mass+0x1c2>
 80003a8:	f00e f8c0 	bl	800e52c <__aeabi_fmul>
 80003ac:	4680      	mov	r8, r0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80003ae:	9c02      	ldr	r4, [sp, #8]
			mass += getdata(j,i);
 80003b0:	2100      	movs	r1, #0
 80003b2:	1c38      	adds	r0, r7, #0
 80003b4:	f00d fe0e 	bl	800dfd4 <__aeabi_fadd>
 80003b8:	1c07      	adds	r7, r0, #0
			center.x1 += (float)getdata(j,i)*(float)j;
 80003ba:	0020      	movs	r0, r4
 80003bc:	f00e ffcc 	bl	800f358 <__aeabi_i2f>
 80003c0:	2100      	movs	r1, #0
 80003c2:	f00e f8b3 	bl	800e52c <__aeabi_fmul>
 80003c6:	1c01      	adds	r1, r0, #0
 80003c8:	1c30      	adds	r0, r6, #0
 80003ca:	f00d fe03 	bl	800dfd4 <__aeabi_fadd>
			center.x2 += (float)getdata(j,i)*(float)i;
 80003ce:	4641      	mov	r1, r8
			center.x1 += (float)getdata(j,i)*(float)j;
 80003d0:	1c06      	adds	r6, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 80003d2:	1c28      	adds	r0, r5, #0
 80003d4:	f00d fdfe 	bl	800dfd4 <__aeabi_fadd>
 80003d8:	3401      	adds	r4, #1
 80003da:	b224      	sxth	r4, r4
 80003dc:	1c05      	adds	r5, r0, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80003de:	455c      	cmp	r4, fp
 80003e0:	dde6      	ble.n	80003b0 <center_of_mass+0x130>
 80003e2:	4653      	mov	r3, sl
 80003e4:	3301      	adds	r3, #1
 80003e6:	b21b      	sxth	r3, r3
 80003e8:	469a      	mov	sl, r3
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80003ea:	9b04      	ldr	r3, [sp, #16]
 80003ec:	459a      	cmp	sl, r3
 80003ee:	dc00      	bgt.n	80003f2 <center_of_mass+0x172>
 80003f0:	e769      	b.n	80002c6 <center_of_mass+0x46>
 80003f2:	e7ba      	b.n	800036a <center_of_mass+0xea>
			center.x2 += (float)getdata(j,i)*(float)i;
 80003f4:	2100      	movs	r1, #0
 80003f6:	f00e f899 	bl	800e52c <__aeabi_fmul>
 80003fa:	4680      	mov	r8, r0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80003fc:	9c02      	ldr	r4, [sp, #8]
			mass += getdata(j,i);
 80003fe:	2100      	movs	r1, #0
 8000400:	1c38      	adds	r0, r7, #0
 8000402:	f00d fde7 	bl	800dfd4 <__aeabi_fadd>
 8000406:	1c07      	adds	r7, r0, #0
			center.x1 += (float)getdata(j,i)*(float)j;
 8000408:	0020      	movs	r0, r4
 800040a:	f00e ffa5 	bl	800f358 <__aeabi_i2f>
 800040e:	2100      	movs	r1, #0
 8000410:	f00e f88c 	bl	800e52c <__aeabi_fmul>
 8000414:	1c01      	adds	r1, r0, #0
 8000416:	1c30      	adds	r0, r6, #0
 8000418:	f00d fddc 	bl	800dfd4 <__aeabi_fadd>
			center.x2 += (float)getdata(j,i)*(float)i;
 800041c:	4641      	mov	r1, r8
			center.x1 += (float)getdata(j,i)*(float)j;
 800041e:	1c06      	adds	r6, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 8000420:	1c28      	adds	r0, r5, #0
 8000422:	f00d fdd7 	bl	800dfd4 <__aeabi_fadd>
 8000426:	3401      	adds	r4, #1
 8000428:	b224      	sxth	r4, r4
 800042a:	1c05      	adds	r5, r0, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 800042c:	45a3      	cmp	fp, r4
 800042e:	dae6      	bge.n	80003fe <center_of_mass+0x17e>
 8000430:	4653      	mov	r3, sl
 8000432:	3301      	adds	r3, #1
 8000434:	b21b      	sxth	r3, r3
 8000436:	469a      	mov	sl, r3
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8000438:	9b04      	ldr	r3, [sp, #16]
 800043a:	459a      	cmp	sl, r3
 800043c:	dc00      	bgt.n	8000440 <center_of_mass+0x1c0>
 800043e:	e742      	b.n	80002c6 <center_of_mass+0x46>
 8000440:	e793      	b.n	800036a <center_of_mass+0xea>
			center.x2 += (float)getdata(j,i)*(float)i;
 8000442:	f00e f873 	bl	800e52c <__aeabi_fmul>
 8000446:	4680      	mov	r8, r0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8000448:	9c02      	ldr	r4, [sp, #8]
			mass += getdata(j,i);
 800044a:	2100      	movs	r1, #0
 800044c:	1c38      	adds	r0, r7, #0
 800044e:	f00d fdc1 	bl	800dfd4 <__aeabi_fadd>
 8000452:	1c07      	adds	r7, r0, #0
			center.x1 += (float)getdata(j,i)*(float)j;
 8000454:	0020      	movs	r0, r4
 8000456:	f00e ff7f 	bl	800f358 <__aeabi_i2f>
 800045a:	2100      	movs	r1, #0
 800045c:	f00e f866 	bl	800e52c <__aeabi_fmul>
 8000460:	1c01      	adds	r1, r0, #0
 8000462:	1c30      	adds	r0, r6, #0
 8000464:	f00d fdb6 	bl	800dfd4 <__aeabi_fadd>
			center.x2 += (float)getdata(j,i)*(float)i;
 8000468:	4641      	mov	r1, r8
			center.x1 += (float)getdata(j,i)*(float)j;
 800046a:	1c06      	adds	r6, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 800046c:	1c28      	adds	r0, r5, #0
 800046e:	f00d fdb1 	bl	800dfd4 <__aeabi_fadd>
 8000472:	3401      	adds	r4, #1
 8000474:	b224      	sxth	r4, r4
 8000476:	1c05      	adds	r5, r0, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 8000478:	45a3      	cmp	fp, r4
 800047a:	dae6      	bge.n	800044a <center_of_mass+0x1ca>
 800047c:	4653      	mov	r3, sl
 800047e:	3301      	adds	r3, #1
 8000480:	b21b      	sxth	r3, r3
 8000482:	469a      	mov	sl, r3
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8000484:	9b04      	ldr	r3, [sp, #16]
 8000486:	459a      	cmp	sl, r3
 8000488:	dc00      	bgt.n	800048c <center_of_mass+0x20c>
 800048a:	e71c      	b.n	80002c6 <center_of_mass+0x46>
 800048c:	e76d      	b.n	800036a <center_of_mass+0xea>
	floatv2_t center = {0.0f,0.0f};
 800048e:	2500      	movs	r5, #0
 8000490:	1c2e      	adds	r6, r5, #0
 8000492:	e77a      	b.n	800038a <center_of_mass+0x10a>
 8000494:	2000008c 	.word	0x2000008c

08000498 <null_data>:
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	0006      	movs	r6, r0
 800049e:	466f      	mov	r7, sp
 80004a0:	a801      	add	r0, sp, #4
 80004a2:	8001      	strh	r1, [r0, #0]
	uint16_t apex = data[msweep][mbin];
 80004a4:	b2d0      	uxtb	r0, r2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80004a6:	1c0d      	adds	r5, r1, #0
 80004a8:	040c      	lsls	r4, r1, #16
	uint16_t apex = data[msweep][mbin];
 80004aa:	0080      	lsls	r0, r0, #2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80004ac:	0411      	lsls	r1, r2, #16
 80004ae:	803a      	strh	r2, [r7, #0]
	uint16_t apex = data[msweep][mbin];
 80004b0:	0e09      	lsrs	r1, r1, #24
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80004b2:	1c1f      	adds	r7, r3, #0
	uint16_t apex = data[msweep][mbin];
 80004b4:	5983      	ldr	r3, [r0, r6]
 80004b6:	0049      	lsls	r1, r1, #1
	uint16_t halfpex = apex*threshold;
 80004b8:	5ac8      	ldrh	r0, [r1, r3]
 80004ba:	f00e ff4d 	bl	800f358 <__aeabi_i2f>
 80004be:	1c39      	adds	r1, r7, #0
 80004c0:	f00e f834 	bl	800e52c <__aeabi_fmul>
 80004c4:	f00e fd72 	bl	800efac <__aeabi_f2uiz>
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80004c8:	0e24      	lsrs	r4, r4, #24
	uint8_t sweeps = data_size.x1;
 80004ca:	b2ed      	uxtb	r5, r5
	uint16_t halfpex = apex*threshold;
 80004cc:	b280      	uxth	r0, r0
	for(uint16_t i = 0; i<bins; i++){
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d01c      	beq.n	800050c <null_data+0x74>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80004d2:	086d      	lsrs	r5, r5, #1
 80004d4:	b2ab      	uxth	r3, r5
 80004d6:	2d00      	cmp	r5, #0
 80004d8:	d018      	beq.n	800050c <null_data+0x74>
 80004da:	1e62      	subs	r2, r4, #1
 80004dc:	b297      	uxth	r7, r2
 80004de:	3701      	adds	r7, #1
 80004e0:	007a      	lsls	r2, r7, #1
 80004e2:	4694      	mov	ip, r2
 80004e4:	2400      	movs	r4, #0
			data[j][i] = 0;
 80004e6:	2700      	movs	r7, #0
 80004e8:	3b01      	subs	r3, #1
 80004ea:	b29d      	uxth	r5, r3
 80004ec:	00ad      	lsls	r5, r5, #2
 80004ee:	1975      	adds	r5, r6, r5
 80004f0:	3504      	adds	r5, #4
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80004f2:	0032      	movs	r2, r6
		if(data[j][i] > halfpex){
 80004f4:	6813      	ldr	r3, [r2, #0]
 80004f6:	191b      	adds	r3, r3, r4
 80004f8:	8819      	ldrh	r1, [r3, #0]
 80004fa:	4281      	cmp	r1, r0
 80004fc:	d900      	bls.n	8000500 <null_data+0x68>
			data[j][i] = 0;
 80004fe:	801f      	strh	r7, [r3, #0]
 8000500:	3204      	adds	r2, #4
	for(uint16_t j = 0; j<sweeps/2; j++){
 8000502:	4295      	cmp	r5, r2
 8000504:	d1f6      	bne.n	80004f4 <null_data+0x5c>
 8000506:	3402      	adds	r4, #2
	for(uint16_t i = 0; i<bins; i++){
 8000508:	4564      	cmp	r4, ip
 800050a:	d1f2      	bne.n	80004f2 <null_data+0x5a>
}
 800050c:	b003      	add	sp, #12
 800050e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000510 <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8000510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000512:	46de      	mov	lr, fp
 8000514:	4657      	mov	r7, sl
 8000516:	464e      	mov	r6, r9
 8000518:	4645      	mov	r5, r8
 800051a:	b5e0      	push	{r5, r6, r7, lr}
 800051c:	0007      	movs	r7, r0
 800051e:	b089      	sub	sp, #36	; 0x24
 8000520:	a807      	add	r0, sp, #28
 8000522:	ae06      	add	r6, sp, #24
 8000524:	8001      	strh	r1, [r0, #0]
 8000526:	8032      	strh	r2, [r6, #0]
 8000528:	1c1e      	adds	r6, r3, #0
	uint8_t msweep = max.x1;
 800052a:	b2d3      	uxtb	r3, r2
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 800052c:	1c0d      	adds	r5, r1, #0
 800052e:	040c      	lsls	r4, r1, #16
	uint8_t msweep = max.x1;
 8000530:	9302      	str	r3, [sp, #8]
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8000532:	0411      	lsls	r1, r2, #16
	uint16_t apex = data[msweep][mbin];
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	59db      	ldr	r3, [r3, r7]
 8000538:	0e0a      	lsrs	r2, r1, #24
 800053a:	9205      	str	r2, [sp, #20]
 800053c:	0052      	lsls	r2, r2, #1
	uint16_t halfpex = (uint16_t)(apex * threshold);
 800053e:	5ad0      	ldrh	r0, [r2, r3]
	uint16_t apex = data[msweep][mbin];
 8000540:	9701      	str	r7, [sp, #4]
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8000542:	f00e ff09 	bl	800f358 <__aeabi_i2f>
 8000546:	1c31      	adds	r1, r6, #0
 8000548:	f00d fff0 	bl	800e52c <__aeabi_fmul>
 800054c:	f00e fd2e 	bl	800efac <__aeabi_f2uiz>
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8000550:	0e24      	lsrs	r4, r4, #24
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8000552:	b283      	uxth	r3, r0
 8000554:	9300      	str	r3, [sp, #0]
	for(int16_t i = 0; i<bins; i++){
 8000556:	b2e3      	uxtb	r3, r4
	uint8_t sweeps = data_size.x1;
 8000558:	b2ed      	uxtb	r5, r5
	for(int16_t i = 0; i<bins; i++){
 800055a:	9304      	str	r3, [sp, #16]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d057      	beq.n	8000610 <get_msd+0x100>
	for(int16_t j = 0; j<sweeps/2; j++){
 8000560:	086b      	lsrs	r3, r5, #1
 8000562:	4698      	mov	r8, r3
	for(int16_t i = 0; i<bins; i++){
 8000564:	2300      	movs	r3, #0
 8000566:	0039      	movs	r1, r7
 8000568:	9303      	str	r3, [sp, #12]
 800056a:	2700      	movs	r7, #0
	float mass = 0.0f;
 800056c:	2300      	movs	r3, #0
 800056e:	4689      	mov	r9, r1
 8000570:	469b      	mov	fp, r3
	float meansqdist = 0.0f;
 8000572:	469a      	mov	sl, r3
 8000574:	003b      	movs	r3, r7
 8000576:	4647      	mov	r7, r8
	for(int16_t j = 0; j<sweeps/2; j++){
 8000578:	2f00      	cmp	r7, #0
 800057a:	d02f      	beq.n	80005dc <get_msd+0xcc>
		if (data[j][i] > halfpex){
 800057c:	9a03      	ldr	r2, [sp, #12]
	for(int16_t j = 0; j<sweeps/2; j++){
 800057e:	2400      	movs	r4, #0
		if (data[j][i] > halfpex){
 8000580:	0052      	lsls	r2, r2, #1
 8000582:	4690      	mov	r8, r2
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 8000584:	9a05      	ldr	r2, [sp, #20]
	for(int16_t j = 0; j<sweeps/2; j++){
 8000586:	2500      	movs	r5, #0
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	435b      	muls	r3, r3
 800058c:	9301      	str	r3, [sp, #4]
	for(int16_t j = 0; j<sweeps/2; j++){
 800058e:	003b      	movs	r3, r7
 8000590:	4647      	mov	r7, r8
 8000592:	4698      	mov	r8, r3
		if (data[j][i] > halfpex){
 8000594:	464a      	mov	r2, r9
 8000596:	00a3      	lsls	r3, r4, #2
 8000598:	589b      	ldr	r3, [r3, r2]
 800059a:	5bd8      	ldrh	r0, [r3, r7]
 800059c:	9b00      	ldr	r3, [sp, #0]
 800059e:	4298      	cmp	r0, r3
 80005a0:	d916      	bls.n	80005d0 <get_msd+0xc0>
			mass += data[j][i];
 80005a2:	f00e fed9 	bl	800f358 <__aeabi_i2f>
 80005a6:	1c01      	adds	r1, r0, #0
 80005a8:	1c06      	adds	r6, r0, #0
 80005aa:	4658      	mov	r0, fp
 80005ac:	f00d fd12 	bl	800dfd4 <__aeabi_fadd>
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 80005b0:	9b02      	ldr	r3, [sp, #8]
			mass += data[j][i];
 80005b2:	4683      	mov	fp, r0
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 80005b4:	1aed      	subs	r5, r5, r3
 80005b6:	436d      	muls	r5, r5
 80005b8:	9b01      	ldr	r3, [sp, #4]
 80005ba:	18e8      	adds	r0, r5, r3
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 80005bc:	f00e ff16 	bl	800f3ec <__aeabi_ui2f>
 80005c0:	1c31      	adds	r1, r6, #0
 80005c2:	f00d ffb3 	bl	800e52c <__aeabi_fmul>
 80005c6:	1c01      	adds	r1, r0, #0
 80005c8:	4650      	mov	r0, sl
 80005ca:	f00d fd03 	bl	800dfd4 <__aeabi_fadd>
 80005ce:	4682      	mov	sl, r0
 80005d0:	3401      	adds	r4, #1
 80005d2:	b224      	sxth	r4, r4
	for(int16_t j = 0; j<sweeps/2; j++){
 80005d4:	0025      	movs	r5, r4
 80005d6:	4544      	cmp	r4, r8
 80005d8:	dbdc      	blt.n	8000594 <get_msd+0x84>
 80005da:	4647      	mov	r7, r8
 80005dc:	9b03      	ldr	r3, [sp, #12]
	for(int16_t i = 0; i<bins; i++){
 80005de:	9904      	ldr	r1, [sp, #16]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	9303      	str	r3, [sp, #12]
 80005e6:	428b      	cmp	r3, r1
 80005e8:	dbc6      	blt.n	8000578 <get_msd+0x68>
	if(mass != 0.0f){
 80005ea:	2100      	movs	r1, #0
 80005ec:	4658      	mov	r0, fp
 80005ee:	f00e fc8f 	bl	800ef10 <__aeabi_fcmpeq>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d104      	bne.n	8000600 <get_msd+0xf0>
		meansqdist /= mass;
 80005f6:	4650      	mov	r0, sl
 80005f8:	4659      	mov	r1, fp
 80005fa:	f00d fe85 	bl	800e308 <__aeabi_fdiv>
 80005fe:	4682      	mov	sl, r0
}
 8000600:	4650      	mov	r0, sl
 8000602:	b009      	add	sp, #36	; 0x24
 8000604:	bc3c      	pop	{r2, r3, r4, r5}
 8000606:	4690      	mov	r8, r2
 8000608:	4699      	mov	r9, r3
 800060a:	46a2      	mov	sl, r4
 800060c:	46ab      	mov	fp, r5
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	float meansqdist = 0.0f;
 8000610:	2300      	movs	r3, #0
 8000612:	469a      	mov	sl, r3
 8000614:	e7f4      	b.n	8000600 <get_msd+0xf0>

08000616 <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 8000616:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000618:	4657      	mov	r7, sl
 800061a:	464e      	mov	r6, r9
 800061c:	46de      	mov	lr, fp
 800061e:	4645      	mov	r5, r8
 8000620:	b5e0      	push	{r5, r6, r7, lr}
 8000622:	040a      	lsls	r2, r1, #16
 8000624:	b085      	sub	sp, #20
 8000626:	4681      	mov	r9, r0
	for(uint16_t i = 0; i<bins; i++){
 8000628:	0e12      	lsrs	r2, r2, #24
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 800062a:	a801      	add	r0, sp, #4
 800062c:	8001      	strh	r1, [r0, #0]
	uint8_t sweeps = data_size.x1;
 800062e:	b2cb      	uxtb	r3, r1
	for(uint16_t i = 0; i<bins; i++){
 8000630:	4692      	mov	sl, r2
 8000632:	2a00      	cmp	r2, #0
 8000634:	d02d      	beq.n	8000692 <max2d+0x7c>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8000636:	085b      	lsrs	r3, r3, #1
 8000638:	4698      	mov	r8, r3
 800063a:	b29d      	uxth	r5, r3
	uint8_t msweep = 0;
 800063c:	2300      	movs	r3, #0
		for(uint16_t j = 0; j<sweeps/2; j++){
 800063e:	2600      	movs	r6, #0
	uint8_t msweep = 0;
 8000640:	469b      	mov	fp, r3
	uint8_t mbin = 0;
 8000642:	469c      	mov	ip, r3
	uint16_t apex = 0;
 8000644:	2100      	movs	r1, #0
		for(uint16_t j = 0; j<sweeps/2; j++){
 8000646:	4643      	mov	r3, r8
 8000648:	2b00      	cmp	r3, #0
 800064a:	d010      	beq.n	800066e <max2d+0x58>
 800064c:	464a      	mov	r2, r9
 800064e:	2300      	movs	r3, #0
 8000650:	0074      	lsls	r4, r6, #1
					mbin = i;
 8000652:	b2f0      	uxtb	r0, r6
				if(data[j][i] > apex){
 8000654:	6817      	ldr	r7, [r2, #0]
 8000656:	5b3f      	ldrh	r7, [r7, r4]
 8000658:	428f      	cmp	r7, r1
 800065a:	d903      	bls.n	8000664 <max2d+0x4e>
					msweep = j;
 800065c:	b2d9      	uxtb	r1, r3
 800065e:	468b      	mov	fp, r1
					mbin = i;
 8000660:	4684      	mov	ip, r0
					msweep = j;
 8000662:	0039      	movs	r1, r7
		for(uint16_t j = 0; j<sweeps/2; j++){
 8000664:	3301      	adds	r3, #1
 8000666:	b29b      	uxth	r3, r3
 8000668:	3204      	adds	r2, #4
 800066a:	429d      	cmp	r5, r3
 800066c:	d8f2      	bhi.n	8000654 <max2d+0x3e>
 800066e:	3601      	adds	r6, #1
	for(uint16_t i = 0; i<bins; i++){
 8000670:	b2b3      	uxth	r3, r6
 8000672:	4553      	cmp	r3, sl
 8000674:	d3e7      	bcc.n	8000646 <max2d+0x30>
	return max_index;
 8000676:	20ff      	movs	r0, #255	; 0xff
 8000678:	465f      	mov	r7, fp
 800067a:	4663      	mov	r3, ip
 800067c:	4007      	ands	r7, r0
 800067e:	4018      	ands	r0, r3
 8000680:	0200      	lsls	r0, r0, #8
 8000682:	4338      	orrs	r0, r7
}
 8000684:	b005      	add	sp, #20
 8000686:	bc3c      	pop	{r2, r3, r4, r5}
 8000688:	4690      	mov	r8, r2
 800068a:	4699      	mov	r9, r3
 800068c:	46a2      	mov	sl, r4
 800068e:	46ab      	mov	fp, r5
 8000690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t msweep = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	469b      	mov	fp, r3
	uint8_t mbin = 0;
 8000696:	469c      	mov	ip, r3
 8000698:	e7ed      	b.n	8000676 <max2d+0x60>

0800069a <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 800069a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069c:	4646      	mov	r6, r8
 800069e:	46d6      	mov	lr, sl
 80006a0:	464f      	mov	r7, r9
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	040e      	lsls	r6, r1, #16
	for(uint16_t j = 0; j<sweeps/2; j++){
 80006a6:	b2c9      	uxtb	r1, r1
 80006a8:	0849      	lsrs	r1, r1, #1
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 80006aa:	b082      	sub	sp, #8
 80006ac:	4682      	mov	sl, r0
 80006ae:	4690      	mov	r8, r2
	uint8_t bins = data_size.x2;
 80006b0:	0e36      	lsrs	r6, r6, #24
	for(uint16_t j = 0; j<sweeps/2; j++){
 80006b2:	b28f      	uxth	r7, r1
 80006b4:	2900      	cmp	r1, #0
 80006b6:	d01e      	beq.n	80006f6 <dobandstop+0x5c>
			for(uint16_t i = 0; i<bins; i++){
 80006b8:	b2b6      	uxth	r6, r6
					data[j][i] = 0;
 80006ba:	1e75      	subs	r5, r6, #1
 80006bc:	b2ad      	uxth	r5, r5
 80006be:	3501      	adds	r5, #1
 80006c0:	006b      	lsls	r3, r5, #1
 80006c2:	4699      	mov	r9, r3
 80006c4:	2400      	movs	r4, #0
		if(mask & (1<<j)){
 80006c6:	2501      	movs	r5, #1
 80006c8:	e003      	b.n	80006d2 <dobandstop+0x38>
 80006ca:	3401      	adds	r4, #1
	for(uint16_t j = 0; j<sweeps/2; j++){
 80006cc:	b2a3      	uxth	r3, r4
 80006ce:	42bb      	cmp	r3, r7
 80006d0:	d211      	bcs.n	80006f6 <dobandstop+0x5c>
		if(mask & (1<<j)){
 80006d2:	002b      	movs	r3, r5
 80006d4:	4642      	mov	r2, r8
 80006d6:	40a3      	lsls	r3, r4
 80006d8:	421a      	tst	r2, r3
 80006da:	d0f6      	beq.n	80006ca <dobandstop+0x30>
			for(uint16_t i = 0; i<bins; i++){
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d0f4      	beq.n	80006ca <dobandstop+0x30>
 80006e0:	4652      	mov	r2, sl
					data[j][i] = 0;
 80006e2:	00a3      	lsls	r3, r4, #2
 80006e4:	58d0      	ldr	r0, [r2, r3]
 80006e6:	2100      	movs	r1, #0
 80006e8:	464a      	mov	r2, r9
 80006ea:	3401      	adds	r4, #1
 80006ec:	f012 fbb6 	bl	8012e5c <memset>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80006f0:	b2a3      	uxth	r3, r4
 80006f2:	42bb      	cmp	r3, r7
 80006f4:	d3ed      	bcc.n	80006d2 <dobandstop+0x38>
}
 80006f6:	b002      	add	sp, #8
 80006f8:	bc1c      	pop	{r2, r3, r4}
 80006fa:	4690      	mov	r8, r2
 80006fc:	4699      	mov	r9, r3
 80006fe:	46a2      	mov	sl, r4
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000702 <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8000702:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000704:	4647      	mov	r7, r8
 8000706:	46ce      	mov	lr, r9
 8000708:	b580      	push	{r7, lr}
 800070a:	b083      	sub	sp, #12
 800070c:	0007      	movs	r7, r0
 800070e:	040b      	lsls	r3, r1, #16
 8000710:	a801      	add	r0, sp, #4
	uint8_t sweeps = data_size.x1;
 8000712:	b2ca      	uxtb	r2, r1
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8000714:	8001      	strh	r1, [r0, #0]
	uint8_t sweeps = data_size.x1;
 8000716:	4690      	mov	r8, r2
	for(uint16_t i = 0; i<bins; i++){
 8000718:	0e1b      	lsrs	r3, r3, #24
 800071a:	d024      	beq.n	8000766 <dcdatarm+0x64>
		for(uint16_t j = 0; j<sweeps; j++){
 800071c:	b292      	uxth	r2, r2
 800071e:	4691      	mov	r9, r2
 8000720:	2400      	movs	r4, #0
 8000722:	1e55      	subs	r5, r2, #1
 8000724:	3b01      	subs	r3, #1
 8000726:	b2ad      	uxth	r5, r5
 8000728:	b29e      	uxth	r6, r3
 800072a:	00ad      	lsls	r5, r5, #2
 800072c:	3601      	adds	r6, #1
 800072e:	197d      	adds	r5, r7, r5
 8000730:	0076      	lsls	r6, r6, #1
 8000732:	3504      	adds	r5, #4
 8000734:	464b      	mov	r3, r9
 8000736:	2b00      	cmp	r3, #0
 8000738:	d012      	beq.n	8000760 <dcdatarm+0x5e>
 800073a:	003b      	movs	r3, r7
		uint32_t accumulator = 0;
 800073c:	2000      	movs	r0, #0
			accumulator += data[j][i];
 800073e:	cb04      	ldmia	r3!, {r2}
 8000740:	5b12      	ldrh	r2, [r2, r4]
 8000742:	1880      	adds	r0, r0, r2
		for(uint16_t j = 0; j<sweeps; j++){
 8000744:	429d      	cmp	r5, r3
 8000746:	d1fa      	bne.n	800073e <dcdatarm+0x3c>
		uint32_t average = accumulator/sweeps;
 8000748:	4641      	mov	r1, r8
 800074a:	f00e fa21 	bl	800eb90 <__udivsi3>
 800074e:	0039      	movs	r1, r7
 8000750:	b280      	uxth	r0, r0
			data[j][i] -= average;
 8000752:	c908      	ldmia	r1!, {r3}
 8000754:	191b      	adds	r3, r3, r4
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	1a12      	subs	r2, r2, r0
 800075a:	801a      	strh	r2, [r3, #0]
		for(uint16_t j = 0; j<sweeps; j++){
 800075c:	428d      	cmp	r5, r1
 800075e:	d1f8      	bne.n	8000752 <dcdatarm+0x50>
 8000760:	3402      	adds	r4, #2
	for(uint16_t i = 0; i<bins; i++){
 8000762:	42a6      	cmp	r6, r4
 8000764:	d1e6      	bne.n	8000734 <dcdatarm+0x32>
}
 8000766:	b003      	add	sp, #12
 8000768:	bc0c      	pop	{r2, r3}
 800076a:	4690      	mov	r8, r2
 800076c:	4699      	mov	r9, r3
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000770 <RegInt_regmap>:
//0xD6 :: Data Eval Mode
//0xD7 :: Focus weight Radius
//0xD8 :: Data zeroing threshold
//0xD9 :: Bandstop velocity filter
uint32_t* RegInt_regmap(uint8_t reg){
	REGADRERR = -1;
 8000770:	2201      	movs	r2, #1
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <RegInt_regmap+0x60>)
 8000774:	4252      	negs	r2, r2
uint32_t* RegInt_regmap(uint8_t reg){
 8000776:	b510      	push	{r4, lr}
 8000778:	0001      	movs	r1, r0
	REGADRERR = -1;
 800077a:	60da      	str	r2, [r3, #12]
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 800077c:	2812      	cmp	r0, #18
 800077e:	d820      	bhi.n	80007c2 <RegInt_regmap+0x52>
		ptr = &GENERAL_REGISTERS[reg];
 8000780:	001a      	movs	r2, r3
 8000782:	0080      	lsls	r0, r0, #2
 8000784:	3210      	adds	r2, #16
 8000786:	1810      	adds	r0, r2, r0
	}
	if (reg == 0xE9){
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8000788:	000a      	movs	r2, r1
 800078a:	3a20      	subs	r2, #32
 800078c:	b2d4      	uxtb	r4, r2
 800078e:	2c22      	cmp	r4, #34	; 0x22
 8000790:	d802      	bhi.n	8000798 <RegInt_regmap+0x28>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8000792:	0090      	lsls	r0, r2, #2
 8000794:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <RegInt_regmap+0x64>)
 8000796:	1880      	adds	r0, r0, r2
	}
	if (0x81 <= reg && reg <= 0x85){
 8000798:	000a      	movs	r2, r1
 800079a:	327f      	adds	r2, #127	; 0x7f
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	2a04      	cmp	r2, #4
 80007a0:	d805      	bhi.n	80007ae <RegInt_regmap+0x3e>
		ptr = &META_REGISTERS[reg - 0x81];
 80007a2:	0008      	movs	r0, r1
 80007a4:	001a      	movs	r2, r3
 80007a6:	3881      	subs	r0, #129	; 0x81
 80007a8:	325c      	adds	r2, #92	; 0x5c
 80007aa:	0080      	lsls	r0, r0, #2
 80007ac:	1810      	adds	r0, r2, r0
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 80007ae:	000a      	movs	r2, r1
 80007b0:	3230      	adds	r2, #48	; 0x30
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	2a09      	cmp	r2, #9
 80007b6:	d803      	bhi.n	80007c0 <RegInt_regmap+0x50>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 80007b8:	39d0      	subs	r1, #208	; 0xd0
 80007ba:	3370      	adds	r3, #112	; 0x70
 80007bc:	0088      	lsls	r0, r1, #2
 80007be:	1818      	adds	r0, r3, r0
	}
	return ptr;
}
 80007c0:	bd10      	pop	{r4, pc}
	uint32_t* ptr = &REGADRERR;
 80007c2:	0018      	movs	r0, r3
 80007c4:	300c      	adds	r0, #12
	if (reg == 0xE9){
 80007c6:	29e9      	cmp	r1, #233	; 0xe9
 80007c8:	d1de      	bne.n	8000788 <RegInt_regmap+0x18>
		ptr = &OUTPUT_BUFFER_LENGTH;
 80007ca:	3804      	subs	r0, #4
 80007cc:	e7dc      	b.n	8000788 <RegInt_regmap+0x18>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	2000008c 	.word	0x2000008c
 80007d4:	20000334 	.word	0x20000334

080007d8 <acc_integration_get_time>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007d8:	4b01      	ldr	r3, [pc, #4]	; (80007e0 <acc_integration_get_time+0x8>)
 80007da:	6818      	ldr	r0, [r3, #0]


uint32_t acc_integration_get_time(void)
{
	return HAL_GetTick();
}
 80007dc:	4770      	bx	lr
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	200003ec 	.word	0x200003ec

080007e4 <pulse_hibernate_pin>:
}


static void pulse_hibernate_pin(uint32_t nbr_pulses)
{
	for (uint32_t i = 0; i < nbr_pulses; i++)
 80007e4:	2100      	movs	r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80007e6:	2210      	movs	r2, #16
{
 80007e8:	b510      	push	{r4, lr}
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <pulse_hibernate_pin+0x24>)
 80007ec:	691c      	ldr	r4, [r3, #16]
 80007ee:	4214      	tst	r4, r2
 80007f0:	d102      	bne.n	80007f8 <pulse_hibernate_pin+0x14>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007f2:	619a      	str	r2, [r3, #24]
 80007f4:	e7fa      	b.n	80007ec <pulse_hibernate_pin+0x8>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80007f8:	691c      	ldr	r4, [r3, #16]
 80007fa:	4214      	tst	r4, r2
 80007fc:	d1fb      	bne.n	80007f6 <pulse_hibernate_pin+0x12>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 80007fe:	3101      	adds	r1, #1
 8000800:	4288      	cmp	r0, r1
 8000802:	d1f3      	bne.n	80007ec <pulse_hibernate_pin+0x8>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
		{
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
		}
	}
}
 8000804:	bd10      	pop	{r4, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	50000400 	.word	0x50000400

0800080c <acc_hal_integration_sensor_hibernate_enter>:


static void acc_hal_integration_sensor_hibernate_enter(acc_sensor_id_t sensor_id)
{
 800080c:	b510      	push	{r4, lr}
	(void)sensor_id;  // Ignore parameter sensor_id

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 800080e:	200a      	movs	r0, #10
 8000810:	f7ff ffe8 	bl	80007e4 <pulse_hibernate_pin>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	4b02      	ldr	r3, [pc, #8]	; (8000820 <acc_hal_integration_sensor_hibernate_enter+0x14>)
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	629a      	str	r2, [r3, #40]	; 0x28

	// Turn off sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
}
 800081c:	bd10      	pop	{r4, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	50000400 	.word	0x50000400

08000824 <acc_hal_integration_get_reference_frequency>:
}
 8000824:	4800      	ldr	r0, [pc, #0]	; (8000828 <acc_hal_integration_get_reference_frequency+0x4>)
 8000826:	4770      	bx	lr
 8000828:	4bb71b00 	.word	0x4bb71b00

0800082c <acc_hal_integration_wait_for_sensor_interrupt>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <acc_hal_integration_wait_for_sensor_interrupt+0x34>)
{
 800082e:	b570      	push	{r4, r5, r6, lr}
 8000830:	2408      	movs	r4, #8
 8000832:	0015      	movs	r5, r2
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <acc_hal_integration_wait_for_sensor_interrupt+0x38>)
 8000836:	6806      	ldr	r6, [r0, #0]
 8000838:	6913      	ldr	r3, [r2, #16]
 800083a:	4223      	tst	r3, r4
 800083c:	d103      	bne.n	8000846 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 800083e:	6803      	ldr	r3, [r0, #0]
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8000840:	1b9b      	subs	r3, r3, r6
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8000842:	428b      	cmp	r3, r1
 8000844:	d303      	bcc.n	800084e <acc_hal_integration_wait_for_sensor_interrupt+0x22>
 8000846:	6928      	ldr	r0, [r5, #16]
 8000848:	0700      	lsls	r0, r0, #28
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 800084a:	0fc0      	lsrs	r0, r0, #31
}
 800084c:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084e:	b672      	cpsid	i
 8000850:	6913      	ldr	r3, [r2, #16]
 8000852:	4223      	tst	r3, r4
 8000854:	d100      	bne.n	8000858 <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
			__WFI();
 8000856:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 8000858:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800085a:	f3bf 8f6f 	isb	sy
 800085e:	e7eb      	b.n	8000838 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
 8000860:	50000400 	.word	0x50000400
 8000864:	200003ec 	.word	0x200003ec

08000868 <data_free>:
	}
	
	return 0;
}

void data_free(void){
 8000868:	b510      	push	{r4, lr}
	free(data);
 800086a:	4c04      	ldr	r4, [pc, #16]	; (800087c <data_free+0x14>)
 800086c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800086e:	f014 ff0f 	bl	8015690 <free>
	data = NULL;
 8000872:	2300      	movs	r3, #0
 8000874:	6323      	str	r3, [r4, #48]	; 0x30
	sweeps = 0;
 8000876:	86a3      	strh	r3, [r4, #52]	; 0x34
	bins = 0;
 8000878:	86e3      	strh	r3, [r4, #54]	; 0x36
}
 800087a:	bd10      	pop	{r4, pc}
 800087c:	2000010c 	.word	0x2000010c

08000880 <acc_base_configuration_downsampling_factor_set>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	0004      	movs	r4, r0
 8000884:	000d      	movs	r5, r1
 8000886:	f005 feaf 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800088a:	2800      	cmp	r0, #0
 800088c:	d001      	beq.n	8000892 <acc_base_configuration_downsampling_factor_set+0x12>
 800088e:	3468      	adds	r4, #104	; 0x68
 8000890:	8025      	strh	r5, [r4, #0]
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <acc_base_configuration_integrator_ramp_up_set>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	0004      	movs	r4, r0
 8000898:	000d      	movs	r5, r1
 800089a:	f005 fea5 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d001      	beq.n	80008a6 <acc_base_configuration_integrator_ramp_up_set+0x12>
 80008a2:	3406      	adds	r4, #6
 80008a4:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <acc_base_configuration_wg_duration_set>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	0004      	movs	r4, r0
 80008ac:	000d      	movs	r5, r1
 80008ae:	f005 fe9b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d001      	beq.n	80008ba <acc_base_configuration_wg_duration_set+0x12>
 80008b6:	3404      	adds	r4, #4
 80008b8:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <acc_base_configuration_integrator_set>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	0004      	movs	r4, r0
 80008c0:	000d      	movs	r5, r1
 80008c2:	f005 fe91 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d001      	beq.n	80008ce <acc_base_configuration_integrator_set+0x12>
 80008ca:	3402      	adds	r4, #2
 80008cc:	87e5      	strh	r5, [r4, #62]	; 0x3e
 80008ce:	bd70      	pop	{r4, r5, r6, pc}

080008d0 <set_configuration_for_profile.lto_priv.622>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	000d      	movs	r5, r1
 80008d4:	f7ff fc7c 	bl	80001d0 <get_sparse_configuration>
 80008d8:	2800      	cmp	r0, #0
 80008da:	d011      	beq.n	8000900 <set_configuration_for_profile.lto_priv.622+0x30>
 80008dc:	301c      	adds	r0, #28
 80008de:	0004      	movs	r4, r0
 80008e0:	1e68      	subs	r0, r5, #1
 80008e2:	2804      	cmp	r0, #4
 80008e4:	d80c      	bhi.n	8000900 <set_configuration_for_profile.lto_priv.622+0x30>
 80008e6:	f00e f93f 	bl	800eb68 <__gnu_thumb1_case_uqi>
 80008ea:	0c03      	.short	0x0c03
 80008ec:	170e      	.short	0x170e
 80008ee:	20          	.byte	0x20
 80008ef:	00          	.byte	0x00
 80008f0:	2100      	movs	r1, #0
 80008f2:	0020      	movs	r0, r4
 80008f4:	f7ff ffd8 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 80008f8:	2100      	movs	r1, #0
 80008fa:	0020      	movs	r0, r4
 80008fc:	f7ff ffde 	bl	80008bc <acc_base_configuration_integrator_set>
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	2107      	movs	r1, #7
 8000904:	e7f5      	b.n	80008f2 <set_configuration_for_profile.lto_priv.622+0x22>
 8000906:	0020      	movs	r0, r4
 8000908:	2109      	movs	r1, #9
 800090a:	f7ff ffcd 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 800090e:	2103      	movs	r1, #3
 8000910:	0020      	movs	r0, r4
 8000912:	f7ff ffd3 	bl	80008bc <acc_base_configuration_integrator_set>
 8000916:	e7f3      	b.n	8000900 <set_configuration_for_profile.lto_priv.622+0x30>
 8000918:	210c      	movs	r1, #12
 800091a:	0020      	movs	r0, r4
 800091c:	f7ff ffc4 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 8000920:	2106      	movs	r1, #6
 8000922:	0020      	movs	r0, r4
 8000924:	f7ff ffca 	bl	80008bc <acc_base_configuration_integrator_set>
 8000928:	e7ea      	b.n	8000900 <set_configuration_for_profile.lto_priv.622+0x30>
 800092a:	2110      	movs	r1, #16
 800092c:	e7f5      	b.n	800091a <set_configuration_for_profile.lto_priv.622+0x4a>

0800092e <set_configuration_for_profile.lto_priv.621>:
 800092e:	b570      	push	{r4, r5, r6, lr}
 8000930:	000e      	movs	r6, r1
 8000932:	f7ff fc87 	bl	8000244 <get_and_validate_envelope_configuration>
 8000936:	1e05      	subs	r5, r0, #0
 8000938:	d018      	beq.n	800096c <set_configuration_for_profile.lto_priv.621+0x3e>
 800093a:	0004      	movs	r4, r0
 800093c:	1e70      	subs	r0, r6, #1
 800093e:	341c      	adds	r4, #28
 8000940:	2804      	cmp	r0, #4
 8000942:	d813      	bhi.n	800096c <set_configuration_for_profile.lto_priv.621+0x3e>
 8000944:	358c      	adds	r5, #140	; 0x8c
 8000946:	f00e f90f 	bl	800eb68 <__gnu_thumb1_case_uqi>
 800094a:	1203      	.short	0x1203
 800094c:	2321      	.short	0x2321
 800094e:	32          	.byte	0x32
 800094f:	00          	.byte	0x00
 8000950:	2100      	movs	r1, #0
 8000952:	0020      	movs	r0, r4
 8000954:	f7ff ffa8 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 8000958:	2100      	movs	r1, #0
 800095a:	0020      	movs	r0, r4
 800095c:	f7ff ffae 	bl	80008bc <acc_base_configuration_integrator_set>
 8000960:	2103      	movs	r1, #3
 8000962:	0020      	movs	r0, r4
 8000964:	f7ff ff96 	bl	8000894 <acc_base_configuration_integrator_ramp_up_set>
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <set_configuration_for_profile.lto_priv.621+0x86>)
 800096a:	602b      	str	r3, [r5, #0]
 800096c:	bd70      	pop	{r4, r5, r6, pc}
 800096e:	2107      	movs	r1, #7
 8000970:	0020      	movs	r0, r4
 8000972:	f7ff ff99 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 8000976:	2106      	movs	r1, #6
 8000978:	0020      	movs	r0, r4
 800097a:	f7ff ff9f 	bl	80008bc <acc_base_configuration_integrator_set>
 800097e:	2109      	movs	r1, #9
 8000980:	0020      	movs	r0, r4
 8000982:	f7ff ff87 	bl	8000894 <acc_base_configuration_integrator_ramp_up_set>
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <set_configuration_for_profile.lto_priv.621+0x8a>)
 8000988:	602b      	str	r3, [r5, #0]
 800098a:	e7ef      	b.n	800096c <set_configuration_for_profile.lto_priv.621+0x3e>
 800098c:	2109      	movs	r1, #9
 800098e:	e7ef      	b.n	8000970 <set_configuration_for_profile.lto_priv.621+0x42>
 8000990:	210c      	movs	r1, #12
 8000992:	0020      	movs	r0, r4
 8000994:	f7ff ff88 	bl	80008a8 <acc_base_configuration_wg_duration_set>
 8000998:	2106      	movs	r1, #6
 800099a:	0020      	movs	r0, r4
 800099c:	f7ff ff8e 	bl	80008bc <acc_base_configuration_integrator_set>
 80009a0:	2101      	movs	r1, #1
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff ff76 	bl	8000894 <acc_base_configuration_integrator_ramp_up_set>
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <set_configuration_for_profile.lto_priv.621+0x8a>)
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	e7de      	b.n	800096c <set_configuration_for_profile.lto_priv.621+0x3e>
 80009ae:	2110      	movs	r1, #16
 80009b0:	e7ef      	b.n	8000992 <set_configuration_for_profile.lto_priv.621+0x64>
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	3c8461fa 	.word	0x3c8461fa
 80009b8:	3b843809 	.word	0x3b843809

080009bc <acc_base_configuration_repetition_mode_on_demand_set>:
 80009bc:	b510      	push	{r4, lr}
 80009be:	0004      	movs	r4, r0
 80009c0:	f005 fe12 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d001      	beq.n	80009cc <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 80009c8:	2301      	movs	r3, #1
 80009ca:	7123      	strb	r3, [r4, #4]
 80009cc:	bd10      	pop	{r4, pc}

080009ce <set_maximize_signal_attenuation>:
 80009ce:	b570      	push	{r4, r5, r6, lr}
 80009d0:	0005      	movs	r5, r0
 80009d2:	000e      	movs	r6, r1
 80009d4:	f7ff fbe4 	bl	80001a0 <acc_service_get_base_configuration>
 80009d8:	1e04      	subs	r4, r0, #0
 80009da:	d010      	beq.n	80009fe <set_maximize_signal_attenuation+0x30>
 80009dc:	f005 fe04 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d002      	beq.n	80009ea <set_maximize_signal_attenuation+0x1c>
 80009e4:	0023      	movs	r3, r4
 80009e6:	334a      	adds	r3, #74	; 0x4a
 80009e8:	701e      	strb	r6, [r3, #0]
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d008      	beq.n	8000a00 <set_maximize_signal_attenuation+0x32>
 80009ee:	210f      	movs	r1, #15
 80009f0:	0020      	movs	r0, r4
 80009f2:	f7ff ff63 	bl	80008bc <acc_base_configuration_integrator_set>
 80009f6:	2101      	movs	r1, #1
 80009f8:	0020      	movs	r0, r4
 80009fa:	f7ff ff4b 	bl	8000894 <acc_base_configuration_integrator_ramp_up_set>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	68ab      	ldr	r3, [r5, #8]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0fb      	beq.n	80009fe <set_maximize_signal_attenuation+0x30>
 8000a06:	7969      	ldrb	r1, [r5, #5]
 8000a08:	0028      	movs	r0, r5
 8000a0a:	4798      	blx	r3
 8000a0c:	e7f7      	b.n	80009fe <set_maximize_signal_attenuation+0x30>

08000a0e <acc_service_maximize_signal_attenuation_set>:
 8000a0e:	b510      	push	{r4, lr}
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d003      	beq.n	8000a1c <acc_service_maximize_signal_attenuation_set+0xe>
 8000a14:	7301      	strb	r1, [r0, #12]
 8000a16:	f7ff ffda 	bl	80009ce <set_maximize_signal_attenuation>
 8000a1a:	bd10      	pop	{r4, pc}
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <acc_service_maximize_signal_attenuation_set+0x1e>)
 8000a1e:	3330      	adds	r3, #48	; 0x30
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f9      	beq.n	8000a1a <acc_service_maximize_signal_attenuation_set+0xc>
 8000a26:	f7ff fb6d 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 8000a2a:	e7f6      	b.n	8000a1a <acc_service_maximize_signal_attenuation_set+0xc>
 8000a2c:	200003f0 	.word	0x200003f0

08000a30 <acc_service_profile_set>:
 8000a30:	b510      	push	{r4, lr}
 8000a32:	1e04      	subs	r4, r0, #0
 8000a34:	d00c      	beq.n	8000a50 <acc_service_profile_set+0x20>
 8000a36:	6883      	ldr	r3, [r0, #8]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d009      	beq.n	8000a50 <acc_service_profile_set+0x20>
 8000a3c:	7141      	strb	r1, [r0, #5]
 8000a3e:	4798      	blx	r3
 8000a40:	7b23      	ldrb	r3, [r4, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <acc_service_profile_set+0x1e>
 8000a46:	2101      	movs	r1, #1
 8000a48:	0020      	movs	r0, r4
 8000a4a:	f7ff ffc0 	bl	80009ce <set_maximize_signal_attenuation>
 8000a4e:	bd10      	pop	{r4, pc}
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <acc_service_profile_set+0x30>)
 8000a52:	3330      	adds	r3, #48	; 0x30
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d0f9      	beq.n	8000a4e <acc_service_profile_set+0x1e>
 8000a5a:	f7ff fb53 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 8000a5e:	e7f6      	b.n	8000a4e <acc_service_profile_set+0x1e>
 8000a60:	200003f0 	.word	0x200003f0

08000a64 <acc_service_receiver_gain_set>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	1c0d      	adds	r5, r1, #0
 8000a68:	f7ff fb9a 	bl	80001a0 <acc_service_get_base_configuration>
 8000a6c:	0004      	movs	r4, r0
 8000a6e:	f005 fdbb 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d00e      	beq.n	8000a94 <acc_service_receiver_gain_set+0x30>
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <acc_service_receiver_gain_set+0x34>)
 8000a78:	1c28      	adds	r0, r5, #0
 8000a7a:	f00d fd57 	bl	800e52c <__aeabi_fmul>
 8000a7e:	1c01      	adds	r1, r0, #0
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <acc_service_receiver_gain_set+0x34>)
 8000a82:	f00d fe85 	bl	800e790 <__aeabi_fsub>
 8000a86:	21fc      	movs	r1, #252	; 0xfc
 8000a88:	0589      	lsls	r1, r1, #22
 8000a8a:	f00d faa3 	bl	800dfd4 <__aeabi_fadd>
 8000a8e:	f00e fc43 	bl	800f318 <__aeabi_f2iz>
 8000a92:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	41b00000 	.word	0x41b00000

08000a9c <acc_service_send_data>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	9d04      	ldr	r5, [sp, #16]
 8000aa0:	001e      	movs	r6, r3
 8000aa2:	782b      	ldrb	r3, [r5, #0]
 8000aa4:	6944      	ldr	r4, [r0, #20]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10a      	bne.n	8000ac0 <acc_service_send_data+0x24>
 8000aaa:	7ea3      	ldrb	r3, [r4, #26]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d011      	beq.n	8000ad4 <acc_service_send_data+0x38>
 8000ab0:	68e3      	ldr	r3, [r4, #12]
 8000ab2:	6860      	ldr	r0, [r4, #4]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d900      	bls.n	8000aba <acc_service_send_data+0x1e>
 8000ab8:	0013      	movs	r3, r2
 8000aba:	001a      	movs	r2, r3
 8000abc:	f014 fdf2 	bl	80156a4 <memcpy>
 8000ac0:	782b      	ldrb	r3, [r5, #0]
 8000ac2:	6920      	ldr	r0, [r4, #16]
 8000ac4:	7663      	strb	r3, [r4, #25]
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d003      	beq.n	8000ad2 <acc_service_send_data+0x36>
 8000aca:	6962      	ldr	r2, [r4, #20]
 8000acc:	0031      	movs	r1, r6
 8000ace:	f014 fde9 	bl	80156a4 <memcpy>
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	68a3      	ldr	r3, [r4, #8]
 8000ad6:	6019      	str	r1, [r3, #0]
 8000ad8:	e7f2      	b.n	8000ac0 <acc_service_send_data+0x24>

08000ada <sparse_send_data>:
 8000ada:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000adc:	0005      	movs	r5, r0
 8000ade:	0010      	movs	r0, r2
 8000ae0:	798a      	ldrb	r2, [r1, #6]
 8000ae2:	790e      	ldrb	r6, [r1, #4]
 8000ae4:	794c      	ldrb	r4, [r1, #5]
 8000ae6:	ab03      	add	r3, sp, #12
 8000ae8:	709a      	strb	r2, [r3, #2]
 8000aea:	aa02      	add	r2, sp, #8
 8000aec:	705e      	strb	r6, [r3, #1]
 8000aee:	7014      	strb	r4, [r2, #0]
 8000af0:	701c      	strb	r4, [r3, #0]
 8000af2:	9200      	str	r2, [sp, #0]
 8000af4:	694a      	ldr	r2, [r1, #20]
 8000af6:	0029      	movs	r1, r5
 8000af8:	f7ff ffd0 	bl	8000a9c <acc_service_send_data>
 8000afc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08000afe <envelope_send_data>:
 8000afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b00:	0005      	movs	r5, r0
 8000b02:	b085      	sub	sp, #20
 8000b04:	0010      	movs	r0, r2
 8000b06:	79ca      	ldrb	r2, [r1, #7]
 8000b08:	794c      	ldrb	r4, [r1, #5]
 8000b0a:	ab03      	add	r3, sp, #12
 8000b0c:	790e      	ldrb	r6, [r1, #4]
 8000b0e:	798f      	ldrb	r7, [r1, #6]
 8000b10:	70da      	strb	r2, [r3, #3]
 8000b12:	aa02      	add	r2, sp, #8
 8000b14:	7014      	strb	r4, [r2, #0]
 8000b16:	701f      	strb	r7, [r3, #0]
 8000b18:	705c      	strb	r4, [r3, #1]
 8000b1a:	709e      	strb	r6, [r3, #2]
 8000b1c:	9200      	str	r2, [sp, #0]
 8000b1e:	694a      	ldr	r2, [r1, #20]
 8000b20:	0029      	movs	r1, r5
 8000b22:	f7ff ffbb 	bl	8000a9c <acc_service_send_data>
 8000b26:	b005      	add	sp, #20
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b2a <acc_service_sparse_get_next_by_reference.part.9>:
 8000b2a:	b530      	push	{r4, r5, lr}
 8000b2c:	b089      	sub	sp, #36	; 0x24
 8000b2e:	680d      	ldr	r5, [r1, #0]
 8000b30:	9103      	str	r1, [sp, #12]
 8000b32:	2100      	movs	r1, #0
 8000b34:	2403      	movs	r4, #3
 8000b36:	ab01      	add	r3, sp, #4
 8000b38:	9104      	str	r1, [sp, #16]
 8000b3a:	7619      	strb	r1, [r3, #24]
 8000b3c:	7659      	strb	r1, [r3, #25]
 8000b3e:	7699      	strb	r1, [r3, #26]
 8000b40:	0019      	movs	r1, r3
 8000b42:	701c      	strb	r4, [r3, #0]
 8000b44:	9502      	str	r5, [sp, #8]
 8000b46:	9205      	str	r2, [sp, #20]
 8000b48:	9406      	str	r4, [sp, #24]
 8000b4a:	f009 ffdd 	bl	800ab08 <acc_service_get_next.constprop.80>
 8000b4e:	b009      	add	sp, #36	; 0x24
 8000b50:	bd30      	pop	{r4, r5, pc}

08000b52 <destroy_handle>:
 8000b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b54:	46c6      	mov	lr, r8
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <destroy_handle+0x5e>)
 8000b58:	4e16      	ldr	r6, [pc, #88]	; (8000bb4 <destroy_handle+0x62>)
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000b5e:	0033      	movs	r3, r6
 8000b60:	b500      	push	{lr}
 8000b62:	3330      	adds	r3, #48	; 0x30
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	0005      	movs	r5, r0
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d905      	bls.n	8000b78 <destroy_handle+0x26>
 8000b6c:	6843      	ldr	r3, [r0, #4]
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <destroy_handle+0x66>)
 8000b70:	4912      	ldr	r1, [pc, #72]	; (8000bbc <destroy_handle+0x6a>)
 8000b72:	2004      	movs	r0, #4
 8000b74:	6b77      	ldr	r7, [r6, #52]	; 0x34
 8000b76:	47b8      	blx	r7
 8000b78:	2300      	movs	r3, #0
 8000b7a:	2c00      	cmp	r4, #0
 8000b7c:	d00d      	beq.n	8000b9a <destroy_handle+0x48>
 8000b7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000b80:	42ac      	cmp	r4, r5
 8000b82:	d107      	bne.n	8000b94 <destroy_handle+0x42>
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d111      	bne.n	8000bac <destroy_handle+0x5a>
 8000b88:	4643      	mov	r3, r8
 8000b8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b8c:	0020      	movs	r0, r4
 8000b8e:	f005 fa27 	bl	8005fe0 <acc_rss_integration_mem_free>
 8000b92:	e008      	b.n	8000ba6 <destroy_handle+0x54>
 8000b94:	0023      	movs	r3, r4
 8000b96:	0014      	movs	r4, r2
 8000b98:	e7ef      	b.n	8000b7a <destroy_handle+0x28>
 8000b9a:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8000b9c:	686b      	ldr	r3, [r5, #4]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <destroy_handle+0x6e>)
 8000ba0:	4906      	ldr	r1, [pc, #24]	; (8000bbc <destroy_handle+0x6a>)
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	47b0      	blx	r6
 8000ba6:	bc04      	pop	{r2}
 8000ba8:	4690      	mov	r8, r2
 8000baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bac:	655a      	str	r2, [r3, #84]	; 0x54
 8000bae:	e7ed      	b.n	8000b8c <destroy_handle+0x3a>
 8000bb0:	2000010c 	.word	0x2000010c
 8000bb4:	200003f0 	.word	0x200003f0
 8000bb8:	0801baf6 	.word	0x0801baf6
 8000bbc:	0801bb17 	.word	0x0801bb17
 8000bc0:	0801bb27 	.word	0x0801bb27

08000bc4 <acc_service_sparse_configuration_create>:
 8000bc4:	b570      	push	{r4, r5, r6, lr}
 8000bc6:	2260      	movs	r2, #96	; 0x60
 8000bc8:	4972      	ldr	r1, [pc, #456]	; (8000d94 <acc_service_sparse_configuration_create+0x1d0>)
 8000bca:	208c      	movs	r0, #140	; 0x8c
 8000bcc:	f00a f80e 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000bd0:	1e04      	subs	r4, r0, #0
 8000bd2:	d100      	bne.n	8000bd6 <acc_service_sparse_configuration_create+0x12>
 8000bd4:	e0db      	b.n	8000d8e <acc_service_sparse_configuration_create+0x1ca>
 8000bd6:	4b70      	ldr	r3, [pc, #448]	; (8000d98 <acc_service_sparse_configuration_create+0x1d4>)
 8000bd8:	0005      	movs	r5, r0
 8000bda:	6003      	str	r3, [r0, #0]
 8000bdc:	2303      	movs	r3, #3
 8000bde:	7103      	strb	r3, [r0, #4]
 8000be0:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <acc_service_sparse_configuration_create+0x1d8>)
 8000be2:	351c      	adds	r5, #28
 8000be4:	6083      	str	r3, [r0, #8]
 8000be6:	4b6e      	ldr	r3, [pc, #440]	; (8000da0 <acc_service_sparse_configuration_create+0x1dc>)
 8000be8:	6105      	str	r5, [r0, #16]
 8000bea:	6143      	str	r3, [r0, #20]
 8000bec:	2358      	movs	r3, #88	; 0x58
 8000bee:	2102      	movs	r1, #2
 8000bf0:	8303      	strh	r3, [r0, #24]
 8000bf2:	f7ff ff1d 	bl	8000a30 <acc_service_profile_set>
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f7ff ff08 	bl	8000a0e <acc_service_maximize_signal_attenuation_set>
 8000bfe:	0028      	movs	r0, r5
 8000c00:	f005 fcf2 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d001      	beq.n	8000c0c <acc_service_sparse_configuration_create+0x48>
 8000c08:	4b66      	ldr	r3, [pc, #408]	; (8000da4 <acc_service_sparse_configuration_create+0x1e0>)
 8000c0a:	6423      	str	r3, [r4, #64]	; 0x40
 8000c0c:	0028      	movs	r0, r5
 8000c0e:	f005 fceb 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	d001      	beq.n	8000c1a <acc_service_sparse_configuration_create+0x56>
 8000c16:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <acc_service_sparse_configuration_create+0x1e4>)
 8000c18:	6463      	str	r3, [r4, #68]	; 0x44
 8000c1a:	0028      	movs	r0, r5
 8000c1c:	f005 fce4 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d003      	beq.n	8000c2c <acc_service_sparse_configuration_create+0x68>
 8000c24:	0023      	movs	r3, r4
 8000c26:	2206      	movs	r2, #6
 8000c28:	334e      	adds	r3, #78	; 0x4e
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	0028      	movs	r0, r5
 8000c2e:	f005 fcdb 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d001      	beq.n	8000c3a <acc_service_sparse_configuration_create+0x76>
 8000c36:	2301      	movs	r3, #1
 8000c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	f7ff febe 	bl	80009bc <acc_base_configuration_repetition_mode_on_demand_set>
 8000c40:	0028      	movs	r0, r5
 8000c42:	f005 fcd1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	d001      	beq.n	8000c4e <acc_service_sparse_configuration_create+0x8a>
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	6563      	str	r3, [r4, #84]	; 0x54
 8000c4e:	0028      	movs	r0, r5
 8000c50:	f005 fcca 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d003      	beq.n	8000c60 <acc_service_sparse_configuration_create+0x9c>
 8000c58:	0023      	movs	r3, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	3348      	adds	r3, #72	; 0x48
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	0028      	movs	r0, r5
 8000c62:	f005 fcc1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d003      	beq.n	8000c72 <acc_service_sparse_configuration_create+0xae>
 8000c6a:	0023      	movs	r3, r4
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	337c      	adds	r3, #124	; 0x7c
 8000c70:	801a      	strh	r2, [r3, #0]
 8000c72:	0028      	movs	r0, r5
 8000c74:	f005 fcb8 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	d002      	beq.n	8000c82 <acc_service_sparse_configuration_create+0xbe>
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	1d23      	adds	r3, r4, #4
 8000c80:	67da      	str	r2, [r3, #124]	; 0x7c
 8000c82:	0028      	movs	r0, r5
 8000c84:	f005 fcb0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d003      	beq.n	8000c94 <acc_service_sparse_configuration_create+0xd0>
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	3362      	adds	r3, #98	; 0x62
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	0028      	movs	r0, r5
 8000c96:	f005 fca7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d003      	beq.n	8000ca6 <acc_service_sparse_configuration_create+0xe2>
 8000c9e:	0023      	movs	r3, r4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	3363      	adds	r3, #99	; 0x63
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	0028      	movs	r0, r5
 8000ca8:	f005 fc9e 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000cac:	2800      	cmp	r0, #0
 8000cae:	d003      	beq.n	8000cb8 <acc_service_sparse_configuration_create+0xf4>
 8000cb0:	0023      	movs	r3, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	3364      	adds	r3, #100	; 0x64
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	0028      	movs	r0, r5
 8000cba:	f005 fc95 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000cbe:	2800      	cmp	r0, #0
 8000cc0:	d007      	beq.n	8000cd2 <acc_service_sparse_configuration_create+0x10e>
 8000cc2:	0023      	movs	r3, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	336b      	adds	r3, #107	; 0x6b
 8000cc8:	705a      	strb	r2, [r3, #1]
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	3240      	adds	r2, #64	; 0x40
 8000cd0:	805a      	strh	r2, [r3, #2]
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	f005 fc88 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d003      	beq.n	8000ce4 <acc_service_sparse_configuration_create+0x120>
 8000cdc:	0023      	movs	r3, r4
 8000cde:	22ff      	movs	r2, #255	; 0xff
 8000ce0:	3372      	adds	r3, #114	; 0x72
 8000ce2:	801a      	strh	r2, [r3, #0]
 8000ce4:	0028      	movs	r0, r5
 8000ce6:	f005 fc7f 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d003      	beq.n	8000cf6 <acc_service_sparse_configuration_create+0x132>
 8000cee:	0023      	movs	r3, r4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	3374      	adds	r3, #116	; 0x74
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	f005 fc76 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d004      	beq.n	8000d0a <acc_service_sparse_configuration_create+0x146>
 8000d00:	0023      	movs	r3, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	3376      	adds	r3, #118	; 0x76
 8000d06:	701a      	strb	r2, [r3, #0]
 8000d08:	67a2      	str	r2, [r4, #120]	; 0x78
 8000d0a:	0028      	movs	r0, r5
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	f7ff fdb7 	bl	8000880 <acc_base_configuration_downsampling_factor_set>
 8000d12:	0028      	movs	r0, r5
 8000d14:	f005 fc68 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d003      	beq.n	8000d24 <acc_service_sparse_configuration_create+0x160>
 8000d1c:	0023      	movs	r3, r4
 8000d1e:	2201      	movs	r2, #1
 8000d20:	3386      	adds	r3, #134	; 0x86
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	0028      	movs	r0, r5
 8000d26:	f005 fc5f 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d2a:	2800      	cmp	r0, #0
 8000d2c:	d003      	beq.n	8000d36 <acc_service_sparse_configuration_create+0x172>
 8000d2e:	0023      	movs	r3, r4
 8000d30:	220b      	movs	r2, #11
 8000d32:	335a      	adds	r3, #90	; 0x5a
 8000d34:	801a      	strh	r2, [r3, #0]
 8000d36:	0028      	movs	r0, r5
 8000d38:	f005 fc56 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d003      	beq.n	8000d48 <acc_service_sparse_configuration_create+0x184>
 8000d40:	0023      	movs	r3, r4
 8000d42:	220a      	movs	r2, #10
 8000d44:	3358      	adds	r3, #88	; 0x58
 8000d46:	801a      	strh	r2, [r3, #0]
 8000d48:	0028      	movs	r0, r5
 8000d4a:	f005 fc4d 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	d003      	beq.n	8000d5a <acc_service_sparse_configuration_create+0x196>
 8000d52:	0023      	movs	r3, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	3365      	adds	r3, #101	; 0x65
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	0028      	movs	r0, r5
 8000d5c:	f005 fc44 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d003      	beq.n	8000d6c <acc_service_sparse_configuration_create+0x1a8>
 8000d64:	0023      	movs	r3, r4
 8000d66:	2201      	movs	r2, #1
 8000d68:	336a      	adds	r3, #106	; 0x6a
 8000d6a:	701a      	strb	r2, [r3, #0]
 8000d6c:	0028      	movs	r0, r5
 8000d6e:	f005 fc3b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d72:	2800      	cmp	r0, #0
 8000d74:	d004      	beq.n	8000d80 <acc_service_sparse_configuration_create+0x1bc>
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	0023      	movs	r3, r4
 8000d7a:	0152      	lsls	r2, r2, #5
 8000d7c:	3370      	adds	r3, #112	; 0x70
 8000d7e:	801a      	strh	r2, [r3, #0]
 8000d80:	0028      	movs	r0, r5
 8000d82:	f005 fc31 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d001      	beq.n	8000d8e <acc_service_sparse_configuration_create+0x1ca>
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <acc_service_sparse_configuration_create+0x1e8>)
 8000d8c:	61e3      	str	r3, [r4, #28]
 8000d8e:	0020      	movs	r0, r4
 8000d90:	bd70      	pop	{r4, r5, r6, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	0801bb5b 	.word	0x0801bb5b
 8000d98:	acc09dd7 	.word	0xacc09dd7
 8000d9c:	080008d1 	.word	0x080008d1
 8000da0:	08000ea9 	.word	0x08000ea9
 8000da4:	3e4ccccd 	.word	0x3e4ccccd
 8000da8:	3e99999a 	.word	0x3e99999a
 8000dac:	08005643 	.word	0x08005643

08000db0 <acc_service_create>:
 8000db0:	2338      	movs	r3, #56	; 0x38
 8000db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4698      	mov	r8, r3
 8000db8:	4f32      	ldr	r7, [pc, #200]	; (8000e84 <acc_service_create+0xd4>)
 8000dba:	b500      	push	{lr}
 8000dbc:	44b8      	add	r8, r7
 8000dbe:	4643      	mov	r3, r8
 8000dc0:	781c      	ldrb	r4, [r3, #0]
 8000dc2:	0006      	movs	r6, r0
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d04e      	beq.n	8000e66 <acc_service_create+0xb6>
 8000dc8:	f7ff f9aa 	bl	8000120 <acc_service_configuration_valid>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d101      	bne.n	8000dd4 <acc_service_create+0x24>
 8000dd0:	2400      	movs	r4, #0
 8000dd2:	e00b      	b.n	8000dec <acc_service_create+0x3c>
 8000dd4:	6933      	ldr	r3, [r6, #16]
 8000dd6:	68dd      	ldr	r5, [r3, #12]
 8000dd8:	2d2a      	cmp	r5, #42	; 0x2a
 8000dda:	d90b      	bls.n	8000df4 <acc_service_create+0x44>
 8000ddc:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <acc_service_create+0xd8>)
 8000dde:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <acc_service_create+0xdc>)
 8000de0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000de2:	492b      	ldr	r1, [pc, #172]	; (8000e90 <acc_service_create+0xe0>)
 8000de4:	232a      	movs	r3, #42	; 0x2a
 8000de6:	2000      	movs	r0, #0
 8000de8:	47a0      	blx	r4
 8000dea:	2400      	movs	r4, #0
 8000dec:	0020      	movs	r0, r4
 8000dee:	bc04      	pop	{r2}
 8000df0:	4690      	mov	r8, r2
 8000df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df4:	4643      	mov	r3, r8
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <acc_service_create+0x52>
 8000dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d129      	bne.n	8000e56 <acc_service_create+0xa6>
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <acc_service_create+0xd8>)
 8000e04:	8b34      	ldrh	r4, [r6, #24]
 8000e06:	001a      	movs	r2, r3
 8000e08:	3230      	adds	r2, #48	; 0x30
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	2a03      	cmp	r2, #3
 8000e0e:	d906      	bls.n	8000e1e <acc_service_create+0x6e>
 8000e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e12:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <acc_service_create+0xe4>)
 8000e14:	4698      	mov	r8, r3
 8000e16:	491e      	ldr	r1, [pc, #120]	; (8000e90 <acc_service_create+0xe0>)
 8000e18:	002b      	movs	r3, r5
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	47c0      	blx	r8
 8000e1e:	0020      	movs	r0, r4
 8000e20:	22bd      	movs	r2, #189	; 0xbd
 8000e22:	491d      	ldr	r1, [pc, #116]	; (8000e98 <acc_service_create+0xe8>)
 8000e24:	f009 fee2 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000e28:	1e04      	subs	r4, r0, #0
 8000e2a:	d0d1      	beq.n	8000dd0 <acc_service_create+0x20>
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <acc_service_create+0xec>)
 8000e2e:	6045      	str	r5, [r0, #4]
 8000e30:	6003      	str	r3, [r0, #0]
 8000e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e34:	0031      	movs	r1, r6
 8000e36:	6543      	str	r3, [r0, #84]	; 0x54
 8000e38:	6973      	ldr	r3, [r6, #20]
 8000e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e3c:	4798      	blx	r3
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d10e      	bne.n	8000e60 <acc_service_create+0xb0>
 8000e42:	68e3      	ldr	r3, [r4, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <acc_service_create+0x9c>
 8000e48:	0020      	movs	r0, r4
 8000e4a:	4798      	blx	r3
 8000e4c:	0020      	movs	r0, r4
 8000e4e:	f7ff fe80 	bl	8000b52 <destroy_handle>
 8000e52:	2400      	movs	r4, #0
 8000e54:	e7ca      	b.n	8000dec <acc_service_create+0x3c>
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4295      	cmp	r5, r2
 8000e5a:	d00b      	beq.n	8000e74 <acc_service_create+0xc4>
 8000e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5e:	e7ce      	b.n	8000dfe <acc_service_create+0x4e>
 8000e60:	2301      	movs	r3, #1
 8000e62:	7263      	strb	r3, [r4, #9]
 8000e64:	e7c2      	b.n	8000dec <acc_service_create+0x3c>
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <acc_service_create+0xd8>)
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <acc_service_create+0xf0>)
 8000e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6c:	4908      	ldr	r1, [pc, #32]	; (8000e90 <acc_service_create+0xe0>)
 8000e6e:	0020      	movs	r0, r4
 8000e70:	4798      	blx	r3
 8000e72:	e7bb      	b.n	8000dec <acc_service_create+0x3c>
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <acc_service_create+0xd8>)
 8000e76:	4a0b      	ldr	r2, [pc, #44]	; (8000ea4 <acc_service_create+0xf4>)
 8000e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7a:	4905      	ldr	r1, [pc, #20]	; (8000e90 <acc_service_create+0xe0>)
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	4798      	blx	r3
 8000e80:	e7a6      	b.n	8000dd0 <acc_service_create+0x20>
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	2000010c 	.word	0x2000010c
 8000e88:	200003f0 	.word	0x200003f0
 8000e8c:	0801bb7c 	.word	0x0801bb7c
 8000e90:	0801bb17 	.word	0x0801bb17
 8000e94:	0801bb95 	.word	0x0801bb95
 8000e98:	0801bbb4 	.word	0x0801bbb4
 8000e9c:	acc09ee8 	.word	0xacc09ee8
 8000ea0:	0801bbd6 	.word	0x0801bbd6
 8000ea4:	0801bbe8 	.word	0x0801bbe8

08000ea8 <sparse_create_service>:
 8000ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eaa:	46de      	mov	lr, fp
 8000eac:	4645      	mov	r5, r8
 8000eae:	4657      	mov	r7, sl
 8000eb0:	464e      	mov	r6, r9
 8000eb2:	b5e0      	push	{r5, r6, r7, lr}
 8000eb4:	b0a5      	sub	sp, #148	; 0x94
 8000eb6:	4680      	mov	r8, r0
 8000eb8:	228c      	movs	r2, #140	; 0x8c
 8000eba:	a801      	add	r0, sp, #4
 8000ebc:	000c      	movs	r4, r1
 8000ebe:	f014 fbf1 	bl	80156a4 <memcpy>
 8000ec2:	a801      	add	r0, sp, #4
 8000ec4:	f7ff f94a 	bl	800015c <acc_service_configuration_check>
 8000ec8:	2800      	cmp	r0, #0
 8000eca:	d101      	bne.n	8000ed0 <sparse_create_service+0x28>
 8000ecc:	2000      	movs	r0, #0
 8000ece:	e014      	b.n	8000efa <sparse_create_service+0x52>
 8000ed0:	a808      	add	r0, sp, #32
 8000ed2:	f005 fb89 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d0f8      	beq.n	8000ecc <sparse_create_service+0x24>
 8000eda:	a808      	add	r0, sp, #32
 8000edc:	f005 fb04 	bl	80064e8 <acc_base_configuration_check.part.6>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	d0f3      	beq.n	8000ecc <sparse_create_service+0x24>
 8000ee4:	ab22      	add	r3, sp, #136	; 0x88
 8000ee6:	881d      	ldrh	r5, [r3, #0]
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d10d      	bne.n	8000f08 <sparse_create_service+0x60>
 8000eec:	4b73      	ldr	r3, [pc, #460]	; (80010bc <sparse_create_service+0x214>)
 8000eee:	0028      	movs	r0, r5
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef2:	4a73      	ldr	r2, [pc, #460]	; (80010c0 <sparse_create_service+0x218>)
 8000ef4:	4973      	ldr	r1, [pc, #460]	; (80010c4 <sparse_create_service+0x21c>)
 8000ef6:	4798      	blx	r3
 8000ef8:	0028      	movs	r0, r5
 8000efa:	b025      	add	sp, #148	; 0x94
 8000efc:	bc3c      	pop	{r2, r3, r4, r5}
 8000efe:	4690      	mov	r8, r2
 8000f00:	4699      	mov	r9, r3
 8000f02:	46a2      	mov	sl, r4
 8000f04:	46ab      	mov	fp, r5
 8000f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f08:	238a      	movs	r3, #138	; 0x8a
 8000f0a:	446b      	add	r3, sp
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10a      	bne.n	8000f28 <sparse_create_service+0x80>
 8000f12:	ab20      	add	r3, sp, #128	; 0x80
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	2b40      	cmp	r3, #64	; 0x40
 8000f18:	d906      	bls.n	8000f28 <sparse_create_service+0x80>
 8000f1a:	4b68      	ldr	r3, [pc, #416]	; (80010bc <sparse_create_service+0x214>)
 8000f1c:	4a6a      	ldr	r2, [pc, #424]	; (80010c8 <sparse_create_service+0x220>)
 8000f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f20:	4968      	ldr	r1, [pc, #416]	; (80010c4 <sparse_create_service+0x21c>)
 8000f22:	2000      	movs	r0, #0
 8000f24:	4798      	blx	r3
 8000f26:	e7d1      	b.n	8000ecc <sparse_create_service+0x24>
 8000f28:	4642      	mov	r2, r8
 8000f2a:	7923      	ldrb	r3, [r4, #4]
 8000f2c:	2010      	movs	r0, #16
 8000f2e:	7213      	strb	r3, [r2, #8]
 8000f30:	4b66      	ldr	r3, [pc, #408]	; (80010cc <sparse_create_service+0x224>)
 8000f32:	22ec      	movs	r2, #236	; 0xec
 8000f34:	0019      	movs	r1, r3
 8000f36:	469b      	mov	fp, r3
 8000f38:	f009 fe58 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000f3c:	0005      	movs	r5, r0
 8000f3e:	2090      	movs	r0, #144	; 0x90
 8000f40:	22ed      	movs	r2, #237	; 0xed
 8000f42:	4659      	mov	r1, fp
 8000f44:	0040      	lsls	r0, r0, #1
 8000f46:	f009 fe51 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000f4a:	0004      	movs	r4, r0
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	d001      	beq.n	8000f54 <sparse_create_service+0xac>
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d10f      	bne.n	8000f74 <sparse_create_service+0xcc>
 8000f54:	0028      	movs	r0, r5
 8000f56:	f005 f843 	bl	8005fe0 <acc_rss_integration_mem_free>
 8000f5a:	0020      	movs	r0, r4
 8000f5c:	f005 f840 	bl	8005fe0 <acc_rss_integration_mem_free>
 8000f60:	2500      	movs	r5, #0
 8000f62:	4643      	mov	r3, r8
 8000f64:	4642      	mov	r2, r8
 8000f66:	611d      	str	r5, [r3, #16]
 8000f68:	1e68      	subs	r0, r5, #1
 8000f6a:	4185      	sbcs	r5, r0
 8000f6c:	4b58      	ldr	r3, [pc, #352]	; (80010d0 <sparse_create_service+0x228>)
 8000f6e:	b2e8      	uxtb	r0, r5
 8000f70:	60d3      	str	r3, [r2, #12]
 8000f72:	e7c2      	b.n	8000efa <sparse_create_service+0x52>
 8000f74:	2318      	movs	r3, #24
 8000f76:	469a      	mov	sl, r3
 8000f78:	6028      	str	r0, [r5, #0]
 8000f7a:	4482      	add	sl, r0
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	18c0      	adds	r0, r0, r3
 8000f80:	33e4      	adds	r3, #228	; 0xe4
 8000f82:	4699      	mov	r9, r3
 8000f84:	44a1      	add	r9, r4
 8000f86:	464b      	mov	r3, r9
 8000f88:	4652      	mov	r2, sl
 8000f8a:	6760      	str	r0, [r4, #116]	; 0x74
 8000f8c:	a908      	add	r1, sp, #32
 8000f8e:	f005 fc39 	bl	8006804 <acc_sensor_manager_prepare_radar_engine>
 8000f92:	464b      	mov	r3, r9
 8000f94:	895a      	ldrh	r2, [r3, #10]
 8000f96:	0023      	movs	r3, r4
 8000f98:	3370      	adds	r3, #112	; 0x70
 8000f9a:	1e06      	subs	r6, r0, #0
 8000f9c:	801a      	strh	r2, [r3, #0]
 8000f9e:	d104      	bne.n	8000faa <sparse_create_service+0x102>
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	f005 f84d 	bl	8006040 <disassemble.lto_priv.315.lto_priv.625>
 8000fa6:	0035      	movs	r5, r6
 8000fa8:	e7db      	b.n	8000f62 <sparse_create_service+0xba>
 8000faa:	464b      	mov	r3, r9
 8000fac:	89db      	ldrh	r3, [r3, #14]
 8000fae:	189b      	adds	r3, r3, r2
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	8997      	ldrh	r7, [r2, #12]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	007f      	lsls	r7, r7, #1
 8000fb8:	429f      	cmp	r7, r3
 8000fba:	d200      	bcs.n	8000fbe <sparse_create_service+0x116>
 8000fbc:	001f      	movs	r7, r3
 8000fbe:	a808      	add	r0, sp, #32
 8000fc0:	f005 fb12 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8000fc4:	2600      	movs	r6, #0
 8000fc6:	42b0      	cmp	r0, r6
 8000fc8:	d001      	beq.n	8000fce <sparse_create_service+0x126>
 8000fca:	ab1d      	add	r3, sp, #116	; 0x74
 8000fcc:	881e      	ldrh	r6, [r3, #0]
 8000fce:	42be      	cmp	r6, r7
 8000fd0:	d200      	bcs.n	8000fd4 <sparse_create_service+0x12c>
 8000fd2:	003e      	movs	r6, r7
 8000fd4:	2298      	movs	r2, #152	; 0x98
 8000fd6:	4659      	mov	r1, fp
 8000fd8:	0052      	lsls	r2, r2, #1
 8000fda:	0030      	movs	r0, r6
 8000fdc:	f005 f844 	bl	8006068 <acc_rss_integration_mem_alloc_debug>
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	1e07      	subs	r7, r0, #0
 8000fe4:	61d8      	str	r0, [r3, #28]
 8000fe6:	d056      	beq.n	8001096 <sparse_create_service+0x1ee>
 8000fe8:	621e      	str	r6, [r3, #32]
 8000fea:	0022      	movs	r2, r4
 8000fec:	0026      	movs	r6, r4
 8000fee:	1da3      	adds	r3, r4, #6
 8000ff0:	6623      	str	r3, [r4, #96]	; 0x60
 8000ff2:	1de3      	adds	r3, r4, #7
 8000ff4:	6663      	str	r3, [r4, #100]	; 0x64
 8000ff6:	3214      	adds	r2, #20
 8000ff8:	3305      	adds	r3, #5
 8000ffa:	3608      	adds	r6, #8
 8000ffc:	66a3      	str	r3, [r4, #104]	; 0x68
 8000ffe:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001000:	65e2      	str	r2, [r4, #92]	; 0x5c
 8001002:	65a4      	str	r4, [r4, #88]	; 0x58
 8001004:	66e6      	str	r6, [r4, #108]	; 0x6c
 8001006:	67d8      	str	r0, [r3, #124]	; 0x7c
 8001008:	1d23      	adds	r3, r4, #4
 800100a:	4699      	mov	r9, r3
 800100c:	4649      	mov	r1, r9
 800100e:	3388      	adds	r3, #136	; 0x88
 8001010:	6019      	str	r1, [r3, #0]
 8001012:	611a      	str	r2, [r3, #16]
 8001014:	63d8      	str	r0, [r3, #60]	; 0x3c
 8001016:	665c      	str	r4, [r3, #100]	; 0x64
 8001018:	238c      	movs	r3, #140	; 0x8c
 800101a:	4f28      	ldr	r7, [pc, #160]	; (80010bc <sparse_create_service+0x214>)
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	469b      	mov	fp, r3
 8001020:	003b      	movs	r3, r7
 8001022:	3330      	adds	r3, #48	; 0x30
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	44a3      	add	fp, r4
 8001028:	2b01      	cmp	r3, #1
 800102a:	d839      	bhi.n	80010a0 <sparse_create_service+0x1f8>
 800102c:	4652      	mov	r2, sl
 800102e:	465b      	mov	r3, fp
 8001030:	a908      	add	r1, sp, #32
 8001032:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001034:	f005 faf2 	bl	800661c <acc_sensor_manager_prepare_measurement>
 8001038:	4682      	mov	sl, r0
 800103a:	2800      	cmp	r0, #0
 800103c:	d034      	beq.n	80010a8 <sparse_create_service+0x200>
 800103e:	0023      	movs	r3, r4
 8001040:	4a24      	ldr	r2, [pc, #144]	; (80010d4 <sparse_create_service+0x22c>)
 8001042:	33b0      	adds	r3, #176	; 0xb0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	4a24      	ldr	r2, [pc, #144]	; (80010d8 <sparse_create_service+0x230>)
 8001048:	0020      	movs	r0, r4
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	464a      	mov	r2, r9
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <sparse_create_service+0x234>)
 8001050:	3078      	adds	r0, #120	; 0x78
 8001052:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <sparse_create_service+0x238>)
 8001056:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <sparse_create_service+0x23c>)
 800105a:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <sparse_create_service+0x240>)
 800105c:	67f3      	str	r3, [r6, #124]	; 0x7c
 800105e:	0023      	movs	r3, r4
 8001060:	33b8      	adds	r3, #184	; 0xb8
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <sparse_create_service+0x244>)
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <sparse_create_service+0x248>)
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <sparse_create_service+0x24c>)
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	63a0      	str	r0, [r4, #56]	; 0x38
 8001072:	67a3      	str	r3, [r4, #120]	; 0x78
 8001074:	f009 f859 	bl	800a12a <validate.lto_priv.163>
 8001078:	1e06      	subs	r6, r0, #0
 800107a:	d01a      	beq.n	80010b2 <sparse_create_service+0x20a>
 800107c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800107e:	34f4      	adds	r4, #244	; 0xf4
 8001080:	68c3      	ldr	r3, [r0, #12]
 8001082:	4798      	blx	r3
 8001084:	4643      	mov	r3, r8
 8001086:	6023      	str	r3, [r4, #0]
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <sparse_create_service+0x250>)
 800108a:	606b      	str	r3, [r5, #4]
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <sparse_create_service+0x254>)
 800108e:	60ab      	str	r3, [r5, #8]
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <sparse_create_service+0x258>)
 8001092:	60eb      	str	r3, [r5, #12]
 8001094:	e765      	b.n	8000f62 <sparse_create_service+0xba>
 8001096:	0028      	movs	r0, r5
 8001098:	f004 ffd2 	bl	8006040 <disassemble.lto_priv.315.lto_priv.625>
 800109c:	003d      	movs	r5, r7
 800109e:	e760      	b.n	8000f62 <sparse_create_service+0xba>
 80010a0:	a808      	add	r0, sp, #32
 80010a2:	f006 fe81 	bl	8007da8 <acc_base_configuration_print.part.5>
 80010a6:	e7c1      	b.n	800102c <sparse_create_service+0x184>
 80010a8:	0028      	movs	r0, r5
 80010aa:	f004 ffc9 	bl	8006040 <disassemble.lto_priv.315.lto_priv.625>
 80010ae:	4655      	mov	r5, sl
 80010b0:	e757      	b.n	8000f62 <sparse_create_service+0xba>
 80010b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <sparse_create_service+0x25c>)
 80010b6:	4914      	ldr	r1, [pc, #80]	; (8001108 <sparse_create_service+0x260>)
 80010b8:	4798      	blx	r3
 80010ba:	e771      	b.n	8000fa0 <sparse_create_service+0xf8>
 80010bc:	200003f0 	.word	0x200003f0
 80010c0:	0801bc0f 	.word	0x0801bc0f
 80010c4:	0801bad6 	.word	0x0801bad6
 80010c8:	0801bc3f 	.word	0x0801bc3f
 80010cc:	0801bc6a 	.word	0x0801bc6a
 80010d0:	0800018d 	.word	0x0800018d
 80010d4:	40400000 	.word	0x40400000
 80010d8:	0800c87d 	.word	0x0800c87d
 80010dc:	0800a181 	.word	0x0800a181
 80010e0:	0800a12b 	.word	0x0800a12b
 80010e4:	0800a50b 	.word	0x0800a50b
 80010e8:	08000adb 	.word	0x08000adb
 80010ec:	0800a01b 	.word	0x0800a01b
 80010f0:	08009fb1 	.word	0x08009fb1
 80010f4:	0800a019 	.word	0x0800a019
 80010f8:	08005927 	.word	0x08005927
 80010fc:	080058f3 	.word	0x080058f3
 8001100:	08006041 	.word	0x08006041
 8001104:	0801bc93 	.word	0x0801bc93
 8001108:	0801bcb3 	.word	0x0801bcb3

0800110c <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	46d6      	mov	lr, sl
 8001110:	464f      	mov	r7, r9
 8001112:	4646      	mov	r6, r8
 8001114:	b5c0      	push	{r6, r7, lr}
 8001116:	0006      	movs	r6, r0
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <data_malloc+0xdc>)
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 800111a:	000d      	movs	r5, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 800111c:	0018      	movs	r0, r3
 800111e:	4699      	mov	r9, r3
 8001120:	f013 fef0 	bl	8014f04 <__wrap_printf>
 8001124:	0031      	movs	r1, r6
 8001126:	4831      	ldr	r0, [pc, #196]	; (80011ec <data_malloc+0xe0>)
 8001128:	f013 feec 	bl	8014f04 <__wrap_printf>
 800112c:	22c5      	movs	r2, #197	; 0xc5
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <data_malloc+0xe4>)
 8001130:	4f30      	ldr	r7, [pc, #192]	; (80011f4 <data_malloc+0xe8>)
 8001132:	0019      	movs	r1, r3
 8001134:	0052      	lsls	r2, r2, #1
 8001136:	0038      	movs	r0, r7
 8001138:	4698      	mov	r8, r3
 800113a:	f013 fee3 	bl	8014f04 <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 800113e:	4648      	mov	r0, r9
 8001140:	f013 fee0 	bl	8014f04 <__wrap_printf>
 8001144:	0029      	movs	r1, r5
 8001146:	482c      	ldr	r0, [pc, #176]	; (80011f8 <data_malloc+0xec>)
 8001148:	f013 fedc 	bl	8014f04 <__wrap_printf>
 800114c:	228c      	movs	r2, #140	; 0x8c
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 800114e:	1cac      	adds	r4, r5, #2
 8001150:	4374      	muls	r4, r6
	DBG_PRINTLN("malloc bins: %d", bins);
 8001152:	32ff      	adds	r2, #255	; 0xff
 8001154:	4641      	mov	r1, r8
 8001156:	0038      	movs	r0, r7
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8001158:	0064      	lsls	r4, r4, #1
	DBG_PRINTLN("malloc bins: %d", bins);
 800115a:	f013 fed3 	bl	8014f04 <__wrap_printf>
    data = (uint16_t **)malloc(len);
 800115e:	0020      	movs	r0, r4
 8001160:	f014 fa8c 	bl	801567c <malloc>
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <data_malloc+0xf0>)
 8001166:	469a      	mov	sl, r3
 8001168:	6318      	str	r0, [r3, #48]	; 0x30
	if (data == NULL){
 800116a:	2800      	cmp	r0, #0
 800116c:	d112      	bne.n	8001194 <data_malloc+0x88>
		ERR_PRINTLN("data buffer allociation failed");
 800116e:	4824      	ldr	r0, [pc, #144]	; (8001200 <data_malloc+0xf4>)
 8001170:	f013 fec8 	bl	8014f04 <__wrap_printf>
 8001174:	4823      	ldr	r0, [pc, #140]	; (8001204 <data_malloc+0xf8>)
 8001176:	f013 fec5 	bl	8014f04 <__wrap_printf>
 800117a:	2296      	movs	r2, #150	; 0x96
 800117c:	4641      	mov	r1, r8
 800117e:	32ff      	adds	r2, #255	; 0xff
 8001180:	0038      	movs	r0, r7
 8001182:	f013 febf 	bl	8014f04 <__wrap_printf>
		return -1;
 8001186:	2001      	movs	r0, #1
 8001188:	4240      	negs	r0, r0
}
 800118a:	bc1c      	pop	{r2, r3, r4}
 800118c:	4690      	mov	r8, r2
 800118e:	4699      	mov	r9, r3
 8001190:	46a2      	mov	sl, r4
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		DBG_PRINTLN("data buffer allociation success");
 8001194:	4648      	mov	r0, r9
 8001196:	f013 feb5 	bl	8014f04 <__wrap_printf>
 800119a:	481b      	ldr	r0, [pc, #108]	; (8001208 <data_malloc+0xfc>)
 800119c:	f013 feb2 	bl	8014f04 <__wrap_printf>
 80011a0:	22cc      	movs	r2, #204	; 0xcc
 80011a2:	4641      	mov	r1, r8
 80011a4:	0052      	lsls	r2, r2, #1
 80011a6:	0038      	movs	r0, r7
 80011a8:	f013 feac 	bl	8014f04 <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 80011ac:	4648      	mov	r0, r9
 80011ae:	f013 fea9 	bl	8014f04 <__wrap_printf>
 80011b2:	0021      	movs	r1, r4
 80011b4:	4815      	ldr	r0, [pc, #84]	; (800120c <data_malloc+0x100>)
 80011b6:	f013 fea5 	bl	8014f04 <__wrap_printf>
 80011ba:	229a      	movs	r2, #154	; 0x9a
 80011bc:	4641      	mov	r1, r8
 80011be:	32ff      	adds	r2, #255	; 0xff
 80011c0:	0038      	movs	r0, r7
 80011c2:	f013 fe9f 	bl	8014f04 <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 80011c6:	4653      	mov	r3, sl
 80011c8:	2200      	movs	r2, #0
 80011ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011cc:	00b3      	lsls	r3, r6, #2
 80011ce:	006d      	lsls	r5, r5, #1
 80011d0:	18cb      	adds	r3, r1, r3
    for(uint16_t i = 0; i < r; i++){
 80011d2:	b290      	uxth	r0, r2
 80011d4:	4286      	cmp	r6, r0
 80011d6:	d801      	bhi.n	80011dc <data_malloc+0xd0>
	return 0;
 80011d8:	2000      	movs	r0, #0
 80011da:	e7d6      	b.n	800118a <data_malloc+0x7e>
        data[i] = (ptr + c * i);
 80011dc:	0090      	lsls	r0, r2, #2
 80011de:	500b      	str	r3, [r1, r0]
 80011e0:	3201      	adds	r2, #1
 80011e2:	195b      	adds	r3, r3, r5
 80011e4:	e7f5      	b.n	80011d2 <data_malloc+0xc6>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	0801bcc3 	.word	0x0801bcc3
 80011ec:	0801bcc9 	.word	0x0801bcc9
 80011f0:	0801bcdb 	.word	0x0801bcdb
 80011f4:	0801c13a 	.word	0x0801c13a
 80011f8:	0801bcef 	.word	0x0801bcef
 80011fc:	2000010c 	.word	0x2000010c
 8001200:	0801bcff 	.word	0x0801bcff
 8001204:	0801bd05 	.word	0x0801bd05
 8001208:	0801bd24 	.word	0x0801bd24
 800120c:	0801bd44 	.word	0x0801bd44

08001210 <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	46de      	mov	lr, fp
 8001214:	4657      	mov	r7, sl
 8001216:	464e      	mov	r6, r9
 8001218:	4645      	mov	r5, r8
 800121a:	b5e0      	push	{r5, r6, r7, lr}
 800121c:	0006      	movs	r6, r0
 800121e:	b097      	sub	sp, #92	; 0x5c
 8001220:	1c15      	adds	r5, r2, #0
 8001222:	ac15      	add	r4, sp, #84	; 0x54
	_conv_data = data;
 8001224:	4a95      	ldr	r2, [pc, #596]	; (800147c <doconv+0x26c>)
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8001226:	9010      	str	r0, [sp, #64]	; 0x40
 8001228:	040b      	lsls	r3, r1, #16
 800122a:	8021      	strh	r1, [r4, #0]
 800122c:	1c08      	adds	r0, r1, #0
	_sweeps = data_size.x1;
 800122e:	4993      	ldr	r1, [pc, #588]	; (800147c <doconv+0x26c>)
	_bins = data_size.x2;
 8001230:	0e1b      	lsrs	r3, r3, #24
	_conv_data = data;
 8001232:	6056      	str	r6, [r2, #4]
	_sweeps = data_size.x1;
 8001234:	b2c2      	uxtb	r2, r0
 8001236:	700a      	strb	r2, [r1, #0]
	_bins = data_size.x2;
 8001238:	704b      	strb	r3, [r1, #1]
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800123a:	4891      	ldr	r0, [pc, #580]	; (8001480 <doconv+0x270>)
 800123c:	1c29      	adds	r1, r5, #0
		t = -t*t/2;
 800123e:	2680      	movs	r6, #128	; 0x80
	_sweeps = data_size.x1;
 8001240:	9211      	str	r2, [sp, #68]	; 0x44
	_bins = data_size.x2;
 8001242:	9304      	str	r3, [sp, #16]
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001244:	f00d f860 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 8001248:	0636      	lsls	r6, r6, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800124a:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 800124c:	1980      	adds	r0, r0, r6
 800124e:	f00d f96d 	bl	800e52c <__aeabi_fmul>
 8001252:	21fc      	movs	r1, #252	; 0xfc
 8001254:	0589      	lsls	r1, r1, #22
 8001256:	f00d f969 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 800125a:	f012 f873 	bl	8013344 <expf>
		norm += kernel[i];
 800125e:	2100      	movs	r1, #0
		kernel[i] =  expf(t);
 8001260:	4680      	mov	r8, r0
		norm += kernel[i];
 8001262:	f00c feb7 	bl	800dfd4 <__aeabi_fadd>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001266:	1c29      	adds	r1, r5, #0
		norm += kernel[i];
 8001268:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800126a:	4886      	ldr	r0, [pc, #536]	; (8001484 <doconv+0x274>)
 800126c:	f00d f84c 	bl	800e308 <__aeabi_fdiv>
 8001270:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8001272:	1980      	adds	r0, r0, r6
 8001274:	f00d f95a 	bl	800e52c <__aeabi_fmul>
 8001278:	21fc      	movs	r1, #252	; 0xfc
 800127a:	0589      	lsls	r1, r1, #22
 800127c:	f00d f956 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 8001280:	f012 f860 	bl	8013344 <expf>
 8001284:	1c07      	adds	r7, r0, #0
		norm += kernel[i];
 8001286:	1c01      	adds	r1, r0, #0
 8001288:	1c20      	adds	r0, r4, #0
 800128a:	f00c fea3 	bl	800dfd4 <__aeabi_fadd>
 800128e:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001290:	20c0      	movs	r0, #192	; 0xc0
 8001292:	1c29      	adds	r1, r5, #0
 8001294:	0600      	lsls	r0, r0, #24
 8001296:	f00d f837 	bl	800e308 <__aeabi_fdiv>
 800129a:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 800129c:	1980      	adds	r0, r0, r6
 800129e:	f00d f945 	bl	800e52c <__aeabi_fmul>
 80012a2:	21fc      	movs	r1, #252	; 0xfc
 80012a4:	0589      	lsls	r1, r1, #22
 80012a6:	f00d f941 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 80012aa:	f012 f84b 	bl	8013344 <expf>
		norm += kernel[i];
 80012ae:	1c01      	adds	r1, r0, #0
		kernel[i] =  expf(t);
 80012b0:	1c06      	adds	r6, r0, #0
		norm += kernel[i];
 80012b2:	1c20      	adds	r0, r4, #0
 80012b4:	f00c fe8e 	bl	800dfd4 <__aeabi_fadd>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012b8:	1c29      	adds	r1, r5, #0
		norm += kernel[i];
 80012ba:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012bc:	4872      	ldr	r0, [pc, #456]	; (8001488 <doconv+0x278>)
 80012be:	f00d f823 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012c6:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 80012c8:	18c0      	adds	r0, r0, r3
 80012ca:	f00d f92f 	bl	800e52c <__aeabi_fmul>
 80012ce:	21fc      	movs	r1, #252	; 0xfc
 80012d0:	0589      	lsls	r1, r1, #22
 80012d2:	f00d f92b 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 80012d6:	f012 f835 	bl	8013344 <expf>
		norm += kernel[i];
 80012da:	1c01      	adds	r1, r0, #0
		kernel[i] =  expf(t);
 80012dc:	4682      	mov	sl, r0
		norm += kernel[i];
 80012de:	1c20      	adds	r0, r4, #0
 80012e0:	f00c fe78 	bl	800dfd4 <__aeabi_fadd>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012e4:	1c29      	adds	r1, r5, #0
		norm += kernel[i];
 80012e6:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f00d f80d 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80012f2:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 80012f4:	18c0      	adds	r0, r0, r3
 80012f6:	f00d f919 	bl	800e52c <__aeabi_fmul>
 80012fa:	21fc      	movs	r1, #252	; 0xfc
 80012fc:	0589      	lsls	r1, r1, #22
 80012fe:	f00d f915 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 8001302:	f012 f81f 	bl	8013344 <expf>
		norm += kernel[i];
 8001306:	1c01      	adds	r1, r0, #0
		kernel[i] =  expf(t);
 8001308:	4683      	mov	fp, r0
		norm += kernel[i];
 800130a:	1c20      	adds	r0, r4, #0
 800130c:	f00c fe62 	bl	800dfd4 <__aeabi_fadd>
 8001310:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001312:	20fe      	movs	r0, #254	; 0xfe
 8001314:	1c29      	adds	r1, r5, #0
 8001316:	0580      	lsls	r0, r0, #22
 8001318:	f00c fff6 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001320:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8001322:	18c0      	adds	r0, r0, r3
 8001324:	f00d f902 	bl	800e52c <__aeabi_fmul>
 8001328:	21fc      	movs	r1, #252	; 0xfc
 800132a:	0589      	lsls	r1, r1, #22
 800132c:	f00d f8fe 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 8001330:	f012 f808 	bl	8013344 <expf>
		norm += kernel[i];
 8001334:	1c01      	adds	r1, r0, #0
 8001336:	9001      	str	r0, [sp, #4]
 8001338:	1c20      	adds	r0, r4, #0
 800133a:	f00c fe4b 	bl	800dfd4 <__aeabi_fadd>
 800133e:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001340:	2080      	movs	r0, #128	; 0x80
 8001342:	1c29      	adds	r1, r5, #0
 8001344:	05c0      	lsls	r0, r0, #23
 8001346:	f00c ffdf 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800134e:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8001350:	18c0      	adds	r0, r0, r3
 8001352:	f00d f8eb 	bl	800e52c <__aeabi_fmul>
 8001356:	21fc      	movs	r1, #252	; 0xfc
 8001358:	0589      	lsls	r1, r1, #22
 800135a:	f00d f8e7 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 800135e:	f011 fff1 	bl	8013344 <expf>
		norm += kernel[i];
 8001362:	1c01      	adds	r1, r0, #0
 8001364:	9002      	str	r0, [sp, #8]
 8001366:	1c20      	adds	r0, r4, #0
 8001368:	f00c fe34 	bl	800dfd4 <__aeabi_fadd>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800136c:	1c29      	adds	r1, r5, #0
		norm += kernel[i];
 800136e:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8001370:	4846      	ldr	r0, [pc, #280]	; (800148c <doconv+0x27c>)
 8001372:	f00c ffc9 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800137a:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 800137c:	18c0      	adds	r0, r0, r3
 800137e:	f00d f8d5 	bl	800e52c <__aeabi_fmul>
 8001382:	21fc      	movs	r1, #252	; 0xfc
 8001384:	0589      	lsls	r1, r1, #22
 8001386:	f00d f8d1 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 800138a:	f011 ffdb 	bl	8013344 <expf>
		norm += kernel[i];
 800138e:	1c01      	adds	r1, r0, #0
		kernel[i] =  expf(t);
 8001390:	4681      	mov	r9, r0
		norm += kernel[i];
 8001392:	1c20      	adds	r0, r4, #0
 8001394:	f00c fe1e 	bl	800dfd4 <__aeabi_fadd>
 8001398:	1c04      	adds	r4, r0, #0
		float t = (i - (CONVKER-1)/2)/(st_dev);
 800139a:	2081      	movs	r0, #129	; 0x81
 800139c:	1c29      	adds	r1, r5, #0
 800139e:	05c0      	lsls	r0, r0, #23
 80013a0:	f00c ffb2 	bl	800e308 <__aeabi_fdiv>
		t = -t*t/2;
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 80013a8:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 80013aa:	18c0      	adds	r0, r0, r3
 80013ac:	f00d f8be 	bl	800e52c <__aeabi_fmul>
 80013b0:	21fc      	movs	r1, #252	; 0xfc
 80013b2:	0589      	lsls	r1, r1, #22
 80013b4:	f00d f8ba 	bl	800e52c <__aeabi_fmul>
		kernel[i] =  expf(t);
 80013b8:	f011 ffc4 	bl	8013344 <expf>
		norm += kernel[i];
 80013bc:	1c21      	adds	r1, r4, #0
		kernel[i] =  expf(t);
 80013be:	1c05      	adds	r5, r0, #0
		norm += kernel[i];
 80013c0:	f00c fe08 	bl	800dfd4 <__aeabi_fadd>
 80013c4:	1c01      	adds	r1, r0, #0
	float sclfact = 1/norm;
 80013c6:	20fe      	movs	r0, #254	; 0xfe
 80013c8:	0580      	lsls	r0, r0, #22
 80013ca:	f00c ff9d 	bl	800e308 <__aeabi_fdiv>
		kernel[i] *= sclfact;
 80013ce:	4641      	mov	r1, r8
	float sclfact = 1/norm;
 80013d0:	1c04      	adds	r4, r0, #0
		kernel[i] *= sclfact;
 80013d2:	f00d f8ab 	bl	800e52c <__aeabi_fmul>
 80013d6:	1c03      	adds	r3, r0, #0
 80013d8:	9006      	str	r0, [sp, #24]
 80013da:	482d      	ldr	r0, [pc, #180]	; (8001490 <doconv+0x280>)
 80013dc:	1c39      	adds	r1, r7, #0
 80013de:	4680      	mov	r8, r0
 80013e0:	6403      	str	r3, [r0, #64]	; 0x40
 80013e2:	1c20      	adds	r0, r4, #0
 80013e4:	f00d f8a2 	bl	800e52c <__aeabi_fmul>
 80013e8:	4647      	mov	r7, r8
 80013ea:	9007      	str	r0, [sp, #28]
 80013ec:	6478      	str	r0, [r7, #68]	; 0x44
 80013ee:	1c31      	adds	r1, r6, #0
 80013f0:	1c20      	adds	r0, r4, #0
 80013f2:	f00d f89b 	bl	800e52c <__aeabi_fmul>
 80013f6:	4651      	mov	r1, sl
 80013f8:	9008      	str	r0, [sp, #32]
 80013fa:	64b8      	str	r0, [r7, #72]	; 0x48
 80013fc:	1c20      	adds	r0, r4, #0
 80013fe:	f00d f895 	bl	800e52c <__aeabi_fmul>
 8001402:	4659      	mov	r1, fp
 8001404:	9009      	str	r0, [sp, #36]	; 0x24
 8001406:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001408:	1c20      	adds	r0, r4, #0
 800140a:	f00d f88f 	bl	800e52c <__aeabi_fmul>
 800140e:	9901      	ldr	r1, [sp, #4]
 8001410:	900a      	str	r0, [sp, #40]	; 0x28
 8001412:	6538      	str	r0, [r7, #80]	; 0x50
 8001414:	1c20      	adds	r0, r4, #0
 8001416:	f00d f889 	bl	800e52c <__aeabi_fmul>
 800141a:	9902      	ldr	r1, [sp, #8]
 800141c:	900b      	str	r0, [sp, #44]	; 0x2c
 800141e:	6578      	str	r0, [r7, #84]	; 0x54
 8001420:	1c20      	adds	r0, r4, #0
 8001422:	f00d f883 	bl	800e52c <__aeabi_fmul>
 8001426:	4649      	mov	r1, r9
 8001428:	900c      	str	r0, [sp, #48]	; 0x30
 800142a:	65b8      	str	r0, [r7, #88]	; 0x58
 800142c:	1c20      	adds	r0, r4, #0
 800142e:	f00d f87d 	bl	800e52c <__aeabi_fmul>
 8001432:	1c21      	adds	r1, r4, #0
 8001434:	900d      	str	r0, [sp, #52]	; 0x34
 8001436:	65f8      	str	r0, [r7, #92]	; 0x5c
 8001438:	1c28      	adds	r0, r5, #0
 800143a:	f00d f877 	bl	800e52c <__aeabi_fmul>
	for(uint16_t i = 0; i < _bins; i++){
 800143e:	466b      	mov	r3, sp
 8001440:	8a1b      	ldrh	r3, [r3, #16]
		kernel[i] *= sclfact;
 8001442:	9005      	str	r0, [sp, #20]
 8001444:	6638      	str	r0, [r7, #96]	; 0x60
	for(uint16_t i = 0; i < _bins; i++){
 8001446:	9313      	str	r3, [sp, #76]	; 0x4c
 8001448:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800144a:	0852      	lsrs	r2, r2, #1
 800144c:	9212      	str	r2, [sp, #72]	; 0x48
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	9214      	str	r2, [sp, #80]	; 0x50
 8001452:	2b00      	cmp	r3, #0
 8001454:	d100      	bne.n	8001458 <doconv+0x248>
 8001456:	e17f      	b.n	8001758 <doconv+0x548>
 8001458:	2300      	movs	r3, #0
 800145a:	469b      	mov	fp, r3
 800145c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800145e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8001460:	3308      	adds	r3, #8
 8001462:	930e      	str	r3, [sp, #56]	; 0x38
		return _conv_data[sweep][bin];
 8001464:	465b      	mov	r3, fp
	convstack[i] = 0.0f;
 8001466:	2700      	movs	r7, #0
		return _conv_data[sweep][bin];
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	930f      	str	r3, [sp, #60]	; 0x3c
 800146c:	4c09      	ldr	r4, [pc, #36]	; (8001494 <doconv+0x284>)
 800146e:	2601      	movs	r6, #1
	convstack[i] = 0.0f;
 8001470:	9702      	str	r7, [sp, #8]
 8001472:	9701      	str	r7, [sp, #4]
 8001474:	9703      	str	r7, [sp, #12]
 8001476:	46b9      	mov	r9, r7
 8001478:	e0ed      	b.n	8001656 <doconv+0x446>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	2000008c 	.word	0x2000008c
 8001480:	c0800000 	.word	0xc0800000
 8001484:	c0400000 	.word	0xc0400000
 8001488:	bf800000 	.word	0xbf800000
 800148c:	40400000 	.word	0x40400000
 8001490:	2000010c 	.word	0x2000010c
 8001494:	0000fffc 	.word	0x0000fffc
 8001498:	0023      	movs	r3, r4
 800149a:	3308      	adds	r3, #8
 800149c:	b21b      	sxth	r3, r3
	if(
 800149e:	2b00      	cmp	r3, #0
 80014a0:	da00      	bge.n	80014a4 <doconv+0x294>
 80014a2:	e137      	b.n	8001714 <doconv+0x504>
		(sweep >= 0) && (sweep < _sweeps) &&
 80014a4:	42ab      	cmp	r3, r5
 80014a6:	db00      	blt.n	80014aa <doconv+0x29a>
 80014a8:	e134      	b.n	8001714 <doconv+0x504>
		return _conv_data[sweep][bin];
 80014aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	589b      	ldr	r3, [r3, r2]
 80014b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80014b2:	5a98      	ldrh	r0, [r3, r2]
 80014b4:	f00d ff50 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 80014b8:	9906      	ldr	r1, [sp, #24]
 80014ba:	f00d f837 	bl	800e52c <__aeabi_fmul>
 80014be:	2100      	movs	r1, #0
 80014c0:	f00c fd88 	bl	800dfd4 <__aeabi_fadd>
 80014c4:	1de3      	adds	r3, r4, #7
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	1c07      	adds	r7, r0, #0
	if(
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	da00      	bge.n	80014d0 <doconv+0x2c0>
 80014ce:	e11f      	b.n	8001710 <doconv+0x500>
		(sweep >= 0) && (sweep < _sweeps) &&
 80014d0:	42ab      	cmp	r3, r5
 80014d2:	db00      	blt.n	80014d6 <doconv+0x2c6>
 80014d4:	e11c      	b.n	8001710 <doconv+0x500>
		return _conv_data[sweep][bin];
 80014d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	589b      	ldr	r3, [r3, r2]
 80014dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80014de:	5a98      	ldrh	r0, [r3, r2]
 80014e0:	f00d ff3a 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 80014e4:	9907      	ldr	r1, [sp, #28]
 80014e6:	f00d f821 	bl	800e52c <__aeabi_fmul>
 80014ea:	1c39      	adds	r1, r7, #0
 80014ec:	f00c fd72 	bl	800dfd4 <__aeabi_fadd>
 80014f0:	1da3      	adds	r3, r4, #6
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	1c07      	adds	r7, r0, #0
	if(
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da00      	bge.n	80014fc <doconv+0x2ec>
 80014fa:	e107      	b.n	800170c <doconv+0x4fc>
		(sweep >= 0) && (sweep < _sweeps) &&
 80014fc:	42ab      	cmp	r3, r5
 80014fe:	db00      	blt.n	8001502 <doconv+0x2f2>
 8001500:	e104      	b.n	800170c <doconv+0x4fc>
		return _conv_data[sweep][bin];
 8001502:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	589b      	ldr	r3, [r3, r2]
 8001508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800150a:	5a98      	ldrh	r0, [r3, r2]
 800150c:	f00d ff24 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 8001510:	9908      	ldr	r1, [sp, #32]
 8001512:	f00d f80b 	bl	800e52c <__aeabi_fmul>
 8001516:	1c39      	adds	r1, r7, #0
 8001518:	f00c fd5c 	bl	800dfd4 <__aeabi_fadd>
 800151c:	b233      	sxth	r3, r6
 800151e:	1c07      	adds	r7, r0, #0
	if(
 8001520:	2b00      	cmp	r3, #0
 8001522:	da00      	bge.n	8001526 <doconv+0x316>
 8001524:	e0f0      	b.n	8001708 <doconv+0x4f8>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001526:	42ab      	cmp	r3, r5
 8001528:	db00      	blt.n	800152c <doconv+0x31c>
 800152a:	e0ed      	b.n	8001708 <doconv+0x4f8>
		return _conv_data[sweep][bin];
 800152c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	589b      	ldr	r3, [r3, r2]
 8001532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001534:	5a98      	ldrh	r0, [r3, r2]
 8001536:	f00d ff0f 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 800153a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800153c:	f00c fff6 	bl	800e52c <__aeabi_fmul>
 8001540:	1c39      	adds	r1, r7, #0
 8001542:	f00c fd47 	bl	800dfd4 <__aeabi_fadd>
 8001546:	1d23      	adds	r3, r4, #4
 8001548:	b21b      	sxth	r3, r3
 800154a:	1c07      	adds	r7, r0, #0
	if(
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <doconv+0x342>
 8001550:	e0d8      	b.n	8001704 <doconv+0x4f4>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001552:	42ab      	cmp	r3, r5
 8001554:	db00      	blt.n	8001558 <doconv+0x348>
 8001556:	e0d5      	b.n	8001704 <doconv+0x4f4>
		return _conv_data[sweep][bin];
 8001558:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	589b      	ldr	r3, [r3, r2]
 800155e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001560:	5a98      	ldrh	r0, [r3, r2]
 8001562:	f00d fef9 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 8001566:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001568:	f00c ffe0 	bl	800e52c <__aeabi_fmul>
 800156c:	1c39      	adds	r1, r7, #0
 800156e:	f00c fd31 	bl	800dfd4 <__aeabi_fadd>
 8001572:	1ce3      	adds	r3, r4, #3
 8001574:	b21b      	sxth	r3, r3
 8001576:	1c07      	adds	r7, r0, #0
	if(
 8001578:	2b00      	cmp	r3, #0
 800157a:	da00      	bge.n	800157e <doconv+0x36e>
 800157c:	e0c0      	b.n	8001700 <doconv+0x4f0>
		(sweep >= 0) && (sweep < _sweeps) &&
 800157e:	42ab      	cmp	r3, r5
 8001580:	db00      	blt.n	8001584 <doconv+0x374>
 8001582:	e0bd      	b.n	8001700 <doconv+0x4f0>
		return _conv_data[sweep][bin];
 8001584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	589b      	ldr	r3, [r3, r2]
 800158a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800158c:	5a98      	ldrh	r0, [r3, r2]
 800158e:	f00d fee3 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 8001592:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001594:	f00c ffca 	bl	800e52c <__aeabi_fmul>
 8001598:	1c39      	adds	r1, r7, #0
 800159a:	f00c fd1b 	bl	800dfd4 <__aeabi_fadd>
 800159e:	1ca3      	adds	r3, r4, #2
 80015a0:	b21b      	sxth	r3, r3
 80015a2:	1c07      	adds	r7, r0, #0
	if(
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da00      	bge.n	80015aa <doconv+0x39a>
 80015a8:	e0a8      	b.n	80016fc <doconv+0x4ec>
		(sweep >= 0) && (sweep < _sweeps) &&
 80015aa:	42ab      	cmp	r3, r5
 80015ac:	db00      	blt.n	80015b0 <doconv+0x3a0>
 80015ae:	e0a5      	b.n	80016fc <doconv+0x4ec>
		return _conv_data[sweep][bin];
 80015b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	589b      	ldr	r3, [r3, r2]
 80015b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80015b8:	5a98      	ldrh	r0, [r3, r2]
 80015ba:	f00d fecd 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 80015be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80015c0:	f00c ffb4 	bl	800e52c <__aeabi_fmul>
 80015c4:	1c39      	adds	r1, r7, #0
 80015c6:	f00c fd05 	bl	800dfd4 <__aeabi_fadd>
 80015ca:	1c67      	adds	r7, r4, #1
 80015cc:	b23b      	sxth	r3, r7
 80015ce:	4682      	mov	sl, r0
	if(
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	da00      	bge.n	80015d6 <doconv+0x3c6>
 80015d4:	e090      	b.n	80016f8 <doconv+0x4e8>
		(sweep >= 0) && (sweep < _sweeps) &&
 80015d6:	42ab      	cmp	r3, r5
 80015d8:	db00      	blt.n	80015dc <doconv+0x3cc>
 80015da:	e08d      	b.n	80016f8 <doconv+0x4e8>
		return _conv_data[sweep][bin];
 80015dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80015e4:	5a98      	ldrh	r0, [r3, r2]
 80015e6:	f00d feb7 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(i-j+cent, indx);
 80015ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80015ec:	f00c ff9e 	bl	800e52c <__aeabi_fmul>
 80015f0:	4651      	mov	r1, sl
 80015f2:	f00c fcef 	bl	800dfd4 <__aeabi_fadd>
 80015f6:	b224      	sxth	r4, r4
 80015f8:	4682      	mov	sl, r0
	if(
 80015fa:	2c00      	cmp	r4, #0
 80015fc:	db7a      	blt.n	80016f4 <doconv+0x4e4>
		(sweep >= 0) && (sweep < _sweeps) &&
 80015fe:	42ac      	cmp	r4, r5
 8001600:	da78      	bge.n	80016f4 <doconv+0x4e4>
		return _conv_data[sweep][bin];
 8001602:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001604:	00a3      	lsls	r3, r4, #2
 8001606:	589b      	ldr	r3, [r3, r2]
 8001608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800160a:	5a98      	ldrh	r0, [r3, r2]
 800160c:	f00d fea4 	bl	800f358 <__aeabi_i2f>
 8001610:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(i-j+cent, indx);
 8001612:	9805      	ldr	r0, [sp, #20]
 8001614:	f00c ff8a 	bl	800e52c <__aeabi_fmul>
 8001618:	4651      	mov	r1, sl
 800161a:	f00c fcdb 	bl	800dfd4 <__aeabi_fadd>
 800161e:	4682      	mov	sl, r0
	if(
 8001620:	2c00      	cmp	r4, #0
 8001622:	db0c      	blt.n	800163e <doconv+0x42e>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001624:	42ac      	cmp	r4, r5
 8001626:	da0a      	bge.n	800163e <doconv+0x42e>
		(bin >= 0) && (bin < _bins)
 8001628:	9b04      	ldr	r3, [sp, #16]
 800162a:	459b      	cmp	fp, r3
 800162c:	da07      	bge.n	800163e <doconv+0x42e>
		_conv_data[sweep][bin] = val;
 800162e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001630:	00a4      	lsls	r4, r4, #2
			setdata(i-cent, indx, pop);
 8001632:	9803      	ldr	r0, [sp, #12]
		_conv_data[sweep][bin] = val;
 8001634:	58e4      	ldr	r4, [r4, r3]
			setdata(i-cent, indx, pop);
 8001636:	f00d fcb9 	bl	800efac <__aeabi_f2uiz>
 800163a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800163c:	52e0      	strh	r0, [r4, r3]
 800163e:	9b01      	ldr	r3, [sp, #4]
 8001640:	3601      	adds	r6, #1
 8001642:	9303      	str	r3, [sp, #12]
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8001644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001646:	b2bc      	uxth	r4, r7
 8001648:	42b3      	cmp	r3, r6
 800164a:	d065      	beq.n	8001718 <doconv+0x508>
 800164c:	9b02      	ldr	r3, [sp, #8]
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	464b      	mov	r3, r9
 8001652:	46d1      	mov	r9, sl
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	9b04      	ldr	r3, [sp, #16]
 8001658:	459b      	cmp	fp, r3
 800165a:	da00      	bge.n	800165e <doconv+0x44e>
 800165c:	e71c      	b.n	8001498 <doconv+0x288>
				sum += kernel[j]*getdata(i-j+cent, indx);
 800165e:	2100      	movs	r1, #0
 8001660:	9806      	ldr	r0, [sp, #24]
 8001662:	f00c ff63 	bl	800e52c <__aeabi_fmul>
 8001666:	2100      	movs	r1, #0
 8001668:	f00c fcb4 	bl	800dfd4 <__aeabi_fadd>
 800166c:	2100      	movs	r1, #0
 800166e:	1c07      	adds	r7, r0, #0
 8001670:	9807      	ldr	r0, [sp, #28]
 8001672:	f00c ff5b 	bl	800e52c <__aeabi_fmul>
 8001676:	1c39      	adds	r1, r7, #0
 8001678:	f00c fcac 	bl	800dfd4 <__aeabi_fadd>
 800167c:	2100      	movs	r1, #0
 800167e:	1c07      	adds	r7, r0, #0
 8001680:	9808      	ldr	r0, [sp, #32]
 8001682:	f00c ff53 	bl	800e52c <__aeabi_fmul>
 8001686:	1c39      	adds	r1, r7, #0
 8001688:	f00c fca4 	bl	800dfd4 <__aeabi_fadd>
 800168c:	2100      	movs	r1, #0
 800168e:	1c07      	adds	r7, r0, #0
 8001690:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001692:	f00c ff4b 	bl	800e52c <__aeabi_fmul>
 8001696:	1c39      	adds	r1, r7, #0
 8001698:	f00c fc9c 	bl	800dfd4 <__aeabi_fadd>
 800169c:	2100      	movs	r1, #0
 800169e:	1c07      	adds	r7, r0, #0
 80016a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80016a2:	f00c ff43 	bl	800e52c <__aeabi_fmul>
 80016a6:	1c39      	adds	r1, r7, #0
 80016a8:	f00c fc94 	bl	800dfd4 <__aeabi_fadd>
 80016ac:	2100      	movs	r1, #0
 80016ae:	1c07      	adds	r7, r0, #0
 80016b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80016b2:	f00c ff3b 	bl	800e52c <__aeabi_fmul>
 80016b6:	1c39      	adds	r1, r7, #0
 80016b8:	f00c fc8c 	bl	800dfd4 <__aeabi_fadd>
 80016bc:	2100      	movs	r1, #0
 80016be:	1c07      	adds	r7, r0, #0
 80016c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80016c2:	f00c ff33 	bl	800e52c <__aeabi_fmul>
 80016c6:	1c39      	adds	r1, r7, #0
 80016c8:	f00c fc84 	bl	800dfd4 <__aeabi_fadd>
 80016cc:	2100      	movs	r1, #0
 80016ce:	1c07      	adds	r7, r0, #0
 80016d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80016d2:	f00c ff2b 	bl	800e52c <__aeabi_fmul>
 80016d6:	1c39      	adds	r1, r7, #0
 80016d8:	f00c fc7c 	bl	800dfd4 <__aeabi_fadd>
 80016dc:	2100      	movs	r1, #0
 80016de:	1c07      	adds	r7, r0, #0
 80016e0:	9805      	ldr	r0, [sp, #20]
 80016e2:	f00c ff23 	bl	800e52c <__aeabi_fmul>
 80016e6:	1c39      	adds	r1, r7, #0
 80016e8:	f00c fc74 	bl	800dfd4 <__aeabi_fadd>
 80016ec:	1c67      	adds	r7, r4, #1
 80016ee:	4682      	mov	sl, r0
 80016f0:	b224      	sxth	r4, r4
 80016f2:	e795      	b.n	8001620 <doconv+0x410>
		(sweep >= 0) && (sweep < _sweeps) &&
 80016f4:	2100      	movs	r1, #0
 80016f6:	e78c      	b.n	8001612 <doconv+0x402>
 80016f8:	2000      	movs	r0, #0
 80016fa:	e776      	b.n	80015ea <doconv+0x3da>
 80016fc:	2000      	movs	r0, #0
 80016fe:	e75e      	b.n	80015be <doconv+0x3ae>
 8001700:	2000      	movs	r0, #0
 8001702:	e746      	b.n	8001592 <doconv+0x382>
 8001704:	2000      	movs	r0, #0
 8001706:	e72e      	b.n	8001566 <doconv+0x356>
 8001708:	2000      	movs	r0, #0
 800170a:	e716      	b.n	800153a <doconv+0x32a>
 800170c:	2000      	movs	r0, #0
 800170e:	e6ff      	b.n	8001510 <doconv+0x300>
 8001710:	2000      	movs	r0, #0
 8001712:	e6e7      	b.n	80014e4 <doconv+0x2d4>
 8001714:	2000      	movs	r0, #0
 8001716:	e6cf      	b.n	80014b8 <doconv+0x2a8>
	for(uint16_t i = 0; i < _bins; i++){
 8001718:	465b      	mov	r3, fp
 800171a:	3301      	adds	r3, #1
 800171c:	b29b      	uxth	r3, r3
 800171e:	469b      	mov	fp, r3
 8001720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001722:	464f      	mov	r7, r9
 8001724:	459b      	cmp	fp, r3
 8001726:	d200      	bcs.n	800172a <doconv+0x51a>
 8001728:	e69c      	b.n	8001464 <doconv+0x254>
 800172a:	9b01      	ldr	r3, [sp, #4]
 800172c:	4641      	mov	r1, r8
 800172e:	4699      	mov	r9, r3
 8001730:	1c3b      	adds	r3, r7, #0
 8001732:	464a      	mov	r2, r9
 8001734:	4657      	mov	r7, sl
 8001736:	469a      	mov	sl, r3
 8001738:	4643      	mov	r3, r8
 800173a:	665a      	str	r2, [r3, #100]	; 0x64
 800173c:	9a02      	ldr	r2, [sp, #8]
 800173e:	671f      	str	r7, [r3, #112]	; 0x70
 8001740:	669a      	str	r2, [r3, #104]	; 0x68
 8001742:	4652      	mov	r2, sl
 8001744:	66da      	str	r2, [r3, #108]	; 0x6c
 8001746:	2300      	movs	r3, #0
 8001748:	4642      	mov	r2, r8
 800174a:	6793      	str	r3, [r2, #120]	; 0x78
 800174c:	6753      	str	r3, [r2, #116]	; 0x74
 800174e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	508b      	str	r3, [r1, r2]
 8001754:	3204      	adds	r2, #4
 8001756:	508b      	str	r3, [r1, r2]
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8001758:	2300      	movs	r3, #0
 800175a:	469a      	mov	sl, r3
 800175c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800175e:	2b00      	cmp	r3, #0
 8001760:	d100      	bne.n	8001764 <doconv+0x554>
 8001762:	e1b1      	b.n	8001ac8 <doconv+0x8b8>
 8001764:	46d3      	mov	fp, sl
	convstack[i] = 0.0f;
 8001766:	2500      	movs	r5, #0
 8001768:	4643      	mov	r3, r8
 800176a:	4642      	mov	r2, r8
 800176c:	665d      	str	r5, [r3, #100]	; 0x64
 800176e:	669d      	str	r5, [r3, #104]	; 0x68
 8001770:	66dd      	str	r5, [r3, #108]	; 0x6c
 8001772:	671d      	str	r5, [r3, #112]	; 0x70
 8001774:	675d      	str	r5, [r3, #116]	; 0x74
 8001776:	679d      	str	r5, [r3, #120]	; 0x78
 8001778:	67dd      	str	r5, [r3, #124]	; 0x7c
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	50d5      	str	r5, [r2, r3]
 800177e:	3304      	adds	r3, #4
 8001780:	50d5      	str	r5, [r2, r3]
		if(indx >= _sweeps){
 8001782:	466b      	mov	r3, sp
 8001784:	2244      	movs	r2, #68	; 0x44
 8001786:	189b      	adds	r3, r3, r2
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	9305      	str	r3, [sp, #20]
 800178c:	455b      	cmp	r3, fp
 800178e:	d800      	bhi.n	8001792 <doconv+0x582>
 8001790:	e182      	b.n	8001a98 <doconv+0x888>
		return _conv_data[sweep][bin];
 8001792:	49d1      	ldr	r1, [pc, #836]	; (8001ad8 <doconv+0x8c8>)
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8001794:	4bd0      	ldr	r3, [pc, #832]	; (8001ad8 <doconv+0x8c8>)
		return _conv_data[sweep][bin];
 8001796:	6849      	ldr	r1, [r1, #4]
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8001798:	785a      	ldrb	r2, [r3, #1]
		return _conv_data[sweep][bin];
 800179a:	465b      	mov	r3, fp
 800179c:	468a      	mov	sl, r1
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	449a      	add	sl, r3
				sum += kernel[j]*getdata(indx, i-j+cent);
 80017a2:	4643      	mov	r3, r8
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80017a6:	9203      	str	r2, [sp, #12]
				sum += kernel[j]*getdata(indx, i-j+cent);
 80017a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80017aa:	4643      	mov	r3, r8
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	3208      	adds	r2, #8
 80017b0:	930d      	str	r3, [sp, #52]	; 0x34
 80017b2:	4643      	mov	r3, r8
 80017b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b6:	9207      	str	r2, [sp, #28]
 80017b8:	9309      	str	r3, [sp, #36]	; 0x24
 80017ba:	4643      	mov	r3, r8
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4cc7      	ldr	r4, [pc, #796]	; (8001adc <doconv+0x8cc>)
 80017c0:	9308      	str	r3, [sp, #32]
 80017c2:	4643      	mov	r3, r8
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	2601      	movs	r6, #1
 80017c8:	930c      	str	r3, [sp, #48]	; 0x30
 80017ca:	4643      	mov	r3, r8
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	9502      	str	r5, [sp, #8]
 80017d0:	930e      	str	r3, [sp, #56]	; 0x38
 80017d2:	4643      	mov	r3, r8
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	9501      	str	r5, [sp, #4]
 80017d8:	930a      	str	r3, [sp, #40]	; 0x28
 80017da:	4643      	mov	r3, r8
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	9504      	str	r5, [sp, #16]
 80017e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80017e2:	4643      	mov	r3, r8
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	46a9      	mov	r9, r5
 80017e8:	9306      	str	r3, [sp, #24]
 80017ea:	e0e3      	b.n	80019b4 <doconv+0x7a4>
 80017ec:	0023      	movs	r3, r4
 80017ee:	3308      	adds	r3, #8
 80017f0:	b21b      	sxth	r3, r3
		(sweep >= 0) && (sweep < _sweeps) &&
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da00      	bge.n	80017f8 <doconv+0x5e8>
 80017f6:	e13d      	b.n	8001a74 <doconv+0x864>
		(bin >= 0) && (bin < _bins)
 80017f8:	9a03      	ldr	r2, [sp, #12]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	dc00      	bgt.n	8001800 <doconv+0x5f0>
 80017fe:	e139      	b.n	8001a74 <doconv+0x864>
 8001800:	4652      	mov	r2, sl
 8001802:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	5a98      	ldrh	r0, [r3, r2]
 8001808:	f00d fda6 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(indx, i-j+cent);
 800180c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800180e:	f00c fe8d 	bl	800e52c <__aeabi_fmul>
 8001812:	2100      	movs	r1, #0
 8001814:	f00c fbde 	bl	800dfd4 <__aeabi_fadd>
 8001818:	1de3      	adds	r3, r4, #7
 800181a:	b21b      	sxth	r3, r3
 800181c:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	da00      	bge.n	8001824 <doconv+0x614>
 8001822:	e137      	b.n	8001a94 <doconv+0x884>
		(bin >= 0) && (bin < _bins)
 8001824:	9a03      	ldr	r2, [sp, #12]
 8001826:	4293      	cmp	r3, r2
 8001828:	db00      	blt.n	800182c <doconv+0x61c>
 800182a:	e133      	b.n	8001a94 <doconv+0x884>
 800182c:	4652      	mov	r2, sl
 800182e:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	5a98      	ldrh	r0, [r3, r2]
 8001834:	f00d fd90 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800183a:	f00c fe77 	bl	800e52c <__aeabi_fmul>
 800183e:	1c29      	adds	r1, r5, #0
 8001840:	f00c fbc8 	bl	800dfd4 <__aeabi_fadd>
 8001844:	1da3      	adds	r3, r4, #6
 8001846:	b21b      	sxth	r3, r3
 8001848:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 800184a:	2b00      	cmp	r3, #0
 800184c:	da00      	bge.n	8001850 <doconv+0x640>
 800184e:	e11f      	b.n	8001a90 <doconv+0x880>
		(bin >= 0) && (bin < _bins)
 8001850:	9a03      	ldr	r2, [sp, #12]
 8001852:	4293      	cmp	r3, r2
 8001854:	db00      	blt.n	8001858 <doconv+0x648>
 8001856:	e11b      	b.n	8001a90 <doconv+0x880>
 8001858:	4652      	mov	r2, sl
 800185a:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	5a98      	ldrh	r0, [r3, r2]
 8001860:	f00d fd7a 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001866:	f00c fe61 	bl	800e52c <__aeabi_fmul>
 800186a:	1c29      	adds	r1, r5, #0
 800186c:	f00c fbb2 	bl	800dfd4 <__aeabi_fadd>
 8001870:	b233      	sxth	r3, r6
 8001872:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 8001874:	2b00      	cmp	r3, #0
 8001876:	da00      	bge.n	800187a <doconv+0x66a>
 8001878:	e108      	b.n	8001a8c <doconv+0x87c>
		(bin >= 0) && (bin < _bins)
 800187a:	9a03      	ldr	r2, [sp, #12]
 800187c:	429a      	cmp	r2, r3
 800187e:	dc00      	bgt.n	8001882 <doconv+0x672>
 8001880:	e104      	b.n	8001a8c <doconv+0x87c>
 8001882:	4652      	mov	r2, sl
 8001884:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	5a98      	ldrh	r0, [r3, r2]
 800188a:	f00d fd65 	bl	800f358 <__aeabi_i2f>
 800188e:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001890:	9808      	ldr	r0, [sp, #32]
 8001892:	f00c fe4b 	bl	800e52c <__aeabi_fmul>
 8001896:	1c29      	adds	r1, r5, #0
 8001898:	f00c fb9c 	bl	800dfd4 <__aeabi_fadd>
 800189c:	1d23      	adds	r3, r4, #4
 800189e:	b21b      	sxth	r3, r3
 80018a0:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da00      	bge.n	80018a8 <doconv+0x698>
 80018a6:	e0ef      	b.n	8001a88 <doconv+0x878>
		(bin >= 0) && (bin < _bins)
 80018a8:	9a03      	ldr	r2, [sp, #12]
 80018aa:	4293      	cmp	r3, r2
 80018ac:	db00      	blt.n	80018b0 <doconv+0x6a0>
 80018ae:	e0eb      	b.n	8001a88 <doconv+0x878>
 80018b0:	4652      	mov	r2, sl
 80018b2:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	5a98      	ldrh	r0, [r3, r2]
 80018b8:	f00d fd4e 	bl	800f358 <__aeabi_i2f>
				sum += kernel[j]*getdata(indx, i-j+cent);
 80018bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018be:	f00c fe35 	bl	800e52c <__aeabi_fmul>
 80018c2:	1c29      	adds	r1, r5, #0
 80018c4:	f00c fb86 	bl	800dfd4 <__aeabi_fadd>
 80018c8:	1ce3      	adds	r3, r4, #3
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	da00      	bge.n	80018d4 <doconv+0x6c4>
 80018d2:	e0d7      	b.n	8001a84 <doconv+0x874>
		(bin >= 0) && (bin < _bins)
 80018d4:	9a03      	ldr	r2, [sp, #12]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dc00      	bgt.n	80018dc <doconv+0x6cc>
 80018da:	e0d3      	b.n	8001a84 <doconv+0x874>
 80018dc:	4652      	mov	r2, sl
 80018de:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	5a98      	ldrh	r0, [r3, r2]
 80018e4:	f00d fd38 	bl	800f358 <__aeabi_i2f>
 80018e8:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 80018ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80018ec:	f00c fe1e 	bl	800e52c <__aeabi_fmul>
 80018f0:	1c29      	adds	r1, r5, #0
 80018f2:	f00c fb6f 	bl	800dfd4 <__aeabi_fadd>
 80018f6:	1ca3      	adds	r3, r4, #2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	da00      	bge.n	8001902 <doconv+0x6f2>
 8001900:	e0be      	b.n	8001a80 <doconv+0x870>
		(bin >= 0) && (bin < _bins)
 8001902:	9a03      	ldr	r2, [sp, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	dc00      	bgt.n	800190a <doconv+0x6fa>
 8001908:	e0ba      	b.n	8001a80 <doconv+0x870>
 800190a:	4652      	mov	r2, sl
 800190c:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	5a98      	ldrh	r0, [r3, r2]
 8001912:	f00d fd21 	bl	800f358 <__aeabi_i2f>
 8001916:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001918:	980a      	ldr	r0, [sp, #40]	; 0x28
 800191a:	f00c fe07 	bl	800e52c <__aeabi_fmul>
 800191e:	1c29      	adds	r1, r5, #0
 8001920:	f00c fb58 	bl	800dfd4 <__aeabi_fadd>
 8001924:	1c67      	adds	r7, r4, #1
 8001926:	b23b      	sxth	r3, r7
 8001928:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	da00      	bge.n	8001930 <doconv+0x720>
 800192e:	e0a5      	b.n	8001a7c <doconv+0x86c>
		(bin >= 0) && (bin < _bins)
 8001930:	9a03      	ldr	r2, [sp, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	dc00      	bgt.n	8001938 <doconv+0x728>
 8001936:	e0a1      	b.n	8001a7c <doconv+0x86c>
 8001938:	4652      	mov	r2, sl
 800193a:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	5a98      	ldrh	r0, [r3, r2]
 8001940:	f00d fd0a 	bl	800f358 <__aeabi_i2f>
 8001944:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001946:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001948:	f00c fdf0 	bl	800e52c <__aeabi_fmul>
 800194c:	1c29      	adds	r1, r5, #0
 800194e:	f00c fb41 	bl	800dfd4 <__aeabi_fadd>
 8001952:	b224      	sxth	r4, r4
 8001954:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 8001956:	2c00      	cmp	r4, #0
 8001958:	da00      	bge.n	800195c <doconv+0x74c>
 800195a:	e08d      	b.n	8001a78 <doconv+0x868>
		(bin >= 0) && (bin < _bins)
 800195c:	9b03      	ldr	r3, [sp, #12]
 800195e:	42a3      	cmp	r3, r4
 8001960:	dc00      	bgt.n	8001964 <doconv+0x754>
 8001962:	e089      	b.n	8001a78 <doconv+0x868>
 8001964:	4652      	mov	r2, sl
 8001966:	6812      	ldr	r2, [r2, #0]
		return _conv_data[sweep][bin];
 8001968:	0063      	lsls	r3, r4, #1
 800196a:	5a98      	ldrh	r0, [r3, r2]
 800196c:	f00d fcf4 	bl	800f358 <__aeabi_i2f>
 8001970:	1c01      	adds	r1, r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001972:	9806      	ldr	r0, [sp, #24]
 8001974:	f00c fdda 	bl	800e52c <__aeabi_fmul>
 8001978:	1c29      	adds	r1, r5, #0
 800197a:	f00c fb2b 	bl	800dfd4 <__aeabi_fadd>
 800197e:	1c05      	adds	r5, r0, #0
		(sweep >= 0) && (sweep < _sweeps) &&
 8001980:	2c00      	cmp	r4, #0
 8001982:	db0b      	blt.n	800199c <doconv+0x78c>
		(bin >= 0) && (bin < _bins)
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	42a3      	cmp	r3, r4
 8001988:	dd08      	ble.n	800199c <doconv+0x78c>
		_conv_data[sweep][bin] = val;
 800198a:	4653      	mov	r3, sl
 800198c:	681b      	ldr	r3, [r3, #0]
			setdata(indx, i-cent, pop);
 800198e:	9804      	ldr	r0, [sp, #16]
		_conv_data[sweep][bin] = val;
 8001990:	9310      	str	r3, [sp, #64]	; 0x40
			setdata(indx, i-cent, pop);
 8001992:	f00d fb0b 	bl	800efac <__aeabi_f2uiz>
 8001996:	9b10      	ldr	r3, [sp, #64]	; 0x40
		_conv_data[sweep][bin] = val;
 8001998:	0064      	lsls	r4, r4, #1
			setdata(indx, i-cent, pop);
 800199a:	52e0      	strh	r0, [r4, r3]
 800199c:	9b01      	ldr	r3, [sp, #4]
 800199e:	3601      	adds	r6, #1
 80019a0:	9304      	str	r3, [sp, #16]
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80019a2:	9b07      	ldr	r3, [sp, #28]
 80019a4:	b2bc      	uxth	r4, r7
 80019a6:	42b3      	cmp	r3, r6
 80019a8:	d058      	beq.n	8001a5c <doconv+0x84c>
 80019aa:	9b02      	ldr	r3, [sp, #8]
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	464b      	mov	r3, r9
 80019b0:	46a9      	mov	r9, r5
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	9b05      	ldr	r3, [sp, #20]
 80019b6:	459b      	cmp	fp, r3
 80019b8:	d200      	bcs.n	80019bc <doconv+0x7ac>
 80019ba:	e717      	b.n	80017ec <doconv+0x5dc>
				sum += kernel[j]*getdata(indx, i-j+cent);
 80019bc:	2100      	movs	r1, #0
 80019be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80019c0:	f00c fdb4 	bl	800e52c <__aeabi_fmul>
 80019c4:	2100      	movs	r1, #0
 80019c6:	f00c fb05 	bl	800dfd4 <__aeabi_fadd>
 80019ca:	2100      	movs	r1, #0
 80019cc:	1c05      	adds	r5, r0, #0
 80019ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80019d0:	f00c fdac 	bl	800e52c <__aeabi_fmul>
 80019d4:	1c29      	adds	r1, r5, #0
 80019d6:	f00c fafd 	bl	800dfd4 <__aeabi_fadd>
 80019da:	2100      	movs	r1, #0
 80019dc:	1c05      	adds	r5, r0, #0
 80019de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019e0:	f00c fda4 	bl	800e52c <__aeabi_fmul>
 80019e4:	1c29      	adds	r1, r5, #0
 80019e6:	f00c faf5 	bl	800dfd4 <__aeabi_fadd>
 80019ea:	2100      	movs	r1, #0
 80019ec:	1c05      	adds	r5, r0, #0
 80019ee:	9808      	ldr	r0, [sp, #32]
 80019f0:	f00c fd9c 	bl	800e52c <__aeabi_fmul>
 80019f4:	1c29      	adds	r1, r5, #0
 80019f6:	f00c faed 	bl	800dfd4 <__aeabi_fadd>
 80019fa:	2100      	movs	r1, #0
 80019fc:	1c05      	adds	r5, r0, #0
 80019fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001a00:	f00c fd94 	bl	800e52c <__aeabi_fmul>
 8001a04:	1c29      	adds	r1, r5, #0
 8001a06:	f00c fae5 	bl	800dfd4 <__aeabi_fadd>
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	1c05      	adds	r5, r0, #0
 8001a0e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001a10:	f00c fd8c 	bl	800e52c <__aeabi_fmul>
 8001a14:	1c29      	adds	r1, r5, #0
 8001a16:	f00c fadd 	bl	800dfd4 <__aeabi_fadd>
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	1c05      	adds	r5, r0, #0
 8001a1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001a20:	f00c fd84 	bl	800e52c <__aeabi_fmul>
 8001a24:	1c29      	adds	r1, r5, #0
 8001a26:	f00c fad5 	bl	800dfd4 <__aeabi_fadd>
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	1c05      	adds	r5, r0, #0
 8001a2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001a30:	f00c fd7c 	bl	800e52c <__aeabi_fmul>
 8001a34:	1c29      	adds	r1, r5, #0
 8001a36:	f00c facd 	bl	800dfd4 <__aeabi_fadd>
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	1c05      	adds	r5, r0, #0
 8001a3e:	9806      	ldr	r0, [sp, #24]
 8001a40:	f00c fd74 	bl	800e52c <__aeabi_fmul>
 8001a44:	1c29      	adds	r1, r5, #0
 8001a46:	f00c fac5 	bl	800dfd4 <__aeabi_fadd>
 8001a4a:	9b01      	ldr	r3, [sp, #4]
 8001a4c:	1c67      	adds	r7, r4, #1
 8001a4e:	9304      	str	r3, [sp, #16]
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8001a50:	9b07      	ldr	r3, [sp, #28]
 8001a52:	3601      	adds	r6, #1
				sum += kernel[j]*getdata(indx, i-j+cent);
 8001a54:	1c05      	adds	r5, r0, #0
 8001a56:	b2bc      	uxth	r4, r7
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8001a58:	42b3      	cmp	r3, r6
 8001a5a:	d1a6      	bne.n	80019aa <doconv+0x79a>
 8001a5c:	1c2b      	adds	r3, r5, #0
 8001a5e:	464d      	mov	r5, r9
 8001a60:	4699      	mov	r9, r3
 8001a62:	4643      	mov	r3, r8
 8001a64:	9a01      	ldr	r2, [sp, #4]
 8001a66:	66dd      	str	r5, [r3, #108]	; 0x6c
 8001a68:	665a      	str	r2, [r3, #100]	; 0x64
 8001a6a:	9a02      	ldr	r2, [sp, #8]
 8001a6c:	669a      	str	r2, [r3, #104]	; 0x68
 8001a6e:	464a      	mov	r2, r9
 8001a70:	671a      	str	r2, [r3, #112]	; 0x70
 8001a72:	e021      	b.n	8001ab8 <doconv+0x8a8>
		(bin >= 0) && (bin < _bins)
 8001a74:	2000      	movs	r0, #0
 8001a76:	e6c9      	b.n	800180c <doconv+0x5fc>
 8001a78:	2100      	movs	r1, #0
 8001a7a:	e77a      	b.n	8001972 <doconv+0x762>
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	e762      	b.n	8001946 <doconv+0x736>
 8001a80:	2100      	movs	r1, #0
 8001a82:	e749      	b.n	8001918 <doconv+0x708>
 8001a84:	2100      	movs	r1, #0
 8001a86:	e730      	b.n	80018ea <doconv+0x6da>
 8001a88:	2000      	movs	r0, #0
 8001a8a:	e717      	b.n	80018bc <doconv+0x6ac>
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	e6ff      	b.n	8001890 <doconv+0x680>
 8001a90:	2000      	movs	r0, #0
 8001a92:	e6e7      	b.n	8001864 <doconv+0x654>
 8001a94:	2000      	movs	r0, #0
 8001a96:	e6cf      	b.n	8001838 <doconv+0x628>
			ERR_PRINTLN("sweep count too great to convolve");
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <doconv+0x8d0>)
 8001a9a:	f013 fa33 	bl	8014f04 <__wrap_printf>
 8001a9e:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <doconv+0x8d4>)
 8001aa0:	f013 fa30 	bl	8014f04 <__wrap_printf>
 8001aa4:	229d      	movs	r2, #157	; 0x9d
 8001aa6:	4910      	ldr	r1, [pc, #64]	; (8001ae8 <doconv+0x8d8>)
 8001aa8:	4810      	ldr	r0, [pc, #64]	; (8001aec <doconv+0x8dc>)
 8001aaa:	f013 fa2b 	bl	8014f04 <__wrap_printf>
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <doconv+0x8c8>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	9312      	str	r3, [sp, #72]	; 0x48
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8001ab8:	465b      	mov	r3, fp
 8001aba:	3301      	adds	r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	469b      	mov	fp, r3
 8001ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001ac2:	455b      	cmp	r3, fp
 8001ac4:	d900      	bls.n	8001ac8 <doconv+0x8b8>
 8001ac6:	e64e      	b.n	8001766 <doconv+0x556>
}
 8001ac8:	b017      	add	sp, #92	; 0x5c
 8001aca:	bc3c      	pop	{r2, r3, r4, r5}
 8001acc:	4690      	mov	r8, r2
 8001ace:	4699      	mov	r9, r3
 8001ad0:	46a2      	mov	sl, r4
 8001ad2:	46ab      	mov	fp, r5
 8001ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	2000008c 	.word	0x2000008c
 8001adc:	0000fffc 	.word	0x0000fffc
 8001ae0:	0801bcff 	.word	0x0801bcff
 8001ae4:	0801c584 	.word	0x0801c584
 8001ae8:	0801c5a8 	.word	0x0801c5a8
 8001aec:	0801c13a 	.word	0x0801c13a

08001af0 <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	4657      	mov	r7, sl
 8001af4:	464e      	mov	r6, r9
 8001af6:	4645      	mov	r5, r8
 8001af8:	46de      	mov	lr, fp
 8001afa:	b5e0      	push	{r5, r6, r7, lr}
 8001afc:	4682      	mov	sl, r0
 8001afe:	20cc      	movs	r0, #204	; 0xcc
 8001b00:	b0b5      	sub	sp, #212	; 0xd4
	float scales[bins];
 8001b02:	466c      	mov	r4, sp
float dofft(uint16_t** data, uint8v2_t data_size){
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	040a      	lsls	r2, r1, #16
	uint8_t sweeps = data_size.x1;
 8001b08:	b2cb      	uxtb	r3, r1
float dofft(uint16_t** data, uint8v2_t data_size){
 8001b0a:	1838      	adds	r0, r7, r0
	uint8_t bins = data_size.x2;
 8001b0c:	0e12      	lsrs	r2, r2, #24
float dofft(uint16_t** data, uint8v2_t data_size){
 8001b0e:	8001      	strh	r1, [r0, #0]
	uint8_t sweeps = data_size.x1;
 8001b10:	0019      	movs	r1, r3
 8001b12:	667b      	str	r3, [r7, #100]	; 0x64
	float scales[bins];
 8001b14:	0093      	lsls	r3, r2, #2
 8001b16:	330a      	adds	r3, #10
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	1ae3      	subs	r3, r4, r3
 8001b1e:	469d      	mov	sp, r3
	int16_t real[sweeps];
 8001b20:	004c      	lsls	r4, r1, #1
 8001b22:	0023      	movs	r3, r4
	float scales[bins];
 8001b24:	466e      	mov	r6, sp
	int16_t real[sweeps];
 8001b26:	3308      	adds	r3, #8
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	1af5      	subs	r5, r6, r3
 8001b2e:	2098      	movs	r0, #152	; 0x98
 8001b30:	46ad      	mov	sp, r5
 8001b32:	1838      	adds	r0, r7, r0
 8001b34:	6005      	str	r5, [r0, #0]
	int16_t imag[sweeps];
 8001b36:	4668      	mov	r0, sp
 8001b38:	1ac3      	subs	r3, r0, r3
 8001b3a:	208c      	movs	r0, #140	; 0x8c
 8001b3c:	1838      	adds	r0, r7, r0
 8001b3e:	469d      	mov	sp, r3
 8001b40:	6003      	str	r3, [r0, #0]
	for(uint16_t i = 0; i<bins; i++){
 8001b42:	b293      	uxth	r3, r2
	float scales[bins];
 8001b44:	60fe      	str	r6, [r7, #12]
	for(uint16_t i = 0; i<bins; i++){
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d100      	bne.n	8001b4e <dofft+0x5e>
 8001b4c:	e370      	b.n	8002230 <dofft+0x740>
		for (uint16_t j = 0; j < sweeps; j++) {
 8001b4e:	4688      	mov	r8, r1

void fftWindowing(int16_t *vData, uint16_t samples, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = ((double)samples - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8001b50:	23a4      	movs	r3, #164	; 0xa4
 8001b52:	b289      	uxth	r1, r1
 8001b54:	084a      	lsrs	r2, r1, #1
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	6019      	str	r1, [r3, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	4641      	mov	r1, r8
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8001b62:	0852      	lsrs	r2, r2, #1
 8001b64:	4019      	ands	r1, r3
 8001b66:	4691      	mov	r9, r2
 8001b68:	633a      	str	r2, [r7, #48]	; 0x30
 8001b6a:	4640      	mov	r0, r8
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	637a      	str	r2, [r7, #52]	; 0x34
 8001b70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001b72:	f00f f9e7 	bl	8010f44 <__aeabi_ui2d>
 8001b76:	2200      	movs	r2, #0
 8001b78:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <dofft+0x288>)
 8001b7a:	f00e fe0f 	bl	801079c <__aeabi_dsub>
 8001b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b80:	65b8      	str	r0, [r7, #88]	; 0x58
 8001b82:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	23a4      	movs	r3, #164	; 0xa4
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	4640      	mov	r0, r8
 8001b96:	1e4b      	subs	r3, r1, #1
 8001b98:	4651      	mov	r1, sl
 8001b9a:	46ac      	mov	ip, r5
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	4452      	add	r2, sl
 8001ba2:	3801      	subs	r0, #1
 8001ba4:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ba6:	1d11      	adds	r1, r2, #4
		  imag[j] = 0;
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4464      	add	r4, ip
 8001bac:	6239      	str	r1, [r7, #32]
 8001bae:	0051      	lsls	r1, r2, #1
 8001bb0:	0042      	lsls	r2, r0, #1
 8001bb2:	63fc      	str	r4, [r7, #60]	; 0x3c
 8001bb4:	0014      	movs	r4, r2
 8001bb6:	6578      	str	r0, [r7, #84]	; 0x54
 8001bb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bba:	4464      	add	r4, ip
 8001bbc:	1e42      	subs	r2, r0, #1
 8001bbe:	61fc      	str	r4, [r7, #28]
 8001bc0:	b294      	uxth	r4, r2
 8001bc2:	0062      	lsls	r2, r4, #1
 8001bc4:	3202      	adds	r2, #2
 8001bc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001bc8:	4651      	mov	r1, sl
 8001bca:	607c      	str	r4, [r7, #4]
 8001bcc:	0014      	movs	r4, r2
 8001bce:	3104      	adds	r1, #4
 8001bd0:	4464      	add	r4, ip
 8001bd2:	468c      	mov	ip, r1
 8001bd4:	1a1b      	subs	r3, r3, r0
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	444b      	add	r3, r9
 8001bda:	464d      	mov	r5, r9
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4463      	add	r3, ip
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	2300      	movs	r3, #0
 8001be4:	00aa      	lsls	r2, r5, #2
 8001be6:	4452      	add	r2, sl
 8001be8:	647e      	str	r6, [r7, #68]	; 0x44
 8001bea:	61bc      	str	r4, [r7, #24]
 8001bec:	613a      	str	r2, [r7, #16]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	643e      	str	r6, [r7, #64]	; 0x40
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (uint16_t j = 0; j < sweeps; j++) {
 8001bf4:	23a4      	movs	r3, #164	; 0xa4
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d012      	beq.n	8001c24 <dofft+0x134>
 8001bfe:	2398      	movs	r3, #152	; 0x98
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c08:	6a3c      	ldr	r4, [r7, #32]
		  real[j] = data[j][i];
 8001c0a:	cb02      	ldmia	r3!, {r1}
 8001c0c:	5a09      	ldrh	r1, [r1, r0]
 8001c0e:	8011      	strh	r1, [r2, #0]
 8001c10:	3202      	adds	r2, #2
		for (uint16_t j = 0; j < sweeps; j++) {
 8001c12:	429c      	cmp	r4, r3
 8001c14:	d1f9      	bne.n	8001c0a <dofft+0x11a>
 8001c16:	238c      	movs	r3, #140	; 0x8c
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	f011 f91c 	bl	8012e5c <memset>
	for(int i =0; i<(samples);i++){
 8001c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <dofft+0x13c>
 8001c2a:	e2fa      	b.n	8002222 <dofft+0x732>
 8001c2c:	2398      	movs	r3, #152	; 0x98
	int max = 0;
 8001c2e:	2000      	movs	r0, #0
	for(int i =0; i<(samples);i++){
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	681a      	ldr	r2, [r3, #0]
	int max = 0;
 8001c34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
		if (max < vReal[i]){
 8001c36:	2400      	movs	r4, #0
 8001c38:	5f13      	ldrsh	r3, [r2, r4]
 8001c3a:	17dc      	asrs	r4, r3, #31
 8001c3c:	191b      	adds	r3, r3, r4
 8001c3e:	4063      	eors	r3, r4
 8001c40:	4298      	cmp	r0, r3
 8001c42:	da00      	bge.n	8001c46 <dofft+0x156>
 8001c44:	0018      	movs	r0, r3
 8001c46:	3202      	adds	r2, #2
	for(int i =0; i<(samples);i++){
 8001c48:	4291      	cmp	r1, r2
 8001c4a:	d1f4      	bne.n	8001c36 <dofft+0x146>
	float scaler = 256.0f/max;
 8001c4c:	f00d fb84 	bl	800f358 <__aeabi_i2f>
 8001c50:	1c01      	adds	r1, r0, #0
 8001c52:	2087      	movs	r0, #135	; 0x87
 8001c54:	05c0      	lsls	r0, r0, #23
 8001c56:	f00c fb57 	bl	800e308 <__aeabi_fdiv>
 8001c5a:	2398      	movs	r3, #152	; 0x98
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8001c62:	1c05      	adds	r5, r0, #0
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8001c64:	2300      	movs	r3, #0
 8001c66:	5ee0      	ldrsh	r0, [r4, r3]
 8001c68:	f00d fb76 	bl	800f358 <__aeabi_i2f>
 8001c6c:	1c29      	adds	r1, r5, #0
 8001c6e:	f00c fc5d 	bl	800e52c <__aeabi_fmul>
 8001c72:	f00d fb51 	bl	800f318 <__aeabi_f2iz>
 8001c76:	8020      	strh	r0, [r4, #0]
 8001c78:	3402      	adds	r4, #2
	for(int i =0; i<(samples);i++){
 8001c7a:	42a6      	cmp	r6, r4
 8001c7c:	d1f2      	bne.n	8001c64 <dofft+0x174>
		scales[i] = fftRangeScaling(real, sweeps);
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c80:	601d      	str	r5, [r3, #0]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8001c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d044      	beq.n	8001d12 <dofft+0x222>
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2600      	movs	r6, #0
 8001c8c:	4698      	mov	r8, r3
 8001c8e:	2398      	movs	r3, #152	; 0x98
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4699      	mov	r9, r3
		double indexMinusOne = (double)i;
 8001c96:	0030      	movs	r0, r6
 8001c98:	f00f f954 	bl	8010f44 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8001c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ca0:	f00d ff00 	bl	800faa4 <__aeabi_ddiv>
		double weighingFactor = 1.0;
		// Compute and record weighting factor
		// hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8001ca4:	4a35      	ldr	r2, [pc, #212]	; (8001d7c <dofft+0x28c>)
 8001ca6:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <dofft+0x290>)
 8001ca8:	f00e fb06 	bl	80102b8 <__aeabi_dmul>
 8001cac:	f011 fa4c 	bl	8013148 <cos>
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <dofft+0x294>)
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <dofft+0x298>)
 8001cb4:	f00e fb00 	bl	80102b8 <__aeabi_dmul>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	000b      	movs	r3, r1
 8001cbc:	4833      	ldr	r0, [pc, #204]	; (8001d8c <dofft+0x29c>)
 8001cbe:	4934      	ldr	r1, [pc, #208]	; (8001d90 <dofft+0x2a0>)
 8001cc0:	f00e fd6c 	bl	801079c <__aeabi_dsub>
		if (dir == FFT_FORWARD) {
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8001cc4:	464b      	mov	r3, r9
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8001cc6:	0004      	movs	r4, r0
 8001cc8:	000d      	movs	r5, r1
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8001cca:	2000      	movs	r0, #0
 8001ccc:	5e18      	ldrsh	r0, [r3, r0]
 8001cce:	f00f f8ff 	bl	8010ed0 <__aeabi_i2d>
 8001cd2:	0022      	movs	r2, r4
 8001cd4:	002b      	movs	r3, r5
 8001cd6:	f00e faef 	bl	80102b8 <__aeabi_dmul>
 8001cda:	f00f f8c3 	bl	8010e64 <__aeabi_d2iz>
 8001cde:	464b      	mov	r3, r9
 8001ce0:	8018      	strh	r0, [r3, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	5e18      	ldrsh	r0, [r3, r0]
 8001ce8:	f00f f8f2 	bl	8010ed0 <__aeabi_i2d>
 8001cec:	002b      	movs	r3, r5
 8001cee:	0022      	movs	r2, r4
 8001cf0:	f00e fae2 	bl	80102b8 <__aeabi_dmul>
 8001cf4:	f00f f8b6 	bl	8010e64 <__aeabi_d2iz>
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	8018      	strh	r0, [r3, #0]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	469c      	mov	ip, r3
 8001d00:	3b04      	subs	r3, #4
 8001d02:	44e1      	add	r9, ip
 8001d04:	469c      	mov	ip, r3
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8001d06:	3601      	adds	r6, #1
 8001d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d0a:	b2b6      	uxth	r6, r6
 8001d0c:	44e0      	add	r8, ip
 8001d0e:	429e      	cmp	r6, r3
 8001d10:	d1c1      	bne.n	8001c96 <dofft+0x1a6>

uint8_t fftExponent(int16_t value)
{
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
	while (((value >> result) & 1) != 1) result++;
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d000      	beq.n	8001d1a <dofft+0x22a>
 8001d18:	e1d4      	b.n	80020c4 <dofft+0x5d4>
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d1e:	0001      	movs	r1, r0
 8001d20:	3301      	adds	r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4119      	asrs	r1, r3
 8001d26:	420a      	tst	r2, r1
 8001d28:	d0f9      	beq.n	8001d1e <dofft+0x22e>
 8001d2a:	663b      	str	r3, [r7, #96]	; 0x60
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8001d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	dd30      	ble.n	8001d94 <dofft+0x2a4>
	uint8_t result = 0;
 8001d32:	2200      	movs	r2, #0
 8001d34:	2300      	movs	r3, #0
		while (k <= j) {
 8001d36:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d304      	bcc.n	8001d46 <dofft+0x256>
			j -= k;
 8001d3c:	1a5b      	subs	r3, r3, r1
 8001d3e:	b29b      	uxth	r3, r3
			k >>= 1;
 8001d40:	0849      	lsrs	r1, r1, #1
		while (k <= j) {
 8001d42:	428b      	cmp	r3, r1
 8001d44:	d2fa      	bcs.n	8001d3c <dofft+0x24c>
		j += k;
 8001d46:	185b      	adds	r3, r3, r1
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8001d48:	3201      	adds	r2, #1
 8001d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d4c:	b292      	uxth	r2, r2
		j += k;
 8001d4e:	b29b      	uxth	r3, r3
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8001d50:	428a      	cmp	r2, r1
 8001d52:	da1f      	bge.n	8001d94 <dofft+0x2a4>
		if (i < j) {
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d9ee      	bls.n	8001d36 <dofft+0x246>
			fftSwap(&vReal[i], &vReal[j]);
 8001d58:	2198      	movs	r1, #152	; 0x98
 8001d5a:	1879      	adds	r1, r7, r1
 8001d5c:	680c      	ldr	r4, [r1, #0]
 8001d5e:	0050      	lsls	r0, r2, #1
 8001d60:	46a4      	mov	ip, r4
 8001d62:	0059      	lsls	r1, r3, #1
 8001d64:	4460      	add	r0, ip
 8001d66:	4461      	add	r1, ip

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
	int16_t temp = *x;
 8001d68:	2500      	movs	r5, #0
 8001d6a:	5f44      	ldrsh	r4, [r0, r5]
	*x = *y;
 8001d6c:	2600      	movs	r6, #0
 8001d6e:	5f8d      	ldrsh	r5, [r1, r6]
 8001d70:	8005      	strh	r5, [r0, #0]
	*y = temp;
 8001d72:	800c      	strh	r4, [r1, #0]
 8001d74:	e7df      	b.n	8001d36 <dofft+0x246>
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	3ff00000 	.word	0x3ff00000
 8001d7c:	5474a168 	.word	0x5474a168
 8001d80:	401921fb 	.word	0x401921fb
 8001d84:	d70a3d71 	.word	0xd70a3d71
 8001d88:	3fdd70a3 	.word	0x3fdd70a3
 8001d8c:	147ae148 	.word	0x147ae148
 8001d90:	3fe147ae 	.word	0x3fe147ae
	for (uint8_t l = 0; (l < power); l++) {
 8001d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <dofft+0x2ac>
 8001d9a:	e199      	b.n	80020d0 <dofft+0x5e0>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2400      	movs	r4, #0
 8001da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001da2:	66fc      	str	r4, [r7, #108]	; 0x6c
 8001da4:	2300      	movs	r3, #0
 8001da6:	677b      	str	r3, [r7, #116]	; 0x74
 8001da8:	4bc3      	ldr	r3, [pc, #780]	; (80020b8 <dofft+0x5c8>)
	double c2 = 0.0;
 8001daa:	2288      	movs	r2, #136	; 0x88
	for (uint8_t l = 0; (l < power); l++) {
 8001dac:	673b      	str	r3, [r7, #112]	; 0x70
 8001dae:	2300      	movs	r3, #0
	double c2 = 0.0;
 8001db0:	18ba      	adds	r2, r7, r2
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	2284      	movs	r2, #132	; 0x84
 8001db6:	18ba      	adds	r2, r7, r2
 8001db8:	6013      	str	r3, [r2, #0]
	double c1 = -1.0;
 8001dba:	2290      	movs	r2, #144	; 0x90
	for (uint8_t l = 0; (l < power); l++) {
 8001dbc:	67bb      	str	r3, [r7, #120]	; 0x78
	double c1 = -1.0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	4cbe      	ldr	r4, [pc, #760]	; (80020bc <dofft+0x5cc>)
 8001dc2:	18ba      	adds	r2, r7, r2
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	6054      	str	r4, [r2, #4]
	uint16_t l2 = 1;
 8001dc8:	22c8      	movs	r2, #200	; 0xc8
 8001dca:	2301      	movs	r3, #1
 8001dcc:	18ba      	adds	r2, r7, r2
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	2252      	movs	r2, #82	; 0x52
 8001dd2:	33a3      	adds	r3, #163	; 0xa3
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	18ba      	adds	r2, r7, r2
 8001dda:	8013      	strh	r3, [r2, #0]
		l2 <<= 1;
 8001ddc:	23c8      	movs	r3, #200	; 0xc8
 8001dde:	20a0      	movs	r0, #160	; 0xa0
 8001de0:	18fb      	adds	r3, r7, r3
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	1838      	adds	r0, r7, r0
 8001de6:	004b      	lsls	r3, r1, #1
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	1c0a      	adds	r2, r1, #0
 8001dec:	6003      	str	r3, [r0, #0]
		for (j = 0; j < l1; j++) {
 8001dee:	2900      	cmp	r1, #0
 8001df0:	d100      	bne.n	8001df4 <dofft+0x304>
 8001df2:	e125      	b.n	8002040 <dofft+0x550>
 8001df4:	23a4      	movs	r3, #164	; 0xa4
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <dofft+0x310>
 8001dfe:	e11f      	b.n	8002040 <dofft+0x550>
 8001e00:	21a4      	movs	r1, #164	; 0xa4
 8001e02:	2352      	movs	r3, #82	; 0x52
 8001e04:	1879      	adds	r1, r7, r1
 8001e06:	6809      	ldr	r1, [r1, #0]
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	4291      	cmp	r1, r2
 8001e0e:	d902      	bls.n	8001e16 <dofft+0x326>
 8001e10:	23c8      	movs	r3, #200	; 0xc8
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	2280      	movs	r2, #128	; 0x80
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	18ba      	adds	r2, r7, r2
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	229c      	movs	r2, #156	; 0x9c
 8001e20:	2300      	movs	r3, #0
 8001e22:	18ba      	adds	r2, r7, r2
 8001e24:	6013      	str	r3, [r2, #0]
		double u2 = 0.0;
 8001e26:	22b0      	movs	r2, #176	; 0xb0
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	18ba      	adds	r2, r7, r2
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	6054      	str	r4, [r2, #4]
		double u1 = 1.0;
 8001e32:	22a8      	movs	r2, #168	; 0xa8
 8001e34:	2300      	movs	r3, #0
 8001e36:	4ca0      	ldr	r4, [pc, #640]	; (80020b8 <dofft+0x5c8>)
 8001e38:	18ba      	adds	r2, r7, r2
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	6054      	str	r4, [r2, #4]
	uint16_t l2 = 1;
 8001e3e:	239c      	movs	r3, #156	; 0x9c
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	469b      	mov	fp, r3
 8001e46:	2398      	movs	r3, #152	; 0x98
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	469a      	mov	sl, r3
 8001e4e:	238c      	movs	r3, #140	; 0x8c
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4699      	mov	r9, r3
					uint16_t i1 = i + l1;
 8001e56:	23c8      	movs	r3, #200	; 0xc8
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	445b      	add	r3, fp
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8001e5e:	b29e      	uxth	r6, r3
 8001e60:	0076      	lsls	r6, r6, #1
 8001e62:	46b0      	mov	r8, r6
 8001e64:	44d0      	add	r8, sl
 8001e66:	4643      	mov	r3, r8
 8001e68:	2000      	movs	r0, #0
 8001e6a:	5e18      	ldrsh	r0, [r3, r0]
 8001e6c:	f00f f830 	bl	8010ed0 <__aeabi_i2d>
 8001e70:	23c0      	movs	r3, #192	; 0xc0
 8001e72:	444e      	add	r6, r9
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	6018      	str	r0, [r3, #0]
 8001e78:	6059      	str	r1, [r3, #4]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	5ef0      	ldrsh	r0, [r6, r3]
 8001e7e:	f00f f827 	bl	8010ed0 <__aeabi_i2d>
 8001e82:	23a8      	movs	r3, #168	; 0xa8
 8001e84:	000d      	movs	r5, r1
 8001e86:	21c0      	movs	r1, #192	; 0xc0
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	1879      	adds	r1, r7, r1
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	0004      	movs	r4, r0
 8001e92:	6808      	ldr	r0, [r1, #0]
 8001e94:	6849      	ldr	r1, [r1, #4]
 8001e96:	f00e fa0f 	bl	80102b8 <__aeabi_dmul>
 8001e9a:	23b8      	movs	r3, #184	; 0xb8
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	6018      	str	r0, [r3, #0]
 8001ea0:	6059      	str	r1, [r3, #4]
 8001ea2:	23b0      	movs	r3, #176	; 0xb0
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	0020      	movs	r0, r4
 8001eac:	0029      	movs	r1, r5
 8001eae:	f00e fa03 	bl	80102b8 <__aeabi_dmul>
 8001eb2:	000b      	movs	r3, r1
 8001eb4:	21b8      	movs	r1, #184	; 0xb8
 8001eb6:	1879      	adds	r1, r7, r1
 8001eb8:	0002      	movs	r2, r0
 8001eba:	6808      	ldr	r0, [r1, #0]
 8001ebc:	6849      	ldr	r1, [r1, #4]
 8001ebe:	f00e fc6d 	bl	801079c <__aeabi_dsub>
 8001ec2:	23b8      	movs	r3, #184	; 0xb8
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	6018      	str	r0, [r3, #0]
 8001ec8:	6059      	str	r1, [r3, #4]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8001eca:	23a8      	movs	r3, #168	; 0xa8
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	0020      	movs	r0, r4
 8001ed4:	0029      	movs	r1, r5
 8001ed6:	f00e f9ef 	bl	80102b8 <__aeabi_dmul>
 8001eda:	23b0      	movs	r3, #176	; 0xb0
 8001edc:	000d      	movs	r5, r1
 8001ede:	21c0      	movs	r1, #192	; 0xc0
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	1879      	adds	r1, r7, r1
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0004      	movs	r4, r0
 8001eea:	6808      	ldr	r0, [r1, #0]
 8001eec:	6849      	ldr	r1, [r1, #4]
 8001eee:	f00e f9e3 	bl	80102b8 <__aeabi_dmul>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	000b      	movs	r3, r1
 8001ef6:	0020      	movs	r0, r4
 8001ef8:	0029      	movs	r1, r5
 8001efa:	f00d fab7 	bl	800f46c <__aeabi_dadd>
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	6018      	str	r0, [r3, #0]
 8001f04:	6059      	str	r1, [r3, #4]
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8001f06:	465b      	mov	r3, fp
 8001f08:	005c      	lsls	r4, r3, #1
 8001f0a:	4653      	mov	r3, sl
 8001f0c:	191d      	adds	r5, r3, r4
 8001f0e:	2300      	movs	r3, #0
 8001f10:	5ee8      	ldrsh	r0, [r5, r3]
 8001f12:	f00e ffdd 	bl	8010ed0 <__aeabi_i2d>
 8001f16:	23b8      	movs	r3, #184	; 0xb8
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f00e fc3d 	bl	801079c <__aeabi_dsub>
 8001f22:	f00e ff9f 	bl	8010e64 <__aeabi_d2iz>
 8001f26:	4643      	mov	r3, r8
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8001f28:	444c      	add	r4, r9
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8001f2a:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	5ee0      	ldrsh	r0, [r4, r3]
 8001f30:	f00e ffce 	bl	8010ed0 <__aeabi_i2d>
 8001f34:	23c0      	movs	r3, #192	; 0xc0
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f00e fc2e 	bl	801079c <__aeabi_dsub>
 8001f40:	f00e ff90 	bl	8010e64 <__aeabi_d2iz>
 8001f44:	8030      	strh	r0, [r6, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 8001f46:	2300      	movs	r3, #0
 8001f48:	5ee8      	ldrsh	r0, [r5, r3]
 8001f4a:	f00e ffc1 	bl	8010ed0 <__aeabi_i2d>
 8001f4e:	23b8      	movs	r3, #184	; 0xb8
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f00d fa89 	bl	800f46c <__aeabi_dadd>
 8001f5a:	f00e ff83 	bl	8010e64 <__aeabi_d2iz>
 8001f5e:	8028      	strh	r0, [r5, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8001f60:	2300      	movs	r3, #0
 8001f62:	5ee0      	ldrsh	r0, [r4, r3]
 8001f64:	f00e ffb4 	bl	8010ed0 <__aeabi_i2d>
 8001f68:	23c0      	movs	r3, #192	; 0xc0
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f00d fa7c 	bl	800f46c <__aeabi_dadd>
 8001f74:	f00e ff76 	bl	8010e64 <__aeabi_d2iz>
			 for (uint16_t i = j; i < samples; i += l2) {
 8001f78:	23a0      	movs	r3, #160	; 0xa0
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	681b      	ldr	r3, [r3, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8001f7e:	8020      	strh	r0, [r4, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 8001f80:	445b      	add	r3, fp
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	469b      	mov	fp, r3
 8001f86:	23a4      	movs	r3, #164	; 0xa4
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	459b      	cmp	fp, r3
 8001f8e:	d200      	bcs.n	8001f92 <dofft+0x4a2>
 8001f90:	e761      	b.n	8001e56 <dofft+0x366>
			 double z = ((u1 * c1) - (u2 * c2));
 8001f92:	2390      	movs	r3, #144	; 0x90
 8001f94:	21a8      	movs	r1, #168	; 0xa8
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	1879      	adds	r1, r7, r1
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	6808      	ldr	r0, [r1, #0]
 8001fa0:	6849      	ldr	r1, [r1, #4]
 8001fa2:	f00e f989 	bl	80102b8 <__aeabi_dmul>
 8001fa6:	000d      	movs	r5, r1
 8001fa8:	2188      	movs	r1, #136	; 0x88
 8001faa:	1879      	adds	r1, r7, r1
 8001fac:	6809      	ldr	r1, [r1, #0]
 8001fae:	0004      	movs	r4, r0
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	4688      	mov	r8, r1
 8001fb4:	2184      	movs	r1, #132	; 0x84
 8001fb6:	1879      	adds	r1, r7, r1
 8001fb8:	680e      	ldr	r6, [r1, #0]
 8001fba:	21b0      	movs	r1, #176	; 0xb0
 8001fbc:	1879      	adds	r1, r7, r1
 8001fbe:	0033      	movs	r3, r6
 8001fc0:	6808      	ldr	r0, [r1, #0]
 8001fc2:	6849      	ldr	r1, [r1, #4]
 8001fc4:	f00e f978 	bl	80102b8 <__aeabi_dmul>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	000b      	movs	r3, r1
 8001fcc:	0020      	movs	r0, r4
 8001fce:	0029      	movs	r1, r5
 8001fd0:	f00e fbe4 	bl	801079c <__aeabi_dsub>
 8001fd4:	23c0      	movs	r3, #192	; 0xc0
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	6018      	str	r0, [r3, #0]
 8001fda:	6059      	str	r1, [r3, #4]
			 u2 = ((u1 * c2) + (u2 * c1));
 8001fdc:	2390      	movs	r3, #144	; 0x90
 8001fde:	21b0      	movs	r1, #176	; 0xb0
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	1879      	adds	r1, r7, r1
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	6808      	ldr	r0, [r1, #0]
 8001fea:	6849      	ldr	r1, [r1, #4]
 8001fec:	f00e f964 	bl	80102b8 <__aeabi_dmul>
 8001ff0:	000d      	movs	r5, r1
 8001ff2:	21a8      	movs	r1, #168	; 0xa8
 8001ff4:	0004      	movs	r4, r0
 8001ff6:	1879      	adds	r1, r7, r1
 8001ff8:	4642      	mov	r2, r8
 8001ffa:	6808      	ldr	r0, [r1, #0]
 8001ffc:	6849      	ldr	r1, [r1, #4]
 8001ffe:	0033      	movs	r3, r6
 8002000:	f00e f95a 	bl	80102b8 <__aeabi_dmul>
 8002004:	0022      	movs	r2, r4
 8002006:	002b      	movs	r3, r5
 8002008:	f00d fa30 	bl	800f46c <__aeabi_dadd>
 800200c:	23b0      	movs	r3, #176	; 0xb0
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	6018      	str	r0, [r3, #0]
 8002012:	6059      	str	r1, [r3, #4]
		for (j = 0; j < l1; j++) {
 8002014:	239c      	movs	r3, #156	; 0x9c
 8002016:	229c      	movs	r2, #156	; 0x9c
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	18ba      	adds	r2, r7, r2
 800201e:	3301      	adds	r3, #1
 8002020:	b29b      	uxth	r3, r3
 8002022:	6013      	str	r3, [r2, #0]
			 double z = ((u1 * c1) - (u2 * c2));
 8002024:	20a8      	movs	r0, #168	; 0xa8
 8002026:	22c0      	movs	r2, #192	; 0xc0
 8002028:	1838      	adds	r0, r7, r0
 800202a:	18ba      	adds	r2, r7, r2
 800202c:	6811      	ldr	r1, [r2, #0]
 800202e:	6852      	ldr	r2, [r2, #4]
 8002030:	6001      	str	r1, [r0, #0]
 8002032:	6042      	str	r2, [r0, #4]
		for (j = 0; j < l1; j++) {
 8002034:	2280      	movs	r2, #128	; 0x80
 8002036:	18ba      	adds	r2, r7, r2
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	4293      	cmp	r3, r2
 800203c:	d200      	bcs.n	8002040 <dofft+0x550>
 800203e:	e6fe      	b.n	8001e3e <dofft+0x34e>
			c2 = -c2;
 8002040:	2288      	movs	r2, #136	; 0x88
 8002042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002044:	18ba      	adds	r2, r7, r2
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	0612      	lsls	r2, r2, #24
 800204c:	4694      	mov	ip, r2
 800204e:	2284      	movs	r2, #132	; 0x84
 8002050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002052:	18ba      	adds	r2, r7, r2
 8002054:	4463      	add	r3, ip
 8002056:	6013      	str	r3, [r2, #0]
	for (uint8_t l = 0; (l < power); l++) {
 8002058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800205c:	3301      	adds	r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	67bb      	str	r3, [r7, #120]	; 0x78
 8002062:	429a      	cmp	r2, r3
 8002064:	d034      	beq.n	80020d0 <dofft+0x5e0>
 8002066:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8002068:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800206a:	2000      	movs	r0, #0
 800206c:	0022      	movs	r2, r4
 800206e:	002b      	movs	r3, r5
 8002070:	4911      	ldr	r1, [pc, #68]	; (80020b8 <dofft+0x5c8>)
 8002072:	f00e fb93 	bl	801079c <__aeabi_dsub>
 8002076:	2200      	movs	r2, #0
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <dofft+0x5d0>)
 800207a:	f00e f91d 	bl	80102b8 <__aeabi_dmul>
 800207e:	f011 f901 	bl	8013284 <sqrt>
 8002082:	2200      	movs	r2, #0
 8002084:	6778      	str	r0, [r7, #116]	; 0x74
 8002086:	6739      	str	r1, [r7, #112]	; 0x70
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <dofft+0x5c8>)
 800208a:	0020      	movs	r0, r4
 800208c:	0029      	movs	r1, r5
 800208e:	f00d f9ed 	bl	800f46c <__aeabi_dadd>
 8002092:	2200      	movs	r2, #0
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <dofft+0x5d0>)
 8002096:	f00e f90f 	bl	80102b8 <__aeabi_dmul>
 800209a:	f011 f8f3 	bl	8013284 <sqrt>
		l2 <<= 1;
 800209e:	23a0      	movs	r3, #160	; 0xa0
 80020a0:	22c8      	movs	r2, #200	; 0xc8
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	18ba      	adds	r2, r7, r2
 80020a8:	6013      	str	r3, [r2, #0]
		c1 = sqrt((1.0 + c1) / 2.0);
 80020aa:	2390      	movs	r3, #144	; 0x90
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	601c      	str	r4, [r3, #0]
 80020b0:	605d      	str	r5, [r3, #4]
 80020b2:	66b8      	str	r0, [r7, #104]	; 0x68
 80020b4:	66f9      	str	r1, [r7, #108]	; 0x6c
 80020b6:	e691      	b.n	8001ddc <dofft+0x2ec>
 80020b8:	3ff00000 	.word	0x3ff00000
 80020bc:	bff00000 	.word	0xbff00000
 80020c0:	3fe00000 	.word	0x3fe00000
	uint8_t result = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	663b      	str	r3, [r7, #96]	; 0x60
	for (uint16_t i = 0; i < (samples - 1); i++) {
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	dd00      	ble.n	80020d0 <dofft+0x5e0>
 80020ce:	e630      	b.n	8001d32 <dofft+0x242>
	for (int16_t i = 0; i < samples; i++) {
 80020d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d2:	2400      	movs	r4, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02c      	beq.n	8002132 <dofft+0x642>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 80020d8:	0063      	lsls	r3, r4, #1
 80020da:	469a      	mov	sl, r3
 80020dc:	2398      	movs	r3, #152	; 0x98
 80020de:	18fb      	adds	r3, r7, r3
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3401      	adds	r4, #1
 80020e4:	4453      	add	r3, sl
 80020e6:	001d      	movs	r5, r3
 80020e8:	2300      	movs	r3, #0
 80020ea:	5ee8      	ldrsh	r0, [r5, r3]
 80020ec:	f00d f934 	bl	800f358 <__aeabi_i2f>
 80020f0:	238c      	movs	r3, #140	; 0x8c
 80020f2:	4652      	mov	r2, sl
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1c06      	adds	r6, r0, #0
 80020fa:	5e98      	ldrsh	r0, [r3, r2]
 80020fc:	f00d f92c 	bl	800f358 <__aeabi_i2f>
 8002100:	1c31      	adds	r1, r6, #0
 8002102:	4682      	mov	sl, r0
 8002104:	1c30      	adds	r0, r6, #0
 8002106:	f00c fa11 	bl	800e52c <__aeabi_fmul>
 800210a:	4651      	mov	r1, sl
 800210c:	1c06      	adds	r6, r0, #0
 800210e:	4650      	mov	r0, sl
 8002110:	f00c fa0c 	bl	800e52c <__aeabi_fmul>
 8002114:	1c01      	adds	r1, r0, #0
 8002116:	1c30      	adds	r0, r6, #0
 8002118:	f00b ff5c 	bl	800dfd4 <__aeabi_fadd>
 800211c:	f00e ff44 	bl	8010fa8 <__aeabi_f2d>
 8002120:	f011 f8b0 	bl	8013284 <sqrt>
 8002124:	f00e fe9e 	bl	8010e64 <__aeabi_d2iz>
	for (int16_t i = 0; i < samples; i++) {
 8002128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212a:	b224      	sxth	r4, r4
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 800212c:	8028      	strh	r0, [r5, #0]
	for (int16_t i = 0; i < samples; i++) {
 800212e:	429c      	cmp	r4, r3
 8002130:	dbd2      	blt.n	80020d8 <dofft+0x5e8>
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8002132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <dofft+0x660>
 8002138:	2398      	movs	r3, #152	; 0x98
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002142:	69bd      	ldr	r5, [r7, #24]
		  data[j][i] = real[j];
 8002144:	8818      	ldrh	r0, [r3, #0]
 8002146:	ca02      	ldmia	r2!, {r1}
 8002148:	3302      	adds	r3, #2
 800214a:	5308      	strh	r0, [r1, r4]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 800214c:	429d      	cmp	r5, r3
 800214e:	d1f9      	bne.n	8002144 <dofft+0x654>
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8002150:	20a4      	movs	r0, #164	; 0xa4
 8002152:	1838      	adds	r0, r7, r0
 8002154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002156:	6800      	ldr	r0, [r0, #0]
 8002158:	693b      	ldr	r3, [r7, #16]
		  data[j][i] = 0;
 800215a:	2100      	movs	r1, #0
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 800215c:	4282      	cmp	r2, r0
 800215e:	d205      	bcs.n	800216c <dofft+0x67c>
 8002160:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002162:	697c      	ldr	r4, [r7, #20]
		  data[j][i] = 0;
 8002164:	cb04      	ldmia	r3!, {r2}
 8002166:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8002168:	429c      	cmp	r4, r3
 800216a:	d1fb      	bne.n	8002164 <dofft+0x674>
 800216c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	3204      	adds	r2, #4
 8002172:	643a      	str	r2, [r7, #64]	; 0x40
	for(uint16_t i = 0; i<bins; i++){
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	3302      	adds	r3, #2
 8002178:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217a:	429a      	cmp	r2, r3
 800217c:	d000      	beq.n	8002180 <dofft+0x690>
 800217e:	e539      	b.n	8001bf4 <dofft+0x104>
	float min_scale = scales[0];
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	469b      	mov	fp, r3
	for(uint16_t i =1; i<bins; i++){
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	2b01      	cmp	r3, #1
 800218a:	d016      	beq.n	80021ba <dofft+0x6ca>
 800218c:	001a      	movs	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e95      	subs	r5, r2, #2
 8002192:	469c      	mov	ip, r3
 8002194:	b2ad      	uxth	r5, r5
 8002196:	00ad      	lsls	r5, r5, #2
 8002198:	3508      	adds	r5, #8
 800219a:	4465      	add	r5, ip
 800219c:	46a8      	mov	r8, r5
 800219e:	465d      	mov	r5, fp
 80021a0:	1d1c      	adds	r4, r3, #4
		if (scales[i] < min_scale){
 80021a2:	6826      	ldr	r6, [r4, #0]
 80021a4:	1c29      	adds	r1, r5, #0
 80021a6:	1c30      	adds	r0, r6, #0
 80021a8:	f00c feb8 	bl	800ef1c <__aeabi_fcmplt>
 80021ac:	2800      	cmp	r0, #0
 80021ae:	d000      	beq.n	80021b2 <dofft+0x6c2>
 80021b0:	1c35      	adds	r5, r6, #0
 80021b2:	3404      	adds	r4, #4
	for(uint16_t i =1; i<bins; i++){
 80021b4:	4544      	cmp	r4, r8
 80021b6:	d1f4      	bne.n	80021a2 <dofft+0x6b2>
 80021b8:	46ab      	mov	fp, r5
 80021ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d027      	beq.n	8002210 <dofft+0x720>
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4691      	mov	r9, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4499      	add	r9, r3
		if (scales[i] < min_scale){
 80021ca:	2300      	movs	r3, #0
 80021cc:	469a      	mov	sl, r3
		float scaling_factor = min_scale/scales[i]; 
 80021ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d0:	4658      	mov	r0, fp
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	f00c f898 	bl	800e308 <__aeabi_fdiv>
 80021d8:	4653      	mov	r3, sl
 80021da:	4680      	mov	r8, r0
 80021dc:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80021de:	005e      	lsls	r6, r3, #1
			data[j][i] *= scaling_factor;
 80021e0:	cd10      	ldmia	r5!, {r4}
 80021e2:	19a4      	adds	r4, r4, r6
 80021e4:	8820      	ldrh	r0, [r4, #0]
 80021e6:	f00d f8b7 	bl	800f358 <__aeabi_i2f>
 80021ea:	4641      	mov	r1, r8
 80021ec:	f00c f99e 	bl	800e52c <__aeabi_fmul>
 80021f0:	f00c fedc 	bl	800efac <__aeabi_f2uiz>
 80021f4:	8020      	strh	r0, [r4, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 80021f6:	454d      	cmp	r5, r9
 80021f8:	d1f2      	bne.n	80021e0 <dofft+0x6f0>
 80021fa:	2301      	movs	r3, #1
 80021fc:	469c      	mov	ip, r3
 80021fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002200:	44e2      	add	sl, ip
 8002202:	3304      	adds	r3, #4
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint16_t i =0; i<bins; i++){
 8002206:	4653      	mov	r3, sl
 8002208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800220a:	b29b      	uxth	r3, r3
 800220c:	429a      	cmp	r2, r3
 800220e:	d8de      	bhi.n	80021ce <dofft+0x6de>
}
 8002210:	4658      	mov	r0, fp
 8002212:	46bd      	mov	sp, r7
 8002214:	b035      	add	sp, #212	; 0xd4
 8002216:	bc3c      	pop	{r2, r3, r4, r5}
 8002218:	4690      	mov	r8, r2
 800221a:	4699      	mov	r9, r3
 800221c:	46a2      	mov	sl, r4
 800221e:	46ab      	mov	fp, r5
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	float scaler = 256.0f/max;
 8002222:	2087      	movs	r0, #135	; 0x87
 8002224:	2100      	movs	r1, #0
 8002226:	05c0      	lsls	r0, r0, #23
 8002228:	f00c f86e 	bl	800e308 <__aeabi_fdiv>
 800222c:	1c05      	adds	r5, r0, #0
 800222e:	e526      	b.n	8001c7e <dofft+0x18e>
	float min_scale = scales[0];
 8002230:	6833      	ldr	r3, [r6, #0]
 8002232:	469b      	mov	fp, r3
 8002234:	e7ec      	b.n	8002210 <dofft+0x720>

08002236 <printf_sparse_metadata>:
	filldata_envelope();
	INF_PRINTLN("Envelope measurement complete");
	
}

void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8002236:	b084      	sub	sp, #16
 8002238:	b510      	push	{r4, lr}
 800223a:	9103      	str	r1, [sp, #12]
 800223c:	9002      	str	r0, [sp, #8]
    printf("Sparse* Serivce Metadata\n");
 800223e:	4824      	ldr	r0, [pc, #144]	; (80022d0 <printf_sparse_metadata+0x9a>)
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8002240:	9204      	str	r2, [sp, #16]
 8002242:	9305      	str	r3, [sp, #20]
 8002244:	9c03      	ldr	r4, [sp, #12]
    printf("Sparse* Serivce Metadata\n");
 8002246:	f012 fe4b 	bl	8014ee0 <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 800224a:	4922      	ldr	r1, [pc, #136]	; (80022d4 <printf_sparse_metadata+0x9e>)
 800224c:	9802      	ldr	r0, [sp, #8]
 800224e:	f00c f96d 	bl	800e52c <__aeabi_fmul>
 8002252:	f00d f861 	bl	800f318 <__aeabi_f2iz>
 8002256:	0001      	movs	r1, r0
 8002258:	481f      	ldr	r0, [pc, #124]	; (80022d8 <printf_sparse_metadata+0xa2>)
 800225a:	f012 fe53 	bl	8014f04 <__wrap_printf>
    if(! far_active){
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <printf_sparse_metadata+0xa6>)
 8002260:	7a1a      	ldrb	r2, [r3, #8]
 8002262:	2a00      	cmp	r2, #0
 8002264:	d126      	bne.n	80022b4 <printf_sparse_metadata+0x7e>
        printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 8002266:	491b      	ldr	r1, [pc, #108]	; (80022d4 <printf_sparse_metadata+0x9e>)
 8002268:	1c20      	adds	r0, r4, #0
 800226a:	f00c f95f 	bl	800e52c <__aeabi_fmul>
 800226e:	f00c fe9d 	bl	800efac <__aeabi_f2uiz>
 8002272:	0001      	movs	r1, r0
 8002274:	481a      	ldr	r0, [pc, #104]	; (80022e0 <printf_sparse_metadata+0xaa>)
 8002276:	f012 fe45 	bl	8014f04 <__wrap_printf>
    }else{
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
    }
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 800227a:	ab02      	add	r3, sp, #8
 800227c:	8919      	ldrh	r1, [r3, #8]
 800227e:	4819      	ldr	r0, [pc, #100]	; (80022e4 <printf_sparse_metadata+0xae>)
 8002280:	f012 fe40 	bl	8014f04 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8002284:	4913      	ldr	r1, [pc, #76]	; (80022d4 <printf_sparse_metadata+0x9e>)
 8002286:	9805      	ldr	r0, [sp, #20]
 8002288:	f00c f950 	bl	800e52c <__aeabi_fmul>
 800228c:	f00c fe8e 	bl	800efac <__aeabi_f2uiz>
 8002290:	0001      	movs	r1, r0
 8002292:	4815      	ldr	r0, [pc, #84]	; (80022e8 <printf_sparse_metadata+0xb2>)
 8002294:	f012 fe36 	bl	8014f04 <__wrap_printf>
    printf("Step length: %lu um\n", (uint32_t)(metadata.step_length_m * 1.0e6f));
 8002298:	4914      	ldr	r1, [pc, #80]	; (80022ec <printf_sparse_metadata+0xb6>)
 800229a:	9806      	ldr	r0, [sp, #24]
 800229c:	f00c f946 	bl	800e52c <__aeabi_fmul>
 80022a0:	f00c fe84 	bl	800efac <__aeabi_f2uiz>
 80022a4:	0001      	movs	r1, r0
 80022a6:	4812      	ldr	r0, [pc, #72]	; (80022f0 <printf_sparse_metadata+0xba>)
 80022a8:	f012 fe2c 	bl	8014f04 <__wrap_printf>
}
 80022ac:	bc10      	pop	{r4}
 80022ae:	bc08      	pop	{r3}
 80022b0:	b004      	add	sp, #16
 80022b2:	4718      	bx	r3
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 80022b4:	6919      	ldr	r1, [r3, #16]
 80022b6:	1c20      	adds	r0, r4, #0
 80022b8:	f00b fe8c 	bl	800dfd4 <__aeabi_fadd>
 80022bc:	4905      	ldr	r1, [pc, #20]	; (80022d4 <printf_sparse_metadata+0x9e>)
 80022be:	f00c f935 	bl	800e52c <__aeabi_fmul>
 80022c2:	f00c fe73 	bl	800efac <__aeabi_f2uiz>
 80022c6:	0001      	movs	r1, r0
 80022c8:	480a      	ldr	r0, [pc, #40]	; (80022f4 <printf_sparse_metadata+0xbe>)
 80022ca:	f012 fe1b 	bl	8014f04 <__wrap_printf>
 80022ce:	e7d4      	b.n	800227a <printf_sparse_metadata+0x44>
 80022d0:	0801bd59 	.word	0x0801bd59
 80022d4:	447a0000 	.word	0x447a0000
 80022d8:	0801bd72 	.word	0x0801bd72
 80022dc:	2000018c 	.word	0x2000018c
 80022e0:	0801bd81 	.word	0x0801bd81
 80022e4:	0801bda7 	.word	0x0801bda7
 80022e8:	0801bdb9 	.word	0x0801bdb9
 80022ec:	49742400 	.word	0x49742400
 80022f0:	0801bdce 	.word	0x0801bdce
 80022f4:	0801bd91 	.word	0x0801bd91

080022f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(uint32_t baudrate)
{
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	46c6      	mov	lr, r8
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022fc:	4c29      	ldr	r4, [pc, #164]	; (80023a4 <MX_USART1_UART_Init+0xac>)
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <MX_USART1_UART_Init+0xb0>)
{
 8002300:	b500      	push	{lr}
  huart1.Instance = USART1;
 8002302:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002304:	230c      	movs	r3, #12
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002306:	0026      	movs	r6, r4
 8002308:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800230a:	23c0      	movs	r3, #192	; 0xc0
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800230c:	2500      	movs	r5, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800230e:	009b      	lsls	r3, r3, #2
  huart1.Init.BaudRate = baudrate;
 8002310:	6060      	str	r0, [r4, #4]
 8002312:	367c      	adds	r6, #124	; 0x7c
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002314:	0020      	movs	r0, r4
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002316:	61a3      	str	r3, [r4, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002318:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800231a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231c:	6125      	str	r5, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800231e:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002320:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002322:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002324:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002326:	f009 fb0f 	bl	800b948 <HAL_UART_Init.constprop.98>
 800232a:	7833      	ldrb	r3, [r6, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d017      	beq.n	8002360 <MX_USART1_UART_Init+0x68>

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8002332:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8002334:	1d27      	adds	r7, r4, #4
 8002336:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002338:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 800233a:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800233c:	681a      	ldr	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800233e:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002340:	4690      	mov	r8, r2
  __HAL_UART_DISABLE(huart);
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	00d2      	lsls	r2, r2, #3
 800234c:	08d2      	lsrs	r2, r2, #3
 800234e:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002350:	f008 fd9a 	bl	800ae88 <UARTEx_SetNbDataToProcess.lto_priv.675>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002354:	4642      	mov	r2, r8
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800235a:	2320      	movs	r3, #32

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800235c:	7035      	strb	r5, [r6, #0]
  huart->gState = HAL_UART_STATE_READY;
 800235e:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002360:	0025      	movs	r5, r4
 8002362:	357c      	adds	r5, #124	; 0x7c
 8002364:	782b      	ldrb	r3, [r5, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d016      	beq.n	8002398 <MX_USART1_UART_Init+0xa0>

  huart->gState = HAL_UART_STATE_BUSY;
 800236a:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 800236c:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800236e:	1d26      	adds	r6, r4, #4
 8002370:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002372:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 8002374:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002376:	681f      	ldr	r7, [r3, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002378:	681a      	ldr	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800237a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <MX_USART1_UART_Init+0xb4>)
 8002384:	400a      	ands	r2, r1
 8002386:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8002388:	f008 fd7e 	bl	800ae88 <UARTEx_SetNbDataToProcess.lto_priv.675>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	601f      	str	r7, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002390:	2320      	movs	r3, #32
 8002392:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002394:	2300      	movs	r3, #0
 8002396:	702b      	strb	r3, [r5, #0]
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002398:	0020      	movs	r0, r4
 800239a:	f008 fda9 	bl	800aef0 <HAL_UARTEx_DisableFifoMode>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800239e:	bc04      	pop	{r2}
 80023a0:	4690      	mov	r8, r2
 80023a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a4:	200005a8 	.word	0x200005a8
 80023a8:	40013800 	.word	0x40013800
 80023ac:	f1ffffff 	.word	0xf1ffffff

080023b0 <changeUART1baud>:
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80023b0:	2224      	movs	r2, #36	; 0x24

  __HAL_UART_DISABLE(huart);
 80023b2:	2101      	movs	r1, #1
void changeUART1baud(uint32_t baudrate){
 80023b4:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80023b6:	4c25      	ldr	r4, [pc, #148]	; (800244c <changeUART1baud+0x9c>)
 80023b8:	0005      	movs	r5, r0
 80023ba:	1d23      	adds	r3, r4, #4
 80023bc:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	438a      	bics	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80023ca:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80023cc:	609a      	str	r2, [r3, #8]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <changeUART1baud+0xa0>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d12e      	bne.n	8002432 <changeUART1baud+0x82>
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11 [PA9]     ------> USART1_CTS
    PA12 [PA10]     ------> USART1_RTS 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80023d4:	20f0      	movs	r0, #240	; 0xf0
    __HAL_RCC_USART1_CLK_DISABLE();
 80023d6:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <changeUART1baud+0xa4>)
 80023d8:	491f      	ldr	r1, [pc, #124]	; (8002458 <changeUART1baud+0xa8>)
 80023da:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80023dc:	0140      	lsls	r0, r0, #5
    __HAL_RCC_USART1_CLK_DISABLE();
 80023de:	400b      	ands	r3, r1
 80023e0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80023e2:	f008 f99b 	bl	800a71c <HAL_GPIO_DeInit.constprop.146>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80023e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d001      	beq.n	80023f0 <changeUART1baud+0x40>
 80023ec:	f008 fef4 	bl	800b1d8 <HAL_DMA_DeInit.part.1>
    HAL_DMA_DeInit(huart->hdmarx);
 80023f0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80023f2:	2800      	cmp	r0, #0
 80023f4:	d001      	beq.n	80023fa <changeUART1baud+0x4a>
 80023f6:	f008 feef 	bl	800b1d8 <HAL_DMA_DeInit.part.1>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <changeUART1baud+0xac>)
 80023fe:	0512      	lsls	r2, r2, #20
 8002400:	67da      	str	r2, [r3, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002406:	f3bf 8f6f 	isb	sy
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	0021      	movs	r1, r4
 800240c:	2300      	movs	r3, #0
 800240e:	0022      	movs	r2, r4
 8002410:	3188      	adds	r1, #136	; 0x88
 8002412:	600b      	str	r3, [r1, #0]
 8002414:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_RESET;
 8002416:	1d21      	adds	r1, r4, #4
 8002418:	67cb      	str	r3, [r1, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800241a:	67d3      	str	r3, [r2, #124]	; 0x7c

  __HAL_UNLOCK(huart);
 800241c:	0022      	movs	r2, r4
	MX_USART1_UART_Init(baudrate);
 800241e:	0028      	movs	r0, r5
 8002420:	327c      	adds	r2, #124	; 0x7c
 8002422:	7013      	strb	r3, [r2, #0]
 8002424:	f7ff ff68 	bl	80022f8 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8002428:	2101      	movs	r1, #1
 800242a:	0020      	movs	r0, r4
 800242c:	f008 fada 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
}
 8002430:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8002432:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <changeUART1baud+0xb0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d1e8      	bne.n	800240a <changeUART1baud+0x5a>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <changeUART1baud+0xa4>)
 800243a:	490a      	ldr	r1, [pc, #40]	; (8002464 <changeUART1baud+0xb4>)
 800243c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800243e:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8002440:	400b      	ands	r3, r1
 8002442:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002444:	f008 f96a 	bl	800a71c <HAL_GPIO_DeInit.constprop.146>
 8002448:	e7df      	b.n	800240a <changeUART1baud+0x5a>
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	200005a8 	.word	0x200005a8
 8002450:	40013800 	.word	0x40013800
 8002454:	40021000 	.word	0x40021000
 8002458:	ffffbfff 	.word	0xffffbfff
 800245c:	e000e104 	.word	0xe000e104
 8002460:	40004400 	.word	0x40004400
 8002464:	fffdffff 	.word	0xfffdffff

08002468 <SystemClock_Config>:
{
 8002468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800246a:	4eb4      	ldr	r6, [pc, #720]	; (800273c <SystemClock_Config+0x2d4>)
 800246c:	4ab4      	ldr	r2, [pc, #720]	; (8002740 <SystemClock_Config+0x2d8>)
 800246e:	6833      	ldr	r3, [r6, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002470:	2006      	movs	r0, #6
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002472:	401a      	ands	r2, r3
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4313      	orrs	r3, r2
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800247a:	4fb2      	ldr	r7, [pc, #712]	; (8002744 <SystemClock_Config+0x2dc>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800247c:	6033      	str	r3, [r6, #0]
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	49b1      	ldr	r1, [pc, #708]	; (8002748 <SystemClock_Config+0x2e0>)
 8002482:	4358      	muls	r0, r3
 8002484:	f00c fb84 	bl	800eb90 <__udivsi3>

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002488:	2380      	movs	r3, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800248a:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	6972      	ldr	r2, [r6, #20]
 8002490:	421a      	tst	r2, r3
 8002492:	d000      	beq.n	8002496 <SystemClock_Config+0x2e>
 8002494:	e086      	b.n	80025a4 <SystemClock_Config+0x13c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002496:	2338      	movs	r3, #56	; 0x38
 8002498:	4cac      	ldr	r4, [pc, #688]	; (800274c <SystemClock_Config+0x2e4>)
 800249a:	4dad      	ldr	r5, [pc, #692]	; (8002750 <SystemClock_Config+0x2e8>)
 800249c:	68a2      	ldr	r2, [r4, #8]
 800249e:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a0:	68e2      	ldr	r2, [r4, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d000      	beq.n	80024a8 <SystemClock_Config+0x40>
 80024a6:	e082      	b.n	80025ae <SystemClock_Config+0x146>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a8:	2103      	movs	r1, #3
 80024aa:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024ac:	2a02      	cmp	r2, #2
 80024ae:	d000      	beq.n	80024b2 <SystemClock_Config+0x4a>
 80024b0:	e080      	b.n	80025b4 <SystemClock_Config+0x14c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b2:	6822      	ldr	r2, [r4, #0]
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	49a7      	ldr	r1, [pc, #668]	; (8002754 <SystemClock_Config+0x2ec>)
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	4011      	ands	r1, r2
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	01d2      	lsls	r2, r2, #7
 80024be:	430a      	orrs	r2, r1
 80024c0:	6062      	str	r2, [r4, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <SystemClock_Config+0x72>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	4aa3      	ldr	r2, [pc, #652]	; (8002758 <SystemClock_Config+0x2f0>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	6023      	str	r3, [r4, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	4aa2      	ldr	r2, [pc, #648]	; (800275c <SystemClock_Config+0x2f4>)
 80024d2:	049b      	lsls	r3, r3, #18
 80024d4:	0f5b      	lsrs	r3, r3, #29
 80024d6:	40da      	lsrs	r2, r3
 80024d8:	603a      	str	r2, [r7, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024da:	4ba1      	ldr	r3, [pc, #644]	; (8002760 <SystemClock_Config+0x2f8>)
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	f008 fe4d 	bl	800b17c <HAL_InitTick>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d07c      	beq.n	80025e0 <SystemClock_Config+0x178>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e6:	2207      	movs	r2, #7
 80024e8:	4b9e      	ldr	r3, [pc, #632]	; (8002764 <SystemClock_Config+0x2fc>)
 80024ea:	6819      	ldr	r1, [r3, #0]
 80024ec:	4011      	ands	r1, r2
 80024ee:	2901      	cmp	r1, #1
 80024f0:	d80c      	bhi.n	800250c <SystemClock_Config+0xa4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	2102      	movs	r1, #2
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	4390      	bics	r0, r2
 80024f8:	4301      	orrs	r1, r0
 80024fa:	6019      	str	r1, [r3, #0]
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	499a      	ldr	r1, [pc, #616]	; (8002768 <SystemClock_Config+0x300>)
 80024fe:	6828      	ldr	r0, [r5, #0]
 8002500:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	4011      	ands	r1, r2
 8002506:	2902      	cmp	r1, #2
 8002508:	d000      	beq.n	800250c <SystemClock_Config+0xa4>
 800250a:	e0b4      	b.n	8002676 <SystemClock_Config+0x20e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800250c:	22e0      	movs	r2, #224	; 0xe0
 800250e:	68a1      	ldr	r1, [r4, #8]
 8002510:	01d2      	lsls	r2, r2, #7
 8002512:	430a      	orrs	r2, r1
 8002514:	60a2      	str	r2, [r4, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	68a2      	ldr	r2, [r4, #8]
 8002518:	4994      	ldr	r1, [pc, #592]	; (800276c <SystemClock_Config+0x304>)
 800251a:	400a      	ands	r2, r1
 800251c:	60a2      	str	r2, [r4, #8]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	0192      	lsls	r2, r2, #6
 8002522:	d500      	bpl.n	8002526 <SystemClock_Config+0xbe>
 8002524:	e0ad      	b.n	8002682 <SystemClock_Config+0x21a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	2280      	movs	r2, #128	; 0x80
 8002528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800252a:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 800252c:	2100      	movs	r1, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4213      	tst	r3, r2
 8002530:	d107      	bne.n	8002542 <SystemClock_Config+0xda>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      pwrclkchanged = SET;
 8002534:	3101      	adds	r1, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4313      	orrs	r3, r2
 8002538:	63e3      	str	r3, [r4, #60]	; 0x3c
 800253a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800253c:	4013      	ands	r3, r2
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	6832      	ldr	r2, [r6, #0]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	431a      	orrs	r2, r3
 800254a:	6032      	str	r2, [r6, #0]
 800254c:	6828      	ldr	r0, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	6832      	ldr	r2, [r6, #0]
 8002550:	421a      	tst	r2, r3
 8002552:	d100      	bne.n	8002556 <SystemClock_Config+0xee>
 8002554:	e0d4      	b.n	8002700 <SystemClock_Config+0x298>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002556:	22c0      	movs	r2, #192	; 0xc0
 8002558:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800255e:	d010      	beq.n	8002582 <SystemClock_Config+0x11a>
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	0092      	lsls	r2, r2, #2
 8002564:	4293      	cmp	r3, r2
 8002566:	d00c      	beq.n	8002582 <SystemClock_Config+0x11a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002568:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800256a:	4a81      	ldr	r2, [pc, #516]	; (8002770 <SystemClock_Config+0x308>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800256c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800256e:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	0252      	lsls	r2, r2, #9
 8002574:	4302      	orrs	r2, r0
 8002576:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002578:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800257a:	487e      	ldr	r0, [pc, #504]	; (8002774 <SystemClock_Config+0x30c>)
 800257c:	4002      	ands	r2, r0
 800257e:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002580:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002582:	07db      	lsls	r3, r3, #31
 8002584:	d506      	bpl.n	8002594 <SystemClock_Config+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	2202      	movs	r2, #2
 8002588:	6828      	ldr	r0, [r5, #0]
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	4e77      	ldr	r6, [pc, #476]	; (8002768 <SystemClock_Config+0x300>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800258e:	4213      	tst	r3, r2
 8002590:	d100      	bne.n	8002594 <SystemClock_Config+0x12c>
 8002592:	e0cd      	b.n	8002730 <SystemClock_Config+0x2c8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002594:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002596:	4a76      	ldr	r2, [pc, #472]	; (8002770 <SystemClock_Config+0x308>)
 8002598:	401a      	ands	r2, r3
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4313      	orrs	r3, r2
 80025a0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80025a2:	e0b2      	b.n	800270a <SystemClock_Config+0x2a2>
    {
      if(wait_loop_index != 0U)
 80025a4:	2800      	cmp	r0, #0
 80025a6:	d100      	bne.n	80025aa <SystemClock_Config+0x142>
 80025a8:	e775      	b.n	8002496 <SystemClock_Config+0x2e>
      {
        wait_loop_index--;
 80025aa:	3801      	subs	r0, #1
 80025ac:	e76f      	b.n	800248e <SystemClock_Config+0x26>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d100      	bne.n	80025b4 <SystemClock_Config+0x14c>
 80025b2:	e77e      	b.n	80024b2 <SystemClock_Config+0x4a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	4a68      	ldr	r2, [pc, #416]	; (8002758 <SystemClock_Config+0x2f0>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c4:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_HSI_ENABLE();
 80025c6:	6023      	str	r3, [r4, #0]
 80025c8:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ca:	00d2      	lsls	r2, r2, #3
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4213      	tst	r3, r2
 80025d0:	d037      	beq.n	8002642 <SystemClock_Config+0x1da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	6863      	ldr	r3, [r4, #4]
 80025d4:	4a5f      	ldr	r2, [pc, #380]	; (8002754 <SystemClock_Config+0x2ec>)
 80025d6:	401a      	ands	r2, r3
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	01db      	lsls	r3, r3, #7
 80025dc:	4313      	orrs	r3, r2
 80025de:	6063      	str	r3, [r4, #4]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025e0:	2238      	movs	r2, #56	; 0x38
 80025e2:	68a3      	ldr	r3, [r4, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	d130      	bne.n	800264c <SystemClock_Config+0x1e4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ec:	2238      	movs	r2, #56	; 0x38
 80025ee:	68a3      	ldr	r3, [r4, #8]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d03d      	beq.n	8002672 <SystemClock_Config+0x20a>
        __HAL_RCC_PLL_DISABLE();
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	4a5f      	ldr	r2, [pc, #380]	; (8002778 <SystemClock_Config+0x310>)
 80025fa:	4013      	ands	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fc:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002602:	0492      	lsls	r2, r2, #18
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	4213      	tst	r3, r2
 8002608:	d12e      	bne.n	8002668 <SystemClock_Config+0x200>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800260a:	68e3      	ldr	r3, [r4, #12]
 800260c:	4a5b      	ldr	r2, [pc, #364]	; (800277c <SystemClock_Config+0x314>)
 800260e:	401a      	ands	r2, r3
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <SystemClock_Config+0x318>)
 8002612:	4313      	orrs	r3, r2
 8002614:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	6822      	ldr	r2, [r4, #0]
 800261a:	045b      	lsls	r3, r3, #17
 800261c:	4313      	orrs	r3, r2
 800261e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	68e2      	ldr	r2, [r4, #12]
 8002624:	055b      	lsls	r3, r3, #21
 8002626:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800262a:	60e3      	str	r3, [r4, #12]
 800262c:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	0492      	lsls	r2, r2, #18
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	4213      	tst	r3, r2
 8002634:	d000      	beq.n	8002638 <SystemClock_Config+0x1d0>
 8002636:	e756      	b.n	80024e6 <SystemClock_Config+0x7e>
 8002638:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	1a5b      	subs	r3, r3, r1
 800263c:	2b02      	cmp	r3, #2
 800263e:	d9f7      	bls.n	8002630 <SystemClock_Config+0x1c8>
 8002640:	e751      	b.n	80024e6 <SystemClock_Config+0x7e>
 8002642:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	1a5b      	subs	r3, r3, r1
 8002646:	2b02      	cmp	r3, #2
 8002648:	d9c0      	bls.n	80025cc <SystemClock_Config+0x164>
 800264a:	e74c      	b.n	80024e6 <SystemClock_Config+0x7e>
        __HAL_RCC_LSI_ENABLE();
 800264c:	2301      	movs	r3, #1
 800264e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002650:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002652:	2202      	movs	r2, #2
        __HAL_RCC_LSI_ENABLE();
 8002654:	6623      	str	r3, [r4, #96]	; 0x60
 8002656:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002658:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800265a:	4213      	tst	r3, r2
 800265c:	d1c6      	bne.n	80025ec <SystemClock_Config+0x184>
 800265e:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	1a5b      	subs	r3, r3, r1
 8002662:	2b02      	cmp	r3, #2
 8002664:	d9f8      	bls.n	8002658 <SystemClock_Config+0x1f0>
 8002666:	e73e      	b.n	80024e6 <SystemClock_Config+0x7e>
 8002668:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800266a:	1a5b      	subs	r3, r3, r1
 800266c:	2b02      	cmp	r3, #2
 800266e:	d9c9      	bls.n	8002604 <SystemClock_Config+0x19c>
 8002670:	e739      	b.n	80024e6 <SystemClock_Config+0x7e>
        temp_pllckcfg = RCC->PLLCFGR;
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	e737      	b.n	80024e6 <SystemClock_Config+0x7e>
 8002676:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	1a09      	subs	r1, r1, r0
 800267a:	4561      	cmp	r1, ip
 800267c:	d800      	bhi.n	8002680 <SystemClock_Config+0x218>
 800267e:	e740      	b.n	8002502 <SystemClock_Config+0x9a>
 8002680:	e751      	b.n	8002526 <SystemClock_Config+0xbe>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002682:	2107      	movs	r1, #7
 8002684:	68a2      	ldr	r2, [r4, #8]
 8002686:	438a      	bics	r2, r1
 8002688:	0011      	movs	r1, r2
 800268a:	2202      	movs	r2, #2
 800268c:	430a      	orrs	r2, r1
 800268e:	60a2      	str	r2, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	4a35      	ldr	r2, [pc, #212]	; (8002768 <SystemClock_Config+0x300>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	2138      	movs	r1, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	4694      	mov	ip, r2
 8002696:	6828      	ldr	r0, [r5, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002698:	68a2      	ldr	r2, [r4, #8]
 800269a:	400a      	ands	r2, r1
 800269c:	2a10      	cmp	r2, #16
 800269e:	d119      	bne.n	80026d4 <SystemClock_Config+0x26c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	3a09      	subs	r2, #9
 80026a4:	4011      	ands	r1, r2
 80026a6:	2902      	cmp	r1, #2
 80026a8:	d819      	bhi.n	80026de <SystemClock_Config+0x276>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026aa:	68a3      	ldr	r3, [r4, #8]
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <SystemClock_Config+0x31c>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026b2:	f009 f811 	bl	800b6d8 <HAL_RCC_GetSysClockFreq>
 80026b6:	68a3      	ldr	r3, [r4, #8]
 80026b8:	4a33      	ldr	r2, [pc, #204]	; (8002788 <SystemClock_Config+0x320>)
 80026ba:	051b      	lsls	r3, r3, #20
 80026bc:	0f1b      	lsrs	r3, r3, #28
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	589b      	ldr	r3, [r3, r2]
 80026c2:	221f      	movs	r2, #31
 80026c4:	4013      	ands	r3, r2
 80026c6:	40d8      	lsrs	r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026c8:	4b25      	ldr	r3, [pc, #148]	; (8002760 <SystemClock_Config+0x2f8>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026ca:	6038      	str	r0, [r7, #0]
  return HAL_InitTick(uwTickPrio);
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	f008 fd55 	bl	800b17c <HAL_InitTick>
 80026d2:	e728      	b.n	8002526 <SystemClock_Config+0xbe>
 80026d4:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d6:	1a12      	subs	r2, r2, r0
 80026d8:	4562      	cmp	r2, ip
 80026da:	d9dd      	bls.n	8002698 <SystemClock_Config+0x230>
 80026dc:	e723      	b.n	8002526 <SystemClock_Config+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026de:	2102      	movs	r1, #2
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	4390      	bics	r0, r2
 80026e4:	4301      	orrs	r1, r0
 80026e6:	6019      	str	r1, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	491f      	ldr	r1, [pc, #124]	; (8002768 <SystemClock_Config+0x300>)
 80026ea:	6828      	ldr	r0, [r5, #0]
 80026ec:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	4011      	ands	r1, r2
 80026f2:	2902      	cmp	r1, #2
 80026f4:	d0d9      	beq.n	80026aa <SystemClock_Config+0x242>
 80026f6:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	1a09      	subs	r1, r1, r0
 80026fa:	4561      	cmp	r1, ip
 80026fc:	d9f7      	bls.n	80026ee <SystemClock_Config+0x286>
 80026fe:	e712      	b.n	8002526 <SystemClock_Config+0xbe>
 8002700:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	1a12      	subs	r2, r2, r0
 8002704:	2a02      	cmp	r2, #2
 8002706:	d800      	bhi.n	800270a <SystemClock_Config+0x2a2>
 8002708:	e721      	b.n	800254e <SystemClock_Config+0xe6>
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800270a:	2901      	cmp	r1, #1
 800270c:	d103      	bne.n	8002716 <SystemClock_Config+0x2ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002710:	4a1e      	ldr	r2, [pc, #120]	; (800278c <SystemClock_Config+0x324>)
 8002712:	4013      	ands	r3, r2
 8002714:	63e3      	str	r3, [r4, #60]	; 0x3c
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002716:	2203      	movs	r2, #3
 8002718:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800271a:	4393      	bics	r3, r2
 800271c:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800271e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002720:	3209      	adds	r2, #9
 8002722:	4393      	bics	r3, r2
 8002724:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002726:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <SystemClock_Config+0x328>)
 800272a:	4013      	ands	r3, r2
 800272c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800272e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002730:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	1a1b      	subs	r3, r3, r0
 8002734:	42b3      	cmp	r3, r6
 8002736:	d800      	bhi.n	800273a <SystemClock_Config+0x2d2>
 8002738:	e728      	b.n	800258c <SystemClock_Config+0x124>
 800273a:	e7e6      	b.n	800270a <SystemClock_Config+0x2a2>
 800273c:	40007000 	.word	0x40007000
 8002740:	fffff9ff 	.word	0xfffff9ff
 8002744:	20000000 	.word	0x20000000
 8002748:	000f4240 	.word	0x000f4240
 800274c:	40021000 	.word	0x40021000
 8002750:	200003ec 	.word	0x200003ec
 8002754:	ffff80ff 	.word	0xffff80ff
 8002758:	ffffc7ff 	.word	0xffffc7ff
 800275c:	00f42400 	.word	0x00f42400
 8002760:	20000004 	.word	0x20000004
 8002764:	40022000 	.word	0x40022000
 8002768:	00001388 	.word	0x00001388
 800276c:	fffff0ff 	.word	0xfffff0ff
 8002770:	fffffcff 	.word	0xfffffcff
 8002774:	fffeffff 	.word	0xfffeffff
 8002778:	feffffff 	.word	0xfeffffff
 800277c:	11c1808c 	.word	0x11c1808c
 8002780:	22020802 	.word	0x22020802
 8002784:	ffff8fff 	.word	0xffff8fff
 8002788:	080156f8 	.word	0x080156f8
 800278c:	efffffff 	.word	0xefffffff
 8002790:	ffffcfff 	.word	0xffffcfff

08002794 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 8002794:	b40c      	push	{r2, r3}
 8002796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002798:	464f      	mov	r7, r9
 800279a:	4646      	mov	r6, r8
 800279c:	46d6      	mov	lr, sl
 800279e:	b5c0      	push	{r6, r7, lr}
 80027a0:	b0ac      	sub	sp, #176	; 0xb0
 80027a2:	ab34      	add	r3, sp, #208	; 0xd0
 80027a4:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80027a6:	ad06      	add	r5, sp, #24
{
 80027a8:	0006      	movs	r6, r0
 80027aa:	4689      	mov	r9, r1
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80027ac:	0028      	movs	r0, r5
 80027ae:	2196      	movs	r1, #150	; 0x96
	va_start(ap, format);
 80027b0:	9305      	str	r3, [sp, #20]
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80027b2:	f012 fbc9 	bl	8014f48 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 80027b6:	2895      	cmp	r0, #149	; 0x95
 80027b8:	dd06      	ble.n	80027c8 <acc_integration_log+0x34>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80027ba:	23aa      	movs	r3, #170	; 0xaa
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <acc_integration_log+0xac>)
 80027be:	446b      	add	r3, sp
 80027c0:	801a      	strh	r2, [r3, #0]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80027c2:	222e      	movs	r2, #46	; 0x2e
 80027c4:	ab2b      	add	r3, sp, #172	; 0xac
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <acc_integration_log+0xb0>)

	uint32_t time_ms = acc_integration_get_time();
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80027ca:	491f      	ldr	r1, [pc, #124]	; (8002848 <acc_integration_log+0xb4>)
 80027cc:	681c      	ldr	r4, [r3, #0]
 80027ce:	0020      	movs	r0, r4
 80027d0:	f00c f9de 	bl	800eb90 <__udivsi3>
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80027d4:	491d      	ldr	r1, [pc, #116]	; (800284c <acc_integration_log+0xb8>)
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 80027d6:	0007      	movs	r7, r0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 80027d8:	0020      	movs	r0, r4
 80027da:	f00c f9d9 	bl	800eb90 <__udivsi3>
 80027de:	213c      	movs	r1, #60	; 0x3c
 80027e0:	f00c fa5c 	bl	800ec9c <__aeabi_uidivmod>
 80027e4:	4688      	mov	r8, r1
	unsigned int seconds      = timestamp / 1000 % 60;
 80027e6:	21fa      	movs	r1, #250	; 0xfa
 80027e8:	0020      	movs	r0, r4
 80027ea:	0089      	lsls	r1, r1, #2
 80027ec:	f00c f9d0 	bl	800eb90 <__udivsi3>
 80027f0:	213c      	movs	r1, #60	; 0x3c
 80027f2:	f00c fa53 	bl	800ec9c <__aeabi_uidivmod>
 80027f6:	468a      	mov	sl, r1
	unsigned int milliseconds = timestamp % 1000;
 80027f8:	21fa      	movs	r1, #250	; 0xfa
 80027fa:	0020      	movs	r0, r4
 80027fc:	0089      	lsls	r1, r1, #2
 80027fe:	f00c fa4d 	bl	800ec9c <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8002802:	233f      	movs	r3, #63	; 0x3f
 8002804:	2e04      	cmp	r6, #4
 8002806:	d801      	bhi.n	800280c <acc_integration_log+0x78>
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <acc_integration_log+0xbc>)
 800280a:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 800280c:	464a      	mov	r2, r9
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	9202      	str	r2, [sp, #8]
 8002812:	9100      	str	r1, [sp, #0]
 8002814:	4653      	mov	r3, sl
 8002816:	4642      	mov	r2, r8
 8002818:	0039      	movs	r1, r7
 800281a:	9503      	str	r5, [sp, #12]
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <acc_integration_log+0xc0>)
 800281e:	f012 fb71 	bl	8014f04 <__wrap_printf>

	fflush(stdout);
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <acc_integration_log+0xc4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6898      	ldr	r0, [r3, #8]
 8002828:	f010 fa0a 	bl	8012c40 <fflush>

	va_end(ap);
}
 800282c:	b02c      	add	sp, #176	; 0xb0
 800282e:	bc1c      	pop	{r2, r3, r4}
 8002830:	4690      	mov	r8, r2
 8002832:	4699      	mov	r9, r3
 8002834:	46a2      	mov	sl, r4
 8002836:	bcf0      	pop	{r4, r5, r6, r7}
 8002838:	bc08      	pop	{r3}
 800283a:	b002      	add	sp, #8
 800283c:	4718      	bx	r3
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	00002e2e 	.word	0x00002e2e
 8002844:	200003ec 	.word	0x200003ec
 8002848:	0036ee80 	.word	0x0036ee80
 800284c:	0000ea60 	.word	0x0000ea60
 8002850:	0801be05 	.word	0x0801be05
 8002854:	0801bde3 	.word	0x0801bde3
 8002858:	20000008 	.word	0x20000008

0800285c <acc_hal_integration_sensor_hibernate_exit>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800285c:	2280      	movs	r2, #128	; 0x80


static void acc_hal_integration_sensor_hibernate_exit(acc_sensor_id_t sensor_id)
{
 800285e:	b510      	push	{r4, lr}
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <acc_hal_integration_sensor_hibernate_exit+0x1c>)
 8002862:	0092      	lsls	r2, r2, #2
 8002864:	619a      	str	r2, [r3, #24]
	(void)sensor_id;  // Ignore parameter sensor_id

	// Turn on sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8002866:	2003      	movs	r0, #3
 8002868:	f7fd ffbc 	bl	80007e4 <pulse_hibernate_pin>

	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 800286c:	f007 ff34 	bl	800a6d8 <acc_integration_sleep_us.constprop.149>

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8002870:	200a      	movs	r0, #10
 8002872:	f7fd ffb7 	bl	80007e4 <pulse_hibernate_pin>
}
 8002876:	bd10      	pop	{r4, pc}
 8002878:	50000400 	.word	0x50000400

0800287c <acc_hal_integration_sensor_power_off>:
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287c:	2201      	movs	r2, #1
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <acc_hal_integration_sensor_power_off+0x20>)
{
 8002880:	b510      	push	{r4, lr}
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
 8002886:	22a0      	movs	r2, #160	; 0xa0
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	05d2      	lsls	r2, r2, #23
 800288c:	6291      	str	r1, [r2, #40]	; 0x28
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	629a      	str	r2, [r3, #40]	; 0x28
	acc_integration_sleep_us(2000);
 8002894:	f007 ff20 	bl	800a6d8 <acc_integration_sleep_us.constprop.149>
}
 8002898:	bd10      	pop	{r4, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	50000400 	.word	0x50000400

080028a0 <acc_hal_integration_sensor_power_on>:
 80028a0:	2210      	movs	r2, #16
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <acc_hal_integration_sensor_power_on+0x24>)
{
 80028a4:	b510      	push	{r4, lr}
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028a8:	32f1      	adds	r2, #241	; 0xf1
 80028aa:	32ff      	adds	r2, #255	; 0xff
 80028ac:	619a      	str	r2, [r3, #24]
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	22a0      	movs	r2, #160	; 0xa0
 80028b2:	0049      	lsls	r1, r1, #1
 80028b4:	05d2      	lsls	r2, r2, #23
 80028b6:	6191      	str	r1, [r2, #24]
 80028b8:	2201      	movs	r2, #1
 80028ba:	619a      	str	r2, [r3, #24]
	acc_integration_sleep_us(2000);
 80028bc:	f007 ff0c 	bl	800a6d8 <acc_integration_sleep_us.constprop.149>
}
 80028c0:	bd10      	pop	{r4, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	50000400 	.word	0x50000400

080028c8 <acc_hal_integration_sensor_transfer>:
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	4657      	mov	r7, sl
 80028cc:	4645      	mov	r5, r8
 80028ce:	46de      	mov	lr, fp
 80028d0:	464e      	mov	r6, r9

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d2:	4cbb      	ldr	r4, [pc, #748]	; (8002bc0 <acc_hal_integration_sensor_transfer+0x2f8>)
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028d4:	2001      	movs	r0, #1
 80028d6:	0023      	movs	r3, r4
 80028d8:	b5e0      	push	{r5, r6, r7, lr}
 80028da:	4fba      	ldr	r7, [pc, #744]	; (8002bc4 <acc_hal_integration_sensor_transfer+0x2fc>)
 80028dc:	335c      	adds	r3, #92	; 0x5c
 80028de:	62b8      	str	r0, [r7, #40]	; 0x28
 80028e0:	781d      	ldrb	r5, [r3, #0]
 80028e2:	b083      	sub	sp, #12
 80028e4:	9701      	str	r7, [sp, #4]
 80028e6:	4285      	cmp	r5, r0
 80028e8:	d100      	bne.n	80028ec <acc_hal_integration_sensor_transfer+0x24>
 80028ea:	e0f3      	b.n	8002ad4 <acc_hal_integration_sensor_transfer+0x20c>
 80028ec:	7018      	strb	r0, [r3, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028ee:	0023      	movs	r3, r4
 80028f0:	4db5      	ldr	r5, [pc, #724]	; (8002bc8 <acc_hal_integration_sensor_transfer+0x300>)
 80028f2:	335d      	adds	r3, #93	; 0x5d
 80028f4:	682e      	ldr	r6, [r5, #0]
 80028f6:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028f8:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 80028fa:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80028fc:	4684      	mov	ip, r0
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d00b      	beq.n	800291a <acc_hal_integration_sensor_transfer+0x52>
 8002902:	2082      	movs	r0, #130	; 0x82
 8002904:	0040      	lsls	r0, r0, #1
 8002906:	4584      	cmp	ip, r0
 8002908:	d000      	beq.n	800290c <acc_hal_integration_sensor_transfer+0x44>
 800290a:	e0dc      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800290c:	68a0      	ldr	r0, [r4, #8]
 800290e:	2800      	cmp	r0, #0
 8002910:	d000      	beq.n	8002914 <acc_hal_integration_sensor_transfer+0x4c>
 8002912:	e0d8      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
 8002914:	2b04      	cmp	r3, #4
 8002916:	d000      	beq.n	800291a <acc_hal_integration_sensor_transfer+0x52>
 8002918:	e0d5      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800291a:	2900      	cmp	r1, #0
 800291c:	d100      	bne.n	8002920 <acc_hal_integration_sensor_transfer+0x58>
 800291e:	e0d2      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8002920:	b292      	uxth	r2, r2
 8002922:	2a00      	cmp	r2, #0
 8002924:	d100      	bne.n	8002928 <acc_hal_integration_sensor_transfer+0x60>
 8002926:	e0ce      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002928:	0023      	movs	r3, r4
 800292a:	335d      	adds	r3, #93	; 0x5d
 800292c:	7818      	ldrb	r0, [r3, #0]
 800292e:	2804      	cmp	r0, #4
 8002930:	d001      	beq.n	8002936 <acc_hal_integration_sensor_transfer+0x6e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002932:	2005      	movs	r0, #5
 8002934:	7018      	strb	r0, [r3, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002936:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8002938:	0020      	movs	r0, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800293c:	3008      	adds	r0, #8
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800293e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002940:	6523      	str	r3, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002942:	68e3      	ldr	r3, [r4, #12]
  hspi->RxXferCount = Size;
 8002944:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002946:	1da0      	adds	r0, r4, #6
 8002948:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800294a:	4698      	mov	r8, r3
 800294c:	20e0      	movs	r0, #224	; 0xe0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800294e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002950:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002952:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002954:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8002956:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002958:	00c0      	lsls	r0, r0, #3
 800295a:	4580      	cmp	r8, r0
 800295c:	d801      	bhi.n	8002962 <acc_hal_integration_sensor_transfer+0x9a>
 800295e:	2a01      	cmp	r2, #1
 8002960:	d06c      	beq.n	8002a3c <acc_hal_integration_sensor_transfer+0x174>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002962:	6858      	ldr	r0, [r3, #4]
 8002964:	4f99      	ldr	r7, [pc, #612]	; (8002bcc <acc_hal_integration_sensor_transfer+0x304>)
 8002966:	4038      	ands	r0, r7
 8002968:	6058      	str	r0, [r3, #4]
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	4681      	mov	r9, r0
 800296e:	2040      	movs	r0, #64	; 0x40
 8002970:	464f      	mov	r7, r9
 8002972:	4207      	tst	r7, r0
 8002974:	d102      	bne.n	800297c <acc_hal_integration_sensor_transfer+0xb4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002976:	681f      	ldr	r7, [r3, #0]
 8002978:	4338      	orrs	r0, r7
 800297a:	6018      	str	r0, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297c:	20e0      	movs	r0, #224	; 0xe0
 800297e:	00c0      	lsls	r0, r0, #3
 8002980:	4580      	cmp	r8, r0
 8002982:	d800      	bhi.n	8002986 <acc_hal_integration_sensor_transfer+0xbe>
 8002984:	e0b0      	b.n	8002ae8 <acc_hal_integration_sensor_transfer+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002986:	4660      	mov	r0, ip
 8002988:	2800      	cmp	r0, #0
 800298a:	d001      	beq.n	8002990 <acc_hal_integration_sensor_transfer+0xc8>
 800298c:	2a01      	cmp	r2, #1
 800298e:	d107      	bne.n	80029a0 <acc_hal_integration_sensor_transfer+0xd8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002990:	880a      	ldrh	r2, [r1, #0]
 8002992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002994:	1c8a      	adds	r2, r1, #2
 8002996:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002998:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800299a:	3a01      	subs	r2, #1
 800299c:	b292      	uxth	r2, r2
 800299e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 80029a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a2:	2708      	movs	r7, #8
 80029a4:	9200      	str	r2, [sp, #0]
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029a6:	2200      	movs	r2, #0
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	46b8      	mov	r8, r7
        txallowed = 1U;
 80029aa:	4694      	mov	ip, r2
 80029ac:	4691      	mov	r9, r2
 80029ae:	3201      	adds	r2, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029b0:	4693      	mov	fp, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b2:	44a0      	add	r8, r4
 80029b4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d148      	bne.n	8002a4c <acc_hal_integration_sensor_transfer+0x184>
 80029ba:	4640      	mov	r0, r8
 80029bc:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 80029be:	2800      	cmp	r0, #0
 80029c0:	d144      	bne.n	8002a4c <acc_hal_integration_sensor_transfer+0x184>
 80029c2:	464b      	mov	r3, r9
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <acc_hal_integration_sensor_transfer+0x104>
 80029c8:	9b00      	ldr	r3, [sp, #0]
 80029ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80029cc:	4663      	mov	r3, ip
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d000      	beq.n	80029d4 <acc_hal_integration_sensor_transfer+0x10c>
 80029d2:	6421      	str	r1, [r4, #64]	; 0x40
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 80029d4:	22c0      	movs	r2, #192	; 0xc0
 80029d6:	6821      	ldr	r1, [r4, #0]
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029d8:	487d      	ldr	r0, [pc, #500]	; (8002bd0 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 80029da:	0152      	lsls	r2, r2, #5
 80029dc:	688b      	ldr	r3, [r1, #8]
 80029de:	4213      	tst	r3, r2
 80029e0:	d007      	beq.n	80029f2 <acc_hal_integration_sensor_transfer+0x12a>
 80029e2:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029e4:	1b9b      	subs	r3, r3, r6
 80029e6:	4283      	cmp	r3, r0
 80029e8:	d9f8      	bls.n	80029dc <acc_hal_integration_sensor_transfer+0x114>
 80029ea:	f007 fda0 	bl	800a52e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029ee:	2800      	cmp	r0, #0
 80029f0:	d11d      	bne.n	8002a2e <acc_hal_integration_sensor_transfer+0x166>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80029f6:	4876      	ldr	r0, [pc, #472]	; (8002bd0 <acc_hal_integration_sensor_transfer+0x308>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f8:	688b      	ldr	r3, [r1, #8]
 80029fa:	4213      	tst	r3, r2
 80029fc:	d007      	beq.n	8002a0e <acc_hal_integration_sensor_transfer+0x146>
 80029fe:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a00:	1b9b      	subs	r3, r3, r6
 8002a02:	4283      	cmp	r3, r0
 8002a04:	d9f8      	bls.n	80029f8 <acc_hal_integration_sensor_transfer+0x130>
 8002a06:	f007 fd92 	bl	800a52e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d10f      	bne.n	8002a2e <acc_hal_integration_sensor_transfer+0x166>
  while ((hspi->Instance->SR & Fifo) != State)
 8002a0e:	21c0      	movs	r1, #192	; 0xc0
 8002a10:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a12:	486f      	ldr	r0, [pc, #444]	; (8002bd0 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8002a14:	00c9      	lsls	r1, r1, #3
 8002a16:	6893      	ldr	r3, [r2, #8]
 8002a18:	420b      	tst	r3, r1
 8002a1a:	d054      	beq.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002a1c:	7b13      	ldrb	r3, [r2, #12]
 8002a1e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002a20:	1b9b      	subs	r3, r3, r6
 8002a22:	4283      	cmp	r3, r0
 8002a24:	d9f7      	bls.n	8002a16 <acc_hal_integration_sensor_transfer+0x14e>
 8002a26:	f007 fd82 	bl	800a52e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d04b      	beq.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2e:	2320      	movs	r3, #32
 8002a30:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002a32:	4313      	orrs	r3, r2
 8002a34:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a36:	2320      	movs	r3, #32
 8002a38:	6623      	str	r3, [r4, #96]	; 0x60
 8002a3a:	e044      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a3c:	6858      	ldr	r0, [r3, #4]
 8002a3e:	4681      	mov	r9, r0
 8002a40:	2080      	movs	r0, #128	; 0x80
 8002a42:	464f      	mov	r7, r9
 8002a44:	0140      	lsls	r0, r0, #5
 8002a46:	4338      	orrs	r0, r7
 8002a48:	6058      	str	r0, [r3, #4]
 8002a4a:	e78e      	b.n	800296a <acc_hal_integration_sensor_transfer+0xa2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	689f      	ldr	r7, [r3, #8]
 8002a50:	4207      	tst	r7, r0
 8002a52:	d015      	beq.n	8002a80 <acc_hal_integration_sensor_transfer+0x1b8>
 8002a54:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d012      	beq.n	8002a80 <acc_hal_integration_sensor_transfer+0x1b8>
 8002a5a:	2a01      	cmp	r2, #1
 8002a5c:	d110      	bne.n	8002a80 <acc_hal_integration_sensor_transfer+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a5e:	9800      	ldr	r0, [sp, #0]
 8002a60:	8800      	ldrh	r0, [r0, #0]
 8002a62:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a64:	9800      	ldr	r0, [sp, #0]
 8002a66:	3002      	adds	r0, #2
 8002a68:	9000      	str	r0, [sp, #0]
        hspi->TxXferCount--;
 8002a6a:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8002a6c:	4681      	mov	r9, r0
 8002a6e:	2001      	movs	r0, #1
 8002a70:	4240      	negs	r0, r0
 8002a72:	4682      	mov	sl, r0
 8002a74:	44d1      	add	r9, sl
 8002a76:	4648      	mov	r0, r9
 8002a78:	4691      	mov	r9, r2
        txallowed = 0U;
 8002a7a:	2200      	movs	r2, #0
        hspi->TxXferCount--;
 8002a7c:	b280      	uxth	r0, r0
 8002a7e:	87e0      	strh	r0, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a80:	465f      	mov	r7, fp
 8002a82:	6898      	ldr	r0, [r3, #8]
 8002a84:	4238      	tst	r0, r7
 8002a86:	d00e      	beq.n	8002aa6 <acc_hal_integration_sensor_transfer+0x1de>
 8002a88:	4640      	mov	r0, r8
 8002a8a:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d00a      	beq.n	8002aa6 <acc_hal_integration_sensor_transfer+0x1de>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a90:	68da      	ldr	r2, [r3, #12]
        hspi->RxXferCount--;
 8002a92:	4640      	mov	r0, r8
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a94:	800a      	strh	r2, [r1, #0]
        hspi->RxXferCount--;
 8002a96:	4642      	mov	r2, r8
 8002a98:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8002a9a:	46dc      	mov	ip, fp
 8002a9c:	3a01      	subs	r2, #1
 8002a9e:	b292      	uxth	r2, r2
 8002aa0:	87c2      	strh	r2, [r0, #62]	; 0x3e
        txallowed = 1U;
 8002aa2:	2201      	movs	r2, #1
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aa4:	3102      	adds	r1, #2
 8002aa6:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002aa8:	1b80      	subs	r0, r0, r6
 8002aaa:	4682      	mov	sl, r0
 8002aac:	4848      	ldr	r0, [pc, #288]	; (8002bd0 <acc_hal_integration_sensor_transfer+0x308>)
 8002aae:	4582      	cmp	sl, r0
 8002ab0:	d800      	bhi.n	8002ab4 <acc_hal_integration_sensor_transfer+0x1ec>
 8002ab2:	e77f      	b.n	80029b4 <acc_hal_integration_sensor_transfer+0xec>
 8002ab4:	464b      	mov	r3, r9
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <acc_hal_integration_sensor_transfer+0x1f6>
 8002aba:	9b00      	ldr	r3, [sp, #0]
 8002abc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002abe:	4663      	mov	r3, ip
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d000      	beq.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
 8002ac4:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->State = HAL_SPI_STATE_READY;
 8002ac6:	0023      	movs	r3, r4
 8002ac8:	2201      	movs	r2, #1
 8002aca:	335d      	adds	r3, #93	; 0x5d
 8002acc:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	345c      	adds	r4, #92	; 0x5c
 8002ad2:	7023      	strb	r3, [r4, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	9a01      	ldr	r2, [sp, #4]
 8002ad8:	6193      	str	r3, [r2, #24]
}
 8002ada:	b003      	add	sp, #12
 8002adc:	bc3c      	pop	{r2, r3, r4, r5}
 8002ade:	4690      	mov	r8, r2
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	46ab      	mov	fp, r5
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae8:	4660      	mov	r0, ip
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d001      	beq.n	8002af2 <acc_hal_integration_sensor_transfer+0x22a>
 8002aee:	2a01      	cmp	r2, #1
 8002af0:	d10a      	bne.n	8002b08 <acc_hal_integration_sensor_transfer+0x240>
      if (hspi->TxXferCount > 1U)
 8002af2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002af4:	2a01      	cmp	r2, #1
 8002af6:	d958      	bls.n	8002baa <acc_hal_integration_sensor_transfer+0x2e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002af8:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002afa:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8002afe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b00:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b02:	3b02      	subs	r3, #2
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b08:	2202      	movs	r2, #2
 8002b0a:	4694      	mov	ip, r2
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b0c:	2280      	movs	r2, #128	; 0x80
        txallowed = 1U;
 8002b0e:	2101      	movs	r1, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b10:	0152      	lsls	r2, r2, #5
 8002b12:	4690      	mov	r8, r2
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b14:	4a2e      	ldr	r2, [pc, #184]	; (8002bd0 <acc_hal_integration_sensor_transfer+0x308>)
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b16:	0023      	movs	r3, r4
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b18:	468b      	mov	fp, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b1a:	4691      	mov	r9, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b1c:	3308      	adds	r3, #8
 8002b1e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002b20:	2a00      	cmp	r2, #0
 8002b22:	d103      	bne.n	8002b2c <acc_hal_integration_sensor_transfer+0x264>
 8002b24:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002b26:	2a00      	cmp	r2, #0
 8002b28:	d100      	bne.n	8002b2c <acc_hal_integration_sensor_transfer+0x264>
 8002b2a:	e753      	b.n	80029d4 <acc_hal_integration_sensor_transfer+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b2c:	4660      	mov	r0, ip
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	6897      	ldr	r7, [r2, #8]
 8002b32:	4207      	tst	r7, r0
 8002b34:	d013      	beq.n	8002b5e <acc_hal_integration_sensor_transfer+0x296>
 8002b36:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d010      	beq.n	8002b5e <acc_hal_integration_sensor_transfer+0x296>
 8002b3c:	2901      	cmp	r1, #1
 8002b3e:	d10e      	bne.n	8002b5e <acc_hal_integration_sensor_transfer+0x296>
        if (hspi->TxXferCount > 1U)
 8002b40:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002b42:	468a      	mov	sl, r1
 8002b44:	4650      	mov	r0, sl
 8002b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002b48:	2801      	cmp	r0, #1
 8002b4a:	d943      	bls.n	8002bd4 <acc_hal_integration_sensor_transfer+0x30c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4c:	8808      	ldrh	r0, [r1, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4e:	3102      	adds	r1, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b50:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b52:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b54:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002b56:	3902      	subs	r1, #2
 8002b58:	b289      	uxth	r1, r1
 8002b5a:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002b5c:	2100      	movs	r1, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b5e:	465f      	mov	r7, fp
 8002b60:	6890      	ldr	r0, [r2, #8]
 8002b62:	4238      	tst	r0, r7
 8002b64:	d01b      	beq.n	8002b9e <acc_hal_integration_sensor_transfer+0x2d6>
 8002b66:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d018      	beq.n	8002b9e <acc_hal_integration_sensor_transfer+0x2d6>
        if (hspi->RxXferCount > 1U)
 8002b6c:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002b6e:	468a      	mov	sl, r1
 8002b70:	4650      	mov	r0, sl
 8002b72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002b74:	2801      	cmp	r0, #1
 8002b76:	d938      	bls.n	8002bea <acc_hal_integration_sensor_transfer+0x322>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b78:	68d0      	ldr	r0, [r2, #12]
 8002b7a:	8008      	strh	r0, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b7c:	3102      	adds	r1, #2
 8002b7e:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b80:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002b82:	3902      	subs	r1, #2
 8002b84:	b289      	uxth	r1, r1
 8002b86:	87d9      	strh	r1, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8002b88:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002b8a:	468a      	mov	sl, r1
 8002b8c:	4650      	mov	r0, sl
        txallowed = 1U;
 8002b8e:	4659      	mov	r1, fp
          if (hspi->RxXferCount <= 1U)
 8002b90:	2801      	cmp	r0, #1
 8002b92:	d804      	bhi.n	8002b9e <acc_hal_integration_sensor_transfer+0x2d6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b94:	4640      	mov	r0, r8
 8002b96:	6851      	ldr	r1, [r2, #4]
 8002b98:	4301      	orrs	r1, r0
 8002b9a:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	682a      	ldr	r2, [r5, #0]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ba0:	1b92      	subs	r2, r2, r6
 8002ba2:	454a      	cmp	r2, r9
 8002ba4:	d900      	bls.n	8002ba8 <acc_hal_integration_sensor_transfer+0x2e0>
 8002ba6:	e78e      	b.n	8002ac6 <acc_hal_integration_sensor_transfer+0x1fe>
 8002ba8:	e7b9      	b.n	8002b1e <acc_hal_integration_sensor_transfer+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002baa:	780a      	ldrb	r2, [r1, #0]
 8002bac:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8002bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8002bbc:	e7a4      	b.n	8002b08 <acc_hal_integration_sensor_transfer+0x240>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	20000428 	.word	0x20000428
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	200003ec 	.word	0x200003ec
 8002bcc:	ffffefff 	.word	0xffffefff
 8002bd0:	00001387 	.word	0x00001387
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bd4:	7809      	ldrb	r1, [r1, #0]
 8002bd6:	7311      	strb	r1, [r2, #12]
          hspi->pTxBuffPtr++;
 8002bd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002bda:	3101      	adds	r1, #1
 8002bdc:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002bde:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8002be0:	3901      	subs	r1, #1
 8002be2:	b289      	uxth	r1, r1
 8002be4:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002be6:	2100      	movs	r1, #0
 8002be8:	e7b9      	b.n	8002b5e <acc_hal_integration_sensor_transfer+0x296>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bea:	7b12      	ldrb	r2, [r2, #12]
 8002bec:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8002bee:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 8002bf0:	4659      	mov	r1, fp
          hspi->pRxBuffPtr++;
 8002bf2:	3201      	adds	r2, #1
 8002bf4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002bf6:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002bf8:	3a01      	subs	r2, #1
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bfe:	e7ce      	b.n	8002b9e <acc_hal_integration_sensor_transfer+0x2d6>

08002c00 <acc_base_configuration_asynchronous_measurement_get>:
 8002c00:	b510      	push	{r4, lr}
 8002c02:	0004      	movs	r4, r0
 8002c04:	f003 fcf0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d001      	beq.n	8002c10 <acc_base_configuration_asynchronous_measurement_get+0x10>
 8002c0c:	344e      	adds	r4, #78	; 0x4e
 8002c0e:	7820      	ldrb	r0, [r4, #0]
 8002c10:	bd10      	pop	{r4, pc}

08002c12 <acc_base_configuration_noise_level_normalization_get>:
 8002c12:	b510      	push	{r4, lr}
 8002c14:	0004      	movs	r4, r0
 8002c16:	f003 fce7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d001      	beq.n	8002c22 <acc_base_configuration_noise_level_normalization_get+0x10>
 8002c1e:	3449      	adds	r4, #73	; 0x49
 8002c20:	7820      	ldrb	r0, [r4, #0]
 8002c22:	bd10      	pop	{r4, pc}

08002c24 <acc_base_configuration_downsampling_factor_get>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	0004      	movs	r4, r0
 8002c28:	f003 fcde 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	4298      	cmp	r0, r3
 8002c30:	d001      	beq.n	8002c36 <acc_base_configuration_downsampling_factor_get+0x12>
 8002c32:	3468      	adds	r4, #104	; 0x68
 8002c34:	8823      	ldrh	r3, [r4, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	bd10      	pop	{r4, pc}

08002c3a <envelope_create_service>:
 8002c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3c:	46de      	mov	lr, fp
 8002c3e:	464e      	mov	r6, r9
 8002c40:	4645      	mov	r5, r8
 8002c42:	4657      	mov	r7, sl
 8002c44:	b5e0      	push	{r5, r6, r7, lr}
 8002c46:	b0a9      	sub	sp, #164	; 0xa4
 8002c48:	9001      	str	r0, [sp, #4]
 8002c4a:	2290      	movs	r2, #144	; 0x90
 8002c4c:	a804      	add	r0, sp, #16
 8002c4e:	000d      	movs	r5, r1
 8002c50:	f012 fd28 	bl	80156a4 <memcpy>
 8002c54:	a80b      	add	r0, sp, #44	; 0x2c
 8002c56:	f7ff ffe5 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8002c5a:	0006      	movs	r6, r0
 8002c5c:	a80b      	add	r0, sp, #44	; 0x2c
 8002c5e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8002c60:	f003 fcc2 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d006      	beq.n	8002c76 <envelope_create_service+0x3c>
 8002c68:	0030      	movs	r0, r6
 8002c6a:	f00c fb75 	bl	800f358 <__aeabi_i2f>
 8002c6e:	1c21      	adds	r1, r4, #0
 8002c70:	f00b fc5c 	bl	800e52c <__aeabi_fmul>
 8002c74:	9013      	str	r0, [sp, #76]	; 0x4c
 8002c76:	a804      	add	r0, sp, #16
 8002c78:	f7fd fa70 	bl	800015c <acc_service_configuration_check>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	d101      	bne.n	8002c84 <envelope_create_service+0x4a>
 8002c80:	2000      	movs	r0, #0
 8002c82:	e009      	b.n	8002c98 <envelope_create_service+0x5e>
 8002c84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d10d      	bne.n	8002ca6 <envelope_create_service+0x6c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <envelope_create_service+0x16a>)
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	4a45      	ldr	r2, [pc, #276]	; (8002da8 <envelope_create_service+0x16e>)
 8002c92:	4946      	ldr	r1, [pc, #280]	; (8002dac <envelope_create_service+0x172>)
 8002c94:	4798      	blx	r3
 8002c96:	2000      	movs	r0, #0
 8002c98:	b029      	add	sp, #164	; 0xa4
 8002c9a:	bc3c      	pop	{r2, r3, r4, r5}
 8002c9c:	4690      	mov	r8, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	46a2      	mov	sl, r4
 8002ca2:	46ab      	mov	fp, r5
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca6:	a80b      	add	r0, sp, #44	; 0x2c
 8002ca8:	f003 fc9e 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d0e7      	beq.n	8002c80 <envelope_create_service+0x46>
 8002cb0:	a80b      	add	r0, sp, #44	; 0x2c
 8002cb2:	f003 fc19 	bl	80064e8 <acc_base_configuration_check.part.6>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d0e2      	beq.n	8002c80 <envelope_create_service+0x46>
 8002cba:	a80b      	add	r0, sp, #44	; 0x2c
 8002cbc:	f7ff ffb2 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8002cc0:	1e43      	subs	r3, r0, #1
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d908      	bls.n	8002cda <envelope_create_service+0xa0>
 8002cc8:	2804      	cmp	r0, #4
 8002cca:	d006      	beq.n	8002cda <envelope_create_service+0xa0>
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <envelope_create_service+0x16a>)
 8002cce:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <envelope_create_service+0x176>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	4936      	ldr	r1, [pc, #216]	; (8002dac <envelope_create_service+0x172>)
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	4798      	blx	r3
 8002cd8:	e7d2      	b.n	8002c80 <envelope_create_service+0x46>
 8002cda:	a80b      	add	r0, sp, #44	; 0x2c
 8002cdc:	f003 fc84 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002ce0:	1e04      	subs	r4, r0, #0
 8002ce2:	d004      	beq.n	8002cee <envelope_create_service+0xb4>
 8002ce4:	aa04      	add	r2, sp, #16
 8002ce6:	236b      	movs	r3, #107	; 0x6b
 8002ce8:	4694      	mov	ip, r2
 8002cea:	4463      	add	r3, ip
 8002cec:	781c      	ldrb	r4, [r3, #0]
 8002cee:	a80b      	add	r0, sp, #44	; 0x2c
 8002cf0:	f003 fc7a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d010      	beq.n	8002d1a <envelope_create_service+0xe0>
 8002cf8:	2c00      	cmp	r4, #0
 8002cfa:	d00e      	beq.n	8002d1a <envelope_create_service+0xe0>
 8002cfc:	ab11      	add	r3, sp, #68	; 0x44
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <envelope_create_service+0xe0>
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <envelope_create_service+0x16a>)
 8002d06:	001a      	movs	r2, r3
 8002d08:	3230      	adds	r2, #48	; 0x30
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d004      	beq.n	8002d1a <envelope_create_service+0xe0>
 8002d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d12:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <envelope_create_service+0x17a>)
 8002d14:	4925      	ldr	r1, [pc, #148]	; (8002dac <envelope_create_service+0x172>)
 8002d16:	2001      	movs	r0, #1
 8002d18:	4798      	blx	r3
 8002d1a:	792b      	ldrb	r3, [r5, #4]
 8002d1c:	9a01      	ldr	r2, [sp, #4]
 8002d1e:	2010      	movs	r0, #16
 8002d20:	7213      	strb	r3, [r2, #8]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <envelope_create_service+0x17e>)
 8002d26:	0052      	lsls	r2, r2, #1
 8002d28:	0019      	movs	r1, r3
 8002d2a:	4699      	mov	r9, r3
 8002d2c:	f007 ff5e 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8002d30:	2202      	movs	r2, #2
 8002d32:	0005      	movs	r5, r0
 8002d34:	20ec      	movs	r0, #236	; 0xec
 8002d36:	32ff      	adds	r2, #255	; 0xff
 8002d38:	4649      	mov	r1, r9
 8002d3a:	0080      	lsls	r0, r0, #2
 8002d3c:	f007 ff56 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8002d40:	0004      	movs	r4, r0
 8002d42:	2d00      	cmp	r5, #0
 8002d44:	d001      	beq.n	8002d4a <envelope_create_service+0x110>
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d10f      	bne.n	8002d6a <envelope_create_service+0x130>
 8002d4a:	0028      	movs	r0, r5
 8002d4c:	f003 f948 	bl	8005fe0 <acc_rss_integration_mem_free>
 8002d50:	0020      	movs	r0, r4
 8002d52:	f003 f945 	bl	8005fe0 <acc_rss_integration_mem_free>
 8002d56:	2500      	movs	r5, #0
 8002d58:	9b01      	ldr	r3, [sp, #4]
 8002d5a:	9a01      	ldr	r2, [sp, #4]
 8002d5c:	611d      	str	r5, [r3, #16]
 8002d5e:	1e68      	subs	r0, r5, #1
 8002d60:	4185      	sbcs	r5, r0
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <envelope_create_service+0x182>)
 8002d64:	b2e8      	uxtb	r0, r5
 8002d66:	60d3      	str	r3, [r2, #12]
 8002d68:	e796      	b.n	8002c98 <envelope_create_service+0x5e>
 8002d6a:	2318      	movs	r3, #24
 8002d6c:	469c      	mov	ip, r3
 8002d6e:	4484      	add	ip, r0
 8002d70:	4663      	mov	r3, ip
 8002d72:	9302      	str	r3, [sp, #8]
 8002d74:	23e3      	movs	r3, #227	; 0xe3
 8002d76:	6028      	str	r0, [r5, #0]
 8002d78:	9801      	ldr	r0, [sp, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3018      	adds	r0, #24
 8002d7e:	18e7      	adds	r7, r4, r3
 8002d80:	003b      	movs	r3, r7
 8002d82:	4662      	mov	r2, ip
 8002d84:	6760      	str	r0, [r4, #116]	; 0x74
 8002d86:	a90b      	add	r1, sp, #44	; 0x2c
 8002d88:	f003 fd3c 	bl	8006804 <acc_sensor_manager_prepare_radar_engine>
 8002d8c:	0023      	movs	r3, r4
 8002d8e:	897a      	ldrh	r2, [r7, #10]
 8002d90:	3370      	adds	r3, #112	; 0x70
 8002d92:	1e06      	subs	r6, r0, #0
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	d113      	bne.n	8002dc0 <envelope_create_service+0x186>
 8002d98:	0028      	movs	r0, r5
 8002d9a:	f003 f93d 	bl	8006018 <disassemble.lto_priv.316.lto_priv.641>
 8002d9e:	0035      	movs	r5, r6
 8002da0:	e7da      	b.n	8002d58 <envelope_create_service+0x11e>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	200003f0 	.word	0x200003f0
 8002da8:	0801be0b 	.word	0x0801be0b
 8002dac:	0801bae5 	.word	0x0801bae5
 8002db0:	0801be46 	.word	0x0801be46
 8002db4:	0801be66 	.word	0x0801be66
 8002db8:	0801beab 	.word	0x0801beab
 8002dbc:	0800018d 	.word	0x0800018d
 8002dc0:	a80b      	add	r0, sp, #44	; 0x2c
 8002dc2:	f003 fc11 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002dc6:	4682      	mov	sl, r0
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d002      	beq.n	8002dd2 <envelope_create_service+0x198>
 8002dcc:	ab11      	add	r3, sp, #68	; 0x44
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	469a      	mov	sl, r3
 8002dd2:	23e3      	movs	r3, #227	; 0xe3
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	5ae2      	ldrh	r2, [r4, r3]
 8002dd8:	89bb      	ldrh	r3, [r7, #12]
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d200      	bcs.n	8002de4 <envelope_create_service+0x1aa>
 8002de2:	0013      	movs	r3, r2
 8002de4:	897e      	ldrh	r6, [r7, #10]
 8002de6:	89fa      	ldrh	r2, [r7, #14]
 8002de8:	18b6      	adds	r6, r6, r2
 8002dea:	0076      	lsls	r6, r6, #1
 8002dec:	429e      	cmp	r6, r3
 8002dee:	d200      	bcs.n	8002df2 <envelope_create_service+0x1b8>
 8002df0:	001e      	movs	r6, r3
 8002df2:	a80b      	add	r0, sp, #44	; 0x2c
 8002df4:	f003 fbf8 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	4298      	cmp	r0, r3
 8002dfc:	d001      	beq.n	8002e02 <envelope_create_service+0x1c8>
 8002dfe:	ab20      	add	r3, sp, #128	; 0x80
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	4698      	mov	r8, r3
 8002e04:	42b3      	cmp	r3, r6
 8002e06:	d200      	bcs.n	8002e0a <envelope_create_service+0x1d0>
 8002e08:	46b0      	mov	r8, r6
 8002e0a:	23eb      	movs	r3, #235	; 0xeb
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	50e2      	str	r2, [r4, r3]
 8002e12:	4653      	mov	r3, sl
 8002e14:	4640      	mov	r0, r8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <envelope_create_service+0x1ec>
 8002e1a:	23e3      	movs	r3, #227	; 0xe3
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	5ae0      	ldrh	r0, [r4, r3]
 8002e20:	0080      	lsls	r0, r0, #2
 8002e22:	300a      	adds	r0, #10
 8002e24:	4440      	add	r0, r8
 8002e26:	2286      	movs	r2, #134	; 0x86
 8002e28:	4649      	mov	r1, r9
 8002e2a:	32ff      	adds	r2, #255	; 0xff
 8002e2c:	f003 f91c 	bl	8006068 <acc_rss_integration_mem_alloc_debug>
 8002e30:	23ea      	movs	r3, #234	; 0xea
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	1e06      	subs	r6, r0, #0
 8002e36:	50e0      	str	r0, [r4, r3]
 8002e38:	d0ae      	beq.n	8002d98 <envelope_create_service+0x15e>
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4699      	mov	r9, r3
 8002e40:	4653      	mov	r3, sl
 8002e42:	4481      	add	r9, r0
 8002e44:	46cb      	mov	fp, r9
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <envelope_create_service+0x218>
 8002e4a:	4643      	mov	r3, r8
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	469b      	mov	fp, r3
 8002e50:	4483      	add	fp, r0
 8002e52:	1da3      	adds	r3, r4, #6
 8002e54:	6623      	str	r3, [r4, #96]	; 0x60
 8002e56:	1de3      	adds	r3, r4, #7
 8002e58:	6663      	str	r3, [r4, #100]	; 0x64
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	469c      	mov	ip, r3
 8002e5e:	44a4      	add	ip, r4
 8002e60:	4663      	mov	r3, ip
 8002e62:	0027      	movs	r7, r4
 8002e64:	66a3      	str	r3, [r4, #104]	; 0x68
 8002e66:	9303      	str	r3, [sp, #12]
 8002e68:	3b04      	subs	r3, #4
 8002e6a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	3380      	adds	r3, #128	; 0x80
 8002e70:	1d22      	adds	r2, r4, #4
 8002e72:	64e6      	str	r6, [r4, #76]	; 0x4c
 8002e74:	65e7      	str	r7, [r4, #92]	; 0x5c
 8002e76:	65a4      	str	r4, [r4, #88]	; 0x58
 8002e78:	a80b      	add	r0, sp, #44	; 0x2c
 8002e7a:	601e      	str	r6, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	615f      	str	r7, [r3, #20]
 8002e80:	641e      	str	r6, [r3, #64]	; 0x40
 8002e82:	645e      	str	r6, [r3, #68]	; 0x44
 8002e84:	655f      	str	r7, [r3, #84]	; 0x54
 8002e86:	f7ff fec4 	bl	8002c12 <acc_base_configuration_noise_level_normalization_get>
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d004      	beq.n	8002e98 <envelope_create_service+0x25e>
 8002e8e:	0023      	movs	r3, r4
 8002e90:	33fc      	adds	r3, #252	; 0xfc
 8002e92:	60de      	str	r6, [r3, #12]
 8002e94:	611e      	str	r6, [r3, #16]
 8002e96:	621f      	str	r7, [r3, #32]
 8002e98:	0023      	movs	r3, r4
 8002e9a:	33fc      	adds	r3, #252	; 0xfc
 8002e9c:	64de      	str	r6, [r3, #76]	; 0x4c
 8002e9e:	651e      	str	r6, [r3, #80]	; 0x50
 8002ea0:	661f      	str	r7, [r3, #96]	; 0x60
 8002ea2:	23c2      	movs	r3, #194	; 0xc2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	50e6      	str	r6, [r4, r3]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	50e6      	str	r6, [r4, r3]
 8002eac:	9a03      	ldr	r2, [sp, #12]
 8002eae:	3310      	adds	r3, #16
 8002eb0:	50e7      	str	r7, [r4, r3]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	50e2      	str	r2, [r4, r3]
 8002eb6:	464a      	mov	r2, r9
 8002eb8:	3324      	adds	r3, #36	; 0x24
 8002eba:	50e6      	str	r6, [r4, r3]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	50e6      	str	r6, [r4, r3]
 8002ec0:	3310      	adds	r3, #16
 8002ec2:	50e7      	str	r7, [r4, r3]
 8002ec4:	3334      	adds	r3, #52	; 0x34
 8002ec6:	50e6      	str	r6, [r4, r3]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	50e2      	str	r2, [r4, r3]
 8002ecc:	3310      	adds	r3, #16
 8002ece:	50e7      	str	r7, [r4, r3]
 8002ed0:	3328      	adds	r3, #40	; 0x28
 8002ed2:	50e2      	str	r2, [r4, r3]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	50e2      	str	r2, [r4, r3]
 8002ed8:	3310      	adds	r3, #16
 8002eda:	50e7      	str	r7, [r4, r3]
 8002edc:	4653      	mov	r3, sl
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <envelope_create_service+0x2c4>
 8002ee2:	23a8      	movs	r3, #168	; 0xa8
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	50e2      	str	r2, [r4, r3]
 8002ee8:	4643      	mov	r3, r8
 8002eea:	22ab      	movs	r2, #171	; 0xab
 8002eec:	18f3      	adds	r3, r6, r3
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	50a3      	str	r3, [r4, r2]
 8002ef2:	23a9      	movs	r3, #169	; 0xa9
 8002ef4:	465a      	mov	r2, fp
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	50e2      	str	r2, [r4, r3]
 8002efa:	3310      	adds	r3, #16
 8002efc:	50e7      	str	r7, [r4, r3]
 8002efe:	23b8      	movs	r3, #184	; 0xb8
 8002f00:	465a      	mov	r2, fp
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	50e2      	str	r2, [r4, r3]
 8002f06:	3304      	adds	r3, #4
 8002f08:	50e6      	str	r6, [r4, r3]
 8002f0a:	3310      	adds	r3, #16
 8002f0c:	50e7      	str	r7, [r4, r3]
 8002f0e:	3328      	adds	r3, #40	; 0x28
 8002f10:	50e6      	str	r6, [r4, r3]
 8002f12:	3304      	adds	r3, #4
 8002f14:	50e6      	str	r6, [r4, r3]
 8002f16:	3310      	adds	r3, #16
 8002f18:	50e7      	str	r7, [r4, r3]
 8002f1a:	3328      	adds	r3, #40	; 0x28
 8002f1c:	50e6      	str	r6, [r4, r3]
 8002f1e:	3328      	adds	r3, #40	; 0x28
 8002f20:	50e4      	str	r4, [r4, r3]
 8002f22:	3328      	adds	r3, #40	; 0x28
 8002f24:	18e6      	adds	r6, r4, r3
 8002f26:	4be9      	ldr	r3, [pc, #932]	; (80032cc <envelope_create_service+0x692>)
 8002f28:	469b      	mov	fp, r3
 8002f2a:	3330      	adds	r3, #48	; 0x30
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d900      	bls.n	8002f34 <envelope_create_service+0x2fa>
 8002f32:	e270      	b.n	8003416 <envelope_create_service+0x7dc>
 8002f34:	0033      	movs	r3, r6
 8002f36:	9a02      	ldr	r2, [sp, #8]
 8002f38:	a90b      	add	r1, sp, #44	; 0x2c
 8002f3a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002f3c:	f003 fb6e 	bl	800661c <acc_sensor_manager_prepare_measurement>
 8002f40:	1e06      	subs	r6, r0, #0
 8002f42:	d100      	bne.n	8002f46 <envelope_create_service+0x30c>
 8002f44:	e728      	b.n	8002d98 <envelope_create_service+0x15e>
 8002f46:	0023      	movs	r3, r4
 8002f48:	2700      	movs	r7, #0
 8002f4a:	0026      	movs	r6, r4
 8002f4c:	4ae0      	ldr	r2, [pc, #896]	; (80032d0 <envelope_create_service+0x696>)
 8002f4e:	33b0      	adds	r3, #176	; 0xb0
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	601f      	str	r7, [r3, #0]
 8002f54:	4bdf      	ldr	r3, [pc, #892]	; (80032d4 <envelope_create_service+0x69a>)
 8002f56:	4ae0      	ldr	r2, [pc, #896]	; (80032d8 <envelope_create_service+0x69e>)
 8002f58:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002f5a:	1d23      	adds	r3, r4, #4
 8002f5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f5e:	4adf      	ldr	r2, [pc, #892]	; (80032dc <envelope_create_service+0x6a2>)
 8002f60:	3304      	adds	r3, #4
 8002f62:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f64:	4bde      	ldr	r3, [pc, #888]	; (80032e0 <envelope_create_service+0x6a6>)
 8002f66:	36b8      	adds	r6, #184	; 0xb8
 8002f68:	6073      	str	r3, [r6, #4]
 8002f6a:	4bde      	ldr	r3, [pc, #888]	; (80032e4 <envelope_create_service+0x6aa>)
 8002f6c:	a80b      	add	r0, sp, #44	; 0x2c
 8002f6e:	60b3      	str	r3, [r6, #8]
 8002f70:	4bdd      	ldr	r3, [pc, #884]	; (80032e8 <envelope_create_service+0x6ae>)
 8002f72:	60f3      	str	r3, [r6, #12]
 8002f74:	4bdd      	ldr	r3, [pc, #884]	; (80032ec <envelope_create_service+0x6b2>)
 8002f76:	63b3      	str	r3, [r6, #56]	; 0x38
 8002f78:	2300      	movs	r3, #0
 8002f7a:	87b3      	strh	r3, [r6, #60]	; 0x3c
 8002f7c:	f7ff fe49 	bl	8002c12 <acc_base_configuration_noise_level_normalization_get>
 8002f80:	9702      	str	r7, [sp, #8]
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d01b      	beq.n	8002fbe <envelope_create_service+0x384>
 8002f86:	a80b      	add	r0, sp, #44	; 0x2c
 8002f88:	f003 fb2e 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d007      	beq.n	8002fa0 <envelope_create_service+0x366>
 8002f90:	aa04      	add	r2, sp, #16
 8002f92:	4694      	mov	ip, r2
 8002f94:	2366      	movs	r3, #102	; 0x66
 8002f96:	4463      	add	r3, ip
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	221e      	movs	r2, #30
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <envelope_create_service+0x36a>
 8002fa0:	2296      	movs	r2, #150	; 0x96
 8002fa2:	0052      	lsls	r2, r2, #1
 8002fa4:	0023      	movs	r3, r4
 8002fa6:	33f8      	adds	r3, #248	; 0xf8
 8002fa8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002faa:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002fac:	4ad0      	ldr	r2, [pc, #832]	; (80032f0 <envelope_create_service+0x6b6>)
 8002fae:	8719      	strh	r1, [r3, #56]	; 0x38
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fb2:	4ad0      	ldr	r2, [pc, #832]	; (80032f4 <envelope_create_service+0x6ba>)
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	4ad0      	ldr	r2, [pc, #832]	; (80032f8 <envelope_create_service+0x6be>)
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	4ad0      	ldr	r2, [pc, #832]	; (80032fc <envelope_create_service+0x6c2>)
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	0023      	movs	r3, r4
 8002fc0:	4acf      	ldr	r2, [pc, #828]	; (8003300 <envelope_create_service+0x6c6>)
 8002fc2:	3339      	adds	r3, #57	; 0x39
 8002fc4:	33ff      	adds	r3, #255	; 0xff
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002fc8:	4ace      	ldr	r2, [pc, #824]	; (8003304 <envelope_create_service+0x6ca>)
 8002fca:	49cf      	ldr	r1, [pc, #828]	; (8003308 <envelope_create_service+0x6ce>)
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	4acf      	ldr	r2, [pc, #828]	; (800330c <envelope_create_service+0x6d2>)
 8002fd0:	a80b      	add	r0, sp, #44	; 0x2c
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	4ace      	ldr	r2, [pc, #824]	; (8003310 <envelope_create_service+0x6d6>)
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fda:	6419      	str	r1, [r3, #64]	; 0x40
 8002fdc:	679a      	str	r2, [r3, #120]	; 0x78
 8002fde:	49cd      	ldr	r1, [pc, #820]	; (8003314 <envelope_create_service+0x6da>)
 8002fe0:	9a02      	ldr	r2, [sp, #8]
 8002fe2:	6459      	str	r1, [r3, #68]	; 0x44
 8002fe4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002fe6:	49cc      	ldr	r1, [pc, #816]	; (8003318 <envelope_create_service+0x6de>)
 8002fe8:	4acc      	ldr	r2, [pc, #816]	; (800331c <envelope_create_service+0x6e2>)
 8002fea:	6499      	str	r1, [r3, #72]	; 0x48
 8002fec:	675a      	str	r2, [r3, #116]	; 0x74
 8002fee:	23e3      	movs	r3, #227	; 0xe3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4698      	mov	r8, r3
 8002ff4:	44a0      	add	r8, r4
 8002ff6:	4643      	mov	r3, r8
 8002ff8:	891b      	ldrh	r3, [r3, #8]
 8002ffa:	469a      	mov	sl, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	88db      	ldrh	r3, [r3, #6]
 8003000:	9303      	str	r3, [sp, #12]
 8003002:	f003 faf1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003006:	2800      	cmp	r0, #0
 8003008:	d100      	bne.n	800300c <envelope_create_service+0x3d2>
 800300a:	e208      	b.n	800341e <envelope_create_service+0x7e4>
 800300c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800300e:	4699      	mov	r9, r3
 8003010:	0027      	movs	r7, r4
 8003012:	4bc3      	ldr	r3, [pc, #780]	; (8003320 <envelope_create_service+0x6e6>)
 8003014:	37b9      	adds	r7, #185	; 0xb9
 8003016:	37ff      	adds	r7, #255	; 0xff
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	4bc2      	ldr	r3, [pc, #776]	; (8003324 <envelope_create_service+0x6ea>)
 800301c:	218b      	movs	r1, #139	; 0x8b
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	4bc1      	ldr	r3, [pc, #772]	; (8003328 <envelope_create_service+0x6ee>)
 8003022:	05c9      	lsls	r1, r1, #23
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	9b03      	ldr	r3, [sp, #12]
 8003028:	4648      	mov	r0, r9
 800302a:	643b      	str	r3, [r7, #64]	; 0x40
 800302c:	4653      	mov	r3, sl
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	f00b fa7c 	bl	800e52c <__aeabi_fmul>
 8003034:	2100      	movs	r1, #0
 8003036:	4682      	mov	sl, r0
 8003038:	4648      	mov	r0, r9
 800303a:	f00b ff8d 	bl	800ef58 <__aeabi_fcmpge>
 800303e:	2800      	cmp	r0, #0
 8003040:	d100      	bne.n	8003044 <envelope_create_service+0x40a>
 8003042:	e1ef      	b.n	8003424 <envelope_create_service+0x7ea>
 8003044:	21fc      	movs	r1, #252	; 0xfc
 8003046:	0589      	lsls	r1, r1, #22
 8003048:	4650      	mov	r0, sl
 800304a:	f00a ffc3 	bl	800dfd4 <__aeabi_fadd>
 800304e:	f00c f963 	bl	800f318 <__aeabi_f2iz>
 8003052:	0023      	movs	r3, r4
 8003054:	33bf      	adds	r3, #191	; 0xbf
 8003056:	33ff      	adds	r3, #255	; 0xff
 8003058:	87d8      	strh	r0, [r3, #62]	; 0x3e
 800305a:	4bb4      	ldr	r3, [pc, #720]	; (800332c <envelope_create_service+0x6f2>)
 800305c:	4642      	mov	r2, r8
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	8892      	ldrh	r2, [r2, #4]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	18e3      	adds	r3, r4, r3
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
 800306c:	4ab0      	ldr	r2, [pc, #704]	; (8003330 <envelope_create_service+0x6f6>)
 800306e:	a80b      	add	r0, sp, #44	; 0x2c
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	4ab0      	ldr	r2, [pc, #704]	; (8003334 <envelope_create_service+0x6fa>)
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	4ab0      	ldr	r2, [pc, #704]	; (8003338 <envelope_create_service+0x6fe>)
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	f003 fab5 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800307e:	4681      	mov	r9, r0
 8003080:	2800      	cmp	r0, #0
 8003082:	d002      	beq.n	800308a <envelope_create_service+0x450>
 8003084:	ab12      	add	r3, sp, #72	; 0x48
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4699      	mov	r9, r3
 800308a:	a80b      	add	r0, sp, #44	; 0x2c
 800308c:	f003 faac 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003090:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8003092:	2800      	cmp	r0, #0
 8003094:	d100      	bne.n	8003098 <envelope_create_service+0x45e>
 8003096:	2700      	movs	r7, #0
 8003098:	238f      	movs	r3, #143	; 0x8f
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4698      	mov	r8, r3
 800309e:	44a0      	add	r8, r4
 80030a0:	4642      	mov	r2, r8
 80030a2:	4ba6      	ldr	r3, [pc, #664]	; (800333c <envelope_create_service+0x702>)
 80030a4:	6053      	str	r3, [r2, #4]
 80030a6:	4ba6      	ldr	r3, [pc, #664]	; (8003340 <envelope_create_service+0x706>)
 80030a8:	6093      	str	r3, [r2, #8]
 80030aa:	4ba6      	ldr	r3, [pc, #664]	; (8003344 <envelope_create_service+0x70a>)
 80030ac:	60d3      	str	r3, [r2, #12]
 80030ae:	464b      	mov	r3, r9
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <envelope_create_service+0x47c>
 80030b4:	e1b9      	b.n	800342a <envelope_create_service+0x7f0>
 80030b6:	49a4      	ldr	r1, [pc, #656]	; (8003348 <envelope_create_service+0x70e>)
 80030b8:	1c38      	adds	r0, r7, #0
 80030ba:	f00b ff2f 	bl	800ef1c <__aeabi_fcmplt>
 80030be:	4682      	mov	sl, r0
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d000      	beq.n	80030c6 <envelope_create_service+0x48c>
 80030c4:	e1b4      	b.n	8003430 <envelope_create_service+0x7f6>
 80030c6:	49a1      	ldr	r1, [pc, #644]	; (800334c <envelope_create_service+0x712>)
 80030c8:	1c38      	adds	r0, r7, #0
 80030ca:	f00b ff3b 	bl	800ef44 <__aeabi_fcmpgt>
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d000      	beq.n	80030d4 <envelope_create_service+0x49a>
 80030d2:	e1af      	b.n	8003434 <envelope_create_service+0x7fa>
 80030d4:	4643      	mov	r3, r8
 80030d6:	63df      	str	r7, [r3, #60]	; 0x3c
 80030d8:	464b      	mov	r3, r9
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d100      	bne.n	80030e0 <envelope_create_service+0x4a6>
 80030de:	e28c      	b.n	80035fa <envelope_create_service+0x9c0>
 80030e0:	4642      	mov	r2, r8
 80030e2:	4b9b      	ldr	r3, [pc, #620]	; (8003350 <envelope_create_service+0x716>)
 80030e4:	007f      	lsls	r7, r7, #1
 80030e6:	087f      	lsrs	r7, r7, #1
 80030e8:	6393      	str	r3, [r2, #56]	; 0x38
 80030ea:	499a      	ldr	r1, [pc, #616]	; (8003354 <envelope_create_service+0x71a>)
 80030ec:	1c38      	adds	r0, r7, #0
 80030ee:	f00b ff29 	bl	800ef44 <__aeabi_fcmpgt>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d000      	beq.n	80030f8 <envelope_create_service+0x4be>
 80030f6:	4f97      	ldr	r7, [pc, #604]	; (8003354 <envelope_create_service+0x71a>)
 80030f8:	2191      	movs	r1, #145	; 0x91
 80030fa:	1c38      	adds	r0, r7, #0
 80030fc:	05c9      	lsls	r1, r1, #23
 80030fe:	f00b fa15 	bl	800e52c <__aeabi_fmul>
 8003102:	f010 f89d 	bl	8013240 <roundf>
 8003106:	21da      	movs	r1, #218	; 0xda
 8003108:	0589      	lsls	r1, r1, #22
 800310a:	f00b fa0f 	bl	800e52c <__aeabi_fmul>
 800310e:	4992      	ldr	r1, [pc, #584]	; (8003358 <envelope_create_service+0x71e>)
 8003110:	f00b fa0c 	bl	800e52c <__aeabi_fmul>
 8003114:	1c01      	adds	r1, r0, #0
 8003116:	1c07      	adds	r7, r0, #0
 8003118:	4890      	ldr	r0, [pc, #576]	; (800335c <envelope_create_service+0x722>)
 800311a:	f00b fb39 	bl	800e790 <__aeabi_fsub>
 800311e:	4990      	ldr	r1, [pc, #576]	; (8003360 <envelope_create_service+0x726>)
 8003120:	f00b fb36 	bl	800e790 <__aeabi_fsub>
 8003124:	4680      	mov	r8, r0
 8003126:	1c01      	adds	r1, r0, #0
 8003128:	1c38      	adds	r0, r7, #0
 800312a:	f00b fef7 	bl	800ef1c <__aeabi_fcmplt>
 800312e:	2800      	cmp	r0, #0
 8003130:	d100      	bne.n	8003134 <envelope_create_service+0x4fa>
 8003132:	e183      	b.n	800343c <envelope_create_service+0x802>
 8003134:	2100      	movs	r1, #0
 8003136:	1c38      	adds	r0, r7, #0
 8003138:	f009 fbbd 	bl	800c8b6 <quarter_pi_cos_sin_f32.lto_priv.673>
 800313c:	2101      	movs	r1, #1
 800313e:	4681      	mov	r9, r0
 8003140:	1c38      	adds	r0, r7, #0
 8003142:	f009 fbb8 	bl	800c8b6 <quarter_pi_cos_sin_f32.lto_priv.673>
 8003146:	1c01      	adds	r1, r0, #0
 8003148:	4648      	mov	r0, r9
 800314a:	f00b f8dd 	bl	800e308 <__aeabi_fdiv>
 800314e:	4985      	ldr	r1, [pc, #532]	; (8003364 <envelope_create_service+0x72a>)
 8003150:	f00b f9ec 	bl	800e52c <__aeabi_fmul>
 8003154:	4984      	ldr	r1, [pc, #528]	; (8003368 <envelope_create_service+0x72e>)
 8003156:	1c07      	adds	r7, r0, #0
 8003158:	f00a ff3c 	bl	800dfd4 <__aeabi_fadd>
 800315c:	1c39      	adds	r1, r7, #0
 800315e:	f00b f9e5 	bl	800e52c <__aeabi_fmul>
 8003162:	4981      	ldr	r1, [pc, #516]	; (8003368 <envelope_create_service+0x72e>)
 8003164:	4680      	mov	r8, r0
 8003166:	1c38      	adds	r0, r7, #0
 8003168:	f00b f9e0 	bl	800e52c <__aeabi_fmul>
 800316c:	21fe      	movs	r1, #254	; 0xfe
 800316e:	0589      	lsls	r1, r1, #22
 8003170:	f00a ff30 	bl	800dfd4 <__aeabi_fadd>
 8003174:	1c01      	adds	r1, r0, #0
 8003176:	4640      	mov	r0, r8
 8003178:	f00b f8c6 	bl	800e308 <__aeabi_fdiv>
 800317c:	1c01      	adds	r1, r0, #0
 800317e:	1c07      	adds	r7, r0, #0
 8003180:	f00b f9d4 	bl	800e52c <__aeabi_fmul>
 8003184:	21fe      	movs	r1, #254	; 0xfe
 8003186:	0589      	lsls	r1, r1, #22
 8003188:	f00a ff24 	bl	800dfd4 <__aeabi_fadd>
 800318c:	f00f fc42 	bl	8012a14 <__ieee754_sqrtf>
 8003190:	1c01      	adds	r1, r0, #0
 8003192:	20fe      	movs	r0, #254	; 0xfe
 8003194:	0580      	lsls	r0, r0, #22
 8003196:	f00b f8b7 	bl	800e308 <__aeabi_fdiv>
 800319a:	2181      	movs	r1, #129	; 0x81
 800319c:	4680      	mov	r8, r0
 800319e:	05c9      	lsls	r1, r1, #23
 80031a0:	1c38      	adds	r0, r7, #0
 80031a2:	f00b febb 	bl	800ef1c <__aeabi_fcmplt>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d100      	bne.n	80031ac <envelope_create_service+0x572>
 80031aa:	e15e      	b.n	800346a <envelope_create_service+0x830>
 80031ac:	21fe      	movs	r1, #254	; 0xfe
 80031ae:	1c38      	adds	r0, r7, #0
 80031b0:	0589      	lsls	r1, r1, #22
 80031b2:	f00b fec7 	bl	800ef44 <__aeabi_fcmpgt>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d100      	bne.n	80031bc <envelope_create_service+0x582>
 80031ba:	e149      	b.n	8003450 <envelope_create_service+0x816>
 80031bc:	218a      	movs	r1, #138	; 0x8a
 80031be:	4640      	mov	r0, r8
 80031c0:	05c9      	lsls	r1, r1, #23
 80031c2:	f00b f9b3 	bl	800e52c <__aeabi_fmul>
 80031c6:	21fc      	movs	r1, #252	; 0xfc
 80031c8:	0589      	lsls	r1, r1, #22
 80031ca:	f00a ff03 	bl	800dfd4 <__aeabi_fadd>
 80031ce:	f00c f8a3 	bl	800f318 <__aeabi_f2iz>
 80031d2:	0043      	lsls	r3, r0, #1
 80031d4:	4698      	mov	r8, r3
 80031d6:	4643      	mov	r3, r8
 80031d8:	4642      	mov	r2, r8
 80031da:	2080      	movs	r0, #128	; 0x80
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4353      	muls	r3, r2
 80031e0:	04c0      	lsls	r0, r0, #19
 80031e2:	1ac0      	subs	r0, r0, r3
 80031e4:	f00c f902 	bl	800f3ec <__aeabi_ui2f>
 80031e8:	f00f fc14 	bl	8012a14 <__ieee754_sqrtf>
 80031ec:	21fc      	movs	r1, #252	; 0xfc
 80031ee:	0589      	lsls	r1, r1, #22
 80031f0:	f00a fef0 	bl	800dfd4 <__aeabi_fadd>
 80031f4:	f00c f890 	bl	800f318 <__aeabi_f2iz>
 80031f8:	0007      	movs	r7, r0
 80031fa:	239f      	movs	r3, #159	; 0x9f
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4699      	mov	r9, r3
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	469a      	mov	sl, r3
 8003206:	4643      	mov	r3, r8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d000      	beq.n	800320e <envelope_create_service+0x5d4>
 800320c:	e151      	b.n	80034b2 <envelope_create_service+0x878>
 800320e:	229e      	movs	r2, #158	; 0x9e
 8003210:	21fc      	movs	r1, #252	; 0xfc
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	0589      	lsls	r1, r1, #22
 8003216:	50a1      	str	r1, [r4, r2]
 8003218:	4653      	mov	r3, sl
 800321a:	464a      	mov	r2, r9
 800321c:	50a3      	str	r3, [r4, r2]
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	4642      	mov	r2, r8
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	50e2      	str	r2, [r4, r3]
 8003226:	3304      	adds	r3, #4
 8003228:	52e2      	strh	r2, [r4, r3]
 800322a:	465b      	mov	r3, fp
 800322c:	4a4f      	ldr	r2, [pc, #316]	; (800336c <envelope_create_service+0x732>)
 800322e:	4950      	ldr	r1, [pc, #320]	; (8003370 <envelope_create_service+0x736>)
 8003230:	2000      	movs	r0, #0
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	4798      	blx	r3
 8003236:	a80b      	add	r0, sp, #44	; 0x2c
 8003238:	f003 f9d6 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800323c:	2800      	cmp	r0, #0
 800323e:	d010      	beq.n	8003262 <envelope_create_service+0x628>
 8003240:	ab11      	add	r3, sp, #68	; 0x44
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <envelope_create_service+0x628>
 8003248:	23a4      	movs	r3, #164	; 0xa4
 800324a:	494a      	ldr	r1, [pc, #296]	; (8003374 <envelope_create_service+0x73a>)
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	18e3      	adds	r3, r4, r3
 8003250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003252:	6059      	str	r1, [r3, #4]
 8003254:	4948      	ldr	r1, [pc, #288]	; (8003378 <envelope_create_service+0x73e>)
 8003256:	63da      	str	r2, [r3, #60]	; 0x3c
 8003258:	6099      	str	r1, [r3, #8]
 800325a:	4a48      	ldr	r2, [pc, #288]	; (800337c <envelope_create_service+0x742>)
 800325c:	4948      	ldr	r1, [pc, #288]	; (8003380 <envelope_create_service+0x746>)
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
 8003260:	60d9      	str	r1, [r3, #12]
 8003262:	23b4      	movs	r3, #180	; 0xb4
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4699      	mov	r9, r3
 8003268:	44a1      	add	r9, r4
 800326a:	464a      	mov	r2, r9
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <envelope_create_service+0x74a>)
 800326e:	a80b      	add	r0, sp, #44	; 0x2c
 8003270:	6053      	str	r3, [r2, #4]
 8003272:	4b45      	ldr	r3, [pc, #276]	; (8003388 <envelope_create_service+0x74e>)
 8003274:	6093      	str	r3, [r2, #8]
 8003276:	4b45      	ldr	r3, [pc, #276]	; (800338c <envelope_create_service+0x752>)
 8003278:	60d3      	str	r3, [r2, #12]
 800327a:	4b45      	ldr	r3, [pc, #276]	; (8003390 <envelope_create_service+0x756>)
 800327c:	6393      	str	r3, [r2, #56]	; 0x38
 800327e:	23c3      	movs	r3, #195	; 0xc3
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4698      	mov	r8, r3
 8003284:	44a0      	add	r8, r4
 8003286:	4642      	mov	r2, r8
 8003288:	4b42      	ldr	r3, [pc, #264]	; (8003394 <envelope_create_service+0x75a>)
 800328a:	6393      	str	r3, [r2, #56]	; 0x38
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <envelope_create_service+0x6ca>)
 800328e:	6053      	str	r3, [r2, #4]
 8003290:	4b1e      	ldr	r3, [pc, #120]	; (800330c <envelope_create_service+0x6d2>)
 8003292:	6093      	str	r3, [r2, #8]
 8003294:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <envelope_create_service+0x6d6>)
 8003296:	60d3      	str	r3, [r2, #12]
 8003298:	23d2      	movs	r3, #210	; 0xd2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	18e7      	adds	r7, r4, r3
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <envelope_create_service+0x75e>)
 80032a0:	643b      	str	r3, [r7, #64]	; 0x40
 80032a2:	4b3e      	ldr	r3, [pc, #248]	; (800339c <envelope_create_service+0x762>)
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <envelope_create_service+0x766>)
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <envelope_create_service+0x76a>)
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	0023      	movs	r3, r4
 80032b0:	3378      	adds	r3, #120	; 0x78
 80032b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80032b4:	3340      	adds	r3, #64	; 0x40
 80032b6:	67a3      	str	r3, [r4, #120]	; 0x78
 80032b8:	f7ff fcab 	bl	8002c12 <acc_base_configuration_noise_level_normalization_get>
 80032bc:	0023      	movs	r3, r4
 80032be:	3339      	adds	r3, #57	; 0x39
 80032c0:	33ff      	adds	r3, #255	; 0xff
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d000      	beq.n	80032c8 <envelope_create_service+0x68e>
 80032c6:	e19c      	b.n	8003602 <envelope_create_service+0x9c8>
 80032c8:	e06e      	b.n	80033a8 <envelope_create_service+0x76e>
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	200003f0 	.word	0x200003f0
 80032d0:	0800c87d 	.word	0x0800c87d
 80032d4:	0800a181 	.word	0x0800a181
 80032d8:	0800a12b 	.word	0x0800a12b
 80032dc:	0800a50b 	.word	0x0800a50b
 80032e0:	08004db9 	.word	0x08004db9
 80032e4:	08004d63 	.word	0x08004d63
 80032e8:	08004e57 	.word	0x08004e57
 80032ec:	080050a9 	.word	0x080050a9
 80032f0:	080049c7 	.word	0x080049c7
 80032f4:	080049ad 	.word	0x080049ad
 80032f8:	08004959 	.word	0x08004959
 80032fc:	08004e2f 	.word	0x08004e2f
 8003300:	08004c35 	.word	0x08004c35
 8003304:	08004e79 	.word	0x08004e79
 8003308:	08004ae9 	.word	0x08004ae9
 800330c:	08004be1 	.word	0x08004be1
 8003310:	08004e4f 	.word	0x08004e4f
 8003314:	08004a31 	.word	0x08004a31
 8003318:	08004e37 	.word	0x08004e37
 800331c:	08004f09 	.word	0x08004f09
 8003320:	0800a269 	.word	0x0800a269
 8003324:	0800a1f9 	.word	0x0800a1f9
 8003328:	0800a513 	.word	0x0800a513
 800332c:	0800a51b 	.word	0x0800a51b
 8003330:	08004bd1 	.word	0x08004bd1
 8003334:	08004b7b 	.word	0x08004b7b
 8003338:	08004e47 	.word	0x08004e47
 800333c:	08004b69 	.word	0x08004b69
 8003340:	08004af9 	.word	0x08004af9
 8003344:	08004e3f 	.word	0x08004e3f
 8003348:	3b843809 	.word	0x3b843809
 800334c:	3efdca08 	.word	0x3efdca08
 8003350:	08005057 	.word	0x08005057
 8003354:	3effffde 	.word	0x3effffde
 8003358:	40490fdb 	.word	0x40490fdb
 800335c:	3fc90fdb 	.word	0x3fc90fdb
 8003360:	333bbd2e 	.word	0x333bbd2e
 8003364:	3f9f8d77 	.word	0x3f9f8d77
 8003368:	3fb504f3 	.word	0x3fb504f3
 800336c:	0801bed6 	.word	0x0801bed6
 8003370:	0801beff 	.word	0x0801beff
 8003374:	0800a4d9 	.word	0x0800a4d9
 8003378:	0800a031 	.word	0x0800a031
 800337c:	0800a0a5 	.word	0x0800a0a5
 8003380:	0800a095 	.word	0x0800a095
 8003384:	08004e5f 	.word	0x08004e5f
 8003388:	08004dd1 	.word	0x08004dd1
 800338c:	08004e25 	.word	0x08004e25
 8003390:	08004ed5 	.word	0x08004ed5
 8003394:	08004d47 	.word	0x08004d47
 8003398:	08000aff 	.word	0x08000aff
 800339c:	0800a01b 	.word	0x0800a01b
 80033a0:	08009fb1 	.word	0x08009fb1
 80033a4:	0800a019 	.word	0x0800a019
 80033a8:	6033      	str	r3, [r6, #0]
 80033aa:	0023      	movs	r3, r4
 80033ac:	229c      	movs	r2, #156	; 0x9c
 80033ae:	3375      	adds	r3, #117	; 0x75
 80033b0:	0052      	lsls	r2, r2, #1
 80033b2:	33ff      	adds	r3, #255	; 0xff
 80033b4:	50a3      	str	r3, [r4, r2]
 80033b6:	323c      	adds	r2, #60	; 0x3c
 80033b8:	3344      	adds	r3, #68	; 0x44
 80033ba:	50a3      	str	r3, [r4, r2]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	3244      	adds	r2, #68	; 0x44
 80033c2:	18e3      	adds	r3, r4, r3
 80033c4:	50a3      	str	r3, [r4, r2]
 80033c6:	238f      	movs	r3, #143	; 0x8f
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	18e3      	adds	r3, r4, r3
 80033cc:	3248      	adds	r2, #72	; 0x48
 80033ce:	50a3      	str	r3, [r4, r2]
 80033d0:	a80b      	add	r0, sp, #44	; 0x2c
 80033d2:	f003 f909 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80033d6:	464b      	mov	r3, r9
 80033d8:	2800      	cmp	r0, #0
 80033da:	d007      	beq.n	80033ec <envelope_create_service+0x7b2>
 80033dc:	aa11      	add	r2, sp, #68	; 0x44
 80033de:	7812      	ldrb	r2, [r2, #0]
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	d003      	beq.n	80033ec <envelope_create_service+0x7b2>
 80033e4:	22a4      	movs	r2, #164	; 0xa4
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	50a3      	str	r3, [r4, r2]
 80033ea:	18a3      	adds	r3, r4, r2
 80033ec:	228f      	movs	r2, #143	; 0x8f
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	50a3      	str	r3, [r4, r2]
 80033f2:	23b4      	movs	r3, #180	; 0xb4
 80033f4:	4642      	mov	r2, r8
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	50e2      	str	r2, [r4, r3]
 80033fa:	333c      	adds	r3, #60	; 0x3c
 80033fc:	50e7      	str	r7, [r4, r3]
 80033fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003400:	6883      	ldr	r3, [r0, #8]
 8003402:	4798      	blx	r3
 8003404:	1e06      	subs	r6, r0, #0
 8003406:	d000      	beq.n	800340a <envelope_create_service+0x7d0>
 8003408:	e100      	b.n	800360c <envelope_create_service+0x9d2>
 800340a:	465b      	mov	r3, fp
 800340c:	4a87      	ldr	r2, [pc, #540]	; (800362c <envelope_create_service+0x9f2>)
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	4987      	ldr	r1, [pc, #540]	; (8003630 <envelope_create_service+0x9f6>)
 8003412:	4798      	blx	r3
 8003414:	e4c0      	b.n	8002d98 <envelope_create_service+0x15e>
 8003416:	a80b      	add	r0, sp, #44	; 0x2c
 8003418:	f004 fcc6 	bl	8007da8 <acc_base_configuration_print.part.5>
 800341c:	e58a      	b.n	8002f34 <envelope_create_service+0x2fa>
 800341e:	2300      	movs	r3, #0
 8003420:	4699      	mov	r9, r3
 8003422:	e5f5      	b.n	8003010 <envelope_create_service+0x3d6>
 8003424:	21bf      	movs	r1, #191	; 0xbf
 8003426:	0609      	lsls	r1, r1, #24
 8003428:	e60e      	b.n	8003048 <envelope_create_service+0x40e>
 800342a:	27fc      	movs	r7, #252	; 0xfc
 800342c:	05bf      	lsls	r7, r7, #22
 800342e:	e651      	b.n	80030d4 <envelope_create_service+0x49a>
 8003430:	4f80      	ldr	r7, [pc, #512]	; (8003634 <envelope_create_service+0x9fa>)
 8003432:	e64f      	b.n	80030d4 <envelope_create_service+0x49a>
 8003434:	27fc      	movs	r7, #252	; 0xfc
 8003436:	46d1      	mov	r9, sl
 8003438:	05bf      	lsls	r7, r7, #22
 800343a:	e64b      	b.n	80030d4 <envelope_create_service+0x49a>
 800343c:	2101      	movs	r1, #1
 800343e:	4640      	mov	r0, r8
 8003440:	f009 fa39 	bl	800c8b6 <quarter_pi_cos_sin_f32.lto_priv.673>
 8003444:	2100      	movs	r1, #0
 8003446:	4681      	mov	r9, r0
 8003448:	4640      	mov	r0, r8
 800344a:	f009 fa34 	bl	800c8b6 <quarter_pi_cos_sin_f32.lto_priv.673>
 800344e:	e67a      	b.n	8003146 <envelope_create_service+0x50c>
 8003450:	218b      	movs	r1, #139	; 0x8b
 8003452:	4640      	mov	r0, r8
 8003454:	05c9      	lsls	r1, r1, #23
 8003456:	f00b f869 	bl	800e52c <__aeabi_fmul>
 800345a:	21fc      	movs	r1, #252	; 0xfc
 800345c:	0589      	lsls	r1, r1, #22
 800345e:	f00a fdb9 	bl	800dfd4 <__aeabi_fadd>
 8003462:	f00b ff59 	bl	800f318 <__aeabi_f2iz>
 8003466:	4680      	mov	r8, r0
 8003468:	e6b5      	b.n	80031d6 <envelope_create_service+0x59c>
 800346a:	218c      	movs	r1, #140	; 0x8c
 800346c:	1c38      	adds	r0, r7, #0
 800346e:	05c9      	lsls	r1, r1, #23
 8003470:	f00b f85c 	bl	800e52c <__aeabi_fmul>
 8003474:	4641      	mov	r1, r8
 8003476:	f00b f859 	bl	800e52c <__aeabi_fmul>
 800347a:	21fc      	movs	r1, #252	; 0xfc
 800347c:	0589      	lsls	r1, r1, #22
 800347e:	f00a fda9 	bl	800dfd4 <__aeabi_fadd>
 8003482:	f00b ff49 	bl	800f318 <__aeabi_f2iz>
 8003486:	0003      	movs	r3, r0
 8003488:	0007      	movs	r7, r0
 800348a:	4343      	muls	r3, r0
 800348c:	2080      	movs	r0, #128	; 0x80
 800348e:	04c0      	lsls	r0, r0, #19
 8003490:	1ac0      	subs	r0, r0, r3
 8003492:	f00b ffab 	bl	800f3ec <__aeabi_ui2f>
 8003496:	f00f fabd 	bl	8012a14 <__ieee754_sqrtf>
 800349a:	21fc      	movs	r1, #252	; 0xfc
 800349c:	0589      	lsls	r1, r1, #22
 800349e:	f00b f845 	bl	800e52c <__aeabi_fmul>
 80034a2:	21fc      	movs	r1, #252	; 0xfc
 80034a4:	0589      	lsls	r1, r1, #22
 80034a6:	f00a fd95 	bl	800dfd4 <__aeabi_fadd>
 80034aa:	f00b ff35 	bl	800f318 <__aeabi_f2iz>
 80034ae:	4680      	mov	r8, r0
 80034b0:	e6a3      	b.n	80031fa <envelope_create_service+0x5c0>
 80034b2:	4642      	mov	r2, r8
 80034b4:	4653      	mov	r3, sl
 80034b6:	b292      	uxth	r2, r2
 80034b8:	1a99      	subs	r1, r3, r2
 80034ba:	464b      	mov	r3, r9
 80034bc:	b289      	uxth	r1, r1
 80034be:	b208      	sxth	r0, r1
 80034c0:	52e0      	strh	r0, [r4, r3]
 80034c2:	004b      	lsls	r3, r1, #1
 80034c4:	4699      	mov	r9, r3
 80034c6:	239f      	movs	r3, #159	; 0x9f
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	18e1      	adds	r1, r4, r3
 80034cc:	464b      	mov	r3, r9
 80034ce:	8088      	strh	r0, [r1, #4]
 80034d0:	0052      	lsls	r2, r2, #1
 80034d2:	b2b8      	uxth	r0, r7
 80034d4:	1a82      	subs	r2, r0, r2
 80034d6:	80ca      	strh	r2, [r1, #6]
 80034d8:	22c0      	movs	r2, #192	; 0xc0
 80034da:	804b      	strh	r3, [r1, #2]
 80034dc:	4643      	mov	r3, r8
 80034de:	0152      	lsls	r2, r2, #5
 80034e0:	1ad2      	subs	r2, r2, r3
 80034e2:	0052      	lsls	r2, r2, #1
 80034e4:	1a10      	subs	r0, r2, r0
 80034e6:	8108      	strh	r0, [r1, #8]
 80034e8:	2f00      	cmp	r7, #0
 80034ea:	d104      	bne.n	80034f6 <envelope_create_service+0x8bc>
 80034ec:	239e      	movs	r3, #158	; 0x9e
 80034ee:	9a02      	ldr	r2, [sp, #8]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	50e2      	str	r2, [r4, r3]
 80034f4:	e699      	b.n	800322a <envelope_create_service+0x5f0>
 80034f6:	4652      	mov	r2, sl
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	4642      	mov	r2, r8
 80034fc:	0090      	lsls	r0, r2, #2
 80034fe:	4350      	muls	r0, r2
 8003500:	003a      	movs	r2, r7
 8003502:	437a      	muls	r2, r7
 8003504:	1880      	adds	r0, r0, r2
 8003506:	22fc      	movs	r2, #252	; 0xfc
 8003508:	0612      	lsls	r2, r2, #24
 800350a:	4694      	mov	ip, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	1bdb      	subs	r3, r3, r7
 8003510:	435b      	muls	r3, r3
 8003512:	4460      	add	r0, ip
 8003514:	0042      	lsls	r2, r0, #1
 8003516:	1a98      	subs	r0, r3, r2
 8003518:	4690      	mov	r8, r2
 800351a:	f00b ff1d 	bl	800f358 <__aeabi_i2f>
 800351e:	4682      	mov	sl, r0
 8003520:	4640      	mov	r0, r8
 8003522:	f00b ff19 	bl	800f358 <__aeabi_i2f>
 8003526:	4651      	mov	r1, sl
 8003528:	f00a feee 	bl	800e308 <__aeabi_fdiv>
 800352c:	4942      	ldr	r1, [pc, #264]	; (8003638 <envelope_create_service+0x9fe>)
 800352e:	4680      	mov	r8, r0
 8003530:	f00a fd50 	bl	800dfd4 <__aeabi_fadd>
 8003534:	4681      	mov	r9, r0
 8003536:	4650      	mov	r0, sl
 8003538:	f00f fa6c 	bl	8012a14 <__ieee754_sqrtf>
 800353c:	4682      	mov	sl, r0
 800353e:	2080      	movs	r0, #128	; 0x80
 8003540:	0180      	lsls	r0, r0, #6
 8003542:	1bc0      	subs	r0, r0, r7
 8003544:	0040      	lsls	r0, r0, #1
 8003546:	f00b ff07 	bl	800f358 <__aeabi_i2f>
 800354a:	1c01      	adds	r1, r0, #0
 800354c:	4650      	mov	r0, sl
 800354e:	f00a fedb 	bl	800e308 <__aeabi_fdiv>
 8003552:	493a      	ldr	r1, [pc, #232]	; (800363c <envelope_create_service+0xa02>)
 8003554:	1c07      	adds	r7, r0, #0
 8003556:	4648      	mov	r0, r9
 8003558:	f00a ffe8 	bl	800e52c <__aeabi_fmul>
 800355c:	4649      	mov	r1, r9
 800355e:	f00a ffe5 	bl	800e52c <__aeabi_fmul>
 8003562:	4937      	ldr	r1, [pc, #220]	; (8003640 <envelope_create_service+0xa06>)
 8003564:	f00a fd36 	bl	800dfd4 <__aeabi_fadd>
 8003568:	f00f fa54 	bl	8012a14 <__ieee754_sqrtf>
 800356c:	4641      	mov	r1, r8
 800356e:	f00b f90f 	bl	800e790 <__aeabi_fsub>
 8003572:	f00f fa4f 	bl	8012a14 <__ieee754_sqrtf>
 8003576:	1c01      	adds	r1, r0, #0
 8003578:	1c38      	adds	r0, r7, #0
 800357a:	f00a ffd7 	bl	800e52c <__aeabi_fmul>
 800357e:	4931      	ldr	r1, [pc, #196]	; (8003644 <envelope_create_service+0xa0a>)
 8003580:	4680      	mov	r8, r0
 8003582:	f00b fccb 	bl	800ef1c <__aeabi_fcmplt>
 8003586:	2800      	cmp	r0, #0
 8003588:	d135      	bne.n	80035f6 <envelope_create_service+0x9bc>
 800358a:	21fe      	movs	r1, #254	; 0xfe
 800358c:	4640      	mov	r0, r8
 800358e:	0589      	lsls	r1, r1, #22
 8003590:	f00b fcd8 	bl	800ef44 <__aeabi_fcmpgt>
 8003594:	4f2c      	ldr	r7, [pc, #176]	; (8003648 <envelope_create_service+0xa0e>)
 8003596:	2800      	cmp	r0, #0
 8003598:	d022      	beq.n	80035e0 <envelope_create_service+0x9a6>
 800359a:	20fe      	movs	r0, #254	; 0xfe
 800359c:	4641      	mov	r1, r8
 800359e:	0580      	lsls	r0, r0, #22
 80035a0:	f00a feb2 	bl	800e308 <__aeabi_fdiv>
 80035a4:	4680      	mov	r8, r0
 80035a6:	0038      	movs	r0, r7
 80035a8:	4642      	mov	r2, r8
 80035aa:	2109      	movs	r1, #9
 80035ac:	3040      	adds	r0, #64	; 0x40
 80035ae:	f009 f969 	bl	800c884 <eval_even_poly_f32.lto_priv.674>
 80035b2:	1c01      	adds	r1, r0, #0
 80035b4:	4640      	mov	r0, r8
 80035b6:	f00a ffb9 	bl	800e52c <__aeabi_fmul>
 80035ba:	1c01      	adds	r1, r0, #0
 80035bc:	4823      	ldr	r0, [pc, #140]	; (800364c <envelope_create_service+0xa12>)
 80035be:	f00b f8e7 	bl	800e790 <__aeabi_fsub>
 80035c2:	4923      	ldr	r1, [pc, #140]	; (8003650 <envelope_create_service+0xa16>)
 80035c4:	f00b f8e4 	bl	800e790 <__aeabi_fsub>
 80035c8:	4922      	ldr	r1, [pc, #136]	; (8003654 <envelope_create_service+0xa1a>)
 80035ca:	f00a fe9d 	bl	800e308 <__aeabi_fdiv>
 80035ce:	239e      	movs	r3, #158	; 0x9e
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	50e0      	str	r0, [r4, r3]
 80035d4:	238f      	movs	r3, #143	; 0x8f
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	18e3      	adds	r3, r4, r3
 80035da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035dc:	6363      	str	r3, [r4, #52]	; 0x34
 80035de:	e62a      	b.n	8003236 <envelope_create_service+0x5fc>
 80035e0:	0038      	movs	r0, r7
 80035e2:	4642      	mov	r2, r8
 80035e4:	2109      	movs	r1, #9
 80035e6:	3040      	adds	r0, #64	; 0x40
 80035e8:	f009 f94c 	bl	800c884 <eval_even_poly_f32.lto_priv.674>
 80035ec:	1c01      	adds	r1, r0, #0
 80035ee:	4640      	mov	r0, r8
 80035f0:	f00a ff9c 	bl	800e52c <__aeabi_fmul>
 80035f4:	e7e8      	b.n	80035c8 <envelope_create_service+0x98e>
 80035f6:	4818      	ldr	r0, [pc, #96]	; (8003658 <envelope_create_service+0xa1e>)
 80035f8:	e7e6      	b.n	80035c8 <envelope_create_service+0x98e>
 80035fa:	4642      	mov	r2, r8
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <envelope_create_service+0xa22>)
 80035fe:	6393      	str	r3, [r2, #56]	; 0x38
 8003600:	e7e8      	b.n	80035d4 <envelope_create_service+0x99a>
 8003602:	0022      	movs	r2, r4
 8003604:	32f8      	adds	r2, #248	; 0xf8
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	0013      	movs	r3, r2
 800360a:	e6cd      	b.n	80033a8 <envelope_create_service+0x76e>
 800360c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800360e:	68c3      	ldr	r3, [r0, #12]
 8003610:	4798      	blx	r3
 8003612:	23e1      	movs	r3, #225	; 0xe1
 8003614:	9a01      	ldr	r2, [sp, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	50e2      	str	r2, [r4, r3]
 800361a:	4b11      	ldr	r3, [pc, #68]	; (8003660 <envelope_create_service+0xa26>)
 800361c:	606b      	str	r3, [r5, #4]
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <envelope_create_service+0xa2a>)
 8003620:	60ab      	str	r3, [r5, #8]
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <envelope_create_service+0xa2e>)
 8003624:	60eb      	str	r3, [r5, #12]
 8003626:	f7ff fb97 	bl	8002d58 <envelope_create_service+0x11e>
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	0801bc93 	.word	0x0801bc93
 8003630:	0801bf17 	.word	0x0801bf17
 8003634:	3b843809 	.word	0x3b843809
 8003638:	3f15f61a 	.word	0x3f15f61a
 800363c:	3fb504f3 	.word	0x3fb504f3
 8003640:	3f95f61a 	.word	0x3f95f61a
 8003644:	bf800000 	.word	0xbf800000
 8003648:	080156f8 	.word	0x080156f8
 800364c:	3fc90fdb 	.word	0x3fc90fdb
 8003650:	333bbd2e 	.word	0x333bbd2e
 8003654:	40490fdb 	.word	0x40490fdb
 8003658:	7fc00000 	.word	0x7fc00000
 800365c:	08004b79 	.word	0x08004b79
 8003660:	080058fd 	.word	0x080058fd
 8003664:	080058e9 	.word	0x080058e9
 8003668:	08006019 	.word	0x08006019

0800366c <acc_base_configuration_sparse_sweeps_per_frame_get>:
 800366c:	b510      	push	{r4, lr}
 800366e:	0004      	movs	r4, r0
 8003670:	f002 ffba 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003674:	2300      	movs	r3, #0
 8003676:	4298      	cmp	r0, r3
 8003678:	d001      	beq.n	800367e <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 800367a:	3460      	adds	r4, #96	; 0x60
 800367c:	8823      	ldrh	r3, [r4, #0]
 800367e:	0018      	movs	r0, r3
 8003680:	bd10      	pop	{r4, pc}

08003682 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 8003682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8003684:	4f11      	ldr	r7, [pc, #68]	; (80036cc <sparse_data_malloc+0x4a>)
 8003686:	6a3c      	ldr	r4, [r7, #32]
 8003688:	0020      	movs	r0, r4
 800368a:	f7fc fd49 	bl	8000120 <acc_service_configuration_valid>
 800368e:	4d10      	ldr	r5, [pc, #64]	; (80036d0 <sparse_data_malloc+0x4e>)
 8003690:	2800      	cmp	r0, #0
 8003692:	d018      	beq.n	80036c6 <sparse_data_malloc+0x44>
 8003694:	6920      	ldr	r0, [r4, #16]
 8003696:	f7ff ffe9 	bl	800366c <acc_base_configuration_sparse_sweeps_per_frame_get>
 800369a:	0006      	movs	r6, r0
 800369c:	86a8      	strh	r0, [r5, #52]	; 0x34
	bins = sparse_metadata.data_length/sweeps;
 800369e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 80036a0:	0031      	movs	r1, r6
 80036a2:	f00b fa75 	bl	800eb90 <__udivsi3>
	if(far_active){
 80036a6:	7a3b      	ldrb	r3, [r7, #8]
	bins = sparse_metadata.data_length/sweeps;
 80036a8:	b284      	uxth	r4, r0
 80036aa:	86ec      	strh	r4, [r5, #54]	; 0x36
	if(far_active){
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <sparse_data_malloc+0x3a>
		bins += sparse_metadata_far.data_length/sweeps;
 80036b0:	8ab8      	ldrh	r0, [r7, #20]
 80036b2:	0031      	movs	r1, r6
 80036b4:	f00b fa6c 	bl	800eb90 <__udivsi3>
 80036b8:	1824      	adds	r4, r4, r0
 80036ba:	86ec      	strh	r4, [r5, #54]	; 0x36
	return data_malloc(sweeps,bins);
 80036bc:	8ee9      	ldrh	r1, [r5, #54]	; 0x36
 80036be:	0030      	movs	r0, r6
 80036c0:	f7fd fd24 	bl	800110c <data_malloc>
}
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 80036c6:	86a8      	strh	r0, [r5, #52]	; 0x34
 80036c8:	deff      	udf	#255	; 0xff
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	2000018c 	.word	0x2000018c
 80036d0:	2000010c 	.word	0x2000010c

080036d4 <acc_base_configuration_wg_duration_get>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	0004      	movs	r4, r0
 80036d8:	f002 ff86 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80036dc:	2300      	movs	r3, #0
 80036de:	4298      	cmp	r0, r3
 80036e0:	d001      	beq.n	80036e6 <acc_base_configuration_wg_duration_get+0x12>
 80036e2:	3404      	adds	r4, #4
 80036e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036e6:	0018      	movs	r0, r3
 80036e8:	bd10      	pop	{r4, pc}

080036ea <acc_base_configuration_integrator_get>:
 80036ea:	b510      	push	{r4, lr}
 80036ec:	0004      	movs	r4, r0
 80036ee:	f002 ff7b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80036f2:	2300      	movs	r3, #0
 80036f4:	4298      	cmp	r0, r3
 80036f6:	d001      	beq.n	80036fc <acc_base_configuration_integrator_get+0x12>
 80036f8:	3402      	adds	r4, #2
 80036fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036fc:	0018      	movs	r0, r3
 80036fe:	bd10      	pop	{r4, pc}

08003700 <acc_base_configuration_update_rate_get>:
 8003700:	b510      	push	{r4, lr}
 8003702:	0004      	movs	r4, r0
 8003704:	f002 ff70 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003708:	2800      	cmp	r0, #0
 800370a:	d00b      	beq.n	8003724 <acc_base_configuration_update_rate_get+0x24>
 800370c:	7920      	ldrb	r0, [r4, #4]
 800370e:	2803      	cmp	r0, #3
 8003710:	d808      	bhi.n	8003724 <acc_base_configuration_update_rate_get+0x24>
 8003712:	f00b fa29 	bl	800eb68 <__gnu_thumb1_case_uqi>
 8003716:	0202      	.short	0x0202
 8003718:	0505      	.short	0x0505
 800371a:	20ff      	movs	r0, #255	; 0xff
 800371c:	05c0      	lsls	r0, r0, #23
 800371e:	bd10      	pop	{r4, pc}
 8003720:	68a0      	ldr	r0, [r4, #8]
 8003722:	e7fc      	b.n	800371e <acc_base_configuration_update_rate_get+0x1e>
 8003724:	4800      	ldr	r0, [pc, #0]	; (8003728 <acc_base_configuration_update_rate_get+0x28>)
 8003726:	e7fa      	b.n	800371e <acc_base_configuration_update_rate_get+0x1e>
 8003728:	7fc00000 	.word	0x7fc00000

0800372c <acc_base_configuration_repetition_mode_get>:
 800372c:	b510      	push	{r4, lr}
 800372e:	0004      	movs	r4, r0
 8003730:	f002 ff5a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003734:	2300      	movs	r3, #0
 8003736:	4298      	cmp	r0, r3
 8003738:	d000      	beq.n	800373c <acc_base_configuration_repetition_mode_get+0x10>
 800373a:	7923      	ldrb	r3, [r4, #4]
 800373c:	0018      	movs	r0, r3
 800373e:	bd10      	pop	{r4, pc}

08003740 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8003740:	b510      	push	{r4, lr}
 8003742:	0004      	movs	r4, r0
 8003744:	f002 ff50 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003748:	2300      	movs	r3, #0
 800374a:	4298      	cmp	r0, r3
 800374c:	d001      	beq.n	8003752 <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 800374e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8003750:	b2db      	uxtb	r3, r3
 8003752:	0018      	movs	r0, r3
 8003754:	bd10      	pop	{r4, pc}

08003756 <acc_base_configuration_decrease_tx_emission_get>:
 8003756:	b510      	push	{r4, lr}
 8003758:	0004      	movs	r4, r0
 800375a:	f002 ff45 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800375e:	2800      	cmp	r0, #0
 8003760:	d001      	beq.n	8003766 <acc_base_configuration_decrease_tx_emission_get+0x10>
 8003762:	3448      	adds	r4, #72	; 0x48
 8003764:	7820      	ldrb	r0, [r4, #0]
 8003766:	bd10      	pop	{r4, pc}

08003768 <acc_base_configuration_tx_disable_get>:
 8003768:	b510      	push	{r4, lr}
 800376a:	0004      	movs	r4, r0
 800376c:	f002 ff3c 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003770:	2800      	cmp	r0, #0
 8003772:	d001      	beq.n	8003778 <acc_base_configuration_tx_disable_get+0x10>
 8003774:	3447      	adds	r4, #71	; 0x47
 8003776:	7820      	ldrb	r0, [r4, #0]
 8003778:	bd10      	pop	{r4, pc}

0800377a <acc_base_configuration_power_save_mode_get>:
 800377a:	b510      	push	{r4, lr}
 800377c:	0004      	movs	r4, r0
 800377e:	f002 ff33 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003782:	2300      	movs	r3, #0
 8003784:	4298      	cmp	r0, r3
 8003786:	d000      	beq.n	800378a <acc_base_configuration_power_save_mode_get+0x10>
 8003788:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378a:	0018      	movs	r0, r3
 800378c:	bd10      	pop	{r4, pc}

0800378e <acc_base_configuration_sensor_get>:
 800378e:	b510      	push	{r4, lr}
 8003790:	0004      	movs	r4, r0
 8003792:	f002 ff29 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003796:	2300      	movs	r3, #0
 8003798:	4298      	cmp	r0, r3
 800379a:	d000      	beq.n	800379e <acc_base_configuration_sensor_get+0x10>
 800379c:	68e3      	ldr	r3, [r4, #12]
 800379e:	0018      	movs	r0, r3
 80037a0:	bd10      	pop	{r4, pc}

080037a2 <acc_service_handle_valid>:
 80037a2:	b510      	push	{r4, lr}
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d004      	beq.n	80037b2 <acc_service_handle_valid+0x10>
 80037a8:	6802      	ldr	r2, [r0, #0]
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <acc_service_handle_valid+0x22>)
 80037ac:	2001      	movs	r0, #1
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d006      	beq.n	80037c0 <acc_service_handle_valid+0x1e>
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <acc_service_handle_valid+0x26>)
 80037b4:	2000      	movs	r0, #0
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <acc_service_handle_valid+0x2a>)
 80037ba:	4905      	ldr	r1, [pc, #20]	; (80037d0 <acc_service_handle_valid+0x2e>)
 80037bc:	4798      	blx	r3
 80037be:	2000      	movs	r0, #0
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	acc09ee8 	.word	0xacc09ee8
 80037c8:	200003f0 	.word	0x200003f0
 80037cc:	0801bf29 	.word	0x0801bf29
 80037d0:	0801cdfe 	.word	0x0801cdfe

080037d4 <acc_service_deactivate>:
 80037d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d6:	0004      	movs	r4, r0
 80037d8:	f7ff ffe3 	bl	80037a2 <acc_service_handle_valid>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d02d      	beq.n	800383c <acc_service_deactivate+0x68>
 80037e0:	4d1a      	ldr	r5, [pc, #104]	; (800384c <acc_service_deactivate+0x78>)
 80037e2:	002b      	movs	r3, r5
 80037e4:	3338      	adds	r3, #56	; 0x38
 80037e6:	781e      	ldrb	r6, [r3, #0]
 80037e8:	2e00      	cmp	r6, #0
 80037ea:	d027      	beq.n	800383c <acc_service_deactivate+0x68>
 80037ec:	7a63      	ldrb	r3, [r4, #9]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d122      	bne.n	8003838 <acc_service_deactivate+0x64>
 80037f2:	6863      	ldr	r3, [r4, #4]
 80037f4:	2b2a      	cmp	r3, #42	; 0x2a
 80037f6:	d821      	bhi.n	800383c <acc_service_deactivate+0x68>
 80037f8:	002a      	movs	r2, r5
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	3239      	adds	r2, #57	; 0x39
 80037fe:	5c9f      	ldrb	r7, [r3, r2]
 8003800:	2f00      	cmp	r7, #0
 8003802:	d11b      	bne.n	800383c <acc_service_deactivate+0x68>
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]
 8003808:	7ee3      	ldrb	r3, [r4, #27]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <acc_service_deactivate+0x42>
 800380e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003810:	f002 fc94 	bl	800613c <acc_rss_integration_sensor_device_power_off>
 8003814:	76e7      	strb	r7, [r4, #27]
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	2b2a      	cmp	r3, #42	; 0x2a
 800381a:	d805      	bhi.n	8003828 <acc_service_deactivate+0x54>
 800381c:	002a      	movs	r2, r5
 800381e:	0059      	lsls	r1, r3, #1
 8003820:	3239      	adds	r2, #57	; 0x39
 8003822:	1852      	adds	r2, r2, r1
 8003824:	2100      	movs	r1, #0
 8003826:	7051      	strb	r1, [r2, #1]
 8003828:	2201      	movs	r2, #1
 800382a:	7262      	strb	r2, [r4, #9]
 800382c:	2b2a      	cmp	r3, #42	; 0x2a
 800382e:	d803      	bhi.n	8003838 <acc_service_deactivate+0x64>
 8003830:	4093      	lsls	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	3539      	adds	r5, #57	; 0x39
 8003836:	555a      	strb	r2, [r3, r5]
 8003838:	0030      	movs	r0, r6
 800383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <acc_service_deactivate+0x7c>)
 800383e:	4a05      	ldr	r2, [pc, #20]	; (8003854 <acc_service_deactivate+0x80>)
 8003840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003842:	4905      	ldr	r1, [pc, #20]	; (8003858 <acc_service_deactivate+0x84>)
 8003844:	2000      	movs	r0, #0
 8003846:	4798      	blx	r3
 8003848:	2600      	movs	r6, #0
 800384a:	e7f5      	b.n	8003838 <acc_service_deactivate+0x64>
 800384c:	2000018c 	.word	0x2000018c
 8003850:	200003f0 	.word	0x200003f0
 8003854:	0801bf38 	.word	0x0801bf38
 8003858:	0801cdfe 	.word	0x0801cdfe

0800385c <acc_service_destroy>:
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <acc_service_destroy+0x4c>)
 800385e:	b510      	push	{r4, lr}
 8003860:	3338      	adds	r3, #56	; 0x38
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	0004      	movs	r4, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <acc_service_destroy+0x34>
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	f7ff ff99 	bl	80037a2 <acc_service_handle_valid>
 8003870:	2800      	cmp	r0, #0
 8003872:	d00c      	beq.n	800388e <acc_service_destroy+0x32>
 8003874:	6820      	ldr	r0, [r4, #0]
 8003876:	f7ff ffad 	bl	80037d4 <acc_service_deactivate>
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	68c3      	ldr	r3, [r0, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d000      	beq.n	8003884 <acc_service_destroy+0x28>
 8003882:	4798      	blx	r3
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f7fd f964 	bl	8000b52 <destroy_handle>
 800388a:	2300      	movs	r3, #0
 800388c:	6023      	str	r3, [r4, #0]
 800388e:	bd10      	pop	{r4, pc}
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <acc_service_destroy+0x50>)
 8003892:	001a      	movs	r2, r3
 8003894:	3230      	adds	r2, #48	; 0x30
 8003896:	7812      	ldrb	r2, [r2, #0]
 8003898:	2a00      	cmp	r2, #0
 800389a:	d0f8      	beq.n	800388e <acc_service_destroy+0x32>
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <acc_service_destroy+0x54>)
 80038a0:	4904      	ldr	r1, [pc, #16]	; (80038b4 <acc_service_destroy+0x58>)
 80038a2:	2001      	movs	r0, #1
 80038a4:	4798      	blx	r3
 80038a6:	e7f2      	b.n	800388e <acc_service_destroy+0x32>
 80038a8:	2000010c 	.word	0x2000010c
 80038ac:	200003f0 	.word	0x200003f0
 80038b0:	0801bbd6 	.word	0x0801bbd6
 80038b4:	0801bb17 	.word	0x0801bb17

080038b8 <acc_service_activate>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	46ce      	mov	lr, r9
 80038bc:	4647      	mov	r7, r8
 80038be:	b580      	push	{r7, lr}
 80038c0:	0004      	movs	r4, r0
 80038c2:	f7ff ff6e 	bl	80037a2 <acc_service_handle_valid>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d10b      	bne.n	80038e2 <acc_service_activate+0x2a>
 80038ca:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <acc_service_activate+0x104>)
 80038cc:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <acc_service_activate+0x108>)
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	493c      	ldr	r1, [pc, #240]	; (80039c4 <acc_service_activate+0x10c>)
 80038d2:	2000      	movs	r0, #0
 80038d4:	4798      	blx	r3
 80038d6:	2600      	movs	r6, #0
 80038d8:	0030      	movs	r0, r6
 80038da:	bc0c      	pop	{r2, r3}
 80038dc:	4690      	mov	r8, r2
 80038de:	4699      	mov	r9, r3
 80038e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038e2:	4d39      	ldr	r5, [pc, #228]	; (80039c8 <acc_service_activate+0x110>)
 80038e4:	002b      	movs	r3, r5
 80038e6:	3338      	adds	r3, #56	; 0x38
 80038e8:	781e      	ldrb	r6, [r3, #0]
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	d0ed      	beq.n	80038ca <acc_service_activate+0x12>
 80038ee:	7a63      	ldrb	r3, [r4, #9]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f1      	beq.n	80038d8 <acc_service_activate+0x20>
 80038f4:	6863      	ldr	r3, [r4, #4]
 80038f6:	2b2a      	cmp	r3, #42	; 0x2a
 80038f8:	d8e7      	bhi.n	80038ca <acc_service_activate+0x12>
 80038fa:	002a      	movs	r2, r5
 80038fc:	0059      	lsls	r1, r3, #1
 80038fe:	3239      	adds	r2, #57	; 0x39
 8003900:	5c8f      	ldrb	r7, [r1, r2]
 8003902:	2f00      	cmp	r7, #0
 8003904:	d1e1      	bne.n	80038ca <acc_service_activate+0x12>
 8003906:	2001      	movs	r0, #1
 8003908:	5488      	strb	r0, [r1, r2]
 800390a:	1852      	adds	r2, r2, r1
 800390c:	7852      	ldrb	r2, [r2, #1]
 800390e:	2a00      	cmp	r2, #0
 8003910:	d144      	bne.n	800399c <acc_service_activate+0xe4>
 8003912:	3218      	adds	r2, #24
 8003914:	4690      	mov	r8, r2
 8003916:	4a2d      	ldr	r2, [pc, #180]	; (80039cc <acc_service_activate+0x114>)
 8003918:	44a0      	add	r8, r4
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	2a00      	cmp	r2, #0
 800391e:	d002      	beq.n	8003926 <acc_service_activate+0x6e>
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	2a00      	cmp	r2, #0
 8003924:	d145      	bne.n	80039b2 <acc_service_activate+0xfa>
 8003926:	7e22      	ldrb	r2, [r4, #24]
 8003928:	2a02      	cmp	r2, #2
 800392a:	d01f      	beq.n	800396c <acc_service_activate+0xb4>
 800392c:	4640      	mov	r0, r8
 800392e:	f002 fc0d 	bl	800614c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252>
 8003932:	2800      	cmp	r0, #0
 8003934:	d032      	beq.n	800399c <acc_service_activate+0xe4>
 8003936:	7ea3      	ldrb	r3, [r4, #26]
 8003938:	4699      	mov	r9, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d020      	beq.n	8003980 <acc_service_activate+0xc8>
 800393e:	7e23      	ldrb	r3, [r4, #24]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d110      	bne.n	8003966 <acc_service_activate+0xae>
 8003944:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003946:	2200      	movs	r2, #0
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	69e1      	ldr	r1, [r4, #28]
 800394c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800394e:	4798      	blx	r3
 8003950:	2800      	cmp	r0, #0
 8003952:	d023      	beq.n	800399c <acc_service_activate+0xe4>
 8003954:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003956:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	4798      	blx	r3
 800395c:	2800      	cmp	r0, #0
 800395e:	d01d      	beq.n	800399c <acc_service_activate+0xe4>
 8003960:	4640      	mov	r0, r8
 8003962:	f002 fb21 	bl	8005fa8 <acc_sensor_manager_hibernate_enter.lto_priv.251>
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	2b2a      	cmp	r3, #42	; 0x2a
 800396a:	d805      	bhi.n	8003978 <acc_service_activate+0xc0>
 800396c:	002a      	movs	r2, r5
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	3239      	adds	r2, #57	; 0x39
 8003972:	18d3      	adds	r3, r2, r3
 8003974:	2201      	movs	r2, #1
 8003976:	705a      	strb	r2, [r3, #1]
 8003978:	2300      	movs	r3, #0
 800397a:	0037      	movs	r7, r6
 800397c:	7263      	strb	r3, [r4, #9]
 800397e:	e00d      	b.n	800399c <acc_service_activate+0xe4>
 8003980:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003982:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	4798      	blx	r3
 8003988:	2800      	cmp	r0, #0
 800398a:	d007      	beq.n	800399c <acc_service_activate+0xe4>
 800398c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800398e:	464a      	mov	r2, r9
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	69e1      	ldr	r1, [r4, #28]
 8003994:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003996:	4798      	blx	r3
 8003998:	2800      	cmp	r0, #0
 800399a:	d1d0      	bne.n	800393e <acc_service_activate+0x86>
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	2b2a      	cmp	r3, #42	; 0x2a
 80039a0:	d803      	bhi.n	80039aa <acc_service_activate+0xf2>
 80039a2:	2200      	movs	r2, #0
 80039a4:	3539      	adds	r5, #57	; 0x39
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	555a      	strb	r2, [r3, r5]
 80039aa:	2f00      	cmp	r7, #0
 80039ac:	d100      	bne.n	80039b0 <acc_service_activate+0xf8>
 80039ae:	e78c      	b.n	80038ca <acc_service_activate+0x12>
 80039b0:	e792      	b.n	80038d8 <acc_service_activate+0x20>
 80039b2:	4640      	mov	r0, r8
 80039b4:	4790      	blx	r2
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d0f0      	beq.n	800399c <acc_service_activate+0xe4>
 80039ba:	e7d4      	b.n	8003966 <acc_service_activate+0xae>
 80039bc:	200003f0 	.word	0x200003f0
 80039c0:	0801bf54 	.word	0x0801bf54
 80039c4:	0801cdfe 	.word	0x0801cdfe
 80039c8:	2000018c 	.word	0x2000018c
 80039cc:	200005a4 	.word	0x200005a4

080039d0 <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 80039d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039d2:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 80039d4:	f7ff ff70 	bl	80038b8 <acc_service_activate>
 80039d8:	4e15      	ldr	r6, [pc, #84]	; (8003a30 <activateService_handle+0x60>)
 80039da:	1e04      	subs	r4, r0, #0
 80039dc:	4d15      	ldr	r5, [pc, #84]	; (8003a34 <activateService_handle+0x64>)
 80039de:	d11a      	bne.n	8003a16 <activateService_handle+0x46>
		ERR_PRINTLN("acc_service_activate() failed");
 80039e0:	4815      	ldr	r0, [pc, #84]	; (8003a38 <activateService_handle+0x68>)
 80039e2:	f011 fa8f 	bl	8014f04 <__wrap_printf>
 80039e6:	4815      	ldr	r0, [pc, #84]	; (8003a3c <activateService_handle+0x6c>)
 80039e8:	f011 fa8c 	bl	8014f04 <__wrap_printf>
 80039ec:	22a4      	movs	r2, #164	; 0xa4
 80039ee:	0031      	movs	r1, r6
 80039f0:	0092      	lsls	r2, r2, #2
 80039f2:	0028      	movs	r0, r5
 80039f4:	f011 fa86 	bl	8014f04 <__wrap_printf>
		acc_service_destroy(&handle);
 80039f8:	a801      	add	r0, sp, #4
 80039fa:	f7ff ff2f 	bl	800385c <acc_service_destroy>
		data_free();
 80039fe:	f7fc ff33 	bl	8000868 <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <activateService_handle+0x70>)
 8003a04:	7a1b      	ldrb	r3, [r3, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <activateService_handle+0x42>
 8003a0a:	480e      	ldr	r0, [pc, #56]	; (8003a44 <activateService_handle+0x74>)
 8003a0c:	3010      	adds	r0, #16
 8003a0e:	f7ff ff25 	bl	800385c <acc_service_destroy>
}
 8003a12:	0020      	movs	r0, r4
 8003a14:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		DBG_PRINTLN("service handle activated");
 8003a16:	480c      	ldr	r0, [pc, #48]	; (8003a48 <activateService_handle+0x78>)
 8003a18:	f011 fa74 	bl	8014f04 <__wrap_printf>
 8003a1c:	480b      	ldr	r0, [pc, #44]	; (8003a4c <activateService_handle+0x7c>)
 8003a1e:	f011 fa71 	bl	8014f04 <__wrap_printf>
 8003a22:	4a0b      	ldr	r2, [pc, #44]	; (8003a50 <activateService_handle+0x80>)
 8003a24:	0031      	movs	r1, r6
 8003a26:	0028      	movs	r0, r5
 8003a28:	f011 fa6c 	bl	8014f04 <__wrap_printf>
 8003a2c:	2401      	movs	r4, #1
 8003a2e:	e7f0      	b.n	8003a12 <activateService_handle+0x42>
 8003a30:	0801bcdb 	.word	0x0801bcdb
 8003a34:	0801c13a 	.word	0x0801c13a
 8003a38:	0801bcff 	.word	0x0801bcff
 8003a3c:	0801bf6e 	.word	0x0801bf6e
 8003a40:	2000018c 	.word	0x2000018c
 8003a44:	2000020c 	.word	0x2000020c
 8003a48:	0801bcc3 	.word	0x0801bcc3
 8003a4c:	0801bf8c 	.word	0x0801bf8c
 8003a50:	0000029a 	.word	0x0000029a

08003a54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003a54:	b570      	push	{r4, r5, r6, lr}
	if (uart_state == 0){
 8003a56:	4c16      	ldr	r4, [pc, #88]	; (8003ab0 <HAL_UART_RxCpltCallback+0x5c>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003a58:	0005      	movs	r5, r0
	if (uart_state == 0){
 8003a5a:	7d21      	ldrb	r1, [r4, #20]
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d10e      	bne.n	8003a7e <HAL_UART_RxCpltCallback+0x2a>
		if (uart_rx_buff[0] == 0xCC){
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_UART_RxCpltCallback+0x60>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2bcc      	cmp	r3, #204	; 0xcc
 8003a66:	d106      	bne.n	8003a76 <HAL_UART_RxCpltCallback+0x22>
			uart_state = 1;
 8003a68:	3bcb      	subs	r3, #203	; 0xcb
			cmd_length = 0;
 8003a6a:	7561      	strb	r1, [r4, #21]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 8003a6c:	3102      	adds	r1, #2
			uart_state = 1;
 8003a6e:	7523      	strb	r3, [r4, #20]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 8003a70:	f006 ffb8 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
}
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003a76:	2101      	movs	r1, #1
 8003a78:	f006 ffb4 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
 8003a7c:	e7fa      	b.n	8003a74 <HAL_UART_RxCpltCallback+0x20>
	}else if (uart_state == 1){
 8003a7e:	2901      	cmp	r1, #1
 8003a80:	d111      	bne.n	8003aa6 <HAL_UART_RxCpltCallback+0x52>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <HAL_UART_RxCpltCallback+0x60>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	7563      	strb	r3, [r4, #21]
		if (cmd_length +2 > UART_BUFF){
 8003a88:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8a:	d807      	bhi.n	8003a9c <HAL_UART_RxCpltCallback+0x48>
		uart_state = 3;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	7523      	strb	r3, [r4, #20]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 8003a90:	7d61      	ldrb	r1, [r4, #21]
 8003a92:	0028      	movs	r0, r5
 8003a94:	3102      	adds	r1, #2
 8003a96:	f006 ffa5 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
 8003a9a:	e7eb      	b.n	8003a74 <HAL_UART_RxCpltCallback+0x20>
			uart_state = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	7523      	strb	r3, [r4, #20]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003aa0:	f006 ffa0 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
 8003aa4:	e7f4      	b.n	8003a90 <HAL_UART_RxCpltCallback+0x3c>
	}else if (uart_state == 3){
 8003aa6:	2903      	cmp	r1, #3
 8003aa8:	d1e4      	bne.n	8003a74 <HAL_UART_RxCpltCallback+0x20>
		uart_state = 4;
 8003aaa:	2304      	movs	r3, #4
 8003aac:	7523      	strb	r3, [r4, #20]
 8003aae:	e7e1      	b.n	8003a74 <HAL_UART_RxCpltCallback+0x20>
 8003ab0:	2000020c 	.word	0x2000020c
 8003ab4:	200004a8 	.word	0x200004a8

08003ab8 <RegInt_getreg>:
uint32_t RegInt_getreg(uint8_t reg){
 8003ab8:	b510      	push	{r4, lr}
	uint32_t* regptr = RegInt_regmap(reg);
 8003aba:	f7fc fe59 	bl	8000770 <RegInt_regmap>
	return *regptr;
 8003abe:	6800      	ldr	r0, [r0, #0]
}
 8003ac0:	bd10      	pop	{r4, pc}

08003ac2 <activateService>:
int8_t activateService(void){
 8003ac2:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 8003ac4:	4817      	ldr	r0, [pc, #92]	; (8003b24 <activateService+0x62>)
 8003ac6:	f011 fa1d 	bl	8014f04 <__wrap_printf>
 8003aca:	4817      	ldr	r0, [pc, #92]	; (8003b28 <activateService+0x66>)
 8003acc:	f011 fa1a 	bl	8014f04 <__wrap_printf>
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <activateService+0x6a>)
 8003ad2:	4917      	ldr	r1, [pc, #92]	; (8003b30 <activateService+0x6e>)
 8003ad4:	4817      	ldr	r0, [pc, #92]	; (8003b34 <activateService+0x72>)
 8003ad6:	f011 fa15 	bl	8014f04 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8003ada:	2002      	movs	r0, #2
 8003adc:	f7ff ffec 	bl	8003ab8 <RegInt_getreg>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 8003ae0:	2802      	cmp	r0, #2
 8003ae2:	d10a      	bne.n	8003afa <activateService+0x38>
 8003ae4:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <activateService+0x76>)
 8003ae6:	6998      	ldr	r0, [r3, #24]
 8003ae8:	f7ff ff72 	bl	80039d0 <activateService_handle>
 8003aec:	0004      	movs	r4, r0
    if(success){
 8003aee:	2c00      	cmp	r4, #0
 8003af0:	d012      	beq.n	8003b18 <activateService+0x56>
        Reg_regor(0x06, 0x00000002);
 8003af2:	2002      	movs	r0, #2
 8003af4:	f007 f86e 	bl	800abd4 <Reg_regor.constprop.76>
 8003af8:	e00c      	b.n	8003b14 <activateService+0x52>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 8003afa:	2804      	cmp	r0, #4
 8003afc:	d105      	bne.n	8003b0a <activateService+0x48>
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <activateService+0x76>)
 8003b00:	69d8      	ldr	r0, [r3, #28]
 8003b02:	f7ff ff65 	bl	80039d0 <activateService_handle>
 8003b06:	0004      	movs	r4, r0
 8003b08:	e7f1      	b.n	8003aee <activateService+0x2c>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 8003b0a:	2080      	movs	r0, #128	; 0x80
 8003b0c:	02c0      	lsls	r0, r0, #11
 8003b0e:	f007 f861 	bl	800abd4 <Reg_regor.constprop.76>
 8003b12:	2400      	movs	r4, #0
}
 8003b14:	0020      	movs	r0, r4
 8003b16:	bd10      	pop	{r4, pc}
        Reg_regor(0x06, 0x00100000);
 8003b18:	2080      	movs	r0, #128	; 0x80
 8003b1a:	0340      	lsls	r0, r0, #13
 8003b1c:	f007 f85a 	bl	800abd4 <Reg_regor.constprop.76>
 8003b20:	e7f8      	b.n	8003b14 <activateService+0x52>
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	0801bcc3 	.word	0x0801bcc3
 8003b28:	0801bfa5 	.word	0x0801bfa5
 8003b2c:	0000027d 	.word	0x0000027d
 8003b30:	0801bcdb 	.word	0x0801bcdb
 8003b34:	0801c13a 	.word	0x0801c13a
 8003b38:	2000020c 	.word	0x2000020c

08003b3c <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	46c6      	mov	lr, r8
 8003b40:	0004      	movs	r4, r0
 8003b42:	b500      	push	{lr}
	DBG_PRINTLN("updating config");
 8003b44:	487f      	ldr	r0, [pc, #508]	; (8003d44 <updateSparseConfig+0x208>)
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8003b46:	4688      	mov	r8, r1
 8003b48:	0017      	movs	r7, r2
	DBG_PRINTLN("updating config");
 8003b4a:	f011 f9db 	bl	8014f04 <__wrap_printf>
 8003b4e:	487e      	ldr	r0, [pc, #504]	; (8003d48 <updateSparseConfig+0x20c>)
 8003b50:	f011 f9d8 	bl	8014f04 <__wrap_printf>
 8003b54:	22c4      	movs	r2, #196	; 0xc4
 8003b56:	497d      	ldr	r1, [pc, #500]	; (8003d4c <updateSparseConfig+0x210>)
 8003b58:	32ff      	adds	r2, #255	; 0xff
 8003b5a:	487d      	ldr	r0, [pc, #500]	; (8003d50 <updateSparseConfig+0x214>)
 8003b5c:	f011 f9d2 	bl	8014f04 <__wrap_printf>
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8003b60:	2028      	movs	r0, #40	; 0x28
 8003b62:	f7ff ffa9 	bl	8003ab8 <RegInt_getreg>
 8003b66:	b2c1      	uxtb	r1, r0
 8003b68:	0020      	movs	r0, r4
 8003b6a:	f7fc ff61 	bl	8000a30 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8003b6e:	2022      	movs	r0, #34	; 0x22
 8003b70:	f7ff ffa2 	bl	8003ab8 <RegInt_getreg>
	if(rep_mode == 0x01){
 8003b74:	2801      	cmp	r0, #1
 8003b76:	d000      	beq.n	8003b7a <updateSparseConfig+0x3e>
 8003b78:	e0c2      	b.n	8003d00 <updateSparseConfig+0x1c4>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8003b7a:	3022      	adds	r0, #34	; 0x22
 8003b7c:	f7ff ff9c 	bl	8003ab8 <RegInt_getreg>
 8003b80:	0006      	movs	r6, r0
 8003b82:	0020      	movs	r0, r4
 8003b84:	f7fc fb0c 	bl	80001a0 <acc_service_get_base_configuration>
 8003b88:	0005      	movs	r5, r0
 8003b8a:	f002 fd2d 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d008      	beq.n	8003ba4 <updateSparseConfig+0x68>
 8003b92:	2303      	movs	r3, #3
 8003b94:	0030      	movs	r0, r6
 8003b96:	712b      	strb	r3, [r5, #4]
 8003b98:	f00b fc28 	bl	800f3ec <__aeabi_ui2f>
 8003b9c:	496d      	ldr	r1, [pc, #436]	; (8003d54 <updateSparseConfig+0x218>)
 8003b9e:	f00a fbb3 	bl	800e308 <__aeabi_fdiv>
 8003ba2:	60a8      	str	r0, [r5, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8003ba4:	2026      	movs	r0, #38	; 0x26
 8003ba6:	f7ff ff87 	bl	8003ab8 <RegInt_getreg>
 8003baa:	0006      	movs	r6, r0
 8003bac:	0020      	movs	r0, r4
 8003bae:	f7fc faf7 	bl	80001a0 <acc_service_get_base_configuration>
 8003bb2:	0005      	movs	r5, r0
 8003bb4:	f002 fd18 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	d003      	beq.n	8003bc4 <updateSparseConfig+0x88>
 8003bbc:	1e73      	subs	r3, r6, #1
 8003bbe:	419e      	sbcs	r6, r3
 8003bc0:	3547      	adds	r5, #71	; 0x47
 8003bc2:	702e      	strb	r6, [r5, #0]
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8003bc4:	2025      	movs	r0, #37	; 0x25
 8003bc6:	f7ff ff77 	bl	8003ab8 <RegInt_getreg>
 8003bca:	0006      	movs	r6, r0
 8003bcc:	0020      	movs	r0, r4
 8003bce:	f7fc fae7 	bl	80001a0 <acc_service_get_base_configuration>
 8003bd2:	0005      	movs	r5, r0
 8003bd4:	f002 fd08 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d000      	beq.n	8003bde <updateSparseConfig+0xa2>
 8003bdc:	63ae      	str	r6, [r5, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8003bde:	2033      	movs	r0, #51	; 0x33
 8003be0:	f7ff ff6a 	bl	8003ab8 <RegInt_getreg>
 8003be4:	0006      	movs	r6, r0
 8003be6:	0020      	movs	r0, r4
 8003be8:	f7fc fada 	bl	80001a0 <acc_service_get_base_configuration>
 8003bec:	0005      	movs	r5, r0
 8003bee:	f002 fcfb 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d003      	beq.n	8003bfe <updateSparseConfig+0xc2>
 8003bf6:	1e73      	subs	r3, r6, #1
 8003bf8:	419e      	sbcs	r6, r3
 8003bfa:	354e      	adds	r5, #78	; 0x4e
 8003bfc:	702e      	strb	r6, [r5, #0]
 8003bfe:	0020      	movs	r0, r4
 8003c00:	f7fc face 	bl	80001a0 <acc_service_get_base_configuration>
 8003c04:	0005      	movs	r5, r0
 8003c06:	f002 fcef 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d006      	beq.n	8003c1c <updateSparseConfig+0xe0>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f00b fbec 	bl	800f3ec <__aeabi_ui2f>
 8003c14:	494f      	ldr	r1, [pc, #316]	; (8003d54 <updateSparseConfig+0x218>)
 8003c16:	f00a fb77 	bl	800e308 <__aeabi_fdiv>
 8003c1a:	6268      	str	r0, [r5, #36]	; 0x24
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f7fc fabf 	bl	80001a0 <acc_service_get_base_configuration>
 8003c22:	0005      	movs	r5, r0
 8003c24:	f002 fce0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d006      	beq.n	8003c3a <updateSparseConfig+0xfe>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 8003c2c:	0038      	movs	r0, r7
 8003c2e:	f00b fbdd 	bl	800f3ec <__aeabi_ui2f>
 8003c32:	4948      	ldr	r1, [pc, #288]	; (8003d54 <updateSparseConfig+0x218>)
 8003c34:	f00a fb68 	bl	800e308 <__aeabi_fdiv>
 8003c38:	62a8      	str	r0, [r5, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8003c3a:	2024      	movs	r0, #36	; 0x24
 8003c3c:	f7ff ff3c 	bl	8003ab8 <RegInt_getreg>
 8003c40:	f00b fbd4 	bl	800f3ec <__aeabi_ui2f>
 8003c44:	4943      	ldr	r1, [pc, #268]	; (8003d54 <updateSparseConfig+0x218>)
 8003c46:	f00a fb5f 	bl	800e308 <__aeabi_fdiv>
 8003c4a:	1c01      	adds	r1, r0, #0
 8003c4c:	0020      	movs	r0, r4
 8003c4e:	f7fc ff09 	bl	8000a64 <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 8003c52:	2030      	movs	r0, #48	; 0x30
 8003c54:	f7ff ff30 	bl	8003ab8 <RegInt_getreg>
 8003c58:	0005      	movs	r5, r0
 8003c5a:	0020      	movs	r0, r4
 8003c5c:	f7fc faa0 	bl	80001a0 <acc_service_get_base_configuration>
 8003c60:	0006      	movs	r6, r0
 8003c62:	f002 fcc1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d001      	beq.n	8003c6e <updateSparseConfig+0x132>
 8003c6a:	b2ed      	uxtb	r5, r5
 8003c6c:	87b5      	strh	r5, [r6, #60]	; 0x3c
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8003c6e:	2032      	movs	r0, #50	; 0x32
 8003c70:	f7ff ff22 	bl	8003ab8 <RegInt_getreg>
 8003c74:	1e41      	subs	r1, r0, #1
 8003c76:	4188      	sbcs	r0, r1
 8003c78:	b2c1      	uxtb	r1, r0
 8003c7a:	0020      	movs	r0, r4
 8003c7c:	f7fc fec7 	bl	8000a0e <acc_service_maximize_signal_attenuation_set>
	acc_service_sparse_configuration_sweeps_per_frame_set (config, RegInt_getreg(0x40));
 8003c80:	2040      	movs	r0, #64	; 0x40
 8003c82:	f7ff ff19 	bl	8003ab8 <RegInt_getreg>
 8003c86:	0006      	movs	r6, r0
 8003c88:	0020      	movs	r0, r4
 8003c8a:	f7fc fa49 	bl	8000120 <acc_service_configuration_valid>
 8003c8e:	2800      	cmp	r0, #0
 8003c90:	d007      	beq.n	8003ca2 <updateSparseConfig+0x166>
 8003c92:	6925      	ldr	r5, [r4, #16]
 8003c94:	0028      	movs	r0, r5
 8003c96:	f002 fca7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d001      	beq.n	8003ca2 <updateSparseConfig+0x166>
 8003c9e:	3560      	adds	r5, #96	; 0x60
 8003ca0:	802e      	strh	r6, [r5, #0]
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 8003ca2:	2041      	movs	r0, #65	; 0x41
 8003ca4:	f7ff ff08 	bl	8003ab8 <RegInt_getreg>
 8003ca8:	0006      	movs	r6, r0
 8003caa:	0020      	movs	r0, r4
 8003cac:	f7fc fa38 	bl	8000120 <acc_service_configuration_valid>
 8003cb0:	2800      	cmp	r0, #0
 8003cb2:	d00c      	beq.n	8003cce <updateSparseConfig+0x192>
 8003cb4:	6925      	ldr	r5, [r4, #16]
 8003cb6:	0028      	movs	r0, r5
 8003cb8:	f002 fc96 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	d006      	beq.n	8003cce <updateSparseConfig+0x192>
 8003cc0:	0030      	movs	r0, r6
 8003cc2:	f00b fb93 	bl	800f3ec <__aeabi_ui2f>
 8003cc6:	4923      	ldr	r1, [pc, #140]	; (8003d54 <updateSparseConfig+0x218>)
 8003cc8:	f00a fb1e 	bl	800e308 <__aeabi_fdiv>
 8003ccc:	6668      	str	r0, [r5, #100]	; 0x64
	acc_service_sparse_sampling_mode_set (config, RegInt_getreg(0x42));
 8003cce:	2042      	movs	r0, #66	; 0x42
 8003cd0:	f7ff fef2 	bl	8003ab8 <RegInt_getreg>
 8003cd4:	0006      	movs	r6, r0
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f7fc fa7a 	bl	80001d0 <get_sparse_configuration>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d020      	beq.n	8003d22 <updateSparseConfig+0x1e6>
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	d016      	beq.n	8003d12 <updateSparseConfig+0x1d6>
 8003ce4:	2e01      	cmp	r6, #1
 8003ce6:	d014      	beq.n	8003d12 <updateSparseConfig+0x1d6>
 8003ce8:	4b1b      	ldr	r3, [pc, #108]	; (8003d58 <updateSparseConfig+0x21c>)
 8003cea:	001a      	movs	r2, r3
 8003cec:	3230      	adds	r2, #48	; 0x30
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d016      	beq.n	8003d22 <updateSparseConfig+0x1e6>
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <updateSparseConfig+0x220>)
 8003cf8:	4919      	ldr	r1, [pc, #100]	; (8003d60 <updateSparseConfig+0x224>)
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	4798      	blx	r3
 8003cfe:	e010      	b.n	8003d22 <updateSparseConfig+0x1e6>
	}else if (rep_mode == 0x02){
 8003d00:	2802      	cmp	r0, #2
 8003d02:	d000      	beq.n	8003d06 <updateSparseConfig+0x1ca>
 8003d04:	e74e      	b.n	8003ba4 <updateSparseConfig+0x68>
 8003d06:	0020      	movs	r0, r4
 8003d08:	f7fc fa4a 	bl	80001a0 <acc_service_get_base_configuration>
 8003d0c:	f7fc fe56 	bl	80009bc <acc_base_configuration_repetition_mode_on_demand_set>
 8003d10:	e748      	b.n	8003ba4 <updateSparseConfig+0x68>
 8003d12:	6925      	ldr	r5, [r4, #16]
 8003d14:	0028      	movs	r0, r5
 8003d16:	f002 fc67 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d001      	beq.n	8003d22 <updateSparseConfig+0x1e6>
 8003d1e:	356a      	adds	r5, #106	; 0x6a
 8003d20:	702e      	strb	r6, [r5, #0]
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
 8003d22:	2029      	movs	r0, #41	; 0x29
 8003d24:	f7ff fec8 	bl	8003ab8 <RegInt_getreg>
 8003d28:	0005      	movs	r5, r0
 8003d2a:	0020      	movs	r0, r4
 8003d2c:	f7fc f9f8 	bl	8000120 <acc_service_configuration_valid>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d003      	beq.n	8003d3c <updateSparseConfig+0x200>
 8003d34:	b2a9      	uxth	r1, r5
 8003d36:	6920      	ldr	r0, [r4, #16]
 8003d38:	f7fc fda2 	bl	8000880 <acc_base_configuration_downsampling_factor_set>
}
 8003d3c:	bc04      	pop	{r2}
 8003d3e:	4690      	mov	r8, r2
 8003d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	0801bcc3 	.word	0x0801bcc3
 8003d48:	0801bfb8 	.word	0x0801bfb8
 8003d4c:	0801bcdb 	.word	0x0801bcdb
 8003d50:	0801c13a 	.word	0x0801c13a
 8003d54:	447a0000 	.word	0x447a0000
 8003d58:	200003f0 	.word	0x200003f0
 8003d5c:	0801bfc8 	.word	0x0801bfc8
 8003d60:	0801bad6 	.word	0x0801bad6

08003d64 <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8003d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003d66:	0004      	movs	r4, r0
 8003d68:	000e      	movs	r6, r1
	if(!force){
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d115      	bne.n	8003d9a <RegInt_setregf+0x36>
    if(reg == 0x02){
 8003d6e:	2802      	cmp	r0, #2
 8003d70:	d104      	bne.n	8003d7c <RegInt_setregf+0x18>
        if(RegInt_getreg(0x06) && 0x00000001){
 8003d72:	2006      	movs	r0, #6
 8003d74:	f7ff fea0 	bl	8003ab8 <RegInt_getreg>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d10e      	bne.n	8003d9a <RegInt_setregf+0x36>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8003d7c:	4913      	ldr	r1, [pc, #76]	; (8003dcc <RegInt_setregf+0x68>)
 8003d7e:	ad01      	add	r5, sp, #4
 8003d80:	220a      	movs	r2, #10
 8003d82:	3164      	adds	r1, #100	; 0x64
 8003d84:	0028      	movs	r0, r5
 8003d86:	f011 fc8d 	bl	80156a4 <memcpy>
 8003d8a:	2300      	movs	r3, #0
		if (reg == read_only_addr[i]){return 0;}
 8003d8c:	5cea      	ldrb	r2, [r5, r3]
 8003d8e:	4294      	cmp	r4, r2
 8003d90:	d00e      	beq.n	8003db0 <RegInt_setregf+0x4c>
		if (reg < read_only_addr[i]){break;}
 8003d92:	d302      	bcc.n	8003d9a <RegInt_setregf+0x36>
 8003d94:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 10; i++){
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d1f8      	bne.n	8003d8c <RegInt_setregf+0x28>
	uint32_t* regptr = RegInt_regmap(reg);
 8003d9a:	0020      	movs	r0, r4
 8003d9c:	f7fc fce8 	bl	8000770 <RegInt_regmap>
	if (!(*regptr == (uint32_t)-1)){
 8003da0:	6802      	ldr	r2, [r0, #0]
	return 1;
 8003da2:	2301      	movs	r3, #1
	if (!(*regptr == (uint32_t)-1)){
 8003da4:	3201      	adds	r2, #1
 8003da6:	d000      	beq.n	8003daa <RegInt_setregf+0x46>
		*regptr = val;
 8003da8:	6006      	str	r6, [r0, #0]
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	b004      	add	sp, #16
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8003db0:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <RegInt_setregf+0x6c>)
 8003db2:	f011 f8a7 	bl	8014f04 <__wrap_printf>
 8003db6:	4807      	ldr	r0, [pc, #28]	; (8003dd4 <RegInt_setregf+0x70>)
 8003db8:	f011 f8a4 	bl	8014f04 <__wrap_printf>
 8003dbc:	2244      	movs	r2, #68	; 0x44
 8003dbe:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <RegInt_setregf+0x74>)
 8003dc0:	4806      	ldr	r0, [pc, #24]	; (8003ddc <RegInt_setregf+0x78>)
 8003dc2:	f011 f89f 	bl	8014f04 <__wrap_printf>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e7ef      	b.n	8003daa <RegInt_setregf+0x46>
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	080156f8 	.word	0x080156f8
 8003dd0:	0801bcc3 	.word	0x0801bcc3
 8003dd4:	0801bfed 	.word	0x0801bfed
 8003dd8:	0801bcdb 	.word	0x0801bcdb
 8003ddc:	0801c13a 	.word	0x0801c13a

08003de0 <stopService>:
void stopService(void){
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	46c6      	mov	lr, r8
 8003de4:	b500      	push	{lr}
    DBG_PRINTLN("stopping service");
 8003de6:	4f3c      	ldr	r7, [pc, #240]	; (8003ed8 <stopService+0xf8>)
void stopService(void){
 8003de8:	b082      	sub	sp, #8
    DBG_PRINTLN("stopping service");
 8003dea:	0038      	movs	r0, r7
 8003dec:	f011 f88a 	bl	8014f04 <__wrap_printf>
 8003df0:	483a      	ldr	r0, [pc, #232]	; (8003edc <stopService+0xfc>)
 8003df2:	f011 f887 	bl	8014f04 <__wrap_printf>
 8003df6:	4d3a      	ldr	r5, [pc, #232]	; (8003ee0 <stopService+0x100>)
 8003df8:	4c3a      	ldr	r4, [pc, #232]	; (8003ee4 <stopService+0x104>)
 8003dfa:	4a3b      	ldr	r2, [pc, #236]	; (8003ee8 <stopService+0x108>)
 8003dfc:	0029      	movs	r1, r5
 8003dfe:	0020      	movs	r0, r4
 8003e00:	f011 f880 	bl	8014f04 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8003e04:	2002      	movs	r0, #2
 8003e06:	f7ff fe57 	bl	8003ab8 <RegInt_getreg>
    if(service_type == 0x02){handle = envelope_handle;}
 8003e0a:	2802      	cmp	r0, #2
 8003e0c:	d144      	bne.n	8003e98 <stopService+0xb8>
 8003e0e:	4b37      	ldr	r3, [pc, #220]	; (8003eec <stopService+0x10c>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	9301      	str	r3, [sp, #4]
	if(acc_service_deactivate(handle)){
 8003e14:	9801      	ldr	r0, [sp, #4]
 8003e16:	f7ff fcdd 	bl	80037d4 <acc_service_deactivate>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d042      	beq.n	8003ea4 <stopService+0xc4>
		acc_service_destroy(&handle);	
 8003e1e:	a801      	add	r0, sp, #4
 8003e20:	f7ff fd1c 	bl	800385c <acc_service_destroy>
		data_free();//maybe a memory leak?
 8003e24:	f7fc fd20 	bl	8000868 <data_free>
		DBG_PRINTLN("sparse service destroyed");
 8003e28:	0038      	movs	r0, r7
 8003e2a:	f011 f86b 	bl	8014f04 <__wrap_printf>
 8003e2e:	4830      	ldr	r0, [pc, #192]	; (8003ef0 <stopService+0x110>)
 8003e30:	f011 f868 	bl	8014f04 <__wrap_printf>
 8003e34:	22ab      	movs	r2, #171	; 0xab
 8003e36:	0029      	movs	r1, r5
 8003e38:	0092      	lsls	r2, r2, #2
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f011 f862 	bl	8014f04 <__wrap_printf>
	if(far_active){
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <stopService+0x114>)
 8003e42:	4698      	mov	r8, r3
 8003e44:	7a1b      	ldrb	r3, [r3, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d019      	beq.n	8003e7e <stopService+0x9e>
	if(acc_service_deactivate(sparse_handle_far)){
 8003e4a:	4e28      	ldr	r6, [pc, #160]	; (8003eec <stopService+0x10c>)
 8003e4c:	6930      	ldr	r0, [r6, #16]
 8003e4e:	f7ff fcc1 	bl	80037d4 <acc_service_deactivate>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d032      	beq.n	8003ebc <stopService+0xdc>
		acc_service_destroy(&sparse_handle_far);	
 8003e56:	0030      	movs	r0, r6
 8003e58:	3010      	adds	r0, #16
 8003e5a:	f7ff fcff 	bl	800385c <acc_service_destroy>
		data_free();
 8003e5e:	f7fc fd03 	bl	8000868 <data_free>
		far_active = 0;
 8003e62:	4642      	mov	r2, r8
 8003e64:	2300      	movs	r3, #0
		DBG_PRINTLN("far sparse service destroyed");
 8003e66:	0038      	movs	r0, r7
		far_active = 0;
 8003e68:	7213      	strb	r3, [r2, #8]
		DBG_PRINTLN("far sparse service destroyed");
 8003e6a:	f011 f84b 	bl	8014f04 <__wrap_printf>
 8003e6e:	4822      	ldr	r0, [pc, #136]	; (8003ef8 <stopService+0x118>)
 8003e70:	f011 f848 	bl	8014f04 <__wrap_printf>
 8003e74:	4a21      	ldr	r2, [pc, #132]	; (8003efc <stopService+0x11c>)
 8003e76:	0029      	movs	r1, r5
 8003e78:	0020      	movs	r0, r4
 8003e7a:	f011 f843 	bl	8014f04 <__wrap_printf>
    uint32_t setbits = RegInt_getreg(0x06);
 8003e7e:	2006      	movs	r0, #6
 8003e80:	f7ff fe1a 	bl	8003ab8 <RegInt_getreg>
    setbits &= 0xFFFFFFFE;
 8003e84:	2201      	movs	r2, #1
 8003e86:	0001      	movs	r1, r0
    RegInt_setregf(0x06, setbits, 1);
 8003e88:	2006      	movs	r0, #6
    setbits &= 0xFFFFFFFE;
 8003e8a:	4391      	bics	r1, r2
    RegInt_setregf(0x06, setbits, 1);
 8003e8c:	f7ff ff6a 	bl	8003d64 <RegInt_setregf>
}
 8003e90:	b002      	add	sp, #8
 8003e92:	bc04      	pop	{r2}
 8003e94:	4690      	mov	r8, r2
 8003e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(service_type == 0x04){handle = sparse_handle;}
 8003e98:	2804      	cmp	r0, #4
 8003e9a:	d1f9      	bne.n	8003e90 <stopService+0xb0>
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <stopService+0x10c>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	e7b7      	b.n	8003e14 <stopService+0x34>
		ERR_PRINTLN("sparse service deactivation fail");
 8003ea4:	4816      	ldr	r0, [pc, #88]	; (8003f00 <stopService+0x120>)
 8003ea6:	f011 f82d 	bl	8014f04 <__wrap_printf>
 8003eaa:	4816      	ldr	r0, [pc, #88]	; (8003f04 <stopService+0x124>)
 8003eac:	f011 f82a 	bl	8014f04 <__wrap_printf>
 8003eb0:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <stopService+0x128>)
 8003eb2:	0029      	movs	r1, r5
 8003eb4:	0020      	movs	r0, r4
 8003eb6:	f011 f825 	bl	8014f04 <__wrap_printf>
 8003eba:	e7c1      	b.n	8003e40 <stopService+0x60>
		ERR_PRINTLN("far sparse service deactivation fail");
 8003ebc:	4810      	ldr	r0, [pc, #64]	; (8003f00 <stopService+0x120>)
 8003ebe:	f011 f821 	bl	8014f04 <__wrap_printf>
 8003ec2:	4812      	ldr	r0, [pc, #72]	; (8003f0c <stopService+0x12c>)
 8003ec4:	f011 f81e 	bl	8014f04 <__wrap_printf>
 8003ec8:	22ae      	movs	r2, #174	; 0xae
 8003eca:	0029      	movs	r1, r5
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f011 f818 	bl	8014f04 <__wrap_printf>
 8003ed4:	e7d3      	b.n	8003e7e <stopService+0x9e>
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	0801bcc3 	.word	0x0801bcc3
 8003edc:	0801bffa 	.word	0x0801bffa
 8003ee0:	0801bcdb 	.word	0x0801bcdb
 8003ee4:	0801c13a 	.word	0x0801c13a
 8003ee8:	000002a1 	.word	0x000002a1
 8003eec:	2000020c 	.word	0x2000020c
 8003ef0:	0801c00f 	.word	0x0801c00f
 8003ef4:	2000018c 	.word	0x2000018c
 8003ef8:	0801c00b 	.word	0x0801c00b
 8003efc:	000002b6 	.word	0x000002b6
 8003f00:	0801bcff 	.word	0x0801bcff
 8003f04:	0801c02c 	.word	0x0801c02c
 8003f08:	000002ae 	.word	0x000002ae
 8003f0c:	0801c028 	.word	0x0801c028

08003f10 <Reg_store_sparse_metadata>:
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8003f10:	b084      	sub	sp, #16
 8003f12:	b510      	push	{r4, lr}
 8003f14:	9002      	str	r0, [sp, #8]
 8003f16:	9103      	str	r1, [sp, #12]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003f18:	9802      	ldr	r0, [sp, #8]
 8003f1a:	491e      	ldr	r1, [pc, #120]	; (8003f94 <Reg_store_sparse_metadata+0x84>)
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8003f1c:	9305      	str	r3, [sp, #20]
 8003f1e:	9204      	str	r2, [sp, #16]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003f20:	f00a fb04 	bl	800e52c <__aeabi_fmul>
 8003f24:	f00b f842 	bl	800efac <__aeabi_f2uiz>
 8003f28:	2201      	movs	r2, #1
 8003f2a:	0001      	movs	r1, r0
 8003f2c:	2081      	movs	r0, #129	; 0x81
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8003f2e:	9c07      	ldr	r4, [sp, #28]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003f30:	f7ff ff18 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8003f34:	4917      	ldr	r1, [pc, #92]	; (8003f94 <Reg_store_sparse_metadata+0x84>)
 8003f36:	9803      	ldr	r0, [sp, #12]
 8003f38:	f00a faf8 	bl	800e52c <__aeabi_fmul>
 8003f3c:	f00b f836 	bl	800efac <__aeabi_f2uiz>
 8003f40:	2201      	movs	r2, #1
 8003f42:	0001      	movs	r1, r0
 8003f44:	2082      	movs	r0, #130	; 0x82
 8003f46:	f7ff ff0d 	bl	8003d64 <RegInt_setregf>
	uint32_t bufflen = metadata.data_length;
 8003f4a:	ab02      	add	r3, sp, #8
 8003f4c:	8919      	ldrh	r1, [r3, #8]
	if(metadata_far_ptr != NULL){
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d001      	beq.n	8003f56 <Reg_store_sparse_metadata+0x46>
		bufflen += (*metadata_far_ptr).data_length;
 8003f52:	8923      	ldrh	r3, [r4, #8]
 8003f54:	18c9      	adds	r1, r1, r3
	RegInt_setregf(0x83, bufflen ,1);
 8003f56:	2201      	movs	r2, #1
 8003f58:	2083      	movs	r0, #131	; 0x83
 8003f5a:	f7ff ff03 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 8003f5e:	490d      	ldr	r1, [pc, #52]	; (8003f94 <Reg_store_sparse_metadata+0x84>)
 8003f60:	9805      	ldr	r0, [sp, #20]
 8003f62:	f00a fae3 	bl	800e52c <__aeabi_fmul>
 8003f66:	f00b f821 	bl	800efac <__aeabi_f2uiz>
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	0001      	movs	r1, r0
 8003f6e:	2084      	movs	r0, #132	; 0x84
 8003f70:	f7ff fef8 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8003f74:	4908      	ldr	r1, [pc, #32]	; (8003f98 <Reg_store_sparse_metadata+0x88>)
 8003f76:	9806      	ldr	r0, [sp, #24]
 8003f78:	f00a fad8 	bl	800e52c <__aeabi_fmul>
 8003f7c:	f00b f816 	bl	800efac <__aeabi_f2uiz>
 8003f80:	2201      	movs	r2, #1
 8003f82:	0001      	movs	r1, r0
 8003f84:	2085      	movs	r0, #133	; 0x85
 8003f86:	f7ff feed 	bl	8003d64 <RegInt_setregf>
}
 8003f8a:	bc10      	pop	{r4}
 8003f8c:	bc08      	pop	{r3}
 8003f8e:	b004      	add	sp, #16
 8003f90:	4718      	bx	r3
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	447a0000 	.word	0x447a0000
 8003f98:	49742400 	.word	0x49742400

08003f9c <createService>:
int8_t createService(void){
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	46de      	mov	lr, fp
 8003fa0:	464e      	mov	r6, r9
 8003fa2:	4645      	mov	r5, r8
 8003fa4:	4657      	mov	r7, sl
 8003fa6:	b5e0      	push	{r5, r6, r7, lr}
    DBG_PRINTLN("creating service");
 8003fa8:	48b1      	ldr	r0, [pc, #708]	; (8004270 <createService+0x2d4>)
int8_t createService(void){
 8003faa:	b083      	sub	sp, #12
    DBG_PRINTLN("creating service");
 8003fac:	f010 ffaa 	bl	8014f04 <__wrap_printf>
 8003fb0:	48b0      	ldr	r0, [pc, #704]	; (8004274 <createService+0x2d8>)
 8003fb2:	f010 ffa7 	bl	8014f04 <__wrap_printf>
 8003fb6:	4db0      	ldr	r5, [pc, #704]	; (8004278 <createService+0x2dc>)
 8003fb8:	4eb0      	ldr	r6, [pc, #704]	; (800427c <createService+0x2e0>)
 8003fba:	4ab1      	ldr	r2, [pc, #708]	; (8004280 <createService+0x2e4>)
 8003fbc:	0029      	movs	r1, r5
 8003fbe:	0030      	movs	r0, r6
 8003fc0:	f010 ffa0 	bl	8014f04 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f7ff fd77 	bl	8003ab8 <RegInt_getreg>
    if(service_type == 0x02){success = createEnvelopeService();}
 8003fca:	2802      	cmp	r0, #2
 8003fcc:	d000      	beq.n	8003fd0 <createService+0x34>
 8003fce:	e1fa      	b.n	80043c6 <createService+0x42a>
    updateEnvelopeConfig(envelope_config);
 8003fd0:	4cac      	ldr	r4, [pc, #688]	; (8004284 <createService+0x2e8>)
    DBG_PRINTLN("updating config");
 8003fd2:	48a7      	ldr	r0, [pc, #668]	; (8004270 <createService+0x2d4>)
    updateEnvelopeConfig(envelope_config);
 8003fd4:	6a27      	ldr	r7, [r4, #32]
    DBG_PRINTLN("updating config");
 8003fd6:	f010 ff95 	bl	8014f04 <__wrap_printf>
 8003fda:	48ab      	ldr	r0, [pc, #684]	; (8004288 <createService+0x2ec>)
 8003fdc:	f010 ff92 	bl	8014f04 <__wrap_printf>
 8003fe0:	22f5      	movs	r2, #245	; 0xf5
 8003fe2:	0029      	movs	r1, r5
 8003fe4:	0052      	lsls	r2, r2, #1
 8003fe6:	0030      	movs	r0, r6
 8003fe8:	f010 ff8c 	bl	8014f04 <__wrap_printf>
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8003fec:	2028      	movs	r0, #40	; 0x28
 8003fee:	f7ff fd63 	bl	8003ab8 <RegInt_getreg>
 8003ff2:	b2c1      	uxtb	r1, r0
 8003ff4:	0038      	movs	r0, r7
 8003ff6:	f7fc fd1b 	bl	8000a30 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8003ffa:	2022      	movs	r0, #34	; 0x22
 8003ffc:	f7ff fd5c 	bl	8003ab8 <RegInt_getreg>
	if(rep_mode == 0x01){
 8004000:	2801      	cmp	r0, #1
 8004002:	d000      	beq.n	8004006 <createService+0x6a>
 8004004:	e107      	b.n	8004216 <createService+0x27a>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8004006:	3022      	adds	r0, #34	; 0x22
 8004008:	f7ff fd56 	bl	8003ab8 <RegInt_getreg>
 800400c:	4682      	mov	sl, r0
 800400e:	0038      	movs	r0, r7
 8004010:	f7fc f8c6 	bl	80001a0 <acc_service_get_base_configuration>
 8004014:	4681      	mov	r9, r0
 8004016:	f002 fae7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800401a:	2800      	cmp	r0, #0
 800401c:	d00a      	beq.n	8004034 <createService+0x98>
 800401e:	2303      	movs	r3, #3
 8004020:	464a      	mov	r2, r9
 8004022:	4650      	mov	r0, sl
 8004024:	7113      	strb	r3, [r2, #4]
 8004026:	f00b f9e1 	bl	800f3ec <__aeabi_ui2f>
 800402a:	4998      	ldr	r1, [pc, #608]	; (800428c <createService+0x2f0>)
 800402c:	f00a f96c 	bl	800e308 <__aeabi_fdiv>
 8004030:	464b      	mov	r3, r9
 8004032:	6098      	str	r0, [r3, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8004034:	2026      	movs	r0, #38	; 0x26
 8004036:	f7ff fd3f 	bl	8003ab8 <RegInt_getreg>
 800403a:	4682      	mov	sl, r0
 800403c:	0038      	movs	r0, r7
 800403e:	f7fc f8af 	bl	80001a0 <acc_service_get_base_configuration>
 8004042:	4681      	mov	r9, r0
 8004044:	f002 fad0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8004048:	2800      	cmp	r0, #0
 800404a:	d005      	beq.n	8004058 <createService+0xbc>
 800404c:	4652      	mov	r2, sl
 800404e:	1e53      	subs	r3, r2, #1
 8004050:	419a      	sbcs	r2, r3
 8004052:	464b      	mov	r3, r9
 8004054:	3347      	adds	r3, #71	; 0x47
 8004056:	701a      	strb	r2, [r3, #0]
	acc_service_envelope_downsampling_factor_set(config, RegInt_getreg(0x29));
 8004058:	2029      	movs	r0, #41	; 0x29
 800405a:	f7ff fd2d 	bl	8003ab8 <RegInt_getreg>
 800405e:	4681      	mov	r9, r0
 8004060:	0038      	movs	r0, r7
 8004062:	f7fc f8ef 	bl	8000244 <get_and_validate_envelope_configuration>
 8004066:	2800      	cmp	r0, #0
 8004068:	d004      	beq.n	8004074 <createService+0xd8>
 800406a:	464b      	mov	r3, r9
 800406c:	6938      	ldr	r0, [r7, #16]
 800406e:	b299      	uxth	r1, r3
 8004070:	f7fc fc06 	bl	8000880 <acc_base_configuration_downsampling_factor_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8004074:	2025      	movs	r0, #37	; 0x25
 8004076:	f7ff fd1f 	bl	8003ab8 <RegInt_getreg>
 800407a:	4682      	mov	sl, r0
 800407c:	0038      	movs	r0, r7
 800407e:	f7fc f88f 	bl	80001a0 <acc_service_get_base_configuration>
 8004082:	4681      	mov	r9, r0
 8004084:	f002 fab0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8004088:	2800      	cmp	r0, #0
 800408a:	d002      	beq.n	8004092 <createService+0xf6>
 800408c:	464b      	mov	r3, r9
 800408e:	4652      	mov	r2, sl
 8004090:	639a      	str	r2, [r3, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8004092:	2033      	movs	r0, #51	; 0x33
 8004094:	f7ff fd10 	bl	8003ab8 <RegInt_getreg>
 8004098:	4682      	mov	sl, r0
 800409a:	0038      	movs	r0, r7
 800409c:	f7fc f880 	bl	80001a0 <acc_service_get_base_configuration>
 80040a0:	4681      	mov	r9, r0
 80040a2:	f002 faa1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d005      	beq.n	80040b6 <createService+0x11a>
 80040aa:	4652      	mov	r2, sl
 80040ac:	1e53      	subs	r3, r2, #1
 80040ae:	419a      	sbcs	r2, r3
 80040b0:	464b      	mov	r3, r9
 80040b2:	334e      	adds	r3, #78	; 0x4e
 80040b4:	701a      	strb	r2, [r3, #0]
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 80040b6:	2020      	movs	r0, #32
 80040b8:	f7ff fcfe 	bl	8003ab8 <RegInt_getreg>
 80040bc:	4682      	mov	sl, r0
 80040be:	0038      	movs	r0, r7
 80040c0:	f7fc f86e 	bl	80001a0 <acc_service_get_base_configuration>
 80040c4:	4681      	mov	r9, r0
 80040c6:	f002 fa8f 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d007      	beq.n	80040de <createService+0x142>
 80040ce:	4650      	mov	r0, sl
 80040d0:	f00b f98c 	bl	800f3ec <__aeabi_ui2f>
 80040d4:	496d      	ldr	r1, [pc, #436]	; (800428c <createService+0x2f0>)
 80040d6:	f00a f917 	bl	800e308 <__aeabi_fdiv>
 80040da:	464b      	mov	r3, r9
 80040dc:	6258      	str	r0, [r3, #36]	; 0x24
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 80040de:	2021      	movs	r0, #33	; 0x21
 80040e0:	f7ff fcea 	bl	8003ab8 <RegInt_getreg>
 80040e4:	4682      	mov	sl, r0
 80040e6:	0038      	movs	r0, r7
 80040e8:	f7fc f85a 	bl	80001a0 <acc_service_get_base_configuration>
 80040ec:	4681      	mov	r9, r0
 80040ee:	f002 fa7b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d007      	beq.n	8004106 <createService+0x16a>
 80040f6:	4650      	mov	r0, sl
 80040f8:	f00b f978 	bl	800f3ec <__aeabi_ui2f>
 80040fc:	4963      	ldr	r1, [pc, #396]	; (800428c <createService+0x2f0>)
 80040fe:	f00a f903 	bl	800e308 <__aeabi_fdiv>
 8004102:	464b      	mov	r3, r9
 8004104:	6298      	str	r0, [r3, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8004106:	2024      	movs	r0, #36	; 0x24
 8004108:	f7ff fcd6 	bl	8003ab8 <RegInt_getreg>
 800410c:	f00b f96e 	bl	800f3ec <__aeabi_ui2f>
 8004110:	495e      	ldr	r1, [pc, #376]	; (800428c <createService+0x2f0>)
 8004112:	f00a f8f9 	bl	800e308 <__aeabi_fdiv>
 8004116:	1c01      	adds	r1, r0, #0
 8004118:	0038      	movs	r0, r7
 800411a:	f7fc fca3 	bl	8000a64 <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 800411e:	2030      	movs	r0, #48	; 0x30
 8004120:	f7ff fcca 	bl	8003ab8 <RegInt_getreg>
 8004124:	4681      	mov	r9, r0
 8004126:	0038      	movs	r0, r7
 8004128:	f7fc f83a 	bl	80001a0 <acc_service_get_base_configuration>
 800412c:	4682      	mov	sl, r0
 800412e:	f002 fa5b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8004132:	2800      	cmp	r0, #0
 8004134:	d003      	beq.n	800413e <createService+0x1a2>
 8004136:	464b      	mov	r3, r9
 8004138:	4652      	mov	r2, sl
 800413a:	b2db      	uxtb	r3, r3
 800413c:	8793      	strh	r3, [r2, #60]	; 0x3c
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 800413e:	2031      	movs	r0, #49	; 0x31
 8004140:	f7ff fcba 	bl	8003ab8 <RegInt_getreg>
 8004144:	4682      	mov	sl, r0
 8004146:	0038      	movs	r0, r7
 8004148:	f7fc f87c 	bl	8000244 <get_and_validate_envelope_configuration>
 800414c:	2800      	cmp	r0, #0
 800414e:	d00d      	beq.n	800416c <createService+0x1d0>
 8004150:	0038      	movs	r0, r7
 8004152:	f7fc f825 	bl	80001a0 <acc_service_get_base_configuration>
 8004156:	4681      	mov	r9, r0
 8004158:	f002 fa46 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800415c:	2800      	cmp	r0, #0
 800415e:	d005      	beq.n	800416c <createService+0x1d0>
 8004160:	4652      	mov	r2, sl
 8004162:	1e53      	subs	r3, r2, #1
 8004164:	419a      	sbcs	r2, r3
 8004166:	464b      	mov	r3, r9
 8004168:	3349      	adds	r3, #73	; 0x49
 800416a:	701a      	strb	r2, [r3, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800416c:	2032      	movs	r0, #50	; 0x32
 800416e:	f7ff fca3 	bl	8003ab8 <RegInt_getreg>
 8004172:	1e41      	subs	r1, r0, #1
 8004174:	4188      	sbcs	r0, r1
 8004176:	b2c1      	uxtb	r1, r0
 8004178:	0038      	movs	r0, r7
 800417a:	f7fc fc48 	bl	8000a0e <acc_service_maximize_signal_attenuation_set>
    acc_service_mur_set (config, RegInt_getreg(0x34));
 800417e:	2034      	movs	r0, #52	; 0x34
 8004180:	f7ff fc9a 	bl	8003ab8 <RegInt_getreg>
 8004184:	4682      	mov	sl, r0
 8004186:	0038      	movs	r0, r7
 8004188:	f7fc f80a 	bl	80001a0 <acc_service_get_base_configuration>
 800418c:	4681      	mov	r9, r0
 800418e:	2800      	cmp	r0, #0
 8004190:	d04a      	beq.n	8004228 <createService+0x28c>
 8004192:	f002 fa29 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8004196:	2800      	cmp	r0, #0
 8004198:	d003      	beq.n	80041a2 <createService+0x206>
 800419a:	464b      	mov	r3, r9
 800419c:	4652      	mov	r2, sl
 800419e:	3332      	adds	r3, #50	; 0x32
 80041a0:	701a      	strb	r2, [r3, #0]
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 80041a2:	2040      	movs	r0, #64	; 0x40
 80041a4:	f7ff fc88 	bl	8003ab8 <RegInt_getreg>
 80041a8:	4681      	mov	r9, r0
 80041aa:	0038      	movs	r0, r7
 80041ac:	f7fc f84a 	bl	8000244 <get_and_validate_envelope_configuration>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d018      	beq.n	80041e6 <createService+0x24a>
 80041b4:	4648      	mov	r0, r9
 80041b6:	f00b f919 	bl	800f3ec <__aeabi_ui2f>
 80041ba:	4934      	ldr	r1, [pc, #208]	; (800428c <createService+0x2f0>)
 80041bc:	f00a f8a4 	bl	800e308 <__aeabi_fdiv>
 80041c0:	21fe      	movs	r1, #254	; 0xfe
 80041c2:	0589      	lsls	r1, r1, #22
 80041c4:	4681      	mov	r9, r0
 80041c6:	f00a febd 	bl	800ef44 <__aeabi_fcmpgt>
 80041ca:	4682      	mov	sl, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d033      	beq.n	8004238 <createService+0x29c>
 80041d0:	4b2f      	ldr	r3, [pc, #188]	; (8004290 <createService+0x2f4>)
 80041d2:	001a      	movs	r2, r3
 80041d4:	3230      	adds	r2, #48	; 0x30
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d004      	beq.n	80041e6 <createService+0x24a>
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041de:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <createService+0x2f8>)
 80041e0:	492d      	ldr	r1, [pc, #180]	; (8004298 <createService+0x2fc>)
 80041e2:	2001      	movs	r0, #1
 80041e4:	4798      	blx	r3
   	envelope_handle = acc_service_create(envelope_config);	
 80041e6:	6a20      	ldr	r0, [r4, #32]
 80041e8:	f7fc fde2 	bl	8000db0 <acc_service_create>
 80041ec:	61a0      	str	r0, [r4, #24]
	if (envelope_handle == NULL){//handles error
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d158      	bne.n	80042a4 <createService+0x308>
		ERR_PRINTLN("envelope service creation failed");
 80041f2:	482a      	ldr	r0, [pc, #168]	; (800429c <createService+0x300>)
 80041f4:	f010 fe86 	bl	8014f04 <__wrap_printf>
 80041f8:	4829      	ldr	r0, [pc, #164]	; (80042a0 <createService+0x304>)
 80041fa:	f010 fe83 	bl	8014f04 <__wrap_printf>
 80041fe:	228b      	movs	r2, #139	; 0x8b
 8004200:	0029      	movs	r1, r5
 8004202:	0092      	lsls	r2, r2, #2
 8004204:	0030      	movs	r0, r6
 8004206:	f010 fe7d 	bl	8014f04 <__wrap_printf>
        Reg_regor(0x06, 0x00080000);
 800420a:	2080      	movs	r0, #128	; 0x80
 800420c:	0300      	lsls	r0, r0, #12
 800420e:	f006 fce1 	bl	800abd4 <Reg_regor.constprop.76>
        return 0;
 8004212:	2000      	movs	r0, #0
 8004214:	e1d9      	b.n	80045ca <createService+0x62e>
	}else if (rep_mode == 0x02){
 8004216:	2802      	cmp	r0, #2
 8004218:	d000      	beq.n	800421c <createService+0x280>
 800421a:	e70b      	b.n	8004034 <createService+0x98>
 800421c:	0038      	movs	r0, r7
 800421e:	f7fb ffbf 	bl	80001a0 <acc_service_get_base_configuration>
 8004222:	f7fc fbcb 	bl	80009bc <acc_base_configuration_repetition_mode_on_demand_set>
 8004226:	e705      	b.n	8004034 <createService+0x98>
 8004228:	4b19      	ldr	r3, [pc, #100]	; (8004290 <createService+0x2f4>)
 800422a:	3330      	adds	r3, #48	; 0x30
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0b7      	beq.n	80041a2 <createService+0x206>
 8004232:	f7fb ff67 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 8004236:	e7b4      	b.n	80041a2 <createService+0x206>
 8004238:	0038      	movs	r0, r7
 800423a:	f7fb ffb1 	bl	80001a0 <acc_service_get_base_configuration>
 800423e:	4680      	mov	r8, r0
 8004240:	f002 f9d2 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8004244:	2800      	cmp	r0, #0
 8004246:	d0ce      	beq.n	80041e6 <createService+0x24a>
 8004248:	20fe      	movs	r0, #254	; 0xfe
 800424a:	4649      	mov	r1, r9
 800424c:	0580      	lsls	r0, r0, #22
 800424e:	f00a fa9f 	bl	800e790 <__aeabi_fsub>
 8004252:	4643      	mov	r3, r8
 8004254:	6158      	str	r0, [r3, #20]
 8004256:	2301      	movs	r3, #1
 8004258:	2100      	movs	r1, #0
 800425a:	4648      	mov	r0, r9
 800425c:	469b      	mov	fp, r3
 800425e:	f00a fe57 	bl	800ef10 <__aeabi_fcmpeq>
 8004262:	2800      	cmp	r0, #0
 8004264:	d000      	beq.n	8004268 <createService+0x2cc>
 8004266:	46d3      	mov	fp, sl
 8004268:	4643      	mov	r3, r8
 800426a:	465a      	mov	r2, fp
 800426c:	761a      	strb	r2, [r3, #24]
 800426e:	e7ba      	b.n	80041e6 <createService+0x24a>
 8004270:	0801bcc3 	.word	0x0801bcc3
 8004274:	0801c04d 	.word	0x0801c04d
 8004278:	0801bcdb 	.word	0x0801bcdb
 800427c:	0801c13a 	.word	0x0801c13a
 8004280:	00000211 	.word	0x00000211
 8004284:	2000020c 	.word	0x2000020c
 8004288:	0801bfb8 	.word	0x0801bfb8
 800428c:	447a0000 	.word	0x447a0000
 8004290:	200003f0 	.word	0x200003f0
 8004294:	0801c05e 	.word	0x0801c05e
 8004298:	0801bae5 	.word	0x0801bae5
 800429c:	0801bcff 	.word	0x0801bcff
 80042a0:	0801c0a0 	.word	0x0801c0a0
 80042a4:	7a03      	ldrb	r3, [r0, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d113      	bne.n	80042d2 <createService+0x336>
 80042aa:	6903      	ldr	r3, [r0, #16]
 80042ac:	49ca      	ldr	r1, [pc, #808]	; (80045d8 <createService+0x63c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80042b4:	6262      	str	r2, [r4, #36]	; 0x24
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80042ba:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80042bc:	85a2      	strh	r2, [r4, #44]	; 0x2c
 80042be:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80042c0:	3a01      	subs	r2, #1
 80042c2:	85e2      	strh	r2, [r4, #46]	; 0x2e
 80042c4:	f00a f932 	bl	800e52c <__aeabi_fmul>
 80042c8:	21fc      	movs	r1, #252	; 0xfc
 80042ca:	0589      	lsls	r1, r1, #22
 80042cc:	f00a f92e 	bl	800e52c <__aeabi_fmul>
 80042d0:	6320      	str	r0, [r4, #48]	; 0x30
    sweeps = 1;
 80042d2:	2001      	movs	r0, #1
    bins = envelope_metadata.data_length;
 80042d4:	4bc1      	ldr	r3, [pc, #772]	; (80045dc <createService+0x640>)
 80042d6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    sweeps = 1;
 80042d8:	8698      	strh	r0, [r3, #52]	; 0x34
    bins = envelope_metadata.data_length;
 80042da:	86d9      	strh	r1, [r3, #54]	; 0x36
    return data_malloc(sweeps,bins);
 80042dc:	f7fc ff16 	bl	800110c <data_malloc>
        if(envelope_data_malloc() == -1){
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d10c      	bne.n	80042fe <createService+0x362>
            DBG_PRINTLN("data buffer allocation failed");
 80042e4:	48be      	ldr	r0, [pc, #760]	; (80045e0 <createService+0x644>)
 80042e6:	f010 fe0d 	bl	8014f04 <__wrap_printf>
 80042ea:	48be      	ldr	r0, [pc, #760]	; (80045e4 <createService+0x648>)
 80042ec:	f010 fe0a 	bl	8014f04 <__wrap_printf>
 80042f0:	4abd      	ldr	r2, [pc, #756]	; (80045e8 <createService+0x64c>)
 80042f2:	0029      	movs	r1, r5
 80042f4:	0030      	movs	r0, r6
 80042f6:	f010 fe05 	bl	8014f04 <__wrap_printf>
            stopService();
 80042fa:	f7ff fd71 	bl	8003de0 <stopService>
 80042fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8004300:	49ba      	ldr	r1, [pc, #744]	; (80045ec <createService+0x650>)
 8004302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004304:	4698      	mov	r8, r3
 8004306:	f00a f911 	bl	800e52c <__aeabi_fmul>
 800430a:	f00a fe4f 	bl	800efac <__aeabi_f2uiz>
 800430e:	2201      	movs	r2, #1
 8004310:	0001      	movs	r1, r0
 8004312:	2081      	movs	r0, #129	; 0x81
 8004314:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8004316:	8de6      	ldrh	r6, [r4, #46]	; 0x2e
 8004318:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800431a:	f7ff fd23 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800431e:	49b3      	ldr	r1, [pc, #716]	; (80045ec <createService+0x650>)
 8004320:	4640      	mov	r0, r8
 8004322:	f00a f903 	bl	800e52c <__aeabi_fmul>
 8004326:	f00a fe41 	bl	800efac <__aeabi_f2uiz>
 800432a:	2201      	movs	r2, #1
 800432c:	0001      	movs	r1, r0
 800432e:	2082      	movs	r0, #130	; 0x82
 8004330:	f7ff fd18 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x83, (uint32_t)metadata.data_length ,1);
 8004334:	0039      	movs	r1, r7
 8004336:	2201      	movs	r2, #1
 8004338:	2083      	movs	r0, #131	; 0x83
 800433a:	f7ff fd13 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)metadata.stitch_count,1);
 800433e:	2201      	movs	r2, #1
 8004340:	0031      	movs	r1, r6
 8004342:	2084      	movs	r0, #132	; 0x84
 8004344:	f7ff fd0e 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8004348:	49a9      	ldr	r1, [pc, #676]	; (80045f0 <createService+0x654>)
 800434a:	1c28      	adds	r0, r5, #0
 800434c:	f00a f8ee 	bl	800e52c <__aeabi_fmul>
 8004350:	f00a fe2c 	bl	800efac <__aeabi_f2uiz>
 8004354:	2201      	movs	r2, #1
 8004356:	0001      	movs	r1, r0
 8004358:	2085      	movs	r0, #133	; 0x85
 800435a:	f7ff fd03 	bl	8003d64 <RegInt_setregf>
 800435e:	6a63      	ldr	r3, [r4, #36]	; 0x24

void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
    printf("Envelope Serivce Metadata\n");
 8004360:	48a4      	ldr	r0, [pc, #656]	; (80045f4 <createService+0x658>)
 8004362:	4698      	mov	r8, r3
 8004364:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004366:	8da6      	ldrh	r6, [r4, #44]	; 0x2c
 8004368:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800436a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800436c:	f010 fdb8 	bl	8014ee0 <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 8004370:	499e      	ldr	r1, [pc, #632]	; (80045ec <createService+0x650>)
 8004372:	4640      	mov	r0, r8
 8004374:	f00a f8da 	bl	800e52c <__aeabi_fmul>
 8004378:	f00a ffce 	bl	800f318 <__aeabi_f2iz>
 800437c:	0001      	movs	r1, r0
 800437e:	489e      	ldr	r0, [pc, #632]	; (80045f8 <createService+0x65c>)
 8004380:	f010 fdc0 	bl	8014f04 <__wrap_printf>
    printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 8004384:	4999      	ldr	r1, [pc, #612]	; (80045ec <createService+0x650>)
 8004386:	1c38      	adds	r0, r7, #0
 8004388:	f00a f8d0 	bl	800e52c <__aeabi_fmul>
 800438c:	f00a fe0e 	bl	800efac <__aeabi_f2uiz>
 8004390:	0001      	movs	r1, r0
 8004392:	489a      	ldr	r0, [pc, #616]	; (80045fc <createService+0x660>)
 8004394:	f010 fdb6 	bl	8014f04 <__wrap_printf>
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 8004398:	0031      	movs	r1, r6
 800439a:	4899      	ldr	r0, [pc, #612]	; (8004600 <createService+0x664>)
 800439c:	f010 fdb2 	bl	8014f04 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.stitch_count));
 80043a0:	0029      	movs	r1, r5
 80043a2:	4898      	ldr	r0, [pc, #608]	; (8004604 <createService+0x668>)
 80043a4:	f010 fdae 	bl	8014f04 <__wrap_printf>
    printf("Step length: %lu um\n", (uint32_t)(metadata.step_length_m * 1.0e6f));
 80043a8:	4991      	ldr	r1, [pc, #580]	; (80045f0 <createService+0x654>)
 80043aa:	1c20      	adds	r0, r4, #0
 80043ac:	f00a f8be 	bl	800e52c <__aeabi_fmul>
 80043b0:	f00a fdfc 	bl	800efac <__aeabi_f2uiz>
 80043b4:	0001      	movs	r1, r0
 80043b6:	4894      	ldr	r0, [pc, #592]	; (8004608 <createService+0x66c>)
 80043b8:	f010 fda4 	bl	8014f04 <__wrap_printf>
        Reg_regor(0x06, 0x00000001);
 80043bc:	2001      	movs	r0, #1
 80043be:	f006 fc09 	bl	800abd4 <Reg_regor.constprop.76>
 80043c2:	2001      	movs	r0, #1
 80043c4:	e101      	b.n	80045ca <createService+0x62e>
    else if(service_type == 0x04){success = createSparseService();}
 80043c6:	2804      	cmp	r0, #4
 80043c8:	d000      	beq.n	80043cc <createService+0x430>
 80043ca:	e0f9      	b.n	80045c0 <createService+0x624>
	uint32_t start_reg = roundDown(RegInt_getreg(0x20),60);
 80043cc:	301c      	adds	r0, #28
 80043ce:	f7ff fb73 	bl	8003ab8 <RegInt_getreg>
uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
    if (multiple == 0)
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 80043d2:	213c      	movs	r1, #60	; 0x3c
 80043d4:	0004      	movs	r4, r0
 80043d6:	f00a fc61 	bl	800ec9c <__aeabi_uidivmod>
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 80043da:	2021      	movs	r0, #33	; 0x21
    if (remainder == 0)
        return numToRound;

    return numToRound - remainder;
 80043dc:	1a63      	subs	r3, r4, r1
 80043de:	4698      	mov	r8, r3
 80043e0:	f7ff fb6a 	bl	8003ab8 <RegInt_getreg>
    uint32_t remainder = numToRound % multiple;
 80043e4:	213c      	movs	r1, #60	; 0x3c
 80043e6:	0004      	movs	r4, r0
 80043e8:	f00a fc58 	bl	800ec9c <__aeabi_uidivmod>
	if (len_reg < 1891){
 80043ec:	4b87      	ldr	r3, [pc, #540]	; (800460c <createService+0x670>)
    return numToRound - remainder;
 80043ee:	1a64      	subs	r4, r4, r1
 80043f0:	469a      	mov	sl, r3
 80043f2:	429c      	cmp	r4, r3
 80043f4:	d82b      	bhi.n	800444e <createService+0x4b2>
		far_active = 0;
 80043f6:	4b86      	ldr	r3, [pc, #536]	; (8004610 <createService+0x674>)
        DBG_PRINTLN("updating sparse config");
 80043f8:	4879      	ldr	r0, [pc, #484]	; (80045e0 <createService+0x644>)
		far_active = 0;
 80043fa:	4699      	mov	r9, r3
 80043fc:	2300      	movs	r3, #0
 80043fe:	464a      	mov	r2, r9
 8004400:	7213      	strb	r3, [r2, #8]
        DBG_PRINTLN("updating sparse config");
 8004402:	f010 fd7f 	bl	8014f04 <__wrap_printf>
 8004406:	4883      	ldr	r0, [pc, #524]	; (8004614 <createService+0x678>)
 8004408:	f010 fd7c 	bl	8014f04 <__wrap_printf>
 800440c:	4a82      	ldr	r2, [pc, #520]	; (8004618 <createService+0x67c>)
 800440e:	0029      	movs	r1, r5
 8004410:	0030      	movs	r0, r6
 8004412:	f010 fd77 	bl	8014f04 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 8004416:	4643      	mov	r3, r8
 8004418:	b299      	uxth	r1, r3
 800441a:	464b      	mov	r3, r9
 800441c:	b2a2      	uxth	r2, r4
 800441e:	6a18      	ldr	r0, [r3, #32]
 8004420:	f7ff fb8c 	bl	8003b3c <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 8004424:	4c7a      	ldr	r4, [pc, #488]	; (8004610 <createService+0x674>)
 8004426:	6a20      	ldr	r0, [r4, #32]
 8004428:	f7fc fcc2 	bl	8000db0 <acc_service_create>
 800442c:	4b7b      	ldr	r3, [pc, #492]	; (800461c <createService+0x680>)
 800442e:	4698      	mov	r8, r3
 8004430:	61d8      	str	r0, [r3, #28]
	if (sparse_handle == NULL){//handles error
 8004432:	2800      	cmp	r0, #0
 8004434:	d15a      	bne.n	80044ec <createService+0x550>
		ERR_PRINTLN("sparse service creation fail");
 8004436:	487a      	ldr	r0, [pc, #488]	; (8004620 <createService+0x684>)
 8004438:	f010 fd64 	bl	8014f04 <__wrap_printf>
 800443c:	4879      	ldr	r0, [pc, #484]	; (8004624 <createService+0x688>)
 800443e:	f010 fd61 	bl	8014f04 <__wrap_printf>
 8004442:	4a79      	ldr	r2, [pc, #484]	; (8004628 <createService+0x68c>)
 8004444:	0029      	movs	r1, r5
 8004446:	0030      	movs	r0, r6
 8004448:	f010 fd5c 	bl	8014f04 <__wrap_printf>
 800444c:	e6dd      	b.n	800420a <createService+0x26e>
	}else if (len_reg < 3811){
 800444e:	4b77      	ldr	r3, [pc, #476]	; (800462c <createService+0x690>)
 8004450:	429c      	cmp	r4, r3
 8004452:	d83e      	bhi.n	80044d2 <createService+0x536>
		far_active = 1;
 8004454:	4b6e      	ldr	r3, [pc, #440]	; (8004610 <createService+0x674>)
		DBG_PRINTLN("updating sparse config");
 8004456:	4862      	ldr	r0, [pc, #392]	; (80045e0 <createService+0x644>)
		far_active = 1;
 8004458:	4699      	mov	r9, r3
 800445a:	2301      	movs	r3, #1
 800445c:	464a      	mov	r2, r9
 800445e:	7213      	strb	r3, [r2, #8]
		DBG_PRINTLN("updating sparse config");
 8004460:	f010 fd50 	bl	8014f04 <__wrap_printf>
 8004464:	486b      	ldr	r0, [pc, #428]	; (8004614 <createService+0x678>)
 8004466:	f010 fd4d 	bl	8014f04 <__wrap_printf>
 800446a:	2292      	movs	r2, #146	; 0x92
 800446c:	0029      	movs	r1, r5
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	0030      	movs	r0, r6
 8004472:	f010 fd47 	bl	8014f04 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 8004476:	4643      	mov	r3, r8
 8004478:	b29b      	uxth	r3, r3
 800447a:	0019      	movs	r1, r3
 800447c:	4698      	mov	r8, r3
 800447e:	464b      	mov	r3, r9
 8004480:	4652      	mov	r2, sl
 8004482:	6a18      	ldr	r0, [r3, #32]
 8004484:	f7ff fb5a 	bl	8003b3c <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 8004488:	4855      	ldr	r0, [pc, #340]	; (80045e0 <createService+0x644>)
 800448a:	f010 fd3b 	bl	8014f04 <__wrap_printf>
 800448e:	4868      	ldr	r0, [pc, #416]	; (8004630 <createService+0x694>)
 8004490:	f010 fd38 	bl	8014f04 <__wrap_printf>
 8004494:	4a67      	ldr	r2, [pc, #412]	; (8004634 <createService+0x698>)
 8004496:	0029      	movs	r1, r5
 8004498:	0030      	movs	r0, r6
 800449a:	f010 fd33 	bl	8014f04 <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <createService+0x69c>)
 80044a0:	429c      	cmp	r4, r3
 80044a2:	d200      	bcs.n	80044a6 <createService+0x50a>
 80044a4:	001c      	movs	r4, r3
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <createService+0x6a0>)
		DBG_PRINTINT(far_len);
 80044a8:	4965      	ldr	r1, [pc, #404]	; (8004640 <createService+0x6a4>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80044aa:	469c      	mov	ip, r3
		DBG_PRINTINT(far_len);
 80044ac:	4b65      	ldr	r3, [pc, #404]	; (8004644 <createService+0x6a8>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 80044ae:	4464      	add	r4, ip
 80044b0:	b2a4      	uxth	r4, r4
		DBG_PRINTINT(far_len);
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	0022      	movs	r2, r4
 80044b6:	002b      	movs	r3, r5
 80044b8:	4863      	ldr	r0, [pc, #396]	; (8004648 <createService+0x6ac>)
 80044ba:	f010 fd23 	bl	8014f04 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 80044be:	21f0      	movs	r1, #240	; 0xf0
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <createService+0x680>)
 80044c2:	00c9      	lsls	r1, r1, #3
 80044c4:	4441      	add	r1, r8
 80044c6:	b289      	uxth	r1, r1
 80044c8:	0022      	movs	r2, r4
 80044ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80044cc:	f7ff fb36 	bl	8003b3c <updateSparseConfig>
 80044d0:	e7a8      	b.n	8004424 <createService+0x488>
		ERR_PRINTLN("sparse service creation failed (too long)");
 80044d2:	4853      	ldr	r0, [pc, #332]	; (8004620 <createService+0x684>)
 80044d4:	f010 fd16 	bl	8014f04 <__wrap_printf>
 80044d8:	485c      	ldr	r0, [pc, #368]	; (800464c <createService+0x6b0>)
 80044da:	f010 fd13 	bl	8014f04 <__wrap_printf>
 80044de:	2294      	movs	r2, #148	; 0x94
 80044e0:	0029      	movs	r1, r5
 80044e2:	0092      	lsls	r2, r2, #2
 80044e4:	0030      	movs	r0, r6
 80044e6:	f010 fd0d 	bl	8014f04 <__wrap_printf>
 80044ea:	e68e      	b.n	800420a <createService+0x26e>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 80044ec:	0021      	movs	r1, r4
 80044ee:	3124      	adds	r1, #36	; 0x24
 80044f0:	f7fb fe8a 	bl	8000208 <acc_service_sparse_get_metadata>
		if(!far_active){
 80044f4:	7a23      	ldrb	r3, [r4, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d111      	bne.n	800451e <createService+0x582>
			if(sparse_data_malloc() == -1){
 80044fa:	f7ff f8c2 	bl	8003682 <sparse_data_malloc>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	d10d      	bne.n	800451e <createService+0x582>
                DBG_PRINTLN("data buffer allocation failed");
 8004502:	4837      	ldr	r0, [pc, #220]	; (80045e0 <createService+0x644>)
 8004504:	f010 fcfe 	bl	8014f04 <__wrap_printf>
 8004508:	4836      	ldr	r0, [pc, #216]	; (80045e4 <createService+0x648>)
 800450a:	f010 fcfb 	bl	8014f04 <__wrap_printf>
 800450e:	2297      	movs	r2, #151	; 0x97
 8004510:	0029      	movs	r1, r5
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	0030      	movs	r0, r6
 8004516:	f010 fcf5 	bl	8014f04 <__wrap_printf>
                stopService();
 800451a:	f7ff fc61 	bl	8003de0 <stopService>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 800451e:	2300      	movs	r3, #0
 8004520:	9301      	str	r3, [sp, #4]
 8004522:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004528:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800452a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800452c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800452e:	f7ff fcef 	bl	8003f10 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 8004532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004538:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800453a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800453c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800453e:	f7fd fe7a 	bl	8002236 <printf_sparse_metadata>
	if(far_active){
 8004542:	7a23      	ldrb	r3, [r4, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d100      	bne.n	800454a <createService+0x5ae>
 8004548:	e738      	b.n	80043bc <createService+0x420>
	sparse_handle_far = acc_service_create(sparse_config_far);
 800454a:	4643      	mov	r3, r8
 800454c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800454e:	f7fc fc2f 	bl	8000db0 <acc_service_create>
 8004552:	4643      	mov	r3, r8
 8004554:	6118      	str	r0, [r3, #16]
	if (sparse_handle_far == NULL){//handles error		
 8004556:	2800      	cmp	r0, #0
 8004558:	d10b      	bne.n	8004572 <createService+0x5d6>
		ERR_PRINTLN("sparse far service creation fail");
 800455a:	4831      	ldr	r0, [pc, #196]	; (8004620 <createService+0x684>)
 800455c:	f010 fcd2 	bl	8014f04 <__wrap_printf>
 8004560:	483b      	ldr	r0, [pc, #236]	; (8004650 <createService+0x6b4>)
 8004562:	f010 fccf 	bl	8014f04 <__wrap_printf>
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <createService+0x6b8>)
 8004568:	0029      	movs	r1, r5
 800456a:	0030      	movs	r0, r6
 800456c:	f010 fcca 	bl	8014f04 <__wrap_printf>
 8004570:	e64b      	b.n	800420a <createService+0x26e>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 8004572:	0021      	movs	r1, r4
 8004574:	310c      	adds	r1, #12
 8004576:	f7fb fe47 	bl	8000208 <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){
 800457a:	f7ff f882 	bl	8003682 <sparse_data_malloc>
 800457e:	1c43      	adds	r3, r0, #1
 8004580:	d10c      	bne.n	800459c <createService+0x600>
            DBG_PRINTLN("data buffer allocation failed");
 8004582:	4817      	ldr	r0, [pc, #92]	; (80045e0 <createService+0x644>)
 8004584:	f010 fcbe 	bl	8014f04 <__wrap_printf>
 8004588:	4816      	ldr	r0, [pc, #88]	; (80045e4 <createService+0x648>)
 800458a:	f010 fcbb 	bl	8014f04 <__wrap_printf>
 800458e:	4a32      	ldr	r2, [pc, #200]	; (8004658 <createService+0x6bc>)
 8004590:	0029      	movs	r1, r5
 8004592:	0030      	movs	r0, r6
 8004594:	f010 fcb6 	bl	8014f04 <__wrap_printf>
            stopService();
 8004598:	f7ff fc22 	bl	8003de0 <stopService>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 800459c:	0023      	movs	r3, r4
 800459e:	330c      	adds	r3, #12
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
		printf_sparse_metadata(sparse_metadata_far);
 80045a4:	340c      	adds	r4, #12
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045aa:	69a0      	ldr	r0, [r4, #24]
 80045ac:	69e1      	ldr	r1, [r4, #28]
 80045ae:	6a22      	ldr	r2, [r4, #32]
 80045b0:	f7ff fcae 	bl	8003f10 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045ba:	f7fd fe3c 	bl	8002236 <printf_sparse_metadata>
 80045be:	e6fd      	b.n	80043bc <createService+0x420>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80045c0:	2080      	movs	r0, #128	; 0x80
 80045c2:	02c0      	lsls	r0, r0, #11
 80045c4:	f006 fb06 	bl	800abd4 <Reg_regor.constprop.76>
 80045c8:	2000      	movs	r0, #0
}
 80045ca:	b003      	add	sp, #12
 80045cc:	bc3c      	pop	{r2, r3, r4, r5}
 80045ce:	4690      	mov	r8, r2
 80045d0:	4699      	mov	r9, r3
 80045d2:	46a2      	mov	sl, r4
 80045d4:	46ab      	mov	fp, r5
 80045d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d8:	4d8ef3c2 	.word	0x4d8ef3c2
 80045dc:	2000010c 	.word	0x2000010c
 80045e0:	0801bcc3 	.word	0x0801bcc3
 80045e4:	0801c0c1 	.word	0x0801c0c1
 80045e8:	00000232 	.word	0x00000232
 80045ec:	447a0000 	.word	0x447a0000
 80045f0:	49742400 	.word	0x49742400
 80045f4:	0801c0df 	.word	0x0801c0df
 80045f8:	0801bd72 	.word	0x0801bd72
 80045fc:	0801bd81 	.word	0x0801bd81
 8004600:	0801bda7 	.word	0x0801bda7
 8004604:	0801bdb9 	.word	0x0801bdb9
 8004608:	0801bdce 	.word	0x0801bdce
 800460c:	00000762 	.word	0x00000762
 8004610:	2000018c 	.word	0x2000018c
 8004614:	0801c0f9 	.word	0x0801c0f9
 8004618:	00000243 	.word	0x00000243
 800461c:	2000020c 	.word	0x2000020c
 8004620:	0801bcff 	.word	0x0801bcff
 8004624:	0801c16f 	.word	0x0801c16f
 8004628:	00000256 	.word	0x00000256
 800462c:	00000ee2 	.word	0x00000ee2
 8004630:	0801c110 	.word	0x0801c110
 8004634:	0000024a 	.word	0x0000024a
 8004638:	00000781 	.word	0x00000781
 800463c:	fffff880 	.word	0xfffff880
 8004640:	0801c12b 	.word	0x0801c12b
 8004644:	0000024d 	.word	0x0000024d
 8004648:	0801c133 	.word	0x0801c133
 800464c:	0801c145 	.word	0x0801c145
 8004650:	0801c18c 	.word	0x0801c18c
 8004654:	0000026a 	.word	0x0000026a
 8004658:	0000026f 	.word	0x0000026f

0800465c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800465c:	2280      	movs	r2, #128	; 0x80
 800465e:	4b02      	ldr	r3, [pc, #8]	; (8004668 <SystemInit+0xc>)
 8004660:	0512      	lsls	r2, r2, #20
 8004662:	609a      	str	r2, [r3, #8]
#endif
}
 8004664:	4770      	bx	lr
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	46c6      	mov	lr, r8
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004670:	4c65      	ldr	r4, [pc, #404]	; (8004808 <USART1_IRQHandler+0x19c>)
 8004672:	b500      	push	{lr}
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	b082      	sub	sp, #8
 8004678:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800467a:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800467c:	6898      	ldr	r0, [r3, #8]
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 800467e:	0715      	lsls	r5, r2, #28
 8004680:	d10e      	bne.n	80046a0 <USART1_IRQHandler+0x34>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004682:	2520      	movs	r5, #32
 8004684:	422a      	tst	r2, r5
 8004686:	d100      	bne.n	800468a <USART1_IRQHandler+0x1e>
 8004688:	e08b      	b.n	80047a2 <USART1_IRQHandler+0x136>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800468a:	4229      	tst	r1, r5
 800468c:	d102      	bne.n	8004694 <USART1_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800468e:	00c5      	lsls	r5, r0, #3
 8004690:	d400      	bmi.n	8004694 <USART1_IRQHandler+0x28>
 8004692:	e086      	b.n	80047a2 <USART1_IRQHandler+0x136>
    {
      if (huart->RxISR != NULL)
 8004694:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d07d      	beq.n	8004796 <USART1_IRQHandler+0x12a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
 800469a:	0020      	movs	r0, r4
 800469c:	4798      	blx	r3
 800469e:	e07a      	b.n	8004796 <USART1_IRQHandler+0x12a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80046a0:	4e5a      	ldr	r6, [pc, #360]	; (800480c <USART1_IRQHandler+0x1a0>)
 80046a2:	4006      	ands	r6, r0
 80046a4:	46b0      	mov	r8, r6
 80046a6:	1e35      	subs	r5, r6, #0
 80046a8:	d104      	bne.n	80046b4 <USART1_IRQHandler+0x48>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80046aa:	3521      	adds	r5, #33	; 0x21
 80046ac:	35ff      	adds	r5, #255	; 0xff
 80046ae:	4229      	tst	r1, r5
 80046b0:	d100      	bne.n	80046b4 <USART1_IRQHandler+0x48>
 80046b2:	e076      	b.n	80047a2 <USART1_IRQHandler+0x136>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046b4:	2501      	movs	r5, #1
 80046b6:	422a      	tst	r2, r5
 80046b8:	d007      	beq.n	80046ca <USART1_IRQHandler+0x5e>
 80046ba:	05ce      	lsls	r6, r1, #23
 80046bc:	d505      	bpl.n	80046ca <USART1_IRQHandler+0x5e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046be:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046c0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c2:	3788      	adds	r7, #136	; 0x88
 80046c4:	683e      	ldr	r6, [r7, #0]
 80046c6:	4335      	orrs	r5, r6
 80046c8:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ca:	2502      	movs	r5, #2
 80046cc:	422a      	tst	r2, r5
 80046ce:	d00a      	beq.n	80046e6 <USART1_IRQHandler+0x7a>
 80046d0:	07c6      	lsls	r6, r0, #31
 80046d2:	d508      	bpl.n	80046e6 <USART1_IRQHandler+0x7a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d4:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046d6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046d8:	3788      	adds	r7, #136	; 0x88
 80046da:	683d      	ldr	r5, [r7, #0]
 80046dc:	46ac      	mov	ip, r5
 80046de:	2504      	movs	r5, #4
 80046e0:	4666      	mov	r6, ip
 80046e2:	4335      	orrs	r5, r6
 80046e4:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e6:	2504      	movs	r5, #4
 80046e8:	422a      	tst	r2, r5
 80046ea:	d00a      	beq.n	8004702 <USART1_IRQHandler+0x96>
 80046ec:	07c6      	lsls	r6, r0, #31
 80046ee:	d508      	bpl.n	8004702 <USART1_IRQHandler+0x96>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f0:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046f2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f4:	3788      	adds	r7, #136	; 0x88
 80046f6:	683d      	ldr	r5, [r7, #0]
 80046f8:	46ac      	mov	ip, r5
 80046fa:	2502      	movs	r5, #2
 80046fc:	4666      	mov	r6, ip
 80046fe:	4335      	orrs	r5, r6
 8004700:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004702:	0715      	lsls	r5, r2, #28
 8004704:	d50b      	bpl.n	800471e <USART1_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004706:	068d      	lsls	r5, r1, #26
 8004708:	d402      	bmi.n	8004710 <USART1_IRQHandler+0xa4>
 800470a:	4645      	mov	r5, r8
 800470c:	2d00      	cmp	r5, #0
 800470e:	d006      	beq.n	800471e <USART1_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004710:	2508      	movs	r5, #8
 8004712:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004714:	0023      	movs	r3, r4
 8004716:	3388      	adds	r3, #136	; 0x88
 8004718:	681e      	ldr	r6, [r3, #0]
 800471a:	4335      	orrs	r5, r6
 800471c:	601d      	str	r5, [r3, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800471e:	0023      	movs	r3, r4
 8004720:	3388      	adds	r3, #136	; 0x88
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d036      	beq.n	8004796 <USART1_IRQHandler+0x12a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004728:	2320      	movs	r3, #32
 800472a:	421a      	tst	r2, r3
 800472c:	d008      	beq.n	8004740 <USART1_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800472e:	4219      	tst	r1, r3
 8004730:	d101      	bne.n	8004736 <USART1_IRQHandler+0xca>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004732:	00c3      	lsls	r3, r0, #3
 8004734:	d504      	bpl.n	8004740 <USART1_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 8004736:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <USART1_IRQHandler+0xd4>
          huart->RxISR(huart);
 800473c:	0020      	movs	r0, r4
 800473e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004740:	0021      	movs	r1, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004742:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8004744:	3188      	adds	r1, #136	; 0x88
 8004746:	680a      	ldr	r2, [r1, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004748:	6898      	ldr	r0, [r3, #8]
 800474a:	0640      	lsls	r0, r0, #25
 800474c:	d402      	bmi.n	8004754 <USART1_IRQHandler+0xe8>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800474e:	2008      	movs	r0, #8
 8004750:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004752:	d024      	beq.n	800479e <USART1_IRQHandler+0x132>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	492e      	ldr	r1, [pc, #184]	; (8004810 <USART1_IRQHandler+0x1a4>)
 8004758:	400a      	ands	r2, r1
 800475a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	492d      	ldr	r1, [pc, #180]	; (8004814 <USART1_IRQHandler+0x1a8>)
 8004760:	400a      	ands	r2, r1
 8004762:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	0022      	movs	r2, r4
 8004766:	2120      	movs	r1, #32
 8004768:	3208      	adds	r2, #8
 800476a:	67d1      	str	r1, [r2, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800476c:	2200      	movs	r2, #0
 800476e:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	1849      	adds	r1, r1, r1
 8004774:	420a      	tst	r2, r1
 8004776:	d00e      	beq.n	8004796 <USART1_IRQHandler+0x12a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004778:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800477a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477c:	438a      	bics	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004780:	2800      	cmp	r0, #0
 8004782:	d008      	beq.n	8004796 <USART1_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <USART1_IRQHandler+0x1ac>)
 8004786:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004788:	f006 fdbe 	bl	800b308 <HAL_DMA_Abort_IT>
 800478c:	2800      	cmp	r0, #0
 800478e:	d002      	beq.n	8004796 <USART1_IRQHandler+0x12a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004790:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004792:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004794:	4798      	blx	r3
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8004796:	b002      	add	sp, #8
 8004798:	bc04      	pop	{r2}
 800479a:	4690      	mov	r8, r2
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479e:	600a      	str	r2, [r1, #0]
 80047a0:	e7f9      	b.n	8004796 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047a2:	2580      	movs	r5, #128	; 0x80
 80047a4:	036d      	lsls	r5, r5, #13
 80047a6:	422a      	tst	r2, r5
 80047a8:	d003      	beq.n	80047b2 <USART1_IRQHandler+0x146>
 80047aa:	0246      	lsls	r6, r0, #9
 80047ac:	d501      	bpl.n	80047b2 <USART1_IRQHandler+0x146>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047ae:	621d      	str	r5, [r3, #32]
 80047b0:	e7f1      	b.n	8004796 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047b2:	2580      	movs	r5, #128	; 0x80
 80047b4:	422a      	tst	r2, r5
 80047b6:	d008      	beq.n	80047ca <USART1_IRQHandler+0x15e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047b8:	4229      	tst	r1, r5
 80047ba:	d101      	bne.n	80047c0 <USART1_IRQHandler+0x154>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047bc:	0200      	lsls	r0, r0, #8
 80047be:	d504      	bpl.n	80047ca <USART1_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 80047c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d000      	beq.n	80047c8 <USART1_IRQHandler+0x15c>
 80047c6:	e768      	b.n	800469a <USART1_IRQHandler+0x2e>
 80047c8:	e7e5      	b.n	8004796 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047ca:	2040      	movs	r0, #64	; 0x40
 80047cc:	4202      	tst	r2, r0
 80047ce:	d0e2      	beq.n	8004796 <USART1_IRQHandler+0x12a>
 80047d0:	4201      	tst	r1, r0
 80047d2:	d0e0      	beq.n	8004796 <USART1_IRQHandler+0x12a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4382      	bics	r2, r0
 80047d8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047da:	2220      	movs	r2, #32
 80047dc:	1d23      	adds	r3, r4, #4
 80047de:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047e0:	2200      	movs	r2, #0
	if (queue_cmd_end == 2){
 80047e2:	4b0e      	ldr	r3, [pc, #56]	; (800481c <USART1_IRQHandler+0x1b0>)
 80047e4:	6722      	str	r2, [r4, #112]	; 0x70
 80047e6:	3338      	adds	r3, #56	; 0x38
 80047e8:	7819      	ldrb	r1, [r3, #0]
 80047ea:	2902      	cmp	r1, #2
 80047ec:	d102      	bne.n	80047f4 <USART1_IRQHandler+0x188>
		queue_cmd_end = 1;
 80047ee:	3201      	adds	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e7d0      	b.n	8004796 <USART1_IRQHandler+0x12a>
	}else if(queue_cmd_end == 1){
 80047f4:	2901      	cmp	r1, #1
 80047f6:	d1ce      	bne.n	8004796 <USART1_IRQHandler+0x12a>
		queue_cmd_end = 0;
 80047f8:	701a      	strb	r2, [r3, #0]
		uint8_t end = 0xCD;
 80047fa:	466b      	mov	r3, sp
 80047fc:	1dd8      	adds	r0, r3, #7
 80047fe:	23cd      	movs	r3, #205	; 0xcd
 8004800:	7003      	strb	r3, [r0, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 8004802:	f006 f801 	bl	800a808 <HAL_UART_Transmit_IT.constprop.123>
 8004806:	e7c6      	b.n	8004796 <USART1_IRQHandler+0x12a>
 8004808:	200005a8 	.word	0x200005a8
 800480c:	10000001 	.word	0x10000001
 8004810:	fffffedf 	.word	0xfffffedf
 8004814:	effffffe 	.word	0xeffffffe
 8004818:	08009d85 	.word	0x08009d85
 800481c:	2000020c 	.word	0x2000020c

08004820 <I2C1_IRQHandler>:
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8004820:	22e0      	movs	r2, #224	; 0xe0
 8004822:	4821      	ldr	r0, [pc, #132]	; (80048a8 <I2C1_IRQHandler+0x88>)
 8004824:	00d2      	lsls	r2, r2, #3
 8004826:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8004828:	b570      	push	{r4, r5, r6, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800482a:	6999      	ldr	r1, [r3, #24]
 800482c:	4211      	tst	r1, r2
 800482e:	d033      	beq.n	8004898 <I2C1_IRQHandler+0x78>
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004830:	699c      	ldr	r4, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004832:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004834:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004836:	05e5      	lsls	r5, r4, #23
 8004838:	d509      	bpl.n	800484e <I2C1_IRQHandler+0x2e>
 800483a:	09d5      	lsrs	r5, r2, #7
 800483c:	420d      	tst	r5, r1
 800483e:	d006      	beq.n	800484e <I2C1_IRQHandler+0x2e>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004840:	1d05      	adds	r5, r0, #4
 8004842:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8004844:	4331      	orrs	r1, r6
 8004846:	67e9      	str	r1, [r5, #124]	; 0x7c

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	0049      	lsls	r1, r1, #1
 800484c:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800484e:	2101      	movs	r1, #1
 8004850:	0565      	lsls	r5, r4, #21
 8004852:	d50a      	bpl.n	800486a <I2C1_IRQHandler+0x4a>
 8004854:	09d5      	lsrs	r5, r2, #7
 8004856:	420d      	tst	r5, r1
 8004858:	d007      	beq.n	800486a <I2C1_IRQHandler+0x4a>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800485a:	1d05      	adds	r5, r0, #4
 800485c:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800485e:	3107      	adds	r1, #7
 8004860:	4331      	orrs	r1, r6
 8004862:	67e9      	str	r1, [r5, #124]	; 0x7c

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	00c9      	lsls	r1, r1, #3
 8004868:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800486a:	2101      	movs	r1, #1
 800486c:	05a4      	lsls	r4, r4, #22
 800486e:	d50a      	bpl.n	8004886 <I2C1_IRQHandler+0x66>
 8004870:	09d2      	lsrs	r2, r2, #7
 8004872:	420a      	tst	r2, r1
 8004874:	d007      	beq.n	8004886 <I2C1_IRQHandler+0x66>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004876:	2202      	movs	r2, #2
 8004878:	1d01      	adds	r1, r0, #4
 800487a:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 800487c:	4322      	orrs	r2, r4
 800487e:	67ca      	str	r2, [r1, #124]	; 0x7c

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004886:	1d03      	adds	r3, r0, #4
 8004888:	6fd9      	ldr	r1, [r3, #124]	; 0x7c

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800488a:	230b      	movs	r3, #11
 800488c:	4219      	tst	r1, r3
 800488e:	d002      	beq.n	8004896 <I2C1_IRQHandler+0x76>
  {
    I2C_ITError(hi2c, tmperror);
 8004890:	303c      	adds	r0, #60	; 0x3c
 8004892:	f006 fd77 	bl	800b384 <I2C_ITError.lto_priv.676>
}
 8004896:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004898:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800489a:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800489c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f9      	beq.n	8004896 <I2C1_IRQHandler+0x76>
    hi2c->XferISR(hi2c, itflags, itsources);
 80048a2:	303c      	adds	r0, #60	; 0x3c
 80048a4:	4798      	blx	r3
 80048a6:	e7f6      	b.n	8004896 <I2C1_IRQHandler+0x76>
 80048a8:	2000020c 	.word	0x2000020c

080048ac <DMA1_Channel2_3_IRQHandler>:
{
 80048ac:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80048ae:	4802      	ldr	r0, [pc, #8]	; (80048b8 <DMA1_Channel2_3_IRQHandler+0xc>)
 80048b0:	f006 fcd4 	bl	800b25c <HAL_DMA_IRQHandler>
}
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	20000544 	.word	0x20000544

080048bc <DMA1_Channel1_IRQHandler>:
{
 80048bc:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80048be:	4802      	ldr	r0, [pc, #8]	; (80048c8 <DMA1_Channel1_IRQHandler+0xc>)
 80048c0:	f006 fccc 	bl	800b25c <HAL_DMA_IRQHandler>
}
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	200004e8 	.word	0x200004e8

080048cc <EXTI4_15_IRQHandler>:
{
 80048cc:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80048ce:	2020      	movs	r0, #32
 80048d0:	f006 ff4c 	bl	800b76c <HAL_GPIO_EXTI_IRQHandler>
}
 80048d4:	bd10      	pop	{r4, pc}

080048d6 <EXTI2_3_IRQHandler>:
{
 80048d6:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80048d8:	2008      	movs	r0, #8
 80048da:	f006 ff47 	bl	800b76c <HAL_GPIO_EXTI_IRQHandler>
}
 80048de:	bd10      	pop	{r4, pc}

080048e0 <RTC_TAMP_IRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80048e0:	4a14      	ldr	r2, [pc, #80]	; (8004934 <RTC_TAMP_IRQHandler+0x54>)
{
 80048e2:	b510      	push	{r4, lr}
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	6999      	ldr	r1, [r3, #24]
 80048e8:	04c9      	lsls	r1, r1, #19
 80048ea:	d508      	bpl.n	80048fe <RTC_TAMP_IRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80048ec:	2101      	movs	r1, #1
 80048ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80048f0:	4208      	tst	r0, r1
 80048f2:	d004      	beq.n	80048fe <RTC_TAMP_IRQHandler+0x1e>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048f4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80048f6:	4308      	orrs	r0, r1
 80048f8:	65d8      	str	r0, [r3, #92]	; 0x5c
	rtc_alarm_triggered = true;
 80048fa:	480f      	ldr	r0, [pc, #60]	; (8004938 <RTC_TAMP_IRQHandler+0x58>)
 80048fc:	7201      	strb	r1, [r0, #8]
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80048fe:	6999      	ldr	r1, [r3, #24]
 8004900:	0489      	lsls	r1, r1, #18
 8004902:	d506      	bpl.n	8004912 <RTC_TAMP_IRQHandler+0x32>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004904:	2102      	movs	r1, #2
 8004906:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004908:	4208      	tst	r0, r1
 800490a:	d002      	beq.n	8004912 <RTC_TAMP_IRQHandler+0x32>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800490c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800490e:	4301      	orrs	r1, r0
 8004910:	65d9      	str	r1, [r3, #92]	; 0x5c
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004912:	0011      	movs	r1, r2
 8004914:	2001      	movs	r0, #1
 8004916:	3129      	adds	r1, #41	; 0x29
 8004918:	7008      	strb	r0, [r1, #0]
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800491a:	2104      	movs	r1, #4
 800491c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 800491e:	420c      	tst	r4, r1
 8004920:	d004      	beq.n	800492c <RTC_TAMP_IRQHandler+0x4c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004922:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8004924:	4321      	orrs	r1, r4
 8004926:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_wakeup_triggered = true;
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <RTC_TAMP_IRQHandler+0x5c>)
 800492a:	7018      	strb	r0, [r3, #0]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800492c:	2301      	movs	r3, #1
 800492e:	3229      	adds	r2, #41	; 0x29
 8004930:	7013      	strb	r3, [r2, #0]
}
 8004932:	bd10      	pop	{r4, pc}
 8004934:	200003c0 	.word	0x200003c0
 8004938:	2000028c 	.word	0x2000028c
 800493c:	2000048c 	.word	0x2000048c

08004940 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8004940:	4a02      	ldr	r2, [pc, #8]	; (800494c <SysTick_Handler+0xc>)
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	6013      	str	r3, [r2, #0]
}
 8004948:	4770      	bx	lr
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	200003ec 	.word	0x200003ec

08004950 <PendSV_Handler>:
 8004950:	4770      	bx	lr

08004952 <NMI_Handler>:
}
 8004952:	4770      	bx	lr

08004954 <SVC_Handler>:
 8004954:	4770      	bx	lr

08004956 <HardFault_Handler>:
{
 8004956:	e7fe      	b.n	8004956 <HardFault_Handler>

08004958 <validate.lto_priv.261>:
 8004958:	6983      	ldr	r3, [r0, #24]
 800495a:	b510      	push	{r4, lr}
 800495c:	0004      	movs	r4, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <validate.lto_priv.261+0x20>
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <validate.lto_priv.261+0x44>)
 8004964:	001a      	movs	r2, r3
 8004966:	3230      	adds	r2, #48	; 0x30
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	2a00      	cmp	r2, #0
 800496c:	d004      	beq.n	8004978 <validate.lto_priv.261+0x20>
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	4a0b      	ldr	r2, [pc, #44]	; (80049a0 <validate.lto_priv.261+0x48>)
 8004972:	490c      	ldr	r1, [pc, #48]	; (80049a4 <validate.lto_priv.261+0x4c>)
 8004974:	2001      	movs	r0, #1
 8004976:	4798      	blx	r3
 8004978:	69e3      	ldr	r3, [r4, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <validate.lto_priv.261+0x3c>
 800497e:	4b07      	ldr	r3, [pc, #28]	; (800499c <validate.lto_priv.261+0x44>)
 8004980:	001a      	movs	r2, r3
 8004982:	3230      	adds	r2, #48	; 0x30
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	2a00      	cmp	r2, #0
 8004988:	d004      	beq.n	8004994 <validate.lto_priv.261+0x3c>
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	4a06      	ldr	r2, [pc, #24]	; (80049a8 <validate.lto_priv.261+0x50>)
 800498e:	4905      	ldr	r1, [pc, #20]	; (80049a4 <validate.lto_priv.261+0x4c>)
 8004990:	2001      	movs	r0, #1
 8004992:	4798      	blx	r3
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	6883      	ldr	r3, [r0, #8]
 8004998:	4798      	blx	r3
 800499a:	bd10      	pop	{r4, pc}
 800499c:	200003f0 	.word	0x200003f0
 80049a0:	0801c5b8 	.word	0x0801c5b8
 80049a4:	0801c5c9 	.word	0x0801c5c9
 80049a8:	0801c5eb 	.word	0x0801c5eb

080049ac <event.lto_priv.274>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	0004      	movs	r4, r0
 80049b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80049b2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80049b4:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 80049b6:	6809      	ldr	r1, [r1, #0]
 80049b8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80049ba:	6900      	ldr	r0, [r0, #16]
 80049bc:	47a8      	blx	r5
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	6843      	ldr	r3, [r0, #4]
 80049c2:	4798      	blx	r3
 80049c4:	bd70      	pop	{r4, r5, r6, pc}

080049c6 <noise_level_normalization_u16.lto_priv.668>:
 80049c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c8:	464f      	mov	r7, r9
 80049ca:	4646      	mov	r6, r8
 80049cc:	46d6      	mov	lr, sl
 80049ce:	b5c0      	push	{r6, r7, lr}
 80049d0:	001f      	movs	r7, r3
 80049d2:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <noise_level_normalization_u16.lto_priv.668+0x62>)
 80049d4:	0016      	movs	r6, r2
 80049d6:	4698      	mov	r8, r3
 80049d8:	2301      	movs	r3, #1
 80049da:	425b      	negs	r3, r3
 80049dc:	4699      	mov	r9, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	0004      	movs	r4, r0
 80049e2:	469a      	mov	sl, r3
 80049e4:	084d      	lsrs	r5, r1, #1
 80049e6:	006d      	lsls	r5, r5, #1
 80049e8:	1945      	adds	r5, r0, r5
 80049ea:	42ac      	cmp	r4, r5
 80049ec:	d104      	bne.n	80049f8 <noise_level_normalization_u16.lto_priv.668+0x32>
 80049ee:	bc1c      	pop	{r2, r3, r4}
 80049f0:	4690      	mov	r8, r2
 80049f2:	4699      	mov	r9, r3
 80049f4:	46a2      	mov	sl, r4
 80049f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <noise_level_normalization_u16.lto_priv.668+0x66>)
 80049fa:	8820      	ldrh	r0, [r4, #0]
 80049fc:	469c      	mov	ip, r3
 80049fe:	4460      	add	r0, ip
 8004a00:	4378      	muls	r0, r7
 8004a02:	0031      	movs	r1, r6
 8004a04:	f00a f94e 	bl	800eca4 <__divsi3>
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	18c0      	adds	r0, r0, r3
 8004a0e:	d503      	bpl.n	8004a18 <noise_level_normalization_u16.lto_priv.668+0x52>
 8004a10:	4653      	mov	r3, sl
 8004a12:	8023      	strh	r3, [r4, #0]
 8004a14:	3402      	adds	r4, #2
 8004a16:	e7e8      	b.n	80049ea <noise_level_normalization_u16.lto_priv.668+0x24>
 8004a18:	4540      	cmp	r0, r8
 8004a1a:	dd02      	ble.n	8004a22 <noise_level_normalization_u16.lto_priv.668+0x5c>
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	8023      	strh	r3, [r4, #0]
 8004a20:	e7f8      	b.n	8004a14 <noise_level_normalization_u16.lto_priv.668+0x4e>
 8004a22:	8020      	strh	r0, [r4, #0]
 8004a24:	e7f6      	b.n	8004a14 <noise_level_normalization_u16.lto_priv.668+0x4e>
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	0000ffff 	.word	0x0000ffff
 8004a2c:	ffff8000 	.word	0xffff8000

08004a30 <validate.lto_priv.260>:
 8004a30:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a32:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <validate.lto_priv.260+0x94>)
 8004a34:	b510      	push	{r4, lr}
 8004a36:	0004      	movs	r4, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10b      	bne.n	8004a54 <validate.lto_priv.260+0x24>
 8004a3c:	6903      	ldr	r3, [r0, #16]
 8004a3e:	6942      	ldr	r2, [r0, #20]
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01e      	beq.n	8004a82 <validate.lto_priv.260+0x52>
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <validate.lto_priv.260+0x98>)
 8004a46:	2000      	movs	r0, #0
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	4a20      	ldr	r2, [pc, #128]	; (8004acc <validate.lto_priv.260+0x9c>)
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <validate.lto_priv.260+0xa0>)
 8004a4e:	4798      	blx	r3
 8004a50:	2000      	movs	r0, #0
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <validate.lto_priv.260+0xa4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10b      	bne.n	8004a72 <validate.lto_priv.260+0x42>
 8004a5a:	6903      	ldr	r3, [r0, #16]
 8004a5c:	6942      	ldr	r2, [r0, #20]
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d10f      	bne.n	8004a82 <validate.lto_priv.260+0x52>
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <validate.lto_priv.260+0x98>)
 8004a64:	2000      	movs	r0, #0
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <validate.lto_priv.260+0xa8>)
 8004a6a:	4919      	ldr	r1, [pc, #100]	; (8004ad0 <validate.lto_priv.260+0xa0>)
 8004a6c:	4798      	blx	r3
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e7ef      	b.n	8004a52 <validate.lto_priv.260+0x22>
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <validate.lto_priv.260+0x98>)
 8004a74:	2000      	movs	r0, #0
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	4a18      	ldr	r2, [pc, #96]	; (8004adc <validate.lto_priv.260+0xac>)
 8004a7a:	4915      	ldr	r1, [pc, #84]	; (8004ad0 <validate.lto_priv.260+0xa0>)
 8004a7c:	4798      	blx	r3
 8004a7e:	2000      	movs	r0, #0
 8004a80:	e7e7      	b.n	8004a52 <validate.lto_priv.260+0x22>
 8004a82:	69a3      	ldr	r3, [r4, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <validate.lto_priv.260+0x6e>
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <validate.lto_priv.260+0x98>)
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	3230      	adds	r2, #48	; 0x30
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	2a00      	cmp	r2, #0
 8004a92:	d004      	beq.n	8004a9e <validate.lto_priv.260+0x6e>
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	4a12      	ldr	r2, [pc, #72]	; (8004ae0 <validate.lto_priv.260+0xb0>)
 8004a98:	490d      	ldr	r1, [pc, #52]	; (8004ad0 <validate.lto_priv.260+0xa0>)
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	4798      	blx	r3
 8004a9e:	69e3      	ldr	r3, [r4, #28]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00a      	beq.n	8004aba <validate.lto_priv.260+0x8a>
 8004aa4:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <validate.lto_priv.260+0x98>)
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	3230      	adds	r2, #48	; 0x30
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d004      	beq.n	8004aba <validate.lto_priv.260+0x8a>
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	4a0c      	ldr	r2, [pc, #48]	; (8004ae4 <validate.lto_priv.260+0xb4>)
 8004ab4:	4906      	ldr	r1, [pc, #24]	; (8004ad0 <validate.lto_priv.260+0xa0>)
 8004ab6:	2001      	movs	r0, #1
 8004ab8:	4798      	blx	r3
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	6883      	ldr	r3, [r0, #8]
 8004abe:	4798      	blx	r3
 8004ac0:	e7c7      	b.n	8004a52 <validate.lto_priv.260+0x22>
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	08004f09 	.word	0x08004f09
 8004ac8:	200003f0 	.word	0x200003f0
 8004acc:	0801c5fa 	.word	0x0801c5fa
 8004ad0:	0801c622 	.word	0x0801c622
 8004ad4:	08004fc3 	.word	0x08004fc3
 8004ad8:	0801c633 	.word	0x0801c633
 8004adc:	0801c668 	.word	0x0801c668
 8004ae0:	0801c5b8 	.word	0x0801c5b8
 8004ae4:	0801c5eb 	.word	0x0801c5eb

08004ae8 <event.lto_priv.273.lto_priv.663>:
 8004ae8:	b510      	push	{r4, lr}
 8004aea:	0004      	movs	r4, r0
 8004aec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004aee:	4798      	blx	r3
 8004af0:	6820      	ldr	r0, [r4, #0]
 8004af2:	6843      	ldr	r3, [r0, #4]
 8004af4:	4798      	blx	r3
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <validate.lto_priv.259>:
 8004af8:	6903      	ldr	r3, [r0, #16]
 8004afa:	6942      	ldr	r2, [r0, #20]
 8004afc:	b510      	push	{r4, lr}
 8004afe:	0004      	movs	r4, r0
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d007      	beq.n	8004b14 <validate.lto_priv.259+0x1c>
 8004b04:	4b13      	ldr	r3, [pc, #76]	; (8004b54 <validate.lto_priv.259+0x5c>)
 8004b06:	2000      	movs	r0, #0
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <validate.lto_priv.259+0x60>)
 8004b0c:	4913      	ldr	r1, [pc, #76]	; (8004b5c <validate.lto_priv.259+0x64>)
 8004b0e:	4798      	blx	r3
 8004b10:	2000      	movs	r0, #0
 8004b12:	bd10      	pop	{r4, pc}
 8004b14:	6983      	ldr	r3, [r0, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <validate.lto_priv.259+0x38>
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <validate.lto_priv.259+0x5c>)
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	3230      	adds	r2, #48	; 0x30
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	2a00      	cmp	r2, #0
 8004b24:	d004      	beq.n	8004b30 <validate.lto_priv.259+0x38>
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	4a0d      	ldr	r2, [pc, #52]	; (8004b60 <validate.lto_priv.259+0x68>)
 8004b2a:	490c      	ldr	r1, [pc, #48]	; (8004b5c <validate.lto_priv.259+0x64>)
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	4798      	blx	r3
 8004b30:	69e3      	ldr	r3, [r4, #28]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <validate.lto_priv.259+0x54>
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <validate.lto_priv.259+0x5c>)
 8004b38:	001a      	movs	r2, r3
 8004b3a:	3230      	adds	r2, #48	; 0x30
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d004      	beq.n	8004b4c <validate.lto_priv.259+0x54>
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <validate.lto_priv.259+0x6c>)
 8004b46:	4905      	ldr	r1, [pc, #20]	; (8004b5c <validate.lto_priv.259+0x64>)
 8004b48:	2001      	movs	r0, #1
 8004b4a:	4798      	blx	r3
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	6883      	ldr	r3, [r0, #8]
 8004b50:	4798      	blx	r3
 8004b52:	e7de      	b.n	8004b12 <validate.lto_priv.259+0x1a>
 8004b54:	200003f0 	.word	0x200003f0
 8004b58:	0801c5fa 	.word	0x0801c5fa
 8004b5c:	0801beff 	.word	0x0801beff
 8004b60:	0801c5b8 	.word	0x0801c5b8
 8004b64:	0801c5eb 	.word	0x0801c5eb

08004b68 <event.lto_priv.272.lto_priv.657>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004b6e:	4798      	blx	r3
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	6843      	ldr	r3, [r0, #4]
 8004b74:	4798      	blx	r3
 8004b76:	bd10      	pop	{r4, pc}

08004b78 <filter_no_operation.lto_priv.171>:
 8004b78:	4770      	bx	lr

08004b7a <validate.lto_priv.258>:
 8004b7a:	6983      	ldr	r3, [r0, #24]
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	0004      	movs	r4, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <validate.lto_priv.258+0x20>
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <validate.lto_priv.258+0x46>)
 8004b86:	001a      	movs	r2, r3
 8004b88:	3230      	adds	r2, #48	; 0x30
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	d004      	beq.n	8004b9a <validate.lto_priv.258+0x20>
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <validate.lto_priv.258+0x4a>)
 8004b94:	490c      	ldr	r1, [pc, #48]	; (8004bc8 <validate.lto_priv.258+0x4e>)
 8004b96:	2001      	movs	r0, #1
 8004b98:	4798      	blx	r3
 8004b9a:	69e3      	ldr	r3, [r4, #28]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <validate.lto_priv.258+0x3c>
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <validate.lto_priv.258+0x46>)
 8004ba2:	001a      	movs	r2, r3
 8004ba4:	3230      	adds	r2, #48	; 0x30
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	2a00      	cmp	r2, #0
 8004baa:	d004      	beq.n	8004bb6 <validate.lto_priv.258+0x3c>
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <validate.lto_priv.258+0x52>)
 8004bb0:	4905      	ldr	r1, [pc, #20]	; (8004bc8 <validate.lto_priv.258+0x4e>)
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	4798      	blx	r3
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	6883      	ldr	r3, [r0, #8]
 8004bba:	4798      	blx	r3
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	200003f0 	.word	0x200003f0
 8004bc4:	0801c5b8 	.word	0x0801c5b8
 8004bc8:	0801c67d 	.word	0x0801c67d
 8004bcc:	0801c5eb 	.word	0x0801c5eb

08004bd0 <event.lto_priv.271>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004bd4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	6843      	ldr	r3, [r0, #4]
 8004bdc:	4798      	blx	r3
 8004bde:	bd10      	pop	{r4, pc}

08004be0 <validate.lto_priv.257>:
 8004be0:	6983      	ldr	r3, [r0, #24]
 8004be2:	b510      	push	{r4, lr}
 8004be4:	0004      	movs	r4, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <validate.lto_priv.257+0x20>
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <validate.lto_priv.257+0x44>)
 8004bec:	001a      	movs	r2, r3
 8004bee:	3230      	adds	r2, #48	; 0x30
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	2a00      	cmp	r2, #0
 8004bf4:	d004      	beq.n	8004c00 <validate.lto_priv.257+0x20>
 8004bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <validate.lto_priv.257+0x48>)
 8004bfa:	490c      	ldr	r1, [pc, #48]	; (8004c2c <validate.lto_priv.257+0x4c>)
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	4798      	blx	r3
 8004c00:	69e3      	ldr	r3, [r4, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <validate.lto_priv.257+0x3c>
 8004c06:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <validate.lto_priv.257+0x44>)
 8004c08:	001a      	movs	r2, r3
 8004c0a:	3230      	adds	r2, #48	; 0x30
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	d004      	beq.n	8004c1c <validate.lto_priv.257+0x3c>
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <validate.lto_priv.257+0x50>)
 8004c16:	4905      	ldr	r1, [pc, #20]	; (8004c2c <validate.lto_priv.257+0x4c>)
 8004c18:	2001      	movs	r0, #1
 8004c1a:	4798      	blx	r3
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	6883      	ldr	r3, [r0, #8]
 8004c20:	4798      	blx	r3
 8004c22:	bd10      	pop	{r4, pc}
 8004c24:	200003f0 	.word	0x200003f0
 8004c28:	0801c5b8 	.word	0x0801c5b8
 8004c2c:	0801c68a 	.word	0x0801c68a
 8004c30:	0801c5eb 	.word	0x0801c5eb

08004c34 <convert_q12_4_to_q3_12_complex.lto_priv.646>:
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	2600      	movs	r6, #0
 8004c38:	0852      	lsrs	r2, r2, #1
 8004c3a:	0004      	movs	r4, r0
 8004c3c:	4d06      	ldr	r5, [pc, #24]	; (8004c58 <convert_q12_4_to_q3_12_complex.lto_priv.646+0x24>)
 8004c3e:	0090      	lsls	r0, r2, #2
 8004c40:	1809      	adds	r1, r1, r0
 8004c42:	3904      	subs	r1, #4
 8004c44:	3a01      	subs	r2, #1
 8004c46:	d200      	bcs.n	8004c4a <convert_q12_4_to_q3_12_complex.lto_priv.646+0x16>
 8004c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c4a:	0053      	lsls	r3, r2, #1
 8004c4c:	5ee3      	ldrsh	r3, [r4, r3]
 8004c4e:	804e      	strh	r6, [r1, #2]
 8004c50:	105b      	asrs	r3, r3, #1
 8004c52:	406b      	eors	r3, r5
 8004c54:	800b      	strh	r3, [r1, #0]
 8004c56:	e7f4      	b.n	8004c42 <convert_q12_4_to_q3_12_complex.lto_priv.646+0xe>
 8004c58:	ffffc000 	.word	0xffffc000

08004c5c <convert_q12_4_to_q3_12.lto_priv.648>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	0853      	lsrs	r3, r2, #1
 8004c60:	4d06      	ldr	r5, [pc, #24]	; (8004c7c <convert_q12_4_to_q3_12.lto_priv.648+0x20>)
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	3b02      	subs	r3, #2
 8004c66:	1c9c      	adds	r4, r3, #2
 8004c68:	d103      	bne.n	8004c72 <convert_q12_4_to_q3_12.lto_priv.648+0x16>
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	439a      	bics	r2, r3
 8004c6e:	0010      	movs	r0, r2
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
 8004c72:	5ec4      	ldrsh	r4, [r0, r3]
 8004c74:	1064      	asrs	r4, r4, #1
 8004c76:	406c      	eors	r4, r5
 8004c78:	52cc      	strh	r4, [r1, r3]
 8004c7a:	e7f3      	b.n	8004c64 <convert_q12_4_to_q3_12.lto_priv.648+0x8>
 8004c7c:	ffffc000 	.word	0xffffc000

08004c80 <convert_q12_4_to_q15_16.lto_priv.649>:
 8004c80:	0852      	lsrs	r2, r2, #1
 8004c82:	0013      	movs	r3, r2
 8004c84:	b530      	push	{r4, r5, lr}
 8004c86:	3b01      	subs	r3, #1
 8004c88:	d201      	bcs.n	8004c8e <convert_q12_4_to_q15_16.lto_priv.649+0xe>
 8004c8a:	0090      	lsls	r0, r2, #2
 8004c8c:	bd30      	pop	{r4, r5, pc}
 8004c8e:	005c      	lsls	r4, r3, #1
 8004c90:	5b04      	ldrh	r4, [r0, r4]
 8004c92:	009d      	lsls	r5, r3, #2
 8004c94:	0324      	lsls	r4, r4, #12
 8004c96:	514c      	str	r4, [r1, r5]
 8004c98:	e7f5      	b.n	8004c86 <convert_q12_4_to_q15_16.lto_priv.649+0x6>

08004c9a <convert_q3_12_complex_to_f32_complex.lto_priv.645>:
 8004c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c9c:	4647      	mov	r7, r8
 8004c9e:	46ce      	mov	lr, r9
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	0007      	movs	r7, r0
 8004ca4:	0894      	lsrs	r4, r2, #2
 8004ca6:	00e6      	lsls	r6, r4, #3
 8004ca8:	198d      	adds	r5, r1, r6
 8004caa:	00a4      	lsls	r4, r4, #2
 8004cac:	3c04      	subs	r4, #4
 8004cae:	3d08      	subs	r5, #8
 8004cb0:	1d23      	adds	r3, r4, #4
 8004cb2:	d104      	bne.n	8004cbe <convert_q3_12_complex_to_f32_complex.lto_priv.645+0x24>
 8004cb4:	0030      	movs	r0, r6
 8004cb6:	bc0c      	pop	{r2, r3}
 8004cb8:	4690      	mov	r8, r2
 8004cba:	4699      	mov	r9, r3
 8004cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	2002      	movs	r0, #2
 8004cc2:	5e18      	ldrsh	r0, [r3, r0]
 8004cc4:	f00a fb48 	bl	800f358 <__aeabi_i2f>
 8004cc8:	21e6      	movs	r1, #230	; 0xe6
 8004cca:	0589      	lsls	r1, r1, #22
 8004ccc:	f009 fc2e 	bl	800e52c <__aeabi_fmul>
 8004cd0:	4680      	mov	r8, r0
 8004cd2:	5f38      	ldrsh	r0, [r7, r4]
 8004cd4:	f00a fb40 	bl	800f358 <__aeabi_i2f>
 8004cd8:	21e6      	movs	r1, #230	; 0xe6
 8004cda:	0589      	lsls	r1, r1, #22
 8004cdc:	f009 fc26 	bl	800e52c <__aeabi_fmul>
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4681      	mov	r9, r0
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	f009 fc21 	bl	800e52c <__aeabi_fmul>
 8004cea:	1c01      	adds	r1, r0, #0
 8004cec:	4648      	mov	r0, r9
 8004cee:	f009 f971 	bl	800dfd4 <__aeabi_fadd>
 8004cf2:	4643      	mov	r3, r8
 8004cf4:	6028      	str	r0, [r5, #0]
 8004cf6:	606b      	str	r3, [r5, #4]
 8004cf8:	e7d8      	b.n	8004cac <convert_q3_12_complex_to_f32_complex.lto_priv.645+0x12>

08004cfa <convert_q15_16_to_f32.lto_priv.647>:
 8004cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfc:	4647      	mov	r7, r8
 8004cfe:	46ce      	mov	lr, r9
 8004d00:	4688      	mov	r8, r1
 8004d02:	b580      	push	{r7, lr}
 8004d04:	0015      	movs	r5, r2
 8004d06:	0007      	movs	r7, r0
 8004d08:	0894      	lsrs	r4, r2, #2
 8004d0a:	00a4      	lsls	r4, r4, #2
 8004d0c:	3c04      	subs	r4, #4
 8004d0e:	1d23      	adds	r3, r4, #4
 8004d10:	d106      	bne.n	8004d20 <convert_q15_16_to_f32.lto_priv.647+0x26>
 8004d12:	0028      	movs	r0, r5
 8004d14:	2303      	movs	r3, #3
 8004d16:	4398      	bics	r0, r3
 8004d18:	bc0c      	pop	{r2, r3}
 8004d1a:	4690      	mov	r8, r2
 8004d1c:	4699      	mov	r9, r3
 8004d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d20:	593e      	ldr	r6, [r7, r4]
 8004d22:	b2b0      	uxth	r0, r6
 8004d24:	f00a fb18 	bl	800f358 <__aeabi_i2f>
 8004d28:	21de      	movs	r1, #222	; 0xde
 8004d2a:	0589      	lsls	r1, r1, #22
 8004d2c:	f009 fbfe 	bl	800e52c <__aeabi_fmul>
 8004d30:	4681      	mov	r9, r0
 8004d32:	1430      	asrs	r0, r6, #16
 8004d34:	f00a fb10 	bl	800f358 <__aeabi_i2f>
 8004d38:	1c01      	adds	r1, r0, #0
 8004d3a:	4648      	mov	r0, r9
 8004d3c:	f009 f94a 	bl	800dfd4 <__aeabi_fadd>
 8004d40:	4643      	mov	r3, r8
 8004d42:	5118      	str	r0, [r3, r4]
 8004d44:	e7e2      	b.n	8004d0c <convert_q15_16_to_f32.lto_priv.647+0x12>

08004d46 <convert_q3_12_to_u16.lto_priv.650>:
 8004d46:	b510      	push	{r4, lr}
 8004d48:	0853      	lsrs	r3, r2, #1
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	3b02      	subs	r3, #2
 8004d4e:	1c9c      	adds	r4, r3, #2
 8004d50:	d103      	bne.n	8004d5a <convert_q3_12_to_u16.lto_priv.650+0x14>
 8004d52:	3303      	adds	r3, #3
 8004d54:	439a      	bics	r2, r3
 8004d56:	0010      	movs	r0, r2
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	5ac4      	ldrh	r4, [r0, r3]
 8004d5c:	0064      	lsls	r4, r4, #1
 8004d5e:	52cc      	strh	r4, [r1, r3]
 8004d60:	e7f4      	b.n	8004d4c <convert_q3_12_to_u16.lto_priv.650+0x6>

08004d62 <validate.lto_priv.256>:
 8004d62:	6983      	ldr	r3, [r0, #24]
 8004d64:	b510      	push	{r4, lr}
 8004d66:	0004      	movs	r4, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <validate.lto_priv.256+0x20>
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <validate.lto_priv.256+0x46>)
 8004d6e:	001a      	movs	r2, r3
 8004d70:	3230      	adds	r2, #48	; 0x30
 8004d72:	7812      	ldrb	r2, [r2, #0]
 8004d74:	2a00      	cmp	r2, #0
 8004d76:	d004      	beq.n	8004d82 <validate.lto_priv.256+0x20>
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <validate.lto_priv.256+0x4a>)
 8004d7c:	490c      	ldr	r1, [pc, #48]	; (8004db0 <validate.lto_priv.256+0x4e>)
 8004d7e:	2001      	movs	r0, #1
 8004d80:	4798      	blx	r3
 8004d82:	69e3      	ldr	r3, [r4, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00a      	beq.n	8004d9e <validate.lto_priv.256+0x3c>
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <validate.lto_priv.256+0x46>)
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	3230      	adds	r2, #48	; 0x30
 8004d8e:	7812      	ldrb	r2, [r2, #0]
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	d004      	beq.n	8004d9e <validate.lto_priv.256+0x3c>
 8004d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d96:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <validate.lto_priv.256+0x52>)
 8004d98:	4905      	ldr	r1, [pc, #20]	; (8004db0 <validate.lto_priv.256+0x4e>)
 8004d9a:	2001      	movs	r0, #1
 8004d9c:	4798      	blx	r3
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6883      	ldr	r3, [r0, #8]
 8004da2:	4798      	blx	r3
 8004da4:	bd10      	pop	{r4, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	200003f0 	.word	0x200003f0
 8004dac:	0801c5b8 	.word	0x0801c5b8
 8004db0:	0801c69c 	.word	0x0801c69c
 8004db4:	0801c5eb 	.word	0x0801c5eb

08004db8 <event.lto_priv.269>:
 8004db8:	b510      	push	{r4, lr}
 8004dba:	0004      	movs	r4, r0
 8004dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004dbe:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	6900      	ldr	r0, [r0, #16]
 8004dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dc6:	4798      	blx	r3
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	6843      	ldr	r3, [r0, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <validate.lto_priv.255>:
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b510      	push	{r4, lr}
 8004dd4:	0004      	movs	r4, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <validate.lto_priv.255+0x20>
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <validate.lto_priv.255+0x44>)
 8004ddc:	001a      	movs	r2, r3
 8004dde:	3230      	adds	r2, #48	; 0x30
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	2a00      	cmp	r2, #0
 8004de4:	d004      	beq.n	8004df0 <validate.lto_priv.255+0x20>
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <validate.lto_priv.255+0x48>)
 8004dea:	490c      	ldr	r1, [pc, #48]	; (8004e1c <validate.lto_priv.255+0x4c>)
 8004dec:	2001      	movs	r0, #1
 8004dee:	4798      	blx	r3
 8004df0:	69e3      	ldr	r3, [r4, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <validate.lto_priv.255+0x3c>
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <validate.lto_priv.255+0x44>)
 8004df8:	001a      	movs	r2, r3
 8004dfa:	3230      	adds	r2, #48	; 0x30
 8004dfc:	7812      	ldrb	r2, [r2, #0]
 8004dfe:	2a00      	cmp	r2, #0
 8004e00:	d004      	beq.n	8004e0c <validate.lto_priv.255+0x3c>
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <validate.lto_priv.255+0x50>)
 8004e06:	4905      	ldr	r1, [pc, #20]	; (8004e1c <validate.lto_priv.255+0x4c>)
 8004e08:	2001      	movs	r0, #1
 8004e0a:	4798      	blx	r3
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	6883      	ldr	r3, [r0, #8]
 8004e10:	4798      	blx	r3
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	200003f0 	.word	0x200003f0
 8004e18:	0801c5b8 	.word	0x0801c5b8
 8004e1c:	0801c6ae 	.word	0x0801c6ae
 8004e20:	0801c5eb 	.word	0x0801c5eb

08004e24 <reset.lto_priv.166.lto_priv.253>:
 8004e24:	b510      	push	{r4, lr}
 8004e26:	6800      	ldr	r0, [r0, #0]
 8004e28:	68c3      	ldr	r3, [r0, #12]
 8004e2a:	4798      	blx	r3
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <reset.lto_priv.267.lto_priv.667>:
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	f7ff fff8 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e34:	bd10      	pop	{r4, pc}

08004e36 <reset.lto_priv.266.lto_priv.664>:
 8004e36:	b510      	push	{r4, lr}
 8004e38:	f7ff fff4 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e3c:	bd10      	pop	{r4, pc}

08004e3e <reset.lto_priv.265.lto_priv.658>:
 8004e3e:	b510      	push	{r4, lr}
 8004e40:	f7ff fff0 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e44:	bd10      	pop	{r4, pc}

08004e46 <reset.lto_priv.264.lto_priv.659>:
 8004e46:	b510      	push	{r4, lr}
 8004e48:	f7ff ffec 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <reset.lto_priv.263.lto_priv.644>:
 8004e4e:	b510      	push	{r4, lr}
 8004e50:	f7ff ffe8 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <reset.lto_priv.262.lto_priv.669>:
 8004e56:	b510      	push	{r4, lr}
 8004e58:	f7ff ffe4 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 8004e5c:	bd10      	pop	{r4, pc}

08004e5e <event.lto_priv.268.lto_priv.651>:
 8004e5e:	b570      	push	{r4, r5, r6, lr}
 8004e60:	0004      	movs	r4, r0
 8004e62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e64:	6941      	ldr	r1, [r0, #20]
 8004e66:	682a      	ldr	r2, [r5, #0]
 8004e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e6a:	6900      	ldr	r0, [r0, #16]
 8004e6c:	4798      	blx	r3
 8004e6e:	6028      	str	r0, [r5, #0]
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	6843      	ldr	r3, [r0, #4]
 8004e74:	4798      	blx	r3
 8004e76:	bd70      	pop	{r4, r5, r6, pc}

08004e78 <event.lto_priv.270.lto_priv.643>:
 8004e78:	b510      	push	{r4, lr}
 8004e7a:	f7ff fff0 	bl	8004e5e <event.lto_priv.268.lto_priv.651>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <acc_sweep_manager_release>:
 8004e80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e82:	b510      	push	{r4, lr}
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <acc_sweep_manager_release+0xe>
 8004e88:	3014      	adds	r0, #20
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	4798      	blx	r3
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <acc_sensor_manager_release_measurement>:
 8004e90:	6982      	ldr	r2, [r0, #24]
 8004e92:	b510      	push	{r4, lr}
 8004e94:	2a00      	cmp	r2, #0
 8004e96:	d00f      	beq.n	8004eb8 <acc_sensor_manager_release_measurement+0x28>
 8004e98:	2348      	movs	r3, #72	; 0x48
 8004e9a:	435a      	muls	r2, r3
 8004e9c:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <acc_sensor_manager_release_measurement+0x2c>)
 8004e9e:	3a48      	subs	r2, #72	; 0x48
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	001a      	movs	r2, r3
 8004ea6:	3240      	adds	r2, #64	; 0x40
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	d101      	bne.n	8004eb2 <acc_sensor_manager_release_measurement+0x22>
 8004eae:	3341      	adds	r3, #65	; 0x41
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	3004      	adds	r0, #4
 8004eb4:	f7ff ffe4 	bl	8004e80 <acc_sweep_manager_release>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	200005a0 	.word	0x200005a0

08004ec0 <measure_noise.lto_priv.280>:
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4770      	bx	lr

08004ec4 <acc_rss_integration_sensor_device_power_on>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <acc_rss_integration_sensor_device_power_on+0xc>)
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4798      	blx	r3
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	200003f0 	.word	0x200003f0

08004ed4 <abs_q3_12_complex.lto_priv.652>:
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	46c6      	mov	lr, r8
 8004ed8:	0007      	movs	r7, r0
 8004eda:	4688      	mov	r8, r1
 8004edc:	2400      	movs	r4, #0
 8004ede:	b500      	push	{lr}
 8004ee0:	0895      	lsrs	r5, r2, #2
 8004ee2:	0066      	lsls	r6, r4, #1
 8004ee4:	42ac      	cmp	r4, r5
 8004ee6:	d103      	bne.n	8004ef0 <abs_q3_12_complex.lto_priv.652+0x1c>
 8004ee8:	0030      	movs	r0, r6
 8004eea:	bc04      	pop	{r2}
 8004eec:	4690      	mov	r8, r2
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	00a3      	lsls	r3, r4, #2
 8004ef2:	5bda      	ldrh	r2, [r3, r7]
 8004ef4:	18fb      	adds	r3, r7, r3
 8004ef6:	8858      	ldrh	r0, [r3, #2]
 8004ef8:	3401      	adds	r4, #1
 8004efa:	0400      	lsls	r0, r0, #16
 8004efc:	4310      	orrs	r0, r2
 8004efe:	f007 fd13 	bl	800c928 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8004f02:	4643      	mov	r3, r8
 8004f04:	5398      	strh	r0, [r3, r6]
 8004f06:	e7ec      	b.n	8004ee2 <abs_q3_12_complex.lto_priv.652+0xe>

08004f08 <iq_mix_q3_12_complex.lto_priv.666>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	46de      	mov	lr, fp
 8004f0c:	464e      	mov	r6, r9
 8004f0e:	4645      	mov	r5, r8
 8004f10:	4657      	mov	r7, sl
 8004f12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f14:	b5e0      	push	{r5, r6, r7, lr}
 8004f16:	4698      	mov	r8, r3
 8004f18:	681e      	ldr	r6, [r3, #0]
 8004f1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f1e:	681d      	ldr	r5, [r3, #0]
 8004f20:	0004      	movs	r4, r0
 8004f22:	1c28      	adds	r0, r5, #0
 8004f24:	f009 fb02 	bl	800e52c <__aeabi_fmul>
 8004f28:	f007 fc5c 	bl	800c7e4 <accumulator_mod.lto_priv.616>
 8004f2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004f2e:	0007      	movs	r7, r0
 8004f30:	1c28      	adds	r0, r5, #0
 8004f32:	f009 fafb 	bl	800e52c <__aeabi_fmul>
 8004f36:	f007 fc55 	bl	800c7e4 <accumulator_mod.lto_priv.616>
 8004f3a:	4681      	mov	r9, r0
 8004f3c:	6924      	ldr	r4, [r4, #16]
 8004f3e:	08b5      	lsrs	r5, r6, #2
 8004f40:	00ad      	lsls	r5, r5, #2
 8004f42:	192d      	adds	r5, r5, r4
 8004f44:	42ac      	cmp	r4, r5
 8004f46:	d109      	bne.n	8004f5c <iq_mix_q3_12_complex.lto_priv.666+0x54>
 8004f48:	2303      	movs	r3, #3
 8004f4a:	439e      	bics	r6, r3
 8004f4c:	4643      	mov	r3, r8
 8004f4e:	601e      	str	r6, [r3, #0]
 8004f50:	bc3c      	pop	{r2, r3, r4, r5}
 8004f52:	4690      	mov	r8, r2
 8004f54:	4699      	mov	r9, r3
 8004f56:	46a2      	mov	sl, r4
 8004f58:	46ab      	mov	fp, r5
 8004f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	05db      	lsls	r3, r3, #23
 8004f60:	18f8      	adds	r0, r7, r3
 8004f62:	f007 fccb 	bl	800c8fc <acc_alg_basic_math_q3_12_sin>
 8004f66:	4682      	mov	sl, r0
 8004f68:	0038      	movs	r0, r7
 8004f6a:	f007 fcc7 	bl	800c8fc <acc_alg_basic_math_q3_12_sin>
 8004f6e:	2200      	movs	r2, #0
 8004f70:	5ea3      	ldrsh	r3, [r4, r2]
 8004f72:	4651      	mov	r1, sl
 8004f74:	469c      	mov	ip, r3
 8004f76:	2202      	movs	r2, #2
 8004f78:	5ea3      	ldrsh	r3, [r4, r2]
 8004f7a:	4662      	mov	r2, ip
 8004f7c:	4351      	muls	r1, r2
 8004f7e:	17ca      	asrs	r2, r1, #31
 8004f80:	0512      	lsls	r2, r2, #20
 8004f82:	0d12      	lsrs	r2, r2, #20
 8004f84:	1852      	adds	r2, r2, r1
 8004f86:	0001      	movs	r1, r0
 8004f88:	4359      	muls	r1, r3
 8004f8a:	468b      	mov	fp, r1
 8004f8c:	17c9      	asrs	r1, r1, #31
 8004f8e:	0509      	lsls	r1, r1, #20
 8004f90:	0d09      	lsrs	r1, r1, #20
 8004f92:	4459      	add	r1, fp
 8004f94:	1312      	asrs	r2, r2, #12
 8004f96:	1309      	asrs	r1, r1, #12
 8004f98:	1a52      	subs	r2, r2, r1
 8004f9a:	8022      	strh	r2, [r4, #0]
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	435a      	muls	r2, r3
 8004fa0:	17d3      	asrs	r3, r2, #31
 8004fa2:	051b      	lsls	r3, r3, #20
 8004fa4:	0d1b      	lsrs	r3, r3, #20
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	4662      	mov	r2, ip
 8004faa:	4342      	muls	r2, r0
 8004fac:	17d0      	asrs	r0, r2, #31
 8004fae:	0500      	lsls	r0, r0, #20
 8004fb0:	0d00      	lsrs	r0, r0, #20
 8004fb2:	1880      	adds	r0, r0, r2
 8004fb4:	131b      	asrs	r3, r3, #12
 8004fb6:	1300      	asrs	r0, r0, #12
 8004fb8:	181b      	adds	r3, r3, r0
 8004fba:	8063      	strh	r3, [r4, #2]
 8004fbc:	444f      	add	r7, r9
 8004fbe:	3404      	adds	r4, #4
 8004fc0:	e7c0      	b.n	8004f44 <iq_mix_q3_12_complex.lto_priv.666+0x3c>

08004fc2 <iq_mix_q3_12.lto_priv.665>:
 8004fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc4:	46de      	mov	lr, fp
 8004fc6:	4657      	mov	r7, sl
 8004fc8:	464e      	mov	r6, r9
 8004fca:	4645      	mov	r5, r8
 8004fcc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fce:	b5e0      	push	{r5, r6, r7, lr}
 8004fd0:	4699      	mov	r9, r3
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	0006      	movs	r6, r0
 8004fd6:	085c      	lsrs	r4, r3, #1
 8004fd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004fda:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004fdc:	681d      	ldr	r5, [r3, #0]
 8004fde:	1c28      	adds	r0, r5, #0
 8004fe0:	f009 faa4 	bl	800e52c <__aeabi_fmul>
 8004fe4:	f007 fbfe 	bl	800c7e4 <accumulator_mod.lto_priv.616>
 8004fe8:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8004fea:	0007      	movs	r7, r0
 8004fec:	1c28      	adds	r0, r5, #0
 8004fee:	f009 fa9d 	bl	800e52c <__aeabi_fmul>
 8004ff2:	f007 fbf7 	bl	800c7e4 <accumulator_mod.lto_priv.616>
 8004ff6:	0063      	lsls	r3, r4, #1
 8004ff8:	4698      	mov	r8, r3
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	6935      	ldr	r5, [r6, #16]
 8004ffe:	6976      	ldr	r6, [r6, #20]
 8005000:	44a8      	add	r8, r5
 8005002:	4545      	cmp	r5, r8
 8005004:	d108      	bne.n	8005018 <iq_mix_q3_12.lto_priv.665+0x56>
 8005006:	464b      	mov	r3, r9
 8005008:	00a4      	lsls	r4, r4, #2
 800500a:	601c      	str	r4, [r3, #0]
 800500c:	bc3c      	pop	{r2, r3, r4, r5}
 800500e:	4690      	mov	r8, r2
 8005010:	4699      	mov	r9, r3
 8005012:	46a2      	mov	sl, r4
 8005014:	46ab      	mov	fp, r5
 8005016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005018:	2200      	movs	r2, #0
 800501a:	5eab      	ldrsh	r3, [r5, r2]
 800501c:	3502      	adds	r5, #2
 800501e:	469b      	mov	fp, r3
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	05db      	lsls	r3, r3, #23
 8005024:	18f8      	adds	r0, r7, r3
 8005026:	f007 fc69 	bl	800c8fc <acc_alg_basic_math_q3_12_sin>
 800502a:	465b      	mov	r3, fp
 800502c:	4343      	muls	r3, r0
 800502e:	17d8      	asrs	r0, r3, #31
 8005030:	0500      	lsls	r0, r0, #20
 8005032:	0d00      	lsrs	r0, r0, #20
 8005034:	18c0      	adds	r0, r0, r3
 8005036:	1300      	asrs	r0, r0, #12
 8005038:	8030      	strh	r0, [r6, #0]
 800503a:	0038      	movs	r0, r7
 800503c:	f007 fc5e 	bl	800c8fc <acc_alg_basic_math_q3_12_sin>
 8005040:	465b      	mov	r3, fp
 8005042:	4343      	muls	r3, r0
 8005044:	17d8      	asrs	r0, r3, #31
 8005046:	0500      	lsls	r0, r0, #20
 8005048:	0d00      	lsrs	r0, r0, #20
 800504a:	18c0      	adds	r0, r0, r3
 800504c:	1300      	asrs	r0, r0, #12
 800504e:	8070      	strh	r0, [r6, #2]
 8005050:	4457      	add	r7, sl
 8005052:	3604      	adds	r6, #4
 8005054:	e7d5      	b.n	8005002 <iq_mix_q3_12.lto_priv.665+0x40>

08005056 <filter_q3_12_complex.lto_priv.655>:
 8005056:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005058:	2200      	movs	r2, #0
 800505a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800505c:	6906      	ldr	r6, [r0, #16]
 800505e:	681d      	ldr	r5, [r3, #0]
 8005060:	ab03      	add	r3, sp, #12
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	805a      	strh	r2, [r3, #2]
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	08ad      	lsrs	r5, r5, #2
 800506a:	002a      	movs	r2, r5
 800506c:	0031      	movs	r1, r6
 800506e:	3040      	adds	r0, #64	; 0x40
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2301      	movs	r3, #1
 8005074:	0004      	movs	r4, r0
 8005076:	f007 fa39 	bl	800c4ec <biquad_q3_12_complex_direct_form_1.lto_priv.617>
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <filter_q3_12_complex.lto_priv.655+0x4e>)
 800507c:	0020      	movs	r0, r4
 800507e:	18eb      	adds	r3, r5, r3
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	18f3      	adds	r3, r6, r3
 8005084:	2202      	movs	r2, #2
 8005086:	5e99      	ldrsh	r1, [r3, r2]
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	aa02      	add	r2, sp, #8
 800508c:	8013      	strh	r3, [r2, #0]
 800508e:	2301      	movs	r3, #1
 8005090:	8051      	strh	r1, [r2, #2]
 8005092:	9a02      	ldr	r2, [sp, #8]
 8005094:	0031      	movs	r1, r6
 8005096:	9200      	str	r2, [sp, #0]
 8005098:	425b      	negs	r3, r3
 800509a:	002a      	movs	r2, r5
 800509c:	f007 fa26 	bl	800c4ec <biquad_q3_12_complex_direct_form_1.lto_priv.617>
 80050a0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	3fffffff 	.word	0x3fffffff

080050a8 <centering_q12_4.lto_priv.670>:
 80050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050aa:	4657      	mov	r7, sl
 80050ac:	464e      	mov	r6, r9
 80050ae:	4645      	mov	r5, r8
 80050b0:	46de      	mov	lr, fp
 80050b2:	b5e0      	push	{r5, r6, r7, lr}
 80050b4:	0849      	lsrs	r1, r1, #1
 80050b6:	0852      	lsrs	r2, r2, #1
 80050b8:	b28b      	uxth	r3, r1
 80050ba:	b295      	uxth	r5, r2
 80050bc:	b083      	sub	sp, #12
 80050be:	4682      	mov	sl, r0
 80050c0:	4699      	mov	r9, r3
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	d100      	bne.n	80050c8 <centering_q12_4.lto_priv.670+0x20>
 80050c6:	001d      	movs	r5, r3
 80050c8:	b28b      	uxth	r3, r1
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	2301      	movs	r3, #1
 80050ce:	425b      	negs	r3, r3
 80050d0:	46c8      	mov	r8, r9
 80050d2:	002f      	movs	r7, r5
 80050d4:	2600      	movs	r6, #0
 80050d6:	469b      	mov	fp, r3
 80050d8:	45b1      	cmp	r9, r6
 80050da:	d806      	bhi.n	80050ea <centering_q12_4.lto_priv.670+0x42>
 80050dc:	b003      	add	sp, #12
 80050de:	bc3c      	pop	{r2, r3, r4, r5}
 80050e0:	4690      	mov	r8, r2
 80050e2:	4699      	mov	r9, r3
 80050e4:	46a2      	mov	sl, r4
 80050e6:	46ab      	mov	fp, r5
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ea:	9a01      	ldr	r2, [sp, #4]
 80050ec:	19f3      	adds	r3, r6, r7
 80050ee:	4293      	cmp	r3, r2
 80050f0:	dd00      	ble.n	80050f4 <centering_q12_4.lto_priv.670+0x4c>
 80050f2:	4647      	mov	r7, r8
 80050f4:	2f00      	cmp	r7, #0
 80050f6:	d020      	beq.n	800513a <centering_q12_4.lto_priv.670+0x92>
 80050f8:	2200      	movs	r2, #0
 80050fa:	0010      	movs	r0, r2
 80050fc:	0074      	lsls	r4, r6, #1
 80050fe:	4454      	add	r4, sl
 8005100:	42ba      	cmp	r2, r7
 8005102:	d321      	bcc.n	8005148 <centering_q12_4.lto_priv.670+0xa0>
 8005104:	2301      	movs	r3, #1
 8005106:	2800      	cmp	r0, #0
 8005108:	da00      	bge.n	800510c <centering_q12_4.lto_priv.670+0x64>
 800510a:	465b      	mov	r3, fp
 800510c:	087a      	lsrs	r2, r7, #1
 800510e:	b292      	uxth	r2, r2
 8005110:	4353      	muls	r3, r2
 8005112:	0039      	movs	r1, r7
 8005114:	1818      	adds	r0, r3, r0
 8005116:	f009 fdc5 	bl	800eca4 <__divsi3>
 800511a:	007a      	lsls	r2, r7, #1
 800511c:	b201      	sxth	r1, r0
 800511e:	18a2      	adds	r2, r4, r2
 8005120:	2900      	cmp	r1, #0
 8005122:	dd19      	ble.n	8005158 <centering_q12_4.lto_priv.670+0xb0>
 8005124:	b280      	uxth	r0, r0
 8005126:	8823      	ldrh	r3, [r4, #0]
 8005128:	2100      	movs	r1, #0
 800512a:	4283      	cmp	r3, r0
 800512c:	d301      	bcc.n	8005132 <centering_q12_4.lto_priv.670+0x8a>
 800512e:	1a1b      	subs	r3, r3, r0
 8005130:	b299      	uxth	r1, r3
 8005132:	8021      	strh	r1, [r4, #0]
 8005134:	3402      	adds	r4, #2
 8005136:	42a2      	cmp	r2, r4
 8005138:	d1f5      	bne.n	8005126 <centering_q12_4.lto_priv.670+0x7e>
 800513a:	4643      	mov	r3, r8
 800513c:	1b5b      	subs	r3, r3, r5
 800513e:	1976      	adds	r6, r6, r5
 8005140:	b29b      	uxth	r3, r3
 8005142:	b2b6      	uxth	r6, r6
 8005144:	4698      	mov	r8, r3
 8005146:	e7c7      	b.n	80050d8 <centering_q12_4.lto_priv.670+0x30>
 8005148:	490b      	ldr	r1, [pc, #44]	; (8005178 <centering_q12_4.lto_priv.670+0xd0>)
 800514a:	0053      	lsls	r3, r2, #1
 800514c:	468c      	mov	ip, r1
 800514e:	5ae3      	ldrh	r3, [r4, r3]
 8005150:	3201      	adds	r2, #1
 8005152:	4463      	add	r3, ip
 8005154:	18c0      	adds	r0, r0, r3
 8005156:	e7d3      	b.n	8005100 <centering_q12_4.lto_priv.670+0x58>
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <centering_q12_4.lto_priv.670+0xd4>)
 800515a:	469c      	mov	ip, r3
 800515c:	4461      	add	r1, ip
 800515e:	8823      	ldrh	r3, [r4, #0]
 8005160:	428b      	cmp	r3, r1
 8005162:	dc06      	bgt.n	8005172 <centering_q12_4.lto_priv.670+0xca>
 8005164:	1a1b      	subs	r3, r3, r0
 8005166:	b29b      	uxth	r3, r3
 8005168:	8023      	strh	r3, [r4, #0]
 800516a:	3402      	adds	r4, #2
 800516c:	42a2      	cmp	r2, r4
 800516e:	d1f6      	bne.n	800515e <centering_q12_4.lto_priv.670+0xb6>
 8005170:	e7e3      	b.n	800513a <centering_q12_4.lto_priv.670+0x92>
 8005172:	4b02      	ldr	r3, [pc, #8]	; (800517c <centering_q12_4.lto_priv.670+0xd4>)
 8005174:	e7f8      	b.n	8005168 <centering_q12_4.lto_priv.670+0xc0>
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	ffff8000 	.word	0xffff8000
 800517c:	0000ffff 	.word	0x0000ffff

08005180 <acc_alg_cca_calculate>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	0003      	movs	r3, r0
 8005184:	000c      	movs	r4, r1
 8005186:	2201      	movs	r2, #1
 8005188:	2000      	movs	r0, #0
 800518a:	42a2      	cmp	r2, r4
 800518c:	d30f      	bcc.n	80051ae <acc_alg_cca_calculate+0x2e>
 800518e:	f00a f8e3 	bl	800f358 <__aeabi_i2f>
 8005192:	1c05      	adds	r5, r0, #0
 8005194:	1e60      	subs	r0, r4, #1
 8005196:	f00a f8df 	bl	800f358 <__aeabi_i2f>
 800519a:	1c01      	adds	r1, r0, #0
 800519c:	1c28      	adds	r0, r5, #0
 800519e:	f009 f8b3 	bl	800e308 <__aeabi_fdiv>
 80051a2:	f00e f943 	bl	801342c <log10f>
 80051a6:	4907      	ldr	r1, [pc, #28]	; (80051c4 <acc_alg_cca_calculate+0x44>)
 80051a8:	f009 f9c0 	bl	800e52c <__aeabi_fmul>
 80051ac:	bd70      	pop	{r4, r5, r6, pc}
 80051ae:	881d      	ldrh	r5, [r3, #0]
 80051b0:	8859      	ldrh	r1, [r3, #2]
 80051b2:	3201      	adds	r2, #1
 80051b4:	1b49      	subs	r1, r1, r5
 80051b6:	17cd      	asrs	r5, r1, #31
 80051b8:	1949      	adds	r1, r1, r5
 80051ba:	4069      	eors	r1, r5
 80051bc:	1840      	adds	r0, r0, r1
 80051be:	b292      	uxth	r2, r2
 80051c0:	3302      	adds	r3, #2
 80051c2:	e7e2      	b.n	800518a <acc_alg_cca_calculate+0xa>
 80051c4:	41a00000 	.word	0x41a00000

080051c8 <acc_sensor_protocol_r2_check_asic_id>:
 80051c8:	b530      	push	{r4, r5, lr}
 80051ca:	250e      	movs	r5, #14
 80051cc:	2400      	movs	r4, #0
 80051ce:	b085      	sub	sp, #20
 80051d0:	446d      	add	r5, sp
 80051d2:	002a      	movs	r2, r5
 80051d4:	0021      	movs	r1, r4
 80051d6:	802c      	strh	r4, [r5, #0]
 80051d8:	f007 fbda 	bl	800c990 <internal_reg_read.lto_priv.618>
 80051dc:	882a      	ldrh	r2, [r5, #0]
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <acc_sensor_protocol_r2_check_asic_id+0x34>)
 80051e0:	2001      	movs	r0, #1
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d007      	beq.n	80051f6 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 80051e6:	9200      	str	r2, [sp, #0]
 80051e8:	4a05      	ldr	r2, [pc, #20]	; (8005200 <acc_sensor_protocol_r2_check_asic_id+0x38>)
 80051ea:	0020      	movs	r0, r4
 80051ec:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80051ee:	4905      	ldr	r1, [pc, #20]	; (8005204 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 80051f0:	4a05      	ldr	r2, [pc, #20]	; (8005208 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 80051f2:	47a8      	blx	r5
 80051f4:	0020      	movs	r0, r4
 80051f6:	b005      	add	sp, #20
 80051f8:	bd30      	pop	{r4, r5, pc}
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	00001112 	.word	0x00001112
 8005200:	200003f0 	.word	0x200003f0
 8005204:	0801c6e8 	.word	0x0801c6e8
 8005208:	0801c6ba 	.word	0x0801c6ba

0800520c <process_data.lto_priv.289>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	001d      	movs	r5, r3
 8005210:	23b8      	movs	r3, #184	; 0xb8
 8005212:	46ce      	mov	lr, r9
 8005214:	4699      	mov	r9, r3
 8005216:	4647      	mov	r7, r8
 8005218:	6944      	ldr	r4, [r0, #20]
 800521a:	b580      	push	{r7, lr}
 800521c:	44a1      	add	r9, r4
 800521e:	464b      	mov	r3, r9
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	0017      	movs	r7, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d028      	beq.n	800527a <process_data.lto_priv.289+0x6e>
 8005228:	0026      	movs	r6, r4
 800522a:	6809      	ldr	r1, [r1, #0]
 800522c:	36b4      	adds	r6, #180	; 0xb4
 800522e:	4688      	mov	r8, r1
 8005230:	8832      	ldrh	r2, [r6, #0]
 8005232:	6801      	ldr	r1, [r0, #0]
 8005234:	0052      	lsls	r2, r2, #1
 8005236:	4490      	add	r8, r2
 8005238:	4642      	mov	r2, r8
 800523a:	2001      	movs	r0, #1
 800523c:	f008 fc44 	bl	800dac8 <acc_probes_execute_uint16>
 8005240:	464b      	mov	r3, r9
 8005242:	4640      	mov	r0, r8
 8005244:	8819      	ldrh	r1, [r3, #0]
 8005246:	f7ff ff9b 	bl	8005180 <acc_alg_cca_calculate>
 800524a:	2301      	movs	r3, #1
 800524c:	6068      	str	r0, [r5, #4]
 800524e:	490d      	ldr	r1, [pc, #52]	; (8005284 <process_data.lto_priv.289+0x78>)
 8005250:	4698      	mov	r8, r3
 8005252:	f009 fe77 	bl	800ef44 <__aeabi_fcmpgt>
 8005256:	2800      	cmp	r0, #0
 8005258:	d100      	bne.n	800525c <process_data.lto_priv.289+0x50>
 800525a:	4680      	mov	r8, r0
 800525c:	4643      	mov	r3, r8
 800525e:	702b      	strb	r3, [r5, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005264:	429a      	cmp	r2, r3
 8005266:	d103      	bne.n	8005270 <process_data.lto_priv.289+0x64>
 8005268:	34ba      	adds	r4, #186	; 0xba
 800526a:	7822      	ldrb	r2, [r4, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	4053      	eors	r3, r2
 8005270:	2201      	movs	r2, #1
 8005272:	4013      	ands	r3, r2
 8005274:	722b      	strb	r3, [r5, #8]
 8005276:	8833      	ldrh	r3, [r6, #0]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	2001      	movs	r0, #1
 800527c:	bc0c      	pop	{r2, r3}
 800527e:	4690      	mov	r8, r2
 8005280:	4699      	mov	r9, r3
 8005282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005284:	42640000 	.word	0x42640000

08005288 <process_data.lto_priv.288>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	4657      	mov	r7, sl
 800528c:	464e      	mov	r6, r9
 800528e:	4645      	mov	r5, r8
 8005290:	46de      	mov	lr, fp
 8005292:	6944      	ldr	r4, [r0, #20]
 8005294:	b5e0      	push	{r5, r6, r7, lr}
 8005296:	0027      	movs	r7, r4
 8005298:	37ce      	adds	r7, #206	; 0xce
 800529a:	001d      	movs	r5, r3
 800529c:	883b      	ldrh	r3, [r7, #0]
 800529e:	4680      	mov	r8, r0
 80052a0:	468a      	mov	sl, r1
 80052a2:	0016      	movs	r6, r2
 80052a4:	4699      	mov	r9, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d03a      	beq.n	8005320 <process_data.lto_priv.288+0x98>
 80052aa:	0023      	movs	r3, r4
 80052ac:	33c8      	adds	r3, #200	; 0xc8
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	b280      	uxth	r0, r0
 80052b2:	0043      	lsls	r3, r0, #1
 80052b4:	469b      	mov	fp, r3
 80052b6:	0023      	movs	r3, r4
 80052b8:	33cc      	adds	r3, #204	; 0xcc
 80052ba:	8819      	ldrh	r1, [r3, #0]
 80052bc:	207c      	movs	r0, #124	; 0x7c
 80052be:	f009 fc67 	bl	800eb90 <__udivsi3>
 80052c2:	465b      	mov	r3, fp
 80052c4:	4358      	muls	r0, r3
 80052c6:	0023      	movs	r3, r4
 80052c8:	33c4      	adds	r3, #196	; 0xc4
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	4641      	mov	r1, r8
 80052ce:	18c0      	adds	r0, r0, r3
 80052d0:	4653      	mov	r3, sl
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6809      	ldr	r1, [r1, #0]
 80052d6:	469a      	mov	sl, r3
 80052d8:	4482      	add	sl, r0
 80052da:	464b      	mov	r3, r9
 80052dc:	4652      	mov	r2, sl
 80052de:	2001      	movs	r0, #1
 80052e0:	f008 fbf2 	bl	800dac8 <acc_probes_execute_uint16>
 80052e4:	883f      	ldrh	r7, [r7, #0]
 80052e6:	4650      	mov	r0, sl
 80052e8:	0039      	movs	r1, r7
 80052ea:	f7ff ff49 	bl	8005180 <acc_alg_cca_calculate>
 80052ee:	2301      	movs	r3, #1
 80052f0:	6068      	str	r0, [r5, #4]
 80052f2:	490f      	ldr	r1, [pc, #60]	; (8005330 <process_data.lto_priv.288+0xa8>)
 80052f4:	4698      	mov	r8, r3
 80052f6:	f009 fe25 	bl	800ef44 <__aeabi_fcmpgt>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d100      	bne.n	8005300 <process_data.lto_priv.288+0x78>
 80052fe:	4680      	mov	r8, r0
 8005300:	4643      	mov	r3, r8
 8005302:	702b      	strb	r3, [r5, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005308:	429a      	cmp	r2, r3
 800530a:	d103      	bne.n	8005314 <process_data.lto_priv.288+0x8c>
 800530c:	34c0      	adds	r4, #192	; 0xc0
 800530e:	7822      	ldrb	r2, [r4, #0]
 8005310:	3301      	adds	r3, #1
 8005312:	4053      	eors	r3, r2
 8005314:	2201      	movs	r2, #1
 8005316:	4013      	ands	r3, r2
 8005318:	722b      	strb	r3, [r5, #8]
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	1bdf      	subs	r7, r3, r7
 800531e:	6037      	str	r7, [r6, #0]
 8005320:	2001      	movs	r0, #1
 8005322:	bc3c      	pop	{r2, r3, r4, r5}
 8005324:	4690      	mov	r8, r2
 8005326:	4699      	mov	r9, r3
 8005328:	46a2      	mov	sl, r4
 800532a:	46ab      	mov	fp, r5
 800532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	42640000 	.word	0x42640000

08005334 <acc_sensor_protocol_r2_transfer_data>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	0016      	movs	r6, r2
 8005338:	0005      	movs	r5, r0
 800533a:	f005 fc63 	bl	800ac04 <internal_buffer_processed_read.constprop.30>
 800533e:	0004      	movs	r4, r0
 8005340:	0033      	movs	r3, r6
 8005342:	0002      	movs	r2, r0
 8005344:	0029      	movs	r1, r5
 8005346:	2000      	movs	r0, #0
 8005348:	f008 fbbe 	bl	800dac8 <acc_probes_execute_uint16>
 800534c:	0020      	movs	r0, r4
 800534e:	bd70      	pop	{r4, r5, r6, pc}

08005350 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8005350:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005352:	ae03      	add	r6, sp, #12
 8005354:	0032      	movs	r2, r6
 8005356:	0005      	movs	r5, r0
 8005358:	f007 fd5e 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800535c:	1e04      	subs	r4, r0, #0
 800535e:	d108      	bne.n	8005372 <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 8005362:	4a0b      	ldr	r2, [pc, #44]	; (8005390 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 8005364:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8005366:	490b      	ldr	r1, [pc, #44]	; (8005394 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8005368:	002b      	movs	r3, r5
 800536a:	47b0      	blx	r6
 800536c:	0020      	movs	r0, r4
 800536e:	b004      	add	sp, #16
 8005370:	bd70      	pop	{r4, r5, r6, pc}
 8005372:	8873      	ldrh	r3, [r6, #2]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d0f9      	beq.n	800536c <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4b04      	ldr	r3, [pc, #16]	; (800538c <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 800537c:	4a06      	ldr	r2, [pc, #24]	; (8005398 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 800537e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8005382:	002b      	movs	r3, r5
 8005384:	2000      	movs	r0, #0
 8005386:	47a0      	blx	r4
 8005388:	2400      	movs	r4, #0
 800538a:	e7ef      	b.n	800536c <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 800538c:	200003f0 	.word	0x200003f0
 8005390:	0801c6f8 	.word	0x0801c6f8
 8005394:	0801c6e8 	.word	0x0801c6e8
 8005398:	0801c72a 	.word	0x0801c72a

0800539c <acc_sensor_protocol_r2_wait_for_radar_data>:
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	b085      	sub	sp, #20
 80053a0:	ac03      	add	r4, sp, #12
 80053a2:	0017      	movs	r7, r2
 80053a4:	0022      	movs	r2, r4
 80053a6:	0006      	movs	r6, r0
 80053a8:	f007 fd36 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80053ac:	1e05      	subs	r5, r0, #0
 80053ae:	d032      	beq.n	8005416 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80053b0:	7822      	ldrb	r2, [r4, #0]
 80053b2:	8863      	ldrh	r3, [r4, #2]
 80053b4:	2a06      	cmp	r2, #6
 80053b6:	d125      	bne.n	8005404 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80053b8:	051a      	lsls	r2, r3, #20
 80053ba:	d523      	bpl.n	8005404 <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	00d2      	lsls	r2, r2, #3
 80053c0:	4013      	ands	r3, r2
 80053c2:	d12b      	bne.n	800541c <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	d000      	beq.n	80053ca <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80053c8:	703b      	strb	r3, [r7, #0]
 80053ca:	8863      	ldrh	r3, [r4, #2]
 80053cc:	05db      	lsls	r3, r3, #23
 80053ce:	d50a      	bpl.n	80053e6 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80053d2:	001a      	movs	r2, r3
 80053d4:	3230      	adds	r2, #48	; 0x30
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	2a03      	cmp	r2, #3
 80053da:	d904      	bls.n	80053e6 <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 80053e0:	4913      	ldr	r1, [pc, #76]	; (8005430 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80053e2:	2004      	movs	r0, #4
 80053e4:	4798      	blx	r3
 80053e6:	8863      	ldrh	r3, [r4, #2]
 80053e8:	059b      	lsls	r3, r3, #22
 80053ea:	d514      	bpl.n	8005416 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80053ee:	001a      	movs	r2, r3
 80053f0:	3230      	adds	r2, #48	; 0x30
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	2a03      	cmp	r2, #3
 80053f6:	d90e      	bls.n	8005416 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80053f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 80053fc:	490c      	ldr	r1, [pc, #48]	; (8005430 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80053fe:	2004      	movs	r0, #4
 8005400:	4798      	blx	r3
 8005402:	e008      	b.n	8005416 <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4b08      	ldr	r3, [pc, #32]	; (8005428 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8005408:	4a0b      	ldr	r2, [pc, #44]	; (8005438 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 800540a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800540c:	4908      	ldr	r1, [pc, #32]	; (8005430 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800540e:	0033      	movs	r3, r6
 8005410:	2000      	movs	r0, #0
 8005412:	47a0      	blx	r4
 8005414:	2500      	movs	r5, #0
 8005416:	0028      	movs	r0, r5
 8005418:	b005      	add	sp, #20
 800541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800541c:	0031      	movs	r1, r6
 800541e:	200f      	movs	r0, #15
 8005420:	f008 fb46 	bl	800dab0 <acc_probes_execute_primitive_probe>
 8005424:	002b      	movs	r3, r5
 8005426:	e7cd      	b.n	80053c4 <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 8005428:	200003f0 	.word	0x200003f0
 800542c:	0801c794 	.word	0x0801c794
 8005430:	0801c6e8 	.word	0x0801c6e8
 8005434:	0801c7ad 	.word	0x0801c7ad
 8005438:	0801c764 	.word	0x0801c764

0800543c <acc_sensor_protocol_r2_ack_event>:
 800543c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800543e:	466b      	mov	r3, sp
 8005440:	1d9c      	adds	r4, r3, #6
 8005442:	2300      	movs	r3, #0
 8005444:	0022      	movs	r2, r4
 8005446:	2138      	movs	r1, #56	; 0x38
 8005448:	0005      	movs	r5, r0
 800544a:	8023      	strh	r3, [r4, #0]
 800544c:	f007 faa0 	bl	800c990 <internal_reg_read.lto_priv.618>
 8005450:	8824      	ldrh	r4, [r4, #0]
 8005452:	2001      	movs	r0, #1
 8005454:	2c00      	cmp	r4, #0
 8005456:	d10a      	bne.n	800546e <acc_sensor_protocol_r2_ack_event+0x32>
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <acc_sensor_protocol_r2_ack_event+0x34>)
 800545a:	4a06      	ldr	r2, [pc, #24]	; (8005474 <acc_sensor_protocol_r2_ack_event+0x38>)
 800545c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800545e:	4906      	ldr	r1, [pc, #24]	; (8005478 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8005460:	002b      	movs	r3, r5
 8005462:	0020      	movs	r0, r4
 8005464:	47b0      	blx	r6
 8005466:	0028      	movs	r0, r5
 8005468:	f007 fab9 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800546c:	0020      	movs	r0, r4
 800546e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005470:	200003f0 	.word	0x200003f0
 8005474:	0801c7c5 	.word	0x0801c7c5
 8005478:	0801c6e8 	.word	0x0801c6e8

0800547c <acc_radar_engine_common_get_timeout_ms>:
 800547c:	b510      	push	{r4, lr}
 800547e:	0004      	movs	r4, r0
 8005480:	f7fe f954 	bl	800372c <acc_base_configuration_repetition_mode_get>
 8005484:	2801      	cmp	r0, #1
 8005486:	d00c      	beq.n	80054a2 <acc_radar_engine_common_get_timeout_ms+0x26>
 8005488:	0020      	movs	r0, r4
 800548a:	f7fe f939 	bl	8003700 <acc_base_configuration_update_rate_get>
 800548e:	1c01      	adds	r1, r0, #0
 8005490:	4805      	ldr	r0, [pc, #20]	; (80054a8 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8005492:	f008 ff39 	bl	800e308 <__aeabi_fdiv>
 8005496:	4904      	ldr	r1, [pc, #16]	; (80054a8 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8005498:	f008 fd9c 	bl	800dfd4 <__aeabi_fadd>
 800549c:	f009 fd86 	bl	800efac <__aeabi_f2uiz>
 80054a0:	bd10      	pop	{r4, pc}
 80054a2:	20fa      	movs	r0, #250	; 0xfa
 80054a4:	00c0      	lsls	r0, r0, #3
 80054a6:	e7fb      	b.n	80054a0 <acc_radar_engine_common_get_timeout_ms+0x24>
 80054a8:	44fa0000 	.word	0x44fa0000

080054ac <acc_radar_engine_acquire_adc_data>:
 80054ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ae:	4657      	mov	r7, sl
 80054b0:	464e      	mov	r6, r9
 80054b2:	4645      	mov	r5, r8
 80054b4:	46de      	mov	lr, fp
 80054b6:	2300      	movs	r3, #0
 80054b8:	b5e0      	push	{r5, r6, r7, lr}
 80054ba:	0005      	movs	r5, r0
 80054bc:	4698      	mov	r8, r3
 80054be:	b08d      	sub	sp, #52	; 0x34
 80054c0:	4689      	mov	r9, r1
 80054c2:	4945      	ldr	r1, [pc, #276]	; (80055d8 <acc_radar_engine_acquire_adc_data+0x12c>)
 80054c4:	a806      	add	r0, sp, #24
 80054c6:	7093      	strb	r3, [r2, #2]
 80054c8:	70d3      	strb	r3, [r2, #3]
 80054ca:	8013      	strh	r3, [r2, #0]
 80054cc:	7313      	strb	r3, [r2, #12]
 80054ce:	7113      	strb	r3, [r2, #4]
 80054d0:	6091      	str	r1, [r2, #8]
 80054d2:	1d87      	adds	r7, r0, #6
 80054d4:	0014      	movs	r4, r2
 80054d6:	6828      	ldr	r0, [r5, #0]
 80054d8:	aa06      	add	r2, sp, #24
 80054da:	71d3      	strb	r3, [r2, #7]
 80054dc:	703b      	strb	r3, [r7, #0]
 80054de:	4682      	mov	sl, r0
 80054e0:	7ba8      	ldrb	r0, [r5, #14]
 80054e2:	3207      	adds	r2, #7
 80054e4:	9000      	str	r0, [sp, #0]
 80054e6:	7be8      	ldrb	r0, [r5, #15]
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	9003      	str	r0, [sp, #12]
 80054ec:	89a8      	ldrh	r0, [r5, #12]
 80054ee:	9202      	str	r2, [sp, #8]
 80054f0:	9001      	str	r0, [sp, #4]
 80054f2:	6928      	ldr	r0, [r5, #16]
 80054f4:	ae09      	add	r6, sp, #36	; 0x24
 80054f6:	9004      	str	r0, [sp, #16]
 80054f8:	4643      	mov	r3, r8
 80054fa:	9a01      	ldr	r2, [sp, #4]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	429a      	cmp	r2, r3
 8005500:	d959      	bls.n	80055b6 <acc_radar_engine_acquire_adc_data+0x10a>
 8005502:	9b00      	ldr	r3, [sp, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00f      	beq.n	8005528 <acc_radar_engine_acquire_adc_data+0x7c>
 8005508:	69ab      	ldr	r3, [r5, #24]
 800550a:	9a02      	ldr	r2, [sp, #8]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	9904      	ldr	r1, [sp, #16]
 8005510:	4650      	mov	r0, sl
 8005512:	4798      	blx	r3
 8005514:	2800      	cmp	r0, #0
 8005516:	d10e      	bne.n	8005536 <acc_radar_engine_acquire_adc_data+0x8a>
 8005518:	2000      	movs	r0, #0
 800551a:	b00d      	add	sp, #52	; 0x34
 800551c:	bc3c      	pop	{r2, r3, r4, r5}
 800551e:	4690      	mov	r8, r2
 8005520:	4699      	mov	r9, r3
 8005522:	46a2      	mov	sl, r4
 8005524:	46ab      	mov	fp, r5
 8005526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005528:	69ab      	ldr	r3, [r5, #24]
 800552a:	4650      	mov	r0, sl
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	4798      	blx	r3
 8005530:	2800      	cmp	r0, #0
 8005532:	d1e9      	bne.n	8005508 <acc_radar_engine_acquire_adc_data+0x5c>
 8005534:	e7f0      	b.n	8005518 <acc_radar_engine_acquire_adc_data+0x6c>
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d100      	bne.n	8005540 <acc_radar_engine_acquire_adc_data+0x94>
 800553e:	78a3      	ldrb	r3, [r4, #2]
 8005540:	70a3      	strb	r3, [r4, #2]
 8005542:	69ab      	ldr	r3, [r5, #24]
 8005544:	003a      	movs	r2, r7
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4649      	mov	r1, r9
 800554a:	0028      	movs	r0, r5
 800554c:	4798      	blx	r3
 800554e:	2300      	movs	r3, #0
 8005550:	7033      	strb	r3, [r6, #0]
 8005552:	7233      	strb	r3, [r6, #8]
 8005554:	69ab      	ldr	r3, [r5, #24]
 8005556:	9a05      	ldr	r2, [sp, #20]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	9008      	str	r0, [sp, #32]
 800555c:	6072      	str	r2, [r6, #4]
 800555e:	469b      	mov	fp, r3
 8005560:	aa08      	add	r2, sp, #32
 8005562:	0033      	movs	r3, r6
 8005564:	4649      	mov	r1, r9
 8005566:	0028      	movs	r0, r5
 8005568:	47d8      	blx	fp
 800556a:	7a33      	ldrb	r3, [r6, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d100      	bne.n	8005572 <acc_radar_engine_acquire_adc_data+0xc6>
 8005570:	7b23      	ldrb	r3, [r4, #12]
 8005572:	7323      	strb	r3, [r4, #12]
 8005574:	7833      	ldrb	r3, [r6, #0]
 8005576:	469b      	mov	fp, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d100      	bne.n	800557e <acc_radar_engine_acquire_adc_data+0xd2>
 800557c:	7923      	ldrb	r3, [r4, #4]
 800557e:	7123      	strb	r3, [r4, #4]
 8005580:	68a1      	ldr	r1, [r4, #8]
 8005582:	6870      	ldr	r0, [r6, #4]
 8005584:	f00d fe26 	bl	80131d4 <fmaxf>
 8005588:	783b      	ldrb	r3, [r7, #0]
 800558a:	60a0      	str	r0, [r4, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d100      	bne.n	8005592 <acc_radar_engine_acquire_adc_data+0xe6>
 8005590:	78e3      	ldrb	r3, [r4, #3]
 8005592:	9a08      	ldr	r2, [sp, #32]
 8005594:	70e3      	strb	r3, [r4, #3]
 8005596:	4694      	mov	ip, r2
 8005598:	8823      	ldrh	r3, [r4, #0]
 800559a:	4659      	mov	r1, fp
 800559c:	4463      	add	r3, ip
 800559e:	8023      	strh	r3, [r4, #0]
 80055a0:	69ab      	ldr	r3, [r5, #24]
 80055a2:	0028      	movs	r0, r5
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	4798      	blx	r3
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d006      	beq.n	80055bc <acc_radar_engine_acquire_adc_data+0x110>
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	4598      	cmp	r8, r3
 80055b4:	d102      	bne.n	80055bc <acc_radar_engine_acquire_adc_data+0x110>
 80055b6:	464b      	mov	r3, r9
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	e7ae      	b.n	800551a <acc_radar_engine_acquire_adc_data+0x6e>
 80055bc:	9b00      	ldr	r3, [sp, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d103      	bne.n	80055ca <acc_radar_engine_acquire_adc_data+0x11e>
 80055c2:	2301      	movs	r3, #1
 80055c4:	469c      	mov	ip, r3
 80055c6:	44e0      	add	r8, ip
 80055c8:	e796      	b.n	80054f8 <acc_radar_engine_acquire_adc_data+0x4c>
 80055ca:	69ab      	ldr	r3, [r5, #24]
 80055cc:	4650      	mov	r0, sl
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	4798      	blx	r3
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d1f5      	bne.n	80055c2 <acc_radar_engine_acquire_adc_data+0x116>
 80055d6:	e79f      	b.n	8005518 <acc_radar_engine_acquire_adc_data+0x6c>
 80055d8:	ff800000 	.word	0xff800000

080055dc <update_program.lto_priv.287>:
 80055dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055de:	6945      	ldr	r5, [r0, #20]
 80055e0:	2401      	movs	r4, #1
 80055e2:	002b      	movs	r3, r5
 80055e4:	33ba      	adds	r3, #186	; 0xba
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	4319      	orrs	r1, r3
 80055ea:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80055ec:	404c      	eors	r4, r1
 80055ee:	425a      	negs	r2, r3
 80055f0:	4153      	adcs	r3, r2
 80055f2:	428b      	cmp	r3, r1
 80055f4:	d006      	beq.n	8005604 <update_program.lto_priv.287+0x28>
 80055f6:	9400      	str	r4, [sp, #0]
 80055f8:	23ef      	movs	r3, #239	; 0xef
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <update_program.lto_priv.287+0x30>)
 80055fc:	4904      	ldr	r1, [pc, #16]	; (8005610 <update_program.lto_priv.287+0x34>)
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	f005 fb62 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 8005604:	642c      	str	r4, [r5, #64]	; 0x40
 8005606:	2001      	movs	r0, #1
 8005608:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	08016988 	.word	0x08016988
 8005610:	08017ec8 	.word	0x08017ec8

08005614 <transfer_data.lto_priv.291>:
 8005614:	b570      	push	{r4, r5, r6, lr}
 8005616:	000d      	movs	r5, r1
 8005618:	2100      	movs	r1, #0
 800561a:	6943      	ldr	r3, [r0, #20]
 800561c:	7011      	strb	r1, [r2, #0]
 800561e:	001a      	movs	r2, r3
 8005620:	33b8      	adds	r3, #184	; 0xb8
 8005622:	32b4      	adds	r2, #180	; 0xb4
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	8814      	ldrh	r4, [r2, #0]
 8005628:	6829      	ldr	r1, [r5, #0]
 800562a:	18e4      	adds	r4, r4, r3
 800562c:	0022      	movs	r2, r4
 800562e:	6800      	ldr	r0, [r0, #0]
 8005630:	f7ff fe80 	bl	8005334 <acc_sensor_protocol_r2_transfer_data>
 8005634:	0062      	lsls	r2, r4, #1
 8005636:	0001      	movs	r1, r0
 8005638:	6828      	ldr	r0, [r5, #0]
 800563a:	f010 f83c 	bl	80156b6 <memmove>
 800563e:	0020      	movs	r0, r4
 8005640:	bd70      	pop	{r4, r5, r6, pc}

08005642 <acc_radar_engine_sparse_create>:
 8005642:	22cd      	movs	r2, #205	; 0xcd
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	0052      	lsls	r2, r2, #1
 8005648:	0004      	movs	r4, r0
 800564a:	000d      	movs	r5, r1
 800564c:	20bc      	movs	r0, #188	; 0xbc
 800564e:	490f      	ldr	r1, [pc, #60]	; (800568c <acc_radar_engine_sparse_create+0x4a>)
 8005650:	f005 facc 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8005654:	2300      	movs	r3, #0
 8005656:	6160      	str	r0, [r4, #20]
 8005658:	4298      	cmp	r0, r3
 800565a:	d014      	beq.n	8005686 <acc_radar_engine_sparse_create+0x44>
 800565c:	0028      	movs	r0, r5
 800565e:	f7fe f896 	bl	800378e <acc_base_configuration_sensor_get>
 8005662:	6020      	str	r0, [r4, #0]
 8005664:	0028      	movs	r0, r5
 8005666:	f7fd facb 	bl	8002c00 <acc_base_configuration_asynchronous_measurement_get>
 800566a:	73a0      	strb	r0, [r4, #14]
 800566c:	0028      	movs	r0, r5
 800566e:	f7fe f884 	bl	800377a <acc_base_configuration_power_save_mode_get>
 8005672:	4243      	negs	r3, r0
 8005674:	4158      	adcs	r0, r3
 8005676:	73e0      	strb	r0, [r4, #15]
 8005678:	0028      	movs	r0, r5
 800567a:	f7ff feff 	bl	800547c <acc_radar_engine_common_get_timeout_ms>
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <acc_radar_engine_sparse_create+0x4e>)
 8005680:	6120      	str	r0, [r4, #16]
 8005682:	61a3      	str	r3, [r4, #24]
 8005684:	2301      	movs	r3, #1
 8005686:	0018      	movs	r0, r3
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	0801c7f6 	.word	0x0801c7f6
 8005690:	080157a0 	.word	0x080157a0

08005694 <acc_radar_engine_linear_create>:
 8005694:	222c      	movs	r2, #44	; 0x2c
 8005696:	b570      	push	{r4, r5, r6, lr}
 8005698:	32ff      	adds	r2, #255	; 0xff
 800569a:	0004      	movs	r4, r0
 800569c:	000d      	movs	r5, r1
 800569e:	20d4      	movs	r0, #212	; 0xd4
 80056a0:	490f      	ldr	r1, [pc, #60]	; (80056e0 <acc_radar_engine_linear_create+0x4c>)
 80056a2:	f005 faa3 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 80056a6:	2300      	movs	r3, #0
 80056a8:	6160      	str	r0, [r4, #20]
 80056aa:	4298      	cmp	r0, r3
 80056ac:	d015      	beq.n	80056da <acc_radar_engine_linear_create+0x46>
 80056ae:	0028      	movs	r0, r5
 80056b0:	f7fe f86d 	bl	800378e <acc_base_configuration_sensor_get>
 80056b4:	6020      	str	r0, [r4, #0]
 80056b6:	0028      	movs	r0, r5
 80056b8:	f7fd faa2 	bl	8002c00 <acc_base_configuration_asynchronous_measurement_get>
 80056bc:	73a0      	strb	r0, [r4, #14]
 80056be:	0028      	movs	r0, r5
 80056c0:	f7fe f85b 	bl	800377a <acc_base_configuration_power_save_mode_get>
 80056c4:	4243      	negs	r3, r0
 80056c6:	4158      	adcs	r0, r3
 80056c8:	73e0      	strb	r0, [r4, #15]
 80056ca:	0028      	movs	r0, r5
 80056cc:	f7ff fed6 	bl	800547c <acc_radar_engine_common_get_timeout_ms>
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <acc_radar_engine_linear_create+0x50>)
 80056d2:	6120      	str	r0, [r4, #16]
 80056d4:	3338      	adds	r3, #56	; 0x38
 80056d6:	61a3      	str	r3, [r4, #24]
 80056d8:	2301      	movs	r3, #1
 80056da:	0018      	movs	r0, r3
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	0801c828 	.word	0x0801c828
 80056e4:	080157a0 	.word	0x080157a0

080056e8 <transfer_data.lto_priv.290>:
 80056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ea:	4657      	mov	r7, sl
 80056ec:	464e      	mov	r6, r9
 80056ee:	4645      	mov	r5, r8
 80056f0:	46de      	mov	lr, fp
 80056f2:	6944      	ldr	r4, [r0, #20]
 80056f4:	b5e0      	push	{r5, r6, r7, lr}
 80056f6:	0023      	movs	r3, r4
 80056f8:	0025      	movs	r5, r4
 80056fa:	b08d      	sub	sp, #52	; 0x34
 80056fc:	9204      	str	r2, [sp, #16]
 80056fe:	33c2      	adds	r3, #194	; 0xc2
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	0006      	movs	r6, r0
 8005704:	468a      	mov	sl, r1
 8005706:	35c6      	adds	r5, #198	; 0xc6
 8005708:	2b00      	cmp	r3, #0
 800570a:	d100      	bne.n	800570e <transfer_data.lto_priv.290+0x26>
 800570c:	802b      	strh	r3, [r5, #0]
 800570e:	23cc      	movs	r3, #204	; 0xcc
 8005710:	469b      	mov	fp, r3
 8005712:	44a3      	add	fp, r4
 8005714:	465b      	mov	r3, fp
 8005716:	207c      	movs	r0, #124	; 0x7c
 8005718:	8819      	ldrh	r1, [r3, #0]
 800571a:	f009 fa39 	bl	800eb90 <__udivsi3>
 800571e:	23c8      	movs	r3, #200	; 0xc8
 8005720:	4699      	mov	r9, r3
 8005722:	44a1      	add	r9, r4
 8005724:	464b      	mov	r3, r9
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	a906      	add	r1, sp, #24
 800572a:	b29b      	uxth	r3, r3
 800572c:	4358      	muls	r0, r3
 800572e:	0023      	movs	r3, r4
 8005730:	4680      	mov	r8, r0
 8005732:	33ce      	adds	r3, #206	; 0xce
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	0020      	movs	r0, r4
 8005738:	4498      	add	r8, r3
 800573a:	f007 fce3 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	8829      	ldrh	r1, [r5, #0]
 8005742:	4443      	add	r3, r8
 8005744:	001a      	movs	r2, r3
 8005746:	4653      	mov	r3, sl
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6830      	ldr	r0, [r6, #0]
 800574c:	469c      	mov	ip, r3
 800574e:	4461      	add	r1, ip
 8005750:	f7ff fdf0 	bl	8005334 <acc_sensor_protocol_r2_transfer_data>
 8005754:	0023      	movs	r3, r4
 8005756:	33ad      	adds	r3, #173	; 0xad
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	0006      	movs	r6, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d128      	bne.n	80057b2 <transfer_data.lto_priv.290+0xca>
 8005760:	2300      	movs	r3, #0
 8005762:	9a04      	ldr	r2, [sp, #16]
 8005764:	a906      	add	r1, sp, #24
 8005766:	7013      	strb	r3, [r2, #0]
 8005768:	0020      	movs	r0, r4
 800576a:	f007 fccb 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 800576e:	4643      	mov	r3, r8
 8005770:	4650      	mov	r0, sl
 8005772:	005a      	lsls	r2, r3, #1
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	6800      	ldr	r0, [r0, #0]
 8005778:	0059      	lsls	r1, r3, #1
 800577a:	882b      	ldrh	r3, [r5, #0]
 800577c:	1871      	adds	r1, r6, r1
 800577e:	18c0      	adds	r0, r0, r3
 8005780:	f00f ff99 	bl	80156b6 <memmove>
 8005784:	464b      	mov	r3, r9
 8005786:	882e      	ldrh	r6, [r5, #0]
 8005788:	34c4      	adds	r4, #196	; 0xc4
 800578a:	8026      	strh	r6, [r4, #0]
 800578c:	681c      	ldr	r4, [r3, #0]
 800578e:	465b      	mov	r3, fp
 8005790:	207c      	movs	r0, #124	; 0x7c
 8005792:	8819      	ldrh	r1, [r3, #0]
 8005794:	f009 f9fc 	bl	800eb90 <__udivsi3>
 8005798:	b2a4      	uxth	r4, r4
 800579a:	0064      	lsls	r4, r4, #1
 800579c:	4344      	muls	r4, r0
 800579e:	4640      	mov	r0, r8
 80057a0:	1936      	adds	r6, r6, r4
 80057a2:	802e      	strh	r6, [r5, #0]
 80057a4:	b00d      	add	sp, #52	; 0x34
 80057a6:	bc3c      	pop	{r2, r3, r4, r5}
 80057a8:	4690      	mov	r8, r2
 80057aa:	4699      	mov	r9, r3
 80057ac:	46a2      	mov	sl, r4
 80057ae:	46ab      	mov	fp, r5
 80057b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b2:	0022      	movs	r2, r4
 80057b4:	211f      	movs	r1, #31
 80057b6:	32bc      	adds	r2, #188	; 0xbc
 80057b8:	6813      	ldr	r3, [r2, #0]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	400b      	ands	r3, r1
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <transfer_data.lto_priv.290+0x1d8>)
 80057c2:	0011      	movs	r1, r2
 80057c4:	3130      	adds	r1, #48	; 0x30
 80057c6:	7809      	ldrb	r1, [r1, #0]
 80057c8:	2903      	cmp	r1, #3
 80057ca:	d904      	bls.n	80057d6 <transfer_data.lto_priv.290+0xee>
 80057cc:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80057ce:	493d      	ldr	r1, [pc, #244]	; (80058c4 <transfer_data.lto_priv.290+0x1dc>)
 80057d0:	4a3d      	ldr	r2, [pc, #244]	; (80058c8 <transfer_data.lto_priv.290+0x1e0>)
 80057d2:	2004      	movs	r0, #4
 80057d4:	47b8      	blx	r7
 80057d6:	6a23      	ldr	r3, [r4, #32]
 80057d8:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <transfer_data.lto_priv.290+0x1e4>)
 80057da:	b29b      	uxth	r3, r3
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	3270      	adds	r2, #112	; 0x70
 80057e0:	5e98      	ldrsh	r0, [r3, r2]
 80057e2:	f009 fdb9 	bl	800f358 <__aeabi_i2f>
 80057e6:	1c07      	adds	r7, r0, #0
 80057e8:	8830      	ldrh	r0, [r6, #0]
 80057ea:	f009 fdff 	bl	800f3ec <__aeabi_ui2f>
 80057ee:	21de      	movs	r1, #222	; 0xde
 80057f0:	0589      	lsls	r1, r1, #22
 80057f2:	f008 fe9b 	bl	800e52c <__aeabi_fmul>
 80057f6:	21fc      	movs	r1, #252	; 0xfc
 80057f8:	0589      	lsls	r1, r1, #22
 80057fa:	f008 ffc9 	bl	800e790 <__aeabi_fsub>
 80057fe:	4934      	ldr	r1, [pc, #208]	; (80058d0 <transfer_data.lto_priv.290+0x1e8>)
 8005800:	f008 fe94 	bl	800e52c <__aeabi_fmul>
 8005804:	4933      	ldr	r1, [pc, #204]	; (80058d4 <transfer_data.lto_priv.290+0x1ec>)
 8005806:	f008 fe91 	bl	800e52c <__aeabi_fmul>
 800580a:	1c01      	adds	r1, r0, #0
 800580c:	1c38      	adds	r0, r7, #0
 800580e:	f008 ffbf 	bl	800e790 <__aeabi_fsub>
 8005812:	f009 fd81 	bl	800f318 <__aeabi_f2iz>
 8005816:	4a30      	ldr	r2, [pc, #192]	; (80058d8 <transfer_data.lto_priv.290+0x1f0>)
 8005818:	b207      	sxth	r7, r0
 800581a:	b2bb      	uxth	r3, r7
 800581c:	189a      	adds	r2, r3, r2
 800581e:	492f      	ldr	r1, [pc, #188]	; (80058dc <transfer_data.lto_priv.290+0x1f4>)
 8005820:	b292      	uxth	r2, r2
 8005822:	428a      	cmp	r2, r1
 8005824:	d82a      	bhi.n	800587c <transfer_data.lto_priv.290+0x194>
 8005826:	2126      	movs	r1, #38	; 0x26
 8005828:	5e62      	ldrsh	r2, [r4, r1]
 800582a:	8870      	ldrh	r0, [r6, #2]
 800582c:	9203      	str	r2, [sp, #12]
 800582e:	4a2c      	ldr	r2, [pc, #176]	; (80058e0 <transfer_data.lto_priv.290+0x1f8>)
 8005830:	4694      	mov	ip, r2
 8005832:	22e6      	movs	r2, #230	; 0xe6
 8005834:	4463      	add	r3, ip
 8005836:	b29b      	uxth	r3, r3
 8005838:	0052      	lsls	r2, r2, #1
 800583a:	4293      	cmp	r3, r2
 800583c:	d924      	bls.n	8005888 <transfer_data.lto_priv.290+0x1a0>
 800583e:	f009 fdd5 	bl	800f3ec <__aeabi_ui2f>
 8005842:	21de      	movs	r1, #222	; 0xde
 8005844:	0589      	lsls	r1, r1, #22
 8005846:	f008 fe71 	bl	800e52c <__aeabi_fmul>
 800584a:	21fc      	movs	r1, #252	; 0xfc
 800584c:	0589      	lsls	r1, r1, #22
 800584e:	f008 ff9f 	bl	800e790 <__aeabi_fsub>
 8005852:	491f      	ldr	r1, [pc, #124]	; (80058d0 <transfer_data.lto_priv.290+0x1e8>)
 8005854:	f008 fe6a 	bl	800e52c <__aeabi_fmul>
 8005858:	491e      	ldr	r1, [pc, #120]	; (80058d4 <transfer_data.lto_priv.290+0x1ec>)
 800585a:	f008 fe67 	bl	800e52c <__aeabi_fmul>
 800585e:	9005      	str	r0, [sp, #20]
 8005860:	0038      	movs	r0, r7
 8005862:	f009 fd79 	bl	800f358 <__aeabi_i2f>
 8005866:	1c01      	adds	r1, r0, #0
 8005868:	9805      	ldr	r0, [sp, #20]
 800586a:	f008 fbb3 	bl	800dfd4 <__aeabi_fadd>
 800586e:	f009 fd53 	bl	800f318 <__aeabi_f2iz>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	b200      	sxth	r0, r0
 8005876:	3364      	adds	r3, #100	; 0x64
 8005878:	4298      	cmp	r0, r3
 800587a:	dd05      	ble.n	8005888 <transfer_data.lto_priv.290+0x1a0>
 800587c:	0022      	movs	r2, r4
 800587e:	2301      	movs	r3, #1
 8005880:	32bc      	adds	r2, #188	; 0xbc
 8005882:	6811      	ldr	r1, [r2, #0]
 8005884:	430b      	orrs	r3, r1
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	0023      	movs	r3, r4
 800588a:	33bc      	adds	r3, #188	; 0xbc
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2300      	movs	r3, #0
 8005890:	2a00      	cmp	r2, #0
 8005892:	d111      	bne.n	80058b8 <transfer_data.lto_priv.290+0x1d0>
 8005894:	2b02      	cmp	r3, #2
 8005896:	d800      	bhi.n	800589a <transfer_data.lto_priv.290+0x1b2>
 8005898:	e762      	b.n	8005760 <transfer_data.lto_priv.290+0x78>
 800589a:	4a09      	ldr	r2, [pc, #36]	; (80058c0 <transfer_data.lto_priv.290+0x1d8>)
 800589c:	0011      	movs	r1, r2
 800589e:	3130      	adds	r1, #48	; 0x30
 80058a0:	7809      	ldrb	r1, [r1, #0]
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d006      	beq.n	80058b4 <transfer_data.lto_priv.290+0x1cc>
 80058a6:	2105      	movs	r1, #5
 80058a8:	9100      	str	r1, [sp, #0]
 80058aa:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80058ac:	4905      	ldr	r1, [pc, #20]	; (80058c4 <transfer_data.lto_priv.290+0x1dc>)
 80058ae:	4a0d      	ldr	r2, [pc, #52]	; (80058e4 <transfer_data.lto_priv.290+0x1fc>)
 80058b0:	2001      	movs	r0, #1
 80058b2:	47b8      	blx	r7
 80058b4:	2301      	movs	r3, #1
 80058b6:	e754      	b.n	8005762 <transfer_data.lto_priv.290+0x7a>
 80058b8:	1e51      	subs	r1, r2, #1
 80058ba:	400a      	ands	r2, r1
 80058bc:	3301      	adds	r3, #1
 80058be:	e7e7      	b.n	8005890 <transfer_data.lto_priv.290+0x1a8>
 80058c0:	200003f0 	.word	0x200003f0
 80058c4:	0801c871 	.word	0x0801c871
 80058c8:	0801c85a 	.word	0x0801c85a
 80058cc:	080157a0 	.word	0x080157a0
 80058d0:	3f99999a 	.word	0x3f99999a
 80058d4:	447a0000 	.word	0x447a0000
 80058d8:	fffffd12 	.word	0xfffffd12
 80058dc:	00000217 	.word	0x00000217
 80058e0:	fffffcf4 	.word	0xfffffcf4
 80058e4:	0801c882 	.word	0x0801c882

080058e8 <inject_data.lto_priv.318.lto_priv.640>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	3038      	adds	r0, #56	; 0x38
 80058ec:	f008 fa9a 	bl	800de24 <acc_element_source_adc_inject_data>
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <inject_data.lto_priv.317.lto_priv.624>:
 80058f2:	b510      	push	{r4, lr}
 80058f4:	3038      	adds	r0, #56	; 0x38
 80058f6:	f008 fa95 	bl	800de24 <acc_element_source_adc_inject_data>
 80058fa:	bd10      	pop	{r4, pc}

080058fc <produce.lto_priv.320.lto_priv.639>:
 80058fc:	b510      	push	{r4, lr}
 80058fe:	0004      	movs	r4, r0
 8005900:	3038      	adds	r0, #56	; 0x38
 8005902:	f008 faa3 	bl	800de4c <acc_element_source_adc_produce>
 8005906:	2800      	cmp	r0, #0
 8005908:	d10c      	bne.n	8005924 <produce.lto_priv.320.lto_priv.639+0x28>
 800590a:	23e0      	movs	r3, #224	; 0xe0
 800590c:	2201      	movs	r2, #1
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	58e3      	ldr	r3, [r4, r3]
 8005912:	6158      	str	r0, [r3, #20]
 8005914:	7198      	strb	r0, [r3, #6]
 8005916:	715a      	strb	r2, [r3, #5]
 8005918:	23d2      	movs	r3, #210	; 0xd2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	18e0      	adds	r0, r4, r3
 800591e:	3304      	adds	r3, #4
 8005920:	58e3      	ldr	r3, [r4, r3]
 8005922:	4798      	blx	r3
 8005924:	bd10      	pop	{r4, pc}

08005926 <produce.lto_priv.319.lto_priv.623>:
 8005926:	b510      	push	{r4, lr}
 8005928:	0004      	movs	r4, r0
 800592a:	3038      	adds	r0, #56	; 0x38
 800592c:	f008 fa8e 	bl	800de4c <acc_element_source_adc_produce>
 8005930:	2800      	cmp	r0, #0
 8005932:	d10b      	bne.n	800594c <produce.lto_priv.319.lto_priv.623+0x26>
 8005934:	0023      	movs	r3, r4
 8005936:	33f0      	adds	r3, #240	; 0xf0
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2201      	movs	r2, #1
 800593c:	6158      	str	r0, [r3, #20]
 800593e:	7198      	strb	r0, [r3, #6]
 8005940:	0020      	movs	r0, r4
 8005942:	34bc      	adds	r4, #188	; 0xbc
 8005944:	715a      	strb	r2, [r3, #5]
 8005946:	30b8      	adds	r0, #184	; 0xb8
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	4798      	blx	r3
 800594c:	bd10      	pop	{r4, pc}

0800594e <acc_assert_fail>:
 800594e:	b513      	push	{r0, r1, r4, lr}
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <acc_assert_fail+0x16>)
 8005952:	9100      	str	r1, [sp, #0]
 8005954:	0003      	movs	r3, r0
 8005956:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005958:	4903      	ldr	r1, [pc, #12]	; (8005968 <acc_assert_fail+0x1a>)
 800595a:	4a04      	ldr	r2, [pc, #16]	; (800596c <acc_assert_fail+0x1e>)
 800595c:	2000      	movs	r0, #0
 800595e:	47a0      	blx	r4
 8005960:	e7fe      	b.n	8005960 <acc_assert_fail+0x12>
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	200003f0 	.word	0x200003f0
 8005968:	0801c8d2 	.word	0x0801c8d2
 800596c:	0801c8bd 	.word	0x0801c8bd

08005970 <do_phase_compensation_q3_12.lto_priv.254>:
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	4657      	mov	r7, sl
 8005974:	4645      	mov	r5, r8
 8005976:	46de      	mov	lr, fp
 8005978:	464e      	mov	r6, r9
 800597a:	b5e0      	push	{r5, r6, r7, lr}
 800597c:	4c6b      	ldr	r4, [pc, #428]	; (8005b2c <do_phase_compensation_q3_12.lto_priv.254+0x1bc>)
 800597e:	0017      	movs	r7, r2
 8005980:	44a5      	add	sp, r4
 8005982:	9102      	str	r1, [sp, #8]
 8005984:	4698      	mov	r8, r3
 8005986:	2a7c      	cmp	r2, #124	; 0x7c
 8005988:	d816      	bhi.n	80059b8 <do_phase_compensation_q3_12.lto_priv.254+0x48>
 800598a:	0093      	lsls	r3, r2, #2
 800598c:	469b      	mov	fp, r3
 800598e:	ab80      	add	r3, sp, #512	; 0x200
 8005990:	445b      	add	r3, fp
 8005992:	3bf7      	subs	r3, #247	; 0xf7
 8005994:	3bff      	subs	r3, #255	; 0xff
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	2300      	movs	r3, #0
 800599a:	0005      	movs	r5, r0
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	9a00      	ldr	r2, [sp, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d10c      	bne.n	80059c0 <do_phase_compensation_q3_12.lto_priv.254+0x50>
 80059a6:	2381      	movs	r3, #129	; 0x81
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	449d      	add	sp, r3
 80059ac:	bc3c      	pop	{r2, r3, r4, r5}
 80059ae:	4690      	mov	r8, r2
 80059b0:	4699      	mov	r9, r3
 80059b2:	46a2      	mov	sl, r4
 80059b4:	46ab      	mov	fp, r5
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	217d      	movs	r1, #125	; 0x7d
 80059ba:	485d      	ldr	r0, [pc, #372]	; (8005b30 <do_phase_compensation_q3_12.lto_priv.254+0x1c0>)
 80059bc:	f7ff ffc7 	bl	800594e <acc_assert_fail>
 80059c0:	465a      	mov	r2, fp
 80059c2:	0029      	movs	r1, r5
 80059c4:	a804      	add	r0, sp, #16
 80059c6:	f00f fe6d 	bl	80156a4 <memcpy>
 80059ca:	a980      	add	r1, sp, #512	; 0x200
 80059cc:	468c      	mov	ip, r1
 80059ce:	2200      	movs	r2, #0
 80059d0:	2401      	movs	r4, #1
 80059d2:	1e78      	subs	r0, r7, #1
 80059d4:	0083      	lsls	r3, r0, #2
 80059d6:	4463      	add	r3, ip
 80059d8:	3bf1      	subs	r3, #241	; 0xf1
 80059da:	3bff      	subs	r3, #255	; 0xff
 80059dc:	9204      	str	r2, [sp, #16]
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	aa04      	add	r2, sp, #16
 80059e2:	42a7      	cmp	r7, r4
 80059e4:	d80f      	bhi.n	8005a06 <do_phase_compensation_q3_12.lto_priv.254+0x96>
 80059e6:	9a01      	ldr	r2, [sp, #4]
 80059e8:	3a04      	subs	r2, #4
 80059ea:	3801      	subs	r0, #1
 80059ec:	d22e      	bcs.n	8005a4c <do_phase_compensation_q3_12.lto_priv.254+0xdc>
 80059ee:	2400      	movs	r4, #0
 80059f0:	45a3      	cmp	fp, r4
 80059f2:	d148      	bne.n	8005a86 <do_phase_compensation_q3_12.lto_priv.254+0x116>
 80059f4:	0029      	movs	r1, r5
 80059f6:	2200      	movs	r2, #0
 80059f8:	42a2      	cmp	r2, r4
 80059fa:	d172      	bne.n	8005ae2 <do_phase_compensation_q3_12.lto_priv.254+0x172>
 80059fc:	9b00      	ldr	r3, [sp, #0]
 80059fe:	18ad      	adds	r5, r5, r2
 8005a00:	3301      	adds	r3, #1
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	e7cb      	b.n	800599e <do_phase_compensation_q3_12.lto_priv.254+0x2e>
 8005a06:	2100      	movs	r1, #0
 8005a08:	5e53      	ldrsh	r3, [r2, r1]
 8005a0a:	3401      	adds	r4, #1
 8005a0c:	469c      	mov	ip, r3
 8005a0e:	2304      	movs	r3, #4
 8005a10:	5ed1      	ldrsh	r1, [r2, r3]
 8005a12:	4663      	mov	r3, ip
 8005a14:	1ac9      	subs	r1, r1, r3
 8005a16:	4643      	mov	r3, r8
 8005a18:	4359      	muls	r1, r3
 8005a1a:	17cb      	asrs	r3, r1, #31
 8005a1c:	051b      	lsls	r3, r3, #20
 8005a1e:	0d1b      	lsrs	r3, r3, #20
 8005a20:	185b      	adds	r3, r3, r1
 8005a22:	131b      	asrs	r3, r3, #12
 8005a24:	4463      	add	r3, ip
 8005a26:	8093      	strh	r3, [r2, #4]
 8005a28:	2102      	movs	r1, #2
 8005a2a:	5e53      	ldrsh	r3, [r2, r1]
 8005a2c:	3204      	adds	r2, #4
 8005a2e:	469c      	mov	ip, r3
 8005a30:	2302      	movs	r3, #2
 8005a32:	5ed1      	ldrsh	r1, [r2, r3]
 8005a34:	4663      	mov	r3, ip
 8005a36:	1ac9      	subs	r1, r1, r3
 8005a38:	4643      	mov	r3, r8
 8005a3a:	4359      	muls	r1, r3
 8005a3c:	17cb      	asrs	r3, r1, #31
 8005a3e:	051b      	lsls	r3, r3, #20
 8005a40:	0d1b      	lsrs	r3, r3, #20
 8005a42:	185b      	adds	r3, r3, r1
 8005a44:	131b      	asrs	r3, r3, #12
 8005a46:	4463      	add	r3, ip
 8005a48:	8053      	strh	r3, [r2, #2]
 8005a4a:	e7ca      	b.n	80059e2 <do_phase_compensation_q3_12.lto_priv.254+0x72>
 8005a4c:	2306      	movs	r3, #6
 8005a4e:	5ed1      	ldrsh	r1, [r2, r3]
 8005a50:	2302      	movs	r3, #2
 8005a52:	5ed4      	ldrsh	r4, [r2, r3]
 8005a54:	4643      	mov	r3, r8
 8005a56:	1a64      	subs	r4, r4, r1
 8005a58:	435c      	muls	r4, r3
 8005a5a:	17e3      	asrs	r3, r4, #31
 8005a5c:	051b      	lsls	r3, r3, #20
 8005a5e:	0d1b      	lsrs	r3, r3, #20
 8005a60:	191b      	adds	r3, r3, r4
 8005a62:	131b      	asrs	r3, r3, #12
 8005a64:	185b      	adds	r3, r3, r1
 8005a66:	8053      	strh	r3, [r2, #2]
 8005a68:	2308      	movs	r3, #8
 8005a6a:	5ed1      	ldrsh	r1, [r2, r3]
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	5ed4      	ldrsh	r4, [r2, r3]
 8005a70:	4643      	mov	r3, r8
 8005a72:	1a64      	subs	r4, r4, r1
 8005a74:	435c      	muls	r4, r3
 8005a76:	17e3      	asrs	r3, r4, #31
 8005a78:	051b      	lsls	r3, r3, #20
 8005a7a:	0d1b      	lsrs	r3, r3, #20
 8005a7c:	191b      	adds	r3, r3, r4
 8005a7e:	131b      	asrs	r3, r3, #12
 8005a80:	185b      	adds	r3, r3, r1
 8005a82:	8093      	strh	r3, [r2, #4]
 8005a84:	e7b0      	b.n	80059e8 <do_phase_compensation_q3_12.lto_priv.254+0x78>
 8005a86:	a904      	add	r1, sp, #16
 8005a88:	468c      	mov	ip, r1
 8005a8a:	0022      	movs	r2, r4
 8005a8c:	4462      	add	r2, ip
 8005a8e:	8850      	ldrh	r0, [r2, #2]
 8005a90:	ab04      	add	r3, sp, #16
 8005a92:	5b1b      	ldrh	r3, [r3, r4]
 8005a94:	0400      	lsls	r0, r0, #16
 8005a96:	4318      	orrs	r0, r3
 8005a98:	f006 ff46 	bl	800c928 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d01d      	beq.n	8005ade <do_phase_compensation_q3_12.lto_priv.254+0x16e>
 8005aa2:	ab04      	add	r3, sp, #16
 8005aa4:	5ee0      	ldrsh	r0, [r4, r3]
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	0300      	lsls	r0, r0, #12
 8005aaa:	f009 f8fb 	bl	800eca4 <__divsi3>
 8005aae:	aa04      	add	r2, sp, #16
 8005ab0:	b203      	sxth	r3, r0
 8005ab2:	4694      	mov	ip, r2
 8005ab4:	469a      	mov	sl, r3
 8005ab6:	0023      	movs	r3, r4
 8005ab8:	4463      	add	r3, ip
 8005aba:	2002      	movs	r0, #2
 8005abc:	5e18      	ldrsh	r0, [r3, r0]
 8005abe:	4649      	mov	r1, r9
 8005ac0:	0300      	lsls	r0, r0, #12
 8005ac2:	4240      	negs	r0, r0
 8005ac4:	f009 f8ee 	bl	800eca4 <__divsi3>
 8005ac8:	b200      	sxth	r0, r0
 8005aca:	aa04      	add	r2, sp, #16
 8005acc:	0023      	movs	r3, r4
 8005ace:	4694      	mov	ip, r2
 8005ad0:	4463      	add	r3, ip
 8005ad2:	8058      	strh	r0, [r3, #2]
 8005ad4:	0013      	movs	r3, r2
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	52e2      	strh	r2, [r4, r3]
 8005ada:	3404      	adds	r4, #4
 8005adc:	e788      	b.n	80059f0 <do_phase_compensation_q3_12.lto_priv.254+0x80>
 8005ade:	4682      	mov	sl, r0
 8005ae0:	e7f3      	b.n	8005aca <do_phase_compensation_q3_12.lto_priv.254+0x15a>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	5e0b      	ldrsh	r3, [r1, r0]
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	ab04      	add	r3, sp, #16
 8005aea:	5ed3      	ldrsh	r3, [r2, r3]
 8005aec:	2602      	movs	r6, #2
 8005aee:	5f88      	ldrsh	r0, [r1, r6]
 8005af0:	ae04      	add	r6, sp, #16
 8005af2:	46b4      	mov	ip, r6
 8005af4:	4682      	mov	sl, r0
 8005af6:	0010      	movs	r0, r2
 8005af8:	4460      	add	r0, ip
 8005afa:	2602      	movs	r6, #2
 8005afc:	5f80      	ldrsh	r0, [r0, r6]
 8005afe:	3204      	adds	r2, #4
 8005b00:	4684      	mov	ip, r0
 8005b02:	4648      	mov	r0, r9
 8005b04:	4358      	muls	r0, r3
 8005b06:	4666      	mov	r6, ip
 8005b08:	9003      	str	r0, [sp, #12]
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	4370      	muls	r0, r6
 8005b0e:	9e03      	ldr	r6, [sp, #12]
 8005b10:	1a30      	subs	r0, r6, r0
 8005b12:	1300      	asrs	r0, r0, #12
 8005b14:	8008      	strh	r0, [r1, #0]
 8005b16:	4650      	mov	r0, sl
 8005b18:	4666      	mov	r6, ip
 8005b1a:	4343      	muls	r3, r0
 8005b1c:	4648      	mov	r0, r9
 8005b1e:	4370      	muls	r0, r6
 8005b20:	181b      	adds	r3, r3, r0
 8005b22:	131b      	asrs	r3, r3, #12
 8005b24:	804b      	strh	r3, [r1, #2]
 8005b26:	3104      	adds	r1, #4
 8005b28:	e766      	b.n	80059f8 <do_phase_compensation_q3_12.lto_priv.254+0x88>
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	fffffdfc 	.word	0xfffffdfc
 8005b30:	0801c8dd 	.word	0x0801c8dd

08005b34 <get_package_range_coarse_max>:
 8005b34:	0003      	movs	r3, r0
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	33cc      	adds	r3, #204	; 0xcc
 8005b3a:	881d      	ldrh	r5, [r3, #0]
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	d104      	bne.n	8005b4c <get_package_range_coarse_max+0x18>
 8005b42:	2158      	movs	r1, #88	; 0x58
 8005b44:	480c      	ldr	r0, [pc, #48]	; (8005b78 <get_package_range_coarse_max+0x44>)
 8005b46:	31ff      	adds	r1, #255	; 0xff
 8005b48:	f7ff ff01 	bl	800594e <acc_assert_fail>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	2480      	movs	r4, #128	; 0x80
 8005b50:	33ce      	adds	r3, #206	; 0xce
 8005b52:	4669      	mov	r1, sp
 8005b54:	881e      	ldrh	r6, [r3, #0]
 8005b56:	f007 fad5 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 8005b5a:	9b00      	ldr	r3, [sp, #0]
 8005b5c:	0029      	movs	r1, r5
 8005b5e:	0124      	lsls	r4, r4, #4
 8005b60:	207c      	movs	r0, #124	; 0x7c
 8005b62:	1ae4      	subs	r4, r4, r3
 8005b64:	f009 f814 	bl	800eb90 <__udivsi3>
 8005b68:	1ba4      	subs	r4, r4, r6
 8005b6a:	0001      	movs	r1, r0
 8005b6c:	0020      	movs	r0, r4
 8005b6e:	f009 f80f 	bl	800eb90 <__udivsi3>
 8005b72:	b006      	add	sp, #24
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	0801c828 	.word	0x0801c828

08005b7c <coarse_count_for_next_package>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	0004      	movs	r4, r0
 8005b80:	6940      	ldr	r0, [r0, #20]
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	0002      	movs	r2, r0
 8005b86:	32c2      	adds	r2, #194	; 0xc2
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	8812      	ldrh	r2, [r2, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d002      	beq.n	8005b98 <coarse_count_for_next_package+0x1c>
 8005b92:	f7ff ffcf 	bl	8005b34 <get_package_range_coarse_max>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	8965      	ldrh	r5, [r4, #10]
 8005b9a:	f7ff ffcb 	bl	8005b34 <get_package_range_coarse_max>
 8005b9e:	0001      	movs	r1, r0
 8005ba0:	0028      	movs	r0, r5
 8005ba2:	f009 f87b 	bl	800ec9c <__aeabi_uidivmod>
 8005ba6:	1e08      	subs	r0, r1, #0
 8005ba8:	d1f5      	bne.n	8005b96 <coarse_count_for_next_package+0x1a>
 8005baa:	6960      	ldr	r0, [r4, #20]
 8005bac:	e7f1      	b.n	8005b92 <coarse_count_for_next_package+0x16>

08005bae <update_program.lto_priv.286>:
 8005bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb0:	4657      	mov	r7, sl
 8005bb2:	464e      	mov	r6, r9
 8005bb4:	4645      	mov	r5, r8
 8005bb6:	46de      	mov	lr, fp
 8005bb8:	b5e0      	push	{r5, r6, r7, lr}
 8005bba:	6944      	ldr	r4, [r0, #20]
 8005bbc:	000f      	movs	r7, r1
 8005bbe:	0006      	movs	r6, r0
 8005bc0:	8981      	ldrh	r1, [r0, #12]
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	4288      	cmp	r0, r1
 8005bc6:	419b      	sbcs	r3, r3
 8005bc8:	425b      	negs	r3, r3
 8005bca:	4698      	mov	r8, r3
 8005bcc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005bce:	b085      	sub	sp, #20
 8005bd0:	425a      	negs	r2, r3
 8005bd2:	4153      	adcs	r3, r2
 8005bd4:	22c0      	movs	r2, #192	; 0xc0
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	44a1      	add	r9, r4
 8005bda:	464a      	mov	r2, r9
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	001d      	movs	r5, r3
 8005be0:	7812      	ldrb	r2, [r2, #0]
 8005be2:	433a      	orrs	r2, r7
 8005be4:	4055      	eors	r5, r2
 8005be6:	46aa      	mov	sl, r5
 8005be8:	4281      	cmp	r1, r0
 8005bea:	d808      	bhi.n	8005bfe <update_program.lto_priv.286+0x50>
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d136      	bne.n	8005c5e <update_program.lto_priv.286+0xb0>
 8005bf0:	b005      	add	sp, #20
 8005bf2:	bc3c      	pop	{r2, r3, r4, r5}
 8005bf4:	4690      	mov	r8, r2
 8005bf6:	4699      	mov	r9, r3
 8005bf8:	46a2      	mov	sl, r4
 8005bfa:	46ab      	mov	fp, r5
 8005bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfe:	0025      	movs	r5, r4
 8005c00:	35c2      	adds	r5, #194	; 0xc2
 8005c02:	8828      	ldrh	r0, [r5, #0]
 8005c04:	3001      	adds	r0, #1
 8005c06:	b280      	uxth	r0, r0
 8005c08:	f009 f848 	bl	800ec9c <__aeabi_uidivmod>
 8005c0c:	b28b      	uxth	r3, r1
 8005c0e:	469b      	mov	fp, r3
 8005c10:	802b      	strh	r3, [r5, #0]
 8005c12:	0020      	movs	r0, r4
 8005c14:	2308      	movs	r3, #8
 8005c16:	5ef5      	ldrsh	r5, [r6, r3]
 8005c18:	f7ff ff8c 	bl	8005b34 <get_package_range_coarse_max>
 8005c1c:	465b      	mov	r3, fp
 8005c1e:	4358      	muls	r0, r3
 8005c20:	1945      	adds	r5, r0, r5
 8005c22:	0030      	movs	r0, r6
 8005c24:	f7ff ffaa 	bl	8005b7c <coarse_count_for_next_package>
 8005c28:	0023      	movs	r3, r4
 8005c2a:	33c8      	adds	r3, #200	; 0xc8
 8005c2c:	6018      	str	r0, [r3, #0]
 8005c2e:	466b      	mov	r3, sp
 8005c30:	4642      	mov	r2, r8
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	705a      	strb	r2, [r3, #1]
 8005c36:	4652      	mov	r2, sl
 8005c38:	709a      	strb	r2, [r3, #2]
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	3801      	subs	r0, #1
 8005c3e:	9001      	str	r0, [sp, #4]
 8005c40:	9502      	str	r5, [sp, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	4669      	mov	r1, sp
 8005c46:	431f      	orrs	r7, r3
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6830      	ldr	r0, [r6, #0]
 8005c4c:	405f      	eors	r7, r3
 8005c4e:	9703      	str	r7, [sp, #12]
 8005c50:	f007 fa6e 	bl	800d130 <acc_cpd_linear_sweep_update_program>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d0cb      	beq.n	8005bf0 <update_program.lto_priv.286+0x42>
 8005c58:	9b03      	ldr	r3, [sp, #12]
 8005c5a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005c5c:	e7c8      	b.n	8005bf0 <update_program.lto_priv.286+0x42>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	0005      	movs	r5, r0
 8005c62:	e7e4      	b.n	8005c2e <update_program.lto_priv.286+0x80>

08005c64 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	b085      	sub	sp, #20
 8005c68:	ae03      	add	r6, sp, #12
 8005c6a:	0015      	movs	r5, r2
 8005c6c:	0032      	movs	r2, r6
 8005c6e:	0004      	movs	r4, r0
 8005c70:	001f      	movs	r7, r3
 8005c72:	f007 f8d1 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d00d      	beq.n	8005c96 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005c7a:	7832      	ldrb	r2, [r6, #0]
 8005c7c:	42aa      	cmp	r2, r5
 8005c7e:	d00c      	beq.n	8005c9a <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 8005c80:	9200      	str	r2, [sp, #0]
 8005c82:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8005c84:	4a09      	ldr	r2, [pc, #36]	; (8005cac <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8005c86:	9501      	str	r5, [sp, #4]
 8005c88:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	3378      	adds	r3, #120	; 0x78
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8005c90:	4908      	ldr	r1, [pc, #32]	; (8005cb4 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8005c92:	47a0      	blx	r4
 8005c94:	2000      	movs	r0, #0
 8005c96:	b005      	add	sp, #20
 8005c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	d0fb      	beq.n	8005c96 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f7ff fbcc 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 8005ca4:	e7f7      	b.n	8005c96 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	080157a0 	.word	0x080157a0
 8005cac:	200003f0 	.word	0x200003f0
 8005cb0:	0801c910 	.word	0x0801c910
 8005cb4:	0801c6e8 	.word	0x0801c6e8

08005cb8 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	2301      	movs	r3, #1
 8005cbc:	220b      	movs	r2, #11
 8005cbe:	f7ff ffd1 	bl	8005c64 <acc_sensor_protocol_r2_wait_for_specific_event>
 8005cc2:	bd10      	pop	{r4, pc}

08005cc4 <acc_sensor_protocol_r2_is_sensor_running>:
 8005cc4:	b513      	push	{r0, r1, r4, lr}
 8005cc6:	466b      	mov	r3, sp
 8005cc8:	1d9c      	adds	r4, r3, #6
 8005cca:	2300      	movs	r3, #0
 8005ccc:	0022      	movs	r2, r4
 8005cce:	2111      	movs	r1, #17
 8005cd0:	8023      	strh	r3, [r4, #0]
 8005cd2:	f006 fe5d 	bl	800c990 <internal_reg_read.lto_priv.618>
 8005cd6:	8820      	ldrh	r0, [r4, #0]
 8005cd8:	0540      	lsls	r0, r0, #21
 8005cda:	0fc0      	lsrs	r0, r0, #31
 8005cdc:	bd16      	pop	{r1, r2, r4, pc}

08005cde <acc_sensor_protocol_r2_run_program>:
 8005cde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce0:	4d15      	ldr	r5, [pc, #84]	; (8005d38 <acc_sensor_protocol_r2_run_program+0x5a>)
 8005ce2:	0004      	movs	r4, r0
 8005ce4:	002b      	movs	r3, r5
 8005ce6:	3330      	adds	r3, #48	; 0x30
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	000e      	movs	r6, r1
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d906      	bls.n	8005cfe <acc_sensor_protocol_r2_run_program+0x20>
 8005cf0:	9100      	str	r1, [sp, #0]
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	4a11      	ldr	r2, [pc, #68]	; (8005d3c <acc_sensor_protocol_r2_run_program+0x5e>)
 8005cf6:	4912      	ldr	r1, [pc, #72]	; (8005d40 <acc_sensor_protocol_r2_run_program+0x62>)
 8005cf8:	2004      	movs	r0, #4
 8005cfa:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8005cfc:	47b8      	blx	r7
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f7ff ffe0 	bl	8005cc4 <acc_sensor_protocol_r2_is_sensor_running>
 8005d04:	1e02      	subs	r2, r0, #0
 8005d06:	d00a      	beq.n	8005d1e <acc_sensor_protocol_r2_run_program+0x40>
 8005d08:	0023      	movs	r3, r4
 8005d0a:	4a0e      	ldr	r2, [pc, #56]	; (8005d44 <acc_sensor_protocol_r2_run_program+0x66>)
 8005d0c:	490c      	ldr	r1, [pc, #48]	; (8005d40 <acc_sensor_protocol_r2_run_program+0x62>)
 8005d0e:	2000      	movs	r0, #0
 8005d10:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005d12:	47a8      	blx	r5
 8005d14:	0020      	movs	r0, r4
 8005d16:	f006 fe62 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d1e:	2110      	movs	r1, #16
 8005d20:	0020      	movs	r0, r4
 8005d22:	f004 ffc3 	bl	800acac <acc_sensor_reg_write>
 8005d26:	2280      	movs	r2, #128	; 0x80
 8005d28:	00d2      	lsls	r2, r2, #3
 8005d2a:	0020      	movs	r0, r4
 8005d2c:	4332      	orrs	r2, r6
 8005d2e:	2110      	movs	r1, #16
 8005d30:	f004 ffbc 	bl	800acac <acc_sensor_reg_write>
 8005d34:	2001      	movs	r0, #1
 8005d36:	e7f1      	b.n	8005d1c <acc_sensor_protocol_r2_run_program+0x3e>
 8005d38:	200003f0 	.word	0x200003f0
 8005d3c:	0801c93b 	.word	0x0801c93b
 8005d40:	0801c6e8 	.word	0x0801c6e8
 8005d44:	0801c95e 	.word	0x0801c95e

08005d48 <start.lto_priv.292>:
 8005d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4a:	464f      	mov	r7, r9
 8005d4c:	46d6      	mov	lr, sl
 8005d4e:	4646      	mov	r6, r8
 8005d50:	6944      	ldr	r4, [r0, #20]
 8005d52:	2300      	movs	r3, #0
 8005d54:	0022      	movs	r2, r4
 8005d56:	b5c0      	push	{r6, r7, lr}
 8005d58:	32c2      	adds	r2, #194	; 0xc2
 8005d5a:	8013      	strh	r3, [r2, #0]
 8005d5c:	8053      	strh	r3, [r2, #2]
 8005d5e:	8093      	strh	r3, [r2, #4]
 8005d60:	3a16      	subs	r2, #22
 8005d62:	7812      	ldrb	r2, [r2, #0]
 8005d64:	b084      	sub	sp, #16
 8005d66:	4692      	mov	sl, r2
 8005d68:	0022      	movs	r2, r4
 8005d6a:	32b4      	adds	r2, #180	; 0xb4
 8005d6c:	6812      	ldr	r2, [r2, #0]
 8005d6e:	0007      	movs	r7, r0
 8005d70:	4691      	mov	r9, r2
 8005d72:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005d74:	000d      	movs	r5, r1
 8005d76:	4690      	mov	r8, r2
 8005d78:	464a      	mov	r2, r9
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d003      	beq.n	8005d86 <start.lto_priv.292+0x3e>
 8005d7e:	4652      	mov	r2, sl
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d000      	beq.n	8005d86 <start.lto_priv.292+0x3e>
 8005d84:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005d86:	0038      	movs	r0, r7
 8005d88:	f7ff fef8 	bl	8005b7c <coarse_count_for_next_package>
 8005d8c:	0023      	movs	r3, r4
 8005d8e:	4e2c      	ldr	r6, [pc, #176]	; (8005e40 <start.lto_priv.292+0xf8>)
 8005d90:	33c8      	adds	r3, #200	; 0xc8
 8005d92:	6018      	str	r0, [r3, #0]
 8005d94:	0033      	movs	r3, r6
 8005d96:	3330      	adds	r3, #48	; 0x30
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d904      	bls.n	8005da8 <start.lto_priv.292+0x60>
 8005d9e:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <start.lto_priv.292+0xfc>)
 8005da0:	4929      	ldr	r1, [pc, #164]	; (8005e48 <start.lto_priv.292+0x100>)
 8005da2:	2004      	movs	r0, #4
 8005da4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005da6:	4798      	blx	r3
 8005da8:	cd06      	ldmia	r5!, {r1, r2}
 8005daa:	0023      	movs	r3, r4
 8005dac:	6838      	ldr	r0, [r7, #0]
 8005dae:	f007 f9f7 	bl	800d1a0 <acc_cpd_linear_sweep_load_program>
 8005db2:	1e05      	subs	r5, r0, #0
 8005db4:	d10a      	bne.n	8005dcc <start.lto_priv.292+0x84>
 8005db6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005db8:	4a24      	ldr	r2, [pc, #144]	; (8005e4c <start.lto_priv.292+0x104>)
 8005dba:	4923      	ldr	r1, [pc, #140]	; (8005e48 <start.lto_priv.292+0x100>)
 8005dbc:	4798      	blx	r3
 8005dbe:	0028      	movs	r0, r5
 8005dc0:	b004      	add	sp, #16
 8005dc2:	bc1c      	pop	{r2, r3, r4}
 8005dc4:	4690      	mov	r8, r2
 8005dc6:	4699      	mov	r9, r3
 8005dc8:	46a2      	mov	sl, r4
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dcc:	4920      	ldr	r1, [pc, #128]	; (8005e50 <start.lto_priv.292+0x108>)
 8005dce:	6838      	ldr	r0, [r7, #0]
 8005dd0:	f7ff ff85 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 8005dd4:	1e05      	subs	r5, r0, #0
 8005dd6:	d101      	bne.n	8005ddc <start.lto_priv.292+0x94>
 8005dd8:	2500      	movs	r5, #0
 8005dda:	e7f0      	b.n	8005dbe <start.lto_priv.292+0x76>
 8005ddc:	4653      	mov	r3, sl
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d023      	beq.n	8005e2a <start.lto_priv.292+0xe2>
 8005de2:	6939      	ldr	r1, [r7, #16]
 8005de4:	6838      	ldr	r0, [r7, #0]
 8005de6:	f7ff fab3 	bl	8005350 <acc_sensor_protocol_r2_wait_for_sync_start>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d0f4      	beq.n	8005dd8 <start.lto_priv.292+0x90>
 8005dee:	0033      	movs	r3, r6
 8005df0:	3330      	adds	r3, #48	; 0x30
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d904      	bls.n	8005e02 <start.lto_priv.292+0xba>
 8005df8:	4a16      	ldr	r2, [pc, #88]	; (8005e54 <start.lto_priv.292+0x10c>)
 8005dfa:	4913      	ldr	r1, [pc, #76]	; (8005e48 <start.lto_priv.292+0x100>)
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005e00:	4798      	blx	r3
 8005e02:	464b      	mov	r3, r9
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d010      	beq.n	8005e2a <start.lto_priv.292+0xe2>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	466a      	mov	r2, sp
 8005e0c:	9301      	str	r3, [sp, #4]
 8005e0e:	7013      	strb	r3, [r2, #0]
 8005e10:	7053      	strb	r3, [r2, #1]
 8005e12:	9302      	str	r3, [sp, #8]
 8005e14:	4643      	mov	r3, r8
 8005e16:	2201      	movs	r2, #1
 8005e18:	4669      	mov	r1, sp
 8005e1a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005e1c:	6838      	ldr	r0, [r7, #0]
 8005e1e:	708a      	strb	r2, [r1, #2]
 8005e20:	9303      	str	r3, [sp, #12]
 8005e22:	f007 f985 	bl	800d130 <acc_cpd_linear_sweep_update_program>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d0d6      	beq.n	8005dd8 <start.lto_priv.292+0x90>
 8005e2a:	0033      	movs	r3, r6
 8005e2c:	3330      	adds	r3, #48	; 0x30
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d9c4      	bls.n	8005dbe <start.lto_priv.292+0x76>
 8005e34:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005e36:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <start.lto_priv.292+0x110>)
 8005e38:	4903      	ldr	r1, [pc, #12]	; (8005e48 <start.lto_priv.292+0x100>)
 8005e3a:	2004      	movs	r0, #4
 8005e3c:	4798      	blx	r3
 8005e3e:	e7be      	b.n	8005dbe <start.lto_priv.292+0x76>
 8005e40:	200003f0 	.word	0x200003f0
 8005e44:	0801c98d 	.word	0x0801c98d
 8005e48:	0801c9b2 	.word	0x0801c9b2
 8005e4c:	0801c9c6 	.word	0x0801c9c6
 8005e50:	0000023a 	.word	0x0000023a
 8005e54:	0801c9e0 	.word	0x0801c9e0
 8005e58:	0801ca04 	.word	0x0801ca04

08005e5c <measure_noise.lto_priv.279>:
 8005e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5e:	464e      	mov	r6, r9
 8005e60:	46de      	mov	lr, fp
 8005e62:	4657      	mov	r7, sl
 8005e64:	4645      	mov	r5, r8
 8005e66:	b5e0      	push	{r5, r6, r7, lr}
 8005e68:	4e4a      	ldr	r6, [pc, #296]	; (8005f94 <measure_noise.lto_priv.279+0x138>)
 8005e6a:	b0b9      	sub	sp, #228	; 0xe4
 8005e6c:	0033      	movs	r3, r6
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	3330      	adds	r3, #48	; 0x30
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	0004      	movs	r4, r0
 8005e76:	4689      	mov	r9, r1
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d904      	bls.n	8005e86 <measure_noise.lto_priv.279+0x2a>
 8005e7c:	4a46      	ldr	r2, [pc, #280]	; (8005f98 <measure_noise.lto_priv.279+0x13c>)
 8005e7e:	4947      	ldr	r1, [pc, #284]	; (8005f9c <measure_noise.lto_priv.279+0x140>)
 8005e80:	2004      	movs	r0, #4
 8005e82:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005e84:	4798      	blx	r3
 8005e86:	6967      	ldr	r7, [r4, #20]
 8005e88:	22bc      	movs	r2, #188	; 0xbc
 8005e8a:	0039      	movs	r1, r7
 8005e8c:	a809      	add	r0, sp, #36	; 0x24
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	f00f fc08 	bl	80156a4 <memcpy>
 8005e94:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8005e96:	2400      	movs	r4, #0
 8005e98:	4698      	mov	r8, r3
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	932e      	str	r3, [sp, #184]	; 0xb8
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	931f      	str	r3, [sp, #124]	; 0x7c
 8005ea6:	ab34      	add	r3, sp, #208	; 0xd0
 8005ea8:	701c      	strb	r4, [r3, #0]
 8005eaa:	003b      	movs	r3, r7
 8005eac:	922f      	str	r2, [sp, #188]	; 0xbc
 8005eae:	4649      	mov	r1, r9
 8005eb0:	464a      	mov	r2, r9
 8005eb2:	9424      	str	r4, [sp, #144]	; 0x90
 8005eb4:	941e      	str	r4, [sp, #120]	; 0x78
 8005eb6:	9436      	str	r4, [sp, #216]	; 0xd8
 8005eb8:	33cc      	adds	r3, #204	; 0xcc
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	6852      	ldr	r2, [r2, #4]
 8005ebe:	6809      	ldr	r1, [r1, #0]
 8005ec0:	469b      	mov	fp, r3
 8005ec2:	0028      	movs	r0, r5
 8005ec4:	ab09      	add	r3, sp, #36	; 0x24
 8005ec6:	f007 f96b 	bl	800d1a0 <acc_cpd_linear_sweep_load_program>
 8005eca:	4935      	ldr	r1, [pc, #212]	; (8005fa0 <measure_noise.lto_priv.279+0x144>)
 8005ecc:	0028      	movs	r0, r5
 8005ece:	f7ff ff06 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 8005ed2:	21fa      	movs	r1, #250	; 0xfa
 8005ed4:	aa02      	add	r2, sp, #8
 8005ed6:	00c9      	lsls	r1, r1, #3
 8005ed8:	0028      	movs	r0, r5
 8005eda:	f006 ff9d 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005ede:	4682      	mov	sl, r0
 8005ee0:	42a0      	cmp	r0, r4
 8005ee2:	d040      	beq.n	8005f66 <measure_noise.lto_priv.279+0x10a>
 8005ee4:	4643      	mov	r3, r8
 8005ee6:	049b      	lsls	r3, r3, #18
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	4698      	mov	r8, r3
 8005eec:	4659      	mov	r1, fp
 8005eee:	207c      	movs	r0, #124	; 0x7c
 8005ef0:	f008 fe4e 	bl	800eb90 <__udivsi3>
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	4343      	muls	r3, r0
 8005ef8:	4698      	mov	r8, r3
 8005efa:	464b      	mov	r3, r9
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	a903      	add	r1, sp, #12
 8005f00:	4699      	mov	r9, r3
 8005f02:	0038      	movs	r0, r7
 8005f04:	f007 f8fe 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 8005f08:	9b03      	ldr	r3, [sp, #12]
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4443      	add	r3, r8
 8005f0e:	001a      	movs	r2, r3
 8005f10:	0028      	movs	r0, r5
 8005f12:	f7ff fa0f 	bl	8005334 <acc_sensor_protocol_r2_transfer_data>
 8005f16:	4681      	mov	r9, r0
 8005f18:	0028      	movs	r0, r5
 8005f1a:	f007 f82f 	bl	800cf7c <acc_sensor_protocol_r2_stop.constprop.25>
 8005f1e:	0038      	movs	r0, r7
 8005f20:	a903      	add	r1, sp, #12
 8005f22:	f007 f8ef 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	0020      	movs	r0, r4
 8005f2a:	005d      	lsls	r5, r3, #1
 8005f2c:	230e      	movs	r3, #14
 8005f2e:	444d      	add	r5, r9
 8005f30:	4598      	cmp	r8, r3
 8005f32:	d820      	bhi.n	8005f76 <measure_noise.lto_priv.279+0x11a>
 8005f34:	4644      	mov	r4, r8
 8005f36:	3c0e      	subs	r4, #14
 8005f38:	0021      	movs	r1, r4
 8005f3a:	f008 fe29 	bl	800eb90 <__udivsi3>
 8005f3e:	220e      	movs	r2, #14
 8005f40:	0001      	movs	r1, r0
 8005f42:	2000      	movs	r0, #0
 8005f44:	4590      	cmp	r8, r2
 8005f46:	d81b      	bhi.n	8005f80 <measure_noise.lto_priv.279+0x124>
 8005f48:	0021      	movs	r1, r4
 8005f4a:	f008 fe21 	bl	800eb90 <__udivsi3>
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	8018      	strh	r0, [r3, #0]
 8005f52:	0033      	movs	r3, r6
 8005f54:	3330      	adds	r3, #48	; 0x30
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d904      	bls.n	8005f66 <measure_noise.lto_priv.279+0x10a>
 8005f5c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005f5e:	4a11      	ldr	r2, [pc, #68]	; (8005fa4 <measure_noise.lto_priv.279+0x148>)
 8005f60:	490e      	ldr	r1, [pc, #56]	; (8005f9c <measure_noise.lto_priv.279+0x140>)
 8005f62:	2004      	movs	r0, #4
 8005f64:	4798      	blx	r3
 8005f66:	4650      	mov	r0, sl
 8005f68:	b039      	add	sp, #228	; 0xe4
 8005f6a:	bc3c      	pop	{r2, r3, r4, r5}
 8005f6c:	4690      	mov	r8, r2
 8005f6e:	4699      	mov	r9, r3
 8005f70:	46a2      	mov	sl, r4
 8005f72:	46ab      	mov	fp, r5
 8005f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f76:	005a      	lsls	r2, r3, #1
 8005f78:	5aaa      	ldrh	r2, [r5, r2]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	1880      	adds	r0, r0, r2
 8005f7e:	e7d7      	b.n	8005f30 <measure_noise.lto_priv.279+0xd4>
 8005f80:	0053      	lsls	r3, r2, #1
 8005f82:	5aeb      	ldrh	r3, [r5, r3]
 8005f84:	3201      	adds	r2, #1
 8005f86:	1a5b      	subs	r3, r3, r1
 8005f88:	17df      	asrs	r7, r3, #31
 8005f8a:	19db      	adds	r3, r3, r7
 8005f8c:	407b      	eors	r3, r7
 8005f8e:	18c0      	adds	r0, r0, r3
 8005f90:	e7d8      	b.n	8005f44 <measure_noise.lto_priv.279+0xe8>
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	200003f0 	.word	0x200003f0
 8005f98:	0801ca27 	.word	0x0801ca27
 8005f9c:	0801c9b2 	.word	0x0801c9b2
 8005fa0:	0000023a 	.word	0x0000023a
 8005fa4:	0801ca48 	.word	0x0801ca48

08005fa8 <acc_sensor_manager_hibernate_enter.lto_priv.251>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005fac:	6985      	ldr	r5, [r0, #24]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	6841      	ldr	r1, [r0, #4]
 8005fb2:	0028      	movs	r0, r5
 8005fb4:	4798      	blx	r3
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <acc_sensor_manager_hibernate_enter.lto_priv.251+0x2c>)
 8005fb8:	1e04      	subs	r4, r0, #0
 8005fba:	d105      	bne.n	8005fc8 <acc_sensor_manager_hibernate_enter.lto_priv.251+0x20>
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <acc_sensor_manager_hibernate_enter.lto_priv.251+0x30>)
 8005fc0:	4906      	ldr	r1, [pc, #24]	; (8005fdc <acc_sensor_manager_hibernate_enter.lto_priv.251+0x34>)
 8005fc2:	4798      	blx	r3
 8005fc4:	0020      	movs	r0, r4
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0fa      	beq.n	8005fc4 <acc_sensor_manager_hibernate_enter.lto_priv.251+0x1c>
 8005fce:	0028      	movs	r0, r5
 8005fd0:	4798      	blx	r3
 8005fd2:	e7f7      	b.n	8005fc4 <acc_sensor_manager_hibernate_enter.lto_priv.251+0x1c>
 8005fd4:	200003f0 	.word	0x200003f0
 8005fd8:	0801ca67 	.word	0x0801ca67
 8005fdc:	0801ca87 	.word	0x0801ca87

08005fe0 <acc_rss_integration_mem_free>:
 8005fe0:	b510      	push	{r4, lr}
 8005fe2:	4b02      	ldr	r3, [pc, #8]	; (8005fec <acc_rss_integration_mem_free+0xc>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4798      	blx	r3
 8005fe8:	bd10      	pop	{r4, pc}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	200003f0 	.word	0x200003f0

08005ff0 <destroy.lto_priv.311>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	0004      	movs	r4, r0
 8005ff4:	6940      	ldr	r0, [r0, #20]
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d003      	beq.n	8006002 <destroy.lto_priv.311+0x12>
 8005ffa:	f7ff fff1 	bl	8005fe0 <acc_rss_integration_mem_free>
 8005ffe:	2300      	movs	r3, #0
 8006000:	6163      	str	r3, [r4, #20]
 8006002:	bd10      	pop	{r4, pc}

08006004 <destroy.lto_priv.310>:
 8006004:	b510      	push	{r4, lr}
 8006006:	0004      	movs	r4, r0
 8006008:	6940      	ldr	r0, [r0, #20]
 800600a:	2800      	cmp	r0, #0
 800600c:	d003      	beq.n	8006016 <destroy.lto_priv.310+0x12>
 800600e:	f7ff ffe7 	bl	8005fe0 <acc_rss_integration_mem_free>
 8006012:	2300      	movs	r3, #0
 8006014:	6163      	str	r3, [r4, #20]
 8006016:	bd10      	pop	{r4, pc}

08006018 <disassemble.lto_priv.316.lto_priv.641>:
 8006018:	b570      	push	{r4, r5, r6, lr}
 800601a:	6804      	ldr	r4, [r0, #0]
 800601c:	0005      	movs	r5, r0
 800601e:	2c00      	cmp	r4, #0
 8006020:	d00a      	beq.n	8006038 <disassemble.lto_priv.316.lto_priv.641+0x20>
 8006022:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006024:	f7fe ff34 	bl	8004e90 <acc_sensor_manager_release_measurement>
 8006028:	23ea      	movs	r3, #234	; 0xea
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	58e0      	ldr	r0, [r4, r3]
 800602e:	f7ff ffd7 	bl	8005fe0 <acc_rss_integration_mem_free>
 8006032:	0020      	movs	r0, r4
 8006034:	f7ff ffd4 	bl	8005fe0 <acc_rss_integration_mem_free>
 8006038:	0028      	movs	r0, r5
 800603a:	f7ff ffd1 	bl	8005fe0 <acc_rss_integration_mem_free>
 800603e:	bd70      	pop	{r4, r5, r6, pc}

08006040 <disassemble.lto_priv.315.lto_priv.625>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	6804      	ldr	r4, [r0, #0]
 8006044:	0005      	movs	r5, r0
 8006046:	2c00      	cmp	r4, #0
 8006048:	d00a      	beq.n	8006060 <disassemble.lto_priv.315.lto_priv.625+0x20>
 800604a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800604c:	f7fe ff20 	bl	8004e90 <acc_sensor_manager_release_measurement>
 8006050:	0023      	movs	r3, r4
 8006052:	33fc      	adds	r3, #252	; 0xfc
 8006054:	69d8      	ldr	r0, [r3, #28]
 8006056:	f7ff ffc3 	bl	8005fe0 <acc_rss_integration_mem_free>
 800605a:	0020      	movs	r0, r4
 800605c:	f7ff ffc0 	bl	8005fe0 <acc_rss_integration_mem_free>
 8006060:	0028      	movs	r0, r5
 8006062:	f7ff ffbd 	bl	8005fe0 <acc_rss_integration_mem_free>
 8006066:	bd70      	pop	{r4, r5, r6, pc}

08006068 <acc_rss_integration_mem_alloc_debug>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4d05      	ldr	r5, [pc, #20]	; (8006080 <acc_rss_integration_mem_alloc_debug+0x18>)
 800606c:	68ab      	ldr	r3, [r5, #8]
 800606e:	4798      	blx	r3
 8006070:	1e04      	subs	r4, r0, #0
 8006072:	d103      	bne.n	800607c <acc_rss_integration_mem_alloc_debug+0x14>
 8006074:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006076:	4a03      	ldr	r2, [pc, #12]	; (8006084 <acc_rss_integration_mem_alloc_debug+0x1c>)
 8006078:	4903      	ldr	r1, [pc, #12]	; (8006088 <acc_rss_integration_mem_alloc_debug+0x20>)
 800607a:	4798      	blx	r3
 800607c:	0020      	movs	r0, r4
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	200003f0 	.word	0x200003f0
 8006084:	0801ca96 	.word	0x0801ca96
 8006088:	0801d506 	.word	0x0801d506

0800608c <acc_rss_integration_sensor_device_transfer>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	001e      	movs	r6, r3
 8006090:	000c      	movs	r4, r1
 8006092:	0015      	movs	r5, r2
 8006094:	000b      	movs	r3, r1
 8006096:	3a01      	subs	r2, #1
 8006098:	d209      	bcs.n	80060ae <acc_rss_integration_sensor_device_transfer+0x22>
 800609a:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <acc_rss_integration_sensor_device_transfer+0x38>)
 800609c:	006a      	lsls	r2, r5, #1
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	0021      	movs	r1, r4
 80060a2:	4798      	blx	r3
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	d001      	beq.n	80060ac <acc_rss_integration_sensor_device_transfer+0x20>
 80060a8:	3d01      	subs	r5, #1
 80060aa:	d205      	bcs.n	80060b8 <acc_rss_integration_sensor_device_transfer+0x2c>
 80060ac:	bd70      	pop	{r4, r5, r6, pc}
 80060ae:	8819      	ldrh	r1, [r3, #0]
 80060b0:	ba49      	rev16	r1, r1
 80060b2:	8019      	strh	r1, [r3, #0]
 80060b4:	3302      	adds	r3, #2
 80060b6:	e7ee      	b.n	8006096 <acc_rss_integration_sensor_device_transfer+0xa>
 80060b8:	8823      	ldrh	r3, [r4, #0]
 80060ba:	ba5b      	rev16	r3, r3
 80060bc:	8023      	strh	r3, [r4, #0]
 80060be:	3402      	adds	r4, #2
 80060c0:	e7f2      	b.n	80060a8 <acc_rss_integration_sensor_device_transfer+0x1c>
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	200003f0 	.word	0x200003f0

080060c8 <acc_sensor_r2_load_confmem>:
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	4647      	mov	r7, r8
 80060cc:	46ce      	mov	lr, r9
 80060ce:	1c5c      	adds	r4, r3, #1
 80060d0:	4d16      	ldr	r5, [pc, #88]	; (800612c <acc_sensor_r2_load_confmem+0x64>)
 80060d2:	0063      	lsls	r3, r4, #1
 80060d4:	4699      	mov	r9, r3
 80060d6:	002b      	movs	r3, r5
 80060d8:	b580      	push	{r7, lr}
 80060da:	3330      	adds	r3, #48	; 0x30
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b083      	sub	sp, #12
 80060e0:	0006      	movs	r6, r0
 80060e2:	4688      	mov	r8, r1
 80060e4:	0017      	movs	r7, r2
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d906      	bls.n	80060f8 <acc_sensor_r2_load_confmem+0x30>
 80060ea:	9100      	str	r1, [sp, #0]
 80060ec:	0003      	movs	r3, r0
 80060ee:	4a10      	ldr	r2, [pc, #64]	; (8006130 <acc_sensor_r2_load_confmem+0x68>)
 80060f0:	4910      	ldr	r1, [pc, #64]	; (8006134 <acc_sensor_r2_load_confmem+0x6c>)
 80060f2:	2004      	movs	r0, #4
 80060f4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80060f6:	47a0      	blx	r4
 80060f8:	686b      	ldr	r3, [r5, #4]
 80060fa:	4599      	cmp	r9, r3
 80060fc:	d909      	bls.n	8006112 <acc_sensor_r2_load_confmem+0x4a>
 80060fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006100:	4a0d      	ldr	r2, [pc, #52]	; (8006138 <acc_sensor_r2_load_confmem+0x70>)
 8006102:	490c      	ldr	r1, [pc, #48]	; (8006134 <acc_sensor_r2_load_confmem+0x6c>)
 8006104:	2000      	movs	r0, #0
 8006106:	4798      	blx	r3
 8006108:	b003      	add	sp, #12
 800610a:	bc0c      	pop	{r2, r3}
 800610c:	4690      	mov	r8, r2
 800610e:	4699      	mov	r9, r3
 8006110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006112:	21a0      	movs	r1, #160	; 0xa0
 8006114:	4643      	mov	r3, r8
 8006116:	01c9      	lsls	r1, r1, #7
 8006118:	4319      	orrs	r1, r3
 800611a:	464b      	mov	r3, r9
 800611c:	8039      	strh	r1, [r7, #0]
 800611e:	085a      	lsrs	r2, r3, #1
 8006120:	0039      	movs	r1, r7
 8006122:	2300      	movs	r3, #0
 8006124:	0030      	movs	r0, r6
 8006126:	f7ff ffb1 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800612a:	e7ed      	b.n	8006108 <acc_sensor_r2_load_confmem+0x40>
 800612c:	200003f0 	.word	0x200003f0
 8006130:	0801caa4 	.word	0x0801caa4
 8006134:	0801caca 	.word	0x0801caca
 8006138:	0801cad4 	.word	0x0801cad4

0800613c <acc_rss_integration_sensor_device_power_off>:
 800613c:	b510      	push	{r4, lr}
 800613e:	4b02      	ldr	r3, [pc, #8]	; (8006148 <acc_rss_integration_sensor_device_power_off+0xc>)
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4798      	blx	r3
 8006144:	bd10      	pop	{r4, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	200003f0 	.word	0x200003f0

0800614c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	6985      	ldr	r5, [r0, #24]
 8006150:	0004      	movs	r4, r0
 8006152:	0028      	movs	r0, r5
 8006154:	f7fe feb6 	bl	8004ec4 <acc_rss_integration_sensor_device_power_on>
 8006158:	2148      	movs	r1, #72	; 0x48
 800615a:	4369      	muls	r1, r5
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252+0x48>)
 800615e:	3948      	subs	r1, #72	; 0x48
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006164:	1859      	adds	r1, r3, r1
 8006166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006168:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4798      	blx	r3
 800616e:	2800      	cmp	r0, #0
 8006170:	d104      	bne.n	800617c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252+0x30>
 8006172:	0028      	movs	r0, r5
 8006174:	f7ff ffe2 	bl	800613c <acc_rss_integration_sensor_device_power_off>
 8006178:	2000      	movs	r0, #0
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	0020      	movs	r0, r4
 800617e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006180:	0031      	movs	r1, r6
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	3018      	adds	r0, #24
 8006186:	4798      	blx	r3
 8006188:	2800      	cmp	r0, #0
 800618a:	d0f2      	beq.n	8006172 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252+0x26>
 800618c:	2301      	movs	r3, #1
 800618e:	70e3      	strb	r3, [r4, #3]
 8006190:	e7f3      	b.n	800617a <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252+0x2e>
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	200005a0 	.word	0x200005a0

08006198 <acc_rss_integration_get_sensor_reference_frequency>:
 8006198:	b510      	push	{r4, lr}
 800619a:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4798      	blx	r3
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	200003f0 	.word	0x200003f0

080061a8 <acc_radar_engine_common_frequency_to_main_clk>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	1c06      	adds	r6, r0, #0
 80061ac:	0015      	movs	r5, r2
 80061ae:	000c      	movs	r4, r1
 80061b0:	f7ff fff2 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 80061b4:	1c31      	adds	r1, r6, #0
 80061b6:	f008 f8a7 	bl	800e308 <__aeabi_fdiv>
 80061ba:	f008 fef7 	bl	800efac <__aeabi_f2uiz>
 80061be:	0c03      	lsrs	r3, r0, #16
 80061c0:	b280      	uxth	r0, r0
 80061c2:	602b      	str	r3, [r5, #0]
 80061c4:	6020      	str	r0, [r4, #0]
 80061c6:	bd70      	pop	{r4, r5, r6, pc}

080061c8 <calculate_pll_divisors.lto_priv.294>:
 80061c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ca:	0005      	movs	r5, r0
 80061cc:	f7ff ffe4 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 80061d0:	1c01      	adds	r1, r0, #0
 80061d2:	1c06      	adds	r6, r0, #0
 80061d4:	4830      	ldr	r0, [pc, #192]	; (8006298 <calculate_pll_divisors.lto_priv.294+0xd0>)
 80061d6:	f008 f897 	bl	800e308 <__aeabi_fdiv>
 80061da:	21fc      	movs	r1, #252	; 0xfc
 80061dc:	0589      	lsls	r1, r1, #22
 80061de:	f007 fef9 	bl	800dfd4 <__aeabi_fadd>
 80061e2:	f008 fee3 	bl	800efac <__aeabi_f2uiz>
 80061e6:	492d      	ldr	r1, [pc, #180]	; (800629c <calculate_pll_divisors.lto_priv.294+0xd4>)
 80061e8:	b284      	uxth	r4, r0
 80061ea:	1c30      	adds	r0, r6, #0
 80061ec:	f008 fad0 	bl	800e790 <__aeabi_fsub>
 80061f0:	492b      	ldr	r1, [pc, #172]	; (80062a0 <calculate_pll_divisors.lto_priv.294+0xd8>)
 80061f2:	f008 f99b 	bl	800e52c <__aeabi_fmul>
 80061f6:	492b      	ldr	r1, [pc, #172]	; (80062a4 <calculate_pll_divisors.lto_priv.294+0xdc>)
 80061f8:	f007 feec 	bl	800dfd4 <__aeabi_fadd>
 80061fc:	f008 fed6 	bl	800efac <__aeabi_f2uiz>
 8006200:	0023      	movs	r3, r4
 8006202:	3b10      	subs	r3, #16
 8006204:	b29b      	uxth	r3, r3
 8006206:	8128      	strh	r0, [r5, #8]
 8006208:	2bef      	cmp	r3, #239	; 0xef
 800620a:	d92b      	bls.n	8006264 <calculate_pll_divisors.lto_priv.294+0x9c>
 800620c:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <calculate_pll_divisors.lto_priv.294+0xe0>)
 800620e:	2100      	movs	r1, #0
 8006210:	1c30      	adds	r0, r6, #0
 8006212:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006214:	f008 fe82 	bl	800ef1c <__aeabi_fcmplt>
 8006218:	2800      	cmp	r0, #0
 800621a:	d01f      	beq.n	800625c <calculate_pll_divisors.lto_priv.294+0x94>
 800621c:	4c23      	ldr	r4, [pc, #140]	; (80062ac <calculate_pll_divisors.lto_priv.294+0xe4>)
 800621e:	4924      	ldr	r1, [pc, #144]	; (80062b0 <calculate_pll_divisors.lto_priv.294+0xe8>)
 8006220:	1c30      	adds	r0, r6, #0
 8006222:	f008 f983 	bl	800e52c <__aeabi_fmul>
 8006226:	4923      	ldr	r1, [pc, #140]	; (80062b4 <calculate_pll_divisors.lto_priv.294+0xec>)
 8006228:	f007 fed4 	bl	800dfd4 <__aeabi_fadd>
 800622c:	1c06      	adds	r6, r0, #0
 800622e:	f008 febd 	bl	800efac <__aeabi_f2uiz>
 8006232:	0005      	movs	r5, r0
 8006234:	f009 f8da 	bl	800f3ec <__aeabi_ui2f>
 8006238:	1c01      	adds	r1, r0, #0
 800623a:	1c30      	adds	r0, r6, #0
 800623c:	f008 faa8 	bl	800e790 <__aeabi_fsub>
 8006240:	491d      	ldr	r1, [pc, #116]	; (80062b8 <calculate_pll_divisors.lto_priv.294+0xf0>)
 8006242:	f008 f973 	bl	800e52c <__aeabi_fmul>
 8006246:	f008 feb1 	bl	800efac <__aeabi_f2uiz>
 800624a:	9500      	str	r5, [sp, #0]
 800624c:	9001      	str	r0, [sp, #4]
 800624e:	0023      	movs	r3, r4
 8006250:	2000      	movs	r0, #0
 8006252:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <calculate_pll_divisors.lto_priv.294+0xf4>)
 8006254:	491a      	ldr	r1, [pc, #104]	; (80062c0 <calculate_pll_divisors.lto_priv.294+0xf8>)
 8006256:	47b8      	blx	r7
 8006258:	2000      	movs	r0, #0
 800625a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800625c:	21fe      	movs	r1, #254	; 0xfe
 800625e:	4c19      	ldr	r4, [pc, #100]	; (80062c4 <calculate_pll_divisors.lto_priv.294+0xfc>)
 8006260:	0589      	lsls	r1, r1, #22
 8006262:	e7dd      	b.n	8006220 <calculate_pll_divisors.lto_priv.294+0x58>
 8006264:	2c3f      	cmp	r4, #63	; 0x3f
 8006266:	d809      	bhi.n	800627c <calculate_pll_divisors.lto_priv.294+0xb4>
 8006268:	2200      	movs	r2, #0
 800626a:	806a      	strh	r2, [r5, #2]
 800626c:	2c2f      	cmp	r4, #47	; 0x2f
 800626e:	d900      	bls.n	8006272 <calculate_pll_divisors.lto_priv.294+0xaa>
 8006270:	0023      	movs	r3, r4
 8006272:	80ab      	strh	r3, [r5, #4]
 8006274:	80ea      	strh	r2, [r5, #6]
 8006276:	802c      	strh	r4, [r5, #0]
 8006278:	2001      	movs	r0, #1
 800627a:	e7ee      	b.n	800625a <calculate_pll_divisors.lto_priv.294+0x92>
 800627c:	2301      	movs	r3, #1
 800627e:	806b      	strh	r3, [r5, #2]
 8006280:	08e3      	lsrs	r3, r4, #3
 8006282:	2cbf      	cmp	r4, #191	; 0xbf
 8006284:	d803      	bhi.n	800628e <calculate_pll_divisors.lto_priv.294+0xc6>
 8006286:	0023      	movs	r3, r4
 8006288:	3b40      	subs	r3, #64	; 0x40
 800628a:	10db      	asrs	r3, r3, #3
 800628c:	b29b      	uxth	r3, r3
 800628e:	80ab      	strh	r3, [r5, #4]
 8006290:	2307      	movs	r3, #7
 8006292:	4023      	ands	r3, r4
 8006294:	80eb      	strh	r3, [r5, #6]
 8006296:	e7ee      	b.n	8006276 <calculate_pll_divisors.lto_priv.294+0xae>
 8006298:	4f1502f9 	.word	0x4f1502f9
 800629c:	4b989680 	.word	0x4b989680
 80062a0:	b55b38e8 	.word	0xb55b38e8
 80062a4:	427c0000 	.word	0x427c0000
 80062a8:	200003f0 	.word	0x200003f0
 80062ac:	0801db44 	.word	0x0801db44
 80062b0:	bf800000 	.word	0xbf800000
 80062b4:	350637bd 	.word	0x350637bd
 80062b8:	49742400 	.word	0x49742400
 80062bc:	0801caf4 	.word	0x0801caf4
 80062c0:	0801cb1f 	.word	0x0801cb1f
 80062c4:	0801c144 	.word	0x0801c144

080062c8 <set_calibration_context.lto_priv.283>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	680b      	ldr	r3, [r1, #0]
 80062cc:	b086      	sub	sp, #24
 80062ce:	0004      	movs	r4, r0
 80062d0:	000e      	movs	r6, r1
 80062d2:	2b06      	cmp	r3, #6
 80062d4:	d00a      	beq.n	80062ec <set_calibration_context.lto_priv.283+0x24>
 80062d6:	2206      	movs	r2, #6
 80062d8:	9200      	str	r2, [sp, #0]
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <set_calibration_context.lto_priv.283+0x4c>)
 80062dc:	2000      	movs	r0, #0
 80062de:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80062e0:	490d      	ldr	r1, [pc, #52]	; (8006318 <set_calibration_context.lto_priv.283+0x50>)
 80062e2:	4a0e      	ldr	r2, [pc, #56]	; (800631c <set_calibration_context.lto_priv.283+0x54>)
 80062e4:	47a0      	blx	r4
 80062e6:	2000      	movs	r0, #0
 80062e8:	b006      	add	sp, #24
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	ad03      	add	r5, sp, #12
 80062ee:	0028      	movs	r0, r5
 80062f0:	f7ff ff6a 	bl	80061c8 <calculate_pll_divisors.lto_priv.294>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0f7      	beq.n	80062e8 <set_calibration_context.lto_priv.283+0x20>
 80062f8:	88ab      	ldrh	r3, [r5, #4]
 80062fa:	6063      	str	r3, [r4, #4]
 80062fc:	88eb      	ldrh	r3, [r5, #6]
 80062fe:	60a3      	str	r3, [r4, #8]
 8006300:	886b      	ldrh	r3, [r5, #2]
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	892b      	ldrh	r3, [r5, #8]
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	88b3      	ldrh	r3, [r6, #4]
 800630a:	6123      	str	r3, [r4, #16]
 800630c:	88f3      	ldrh	r3, [r6, #6]
 800630e:	6163      	str	r3, [r4, #20]
 8006310:	e7ea      	b.n	80062e8 <set_calibration_context.lto_priv.283+0x20>
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	200003f0 	.word	0x200003f0
 8006318:	0801cb6e 	.word	0x0801cb6e
 800631c:	0801cb30 	.word	0x0801cb30

08006320 <calibrate.lto_priv.297>:
 8006320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006322:	b08b      	sub	sp, #44	; 0x2c
 8006324:	ac02      	add	r4, sp, #8
 8006326:	6807      	ldr	r7, [r0, #0]
 8006328:	0020      	movs	r0, r4
 800632a:	000e      	movs	r6, r1
 800632c:	0015      	movs	r5, r2
 800632e:	f7ff ff4b 	bl	80061c8 <calculate_pll_divisors.lto_priv.294>
 8006332:	2800      	cmp	r0, #0
 8006334:	d103      	bne.n	800633e <calibrate.lto_priv.297+0x1e>
 8006336:	2400      	movs	r4, #0
 8006338:	0020      	movs	r0, r4
 800633a:	b00b      	add	sp, #44	; 0x2c
 800633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633e:	9705      	str	r7, [sp, #20]
 8006340:	8863      	ldrh	r3, [r4, #2]
 8006342:	aa05      	add	r2, sp, #20
 8006344:	6053      	str	r3, [r2, #4]
 8006346:	88a3      	ldrh	r3, [r4, #4]
 8006348:	ce03      	ldmia	r6!, {r0, r1}
 800634a:	6093      	str	r3, [r2, #8]
 800634c:	88e3      	ldrh	r3, [r4, #6]
 800634e:	60d3      	str	r3, [r2, #12]
 8006350:	8923      	ldrh	r3, [r4, #8]
 8006352:	8213      	strh	r3, [r2, #16]
 8006354:	466b      	mov	r3, sp
 8006356:	f007 fbc6 	bl	800dae6 <acc_cpd_cbank_and_vana_calibration>
 800635a:	1e04      	subs	r4, r0, #0
 800635c:	d0eb      	beq.n	8006336 <calibrate.lto_priv.297+0x16>
 800635e:	9b00      	ldr	r3, [sp, #0]
 8006360:	80ab      	strh	r3, [r5, #4]
 8006362:	466b      	mov	r3, sp
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	80eb      	strh	r3, [r5, #6]
 8006368:	2306      	movs	r3, #6
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <calibrate.lto_priv.297+0x64>)
 800636e:	001a      	movs	r2, r3
 8006370:	3230      	adds	r2, #48	; 0x30
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	2a01      	cmp	r2, #1
 8006376:	d9df      	bls.n	8006338 <calibrate.lto_priv.297+0x18>
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	4a03      	ldr	r2, [pc, #12]	; (8006388 <calibrate.lto_priv.297+0x68>)
 800637c:	4903      	ldr	r1, [pc, #12]	; (800638c <calibrate.lto_priv.297+0x6c>)
 800637e:	2002      	movs	r0, #2
 8006380:	4798      	blx	r3
 8006382:	e7d9      	b.n	8006338 <calibrate.lto_priv.297+0x18>
 8006384:	200003f0 	.word	0x200003f0
 8006388:	0801cb82 	.word	0x0801cb82
 800638c:	0801cb6e 	.word	0x0801cb6e

08006390 <set_calibration_context.lto_priv.282>:
 8006390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006392:	680b      	ldr	r3, [r1, #0]
 8006394:	b087      	sub	sp, #28
 8006396:	0004      	movs	r4, r0
 8006398:	000d      	movs	r5, r1
 800639a:	2b06      	cmp	r3, #6
 800639c:	d00b      	beq.n	80063b6 <set_calibration_context.lto_priv.282+0x26>
 800639e:	2206      	movs	r2, #6
 80063a0:	9200      	str	r2, [sp, #0]
 80063a2:	4a22      	ldr	r2, [pc, #136]	; (800642c <set_calibration_context.lto_priv.282+0x9c>)
 80063a4:	4922      	ldr	r1, [pc, #136]	; (8006430 <set_calibration_context.lto_priv.282+0xa0>)
 80063a6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80063a8:	2000      	movs	r0, #0
 80063aa:	4a22      	ldr	r2, [pc, #136]	; (8006434 <set_calibration_context.lto_priv.282+0xa4>)
 80063ac:	47a0      	blx	r4
 80063ae:	2700      	movs	r7, #0
 80063b0:	0038      	movs	r0, r7
 80063b2:	b007      	add	sp, #28
 80063b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b6:	ae03      	add	r6, sp, #12
 80063b8:	0030      	movs	r0, r6
 80063ba:	f7ff ff05 	bl	80061c8 <calculate_pll_divisors.lto_priv.294>
 80063be:	1e07      	subs	r7, r0, #0
 80063c0:	d0f6      	beq.n	80063b0 <set_calibration_context.lto_priv.282+0x20>
 80063c2:	88b3      	ldrh	r3, [r6, #4]
 80063c4:	6063      	str	r3, [r4, #4]
 80063c6:	88f3      	ldrh	r3, [r6, #6]
 80063c8:	60a3      	str	r3, [r4, #8]
 80063ca:	8873      	ldrh	r3, [r6, #2]
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	8933      	ldrh	r3, [r6, #8]
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	88ab      	ldrh	r3, [r5, #4]
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	88eb      	ldrh	r3, [r5, #6]
 80063d8:	6163      	str	r3, [r4, #20]
 80063da:	892b      	ldrh	r3, [r5, #8]
 80063dc:	61a3      	str	r3, [r4, #24]
 80063de:	896b      	ldrh	r3, [r5, #10]
 80063e0:	61e3      	str	r3, [r4, #28]
 80063e2:	89ab      	ldrh	r3, [r5, #12]
 80063e4:	6223      	str	r3, [r4, #32]
 80063e6:	8a2b      	ldrh	r3, [r5, #16]
 80063e8:	84a3      	strh	r3, [r4, #36]	; 0x24
 80063ea:	8a6b      	ldrh	r3, [r5, #18]
 80063ec:	84e3      	strh	r3, [r4, #38]	; 0x26
 80063ee:	89ed      	ldrh	r5, [r5, #14]
 80063f0:	00ad      	lsls	r5, r5, #2
 80063f2:	b2ad      	uxth	r5, r5
 80063f4:	0028      	movs	r0, r5
 80063f6:	303e      	adds	r0, #62	; 0x3e
 80063f8:	b280      	uxth	r0, r0
 80063fa:	287b      	cmp	r0, #123	; 0x7b
 80063fc:	d912      	bls.n	8006424 <set_calibration_context.lto_priv.282+0x94>
 80063fe:	217c      	movs	r1, #124	; 0x7c
 8006400:	f008 fc4c 	bl	800ec9c <__aeabi_uidivmod>
 8006404:	2200      	movs	r2, #0
 8006406:	0028      	movs	r0, r5
 8006408:	2301      	movs	r3, #1
 800640a:	b28d      	uxth	r5, r1
 800640c:	0011      	movs	r1, r2
 800640e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006410:	6323      	str	r3, [r4, #48]	; 0x30
 8006412:	2003      	movs	r0, #3
 8006414:	6423      	str	r3, [r4, #64]	; 0x40
 8006416:	2300      	movs	r3, #0
 8006418:	62a5      	str	r5, [r4, #40]	; 0x28
 800641a:	6360      	str	r0, [r4, #52]	; 0x34
 800641c:	63a1      	str	r1, [r4, #56]	; 0x38
 800641e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006420:	6463      	str	r3, [r4, #68]	; 0x44
 8006422:	e7c5      	b.n	80063b0 <set_calibration_context.lto_priv.282+0x20>
 8006424:	2203      	movs	r2, #3
 8006426:	2101      	movs	r1, #1
 8006428:	2300      	movs	r3, #0
 800642a:	e7f0      	b.n	800640e <set_calibration_context.lto_priv.282+0x7e>
 800642c:	200003f0 	.word	0x200003f0
 8006430:	0801c9b2 	.word	0x0801c9b2
 8006434:	0801cb30 	.word	0x0801cb30

08006438 <get_pll_freq>:
 8006438:	b510      	push	{r4, lr}
 800643a:	f7ff fead 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 800643e:	1c01      	adds	r1, r0, #0
 8006440:	1c04      	adds	r4, r0, #0
 8006442:	4805      	ldr	r0, [pc, #20]	; (8006458 <get_pll_freq+0x20>)
 8006444:	f007 ff60 	bl	800e308 <__aeabi_fdiv>
 8006448:	f00c fefa 	bl	8013240 <roundf>
 800644c:	1c01      	adds	r1, r0, #0
 800644e:	1c20      	adds	r0, r4, #0
 8006450:	f008 f86c 	bl	800e52c <__aeabi_fmul>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	4f1502f9 	.word	0x4f1502f9

0800645c <points_to_meter.lto_priv.298>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	0004      	movs	r4, r0
 8006460:	f7ff ffea 	bl	8006438 <get_pll_freq>
 8006464:	1c05      	adds	r5, r0, #0
 8006466:	0020      	movs	r0, r4
 8006468:	f008 ff76 	bl	800f358 <__aeabi_i2f>
 800646c:	1c04      	adds	r4, r0, #0
 800646e:	20fe      	movs	r0, #254	; 0xfe
 8006470:	1c29      	adds	r1, r5, #0
 8006472:	0580      	lsls	r0, r0, #22
 8006474:	f007 ff48 	bl	800e308 <__aeabi_fdiv>
 8006478:	1c01      	adds	r1, r0, #0
 800647a:	1c20      	adds	r0, r4, #0
 800647c:	f008 f856 	bl	800e52c <__aeabi_fmul>
 8006480:	4903      	ldr	r1, [pc, #12]	; (8006490 <points_to_meter.lto_priv.298+0x34>)
 8006482:	f008 f853 	bl	800e52c <__aeabi_fmul>
 8006486:	21fc      	movs	r1, #252	; 0xfc
 8006488:	0589      	lsls	r1, r1, #22
 800648a:	f008 f84f 	bl	800e52c <__aeabi_fmul>
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	4d8ef3c2 	.word	0x4d8ef3c2

08006494 <meter_to_points.lto_priv.302>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	1c04      	adds	r4, r0, #0
 8006498:	f7ff ffce 	bl	8006438 <get_pll_freq>
 800649c:	1c21      	adds	r1, r4, #0
 800649e:	1c06      	adds	r6, r0, #0
 80064a0:	1c20      	adds	r0, r4, #0
 80064a2:	f007 fd97 	bl	800dfd4 <__aeabi_fadd>
 80064a6:	1c05      	adds	r5, r0, #0
 80064a8:	20fe      	movs	r0, #254	; 0xfe
 80064aa:	1c31      	adds	r1, r6, #0
 80064ac:	0580      	lsls	r0, r0, #22
 80064ae:	f007 ff2b 	bl	800e308 <__aeabi_fdiv>
 80064b2:	490c      	ldr	r1, [pc, #48]	; (80064e4 <meter_to_points.lto_priv.302+0x50>)
 80064b4:	f008 f83a 	bl	800e52c <__aeabi_fmul>
 80064b8:	1c01      	adds	r1, r0, #0
 80064ba:	1c28      	adds	r0, r5, #0
 80064bc:	f007 ff24 	bl	800e308 <__aeabi_fdiv>
 80064c0:	2100      	movs	r1, #0
 80064c2:	1c05      	adds	r5, r0, #0
 80064c4:	1c20      	adds	r0, r4, #0
 80064c6:	f008 fd29 	bl	800ef1c <__aeabi_fcmplt>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d107      	bne.n	80064de <meter_to_points.lto_priv.302+0x4a>
 80064ce:	21fc      	movs	r1, #252	; 0xfc
 80064d0:	0589      	lsls	r1, r1, #22
 80064d2:	1c28      	adds	r0, r5, #0
 80064d4:	f007 fd7e 	bl	800dfd4 <__aeabi_fadd>
 80064d8:	f008 ff1e 	bl	800f318 <__aeabi_f2iz>
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
 80064de:	21bf      	movs	r1, #191	; 0xbf
 80064e0:	0609      	lsls	r1, r1, #24
 80064e2:	e7f6      	b.n	80064d2 <meter_to_points.lto_priv.302+0x3e>
 80064e4:	4d8ef3c2 	.word	0x4d8ef3c2

080064e8 <acc_base_configuration_check.part.6>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80064ec:	2d04      	cmp	r5, #4
 80064ee:	d908      	bls.n	8006502 <acc_base_configuration_check.part.6+0x1a>
 80064f0:	4b33      	ldr	r3, [pc, #204]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 80064f2:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <acc_base_configuration_check.part.6+0xdc>)
 80064f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f6:	4934      	ldr	r1, [pc, #208]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 80064f8:	2000      	movs	r0, #0
 80064fa:	4798      	blx	r3
 80064fc:	2400      	movs	r4, #0
 80064fe:	0020      	movs	r0, r4
 8006500:	bd70      	pop	{r4, r5, r6, pc}
 8006502:	2d04      	cmp	r5, #4
 8006504:	d113      	bne.n	800652e <acc_base_configuration_check.part.6+0x46>
 8006506:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 8006508:	69dc      	ldr	r4, [r3, #28]
 800650a:	2c00      	cmp	r4, #0
 800650c:	d105      	bne.n	800651a <acc_base_configuration_check.part.6+0x32>
 800650e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006510:	4a2e      	ldr	r2, [pc, #184]	; (80065cc <acc_base_configuration_check.part.6+0xe4>)
 8006512:	492d      	ldr	r1, [pc, #180]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 8006514:	0020      	movs	r0, r4
 8006516:	4798      	blx	r3
 8006518:	e7f1      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 800651a:	7902      	ldrb	r2, [r0, #4]
 800651c:	2a03      	cmp	r2, #3
 800651e:	d106      	bne.n	800652e <acc_base_configuration_check.part.6+0x46>
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <acc_base_configuration_check.part.6+0xe8>)
 8006524:	4928      	ldr	r1, [pc, #160]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 8006526:	2000      	movs	r0, #0
 8006528:	4798      	blx	r3
 800652a:	2400      	movs	r4, #0
 800652c:	e7e7      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 800652e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006530:	2b16      	cmp	r3, #22
 8006532:	d907      	bls.n	8006544 <acc_base_configuration_check.part.6+0x5c>
 8006534:	4b22      	ldr	r3, [pc, #136]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 8006536:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <acc_base_configuration_check.part.6+0xec>)
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	4923      	ldr	r1, [pc, #140]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 800653c:	2000      	movs	r0, #0
 800653e:	4798      	blx	r3
 8006540:	2400      	movs	r4, #0
 8006542:	e7dc      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 8006544:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8006546:	3b01      	subs	r3, #1
 8006548:	2b3e      	cmp	r3, #62	; 0x3e
 800654a:	d907      	bls.n	800655c <acc_base_configuration_check.part.6+0x74>
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 800654e:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <acc_base_configuration_check.part.6+0xf0>)
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	491d      	ldr	r1, [pc, #116]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 8006554:	2000      	movs	r0, #0
 8006556:	4798      	blx	r3
 8006558:	2400      	movs	r4, #0
 800655a:	e7d0      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 800655c:	7903      	ldrb	r3, [r0, #4]
 800655e:	2d00      	cmp	r5, #0
 8006560:	d109      	bne.n	8006576 <acc_base_configuration_check.part.6+0x8e>
 8006562:	2b03      	cmp	r3, #3
 8006564:	d115      	bne.n	8006592 <acc_base_configuration_check.part.6+0xaa>
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 8006568:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <acc_base_configuration_check.part.6+0xf4>)
 800656a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656c:	4916      	ldr	r1, [pc, #88]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 800656e:	0028      	movs	r0, r5
 8006570:	4798      	blx	r3
 8006572:	002c      	movs	r4, r5
 8006574:	e7c3      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 8006576:	2b03      	cmp	r3, #3
 8006578:	d10b      	bne.n	8006592 <acc_base_configuration_check.part.6+0xaa>
 800657a:	0003      	movs	r3, r0
 800657c:	334e      	adds	r3, #78	; 0x4e
 800657e:	781c      	ldrb	r4, [r3, #0]
 8006580:	2c00      	cmp	r4, #0
 8006582:	d106      	bne.n	8006592 <acc_base_configuration_check.part.6+0xaa>
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 8006586:	4a16      	ldr	r2, [pc, #88]	; (80065e0 <acc_base_configuration_check.part.6+0xf8>)
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	490f      	ldr	r1, [pc, #60]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 800658c:	0020      	movs	r0, r4
 800658e:	4798      	blx	r3
 8006590:	e7b5      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 8006592:	2304      	movs	r3, #4
 8006594:	439d      	bics	r5, r3
 8006596:	d103      	bne.n	80065a0 <acc_base_configuration_check.part.6+0xb8>
 8006598:	0003      	movs	r3, r0
 800659a:	2201      	movs	r2, #1
 800659c:	334e      	adds	r3, #78	; 0x4e
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	3032      	adds	r0, #50	; 0x32
 80065a2:	7803      	ldrb	r3, [r0, #0]
 80065a4:	2401      	movs	r4, #1
 80065a6:	2b06      	cmp	r3, #6
 80065a8:	d0a9      	beq.n	80064fe <acc_base_configuration_check.part.6+0x16>
 80065aa:	2b09      	cmp	r3, #9
 80065ac:	d0a7      	beq.n	80064fe <acc_base_configuration_check.part.6+0x16>
 80065ae:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <acc_base_configuration_check.part.6+0xd8>)
 80065b0:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <acc_base_configuration_check.part.6+0xfc>)
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	4904      	ldr	r1, [pc, #16]	; (80065c8 <acc_base_configuration_check.part.6+0xe0>)
 80065b6:	2000      	movs	r0, #0
 80065b8:	4798      	blx	r3
 80065ba:	2400      	movs	r4, #0
 80065bc:	e79f      	b.n	80064fe <acc_base_configuration_check.part.6+0x16>
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	200003f0 	.word	0x200003f0
 80065c4:	0801cba0 	.word	0x0801cba0
 80065c8:	0801cbb8 	.word	0x0801cbb8
 80065cc:	0801cbcb 	.word	0x0801cbcb
 80065d0:	0801cc0a 	.word	0x0801cc0a
 80065d4:	0801cc4c 	.word	0x0801cc4c
 80065d8:	0801cc80 	.word	0x0801cc80
 80065dc:	0801ccd2 	.word	0x0801ccd2
 80065e0:	0801cd0e 	.word	0x0801cd0e
 80065e4:	0801cd4e 	.word	0x0801cd4e

080065e8 <configuration_is_valid.lto_priv.672>:
 80065e8:	b510      	push	{r4, lr}
 80065ea:	0004      	movs	r4, r0
 80065ec:	2001      	movs	r0, #1
 80065ee:	2c00      	cmp	r4, #0
 80065f0:	d10a      	bne.n	8006608 <configuration_is_valid.lto_priv.672+0x20>
 80065f2:	4a07      	ldr	r2, [pc, #28]	; (8006610 <configuration_is_valid.lto_priv.672+0x28>)
 80065f4:	0013      	movs	r3, r2
 80065f6:	3330      	adds	r3, #48	; 0x30
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <configuration_is_valid.lto_priv.672+0x22>
 80065fe:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006600:	4904      	ldr	r1, [pc, #16]	; (8006614 <configuration_is_valid.lto_priv.672+0x2c>)
 8006602:	4a05      	ldr	r2, [pc, #20]	; (8006618 <configuration_is_valid.lto_priv.672+0x30>)
 8006604:	4798      	blx	r3
 8006606:	0020      	movs	r0, r4
 8006608:	bd10      	pop	{r4, pc}
 800660a:	0018      	movs	r0, r3
 800660c:	e7fc      	b.n	8006608 <configuration_is_valid.lto_priv.672+0x20>
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	200003f0 	.word	0x200003f0
 8006614:	0801cbb8 	.word	0x0801cbb8
 8006618:	0801cd62 	.word	0x0801cd62

0800661c <acc_sensor_manager_prepare_measurement>:
 800661c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661e:	46de      	mov	lr, fp
 8006620:	4657      	mov	r7, sl
 8006622:	464e      	mov	r6, r9
 8006624:	4645      	mov	r5, r8
 8006626:	b5e0      	push	{r5, r6, r7, lr}
 8006628:	0004      	movs	r4, r0
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	0008      	movs	r0, r1
 800662e:	000f      	movs	r7, r1
 8006630:	469a      	mov	sl, r3
 8006632:	9201      	str	r2, [sp, #4]
 8006634:	f7fd f8ab 	bl	800378e <acc_base_configuration_sensor_get>
 8006638:	0006      	movs	r6, r0
 800663a:	0038      	movs	r0, r7
 800663c:	f7ff ffd4 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006640:	2300      	movs	r3, #0
 8006642:	469b      	mov	fp, r3
 8006644:	4298      	cmp	r0, r3
 8006646:	d003      	beq.n	8006650 <acc_sensor_manager_prepare_measurement+0x34>
 8006648:	003b      	movs	r3, r7
 800664a:	334c      	adds	r3, #76	; 0x4c
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	469b      	mov	fp, r3
 8006650:	2348      	movs	r3, #72	; 0x48
 8006652:	4373      	muls	r3, r6
 8006654:	3b48      	subs	r3, #72	; 0x48
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	9900      	ldr	r1, [sp, #0]
 800665a:	4b63      	ldr	r3, [pc, #396]	; (80067e8 <acc_sensor_manager_prepare_measurement+0x1cc>)
 800665c:	468c      	mov	ip, r1
 800665e:	4698      	mov	r8, r3
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4862      	ldr	r0, [pc, #392]	; (80067ec <acc_sensor_manager_prepare_measurement+0x1d0>)
 8006664:	4463      	add	r3, ip
 8006666:	0019      	movs	r1, r3
 8006668:	001a      	movs	r2, r3
 800666a:	2300      	movs	r3, #0
 800666c:	3142      	adds	r1, #66	; 0x42
 800666e:	700b      	strb	r3, [r1, #0]
 8006670:	4b5f      	ldr	r3, [pc, #380]	; (80067f0 <acc_sensor_manager_prepare_measurement+0x1d4>)
 8006672:	6450      	str	r0, [r2, #68]	; 0x44
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	9003      	str	r0, [sp, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <acc_sensor_manager_prepare_measurement+0x68>
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d000      	beq.n	8006684 <acc_sensor_manager_prepare_measurement+0x68>
 8006682:	e0a7      	b.n	80067d4 <acc_sensor_manager_prepare_measurement+0x1b8>
 8006684:	4653      	mov	r3, sl
 8006686:	63a3      	str	r3, [r4, #56]	; 0x38
 8006688:	0013      	movs	r3, r2
 800668a:	3341      	adds	r3, #65	; 0x41
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d161      	bne.n	8006758 <acc_sensor_manager_prepare_measurement+0x13c>
 8006694:	700b      	strb	r3, [r1, #0]
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	0030      	movs	r0, r6
 800669a:	6453      	str	r3, [r2, #68]	; 0x44
 800669c:	f7fe fc12 	bl	8004ec4 <acc_rss_integration_sensor_device_power_on>
 80066a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066a2:	69a0      	ldr	r0, [r4, #24]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	4798      	blx	r3
 80066a8:	1e05      	subs	r5, r0, #0
 80066aa:	d036      	beq.n	800671a <acc_sensor_manager_prepare_measurement+0xfe>
 80066ac:	0031      	movs	r1, r6
 80066ae:	200b      	movs	r0, #11
 80066b0:	f007 f9fe 	bl	800dab0 <acc_probes_execute_primitive_probe>
 80066b4:	ab05      	add	r3, sp, #20
 80066b6:	4699      	mov	r9, r3
 80066b8:	220c      	movs	r2, #12
 80066ba:	9902      	ldr	r1, [sp, #8]
 80066bc:	0018      	movs	r0, r3
 80066be:	f00c fbcd 	bl	8012e5c <memset>
 80066c2:	464b      	mov	r3, r9
 80066c4:	9a03      	ldr	r2, [sp, #12]
 80066c6:	9900      	ldr	r1, [sp, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	4643      	mov	r3, r8
 80066cc:	468c      	mov	ip, r1
 80066ce:	0020      	movs	r0, r4
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4651      	mov	r1, sl
 80066d4:	4463      	add	r3, ip
 80066d6:	001a      	movs	r2, r3
 80066d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066da:	3018      	adds	r0, #24
 80066dc:	68dd      	ldr	r5, [r3, #12]
 80066de:	464b      	mov	r3, r9
 80066e0:	47a8      	blx	r5
 80066e2:	1e05      	subs	r5, r0, #0
 80066e4:	d030      	beq.n	8006748 <acc_sensor_manager_prepare_measurement+0x12c>
 80066e6:	9a00      	ldr	r2, [sp, #0]
 80066e8:	4643      	mov	r3, r8
 80066ea:	4694      	mov	ip, r2
 80066ec:	2201      	movs	r2, #1
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4463      	add	r3, ip
 80066f2:	3341      	adds	r3, #65	; 0x41
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	4642      	mov	r2, r8
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	9b00      	ldr	r3, [sp, #0]
 80066fc:	4694      	mov	ip, r2
 80066fe:	4649      	mov	r1, r9
 8006700:	4463      	add	r3, ip
 8006702:	001a      	movs	r2, r3
 8006704:	7809      	ldrb	r1, [r1, #0]
 8006706:	3242      	adds	r2, #66	; 0x42
 8006708:	7011      	strb	r1, [r2, #0]
 800670a:	464a      	mov	r2, r9
 800670c:	6852      	ldr	r2, [r2, #4]
 800670e:	0031      	movs	r1, r6
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
 8006712:	200c      	movs	r0, #12
 8006714:	f007 f9cc 	bl	800dab0 <acc_probes_execute_primitive_probe>
 8006718:	e006      	b.n	8006728 <acc_sensor_manager_prepare_measurement+0x10c>
 800671a:	4b36      	ldr	r3, [pc, #216]	; (80067f4 <acc_sensor_manager_prepare_measurement+0x1d8>)
 800671c:	4a36      	ldr	r2, [pc, #216]	; (80067f8 <acc_sensor_manager_prepare_measurement+0x1dc>)
 800671e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006720:	4936      	ldr	r1, [pc, #216]	; (80067fc <acc_sensor_manager_prepare_measurement+0x1e0>)
 8006722:	4699      	mov	r9, r3
 8006724:	0033      	movs	r3, r6
 8006726:	47c8      	blx	r9
 8006728:	0030      	movs	r0, r6
 800672a:	f7ff fd07 	bl	800613c <acc_rss_integration_sensor_device_power_off>
 800672e:	2d00      	cmp	r5, #0
 8006730:	d112      	bne.n	8006758 <acc_sensor_manager_prepare_measurement+0x13c>
 8006732:	1d20      	adds	r0, r4, #4
 8006734:	f7fe fba4 	bl	8004e80 <acc_sweep_manager_release>
 8006738:	0028      	movs	r0, r5
 800673a:	b009      	add	sp, #36	; 0x24
 800673c:	bc3c      	pop	{r2, r3, r4, r5}
 800673e:	4690      	mov	r8, r2
 8006740:	4699      	mov	r9, r3
 8006742:	46a2      	mov	sl, r4
 8006744:	46ab      	mov	fp, r5
 8006746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006748:	4b2a      	ldr	r3, [pc, #168]	; (80067f4 <acc_sensor_manager_prepare_measurement+0x1d8>)
 800674a:	4a2d      	ldr	r2, [pc, #180]	; (8006800 <acc_sensor_manager_prepare_measurement+0x1e4>)
 800674c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674e:	492b      	ldr	r1, [pc, #172]	; (80067fc <acc_sensor_manager_prepare_measurement+0x1e0>)
 8006750:	469a      	mov	sl, r3
 8006752:	0033      	movs	r3, r6
 8006754:	47d0      	blx	sl
 8006756:	e7ce      	b.n	80066f6 <acc_sensor_manager_prepare_measurement+0xda>
 8006758:	465b      	mov	r3, fp
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <acc_sensor_manager_prepare_measurement+0x160>
 800675e:	465a      	mov	r2, fp
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	829a      	strh	r2, [r3, #20]
 8006764:	230e      	movs	r3, #14
 8006766:	a805      	add	r0, sp, #20
 8006768:	7003      	strb	r3, [r0, #0]
 800676a:	2220      	movs	r2, #32
 800676c:	3b07      	subs	r3, #7
 800676e:	9901      	ldr	r1, [sp, #4]
 8006770:	6046      	str	r6, [r0, #4]
 8006772:	6083      	str	r3, [r0, #8]
 8006774:	2501      	movs	r5, #1
 8006776:	f006 fd05 	bl	800d184 <acc_probes_execute>
 800677a:	e7dd      	b.n	8006738 <acc_sensor_manager_prepare_measurement+0x11c>
 800677c:	0038      	movs	r0, r7
 800677e:	f7fc fa48 	bl	8002c12 <acc_base_configuration_noise_level_normalization_get>
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ee      	beq.n	8006764 <acc_sensor_manager_prepare_measurement+0x148>
 8006786:	2214      	movs	r2, #20
 8006788:	4694      	mov	ip, r2
 800678a:	69a7      	ldr	r7, [r4, #24]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	0038      	movs	r0, r7
 8006790:	4463      	add	r3, ip
 8006792:	469b      	mov	fp, r3
 8006794:	f7fe fb96 	bl	8004ec4 <acc_rss_integration_sensor_device_power_on>
 8006798:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800679a:	2148      	movs	r1, #72	; 0x48
 800679c:	469a      	mov	sl, r3
 800679e:	2318      	movs	r3, #24
 80067a0:	4699      	mov	r9, r3
 80067a2:	4643      	mov	r3, r8
 80067a4:	4379      	muls	r1, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3948      	subs	r1, #72	; 0x48
 80067aa:	1859      	adds	r1, r3, r1
 80067ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4798      	blx	r3
 80067b4:	44a1      	add	r9, r4
 80067b6:	1e05      	subs	r5, r0, #0
 80067b8:	d006      	beq.n	80067c8 <acc_sensor_manager_prepare_measurement+0x1ac>
 80067ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067bc:	465a      	mov	r2, fp
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	4651      	mov	r1, sl
 80067c2:	4648      	mov	r0, r9
 80067c4:	4798      	blx	r3
 80067c6:	0005      	movs	r5, r0
 80067c8:	0038      	movs	r0, r7
 80067ca:	f7ff fcb7 	bl	800613c <acc_rss_integration_sensor_device_power_off>
 80067ce:	2d00      	cmp	r5, #0
 80067d0:	d1c8      	bne.n	8006764 <acc_sensor_manager_prepare_measurement+0x148>
 80067d2:	e7ae      	b.n	8006732 <acc_sensor_manager_prepare_measurement+0x116>
 80067d4:	4652      	mov	r2, sl
 80067d6:	9901      	ldr	r1, [sp, #4]
 80067d8:	0038      	movs	r0, r7
 80067da:	4798      	blx	r3
 80067dc:	1e05      	subs	r5, r0, #0
 80067de:	d0ab      	beq.n	8006738 <acc_sensor_manager_prepare_measurement+0x11c>
 80067e0:	465b      	mov	r3, fp
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0be      	beq.n	8006764 <acc_sensor_manager_prepare_measurement+0x148>
 80067e6:	e7ba      	b.n	800675e <acc_sensor_manager_prepare_measurement+0x142>
 80067e8:	200005a0 	.word	0x200005a0
 80067ec:	ff800000 	.word	0xff800000
 80067f0:	200005a4 	.word	0x200005a4
 80067f4:	200003f0 	.word	0x200003f0
 80067f8:	0801cd7d 	.word	0x0801cd7d
 80067fc:	0801ca87 	.word	0x0801ca87
 8006800:	0801cdb8 	.word	0x0801cdb8

08006804 <acc_sensor_manager_prepare_radar_engine>:
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006806:	464e      	mov	r6, r9
 8006808:	4645      	mov	r5, r8
 800680a:	46de      	mov	lr, fp
 800680c:	4657      	mov	r7, sl
 800680e:	b5e0      	push	{r5, r6, r7, lr}
 8006810:	4699      	mov	r9, r3
 8006812:	1d03      	adds	r3, r0, #4
 8006814:	b093      	sub	sp, #76	; 0x4c
 8006816:	0005      	movs	r5, r0
 8006818:	000c      	movs	r4, r1
 800681a:	0018      	movs	r0, r3
 800681c:	4690      	mov	r8, r2
 800681e:	2100      	movs	r1, #0
 8006820:	2234      	movs	r2, #52	; 0x34
 8006822:	469a      	mov	sl, r3
 8006824:	f00c fb1a 	bl	8012e5c <memset>
 8006828:	4b57      	ldr	r3, [pc, #348]	; (8006988 <acc_sensor_manager_prepare_radar_engine+0x184>)
 800682a:	ae0a      	add	r6, sp, #40	; 0x28
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <acc_sensor_manager_prepare_radar_engine+0x34>
 8006832:	681f      	ldr	r7, [r3, #0]
 8006834:	2f00      	cmp	r7, #0
 8006836:	d17b      	bne.n	8006930 <acc_sensor_manager_prepare_radar_engine+0x12c>
 8006838:	0020      	movs	r0, r4
 800683a:	f7fc ffa8 	bl	800378e <acc_base_configuration_sensor_get>
 800683e:	4682      	mov	sl, r0
 8006840:	0020      	movs	r0, r4
 8006842:	f7fc ff47 	bl	80036d4 <acc_base_configuration_wg_duration_get>
 8006846:	af01      	add	r7, sp, #4
 8006848:	8038      	strh	r0, [r7, #0]
 800684a:	0020      	movs	r0, r4
 800684c:	f7fc ff4d 	bl	80036ea <acc_base_configuration_integrator_get>
 8006850:	8078      	strh	r0, [r7, #2]
 8006852:	0020      	movs	r0, r4
 8006854:	f7ff fec8 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006858:	2300      	movs	r3, #0
 800685a:	4298      	cmp	r0, r3
 800685c:	d001      	beq.n	8006862 <acc_sensor_manager_prepare_radar_engine+0x5e>
 800685e:	1da3      	adds	r3, r4, #6
 8006860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006862:	0020      	movs	r0, r4
 8006864:	80bb      	strh	r3, [r7, #4]
 8006866:	f7fc ff76 	bl	8003756 <acc_base_configuration_decrease_tx_emission_get>
 800686a:	4651      	mov	r1, sl
 800686c:	80f8      	strh	r0, [r7, #6]
 800686e:	2304      	movs	r3, #4
 8006870:	003a      	movs	r2, r7
 8006872:	2012      	movs	r0, #18
 8006874:	f007 f928 	bl	800dac8 <acc_probes_execute_uint16>
 8006878:	2318      	movs	r3, #24
 800687a:	469a      	mov	sl, r3
 800687c:	44aa      	add	sl, r5
 800687e:	2220      	movs	r2, #32
 8006880:	2100      	movs	r1, #0
 8006882:	4650      	mov	r0, sl
 8006884:	f00c faea 	bl	8012e5c <memset>
 8006888:	0021      	movs	r1, r4
 800688a:	4650      	mov	r0, sl
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	4798      	blx	r3
 8006890:	4683      	mov	fp, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	d017      	beq.n	80068c6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 8006896:	2220      	movs	r2, #32
 8006898:	2100      	movs	r1, #0
 800689a:	0030      	movs	r0, r6
 800689c:	f00c fade 	bl	8012e5c <memset>
 80068a0:	221c      	movs	r2, #28
 80068a2:	2100      	movs	r1, #0
 80068a4:	a803      	add	r0, sp, #12
 80068a6:	f00c fad9 	bl	8012e5c <memset>
 80068aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80068ac:	0032      	movs	r2, r6
 80068ae:	681f      	ldr	r7, [r3, #0]
 80068b0:	0021      	movs	r1, r4
 80068b2:	ab03      	add	r3, sp, #12
 80068b4:	4650      	mov	r0, sl
 80068b6:	47b8      	blx	r7
 80068b8:	4683      	mov	fp, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d10d      	bne.n	80068da <acc_sensor_manager_prepare_radar_engine+0xd6>
 80068be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80068c0:	4650      	mov	r0, sl
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	4798      	blx	r3
 80068c6:	0020      	movs	r0, r4
 80068c8:	f7fc ff57 	bl	800377a <acc_base_configuration_power_save_mode_get>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d036      	beq.n	800693e <acc_sensor_manager_prepare_radar_engine+0x13a>
 80068d0:	2804      	cmp	r0, #4
 80068d2:	d055      	beq.n	8006980 <acc_sensor_manager_prepare_radar_engine+0x17c>
 80068d4:	2300      	movs	r3, #0
 80068d6:	702b      	strb	r3, [r5, #0]
 80068d8:	e033      	b.n	8006942 <acc_sensor_manager_prepare_radar_engine+0x13e>
 80068da:	4643      	mov	r3, r8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <acc_sensor_manager_prepare_radar_engine+0xea>
 80068e0:	0032      	movs	r2, r6
 80068e2:	ca83      	ldmia	r2!, {r0, r1, r7}
 80068e4:	c383      	stmia	r3!, {r0, r1, r7}
 80068e6:	ca83      	ldmia	r2!, {r0, r1, r7}
 80068e8:	c383      	stmia	r3!, {r0, r1, r7}
 80068ea:	ca03      	ldmia	r2!, {r0, r1}
 80068ec:	c303      	stmia	r3!, {r0, r1}
 80068ee:	464b      	mov	r3, r9
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <acc_sensor_manager_prepare_radar_engine+0xfa>
 80068f4:	221c      	movs	r2, #28
 80068f6:	a903      	add	r1, sp, #12
 80068f8:	4648      	mov	r0, r9
 80068fa:	f00e fed3 	bl	80156a4 <memcpy>
 80068fe:	0020      	movs	r0, r4
 8006900:	f7fc ff14 	bl	800372c <acc_base_configuration_repetition_mode_get>
 8006904:	2801      	cmp	r0, #1
 8006906:	d010      	beq.n	800692a <acc_sensor_manager_prepare_radar_engine+0x126>
 8006908:	0020      	movs	r0, r4
 800690a:	f7fc fef9 	bl	8003700 <acc_base_configuration_update_rate_get>
 800690e:	1c01      	adds	r1, r0, #0
 8006910:	481e      	ldr	r0, [pc, #120]	; (800698c <acc_sensor_manager_prepare_radar_engine+0x188>)
 8006912:	f007 fcf9 	bl	800e308 <__aeabi_fdiv>
 8006916:	491d      	ldr	r1, [pc, #116]	; (800698c <acc_sensor_manager_prepare_radar_engine+0x188>)
 8006918:	f007 fb5c 	bl	800dfd4 <__aeabi_fadd>
 800691c:	f008 fb46 	bl	800efac <__aeabi_f2uiz>
 8006920:	2300      	movs	r3, #0
 8006922:	6068      	str	r0, [r5, #4]
 8006924:	60eb      	str	r3, [r5, #12]
 8006926:	816b      	strh	r3, [r5, #10]
 8006928:	e7cd      	b.n	80068c6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 800692a:	20fa      	movs	r0, #250	; 0xfa
 800692c:	00c0      	lsls	r0, r0, #3
 800692e:	e7f7      	b.n	8006920 <acc_sensor_manager_prepare_radar_engine+0x11c>
 8006930:	464b      	mov	r3, r9
 8006932:	4642      	mov	r2, r8
 8006934:	0021      	movs	r1, r4
 8006936:	4650      	mov	r0, sl
 8006938:	47b8      	blx	r7
 800693a:	4683      	mov	fp, r0
 800693c:	e7c3      	b.n	80068c6 <acc_sensor_manager_prepare_radar_engine+0xc2>
 800693e:	2302      	movs	r3, #2
 8006940:	702b      	strb	r3, [r5, #0]
 8006942:	0020      	movs	r0, r4
 8006944:	f7fc fef2 	bl	800372c <acc_base_configuration_repetition_mode_get>
 8006948:	4243      	negs	r3, r0
 800694a:	4158      	adcs	r0, r3
 800694c:	7068      	strb	r0, [r5, #1]
 800694e:	0020      	movs	r0, r4
 8006950:	f7fc f956 	bl	8002c00 <acc_base_configuration_asynchronous_measurement_get>
 8006954:	70a8      	strb	r0, [r5, #2]
 8006956:	0020      	movs	r0, r4
 8006958:	f7fc ff19 	bl	800378e <acc_base_configuration_sensor_get>
 800695c:	2305      	movs	r3, #5
 800695e:	6070      	str	r0, [r6, #4]
 8006960:	7033      	strb	r3, [r6, #0]
 8006962:	0030      	movs	r0, r6
 8006964:	3302      	adds	r3, #2
 8006966:	221c      	movs	r2, #28
 8006968:	4649      	mov	r1, r9
 800696a:	60b3      	str	r3, [r6, #8]
 800696c:	f006 fc0a 	bl	800d184 <acc_probes_execute>
 8006970:	4658      	mov	r0, fp
 8006972:	b013      	add	sp, #76	; 0x4c
 8006974:	bc3c      	pop	{r2, r3, r4, r5}
 8006976:	4690      	mov	r8, r2
 8006978:	4699      	mov	r9, r3
 800697a:	46a2      	mov	sl, r4
 800697c:	46ab      	mov	fp, r5
 800697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006980:	2301      	movs	r3, #1
 8006982:	702b      	strb	r3, [r5, #0]
 8006984:	e7dd      	b.n	8006942 <acc_sensor_manager_prepare_radar_engine+0x13e>
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	200005a4 	.word	0x200005a4
 800698c:	44fa0000 	.word	0x44fa0000

08006990 <initialize.lto_priv.305>:
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	4657      	mov	r7, sl
 8006994:	46de      	mov	lr, fp
 8006996:	464e      	mov	r6, r9
 8006998:	4645      	mov	r5, r8
 800699a:	b5e0      	push	{r5, r6, r7, lr}
 800699c:	000f      	movs	r7, r1
 800699e:	b09d      	sub	sp, #116	; 0x74
 80069a0:	3732      	adds	r7, #50	; 0x32
 80069a2:	9308      	str	r3, [sp, #32]
 80069a4:	783b      	ldrb	r3, [r7, #0]
 80069a6:	4683      	mov	fp, r0
 80069a8:	000e      	movs	r6, r1
 80069aa:	4692      	mov	sl, r2
 80069ac:	2b06      	cmp	r3, #6
 80069ae:	d00f      	beq.n	80069d0 <initialize.lto_priv.305+0x40>
 80069b0:	2b09      	cmp	r3, #9
 80069b2:	d00d      	beq.n	80069d0 <initialize.lto_priv.305+0x40>
 80069b4:	4bb7      	ldr	r3, [pc, #732]	; (8006c94 <initialize.lto_priv.305+0x304>)
 80069b6:	2000      	movs	r0, #0
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	4ab7      	ldr	r2, [pc, #732]	; (8006c98 <initialize.lto_priv.305+0x308>)
 80069bc:	49b7      	ldr	r1, [pc, #732]	; (8006c9c <initialize.lto_priv.305+0x30c>)
 80069be:	4798      	blx	r3
 80069c0:	2000      	movs	r0, #0
 80069c2:	b01d      	add	sp, #116	; 0x74
 80069c4:	bc3c      	pop	{r2, r3, r4, r5}
 80069c6:	4690      	mov	r8, r2
 80069c8:	4699      	mov	r9, r3
 80069ca:	46a2      	mov	sl, r4
 80069cc:	46ab      	mov	fp, r5
 80069ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d0:	465b      	mov	r3, fp
 80069d2:	0030      	movs	r0, r6
 80069d4:	695d      	ldr	r5, [r3, #20]
 80069d6:	f7ff fe07 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d040      	beq.n	8006a60 <initialize.lto_priv.305+0xd0>
 80069de:	0033      	movs	r3, r6
 80069e0:	332c      	adds	r3, #44	; 0x2c
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d03b      	beq.n	8006a60 <initialize.lto_priv.305+0xd0>
 80069e8:	0030      	movs	r0, r6
 80069ea:	f7ff fdfd 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80069ee:	2400      	movs	r4, #0
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d001      	beq.n	80069f8 <initialize.lto_priv.305+0x68>
 80069f4:	2334      	movs	r3, #52	; 0x34
 80069f6:	5ef4      	ldrsh	r4, [r6, r3]
 80069f8:	b223      	sxth	r3, r4
 80069fa:	0030      	movs	r0, r6
 80069fc:	9307      	str	r3, [sp, #28]
 80069fe:	f7ff fdf3 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006a02:	2300      	movs	r3, #0
 8006a04:	b2a4      	uxth	r4, r4
 8006a06:	4298      	cmp	r0, r3
 8006a08:	d001      	beq.n	8006a0e <initialize.lto_priv.305+0x7e>
 8006a0a:	2236      	movs	r2, #54	; 0x36
 8006a0c:	5eb3      	ldrsh	r3, [r6, r2]
 8006a0e:	18e4      	adds	r4, r4, r3
 8006a10:	b223      	sxth	r3, r4
 8006a12:	4698      	mov	r8, r3
 8006a14:	0030      	movs	r0, r6
 8006a16:	f7fc f905 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8006a1a:	4643      	mov	r3, r8
 8006a1c:	9a07      	ldr	r2, [sp, #28]
 8006a1e:	0001      	movs	r1, r0
 8006a20:	1a9b      	subs	r3, r3, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f008 fa24 	bl	800ee70 <__aeabi_idivmod>
 8006a28:	1e0c      	subs	r4, r1, #0
 8006a2a:	dd0e      	ble.n	8006a4a <initialize.lto_priv.305+0xba>
 8006a2c:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <initialize.lto_priv.305+0x304>)
 8006a2e:	001a      	movs	r2, r3
 8006a30:	3230      	adds	r2, #48	; 0x30
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	2a01      	cmp	r2, #1
 8006a36:	d904      	bls.n	8006a42 <initialize.lto_priv.305+0xb2>
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	4a99      	ldr	r2, [pc, #612]	; (8006ca0 <initialize.lto_priv.305+0x310>)
 8006a3c:	4997      	ldr	r1, [pc, #604]	; (8006c9c <initialize.lto_priv.305+0x30c>)
 8006a3e:	2002      	movs	r0, #2
 8006a40:	4798      	blx	r3
 8006a42:	4643      	mov	r3, r8
 8006a44:	1b1c      	subs	r4, r3, r4
 8006a46:	b223      	sxth	r3, r4
 8006a48:	4698      	mov	r8, r3
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	dd28      	ble.n	8006aa2 <initialize.lto_priv.305+0x112>
 8006a50:	4b90      	ldr	r3, [pc, #576]	; (8006c94 <initialize.lto_priv.305+0x304>)
 8006a52:	2000      	movs	r0, #0
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	4a93      	ldr	r2, [pc, #588]	; (8006ca4 <initialize.lto_priv.305+0x314>)
 8006a58:	4990      	ldr	r1, [pc, #576]	; (8006c9c <initialize.lto_priv.305+0x30c>)
 8006a5a:	4798      	blx	r3
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e7b0      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006a60:	0030      	movs	r0, r6
 8006a62:	f7ff fdc1 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d016      	beq.n	8006a98 <initialize.lto_priv.305+0x108>
 8006a6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a6c:	4698      	mov	r8, r3
 8006a6e:	0030      	movs	r0, r6
 8006a70:	f7ff fdba 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d012      	beq.n	8006a9e <initialize.lto_priv.305+0x10e>
 8006a78:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	f007 faaa 	bl	800dfd4 <__aeabi_fadd>
 8006a80:	1c04      	adds	r4, r0, #0
 8006a82:	4640      	mov	r0, r8
 8006a84:	f7ff fd06 	bl	8006494 <meter_to_points.lto_priv.302>
 8006a88:	b203      	sxth	r3, r0
 8006a8a:	1c20      	adds	r0, r4, #0
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f7ff fd01 	bl	8006494 <meter_to_points.lto_priv.302>
 8006a92:	b203      	sxth	r3, r0
 8006a94:	4698      	mov	r8, r3
 8006a96:	e7bd      	b.n	8006a14 <initialize.lto_priv.305+0x84>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4698      	mov	r8, r3
 8006a9c:	e7e7      	b.n	8006a6e <initialize.lto_priv.305+0xde>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7eb      	b.n	8006a7a <initialize.lto_priv.305+0xea>
 8006aa2:	0030      	movs	r0, r6
 8006aa4:	f7ff fda0 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d005      	beq.n	8006ab8 <initialize.lto_priv.305+0x128>
 8006aac:	0033      	movs	r3, r6
 8006aae:	336e      	adds	r3, #110	; 0x6e
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d000      	beq.n	8006ab8 <initialize.lto_priv.305+0x128>
 8006ab6:	e1d7      	b.n	8006e68 <initialize.lto_priv.305+0x4d8>
 8006ab8:	0033      	movs	r3, r6
 8006aba:	332e      	adds	r3, #46	; 0x2e
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d100      	bne.n	8006ac4 <initialize.lto_priv.305+0x134>
 8006ac2:	e0d2      	b.n	8006c6a <initialize.lto_priv.305+0x2da>
 8006ac4:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006ac6:	b213      	sxth	r3, r2
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	2007      	movs	r0, #7
 8006acc:	015b      	lsls	r3, r3, #5
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	0019      	movs	r1, r3
 8006ad2:	0152      	lsls	r2, r2, #5
 8006ad4:	3a1a      	subs	r2, #26
 8006ad6:	b212      	sxth	r2, r2
 8006ad8:	17d4      	asrs	r4, r2, #31
 8006ada:	4004      	ands	r4, r0
 8006adc:	18a2      	adds	r2, r4, r2
 8006ade:	10d2      	asrs	r2, r2, #3
 8006ae0:	00d2      	lsls	r2, r2, #3
 8006ae2:	390f      	subs	r1, #15
 8006ae4:	1a8c      	subs	r4, r1, r2
 8006ae6:	9a07      	ldr	r2, [sp, #28]
 8006ae8:	b224      	sxth	r4, r4
 8006aea:	4294      	cmp	r4, r2
 8006aec:	dc00      	bgt.n	8006af0 <initialize.lto_priv.305+0x160>
 8006aee:	e0e7      	b.n	8006cc0 <initialize.lto_priv.305+0x330>
 8006af0:	4b68      	ldr	r3, [pc, #416]	; (8006c94 <initialize.lto_priv.305+0x304>)
 8006af2:	0010      	movs	r0, r2
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	f7ff fcb0 	bl	800645c <points_to_meter.lto_priv.298>
 8006afc:	2100      	movs	r1, #0
 8006afe:	f008 fa0d 	bl	800ef1c <__aeabi_fcmplt>
 8006b02:	4d69      	ldr	r5, [pc, #420]	; (8006ca8 <initialize.lto_priv.305+0x318>)
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d100      	bne.n	8006b0a <initialize.lto_priv.305+0x17a>
 8006b08:	4d68      	ldr	r5, [pc, #416]	; (8006cac <initialize.lto_priv.305+0x31c>)
 8006b0a:	9807      	ldr	r0, [sp, #28]
 8006b0c:	f7ff fca6 	bl	800645c <points_to_meter.lto_priv.298>
 8006b10:	1c06      	adds	r6, r0, #0
 8006b12:	9807      	ldr	r0, [sp, #28]
 8006b14:	f7ff fca2 	bl	800645c <points_to_meter.lto_priv.298>
 8006b18:	2100      	movs	r1, #0
 8006b1a:	f008 f9ff 	bl	800ef1c <__aeabi_fcmplt>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d100      	bne.n	8006b24 <initialize.lto_priv.305+0x194>
 8006b22:	e0a4      	b.n	8006c6e <initialize.lto_priv.305+0x2de>
 8006b24:	4962      	ldr	r1, [pc, #392]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006b26:	1c30      	adds	r0, r6, #0
 8006b28:	f007 fd00 	bl	800e52c <__aeabi_fmul>
 8006b2c:	4961      	ldr	r1, [pc, #388]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006b2e:	f007 fa51 	bl	800dfd4 <__aeabi_fadd>
 8006b32:	f008 fa3b 	bl	800efac <__aeabi_f2uiz>
 8006b36:	0007      	movs	r7, r0
 8006b38:	9807      	ldr	r0, [sp, #28]
 8006b3a:	f7ff fc8f 	bl	800645c <points_to_meter.lto_priv.298>
 8006b3e:	1c06      	adds	r6, r0, #0
 8006b40:	9807      	ldr	r0, [sp, #28]
 8006b42:	f7ff fc8b 	bl	800645c <points_to_meter.lto_priv.298>
 8006b46:	2100      	movs	r1, #0
 8006b48:	f008 f9e8 	bl	800ef1c <__aeabi_fcmplt>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d100      	bne.n	8006b52 <initialize.lto_priv.305+0x1c2>
 8006b50:	e090      	b.n	8006c74 <initialize.lto_priv.305+0x2e4>
 8006b52:	4957      	ldr	r1, [pc, #348]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006b54:	1c30      	adds	r0, r6, #0
 8006b56:	f007 fce9 	bl	800e52c <__aeabi_fmul>
 8006b5a:	4956      	ldr	r1, [pc, #344]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006b5c:	f007 fa3a 	bl	800dfd4 <__aeabi_fadd>
 8006b60:	1c06      	adds	r6, r0, #0
 8006b62:	9807      	ldr	r0, [sp, #28]
 8006b64:	f7ff fc7a 	bl	800645c <points_to_meter.lto_priv.298>
 8006b68:	4680      	mov	r8, r0
 8006b6a:	9807      	ldr	r0, [sp, #28]
 8006b6c:	f7ff fc76 	bl	800645c <points_to_meter.lto_priv.298>
 8006b70:	2100      	movs	r1, #0
 8006b72:	f008 f9d3 	bl	800ef1c <__aeabi_fcmplt>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d07f      	beq.n	8006c7a <initialize.lto_priv.305+0x2ea>
 8006b7a:	494d      	ldr	r1, [pc, #308]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	f007 fcd5 	bl	800e52c <__aeabi_fmul>
 8006b82:	494c      	ldr	r1, [pc, #304]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006b84:	f007 fa26 	bl	800dfd4 <__aeabi_fadd>
 8006b88:	f008 fa10 	bl	800efac <__aeabi_f2uiz>
 8006b8c:	f008 fc2e 	bl	800f3ec <__aeabi_ui2f>
 8006b90:	1c01      	adds	r1, r0, #0
 8006b92:	1c30      	adds	r0, r6, #0
 8006b94:	f007 fdfc 	bl	800e790 <__aeabi_fsub>
 8006b98:	4947      	ldr	r1, [pc, #284]	; (8006cb8 <initialize.lto_priv.305+0x328>)
 8006b9a:	f007 fcc7 	bl	800e52c <__aeabi_fmul>
 8006b9e:	f008 fa05 	bl	800efac <__aeabi_f2uiz>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	0020      	movs	r0, r4
 8006ba6:	f7ff fc59 	bl	800645c <points_to_meter.lto_priv.298>
 8006baa:	2100      	movs	r1, #0
 8006bac:	f008 f9b6 	bl	800ef1c <__aeabi_fcmplt>
 8006bb0:	4e3d      	ldr	r6, [pc, #244]	; (8006ca8 <initialize.lto_priv.305+0x318>)
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d100      	bne.n	8006bb8 <initialize.lto_priv.305+0x228>
 8006bb6:	4e3d      	ldr	r6, [pc, #244]	; (8006cac <initialize.lto_priv.305+0x31c>)
 8006bb8:	0020      	movs	r0, r4
 8006bba:	f7ff fc4f 	bl	800645c <points_to_meter.lto_priv.298>
 8006bbe:	4681      	mov	r9, r0
 8006bc0:	0020      	movs	r0, r4
 8006bc2:	f7ff fc4b 	bl	800645c <points_to_meter.lto_priv.298>
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	f008 f9a8 	bl	800ef1c <__aeabi_fcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d057      	beq.n	8006c80 <initialize.lto_priv.305+0x2f0>
 8006bd0:	4937      	ldr	r1, [pc, #220]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006bd2:	4648      	mov	r0, r9
 8006bd4:	f007 fcaa 	bl	800e52c <__aeabi_fmul>
 8006bd8:	4936      	ldr	r1, [pc, #216]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006bda:	f007 f9fb 	bl	800dfd4 <__aeabi_fadd>
 8006bde:	f008 f9e5 	bl	800efac <__aeabi_f2uiz>
 8006be2:	4681      	mov	r9, r0
 8006be4:	0020      	movs	r0, r4
 8006be6:	f7ff fc39 	bl	800645c <points_to_meter.lto_priv.298>
 8006bea:	4682      	mov	sl, r0
 8006bec:	0020      	movs	r0, r4
 8006bee:	f7ff fc35 	bl	800645c <points_to_meter.lto_priv.298>
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f008 f992 	bl	800ef1c <__aeabi_fcmplt>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d044      	beq.n	8006c86 <initialize.lto_priv.305+0x2f6>
 8006bfc:	492c      	ldr	r1, [pc, #176]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006bfe:	4650      	mov	r0, sl
 8006c00:	f007 fc94 	bl	800e52c <__aeabi_fmul>
 8006c04:	492b      	ldr	r1, [pc, #172]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006c06:	f007 f9e5 	bl	800dfd4 <__aeabi_fadd>
 8006c0a:	4682      	mov	sl, r0
 8006c0c:	0020      	movs	r0, r4
 8006c0e:	f7ff fc25 	bl	800645c <points_to_meter.lto_priv.298>
 8006c12:	4683      	mov	fp, r0
 8006c14:	0020      	movs	r0, r4
 8006c16:	f7ff fc21 	bl	800645c <points_to_meter.lto_priv.298>
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	f008 f97e 	bl	800ef1c <__aeabi_fcmplt>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d033      	beq.n	8006c8c <initialize.lto_priv.305+0x2fc>
 8006c24:	4922      	ldr	r1, [pc, #136]	; (8006cb0 <initialize.lto_priv.305+0x320>)
 8006c26:	4658      	mov	r0, fp
 8006c28:	f007 fc80 	bl	800e52c <__aeabi_fmul>
 8006c2c:	4921      	ldr	r1, [pc, #132]	; (8006cb4 <initialize.lto_priv.305+0x324>)
 8006c2e:	f007 f9d1 	bl	800dfd4 <__aeabi_fadd>
 8006c32:	f008 f9bb 	bl	800efac <__aeabi_f2uiz>
 8006c36:	f008 fbd9 	bl	800f3ec <__aeabi_ui2f>
 8006c3a:	1c01      	adds	r1, r0, #0
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f007 fda7 	bl	800e790 <__aeabi_fsub>
 8006c42:	491d      	ldr	r1, [pc, #116]	; (8006cb8 <initialize.lto_priv.305+0x328>)
 8006c44:	f007 fc72 	bl	800e52c <__aeabi_fmul>
 8006c48:	f008 f9b0 	bl	800efac <__aeabi_f2uiz>
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	4643      	mov	r3, r8
 8006c52:	9004      	str	r0, [sp, #16]
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	2000      	movs	r0, #0
 8006c58:	9602      	str	r6, [sp, #8]
 8006c5a:	9700      	str	r7, [sp, #0]
 8006c5c:	002b      	movs	r3, r5
 8006c5e:	4a17      	ldr	r2, [pc, #92]	; (8006cbc <initialize.lto_priv.305+0x32c>)
 8006c60:	490e      	ldr	r1, [pc, #56]	; (8006c9c <initialize.lto_priv.305+0x30c>)
 8006c62:	9c08      	ldr	r4, [sp, #32]
 8006c64:	47a0      	blx	r4
 8006c66:	2000      	movs	r0, #0
 8006c68:	e6ab      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006c6a:	783a      	ldrb	r2, [r7, #0]
 8006c6c:	e72b      	b.n	8006ac6 <initialize.lto_priv.305+0x136>
 8006c6e:	21fe      	movs	r1, #254	; 0xfe
 8006c70:	0589      	lsls	r1, r1, #22
 8006c72:	e758      	b.n	8006b26 <initialize.lto_priv.305+0x196>
 8006c74:	21fe      	movs	r1, #254	; 0xfe
 8006c76:	0589      	lsls	r1, r1, #22
 8006c78:	e76c      	b.n	8006b54 <initialize.lto_priv.305+0x1c4>
 8006c7a:	21fe      	movs	r1, #254	; 0xfe
 8006c7c:	0589      	lsls	r1, r1, #22
 8006c7e:	e77d      	b.n	8006b7c <initialize.lto_priv.305+0x1ec>
 8006c80:	21fe      	movs	r1, #254	; 0xfe
 8006c82:	0589      	lsls	r1, r1, #22
 8006c84:	e7a5      	b.n	8006bd2 <initialize.lto_priv.305+0x242>
 8006c86:	21fe      	movs	r1, #254	; 0xfe
 8006c88:	0589      	lsls	r1, r1, #22
 8006c8a:	e7b8      	b.n	8006bfe <initialize.lto_priv.305+0x26e>
 8006c8c:	21fe      	movs	r1, #254	; 0xfe
 8006c8e:	0589      	lsls	r1, r1, #22
 8006c90:	e7c9      	b.n	8006c26 <initialize.lto_priv.305+0x296>
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	200003f0 	.word	0x200003f0
 8006c98:	0801cddb 	.word	0x0801cddb
 8006c9c:	0801cb6e 	.word	0x0801cb6e
 8006ca0:	0801ce06 	.word	0x0801ce06
 8006ca4:	0801ce39 	.word	0x0801ce39
 8006ca8:	0801db44 	.word	0x0801db44
 8006cac:	0801c144 	.word	0x0801c144
 8006cb0:	bf800000 	.word	0xbf800000
 8006cb4:	350637bd 	.word	0x350637bd
 8006cb8:	49742400 	.word	0x49742400
 8006cbc:	0801ce68 	.word	0x0801ce68
 8006cc0:	3b30      	subs	r3, #48	; 0x30
 8006cc2:	b21c      	sxth	r4, r3
 8006cc4:	4544      	cmp	r4, r8
 8006cc6:	db00      	blt.n	8006cca <initialize.lto_priv.305+0x33a>
 8006cc8:	e0ce      	b.n	8006e68 <initialize.lto_priv.305+0x4d8>
 8006cca:	4bd7      	ldr	r3, [pc, #860]	; (8007028 <initialize.lto_priv.305+0x698>)
 8006ccc:	4640      	mov	r0, r8
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	9307      	str	r3, [sp, #28]
 8006cd2:	f7ff fbc3 	bl	800645c <points_to_meter.lto_priv.298>
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f008 f920 	bl	800ef1c <__aeabi_fcmplt>
 8006cdc:	4dd3      	ldr	r5, [pc, #844]	; (800702c <initialize.lto_priv.305+0x69c>)
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d100      	bne.n	8006ce4 <initialize.lto_priv.305+0x354>
 8006ce2:	4dd3      	ldr	r5, [pc, #844]	; (8007030 <initialize.lto_priv.305+0x6a0>)
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	f7ff fbb9 	bl	800645c <points_to_meter.lto_priv.298>
 8006cea:	1c06      	adds	r6, r0, #0
 8006cec:	4640      	mov	r0, r8
 8006cee:	f7ff fbb5 	bl	800645c <points_to_meter.lto_priv.298>
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	f008 f912 	bl	800ef1c <__aeabi_fcmplt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d100      	bne.n	8006cfe <initialize.lto_priv.305+0x36e>
 8006cfc:	e0a2      	b.n	8006e44 <initialize.lto_priv.305+0x4b4>
 8006cfe:	49cd      	ldr	r1, [pc, #820]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006d00:	1c30      	adds	r0, r6, #0
 8006d02:	f007 fc13 	bl	800e52c <__aeabi_fmul>
 8006d06:	49cc      	ldr	r1, [pc, #816]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006d08:	f007 f964 	bl	800dfd4 <__aeabi_fadd>
 8006d0c:	f008 f94e 	bl	800efac <__aeabi_f2uiz>
 8006d10:	0007      	movs	r7, r0
 8006d12:	4640      	mov	r0, r8
 8006d14:	f7ff fba2 	bl	800645c <points_to_meter.lto_priv.298>
 8006d18:	1c06      	adds	r6, r0, #0
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f7ff fb9e 	bl	800645c <points_to_meter.lto_priv.298>
 8006d20:	2100      	movs	r1, #0
 8006d22:	f008 f8fb 	bl	800ef1c <__aeabi_fcmplt>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d100      	bne.n	8006d2c <initialize.lto_priv.305+0x39c>
 8006d2a:	e08e      	b.n	8006e4a <initialize.lto_priv.305+0x4ba>
 8006d2c:	49c1      	ldr	r1, [pc, #772]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006d2e:	1c30      	adds	r0, r6, #0
 8006d30:	f007 fbfc 	bl	800e52c <__aeabi_fmul>
 8006d34:	49c0      	ldr	r1, [pc, #768]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006d36:	f007 f94d 	bl	800dfd4 <__aeabi_fadd>
 8006d3a:	1c06      	adds	r6, r0, #0
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	f7ff fb8d 	bl	800645c <points_to_meter.lto_priv.298>
 8006d42:	4681      	mov	r9, r0
 8006d44:	4640      	mov	r0, r8
 8006d46:	f7ff fb89 	bl	800645c <points_to_meter.lto_priv.298>
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	f008 f8e6 	bl	800ef1c <__aeabi_fcmplt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d07d      	beq.n	8006e50 <initialize.lto_priv.305+0x4c0>
 8006d54:	49b7      	ldr	r1, [pc, #732]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006d56:	4648      	mov	r0, r9
 8006d58:	f007 fbe8 	bl	800e52c <__aeabi_fmul>
 8006d5c:	49b6      	ldr	r1, [pc, #728]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006d5e:	f007 f939 	bl	800dfd4 <__aeabi_fadd>
 8006d62:	f008 f923 	bl	800efac <__aeabi_f2uiz>
 8006d66:	f008 fb41 	bl	800f3ec <__aeabi_ui2f>
 8006d6a:	1c01      	adds	r1, r0, #0
 8006d6c:	1c30      	adds	r0, r6, #0
 8006d6e:	f007 fd0f 	bl	800e790 <__aeabi_fsub>
 8006d72:	49b2      	ldr	r1, [pc, #712]	; (800703c <initialize.lto_priv.305+0x6ac>)
 8006d74:	f007 fbda 	bl	800e52c <__aeabi_fmul>
 8006d78:	f008 f918 	bl	800efac <__aeabi_f2uiz>
 8006d7c:	4680      	mov	r8, r0
 8006d7e:	0020      	movs	r0, r4
 8006d80:	f7ff fb6c 	bl	800645c <points_to_meter.lto_priv.298>
 8006d84:	2100      	movs	r1, #0
 8006d86:	f008 f8c9 	bl	800ef1c <__aeabi_fcmplt>
 8006d8a:	4ea8      	ldr	r6, [pc, #672]	; (800702c <initialize.lto_priv.305+0x69c>)
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d100      	bne.n	8006d92 <initialize.lto_priv.305+0x402>
 8006d90:	4ea7      	ldr	r6, [pc, #668]	; (8007030 <initialize.lto_priv.305+0x6a0>)
 8006d92:	0020      	movs	r0, r4
 8006d94:	f7ff fb62 	bl	800645c <points_to_meter.lto_priv.298>
 8006d98:	4681      	mov	r9, r0
 8006d9a:	0020      	movs	r0, r4
 8006d9c:	f7ff fb5e 	bl	800645c <points_to_meter.lto_priv.298>
 8006da0:	2100      	movs	r1, #0
 8006da2:	f008 f8bb 	bl	800ef1c <__aeabi_fcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d055      	beq.n	8006e56 <initialize.lto_priv.305+0x4c6>
 8006daa:	49a2      	ldr	r1, [pc, #648]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006dac:	4648      	mov	r0, r9
 8006dae:	f007 fbbd 	bl	800e52c <__aeabi_fmul>
 8006db2:	49a1      	ldr	r1, [pc, #644]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006db4:	f007 f90e 	bl	800dfd4 <__aeabi_fadd>
 8006db8:	f008 f8f8 	bl	800efac <__aeabi_f2uiz>
 8006dbc:	4681      	mov	r9, r0
 8006dbe:	0020      	movs	r0, r4
 8006dc0:	f7ff fb4c 	bl	800645c <points_to_meter.lto_priv.298>
 8006dc4:	4682      	mov	sl, r0
 8006dc6:	0020      	movs	r0, r4
 8006dc8:	f7ff fb48 	bl	800645c <points_to_meter.lto_priv.298>
 8006dcc:	2100      	movs	r1, #0
 8006dce:	f008 f8a5 	bl	800ef1c <__aeabi_fcmplt>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d042      	beq.n	8006e5c <initialize.lto_priv.305+0x4cc>
 8006dd6:	4997      	ldr	r1, [pc, #604]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006dd8:	4650      	mov	r0, sl
 8006dda:	f007 fba7 	bl	800e52c <__aeabi_fmul>
 8006dde:	4996      	ldr	r1, [pc, #600]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006de0:	f007 f8f8 	bl	800dfd4 <__aeabi_fadd>
 8006de4:	4682      	mov	sl, r0
 8006de6:	0020      	movs	r0, r4
 8006de8:	f7ff fb38 	bl	800645c <points_to_meter.lto_priv.298>
 8006dec:	4683      	mov	fp, r0
 8006dee:	0020      	movs	r0, r4
 8006df0:	f7ff fb34 	bl	800645c <points_to_meter.lto_priv.298>
 8006df4:	2100      	movs	r1, #0
 8006df6:	f008 f891 	bl	800ef1c <__aeabi_fcmplt>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d031      	beq.n	8006e62 <initialize.lto_priv.305+0x4d2>
 8006dfe:	498d      	ldr	r1, [pc, #564]	; (8007034 <initialize.lto_priv.305+0x6a4>)
 8006e00:	4658      	mov	r0, fp
 8006e02:	f007 fb93 	bl	800e52c <__aeabi_fmul>
 8006e06:	498c      	ldr	r1, [pc, #560]	; (8007038 <initialize.lto_priv.305+0x6a8>)
 8006e08:	f007 f8e4 	bl	800dfd4 <__aeabi_fadd>
 8006e0c:	f008 f8ce 	bl	800efac <__aeabi_f2uiz>
 8006e10:	f008 faec 	bl	800f3ec <__aeabi_ui2f>
 8006e14:	1c01      	adds	r1, r0, #0
 8006e16:	4650      	mov	r0, sl
 8006e18:	f007 fcba 	bl	800e790 <__aeabi_fsub>
 8006e1c:	4987      	ldr	r1, [pc, #540]	; (800703c <initialize.lto_priv.305+0x6ac>)
 8006e1e:	f007 fb85 	bl	800e52c <__aeabi_fmul>
 8006e22:	f008 f8c3 	bl	800efac <__aeabi_f2uiz>
 8006e26:	464b      	mov	r3, r9
 8006e28:	9303      	str	r3, [sp, #12]
 8006e2a:	4643      	mov	r3, r8
 8006e2c:	9004      	str	r0, [sp, #16]
 8006e2e:	9301      	str	r3, [sp, #4]
 8006e30:	2000      	movs	r0, #0
 8006e32:	9602      	str	r6, [sp, #8]
 8006e34:	9700      	str	r7, [sp, #0]
 8006e36:	002b      	movs	r3, r5
 8006e38:	4a81      	ldr	r2, [pc, #516]	; (8007040 <initialize.lto_priv.305+0x6b0>)
 8006e3a:	4982      	ldr	r1, [pc, #520]	; (8007044 <initialize.lto_priv.305+0x6b4>)
 8006e3c:	9c07      	ldr	r4, [sp, #28]
 8006e3e:	47a0      	blx	r4
 8006e40:	2000      	movs	r0, #0
 8006e42:	e5be      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006e44:	21fe      	movs	r1, #254	; 0xfe
 8006e46:	0589      	lsls	r1, r1, #22
 8006e48:	e75a      	b.n	8006d00 <initialize.lto_priv.305+0x370>
 8006e4a:	21fe      	movs	r1, #254	; 0xfe
 8006e4c:	0589      	lsls	r1, r1, #22
 8006e4e:	e76e      	b.n	8006d2e <initialize.lto_priv.305+0x39e>
 8006e50:	21fe      	movs	r1, #254	; 0xfe
 8006e52:	0589      	lsls	r1, r1, #22
 8006e54:	e77f      	b.n	8006d56 <initialize.lto_priv.305+0x3c6>
 8006e56:	21fe      	movs	r1, #254	; 0xfe
 8006e58:	0589      	lsls	r1, r1, #22
 8006e5a:	e7a7      	b.n	8006dac <initialize.lto_priv.305+0x41c>
 8006e5c:	21fe      	movs	r1, #254	; 0xfe
 8006e5e:	0589      	lsls	r1, r1, #22
 8006e60:	e7ba      	b.n	8006dd8 <initialize.lto_priv.305+0x448>
 8006e62:	21fe      	movs	r1, #254	; 0xfe
 8006e64:	0589      	lsls	r1, r1, #22
 8006e66:	e7cb      	b.n	8006e00 <initialize.lto_priv.305+0x470>
 8006e68:	0030      	movs	r0, r6
 8006e6a:	f7fb fedb 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8006e6e:	4643      	mov	r3, r8
 8006e70:	9a07      	ldr	r2, [sp, #28]
 8006e72:	9009      	str	r0, [sp, #36]	; 0x24
 8006e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e76:	1a98      	subs	r0, r3, r2
 8006e78:	f007 ff14 	bl	800eca4 <__divsi3>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	b283      	uxth	r3, r0
 8006e80:	0030      	movs	r0, r6
 8006e82:	930a      	str	r3, [sp, #40]	; 0x28
 8006e84:	f7fc fbf2 	bl	800366c <acc_base_configuration_sparse_sweeps_per_frame_get>
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	4358      	muls	r0, r3
 8006e8c:	b283      	uxth	r3, r0
 8006e8e:	0030      	movs	r0, r6
 8006e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e92:	f7ff fba9 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006e96:	2300      	movs	r3, #0
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	d009      	beq.n	8006eb0 <initialize.lto_priv.305+0x520>
 8006e9c:	0032      	movs	r2, r6
 8006e9e:	324f      	adds	r2, #79	; 0x4f
 8006ea0:	0033      	movs	r3, r6
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	3352      	adds	r3, #82	; 0x52
 8006ea6:	1e51      	subs	r1, r2, #1
 8006ea8:	418a      	sbcs	r2, r1
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	4252      	negs	r2, r2
 8006eae:	4013      	ands	r3, r2
 8006eb0:	002a      	movs	r2, r5
 8006eb2:	32b8      	adds	r2, #184	; 0xb8
 8006eb4:	8013      	strh	r3, [r2, #0]
 8006eb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006eb8:	4694      	mov	ip, r2
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	4463      	add	r3, ip
 8006ebe:	0112      	lsls	r2, r2, #4
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	dd07      	ble.n	8006ed4 <initialize.lto_priv.305+0x544>
 8006ec4:	4b58      	ldr	r3, [pc, #352]	; (8007028 <initialize.lto_priv.305+0x698>)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	4a5f      	ldr	r2, [pc, #380]	; (8007048 <initialize.lto_priv.305+0x6b8>)
 8006ecc:	495d      	ldr	r1, [pc, #372]	; (8007044 <initialize.lto_priv.305+0x6b4>)
 8006ece:	4798      	blx	r3
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	e576      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006ed4:	0030      	movs	r0, r6
 8006ed6:	f7fc fc33 	bl	8003740 <acc_base_configuration_hw_accelerated_average_samples_get>
 8006eda:	4681      	mov	r9, r0
 8006edc:	0030      	movs	r0, r6
 8006ede:	f7ff fb83 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006ee2:	2406      	movs	r4, #6
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d000      	beq.n	8006eea <initialize.lto_priv.305+0x55a>
 8006ee8:	783c      	ldrb	r4, [r7, #0]
 8006eea:	0030      	movs	r0, r6
 8006eec:	f7ff fb7c 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef4:	435a      	muls	r2, r3
 8006ef6:	920c      	str	r2, [sp, #48]	; 0x30
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d004      	beq.n	8006f06 <initialize.lto_priv.305+0x576>
 8006efc:	0032      	movs	r2, r6
 8006efe:	326a      	adds	r2, #106	; 0x6a
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	2a00      	cmp	r2, #0
 8006f04:	d142      	bne.n	8006f8c <initialize.lto_priv.305+0x5fc>
 8006f06:	464b      	mov	r3, r9
 8006f08:	2007      	movs	r0, #7
 8006f0a:	4358      	muls	r0, r3
 8006f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0e:	300d      	adds	r0, #13
 8006f10:	4358      	muls	r0, r3
 8006f12:	4344      	muls	r4, r0
 8006f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f16:	0023      	movs	r3, r4
 8006f18:	4694      	mov	ip, r2
 8006f1a:	4463      	add	r3, ip
 8006f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f1e:	f7ff fa8b 	bl	8006438 <get_pll_freq>
 8006f22:	21f4      	movs	r1, #244	; 0xf4
 8006f24:	0589      	lsls	r1, r1, #22
 8006f26:	f007 fb01 	bl	800e52c <__aeabi_fmul>
 8006f2a:	9014      	str	r0, [sp, #80]	; 0x50
 8006f2c:	0030      	movs	r0, r6
 8006f2e:	f7ff fb5b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d03d      	beq.n	8006fb2 <initialize.lto_priv.305+0x622>
 8006f36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006f38:	f008 fa58 	bl	800f3ec <__aeabi_ui2f>
 8006f3c:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8006f3e:	1c07      	adds	r7, r0, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	1c20      	adds	r0, r4, #0
 8006f44:	f007 fffe 	bl	800ef44 <__aeabi_fcmpgt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d032      	beq.n	8006fb2 <initialize.lto_priv.305+0x622>
 8006f4c:	1c21      	adds	r1, r4, #0
 8006f4e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006f50:	f007 f9da 	bl	800e308 <__aeabi_fdiv>
 8006f54:	1c39      	adds	r1, r7, #0
 8006f56:	f007 fc1b 	bl	800e790 <__aeabi_fsub>
 8006f5a:	1c04      	adds	r4, r0, #0
 8006f5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f5e:	f008 fa45 	bl	800f3ec <__aeabi_ui2f>
 8006f62:	1c01      	adds	r1, r0, #0
 8006f64:	1c20      	adds	r0, r4, #0
 8006f66:	f007 f9cf 	bl	800e308 <__aeabi_fdiv>
 8006f6a:	21fc      	movs	r1, #252	; 0xfc
 8006f6c:	0589      	lsls	r1, r1, #22
 8006f6e:	f007 f831 	bl	800dfd4 <__aeabi_fadd>
 8006f72:	f008 f9d1 	bl	800f318 <__aeabi_f2iz>
 8006f76:	900d      	str	r0, [sp, #52]	; 0x34
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	da0f      	bge.n	8006f9c <initialize.lto_priv.305+0x60c>
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <initialize.lto_priv.305+0x698>)
 8006f7e:	2000      	movs	r0, #0
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	4a32      	ldr	r2, [pc, #200]	; (800704c <initialize.lto_priv.305+0x6bc>)
 8006f84:	492f      	ldr	r1, [pc, #188]	; (8007044 <initialize.lto_priv.305+0x6b4>)
 8006f86:	4798      	blx	r3
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e51a      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006f8c:	464a      	mov	r2, r9
 8006f8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f90:	930c      	str	r3, [sp, #48]	; 0x30
 8006f92:	4350      	muls	r0, r2
 8006f94:	300f      	adds	r0, #15
 8006f96:	4344      	muls	r4, r0
 8006f98:	34d4      	adds	r4, #212	; 0xd4
 8006f9a:	e7bb      	b.n	8006f14 <initialize.lto_priv.305+0x584>
 8006f9c:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <initialize.lto_priv.305+0x6c0>)
 8006f9e:	4298      	cmp	r0, r3
 8006fa0:	dd08      	ble.n	8006fb4 <initialize.lto_priv.305+0x624>
 8006fa2:	4b21      	ldr	r3, [pc, #132]	; (8007028 <initialize.lto_priv.305+0x698>)
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	4a2a      	ldr	r2, [pc, #168]	; (8007054 <initialize.lto_priv.305+0x6c4>)
 8006faa:	4926      	ldr	r1, [pc, #152]	; (8007044 <initialize.lto_priv.305+0x6b4>)
 8006fac:	4798      	blx	r3
 8006fae:	2000      	movs	r0, #0
 8006fb0:	e507      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 8006fb2:	900d      	str	r0, [sp, #52]	; 0x34
 8006fb4:	002b      	movs	r3, r5
 8006fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fb8:	33b6      	adds	r3, #182	; 0xb6
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	0030      	movs	r0, r6
 8006fbe:	f7fc fbd3 	bl	8003768 <acc_base_configuration_tx_disable_get>
 8006fc2:	002b      	movs	r3, r5
 8006fc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fc6:	33ba      	adds	r3, #186	; 0xba
 8006fc8:	7018      	strb	r0, [r3, #0]
 8006fca:	3b06      	subs	r3, #6
 8006fcc:	801a      	strh	r2, [r3, #0]
 8006fce:	0033      	movs	r3, r6
 8006fd0:	332e      	adds	r3, #46	; 0x2e
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d022      	beq.n	800701e <initialize.lto_priv.305+0x68e>
 8006fd8:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8006fda:	465b      	mov	r3, fp
 8006fdc:	809c      	strh	r4, [r3, #4]
 8006fde:	466b      	mov	r3, sp
 8006fe0:	8b9f      	ldrh	r7, [r3, #28]
 8006fe2:	465b      	mov	r3, fp
 8006fe4:	9a07      	ldr	r2, [sp, #28]
 8006fe6:	811a      	strh	r2, [r3, #8]
 8006fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fea:	815a      	strh	r2, [r3, #10]
 8006fec:	2301      	movs	r3, #1
 8006fee:	4699      	mov	r9, r3
 8006ff0:	465b      	mov	r3, fp
 8006ff2:	464a      	mov	r2, r9
 8006ff4:	819a      	strh	r2, [r3, #12]
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b07      	cmp	r3, #7
 8006ffe:	d806      	bhi.n	800700e <initialize.lto_priv.305+0x67e>
 8007000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007002:	2008      	movs	r0, #8
 8007004:	f007 ff34 	bl	800ee70 <__aeabi_idivmod>
 8007008:	910e      	str	r1, [sp, #56]	; 0x38
 800700a:	2900      	cmp	r1, #0
 800700c:	d026      	beq.n	800705c <initialize.lto_priv.305+0x6cc>
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <initialize.lto_priv.305+0x698>)
 8007010:	2000      	movs	r0, #0
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	4a10      	ldr	r2, [pc, #64]	; (8007058 <initialize.lto_priv.305+0x6c8>)
 8007016:	490b      	ldr	r1, [pc, #44]	; (8007044 <initialize.lto_priv.305+0x6b4>)
 8007018:	4798      	blx	r3
 800701a:	2000      	movs	r0, #0
 800701c:	e4d1      	b.n	80069c2 <initialize.lto_priv.305+0x32>
 800701e:	0033      	movs	r3, r6
 8007020:	3332      	adds	r3, #50	; 0x32
 8007022:	781c      	ldrb	r4, [r3, #0]
 8007024:	e7d9      	b.n	8006fda <initialize.lto_priv.305+0x64a>
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	200003f0 	.word	0x200003f0
 800702c:	0801db44 	.word	0x0801db44
 8007030:	0801c144 	.word	0x0801c144
 8007034:	bf800000 	.word	0xbf800000
 8007038:	350637bd 	.word	0x350637bd
 800703c:	49742400 	.word	0x49742400
 8007040:	0801cea5 	.word	0x0801cea5
 8007044:	0801cb6e 	.word	0x0801cb6e
 8007048:	0801cee2 	.word	0x0801cee2
 800704c:	0801cf42 	.word	0x0801cf42
 8007050:	0000fffe 	.word	0x0000fffe
 8007054:	0801cf63 	.word	0x0801cf63
 8007058:	0801cf83 	.word	0x0801cf83
 800705c:	b224      	sxth	r4, r4
 800705e:	3c01      	subs	r4, #1
 8007060:	0164      	lsls	r4, r4, #5
 8007062:	b2a3      	uxth	r3, r4
 8007064:	001c      	movs	r4, r3
 8007066:	3c0f      	subs	r4, #15
 8007068:	b2a4      	uxth	r4, r4
 800706a:	1b3f      	subs	r7, r7, r4
 800706c:	b23f      	sxth	r7, r7
 800706e:	9315      	str	r3, [sp, #84]	; 0x54
 8007070:	10fb      	asrs	r3, r7, #3
 8007072:	9318      	str	r3, [sp, #96]	; 0x60
 8007074:	4643      	mov	r3, r8
 8007076:	1b1c      	subs	r4, r3, r4
 8007078:	464b      	mov	r3, r9
 800707a:	10f9      	asrs	r1, r7, #3
 800707c:	b224      	sxth	r4, r4
 800707e:	10e2      	asrs	r2, r4, #3
 8007080:	1a5b      	subs	r3, r3, r1
 8007082:	189b      	adds	r3, r3, r2
 8007084:	b29b      	uxth	r3, r3
 8007086:	9311      	str	r3, [sp, #68]	; 0x44
 8007088:	2244      	movs	r2, #68	; 0x44
 800708a:	466b      	mov	r3, sp
 800708c:	189b      	adds	r3, r3, r2
 800708e:	2200      	movs	r2, #0
 8007090:	5e9b      	ldrsh	r3, [r3, r2]
 8007092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007094:	2008      	movs	r0, #8
 8007096:	4699      	mov	r9, r3
 8007098:	f007 fe04 	bl	800eca4 <__divsi3>
 800709c:	9010      	str	r0, [sp, #64]	; 0x40
 800709e:	48db      	ldr	r0, [pc, #876]	; (800740c <initialize.lto_priv.305+0xa7c>)
 80070a0:	4007      	ands	r7, r0
 80070a2:	9012      	str	r0, [sp, #72]	; 0x48
 80070a4:	d504      	bpl.n	80070b0 <initialize.lto_priv.305+0x720>
 80070a6:	2308      	movs	r3, #8
 80070a8:	3f01      	subs	r7, #1
 80070aa:	425b      	negs	r3, r3
 80070ac:	431f      	orrs	r7, r3
 80070ae:	3701      	adds	r7, #1
 80070b0:	b23f      	sxth	r7, r7
 80070b2:	2f00      	cmp	r7, #0
 80070b4:	da01      	bge.n	80070ba <initialize.lto_priv.305+0x72a>
 80070b6:	3708      	adds	r7, #8
 80070b8:	b23f      	sxth	r7, r7
 80070ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070bc:	0038      	movs	r0, r7
 80070be:	f007 fed7 	bl	800ee70 <__aeabi_idivmod>
 80070c2:	466b      	mov	r3, sp
 80070c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80070c6:	213c      	movs	r1, #60	; 0x3c
 80070c8:	5e59      	ldrsh	r1, [r3, r1]
 80070ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070ce:	3b01      	subs	r3, #1
 80070d0:	9316      	str	r3, [sp, #88]	; 0x58
 80070d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d6:	4004      	ands	r4, r0
 80070d8:	4353      	muls	r3, r2
 80070da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80070dc:	4694      	mov	ip, r2
 80070de:	4463      	add	r3, ip
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	b21a      	sxth	r2, r3
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	da04      	bge.n	80070f2 <initialize.lto_priv.305+0x762>
 80070e8:	2008      	movs	r0, #8
 80070ea:	3c01      	subs	r4, #1
 80070ec:	4240      	negs	r0, r0
 80070ee:	4304      	orrs	r4, r0
 80070f0:	3401      	adds	r4, #1
 80070f2:	b224      	sxth	r4, r4
 80070f4:	2c00      	cmp	r4, #0
 80070f6:	da01      	bge.n	80070fc <initialize.lto_priv.305+0x76c>
 80070f8:	3408      	adds	r4, #8
 80070fa:	b224      	sxth	r4, r4
 80070fc:	4648      	mov	r0, r9
 80070fe:	2801      	cmp	r0, #1
 8007100:	d172      	bne.n	80071e8 <initialize.lto_priv.305+0x858>
 8007102:	46cc      	mov	ip, r9
 8007104:	42b9      	cmp	r1, r7
 8007106:	d102      	bne.n	800710e <initialize.lto_priv.305+0x77e>
 8007108:	1b10      	subs	r0, r2, r4
 800710a:	1e42      	subs	r2, r0, #1
 800710c:	4190      	sbcs	r0, r2
 800710e:	4662      	mov	r2, ip
 8007110:	4002      	ands	r2, r0
 8007112:	9210      	str	r2, [sp, #64]	; 0x40
 8007114:	2200      	movs	r2, #0
 8007116:	9212      	str	r2, [sp, #72]	; 0x48
 8007118:	2000      	movs	r0, #0
 800711a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800711c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800711e:	1a52      	subs	r2, r2, r1
 8007120:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007122:	1a52      	subs	r2, r2, r1
 8007124:	b212      	sxth	r2, r2
 8007126:	9211      	str	r2, [sp, #68]	; 0x44
 8007128:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800712a:	4282      	cmp	r2, r0
 800712c:	d008      	beq.n	8007140 <initialize.lto_priv.305+0x7b0>
 800712e:	464a      	mov	r2, r9
 8007130:	2a01      	cmp	r2, #1
 8007132:	d100      	bne.n	8007136 <initialize.lto_priv.305+0x7a6>
 8007134:	b2a3      	uxth	r3, r4
 8007136:	1bd8      	subs	r0, r3, r7
 8007138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800713a:	f007 fdb3 	bl	800eca4 <__divsi3>
 800713e:	b280      	uxth	r0, r0
 8007140:	465b      	mov	r3, fp
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2205      	movs	r2, #5
 8007146:	0019      	movs	r1, r3
 8007148:	4699      	mov	r9, r3
 800714a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800714c:	318c      	adds	r1, #140	; 0x8c
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	600b      	str	r3, [r1, #0]
 8007154:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007156:	464a      	mov	r2, r9
 8007158:	468c      	mov	ip, r1
 800715a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800715c:	3290      	adds	r2, #144	; 0x90
 800715e:	3b32      	subs	r3, #50	; 0x32
 8007160:	b21b      	sxth	r3, r3
 8007162:	18ff      	adds	r7, r7, r3
 8007164:	4463      	add	r3, ip
 8007166:	6053      	str	r3, [r2, #4]
 8007168:	464b      	mov	r3, r9
 800716a:	6017      	str	r7, [r2, #0]
 800716c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800716e:	3398      	adds	r3, #152	; 0x98
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	464a      	mov	r2, r9
 8007174:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007176:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007178:	17db      	asrs	r3, r3, #31
 800717a:	1a5b      	subs	r3, r3, r1
 800717c:	329c      	adds	r2, #156	; 0x9c
 800717e:	0fdb      	lsrs	r3, r3, #31
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	464b      	mov	r3, r9
 8007184:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007186:	33a0      	adds	r3, #160	; 0xa0
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800718c:	6058      	str	r0, [r3, #4]
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	4663      	mov	r3, ip
 8007192:	464f      	mov	r7, r9
 8007194:	1ae0      	subs	r0, r4, r3
 8007196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007198:	f007 fd84 	bl	800eca4 <__divsi3>
 800719c:	2200      	movs	r2, #0
 800719e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071a0:	37ac      	adds	r7, #172	; 0xac
 80071a2:	6038      	str	r0, [r7, #0]
 80071a4:	4293      	cmp	r3, r2
 80071a6:	dd01      	ble.n	80071ac <initialize.lto_priv.305+0x81c>
 80071a8:	001a      	movs	r2, r3
 80071aa:	3a01      	subs	r2, #1
 80071ac:	464b      	mov	r3, r9
 80071ae:	33b0      	adds	r3, #176	; 0xb0
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	0030      	movs	r0, r6
 80071b4:	f7ff fa18 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80071b8:	2300      	movs	r3, #0
 80071ba:	4298      	cmp	r0, r3
 80071bc:	d005      	beq.n	80071ca <initialize.lto_priv.305+0x83a>
 80071be:	0033      	movs	r3, r6
 80071c0:	336a      	adds	r3, #106	; 0x6a
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	1e5a      	subs	r2, r3, #1
 80071c6:	4193      	sbcs	r3, r2
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	222e      	movs	r2, #46	; 0x2e
 80071cc:	66aa      	str	r2, [r5, #104]	; 0x68
 80071ce:	002a      	movs	r2, r5
 80071d0:	3270      	adds	r2, #112	; 0x70
 80071d2:	7013      	strb	r3, [r2, #0]
 80071d4:	0030      	movs	r0, r6
 80071d6:	f7fc faa9 	bl	800372c <acc_base_configuration_repetition_mode_get>
 80071da:	2803      	cmp	r0, #3
 80071dc:	d813      	bhi.n	8007206 <initialize.lto_priv.305+0x876>
 80071de:	2300      	movs	r3, #0
 80071e0:	f007 fcc2 	bl	800eb68 <__gnu_thumb1_case_uqi>
 80071e4:	33231d0d 	.word	0x33231d0d
 80071e8:	1bc9      	subs	r1, r1, r7
 80071ea:	1e48      	subs	r0, r1, #1
 80071ec:	4181      	sbcs	r1, r0
 80071ee:	1b12      	subs	r2, r2, r4
 80071f0:	b2c9      	uxtb	r1, r1
 80071f2:	9110      	str	r1, [sp, #64]	; 0x40
 80071f4:	1e51      	subs	r1, r2, #1
 80071f6:	418a      	sbcs	r2, r1
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	9212      	str	r2, [sp, #72]	; 0x48
 80071fc:	e78c      	b.n	8007118 <initialize.lto_priv.305+0x788>
 80071fe:	626b      	str	r3, [r5, #36]	; 0x24
 8007200:	62ab      	str	r3, [r5, #40]	; 0x28
 8007202:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007204:	632b      	str	r3, [r5, #48]	; 0x30
 8007206:	0030      	movs	r0, r6
 8007208:	f7fc fab7 	bl	800377a <acc_base_configuration_power_save_mode_get>
 800720c:	2804      	cmp	r0, #4
 800720e:	d829      	bhi.n	8007264 <initialize.lto_priv.305+0x8d4>
 8007210:	2300      	movs	r3, #0
 8007212:	2201      	movs	r2, #1
 8007214:	f007 fca8 	bl	800eb68 <__gnu_thumb1_case_uqi>
 8007218:	f0ec2323 	.word	0xf0ec2323
 800721c:	e8          	.byte	0xe8
 800721d:	00          	.byte	0x00
 800721e:	2201      	movs	r2, #1
 8007220:	626b      	str	r3, [r5, #36]	; 0x24
 8007222:	62aa      	str	r2, [r5, #40]	; 0x28
 8007224:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007226:	632b      	str	r3, [r5, #48]	; 0x30
 8007228:	e7ed      	b.n	8007206 <initialize.lto_priv.305+0x876>
 800722a:	0030      	movs	r0, r6
 800722c:	f7fc fa68 	bl	8003700 <acc_base_configuration_update_rate_get>
 8007230:	aa1a      	add	r2, sp, #104	; 0x68
 8007232:	a91b      	add	r1, sp, #108	; 0x6c
 8007234:	f7fe ffb8 	bl	80061a8 <acc_radar_engine_common_frequency_to_main_clk>
 8007238:	2301      	movs	r3, #1
 800723a:	626b      	str	r3, [r5, #36]	; 0x24
 800723c:	2300      	movs	r3, #0
 800723e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007240:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007242:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007246:	632b      	str	r3, [r5, #48]	; 0x30
 8007248:	e7dd      	b.n	8007206 <initialize.lto_priv.305+0x876>
 800724a:	0030      	movs	r0, r6
 800724c:	f7fc fa58 	bl	8003700 <acc_base_configuration_update_rate_get>
 8007250:	aa1a      	add	r2, sp, #104	; 0x68
 8007252:	a91b      	add	r1, sp, #108	; 0x6c
 8007254:	f7fe ffa8 	bl	80061a8 <acc_radar_engine_common_frequency_to_main_clk>
 8007258:	2301      	movs	r3, #1
 800725a:	626b      	str	r3, [r5, #36]	; 0x24
 800725c:	e7ef      	b.n	800723e <initialize.lto_priv.305+0x8ae>
 800725e:	636a      	str	r2, [r5, #52]	; 0x34
 8007260:	63aa      	str	r2, [r5, #56]	; 0x38
 8007262:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007264:	0030      	movs	r0, r6
 8007266:	f7ff f9bf 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800726a:	2300      	movs	r3, #0
 800726c:	0004      	movs	r4, r0
 800726e:	4298      	cmp	r0, r3
 8007270:	d00b      	beq.n	800728a <initialize.lto_priv.305+0x8fa>
 8007272:	0033      	movs	r3, r6
 8007274:	3350      	adds	r3, #80	; 0x50
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	9317      	str	r3, [sp, #92]	; 0x5c
 800727a:	0033      	movs	r3, r6
 800727c:	3352      	adds	r3, #82	; 0x52
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	9319      	str	r3, [sp, #100]	; 0x64
 8007282:	0033      	movs	r3, r6
 8007284:	334f      	adds	r3, #79	; 0x4f
 8007286:	781c      	ldrb	r4, [r3, #0]
 8007288:	0023      	movs	r3, r4
 800728a:	002a      	movs	r2, r5
 800728c:	3208      	adds	r2, #8
 800728e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007290:	2c00      	cmp	r4, #0
 8007292:	d003      	beq.n	800729c <initialize.lto_priv.305+0x90c>
 8007294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007296:	3280      	adds	r2, #128	; 0x80
 8007298:	3b01      	subs	r3, #1
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	0030      	movs	r0, r6
 800729e:	f7fc fa63 	bl	8003768 <acc_base_configuration_tx_disable_get>
 80072a2:	2701      	movs	r7, #1
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d000      	beq.n	80072aa <initialize.lto_priv.305+0x91a>
 80072a8:	e0aa      	b.n	8007400 <initialize.lto_priv.305+0xa70>
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d001      	beq.n	80072b2 <initialize.lto_priv.305+0x922>
 80072ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072b0:	930e      	str	r3, [sp, #56]	; 0x38
 80072b2:	003b      	movs	r3, r7
 80072b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072b6:	0030      	movs	r0, r6
 80072b8:	4393      	bics	r3, r2
 80072ba:	642b      	str	r3, [r5, #64]	; 0x40
 80072bc:	f7fc fa4b 	bl	8003756 <acc_base_configuration_decrease_tx_emission_get>
 80072c0:	4078      	eors	r0, r7
 80072c2:	b2c0      	uxtb	r0, r0
 80072c4:	6468      	str	r0, [r5, #68]	; 0x44
 80072c6:	64af      	str	r7, [r5, #72]	; 0x48
 80072c8:	0030      	movs	r0, r6
 80072ca:	f7fc fa39 	bl	8003740 <acc_base_configuration_hw_accelerated_average_samples_get>
 80072ce:	2801      	cmp	r0, #1
 80072d0:	d800      	bhi.n	80072d4 <initialize.lto_priv.305+0x944>
 80072d2:	e097      	b.n	8007404 <initialize.lto_priv.305+0xa74>
 80072d4:	2301      	movs	r3, #1
 80072d6:	3802      	subs	r0, #2
 80072d8:	6528      	str	r0, [r5, #80]	; 0x50
 80072da:	64eb      	str	r3, [r5, #76]	; 0x4c
 80072dc:	0030      	movs	r0, r6
 80072de:	f7ff f983 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80072e2:	2300      	movs	r3, #0
 80072e4:	4298      	cmp	r0, r3
 80072e6:	d000      	beq.n	80072ea <initialize.lto_priv.305+0x95a>
 80072e8:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80072ea:	656b      	str	r3, [r5, #84]	; 0x54
 80072ec:	0030      	movs	r0, r6
 80072ee:	f7fc f9fc 	bl	80036ea <acc_base_configuration_integrator_get>
 80072f2:	65a8      	str	r0, [r5, #88]	; 0x58
 80072f4:	0030      	movs	r0, r6
 80072f6:	f7fc f9ed 	bl	80036d4 <acc_base_configuration_wg_duration_get>
 80072fa:	65e8      	str	r0, [r5, #92]	; 0x5c
 80072fc:	0030      	movs	r0, r6
 80072fe:	f7fc f9b5 	bl	800366c <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007302:	6628      	str	r0, [r5, #96]	; 0x60
 8007304:	0030      	movs	r0, r6
 8007306:	f7fb fc8d 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 800730a:	67a8      	str	r0, [r5, #120]	; 0x78
 800730c:	0030      	movs	r0, r6
 800730e:	f7fb fc77 	bl	8002c00 <acc_base_configuration_asynchronous_measurement_get>
 8007312:	2601      	movs	r6, #1
 8007314:	465b      	mov	r3, fp
 8007316:	4070      	eors	r0, r6
 8007318:	b2c0      	uxtb	r0, r0
 800731a:	67e8      	str	r0, [r5, #124]	; 0x7c
 800731c:	889b      	ldrh	r3, [r3, #4]
 800731e:	666b      	str	r3, [r5, #100]	; 0x64
 8007320:	465b      	mov	r3, fp
 8007322:	895b      	ldrh	r3, [r3, #10]
 8007324:	3b01      	subs	r3, #1
 8007326:	66eb      	str	r3, [r5, #108]	; 0x6c
 8007328:	465b      	mov	r3, fp
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	33b6      	adds	r3, #182	; 0xb6
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	676b      	str	r3, [r5, #116]	; 0x74
 8007332:	f7fe ff31 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 8007336:	1d2b      	adds	r3, r5, #4
 8007338:	67d8      	str	r0, [r3, #124]	; 0x7c
 800733a:	f7ff f87d 	bl	8006438 <get_pll_freq>
 800733e:	1c07      	adds	r7, r0, #0
 8007340:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007342:	f008 f853 	bl	800f3ec <__aeabi_ui2f>
 8007346:	1c04      	adds	r4, r0, #0
 8007348:	20fe      	movs	r0, #254	; 0xfe
 800734a:	1c39      	adds	r1, r7, #0
 800734c:	0580      	lsls	r0, r0, #22
 800734e:	f006 ffdb 	bl	800e308 <__aeabi_fdiv>
 8007352:	1c01      	adds	r1, r0, #0
 8007354:	1c20      	adds	r0, r4, #0
 8007356:	f007 f8e9 	bl	800e52c <__aeabi_fmul>
 800735a:	4653      	mov	r3, sl
 800735c:	60d8      	str	r0, [r3, #12]
 800735e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007360:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007362:	35b8      	adds	r5, #184	; 0xb8
 8007364:	4358      	muls	r0, r3
 8007366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007368:	469c      	mov	ip, r3
 800736a:	4460      	add	r0, ip
 800736c:	f008 f83e 	bl	800f3ec <__aeabi_ui2f>
 8007370:	1c01      	adds	r1, r0, #0
 8007372:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007374:	f006 ffc8 	bl	800e308 <__aeabi_fdiv>
 8007378:	4653      	mov	r3, sl
 800737a:	6118      	str	r0, [r3, #16]
 800737c:	9807      	ldr	r0, [sp, #28]
 800737e:	f7ff f86d 	bl	800645c <points_to_meter.lto_priv.298>
 8007382:	4653      	mov	r3, sl
 8007384:	6018      	str	r0, [r3, #0]
 8007386:	4640      	mov	r0, r8
 8007388:	f7ff f868 	bl	800645c <points_to_meter.lto_priv.298>
 800738c:	4653      	mov	r3, sl
 800738e:	6819      	ldr	r1, [r3, #0]
 8007390:	6098      	str	r0, [r3, #8]
 8007392:	f007 f9fd 	bl	800e790 <__aeabi_fsub>
 8007396:	4653      	mov	r3, sl
 8007398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739a:	6058      	str	r0, [r3, #4]
 800739c:	82da      	strh	r2, [r3, #22]
 800739e:	2300      	movs	r3, #0
 80073a0:	4652      	mov	r2, sl
 80073a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073a4:	8293      	strh	r3, [r2, #20]
 80073a6:	8316      	strh	r6, [r2, #24]
 80073a8:	9a08      	ldr	r2, [sp, #32]
 80073aa:	2013      	movs	r0, #19
 80073ac:	8011      	strh	r1, [r2, #0]
 80073ae:	8151      	strh	r1, [r2, #10]
 80073b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073b2:	8053      	strh	r3, [r2, #2]
 80073b4:	8111      	strh	r1, [r2, #8]
 80073b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073b8:	8313      	strh	r3, [r2, #24]
 80073ba:	8091      	strh	r1, [r2, #4]
 80073bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073be:	80d6      	strh	r6, [r2, #6]
 80073c0:	8291      	strh	r1, [r2, #20]
 80073c2:	82d1      	strh	r1, [r2, #22]
 80073c4:	4659      	mov	r1, fp
 80073c6:	8216      	strh	r6, [r2, #16]
 80073c8:	aa1b      	add	r2, sp, #108	; 0x6c
 80073ca:	8013      	strh	r3, [r2, #0]
 80073cc:	6809      	ldr	r1, [r1, #0]
 80073ce:	0033      	movs	r3, r6
 80073d0:	f006 fb7a 	bl	800dac8 <acc_probes_execute_uint16>
 80073d4:	882b      	ldrh	r3, [r5, #0]
 80073d6:	9a08      	ldr	r2, [sp, #32]
 80073d8:	3303      	adds	r3, #3
 80073da:	81d3      	strh	r3, [r2, #14]
 80073dc:	2380      	movs	r3, #128	; 0x80
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	8193      	strh	r3, [r2, #12]
 80073e2:	0030      	movs	r0, r6
 80073e4:	f7ff faed 	bl	80069c2 <initialize.lto_priv.305+0x32>
 80073e8:	636a      	str	r2, [r5, #52]	; 0x34
 80073ea:	63aa      	str	r2, [r5, #56]	; 0x38
 80073ec:	63ea      	str	r2, [r5, #60]	; 0x3c
 80073ee:	e739      	b.n	8007264 <initialize.lto_priv.305+0x8d4>
 80073f0:	636a      	str	r2, [r5, #52]	; 0x34
 80073f2:	63ab      	str	r3, [r5, #56]	; 0x38
 80073f4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80073f6:	e735      	b.n	8007264 <initialize.lto_priv.305+0x8d4>
 80073f8:	636b      	str	r3, [r5, #52]	; 0x34
 80073fa:	63ab      	str	r3, [r5, #56]	; 0x38
 80073fc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80073fe:	e731      	b.n	8007264 <initialize.lto_priv.305+0x8d4>
 8007400:	970e      	str	r7, [sp, #56]	; 0x38
 8007402:	e756      	b.n	80072b2 <initialize.lto_priv.305+0x922>
 8007404:	2000      	movs	r0, #0
 8007406:	0003      	movs	r3, r0
 8007408:	e766      	b.n	80072d8 <initialize.lto_priv.305+0x948>
 800740a:	46c0      	nop			; (mov r8, r8)
 800740c:	80000007 	.word	0x80000007

08007410 <initialize.lto_priv.304>:
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	464e      	mov	r6, r9
 8007414:	46de      	mov	lr, fp
 8007416:	4657      	mov	r7, sl
 8007418:	4645      	mov	r5, r8
 800741a:	b5e0      	push	{r5, r6, r7, lr}
 800741c:	b097      	sub	sp, #92	; 0x5c
 800741e:	9306      	str	r3, [sp, #24]
 8007420:	2332      	movs	r3, #50	; 0x32
 8007422:	469a      	mov	sl, r3
 8007424:	448a      	add	sl, r1
 8007426:	4653      	mov	r3, sl
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	4681      	mov	r9, r0
 800742c:	000e      	movs	r6, r1
 800742e:	4693      	mov	fp, r2
 8007430:	2b06      	cmp	r3, #6
 8007432:	d00f      	beq.n	8007454 <initialize.lto_priv.304+0x44>
 8007434:	2b09      	cmp	r3, #9
 8007436:	d00d      	beq.n	8007454 <initialize.lto_priv.304+0x44>
 8007438:	4b7a      	ldr	r3, [pc, #488]	; (8007624 <initialize.lto_priv.304+0x214>)
 800743a:	2000      	movs	r0, #0
 800743c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743e:	4a7a      	ldr	r2, [pc, #488]	; (8007628 <initialize.lto_priv.304+0x218>)
 8007440:	497a      	ldr	r1, [pc, #488]	; (800762c <initialize.lto_priv.304+0x21c>)
 8007442:	4798      	blx	r3
 8007444:	2000      	movs	r0, #0
 8007446:	b017      	add	sp, #92	; 0x5c
 8007448:	bc3c      	pop	{r2, r3, r4, r5}
 800744a:	4690      	mov	r8, r2
 800744c:	4699      	mov	r9, r3
 800744e:	46a2      	mov	sl, r4
 8007450:	46ab      	mov	fp, r5
 8007452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007454:	464b      	mov	r3, r9
 8007456:	0030      	movs	r0, r6
 8007458:	695d      	ldr	r5, [r3, #20]
 800745a:	f7ff f8c5 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800745e:	2300      	movs	r3, #0
 8007460:	4298      	cmp	r0, r3
 8007462:	d00c      	beq.n	800747e <initialize.lto_priv.304+0x6e>
 8007464:	0032      	movs	r2, r6
 8007466:	324f      	adds	r2, #79	; 0x4f
 8007468:	7810      	ldrb	r0, [r2, #0]
 800746a:	0033      	movs	r3, r6
 800746c:	0002      	movs	r2, r0
 800746e:	1e51      	subs	r1, r2, #1
 8007470:	418a      	sbcs	r2, r1
 8007472:	3350      	adds	r3, #80	; 0x50
 8007474:	781c      	ldrb	r4, [r3, #0]
 8007476:	3302      	adds	r3, #2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	4252      	negs	r2, r2
 800747c:	4013      	ands	r3, r2
 800747e:	002a      	movs	r2, r5
 8007480:	32ce      	adds	r2, #206	; 0xce
 8007482:	8013      	strh	r3, [r2, #0]
 8007484:	2800      	cmp	r0, #0
 8007486:	d000      	beq.n	800748a <initialize.lto_priv.304+0x7a>
 8007488:	0020      	movs	r0, r4
 800748a:	002b      	movs	r3, r5
 800748c:	33d0      	adds	r3, #208	; 0xd0
 800748e:	7018      	strb	r0, [r3, #0]
 8007490:	0030      	movs	r0, r6
 8007492:	f7fb fbc7 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8007496:	002b      	movs	r3, r5
 8007498:	2700      	movs	r7, #0
 800749a:	33cc      	adds	r3, #204	; 0xcc
 800749c:	8018      	strh	r0, [r3, #0]
 800749e:	3b10      	subs	r3, #16
 80074a0:	601f      	str	r7, [r3, #0]
 80074a2:	0030      	movs	r0, r6
 80074a4:	f7fc f960 	bl	8003768 <acc_base_configuration_tx_disable_get>
 80074a8:	002b      	movs	r3, r5
 80074aa:	2201      	movs	r2, #1
 80074ac:	33c0      	adds	r3, #192	; 0xc0
 80074ae:	7018      	strb	r0, [r3, #0]
 80074b0:	3b13      	subs	r3, #19
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	0028      	movs	r0, r5
 80074b6:	f7fe fb3d 	bl	8005b34 <get_package_range_coarse_max>
 80074ba:	9008      	str	r0, [sp, #32]
 80074bc:	0030      	movs	r0, r6
 80074be:	f7ff f893 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80074c2:	42b8      	cmp	r0, r7
 80074c4:	d052      	beq.n	800756c <initialize.lto_priv.304+0x15c>
 80074c6:	0033      	movs	r3, r6
 80074c8:	332c      	adds	r3, #44	; 0x2c
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	42bb      	cmp	r3, r7
 80074ce:	d04d      	beq.n	800756c <initialize.lto_priv.304+0x15c>
 80074d0:	0030      	movs	r0, r6
 80074d2:	f7ff f889 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80074d6:	42b8      	cmp	r0, r7
 80074d8:	d001      	beq.n	80074de <initialize.lto_priv.304+0xce>
 80074da:	2334      	movs	r3, #52	; 0x34
 80074dc:	5ef7      	ldrsh	r7, [r6, r3]
 80074de:	0030      	movs	r0, r6
 80074e0:	f7ff f882 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 80074e4:	2300      	movs	r3, #0
 80074e6:	4298      	cmp	r0, r3
 80074e8:	d001      	beq.n	80074ee <initialize.lto_priv.304+0xde>
 80074ea:	2236      	movs	r2, #54	; 0x36
 80074ec:	5eb3      	ldrsh	r3, [r6, r2]
 80074ee:	4698      	mov	r8, r3
 80074f0:	44b8      	add	r8, r7
 80074f2:	0033      	movs	r3, r6
 80074f4:	332e      	adds	r3, #46	; 0x2e
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d100      	bne.n	80074fe <initialize.lto_priv.304+0xee>
 80074fc:	e08e      	b.n	800761c <initialize.lto_priv.304+0x20c>
 80074fe:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8007500:	0030      	movs	r0, r6
 8007502:	f7fb fb8f 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8007506:	4682      	mov	sl, r0
 8007508:	2801      	cmp	r0, #1
 800750a:	d925      	bls.n	8007558 <initialize.lto_priv.304+0x148>
 800750c:	2802      	cmp	r0, #2
 800750e:	d10c      	bne.n	800752a <initialize.lto_priv.304+0x11a>
 8007510:	07fb      	lsls	r3, r7, #31
 8007512:	d40a      	bmi.n	800752a <initialize.lto_priv.304+0x11a>
 8007514:	4b43      	ldr	r3, [pc, #268]	; (8007624 <initialize.lto_priv.304+0x214>)
 8007516:	001a      	movs	r2, r3
 8007518:	3230      	adds	r2, #48	; 0x30
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	2a01      	cmp	r2, #1
 800751e:	d903      	bls.n	8007528 <initialize.lto_priv.304+0x118>
 8007520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007522:	4a43      	ldr	r2, [pc, #268]	; (8007630 <initialize.lto_priv.304+0x220>)
 8007524:	4943      	ldr	r1, [pc, #268]	; (8007634 <initialize.lto_priv.304+0x224>)
 8007526:	4798      	blx	r3
 8007528:	3701      	adds	r7, #1
 800752a:	4643      	mov	r3, r8
 800752c:	4651      	mov	r1, sl
 800752e:	1bd8      	subs	r0, r3, r7
 8007530:	f007 fc9e 	bl	800ee70 <__aeabi_idivmod>
 8007534:	468a      	mov	sl, r1
 8007536:	2900      	cmp	r1, #0
 8007538:	dd0e      	ble.n	8007558 <initialize.lto_priv.304+0x148>
 800753a:	4b3a      	ldr	r3, [pc, #232]	; (8007624 <initialize.lto_priv.304+0x214>)
 800753c:	001a      	movs	r2, r3
 800753e:	3230      	adds	r2, #48	; 0x30
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	2a01      	cmp	r2, #1
 8007544:	d904      	bls.n	8007550 <initialize.lto_priv.304+0x140>
 8007546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007548:	4a3b      	ldr	r2, [pc, #236]	; (8007638 <initialize.lto_priv.304+0x228>)
 800754a:	493a      	ldr	r1, [pc, #232]	; (8007634 <initialize.lto_priv.304+0x224>)
 800754c:	2002      	movs	r0, #2
 800754e:	4798      	blx	r3
 8007550:	4643      	mov	r3, r8
 8007552:	4652      	mov	r2, sl
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	4698      	mov	r8, r3
 8007558:	45b8      	cmp	r8, r7
 800755a:	da73      	bge.n	8007644 <initialize.lto_priv.304+0x234>
 800755c:	4b31      	ldr	r3, [pc, #196]	; (8007624 <initialize.lto_priv.304+0x214>)
 800755e:	4a37      	ldr	r2, [pc, #220]	; (800763c <initialize.lto_priv.304+0x22c>)
 8007560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007562:	4934      	ldr	r1, [pc, #208]	; (8007634 <initialize.lto_priv.304+0x224>)
 8007564:	2000      	movs	r0, #0
 8007566:	4798      	blx	r3
 8007568:	2000      	movs	r0, #0
 800756a:	e76c      	b.n	8007446 <initialize.lto_priv.304+0x36>
 800756c:	0030      	movs	r0, r6
 800756e:	f7ff f83b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007572:	2400      	movs	r4, #0
 8007574:	2800      	cmp	r0, #0
 8007576:	d000      	beq.n	800757a <initialize.lto_priv.304+0x16a>
 8007578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800757a:	0030      	movs	r0, r6
 800757c:	f7ff f834 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007580:	2800      	cmp	r0, #0
 8007582:	d043      	beq.n	800760c <initialize.lto_priv.304+0x1fc>
 8007584:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8007586:	1c21      	adds	r1, r4, #0
 8007588:	f006 fd24 	bl	800dfd4 <__aeabi_fadd>
 800758c:	4680      	mov	r8, r0
 800758e:	f003 fc49 	bl	800ae24 <get_dt.constprop.10>
 8007592:	1c21      	adds	r1, r4, #0
 8007594:	9007      	str	r0, [sp, #28]
 8007596:	1c20      	adds	r0, r4, #0
 8007598:	f006 fd1c 	bl	800dfd4 <__aeabi_fadd>
 800759c:	4928      	ldr	r1, [pc, #160]	; (8007640 <initialize.lto_priv.304+0x230>)
 800759e:	1c07      	adds	r7, r0, #0
 80075a0:	9807      	ldr	r0, [sp, #28]
 80075a2:	f006 ffc3 	bl	800e52c <__aeabi_fmul>
 80075a6:	1c01      	adds	r1, r0, #0
 80075a8:	1c38      	adds	r0, r7, #0
 80075aa:	f006 fead 	bl	800e308 <__aeabi_fdiv>
 80075ae:	2100      	movs	r1, #0
 80075b0:	1c07      	adds	r7, r0, #0
 80075b2:	1c20      	adds	r0, r4, #0
 80075b4:	f007 fcb2 	bl	800ef1c <__aeabi_fcmplt>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d129      	bne.n	8007610 <initialize.lto_priv.304+0x200>
 80075bc:	21fc      	movs	r1, #252	; 0xfc
 80075be:	0589      	lsls	r1, r1, #22
 80075c0:	1c38      	adds	r0, r7, #0
 80075c2:	f006 fd07 	bl	800dfd4 <__aeabi_fadd>
 80075c6:	f007 fea7 	bl	800f318 <__aeabi_f2iz>
 80075ca:	0007      	movs	r7, r0
 80075cc:	f003 fc2a 	bl	800ae24 <get_dt.constprop.10>
 80075d0:	4641      	mov	r1, r8
 80075d2:	9007      	str	r0, [sp, #28]
 80075d4:	4640      	mov	r0, r8
 80075d6:	f006 fcfd 	bl	800dfd4 <__aeabi_fadd>
 80075da:	4919      	ldr	r1, [pc, #100]	; (8007640 <initialize.lto_priv.304+0x230>)
 80075dc:	1c04      	adds	r4, r0, #0
 80075de:	9807      	ldr	r0, [sp, #28]
 80075e0:	f006 ffa4 	bl	800e52c <__aeabi_fmul>
 80075e4:	1c01      	adds	r1, r0, #0
 80075e6:	1c20      	adds	r0, r4, #0
 80075e8:	f006 fe8e 	bl	800e308 <__aeabi_fdiv>
 80075ec:	2100      	movs	r1, #0
 80075ee:	1c04      	adds	r4, r0, #0
 80075f0:	4640      	mov	r0, r8
 80075f2:	f007 fc93 	bl	800ef1c <__aeabi_fcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d10d      	bne.n	8007616 <initialize.lto_priv.304+0x206>
 80075fa:	21fc      	movs	r1, #252	; 0xfc
 80075fc:	0589      	lsls	r1, r1, #22
 80075fe:	1c20      	adds	r0, r4, #0
 8007600:	f006 fce8 	bl	800dfd4 <__aeabi_fadd>
 8007604:	f007 fe88 	bl	800f318 <__aeabi_f2iz>
 8007608:	4680      	mov	r8, r0
 800760a:	e772      	b.n	80074f2 <initialize.lto_priv.304+0xe2>
 800760c:	2000      	movs	r0, #0
 800760e:	e7ba      	b.n	8007586 <initialize.lto_priv.304+0x176>
 8007610:	21bf      	movs	r1, #191	; 0xbf
 8007612:	0609      	lsls	r1, r1, #24
 8007614:	e7d4      	b.n	80075c0 <initialize.lto_priv.304+0x1b0>
 8007616:	21bf      	movs	r1, #191	; 0xbf
 8007618:	0609      	lsls	r1, r1, #24
 800761a:	e7f0      	b.n	80075fe <initialize.lto_priv.304+0x1ee>
 800761c:	4653      	mov	r3, sl
 800761e:	781c      	ldrb	r4, [r3, #0]
 8007620:	e76e      	b.n	8007500 <initialize.lto_priv.304+0xf0>
 8007622:	46c0      	nop			; (mov r8, r8)
 8007624:	200003f0 	.word	0x200003f0
 8007628:	0801cd4e 	.word	0x0801cd4e
 800762c:	0801c9b2 	.word	0x0801c9b2
 8007630:	0801cf9f 	.word	0x0801cf9f
 8007634:	0801cfd4 	.word	0x0801cfd4
 8007638:	0801ce06 	.word	0x0801ce06
 800763c:	0801ce39 	.word	0x0801ce39
 8007640:	4d8ef3c2 	.word	0x4d8ef3c2
 8007644:	0030      	movs	r0, r6
 8007646:	f7fe ffcf 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 800764a:	2800      	cmp	r0, #0
 800764c:	d005      	beq.n	800765a <initialize.lto_priv.304+0x24a>
 800764e:	0033      	movs	r3, r6
 8007650:	336e      	adds	r3, #110	; 0x6e
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d000      	beq.n	800765a <initialize.lto_priv.304+0x24a>
 8007658:	e1b8      	b.n	80079cc <initialize.lto_priv.304+0x5bc>
 800765a:	4bd2      	ldr	r3, [pc, #840]	; (80079a4 <initialize.lto_priv.304+0x594>)
 800765c:	429f      	cmp	r7, r3
 800765e:	db00      	blt.n	8007662 <initialize.lto_priv.304+0x252>
 8007660:	e0cb      	b.n	80077fa <initialize.lto_priv.304+0x3ea>
 8007662:	4bd1      	ldr	r3, [pc, #836]	; (80079a8 <initialize.lto_priv.304+0x598>)
 8007664:	0038      	movs	r0, r7
 8007666:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8007668:	f003 fbf8 	bl	800ae5c <points_to_meter.constprop.9>
 800766c:	2100      	movs	r1, #0
 800766e:	f007 fc55 	bl	800ef1c <__aeabi_fcmplt>
 8007672:	4cce      	ldr	r4, [pc, #824]	; (80079ac <initialize.lto_priv.304+0x59c>)
 8007674:	2800      	cmp	r0, #0
 8007676:	d100      	bne.n	800767a <initialize.lto_priv.304+0x26a>
 8007678:	4ccd      	ldr	r4, [pc, #820]	; (80079b0 <initialize.lto_priv.304+0x5a0>)
 800767a:	0038      	movs	r0, r7
 800767c:	f003 fbee 	bl	800ae5c <points_to_meter.constprop.9>
 8007680:	1c05      	adds	r5, r0, #0
 8007682:	0038      	movs	r0, r7
 8007684:	f003 fbea 	bl	800ae5c <points_to_meter.constprop.9>
 8007688:	2100      	movs	r1, #0
 800768a:	f007 fc47 	bl	800ef1c <__aeabi_fcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	d000      	beq.n	8007694 <initialize.lto_priv.304+0x284>
 8007692:	e0a6      	b.n	80077e2 <initialize.lto_priv.304+0x3d2>
 8007694:	21fe      	movs	r1, #254	; 0xfe
 8007696:	0589      	lsls	r1, r1, #22
 8007698:	1c28      	adds	r0, r5, #0
 800769a:	f006 ff47 	bl	800e52c <__aeabi_fmul>
 800769e:	49c5      	ldr	r1, [pc, #788]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80076a0:	f006 fc98 	bl	800dfd4 <__aeabi_fadd>
 80076a4:	f007 fc82 	bl	800efac <__aeabi_f2uiz>
 80076a8:	4680      	mov	r8, r0
 80076aa:	0038      	movs	r0, r7
 80076ac:	f003 fbd6 	bl	800ae5c <points_to_meter.constprop.9>
 80076b0:	1c05      	adds	r5, r0, #0
 80076b2:	0038      	movs	r0, r7
 80076b4:	f003 fbd2 	bl	800ae5c <points_to_meter.constprop.9>
 80076b8:	2100      	movs	r1, #0
 80076ba:	f007 fc2f 	bl	800ef1c <__aeabi_fcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	d000      	beq.n	80076c4 <initialize.lto_priv.304+0x2b4>
 80076c2:	e090      	b.n	80077e6 <initialize.lto_priv.304+0x3d6>
 80076c4:	21fe      	movs	r1, #254	; 0xfe
 80076c6:	0589      	lsls	r1, r1, #22
 80076c8:	1c28      	adds	r0, r5, #0
 80076ca:	f006 ff2f 	bl	800e52c <__aeabi_fmul>
 80076ce:	49b9      	ldr	r1, [pc, #740]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80076d0:	f006 fc80 	bl	800dfd4 <__aeabi_fadd>
 80076d4:	1c05      	adds	r5, r0, #0
 80076d6:	0038      	movs	r0, r7
 80076d8:	f003 fbc0 	bl	800ae5c <points_to_meter.constprop.9>
 80076dc:	4681      	mov	r9, r0
 80076de:	0038      	movs	r0, r7
 80076e0:	f003 fbbc 	bl	800ae5c <points_to_meter.constprop.9>
 80076e4:	2100      	movs	r1, #0
 80076e6:	f007 fc19 	bl	800ef1c <__aeabi_fcmplt>
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d17d      	bne.n	80077ea <initialize.lto_priv.304+0x3da>
 80076ee:	21fe      	movs	r1, #254	; 0xfe
 80076f0:	0589      	lsls	r1, r1, #22
 80076f2:	4648      	mov	r0, r9
 80076f4:	f006 ff1a 	bl	800e52c <__aeabi_fmul>
 80076f8:	49ae      	ldr	r1, [pc, #696]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80076fa:	f006 fc6b 	bl	800dfd4 <__aeabi_fadd>
 80076fe:	f007 fc55 	bl	800efac <__aeabi_f2uiz>
 8007702:	f007 fe73 	bl	800f3ec <__aeabi_ui2f>
 8007706:	1c01      	adds	r1, r0, #0
 8007708:	1c28      	adds	r0, r5, #0
 800770a:	f007 f841 	bl	800e790 <__aeabi_fsub>
 800770e:	49aa      	ldr	r1, [pc, #680]	; (80079b8 <initialize.lto_priv.304+0x5a8>)
 8007710:	f006 ff0c 	bl	800e52c <__aeabi_fmul>
 8007714:	f007 fc4a 	bl	800efac <__aeabi_f2uiz>
 8007718:	0007      	movs	r7, r0
 800771a:	48a2      	ldr	r0, [pc, #648]	; (80079a4 <initialize.lto_priv.304+0x594>)
 800771c:	f003 fb9e 	bl	800ae5c <points_to_meter.constprop.9>
 8007720:	2100      	movs	r1, #0
 8007722:	f007 fbfb 	bl	800ef1c <__aeabi_fcmplt>
 8007726:	4da1      	ldr	r5, [pc, #644]	; (80079ac <initialize.lto_priv.304+0x59c>)
 8007728:	2800      	cmp	r0, #0
 800772a:	d100      	bne.n	800772e <initialize.lto_priv.304+0x31e>
 800772c:	4da0      	ldr	r5, [pc, #640]	; (80079b0 <initialize.lto_priv.304+0x5a0>)
 800772e:	489d      	ldr	r0, [pc, #628]	; (80079a4 <initialize.lto_priv.304+0x594>)
 8007730:	f003 fb94 	bl	800ae5c <points_to_meter.constprop.9>
 8007734:	4681      	mov	r9, r0
 8007736:	489b      	ldr	r0, [pc, #620]	; (80079a4 <initialize.lto_priv.304+0x594>)
 8007738:	f003 fb90 	bl	800ae5c <points_to_meter.constprop.9>
 800773c:	2100      	movs	r1, #0
 800773e:	f007 fbed 	bl	800ef1c <__aeabi_fcmplt>
 8007742:	2800      	cmp	r0, #0
 8007744:	d153      	bne.n	80077ee <initialize.lto_priv.304+0x3de>
 8007746:	21fe      	movs	r1, #254	; 0xfe
 8007748:	0589      	lsls	r1, r1, #22
 800774a:	4648      	mov	r0, r9
 800774c:	f006 feee 	bl	800e52c <__aeabi_fmul>
 8007750:	4998      	ldr	r1, [pc, #608]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007752:	f006 fc3f 	bl	800dfd4 <__aeabi_fadd>
 8007756:	f007 fc29 	bl	800efac <__aeabi_f2uiz>
 800775a:	4681      	mov	r9, r0
 800775c:	4891      	ldr	r0, [pc, #580]	; (80079a4 <initialize.lto_priv.304+0x594>)
 800775e:	f003 fb7d 	bl	800ae5c <points_to_meter.constprop.9>
 8007762:	4682      	mov	sl, r0
 8007764:	488f      	ldr	r0, [pc, #572]	; (80079a4 <initialize.lto_priv.304+0x594>)
 8007766:	f003 fb79 	bl	800ae5c <points_to_meter.constprop.9>
 800776a:	2100      	movs	r1, #0
 800776c:	f007 fbd6 	bl	800ef1c <__aeabi_fcmplt>
 8007770:	2800      	cmp	r0, #0
 8007772:	d13e      	bne.n	80077f2 <initialize.lto_priv.304+0x3e2>
 8007774:	21fe      	movs	r1, #254	; 0xfe
 8007776:	0589      	lsls	r1, r1, #22
 8007778:	4650      	mov	r0, sl
 800777a:	f006 fed7 	bl	800e52c <__aeabi_fmul>
 800777e:	498d      	ldr	r1, [pc, #564]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007780:	f006 fc28 	bl	800dfd4 <__aeabi_fadd>
 8007784:	4682      	mov	sl, r0
 8007786:	4887      	ldr	r0, [pc, #540]	; (80079a4 <initialize.lto_priv.304+0x594>)
 8007788:	f003 fb68 	bl	800ae5c <points_to_meter.constprop.9>
 800778c:	4683      	mov	fp, r0
 800778e:	4885      	ldr	r0, [pc, #532]	; (80079a4 <initialize.lto_priv.304+0x594>)
 8007790:	f003 fb64 	bl	800ae5c <points_to_meter.constprop.9>
 8007794:	2100      	movs	r1, #0
 8007796:	f007 fbc1 	bl	800ef1c <__aeabi_fcmplt>
 800779a:	2800      	cmp	r0, #0
 800779c:	d12b      	bne.n	80077f6 <initialize.lto_priv.304+0x3e6>
 800779e:	21fe      	movs	r1, #254	; 0xfe
 80077a0:	0589      	lsls	r1, r1, #22
 80077a2:	4658      	mov	r0, fp
 80077a4:	f006 fec2 	bl	800e52c <__aeabi_fmul>
 80077a8:	4982      	ldr	r1, [pc, #520]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80077aa:	f006 fc13 	bl	800dfd4 <__aeabi_fadd>
 80077ae:	f007 fbfd 	bl	800efac <__aeabi_f2uiz>
 80077b2:	f007 fe1b 	bl	800f3ec <__aeabi_ui2f>
 80077b6:	1c01      	adds	r1, r0, #0
 80077b8:	4650      	mov	r0, sl
 80077ba:	f006 ffe9 	bl	800e790 <__aeabi_fsub>
 80077be:	497e      	ldr	r1, [pc, #504]	; (80079b8 <initialize.lto_priv.304+0x5a8>)
 80077c0:	f006 feb4 	bl	800e52c <__aeabi_fmul>
 80077c4:	f007 fbf2 	bl	800efac <__aeabi_f2uiz>
 80077c8:	464b      	mov	r3, r9
 80077ca:	9303      	str	r3, [sp, #12]
 80077cc:	4643      	mov	r3, r8
 80077ce:	9004      	str	r0, [sp, #16]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	9502      	str	r5, [sp, #8]
 80077d4:	9701      	str	r7, [sp, #4]
 80077d6:	0023      	movs	r3, r4
 80077d8:	4a78      	ldr	r2, [pc, #480]	; (80079bc <initialize.lto_priv.304+0x5ac>)
 80077da:	4979      	ldr	r1, [pc, #484]	; (80079c0 <initialize.lto_priv.304+0x5b0>)
 80077dc:	2000      	movs	r0, #0
 80077de:	47b0      	blx	r6
 80077e0:	e6c2      	b.n	8007568 <initialize.lto_priv.304+0x158>
 80077e2:	4978      	ldr	r1, [pc, #480]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077e4:	e758      	b.n	8007698 <initialize.lto_priv.304+0x288>
 80077e6:	4977      	ldr	r1, [pc, #476]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077e8:	e76e      	b.n	80076c8 <initialize.lto_priv.304+0x2b8>
 80077ea:	4976      	ldr	r1, [pc, #472]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077ec:	e781      	b.n	80076f2 <initialize.lto_priv.304+0x2e2>
 80077ee:	4975      	ldr	r1, [pc, #468]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077f0:	e7ab      	b.n	800774a <initialize.lto_priv.304+0x33a>
 80077f2:	4974      	ldr	r1, [pc, #464]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077f4:	e7c0      	b.n	8007778 <initialize.lto_priv.304+0x368>
 80077f6:	4973      	ldr	r1, [pc, #460]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80077f8:	e7d3      	b.n	80077a2 <initialize.lto_priv.304+0x392>
 80077fa:	237c      	movs	r3, #124	; 0x7c
 80077fc:	0164      	lsls	r4, r4, #5
 80077fe:	3c4b      	subs	r4, #75	; 0x4b
 8007800:	435c      	muls	r4, r3
 8007802:	4544      	cmp	r4, r8
 8007804:	db00      	blt.n	8007808 <initialize.lto_priv.304+0x3f8>
 8007806:	e0e1      	b.n	80079cc <initialize.lto_priv.304+0x5bc>
 8007808:	4b67      	ldr	r3, [pc, #412]	; (80079a8 <initialize.lto_priv.304+0x598>)
 800780a:	4640      	mov	r0, r8
 800780c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780e:	9306      	str	r3, [sp, #24]
 8007810:	f003 fb24 	bl	800ae5c <points_to_meter.constprop.9>
 8007814:	2100      	movs	r1, #0
 8007816:	f007 fb81 	bl	800ef1c <__aeabi_fcmplt>
 800781a:	4d64      	ldr	r5, [pc, #400]	; (80079ac <initialize.lto_priv.304+0x59c>)
 800781c:	2800      	cmp	r0, #0
 800781e:	d100      	bne.n	8007822 <initialize.lto_priv.304+0x412>
 8007820:	4d63      	ldr	r5, [pc, #396]	; (80079b0 <initialize.lto_priv.304+0x5a0>)
 8007822:	4640      	mov	r0, r8
 8007824:	f003 fb1a 	bl	800ae5c <points_to_meter.constprop.9>
 8007828:	1c06      	adds	r6, r0, #0
 800782a:	4640      	mov	r0, r8
 800782c:	f003 fb16 	bl	800ae5c <points_to_meter.constprop.9>
 8007830:	2100      	movs	r1, #0
 8007832:	f007 fb73 	bl	800ef1c <__aeabi_fcmplt>
 8007836:	2800      	cmp	r0, #0
 8007838:	d000      	beq.n	800783c <initialize.lto_priv.304+0x42c>
 800783a:	e0a7      	b.n	800798c <initialize.lto_priv.304+0x57c>
 800783c:	21fe      	movs	r1, #254	; 0xfe
 800783e:	0589      	lsls	r1, r1, #22
 8007840:	1c30      	adds	r0, r6, #0
 8007842:	f006 fe73 	bl	800e52c <__aeabi_fmul>
 8007846:	495b      	ldr	r1, [pc, #364]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007848:	f006 fbc4 	bl	800dfd4 <__aeabi_fadd>
 800784c:	f007 fbae 	bl	800efac <__aeabi_f2uiz>
 8007850:	0007      	movs	r7, r0
 8007852:	4640      	mov	r0, r8
 8007854:	f003 fb02 	bl	800ae5c <points_to_meter.constprop.9>
 8007858:	1c06      	adds	r6, r0, #0
 800785a:	4640      	mov	r0, r8
 800785c:	f003 fafe 	bl	800ae5c <points_to_meter.constprop.9>
 8007860:	2100      	movs	r1, #0
 8007862:	f007 fb5b 	bl	800ef1c <__aeabi_fcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d000      	beq.n	800786c <initialize.lto_priv.304+0x45c>
 800786a:	e091      	b.n	8007990 <initialize.lto_priv.304+0x580>
 800786c:	21fe      	movs	r1, #254	; 0xfe
 800786e:	0589      	lsls	r1, r1, #22
 8007870:	1c30      	adds	r0, r6, #0
 8007872:	f006 fe5b 	bl	800e52c <__aeabi_fmul>
 8007876:	494f      	ldr	r1, [pc, #316]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007878:	f006 fbac 	bl	800dfd4 <__aeabi_fadd>
 800787c:	1c06      	adds	r6, r0, #0
 800787e:	4640      	mov	r0, r8
 8007880:	f003 faec 	bl	800ae5c <points_to_meter.constprop.9>
 8007884:	4681      	mov	r9, r0
 8007886:	4640      	mov	r0, r8
 8007888:	f003 fae8 	bl	800ae5c <points_to_meter.constprop.9>
 800788c:	2100      	movs	r1, #0
 800788e:	f007 fb45 	bl	800ef1c <__aeabi_fcmplt>
 8007892:	2800      	cmp	r0, #0
 8007894:	d17e      	bne.n	8007994 <initialize.lto_priv.304+0x584>
 8007896:	21fe      	movs	r1, #254	; 0xfe
 8007898:	0589      	lsls	r1, r1, #22
 800789a:	4648      	mov	r0, r9
 800789c:	f006 fe46 	bl	800e52c <__aeabi_fmul>
 80078a0:	4944      	ldr	r1, [pc, #272]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80078a2:	f006 fb97 	bl	800dfd4 <__aeabi_fadd>
 80078a6:	f007 fb81 	bl	800efac <__aeabi_f2uiz>
 80078aa:	f007 fd9f 	bl	800f3ec <__aeabi_ui2f>
 80078ae:	1c01      	adds	r1, r0, #0
 80078b0:	1c30      	adds	r0, r6, #0
 80078b2:	f006 ff6d 	bl	800e790 <__aeabi_fsub>
 80078b6:	4940      	ldr	r1, [pc, #256]	; (80079b8 <initialize.lto_priv.304+0x5a8>)
 80078b8:	f006 fe38 	bl	800e52c <__aeabi_fmul>
 80078bc:	f007 fb76 	bl	800efac <__aeabi_f2uiz>
 80078c0:	4680      	mov	r8, r0
 80078c2:	0020      	movs	r0, r4
 80078c4:	f003 faca 	bl	800ae5c <points_to_meter.constprop.9>
 80078c8:	2100      	movs	r1, #0
 80078ca:	f007 fb27 	bl	800ef1c <__aeabi_fcmplt>
 80078ce:	4e37      	ldr	r6, [pc, #220]	; (80079ac <initialize.lto_priv.304+0x59c>)
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d100      	bne.n	80078d6 <initialize.lto_priv.304+0x4c6>
 80078d4:	4e36      	ldr	r6, [pc, #216]	; (80079b0 <initialize.lto_priv.304+0x5a0>)
 80078d6:	0020      	movs	r0, r4
 80078d8:	f003 fac0 	bl	800ae5c <points_to_meter.constprop.9>
 80078dc:	4681      	mov	r9, r0
 80078de:	0020      	movs	r0, r4
 80078e0:	f003 fabc 	bl	800ae5c <points_to_meter.constprop.9>
 80078e4:	2100      	movs	r1, #0
 80078e6:	f007 fb19 	bl	800ef1c <__aeabi_fcmplt>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d154      	bne.n	8007998 <initialize.lto_priv.304+0x588>
 80078ee:	21fe      	movs	r1, #254	; 0xfe
 80078f0:	0589      	lsls	r1, r1, #22
 80078f2:	4648      	mov	r0, r9
 80078f4:	f006 fe1a 	bl	800e52c <__aeabi_fmul>
 80078f8:	492e      	ldr	r1, [pc, #184]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 80078fa:	f006 fb6b 	bl	800dfd4 <__aeabi_fadd>
 80078fe:	f007 fb55 	bl	800efac <__aeabi_f2uiz>
 8007902:	4681      	mov	r9, r0
 8007904:	0020      	movs	r0, r4
 8007906:	f003 faa9 	bl	800ae5c <points_to_meter.constprop.9>
 800790a:	4682      	mov	sl, r0
 800790c:	0020      	movs	r0, r4
 800790e:	f003 faa5 	bl	800ae5c <points_to_meter.constprop.9>
 8007912:	2100      	movs	r1, #0
 8007914:	f007 fb02 	bl	800ef1c <__aeabi_fcmplt>
 8007918:	2800      	cmp	r0, #0
 800791a:	d13f      	bne.n	800799c <initialize.lto_priv.304+0x58c>
 800791c:	21fe      	movs	r1, #254	; 0xfe
 800791e:	0589      	lsls	r1, r1, #22
 8007920:	4650      	mov	r0, sl
 8007922:	f006 fe03 	bl	800e52c <__aeabi_fmul>
 8007926:	4923      	ldr	r1, [pc, #140]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007928:	f006 fb54 	bl	800dfd4 <__aeabi_fadd>
 800792c:	4682      	mov	sl, r0
 800792e:	0020      	movs	r0, r4
 8007930:	f003 fa94 	bl	800ae5c <points_to_meter.constprop.9>
 8007934:	4683      	mov	fp, r0
 8007936:	0020      	movs	r0, r4
 8007938:	f003 fa90 	bl	800ae5c <points_to_meter.constprop.9>
 800793c:	2100      	movs	r1, #0
 800793e:	f007 faed 	bl	800ef1c <__aeabi_fcmplt>
 8007942:	2800      	cmp	r0, #0
 8007944:	d12c      	bne.n	80079a0 <initialize.lto_priv.304+0x590>
 8007946:	21fe      	movs	r1, #254	; 0xfe
 8007948:	0589      	lsls	r1, r1, #22
 800794a:	4658      	mov	r0, fp
 800794c:	f006 fdee 	bl	800e52c <__aeabi_fmul>
 8007950:	4918      	ldr	r1, [pc, #96]	; (80079b4 <initialize.lto_priv.304+0x5a4>)
 8007952:	f006 fb3f 	bl	800dfd4 <__aeabi_fadd>
 8007956:	f007 fb29 	bl	800efac <__aeabi_f2uiz>
 800795a:	f007 fd47 	bl	800f3ec <__aeabi_ui2f>
 800795e:	1c01      	adds	r1, r0, #0
 8007960:	4650      	mov	r0, sl
 8007962:	f006 ff15 	bl	800e790 <__aeabi_fsub>
 8007966:	4914      	ldr	r1, [pc, #80]	; (80079b8 <initialize.lto_priv.304+0x5a8>)
 8007968:	f006 fde0 	bl	800e52c <__aeabi_fmul>
 800796c:	f007 fb1e 	bl	800efac <__aeabi_f2uiz>
 8007970:	464b      	mov	r3, r9
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	4643      	mov	r3, r8
 8007976:	9004      	str	r0, [sp, #16]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	9602      	str	r6, [sp, #8]
 800797c:	9700      	str	r7, [sp, #0]
 800797e:	002b      	movs	r3, r5
 8007980:	4a11      	ldr	r2, [pc, #68]	; (80079c8 <initialize.lto_priv.304+0x5b8>)
 8007982:	490f      	ldr	r1, [pc, #60]	; (80079c0 <initialize.lto_priv.304+0x5b0>)
 8007984:	2000      	movs	r0, #0
 8007986:	9c06      	ldr	r4, [sp, #24]
 8007988:	47a0      	blx	r4
 800798a:	e5ed      	b.n	8007568 <initialize.lto_priv.304+0x158>
 800798c:	490d      	ldr	r1, [pc, #52]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 800798e:	e757      	b.n	8007840 <initialize.lto_priv.304+0x430>
 8007990:	490c      	ldr	r1, [pc, #48]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 8007992:	e76d      	b.n	8007870 <initialize.lto_priv.304+0x460>
 8007994:	490b      	ldr	r1, [pc, #44]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 8007996:	e780      	b.n	800789a <initialize.lto_priv.304+0x48a>
 8007998:	490a      	ldr	r1, [pc, #40]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 800799a:	e7aa      	b.n	80078f2 <initialize.lto_priv.304+0x4e2>
 800799c:	4909      	ldr	r1, [pc, #36]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 800799e:	e7bf      	b.n	8007920 <initialize.lto_priv.304+0x510>
 80079a0:	4908      	ldr	r1, [pc, #32]	; (80079c4 <initialize.lto_priv.304+0x5b4>)
 80079a2:	e7d2      	b.n	800794a <initialize.lto_priv.304+0x53a>
 80079a4:	fffffa30 	.word	0xfffffa30
 80079a8:	200003f0 	.word	0x200003f0
 80079ac:	0801db44 	.word	0x0801db44
 80079b0:	0801c144 	.word	0x0801c144
 80079b4:	350637bd 	.word	0x350637bd
 80079b8:	49742400 	.word	0x49742400
 80079bc:	0801ce68 	.word	0x0801ce68
 80079c0:	0801cfd4 	.word	0x0801cfd4
 80079c4:	bf800000 	.word	0xbf800000
 80079c8:	0801cea5 	.word	0x0801cea5
 80079cc:	0030      	movs	r0, r6
 80079ce:	f7fb f929 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 80079d2:	0033      	movs	r3, r6
 80079d4:	332e      	adds	r3, #46	; 0x2e
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	4682      	mov	sl, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d049      	beq.n	8007a72 <initialize.lto_priv.304+0x662>
 80079de:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80079e0:	466a      	mov	r2, sp
 80079e2:	8c12      	ldrh	r2, [r2, #32]
 80079e4:	0ffc      	lsrs	r4, r7, #31
 80079e6:	9207      	str	r2, [sp, #28]
 80079e8:	464a      	mov	r2, r9
 80079ea:	19e0      	adds	r0, r4, r7
 80079ec:	8093      	strh	r3, [r2, #4]
 80079ee:	217c      	movs	r1, #124	; 0x7c
 80079f0:	f007 f958 	bl	800eca4 <__divsi3>
 80079f4:	464b      	mov	r3, r9
 80079f6:	1b04      	subs	r4, r0, r4
 80079f8:	811c      	strh	r4, [r3, #8]
 80079fa:	4643      	mov	r3, r8
 80079fc:	0fdb      	lsrs	r3, r3, #31
 80079fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007a00:	4443      	add	r3, r8
 8007a02:	0018      	movs	r0, r3
 8007a04:	217c      	movs	r1, #124	; 0x7c
 8007a06:	f007 f94d 	bl	800eca4 <__divsi3>
 8007a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0c:	4651      	mov	r1, sl
 8007a0e:	1ac0      	subs	r0, r0, r3
 8007a10:	464b      	mov	r3, r9
 8007a12:	3001      	adds	r0, #1
 8007a14:	1b04      	subs	r4, r0, r4
 8007a16:	b2a4      	uxth	r4, r4
 8007a18:	815c      	strh	r4, [r3, #10]
 8007a1a:	0038      	movs	r0, r7
 8007a1c:	f007 fa28 	bl	800ee70 <__aeabi_idivmod>
 8007a20:	4451      	add	r1, sl
 8007a22:	0008      	movs	r0, r1
 8007a24:	4651      	mov	r1, sl
 8007a26:	f007 fa23 	bl	800ee70 <__aeabi_idivmod>
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	0020      	movs	r0, r4
 8007a2e:	80d9      	strh	r1, [r3, #6]
 8007a30:	9907      	ldr	r1, [sp, #28]
 8007a32:	f007 f933 	bl	800ec9c <__aeabi_uidivmod>
 8007a36:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a38:	b280      	uxth	r0, r0
 8007a3a:	2900      	cmp	r1, #0
 8007a3c:	d11d      	bne.n	8007a7a <initialize.lto_priv.304+0x66a>
 8007a3e:	464b      	mov	r3, r9
 8007a40:	8198      	strh	r0, [r3, #12]
 8007a42:	0030      	movs	r0, r6
 8007a44:	f7fb fe99 	bl	800377a <acc_base_configuration_power_save_mode_get>
 8007a48:	0004      	movs	r4, r0
 8007a4a:	0030      	movs	r0, r6
 8007a4c:	f7fb fe6e 	bl	800372c <acc_base_configuration_repetition_mode_get>
 8007a50:	2c04      	cmp	r4, #4
 8007a52:	d001      	beq.n	8007a58 <initialize.lto_priv.304+0x648>
 8007a54:	2801      	cmp	r0, #1
 8007a56:	d012      	beq.n	8007a7e <initialize.lto_priv.304+0x66e>
 8007a58:	464b      	mov	r3, r9
 8007a5a:	9a07      	ldr	r2, [sp, #28]
 8007a5c:	895b      	ldrh	r3, [r3, #10]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d20d      	bcs.n	8007a7e <initialize.lto_priv.304+0x66e>
 8007a62:	4bce      	ldr	r3, [pc, #824]	; (8007d9c <initialize.lto_priv.304+0x98c>)
 8007a64:	2000      	movs	r0, #0
 8007a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a68:	4acd      	ldr	r2, [pc, #820]	; (8007da0 <initialize.lto_priv.304+0x990>)
 8007a6a:	49ce      	ldr	r1, [pc, #824]	; (8007da4 <initialize.lto_priv.304+0x994>)
 8007a6c:	4798      	blx	r3
 8007a6e:	2000      	movs	r0, #0
 8007a70:	e4e9      	b.n	8007446 <initialize.lto_priv.304+0x36>
 8007a72:	0033      	movs	r3, r6
 8007a74:	3332      	adds	r3, #50	; 0x32
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	e7b2      	b.n	80079e0 <initialize.lto_priv.304+0x5d0>
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	e7df      	b.n	8007a3e <initialize.lto_priv.304+0x62e>
 8007a7e:	f003 f9d1 	bl	800ae24 <get_dt.constprop.10>
 8007a82:	1c04      	adds	r4, r0, #0
 8007a84:	4650      	mov	r0, sl
 8007a86:	f007 fcb1 	bl	800f3ec <__aeabi_ui2f>
 8007a8a:	1c21      	adds	r1, r4, #0
 8007a8c:	f006 fd4e 	bl	800e52c <__aeabi_fmul>
 8007a90:	465b      	mov	r3, fp
 8007a92:	60d8      	str	r0, [r3, #12]
 8007a94:	0038      	movs	r0, r7
 8007a96:	f003 f9e1 	bl	800ae5c <points_to_meter.constprop.9>
 8007a9a:	465b      	mov	r3, fp
 8007a9c:	6018      	str	r0, [r3, #0]
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f003 f9dc 	bl	800ae5c <points_to_meter.constprop.9>
 8007aa4:	465b      	mov	r3, fp
 8007aa6:	6819      	ldr	r1, [r3, #0]
 8007aa8:	6098      	str	r0, [r3, #8]
 8007aaa:	f006 fe71 	bl	800e790 <__aeabi_fsub>
 8007aae:	465b      	mov	r3, fp
 8007ab0:	6058      	str	r0, [r3, #4]
 8007ab2:	4643      	mov	r3, r8
 8007ab4:	4651      	mov	r1, sl
 8007ab6:	1bd8      	subs	r0, r3, r7
 8007ab8:	f007 f8f4 	bl	800eca4 <__divsi3>
 8007abc:	3001      	adds	r0, #1
 8007abe:	b283      	uxth	r3, r0
 8007ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac2:	465b      	mov	r3, fp
 8007ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ac6:	4651      	mov	r1, sl
 8007ac8:	82da      	strh	r2, [r3, #22]
 8007aca:	464b      	mov	r3, r9
 8007acc:	899b      	ldrh	r3, [r3, #12]
 8007ace:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad0:	465b      	mov	r3, fp
 8007ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad4:	831a      	strh	r2, [r3, #24]
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	895c      	ldrh	r4, [r3, #10]
 8007ada:	237c      	movs	r3, #124	; 0x7c
 8007adc:	0018      	movs	r0, r3
 8007ade:	4360      	muls	r0, r4
 8007ae0:	4698      	mov	r8, r3
 8007ae2:	f007 f855 	bl	800eb90 <__udivsi3>
 8007ae6:	9b06      	ldr	r3, [sp, #24]
 8007ae8:	4641      	mov	r1, r8
 8007aea:	8018      	strh	r0, [r3, #0]
 8007aec:	811c      	strh	r4, [r3, #8]
 8007aee:	0038      	movs	r0, r7
 8007af0:	f007 f9be 	bl	800ee70 <__aeabi_idivmod>
 8007af4:	4441      	add	r1, r8
 8007af6:	0008      	movs	r0, r1
 8007af8:	4641      	mov	r1, r8
 8007afa:	f007 f9b9 	bl	800ee70 <__aeabi_idivmod>
 8007afe:	0008      	movs	r0, r1
 8007b00:	4651      	mov	r1, sl
 8007b02:	f007 f8cf 	bl	800eca4 <__divsi3>
 8007b06:	9b06      	ldr	r3, [sp, #24]
 8007b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b0a:	8058      	strh	r0, [r3, #2]
 8007b0c:	809a      	strh	r2, [r3, #4]
 8007b0e:	4651      	mov	r1, sl
 8007b10:	4640      	mov	r0, r8
 8007b12:	f007 f83d 	bl	800eb90 <__udivsi3>
 8007b16:	9b06      	ldr	r3, [sp, #24]
 8007b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1a:	80d8      	strh	r0, [r3, #6]
 8007b1c:	821a      	strh	r2, [r3, #16]
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d228      	bcs.n	8007b76 <initialize.lto_priv.304+0x766>
 8007b24:	466b      	mov	r3, sp
 8007b26:	8c19      	ldrh	r1, [r3, #32]
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	8299      	strh	r1, [r3, #20]
 8007b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <initialize.lto_priv.304+0x72c>
 8007b32:	9907      	ldr	r1, [sp, #28]
 8007b34:	0020      	movs	r0, r4
 8007b36:	f007 f8b1 	bl	800ec9c <__aeabi_uidivmod>
 8007b3a:	b289      	uxth	r1, r1
 8007b3c:	9b06      	ldr	r3, [sp, #24]
 8007b3e:	82d9      	strh	r1, [r3, #22]
 8007b40:	0030      	movs	r0, r6
 8007b42:	f7fe fd51 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d019      	beq.n	8007b7e <initialize.lto_priv.304+0x76e>
 8007b4a:	0033      	movs	r3, r6
 8007b4c:	3346      	adds	r3, #70	; 0x46
 8007b4e:	7818      	ldrb	r0, [r3, #0]
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d014      	beq.n	8007b7e <initialize.lto_priv.304+0x76e>
 8007b54:	2300      	movs	r3, #0
 8007b56:	2001      	movs	r0, #1
 8007b58:	2400      	movs	r4, #0
 8007b5a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007b5c:	64a8      	str	r0, [r5, #72]	; 0x48
 8007b5e:	652c      	str	r4, [r5, #80]	; 0x50
 8007b60:	0030      	movs	r0, r6
 8007b62:	f7fb fde3 	bl	800372c <acc_base_configuration_repetition_mode_get>
 8007b66:	0023      	movs	r3, r4
 8007b68:	ac10      	add	r4, sp, #64	; 0x40
 8007b6a:	2803      	cmp	r0, #3
 8007b6c:	d80d      	bhi.n	8007b8a <initialize.lto_priv.304+0x77a>
 8007b6e:	f006 fffb 	bl	800eb68 <__gnu_thumb1_case_uqi>
 8007b72:	1a08      	.short	0x1a08
 8007b74:	3020      	.short	0x3020
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	829c      	strh	r4, [r3, #20]
 8007b7a:	82dc      	strh	r4, [r3, #22]
 8007b7c:	e7e0      	b.n	8007b40 <initialize.lto_priv.304+0x730>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7ea      	b.n	8007b58 <initialize.lto_priv.304+0x748>
 8007b82:	656b      	str	r3, [r5, #84]	; 0x54
 8007b84:	65ab      	str	r3, [r5, #88]	; 0x58
 8007b86:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007b88:	662b      	str	r3, [r5, #96]	; 0x60
 8007b8a:	0030      	movs	r0, r6
 8007b8c:	f7fb fdf5 	bl	800377a <acc_base_configuration_power_save_mode_get>
 8007b90:	2804      	cmp	r0, #4
 8007b92:	d82a      	bhi.n	8007bea <initialize.lto_priv.304+0x7da>
 8007b94:	2300      	movs	r3, #0
 8007b96:	2201      	movs	r2, #1
 8007b98:	f006 fff0 	bl	800eb7c <__gnu_thumb1_case_uhi>
 8007b9c:	00250025 	.word	0x00250025
 8007ba0:	00fa00f7 	.word	0x00fa00f7
 8007ba4:	0025      	.short	0x0025
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	656b      	str	r3, [r5, #84]	; 0x54
 8007baa:	65aa      	str	r2, [r5, #88]	; 0x58
 8007bac:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007bae:	662b      	str	r3, [r5, #96]	; 0x60
 8007bb0:	e7eb      	b.n	8007b8a <initialize.lto_priv.304+0x77a>
 8007bb2:	0030      	movs	r0, r6
 8007bb4:	f7fb fda4 	bl	8003700 <acc_base_configuration_update_rate_get>
 8007bb8:	aa0f      	add	r2, sp, #60	; 0x3c
 8007bba:	0021      	movs	r1, r4
 8007bbc:	f7fe faf4 	bl	80061a8 <acc_radar_engine_common_frequency_to_main_clk>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	656b      	str	r3, [r5, #84]	; 0x54
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	65ab      	str	r3, [r5, #88]	; 0x58
 8007bc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bca:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bce:	662b      	str	r3, [r5, #96]	; 0x60
 8007bd0:	e7db      	b.n	8007b8a <initialize.lto_priv.304+0x77a>
 8007bd2:	0030      	movs	r0, r6
 8007bd4:	f7fb fd94 	bl	8003700 <acc_base_configuration_update_rate_get>
 8007bd8:	aa0f      	add	r2, sp, #60	; 0x3c
 8007bda:	0021      	movs	r1, r4
 8007bdc:	f7fe fae4 	bl	80061a8 <acc_radar_engine_common_frequency_to_main_clk>
 8007be0:	2301      	movs	r3, #1
 8007be2:	656b      	str	r3, [r5, #84]	; 0x54
 8007be4:	e7ef      	b.n	8007bc6 <initialize.lto_priv.304+0x7b6>
 8007be6:	666a      	str	r2, [r5, #100]	; 0x64
 8007be8:	66aa      	str	r2, [r5, #104]	; 0x68
 8007bea:	0030      	movs	r0, r6
 8007bec:	f7fe fcfc 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	0007      	movs	r7, r0
 8007bf4:	4298      	cmp	r0, r3
 8007bf6:	d00b      	beq.n	8007c10 <initialize.lto_priv.304+0x800>
 8007bf8:	0033      	movs	r3, r6
 8007bfa:	3350      	adds	r3, #80	; 0x50
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	930d      	str	r3, [sp, #52]	; 0x34
 8007c00:	0033      	movs	r3, r6
 8007c02:	3352      	adds	r3, #82	; 0x52
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	930c      	str	r3, [sp, #48]	; 0x30
 8007c08:	0033      	movs	r3, r6
 8007c0a:	334f      	adds	r3, #79	; 0x4f
 8007c0c:	781f      	ldrb	r7, [r3, #0]
 8007c0e:	003b      	movs	r3, r7
 8007c10:	002a      	movs	r2, r5
 8007c12:	32b4      	adds	r2, #180	; 0xb4
 8007c14:	6013      	str	r3, [r2, #0]
 8007c16:	2f00      	cmp	r7, #0
 8007c18:	d002      	beq.n	8007c20 <initialize.lto_priv.304+0x810>
 8007c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	6053      	str	r3, [r2, #4]
 8007c20:	0030      	movs	r0, r6
 8007c22:	f7fb fda1 	bl	8003768 <acc_base_configuration_tx_disable_get>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4698      	mov	r8, r3
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d103      	bne.n	8007c36 <initialize.lto_priv.304+0x826>
 8007c2e:	0003      	movs	r3, r0
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	d000      	beq.n	8007c36 <initialize.lto_priv.304+0x826>
 8007c34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c36:	4642      	mov	r2, r8
 8007c38:	439a      	bics	r2, r3
 8007c3a:	66ea      	str	r2, [r5, #108]	; 0x6c
 8007c3c:	0030      	movs	r0, r6
 8007c3e:	f7fb fd8a 	bl	8003756 <acc_base_configuration_decrease_tx_emission_get>
 8007c42:	4643      	mov	r3, r8
 8007c44:	4058      	eors	r0, r3
 8007c46:	b2c0      	uxtb	r0, r0
 8007c48:	676b      	str	r3, [r5, #116]	; 0x74
 8007c4a:	6728      	str	r0, [r5, #112]	; 0x70
 8007c4c:	0030      	movs	r0, r6
 8007c4e:	f7fb fd77 	bl	8003740 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007c52:	3801      	subs	r0, #1
 8007c54:	67a8      	str	r0, [r5, #120]	; 0x78
 8007c56:	0030      	movs	r0, r6
 8007c58:	f7fe fcc6 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	d000      	beq.n	8007c64 <initialize.lto_priv.304+0x854>
 8007c62:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8007c64:	67eb      	str	r3, [r5, #124]	; 0x7c
 8007c66:	0030      	movs	r0, r6
 8007c68:	f7fb fd3f 	bl	80036ea <acc_base_configuration_integrator_get>
 8007c6c:	1d2b      	adds	r3, r5, #4
 8007c6e:	67d8      	str	r0, [r3, #124]	; 0x7c
 8007c70:	0030      	movs	r0, r6
 8007c72:	f7fe fcb9 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007c76:	2300      	movs	r3, #0
 8007c78:	4298      	cmp	r0, r3
 8007c7a:	d001      	beq.n	8007c80 <initialize.lto_priv.304+0x870>
 8007c7c:	1db3      	adds	r3, r6, #6
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	002a      	movs	r2, r5
 8007c82:	3b01      	subs	r3, #1
 8007c84:	3208      	adds	r2, #8
 8007c86:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007c88:	0030      	movs	r0, r6
 8007c8a:	f7fb fd23 	bl	80036d4 <acc_base_configuration_wg_duration_get>
 8007c8e:	002b      	movs	r3, r5
 8007c90:	3388      	adds	r3, #136	; 0x88
 8007c92:	6018      	str	r0, [r3, #0]
 8007c94:	0030      	movs	r0, r6
 8007c96:	f7fe fca7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d002      	beq.n	8007ca4 <initialize.lto_priv.304+0x894>
 8007c9e:	0033      	movs	r3, r6
 8007ca0:	336d      	adds	r3, #109	; 0x6d
 8007ca2:	7818      	ldrb	r0, [r3, #0]
 8007ca4:	002b      	movs	r3, r5
 8007ca6:	338d      	adds	r3, #141	; 0x8d
 8007ca8:	7018      	strb	r0, [r3, #0]
 8007caa:	0030      	movs	r0, r6
 8007cac:	f7fa ffba 	bl	8002c24 <acc_base_configuration_downsampling_factor_get>
 8007cb0:	002b      	movs	r3, r5
 8007cb2:	33a4      	adds	r3, #164	; 0xa4
 8007cb4:	6018      	str	r0, [r3, #0]
 8007cb6:	0030      	movs	r0, r6
 8007cb8:	f7fe fc96 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4298      	cmp	r0, r3
 8007cc0:	d002      	beq.n	8007cc8 <initialize.lto_priv.304+0x8b8>
 8007cc2:	0033      	movs	r3, r6
 8007cc4:	336b      	adds	r3, #107	; 0x6b
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	002a      	movs	r2, r5
 8007cca:	329c      	adds	r2, #156	; 0x9c
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	0030      	movs	r0, r6
 8007cd0:	f7fe fc8a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4298      	cmp	r0, r3
 8007cd8:	d002      	beq.n	8007ce0 <initialize.lto_priv.304+0x8d0>
 8007cda:	0033      	movs	r3, r6
 8007cdc:	336c      	adds	r3, #108	; 0x6c
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	002a      	movs	r2, r5
 8007ce2:	32a0      	adds	r2, #160	; 0xa0
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	0030      	movs	r0, r6
 8007ce8:	f7fa ff8a 	bl	8002c00 <acc_base_configuration_asynchronous_measurement_get>
 8007cec:	2301      	movs	r3, #1
 8007cee:	002a      	movs	r2, r5
 8007cf0:	4058      	eors	r0, r3
 8007cf2:	32ac      	adds	r2, #172	; 0xac
 8007cf4:	7053      	strb	r3, [r2, #1]
 8007cf6:	7010      	strb	r0, [r2, #0]
 8007cf8:	464a      	mov	r2, r9
 8007cfa:	002b      	movs	r3, r5
 8007cfc:	8892      	ldrh	r2, [r2, #4]
 8007cfe:	3390      	adds	r3, #144	; 0x90
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	464b      	mov	r3, r9
 8007d04:	899b      	ldrh	r3, [r3, #12]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d945      	bls.n	8007d96 <initialize.lto_priv.304+0x986>
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	6958      	ldr	r0, [r3, #20]
 8007d0e:	f7fd ff11 	bl	8005b34 <get_package_range_coarse_max>
 8007d12:	002b      	movs	r3, r5
 8007d14:	464a      	mov	r2, r9
 8007d16:	3394      	adds	r3, #148	; 0x94
 8007d18:	3801      	subs	r0, #1
 8007d1a:	6018      	str	r0, [r3, #0]
 8007d1c:	2108      	movs	r1, #8
 8007d1e:	5e52      	ldrsh	r2, [r2, r1]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	464a      	mov	r2, r9
 8007d24:	88d2      	ldrh	r2, [r2, #6]
 8007d26:	615a      	str	r2, [r3, #20]
 8007d28:	f7fe fa36 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 8007d2c:	002b      	movs	r3, r5
 8007d2e:	33b0      	adds	r3, #176	; 0xb0
 8007d30:	6018      	str	r0, [r3, #0]
 8007d32:	23e1      	movs	r3, #225	; 0xe1
 8007d34:	465a      	mov	r2, fp
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	8293      	strh	r3, [r2, #20]
 8007d3a:	002b      	movs	r3, r5
 8007d3c:	33cc      	adds	r3, #204	; 0xcc
 8007d3e:	8819      	ldrh	r1, [r3, #0]
 8007d40:	207c      	movs	r0, #124	; 0x7c
 8007d42:	f006 ff25 	bl	800eb90 <__udivsi3>
 8007d46:	9b06      	ldr	r3, [sp, #24]
 8007d48:	9a06      	ldr	r2, [sp, #24]
 8007d4a:	891b      	ldrh	r3, [r3, #8]
 8007d4c:	0021      	movs	r1, r4
 8007d4e:	4358      	muls	r0, r3
 8007d50:	9b06      	ldr	r3, [sp, #24]
 8007d52:	8158      	strh	r0, [r3, #10]
 8007d54:	2300      	movs	r3, #0
 8007d56:	0028      	movs	r0, r5
 8007d58:	8313      	strh	r3, [r2, #24]
 8007d5a:	f005 f9d3 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 8007d5e:	4649      	mov	r1, r9
 8007d60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d62:	0022      	movs	r2, r4
 8007d64:	8023      	strh	r3, [r4, #0]
 8007d66:	2013      	movs	r0, #19
 8007d68:	2301      	movs	r3, #1
 8007d6a:	6809      	ldr	r1, [r1, #0]
 8007d6c:	f005 feac 	bl	800dac8 <acc_probes_execute_uint16>
 8007d70:	35ce      	adds	r5, #206	; 0xce
 8007d72:	8823      	ldrh	r3, [r4, #0]
 8007d74:	882a      	ldrh	r2, [r5, #0]
 8007d76:	3303      	adds	r3, #3
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	9a06      	ldr	r2, [sp, #24]
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	81d3      	strh	r3, [r2, #14]
 8007d80:	2396      	movs	r3, #150	; 0x96
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	8193      	strh	r3, [r2, #12]
 8007d86:	f7ff fb5e 	bl	8007446 <initialize.lto_priv.304+0x36>
 8007d8a:	666a      	str	r2, [r5, #100]	; 0x64
 8007d8c:	66ab      	str	r3, [r5, #104]	; 0x68
 8007d8e:	e72c      	b.n	8007bea <initialize.lto_priv.304+0x7da>
 8007d90:	666b      	str	r3, [r5, #100]	; 0x64
 8007d92:	66ab      	str	r3, [r5, #104]	; 0x68
 8007d94:	e729      	b.n	8007bea <initialize.lto_priv.304+0x7da>
 8007d96:	464b      	mov	r3, r9
 8007d98:	8958      	ldrh	r0, [r3, #10]
 8007d9a:	e7ba      	b.n	8007d12 <initialize.lto_priv.304+0x902>
 8007d9c:	200003f0 	.word	0x200003f0
 8007da0:	0801cff4 	.word	0x0801cff4
 8007da4:	0801cfd4 	.word	0x0801cfd4

08007da8 <acc_base_configuration_print.part.5>:
 8007da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007daa:	46de      	mov	lr, fp
 8007dac:	4645      	mov	r5, r8
 8007dae:	4657      	mov	r7, sl
 8007db0:	464e      	mov	r6, r9
 8007db2:	b5e0      	push	{r5, r6, r7, lr}
 8007db4:	4b32      	ldr	r3, [pc, #200]	; (8007e80 <acc_base_configuration_print.part.5+0xd8>)
 8007db6:	b08f      	sub	sp, #60	; 0x3c
 8007db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dba:	0004      	movs	r4, r0
 8007dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8007dbe:	f7fb fce6 	bl	800378e <acc_base_configuration_sensor_get>
 8007dc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dc4:	0020      	movs	r0, r4
 8007dc6:	f7fb fcbb 	bl	8003740 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007dca:	900c      	str	r0, [sp, #48]	; 0x30
 8007dcc:	0020      	movs	r0, r4
 8007dce:	f7fe fc0b 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4698      	mov	r8, r3
 8007dd6:	4298      	cmp	r0, r3
 8007dd8:	d001      	beq.n	8007dde <acc_base_configuration_print.part.5+0x36>
 8007dda:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007ddc:	4698      	mov	r8, r3
 8007dde:	0020      	movs	r0, r4
 8007de0:	f7fb fc83 	bl	80036ea <acc_base_configuration_integrator_get>
 8007de4:	900d      	str	r0, [sp, #52]	; 0x34
 8007de6:	0020      	movs	r0, r4
 8007de8:	f7fb fc74 	bl	80036d4 <acc_base_configuration_wg_duration_get>
 8007dec:	4681      	mov	r9, r0
 8007dee:	0020      	movs	r0, r4
 8007df0:	f7fe fbfa 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007df4:	2600      	movs	r6, #0
 8007df6:	42b0      	cmp	r0, r6
 8007df8:	d001      	beq.n	8007dfe <acc_base_configuration_print.part.5+0x56>
 8007dfa:	1da3      	adds	r3, r4, #6
 8007dfc:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8007dfe:	0020      	movs	r0, r4
 8007e00:	f7fb fcbb 	bl	800377a <acc_base_configuration_power_save_mode_get>
 8007e04:	4f1f      	ldr	r7, [pc, #124]	; (8007e84 <acc_base_configuration_print.part.5+0xdc>)
 8007e06:	2804      	cmp	r0, #4
 8007e08:	d803      	bhi.n	8007e12 <acc_base_configuration_print.part.5+0x6a>
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <acc_base_configuration_print.part.5+0xe0>)
 8007e0c:	0080      	lsls	r0, r0, #2
 8007e0e:	1818      	adds	r0, r3, r0
 8007e10:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8007e12:	0020      	movs	r0, r4
 8007e14:	f7fe fbe8 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8007e18:	4d1c      	ldr	r5, [pc, #112]	; (8007e8c <acc_base_configuration_print.part.5+0xe4>)
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d008      	beq.n	8007e30 <acc_base_configuration_print.part.5+0x88>
 8007e1e:	0023      	movs	r3, r4
 8007e20:	336a      	adds	r3, #106	; 0x6a
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <acc_base_configuration_print.part.5+0x88>
 8007e28:	4d19      	ldr	r5, [pc, #100]	; (8007e90 <acc_base_configuration_print.part.5+0xe8>)
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d000      	beq.n	8007e30 <acc_base_configuration_print.part.5+0x88>
 8007e2e:	4d15      	ldr	r5, [pc, #84]	; (8007e84 <acc_base_configuration_print.part.5+0xdc>)
 8007e30:	0020      	movs	r0, r4
 8007e32:	f7fb fc99 	bl	8003768 <acc_base_configuration_tx_disable_get>
 8007e36:	4682      	mov	sl, r0
 8007e38:	0020      	movs	r0, r4
 8007e3a:	f7fb fc17 	bl	800366c <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007e3e:	4683      	mov	fp, r0
 8007e40:	0020      	movs	r0, r4
 8007e42:	f7fb fc88 	bl	8003756 <acc_base_configuration_decrease_tx_emission_get>
 8007e46:	465b      	mov	r3, fp
 8007e48:	9308      	str	r3, [sp, #32]
 8007e4a:	4653      	mov	r3, sl
 8007e4c:	9307      	str	r3, [sp, #28]
 8007e4e:	464b      	mov	r3, r9
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e54:	9009      	str	r0, [sp, #36]	; 0x24
 8007e56:	9302      	str	r3, [sp, #8]
 8007e58:	4643      	mov	r3, r8
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e5e:	9506      	str	r5, [sp, #24]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	9705      	str	r7, [sp, #20]
 8007e64:	9604      	str	r6, [sp, #16]
 8007e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e68:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <acc_base_configuration_print.part.5+0xec>)
 8007e6a:	490b      	ldr	r1, [pc, #44]	; (8007e98 <acc_base_configuration_print.part.5+0xf0>)
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e70:	47a0      	blx	r4
 8007e72:	b00f      	add	sp, #60	; 0x3c
 8007e74:	bc3c      	pop	{r2, r3, r4, r5}
 8007e76:	4690      	mov	r8, r2
 8007e78:	4699      	mov	r9, r3
 8007e7a:	46a2      	mov	sl, r4
 8007e7c:	46ab      	mov	fp, r5
 8007e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e80:	200003f0 	.word	0x200003f0
 8007e84:	0801c144 	.word	0x0801c144
 8007e88:	08015820 	.word	0x08015820
 8007e8c:	0801d01f 	.word	0x0801d01f
 8007e90:	0801bc68 	.word	0x0801bc68
 8007e94:	0801d021 	.word	0x0801d021
 8007e98:	0801cbb8 	.word	0x0801cbb8

08007e9c <start.lto_priv.293>:
 8007e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e9e:	46de      	mov	lr, fp
 8007ea0:	4657      	mov	r7, sl
 8007ea2:	464e      	mov	r6, r9
 8007ea4:	4645      	mov	r5, r8
 8007ea6:	b5e0      	push	{r5, r6, r7, lr}
 8007ea8:	6947      	ldr	r7, [r0, #20]
 8007eaa:	b093      	sub	sp, #76	; 0x4c
 8007eac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007eae:	4683      	mov	fp, r0
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	003b      	movs	r3, r7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb8:	9308      	str	r3, [sp, #32]
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <start.lto_priv.293+0x32>
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <start.lto_priv.293+0x32>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	643b      	str	r3, [r7, #64]	; 0x40
 8007ece:	465b      	mov	r3, fp
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	ac0f      	add	r4, sp, #60	; 0x3c
 8007ed4:	9306      	str	r3, [sp, #24]
 8007ed6:	680b      	ldr	r3, [r1, #0]
 8007ed8:	2500      	movs	r5, #0
 8007eda:	9309      	str	r3, [sp, #36]	; 0x24
 8007edc:	2315      	movs	r3, #21
 8007ede:	7023      	strb	r3, [r4, #0]
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	684e      	ldr	r6, [r1, #4]
 8007ee4:	9310      	str	r3, [sp, #64]	; 0x40
 8007ee6:	2307      	movs	r3, #7
 8007ee8:	0020      	movs	r0, r4
 8007eea:	22b4      	movs	r2, #180	; 0xb4
 8007eec:	0039      	movs	r1, r7
 8007eee:	9311      	str	r3, [sp, #68]	; 0x44
 8007ef0:	f005 f948 	bl	800d184 <acc_probes_execute>
 8007ef4:	9400      	str	r4, [sp, #0]
 8007ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8007ef8:	0032      	movs	r2, r6
 8007efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007efc:	9806      	ldr	r0, [sp, #24]
 8007efe:	950e      	str	r5, [sp, #56]	; 0x38
 8007f00:	950f      	str	r5, [sp, #60]	; 0x3c
 8007f02:	f005 f881 	bl	800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8007f06:	9503      	str	r5, [sp, #12]
 8007f08:	0004      	movs	r4, r0
 8007f0a:	42a8      	cmp	r0, r5
 8007f0c:	d112      	bne.n	8007f34 <start.lto_priv.293+0x98>
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <start.lto_priv.293+0x8c>)
 8007f10:	4a06      	ldr	r2, [pc, #24]	; (8007f2c <start.lto_priv.293+0x90>)
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	4906      	ldr	r1, [pc, #24]	; (8007f30 <start.lto_priv.293+0x94>)
 8007f16:	4798      	blx	r3
 8007f18:	0020      	movs	r0, r4
 8007f1a:	b013      	add	sp, #76	; 0x4c
 8007f1c:	bc3c      	pop	{r2, r3, r4, r5}
 8007f1e:	4690      	mov	r8, r2
 8007f20:	4699      	mov	r9, r3
 8007f22:	46a2      	mov	sl, r4
 8007f24:	46ab      	mov	fp, r5
 8007f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f28:	200003f0 	.word	0x200003f0
 8007f2c:	0801d059 	.word	0x0801d059
 8007f30:	0801cb6e 	.word	0x0801cb6e
 8007f34:	9a03      	ldr	r2, [sp, #12]
 8007f36:	4bfa      	ldr	r3, [pc, #1000]	; (8008320 <start.lto_priv.293+0x484>)
 8007f38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f3e:	9205      	str	r2, [sp, #20]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d900      	bls.n	8007f46 <start.lto_priv.293+0xaa>
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	0021      	movs	r1, r4
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f4e:	9b05      	ldr	r3, [sp, #20]
 8007f50:	085a      	lsrs	r2, r3, #1
 8007f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f54:	0098      	lsls	r0, r3, #2
 8007f56:	4bf3      	ldr	r3, [pc, #972]	; (8008324 <start.lto_priv.293+0x488>)
 8007f58:	18c0      	adds	r0, r0, r3
 8007f5a:	f004 fb4b 	bl	800c5f4 <acc_confprogram_copy>
 8007f5e:	466b      	mov	r3, sp
 8007f60:	899d      	ldrh	r5, [r3, #12]
 8007f62:	8a9e      	ldrh	r6, [r3, #20]
 8007f64:	4bf0      	ldr	r3, [pc, #960]	; (8008328 <start.lto_priv.293+0x48c>)
 8007f66:	0032      	movs	r2, r6
 8007f68:	4698      	mov	r8, r3
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	0029      	movs	r1, r5
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	23d2      	movs	r3, #210	; 0xd2
 8007f72:	0020      	movs	r0, r4
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	4643      	mov	r3, r8
 8007f78:	f004 fb84 	bl	800c684 <acc_confprogram_patch_offset>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	0032      	movs	r2, r6
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	23d0      	movs	r3, #208	; 0xd0
 8007f84:	0029      	movs	r1, r5
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	0020      	movs	r0, r4
 8007f8a:	4643      	mov	r3, r8
 8007f8c:	f004 fb7a 	bl	800c684 <acc_confprogram_patch_offset>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	0032      	movs	r2, r6
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	23d1      	movs	r3, #209	; 0xd1
 8007f98:	0029      	movs	r1, r5
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	0020      	movs	r0, r4
 8007f9e:	4643      	mov	r3, r8
 8007fa0:	f004 fb70 	bl	800c684 <acc_confprogram_patch_offset>
 8007fa4:	89bb      	ldrh	r3, [r7, #12]
 8007fa6:	0032      	movs	r2, r6
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	23ce      	movs	r3, #206	; 0xce
 8007fac:	0029      	movs	r1, r5
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	4643      	mov	r3, r8
 8007fb4:	f004 fb66 	bl	800c684 <acc_confprogram_patch_offset>
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	0032      	movs	r2, r6
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2365      	movs	r3, #101	; 0x65
 8007fc0:	0029      	movs	r1, r5
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	4643      	mov	r3, r8
 8007fc8:	f004 fb5c 	bl	800c684 <acc_confprogram_patch_offset>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	0032      	movs	r2, r6
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	23f0      	movs	r3, #240	; 0xf0
 8007fd4:	0029      	movs	r1, r5
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	0020      	movs	r0, r4
 8007fda:	4643      	mov	r3, r8
 8007fdc:	f004 fb52 	bl	800c684 <acc_confprogram_patch_offset>
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	0032      	movs	r2, r6
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	23e8      	movs	r3, #232	; 0xe8
 8007fe8:	0029      	movs	r1, r5
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	0020      	movs	r0, r4
 8007fee:	4643      	mov	r3, r8
 8007ff0:	f004 fb48 	bl	800c684 <acc_confprogram_patch_offset>
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	0032      	movs	r2, r6
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	23fc      	movs	r3, #252	; 0xfc
 8007ffc:	0029      	movs	r1, r5
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	0020      	movs	r0, r4
 8008002:	4643      	mov	r3, r8
 8008004:	f004 fb3e 	bl	800c684 <acc_confprogram_patch_offset>
 8008008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800a:	0032      	movs	r2, r6
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	23e0      	movs	r3, #224	; 0xe0
 8008010:	0029      	movs	r1, r5
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	0020      	movs	r0, r4
 8008016:	4643      	mov	r3, r8
 8008018:	f004 fb34 	bl	800c684 <acc_confprogram_patch_offset>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	0032      	movs	r2, r6
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	23e1      	movs	r3, #225	; 0xe1
 8008024:	0029      	movs	r1, r5
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	0020      	movs	r0, r4
 800802a:	4643      	mov	r3, r8
 800802c:	f004 fb2a 	bl	800c684 <acc_confprogram_patch_offset>
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008032:	0032      	movs	r2, r6
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2380      	movs	r3, #128	; 0x80
 8008038:	0029      	movs	r1, r5
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	0020      	movs	r0, r4
 800803e:	4643      	mov	r3, r8
 8008040:	f004 fb20 	bl	800c684 <acc_confprogram_patch_offset>
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	0032      	movs	r2, r6
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	2381      	movs	r3, #129	; 0x81
 800804c:	0029      	movs	r1, r5
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	0020      	movs	r0, r4
 8008052:	4643      	mov	r3, r8
 8008054:	f004 fb16 	bl	800c684 <acc_confprogram_patch_offset>
 8008058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805a:	0032      	movs	r2, r6
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	237f      	movs	r3, #127	; 0x7f
 8008060:	0029      	movs	r1, r5
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	0020      	movs	r0, r4
 8008066:	4643      	mov	r3, r8
 8008068:	f004 fb0c 	bl	800c684 <acc_confprogram_patch_offset>
 800806c:	2300      	movs	r3, #0
 800806e:	0032      	movs	r2, r6
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	0029      	movs	r1, r5
 8008076:	0020      	movs	r0, r4
 8008078:	469a      	mov	sl, r3
 800807a:	4643      	mov	r3, r8
 800807c:	f004 fb02 	bl	800c684 <acc_confprogram_patch_offset>
 8008080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008082:	0032      	movs	r2, r6
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	23ef      	movs	r3, #239	; 0xef
 8008088:	0029      	movs	r1, r5
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	0020      	movs	r0, r4
 800808e:	4643      	mov	r3, r8
 8008090:	f004 faf8 	bl	800c684 <acc_confprogram_patch_offset>
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	0032      	movs	r2, r6
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	23d6      	movs	r3, #214	; 0xd6
 800809c:	0029      	movs	r1, r5
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	0020      	movs	r0, r4
 80080a2:	4643      	mov	r3, r8
 80080a4:	f004 faee 	bl	800c684 <acc_confprogram_patch_offset>
 80080a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080aa:	0032      	movs	r2, r6
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	2378      	movs	r3, #120	; 0x78
 80080b0:	0029      	movs	r1, r5
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	0020      	movs	r0, r4
 80080b6:	4643      	mov	r3, r8
 80080b8:	f004 fae4 	bl	800c684 <acc_confprogram_patch_offset>
 80080bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080be:	4553      	cmp	r3, sl
 80080c0:	d06e      	beq.n	80081a0 <start.lto_priv.293+0x304>
 80080c2:	2301      	movs	r3, #1
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	330e      	adds	r3, #14
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	0032      	movs	r2, r6
 80080cc:	4643      	mov	r3, r8
 80080ce:	0029      	movs	r1, r5
 80080d0:	0020      	movs	r0, r4
 80080d2:	f004 fad7 	bl	800c684 <acc_confprogram_patch_offset>
 80080d6:	4b95      	ldr	r3, [pc, #596]	; (800832c <start.lto_priv.293+0x490>)
 80080d8:	0032      	movs	r2, r6
 80080da:	9301      	str	r3, [sp, #4]
 80080dc:	2311      	movs	r3, #17
 80080de:	0029      	movs	r1, r5
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	0020      	movs	r0, r4
 80080e4:	4643      	mov	r3, r8
 80080e6:	f004 facd 	bl	800c684 <acc_confprogram_patch_offset>
 80080ea:	2207      	movs	r2, #7
 80080ec:	2313      	movs	r3, #19
 80080ee:	4691      	mov	r9, r2
 80080f0:	9201      	str	r2, [sp, #4]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	0032      	movs	r2, r6
 80080f6:	4643      	mov	r3, r8
 80080f8:	0029      	movs	r1, r5
 80080fa:	0020      	movs	r0, r4
 80080fc:	f004 fac2 	bl	800c684 <acc_confprogram_patch_offset>
 8008100:	4b8a      	ldr	r3, [pc, #552]	; (800832c <start.lto_priv.293+0x490>)
 8008102:	0032      	movs	r2, r6
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	2310      	movs	r3, #16
 8008108:	0029      	movs	r1, r5
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	0020      	movs	r0, r4
 800810e:	4643      	mov	r3, r8
 8008110:	f004 fab8 	bl	800c684 <acc_confprogram_patch_offset>
 8008114:	4653      	mov	r3, sl
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	3312      	adds	r3, #18
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	0032      	movs	r2, r6
 800811e:	4643      	mov	r3, r8
 8008120:	0029      	movs	r1, r5
 8008122:	0020      	movs	r0, r4
 8008124:	f004 faae 	bl	800c684 <acc_confprogram_patch_offset>
 8008128:	4b81      	ldr	r3, [pc, #516]	; (8008330 <start.lto_priv.293+0x494>)
 800812a:	0032      	movs	r2, r6
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	2314      	movs	r3, #20
 8008130:	0029      	movs	r1, r5
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	0020      	movs	r0, r4
 8008136:	4643      	mov	r3, r8
 8008138:	f004 faa4 	bl	800c684 <acc_confprogram_patch_offset>
 800813c:	464b      	mov	r3, r9
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	330e      	adds	r3, #14
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	0032      	movs	r2, r6
 8008146:	4643      	mov	r3, r8
 8008148:	0029      	movs	r1, r5
 800814a:	0020      	movs	r0, r4
 800814c:	f004 fa9a 	bl	800c684 <acc_confprogram_patch_offset>
 8008150:	4b78      	ldr	r3, [pc, #480]	; (8008334 <start.lto_priv.293+0x498>)
 8008152:	0032      	movs	r2, r6
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	230d      	movs	r3, #13
 8008158:	0029      	movs	r1, r5
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	0020      	movs	r0, r4
 800815e:	4643      	mov	r3, r8
 8008160:	f004 fa90 	bl	800c684 <acc_confprogram_patch_offset>
 8008164:	464b      	mov	r3, r9
 8008166:	9301      	str	r3, [sp, #4]
 8008168:	18db      	adds	r3, r3, r3
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	0032      	movs	r2, r6
 800816e:	4643      	mov	r3, r8
 8008170:	0029      	movs	r1, r5
 8008172:	0020      	movs	r0, r4
 8008174:	f004 fa86 	bl	800c684 <acc_confprogram_patch_offset>
 8008178:	4b6f      	ldr	r3, [pc, #444]	; (8008338 <start.lto_priv.293+0x49c>)
 800817a:	0032      	movs	r2, r6
 800817c:	9301      	str	r3, [sp, #4]
 800817e:	2316      	movs	r3, #22
 8008180:	0029      	movs	r1, r5
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	0020      	movs	r0, r4
 8008186:	4643      	mov	r3, r8
 8008188:	f004 fa7c 	bl	800c684 <acc_confprogram_patch_offset>
 800818c:	464b      	mov	r3, r9
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	3310      	adds	r3, #16
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	0032      	movs	r2, r6
 8008196:	4643      	mov	r3, r8
 8008198:	0029      	movs	r1, r5
 800819a:	0020      	movs	r0, r4
 800819c:	f004 fa72 	bl	800c684 <acc_confprogram_patch_offset>
 80081a0:	4b61      	ldr	r3, [pc, #388]	; (8008328 <start.lto_priv.293+0x48c>)
 80081a2:	0032      	movs	r2, r6
 80081a4:	4699      	mov	r9, r3
 80081a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a8:	0029      	movs	r1, r5
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	2386      	movs	r3, #134	; 0x86
 80081ae:	0020      	movs	r0, r4
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	464b      	mov	r3, r9
 80081b4:	f004 fa66 	bl	800c684 <acc_confprogram_patch_offset>
 80081b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ba:	0032      	movs	r2, r6
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	23d3      	movs	r3, #211	; 0xd3
 80081c0:	0029      	movs	r1, r5
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	0020      	movs	r0, r4
 80081c6:	464b      	mov	r3, r9
 80081c8:	f004 fa5c 	bl	800c684 <acc_confprogram_patch_offset>
 80081cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ce:	0032      	movs	r2, r6
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	23f3      	movs	r3, #243	; 0xf3
 80081d4:	0029      	movs	r1, r5
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	0020      	movs	r0, r4
 80081da:	464b      	mov	r3, r9
 80081dc:	f004 fa52 	bl	800c684 <acc_confprogram_patch_offset>
 80081e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e2:	0032      	movs	r2, r6
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	2382      	movs	r3, #130	; 0x82
 80081e8:	0029      	movs	r1, r5
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	0020      	movs	r0, r4
 80081ee:	464b      	mov	r3, r9
 80081f0:	f004 fa48 	bl	800c684 <acc_confprogram_patch_offset>
 80081f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	4690      	mov	r8, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	9204      	str	r2, [sp, #16]
 80081fe:	4642      	mov	r2, r8
 8008200:	2a08      	cmp	r2, #8
 8008202:	d914      	bls.n	800822e <start.lto_priv.293+0x392>
 8008204:	4643      	mov	r3, r8
 8008206:	22ff      	movs	r2, #255	; 0xff
 8008208:	3b08      	subs	r3, #8
 800820a:	409a      	lsls	r2, r3
 800820c:	0013      	movs	r3, r2
 800820e:	22ff      	movs	r2, #255	; 0xff
 8008210:	4393      	bics	r3, r2
 8008212:	b29b      	uxth	r3, r3
 8008214:	9304      	str	r3, [sp, #16]
 8008216:	2302      	movs	r3, #2
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	33e0      	adds	r3, #224	; 0xe0
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	0032      	movs	r2, r6
 8008220:	464b      	mov	r3, r9
 8008222:	0029      	movs	r1, r5
 8008224:	0020      	movs	r0, r4
 8008226:	f004 fa2d 	bl	800c684 <acc_confprogram_patch_offset>
 800822a:	2308      	movs	r3, #8
 800822c:	4698      	mov	r8, r3
 800822e:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <start.lto_priv.293+0x48c>)
 8008230:	0032      	movs	r2, r6
 8008232:	469a      	mov	sl, r3
 8008234:	4643      	mov	r3, r8
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	23e9      	movs	r3, #233	; 0xe9
 800823a:	0029      	movs	r1, r5
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	0020      	movs	r0, r4
 8008240:	4653      	mov	r3, sl
 8008242:	f004 fa1f 	bl	800c684 <acc_confprogram_patch_offset>
 8008246:	4643      	mov	r3, r8
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	23d9      	movs	r3, #217	; 0xd9
 800824c:	0032      	movs	r2, r6
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	0029      	movs	r1, r5
 8008252:	4653      	mov	r3, sl
 8008254:	0020      	movs	r0, r4
 8008256:	f004 fa15 	bl	800c684 <acc_confprogram_patch_offset>
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	9a04      	ldr	r2, [sp, #16]
 800825e:	0029      	movs	r1, r5
 8008260:	4313      	orrs	r3, r2
 8008262:	930c      	str	r3, [sp, #48]	; 0x30
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	23eb      	movs	r3, #235	; 0xeb
 8008268:	0032      	movs	r2, r6
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	0020      	movs	r0, r4
 800826e:	4653      	mov	r3, sl
 8008270:	f004 fa08 	bl	800c684 <acc_confprogram_patch_offset>
 8008274:	23c0      	movs	r3, #192	; 0xc0
 8008276:	9a04      	ldr	r2, [sp, #16]
 8008278:	0029      	movs	r1, r5
 800827a:	431a      	orrs	r2, r3
 800827c:	23ed      	movs	r3, #237	; 0xed
 800827e:	4690      	mov	r8, r2
 8008280:	9201      	str	r2, [sp, #4]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	0032      	movs	r2, r6
 8008286:	4653      	mov	r3, sl
 8008288:	0020      	movs	r0, r4
 800828a:	f004 f9fb 	bl	800c684 <acc_confprogram_patch_offset>
 800828e:	23ff      	movs	r3, #255	; 0xff
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	0029      	movs	r1, r5
 8008294:	4313      	orrs	r3, r2
 8008296:	4699      	mov	r9, r3
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	23ec      	movs	r3, #236	; 0xec
 800829c:	0032      	movs	r2, r6
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	0020      	movs	r0, r4
 80082a2:	4653      	mov	r3, sl
 80082a4:	f004 f9ee 	bl	800c684 <acc_confprogram_patch_offset>
 80082a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082aa:	0032      	movs	r2, r6
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	23db      	movs	r3, #219	; 0xdb
 80082b0:	0029      	movs	r1, r5
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	0020      	movs	r0, r4
 80082b6:	4653      	mov	r3, sl
 80082b8:	f004 f9e4 	bl	800c684 <acc_confprogram_patch_offset>
 80082bc:	4643      	mov	r3, r8
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	23dd      	movs	r3, #221	; 0xdd
 80082c2:	0032      	movs	r2, r6
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	0029      	movs	r1, r5
 80082c8:	4653      	mov	r3, sl
 80082ca:	0020      	movs	r0, r4
 80082cc:	f004 f9da 	bl	800c684 <acc_confprogram_patch_offset>
 80082d0:	464b      	mov	r3, r9
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	23dc      	movs	r3, #220	; 0xdc
 80082d6:	0032      	movs	r2, r6
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	0029      	movs	r1, r5
 80082dc:	4653      	mov	r3, sl
 80082de:	0020      	movs	r0, r4
 80082e0:	f004 f9d0 	bl	800c684 <acc_confprogram_patch_offset>
 80082e4:	22f0      	movs	r2, #240	; 0xf0
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	0029      	movs	r1, r5
 80082ea:	4313      	orrs	r3, r2
 80082ec:	4698      	mov	r8, r3
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	23cd      	movs	r3, #205	; 0xcd
 80082f2:	0032      	movs	r2, r6
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	0020      	movs	r0, r4
 80082f8:	4653      	mov	r3, sl
 80082fa:	f004 f9c3 	bl	800c684 <acc_confprogram_patch_offset>
 80082fe:	4643      	mov	r3, r8
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	2385      	movs	r3, #133	; 0x85
 8008304:	0032      	movs	r2, r6
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	0029      	movs	r1, r5
 800830a:	4653      	mov	r3, sl
 800830c:	0020      	movs	r0, r4
 800830e:	f004 f9b9 	bl	800c684 <acc_confprogram_patch_offset>
 8008312:	464b      	mov	r3, r9
 8008314:	9301      	str	r3, [sp, #4]
 8008316:	2321      	movs	r3, #33	; 0x21
 8008318:	0032      	movs	r2, r6
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	e00e      	b.n	800833c <start.lto_priv.293+0x4a0>
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	0000076a 	.word	0x0000076a
 8008324:	08017ec8 	.word	0x08017ec8
 8008328:	08016988 	.word	0x08016988
 800832c:	0000ff80 	.word	0x0000ff80
 8008330:	0000ffc0 	.word	0x0000ffc0
 8008334:	0000fff0 	.word	0x0000fff0
 8008338:	0000ffff 	.word	0x0000ffff
 800833c:	0029      	movs	r1, r5
 800833e:	4653      	mov	r3, sl
 8008340:	0020      	movs	r0, r4
 8008342:	f004 f99f 	bl	800c684 <acc_confprogram_patch_offset>
 8008346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008348:	0032      	movs	r2, r6
 800834a:	3b01      	subs	r3, #1
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	2374      	movs	r3, #116	; 0x74
 8008350:	0029      	movs	r1, r5
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	0020      	movs	r0, r4
 8008356:	4653      	mov	r3, sl
 8008358:	f004 f994 	bl	800c684 <acc_confprogram_patch_offset>
 800835c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800835e:	0032      	movs	r2, r6
 8008360:	9301      	str	r3, [sp, #4]
 8008362:	2305      	movs	r3, #5
 8008364:	0029      	movs	r1, r5
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	0020      	movs	r0, r4
 800836a:	4653      	mov	r3, sl
 800836c:	f004 f98a 	bl	800c684 <acc_confprogram_patch_offset>
 8008370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008372:	0032      	movs	r2, r6
 8008374:	015b      	lsls	r3, r3, #5
 8008376:	3b03      	subs	r3, #3
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	2363      	movs	r3, #99	; 0x63
 800837c:	0029      	movs	r1, r5
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	0020      	movs	r0, r4
 8008382:	4653      	mov	r3, sl
 8008384:	f004 f97e 	bl	800c684 <acc_confprogram_patch_offset>
 8008388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800838a:	0032      	movs	r2, r6
 800838c:	015b      	lsls	r3, r3, #5
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	3b03      	subs	r3, #3
 8008392:	9301      	str	r3, [sp, #4]
 8008394:	2364      	movs	r3, #100	; 0x64
 8008396:	0029      	movs	r1, r5
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	0020      	movs	r0, r4
 800839c:	4653      	mov	r3, sl
 800839e:	f004 f971 	bl	800c684 <acc_confprogram_patch_offset>
 80083a2:	2390      	movs	r3, #144	; 0x90
 80083a4:	4698      	mov	r8, r3
 80083a6:	44b8      	add	r8, r7
 80083a8:	4643      	mov	r3, r8
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	0032      	movs	r2, r6
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	23de      	movs	r3, #222	; 0xde
 80083b2:	0029      	movs	r1, r5
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	0020      	movs	r0, r4
 80083b8:	4653      	mov	r3, sl
 80083ba:	f004 f963 	bl	800c684 <acc_confprogram_patch_offset>
 80083be:	003b      	movs	r3, r7
 80083c0:	338c      	adds	r3, #140	; 0x8c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	0032      	movs	r2, r6
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	23ee      	movs	r3, #238	; 0xee
 80083ca:	0029      	movs	r1, r5
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	0020      	movs	r0, r4
 80083d0:	4653      	mov	r3, sl
 80083d2:	f004 f957 	bl	800c684 <acc_confprogram_patch_offset>
 80083d6:	4643      	mov	r3, r8
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	0032      	movs	r2, r6
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	237e      	movs	r3, #126	; 0x7e
 80083e0:	0029      	movs	r1, r5
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	0020      	movs	r0, r4
 80083e6:	4653      	mov	r3, sl
 80083e8:	f004 f94c 	bl	800c684 <acc_confprogram_patch_offset>
 80083ec:	003b      	movs	r3, r7
 80083ee:	3394      	adds	r3, #148	; 0x94
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	0032      	movs	r2, r6
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	23e4      	movs	r3, #228	; 0xe4
 80083f8:	0029      	movs	r1, r5
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	0020      	movs	r0, r4
 80083fe:	4653      	mov	r3, sl
 8008400:	f004 f940 	bl	800c684 <acc_confprogram_patch_offset>
 8008404:	003b      	movs	r3, r7
 8008406:	3398      	adds	r3, #152	; 0x98
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	0032      	movs	r2, r6
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	237c      	movs	r3, #124	; 0x7c
 8008410:	0029      	movs	r1, r5
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	0020      	movs	r0, r4
 8008416:	4653      	mov	r3, sl
 8008418:	f004 f934 	bl	800c684 <acc_confprogram_patch_offset>
 800841c:	003b      	movs	r3, r7
 800841e:	339c      	adds	r3, #156	; 0x9c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	0032      	movs	r2, r6
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	23c9      	movs	r3, #201	; 0xc9
 8008428:	0029      	movs	r1, r5
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	0020      	movs	r0, r4
 800842e:	4653      	mov	r3, sl
 8008430:	f004 f928 	bl	800c684 <acc_confprogram_patch_offset>
 8008434:	003b      	movs	r3, r7
 8008436:	33a0      	adds	r3, #160	; 0xa0
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	0032      	movs	r2, r6
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	2384      	movs	r3, #132	; 0x84
 8008440:	0029      	movs	r1, r5
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	0020      	movs	r0, r4
 8008446:	4653      	mov	r3, sl
 8008448:	f004 f91c 	bl	800c684 <acc_confprogram_patch_offset>
 800844c:	003b      	movs	r3, r7
 800844e:	33a4      	adds	r3, #164	; 0xa4
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	0032      	movs	r2, r6
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	237b      	movs	r3, #123	; 0x7b
 8008458:	0029      	movs	r1, r5
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	0020      	movs	r0, r4
 800845e:	4653      	mov	r3, sl
 8008460:	f004 f910 	bl	800c684 <acc_confprogram_patch_offset>
 8008464:	003b      	movs	r3, r7
 8008466:	33a8      	adds	r3, #168	; 0xa8
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	0032      	movs	r2, r6
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	23c7      	movs	r3, #199	; 0xc7
 8008470:	0029      	movs	r1, r5
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	0020      	movs	r0, r4
 8008476:	4653      	mov	r3, sl
 8008478:	f004 f904 	bl	800c684 <acc_confprogram_patch_offset>
 800847c:	003b      	movs	r3, r7
 800847e:	33ac      	adds	r3, #172	; 0xac
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	0032      	movs	r2, r6
 8008484:	9301      	str	r3, [sp, #4]
 8008486:	2383      	movs	r3, #131	; 0x83
 8008488:	0029      	movs	r1, r5
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	0020      	movs	r0, r4
 800848e:	4653      	mov	r3, sl
 8008490:	f004 f8f8 	bl	800c684 <acc_confprogram_patch_offset>
 8008494:	003b      	movs	r3, r7
 8008496:	33b0      	adds	r3, #176	; 0xb0
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	0032      	movs	r2, r6
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	23c8      	movs	r3, #200	; 0xc8
 80084a0:	0029      	movs	r1, r5
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	0020      	movs	r0, r4
 80084a6:	4653      	mov	r3, sl
 80084a8:	f004 f8ec 	bl	800c684 <acc_confprogram_patch_offset>
 80084ac:	003b      	movs	r3, r7
 80084ae:	3370      	adds	r3, #112	; 0x70
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	4698      	mov	r8, r3
 80084b4:	4642      	mov	r2, r8
 80084b6:	23d7      	movs	r3, #215	; 0xd7
 80084b8:	2a00      	cmp	r2, #0
 80084ba:	d000      	beq.n	80084be <start.lto_priv.293+0x622>
 80084bc:	e07e      	b.n	80085bc <start.lto_priv.293+0x720>
 80084be:	3201      	adds	r2, #1
 80084c0:	9201      	str	r2, [sp, #4]
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	0032      	movs	r2, r6
 80084c6:	4653      	mov	r3, sl
 80084c8:	0029      	movs	r1, r5
 80084ca:	0020      	movs	r0, r4
 80084cc:	f004 f8da 	bl	800c684 <acc_confprogram_patch_offset>
 80084d0:	4643      	mov	r3, r8
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	23d8      	movs	r3, #216	; 0xd8
 80084d6:	0032      	movs	r2, r6
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	0029      	movs	r1, r5
 80084dc:	4653      	mov	r3, sl
 80084de:	0020      	movs	r0, r4
 80084e0:	f004 f8d0 	bl	800c684 <acc_confprogram_patch_offset>
 80084e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e6:	0032      	movs	r2, r6
 80084e8:	3b01      	subs	r3, #1
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	23e3      	movs	r3, #227	; 0xe3
 80084ee:	0029      	movs	r1, r5
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	0020      	movs	r0, r4
 80084f4:	4653      	mov	r3, sl
 80084f6:	f004 f8c5 	bl	800c684 <acc_confprogram_patch_offset>
 80084fa:	4b66      	ldr	r3, [pc, #408]	; (8008694 <start.lto_priv.293+0x7f8>)
 80084fc:	0032      	movs	r2, r6
 80084fe:	4698      	mov	r8, r3
 8008500:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008502:	0029      	movs	r1, r5
 8008504:	9301      	str	r3, [sp, #4]
 8008506:	23d4      	movs	r3, #212	; 0xd4
 8008508:	0020      	movs	r0, r4
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4643      	mov	r3, r8
 800850e:	f004 f8b9 	bl	800c684 <acc_confprogram_patch_offset>
 8008512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008514:	0032      	movs	r2, r6
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	2375      	movs	r3, #117	; 0x75
 800851a:	0029      	movs	r1, r5
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	0020      	movs	r0, r4
 8008520:	4643      	mov	r3, r8
 8008522:	f004 f8af 	bl	800c684 <acc_confprogram_patch_offset>
 8008526:	1d3b      	adds	r3, r7, #4
 8008528:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800852a:	495b      	ldr	r1, [pc, #364]	; (8008698 <start.lto_priv.293+0x7fc>)
 800852c:	f005 fffe 	bl	800e52c <__aeabi_fmul>
 8008530:	f006 fd3c 	bl	800efac <__aeabi_f2uiz>
 8008534:	23e5      	movs	r3, #229	; 0xe5
 8008536:	3801      	subs	r0, #1
 8008538:	b280      	uxth	r0, r0
 800853a:	9001      	str	r0, [sp, #4]
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	0032      	movs	r2, r6
 8008540:	4643      	mov	r3, r8
 8008542:	0029      	movs	r1, r5
 8008544:	0020      	movs	r0, r4
 8008546:	f004 f89d 	bl	800c684 <acc_confprogram_patch_offset>
 800854a:	2308      	movs	r3, #8
 800854c:	4699      	mov	r9, r3
 800854e:	44b9      	add	r9, r7
 8008550:	464b      	mov	r3, r9
 8008552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008554:	0032      	movs	r2, r6
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	23d5      	movs	r3, #213	; 0xd5
 800855a:	0029      	movs	r1, r5
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	0020      	movs	r0, r4
 8008560:	4643      	mov	r3, r8
 8008562:	f004 f88f 	bl	800c684 <acc_confprogram_patch_offset>
 8008566:	464b      	mov	r3, r9
 8008568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00b      	beq.n	8008586 <start.lto_priv.293+0x6ea>
 800856e:	003b      	movs	r3, r7
 8008570:	3388      	adds	r3, #136	; 0x88
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	0032      	movs	r2, r6
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	2371      	movs	r3, #113	; 0x71
 800857a:	0029      	movs	r1, r5
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	0020      	movs	r0, r4
 8008580:	4643      	mov	r3, r8
 8008582:	f004 f87f 	bl	800c684 <acc_confprogram_patch_offset>
 8008586:	466b      	mov	r3, sp
 8008588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800858c:	9806      	ldr	r0, [sp, #24]
 800858e:	9b05      	ldr	r3, [sp, #20]
 8008590:	f7fd fd9a 	bl	80060c8 <acc_sensor_r2_load_confmem>
 8008594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	4694      	mov	ip, r2
 800859a:	4463      	add	r3, ip
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	9a03      	ldr	r2, [sp, #12]
 80085a0:	4b3e      	ldr	r3, [pc, #248]	; (800869c <start.lto_priv.293+0x800>)
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d800      	bhi.n	80085a8 <start.lto_priv.293+0x70c>
 80085a6:	e4c5      	b.n	8007f34 <start.lto_priv.293+0x98>
 80085a8:	465b      	mov	r3, fp
 80085aa:	21f4      	movs	r1, #244	; 0xf4
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	0049      	lsls	r1, r1, #1
 80085b0:	f7fd fb95 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 80085b4:	1e04      	subs	r4, r0, #0
 80085b6:	d146      	bne.n	8008646 <start.lto_priv.293+0x7aa>
 80085b8:	2400      	movs	r4, #0
 80085ba:	e4ad      	b.n	8007f18 <start.lto_priv.293+0x7c>
 80085bc:	2200      	movs	r2, #0
 80085be:	4690      	mov	r8, r2
 80085c0:	9201      	str	r2, [sp, #4]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	0032      	movs	r2, r6
 80085c6:	4653      	mov	r3, sl
 80085c8:	0029      	movs	r1, r5
 80085ca:	0020      	movs	r0, r4
 80085cc:	f004 f85a 	bl	800c684 <acc_confprogram_patch_offset>
 80085d0:	2301      	movs	r3, #1
 80085d2:	46c1      	mov	r9, r8
 80085d4:	9301      	str	r3, [sp, #4]
 80085d6:	33d7      	adds	r3, #215	; 0xd7
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	0032      	movs	r2, r6
 80085dc:	4653      	mov	r3, sl
 80085de:	0029      	movs	r1, r5
 80085e0:	0020      	movs	r0, r4
 80085e2:	f004 f84f 	bl	800c684 <acc_confprogram_patch_offset>
 80085e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e8:	3301      	adds	r3, #1
 80085ea:	930d      	str	r3, [sp, #52]	; 0x34
 80085ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ee:	0029      	movs	r1, r5
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	464b      	mov	r3, r9
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	930c      	str	r3, [sp, #48]	; 0x30
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085fc:	4599      	cmp	r9, r3
 80085fe:	419b      	sbcs	r3, r3
 8008600:	425b      	negs	r3, r3
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	4b26      	ldr	r3, [pc, #152]	; (80086a0 <start.lto_priv.293+0x804>)
 8008606:	0020      	movs	r0, r4
 8008608:	5a9b      	ldrh	r3, [r3, r2]
 800860a:	0032      	movs	r2, r6
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4653      	mov	r3, sl
 8008610:	f004 f838 	bl	800c684 <acc_confprogram_patch_offset>
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	4599      	cmp	r9, r3
 8008618:	d20b      	bcs.n	8008632 <start.lto_priv.293+0x796>
 800861a:	4643      	mov	r3, r8
 800861c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <start.lto_priv.293+0x808>)
 8008622:	0029      	movs	r1, r5
 8008624:	5a9b      	ldrh	r3, [r3, r2]
 8008626:	0020      	movs	r0, r4
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	0032      	movs	r2, r6
 800862c:	4653      	mov	r3, sl
 800862e:	f004 f829 	bl	800c684 <acc_confprogram_patch_offset>
 8008632:	2301      	movs	r3, #1
 8008634:	469c      	mov	ip, r3
 8008636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008638:	44e1      	add	r9, ip
 800863a:	469c      	mov	ip, r3
 800863c:	464b      	mov	r3, r9
 800863e:	44e0      	add	r8, ip
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d1d3      	bne.n	80085ec <start.lto_priv.293+0x750>
 8008644:	e759      	b.n	80084fa <start.lto_priv.293+0x65e>
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d100      	bne.n	800864e <start.lto_priv.293+0x7b2>
 800864c:	e464      	b.n	8007f18 <start.lto_priv.293+0x7c>
 800864e:	465b      	mov	r3, fp
 8008650:	6919      	ldr	r1, [r3, #16]
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	f7fc fe7c 	bl	8005350 <acc_sensor_protocol_r2_wait_for_sync_start>
 8008658:	1e05      	subs	r5, r0, #0
 800865a:	d0ad      	beq.n	80085b8 <start.lto_priv.293+0x71c>
 800865c:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <start.lto_priv.293+0x80c>)
 800865e:	001a      	movs	r2, r3
 8008660:	3230      	adds	r2, #48	; 0x30
 8008662:	7812      	ldrb	r2, [r2, #0]
 8008664:	2a01      	cmp	r2, #1
 8008666:	d904      	bls.n	8008672 <start.lto_priv.293+0x7d6>
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	4a10      	ldr	r2, [pc, #64]	; (80086ac <start.lto_priv.293+0x810>)
 800866c:	4910      	ldr	r1, [pc, #64]	; (80086b0 <start.lto_priv.293+0x814>)
 800866e:	2002      	movs	r0, #2
 8008670:	4798      	blx	r3
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d100      	bne.n	800867a <start.lto_priv.293+0x7de>
 8008678:	e44e      	b.n	8007f18 <start.lto_priv.293+0x7c>
 800867a:	4658      	mov	r0, fp
 800867c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867e:	4642      	mov	r2, r8
 8008680:	643b      	str	r3, [r7, #64]	; 0x40
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	490b      	ldr	r1, [pc, #44]	; (80086b4 <start.lto_priv.293+0x818>)
 8008686:	23ef      	movs	r3, #239	; 0xef
 8008688:	6800      	ldr	r0, [r0, #0]
 800868a:	f002 fb1d 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800868e:	002c      	movs	r4, r5
 8008690:	e442      	b.n	8007f18 <start.lto_priv.293+0x7c>
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	08016988 	.word	0x08016988
 8008698:	3751b717 	.word	0x3751b717
 800869c:	00000769 	.word	0x00000769
 80086a0:	08016908 	.word	0x08016908
 80086a4:	08016888 	.word	0x08016888
 80086a8:	200003f0 	.word	0x200003f0
 80086ac:	0801c9e0 	.word	0x0801c9e0
 80086b0:	0801cb6e 	.word	0x0801cb6e
 80086b4:	08017ec8 	.word	0x08017ec8

080086b8 <calibrate.lto_priv.296>:
 80086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ba:	4657      	mov	r7, sl
 80086bc:	4645      	mov	r5, r8
 80086be:	46de      	mov	lr, fp
 80086c0:	464e      	mov	r6, r9
 80086c2:	b5e0      	push	{r5, r6, r7, lr}
 80086c4:	4cb4      	ldr	r4, [pc, #720]	; (8008998 <calibrate.lto_priv.296+0x2e0>)
 80086c6:	000f      	movs	r7, r1
 80086c8:	44a5      	add	sp, r4
 80086ca:	9337      	str	r3, [sp, #220]	; 0xdc
 80086cc:	4bb3      	ldr	r3, [pc, #716]	; (800899c <calibrate.lto_priv.296+0x2e4>)
 80086ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80086d0:	4698      	mov	r8, r3
 80086d2:	3330      	adds	r3, #48	; 0x30
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	0004      	movs	r4, r0
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d905      	bls.n	80086e8 <calibrate.lto_priv.296+0x30>
 80086dc:	4643      	mov	r3, r8
 80086de:	4ab0      	ldr	r2, [pc, #704]	; (80089a0 <calibrate.lto_priv.296+0x2e8>)
 80086e0:	49b0      	ldr	r1, [pc, #704]	; (80089a4 <calibrate.lto_priv.296+0x2ec>)
 80086e2:	2004      	movs	r0, #4
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	4798      	blx	r3
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	6965      	ldr	r5, [r4, #20]
 80086ec:	9309      	str	r3, [sp, #36]	; 0x24
 80086ee:	002b      	movs	r3, r5
 80086f0:	2600      	movs	r6, #0
 80086f2:	33bc      	adds	r3, #188	; 0xbc
 80086f4:	ac48      	add	r4, sp, #288	; 0x120
 80086f6:	601e      	str	r6, [r3, #0]
 80086f8:	0020      	movs	r0, r4
 80086fa:	f7fd fd65 	bl	80061c8 <calculate_pll_divisors.lto_priv.294>
 80086fe:	42b0      	cmp	r0, r6
 8008700:	d10a      	bne.n	8008718 <calibrate.lto_priv.296+0x60>
 8008702:	2400      	movs	r4, #0
 8008704:	0020      	movs	r0, r4
 8008706:	239b      	movs	r3, #155	; 0x9b
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	449d      	add	sp, r3
 800870c:	bc3c      	pop	{r2, r3, r4, r5}
 800870e:	4690      	mov	r8, r2
 8008710:	4699      	mov	r9, r3
 8008712:	46a2      	mov	sl, r4
 8008714:	46ab      	mov	fp, r5
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871a:	aa4e      	add	r2, sp, #312	; 0x138
 800871c:	934e      	str	r3, [sp, #312]	; 0x138
 800871e:	8863      	ldrh	r3, [r4, #2]
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	6053      	str	r3, [r2, #4]
 8008724:	88a3      	ldrh	r3, [r4, #4]
 8008726:	6838      	ldr	r0, [r7, #0]
 8008728:	6093      	str	r3, [r2, #8]
 800872a:	88e3      	ldrh	r3, [r4, #6]
 800872c:	60d3      	str	r3, [r2, #12]
 800872e:	8923      	ldrh	r3, [r4, #8]
 8008730:	8213      	strh	r3, [r2, #16]
 8008732:	ab46      	add	r3, sp, #280	; 0x118
 8008734:	4699      	mov	r9, r3
 8008736:	f005 f9d6 	bl	800dae6 <acc_cpd_cbank_and_vana_calibration>
 800873a:	2800      	cmp	r0, #0
 800873c:	d0e1      	beq.n	8008702 <calibrate.lto_priv.296+0x4a>
 800873e:	002b      	movs	r3, r5
 8008740:	33ce      	adds	r3, #206	; 0xce
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	35d0      	adds	r5, #208	; 0xd0
 8008746:	930c      	str	r3, [sp, #48]	; 0x30
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	4193      	sbcs	r3, r2
 800874c:	b2db      	uxtb	r3, r3
 800874e:	9338      	str	r3, [sp, #224]	; 0xe0
 8008750:	782b      	ldrb	r3, [r5, #0]
 8008752:	4a95      	ldr	r2, [pc, #596]	; (80089a8 <calibrate.lto_priv.296+0x2f0>)
 8008754:	932a      	str	r3, [sp, #168]	; 0xa8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4293      	cmp	r3, r2
 800875a:	d80e      	bhi.n	800877a <calibrate.lto_priv.296+0xc2>
 800875c:	4643      	mov	r3, r8
 800875e:	4a93      	ldr	r2, [pc, #588]	; (80089ac <calibrate.lto_priv.296+0x2f4>)
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	4993      	ldr	r1, [pc, #588]	; (80089b0 <calibrate.lto_priv.296+0x2f8>)
 8008764:	0030      	movs	r0, r6
 8008766:	4798      	blx	r3
 8008768:	4b92      	ldr	r3, [pc, #584]	; (80089b4 <calibrate.lto_priv.296+0x2fc>)
 800876a:	9617      	str	r6, [sp, #92]	; 0x5c
 800876c:	9316      	str	r3, [sp, #88]	; 0x58
 800876e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0c6      	beq.n	8008702 <calibrate.lto_priv.296+0x4a>
 8008774:	2400      	movs	r4, #0
 8008776:	f001 f986 	bl	8009a86 <calibrate.lto_priv.296+0x13ce>
 800877a:	8862      	ldrh	r2, [r4, #2]
 800877c:	2101      	movs	r1, #1
 800877e:	9224      	str	r2, [sp, #144]	; 0x90
 8008780:	88a2      	ldrh	r2, [r4, #4]
 8008782:	9225      	str	r2, [sp, #148]	; 0x94
 8008784:	88e2      	ldrh	r2, [r4, #6]
 8008786:	9226      	str	r2, [sp, #152]	; 0x98
 8008788:	8922      	ldrh	r2, [r4, #8]
 800878a:	9227      	str	r2, [sp, #156]	; 0x9c
 800878c:	9a46      	ldr	r2, [sp, #280]	; 0x118
 800878e:	9228      	str	r2, [sp, #160]	; 0xa0
 8008790:	464a      	mov	r2, r9
 8008792:	7912      	ldrb	r2, [r2, #4]
 8008794:	9229      	str	r2, [sp, #164]	; 0xa4
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	9210      	str	r2, [sp, #64]	; 0x40
 800879a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800879c:	4a86      	ldr	r2, [pc, #536]	; (80089b8 <calibrate.lto_priv.296+0x300>)
 800879e:	4684      	mov	ip, r0
 80087a0:	189a      	adds	r2, r3, r2
 80087a2:	438a      	bics	r2, r1
 80087a4:	4462      	add	r2, ip
 80087a6:	922b      	str	r2, [sp, #172]	; 0xac
 80087a8:	4a84      	ldr	r2, [pc, #528]	; (80089bc <calibrate.lto_priv.296+0x304>)
 80087aa:	4683      	mov	fp, r0
 80087ac:	4694      	mov	ip, r2
 80087ae:	4463      	add	r3, ip
 80087b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80087b2:	438b      	bics	r3, r1
 80087b4:	449b      	add	fp, r3
 80087b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087b8:	4b81      	ldr	r3, [pc, #516]	; (80089c0 <calibrate.lto_priv.296+0x308>)
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d80a      	bhi.n	80087d4 <calibrate.lto_priv.296+0x11c>
 80087be:	4b77      	ldr	r3, [pc, #476]	; (800899c <calibrate.lto_priv.296+0x2e4>)
 80087c0:	001a      	movs	r2, r3
 80087c2:	3230      	adds	r2, #48	; 0x30
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	428a      	cmp	r2, r1
 80087c8:	d904      	bls.n	80087d4 <calibrate.lto_priv.296+0x11c>
 80087ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087cc:	4a7d      	ldr	r2, [pc, #500]	; (80089c4 <calibrate.lto_priv.296+0x30c>)
 80087ce:	4978      	ldr	r1, [pc, #480]	; (80089b0 <calibrate.lto_priv.296+0x2f8>)
 80087d0:	2002      	movs	r0, #2
 80087d2:	4798      	blx	r3
 80087d4:	487c      	ldr	r0, [pc, #496]	; (80089c8 <calibrate.lto_priv.296+0x310>)
 80087d6:	f004 f804 	bl	800c7e2 <acc_diagnostic_log_set_scope>
 80087da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087dc:	487b      	ldr	r0, [pc, #492]	; (80089cc <calibrate.lto_priv.296+0x314>)
 80087de:	f003 fffc 	bl	800c7da <acc_diagnostic_log_scalar>
 80087e2:	2202      	movs	r2, #2
 80087e4:	2101      	movs	r1, #1
 80087e6:	487a      	ldr	r0, [pc, #488]	; (80089d0 <calibrate.lto_priv.296+0x318>)
 80087e8:	f003 fffa 	bl	800c7e0 <acc_diagnostic_log_declare_parameter>
 80087ec:	221f      	movs	r2, #31
 80087ee:	2100      	movs	r1, #0
 80087f0:	4878      	ldr	r0, [pc, #480]	; (80089d4 <calibrate.lto_priv.296+0x31c>)
 80087f2:	f003 fff5 	bl	800c7e0 <acc_diagnostic_log_declare_parameter>
 80087f6:	227b      	movs	r2, #123	; 0x7b
 80087f8:	2100      	movs	r1, #0
 80087fa:	4877      	ldr	r0, [pc, #476]	; (80089d8 <calibrate.lto_priv.296+0x320>)
 80087fc:	f003 fff0 	bl	800c7e0 <acc_diagnostic_log_declare_parameter>
 8008800:	220b      	movs	r2, #11
 8008802:	2100      	movs	r1, #0
 8008804:	4875      	ldr	r0, [pc, #468]	; (80089dc <calibrate.lto_priv.296+0x324>)
 8008806:	f003 ffeb 	bl	800c7e0 <acc_diagnostic_log_declare_parameter>
 800880a:	2302      	movs	r3, #2
 800880c:	9336      	str	r3, [sp, #216]	; 0xd8
 800880e:	4b69      	ldr	r3, [pc, #420]	; (80089b4 <calibrate.lto_priv.296+0x2fc>)
 8008810:	9316      	str	r3, [sp, #88]	; 0x58
 8008812:	2300      	movs	r3, #0
 8008814:	9317      	str	r3, [sp, #92]	; 0x5c
 8008816:	3302      	adds	r3, #2
 8008818:	930b      	str	r3, [sp, #44]	; 0x2c
 800881a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800881c:	486c      	ldr	r0, [pc, #432]	; (80089d0 <calibrate.lto_priv.296+0x318>)
 800881e:	f003 ffde 	bl	800c7de <acc_diagnostic_log_set_parameter>
 8008822:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008824:	930a      	str	r3, [sp, #40]	; 0x28
 8008826:	2300      	movs	r3, #0
 8008828:	4699      	mov	r9, r3
 800882a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	930d      	str	r3, [sp, #52]	; 0x34
 8008830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008832:	4b6b      	ldr	r3, [pc, #428]	; (80089e0 <calibrate.lto_priv.296+0x328>)
 8008834:	4694      	mov	ip, r2
 8008836:	4463      	add	r3, ip
 8008838:	9312      	str	r3, [sp, #72]	; 0x48
 800883a:	2400      	movs	r4, #0
 800883c:	4649      	mov	r1, r9
 800883e:	4867      	ldr	r0, [pc, #412]	; (80089dc <calibrate.lto_priv.296+0x324>)
 8008840:	f003 ffcd 	bl	800c7de <acc_diagnostic_log_set_parameter>
 8008844:	ab8d      	add	r3, sp, #564	; 0x234
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800884a:	ab80      	add	r3, sp, #512	; 0x200
 800884c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800884e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008850:	9480      	str	r4, [sp, #512]	; 0x200
 8008852:	948d      	str	r4, [sp, #564]	; 0x234
 8008854:	f004 fbd8 	bl	800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8008858:	42a0      	cmp	r0, r4
 800885a:	d105      	bne.n	8008868 <calibrate.lto_priv.296+0x1b0>
 800885c:	4b4f      	ldr	r3, [pc, #316]	; (800899c <calibrate.lto_priv.296+0x2e4>)
 800885e:	4a61      	ldr	r2, [pc, #388]	; (80089e4 <calibrate.lto_priv.296+0x32c>)
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	4961      	ldr	r1, [pc, #388]	; (80089e8 <calibrate.lto_priv.296+0x330>)
 8008864:	4798      	blx	r3
 8008866:	e782      	b.n	800876e <calibrate.lto_priv.296+0xb6>
 8008868:	4b60      	ldr	r3, [pc, #384]	; (80089ec <calibrate.lto_priv.296+0x334>)
 800886a:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 800886c:	9d80      	ldr	r5, [sp, #512]	; 0x200
 800886e:	1b1b      	subs	r3, r3, r4
 8008870:	4692      	mov	sl, r2
 8008872:	429a      	cmp	r2, r3
 8008874:	d900      	bls.n	8008878 <calibrate.lto_priv.296+0x1c0>
 8008876:	469a      	mov	sl, r3
 8008878:	0863      	lsrs	r3, r4, #1
 800887a:	9311      	str	r3, [sp, #68]	; 0x44
 800887c:	4653      	mov	r3, sl
 800887e:	085a      	lsrs	r2, r3, #1
 8008880:	0863      	lsrs	r3, r4, #1
 8008882:	0098      	lsls	r0, r3, #2
 8008884:	4b5a      	ldr	r3, [pc, #360]	; (80089f0 <calibrate.lto_priv.296+0x338>)
 8008886:	0029      	movs	r1, r5
 8008888:	18c0      	adds	r0, r0, r3
 800888a:	f003 feb3 	bl	800c5f4 <acc_confprogram_copy>
 800888e:	4653      	mov	r3, sl
 8008890:	b29f      	uxth	r7, r3
 8008892:	4b58      	ldr	r3, [pc, #352]	; (80089f4 <calibrate.lto_priv.296+0x33c>)
 8008894:	b2a6      	uxth	r6, r4
 8008896:	4698      	mov	r8, r3
 8008898:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800889a:	003a      	movs	r2, r7
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	231b      	movs	r3, #27
 80088a0:	0031      	movs	r1, r6
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	0028      	movs	r0, r5
 80088a6:	4643      	mov	r3, r8
 80088a8:	f003 feec 	bl	800c684 <acc_confprogram_patch_offset>
 80088ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80088ae:	003a      	movs	r2, r7
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	2319      	movs	r3, #25
 80088b4:	0031      	movs	r1, r6
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	0028      	movs	r0, r5
 80088ba:	4643      	mov	r3, r8
 80088bc:	f003 fee2 	bl	800c684 <acc_confprogram_patch_offset>
 80088c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088c2:	003a      	movs	r2, r7
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	231a      	movs	r3, #26
 80088c8:	0031      	movs	r1, r6
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	0028      	movs	r0, r5
 80088ce:	4643      	mov	r3, r8
 80088d0:	f003 fed8 	bl	800c684 <acc_confprogram_patch_offset>
 80088d4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80088d6:	003a      	movs	r2, r7
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	2317      	movs	r3, #23
 80088dc:	0031      	movs	r1, r6
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	0028      	movs	r0, r5
 80088e2:	4643      	mov	r3, r8
 80088e4:	f003 fece 	bl	800c684 <acc_confprogram_patch_offset>
 80088e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80088ea:	003a      	movs	r2, r7
 80088ec:	9301      	str	r3, [sp, #4]
 80088ee:	230d      	movs	r3, #13
 80088f0:	0031      	movs	r1, r6
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	0028      	movs	r0, r5
 80088f6:	4643      	mov	r3, r8
 80088f8:	f003 fec4 	bl	800c684 <acc_confprogram_patch_offset>
 80088fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80088fe:	003a      	movs	r2, r7
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	232a      	movs	r3, #42	; 0x2a
 8008904:	0031      	movs	r1, r6
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	0028      	movs	r0, r5
 800890a:	4643      	mov	r3, r8
 800890c:	f003 feba 	bl	800c684 <acc_confprogram_patch_offset>
 8008910:	464b      	mov	r3, r9
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	230f      	movs	r3, #15
 8008916:	003a      	movs	r2, r7
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	0031      	movs	r1, r6
 800891c:	4643      	mov	r3, r8
 800891e:	0028      	movs	r0, r5
 8008920:	f003 feb0 	bl	800c684 <acc_confprogram_patch_offset>
 8008924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008926:	003a      	movs	r2, r7
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	232c      	movs	r3, #44	; 0x2c
 800892c:	0031      	movs	r1, r6
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	0028      	movs	r0, r5
 8008932:	4643      	mov	r3, r8
 8008934:	f003 fea6 	bl	800c684 <acc_confprogram_patch_offset>
 8008938:	2244      	movs	r2, #68	; 0x44
 800893a:	466b      	mov	r3, sp
 800893c:	189b      	adds	r3, r3, r2
 800893e:	8819      	ldrh	r1, [r3, #0]
 8008940:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008942:	4653      	mov	r3, sl
 8008944:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008946:	f7fd fbbf 	bl	80060c8 <acc_sensor_r2_load_confmem>
 800894a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 800894c:	469c      	mov	ip, r3
 800894e:	4b2a      	ldr	r3, [pc, #168]	; (80089f8 <calibrate.lto_priv.296+0x340>)
 8008950:	4464      	add	r4, ip
 8008952:	429c      	cmp	r4, r3
 8008954:	d988      	bls.n	8008868 <calibrate.lto_priv.296+0x1b0>
 8008956:	2118      	movs	r1, #24
 8008958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800895a:	f7fd f9c0 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 800895e:	2800      	cmp	r0, #0
 8008960:	d105      	bne.n	800896e <calibrate.lto_priv.296+0x2b6>
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <calibrate.lto_priv.296+0x2e4>)
 8008964:	4a25      	ldr	r2, [pc, #148]	; (80089fc <calibrate.lto_priv.296+0x344>)
 8008966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008968:	491f      	ldr	r1, [pc, #124]	; (80089e8 <calibrate.lto_priv.296+0x330>)
 800896a:	4798      	blx	r3
 800896c:	e6ff      	b.n	800876e <calibrate.lto_priv.296+0xb6>
 800896e:	21fa      	movs	r1, #250	; 0xfa
 8008970:	2300      	movs	r3, #0
 8008972:	2208      	movs	r2, #8
 8008974:	00c9      	lsls	r1, r1, #3
 8008976:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008978:	f7fd f974 	bl	8005c64 <acc_sensor_protocol_r2_wait_for_specific_event>
 800897c:	2800      	cmp	r0, #0
 800897e:	d100      	bne.n	8008982 <calibrate.lto_priv.296+0x2ca>
 8008980:	e6f5      	b.n	800876e <calibrate.lto_priv.296+0xb6>
 8008982:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008984:	2b37      	cmp	r3, #55	; 0x37
 8008986:	d83d      	bhi.n	8008a04 <calibrate.lto_priv.296+0x34c>
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <calibrate.lto_priv.296+0x2e4>)
 800898a:	4a1d      	ldr	r2, [pc, #116]	; (8008a00 <calibrate.lto_priv.296+0x348>)
 800898c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898e:	4916      	ldr	r1, [pc, #88]	; (80089e8 <calibrate.lto_priv.296+0x330>)
 8008990:	2000      	movs	r0, #0
 8008992:	4798      	blx	r3
 8008994:	e6eb      	b.n	800876e <calibrate.lto_priv.296+0xb6>
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	fffffd94 	.word	0xfffffd94
 800899c:	200003f0 	.word	0x200003f0
 80089a0:	0801d081 	.word	0x0801d081
 80089a4:	0801c9b2 	.word	0x0801c9b2
 80089a8:	00000313 	.word	0x00000313
 80089ac:	0801ca96 	.word	0x0801ca96
 80089b0:	0801d09e 	.word	0x0801d09e
 80089b4:	ff800000 	.word	0xff800000
 80089b8:	fffffda8 	.word	0xfffffda8
 80089bc:	fffffcec 	.word	0xfffffcec
 80089c0:	000001ff 	.word	0x000001ff
 80089c4:	0801d0ae 	.word	0x0801d0ae
 80089c8:	0801d0d9 	.word	0x0801d0d9
 80089cc:	0801d0e8 	.word	0x0801d0e8
 80089d0:	0801d0f2 	.word	0x0801d0f2
 80089d4:	0801d585 	.word	0x0801d585
 80089d8:	0801d3c4 	.word	0x0801d3c4
 80089dc:	0801d18c 	.word	0x0801d18c
 80089e0:	08015820 	.word	0x08015820
 80089e4:	0801d0fb 	.word	0x0801d0fb
 80089e8:	0801d120 	.word	0x0801d120
 80089ec:	000006ac 	.word	0x000006ac
 80089f0:	08017170 	.word	0x08017170
 80089f4:	080166c0 	.word	0x080166c0
 80089f8:	000006ab 	.word	0x000006ab
 80089fc:	0801d138 	.word	0x0801d138
 8008a00:	0801d16a 	.word	0x0801d16a
 8008a04:	2219      	movs	r2, #25
 8008a06:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0a:	f002 f8fb 	bl	800ac04 <internal_buffer_processed_read.constprop.30>
 8008a0e:	0004      	movs	r4, r0
 8008a10:	2319      	movs	r3, #25
 8008a12:	0002      	movs	r2, r0
 8008a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a16:	200a      	movs	r0, #10
 8008a18:	f005 f856 	bl	800dac8 <acc_probes_execute_uint16>
 8008a1c:	2232      	movs	r2, #50	; 0x32
 8008a1e:	0021      	movs	r1, r4
 8008a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a22:	f00c fe3f 	bl	80156a4 <memcpy>
 8008a26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a28:	f7fc fd08 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 8008a2c:	9018      	str	r0, [sp, #96]	; 0x60
 8008a2e:	902d      	str	r0, [sp, #180]	; 0xb4
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d100      	bne.n	8008a36 <calibrate.lto_priv.296+0x37e>
 8008a34:	e69b      	b.n	800876e <calibrate.lto_priv.296+0xb6>
 8008a36:	4cbf      	ldr	r4, [pc, #764]	; (8008d34 <calibrate.lto_priv.296+0x67c>)
 8008a38:	48bf      	ldr	r0, [pc, #764]	; (8008d38 <calibrate.lto_priv.296+0x680>)
 8008a3a:	0021      	movs	r1, r4
 8008a3c:	f003 fece 	bl	800c7dc <acc_diagnostic_log_array>
 8008a40:	2119      	movs	r1, #25
 8008a42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a44:	f003 fec8 	bl	800c7d8 <acc_diagnostic_log_data_u16>
 8008a48:	464b      	mov	r3, r9
 8008a4a:	005e      	lsls	r6, r3, #1
 8008a4c:	4bbb      	ldr	r3, [pc, #748]	; (8008d3c <calibrate.lto_priv.296+0x684>)
 8008a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a50:	3370      	adds	r3, #112	; 0x70
 8008a52:	5ad0      	ldrh	r0, [r2, r3]
 8008a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a56:	ad53      	add	r5, sp, #332	; 0x14c
 8008a58:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008a5a:	1ac0      	subs	r0, r0, r3
 8008a5c:	b200      	sxth	r0, r0
 8008a5e:	f006 fc7b 	bl	800f358 <__aeabi_i2f>
 8008a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a64:	1c07      	adds	r7, r0, #0
 8008a66:	8818      	ldrh	r0, [r3, #0]
 8008a68:	f006 fcc0 	bl	800f3ec <__aeabi_ui2f>
 8008a6c:	21de      	movs	r1, #222	; 0xde
 8008a6e:	0589      	lsls	r1, r1, #22
 8008a70:	f005 fd5c 	bl	800e52c <__aeabi_fmul>
 8008a74:	21fc      	movs	r1, #252	; 0xfc
 8008a76:	0589      	lsls	r1, r1, #22
 8008a78:	f005 fe8a 	bl	800e790 <__aeabi_fsub>
 8008a7c:	49b0      	ldr	r1, [pc, #704]	; (8008d40 <calibrate.lto_priv.296+0x688>)
 8008a7e:	f005 fd55 	bl	800e52c <__aeabi_fmul>
 8008a82:	49b0      	ldr	r1, [pc, #704]	; (8008d44 <calibrate.lto_priv.296+0x68c>)
 8008a84:	f005 fd52 	bl	800e52c <__aeabi_fmul>
 8008a88:	1c01      	adds	r1, r0, #0
 8008a8a:	1c38      	adds	r0, r7, #0
 8008a8c:	f005 fe80 	bl	800e790 <__aeabi_fsub>
 8008a90:	f006 fc42 	bl	800f318 <__aeabi_f2iz>
 8008a94:	2301      	movs	r3, #1
 8008a96:	469c      	mov	ip, r3
 8008a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9a:	44e1      	add	r9, ip
 8008a9c:	3332      	adds	r3, #50	; 0x32
 8008a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	5370      	strh	r0, [r6, r5]
 8008aa4:	2b0c      	cmp	r3, #12
 8008aa6:	d000      	beq.n	8008aaa <calibrate.lto_priv.296+0x3f2>
 8008aa8:	e6c7      	b.n	800883a <calibrate.lto_priv.296+0x182>
 8008aaa:	0021      	movs	r1, r4
 8008aac:	48a6      	ldr	r0, [pc, #664]	; (8008d48 <calibrate.lto_priv.296+0x690>)
 8008aae:	f003 fe95 	bl	800c7dc <acc_diagnostic_log_array>
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	0028      	movs	r0, r5
 8008ab6:	f003 fe8f 	bl	800c7d8 <acc_diagnostic_log_data_u16>
 8008aba:	2214      	movs	r2, #20
 8008abc:	5eab      	ldrsh	r3, [r5, r2]
 8008abe:	2700      	movs	r7, #0
 8008ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac2:	2216      	movs	r2, #22
 8008ac4:	5eab      	ldrsh	r3, [r5, r2]
 8008ac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ac8:	9311      	str	r3, [sp, #68]	; 0x44
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	9314      	str	r3, [sp, #80]	; 0x50
 8008ace:	2200      	movs	r2, #0
 8008ad0:	5eab      	ldrsh	r3, [r5, r2]
 8008ad2:	2632      	movs	r6, #50	; 0x32
 8008ad4:	4699      	mov	r9, r3
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	5eab      	ldrsh	r3, [r5, r2]
 8008ada:	464a      	mov	r2, r9
 8008adc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	9312      	str	r3, [sp, #72]	; 0x48
 8008ae2:	4b9a      	ldr	r3, [pc, #616]	; (8008d4c <calibrate.lto_priv.296+0x694>)
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	b2fb      	uxtb	r3, r7
 8008ae8:	9315      	str	r3, [sp, #84]	; 0x54
 8008aea:	007b      	lsls	r3, r7, #1
 8008aec:	5f5a      	ldrsh	r2, [r3, r5]
 8008aee:	4690      	mov	r8, r2
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	d000      	beq.n	8008af6 <calibrate.lto_priv.296+0x43e>
 8008af4:	e0d8      	b.n	8008ca8 <calibrate.lto_priv.296+0x5f0>
 8008af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008af8:	0034      	movs	r4, r6
 8008afa:	4599      	cmp	r9, r3
 8008afc:	dd0b      	ble.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008afe:	45d1      	cmp	r9, sl
 8008b00:	dc09      	bgt.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008b02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008b04:	f006 fc28 	bl	800f358 <__aeabi_i2f>
 8008b08:	4991      	ldr	r1, [pc, #580]	; (8008d50 <calibrate.lto_priv.296+0x698>)
 8008b0a:	f006 fa07 	bl	800ef1c <__aeabi_fcmplt>
 8008b0e:	2400      	movs	r4, #0
 8008b10:	42a0      	cmp	r0, r4
 8008b12:	d100      	bne.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008b14:	0034      	movs	r4, r6
 8008b16:	488f      	ldr	r0, [pc, #572]	; (8008d54 <calibrate.lto_priv.296+0x69c>)
 8008b18:	4440      	add	r0, r8
 8008b1a:	17c3      	asrs	r3, r0, #31
 8008b1c:	18c0      	adds	r0, r0, r3
 8008b1e:	4058      	eors	r0, r3
 8008b20:	f006 fc1a 	bl	800f358 <__aeabi_i2f>
 8008b24:	4987      	ldr	r1, [pc, #540]	; (8008d44 <calibrate.lto_priv.296+0x68c>)
 8008b26:	f005 fbef 	bl	800e308 <__aeabi_fdiv>
 8008b2a:	498b      	ldr	r1, [pc, #556]	; (8008d58 <calibrate.lto_priv.296+0x6a0>)
 8008b2c:	f005 fcfe 	bl	800e52c <__aeabi_fmul>
 8008b30:	4680      	mov	r8, r0
 8008b32:	0020      	movs	r0, r4
 8008b34:	f006 fc10 	bl	800f358 <__aeabi_i2f>
 8008b38:	1c01      	adds	r1, r0, #0
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	f005 fa4a 	bl	800dfd4 <__aeabi_fadd>
 8008b40:	f006 fa34 	bl	800efac <__aeabi_f2uiz>
 8008b44:	22a2      	movs	r2, #162	; 0xa2
 8008b46:	ab3c      	add	r3, sp, #240	; 0xf0
 8008b48:	0052      	lsls	r2, r2, #1
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	55d8      	strb	r0, [r3, r7]
 8008b4e:	a94b      	add	r1, sp, #300	; 0x12c
 8008b50:	b2fb      	uxtb	r3, r7
 8008b52:	547b      	strb	r3, [r7, r1]
 8008b54:	3701      	adds	r7, #1
 8008b56:	2f0c      	cmp	r7, #12
 8008b58:	d1c5      	bne.n	8008ae6 <calibrate.lto_priv.296+0x42e>
 8008b5a:	3a3a      	subs	r2, #58	; 0x3a
 8008b5c:	3aff      	subs	r2, #255	; 0xff
 8008b5e:	ac8d      	add	r4, sp, #564	; 0x234
 8008b60:	2300      	movs	r3, #0
 8008b62:	0018      	movs	r0, r3
 8008b64:	5c5e      	ldrb	r6, [r3, r1]
 8008b66:	18cd      	adds	r5, r1, r3
 8008b68:	786f      	ldrb	r7, [r5, #1]
 8008b6a:	46a9      	mov	r9, r5
 8008b6c:	5da5      	ldrb	r5, [r4, r6]
 8008b6e:	46a8      	mov	r8, r5
 8008b70:	5de5      	ldrb	r5, [r4, r7]
 8008b72:	45a8      	cmp	r8, r5
 8008b74:	d904      	bls.n	8008b80 <calibrate.lto_priv.296+0x4c8>
 8008b76:	464d      	mov	r5, r9
 8008b78:	3001      	adds	r0, #1
 8008b7a:	545f      	strb	r7, [r3, r1]
 8008b7c:	b2c0      	uxtb	r0, r0
 8008b7e:	706e      	strb	r6, [r5, #1]
 8008b80:	3301      	adds	r3, #1
 8008b82:	b2dd      	uxtb	r5, r3
 8008b84:	4295      	cmp	r5, r2
 8008b86:	d3ed      	bcc.n	8008b64 <calibrate.lto_priv.296+0x4ac>
 8008b88:	3a01      	subs	r2, #1
 8008b8a:	b2d2      	uxtb	r2, r2
 8008b8c:	2a00      	cmp	r2, #0
 8008b8e:	d001      	beq.n	8008b94 <calibrate.lto_priv.296+0x4dc>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d1e5      	bne.n	8008b60 <calibrate.lto_priv.296+0x4a8>
 8008b94:	4967      	ldr	r1, [pc, #412]	; (8008d34 <calibrate.lto_priv.296+0x67c>)
 8008b96:	4871      	ldr	r0, [pc, #452]	; (8008d5c <calibrate.lto_priv.296+0x6a4>)
 8008b98:	f003 fe20 	bl	800c7dc <acc_diagnostic_log_array>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008ba0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008ba2:	ab4b      	add	r3, sp, #300	; 0x12c
 8008ba4:	5cd3      	ldrb	r3, [r2, r3]
 8008ba6:	2601      	movs	r6, #1
 8008ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8008baa:	932c      	str	r3, [sp, #176]	; 0xb0
 8008bac:	2332      	movs	r3, #50	; 0x32
 8008bae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bb0:	2700      	movs	r7, #0
 8008bb2:	4353      	muls	r3, r2
 8008bb4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008bb6:	4694      	mov	ip, r2
 8008bb8:	4463      	add	r3, ip
 8008bba:	930a      	str	r3, [sp, #40]	; 0x28
 8008bbc:	4698      	mov	r8, r3
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4699      	mov	r9, r3
 8008bc2:	001d      	movs	r5, r3
 8008bc4:	001c      	movs	r4, r3
 8008bc6:	b2b3      	uxth	r3, r6
 8008bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bca:	4643      	mov	r3, r8
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	3401      	adds	r4, #1
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	469a      	mov	sl, r3
 8008bd4:	f006 fbc0 	bl	800f358 <__aeabi_i2f>
 8008bd8:	1c01      	adds	r1, r0, #0
 8008bda:	1c38      	adds	r0, r7, #0
 8008bdc:	f005 f9fa 	bl	800dfd4 <__aeabi_fadd>
 8008be0:	b2b3      	uxth	r3, r6
 8008be2:	469c      	mov	ip, r3
 8008be4:	4643      	mov	r3, r8
 8008be6:	885b      	ldrh	r3, [r3, #2]
 8008be8:	4465      	add	r5, ip
 8008bea:	1c07      	adds	r7, r0, #0
 8008bec:	b2a4      	uxth	r4, r4
 8008bee:	b2ad      	uxth	r5, r5
 8008bf0:	4652      	mov	r2, sl
 8008bf2:	459a      	cmp	sl, r3
 8008bf4:	d300      	bcc.n	8008bf8 <calibrate.lto_priv.296+0x540>
 8008bf6:	e082      	b.n	8008cfe <calibrate.lto_priv.296+0x646>
 8008bf8:	1a9b      	subs	r3, r3, r2
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	22fa      	movs	r2, #250	; 0xfa
 8008bfe:	0092      	lsls	r2, r2, #2
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d801      	bhi.n	8008c08 <calibrate.lto_priv.296+0x550>
 8008c04:	2e18      	cmp	r6, #24
 8008c06:	d136      	bne.n	8008c76 <calibrate.lto_priv.296+0x5be>
 8008c08:	2c02      	cmp	r4, #2
 8008c0a:	d97b      	bls.n	8008d04 <calibrate.lto_priv.296+0x64c>
 8008c0c:	0028      	movs	r0, r5
 8008c0e:	f006 fbed 	bl	800f3ec <__aeabi_ui2f>
 8008c12:	1c05      	adds	r5, r0, #0
 8008c14:	0020      	movs	r0, r4
 8008c16:	f006 fbe9 	bl	800f3ec <__aeabi_ui2f>
 8008c1a:	1c01      	adds	r1, r0, #0
 8008c1c:	1c28      	adds	r0, r5, #0
 8008c1e:	f005 fb73 	bl	800e308 <__aeabi_fdiv>
 8008c22:	21fe      	movs	r1, #254	; 0xfe
 8008c24:	0589      	lsls	r1, r1, #22
 8008c26:	f005 fdb3 	bl	800e790 <__aeabi_fsub>
 8008c2a:	f006 f9bf 	bl	800efac <__aeabi_f2uiz>
 8008c2e:	b283      	uxth	r3, r0
 8008c30:	469a      	mov	sl, r3
 8008c32:	464b      	mov	r3, r9
 8008c34:	b2b2      	uxth	r2, r6
 8008c36:	005d      	lsls	r5, r3, #1
 8008c38:	ab73      	add	r3, sp, #460	; 0x1cc
 8008c3a:	52ea      	strh	r2, [r5, r3]
 8008c3c:	ab8d      	add	r3, sp, #564	; 0x234
 8008c3e:	52ec      	strh	r4, [r5, r3]
 8008c40:	0020      	movs	r0, r4
 8008c42:	f006 fb89 	bl	800f358 <__aeabi_i2f>
 8008c46:	1c01      	adds	r1, r0, #0
 8008c48:	1c38      	adds	r0, r7, #0
 8008c4a:	f005 fb5d 	bl	800e308 <__aeabi_fdiv>
 8008c4e:	f006 f9ad 	bl	800efac <__aeabi_f2uiz>
 8008c52:	ab80      	add	r3, sp, #512	; 0x200
 8008c54:	52e8      	strh	r0, [r5, r3]
 8008c56:	ab9a      	add	r3, sp, #616	; 0x268
 8008c58:	469c      	mov	ip, r3
 8008c5a:	4650      	mov	r0, sl
 8008c5c:	2305      	movs	r3, #5
 8008c5e:	4358      	muls	r0, r3
 8008c60:	4465      	add	r5, ip
 8008c62:	464b      	mov	r3, r9
 8008c64:	3d05      	subs	r5, #5
 8008c66:	3dff      	subs	r5, #255	; 0xff
 8008c68:	8028      	strh	r0, [r5, #0]
 8008c6a:	2500      	movs	r5, #0
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	4699      	mov	r9, r3
 8008c72:	002c      	movs	r4, r5
 8008c74:	2700      	movs	r7, #0
 8008c76:	2302      	movs	r3, #2
 8008c78:	469c      	mov	ip, r3
 8008c7a:	3601      	adds	r6, #1
 8008c7c:	44e0      	add	r8, ip
 8008c7e:	2e19      	cmp	r6, #25
 8008c80:	d1a1      	bne.n	8008bc6 <calibrate.lto_priv.296+0x50e>
 8008c82:	4b37      	ldr	r3, [pc, #220]	; (8008d60 <calibrate.lto_priv.296+0x6a8>)
 8008c84:	001a      	movs	r2, r3
 8008c86:	3230      	adds	r2, #48	; 0x30
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	2a03      	cmp	r2, #3
 8008c8c:	d905      	bls.n	8008c9a <calibrate.lto_priv.296+0x5e2>
 8008c8e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008c90:	4a34      	ldr	r2, [pc, #208]	; (8008d64 <calibrate.lto_priv.296+0x6ac>)
 8008c92:	464b      	mov	r3, r9
 8008c94:	4934      	ldr	r1, [pc, #208]	; (8008d68 <calibrate.lto_priv.296+0x6b0>)
 8008c96:	2004      	movs	r0, #4
 8008c98:	47a0      	blx	r4
 8008c9a:	4d31      	ldr	r5, [pc, #196]	; (8008d60 <calibrate.lto_priv.296+0x6a8>)
 8008c9c:	4b33      	ldr	r3, [pc, #204]	; (8008d6c <calibrate.lto_priv.296+0x6b4>)
 8008c9e:	002e      	movs	r6, r5
 8008ca0:	2400      	movs	r4, #0
 8008ca2:	3630      	adds	r6, #48	; 0x30
 8008ca4:	4698      	mov	r8, r3
 8008ca6:	e07b      	b.n	8008da0 <calibrate.lto_priv.296+0x6e8>
 8008ca8:	b2fa      	uxtb	r2, r7
 8008caa:	2a0b      	cmp	r2, #11
 8008cac:	d10c      	bne.n	8008cc8 <calibrate.lto_priv.296+0x610>
 8008cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cb2:	0034      	movs	r4, r6
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	dc00      	bgt.n	8008cba <calibrate.lto_priv.296+0x602>
 8008cb8:	e72d      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008cba:	4553      	cmp	r3, sl
 8008cbc:	dd00      	ble.n	8008cc0 <calibrate.lto_priv.296+0x608>
 8008cbe:	e72a      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008cc0:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008cc2:	f006 fb49 	bl	800f358 <__aeabi_i2f>
 8008cc6:	e71f      	b.n	8008b08 <calibrate.lto_priv.296+0x450>
 8008cc8:	18eb      	adds	r3, r5, r3
 8008cca:	1e9a      	subs	r2, r3, #2
 8008ccc:	2100      	movs	r1, #0
 8008cce:	5e52      	ldrsh	r2, [r2, r1]
 8008cd0:	0034      	movs	r4, r6
 8008cd2:	4542      	cmp	r2, r8
 8008cd4:	dc00      	bgt.n	8008cd8 <calibrate.lto_priv.296+0x620>
 8008cd6:	e71e      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008cd8:	2002      	movs	r0, #2
 8008cda:	5e18      	ldrsh	r0, [r3, r0]
 8008cdc:	4540      	cmp	r0, r8
 8008cde:	db00      	blt.n	8008ce2 <calibrate.lto_priv.296+0x62a>
 8008ce0:	e719      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008ce2:	4552      	cmp	r2, sl
 8008ce4:	dd00      	ble.n	8008ce8 <calibrate.lto_priv.296+0x630>
 8008ce6:	e716      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008ce8:	45d0      	cmp	r8, sl
 8008cea:	dd00      	ble.n	8008cee <calibrate.lto_priv.296+0x636>
 8008cec:	e713      	b.n	8008b16 <calibrate.lto_priv.296+0x45e>
 8008cee:	1a80      	subs	r0, r0, r2
 8008cf0:	f006 fb32 	bl	800f358 <__aeabi_i2f>
 8008cf4:	21fc      	movs	r1, #252	; 0xfc
 8008cf6:	0589      	lsls	r1, r1, #22
 8008cf8:	f005 fc18 	bl	800e52c <__aeabi_fmul>
 8008cfc:	e704      	b.n	8008b08 <calibrate.lto_priv.296+0x450>
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	e77b      	b.n	8008bfc <calibrate.lto_priv.296+0x544>
 8008d04:	4b16      	ldr	r3, [pc, #88]	; (8008d60 <calibrate.lto_priv.296+0x6a8>)
 8008d06:	001a      	movs	r2, r3
 8008d08:	3230      	adds	r2, #48	; 0x30
 8008d0a:	7812      	ldrb	r2, [r2, #0]
 8008d0c:	2a03      	cmp	r2, #3
 8008d0e:	d90c      	bls.n	8008d2a <calibrate.lto_priv.296+0x672>
 8008d10:	4652      	mov	r2, sl
 8008d12:	9401      	str	r4, [sp, #4]
 8008d14:	9200      	str	r2, [sp, #0]
 8008d16:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008d18:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <calibrate.lto_priv.296+0x6b8>)
 8008d1a:	0033      	movs	r3, r6
 8008d1c:	4912      	ldr	r1, [pc, #72]	; (8008d68 <calibrate.lto_priv.296+0x6b0>)
 8008d1e:	2004      	movs	r0, #4
 8008d20:	47a0      	blx	r4
 8008d22:	2400      	movs	r4, #0
 8008d24:	2700      	movs	r7, #0
 8008d26:	0025      	movs	r5, r4
 8008d28:	e7a5      	b.n	8008c76 <calibrate.lto_priv.296+0x5be>
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	2700      	movs	r7, #0
 8008d2e:	002c      	movs	r4, r5
 8008d30:	e7a1      	b.n	8008c76 <calibrate.lto_priv.296+0x5be>
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	0801d182 	.word	0x0801d182
 8008d38:	0801d197 	.word	0x0801d197
 8008d3c:	080157a0 	.word	0x080157a0
 8008d40:	3f99999a 	.word	0x3f99999a
 8008d44:	447a0000 	.word	0x447a0000
 8008d48:	0801d1a7 	.word	0x0801d1a7
 8008d4c:	00000513 	.word	0x00000513
 8008d50:	c2c80000 	.word	0xc2c80000
 8008d54:	fffffc18 	.word	0xfffffc18
 8008d58:	42c80000 	.word	0x42c80000
 8008d5c:	0801d1b8 	.word	0x0801d1b8
 8008d60:	200003f0 	.word	0x200003f0
 8008d64:	0801d237 	.word	0x0801d237
 8008d68:	0801d220 	.word	0x0801d220
 8008d6c:	0801d24a 	.word	0x0801d24a
 8008d70:	0801d1cf 	.word	0x0801d1cf
 8008d74:	2f03      	cmp	r7, #3
 8008d76:	d912      	bls.n	8008d9e <calibrate.lto_priv.296+0x6e6>
 8008d78:	0063      	lsls	r3, r4, #1
 8008d7a:	aa80      	add	r2, sp, #512	; 0x200
 8008d7c:	5a9a      	ldrh	r2, [r3, r2]
 8008d7e:	49c4      	ldr	r1, [pc, #784]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008d80:	9203      	str	r2, [sp, #12]
 8008d82:	aa8d      	add	r2, sp, #564	; 0x234
 8008d84:	5a9a      	ldrh	r2, [r3, r2]
 8008d86:	2004      	movs	r0, #4
 8008d88:	9202      	str	r2, [sp, #8]
 8008d8a:	aa59      	add	r2, sp, #356	; 0x164
 8008d8c:	5a9a      	ldrh	r2, [r3, r2]
 8008d8e:	9201      	str	r2, [sp, #4]
 8008d90:	aa73      	add	r2, sp, #460	; 0x1cc
 8008d92:	5a9b      	ldrh	r3, [r3, r2]
 8008d94:	4642      	mov	r2, r8
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008d9a:	0023      	movs	r3, r4
 8008d9c:	47b8      	blx	r7
 8008d9e:	3401      	adds	r4, #1
 8008da0:	b2a3      	uxth	r3, r4
 8008da2:	7837      	ldrb	r7, [r6, #0]
 8008da4:	4599      	cmp	r9, r3
 8008da6:	d8e5      	bhi.n	8008d74 <calibrate.lto_priv.296+0x6bc>
 8008da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008daa:	881e      	ldrh	r6, [r3, #0]
 8008dac:	4bb9      	ldr	r3, [pc, #740]	; (8009094 <calibrate.lto_priv.296+0x9dc>)
 8008dae:	429e      	cmp	r6, r3
 8008db0:	d825      	bhi.n	8008dfe <calibrate.lto_priv.296+0x746>
 8008db2:	2f03      	cmp	r7, #3
 8008db4:	d905      	bls.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 8008db6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008db8:	0033      	movs	r3, r6
 8008dba:	4ab7      	ldr	r2, [pc, #732]	; (8009098 <calibrate.lto_priv.296+0x9e0>)
 8008dbc:	49b4      	ldr	r1, [pc, #720]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008dbe:	2004      	movs	r0, #4
 8008dc0:	47a0      	blx	r4
 8008dc2:	4bb6      	ldr	r3, [pc, #728]	; (800909c <calibrate.lto_priv.296+0x9e4>)
 8008dc4:	001a      	movs	r2, r3
 8008dc6:	3230      	adds	r2, #48	; 0x30
 8008dc8:	7812      	ldrb	r2, [r2, #0]
 8008dca:	2a03      	cmp	r2, #3
 8008dcc:	d907      	bls.n	8008dde <calibrate.lto_priv.296+0x726>
 8008dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dd0:	49b3      	ldr	r1, [pc, #716]	; (80090a0 <calibrate.lto_priv.296+0x9e8>)
 8008dd2:	9200      	str	r2, [sp, #0]
 8008dd4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008dd6:	4ab3      	ldr	r2, [pc, #716]	; (80090a4 <calibrate.lto_priv.296+0x9ec>)
 8008dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dda:	2004      	movs	r0, #4
 8008ddc:	47a0      	blx	r4
 8008dde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008de0:	3301      	adds	r3, #1
 8008de2:	931a      	str	r3, [sp, #104]	; 0x68
 8008de4:	2b0c      	cmp	r3, #12
 8008de6:	d000      	beq.n	8008dea <calibrate.lto_priv.296+0x732>
 8008de8:	e6da      	b.n	8008ba0 <calibrate.lto_priv.296+0x4e8>
 8008dea:	3b0b      	subs	r3, #11
 8008dec:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d101      	bne.n	8008df8 <calibrate.lto_priv.296+0x740>
 8008df4:	f000 fe3c 	bl	8009a70 <calibrate.lto_priv.296+0x13b8>
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	9336      	str	r3, [sp, #216]	; 0xd8
 8008dfc:	e50d      	b.n	800881a <calibrate.lto_priv.296+0x162>
 8008dfe:	4baa      	ldr	r3, [pc, #680]	; (80090a8 <calibrate.lto_priv.296+0x9f0>)
 8008e00:	18f0      	adds	r0, r6, r3
 8008e02:	f006 faf3 	bl	800f3ec <__aeabi_ui2f>
 8008e06:	49a9      	ldr	r1, [pc, #676]	; (80090ac <calibrate.lto_priv.296+0x9f4>)
 8008e08:	f005 fb90 	bl	800e52c <__aeabi_fmul>
 8008e0c:	21de      	movs	r1, #222	; 0xde
 8008e0e:	0589      	lsls	r1, r1, #22
 8008e10:	f005 fb8c 	bl	800e52c <__aeabi_fmul>
 8008e14:	1c01      	adds	r1, r0, #0
 8008e16:	48a5      	ldr	r0, [pc, #660]	; (80090ac <calibrate.lto_priv.296+0x9f4>)
 8008e18:	f005 fcba 	bl	800e790 <__aeabi_fsub>
 8008e1c:	1c01      	adds	r1, r0, #0
 8008e1e:	48a4      	ldr	r0, [pc, #656]	; (80090b0 <calibrate.lto_priv.296+0x9f8>)
 8008e20:	f005 fcb6 	bl	800e790 <__aeabi_fsub>
 8008e24:	49a1      	ldr	r1, [pc, #644]	; (80090ac <calibrate.lto_priv.296+0x9f4>)
 8008e26:	f005 fa6f 	bl	800e308 <__aeabi_fdiv>
 8008e2a:	218f      	movs	r1, #143	; 0x8f
 8008e2c:	05c9      	lsls	r1, r1, #23
 8008e2e:	f005 fb7d 	bl	800e52c <__aeabi_fmul>
 8008e32:	218e      	movs	r1, #142	; 0x8e
 8008e34:	05c9      	lsls	r1, r1, #23
 8008e36:	f005 f8cd 	bl	800dfd4 <__aeabi_fadd>
 8008e3a:	f006 f8b7 	bl	800efac <__aeabi_f2uiz>
 8008e3e:	b284      	uxth	r4, r0
 8008e40:	2f03      	cmp	r7, #3
 8008e42:	d905      	bls.n	8008e50 <calibrate.lto_priv.296+0x798>
 8008e44:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8008e46:	0023      	movs	r3, r4
 8008e48:	4a9a      	ldr	r2, [pc, #616]	; (80090b4 <calibrate.lto_priv.296+0x9fc>)
 8008e4a:	4991      	ldr	r1, [pc, #580]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008e4c:	2004      	movs	r0, #4
 8008e4e:	47a8      	blx	r5
 8008e50:	2300      	movs	r3, #0
 8008e52:	9312      	str	r3, [sp, #72]	; 0x48
 8008e54:	930d      	str	r3, [sp, #52]	; 0x34
 8008e56:	3330      	adds	r3, #48	; 0x30
 8008e58:	4698      	mov	r8, r3
 8008e5a:	4f90      	ldr	r7, [pc, #576]	; (800909c <calibrate.lto_priv.296+0x9e4>)
 8008e5c:	ab80      	add	r3, sp, #512	; 0x200
 8008e5e:	44b8      	add	r8, r7
 8008e60:	469a      	mov	sl, r3
 8008e62:	e010      	b.n	8008e86 <calibrate.lto_priv.296+0x7ce>
 8008e64:	4650      	mov	r0, sl
 8008e66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	5a1b      	ldrh	r3, [r3, r0]
 8008e6c:	4892      	ldr	r0, [pc, #584]	; (80090b8 <calibrate.lto_priv.296+0xa00>)
 8008e6e:	4283      	cmp	r3, r0
 8008e70:	d84f      	bhi.n	8008f12 <calibrate.lto_priv.296+0x85a>
 8008e72:	2903      	cmp	r1, #3
 8008e74:	d904      	bls.n	8008e80 <calibrate.lto_priv.296+0x7c8>
 8008e76:	4a91      	ldr	r2, [pc, #580]	; (80090bc <calibrate.lto_priv.296+0xa04>)
 8008e78:	4985      	ldr	r1, [pc, #532]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008e7a:	2004      	movs	r0, #4
 8008e7c:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008e7e:	47a8      	blx	r5
 8008e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e82:	3301      	adds	r3, #1
 8008e84:	9312      	str	r3, [sp, #72]	; 0x48
 8008e86:	2248      	movs	r2, #72	; 0x48
 8008e88:	466b      	mov	r3, sp
 8008e8a:	189b      	adds	r3, r3, r2
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	4643      	mov	r3, r8
 8008e90:	7819      	ldrb	r1, [r3, #0]
 8008e92:	454a      	cmp	r2, r9
 8008e94:	d3e6      	bcc.n	8008e64 <calibrate.lto_priv.296+0x7ac>
 8008e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d933      	bls.n	8008f04 <calibrate.lto_priv.296+0x84c>
 8008e9c:	1e9f      	subs	r7, r3, #2
 8008e9e:	b23f      	sxth	r7, r7
 8008ea0:	007b      	lsls	r3, r7, #1
 8008ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ea4:	ad66      	add	r5, sp, #408	; 0x198
 8008ea6:	ae80      	add	r6, sp, #512	; 0x200
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	0039      	movs	r1, r7
 8008eac:	469c      	mov	ip, r3
 8008eae:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	da46      	bge.n	8008f42 <calibrate.lto_priv.296+0x88a>
 8008eb4:	4663      	mov	r3, ip
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1f6      	bne.n	8008ea8 <calibrate.lto_priv.296+0x7f0>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	0015      	movs	r5, r2
 8008ebe:	a866      	add	r0, sp, #408	; 0x198
 8008ec0:	8803      	ldrh	r3, [r0, #0]
 8008ec2:	a980      	add	r1, sp, #512	; 0x200
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	5a5c      	ldrh	r4, [r3, r1]
 8008ec8:	4e7d      	ldr	r6, [pc, #500]	; (80090c0 <calibrate.lto_priv.296+0xa08>)
 8008eca:	0053      	lsls	r3, r2, #1
 8008ecc:	5a1b      	ldrh	r3, [r3, r0]
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	5a5b      	ldrh	r3, [r3, r1]
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d25c      	bcs.n	8008f90 <calibrate.lto_priv.296+0x8d8>
 8008ed6:	1b1b      	subs	r3, r3, r4
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	42b3      	cmp	r3, r6
 8008edc:	d801      	bhi.n	8008ee2 <calibrate.lto_priv.296+0x82a>
 8008ede:	3501      	adds	r5, #1
 8008ee0:	b2ad      	uxth	r5, r5
 8008ee2:	3201      	adds	r2, #1
 8008ee4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008ee6:	b293      	uxth	r3, r2
 8008ee8:	429f      	cmp	r7, r3
 8008eea:	d8ee      	bhi.n	8008eca <calibrate.lto_priv.296+0x812>
 8008eec:	4e6b      	ldr	r6, [pc, #428]	; (800909c <calibrate.lto_priv.296+0x9e4>)
 8008eee:	0037      	movs	r7, r6
 8008ef0:	3730      	adds	r7, #48	; 0x30
 8008ef2:	9714      	str	r7, [sp, #80]	; 0x50
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	1e6b      	subs	r3, r5, #1
 8008ef8:	0014      	movs	r4, r2
 8008efa:	4698      	mov	r8, r3
 8008efc:	4544      	cmp	r4, r8
 8008efe:	d34a      	bcc.n	8008f96 <calibrate.lto_priv.296+0x8de>
 8008f00:	2a00      	cmp	r2, #0
 8008f02:	d1f7      	bne.n	8008ef4 <calibrate.lto_priv.296+0x83c>
 8008f04:	4c65      	ldr	r4, [pc, #404]	; (800909c <calibrate.lto_priv.296+0x9e4>)
 8008f06:	ab66      	add	r3, sp, #408	; 0x198
 8008f08:	0027      	movs	r7, r4
 8008f0a:	2500      	movs	r5, #0
 8008f0c:	3730      	adds	r7, #48	; 0x30
 8008f0e:	4698      	mov	r8, r3
 8008f10:	e07b      	b.n	800900a <calibrate.lto_priv.296+0x952>
 8008f12:	486c      	ldr	r0, [pc, #432]	; (80090c4 <calibrate.lto_priv.296+0xa0c>)
 8008f14:	1830      	adds	r0, r6, r0
 8008f16:	4283      	cmp	r3, r0
 8008f18:	d907      	bls.n	8008f2a <calibrate.lto_priv.296+0x872>
 8008f1a:	2903      	cmp	r1, #3
 8008f1c:	d9b0      	bls.n	8008e80 <calibrate.lto_priv.296+0x7c8>
 8008f1e:	4a6a      	ldr	r2, [pc, #424]	; (80090c8 <calibrate.lto_priv.296+0xa10>)
 8008f20:	495b      	ldr	r1, [pc, #364]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008f22:	2004      	movs	r0, #4
 8008f24:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008f26:	47a8      	blx	r5
 8008f28:	e7aa      	b.n	8008e80 <calibrate.lto_priv.296+0x7c8>
 8008f2a:	a99a      	add	r1, sp, #616	; 0x268
 8008f2c:	468c      	mov	ip, r1
 8008f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4463      	add	r3, ip
 8008f34:	3bd0      	subs	r3, #208	; 0xd0
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f40:	e79e      	b.n	8008e80 <calibrate.lto_priv.296+0x7c8>
 8008f42:	5b43      	ldrh	r3, [r0, r5]
 8008f44:	4699      	mov	r9, r3
 8008f46:	182b      	adds	r3, r5, r0
 8008f48:	4698      	mov	r8, r3
 8008f4a:	885b      	ldrh	r3, [r3, #2]
 8008f4c:	469a      	mov	sl, r3
 8008f4e:	464b      	mov	r3, r9
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	5b9a      	ldrh	r2, [r3, r6]
 8008f54:	4294      	cmp	r4, r2
 8008f56:	d215      	bcs.n	8008f84 <calibrate.lto_priv.296+0x8cc>
 8008f58:	1b12      	subs	r2, r2, r4
 8008f5a:	b292      	uxth	r2, r2
 8008f5c:	4653      	mov	r3, sl
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	5af3      	ldrh	r3, [r6, r3]
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d211      	bcs.n	8008f8a <calibrate.lto_priv.296+0x8d2>
 8008f66:	1b1b      	subs	r3, r3, r4
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d906      	bls.n	8008f7c <calibrate.lto_priv.296+0x8c4>
 8008f6e:	4653      	mov	r3, sl
 8008f70:	464a      	mov	r2, r9
 8008f72:	5343      	strh	r3, [r0, r5]
 8008f74:	4643      	mov	r3, r8
 8008f76:	805a      	strh	r2, [r3, #2]
 8008f78:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f7a:	469c      	mov	ip, r3
 8008f7c:	3901      	subs	r1, #1
 8008f7e:	b209      	sxth	r1, r1
 8008f80:	3802      	subs	r0, #2
 8008f82:	e795      	b.n	8008eb0 <calibrate.lto_priv.296+0x7f8>
 8008f84:	1aa2      	subs	r2, r4, r2
 8008f86:	b292      	uxth	r2, r2
 8008f88:	e7e8      	b.n	8008f5c <calibrate.lto_priv.296+0x8a4>
 8008f8a:	1ae3      	subs	r3, r4, r3
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	e7ec      	b.n	8008f6a <calibrate.lto_priv.296+0x8b2>
 8008f90:	1ae3      	subs	r3, r4, r3
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	e7a1      	b.n	8008eda <calibrate.lto_priv.296+0x822>
 8008f96:	a966      	add	r1, sp, #408	; 0x198
 8008f98:	468c      	mov	ip, r1
 8008f9a:	a866      	add	r0, sp, #408	; 0x198
 8008f9c:	4681      	mov	r9, r0
 8008f9e:	0063      	lsls	r3, r4, #1
 8008fa0:	449c      	add	ip, r3
 8008fa2:	3302      	adds	r3, #2
 8008fa4:	444b      	add	r3, r9
 8008fa6:	4661      	mov	r1, ip
 8008fa8:	8818      	ldrh	r0, [r3, #0]
 8008faa:	8809      	ldrh	r1, [r1, #0]
 8008fac:	4681      	mov	r9, r0
 8008fae:	004f      	lsls	r7, r1, #1
 8008fb0:	46ba      	mov	sl, r7
 8008fb2:	464f      	mov	r7, r9
 8008fb4:	007f      	lsls	r7, r7, #1
 8008fb6:	9712      	str	r7, [sp, #72]	; 0x48
 8008fb8:	4657      	mov	r7, sl
 8008fba:	a88d      	add	r0, sp, #564	; 0x234
 8008fbc:	5a3f      	ldrh	r7, [r7, r0]
 8008fbe:	46ba      	mov	sl, r7
 8008fc0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008fc2:	5a38      	ldrh	r0, [r7, r0]
 8008fc4:	4582      	cmp	sl, r0
 8008fc6:	d20e      	bcs.n	8008fe6 <calibrate.lto_priv.296+0x92e>
 8008fc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fca:	464f      	mov	r7, r9
 8008fcc:	7810      	ldrb	r0, [r2, #0]
 8008fce:	4662      	mov	r2, ip
 8008fd0:	8017      	strh	r7, [r2, #0]
 8008fd2:	8019      	strh	r1, [r3, #0]
 8008fd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fd6:	2803      	cmp	r0, #3
 8008fd8:	d905      	bls.n	8008fe6 <calibrate.lto_priv.296+0x92e>
 8008fda:	4a3c      	ldr	r2, [pc, #240]	; (80090cc <calibrate.lto_priv.296+0xa14>)
 8008fdc:	492c      	ldr	r1, [pc, #176]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8008fde:	2004      	movs	r0, #4
 8008fe0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008fe2:	4798      	blx	r3
 8008fe4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008fe6:	3401      	adds	r4, #1
 8008fe8:	b2a4      	uxth	r4, r4
 8008fea:	e787      	b.n	8008efc <calibrate.lto_priv.296+0x844>
 8008fec:	2e03      	cmp	r6, #3
 8008fee:	d90b      	bls.n	8009008 <calibrate.lto_priv.296+0x950>
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	006b      	lsls	r3, r5, #1
 8008ff4:	5a9b      	ldrh	r3, [r3, r2]
 8008ff6:	aa80      	add	r2, sp, #512	; 0x200
 8008ff8:	0059      	lsls	r1, r3, #1
 8008ffa:	5a8a      	ldrh	r2, [r1, r2]
 8008ffc:	2004      	movs	r0, #4
 8008ffe:	9200      	str	r2, [sp, #0]
 8009000:	4923      	ldr	r1, [pc, #140]	; (8009090 <calibrate.lto_priv.296+0x9d8>)
 8009002:	4a33      	ldr	r2, [pc, #204]	; (80090d0 <calibrate.lto_priv.296+0xa18>)
 8009004:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8009006:	47b0      	blx	r6
 8009008:	3501      	adds	r5, #1
 800900a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800900c:	b2ab      	uxth	r3, r5
 800900e:	783e      	ldrb	r6, [r7, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d8eb      	bhi.n	8008fec <calibrate.lto_priv.296+0x934>
 8009014:	2a00      	cmp	r2, #0
 8009016:	d100      	bne.n	800901a <calibrate.lto_priv.296+0x962>
 8009018:	e6d3      	b.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	4a2d      	ldr	r2, [pc, #180]	; (80090d4 <calibrate.lto_priv.296+0xa1c>)
 800901e:	0059      	lsls	r1, r3, #1
 8009020:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <calibrate.lto_priv.296+0xa20>)
 8009022:	3270      	adds	r2, #112	; 0x70
 8009024:	185b      	adds	r3, r3, r1
 8009026:	5a88      	ldrh	r0, [r1, r2]
 8009028:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800902a:	1ac0      	subs	r0, r0, r3
 800902c:	b200      	sxth	r0, r0
 800902e:	f006 f993 	bl	800f358 <__aeabi_i2f>
 8009032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009034:	1c05      	adds	r5, r0, #0
 8009036:	8818      	ldrh	r0, [r3, #0]
 8009038:	f006 f9d8 	bl	800f3ec <__aeabi_ui2f>
 800903c:	21de      	movs	r1, #222	; 0xde
 800903e:	0589      	lsls	r1, r1, #22
 8009040:	f005 fa74 	bl	800e52c <__aeabi_fmul>
 8009044:	21fc      	movs	r1, #252	; 0xfc
 8009046:	0589      	lsls	r1, r1, #22
 8009048:	f005 fba2 	bl	800e790 <__aeabi_fsub>
 800904c:	4917      	ldr	r1, [pc, #92]	; (80090ac <calibrate.lto_priv.296+0x9f4>)
 800904e:	f005 fa6d 	bl	800e52c <__aeabi_fmul>
 8009052:	4922      	ldr	r1, [pc, #136]	; (80090dc <calibrate.lto_priv.296+0xa24>)
 8009054:	f005 fa6a 	bl	800e52c <__aeabi_fmul>
 8009058:	1c01      	adds	r1, r0, #0
 800905a:	1c28      	adds	r0, r5, #0
 800905c:	f005 fb98 	bl	800e790 <__aeabi_fsub>
 8009060:	f006 f95a 	bl	800f318 <__aeabi_f2iz>
 8009064:	aa3c      	add	r2, sp, #240	; 0xf0
 8009066:	4694      	mov	ip, r2
 8009068:	2322      	movs	r3, #34	; 0x22
 800906a:	22e6      	movs	r2, #230	; 0xe6
 800906c:	b205      	sxth	r5, r0
 800906e:	4463      	add	r3, ip
 8009070:	801d      	strh	r5, [r3, #0]
 8009072:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <calibrate.lto_priv.296+0xa28>)
 8009074:	0052      	lsls	r2, r2, #1
 8009076:	18eb      	adds	r3, r5, r3
 8009078:	b29b      	uxth	r3, r3
 800907a:	4293      	cmp	r3, r2
 800907c:	d934      	bls.n	80090e8 <calibrate.lto_priv.296+0xa30>
 800907e:	2e03      	cmp	r6, #3
 8009080:	d800      	bhi.n	8009084 <calibrate.lto_priv.296+0x9cc>
 8009082:	e69e      	b.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 8009084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009086:	4a17      	ldr	r2, [pc, #92]	; (80090e4 <calibrate.lto_priv.296+0xa2c>)
 8009088:	4905      	ldr	r1, [pc, #20]	; (80090a0 <calibrate.lto_priv.296+0x9e8>)
 800908a:	2004      	movs	r0, #4
 800908c:	4798      	blx	r3
 800908e:	e698      	b.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 8009090:	0801d220 	.word	0x0801d220
 8009094:	000087cf 	.word	0x000087cf
 8009098:	0801d28c 	.word	0x0801d28c
 800909c:	200003f0 	.word	0x200003f0
 80090a0:	0801d09e 	.word	0x0801d09e
 80090a4:	0801d764 	.word	0x0801d764
 80090a8:	ffff8000 	.word	0xffff8000
 80090ac:	3f99999a 	.word	0x3f99999a
 80090b0:	3f866666 	.word	0x3f866666
 80090b4:	0801d2b1 	.word	0x0801d2b1
 80090b8:	00001387 	.word	0x00001387
 80090bc:	0801d2c1 	.word	0x0801d2c1
 80090c0:	000007cf 	.word	0x000007cf
 80090c4:	fffff830 	.word	0xfffff830
 80090c8:	0801d2ef 	.word	0x0801d2ef
 80090cc:	0801d31d 	.word	0x0801d31d
 80090d0:	0801d34e 	.word	0x0801d34e
 80090d4:	080157a0 	.word	0x080157a0
 80090d8:	08015820 	.word	0x08015820
 80090dc:	447a0000 	.word	0x447a0000
 80090e0:	fffffcf4 	.word	0xfffffcf4
 80090e4:	0801d370 	.word	0x0801d370
 80090e8:	ab66      	add	r3, sp, #408	; 0x198
 80090ea:	881f      	ldrh	r7, [r3, #0]
 80090ec:	ab59      	add	r3, sp, #356	; 0x164
 80090ee:	007a      	lsls	r2, r7, #1
 80090f0:	5ad3      	ldrh	r3, [r2, r3]
 80090f2:	2105      	movs	r1, #5
 80090f4:	0018      	movs	r0, r3
 80090f6:	9312      	str	r3, [sp, #72]	; 0x48
 80090f8:	f005 fd4a 	bl	800eb90 <__udivsi3>
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	b2c0      	uxtb	r0, r0
 8009100:	0040      	lsls	r0, r0, #1
 8009102:	5ac0      	ldrh	r0, [r0, r3]
 8009104:	f006 f972 	bl	800f3ec <__aeabi_ui2f>
 8009108:	21de      	movs	r1, #222	; 0xde
 800910a:	0589      	lsls	r1, r1, #22
 800910c:	f005 fa0e 	bl	800e52c <__aeabi_fmul>
 8009110:	21fc      	movs	r1, #252	; 0xfc
 8009112:	0589      	lsls	r1, r1, #22
 8009114:	f005 fb3c 	bl	800e790 <__aeabi_fsub>
 8009118:	49cd      	ldr	r1, [pc, #820]	; (8009450 <calibrate.lto_priv.296+0xd98>)
 800911a:	f005 fa07 	bl	800e52c <__aeabi_fmul>
 800911e:	49cd      	ldr	r1, [pc, #820]	; (8009454 <calibrate.lto_priv.296+0xd9c>)
 8009120:	f005 fa04 	bl	800e52c <__aeabi_fmul>
 8009124:	4680      	mov	r8, r0
 8009126:	0028      	movs	r0, r5
 8009128:	f006 f916 	bl	800f358 <__aeabi_i2f>
 800912c:	1c01      	adds	r1, r0, #0
 800912e:	4640      	mov	r0, r8
 8009130:	f004 ff50 	bl	800dfd4 <__aeabi_fadd>
 8009134:	f006 f8f0 	bl	800f318 <__aeabi_f2iz>
 8009138:	ab45      	add	r3, sp, #276	; 0x114
 800913a:	8018      	strh	r0, [r3, #0]
 800913c:	2e03      	cmp	r6, #3
 800913e:	d907      	bls.n	8009150 <calibrate.lto_priv.296+0xa98>
 8009140:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009142:	4ac5      	ldr	r2, [pc, #788]	; (8009458 <calibrate.lto_priv.296+0xda0>)
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009148:	003b      	movs	r3, r7
 800914a:	49c4      	ldr	r1, [pc, #784]	; (800945c <calibrate.lto_priv.296+0xda4>)
 800914c:	2004      	movs	r0, #4
 800914e:	47a0      	blx	r4
 8009150:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009152:	48c3      	ldr	r0, [pc, #780]	; (8009460 <calibrate.lto_priv.296+0xda8>)
 8009154:	f003 fb43 	bl	800c7de <acc_diagnostic_log_set_parameter>
 8009158:	4dc2      	ldr	r5, [pc, #776]	; (8009464 <calibrate.lto_priv.296+0xdac>)
 800915a:	48c3      	ldr	r0, [pc, #780]	; (8009468 <calibrate.lto_priv.296+0xdb0>)
 800915c:	0029      	movs	r1, r5
 800915e:	ac45      	add	r4, sp, #276	; 0x114
 8009160:	f003 fb3c 	bl	800c7dc <acc_diagnostic_log_array>
 8009164:	0020      	movs	r0, r4
 8009166:	f001 fdae 	bl	800acc6 <acc_diagnostic_log_data_i16.constprop.20>
 800916a:	0029      	movs	r1, r5
 800916c:	48bf      	ldr	r0, [pc, #764]	; (800946c <calibrate.lto_priv.296+0xdb4>)
 800916e:	f003 fb35 	bl	800c7dc <acc_diagnostic_log_array>
 8009172:	ab3c      	add	r3, sp, #240	; 0xf0
 8009174:	469c      	mov	ip, r3
 8009176:	2022      	movs	r0, #34	; 0x22
 8009178:	4460      	add	r0, ip
 800917a:	f001 fda4 	bl	800acc6 <acc_diagnostic_log_data_i16.constprop.20>
 800917e:	4abc      	ldr	r2, [pc, #752]	; (8009470 <calibrate.lto_priv.296+0xdb8>)
 8009180:	8823      	ldrh	r3, [r4, #0]
 8009182:	4694      	mov	ip, r2
 8009184:	2200      	movs	r2, #0
 8009186:	4463      	add	r3, ip
 8009188:	9223      	str	r2, [sp, #140]	; 0x8c
 800918a:	2bc8      	cmp	r3, #200	; 0xc8
 800918c:	d900      	bls.n	8009190 <calibrate.lto_priv.296+0xad8>
 800918e:	e0a9      	b.n	80092e4 <calibrate.lto_priv.296+0xc2c>
 8009190:	2301      	movs	r3, #1
 8009192:	469a      	mov	sl, r3
 8009194:	4bb7      	ldr	r3, [pc, #732]	; (8009474 <calibrate.lto_priv.296+0xdbc>)
 8009196:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009198:	3344      	adds	r3, #68	; 0x44
 800919a:	5cd3      	ldrb	r3, [r2, r3]
 800919c:	48b6      	ldr	r0, [pc, #728]	; (8009478 <calibrate.lto_priv.296+0xdc0>)
 800919e:	0019      	movs	r1, r3
 80091a0:	9320      	str	r3, [sp, #128]	; 0x80
 80091a2:	f003 fb1c 	bl	800c7de <acc_diagnostic_log_set_parameter>
 80091a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091a8:	2280      	movs	r2, #128	; 0x80
 80091aa:	932e      	str	r3, [sp, #184]	; 0xb8
 80091ac:	466b      	mov	r3, sp
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	009c      	lsls	r4, r3, #2
 80091b4:	0020      	movs	r0, r4
 80091b6:	303e      	adds	r0, #62	; 0x3e
 80091b8:	9322      	str	r3, [sp, #136]	; 0x88
 80091ba:	287b      	cmp	r0, #123	; 0x7b
 80091bc:	d800      	bhi.n	80091c0 <calibrate.lto_priv.296+0xb08>
 80091be:	e09e      	b.n	80092fe <calibrate.lto_priv.296+0xc46>
 80091c0:	217c      	movs	r1, #124	; 0x7c
 80091c2:	f005 fd6b 	bl	800ec9c <__aeabi_uidivmod>
 80091c6:	2200      	movs	r2, #0
 80091c8:	4653      	mov	r3, sl
 80091ca:	0015      	movs	r5, r2
 80091cc:	0020      	movs	r0, r4
 80091ce:	b28c      	uxth	r4, r1
 80091d0:	2100      	movs	r1, #0
 80091d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091d4:	428e      	cmp	r6, r1
 80091d6:	d000      	beq.n	80091da <calibrate.lto_priv.296+0xb22>
 80091d8:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80091da:	465e      	mov	r6, fp
 80091dc:	62b4      	str	r4, [r6, #40]	; 0x28
 80091de:	4654      	mov	r4, sl
 80091e0:	62f0      	str	r0, [r6, #44]	; 0x2c
 80091e2:	6333      	str	r3, [r6, #48]	; 0x30
 80091e4:	6433      	str	r3, [r6, #64]	; 0x40
 80091e6:	64f4      	str	r4, [r6, #76]	; 0x4c
 80091e8:	2300      	movs	r3, #0
 80091ea:	65b4      	str	r4, [r6, #88]	; 0x58
 80091ec:	2003      	movs	r0, #3
 80091ee:	465c      	mov	r4, fp
 80091f0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80091f2:	6370      	str	r0, [r6, #52]	; 0x34
 80091f4:	6037      	str	r7, [r6, #0]
 80091f6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80091f8:	63b5      	str	r5, [r6, #56]	; 0x38
 80091fa:	6077      	str	r7, [r6, #4]
 80091fc:	9f26      	ldr	r7, [sp, #152]	; 0x98
 80091fe:	63f2      	str	r2, [r6, #60]	; 0x3c
 8009200:	60b7      	str	r7, [r6, #8]
 8009202:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 8009204:	001a      	movs	r2, r3
 8009206:	81b7      	strh	r7, [r6, #12]
 8009208:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 800920a:	6473      	str	r3, [r6, #68]	; 0x44
 800920c:	6137      	str	r7, [r6, #16]
 800920e:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8009210:	64b3      	str	r3, [r6, #72]	; 0x48
 8009212:	6177      	str	r7, [r6, #20]
 8009214:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009216:	6533      	str	r3, [r6, #80]	; 0x50
 8009218:	61b7      	str	r7, [r6, #24]
 800921a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800921c:	6573      	str	r3, [r6, #84]	; 0x54
 800921e:	61f7      	str	r7, [r6, #28]
 8009220:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8009222:	3604      	adds	r6, #4
 8009224:	61f7      	str	r7, [r6, #28]
 8009226:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009228:	4653      	mov	r3, sl
 800922a:	438b      	bics	r3, r1
 800922c:	65f2      	str	r2, [r6, #92]	; 0x5c
 800922e:	4651      	mov	r1, sl
 8009230:	66b3      	str	r3, [r6, #104]	; 0x68
 8009232:	465b      	mov	r3, fp
 8009234:	6632      	str	r2, [r6, #96]	; 0x60
 8009236:	6672      	str	r2, [r6, #100]	; 0x64
 8009238:	66f1      	str	r1, [r6, #108]	; 0x6c
 800923a:	6731      	str	r1, [r6, #112]	; 0x70
 800923c:	679a      	str	r2, [r3, #120]	; 0x78
 800923e:	2316      	movs	r3, #22
 8009240:	67b3      	str	r3, [r6, #120]	; 0x78
 8009242:	230f      	movs	r3, #15
 8009244:	67f3      	str	r3, [r6, #124]	; 0x7c
 8009246:	465b      	mov	r3, fp
 8009248:	0011      	movs	r1, r2
 800924a:	3308      	adds	r3, #8
 800924c:	67d9      	str	r1, [r3, #124]	; 0x7c
 800924e:	465d      	mov	r5, fp
 8009250:	465b      	mov	r3, fp
 8009252:	2207      	movs	r2, #7
 8009254:	3388      	adds	r3, #136	; 0x88
 8009256:	358c      	adds	r5, #140	; 0x8c
 8009258:	7029      	strb	r1, [r5, #0]
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	3a01      	subs	r2, #1
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	3494      	adds	r4, #148	; 0x94
 8009262:	3a08      	subs	r2, #8
 8009264:	6020      	str	r0, [r4, #0]
 8009266:	465f      	mov	r7, fp
 8009268:	611a      	str	r2, [r3, #16]
 800926a:	6159      	str	r1, [r3, #20]
 800926c:	6199      	str	r1, [r3, #24]
 800926e:	3305      	adds	r3, #5
 8009270:	7019      	strb	r1, [r3, #0]
 8009272:	4653      	mov	r3, sl
 8009274:	37a4      	adds	r7, #164	; 0xa4
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	465b      	mov	r3, fp
 800927a:	4652      	mov	r2, sl
 800927c:	33a8      	adds	r3, #168	; 0xa8
 800927e:	6019      	str	r1, [r3, #0]
 8009280:	715a      	strb	r2, [r3, #5]
 8009282:	f7fc ff89 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 8009286:	465b      	mov	r3, fp
 8009288:	2100      	movs	r1, #0
 800928a:	33b0      	adds	r3, #176	; 0xb0
 800928c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 800928e:	6018      	str	r0, [r3, #0]
 8009290:	3b04      	subs	r3, #4
 8009292:	609a      	str	r2, [r3, #8]
 8009294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009296:	7019      	strb	r1, [r3, #0]
 8009298:	3a01      	subs	r2, #1
 800929a:	60da      	str	r2, [r3, #12]
 800929c:	aa3c      	add	r2, sp, #240	; 0xf0
 800929e:	4694      	mov	ip, r2
 80092a0:	2322      	movs	r3, #34	; 0x22
 80092a2:	4463      	add	r3, ip
 80092a4:	2200      	movs	r2, #0
 80092a6:	5e9b      	ldrsh	r3, [r3, r2]
 80092a8:	a98d      	add	r1, sp, #564	; 0x234
 80092aa:	933a      	str	r3, [sp, #232]	; 0xe8
 80092ac:	ab45      	add	r3, sp, #276	; 0x114
 80092ae:	2200      	movs	r2, #0
 80092b0:	5e9b      	ldrsh	r3, [r3, r2]
 80092b2:	4658      	mov	r0, fp
 80092b4:	933b      	str	r3, [sp, #236]	; 0xec
 80092b6:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 80092b8:	6824      	ldr	r4, [r4, #0]
 80092ba:	4699      	mov	r9, r3
 80092bc:	782b      	ldrb	r3, [r5, #0]
 80092be:	683f      	ldr	r7, [r7, #0]
 80092c0:	930a      	str	r3, [sp, #40]	; 0x28
 80092c2:	f003 ff1f 	bl	800d104 <acc_cpd_linear_sweep_get_info>
 80092c6:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 80092c8:	9b92      	ldr	r3, [sp, #584]	; 0x248
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d11b      	bne.n	8009306 <calibrate.lto_priv.296+0xc4e>
 80092ce:	4b6b      	ldr	r3, [pc, #428]	; (800947c <calibrate.lto_priv.296+0xdc4>)
 80092d0:	4a6b      	ldr	r2, [pc, #428]	; (8009480 <calibrate.lto_priv.296+0xdc8>)
 80092d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d4:	4961      	ldr	r1, [pc, #388]	; (800945c <calibrate.lto_priv.296+0xda4>)
 80092d6:	2000      	movs	r0, #0
 80092d8:	4798      	blx	r3
 80092da:	2300      	movs	r3, #0
 80092dc:	9322      	str	r3, [sp, #136]	; 0x88
 80092de:	932e      	str	r3, [sp, #184]	; 0xb8
 80092e0:	931c      	str	r3, [sp, #112]	; 0x70
 80092e2:	e085      	b.n	80093f0 <calibrate.lto_priv.296+0xd38>
 80092e4:	4b65      	ldr	r3, [pc, #404]	; (800947c <calibrate.lto_priv.296+0xdc4>)
 80092e6:	001a      	movs	r2, r3
 80092e8:	3230      	adds	r2, #48	; 0x30
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	2a03      	cmp	r2, #3
 80092ee:	d800      	bhi.n	80092f2 <calibrate.lto_priv.296+0xc3a>
 80092f0:	e567      	b.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 80092f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f4:	4a63      	ldr	r2, [pc, #396]	; (8009484 <calibrate.lto_priv.296+0xdcc>)
 80092f6:	4959      	ldr	r1, [pc, #356]	; (800945c <calibrate.lto_priv.296+0xda4>)
 80092f8:	2004      	movs	r0, #4
 80092fa:	4798      	blx	r3
 80092fc:	e561      	b.n	8008dc2 <calibrate.lto_priv.296+0x70a>
 80092fe:	2203      	movs	r2, #3
 8009300:	4655      	mov	r5, sl
 8009302:	2300      	movs	r3, #0
 8009304:	e764      	b.n	80091d0 <calibrate.lto_priv.296+0xb18>
 8009306:	465b      	mov	r3, fp
 8009308:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800930a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800930c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800930e:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 8009310:	f003 ff46 	bl	800d1a0 <acc_cpd_linear_sweep_load_program>
 8009314:	901f      	str	r0, [sp, #124]	; 0x7c
 8009316:	901c      	str	r0, [sp, #112]	; 0x70
 8009318:	2800      	cmp	r0, #0
 800931a:	d0de      	beq.n	80092da <calibrate.lto_priv.296+0xc22>
 800931c:	2600      	movs	r6, #0
 800931e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009320:	42b3      	cmp	r3, r6
 8009322:	d000      	beq.n	8009326 <calibrate.lto_priv.296+0xc6e>
 8009324:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8009326:	0038      	movs	r0, r7
 8009328:	f006 f860 	bl	800f3ec <__aeabi_ui2f>
 800932c:	1c01      	adds	r1, r0, #0
 800932e:	4856      	ldr	r0, [pc, #344]	; (8009488 <calibrate.lto_priv.296+0xdd0>)
 8009330:	f004 ffea 	bl	800e308 <__aeabi_fdiv>
 8009334:	f005 fe3a 	bl	800efac <__aeabi_f2uiz>
 8009338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800933a:	3401      	adds	r4, #1
 800933c:	469c      	mov	ip, r3
 800933e:	b280      	uxth	r0, r0
 8009340:	b2a4      	uxth	r4, r4
 8009342:	4344      	muls	r4, r0
 8009344:	4465      	add	r5, ip
 8009346:	002b      	movs	r3, r5
 8009348:	46a4      	mov	ip, r4
 800934a:	4463      	add	r3, ip
 800934c:	9331      	str	r3, [sp, #196]	; 0xc4
 800934e:	4653      	mov	r3, sl
 8009350:	4033      	ands	r3, r6
 8009352:	22c4      	movs	r2, #196	; 0xc4
 8009354:	9314      	str	r3, [sp, #80]	; 0x50
 8009356:	466b      	mov	r3, sp
 8009358:	189b      	adds	r3, r3, r2
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	2105      	movs	r1, #5
 800935e:	3303      	adds	r3, #3
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	9340      	str	r3, [sp, #256]	; 0x100
 8009364:	0020      	movs	r0, r4
 8009366:	0063      	lsls	r3, r4, #1
 8009368:	9321      	str	r3, [sp, #132]	; 0x84
 800936a:	941b      	str	r4, [sp, #108]	; 0x6c
 800936c:	f005 fc10 	bl	800eb90 <__udivsi3>
 8009370:	2700      	movs	r7, #0
 8009372:	2305      	movs	r3, #5
 8009374:	0002      	movs	r2, r0
 8009376:	003e      	movs	r6, r7
 8009378:	003d      	movs	r5, r7
 800937a:	435a      	muls	r2, r3
 800937c:	0843      	lsrs	r3, r0, #1
 800937e:	9333      	str	r3, [sp, #204]	; 0xcc
 8009380:	3308      	adds	r3, #8
 8009382:	9334      	str	r3, [sp, #208]	; 0xd0
 8009384:	0053      	lsls	r3, r2, #1
 8009386:	9342      	str	r3, [sp, #264]	; 0x108
 8009388:	0043      	lsls	r3, r0, #1
 800938a:	9343      	str	r3, [sp, #268]	; 0x10c
 800938c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800938e:	9015      	str	r0, [sp, #84]	; 0x54
 8009390:	921d      	str	r2, [sp, #116]	; 0x74
 8009392:	9332      	str	r3, [sp, #200]	; 0xc8
 8009394:	2e00      	cmp	r6, #0
 8009396:	d03c      	beq.n	8009412 <calibrate.lto_priv.296+0xd5a>
 8009398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939a:	f7fc fc93 	bl	8005cc4 <acc_sensor_protocol_r2_is_sensor_running>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d02d      	beq.n	80093fe <calibrate.lto_priv.296+0xd46>
 80093a2:	4b36      	ldr	r3, [pc, #216]	; (800947c <calibrate.lto_priv.296+0xdc4>)
 80093a4:	4a39      	ldr	r2, [pc, #228]	; (800948c <calibrate.lto_priv.296+0xdd4>)
 80093a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80093a8:	492c      	ldr	r1, [pc, #176]	; (800945c <calibrate.lto_priv.296+0xda4>)
 80093aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ac:	2000      	movs	r0, #0
 80093ae:	47a0      	blx	r4
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	d092      	beq.n	80092da <calibrate.lto_priv.296+0xc22>
 80093b4:	2700      	movs	r7, #0
 80093b6:	aa3c      	add	r2, sp, #240	; 0xf0
 80093b8:	4694      	mov	ip, r2
 80093ba:	2322      	movs	r3, #34	; 0x22
 80093bc:	4463      	add	r3, ip
 80093be:	2200      	movs	r2, #0
 80093c0:	5e9b      	ldrsh	r3, [r3, r2]
 80093c2:	9330      	str	r3, [sp, #192]	; 0xc0
 80093c4:	ab45      	add	r3, sp, #276	; 0x114
 80093c6:	2200      	movs	r2, #0
 80093c8:	5e9b      	ldrsh	r3, [r3, r2]
 80093ca:	932f      	str	r3, [sp, #188]	; 0xbc
 80093cc:	4b2b      	ldr	r3, [pc, #172]	; (800947c <calibrate.lto_priv.296+0xdc4>)
 80093ce:	001a      	movs	r2, r3
 80093d0:	3230      	adds	r2, #48	; 0x30
 80093d2:	7812      	ldrb	r2, [r2, #0]
 80093d4:	2a03      	cmp	r2, #3
 80093d6:	d800      	bhi.n	80093da <calibrate.lto_priv.296+0xd22>
 80093d8:	e30b      	b.n	80099f2 <calibrate.lto_priv.296+0x133a>
 80093da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093dc:	491f      	ldr	r1, [pc, #124]	; (800945c <calibrate.lto_priv.296+0xda4>)
 80093de:	9200      	str	r2, [sp, #0]
 80093e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80093e2:	4a2b      	ldr	r2, [pc, #172]	; (8009490 <calibrate.lto_priv.296+0xdd8>)
 80093e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093e6:	2004      	movs	r0, #4
 80093e8:	47a0      	blx	r4
 80093ea:	2f00      	cmp	r7, #0
 80093ec:	d000      	beq.n	80093f0 <calibrate.lto_priv.296+0xd38>
 80093ee:	e303      	b.n	80099f8 <calibrate.lto_priv.296+0x1340>
 80093f0:	2300      	movs	r3, #0
 80093f2:	2200      	movs	r2, #0
 80093f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80093f6:	932c      	str	r3, [sp, #176]	; 0xb0
 80093f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80093fa:	921c      	str	r2, [sp, #112]	; 0x70
 80093fc:	e31b      	b.n	8009a36 <calibrate.lto_priv.296+0x137e>
 80093fe:	2d00      	cmp	r5, #0
 8009400:	d110      	bne.n	8009424 <calibrate.lto_priv.296+0xd6c>
 8009402:	4653      	mov	r3, sl
 8009404:	4a23      	ldr	r2, [pc, #140]	; (8009494 <calibrate.lto_priv.296+0xddc>)
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4923      	ldr	r1, [pc, #140]	; (8009498 <calibrate.lto_priv.296+0xde0>)
 800940a:	2372      	movs	r3, #114	; 0x72
 800940c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800940e:	f001 fc5b 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 8009412:	4922      	ldr	r1, [pc, #136]	; (800949c <calibrate.lto_priv.296+0xde4>)
 8009414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009416:	f7fc fc62 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 800941a:	2800      	cmp	r0, #0
 800941c:	d0c8      	beq.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 800941e:	2300      	movs	r3, #0
 8009420:	931e      	str	r3, [sp, #120]	; 0x78
 8009422:	e176      	b.n	8009712 <calibrate.lto_priv.296+0x105a>
 8009424:	464b      	mov	r3, r9
 8009426:	4d1b      	ldr	r5, [pc, #108]	; (8009494 <calibrate.lto_priv.296+0xddc>)
 8009428:	4c1b      	ldr	r4, [pc, #108]	; (8009498 <calibrate.lto_priv.296+0xde0>)
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	002a      	movs	r2, r5
 800942e:	2344      	movs	r3, #68	; 0x44
 8009430:	0021      	movs	r1, r4
 8009432:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009434:	f001 fc48 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 8009438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800943a:	002a      	movs	r2, r5
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	0021      	movs	r1, r4
 8009440:	2342      	movs	r3, #66	; 0x42
 8009442:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009444:	f001 fc40 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 8009448:	2e00      	cmp	r6, #0
 800944a:	d0e2      	beq.n	8009412 <calibrate.lto_priv.296+0xd5a>
 800944c:	e7d9      	b.n	8009402 <calibrate.lto_priv.296+0xd4a>
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	3f99999a 	.word	0x3f99999a
 8009454:	447a0000 	.word	0x447a0000
 8009458:	0801d396 	.word	0x0801d396
 800945c:	0801d09e 	.word	0x0801d09e
 8009460:	0801d3c4 	.word	0x0801d3c4
 8009464:	0801d3ae 	.word	0x0801d3ae
 8009468:	0801d3d0 	.word	0x0801d3d0
 800946c:	0801d3d7 	.word	0x0801d3d7
 8009470:	fffffbe6 	.word	0xfffffbe6
 8009474:	08015820 	.word	0x08015820
 8009478:	0801d585 	.word	0x0801d585
 800947c:	200003f0 	.word	0x200003f0
 8009480:	0801d404 	.word	0x0801d404
 8009484:	0801d3df 	.word	0x0801d3df
 8009488:	42f80000 	.word	0x42f80000
 800948c:	0801d422 	.word	0x0801d422
 8009490:	0801d6d6 	.word	0x0801d6d6
 8009494:	0801999c 	.word	0x0801999c
 8009498:	0801ab48 	.word	0x0801ab48
 800949c:	0000023a 	.word	0x0000023a
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d904      	bls.n	80094ae <calibrate.lto_priv.296+0xdf6>
 80094a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80094a6:	49d1      	ldr	r1, [pc, #836]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 80094a8:	4ad1      	ldr	r2, [pc, #836]	; (80097f0 <calibrate.lto_priv.296+0x1138>)
 80094aa:	2004      	movs	r0, #4
 80094ac:	4798      	blx	r3
 80094ae:	4ad1      	ldr	r2, [pc, #836]	; (80097f4 <calibrate.lto_priv.296+0x113c>)
 80094b0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80094b2:	0020      	movs	r0, r4
 80094b4:	f003 f9b4 	bl	800c820 <acc_alg_basic_saturation_check_u16>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d012      	beq.n	80094e2 <calibrate.lto_priv.296+0xe2a>
 80094bc:	4ace      	ldr	r2, [pc, #824]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 80094be:	4649      	mov	r1, r9
 80094c0:	0013      	movs	r3, r2
 80094c2:	3330      	adds	r3, #48	; 0x30
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	290f      	cmp	r1, #15
 80094c8:	d000      	beq.n	80094cc <calibrate.lto_priv.296+0xe14>
 80094ca:	e0f8      	b.n	80096be <calibrate.lto_priv.296+0x1006>
 80094cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d100      	bne.n	80094d4 <calibrate.lto_priv.296+0xe1c>
 80094d2:	e0e7      	b.n	80096a4 <calibrate.lto_priv.296+0xfec>
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d904      	bls.n	80094e2 <calibrate.lto_priv.296+0xe2a>
 80094d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80094da:	49c4      	ldr	r1, [pc, #784]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 80094dc:	4ac7      	ldr	r2, [pc, #796]	; (80097fc <calibrate.lto_priv.296+0x1144>)
 80094de:	2004      	movs	r0, #4
 80094e0:	4798      	blx	r3
 80094e2:	4642      	mov	r2, r8
 80094e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e6:	49c6      	ldr	r1, [pc, #792]	; (8009800 <calibrate.lto_priv.296+0x1148>)
 80094e8:	9341      	str	r3, [sp, #260]	; 0x104
 80094ea:	9b90      	ldr	r3, [sp, #576]	; 0x240
 80094ec:	3170      	adds	r1, #112	; 0x70
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	5a9b      	ldrh	r3, [r3, r2]
 80094f2:	ad73      	add	r5, sp, #460	; 0x1cc
 80094f4:	9335      	str	r3, [sp, #212]	; 0xd4
 80094f6:	9b91      	ldr	r3, [sp, #580]	; 0x244
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	5a9b      	ldrh	r3, [r3, r2]
 80094fc:	4ac1      	ldr	r2, [pc, #772]	; (8009804 <calibrate.lto_priv.296+0x114c>)
 80094fe:	933f      	str	r3, [sp, #252]	; 0xfc
 8009500:	465b      	mov	r3, fp
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	18d2      	adds	r2, r2, r3
 8009508:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800950a:	5a5b      	ldrh	r3, [r3, r1]
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	b21b      	sxth	r3, r3
 8009510:	0018      	movs	r0, r3
 8009512:	930e      	str	r3, [sp, #56]	; 0x38
 8009514:	f005 ff20 	bl	800f358 <__aeabi_i2f>
 8009518:	4642      	mov	r2, r8
 800951a:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 800951c:	1c06      	adds	r6, r0, #0
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	5a98      	ldrh	r0, [r3, r2]
 8009522:	f005 ff63 	bl	800f3ec <__aeabi_ui2f>
 8009526:	21de      	movs	r1, #222	; 0xde
 8009528:	0589      	lsls	r1, r1, #22
 800952a:	f004 ffff 	bl	800e52c <__aeabi_fmul>
 800952e:	21fc      	movs	r1, #252	; 0xfc
 8009530:	0589      	lsls	r1, r1, #22
 8009532:	f005 f92d 	bl	800e790 <__aeabi_fsub>
 8009536:	49b4      	ldr	r1, [pc, #720]	; (8009808 <calibrate.lto_priv.296+0x1150>)
 8009538:	f004 fff8 	bl	800e52c <__aeabi_fmul>
 800953c:	49b3      	ldr	r1, [pc, #716]	; (800980c <calibrate.lto_priv.296+0x1154>)
 800953e:	f004 fff5 	bl	800e52c <__aeabi_fmul>
 8009542:	1c01      	adds	r1, r0, #0
 8009544:	1c30      	adds	r0, r6, #0
 8009546:	f005 f923 	bl	800e790 <__aeabi_fsub>
 800954a:	f005 fee5 	bl	800f318 <__aeabi_f2iz>
 800954e:	b203      	sxth	r3, r0
 8009550:	4698      	mov	r8, r3
 8009552:	ab3c      	add	r3, sp, #240	; 0xf0
 8009554:	469c      	mov	ip, r3
 8009556:	2626      	movs	r6, #38	; 0x26
 8009558:	4643      	mov	r3, r8
 800955a:	4466      	add	r6, ip
 800955c:	8033      	strh	r3, [r6, #0]
 800955e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009560:	f005 ff44 	bl	800f3ec <__aeabi_ui2f>
 8009564:	21de      	movs	r1, #222	; 0xde
 8009566:	0589      	lsls	r1, r1, #22
 8009568:	f004 ffe0 	bl	800e52c <__aeabi_fmul>
 800956c:	21fc      	movs	r1, #252	; 0xfc
 800956e:	0589      	lsls	r1, r1, #22
 8009570:	f005 f90e 	bl	800e790 <__aeabi_fsub>
 8009574:	49a4      	ldr	r1, [pc, #656]	; (8009808 <calibrate.lto_priv.296+0x1150>)
 8009576:	f004 ffd9 	bl	800e52c <__aeabi_fmul>
 800957a:	49a4      	ldr	r1, [pc, #656]	; (800980c <calibrate.lto_priv.296+0x1154>)
 800957c:	f004 ffd6 	bl	800e52c <__aeabi_fmul>
 8009580:	9035      	str	r0, [sp, #212]	; 0xd4
 8009582:	4640      	mov	r0, r8
 8009584:	f005 fee8 	bl	800f358 <__aeabi_i2f>
 8009588:	1c01      	adds	r1, r0, #0
 800958a:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800958c:	f004 fd22 	bl	800dfd4 <__aeabi_fadd>
 8009590:	f005 fec2 	bl	800f318 <__aeabi_f2iz>
 8009594:	8028      	strh	r0, [r5, #0]
 8009596:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8009598:	f005 ff28 	bl	800f3ec <__aeabi_ui2f>
 800959c:	21de      	movs	r1, #222	; 0xde
 800959e:	0589      	lsls	r1, r1, #22
 80095a0:	f004 ffc4 	bl	800e52c <__aeabi_fmul>
 80095a4:	21fc      	movs	r1, #252	; 0xfc
 80095a6:	0589      	lsls	r1, r1, #22
 80095a8:	f005 f8f2 	bl	800e790 <__aeabi_fsub>
 80095ac:	4996      	ldr	r1, [pc, #600]	; (8009808 <calibrate.lto_priv.296+0x1150>)
 80095ae:	f004 ffbd 	bl	800e52c <__aeabi_fmul>
 80095b2:	4996      	ldr	r1, [pc, #600]	; (800980c <calibrate.lto_priv.296+0x1154>)
 80095b4:	f004 ffba 	bl	800e52c <__aeabi_fmul>
 80095b8:	f005 feae 	bl	800f318 <__aeabi_f2iz>
 80095bc:	2288      	movs	r2, #136	; 0x88
 80095be:	ab3c      	add	r3, sp, #240	; 0xf0
 80095c0:	0052      	lsls	r2, r2, #1
 80095c2:	189b      	adds	r3, r3, r2
 80095c4:	8018      	strh	r0, [r3, #0]
 80095c6:	4b92      	ldr	r3, [pc, #584]	; (8009810 <calibrate.lto_priv.296+0x1158>)
 80095c8:	4892      	ldr	r0, [pc, #584]	; (8009814 <calibrate.lto_priv.296+0x115c>)
 80095ca:	4698      	mov	r8, r3
 80095cc:	0019      	movs	r1, r3
 80095ce:	f003 f905 	bl	800c7dc <acc_diagnostic_log_array>
 80095d2:	0030      	movs	r0, r6
 80095d4:	f001 fb77 	bl	800acc6 <acc_diagnostic_log_data_i16.constprop.20>
 80095d8:	4641      	mov	r1, r8
 80095da:	488e      	ldr	r0, [pc, #568]	; (8009814 <calibrate.lto_priv.296+0x115c>)
 80095dc:	f003 f8fe 	bl	800c7dc <acc_diagnostic_log_array>
 80095e0:	0028      	movs	r0, r5
 80095e2:	f001 fb70 	bl	800acc6 <acc_diagnostic_log_data_i16.constprop.20>
 80095e6:	4641      	mov	r1, r8
 80095e8:	488b      	ldr	r0, [pc, #556]	; (8009818 <calibrate.lto_priv.296+0x1160>)
 80095ea:	f003 f8f7 	bl	800c7dc <acc_diagnostic_log_array>
 80095ee:	a880      	add	r0, sp, #512	; 0x200
 80095f0:	f001 fb69 	bl	800acc6 <acc_diagnostic_log_data_i16.constprop.20>
 80095f4:	8832      	ldrh	r2, [r6, #0]
 80095f6:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 80095f8:	1a9b      	subs	r3, r3, r2
 80095fa:	b21b      	sxth	r3, r3
 80095fc:	17d9      	asrs	r1, r3, #31
 80095fe:	185b      	adds	r3, r3, r1
 8009600:	404b      	eors	r3, r1
 8009602:	b21b      	sxth	r3, r3
 8009604:	2b64      	cmp	r3, #100	; 0x64
 8009606:	dc6d      	bgt.n	80096e4 <calibrate.lto_priv.296+0x102c>
 8009608:	4b84      	ldr	r3, [pc, #528]	; (800981c <calibrate.lto_priv.296+0x1164>)
 800960a:	469c      	mov	ip, r3
 800960c:	23e6      	movs	r3, #230	; 0xe6
 800960e:	4462      	add	r2, ip
 8009610:	b292      	uxth	r2, r2
 8009612:	005b      	lsls	r3, r3, #1
 8009614:	429a      	cmp	r2, r3
 8009616:	d865      	bhi.n	80096e4 <calibrate.lto_priv.296+0x102c>
 8009618:	2300      	movs	r3, #0
 800961a:	5eea      	ldrsh	r2, [r5, r3]
 800961c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 800961e:	1a9b      	subs	r3, r3, r2
 8009620:	b21b      	sxth	r3, r3
 8009622:	17d9      	asrs	r1, r3, #31
 8009624:	185b      	adds	r3, r3, r1
 8009626:	404b      	eors	r3, r1
 8009628:	b21b      	sxth	r3, r3
 800962a:	2b64      	cmp	r3, #100	; 0x64
 800962c:	dc5a      	bgt.n	80096e4 <calibrate.lto_priv.296+0x102c>
 800962e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009630:	4293      	cmp	r3, r2
 8009632:	db57      	blt.n	80096e4 <calibrate.lto_priv.296+0x102c>
 8009634:	497a      	ldr	r1, [pc, #488]	; (8009820 <calibrate.lto_priv.296+0x1168>)
 8009636:	487b      	ldr	r0, [pc, #492]	; (8009824 <calibrate.lto_priv.296+0x116c>)
 8009638:	f003 f8d0 	bl	800c7dc <acc_diagnostic_log_array>
 800963c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800963e:	0020      	movs	r0, r4
 8009640:	f003 f8ca 	bl	800c7d8 <acc_diagnostic_log_data_u16>
 8009644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009646:	2b00      	cmp	r3, #0
 8009648:	d000      	beq.n	800964c <calibrate.lto_priv.296+0xf94>
 800964a:	e08d      	b.n	8009768 <calibrate.lto_priv.296+0x10b0>
 800964c:	2124      	movs	r1, #36	; 0x24
 800964e:	4876      	ldr	r0, [pc, #472]	; (8009828 <calibrate.lto_priv.296+0x1170>)
 8009650:	f7fc f97d 	bl	800594e <acc_assert_fail>
 8009654:	464a      	mov	r2, r9
 8009656:	2908      	cmp	r1, #8
 8009658:	d200      	bcs.n	800965c <calibrate.lto_priv.296+0xfa4>
 800965a:	2208      	movs	r2, #8
 800965c:	2108      	movs	r1, #8
 800965e:	4249      	negs	r1, r1
 8009660:	4689      	mov	r9, r1
 8009662:	4491      	add	r9, r2
 8009664:	2b03      	cmp	r3, #3
 8009666:	d906      	bls.n	8009676 <calibrate.lto_priv.296+0xfbe>
 8009668:	4b63      	ldr	r3, [pc, #396]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 800966a:	4a70      	ldr	r2, [pc, #448]	; (800982c <calibrate.lto_priv.296+0x1174>)
 800966c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800966e:	495f      	ldr	r1, [pc, #380]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 8009670:	464b      	mov	r3, r9
 8009672:	2004      	movs	r0, #4
 8009674:	47a0      	blx	r4
 8009676:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009678:	f003 fc80 	bl	800cf7c <acc_sensor_protocol_r2_stop.constprop.25>
 800967c:	2d00      	cmp	r5, #0
 800967e:	d000      	beq.n	8009682 <calibrate.lto_priv.296+0xfca>
 8009680:	e68a      	b.n	8009398 <calibrate.lto_priv.296+0xce0>
 8009682:	2e00      	cmp	r6, #0
 8009684:	d000      	beq.n	8009688 <calibrate.lto_priv.296+0xfd0>
 8009686:	e685      	b.n	8009394 <calibrate.lto_priv.296+0xcdc>
 8009688:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d100      	bne.n	8009690 <calibrate.lto_priv.296+0xfd8>
 800968e:	e68f      	b.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 8009690:	2f00      	cmp	r7, #0
 8009692:	d000      	beq.n	8009696 <calibrate.lto_priv.296+0xfde>
 8009694:	e68f      	b.n	80093b6 <calibrate.lto_priv.296+0xcfe>
 8009696:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009698:	2b01      	cmp	r3, #1
 800969a:	d100      	bne.n	800969e <calibrate.lto_priv.296+0xfe6>
 800969c:	e1d6      	b.n	8009a4c <calibrate.lto_priv.296+0x1394>
 800969e:	4653      	mov	r3, sl
 80096a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80096a2:	e577      	b.n	8009194 <calibrate.lto_priv.296+0xadc>
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d800      	bhi.n	80096aa <calibrate.lto_priv.296+0xff2>
 80096a8:	e198      	b.n	80099dc <calibrate.lto_priv.296+0x1324>
 80096aa:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80096ac:	494f      	ldr	r1, [pc, #316]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 80096ae:	4a60      	ldr	r2, [pc, #384]	; (8009830 <calibrate.lto_priv.296+0x1178>)
 80096b0:	2004      	movs	r0, #4
 80096b2:	4798      	blx	r3
 80096b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096b8:	46b1      	mov	r9, r6
 80096ba:	930a      	str	r3, [sp, #40]	; 0x28
 80096bc:	e7db      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80096be:	2208      	movs	r2, #8
 80096c0:	4694      	mov	ip, r2
 80096c2:	44e1      	add	r9, ip
 80096c4:	464a      	mov	r2, r9
 80096c6:	2a0f      	cmp	r2, #15
 80096c8:	d901      	bls.n	80096ce <calibrate.lto_priv.296+0x1016>
 80096ca:	220f      	movs	r2, #15
 80096cc:	4691      	mov	r9, r2
 80096ce:	2600      	movs	r6, #0
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d9d0      	bls.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80096d4:	4b48      	ldr	r3, [pc, #288]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 80096d6:	4a57      	ldr	r2, [pc, #348]	; (8009834 <calibrate.lto_priv.296+0x117c>)
 80096d8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80096da:	4944      	ldr	r1, [pc, #272]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 80096dc:	464b      	mov	r3, r9
 80096de:	2004      	movs	r0, #4
 80096e0:	47a0      	blx	r4
 80096e2:	e7c8      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80096e4:	4b44      	ldr	r3, [pc, #272]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 80096e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80096e8:	001a      	movs	r2, r3
 80096ea:	3230      	adds	r2, #48	; 0x30
 80096ec:	7812      	ldrb	r2, [r2, #0]
 80096ee:	2902      	cmp	r1, #2
 80096f0:	d02d      	beq.n	800974e <calibrate.lto_priv.296+0x1096>
 80096f2:	2a03      	cmp	r2, #3
 80096f4:	d905      	bls.n	8009702 <calibrate.lto_priv.296+0x104a>
 80096f6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80096f8:	4a4f      	ldr	r2, [pc, #316]	; (8009838 <calibrate.lto_priv.296+0x1180>)
 80096fa:	000b      	movs	r3, r1
 80096fc:	2004      	movs	r0, #4
 80096fe:	493b      	ldr	r1, [pc, #236]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 8009700:	47a0      	blx	r4
 8009702:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009704:	f7fb fe9a 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 8009708:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800970a:	3301      	adds	r3, #1
 800970c:	931e      	str	r3, [sp, #120]	; 0x78
 800970e:	464b      	mov	r3, r9
 8009710:	930e      	str	r3, [sp, #56]	; 0x38
 8009712:	21fa      	movs	r1, #250	; 0xfa
 8009714:	ac80      	add	r4, sp, #512	; 0x200
 8009716:	0022      	movs	r2, r4
 8009718:	00c9      	lsls	r1, r1, #3
 800971a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800971c:	f003 fb7c 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8009720:	9019      	str	r0, [sp, #100]	; 0x64
 8009722:	1e05      	subs	r5, r0, #0
 8009724:	d100      	bne.n	8009728 <calibrate.lto_priv.296+0x1070>
 8009726:	e643      	b.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 8009728:	7823      	ldrb	r3, [r4, #0]
 800972a:	2b06      	cmp	r3, #6
 800972c:	d000      	beq.n	8009730 <calibrate.lto_priv.296+0x1078>
 800972e:	e63f      	b.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 8009730:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009732:	9a40      	ldr	r2, [sp, #256]	; 0x100
 8009734:	4293      	cmp	r3, r2
 8009736:	d300      	bcc.n	800973a <calibrate.lto_priv.296+0x1082>
 8009738:	e0f6      	b.n	8009928 <calibrate.lto_priv.296+0x1270>
 800973a:	4b2f      	ldr	r3, [pc, #188]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 800973c:	4a3f      	ldr	r2, [pc, #252]	; (800983c <calibrate.lto_priv.296+0x1184>)
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	492a      	ldr	r1, [pc, #168]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 8009742:	2000      	movs	r0, #0
 8009744:	4798      	blx	r3
 8009746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009748:	f003 fc18 	bl	800cf7c <acc_sensor_protocol_r2_stop.constprop.25>
 800974c:	e630      	b.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 800974e:	2a03      	cmp	r2, #3
 8009750:	d904      	bls.n	800975c <calibrate.lto_priv.296+0x10a4>
 8009752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009754:	4a3a      	ldr	r2, [pc, #232]	; (8009840 <calibrate.lto_priv.296+0x1188>)
 8009756:	4925      	ldr	r1, [pc, #148]	; (80097ec <calibrate.lto_priv.296+0x1134>)
 8009758:	2004      	movs	r0, #4
 800975a:	4798      	blx	r3
 800975c:	2700      	movs	r7, #0
 800975e:	464b      	mov	r3, r9
 8009760:	003e      	movs	r6, r7
 8009762:	930e      	str	r3, [sp, #56]	; 0x38
 8009764:	003d      	movs	r5, r7
 8009766:	e786      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 8009768:	0025      	movs	r5, r4
 800976a:	2000      	movs	r0, #0
 800976c:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800976e:	940e      	str	r4, [sp, #56]	; 0x38
 8009770:	191b      	adds	r3, r3, r4
 8009772:	882a      	ldrh	r2, [r5, #0]
 8009774:	3502      	adds	r5, #2
 8009776:	1880      	adds	r0, r0, r2
 8009778:	42ab      	cmp	r3, r5
 800977a:	d1fa      	bne.n	8009772 <calibrate.lto_priv.296+0x10ba>
 800977c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800977e:	f005 fa07 	bl	800eb90 <__udivsi3>
 8009782:	0022      	movs	r2, r4
 8009784:	b280      	uxth	r0, r0
 8009786:	8813      	ldrh	r3, [r2, #0]
 8009788:	4283      	cmp	r3, r0
 800978a:	d92b      	bls.n	80097e4 <calibrate.lto_priv.296+0x112c>
 800978c:	1a1b      	subs	r3, r3, r0
 800978e:	b29b      	uxth	r3, r3
 8009790:	8013      	strh	r3, [r2, #0]
 8009792:	3202      	adds	r2, #2
 8009794:	4295      	cmp	r5, r2
 8009796:	d1f6      	bne.n	8009786 <calibrate.lto_priv.296+0x10ce>
 8009798:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800979a:	0027      	movs	r7, r4
 800979c:	469c      	mov	ip, r3
 800979e:	44a4      	add	ip, r4
 80097a0:	4663      	mov	r3, ip
 80097a2:	46a0      	mov	r8, r4
 80097a4:	9335      	str	r3, [sp, #212]	; 0xd4
 80097a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80097a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80097aa:	931e      	str	r3, [sp, #120]	; 0x78
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	d14d      	bne.n	800984c <calibrate.lto_priv.296+0x1194>
 80097b0:	0023      	movs	r3, r4
 80097b2:	0028      	movs	r0, r5
 80097b4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d168      	bne.n	800988c <calibrate.lto_priv.296+0x11d4>
 80097ba:	2103      	movs	r1, #3
 80097bc:	f005 f9e8 	bl	800eb90 <__udivsi3>
 80097c0:	0025      	movs	r5, r4
 80097c2:	2302      	movs	r3, #2
 80097c4:	b280      	uxth	r0, r0
 80097c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d867      	bhi.n	800989c <calibrate.lto_priv.296+0x11e4>
 80097cc:	0013      	movs	r3, r2
 80097ce:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d300      	bcc.n	80097d6 <calibrate.lto_priv.296+0x111e>
 80097d4:	e081      	b.n	80098da <calibrate.lto_priv.296+0x1222>
 80097d6:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <calibrate.lto_priv.296+0x1140>)
 80097d8:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <calibrate.lto_priv.296+0x118c>)
 80097da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097dc:	491a      	ldr	r1, [pc, #104]	; (8009848 <calibrate.lto_priv.296+0x1190>)
 80097de:	2000      	movs	r0, #0
 80097e0:	4798      	blx	r3
 80097e2:	e7bb      	b.n	800975c <calibrate.lto_priv.296+0x10a4>
 80097e4:	1ac3      	subs	r3, r0, r3
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	e7d2      	b.n	8009790 <calibrate.lto_priv.296+0x10d8>
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	0801d09e 	.word	0x0801d09e
 80097f0:	0801d47a 	.word	0x0801d47a
 80097f4:	402ca8ad 	.word	0x402ca8ad
 80097f8:	200003f0 	.word	0x200003f0
 80097fc:	0801d4ca 	.word	0x0801d4ca
 8009800:	080157a0 	.word	0x080157a0
 8009804:	08015820 	.word	0x08015820
 8009808:	3f99999a 	.word	0x3f99999a
 800980c:	447a0000 	.word	0x447a0000
 8009810:	0801d3ae 	.word	0x0801d3ae
 8009814:	0801d546 	.word	0x0801d546
 8009818:	0801d554 	.word	0x0801d554
 800981c:	fffffcf4 	.word	0xfffffcf4
 8009820:	0801d562 	.word	0x0801d562
 8009824:	0801d590 	.word	0x0801d590
 8009828:	0801d5e2 	.word	0x0801d5e2
 800982c:	0801d498 	.word	0x0801d498
 8009830:	0801d4ea 	.word	0x0801d4ea
 8009834:	0801d512 	.word	0x0801d512
 8009838:	0801d5a4 	.word	0x0801d5a4
 800983c:	0801d16a 	.word	0x0801d16a
 8009840:	0801d5cb 	.word	0x0801d5cb
 8009844:	0801d689 	.word	0x0801d689
 8009848:	0801d66c 	.word	0x0801d66c
 800984c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800984e:	0058      	lsls	r0, r3, #1
 8009850:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009852:	1940      	adds	r0, r0, r5
 8009854:	1bd9      	subs	r1, r3, r7
 8009856:	f005 f99b 	bl	800eb90 <__udivsi3>
 800985a:	1e06      	subs	r6, r0, #0
 800985c:	d014      	beq.n	8009888 <calibrate.lto_priv.296+0x11d0>
 800985e:	0042      	lsls	r2, r0, #1
 8009860:	4643      	mov	r3, r8
 8009862:	2000      	movs	r0, #0
 8009864:	4442      	add	r2, r8
 8009866:	8819      	ldrh	r1, [r3, #0]
 8009868:	3302      	adds	r3, #2
 800986a:	1840      	adds	r0, r0, r1
 800986c:	429a      	cmp	r2, r3
 800986e:	d1fa      	bne.n	8009866 <calibrate.lto_priv.296+0x11ae>
 8009870:	0031      	movs	r1, r6
 8009872:	f005 f98d 	bl	800eb90 <__udivsi3>
 8009876:	8038      	strh	r0, [r7, #0]
 8009878:	0073      	lsls	r3, r6, #1
 800987a:	4498      	add	r8, r3
 800987c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800987e:	3d01      	subs	r5, #1
 8009880:	1b9b      	subs	r3, r3, r6
 8009882:	931e      	str	r3, [sp, #120]	; 0x78
 8009884:	3702      	adds	r7, #2
 8009886:	e791      	b.n	80097ac <calibrate.lto_priv.296+0x10f4>
 8009888:	8038      	strh	r0, [r7, #0]
 800988a:	e7f5      	b.n	8009878 <calibrate.lto_priv.296+0x11c0>
 800988c:	8819      	ldrh	r1, [r3, #0]
 800988e:	1c0a      	adds	r2, r1, #0
 8009890:	4281      	cmp	r1, r0
 8009892:	d200      	bcs.n	8009896 <calibrate.lto_priv.296+0x11de>
 8009894:	1c02      	adds	r2, r0, #0
 8009896:	b290      	uxth	r0, r2
 8009898:	3302      	adds	r3, #2
 800989a:	e78b      	b.n	80097b4 <calibrate.lto_priv.296+0x10fc>
 800989c:	882a      	ldrh	r2, [r5, #0]
 800989e:	88a9      	ldrh	r1, [r5, #4]
 80098a0:	428a      	cmp	r2, r1
 80098a2:	d802      	bhi.n	80098aa <calibrate.lto_priv.296+0x11f2>
 80098a4:	0016      	movs	r6, r2
 80098a6:	000a      	movs	r2, r1
 80098a8:	0031      	movs	r1, r6
 80098aa:	4290      	cmp	r0, r2
 80098ac:	d212      	bcs.n	80098d4 <calibrate.lto_priv.296+0x121c>
 80098ae:	00ce      	lsls	r6, r1, #3
 80098b0:	42b2      	cmp	r2, r6
 80098b2:	d90f      	bls.n	80098d4 <calibrate.lto_priv.296+0x121c>
 80098b4:	4c90      	ldr	r4, [pc, #576]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 80098b6:	0025      	movs	r5, r4
 80098b8:	3530      	adds	r5, #48	; 0x30
 80098ba:	782d      	ldrb	r5, [r5, #0]
 80098bc:	2d03      	cmp	r5, #3
 80098be:	d800      	bhi.n	80098c2 <calibrate.lto_priv.296+0x120a>
 80098c0:	e74c      	b.n	800975c <calibrate.lto_priv.296+0x10a4>
 80098c2:	9002      	str	r0, [sp, #8]
 80098c4:	9101      	str	r1, [sp, #4]
 80098c6:	9200      	str	r2, [sp, #0]
 80098c8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80098ca:	4a8c      	ldr	r2, [pc, #560]	; (8009afc <calibrate.lto_priv.296+0x1444>)
 80098cc:	498c      	ldr	r1, [pc, #560]	; (8009b00 <calibrate.lto_priv.296+0x1448>)
 80098ce:	2004      	movs	r0, #4
 80098d0:	47a0      	blx	r4
 80098d2:	e743      	b.n	800975c <calibrate.lto_priv.296+0x10a4>
 80098d4:	3301      	adds	r3, #1
 80098d6:	3502      	adds	r5, #2
 80098d8:	e775      	b.n	80097c6 <calibrate.lto_priv.296+0x110e>
 80098da:	0022      	movs	r2, r4
 80098dc:	2300      	movs	r3, #0
 80098de:	3210      	adds	r2, #16
 80098e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098e2:	8809      	ldrh	r1, [r1, #0]
 80098e4:	185b      	adds	r3, r3, r1
 80098e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80098e8:	3102      	adds	r1, #2
 80098ea:	910e      	str	r1, [sp, #56]	; 0x38
 80098ec:	428a      	cmp	r2, r1
 80098ee:	d1f7      	bne.n	80098e0 <calibrate.lto_priv.296+0x1228>
 80098f0:	2200      	movs	r2, #0
 80098f2:	9933      	ldr	r1, [sp, #204]	; 0xcc
 80098f4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 80098f6:	4288      	cmp	r0, r1
 80098f8:	d811      	bhi.n	800991e <calibrate.lto_priv.296+0x1266>
 80098fa:	2105      	movs	r1, #5
 80098fc:	4359      	muls	r1, r3
 80098fe:	428a      	cmp	r2, r1
 8009900:	d271      	bcs.n	80099e6 <calibrate.lto_priv.296+0x132e>
 8009902:	497d      	ldr	r1, [pc, #500]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 8009904:	0008      	movs	r0, r1
 8009906:	3030      	adds	r0, #48	; 0x30
 8009908:	7800      	ldrb	r0, [r0, #0]
 800990a:	2803      	cmp	r0, #3
 800990c:	d800      	bhi.n	8009910 <calibrate.lto_priv.296+0x1258>
 800990e:	e725      	b.n	800975c <calibrate.lto_priv.296+0x10a4>
 8009910:	9200      	str	r2, [sp, #0]
 8009912:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8009914:	4a7b      	ldr	r2, [pc, #492]	; (8009b04 <calibrate.lto_priv.296+0x144c>)
 8009916:	497a      	ldr	r1, [pc, #488]	; (8009b00 <calibrate.lto_priv.296+0x1448>)
 8009918:	2004      	movs	r0, #4
 800991a:	47a0      	blx	r4
 800991c:	e71e      	b.n	800975c <calibrate.lto_priv.296+0x10a4>
 800991e:	0048      	lsls	r0, r1, #1
 8009920:	5a20      	ldrh	r0, [r4, r0]
 8009922:	3101      	adds	r1, #1
 8009924:	1812      	adds	r2, r2, r0
 8009926:	e7e5      	b.n	80098f4 <calibrate.lto_priv.296+0x123c>
 8009928:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800992a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800992c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800992e:	f7fb fd01 	bl	8005334 <acc_sensor_protocol_r2_transfer_data>
 8009932:	4680      	mov	r8, r0
 8009934:	2800      	cmp	r0, #0
 8009936:	d100      	bne.n	800993a <calibrate.lto_priv.296+0x1282>
 8009938:	e53a      	b.n	80093b0 <calibrate.lto_priv.296+0xcf8>
 800993a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 800993c:	005c      	lsls	r4, r3, #1
 800993e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009940:	4444      	add	r4, r8
 8009942:	2b00      	cmp	r3, #0
 8009944:	d01f      	beq.n	8009986 <calibrate.lto_priv.296+0x12ce>
 8009946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800994a:	18e6      	adds	r6, r4, r3
 800994c:	0032      	movs	r2, r6
 800994e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009950:	4650      	mov	r0, sl
 8009952:	f004 f8b9 	bl	800dac8 <acc_probes_execute_uint16>
 8009956:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009958:	0030      	movs	r0, r6
 800995a:	f7fb fc11 	bl	8005180 <acc_alg_cca_calculate>
 800995e:	496a      	ldr	r1, [pc, #424]	; (8009b08 <calibrate.lto_priv.296+0x1450>)
 8009960:	9016      	str	r0, [sp, #88]	; 0x58
 8009962:	2601      	movs	r6, #1
 8009964:	f005 faee 	bl	800ef44 <__aeabi_fcmpgt>
 8009968:	2800      	cmp	r0, #0
 800996a:	d100      	bne.n	800996e <calibrate.lto_priv.296+0x12b6>
 800996c:	1c06      	adds	r6, r0, #0
 800996e:	b2f3      	uxtb	r3, r6
 8009970:	4965      	ldr	r1, [pc, #404]	; (8009b08 <calibrate.lto_priv.296+0x1450>)
 8009972:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009974:	9317      	str	r3, [sp, #92]	; 0x5c
 8009976:	f005 fae5 	bl	800ef44 <__aeabi_fcmpgt>
 800997a:	2800      	cmp	r0, #0
 800997c:	d124      	bne.n	80099c8 <calibrate.lto_priv.296+0x1310>
 800997e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009980:	2b00      	cmp	r3, #0
 8009982:	d126      	bne.n	80099d2 <calibrate.lto_priv.296+0x131a>
 8009984:	9317      	str	r3, [sp, #92]	; 0x5c
 8009986:	4a61      	ldr	r2, [pc, #388]	; (8009b0c <calibrate.lto_priv.296+0x1454>)
 8009988:	9921      	ldr	r1, [sp, #132]	; 0x84
 800998a:	0020      	movs	r0, r4
 800998c:	f002 ff48 	bl	800c820 <acc_alg_basic_saturation_check_u16>
 8009990:	1e06      	subs	r6, r0, #0
 8009992:	d000      	beq.n	8009996 <calibrate.lto_priv.296+0x12de>
 8009994:	e58b      	b.n	80094ae <calibrate.lto_priv.296+0xdf6>
 8009996:	4a58      	ldr	r2, [pc, #352]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 8009998:	4649      	mov	r1, r9
 800999a:	0013      	movs	r3, r2
 800999c:	3330      	adds	r3, #48	; 0x30
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2900      	cmp	r1, #0
 80099a2:	d000      	beq.n	80099a6 <calibrate.lto_priv.296+0x12ee>
 80099a4:	e656      	b.n	8009654 <calibrate.lto_priv.296+0xf9c>
 80099a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099a8:	2900      	cmp	r1, #0
 80099aa:	d100      	bne.n	80099ae <calibrate.lto_priv.296+0x12f6>
 80099ac:	e578      	b.n	80094a0 <calibrate.lto_priv.296+0xde8>
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d904      	bls.n	80099bc <calibrate.lto_priv.296+0x1304>
 80099b2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80099b4:	4956      	ldr	r1, [pc, #344]	; (8009b10 <calibrate.lto_priv.296+0x1458>)
 80099b6:	4a57      	ldr	r2, [pc, #348]	; (8009b14 <calibrate.lto_priv.296+0x145c>)
 80099b8:	2004      	movs	r0, #4
 80099ba:	4798      	blx	r3
 80099bc:	464b      	mov	r3, r9
 80099be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80099c0:	930a      	str	r3, [sp, #40]	; 0x28
 80099c2:	230f      	movs	r3, #15
 80099c4:	4699      	mov	r9, r3
 80099c6:	e656      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80099c8:	2300      	movs	r3, #0
 80099ca:	9332      	str	r3, [sp, #200]	; 0xc8
 80099cc:	001e      	movs	r6, r3
 80099ce:	001d      	movs	r5, r3
 80099d0:	e651      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80099d2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80099d4:	9017      	str	r0, [sp, #92]	; 0x5c
 80099d6:	9014      	str	r0, [sp, #80]	; 0x50
 80099d8:	0005      	movs	r5, r0
 80099da:	e64c      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80099dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80099de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099e0:	46b1      	mov	r9, r6
 80099e2:	930a      	str	r3, [sp, #40]	; 0x28
 80099e4:	e647      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80099e6:	464b      	mov	r3, r9
 80099e8:	2500      	movs	r5, #0
 80099ea:	930e      	str	r3, [sp, #56]	; 0x38
 80099ec:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80099ee:	002e      	movs	r6, r5
 80099f0:	e641      	b.n	8009676 <calibrate.lto_priv.296+0xfbe>
 80099f2:	2f00      	cmp	r7, #0
 80099f4:	d100      	bne.n	80099f8 <calibrate.lto_priv.296+0x1340>
 80099f6:	e4fb      	b.n	80093f0 <calibrate.lto_priv.296+0xd38>
 80099f8:	4b3f      	ldr	r3, [pc, #252]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 80099fa:	001a      	movs	r2, r3
 80099fc:	3230      	adds	r2, #48	; 0x30
 80099fe:	7812      	ldrb	r2, [r2, #0]
 8009a00:	2a01      	cmp	r2, #1
 8009a02:	d917      	bls.n	8009a34 <calibrate.lto_priv.296+0x137c>
 8009a04:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009a06:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a08:	4b43      	ldr	r3, [pc, #268]	; (8009b18 <calibrate.lto_priv.296+0x1460>)
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d000      	beq.n	8009a10 <calibrate.lto_priv.296+0x1358>
 8009a0e:	4b43      	ldr	r3, [pc, #268]	; (8009b1c <calibrate.lto_priv.296+0x1464>)
 8009a10:	9306      	str	r3, [sp, #24]
 8009a12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a14:	4a42      	ldr	r2, [pc, #264]	; (8009b20 <calibrate.lto_priv.296+0x1468>)
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8009a1a:	493d      	ldr	r1, [pc, #244]	; (8009b10 <calibrate.lto_priv.296+0x1458>)
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8009a20:	2002      	movs	r0, #2
 8009a22:	9303      	str	r3, [sp, #12]
 8009a24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009a26:	9302      	str	r3, [sp, #8]
 8009a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a2a:	9301      	str	r3, [sp, #4]
 8009a2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a2e:	9300      	str	r3, [sp, #0]
 8009a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a32:	47a0      	blx	r4
 8009a34:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a36:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8009a38:	9239      	str	r2, [sp, #228]	; 0xe4
 8009a3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a3c:	923e      	str	r2, [sp, #248]	; 0xf8
 8009a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a40:	923d      	str	r2, [sp, #244]	; 0xf4
 8009a42:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8009a44:	923c      	str	r2, [sp, #240]	; 0xf0
 8009a46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009a48:	922d      	str	r2, [sp, #180]	; 0xb4
 8009a4a:	e012      	b.n	8009a72 <calibrate.lto_priv.296+0x13ba>
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 8009a4e:	001a      	movs	r2, r3
 8009a50:	3230      	adds	r2, #48	; 0x30
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	2a03      	cmp	r2, #3
 8009a56:	d801      	bhi.n	8009a5c <calibrate.lto_priv.296+0x13a4>
 8009a58:	f7ff f9b3 	bl	8008dc2 <calibrate.lto_priv.296+0x70a>
 8009a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a5e:	492c      	ldr	r1, [pc, #176]	; (8009b10 <calibrate.lto_priv.296+0x1458>)
 8009a60:	9200      	str	r2, [sp, #0]
 8009a62:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009a64:	4a2f      	ldr	r2, [pc, #188]	; (8009b24 <calibrate.lto_priv.296+0x146c>)
 8009a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a68:	2004      	movs	r0, #4
 8009a6a:	47a0      	blx	r4
 8009a6c:	f7ff f9a9 	bl	8008dc2 <calibrate.lto_priv.296+0x70a>
 8009a70:	2300      	movs	r3, #0
 8009a72:	2400      	movs	r4, #0
 8009a74:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8009a76:	42a2      	cmp	r2, r4
 8009a78:	d000      	beq.n	8009a7c <calibrate.lto_priv.296+0x13c4>
 8009a7a:	001c      	movs	r4, r3
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	401c      	ands	r4, r3
 8009a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <calibrate.lto_priv.296+0x13d8>
 8009a86:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009a88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a8a:	701a      	strb	r2, [r3, #0]
 8009a8c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	2c00      	cmp	r4, #0
 8009a92:	d101      	bne.n	8009a98 <calibrate.lto_priv.296+0x13e0>
 8009a94:	f7fe fe35 	bl	8008702 <calibrate.lto_priv.296+0x4a>
 8009a98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a9a:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009a9c:	4d16      	ldr	r5, [pc, #88]	; (8009af8 <calibrate.lto_priv.296+0x1440>)
 8009a9e:	8093      	strh	r3, [r2, #4]
 8009aa0:	ab46      	add	r3, sp, #280	; 0x118
 8009aa2:	791b      	ldrb	r3, [r3, #4]
 8009aa4:	80d3      	strh	r3, [r2, #6]
 8009aa6:	0013      	movs	r3, r2
 8009aa8:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8009aaa:	811a      	strh	r2, [r3, #8]
 8009aac:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8009aae:	815a      	strh	r2, [r3, #10]
 8009ab0:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009ab2:	819a      	strh	r2, [r3, #12]
 8009ab4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8009ab6:	81da      	strh	r2, [r3, #14]
 8009ab8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009aba:	821a      	strh	r2, [r3, #16]
 8009abc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009abe:	825a      	strh	r2, [r3, #18]
 8009ac0:	2306      	movs	r3, #6
 8009ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	002b      	movs	r3, r5
 8009ac8:	3330      	adds	r3, #48	; 0x30
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d904      	bls.n	8009ada <calibrate.lto_priv.296+0x1422>
 8009ad0:	4a15      	ldr	r2, [pc, #84]	; (8009b28 <calibrate.lto_priv.296+0x1470>)
 8009ad2:	4916      	ldr	r1, [pc, #88]	; (8009b2c <calibrate.lto_priv.296+0x1474>)
 8009ad4:	2004      	movs	r0, #4
 8009ad6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009ad8:	4798      	blx	r3
 8009ada:	002b      	movs	r3, r5
 8009adc:	3330      	adds	r3, #48	; 0x30
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d801      	bhi.n	8009ae8 <calibrate.lto_priv.296+0x1430>
 8009ae4:	f7fe fe0e 	bl	8008704 <calibrate.lto_priv.296+0x4c>
 8009ae8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009aea:	4a11      	ldr	r2, [pc, #68]	; (8009b30 <calibrate.lto_priv.296+0x1478>)
 8009aec:	490f      	ldr	r1, [pc, #60]	; (8009b2c <calibrate.lto_priv.296+0x1474>)
 8009aee:	2002      	movs	r0, #2
 8009af0:	4798      	blx	r3
 8009af2:	f7fe fe07 	bl	8008704 <calibrate.lto_priv.296+0x4c>
 8009af6:	46c0      	nop			; (mov r8, r8)
 8009af8:	200003f0 	.word	0x200003f0
 8009afc:	0801d610 	.word	0x0801d610
 8009b00:	0801d66c 	.word	0x0801d66c
 8009b04:	0801d699 	.word	0x0801d699
 8009b08:	42640000 	.word	0x42640000
 8009b0c:	42172c98 	.word	0x42172c98
 8009b10:	0801d09e 	.word	0x0801d09e
 8009b14:	0801d453 	.word	0x0801d453
 8009b18:	0801d07b 	.word	0x0801d07b
 8009b1c:	0801d076 	.word	0x0801d076
 8009b20:	0801d737 	.word	0x0801d737
 8009b24:	0801d703 	.word	0x0801d703
 8009b28:	0801d79f 	.word	0x0801d79f
 8009b2c:	0801c9b2 	.word	0x0801c9b2
 8009b30:	0801cb82 	.word	0x0801cb82

08009b34 <acc_sensor_r2_conf_write_instr>:
 8009b34:	23a0      	movs	r3, #160	; 0xa0
 8009b36:	b530      	push	{r4, r5, lr}
 8009b38:	01db      	lsls	r3, r3, #7
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	4319      	orrs	r1, r3
 8009b3e:	ac02      	add	r4, sp, #8
 8009b40:	8021      	strh	r1, [r4, #0]
 8009b42:	210a      	movs	r1, #10
 8009b44:	0005      	movs	r5, r0
 8009b46:	9201      	str	r2, [sp, #4]
 8009b48:	4469      	add	r1, sp
 8009b4a:	a801      	add	r0, sp, #4
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f002 fd51 	bl	800c5f4 <acc_confprogram_copy>
 8009b52:	2300      	movs	r3, #0
 8009b54:	2203      	movs	r2, #3
 8009b56:	0021      	movs	r1, r4
 8009b58:	0028      	movs	r0, r5
 8009b5a:	f7fc fa97 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 8009b5e:	b005      	add	sp, #20
 8009b60:	bd30      	pop	{r4, r5, pc}
 8009b62:	46c0      	nop			; (mov r8, r8)

08009b64 <HAL_RTC_WaitForSynchro.constprop.112>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009b64:	20a0      	movs	r0, #160	; 0xa0
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
 8009b66:	b530      	push	{r4, r5, lr}
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b68:	25fa      	movs	r5, #250	; 0xfa
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009b6a:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <HAL_RTC_WaitForSynchro.constprop.112+0x2c>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b6c:	00ad      	lsls	r5, r5, #2
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009b6e:	6813      	ldr	r3, [r2, #0]
 8009b70:	68d9      	ldr	r1, [r3, #12]
 8009b72:	4381      	bics	r1, r0
 8009b74:	60d9      	str	r1, [r3, #12]
  return uwTick;
 8009b76:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009b78:	3880      	subs	r0, #128	; 0x80
 8009b7a:	68d9      	ldr	r1, [r3, #12]
 8009b7c:	4201      	tst	r1, r0
 8009b7e:	d001      	beq.n	8009b84 <HAL_RTC_WaitForSynchro.constprop.112+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009b80:	2000      	movs	r0, #0
}
 8009b82:	bd30      	pop	{r4, r5, pc}
 8009b84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b86:	1b09      	subs	r1, r1, r4
 8009b88:	42a9      	cmp	r1, r5
 8009b8a:	d9f6      	bls.n	8009b7a <HAL_RTC_WaitForSynchro.constprop.112+0x16>
      return HAL_TIMEOUT;
 8009b8c:	2003      	movs	r0, #3
 8009b8e:	e7f8      	b.n	8009b82 <HAL_RTC_WaitForSynchro.constprop.112+0x1e>
 8009b90:	200003c0 	.word	0x200003c0

08009b94 <UART_WaitOnFlagUntilTimeout.constprop.99>:
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009b94:	b570      	push	{r4, r5, r6, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b96:	6804      	ldr	r4, [r0, #0]
 8009b98:	4e11      	ldr	r6, [pc, #68]	; (8009be0 <UART_WaitOnFlagUntilTimeout.constprop.99+0x4c>)
 8009b9a:	69e5      	ldr	r5, [r4, #28]
 8009b9c:	400d      	ands	r5, r1
 8009b9e:	42a9      	cmp	r1, r5
 8009ba0:	d101      	bne.n	8009ba6 <UART_WaitOnFlagUntilTimeout.constprop.99+0x12>
  return HAL_OK;
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	e017      	b.n	8009bd6 <UART_WaitOnFlagUntilTimeout.constprop.99+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009ba6:	1c5d      	adds	r5, r3, #1
 8009ba8:	d0f7      	beq.n	8009b9a <UART_WaitOnFlagUntilTimeout.constprop.99+0x6>
 8009baa:	6af5      	ldr	r5, [r6, #44]	; 0x2c
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bac:	1aad      	subs	r5, r5, r2
 8009bae:	42ab      	cmp	r3, r5
 8009bb0:	d212      	bcs.n	8009bd8 <UART_WaitOnFlagUntilTimeout.constprop.99+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	4a0b      	ldr	r2, [pc, #44]	; (8009be4 <UART_WaitOnFlagUntilTimeout.constprop.99+0x50>)
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bba:	68a3      	ldr	r3, [r4, #8]
 8009bbc:	32a3      	adds	r2, #163	; 0xa3
 8009bbe:	32ff      	adds	r2, #255	; 0xff
 8009bc0:	4393      	bics	r3, r2
 8009bc2:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	1d02      	adds	r2, r0, #4
 8009bc8:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009bca:	3204      	adds	r2, #4
 8009bcc:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8009bce:	2300      	movs	r3, #0
 8009bd0:	307c      	adds	r0, #124	; 0x7c
 8009bd2:	7003      	strb	r3, [r0, #0]
 8009bd4:	2003      	movs	r0, #3
}
 8009bd6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1de      	bne.n	8009b9a <UART_WaitOnFlagUntilTimeout.constprop.99+0x6>
 8009bdc:	e7e9      	b.n	8009bb2 <UART_WaitOnFlagUntilTimeout.constprop.99+0x1e>
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	200003c0 	.word	0x200003c0
 8009be4:	fffffe5f 	.word	0xfffffe5f

08009be8 <acc_utils_transfer_buffer_to_uint32.constprop.24>:
 8009be8:	8803      	ldrh	r3, [r0, #0]
 8009bea:	8842      	ldrh	r2, [r0, #2]
 8009bec:	041b      	lsls	r3, r3, #16
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	600b      	str	r3, [r1, #0]
 8009bf2:	4770      	bx	lr

08009bf4 <acc_confprogram_modify_runif_sensor.constprop.19>:
 8009bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bf6:	0015      	movs	r5, r2
 8009bf8:	aa08      	add	r2, sp, #32
 8009bfa:	0006      	movs	r6, r0
 8009bfc:	7810      	ldrb	r0, [r2, #0]
 8009bfe:	00aa      	lsls	r2, r5, #2
 8009c00:	5854      	ldr	r4, [r2, r1]
 8009c02:	220f      	movs	r2, #15
 8009c04:	4394      	bics	r4, r2
 8009c06:	4a0f      	ldr	r2, [pc, #60]	; (8009c44 <acc_confprogram_modify_runif_sensor.constprop.19+0x50>)
 8009c08:	0011      	movs	r1, r2
 8009c0a:	3160      	adds	r1, #96	; 0x60
 8009c0c:	7809      	ldrb	r1, [r1, #0]
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d00f      	beq.n	8009c32 <acc_confprogram_modify_runif_sensor.constprop.19+0x3e>
 8009c12:	431c      	orrs	r4, r3
 8009c14:	2903      	cmp	r1, #3
 8009c16:	d906      	bls.n	8009c26 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009c1c:	002b      	movs	r3, r5
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	; (8009c48 <acc_confprogram_modify_runif_sensor.constprop.19+0x54>)
 8009c20:	490a      	ldr	r1, [pc, #40]	; (8009c4c <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009c22:	2004      	movs	r0, #4
 8009c24:	47b8      	blx	r7
 8009c26:	0029      	movs	r1, r5
 8009c28:	0030      	movs	r0, r6
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	f7ff ff82 	bl	8009b34 <acc_sensor_r2_conf_write_instr>
 8009c30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009c32:	2903      	cmp	r1, #3
 8009c34:	d9f7      	bls.n	8009c26 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009c36:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009c38:	002b      	movs	r3, r5
 8009c3a:	4a05      	ldr	r2, [pc, #20]	; (8009c50 <acc_confprogram_modify_runif_sensor.constprop.19+0x5c>)
 8009c3c:	4903      	ldr	r1, [pc, #12]	; (8009c4c <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009c3e:	2004      	movs	r0, #4
 8009c40:	47b8      	blx	r7
 8009c42:	e7f0      	b.n	8009c26 <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009c44:	200003c0 	.word	0x200003c0
 8009c48:	0801d7e2 	.word	0x0801d7e2
 8009c4c:	0801d15e 	.word	0x0801d15e
 8009c50:	0801d818 	.word	0x0801d818

08009c54 <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c54:	1d03      	adds	r3, r0, #4
 8009c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009c58:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c5a:	2b21      	cmp	r3, #33	; 0x21
 8009c5c:	d113      	bne.n	8009c86 <UART_TxISR_16BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c5e:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009c60:	0005      	movs	r5, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c62:	2680      	movs	r6, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c64:	336a      	adds	r3, #106	; 0x6a
 8009c66:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009c68:	3556      	adds	r5, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	d00b      	beq.n	8009c86 <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009c6e:	8829      	ldrh	r1, [r5, #0]
 8009c70:	6803      	ldr	r3, [r0, #0]
 8009c72:	2900      	cmp	r1, #0
 8009c74:	d108      	bne.n	8009c88 <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	490c      	ldr	r1, [pc, #48]	; (8009cac <UART_TxISR_16BIT_FIFOEN+0x58>)
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c7e:	2240      	movs	r2, #64	; 0x40
 8009c80:	6819      	ldr	r1, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	601a      	str	r2, [r3, #0]
}
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c88:	69d9      	ldr	r1, [r3, #28]
 8009c8a:	4231      	tst	r1, r6
 8009c8c:	d00a      	beq.n	8009ca4 <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c8e:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c90:	8821      	ldrh	r1, [r4, #0]
        huart->pTxBuffPtr += 2U;
 8009c92:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c94:	05c9      	lsls	r1, r1, #23
 8009c96:	0dc9      	lsrs	r1, r1, #23
 8009c98:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009c9a:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009c9c:	882b      	ldrh	r3, [r5, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	802b      	strh	r3, [r5, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009ca4:	3a01      	subs	r2, #1
 8009ca6:	b292      	uxth	r2, r2
 8009ca8:	e7df      	b.n	8009c6a <UART_TxISR_16BIT_FIFOEN+0x16>
 8009caa:	46c0      	nop			; (mov r8, r8)
 8009cac:	ff7fffff 	.word	0xff7fffff

08009cb0 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cb0:	1d03      	adds	r3, r0, #4
 8009cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009cb4:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cb6:	2b21      	cmp	r3, #33	; 0x21
 8009cb8:	d113      	bne.n	8009ce2 <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cba:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009cbc:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009cbe:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cc0:	336a      	adds	r3, #106	; 0x6a
 8009cc2:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009cc4:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	d00b      	beq.n	8009ce2 <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009cca:	8821      	ldrh	r1, [r4, #0]
 8009ccc:	6803      	ldr	r3, [r0, #0]
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d108      	bne.n	8009ce4 <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009cd2:	689a      	ldr	r2, [r3, #8]
 8009cd4:	490b      	ldr	r1, [pc, #44]	; (8009d04 <UART_TxISR_8BIT_FIFOEN+0x54>)
 8009cd6:	400a      	ands	r2, r1
 8009cd8:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cda:	2240      	movs	r2, #64	; 0x40
 8009cdc:	6819      	ldr	r1, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]
}
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009ce4:	69d9      	ldr	r1, [r3, #28]
 8009ce6:	4229      	tst	r1, r5
 8009ce8:	d008      	beq.n	8009cfc <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cea:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009cec:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8009cee:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cf0:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009cf2:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009cf4:	8823      	ldrh	r3, [r4, #0]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cfc:	3a01      	subs	r2, #1
 8009cfe:	b292      	uxth	r2, r2
 8009d00:	e7e1      	b.n	8009cc6 <UART_TxISR_8BIT_FIFOEN+0x16>
 8009d02:	46c0      	nop			; (mov r8, r8)
 8009d04:	ff7fffff 	.word	0xff7fffff

08009d08 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d08:	1d03      	adds	r3, r0, #4
 8009d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009d0c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d0e:	2b21      	cmp	r3, #33	; 0x21
 8009d10:	d10d      	bne.n	8009d2e <UART_TxISR_16BIT+0x26>
    if (huart->TxXferCount == 0U)
 8009d12:	0004      	movs	r4, r0
 8009d14:	3456      	adds	r4, #86	; 0x56
 8009d16:	8822      	ldrh	r2, [r4, #0]
 8009d18:	6803      	ldr	r3, [r0, #0]
 8009d1a:	2a00      	cmp	r2, #0
 8009d1c:	d108      	bne.n	8009d30 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	438a      	bics	r2, r1
 8009d24:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d26:	2240      	movs	r2, #64	; 0x40
 8009d28:	6819      	ldr	r1, [r3, #0]
 8009d2a:	430a      	orrs	r2, r1
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009d30:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d32:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 8009d34:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d36:	05d2      	lsls	r2, r2, #23
 8009d38:	0dd2      	lsrs	r2, r2, #23
 8009d3a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009d3c:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009d3e:	8823      	ldrh	r3, [r4, #0]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	8023      	strh	r3, [r4, #0]
 8009d46:	e7f2      	b.n	8009d2e <UART_TxISR_16BIT+0x26>

08009d48 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d48:	1d03      	adds	r3, r0, #4
 8009d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009d4c:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d4e:	2b21      	cmp	r3, #33	; 0x21
 8009d50:	d10d      	bne.n	8009d6e <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 8009d52:	0001      	movs	r1, r0
 8009d54:	3156      	adds	r1, #86	; 0x56
 8009d56:	880a      	ldrh	r2, [r1, #0]
 8009d58:	6803      	ldr	r3, [r0, #0]
 8009d5a:	2a00      	cmp	r2, #0
 8009d5c:	d108      	bne.n	8009d70 <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d5e:	2180      	movs	r1, #128	; 0x80
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	438a      	bics	r2, r1
 8009d64:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d66:	2240      	movs	r2, #64	; 0x40
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	601a      	str	r2, [r3, #0]
}
 8009d6e:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d70:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009d72:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8009d74:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009d76:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009d78:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009d7a:	880b      	ldrh	r3, [r1, #0]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	800b      	strh	r3, [r1, #0]
 8009d82:	e7f4      	b.n	8009d6e <UART_TxISR_8BIT+0x26>

08009d84 <UART_DMAAbortOnError.lto_priv.671>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d84:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009d86:	2200      	movs	r2, #0
 8009d88:	0019      	movs	r1, r3
  huart->TxXferCount = 0U;
 8009d8a:	3356      	adds	r3, #86	; 0x56
  huart->RxXferCount = 0U;
 8009d8c:	315e      	adds	r1, #94	; 0x5e
 8009d8e:	800a      	strh	r2, [r1, #0]
  huart->TxXferCount = 0U;
 8009d90:	801a      	strh	r2, [r3, #0]
}
 8009d92:	4770      	bx	lr

08009d94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d94:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8009d96:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d98:	07ca      	lsls	r2, r1, #31
 8009d9a:	d508      	bpl.n	8009dae <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d9c:	0003      	movs	r3, r0
 8009d9e:	3341      	adds	r3, #65	; 0x41
 8009da0:	781a      	ldrb	r2, [r3, #0]
 8009da2:	2328      	movs	r3, #40	; 0x28
 8009da4:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009da6:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009da8:	2a28      	cmp	r2, #40	; 0x28
 8009daa:	d000      	beq.n	8009dae <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dac:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009dae:	078a      	lsls	r2, r1, #30
 8009db0:	d508      	bpl.n	8009dc4 <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009db2:	0002      	movs	r2, r0
 8009db4:	2428      	movs	r4, #40	; 0x28
 8009db6:	3241      	adds	r2, #65	; 0x41
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	4022      	ands	r2, r4
 8009dbc:	42a2      	cmp	r2, r4
 8009dbe:	d10a      	bne.n	8009dd6 <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009dc0:	2244      	movs	r2, #68	; 0x44
 8009dc2:	4313      	orrs	r3, r2
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009dc4:	074a      	lsls	r2, r1, #29
 8009dc6:	d501      	bpl.n	8009dcc <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dc8:	22b8      	movs	r2, #184	; 0xb8
 8009dca:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009dcc:	6801      	ldr	r1, [r0, #0]
 8009dce:	680a      	ldr	r2, [r1, #0]
 8009dd0:	439a      	bics	r2, r3
 8009dd2:	600a      	str	r2, [r1, #0]
}
 8009dd4:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dd6:	22f4      	movs	r2, #244	; 0xf4
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	e7f3      	b.n	8009dc4 <I2C_Disable_IRQ+0x30>

08009ddc <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009ddc:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009dde:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009de0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009de2:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009de4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009de6:	3341      	adds	r3, #65	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009de8:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009dea:	781a      	ldrb	r2, [r3, #0]
 8009dec:	2a60      	cmp	r2, #96	; 0x60
 8009dee:	d101      	bne.n	8009df4 <I2C_DMAAbort+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 8009df0:	3a40      	subs	r2, #64	; 0x40
 8009df2:	701a      	strb	r2, [r3, #0]
}
 8009df4:	4770      	bx	lr

08009df6 <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	0792      	lsls	r2, r2, #30
 8009dfc:	d501      	bpl.n	8009e02 <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 8009dfe:	2200      	movs	r2, #0
 8009e00:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e02:	2201      	movs	r2, #1
 8009e04:	6999      	ldr	r1, [r3, #24]
 8009e06:	4211      	tst	r1, r2
 8009e08:	d102      	bne.n	8009e10 <I2C_Flush_TXDR+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e0a:	6999      	ldr	r1, [r3, #24]
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	619a      	str	r2, [r3, #24]
}
 8009e10:	4770      	bx	lr

08009e12 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e12:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <I2C_ITListenCplt+0x5a>)
{
 8009e14:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e16:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e18:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009e1a:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e1c:	6303      	str	r3, [r0, #48]	; 0x30
{
 8009e1e:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8009e20:	2020      	movs	r0, #32
 8009e22:	3241      	adds	r2, #65	; 0x41
 8009e24:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e26:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 8009e28:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e2a:	074b      	lsls	r3, r1, #29
 8009e2c:	d513      	bpl.n	8009e56 <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e34:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8009e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e38:	3301      	adds	r3, #1
 8009e3a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009e3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d009      	beq.n	8009e56 <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8009e42:	3b01      	subs	r3, #1
 8009e44:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009e46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e4e:	2304      	movs	r3, #4
 8009e50:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009e52:	4313      	orrs	r3, r2
 8009e54:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e56:	0020      	movs	r0, r4
 8009e58:	2107      	movs	r1, #7
 8009e5a:	f7ff ff9b 	bl	8009d94 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e5e:	2210      	movs	r2, #16
 8009e60:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2c);
 8009e62:	3440      	adds	r4, #64	; 0x40
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e64:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8009e66:	2300      	movs	r3, #0
 8009e68:	7023      	strb	r3, [r4, #0]
}
 8009e6a:	bd10      	pop	{r4, pc}
 8009e6c:	ffff0000 	.word	0xffff0000

08009e70 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e70:	0003      	movs	r3, r0
{
 8009e72:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e74:	2500      	movs	r5, #0
 8009e76:	3342      	adds	r3, #66	; 0x42
 8009e78:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	781a      	ldrb	r2, [r3, #0]
{
 8009e7e:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009e80:	2a29      	cmp	r2, #41	; 0x29
 8009e82:	d109      	bne.n	8009e98 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e84:	3a01      	subs	r2, #1
 8009e86:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e88:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e8a:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e8c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e8e:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e90:	f7ff ff80 	bl	8009d94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009e94:	7025      	strb	r5, [r4, #0]
}
 8009e96:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	2a2a      	cmp	r2, #42	; 0x2a
 8009e9c:	d1fb      	bne.n	8009e96 <I2C_ITSlaveSeqCplt+0x26>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e9e:	3a02      	subs	r2, #2
 8009ea0:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ea2:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009ea4:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ea6:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009ea8:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009eaa:	f7ff ff73 	bl	8009d94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009eae:	7025      	strb	r5, [r4, #0]
 8009eb0:	e7f1      	b.n	8009e96 <I2C_ITSlaveSeqCplt+0x26>

08009eb2 <DMA_CalcDMAMUXChannelBaseAndMask>:
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009eb2:	6803      	ldr	r3, [r0, #0]
{
 8009eb4:	b510      	push	{r4, lr}
 8009eb6:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009eb8:	b2d8      	uxtb	r0, r3
 8009eba:	2114      	movs	r1, #20
 8009ebc:	3808      	subs	r0, #8
 8009ebe:	f004 fe67 	bl	800eb90 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009ec2:	4a07      	ldr	r2, [pc, #28]	; (8009ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>)
 8009ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ec6:	4694      	mov	ip, r2
 8009ec8:	089b      	lsrs	r3, r3, #2
 8009eca:	4463      	add	r3, ip
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ed0:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x32>)
 8009ed2:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8009ed4:	231c      	movs	r3, #28
 8009ed6:	4018      	ands	r0, r3
 8009ed8:	3b1b      	subs	r3, #27
 8009eda:	4083      	lsls	r3, r0
 8009edc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8009ede:	bd10      	pop	{r4, pc}
 8009ee0:	10008200 	.word	0x10008200
 8009ee4:	40020880 	.word	0x40020880

08009ee8 <HAL_DMA_Init.part.0.constprop.139>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8009ee8:	b570      	push	{r4, r5, r6, lr}
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009eea:	4b23      	ldr	r3, [pc, #140]	; (8009f78 <HAL_DMA_Init.part.0.constprop.139+0x90>)
 8009eec:	6805      	ldr	r5, [r0, #0]
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8009eee:	0004      	movs	r4, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009ef0:	2114      	movs	r1, #20
 8009ef2:	18e8      	adds	r0, r5, r3
 8009ef4:	f004 fe4c 	bl	800eb90 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ef8:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009efa:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8009efc:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009efe:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f00:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	4a1d      	ldr	r2, [pc, #116]	; (8009f7c <HAL_DMA_Init.part.0.constprop.139+0x94>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009f06:	68a1      	ldr	r1, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009f08:	4013      	ands	r3, r2
 8009f0a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009f0c:	2380      	movs	r3, #128	; 0x80
 8009f0e:	682a      	ldr	r2, [r5, #0]
 8009f10:	430b      	orrs	r3, r1
 8009f12:	4313      	orrs	r3, r2
 8009f14:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009f16:	0020      	movs	r0, r4
 8009f18:	f7ff ffcb 	bl	8009eb2 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009f1c:	2380      	movs	r3, #128	; 0x80
 8009f1e:	68a2      	ldr	r2, [r4, #8]
 8009f20:	01db      	lsls	r3, r3, #7
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d101      	bne.n	8009f2a <HAL_DMA_Init.part.0.constprop.139+0x42>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009f26:	2300      	movs	r3, #0
 8009f28:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009f2a:	6862      	ldr	r2, [r4, #4]
 8009f2c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009f2e:	b2d3      	uxtb	r3, r2
 8009f30:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f32:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009f34:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009f36:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f38:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009f3a:	2a03      	cmp	r2, #3
 8009f3c:	d816      	bhi.n	8009f6c <HAL_DMA_Init.part.0.constprop.139+0x84>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f3e:	4a10      	ldr	r2, [pc, #64]	; (8009f80 <HAL_DMA_Init.part.0.constprop.139+0x98>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f40:	4810      	ldr	r0, [pc, #64]	; (8009f84 <HAL_DMA_Init.part.0.constprop.139+0x9c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f42:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009f44:	2203      	movs	r2, #3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	4013      	ands	r3, r2
 8009f4a:	3a02      	subs	r2, #2
 8009f4c:	409a      	lsls	r2, r3
 8009f4e:	65a2      	str	r2, [r4, #88]	; 0x58
 8009f50:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009f52:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f54:	0089      	lsls	r1, r1, #2
 8009f56:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f58:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009f5a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f5c:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f5e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8009f60:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f62:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8009f64:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8009f66:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8009f68:	77e0      	strb	r0, [r4, #31]
}
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8009f70:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009f72:	65a3      	str	r3, [r4, #88]	; 0x58
 8009f74:	e7f3      	b.n	8009f5e <HAL_DMA_Init.part.0.constprop.139+0x76>
 8009f76:	46c0      	nop			; (mov r8, r8)
 8009f78:	bffdfff8 	.word	0xbffdfff8
 8009f7c:	ffff800f 	.word	0xffff800f
 8009f80:	1000823f 	.word	0x1000823f
 8009f84:	40020940 	.word	0x40020940

08009f88 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009f88:	4b06      	ldr	r3, [pc, #24]	; (8009fa4 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009f8a:	4a07      	ldr	r2, [pc, #28]	; (8009fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f8c:	689b      	ldr	r3, [r3, #8]
 8009f8e:	045b      	lsls	r3, r3, #17
 8009f90:	0f5b      	lsrs	r3, r3, #29
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	589b      	ldr	r3, [r3, r2]
 8009f96:	221f      	movs	r2, #31
 8009f98:	4013      	ands	r3, r2
 8009f9a:	4a04      	ldr	r2, [pc, #16]	; (8009fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f9c:	6810      	ldr	r0, [r2, #0]
 8009f9e:	40d8      	lsrs	r0, r3
}
 8009fa0:	4770      	bx	lr
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	40021000 	.word	0x40021000
 8009fa8:	08018d9c 	.word	0x08018d9c
 8009fac:	20000000 	.word	0x20000000

08009fb0 <validate.lto_priv.165>:
 8009fb0:	6983      	ldr	r3, [r0, #24]
 8009fb2:	b510      	push	{r4, lr}
 8009fb4:	0004      	movs	r4, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <validate.lto_priv.165+0x20>
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <validate.lto_priv.165+0x54>)
 8009fbc:	001a      	movs	r2, r3
 8009fbe:	3260      	adds	r2, #96	; 0x60
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	d004      	beq.n	8009fd0 <validate.lto_priv.165+0x20>
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc8:	4a0f      	ldr	r2, [pc, #60]	; (800a008 <validate.lto_priv.165+0x58>)
 8009fca:	4910      	ldr	r1, [pc, #64]	; (800a00c <validate.lto_priv.165+0x5c>)
 8009fcc:	2001      	movs	r0, #1
 8009fce:	4798      	blx	r3
 8009fd0:	69e3      	ldr	r3, [r4, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <validate.lto_priv.165+0x3c>
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <validate.lto_priv.165+0x54>)
 8009fd8:	001a      	movs	r2, r3
 8009fda:	3260      	adds	r2, #96	; 0x60
 8009fdc:	7812      	ldrb	r2, [r2, #0]
 8009fde:	2a00      	cmp	r2, #0
 8009fe0:	d004      	beq.n	8009fec <validate.lto_priv.165+0x3c>
 8009fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fe4:	4a0a      	ldr	r2, [pc, #40]	; (800a010 <validate.lto_priv.165+0x60>)
 8009fe6:	4909      	ldr	r1, [pc, #36]	; (800a00c <validate.lto_priv.165+0x5c>)
 8009fe8:	2001      	movs	r0, #1
 8009fea:	4798      	blx	r3
 8009fec:	6963      	ldr	r3, [r4, #20]
 8009fee:	2001      	movs	r0, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <validate.lto_priv.165+0x52>
 8009ff4:	4b03      	ldr	r3, [pc, #12]	; (800a004 <validate.lto_priv.165+0x54>)
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ffa:	4a06      	ldr	r2, [pc, #24]	; (800a014 <validate.lto_priv.165+0x64>)
 8009ffc:	4903      	ldr	r1, [pc, #12]	; (800a00c <validate.lto_priv.165+0x5c>)
 8009ffe:	4798      	blx	r3
 800a000:	2000      	movs	r0, #0
 800a002:	bd10      	pop	{r4, pc}
 800a004:	200003c0 	.word	0x200003c0
 800a008:	0801c5b8 	.word	0x0801c5b8
 800a00c:	0801d847 	.word	0x0801d847
 800a010:	0801c5eb 	.word	0x0801c5eb
 800a014:	0801d85d 	.word	0x0801d85d

0800a018 <reset.lto_priv.170.lto_priv.631>:
 800a018:	4770      	bx	lr

0800a01a <consume.lto_priv.630>:
 800a01a:	b510      	push	{r4, lr}
 800a01c:	0004      	movs	r4, r0
 800a01e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a020:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a024:	6900      	ldr	r0, [r0, #16]
 800a026:	4798      	blx	r3
 800a028:	2200      	movs	r2, #0
 800a02a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a02c:	615a      	str	r2, [r3, #20]
 800a02e:	bd10      	pop	{r4, pc}

0800a030 <validate.lto_priv.164>:
 800a030:	6942      	ldr	r2, [r0, #20]
 800a032:	6903      	ldr	r3, [r0, #16]
 800a034:	b510      	push	{r4, lr}
 800a036:	4293      	cmp	r3, r2
 800a038:	d107      	bne.n	800a04a <validate.lto_priv.164+0x1a>
 800a03a:	4b11      	ldr	r3, [pc, #68]	; (800a080 <validate.lto_priv.164+0x50>)
 800a03c:	2000      	movs	r0, #0
 800a03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a040:	4a10      	ldr	r2, [pc, #64]	; (800a084 <validate.lto_priv.164+0x54>)
 800a042:	4911      	ldr	r1, [pc, #68]	; (800a088 <validate.lto_priv.164+0x58>)
 800a044:	4798      	blx	r3
 800a046:	2000      	movs	r0, #0
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	6984      	ldr	r4, [r0, #24]
 800a04c:	2c00      	cmp	r4, #0
 800a04e:	d007      	beq.n	800a060 <validate.lto_priv.164+0x30>
 800a050:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <validate.lto_priv.164+0x50>)
 800a052:	2000      	movs	r0, #0
 800a054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a056:	4a0d      	ldr	r2, [pc, #52]	; (800a08c <validate.lto_priv.164+0x5c>)
 800a058:	490b      	ldr	r1, [pc, #44]	; (800a088 <validate.lto_priv.164+0x58>)
 800a05a:	4798      	blx	r3
 800a05c:	2000      	movs	r0, #0
 800a05e:	e7f3      	b.n	800a048 <validate.lto_priv.164+0x18>
 800a060:	69c3      	ldr	r3, [r0, #28]
 800a062:	3304      	adds	r3, #4
 800a064:	429a      	cmp	r2, r3
 800a066:	d007      	beq.n	800a078 <validate.lto_priv.164+0x48>
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <validate.lto_priv.164+0x50>)
 800a06a:	0020      	movs	r0, r4
 800a06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a06e:	4a08      	ldr	r2, [pc, #32]	; (800a090 <validate.lto_priv.164+0x60>)
 800a070:	4905      	ldr	r1, [pc, #20]	; (800a088 <validate.lto_priv.164+0x58>)
 800a072:	4798      	blx	r3
 800a074:	0020      	movs	r0, r4
 800a076:	e7e7      	b.n	800a048 <validate.lto_priv.164+0x18>
 800a078:	6800      	ldr	r0, [r0, #0]
 800a07a:	6883      	ldr	r3, [r0, #8]
 800a07c:	4798      	blx	r3
 800a07e:	e7e3      	b.n	800a048 <validate.lto_priv.164+0x18>
 800a080:	200003c0 	.word	0x200003c0
 800a084:	0801d884 	.word	0x0801d884
 800a088:	0801d8b0 	.word	0x0801d8b0
 800a08c:	0801d8d4 	.word	0x0801d8d4
 800a090:	0801d8f4 	.word	0x0801d8f4

0800a094 <reset.lto_priv.169>:
 800a094:	2301      	movs	r3, #1
 800a096:	b510      	push	{r4, lr}
 800a098:	69c2      	ldr	r2, [r0, #28]
 800a09a:	6800      	ldr	r0, [r0, #0]
 800a09c:	7013      	strb	r3, [r2, #0]
 800a09e:	68c3      	ldr	r3, [r0, #12]
 800a0a0:	4798      	blx	r3
 800a0a2:	bd10      	pop	{r4, pc}

0800a0a4 <filter_q3_12_complex.lto_priv.656>:
 800a0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a6:	46c6      	mov	lr, r8
 800a0a8:	000f      	movs	r7, r1
 800a0aa:	218b      	movs	r1, #139	; 0x8b
 800a0ac:	b500      	push	{lr}
 800a0ae:	05c9      	lsls	r1, r1, #23
 800a0b0:	0006      	movs	r6, r0
 800a0b2:	1c18      	adds	r0, r3, #0
 800a0b4:	1c1c      	adds	r4, r3, #0
 800a0b6:	0895      	lsrs	r5, r2, #2
 800a0b8:	f004 fa38 	bl	800e52c <__aeabi_fmul>
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4680      	mov	r8, r0
 800a0c0:	1c20      	adds	r0, r4, #0
 800a0c2:	f004 ff49 	bl	800ef58 <__aeabi_fcmpge>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	d10f      	bne.n	800a0ea <filter_q3_12_complex.lto_priv.656+0x46>
 800a0ca:	21bf      	movs	r1, #191	; 0xbf
 800a0cc:	0609      	lsls	r1, r1, #24
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f003 ff80 	bl	800dfd4 <__aeabi_fadd>
 800a0d4:	f005 f920 	bl	800f318 <__aeabi_f2iz>
 800a0d8:	b204      	sxth	r4, r0
 800a0da:	0030      	movs	r0, r6
 800a0dc:	00aa      	lsls	r2, r5, #2
 800a0de:	18ba      	adds	r2, r7, r2
 800a0e0:	42ba      	cmp	r2, r7
 800a0e2:	d105      	bne.n	800a0f0 <filter_q3_12_complex.lto_priv.656+0x4c>
 800a0e4:	bc04      	pop	{r2}
 800a0e6:	4690      	mov	r8, r2
 800a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ea:	21fc      	movs	r1, #252	; 0xfc
 800a0ec:	0589      	lsls	r1, r1, #22
 800a0ee:	e7ee      	b.n	800a0ce <filter_q3_12_complex.lto_priv.656+0x2a>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	5efe      	ldrsh	r6, [r7, r3]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	5ec5      	ldrsh	r5, [r0, r3]
 800a0f8:	1bad      	subs	r5, r5, r6
 800a0fa:	4365      	muls	r5, r4
 800a0fc:	17eb      	asrs	r3, r5, #31
 800a0fe:	051b      	lsls	r3, r3, #20
 800a100:	0d1b      	lsrs	r3, r3, #20
 800a102:	195b      	adds	r3, r3, r5
 800a104:	131b      	asrs	r3, r3, #12
 800a106:	199b      	adds	r3, r3, r6
 800a108:	803b      	strh	r3, [r7, #0]
 800a10a:	2302      	movs	r3, #2
 800a10c:	5ec5      	ldrsh	r5, [r0, r3]
 800a10e:	2302      	movs	r3, #2
 800a110:	5efe      	ldrsh	r6, [r7, r3]
 800a112:	3004      	adds	r0, #4
 800a114:	1bad      	subs	r5, r5, r6
 800a116:	4365      	muls	r5, r4
 800a118:	17eb      	asrs	r3, r5, #31
 800a11a:	051b      	lsls	r3, r3, #20
 800a11c:	0d1b      	lsrs	r3, r3, #20
 800a11e:	195b      	adds	r3, r3, r5
 800a120:	131b      	asrs	r3, r3, #12
 800a122:	199b      	adds	r3, r3, r6
 800a124:	807b      	strh	r3, [r7, #2]
 800a126:	3704      	adds	r7, #4
 800a128:	e7da      	b.n	800a0e0 <filter_q3_12_complex.lto_priv.656+0x3c>

0800a12a <validate.lto_priv.163>:
 800a12a:	6983      	ldr	r3, [r0, #24]
 800a12c:	b510      	push	{r4, lr}
 800a12e:	0004      	movs	r4, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00a      	beq.n	800a14a <validate.lto_priv.163+0x20>
 800a134:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <validate.lto_priv.163+0x46>)
 800a136:	001a      	movs	r2, r3
 800a138:	3260      	adds	r2, #96	; 0x60
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d004      	beq.n	800a14a <validate.lto_priv.163+0x20>
 800a140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a142:	4a0c      	ldr	r2, [pc, #48]	; (800a174 <validate.lto_priv.163+0x4a>)
 800a144:	490c      	ldr	r1, [pc, #48]	; (800a178 <validate.lto_priv.163+0x4e>)
 800a146:	2001      	movs	r0, #1
 800a148:	4798      	blx	r3
 800a14a:	69e3      	ldr	r3, [r4, #28]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00a      	beq.n	800a166 <validate.lto_priv.163+0x3c>
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <validate.lto_priv.163+0x46>)
 800a152:	001a      	movs	r2, r3
 800a154:	3260      	adds	r2, #96	; 0x60
 800a156:	7812      	ldrb	r2, [r2, #0]
 800a158:	2a00      	cmp	r2, #0
 800a15a:	d004      	beq.n	800a166 <validate.lto_priv.163+0x3c>
 800a15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a15e:	4a07      	ldr	r2, [pc, #28]	; (800a17c <validate.lto_priv.163+0x52>)
 800a160:	4905      	ldr	r1, [pc, #20]	; (800a178 <validate.lto_priv.163+0x4e>)
 800a162:	2001      	movs	r0, #1
 800a164:	4798      	blx	r3
 800a166:	6820      	ldr	r0, [r4, #0]
 800a168:	6883      	ldr	r3, [r0, #8]
 800a16a:	4798      	blx	r3
 800a16c:	bd10      	pop	{r4, pc}
 800a16e:	46c0      	nop			; (mov r8, r8)
 800a170:	200003c0 	.word	0x200003c0
 800a174:	0801c5b8 	.word	0x0801c5b8
 800a178:	0801d91b 	.word	0x0801d91b
 800a17c:	0801c5eb 	.word	0x0801c5eb

0800a180 <event.lto_priv.175>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	0004      	movs	r4, r0
 800a184:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a186:	6945      	ldr	r5, [r0, #20]
 800a188:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a18a:	6819      	ldr	r1, [r3, #0]
 800a18c:	6900      	ldr	r0, [r0, #16]
 800a18e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a190:	4798      	blx	r3
 800a192:	7028      	strb	r0, [r5, #0]
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	6843      	ldr	r3, [r0, #4]
 800a198:	4798      	blx	r3
 800a19a:	bd70      	pop	{r4, r5, r6, pc}

0800a19c <saturation_check_i16.lto_priv.634>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	0005      	movs	r5, r0
 800a1a0:	000c      	movs	r4, r1
 800a1a2:	4813      	ldr	r0, [pc, #76]	; (800a1f0 <saturation_check_i16.lto_priv.634+0x54>)
 800a1a4:	1c11      	adds	r1, r2, #0
 800a1a6:	f004 faf3 	bl	800e790 <__aeabi_fsub>
 800a1aa:	4911      	ldr	r1, [pc, #68]	; (800a1f0 <saturation_check_i16.lto_priv.634+0x54>)
 800a1ac:	f004 f8ac 	bl	800e308 <__aeabi_fdiv>
 800a1b0:	21c7      	movs	r1, #199	; 0xc7
 800a1b2:	0609      	lsls	r1, r1, #24
 800a1b4:	1c07      	adds	r7, r0, #0
 800a1b6:	f004 f9b9 	bl	800e52c <__aeabi_fmul>
 800a1ba:	f005 f8ad 	bl	800f318 <__aeabi_f2iz>
 800a1be:	490d      	ldr	r1, [pc, #52]	; (800a1f4 <saturation_check_i16.lto_priv.634+0x58>)
 800a1c0:	b206      	sxth	r6, r0
 800a1c2:	1c38      	adds	r0, r7, #0
 800a1c4:	f004 f9b2 	bl	800e52c <__aeabi_fmul>
 800a1c8:	f005 f8a6 	bl	800f318 <__aeabi_f2iz>
 800a1cc:	0864      	lsrs	r4, r4, #1
 800a1ce:	0064      	lsls	r4, r4, #1
 800a1d0:	b200      	sxth	r0, r0
 800a1d2:	192c      	adds	r4, r5, r4
 800a1d4:	42a5      	cmp	r5, r4
 800a1d6:	d101      	bne.n	800a1dc <saturation_check_i16.lto_priv.634+0x40>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1dc:	2300      	movs	r3, #0
 800a1de:	5eea      	ldrsh	r2, [r5, r3]
 800a1e0:	4290      	cmp	r0, r2
 800a1e2:	dd02      	ble.n	800a1ea <saturation_check_i16.lto_priv.634+0x4e>
 800a1e4:	3502      	adds	r5, #2
 800a1e6:	4296      	cmp	r6, r2
 800a1e8:	dbf4      	blt.n	800a1d4 <saturation_check_i16.lto_priv.634+0x38>
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	e7f5      	b.n	800a1da <saturation_check_i16.lto_priv.634+0x3e>
 800a1ee:	46c0      	nop			; (mov r8, r8)
 800a1f0:	42c80000 	.word	0x42c80000
 800a1f4:	46fffe00 	.word	0x46fffe00

0800a1f8 <validate.lto_priv.162>:
 800a1f8:	6903      	ldr	r3, [r0, #16]
 800a1fa:	6942      	ldr	r2, [r0, #20]
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	0004      	movs	r4, r0
 800a200:	4293      	cmp	r3, r2
 800a202:	d007      	beq.n	800a214 <validate.lto_priv.162+0x1c>
 800a204:	4b13      	ldr	r3, [pc, #76]	; (800a254 <validate.lto_priv.162+0x5c>)
 800a206:	2000      	movs	r0, #0
 800a208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a20a:	4a13      	ldr	r2, [pc, #76]	; (800a258 <validate.lto_priv.162+0x60>)
 800a20c:	4913      	ldr	r1, [pc, #76]	; (800a25c <validate.lto_priv.162+0x64>)
 800a20e:	4798      	blx	r3
 800a210:	2000      	movs	r0, #0
 800a212:	bd10      	pop	{r4, pc}
 800a214:	6983      	ldr	r3, [r0, #24]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <validate.lto_priv.162+0x38>
 800a21a:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <validate.lto_priv.162+0x5c>)
 800a21c:	001a      	movs	r2, r3
 800a21e:	3260      	adds	r2, #96	; 0x60
 800a220:	7812      	ldrb	r2, [r2, #0]
 800a222:	2a00      	cmp	r2, #0
 800a224:	d004      	beq.n	800a230 <validate.lto_priv.162+0x38>
 800a226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a228:	4a0d      	ldr	r2, [pc, #52]	; (800a260 <validate.lto_priv.162+0x68>)
 800a22a:	490c      	ldr	r1, [pc, #48]	; (800a25c <validate.lto_priv.162+0x64>)
 800a22c:	2001      	movs	r0, #1
 800a22e:	4798      	blx	r3
 800a230:	69e3      	ldr	r3, [r4, #28]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00a      	beq.n	800a24c <validate.lto_priv.162+0x54>
 800a236:	4b07      	ldr	r3, [pc, #28]	; (800a254 <validate.lto_priv.162+0x5c>)
 800a238:	001a      	movs	r2, r3
 800a23a:	3260      	adds	r2, #96	; 0x60
 800a23c:	7812      	ldrb	r2, [r2, #0]
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d004      	beq.n	800a24c <validate.lto_priv.162+0x54>
 800a242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a244:	4a07      	ldr	r2, [pc, #28]	; (800a264 <validate.lto_priv.162+0x6c>)
 800a246:	4905      	ldr	r1, [pc, #20]	; (800a25c <validate.lto_priv.162+0x64>)
 800a248:	2001      	movs	r0, #1
 800a24a:	4798      	blx	r3
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	6883      	ldr	r3, [r0, #8]
 800a250:	4798      	blx	r3
 800a252:	e7de      	b.n	800a212 <validate.lto_priv.162+0x1a>
 800a254:	200003c0 	.word	0x200003c0
 800a258:	0801c5fa 	.word	0x0801c5fa
 800a25c:	0801d934 	.word	0x0801d934
 800a260:	0801c5b8 	.word	0x0801c5b8
 800a264:	0801c5eb 	.word	0x0801c5eb

0800a268 <event.lto_priv.174.lto_priv.660>:
 800a268:	b510      	push	{r4, lr}
 800a26a:	0004      	movs	r4, r0
 800a26c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a26e:	4798      	blx	r3
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	6843      	ldr	r3, [r0, #4]
 800a274:	4798      	blx	r3
 800a276:	bd10      	pop	{r4, pc}

0800a278 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a27a:	2308      	movs	r3, #8
{
 800a27c:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a27e:	4698      	mov	r8, r3
 800a280:	4480      	add	r8, r0
 800a282:	4643      	mov	r3, r8
{
 800a284:	46de      	mov	lr, fp
 800a286:	4657      	mov	r7, sl
 800a288:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a28a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a28c:	b5e0      	push	{r5, r6, r7, lr}
 800a28e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a290:	2b22      	cmp	r3, #34	; 0x22
 800a292:	d149      	bne.n	800a328 <UART_RxISR_16BIT_FIFOEN+0xb0>
  uint16_t  uhMask = huart->Mask;
 800a294:	0003      	movs	r3, r0
 800a296:	3360      	adds	r3, #96	; 0x60
 800a298:	881b      	ldrh	r3, [r3, #0]
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a29a:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a29c:	4699      	mov	r9, r3
      huart->RxXferCount--;

      if (huart->RxXferCount == 0U)
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a29e:	4b25      	ldr	r3, [pc, #148]	; (800a334 <UART_RxISR_16BIT_FIFOEN+0xbc>)
 800a2a0:	0006      	movs	r6, r0
 800a2a2:	469a      	mov	sl, r3

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2a4:	3322      	adds	r3, #34	; 0x22
 800a2a6:	33ff      	adds	r3, #255	; 0xff
 800a2a8:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a2aa:	3768      	adds	r7, #104	; 0x68
 800a2ac:	883d      	ldrh	r5, [r7, #0]
 800a2ae:	365e      	adds	r6, #94	; 0x5e
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	d117      	bne.n	800a2e4 <UART_RxISR_16BIT_FIFOEN+0x6c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a2b4:	8833      	ldrh	r3, [r6, #0]
 800a2b6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00d      	beq.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a2bc:	883a      	ldrh	r2, [r7, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d90a      	bls.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x60>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	491c      	ldr	r1, [pc, #112]	; (800a338 <UART_RxISR_16BIT_FIFOEN+0xc0>)
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	400a      	ands	r2, r1
 800a2ca:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a2cc:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <UART_RxISR_16BIT_FIFOEN+0xc4>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2ce:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800a2d0:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2d8:	bc3c      	pop	{r2, r3, r4, r5}
 800a2da:	4690      	mov	r8, r2
 800a2dc:	4699      	mov	r9, r3
 800a2de:	46a2      	mov	sl, r4
 800a2e0:	46ab      	mov	fp, r5
 800a2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2e4:	4648      	mov	r0, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2e6:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2e8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2ec:	4001      	ands	r1, r0
 800a2ee:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a2f4:	8832      	ldrh	r2, [r6, #0]
 800a2f6:	3a01      	subs	r2, #1
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	8032      	strh	r2, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a2fc:	8832      	ldrh	r2, [r6, #0]
 800a2fe:	b292      	uxth	r2, r2
 800a300:	2a00      	cmp	r2, #0
 800a302:	d10e      	bne.n	800a322 <UART_RxISR_16BIT_FIFOEN+0xaa>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a304:	4650      	mov	r0, sl
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	4001      	ands	r1, r0
 800a30a:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a30c:	6899      	ldr	r1, [r3, #8]
 800a30e:	480c      	ldr	r0, [pc, #48]	; (800a340 <UART_RxISR_16BIT_FIFOEN+0xc8>)
 800a310:	4001      	ands	r1, r0
 800a312:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a314:	4643      	mov	r3, r8
 800a316:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a318:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a31a:	67d9      	str	r1, [r3, #124]	; 0x7c
        huart->RxISR = NULL;
 800a31c:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a31e:	f7f9 fb99 	bl	8003a54 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a322:	3d01      	subs	r5, #1
 800a324:	b2ad      	uxth	r5, r5
 800a326:	e7c3      	b.n	800a2b0 <UART_RxISR_16BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a328:	2308      	movs	r3, #8
 800a32a:	6802      	ldr	r2, [r0, #0]
 800a32c:	6991      	ldr	r1, [r2, #24]
 800a32e:	430b      	orrs	r3, r1
 800a330:	6193      	str	r3, [r2, #24]
 800a332:	e7d1      	b.n	800a2d8 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a334:	fffffeff 	.word	0xfffffeff
 800a338:	efffffff 	.word	0xefffffff
 800a33c:	0800a415 	.word	0x0800a415
 800a340:	effffffe 	.word	0xeffffffe

0800a344 <UART_RxISR_8BIT_FIFOEN>:
{
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a346:	2308      	movs	r3, #8
{
 800a348:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a34a:	4698      	mov	r8, r3
 800a34c:	4480      	add	r8, r0
 800a34e:	4643      	mov	r3, r8
{
 800a350:	46de      	mov	lr, fp
 800a352:	4657      	mov	r7, sl
 800a354:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a358:	b5e0      	push	{r5, r6, r7, lr}
 800a35a:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a35c:	2b22      	cmp	r3, #34	; 0x22
 800a35e:	d14b      	bne.n	800a3f8 <UART_RxISR_8BIT_FIFOEN+0xb4>
  uint16_t  uhMask = huart->Mask;
 800a360:	0003      	movs	r3, r0
 800a362:	3360      	adds	r3, #96	; 0x60
 800a364:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a366:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a368:	4699      	mov	r9, r3
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a36a:	4b26      	ldr	r3, [pc, #152]	; (800a404 <UART_RxISR_8BIT_FIFOEN+0xc0>)
 800a36c:	0006      	movs	r6, r0
 800a36e:	469a      	mov	sl, r3
        huart->RxState = HAL_UART_STATE_READY;
 800a370:	3322      	adds	r3, #34	; 0x22
 800a372:	33ff      	adds	r3, #255	; 0xff
 800a374:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a376:	3768      	adds	r7, #104	; 0x68
 800a378:	883d      	ldrh	r5, [r7, #0]
 800a37a:	365e      	adds	r6, #94	; 0x5e
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	d117      	bne.n	800a3b0 <UART_RxISR_8BIT_FIFOEN+0x6c>
    rxdatacount = huart->RxXferCount;
 800a380:	8833      	ldrh	r3, [r6, #0]
 800a382:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00d      	beq.n	800a3a4 <UART_RxISR_8BIT_FIFOEN+0x60>
 800a388:	883a      	ldrh	r2, [r7, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d90a      	bls.n	800a3a4 <UART_RxISR_8BIT_FIFOEN+0x60>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a38e:	6823      	ldr	r3, [r4, #0]
 800a390:	491d      	ldr	r1, [pc, #116]	; (800a408 <UART_RxISR_8BIT_FIFOEN+0xc4>)
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	400a      	ands	r2, r1
 800a396:	609a      	str	r2, [r3, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800a398:	4a1c      	ldr	r2, [pc, #112]	; (800a40c <UART_RxISR_8BIT_FIFOEN+0xc8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a39a:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800a39c:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a39e:	2220      	movs	r2, #32
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bc3c      	pop	{r2, r3, r4, r5}
 800a3a6:	4690      	mov	r8, r2
 800a3a8:	4699      	mov	r9, r3
 800a3aa:	46a2      	mov	sl, r4
 800a3ac:	46ab      	mov	fp, r5
 800a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3b0:	464a      	mov	r2, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a3ba:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800a3bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3be:	3301      	adds	r3, #1
 800a3c0:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a3c2:	8833      	ldrh	r3, [r6, #0]
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	8033      	strh	r3, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a3ca:	8833      	ldrh	r3, [r6, #0]
 800a3cc:	b29b      	uxth	r3, r3
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10f      	bne.n	800a3f2 <UART_RxISR_8BIT_FIFOEN+0xae>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	6822      	ldr	r2, [r4, #0]
 800a3d6:	6811      	ldr	r1, [r2, #0]
 800a3d8:	4001      	ands	r1, r0
 800a3da:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3dc:	6891      	ldr	r1, [r2, #8]
 800a3de:	480c      	ldr	r0, [pc, #48]	; (800a410 <UART_RxISR_8BIT_FIFOEN+0xcc>)
 800a3e0:	4001      	ands	r1, r0
 800a3e2:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a3e8:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a3ea:	67d1      	str	r1, [r2, #124]	; 0x7c
        huart->RxISR = NULL;
 800a3ec:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a3ee:	f7f9 fb31 	bl	8003a54 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a3f2:	3d01      	subs	r5, #1
 800a3f4:	b2ad      	uxth	r5, r5
 800a3f6:	e7c1      	b.n	800a37c <UART_RxISR_8BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	6802      	ldr	r2, [r0, #0]
 800a3fc:	6991      	ldr	r1, [r2, #24]
 800a3fe:	430b      	orrs	r3, r1
 800a400:	6193      	str	r3, [r2, #24]
 800a402:	e7cf      	b.n	800a3a4 <UART_RxISR_8BIT_FIFOEN+0x60>
 800a404:	fffffeff 	.word	0xfffffeff
 800a408:	efffffff 	.word	0xefffffff
 800a40c:	0800a475 	.word	0x0800a475
 800a410:	effffffe 	.word	0xeffffffe

0800a414 <UART_RxISR_16BIT>:
{
 800a414:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a416:	0004      	movs	r4, r0
 800a418:	3408      	adds	r4, #8
 800a41a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a41c:	6803      	ldr	r3, [r0, #0]
 800a41e:	2a22      	cmp	r2, #34	; 0x22
 800a420:	d121      	bne.n	800a466 <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800a422:	0005      	movs	r5, r0
 800a424:	3560      	adds	r5, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a426:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800a428:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a42a:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800a42c:	4029      	ands	r1, r5
 800a42e:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 800a430:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800a432:	3202      	adds	r2, #2
 800a434:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a436:	315e      	adds	r1, #94	; 0x5e
 800a438:	880a      	ldrh	r2, [r1, #0]
 800a43a:	3a01      	subs	r2, #1
 800a43c:	b292      	uxth	r2, r2
 800a43e:	800a      	strh	r2, [r1, #0]
    if (huart->RxXferCount == 0U)
 800a440:	880a      	ldrh	r2, [r1, #0]
 800a442:	b292      	uxth	r2, r2
 800a444:	2a00      	cmp	r2, #0
 800a446:	d10d      	bne.n	800a464 <UART_RxISR_16BIT+0x50>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a448:	6819      	ldr	r1, [r3, #0]
 800a44a:	4d09      	ldr	r5, [pc, #36]	; (800a470 <UART_RxISR_16BIT+0x5c>)
 800a44c:	4029      	ands	r1, r5
 800a44e:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	6899      	ldr	r1, [r3, #8]
 800a452:	3523      	adds	r5, #35	; 0x23
 800a454:	35ff      	adds	r5, #255	; 0xff
 800a456:	43a9      	bics	r1, r5
 800a458:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a45a:	2320      	movs	r3, #32
 800a45c:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a45e:	66c2      	str	r2, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a460:	f7f9 faf8 	bl	8003a54 <HAL_UART_RxCpltCallback>
}
 800a464:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a466:	2208      	movs	r2, #8
 800a468:	6999      	ldr	r1, [r3, #24]
 800a46a:	430a      	orrs	r2, r1
 800a46c:	619a      	str	r2, [r3, #24]
 800a46e:	e7f9      	b.n	800a464 <UART_RxISR_16BIT+0x50>
 800a470:	fffffedf 	.word	0xfffffedf

0800a474 <UART_RxISR_8BIT>:
{
 800a474:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a476:	0004      	movs	r4, r0
 800a478:	3408      	adds	r4, #8
 800a47a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a47c:	6803      	ldr	r3, [r0, #0]
 800a47e:	2a22      	cmp	r2, #34	; 0x22
 800a480:	d123      	bne.n	800a4ca <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800a482:	0002      	movs	r2, r0
 800a484:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a488:	8812      	ldrh	r2, [r2, #0]
 800a48a:	4013      	ands	r3, r2
 800a48c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a48e:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800a490:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800a492:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a494:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 800a496:	3301      	adds	r3, #1
 800a498:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a49a:	8813      	ldrh	r3, [r2, #0]
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 800a4a2:	8813      	ldrh	r3, [r2, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10e      	bne.n	800a4c8 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a4aa:	6802      	ldr	r2, [r0, #0]
 800a4ac:	4d09      	ldr	r5, [pc, #36]	; (800a4d4 <UART_RxISR_8BIT+0x60>)
 800a4ae:	6811      	ldr	r1, [r2, #0]
 800a4b0:	4029      	ands	r1, r5
 800a4b2:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b4:	6891      	ldr	r1, [r2, #8]
 800a4b6:	3523      	adds	r5, #35	; 0x23
 800a4b8:	35ff      	adds	r5, #255	; 0xff
 800a4ba:	43a9      	bics	r1, r5
 800a4bc:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a4be:	2220      	movs	r2, #32
 800a4c0:	67e2      	str	r2, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a4c2:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a4c4:	f7f9 fac6 	bl	8003a54 <HAL_UART_RxCpltCallback>
}
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a4ca:	2208      	movs	r2, #8
 800a4cc:	6999      	ldr	r1, [r3, #24]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	619a      	str	r2, [r3, #24]
 800a4d2:	e7f9      	b.n	800a4c8 <UART_RxISR_8BIT+0x54>
 800a4d4:	fffffedf 	.word	0xfffffedf

0800a4d8 <event.lto_priv.176>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	0004      	movs	r4, r0
 800a4dc:	69c5      	ldr	r5, [r0, #28]
 800a4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4e0:	1d2e      	adds	r6, r5, #4
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	782b      	ldrb	r3, [r5, #0]
 800a4e6:	6900      	ldr	r0, [r0, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <event.lto_priv.176+0x28>
 800a4ec:	0001      	movs	r1, r0
 800a4ee:	0030      	movs	r0, r6
 800a4f0:	f00b f8d8 	bl	80156a4 <memcpy>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	702b      	strb	r3, [r5, #0]
 800a4f8:	6820      	ldr	r0, [r4, #0]
 800a4fa:	6843      	ldr	r3, [r0, #4]
 800a4fc:	4798      	blx	r3
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a502:	0031      	movs	r1, r6
 800a504:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a506:	47a8      	blx	r5
 800a508:	e7f6      	b.n	800a4f8 <event.lto_priv.176+0x20>

0800a50a <reset.lto_priv.168.lto_priv.632>:
 800a50a:	b510      	push	{r4, lr}
 800a50c:	f7fa fc8a 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 800a510:	bd10      	pop	{r4, pc}

0800a512 <reset.lto_priv.167.lto_priv.661>:
 800a512:	b510      	push	{r4, lr}
 800a514:	f7fa fc86 	bl	8004e24 <reset.lto_priv.166.lto_priv.253>
 800a518:	bd10      	pop	{r4, pc}

0800a51a <phase_compensate_q3_12_complex.lto_priv.662>:
 800a51a:	b510      	push	{r4, lr}
 800a51c:	1d83      	adds	r3, r0, #6
 800a51e:	223e      	movs	r2, #62	; 0x3e
 800a520:	5e9b      	ldrsh	r3, [r3, r2]
 800a522:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a524:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a526:	6900      	ldr	r0, [r0, #16]
 800a528:	f7fb fa22 	bl	8005970 <do_phase_compensation_q3_12.lto_priv.254>
 800a52c:	bd10      	pop	{r4, pc}

0800a52e <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161>:
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a52e:	20e0      	movs	r0, #224	; 0xe0
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x62>)
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a532:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a534:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a536:	6851      	ldr	r1, [r2, #4]
 800a538:	4381      	bics	r1, r0
 800a53a:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a53c:	2182      	movs	r1, #130	; 0x82
 800a53e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a540:	0049      	lsls	r1, r1, #1
 800a542:	4288      	cmp	r0, r1
 800a544:	d10c      	bne.n	800a560 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x32>
 800a546:	2080      	movs	r0, #128	; 0x80
 800a548:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a54a:	0200      	lsls	r0, r0, #8
 800a54c:	4281      	cmp	r1, r0
 800a54e:	d003      	beq.n	800a558 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a550:	2080      	movs	r0, #128	; 0x80
 800a552:	00c0      	lsls	r0, r0, #3
 800a554:	4281      	cmp	r1, r0
 800a556:	d103      	bne.n	800a560 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x32>
          __HAL_SPI_DISABLE(hspi);
 800a558:	2040      	movs	r0, #64	; 0x40
 800a55a:	6811      	ldr	r1, [r2, #0]
 800a55c:	4381      	bics	r1, r0
 800a55e:	6011      	str	r1, [r2, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a560:	0019      	movs	r1, r3
 800a562:	2080      	movs	r0, #128	; 0x80
 800a564:	3190      	adds	r1, #144	; 0x90
 800a566:	6809      	ldr	r1, [r1, #0]
 800a568:	0180      	lsls	r0, r0, #6
 800a56a:	4281      	cmp	r1, r0
 800a56c:	d106      	bne.n	800a57c <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x4e>
          SPI_RESET_CRC(hspi);
 800a56e:	6810      	ldr	r0, [r2, #0]
 800a570:	4c08      	ldr	r4, [pc, #32]	; (800a594 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.161+0x66>)
 800a572:	4020      	ands	r0, r4
 800a574:	6010      	str	r0, [r2, #0]
 800a576:	6810      	ldr	r0, [r2, #0]
 800a578:	4301      	orrs	r1, r0
 800a57a:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a57c:	001a      	movs	r2, r3
 800a57e:	2101      	movs	r1, #1
 800a580:	32c5      	adds	r2, #197	; 0xc5
 800a582:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hspi);
 800a584:	2200      	movs	r2, #0
 800a586:	33c4      	adds	r3, #196	; 0xc4
}
 800a588:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800a58a:	701a      	strb	r2, [r3, #0]
}
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	46c0      	nop			; (mov r8, r8)
 800a590:	200003c0 	.word	0x200003c0
 800a594:	ffffdfff 	.word	0xffffdfff

0800a598 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152>:
  __HAL_LOCK(hrtc);
 800a598:	4b1c      	ldr	r3, [pc, #112]	; (800a60c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x74>)
 800a59a:	2202      	movs	r2, #2
 800a59c:	0019      	movs	r1, r3
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
 800a59e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 800a5a0:	3128      	adds	r1, #40	; 0x28
 800a5a2:	780c      	ldrb	r4, [r1, #0]
 800a5a4:	0010      	movs	r0, r2
 800a5a6:	2c01      	cmp	r4, #1
 800a5a8:	d02e      	beq.n	800a608 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x70>
 800a5aa:	3801      	subs	r0, #1
 800a5ac:	7008      	strb	r0, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	3129      	adds	r1, #41	; 0x29
 800a5b2:	700a      	strb	r2, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5b4:	21ca      	movs	r1, #202	; 0xca
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5b6:	26fa      	movs	r6, #250	; 0xfa
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a5b8:	2404      	movs	r4, #4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5ba:	681a      	ldr	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5bc:	4814      	ldr	r0, [pc, #80]	; (800a610 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x78>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5be:	6251      	str	r1, [r2, #36]	; 0x24
 800a5c0:	3977      	subs	r1, #119	; 0x77
 800a5c2:	6251      	str	r1, [r2, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5c4:	6991      	ldr	r1, [r2, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5c6:	00b6      	lsls	r6, r6, #2
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5c8:	4001      	ands	r1, r0
 800a5ca:	6191      	str	r1, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800a5cc:	6991      	ldr	r1, [r2, #24]
 800a5ce:	4811      	ldr	r0, [pc, #68]	; (800a614 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x7c>)
 800a5d0:	4001      	ands	r1, r0
 800a5d2:	6191      	str	r1, [r2, #24]
 800a5d4:	6add      	ldr	r5, [r3, #44]	; 0x2c
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a5d6:	68d1      	ldr	r1, [r2, #12]
 800a5d8:	4021      	ands	r1, r4
 800a5da:	d009      	beq.n	800a5f0 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x58>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5dc:	21ff      	movs	r1, #255	; 0xff
 800a5de:	6251      	str	r1, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a5e0:	001a      	movs	r2, r3
  __HAL_UNLOCK(hrtc);
 800a5e2:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a5e4:	3229      	adds	r2, #41	; 0x29
 800a5e6:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a5e8:	3328      	adds	r3, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a5ea:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hrtc);
 800a5ec:	7018      	strb	r0, [r3, #0]
 800a5ee:	e00b      	b.n	800a608 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x70>
 800a5f0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5f2:	1b40      	subs	r0, r0, r5
 800a5f4:	42b0      	cmp	r0, r6
 800a5f6:	d9ee      	bls.n	800a5d6 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5f8:	20ff      	movs	r0, #255	; 0xff
 800a5fa:	6250      	str	r0, [r2, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5fc:	001a      	movs	r2, r3
 800a5fe:	38fc      	subs	r0, #252	; 0xfc
 800a600:	3229      	adds	r2, #41	; 0x29
      __HAL_UNLOCK(hrtc);
 800a602:	3328      	adds	r3, #40	; 0x28
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a604:	7010      	strb	r0, [r2, #0]
      __HAL_UNLOCK(hrtc);
 800a606:	7019      	strb	r1, [r3, #0]
}
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	46c0      	nop			; (mov r8, r8)
 800a60c:	200003c0 	.word	0x200003c0
 800a610:	fffffbff 	.word	0xfffffbff
 800a614:	ffffbfff 	.word	0xffffbfff

0800a618 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151>:
  __HAL_LOCK(hrtc);
 800a618:	4a2b      	ldr	r2, [pc, #172]	; (800a6c8 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xb0>)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a61a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800a61c:	0014      	movs	r4, r2
 800a61e:	2302      	movs	r3, #2
 800a620:	3428      	adds	r4, #40	; 0x28
 800a622:	7825      	ldrb	r5, [r4, #0]
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a624:	0007      	movs	r7, r0
  __HAL_LOCK(hrtc);
 800a626:	0018      	movs	r0, r3
 800a628:	2d01      	cmp	r5, #1
 800a62a:	d04b      	beq.n	800a6c4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xac>
 800a62c:	3801      	subs	r0, #1
 800a62e:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a630:	0010      	movs	r0, r2
 800a632:	3029      	adds	r0, #41	; 0x29
 800a634:	7003      	strb	r3, [r0, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a636:	20ca      	movs	r0, #202	; 0xca
 800a638:	6813      	ldr	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a63a:	4c24      	ldr	r4, [pc, #144]	; (800a6cc <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xb4>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a63c:	6258      	str	r0, [r3, #36]	; 0x24
 800a63e:	3877      	subs	r0, #119	; 0x77
 800a640:	6258      	str	r0, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a642:	6998      	ldr	r0, [r3, #24]
 800a644:	4020      	ands	r0, r4
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a646:	2404      	movs	r4, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a648:	6198      	str	r0, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a64a:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a64c:	4820      	ldr	r0, [pc, #128]	; (800a6d0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xb8>)
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a64e:	4325      	orrs	r5, r4
 800a650:	65dd      	str	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a652:	68c0      	ldr	r0, [r0, #12]
 800a654:	0640      	lsls	r0, r0, #25
 800a656:	d407      	bmi.n	800a668 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0x50>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a658:	0025      	movs	r5, r4
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a65a:	24fa      	movs	r4, #250	; 0xfa
 800a65c:	00a4      	lsls	r4, r4, #2
 800a65e:	46a4      	mov	ip, r4
 800a660:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a662:	68dc      	ldr	r4, [r3, #12]
 800a664:	402c      	ands	r4, r5
 800a666:	d021      	beq.n	800a6ac <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0x94>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a668:	2407      	movs	r4, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a66a:	615f      	str	r7, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a66c:	6998      	ldr	r0, [r3, #24]
 800a66e:	43a0      	bics	r0, r4
 800a670:	6198      	str	r0, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a672:	6998      	ldr	r0, [r3, #24]
 800a674:	4301      	orrs	r1, r0
 800a676:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a678:	2180      	movs	r1, #128	; 0x80
 800a67a:	4816      	ldr	r0, [pc, #88]	; (800a6d4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xbc>)
 800a67c:	0309      	lsls	r1, r1, #12
 800a67e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 800a680:	4321      	orrs	r1, r4
 800a682:	67c1      	str	r1, [r0, #124]	; 0x7c
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	6998      	ldr	r0, [r3, #24]
 800a688:	01c9      	lsls	r1, r1, #7
 800a68a:	4301      	orrs	r1, r0
 800a68c:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a68e:	2180      	movs	r1, #128	; 0x80
 800a690:	6998      	ldr	r0, [r3, #24]
 800a692:	00c9      	lsls	r1, r1, #3
 800a694:	4301      	orrs	r1, r0
 800a696:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a698:	21ff      	movs	r1, #255	; 0xff
 800a69a:	6259      	str	r1, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a69c:	0013      	movs	r3, r2
  __HAL_UNLOCK(hrtc);
 800a69e:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a6a0:	3329      	adds	r3, #41	; 0x29
 800a6a2:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a6a4:	3228      	adds	r2, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a6a6:	7019      	strb	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800a6a8:	7010      	strb	r0, [r2, #0]
 800a6aa:	e00b      	b.n	800a6c4 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0xac>
 800a6ac:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a6ae:	1a36      	subs	r6, r6, r0
 800a6b0:	4566      	cmp	r6, ip
 800a6b2:	d9d6      	bls.n	800a662 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151+0x4a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b4:	21ff      	movs	r1, #255	; 0xff
 800a6b6:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6b8:	0013      	movs	r3, r2
 800a6ba:	2003      	movs	r0, #3
 800a6bc:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800a6be:	3228      	adds	r2, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a6c0:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800a6c2:	7014      	strb	r4, [r2, #0]
}
 800a6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c6:	46c0      	nop			; (mov r8, r8)
 800a6c8:	200003c0 	.word	0x200003c0
 800a6cc:	fffffbff 	.word	0xfffffbff
 800a6d0:	40002800 	.word	0x40002800
 800a6d4:	40021804 	.word	0x40021804

0800a6d8 <acc_integration_sleep_us.constprop.149>:
	rtc_wakeup_triggered = false;
 800a6d8:	2300      	movs	r3, #0
void acc_integration_sleep_us(uint32_t time_usec)
 800a6da:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 800a6dc:	4c0e      	ldr	r4, [pc, #56]	; (800a718 <acc_integration_sleep_us.constprop.149+0x40>)
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a6de:	2103      	movs	r1, #3
	rtc_wakeup_triggered = false;
 800a6e0:	344c      	adds	r4, #76	; 0x4c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a6e2:	201f      	movs	r0, #31
	rtc_wakeup_triggered = false;
 800a6e4:	7023      	strb	r3, [r4, #0]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a6e6:	f7ff ff97 	bl	800a618 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151>
	while (!rtc_wakeup_triggered)
 800a6ea:	7822      	ldrb	r2, [r4, #0]
 800a6ec:	2a00      	cmp	r2, #0
 800a6ee:	d004      	beq.n	800a6fa <acc_integration_sleep_us.constprop.149+0x22>
	rtc_wakeup_triggered = false;
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	7022      	strb	r2, [r4, #0]
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800a6f4:	f7ff ff50 	bl	800a598 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152>
}
 800a6f8:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a6fa:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800a6fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a700:	f3bf 8f6f 	isb	sy
		if (!rtc_wakeup_triggered)
 800a704:	7822      	ldrb	r2, [r4, #0]
 800a706:	2a00      	cmp	r2, #0
 800a708:	d100      	bne.n	800a70c <acc_integration_sleep_us.constprop.149+0x34>
			__WFI();
 800a70a:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 800a70c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 800a70e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	e7e8      	b.n	800a6ea <acc_integration_sleep_us.constprop.149+0x12>
 800a718:	20000440 	.word	0x20000440

0800a71c <HAL_GPIO_DeInit.constprop.146>:
        EXTI->IMR1 &= ~(iocurrent);
 800a71c:	4937      	ldr	r1, [pc, #220]	; (800a7fc <HAL_GPIO_DeInit.constprop.146+0xe0>)
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a71e:	b5f0      	push	{r4, r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800a720:	468c      	mov	ip, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a722:	4645      	mov	r5, r8
 800a724:	46de      	mov	lr, fp
 800a726:	4657      	mov	r7, sl
 800a728:	464e      	mov	r6, r9
        EXTI->EMR1 &= ~(iocurrent);
 800a72a:	4935      	ldr	r1, [pc, #212]	; (800a800 <HAL_GPIO_DeInit.constprop.146+0xe4>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a72c:	22a0      	movs	r2, #160	; 0xa0
  uint32_t position = 0x00u;
 800a72e:	2300      	movs	r3, #0
        EXTI->EMR1 &= ~(iocurrent);
 800a730:	4688      	mov	r8, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a732:	b5e0      	push	{r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800a734:	4d33      	ldr	r5, [pc, #204]	; (800a804 <HAL_GPIO_DeInit.constprop.146+0xe8>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a736:	05d2      	lsls	r2, r2, #23
  while ((GPIO_Pin >> position) != 0x00u)
 800a738:	0001      	movs	r1, r0
 800a73a:	40d9      	lsrs	r1, r3
 800a73c:	d105      	bne.n	800a74a <HAL_GPIO_DeInit.constprop.146+0x2e>
}
 800a73e:	bc3c      	pop	{r2, r3, r4, r5}
 800a740:	4690      	mov	r8, r2
 800a742:	4699      	mov	r9, r3
 800a744:	46a2      	mov	sl, r4
 800a746:	46ab      	mov	fp, r5
 800a748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a74a:	2101      	movs	r1, #1
 800a74c:	4099      	lsls	r1, r3
 800a74e:	000c      	movs	r4, r1
 800a750:	4689      	mov	r9, r1
 800a752:	4004      	ands	r4, r0
    if (iocurrent != 0x00u)
 800a754:	d04f      	beq.n	800a7f6 <HAL_GPIO_DeInit.constprop.146+0xda>
 800a756:	4f2b      	ldr	r7, [pc, #172]	; (800a804 <HAL_GPIO_DeInit.constprop.146+0xe8>)
      tmp = EXTI->EXTICR[position >> 2u];
 800a758:	0899      	lsrs	r1, r3, #2
 800a75a:	46ba      	mov	sl, r7
 800a75c:	0089      	lsls	r1, r1, #2
 800a75e:	4451      	add	r1, sl
 800a760:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800a762:	2603      	movs	r6, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800a764:	46ba      	mov	sl, r7
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800a766:	001f      	movs	r7, r3
 800a768:	4037      	ands	r7, r6
 800a76a:	40b7      	lsls	r7, r6
 800a76c:	46bb      	mov	fp, r7
 800a76e:	270f      	movs	r7, #15
 800a770:	465e      	mov	r6, fp
 800a772:	40b7      	lsls	r7, r6
 800a774:	46bb      	mov	fp, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800a776:	003e      	movs	r6, r7
 800a778:	4657      	mov	r7, sl
 800a77a:	423e      	tst	r6, r7
 800a77c:	d117      	bne.n	800a7ae <HAL_GPIO_DeInit.constprop.146+0x92>
        EXTI->IMR1 &= ~(iocurrent);
 800a77e:	4666      	mov	r6, ip
 800a780:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800a782:	43e4      	mvns	r4, r4
 800a784:	0037      	movs	r7, r6
 800a786:	4666      	mov	r6, ip
 800a788:	4027      	ands	r7, r4
 800a78a:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800a78c:	4646      	mov	r6, r8
 800a78e:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800a790:	0037      	movs	r7, r6
 800a792:	4646      	mov	r6, r8
 800a794:	4027      	ands	r7, r4
 800a796:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 800a798:	682e      	ldr	r6, [r5, #0]
 800a79a:	0037      	movs	r7, r6
 800a79c:	4027      	ands	r7, r4
 800a79e:	602f      	str	r7, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a7a0:	686e      	ldr	r6, [r5, #4]
 800a7a2:	4034      	ands	r4, r6
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800a7a4:	465e      	mov	r6, fp
        EXTI->FTSR1 &= ~(iocurrent);
 800a7a6:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800a7a8:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 800a7aa:	43b4      	bics	r4, r6
 800a7ac:	660c      	str	r4, [r1, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a7ae:	2703      	movs	r7, #3
 800a7b0:	26a0      	movs	r6, #160	; 0xa0
 800a7b2:	005c      	lsls	r4, r3, #1
 800a7b4:	40a7      	lsls	r7, r4
 800a7b6:	05f6      	lsls	r6, r6, #23
 800a7b8:	6811      	ldr	r1, [r2, #0]
 800a7ba:	46b2      	mov	sl, r6
 800a7bc:	4339      	orrs	r1, r7
 800a7be:	003c      	movs	r4, r7
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a7c0:	2707      	movs	r7, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a7c2:	6011      	str	r1, [r2, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a7c4:	08d9      	lsrs	r1, r3, #3
 800a7c6:	0089      	lsls	r1, r1, #2
 800a7c8:	4451      	add	r1, sl
 800a7ca:	6a0e      	ldr	r6, [r1, #32]
 800a7cc:	401f      	ands	r7, r3
 800a7ce:	46b2      	mov	sl, r6
 800a7d0:	00be      	lsls	r6, r7, #2
 800a7d2:	270f      	movs	r7, #15
 800a7d4:	40b7      	lsls	r7, r6
 800a7d6:	46bb      	mov	fp, r7
 800a7d8:	4657      	mov	r7, sl
 800a7da:	465e      	mov	r6, fp
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a7dc:	43e4      	mvns	r4, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a7de:	43b7      	bics	r7, r6
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7e0:	464e      	mov	r6, r9
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a7e2:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a7e4:	6891      	ldr	r1, [r2, #8]
 800a7e6:	4021      	ands	r1, r4
 800a7e8:	6091      	str	r1, [r2, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a7ea:	6851      	ldr	r1, [r2, #4]
 800a7ec:	43b1      	bics	r1, r6
 800a7ee:	6051      	str	r1, [r2, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a7f0:	68d1      	ldr	r1, [r2, #12]
 800a7f2:	400c      	ands	r4, r1
 800a7f4:	60d4      	str	r4, [r2, #12]
    position++;
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	e79e      	b.n	800a738 <HAL_GPIO_DeInit.constprop.146+0x1c>
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	40021804 	.word	0x40021804
 800a800:	40021808 	.word	0x40021808
 800a804:	40021800 	.word	0x40021800

0800a808 <HAL_UART_Transmit_IT.constprop.123>:
  if (huart->gState == HAL_UART_STATE_READY)
 800a808:	4b2b      	ldr	r3, [pc, #172]	; (800a8b8 <HAL_UART_Transmit_IT.constprop.123+0xb0>)
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a80a:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800a80c:	1d1a      	adds	r2, r3, #4
 800a80e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a810:	0004      	movs	r4, r0
    return HAL_BUSY;
 800a812:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800a814:	2a20      	cmp	r2, #32
 800a816:	d13b      	bne.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
      return HAL_ERROR;
 800a818:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a81a:	2c00      	cmp	r4, #0
 800a81c:	d038      	beq.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
 800a81e:	2900      	cmp	r1, #0
 800a820:	d036      	beq.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a822:	2580      	movs	r5, #128	; 0x80
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	016d      	lsls	r5, r5, #5
 800a828:	42aa      	cmp	r2, r5
 800a82a:	d104      	bne.n	800a836 <HAL_UART_Transmit_IT.constprop.123+0x2e>
 800a82c:	691d      	ldr	r5, [r3, #16]
 800a82e:	2d00      	cmp	r5, #0
 800a830:	d101      	bne.n	800a836 <HAL_UART_Transmit_IT.constprop.123+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a832:	4204      	tst	r4, r0
 800a834:	d12c      	bne.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
    __HAL_LOCK(huart);
 800a836:	0018      	movs	r0, r3
 800a838:	307c      	adds	r0, #124	; 0x7c
 800a83a:	7805      	ldrb	r5, [r0, #0]
    return HAL_BUSY;
 800a83c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800a83e:	2d01      	cmp	r5, #1
 800a840:	d026      	beq.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
    huart->TxXferSize  = Size;
 800a842:	0018      	movs	r0, r3
 800a844:	3054      	adds	r0, #84	; 0x54
 800a846:	8001      	strh	r1, [r0, #0]
    huart->TxXferCount = Size;
 800a848:	0018      	movs	r0, r3
 800a84a:	3056      	adds	r0, #86	; 0x56
 800a84c:	8001      	strh	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84e:	0019      	movs	r1, r3
 800a850:	2000      	movs	r0, #0
 800a852:	3188      	adds	r1, #136	; 0x88
 800a854:	6008      	str	r0, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a856:	1d19      	adds	r1, r3, #4
 800a858:	3021      	adds	r0, #33	; 0x21
 800a85a:	67c8      	str	r0, [r1, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a85c:	2180      	movs	r1, #128	; 0x80
 800a85e:	2080      	movs	r0, #128	; 0x80
    huart->pTxBuffPtr  = pData;
 800a860:	651c      	str	r4, [r3, #80]	; 0x50
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a862:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800a864:	0589      	lsls	r1, r1, #22
 800a866:	0140      	lsls	r0, r0, #5
 800a868:	428c      	cmp	r4, r1
 800a86a:	d112      	bne.n	800a892 <HAL_UART_Transmit_IT.constprop.123+0x8a>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a86c:	4913      	ldr	r1, [pc, #76]	; (800a8bc <HAL_UART_Transmit_IT.constprop.123+0xb4>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a86e:	4282      	cmp	r2, r0
 800a870:	d103      	bne.n	800a87a <HAL_UART_Transmit_IT.constprop.123+0x72>
 800a872:	691a      	ldr	r2, [r3, #16]
 800a874:	2a00      	cmp	r2, #0
 800a876:	d100      	bne.n	800a87a <HAL_UART_Transmit_IT.constprop.123+0x72>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a878:	4911      	ldr	r1, [pc, #68]	; (800a8c0 <HAL_UART_Transmit_IT.constprop.123+0xb8>)
      __HAL_UNLOCK(huart);
 800a87a:	001a      	movs	r2, r3
 800a87c:	2000      	movs	r0, #0
 800a87e:	327c      	adds	r2, #124	; 0x7c
 800a880:	6719      	str	r1, [r3, #112]	; 0x70
 800a882:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	2380      	movs	r3, #128	; 0x80
 800a888:	6891      	ldr	r1, [r2, #8]
 800a88a:	041b      	lsls	r3, r3, #16
 800a88c:	430b      	orrs	r3, r1
 800a88e:	6093      	str	r3, [r2, #8]
}
 800a890:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800a892:	490c      	ldr	r1, [pc, #48]	; (800a8c4 <HAL_UART_Transmit_IT.constprop.123+0xbc>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a894:	4282      	cmp	r2, r0
 800a896:	d103      	bne.n	800a8a0 <HAL_UART_Transmit_IT.constprop.123+0x98>
 800a898:	691a      	ldr	r2, [r3, #16]
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	d100      	bne.n	800a8a0 <HAL_UART_Transmit_IT.constprop.123+0x98>
        huart->TxISR = UART_TxISR_16BIT;
 800a89e:	490a      	ldr	r1, [pc, #40]	; (800a8c8 <HAL_UART_Transmit_IT.constprop.123+0xc0>)
      __HAL_UNLOCK(huart);
 800a8a0:	001a      	movs	r2, r3
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	327c      	adds	r2, #124	; 0x7c
 800a8a6:	6719      	str	r1, [r3, #112]	; 0x70
 800a8a8:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	2380      	movs	r3, #128	; 0x80
 800a8ae:	6811      	ldr	r1, [r2, #0]
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	e7ec      	b.n	800a890 <HAL_UART_Transmit_IT.constprop.123+0x88>
 800a8b6:	46c0      	nop			; (mov r8, r8)
 800a8b8:	200005a8 	.word	0x200005a8
 800a8bc:	08009cb1 	.word	0x08009cb1
 800a8c0:	08009c55 	.word	0x08009c55
 800a8c4:	08009d49 	.word	0x08009d49
 800a8c8:	08009d09 	.word	0x08009d09

0800a8cc <RTC_ExitInitMode.constprop.110>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a8cc:	2280      	movs	r2, #128	; 0x80
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
 800a8ce:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a8d0:	4c10      	ldr	r4, [pc, #64]	; (800a914 <RTC_ExitInitMode.constprop.110+0x48>)
 800a8d2:	68e3      	ldr	r3, [r4, #12]
 800a8d4:	4393      	bics	r3, r2
 800a8d6:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a8d8:	69a3      	ldr	r3, [r4, #24]
 800a8da:	3a60      	subs	r2, #96	; 0x60
 800a8dc:	4213      	tst	r3, r2
 800a8de:	d108      	bne.n	800a8f2 <RTC_ExitInitMode.constprop.110+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8e0:	f7ff f940 	bl	8009b64 <HAL_RTC_WaitForSynchro.constprop.112>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d003      	beq.n	800a8f0 <RTC_ExitInitMode.constprop.110+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8e8:	2003      	movs	r0, #3
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	; (800a918 <RTC_ExitInitMode.constprop.110+0x4c>)
 800a8ec:	3329      	adds	r3, #41	; 0x29
 800a8ee:	7018      	strb	r0, [r3, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800a8f0:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a8f2:	69a3      	ldr	r3, [r4, #24]
 800a8f4:	4393      	bics	r3, r2
 800a8f6:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8f8:	f7ff f934 	bl	8009b64 <HAL_RTC_WaitForSynchro.constprop.112>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d003      	beq.n	800a908 <RTC_ExitInitMode.constprop.110+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a900:	2003      	movs	r0, #3
 800a902:	4b05      	ldr	r3, [pc, #20]	; (800a918 <RTC_ExitInitMode.constprop.110+0x4c>)
 800a904:	3329      	adds	r3, #41	; 0x29
 800a906:	7018      	strb	r0, [r3, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a908:	2320      	movs	r3, #32
 800a90a:	69a2      	ldr	r2, [r4, #24]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	61a3      	str	r3, [r4, #24]
 800a910:	e7ee      	b.n	800a8f0 <RTC_ExitInitMode.constprop.110+0x24>
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	40002800 	.word	0x40002800
 800a918:	200003c0 	.word	0x200003c0

0800a91c <RTC_EnterInitMode.constprop.109>:
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a91c:	2140      	movs	r1, #64	; 0x40
 800a91e:	4a10      	ldr	r2, [pc, #64]	; (800a960 <RTC_EnterInitMode.constprop.109+0x44>)
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
 800a920:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a922:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;  
 800a924:	2000      	movs	r0, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a926:	68dc      	ldr	r4, [r3, #12]
 800a928:	420c      	tst	r4, r1
 800a92a:	d10f      	bne.n	800a94c <RTC_EnterInitMode.constprop.109+0x30>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a92c:	2480      	movs	r4, #128	; 0x80
 800a92e:	68dd      	ldr	r5, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a930:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a932:	432c      	orrs	r4, r5
 800a934:	60dc      	str	r4, [r3, #12]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a936:	2429      	movs	r4, #41	; 0x29
 800a938:	46a4      	mov	ip, r4
 800a93a:	2503      	movs	r5, #3
 800a93c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a93e:	00bf      	lsls	r7, r7, #2
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a940:	4494      	add	ip, r2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a942:	68dc      	ldr	r4, [r3, #12]
 800a944:	420c      	tst	r4, r1
 800a946:	d101      	bne.n	800a94c <RTC_EnterInitMode.constprop.109+0x30>
 800a948:	2803      	cmp	r0, #3
 800a94a:	d100      	bne.n	800a94e <RTC_EnterInitMode.constprop.109+0x32>
}
 800a94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a950:	1ba4      	subs	r4, r4, r6
 800a952:	42bc      	cmp	r4, r7
 800a954:	d9f5      	bls.n	800a942 <RTC_EnterInitMode.constprop.109+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a956:	4660      	mov	r0, ip
 800a958:	7005      	strb	r5, [r0, #0]
        status = HAL_TIMEOUT;
 800a95a:	0028      	movs	r0, r5
 800a95c:	e7f1      	b.n	800a942 <RTC_EnterInitMode.constprop.109+0x26>
 800a95e:	46c0      	nop			; (mov r8, r8)
 800a960:	200003c0 	.word	0x200003c0

0800a964 <FLASH_WaitForLastOperation.constprop.96>:
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800a964:	23fa      	movs	r3, #250	; 0xfa
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	469c      	mov	ip, r3

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a96a:	4b19      	ldr	r3, [pc, #100]	; (800a9d0 <FLASH_WaitForLastOperation.constprop.96+0x6c>)
 800a96c:	2180      	movs	r1, #128	; 0x80
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 800a96e:	b530      	push	{r4, r5, lr}
 800a970:	001d      	movs	r5, r3
 800a972:	4c18      	ldr	r4, [pc, #96]	; (800a9d4 <FLASH_WaitForLastOperation.constprop.96+0x70>)
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a974:	0249      	lsls	r1, r1, #9
 800a976:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t timeout = HAL_GetTick() + Timeout;
 800a978:	4462      	add	r2, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a97a:	6918      	ldr	r0, [r3, #16]
 800a97c:	4208      	tst	r0, r1
 800a97e:	d111      	bne.n	800a9a4 <FLASH_WaitForLastOperation.constprop.96+0x40>

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;

  /* Update error with ECC error value */
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a980:	2080      	movs	r0, #128	; 0x80
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	4914      	ldr	r1, [pc, #80]	; (800a9d8 <FLASH_WaitForLastOperation.constprop.96+0x74>)
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a986:	05c0      	lsls	r0, r0, #23
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800a988:	400a      	ands	r2, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800a98a:	4914      	ldr	r1, [pc, #80]	; (800a9dc <FLASH_WaitForLastOperation.constprop.96+0x78>)
 800a98c:	6119      	str	r1, [r3, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a98e:	6999      	ldr	r1, [r3, #24]
 800a990:	4001      	ands	r1, r0

  if(eccerr != 0x00u)
 800a992:	d00c      	beq.n	800a9ae <FLASH_WaitForLastOperation.constprop.96+0x4a>
  {
    FLASH->ECCR |= eccerr;
 800a994:	6998      	ldr	r0, [r3, #24]
    error |= eccerr;
 800a996:	430a      	orrs	r2, r1
    FLASH->ECCR |= eccerr;
 800a998:	4308      	orrs	r0, r1
 800a99a:	6198      	str	r0, [r3, #24]
  }

  if (error != 0x00U)
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800a99c:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <FLASH_WaitForLastOperation.constprop.96+0x7c>)

    return HAL_ERROR;
 800a99e:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800a9a0:	655a      	str	r2, [r3, #84]	; 0x54
 800a9a2:	e003      	b.n	800a9ac <FLASH_WaitForLastOperation.constprop.96+0x48>
 800a9a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800a9a6:	4282      	cmp	r2, r0
 800a9a8:	d8e7      	bhi.n	800a97a <FLASH_WaitForLastOperation.constprop.96+0x16>
      return HAL_TIMEOUT;
 800a9aa:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800a9ac:	bd30      	pop	{r4, r5, pc}
  if (error != 0x00U)
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	d1f4      	bne.n	800a99c <FLASH_WaitForLastOperation.constprop.96+0x38>
  timeout = HAL_GetTick() + Timeout;
 800a9b2:	22fa      	movs	r2, #250	; 0xfa
 800a9b4:	0092      	lsls	r2, r2, #2
 800a9b6:	4694      	mov	ip, r2
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800a9b8:	2280      	movs	r2, #128	; 0x80
 800a9ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a9bc:	02d2      	lsls	r2, r2, #11
  timeout = HAL_GetTick() + Timeout;
 800a9be:	4463      	add	r3, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800a9c0:	6928      	ldr	r0, [r5, #16]
 800a9c2:	4010      	ands	r0, r2
 800a9c4:	d0f2      	beq.n	800a9ac <FLASH_WaitForLastOperation.constprop.96+0x48>
 800a9c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800a9c8:	428b      	cmp	r3, r1
 800a9ca:	d8f9      	bhi.n	800a9c0 <FLASH_WaitForLastOperation.constprop.96+0x5c>
 800a9cc:	e7ed      	b.n	800a9aa <FLASH_WaitForLastOperation.constprop.96+0x46>
 800a9ce:	46c0      	nop			; (mov r8, r8)
 800a9d0:	40022000 	.word	0x40022000
 800a9d4:	200003c0 	.word	0x200003c0
 800a9d8:	0000c3fa 	.word	0x0000c3fa
 800a9dc:	0000c3fb 	.word	0x0000c3fb
 800a9e0:	20000440 	.word	0x20000440

0800a9e4 <HAL_UART_Receive_IT.constprop.87>:
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9e6:	0006      	movs	r6, r0
 800a9e8:	3608      	adds	r6, #8
 800a9ea:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a9ec:	0003      	movs	r3, r0
    return HAL_BUSY;
 800a9ee:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9f0:	2a20      	cmp	r2, #32
 800a9f2:	d154      	bne.n	800aa9e <HAL_UART_Receive_IT.constprop.87+0xba>
      return HAL_ERROR;
 800a9f4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a9f6:	2900      	cmp	r1, #0
 800a9f8:	d051      	beq.n	800aa9e <HAL_UART_Receive_IT.constprop.87+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9fa:	2280      	movs	r2, #128	; 0x80
 800a9fc:	689c      	ldr	r4, [r3, #8]
 800a9fe:	0152      	lsls	r2, r2, #5
 800aa00:	4294      	cmp	r4, r2
 800aa02:	d106      	bne.n	800aa12 <HAL_UART_Receive_IT.constprop.87+0x2e>
 800aa04:	691a      	ldr	r2, [r3, #16]
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d103      	bne.n	800aa12 <HAL_UART_Receive_IT.constprop.87+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800aa0a:	4a39      	ldr	r2, [pc, #228]	; (800aaf0 <HAL_UART_Receive_IT.constprop.87+0x10c>)
 800aa0c:	3268      	adds	r2, #104	; 0x68
 800aa0e:	4202      	tst	r2, r0
 800aa10:	d145      	bne.n	800aa9e <HAL_UART_Receive_IT.constprop.87+0xba>
    __HAL_LOCK(huart);
 800aa12:	001d      	movs	r5, r3
 800aa14:	357c      	adds	r5, #124	; 0x7c
 800aa16:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800aa18:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800aa1a:	2a01      	cmp	r2, #1
 800aa1c:	d03f      	beq.n	800aa9e <HAL_UART_Receive_IT.constprop.87+0xba>
 800aa1e:	2201      	movs	r2, #1
 800aa20:	702a      	strb	r2, [r5, #0]
    huart->pRxBuffPtr  = pData;
 800aa22:	4a33      	ldr	r2, [pc, #204]	; (800aaf0 <HAL_UART_Receive_IT.constprop.87+0x10c>)
    huart->RxISR       = NULL;
 800aa24:	2000      	movs	r0, #0
    huart->pRxBuffPtr  = pData;
 800aa26:	3268      	adds	r2, #104	; 0x68
 800aa28:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800aa2a:	001a      	movs	r2, r3
    UART_MASK_COMPUTATION(huart);
 800aa2c:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 800aa2e:	325c      	adds	r2, #92	; 0x5c
 800aa30:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount = Size;
 800aa32:	8051      	strh	r1, [r2, #2]
    UART_MASK_COMPUTATION(huart);
 800aa34:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 800aa36:	66d8      	str	r0, [r3, #108]	; 0x6c
 800aa38:	3204      	adds	r2, #4
    UART_MASK_COMPUTATION(huart);
 800aa3a:	42bc      	cmp	r4, r7
 800aa3c:	d133      	bne.n	800aaa6 <HAL_UART_Receive_IT.constprop.87+0xc2>
 800aa3e:	6918      	ldr	r0, [r3, #16]
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d12d      	bne.n	800aaa0 <HAL_UART_Receive_IT.constprop.87+0xbc>
 800aa44:	482b      	ldr	r0, [pc, #172]	; (800aaf4 <HAL_UART_Receive_IT.constprop.87+0x110>)
 800aa46:	8010      	strh	r0, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa48:	001a      	movs	r2, r3
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	3288      	adds	r2, #136	; 0x88
 800aa4e:	6010      	str	r0, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa50:	2222      	movs	r2, #34	; 0x22
 800aa52:	67f2      	str	r2, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	3001      	adds	r0, #1
 800aa58:	6896      	ldr	r6, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa5a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5c:	4330      	orrs	r0, r6
 800aa5e:	6090      	str	r0, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa60:	2680      	movs	r6, #128	; 0x80
 800aa62:	2080      	movs	r0, #128	; 0x80
 800aa64:	05b6      	lsls	r6, r6, #22
 800aa66:	0140      	lsls	r0, r0, #5
 800aa68:	42b7      	cmp	r7, r6
 800aa6a:	d130      	bne.n	800aace <HAL_UART_Receive_IT.constprop.87+0xea>
 800aa6c:	001e      	movs	r6, r3
 800aa6e:	3668      	adds	r6, #104	; 0x68
 800aa70:	8836      	ldrh	r6, [r6, #0]
 800aa72:	428e      	cmp	r6, r1
 800aa74:	d82b      	bhi.n	800aace <HAL_UART_Receive_IT.constprop.87+0xea>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aa76:	4920      	ldr	r1, [pc, #128]	; (800aaf8 <HAL_UART_Receive_IT.constprop.87+0x114>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa78:	4284      	cmp	r4, r0
 800aa7a:	d103      	bne.n	800aa84 <HAL_UART_Receive_IT.constprop.87+0xa0>
 800aa7c:	6918      	ldr	r0, [r3, #16]
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d100      	bne.n	800aa84 <HAL_UART_Receive_IT.constprop.87+0xa0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa82:	491e      	ldr	r1, [pc, #120]	; (800aafc <HAL_UART_Receive_IT.constprop.87+0x118>)
      __HAL_UNLOCK(huart);
 800aa84:	2000      	movs	r0, #0
 800aa86:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa88:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 800aa8a:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa8c:	6811      	ldr	r1, [r2, #0]
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	430b      	orrs	r3, r1
 800aa92:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	6891      	ldr	r1, [r2, #8]
 800aa98:	055b      	lsls	r3, r3, #21
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	6093      	str	r3, [r2, #8]
}
 800aa9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800aaa0:	20ff      	movs	r0, #255	; 0xff
 800aaa2:	8010      	strh	r0, [r2, #0]
 800aaa4:	e7d0      	b.n	800aa48 <HAL_UART_Receive_IT.constprop.87+0x64>
 800aaa6:	2c00      	cmp	r4, #0
 800aaa8:	d105      	bne.n	800aab6 <HAL_UART_Receive_IT.constprop.87+0xd2>
 800aaaa:	6918      	ldr	r0, [r3, #16]
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d0f7      	beq.n	800aaa0 <HAL_UART_Receive_IT.constprop.87+0xbc>
 800aab0:	207f      	movs	r0, #127	; 0x7f
 800aab2:	8010      	strh	r0, [r2, #0]
 800aab4:	e7c8      	b.n	800aa48 <HAL_UART_Receive_IT.constprop.87+0x64>
 800aab6:	2780      	movs	r7, #128	; 0x80
 800aab8:	057f      	lsls	r7, r7, #21
 800aaba:	42bc      	cmp	r4, r7
 800aabc:	d105      	bne.n	800aaca <HAL_UART_Receive_IT.constprop.87+0xe6>
 800aabe:	6918      	ldr	r0, [r3, #16]
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d0f5      	beq.n	800aab0 <HAL_UART_Receive_IT.constprop.87+0xcc>
 800aac4:	203f      	movs	r0, #63	; 0x3f
 800aac6:	8010      	strh	r0, [r2, #0]
 800aac8:	e7be      	b.n	800aa48 <HAL_UART_Receive_IT.constprop.87+0x64>
 800aaca:	8010      	strh	r0, [r2, #0]
 800aacc:	e7bc      	b.n	800aa48 <HAL_UART_Receive_IT.constprop.87+0x64>
        huart->RxISR = UART_RxISR_8BIT;
 800aace:	490c      	ldr	r1, [pc, #48]	; (800ab00 <HAL_UART_Receive_IT.constprop.87+0x11c>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aad0:	4284      	cmp	r4, r0
 800aad2:	d103      	bne.n	800aadc <HAL_UART_Receive_IT.constprop.87+0xf8>
 800aad4:	6918      	ldr	r0, [r3, #16]
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d100      	bne.n	800aadc <HAL_UART_Receive_IT.constprop.87+0xf8>
        huart->RxISR = UART_RxISR_16BIT;
 800aada:	490a      	ldr	r1, [pc, #40]	; (800ab04 <HAL_UART_Receive_IT.constprop.87+0x120>)
      __HAL_UNLOCK(huart);
 800aadc:	2000      	movs	r0, #0
 800aade:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aae0:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800aae2:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aae4:	6811      	ldr	r1, [r2, #0]
 800aae6:	005b      	lsls	r3, r3, #1
 800aae8:	430b      	orrs	r3, r1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	e7d7      	b.n	800aa9e <HAL_UART_Receive_IT.constprop.87+0xba>
 800aaee:	46c0      	nop			; (mov r8, r8)
 800aaf0:	20000440 	.word	0x20000440
 800aaf4:	000001ff 	.word	0x000001ff
 800aaf8:	0800a345 	.word	0x0800a345
 800aafc:	0800a279 	.word	0x0800a279
 800ab00:	0800a475 	.word	0x0800a475
 800ab04:	0800a415 	.word	0x0800a415

0800ab08 <acc_service_get_next.constprop.80>:
 800ab08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0a:	46c6      	mov	lr, r8
 800ab0c:	000e      	movs	r6, r1
 800ab0e:	b500      	push	{lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	0005      	movs	r5, r0
 800ab14:	f7f8 fe45 	bl	80037a2 <acc_service_handle_valid>
 800ab18:	7eb4      	ldrb	r4, [r6, #26]
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d011      	beq.n	800ab42 <acc_service_get_next.constprop.80+0x3a>
 800ab1e:	6873      	ldr	r3, [r6, #4]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <acc_service_get_next.constprop.80+0x22>
 800ab24:	68f3      	ldr	r3, [r6, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d115      	bne.n	800ab56 <acc_service_get_next.constprop.80+0x4e>
 800ab2a:	4b24      	ldr	r3, [pc, #144]	; (800abbc <acc_service_get_next.constprop.80+0xb4>)
 800ab2c:	4a24      	ldr	r2, [pc, #144]	; (800abc0 <acc_service_get_next.constprop.80+0xb8>)
 800ab2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab30:	4924      	ldr	r1, [pc, #144]	; (800abc4 <acc_service_get_next.constprop.80+0xbc>)
 800ab32:	2000      	movs	r0, #0
 800ab34:	4798      	blx	r3
 800ab36:	2400      	movs	r4, #0
 800ab38:	0020      	movs	r0, r4
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bc04      	pop	{r2}
 800ab3e:	4690      	mov	r8, r2
 800ab40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab42:	68b3      	ldr	r3, [r6, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d106      	bne.n	800ab56 <acc_service_get_next.constprop.80+0x4e>
 800ab48:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <acc_service_get_next.constprop.80+0xb4>)
 800ab4a:	4a1f      	ldr	r2, [pc, #124]	; (800abc8 <acc_service_get_next.constprop.80+0xc0>)
 800ab4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab4e:	491d      	ldr	r1, [pc, #116]	; (800abc4 <acc_service_get_next.constprop.80+0xbc>)
 800ab50:	0020      	movs	r0, r4
 800ab52:	4798      	blx	r3
 800ab54:	e7f0      	b.n	800ab38 <acc_service_get_next.constprop.80+0x30>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d101      	bne.n	800ab5e <acc_service_get_next.constprop.80+0x56>
 800ab5a:	2400      	movs	r4, #0
 800ab5c:	e7ec      	b.n	800ab38 <acc_service_get_next.constprop.80+0x30>
 800ab5e:	7a2b      	ldrb	r3, [r5, #8]
 800ab60:	7832      	ldrb	r2, [r6, #0]
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d007      	beq.n	800ab76 <acc_service_get_next.constprop.80+0x6e>
 800ab66:	9200      	str	r2, [sp, #0]
 800ab68:	4a14      	ldr	r2, [pc, #80]	; (800abbc <acc_service_get_next.constprop.80+0xb4>)
 800ab6a:	4916      	ldr	r1, [pc, #88]	; (800abc4 <acc_service_get_next.constprop.80+0xbc>)
 800ab6c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800ab6e:	2000      	movs	r0, #0
 800ab70:	4a16      	ldr	r2, [pc, #88]	; (800abcc <acc_service_get_next.constprop.80+0xc4>)
 800ab72:	47a0      	blx	r4
 800ab74:	e7f1      	b.n	800ab5a <acc_service_get_next.constprop.80+0x52>
 800ab76:	7e37      	ldrb	r7, [r6, #24]
 800ab78:	2f00      	cmp	r7, #0
 800ab7a:	d004      	beq.n	800ab86 <acc_service_get_next.constprop.80+0x7e>
 800ab7c:	0028      	movs	r0, r5
 800ab7e:	f7f8 fe9b 	bl	80038b8 <acc_service_activate>
 800ab82:	1e07      	subs	r7, r0, #0
 800ab84:	d0e9      	beq.n	800ab5a <acc_service_get_next.constprop.80+0x52>
 800ab86:	7a6b      	ldrb	r3, [r5, #9]
 800ab88:	4698      	mov	r8, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00c      	beq.n	800aba8 <acc_service_get_next.constprop.80+0xa0>
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <acc_service_get_next.constprop.80+0xb4>)
 800ab90:	4a0f      	ldr	r2, [pc, #60]	; (800abd0 <acc_service_get_next.constprop.80+0xc8>)
 800ab92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab94:	490b      	ldr	r1, [pc, #44]	; (800abc4 <acc_service_get_next.constprop.80+0xbc>)
 800ab96:	2000      	movs	r0, #0
 800ab98:	4798      	blx	r3
 800ab9a:	2400      	movs	r4, #0
 800ab9c:	2f00      	cmp	r7, #0
 800ab9e:	d0cb      	beq.n	800ab38 <acc_service_get_next.constprop.80+0x30>
 800aba0:	0028      	movs	r0, r5
 800aba2:	f7f8 fe17 	bl	80037d4 <acc_service_deactivate>
 800aba6:	e7c7      	b.n	800ab38 <acc_service_get_next.constprop.80+0x30>
 800aba8:	2401      	movs	r4, #1
 800abaa:	692b      	ldr	r3, [r5, #16]
 800abac:	616e      	str	r6, [r5, #20]
 800abae:	cb05      	ldmia	r3!, {r0, r2}
 800abb0:	4790      	blx	r2
 800abb2:	7e73      	ldrb	r3, [r6, #25]
 800abb4:	405c      	eors	r4, r3
 800abb6:	4643      	mov	r3, r8
 800abb8:	616b      	str	r3, [r5, #20]
 800abba:	e7ef      	b.n	800ab9c <acc_service_get_next.constprop.80+0x94>
 800abbc:	200003c0 	.word	0x200003c0
 800abc0:	0801d94f 	.word	0x0801d94f
 800abc4:	0801cdfe 	.word	0x0801cdfe
 800abc8:	0801d96c 	.word	0x0801d96c
 800abcc:	0801d981 	.word	0x0801d981
 800abd0:	0801d99d 	.word	0x0801d99d

0800abd4 <Reg_regor.constprop.76>:
void Reg_regor(uint8_t reg, uint32_t orbits){
 800abd4:	b510      	push	{r4, lr}
 800abd6:	0004      	movs	r4, r0
	uint32_t flags = RegInt_getreg(reg); 
 800abd8:	2006      	movs	r0, #6
 800abda:	f7f8 ff6d 	bl	8003ab8 <RegInt_getreg>
	flags |= orbits;
 800abde:	0001      	movs	r1, r0
	RegInt_setregf(reg, flags, 1);
 800abe0:	2201      	movs	r2, #1
	flags |= orbits;
 800abe2:	4321      	orrs	r1, r4
	RegInt_setregf(reg, flags, 1);
 800abe4:	2006      	movs	r0, #6
 800abe6:	f7f9 f8bd 	bl	8003d64 <RegInt_setregf>
}
 800abea:	bd10      	pop	{r4, pc}

0800abec <acc_rss_integration_mem_calloc_debug.constprop.75>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	0005      	movs	r5, r0
 800abf0:	f7fb fa3a 	bl	8006068 <acc_rss_integration_mem_alloc_debug>
 800abf4:	1e04      	subs	r4, r0, #0
 800abf6:	d003      	beq.n	800ac00 <acc_rss_integration_mem_calloc_debug.constprop.75+0x14>
 800abf8:	002a      	movs	r2, r5
 800abfa:	2100      	movs	r1, #0
 800abfc:	f008 f92e 	bl	8012e5c <memset>
 800ac00:	0020      	movs	r0, r4
 800ac02:	bd70      	pop	{r4, r5, r6, pc}

0800ac04 <internal_buffer_processed_read.constprop.30>:
 800ac04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac06:	46de      	mov	lr, fp
 800ac08:	464e      	mov	r6, r9
 800ac0a:	4645      	mov	r5, r8
 800ac0c:	4657      	mov	r7, sl
 800ac0e:	b5e0      	push	{r5, r6, r7, lr}
 800ac10:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <internal_buffer_processed_read.constprop.30+0xa0>)
 800ac12:	b085      	sub	sp, #20
 800ac14:	9001      	str	r0, [sp, #4]
 800ac16:	4688      	mov	r8, r1
 800ac18:	0017      	movs	r7, r2
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	2206      	movs	r2, #6
 800ac1e:	a802      	add	r0, sp, #8
 800ac20:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800ac22:	f008 f91b 	bl	8012e5c <memset>
 800ac26:	2300      	movs	r3, #0
 800ac28:	4699      	mov	r9, r3
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	4645      	mov	r5, r8
 800ac2e:	469b      	mov	fp, r3
 800ac30:	0876      	lsrs	r6, r6, #1
 800ac32:	3e03      	subs	r6, #3
 800ac34:	2f00      	cmp	r7, #0
 800ac36:	d108      	bne.n	800ac4a <internal_buffer_processed_read.constprop.30+0x46>
 800ac38:	4640      	mov	r0, r8
 800ac3a:	3006      	adds	r0, #6
 800ac3c:	b005      	add	sp, #20
 800ac3e:	bc3c      	pop	{r2, r3, r4, r5}
 800ac40:	4690      	mov	r8, r2
 800ac42:	4699      	mov	r9, r3
 800ac44:	46a2      	mov	sl, r4
 800ac46:	46ab      	mov	fp, r5
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	0034      	movs	r4, r6
 800ac4c:	42be      	cmp	r6, r7
 800ac4e:	d900      	bls.n	800ac52 <internal_buffer_processed_read.constprop.30+0x4e>
 800ac50:	003c      	movs	r4, r7
 800ac52:	42be      	cmp	r6, r7
 800ac54:	d202      	bcs.n	800ac5c <internal_buffer_processed_read.constprop.30+0x58>
 800ac56:	465b      	mov	r3, fp
 800ac58:	421c      	tst	r4, r3
 800ac5a:	d121      	bne.n	800aca0 <internal_buffer_processed_read.constprop.30+0x9c>
 800ac5c:	464a      	mov	r2, r9
 800ac5e:	4b12      	ldr	r3, [pc, #72]	; (800aca8 <internal_buffer_processed_read.constprop.30+0xa4>)
 800ac60:	0029      	movs	r1, r5
 800ac62:	4313      	orrs	r3, r2
 800ac64:	802b      	strh	r3, [r5, #0]
 800ac66:	b2a3      	uxth	r3, r4
 800ac68:	469a      	mov	sl, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	806b      	strh	r3, [r5, #2]
 800ac6e:	2300      	movs	r3, #0
 800ac70:	1ce2      	adds	r2, r4, #3
 800ac72:	80ab      	strh	r3, [r5, #4]
 800ac74:	9801      	ldr	r0, [sp, #4]
 800ac76:	465b      	mov	r3, fp
 800ac78:	f7fb fa08 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800ac7c:	a902      	add	r1, sp, #8
 800ac7e:	2206      	movs	r2, #6
 800ac80:	0028      	movs	r0, r5
 800ac82:	f00a fd0f 	bl	80156a4 <memcpy>
 800ac86:	464b      	mov	r3, r9
 800ac88:	1b3f      	subs	r7, r7, r4
 800ac8a:	0064      	lsls	r4, r4, #1
 800ac8c:	4453      	add	r3, sl
 800ac8e:	192d      	adds	r5, r5, r4
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	2206      	movs	r2, #6
 800ac94:	0029      	movs	r1, r5
 800ac96:	a802      	add	r0, sp, #8
 800ac98:	4699      	mov	r9, r3
 800ac9a:	f00a fd03 	bl	80156a4 <memcpy>
 800ac9e:	e7c9      	b.n	800ac34 <internal_buffer_processed_read.constprop.30+0x30>
 800aca0:	3c01      	subs	r4, #1
 800aca2:	e7d8      	b.n	800ac56 <internal_buffer_processed_read.constprop.30+0x52>
 800aca4:	200003c0 	.word	0x200003c0
 800aca8:	ffff8000 	.word	0xffff8000

0800acac <acc_sensor_reg_write>:
 800acac:	2380      	movs	r3, #128	; 0x80
 800acae:	b513      	push	{r0, r1, r4, lr}
 800acb0:	015b      	lsls	r3, r3, #5
 800acb2:	ac01      	add	r4, sp, #4
 800acb4:	4319      	orrs	r1, r3
 800acb6:	8021      	strh	r1, [r4, #0]
 800acb8:	8062      	strh	r2, [r4, #2]
 800acba:	2300      	movs	r3, #0
 800acbc:	2202      	movs	r2, #2
 800acbe:	0021      	movs	r1, r4
 800acc0:	f7fb f9e4 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800acc4:	bd13      	pop	{r0, r1, r4, pc}

0800acc6 <acc_diagnostic_log_data_i16.constprop.20>:
 800acc6:	4770      	bx	lr

0800acc8 <acc_confprogram_live_patch.constprop.16>:
 800acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acca:	4645      	mov	r5, r8
 800accc:	46de      	mov	lr, fp
 800acce:	464e      	mov	r6, r9
 800acd0:	4657      	mov	r7, sl
 800acd2:	b5e0      	push	{r5, r6, r7, lr}
 800acd4:	001d      	movs	r5, r3
 800acd6:	4b4c      	ldr	r3, [pc, #304]	; (800ae08 <acc_confprogram_live_patch.constprop.16+0x140>)
 800acd8:	0016      	movs	r6, r2
 800acda:	001a      	movs	r2, r3
 800acdc:	3260      	adds	r2, #96	; 0x60
 800acde:	7812      	ldrb	r2, [r2, #0]
 800ace0:	b08b      	sub	sp, #44	; 0x2c
 800ace2:	4680      	mov	r8, r0
 800ace4:	468b      	mov	fp, r1
 800ace6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ace8:	2a03      	cmp	r2, #3
 800acea:	d906      	bls.n	800acfa <acc_confprogram_live_patch.constprop.16+0x32>
 800acec:	9400      	str	r4, [sp, #0]
 800acee:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800acf0:	4a46      	ldr	r2, [pc, #280]	; (800ae0c <acc_confprogram_live_patch.constprop.16+0x144>)
 800acf2:	002b      	movs	r3, r5
 800acf4:	4946      	ldr	r1, [pc, #280]	; (800ae10 <acc_confprogram_live_patch.constprop.16+0x148>)
 800acf6:	2004      	movs	r0, #4
 800acf8:	47b8      	blx	r7
 800acfa:	0023      	movs	r3, r4
 800acfc:	1e5a      	subs	r2, r3, #1
 800acfe:	4193      	sbcs	r3, r2
 800ad00:	00ed      	lsls	r5, r5, #3
 800ad02:	1976      	adds	r6, r6, r5
 800ad04:	2500      	movs	r5, #0
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	8873      	ldrh	r3, [r6, #2]
 800ad0c:	429d      	cmp	r5, r3
 800ad0e:	d306      	bcc.n	800ad1e <acc_confprogram_live_patch.constprop.16+0x56>
 800ad10:	b00b      	add	sp, #44	; 0x2c
 800ad12:	bc3c      	pop	{r2, r3, r4, r5}
 800ad14:	4690      	mov	r8, r2
 800ad16:	4699      	mov	r9, r3
 800ad18:	46a2      	mov	sl, r4
 800ad1a:	46ab      	mov	fp, r5
 800ad1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad1e:	2206      	movs	r2, #6
 800ad20:	6873      	ldr	r3, [r6, #4]
 800ad22:	436a      	muls	r2, r5
 800ad24:	469c      	mov	ip, r3
 800ad26:	4462      	add	r2, ip
 800ad28:	7810      	ldrb	r0, [r2, #0]
 800ad2a:	2801      	cmp	r0, #1
 800ad2c:	d059      	beq.n	800ade2 <acc_confprogram_live_patch.constprop.16+0x11a>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d00b      	beq.n	800ad4a <acc_confprogram_live_patch.constprop.16+0x82>
 800ad32:	2802      	cmp	r0, #2
 800ad34:	d05e      	beq.n	800adf4 <acc_confprogram_live_patch.constprop.16+0x12c>
 800ad36:	4b34      	ldr	r3, [pc, #208]	; (800ae08 <acc_confprogram_live_patch.constprop.16+0x140>)
 800ad38:	4935      	ldr	r1, [pc, #212]	; (800ae10 <acc_confprogram_live_patch.constprop.16+0x148>)
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3e:	4a35      	ldr	r2, [pc, #212]	; (800ae14 <acc_confprogram_live_patch.constprop.16+0x14c>)
 800ad40:	4798      	blx	r3
 800ad42:	21e7      	movs	r1, #231	; 0xe7
 800ad44:	4834      	ldr	r0, [pc, #208]	; (800ae18 <acc_confprogram_live_patch.constprop.16+0x150>)
 800ad46:	f7fa fe02 	bl	800594e <acc_assert_fail>
 800ad4a:	8853      	ldrh	r3, [r2, #2]
 800ad4c:	4699      	mov	r9, r3
 800ad4e:	7913      	ldrb	r3, [r2, #4]
 800ad50:	9303      	str	r3, [sp, #12]
 800ad52:	7953      	ldrb	r3, [r2, #5]
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	2301      	movs	r3, #1
 800ad58:	9a04      	ldr	r2, [sp, #16]
 800ad5a:	469a      	mov	sl, r3
 800ad5c:	4093      	lsls	r3, r2
 800ad5e:	429c      	cmp	r4, r3
 800ad60:	d30c      	bcc.n	800ad7c <acc_confprogram_live_patch.constprop.16+0xb4>
 800ad62:	3b01      	subs	r3, #1
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	4b28      	ldr	r3, [pc, #160]	; (800ae08 <acc_confprogram_live_patch.constprop.16+0x140>)
 800ad68:	9400      	str	r4, [sp, #0]
 800ad6a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800ad6c:	4928      	ldr	r1, [pc, #160]	; (800ae10 <acc_confprogram_live_patch.constprop.16+0x148>)
 800ad6e:	464b      	mov	r3, r9
 800ad70:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <acc_confprogram_live_patch.constprop.16+0x154>)
 800ad72:	47a0      	blx	r4
 800ad74:	2129      	movs	r1, #41	; 0x29
 800ad76:	4828      	ldr	r0, [pc, #160]	; (800ae18 <acc_confprogram_live_patch.constprop.16+0x150>)
 800ad78:	f7fa fde9 	bl	800594e <acc_assert_fail>
 800ad7c:	464a      	mov	r2, r9
 800ad7e:	4b28      	ldr	r3, [pc, #160]	; (800ae20 <acc_confprogram_live_patch.constprop.16+0x158>)
 800ad80:	af07      	add	r7, sp, #28
 800ad82:	4313      	orrs	r3, r2
 800ad84:	803b      	strh	r3, [r7, #0]
 800ad86:	4653      	mov	r3, sl
 800ad88:	0001      	movs	r1, r0
 800ad8a:	80b8      	strh	r0, [r7, #4]
 800ad8c:	a804      	add	r0, sp, #16
 800ad8e:	4684      	mov	ip, r0
 800ad90:	807b      	strh	r3, [r7, #2]
 800ad92:	2312      	movs	r3, #18
 800ad94:	4463      	add	r3, ip
 800ad96:	2204      	movs	r2, #4
 800ad98:	0018      	movs	r0, r3
 800ad9a:	f008 f85f 	bl	8012e5c <memset>
 800ad9e:	4653      	mov	r3, sl
 800ada0:	2205      	movs	r2, #5
 800ada2:	0039      	movs	r1, r7
 800ada4:	4640      	mov	r0, r8
 800ada6:	f7fb f971 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800adaa:	aa04      	add	r2, sp, #16
 800adac:	4694      	mov	ip, r2
 800adae:	2312      	movs	r3, #18
 800adb0:	4463      	add	r3, ip
 800adb2:	0018      	movs	r0, r3
 800adb4:	a906      	add	r1, sp, #24
 800adb6:	f7fe ff17 	bl	8009be8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800adba:	2220      	movs	r2, #32
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	9903      	ldr	r1, [sp, #12]
 800adc0:	1ad2      	subs	r2, r2, r3
 800adc2:	2301      	movs	r3, #1
 800adc4:	425b      	negs	r3, r3
 800adc6:	40d3      	lsrs	r3, r2
 800adc8:	9a03      	ldr	r2, [sp, #12]
 800adca:	4640      	mov	r0, r8
 800adcc:	4093      	lsls	r3, r2
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	439a      	bics	r2, r3
 800add2:	0023      	movs	r3, r4
 800add4:	408b      	lsls	r3, r1
 800add6:	4649      	mov	r1, r9
 800add8:	431a      	orrs	r2, r3
 800adda:	f7fe feab 	bl	8009b34 <acc_sensor_r2_conf_write_instr>
 800adde:	3501      	adds	r5, #1
 800ade0:	e793      	b.n	800ad0a <acc_confprogram_live_patch.constprop.16+0x42>
 800ade2:	9905      	ldr	r1, [sp, #20]
 800ade4:	8853      	ldrh	r3, [r2, #2]
 800ade6:	4640      	mov	r0, r8
 800ade8:	8892      	ldrh	r2, [r2, #4]
 800adea:	9100      	str	r1, [sp, #0]
 800adec:	4659      	mov	r1, fp
 800adee:	f7fe ff01 	bl	8009bf4 <acc_confprogram_modify_runif_sensor.constprop.19>
 800adf2:	e7f4      	b.n	800adde <acc_confprogram_live_patch.constprop.16+0x116>
 800adf4:	4261      	negs	r1, r4
 800adf6:	4161      	adcs	r1, r4
 800adf8:	8853      	ldrh	r3, [r2, #2]
 800adfa:	4640      	mov	r0, r8
 800adfc:	8892      	ldrh	r2, [r2, #4]
 800adfe:	9100      	str	r1, [sp, #0]
 800ae00:	4659      	mov	r1, fp
 800ae02:	f7fe fef7 	bl	8009bf4 <acc_confprogram_modify_runif_sensor.constprop.19>
 800ae06:	e7ea      	b.n	800adde <acc_confprogram_live_patch.constprop.16+0x116>
 800ae08:	200003c0 	.word	0x200003c0
 800ae0c:	0801d9b3 	.word	0x0801d9b3
 800ae10:	0801d15e 	.word	0x0801d15e
 800ae14:	0801da3e 	.word	0x0801da3e
 800ae18:	0801da0d 	.word	0x0801da0d
 800ae1c:	0801d9d5 	.word	0x0801d9d5
 800ae20:	ffffa000 	.word	0xffffa000

0800ae24 <get_dt.constprop.10>:
 800ae24:	b510      	push	{r4, lr}
 800ae26:	f7fb f9b7 	bl	8006198 <acc_rss_integration_get_sensor_reference_frequency>
 800ae2a:	1c01      	adds	r1, r0, #0
 800ae2c:	1c04      	adds	r4, r0, #0
 800ae2e:	4809      	ldr	r0, [pc, #36]	; (800ae54 <get_dt.constprop.10+0x30>)
 800ae30:	f003 fa6a 	bl	800e308 <__aeabi_fdiv>
 800ae34:	f008 fa04 	bl	8013240 <roundf>
 800ae38:	1c01      	adds	r1, r0, #0
 800ae3a:	1c20      	adds	r0, r4, #0
 800ae3c:	f003 fb76 	bl	800e52c <__aeabi_fmul>
 800ae40:	1c01      	adds	r1, r0, #0
 800ae42:	20fe      	movs	r0, #254	; 0xfe
 800ae44:	0580      	lsls	r0, r0, #22
 800ae46:	f003 fa5f 	bl	800e308 <__aeabi_fdiv>
 800ae4a:	4903      	ldr	r1, [pc, #12]	; (800ae58 <get_dt.constprop.10+0x34>)
 800ae4c:	f003 fa5c 	bl	800e308 <__aeabi_fdiv>
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	4f1502f9 	.word	0x4f1502f9
 800ae58:	42f80000 	.word	0x42f80000

0800ae5c <points_to_meter.constprop.9>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	0005      	movs	r5, r0
 800ae60:	f7ff ffe0 	bl	800ae24 <get_dt.constprop.10>
 800ae64:	1c04      	adds	r4, r0, #0
 800ae66:	0028      	movs	r0, r5
 800ae68:	f004 fa76 	bl	800f358 <__aeabi_i2f>
 800ae6c:	1c21      	adds	r1, r4, #0
 800ae6e:	f003 fb5d 	bl	800e52c <__aeabi_fmul>
 800ae72:	4904      	ldr	r1, [pc, #16]	; (800ae84 <points_to_meter.constprop.9+0x28>)
 800ae74:	f003 fb5a 	bl	800e52c <__aeabi_fmul>
 800ae78:	21fc      	movs	r1, #252	; 0xfc
 800ae7a:	0589      	lsls	r1, r1, #22
 800ae7c:	f003 fb56 	bl	800e52c <__aeabi_fmul>
 800ae80:	bd70      	pop	{r4, r5, r6, pc}
 800ae82:	46c0      	nop			; (mov r8, r8)
 800ae84:	4d8ef3c2 	.word	0x4d8ef3c2

0800ae88 <UARTEx_SetNbDataToProcess.lto_priv.675>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae88:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ae8a:	4b16      	ldr	r3, [pc, #88]	; (800aee4 <UARTEx_SetNbDataToProcess.lto_priv.675+0x5c>)
{
 800ae8c:	b085      	sub	sp, #20
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ae8e:	9302      	str	r3, [sp, #8]
 800ae90:	2308      	movs	r3, #8
 800ae92:	33ff      	adds	r3, #255	; 0xff
 800ae94:	9303      	str	r3, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae96:	4b14      	ldr	r3, [pc, #80]	; (800aee8 <UARTEx_SetNbDataToProcess.lto_priv.675+0x60>)
{
 800ae98:	0004      	movs	r4, r0
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4b13      	ldr	r3, [pc, #76]	; (800aeec <UARTEx_SetNbDataToProcess.lto_priv.675+0x64>)
 800ae9e:	9301      	str	r3, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aea0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01b      	beq.n	800aede <UARTEx_SetNbDataToProcess.lto_priv.675+0x56>
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aea6:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aea8:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aeaa:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aeac:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aeb2:	5cf0      	ldrb	r0, [r6, r3]
 800aeb4:	5cd1      	ldrb	r1, [r2, r3]
 800aeb6:	00c0      	lsls	r0, r0, #3
 800aeb8:	f003 fef4 	bl	800eca4 <__divsi3>
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aebc:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aebe:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aec0:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800aec2:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aec4:	5cf0      	ldrb	r0, [r6, r3]
 800aec6:	5cd1      	ldrb	r1, [r2, r3]
 800aec8:	00c0      	lsls	r0, r0, #3
 800aeca:	f003 feeb 	bl	800eca4 <__divsi3>
 800aece:	b280      	uxth	r0, r0
 800aed0:	0023      	movs	r3, r4
 800aed2:	346a      	adds	r4, #106	; 0x6a
 800aed4:	3368      	adds	r3, #104	; 0x68
 800aed6:	8018      	strh	r0, [r3, #0]
 800aed8:	8027      	strh	r7, [r4, #0]
  }
}
 800aeda:	b005      	add	sp, #20
 800aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800aede:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800aee0:	0007      	movs	r7, r0
 800aee2:	e7f5      	b.n	800aed0 <UARTEx_SetNbDataToProcess.lto_priv.675+0x48>
 800aee4:	03010101 	.word	0x03010101
 800aee8:	04020408 	.word	0x04020408
 800aeec:	01010108 	.word	0x01010108

0800aef0 <HAL_UARTEx_DisableFifoMode>:
{
 800aef0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800aef2:	0004      	movs	r4, r0
 800aef4:	347c      	adds	r4, #124	; 0x7c
 800aef6:	7822      	ldrb	r2, [r4, #0]
 800aef8:	2302      	movs	r3, #2
 800aefa:	2a01      	cmp	r2, #1
 800aefc:	d010      	beq.n	800af20 <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800aefe:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af00:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800af02:	1d05      	adds	r5, r0, #4
 800af04:	3322      	adds	r3, #34	; 0x22
 800af06:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af08:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800af0a:	6813      	ldr	r3, [r2, #0]
 800af0c:	43b3      	bics	r3, r6
 800af0e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af10:	4b04      	ldr	r3, [pc, #16]	; (800af24 <HAL_UARTEx_DisableFifoMode+0x34>)
 800af12:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800af14:	2300      	movs	r3, #0
 800af16:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af18:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800af1a:	2220      	movs	r2, #32
 800af1c:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800af1e:	7023      	strb	r3, [r4, #0]
}
 800af20:	0018      	movs	r0, r3
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	dfffffff 	.word	0xdfffffff

0800af28 <HAL_UART_Transmit>:
{
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	46de      	mov	lr, fp
 800af2c:	464e      	mov	r6, r9
 800af2e:	4645      	mov	r5, r8
 800af30:	4657      	mov	r7, sl
 800af32:	469b      	mov	fp, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800af34:	1d03      	adds	r3, r0, #4
 800af36:	4699      	mov	r9, r3
 800af38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800af3a:	b5e0      	push	{r5, r6, r7, lr}
 800af3c:	0004      	movs	r4, r0
 800af3e:	000d      	movs	r5, r1
    return HAL_BUSY;
 800af40:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800af42:	2b20      	cmp	r3, #32
 800af44:	d14c      	bne.n	800afe0 <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800af46:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800af48:	2900      	cmp	r1, #0
 800af4a:	d049      	beq.n	800afe0 <HAL_UART_Transmit+0xb8>
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	d047      	beq.n	800afe0 <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af50:	2380      	movs	r3, #128	; 0x80
 800af52:	68a1      	ldr	r1, [r4, #8]
 800af54:	015b      	lsls	r3, r3, #5
 800af56:	4299      	cmp	r1, r3
 800af58:	d104      	bne.n	800af64 <HAL_UART_Transmit+0x3c>
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_UART_Transmit+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800af60:	4205      	tst	r5, r0
 800af62:	d13d      	bne.n	800afe0 <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800af64:	237c      	movs	r3, #124	; 0x7c
 800af66:	4698      	mov	r8, r3
 800af68:	44a0      	add	r8, r4
 800af6a:	4643      	mov	r3, r8
 800af6c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800af6e:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800af70:	2b01      	cmp	r3, #1
 800af72:	d035      	beq.n	800afe0 <HAL_UART_Transmit+0xb8>
 800af74:	2301      	movs	r3, #1
 800af76:	4640      	mov	r0, r8
 800af78:	7003      	strb	r3, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af7a:	0023      	movs	r3, r4
 800af7c:	2600      	movs	r6, #0
 800af7e:	3388      	adds	r3, #136	; 0x88
 800af80:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af82:	4648      	mov	r0, r9
 800af84:	2321      	movs	r3, #33	; 0x21
 800af86:	67c3      	str	r3, [r0, #124]	; 0x7c
 800af88:	4b21      	ldr	r3, [pc, #132]	; (800b010 <HAL_UART_Transmit+0xe8>)
    huart->TxXferCount = Size;
 800af8a:	0027      	movs	r7, r4
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	3756      	adds	r7, #86	; 0x56
 800af90:	469a      	mov	sl, r3
    huart->TxXferSize  = Size;
 800af92:	0023      	movs	r3, r4
 800af94:	3354      	adds	r3, #84	; 0x54
 800af96:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af98:	2380      	movs	r3, #128	; 0x80
    huart->TxXferCount = Size;
 800af9a:	803a      	strh	r2, [r7, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af9c:	015b      	lsls	r3, r3, #5
 800af9e:	4299      	cmp	r1, r3
 800afa0:	d104      	bne.n	800afac <HAL_UART_Transmit+0x84>
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	42b3      	cmp	r3, r6
 800afa6:	d101      	bne.n	800afac <HAL_UART_Transmit+0x84>
 800afa8:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800afaa:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800afac:	883b      	ldrh	r3, [r7, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10d      	bne.n	800afce <HAL_UART_Transmit+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800afb2:	465b      	mov	r3, fp
 800afb4:	4652      	mov	r2, sl
 800afb6:	2140      	movs	r1, #64	; 0x40
 800afb8:	0020      	movs	r0, r4
 800afba:	f7fe fdeb 	bl	8009b94 <UART_WaitOnFlagUntilTimeout.constprop.99>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d10d      	bne.n	800afde <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800afc2:	2320      	movs	r3, #32
 800afc4:	464a      	mov	r2, r9
 800afc6:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800afc8:	4643      	mov	r3, r8
 800afca:	7018      	strb	r0, [r3, #0]
 800afcc:	e008      	b.n	800afe0 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afce:	465b      	mov	r3, fp
 800afd0:	4652      	mov	r2, sl
 800afd2:	2180      	movs	r1, #128	; 0x80
 800afd4:	0020      	movs	r0, r4
 800afd6:	f7fe fddd 	bl	8009b94 <UART_WaitOnFlagUntilTimeout.constprop.99>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d006      	beq.n	800afec <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800afde:	2003      	movs	r0, #3
}
 800afe0:	bc3c      	pop	{r2, r3, r4, r5}
 800afe2:	4690      	mov	r8, r2
 800afe4:	4699      	mov	r9, r3
 800afe6:	46a2      	mov	sl, r4
 800afe8:	46ab      	mov	fp, r5
 800afea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afec:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800afee:	2d00      	cmp	r5, #0
 800aff0:	d109      	bne.n	800b006 <HAL_UART_Transmit+0xde>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aff2:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800aff4:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aff6:	05db      	lsls	r3, r3, #23
 800aff8:	0ddb      	lsrs	r3, r3, #23
 800affa:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800affc:	883b      	ldrh	r3, [r7, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	b29b      	uxth	r3, r3
 800b002:	803b      	strh	r3, [r7, #0]
 800b004:	e7d2      	b.n	800afac <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b006:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800b008:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b00a:	6293      	str	r3, [r2, #40]	; 0x28
 800b00c:	e7f6      	b.n	800affc <HAL_UART_Transmit+0xd4>
 800b00e:	46c0      	nop			; (mov r8, r8)
 800b010:	200003c0 	.word	0x200003c0

0800b014 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800b014:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800b016:	2809      	cmp	r0, #9
 800b018:	d803      	bhi.n	800b022 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b01a:	011b      	lsls	r3, r3, #4
 800b01c:	4318      	orrs	r0, r3
 800b01e:	b2c0      	uxtb	r0, r0
}
 800b020:	4770      	bx	lr
    Param -= 10U;
 800b022:	380a      	subs	r0, #10
    bcdhigh++;
 800b024:	3301      	adds	r3, #1
    Param -= 10U;
 800b026:	b2c0      	uxtb	r0, r0
 800b028:	e7f5      	b.n	800b016 <RTC_ByteToBcd2+0x2>

0800b02a <HAL_RTC_SetAlarm_IT.constprop.133>:
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02c:	46ce      	mov	lr, r9
 800b02e:	4647      	mov	r7, r8
  __HAL_LOCK(hrtc);
 800b030:	4d4e      	ldr	r5, [pc, #312]	; (800b16c <HAL_RTC_SetAlarm_IT.constprop.133+0x142>)
 800b032:	2302      	movs	r3, #2
 800b034:	002a      	movs	r2, r5
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b036:	b580      	push	{r7, lr}
  __HAL_LOCK(hrtc);
 800b038:	3228      	adds	r2, #40	; 0x28
 800b03a:	7811      	ldrb	r1, [r2, #0]
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800b03c:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 800b03e:	0018      	movs	r0, r3
 800b040:	2901      	cmp	r1, #1
 800b042:	d06c      	beq.n	800b11e <HAL_RTC_SetAlarm_IT.constprop.133+0xf4>
 800b044:	2101      	movs	r1, #1
 800b046:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b048:	002a      	movs	r2, r5
 800b04a:	3229      	adds	r2, #41	; 0x29
 800b04c:	7013      	strb	r3, [r2, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b04e:	2240      	movs	r2, #64	; 0x40
 800b050:	682c      	ldr	r4, [r5, #0]
 800b052:	69a3      	ldr	r3, [r4, #24]
 800b054:	4013      	ands	r3, r2
 800b056:	d100      	bne.n	800b05a <HAL_RTC_SetAlarm_IT.constprop.133+0x30>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b058:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b05a:	7830      	ldrb	r0, [r6, #0]
 800b05c:	f7ff ffda 	bl	800b014 <RTC_ByteToBcd2>
 800b060:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b062:	7870      	ldrb	r0, [r6, #1]
 800b064:	f7ff ffd6 	bl	800b014 <RTC_ByteToBcd2>
 800b068:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800b06a:	78b0      	ldrb	r0, [r6, #2]
 800b06c:	f7ff ffd2 	bl	800b014 <RTC_ByteToBcd2>
 800b070:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b072:	1c73      	adds	r3, r6, #1
 800b074:	7fd8      	ldrb	r0, [r3, #31]
 800b076:	f7ff ffcd 	bl	800b014 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b07a:	6972      	ldr	r2, [r6, #20]
 800b07c:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b07e:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b080:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b082:	78f2      	ldrb	r2, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b084:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b086:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b088:	4313      	orrs	r3, r2
 800b08a:	464a      	mov	r2, r9
 800b08c:	4313      	orrs	r3, r2
 800b08e:	4642      	mov	r2, r8
 800b090:	0412      	lsls	r2, r2, #16
 800b092:	4313      	orrs	r3, r2
 800b094:	433b      	orrs	r3, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b096:	69b2      	ldr	r2, [r6, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b098:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b09a:	6873      	ldr	r3, [r6, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b09c:	6a71      	ldr	r1, [r6, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b09e:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0a0:	22ca      	movs	r2, #202	; 0xca
 800b0a2:	6262      	str	r2, [r4, #36]	; 0x24
 800b0a4:	3a77      	subs	r2, #119	; 0x77
 800b0a6:	6262      	str	r2, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b0a8:	32ad      	adds	r2, #173	; 0xad
 800b0aa:	4291      	cmp	r1, r2
 800b0ac:	d13b      	bne.n	800b126 <HAL_RTC_SetAlarm_IT.constprop.133+0xfc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b0ae:	69a2      	ldr	r2, [r4, #24]
 800b0b0:	492f      	ldr	r1, [pc, #188]	; (800b170 <HAL_RTC_SetAlarm_IT.constprop.133+0x146>)
 800b0b2:	400a      	ands	r2, r1
 800b0b4:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0ba:	4311      	orrs	r1, r2
 800b0bc:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b0be:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b0c0:	22fa      	movs	r2, #250	; 0xfa
 800b0c2:	0092      	lsls	r2, r2, #2
 800b0c4:	4694      	mov	ip, r2
 800b0c6:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b0c8:	68e2      	ldr	r2, [r4, #12]
 800b0ca:	400a      	ands	r2, r1
 800b0cc:	d01b      	beq.n	800b106 <HAL_RTC_SetAlarm_IT.constprop.133+0xdc>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b0ce:	6420      	str	r0, [r4, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b0d0:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b0d2:	2380      	movs	r3, #128	; 0x80
 800b0d4:	69a2      	ldr	r2, [r4, #24]
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b0dc:	2380      	movs	r3, #128	; 0x80
 800b0de:	69a2      	ldr	r2, [r4, #24]
 800b0e0:	015b      	lsls	r3, r3, #5
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	61a3      	str	r3, [r4, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b0e6:	2380      	movs	r3, #128	; 0x80
 800b0e8:	4a22      	ldr	r2, [pc, #136]	; (800b174 <HAL_RTC_SetAlarm_IT.constprop.133+0x14a>)
 800b0ea:	031b      	lsls	r3, r3, #12
 800b0ec:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  __HAL_UNLOCK(hrtc);
 800b0ee:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0f4:	23ff      	movs	r3, #255	; 0xff
 800b0f6:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800b0f8:	002b      	movs	r3, r5
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	3329      	adds	r3, #41	; 0x29
  __HAL_UNLOCK(hrtc);
 800b0fe:	3528      	adds	r5, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800b100:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800b102:	7028      	strb	r0, [r5, #0]
 800b104:	e00b      	b.n	800b11e <HAL_RTC_SetAlarm_IT.constprop.133+0xf4>
 800b106:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b108:	1bf6      	subs	r6, r6, r7
 800b10a:	4566      	cmp	r6, ip
 800b10c:	d9dc      	bls.n	800b0c8 <HAL_RTC_SetAlarm_IT.constprop.133+0x9e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b10e:	23ff      	movs	r3, #255	; 0xff
 800b110:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b112:	002b      	movs	r3, r5
 800b114:	2003      	movs	r0, #3
 800b116:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800b118:	3528      	adds	r5, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b11a:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800b11c:	702a      	strb	r2, [r5, #0]
}
 800b11e:	bc0c      	pop	{r2, r3}
 800b120:	4690      	mov	r8, r2
 800b122:	4699      	mov	r9, r3
 800b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b126:	69a2      	ldr	r2, [r4, #24]
 800b128:	4913      	ldr	r1, [pc, #76]	; (800b178 <HAL_RTC_SetAlarm_IT.constprop.133+0x14e>)
 800b12a:	400a      	ands	r2, r1
 800b12c:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b12e:	2202      	movs	r2, #2
 800b130:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b132:	4311      	orrs	r1, r2
 800b134:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b136:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b138:	22fa      	movs	r2, #250	; 0xfa
 800b13a:	0092      	lsls	r2, r2, #2
 800b13c:	4694      	mov	ip, r2
 800b13e:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b140:	68e2      	ldr	r2, [r4, #12]
 800b142:	400a      	ands	r2, r1
 800b144:	d00c      	beq.n	800b160 <HAL_RTC_SetAlarm_IT.constprop.133+0x136>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b146:	64a0      	str	r0, [r4, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b148:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b14a:	2380      	movs	r3, #128	; 0x80
 800b14c:	69a2      	ldr	r2, [r4, #24]
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	4313      	orrs	r3, r2
 800b152:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b154:	2380      	movs	r3, #128	; 0x80
 800b156:	69a2      	ldr	r2, [r4, #24]
 800b158:	019b      	lsls	r3, r3, #6
 800b15a:	4313      	orrs	r3, r2
 800b15c:	61a3      	str	r3, [r4, #24]
 800b15e:	e7c2      	b.n	800b0e6 <HAL_RTC_SetAlarm_IT.constprop.133+0xbc>
 800b160:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b162:	1bf6      	subs	r6, r6, r7
 800b164:	4566      	cmp	r6, ip
 800b166:	d9eb      	bls.n	800b140 <HAL_RTC_SetAlarm_IT.constprop.133+0x116>
 800b168:	e7d1      	b.n	800b10e <HAL_RTC_SetAlarm_IT.constprop.133+0xe4>
 800b16a:	46c0      	nop			; (mov r8, r8)
 800b16c:	200003c0 	.word	0x200003c0
 800b170:	fffffeff 	.word	0xfffffeff
 800b174:	40021804 	.word	0x40021804
 800b178:	fffffdff 	.word	0xfffffdff

0800b17c <HAL_InitTick>:
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b17c:	21fa      	movs	r1, #250	; 0xfa
{
 800b17e:	b570      	push	{r4, r5, r6, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b180:	4d11      	ldr	r5, [pc, #68]	; (800b1c8 <HAL_InitTick+0x4c>)
{
 800b182:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b184:	0089      	lsls	r1, r1, #2
 800b186:	6828      	ldr	r0, [r5, #0]
 800b188:	f003 fd02 	bl	800eb90 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <HAL_InitTick+0x50>)
 800b18e:	3801      	subs	r0, #1
 800b190:	4298      	cmp	r0, r3
 800b192:	d901      	bls.n	800b198 <HAL_InitTick+0x1c>
      status = HAL_ERROR;
 800b194:	2001      	movs	r0, #1
}
 800b196:	bd70      	pop	{r4, r5, r6, pc}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b198:	490d      	ldr	r1, [pc, #52]	; (800b1d0 <HAL_InitTick+0x54>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b19a:	4a0e      	ldr	r2, [pc, #56]	; (800b1d4 <HAL_InitTick+0x58>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b19c:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b19e:	20c0      	movs	r0, #192	; 0xc0
 800b1a0:	6a13      	ldr	r3, [r2, #32]
 800b1a2:	0600      	lsls	r0, r0, #24
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	4303      	orrs	r3, r0
 800b1aa:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1ae:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1b0:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1b2:	600b      	str	r3, [r1, #0]
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b1b4:	2c03      	cmp	r4, #3
 800b1b6:	d8ed      	bhi.n	800b194 <HAL_InitTick+0x18>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b1b8:	6a13      	ldr	r3, [r2, #32]
 800b1ba:	07a1      	lsls	r1, r4, #30
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	0a1b      	lsrs	r3, r3, #8
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	6213      	str	r3, [r2, #32]
        uwTickPrio = TickPriority;
 800b1c4:	606c      	str	r4, [r5, #4]
 800b1c6:	e7e6      	b.n	800b196 <HAL_InitTick+0x1a>
 800b1c8:	20000000 	.word	0x20000000
 800b1cc:	00ffffff 	.word	0x00ffffff
 800b1d0:	e000e010 	.word	0xe000e010
 800b1d4:	e000ed00 	.word	0xe000ed00

0800b1d8 <HAL_DMA_DeInit.part.1>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800b1da:	2501      	movs	r5, #1
 800b1dc:	6807      	ldr	r7, [r0, #0]
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b1de:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800b1e0:	683b      	ldr	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b1e2:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800b1e4:	43ab      	bics	r3, r5
 800b1e6:	603b      	str	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b1e8:	4b18      	ldr	r3, [pc, #96]	; (800b24c <HAL_DMA_DeInit.part.1+0x74>)
  hdma->Instance->CCR  = 0U;
 800b1ea:	2600      	movs	r6, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b1ec:	18f8      	adds	r0, r7, r3
 800b1ee:	f003 fccf 	bl	800eb90 <__udivsi3>
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b1f2:	231c      	movs	r3, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b1f4:	0080      	lsls	r0, r0, #2
 800b1f6:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b1f8:	4018      	ands	r0, r3
 800b1fa:	002b      	movs	r3, r5
 800b1fc:	4083      	lsls	r3, r0
 800b1fe:	4a14      	ldr	r2, [pc, #80]	; (800b250 <HAL_DMA_DeInit.part.1+0x78>)
  hdma->Instance->CCR  = 0U;
 800b200:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b202:	6851      	ldr	r1, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b204:	0020      	movs	r0, r4
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b206:	430b      	orrs	r3, r1
 800b208:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b20a:	f7fe fe52 	bl	8009eb2 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800b20e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b210:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 800b212:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b214:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b216:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	1e5a      	subs	r2, r3, #1
 800b21c:	2a03      	cmp	r2, #3
 800b21e:	d807      	bhi.n	800b230 <HAL_DMA_DeInit.part.1+0x58>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b220:	490c      	ldr	r1, [pc, #48]	; (800b254 <HAL_DMA_DeInit.part.1+0x7c>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b222:	4095      	lsls	r5, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b224:	468c      	mov	ip, r1
 800b226:	4463      	add	r3, ip
 800b228:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b22a:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b22c:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <HAL_DMA_DeInit.part.1+0x80>)
 800b22e:	605d      	str	r5, [r3, #4]
  hdma->XferCpltCallback = NULL;
 800b230:	2000      	movs	r0, #0
 800b232:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b234:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b236:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b238:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800b23a:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800b23c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800b23e:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b240:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800b242:	1da3      	adds	r3, r4, #6
  __HAL_UNLOCK(hdma);
 800b244:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 800b246:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800b248:	77e0      	strb	r0, [r4, #31]
}
 800b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b24c:	bffdfff8 	.word	0xbffdfff8
 800b250:	40020000 	.word	0x40020000
 800b254:	1000823f 	.word	0x1000823f
 800b258:	40020940 	.word	0x40020940

0800b25c <HAL_DMA_IRQHandler>:
{
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b25e:	211c      	movs	r1, #28
 800b260:	2704      	movs	r7, #4
 800b262:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 800b264:	4b27      	ldr	r3, [pc, #156]	; (800b304 <HAL_DMA_IRQHandler+0xa8>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b266:	4021      	ands	r1, r4
 800b268:	003c      	movs	r4, r7
 800b26a:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800b26c:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b26e:	6802      	ldr	r2, [r0, #0]
 800b270:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b272:	4226      	tst	r6, r4
 800b274:	d00f      	beq.n	800b296 <HAL_DMA_IRQHandler+0x3a>
 800b276:	423d      	tst	r5, r7
 800b278:	d00d      	beq.n	800b296 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b27a:	6811      	ldr	r1, [r2, #0]
 800b27c:	0689      	lsls	r1, r1, #26
 800b27e:	d402      	bmi.n	800b286 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b280:	6811      	ldr	r1, [r2, #0]
 800b282:	43b9      	bics	r1, r7
 800b284:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800b286:	685a      	ldr	r2, [r3, #4]
 800b288:	4314      	orrs	r4, r2
 800b28a:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800b28c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d01b      	beq.n	800b2ca <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800b292:	4798      	blx	r3
 800b294:	e019      	b.n	800b2ca <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b296:	2702      	movs	r7, #2
 800b298:	003c      	movs	r4, r7
 800b29a:	408c      	lsls	r4, r1
 800b29c:	4226      	tst	r6, r4
 800b29e:	d015      	beq.n	800b2cc <HAL_DMA_IRQHandler+0x70>
 800b2a0:	423d      	tst	r5, r7
 800b2a2:	d013      	beq.n	800b2cc <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b2a4:	6811      	ldr	r1, [r2, #0]
 800b2a6:	0689      	lsls	r1, r1, #26
 800b2a8:	d406      	bmi.n	800b2b8 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b2aa:	250a      	movs	r5, #10
 800b2ac:	6811      	ldr	r1, [r2, #0]
 800b2ae:	43a9      	bics	r1, r5
 800b2b0:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	1d82      	adds	r2, r0, #6
 800b2b6:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b2b8:	685a      	ldr	r2, [r3, #4]
 800b2ba:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 800b2bc:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b2be:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 800b2c0:	1d43      	adds	r3, r0, #5
 800b2c2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800b2c4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d1e3      	bne.n	800b292 <HAL_DMA_IRQHandler+0x36>
}
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b2cc:	2408      	movs	r4, #8
 800b2ce:	0027      	movs	r7, r4
 800b2d0:	408f      	lsls	r7, r1
 800b2d2:	423e      	tst	r6, r7
 800b2d4:	d0f9      	beq.n	800b2ca <HAL_DMA_IRQHandler+0x6e>
 800b2d6:	4225      	tst	r5, r4
 800b2d8:	d0f7      	beq.n	800b2ca <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2da:	250e      	movs	r5, #14
 800b2dc:	6814      	ldr	r4, [r2, #0]
 800b2de:	43ac      	bics	r4, r5
 800b2e0:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	0015      	movs	r5, r2
 800b2e6:	408d      	lsls	r5, r1
 800b2e8:	0029      	movs	r1, r5
 800b2ea:	685c      	ldr	r4, [r3, #4]
 800b2ec:	4321      	orrs	r1, r4
 800b2ee:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b2f0:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b2f2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800b2f4:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	1d43      	adds	r3, r0, #5
 800b2fa:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800b2fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d1c7      	bne.n	800b292 <HAL_DMA_IRQHandler+0x36>
 800b302:	e7e2      	b.n	800b2ca <HAL_DMA_IRQHandler+0x6e>
 800b304:	40020000 	.word	0x40020000

0800b308 <HAL_DMA_Abort_IT>:
{
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800b30a:	2301      	movs	r3, #1
 800b30c:	1d44      	adds	r4, r0, #5
 800b30e:	77e3      	strb	r3, [r4, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b310:	1d85      	adds	r5, r0, #6
 800b312:	7fea      	ldrb	r2, [r5, #31]
 800b314:	2a02      	cmp	r2, #2
 800b316:	d003      	beq.n	800b320 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b318:	2204      	movs	r2, #4
 800b31a:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800b31c:	0018      	movs	r0, r3
 800b31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b320:	260e      	movs	r6, #14
 800b322:	6802      	ldr	r2, [r0, #0]
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	43b1      	bics	r1, r6
 800b328:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b32a:	6811      	ldr	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b32c:	4e13      	ldr	r6, [pc, #76]	; (800b37c <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE(hdma);
 800b32e:	4399      	bics	r1, r3
 800b330:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b332:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b334:	6811      	ldr	r1, [r2, #0]
 800b336:	4031      	ands	r1, r6
 800b338:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800b33a:	4a11      	ldr	r2, [pc, #68]	; (800b380 <HAL_DMA_Abort_IT+0x78>)
 800b33c:	211c      	movs	r1, #28
 800b33e:	4694      	mov	ip, r2
 800b340:	6857      	ldr	r7, [r2, #4]
 800b342:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b344:	4011      	ands	r1, r2
 800b346:	408b      	lsls	r3, r1
 800b348:	4662      	mov	r2, ip
 800b34a:	433b      	orrs	r3, r7
 800b34c:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b34e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b350:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b352:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b354:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b356:	2b00      	cmp	r3, #0
 800b358:	d005      	beq.n	800b366 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	4032      	ands	r2, r6
 800b35e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b360:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b362:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b364:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b366:	2301      	movs	r3, #1
 800b368:	77eb      	strb	r3, [r5, #31]
    __HAL_UNLOCK(hdma);
 800b36a:	2500      	movs	r5, #0
 800b36c:	77e5      	strb	r5, [r4, #31]
    if (hdma->XferAbortCallback != NULL)
 800b36e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b370:	0013      	movs	r3, r2
 800b372:	42aa      	cmp	r2, r5
 800b374:	d0d2      	beq.n	800b31c <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800b376:	4790      	blx	r2
 800b378:	002b      	movs	r3, r5
 800b37a:	e7cf      	b.n	800b31c <HAL_DMA_Abort_IT+0x14>
 800b37c:	fffffeff 	.word	0xfffffeff
 800b380:	40020000 	.word	0x40020000

0800b384 <I2C_ITError.lto_priv.676>:
{
 800b384:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b386:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b388:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b38a:	2600      	movs	r6, #0
 800b38c:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b38e:	3541      	adds	r5, #65	; 0x41
 800b390:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b392:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b394:	4a2d      	ldr	r2, [pc, #180]	; (800b44c <I2C_ITError.lto_priv.676+0xc8>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b396:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b398:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b39a:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b39c:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800b39e:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800b3a0:	4311      	orrs	r1, r2
 800b3a2:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d822      	bhi.n	800b3ee <I2C_ITError.lto_priv.676+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b3a8:	2103      	movs	r1, #3
 800b3aa:	f7fe fcf3 	bl	8009d94 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b3ae:	2328      	movs	r3, #40	; 0x28
 800b3b0:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b3b2:	4b27      	ldr	r3, [pc, #156]	; (800b450 <I2C_ITError.lto_priv.676+0xcc>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3b4:	6326      	str	r6, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b3b6:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b3b8:	2280      	movs	r2, #128	; 0x80
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	01d2      	lsls	r2, r2, #7
 800b3be:	6819      	ldr	r1, [r3, #0]
 800b3c0:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3c2:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b3c4:	d01f      	beq.n	800b406 <I2C_ITError.lto_priv.676+0x82>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3c6:	4923      	ldr	r1, [pc, #140]	; (800b454 <I2C_ITError.lto_priv.676+0xd0>)
    if (hi2c->hdmatx != NULL)
 800b3c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b3ca:	400a      	ands	r2, r1
 800b3cc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d00c      	beq.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b3d2:	4b21      	ldr	r3, [pc, #132]	; (800b458 <I2C_ITError.lto_priv.676+0xd4>)
      __HAL_UNLOCK(hi2c);
 800b3d4:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b3d6:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b3d8:	0023      	movs	r3, r4
 800b3da:	3340      	adds	r3, #64	; 0x40
 800b3dc:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b3de:	f7ff ff93 	bl	800b308 <HAL_DMA_Abort_IT>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d002      	beq.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b3e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b3e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b3ea:	4798      	blx	r3
}
 800b3ec:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b3ee:	2107      	movs	r1, #7
 800b3f0:	f7fe fcd0 	bl	8009d94 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b3f4:	782b      	ldrb	r3, [r5, #0]
 800b3f6:	2b60      	cmp	r3, #96	; 0x60
 800b3f8:	d001      	beq.n	800b3fe <I2C_ITError.lto_priv.676+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b3fa:	2320      	movs	r3, #32
 800b3fc:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3fe:	2300      	movs	r3, #0
 800b400:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b402:	6363      	str	r3, [r4, #52]	; 0x34
 800b404:	e7d8      	b.n	800b3b8 <I2C_ITError.lto_priv.676+0x34>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b406:	2080      	movs	r0, #128	; 0x80
 800b408:	0200      	lsls	r0, r0, #8
 800b40a:	4002      	ands	r2, r0
 800b40c:	d013      	beq.n	800b436 <I2C_ITError.lto_priv.676+0xb2>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	4812      	ldr	r0, [pc, #72]	; (800b45c <I2C_ITError.lto_priv.676+0xd8>)
 800b412:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800b414:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b416:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0e7      	beq.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b41c:	4b0e      	ldr	r3, [pc, #56]	; (800b458 <I2C_ITError.lto_priv.676+0xd4>)
 800b41e:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b420:	0023      	movs	r3, r4
 800b422:	3340      	adds	r3, #64	; 0x40
 800b424:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b426:	f7ff ff6f 	bl	800b308 <HAL_DMA_Abort_IT>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0de      	beq.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b42e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b430:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b432:	4798      	blx	r3
 800b434:	e7da      	b.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b436:	782b      	ldrb	r3, [r5, #0]
 800b438:	3440      	adds	r4, #64	; 0x40
 800b43a:	2b60      	cmp	r3, #96	; 0x60
 800b43c:	d103      	bne.n	800b446 <I2C_ITError.lto_priv.676+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 800b43e:	3b40      	subs	r3, #64	; 0x40
 800b440:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800b442:	7022      	strb	r2, [r4, #0]
 800b444:	e7d2      	b.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
    __HAL_UNLOCK(hi2c);
 800b446:	7022      	strb	r2, [r4, #0]
 800b448:	e7d0      	b.n	800b3ec <I2C_ITError.lto_priv.676+0x68>
 800b44a:	46c0      	nop			; (mov r8, r8)
 800b44c:	ffff0000 	.word	0xffff0000
 800b450:	0800b461 	.word	0x0800b461
 800b454:	ffffbfff 	.word	0xffffbfff
 800b458:	08009ddd 	.word	0x08009ddd
 800b45c:	ffff7fff 	.word	0xffff7fff

0800b460 <I2C_Slave_ISR_IT>:
{
 800b460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b462:	46c6      	mov	lr, r8
  __HAL_LOCK(hi2c);
 800b464:	0007      	movs	r7, r0
{
 800b466:	b500      	push	{lr}
  __HAL_LOCK(hi2c);
 800b468:	3740      	adds	r7, #64	; 0x40
{
 800b46a:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800b46c:	783a      	ldrb	r2, [r7, #0]
{
 800b46e:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800b470:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800b472:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 800b474:	2002      	movs	r0, #2
 800b476:	2a01      	cmp	r2, #1
 800b478:	d100      	bne.n	800b47c <I2C_Slave_ISR_IT+0x1c>
 800b47a:	e114      	b.n	800b6a6 <I2C_Slave_ISR_IT+0x246>
 800b47c:	2201      	movs	r2, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b47e:	0909      	lsrs	r1, r1, #4
  __HAL_LOCK(hi2c);
 800b480:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b482:	4211      	tst	r1, r2
 800b484:	d05e      	beq.n	800b544 <I2C_Slave_ISR_IT+0xe4>
 800b486:	0931      	lsrs	r1, r6, #4
 800b488:	4211      	tst	r1, r2
 800b48a:	d05b      	beq.n	800b544 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount == 0U)
 800b48c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b48e:	2a00      	cmp	r2, #0
 800b490:	d149      	bne.n	800b526 <I2C_Slave_ISR_IT+0xc6>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800b492:	0022      	movs	r2, r4
 800b494:	3241      	adds	r2, #65	; 0x41
 800b496:	7811      	ldrb	r1, [r2, #0]
 800b498:	2928      	cmp	r1, #40	; 0x28
 800b49a:	d134      	bne.n	800b506 <I2C_Slave_ISR_IT+0xa6>
 800b49c:	2180      	movs	r1, #128	; 0x80
 800b49e:	0489      	lsls	r1, r1, #18
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	d130      	bne.n	800b506 <I2C_Slave_ISR_IT+0xa6>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b4a4:	0029      	movs	r1, r5
 800b4a6:	0020      	movs	r0, r4
 800b4a8:	f7fe fcb3 	bl	8009e12 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4698      	mov	r8, r3
 800b4b0:	06ab      	lsls	r3, r5, #26
 800b4b2:	d400      	bmi.n	800b4b6 <I2C_Slave_ISR_IT+0x56>
 800b4b4:	e0f5      	b.n	800b6a2 <I2C_Slave_ISR_IT+0x242>
 800b4b6:	4643      	mov	r3, r8
 800b4b8:	0976      	lsrs	r6, r6, #5
 800b4ba:	421e      	tst	r6, r3
 800b4bc:	d100      	bne.n	800b4c0 <I2C_Slave_ISR_IT+0x60>
 800b4be:	e0f0      	b.n	800b6a2 <I2C_Slave_ISR_IT+0x242>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4c0:	2220      	movs	r2, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b4c2:	6823      	ldr	r3, [r4, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b4c4:	2107      	movs	r1, #7
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b4c6:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b4c8:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4ca:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b4cc:	f7fe fc62 	bl	8009d94 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b4d0:	2280      	movs	r2, #128	; 0x80
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	0212      	lsls	r2, r2, #8
 800b4d6:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b4d8:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800b4de:	685a      	ldr	r2, [r3, #4]
 800b4e0:	497a      	ldr	r1, [pc, #488]	; (800b6cc <I2C_Slave_ISR_IT+0x26c>)
 800b4e2:	400a      	ands	r2, r1
 800b4e4:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b4e6:	f7fe fc86 	bl	8009df6 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b4ea:	4642      	mov	r2, r8
 800b4ec:	0bb3      	lsrs	r3, r6, #14
 800b4ee:	4213      	tst	r3, r2
 800b4f0:	d100      	bne.n	800b4f4 <I2C_Slave_ISR_IT+0x94>
 800b4f2:	e09e      	b.n	800b632 <I2C_Slave_ISR_IT+0x1d2>
    if (hi2c->hdmatx != NULL)
 800b4f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d100      	bne.n	800b4fc <I2C_Slave_ISR_IT+0x9c>
 800b4fa:	e0a1      	b.n	800b640 <I2C_Slave_ISR_IT+0x1e0>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	b29b      	uxth	r3, r3
 800b502:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b504:	e09c      	b.n	800b640 <I2C_Slave_ISR_IT+0x1e0>
 800b506:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b508:	7810      	ldrb	r0, [r2, #0]
 800b50a:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b50c:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b50e:	2829      	cmp	r0, #41	; 0x29
 800b510:	d1cc      	bne.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
 800b512:	486f      	ldr	r0, [pc, #444]	; (800b6d0 <I2C_Slave_ISR_IT+0x270>)
 800b514:	4283      	cmp	r3, r0
 800b516:	d0c9      	beq.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
        I2C_Flush_TXDR(hi2c);
 800b518:	0020      	movs	r0, r4
 800b51a:	f7fe fc6c 	bl	8009df6 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800b51e:	0020      	movs	r0, r4
 800b520:	f7fe fca6 	bl	8009e70 <I2C_ITSlaveSeqCplt>
 800b524:	e7c2      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b526:	2110      	movs	r1, #16
 800b528:	6822      	ldr	r2, [r4, #0]
 800b52a:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b52c:	2204      	movs	r2, #4
 800b52e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b530:	430a      	orrs	r2, r1
 800b532:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b534:	4a67      	ldr	r2, [pc, #412]	; (800b6d4 <I2C_Slave_ISR_IT+0x274>)
 800b536:	4213      	tst	r3, r2
 800b538:	d1b8      	bne.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b53a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b53c:	0020      	movs	r0, r4
 800b53e:	f7ff ff21 	bl	800b384 <I2C_ITError.lto_priv.676>
 800b542:	e7b3      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b544:	2201      	movs	r2, #1
 800b546:	0769      	lsls	r1, r5, #29
 800b548:	d51f      	bpl.n	800b58a <I2C_Slave_ISR_IT+0x12a>
 800b54a:	08b1      	lsrs	r1, r6, #2
 800b54c:	4211      	tst	r1, r2
 800b54e:	d01c      	beq.n	800b58a <I2C_Slave_ISR_IT+0x12a>
    if (hi2c->XferCount > 0U)
 800b550:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b552:	2a00      	cmp	r2, #0
 800b554:	d00f      	beq.n	800b576 <I2C_Slave_ISR_IT+0x116>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800b556:	2204      	movs	r2, #4
 800b558:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b55a:	6822      	ldr	r2, [r4, #0]
 800b55c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b55e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b560:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800b562:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b564:	3201      	adds	r2, #1
 800b566:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b568:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b56a:	3a01      	subs	r2, #1
 800b56c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b56e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b570:	3a01      	subs	r2, #1
 800b572:	b292      	uxth	r2, r2
 800b574:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b576:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b578:	2a00      	cmp	r2, #0
 800b57a:	d197      	bne.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
 800b57c:	4a54      	ldr	r2, [pc, #336]	; (800b6d0 <I2C_Slave_ISR_IT+0x270>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d094      	beq.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
        I2C_ITSlaveSeqCplt(hi2c);
 800b582:	0020      	movs	r0, r4
 800b584:	f7fe fc74 	bl	8009e70 <I2C_ITSlaveSeqCplt>
 800b588:	e790      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b58a:	2201      	movs	r2, #1
 800b58c:	0729      	lsls	r1, r5, #28
 800b58e:	d532      	bpl.n	800b5f6 <I2C_Slave_ISR_IT+0x196>
 800b590:	08f1      	lsrs	r1, r6, #3
 800b592:	4211      	tst	r1, r2
 800b594:	d02f      	beq.n	800b5f6 <I2C_Slave_ISR_IT+0x196>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b596:	0023      	movs	r3, r4
 800b598:	2128      	movs	r1, #40	; 0x28
 800b59a:	3341      	adds	r3, #65	; 0x41
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	400b      	ands	r3, r1
 800b5a2:	428b      	cmp	r3, r1
 800b5a4:	d122      	bne.n	800b5ec <I2C_Slave_ISR_IT+0x18c>
    transferdirection = I2C_GET_DIR(hi2c);
 800b5a6:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b5a8:	6993      	ldr	r3, [r2, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b5aa:	6891      	ldr	r1, [r2, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b5ac:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b5ae:	68e0      	ldr	r0, [r4, #12]
 800b5b0:	2802      	cmp	r0, #2
 800b5b2:	d114      	bne.n	800b5de <I2C_Slave_ISR_IT+0x17e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b5b4:	0c1b      	lsrs	r3, r3, #16
 800b5b6:	30fc      	adds	r0, #252	; 0xfc
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b5b8:	0589      	lsls	r1, r1, #22
 800b5ba:	0f49      	lsrs	r1, r1, #29
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b5bc:	4003      	ands	r3, r0
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b5be:	404b      	eors	r3, r1
 800b5c0:	2106      	movs	r1, #6
 800b5c2:	400b      	ands	r3, r1
 800b5c4:	d10b      	bne.n	800b5de <I2C_Slave_ISR_IT+0x17e>
        hi2c->AddrEventCount++;
 800b5c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5c8:	3101      	adds	r1, #1
 800b5ca:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b5cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5ce:	2902      	cmp	r1, #2
 800b5d0:	d000      	beq.n	800b5d4 <I2C_Slave_ISR_IT+0x174>
 800b5d2:	e76b      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b5d4:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800b5d6:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b5d8:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800b5da:	703b      	strb	r3, [r7, #0]
 800b5dc:	e766      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b5de:	2104      	movs	r1, #4
 800b5e0:	0020      	movs	r0, r4
 800b5e2:	f7fe fbd7 	bl	8009d94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	703b      	strb	r3, [r7, #0]
 800b5ea:	e75f      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b5ec:	2308      	movs	r3, #8
 800b5ee:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	703b      	strb	r3, [r7, #0]
 800b5f4:	e75a      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	07a9      	lsls	r1, r5, #30
 800b5fa:	d400      	bmi.n	800b5fe <I2C_Slave_ISR_IT+0x19e>
 800b5fc:	e756      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
 800b5fe:	0871      	lsrs	r1, r6, #1
 800b600:	4211      	tst	r1, r2
 800b602:	d100      	bne.n	800b606 <I2C_Slave_ISR_IT+0x1a6>
 800b604:	e752      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 800b606:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b608:	2a00      	cmp	r2, #0
 800b60a:	d00d      	beq.n	800b628 <I2C_Slave_ISR_IT+0x1c8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b60e:	6822      	ldr	r2, [r4, #0]
 800b610:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800b612:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b614:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b616:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b618:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b61a:	3b01      	subs	r3, #1
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b620:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b622:	3b01      	subs	r3, #1
 800b624:	8523      	strh	r3, [r4, #40]	; 0x28
 800b626:	e741      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b628:	4a2a      	ldr	r2, [pc, #168]	; (800b6d4 <I2C_Slave_ISR_IT+0x274>)
 800b62a:	4213      	tst	r3, r2
 800b62c:	d000      	beq.n	800b630 <I2C_Slave_ISR_IT+0x1d0>
 800b62e:	e73d      	b.n	800b4ac <I2C_Slave_ISR_IT+0x4c>
 800b630:	e7a7      	b.n	800b582 <I2C_Slave_ISR_IT+0x122>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b632:	0bf6      	lsrs	r6, r6, #15
 800b634:	4216      	tst	r6, r2
 800b636:	d003      	beq.n	800b640 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->hdmarx != NULL)
 800b638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d000      	beq.n	800b640 <I2C_Slave_ISR_IT+0x1e0>
 800b63e:	e75d      	b.n	800b4fc <I2C_Slave_ISR_IT+0x9c>
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b640:	076b      	lsls	r3, r5, #29
 800b642:	d511      	bpl.n	800b668 <I2C_Slave_ISR_IT+0x208>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b644:	2304      	movs	r3, #4
 800b646:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b652:	3301      	adds	r3, #1
 800b654:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b656:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d005      	beq.n	800b668 <I2C_Slave_ISR_IT+0x208>
      hi2c->XferSize--;
 800b65c:	3b01      	subs	r3, #1
 800b65e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b660:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b662:	3b01      	subs	r3, #1
 800b664:	b29b      	uxth	r3, r3
 800b666:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800b668:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d003      	beq.n	800b676 <I2C_Slave_ISR_IT+0x216>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b66e:	2304      	movs	r3, #4
 800b670:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b672:	4313      	orrs	r3, r2
 800b674:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b676:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 800b678:	2300      	movs	r3, #0
 800b67a:	0026      	movs	r6, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b67c:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 800b67e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b680:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 800b682:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b684:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b686:	3641      	adds	r6, #65	; 0x41
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00f      	beq.n	800b6ac <I2C_Slave_ISR_IT+0x24c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b68c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b68e:	0020      	movs	r0, r4
 800b690:	f7ff fe78 	bl	800b384 <I2C_ITError.lto_priv.676>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b694:	7833      	ldrb	r3, [r6, #0]
 800b696:	2b28      	cmp	r3, #40	; 0x28
 800b698:	d103      	bne.n	800b6a2 <I2C_Slave_ISR_IT+0x242>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b69a:	0029      	movs	r1, r5
 800b69c:	0020      	movs	r0, r4
 800b69e:	f7fe fbb8 	bl	8009e12 <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	7038      	strb	r0, [r7, #0]
}
 800b6a6:	bc04      	pop	{r2}
 800b6a8:	4690      	mov	r8, r2
 800b6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b6ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6ae:	4d08      	ldr	r5, [pc, #32]	; (800b6d0 <I2C_Slave_ISR_IT+0x270>)
 800b6b0:	42ab      	cmp	r3, r5
 800b6b2:	d006      	beq.n	800b6c2 <I2C_Slave_ISR_IT+0x262>
    I2C_ITSlaveSeqCplt(hi2c);
 800b6b4:	0020      	movs	r0, r4
 800b6b6:	f7fe fbdb 	bl	8009e70 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800b6ba:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6bc:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b6be:	7033      	strb	r3, [r6, #0]
 800b6c0:	e7ef      	b.n	800b6a2 <I2C_Slave_ISR_IT+0x242>
 800b6c2:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b6c4:	7832      	ldrb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b6c6:	7033      	strb	r3, [r6, #0]
 800b6c8:	e7eb      	b.n	800b6a2 <I2C_Slave_ISR_IT+0x242>
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	fe00e800 	.word	0xfe00e800
 800b6d0:	ffff0000 	.word	0xffff0000
 800b6d4:	feffffff 	.word	0xfeffffff

0800b6d8 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b6d8:	2338      	movs	r3, #56	; 0x38
 800b6da:	4a21      	ldr	r2, [pc, #132]	; (800b760 <HAL_RCC_GetSysClockFreq+0x88>)
{
 800b6dc:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b6de:	6891      	ldr	r1, [r2, #8]
 800b6e0:	0014      	movs	r4, r2
 800b6e2:	4219      	tst	r1, r3
 800b6e4:	d108      	bne.n	800b6f8 <HAL_RCC_GetSysClockFreq+0x20>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b6ea:	481e      	ldr	r0, [pc, #120]	; (800b764 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b6ec:	049b      	lsls	r3, r3, #18
 800b6ee:	0f5b      	lsrs	r3, r3, #29
 800b6f0:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b6f2:	f003 fa4d 	bl	800eb90 <__udivsi3>
}
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b6f8:	6891      	ldr	r1, [r2, #8]
 800b6fa:	4019      	ands	r1, r3
 800b6fc:	2908      	cmp	r1, #8
 800b6fe:	d02a      	beq.n	800b756 <HAL_RCC_GetSysClockFreq+0x7e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b700:	6891      	ldr	r1, [r2, #8]
 800b702:	4019      	ands	r1, r3
 800b704:	2910      	cmp	r1, #16
 800b706:	d11a      	bne.n	800b73e <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b708:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b70a:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b70c:	43db      	mvns	r3, r3
 800b70e:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b710:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b712:	0649      	lsls	r1, r1, #25
 800b714:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b716:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b718:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b71a:	4015      	ands	r5, r2
    switch (pllsource)
 800b71c:	079b      	lsls	r3, r3, #30
 800b71e:	d109      	bne.n	800b734 <HAL_RCC_GetSysClockFreq+0x5c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b720:	4811      	ldr	r0, [pc, #68]	; (800b768 <HAL_RCC_GetSysClockFreq+0x90>)
 800b722:	f003 fa35 	bl	800eb90 <__udivsi3>
 800b726:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800b728:	68e1      	ldr	r1, [r4, #12]
 800b72a:	0f49      	lsrs	r1, r1, #29
 800b72c:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800b72e:	f003 fa2f 	bl	800eb90 <__udivsi3>
 800b732:	e7e0      	b.n	800b6f6 <HAL_RCC_GetSysClockFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800b734:	480b      	ldr	r0, [pc, #44]	; (800b764 <HAL_RCC_GetSysClockFreq+0x8c>)
 800b736:	f003 fa2b 	bl	800eb90 <__udivsi3>
 800b73a:	4368      	muls	r0, r5
 800b73c:	e7f4      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800b73e:	6891      	ldr	r1, [r2, #8]
 800b740:	4019      	ands	r1, r3
 800b742:	2920      	cmp	r1, #32
 800b744:	d009      	beq.n	800b75a <HAL_RCC_GetSysClockFreq+0x82>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800b746:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800b748:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800b74a:	4013      	ands	r3, r2
 800b74c:	2b18      	cmp	r3, #24
 800b74e:	d1d2      	bne.n	800b6f6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 800b750:	20fa      	movs	r0, #250	; 0xfa
 800b752:	01c0      	lsls	r0, r0, #7
 800b754:	e7cf      	b.n	800b6f6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800b756:	4804      	ldr	r0, [pc, #16]	; (800b768 <HAL_RCC_GetSysClockFreq+0x90>)
 800b758:	e7cd      	b.n	800b6f6 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800b75a:	2080      	movs	r0, #128	; 0x80
 800b75c:	0200      	lsls	r0, r0, #8
 800b75e:	e7ca      	b.n	800b6f6 <HAL_RCC_GetSysClockFreq+0x1e>
 800b760:	40021000 	.word	0x40021000
 800b764:	00f42400 	.word	0x00f42400
 800b768:	007a1200 	.word	0x007a1200

0800b76c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800b76c:	4b04      	ldr	r3, [pc, #16]	; (800b780 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b76e:	68da      	ldr	r2, [r3, #12]
 800b770:	4210      	tst	r0, r2
 800b772:	d000      	beq.n	800b776 <HAL_GPIO_EXTI_IRQHandler+0xa>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800b774:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	4202      	tst	r2, r0
 800b77a:	d000      	beq.n	800b77e <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800b77c:	6118      	str	r0, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 800b77e:	4770      	bx	lr
 800b780:	40021800 	.word	0x40021800

0800b784 <HAL_GPIO_Init>:
{
 800b784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b786:	4645      	mov	r5, r8
 800b788:	46de      	mov	lr, fp
 800b78a:	4657      	mov	r7, sl
 800b78c:	464e      	mov	r6, r9
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b78e:	2201      	movs	r2, #1
{
 800b790:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b792:	680b      	ldr	r3, [r1, #0]
{
 800b794:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b796:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b798:	4690      	mov	r8, r2
  uint32_t position = 0x00u;
 800b79a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b79c:	9a00      	ldr	r2, [sp, #0]
 800b79e:	40da      	lsrs	r2, r3
 800b7a0:	d106      	bne.n	800b7b0 <HAL_GPIO_Init+0x2c>
}
 800b7a2:	b003      	add	sp, #12
 800b7a4:	bc3c      	pop	{r2, r3, r4, r5}
 800b7a6:	4690      	mov	r8, r2
 800b7a8:	4699      	mov	r9, r3
 800b7aa:	46a2      	mov	sl, r4
 800b7ac:	46ab      	mov	fp, r5
 800b7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b7b0:	4642      	mov	r2, r8
 800b7b2:	409a      	lsls	r2, r3
 800b7b4:	4691      	mov	r9, r2
 800b7b6:	464c      	mov	r4, r9
 800b7b8:	9a00      	ldr	r2, [sp, #0]
 800b7ba:	4022      	ands	r2, r4
    if (iocurrent != 0x00u)
 800b7bc:	d100      	bne.n	800b7c0 <HAL_GPIO_Init+0x3c>
 800b7be:	e0b4      	b.n	800b92a <HAL_GPIO_Init+0x1a6>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b7c0:	684c      	ldr	r4, [r1, #4]
 800b7c2:	2610      	movs	r6, #16
 800b7c4:	0025      	movs	r5, r4
 800b7c6:	43b5      	bics	r5, r6
 800b7c8:	46ac      	mov	ip, r5
 800b7ca:	2d02      	cmp	r5, #2
 800b7cc:	d116      	bne.n	800b7fc <HAL_GPIO_Init+0x78>
        temp = GPIOx->AFR[position >> 3u];
 800b7ce:	08dd      	lsrs	r5, r3, #3
 800b7d0:	00ad      	lsls	r5, r5, #2
 800b7d2:	1945      	adds	r5, r0, r5
 800b7d4:	6a2e      	ldr	r6, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b7d6:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3u];
 800b7d8:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b7da:	2607      	movs	r6, #7
 800b7dc:	401e      	ands	r6, r3
 800b7de:	00b6      	lsls	r6, r6, #2
 800b7e0:	40b7      	lsls	r7, r6
 800b7e2:	46bb      	mov	fp, r7
 800b7e4:	9501      	str	r5, [sp, #4]
 800b7e6:	4657      	mov	r7, sl
 800b7e8:	465d      	mov	r5, fp
 800b7ea:	43af      	bics	r7, r5
 800b7ec:	46ba      	mov	sl, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b7ee:	690f      	ldr	r7, [r1, #16]
 800b7f0:	4655      	mov	r5, sl
 800b7f2:	40b7      	lsls	r7, r6
 800b7f4:	003e      	movs	r6, r7
 800b7f6:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800b7f8:	9d01      	ldr	r5, [sp, #4]
 800b7fa:	622e      	str	r6, [r5, #32]
 800b7fc:	005d      	lsls	r5, r3, #1
 800b7fe:	46aa      	mov	sl, r5
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b800:	2503      	movs	r5, #3
 800b802:	4657      	mov	r7, sl
 800b804:	40bd      	lsls	r5, r7
 800b806:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800b808:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b80a:	2703      	movs	r7, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b80c:	402e      	ands	r6, r5
 800b80e:	46b3      	mov	fp, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b810:	0026      	movs	r6, r4
 800b812:	403e      	ands	r6, r7
 800b814:	4657      	mov	r7, sl
 800b816:	40be      	lsls	r6, r7
 800b818:	465f      	mov	r7, fp
 800b81a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800b81c:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b81e:	4666      	mov	r6, ip
 800b820:	3e01      	subs	r6, #1
 800b822:	2e01      	cmp	r6, #1
 800b824:	d813      	bhi.n	800b84e <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR;
 800b826:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b828:	4657      	mov	r7, sl
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b82a:	402e      	ands	r6, r5
 800b82c:	46b4      	mov	ip, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b82e:	68ce      	ldr	r6, [r1, #12]
 800b830:	40be      	lsls	r6, r7
 800b832:	4667      	mov	r7, ip
 800b834:	433e      	orrs	r6, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b836:	464f      	mov	r7, r9
        GPIOx->OSPEEDR = temp;
 800b838:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800b83a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b83c:	43be      	bics	r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b83e:	4647      	mov	r7, r8
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b840:	46b4      	mov	ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b842:	0926      	lsrs	r6, r4, #4
 800b844:	403e      	ands	r6, r7
 800b846:	409e      	lsls	r6, r3
 800b848:	4667      	mov	r7, ip
 800b84a:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800b84c:	6046      	str	r6, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b84e:	4657      	mov	r7, sl
      temp = GPIOx->PUPDR;
 800b850:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b852:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b854:	688e      	ldr	r6, [r1, #8]
 800b856:	40be      	lsls	r6, r7
 800b858:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800b85a:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b85c:	2580      	movs	r5, #128	; 0x80
 800b85e:	056d      	lsls	r5, r5, #21
 800b860:	422c      	tst	r4, r5
 800b862:	d062      	beq.n	800b92a <HAL_GPIO_Init+0x1a6>
 800b864:	4d32      	ldr	r5, [pc, #200]	; (800b930 <HAL_GPIO_Init+0x1ac>)
        temp = EXTI->EXTICR[position >> 2u];
 800b866:	089e      	lsrs	r6, r3, #2
 800b868:	46ac      	mov	ip, r5
 800b86a:	00b6      	lsls	r6, r6, #2
 800b86c:	4466      	add	r6, ip
 800b86e:	6e35      	ldr	r5, [r6, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b870:	001f      	movs	r7, r3
        temp = EXTI->EXTICR[position >> 2u];
 800b872:	46aa      	mov	sl, r5
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b874:	2503      	movs	r5, #3
 800b876:	402f      	ands	r7, r5
 800b878:	40af      	lsls	r7, r5
 800b87a:	46bc      	mov	ip, r7
 800b87c:	270f      	movs	r7, #15
 800b87e:	4665      	mov	r5, ip
 800b880:	40af      	lsls	r7, r5
 800b882:	4655      	mov	r5, sl
 800b884:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b886:	27a0      	movs	r7, #160	; 0xa0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b888:	46a9      	mov	r9, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b88a:	05ff      	lsls	r7, r7, #23
 800b88c:	2500      	movs	r5, #0
 800b88e:	42b8      	cmp	r0, r7
 800b890:	d00f      	beq.n	800b8b2 <HAL_GPIO_Init+0x12e>
 800b892:	4d28      	ldr	r5, [pc, #160]	; (800b934 <HAL_GPIO_Init+0x1b0>)
 800b894:	46aa      	mov	sl, r5
 800b896:	4645      	mov	r5, r8
 800b898:	4550      	cmp	r0, sl
 800b89a:	d00a      	beq.n	800b8b2 <HAL_GPIO_Init+0x12e>
 800b89c:	4d26      	ldr	r5, [pc, #152]	; (800b938 <HAL_GPIO_Init+0x1b4>)
 800b89e:	46aa      	mov	sl, r5
 800b8a0:	2502      	movs	r5, #2
 800b8a2:	4550      	cmp	r0, sl
 800b8a4:	d005      	beq.n	800b8b2 <HAL_GPIO_Init+0x12e>
 800b8a6:	4d25      	ldr	r5, [pc, #148]	; (800b93c <HAL_GPIO_Init+0x1b8>)
 800b8a8:	46aa      	mov	sl, r5
 800b8aa:	2505      	movs	r5, #5
 800b8ac:	4550      	cmp	r0, sl
 800b8ae:	d100      	bne.n	800b8b2 <HAL_GPIO_Init+0x12e>
 800b8b0:	3d02      	subs	r5, #2
 800b8b2:	4667      	mov	r7, ip
 800b8b4:	40bd      	lsls	r5, r7
 800b8b6:	464f      	mov	r7, r9
 800b8b8:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800b8ba:	6635      	str	r5, [r6, #96]	; 0x60
        temp = EXTI->IMR1;
 800b8bc:	4d20      	ldr	r5, [pc, #128]	; (800b940 <HAL_GPIO_Init+0x1bc>)
 800b8be:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800b8c0:	46b1      	mov	r9, r6
          temp |= iocurrent;
 800b8c2:	464f      	mov	r7, r9
 800b8c4:	4317      	orrs	r7, r2
 800b8c6:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b8c8:	2780      	movs	r7, #128	; 0x80
 800b8ca:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 800b8cc:	43d6      	mvns	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b8ce:	423c      	tst	r4, r7
 800b8d0:	d102      	bne.n	800b8d8 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800b8d2:	464f      	mov	r7, r9
 800b8d4:	4037      	ands	r7, r6
 800b8d6:	46bc      	mov	ip, r7
        EXTI->IMR1 = temp;
 800b8d8:	4667      	mov	r7, ip
 800b8da:	67ef      	str	r7, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800b8dc:	0017      	movs	r7, r2
        temp = EXTI->EMR1;
 800b8de:	4d19      	ldr	r5, [pc, #100]	; (800b944 <HAL_GPIO_Init+0x1c0>)
 800b8e0:	46ac      	mov	ip, r5
 800b8e2:	6fed      	ldr	r5, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800b8e4:	432f      	orrs	r7, r5
 800b8e6:	46b9      	mov	r9, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b8e8:	2780      	movs	r7, #128	; 0x80
 800b8ea:	02bf      	lsls	r7, r7, #10
 800b8ec:	423c      	tst	r4, r7
 800b8ee:	d101      	bne.n	800b8f4 <HAL_GPIO_Init+0x170>
        temp &= ~(iocurrent);
 800b8f0:	4035      	ands	r5, r6
 800b8f2:	46a9      	mov	r9, r5
        EXTI->EMR1 = temp;
 800b8f4:	4d0e      	ldr	r5, [pc, #56]	; (800b930 <HAL_GPIO_Init+0x1ac>)
 800b8f6:	4667      	mov	r7, ip
 800b8f8:	46aa      	mov	sl, r5
 800b8fa:	464d      	mov	r5, r9
 800b8fc:	67fd      	str	r5, [r7, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800b8fe:	4655      	mov	r5, sl
 800b900:	682d      	ldr	r5, [r5, #0]
          temp |= iocurrent;
 800b902:	002f      	movs	r7, r5
 800b904:	4317      	orrs	r7, r2
        temp = EXTI->RTSR1;
 800b906:	46a9      	mov	r9, r5
          temp |= iocurrent;
 800b908:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b90a:	02e5      	lsls	r5, r4, #11
 800b90c:	d402      	bmi.n	800b914 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800b90e:	464f      	mov	r7, r9
 800b910:	4037      	ands	r7, r6
 800b912:	46bc      	mov	ip, r7
        EXTI->RTSR1 = temp;
 800b914:	4665      	mov	r5, ip
 800b916:	4657      	mov	r7, sl
 800b918:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 800b91a:	687d      	ldr	r5, [r7, #4]
          temp |= iocurrent;
 800b91c:	432a      	orrs	r2, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b91e:	02a4      	lsls	r4, r4, #10
 800b920:	d401      	bmi.n	800b926 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800b922:	002a      	movs	r2, r5
 800b924:	4032      	ands	r2, r6
        EXTI->FTSR1 = temp;
 800b926:	4654      	mov	r4, sl
 800b928:	6062      	str	r2, [r4, #4]
    position++;
 800b92a:	3301      	adds	r3, #1
 800b92c:	e736      	b.n	800b79c <HAL_GPIO_Init+0x18>
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	40021800 	.word	0x40021800
 800b934:	50000400 	.word	0x50000400
 800b938:	50000800 	.word	0x50000800
 800b93c:	50000c00 	.word	0x50000c00
 800b940:	40021804 	.word	0x40021804
 800b944:	40021808 	.word	0x40021808

0800b948 <HAL_UART_Init.constprop.98>:
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800b948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b94a:	46de      	mov	lr, fp
 800b94c:	464e      	mov	r6, r9
 800b94e:	4645      	mov	r5, r8
 800b950:	4657      	mov	r7, sl
 800b952:	b5e0      	push	{r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800b954:	1d05      	adds	r5, r0, #4
 800b956:	4bd7      	ldr	r3, [pc, #860]	; (800bcb4 <HAL_UART_Init.constprop.98+0x36c>)
 800b958:	6fee      	ldr	r6, [r5, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800b95a:	b08b      	sub	sp, #44	; 0x2c
 800b95c:	0004      	movs	r4, r0
 800b95e:	469b      	mov	fp, r3
  if (huart->gState == HAL_UART_STATE_RESET)
 800b960:	2e00      	cmp	r6, #0
 800b962:	d15e      	bne.n	800ba22 <HAL_UART_Init.constprop.98+0xda>
 800b964:	6803      	ldr	r3, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b966:	2214      	movs	r2, #20
 800b968:	4698      	mov	r8, r3
    huart->Lock = HAL_UNLOCKED;
 800b96a:	0003      	movs	r3, r0
 800b96c:	337c      	adds	r3, #124	; 0x7c
 800b96e:	701e      	strb	r6, [r3, #0]
 800b970:	0031      	movs	r1, r6
 800b972:	a805      	add	r0, sp, #20
 800b974:	f007 fa72 	bl	8012e5c <memset>
  if(huart->Instance==USART1)
 800b978:	45d8      	cmp	r8, fp
 800b97a:	d000      	beq.n	800b97e <HAL_UART_Init.constprop.98+0x36>
 800b97c:	e09a      	b.n	800bab4 <HAL_UART_Init.constprop.98+0x16c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b97e:	2080      	movs	r0, #128	; 0x80
 800b980:	4bcd      	ldr	r3, [pc, #820]	; (800bcb8 <HAL_UART_Init.constprop.98+0x370>)
 800b982:	01c0      	lsls	r0, r0, #7
 800b984:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b986:	4301      	orrs	r1, r0
 800b988:	6419      	str	r1, [r3, #64]	; 0x40
 800b98a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b98c:	4002      	ands	r2, r0
 800b98e:	9204      	str	r2, [sp, #16]
 800b990:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b992:	2201      	movs	r2, #1
 800b994:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b996:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b998:	4311      	orrs	r1, r2
 800b99a:	6359      	str	r1, [r3, #52]	; 0x34
 800b99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b99e:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	9303      	str	r3, [sp, #12]
 800b9a4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b9a6:	23f0      	movs	r3, #240	; 0xf0
 800b9a8:	015b      	lsls	r3, r3, #5
 800b9aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9ac:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9ae:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800b9b0:	9209      	str	r2, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b9b4:	f7ff fee6 	bl	800b784 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800b9b8:	4fc0      	ldr	r7, [pc, #768]	; (800bcbc <HAL_UART_Init.constprop.98+0x374>)
 800b9ba:	4bc1      	ldr	r3, [pc, #772]	; (800bcc0 <HAL_UART_Init.constprop.98+0x378>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9bc:	637e      	str	r6, [r7, #52]	; 0x34
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800b9be:	62bb      	str	r3, [r7, #40]	; 0x28
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800b9c0:	2333      	movs	r3, #51	; 0x33
 800b9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b9c4:	3b23      	subs	r3, #35	; 0x23
 800b9c6:	633b      	str	r3, [r7, #48]	; 0x30
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b9c8:	3370      	adds	r3, #112	; 0x70
 800b9ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9cc:	4699      	mov	r9, r3
 800b9ce:	3b58      	subs	r3, #88	; 0x58
 800b9d0:	469a      	mov	sl, r3
 800b9d2:	44ba      	add	sl, r7
 800b9d4:	4650      	mov	r0, sl
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9d6:	63fe      	str	r6, [r7, #60]	; 0x3c
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b9d8:	643e      	str	r6, [r7, #64]	; 0x40
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b9da:	647e      	str	r6, [r7, #68]	; 0x44
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b9dc:	64be      	str	r6, [r7, #72]	; 0x48
 800b9de:	f7fe fa83 	bl	8009ee8 <HAL_DMA_Init.part.0.constprop.139>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800b9e2:	4653      	mov	r3, sl
 800b9e4:	653c      	str	r4, [r7, #80]	; 0x50
 800b9e6:	6763      	str	r3, [r4, #116]	; 0x74
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800b9e8:	4fb6      	ldr	r7, [pc, #728]	; (800bcc4 <HAL_UART_Init.constprop.98+0x37c>)
 800b9ea:	4bb7      	ldr	r3, [pc, #732]	; (800bcc8 <HAL_UART_Init.constprop.98+0x380>)
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b9ec:	60fe      	str	r6, [r7, #12]
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800b9ee:	607b      	str	r3, [r7, #4]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800b9f0:	2332      	movs	r3, #50	; 0x32
 800b9f2:	60bb      	str	r3, [r7, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b9f4:	464b      	mov	r3, r9
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9f6:	613e      	str	r6, [r7, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b9f8:	61be      	str	r6, [r7, #24]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b9fa:	61fe      	str	r6, [r7, #28]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b9fc:	623e      	str	r6, [r7, #32]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b9fe:	627e      	str	r6, [r7, #36]	; 0x24
 800ba00:	1d3e      	adds	r6, r7, #4
 800ba02:	0030      	movs	r0, r6
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	f7fe fa6f 	bl	8009ee8 <HAL_DMA_Init.part.0.constprop.139>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ba0a:	21c6      	movs	r1, #198	; 0xc6
 800ba0c:	4aaf      	ldr	r2, [pc, #700]	; (800bccc <HAL_UART_Init.constprop.98+0x384>)
 800ba0e:	0089      	lsls	r1, r1, #2
 800ba10:	5853      	ldr	r3, [r2, r1]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800ba12:	67a6      	str	r6, [r4, #120]	; 0x78
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	62fc      	str	r4, [r7, #44]	; 0x2c
 800ba1a:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba1c:	2380      	movs	r3, #128	; 0x80
 800ba1e:	051b      	lsls	r3, r3, #20
 800ba20:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ba22:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800ba24:	2101      	movs	r1, #1
 800ba26:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ba28:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800ba2a:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba2c:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800ba2e:	438b      	bics	r3, r1
 800ba30:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba32:	68a3      	ldr	r3, [r4, #8]
 800ba34:	69e1      	ldr	r1, [r4, #28]
 800ba36:	4303      	orrs	r3, r0
 800ba38:	6960      	ldr	r0, [r4, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800ba3a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba3c:	4303      	orrs	r3, r0
 800ba3e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba40:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800ba42:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba44:	4ea2      	ldr	r6, [pc, #648]	; (800bcd0 <HAL_UART_Init.constprop.98+0x388>)
 800ba46:	4030      	ands	r0, r6
 800ba48:	4303      	orrs	r3, r0
 800ba4a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba4c:	6853      	ldr	r3, [r2, #4]
 800ba4e:	48a1      	ldr	r0, [pc, #644]	; (800bcd4 <HAL_UART_Init.constprop.98+0x38c>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba50:	4ea1      	ldr	r6, [pc, #644]	; (800bcd8 <HAL_UART_Init.constprop.98+0x390>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba52:	4003      	ands	r3, r0
 800ba54:	68e0      	ldr	r0, [r4, #12]
 800ba56:	4303      	orrs	r3, r0
 800ba58:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba5a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba5c:	42b2      	cmp	r2, r6
 800ba5e:	d001      	beq.n	800ba64 <HAL_UART_Init.constprop.98+0x11c>
    tmpreg |= huart->Init.OneBitSampling;
 800ba60:	6a23      	ldr	r3, [r4, #32]
 800ba62:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba64:	6893      	ldr	r3, [r2, #8]
 800ba66:	4f9d      	ldr	r7, [pc, #628]	; (800bcdc <HAL_UART_Init.constprop.98+0x394>)
 800ba68:	403b      	ands	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba6a:	270f      	movs	r7, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba6c:	4303      	orrs	r3, r0
 800ba6e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba70:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800ba72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba74:	43b8      	bics	r0, r7
 800ba76:	4318      	orrs	r0, r3
 800ba78:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba7a:	455a      	cmp	r2, fp
 800ba7c:	d13a      	bne.n	800baf4 <HAL_UART_Init.constprop.98+0x1ac>
 800ba7e:	2603      	movs	r6, #3
 800ba80:	4a8d      	ldr	r2, [pc, #564]	; (800bcb8 <HAL_UART_Init.constprop.98+0x370>)
 800ba82:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800ba84:	4a96      	ldr	r2, [pc, #600]	; (800bce0 <HAL_UART_Init.constprop.98+0x398>)
 800ba86:	4030      	ands	r0, r6
 800ba88:	3201      	adds	r2, #1
 800ba8a:	1812      	adds	r2, r2, r0
 800ba8c:	7fd0      	ldrb	r0, [r2, #31]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba8e:	2280      	movs	r2, #128	; 0x80
 800ba90:	0212      	lsls	r2, r2, #8
 800ba92:	4291      	cmp	r1, r2
 800ba94:	d000      	beq.n	800ba98 <HAL_UART_Init.constprop.98+0x150>
 800ba96:	e3dd      	b.n	800c254 <HAL_UART_Init.constprop.98+0x90c>
    switch (clocksource)
 800ba98:	2808      	cmp	r0, #8
 800ba9a:	d900      	bls.n	800ba9e <HAL_UART_Init.constprop.98+0x156>
 800ba9c:	e3d7      	b.n	800c24e <HAL_UART_Init.constprop.98+0x906>
 800ba9e:	f003 f86d 	bl	800eb7c <__gnu_thumb1_case_uhi>
 800baa2:	04ee      	.short	0x04ee
 800baa4:	033f03d6 	.word	0x033f03d6
 800baa8:	037e03d6 	.word	0x037e03d6
 800baac:	03d603d6 	.word	0x03d603d6
 800bab0:	039f03d6 	.word	0x039f03d6
  else if(huart->Instance==USART2)
 800bab4:	4b8b      	ldr	r3, [pc, #556]	; (800bce4 <HAL_UART_Init.constprop.98+0x39c>)
 800bab6:	4598      	cmp	r8, r3
 800bab8:	d1b3      	bne.n	800ba22 <HAL_UART_Init.constprop.98+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 800baba:	2080      	movs	r0, #128	; 0x80
 800babc:	4b7e      	ldr	r3, [pc, #504]	; (800bcb8 <HAL_UART_Init.constprop.98+0x370>)
 800babe:	0280      	lsls	r0, r0, #10
 800bac0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800bac2:	4301      	orrs	r1, r0
 800bac4:	63d9      	str	r1, [r3, #60]	; 0x3c
 800bac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bac8:	4002      	ands	r2, r0
 800baca:	9202      	str	r2, [sp, #8]
 800bacc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bace:	2201      	movs	r2, #1
 800bad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bad2:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bad4:	4311      	orrs	r1, r2
 800bad6:	6359      	str	r1, [r3, #52]	; 0x34
 800bad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bada:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800badc:	4013      	ands	r3, r2
 800bade:	9301      	str	r3, [sp, #4]
 800bae0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bae2:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bae4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800bae6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bae8:	3b0a      	subs	r3, #10
 800baea:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800baec:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baee:	f7ff fe49 	bl	800b784 <HAL_GPIO_Init>
 800baf2:	e796      	b.n	800ba22 <HAL_UART_Init.constprop.98+0xda>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baf4:	487b      	ldr	r0, [pc, #492]	; (800bce4 <HAL_UART_Init.constprop.98+0x39c>)
 800baf6:	4282      	cmp	r2, r0
 800baf8:	d108      	bne.n	800bb0c <HAL_UART_Init.constprop.98+0x1c4>
 800bafa:	260c      	movs	r6, #12
 800bafc:	4a6e      	ldr	r2, [pc, #440]	; (800bcb8 <HAL_UART_Init.constprop.98+0x370>)
 800bafe:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800bb00:	4a77      	ldr	r2, [pc, #476]	; (800bce0 <HAL_UART_Init.constprop.98+0x398>)
 800bb02:	4030      	ands	r0, r6
 800bb04:	3205      	adds	r2, #5
 800bb06:	1812      	adds	r2, r2, r0
 800bb08:	7fd0      	ldrb	r0, [r2, #31]
 800bb0a:	e7c0      	b.n	800ba8e <HAL_UART_Init.constprop.98+0x146>
 800bb0c:	4876      	ldr	r0, [pc, #472]	; (800bce8 <HAL_UART_Init.constprop.98+0x3a0>)
 800bb0e:	4282      	cmp	r2, r0
 800bb10:	d101      	bne.n	800bb16 <HAL_UART_Init.constprop.98+0x1ce>
 800bb12:	f000 fcaf 	bl	800c474 <HAL_UART_Init.constprop.98+0xb2c>
 800bb16:	4875      	ldr	r0, [pc, #468]	; (800bcec <HAL_UART_Init.constprop.98+0x3a4>)
 800bb18:	4282      	cmp	r2, r0
 800bb1a:	d101      	bne.n	800bb20 <HAL_UART_Init.constprop.98+0x1d8>
 800bb1c:	f000 fcaa 	bl	800c474 <HAL_UART_Init.constprop.98+0xb2c>
 800bb20:	42b2      	cmp	r2, r6
 800bb22:	d001      	beq.n	800bb28 <HAL_UART_Init.constprop.98+0x1e0>
 800bb24:	f000 fc9e 	bl	800c464 <HAL_UART_Init.constprop.98+0xb1c>
 800bb28:	21c0      	movs	r1, #192	; 0xc0
 800bb2a:	2080      	movs	r0, #128	; 0x80
 800bb2c:	4a62      	ldr	r2, [pc, #392]	; (800bcb8 <HAL_UART_Init.constprop.98+0x370>)
 800bb2e:	0109      	lsls	r1, r1, #4
 800bb30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bb32:	00c0      	lsls	r0, r0, #3
 800bb34:	400a      	ands	r2, r1
 800bb36:	4282      	cmp	r2, r0
 800bb38:	d100      	bne.n	800bb3c <HAL_UART_Init.constprop.98+0x1f4>
 800bb3a:	e156      	b.n	800bdea <HAL_UART_Init.constprop.98+0x4a2>
 800bb3c:	d900      	bls.n	800bb40 <HAL_UART_Init.constprop.98+0x1f8>
 800bb3e:	e08a      	b.n	800bc56 <HAL_UART_Init.constprop.98+0x30e>
 800bb40:	2a00      	cmp	r2, #0
 800bb42:	d100      	bne.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
 800bb44:	e0ee      	b.n	800bd24 <HAL_UART_Init.constprop.98+0x3dc>
        ret = HAL_ERROR;
 800bb46:	2601      	movs	r6, #1
  huart->NbRxDataToProcess = 1;
 800bb48:	4b69      	ldr	r3, [pc, #420]	; (800bcf0 <HAL_UART_Init.constprop.98+0x3a8>)
 800bb4a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->NbTxDataToProcess = 1;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 800bb50:	6723      	str	r3, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb52:	2e01      	cmp	r6, #1
 800bb54:	d101      	bne.n	800bb5a <HAL_UART_Init.constprop.98+0x212>
 800bb56:	f000 fc7d 	bl	800c454 <HAL_UART_Init.constprop.98+0xb0c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	d049      	beq.n	800bbf6 <HAL_UART_Init.constprop.98+0x2ae>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb62:	07d1      	lsls	r1, r2, #31
 800bb64:	d505      	bpl.n	800bb72 <HAL_UART_Init.constprop.98+0x22a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb66:	6859      	ldr	r1, [r3, #4]
 800bb68:	4862      	ldr	r0, [pc, #392]	; (800bcf4 <HAL_UART_Init.constprop.98+0x3ac>)
 800bb6a:	4001      	ands	r1, r0
 800bb6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bb6e:	4301      	orrs	r1, r0
 800bb70:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb72:	0791      	lsls	r1, r2, #30
 800bb74:	d505      	bpl.n	800bb82 <HAL_UART_Init.constprop.98+0x23a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb76:	6859      	ldr	r1, [r3, #4]
 800bb78:	485f      	ldr	r0, [pc, #380]	; (800bcf8 <HAL_UART_Init.constprop.98+0x3b0>)
 800bb7a:	4001      	ands	r1, r0
 800bb7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bb7e:	4301      	orrs	r1, r0
 800bb80:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb82:	0751      	lsls	r1, r2, #29
 800bb84:	d505      	bpl.n	800bb92 <HAL_UART_Init.constprop.98+0x24a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb86:	6859      	ldr	r1, [r3, #4]
 800bb88:	485c      	ldr	r0, [pc, #368]	; (800bcfc <HAL_UART_Init.constprop.98+0x3b4>)
 800bb8a:	4001      	ands	r1, r0
 800bb8c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bb8e:	4301      	orrs	r1, r0
 800bb90:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb92:	0711      	lsls	r1, r2, #28
 800bb94:	d505      	bpl.n	800bba2 <HAL_UART_Init.constprop.98+0x25a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb96:	6859      	ldr	r1, [r3, #4]
 800bb98:	4859      	ldr	r0, [pc, #356]	; (800bd00 <HAL_UART_Init.constprop.98+0x3b8>)
 800bb9a:	4001      	ands	r1, r0
 800bb9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bb9e:	4301      	orrs	r1, r0
 800bba0:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bba2:	06d1      	lsls	r1, r2, #27
 800bba4:	d505      	bpl.n	800bbb2 <HAL_UART_Init.constprop.98+0x26a>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bba6:	6899      	ldr	r1, [r3, #8]
 800bba8:	4856      	ldr	r0, [pc, #344]	; (800bd04 <HAL_UART_Init.constprop.98+0x3bc>)
 800bbaa:	4001      	ands	r1, r0
 800bbac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bbae:	4301      	orrs	r1, r0
 800bbb0:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbb2:	0691      	lsls	r1, r2, #26
 800bbb4:	d505      	bpl.n	800bbc2 <HAL_UART_Init.constprop.98+0x27a>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bbb6:	6899      	ldr	r1, [r3, #8]
 800bbb8:	4853      	ldr	r0, [pc, #332]	; (800bd08 <HAL_UART_Init.constprop.98+0x3c0>)
 800bbba:	4001      	ands	r1, r0
 800bbbc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800bbbe:	4301      	orrs	r1, r0
 800bbc0:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bbc2:	0651      	lsls	r1, r2, #25
 800bbc4:	d50f      	bpl.n	800bbe6 <HAL_UART_Init.constprop.98+0x29e>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbc6:	6859      	ldr	r1, [r3, #4]
 800bbc8:	4f50      	ldr	r7, [pc, #320]	; (800bd0c <HAL_UART_Init.constprop.98+0x3c4>)
 800bbca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bbcc:	4039      	ands	r1, r7
 800bbce:	4301      	orrs	r1, r0
 800bbd0:	6059      	str	r1, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbd2:	2180      	movs	r1, #128	; 0x80
 800bbd4:	0349      	lsls	r1, r1, #13
 800bbd6:	4288      	cmp	r0, r1
 800bbd8:	d105      	bne.n	800bbe6 <HAL_UART_Init.constprop.98+0x29e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbda:	6859      	ldr	r1, [r3, #4]
 800bbdc:	484c      	ldr	r0, [pc, #304]	; (800bd10 <HAL_UART_Init.constprop.98+0x3c8>)
 800bbde:	4001      	ands	r1, r0
 800bbe0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bbe2:	4301      	orrs	r1, r0
 800bbe4:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbe6:	0612      	lsls	r2, r2, #24
 800bbe8:	d505      	bpl.n	800bbf6 <HAL_UART_Init.constprop.98+0x2ae>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	4949      	ldr	r1, [pc, #292]	; (800bd14 <HAL_UART_Init.constprop.98+0x3cc>)
 800bbee:	400a      	ands	r2, r1
 800bbf0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bbf2:	430a      	orrs	r2, r1
 800bbf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbf6:	685a      	ldr	r2, [r3, #4]
 800bbf8:	4947      	ldr	r1, [pc, #284]	; (800bd18 <HAL_UART_Init.constprop.98+0x3d0>)
 800bbfa:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbfc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	438a      	bics	r2, r1
 800bc04:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bc06:	2201      	movs	r2, #1
 800bc08:	6819      	ldr	r1, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0e:	0022      	movs	r2, r4
 800bc10:	2100      	movs	r1, #0
 800bc12:	3288      	adds	r2, #136	; 0x88
 800bc14:	6011      	str	r1, [r2, #0]
  return uwTick;
 800bc16:	4a41      	ldr	r2, [pc, #260]	; (800bd1c <HAL_UART_Init.constprop.98+0x3d4>)
 800bc18:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	071b      	lsls	r3, r3, #28
 800bc1e:	d501      	bpl.n	800bc24 <HAL_UART_Init.constprop.98+0x2dc>
 800bc20:	f000 fc0c 	bl	800c43c <HAL_UART_Init.constprop.98+0xaf4>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	075b      	lsls	r3, r3, #29
 800bc2a:	d50a      	bpl.n	800bc42 <HAL_UART_Init.constprop.98+0x2fa>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc2c:	2180      	movs	r1, #128	; 0x80
 800bc2e:	4b3c      	ldr	r3, [pc, #240]	; (800bd20 <HAL_UART_Init.constprop.98+0x3d8>)
 800bc30:	003a      	movs	r2, r7
 800bc32:	03c9      	lsls	r1, r1, #15
 800bc34:	0020      	movs	r0, r4
 800bc36:	f7fd ffad 	bl	8009b94 <UART_WaitOnFlagUntilTimeout.constprop.99>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d001      	beq.n	800bc42 <HAL_UART_Init.constprop.98+0x2fa>
 800bc3e:	f000 fc08 	bl	800c452 <HAL_UART_Init.constprop.98+0xb0a>
  huart->RxState = HAL_UART_STATE_READY;
 800bc42:	0022      	movs	r2, r4
  huart->gState = HAL_UART_STATE_READY;
 800bc44:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800bc46:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_READY;
 800bc48:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc4a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	347c      	adds	r4, #124	; 0x7c
 800bc50:	7023      	strb	r3, [r4, #0]
 800bc52:	f000 fbff 	bl	800c454 <HAL_UART_Init.constprop.98+0xb0c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc56:	2080      	movs	r0, #128	; 0x80
 800bc58:	0100      	lsls	r0, r0, #4
 800bc5a:	4282      	cmp	r2, r0
 800bc5c:	d100      	bne.n	800bc60 <HAL_UART_Init.constprop.98+0x318>
 800bc5e:	e0a9      	b.n	800bdb4 <HAL_UART_Init.constprop.98+0x46c>
 800bc60:	428a      	cmp	r2, r1
 800bc62:	d000      	beq.n	800bc66 <HAL_UART_Init.constprop.98+0x31e>
 800bc64:	e76f      	b.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d020      	beq.n	800bcac <HAL_UART_Init.constprop.98+0x364>
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d100      	bne.n	800bc70 <HAL_UART_Init.constprop.98+0x328>
 800bc6e:	e108      	b.n	800be82 <HAL_UART_Init.constprop.98+0x53a>
 800bc70:	2b02      	cmp	r3, #2
 800bc72:	d100      	bne.n	800bc76 <HAL_UART_Init.constprop.98+0x32e>
 800bc74:	e109      	b.n	800be8a <HAL_UART_Init.constprop.98+0x542>
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d100      	bne.n	800bc7c <HAL_UART_Init.constprop.98+0x334>
 800bc7a:	e10a      	b.n	800be92 <HAL_UART_Init.constprop.98+0x54a>
 800bc7c:	2b04      	cmp	r3, #4
 800bc7e:	d100      	bne.n	800bc82 <HAL_UART_Init.constprop.98+0x33a>
 800bc80:	e10a      	b.n	800be98 <HAL_UART_Init.constprop.98+0x550>
 800bc82:	2b05      	cmp	r3, #5
 800bc84:	d100      	bne.n	800bc88 <HAL_UART_Init.constprop.98+0x340>
 800bc86:	e10b      	b.n	800bea0 <HAL_UART_Init.constprop.98+0x558>
 800bc88:	2b06      	cmp	r3, #6
 800bc8a:	d100      	bne.n	800bc8e <HAL_UART_Init.constprop.98+0x346>
 800bc8c:	e10b      	b.n	800bea6 <HAL_UART_Init.constprop.98+0x55e>
 800bc8e:	2b07      	cmp	r3, #7
 800bc90:	d100      	bne.n	800bc94 <HAL_UART_Init.constprop.98+0x34c>
 800bc92:	e10b      	b.n	800beac <HAL_UART_Init.constprop.98+0x564>
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d100      	bne.n	800bc9a <HAL_UART_Init.constprop.98+0x352>
 800bc98:	e10c      	b.n	800beb4 <HAL_UART_Init.constprop.98+0x56c>
 800bc9a:	2b09      	cmp	r3, #9
 800bc9c:	d100      	bne.n	800bca0 <HAL_UART_Init.constprop.98+0x358>
 800bc9e:	e10c      	b.n	800beba <HAL_UART_Init.constprop.98+0x572>
 800bca0:	2b0a      	cmp	r3, #10
 800bca2:	d100      	bne.n	800bca6 <HAL_UART_Init.constprop.98+0x35e>
 800bca4:	e10d      	b.n	800bec2 <HAL_UART_Init.constprop.98+0x57a>
 800bca6:	2b0b      	cmp	r3, #11
 800bca8:	d100      	bne.n	800bcac <HAL_UART_Init.constprop.98+0x364>
 800bcaa:	e10e      	b.n	800beca <HAL_UART_Init.constprop.98+0x582>
 800bcac:	2080      	movs	r0, #128	; 0x80
 800bcae:	2308      	movs	r3, #8
 800bcb0:	0200      	lsls	r0, r0, #8
 800bcb2:	e066      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800bcb4:	40013800 	.word	0x40013800
 800bcb8:	40021000 	.word	0x40021000
 800bcbc:	200004c0 	.word	0x200004c0
 800bcc0:	40020008 	.word	0x40020008
 800bcc4:	20000540 	.word	0x20000540
 800bcc8:	4002001c 	.word	0x4002001c
 800bccc:	e000e100 	.word	0xe000e100
 800bcd0:	cfff69f3 	.word	0xcfff69f3
 800bcd4:	ffffcfff 	.word	0xffffcfff
 800bcd8:	40008000 	.word	0x40008000
 800bcdc:	11fff4ff 	.word	0x11fff4ff
 800bce0:	08018d9c 	.word	0x08018d9c
 800bce4:	40004400 	.word	0x40004400
 800bce8:	40004800 	.word	0x40004800
 800bcec:	40004c00 	.word	0x40004c00
 800bcf0:	00010001 	.word	0x00010001
 800bcf4:	fffdffff 	.word	0xfffdffff
 800bcf8:	fffeffff 	.word	0xfffeffff
 800bcfc:	fffbffff 	.word	0xfffbffff
 800bd00:	ffff7fff 	.word	0xffff7fff
 800bd04:	ffffefff 	.word	0xffffefff
 800bd08:	ffffdfff 	.word	0xffffdfff
 800bd0c:	ffefffff 	.word	0xffefffff
 800bd10:	ff9fffff 	.word	0xff9fffff
 800bd14:	fff7ffff 	.word	0xfff7ffff
 800bd18:	ffffb7ff 	.word	0xffffb7ff
 800bd1c:	200003c0 	.word	0x200003c0
 800bd20:	01ffffff 	.word	0x01ffffff
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bd24:	f7fe f930 	bl	8009f88 <HAL_RCC_GetPCLK1Freq>
 800bd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d021      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd30:	1849      	adds	r1, r1, r1
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d01e      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd36:	3102      	adds	r1, #2
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d01b      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd3c:	3102      	adds	r1, #2
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d018      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd42:	3102      	adds	r1, #2
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	d015      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd48:	3102      	adds	r1, #2
 800bd4a:	2b05      	cmp	r3, #5
 800bd4c:	d012      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd4e:	3102      	adds	r1, #2
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	d00f      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd54:	3104      	adds	r1, #4
 800bd56:	2b07      	cmp	r3, #7
 800bd58:	d00c      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd5a:	3110      	adds	r1, #16
 800bd5c:	2b08      	cmp	r3, #8
 800bd5e:	d009      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd60:	3120      	adds	r1, #32
 800bd62:	2b09      	cmp	r3, #9
 800bd64:	d006      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd66:	3140      	adds	r1, #64	; 0x40
 800bd68:	2b0a      	cmp	r3, #10
 800bd6a:	d003      	beq.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd6c:	397f      	subs	r1, #127	; 0x7f
 800bd6e:	2b0b      	cmp	r3, #11
 800bd70:	d100      	bne.n	800bd74 <HAL_UART_Init.constprop.98+0x42c>
 800bd72:	31ff      	adds	r1, #255	; 0xff
 800bd74:	f002 ff0c 	bl	800eb90 <__udivsi3>
 800bd78:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	42b0      	cmp	r0, r6
 800bd7e:	d100      	bne.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800bd80:	e6e2      	b.n	800bb48 <HAL_UART_Init.constprop.98+0x200>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd82:	2103      	movs	r1, #3
 800bd84:	6862      	ldr	r2, [r4, #4]
 800bd86:	4351      	muls	r1, r2
 800bd88:	4281      	cmp	r1, r0
 800bd8a:	d900      	bls.n	800bd8e <HAL_UART_Init.constprop.98+0x446>
 800bd8c:	e6db      	b.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd8e:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd90:	4281      	cmp	r1, r0
 800bd92:	d200      	bcs.n	800bd96 <HAL_UART_Init.constprop.98+0x44e>
 800bd94:	e6d7      	b.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
        switch (clocksource)
 800bd96:	2b08      	cmp	r3, #8
 800bd98:	d900      	bls.n	800bd9c <HAL_UART_Init.constprop.98+0x454>
 800bd9a:	e17f      	b.n	800c09c <HAL_UART_Init.constprop.98+0x754>
 800bd9c:	0018      	movs	r0, r3
 800bd9e:	f002 feed 	bl	800eb7c <__gnu_thumb1_case_uhi>
 800bda2:	0097      	.short	0x0097
 800bda4:	00ce017d 	.word	0x00ce017d
 800bda8:	0113017d 	.word	0x0113017d
 800bdac:	017d017d 	.word	0x017d017d
 800bdb0:	0138017d 	.word	0x0138017d
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d015      	beq.n	800bde4 <HAL_UART_Init.constprop.98+0x49c>
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d042      	beq.n	800be42 <HAL_UART_Init.constprop.98+0x4fa>
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d043      	beq.n	800be48 <HAL_UART_Init.constprop.98+0x500>
 800bdc0:	2b03      	cmp	r3, #3
 800bdc2:	d043      	beq.n	800be4c <HAL_UART_Init.constprop.98+0x504>
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d044      	beq.n	800be52 <HAL_UART_Init.constprop.98+0x50a>
 800bdc8:	2b05      	cmp	r3, #5
 800bdca:	d045      	beq.n	800be58 <HAL_UART_Init.constprop.98+0x510>
 800bdcc:	2b06      	cmp	r3, #6
 800bdce:	d046      	beq.n	800be5e <HAL_UART_Init.constprop.98+0x516>
 800bdd0:	2b07      	cmp	r3, #7
 800bdd2:	d047      	beq.n	800be64 <HAL_UART_Init.constprop.98+0x51c>
 800bdd4:	2b08      	cmp	r3, #8
 800bdd6:	d048      	beq.n	800be6a <HAL_UART_Init.constprop.98+0x522>
 800bdd8:	2b09      	cmp	r3, #9
 800bdda:	d049      	beq.n	800be70 <HAL_UART_Init.constprop.98+0x528>
 800bddc:	2b0a      	cmp	r3, #10
 800bdde:	d04a      	beq.n	800be76 <HAL_UART_Init.constprop.98+0x52e>
 800bde0:	2b0b      	cmp	r3, #11
 800bde2:	d04b      	beq.n	800be7c <HAL_UART_Init.constprop.98+0x534>
 800bde4:	2302      	movs	r3, #2
 800bde6:	48af      	ldr	r0, [pc, #700]	; (800c0a4 <HAL_UART_Init.constprop.98+0x75c>)
 800bde8:	e7cb      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bdea:	f7ff fc75 	bl	800b6d8 <HAL_RCC_GetSysClockFreq>
 800bdee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d021      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800bdf6:	1849      	adds	r1, r1, r1
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d01e      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800bdfc:	3102      	adds	r1, #2
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d01b      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be02:	3102      	adds	r1, #2
 800be04:	2b03      	cmp	r3, #3
 800be06:	d018      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be08:	3102      	adds	r1, #2
 800be0a:	2b04      	cmp	r3, #4
 800be0c:	d015      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be0e:	3102      	adds	r1, #2
 800be10:	2b05      	cmp	r3, #5
 800be12:	d012      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be14:	3102      	adds	r1, #2
 800be16:	2b06      	cmp	r3, #6
 800be18:	d00f      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be1a:	3104      	adds	r1, #4
 800be1c:	2b07      	cmp	r3, #7
 800be1e:	d00c      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be20:	3110      	adds	r1, #16
 800be22:	2b08      	cmp	r3, #8
 800be24:	d009      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be26:	3120      	adds	r1, #32
 800be28:	2b09      	cmp	r3, #9
 800be2a:	d006      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be2c:	3140      	adds	r1, #64	; 0x40
 800be2e:	2b0a      	cmp	r3, #10
 800be30:	d003      	beq.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be32:	397f      	subs	r1, #127	; 0x7f
 800be34:	2b0b      	cmp	r3, #11
 800be36:	d100      	bne.n	800be3a <HAL_UART_Init.constprop.98+0x4f2>
 800be38:	31ff      	adds	r1, #255	; 0xff
 800be3a:	f002 fea9 	bl	800eb90 <__udivsi3>
 800be3e:	2304      	movs	r3, #4
 800be40:	e79b      	b.n	800bd7a <HAL_UART_Init.constprop.98+0x432>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800be42:	2302      	movs	r3, #2
 800be44:	4898      	ldr	r0, [pc, #608]	; (800c0a8 <HAL_UART_Init.constprop.98+0x760>)
 800be46:	e79c      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be48:	4898      	ldr	r0, [pc, #608]	; (800c0ac <HAL_UART_Init.constprop.98+0x764>)
 800be4a:	e79a      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be4c:	2302      	movs	r3, #2
 800be4e:	4898      	ldr	r0, [pc, #608]	; (800c0b0 <HAL_UART_Init.constprop.98+0x768>)
 800be50:	e797      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be52:	2302      	movs	r3, #2
 800be54:	4897      	ldr	r0, [pc, #604]	; (800c0b4 <HAL_UART_Init.constprop.98+0x76c>)
 800be56:	e794      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be58:	2302      	movs	r3, #2
 800be5a:	4897      	ldr	r0, [pc, #604]	; (800c0b8 <HAL_UART_Init.constprop.98+0x770>)
 800be5c:	e791      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be5e:	2302      	movs	r3, #2
 800be60:	4896      	ldr	r0, [pc, #600]	; (800c0bc <HAL_UART_Init.constprop.98+0x774>)
 800be62:	e78e      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be64:	2302      	movs	r3, #2
 800be66:	4896      	ldr	r0, [pc, #600]	; (800c0c0 <HAL_UART_Init.constprop.98+0x778>)
 800be68:	e78b      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be6a:	2302      	movs	r3, #2
 800be6c:	4895      	ldr	r0, [pc, #596]	; (800c0c4 <HAL_UART_Init.constprop.98+0x77c>)
 800be6e:	e788      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be70:	2302      	movs	r3, #2
 800be72:	4895      	ldr	r0, [pc, #596]	; (800c0c8 <HAL_UART_Init.constprop.98+0x780>)
 800be74:	e785      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be76:	2302      	movs	r3, #2
 800be78:	4894      	ldr	r0, [pc, #592]	; (800c0cc <HAL_UART_Init.constprop.98+0x784>)
 800be7a:	e782      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be7c:	2302      	movs	r3, #2
 800be7e:	4894      	ldr	r0, [pc, #592]	; (800c0d0 <HAL_UART_Init.constprop.98+0x788>)
 800be80:	e77f      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800be82:	2080      	movs	r0, #128	; 0x80
 800be84:	2308      	movs	r3, #8
 800be86:	01c0      	lsls	r0, r0, #7
 800be88:	e77b      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be8a:	2080      	movs	r0, #128	; 0x80
 800be8c:	2308      	movs	r3, #8
 800be8e:	0180      	lsls	r0, r0, #6
 800be90:	e777      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be92:	2308      	movs	r3, #8
 800be94:	488f      	ldr	r0, [pc, #572]	; (800c0d4 <HAL_UART_Init.constprop.98+0x78c>)
 800be96:	e774      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800be98:	2080      	movs	r0, #128	; 0x80
 800be9a:	2308      	movs	r3, #8
 800be9c:	0140      	lsls	r0, r0, #5
 800be9e:	e770      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800bea0:	2308      	movs	r3, #8
 800bea2:	488d      	ldr	r0, [pc, #564]	; (800c0d8 <HAL_UART_Init.constprop.98+0x790>)
 800bea4:	e76d      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800bea6:	2308      	movs	r3, #8
 800bea8:	488c      	ldr	r0, [pc, #560]	; (800c0dc <HAL_UART_Init.constprop.98+0x794>)
 800beaa:	e76a      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800beac:	2080      	movs	r0, #128	; 0x80
 800beae:	2308      	movs	r3, #8
 800beb0:	0100      	lsls	r0, r0, #4
 800beb2:	e766      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800beb4:	2080      	movs	r0, #128	; 0x80
 800beb6:	00c0      	lsls	r0, r0, #3
 800beb8:	e763      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800beba:	2080      	movs	r0, #128	; 0x80
 800bebc:	2308      	movs	r3, #8
 800bebe:	0080      	lsls	r0, r0, #2
 800bec0:	e75f      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800bec2:	2080      	movs	r0, #128	; 0x80
 800bec4:	2308      	movs	r3, #8
 800bec6:	0040      	lsls	r0, r0, #1
 800bec8:	e75b      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
 800beca:	2308      	movs	r3, #8
 800becc:	2080      	movs	r0, #128	; 0x80
 800bece:	e758      	b.n	800bd82 <HAL_UART_Init.constprop.98+0x43a>
            pclk = HAL_RCC_GetPCLK1Freq();
 800bed0:	f7fe f85a 	bl	8009f88 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bed4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bed6:	2201      	movs	r2, #1
 800bed8:	2300      	movs	r3, #0
 800beda:	2900      	cmp	r1, #0
 800bedc:	d07b      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bede:	2202      	movs	r2, #2
 800bee0:	2300      	movs	r3, #0
 800bee2:	2901      	cmp	r1, #1
 800bee4:	d077      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bee6:	2204      	movs	r2, #4
 800bee8:	2300      	movs	r3, #0
 800beea:	2902      	cmp	r1, #2
 800beec:	d073      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800beee:	2206      	movs	r2, #6
 800bef0:	2300      	movs	r3, #0
 800bef2:	2903      	cmp	r1, #3
 800bef4:	d06f      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bef6:	2208      	movs	r2, #8
 800bef8:	2300      	movs	r3, #0
 800befa:	2904      	cmp	r1, #4
 800befc:	d06b      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800befe:	220a      	movs	r2, #10
 800bf00:	2300      	movs	r3, #0
 800bf02:	2905      	cmp	r1, #5
 800bf04:	d067      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf06:	220c      	movs	r2, #12
 800bf08:	2300      	movs	r3, #0
 800bf0a:	2906      	cmp	r1, #6
 800bf0c:	d063      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf0e:	2210      	movs	r2, #16
 800bf10:	2300      	movs	r3, #0
 800bf12:	2907      	cmp	r1, #7
 800bf14:	d05f      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf16:	2220      	movs	r2, #32
 800bf18:	2300      	movs	r3, #0
 800bf1a:	2908      	cmp	r1, #8
 800bf1c:	d05b      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf1e:	2240      	movs	r2, #64	; 0x40
 800bf20:	2300      	movs	r3, #0
 800bf22:	2909      	cmp	r1, #9
 800bf24:	d057      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf26:	2280      	movs	r2, #128	; 0x80
 800bf28:	2300      	movs	r3, #0
 800bf2a:	290a      	cmp	r1, #10
 800bf2c:	d053      	beq.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf2e:	2201      	movs	r2, #1
 800bf30:	2300      	movs	r3, #0
 800bf32:	290b      	cmp	r1, #11
 800bf34:	d14f      	bne.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
 800bf36:	2280      	movs	r2, #128	; 0x80
 800bf38:	2300      	movs	r3, #0
 800bf3a:	0052      	lsls	r2, r2, #1
 800bf3c:	e04b      	b.n	800bfd6 <HAL_UART_Init.constprop.98+0x68e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d03e      	beq.n	800bfc2 <HAL_UART_Init.constprop.98+0x67a>
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d01e      	beq.n	800bf86 <HAL_UART_Init.constprop.98+0x63e>
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d01f      	beq.n	800bf8c <HAL_UART_Init.constprop.98+0x644>
 800bf4c:	2b03      	cmp	r3, #3
 800bf4e:	d020      	beq.n	800bf92 <HAL_UART_Init.constprop.98+0x64a>
 800bf50:	2b04      	cmp	r3, #4
 800bf52:	d021      	beq.n	800bf98 <HAL_UART_Init.constprop.98+0x650>
 800bf54:	2b05      	cmp	r3, #5
 800bf56:	d022      	beq.n	800bf9e <HAL_UART_Init.constprop.98+0x656>
 800bf58:	2b06      	cmp	r3, #6
 800bf5a:	d023      	beq.n	800bfa4 <HAL_UART_Init.constprop.98+0x65c>
 800bf5c:	2b07      	cmp	r3, #7
 800bf5e:	d024      	beq.n	800bfaa <HAL_UART_Init.constprop.98+0x662>
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d025      	beq.n	800bfb0 <HAL_UART_Init.constprop.98+0x668>
 800bf64:	2b09      	cmp	r3, #9
 800bf66:	d026      	beq.n	800bfb6 <HAL_UART_Init.constprop.98+0x66e>
 800bf68:	2b0a      	cmp	r3, #10
 800bf6a:	d027      	beq.n	800bfbc <HAL_UART_Init.constprop.98+0x674>
 800bf6c:	2b0b      	cmp	r3, #11
 800bf6e:	d128      	bne.n	800bfc2 <HAL_UART_Init.constprop.98+0x67a>
 800bf70:	2100      	movs	r1, #0
 800bf72:	484c      	ldr	r0, [pc, #304]	; (800c0a4 <HAL_UART_Init.constprop.98+0x75c>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf74:	2700      	movs	r7, #0
 800bf76:	0856      	lsrs	r6, r2, #1
 800bf78:	1980      	adds	r0, r0, r6
 800bf7a:	4179      	adcs	r1, r7
 800bf7c:	003b      	movs	r3, r7
 800bf7e:	f002 fff5 	bl	800ef6c <__aeabi_uldivmod>
 800bf82:	003e      	movs	r6, r7
 800bf84:	e03c      	b.n	800c000 <HAL_UART_Init.constprop.98+0x6b8>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf86:	4856      	ldr	r0, [pc, #344]	; (800c0e0 <HAL_UART_Init.constprop.98+0x798>)
 800bf88:	2100      	movs	r1, #0
 800bf8a:	e7f3      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bf8c:	4855      	ldr	r0, [pc, #340]	; (800c0e4 <HAL_UART_Init.constprop.98+0x79c>)
 800bf8e:	2100      	movs	r1, #0
 800bf90:	e7f0      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bf92:	4855      	ldr	r0, [pc, #340]	; (800c0e8 <HAL_UART_Init.constprop.98+0x7a0>)
 800bf94:	2100      	movs	r1, #0
 800bf96:	e7ed      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bf98:	4854      	ldr	r0, [pc, #336]	; (800c0ec <HAL_UART_Init.constprop.98+0x7a4>)
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	e7ea      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bf9e:	4854      	ldr	r0, [pc, #336]	; (800c0f0 <HAL_UART_Init.constprop.98+0x7a8>)
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	e7e7      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfa4:	4853      	ldr	r0, [pc, #332]	; (800c0f4 <HAL_UART_Init.constprop.98+0x7ac>)
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	e7e4      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfaa:	4853      	ldr	r0, [pc, #332]	; (800c0f8 <HAL_UART_Init.constprop.98+0x7b0>)
 800bfac:	2100      	movs	r1, #0
 800bfae:	e7e1      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfb0:	4852      	ldr	r0, [pc, #328]	; (800c0fc <HAL_UART_Init.constprop.98+0x7b4>)
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	e7de      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfb6:	4852      	ldr	r0, [pc, #328]	; (800c100 <HAL_UART_Init.constprop.98+0x7b8>)
 800bfb8:	2100      	movs	r1, #0
 800bfba:	e7db      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfbc:	4851      	ldr	r0, [pc, #324]	; (800c104 <HAL_UART_Init.constprop.98+0x7bc>)
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	e7d8      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800bfc2:	4851      	ldr	r0, [pc, #324]	; (800c108 <HAL_UART_Init.constprop.98+0x7c0>)
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	e7d5      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
            pclk = HAL_RCC_GetSysClockFreq();
 800bfc8:	f7ff fb86 	bl	800b6d8 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfce:	2201      	movs	r2, #1
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	2900      	cmp	r1, #0
 800bfd4:	d183      	bne.n	800bede <HAL_UART_Init.constprop.98+0x596>
 800bfd6:	6861      	ldr	r1, [r4, #4]
 800bfd8:	2700      	movs	r7, #0
 800bfda:	4688      	mov	r8, r1
 800bfdc:	2100      	movs	r1, #0
 800bfde:	f002 ffc5 	bl	800ef6c <__aeabi_uldivmod>
 800bfe2:	020b      	lsls	r3, r1, #8
 800bfe4:	4641      	mov	r1, r8
 800bfe6:	0e06      	lsrs	r6, r0, #24
 800bfe8:	4333      	orrs	r3, r6
 800bfea:	0202      	lsls	r2, r0, #8
 800bfec:	084e      	lsrs	r6, r1, #1
 800bfee:	1992      	adds	r2, r2, r6
 800bff0:	417b      	adcs	r3, r7
 800bff2:	0010      	movs	r0, r2
 800bff4:	0019      	movs	r1, r3
 800bff6:	4642      	mov	r2, r8
 800bff8:	003b      	movs	r3, r7
 800bffa:	f002 ffb7 	bl	800ef6c <__aeabi_uldivmod>
 800bffe:	003e      	movs	r6, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c000:	4b42      	ldr	r3, [pc, #264]	; (800c10c <HAL_UART_Init.constprop.98+0x7c4>)
 800c002:	4a43      	ldr	r2, [pc, #268]	; (800c110 <HAL_UART_Init.constprop.98+0x7c8>)
 800c004:	18c3      	adds	r3, r0, r3
 800c006:	4293      	cmp	r3, r2
 800c008:	d900      	bls.n	800c00c <HAL_UART_Init.constprop.98+0x6c4>
 800c00a:	e59c      	b.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
      huart->Instance->BRR = usartdiv;
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	60d8      	str	r0, [r3, #12]
 800c010:	e59a      	b.n	800bb48 <HAL_UART_Init.constprop.98+0x200>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	d019      	beq.n	800c04c <HAL_UART_Init.constprop.98+0x704>
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d01b      	beq.n	800c054 <HAL_UART_Init.constprop.98+0x70c>
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d01d      	beq.n	800c05c <HAL_UART_Init.constprop.98+0x714>
 800c020:	2b03      	cmp	r3, #3
 800c022:	d01f      	beq.n	800c064 <HAL_UART_Init.constprop.98+0x71c>
 800c024:	2b04      	cmp	r3, #4
 800c026:	d020      	beq.n	800c06a <HAL_UART_Init.constprop.98+0x722>
 800c028:	2b05      	cmp	r3, #5
 800c02a:	d022      	beq.n	800c072 <HAL_UART_Init.constprop.98+0x72a>
 800c02c:	2b06      	cmp	r3, #6
 800c02e:	d023      	beq.n	800c078 <HAL_UART_Init.constprop.98+0x730>
 800c030:	2080      	movs	r0, #128	; 0x80
 800c032:	2b07      	cmp	r3, #7
 800c034:	d023      	beq.n	800c07e <HAL_UART_Init.constprop.98+0x736>
 800c036:	2b08      	cmp	r3, #8
 800c038:	d024      	beq.n	800c084 <HAL_UART_Init.constprop.98+0x73c>
 800c03a:	2b09      	cmp	r3, #9
 800c03c:	d025      	beq.n	800c08a <HAL_UART_Init.constprop.98+0x742>
 800c03e:	2b0a      	cmp	r3, #10
 800c040:	d026      	beq.n	800c090 <HAL_UART_Init.constprop.98+0x748>
 800c042:	2b0b      	cmp	r3, #11
 800c044:	d127      	bne.n	800c096 <HAL_UART_Init.constprop.98+0x74e>
 800c046:	0200      	lsls	r0, r0, #8
 800c048:	2100      	movs	r1, #0
 800c04a:	e793      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c04c:	2080      	movs	r0, #128	; 0x80
 800c04e:	2100      	movs	r1, #0
 800c050:	0400      	lsls	r0, r0, #16
 800c052:	e78f      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c054:	2080      	movs	r0, #128	; 0x80
 800c056:	2100      	movs	r1, #0
 800c058:	03c0      	lsls	r0, r0, #15
 800c05a:	e78b      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c05c:	2080      	movs	r0, #128	; 0x80
 800c05e:	2100      	movs	r1, #0
 800c060:	0380      	lsls	r0, r0, #14
 800c062:	e787      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c064:	482b      	ldr	r0, [pc, #172]	; (800c114 <HAL_UART_Init.constprop.98+0x7cc>)
 800c066:	2100      	movs	r1, #0
 800c068:	e784      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c06a:	2080      	movs	r0, #128	; 0x80
 800c06c:	2100      	movs	r1, #0
 800c06e:	0340      	lsls	r0, r0, #13
 800c070:	e780      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c072:	4829      	ldr	r0, [pc, #164]	; (800c118 <HAL_UART_Init.constprop.98+0x7d0>)
 800c074:	2100      	movs	r1, #0
 800c076:	e77d      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c078:	4828      	ldr	r0, [pc, #160]	; (800c11c <HAL_UART_Init.constprop.98+0x7d4>)
 800c07a:	2100      	movs	r1, #0
 800c07c:	e77a      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c07e:	0300      	lsls	r0, r0, #12
 800c080:	2100      	movs	r1, #0
 800c082:	e777      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c084:	02c0      	lsls	r0, r0, #11
 800c086:	2100      	movs	r1, #0
 800c088:	e774      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c08a:	0280      	lsls	r0, r0, #10
 800c08c:	2100      	movs	r1, #0
 800c08e:	e771      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c090:	0240      	lsls	r0, r0, #9
 800c092:	2100      	movs	r1, #0
 800c094:	e76e      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
 800c096:	0400      	lsls	r0, r0, #16
 800c098:	2100      	movs	r1, #0
 800c09a:	e76b      	b.n	800bf74 <HAL_UART_Init.constprop.98+0x62c>
            ret = HAL_ERROR;
 800c09c:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c09e:	2000      	movs	r0, #0
 800c0a0:	e7ae      	b.n	800c000 <HAL_UART_Init.constprop.98+0x6b8>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	00f42400 	.word	0x00f42400
 800c0a8:	007a1200 	.word	0x007a1200
 800c0ac:	003d0900 	.word	0x003d0900
 800c0b0:	0028b0aa 	.word	0x0028b0aa
 800c0b4:	001e8480 	.word	0x001e8480
 800c0b8:	00186a00 	.word	0x00186a00
 800c0bc:	00145855 	.word	0x00145855
 800c0c0:	000f4240 	.word	0x000f4240
 800c0c4:	0007a120 	.word	0x0007a120
 800c0c8:	0003d090 	.word	0x0003d090
 800c0cc:	0001e848 	.word	0x0001e848
 800c0d0:	0000f424 	.word	0x0000f424
 800c0d4:	00001555 	.word	0x00001555
 800c0d8:	00000ccc 	.word	0x00000ccc
 800c0dc:	00000aaa 	.word	0x00000aaa
 800c0e0:	7a120000 	.word	0x7a120000
 800c0e4:	3d090000 	.word	0x3d090000
 800c0e8:	28b0aa00 	.word	0x28b0aa00
 800c0ec:	1e848000 	.word	0x1e848000
 800c0f0:	186a0000 	.word	0x186a0000
 800c0f4:	14585500 	.word	0x14585500
 800c0f8:	0f424000 	.word	0x0f424000
 800c0fc:	07a12000 	.word	0x07a12000
 800c100:	03d09000 	.word	0x03d09000
 800c104:	01e84800 	.word	0x01e84800
 800c108:	f4240000 	.word	0xf4240000
 800c10c:	fffffd00 	.word	0xfffffd00
 800c110:	000ffcff 	.word	0x000ffcff
 800c114:	00155500 	.word	0x00155500
 800c118:	000ccc00 	.word	0x000ccc00
 800c11c:	000aaa00 	.word	0x000aaa00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c120:	2b00      	cmp	r3, #0
 800c122:	d026      	beq.n	800c172 <HAL_UART_Init.constprop.98+0x82a>
 800c124:	2b01      	cmp	r3, #1
 800c126:	d026      	beq.n	800c176 <HAL_UART_Init.constprop.98+0x82e>
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d026      	beq.n	800c17a <HAL_UART_Init.constprop.98+0x832>
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d026      	beq.n	800c17e <HAL_UART_Init.constprop.98+0x836>
 800c130:	2b04      	cmp	r3, #4
 800c132:	d026      	beq.n	800c182 <HAL_UART_Init.constprop.98+0x83a>
 800c134:	2b05      	cmp	r3, #5
 800c136:	d026      	beq.n	800c186 <HAL_UART_Init.constprop.98+0x83e>
 800c138:	2b06      	cmp	r3, #6
 800c13a:	d026      	beq.n	800c18a <HAL_UART_Init.constprop.98+0x842>
 800c13c:	2b07      	cmp	r3, #7
 800c13e:	d026      	beq.n	800c18e <HAL_UART_Init.constprop.98+0x846>
 800c140:	2b08      	cmp	r3, #8
 800c142:	d026      	beq.n	800c192 <HAL_UART_Init.constprop.98+0x84a>
 800c144:	2b09      	cmp	r3, #9
 800c146:	d026      	beq.n	800c196 <HAL_UART_Init.constprop.98+0x84e>
 800c148:	2b0a      	cmp	r3, #10
 800c14a:	d026      	beq.n	800c19a <HAL_UART_Init.constprop.98+0x852>
 800c14c:	3b0b      	subs	r3, #11
 800c14e:	0018      	movs	r0, r3
 800c150:	1e43      	subs	r3, r0, #1
 800c152:	4198      	sbcs	r0, r3
 800c154:	4ba1      	ldr	r3, [pc, #644]	; (800c3dc <HAL_UART_Init.constprop.98+0xa94>)
 800c156:	4240      	negs	r0, r0
 800c158:	4018      	ands	r0, r3
 800c15a:	4ba1      	ldr	r3, [pc, #644]	; (800c3e0 <HAL_UART_Init.constprop.98+0xa98>)
 800c15c:	469c      	mov	ip, r3
 800c15e:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c160:	6863      	ldr	r3, [r4, #4]
 800c162:	6861      	ldr	r1, [r4, #4]
 800c164:	085b      	lsrs	r3, r3, #1
 800c166:	1818      	adds	r0, r3, r0
 800c168:	f002 fd12 	bl	800eb90 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c16c:	2600      	movs	r6, #0
 800c16e:	b280      	uxth	r0, r0
 800c170:	e027      	b.n	800c1c2 <HAL_UART_Init.constprop.98+0x87a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c172:	489c      	ldr	r0, [pc, #624]	; (800c3e4 <HAL_UART_Init.constprop.98+0xa9c>)
 800c174:	e7f4      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c176:	489c      	ldr	r0, [pc, #624]	; (800c3e8 <HAL_UART_Init.constprop.98+0xaa0>)
 800c178:	e7f2      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c17a:	489c      	ldr	r0, [pc, #624]	; (800c3ec <HAL_UART_Init.constprop.98+0xaa4>)
 800c17c:	e7f0      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c17e:	489c      	ldr	r0, [pc, #624]	; (800c3f0 <HAL_UART_Init.constprop.98+0xaa8>)
 800c180:	e7ee      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c182:	489c      	ldr	r0, [pc, #624]	; (800c3f4 <HAL_UART_Init.constprop.98+0xaac>)
 800c184:	e7ec      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c186:	489c      	ldr	r0, [pc, #624]	; (800c3f8 <HAL_UART_Init.constprop.98+0xab0>)
 800c188:	e7ea      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c18a:	489c      	ldr	r0, [pc, #624]	; (800c3fc <HAL_UART_Init.constprop.98+0xab4>)
 800c18c:	e7e8      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c18e:	489c      	ldr	r0, [pc, #624]	; (800c400 <HAL_UART_Init.constprop.98+0xab8>)
 800c190:	e7e6      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c192:	489c      	ldr	r0, [pc, #624]	; (800c404 <HAL_UART_Init.constprop.98+0xabc>)
 800c194:	e7e4      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c196:	489c      	ldr	r0, [pc, #624]	; (800c408 <HAL_UART_Init.constprop.98+0xac0>)
 800c198:	e7e2      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c19a:	489c      	ldr	r0, [pc, #624]	; (800c40c <HAL_UART_Init.constprop.98+0xac4>)
 800c19c:	e7e0      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
        pclk = HAL_RCC_GetSysClockFreq();
 800c19e:	f7ff fa9b 	bl	800b6d8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d000      	beq.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c1aa:	e16f      	b.n	800c48c <HAL_UART_Init.constprop.98+0xb44>
 800c1ac:	f002 fcf0 	bl	800eb90 <__udivsi3>
 800c1b0:	6866      	ldr	r6, [r4, #4]
 800c1b2:	0040      	lsls	r0, r0, #1
 800c1b4:	0873      	lsrs	r3, r6, #1
 800c1b6:	0031      	movs	r1, r6
 800c1b8:	18c0      	adds	r0, r0, r3
 800c1ba:	f002 fce9 	bl	800eb90 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1be:	2600      	movs	r6, #0
 800c1c0:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1c2:	0003      	movs	r3, r0
 800c1c4:	4a92      	ldr	r2, [pc, #584]	; (800c410 <HAL_UART_Init.constprop.98+0xac8>)
 800c1c6:	3b10      	subs	r3, #16
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d900      	bls.n	800c1ce <HAL_UART_Init.constprop.98+0x886>
 800c1cc:	e4bb      	b.n	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1ce:	230f      	movs	r3, #15
 800c1d0:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1d2:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1d4:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1d6:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	4310      	orrs	r0, r2
 800c1dc:	60d8      	str	r0, [r3, #12]
 800c1de:	e4b3      	b.n	800bb48 <HAL_UART_Init.constprop.98+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d018      	beq.n	800c216 <HAL_UART_Init.constprop.98+0x8ce>
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d019      	beq.n	800c21c <HAL_UART_Init.constprop.98+0x8d4>
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d01a      	beq.n	800c222 <HAL_UART_Init.constprop.98+0x8da>
 800c1ec:	2b03      	cmp	r3, #3
 800c1ee:	d01b      	beq.n	800c228 <HAL_UART_Init.constprop.98+0x8e0>
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d01b      	beq.n	800c22c <HAL_UART_Init.constprop.98+0x8e4>
 800c1f4:	2b05      	cmp	r3, #5
 800c1f6:	d01c      	beq.n	800c232 <HAL_UART_Init.constprop.98+0x8ea>
 800c1f8:	2b06      	cmp	r3, #6
 800c1fa:	d01c      	beq.n	800c236 <HAL_UART_Init.constprop.98+0x8ee>
 800c1fc:	2080      	movs	r0, #128	; 0x80
 800c1fe:	2b07      	cmp	r3, #7
 800c200:	d01b      	beq.n	800c23a <HAL_UART_Init.constprop.98+0x8f2>
 800c202:	2b08      	cmp	r3, #8
 800c204:	d01b      	beq.n	800c23e <HAL_UART_Init.constprop.98+0x8f6>
 800c206:	2b09      	cmp	r3, #9
 800c208:	d01b      	beq.n	800c242 <HAL_UART_Init.constprop.98+0x8fa>
 800c20a:	2b0a      	cmp	r3, #10
 800c20c:	d01b      	beq.n	800c246 <HAL_UART_Init.constprop.98+0x8fe>
 800c20e:	2b0b      	cmp	r3, #11
 800c210:	d11b      	bne.n	800c24a <HAL_UART_Init.constprop.98+0x902>
 800c212:	0040      	lsls	r0, r0, #1
 800c214:	e7a4      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c216:	2080      	movs	r0, #128	; 0x80
 800c218:	0240      	lsls	r0, r0, #9
 800c21a:	e7a1      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c21c:	2080      	movs	r0, #128	; 0x80
 800c21e:	0200      	lsls	r0, r0, #8
 800c220:	e79e      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c222:	2080      	movs	r0, #128	; 0x80
 800c224:	01c0      	lsls	r0, r0, #7
 800c226:	e79b      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c228:	487a      	ldr	r0, [pc, #488]	; (800c414 <HAL_UART_Init.constprop.98+0xacc>)
 800c22a:	e799      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c22c:	2080      	movs	r0, #128	; 0x80
 800c22e:	0180      	lsls	r0, r0, #6
 800c230:	e796      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c232:	4879      	ldr	r0, [pc, #484]	; (800c418 <HAL_UART_Init.constprop.98+0xad0>)
 800c234:	e794      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c236:	4879      	ldr	r0, [pc, #484]	; (800c41c <HAL_UART_Init.constprop.98+0xad4>)
 800c238:	e792      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c23a:	0140      	lsls	r0, r0, #5
 800c23c:	e790      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c23e:	0100      	lsls	r0, r0, #4
 800c240:	e78e      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c242:	00c0      	lsls	r0, r0, #3
 800c244:	e78c      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c246:	0080      	lsls	r0, r0, #2
 800c248:	e78a      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
 800c24a:	0240      	lsls	r0, r0, #9
 800c24c:	e788      	b.n	800c160 <HAL_UART_Init.constprop.98+0x818>
        ret = HAL_ERROR;
 800c24e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c250:	2000      	movs	r0, #0
 800c252:	e7b6      	b.n	800c1c2 <HAL_UART_Init.constprop.98+0x87a>
    switch (clocksource)
 800c254:	2808      	cmp	r0, #8
 800c256:	d900      	bls.n	800c25a <HAL_UART_Init.constprop.98+0x912>
 800c258:	e109      	b.n	800c46e <HAL_UART_Init.constprop.98+0xb26>
 800c25a:	f002 fc8f 	bl	800eb7c <__gnu_thumb1_case_uhi>
 800c25e:	0009      	.short	0x0009
 800c260:	00320108 	.word	0x00320108
 800c264:	00710108 	.word	0x00710108
 800c268:	01080108 	.word	0x01080108
 800c26c:	00890108 	.word	0x00890108
        pclk = HAL_RCC_GetPCLK1Freq();
 800c270:	f7fd fe8a 	bl	8009f88 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c276:	2101      	movs	r1, #1
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d067      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c27c:	1849      	adds	r1, r1, r1
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d064      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c282:	3102      	adds	r1, #2
 800c284:	2b02      	cmp	r3, #2
 800c286:	d061      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c288:	3102      	adds	r1, #2
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d05e      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c28e:	3102      	adds	r1, #2
 800c290:	2b04      	cmp	r3, #4
 800c292:	d05b      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c294:	3102      	adds	r1, #2
 800c296:	2b05      	cmp	r3, #5
 800c298:	d058      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c29a:	3102      	adds	r1, #2
 800c29c:	2b06      	cmp	r3, #6
 800c29e:	d055      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2a0:	3104      	adds	r1, #4
 800c2a2:	2b07      	cmp	r3, #7
 800c2a4:	d052      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2a6:	3110      	adds	r1, #16
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d04f      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2ac:	3120      	adds	r1, #32
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	d04c      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2b2:	3140      	adds	r1, #64	; 0x40
 800c2b4:	2b0a      	cmp	r3, #10
 800c2b6:	d049      	beq.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2b8:	397f      	subs	r1, #127	; 0x7f
 800c2ba:	2b0b      	cmp	r3, #11
 800c2bc:	d146      	bne.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
 800c2be:	31ff      	adds	r1, #255	; 0xff
 800c2c0:	e044      	b.n	800c34c <HAL_UART_Init.constprop.98+0xa04>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d026      	beq.n	800c314 <HAL_UART_Init.constprop.98+0x9cc>
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d026      	beq.n	800c318 <HAL_UART_Init.constprop.98+0x9d0>
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d026      	beq.n	800c31c <HAL_UART_Init.constprop.98+0x9d4>
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d026      	beq.n	800c320 <HAL_UART_Init.constprop.98+0x9d8>
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d026      	beq.n	800c324 <HAL_UART_Init.constprop.98+0x9dc>
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	d026      	beq.n	800c328 <HAL_UART_Init.constprop.98+0x9e0>
 800c2da:	2b06      	cmp	r3, #6
 800c2dc:	d026      	beq.n	800c32c <HAL_UART_Init.constprop.98+0x9e4>
 800c2de:	2b07      	cmp	r3, #7
 800c2e0:	d026      	beq.n	800c330 <HAL_UART_Init.constprop.98+0x9e8>
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d026      	beq.n	800c334 <HAL_UART_Init.constprop.98+0x9ec>
 800c2e6:	2b09      	cmp	r3, #9
 800c2e8:	d026      	beq.n	800c338 <HAL_UART_Init.constprop.98+0x9f0>
 800c2ea:	2b0a      	cmp	r3, #10
 800c2ec:	d026      	beq.n	800c33c <HAL_UART_Init.constprop.98+0x9f4>
 800c2ee:	3b0b      	subs	r3, #11
 800c2f0:	0018      	movs	r0, r3
 800c2f2:	1e43      	subs	r3, r0, #1
 800c2f4:	4198      	sbcs	r0, r3
 800c2f6:	4b4a      	ldr	r3, [pc, #296]	; (800c420 <HAL_UART_Init.constprop.98+0xad8>)
 800c2f8:	4240      	negs	r0, r0
 800c2fa:	4018      	ands	r0, r3
 800c2fc:	4b49      	ldr	r3, [pc, #292]	; (800c424 <HAL_UART_Init.constprop.98+0xadc>)
 800c2fe:	469c      	mov	ip, r3
 800c300:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c302:	6863      	ldr	r3, [r4, #4]
 800c304:	6861      	ldr	r1, [r4, #4]
 800c306:	085b      	lsrs	r3, r3, #1
 800c308:	1818      	adds	r0, r3, r0
 800c30a:	f002 fc41 	bl	800eb90 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c30e:	2600      	movs	r6, #0
 800c310:	b280      	uxth	r0, r0
 800c312:	e025      	b.n	800c360 <HAL_UART_Init.constprop.98+0xa18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c314:	4834      	ldr	r0, [pc, #208]	; (800c3e8 <HAL_UART_Init.constprop.98+0xaa0>)
 800c316:	e7f4      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c318:	4834      	ldr	r0, [pc, #208]	; (800c3ec <HAL_UART_Init.constprop.98+0xaa4>)
 800c31a:	e7f2      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c31c:	4835      	ldr	r0, [pc, #212]	; (800c3f4 <HAL_UART_Init.constprop.98+0xaac>)
 800c31e:	e7f0      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c320:	4836      	ldr	r0, [pc, #216]	; (800c3fc <HAL_UART_Init.constprop.98+0xab4>)
 800c322:	e7ee      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c324:	4836      	ldr	r0, [pc, #216]	; (800c400 <HAL_UART_Init.constprop.98+0xab8>)
 800c326:	e7ec      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c328:	483f      	ldr	r0, [pc, #252]	; (800c428 <HAL_UART_Init.constprop.98+0xae0>)
 800c32a:	e7ea      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c32c:	483f      	ldr	r0, [pc, #252]	; (800c42c <HAL_UART_Init.constprop.98+0xae4>)
 800c32e:	e7e8      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c330:	4834      	ldr	r0, [pc, #208]	; (800c404 <HAL_UART_Init.constprop.98+0xabc>)
 800c332:	e7e6      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c334:	4834      	ldr	r0, [pc, #208]	; (800c408 <HAL_UART_Init.constprop.98+0xac0>)
 800c336:	e7e4      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c338:	4834      	ldr	r0, [pc, #208]	; (800c40c <HAL_UART_Init.constprop.98+0xac4>)
 800c33a:	e7e2      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c33c:	4828      	ldr	r0, [pc, #160]	; (800c3e0 <HAL_UART_Init.constprop.98+0xa98>)
 800c33e:	e7e0      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
        pclk = HAL_RCC_GetSysClockFreq();
 800c340:	f7ff f9ca 	bl	800b6d8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c346:	2101      	movs	r1, #1
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d197      	bne.n	800c27c <HAL_UART_Init.constprop.98+0x934>
 800c34c:	f002 fc20 	bl	800eb90 <__udivsi3>
 800c350:	6866      	ldr	r6, [r4, #4]
 800c352:	0873      	lsrs	r3, r6, #1
 800c354:	0031      	movs	r1, r6
 800c356:	18c0      	adds	r0, r0, r3
 800c358:	f002 fc1a 	bl	800eb90 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c35c:	2600      	movs	r6, #0
 800c35e:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c360:	0003      	movs	r3, r0
 800c362:	4a2b      	ldr	r2, [pc, #172]	; (800c410 <HAL_UART_Init.constprop.98+0xac8>)
 800c364:	3b10      	subs	r3, #16
 800c366:	4293      	cmp	r3, r2
 800c368:	d800      	bhi.n	800c36c <HAL_UART_Init.constprop.98+0xa24>
 800c36a:	e64f      	b.n	800c00c <HAL_UART_Init.constprop.98+0x6c4>
 800c36c:	f7ff fbeb 	bl	800bb46 <HAL_UART_Init.constprop.98+0x1fe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c370:	2b00      	cmp	r3, #0
 800c372:	d018      	beq.n	800c3a6 <HAL_UART_Init.constprop.98+0xa5e>
 800c374:	2b01      	cmp	r3, #1
 800c376:	d019      	beq.n	800c3ac <HAL_UART_Init.constprop.98+0xa64>
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d01a      	beq.n	800c3b2 <HAL_UART_Init.constprop.98+0xa6a>
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d01b      	beq.n	800c3b8 <HAL_UART_Init.constprop.98+0xa70>
 800c380:	2b04      	cmp	r3, #4
 800c382:	d01b      	beq.n	800c3bc <HAL_UART_Init.constprop.98+0xa74>
 800c384:	2b05      	cmp	r3, #5
 800c386:	d01c      	beq.n	800c3c2 <HAL_UART_Init.constprop.98+0xa7a>
 800c388:	2b06      	cmp	r3, #6
 800c38a:	d01c      	beq.n	800c3c6 <HAL_UART_Init.constprop.98+0xa7e>
 800c38c:	2080      	movs	r0, #128	; 0x80
 800c38e:	2b07      	cmp	r3, #7
 800c390:	d01b      	beq.n	800c3ca <HAL_UART_Init.constprop.98+0xa82>
 800c392:	2b08      	cmp	r3, #8
 800c394:	d01b      	beq.n	800c3ce <HAL_UART_Init.constprop.98+0xa86>
 800c396:	2b09      	cmp	r3, #9
 800c398:	d01b      	beq.n	800c3d2 <HAL_UART_Init.constprop.98+0xa8a>
 800c39a:	2b0a      	cmp	r3, #10
 800c39c:	d01b      	beq.n	800c3d6 <HAL_UART_Init.constprop.98+0xa8e>
 800c39e:	2b0b      	cmp	r3, #11
 800c3a0:	d0af      	beq.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3a2:	0200      	lsls	r0, r0, #8
 800c3a4:	e7ad      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3a6:	2080      	movs	r0, #128	; 0x80
 800c3a8:	0200      	lsls	r0, r0, #8
 800c3aa:	e7aa      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3ac:	2080      	movs	r0, #128	; 0x80
 800c3ae:	01c0      	lsls	r0, r0, #7
 800c3b0:	e7a7      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3b2:	2080      	movs	r0, #128	; 0x80
 800c3b4:	0180      	lsls	r0, r0, #6
 800c3b6:	e7a4      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3b8:	481d      	ldr	r0, [pc, #116]	; (800c430 <HAL_UART_Init.constprop.98+0xae8>)
 800c3ba:	e7a2      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3bc:	2080      	movs	r0, #128	; 0x80
 800c3be:	0140      	lsls	r0, r0, #5
 800c3c0:	e79f      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3c2:	481c      	ldr	r0, [pc, #112]	; (800c434 <HAL_UART_Init.constprop.98+0xaec>)
 800c3c4:	e79d      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3c6:	481c      	ldr	r0, [pc, #112]	; (800c438 <HAL_UART_Init.constprop.98+0xaf0>)
 800c3c8:	e79b      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3ca:	0100      	lsls	r0, r0, #4
 800c3cc:	e799      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3ce:	00c0      	lsls	r0, r0, #3
 800c3d0:	e797      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3d2:	0080      	lsls	r0, r0, #2
 800c3d4:	e795      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3d6:	0040      	lsls	r0, r0, #1
 800c3d8:	e793      	b.n	800c302 <HAL_UART_Init.constprop.98+0x9ba>
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	01e65fb8 	.word	0x01e65fb8
 800c3e0:	0001e848 	.word	0x0001e848
 800c3e4:	01e84800 	.word	0x01e84800
 800c3e8:	00f42400 	.word	0x00f42400
 800c3ec:	007a1200 	.word	0x007a1200
 800c3f0:	00516154 	.word	0x00516154
 800c3f4:	003d0900 	.word	0x003d0900
 800c3f8:	0030d400 	.word	0x0030d400
 800c3fc:	0028b0aa 	.word	0x0028b0aa
 800c400:	001e8480 	.word	0x001e8480
 800c404:	000f4240 	.word	0x000f4240
 800c408:	0007a120 	.word	0x0007a120
 800c40c:	0003d090 	.word	0x0003d090
 800c410:	0000ffef 	.word	0x0000ffef
 800c414:	00002aaa 	.word	0x00002aaa
 800c418:	00001998 	.word	0x00001998
 800c41c:	00001554 	.word	0x00001554
 800c420:	00f32fdc 	.word	0x00f32fdc
 800c424:	0000f424 	.word	0x0000f424
 800c428:	00186a00 	.word	0x00186a00
 800c42c:	00145855 	.word	0x00145855
 800c430:	00001555 	.word	0x00001555
 800c434:	00000ccc 	.word	0x00000ccc
 800c438:	00000aaa 	.word	0x00000aaa
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c43c:	2180      	movs	r1, #128	; 0x80
 800c43e:	4b2a      	ldr	r3, [pc, #168]	; (800c4e8 <HAL_UART_Init.constprop.98+0xba0>)
 800c440:	003a      	movs	r2, r7
 800c442:	0389      	lsls	r1, r1, #14
 800c444:	0020      	movs	r0, r4
 800c446:	f7fd fba5 	bl	8009b94 <UART_WaitOnFlagUntilTimeout.constprop.99>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d101      	bne.n	800c452 <HAL_UART_Init.constprop.98+0xb0a>
 800c44e:	f7ff fbe9 	bl	800bc24 <HAL_UART_Init.constprop.98+0x2dc>
      return HAL_TIMEOUT;
 800c452:	2603      	movs	r6, #3
}
 800c454:	0030      	movs	r0, r6
 800c456:	b00b      	add	sp, #44	; 0x2c
 800c458:	bc3c      	pop	{r2, r3, r4, r5}
 800c45a:	4690      	mov	r8, r2
 800c45c:	4699      	mov	r9, r3
 800c45e:	46a2      	mov	sl, r4
 800c460:	46ab      	mov	fp, r5
 800c462:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c464:	2380      	movs	r3, #128	; 0x80
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	4299      	cmp	r1, r3
 800c46a:	d100      	bne.n	800c46e <HAL_UART_Init.constprop.98+0xb26>
 800c46c:	e6ef      	b.n	800c24e <HAL_UART_Init.constprop.98+0x906>
        ret = HAL_ERROR;
 800c46e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c470:	2000      	movs	r0, #0
 800c472:	e775      	b.n	800c360 <HAL_UART_Init.constprop.98+0xa18>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c474:	2380      	movs	r3, #128	; 0x80
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	4299      	cmp	r1, r3
 800c47a:	d000      	beq.n	800c47e <HAL_UART_Init.constprop.98+0xb36>
 800c47c:	e6f8      	b.n	800c270 <HAL_UART_Init.constprop.98+0x928>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c47e:	f7fd fd83 	bl	8009f88 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c484:	2101      	movs	r1, #1
 800c486:	2b00      	cmp	r3, #0
 800c488:	d100      	bne.n	800c48c <HAL_UART_Init.constprop.98+0xb44>
 800c48a:	e68f      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c48c:	1849      	adds	r1, r1, r1
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d100      	bne.n	800c494 <HAL_UART_Init.constprop.98+0xb4c>
 800c492:	e68b      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c494:	3102      	adds	r1, #2
 800c496:	2b02      	cmp	r3, #2
 800c498:	d100      	bne.n	800c49c <HAL_UART_Init.constprop.98+0xb54>
 800c49a:	e687      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c49c:	3102      	adds	r1, #2
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d100      	bne.n	800c4a4 <HAL_UART_Init.constprop.98+0xb5c>
 800c4a2:	e683      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4a4:	3102      	adds	r1, #2
 800c4a6:	2b04      	cmp	r3, #4
 800c4a8:	d100      	bne.n	800c4ac <HAL_UART_Init.constprop.98+0xb64>
 800c4aa:	e67f      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4ac:	3102      	adds	r1, #2
 800c4ae:	2b05      	cmp	r3, #5
 800c4b0:	d100      	bne.n	800c4b4 <HAL_UART_Init.constprop.98+0xb6c>
 800c4b2:	e67b      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4b4:	3102      	adds	r1, #2
 800c4b6:	2b06      	cmp	r3, #6
 800c4b8:	d100      	bne.n	800c4bc <HAL_UART_Init.constprop.98+0xb74>
 800c4ba:	e677      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4bc:	3104      	adds	r1, #4
 800c4be:	2b07      	cmp	r3, #7
 800c4c0:	d100      	bne.n	800c4c4 <HAL_UART_Init.constprop.98+0xb7c>
 800c4c2:	e673      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4c4:	3110      	adds	r1, #16
 800c4c6:	2b08      	cmp	r3, #8
 800c4c8:	d100      	bne.n	800c4cc <HAL_UART_Init.constprop.98+0xb84>
 800c4ca:	e66f      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4cc:	3120      	adds	r1, #32
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d100      	bne.n	800c4d4 <HAL_UART_Init.constprop.98+0xb8c>
 800c4d2:	e66b      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4d4:	3140      	adds	r1, #64	; 0x40
 800c4d6:	2b0a      	cmp	r3, #10
 800c4d8:	d100      	bne.n	800c4dc <HAL_UART_Init.constprop.98+0xb94>
 800c4da:	e667      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4dc:	397f      	subs	r1, #127	; 0x7f
 800c4de:	2b0b      	cmp	r3, #11
 800c4e0:	d000      	beq.n	800c4e4 <HAL_UART_Init.constprop.98+0xb9c>
 800c4e2:	e663      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4e4:	31ff      	adds	r1, #255	; 0xff
 800c4e6:	e661      	b.n	800c1ac <HAL_UART_Init.constprop.98+0x864>
 800c4e8:	01ffffff 	.word	0x01ffffff

0800c4ec <biquad_q3_12_complex_direct_form_1.lto_priv.617>:
 800c4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ee:	4645      	mov	r5, r8
 800c4f0:	4657      	mov	r7, sl
 800c4f2:	464e      	mov	r6, r9
 800c4f4:	46de      	mov	lr, fp
 800c4f6:	b5e0      	push	{r5, r6, r7, lr}
 800c4f8:	b08d      	sub	sp, #52	; 0x34
 800c4fa:	ac16      	add	r4, sp, #88	; 0x58
 800c4fc:	4688      	mov	r8, r1
 800c4fe:	2100      	movs	r1, #0
 800c500:	5e65      	ldrsh	r5, [r4, r1]
 800c502:	2102      	movs	r1, #2
 800c504:	5e66      	ldrsh	r6, [r4, r1]
 800c506:	2400      	movs	r4, #0
 800c508:	5f01      	ldrsh	r1, [r0, r4]
 800c50a:	9102      	str	r1, [sp, #8]
 800c50c:	2402      	movs	r4, #2
 800c50e:	5f01      	ldrsh	r1, [r0, r4]
 800c510:	9103      	str	r1, [sp, #12]
 800c512:	2404      	movs	r4, #4
 800c514:	5f01      	ldrsh	r1, [r0, r4]
 800c516:	4c36      	ldr	r4, [pc, #216]	; (800c5f0 <biquad_q3_12_complex_direct_form_1.lto_priv.617+0x104>)
 800c518:	9104      	str	r1, [sp, #16]
 800c51a:	88c7      	ldrh	r7, [r0, #6]
 800c51c:	1be4      	subs	r4, r4, r7
 800c51e:	b221      	sxth	r1, r4
 800c520:	9105      	str	r1, [sp, #20]
 800c522:	2108      	movs	r1, #8
 800c524:	5e41      	ldrsh	r1, [r0, r1]
 800c526:	0334      	lsls	r4, r6, #12
 800c528:	9106      	str	r1, [sp, #24]
 800c52a:	0328      	lsls	r0, r5, #12
 800c52c:	0097      	lsls	r7, r2, #2
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d001      	beq.n	800c536 <biquad_q3_12_complex_direct_form_1.lto_priv.617+0x4a>
 800c532:	2704      	movs	r7, #4
 800c534:	427f      	negs	r7, r7
 800c536:	4259      	negs	r1, r3
 800c538:	4351      	muls	r1, r2
 800c53a:	009a      	lsls	r2, r3, #2
 800c53c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c53e:	008a      	lsls	r2, r1, #2
 800c540:	19d2      	adds	r2, r2, r7
 800c542:	4442      	add	r2, r8
 800c544:	468c      	mov	ip, r1
 800c546:	46a8      	mov	r8, r5
 800c548:	0011      	movs	r1, r2
 800c54a:	46b2      	mov	sl, r6
 800c54c:	46a9      	mov	r9, r5
 800c54e:	9608      	str	r6, [sp, #32]
 800c550:	9507      	str	r5, [sp, #28]
 800c552:	9601      	str	r6, [sp, #4]
 800c554:	4662      	mov	r2, ip
 800c556:	2a00      	cmp	r2, #0
 800c558:	d106      	bne.n	800c568 <biquad_q3_12_complex_direct_form_1.lto_priv.617+0x7c>
 800c55a:	b00d      	add	sp, #52	; 0x34
 800c55c:	bc3c      	pop	{r2, r3, r4, r5}
 800c55e:	4690      	mov	r8, r2
 800c560:	4699      	mov	r9, r3
 800c562:	46a2      	mov	sl, r4
 800c564:	46ab      	mov	fp, r5
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	2700      	movs	r7, #0
 800c56a:	5fca      	ldrsh	r2, [r1, r7]
 800c56c:	449c      	add	ip, r3
 800c56e:	9209      	str	r2, [sp, #36]	; 0x24
 800c570:	2702      	movs	r7, #2
 800c572:	5fca      	ldrsh	r2, [r1, r7]
 800c574:	464f      	mov	r7, r9
 800c576:	920a      	str	r2, [sp, #40]	; 0x28
 800c578:	9a03      	ldr	r2, [sp, #12]
 800c57a:	437a      	muls	r2, r7
 800c57c:	4647      	mov	r7, r8
 800c57e:	4693      	mov	fp, r2
 800c580:	9a05      	ldr	r2, [sp, #20]
 800c582:	437a      	muls	r2, r7
 800c584:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c586:	4493      	add	fp, r2
 800c588:	9a02      	ldr	r2, [sp, #8]
 800c58a:	437a      	muls	r2, r7
 800c58c:	1810      	adds	r0, r2, r0
 800c58e:	9a04      	ldr	r2, [sp, #16]
 800c590:	9f07      	ldr	r7, [sp, #28]
 800c592:	4355      	muls	r5, r2
 800c594:	9a06      	ldr	r2, [sp, #24]
 800c596:	4458      	add	r0, fp
 800c598:	4357      	muls	r7, r2
 800c59a:	1bed      	subs	r5, r5, r7
 800c59c:	1940      	adds	r0, r0, r5
 800c59e:	4655      	mov	r5, sl
 800c5a0:	9a03      	ldr	r2, [sp, #12]
 800c5a2:	9f01      	ldr	r7, [sp, #4]
 800c5a4:	436a      	muls	r2, r5
 800c5a6:	9d05      	ldr	r5, [sp, #20]
 800c5a8:	437d      	muls	r5, r7
 800c5aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c5ac:	1955      	adds	r5, r2, r5
 800c5ae:	9a02      	ldr	r2, [sp, #8]
 800c5b0:	437a      	muls	r2, r7
 800c5b2:	1914      	adds	r4, r2, r4
 800c5b4:	9a04      	ldr	r2, [sp, #16]
 800c5b6:	192c      	adds	r4, r5, r4
 800c5b8:	4356      	muls	r6, r2
 800c5ba:	9d06      	ldr	r5, [sp, #24]
 800c5bc:	9a08      	ldr	r2, [sp, #32]
 800c5be:	436a      	muls	r2, r5
 800c5c0:	1ab6      	subs	r6, r6, r2
 800c5c2:	19a4      	adds	r4, r4, r6
 800c5c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c5c6:	1302      	asrs	r2, r0, #12
 800c5c8:	46b3      	mov	fp, r6
 800c5ca:	9e01      	ldr	r6, [sp, #4]
 800c5cc:	b212      	sxth	r2, r2
 800c5ce:	9608      	str	r6, [sp, #32]
 800c5d0:	4646      	mov	r6, r8
 800c5d2:	800a      	strh	r2, [r1, #0]
 800c5d4:	1325      	asrs	r5, r4, #12
 800c5d6:	4690      	mov	r8, r2
 800c5d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5da:	b22d      	sxth	r5, r5
 800c5dc:	804d      	strh	r5, [r1, #2]
 800c5de:	9607      	str	r6, [sp, #28]
 800c5e0:	9501      	str	r5, [sp, #4]
 800c5e2:	4656      	mov	r6, sl
 800c5e4:	464d      	mov	r5, r9
 800c5e6:	4459      	add	r1, fp
 800c5e8:	46ba      	mov	sl, r7
 800c5ea:	4691      	mov	r9, r2
 800c5ec:	e7b2      	b.n	800c554 <biquad_q3_12_complex_direct_form_1.lto_priv.617+0x68>
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	fffff000 	.word	0xfffff000

0800c5f4 <acc_confprogram_copy>:
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	b530      	push	{r4, r5, lr}
 800c5f8:	0092      	lsls	r2, r2, #2
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d100      	bne.n	800c600 <acc_confprogram_copy+0xc>
 800c5fe:	bd30      	pop	{r4, r5, pc}
 800c600:	58c4      	ldr	r4, [r0, r3]
 800c602:	0c25      	lsrs	r5, r4, #16
 800c604:	52cd      	strh	r5, [r1, r3]
 800c606:	18cd      	adds	r5, r1, r3
 800c608:	806c      	strh	r4, [r5, #2]
 800c60a:	3304      	adds	r3, #4
 800c60c:	e7f5      	b.n	800c5fa <acc_confprogram_copy+0x6>

0800c60e <acc_confprogram_modify_runif>:
 800c60e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c610:	0055      	lsls	r5, r2, #1
 800c612:	b085      	sub	sp, #20
 800c614:	1945      	adds	r5, r0, r5
 800c616:	000e      	movs	r6, r1
 800c618:	0028      	movs	r0, r5
 800c61a:	a903      	add	r1, sp, #12
 800c61c:	0014      	movs	r4, r2
 800c61e:	001f      	movs	r7, r3
 800c620:	f7fd fae2 	bl	8009be8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800c624:	230f      	movs	r3, #15
 800c626:	9a03      	ldr	r2, [sp, #12]
 800c628:	439a      	bics	r2, r3
 800c62a:	9202      	str	r2, [sp, #8]
 800c62c:	0013      	movs	r3, r2
 800c62e:	4a11      	ldr	r2, [pc, #68]	; (800c674 <acc_confprogram_modify_runif+0x66>)
 800c630:	0011      	movs	r1, r2
 800c632:	3160      	adds	r1, #96	; 0x60
 800c634:	7809      	ldrb	r1, [r1, #0]
 800c636:	2f00      	cmp	r7, #0
 800c638:	d011      	beq.n	800c65e <acc_confprogram_modify_runif+0x50>
 800c63a:	4333      	orrs	r3, r6
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	2903      	cmp	r1, #3
 800c640:	d906      	bls.n	800c650 <acc_confprogram_modify_runif+0x42>
 800c642:	9600      	str	r6, [sp, #0]
 800c644:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800c646:	0863      	lsrs	r3, r4, #1
 800c648:	4a0b      	ldr	r2, [pc, #44]	; (800c678 <acc_confprogram_modify_runif+0x6a>)
 800c64a:	490c      	ldr	r1, [pc, #48]	; (800c67c <acc_confprogram_modify_runif+0x6e>)
 800c64c:	2004      	movs	r0, #4
 800c64e:	47b0      	blx	r6
 800c650:	2201      	movs	r2, #1
 800c652:	0029      	movs	r1, r5
 800c654:	a802      	add	r0, sp, #8
 800c656:	f7ff ffcd 	bl	800c5f4 <acc_confprogram_copy>
 800c65a:	b005      	add	sp, #20
 800c65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65e:	2903      	cmp	r1, #3
 800c660:	d9f6      	bls.n	800c650 <acc_confprogram_modify_runif+0x42>
 800c662:	9600      	str	r6, [sp, #0]
 800c664:	0863      	lsrs	r3, r4, #1
 800c666:	4905      	ldr	r1, [pc, #20]	; (800c67c <acc_confprogram_modify_runif+0x6e>)
 800c668:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800c66a:	2004      	movs	r0, #4
 800c66c:	4a04      	ldr	r2, [pc, #16]	; (800c680 <acc_confprogram_modify_runif+0x72>)
 800c66e:	47a0      	blx	r4
 800c670:	e7ee      	b.n	800c650 <acc_confprogram_modify_runif+0x42>
 800c672:	46c0      	nop			; (mov r8, r8)
 800c674:	200003c0 	.word	0x200003c0
 800c678:	0801d7e2 	.word	0x0801d7e2
 800c67c:	0801d15e 	.word	0x0801d15e
 800c680:	0801da70 	.word	0x0801da70

0800c684 <acc_confprogram_patch_offset>:
 800c684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c686:	464e      	mov	r6, r9
 800c688:	4645      	mov	r5, r8
 800c68a:	4657      	mov	r7, sl
 800c68c:	46de      	mov	lr, fp
 800c68e:	b5e0      	push	{r5, r6, r7, lr}
 800c690:	b089      	sub	sp, #36	; 0x24
 800c692:	4698      	mov	r8, r3
 800c694:	ab12      	add	r3, sp, #72	; 0x48
 800c696:	881c      	ldrh	r4, [r3, #0]
 800c698:	4b48      	ldr	r3, [pc, #288]	; (800c7bc <acc_confprogram_patch_offset+0x138>)
 800c69a:	9204      	str	r2, [sp, #16]
 800c69c:	4699      	mov	r9, r3
 800c69e:	3360      	adds	r3, #96	; 0x60
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	4682      	mov	sl, r0
 800c6a4:	000e      	movs	r6, r1
 800c6a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d907      	bls.n	800c6bc <acc_confprogram_patch_offset+0x38>
 800c6ac:	464f      	mov	r7, r9
 800c6ae:	9500      	str	r5, [sp, #0]
 800c6b0:	0023      	movs	r3, r4
 800c6b2:	4a43      	ldr	r2, [pc, #268]	; (800c7c0 <acc_confprogram_patch_offset+0x13c>)
 800c6b4:	4943      	ldr	r1, [pc, #268]	; (800c7c4 <acc_confprogram_patch_offset+0x140>)
 800c6b6:	2004      	movs	r0, #4
 800c6b8:	6e7f      	ldr	r7, [r7, #100]	; 0x64
 800c6ba:	47b8      	blx	r7
 800c6bc:	002b      	movs	r3, r5
 800c6be:	1e5a      	subs	r2, r3, #1
 800c6c0:	4193      	sbcs	r3, r2
 800c6c2:	2700      	movs	r7, #0
 800c6c4:	00e4      	lsls	r4, r4, #3
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	44a0      	add	r8, r4
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	4643      	mov	r3, r8
 800c6ce:	885b      	ldrh	r3, [r3, #2]
 800c6d0:	42bb      	cmp	r3, r7
 800c6d2:	d806      	bhi.n	800c6e2 <acc_confprogram_patch_offset+0x5e>
 800c6d4:	b009      	add	sp, #36	; 0x24
 800c6d6:	bc3c      	pop	{r2, r3, r4, r5}
 800c6d8:	4690      	mov	r8, r2
 800c6da:	4699      	mov	r9, r3
 800c6dc:	46a2      	mov	sl, r4
 800c6de:	46ab      	mov	fp, r5
 800c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6e2:	4643      	mov	r3, r8
 800c6e4:	2106      	movs	r1, #6
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	4379      	muls	r1, r7
 800c6ea:	469c      	mov	ip, r3
 800c6ec:	4461      	add	r1, ip
 800c6ee:	7808      	ldrb	r0, [r1, #0]
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d003      	beq.n	800c6fc <acc_confprogram_patch_offset+0x78>
 800c6f4:	2802      	cmp	r0, #2
 800c6f6:	d81d      	bhi.n	800c734 <acc_confprogram_patch_offset+0xb0>
 800c6f8:	888a      	ldrh	r2, [r1, #4]
 800c6fa:	e000      	b.n	800c6fe <acc_confprogram_patch_offset+0x7a>
 800c6fc:	884a      	ldrh	r2, [r1, #2]
 800c6fe:	4b32      	ldr	r3, [pc, #200]	; (800c7c8 <acc_confprogram_patch_offset+0x144>)
 800c700:	429a      	cmp	r2, r3
 800c702:	d01d      	beq.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c704:	0052      	lsls	r2, r2, #1
 800c706:	b292      	uxth	r2, r2
 800c708:	42b2      	cmp	r2, r6
 800c70a:	d319      	bcc.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	18f3      	adds	r3, r6, r3
 800c710:	429a      	cmp	r2, r3
 800c712:	da15      	bge.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c714:	2801      	cmp	r0, #1
 800c716:	d049      	beq.n	800c7ac <acc_confprogram_patch_offset+0x128>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d013      	beq.n	800c744 <acc_confprogram_patch_offset+0xc0>
 800c71c:	2802      	cmp	r0, #2
 800c71e:	d10f      	bne.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c720:	426b      	negs	r3, r5
 800c722:	416b      	adcs	r3, r5
 800c724:	1b92      	subs	r2, r2, r6
 800c726:	b2db      	uxtb	r3, r3
 800c728:	b292      	uxth	r2, r2
 800c72a:	8849      	ldrh	r1, [r1, #2]
 800c72c:	4650      	mov	r0, sl
 800c72e:	f7ff ff6e 	bl	800c60e <acc_confprogram_modify_runif>
 800c732:	e005      	b.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c734:	464b      	mov	r3, r9
 800c736:	4a25      	ldr	r2, [pc, #148]	; (800c7cc <acc_confprogram_patch_offset+0x148>)
 800c738:	4922      	ldr	r1, [pc, #136]	; (800c7c4 <acc_confprogram_patch_offset+0x140>)
 800c73a:	2000      	movs	r0, #0
 800c73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c73e:	4798      	blx	r3
 800c740:	3701      	adds	r7, #1
 800c742:	e7c3      	b.n	800c6cc <acc_confprogram_patch_offset+0x48>
 800c744:	1b92      	subs	r2, r2, r6
 800c746:	b293      	uxth	r3, r2
 800c748:	790a      	ldrb	r2, [r1, #4]
 800c74a:	9203      	str	r2, [sp, #12]
 800c74c:	794a      	ldrb	r2, [r1, #5]
 800c74e:	4693      	mov	fp, r2
 800c750:	2201      	movs	r2, #1
 800c752:	4659      	mov	r1, fp
 800c754:	408a      	lsls	r2, r1
 800c756:	4295      	cmp	r5, r2
 800c758:	d30b      	bcc.n	800c772 <acc_confprogram_patch_offset+0xee>
 800c75a:	3a01      	subs	r2, #1
 800c75c:	9201      	str	r2, [sp, #4]
 800c75e:	464a      	mov	r2, r9
 800c760:	9500      	str	r5, [sp, #0]
 800c762:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800c764:	4917      	ldr	r1, [pc, #92]	; (800c7c4 <acc_confprogram_patch_offset+0x140>)
 800c766:	4a1a      	ldr	r2, [pc, #104]	; (800c7d0 <acc_confprogram_patch_offset+0x14c>)
 800c768:	47a0      	blx	r4
 800c76a:	2139      	movs	r1, #57	; 0x39
 800c76c:	4819      	ldr	r0, [pc, #100]	; (800c7d4 <acc_confprogram_patch_offset+0x150>)
 800c76e:	f7f9 f8ee 	bl	800594e <acc_assert_fail>
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4453      	add	r3, sl
 800c776:	a906      	add	r1, sp, #24
 800c778:	0018      	movs	r0, r3
 800c77a:	001c      	movs	r4, r3
 800c77c:	f7fd fa34 	bl	8009be8 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800c780:	465b      	mov	r3, fp
 800c782:	2220      	movs	r2, #32
 800c784:	1ad2      	subs	r2, r2, r3
 800c786:	2301      	movs	r3, #1
 800c788:	425b      	negs	r3, r3
 800c78a:	40d3      	lsrs	r3, r2
 800c78c:	9a03      	ldr	r2, [sp, #12]
 800c78e:	9903      	ldr	r1, [sp, #12]
 800c790:	4093      	lsls	r3, r2
 800c792:	9a06      	ldr	r2, [sp, #24]
 800c794:	a807      	add	r0, sp, #28
 800c796:	439a      	bics	r2, r3
 800c798:	0013      	movs	r3, r2
 800c79a:	002a      	movs	r2, r5
 800c79c:	408a      	lsls	r2, r1
 800c79e:	0021      	movs	r1, r4
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	f7ff ff25 	bl	800c5f4 <acc_confprogram_copy>
 800c7aa:	e7c9      	b.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c7ac:	1b92      	subs	r2, r2, r6
 800c7ae:	b292      	uxth	r2, r2
 800c7b0:	8849      	ldrh	r1, [r1, #2]
 800c7b2:	9b05      	ldr	r3, [sp, #20]
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7ff ff2a 	bl	800c60e <acc_confprogram_modify_runif>
 800c7ba:	e7c1      	b.n	800c740 <acc_confprogram_patch_offset+0xbc>
 800c7bc:	200003c0 	.word	0x200003c0
 800c7c0:	0801d9b7 	.word	0x0801d9b7
 800c7c4:	0801d15e 	.word	0x0801d15e
 800c7c8:	0000ffff 	.word	0x0000ffff
 800c7cc:	0801daa2 	.word	0x0801daa2
 800c7d0:	0801dacf 	.word	0x0801dacf
 800c7d4:	0801da0d 	.word	0x0801da0d

0800c7d8 <acc_diagnostic_log_data_u16>:
 800c7d8:	4770      	bx	lr

0800c7da <acc_diagnostic_log_scalar>:
 800c7da:	4770      	bx	lr

0800c7dc <acc_diagnostic_log_array>:
 800c7dc:	4770      	bx	lr

0800c7de <acc_diagnostic_log_set_parameter>:
 800c7de:	4770      	bx	lr

0800c7e0 <acc_diagnostic_log_declare_parameter>:
 800c7e0:	4770      	bx	lr

0800c7e2 <acc_diagnostic_log_set_scope>:
 800c7e2:	4770      	bx	lr

0800c7e4 <accumulator_mod.lto_priv.616>:
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	1c04      	adds	r4, r0, #0
 800c7e8:	f002 fd96 	bl	800f318 <__aeabi_f2iz>
 800c7ec:	f002 fdb4 	bl	800f358 <__aeabi_i2f>
 800c7f0:	1c01      	adds	r1, r0, #0
 800c7f2:	1c20      	adds	r0, r4, #0
 800c7f4:	f001 ffcc 	bl	800e790 <__aeabi_fsub>
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	1c04      	adds	r4, r0, #0
 800c7fc:	f002 fbac 	bl	800ef58 <__aeabi_fcmpge>
 800c800:	2800      	cmp	r0, #0
 800c802:	d10b      	bne.n	800c81c <accumulator_mod.lto_priv.616+0x38>
 800c804:	20fe      	movs	r0, #254	; 0xfe
 800c806:	0580      	lsls	r0, r0, #22
 800c808:	1c21      	adds	r1, r4, #0
 800c80a:	f001 fbe3 	bl	800dfd4 <__aeabi_fadd>
 800c80e:	219f      	movs	r1, #159	; 0x9f
 800c810:	05c9      	lsls	r1, r1, #23
 800c812:	f001 fe8b 	bl	800e52c <__aeabi_fmul>
 800c816:	f002 fbc9 	bl	800efac <__aeabi_f2uiz>
 800c81a:	bd10      	pop	{r4, pc}
 800c81c:	2000      	movs	r0, #0
 800c81e:	e7f3      	b.n	800c808 <accumulator_mod.lto_priv.616+0x24>

0800c820 <acc_alg_basic_saturation_check_u16>:
 800c820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c822:	0005      	movs	r5, r0
 800c824:	000c      	movs	r4, r1
 800c826:	1c10      	adds	r0, r2, #0
 800c828:	4912      	ldr	r1, [pc, #72]	; (800c874 <acc_alg_basic_saturation_check_u16+0x54>)
 800c82a:	1c17      	adds	r7, r2, #0
 800c82c:	f001 fd6c 	bl	800e308 <__aeabi_fdiv>
 800c830:	4911      	ldr	r1, [pc, #68]	; (800c878 <acc_alg_basic_saturation_check_u16+0x58>)
 800c832:	f001 fe7b 	bl	800e52c <__aeabi_fmul>
 800c836:	f002 fbb9 	bl	800efac <__aeabi_f2uiz>
 800c83a:	1c39      	adds	r1, r7, #0
 800c83c:	b286      	uxth	r6, r0
 800c83e:	480d      	ldr	r0, [pc, #52]	; (800c874 <acc_alg_basic_saturation_check_u16+0x54>)
 800c840:	f001 ffa6 	bl	800e790 <__aeabi_fsub>
 800c844:	490b      	ldr	r1, [pc, #44]	; (800c874 <acc_alg_basic_saturation_check_u16+0x54>)
 800c846:	f001 fd5f 	bl	800e308 <__aeabi_fdiv>
 800c84a:	490b      	ldr	r1, [pc, #44]	; (800c878 <acc_alg_basic_saturation_check_u16+0x58>)
 800c84c:	f001 fe6e 	bl	800e52c <__aeabi_fmul>
 800c850:	f002 fbac 	bl	800efac <__aeabi_f2uiz>
 800c854:	0864      	lsrs	r4, r4, #1
 800c856:	0064      	lsls	r4, r4, #1
 800c858:	b280      	uxth	r0, r0
 800c85a:	192c      	adds	r4, r5, r4
 800c85c:	42a5      	cmp	r5, r4
 800c85e:	d101      	bne.n	800c864 <acc_alg_basic_saturation_check_u16+0x44>
 800c860:	2000      	movs	r0, #0
 800c862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c864:	882a      	ldrh	r2, [r5, #0]
 800c866:	4282      	cmp	r2, r0
 800c868:	d202      	bcs.n	800c870 <acc_alg_basic_saturation_check_u16+0x50>
 800c86a:	3502      	adds	r5, #2
 800c86c:	42b2      	cmp	r2, r6
 800c86e:	d8f5      	bhi.n	800c85c <acc_alg_basic_saturation_check_u16+0x3c>
 800c870:	2001      	movs	r0, #1
 800c872:	e7f6      	b.n	800c862 <acc_alg_basic_saturation_check_u16+0x42>
 800c874:	42c80000 	.word	0x42c80000
 800c878:	477fff00 	.word	0x477fff00

0800c87c <saturation_check_u16.lto_priv.633>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	f7ff ffcf 	bl	800c820 <acc_alg_basic_saturation_check_u16>
 800c882:	bd10      	pop	{r4, pc}

0800c884 <eval_even_poly_f32.lto_priv.674>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	0005      	movs	r5, r0
 800c888:	000c      	movs	r4, r1
 800c88a:	1c10      	adds	r0, r2, #0
 800c88c:	1c11      	adds	r1, r2, #0
 800c88e:	f001 fe4d 	bl	800e52c <__aeabi_fmul>
 800c892:	1c06      	adds	r6, r0, #0
 800c894:	2000      	movs	r0, #0
 800c896:	3c01      	subs	r4, #1
 800c898:	b2a4      	uxth	r4, r4
 800c89a:	00a4      	lsls	r4, r4, #2
 800c89c:	192c      	adds	r4, r5, r4
 800c89e:	6821      	ldr	r1, [r4, #0]
 800c8a0:	f001 fb98 	bl	800dfd4 <__aeabi_fadd>
 800c8a4:	42a5      	cmp	r5, r4
 800c8a6:	d005      	beq.n	800c8b4 <eval_even_poly_f32.lto_priv.674+0x30>
 800c8a8:	1c01      	adds	r1, r0, #0
 800c8aa:	1c30      	adds	r0, r6, #0
 800c8ac:	f001 fe3e 	bl	800e52c <__aeabi_fmul>
 800c8b0:	3c04      	subs	r4, #4
 800c8b2:	e7f4      	b.n	800c89e <eval_even_poly_f32.lto_priv.674+0x1a>
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}

0800c8b6 <quarter_pi_cos_sin_f32.lto_priv.673>:
 800c8b6:	b570      	push	{r4, r5, r6, lr}
 800c8b8:	000d      	movs	r5, r1
 800c8ba:	490d      	ldr	r1, [pc, #52]	; (800c8f0 <quarter_pi_cos_sin_f32.lto_priv.673+0x3a>)
 800c8bc:	1c04      	adds	r4, r0, #0
 800c8be:	f002 fb2d 	bl	800ef1c <__aeabi_fcmplt>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d111      	bne.n	800c8ea <quarter_pi_cos_sin_f32.lto_priv.673+0x34>
 800c8c6:	480b      	ldr	r0, [pc, #44]	; (800c8f4 <quarter_pi_cos_sin_f32.lto_priv.673+0x3e>)
 800c8c8:	2d00      	cmp	r5, #0
 800c8ca:	d005      	beq.n	800c8d8 <quarter_pi_cos_sin_f32.lto_priv.673+0x22>
 800c8cc:	3034      	adds	r0, #52	; 0x34
 800c8ce:	1c22      	adds	r2, r4, #0
 800c8d0:	2105      	movs	r1, #5
 800c8d2:	f7ff ffd7 	bl	800c884 <eval_even_poly_f32.lto_priv.674>
 800c8d6:	bd70      	pop	{r4, r5, r6, pc}
 800c8d8:	1c22      	adds	r2, r4, #0
 800c8da:	2104      	movs	r1, #4
 800c8dc:	3048      	adds	r0, #72	; 0x48
 800c8de:	f7ff ffd1 	bl	800c884 <eval_even_poly_f32.lto_priv.674>
 800c8e2:	1c21      	adds	r1, r4, #0
 800c8e4:	f001 fe22 	bl	800e52c <__aeabi_fmul>
 800c8e8:	e7f5      	b.n	800c8d6 <quarter_pi_cos_sin_f32.lto_priv.673+0x20>
 800c8ea:	4803      	ldr	r0, [pc, #12]	; (800c8f8 <quarter_pi_cos_sin_f32.lto_priv.673+0x42>)
 800c8ec:	e7f3      	b.n	800c8d6 <quarter_pi_cos_sin_f32.lto_priv.673+0x20>
 800c8ee:	46c0      	nop			; (mov r8, r8)
 800c8f0:	bf490fdb 	.word	0xbf490fdb
 800c8f4:	08018d9c 	.word	0x08018d9c
 800c8f8:	7fc00000 	.word	0x7fc00000

0800c8fc <acc_alg_basic_math_q3_12_sin>:
 800c8fc:	0002      	movs	r2, r0
 800c8fe:	0003      	movs	r3, r0
 800c900:	0041      	lsls	r1, r0, #1
 800c902:	d500      	bpl.n	800c906 <acc_alg_basic_math_q3_12_sin+0xa>
 800c904:	43c3      	mvns	r3, r0
 800c906:	2180      	movs	r1, #128	; 0x80
 800c908:	0389      	lsls	r1, r1, #14
 800c90a:	468c      	mov	ip, r1
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	089b      	lsrs	r3, r3, #2
 800c910:	4463      	add	r3, ip
 800c912:	0d9b      	lsrs	r3, r3, #22
 800c914:	4903      	ldr	r1, [pc, #12]	; (800c924 <acc_alg_basic_math_q3_12_sin+0x28>)
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	5e58      	ldrsh	r0, [r3, r1]
 800c91a:	2a00      	cmp	r2, #0
 800c91c:	da01      	bge.n	800c922 <acc_alg_basic_math_q3_12_sin+0x26>
 800c91e:	4240      	negs	r0, r0
 800c920:	b200      	sxth	r0, r0
 800c922:	4770      	bx	lr
 800c924:	08019dd4 	.word	0x08019dd4

0800c928 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800c928:	b203      	sxth	r3, r0
 800c92a:	17da      	asrs	r2, r3, #31
 800c92c:	189b      	adds	r3, r3, r2
 800c92e:	1400      	asrs	r0, r0, #16
 800c930:	4053      	eors	r3, r2
 800c932:	17c2      	asrs	r2, r0, #31
 800c934:	1880      	adds	r0, r0, r2
 800c936:	4050      	eors	r0, r2
 800c938:	b21b      	sxth	r3, r3
 800c93a:	b202      	sxth	r2, r0
 800c93c:	b082      	sub	sp, #8
 800c93e:	4293      	cmp	r3, r2
 800c940:	db02      	blt.n	800c948 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800c942:	0011      	movs	r1, r2
 800c944:	001a      	movs	r2, r3
 800c946:	000b      	movs	r3, r1
 800c948:	480c      	ldr	r0, [pc, #48]	; (800c97c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800c94a:	4350      	muls	r0, r2
 800c94c:	17c1      	asrs	r1, r0, #31
 800c94e:	0509      	lsls	r1, r1, #20
 800c950:	0d09      	lsrs	r1, r1, #20
 800c952:	1809      	adds	r1, r1, r0
 800c954:	1309      	asrs	r1, r1, #12
 800c956:	b209      	sxth	r1, r1
 800c958:	428b      	cmp	r3, r1
 800c95a:	da08      	bge.n	800c96e <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800c95c:	4808      	ldr	r0, [pc, #32]	; (800c980 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800c95e:	4350      	muls	r0, r2
 800c960:	4a08      	ldr	r2, [pc, #32]	; (800c984 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800c962:	4353      	muls	r3, r2
 800c964:	18c0      	adds	r0, r0, r3
 800c966:	1300      	asrs	r0, r0, #12
 800c968:	b200      	sxth	r0, r0
 800c96a:	b002      	add	sp, #8
 800c96c:	4770      	bx	lr
 800c96e:	4806      	ldr	r0, [pc, #24]	; (800c988 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800c970:	4350      	muls	r0, r2
 800c972:	4a06      	ldr	r2, [pc, #24]	; (800c98c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800c974:	4353      	muls	r3, r2
 800c976:	18c0      	adds	r0, r0, r3
 800c978:	e7f5      	b.n	800c966 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800c97a:	46c0      	nop			; (mov r8, r8)
 800c97c:	000006a1 	.word	0x000006a1
 800c980:	00000fd7 	.word	0x00000fd7
 800c984:	00000327 	.word	0x00000327
 800c988:	00000d71 	.word	0x00000d71
 800c98c:	000008fa 	.word	0x000008fa

0800c990 <internal_reg_read.lto_priv.618>:
 800c990:	23c0      	movs	r3, #192	; 0xc0
 800c992:	b513      	push	{r0, r1, r4, lr}
 800c994:	019b      	lsls	r3, r3, #6
 800c996:	4319      	orrs	r1, r3
 800c998:	466b      	mov	r3, sp
 800c99a:	0014      	movs	r4, r2
 800c99c:	8019      	strh	r1, [r3, #0]
 800c99e:	466a      	mov	r2, sp
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4669      	mov	r1, sp
 800c9a4:	8053      	strh	r3, [r2, #2]
 800c9a6:	8093      	strh	r3, [r2, #4]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	2203      	movs	r2, #3
 800c9ac:	f7f9 fb6e 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800c9b0:	466b      	mov	r3, sp
 800c9b2:	889b      	ldrh	r3, [r3, #4]
 800c9b4:	8023      	strh	r3, [r4, #0]
 800c9b6:	bd13      	pop	{r0, r1, r4, pc}

0800c9b8 <read_reg_array>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	0007      	movs	r7, r0
 800c9bc:	000d      	movs	r5, r1
 800c9be:	001e      	movs	r6, r3
 800c9c0:	3a01      	subs	r2, #1
 800c9c2:	b294      	uxth	r4, r2
 800c9c4:	0064      	lsls	r4, r4, #1
 800c9c6:	1c8a      	adds	r2, r1, #2
 800c9c8:	18a4      	adds	r4, r4, r2
 800c9ca:	8829      	ldrh	r1, [r5, #0]
 800c9cc:	0032      	movs	r2, r6
 800c9ce:	0038      	movs	r0, r7
 800c9d0:	3502      	adds	r5, #2
 800c9d2:	f7ff ffdd 	bl	800c990 <internal_reg_read.lto_priv.618>
 800c9d6:	3602      	adds	r6, #2
 800c9d8:	42a5      	cmp	r5, r4
 800c9da:	d1f6      	bne.n	800c9ca <read_reg_array+0x12>
 800c9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9de <acc_sensor_diagnostics_r2_sensor_status>:
 800c9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9e0:	4657      	mov	r7, sl
 800c9e2:	464e      	mov	r6, r9
 800c9e4:	46de      	mov	lr, fp
 800c9e6:	4645      	mov	r5, r8
 800c9e8:	b5e0      	push	{r5, r6, r7, lr}
 800c9ea:	4f1e      	ldr	r7, [pc, #120]	; (800ca64 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800c9ec:	b097      	sub	sp, #92	; 0x5c
 800c9ee:	003b      	movs	r3, r7
 800c9f0:	3360      	adds	r3, #96	; 0x60
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	0006      	movs	r6, r0
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d904      	bls.n	800ca04 <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800c9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ca68 <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800c9fc:	491b      	ldr	r1, [pc, #108]	; (800ca6c <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800c9fe:	2002      	movs	r0, #2
 800ca00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca02:	4798      	blx	r3
 800ca04:	2201      	movs	r2, #1
 800ca06:	21b2      	movs	r1, #178	; 0xb2
 800ca08:	0030      	movs	r0, r6
 800ca0a:	f7fe f94f 	bl	800acac <acc_sensor_reg_write>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	ac0e      	add	r4, sp, #56	; 0x38
 800ca12:	8023      	strh	r3, [r4, #0]
 800ca14:	3364      	adds	r3, #100	; 0x64
 800ca16:	469b      	mov	fp, r3
 800ca18:	3b53      	subs	r3, #83	; 0x53
 800ca1a:	4699      	mov	r9, r3
 800ca1c:	2380      	movs	r3, #128	; 0x80
 800ca1e:	00db      	lsls	r3, r3, #3
 800ca20:	4698      	mov	r8, r3
 800ca22:	2360      	movs	r3, #96	; 0x60
 800ca24:	469a      	mov	sl, r3
 800ca26:	44ba      	add	sl, r7
 800ca28:	0022      	movs	r2, r4
 800ca2a:	4649      	mov	r1, r9
 800ca2c:	0030      	movs	r0, r6
 800ca2e:	f7ff ffaf 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ca32:	4642      	mov	r2, r8
 800ca34:	8823      	ldrh	r3, [r4, #0]
 800ca36:	4213      	tst	r3, r2
 800ca38:	d01c      	beq.n	800ca74 <acc_sensor_diagnostics_r2_sensor_status+0x96>
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	7812      	ldrb	r2, [r2, #0]
 800ca3e:	2a01      	cmp	r2, #1
 800ca40:	d908      	bls.n	800ca54 <acc_sensor_diagnostics_r2_sensor_status+0x76>
 800ca42:	059b      	lsls	r3, r3, #22
 800ca44:	0d9b      	lsrs	r3, r3, #22
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <acc_sensor_diagnostics_r2_sensor_status+0x92>)
 800ca4a:	0033      	movs	r3, r6
 800ca4c:	4907      	ldr	r1, [pc, #28]	; (800ca6c <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800ca4e:	2002      	movs	r0, #2
 800ca50:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ca52:	47a8      	blx	r5
 800ca54:	465d      	mov	r5, fp
 800ca56:	3d01      	subs	r5, #1
 800ca58:	b2ab      	uxth	r3, r5
 800ca5a:	469b      	mov	fp, r3
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1e3      	bne.n	800ca28 <acc_sensor_diagnostics_r2_sensor_status+0x4a>
 800ca60:	e016      	b.n	800ca90 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	200003c0 	.word	0x200003c0
 800ca68:	0801db06 	.word	0x0801db06
 800ca6c:	0801db46 	.word	0x0801db46
 800ca70:	0801db59 	.word	0x0801db59
 800ca74:	003a      	movs	r2, r7
 800ca76:	3260      	adds	r2, #96	; 0x60
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	2a01      	cmp	r2, #1
 800ca7c:	d908      	bls.n	800ca90 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800ca7e:	059b      	lsls	r3, r3, #22
 800ca80:	0d9b      	lsrs	r3, r3, #22
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4ad0      	ldr	r2, [pc, #832]	; (800cdc8 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800ca86:	0033      	movs	r3, r6
 800ca88:	49d0      	ldr	r1, [pc, #832]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ca8a:	2002      	movs	r0, #2
 800ca8c:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ca8e:	47a8      	blx	r5
 800ca90:	2500      	movs	r5, #0
 800ca92:	ab02      	add	r3, sp, #8
 800ca94:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca96:	0029      	movs	r1, r5
 800ca98:	0030      	movs	r0, r6
 800ca9a:	849d      	strh	r5, [r3, #36]	; 0x24
 800ca9c:	f7ff ff78 	bl	800c990 <internal_reg_read.lto_priv.618>
 800caa0:	ab02      	add	r3, sp, #8
 800caa2:	aa02      	add	r2, sp, #8
 800caa4:	4694      	mov	ip, r2
 800caa6:	84dd      	strh	r5, [r3, #38]	; 0x26
 800caa8:	2326      	movs	r3, #38	; 0x26
 800caaa:	4463      	add	r3, ip
 800caac:	001a      	movs	r2, r3
 800caae:	212a      	movs	r1, #42	; 0x2a
 800cab0:	0030      	movs	r0, r6
 800cab2:	f7ff ff6d 	bl	800c990 <internal_reg_read.lto_priv.618>
 800cab6:	ab02      	add	r3, sp, #8
 800cab8:	aa0c      	add	r2, sp, #48	; 0x30
 800caba:	2128      	movs	r1, #40	; 0x28
 800cabc:	0030      	movs	r0, r6
 800cabe:	851d      	strh	r5, [r3, #40]	; 0x28
 800cac0:	f7ff ff66 	bl	800c990 <internal_reg_read.lto_priv.618>
 800cac4:	4bc2      	ldr	r3, [pc, #776]	; (800cdd0 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800cac6:	2210      	movs	r2, #16
 800cac8:	0019      	movs	r1, r3
 800caca:	4698      	mov	r8, r3
 800cacc:	3158      	adds	r1, #88	; 0x58
 800cace:	0023      	movs	r3, r4
 800cad0:	0030      	movs	r0, r6
 800cad2:	f7ff ff71 	bl	800c9b8 <read_reg_array>
 800cad6:	003b      	movs	r3, r7
 800cad8:	3360      	adds	r3, #96	; 0x60
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d915      	bls.n	800cb0c <acc_sensor_diagnostics_r2_sensor_status+0x12e>
 800cae0:	89e3      	ldrh	r3, [r4, #14]
 800cae2:	4abc      	ldr	r2, [pc, #752]	; (800cdd4 <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 800cae4:	9307      	str	r3, [sp, #28]
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	49b8      	ldr	r1, [pc, #736]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800caea:	9306      	str	r3, [sp, #24]
 800caec:	8963      	ldrh	r3, [r4, #10]
 800caee:	2002      	movs	r0, #2
 800caf0:	9305      	str	r3, [sp, #20]
 800caf2:	8923      	ldrh	r3, [r4, #8]
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	88e3      	ldrh	r3, [r4, #6]
 800caf8:	9303      	str	r3, [sp, #12]
 800cafa:	88a3      	ldrh	r3, [r4, #4]
 800cafc:	9302      	str	r3, [sp, #8]
 800cafe:	8863      	ldrh	r3, [r4, #2]
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	8823      	ldrh	r3, [r4, #0]
 800cb04:	9300      	str	r3, [sp, #0]
 800cb06:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb08:	0033      	movs	r3, r6
 800cb0a:	47a8      	blx	r5
 800cb0c:	003b      	movs	r3, r7
 800cb0e:	3360      	adds	r3, #96	; 0x60
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d915      	bls.n	800cb42 <acc_sensor_diagnostics_r2_sensor_status+0x164>
 800cb16:	8be3      	ldrh	r3, [r4, #30]
 800cb18:	4aaf      	ldr	r2, [pc, #700]	; (800cdd8 <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 800cb1a:	9307      	str	r3, [sp, #28]
 800cb1c:	8ba3      	ldrh	r3, [r4, #28]
 800cb1e:	49ab      	ldr	r1, [pc, #684]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb20:	9306      	str	r3, [sp, #24]
 800cb22:	8b63      	ldrh	r3, [r4, #26]
 800cb24:	2002      	movs	r0, #2
 800cb26:	9305      	str	r3, [sp, #20]
 800cb28:	8b23      	ldrh	r3, [r4, #24]
 800cb2a:	9304      	str	r3, [sp, #16]
 800cb2c:	8ae3      	ldrh	r3, [r4, #22]
 800cb2e:	9303      	str	r3, [sp, #12]
 800cb30:	8aa3      	ldrh	r3, [r4, #20]
 800cb32:	9302      	str	r3, [sp, #8]
 800cb34:	8a63      	ldrh	r3, [r4, #18]
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	8a23      	ldrh	r3, [r4, #16]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb3e:	0033      	movs	r3, r6
 800cb40:	47a8      	blx	r5
 800cb42:	4641      	mov	r1, r8
 800cb44:	0023      	movs	r3, r4
 800cb46:	3178      	adds	r1, #120	; 0x78
 800cb48:	2204      	movs	r2, #4
 800cb4a:	0030      	movs	r0, r6
 800cb4c:	f7ff ff34 	bl	800c9b8 <read_reg_array>
 800cb50:	003b      	movs	r3, r7
 800cb52:	3360      	adds	r3, #96	; 0x60
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d90d      	bls.n	800cb76 <acc_sensor_diagnostics_r2_sensor_status+0x198>
 800cb5a:	88e3      	ldrh	r3, [r4, #6]
 800cb5c:	4a9f      	ldr	r2, [pc, #636]	; (800cddc <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 800cb5e:	9303      	str	r3, [sp, #12]
 800cb60:	88a3      	ldrh	r3, [r4, #4]
 800cb62:	499a      	ldr	r1, [pc, #616]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb64:	9302      	str	r3, [sp, #8]
 800cb66:	8863      	ldrh	r3, [r4, #2]
 800cb68:	2002      	movs	r0, #2
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	8823      	ldrh	r3, [r4, #0]
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb72:	0033      	movs	r3, r6
 800cb74:	47a8      	blx	r5
 800cb76:	ab02      	add	r3, sp, #8
 800cb78:	469c      	mov	ip, r3
 800cb7a:	222a      	movs	r2, #42	; 0x2a
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	4462      	add	r2, ip
 800cb80:	2153      	movs	r1, #83	; 0x53
 800cb82:	0030      	movs	r0, r6
 800cb84:	8015      	strh	r5, [r2, #0]
 800cb86:	f7ff ff03 	bl	800c990 <internal_reg_read.lto_priv.618>
 800cb8a:	0022      	movs	r2, r4
 800cb8c:	2140      	movs	r1, #64	; 0x40
 800cb8e:	0030      	movs	r0, r6
 800cb90:	8025      	strh	r5, [r4, #0]
 800cb92:	f7ff fefd 	bl	800c990 <internal_reg_read.lto_priv.618>
 800cb96:	003b      	movs	r3, r7
 800cb98:	3360      	adds	r3, #96	; 0x60
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d907      	bls.n	800cbb0 <acc_sensor_diagnostics_r2_sensor_status+0x1d2>
 800cba0:	8823      	ldrh	r3, [r4, #0]
 800cba2:	4a8f      	ldr	r2, [pc, #572]	; (800cde0 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	4989      	ldr	r1, [pc, #548]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cba8:	0033      	movs	r3, r6
 800cbaa:	2002      	movs	r0, #2
 800cbac:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cbae:	47a8      	blx	r5
 800cbb0:	003b      	movs	r3, r7
 800cbb2:	3360      	adds	r3, #96	; 0x60
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d90c      	bls.n	800cbd4 <acc_sensor_diagnostics_r2_sensor_status+0x1f6>
 800cbba:	2240      	movs	r2, #64	; 0x40
 800cbbc:	8823      	ldrh	r3, [r4, #0]
 800cbbe:	4983      	ldr	r1, [pc, #524]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cbc0:	401a      	ands	r2, r3
 800cbc2:	9201      	str	r2, [sp, #4]
 800cbc4:	2280      	movs	r2, #128	; 0x80
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	9300      	str	r3, [sp, #0]
 800cbca:	4a86      	ldr	r2, [pc, #536]	; (800cde4 <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 800cbcc:	0033      	movs	r3, r6
 800cbce:	2002      	movs	r0, #2
 800cbd0:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cbd2:	47a8      	blx	r5
 800cbd4:	003b      	movs	r3, r7
 800cbd6:	3360      	adds	r3, #96	; 0x60
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d90c      	bls.n	800cbf8 <acc_sensor_diagnostics_r2_sensor_status+0x21a>
 800cbde:	2210      	movs	r2, #16
 800cbe0:	8823      	ldrh	r3, [r4, #0]
 800cbe2:	497a      	ldr	r1, [pc, #488]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cbe4:	401a      	ands	r2, r3
 800cbe6:	9201      	str	r2, [sp, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	4013      	ands	r3, r2
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	4a7e      	ldr	r2, [pc, #504]	; (800cde8 <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 800cbf0:	0033      	movs	r3, r6
 800cbf2:	2002      	movs	r0, #2
 800cbf4:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cbf6:	47a8      	blx	r5
 800cbf8:	003b      	movs	r3, r7
 800cbfa:	3360      	adds	r3, #96	; 0x60
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d90c      	bls.n	800cc1c <acc_sensor_diagnostics_r2_sensor_status+0x23e>
 800cc02:	2204      	movs	r2, #4
 800cc04:	8823      	ldrh	r3, [r4, #0]
 800cc06:	4971      	ldr	r1, [pc, #452]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc08:	401a      	ands	r2, r3
 800cc0a:	9201      	str	r2, [sp, #4]
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	4013      	ands	r3, r2
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4a76      	ldr	r2, [pc, #472]	; (800cdec <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 800cc14:	0033      	movs	r3, r6
 800cc16:	2002      	movs	r0, #2
 800cc18:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cc1a:	47a8      	blx	r5
 800cc1c:	0023      	movs	r3, r4
 800cc1e:	2210      	movs	r2, #16
 800cc20:	4973      	ldr	r1, [pc, #460]	; (800cdf0 <acc_sensor_diagnostics_r2_sensor_status+0x412>)
 800cc22:	0030      	movs	r0, r6
 800cc24:	f7ff fec8 	bl	800c9b8 <read_reg_array>
 800cc28:	003b      	movs	r3, r7
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	3360      	adds	r3, #96	; 0x60
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	9209      	str	r2, [sp, #36]	; 0x24
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d909      	bls.n	800cc4a <acc_sensor_diagnostics_r2_sensor_status+0x26c>
 800cc36:	8823      	ldrh	r3, [r4, #0]
 800cc38:	4a6e      	ldr	r2, [pc, #440]	; (800cdf4 <acc_sensor_diagnostics_r2_sensor_status+0x416>)
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	4963      	ldr	r1, [pc, #396]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc3e:	0033      	movs	r3, r6
 800cc40:	2002      	movs	r0, #2
 800cc42:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cc44:	47a8      	blx	r5
 800cc46:	2301      	movs	r3, #1
 800cc48:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4a:	003b      	movs	r3, r7
 800cc4c:	3360      	adds	r3, #96	; 0x60
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d90f      	bls.n	800cc74 <acc_sensor_diagnostics_r2_sensor_status+0x296>
 800cc54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc56:	4a68      	ldr	r2, [pc, #416]	; (800cdf8 <acc_sensor_diagnostics_r2_sensor_status+0x41a>)
 800cc58:	3301      	adds	r3, #1
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	4698      	mov	r8, r3
 800cc5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc60:	495a      	ldr	r1, [pc, #360]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc62:	005d      	lsls	r5, r3, #1
 800cc64:	5b63      	ldrh	r3, [r4, r5]
 800cc66:	2002      	movs	r0, #2
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cc6c:	0033      	movs	r3, r6
 800cc6e:	47a8      	blx	r5
 800cc70:	4643      	mov	r3, r8
 800cc72:	9309      	str	r3, [sp, #36]	; 0x24
 800cc74:	2301      	movs	r3, #1
 800cc76:	4698      	mov	r8, r3
 800cc78:	335f      	adds	r3, #95	; 0x5f
 800cc7a:	4699      	mov	r9, r3
 800cc7c:	4b5f      	ldr	r3, [pc, #380]	; (800cdfc <acc_sensor_diagnostics_r2_sensor_status+0x41e>)
 800cc7e:	44b9      	add	r9, r7
 800cc80:	469b      	mov	fp, r3
 800cc82:	4b52      	ldr	r3, [pc, #328]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc84:	469a      	mov	sl, r3
 800cc86:	464b      	mov	r3, r9
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d910      	bls.n	800ccb0 <acc_sensor_diagnostics_r2_sensor_status+0x2d2>
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	465a      	mov	r2, fp
 800cc92:	3301      	adds	r3, #1
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	5ae3      	ldrh	r3, [r4, r3]
 800cc98:	4651      	mov	r1, sl
 800cc9a:	9302      	str	r3, [sp, #8]
 800cc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9e:	2002      	movs	r0, #2
 800cca0:	005b      	lsls	r3, r3, #1
 800cca2:	5ae3      	ldrh	r3, [r4, r3]
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	4643      	mov	r3, r8
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ccac:	0033      	movs	r3, r6
 800ccae:	47a8      	blx	r5
 800ccb0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ccb2:	3502      	adds	r5, #2
 800ccb4:	b2eb      	uxtb	r3, r5
 800ccb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb8:	2301      	movs	r3, #1
 800ccba:	469c      	mov	ip, r3
 800ccbc:	44e0      	add	r8, ip
 800ccbe:	4643      	mov	r3, r8
 800ccc0:	2b08      	cmp	r3, #8
 800ccc2:	d1e0      	bne.n	800cc86 <acc_sensor_diagnostics_r2_sensor_status+0x2a8>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	469a      	mov	sl, r3
 800ccc8:	4652      	mov	r2, sl
 800ccca:	ab02      	add	r3, sp, #8
 800cccc:	859a      	strh	r2, [r3, #44]	; 0x2c
 800ccce:	219d      	movs	r1, #157	; 0x9d
 800ccd0:	aa0d      	add	r2, sp, #52	; 0x34
 800ccd2:	0030      	movs	r0, r6
 800ccd4:	f7ff fe5c 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ccd8:	ab02      	add	r3, sp, #8
 800ccda:	469c      	mov	ip, r3
 800ccdc:	252e      	movs	r5, #46	; 0x2e
 800ccde:	4653      	mov	r3, sl
 800cce0:	4465      	add	r5, ip
 800cce2:	002a      	movs	r2, r5
 800cce4:	2199      	movs	r1, #153	; 0x99
 800cce6:	0030      	movs	r0, r6
 800cce8:	802b      	strh	r3, [r5, #0]
 800ccea:	9509      	str	r5, [sp, #36]	; 0x24
 800ccec:	f7ff fe50 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ccf0:	4653      	mov	r3, sl
 800ccf2:	0022      	movs	r2, r4
 800ccf4:	2196      	movs	r1, #150	; 0x96
 800ccf6:	0030      	movs	r0, r6
 800ccf8:	8023      	strh	r3, [r4, #0]
 800ccfa:	f7ff fe49 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ccfe:	4652      	mov	r2, sl
 800cd00:	21b2      	movs	r1, #178	; 0xb2
 800cd02:	0030      	movs	r0, r6
 800cd04:	f7fd ffd2 	bl	800acac <acc_sensor_reg_write>
 800cd08:	003b      	movs	r3, r7
 800cd0a:	3360      	adds	r3, #96	; 0x60
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d90e      	bls.n	800cd30 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800cd12:	ab02      	add	r3, sp, #8
 800cd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd16:	4a3a      	ldr	r2, [pc, #232]	; (800ce00 <acc_sensor_diagnostics_r2_sensor_status+0x422>)
 800cd18:	9302      	str	r3, [sp, #8]
 800cd1a:	ab02      	add	r3, sp, #8
 800cd1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd1e:	492b      	ldr	r1, [pc, #172]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	ab02      	add	r3, sp, #8
 800cd24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd26:	2002      	movs	r0, #2
 800cd28:	9300      	str	r3, [sp, #0]
 800cd2a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd2c:	0033      	movs	r3, r6
 800cd2e:	47a8      	blx	r5
 800cd30:	003b      	movs	r3, r7
 800cd32:	3360      	adds	r3, #96	; 0x60
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d90b      	bls.n	800cd52 <acc_sensor_diagnostics_r2_sensor_status+0x374>
 800cd3a:	aa02      	add	r2, sp, #8
 800cd3c:	4694      	mov	ip, r2
 800cd3e:	232a      	movs	r3, #42	; 0x2a
 800cd40:	4463      	add	r3, ip
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	4a2f      	ldr	r2, [pc, #188]	; (800ce04 <acc_sensor_diagnostics_r2_sensor_status+0x426>)
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	4920      	ldr	r1, [pc, #128]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd4a:	0033      	movs	r3, r6
 800cd4c:	2002      	movs	r0, #2
 800cd4e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd50:	47a8      	blx	r5
 800cd52:	003b      	movs	r3, r7
 800cd54:	3360      	adds	r3, #96	; 0x60
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d908      	bls.n	800cd6e <acc_sensor_diagnostics_r2_sensor_status+0x390>
 800cd5c:	ab02      	add	r3, sp, #8
 800cd5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd60:	4a29      	ldr	r2, [pc, #164]	; (800ce08 <acc_sensor_diagnostics_r2_sensor_status+0x42a>)
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	4919      	ldr	r1, [pc, #100]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd66:	0033      	movs	r3, r6
 800cd68:	2002      	movs	r0, #2
 800cd6a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd6c:	47a8      	blx	r5
 800cd6e:	003b      	movs	r3, r7
 800cd70:	3360      	adds	r3, #96	; 0x60
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d908      	bls.n	800cd8a <acc_sensor_diagnostics_r2_sensor_status+0x3ac>
 800cd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7a:	4a24      	ldr	r2, [pc, #144]	; (800ce0c <acc_sensor_diagnostics_r2_sensor_status+0x42e>)
 800cd7c:	881b      	ldrh	r3, [r3, #0]
 800cd7e:	4913      	ldr	r1, [pc, #76]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	2002      	movs	r0, #2
 800cd84:	0033      	movs	r3, r6
 800cd86:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd88:	47a8      	blx	r5
 800cd8a:	003b      	movs	r3, r7
 800cd8c:	3360      	adds	r3, #96	; 0x60
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d907      	bls.n	800cda4 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>
 800cd94:	8823      	ldrh	r3, [r4, #0]
 800cd96:	4a1e      	ldr	r2, [pc, #120]	; (800ce10 <acc_sensor_diagnostics_r2_sensor_status+0x432>)
 800cd98:	9300      	str	r3, [sp, #0]
 800cd9a:	490c      	ldr	r1, [pc, #48]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd9c:	0033      	movs	r3, r6
 800cd9e:	2002      	movs	r0, #2
 800cda0:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800cda2:	47a0      	blx	r4
 800cda4:	003b      	movs	r3, r7
 800cda6:	3360      	adds	r3, #96	; 0x60
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d904      	bls.n	800cdb8 <acc_sensor_diagnostics_r2_sensor_status+0x3da>
 800cdae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb0:	4a18      	ldr	r2, [pc, #96]	; (800ce14 <acc_sensor_diagnostics_r2_sensor_status+0x436>)
 800cdb2:	4906      	ldr	r1, [pc, #24]	; (800cdcc <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cdb4:	2002      	movs	r0, #2
 800cdb6:	4798      	blx	r3
 800cdb8:	b017      	add	sp, #92	; 0x5c
 800cdba:	bc3c      	pop	{r2, r3, r4, r5}
 800cdbc:	4690      	mov	r8, r2
 800cdbe:	4699      	mov	r9, r3
 800cdc0:	46a2      	mov	sl, r4
 800cdc2:	46ab      	mov	fp, r5
 800cdc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	0801db76 	.word	0x0801db76
 800cdcc:	0801db46 	.word	0x0801db46
 800cdd0:	08018d9c 	.word	0x08018d9c
 800cdd4:	0801db93 	.word	0x0801db93
 800cdd8:	0801dbda 	.word	0x0801dbda
 800cddc:	0801dc23 	.word	0x0801dc23
 800cde0:	0801dc54 	.word	0x0801dc54
 800cde4:	0801dc71 	.word	0x0801dc71
 800cde8:	0801dc9d 	.word	0x0801dc9d
 800cdec:	0801dcce 	.word	0x0801dcce
 800cdf0:	08018e1c 	.word	0x08018e1c
 800cdf4:	0801dcfe 	.word	0x0801dcfe
 800cdf8:	0801dd25 	.word	0x0801dd25
 800cdfc:	0801dd43 	.word	0x0801dd43
 800ce00:	0801dd6b 	.word	0x0801dd6b
 800ce04:	0801ddbc 	.word	0x0801ddbc
 800ce08:	0801dddf 	.word	0x0801dddf
 800ce0c:	0801ddfb 	.word	0x0801ddfb
 800ce10:	0801de11 	.word	0x0801de11
 800ce14:	0801de2b 	.word	0x0801de2b

0800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>:
 800ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1a:	464e      	mov	r6, r9
 800ce1c:	46de      	mov	lr, fp
 800ce1e:	4645      	mov	r5, r8
 800ce20:	4657      	mov	r7, sl
 800ce22:	0004      	movs	r4, r0
 800ce24:	b5e0      	push	{r5, r6, r7, lr}
 800ce26:	468b      	mov	fp, r1
 800ce28:	4691      	mov	r9, r2
 800ce2a:	2665      	movs	r6, #101	; 0x65
 800ce2c:	4d47      	ldr	r5, [pc, #284]	; (800cf4c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x134>)
 800ce2e:	b085      	sub	sp, #20
 800ce30:	4659      	mov	r1, fp
 800ce32:	0020      	movs	r0, r4
 800ce34:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ce36:	4798      	blx	r3
 800ce38:	4680      	mov	r8, r0
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	d10f      	bne.n	800ce5e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x46>
 800ce3e:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800ce40:	0023      	movs	r3, r4
 800ce42:	4a43      	ldr	r2, [pc, #268]	; (800cf50 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x138>)
 800ce44:	4943      	ldr	r1, [pc, #268]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800ce46:	47a8      	blx	r5
 800ce48:	0020      	movs	r0, r4
 800ce4a:	f7ff fdc8 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800ce4e:	4640      	mov	r0, r8
 800ce50:	b005      	add	sp, #20
 800ce52:	bc3c      	pop	{r2, r3, r4, r5}
 800ce54:	4690      	mov	r8, r2
 800ce56:	4699      	mov	r9, r3
 800ce58:	46a2      	mov	sl, r4
 800ce5a:	46ab      	mov	fp, r5
 800ce5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce5e:	270e      	movs	r7, #14
 800ce60:	2300      	movs	r3, #0
 800ce62:	446f      	add	r7, sp
 800ce64:	003a      	movs	r2, r7
 800ce66:	212a      	movs	r1, #42	; 0x2a
 800ce68:	0020      	movs	r0, r4
 800ce6a:	469a      	mov	sl, r3
 800ce6c:	803b      	strh	r3, [r7, #0]
 800ce6e:	f7ff fd8f 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ce72:	2240      	movs	r2, #64	; 0x40
 800ce74:	883b      	ldrh	r3, [r7, #0]
 800ce76:	4213      	tst	r3, r2
 800ce78:	d04f      	beq.n	800cf1a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x102>
 800ce7a:	003a      	movs	r2, r7
 800ce7c:	2128      	movs	r1, #40	; 0x28
 800ce7e:	0020      	movs	r0, r4
 800ce80:	f7ff fd86 	bl	800c990 <internal_reg_read.lto_priv.618>
 800ce84:	4649      	mov	r1, r9
 800ce86:	883a      	ldrh	r2, [r7, #0]
 800ce88:	b2d3      	uxtb	r3, r2
 800ce8a:	700b      	strb	r3, [r1, #0]
 800ce8c:	804a      	strh	r2, [r1, #2]
 800ce8e:	2b0b      	cmp	r3, #11
 800ce90:	d839      	bhi.n	800cf06 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xee>
 800ce92:	0018      	movs	r0, r3
 800ce94:	f001 fe5e 	bl	800eb54 <__gnu_thumb1_case_sqi>
 800ce98:	dbdb1806 	.word	0xdbdb1806
 800ce9c:	dbdbdbdb 	.word	0xdbdbdbdb
 800cea0:	dbdbdbdb 	.word	0xdbdbdbdb
 800cea4:	0023      	movs	r3, r4
 800cea6:	4a2c      	ldr	r2, [pc, #176]	; (800cf58 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x140>)
 800cea8:	492a      	ldr	r1, [pc, #168]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800ceaa:	2000      	movs	r0, #0
 800ceac:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800ceae:	47b0      	blx	r6
 800ceb0:	0020      	movs	r0, r4
 800ceb2:	f7ff fd94 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800ceb6:	0023      	movs	r3, r4
 800ceb8:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800ceba:	4a28      	ldr	r2, [pc, #160]	; (800cf5c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x144>)
 800cebc:	4925      	ldr	r1, [pc, #148]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cebe:	2000      	movs	r0, #0
 800cec0:	47a8      	blx	r5
 800cec2:	2300      	movs	r3, #0
 800cec4:	4698      	mov	r8, r3
 800cec6:	e7c2      	b.n	800ce4e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800cec8:	0a11      	lsrs	r1, r2, #8
 800ceca:	2910      	cmp	r1, #16
 800cecc:	d804      	bhi.n	800ced8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xc0>
 800cece:	2301      	movs	r3, #1
 800ced0:	408b      	lsls	r3, r1
 800ced2:	4923      	ldr	r1, [pc, #140]	; (800cf60 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x148>)
 800ced4:	420b      	tst	r3, r1
 800ced6:	d105      	bne.n	800cee4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xcc>
 800ced8:	2384      	movs	r3, #132	; 0x84
 800ceda:	b2d2      	uxtb	r2, r2
 800cedc:	019b      	lsls	r3, r3, #6
 800cede:	431a      	orrs	r2, r3
 800cee0:	464b      	mov	r3, r9
 800cee2:	805a      	strh	r2, [r3, #2]
 800cee4:	464b      	mov	r3, r9
 800cee6:	885a      	ldrh	r2, [r3, #2]
 800cee8:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800ceea:	0a12      	lsrs	r2, r2, #8
 800ceec:	3a01      	subs	r2, #1
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x14c>)
 800cef2:	2a20      	cmp	r2, #32
 800cef4:	d802      	bhi.n	800cefc <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xe4>
 800cef6:	4b1c      	ldr	r3, [pc, #112]	; (800cf68 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x150>)
 800cef8:	0092      	lsls	r2, r2, #2
 800cefa:	58d3      	ldr	r3, [r2, r3]
 800cefc:	4a1b      	ldr	r2, [pc, #108]	; (800cf6c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x154>)
 800cefe:	4915      	ldr	r1, [pc, #84]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cf00:	2000      	movs	r0, #0
 800cf02:	47b0      	blx	r6
 800cf04:	e7d4      	b.n	800ceb0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800cf06:	9400      	str	r4, [sp, #0]
 800cf08:	4a19      	ldr	r2, [pc, #100]	; (800cf70 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x158>)
 800cf0a:	4912      	ldr	r1, [pc, #72]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cf0c:	4650      	mov	r0, sl
 800cf0e:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800cf10:	47b0      	blx	r6
 800cf12:	464b      	mov	r3, r9
 800cf14:	2200      	movs	r2, #0
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	e7ca      	b.n	800ceb0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800cf1a:	002b      	movs	r3, r5
 800cf1c:	3360      	adds	r3, #96	; 0x60
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d005      	beq.n	800cf30 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x118>
 800cf24:	0023      	movs	r3, r4
 800cf26:	4a13      	ldr	r2, [pc, #76]	; (800cf74 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x15c>)
 800cf28:	490a      	ldr	r1, [pc, #40]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800cf2e:	47b8      	blx	r7
 800cf30:	3e01      	subs	r6, #1
 800cf32:	b2b6      	uxth	r6, r6
 800cf34:	2e00      	cmp	r6, #0
 800cf36:	d000      	beq.n	800cf3a <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x122>
 800cf38:	e77a      	b.n	800ce30 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x18>
 800cf3a:	9400      	str	r4, [sp, #0]
 800cf3c:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 800cf3e:	2364      	movs	r3, #100	; 0x64
 800cf40:	4a0d      	ldr	r2, [pc, #52]	; (800cf78 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x160>)
 800cf42:	4904      	ldr	r1, [pc, #16]	; (800cf54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cf44:	0030      	movs	r0, r6
 800cf46:	47a0      	blx	r4
 800cf48:	46b0      	mov	r8, r6
 800cf4a:	e780      	b.n	800ce4e <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800cf4c:	200003c0 	.word	0x200003c0
 800cf50:	0801de79 	.word	0x0801de79
 800cf54:	0801c6e8 	.word	0x0801c6e8
 800cf58:	0801dea1 	.word	0x0801dea1
 800cf5c:	0801df13 	.word	0x0801df13
 800cf60:	00010016 	.word	0x00010016
 800cf64:	0801de6b 	.word	0x0801de6b
 800cf68:	08019fe0 	.word	0x08019fe0
 800cf6c:	0801dec4 	.word	0x0801dec4
 800cf70:	0801dee4 	.word	0x0801dee4
 800cf74:	0801df3b 	.word	0x0801df3b
 800cf78:	0801df5c 	.word	0x0801df5c

0800cf7c <acc_sensor_protocol_r2_stop.constprop.25>:
 800cf7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf7e:	0005      	movs	r5, r0
 800cf80:	f7f8 fea0 	bl	8005cc4 <acc_sensor_protocol_r2_is_sensor_running>
 800cf84:	1e04      	subs	r4, r0, #0
 800cf86:	d109      	bne.n	800cf9c <acc_sensor_protocol_r2_stop.constprop.25+0x20>
 800cf88:	4b1a      	ldr	r3, [pc, #104]	; (800cff4 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800cf8a:	4a1b      	ldr	r2, [pc, #108]	; (800cff8 <acc_sensor_protocol_r2_stop.constprop.25+0x7c>)
 800cf8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf8e:	491b      	ldr	r1, [pc, #108]	; (800cffc <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800cf90:	4798      	blx	r3
 800cf92:	0028      	movs	r0, r5
 800cf94:	f7ff fd23 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800cf98:	0020      	movs	r0, r4
 800cf9a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800cf9c:	4b18      	ldr	r3, [pc, #96]	; (800d000 <acc_sensor_protocol_r2_stop.constprop.25+0x84>)
 800cf9e:	ae01      	add	r6, sp, #4
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	0031      	movs	r1, r6
 800cfa8:	0028      	movs	r0, r5
 800cfaa:	f7f9 f86f 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800cfae:	0028      	movs	r0, r5
 800cfb0:	f7f8 fa44 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 800cfb4:	1e04      	subs	r4, r0, #0
 800cfb6:	d0ef      	beq.n	800cf98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cfb8:	21fa      	movs	r1, #250	; 0xfa
 800cfba:	0032      	movs	r2, r6
 800cfbc:	00c9      	lsls	r1, r1, #3
 800cfbe:	0028      	movs	r0, r5
 800cfc0:	f7ff ff2a 	bl	800ce18 <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d101      	bne.n	800cfcc <acc_sensor_protocol_r2_stop.constprop.25+0x50>
 800cfc8:	2400      	movs	r4, #0
 800cfca:	e7e5      	b.n	800cf98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cfcc:	0028      	movs	r0, r5
 800cfce:	f7f8 fa35 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 800cfd2:	1e04      	subs	r4, r0, #0
 800cfd4:	d0f8      	beq.n	800cfc8 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800cfd6:	7833      	ldrb	r3, [r6, #0]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d0dd      	beq.n	800cf98 <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cfdc:	4a05      	ldr	r2, [pc, #20]	; (800cff4 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800cfde:	8873      	ldrh	r3, [r6, #2]
 800cfe0:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800cfe2:	4906      	ldr	r1, [pc, #24]	; (800cffc <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800cfe4:	4a07      	ldr	r2, [pc, #28]	; (800d004 <acc_sensor_protocol_r2_stop.constprop.25+0x88>)
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	47a0      	blx	r4
 800cfea:	0028      	movs	r0, r5
 800cfec:	f7ff fcf7 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800cff0:	e7ea      	b.n	800cfc8 <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800cff2:	46c0      	nop			; (mov r8, r8)
 800cff4:	200003c0 	.word	0x200003c0
 800cff8:	0801df95 	.word	0x0801df95
 800cffc:	0801c6e8 	.word	0x0801c6e8
 800d000:	00011074 	.word	0x00011074
 800d004:	0801dfc7 	.word	0x0801dfc7

0800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21>:
 800d008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d00a:	46ce      	mov	lr, r9
 800d00c:	4647      	mov	r7, r8
 800d00e:	b580      	push	{r7, lr}
 800d010:	b083      	sub	sp, #12
 800d012:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800d014:	0852      	lsrs	r2, r2, #1
 800d016:	4e37      	ldr	r6, [pc, #220]	; (800d0f4 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xec>)
 800d018:	602a      	str	r2, [r5, #0]
 800d01a:	0004      	movs	r4, r0
 800d01c:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800d01e:	0840      	lsrs	r0, r0, #1
 800d020:	4290      	cmp	r0, r2
 800d022:	d900      	bls.n	800d026 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x1e>
 800d024:	0010      	movs	r0, r2
 800d026:	2701      	movs	r7, #1
 800d028:	3102      	adds	r1, #2
 800d02a:	6019      	str	r1, [r3, #0]
 800d02c:	2300      	movs	r3, #0
 800d02e:	3801      	subs	r0, #1
 800d030:	43b8      	bics	r0, r7
 800d032:	6028      	str	r0, [r5, #0]
 800d034:	ad01      	add	r5, sp, #4
 800d036:	002a      	movs	r2, r5
 800d038:	212a      	movs	r1, #42	; 0x2a
 800d03a:	0020      	movs	r0, r4
 800d03c:	802b      	strh	r3, [r5, #0]
 800d03e:	f7ff fca7 	bl	800c990 <internal_reg_read.lto_priv.618>
 800d042:	882b      	ldrh	r3, [r5, #0]
 800d044:	065b      	lsls	r3, r3, #25
 800d046:	d50d      	bpl.n	800d064 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x5c>
 800d048:	0033      	movs	r3, r6
 800d04a:	3360      	adds	r3, #96	; 0x60
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <acc_sensor_protocol_r2_prepare_load.constprop.21+0x56>
 800d052:	0038      	movs	r0, r7
 800d054:	0023      	movs	r3, r4
 800d056:	4a28      	ldr	r2, [pc, #160]	; (800d0f8 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf0>)
 800d058:	4928      	ldr	r1, [pc, #160]	; (800d0fc <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800d05a:	6e77      	ldr	r7, [r6, #100]	; 0x64
 800d05c:	47b8      	blx	r7
 800d05e:	0020      	movs	r0, r4
 800d060:	f7ff fcbd 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800d064:	0020      	movs	r0, r4
 800d066:	f7f8 fe2d 	bl	8005cc4 <acc_sensor_protocol_r2_is_sensor_running>
 800d06a:	4680      	mov	r8, r0
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d00e      	beq.n	800d08e <acc_sensor_protocol_r2_prepare_load.constprop.21+0x86>
 800d070:	0023      	movs	r3, r4
 800d072:	4a23      	ldr	r2, [pc, #140]	; (800d100 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf8>)
 800d074:	4921      	ldr	r1, [pc, #132]	; (800d0fc <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800d076:	2000      	movs	r0, #0
 800d078:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800d07a:	47a8      	blx	r5
 800d07c:	0020      	movs	r0, r4
 800d07e:	f7ff fcae 	bl	800c9de <acc_sensor_diagnostics_r2_sensor_status>
 800d082:	2000      	movs	r0, #0
 800d084:	b003      	add	sp, #12
 800d086:	bc0c      	pop	{r2, r3}
 800d088:	4690      	mov	r8, r2
 800d08a:	4699      	mov	r9, r3
 800d08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d08e:	466b      	mov	r3, sp
 800d090:	1c9e      	adds	r6, r3, #2
 800d092:	2702      	movs	r7, #2
 800d094:	0032      	movs	r2, r6
 800d096:	2180      	movs	r1, #128	; 0x80
 800d098:	0020      	movs	r0, r4
 800d09a:	f7ff fc79 	bl	800c990 <internal_reg_read.lto_priv.618>
 800d09e:	2284      	movs	r2, #132	; 0x84
 800d0a0:	8833      	ldrh	r3, [r6, #0]
 800d0a2:	0152      	lsls	r2, r2, #5
 800d0a4:	43bb      	bics	r3, r7
 800d0a6:	433b      	orrs	r3, r7
 800d0a8:	4691      	mov	r9, r2
 800d0aa:	802a      	strh	r2, [r5, #0]
 800d0ac:	806b      	strh	r3, [r5, #2]
 800d0ae:	003a      	movs	r2, r7
 800d0b0:	4643      	mov	r3, r8
 800d0b2:	0029      	movs	r1, r5
 800d0b4:	0020      	movs	r0, r4
 800d0b6:	f7f8 ffe9 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800d0ba:	0032      	movs	r2, r6
 800d0bc:	2180      	movs	r1, #128	; 0x80
 800d0be:	0020      	movs	r0, r4
 800d0c0:	f7ff fc66 	bl	800c990 <internal_reg_read.lto_priv.618>
 800d0c4:	2280      	movs	r2, #128	; 0x80
 800d0c6:	8833      	ldrh	r3, [r6, #0]
 800d0c8:	0029      	movs	r1, r5
 800d0ca:	4393      	bics	r3, r2
 800d0cc:	464a      	mov	r2, r9
 800d0ce:	806b      	strh	r3, [r5, #2]
 800d0d0:	802a      	strh	r2, [r5, #0]
 800d0d2:	4643      	mov	r3, r8
 800d0d4:	003a      	movs	r2, r7
 800d0d6:	0020      	movs	r0, r4
 800d0d8:	f7f8 ffd8 	bl	800608c <acc_rss_integration_sensor_device_transfer>
 800d0dc:	2201      	movs	r2, #1
 800d0de:	2105      	movs	r1, #5
 800d0e0:	0020      	movs	r0, r4
 800d0e2:	f7fd fde3 	bl	800acac <acc_sensor_reg_write>
 800d0e6:	0020      	movs	r0, r4
 800d0e8:	2203      	movs	r2, #3
 800d0ea:	217a      	movs	r1, #122	; 0x7a
 800d0ec:	f7fd fdde 	bl	800acac <acc_sensor_reg_write>
 800d0f0:	2001      	movs	r0, #1
 800d0f2:	e7c7      	b.n	800d084 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x7c>
 800d0f4:	200003c0 	.word	0x200003c0
 800d0f8:	0801dfe7 	.word	0x0801dfe7
 800d0fc:	0801c6e8 	.word	0x0801c6e8
 800d100:	0801e013 	.word	0x0801e013

0800d104 <acc_cpd_linear_sweep_get_info>:
 800d104:	30ad      	adds	r0, #173	; 0xad
 800d106:	7803      	ldrb	r3, [r0, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00a      	beq.n	800d122 <acc_cpd_linear_sweep_get_info+0x1e>
 800d10c:	2200      	movs	r2, #0
 800d10e:	2303      	movs	r3, #3
 800d110:	604a      	str	r2, [r1, #4]
 800d112:	608a      	str	r2, [r1, #8]
 800d114:	3201      	adds	r2, #1
 800d116:	60ca      	str	r2, [r1, #12]
 800d118:	3201      	adds	r2, #1
 800d11a:	600b      	str	r3, [r1, #0]
 800d11c:	610a      	str	r2, [r1, #16]
 800d11e:	614b      	str	r3, [r1, #20]
 800d120:	4770      	bx	lr
 800d122:	600b      	str	r3, [r1, #0]
 800d124:	604b      	str	r3, [r1, #4]
 800d126:	608b      	str	r3, [r1, #8]
 800d128:	60cb      	str	r3, [r1, #12]
 800d12a:	610b      	str	r3, [r1, #16]
 800d12c:	614b      	str	r3, [r1, #20]
 800d12e:	e7f7      	b.n	800d120 <acc_cpd_linear_sweep_get_info+0x1c>

0800d130 <acc_cpd_linear_sweep_update_program>:
 800d130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d132:	784b      	ldrb	r3, [r1, #1]
 800d134:	0005      	movs	r5, r0
 800d136:	000c      	movs	r4, r1
 800d138:	684f      	ldr	r7, [r1, #4]
 800d13a:	68ce      	ldr	r6, [r1, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d007      	beq.n	800d150 <acc_cpd_linear_sweep_update_program+0x20>
 800d140:	688b      	ldr	r3, [r1, #8]
 800d142:	4a0e      	ldr	r2, [pc, #56]	; (800d17c <acc_cpd_linear_sweep_update_program+0x4c>)
 800d144:	330e      	adds	r3, #14
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	490d      	ldr	r1, [pc, #52]	; (800d180 <acc_cpd_linear_sweep_update_program+0x50>)
 800d14a:	235e      	movs	r3, #94	; 0x5e
 800d14c:	f7fd fdbc 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800d150:	7823      	ldrb	r3, [r4, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d006      	beq.n	800d164 <acc_cpd_linear_sweep_update_program+0x34>
 800d156:	9700      	str	r7, [sp, #0]
 800d158:	2336      	movs	r3, #54	; 0x36
 800d15a:	4a08      	ldr	r2, [pc, #32]	; (800d17c <acc_cpd_linear_sweep_update_program+0x4c>)
 800d15c:	4908      	ldr	r1, [pc, #32]	; (800d180 <acc_cpd_linear_sweep_update_program+0x50>)
 800d15e:	0028      	movs	r0, r5
 800d160:	f7fd fdb2 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800d164:	78a3      	ldrb	r3, [r4, #2]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d006      	beq.n	800d178 <acc_cpd_linear_sweep_update_program+0x48>
 800d16a:	9600      	str	r6, [sp, #0]
 800d16c:	2372      	movs	r3, #114	; 0x72
 800d16e:	4a03      	ldr	r2, [pc, #12]	; (800d17c <acc_cpd_linear_sweep_update_program+0x4c>)
 800d170:	4903      	ldr	r1, [pc, #12]	; (800d180 <acc_cpd_linear_sweep_update_program+0x50>)
 800d172:	0028      	movs	r0, r5
 800d174:	f7fd fda8 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800d178:	2001      	movs	r0, #1
 800d17a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d17c:	0801999c 	.word	0x0801999c
 800d180:	0801ab48 	.word	0x0801ab48

0800d184 <acc_probes_execute>:
 800d184:	230c      	movs	r3, #12
 800d186:	b510      	push	{r4, lr}
 800d188:	7804      	ldrb	r4, [r0, #0]
 800d18a:	435c      	muls	r4, r3
 800d18c:	4b03      	ldr	r3, [pc, #12]	; (800d19c <acc_probes_execute+0x18>)
 800d18e:	191b      	adds	r3, r3, r4
 800d190:	685c      	ldr	r4, [r3, #4]
 800d192:	2c00      	cmp	r4, #0
 800d194:	d001      	beq.n	800d19a <acc_probes_execute+0x16>
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	47a0      	blx	r4
 800d19a:	bd10      	pop	{r4, pc}
 800d19c:	08019754 	.word	0x08019754

0800d1a0 <acc_cpd_linear_sweep_load_program>:
 800d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a2:	46de      	mov	lr, fp
 800d1a4:	4657      	mov	r7, sl
 800d1a6:	4645      	mov	r5, r8
 800d1a8:	464e      	mov	r6, r9
 800d1aa:	b5e0      	push	{r5, r6, r7, lr}
 800d1ac:	001f      	movs	r7, r3
 800d1ae:	2316      	movs	r3, #22
 800d1b0:	b08f      	sub	sp, #60	; 0x3c
 800d1b2:	ac0b      	add	r4, sp, #44	; 0x2c
 800d1b4:	7023      	strb	r3, [r4, #0]
 800d1b6:	2307      	movs	r3, #7
 800d1b8:	9005      	str	r0, [sp, #20]
 800d1ba:	9108      	str	r1, [sp, #32]
 800d1bc:	0015      	movs	r5, r2
 800d1be:	900c      	str	r0, [sp, #48]	; 0x30
 800d1c0:	22bc      	movs	r2, #188	; 0xbc
 800d1c2:	0039      	movs	r1, r7
 800d1c4:	0020      	movs	r0, r4
 800d1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800d1c8:	f7ff ffdc 	bl	800d184 <acc_probes_execute>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1d0:	930a      	str	r3, [sp, #40]	; 0x28
 800d1d2:	ab0a      	add	r3, sp, #40	; 0x28
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	002a      	movs	r2, r5
 800d1d8:	0023      	movs	r3, r4
 800d1da:	9908      	ldr	r1, [sp, #32]
 800d1dc:	9805      	ldr	r0, [sp, #20]
 800d1de:	f7ff ff13 	bl	800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800d1e2:	9009      	str	r0, [sp, #36]	; 0x24
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d101      	bne.n	800d1ec <acc_cpd_linear_sweep_load_program+0x4c>
 800d1e8:	f000 fc50 	bl	800da8c <acc_cpd_linear_sweep_load_program+0x8ec>
 800d1ec:	4bf9      	ldr	r3, [pc, #996]	; (800d5d4 <acc_cpd_linear_sweep_load_program+0x434>)
 800d1ee:	001a      	movs	r2, r3
 800d1f0:	3260      	adds	r2, #96	; 0x60
 800d1f2:	7812      	ldrb	r2, [r2, #0]
 800d1f4:	2a03      	cmp	r2, #3
 800d1f6:	d904      	bls.n	800d202 <acc_cpd_linear_sweep_load_program+0x62>
 800d1f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1fa:	4af7      	ldr	r2, [pc, #988]	; (800d5d8 <acc_cpd_linear_sweep_load_program+0x438>)
 800d1fc:	49f7      	ldr	r1, [pc, #988]	; (800d5dc <acc_cpd_linear_sweep_load_program+0x43c>)
 800d1fe:	2004      	movs	r0, #4
 800d200:	4798      	blx	r3
 800d202:	2300      	movs	r3, #0
 800d204:	469b      	mov	fp, r3
 800d206:	23e2      	movs	r3, #226	; 0xe2
 800d208:	465a      	mov	r2, fp
 800d20a:	00db      	lsls	r3, r3, #3
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d210:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d212:	9203      	str	r2, [sp, #12]
 800d214:	429a      	cmp	r2, r3
 800d216:	d900      	bls.n	800d21a <acc_cpd_linear_sweep_load_program+0x7a>
 800d218:	9303      	str	r3, [sp, #12]
 800d21a:	465b      	mov	r3, fp
 800d21c:	085b      	lsrs	r3, r3, #1
 800d21e:	9306      	str	r3, [sp, #24]
 800d220:	9b03      	ldr	r3, [sp, #12]
 800d222:	0021      	movs	r1, r4
 800d224:	085a      	lsrs	r2, r3, #1
 800d226:	9b06      	ldr	r3, [sp, #24]
 800d228:	0098      	lsls	r0, r3, #2
 800d22a:	4bed      	ldr	r3, [pc, #948]	; (800d5e0 <acc_cpd_linear_sweep_load_program+0x440>)
 800d22c:	18c0      	adds	r0, r0, r3
 800d22e:	f7ff f9e1 	bl	800c5f4 <acc_confprogram_copy>
 800d232:	465b      	mov	r3, fp
 800d234:	b29d      	uxth	r5, r3
 800d236:	466b      	mov	r3, sp
 800d238:	899e      	ldrh	r6, [r3, #12]
 800d23a:	4bea      	ldr	r3, [pc, #936]	; (800d5e4 <acc_cpd_linear_sweep_load_program+0x444>)
 800d23c:	0032      	movs	r2, r6
 800d23e:	4698      	mov	r8, r3
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	0029      	movs	r1, r5
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	2350      	movs	r3, #80	; 0x50
 800d248:	0020      	movs	r0, r4
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	4643      	mov	r3, r8
 800d24e:	f7ff fa19 	bl	800c684 <acc_confprogram_patch_offset>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	0032      	movs	r2, r6
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	234e      	movs	r3, #78	; 0x4e
 800d25a:	0029      	movs	r1, r5
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	0020      	movs	r0, r4
 800d260:	4643      	mov	r3, r8
 800d262:	f7ff fa0f 	bl	800c684 <acc_confprogram_patch_offset>
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	0032      	movs	r2, r6
 800d26a:	9301      	str	r3, [sp, #4]
 800d26c:	234f      	movs	r3, #79	; 0x4f
 800d26e:	0029      	movs	r1, r5
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	0020      	movs	r0, r4
 800d274:	4643      	mov	r3, r8
 800d276:	f7ff fa05 	bl	800c684 <acc_confprogram_patch_offset>
 800d27a:	89bb      	ldrh	r3, [r7, #12]
 800d27c:	0032      	movs	r2, r6
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	234c      	movs	r3, #76	; 0x4c
 800d282:	0029      	movs	r1, r5
 800d284:	9300      	str	r3, [sp, #0]
 800d286:	0020      	movs	r0, r4
 800d288:	4643      	mov	r3, r8
 800d28a:	f7ff f9fb 	bl	800c684 <acc_confprogram_patch_offset>
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	0032      	movs	r2, r6
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	2326      	movs	r3, #38	; 0x26
 800d296:	0029      	movs	r1, r5
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	0020      	movs	r0, r4
 800d29c:	4643      	mov	r3, r8
 800d29e:	f7ff f9f1 	bl	800c684 <acc_confprogram_patch_offset>
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	0032      	movs	r2, r6
 800d2a6:	9301      	str	r3, [sp, #4]
 800d2a8:	2373      	movs	r3, #115	; 0x73
 800d2aa:	0029      	movs	r1, r5
 800d2ac:	9300      	str	r3, [sp, #0]
 800d2ae:	0020      	movs	r0, r4
 800d2b0:	4643      	mov	r3, r8
 800d2b2:	f7ff f9e7 	bl	800c684 <acc_confprogram_patch_offset>
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	0032      	movs	r2, r6
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	2362      	movs	r3, #98	; 0x62
 800d2be:	0029      	movs	r1, r5
 800d2c0:	9300      	str	r3, [sp, #0]
 800d2c2:	0020      	movs	r0, r4
 800d2c4:	4643      	mov	r3, r8
 800d2c6:	f7ff f9dd 	bl	800c684 <acc_confprogram_patch_offset>
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	0032      	movs	r2, r6
 800d2ce:	9301      	str	r3, [sp, #4]
 800d2d0:	2337      	movs	r3, #55	; 0x37
 800d2d2:	0029      	movs	r1, r5
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	0020      	movs	r0, r4
 800d2d8:	4643      	mov	r3, r8
 800d2da:	f7ff f9d3 	bl	800c684 <acc_confprogram_patch_offset>
 800d2de:	6a3b      	ldr	r3, [r7, #32]
 800d2e0:	0032      	movs	r2, r6
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	2376      	movs	r3, #118	; 0x76
 800d2e6:	0029      	movs	r1, r5
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	0020      	movs	r0, r4
 800d2ec:	4643      	mov	r3, r8
 800d2ee:	f7ff f9c9 	bl	800c684 <acc_confprogram_patch_offset>
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	0032      	movs	r2, r6
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	2369      	movs	r3, #105	; 0x69
 800d2fa:	0029      	movs	r1, r5
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	0020      	movs	r0, r4
 800d300:	4643      	mov	r3, r8
 800d302:	f7ff f9bf 	bl	800c684 <acc_confprogram_patch_offset>
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	0032      	movs	r2, r6
 800d30a:	9301      	str	r3, [sp, #4]
 800d30c:	236a      	movs	r3, #106	; 0x6a
 800d30e:	0029      	movs	r1, r5
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	0020      	movs	r0, r4
 800d314:	4643      	mov	r3, r8
 800d316:	f7ff f9b5 	bl	800c684 <acc_confprogram_patch_offset>
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	0032      	movs	r2, r6
 800d31e:	9301      	str	r3, [sp, #4]
 800d320:	2319      	movs	r3, #25
 800d322:	0029      	movs	r1, r5
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	0020      	movs	r0, r4
 800d328:	4643      	mov	r3, r8
 800d32a:	f7ff f9ab 	bl	800c684 <acc_confprogram_patch_offset>
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	0032      	movs	r2, r6
 800d332:	9301      	str	r3, [sp, #4]
 800d334:	231a      	movs	r3, #26
 800d336:	0029      	movs	r1, r5
 800d338:	9300      	str	r3, [sp, #0]
 800d33a:	0020      	movs	r0, r4
 800d33c:	4643      	mov	r3, r8
 800d33e:	f7ff f9a1 	bl	800c684 <acc_confprogram_patch_offset>
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	0032      	movs	r2, r6
 800d346:	9301      	str	r3, [sp, #4]
 800d348:	231b      	movs	r3, #27
 800d34a:	0029      	movs	r1, r5
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	0020      	movs	r0, r4
 800d350:	4643      	mov	r3, r8
 800d352:	f7ff f997 	bl	800c684 <acc_confprogram_patch_offset>
 800d356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d358:	0032      	movs	r2, r6
 800d35a:	9301      	str	r3, [sp, #4]
 800d35c:	231c      	movs	r3, #28
 800d35e:	0029      	movs	r1, r5
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	0020      	movs	r0, r4
 800d364:	4643      	mov	r3, r8
 800d366:	f7ff f98d 	bl	800c684 <acc_confprogram_patch_offset>
 800d36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d36c:	0032      	movs	r2, r6
 800d36e:	9301      	str	r3, [sp, #4]
 800d370:	231d      	movs	r3, #29
 800d372:	0029      	movs	r1, r5
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	0020      	movs	r0, r4
 800d378:	4643      	mov	r3, r8
 800d37a:	f7ff f983 	bl	800c684 <acc_confprogram_patch_offset>
 800d37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d380:	0032      	movs	r2, r6
 800d382:	9301      	str	r3, [sp, #4]
 800d384:	231e      	movs	r3, #30
 800d386:	0029      	movs	r1, r5
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	0020      	movs	r0, r4
 800d38c:	4643      	mov	r3, r8
 800d38e:	f7ff f979 	bl	800c684 <acc_confprogram_patch_offset>
 800d392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d394:	0032      	movs	r2, r6
 800d396:	9301      	str	r3, [sp, #4]
 800d398:	2355      	movs	r3, #85	; 0x55
 800d39a:	0029      	movs	r1, r5
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	0020      	movs	r0, r4
 800d3a0:	4643      	mov	r3, r8
 800d3a2:	f7ff f96f 	bl	800c684 <acc_confprogram_patch_offset>
 800d3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a8:	0032      	movs	r2, r6
 800d3aa:	9301      	str	r3, [sp, #4]
 800d3ac:	2356      	movs	r3, #86	; 0x56
 800d3ae:	0029      	movs	r1, r5
 800d3b0:	9300      	str	r3, [sp, #0]
 800d3b2:	0020      	movs	r0, r4
 800d3b4:	4643      	mov	r3, r8
 800d3b6:	f7ff f965 	bl	800c684 <acc_confprogram_patch_offset>
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3bc:	0032      	movs	r2, r6
 800d3be:	9301      	str	r3, [sp, #4]
 800d3c0:	2358      	movs	r3, #88	; 0x58
 800d3c2:	0029      	movs	r1, r5
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	0020      	movs	r0, r4
 800d3c8:	4643      	mov	r3, r8
 800d3ca:	f7ff f95b 	bl	800c684 <acc_confprogram_patch_offset>
 800d3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3d0:	0032      	movs	r2, r6
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	236b      	movs	r3, #107	; 0x6b
 800d3d6:	0029      	movs	r1, r5
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	0020      	movs	r0, r4
 800d3dc:	4643      	mov	r3, r8
 800d3de:	f7ff f951 	bl	800c684 <acc_confprogram_patch_offset>
 800d3e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3e4:	0032      	movs	r2, r6
 800d3e6:	9301      	str	r3, [sp, #4]
 800d3e8:	2386      	movs	r3, #134	; 0x86
 800d3ea:	0029      	movs	r1, r5
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	0020      	movs	r0, r4
 800d3f0:	4643      	mov	r3, r8
 800d3f2:	f7ff f947 	bl	800c684 <acc_confprogram_patch_offset>
 800d3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3f8:	0032      	movs	r2, r6
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	2364      	movs	r3, #100	; 0x64
 800d3fe:	0029      	movs	r1, r5
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	0020      	movs	r0, r4
 800d404:	4643      	mov	r3, r8
 800d406:	f7ff f93d 	bl	800c684 <acc_confprogram_patch_offset>
 800d40a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d40c:	0032      	movs	r2, r6
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	2365      	movs	r3, #101	; 0x65
 800d412:	0029      	movs	r1, r5
 800d414:	9300      	str	r3, [sp, #0]
 800d416:	0020      	movs	r0, r4
 800d418:	4643      	mov	r3, r8
 800d41a:	f7ff f933 	bl	800c684 <acc_confprogram_patch_offset>
 800d41e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d420:	0032      	movs	r2, r6
 800d422:	9301      	str	r3, [sp, #4]
 800d424:	2340      	movs	r3, #64	; 0x40
 800d426:	0029      	movs	r1, r5
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	0020      	movs	r0, r4
 800d42c:	4643      	mov	r3, r8
 800d42e:	f7ff f929 	bl	800c684 <acc_confprogram_patch_offset>
 800d432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d434:	0032      	movs	r2, r6
 800d436:	9301      	str	r3, [sp, #4]
 800d438:	2341      	movs	r3, #65	; 0x41
 800d43a:	0029      	movs	r1, r5
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	0020      	movs	r0, r4
 800d440:	4643      	mov	r3, r8
 800d442:	f7ff f91f 	bl	800c684 <acc_confprogram_patch_offset>
 800d446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d448:	0032      	movs	r2, r6
 800d44a:	9301      	str	r3, [sp, #4]
 800d44c:	2372      	movs	r3, #114	; 0x72
 800d44e:	0029      	movs	r1, r5
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	0020      	movs	r0, r4
 800d454:	4643      	mov	r3, r8
 800d456:	f7ff f915 	bl	800c684 <acc_confprogram_patch_offset>
 800d45a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d45c:	0032      	movs	r2, r6
 800d45e:	9301      	str	r3, [sp, #4]
 800d460:	2354      	movs	r3, #84	; 0x54
 800d462:	0029      	movs	r1, r5
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	0020      	movs	r0, r4
 800d468:	4643      	mov	r3, r8
 800d46a:	f7ff f90b 	bl	800c684 <acc_confprogram_patch_offset>
 800d46e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d470:	0032      	movs	r2, r6
 800d472:	9301      	str	r3, [sp, #4]
 800d474:	2339      	movs	r3, #57	; 0x39
 800d476:	0029      	movs	r1, r5
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	0020      	movs	r0, r4
 800d47c:	4643      	mov	r3, r8
 800d47e:	f7ff f901 	bl	800c684 <acc_confprogram_patch_offset>
 800d482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d484:	2b00      	cmp	r3, #0
 800d486:	d06f      	beq.n	800d568 <acc_cpd_linear_sweep_load_program+0x3c8>
 800d488:	2301      	movs	r3, #1
 800d48a:	9301      	str	r3, [sp, #4]
 800d48c:	330f      	adds	r3, #15
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	0032      	movs	r2, r6
 800d492:	4643      	mov	r3, r8
 800d494:	0029      	movs	r1, r5
 800d496:	0020      	movs	r0, r4
 800d498:	f7ff f8f4 	bl	800c684 <acc_confprogram_patch_offset>
 800d49c:	4b52      	ldr	r3, [pc, #328]	; (800d5e8 <acc_cpd_linear_sweep_load_program+0x448>)
 800d49e:	0032      	movs	r2, r6
 800d4a0:	469a      	mov	sl, r3
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	2312      	movs	r3, #18
 800d4a6:	0029      	movs	r1, r5
 800d4a8:	9300      	str	r3, [sp, #0]
 800d4aa:	0020      	movs	r0, r4
 800d4ac:	4643      	mov	r3, r8
 800d4ae:	f7ff f8e9 	bl	800c684 <acc_confprogram_patch_offset>
 800d4b2:	2307      	movs	r3, #7
 800d4b4:	4699      	mov	r9, r3
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	330d      	adds	r3, #13
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	0032      	movs	r2, r6
 800d4be:	4643      	mov	r3, r8
 800d4c0:	0029      	movs	r1, r5
 800d4c2:	0020      	movs	r0, r4
 800d4c4:	f7ff f8de 	bl	800c684 <acc_confprogram_patch_offset>
 800d4c8:	4653      	mov	r3, sl
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	2311      	movs	r3, #17
 800d4ce:	0032      	movs	r2, r6
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	0029      	movs	r1, r5
 800d4d4:	4643      	mov	r3, r8
 800d4d6:	0020      	movs	r0, r4
 800d4d8:	f7ff f8d4 	bl	800c684 <acc_confprogram_patch_offset>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	9301      	str	r3, [sp, #4]
 800d4e0:	3313      	adds	r3, #19
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	0032      	movs	r2, r6
 800d4e6:	4643      	mov	r3, r8
 800d4e8:	0029      	movs	r1, r5
 800d4ea:	0020      	movs	r0, r4
 800d4ec:	f7ff f8ca 	bl	800c684 <acc_confprogram_patch_offset>
 800d4f0:	4b3e      	ldr	r3, [pc, #248]	; (800d5ec <acc_cpd_linear_sweep_load_program+0x44c>)
 800d4f2:	0032      	movs	r2, r6
 800d4f4:	9301      	str	r3, [sp, #4]
 800d4f6:	2315      	movs	r3, #21
 800d4f8:	0029      	movs	r1, r5
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	0020      	movs	r0, r4
 800d4fe:	4643      	mov	r3, r8
 800d500:	f7ff f8c0 	bl	800c684 <acc_confprogram_patch_offset>
 800d504:	464b      	mov	r3, r9
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	330f      	adds	r3, #15
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	0032      	movs	r2, r6
 800d50e:	4643      	mov	r3, r8
 800d510:	0029      	movs	r1, r5
 800d512:	0020      	movs	r0, r4
 800d514:	f7ff f8b6 	bl	800c684 <acc_confprogram_patch_offset>
 800d518:	4b35      	ldr	r3, [pc, #212]	; (800d5f0 <acc_cpd_linear_sweep_load_program+0x450>)
 800d51a:	0032      	movs	r2, r6
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	230e      	movs	r3, #14
 800d520:	0029      	movs	r1, r5
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	0020      	movs	r0, r4
 800d526:	4643      	mov	r3, r8
 800d528:	f7ff f8ac 	bl	800c684 <acc_confprogram_patch_offset>
 800d52c:	464b      	mov	r3, r9
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	3308      	adds	r3, #8
 800d532:	9300      	str	r3, [sp, #0]
 800d534:	0032      	movs	r2, r6
 800d536:	4643      	mov	r3, r8
 800d538:	0029      	movs	r1, r5
 800d53a:	0020      	movs	r0, r4
 800d53c:	f7ff f8a2 	bl	800c684 <acc_confprogram_patch_offset>
 800d540:	4b2c      	ldr	r3, [pc, #176]	; (800d5f4 <acc_cpd_linear_sweep_load_program+0x454>)
 800d542:	0032      	movs	r2, r6
 800d544:	9301      	str	r3, [sp, #4]
 800d546:	2317      	movs	r3, #23
 800d548:	0029      	movs	r1, r5
 800d54a:	9300      	str	r3, [sp, #0]
 800d54c:	0020      	movs	r0, r4
 800d54e:	4643      	mov	r3, r8
 800d550:	f7ff f898 	bl	800c684 <acc_confprogram_patch_offset>
 800d554:	464b      	mov	r3, r9
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	3311      	adds	r3, #17
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	0032      	movs	r2, r6
 800d55e:	4643      	mov	r3, r8
 800d560:	0029      	movs	r1, r5
 800d562:	0020      	movs	r0, r4
 800d564:	f7ff f88e 	bl	800c684 <acc_confprogram_patch_offset>
 800d568:	4b1e      	ldr	r3, [pc, #120]	; (800d5e4 <acc_cpd_linear_sweep_load_program+0x444>)
 800d56a:	0032      	movs	r2, r6
 800d56c:	4698      	mov	r8, r3
 800d56e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d570:	0029      	movs	r1, r5
 800d572:	9301      	str	r3, [sp, #4]
 800d574:	2351      	movs	r3, #81	; 0x51
 800d576:	0020      	movs	r0, r4
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	4643      	mov	r3, r8
 800d57c:	f7ff f882 	bl	800c684 <acc_confprogram_patch_offset>
 800d580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d582:	0032      	movs	r2, r6
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	2377      	movs	r3, #119	; 0x77
 800d588:	0029      	movs	r1, r5
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	0020      	movs	r0, r4
 800d58e:	4643      	mov	r3, r8
 800d590:	f7ff f878 	bl	800c684 <acc_confprogram_patch_offset>
 800d594:	1d3b      	adds	r3, r7, #4
 800d596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d598:	0032      	movs	r2, r6
 800d59a:	9301      	str	r3, [sp, #4]
 800d59c:	2344      	movs	r3, #68	; 0x44
 800d59e:	0029      	movs	r1, r5
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	0020      	movs	r0, r4
 800d5a4:	4643      	mov	r3, r8
 800d5a6:	f7ff f86d 	bl	800c684 <acc_confprogram_patch_offset>
 800d5aa:	003b      	movs	r3, r7
 800d5ac:	3308      	adds	r3, #8
 800d5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5b0:	0032      	movs	r2, r6
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	2343      	movs	r3, #67	; 0x43
 800d5b6:	0029      	movs	r1, r5
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	0020      	movs	r0, r4
 800d5bc:	4643      	mov	r3, r8
 800d5be:	f7ff f861 	bl	800c684 <acc_confprogram_patch_offset>
 800d5c2:	003b      	movs	r3, r7
 800d5c4:	3388      	adds	r3, #136	; 0x88
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	4691      	mov	r9, r2
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	4692      	mov	sl, r2
 800d5d0:	464a      	mov	r2, r9
 800d5d2:	e011      	b.n	800d5f8 <acc_cpd_linear_sweep_load_program+0x458>
 800d5d4:	200003c0 	.word	0x200003c0
 800d5d8:	0801e042 	.word	0x0801e042
 800d5dc:	0801c871 	.word	0x0801c871
 800d5e0:	0801ab48 	.word	0x0801ab48
 800d5e4:	0801999c 	.word	0x0801999c
 800d5e8:	0000ff80 	.word	0x0000ff80
 800d5ec:	0000ffc0 	.word	0x0000ffc0
 800d5f0:	0000fff0 	.word	0x0000fff0
 800d5f4:	0000ffff 	.word	0x0000ffff
 800d5f8:	2a08      	cmp	r2, #8
 800d5fa:	d914      	bls.n	800d626 <acc_cpd_linear_sweep_load_program+0x486>
 800d5fc:	464b      	mov	r3, r9
 800d5fe:	22ff      	movs	r2, #255	; 0xff
 800d600:	3b08      	subs	r3, #8
 800d602:	409a      	lsls	r2, r3
 800d604:	0013      	movs	r3, r2
 800d606:	22ff      	movs	r2, #255	; 0xff
 800d608:	4393      	bics	r3, r2
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	469a      	mov	sl, r3
 800d60e:	2302      	movs	r3, #2
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	3365      	adds	r3, #101	; 0x65
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	0032      	movs	r2, r6
 800d618:	4643      	mov	r3, r8
 800d61a:	0029      	movs	r1, r5
 800d61c:	0020      	movs	r0, r4
 800d61e:	f7ff f831 	bl	800c684 <acc_confprogram_patch_offset>
 800d622:	2308      	movs	r3, #8
 800d624:	4699      	mov	r9, r3
 800d626:	4bf2      	ldr	r3, [pc, #968]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d628:	0032      	movs	r2, r6
 800d62a:	4698      	mov	r8, r3
 800d62c:	464b      	mov	r3, r9
 800d62e:	9301      	str	r3, [sp, #4]
 800d630:	236c      	movs	r3, #108	; 0x6c
 800d632:	0029      	movs	r1, r5
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	0020      	movs	r0, r4
 800d638:	4643      	mov	r3, r8
 800d63a:	f7ff f823 	bl	800c684 <acc_confprogram_patch_offset>
 800d63e:	464b      	mov	r3, r9
 800d640:	9301      	str	r3, [sp, #4]
 800d642:	2359      	movs	r3, #89	; 0x59
 800d644:	0032      	movs	r2, r6
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	0029      	movs	r1, r5
 800d64a:	4643      	mov	r3, r8
 800d64c:	0020      	movs	r0, r4
 800d64e:	f7ff f819 	bl	800c684 <acc_confprogram_patch_offset>
 800d652:	2380      	movs	r3, #128	; 0x80
 800d654:	4652      	mov	r2, sl
 800d656:	431a      	orrs	r2, r3
 800d658:	236e      	movs	r3, #110	; 0x6e
 800d65a:	9207      	str	r2, [sp, #28]
 800d65c:	9201      	str	r2, [sp, #4]
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	0032      	movs	r2, r6
 800d662:	4643      	mov	r3, r8
 800d664:	0029      	movs	r1, r5
 800d666:	0020      	movs	r0, r4
 800d668:	f7ff f80c 	bl	800c684 <acc_confprogram_patch_offset>
 800d66c:	23c0      	movs	r3, #192	; 0xc0
 800d66e:	4652      	mov	r2, sl
 800d670:	431a      	orrs	r2, r3
 800d672:	2370      	movs	r3, #112	; 0x70
 800d674:	4691      	mov	r9, r2
 800d676:	9201      	str	r2, [sp, #4]
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	0032      	movs	r2, r6
 800d67c:	4643      	mov	r3, r8
 800d67e:	0029      	movs	r1, r5
 800d680:	0020      	movs	r0, r4
 800d682:	f7fe ffff 	bl	800c684 <acc_confprogram_patch_offset>
 800d686:	4652      	mov	r2, sl
 800d688:	23ff      	movs	r3, #255	; 0xff
 800d68a:	4313      	orrs	r3, r2
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	236f      	movs	r3, #111	; 0x6f
 800d692:	0032      	movs	r2, r6
 800d694:	9300      	str	r3, [sp, #0]
 800d696:	0029      	movs	r1, r5
 800d698:	4643      	mov	r3, r8
 800d69a:	0020      	movs	r0, r4
 800d69c:	f7fe fff2 	bl	800c684 <acc_confprogram_patch_offset>
 800d6a0:	9b07      	ldr	r3, [sp, #28]
 800d6a2:	0032      	movs	r2, r6
 800d6a4:	9301      	str	r3, [sp, #4]
 800d6a6:	235b      	movs	r3, #91	; 0x5b
 800d6a8:	0029      	movs	r1, r5
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	0020      	movs	r0, r4
 800d6ae:	4643      	mov	r3, r8
 800d6b0:	f7fe ffe8 	bl	800c684 <acc_confprogram_patch_offset>
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	235d      	movs	r3, #93	; 0x5d
 800d6ba:	0032      	movs	r2, r6
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	0029      	movs	r1, r5
 800d6c0:	4643      	mov	r3, r8
 800d6c2:	0020      	movs	r0, r4
 800d6c4:	f7fe ffde 	bl	800c684 <acc_confprogram_patch_offset>
 800d6c8:	9b04      	ldr	r3, [sp, #16]
 800d6ca:	0032      	movs	r2, r6
 800d6cc:	9301      	str	r3, [sp, #4]
 800d6ce:	235c      	movs	r3, #92	; 0x5c
 800d6d0:	0029      	movs	r1, r5
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	0020      	movs	r0, r4
 800d6d6:	4643      	mov	r3, r8
 800d6d8:	f7fe ffd4 	bl	800c684 <acc_confprogram_patch_offset>
 800d6dc:	23f0      	movs	r3, #240	; 0xf0
 800d6de:	4652      	mov	r2, sl
 800d6e0:	431a      	orrs	r2, r3
 800d6e2:	234a      	movs	r3, #74	; 0x4a
 800d6e4:	4691      	mov	r9, r2
 800d6e6:	9201      	str	r2, [sp, #4]
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	0032      	movs	r2, r6
 800d6ec:	4643      	mov	r3, r8
 800d6ee:	0029      	movs	r1, r5
 800d6f0:	0020      	movs	r0, r4
 800d6f2:	f7fe ffc7 	bl	800c684 <acc_confprogram_patch_offset>
 800d6f6:	464b      	mov	r3, r9
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	2345      	movs	r3, #69	; 0x45
 800d6fc:	0032      	movs	r2, r6
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	0029      	movs	r1, r5
 800d702:	4643      	mov	r3, r8
 800d704:	0020      	movs	r0, r4
 800d706:	f7fe ffbd 	bl	800c684 <acc_confprogram_patch_offset>
 800d70a:	9b04      	ldr	r3, [sp, #16]
 800d70c:	0032      	movs	r2, r6
 800d70e:	9301      	str	r3, [sp, #4]
 800d710:	2322      	movs	r3, #34	; 0x22
 800d712:	0029      	movs	r1, r5
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	0020      	movs	r0, r4
 800d718:	4643      	mov	r3, r8
 800d71a:	f7fe ffb3 	bl	800c684 <acc_confprogram_patch_offset>
 800d71e:	003b      	movs	r3, r7
 800d720:	3390      	adds	r3, #144	; 0x90
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	2364      	movs	r3, #100	; 0x64
 800d726:	2a05      	cmp	r2, #5
 800d728:	d800      	bhi.n	800d72c <acc_cpd_linear_sweep_load_program+0x58c>
 800d72a:	3b20      	subs	r3, #32
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	2305      	movs	r3, #5
 800d730:	0032      	movs	r2, r6
 800d732:	4699      	mov	r9, r3
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	0029      	movs	r1, r5
 800d738:	4643      	mov	r3, r8
 800d73a:	0020      	movs	r0, r4
 800d73c:	f7fe ffa2 	bl	800c684 <acc_confprogram_patch_offset>
 800d740:	2390      	movs	r3, #144	; 0x90
 800d742:	469a      	mov	sl, r3
 800d744:	44ba      	add	sl, r7
 800d746:	4653      	mov	r3, sl
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	0032      	movs	r2, r6
 800d74c:	015b      	lsls	r3, r3, #5
 800d74e:	3b03      	subs	r3, #3
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	2324      	movs	r3, #36	; 0x24
 800d754:	0029      	movs	r1, r5
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	0020      	movs	r0, r4
 800d75a:	4643      	mov	r3, r8
 800d75c:	f7fe ff92 	bl	800c684 <acc_confprogram_patch_offset>
 800d760:	4653      	mov	r3, sl
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	0032      	movs	r2, r6
 800d766:	015b      	lsls	r3, r3, #5
 800d768:	085b      	lsrs	r3, r3, #1
 800d76a:	3b03      	subs	r3, #3
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	2325      	movs	r3, #37	; 0x25
 800d770:	0029      	movs	r1, r5
 800d772:	9300      	str	r3, [sp, #0]
 800d774:	0020      	movs	r0, r4
 800d776:	4643      	mov	r3, r8
 800d778:	f7fe ff84 	bl	800c684 <acc_confprogram_patch_offset>
 800d77c:	003b      	movs	r3, r7
 800d77e:	3394      	adds	r3, #148	; 0x94
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	0032      	movs	r2, r6
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	2336      	movs	r3, #54	; 0x36
 800d788:	0029      	movs	r1, r5
 800d78a:	9300      	str	r3, [sp, #0]
 800d78c:	0020      	movs	r0, r4
 800d78e:	4643      	mov	r3, r8
 800d790:	f7fe ff78 	bl	800c684 <acc_confprogram_patch_offset>
 800d794:	003b      	movs	r3, r7
 800d796:	3398      	adds	r3, #152	; 0x98
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	0032      	movs	r2, r6
 800d79c:	330e      	adds	r3, #14
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	235e      	movs	r3, #94	; 0x5e
 800d7a2:	0029      	movs	r1, r5
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	0020      	movs	r0, r4
 800d7a8:	4643      	mov	r3, r8
 800d7aa:	f7fe ff6b 	bl	800c684 <acc_confprogram_patch_offset>
 800d7ae:	4653      	mov	r3, sl
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	469a      	mov	sl, r3
 800d7b4:	4599      	cmp	r9, r3
 800d7b6:	4180      	sbcs	r0, r0
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	4398      	bics	r0, r3
 800d7bc:	4b8d      	ldr	r3, [pc, #564]	; (800d9f4 <acc_cpd_linear_sweep_load_program+0x854>)
 800d7be:	4651      	mov	r1, sl
 800d7c0:	469c      	mov	ip, r3
 800d7c2:	4460      	add	r0, ip
 800d7c4:	f001 fa6a 	bl	800ec9c <__aeabi_uidivmod>
 800d7c8:	4688      	mov	r8, r1
 800d7ca:	2900      	cmp	r1, #0
 800d7cc:	d002      	beq.n	800d7d4 <acc_cpd_linear_sweep_load_program+0x634>
 800d7ce:	4653      	mov	r3, sl
 800d7d0:	1a5b      	subs	r3, r3, r1
 800d7d2:	4698      	mov	r8, r3
 800d7d4:	239c      	movs	r3, #156	; 0x9c
 800d7d6:	469a      	mov	sl, r3
 800d7d8:	44ba      	add	sl, r7
 800d7da:	4653      	mov	r3, sl
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	0032      	movs	r2, r6
 800d7e0:	4443      	add	r3, r8
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	4699      	mov	r9, r3
 800d7e6:	231f      	movs	r3, #31
 800d7e8:	0029      	movs	r1, r5
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	0020      	movs	r0, r4
 800d7ee:	4b80      	ldr	r3, [pc, #512]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d7f0:	f7fe ff48 	bl	800c684 <acc_confprogram_patch_offset>
 800d7f4:	4653      	mov	r3, sl
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d019      	beq.n	800d830 <acc_cpd_linear_sweep_load_program+0x690>
 800d7fc:	4b7e      	ldr	r3, [pc, #504]	; (800d9f8 <acc_cpd_linear_sweep_load_program+0x858>)
 800d7fe:	001a      	movs	r2, r3
 800d800:	3260      	adds	r2, #96	; 0x60
 800d802:	7812      	ldrb	r2, [r2, #0]
 800d804:	2a01      	cmp	r2, #1
 800d806:	d906      	bls.n	800d816 <acc_cpd_linear_sweep_load_program+0x676>
 800d808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d80a:	4a7c      	ldr	r2, [pc, #496]	; (800d9fc <acc_cpd_linear_sweep_load_program+0x85c>)
 800d80c:	469a      	mov	sl, r3
 800d80e:	497c      	ldr	r1, [pc, #496]	; (800da00 <acc_cpd_linear_sweep_load_program+0x860>)
 800d810:	4643      	mov	r3, r8
 800d812:	2002      	movs	r0, #2
 800d814:	47d0      	blx	sl
 800d816:	4b78      	ldr	r3, [pc, #480]	; (800d9f8 <acc_cpd_linear_sweep_load_program+0x858>)
 800d818:	001a      	movs	r2, r3
 800d81a:	3260      	adds	r2, #96	; 0x60
 800d81c:	7812      	ldrb	r2, [r2, #0]
 800d81e:	2a01      	cmp	r2, #1
 800d820:	d906      	bls.n	800d830 <acc_cpd_linear_sweep_load_program+0x690>
 800d822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d824:	4a77      	ldr	r2, [pc, #476]	; (800da04 <acc_cpd_linear_sweep_load_program+0x864>)
 800d826:	4698      	mov	r8, r3
 800d828:	4975      	ldr	r1, [pc, #468]	; (800da00 <acc_cpd_linear_sweep_load_program+0x860>)
 800d82a:	464b      	mov	r3, r9
 800d82c:	2002      	movs	r0, #2
 800d82e:	47c0      	blx	r8
 800d830:	003b      	movs	r3, r7
 800d832:	3390      	adds	r3, #144	; 0x90
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2008      	movs	r0, #8
 800d838:	4699      	mov	r9, r3
 800d83a:	2b05      	cmp	r3, #5
 800d83c:	d800      	bhi.n	800d840 <acc_cpd_linear_sweep_load_program+0x6a0>
 800d83e:	3002      	adds	r0, #2
 800d840:	4649      	mov	r1, r9
 800d842:	f001 fa2b 	bl	800ec9c <__aeabi_uidivmod>
 800d846:	4688      	mov	r8, r1
 800d848:	2900      	cmp	r1, #0
 800d84a:	d002      	beq.n	800d852 <acc_cpd_linear_sweep_load_program+0x6b2>
 800d84c:	464b      	mov	r3, r9
 800d84e:	1a5b      	subs	r3, r3, r1
 800d850:	4698      	mov	r8, r3
 800d852:	23a0      	movs	r3, #160	; 0xa0
 800d854:	469a      	mov	sl, r3
 800d856:	44ba      	add	sl, r7
 800d858:	4653      	mov	r3, sl
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	0032      	movs	r2, r6
 800d85e:	4443      	add	r3, r8
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	4699      	mov	r9, r3
 800d864:	2366      	movs	r3, #102	; 0x66
 800d866:	0029      	movs	r1, r5
 800d868:	9300      	str	r3, [sp, #0]
 800d86a:	0020      	movs	r0, r4
 800d86c:	4b60      	ldr	r3, [pc, #384]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d86e:	f7fe ff09 	bl	800c684 <acc_confprogram_patch_offset>
 800d872:	4653      	mov	r3, sl
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d019      	beq.n	800d8ae <acc_cpd_linear_sweep_load_program+0x70e>
 800d87a:	4b5f      	ldr	r3, [pc, #380]	; (800d9f8 <acc_cpd_linear_sweep_load_program+0x858>)
 800d87c:	001a      	movs	r2, r3
 800d87e:	3260      	adds	r2, #96	; 0x60
 800d880:	7812      	ldrb	r2, [r2, #0]
 800d882:	2a01      	cmp	r2, #1
 800d884:	d906      	bls.n	800d894 <acc_cpd_linear_sweep_load_program+0x6f4>
 800d886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d888:	4a5f      	ldr	r2, [pc, #380]	; (800da08 <acc_cpd_linear_sweep_load_program+0x868>)
 800d88a:	469a      	mov	sl, r3
 800d88c:	495c      	ldr	r1, [pc, #368]	; (800da00 <acc_cpd_linear_sweep_load_program+0x860>)
 800d88e:	4643      	mov	r3, r8
 800d890:	2002      	movs	r0, #2
 800d892:	47d0      	blx	sl
 800d894:	4b58      	ldr	r3, [pc, #352]	; (800d9f8 <acc_cpd_linear_sweep_load_program+0x858>)
 800d896:	001a      	movs	r2, r3
 800d898:	3260      	adds	r2, #96	; 0x60
 800d89a:	7812      	ldrb	r2, [r2, #0]
 800d89c:	2a01      	cmp	r2, #1
 800d89e:	d906      	bls.n	800d8ae <acc_cpd_linear_sweep_load_program+0x70e>
 800d8a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a2:	4a5a      	ldr	r2, [pc, #360]	; (800da0c <acc_cpd_linear_sweep_load_program+0x86c>)
 800d8a4:	4698      	mov	r8, r3
 800d8a6:	4956      	ldr	r1, [pc, #344]	; (800da00 <acc_cpd_linear_sweep_load_program+0x860>)
 800d8a8:	464b      	mov	r3, r9
 800d8aa:	2002      	movs	r0, #2
 800d8ac:	47c0      	blx	r8
 800d8ae:	003b      	movs	r3, r7
 800d8b0:	338d      	adds	r3, #141	; 0x8d
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d014      	beq.n	800d8e2 <acc_cpd_linear_sweep_load_program+0x742>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	9301      	str	r3, [sp, #4]
 800d8bc:	333b      	adds	r3, #59	; 0x3b
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	0032      	movs	r2, r6
 800d8c2:	4b4b      	ldr	r3, [pc, #300]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d8c4:	0029      	movs	r1, r5
 800d8c6:	0020      	movs	r0, r4
 800d8c8:	f7fe fedc 	bl	800c684 <acc_confprogram_patch_offset>
 800d8cc:	4b4a      	ldr	r3, [pc, #296]	; (800d9f8 <acc_cpd_linear_sweep_load_program+0x858>)
 800d8ce:	001a      	movs	r2, r3
 800d8d0:	3260      	adds	r2, #96	; 0x60
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	2a01      	cmp	r2, #1
 800d8d6:	d904      	bls.n	800d8e2 <acc_cpd_linear_sweep_load_program+0x742>
 800d8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8da:	4a4d      	ldr	r2, [pc, #308]	; (800da10 <acc_cpd_linear_sweep_load_program+0x870>)
 800d8dc:	4948      	ldr	r1, [pc, #288]	; (800da00 <acc_cpd_linear_sweep_load_program+0x860>)
 800d8de:	2002      	movs	r0, #2
 800d8e0:	4798      	blx	r3
 800d8e2:	003b      	movs	r3, r7
 800d8e4:	33a4      	adds	r3, #164	; 0xa4
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	0032      	movs	r2, r6
 800d8ea:	4699      	mov	r9, r3
 800d8ec:	4b40      	ldr	r3, [pc, #256]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d8ee:	0029      	movs	r1, r5
 800d8f0:	4698      	mov	r8, r3
 800d8f2:	464b      	mov	r3, r9
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	2306      	movs	r3, #6
 800d8fa:	0020      	movs	r0, r4
 800d8fc:	9300      	str	r3, [sp, #0]
 800d8fe:	4643      	mov	r3, r8
 800d900:	f7fe fec0 	bl	800c684 <acc_confprogram_patch_offset>
 800d904:	4649      	mov	r1, r9
 800d906:	2004      	movs	r0, #4
 800d908:	f001 f942 	bl	800eb90 <__udivsi3>
 800d90c:	2363      	movs	r3, #99	; 0x63
 800d90e:	3801      	subs	r0, #1
 800d910:	9001      	str	r0, [sp, #4]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	0032      	movs	r2, r6
 800d916:	4643      	mov	r3, r8
 800d918:	0029      	movs	r1, r5
 800d91a:	0020      	movs	r0, r4
 800d91c:	f7fe feb2 	bl	800c684 <acc_confprogram_patch_offset>
 800d920:	003b      	movs	r3, r7
 800d922:	33a8      	adds	r3, #168	; 0xa8
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	0032      	movs	r2, r6
 800d928:	9301      	str	r3, [sp, #4]
 800d92a:	2361      	movs	r3, #97	; 0x61
 800d92c:	0029      	movs	r1, r5
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	0020      	movs	r0, r4
 800d932:	4643      	mov	r3, r8
 800d934:	f7fe fea6 	bl	800c684 <acc_confprogram_patch_offset>
 800d938:	23ad      	movs	r3, #173	; 0xad
 800d93a:	4699      	mov	r9, r3
 800d93c:	44b9      	add	r9, r7
 800d93e:	464b      	mov	r3, r9
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	0032      	movs	r2, r6
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	2346      	movs	r3, #70	; 0x46
 800d948:	0029      	movs	r1, r5
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	0020      	movs	r0, r4
 800d94e:	4643      	mov	r3, r8
 800d950:	f7fe fe98 	bl	800c684 <acc_confprogram_patch_offset>
 800d954:	464b      	mov	r3, r9
 800d956:	781a      	ldrb	r2, [r3, #0]
 800d958:	2323      	movs	r3, #35	; 0x23
 800d95a:	2a00      	cmp	r2, #0
 800d95c:	d100      	bne.n	800d960 <acc_cpd_linear_sweep_load_program+0x7c0>
 800d95e:	e09d      	b.n	800da9c <acc_cpd_linear_sweep_load_program+0x8fc>
 800d960:	2203      	movs	r2, #3
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	9201      	str	r2, [sp, #4]
 800d966:	4643      	mov	r3, r8
 800d968:	0032      	movs	r2, r6
 800d96a:	0029      	movs	r1, r5
 800d96c:	0020      	movs	r0, r4
 800d96e:	f7fe fe89 	bl	800c684 <acc_confprogram_patch_offset>
 800d972:	2300      	movs	r3, #0
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	337d      	adds	r3, #125	; 0x7d
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	0032      	movs	r2, r6
 800d97c:	4643      	mov	r3, r8
 800d97e:	0029      	movs	r1, r5
 800d980:	0020      	movs	r0, r4
 800d982:	f7fe fe7f 	bl	800c684 <acc_confprogram_patch_offset>
 800d986:	2301      	movs	r3, #1
 800d988:	9301      	str	r3, [sp, #4]
 800d98a:	3380      	adds	r3, #128	; 0x80
 800d98c:	9300      	str	r3, [sp, #0]
 800d98e:	0032      	movs	r2, r6
 800d990:	4643      	mov	r3, r8
 800d992:	0029      	movs	r1, r5
 800d994:	0020      	movs	r0, r4
 800d996:	f7fe fe75 	bl	800c684 <acc_confprogram_patch_offset>
 800d99a:	2302      	movs	r3, #2
 800d99c:	9301      	str	r3, [sp, #4]
 800d99e:	3373      	adds	r3, #115	; 0x73
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	0032      	movs	r2, r6
 800d9a4:	4643      	mov	r3, r8
 800d9a6:	0029      	movs	r1, r5
 800d9a8:	0020      	movs	r0, r4
 800d9aa:	f7fe fe6b 	bl	800c684 <acc_confprogram_patch_offset>
 800d9ae:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <acc_cpd_linear_sweep_load_program+0x850>)
 800d9b0:	0032      	movs	r2, r6
 800d9b2:	4698      	mov	r8, r3
 800d9b4:	003b      	movs	r3, r7
 800d9b6:	33ac      	adds	r3, #172	; 0xac
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	0029      	movs	r1, r5
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	2352      	movs	r3, #82	; 0x52
 800d9c0:	0020      	movs	r0, r4
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	4643      	mov	r3, r8
 800d9c6:	f7fe fe5d 	bl	800c684 <acc_confprogram_patch_offset>
 800d9ca:	003b      	movs	r3, r7
 800d9cc:	33b0      	adds	r3, #176	; 0xb0
 800d9ce:	6818      	ldr	r0, [r3, #0]
 800d9d0:	4910      	ldr	r1, [pc, #64]	; (800da14 <acc_cpd_linear_sweep_load_program+0x874>)
 800d9d2:	f000 fdab 	bl	800e52c <__aeabi_fmul>
 800d9d6:	f001 fae9 	bl	800efac <__aeabi_f2uiz>
 800d9da:	2368      	movs	r3, #104	; 0x68
 800d9dc:	3801      	subs	r0, #1
 800d9de:	b280      	uxth	r0, r0
 800d9e0:	9001      	str	r0, [sp, #4]
 800d9e2:	9300      	str	r3, [sp, #0]
 800d9e4:	0032      	movs	r2, r6
 800d9e6:	4643      	mov	r3, r8
 800d9e8:	0029      	movs	r1, r5
 800d9ea:	0020      	movs	r0, r4
 800d9ec:	e014      	b.n	800da18 <acc_cpd_linear_sweep_load_program+0x878>
 800d9ee:	46c0      	nop			; (mov r8, r8)
 800d9f0:	0801999c 	.word	0x0801999c
 800d9f4:	000004e4 	.word	0x000004e4
 800d9f8:	200003c0 	.word	0x200003c0
 800d9fc:	0801e067 	.word	0x0801e067
 800da00:	0801c871 	.word	0x0801c871
 800da04:	0801e09e 	.word	0x0801e09e
 800da08:	0801e0d5 	.word	0x0801e0d5
 800da0c:	0801e0fa 	.word	0x0801e0fa
 800da10:	0801e11f 	.word	0x0801e11f
 800da14:	3751b717 	.word	0x3751b717
 800da18:	f7fe fe34 	bl	800c684 <acc_confprogram_patch_offset>
 800da1c:	23b4      	movs	r3, #180	; 0xb4
 800da1e:	4699      	mov	r9, r3
 800da20:	44b9      	add	r9, r7
 800da22:	464b      	mov	r3, r9
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	0032      	movs	r2, r6
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	2353      	movs	r3, #83	; 0x53
 800da2c:	0029      	movs	r1, r5
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	0020      	movs	r0, r4
 800da32:	4643      	mov	r3, r8
 800da34:	f7fe fe26 	bl	800c684 <acc_confprogram_patch_offset>
 800da38:	464b      	mov	r3, r9
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d00b      	beq.n	800da58 <acc_cpd_linear_sweep_load_program+0x8b8>
 800da40:	003b      	movs	r3, r7
 800da42:	33b8      	adds	r3, #184	; 0xb8
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	0032      	movs	r2, r6
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	2332      	movs	r3, #50	; 0x32
 800da4c:	0029      	movs	r1, r5
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	0020      	movs	r0, r4
 800da52:	4643      	mov	r3, r8
 800da54:	f7fe fe16 	bl	800c684 <acc_confprogram_patch_offset>
 800da58:	466b      	mov	r3, sp
 800da5a:	9a08      	ldr	r2, [sp, #32]
 800da5c:	8b19      	ldrh	r1, [r3, #24]
 800da5e:	9805      	ldr	r0, [sp, #20]
 800da60:	9b03      	ldr	r3, [sp, #12]
 800da62:	f7f8 fb31 	bl	80060c8 <acc_sensor_r2_load_confmem>
 800da66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da68:	469c      	mov	ip, r3
 800da6a:	4b0d      	ldr	r3, [pc, #52]	; (800daa0 <acc_cpd_linear_sweep_load_program+0x900>)
 800da6c:	44e3      	add	fp, ip
 800da6e:	459b      	cmp	fp, r3
 800da70:	d801      	bhi.n	800da76 <acc_cpd_linear_sweep_load_program+0x8d6>
 800da72:	f7ff fbc8 	bl	800d206 <acc_cpd_linear_sweep_load_program+0x66>
 800da76:	4b0b      	ldr	r3, [pc, #44]	; (800daa4 <acc_cpd_linear_sweep_load_program+0x904>)
 800da78:	001a      	movs	r2, r3
 800da7a:	3260      	adds	r2, #96	; 0x60
 800da7c:	7812      	ldrb	r2, [r2, #0]
 800da7e:	2a03      	cmp	r2, #3
 800da80:	d904      	bls.n	800da8c <acc_cpd_linear_sweep_load_program+0x8ec>
 800da82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da84:	4a08      	ldr	r2, [pc, #32]	; (800daa8 <acc_cpd_linear_sweep_load_program+0x908>)
 800da86:	4909      	ldr	r1, [pc, #36]	; (800daac <acc_cpd_linear_sweep_load_program+0x90c>)
 800da88:	2004      	movs	r0, #4
 800da8a:	4798      	blx	r3
 800da8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da8e:	b00f      	add	sp, #60	; 0x3c
 800da90:	bc3c      	pop	{r2, r3, r4, r5}
 800da92:	4690      	mov	r8, r2
 800da94:	4699      	mov	r9, r3
 800da96:	46a2      	mov	sl, r4
 800da98:	46ab      	mov	fp, r5
 800da9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	e77f      	b.n	800d9a0 <acc_cpd_linear_sweep_load_program+0x800>
 800daa0:	0000070f 	.word	0x0000070f
 800daa4:	200003c0 	.word	0x200003c0
 800daa8:	0801e139 	.word	0x0801e139
 800daac:	0801c871 	.word	0x0801c871

0800dab0 <acc_probes_execute_primitive_probe>:
 800dab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dab2:	9102      	str	r1, [sp, #8]
 800dab4:	2100      	movs	r1, #0
 800dab6:	ab01      	add	r3, sp, #4
 800dab8:	7018      	strb	r0, [r3, #0]
 800daba:	000a      	movs	r2, r1
 800dabc:	0018      	movs	r0, r3
 800dabe:	9103      	str	r1, [sp, #12]
 800dac0:	f7ff fb60 	bl	800d184 <acc_probes_execute>
 800dac4:	b005      	add	sp, #20
 800dac6:	bd00      	pop	{pc}

0800dac8 <acc_probes_execute_uint16>:
 800dac8:	b530      	push	{r4, r5, lr}
 800daca:	000c      	movs	r4, r1
 800dacc:	0011      	movs	r1, r2
 800dace:	2201      	movs	r2, #1
 800dad0:	0005      	movs	r5, r0
 800dad2:	b085      	sub	sp, #20
 800dad4:	a801      	add	r0, sp, #4
 800dad6:	6082      	str	r2, [r0, #8]
 800dad8:	005a      	lsls	r2, r3, #1
 800dada:	7005      	strb	r5, [r0, #0]
 800dadc:	6044      	str	r4, [r0, #4]
 800dade:	f7ff fb51 	bl	800d184 <acc_probes_execute>
 800dae2:	b005      	add	sp, #20
 800dae4:	bd30      	pop	{r4, r5, pc}

0800dae6 <acc_cpd_cbank_and_vana_calibration>:
 800dae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dae8:	4657      	mov	r7, sl
 800daea:	46de      	mov	lr, fp
 800daec:	4645      	mov	r5, r8
 800daee:	464e      	mov	r6, r9
 800daf0:	b5e0      	push	{r5, r6, r7, lr}
 800daf2:	0015      	movs	r5, r2
 800daf4:	2400      	movs	r4, #0
 800daf6:	b089      	sub	sp, #36	; 0x24
 800daf8:	469a      	mov	sl, r3
 800dafa:	ab07      	add	r3, sp, #28
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	9003      	str	r0, [sp, #12]
 800db00:	9104      	str	r1, [sp, #16]
 800db02:	000a      	movs	r2, r1
 800db04:	ab06      	add	r3, sp, #24
 800db06:	0001      	movs	r1, r0
 800db08:	6828      	ldr	r0, [r5, #0]
 800db0a:	9406      	str	r4, [sp, #24]
 800db0c:	9407      	str	r4, [sp, #28]
 800db0e:	f7ff fa7b 	bl	800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800db12:	0007      	movs	r7, r0
 800db14:	42a0      	cmp	r0, r4
 800db16:	d10c      	bne.n	800db32 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800db18:	4bb0      	ldr	r3, [pc, #704]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800db1a:	4ab1      	ldr	r2, [pc, #708]	; (800dde0 <acc_cpd_cbank_and_vana_calibration+0x2fa>)
 800db1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db1e:	49b1      	ldr	r1, [pc, #708]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800db20:	4798      	blx	r3
 800db22:	0038      	movs	r0, r7
 800db24:	b009      	add	sp, #36	; 0x24
 800db26:	bc3c      	pop	{r2, r3, r4, r5}
 800db28:	4690      	mov	r8, r2
 800db2a:	4699      	mov	r9, r3
 800db2c:	46a2      	mov	sl, r4
 800db2e:	46ab      	mov	fp, r5
 800db30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db32:	4bad      	ldr	r3, [pc, #692]	; (800dde8 <acc_cpd_cbank_and_vana_calibration+0x302>)
 800db34:	9a07      	ldr	r2, [sp, #28]
 800db36:	9f06      	ldr	r7, [sp, #24]
 800db38:	1b1b      	subs	r3, r3, r4
 800db3a:	4690      	mov	r8, r2
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d900      	bls.n	800db42 <acc_cpd_cbank_and_vana_calibration+0x5c>
 800db40:	4698      	mov	r8, r3
 800db42:	0863      	lsrs	r3, r4, #1
 800db44:	9302      	str	r3, [sp, #8]
 800db46:	4643      	mov	r3, r8
 800db48:	085a      	lsrs	r2, r3, #1
 800db4a:	0863      	lsrs	r3, r4, #1
 800db4c:	0098      	lsls	r0, r3, #2
 800db4e:	4ba7      	ldr	r3, [pc, #668]	; (800ddec <acc_cpd_cbank_and_vana_calibration+0x306>)
 800db50:	0039      	movs	r1, r7
 800db52:	469c      	mov	ip, r3
 800db54:	4460      	add	r0, ip
 800db56:	f7fe fd4d 	bl	800c5f4 <acc_confprogram_copy>
 800db5a:	b2a3      	uxth	r3, r4
 800db5c:	4699      	mov	r9, r3
 800db5e:	4643      	mov	r3, r8
 800db60:	b29b      	uxth	r3, r3
 800db62:	469b      	mov	fp, r3
 800db64:	686b      	ldr	r3, [r5, #4]
 800db66:	4ea2      	ldr	r6, [pc, #648]	; (800ddf0 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	231b      	movs	r3, #27
 800db6c:	465a      	mov	r2, fp
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4649      	mov	r1, r9
 800db72:	0033      	movs	r3, r6
 800db74:	0038      	movs	r0, r7
 800db76:	f7fe fd85 	bl	800c684 <acc_confprogram_patch_offset>
 800db7a:	68ab      	ldr	r3, [r5, #8]
 800db7c:	465a      	mov	r2, fp
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	2319      	movs	r3, #25
 800db82:	4649      	mov	r1, r9
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	0038      	movs	r0, r7
 800db88:	0033      	movs	r3, r6
 800db8a:	f7fe fd7b 	bl	800c684 <acc_confprogram_patch_offset>
 800db8e:	68eb      	ldr	r3, [r5, #12]
 800db90:	465a      	mov	r2, fp
 800db92:	9301      	str	r3, [sp, #4]
 800db94:	231a      	movs	r3, #26
 800db96:	4649      	mov	r1, r9
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	0038      	movs	r0, r7
 800db9c:	0033      	movs	r3, r6
 800db9e:	f7fe fd71 	bl	800c684 <acc_confprogram_patch_offset>
 800dba2:	8a2b      	ldrh	r3, [r5, #16]
 800dba4:	465a      	mov	r2, fp
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	2317      	movs	r3, #23
 800dbaa:	4649      	mov	r1, r9
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	0038      	movs	r0, r7
 800dbb0:	0033      	movs	r3, r6
 800dbb2:	f7fe fd67 	bl	800c684 <acc_confprogram_patch_offset>
 800dbb6:	2310      	movs	r3, #16
 800dbb8:	9301      	str	r3, [sp, #4]
 800dbba:	2300      	movs	r3, #0
 800dbbc:	465a      	mov	r2, fp
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4649      	mov	r1, r9
 800dbc2:	0033      	movs	r3, r6
 800dbc4:	0038      	movs	r0, r7
 800dbc6:	f7fe fd5d 	bl	800c684 <acc_confprogram_patch_offset>
 800dbca:	466b      	mov	r3, sp
 800dbcc:	9a03      	ldr	r2, [sp, #12]
 800dbce:	8919      	ldrh	r1, [r3, #8]
 800dbd0:	6828      	ldr	r0, [r5, #0]
 800dbd2:	4643      	mov	r3, r8
 800dbd4:	f7f8 fa78 	bl	80060c8 <acc_sensor_r2_load_confmem>
 800dbd8:	9b07      	ldr	r3, [sp, #28]
 800dbda:	469c      	mov	ip, r3
 800dbdc:	4b85      	ldr	r3, [pc, #532]	; (800ddf4 <acc_cpd_cbank_and_vana_calibration+0x30e>)
 800dbde:	4464      	add	r4, ip
 800dbe0:	429c      	cmp	r4, r3
 800dbe2:	d9a6      	bls.n	800db32 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800dbe4:	2118      	movs	r1, #24
 800dbe6:	6828      	ldr	r0, [r5, #0]
 800dbe8:	f7f8 f879 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 800dbec:	1e07      	subs	r7, r0, #0
 800dbee:	d105      	bne.n	800dbfc <acc_cpd_cbank_and_vana_calibration+0x116>
 800dbf0:	4b7a      	ldr	r3, [pc, #488]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dbf2:	4a81      	ldr	r2, [pc, #516]	; (800ddf8 <acc_cpd_cbank_and_vana_calibration+0x312>)
 800dbf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf6:	497b      	ldr	r1, [pc, #492]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dbf8:	4798      	blx	r3
 800dbfa:	e792      	b.n	800db22 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dbfc:	21fa      	movs	r1, #250	; 0xfa
 800dbfe:	682f      	ldr	r7, [r5, #0]
 800dc00:	2300      	movs	r3, #0
 800dc02:	2203      	movs	r2, #3
 800dc04:	00c9      	lsls	r1, r1, #3
 800dc06:	0038      	movs	r0, r7
 800dc08:	f7f8 f82c 	bl	8005c64 <acc_sensor_protocol_r2_wait_for_specific_event>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d04b      	beq.n	800dca8 <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800dc10:	ac07      	add	r4, sp, #28
 800dc12:	0022      	movs	r2, r4
 800dc14:	219d      	movs	r1, #157	; 0x9d
 800dc16:	0038      	movs	r0, r7
 800dc18:	f7fe feba 	bl	800c990 <internal_reg_read.lto_priv.618>
 800dc1c:	2207      	movs	r2, #7
 800dc1e:	8823      	ldrh	r3, [r4, #0]
 800dc20:	2006      	movs	r0, #6
 800dc22:	4013      	ands	r3, r2
 800dc24:	8023      	strh	r3, [r4, #0]
 800dc26:	0022      	movs	r2, r4
 800dc28:	2301      	movs	r3, #1
 800dc2a:	0039      	movs	r1, r7
 800dc2c:	f7ff ff4c 	bl	800dac8 <acc_probes_execute_uint16>
 800dc30:	0038      	movs	r0, r7
 800dc32:	f7f7 fc03 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d036      	beq.n	800dca8 <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800dc3a:	4653      	mov	r3, sl
 800dc3c:	8827      	ldrh	r7, [r4, #0]
 800dc3e:	601f      	str	r7, [r3, #0]
 800dc40:	23c0      	movs	r3, #192	; 0xc0
 800dc42:	682d      	ldr	r5, [r5, #0]
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	8023      	strh	r3, [r4, #0]
 800dc48:	0028      	movs	r0, r5
 800dc4a:	f7f8 f83b 	bl	8005cc4 <acc_sensor_protocol_r2_is_sensor_running>
 800dc4e:	4680      	mov	r8, r0
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d131      	bne.n	800dcb8 <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800dc54:	0032      	movs	r2, r6
 800dc56:	2311      	movs	r3, #17
 800dc58:	4964      	ldr	r1, [pc, #400]	; (800ddec <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dc5a:	0028      	movs	r0, r5
 800dc5c:	9700      	str	r7, [sp, #0]
 800dc5e:	f7fd f833 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800dc62:	4643      	mov	r3, r8
 800dc64:	0032      	movs	r2, r6
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4960      	ldr	r1, [pc, #384]	; (800ddec <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	0028      	movs	r0, r5
 800dc6e:	f7fd f82b 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800dc72:	23c8      	movs	r3, #200	; 0xc8
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4646      	mov	r6, r8
 800dc78:	469b      	mov	fp, r3
 800dc7a:	5da3      	ldrb	r3, [r4, r6]
 800dc7c:	495b      	ldr	r1, [pc, #364]	; (800ddec <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	0028      	movs	r0, r5
 800dc82:	4698      	mov	r8, r3
 800dc84:	4a5a      	ldr	r2, [pc, #360]	; (800ddf0 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800dc86:	231f      	movs	r3, #31
 800dc88:	f7fd f81e 	bl	800acc8 <acc_confprogram_live_patch.constprop.16>
 800dc8c:	21e8      	movs	r1, #232	; 0xe8
 800dc8e:	0028      	movs	r0, r5
 800dc90:	0049      	lsls	r1, r1, #1
 800dc92:	f7f8 f824 	bl	8005cde <acc_sensor_protocol_r2_run_program>
 800dc96:	2800      	cmp	r0, #0
 800dc98:	d11d      	bne.n	800dcd6 <acc_cpd_cbank_and_vana_calibration+0x1f0>
 800dc9a:	4b50      	ldr	r3, [pc, #320]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc9c:	4a57      	ldr	r2, [pc, #348]	; (800ddfc <acc_cpd_cbank_and_vana_calibration+0x316>)
 800dc9e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dca0:	4950      	ldr	r1, [pc, #320]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dca2:	4643      	mov	r3, r8
 800dca4:	47a0      	blx	r4
 800dca6:	e00e      	b.n	800dcc6 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800dca8:	4b4c      	ldr	r3, [pc, #304]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dcaa:	4a55      	ldr	r2, [pc, #340]	; (800de00 <acc_cpd_cbank_and_vana_calibration+0x31a>)
 800dcac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcae:	494d      	ldr	r1, [pc, #308]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	4798      	blx	r3
 800dcb4:	2700      	movs	r7, #0
 800dcb6:	e734      	b.n	800db22 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dcb8:	4b48      	ldr	r3, [pc, #288]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dcba:	4a52      	ldr	r2, [pc, #328]	; (800de04 <acc_cpd_cbank_and_vana_calibration+0x31e>)
 800dcbc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dcbe:	4949      	ldr	r1, [pc, #292]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dcc0:	002b      	movs	r3, r5
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	47a0      	blx	r4
 800dcc6:	4b45      	ldr	r3, [pc, #276]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dcc8:	4a4f      	ldr	r2, [pc, #316]	; (800de08 <acc_cpd_cbank_and_vana_calibration+0x322>)
 800dcca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dccc:	4945      	ldr	r1, [pc, #276]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dcce:	2000      	movs	r0, #0
 800dcd0:	4798      	blx	r3
 800dcd2:	2700      	movs	r7, #0
 800dcd4:	e725      	b.n	800db22 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dcd6:	21fa      	movs	r1, #250	; 0xfa
 800dcd8:	2300      	movs	r3, #0
 800dcda:	2209      	movs	r2, #9
 800dcdc:	00c9      	lsls	r1, r1, #3
 800dcde:	0028      	movs	r0, r5
 800dce0:	f7f7 ffc0 	bl	8005c64 <acc_sensor_protocol_r2_wait_for_specific_event>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d008      	beq.n	800dcfa <acc_cpd_cbank_and_vana_calibration+0x214>
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	2b25      	cmp	r3, #37	; 0x25
 800dcec:	d80d      	bhi.n	800dd0a <acc_cpd_cbank_and_vana_calibration+0x224>
 800dcee:	4b3b      	ldr	r3, [pc, #236]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dcf0:	4a46      	ldr	r2, [pc, #280]	; (800de0c <acc_cpd_cbank_and_vana_calibration+0x326>)
 800dcf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcf4:	493b      	ldr	r1, [pc, #236]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	4798      	blx	r3
 800dcfa:	4b38      	ldr	r3, [pc, #224]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dcfc:	4a44      	ldr	r2, [pc, #272]	; (800de10 <acc_cpd_cbank_and_vana_calibration+0x32a>)
 800dcfe:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dd00:	4938      	ldr	r1, [pc, #224]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dd02:	4643      	mov	r3, r8
 800dd04:	2000      	movs	r0, #0
 800dd06:	47a0      	blx	r4
 800dd08:	e7dd      	b.n	800dcc6 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800dd0a:	2210      	movs	r2, #16
 800dd0c:	9903      	ldr	r1, [sp, #12]
 800dd0e:	0028      	movs	r0, r5
 800dd10:	f7fc ff78 	bl	800ac04 <internal_buffer_processed_read.constprop.30>
 800dd14:	2310      	movs	r3, #16
 800dd16:	0002      	movs	r2, r0
 800dd18:	0007      	movs	r7, r0
 800dd1a:	0029      	movs	r1, r5
 800dd1c:	2000      	movs	r0, #0
 800dd1e:	f7ff fed3 	bl	800dac8 <acc_probes_execute_uint16>
 800dd22:	0028      	movs	r0, r5
 800dd24:	f7f7 fb8a 	bl	800543c <acc_sensor_protocol_r2_ack_event>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d0e6      	beq.n	800dcfa <acc_cpd_cbank_and_vana_calibration+0x214>
 800dd2c:	231e      	movs	r3, #30
 800dd2e:	469c      	mov	ip, r3
 800dd30:	44bc      	add	ip, r7
 800dd32:	4663      	mov	r3, ip
 800dd34:	9305      	str	r3, [sp, #20]
 800dd36:	2300      	movs	r3, #0
 800dd38:	003a      	movs	r2, r7
 800dd3a:	9302      	str	r3, [sp, #8]
 800dd3c:	9802      	ldr	r0, [sp, #8]
 800dd3e:	8851      	ldrh	r1, [r2, #2]
 800dd40:	4684      	mov	ip, r0
 800dd42:	448c      	add	ip, r1
 800dd44:	4660      	mov	r0, ip
 800dd46:	9002      	str	r0, [sp, #8]
 800dd48:	8810      	ldrh	r0, [r2, #0]
 800dd4a:	4681      	mov	r9, r0
 800dd4c:	1a08      	subs	r0, r1, r0
 800dd4e:	4684      	mov	ip, r0
 800dd50:	4549      	cmp	r1, r9
 800dd52:	d202      	bcs.n	800dd5a <acc_cpd_cbank_and_vana_calibration+0x274>
 800dd54:	4648      	mov	r0, r9
 800dd56:	1a41      	subs	r1, r0, r1
 800dd58:	468c      	mov	ip, r1
 800dd5a:	4563      	cmp	r3, ip
 800dd5c:	d200      	bcs.n	800dd60 <acc_cpd_cbank_and_vana_calibration+0x27a>
 800dd5e:	4663      	mov	r3, ip
 800dd60:	9905      	ldr	r1, [sp, #20]
 800dd62:	3202      	adds	r2, #2
 800dd64:	4291      	cmp	r1, r2
 800dd66:	d1e9      	bne.n	800dd3c <acc_cpd_cbank_and_vana_calibration+0x256>
 800dd68:	883a      	ldrh	r2, [r7, #0]
 800dd6a:	9902      	ldr	r1, [sp, #8]
 800dd6c:	2700      	movs	r7, #0
 800dd6e:	1850      	adds	r0, r2, r1
 800dd70:	4a28      	ldr	r2, [pc, #160]	; (800de14 <acc_cpd_cbank_and_vana_calibration+0x32e>)
 800dd72:	0900      	lsrs	r0, r0, #4
 800dd74:	1882      	adds	r2, r0, r2
 800dd76:	4928      	ldr	r1, [pc, #160]	; (800de18 <acc_cpd_cbank_and_vana_calibration+0x332>)
 800dd78:	b292      	uxth	r2, r2
 800dd7a:	428a      	cmp	r2, r1
 800dd7c:	d803      	bhi.n	800dd86 <acc_cpd_cbank_and_vana_calibration+0x2a0>
 800dd7e:	465a      	mov	r2, fp
 800dd80:	429a      	cmp	r2, r3
 800dd82:	417f      	adcs	r7, r7
 800dd84:	b2ff      	uxtb	r7, r7
 800dd86:	4a15      	ldr	r2, [pc, #84]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dd88:	0011      	movs	r1, r2
 800dd8a:	3160      	adds	r1, #96	; 0x60
 800dd8c:	7809      	ldrb	r1, [r1, #0]
 800dd8e:	2903      	cmp	r1, #3
 800dd90:	d909      	bls.n	800dda6 <acc_cpd_cbank_and_vana_calibration+0x2c0>
 800dd92:	b280      	uxth	r0, r0
 800dd94:	9000      	str	r0, [sp, #0]
 800dd96:	9301      	str	r3, [sp, #4]
 800dd98:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800dd9a:	4912      	ldr	r1, [pc, #72]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dd9c:	4699      	mov	r9, r3
 800dd9e:	4a1f      	ldr	r2, [pc, #124]	; (800de1c <acc_cpd_cbank_and_vana_calibration+0x336>)
 800dda0:	002b      	movs	r3, r5
 800dda2:	2004      	movs	r0, #4
 800dda4:	47c8      	blx	r9
 800dda6:	2f00      	cmp	r7, #0
 800dda8:	d013      	beq.n	800ddd2 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800ddaa:	4653      	mov	r3, sl
 800ddac:	4642      	mov	r2, r8
 800ddae:	711a      	strb	r2, [r3, #4]
 800ddb0:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800ddb2:	001a      	movs	r2, r3
 800ddb4:	3260      	adds	r2, #96	; 0x60
 800ddb6:	7812      	ldrb	r2, [r2, #0]
 800ddb8:	2a01      	cmp	r2, #1
 800ddba:	d800      	bhi.n	800ddbe <acc_cpd_cbank_and_vana_calibration+0x2d8>
 800ddbc:	e6b1      	b.n	800db22 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800ddbe:	4642      	mov	r2, r8
 800ddc0:	9200      	str	r2, [sp, #0]
 800ddc2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800ddc4:	4653      	mov	r3, sl
 800ddc6:	4a16      	ldr	r2, [pc, #88]	; (800de20 <acc_cpd_cbank_and_vana_calibration+0x33a>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4906      	ldr	r1, [pc, #24]	; (800dde4 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800ddcc:	2002      	movs	r0, #2
 800ddce:	47a0      	blx	r4
 800ddd0:	e6a7      	b.n	800db22 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800ddd2:	2e01      	cmp	r6, #1
 800ddd4:	d100      	bne.n	800ddd8 <acc_cpd_cbank_and_vana_calibration+0x2f2>
 800ddd6:	e776      	b.n	800dcc6 <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800ddd8:	2601      	movs	r6, #1
 800ddda:	e74e      	b.n	800dc7a <acc_cpd_cbank_and_vana_calibration+0x194>
 800dddc:	200003c0 	.word	0x200003c0
 800dde0:	0801e15c 	.word	0x0801e15c
 800dde4:	0801e19d 	.word	0x0801e19d
 800dde8:	00000572 	.word	0x00000572
 800ddec:	0801a064 	.word	0x0801a064
 800ddf0:	08019874 	.word	0x08019874
 800ddf4:	00000571 	.word	0x00000571
 800ddf8:	0801e1bc 	.word	0x0801e1bc
 800ddfc:	0801e206 	.word	0x0801e206
 800de00:	0801e1ee 	.word	0x0801e1ee
 800de04:	0801d422 	.word	0x0801d422
 800de08:	0801e28f 	.word	0x0801e28f
 800de0c:	0801d16a 	.word	0x0801d16a
 800de10:	0801e264 	.word	0x0801e264
 800de14:	ffff86e8 	.word	0xffff86e8
 800de18:	00000bb8 	.word	0x00000bb8
 800de1c:	0801e246 	.word	0x0801e246
 800de20:	0801e2a6 	.word	0x0801e2a6

0800de24 <acc_element_source_adc_inject_data>:
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	0004      	movs	r4, r0
 800de28:	0015      	movs	r5, r2
 800de2a:	6940      	ldr	r0, [r0, #20]
 800de2c:	f007 fc3a 	bl	80156a4 <memcpy>
 800de30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de32:	4a05      	ldr	r2, [pc, #20]	; (800de48 <acc_element_source_adc_inject_data+0x24>)
 800de34:	601d      	str	r5, [r3, #0]
 800de36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de38:	6820      	ldr	r0, [r4, #0]
 800de3a:	601a      	str	r2, [r3, #0]
 800de3c:	2200      	movs	r2, #0
 800de3e:	6a23      	ldr	r3, [r4, #32]
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	6843      	ldr	r3, [r0, #4]
 800de44:	4798      	blx	r3
 800de46:	bd70      	pop	{r4, r5, r6, pc}
 800de48:	51645c3c 	.word	0x51645c3c

0800de4c <acc_element_source_adc_produce>:
 800de4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4e:	4645      	mov	r5, r8
 800de50:	46de      	mov	lr, fp
 800de52:	4657      	mov	r7, sl
 800de54:	464e      	mov	r6, r9
 800de56:	b5e0      	push	{r5, r6, r7, lr}
 800de58:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800de5a:	b087      	sub	sp, #28
 800de5c:	0005      	movs	r5, r0
 800de5e:	2c00      	cmp	r4, #0
 800de60:	d100      	bne.n	800de64 <acc_element_source_adc_produce+0x18>
 800de62:	e09d      	b.n	800dfa0 <acc_element_source_adc_produce+0x154>
 800de64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800de66:	4a53      	ldr	r2, [pc, #332]	; (800dfb4 <acc_element_source_adc_produce+0x168>)
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	6a03      	ldr	r3, [r0, #32]
 800de6c:	69a2      	ldr	r2, [r4, #24]
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	6943      	ldr	r3, [r0, #20]
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	7866      	ldrb	r6, [r4, #1]
 800de7a:	69a3      	ldr	r3, [r4, #24]
 800de7c:	469a      	mov	sl, r3
 800de7e:	2e00      	cmp	r6, #0
 800de80:	d000      	beq.n	800de84 <acc_element_source_adc_produce+0x38>
 800de82:	e088      	b.n	800df96 <acc_element_source_adc_produce+0x14a>
 800de84:	7823      	ldrb	r3, [r4, #0]
 800de86:	469b      	mov	fp, r3
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d133      	bne.n	800def4 <acc_element_source_adc_produce+0xa8>
 800de8c:	0020      	movs	r0, r4
 800de8e:	f7f8 f95d 	bl	800614c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.252>
 800de92:	2800      	cmp	r0, #0
 800de94:	d027      	beq.n	800dee6 <acc_element_source_adc_produce+0x9a>
 800de96:	0020      	movs	r0, r4
 800de98:	2210      	movs	r2, #16
 800de9a:	2100      	movs	r1, #0
 800de9c:	3008      	adds	r0, #8
 800de9e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800dea0:	f004 ffdc 	bl	8012e5c <memset>
 800dea4:	0020      	movs	r0, r4
 800dea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dea8:	0039      	movs	r1, r7
 800deaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deac:	aa02      	add	r2, sp, #8
 800deae:	3018      	adds	r0, #24
 800deb0:	4798      	blx	r3
 800deb2:	ab02      	add	r3, sp, #8
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	60e0      	str	r0, [r4, #12]
 800deb8:	8163      	strh	r3, [r4, #10]
 800deba:	aa02      	add	r2, sp, #8
 800debc:	7892      	ldrb	r2, [r2, #2]
 800debe:	9904      	ldr	r1, [sp, #16]
 800dec0:	7222      	strb	r2, [r4, #8]
 800dec2:	4691      	mov	r9, r2
 800dec4:	aa02      	add	r2, sp, #8
 800dec6:	78d2      	ldrb	r2, [r2, #3]
 800dec8:	7262      	strb	r2, [r4, #9]
 800deca:	4690      	mov	r8, r2
 800decc:	aa02      	add	r2, sp, #8
 800dece:	7b17      	ldrb	r7, [r2, #12]
 800ded0:	7427      	strb	r7, [r4, #16]
 800ded2:	7912      	ldrb	r2, [r2, #4]
 800ded4:	6161      	str	r1, [r4, #20]
 800ded6:	7462      	strb	r2, [r4, #17]
 800ded8:	2800      	cmp	r0, #0
 800deda:	d163      	bne.n	800dfa4 <acc_element_source_adc_produce+0x158>
 800dedc:	4b36      	ldr	r3, [pc, #216]	; (800dfb8 <acc_element_source_adc_produce+0x16c>)
 800dede:	4a37      	ldr	r2, [pc, #220]	; (800dfbc <acc_element_source_adc_produce+0x170>)
 800dee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee2:	4937      	ldr	r1, [pc, #220]	; (800dfc0 <acc_element_source_adc_produce+0x174>)
 800dee4:	4798      	blx	r3
 800dee6:	4b34      	ldr	r3, [pc, #208]	; (800dfb8 <acc_element_source_adc_produce+0x16c>)
 800dee8:	4a36      	ldr	r2, [pc, #216]	; (800dfc4 <acc_element_source_adc_produce+0x178>)
 800deea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deec:	4936      	ldr	r1, [pc, #216]	; (800dfc8 <acc_element_source_adc_produce+0x17c>)
 800deee:	2000      	movs	r0, #0
 800def0:	4798      	blx	r3
 800def2:	e042      	b.n	800df7a <acc_element_source_adc_produce+0x12e>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d1ce      	bne.n	800de96 <acc_element_source_adc_produce+0x4a>
 800def8:	4b2f      	ldr	r3, [pc, #188]	; (800dfb8 <acc_element_source_adc_produce+0x16c>)
 800defa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800defc:	2b00      	cmp	r3, #0
 800defe:	d0ca      	beq.n	800de96 <acc_element_source_adc_produce+0x4a>
 800df00:	4650      	mov	r0, sl
 800df02:	4798      	blx	r3
 800df04:	e7c7      	b.n	800de96 <acc_element_source_adc_produce+0x4a>
 800df06:	9801      	ldr	r0, [sp, #4]
 800df08:	4298      	cmp	r0, r3
 800df0a:	d004      	beq.n	800df16 <acc_element_source_adc_produce+0xca>
 800df0c:	21ca      	movs	r1, #202	; 0xca
 800df0e:	482f      	ldr	r0, [pc, #188]	; (800dfcc <acc_element_source_adc_produce+0x180>)
 800df10:	31ff      	adds	r1, #255	; 0xff
 800df12:	f7f7 fd1c 	bl	800594e <acc_assert_fail>
 800df16:	0016      	movs	r6, r2
 800df18:	2348      	movs	r3, #72	; 0x48
 800df1a:	4652      	mov	r2, sl
 800df1c:	4353      	muls	r3, r2
 800df1e:	4a2c      	ldr	r2, [pc, #176]	; (800dfd0 <acc_element_source_adc_produce+0x184>)
 800df20:	3b48      	subs	r3, #72	; 0x48
 800df22:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800df24:	18d3      	adds	r3, r2, r3
 800df26:	001a      	movs	r2, r3
 800df28:	3242      	adds	r2, #66	; 0x42
 800df2a:	7016      	strb	r6, [r2, #0]
 800df2c:	6459      	str	r1, [r3, #68]	; 0x44
 800df2e:	465b      	mov	r3, fp
 800df30:	2b02      	cmp	r3, #2
 800df32:	d12a      	bne.n	800df8a <acc_element_source_adc_produce+0x13e>
 800df34:	4650      	mov	r0, sl
 800df36:	f7f8 f901 	bl	800613c <acc_rss_integration_sensor_device_power_off>
 800df3a:	2300      	movs	r3, #0
 800df3c:	70e3      	strb	r3, [r4, #3]
 800df3e:	7863      	ldrb	r3, [r4, #1]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d105      	bne.n	800df50 <acc_element_source_adc_produce+0x104>
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	9a00      	ldr	r2, [sp, #0]
 800df48:	4651      	mov	r1, sl
 800df4a:	2002      	movs	r0, #2
 800df4c:	f7ff fdbc 	bl	800dac8 <acc_probes_execute_uint16>
 800df50:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800df52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	6013      	str	r3, [r2, #0]
 800df58:	464a      	mov	r2, r9
 800df5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	4642      	mov	r2, r8
 800df60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	2301      	movs	r3, #1
 800df66:	2e00      	cmp	r6, #0
 800df68:	d100      	bne.n	800df6c <acc_element_source_adc_produce+0x120>
 800df6a:	003b      	movs	r3, r7
 800df6c:	2601      	movs	r6, #1
 800df6e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800df70:	6828      	ldr	r0, [r5, #0]
 800df72:	4033      	ands	r3, r6
 800df74:	7013      	strb	r3, [r2, #0]
 800df76:	6843      	ldr	r3, [r0, #4]
 800df78:	4798      	blx	r3
 800df7a:	0030      	movs	r0, r6
 800df7c:	b007      	add	sp, #28
 800df7e:	bc3c      	pop	{r2, r3, r4, r5}
 800df80:	4690      	mov	r8, r2
 800df82:	4699      	mov	r9, r3
 800df84:	46a2      	mov	sl, r4
 800df86:	46ab      	mov	fp, r5
 800df88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d1d7      	bne.n	800df3e <acc_element_source_adc_produce+0xf2>
 800df8e:	0020      	movs	r0, r4
 800df90:	f7f8 f80a 	bl	8005fa8 <acc_sensor_manager_hibernate_enter.lto_priv.251>
 800df94:	e7d3      	b.n	800df3e <acc_element_source_adc_produce+0xf2>
 800df96:	2600      	movs	r6, #0
 800df98:	0037      	movs	r7, r6
 800df9a:	46b0      	mov	r8, r6
 800df9c:	46b1      	mov	r9, r6
 800df9e:	e7ce      	b.n	800df3e <acc_element_source_adc_produce+0xf2>
 800dfa0:	0026      	movs	r6, r4
 800dfa2:	e7ea      	b.n	800df7a <acc_element_source_adc_produce+0x12e>
 800dfa4:	9e00      	ldr	r6, [sp, #0]
 800dfa6:	4286      	cmp	r6, r0
 800dfa8:	d0ad      	beq.n	800df06 <acc_element_source_adc_produce+0xba>
 800dfaa:	21e4      	movs	r1, #228	; 0xe4
 800dfac:	4807      	ldr	r0, [pc, #28]	; (800dfcc <acc_element_source_adc_produce+0x180>)
 800dfae:	0049      	lsls	r1, r1, #1
 800dfb0:	f7f7 fccd 	bl	800594e <acc_assert_fail>
 800dfb4:	51645c3c 	.word	0x51645c3c
 800dfb8:	200003c0 	.word	0x200003c0
 800dfbc:	0801e2b9 	.word	0x0801e2b9
 800dfc0:	0801ca87 	.word	0x0801ca87
 800dfc4:	0801e2d1 	.word	0x0801e2d1
 800dfc8:	0801e2ee 	.word	0x0801e2ee
 800dfcc:	0801c26f 	.word	0x0801c26f
 800dfd0:	20000540 	.word	0x20000540

0800dfd4 <__aeabi_fadd>:
 800dfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd6:	4647      	mov	r7, r8
 800dfd8:	46ce      	mov	lr, r9
 800dfda:	0243      	lsls	r3, r0, #9
 800dfdc:	0a5b      	lsrs	r3, r3, #9
 800dfde:	0044      	lsls	r4, r0, #1
 800dfe0:	0fc2      	lsrs	r2, r0, #31
 800dfe2:	469c      	mov	ip, r3
 800dfe4:	0048      	lsls	r0, r1, #1
 800dfe6:	00dd      	lsls	r5, r3, #3
 800dfe8:	024b      	lsls	r3, r1, #9
 800dfea:	0e24      	lsrs	r4, r4, #24
 800dfec:	0a5b      	lsrs	r3, r3, #9
 800dfee:	0e00      	lsrs	r0, r0, #24
 800dff0:	b580      	push	{r7, lr}
 800dff2:	4698      	mov	r8, r3
 800dff4:	0026      	movs	r6, r4
 800dff6:	4691      	mov	r9, r2
 800dff8:	0fc9      	lsrs	r1, r1, #31
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	1a27      	subs	r7, r4, r0
 800dffe:	428a      	cmp	r2, r1
 800e000:	d029      	beq.n	800e056 <__aeabi_fadd+0x82>
 800e002:	2f00      	cmp	r7, #0
 800e004:	dd15      	ble.n	800e032 <__aeabi_fadd+0x5e>
 800e006:	2800      	cmp	r0, #0
 800e008:	d14a      	bne.n	800e0a0 <__aeabi_fadd+0xcc>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d000      	beq.n	800e010 <__aeabi_fadd+0x3c>
 800e00e:	e095      	b.n	800e13c <__aeabi_fadd+0x168>
 800e010:	08ed      	lsrs	r5, r5, #3
 800e012:	2cff      	cmp	r4, #255	; 0xff
 800e014:	d100      	bne.n	800e018 <__aeabi_fadd+0x44>
 800e016:	e088      	b.n	800e12a <__aeabi_fadd+0x156>
 800e018:	026b      	lsls	r3, r5, #9
 800e01a:	0a5b      	lsrs	r3, r3, #9
 800e01c:	b2e6      	uxtb	r6, r4
 800e01e:	025b      	lsls	r3, r3, #9
 800e020:	05f6      	lsls	r6, r6, #23
 800e022:	0a58      	lsrs	r0, r3, #9
 800e024:	4330      	orrs	r0, r6
 800e026:	07d2      	lsls	r2, r2, #31
 800e028:	4310      	orrs	r0, r2
 800e02a:	bc0c      	pop	{r2, r3}
 800e02c:	4690      	mov	r8, r2
 800e02e:	4699      	mov	r9, r3
 800e030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e032:	2f00      	cmp	r7, #0
 800e034:	d000      	beq.n	800e038 <__aeabi_fadd+0x64>
 800e036:	e087      	b.n	800e148 <__aeabi_fadd+0x174>
 800e038:	1c60      	adds	r0, r4, #1
 800e03a:	b2c0      	uxtb	r0, r0
 800e03c:	2801      	cmp	r0, #1
 800e03e:	dc00      	bgt.n	800e042 <__aeabi_fadd+0x6e>
 800e040:	e0b6      	b.n	800e1b0 <__aeabi_fadd+0x1dc>
 800e042:	1aee      	subs	r6, r5, r3
 800e044:	0172      	lsls	r2, r6, #5
 800e046:	d500      	bpl.n	800e04a <__aeabi_fadd+0x76>
 800e048:	e0c5      	b.n	800e1d6 <__aeabi_fadd+0x202>
 800e04a:	2e00      	cmp	r6, #0
 800e04c:	d13d      	bne.n	800e0ca <__aeabi_fadd+0xf6>
 800e04e:	2200      	movs	r2, #0
 800e050:	2600      	movs	r6, #0
 800e052:	2300      	movs	r3, #0
 800e054:	e7e3      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e056:	2f00      	cmp	r7, #0
 800e058:	dc00      	bgt.n	800e05c <__aeabi_fadd+0x88>
 800e05a:	e096      	b.n	800e18a <__aeabi_fadd+0x1b6>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	d05d      	beq.n	800e11c <__aeabi_fadd+0x148>
 800e060:	2cff      	cmp	r4, #255	; 0xff
 800e062:	d060      	beq.n	800e126 <__aeabi_fadd+0x152>
 800e064:	2280      	movs	r2, #128	; 0x80
 800e066:	04d2      	lsls	r2, r2, #19
 800e068:	4313      	orrs	r3, r2
 800e06a:	2f1b      	cmp	r7, #27
 800e06c:	dd00      	ble.n	800e070 <__aeabi_fadd+0x9c>
 800e06e:	e0ec      	b.n	800e24a <__aeabi_fadd+0x276>
 800e070:	2220      	movs	r2, #32
 800e072:	1bd2      	subs	r2, r2, r7
 800e074:	0018      	movs	r0, r3
 800e076:	4093      	lsls	r3, r2
 800e078:	40f8      	lsrs	r0, r7
 800e07a:	1e5a      	subs	r2, r3, #1
 800e07c:	4193      	sbcs	r3, r2
 800e07e:	4303      	orrs	r3, r0
 800e080:	18ed      	adds	r5, r5, r3
 800e082:	016b      	lsls	r3, r5, #5
 800e084:	d57b      	bpl.n	800e17e <__aeabi_fadd+0x1aa>
 800e086:	3401      	adds	r4, #1
 800e088:	2cff      	cmp	r4, #255	; 0xff
 800e08a:	d100      	bne.n	800e08e <__aeabi_fadd+0xba>
 800e08c:	e0b7      	b.n	800e1fe <__aeabi_fadd+0x22a>
 800e08e:	2201      	movs	r2, #1
 800e090:	2607      	movs	r6, #7
 800e092:	402a      	ands	r2, r5
 800e094:	086b      	lsrs	r3, r5, #1
 800e096:	4d9a      	ldr	r5, [pc, #616]	; (800e300 <__aeabi_fadd+0x32c>)
 800e098:	401d      	ands	r5, r3
 800e09a:	4315      	orrs	r5, r2
 800e09c:	402e      	ands	r6, r5
 800e09e:	e029      	b.n	800e0f4 <__aeabi_fadd+0x120>
 800e0a0:	2cff      	cmp	r4, #255	; 0xff
 800e0a2:	d0b5      	beq.n	800e010 <__aeabi_fadd+0x3c>
 800e0a4:	2280      	movs	r2, #128	; 0x80
 800e0a6:	04d2      	lsls	r2, r2, #19
 800e0a8:	4313      	orrs	r3, r2
 800e0aa:	2f1b      	cmp	r7, #27
 800e0ac:	dd00      	ble.n	800e0b0 <__aeabi_fadd+0xdc>
 800e0ae:	e0b2      	b.n	800e216 <__aeabi_fadd+0x242>
 800e0b0:	2220      	movs	r2, #32
 800e0b2:	1bd2      	subs	r2, r2, r7
 800e0b4:	0019      	movs	r1, r3
 800e0b6:	4093      	lsls	r3, r2
 800e0b8:	40f9      	lsrs	r1, r7
 800e0ba:	1e5a      	subs	r2, r3, #1
 800e0bc:	4193      	sbcs	r3, r2
 800e0be:	430b      	orrs	r3, r1
 800e0c0:	1aed      	subs	r5, r5, r3
 800e0c2:	016b      	lsls	r3, r5, #5
 800e0c4:	d55b      	bpl.n	800e17e <__aeabi_fadd+0x1aa>
 800e0c6:	01ad      	lsls	r5, r5, #6
 800e0c8:	09ae      	lsrs	r6, r5, #6
 800e0ca:	0030      	movs	r0, r6
 800e0cc:	f000 fd24 	bl	800eb18 <__clzsi2>
 800e0d0:	3805      	subs	r0, #5
 800e0d2:	4086      	lsls	r6, r0
 800e0d4:	4284      	cmp	r4, r0
 800e0d6:	dc65      	bgt.n	800e1a4 <__aeabi_fadd+0x1d0>
 800e0d8:	1b04      	subs	r4, r0, r4
 800e0da:	0033      	movs	r3, r6
 800e0dc:	2020      	movs	r0, #32
 800e0de:	3401      	adds	r4, #1
 800e0e0:	40e3      	lsrs	r3, r4
 800e0e2:	1b04      	subs	r4, r0, r4
 800e0e4:	40a6      	lsls	r6, r4
 800e0e6:	1e75      	subs	r5, r6, #1
 800e0e8:	41ae      	sbcs	r6, r5
 800e0ea:	4333      	orrs	r3, r6
 800e0ec:	2607      	movs	r6, #7
 800e0ee:	001d      	movs	r5, r3
 800e0f0:	2400      	movs	r4, #0
 800e0f2:	401e      	ands	r6, r3
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	464b      	mov	r3, r9
 800e0f8:	401a      	ands	r2, r3
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	d004      	beq.n	800e108 <__aeabi_fadd+0x134>
 800e0fe:	230f      	movs	r3, #15
 800e100:	402b      	ands	r3, r5
 800e102:	2b04      	cmp	r3, #4
 800e104:	d000      	beq.n	800e108 <__aeabi_fadd+0x134>
 800e106:	3504      	adds	r5, #4
 800e108:	016b      	lsls	r3, r5, #5
 800e10a:	d400      	bmi.n	800e10e <__aeabi_fadd+0x13a>
 800e10c:	e780      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e10e:	3401      	adds	r4, #1
 800e110:	b2e6      	uxtb	r6, r4
 800e112:	2cff      	cmp	r4, #255	; 0xff
 800e114:	d12f      	bne.n	800e176 <__aeabi_fadd+0x1a2>
 800e116:	26ff      	movs	r6, #255	; 0xff
 800e118:	2300      	movs	r3, #0
 800e11a:	e780      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d152      	bne.n	800e1c6 <__aeabi_fadd+0x1f2>
 800e120:	2cff      	cmp	r4, #255	; 0xff
 800e122:	d000      	beq.n	800e126 <__aeabi_fadd+0x152>
 800e124:	e774      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e126:	000a      	movs	r2, r1
 800e128:	08ed      	lsrs	r5, r5, #3
 800e12a:	2d00      	cmp	r5, #0
 800e12c:	d0f3      	beq.n	800e116 <__aeabi_fadd+0x142>
 800e12e:	2380      	movs	r3, #128	; 0x80
 800e130:	03db      	lsls	r3, r3, #15
 800e132:	432b      	orrs	r3, r5
 800e134:	025b      	lsls	r3, r3, #9
 800e136:	0a5b      	lsrs	r3, r3, #9
 800e138:	26ff      	movs	r6, #255	; 0xff
 800e13a:	e770      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e13c:	3f01      	subs	r7, #1
 800e13e:	2f00      	cmp	r7, #0
 800e140:	d0be      	beq.n	800e0c0 <__aeabi_fadd+0xec>
 800e142:	2cff      	cmp	r4, #255	; 0xff
 800e144:	d1b1      	bne.n	800e0aa <__aeabi_fadd+0xd6>
 800e146:	e763      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e148:	2c00      	cmp	r4, #0
 800e14a:	d047      	beq.n	800e1dc <__aeabi_fadd+0x208>
 800e14c:	28ff      	cmp	r0, #255	; 0xff
 800e14e:	d069      	beq.n	800e224 <__aeabi_fadd+0x250>
 800e150:	2480      	movs	r4, #128	; 0x80
 800e152:	04e4      	lsls	r4, r4, #19
 800e154:	427a      	negs	r2, r7
 800e156:	4325      	orrs	r5, r4
 800e158:	2a1b      	cmp	r2, #27
 800e15a:	dd00      	ble.n	800e15e <__aeabi_fadd+0x18a>
 800e15c:	e0c5      	b.n	800e2ea <__aeabi_fadd+0x316>
 800e15e:	002c      	movs	r4, r5
 800e160:	2620      	movs	r6, #32
 800e162:	40d4      	lsrs	r4, r2
 800e164:	1ab2      	subs	r2, r6, r2
 800e166:	4095      	lsls	r5, r2
 800e168:	1e6a      	subs	r2, r5, #1
 800e16a:	4195      	sbcs	r5, r2
 800e16c:	4325      	orrs	r5, r4
 800e16e:	1b5d      	subs	r5, r3, r5
 800e170:	0004      	movs	r4, r0
 800e172:	4689      	mov	r9, r1
 800e174:	e7a5      	b.n	800e0c2 <__aeabi_fadd+0xee>
 800e176:	01ab      	lsls	r3, r5, #6
 800e178:	0a5b      	lsrs	r3, r3, #9
 800e17a:	e750      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e17c:	2400      	movs	r4, #0
 800e17e:	2201      	movs	r2, #1
 800e180:	464b      	mov	r3, r9
 800e182:	401a      	ands	r2, r3
 800e184:	076b      	lsls	r3, r5, #29
 800e186:	d1ba      	bne.n	800e0fe <__aeabi_fadd+0x12a>
 800e188:	e742      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e18a:	2f00      	cmp	r7, #0
 800e18c:	d13b      	bne.n	800e206 <__aeabi_fadd+0x232>
 800e18e:	3401      	adds	r4, #1
 800e190:	b2e0      	uxtb	r0, r4
 800e192:	2801      	cmp	r0, #1
 800e194:	dd4a      	ble.n	800e22c <__aeabi_fadd+0x258>
 800e196:	2cff      	cmp	r4, #255	; 0xff
 800e198:	d0bd      	beq.n	800e116 <__aeabi_fadd+0x142>
 800e19a:	2607      	movs	r6, #7
 800e19c:	18ed      	adds	r5, r5, r3
 800e19e:	086d      	lsrs	r5, r5, #1
 800e1a0:	402e      	ands	r6, r5
 800e1a2:	e7a7      	b.n	800e0f4 <__aeabi_fadd+0x120>
 800e1a4:	2307      	movs	r3, #7
 800e1a6:	4d57      	ldr	r5, [pc, #348]	; (800e304 <__aeabi_fadd+0x330>)
 800e1a8:	1a24      	subs	r4, r4, r0
 800e1aa:	4035      	ands	r5, r6
 800e1ac:	401e      	ands	r6, r3
 800e1ae:	e7a1      	b.n	800e0f4 <__aeabi_fadd+0x120>
 800e1b0:	2c00      	cmp	r4, #0
 800e1b2:	d11b      	bne.n	800e1ec <__aeabi_fadd+0x218>
 800e1b4:	2d00      	cmp	r5, #0
 800e1b6:	d16e      	bne.n	800e296 <__aeabi_fadd+0x2c2>
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d100      	bne.n	800e1be <__aeabi_fadd+0x1ea>
 800e1bc:	e09a      	b.n	800e2f4 <__aeabi_fadd+0x320>
 800e1be:	000a      	movs	r2, r1
 800e1c0:	001d      	movs	r5, r3
 800e1c2:	003c      	movs	r4, r7
 800e1c4:	e724      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e1c6:	3f01      	subs	r7, #1
 800e1c8:	2f00      	cmp	r7, #0
 800e1ca:	d100      	bne.n	800e1ce <__aeabi_fadd+0x1fa>
 800e1cc:	e758      	b.n	800e080 <__aeabi_fadd+0xac>
 800e1ce:	2cff      	cmp	r4, #255	; 0xff
 800e1d0:	d000      	beq.n	800e1d4 <__aeabi_fadd+0x200>
 800e1d2:	e74a      	b.n	800e06a <__aeabi_fadd+0x96>
 800e1d4:	e7a7      	b.n	800e126 <__aeabi_fadd+0x152>
 800e1d6:	1b5e      	subs	r6, r3, r5
 800e1d8:	4689      	mov	r9, r1
 800e1da:	e776      	b.n	800e0ca <__aeabi_fadd+0xf6>
 800e1dc:	2d00      	cmp	r5, #0
 800e1de:	d11c      	bne.n	800e21a <__aeabi_fadd+0x246>
 800e1e0:	000a      	movs	r2, r1
 800e1e2:	28ff      	cmp	r0, #255	; 0xff
 800e1e4:	d01f      	beq.n	800e226 <__aeabi_fadd+0x252>
 800e1e6:	0004      	movs	r4, r0
 800e1e8:	001d      	movs	r5, r3
 800e1ea:	e711      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e1ec:	2d00      	cmp	r5, #0
 800e1ee:	d15d      	bne.n	800e2ac <__aeabi_fadd+0x2d8>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d117      	bne.n	800e224 <__aeabi_fadd+0x250>
 800e1f4:	2380      	movs	r3, #128	; 0x80
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	03db      	lsls	r3, r3, #15
 800e1fa:	26ff      	movs	r6, #255	; 0xff
 800e1fc:	e70f      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e1fe:	000a      	movs	r2, r1
 800e200:	26ff      	movs	r6, #255	; 0xff
 800e202:	2300      	movs	r3, #0
 800e204:	e70b      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e206:	2c00      	cmp	r4, #0
 800e208:	d121      	bne.n	800e24e <__aeabi_fadd+0x27a>
 800e20a:	2d00      	cmp	r5, #0
 800e20c:	d166      	bne.n	800e2dc <__aeabi_fadd+0x308>
 800e20e:	28ff      	cmp	r0, #255	; 0xff
 800e210:	d1e9      	bne.n	800e1e6 <__aeabi_fadd+0x212>
 800e212:	001d      	movs	r5, r3
 800e214:	e787      	b.n	800e126 <__aeabi_fadd+0x152>
 800e216:	2301      	movs	r3, #1
 800e218:	e752      	b.n	800e0c0 <__aeabi_fadd+0xec>
 800e21a:	1c7a      	adds	r2, r7, #1
 800e21c:	d0a7      	beq.n	800e16e <__aeabi_fadd+0x19a>
 800e21e:	43fa      	mvns	r2, r7
 800e220:	28ff      	cmp	r0, #255	; 0xff
 800e222:	d199      	bne.n	800e158 <__aeabi_fadd+0x184>
 800e224:	000a      	movs	r2, r1
 800e226:	001d      	movs	r5, r3
 800e228:	24ff      	movs	r4, #255	; 0xff
 800e22a:	e6f1      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e22c:	2e00      	cmp	r6, #0
 800e22e:	d121      	bne.n	800e274 <__aeabi_fadd+0x2a0>
 800e230:	2d00      	cmp	r5, #0
 800e232:	d04f      	beq.n	800e2d4 <__aeabi_fadd+0x300>
 800e234:	2b00      	cmp	r3, #0
 800e236:	d04c      	beq.n	800e2d2 <__aeabi_fadd+0x2fe>
 800e238:	18ed      	adds	r5, r5, r3
 800e23a:	016b      	lsls	r3, r5, #5
 800e23c:	d59e      	bpl.n	800e17c <__aeabi_fadd+0x1a8>
 800e23e:	4b31      	ldr	r3, [pc, #196]	; (800e304 <__aeabi_fadd+0x330>)
 800e240:	3607      	adds	r6, #7
 800e242:	402e      	ands	r6, r5
 800e244:	2401      	movs	r4, #1
 800e246:	401d      	ands	r5, r3
 800e248:	e754      	b.n	800e0f4 <__aeabi_fadd+0x120>
 800e24a:	2301      	movs	r3, #1
 800e24c:	e718      	b.n	800e080 <__aeabi_fadd+0xac>
 800e24e:	28ff      	cmp	r0, #255	; 0xff
 800e250:	d0df      	beq.n	800e212 <__aeabi_fadd+0x23e>
 800e252:	2480      	movs	r4, #128	; 0x80
 800e254:	04e4      	lsls	r4, r4, #19
 800e256:	427f      	negs	r7, r7
 800e258:	4325      	orrs	r5, r4
 800e25a:	2f1b      	cmp	r7, #27
 800e25c:	dc4d      	bgt.n	800e2fa <__aeabi_fadd+0x326>
 800e25e:	2620      	movs	r6, #32
 800e260:	1bf6      	subs	r6, r6, r7
 800e262:	002c      	movs	r4, r5
 800e264:	40b5      	lsls	r5, r6
 800e266:	40fc      	lsrs	r4, r7
 800e268:	1e6a      	subs	r2, r5, #1
 800e26a:	4195      	sbcs	r5, r2
 800e26c:	4325      	orrs	r5, r4
 800e26e:	18ed      	adds	r5, r5, r3
 800e270:	0004      	movs	r4, r0
 800e272:	e706      	b.n	800e082 <__aeabi_fadd+0xae>
 800e274:	2d00      	cmp	r5, #0
 800e276:	d0cc      	beq.n	800e212 <__aeabi_fadd+0x23e>
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d100      	bne.n	800e27e <__aeabi_fadd+0x2aa>
 800e27c:	e753      	b.n	800e126 <__aeabi_fadd+0x152>
 800e27e:	2180      	movs	r1, #128	; 0x80
 800e280:	4660      	mov	r0, ip
 800e282:	03c9      	lsls	r1, r1, #15
 800e284:	4208      	tst	r0, r1
 800e286:	d003      	beq.n	800e290 <__aeabi_fadd+0x2bc>
 800e288:	4640      	mov	r0, r8
 800e28a:	4208      	tst	r0, r1
 800e28c:	d100      	bne.n	800e290 <__aeabi_fadd+0x2bc>
 800e28e:	001d      	movs	r5, r3
 800e290:	2101      	movs	r1, #1
 800e292:	4011      	ands	r1, r2
 800e294:	e747      	b.n	800e126 <__aeabi_fadd+0x152>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d100      	bne.n	800e29c <__aeabi_fadd+0x2c8>
 800e29a:	e6b9      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e29c:	1aea      	subs	r2, r5, r3
 800e29e:	0150      	lsls	r0, r2, #5
 800e2a0:	d525      	bpl.n	800e2ee <__aeabi_fadd+0x31a>
 800e2a2:	2607      	movs	r6, #7
 800e2a4:	1b5d      	subs	r5, r3, r5
 800e2a6:	402e      	ands	r6, r5
 800e2a8:	4689      	mov	r9, r1
 800e2aa:	e723      	b.n	800e0f4 <__aeabi_fadd+0x120>
 800e2ac:	24ff      	movs	r4, #255	; 0xff
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d100      	bne.n	800e2b4 <__aeabi_fadd+0x2e0>
 800e2b2:	e6ad      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e2b4:	2280      	movs	r2, #128	; 0x80
 800e2b6:	4660      	mov	r0, ip
 800e2b8:	03d2      	lsls	r2, r2, #15
 800e2ba:	4210      	tst	r0, r2
 800e2bc:	d004      	beq.n	800e2c8 <__aeabi_fadd+0x2f4>
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4210      	tst	r0, r2
 800e2c2:	d101      	bne.n	800e2c8 <__aeabi_fadd+0x2f4>
 800e2c4:	001d      	movs	r5, r3
 800e2c6:	4689      	mov	r9, r1
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	464b      	mov	r3, r9
 800e2cc:	24ff      	movs	r4, #255	; 0xff
 800e2ce:	401a      	ands	r2, r3
 800e2d0:	e69e      	b.n	800e010 <__aeabi_fadd+0x3c>
 800e2d2:	002b      	movs	r3, r5
 800e2d4:	08dd      	lsrs	r5, r3, #3
 800e2d6:	000a      	movs	r2, r1
 800e2d8:	2400      	movs	r4, #0
 800e2da:	e69d      	b.n	800e018 <__aeabi_fadd+0x44>
 800e2dc:	1c7a      	adds	r2, r7, #1
 800e2de:	d0c6      	beq.n	800e26e <__aeabi_fadd+0x29a>
 800e2e0:	43ff      	mvns	r7, r7
 800e2e2:	28ff      	cmp	r0, #255	; 0xff
 800e2e4:	d1b9      	bne.n	800e25a <__aeabi_fadd+0x286>
 800e2e6:	001d      	movs	r5, r3
 800e2e8:	e71d      	b.n	800e126 <__aeabi_fadd+0x152>
 800e2ea:	2501      	movs	r5, #1
 800e2ec:	e73f      	b.n	800e16e <__aeabi_fadd+0x19a>
 800e2ee:	1e15      	subs	r5, r2, #0
 800e2f0:	d000      	beq.n	800e2f4 <__aeabi_fadd+0x320>
 800e2f2:	e744      	b.n	800e17e <__aeabi_fadd+0x1aa>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e691      	b.n	800e01e <__aeabi_fadd+0x4a>
 800e2fa:	2501      	movs	r5, #1
 800e2fc:	e7b7      	b.n	800e26e <__aeabi_fadd+0x29a>
 800e2fe:	46c0      	nop			; (mov r8, r8)
 800e300:	7dffffff 	.word	0x7dffffff
 800e304:	fbffffff 	.word	0xfbffffff

0800e308 <__aeabi_fdiv>:
 800e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30a:	4657      	mov	r7, sl
 800e30c:	464e      	mov	r6, r9
 800e30e:	4645      	mov	r5, r8
 800e310:	46de      	mov	lr, fp
 800e312:	0244      	lsls	r4, r0, #9
 800e314:	b5e0      	push	{r5, r6, r7, lr}
 800e316:	0046      	lsls	r6, r0, #1
 800e318:	4688      	mov	r8, r1
 800e31a:	0a64      	lsrs	r4, r4, #9
 800e31c:	0e36      	lsrs	r6, r6, #24
 800e31e:	0fc7      	lsrs	r7, r0, #31
 800e320:	2e00      	cmp	r6, #0
 800e322:	d063      	beq.n	800e3ec <__aeabi_fdiv+0xe4>
 800e324:	2eff      	cmp	r6, #255	; 0xff
 800e326:	d024      	beq.n	800e372 <__aeabi_fdiv+0x6a>
 800e328:	2380      	movs	r3, #128	; 0x80
 800e32a:	00e4      	lsls	r4, r4, #3
 800e32c:	04db      	lsls	r3, r3, #19
 800e32e:	431c      	orrs	r4, r3
 800e330:	2300      	movs	r3, #0
 800e332:	4699      	mov	r9, r3
 800e334:	469b      	mov	fp, r3
 800e336:	3e7f      	subs	r6, #127	; 0x7f
 800e338:	4643      	mov	r3, r8
 800e33a:	4642      	mov	r2, r8
 800e33c:	025d      	lsls	r5, r3, #9
 800e33e:	0fd2      	lsrs	r2, r2, #31
 800e340:	005b      	lsls	r3, r3, #1
 800e342:	0a6d      	lsrs	r5, r5, #9
 800e344:	0e1b      	lsrs	r3, r3, #24
 800e346:	4690      	mov	r8, r2
 800e348:	4692      	mov	sl, r2
 800e34a:	d065      	beq.n	800e418 <__aeabi_fdiv+0x110>
 800e34c:	2bff      	cmp	r3, #255	; 0xff
 800e34e:	d055      	beq.n	800e3fc <__aeabi_fdiv+0xf4>
 800e350:	2280      	movs	r2, #128	; 0x80
 800e352:	2100      	movs	r1, #0
 800e354:	00ed      	lsls	r5, r5, #3
 800e356:	04d2      	lsls	r2, r2, #19
 800e358:	3b7f      	subs	r3, #127	; 0x7f
 800e35a:	4315      	orrs	r5, r2
 800e35c:	1af6      	subs	r6, r6, r3
 800e35e:	4643      	mov	r3, r8
 800e360:	464a      	mov	r2, r9
 800e362:	407b      	eors	r3, r7
 800e364:	2a0f      	cmp	r2, #15
 800e366:	d900      	bls.n	800e36a <__aeabi_fdiv+0x62>
 800e368:	e08d      	b.n	800e486 <__aeabi_fdiv+0x17e>
 800e36a:	486d      	ldr	r0, [pc, #436]	; (800e520 <__aeabi_fdiv+0x218>)
 800e36c:	0092      	lsls	r2, r2, #2
 800e36e:	5882      	ldr	r2, [r0, r2]
 800e370:	4697      	mov	pc, r2
 800e372:	2c00      	cmp	r4, #0
 800e374:	d154      	bne.n	800e420 <__aeabi_fdiv+0x118>
 800e376:	2308      	movs	r3, #8
 800e378:	4699      	mov	r9, r3
 800e37a:	3b06      	subs	r3, #6
 800e37c:	26ff      	movs	r6, #255	; 0xff
 800e37e:	469b      	mov	fp, r3
 800e380:	e7da      	b.n	800e338 <__aeabi_fdiv+0x30>
 800e382:	2500      	movs	r5, #0
 800e384:	4653      	mov	r3, sl
 800e386:	2902      	cmp	r1, #2
 800e388:	d01b      	beq.n	800e3c2 <__aeabi_fdiv+0xba>
 800e38a:	2903      	cmp	r1, #3
 800e38c:	d100      	bne.n	800e390 <__aeabi_fdiv+0x88>
 800e38e:	e0bf      	b.n	800e510 <__aeabi_fdiv+0x208>
 800e390:	2901      	cmp	r1, #1
 800e392:	d028      	beq.n	800e3e6 <__aeabi_fdiv+0xde>
 800e394:	0030      	movs	r0, r6
 800e396:	307f      	adds	r0, #127	; 0x7f
 800e398:	2800      	cmp	r0, #0
 800e39a:	dd20      	ble.n	800e3de <__aeabi_fdiv+0xd6>
 800e39c:	076a      	lsls	r2, r5, #29
 800e39e:	d004      	beq.n	800e3aa <__aeabi_fdiv+0xa2>
 800e3a0:	220f      	movs	r2, #15
 800e3a2:	402a      	ands	r2, r5
 800e3a4:	2a04      	cmp	r2, #4
 800e3a6:	d000      	beq.n	800e3aa <__aeabi_fdiv+0xa2>
 800e3a8:	3504      	adds	r5, #4
 800e3aa:	012a      	lsls	r2, r5, #4
 800e3ac:	d503      	bpl.n	800e3b6 <__aeabi_fdiv+0xae>
 800e3ae:	0030      	movs	r0, r6
 800e3b0:	4a5c      	ldr	r2, [pc, #368]	; (800e524 <__aeabi_fdiv+0x21c>)
 800e3b2:	3080      	adds	r0, #128	; 0x80
 800e3b4:	4015      	ands	r5, r2
 800e3b6:	28fe      	cmp	r0, #254	; 0xfe
 800e3b8:	dc03      	bgt.n	800e3c2 <__aeabi_fdiv+0xba>
 800e3ba:	01ac      	lsls	r4, r5, #6
 800e3bc:	0a64      	lsrs	r4, r4, #9
 800e3be:	b2c2      	uxtb	r2, r0
 800e3c0:	e001      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e3c2:	22ff      	movs	r2, #255	; 0xff
 800e3c4:	2400      	movs	r4, #0
 800e3c6:	0264      	lsls	r4, r4, #9
 800e3c8:	05d2      	lsls	r2, r2, #23
 800e3ca:	0a60      	lsrs	r0, r4, #9
 800e3cc:	07db      	lsls	r3, r3, #31
 800e3ce:	4310      	orrs	r0, r2
 800e3d0:	4318      	orrs	r0, r3
 800e3d2:	bc3c      	pop	{r2, r3, r4, r5}
 800e3d4:	4690      	mov	r8, r2
 800e3d6:	4699      	mov	r9, r3
 800e3d8:	46a2      	mov	sl, r4
 800e3da:	46ab      	mov	fp, r5
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3de:	2201      	movs	r2, #1
 800e3e0:	1a10      	subs	r0, r2, r0
 800e3e2:	281b      	cmp	r0, #27
 800e3e4:	dd7c      	ble.n	800e4e0 <__aeabi_fdiv+0x1d8>
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2400      	movs	r4, #0
 800e3ea:	e7ec      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e3ec:	2c00      	cmp	r4, #0
 800e3ee:	d11d      	bne.n	800e42c <__aeabi_fdiv+0x124>
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	4699      	mov	r9, r3
 800e3f4:	3b03      	subs	r3, #3
 800e3f6:	2600      	movs	r6, #0
 800e3f8:	469b      	mov	fp, r3
 800e3fa:	e79d      	b.n	800e338 <__aeabi_fdiv+0x30>
 800e3fc:	3eff      	subs	r6, #255	; 0xff
 800e3fe:	2d00      	cmp	r5, #0
 800e400:	d120      	bne.n	800e444 <__aeabi_fdiv+0x13c>
 800e402:	2102      	movs	r1, #2
 800e404:	4643      	mov	r3, r8
 800e406:	464a      	mov	r2, r9
 800e408:	407b      	eors	r3, r7
 800e40a:	430a      	orrs	r2, r1
 800e40c:	2a0f      	cmp	r2, #15
 800e40e:	d8d8      	bhi.n	800e3c2 <__aeabi_fdiv+0xba>
 800e410:	4845      	ldr	r0, [pc, #276]	; (800e528 <__aeabi_fdiv+0x220>)
 800e412:	0092      	lsls	r2, r2, #2
 800e414:	5882      	ldr	r2, [r0, r2]
 800e416:	4697      	mov	pc, r2
 800e418:	2d00      	cmp	r5, #0
 800e41a:	d119      	bne.n	800e450 <__aeabi_fdiv+0x148>
 800e41c:	2101      	movs	r1, #1
 800e41e:	e7f1      	b.n	800e404 <__aeabi_fdiv+0xfc>
 800e420:	230c      	movs	r3, #12
 800e422:	4699      	mov	r9, r3
 800e424:	3b09      	subs	r3, #9
 800e426:	26ff      	movs	r6, #255	; 0xff
 800e428:	469b      	mov	fp, r3
 800e42a:	e785      	b.n	800e338 <__aeabi_fdiv+0x30>
 800e42c:	0020      	movs	r0, r4
 800e42e:	f000 fb73 	bl	800eb18 <__clzsi2>
 800e432:	2676      	movs	r6, #118	; 0x76
 800e434:	1f43      	subs	r3, r0, #5
 800e436:	409c      	lsls	r4, r3
 800e438:	2300      	movs	r3, #0
 800e43a:	4276      	negs	r6, r6
 800e43c:	1a36      	subs	r6, r6, r0
 800e43e:	4699      	mov	r9, r3
 800e440:	469b      	mov	fp, r3
 800e442:	e779      	b.n	800e338 <__aeabi_fdiv+0x30>
 800e444:	464a      	mov	r2, r9
 800e446:	2303      	movs	r3, #3
 800e448:	431a      	orrs	r2, r3
 800e44a:	4691      	mov	r9, r2
 800e44c:	2103      	movs	r1, #3
 800e44e:	e786      	b.n	800e35e <__aeabi_fdiv+0x56>
 800e450:	0028      	movs	r0, r5
 800e452:	f000 fb61 	bl	800eb18 <__clzsi2>
 800e456:	1f43      	subs	r3, r0, #5
 800e458:	1836      	adds	r6, r6, r0
 800e45a:	409d      	lsls	r5, r3
 800e45c:	3676      	adds	r6, #118	; 0x76
 800e45e:	2100      	movs	r1, #0
 800e460:	e77d      	b.n	800e35e <__aeabi_fdiv+0x56>
 800e462:	2480      	movs	r4, #128	; 0x80
 800e464:	2300      	movs	r3, #0
 800e466:	03e4      	lsls	r4, r4, #15
 800e468:	22ff      	movs	r2, #255	; 0xff
 800e46a:	e7ac      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e46c:	2500      	movs	r5, #0
 800e46e:	2380      	movs	r3, #128	; 0x80
 800e470:	03db      	lsls	r3, r3, #15
 800e472:	421c      	tst	r4, r3
 800e474:	d028      	beq.n	800e4c8 <__aeabi_fdiv+0x1c0>
 800e476:	421d      	tst	r5, r3
 800e478:	d126      	bne.n	800e4c8 <__aeabi_fdiv+0x1c0>
 800e47a:	432b      	orrs	r3, r5
 800e47c:	025c      	lsls	r4, r3, #9
 800e47e:	0a64      	lsrs	r4, r4, #9
 800e480:	4643      	mov	r3, r8
 800e482:	22ff      	movs	r2, #255	; 0xff
 800e484:	e79f      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e486:	0162      	lsls	r2, r4, #5
 800e488:	016c      	lsls	r4, r5, #5
 800e48a:	42a2      	cmp	r2, r4
 800e48c:	d224      	bcs.n	800e4d8 <__aeabi_fdiv+0x1d0>
 800e48e:	211b      	movs	r1, #27
 800e490:	2500      	movs	r5, #0
 800e492:	3e01      	subs	r6, #1
 800e494:	2701      	movs	r7, #1
 800e496:	0010      	movs	r0, r2
 800e498:	006d      	lsls	r5, r5, #1
 800e49a:	0052      	lsls	r2, r2, #1
 800e49c:	2800      	cmp	r0, #0
 800e49e:	db01      	blt.n	800e4a4 <__aeabi_fdiv+0x19c>
 800e4a0:	4294      	cmp	r4, r2
 800e4a2:	d801      	bhi.n	800e4a8 <__aeabi_fdiv+0x1a0>
 800e4a4:	1b12      	subs	r2, r2, r4
 800e4a6:	433d      	orrs	r5, r7
 800e4a8:	3901      	subs	r1, #1
 800e4aa:	2900      	cmp	r1, #0
 800e4ac:	d1f3      	bne.n	800e496 <__aeabi_fdiv+0x18e>
 800e4ae:	0014      	movs	r4, r2
 800e4b0:	1e62      	subs	r2, r4, #1
 800e4b2:	4194      	sbcs	r4, r2
 800e4b4:	4325      	orrs	r5, r4
 800e4b6:	e76d      	b.n	800e394 <__aeabi_fdiv+0x8c>
 800e4b8:	46ba      	mov	sl, r7
 800e4ba:	4659      	mov	r1, fp
 800e4bc:	0025      	movs	r5, r4
 800e4be:	4653      	mov	r3, sl
 800e4c0:	2902      	cmp	r1, #2
 800e4c2:	d000      	beq.n	800e4c6 <__aeabi_fdiv+0x1be>
 800e4c4:	e761      	b.n	800e38a <__aeabi_fdiv+0x82>
 800e4c6:	e77c      	b.n	800e3c2 <__aeabi_fdiv+0xba>
 800e4c8:	2380      	movs	r3, #128	; 0x80
 800e4ca:	03db      	lsls	r3, r3, #15
 800e4cc:	431c      	orrs	r4, r3
 800e4ce:	0264      	lsls	r4, r4, #9
 800e4d0:	0a64      	lsrs	r4, r4, #9
 800e4d2:	003b      	movs	r3, r7
 800e4d4:	22ff      	movs	r2, #255	; 0xff
 800e4d6:	e776      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e4d8:	1b12      	subs	r2, r2, r4
 800e4da:	211a      	movs	r1, #26
 800e4dc:	2501      	movs	r5, #1
 800e4de:	e7d9      	b.n	800e494 <__aeabi_fdiv+0x18c>
 800e4e0:	369e      	adds	r6, #158	; 0x9e
 800e4e2:	002a      	movs	r2, r5
 800e4e4:	40b5      	lsls	r5, r6
 800e4e6:	002c      	movs	r4, r5
 800e4e8:	40c2      	lsrs	r2, r0
 800e4ea:	1e65      	subs	r5, r4, #1
 800e4ec:	41ac      	sbcs	r4, r5
 800e4ee:	4314      	orrs	r4, r2
 800e4f0:	0762      	lsls	r2, r4, #29
 800e4f2:	d004      	beq.n	800e4fe <__aeabi_fdiv+0x1f6>
 800e4f4:	220f      	movs	r2, #15
 800e4f6:	4022      	ands	r2, r4
 800e4f8:	2a04      	cmp	r2, #4
 800e4fa:	d000      	beq.n	800e4fe <__aeabi_fdiv+0x1f6>
 800e4fc:	3404      	adds	r4, #4
 800e4fe:	0162      	lsls	r2, r4, #5
 800e500:	d403      	bmi.n	800e50a <__aeabi_fdiv+0x202>
 800e502:	01a4      	lsls	r4, r4, #6
 800e504:	0a64      	lsrs	r4, r4, #9
 800e506:	2200      	movs	r2, #0
 800e508:	e75d      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e50a:	2201      	movs	r2, #1
 800e50c:	2400      	movs	r4, #0
 800e50e:	e75a      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e510:	2480      	movs	r4, #128	; 0x80
 800e512:	03e4      	lsls	r4, r4, #15
 800e514:	432c      	orrs	r4, r5
 800e516:	0264      	lsls	r4, r4, #9
 800e518:	0a64      	lsrs	r4, r4, #9
 800e51a:	22ff      	movs	r2, #255	; 0xff
 800e51c:	e753      	b.n	800e3c6 <__aeabi_fdiv+0xbe>
 800e51e:	46c0      	nop			; (mov r8, r8)
 800e520:	0801b968 	.word	0x0801b968
 800e524:	f7ffffff 	.word	0xf7ffffff
 800e528:	0801b9a8 	.word	0x0801b9a8

0800e52c <__aeabi_fmul>:
 800e52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e52e:	464e      	mov	r6, r9
 800e530:	4657      	mov	r7, sl
 800e532:	4645      	mov	r5, r8
 800e534:	46de      	mov	lr, fp
 800e536:	b5e0      	push	{r5, r6, r7, lr}
 800e538:	0243      	lsls	r3, r0, #9
 800e53a:	0a5b      	lsrs	r3, r3, #9
 800e53c:	0045      	lsls	r5, r0, #1
 800e53e:	b083      	sub	sp, #12
 800e540:	1c0f      	adds	r7, r1, #0
 800e542:	4699      	mov	r9, r3
 800e544:	0e2d      	lsrs	r5, r5, #24
 800e546:	0fc6      	lsrs	r6, r0, #31
 800e548:	2d00      	cmp	r5, #0
 800e54a:	d057      	beq.n	800e5fc <__aeabi_fmul+0xd0>
 800e54c:	2dff      	cmp	r5, #255	; 0xff
 800e54e:	d024      	beq.n	800e59a <__aeabi_fmul+0x6e>
 800e550:	2080      	movs	r0, #128	; 0x80
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	04c0      	lsls	r0, r0, #19
 800e556:	4318      	orrs	r0, r3
 800e558:	2300      	movs	r3, #0
 800e55a:	4681      	mov	r9, r0
 800e55c:	469a      	mov	sl, r3
 800e55e:	469b      	mov	fp, r3
 800e560:	3d7f      	subs	r5, #127	; 0x7f
 800e562:	027c      	lsls	r4, r7, #9
 800e564:	007a      	lsls	r2, r7, #1
 800e566:	0ffb      	lsrs	r3, r7, #31
 800e568:	0a64      	lsrs	r4, r4, #9
 800e56a:	0e12      	lsrs	r2, r2, #24
 800e56c:	4698      	mov	r8, r3
 800e56e:	d023      	beq.n	800e5b8 <__aeabi_fmul+0x8c>
 800e570:	2aff      	cmp	r2, #255	; 0xff
 800e572:	d04b      	beq.n	800e60c <__aeabi_fmul+0xe0>
 800e574:	00e3      	lsls	r3, r4, #3
 800e576:	2480      	movs	r4, #128	; 0x80
 800e578:	2000      	movs	r0, #0
 800e57a:	04e4      	lsls	r4, r4, #19
 800e57c:	3a7f      	subs	r2, #127	; 0x7f
 800e57e:	431c      	orrs	r4, r3
 800e580:	18ad      	adds	r5, r5, r2
 800e582:	1c6b      	adds	r3, r5, #1
 800e584:	4647      	mov	r7, r8
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	4653      	mov	r3, sl
 800e58a:	4077      	eors	r7, r6
 800e58c:	003a      	movs	r2, r7
 800e58e:	2b0f      	cmp	r3, #15
 800e590:	d848      	bhi.n	800e624 <__aeabi_fmul+0xf8>
 800e592:	497d      	ldr	r1, [pc, #500]	; (800e788 <__aeabi_fmul+0x25c>)
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	58cb      	ldr	r3, [r1, r3]
 800e598:	469f      	mov	pc, r3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d000      	beq.n	800e5a0 <__aeabi_fmul+0x74>
 800e59e:	e085      	b.n	800e6ac <__aeabi_fmul+0x180>
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	469a      	mov	sl, r3
 800e5a4:	3b06      	subs	r3, #6
 800e5a6:	469b      	mov	fp, r3
 800e5a8:	027c      	lsls	r4, r7, #9
 800e5aa:	007a      	lsls	r2, r7, #1
 800e5ac:	0ffb      	lsrs	r3, r7, #31
 800e5ae:	25ff      	movs	r5, #255	; 0xff
 800e5b0:	0a64      	lsrs	r4, r4, #9
 800e5b2:	0e12      	lsrs	r2, r2, #24
 800e5b4:	4698      	mov	r8, r3
 800e5b6:	d1db      	bne.n	800e570 <__aeabi_fmul+0x44>
 800e5b8:	2c00      	cmp	r4, #0
 800e5ba:	d000      	beq.n	800e5be <__aeabi_fmul+0x92>
 800e5bc:	e090      	b.n	800e6e0 <__aeabi_fmul+0x1b4>
 800e5be:	4652      	mov	r2, sl
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	431a      	orrs	r2, r3
 800e5c4:	4692      	mov	sl, r2
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	e7db      	b.n	800e582 <__aeabi_fmul+0x56>
 800e5ca:	464c      	mov	r4, r9
 800e5cc:	4658      	mov	r0, fp
 800e5ce:	0017      	movs	r7, r2
 800e5d0:	2802      	cmp	r0, #2
 800e5d2:	d024      	beq.n	800e61e <__aeabi_fmul+0xf2>
 800e5d4:	2803      	cmp	r0, #3
 800e5d6:	d100      	bne.n	800e5da <__aeabi_fmul+0xae>
 800e5d8:	e0cf      	b.n	800e77a <__aeabi_fmul+0x24e>
 800e5da:	2200      	movs	r2, #0
 800e5dc:	2300      	movs	r3, #0
 800e5de:	2801      	cmp	r0, #1
 800e5e0:	d14d      	bne.n	800e67e <__aeabi_fmul+0x152>
 800e5e2:	0258      	lsls	r0, r3, #9
 800e5e4:	05d2      	lsls	r2, r2, #23
 800e5e6:	0a40      	lsrs	r0, r0, #9
 800e5e8:	07ff      	lsls	r7, r7, #31
 800e5ea:	4310      	orrs	r0, r2
 800e5ec:	4338      	orrs	r0, r7
 800e5ee:	b003      	add	sp, #12
 800e5f0:	bc3c      	pop	{r2, r3, r4, r5}
 800e5f2:	4690      	mov	r8, r2
 800e5f4:	4699      	mov	r9, r3
 800e5f6:	46a2      	mov	sl, r4
 800e5f8:	46ab      	mov	fp, r5
 800e5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d15b      	bne.n	800e6b8 <__aeabi_fmul+0x18c>
 800e600:	2304      	movs	r3, #4
 800e602:	469a      	mov	sl, r3
 800e604:	3b03      	subs	r3, #3
 800e606:	2500      	movs	r5, #0
 800e608:	469b      	mov	fp, r3
 800e60a:	e7aa      	b.n	800e562 <__aeabi_fmul+0x36>
 800e60c:	35ff      	adds	r5, #255	; 0xff
 800e60e:	2c00      	cmp	r4, #0
 800e610:	d160      	bne.n	800e6d4 <__aeabi_fmul+0x1a8>
 800e612:	4652      	mov	r2, sl
 800e614:	2302      	movs	r3, #2
 800e616:	431a      	orrs	r2, r3
 800e618:	4692      	mov	sl, r2
 800e61a:	2002      	movs	r0, #2
 800e61c:	e7b1      	b.n	800e582 <__aeabi_fmul+0x56>
 800e61e:	22ff      	movs	r2, #255	; 0xff
 800e620:	2300      	movs	r3, #0
 800e622:	e7de      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e624:	464b      	mov	r3, r9
 800e626:	0c1b      	lsrs	r3, r3, #16
 800e628:	469c      	mov	ip, r3
 800e62a:	464b      	mov	r3, r9
 800e62c:	0426      	lsls	r6, r4, #16
 800e62e:	0c36      	lsrs	r6, r6, #16
 800e630:	0418      	lsls	r0, r3, #16
 800e632:	4661      	mov	r1, ip
 800e634:	0033      	movs	r3, r6
 800e636:	0c22      	lsrs	r2, r4, #16
 800e638:	4664      	mov	r4, ip
 800e63a:	0c00      	lsrs	r0, r0, #16
 800e63c:	4343      	muls	r3, r0
 800e63e:	434e      	muls	r6, r1
 800e640:	4350      	muls	r0, r2
 800e642:	4354      	muls	r4, r2
 800e644:	1980      	adds	r0, r0, r6
 800e646:	0c1a      	lsrs	r2, r3, #16
 800e648:	1812      	adds	r2, r2, r0
 800e64a:	4296      	cmp	r6, r2
 800e64c:	d903      	bls.n	800e656 <__aeabi_fmul+0x12a>
 800e64e:	2180      	movs	r1, #128	; 0x80
 800e650:	0249      	lsls	r1, r1, #9
 800e652:	468c      	mov	ip, r1
 800e654:	4464      	add	r4, ip
 800e656:	041b      	lsls	r3, r3, #16
 800e658:	0c1b      	lsrs	r3, r3, #16
 800e65a:	0410      	lsls	r0, r2, #16
 800e65c:	18c0      	adds	r0, r0, r3
 800e65e:	0183      	lsls	r3, r0, #6
 800e660:	1e5e      	subs	r6, r3, #1
 800e662:	41b3      	sbcs	r3, r6
 800e664:	0e80      	lsrs	r0, r0, #26
 800e666:	4318      	orrs	r0, r3
 800e668:	0c13      	lsrs	r3, r2, #16
 800e66a:	191b      	adds	r3, r3, r4
 800e66c:	019b      	lsls	r3, r3, #6
 800e66e:	4303      	orrs	r3, r0
 800e670:	001c      	movs	r4, r3
 800e672:	0123      	lsls	r3, r4, #4
 800e674:	d579      	bpl.n	800e76a <__aeabi_fmul+0x23e>
 800e676:	2301      	movs	r3, #1
 800e678:	0862      	lsrs	r2, r4, #1
 800e67a:	401c      	ands	r4, r3
 800e67c:	4314      	orrs	r4, r2
 800e67e:	9a01      	ldr	r2, [sp, #4]
 800e680:	327f      	adds	r2, #127	; 0x7f
 800e682:	2a00      	cmp	r2, #0
 800e684:	dd4d      	ble.n	800e722 <__aeabi_fmul+0x1f6>
 800e686:	0763      	lsls	r3, r4, #29
 800e688:	d004      	beq.n	800e694 <__aeabi_fmul+0x168>
 800e68a:	230f      	movs	r3, #15
 800e68c:	4023      	ands	r3, r4
 800e68e:	2b04      	cmp	r3, #4
 800e690:	d000      	beq.n	800e694 <__aeabi_fmul+0x168>
 800e692:	3404      	adds	r4, #4
 800e694:	0123      	lsls	r3, r4, #4
 800e696:	d503      	bpl.n	800e6a0 <__aeabi_fmul+0x174>
 800e698:	4b3c      	ldr	r3, [pc, #240]	; (800e78c <__aeabi_fmul+0x260>)
 800e69a:	9a01      	ldr	r2, [sp, #4]
 800e69c:	401c      	ands	r4, r3
 800e69e:	3280      	adds	r2, #128	; 0x80
 800e6a0:	2afe      	cmp	r2, #254	; 0xfe
 800e6a2:	dcbc      	bgt.n	800e61e <__aeabi_fmul+0xf2>
 800e6a4:	01a3      	lsls	r3, r4, #6
 800e6a6:	0a5b      	lsrs	r3, r3, #9
 800e6a8:	b2d2      	uxtb	r2, r2
 800e6aa:	e79a      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e6ac:	230c      	movs	r3, #12
 800e6ae:	469a      	mov	sl, r3
 800e6b0:	3b09      	subs	r3, #9
 800e6b2:	25ff      	movs	r5, #255	; 0xff
 800e6b4:	469b      	mov	fp, r3
 800e6b6:	e754      	b.n	800e562 <__aeabi_fmul+0x36>
 800e6b8:	0018      	movs	r0, r3
 800e6ba:	f000 fa2d 	bl	800eb18 <__clzsi2>
 800e6be:	464a      	mov	r2, r9
 800e6c0:	1f43      	subs	r3, r0, #5
 800e6c2:	2576      	movs	r5, #118	; 0x76
 800e6c4:	409a      	lsls	r2, r3
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	426d      	negs	r5, r5
 800e6ca:	4691      	mov	r9, r2
 800e6cc:	1a2d      	subs	r5, r5, r0
 800e6ce:	469a      	mov	sl, r3
 800e6d0:	469b      	mov	fp, r3
 800e6d2:	e746      	b.n	800e562 <__aeabi_fmul+0x36>
 800e6d4:	4652      	mov	r2, sl
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	431a      	orrs	r2, r3
 800e6da:	4692      	mov	sl, r2
 800e6dc:	2003      	movs	r0, #3
 800e6de:	e750      	b.n	800e582 <__aeabi_fmul+0x56>
 800e6e0:	0020      	movs	r0, r4
 800e6e2:	f000 fa19 	bl	800eb18 <__clzsi2>
 800e6e6:	1f43      	subs	r3, r0, #5
 800e6e8:	1a2d      	subs	r5, r5, r0
 800e6ea:	409c      	lsls	r4, r3
 800e6ec:	3d76      	subs	r5, #118	; 0x76
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	e747      	b.n	800e582 <__aeabi_fmul+0x56>
 800e6f2:	2380      	movs	r3, #128	; 0x80
 800e6f4:	2700      	movs	r7, #0
 800e6f6:	03db      	lsls	r3, r3, #15
 800e6f8:	22ff      	movs	r2, #255	; 0xff
 800e6fa:	e772      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e6fc:	4642      	mov	r2, r8
 800e6fe:	e766      	b.n	800e5ce <__aeabi_fmul+0xa2>
 800e700:	464c      	mov	r4, r9
 800e702:	0032      	movs	r2, r6
 800e704:	4658      	mov	r0, fp
 800e706:	e762      	b.n	800e5ce <__aeabi_fmul+0xa2>
 800e708:	2380      	movs	r3, #128	; 0x80
 800e70a:	464a      	mov	r2, r9
 800e70c:	03db      	lsls	r3, r3, #15
 800e70e:	421a      	tst	r2, r3
 800e710:	d022      	beq.n	800e758 <__aeabi_fmul+0x22c>
 800e712:	421c      	tst	r4, r3
 800e714:	d120      	bne.n	800e758 <__aeabi_fmul+0x22c>
 800e716:	4323      	orrs	r3, r4
 800e718:	025b      	lsls	r3, r3, #9
 800e71a:	0a5b      	lsrs	r3, r3, #9
 800e71c:	4647      	mov	r7, r8
 800e71e:	22ff      	movs	r2, #255	; 0xff
 800e720:	e75f      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e722:	2301      	movs	r3, #1
 800e724:	1a9a      	subs	r2, r3, r2
 800e726:	2a1b      	cmp	r2, #27
 800e728:	dc21      	bgt.n	800e76e <__aeabi_fmul+0x242>
 800e72a:	0023      	movs	r3, r4
 800e72c:	9901      	ldr	r1, [sp, #4]
 800e72e:	40d3      	lsrs	r3, r2
 800e730:	319e      	adds	r1, #158	; 0x9e
 800e732:	408c      	lsls	r4, r1
 800e734:	001a      	movs	r2, r3
 800e736:	0023      	movs	r3, r4
 800e738:	1e5c      	subs	r4, r3, #1
 800e73a:	41a3      	sbcs	r3, r4
 800e73c:	4313      	orrs	r3, r2
 800e73e:	075a      	lsls	r2, r3, #29
 800e740:	d004      	beq.n	800e74c <__aeabi_fmul+0x220>
 800e742:	220f      	movs	r2, #15
 800e744:	401a      	ands	r2, r3
 800e746:	2a04      	cmp	r2, #4
 800e748:	d000      	beq.n	800e74c <__aeabi_fmul+0x220>
 800e74a:	3304      	adds	r3, #4
 800e74c:	015a      	lsls	r2, r3, #5
 800e74e:	d411      	bmi.n	800e774 <__aeabi_fmul+0x248>
 800e750:	019b      	lsls	r3, r3, #6
 800e752:	0a5b      	lsrs	r3, r3, #9
 800e754:	2200      	movs	r2, #0
 800e756:	e744      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e758:	2380      	movs	r3, #128	; 0x80
 800e75a:	464a      	mov	r2, r9
 800e75c:	03db      	lsls	r3, r3, #15
 800e75e:	4313      	orrs	r3, r2
 800e760:	025b      	lsls	r3, r3, #9
 800e762:	0a5b      	lsrs	r3, r3, #9
 800e764:	0037      	movs	r7, r6
 800e766:	22ff      	movs	r2, #255	; 0xff
 800e768:	e73b      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e76a:	9501      	str	r5, [sp, #4]
 800e76c:	e787      	b.n	800e67e <__aeabi_fmul+0x152>
 800e76e:	2200      	movs	r2, #0
 800e770:	2300      	movs	r3, #0
 800e772:	e736      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e774:	2201      	movs	r2, #1
 800e776:	2300      	movs	r3, #0
 800e778:	e733      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e77a:	2380      	movs	r3, #128	; 0x80
 800e77c:	03db      	lsls	r3, r3, #15
 800e77e:	4323      	orrs	r3, r4
 800e780:	025b      	lsls	r3, r3, #9
 800e782:	0a5b      	lsrs	r3, r3, #9
 800e784:	22ff      	movs	r2, #255	; 0xff
 800e786:	e72c      	b.n	800e5e2 <__aeabi_fmul+0xb6>
 800e788:	0801b9e8 	.word	0x0801b9e8
 800e78c:	f7ffffff 	.word	0xf7ffffff

0800e790 <__aeabi_fsub>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	4647      	mov	r7, r8
 800e794:	46ce      	mov	lr, r9
 800e796:	0044      	lsls	r4, r0, #1
 800e798:	0fc2      	lsrs	r2, r0, #31
 800e79a:	b580      	push	{r7, lr}
 800e79c:	0247      	lsls	r7, r0, #9
 800e79e:	0248      	lsls	r0, r1, #9
 800e7a0:	0a40      	lsrs	r0, r0, #9
 800e7a2:	4684      	mov	ip, r0
 800e7a4:	4666      	mov	r6, ip
 800e7a6:	0048      	lsls	r0, r1, #1
 800e7a8:	0a7f      	lsrs	r7, r7, #9
 800e7aa:	0e24      	lsrs	r4, r4, #24
 800e7ac:	00f6      	lsls	r6, r6, #3
 800e7ae:	0025      	movs	r5, r4
 800e7b0:	4690      	mov	r8, r2
 800e7b2:	00fb      	lsls	r3, r7, #3
 800e7b4:	0e00      	lsrs	r0, r0, #24
 800e7b6:	0fc9      	lsrs	r1, r1, #31
 800e7b8:	46b1      	mov	r9, r6
 800e7ba:	28ff      	cmp	r0, #255	; 0xff
 800e7bc:	d100      	bne.n	800e7c0 <__aeabi_fsub+0x30>
 800e7be:	e085      	b.n	800e8cc <__aeabi_fsub+0x13c>
 800e7c0:	2601      	movs	r6, #1
 800e7c2:	4071      	eors	r1, r6
 800e7c4:	1a26      	subs	r6, r4, r0
 800e7c6:	4291      	cmp	r1, r2
 800e7c8:	d057      	beq.n	800e87a <__aeabi_fsub+0xea>
 800e7ca:	2e00      	cmp	r6, #0
 800e7cc:	dd43      	ble.n	800e856 <__aeabi_fsub+0xc6>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	d000      	beq.n	800e7d4 <__aeabi_fsub+0x44>
 800e7d2:	e07f      	b.n	800e8d4 <__aeabi_fsub+0x144>
 800e7d4:	4649      	mov	r1, r9
 800e7d6:	2900      	cmp	r1, #0
 800e7d8:	d100      	bne.n	800e7dc <__aeabi_fsub+0x4c>
 800e7da:	e0aa      	b.n	800e932 <__aeabi_fsub+0x1a2>
 800e7dc:	3e01      	subs	r6, #1
 800e7de:	2e00      	cmp	r6, #0
 800e7e0:	d000      	beq.n	800e7e4 <__aeabi_fsub+0x54>
 800e7e2:	e0f7      	b.n	800e9d4 <__aeabi_fsub+0x244>
 800e7e4:	1a5b      	subs	r3, r3, r1
 800e7e6:	015a      	lsls	r2, r3, #5
 800e7e8:	d400      	bmi.n	800e7ec <__aeabi_fsub+0x5c>
 800e7ea:	e08b      	b.n	800e904 <__aeabi_fsub+0x174>
 800e7ec:	019b      	lsls	r3, r3, #6
 800e7ee:	099c      	lsrs	r4, r3, #6
 800e7f0:	0020      	movs	r0, r4
 800e7f2:	f000 f991 	bl	800eb18 <__clzsi2>
 800e7f6:	3805      	subs	r0, #5
 800e7f8:	4084      	lsls	r4, r0
 800e7fa:	4285      	cmp	r5, r0
 800e7fc:	dd00      	ble.n	800e800 <__aeabi_fsub+0x70>
 800e7fe:	e0d3      	b.n	800e9a8 <__aeabi_fsub+0x218>
 800e800:	1b45      	subs	r5, r0, r5
 800e802:	0023      	movs	r3, r4
 800e804:	2020      	movs	r0, #32
 800e806:	3501      	adds	r5, #1
 800e808:	40eb      	lsrs	r3, r5
 800e80a:	1b45      	subs	r5, r0, r5
 800e80c:	40ac      	lsls	r4, r5
 800e80e:	1e62      	subs	r2, r4, #1
 800e810:	4194      	sbcs	r4, r2
 800e812:	4323      	orrs	r3, r4
 800e814:	2407      	movs	r4, #7
 800e816:	2500      	movs	r5, #0
 800e818:	401c      	ands	r4, r3
 800e81a:	2201      	movs	r2, #1
 800e81c:	4641      	mov	r1, r8
 800e81e:	400a      	ands	r2, r1
 800e820:	2c00      	cmp	r4, #0
 800e822:	d004      	beq.n	800e82e <__aeabi_fsub+0x9e>
 800e824:	210f      	movs	r1, #15
 800e826:	4019      	ands	r1, r3
 800e828:	2904      	cmp	r1, #4
 800e82a:	d000      	beq.n	800e82e <__aeabi_fsub+0x9e>
 800e82c:	3304      	adds	r3, #4
 800e82e:	0159      	lsls	r1, r3, #5
 800e830:	d400      	bmi.n	800e834 <__aeabi_fsub+0xa4>
 800e832:	e080      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e834:	3501      	adds	r5, #1
 800e836:	b2ec      	uxtb	r4, r5
 800e838:	2dff      	cmp	r5, #255	; 0xff
 800e83a:	d000      	beq.n	800e83e <__aeabi_fsub+0xae>
 800e83c:	e0a3      	b.n	800e986 <__aeabi_fsub+0x1f6>
 800e83e:	24ff      	movs	r4, #255	; 0xff
 800e840:	2300      	movs	r3, #0
 800e842:	025b      	lsls	r3, r3, #9
 800e844:	05e4      	lsls	r4, r4, #23
 800e846:	0a58      	lsrs	r0, r3, #9
 800e848:	07d2      	lsls	r2, r2, #31
 800e84a:	4320      	orrs	r0, r4
 800e84c:	4310      	orrs	r0, r2
 800e84e:	bc0c      	pop	{r2, r3}
 800e850:	4690      	mov	r8, r2
 800e852:	4699      	mov	r9, r3
 800e854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e856:	2e00      	cmp	r6, #0
 800e858:	d174      	bne.n	800e944 <__aeabi_fsub+0x1b4>
 800e85a:	1c60      	adds	r0, r4, #1
 800e85c:	b2c0      	uxtb	r0, r0
 800e85e:	2801      	cmp	r0, #1
 800e860:	dc00      	bgt.n	800e864 <__aeabi_fsub+0xd4>
 800e862:	e0a7      	b.n	800e9b4 <__aeabi_fsub+0x224>
 800e864:	464a      	mov	r2, r9
 800e866:	1a9c      	subs	r4, r3, r2
 800e868:	0162      	lsls	r2, r4, #5
 800e86a:	d500      	bpl.n	800e86e <__aeabi_fsub+0xde>
 800e86c:	e0b6      	b.n	800e9dc <__aeabi_fsub+0x24c>
 800e86e:	2c00      	cmp	r4, #0
 800e870:	d1be      	bne.n	800e7f0 <__aeabi_fsub+0x60>
 800e872:	2200      	movs	r2, #0
 800e874:	2400      	movs	r4, #0
 800e876:	2300      	movs	r3, #0
 800e878:	e7e3      	b.n	800e842 <__aeabi_fsub+0xb2>
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	dc00      	bgt.n	800e880 <__aeabi_fsub+0xf0>
 800e87e:	e085      	b.n	800e98c <__aeabi_fsub+0x1fc>
 800e880:	2800      	cmp	r0, #0
 800e882:	d046      	beq.n	800e912 <__aeabi_fsub+0x182>
 800e884:	2cff      	cmp	r4, #255	; 0xff
 800e886:	d049      	beq.n	800e91c <__aeabi_fsub+0x18c>
 800e888:	2280      	movs	r2, #128	; 0x80
 800e88a:	4648      	mov	r0, r9
 800e88c:	04d2      	lsls	r2, r2, #19
 800e88e:	4310      	orrs	r0, r2
 800e890:	4681      	mov	r9, r0
 800e892:	2201      	movs	r2, #1
 800e894:	2e1b      	cmp	r6, #27
 800e896:	dc09      	bgt.n	800e8ac <__aeabi_fsub+0x11c>
 800e898:	2020      	movs	r0, #32
 800e89a:	464c      	mov	r4, r9
 800e89c:	1b80      	subs	r0, r0, r6
 800e89e:	4084      	lsls	r4, r0
 800e8a0:	464a      	mov	r2, r9
 800e8a2:	0020      	movs	r0, r4
 800e8a4:	40f2      	lsrs	r2, r6
 800e8a6:	1e44      	subs	r4, r0, #1
 800e8a8:	41a0      	sbcs	r0, r4
 800e8aa:	4302      	orrs	r2, r0
 800e8ac:	189b      	adds	r3, r3, r2
 800e8ae:	015a      	lsls	r2, r3, #5
 800e8b0:	d528      	bpl.n	800e904 <__aeabi_fsub+0x174>
 800e8b2:	3501      	adds	r5, #1
 800e8b4:	2dff      	cmp	r5, #255	; 0xff
 800e8b6:	d100      	bne.n	800e8ba <__aeabi_fsub+0x12a>
 800e8b8:	e0a8      	b.n	800ea0c <__aeabi_fsub+0x27c>
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	2407      	movs	r4, #7
 800e8be:	4994      	ldr	r1, [pc, #592]	; (800eb10 <__aeabi_fsub+0x380>)
 800e8c0:	401a      	ands	r2, r3
 800e8c2:	085b      	lsrs	r3, r3, #1
 800e8c4:	400b      	ands	r3, r1
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	401c      	ands	r4, r3
 800e8ca:	e7a6      	b.n	800e81a <__aeabi_fsub+0x8a>
 800e8cc:	2e00      	cmp	r6, #0
 800e8ce:	d000      	beq.n	800e8d2 <__aeabi_fsub+0x142>
 800e8d0:	e778      	b.n	800e7c4 <__aeabi_fsub+0x34>
 800e8d2:	e775      	b.n	800e7c0 <__aeabi_fsub+0x30>
 800e8d4:	2cff      	cmp	r4, #255	; 0xff
 800e8d6:	d054      	beq.n	800e982 <__aeabi_fsub+0x1f2>
 800e8d8:	2280      	movs	r2, #128	; 0x80
 800e8da:	4649      	mov	r1, r9
 800e8dc:	04d2      	lsls	r2, r2, #19
 800e8de:	4311      	orrs	r1, r2
 800e8e0:	4689      	mov	r9, r1
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	2e1b      	cmp	r6, #27
 800e8e6:	dc09      	bgt.n	800e8fc <__aeabi_fsub+0x16c>
 800e8e8:	2120      	movs	r1, #32
 800e8ea:	4648      	mov	r0, r9
 800e8ec:	1b89      	subs	r1, r1, r6
 800e8ee:	4088      	lsls	r0, r1
 800e8f0:	464a      	mov	r2, r9
 800e8f2:	0001      	movs	r1, r0
 800e8f4:	40f2      	lsrs	r2, r6
 800e8f6:	1e48      	subs	r0, r1, #1
 800e8f8:	4181      	sbcs	r1, r0
 800e8fa:	430a      	orrs	r2, r1
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	d500      	bpl.n	800e904 <__aeabi_fsub+0x174>
 800e902:	e773      	b.n	800e7ec <__aeabi_fsub+0x5c>
 800e904:	2201      	movs	r2, #1
 800e906:	4641      	mov	r1, r8
 800e908:	400a      	ands	r2, r1
 800e90a:	0759      	lsls	r1, r3, #29
 800e90c:	d000      	beq.n	800e910 <__aeabi_fsub+0x180>
 800e90e:	e789      	b.n	800e824 <__aeabi_fsub+0x94>
 800e910:	e011      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e912:	4648      	mov	r0, r9
 800e914:	2800      	cmp	r0, #0
 800e916:	d158      	bne.n	800e9ca <__aeabi_fsub+0x23a>
 800e918:	2cff      	cmp	r4, #255	; 0xff
 800e91a:	d10c      	bne.n	800e936 <__aeabi_fsub+0x1a6>
 800e91c:	08db      	lsrs	r3, r3, #3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d100      	bne.n	800e924 <__aeabi_fsub+0x194>
 800e922:	e78c      	b.n	800e83e <__aeabi_fsub+0xae>
 800e924:	2080      	movs	r0, #128	; 0x80
 800e926:	03c0      	lsls	r0, r0, #15
 800e928:	4303      	orrs	r3, r0
 800e92a:	025b      	lsls	r3, r3, #9
 800e92c:	0a5b      	lsrs	r3, r3, #9
 800e92e:	24ff      	movs	r4, #255	; 0xff
 800e930:	e787      	b.n	800e842 <__aeabi_fsub+0xb2>
 800e932:	2cff      	cmp	r4, #255	; 0xff
 800e934:	d025      	beq.n	800e982 <__aeabi_fsub+0x1f2>
 800e936:	08db      	lsrs	r3, r3, #3
 800e938:	2dff      	cmp	r5, #255	; 0xff
 800e93a:	d0f0      	beq.n	800e91e <__aeabi_fsub+0x18e>
 800e93c:	025b      	lsls	r3, r3, #9
 800e93e:	0a5b      	lsrs	r3, r3, #9
 800e940:	b2ec      	uxtb	r4, r5
 800e942:	e77e      	b.n	800e842 <__aeabi_fsub+0xb2>
 800e944:	2c00      	cmp	r4, #0
 800e946:	d04d      	beq.n	800e9e4 <__aeabi_fsub+0x254>
 800e948:	28ff      	cmp	r0, #255	; 0xff
 800e94a:	d018      	beq.n	800e97e <__aeabi_fsub+0x1ee>
 800e94c:	2480      	movs	r4, #128	; 0x80
 800e94e:	04e4      	lsls	r4, r4, #19
 800e950:	4272      	negs	r2, r6
 800e952:	4323      	orrs	r3, r4
 800e954:	2a1b      	cmp	r2, #27
 800e956:	dd00      	ble.n	800e95a <__aeabi_fsub+0x1ca>
 800e958:	e0c4      	b.n	800eae4 <__aeabi_fsub+0x354>
 800e95a:	001c      	movs	r4, r3
 800e95c:	2520      	movs	r5, #32
 800e95e:	40d4      	lsrs	r4, r2
 800e960:	1aaa      	subs	r2, r5, r2
 800e962:	4093      	lsls	r3, r2
 800e964:	1e5a      	subs	r2, r3, #1
 800e966:	4193      	sbcs	r3, r2
 800e968:	4323      	orrs	r3, r4
 800e96a:	464a      	mov	r2, r9
 800e96c:	0005      	movs	r5, r0
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	4688      	mov	r8, r1
 800e972:	e738      	b.n	800e7e6 <__aeabi_fsub+0x56>
 800e974:	1c72      	adds	r2, r6, #1
 800e976:	d0f8      	beq.n	800e96a <__aeabi_fsub+0x1da>
 800e978:	43f2      	mvns	r2, r6
 800e97a:	28ff      	cmp	r0, #255	; 0xff
 800e97c:	d1ea      	bne.n	800e954 <__aeabi_fsub+0x1c4>
 800e97e:	000a      	movs	r2, r1
 800e980:	464b      	mov	r3, r9
 800e982:	25ff      	movs	r5, #255	; 0xff
 800e984:	e7d7      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e986:	019b      	lsls	r3, r3, #6
 800e988:	0a5b      	lsrs	r3, r3, #9
 800e98a:	e75a      	b.n	800e842 <__aeabi_fsub+0xb2>
 800e98c:	2e00      	cmp	r6, #0
 800e98e:	d141      	bne.n	800ea14 <__aeabi_fsub+0x284>
 800e990:	1c65      	adds	r5, r4, #1
 800e992:	b2e9      	uxtb	r1, r5
 800e994:	2901      	cmp	r1, #1
 800e996:	dd45      	ble.n	800ea24 <__aeabi_fsub+0x294>
 800e998:	2dff      	cmp	r5, #255	; 0xff
 800e99a:	d100      	bne.n	800e99e <__aeabi_fsub+0x20e>
 800e99c:	e74f      	b.n	800e83e <__aeabi_fsub+0xae>
 800e99e:	2407      	movs	r4, #7
 800e9a0:	444b      	add	r3, r9
 800e9a2:	085b      	lsrs	r3, r3, #1
 800e9a4:	401c      	ands	r4, r3
 800e9a6:	e738      	b.n	800e81a <__aeabi_fsub+0x8a>
 800e9a8:	2207      	movs	r2, #7
 800e9aa:	4b5a      	ldr	r3, [pc, #360]	; (800eb14 <__aeabi_fsub+0x384>)
 800e9ac:	1a2d      	subs	r5, r5, r0
 800e9ae:	4023      	ands	r3, r4
 800e9b0:	4014      	ands	r4, r2
 800e9b2:	e732      	b.n	800e81a <__aeabi_fsub+0x8a>
 800e9b4:	2c00      	cmp	r4, #0
 800e9b6:	d11d      	bne.n	800e9f4 <__aeabi_fsub+0x264>
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d17a      	bne.n	800eab2 <__aeabi_fsub+0x322>
 800e9bc:	464b      	mov	r3, r9
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d100      	bne.n	800e9c4 <__aeabi_fsub+0x234>
 800e9c2:	e091      	b.n	800eae8 <__aeabi_fsub+0x358>
 800e9c4:	000a      	movs	r2, r1
 800e9c6:	2500      	movs	r5, #0
 800e9c8:	e7b5      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e9ca:	3e01      	subs	r6, #1
 800e9cc:	2e00      	cmp	r6, #0
 800e9ce:	d119      	bne.n	800ea04 <__aeabi_fsub+0x274>
 800e9d0:	444b      	add	r3, r9
 800e9d2:	e76c      	b.n	800e8ae <__aeabi_fsub+0x11e>
 800e9d4:	2cff      	cmp	r4, #255	; 0xff
 800e9d6:	d184      	bne.n	800e8e2 <__aeabi_fsub+0x152>
 800e9d8:	25ff      	movs	r5, #255	; 0xff
 800e9da:	e7ac      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e9dc:	464a      	mov	r2, r9
 800e9de:	4688      	mov	r8, r1
 800e9e0:	1ad4      	subs	r4, r2, r3
 800e9e2:	e705      	b.n	800e7f0 <__aeabi_fsub+0x60>
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1c5      	bne.n	800e974 <__aeabi_fsub+0x1e4>
 800e9e8:	000a      	movs	r2, r1
 800e9ea:	28ff      	cmp	r0, #255	; 0xff
 800e9ec:	d0c8      	beq.n	800e980 <__aeabi_fsub+0x1f0>
 800e9ee:	0005      	movs	r5, r0
 800e9f0:	464b      	mov	r3, r9
 800e9f2:	e7a0      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d149      	bne.n	800ea8c <__aeabi_fsub+0x2fc>
 800e9f8:	464b      	mov	r3, r9
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d077      	beq.n	800eaee <__aeabi_fsub+0x35e>
 800e9fe:	000a      	movs	r2, r1
 800ea00:	25ff      	movs	r5, #255	; 0xff
 800ea02:	e798      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800ea04:	2cff      	cmp	r4, #255	; 0xff
 800ea06:	d000      	beq.n	800ea0a <__aeabi_fsub+0x27a>
 800ea08:	e743      	b.n	800e892 <__aeabi_fsub+0x102>
 800ea0a:	e787      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea0c:	000a      	movs	r2, r1
 800ea0e:	24ff      	movs	r4, #255	; 0xff
 800ea10:	2300      	movs	r3, #0
 800ea12:	e716      	b.n	800e842 <__aeabi_fsub+0xb2>
 800ea14:	2c00      	cmp	r4, #0
 800ea16:	d115      	bne.n	800ea44 <__aeabi_fsub+0x2b4>
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d157      	bne.n	800eacc <__aeabi_fsub+0x33c>
 800ea1c:	28ff      	cmp	r0, #255	; 0xff
 800ea1e:	d1e6      	bne.n	800e9ee <__aeabi_fsub+0x25e>
 800ea20:	464b      	mov	r3, r9
 800ea22:	e77b      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea24:	2c00      	cmp	r4, #0
 800ea26:	d120      	bne.n	800ea6a <__aeabi_fsub+0x2da>
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d057      	beq.n	800eadc <__aeabi_fsub+0x34c>
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	2900      	cmp	r1, #0
 800ea30:	d053      	beq.n	800eada <__aeabi_fsub+0x34a>
 800ea32:	444b      	add	r3, r9
 800ea34:	015a      	lsls	r2, r3, #5
 800ea36:	d568      	bpl.n	800eb0a <__aeabi_fsub+0x37a>
 800ea38:	2407      	movs	r4, #7
 800ea3a:	4a36      	ldr	r2, [pc, #216]	; (800eb14 <__aeabi_fsub+0x384>)
 800ea3c:	401c      	ands	r4, r3
 800ea3e:	2501      	movs	r5, #1
 800ea40:	4013      	ands	r3, r2
 800ea42:	e6ea      	b.n	800e81a <__aeabi_fsub+0x8a>
 800ea44:	28ff      	cmp	r0, #255	; 0xff
 800ea46:	d0eb      	beq.n	800ea20 <__aeabi_fsub+0x290>
 800ea48:	2280      	movs	r2, #128	; 0x80
 800ea4a:	04d2      	lsls	r2, r2, #19
 800ea4c:	4276      	negs	r6, r6
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	2e1b      	cmp	r6, #27
 800ea52:	dc53      	bgt.n	800eafc <__aeabi_fsub+0x36c>
 800ea54:	2520      	movs	r5, #32
 800ea56:	1bad      	subs	r5, r5, r6
 800ea58:	001a      	movs	r2, r3
 800ea5a:	40ab      	lsls	r3, r5
 800ea5c:	40f2      	lsrs	r2, r6
 800ea5e:	1e5c      	subs	r4, r3, #1
 800ea60:	41a3      	sbcs	r3, r4
 800ea62:	4313      	orrs	r3, r2
 800ea64:	444b      	add	r3, r9
 800ea66:	0005      	movs	r5, r0
 800ea68:	e721      	b.n	800e8ae <__aeabi_fsub+0x11e>
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d0d8      	beq.n	800ea20 <__aeabi_fsub+0x290>
 800ea6e:	4649      	mov	r1, r9
 800ea70:	2900      	cmp	r1, #0
 800ea72:	d100      	bne.n	800ea76 <__aeabi_fsub+0x2e6>
 800ea74:	e752      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea76:	2180      	movs	r1, #128	; 0x80
 800ea78:	03c9      	lsls	r1, r1, #15
 800ea7a:	420f      	tst	r7, r1
 800ea7c:	d100      	bne.n	800ea80 <__aeabi_fsub+0x2f0>
 800ea7e:	e74d      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea80:	4660      	mov	r0, ip
 800ea82:	4208      	tst	r0, r1
 800ea84:	d000      	beq.n	800ea88 <__aeabi_fsub+0x2f8>
 800ea86:	e749      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea88:	464b      	mov	r3, r9
 800ea8a:	e747      	b.n	800e91c <__aeabi_fsub+0x18c>
 800ea8c:	4648      	mov	r0, r9
 800ea8e:	25ff      	movs	r5, #255	; 0xff
 800ea90:	2800      	cmp	r0, #0
 800ea92:	d100      	bne.n	800ea96 <__aeabi_fsub+0x306>
 800ea94:	e74f      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800ea96:	2280      	movs	r2, #128	; 0x80
 800ea98:	03d2      	lsls	r2, r2, #15
 800ea9a:	4217      	tst	r7, r2
 800ea9c:	d004      	beq.n	800eaa8 <__aeabi_fsub+0x318>
 800ea9e:	4660      	mov	r0, ip
 800eaa0:	4210      	tst	r0, r2
 800eaa2:	d101      	bne.n	800eaa8 <__aeabi_fsub+0x318>
 800eaa4:	464b      	mov	r3, r9
 800eaa6:	4688      	mov	r8, r1
 800eaa8:	2201      	movs	r2, #1
 800eaaa:	4641      	mov	r1, r8
 800eaac:	25ff      	movs	r5, #255	; 0xff
 800eaae:	400a      	ands	r2, r1
 800eab0:	e741      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800eab2:	4648      	mov	r0, r9
 800eab4:	2800      	cmp	r0, #0
 800eab6:	d01f      	beq.n	800eaf8 <__aeabi_fsub+0x368>
 800eab8:	1a1a      	subs	r2, r3, r0
 800eaba:	0150      	lsls	r0, r2, #5
 800eabc:	d520      	bpl.n	800eb00 <__aeabi_fsub+0x370>
 800eabe:	464a      	mov	r2, r9
 800eac0:	2407      	movs	r4, #7
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	401c      	ands	r4, r3
 800eac6:	4688      	mov	r8, r1
 800eac8:	2500      	movs	r5, #0
 800eaca:	e6a6      	b.n	800e81a <__aeabi_fsub+0x8a>
 800eacc:	1c74      	adds	r4, r6, #1
 800eace:	d0c9      	beq.n	800ea64 <__aeabi_fsub+0x2d4>
 800ead0:	43f6      	mvns	r6, r6
 800ead2:	28ff      	cmp	r0, #255	; 0xff
 800ead4:	d1bc      	bne.n	800ea50 <__aeabi_fsub+0x2c0>
 800ead6:	464b      	mov	r3, r9
 800ead8:	e720      	b.n	800e91c <__aeabi_fsub+0x18c>
 800eada:	4699      	mov	r9, r3
 800eadc:	464b      	mov	r3, r9
 800eade:	2500      	movs	r5, #0
 800eae0:	08db      	lsrs	r3, r3, #3
 800eae2:	e72b      	b.n	800e93c <__aeabi_fsub+0x1ac>
 800eae4:	2301      	movs	r3, #1
 800eae6:	e740      	b.n	800e96a <__aeabi_fsub+0x1da>
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	e6a9      	b.n	800e842 <__aeabi_fsub+0xb2>
 800eaee:	2380      	movs	r3, #128	; 0x80
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	03db      	lsls	r3, r3, #15
 800eaf4:	24ff      	movs	r4, #255	; 0xff
 800eaf6:	e6a4      	b.n	800e842 <__aeabi_fsub+0xb2>
 800eaf8:	2500      	movs	r5, #0
 800eafa:	e71c      	b.n	800e936 <__aeabi_fsub+0x1a6>
 800eafc:	2301      	movs	r3, #1
 800eafe:	e7b1      	b.n	800ea64 <__aeabi_fsub+0x2d4>
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	d0f1      	beq.n	800eae8 <__aeabi_fsub+0x358>
 800eb04:	0013      	movs	r3, r2
 800eb06:	2500      	movs	r5, #0
 800eb08:	e6fc      	b.n	800e904 <__aeabi_fsub+0x174>
 800eb0a:	2500      	movs	r5, #0
 800eb0c:	e6fa      	b.n	800e904 <__aeabi_fsub+0x174>
 800eb0e:	46c0      	nop			; (mov r8, r8)
 800eb10:	7dffffff 	.word	0x7dffffff
 800eb14:	fbffffff 	.word	0xfbffffff

0800eb18 <__clzsi2>:
 800eb18:	211c      	movs	r1, #28
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	041b      	lsls	r3, r3, #16
 800eb1e:	4298      	cmp	r0, r3
 800eb20:	d301      	bcc.n	800eb26 <__clzsi2+0xe>
 800eb22:	0c00      	lsrs	r0, r0, #16
 800eb24:	3910      	subs	r1, #16
 800eb26:	0a1b      	lsrs	r3, r3, #8
 800eb28:	4298      	cmp	r0, r3
 800eb2a:	d301      	bcc.n	800eb30 <__clzsi2+0x18>
 800eb2c:	0a00      	lsrs	r0, r0, #8
 800eb2e:	3908      	subs	r1, #8
 800eb30:	091b      	lsrs	r3, r3, #4
 800eb32:	4298      	cmp	r0, r3
 800eb34:	d301      	bcc.n	800eb3a <__clzsi2+0x22>
 800eb36:	0900      	lsrs	r0, r0, #4
 800eb38:	3904      	subs	r1, #4
 800eb3a:	a202      	add	r2, pc, #8	; (adr r2, 800eb44 <__clzsi2+0x2c>)
 800eb3c:	5c10      	ldrb	r0, [r2, r0]
 800eb3e:	1840      	adds	r0, r0, r1
 800eb40:	4770      	bx	lr
 800eb42:	46c0      	nop			; (mov r8, r8)
 800eb44:	02020304 	.word	0x02020304
 800eb48:	01010101 	.word	0x01010101
	...

0800eb54 <__gnu_thumb1_case_sqi>:
 800eb54:	b402      	push	{r1}
 800eb56:	4671      	mov	r1, lr
 800eb58:	0849      	lsrs	r1, r1, #1
 800eb5a:	0049      	lsls	r1, r1, #1
 800eb5c:	5609      	ldrsb	r1, [r1, r0]
 800eb5e:	0049      	lsls	r1, r1, #1
 800eb60:	448e      	add	lr, r1
 800eb62:	bc02      	pop	{r1}
 800eb64:	4770      	bx	lr
 800eb66:	46c0      	nop			; (mov r8, r8)

0800eb68 <__gnu_thumb1_case_uqi>:
 800eb68:	b402      	push	{r1}
 800eb6a:	4671      	mov	r1, lr
 800eb6c:	0849      	lsrs	r1, r1, #1
 800eb6e:	0049      	lsls	r1, r1, #1
 800eb70:	5c09      	ldrb	r1, [r1, r0]
 800eb72:	0049      	lsls	r1, r1, #1
 800eb74:	448e      	add	lr, r1
 800eb76:	bc02      	pop	{r1}
 800eb78:	4770      	bx	lr
 800eb7a:	46c0      	nop			; (mov r8, r8)

0800eb7c <__gnu_thumb1_case_uhi>:
 800eb7c:	b403      	push	{r0, r1}
 800eb7e:	4671      	mov	r1, lr
 800eb80:	0849      	lsrs	r1, r1, #1
 800eb82:	0040      	lsls	r0, r0, #1
 800eb84:	0049      	lsls	r1, r1, #1
 800eb86:	5a09      	ldrh	r1, [r1, r0]
 800eb88:	0049      	lsls	r1, r1, #1
 800eb8a:	448e      	add	lr, r1
 800eb8c:	bc03      	pop	{r0, r1}
 800eb8e:	4770      	bx	lr

0800eb90 <__udivsi3>:
 800eb90:	2200      	movs	r2, #0
 800eb92:	0843      	lsrs	r3, r0, #1
 800eb94:	428b      	cmp	r3, r1
 800eb96:	d374      	bcc.n	800ec82 <__udivsi3+0xf2>
 800eb98:	0903      	lsrs	r3, r0, #4
 800eb9a:	428b      	cmp	r3, r1
 800eb9c:	d35f      	bcc.n	800ec5e <__udivsi3+0xce>
 800eb9e:	0a03      	lsrs	r3, r0, #8
 800eba0:	428b      	cmp	r3, r1
 800eba2:	d344      	bcc.n	800ec2e <__udivsi3+0x9e>
 800eba4:	0b03      	lsrs	r3, r0, #12
 800eba6:	428b      	cmp	r3, r1
 800eba8:	d328      	bcc.n	800ebfc <__udivsi3+0x6c>
 800ebaa:	0c03      	lsrs	r3, r0, #16
 800ebac:	428b      	cmp	r3, r1
 800ebae:	d30d      	bcc.n	800ebcc <__udivsi3+0x3c>
 800ebb0:	22ff      	movs	r2, #255	; 0xff
 800ebb2:	0209      	lsls	r1, r1, #8
 800ebb4:	ba12      	rev	r2, r2
 800ebb6:	0c03      	lsrs	r3, r0, #16
 800ebb8:	428b      	cmp	r3, r1
 800ebba:	d302      	bcc.n	800ebc2 <__udivsi3+0x32>
 800ebbc:	1212      	asrs	r2, r2, #8
 800ebbe:	0209      	lsls	r1, r1, #8
 800ebc0:	d065      	beq.n	800ec8e <__udivsi3+0xfe>
 800ebc2:	0b03      	lsrs	r3, r0, #12
 800ebc4:	428b      	cmp	r3, r1
 800ebc6:	d319      	bcc.n	800ebfc <__udivsi3+0x6c>
 800ebc8:	e000      	b.n	800ebcc <__udivsi3+0x3c>
 800ebca:	0a09      	lsrs	r1, r1, #8
 800ebcc:	0bc3      	lsrs	r3, r0, #15
 800ebce:	428b      	cmp	r3, r1
 800ebd0:	d301      	bcc.n	800ebd6 <__udivsi3+0x46>
 800ebd2:	03cb      	lsls	r3, r1, #15
 800ebd4:	1ac0      	subs	r0, r0, r3
 800ebd6:	4152      	adcs	r2, r2
 800ebd8:	0b83      	lsrs	r3, r0, #14
 800ebda:	428b      	cmp	r3, r1
 800ebdc:	d301      	bcc.n	800ebe2 <__udivsi3+0x52>
 800ebde:	038b      	lsls	r3, r1, #14
 800ebe0:	1ac0      	subs	r0, r0, r3
 800ebe2:	4152      	adcs	r2, r2
 800ebe4:	0b43      	lsrs	r3, r0, #13
 800ebe6:	428b      	cmp	r3, r1
 800ebe8:	d301      	bcc.n	800ebee <__udivsi3+0x5e>
 800ebea:	034b      	lsls	r3, r1, #13
 800ebec:	1ac0      	subs	r0, r0, r3
 800ebee:	4152      	adcs	r2, r2
 800ebf0:	0b03      	lsrs	r3, r0, #12
 800ebf2:	428b      	cmp	r3, r1
 800ebf4:	d301      	bcc.n	800ebfa <__udivsi3+0x6a>
 800ebf6:	030b      	lsls	r3, r1, #12
 800ebf8:	1ac0      	subs	r0, r0, r3
 800ebfa:	4152      	adcs	r2, r2
 800ebfc:	0ac3      	lsrs	r3, r0, #11
 800ebfe:	428b      	cmp	r3, r1
 800ec00:	d301      	bcc.n	800ec06 <__udivsi3+0x76>
 800ec02:	02cb      	lsls	r3, r1, #11
 800ec04:	1ac0      	subs	r0, r0, r3
 800ec06:	4152      	adcs	r2, r2
 800ec08:	0a83      	lsrs	r3, r0, #10
 800ec0a:	428b      	cmp	r3, r1
 800ec0c:	d301      	bcc.n	800ec12 <__udivsi3+0x82>
 800ec0e:	028b      	lsls	r3, r1, #10
 800ec10:	1ac0      	subs	r0, r0, r3
 800ec12:	4152      	adcs	r2, r2
 800ec14:	0a43      	lsrs	r3, r0, #9
 800ec16:	428b      	cmp	r3, r1
 800ec18:	d301      	bcc.n	800ec1e <__udivsi3+0x8e>
 800ec1a:	024b      	lsls	r3, r1, #9
 800ec1c:	1ac0      	subs	r0, r0, r3
 800ec1e:	4152      	adcs	r2, r2
 800ec20:	0a03      	lsrs	r3, r0, #8
 800ec22:	428b      	cmp	r3, r1
 800ec24:	d301      	bcc.n	800ec2a <__udivsi3+0x9a>
 800ec26:	020b      	lsls	r3, r1, #8
 800ec28:	1ac0      	subs	r0, r0, r3
 800ec2a:	4152      	adcs	r2, r2
 800ec2c:	d2cd      	bcs.n	800ebca <__udivsi3+0x3a>
 800ec2e:	09c3      	lsrs	r3, r0, #7
 800ec30:	428b      	cmp	r3, r1
 800ec32:	d301      	bcc.n	800ec38 <__udivsi3+0xa8>
 800ec34:	01cb      	lsls	r3, r1, #7
 800ec36:	1ac0      	subs	r0, r0, r3
 800ec38:	4152      	adcs	r2, r2
 800ec3a:	0983      	lsrs	r3, r0, #6
 800ec3c:	428b      	cmp	r3, r1
 800ec3e:	d301      	bcc.n	800ec44 <__udivsi3+0xb4>
 800ec40:	018b      	lsls	r3, r1, #6
 800ec42:	1ac0      	subs	r0, r0, r3
 800ec44:	4152      	adcs	r2, r2
 800ec46:	0943      	lsrs	r3, r0, #5
 800ec48:	428b      	cmp	r3, r1
 800ec4a:	d301      	bcc.n	800ec50 <__udivsi3+0xc0>
 800ec4c:	014b      	lsls	r3, r1, #5
 800ec4e:	1ac0      	subs	r0, r0, r3
 800ec50:	4152      	adcs	r2, r2
 800ec52:	0903      	lsrs	r3, r0, #4
 800ec54:	428b      	cmp	r3, r1
 800ec56:	d301      	bcc.n	800ec5c <__udivsi3+0xcc>
 800ec58:	010b      	lsls	r3, r1, #4
 800ec5a:	1ac0      	subs	r0, r0, r3
 800ec5c:	4152      	adcs	r2, r2
 800ec5e:	08c3      	lsrs	r3, r0, #3
 800ec60:	428b      	cmp	r3, r1
 800ec62:	d301      	bcc.n	800ec68 <__udivsi3+0xd8>
 800ec64:	00cb      	lsls	r3, r1, #3
 800ec66:	1ac0      	subs	r0, r0, r3
 800ec68:	4152      	adcs	r2, r2
 800ec6a:	0883      	lsrs	r3, r0, #2
 800ec6c:	428b      	cmp	r3, r1
 800ec6e:	d301      	bcc.n	800ec74 <__udivsi3+0xe4>
 800ec70:	008b      	lsls	r3, r1, #2
 800ec72:	1ac0      	subs	r0, r0, r3
 800ec74:	4152      	adcs	r2, r2
 800ec76:	0843      	lsrs	r3, r0, #1
 800ec78:	428b      	cmp	r3, r1
 800ec7a:	d301      	bcc.n	800ec80 <__udivsi3+0xf0>
 800ec7c:	004b      	lsls	r3, r1, #1
 800ec7e:	1ac0      	subs	r0, r0, r3
 800ec80:	4152      	adcs	r2, r2
 800ec82:	1a41      	subs	r1, r0, r1
 800ec84:	d200      	bcs.n	800ec88 <__udivsi3+0xf8>
 800ec86:	4601      	mov	r1, r0
 800ec88:	4152      	adcs	r2, r2
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	4770      	bx	lr
 800ec8e:	e7ff      	b.n	800ec90 <__udivsi3+0x100>
 800ec90:	b501      	push	{r0, lr}
 800ec92:	2000      	movs	r0, #0
 800ec94:	f000 f8f0 	bl	800ee78 <__aeabi_idiv0>
 800ec98:	bd02      	pop	{r1, pc}
 800ec9a:	46c0      	nop			; (mov r8, r8)

0800ec9c <__aeabi_uidivmod>:
 800ec9c:	2900      	cmp	r1, #0
 800ec9e:	d0f7      	beq.n	800ec90 <__udivsi3+0x100>
 800eca0:	e776      	b.n	800eb90 <__udivsi3>
 800eca2:	4770      	bx	lr

0800eca4 <__divsi3>:
 800eca4:	4603      	mov	r3, r0
 800eca6:	430b      	orrs	r3, r1
 800eca8:	d47f      	bmi.n	800edaa <__divsi3+0x106>
 800ecaa:	2200      	movs	r2, #0
 800ecac:	0843      	lsrs	r3, r0, #1
 800ecae:	428b      	cmp	r3, r1
 800ecb0:	d374      	bcc.n	800ed9c <__divsi3+0xf8>
 800ecb2:	0903      	lsrs	r3, r0, #4
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	d35f      	bcc.n	800ed78 <__divsi3+0xd4>
 800ecb8:	0a03      	lsrs	r3, r0, #8
 800ecba:	428b      	cmp	r3, r1
 800ecbc:	d344      	bcc.n	800ed48 <__divsi3+0xa4>
 800ecbe:	0b03      	lsrs	r3, r0, #12
 800ecc0:	428b      	cmp	r3, r1
 800ecc2:	d328      	bcc.n	800ed16 <__divsi3+0x72>
 800ecc4:	0c03      	lsrs	r3, r0, #16
 800ecc6:	428b      	cmp	r3, r1
 800ecc8:	d30d      	bcc.n	800ece6 <__divsi3+0x42>
 800ecca:	22ff      	movs	r2, #255	; 0xff
 800eccc:	0209      	lsls	r1, r1, #8
 800ecce:	ba12      	rev	r2, r2
 800ecd0:	0c03      	lsrs	r3, r0, #16
 800ecd2:	428b      	cmp	r3, r1
 800ecd4:	d302      	bcc.n	800ecdc <__divsi3+0x38>
 800ecd6:	1212      	asrs	r2, r2, #8
 800ecd8:	0209      	lsls	r1, r1, #8
 800ecda:	d065      	beq.n	800eda8 <__divsi3+0x104>
 800ecdc:	0b03      	lsrs	r3, r0, #12
 800ecde:	428b      	cmp	r3, r1
 800ece0:	d319      	bcc.n	800ed16 <__divsi3+0x72>
 800ece2:	e000      	b.n	800ece6 <__divsi3+0x42>
 800ece4:	0a09      	lsrs	r1, r1, #8
 800ece6:	0bc3      	lsrs	r3, r0, #15
 800ece8:	428b      	cmp	r3, r1
 800ecea:	d301      	bcc.n	800ecf0 <__divsi3+0x4c>
 800ecec:	03cb      	lsls	r3, r1, #15
 800ecee:	1ac0      	subs	r0, r0, r3
 800ecf0:	4152      	adcs	r2, r2
 800ecf2:	0b83      	lsrs	r3, r0, #14
 800ecf4:	428b      	cmp	r3, r1
 800ecf6:	d301      	bcc.n	800ecfc <__divsi3+0x58>
 800ecf8:	038b      	lsls	r3, r1, #14
 800ecfa:	1ac0      	subs	r0, r0, r3
 800ecfc:	4152      	adcs	r2, r2
 800ecfe:	0b43      	lsrs	r3, r0, #13
 800ed00:	428b      	cmp	r3, r1
 800ed02:	d301      	bcc.n	800ed08 <__divsi3+0x64>
 800ed04:	034b      	lsls	r3, r1, #13
 800ed06:	1ac0      	subs	r0, r0, r3
 800ed08:	4152      	adcs	r2, r2
 800ed0a:	0b03      	lsrs	r3, r0, #12
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	d301      	bcc.n	800ed14 <__divsi3+0x70>
 800ed10:	030b      	lsls	r3, r1, #12
 800ed12:	1ac0      	subs	r0, r0, r3
 800ed14:	4152      	adcs	r2, r2
 800ed16:	0ac3      	lsrs	r3, r0, #11
 800ed18:	428b      	cmp	r3, r1
 800ed1a:	d301      	bcc.n	800ed20 <__divsi3+0x7c>
 800ed1c:	02cb      	lsls	r3, r1, #11
 800ed1e:	1ac0      	subs	r0, r0, r3
 800ed20:	4152      	adcs	r2, r2
 800ed22:	0a83      	lsrs	r3, r0, #10
 800ed24:	428b      	cmp	r3, r1
 800ed26:	d301      	bcc.n	800ed2c <__divsi3+0x88>
 800ed28:	028b      	lsls	r3, r1, #10
 800ed2a:	1ac0      	subs	r0, r0, r3
 800ed2c:	4152      	adcs	r2, r2
 800ed2e:	0a43      	lsrs	r3, r0, #9
 800ed30:	428b      	cmp	r3, r1
 800ed32:	d301      	bcc.n	800ed38 <__divsi3+0x94>
 800ed34:	024b      	lsls	r3, r1, #9
 800ed36:	1ac0      	subs	r0, r0, r3
 800ed38:	4152      	adcs	r2, r2
 800ed3a:	0a03      	lsrs	r3, r0, #8
 800ed3c:	428b      	cmp	r3, r1
 800ed3e:	d301      	bcc.n	800ed44 <__divsi3+0xa0>
 800ed40:	020b      	lsls	r3, r1, #8
 800ed42:	1ac0      	subs	r0, r0, r3
 800ed44:	4152      	adcs	r2, r2
 800ed46:	d2cd      	bcs.n	800ece4 <__divsi3+0x40>
 800ed48:	09c3      	lsrs	r3, r0, #7
 800ed4a:	428b      	cmp	r3, r1
 800ed4c:	d301      	bcc.n	800ed52 <__divsi3+0xae>
 800ed4e:	01cb      	lsls	r3, r1, #7
 800ed50:	1ac0      	subs	r0, r0, r3
 800ed52:	4152      	adcs	r2, r2
 800ed54:	0983      	lsrs	r3, r0, #6
 800ed56:	428b      	cmp	r3, r1
 800ed58:	d301      	bcc.n	800ed5e <__divsi3+0xba>
 800ed5a:	018b      	lsls	r3, r1, #6
 800ed5c:	1ac0      	subs	r0, r0, r3
 800ed5e:	4152      	adcs	r2, r2
 800ed60:	0943      	lsrs	r3, r0, #5
 800ed62:	428b      	cmp	r3, r1
 800ed64:	d301      	bcc.n	800ed6a <__divsi3+0xc6>
 800ed66:	014b      	lsls	r3, r1, #5
 800ed68:	1ac0      	subs	r0, r0, r3
 800ed6a:	4152      	adcs	r2, r2
 800ed6c:	0903      	lsrs	r3, r0, #4
 800ed6e:	428b      	cmp	r3, r1
 800ed70:	d301      	bcc.n	800ed76 <__divsi3+0xd2>
 800ed72:	010b      	lsls	r3, r1, #4
 800ed74:	1ac0      	subs	r0, r0, r3
 800ed76:	4152      	adcs	r2, r2
 800ed78:	08c3      	lsrs	r3, r0, #3
 800ed7a:	428b      	cmp	r3, r1
 800ed7c:	d301      	bcc.n	800ed82 <__divsi3+0xde>
 800ed7e:	00cb      	lsls	r3, r1, #3
 800ed80:	1ac0      	subs	r0, r0, r3
 800ed82:	4152      	adcs	r2, r2
 800ed84:	0883      	lsrs	r3, r0, #2
 800ed86:	428b      	cmp	r3, r1
 800ed88:	d301      	bcc.n	800ed8e <__divsi3+0xea>
 800ed8a:	008b      	lsls	r3, r1, #2
 800ed8c:	1ac0      	subs	r0, r0, r3
 800ed8e:	4152      	adcs	r2, r2
 800ed90:	0843      	lsrs	r3, r0, #1
 800ed92:	428b      	cmp	r3, r1
 800ed94:	d301      	bcc.n	800ed9a <__divsi3+0xf6>
 800ed96:	004b      	lsls	r3, r1, #1
 800ed98:	1ac0      	subs	r0, r0, r3
 800ed9a:	4152      	adcs	r2, r2
 800ed9c:	1a41      	subs	r1, r0, r1
 800ed9e:	d200      	bcs.n	800eda2 <__divsi3+0xfe>
 800eda0:	4601      	mov	r1, r0
 800eda2:	4152      	adcs	r2, r2
 800eda4:	4610      	mov	r0, r2
 800eda6:	4770      	bx	lr
 800eda8:	e05d      	b.n	800ee66 <__divsi3+0x1c2>
 800edaa:	0fca      	lsrs	r2, r1, #31
 800edac:	d000      	beq.n	800edb0 <__divsi3+0x10c>
 800edae:	4249      	negs	r1, r1
 800edb0:	1003      	asrs	r3, r0, #32
 800edb2:	d300      	bcc.n	800edb6 <__divsi3+0x112>
 800edb4:	4240      	negs	r0, r0
 800edb6:	4053      	eors	r3, r2
 800edb8:	2200      	movs	r2, #0
 800edba:	469c      	mov	ip, r3
 800edbc:	0903      	lsrs	r3, r0, #4
 800edbe:	428b      	cmp	r3, r1
 800edc0:	d32d      	bcc.n	800ee1e <__divsi3+0x17a>
 800edc2:	0a03      	lsrs	r3, r0, #8
 800edc4:	428b      	cmp	r3, r1
 800edc6:	d312      	bcc.n	800edee <__divsi3+0x14a>
 800edc8:	22fc      	movs	r2, #252	; 0xfc
 800edca:	0189      	lsls	r1, r1, #6
 800edcc:	ba12      	rev	r2, r2
 800edce:	0a03      	lsrs	r3, r0, #8
 800edd0:	428b      	cmp	r3, r1
 800edd2:	d30c      	bcc.n	800edee <__divsi3+0x14a>
 800edd4:	0189      	lsls	r1, r1, #6
 800edd6:	1192      	asrs	r2, r2, #6
 800edd8:	428b      	cmp	r3, r1
 800edda:	d308      	bcc.n	800edee <__divsi3+0x14a>
 800eddc:	0189      	lsls	r1, r1, #6
 800edde:	1192      	asrs	r2, r2, #6
 800ede0:	428b      	cmp	r3, r1
 800ede2:	d304      	bcc.n	800edee <__divsi3+0x14a>
 800ede4:	0189      	lsls	r1, r1, #6
 800ede6:	d03a      	beq.n	800ee5e <__divsi3+0x1ba>
 800ede8:	1192      	asrs	r2, r2, #6
 800edea:	e000      	b.n	800edee <__divsi3+0x14a>
 800edec:	0989      	lsrs	r1, r1, #6
 800edee:	09c3      	lsrs	r3, r0, #7
 800edf0:	428b      	cmp	r3, r1
 800edf2:	d301      	bcc.n	800edf8 <__divsi3+0x154>
 800edf4:	01cb      	lsls	r3, r1, #7
 800edf6:	1ac0      	subs	r0, r0, r3
 800edf8:	4152      	adcs	r2, r2
 800edfa:	0983      	lsrs	r3, r0, #6
 800edfc:	428b      	cmp	r3, r1
 800edfe:	d301      	bcc.n	800ee04 <__divsi3+0x160>
 800ee00:	018b      	lsls	r3, r1, #6
 800ee02:	1ac0      	subs	r0, r0, r3
 800ee04:	4152      	adcs	r2, r2
 800ee06:	0943      	lsrs	r3, r0, #5
 800ee08:	428b      	cmp	r3, r1
 800ee0a:	d301      	bcc.n	800ee10 <__divsi3+0x16c>
 800ee0c:	014b      	lsls	r3, r1, #5
 800ee0e:	1ac0      	subs	r0, r0, r3
 800ee10:	4152      	adcs	r2, r2
 800ee12:	0903      	lsrs	r3, r0, #4
 800ee14:	428b      	cmp	r3, r1
 800ee16:	d301      	bcc.n	800ee1c <__divsi3+0x178>
 800ee18:	010b      	lsls	r3, r1, #4
 800ee1a:	1ac0      	subs	r0, r0, r3
 800ee1c:	4152      	adcs	r2, r2
 800ee1e:	08c3      	lsrs	r3, r0, #3
 800ee20:	428b      	cmp	r3, r1
 800ee22:	d301      	bcc.n	800ee28 <__divsi3+0x184>
 800ee24:	00cb      	lsls	r3, r1, #3
 800ee26:	1ac0      	subs	r0, r0, r3
 800ee28:	4152      	adcs	r2, r2
 800ee2a:	0883      	lsrs	r3, r0, #2
 800ee2c:	428b      	cmp	r3, r1
 800ee2e:	d301      	bcc.n	800ee34 <__divsi3+0x190>
 800ee30:	008b      	lsls	r3, r1, #2
 800ee32:	1ac0      	subs	r0, r0, r3
 800ee34:	4152      	adcs	r2, r2
 800ee36:	d2d9      	bcs.n	800edec <__divsi3+0x148>
 800ee38:	0843      	lsrs	r3, r0, #1
 800ee3a:	428b      	cmp	r3, r1
 800ee3c:	d301      	bcc.n	800ee42 <__divsi3+0x19e>
 800ee3e:	004b      	lsls	r3, r1, #1
 800ee40:	1ac0      	subs	r0, r0, r3
 800ee42:	4152      	adcs	r2, r2
 800ee44:	1a41      	subs	r1, r0, r1
 800ee46:	d200      	bcs.n	800ee4a <__divsi3+0x1a6>
 800ee48:	4601      	mov	r1, r0
 800ee4a:	4663      	mov	r3, ip
 800ee4c:	4152      	adcs	r2, r2
 800ee4e:	105b      	asrs	r3, r3, #1
 800ee50:	4610      	mov	r0, r2
 800ee52:	d301      	bcc.n	800ee58 <__divsi3+0x1b4>
 800ee54:	4240      	negs	r0, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d500      	bpl.n	800ee5c <__divsi3+0x1b8>
 800ee5a:	4249      	negs	r1, r1
 800ee5c:	4770      	bx	lr
 800ee5e:	4663      	mov	r3, ip
 800ee60:	105b      	asrs	r3, r3, #1
 800ee62:	d300      	bcc.n	800ee66 <__divsi3+0x1c2>
 800ee64:	4240      	negs	r0, r0
 800ee66:	b501      	push	{r0, lr}
 800ee68:	2000      	movs	r0, #0
 800ee6a:	f000 f805 	bl	800ee78 <__aeabi_idiv0>
 800ee6e:	bd02      	pop	{r1, pc}

0800ee70 <__aeabi_idivmod>:
 800ee70:	2900      	cmp	r1, #0
 800ee72:	d0f8      	beq.n	800ee66 <__divsi3+0x1c2>
 800ee74:	e716      	b.n	800eca4 <__divsi3>
 800ee76:	4770      	bx	lr

0800ee78 <__aeabi_idiv0>:
 800ee78:	4770      	bx	lr
 800ee7a:	46c0      	nop			; (mov r8, r8)

0800ee7c <__aeabi_cdrcmple>:
 800ee7c:	4684      	mov	ip, r0
 800ee7e:	1c10      	adds	r0, r2, #0
 800ee80:	4662      	mov	r2, ip
 800ee82:	468c      	mov	ip, r1
 800ee84:	1c19      	adds	r1, r3, #0
 800ee86:	4663      	mov	r3, ip
 800ee88:	e000      	b.n	800ee8c <__aeabi_cdcmpeq>
 800ee8a:	46c0      	nop			; (mov r8, r8)

0800ee8c <__aeabi_cdcmpeq>:
 800ee8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee8e:	f001 f9ab 	bl	80101e8 <__ledf2>
 800ee92:	2800      	cmp	r0, #0
 800ee94:	d401      	bmi.n	800ee9a <__aeabi_cdcmpeq+0xe>
 800ee96:	2100      	movs	r1, #0
 800ee98:	42c8      	cmn	r0, r1
 800ee9a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800ee9c <__aeabi_dcmpeq>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	f001 f903 	bl	80100a8 <__eqdf2>
 800eea2:	4240      	negs	r0, r0
 800eea4:	3001      	adds	r0, #1
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <__aeabi_dcmplt>:
 800eea8:	b510      	push	{r4, lr}
 800eeaa:	f001 f99d 	bl	80101e8 <__ledf2>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	db01      	blt.n	800eeb6 <__aeabi_dcmplt+0xe>
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	bd10      	pop	{r4, pc}
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	bd10      	pop	{r4, pc}
 800eeba:	46c0      	nop			; (mov r8, r8)

0800eebc <__aeabi_dcmple>:
 800eebc:	b510      	push	{r4, lr}
 800eebe:	f001 f993 	bl	80101e8 <__ledf2>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	dd01      	ble.n	800eeca <__aeabi_dcmple+0xe>
 800eec6:	2000      	movs	r0, #0
 800eec8:	bd10      	pop	{r4, pc}
 800eeca:	2001      	movs	r0, #1
 800eecc:	bd10      	pop	{r4, pc}
 800eece:	46c0      	nop			; (mov r8, r8)

0800eed0 <__aeabi_dcmpgt>:
 800eed0:	b510      	push	{r4, lr}
 800eed2:	f001 f925 	bl	8010120 <__gedf2>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	dc01      	bgt.n	800eede <__aeabi_dcmpgt+0xe>
 800eeda:	2000      	movs	r0, #0
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	2001      	movs	r0, #1
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	46c0      	nop			; (mov r8, r8)

0800eee4 <__aeabi_dcmpge>:
 800eee4:	b510      	push	{r4, lr}
 800eee6:	f001 f91b 	bl	8010120 <__gedf2>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	da01      	bge.n	800eef2 <__aeabi_dcmpge+0xe>
 800eeee:	2000      	movs	r0, #0
 800eef0:	bd10      	pop	{r4, pc}
 800eef2:	2001      	movs	r0, #1
 800eef4:	bd10      	pop	{r4, pc}
 800eef6:	46c0      	nop			; (mov r8, r8)

0800eef8 <__aeabi_cfrcmple>:
 800eef8:	4684      	mov	ip, r0
 800eefa:	1c08      	adds	r0, r1, #0
 800eefc:	4661      	mov	r1, ip
 800eefe:	e7ff      	b.n	800ef00 <__aeabi_cfcmpeq>

0800ef00 <__aeabi_cfcmpeq>:
 800ef00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef02:	f000 f9a3 	bl	800f24c <__lesf2>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d401      	bmi.n	800ef0e <__aeabi_cfcmpeq+0xe>
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	42c8      	cmn	r0, r1
 800ef0e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800ef10 <__aeabi_fcmpeq>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	f000 f925 	bl	800f160 <__eqsf2>
 800ef16:	4240      	negs	r0, r0
 800ef18:	3001      	adds	r0, #1
 800ef1a:	bd10      	pop	{r4, pc}

0800ef1c <__aeabi_fcmplt>:
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	f000 f995 	bl	800f24c <__lesf2>
 800ef22:	2800      	cmp	r0, #0
 800ef24:	db01      	blt.n	800ef2a <__aeabi_fcmplt+0xe>
 800ef26:	2000      	movs	r0, #0
 800ef28:	bd10      	pop	{r4, pc}
 800ef2a:	2001      	movs	r0, #1
 800ef2c:	bd10      	pop	{r4, pc}
 800ef2e:	46c0      	nop			; (mov r8, r8)

0800ef30 <__aeabi_fcmple>:
 800ef30:	b510      	push	{r4, lr}
 800ef32:	f000 f98b 	bl	800f24c <__lesf2>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	dd01      	ble.n	800ef3e <__aeabi_fcmple+0xe>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	2001      	movs	r0, #1
 800ef40:	bd10      	pop	{r4, pc}
 800ef42:	46c0      	nop			; (mov r8, r8)

0800ef44 <__aeabi_fcmpgt>:
 800ef44:	b510      	push	{r4, lr}
 800ef46:	f000 f933 	bl	800f1b0 <__gesf2>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	dc01      	bgt.n	800ef52 <__aeabi_fcmpgt+0xe>
 800ef4e:	2000      	movs	r0, #0
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	2001      	movs	r0, #1
 800ef54:	bd10      	pop	{r4, pc}
 800ef56:	46c0      	nop			; (mov r8, r8)

0800ef58 <__aeabi_fcmpge>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	f000 f929 	bl	800f1b0 <__gesf2>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	da01      	bge.n	800ef66 <__aeabi_fcmpge+0xe>
 800ef62:	2000      	movs	r0, #0
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	2001      	movs	r0, #1
 800ef68:	bd10      	pop	{r4, pc}
 800ef6a:	46c0      	nop			; (mov r8, r8)

0800ef6c <__aeabi_uldivmod>:
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d111      	bne.n	800ef94 <__aeabi_uldivmod+0x28>
 800ef70:	2a00      	cmp	r2, #0
 800ef72:	d10f      	bne.n	800ef94 <__aeabi_uldivmod+0x28>
 800ef74:	2900      	cmp	r1, #0
 800ef76:	d100      	bne.n	800ef7a <__aeabi_uldivmod+0xe>
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d002      	beq.n	800ef82 <__aeabi_uldivmod+0x16>
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	43c9      	mvns	r1, r1
 800ef80:	1c08      	adds	r0, r1, #0
 800ef82:	b407      	push	{r0, r1, r2}
 800ef84:	4802      	ldr	r0, [pc, #8]	; (800ef90 <__aeabi_uldivmod+0x24>)
 800ef86:	a102      	add	r1, pc, #8	; (adr r1, 800ef90 <__aeabi_uldivmod+0x24>)
 800ef88:	1840      	adds	r0, r0, r1
 800ef8a:	9002      	str	r0, [sp, #8]
 800ef8c:	bd03      	pop	{r0, r1, pc}
 800ef8e:	46c0      	nop			; (mov r8, r8)
 800ef90:	fffffee9 	.word	0xfffffee9
 800ef94:	b403      	push	{r0, r1}
 800ef96:	4668      	mov	r0, sp
 800ef98:	b501      	push	{r0, lr}
 800ef9a:	9802      	ldr	r0, [sp, #8]
 800ef9c:	f000 f81e 	bl	800efdc <__udivmoddi4>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	469e      	mov	lr, r3
 800efa4:	b002      	add	sp, #8
 800efa6:	bc0c      	pop	{r2, r3}
 800efa8:	4770      	bx	lr
 800efaa:	46c0      	nop			; (mov r8, r8)

0800efac <__aeabi_f2uiz>:
 800efac:	219e      	movs	r1, #158	; 0x9e
 800efae:	b510      	push	{r4, lr}
 800efb0:	05c9      	lsls	r1, r1, #23
 800efb2:	1c04      	adds	r4, r0, #0
 800efb4:	f7ff ffd0 	bl	800ef58 <__aeabi_fcmpge>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d103      	bne.n	800efc4 <__aeabi_f2uiz+0x18>
 800efbc:	1c20      	adds	r0, r4, #0
 800efbe:	f000 f9ab 	bl	800f318 <__aeabi_f2iz>
 800efc2:	bd10      	pop	{r4, pc}
 800efc4:	219e      	movs	r1, #158	; 0x9e
 800efc6:	1c20      	adds	r0, r4, #0
 800efc8:	05c9      	lsls	r1, r1, #23
 800efca:	f7ff fbe1 	bl	800e790 <__aeabi_fsub>
 800efce:	f000 f9a3 	bl	800f318 <__aeabi_f2iz>
 800efd2:	2380      	movs	r3, #128	; 0x80
 800efd4:	061b      	lsls	r3, r3, #24
 800efd6:	469c      	mov	ip, r3
 800efd8:	4460      	add	r0, ip
 800efda:	e7f2      	b.n	800efc2 <__aeabi_f2uiz+0x16>

0800efdc <__udivmoddi4>:
 800efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efde:	464f      	mov	r7, r9
 800efe0:	4646      	mov	r6, r8
 800efe2:	46d6      	mov	lr, sl
 800efe4:	b5c0      	push	{r6, r7, lr}
 800efe6:	0004      	movs	r4, r0
 800efe8:	b082      	sub	sp, #8
 800efea:	000d      	movs	r5, r1
 800efec:	4691      	mov	r9, r2
 800efee:	4698      	mov	r8, r3
 800eff0:	428b      	cmp	r3, r1
 800eff2:	d82f      	bhi.n	800f054 <__udivmoddi4+0x78>
 800eff4:	d02c      	beq.n	800f050 <__udivmoddi4+0x74>
 800eff6:	4641      	mov	r1, r8
 800eff8:	4648      	mov	r0, r9
 800effa:	f002 f8ab 	bl	8011154 <__clzdi2>
 800effe:	0029      	movs	r1, r5
 800f000:	0006      	movs	r6, r0
 800f002:	0020      	movs	r0, r4
 800f004:	f002 f8a6 	bl	8011154 <__clzdi2>
 800f008:	1a33      	subs	r3, r6, r0
 800f00a:	469c      	mov	ip, r3
 800f00c:	3b20      	subs	r3, #32
 800f00e:	469a      	mov	sl, r3
 800f010:	d500      	bpl.n	800f014 <__udivmoddi4+0x38>
 800f012:	e076      	b.n	800f102 <__udivmoddi4+0x126>
 800f014:	464b      	mov	r3, r9
 800f016:	4652      	mov	r2, sl
 800f018:	4093      	lsls	r3, r2
 800f01a:	001f      	movs	r7, r3
 800f01c:	464b      	mov	r3, r9
 800f01e:	4662      	mov	r2, ip
 800f020:	4093      	lsls	r3, r2
 800f022:	001e      	movs	r6, r3
 800f024:	42af      	cmp	r7, r5
 800f026:	d828      	bhi.n	800f07a <__udivmoddi4+0x9e>
 800f028:	d025      	beq.n	800f076 <__udivmoddi4+0x9a>
 800f02a:	4653      	mov	r3, sl
 800f02c:	1ba4      	subs	r4, r4, r6
 800f02e:	41bd      	sbcs	r5, r7
 800f030:	2b00      	cmp	r3, #0
 800f032:	da00      	bge.n	800f036 <__udivmoddi4+0x5a>
 800f034:	e07b      	b.n	800f12e <__udivmoddi4+0x152>
 800f036:	2200      	movs	r2, #0
 800f038:	2300      	movs	r3, #0
 800f03a:	9200      	str	r2, [sp, #0]
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	2301      	movs	r3, #1
 800f040:	4652      	mov	r2, sl
 800f042:	4093      	lsls	r3, r2
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	2301      	movs	r3, #1
 800f048:	4662      	mov	r2, ip
 800f04a:	4093      	lsls	r3, r2
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	e018      	b.n	800f082 <__udivmoddi4+0xa6>
 800f050:	4282      	cmp	r2, r0
 800f052:	d9d0      	bls.n	800eff6 <__udivmoddi4+0x1a>
 800f054:	2200      	movs	r2, #0
 800f056:	2300      	movs	r3, #0
 800f058:	9200      	str	r2, [sp, #0]
 800f05a:	9301      	str	r3, [sp, #4]
 800f05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <__udivmoddi4+0x8a>
 800f062:	601c      	str	r4, [r3, #0]
 800f064:	605d      	str	r5, [r3, #4]
 800f066:	9800      	ldr	r0, [sp, #0]
 800f068:	9901      	ldr	r1, [sp, #4]
 800f06a:	b002      	add	sp, #8
 800f06c:	bc1c      	pop	{r2, r3, r4}
 800f06e:	4690      	mov	r8, r2
 800f070:	4699      	mov	r9, r3
 800f072:	46a2      	mov	sl, r4
 800f074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f076:	42a3      	cmp	r3, r4
 800f078:	d9d7      	bls.n	800f02a <__udivmoddi4+0x4e>
 800f07a:	2200      	movs	r2, #0
 800f07c:	2300      	movs	r3, #0
 800f07e:	9200      	str	r2, [sp, #0]
 800f080:	9301      	str	r3, [sp, #4]
 800f082:	4663      	mov	r3, ip
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0e9      	beq.n	800f05c <__udivmoddi4+0x80>
 800f088:	07fb      	lsls	r3, r7, #31
 800f08a:	4698      	mov	r8, r3
 800f08c:	4641      	mov	r1, r8
 800f08e:	0872      	lsrs	r2, r6, #1
 800f090:	430a      	orrs	r2, r1
 800f092:	087b      	lsrs	r3, r7, #1
 800f094:	4666      	mov	r6, ip
 800f096:	e00e      	b.n	800f0b6 <__udivmoddi4+0xda>
 800f098:	42ab      	cmp	r3, r5
 800f09a:	d101      	bne.n	800f0a0 <__udivmoddi4+0xc4>
 800f09c:	42a2      	cmp	r2, r4
 800f09e:	d80c      	bhi.n	800f0ba <__udivmoddi4+0xde>
 800f0a0:	1aa4      	subs	r4, r4, r2
 800f0a2:	419d      	sbcs	r5, r3
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	1924      	adds	r4, r4, r4
 800f0a8:	416d      	adcs	r5, r5
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	3e01      	subs	r6, #1
 800f0ae:	1824      	adds	r4, r4, r0
 800f0b0:	414d      	adcs	r5, r1
 800f0b2:	2e00      	cmp	r6, #0
 800f0b4:	d006      	beq.n	800f0c4 <__udivmoddi4+0xe8>
 800f0b6:	42ab      	cmp	r3, r5
 800f0b8:	d9ee      	bls.n	800f098 <__udivmoddi4+0xbc>
 800f0ba:	3e01      	subs	r6, #1
 800f0bc:	1924      	adds	r4, r4, r4
 800f0be:	416d      	adcs	r5, r5
 800f0c0:	2e00      	cmp	r6, #0
 800f0c2:	d1f8      	bne.n	800f0b6 <__udivmoddi4+0xda>
 800f0c4:	9800      	ldr	r0, [sp, #0]
 800f0c6:	9901      	ldr	r1, [sp, #4]
 800f0c8:	4653      	mov	r3, sl
 800f0ca:	1900      	adds	r0, r0, r4
 800f0cc:	4169      	adcs	r1, r5
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	db23      	blt.n	800f11a <__udivmoddi4+0x13e>
 800f0d2:	002b      	movs	r3, r5
 800f0d4:	4652      	mov	r2, sl
 800f0d6:	40d3      	lsrs	r3, r2
 800f0d8:	002a      	movs	r2, r5
 800f0da:	4664      	mov	r4, ip
 800f0dc:	40e2      	lsrs	r2, r4
 800f0de:	001c      	movs	r4, r3
 800f0e0:	4653      	mov	r3, sl
 800f0e2:	0015      	movs	r5, r2
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	db2d      	blt.n	800f144 <__udivmoddi4+0x168>
 800f0e8:	0026      	movs	r6, r4
 800f0ea:	4657      	mov	r7, sl
 800f0ec:	40be      	lsls	r6, r7
 800f0ee:	0033      	movs	r3, r6
 800f0f0:	0026      	movs	r6, r4
 800f0f2:	4667      	mov	r7, ip
 800f0f4:	40be      	lsls	r6, r7
 800f0f6:	0032      	movs	r2, r6
 800f0f8:	1a80      	subs	r0, r0, r2
 800f0fa:	4199      	sbcs	r1, r3
 800f0fc:	9000      	str	r0, [sp, #0]
 800f0fe:	9101      	str	r1, [sp, #4]
 800f100:	e7ac      	b.n	800f05c <__udivmoddi4+0x80>
 800f102:	4662      	mov	r2, ip
 800f104:	2320      	movs	r3, #32
 800f106:	1a9b      	subs	r3, r3, r2
 800f108:	464a      	mov	r2, r9
 800f10a:	40da      	lsrs	r2, r3
 800f10c:	4661      	mov	r1, ip
 800f10e:	0013      	movs	r3, r2
 800f110:	4642      	mov	r2, r8
 800f112:	408a      	lsls	r2, r1
 800f114:	0017      	movs	r7, r2
 800f116:	431f      	orrs	r7, r3
 800f118:	e780      	b.n	800f01c <__udivmoddi4+0x40>
 800f11a:	4662      	mov	r2, ip
 800f11c:	2320      	movs	r3, #32
 800f11e:	1a9b      	subs	r3, r3, r2
 800f120:	002a      	movs	r2, r5
 800f122:	4666      	mov	r6, ip
 800f124:	409a      	lsls	r2, r3
 800f126:	0023      	movs	r3, r4
 800f128:	40f3      	lsrs	r3, r6
 800f12a:	4313      	orrs	r3, r2
 800f12c:	e7d4      	b.n	800f0d8 <__udivmoddi4+0xfc>
 800f12e:	4662      	mov	r2, ip
 800f130:	2320      	movs	r3, #32
 800f132:	2100      	movs	r1, #0
 800f134:	1a9b      	subs	r3, r3, r2
 800f136:	2200      	movs	r2, #0
 800f138:	9100      	str	r1, [sp, #0]
 800f13a:	9201      	str	r2, [sp, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	40da      	lsrs	r2, r3
 800f140:	9201      	str	r2, [sp, #4]
 800f142:	e780      	b.n	800f046 <__udivmoddi4+0x6a>
 800f144:	2320      	movs	r3, #32
 800f146:	4662      	mov	r2, ip
 800f148:	0026      	movs	r6, r4
 800f14a:	1a9b      	subs	r3, r3, r2
 800f14c:	40de      	lsrs	r6, r3
 800f14e:	002f      	movs	r7, r5
 800f150:	46b0      	mov	r8, r6
 800f152:	4666      	mov	r6, ip
 800f154:	40b7      	lsls	r7, r6
 800f156:	4646      	mov	r6, r8
 800f158:	003b      	movs	r3, r7
 800f15a:	4333      	orrs	r3, r6
 800f15c:	e7c8      	b.n	800f0f0 <__udivmoddi4+0x114>
 800f15e:	46c0      	nop			; (mov r8, r8)

0800f160 <__eqsf2>:
 800f160:	b570      	push	{r4, r5, r6, lr}
 800f162:	0042      	lsls	r2, r0, #1
 800f164:	024e      	lsls	r6, r1, #9
 800f166:	004c      	lsls	r4, r1, #1
 800f168:	0245      	lsls	r5, r0, #9
 800f16a:	0a6d      	lsrs	r5, r5, #9
 800f16c:	0e12      	lsrs	r2, r2, #24
 800f16e:	0fc3      	lsrs	r3, r0, #31
 800f170:	0a76      	lsrs	r6, r6, #9
 800f172:	0e24      	lsrs	r4, r4, #24
 800f174:	0fc9      	lsrs	r1, r1, #31
 800f176:	2aff      	cmp	r2, #255	; 0xff
 800f178:	d00f      	beq.n	800f19a <__eqsf2+0x3a>
 800f17a:	2cff      	cmp	r4, #255	; 0xff
 800f17c:	d011      	beq.n	800f1a2 <__eqsf2+0x42>
 800f17e:	2001      	movs	r0, #1
 800f180:	42a2      	cmp	r2, r4
 800f182:	d000      	beq.n	800f186 <__eqsf2+0x26>
 800f184:	bd70      	pop	{r4, r5, r6, pc}
 800f186:	42b5      	cmp	r5, r6
 800f188:	d1fc      	bne.n	800f184 <__eqsf2+0x24>
 800f18a:	428b      	cmp	r3, r1
 800f18c:	d00d      	beq.n	800f1aa <__eqsf2+0x4a>
 800f18e:	2a00      	cmp	r2, #0
 800f190:	d1f8      	bne.n	800f184 <__eqsf2+0x24>
 800f192:	0028      	movs	r0, r5
 800f194:	1e45      	subs	r5, r0, #1
 800f196:	41a8      	sbcs	r0, r5
 800f198:	e7f4      	b.n	800f184 <__eqsf2+0x24>
 800f19a:	2001      	movs	r0, #1
 800f19c:	2d00      	cmp	r5, #0
 800f19e:	d1f1      	bne.n	800f184 <__eqsf2+0x24>
 800f1a0:	e7eb      	b.n	800f17a <__eqsf2+0x1a>
 800f1a2:	2001      	movs	r0, #1
 800f1a4:	2e00      	cmp	r6, #0
 800f1a6:	d1ed      	bne.n	800f184 <__eqsf2+0x24>
 800f1a8:	e7e9      	b.n	800f17e <__eqsf2+0x1e>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e7ea      	b.n	800f184 <__eqsf2+0x24>
 800f1ae:	46c0      	nop			; (mov r8, r8)

0800f1b0 <__gesf2>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	004a      	lsls	r2, r1, #1
 800f1b4:	024e      	lsls	r6, r1, #9
 800f1b6:	0245      	lsls	r5, r0, #9
 800f1b8:	0044      	lsls	r4, r0, #1
 800f1ba:	0a6d      	lsrs	r5, r5, #9
 800f1bc:	0e24      	lsrs	r4, r4, #24
 800f1be:	0fc3      	lsrs	r3, r0, #31
 800f1c0:	0a76      	lsrs	r6, r6, #9
 800f1c2:	0e12      	lsrs	r2, r2, #24
 800f1c4:	0fc9      	lsrs	r1, r1, #31
 800f1c6:	2cff      	cmp	r4, #255	; 0xff
 800f1c8:	d015      	beq.n	800f1f6 <__gesf2+0x46>
 800f1ca:	2aff      	cmp	r2, #255	; 0xff
 800f1cc:	d00e      	beq.n	800f1ec <__gesf2+0x3c>
 800f1ce:	2c00      	cmp	r4, #0
 800f1d0:	d115      	bne.n	800f1fe <__gesf2+0x4e>
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d101      	bne.n	800f1da <__gesf2+0x2a>
 800f1d6:	2e00      	cmp	r6, #0
 800f1d8:	d01c      	beq.n	800f214 <__gesf2+0x64>
 800f1da:	2d00      	cmp	r5, #0
 800f1dc:	d014      	beq.n	800f208 <__gesf2+0x58>
 800f1de:	428b      	cmp	r3, r1
 800f1e0:	d027      	beq.n	800f232 <__gesf2+0x82>
 800f1e2:	2002      	movs	r0, #2
 800f1e4:	3b01      	subs	r3, #1
 800f1e6:	4018      	ands	r0, r3
 800f1e8:	3801      	subs	r0, #1
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}
 800f1ec:	2e00      	cmp	r6, #0
 800f1ee:	d0ee      	beq.n	800f1ce <__gesf2+0x1e>
 800f1f0:	2002      	movs	r0, #2
 800f1f2:	4240      	negs	r0, r0
 800f1f4:	e7f9      	b.n	800f1ea <__gesf2+0x3a>
 800f1f6:	2d00      	cmp	r5, #0
 800f1f8:	d1fa      	bne.n	800f1f0 <__gesf2+0x40>
 800f1fa:	2aff      	cmp	r2, #255	; 0xff
 800f1fc:	d00e      	beq.n	800f21c <__gesf2+0x6c>
 800f1fe:	2a00      	cmp	r2, #0
 800f200:	d10e      	bne.n	800f220 <__gesf2+0x70>
 800f202:	2e00      	cmp	r6, #0
 800f204:	d0ed      	beq.n	800f1e2 <__gesf2+0x32>
 800f206:	e00b      	b.n	800f220 <__gesf2+0x70>
 800f208:	2301      	movs	r3, #1
 800f20a:	3901      	subs	r1, #1
 800f20c:	4399      	bics	r1, r3
 800f20e:	0008      	movs	r0, r1
 800f210:	3001      	adds	r0, #1
 800f212:	e7ea      	b.n	800f1ea <__gesf2+0x3a>
 800f214:	2000      	movs	r0, #0
 800f216:	2d00      	cmp	r5, #0
 800f218:	d0e7      	beq.n	800f1ea <__gesf2+0x3a>
 800f21a:	e7e2      	b.n	800f1e2 <__gesf2+0x32>
 800f21c:	2e00      	cmp	r6, #0
 800f21e:	d1e7      	bne.n	800f1f0 <__gesf2+0x40>
 800f220:	428b      	cmp	r3, r1
 800f222:	d1de      	bne.n	800f1e2 <__gesf2+0x32>
 800f224:	4294      	cmp	r4, r2
 800f226:	dd05      	ble.n	800f234 <__gesf2+0x84>
 800f228:	2102      	movs	r1, #2
 800f22a:	1e58      	subs	r0, r3, #1
 800f22c:	4008      	ands	r0, r1
 800f22e:	3801      	subs	r0, #1
 800f230:	e7db      	b.n	800f1ea <__gesf2+0x3a>
 800f232:	2400      	movs	r4, #0
 800f234:	42a2      	cmp	r2, r4
 800f236:	dc04      	bgt.n	800f242 <__gesf2+0x92>
 800f238:	42b5      	cmp	r5, r6
 800f23a:	d8d2      	bhi.n	800f1e2 <__gesf2+0x32>
 800f23c:	2000      	movs	r0, #0
 800f23e:	42b5      	cmp	r5, r6
 800f240:	d2d3      	bcs.n	800f1ea <__gesf2+0x3a>
 800f242:	1e58      	subs	r0, r3, #1
 800f244:	2301      	movs	r3, #1
 800f246:	4398      	bics	r0, r3
 800f248:	3001      	adds	r0, #1
 800f24a:	e7ce      	b.n	800f1ea <__gesf2+0x3a>

0800f24c <__lesf2>:
 800f24c:	b530      	push	{r4, r5, lr}
 800f24e:	0042      	lsls	r2, r0, #1
 800f250:	0244      	lsls	r4, r0, #9
 800f252:	024d      	lsls	r5, r1, #9
 800f254:	0fc3      	lsrs	r3, r0, #31
 800f256:	0048      	lsls	r0, r1, #1
 800f258:	0a64      	lsrs	r4, r4, #9
 800f25a:	0e12      	lsrs	r2, r2, #24
 800f25c:	0a6d      	lsrs	r5, r5, #9
 800f25e:	0e00      	lsrs	r0, r0, #24
 800f260:	0fc9      	lsrs	r1, r1, #31
 800f262:	2aff      	cmp	r2, #255	; 0xff
 800f264:	d012      	beq.n	800f28c <__lesf2+0x40>
 800f266:	28ff      	cmp	r0, #255	; 0xff
 800f268:	d00c      	beq.n	800f284 <__lesf2+0x38>
 800f26a:	2a00      	cmp	r2, #0
 800f26c:	d112      	bne.n	800f294 <__lesf2+0x48>
 800f26e:	2800      	cmp	r0, #0
 800f270:	d119      	bne.n	800f2a6 <__lesf2+0x5a>
 800f272:	2d00      	cmp	r5, #0
 800f274:	d117      	bne.n	800f2a6 <__lesf2+0x5a>
 800f276:	2c00      	cmp	r4, #0
 800f278:	d02b      	beq.n	800f2d2 <__lesf2+0x86>
 800f27a:	2002      	movs	r0, #2
 800f27c:	3b01      	subs	r3, #1
 800f27e:	4018      	ands	r0, r3
 800f280:	3801      	subs	r0, #1
 800f282:	e026      	b.n	800f2d2 <__lesf2+0x86>
 800f284:	2d00      	cmp	r5, #0
 800f286:	d0f0      	beq.n	800f26a <__lesf2+0x1e>
 800f288:	2002      	movs	r0, #2
 800f28a:	e022      	b.n	800f2d2 <__lesf2+0x86>
 800f28c:	2c00      	cmp	r4, #0
 800f28e:	d1fb      	bne.n	800f288 <__lesf2+0x3c>
 800f290:	28ff      	cmp	r0, #255	; 0xff
 800f292:	d01f      	beq.n	800f2d4 <__lesf2+0x88>
 800f294:	2800      	cmp	r0, #0
 800f296:	d11f      	bne.n	800f2d8 <__lesf2+0x8c>
 800f298:	2d00      	cmp	r5, #0
 800f29a:	d11d      	bne.n	800f2d8 <__lesf2+0x8c>
 800f29c:	2002      	movs	r0, #2
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	4018      	ands	r0, r3
 800f2a2:	3801      	subs	r0, #1
 800f2a4:	e015      	b.n	800f2d2 <__lesf2+0x86>
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	d00e      	beq.n	800f2c8 <__lesf2+0x7c>
 800f2aa:	428b      	cmp	r3, r1
 800f2ac:	d1e5      	bne.n	800f27a <__lesf2+0x2e>
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	4290      	cmp	r0, r2
 800f2b2:	dc04      	bgt.n	800f2be <__lesf2+0x72>
 800f2b4:	42ac      	cmp	r4, r5
 800f2b6:	d8e0      	bhi.n	800f27a <__lesf2+0x2e>
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	42ac      	cmp	r4, r5
 800f2bc:	d209      	bcs.n	800f2d2 <__lesf2+0x86>
 800f2be:	1e58      	subs	r0, r3, #1
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	4398      	bics	r0, r3
 800f2c4:	3001      	adds	r0, #1
 800f2c6:	e004      	b.n	800f2d2 <__lesf2+0x86>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	3901      	subs	r1, #1
 800f2cc:	4399      	bics	r1, r3
 800f2ce:	0008      	movs	r0, r1
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	bd30      	pop	{r4, r5, pc}
 800f2d4:	2d00      	cmp	r5, #0
 800f2d6:	d1d7      	bne.n	800f288 <__lesf2+0x3c>
 800f2d8:	428b      	cmp	r3, r1
 800f2da:	d1ce      	bne.n	800f27a <__lesf2+0x2e>
 800f2dc:	4282      	cmp	r2, r0
 800f2de:	dde7      	ble.n	800f2b0 <__lesf2+0x64>
 800f2e0:	2102      	movs	r1, #2
 800f2e2:	1e58      	subs	r0, r3, #1
 800f2e4:	4008      	ands	r0, r1
 800f2e6:	3801      	subs	r0, #1
 800f2e8:	e7f3      	b.n	800f2d2 <__lesf2+0x86>
 800f2ea:	46c0      	nop			; (mov r8, r8)

0800f2ec <__aeabi_fcmpun>:
 800f2ec:	0242      	lsls	r2, r0, #9
 800f2ee:	024b      	lsls	r3, r1, #9
 800f2f0:	0040      	lsls	r0, r0, #1
 800f2f2:	0049      	lsls	r1, r1, #1
 800f2f4:	0a52      	lsrs	r2, r2, #9
 800f2f6:	0a5b      	lsrs	r3, r3, #9
 800f2f8:	0e09      	lsrs	r1, r1, #24
 800f2fa:	0e00      	lsrs	r0, r0, #24
 800f2fc:	28ff      	cmp	r0, #255	; 0xff
 800f2fe:	d006      	beq.n	800f30e <__aeabi_fcmpun+0x22>
 800f300:	2000      	movs	r0, #0
 800f302:	29ff      	cmp	r1, #255	; 0xff
 800f304:	d102      	bne.n	800f30c <__aeabi_fcmpun+0x20>
 800f306:	0018      	movs	r0, r3
 800f308:	1e43      	subs	r3, r0, #1
 800f30a:	4198      	sbcs	r0, r3
 800f30c:	4770      	bx	lr
 800f30e:	38fe      	subs	r0, #254	; 0xfe
 800f310:	2a00      	cmp	r2, #0
 800f312:	d1fb      	bne.n	800f30c <__aeabi_fcmpun+0x20>
 800f314:	e7f4      	b.n	800f300 <__aeabi_fcmpun+0x14>
 800f316:	46c0      	nop			; (mov r8, r8)

0800f318 <__aeabi_f2iz>:
 800f318:	0241      	lsls	r1, r0, #9
 800f31a:	0042      	lsls	r2, r0, #1
 800f31c:	0fc3      	lsrs	r3, r0, #31
 800f31e:	0a49      	lsrs	r1, r1, #9
 800f320:	0e12      	lsrs	r2, r2, #24
 800f322:	2000      	movs	r0, #0
 800f324:	2a7e      	cmp	r2, #126	; 0x7e
 800f326:	d90d      	bls.n	800f344 <__aeabi_f2iz+0x2c>
 800f328:	2a9d      	cmp	r2, #157	; 0x9d
 800f32a:	d80c      	bhi.n	800f346 <__aeabi_f2iz+0x2e>
 800f32c:	2080      	movs	r0, #128	; 0x80
 800f32e:	0400      	lsls	r0, r0, #16
 800f330:	4301      	orrs	r1, r0
 800f332:	2a95      	cmp	r2, #149	; 0x95
 800f334:	dc0a      	bgt.n	800f34c <__aeabi_f2iz+0x34>
 800f336:	2096      	movs	r0, #150	; 0x96
 800f338:	1a82      	subs	r2, r0, r2
 800f33a:	40d1      	lsrs	r1, r2
 800f33c:	4248      	negs	r0, r1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d100      	bne.n	800f344 <__aeabi_f2iz+0x2c>
 800f342:	0008      	movs	r0, r1
 800f344:	4770      	bx	lr
 800f346:	4a03      	ldr	r2, [pc, #12]	; (800f354 <__aeabi_f2iz+0x3c>)
 800f348:	1898      	adds	r0, r3, r2
 800f34a:	e7fb      	b.n	800f344 <__aeabi_f2iz+0x2c>
 800f34c:	3a96      	subs	r2, #150	; 0x96
 800f34e:	4091      	lsls	r1, r2
 800f350:	e7f4      	b.n	800f33c <__aeabi_f2iz+0x24>
 800f352:	46c0      	nop			; (mov r8, r8)
 800f354:	7fffffff 	.word	0x7fffffff

0800f358 <__aeabi_i2f>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d03d      	beq.n	800f3da <__aeabi_i2f+0x82>
 800f35e:	17c3      	asrs	r3, r0, #31
 800f360:	18c5      	adds	r5, r0, r3
 800f362:	405d      	eors	r5, r3
 800f364:	0fc4      	lsrs	r4, r0, #31
 800f366:	0028      	movs	r0, r5
 800f368:	f7ff fbd6 	bl	800eb18 <__clzsi2>
 800f36c:	229e      	movs	r2, #158	; 0x9e
 800f36e:	1a12      	subs	r2, r2, r0
 800f370:	2a96      	cmp	r2, #150	; 0x96
 800f372:	dc07      	bgt.n	800f384 <__aeabi_i2f+0x2c>
 800f374:	b2d2      	uxtb	r2, r2
 800f376:	2808      	cmp	r0, #8
 800f378:	dd33      	ble.n	800f3e2 <__aeabi_i2f+0x8a>
 800f37a:	3808      	subs	r0, #8
 800f37c:	4085      	lsls	r5, r0
 800f37e:	0268      	lsls	r0, r5, #9
 800f380:	0a40      	lsrs	r0, r0, #9
 800f382:	e023      	b.n	800f3cc <__aeabi_i2f+0x74>
 800f384:	2a99      	cmp	r2, #153	; 0x99
 800f386:	dd0b      	ble.n	800f3a0 <__aeabi_i2f+0x48>
 800f388:	2305      	movs	r3, #5
 800f38a:	0029      	movs	r1, r5
 800f38c:	1a1b      	subs	r3, r3, r0
 800f38e:	40d9      	lsrs	r1, r3
 800f390:	0003      	movs	r3, r0
 800f392:	331b      	adds	r3, #27
 800f394:	409d      	lsls	r5, r3
 800f396:	002b      	movs	r3, r5
 800f398:	1e5d      	subs	r5, r3, #1
 800f39a:	41ab      	sbcs	r3, r5
 800f39c:	4319      	orrs	r1, r3
 800f39e:	000d      	movs	r5, r1
 800f3a0:	2805      	cmp	r0, #5
 800f3a2:	dd01      	ble.n	800f3a8 <__aeabi_i2f+0x50>
 800f3a4:	1f43      	subs	r3, r0, #5
 800f3a6:	409d      	lsls	r5, r3
 800f3a8:	002b      	movs	r3, r5
 800f3aa:	490f      	ldr	r1, [pc, #60]	; (800f3e8 <__aeabi_i2f+0x90>)
 800f3ac:	400b      	ands	r3, r1
 800f3ae:	076e      	lsls	r6, r5, #29
 800f3b0:	d009      	beq.n	800f3c6 <__aeabi_i2f+0x6e>
 800f3b2:	260f      	movs	r6, #15
 800f3b4:	4035      	ands	r5, r6
 800f3b6:	2d04      	cmp	r5, #4
 800f3b8:	d005      	beq.n	800f3c6 <__aeabi_i2f+0x6e>
 800f3ba:	3304      	adds	r3, #4
 800f3bc:	015d      	lsls	r5, r3, #5
 800f3be:	d502      	bpl.n	800f3c6 <__aeabi_i2f+0x6e>
 800f3c0:	229f      	movs	r2, #159	; 0x9f
 800f3c2:	400b      	ands	r3, r1
 800f3c4:	1a12      	subs	r2, r2, r0
 800f3c6:	019b      	lsls	r3, r3, #6
 800f3c8:	0a58      	lsrs	r0, r3, #9
 800f3ca:	b2d2      	uxtb	r2, r2
 800f3cc:	0240      	lsls	r0, r0, #9
 800f3ce:	05d2      	lsls	r2, r2, #23
 800f3d0:	0a40      	lsrs	r0, r0, #9
 800f3d2:	07e4      	lsls	r4, r4, #31
 800f3d4:	4310      	orrs	r0, r2
 800f3d6:	4320      	orrs	r0, r4
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	2400      	movs	r4, #0
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2000      	movs	r0, #0
 800f3e0:	e7f4      	b.n	800f3cc <__aeabi_i2f+0x74>
 800f3e2:	0268      	lsls	r0, r5, #9
 800f3e4:	0a40      	lsrs	r0, r0, #9
 800f3e6:	e7f1      	b.n	800f3cc <__aeabi_i2f+0x74>
 800f3e8:	fbffffff 	.word	0xfbffffff

0800f3ec <__aeabi_ui2f>:
 800f3ec:	b570      	push	{r4, r5, r6, lr}
 800f3ee:	1e04      	subs	r4, r0, #0
 800f3f0:	d034      	beq.n	800f45c <__aeabi_ui2f+0x70>
 800f3f2:	f7ff fb91 	bl	800eb18 <__clzsi2>
 800f3f6:	229e      	movs	r2, #158	; 0x9e
 800f3f8:	1a12      	subs	r2, r2, r0
 800f3fa:	2a96      	cmp	r2, #150	; 0x96
 800f3fc:	dc07      	bgt.n	800f40e <__aeabi_ui2f+0x22>
 800f3fe:	b2d2      	uxtb	r2, r2
 800f400:	2808      	cmp	r0, #8
 800f402:	dd2e      	ble.n	800f462 <__aeabi_ui2f+0x76>
 800f404:	3808      	subs	r0, #8
 800f406:	4084      	lsls	r4, r0
 800f408:	0260      	lsls	r0, r4, #9
 800f40a:	0a40      	lsrs	r0, r0, #9
 800f40c:	e021      	b.n	800f452 <__aeabi_ui2f+0x66>
 800f40e:	2a99      	cmp	r2, #153	; 0x99
 800f410:	dd09      	ble.n	800f426 <__aeabi_ui2f+0x3a>
 800f412:	0003      	movs	r3, r0
 800f414:	0021      	movs	r1, r4
 800f416:	331b      	adds	r3, #27
 800f418:	4099      	lsls	r1, r3
 800f41a:	1e4b      	subs	r3, r1, #1
 800f41c:	4199      	sbcs	r1, r3
 800f41e:	2305      	movs	r3, #5
 800f420:	1a1b      	subs	r3, r3, r0
 800f422:	40dc      	lsrs	r4, r3
 800f424:	430c      	orrs	r4, r1
 800f426:	2805      	cmp	r0, #5
 800f428:	dd01      	ble.n	800f42e <__aeabi_ui2f+0x42>
 800f42a:	1f43      	subs	r3, r0, #5
 800f42c:	409c      	lsls	r4, r3
 800f42e:	0023      	movs	r3, r4
 800f430:	490d      	ldr	r1, [pc, #52]	; (800f468 <__aeabi_ui2f+0x7c>)
 800f432:	400b      	ands	r3, r1
 800f434:	0765      	lsls	r5, r4, #29
 800f436:	d009      	beq.n	800f44c <__aeabi_ui2f+0x60>
 800f438:	250f      	movs	r5, #15
 800f43a:	402c      	ands	r4, r5
 800f43c:	2c04      	cmp	r4, #4
 800f43e:	d005      	beq.n	800f44c <__aeabi_ui2f+0x60>
 800f440:	3304      	adds	r3, #4
 800f442:	015c      	lsls	r4, r3, #5
 800f444:	d502      	bpl.n	800f44c <__aeabi_ui2f+0x60>
 800f446:	229f      	movs	r2, #159	; 0x9f
 800f448:	400b      	ands	r3, r1
 800f44a:	1a12      	subs	r2, r2, r0
 800f44c:	019b      	lsls	r3, r3, #6
 800f44e:	0a58      	lsrs	r0, r3, #9
 800f450:	b2d2      	uxtb	r2, r2
 800f452:	0240      	lsls	r0, r0, #9
 800f454:	05d2      	lsls	r2, r2, #23
 800f456:	0a40      	lsrs	r0, r0, #9
 800f458:	4310      	orrs	r0, r2
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
 800f45c:	2200      	movs	r2, #0
 800f45e:	2000      	movs	r0, #0
 800f460:	e7f7      	b.n	800f452 <__aeabi_ui2f+0x66>
 800f462:	0260      	lsls	r0, r4, #9
 800f464:	0a40      	lsrs	r0, r0, #9
 800f466:	e7f4      	b.n	800f452 <__aeabi_ui2f+0x66>
 800f468:	fbffffff 	.word	0xfbffffff

0800f46c <__aeabi_dadd>:
 800f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f46e:	464f      	mov	r7, r9
 800f470:	4646      	mov	r6, r8
 800f472:	46d6      	mov	lr, sl
 800f474:	000c      	movs	r4, r1
 800f476:	0309      	lsls	r1, r1, #12
 800f478:	b5c0      	push	{r6, r7, lr}
 800f47a:	0a49      	lsrs	r1, r1, #9
 800f47c:	0f47      	lsrs	r7, r0, #29
 800f47e:	005e      	lsls	r6, r3, #1
 800f480:	4339      	orrs	r1, r7
 800f482:	031f      	lsls	r7, r3, #12
 800f484:	0fdb      	lsrs	r3, r3, #31
 800f486:	469c      	mov	ip, r3
 800f488:	0065      	lsls	r5, r4, #1
 800f48a:	0a7b      	lsrs	r3, r7, #9
 800f48c:	0f57      	lsrs	r7, r2, #29
 800f48e:	431f      	orrs	r7, r3
 800f490:	0d6d      	lsrs	r5, r5, #21
 800f492:	0fe4      	lsrs	r4, r4, #31
 800f494:	0d76      	lsrs	r6, r6, #21
 800f496:	46a1      	mov	r9, r4
 800f498:	00c0      	lsls	r0, r0, #3
 800f49a:	46b8      	mov	r8, r7
 800f49c:	00d2      	lsls	r2, r2, #3
 800f49e:	1bab      	subs	r3, r5, r6
 800f4a0:	4564      	cmp	r4, ip
 800f4a2:	d07b      	beq.n	800f59c <__aeabi_dadd+0x130>
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	dd5f      	ble.n	800f568 <__aeabi_dadd+0xfc>
 800f4a8:	2e00      	cmp	r6, #0
 800f4aa:	d000      	beq.n	800f4ae <__aeabi_dadd+0x42>
 800f4ac:	e0a4      	b.n	800f5f8 <__aeabi_dadd+0x18c>
 800f4ae:	003e      	movs	r6, r7
 800f4b0:	4316      	orrs	r6, r2
 800f4b2:	d100      	bne.n	800f4b6 <__aeabi_dadd+0x4a>
 800f4b4:	e112      	b.n	800f6dc <__aeabi_dadd+0x270>
 800f4b6:	1e5e      	subs	r6, r3, #1
 800f4b8:	2e00      	cmp	r6, #0
 800f4ba:	d000      	beq.n	800f4be <__aeabi_dadd+0x52>
 800f4bc:	e19e      	b.n	800f7fc <__aeabi_dadd+0x390>
 800f4be:	1a87      	subs	r7, r0, r2
 800f4c0:	4643      	mov	r3, r8
 800f4c2:	42b8      	cmp	r0, r7
 800f4c4:	4180      	sbcs	r0, r0
 800f4c6:	2501      	movs	r5, #1
 800f4c8:	1ac9      	subs	r1, r1, r3
 800f4ca:	4240      	negs	r0, r0
 800f4cc:	1a09      	subs	r1, r1, r0
 800f4ce:	020b      	lsls	r3, r1, #8
 800f4d0:	d400      	bmi.n	800f4d4 <__aeabi_dadd+0x68>
 800f4d2:	e131      	b.n	800f738 <__aeabi_dadd+0x2cc>
 800f4d4:	0249      	lsls	r1, r1, #9
 800f4d6:	0a4e      	lsrs	r6, r1, #9
 800f4d8:	2e00      	cmp	r6, #0
 800f4da:	d100      	bne.n	800f4de <__aeabi_dadd+0x72>
 800f4dc:	e16e      	b.n	800f7bc <__aeabi_dadd+0x350>
 800f4de:	0030      	movs	r0, r6
 800f4e0:	f7ff fb1a 	bl	800eb18 <__clzsi2>
 800f4e4:	0003      	movs	r3, r0
 800f4e6:	3b08      	subs	r3, #8
 800f4e8:	2b1f      	cmp	r3, #31
 800f4ea:	dd00      	ble.n	800f4ee <__aeabi_dadd+0x82>
 800f4ec:	e161      	b.n	800f7b2 <__aeabi_dadd+0x346>
 800f4ee:	2220      	movs	r2, #32
 800f4f0:	0039      	movs	r1, r7
 800f4f2:	1ad2      	subs	r2, r2, r3
 800f4f4:	409e      	lsls	r6, r3
 800f4f6:	40d1      	lsrs	r1, r2
 800f4f8:	409f      	lsls	r7, r3
 800f4fa:	430e      	orrs	r6, r1
 800f4fc:	429d      	cmp	r5, r3
 800f4fe:	dd00      	ble.n	800f502 <__aeabi_dadd+0x96>
 800f500:	e151      	b.n	800f7a6 <__aeabi_dadd+0x33a>
 800f502:	1b5d      	subs	r5, r3, r5
 800f504:	1c6b      	adds	r3, r5, #1
 800f506:	2b1f      	cmp	r3, #31
 800f508:	dd00      	ble.n	800f50c <__aeabi_dadd+0xa0>
 800f50a:	e17c      	b.n	800f806 <__aeabi_dadd+0x39a>
 800f50c:	2120      	movs	r1, #32
 800f50e:	1ac9      	subs	r1, r1, r3
 800f510:	003d      	movs	r5, r7
 800f512:	0030      	movs	r0, r6
 800f514:	408f      	lsls	r7, r1
 800f516:	4088      	lsls	r0, r1
 800f518:	40dd      	lsrs	r5, r3
 800f51a:	1e79      	subs	r1, r7, #1
 800f51c:	418f      	sbcs	r7, r1
 800f51e:	0031      	movs	r1, r6
 800f520:	2207      	movs	r2, #7
 800f522:	4328      	orrs	r0, r5
 800f524:	40d9      	lsrs	r1, r3
 800f526:	2500      	movs	r5, #0
 800f528:	4307      	orrs	r7, r0
 800f52a:	403a      	ands	r2, r7
 800f52c:	2a00      	cmp	r2, #0
 800f52e:	d009      	beq.n	800f544 <__aeabi_dadd+0xd8>
 800f530:	230f      	movs	r3, #15
 800f532:	403b      	ands	r3, r7
 800f534:	2b04      	cmp	r3, #4
 800f536:	d005      	beq.n	800f544 <__aeabi_dadd+0xd8>
 800f538:	1d3b      	adds	r3, r7, #4
 800f53a:	42bb      	cmp	r3, r7
 800f53c:	41bf      	sbcs	r7, r7
 800f53e:	427f      	negs	r7, r7
 800f540:	19c9      	adds	r1, r1, r7
 800f542:	001f      	movs	r7, r3
 800f544:	020b      	lsls	r3, r1, #8
 800f546:	d400      	bmi.n	800f54a <__aeabi_dadd+0xde>
 800f548:	e226      	b.n	800f998 <__aeabi_dadd+0x52c>
 800f54a:	1c6a      	adds	r2, r5, #1
 800f54c:	4bc6      	ldr	r3, [pc, #792]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f54e:	0555      	lsls	r5, r2, #21
 800f550:	0d6d      	lsrs	r5, r5, #21
 800f552:	429a      	cmp	r2, r3
 800f554:	d100      	bne.n	800f558 <__aeabi_dadd+0xec>
 800f556:	e106      	b.n	800f766 <__aeabi_dadd+0x2fa>
 800f558:	4ac4      	ldr	r2, [pc, #784]	; (800f86c <__aeabi_dadd+0x400>)
 800f55a:	08ff      	lsrs	r7, r7, #3
 800f55c:	400a      	ands	r2, r1
 800f55e:	0753      	lsls	r3, r2, #29
 800f560:	0252      	lsls	r2, r2, #9
 800f562:	433b      	orrs	r3, r7
 800f564:	0b12      	lsrs	r2, r2, #12
 800f566:	e08e      	b.n	800f686 <__aeabi_dadd+0x21a>
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d000      	beq.n	800f56e <__aeabi_dadd+0x102>
 800f56c:	e0b8      	b.n	800f6e0 <__aeabi_dadd+0x274>
 800f56e:	1c6b      	adds	r3, r5, #1
 800f570:	055b      	lsls	r3, r3, #21
 800f572:	0d5b      	lsrs	r3, r3, #21
 800f574:	2b01      	cmp	r3, #1
 800f576:	dc00      	bgt.n	800f57a <__aeabi_dadd+0x10e>
 800f578:	e130      	b.n	800f7dc <__aeabi_dadd+0x370>
 800f57a:	1a87      	subs	r7, r0, r2
 800f57c:	4643      	mov	r3, r8
 800f57e:	42b8      	cmp	r0, r7
 800f580:	41b6      	sbcs	r6, r6
 800f582:	1acb      	subs	r3, r1, r3
 800f584:	4276      	negs	r6, r6
 800f586:	1b9e      	subs	r6, r3, r6
 800f588:	0233      	lsls	r3, r6, #8
 800f58a:	d500      	bpl.n	800f58e <__aeabi_dadd+0x122>
 800f58c:	e14c      	b.n	800f828 <__aeabi_dadd+0x3bc>
 800f58e:	003b      	movs	r3, r7
 800f590:	4333      	orrs	r3, r6
 800f592:	d1a1      	bne.n	800f4d8 <__aeabi_dadd+0x6c>
 800f594:	2200      	movs	r2, #0
 800f596:	2400      	movs	r4, #0
 800f598:	2500      	movs	r5, #0
 800f59a:	e070      	b.n	800f67e <__aeabi_dadd+0x212>
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	dc00      	bgt.n	800f5a2 <__aeabi_dadd+0x136>
 800f5a0:	e0e5      	b.n	800f76e <__aeabi_dadd+0x302>
 800f5a2:	2e00      	cmp	r6, #0
 800f5a4:	d100      	bne.n	800f5a8 <__aeabi_dadd+0x13c>
 800f5a6:	e083      	b.n	800f6b0 <__aeabi_dadd+0x244>
 800f5a8:	4eaf      	ldr	r6, [pc, #700]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f5aa:	42b5      	cmp	r5, r6
 800f5ac:	d060      	beq.n	800f670 <__aeabi_dadd+0x204>
 800f5ae:	2680      	movs	r6, #128	; 0x80
 800f5b0:	0436      	lsls	r6, r6, #16
 800f5b2:	4337      	orrs	r7, r6
 800f5b4:	46b8      	mov	r8, r7
 800f5b6:	2b38      	cmp	r3, #56	; 0x38
 800f5b8:	dc00      	bgt.n	800f5bc <__aeabi_dadd+0x150>
 800f5ba:	e13e      	b.n	800f83a <__aeabi_dadd+0x3ce>
 800f5bc:	4643      	mov	r3, r8
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	001f      	movs	r7, r3
 800f5c2:	1e7a      	subs	r2, r7, #1
 800f5c4:	4197      	sbcs	r7, r2
 800f5c6:	183f      	adds	r7, r7, r0
 800f5c8:	4287      	cmp	r7, r0
 800f5ca:	4180      	sbcs	r0, r0
 800f5cc:	4240      	negs	r0, r0
 800f5ce:	1809      	adds	r1, r1, r0
 800f5d0:	020b      	lsls	r3, r1, #8
 800f5d2:	d400      	bmi.n	800f5d6 <__aeabi_dadd+0x16a>
 800f5d4:	e0b0      	b.n	800f738 <__aeabi_dadd+0x2cc>
 800f5d6:	4ba4      	ldr	r3, [pc, #656]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f5d8:	3501      	adds	r5, #1
 800f5da:	429d      	cmp	r5, r3
 800f5dc:	d100      	bne.n	800f5e0 <__aeabi_dadd+0x174>
 800f5de:	e0c3      	b.n	800f768 <__aeabi_dadd+0x2fc>
 800f5e0:	4aa2      	ldr	r2, [pc, #648]	; (800f86c <__aeabi_dadd+0x400>)
 800f5e2:	087b      	lsrs	r3, r7, #1
 800f5e4:	400a      	ands	r2, r1
 800f5e6:	2101      	movs	r1, #1
 800f5e8:	400f      	ands	r7, r1
 800f5ea:	431f      	orrs	r7, r3
 800f5ec:	0851      	lsrs	r1, r2, #1
 800f5ee:	07d3      	lsls	r3, r2, #31
 800f5f0:	2207      	movs	r2, #7
 800f5f2:	431f      	orrs	r7, r3
 800f5f4:	403a      	ands	r2, r7
 800f5f6:	e799      	b.n	800f52c <__aeabi_dadd+0xc0>
 800f5f8:	4e9b      	ldr	r6, [pc, #620]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f5fa:	42b5      	cmp	r5, r6
 800f5fc:	d038      	beq.n	800f670 <__aeabi_dadd+0x204>
 800f5fe:	2680      	movs	r6, #128	; 0x80
 800f600:	0436      	lsls	r6, r6, #16
 800f602:	4337      	orrs	r7, r6
 800f604:	46b8      	mov	r8, r7
 800f606:	2b38      	cmp	r3, #56	; 0x38
 800f608:	dd00      	ble.n	800f60c <__aeabi_dadd+0x1a0>
 800f60a:	e0dc      	b.n	800f7c6 <__aeabi_dadd+0x35a>
 800f60c:	2b1f      	cmp	r3, #31
 800f60e:	dc00      	bgt.n	800f612 <__aeabi_dadd+0x1a6>
 800f610:	e130      	b.n	800f874 <__aeabi_dadd+0x408>
 800f612:	001e      	movs	r6, r3
 800f614:	4647      	mov	r7, r8
 800f616:	3e20      	subs	r6, #32
 800f618:	40f7      	lsrs	r7, r6
 800f61a:	46bc      	mov	ip, r7
 800f61c:	2b20      	cmp	r3, #32
 800f61e:	d004      	beq.n	800f62a <__aeabi_dadd+0x1be>
 800f620:	2640      	movs	r6, #64	; 0x40
 800f622:	1af3      	subs	r3, r6, r3
 800f624:	4646      	mov	r6, r8
 800f626:	409e      	lsls	r6, r3
 800f628:	4332      	orrs	r2, r6
 800f62a:	0017      	movs	r7, r2
 800f62c:	4663      	mov	r3, ip
 800f62e:	1e7a      	subs	r2, r7, #1
 800f630:	4197      	sbcs	r7, r2
 800f632:	431f      	orrs	r7, r3
 800f634:	e0cc      	b.n	800f7d0 <__aeabi_dadd+0x364>
 800f636:	2b00      	cmp	r3, #0
 800f638:	d100      	bne.n	800f63c <__aeabi_dadd+0x1d0>
 800f63a:	e204      	b.n	800fa46 <__aeabi_dadd+0x5da>
 800f63c:	4643      	mov	r3, r8
 800f63e:	4313      	orrs	r3, r2
 800f640:	d100      	bne.n	800f644 <__aeabi_dadd+0x1d8>
 800f642:	e159      	b.n	800f8f8 <__aeabi_dadd+0x48c>
 800f644:	074b      	lsls	r3, r1, #29
 800f646:	08c0      	lsrs	r0, r0, #3
 800f648:	4318      	orrs	r0, r3
 800f64a:	2380      	movs	r3, #128	; 0x80
 800f64c:	08c9      	lsrs	r1, r1, #3
 800f64e:	031b      	lsls	r3, r3, #12
 800f650:	4219      	tst	r1, r3
 800f652:	d008      	beq.n	800f666 <__aeabi_dadd+0x1fa>
 800f654:	4645      	mov	r5, r8
 800f656:	08ed      	lsrs	r5, r5, #3
 800f658:	421d      	tst	r5, r3
 800f65a:	d104      	bne.n	800f666 <__aeabi_dadd+0x1fa>
 800f65c:	4643      	mov	r3, r8
 800f65e:	08d0      	lsrs	r0, r2, #3
 800f660:	0759      	lsls	r1, r3, #29
 800f662:	4308      	orrs	r0, r1
 800f664:	0029      	movs	r1, r5
 800f666:	0f42      	lsrs	r2, r0, #29
 800f668:	00c9      	lsls	r1, r1, #3
 800f66a:	4d7f      	ldr	r5, [pc, #508]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f66c:	4311      	orrs	r1, r2
 800f66e:	00c0      	lsls	r0, r0, #3
 800f670:	074b      	lsls	r3, r1, #29
 800f672:	08ca      	lsrs	r2, r1, #3
 800f674:	497c      	ldr	r1, [pc, #496]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f676:	08c0      	lsrs	r0, r0, #3
 800f678:	4303      	orrs	r3, r0
 800f67a:	428d      	cmp	r5, r1
 800f67c:	d068      	beq.n	800f750 <__aeabi_dadd+0x2e4>
 800f67e:	0312      	lsls	r2, r2, #12
 800f680:	056d      	lsls	r5, r5, #21
 800f682:	0b12      	lsrs	r2, r2, #12
 800f684:	0d6d      	lsrs	r5, r5, #21
 800f686:	2100      	movs	r1, #0
 800f688:	0312      	lsls	r2, r2, #12
 800f68a:	0018      	movs	r0, r3
 800f68c:	0b13      	lsrs	r3, r2, #12
 800f68e:	0d0a      	lsrs	r2, r1, #20
 800f690:	0512      	lsls	r2, r2, #20
 800f692:	431a      	orrs	r2, r3
 800f694:	4b76      	ldr	r3, [pc, #472]	; (800f870 <__aeabi_dadd+0x404>)
 800f696:	052d      	lsls	r5, r5, #20
 800f698:	4013      	ands	r3, r2
 800f69a:	432b      	orrs	r3, r5
 800f69c:	005b      	lsls	r3, r3, #1
 800f69e:	07e4      	lsls	r4, r4, #31
 800f6a0:	085b      	lsrs	r3, r3, #1
 800f6a2:	4323      	orrs	r3, r4
 800f6a4:	0019      	movs	r1, r3
 800f6a6:	bc1c      	pop	{r2, r3, r4}
 800f6a8:	4690      	mov	r8, r2
 800f6aa:	4699      	mov	r9, r3
 800f6ac:	46a2      	mov	sl, r4
 800f6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6b0:	003e      	movs	r6, r7
 800f6b2:	4316      	orrs	r6, r2
 800f6b4:	d012      	beq.n	800f6dc <__aeabi_dadd+0x270>
 800f6b6:	1e5e      	subs	r6, r3, #1
 800f6b8:	2e00      	cmp	r6, #0
 800f6ba:	d000      	beq.n	800f6be <__aeabi_dadd+0x252>
 800f6bc:	e100      	b.n	800f8c0 <__aeabi_dadd+0x454>
 800f6be:	1887      	adds	r7, r0, r2
 800f6c0:	4287      	cmp	r7, r0
 800f6c2:	4180      	sbcs	r0, r0
 800f6c4:	4441      	add	r1, r8
 800f6c6:	4240      	negs	r0, r0
 800f6c8:	1809      	adds	r1, r1, r0
 800f6ca:	2501      	movs	r5, #1
 800f6cc:	020b      	lsls	r3, r1, #8
 800f6ce:	d533      	bpl.n	800f738 <__aeabi_dadd+0x2cc>
 800f6d0:	2502      	movs	r5, #2
 800f6d2:	e785      	b.n	800f5e0 <__aeabi_dadd+0x174>
 800f6d4:	4664      	mov	r4, ip
 800f6d6:	0033      	movs	r3, r6
 800f6d8:	4641      	mov	r1, r8
 800f6da:	0010      	movs	r0, r2
 800f6dc:	001d      	movs	r5, r3
 800f6de:	e7c7      	b.n	800f670 <__aeabi_dadd+0x204>
 800f6e0:	2d00      	cmp	r5, #0
 800f6e2:	d000      	beq.n	800f6e6 <__aeabi_dadd+0x27a>
 800f6e4:	e0da      	b.n	800f89c <__aeabi_dadd+0x430>
 800f6e6:	000c      	movs	r4, r1
 800f6e8:	4304      	orrs	r4, r0
 800f6ea:	d0f3      	beq.n	800f6d4 <__aeabi_dadd+0x268>
 800f6ec:	1c5c      	adds	r4, r3, #1
 800f6ee:	d100      	bne.n	800f6f2 <__aeabi_dadd+0x286>
 800f6f0:	e19f      	b.n	800fa32 <__aeabi_dadd+0x5c6>
 800f6f2:	4c5d      	ldr	r4, [pc, #372]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f6f4:	42a6      	cmp	r6, r4
 800f6f6:	d100      	bne.n	800f6fa <__aeabi_dadd+0x28e>
 800f6f8:	e12f      	b.n	800f95a <__aeabi_dadd+0x4ee>
 800f6fa:	43db      	mvns	r3, r3
 800f6fc:	2b38      	cmp	r3, #56	; 0x38
 800f6fe:	dd00      	ble.n	800f702 <__aeabi_dadd+0x296>
 800f700:	e166      	b.n	800f9d0 <__aeabi_dadd+0x564>
 800f702:	2b1f      	cmp	r3, #31
 800f704:	dd00      	ble.n	800f708 <__aeabi_dadd+0x29c>
 800f706:	e183      	b.n	800fa10 <__aeabi_dadd+0x5a4>
 800f708:	2420      	movs	r4, #32
 800f70a:	0005      	movs	r5, r0
 800f70c:	1ae4      	subs	r4, r4, r3
 800f70e:	000f      	movs	r7, r1
 800f710:	40dd      	lsrs	r5, r3
 800f712:	40d9      	lsrs	r1, r3
 800f714:	40a0      	lsls	r0, r4
 800f716:	4643      	mov	r3, r8
 800f718:	40a7      	lsls	r7, r4
 800f71a:	1a5b      	subs	r3, r3, r1
 800f71c:	1e44      	subs	r4, r0, #1
 800f71e:	41a0      	sbcs	r0, r4
 800f720:	4698      	mov	r8, r3
 800f722:	432f      	orrs	r7, r5
 800f724:	4338      	orrs	r0, r7
 800f726:	1a17      	subs	r7, r2, r0
 800f728:	42ba      	cmp	r2, r7
 800f72a:	4192      	sbcs	r2, r2
 800f72c:	4643      	mov	r3, r8
 800f72e:	4252      	negs	r2, r2
 800f730:	1a99      	subs	r1, r3, r2
 800f732:	4664      	mov	r4, ip
 800f734:	0035      	movs	r5, r6
 800f736:	e6ca      	b.n	800f4ce <__aeabi_dadd+0x62>
 800f738:	2207      	movs	r2, #7
 800f73a:	403a      	ands	r2, r7
 800f73c:	2a00      	cmp	r2, #0
 800f73e:	d000      	beq.n	800f742 <__aeabi_dadd+0x2d6>
 800f740:	e6f6      	b.n	800f530 <__aeabi_dadd+0xc4>
 800f742:	074b      	lsls	r3, r1, #29
 800f744:	08ca      	lsrs	r2, r1, #3
 800f746:	4948      	ldr	r1, [pc, #288]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f748:	08ff      	lsrs	r7, r7, #3
 800f74a:	433b      	orrs	r3, r7
 800f74c:	428d      	cmp	r5, r1
 800f74e:	d196      	bne.n	800f67e <__aeabi_dadd+0x212>
 800f750:	0019      	movs	r1, r3
 800f752:	4311      	orrs	r1, r2
 800f754:	d100      	bne.n	800f758 <__aeabi_dadd+0x2ec>
 800f756:	e19e      	b.n	800fa96 <__aeabi_dadd+0x62a>
 800f758:	2180      	movs	r1, #128	; 0x80
 800f75a:	0309      	lsls	r1, r1, #12
 800f75c:	430a      	orrs	r2, r1
 800f75e:	0312      	lsls	r2, r2, #12
 800f760:	0b12      	lsrs	r2, r2, #12
 800f762:	4d41      	ldr	r5, [pc, #260]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f764:	e78f      	b.n	800f686 <__aeabi_dadd+0x21a>
 800f766:	0015      	movs	r5, r2
 800f768:	2200      	movs	r2, #0
 800f76a:	2300      	movs	r3, #0
 800f76c:	e78b      	b.n	800f686 <__aeabi_dadd+0x21a>
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d000      	beq.n	800f774 <__aeabi_dadd+0x308>
 800f772:	e0c7      	b.n	800f904 <__aeabi_dadd+0x498>
 800f774:	1c6b      	adds	r3, r5, #1
 800f776:	055f      	lsls	r7, r3, #21
 800f778:	0d7f      	lsrs	r7, r7, #21
 800f77a:	2f01      	cmp	r7, #1
 800f77c:	dc00      	bgt.n	800f780 <__aeabi_dadd+0x314>
 800f77e:	e0f1      	b.n	800f964 <__aeabi_dadd+0x4f8>
 800f780:	4d39      	ldr	r5, [pc, #228]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f782:	42ab      	cmp	r3, r5
 800f784:	d100      	bne.n	800f788 <__aeabi_dadd+0x31c>
 800f786:	e0b9      	b.n	800f8fc <__aeabi_dadd+0x490>
 800f788:	1885      	adds	r5, r0, r2
 800f78a:	000a      	movs	r2, r1
 800f78c:	4285      	cmp	r5, r0
 800f78e:	4189      	sbcs	r1, r1
 800f790:	4442      	add	r2, r8
 800f792:	4249      	negs	r1, r1
 800f794:	1851      	adds	r1, r2, r1
 800f796:	2207      	movs	r2, #7
 800f798:	07cf      	lsls	r7, r1, #31
 800f79a:	086d      	lsrs	r5, r5, #1
 800f79c:	432f      	orrs	r7, r5
 800f79e:	0849      	lsrs	r1, r1, #1
 800f7a0:	403a      	ands	r2, r7
 800f7a2:	001d      	movs	r5, r3
 800f7a4:	e6c2      	b.n	800f52c <__aeabi_dadd+0xc0>
 800f7a6:	2207      	movs	r2, #7
 800f7a8:	4930      	ldr	r1, [pc, #192]	; (800f86c <__aeabi_dadd+0x400>)
 800f7aa:	1aed      	subs	r5, r5, r3
 800f7ac:	4031      	ands	r1, r6
 800f7ae:	403a      	ands	r2, r7
 800f7b0:	e6bc      	b.n	800f52c <__aeabi_dadd+0xc0>
 800f7b2:	003e      	movs	r6, r7
 800f7b4:	3828      	subs	r0, #40	; 0x28
 800f7b6:	4086      	lsls	r6, r0
 800f7b8:	2700      	movs	r7, #0
 800f7ba:	e69f      	b.n	800f4fc <__aeabi_dadd+0x90>
 800f7bc:	0038      	movs	r0, r7
 800f7be:	f7ff f9ab 	bl	800eb18 <__clzsi2>
 800f7c2:	3020      	adds	r0, #32
 800f7c4:	e68e      	b.n	800f4e4 <__aeabi_dadd+0x78>
 800f7c6:	4643      	mov	r3, r8
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	001f      	movs	r7, r3
 800f7cc:	1e7a      	subs	r2, r7, #1
 800f7ce:	4197      	sbcs	r7, r2
 800f7d0:	1bc7      	subs	r7, r0, r7
 800f7d2:	42b8      	cmp	r0, r7
 800f7d4:	4180      	sbcs	r0, r0
 800f7d6:	4240      	negs	r0, r0
 800f7d8:	1a09      	subs	r1, r1, r0
 800f7da:	e678      	b.n	800f4ce <__aeabi_dadd+0x62>
 800f7dc:	000e      	movs	r6, r1
 800f7de:	003b      	movs	r3, r7
 800f7e0:	4306      	orrs	r6, r0
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	2d00      	cmp	r5, #0
 800f7e6:	d161      	bne.n	800f8ac <__aeabi_dadd+0x440>
 800f7e8:	2e00      	cmp	r6, #0
 800f7ea:	d000      	beq.n	800f7ee <__aeabi_dadd+0x382>
 800f7ec:	e0f4      	b.n	800f9d8 <__aeabi_dadd+0x56c>
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d100      	bne.n	800f7f4 <__aeabi_dadd+0x388>
 800f7f2:	e11b      	b.n	800fa2c <__aeabi_dadd+0x5c0>
 800f7f4:	4664      	mov	r4, ip
 800f7f6:	0039      	movs	r1, r7
 800f7f8:	0010      	movs	r0, r2
 800f7fa:	e739      	b.n	800f670 <__aeabi_dadd+0x204>
 800f7fc:	4f1a      	ldr	r7, [pc, #104]	; (800f868 <__aeabi_dadd+0x3fc>)
 800f7fe:	42bb      	cmp	r3, r7
 800f800:	d07a      	beq.n	800f8f8 <__aeabi_dadd+0x48c>
 800f802:	0033      	movs	r3, r6
 800f804:	e6ff      	b.n	800f606 <__aeabi_dadd+0x19a>
 800f806:	0030      	movs	r0, r6
 800f808:	3d1f      	subs	r5, #31
 800f80a:	40e8      	lsrs	r0, r5
 800f80c:	2b20      	cmp	r3, #32
 800f80e:	d003      	beq.n	800f818 <__aeabi_dadd+0x3ac>
 800f810:	2140      	movs	r1, #64	; 0x40
 800f812:	1acb      	subs	r3, r1, r3
 800f814:	409e      	lsls	r6, r3
 800f816:	4337      	orrs	r7, r6
 800f818:	1e7b      	subs	r3, r7, #1
 800f81a:	419f      	sbcs	r7, r3
 800f81c:	2207      	movs	r2, #7
 800f81e:	4307      	orrs	r7, r0
 800f820:	403a      	ands	r2, r7
 800f822:	2100      	movs	r1, #0
 800f824:	2500      	movs	r5, #0
 800f826:	e789      	b.n	800f73c <__aeabi_dadd+0x2d0>
 800f828:	1a17      	subs	r7, r2, r0
 800f82a:	4643      	mov	r3, r8
 800f82c:	42ba      	cmp	r2, r7
 800f82e:	41b6      	sbcs	r6, r6
 800f830:	1a59      	subs	r1, r3, r1
 800f832:	4276      	negs	r6, r6
 800f834:	1b8e      	subs	r6, r1, r6
 800f836:	4664      	mov	r4, ip
 800f838:	e64e      	b.n	800f4d8 <__aeabi_dadd+0x6c>
 800f83a:	2b1f      	cmp	r3, #31
 800f83c:	dd00      	ble.n	800f840 <__aeabi_dadd+0x3d4>
 800f83e:	e0ad      	b.n	800f99c <__aeabi_dadd+0x530>
 800f840:	2620      	movs	r6, #32
 800f842:	4647      	mov	r7, r8
 800f844:	1af6      	subs	r6, r6, r3
 800f846:	40b7      	lsls	r7, r6
 800f848:	46b9      	mov	r9, r7
 800f84a:	0017      	movs	r7, r2
 800f84c:	46b2      	mov	sl, r6
 800f84e:	40df      	lsrs	r7, r3
 800f850:	464e      	mov	r6, r9
 800f852:	433e      	orrs	r6, r7
 800f854:	0037      	movs	r7, r6
 800f856:	4656      	mov	r6, sl
 800f858:	40b2      	lsls	r2, r6
 800f85a:	1e56      	subs	r6, r2, #1
 800f85c:	41b2      	sbcs	r2, r6
 800f85e:	4317      	orrs	r7, r2
 800f860:	4642      	mov	r2, r8
 800f862:	40da      	lsrs	r2, r3
 800f864:	1889      	adds	r1, r1, r2
 800f866:	e6ae      	b.n	800f5c6 <__aeabi_dadd+0x15a>
 800f868:	000007ff 	.word	0x000007ff
 800f86c:	ff7fffff 	.word	0xff7fffff
 800f870:	800fffff 	.word	0x800fffff
 800f874:	2620      	movs	r6, #32
 800f876:	4647      	mov	r7, r8
 800f878:	1af6      	subs	r6, r6, r3
 800f87a:	40b7      	lsls	r7, r6
 800f87c:	46b9      	mov	r9, r7
 800f87e:	0017      	movs	r7, r2
 800f880:	46b2      	mov	sl, r6
 800f882:	40df      	lsrs	r7, r3
 800f884:	464e      	mov	r6, r9
 800f886:	433e      	orrs	r6, r7
 800f888:	0037      	movs	r7, r6
 800f88a:	4656      	mov	r6, sl
 800f88c:	40b2      	lsls	r2, r6
 800f88e:	1e56      	subs	r6, r2, #1
 800f890:	41b2      	sbcs	r2, r6
 800f892:	4317      	orrs	r7, r2
 800f894:	4642      	mov	r2, r8
 800f896:	40da      	lsrs	r2, r3
 800f898:	1a89      	subs	r1, r1, r2
 800f89a:	e799      	b.n	800f7d0 <__aeabi_dadd+0x364>
 800f89c:	4c7f      	ldr	r4, [pc, #508]	; (800fa9c <__aeabi_dadd+0x630>)
 800f89e:	42a6      	cmp	r6, r4
 800f8a0:	d05b      	beq.n	800f95a <__aeabi_dadd+0x4ee>
 800f8a2:	2480      	movs	r4, #128	; 0x80
 800f8a4:	0424      	lsls	r4, r4, #16
 800f8a6:	425b      	negs	r3, r3
 800f8a8:	4321      	orrs	r1, r4
 800f8aa:	e727      	b.n	800f6fc <__aeabi_dadd+0x290>
 800f8ac:	2e00      	cmp	r6, #0
 800f8ae:	d10c      	bne.n	800f8ca <__aeabi_dadd+0x45e>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d100      	bne.n	800f8b6 <__aeabi_dadd+0x44a>
 800f8b4:	e0cb      	b.n	800fa4e <__aeabi_dadd+0x5e2>
 800f8b6:	4664      	mov	r4, ip
 800f8b8:	0039      	movs	r1, r7
 800f8ba:	0010      	movs	r0, r2
 800f8bc:	4d77      	ldr	r5, [pc, #476]	; (800fa9c <__aeabi_dadd+0x630>)
 800f8be:	e6d7      	b.n	800f670 <__aeabi_dadd+0x204>
 800f8c0:	4f76      	ldr	r7, [pc, #472]	; (800fa9c <__aeabi_dadd+0x630>)
 800f8c2:	42bb      	cmp	r3, r7
 800f8c4:	d018      	beq.n	800f8f8 <__aeabi_dadd+0x48c>
 800f8c6:	0033      	movs	r3, r6
 800f8c8:	e675      	b.n	800f5b6 <__aeabi_dadd+0x14a>
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d014      	beq.n	800f8f8 <__aeabi_dadd+0x48c>
 800f8ce:	074b      	lsls	r3, r1, #29
 800f8d0:	08c0      	lsrs	r0, r0, #3
 800f8d2:	4318      	orrs	r0, r3
 800f8d4:	2380      	movs	r3, #128	; 0x80
 800f8d6:	08c9      	lsrs	r1, r1, #3
 800f8d8:	031b      	lsls	r3, r3, #12
 800f8da:	4219      	tst	r1, r3
 800f8dc:	d007      	beq.n	800f8ee <__aeabi_dadd+0x482>
 800f8de:	08fc      	lsrs	r4, r7, #3
 800f8e0:	421c      	tst	r4, r3
 800f8e2:	d104      	bne.n	800f8ee <__aeabi_dadd+0x482>
 800f8e4:	0779      	lsls	r1, r7, #29
 800f8e6:	08d0      	lsrs	r0, r2, #3
 800f8e8:	4308      	orrs	r0, r1
 800f8ea:	46e1      	mov	r9, ip
 800f8ec:	0021      	movs	r1, r4
 800f8ee:	464c      	mov	r4, r9
 800f8f0:	0f42      	lsrs	r2, r0, #29
 800f8f2:	00c9      	lsls	r1, r1, #3
 800f8f4:	4311      	orrs	r1, r2
 800f8f6:	00c0      	lsls	r0, r0, #3
 800f8f8:	4d68      	ldr	r5, [pc, #416]	; (800fa9c <__aeabi_dadd+0x630>)
 800f8fa:	e6b9      	b.n	800f670 <__aeabi_dadd+0x204>
 800f8fc:	001d      	movs	r5, r3
 800f8fe:	2200      	movs	r2, #0
 800f900:	2300      	movs	r3, #0
 800f902:	e6c0      	b.n	800f686 <__aeabi_dadd+0x21a>
 800f904:	2d00      	cmp	r5, #0
 800f906:	d15b      	bne.n	800f9c0 <__aeabi_dadd+0x554>
 800f908:	000d      	movs	r5, r1
 800f90a:	4305      	orrs	r5, r0
 800f90c:	d100      	bne.n	800f910 <__aeabi_dadd+0x4a4>
 800f90e:	e6e2      	b.n	800f6d6 <__aeabi_dadd+0x26a>
 800f910:	1c5d      	adds	r5, r3, #1
 800f912:	d100      	bne.n	800f916 <__aeabi_dadd+0x4aa>
 800f914:	e0b0      	b.n	800fa78 <__aeabi_dadd+0x60c>
 800f916:	4d61      	ldr	r5, [pc, #388]	; (800fa9c <__aeabi_dadd+0x630>)
 800f918:	42ae      	cmp	r6, r5
 800f91a:	d01f      	beq.n	800f95c <__aeabi_dadd+0x4f0>
 800f91c:	43db      	mvns	r3, r3
 800f91e:	2b38      	cmp	r3, #56	; 0x38
 800f920:	dc71      	bgt.n	800fa06 <__aeabi_dadd+0x59a>
 800f922:	2b1f      	cmp	r3, #31
 800f924:	dd00      	ble.n	800f928 <__aeabi_dadd+0x4bc>
 800f926:	e096      	b.n	800fa56 <__aeabi_dadd+0x5ea>
 800f928:	2520      	movs	r5, #32
 800f92a:	000f      	movs	r7, r1
 800f92c:	1aed      	subs	r5, r5, r3
 800f92e:	40af      	lsls	r7, r5
 800f930:	46b9      	mov	r9, r7
 800f932:	0007      	movs	r7, r0
 800f934:	46aa      	mov	sl, r5
 800f936:	40df      	lsrs	r7, r3
 800f938:	464d      	mov	r5, r9
 800f93a:	433d      	orrs	r5, r7
 800f93c:	002f      	movs	r7, r5
 800f93e:	4655      	mov	r5, sl
 800f940:	40a8      	lsls	r0, r5
 800f942:	40d9      	lsrs	r1, r3
 800f944:	1e45      	subs	r5, r0, #1
 800f946:	41a8      	sbcs	r0, r5
 800f948:	4488      	add	r8, r1
 800f94a:	4307      	orrs	r7, r0
 800f94c:	18bf      	adds	r7, r7, r2
 800f94e:	4297      	cmp	r7, r2
 800f950:	4192      	sbcs	r2, r2
 800f952:	4251      	negs	r1, r2
 800f954:	4441      	add	r1, r8
 800f956:	0035      	movs	r5, r6
 800f958:	e63a      	b.n	800f5d0 <__aeabi_dadd+0x164>
 800f95a:	4664      	mov	r4, ip
 800f95c:	0035      	movs	r5, r6
 800f95e:	4641      	mov	r1, r8
 800f960:	0010      	movs	r0, r2
 800f962:	e685      	b.n	800f670 <__aeabi_dadd+0x204>
 800f964:	000b      	movs	r3, r1
 800f966:	4303      	orrs	r3, r0
 800f968:	2d00      	cmp	r5, #0
 800f96a:	d000      	beq.n	800f96e <__aeabi_dadd+0x502>
 800f96c:	e663      	b.n	800f636 <__aeabi_dadd+0x1ca>
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d0f5      	beq.n	800f95e <__aeabi_dadd+0x4f2>
 800f972:	4643      	mov	r3, r8
 800f974:	4313      	orrs	r3, r2
 800f976:	d100      	bne.n	800f97a <__aeabi_dadd+0x50e>
 800f978:	e67a      	b.n	800f670 <__aeabi_dadd+0x204>
 800f97a:	1887      	adds	r7, r0, r2
 800f97c:	4287      	cmp	r7, r0
 800f97e:	4180      	sbcs	r0, r0
 800f980:	2207      	movs	r2, #7
 800f982:	4441      	add	r1, r8
 800f984:	4240      	negs	r0, r0
 800f986:	1809      	adds	r1, r1, r0
 800f988:	403a      	ands	r2, r7
 800f98a:	020b      	lsls	r3, r1, #8
 800f98c:	d400      	bmi.n	800f990 <__aeabi_dadd+0x524>
 800f98e:	e6d5      	b.n	800f73c <__aeabi_dadd+0x2d0>
 800f990:	4b43      	ldr	r3, [pc, #268]	; (800faa0 <__aeabi_dadd+0x634>)
 800f992:	3501      	adds	r5, #1
 800f994:	4019      	ands	r1, r3
 800f996:	e5c9      	b.n	800f52c <__aeabi_dadd+0xc0>
 800f998:	0038      	movs	r0, r7
 800f99a:	e669      	b.n	800f670 <__aeabi_dadd+0x204>
 800f99c:	001e      	movs	r6, r3
 800f99e:	4647      	mov	r7, r8
 800f9a0:	3e20      	subs	r6, #32
 800f9a2:	40f7      	lsrs	r7, r6
 800f9a4:	46bc      	mov	ip, r7
 800f9a6:	2b20      	cmp	r3, #32
 800f9a8:	d004      	beq.n	800f9b4 <__aeabi_dadd+0x548>
 800f9aa:	2640      	movs	r6, #64	; 0x40
 800f9ac:	1af3      	subs	r3, r6, r3
 800f9ae:	4646      	mov	r6, r8
 800f9b0:	409e      	lsls	r6, r3
 800f9b2:	4332      	orrs	r2, r6
 800f9b4:	0017      	movs	r7, r2
 800f9b6:	4663      	mov	r3, ip
 800f9b8:	1e7a      	subs	r2, r7, #1
 800f9ba:	4197      	sbcs	r7, r2
 800f9bc:	431f      	orrs	r7, r3
 800f9be:	e602      	b.n	800f5c6 <__aeabi_dadd+0x15a>
 800f9c0:	4d36      	ldr	r5, [pc, #216]	; (800fa9c <__aeabi_dadd+0x630>)
 800f9c2:	42ae      	cmp	r6, r5
 800f9c4:	d0ca      	beq.n	800f95c <__aeabi_dadd+0x4f0>
 800f9c6:	2580      	movs	r5, #128	; 0x80
 800f9c8:	042d      	lsls	r5, r5, #16
 800f9ca:	425b      	negs	r3, r3
 800f9cc:	4329      	orrs	r1, r5
 800f9ce:	e7a6      	b.n	800f91e <__aeabi_dadd+0x4b2>
 800f9d0:	4308      	orrs	r0, r1
 800f9d2:	1e41      	subs	r1, r0, #1
 800f9d4:	4188      	sbcs	r0, r1
 800f9d6:	e6a6      	b.n	800f726 <__aeabi_dadd+0x2ba>
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d100      	bne.n	800f9de <__aeabi_dadd+0x572>
 800f9dc:	e648      	b.n	800f670 <__aeabi_dadd+0x204>
 800f9de:	1a87      	subs	r7, r0, r2
 800f9e0:	4643      	mov	r3, r8
 800f9e2:	42b8      	cmp	r0, r7
 800f9e4:	41b6      	sbcs	r6, r6
 800f9e6:	1acb      	subs	r3, r1, r3
 800f9e8:	4276      	negs	r6, r6
 800f9ea:	1b9e      	subs	r6, r3, r6
 800f9ec:	0233      	lsls	r3, r6, #8
 800f9ee:	d54b      	bpl.n	800fa88 <__aeabi_dadd+0x61c>
 800f9f0:	1a17      	subs	r7, r2, r0
 800f9f2:	4643      	mov	r3, r8
 800f9f4:	42ba      	cmp	r2, r7
 800f9f6:	4192      	sbcs	r2, r2
 800f9f8:	1a59      	subs	r1, r3, r1
 800f9fa:	4252      	negs	r2, r2
 800f9fc:	1a89      	subs	r1, r1, r2
 800f9fe:	2207      	movs	r2, #7
 800fa00:	4664      	mov	r4, ip
 800fa02:	403a      	ands	r2, r7
 800fa04:	e592      	b.n	800f52c <__aeabi_dadd+0xc0>
 800fa06:	4301      	orrs	r1, r0
 800fa08:	000f      	movs	r7, r1
 800fa0a:	1e79      	subs	r1, r7, #1
 800fa0c:	418f      	sbcs	r7, r1
 800fa0e:	e79d      	b.n	800f94c <__aeabi_dadd+0x4e0>
 800fa10:	001c      	movs	r4, r3
 800fa12:	000f      	movs	r7, r1
 800fa14:	3c20      	subs	r4, #32
 800fa16:	40e7      	lsrs	r7, r4
 800fa18:	2b20      	cmp	r3, #32
 800fa1a:	d003      	beq.n	800fa24 <__aeabi_dadd+0x5b8>
 800fa1c:	2440      	movs	r4, #64	; 0x40
 800fa1e:	1ae3      	subs	r3, r4, r3
 800fa20:	4099      	lsls	r1, r3
 800fa22:	4308      	orrs	r0, r1
 800fa24:	1e41      	subs	r1, r0, #1
 800fa26:	4188      	sbcs	r0, r1
 800fa28:	4338      	orrs	r0, r7
 800fa2a:	e67c      	b.n	800f726 <__aeabi_dadd+0x2ba>
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	2400      	movs	r4, #0
 800fa30:	e625      	b.n	800f67e <__aeabi_dadd+0x212>
 800fa32:	1a17      	subs	r7, r2, r0
 800fa34:	4643      	mov	r3, r8
 800fa36:	42ba      	cmp	r2, r7
 800fa38:	4192      	sbcs	r2, r2
 800fa3a:	1a59      	subs	r1, r3, r1
 800fa3c:	4252      	negs	r2, r2
 800fa3e:	1a89      	subs	r1, r1, r2
 800fa40:	4664      	mov	r4, ip
 800fa42:	0035      	movs	r5, r6
 800fa44:	e543      	b.n	800f4ce <__aeabi_dadd+0x62>
 800fa46:	4641      	mov	r1, r8
 800fa48:	0010      	movs	r0, r2
 800fa4a:	4d14      	ldr	r5, [pc, #80]	; (800fa9c <__aeabi_dadd+0x630>)
 800fa4c:	e610      	b.n	800f670 <__aeabi_dadd+0x204>
 800fa4e:	2280      	movs	r2, #128	; 0x80
 800fa50:	2400      	movs	r4, #0
 800fa52:	0312      	lsls	r2, r2, #12
 800fa54:	e680      	b.n	800f758 <__aeabi_dadd+0x2ec>
 800fa56:	001d      	movs	r5, r3
 800fa58:	000f      	movs	r7, r1
 800fa5a:	3d20      	subs	r5, #32
 800fa5c:	40ef      	lsrs	r7, r5
 800fa5e:	46bc      	mov	ip, r7
 800fa60:	2b20      	cmp	r3, #32
 800fa62:	d003      	beq.n	800fa6c <__aeabi_dadd+0x600>
 800fa64:	2540      	movs	r5, #64	; 0x40
 800fa66:	1aeb      	subs	r3, r5, r3
 800fa68:	4099      	lsls	r1, r3
 800fa6a:	4308      	orrs	r0, r1
 800fa6c:	0007      	movs	r7, r0
 800fa6e:	4663      	mov	r3, ip
 800fa70:	1e78      	subs	r0, r7, #1
 800fa72:	4187      	sbcs	r7, r0
 800fa74:	431f      	orrs	r7, r3
 800fa76:	e769      	b.n	800f94c <__aeabi_dadd+0x4e0>
 800fa78:	1887      	adds	r7, r0, r2
 800fa7a:	4297      	cmp	r7, r2
 800fa7c:	419b      	sbcs	r3, r3
 800fa7e:	4441      	add	r1, r8
 800fa80:	425b      	negs	r3, r3
 800fa82:	18c9      	adds	r1, r1, r3
 800fa84:	0035      	movs	r5, r6
 800fa86:	e5a3      	b.n	800f5d0 <__aeabi_dadd+0x164>
 800fa88:	003b      	movs	r3, r7
 800fa8a:	4333      	orrs	r3, r6
 800fa8c:	d0ce      	beq.n	800fa2c <__aeabi_dadd+0x5c0>
 800fa8e:	2207      	movs	r2, #7
 800fa90:	0031      	movs	r1, r6
 800fa92:	403a      	ands	r2, r7
 800fa94:	e652      	b.n	800f73c <__aeabi_dadd+0x2d0>
 800fa96:	2300      	movs	r3, #0
 800fa98:	001a      	movs	r2, r3
 800fa9a:	e5f4      	b.n	800f686 <__aeabi_dadd+0x21a>
 800fa9c:	000007ff 	.word	0x000007ff
 800faa0:	ff7fffff 	.word	0xff7fffff

0800faa4 <__aeabi_ddiv>:
 800faa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa6:	4657      	mov	r7, sl
 800faa8:	46de      	mov	lr, fp
 800faaa:	464e      	mov	r6, r9
 800faac:	4645      	mov	r5, r8
 800faae:	b5e0      	push	{r5, r6, r7, lr}
 800fab0:	4683      	mov	fp, r0
 800fab2:	0007      	movs	r7, r0
 800fab4:	030e      	lsls	r6, r1, #12
 800fab6:	0048      	lsls	r0, r1, #1
 800fab8:	b085      	sub	sp, #20
 800faba:	4692      	mov	sl, r2
 800fabc:	001c      	movs	r4, r3
 800fabe:	0b36      	lsrs	r6, r6, #12
 800fac0:	0d40      	lsrs	r0, r0, #21
 800fac2:	0fcd      	lsrs	r5, r1, #31
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d100      	bne.n	800faca <__aeabi_ddiv+0x26>
 800fac8:	e09d      	b.n	800fc06 <__aeabi_ddiv+0x162>
 800faca:	4b95      	ldr	r3, [pc, #596]	; (800fd20 <__aeabi_ddiv+0x27c>)
 800facc:	4298      	cmp	r0, r3
 800face:	d039      	beq.n	800fb44 <__aeabi_ddiv+0xa0>
 800fad0:	2380      	movs	r3, #128	; 0x80
 800fad2:	00f6      	lsls	r6, r6, #3
 800fad4:	041b      	lsls	r3, r3, #16
 800fad6:	431e      	orrs	r6, r3
 800fad8:	4a92      	ldr	r2, [pc, #584]	; (800fd24 <__aeabi_ddiv+0x280>)
 800fada:	0f7b      	lsrs	r3, r7, #29
 800fadc:	4333      	orrs	r3, r6
 800fade:	4699      	mov	r9, r3
 800fae0:	4694      	mov	ip, r2
 800fae2:	0003      	movs	r3, r0
 800fae4:	4463      	add	r3, ip
 800fae6:	9300      	str	r3, [sp, #0]
 800fae8:	2300      	movs	r3, #0
 800faea:	2600      	movs	r6, #0
 800faec:	00ff      	lsls	r7, r7, #3
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	0323      	lsls	r3, r4, #12
 800faf2:	0b1b      	lsrs	r3, r3, #12
 800faf4:	4698      	mov	r8, r3
 800faf6:	0063      	lsls	r3, r4, #1
 800faf8:	0fe4      	lsrs	r4, r4, #31
 800fafa:	4652      	mov	r2, sl
 800fafc:	0d5b      	lsrs	r3, r3, #21
 800fafe:	9401      	str	r4, [sp, #4]
 800fb00:	d100      	bne.n	800fb04 <__aeabi_ddiv+0x60>
 800fb02:	e0b3      	b.n	800fc6c <__aeabi_ddiv+0x1c8>
 800fb04:	4986      	ldr	r1, [pc, #536]	; (800fd20 <__aeabi_ddiv+0x27c>)
 800fb06:	428b      	cmp	r3, r1
 800fb08:	d100      	bne.n	800fb0c <__aeabi_ddiv+0x68>
 800fb0a:	e09e      	b.n	800fc4a <__aeabi_ddiv+0x1a6>
 800fb0c:	4642      	mov	r2, r8
 800fb0e:	00d1      	lsls	r1, r2, #3
 800fb10:	2280      	movs	r2, #128	; 0x80
 800fb12:	0412      	lsls	r2, r2, #16
 800fb14:	430a      	orrs	r2, r1
 800fb16:	4651      	mov	r1, sl
 800fb18:	0f49      	lsrs	r1, r1, #29
 800fb1a:	4311      	orrs	r1, r2
 800fb1c:	468b      	mov	fp, r1
 800fb1e:	4981      	ldr	r1, [pc, #516]	; (800fd24 <__aeabi_ddiv+0x280>)
 800fb20:	4652      	mov	r2, sl
 800fb22:	468c      	mov	ip, r1
 800fb24:	9900      	ldr	r1, [sp, #0]
 800fb26:	4463      	add	r3, ip
 800fb28:	1acb      	subs	r3, r1, r3
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	00d2      	lsls	r2, r2, #3
 800fb2e:	9300      	str	r3, [sp, #0]
 800fb30:	002b      	movs	r3, r5
 800fb32:	4063      	eors	r3, r4
 800fb34:	469a      	mov	sl, r3
 800fb36:	2e0f      	cmp	r6, #15
 800fb38:	d900      	bls.n	800fb3c <__aeabi_ddiv+0x98>
 800fb3a:	e105      	b.n	800fd48 <__aeabi_ddiv+0x2a4>
 800fb3c:	4b7a      	ldr	r3, [pc, #488]	; (800fd28 <__aeabi_ddiv+0x284>)
 800fb3e:	00b6      	lsls	r6, r6, #2
 800fb40:	599b      	ldr	r3, [r3, r6]
 800fb42:	469f      	mov	pc, r3
 800fb44:	465b      	mov	r3, fp
 800fb46:	4333      	orrs	r3, r6
 800fb48:	4699      	mov	r9, r3
 800fb4a:	d000      	beq.n	800fb4e <__aeabi_ddiv+0xaa>
 800fb4c:	e0b8      	b.n	800fcc0 <__aeabi_ddiv+0x21c>
 800fb4e:	2302      	movs	r3, #2
 800fb50:	2608      	movs	r6, #8
 800fb52:	2700      	movs	r7, #0
 800fb54:	9000      	str	r0, [sp, #0]
 800fb56:	9302      	str	r3, [sp, #8]
 800fb58:	e7ca      	b.n	800faf0 <__aeabi_ddiv+0x4c>
 800fb5a:	46cb      	mov	fp, r9
 800fb5c:	003a      	movs	r2, r7
 800fb5e:	9902      	ldr	r1, [sp, #8]
 800fb60:	9501      	str	r5, [sp, #4]
 800fb62:	9b01      	ldr	r3, [sp, #4]
 800fb64:	469a      	mov	sl, r3
 800fb66:	2902      	cmp	r1, #2
 800fb68:	d027      	beq.n	800fbba <__aeabi_ddiv+0x116>
 800fb6a:	2903      	cmp	r1, #3
 800fb6c:	d100      	bne.n	800fb70 <__aeabi_ddiv+0xcc>
 800fb6e:	e280      	b.n	8010072 <__aeabi_ddiv+0x5ce>
 800fb70:	2901      	cmp	r1, #1
 800fb72:	d044      	beq.n	800fbfe <__aeabi_ddiv+0x15a>
 800fb74:	496d      	ldr	r1, [pc, #436]	; (800fd2c <__aeabi_ddiv+0x288>)
 800fb76:	9b00      	ldr	r3, [sp, #0]
 800fb78:	468c      	mov	ip, r1
 800fb7a:	4463      	add	r3, ip
 800fb7c:	001c      	movs	r4, r3
 800fb7e:	2c00      	cmp	r4, #0
 800fb80:	dd38      	ble.n	800fbf4 <__aeabi_ddiv+0x150>
 800fb82:	0753      	lsls	r3, r2, #29
 800fb84:	d000      	beq.n	800fb88 <__aeabi_ddiv+0xe4>
 800fb86:	e213      	b.n	800ffb0 <__aeabi_ddiv+0x50c>
 800fb88:	08d2      	lsrs	r2, r2, #3
 800fb8a:	465b      	mov	r3, fp
 800fb8c:	01db      	lsls	r3, r3, #7
 800fb8e:	d509      	bpl.n	800fba4 <__aeabi_ddiv+0x100>
 800fb90:	4659      	mov	r1, fp
 800fb92:	4b67      	ldr	r3, [pc, #412]	; (800fd30 <__aeabi_ddiv+0x28c>)
 800fb94:	4019      	ands	r1, r3
 800fb96:	468b      	mov	fp, r1
 800fb98:	2180      	movs	r1, #128	; 0x80
 800fb9a:	00c9      	lsls	r1, r1, #3
 800fb9c:	468c      	mov	ip, r1
 800fb9e:	9b00      	ldr	r3, [sp, #0]
 800fba0:	4463      	add	r3, ip
 800fba2:	001c      	movs	r4, r3
 800fba4:	4b63      	ldr	r3, [pc, #396]	; (800fd34 <__aeabi_ddiv+0x290>)
 800fba6:	429c      	cmp	r4, r3
 800fba8:	dc07      	bgt.n	800fbba <__aeabi_ddiv+0x116>
 800fbaa:	465b      	mov	r3, fp
 800fbac:	0564      	lsls	r4, r4, #21
 800fbae:	075f      	lsls	r7, r3, #29
 800fbb0:	025b      	lsls	r3, r3, #9
 800fbb2:	4317      	orrs	r7, r2
 800fbb4:	0b1b      	lsrs	r3, r3, #12
 800fbb6:	0d62      	lsrs	r2, r4, #21
 800fbb8:	e002      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	2700      	movs	r7, #0
 800fbbe:	4a58      	ldr	r2, [pc, #352]	; (800fd20 <__aeabi_ddiv+0x27c>)
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	031b      	lsls	r3, r3, #12
 800fbc4:	0b1c      	lsrs	r4, r3, #12
 800fbc6:	0d0b      	lsrs	r3, r1, #20
 800fbc8:	051b      	lsls	r3, r3, #20
 800fbca:	4323      	orrs	r3, r4
 800fbcc:	0514      	lsls	r4, r2, #20
 800fbce:	4a5a      	ldr	r2, [pc, #360]	; (800fd38 <__aeabi_ddiv+0x294>)
 800fbd0:	0038      	movs	r0, r7
 800fbd2:	4013      	ands	r3, r2
 800fbd4:	431c      	orrs	r4, r3
 800fbd6:	4653      	mov	r3, sl
 800fbd8:	0064      	lsls	r4, r4, #1
 800fbda:	07db      	lsls	r3, r3, #31
 800fbdc:	0864      	lsrs	r4, r4, #1
 800fbde:	431c      	orrs	r4, r3
 800fbe0:	0021      	movs	r1, r4
 800fbe2:	b005      	add	sp, #20
 800fbe4:	bc3c      	pop	{r2, r3, r4, r5}
 800fbe6:	4690      	mov	r8, r2
 800fbe8:	4699      	mov	r9, r3
 800fbea:	46a2      	mov	sl, r4
 800fbec:	46ab      	mov	fp, r5
 800fbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	4252      	negs	r2, r2
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	1b1b      	subs	r3, r3, r4
 800fbf8:	2b38      	cmp	r3, #56	; 0x38
 800fbfa:	dc00      	bgt.n	800fbfe <__aeabi_ddiv+0x15a>
 800fbfc:	e1ad      	b.n	800ff5a <__aeabi_ddiv+0x4b6>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2300      	movs	r3, #0
 800fc02:	2700      	movs	r7, #0
 800fc04:	e7dc      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800fc06:	465b      	mov	r3, fp
 800fc08:	4333      	orrs	r3, r6
 800fc0a:	4699      	mov	r9, r3
 800fc0c:	d05e      	beq.n	800fccc <__aeabi_ddiv+0x228>
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	d100      	bne.n	800fc14 <__aeabi_ddiv+0x170>
 800fc12:	e18a      	b.n	800ff2a <__aeabi_ddiv+0x486>
 800fc14:	0030      	movs	r0, r6
 800fc16:	f7fe ff7f 	bl	800eb18 <__clzsi2>
 800fc1a:	0003      	movs	r3, r0
 800fc1c:	3b0b      	subs	r3, #11
 800fc1e:	2b1c      	cmp	r3, #28
 800fc20:	dd00      	ble.n	800fc24 <__aeabi_ddiv+0x180>
 800fc22:	e17b      	b.n	800ff1c <__aeabi_ddiv+0x478>
 800fc24:	221d      	movs	r2, #29
 800fc26:	1ad3      	subs	r3, r2, r3
 800fc28:	465a      	mov	r2, fp
 800fc2a:	0001      	movs	r1, r0
 800fc2c:	40da      	lsrs	r2, r3
 800fc2e:	3908      	subs	r1, #8
 800fc30:	408e      	lsls	r6, r1
 800fc32:	0013      	movs	r3, r2
 800fc34:	465f      	mov	r7, fp
 800fc36:	4333      	orrs	r3, r6
 800fc38:	4699      	mov	r9, r3
 800fc3a:	408f      	lsls	r7, r1
 800fc3c:	4b3f      	ldr	r3, [pc, #252]	; (800fd3c <__aeabi_ddiv+0x298>)
 800fc3e:	2600      	movs	r6, #0
 800fc40:	1a1b      	subs	r3, r3, r0
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	2300      	movs	r3, #0
 800fc46:	9302      	str	r3, [sp, #8]
 800fc48:	e752      	b.n	800faf0 <__aeabi_ddiv+0x4c>
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	4653      	mov	r3, sl
 800fc4e:	430b      	orrs	r3, r1
 800fc50:	493b      	ldr	r1, [pc, #236]	; (800fd40 <__aeabi_ddiv+0x29c>)
 800fc52:	469b      	mov	fp, r3
 800fc54:	468c      	mov	ip, r1
 800fc56:	9b00      	ldr	r3, [sp, #0]
 800fc58:	4463      	add	r3, ip
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	465b      	mov	r3, fp
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d13b      	bne.n	800fcda <__aeabi_ddiv+0x236>
 800fc62:	2302      	movs	r3, #2
 800fc64:	2200      	movs	r2, #0
 800fc66:	431e      	orrs	r6, r3
 800fc68:	2102      	movs	r1, #2
 800fc6a:	e761      	b.n	800fb30 <__aeabi_ddiv+0x8c>
 800fc6c:	4643      	mov	r3, r8
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	469b      	mov	fp, r3
 800fc72:	d037      	beq.n	800fce4 <__aeabi_ddiv+0x240>
 800fc74:	4643      	mov	r3, r8
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d100      	bne.n	800fc7c <__aeabi_ddiv+0x1d8>
 800fc7a:	e162      	b.n	800ff42 <__aeabi_ddiv+0x49e>
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	f7fe ff4b 	bl	800eb18 <__clzsi2>
 800fc82:	0003      	movs	r3, r0
 800fc84:	3b0b      	subs	r3, #11
 800fc86:	2b1c      	cmp	r3, #28
 800fc88:	dd00      	ble.n	800fc8c <__aeabi_ddiv+0x1e8>
 800fc8a:	e153      	b.n	800ff34 <__aeabi_ddiv+0x490>
 800fc8c:	0002      	movs	r2, r0
 800fc8e:	4641      	mov	r1, r8
 800fc90:	3a08      	subs	r2, #8
 800fc92:	4091      	lsls	r1, r2
 800fc94:	4688      	mov	r8, r1
 800fc96:	211d      	movs	r1, #29
 800fc98:	1acb      	subs	r3, r1, r3
 800fc9a:	4651      	mov	r1, sl
 800fc9c:	40d9      	lsrs	r1, r3
 800fc9e:	000b      	movs	r3, r1
 800fca0:	4641      	mov	r1, r8
 800fca2:	430b      	orrs	r3, r1
 800fca4:	469b      	mov	fp, r3
 800fca6:	4653      	mov	r3, sl
 800fca8:	4093      	lsls	r3, r2
 800fcaa:	001a      	movs	r2, r3
 800fcac:	9b00      	ldr	r3, [sp, #0]
 800fcae:	4925      	ldr	r1, [pc, #148]	; (800fd44 <__aeabi_ddiv+0x2a0>)
 800fcb0:	469c      	mov	ip, r3
 800fcb2:	4460      	add	r0, ip
 800fcb4:	0003      	movs	r3, r0
 800fcb6:	468c      	mov	ip, r1
 800fcb8:	4463      	add	r3, ip
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	e737      	b.n	800fb30 <__aeabi_ddiv+0x8c>
 800fcc0:	2303      	movs	r3, #3
 800fcc2:	46b1      	mov	r9, r6
 800fcc4:	9000      	str	r0, [sp, #0]
 800fcc6:	260c      	movs	r6, #12
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	e711      	b.n	800faf0 <__aeabi_ddiv+0x4c>
 800fccc:	2300      	movs	r3, #0
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	2604      	movs	r6, #4
 800fcd4:	2700      	movs	r7, #0
 800fcd6:	9302      	str	r3, [sp, #8]
 800fcd8:	e70a      	b.n	800faf0 <__aeabi_ddiv+0x4c>
 800fcda:	2303      	movs	r3, #3
 800fcdc:	46c3      	mov	fp, r8
 800fcde:	431e      	orrs	r6, r3
 800fce0:	2103      	movs	r1, #3
 800fce2:	e725      	b.n	800fb30 <__aeabi_ddiv+0x8c>
 800fce4:	3301      	adds	r3, #1
 800fce6:	431e      	orrs	r6, r3
 800fce8:	2200      	movs	r2, #0
 800fcea:	2101      	movs	r1, #1
 800fcec:	e720      	b.n	800fb30 <__aeabi_ddiv+0x8c>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	469a      	mov	sl, r3
 800fcf2:	2380      	movs	r3, #128	; 0x80
 800fcf4:	2700      	movs	r7, #0
 800fcf6:	031b      	lsls	r3, r3, #12
 800fcf8:	4a09      	ldr	r2, [pc, #36]	; (800fd20 <__aeabi_ddiv+0x27c>)
 800fcfa:	e761      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800fcfc:	2380      	movs	r3, #128	; 0x80
 800fcfe:	4649      	mov	r1, r9
 800fd00:	031b      	lsls	r3, r3, #12
 800fd02:	4219      	tst	r1, r3
 800fd04:	d100      	bne.n	800fd08 <__aeabi_ddiv+0x264>
 800fd06:	e0e2      	b.n	800fece <__aeabi_ddiv+0x42a>
 800fd08:	4659      	mov	r1, fp
 800fd0a:	4219      	tst	r1, r3
 800fd0c:	d000      	beq.n	800fd10 <__aeabi_ddiv+0x26c>
 800fd0e:	e0de      	b.n	800fece <__aeabi_ddiv+0x42a>
 800fd10:	430b      	orrs	r3, r1
 800fd12:	031b      	lsls	r3, r3, #12
 800fd14:	0017      	movs	r7, r2
 800fd16:	0b1b      	lsrs	r3, r3, #12
 800fd18:	46a2      	mov	sl, r4
 800fd1a:	4a01      	ldr	r2, [pc, #4]	; (800fd20 <__aeabi_ddiv+0x27c>)
 800fd1c:	e750      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800fd1e:	46c0      	nop			; (mov r8, r8)
 800fd20:	000007ff 	.word	0x000007ff
 800fd24:	fffffc01 	.word	0xfffffc01
 800fd28:	0801ba28 	.word	0x0801ba28
 800fd2c:	000003ff 	.word	0x000003ff
 800fd30:	feffffff 	.word	0xfeffffff
 800fd34:	000007fe 	.word	0x000007fe
 800fd38:	800fffff 	.word	0x800fffff
 800fd3c:	fffffc0d 	.word	0xfffffc0d
 800fd40:	fffff801 	.word	0xfffff801
 800fd44:	000003f3 	.word	0x000003f3
 800fd48:	45d9      	cmp	r9, fp
 800fd4a:	d900      	bls.n	800fd4e <__aeabi_ddiv+0x2aa>
 800fd4c:	e0cb      	b.n	800fee6 <__aeabi_ddiv+0x442>
 800fd4e:	d100      	bne.n	800fd52 <__aeabi_ddiv+0x2ae>
 800fd50:	e0c6      	b.n	800fee0 <__aeabi_ddiv+0x43c>
 800fd52:	003c      	movs	r4, r7
 800fd54:	4648      	mov	r0, r9
 800fd56:	2700      	movs	r7, #0
 800fd58:	9b00      	ldr	r3, [sp, #0]
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	465b      	mov	r3, fp
 800fd60:	0e16      	lsrs	r6, r2, #24
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	431e      	orrs	r6, r3
 800fd66:	0213      	lsls	r3, r2, #8
 800fd68:	4698      	mov	r8, r3
 800fd6a:	0433      	lsls	r3, r6, #16
 800fd6c:	0c1b      	lsrs	r3, r3, #16
 800fd6e:	4699      	mov	r9, r3
 800fd70:	0c31      	lsrs	r1, r6, #16
 800fd72:	9101      	str	r1, [sp, #4]
 800fd74:	f7fe ff92 	bl	800ec9c <__aeabi_uidivmod>
 800fd78:	464a      	mov	r2, r9
 800fd7a:	4342      	muls	r2, r0
 800fd7c:	040b      	lsls	r3, r1, #16
 800fd7e:	0c21      	lsrs	r1, r4, #16
 800fd80:	0005      	movs	r5, r0
 800fd82:	4319      	orrs	r1, r3
 800fd84:	428a      	cmp	r2, r1
 800fd86:	d907      	bls.n	800fd98 <__aeabi_ddiv+0x2f4>
 800fd88:	1989      	adds	r1, r1, r6
 800fd8a:	3d01      	subs	r5, #1
 800fd8c:	428e      	cmp	r6, r1
 800fd8e:	d803      	bhi.n	800fd98 <__aeabi_ddiv+0x2f4>
 800fd90:	428a      	cmp	r2, r1
 800fd92:	d901      	bls.n	800fd98 <__aeabi_ddiv+0x2f4>
 800fd94:	1e85      	subs	r5, r0, #2
 800fd96:	1989      	adds	r1, r1, r6
 800fd98:	1a88      	subs	r0, r1, r2
 800fd9a:	9901      	ldr	r1, [sp, #4]
 800fd9c:	f7fe ff7e 	bl	800ec9c <__aeabi_uidivmod>
 800fda0:	0409      	lsls	r1, r1, #16
 800fda2:	468c      	mov	ip, r1
 800fda4:	464a      	mov	r2, r9
 800fda6:	0421      	lsls	r1, r4, #16
 800fda8:	4664      	mov	r4, ip
 800fdaa:	4342      	muls	r2, r0
 800fdac:	0c09      	lsrs	r1, r1, #16
 800fdae:	0003      	movs	r3, r0
 800fdb0:	4321      	orrs	r1, r4
 800fdb2:	428a      	cmp	r2, r1
 800fdb4:	d904      	bls.n	800fdc0 <__aeabi_ddiv+0x31c>
 800fdb6:	1989      	adds	r1, r1, r6
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	428e      	cmp	r6, r1
 800fdbc:	d800      	bhi.n	800fdc0 <__aeabi_ddiv+0x31c>
 800fdbe:	e0f1      	b.n	800ffa4 <__aeabi_ddiv+0x500>
 800fdc0:	042d      	lsls	r5, r5, #16
 800fdc2:	431d      	orrs	r5, r3
 800fdc4:	46ab      	mov	fp, r5
 800fdc6:	4643      	mov	r3, r8
 800fdc8:	1a89      	subs	r1, r1, r2
 800fdca:	4642      	mov	r2, r8
 800fdcc:	0c28      	lsrs	r0, r5, #16
 800fdce:	0412      	lsls	r2, r2, #16
 800fdd0:	0c1d      	lsrs	r5, r3, #16
 800fdd2:	465b      	mov	r3, fp
 800fdd4:	0c14      	lsrs	r4, r2, #16
 800fdd6:	0022      	movs	r2, r4
 800fdd8:	041b      	lsls	r3, r3, #16
 800fdda:	0c1b      	lsrs	r3, r3, #16
 800fddc:	435a      	muls	r2, r3
 800fdde:	9403      	str	r4, [sp, #12]
 800fde0:	436b      	muls	r3, r5
 800fde2:	4344      	muls	r4, r0
 800fde4:	9502      	str	r5, [sp, #8]
 800fde6:	4368      	muls	r0, r5
 800fde8:	191b      	adds	r3, r3, r4
 800fdea:	0c15      	lsrs	r5, r2, #16
 800fdec:	18eb      	adds	r3, r5, r3
 800fdee:	429c      	cmp	r4, r3
 800fdf0:	d903      	bls.n	800fdfa <__aeabi_ddiv+0x356>
 800fdf2:	2480      	movs	r4, #128	; 0x80
 800fdf4:	0264      	lsls	r4, r4, #9
 800fdf6:	46a4      	mov	ip, r4
 800fdf8:	4460      	add	r0, ip
 800fdfa:	0c1c      	lsrs	r4, r3, #16
 800fdfc:	0415      	lsls	r5, r2, #16
 800fdfe:	041b      	lsls	r3, r3, #16
 800fe00:	0c2d      	lsrs	r5, r5, #16
 800fe02:	1820      	adds	r0, r4, r0
 800fe04:	195d      	adds	r5, r3, r5
 800fe06:	4281      	cmp	r1, r0
 800fe08:	d377      	bcc.n	800fefa <__aeabi_ddiv+0x456>
 800fe0a:	d073      	beq.n	800fef4 <__aeabi_ddiv+0x450>
 800fe0c:	1a0c      	subs	r4, r1, r0
 800fe0e:	4aa2      	ldr	r2, [pc, #648]	; (8010098 <__aeabi_ddiv+0x5f4>)
 800fe10:	1b7d      	subs	r5, r7, r5
 800fe12:	42af      	cmp	r7, r5
 800fe14:	41bf      	sbcs	r7, r7
 800fe16:	4694      	mov	ip, r2
 800fe18:	9b00      	ldr	r3, [sp, #0]
 800fe1a:	427f      	negs	r7, r7
 800fe1c:	4463      	add	r3, ip
 800fe1e:	1be0      	subs	r0, r4, r7
 800fe20:	001c      	movs	r4, r3
 800fe22:	4286      	cmp	r6, r0
 800fe24:	d100      	bne.n	800fe28 <__aeabi_ddiv+0x384>
 800fe26:	e0db      	b.n	800ffe0 <__aeabi_ddiv+0x53c>
 800fe28:	9901      	ldr	r1, [sp, #4]
 800fe2a:	f7fe ff37 	bl	800ec9c <__aeabi_uidivmod>
 800fe2e:	464a      	mov	r2, r9
 800fe30:	4342      	muls	r2, r0
 800fe32:	040b      	lsls	r3, r1, #16
 800fe34:	0c29      	lsrs	r1, r5, #16
 800fe36:	0007      	movs	r7, r0
 800fe38:	4319      	orrs	r1, r3
 800fe3a:	428a      	cmp	r2, r1
 800fe3c:	d907      	bls.n	800fe4e <__aeabi_ddiv+0x3aa>
 800fe3e:	1989      	adds	r1, r1, r6
 800fe40:	3f01      	subs	r7, #1
 800fe42:	428e      	cmp	r6, r1
 800fe44:	d803      	bhi.n	800fe4e <__aeabi_ddiv+0x3aa>
 800fe46:	428a      	cmp	r2, r1
 800fe48:	d901      	bls.n	800fe4e <__aeabi_ddiv+0x3aa>
 800fe4a:	1e87      	subs	r7, r0, #2
 800fe4c:	1989      	adds	r1, r1, r6
 800fe4e:	1a88      	subs	r0, r1, r2
 800fe50:	9901      	ldr	r1, [sp, #4]
 800fe52:	f7fe ff23 	bl	800ec9c <__aeabi_uidivmod>
 800fe56:	0409      	lsls	r1, r1, #16
 800fe58:	464a      	mov	r2, r9
 800fe5a:	4689      	mov	r9, r1
 800fe5c:	0429      	lsls	r1, r5, #16
 800fe5e:	464d      	mov	r5, r9
 800fe60:	4342      	muls	r2, r0
 800fe62:	0c09      	lsrs	r1, r1, #16
 800fe64:	0003      	movs	r3, r0
 800fe66:	4329      	orrs	r1, r5
 800fe68:	428a      	cmp	r2, r1
 800fe6a:	d907      	bls.n	800fe7c <__aeabi_ddiv+0x3d8>
 800fe6c:	1989      	adds	r1, r1, r6
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	428e      	cmp	r6, r1
 800fe72:	d803      	bhi.n	800fe7c <__aeabi_ddiv+0x3d8>
 800fe74:	428a      	cmp	r2, r1
 800fe76:	d901      	bls.n	800fe7c <__aeabi_ddiv+0x3d8>
 800fe78:	1e83      	subs	r3, r0, #2
 800fe7a:	1989      	adds	r1, r1, r6
 800fe7c:	043f      	lsls	r7, r7, #16
 800fe7e:	1a89      	subs	r1, r1, r2
 800fe80:	003a      	movs	r2, r7
 800fe82:	9f03      	ldr	r7, [sp, #12]
 800fe84:	431a      	orrs	r2, r3
 800fe86:	0038      	movs	r0, r7
 800fe88:	0413      	lsls	r3, r2, #16
 800fe8a:	0c1b      	lsrs	r3, r3, #16
 800fe8c:	4358      	muls	r0, r3
 800fe8e:	4681      	mov	r9, r0
 800fe90:	9802      	ldr	r0, [sp, #8]
 800fe92:	0c15      	lsrs	r5, r2, #16
 800fe94:	436f      	muls	r7, r5
 800fe96:	4343      	muls	r3, r0
 800fe98:	4345      	muls	r5, r0
 800fe9a:	4648      	mov	r0, r9
 800fe9c:	0c00      	lsrs	r0, r0, #16
 800fe9e:	4684      	mov	ip, r0
 800fea0:	19db      	adds	r3, r3, r7
 800fea2:	4463      	add	r3, ip
 800fea4:	429f      	cmp	r7, r3
 800fea6:	d903      	bls.n	800feb0 <__aeabi_ddiv+0x40c>
 800fea8:	2080      	movs	r0, #128	; 0x80
 800feaa:	0240      	lsls	r0, r0, #9
 800feac:	4684      	mov	ip, r0
 800feae:	4465      	add	r5, ip
 800feb0:	4648      	mov	r0, r9
 800feb2:	0c1f      	lsrs	r7, r3, #16
 800feb4:	0400      	lsls	r0, r0, #16
 800feb6:	041b      	lsls	r3, r3, #16
 800feb8:	0c00      	lsrs	r0, r0, #16
 800feba:	197d      	adds	r5, r7, r5
 800febc:	1818      	adds	r0, r3, r0
 800febe:	42a9      	cmp	r1, r5
 800fec0:	d200      	bcs.n	800fec4 <__aeabi_ddiv+0x420>
 800fec2:	e084      	b.n	800ffce <__aeabi_ddiv+0x52a>
 800fec4:	d100      	bne.n	800fec8 <__aeabi_ddiv+0x424>
 800fec6:	e07f      	b.n	800ffc8 <__aeabi_ddiv+0x524>
 800fec8:	2301      	movs	r3, #1
 800feca:	431a      	orrs	r2, r3
 800fecc:	e657      	b.n	800fb7e <__aeabi_ddiv+0xda>
 800fece:	2380      	movs	r3, #128	; 0x80
 800fed0:	464a      	mov	r2, r9
 800fed2:	031b      	lsls	r3, r3, #12
 800fed4:	4313      	orrs	r3, r2
 800fed6:	031b      	lsls	r3, r3, #12
 800fed8:	0b1b      	lsrs	r3, r3, #12
 800feda:	46aa      	mov	sl, r5
 800fedc:	4a6f      	ldr	r2, [pc, #444]	; (801009c <__aeabi_ddiv+0x5f8>)
 800fede:	e66f      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800fee0:	42ba      	cmp	r2, r7
 800fee2:	d900      	bls.n	800fee6 <__aeabi_ddiv+0x442>
 800fee4:	e735      	b.n	800fd52 <__aeabi_ddiv+0x2ae>
 800fee6:	464b      	mov	r3, r9
 800fee8:	07dc      	lsls	r4, r3, #31
 800feea:	0858      	lsrs	r0, r3, #1
 800feec:	087b      	lsrs	r3, r7, #1
 800feee:	431c      	orrs	r4, r3
 800fef0:	07ff      	lsls	r7, r7, #31
 800fef2:	e734      	b.n	800fd5e <__aeabi_ddiv+0x2ba>
 800fef4:	2400      	movs	r4, #0
 800fef6:	42af      	cmp	r7, r5
 800fef8:	d289      	bcs.n	800fe0e <__aeabi_ddiv+0x36a>
 800fefa:	4447      	add	r7, r8
 800fefc:	4547      	cmp	r7, r8
 800fefe:	41a4      	sbcs	r4, r4
 800ff00:	465b      	mov	r3, fp
 800ff02:	4264      	negs	r4, r4
 800ff04:	19a4      	adds	r4, r4, r6
 800ff06:	1864      	adds	r4, r4, r1
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	42a6      	cmp	r6, r4
 800ff0c:	d21e      	bcs.n	800ff4c <__aeabi_ddiv+0x4a8>
 800ff0e:	42a0      	cmp	r0, r4
 800ff10:	d86d      	bhi.n	800ffee <__aeabi_ddiv+0x54a>
 800ff12:	d100      	bne.n	800ff16 <__aeabi_ddiv+0x472>
 800ff14:	e0b6      	b.n	8010084 <__aeabi_ddiv+0x5e0>
 800ff16:	1a24      	subs	r4, r4, r0
 800ff18:	469b      	mov	fp, r3
 800ff1a:	e778      	b.n	800fe0e <__aeabi_ddiv+0x36a>
 800ff1c:	0003      	movs	r3, r0
 800ff1e:	465a      	mov	r2, fp
 800ff20:	3b28      	subs	r3, #40	; 0x28
 800ff22:	409a      	lsls	r2, r3
 800ff24:	2700      	movs	r7, #0
 800ff26:	4691      	mov	r9, r2
 800ff28:	e688      	b.n	800fc3c <__aeabi_ddiv+0x198>
 800ff2a:	4658      	mov	r0, fp
 800ff2c:	f7fe fdf4 	bl	800eb18 <__clzsi2>
 800ff30:	3020      	adds	r0, #32
 800ff32:	e672      	b.n	800fc1a <__aeabi_ddiv+0x176>
 800ff34:	0003      	movs	r3, r0
 800ff36:	4652      	mov	r2, sl
 800ff38:	3b28      	subs	r3, #40	; 0x28
 800ff3a:	409a      	lsls	r2, r3
 800ff3c:	4693      	mov	fp, r2
 800ff3e:	2200      	movs	r2, #0
 800ff40:	e6b4      	b.n	800fcac <__aeabi_ddiv+0x208>
 800ff42:	4650      	mov	r0, sl
 800ff44:	f7fe fde8 	bl	800eb18 <__clzsi2>
 800ff48:	3020      	adds	r0, #32
 800ff4a:	e69a      	b.n	800fc82 <__aeabi_ddiv+0x1de>
 800ff4c:	42a6      	cmp	r6, r4
 800ff4e:	d1e2      	bne.n	800ff16 <__aeabi_ddiv+0x472>
 800ff50:	45b8      	cmp	r8, r7
 800ff52:	d9dc      	bls.n	800ff0e <__aeabi_ddiv+0x46a>
 800ff54:	1a34      	subs	r4, r6, r0
 800ff56:	469b      	mov	fp, r3
 800ff58:	e759      	b.n	800fe0e <__aeabi_ddiv+0x36a>
 800ff5a:	2b1f      	cmp	r3, #31
 800ff5c:	dc65      	bgt.n	801002a <__aeabi_ddiv+0x586>
 800ff5e:	4c50      	ldr	r4, [pc, #320]	; (80100a0 <__aeabi_ddiv+0x5fc>)
 800ff60:	9900      	ldr	r1, [sp, #0]
 800ff62:	46a4      	mov	ip, r4
 800ff64:	465c      	mov	r4, fp
 800ff66:	4461      	add	r1, ip
 800ff68:	0008      	movs	r0, r1
 800ff6a:	408c      	lsls	r4, r1
 800ff6c:	0011      	movs	r1, r2
 800ff6e:	4082      	lsls	r2, r0
 800ff70:	40d9      	lsrs	r1, r3
 800ff72:	1e50      	subs	r0, r2, #1
 800ff74:	4182      	sbcs	r2, r0
 800ff76:	430c      	orrs	r4, r1
 800ff78:	4314      	orrs	r4, r2
 800ff7a:	465a      	mov	r2, fp
 800ff7c:	40da      	lsrs	r2, r3
 800ff7e:	0013      	movs	r3, r2
 800ff80:	0762      	lsls	r2, r4, #29
 800ff82:	d009      	beq.n	800ff98 <__aeabi_ddiv+0x4f4>
 800ff84:	220f      	movs	r2, #15
 800ff86:	4022      	ands	r2, r4
 800ff88:	2a04      	cmp	r2, #4
 800ff8a:	d005      	beq.n	800ff98 <__aeabi_ddiv+0x4f4>
 800ff8c:	0022      	movs	r2, r4
 800ff8e:	1d14      	adds	r4, r2, #4
 800ff90:	4294      	cmp	r4, r2
 800ff92:	4189      	sbcs	r1, r1
 800ff94:	4249      	negs	r1, r1
 800ff96:	185b      	adds	r3, r3, r1
 800ff98:	021a      	lsls	r2, r3, #8
 800ff9a:	d562      	bpl.n	8010062 <__aeabi_ddiv+0x5be>
 800ff9c:	2201      	movs	r2, #1
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	2700      	movs	r7, #0
 800ffa2:	e60d      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 800ffa4:	428a      	cmp	r2, r1
 800ffa6:	d800      	bhi.n	800ffaa <__aeabi_ddiv+0x506>
 800ffa8:	e70a      	b.n	800fdc0 <__aeabi_ddiv+0x31c>
 800ffaa:	1e83      	subs	r3, r0, #2
 800ffac:	1989      	adds	r1, r1, r6
 800ffae:	e707      	b.n	800fdc0 <__aeabi_ddiv+0x31c>
 800ffb0:	230f      	movs	r3, #15
 800ffb2:	4013      	ands	r3, r2
 800ffb4:	2b04      	cmp	r3, #4
 800ffb6:	d100      	bne.n	800ffba <__aeabi_ddiv+0x516>
 800ffb8:	e5e6      	b.n	800fb88 <__aeabi_ddiv+0xe4>
 800ffba:	1d17      	adds	r7, r2, #4
 800ffbc:	4297      	cmp	r7, r2
 800ffbe:	4192      	sbcs	r2, r2
 800ffc0:	4253      	negs	r3, r2
 800ffc2:	449b      	add	fp, r3
 800ffc4:	08fa      	lsrs	r2, r7, #3
 800ffc6:	e5e0      	b.n	800fb8a <__aeabi_ddiv+0xe6>
 800ffc8:	2800      	cmp	r0, #0
 800ffca:	d100      	bne.n	800ffce <__aeabi_ddiv+0x52a>
 800ffcc:	e5d7      	b.n	800fb7e <__aeabi_ddiv+0xda>
 800ffce:	1871      	adds	r1, r6, r1
 800ffd0:	1e53      	subs	r3, r2, #1
 800ffd2:	42b1      	cmp	r1, r6
 800ffd4:	d327      	bcc.n	8010026 <__aeabi_ddiv+0x582>
 800ffd6:	42a9      	cmp	r1, r5
 800ffd8:	d315      	bcc.n	8010006 <__aeabi_ddiv+0x562>
 800ffda:	d058      	beq.n	801008e <__aeabi_ddiv+0x5ea>
 800ffdc:	001a      	movs	r2, r3
 800ffde:	e773      	b.n	800fec8 <__aeabi_ddiv+0x424>
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	dc00      	bgt.n	800ffe6 <__aeabi_ddiv+0x542>
 800ffe4:	e604      	b.n	800fbf0 <__aeabi_ddiv+0x14c>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	2200      	movs	r2, #0
 800ffea:	449b      	add	fp, r3
 800ffec:	e5cd      	b.n	800fb8a <__aeabi_ddiv+0xe6>
 800ffee:	2302      	movs	r3, #2
 800fff0:	4447      	add	r7, r8
 800fff2:	4547      	cmp	r7, r8
 800fff4:	4189      	sbcs	r1, r1
 800fff6:	425b      	negs	r3, r3
 800fff8:	469c      	mov	ip, r3
 800fffa:	4249      	negs	r1, r1
 800fffc:	1989      	adds	r1, r1, r6
 800fffe:	190c      	adds	r4, r1, r4
 8010000:	44e3      	add	fp, ip
 8010002:	1a24      	subs	r4, r4, r0
 8010004:	e703      	b.n	800fe0e <__aeabi_ddiv+0x36a>
 8010006:	4643      	mov	r3, r8
 8010008:	005f      	lsls	r7, r3, #1
 801000a:	4547      	cmp	r7, r8
 801000c:	419b      	sbcs	r3, r3
 801000e:	46b8      	mov	r8, r7
 8010010:	425b      	negs	r3, r3
 8010012:	199e      	adds	r6, r3, r6
 8010014:	3a02      	subs	r2, #2
 8010016:	1989      	adds	r1, r1, r6
 8010018:	42a9      	cmp	r1, r5
 801001a:	d000      	beq.n	801001e <__aeabi_ddiv+0x57a>
 801001c:	e754      	b.n	800fec8 <__aeabi_ddiv+0x424>
 801001e:	4540      	cmp	r0, r8
 8010020:	d000      	beq.n	8010024 <__aeabi_ddiv+0x580>
 8010022:	e751      	b.n	800fec8 <__aeabi_ddiv+0x424>
 8010024:	e5ab      	b.n	800fb7e <__aeabi_ddiv+0xda>
 8010026:	001a      	movs	r2, r3
 8010028:	e7f6      	b.n	8010018 <__aeabi_ddiv+0x574>
 801002a:	211f      	movs	r1, #31
 801002c:	465f      	mov	r7, fp
 801002e:	4249      	negs	r1, r1
 8010030:	1b0c      	subs	r4, r1, r4
 8010032:	40e7      	lsrs	r7, r4
 8010034:	2b20      	cmp	r3, #32
 8010036:	d007      	beq.n	8010048 <__aeabi_ddiv+0x5a4>
 8010038:	491a      	ldr	r1, [pc, #104]	; (80100a4 <__aeabi_ddiv+0x600>)
 801003a:	9b00      	ldr	r3, [sp, #0]
 801003c:	468c      	mov	ip, r1
 801003e:	4463      	add	r3, ip
 8010040:	0018      	movs	r0, r3
 8010042:	465b      	mov	r3, fp
 8010044:	4083      	lsls	r3, r0
 8010046:	431a      	orrs	r2, r3
 8010048:	1e50      	subs	r0, r2, #1
 801004a:	4182      	sbcs	r2, r0
 801004c:	433a      	orrs	r2, r7
 801004e:	2707      	movs	r7, #7
 8010050:	2300      	movs	r3, #0
 8010052:	4017      	ands	r7, r2
 8010054:	d009      	beq.n	801006a <__aeabi_ddiv+0x5c6>
 8010056:	210f      	movs	r1, #15
 8010058:	2300      	movs	r3, #0
 801005a:	4011      	ands	r1, r2
 801005c:	0014      	movs	r4, r2
 801005e:	2904      	cmp	r1, #4
 8010060:	d195      	bne.n	800ff8e <__aeabi_ddiv+0x4ea>
 8010062:	0022      	movs	r2, r4
 8010064:	075f      	lsls	r7, r3, #29
 8010066:	025b      	lsls	r3, r3, #9
 8010068:	0b1b      	lsrs	r3, r3, #12
 801006a:	08d2      	lsrs	r2, r2, #3
 801006c:	4317      	orrs	r7, r2
 801006e:	2200      	movs	r2, #0
 8010070:	e5a6      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 8010072:	2380      	movs	r3, #128	; 0x80
 8010074:	4659      	mov	r1, fp
 8010076:	031b      	lsls	r3, r3, #12
 8010078:	430b      	orrs	r3, r1
 801007a:	031b      	lsls	r3, r3, #12
 801007c:	0017      	movs	r7, r2
 801007e:	0b1b      	lsrs	r3, r3, #12
 8010080:	4a06      	ldr	r2, [pc, #24]	; (801009c <__aeabi_ddiv+0x5f8>)
 8010082:	e59d      	b.n	800fbc0 <__aeabi_ddiv+0x11c>
 8010084:	42bd      	cmp	r5, r7
 8010086:	d8b2      	bhi.n	800ffee <__aeabi_ddiv+0x54a>
 8010088:	469b      	mov	fp, r3
 801008a:	2400      	movs	r4, #0
 801008c:	e6bf      	b.n	800fe0e <__aeabi_ddiv+0x36a>
 801008e:	4580      	cmp	r8, r0
 8010090:	d3b9      	bcc.n	8010006 <__aeabi_ddiv+0x562>
 8010092:	001a      	movs	r2, r3
 8010094:	e7c3      	b.n	801001e <__aeabi_ddiv+0x57a>
 8010096:	46c0      	nop			; (mov r8, r8)
 8010098:	000003ff 	.word	0x000003ff
 801009c:	000007ff 	.word	0x000007ff
 80100a0:	0000041e 	.word	0x0000041e
 80100a4:	0000043e 	.word	0x0000043e

080100a8 <__eqdf2>:
 80100a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100aa:	464f      	mov	r7, r9
 80100ac:	4646      	mov	r6, r8
 80100ae:	46d6      	mov	lr, sl
 80100b0:	4684      	mov	ip, r0
 80100b2:	b5c0      	push	{r6, r7, lr}
 80100b4:	4680      	mov	r8, r0
 80100b6:	4e19      	ldr	r6, [pc, #100]	; (801011c <__eqdf2+0x74>)
 80100b8:	0318      	lsls	r0, r3, #12
 80100ba:	030f      	lsls	r7, r1, #12
 80100bc:	004d      	lsls	r5, r1, #1
 80100be:	0b00      	lsrs	r0, r0, #12
 80100c0:	005c      	lsls	r4, r3, #1
 80100c2:	4682      	mov	sl, r0
 80100c4:	0b3f      	lsrs	r7, r7, #12
 80100c6:	0d6d      	lsrs	r5, r5, #21
 80100c8:	0fc9      	lsrs	r1, r1, #31
 80100ca:	4691      	mov	r9, r2
 80100cc:	0d64      	lsrs	r4, r4, #21
 80100ce:	0fdb      	lsrs	r3, r3, #31
 80100d0:	2001      	movs	r0, #1
 80100d2:	42b5      	cmp	r5, r6
 80100d4:	d00a      	beq.n	80100ec <__eqdf2+0x44>
 80100d6:	42b4      	cmp	r4, r6
 80100d8:	d003      	beq.n	80100e2 <__eqdf2+0x3a>
 80100da:	42a5      	cmp	r5, r4
 80100dc:	d101      	bne.n	80100e2 <__eqdf2+0x3a>
 80100de:	4557      	cmp	r7, sl
 80100e0:	d00c      	beq.n	80100fc <__eqdf2+0x54>
 80100e2:	bc1c      	pop	{r2, r3, r4}
 80100e4:	4690      	mov	r8, r2
 80100e6:	4699      	mov	r9, r3
 80100e8:	46a2      	mov	sl, r4
 80100ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100ec:	4666      	mov	r6, ip
 80100ee:	433e      	orrs	r6, r7
 80100f0:	d1f7      	bne.n	80100e2 <__eqdf2+0x3a>
 80100f2:	42ac      	cmp	r4, r5
 80100f4:	d1f5      	bne.n	80100e2 <__eqdf2+0x3a>
 80100f6:	4654      	mov	r4, sl
 80100f8:	4314      	orrs	r4, r2
 80100fa:	d1f2      	bne.n	80100e2 <__eqdf2+0x3a>
 80100fc:	2001      	movs	r0, #1
 80100fe:	45c8      	cmp	r8, r9
 8010100:	d1ef      	bne.n	80100e2 <__eqdf2+0x3a>
 8010102:	4299      	cmp	r1, r3
 8010104:	d007      	beq.n	8010116 <__eqdf2+0x6e>
 8010106:	2d00      	cmp	r5, #0
 8010108:	d1eb      	bne.n	80100e2 <__eqdf2+0x3a>
 801010a:	4663      	mov	r3, ip
 801010c:	431f      	orrs	r7, r3
 801010e:	0038      	movs	r0, r7
 8010110:	1e47      	subs	r7, r0, #1
 8010112:	41b8      	sbcs	r0, r7
 8010114:	e7e5      	b.n	80100e2 <__eqdf2+0x3a>
 8010116:	2000      	movs	r0, #0
 8010118:	e7e3      	b.n	80100e2 <__eqdf2+0x3a>
 801011a:	46c0      	nop			; (mov r8, r8)
 801011c:	000007ff 	.word	0x000007ff

08010120 <__gedf2>:
 8010120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010122:	464f      	mov	r7, r9
 8010124:	4646      	mov	r6, r8
 8010126:	46d6      	mov	lr, sl
 8010128:	004d      	lsls	r5, r1, #1
 801012a:	b5c0      	push	{r6, r7, lr}
 801012c:	030e      	lsls	r6, r1, #12
 801012e:	0fc9      	lsrs	r1, r1, #31
 8010130:	468a      	mov	sl, r1
 8010132:	492c      	ldr	r1, [pc, #176]	; (80101e4 <__gedf2+0xc4>)
 8010134:	031f      	lsls	r7, r3, #12
 8010136:	005c      	lsls	r4, r3, #1
 8010138:	4680      	mov	r8, r0
 801013a:	0b36      	lsrs	r6, r6, #12
 801013c:	0d6d      	lsrs	r5, r5, #21
 801013e:	4691      	mov	r9, r2
 8010140:	0b3f      	lsrs	r7, r7, #12
 8010142:	0d64      	lsrs	r4, r4, #21
 8010144:	0fdb      	lsrs	r3, r3, #31
 8010146:	428d      	cmp	r5, r1
 8010148:	d01e      	beq.n	8010188 <__gedf2+0x68>
 801014a:	428c      	cmp	r4, r1
 801014c:	d016      	beq.n	801017c <__gedf2+0x5c>
 801014e:	2d00      	cmp	r5, #0
 8010150:	d11e      	bne.n	8010190 <__gedf2+0x70>
 8010152:	4330      	orrs	r0, r6
 8010154:	4684      	mov	ip, r0
 8010156:	2c00      	cmp	r4, #0
 8010158:	d101      	bne.n	801015e <__gedf2+0x3e>
 801015a:	433a      	orrs	r2, r7
 801015c:	d023      	beq.n	80101a6 <__gedf2+0x86>
 801015e:	4662      	mov	r2, ip
 8010160:	2a00      	cmp	r2, #0
 8010162:	d01a      	beq.n	801019a <__gedf2+0x7a>
 8010164:	459a      	cmp	sl, r3
 8010166:	d029      	beq.n	80101bc <__gedf2+0x9c>
 8010168:	4651      	mov	r1, sl
 801016a:	2002      	movs	r0, #2
 801016c:	3901      	subs	r1, #1
 801016e:	4008      	ands	r0, r1
 8010170:	3801      	subs	r0, #1
 8010172:	bc1c      	pop	{r2, r3, r4}
 8010174:	4690      	mov	r8, r2
 8010176:	4699      	mov	r9, r3
 8010178:	46a2      	mov	sl, r4
 801017a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801017c:	0039      	movs	r1, r7
 801017e:	4311      	orrs	r1, r2
 8010180:	d0e5      	beq.n	801014e <__gedf2+0x2e>
 8010182:	2002      	movs	r0, #2
 8010184:	4240      	negs	r0, r0
 8010186:	e7f4      	b.n	8010172 <__gedf2+0x52>
 8010188:	4330      	orrs	r0, r6
 801018a:	d1fa      	bne.n	8010182 <__gedf2+0x62>
 801018c:	42ac      	cmp	r4, r5
 801018e:	d00f      	beq.n	80101b0 <__gedf2+0x90>
 8010190:	2c00      	cmp	r4, #0
 8010192:	d10f      	bne.n	80101b4 <__gedf2+0x94>
 8010194:	433a      	orrs	r2, r7
 8010196:	d0e7      	beq.n	8010168 <__gedf2+0x48>
 8010198:	e00c      	b.n	80101b4 <__gedf2+0x94>
 801019a:	2201      	movs	r2, #1
 801019c:	3b01      	subs	r3, #1
 801019e:	4393      	bics	r3, r2
 80101a0:	0018      	movs	r0, r3
 80101a2:	3001      	adds	r0, #1
 80101a4:	e7e5      	b.n	8010172 <__gedf2+0x52>
 80101a6:	4663      	mov	r3, ip
 80101a8:	2000      	movs	r0, #0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d0e1      	beq.n	8010172 <__gedf2+0x52>
 80101ae:	e7db      	b.n	8010168 <__gedf2+0x48>
 80101b0:	433a      	orrs	r2, r7
 80101b2:	d1e6      	bne.n	8010182 <__gedf2+0x62>
 80101b4:	459a      	cmp	sl, r3
 80101b6:	d1d7      	bne.n	8010168 <__gedf2+0x48>
 80101b8:	42a5      	cmp	r5, r4
 80101ba:	dcd5      	bgt.n	8010168 <__gedf2+0x48>
 80101bc:	42a5      	cmp	r5, r4
 80101be:	db05      	blt.n	80101cc <__gedf2+0xac>
 80101c0:	42be      	cmp	r6, r7
 80101c2:	d8d1      	bhi.n	8010168 <__gedf2+0x48>
 80101c4:	d008      	beq.n	80101d8 <__gedf2+0xb8>
 80101c6:	2000      	movs	r0, #0
 80101c8:	42be      	cmp	r6, r7
 80101ca:	d2d2      	bcs.n	8010172 <__gedf2+0x52>
 80101cc:	4650      	mov	r0, sl
 80101ce:	2301      	movs	r3, #1
 80101d0:	3801      	subs	r0, #1
 80101d2:	4398      	bics	r0, r3
 80101d4:	3001      	adds	r0, #1
 80101d6:	e7cc      	b.n	8010172 <__gedf2+0x52>
 80101d8:	45c8      	cmp	r8, r9
 80101da:	d8c5      	bhi.n	8010168 <__gedf2+0x48>
 80101dc:	2000      	movs	r0, #0
 80101de:	45c8      	cmp	r8, r9
 80101e0:	d3f4      	bcc.n	80101cc <__gedf2+0xac>
 80101e2:	e7c6      	b.n	8010172 <__gedf2+0x52>
 80101e4:	000007ff 	.word	0x000007ff

080101e8 <__ledf2>:
 80101e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ea:	464f      	mov	r7, r9
 80101ec:	4646      	mov	r6, r8
 80101ee:	46d6      	mov	lr, sl
 80101f0:	004d      	lsls	r5, r1, #1
 80101f2:	b5c0      	push	{r6, r7, lr}
 80101f4:	030e      	lsls	r6, r1, #12
 80101f6:	0fc9      	lsrs	r1, r1, #31
 80101f8:	468a      	mov	sl, r1
 80101fa:	492e      	ldr	r1, [pc, #184]	; (80102b4 <__ledf2+0xcc>)
 80101fc:	031f      	lsls	r7, r3, #12
 80101fe:	005c      	lsls	r4, r3, #1
 8010200:	4680      	mov	r8, r0
 8010202:	0b36      	lsrs	r6, r6, #12
 8010204:	0d6d      	lsrs	r5, r5, #21
 8010206:	4691      	mov	r9, r2
 8010208:	0b3f      	lsrs	r7, r7, #12
 801020a:	0d64      	lsrs	r4, r4, #21
 801020c:	0fdb      	lsrs	r3, r3, #31
 801020e:	428d      	cmp	r5, r1
 8010210:	d018      	beq.n	8010244 <__ledf2+0x5c>
 8010212:	428c      	cmp	r4, r1
 8010214:	d011      	beq.n	801023a <__ledf2+0x52>
 8010216:	2d00      	cmp	r5, #0
 8010218:	d118      	bne.n	801024c <__ledf2+0x64>
 801021a:	4330      	orrs	r0, r6
 801021c:	4684      	mov	ip, r0
 801021e:	2c00      	cmp	r4, #0
 8010220:	d11e      	bne.n	8010260 <__ledf2+0x78>
 8010222:	433a      	orrs	r2, r7
 8010224:	d11c      	bne.n	8010260 <__ledf2+0x78>
 8010226:	4663      	mov	r3, ip
 8010228:	2000      	movs	r0, #0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d030      	beq.n	8010290 <__ledf2+0xa8>
 801022e:	4651      	mov	r1, sl
 8010230:	2002      	movs	r0, #2
 8010232:	3901      	subs	r1, #1
 8010234:	4008      	ands	r0, r1
 8010236:	3801      	subs	r0, #1
 8010238:	e02a      	b.n	8010290 <__ledf2+0xa8>
 801023a:	0039      	movs	r1, r7
 801023c:	4311      	orrs	r1, r2
 801023e:	d0ea      	beq.n	8010216 <__ledf2+0x2e>
 8010240:	2002      	movs	r0, #2
 8010242:	e025      	b.n	8010290 <__ledf2+0xa8>
 8010244:	4330      	orrs	r0, r6
 8010246:	d1fb      	bne.n	8010240 <__ledf2+0x58>
 8010248:	42ac      	cmp	r4, r5
 801024a:	d026      	beq.n	801029a <__ledf2+0xb2>
 801024c:	2c00      	cmp	r4, #0
 801024e:	d126      	bne.n	801029e <__ledf2+0xb6>
 8010250:	433a      	orrs	r2, r7
 8010252:	d124      	bne.n	801029e <__ledf2+0xb6>
 8010254:	4651      	mov	r1, sl
 8010256:	2002      	movs	r0, #2
 8010258:	3901      	subs	r1, #1
 801025a:	4008      	ands	r0, r1
 801025c:	3801      	subs	r0, #1
 801025e:	e017      	b.n	8010290 <__ledf2+0xa8>
 8010260:	4662      	mov	r2, ip
 8010262:	2a00      	cmp	r2, #0
 8010264:	d00f      	beq.n	8010286 <__ledf2+0x9e>
 8010266:	459a      	cmp	sl, r3
 8010268:	d1e1      	bne.n	801022e <__ledf2+0x46>
 801026a:	42a5      	cmp	r5, r4
 801026c:	db05      	blt.n	801027a <__ledf2+0x92>
 801026e:	42be      	cmp	r6, r7
 8010270:	d8dd      	bhi.n	801022e <__ledf2+0x46>
 8010272:	d019      	beq.n	80102a8 <__ledf2+0xc0>
 8010274:	2000      	movs	r0, #0
 8010276:	42be      	cmp	r6, r7
 8010278:	d20a      	bcs.n	8010290 <__ledf2+0xa8>
 801027a:	4650      	mov	r0, sl
 801027c:	2301      	movs	r3, #1
 801027e:	3801      	subs	r0, #1
 8010280:	4398      	bics	r0, r3
 8010282:	3001      	adds	r0, #1
 8010284:	e004      	b.n	8010290 <__ledf2+0xa8>
 8010286:	2201      	movs	r2, #1
 8010288:	3b01      	subs	r3, #1
 801028a:	4393      	bics	r3, r2
 801028c:	0018      	movs	r0, r3
 801028e:	3001      	adds	r0, #1
 8010290:	bc1c      	pop	{r2, r3, r4}
 8010292:	4690      	mov	r8, r2
 8010294:	4699      	mov	r9, r3
 8010296:	46a2      	mov	sl, r4
 8010298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801029a:	433a      	orrs	r2, r7
 801029c:	d1d0      	bne.n	8010240 <__ledf2+0x58>
 801029e:	459a      	cmp	sl, r3
 80102a0:	d1c5      	bne.n	801022e <__ledf2+0x46>
 80102a2:	42a5      	cmp	r5, r4
 80102a4:	dcc3      	bgt.n	801022e <__ledf2+0x46>
 80102a6:	e7e0      	b.n	801026a <__ledf2+0x82>
 80102a8:	45c8      	cmp	r8, r9
 80102aa:	d8c0      	bhi.n	801022e <__ledf2+0x46>
 80102ac:	2000      	movs	r0, #0
 80102ae:	45c8      	cmp	r8, r9
 80102b0:	d3e3      	bcc.n	801027a <__ledf2+0x92>
 80102b2:	e7ed      	b.n	8010290 <__ledf2+0xa8>
 80102b4:	000007ff 	.word	0x000007ff

080102b8 <__aeabi_dmul>:
 80102b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102ba:	4657      	mov	r7, sl
 80102bc:	46de      	mov	lr, fp
 80102be:	464e      	mov	r6, r9
 80102c0:	4645      	mov	r5, r8
 80102c2:	b5e0      	push	{r5, r6, r7, lr}
 80102c4:	4683      	mov	fp, r0
 80102c6:	0006      	movs	r6, r0
 80102c8:	030f      	lsls	r7, r1, #12
 80102ca:	0048      	lsls	r0, r1, #1
 80102cc:	b087      	sub	sp, #28
 80102ce:	4692      	mov	sl, r2
 80102d0:	001d      	movs	r5, r3
 80102d2:	0b3f      	lsrs	r7, r7, #12
 80102d4:	0d40      	lsrs	r0, r0, #21
 80102d6:	0fcc      	lsrs	r4, r1, #31
 80102d8:	2800      	cmp	r0, #0
 80102da:	d100      	bne.n	80102de <__aeabi_dmul+0x26>
 80102dc:	e06f      	b.n	80103be <__aeabi_dmul+0x106>
 80102de:	4bde      	ldr	r3, [pc, #888]	; (8010658 <__aeabi_dmul+0x3a0>)
 80102e0:	4298      	cmp	r0, r3
 80102e2:	d038      	beq.n	8010356 <__aeabi_dmul+0x9e>
 80102e4:	2380      	movs	r3, #128	; 0x80
 80102e6:	00ff      	lsls	r7, r7, #3
 80102e8:	041b      	lsls	r3, r3, #16
 80102ea:	431f      	orrs	r7, r3
 80102ec:	0f73      	lsrs	r3, r6, #29
 80102ee:	433b      	orrs	r3, r7
 80102f0:	9301      	str	r3, [sp, #4]
 80102f2:	4bda      	ldr	r3, [pc, #872]	; (801065c <__aeabi_dmul+0x3a4>)
 80102f4:	2700      	movs	r7, #0
 80102f6:	4699      	mov	r9, r3
 80102f8:	2300      	movs	r3, #0
 80102fa:	469b      	mov	fp, r3
 80102fc:	00f6      	lsls	r6, r6, #3
 80102fe:	4481      	add	r9, r0
 8010300:	032b      	lsls	r3, r5, #12
 8010302:	0069      	lsls	r1, r5, #1
 8010304:	0b1b      	lsrs	r3, r3, #12
 8010306:	4652      	mov	r2, sl
 8010308:	4698      	mov	r8, r3
 801030a:	0d49      	lsrs	r1, r1, #21
 801030c:	0fed      	lsrs	r5, r5, #31
 801030e:	2900      	cmp	r1, #0
 8010310:	d100      	bne.n	8010314 <__aeabi_dmul+0x5c>
 8010312:	e085      	b.n	8010420 <__aeabi_dmul+0x168>
 8010314:	4bd0      	ldr	r3, [pc, #832]	; (8010658 <__aeabi_dmul+0x3a0>)
 8010316:	4299      	cmp	r1, r3
 8010318:	d100      	bne.n	801031c <__aeabi_dmul+0x64>
 801031a:	e073      	b.n	8010404 <__aeabi_dmul+0x14c>
 801031c:	4643      	mov	r3, r8
 801031e:	00da      	lsls	r2, r3, #3
 8010320:	2380      	movs	r3, #128	; 0x80
 8010322:	041b      	lsls	r3, r3, #16
 8010324:	4313      	orrs	r3, r2
 8010326:	4652      	mov	r2, sl
 8010328:	48cc      	ldr	r0, [pc, #816]	; (801065c <__aeabi_dmul+0x3a4>)
 801032a:	0f52      	lsrs	r2, r2, #29
 801032c:	4684      	mov	ip, r0
 801032e:	4313      	orrs	r3, r2
 8010330:	4652      	mov	r2, sl
 8010332:	2000      	movs	r0, #0
 8010334:	4461      	add	r1, ip
 8010336:	00d2      	lsls	r2, r2, #3
 8010338:	4489      	add	r9, r1
 801033a:	0021      	movs	r1, r4
 801033c:	4069      	eors	r1, r5
 801033e:	9100      	str	r1, [sp, #0]
 8010340:	468c      	mov	ip, r1
 8010342:	2101      	movs	r1, #1
 8010344:	4449      	add	r1, r9
 8010346:	468a      	mov	sl, r1
 8010348:	2f0f      	cmp	r7, #15
 801034a:	d900      	bls.n	801034e <__aeabi_dmul+0x96>
 801034c:	e090      	b.n	8010470 <__aeabi_dmul+0x1b8>
 801034e:	49c4      	ldr	r1, [pc, #784]	; (8010660 <__aeabi_dmul+0x3a8>)
 8010350:	00bf      	lsls	r7, r7, #2
 8010352:	59cf      	ldr	r7, [r1, r7]
 8010354:	46bf      	mov	pc, r7
 8010356:	465b      	mov	r3, fp
 8010358:	433b      	orrs	r3, r7
 801035a:	9301      	str	r3, [sp, #4]
 801035c:	d000      	beq.n	8010360 <__aeabi_dmul+0xa8>
 801035e:	e16a      	b.n	8010636 <__aeabi_dmul+0x37e>
 8010360:	2302      	movs	r3, #2
 8010362:	2708      	movs	r7, #8
 8010364:	2600      	movs	r6, #0
 8010366:	4681      	mov	r9, r0
 8010368:	469b      	mov	fp, r3
 801036a:	e7c9      	b.n	8010300 <__aeabi_dmul+0x48>
 801036c:	0032      	movs	r2, r6
 801036e:	4658      	mov	r0, fp
 8010370:	9b01      	ldr	r3, [sp, #4]
 8010372:	4661      	mov	r1, ip
 8010374:	9100      	str	r1, [sp, #0]
 8010376:	2802      	cmp	r0, #2
 8010378:	d100      	bne.n	801037c <__aeabi_dmul+0xc4>
 801037a:	e075      	b.n	8010468 <__aeabi_dmul+0x1b0>
 801037c:	2803      	cmp	r0, #3
 801037e:	d100      	bne.n	8010382 <__aeabi_dmul+0xca>
 8010380:	e1fe      	b.n	8010780 <__aeabi_dmul+0x4c8>
 8010382:	2801      	cmp	r0, #1
 8010384:	d000      	beq.n	8010388 <__aeabi_dmul+0xd0>
 8010386:	e12c      	b.n	80105e2 <__aeabi_dmul+0x32a>
 8010388:	2300      	movs	r3, #0
 801038a:	2700      	movs	r7, #0
 801038c:	2600      	movs	r6, #0
 801038e:	2500      	movs	r5, #0
 8010390:	033f      	lsls	r7, r7, #12
 8010392:	0d2a      	lsrs	r2, r5, #20
 8010394:	0b3f      	lsrs	r7, r7, #12
 8010396:	48b3      	ldr	r0, [pc, #716]	; (8010664 <__aeabi_dmul+0x3ac>)
 8010398:	0512      	lsls	r2, r2, #20
 801039a:	433a      	orrs	r2, r7
 801039c:	4002      	ands	r2, r0
 801039e:	051b      	lsls	r3, r3, #20
 80103a0:	4313      	orrs	r3, r2
 80103a2:	9a00      	ldr	r2, [sp, #0]
 80103a4:	005b      	lsls	r3, r3, #1
 80103a6:	07d1      	lsls	r1, r2, #31
 80103a8:	085b      	lsrs	r3, r3, #1
 80103aa:	430b      	orrs	r3, r1
 80103ac:	0030      	movs	r0, r6
 80103ae:	0019      	movs	r1, r3
 80103b0:	b007      	add	sp, #28
 80103b2:	bc3c      	pop	{r2, r3, r4, r5}
 80103b4:	4690      	mov	r8, r2
 80103b6:	4699      	mov	r9, r3
 80103b8:	46a2      	mov	sl, r4
 80103ba:	46ab      	mov	fp, r5
 80103bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103be:	465b      	mov	r3, fp
 80103c0:	433b      	orrs	r3, r7
 80103c2:	9301      	str	r3, [sp, #4]
 80103c4:	d100      	bne.n	80103c8 <__aeabi_dmul+0x110>
 80103c6:	e12f      	b.n	8010628 <__aeabi_dmul+0x370>
 80103c8:	2f00      	cmp	r7, #0
 80103ca:	d100      	bne.n	80103ce <__aeabi_dmul+0x116>
 80103cc:	e1a5      	b.n	801071a <__aeabi_dmul+0x462>
 80103ce:	0038      	movs	r0, r7
 80103d0:	f7fe fba2 	bl	800eb18 <__clzsi2>
 80103d4:	0003      	movs	r3, r0
 80103d6:	3b0b      	subs	r3, #11
 80103d8:	2b1c      	cmp	r3, #28
 80103da:	dd00      	ble.n	80103de <__aeabi_dmul+0x126>
 80103dc:	e196      	b.n	801070c <__aeabi_dmul+0x454>
 80103de:	221d      	movs	r2, #29
 80103e0:	1ad3      	subs	r3, r2, r3
 80103e2:	465a      	mov	r2, fp
 80103e4:	0001      	movs	r1, r0
 80103e6:	40da      	lsrs	r2, r3
 80103e8:	465e      	mov	r6, fp
 80103ea:	3908      	subs	r1, #8
 80103ec:	408f      	lsls	r7, r1
 80103ee:	0013      	movs	r3, r2
 80103f0:	408e      	lsls	r6, r1
 80103f2:	433b      	orrs	r3, r7
 80103f4:	9301      	str	r3, [sp, #4]
 80103f6:	4b9c      	ldr	r3, [pc, #624]	; (8010668 <__aeabi_dmul+0x3b0>)
 80103f8:	2700      	movs	r7, #0
 80103fa:	1a1b      	subs	r3, r3, r0
 80103fc:	4699      	mov	r9, r3
 80103fe:	2300      	movs	r3, #0
 8010400:	469b      	mov	fp, r3
 8010402:	e77d      	b.n	8010300 <__aeabi_dmul+0x48>
 8010404:	4641      	mov	r1, r8
 8010406:	4653      	mov	r3, sl
 8010408:	430b      	orrs	r3, r1
 801040a:	4993      	ldr	r1, [pc, #588]	; (8010658 <__aeabi_dmul+0x3a0>)
 801040c:	468c      	mov	ip, r1
 801040e:	44e1      	add	r9, ip
 8010410:	2b00      	cmp	r3, #0
 8010412:	d000      	beq.n	8010416 <__aeabi_dmul+0x15e>
 8010414:	e11a      	b.n	801064c <__aeabi_dmul+0x394>
 8010416:	2202      	movs	r2, #2
 8010418:	2002      	movs	r0, #2
 801041a:	4317      	orrs	r7, r2
 801041c:	2200      	movs	r2, #0
 801041e:	e78c      	b.n	801033a <__aeabi_dmul+0x82>
 8010420:	4313      	orrs	r3, r2
 8010422:	d100      	bne.n	8010426 <__aeabi_dmul+0x16e>
 8010424:	e10d      	b.n	8010642 <__aeabi_dmul+0x38a>
 8010426:	4643      	mov	r3, r8
 8010428:	2b00      	cmp	r3, #0
 801042a:	d100      	bne.n	801042e <__aeabi_dmul+0x176>
 801042c:	e181      	b.n	8010732 <__aeabi_dmul+0x47a>
 801042e:	4640      	mov	r0, r8
 8010430:	f7fe fb72 	bl	800eb18 <__clzsi2>
 8010434:	0002      	movs	r2, r0
 8010436:	3a0b      	subs	r2, #11
 8010438:	2a1c      	cmp	r2, #28
 801043a:	dd00      	ble.n	801043e <__aeabi_dmul+0x186>
 801043c:	e172      	b.n	8010724 <__aeabi_dmul+0x46c>
 801043e:	0001      	movs	r1, r0
 8010440:	4643      	mov	r3, r8
 8010442:	3908      	subs	r1, #8
 8010444:	408b      	lsls	r3, r1
 8010446:	4698      	mov	r8, r3
 8010448:	231d      	movs	r3, #29
 801044a:	1a9a      	subs	r2, r3, r2
 801044c:	4653      	mov	r3, sl
 801044e:	40d3      	lsrs	r3, r2
 8010450:	001a      	movs	r2, r3
 8010452:	4643      	mov	r3, r8
 8010454:	4313      	orrs	r3, r2
 8010456:	4652      	mov	r2, sl
 8010458:	408a      	lsls	r2, r1
 801045a:	4649      	mov	r1, r9
 801045c:	1a08      	subs	r0, r1, r0
 801045e:	4982      	ldr	r1, [pc, #520]	; (8010668 <__aeabi_dmul+0x3b0>)
 8010460:	4689      	mov	r9, r1
 8010462:	4481      	add	r9, r0
 8010464:	2000      	movs	r0, #0
 8010466:	e768      	b.n	801033a <__aeabi_dmul+0x82>
 8010468:	4b7b      	ldr	r3, [pc, #492]	; (8010658 <__aeabi_dmul+0x3a0>)
 801046a:	2700      	movs	r7, #0
 801046c:	2600      	movs	r6, #0
 801046e:	e78e      	b.n	801038e <__aeabi_dmul+0xd6>
 8010470:	0c14      	lsrs	r4, r2, #16
 8010472:	0412      	lsls	r2, r2, #16
 8010474:	0c12      	lsrs	r2, r2, #16
 8010476:	0011      	movs	r1, r2
 8010478:	0c37      	lsrs	r7, r6, #16
 801047a:	0436      	lsls	r6, r6, #16
 801047c:	0c35      	lsrs	r5, r6, #16
 801047e:	4379      	muls	r1, r7
 8010480:	0028      	movs	r0, r5
 8010482:	468c      	mov	ip, r1
 8010484:	002e      	movs	r6, r5
 8010486:	4360      	muls	r0, r4
 8010488:	4460      	add	r0, ip
 801048a:	4683      	mov	fp, r0
 801048c:	4356      	muls	r6, r2
 801048e:	0021      	movs	r1, r4
 8010490:	0c30      	lsrs	r0, r6, #16
 8010492:	4680      	mov	r8, r0
 8010494:	4658      	mov	r0, fp
 8010496:	4379      	muls	r1, r7
 8010498:	4440      	add	r0, r8
 801049a:	9102      	str	r1, [sp, #8]
 801049c:	4584      	cmp	ip, r0
 801049e:	d906      	bls.n	80104ae <__aeabi_dmul+0x1f6>
 80104a0:	4688      	mov	r8, r1
 80104a2:	2180      	movs	r1, #128	; 0x80
 80104a4:	0249      	lsls	r1, r1, #9
 80104a6:	468c      	mov	ip, r1
 80104a8:	44e0      	add	r8, ip
 80104aa:	4641      	mov	r1, r8
 80104ac:	9102      	str	r1, [sp, #8]
 80104ae:	0436      	lsls	r6, r6, #16
 80104b0:	0c01      	lsrs	r1, r0, #16
 80104b2:	0c36      	lsrs	r6, r6, #16
 80104b4:	0400      	lsls	r0, r0, #16
 80104b6:	468b      	mov	fp, r1
 80104b8:	1981      	adds	r1, r0, r6
 80104ba:	0c1e      	lsrs	r6, r3, #16
 80104bc:	041b      	lsls	r3, r3, #16
 80104be:	0c1b      	lsrs	r3, r3, #16
 80104c0:	9103      	str	r1, [sp, #12]
 80104c2:	0019      	movs	r1, r3
 80104c4:	4379      	muls	r1, r7
 80104c6:	468c      	mov	ip, r1
 80104c8:	0028      	movs	r0, r5
 80104ca:	4375      	muls	r5, r6
 80104cc:	4465      	add	r5, ip
 80104ce:	46a8      	mov	r8, r5
 80104d0:	4358      	muls	r0, r3
 80104d2:	0c05      	lsrs	r5, r0, #16
 80104d4:	4445      	add	r5, r8
 80104d6:	4377      	muls	r7, r6
 80104d8:	42a9      	cmp	r1, r5
 80104da:	d903      	bls.n	80104e4 <__aeabi_dmul+0x22c>
 80104dc:	2180      	movs	r1, #128	; 0x80
 80104de:	0249      	lsls	r1, r1, #9
 80104e0:	468c      	mov	ip, r1
 80104e2:	4467      	add	r7, ip
 80104e4:	0c29      	lsrs	r1, r5, #16
 80104e6:	468c      	mov	ip, r1
 80104e8:	0039      	movs	r1, r7
 80104ea:	0400      	lsls	r0, r0, #16
 80104ec:	0c00      	lsrs	r0, r0, #16
 80104ee:	042d      	lsls	r5, r5, #16
 80104f0:	182d      	adds	r5, r5, r0
 80104f2:	4461      	add	r1, ip
 80104f4:	44ab      	add	fp, r5
 80104f6:	9105      	str	r1, [sp, #20]
 80104f8:	4659      	mov	r1, fp
 80104fa:	9104      	str	r1, [sp, #16]
 80104fc:	9901      	ldr	r1, [sp, #4]
 80104fe:	040f      	lsls	r7, r1, #16
 8010500:	0c3f      	lsrs	r7, r7, #16
 8010502:	0c08      	lsrs	r0, r1, #16
 8010504:	0039      	movs	r1, r7
 8010506:	4351      	muls	r1, r2
 8010508:	4342      	muls	r2, r0
 801050a:	4690      	mov	r8, r2
 801050c:	0002      	movs	r2, r0
 801050e:	468c      	mov	ip, r1
 8010510:	0c09      	lsrs	r1, r1, #16
 8010512:	468b      	mov	fp, r1
 8010514:	4362      	muls	r2, r4
 8010516:	437c      	muls	r4, r7
 8010518:	4444      	add	r4, r8
 801051a:	445c      	add	r4, fp
 801051c:	45a0      	cmp	r8, r4
 801051e:	d903      	bls.n	8010528 <__aeabi_dmul+0x270>
 8010520:	2180      	movs	r1, #128	; 0x80
 8010522:	0249      	lsls	r1, r1, #9
 8010524:	4688      	mov	r8, r1
 8010526:	4442      	add	r2, r8
 8010528:	0c21      	lsrs	r1, r4, #16
 801052a:	4688      	mov	r8, r1
 801052c:	4661      	mov	r1, ip
 801052e:	0409      	lsls	r1, r1, #16
 8010530:	0c09      	lsrs	r1, r1, #16
 8010532:	468c      	mov	ip, r1
 8010534:	0039      	movs	r1, r7
 8010536:	4359      	muls	r1, r3
 8010538:	4343      	muls	r3, r0
 801053a:	4370      	muls	r0, r6
 801053c:	437e      	muls	r6, r7
 801053e:	0c0f      	lsrs	r7, r1, #16
 8010540:	18f6      	adds	r6, r6, r3
 8010542:	0424      	lsls	r4, r4, #16
 8010544:	19be      	adds	r6, r7, r6
 8010546:	4464      	add	r4, ip
 8010548:	4442      	add	r2, r8
 801054a:	468c      	mov	ip, r1
 801054c:	42b3      	cmp	r3, r6
 801054e:	d903      	bls.n	8010558 <__aeabi_dmul+0x2a0>
 8010550:	2380      	movs	r3, #128	; 0x80
 8010552:	025b      	lsls	r3, r3, #9
 8010554:	4698      	mov	r8, r3
 8010556:	4440      	add	r0, r8
 8010558:	9b02      	ldr	r3, [sp, #8]
 801055a:	4661      	mov	r1, ip
 801055c:	4698      	mov	r8, r3
 801055e:	9b04      	ldr	r3, [sp, #16]
 8010560:	0437      	lsls	r7, r6, #16
 8010562:	4443      	add	r3, r8
 8010564:	469b      	mov	fp, r3
 8010566:	45ab      	cmp	fp, r5
 8010568:	41ad      	sbcs	r5, r5
 801056a:	426b      	negs	r3, r5
 801056c:	040d      	lsls	r5, r1, #16
 801056e:	9905      	ldr	r1, [sp, #20]
 8010570:	0c2d      	lsrs	r5, r5, #16
 8010572:	468c      	mov	ip, r1
 8010574:	197f      	adds	r7, r7, r5
 8010576:	4467      	add	r7, ip
 8010578:	18fd      	adds	r5, r7, r3
 801057a:	46a8      	mov	r8, r5
 801057c:	465d      	mov	r5, fp
 801057e:	192d      	adds	r5, r5, r4
 8010580:	42a5      	cmp	r5, r4
 8010582:	41a4      	sbcs	r4, r4
 8010584:	4693      	mov	fp, r2
 8010586:	4264      	negs	r4, r4
 8010588:	46a4      	mov	ip, r4
 801058a:	44c3      	add	fp, r8
 801058c:	44dc      	add	ip, fp
 801058e:	428f      	cmp	r7, r1
 8010590:	41bf      	sbcs	r7, r7
 8010592:	4598      	cmp	r8, r3
 8010594:	419b      	sbcs	r3, r3
 8010596:	4593      	cmp	fp, r2
 8010598:	4192      	sbcs	r2, r2
 801059a:	45a4      	cmp	ip, r4
 801059c:	41a4      	sbcs	r4, r4
 801059e:	425b      	negs	r3, r3
 80105a0:	427f      	negs	r7, r7
 80105a2:	431f      	orrs	r7, r3
 80105a4:	0c36      	lsrs	r6, r6, #16
 80105a6:	4252      	negs	r2, r2
 80105a8:	4264      	negs	r4, r4
 80105aa:	19bf      	adds	r7, r7, r6
 80105ac:	4322      	orrs	r2, r4
 80105ae:	18bf      	adds	r7, r7, r2
 80105b0:	4662      	mov	r2, ip
 80105b2:	1838      	adds	r0, r7, r0
 80105b4:	0243      	lsls	r3, r0, #9
 80105b6:	0dd2      	lsrs	r2, r2, #23
 80105b8:	9903      	ldr	r1, [sp, #12]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	026a      	lsls	r2, r5, #9
 80105be:	430a      	orrs	r2, r1
 80105c0:	1e50      	subs	r0, r2, #1
 80105c2:	4182      	sbcs	r2, r0
 80105c4:	4661      	mov	r1, ip
 80105c6:	0ded      	lsrs	r5, r5, #23
 80105c8:	432a      	orrs	r2, r5
 80105ca:	024e      	lsls	r6, r1, #9
 80105cc:	4332      	orrs	r2, r6
 80105ce:	01d9      	lsls	r1, r3, #7
 80105d0:	d400      	bmi.n	80105d4 <__aeabi_dmul+0x31c>
 80105d2:	e0b3      	b.n	801073c <__aeabi_dmul+0x484>
 80105d4:	2601      	movs	r6, #1
 80105d6:	0850      	lsrs	r0, r2, #1
 80105d8:	4032      	ands	r2, r6
 80105da:	4302      	orrs	r2, r0
 80105dc:	07de      	lsls	r6, r3, #31
 80105de:	4332      	orrs	r2, r6
 80105e0:	085b      	lsrs	r3, r3, #1
 80105e2:	4c22      	ldr	r4, [pc, #136]	; (801066c <__aeabi_dmul+0x3b4>)
 80105e4:	4454      	add	r4, sl
 80105e6:	2c00      	cmp	r4, #0
 80105e8:	dd62      	ble.n	80106b0 <__aeabi_dmul+0x3f8>
 80105ea:	0751      	lsls	r1, r2, #29
 80105ec:	d009      	beq.n	8010602 <__aeabi_dmul+0x34a>
 80105ee:	200f      	movs	r0, #15
 80105f0:	4010      	ands	r0, r2
 80105f2:	2804      	cmp	r0, #4
 80105f4:	d005      	beq.n	8010602 <__aeabi_dmul+0x34a>
 80105f6:	1d10      	adds	r0, r2, #4
 80105f8:	4290      	cmp	r0, r2
 80105fa:	4192      	sbcs	r2, r2
 80105fc:	4252      	negs	r2, r2
 80105fe:	189b      	adds	r3, r3, r2
 8010600:	0002      	movs	r2, r0
 8010602:	01d9      	lsls	r1, r3, #7
 8010604:	d504      	bpl.n	8010610 <__aeabi_dmul+0x358>
 8010606:	2480      	movs	r4, #128	; 0x80
 8010608:	4819      	ldr	r0, [pc, #100]	; (8010670 <__aeabi_dmul+0x3b8>)
 801060a:	00e4      	lsls	r4, r4, #3
 801060c:	4003      	ands	r3, r0
 801060e:	4454      	add	r4, sl
 8010610:	4818      	ldr	r0, [pc, #96]	; (8010674 <__aeabi_dmul+0x3bc>)
 8010612:	4284      	cmp	r4, r0
 8010614:	dd00      	ble.n	8010618 <__aeabi_dmul+0x360>
 8010616:	e727      	b.n	8010468 <__aeabi_dmul+0x1b0>
 8010618:	075e      	lsls	r6, r3, #29
 801061a:	025b      	lsls	r3, r3, #9
 801061c:	08d2      	lsrs	r2, r2, #3
 801061e:	0b1f      	lsrs	r7, r3, #12
 8010620:	0563      	lsls	r3, r4, #21
 8010622:	4316      	orrs	r6, r2
 8010624:	0d5b      	lsrs	r3, r3, #21
 8010626:	e6b2      	b.n	801038e <__aeabi_dmul+0xd6>
 8010628:	2300      	movs	r3, #0
 801062a:	4699      	mov	r9, r3
 801062c:	3301      	adds	r3, #1
 801062e:	2704      	movs	r7, #4
 8010630:	2600      	movs	r6, #0
 8010632:	469b      	mov	fp, r3
 8010634:	e664      	b.n	8010300 <__aeabi_dmul+0x48>
 8010636:	2303      	movs	r3, #3
 8010638:	9701      	str	r7, [sp, #4]
 801063a:	4681      	mov	r9, r0
 801063c:	270c      	movs	r7, #12
 801063e:	469b      	mov	fp, r3
 8010640:	e65e      	b.n	8010300 <__aeabi_dmul+0x48>
 8010642:	2201      	movs	r2, #1
 8010644:	2001      	movs	r0, #1
 8010646:	4317      	orrs	r7, r2
 8010648:	2200      	movs	r2, #0
 801064a:	e676      	b.n	801033a <__aeabi_dmul+0x82>
 801064c:	2303      	movs	r3, #3
 801064e:	2003      	movs	r0, #3
 8010650:	431f      	orrs	r7, r3
 8010652:	4643      	mov	r3, r8
 8010654:	e671      	b.n	801033a <__aeabi_dmul+0x82>
 8010656:	46c0      	nop			; (mov r8, r8)
 8010658:	000007ff 	.word	0x000007ff
 801065c:	fffffc01 	.word	0xfffffc01
 8010660:	0801ba68 	.word	0x0801ba68
 8010664:	800fffff 	.word	0x800fffff
 8010668:	fffffc0d 	.word	0xfffffc0d
 801066c:	000003ff 	.word	0x000003ff
 8010670:	feffffff 	.word	0xfeffffff
 8010674:	000007fe 	.word	0x000007fe
 8010678:	2300      	movs	r3, #0
 801067a:	2780      	movs	r7, #128	; 0x80
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	033f      	lsls	r7, r7, #12
 8010680:	2600      	movs	r6, #0
 8010682:	4b43      	ldr	r3, [pc, #268]	; (8010790 <__aeabi_dmul+0x4d8>)
 8010684:	e683      	b.n	801038e <__aeabi_dmul+0xd6>
 8010686:	9b01      	ldr	r3, [sp, #4]
 8010688:	0032      	movs	r2, r6
 801068a:	46a4      	mov	ip, r4
 801068c:	4658      	mov	r0, fp
 801068e:	e670      	b.n	8010372 <__aeabi_dmul+0xba>
 8010690:	46ac      	mov	ip, r5
 8010692:	e66e      	b.n	8010372 <__aeabi_dmul+0xba>
 8010694:	2780      	movs	r7, #128	; 0x80
 8010696:	9901      	ldr	r1, [sp, #4]
 8010698:	033f      	lsls	r7, r7, #12
 801069a:	4239      	tst	r1, r7
 801069c:	d02d      	beq.n	80106fa <__aeabi_dmul+0x442>
 801069e:	423b      	tst	r3, r7
 80106a0:	d12b      	bne.n	80106fa <__aeabi_dmul+0x442>
 80106a2:	431f      	orrs	r7, r3
 80106a4:	033f      	lsls	r7, r7, #12
 80106a6:	0b3f      	lsrs	r7, r7, #12
 80106a8:	9500      	str	r5, [sp, #0]
 80106aa:	0016      	movs	r6, r2
 80106ac:	4b38      	ldr	r3, [pc, #224]	; (8010790 <__aeabi_dmul+0x4d8>)
 80106ae:	e66e      	b.n	801038e <__aeabi_dmul+0xd6>
 80106b0:	2501      	movs	r5, #1
 80106b2:	1b2d      	subs	r5, r5, r4
 80106b4:	2d38      	cmp	r5, #56	; 0x38
 80106b6:	dd00      	ble.n	80106ba <__aeabi_dmul+0x402>
 80106b8:	e666      	b.n	8010388 <__aeabi_dmul+0xd0>
 80106ba:	2d1f      	cmp	r5, #31
 80106bc:	dc40      	bgt.n	8010740 <__aeabi_dmul+0x488>
 80106be:	4835      	ldr	r0, [pc, #212]	; (8010794 <__aeabi_dmul+0x4dc>)
 80106c0:	001c      	movs	r4, r3
 80106c2:	4450      	add	r0, sl
 80106c4:	0016      	movs	r6, r2
 80106c6:	4082      	lsls	r2, r0
 80106c8:	4084      	lsls	r4, r0
 80106ca:	40ee      	lsrs	r6, r5
 80106cc:	1e50      	subs	r0, r2, #1
 80106ce:	4182      	sbcs	r2, r0
 80106d0:	4334      	orrs	r4, r6
 80106d2:	4314      	orrs	r4, r2
 80106d4:	40eb      	lsrs	r3, r5
 80106d6:	0762      	lsls	r2, r4, #29
 80106d8:	d009      	beq.n	80106ee <__aeabi_dmul+0x436>
 80106da:	220f      	movs	r2, #15
 80106dc:	4022      	ands	r2, r4
 80106de:	2a04      	cmp	r2, #4
 80106e0:	d005      	beq.n	80106ee <__aeabi_dmul+0x436>
 80106e2:	0022      	movs	r2, r4
 80106e4:	1d14      	adds	r4, r2, #4
 80106e6:	4294      	cmp	r4, r2
 80106e8:	4180      	sbcs	r0, r0
 80106ea:	4240      	negs	r0, r0
 80106ec:	181b      	adds	r3, r3, r0
 80106ee:	021a      	lsls	r2, r3, #8
 80106f0:	d53e      	bpl.n	8010770 <__aeabi_dmul+0x4b8>
 80106f2:	2301      	movs	r3, #1
 80106f4:	2700      	movs	r7, #0
 80106f6:	2600      	movs	r6, #0
 80106f8:	e649      	b.n	801038e <__aeabi_dmul+0xd6>
 80106fa:	2780      	movs	r7, #128	; 0x80
 80106fc:	9b01      	ldr	r3, [sp, #4]
 80106fe:	033f      	lsls	r7, r7, #12
 8010700:	431f      	orrs	r7, r3
 8010702:	033f      	lsls	r7, r7, #12
 8010704:	0b3f      	lsrs	r7, r7, #12
 8010706:	9400      	str	r4, [sp, #0]
 8010708:	4b21      	ldr	r3, [pc, #132]	; (8010790 <__aeabi_dmul+0x4d8>)
 801070a:	e640      	b.n	801038e <__aeabi_dmul+0xd6>
 801070c:	0003      	movs	r3, r0
 801070e:	465a      	mov	r2, fp
 8010710:	3b28      	subs	r3, #40	; 0x28
 8010712:	409a      	lsls	r2, r3
 8010714:	2600      	movs	r6, #0
 8010716:	9201      	str	r2, [sp, #4]
 8010718:	e66d      	b.n	80103f6 <__aeabi_dmul+0x13e>
 801071a:	4658      	mov	r0, fp
 801071c:	f7fe f9fc 	bl	800eb18 <__clzsi2>
 8010720:	3020      	adds	r0, #32
 8010722:	e657      	b.n	80103d4 <__aeabi_dmul+0x11c>
 8010724:	0003      	movs	r3, r0
 8010726:	4652      	mov	r2, sl
 8010728:	3b28      	subs	r3, #40	; 0x28
 801072a:	409a      	lsls	r2, r3
 801072c:	0013      	movs	r3, r2
 801072e:	2200      	movs	r2, #0
 8010730:	e693      	b.n	801045a <__aeabi_dmul+0x1a2>
 8010732:	4650      	mov	r0, sl
 8010734:	f7fe f9f0 	bl	800eb18 <__clzsi2>
 8010738:	3020      	adds	r0, #32
 801073a:	e67b      	b.n	8010434 <__aeabi_dmul+0x17c>
 801073c:	46ca      	mov	sl, r9
 801073e:	e750      	b.n	80105e2 <__aeabi_dmul+0x32a>
 8010740:	201f      	movs	r0, #31
 8010742:	001e      	movs	r6, r3
 8010744:	4240      	negs	r0, r0
 8010746:	1b04      	subs	r4, r0, r4
 8010748:	40e6      	lsrs	r6, r4
 801074a:	2d20      	cmp	r5, #32
 801074c:	d003      	beq.n	8010756 <__aeabi_dmul+0x49e>
 801074e:	4c12      	ldr	r4, [pc, #72]	; (8010798 <__aeabi_dmul+0x4e0>)
 8010750:	4454      	add	r4, sl
 8010752:	40a3      	lsls	r3, r4
 8010754:	431a      	orrs	r2, r3
 8010756:	1e50      	subs	r0, r2, #1
 8010758:	4182      	sbcs	r2, r0
 801075a:	4332      	orrs	r2, r6
 801075c:	2607      	movs	r6, #7
 801075e:	2700      	movs	r7, #0
 8010760:	4016      	ands	r6, r2
 8010762:	d009      	beq.n	8010778 <__aeabi_dmul+0x4c0>
 8010764:	200f      	movs	r0, #15
 8010766:	2300      	movs	r3, #0
 8010768:	4010      	ands	r0, r2
 801076a:	0014      	movs	r4, r2
 801076c:	2804      	cmp	r0, #4
 801076e:	d1b9      	bne.n	80106e4 <__aeabi_dmul+0x42c>
 8010770:	0022      	movs	r2, r4
 8010772:	075e      	lsls	r6, r3, #29
 8010774:	025b      	lsls	r3, r3, #9
 8010776:	0b1f      	lsrs	r7, r3, #12
 8010778:	08d2      	lsrs	r2, r2, #3
 801077a:	4316      	orrs	r6, r2
 801077c:	2300      	movs	r3, #0
 801077e:	e606      	b.n	801038e <__aeabi_dmul+0xd6>
 8010780:	2780      	movs	r7, #128	; 0x80
 8010782:	033f      	lsls	r7, r7, #12
 8010784:	431f      	orrs	r7, r3
 8010786:	033f      	lsls	r7, r7, #12
 8010788:	0b3f      	lsrs	r7, r7, #12
 801078a:	0016      	movs	r6, r2
 801078c:	4b00      	ldr	r3, [pc, #0]	; (8010790 <__aeabi_dmul+0x4d8>)
 801078e:	e5fe      	b.n	801038e <__aeabi_dmul+0xd6>
 8010790:	000007ff 	.word	0x000007ff
 8010794:	0000041e 	.word	0x0000041e
 8010798:	0000043e 	.word	0x0000043e

0801079c <__aeabi_dsub>:
 801079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801079e:	4657      	mov	r7, sl
 80107a0:	464e      	mov	r6, r9
 80107a2:	4645      	mov	r5, r8
 80107a4:	46de      	mov	lr, fp
 80107a6:	000c      	movs	r4, r1
 80107a8:	0309      	lsls	r1, r1, #12
 80107aa:	b5e0      	push	{r5, r6, r7, lr}
 80107ac:	0a49      	lsrs	r1, r1, #9
 80107ae:	0f46      	lsrs	r6, r0, #29
 80107b0:	005f      	lsls	r7, r3, #1
 80107b2:	4331      	orrs	r1, r6
 80107b4:	031e      	lsls	r6, r3, #12
 80107b6:	0fdb      	lsrs	r3, r3, #31
 80107b8:	0a76      	lsrs	r6, r6, #9
 80107ba:	469b      	mov	fp, r3
 80107bc:	0f53      	lsrs	r3, r2, #29
 80107be:	4333      	orrs	r3, r6
 80107c0:	4ec8      	ldr	r6, [pc, #800]	; (8010ae4 <__aeabi_dsub+0x348>)
 80107c2:	0065      	lsls	r5, r4, #1
 80107c4:	00c0      	lsls	r0, r0, #3
 80107c6:	0fe4      	lsrs	r4, r4, #31
 80107c8:	00d2      	lsls	r2, r2, #3
 80107ca:	0d6d      	lsrs	r5, r5, #21
 80107cc:	46a2      	mov	sl, r4
 80107ce:	4681      	mov	r9, r0
 80107d0:	0d7f      	lsrs	r7, r7, #21
 80107d2:	469c      	mov	ip, r3
 80107d4:	4690      	mov	r8, r2
 80107d6:	42b7      	cmp	r7, r6
 80107d8:	d100      	bne.n	80107dc <__aeabi_dsub+0x40>
 80107da:	e0b9      	b.n	8010950 <__aeabi_dsub+0x1b4>
 80107dc:	465b      	mov	r3, fp
 80107de:	2601      	movs	r6, #1
 80107e0:	4073      	eors	r3, r6
 80107e2:	469b      	mov	fp, r3
 80107e4:	1bee      	subs	r6, r5, r7
 80107e6:	45a3      	cmp	fp, r4
 80107e8:	d100      	bne.n	80107ec <__aeabi_dsub+0x50>
 80107ea:	e083      	b.n	80108f4 <__aeabi_dsub+0x158>
 80107ec:	2e00      	cmp	r6, #0
 80107ee:	dd63      	ble.n	80108b8 <__aeabi_dsub+0x11c>
 80107f0:	2f00      	cmp	r7, #0
 80107f2:	d000      	beq.n	80107f6 <__aeabi_dsub+0x5a>
 80107f4:	e0b1      	b.n	801095a <__aeabi_dsub+0x1be>
 80107f6:	4663      	mov	r3, ip
 80107f8:	4313      	orrs	r3, r2
 80107fa:	d100      	bne.n	80107fe <__aeabi_dsub+0x62>
 80107fc:	e123      	b.n	8010a46 <__aeabi_dsub+0x2aa>
 80107fe:	1e73      	subs	r3, r6, #1
 8010800:	2b00      	cmp	r3, #0
 8010802:	d000      	beq.n	8010806 <__aeabi_dsub+0x6a>
 8010804:	e1ba      	b.n	8010b7c <__aeabi_dsub+0x3e0>
 8010806:	1a86      	subs	r6, r0, r2
 8010808:	4663      	mov	r3, ip
 801080a:	42b0      	cmp	r0, r6
 801080c:	4180      	sbcs	r0, r0
 801080e:	2501      	movs	r5, #1
 8010810:	1ac9      	subs	r1, r1, r3
 8010812:	4240      	negs	r0, r0
 8010814:	1a09      	subs	r1, r1, r0
 8010816:	020b      	lsls	r3, r1, #8
 8010818:	d400      	bmi.n	801081c <__aeabi_dsub+0x80>
 801081a:	e147      	b.n	8010aac <__aeabi_dsub+0x310>
 801081c:	0249      	lsls	r1, r1, #9
 801081e:	0a4b      	lsrs	r3, r1, #9
 8010820:	4698      	mov	r8, r3
 8010822:	4643      	mov	r3, r8
 8010824:	2b00      	cmp	r3, #0
 8010826:	d100      	bne.n	801082a <__aeabi_dsub+0x8e>
 8010828:	e189      	b.n	8010b3e <__aeabi_dsub+0x3a2>
 801082a:	4640      	mov	r0, r8
 801082c:	f7fe f974 	bl	800eb18 <__clzsi2>
 8010830:	0003      	movs	r3, r0
 8010832:	3b08      	subs	r3, #8
 8010834:	2b1f      	cmp	r3, #31
 8010836:	dd00      	ble.n	801083a <__aeabi_dsub+0x9e>
 8010838:	e17c      	b.n	8010b34 <__aeabi_dsub+0x398>
 801083a:	2220      	movs	r2, #32
 801083c:	0030      	movs	r0, r6
 801083e:	1ad2      	subs	r2, r2, r3
 8010840:	4641      	mov	r1, r8
 8010842:	40d0      	lsrs	r0, r2
 8010844:	4099      	lsls	r1, r3
 8010846:	0002      	movs	r2, r0
 8010848:	409e      	lsls	r6, r3
 801084a:	430a      	orrs	r2, r1
 801084c:	429d      	cmp	r5, r3
 801084e:	dd00      	ble.n	8010852 <__aeabi_dsub+0xb6>
 8010850:	e16a      	b.n	8010b28 <__aeabi_dsub+0x38c>
 8010852:	1b5d      	subs	r5, r3, r5
 8010854:	1c6b      	adds	r3, r5, #1
 8010856:	2b1f      	cmp	r3, #31
 8010858:	dd00      	ble.n	801085c <__aeabi_dsub+0xc0>
 801085a:	e194      	b.n	8010b86 <__aeabi_dsub+0x3ea>
 801085c:	2120      	movs	r1, #32
 801085e:	0010      	movs	r0, r2
 8010860:	0035      	movs	r5, r6
 8010862:	1ac9      	subs	r1, r1, r3
 8010864:	408e      	lsls	r6, r1
 8010866:	40da      	lsrs	r2, r3
 8010868:	4088      	lsls	r0, r1
 801086a:	40dd      	lsrs	r5, r3
 801086c:	1e71      	subs	r1, r6, #1
 801086e:	418e      	sbcs	r6, r1
 8010870:	0011      	movs	r1, r2
 8010872:	2207      	movs	r2, #7
 8010874:	4328      	orrs	r0, r5
 8010876:	2500      	movs	r5, #0
 8010878:	4306      	orrs	r6, r0
 801087a:	4032      	ands	r2, r6
 801087c:	2a00      	cmp	r2, #0
 801087e:	d009      	beq.n	8010894 <__aeabi_dsub+0xf8>
 8010880:	230f      	movs	r3, #15
 8010882:	4033      	ands	r3, r6
 8010884:	2b04      	cmp	r3, #4
 8010886:	d005      	beq.n	8010894 <__aeabi_dsub+0xf8>
 8010888:	1d33      	adds	r3, r6, #4
 801088a:	42b3      	cmp	r3, r6
 801088c:	41b6      	sbcs	r6, r6
 801088e:	4276      	negs	r6, r6
 8010890:	1989      	adds	r1, r1, r6
 8010892:	001e      	movs	r6, r3
 8010894:	020b      	lsls	r3, r1, #8
 8010896:	d400      	bmi.n	801089a <__aeabi_dsub+0xfe>
 8010898:	e23d      	b.n	8010d16 <__aeabi_dsub+0x57a>
 801089a:	1c6a      	adds	r2, r5, #1
 801089c:	4b91      	ldr	r3, [pc, #580]	; (8010ae4 <__aeabi_dsub+0x348>)
 801089e:	0555      	lsls	r5, r2, #21
 80108a0:	0d6d      	lsrs	r5, r5, #21
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d100      	bne.n	80108a8 <__aeabi_dsub+0x10c>
 80108a6:	e119      	b.n	8010adc <__aeabi_dsub+0x340>
 80108a8:	4a8f      	ldr	r2, [pc, #572]	; (8010ae8 <__aeabi_dsub+0x34c>)
 80108aa:	08f6      	lsrs	r6, r6, #3
 80108ac:	400a      	ands	r2, r1
 80108ae:	0757      	lsls	r7, r2, #29
 80108b0:	0252      	lsls	r2, r2, #9
 80108b2:	4337      	orrs	r7, r6
 80108b4:	0b12      	lsrs	r2, r2, #12
 80108b6:	e09b      	b.n	80109f0 <__aeabi_dsub+0x254>
 80108b8:	2e00      	cmp	r6, #0
 80108ba:	d000      	beq.n	80108be <__aeabi_dsub+0x122>
 80108bc:	e0c5      	b.n	8010a4a <__aeabi_dsub+0x2ae>
 80108be:	1c6e      	adds	r6, r5, #1
 80108c0:	0576      	lsls	r6, r6, #21
 80108c2:	0d76      	lsrs	r6, r6, #21
 80108c4:	2e01      	cmp	r6, #1
 80108c6:	dc00      	bgt.n	80108ca <__aeabi_dsub+0x12e>
 80108c8:	e148      	b.n	8010b5c <__aeabi_dsub+0x3c0>
 80108ca:	4667      	mov	r7, ip
 80108cc:	1a86      	subs	r6, r0, r2
 80108ce:	1bcb      	subs	r3, r1, r7
 80108d0:	42b0      	cmp	r0, r6
 80108d2:	41bf      	sbcs	r7, r7
 80108d4:	427f      	negs	r7, r7
 80108d6:	46b8      	mov	r8, r7
 80108d8:	001f      	movs	r7, r3
 80108da:	4643      	mov	r3, r8
 80108dc:	1aff      	subs	r7, r7, r3
 80108de:	003b      	movs	r3, r7
 80108e0:	46b8      	mov	r8, r7
 80108e2:	021b      	lsls	r3, r3, #8
 80108e4:	d500      	bpl.n	80108e8 <__aeabi_dsub+0x14c>
 80108e6:	e15f      	b.n	8010ba8 <__aeabi_dsub+0x40c>
 80108e8:	4337      	orrs	r7, r6
 80108ea:	d19a      	bne.n	8010822 <__aeabi_dsub+0x86>
 80108ec:	2200      	movs	r2, #0
 80108ee:	2400      	movs	r4, #0
 80108f0:	2500      	movs	r5, #0
 80108f2:	e079      	b.n	80109e8 <__aeabi_dsub+0x24c>
 80108f4:	2e00      	cmp	r6, #0
 80108f6:	dc00      	bgt.n	80108fa <__aeabi_dsub+0x15e>
 80108f8:	e0fa      	b.n	8010af0 <__aeabi_dsub+0x354>
 80108fa:	2f00      	cmp	r7, #0
 80108fc:	d100      	bne.n	8010900 <__aeabi_dsub+0x164>
 80108fe:	e08d      	b.n	8010a1c <__aeabi_dsub+0x280>
 8010900:	4b78      	ldr	r3, [pc, #480]	; (8010ae4 <__aeabi_dsub+0x348>)
 8010902:	429d      	cmp	r5, r3
 8010904:	d067      	beq.n	80109d6 <__aeabi_dsub+0x23a>
 8010906:	2380      	movs	r3, #128	; 0x80
 8010908:	4667      	mov	r7, ip
 801090a:	041b      	lsls	r3, r3, #16
 801090c:	431f      	orrs	r7, r3
 801090e:	46bc      	mov	ip, r7
 8010910:	2e38      	cmp	r6, #56	; 0x38
 8010912:	dc00      	bgt.n	8010916 <__aeabi_dsub+0x17a>
 8010914:	e152      	b.n	8010bbc <__aeabi_dsub+0x420>
 8010916:	4663      	mov	r3, ip
 8010918:	4313      	orrs	r3, r2
 801091a:	1e5a      	subs	r2, r3, #1
 801091c:	4193      	sbcs	r3, r2
 801091e:	181e      	adds	r6, r3, r0
 8010920:	4286      	cmp	r6, r0
 8010922:	4180      	sbcs	r0, r0
 8010924:	4240      	negs	r0, r0
 8010926:	1809      	adds	r1, r1, r0
 8010928:	020b      	lsls	r3, r1, #8
 801092a:	d400      	bmi.n	801092e <__aeabi_dsub+0x192>
 801092c:	e0be      	b.n	8010aac <__aeabi_dsub+0x310>
 801092e:	4b6d      	ldr	r3, [pc, #436]	; (8010ae4 <__aeabi_dsub+0x348>)
 8010930:	3501      	adds	r5, #1
 8010932:	429d      	cmp	r5, r3
 8010934:	d100      	bne.n	8010938 <__aeabi_dsub+0x19c>
 8010936:	e0d2      	b.n	8010ade <__aeabi_dsub+0x342>
 8010938:	4a6b      	ldr	r2, [pc, #428]	; (8010ae8 <__aeabi_dsub+0x34c>)
 801093a:	0873      	lsrs	r3, r6, #1
 801093c:	400a      	ands	r2, r1
 801093e:	2101      	movs	r1, #1
 8010940:	400e      	ands	r6, r1
 8010942:	431e      	orrs	r6, r3
 8010944:	0851      	lsrs	r1, r2, #1
 8010946:	07d3      	lsls	r3, r2, #31
 8010948:	2207      	movs	r2, #7
 801094a:	431e      	orrs	r6, r3
 801094c:	4032      	ands	r2, r6
 801094e:	e795      	b.n	801087c <__aeabi_dsub+0xe0>
 8010950:	001e      	movs	r6, r3
 8010952:	4316      	orrs	r6, r2
 8010954:	d000      	beq.n	8010958 <__aeabi_dsub+0x1bc>
 8010956:	e745      	b.n	80107e4 <__aeabi_dsub+0x48>
 8010958:	e740      	b.n	80107dc <__aeabi_dsub+0x40>
 801095a:	4b62      	ldr	r3, [pc, #392]	; (8010ae4 <__aeabi_dsub+0x348>)
 801095c:	429d      	cmp	r5, r3
 801095e:	d03a      	beq.n	80109d6 <__aeabi_dsub+0x23a>
 8010960:	2380      	movs	r3, #128	; 0x80
 8010962:	4667      	mov	r7, ip
 8010964:	041b      	lsls	r3, r3, #16
 8010966:	431f      	orrs	r7, r3
 8010968:	46bc      	mov	ip, r7
 801096a:	2e38      	cmp	r6, #56	; 0x38
 801096c:	dd00      	ble.n	8010970 <__aeabi_dsub+0x1d4>
 801096e:	e0eb      	b.n	8010b48 <__aeabi_dsub+0x3ac>
 8010970:	2e1f      	cmp	r6, #31
 8010972:	dc00      	bgt.n	8010976 <__aeabi_dsub+0x1da>
 8010974:	e13a      	b.n	8010bec <__aeabi_dsub+0x450>
 8010976:	0033      	movs	r3, r6
 8010978:	4667      	mov	r7, ip
 801097a:	3b20      	subs	r3, #32
 801097c:	40df      	lsrs	r7, r3
 801097e:	003b      	movs	r3, r7
 8010980:	2e20      	cmp	r6, #32
 8010982:	d005      	beq.n	8010990 <__aeabi_dsub+0x1f4>
 8010984:	2740      	movs	r7, #64	; 0x40
 8010986:	1bbf      	subs	r7, r7, r6
 8010988:	4666      	mov	r6, ip
 801098a:	40be      	lsls	r6, r7
 801098c:	4332      	orrs	r2, r6
 801098e:	4690      	mov	r8, r2
 8010990:	4646      	mov	r6, r8
 8010992:	1e72      	subs	r2, r6, #1
 8010994:	4196      	sbcs	r6, r2
 8010996:	4333      	orrs	r3, r6
 8010998:	e0da      	b.n	8010b50 <__aeabi_dsub+0x3b4>
 801099a:	2b00      	cmp	r3, #0
 801099c:	d100      	bne.n	80109a0 <__aeabi_dsub+0x204>
 801099e:	e214      	b.n	8010dca <__aeabi_dsub+0x62e>
 80109a0:	4663      	mov	r3, ip
 80109a2:	4313      	orrs	r3, r2
 80109a4:	d100      	bne.n	80109a8 <__aeabi_dsub+0x20c>
 80109a6:	e168      	b.n	8010c7a <__aeabi_dsub+0x4de>
 80109a8:	2380      	movs	r3, #128	; 0x80
 80109aa:	074e      	lsls	r6, r1, #29
 80109ac:	08c0      	lsrs	r0, r0, #3
 80109ae:	08c9      	lsrs	r1, r1, #3
 80109b0:	031b      	lsls	r3, r3, #12
 80109b2:	4306      	orrs	r6, r0
 80109b4:	4219      	tst	r1, r3
 80109b6:	d008      	beq.n	80109ca <__aeabi_dsub+0x22e>
 80109b8:	4660      	mov	r0, ip
 80109ba:	08c0      	lsrs	r0, r0, #3
 80109bc:	4218      	tst	r0, r3
 80109be:	d104      	bne.n	80109ca <__aeabi_dsub+0x22e>
 80109c0:	4663      	mov	r3, ip
 80109c2:	0001      	movs	r1, r0
 80109c4:	08d2      	lsrs	r2, r2, #3
 80109c6:	075e      	lsls	r6, r3, #29
 80109c8:	4316      	orrs	r6, r2
 80109ca:	00f3      	lsls	r3, r6, #3
 80109cc:	4699      	mov	r9, r3
 80109ce:	00c9      	lsls	r1, r1, #3
 80109d0:	0f72      	lsrs	r2, r6, #29
 80109d2:	4d44      	ldr	r5, [pc, #272]	; (8010ae4 <__aeabi_dsub+0x348>)
 80109d4:	4311      	orrs	r1, r2
 80109d6:	464b      	mov	r3, r9
 80109d8:	08de      	lsrs	r6, r3, #3
 80109da:	4b42      	ldr	r3, [pc, #264]	; (8010ae4 <__aeabi_dsub+0x348>)
 80109dc:	074f      	lsls	r7, r1, #29
 80109de:	4337      	orrs	r7, r6
 80109e0:	08ca      	lsrs	r2, r1, #3
 80109e2:	429d      	cmp	r5, r3
 80109e4:	d100      	bne.n	80109e8 <__aeabi_dsub+0x24c>
 80109e6:	e06e      	b.n	8010ac6 <__aeabi_dsub+0x32a>
 80109e8:	0312      	lsls	r2, r2, #12
 80109ea:	056d      	lsls	r5, r5, #21
 80109ec:	0b12      	lsrs	r2, r2, #12
 80109ee:	0d6d      	lsrs	r5, r5, #21
 80109f0:	2100      	movs	r1, #0
 80109f2:	0312      	lsls	r2, r2, #12
 80109f4:	0b13      	lsrs	r3, r2, #12
 80109f6:	0d0a      	lsrs	r2, r1, #20
 80109f8:	0512      	lsls	r2, r2, #20
 80109fa:	431a      	orrs	r2, r3
 80109fc:	4b3b      	ldr	r3, [pc, #236]	; (8010aec <__aeabi_dsub+0x350>)
 80109fe:	052d      	lsls	r5, r5, #20
 8010a00:	4013      	ands	r3, r2
 8010a02:	432b      	orrs	r3, r5
 8010a04:	005b      	lsls	r3, r3, #1
 8010a06:	07e4      	lsls	r4, r4, #31
 8010a08:	085b      	lsrs	r3, r3, #1
 8010a0a:	4323      	orrs	r3, r4
 8010a0c:	0038      	movs	r0, r7
 8010a0e:	0019      	movs	r1, r3
 8010a10:	bc3c      	pop	{r2, r3, r4, r5}
 8010a12:	4690      	mov	r8, r2
 8010a14:	4699      	mov	r9, r3
 8010a16:	46a2      	mov	sl, r4
 8010a18:	46ab      	mov	fp, r5
 8010a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a1c:	4663      	mov	r3, ip
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	d011      	beq.n	8010a46 <__aeabi_dsub+0x2aa>
 8010a22:	1e73      	subs	r3, r6, #1
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d000      	beq.n	8010a2a <__aeabi_dsub+0x28e>
 8010a28:	e107      	b.n	8010c3a <__aeabi_dsub+0x49e>
 8010a2a:	1886      	adds	r6, r0, r2
 8010a2c:	4286      	cmp	r6, r0
 8010a2e:	4180      	sbcs	r0, r0
 8010a30:	4461      	add	r1, ip
 8010a32:	4240      	negs	r0, r0
 8010a34:	1809      	adds	r1, r1, r0
 8010a36:	2501      	movs	r5, #1
 8010a38:	020b      	lsls	r3, r1, #8
 8010a3a:	d537      	bpl.n	8010aac <__aeabi_dsub+0x310>
 8010a3c:	2502      	movs	r5, #2
 8010a3e:	e77b      	b.n	8010938 <__aeabi_dsub+0x19c>
 8010a40:	003e      	movs	r6, r7
 8010a42:	4661      	mov	r1, ip
 8010a44:	4691      	mov	r9, r2
 8010a46:	0035      	movs	r5, r6
 8010a48:	e7c5      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010a4a:	465c      	mov	r4, fp
 8010a4c:	2d00      	cmp	r5, #0
 8010a4e:	d000      	beq.n	8010a52 <__aeabi_dsub+0x2b6>
 8010a50:	e0e1      	b.n	8010c16 <__aeabi_dsub+0x47a>
 8010a52:	000b      	movs	r3, r1
 8010a54:	4303      	orrs	r3, r0
 8010a56:	d0f3      	beq.n	8010a40 <__aeabi_dsub+0x2a4>
 8010a58:	1c73      	adds	r3, r6, #1
 8010a5a:	d100      	bne.n	8010a5e <__aeabi_dsub+0x2c2>
 8010a5c:	e1ac      	b.n	8010db8 <__aeabi_dsub+0x61c>
 8010a5e:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <__aeabi_dsub+0x348>)
 8010a60:	429f      	cmp	r7, r3
 8010a62:	d100      	bne.n	8010a66 <__aeabi_dsub+0x2ca>
 8010a64:	e13a      	b.n	8010cdc <__aeabi_dsub+0x540>
 8010a66:	43f3      	mvns	r3, r6
 8010a68:	2b38      	cmp	r3, #56	; 0x38
 8010a6a:	dd00      	ble.n	8010a6e <__aeabi_dsub+0x2d2>
 8010a6c:	e16f      	b.n	8010d4e <__aeabi_dsub+0x5b2>
 8010a6e:	2b1f      	cmp	r3, #31
 8010a70:	dd00      	ble.n	8010a74 <__aeabi_dsub+0x2d8>
 8010a72:	e18c      	b.n	8010d8e <__aeabi_dsub+0x5f2>
 8010a74:	2520      	movs	r5, #32
 8010a76:	000e      	movs	r6, r1
 8010a78:	1aed      	subs	r5, r5, r3
 8010a7a:	40ae      	lsls	r6, r5
 8010a7c:	46b0      	mov	r8, r6
 8010a7e:	0006      	movs	r6, r0
 8010a80:	46aa      	mov	sl, r5
 8010a82:	40de      	lsrs	r6, r3
 8010a84:	4645      	mov	r5, r8
 8010a86:	4335      	orrs	r5, r6
 8010a88:	002e      	movs	r6, r5
 8010a8a:	4655      	mov	r5, sl
 8010a8c:	40d9      	lsrs	r1, r3
 8010a8e:	40a8      	lsls	r0, r5
 8010a90:	4663      	mov	r3, ip
 8010a92:	1e45      	subs	r5, r0, #1
 8010a94:	41a8      	sbcs	r0, r5
 8010a96:	1a5b      	subs	r3, r3, r1
 8010a98:	469c      	mov	ip, r3
 8010a9a:	4330      	orrs	r0, r6
 8010a9c:	1a16      	subs	r6, r2, r0
 8010a9e:	42b2      	cmp	r2, r6
 8010aa0:	4192      	sbcs	r2, r2
 8010aa2:	4663      	mov	r3, ip
 8010aa4:	4252      	negs	r2, r2
 8010aa6:	1a99      	subs	r1, r3, r2
 8010aa8:	003d      	movs	r5, r7
 8010aaa:	e6b4      	b.n	8010816 <__aeabi_dsub+0x7a>
 8010aac:	2207      	movs	r2, #7
 8010aae:	4032      	ands	r2, r6
 8010ab0:	2a00      	cmp	r2, #0
 8010ab2:	d000      	beq.n	8010ab6 <__aeabi_dsub+0x31a>
 8010ab4:	e6e4      	b.n	8010880 <__aeabi_dsub+0xe4>
 8010ab6:	4b0b      	ldr	r3, [pc, #44]	; (8010ae4 <__aeabi_dsub+0x348>)
 8010ab8:	08f6      	lsrs	r6, r6, #3
 8010aba:	074f      	lsls	r7, r1, #29
 8010abc:	4337      	orrs	r7, r6
 8010abe:	08ca      	lsrs	r2, r1, #3
 8010ac0:	429d      	cmp	r5, r3
 8010ac2:	d000      	beq.n	8010ac6 <__aeabi_dsub+0x32a>
 8010ac4:	e790      	b.n	80109e8 <__aeabi_dsub+0x24c>
 8010ac6:	003b      	movs	r3, r7
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	d100      	bne.n	8010ace <__aeabi_dsub+0x332>
 8010acc:	e1a6      	b.n	8010e1c <__aeabi_dsub+0x680>
 8010ace:	2380      	movs	r3, #128	; 0x80
 8010ad0:	031b      	lsls	r3, r3, #12
 8010ad2:	431a      	orrs	r2, r3
 8010ad4:	0312      	lsls	r2, r2, #12
 8010ad6:	0b12      	lsrs	r2, r2, #12
 8010ad8:	4d02      	ldr	r5, [pc, #8]	; (8010ae4 <__aeabi_dsub+0x348>)
 8010ada:	e789      	b.n	80109f0 <__aeabi_dsub+0x254>
 8010adc:	0015      	movs	r5, r2
 8010ade:	2200      	movs	r2, #0
 8010ae0:	2700      	movs	r7, #0
 8010ae2:	e785      	b.n	80109f0 <__aeabi_dsub+0x254>
 8010ae4:	000007ff 	.word	0x000007ff
 8010ae8:	ff7fffff 	.word	0xff7fffff
 8010aec:	800fffff 	.word	0x800fffff
 8010af0:	2e00      	cmp	r6, #0
 8010af2:	d000      	beq.n	8010af6 <__aeabi_dsub+0x35a>
 8010af4:	e0c7      	b.n	8010c86 <__aeabi_dsub+0x4ea>
 8010af6:	1c6b      	adds	r3, r5, #1
 8010af8:	055e      	lsls	r6, r3, #21
 8010afa:	0d76      	lsrs	r6, r6, #21
 8010afc:	2e01      	cmp	r6, #1
 8010afe:	dc00      	bgt.n	8010b02 <__aeabi_dsub+0x366>
 8010b00:	e0f0      	b.n	8010ce4 <__aeabi_dsub+0x548>
 8010b02:	4dc8      	ldr	r5, [pc, #800]	; (8010e24 <__aeabi_dsub+0x688>)
 8010b04:	42ab      	cmp	r3, r5
 8010b06:	d100      	bne.n	8010b0a <__aeabi_dsub+0x36e>
 8010b08:	e0b9      	b.n	8010c7e <__aeabi_dsub+0x4e2>
 8010b0a:	1885      	adds	r5, r0, r2
 8010b0c:	000a      	movs	r2, r1
 8010b0e:	4285      	cmp	r5, r0
 8010b10:	4189      	sbcs	r1, r1
 8010b12:	4462      	add	r2, ip
 8010b14:	4249      	negs	r1, r1
 8010b16:	1851      	adds	r1, r2, r1
 8010b18:	2207      	movs	r2, #7
 8010b1a:	07ce      	lsls	r6, r1, #31
 8010b1c:	086d      	lsrs	r5, r5, #1
 8010b1e:	432e      	orrs	r6, r5
 8010b20:	0849      	lsrs	r1, r1, #1
 8010b22:	4032      	ands	r2, r6
 8010b24:	001d      	movs	r5, r3
 8010b26:	e6a9      	b.n	801087c <__aeabi_dsub+0xe0>
 8010b28:	49bf      	ldr	r1, [pc, #764]	; (8010e28 <__aeabi_dsub+0x68c>)
 8010b2a:	1aed      	subs	r5, r5, r3
 8010b2c:	4011      	ands	r1, r2
 8010b2e:	2207      	movs	r2, #7
 8010b30:	4032      	ands	r2, r6
 8010b32:	e6a3      	b.n	801087c <__aeabi_dsub+0xe0>
 8010b34:	0032      	movs	r2, r6
 8010b36:	3828      	subs	r0, #40	; 0x28
 8010b38:	4082      	lsls	r2, r0
 8010b3a:	2600      	movs	r6, #0
 8010b3c:	e686      	b.n	801084c <__aeabi_dsub+0xb0>
 8010b3e:	0030      	movs	r0, r6
 8010b40:	f7fd ffea 	bl	800eb18 <__clzsi2>
 8010b44:	3020      	adds	r0, #32
 8010b46:	e673      	b.n	8010830 <__aeabi_dsub+0x94>
 8010b48:	4663      	mov	r3, ip
 8010b4a:	4313      	orrs	r3, r2
 8010b4c:	1e5a      	subs	r2, r3, #1
 8010b4e:	4193      	sbcs	r3, r2
 8010b50:	1ac6      	subs	r6, r0, r3
 8010b52:	42b0      	cmp	r0, r6
 8010b54:	4180      	sbcs	r0, r0
 8010b56:	4240      	negs	r0, r0
 8010b58:	1a09      	subs	r1, r1, r0
 8010b5a:	e65c      	b.n	8010816 <__aeabi_dsub+0x7a>
 8010b5c:	000e      	movs	r6, r1
 8010b5e:	4667      	mov	r7, ip
 8010b60:	4306      	orrs	r6, r0
 8010b62:	4317      	orrs	r7, r2
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	d15e      	bne.n	8010c26 <__aeabi_dsub+0x48a>
 8010b68:	2e00      	cmp	r6, #0
 8010b6a:	d000      	beq.n	8010b6e <__aeabi_dsub+0x3d2>
 8010b6c:	e0f3      	b.n	8010d56 <__aeabi_dsub+0x5ba>
 8010b6e:	2f00      	cmp	r7, #0
 8010b70:	d100      	bne.n	8010b74 <__aeabi_dsub+0x3d8>
 8010b72:	e11e      	b.n	8010db2 <__aeabi_dsub+0x616>
 8010b74:	465c      	mov	r4, fp
 8010b76:	4661      	mov	r1, ip
 8010b78:	4691      	mov	r9, r2
 8010b7a:	e72c      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010b7c:	4fa9      	ldr	r7, [pc, #676]	; (8010e24 <__aeabi_dsub+0x688>)
 8010b7e:	42be      	cmp	r6, r7
 8010b80:	d07b      	beq.n	8010c7a <__aeabi_dsub+0x4de>
 8010b82:	001e      	movs	r6, r3
 8010b84:	e6f1      	b.n	801096a <__aeabi_dsub+0x1ce>
 8010b86:	0010      	movs	r0, r2
 8010b88:	3d1f      	subs	r5, #31
 8010b8a:	40e8      	lsrs	r0, r5
 8010b8c:	2b20      	cmp	r3, #32
 8010b8e:	d003      	beq.n	8010b98 <__aeabi_dsub+0x3fc>
 8010b90:	2140      	movs	r1, #64	; 0x40
 8010b92:	1acb      	subs	r3, r1, r3
 8010b94:	409a      	lsls	r2, r3
 8010b96:	4316      	orrs	r6, r2
 8010b98:	1e73      	subs	r3, r6, #1
 8010b9a:	419e      	sbcs	r6, r3
 8010b9c:	2207      	movs	r2, #7
 8010b9e:	4306      	orrs	r6, r0
 8010ba0:	4032      	ands	r2, r6
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	2500      	movs	r5, #0
 8010ba6:	e783      	b.n	8010ab0 <__aeabi_dsub+0x314>
 8010ba8:	1a16      	subs	r6, r2, r0
 8010baa:	4663      	mov	r3, ip
 8010bac:	42b2      	cmp	r2, r6
 8010bae:	4180      	sbcs	r0, r0
 8010bb0:	1a59      	subs	r1, r3, r1
 8010bb2:	4240      	negs	r0, r0
 8010bb4:	1a0b      	subs	r3, r1, r0
 8010bb6:	4698      	mov	r8, r3
 8010bb8:	465c      	mov	r4, fp
 8010bba:	e632      	b.n	8010822 <__aeabi_dsub+0x86>
 8010bbc:	2e1f      	cmp	r6, #31
 8010bbe:	dd00      	ble.n	8010bc2 <__aeabi_dsub+0x426>
 8010bc0:	e0ab      	b.n	8010d1a <__aeabi_dsub+0x57e>
 8010bc2:	2720      	movs	r7, #32
 8010bc4:	1bbb      	subs	r3, r7, r6
 8010bc6:	469a      	mov	sl, r3
 8010bc8:	4663      	mov	r3, ip
 8010bca:	4657      	mov	r7, sl
 8010bcc:	40bb      	lsls	r3, r7
 8010bce:	4699      	mov	r9, r3
 8010bd0:	0013      	movs	r3, r2
 8010bd2:	464f      	mov	r7, r9
 8010bd4:	40f3      	lsrs	r3, r6
 8010bd6:	431f      	orrs	r7, r3
 8010bd8:	003b      	movs	r3, r7
 8010bda:	4657      	mov	r7, sl
 8010bdc:	40ba      	lsls	r2, r7
 8010bde:	1e57      	subs	r7, r2, #1
 8010be0:	41ba      	sbcs	r2, r7
 8010be2:	4313      	orrs	r3, r2
 8010be4:	4662      	mov	r2, ip
 8010be6:	40f2      	lsrs	r2, r6
 8010be8:	1889      	adds	r1, r1, r2
 8010bea:	e698      	b.n	801091e <__aeabi_dsub+0x182>
 8010bec:	2720      	movs	r7, #32
 8010bee:	1bbb      	subs	r3, r7, r6
 8010bf0:	469a      	mov	sl, r3
 8010bf2:	4663      	mov	r3, ip
 8010bf4:	4657      	mov	r7, sl
 8010bf6:	40bb      	lsls	r3, r7
 8010bf8:	4699      	mov	r9, r3
 8010bfa:	0013      	movs	r3, r2
 8010bfc:	464f      	mov	r7, r9
 8010bfe:	40f3      	lsrs	r3, r6
 8010c00:	431f      	orrs	r7, r3
 8010c02:	003b      	movs	r3, r7
 8010c04:	4657      	mov	r7, sl
 8010c06:	40ba      	lsls	r2, r7
 8010c08:	1e57      	subs	r7, r2, #1
 8010c0a:	41ba      	sbcs	r2, r7
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	4662      	mov	r2, ip
 8010c10:	40f2      	lsrs	r2, r6
 8010c12:	1a89      	subs	r1, r1, r2
 8010c14:	e79c      	b.n	8010b50 <__aeabi_dsub+0x3b4>
 8010c16:	4b83      	ldr	r3, [pc, #524]	; (8010e24 <__aeabi_dsub+0x688>)
 8010c18:	429f      	cmp	r7, r3
 8010c1a:	d05f      	beq.n	8010cdc <__aeabi_dsub+0x540>
 8010c1c:	2580      	movs	r5, #128	; 0x80
 8010c1e:	042d      	lsls	r5, r5, #16
 8010c20:	4273      	negs	r3, r6
 8010c22:	4329      	orrs	r1, r5
 8010c24:	e720      	b.n	8010a68 <__aeabi_dsub+0x2cc>
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	d10c      	bne.n	8010c44 <__aeabi_dsub+0x4a8>
 8010c2a:	2f00      	cmp	r7, #0
 8010c2c:	d100      	bne.n	8010c30 <__aeabi_dsub+0x494>
 8010c2e:	e0d0      	b.n	8010dd2 <__aeabi_dsub+0x636>
 8010c30:	465c      	mov	r4, fp
 8010c32:	4661      	mov	r1, ip
 8010c34:	4691      	mov	r9, r2
 8010c36:	4d7b      	ldr	r5, [pc, #492]	; (8010e24 <__aeabi_dsub+0x688>)
 8010c38:	e6cd      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010c3a:	4f7a      	ldr	r7, [pc, #488]	; (8010e24 <__aeabi_dsub+0x688>)
 8010c3c:	42be      	cmp	r6, r7
 8010c3e:	d01c      	beq.n	8010c7a <__aeabi_dsub+0x4de>
 8010c40:	001e      	movs	r6, r3
 8010c42:	e665      	b.n	8010910 <__aeabi_dsub+0x174>
 8010c44:	2f00      	cmp	r7, #0
 8010c46:	d018      	beq.n	8010c7a <__aeabi_dsub+0x4de>
 8010c48:	08c0      	lsrs	r0, r0, #3
 8010c4a:	074e      	lsls	r6, r1, #29
 8010c4c:	4306      	orrs	r6, r0
 8010c4e:	2080      	movs	r0, #128	; 0x80
 8010c50:	08c9      	lsrs	r1, r1, #3
 8010c52:	0300      	lsls	r0, r0, #12
 8010c54:	4201      	tst	r1, r0
 8010c56:	d008      	beq.n	8010c6a <__aeabi_dsub+0x4ce>
 8010c58:	4663      	mov	r3, ip
 8010c5a:	08dc      	lsrs	r4, r3, #3
 8010c5c:	4204      	tst	r4, r0
 8010c5e:	d104      	bne.n	8010c6a <__aeabi_dsub+0x4ce>
 8010c60:	0021      	movs	r1, r4
 8010c62:	46da      	mov	sl, fp
 8010c64:	08d2      	lsrs	r2, r2, #3
 8010c66:	075e      	lsls	r6, r3, #29
 8010c68:	4316      	orrs	r6, r2
 8010c6a:	00f3      	lsls	r3, r6, #3
 8010c6c:	4699      	mov	r9, r3
 8010c6e:	2401      	movs	r4, #1
 8010c70:	4653      	mov	r3, sl
 8010c72:	00c9      	lsls	r1, r1, #3
 8010c74:	0f72      	lsrs	r2, r6, #29
 8010c76:	4311      	orrs	r1, r2
 8010c78:	401c      	ands	r4, r3
 8010c7a:	4d6a      	ldr	r5, [pc, #424]	; (8010e24 <__aeabi_dsub+0x688>)
 8010c7c:	e6ab      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010c7e:	001d      	movs	r5, r3
 8010c80:	2200      	movs	r2, #0
 8010c82:	2700      	movs	r7, #0
 8010c84:	e6b4      	b.n	80109f0 <__aeabi_dsub+0x254>
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	d159      	bne.n	8010d3e <__aeabi_dsub+0x5a2>
 8010c8a:	000b      	movs	r3, r1
 8010c8c:	4303      	orrs	r3, r0
 8010c8e:	d100      	bne.n	8010c92 <__aeabi_dsub+0x4f6>
 8010c90:	e6d6      	b.n	8010a40 <__aeabi_dsub+0x2a4>
 8010c92:	1c73      	adds	r3, r6, #1
 8010c94:	d100      	bne.n	8010c98 <__aeabi_dsub+0x4fc>
 8010c96:	e0b2      	b.n	8010dfe <__aeabi_dsub+0x662>
 8010c98:	4b62      	ldr	r3, [pc, #392]	; (8010e24 <__aeabi_dsub+0x688>)
 8010c9a:	429f      	cmp	r7, r3
 8010c9c:	d01e      	beq.n	8010cdc <__aeabi_dsub+0x540>
 8010c9e:	43f3      	mvns	r3, r6
 8010ca0:	2b38      	cmp	r3, #56	; 0x38
 8010ca2:	dc6f      	bgt.n	8010d84 <__aeabi_dsub+0x5e8>
 8010ca4:	2b1f      	cmp	r3, #31
 8010ca6:	dd00      	ble.n	8010caa <__aeabi_dsub+0x50e>
 8010ca8:	e097      	b.n	8010dda <__aeabi_dsub+0x63e>
 8010caa:	2520      	movs	r5, #32
 8010cac:	000e      	movs	r6, r1
 8010cae:	1aed      	subs	r5, r5, r3
 8010cb0:	40ae      	lsls	r6, r5
 8010cb2:	46b0      	mov	r8, r6
 8010cb4:	0006      	movs	r6, r0
 8010cb6:	46aa      	mov	sl, r5
 8010cb8:	40de      	lsrs	r6, r3
 8010cba:	4645      	mov	r5, r8
 8010cbc:	4335      	orrs	r5, r6
 8010cbe:	002e      	movs	r6, r5
 8010cc0:	4655      	mov	r5, sl
 8010cc2:	40a8      	lsls	r0, r5
 8010cc4:	40d9      	lsrs	r1, r3
 8010cc6:	1e45      	subs	r5, r0, #1
 8010cc8:	41a8      	sbcs	r0, r5
 8010cca:	448c      	add	ip, r1
 8010ccc:	4306      	orrs	r6, r0
 8010cce:	18b6      	adds	r6, r6, r2
 8010cd0:	4296      	cmp	r6, r2
 8010cd2:	4192      	sbcs	r2, r2
 8010cd4:	4251      	negs	r1, r2
 8010cd6:	4461      	add	r1, ip
 8010cd8:	003d      	movs	r5, r7
 8010cda:	e625      	b.n	8010928 <__aeabi_dsub+0x18c>
 8010cdc:	003d      	movs	r5, r7
 8010cde:	4661      	mov	r1, ip
 8010ce0:	4691      	mov	r9, r2
 8010ce2:	e678      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010ce4:	000b      	movs	r3, r1
 8010ce6:	4303      	orrs	r3, r0
 8010ce8:	2d00      	cmp	r5, #0
 8010cea:	d000      	beq.n	8010cee <__aeabi_dsub+0x552>
 8010cec:	e655      	b.n	801099a <__aeabi_dsub+0x1fe>
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d0f5      	beq.n	8010cde <__aeabi_dsub+0x542>
 8010cf2:	4663      	mov	r3, ip
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	d100      	bne.n	8010cfa <__aeabi_dsub+0x55e>
 8010cf8:	e66d      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010cfa:	1886      	adds	r6, r0, r2
 8010cfc:	4286      	cmp	r6, r0
 8010cfe:	4180      	sbcs	r0, r0
 8010d00:	4461      	add	r1, ip
 8010d02:	4240      	negs	r0, r0
 8010d04:	1809      	adds	r1, r1, r0
 8010d06:	2200      	movs	r2, #0
 8010d08:	020b      	lsls	r3, r1, #8
 8010d0a:	d400      	bmi.n	8010d0e <__aeabi_dsub+0x572>
 8010d0c:	e6d0      	b.n	8010ab0 <__aeabi_dsub+0x314>
 8010d0e:	4b46      	ldr	r3, [pc, #280]	; (8010e28 <__aeabi_dsub+0x68c>)
 8010d10:	3501      	adds	r5, #1
 8010d12:	4019      	ands	r1, r3
 8010d14:	e5b2      	b.n	801087c <__aeabi_dsub+0xe0>
 8010d16:	46b1      	mov	r9, r6
 8010d18:	e65d      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010d1a:	0033      	movs	r3, r6
 8010d1c:	4667      	mov	r7, ip
 8010d1e:	3b20      	subs	r3, #32
 8010d20:	40df      	lsrs	r7, r3
 8010d22:	003b      	movs	r3, r7
 8010d24:	2e20      	cmp	r6, #32
 8010d26:	d005      	beq.n	8010d34 <__aeabi_dsub+0x598>
 8010d28:	2740      	movs	r7, #64	; 0x40
 8010d2a:	1bbf      	subs	r7, r7, r6
 8010d2c:	4666      	mov	r6, ip
 8010d2e:	40be      	lsls	r6, r7
 8010d30:	4332      	orrs	r2, r6
 8010d32:	4690      	mov	r8, r2
 8010d34:	4646      	mov	r6, r8
 8010d36:	1e72      	subs	r2, r6, #1
 8010d38:	4196      	sbcs	r6, r2
 8010d3a:	4333      	orrs	r3, r6
 8010d3c:	e5ef      	b.n	801091e <__aeabi_dsub+0x182>
 8010d3e:	4b39      	ldr	r3, [pc, #228]	; (8010e24 <__aeabi_dsub+0x688>)
 8010d40:	429f      	cmp	r7, r3
 8010d42:	d0cb      	beq.n	8010cdc <__aeabi_dsub+0x540>
 8010d44:	2580      	movs	r5, #128	; 0x80
 8010d46:	042d      	lsls	r5, r5, #16
 8010d48:	4273      	negs	r3, r6
 8010d4a:	4329      	orrs	r1, r5
 8010d4c:	e7a8      	b.n	8010ca0 <__aeabi_dsub+0x504>
 8010d4e:	4308      	orrs	r0, r1
 8010d50:	1e41      	subs	r1, r0, #1
 8010d52:	4188      	sbcs	r0, r1
 8010d54:	e6a2      	b.n	8010a9c <__aeabi_dsub+0x300>
 8010d56:	2f00      	cmp	r7, #0
 8010d58:	d100      	bne.n	8010d5c <__aeabi_dsub+0x5c0>
 8010d5a:	e63c      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010d5c:	4663      	mov	r3, ip
 8010d5e:	1a86      	subs	r6, r0, r2
 8010d60:	1acf      	subs	r7, r1, r3
 8010d62:	42b0      	cmp	r0, r6
 8010d64:	419b      	sbcs	r3, r3
 8010d66:	425b      	negs	r3, r3
 8010d68:	1afb      	subs	r3, r7, r3
 8010d6a:	4698      	mov	r8, r3
 8010d6c:	021b      	lsls	r3, r3, #8
 8010d6e:	d54e      	bpl.n	8010e0e <__aeabi_dsub+0x672>
 8010d70:	1a16      	subs	r6, r2, r0
 8010d72:	4663      	mov	r3, ip
 8010d74:	42b2      	cmp	r2, r6
 8010d76:	4192      	sbcs	r2, r2
 8010d78:	1a59      	subs	r1, r3, r1
 8010d7a:	4252      	negs	r2, r2
 8010d7c:	1a89      	subs	r1, r1, r2
 8010d7e:	465c      	mov	r4, fp
 8010d80:	2200      	movs	r2, #0
 8010d82:	e57b      	b.n	801087c <__aeabi_dsub+0xe0>
 8010d84:	4301      	orrs	r1, r0
 8010d86:	000e      	movs	r6, r1
 8010d88:	1e71      	subs	r1, r6, #1
 8010d8a:	418e      	sbcs	r6, r1
 8010d8c:	e79f      	b.n	8010cce <__aeabi_dsub+0x532>
 8010d8e:	001d      	movs	r5, r3
 8010d90:	000e      	movs	r6, r1
 8010d92:	3d20      	subs	r5, #32
 8010d94:	40ee      	lsrs	r6, r5
 8010d96:	46b0      	mov	r8, r6
 8010d98:	2b20      	cmp	r3, #32
 8010d9a:	d004      	beq.n	8010da6 <__aeabi_dsub+0x60a>
 8010d9c:	2540      	movs	r5, #64	; 0x40
 8010d9e:	1aeb      	subs	r3, r5, r3
 8010da0:	4099      	lsls	r1, r3
 8010da2:	4308      	orrs	r0, r1
 8010da4:	4681      	mov	r9, r0
 8010da6:	4648      	mov	r0, r9
 8010da8:	4643      	mov	r3, r8
 8010daa:	1e41      	subs	r1, r0, #1
 8010dac:	4188      	sbcs	r0, r1
 8010dae:	4318      	orrs	r0, r3
 8010db0:	e674      	b.n	8010a9c <__aeabi_dsub+0x300>
 8010db2:	2200      	movs	r2, #0
 8010db4:	2400      	movs	r4, #0
 8010db6:	e617      	b.n	80109e8 <__aeabi_dsub+0x24c>
 8010db8:	1a16      	subs	r6, r2, r0
 8010dba:	4663      	mov	r3, ip
 8010dbc:	42b2      	cmp	r2, r6
 8010dbe:	4192      	sbcs	r2, r2
 8010dc0:	1a59      	subs	r1, r3, r1
 8010dc2:	4252      	negs	r2, r2
 8010dc4:	1a89      	subs	r1, r1, r2
 8010dc6:	003d      	movs	r5, r7
 8010dc8:	e525      	b.n	8010816 <__aeabi_dsub+0x7a>
 8010dca:	4661      	mov	r1, ip
 8010dcc:	4691      	mov	r9, r2
 8010dce:	4d15      	ldr	r5, [pc, #84]	; (8010e24 <__aeabi_dsub+0x688>)
 8010dd0:	e601      	b.n	80109d6 <__aeabi_dsub+0x23a>
 8010dd2:	2280      	movs	r2, #128	; 0x80
 8010dd4:	2400      	movs	r4, #0
 8010dd6:	0312      	lsls	r2, r2, #12
 8010dd8:	e679      	b.n	8010ace <__aeabi_dsub+0x332>
 8010dda:	001d      	movs	r5, r3
 8010ddc:	000e      	movs	r6, r1
 8010dde:	3d20      	subs	r5, #32
 8010de0:	40ee      	lsrs	r6, r5
 8010de2:	46b0      	mov	r8, r6
 8010de4:	2b20      	cmp	r3, #32
 8010de6:	d004      	beq.n	8010df2 <__aeabi_dsub+0x656>
 8010de8:	2540      	movs	r5, #64	; 0x40
 8010dea:	1aeb      	subs	r3, r5, r3
 8010dec:	4099      	lsls	r1, r3
 8010dee:	4308      	orrs	r0, r1
 8010df0:	4681      	mov	r9, r0
 8010df2:	464e      	mov	r6, r9
 8010df4:	4643      	mov	r3, r8
 8010df6:	1e71      	subs	r1, r6, #1
 8010df8:	418e      	sbcs	r6, r1
 8010dfa:	431e      	orrs	r6, r3
 8010dfc:	e767      	b.n	8010cce <__aeabi_dsub+0x532>
 8010dfe:	1886      	adds	r6, r0, r2
 8010e00:	4296      	cmp	r6, r2
 8010e02:	419b      	sbcs	r3, r3
 8010e04:	4461      	add	r1, ip
 8010e06:	425b      	negs	r3, r3
 8010e08:	18c9      	adds	r1, r1, r3
 8010e0a:	003d      	movs	r5, r7
 8010e0c:	e58c      	b.n	8010928 <__aeabi_dsub+0x18c>
 8010e0e:	4647      	mov	r7, r8
 8010e10:	4337      	orrs	r7, r6
 8010e12:	d0ce      	beq.n	8010db2 <__aeabi_dsub+0x616>
 8010e14:	2207      	movs	r2, #7
 8010e16:	4641      	mov	r1, r8
 8010e18:	4032      	ands	r2, r6
 8010e1a:	e649      	b.n	8010ab0 <__aeabi_dsub+0x314>
 8010e1c:	2700      	movs	r7, #0
 8010e1e:	003a      	movs	r2, r7
 8010e20:	e5e6      	b.n	80109f0 <__aeabi_dsub+0x254>
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	000007ff 	.word	0x000007ff
 8010e28:	ff7fffff 	.word	0xff7fffff

08010e2c <__aeabi_dcmpun>:
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	4e0c      	ldr	r6, [pc, #48]	; (8010e60 <__aeabi_dcmpun+0x34>)
 8010e30:	030d      	lsls	r5, r1, #12
 8010e32:	031c      	lsls	r4, r3, #12
 8010e34:	0049      	lsls	r1, r1, #1
 8010e36:	005b      	lsls	r3, r3, #1
 8010e38:	0b2d      	lsrs	r5, r5, #12
 8010e3a:	0d49      	lsrs	r1, r1, #21
 8010e3c:	0b24      	lsrs	r4, r4, #12
 8010e3e:	0d5b      	lsrs	r3, r3, #21
 8010e40:	42b1      	cmp	r1, r6
 8010e42:	d008      	beq.n	8010e56 <__aeabi_dcmpun+0x2a>
 8010e44:	4906      	ldr	r1, [pc, #24]	; (8010e60 <__aeabi_dcmpun+0x34>)
 8010e46:	2000      	movs	r0, #0
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	d103      	bne.n	8010e54 <__aeabi_dcmpun+0x28>
 8010e4c:	4314      	orrs	r4, r2
 8010e4e:	0020      	movs	r0, r4
 8010e50:	1e44      	subs	r4, r0, #1
 8010e52:	41a0      	sbcs	r0, r4
 8010e54:	bd70      	pop	{r4, r5, r6, pc}
 8010e56:	4305      	orrs	r5, r0
 8010e58:	2001      	movs	r0, #1
 8010e5a:	2d00      	cmp	r5, #0
 8010e5c:	d1fa      	bne.n	8010e54 <__aeabi_dcmpun+0x28>
 8010e5e:	e7f1      	b.n	8010e44 <__aeabi_dcmpun+0x18>
 8010e60:	000007ff 	.word	0x000007ff

08010e64 <__aeabi_d2iz>:
 8010e64:	b530      	push	{r4, r5, lr}
 8010e66:	4d14      	ldr	r5, [pc, #80]	; (8010eb8 <__aeabi_d2iz+0x54>)
 8010e68:	030a      	lsls	r2, r1, #12
 8010e6a:	004b      	lsls	r3, r1, #1
 8010e6c:	0b12      	lsrs	r2, r2, #12
 8010e6e:	0d5b      	lsrs	r3, r3, #21
 8010e70:	0fc9      	lsrs	r1, r1, #31
 8010e72:	2400      	movs	r4, #0
 8010e74:	42ab      	cmp	r3, r5
 8010e76:	dd11      	ble.n	8010e9c <__aeabi_d2iz+0x38>
 8010e78:	4c10      	ldr	r4, [pc, #64]	; (8010ebc <__aeabi_d2iz+0x58>)
 8010e7a:	42a3      	cmp	r3, r4
 8010e7c:	dc10      	bgt.n	8010ea0 <__aeabi_d2iz+0x3c>
 8010e7e:	2480      	movs	r4, #128	; 0x80
 8010e80:	0364      	lsls	r4, r4, #13
 8010e82:	4322      	orrs	r2, r4
 8010e84:	4c0e      	ldr	r4, [pc, #56]	; (8010ec0 <__aeabi_d2iz+0x5c>)
 8010e86:	1ae4      	subs	r4, r4, r3
 8010e88:	2c1f      	cmp	r4, #31
 8010e8a:	dd0c      	ble.n	8010ea6 <__aeabi_d2iz+0x42>
 8010e8c:	480d      	ldr	r0, [pc, #52]	; (8010ec4 <__aeabi_d2iz+0x60>)
 8010e8e:	1ac3      	subs	r3, r0, r3
 8010e90:	40da      	lsrs	r2, r3
 8010e92:	0013      	movs	r3, r2
 8010e94:	425c      	negs	r4, r3
 8010e96:	2900      	cmp	r1, #0
 8010e98:	d100      	bne.n	8010e9c <__aeabi_d2iz+0x38>
 8010e9a:	001c      	movs	r4, r3
 8010e9c:	0020      	movs	r0, r4
 8010e9e:	bd30      	pop	{r4, r5, pc}
 8010ea0:	4b09      	ldr	r3, [pc, #36]	; (8010ec8 <__aeabi_d2iz+0x64>)
 8010ea2:	18cc      	adds	r4, r1, r3
 8010ea4:	e7fa      	b.n	8010e9c <__aeabi_d2iz+0x38>
 8010ea6:	4d09      	ldr	r5, [pc, #36]	; (8010ecc <__aeabi_d2iz+0x68>)
 8010ea8:	40e0      	lsrs	r0, r4
 8010eaa:	46ac      	mov	ip, r5
 8010eac:	4463      	add	r3, ip
 8010eae:	409a      	lsls	r2, r3
 8010eb0:	0013      	movs	r3, r2
 8010eb2:	4303      	orrs	r3, r0
 8010eb4:	e7ee      	b.n	8010e94 <__aeabi_d2iz+0x30>
 8010eb6:	46c0      	nop			; (mov r8, r8)
 8010eb8:	000003fe 	.word	0x000003fe
 8010ebc:	0000041d 	.word	0x0000041d
 8010ec0:	00000433 	.word	0x00000433
 8010ec4:	00000413 	.word	0x00000413
 8010ec8:	7fffffff 	.word	0x7fffffff
 8010ecc:	fffffbed 	.word	0xfffffbed

08010ed0 <__aeabi_i2d>:
 8010ed0:	b570      	push	{r4, r5, r6, lr}
 8010ed2:	2800      	cmp	r0, #0
 8010ed4:	d02d      	beq.n	8010f32 <__aeabi_i2d+0x62>
 8010ed6:	17c3      	asrs	r3, r0, #31
 8010ed8:	18c5      	adds	r5, r0, r3
 8010eda:	405d      	eors	r5, r3
 8010edc:	0fc4      	lsrs	r4, r0, #31
 8010ede:	0028      	movs	r0, r5
 8010ee0:	f7fd fe1a 	bl	800eb18 <__clzsi2>
 8010ee4:	4b15      	ldr	r3, [pc, #84]	; (8010f3c <__aeabi_i2d+0x6c>)
 8010ee6:	1a1b      	subs	r3, r3, r0
 8010ee8:	055b      	lsls	r3, r3, #21
 8010eea:	0d5b      	lsrs	r3, r3, #21
 8010eec:	280a      	cmp	r0, #10
 8010eee:	dd15      	ble.n	8010f1c <__aeabi_i2d+0x4c>
 8010ef0:	380b      	subs	r0, #11
 8010ef2:	4085      	lsls	r5, r0
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	032d      	lsls	r5, r5, #12
 8010ef8:	0b2d      	lsrs	r5, r5, #12
 8010efa:	2100      	movs	r1, #0
 8010efc:	0010      	movs	r0, r2
 8010efe:	032d      	lsls	r5, r5, #12
 8010f00:	0d0a      	lsrs	r2, r1, #20
 8010f02:	0b2d      	lsrs	r5, r5, #12
 8010f04:	0512      	lsls	r2, r2, #20
 8010f06:	432a      	orrs	r2, r5
 8010f08:	4d0d      	ldr	r5, [pc, #52]	; (8010f40 <__aeabi_i2d+0x70>)
 8010f0a:	051b      	lsls	r3, r3, #20
 8010f0c:	402a      	ands	r2, r5
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	005b      	lsls	r3, r3, #1
 8010f12:	07e4      	lsls	r4, r4, #31
 8010f14:	085b      	lsrs	r3, r3, #1
 8010f16:	4323      	orrs	r3, r4
 8010f18:	0019      	movs	r1, r3
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	0002      	movs	r2, r0
 8010f1e:	0029      	movs	r1, r5
 8010f20:	3215      	adds	r2, #21
 8010f22:	4091      	lsls	r1, r2
 8010f24:	000a      	movs	r2, r1
 8010f26:	210b      	movs	r1, #11
 8010f28:	1a08      	subs	r0, r1, r0
 8010f2a:	40c5      	lsrs	r5, r0
 8010f2c:	032d      	lsls	r5, r5, #12
 8010f2e:	0b2d      	lsrs	r5, r5, #12
 8010f30:	e7e3      	b.n	8010efa <__aeabi_i2d+0x2a>
 8010f32:	2400      	movs	r4, #0
 8010f34:	2300      	movs	r3, #0
 8010f36:	2500      	movs	r5, #0
 8010f38:	2200      	movs	r2, #0
 8010f3a:	e7de      	b.n	8010efa <__aeabi_i2d+0x2a>
 8010f3c:	0000041e 	.word	0x0000041e
 8010f40:	800fffff 	.word	0x800fffff

08010f44 <__aeabi_ui2d>:
 8010f44:	b510      	push	{r4, lr}
 8010f46:	1e04      	subs	r4, r0, #0
 8010f48:	d025      	beq.n	8010f96 <__aeabi_ui2d+0x52>
 8010f4a:	f7fd fde5 	bl	800eb18 <__clzsi2>
 8010f4e:	4b14      	ldr	r3, [pc, #80]	; (8010fa0 <__aeabi_ui2d+0x5c>)
 8010f50:	1a1b      	subs	r3, r3, r0
 8010f52:	055b      	lsls	r3, r3, #21
 8010f54:	0d5b      	lsrs	r3, r3, #21
 8010f56:	280a      	cmp	r0, #10
 8010f58:	dd12      	ble.n	8010f80 <__aeabi_ui2d+0x3c>
 8010f5a:	380b      	subs	r0, #11
 8010f5c:	4084      	lsls	r4, r0
 8010f5e:	2200      	movs	r2, #0
 8010f60:	0324      	lsls	r4, r4, #12
 8010f62:	0b24      	lsrs	r4, r4, #12
 8010f64:	2100      	movs	r1, #0
 8010f66:	0010      	movs	r0, r2
 8010f68:	0324      	lsls	r4, r4, #12
 8010f6a:	0d0a      	lsrs	r2, r1, #20
 8010f6c:	0b24      	lsrs	r4, r4, #12
 8010f6e:	0512      	lsls	r2, r2, #20
 8010f70:	4322      	orrs	r2, r4
 8010f72:	4c0c      	ldr	r4, [pc, #48]	; (8010fa4 <__aeabi_ui2d+0x60>)
 8010f74:	051b      	lsls	r3, r3, #20
 8010f76:	4022      	ands	r2, r4
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	0859      	lsrs	r1, r3, #1
 8010f7e:	bd10      	pop	{r4, pc}
 8010f80:	0002      	movs	r2, r0
 8010f82:	0021      	movs	r1, r4
 8010f84:	3215      	adds	r2, #21
 8010f86:	4091      	lsls	r1, r2
 8010f88:	000a      	movs	r2, r1
 8010f8a:	210b      	movs	r1, #11
 8010f8c:	1a08      	subs	r0, r1, r0
 8010f8e:	40c4      	lsrs	r4, r0
 8010f90:	0324      	lsls	r4, r4, #12
 8010f92:	0b24      	lsrs	r4, r4, #12
 8010f94:	e7e6      	b.n	8010f64 <__aeabi_ui2d+0x20>
 8010f96:	2300      	movs	r3, #0
 8010f98:	2400      	movs	r4, #0
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	e7e2      	b.n	8010f64 <__aeabi_ui2d+0x20>
 8010f9e:	46c0      	nop			; (mov r8, r8)
 8010fa0:	0000041e 	.word	0x0000041e
 8010fa4:	800fffff 	.word	0x800fffff

08010fa8 <__aeabi_f2d>:
 8010fa8:	0041      	lsls	r1, r0, #1
 8010faa:	0e09      	lsrs	r1, r1, #24
 8010fac:	1c4b      	adds	r3, r1, #1
 8010fae:	b570      	push	{r4, r5, r6, lr}
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	0246      	lsls	r6, r0, #9
 8010fb4:	0a75      	lsrs	r5, r6, #9
 8010fb6:	0fc4      	lsrs	r4, r0, #31
 8010fb8:	2b01      	cmp	r3, #1
 8010fba:	dd14      	ble.n	8010fe6 <__aeabi_f2d+0x3e>
 8010fbc:	23e0      	movs	r3, #224	; 0xe0
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	076d      	lsls	r5, r5, #29
 8010fc2:	0b36      	lsrs	r6, r6, #12
 8010fc4:	18cb      	adds	r3, r1, r3
 8010fc6:	2100      	movs	r1, #0
 8010fc8:	0d0a      	lsrs	r2, r1, #20
 8010fca:	0028      	movs	r0, r5
 8010fcc:	0512      	lsls	r2, r2, #20
 8010fce:	4d1c      	ldr	r5, [pc, #112]	; (8011040 <__aeabi_f2d+0x98>)
 8010fd0:	4332      	orrs	r2, r6
 8010fd2:	055b      	lsls	r3, r3, #21
 8010fd4:	402a      	ands	r2, r5
 8010fd6:	085b      	lsrs	r3, r3, #1
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	005b      	lsls	r3, r3, #1
 8010fdc:	07e4      	lsls	r4, r4, #31
 8010fde:	085b      	lsrs	r3, r3, #1
 8010fe0:	4323      	orrs	r3, r4
 8010fe2:	0019      	movs	r1, r3
 8010fe4:	bd70      	pop	{r4, r5, r6, pc}
 8010fe6:	2900      	cmp	r1, #0
 8010fe8:	d114      	bne.n	8011014 <__aeabi_f2d+0x6c>
 8010fea:	2d00      	cmp	r5, #0
 8010fec:	d01e      	beq.n	801102c <__aeabi_f2d+0x84>
 8010fee:	0028      	movs	r0, r5
 8010ff0:	f7fd fd92 	bl	800eb18 <__clzsi2>
 8010ff4:	280a      	cmp	r0, #10
 8010ff6:	dc1c      	bgt.n	8011032 <__aeabi_f2d+0x8a>
 8010ff8:	230b      	movs	r3, #11
 8010ffa:	002a      	movs	r2, r5
 8010ffc:	1a1b      	subs	r3, r3, r0
 8010ffe:	40da      	lsrs	r2, r3
 8011000:	0003      	movs	r3, r0
 8011002:	3315      	adds	r3, #21
 8011004:	409d      	lsls	r5, r3
 8011006:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <__aeabi_f2d+0x9c>)
 8011008:	0312      	lsls	r2, r2, #12
 801100a:	1a1b      	subs	r3, r3, r0
 801100c:	055b      	lsls	r3, r3, #21
 801100e:	0b16      	lsrs	r6, r2, #12
 8011010:	0d5b      	lsrs	r3, r3, #21
 8011012:	e7d8      	b.n	8010fc6 <__aeabi_f2d+0x1e>
 8011014:	2d00      	cmp	r5, #0
 8011016:	d006      	beq.n	8011026 <__aeabi_f2d+0x7e>
 8011018:	0b32      	lsrs	r2, r6, #12
 801101a:	2680      	movs	r6, #128	; 0x80
 801101c:	0336      	lsls	r6, r6, #12
 801101e:	076d      	lsls	r5, r5, #29
 8011020:	4316      	orrs	r6, r2
 8011022:	4b09      	ldr	r3, [pc, #36]	; (8011048 <__aeabi_f2d+0xa0>)
 8011024:	e7cf      	b.n	8010fc6 <__aeabi_f2d+0x1e>
 8011026:	4b08      	ldr	r3, [pc, #32]	; (8011048 <__aeabi_f2d+0xa0>)
 8011028:	2600      	movs	r6, #0
 801102a:	e7cc      	b.n	8010fc6 <__aeabi_f2d+0x1e>
 801102c:	2300      	movs	r3, #0
 801102e:	2600      	movs	r6, #0
 8011030:	e7c9      	b.n	8010fc6 <__aeabi_f2d+0x1e>
 8011032:	0003      	movs	r3, r0
 8011034:	002a      	movs	r2, r5
 8011036:	3b0b      	subs	r3, #11
 8011038:	409a      	lsls	r2, r3
 801103a:	2500      	movs	r5, #0
 801103c:	e7e3      	b.n	8011006 <__aeabi_f2d+0x5e>
 801103e:	46c0      	nop			; (mov r8, r8)
 8011040:	800fffff 	.word	0x800fffff
 8011044:	00000389 	.word	0x00000389
 8011048:	000007ff 	.word	0x000007ff

0801104c <__aeabi_d2f>:
 801104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801104e:	004c      	lsls	r4, r1, #1
 8011050:	0d64      	lsrs	r4, r4, #21
 8011052:	030b      	lsls	r3, r1, #12
 8011054:	1c62      	adds	r2, r4, #1
 8011056:	0a5b      	lsrs	r3, r3, #9
 8011058:	0f46      	lsrs	r6, r0, #29
 801105a:	0552      	lsls	r2, r2, #21
 801105c:	0fc9      	lsrs	r1, r1, #31
 801105e:	431e      	orrs	r6, r3
 8011060:	00c5      	lsls	r5, r0, #3
 8011062:	0d52      	lsrs	r2, r2, #21
 8011064:	2a01      	cmp	r2, #1
 8011066:	dd29      	ble.n	80110bc <__aeabi_d2f+0x70>
 8011068:	4b37      	ldr	r3, [pc, #220]	; (8011148 <__aeabi_d2f+0xfc>)
 801106a:	18e7      	adds	r7, r4, r3
 801106c:	2ffe      	cmp	r7, #254	; 0xfe
 801106e:	dc1c      	bgt.n	80110aa <__aeabi_d2f+0x5e>
 8011070:	2f00      	cmp	r7, #0
 8011072:	dd3b      	ble.n	80110ec <__aeabi_d2f+0xa0>
 8011074:	0180      	lsls	r0, r0, #6
 8011076:	1e43      	subs	r3, r0, #1
 8011078:	4198      	sbcs	r0, r3
 801107a:	2207      	movs	r2, #7
 801107c:	00f3      	lsls	r3, r6, #3
 801107e:	0f6d      	lsrs	r5, r5, #29
 8011080:	4303      	orrs	r3, r0
 8011082:	432b      	orrs	r3, r5
 8011084:	401a      	ands	r2, r3
 8011086:	2a00      	cmp	r2, #0
 8011088:	d004      	beq.n	8011094 <__aeabi_d2f+0x48>
 801108a:	220f      	movs	r2, #15
 801108c:	401a      	ands	r2, r3
 801108e:	2a04      	cmp	r2, #4
 8011090:	d000      	beq.n	8011094 <__aeabi_d2f+0x48>
 8011092:	3304      	adds	r3, #4
 8011094:	2280      	movs	r2, #128	; 0x80
 8011096:	04d2      	lsls	r2, r2, #19
 8011098:	401a      	ands	r2, r3
 801109a:	d024      	beq.n	80110e6 <__aeabi_d2f+0x9a>
 801109c:	3701      	adds	r7, #1
 801109e:	b2fa      	uxtb	r2, r7
 80110a0:	2fff      	cmp	r7, #255	; 0xff
 80110a2:	d002      	beq.n	80110aa <__aeabi_d2f+0x5e>
 80110a4:	019b      	lsls	r3, r3, #6
 80110a6:	0a58      	lsrs	r0, r3, #9
 80110a8:	e001      	b.n	80110ae <__aeabi_d2f+0x62>
 80110aa:	22ff      	movs	r2, #255	; 0xff
 80110ac:	2000      	movs	r0, #0
 80110ae:	0240      	lsls	r0, r0, #9
 80110b0:	05d2      	lsls	r2, r2, #23
 80110b2:	0a40      	lsrs	r0, r0, #9
 80110b4:	07c9      	lsls	r1, r1, #31
 80110b6:	4310      	orrs	r0, r2
 80110b8:	4308      	orrs	r0, r1
 80110ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110bc:	4335      	orrs	r5, r6
 80110be:	2c00      	cmp	r4, #0
 80110c0:	d104      	bne.n	80110cc <__aeabi_d2f+0x80>
 80110c2:	2d00      	cmp	r5, #0
 80110c4:	d10a      	bne.n	80110dc <__aeabi_d2f+0x90>
 80110c6:	2200      	movs	r2, #0
 80110c8:	2000      	movs	r0, #0
 80110ca:	e7f0      	b.n	80110ae <__aeabi_d2f+0x62>
 80110cc:	2d00      	cmp	r5, #0
 80110ce:	d0ec      	beq.n	80110aa <__aeabi_d2f+0x5e>
 80110d0:	2080      	movs	r0, #128	; 0x80
 80110d2:	03c0      	lsls	r0, r0, #15
 80110d4:	4330      	orrs	r0, r6
 80110d6:	22ff      	movs	r2, #255	; 0xff
 80110d8:	e7e9      	b.n	80110ae <__aeabi_d2f+0x62>
 80110da:	2400      	movs	r4, #0
 80110dc:	2300      	movs	r3, #0
 80110de:	025b      	lsls	r3, r3, #9
 80110e0:	0a58      	lsrs	r0, r3, #9
 80110e2:	b2e2      	uxtb	r2, r4
 80110e4:	e7e3      	b.n	80110ae <__aeabi_d2f+0x62>
 80110e6:	08db      	lsrs	r3, r3, #3
 80110e8:	003c      	movs	r4, r7
 80110ea:	e7f8      	b.n	80110de <__aeabi_d2f+0x92>
 80110ec:	003b      	movs	r3, r7
 80110ee:	3317      	adds	r3, #23
 80110f0:	dbf3      	blt.n	80110da <__aeabi_d2f+0x8e>
 80110f2:	2380      	movs	r3, #128	; 0x80
 80110f4:	041b      	lsls	r3, r3, #16
 80110f6:	4333      	orrs	r3, r6
 80110f8:	261e      	movs	r6, #30
 80110fa:	1bf6      	subs	r6, r6, r7
 80110fc:	2e1f      	cmp	r6, #31
 80110fe:	dd14      	ble.n	801112a <__aeabi_d2f+0xde>
 8011100:	2202      	movs	r2, #2
 8011102:	4252      	negs	r2, r2
 8011104:	1bd7      	subs	r7, r2, r7
 8011106:	001a      	movs	r2, r3
 8011108:	40fa      	lsrs	r2, r7
 801110a:	0017      	movs	r7, r2
 801110c:	2e20      	cmp	r6, #32
 801110e:	d004      	beq.n	801111a <__aeabi_d2f+0xce>
 8011110:	4a0e      	ldr	r2, [pc, #56]	; (801114c <__aeabi_d2f+0x100>)
 8011112:	4694      	mov	ip, r2
 8011114:	4464      	add	r4, ip
 8011116:	40a3      	lsls	r3, r4
 8011118:	431d      	orrs	r5, r3
 801111a:	002b      	movs	r3, r5
 801111c:	1e5d      	subs	r5, r3, #1
 801111e:	41ab      	sbcs	r3, r5
 8011120:	2207      	movs	r2, #7
 8011122:	433b      	orrs	r3, r7
 8011124:	401a      	ands	r2, r3
 8011126:	2700      	movs	r7, #0
 8011128:	e7ad      	b.n	8011086 <__aeabi_d2f+0x3a>
 801112a:	4a09      	ldr	r2, [pc, #36]	; (8011150 <__aeabi_d2f+0x104>)
 801112c:	0028      	movs	r0, r5
 801112e:	18a2      	adds	r2, r4, r2
 8011130:	4095      	lsls	r5, r2
 8011132:	4093      	lsls	r3, r2
 8011134:	1e6c      	subs	r4, r5, #1
 8011136:	41a5      	sbcs	r5, r4
 8011138:	40f0      	lsrs	r0, r6
 801113a:	2207      	movs	r2, #7
 801113c:	432b      	orrs	r3, r5
 801113e:	4303      	orrs	r3, r0
 8011140:	401a      	ands	r2, r3
 8011142:	2700      	movs	r7, #0
 8011144:	e79f      	b.n	8011086 <__aeabi_d2f+0x3a>
 8011146:	46c0      	nop			; (mov r8, r8)
 8011148:	fffffc80 	.word	0xfffffc80
 801114c:	fffffca2 	.word	0xfffffca2
 8011150:	fffffc82 	.word	0xfffffc82

08011154 <__clzdi2>:
 8011154:	b510      	push	{r4, lr}
 8011156:	2900      	cmp	r1, #0
 8011158:	d103      	bne.n	8011162 <__clzdi2+0xe>
 801115a:	f7fd fcdd 	bl	800eb18 <__clzsi2>
 801115e:	3020      	adds	r0, #32
 8011160:	e002      	b.n	8011168 <__clzdi2+0x14>
 8011162:	1c08      	adds	r0, r1, #0
 8011164:	f7fd fcd8 	bl	800eb18 <__clzsi2>
 8011168:	bd10      	pop	{r4, pc}
 801116a:	46c0      	nop			; (mov r8, r8)

0801116c <strlen>:
 801116c:	2300      	movs	r3, #0
 801116e:	5cc2      	ldrb	r2, [r0, r3]
 8011170:	3301      	adds	r3, #1
 8011172:	2a00      	cmp	r2, #0
 8011174:	d1fb      	bne.n	801116e <strlen+0x2>
 8011176:	1e58      	subs	r0, r3, #1
 8011178:	4770      	bx	lr
	...

0801117c <main>:
{
 801117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801117e:	46de      	mov	lr, fp
 8011180:	464e      	mov	r6, r9
 8011182:	4645      	mov	r5, r8
 8011184:	4657      	mov	r7, sl
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011186:	2380      	movs	r3, #128	; 0x80
 8011188:	b5e0      	push	{r5, r6, r7, lr}
 801118a:	4dee      	ldr	r5, [pc, #952]	; (8011544 <main+0x3c8>)
 801118c:	005b      	lsls	r3, r3, #1
 801118e:	682a      	ldr	r2, [r5, #0]
 8011190:	b0a9      	sub	sp, #164	; 0xa4
 8011192:	4313      	orrs	r3, r2
 8011194:	602b      	str	r3, [r5, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011196:	2000      	movs	r0, #0
 8011198:	f7f9 fff0 	bl	800b17c <HAL_InitTick>
 801119c:	4eea      	ldr	r6, [pc, #936]	; (8011548 <main+0x3cc>)
 801119e:	2800      	cmp	r0, #0
 80111a0:	d116      	bne.n	80111d0 <main+0x54>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80111a2:	2101      	movs	r1, #1
 80111a4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80111a6:	430a      	orrs	r2, r1
 80111a8:	6432      	str	r2, [r6, #64]	; 0x40
 80111aa:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80111ac:	400b      	ands	r3, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80111ae:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80111b0:	9310      	str	r3, [sp, #64]	; 0x40
 80111b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 80111b4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 80111b6:	0549      	lsls	r1, r1, #21
 80111b8:	430a      	orrs	r2, r1
 80111ba:	63f2      	str	r2, [r6, #60]	; 0x3c
 80111bc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 80111be:	4ae3      	ldr	r2, [pc, #908]	; (801154c <main+0x3d0>)
 80111c0:	400b      	ands	r3, r1
 80111c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80111c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111c6:	23c0      	movs	r3, #192	; 0xc0
 80111c8:	6811      	ldr	r1, [r2, #0]
 80111ca:	00db      	lsls	r3, r3, #3
 80111cc:	430b      	orrs	r3, r1
 80111ce:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 80111d0:	f7f1 f94a 	bl	8002468 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111d4:	2210      	movs	r2, #16
 80111d6:	2100      	movs	r1, #0
 80111d8:	a81b      	add	r0, sp, #108	; 0x6c
 80111da:	f001 fe3f 	bl	8012e5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80111de:	2201      	movs	r2, #1
 80111e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80111e2:	4690      	mov	r8, r2
 80111e4:	4313      	orrs	r3, r2
 80111e6:	6373      	str	r3, [r6, #52]	; 0x34
 80111e8:	6b73      	ldr	r3, [r6, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111ea:	ac1a      	add	r4, sp, #104	; 0x68
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80111ec:	4013      	ands	r3, r2
 80111ee:	930e      	str	r3, [sp, #56]	; 0x38
 80111f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80111f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80111f4:	1892      	adds	r2, r2, r2
 80111f6:	4313      	orrs	r3, r2
 80111f8:	6373      	str	r3, [r6, #52]	; 0x34
 80111fa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80111fc:	4692      	mov	sl, r2
 80111fe:	4013      	ands	r3, r2
 8011200:	930d      	str	r3, [sp, #52]	; 0x34
 8011202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011204:	23a0      	movs	r3, #160	; 0xa0
 8011206:	05db      	lsls	r3, r3, #23
 8011208:	469b      	mov	fp, r3
 801120a:	2388      	movs	r3, #136	; 0x88
 801120c:	465a      	mov	r2, fp
 801120e:	005b      	lsls	r3, r3, #1
 8011210:	6293      	str	r3, [r2, #40]	; 0x28
 8011212:	4bcf      	ldr	r3, [pc, #828]	; (8011550 <main+0x3d4>)

  /*Configure GPIO pins : MISC_GPIO2_Pin MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011214:	4658      	mov	r0, fp
 8011216:	4699      	mov	r9, r3
 8011218:	464a      	mov	r2, r9
 801121a:	4bce      	ldr	r3, [pc, #824]	; (8011554 <main+0x3d8>)
 801121c:	0021      	movs	r1, r4
 801121e:	6293      	str	r3, [r2, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011220:	4652      	mov	r2, sl
 8011222:	464b      	mov	r3, r9
 8011224:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 8011226:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011228:	60a2      	str	r2, [r4, #8]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 801122a:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801122c:	f7fa faaa 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_INT_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011230:	4641      	mov	r1, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011232:	2700      	movs	r7, #0
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 8011234:	2210      	movs	r2, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011236:	2303      	movs	r3, #3
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8011238:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801123a:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 801123c:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 801123e:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011240:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011242:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8011244:	f7fa fa9e 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N_Pin PMU_ENABLE_Pin PS_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011248:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 801124a:	4bc3      	ldr	r3, [pc, #780]	; (8011558 <main+0x3dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801124c:	6061      	str	r1, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801124e:	4648      	mov	r0, r9
 8011250:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 8011252:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011254:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011256:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011258:	f7fa fa94 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADDRESS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801125c:	4651      	mov	r1, sl
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 801125e:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011260:	60a1      	str	r1, [r4, #8]
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8011262:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011264:	0021      	movs	r1, r4
 8011266:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8011268:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801126a:	6067      	str	r7, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801126c:	f7fa fa8a 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011270:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8011272:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011274:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8011276:	005b      	lsls	r3, r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011278:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 801127a:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 801127c:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801127e:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011280:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011282:	f7fa fa7f 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8011286:	2308      	movs	r3, #8
 8011288:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801128a:	4bb4      	ldr	r3, [pc, #720]	; (801155c <main+0x3e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 801128c:	0021      	movs	r1, r4
 801128e:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011290:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011292:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8011294:	f7fa fa76 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_CTRL_Pin */
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8011298:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801129a:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 801129c:	921a      	str	r2, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801129e:	4642      	mov	r2, r8
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 80112a0:	0021      	movs	r1, r4
 80112a2:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80112a4:	6062      	str	r2, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80112a6:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80112a8:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 80112aa:	f7fa fa6b 	bl	800b784 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 80112ae:	2320      	movs	r3, #32
 80112b0:	931a      	str	r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80112b2:	4bab      	ldr	r3, [pc, #684]	; (8011560 <main+0x3e4>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 80112b4:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80112b6:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80112b8:	4653      	mov	r3, sl
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 80112ba:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80112bc:	60a3      	str	r3, [r4, #8]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 80112be:	f7fa fa61 	bl	800b784 <HAL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80112c2:	20c1      	movs	r0, #193	; 0xc1
 80112c4:	4ba7      	ldr	r3, [pc, #668]	; (8011564 <main+0x3e8>)
 80112c6:	0080      	lsls	r0, r0, #2
 80112c8:	581a      	ldr	r2, [r3, r0]
 80112ca:	49a7      	ldr	r1, [pc, #668]	; (8011568 <main+0x3ec>)
 80112cc:	400a      	ands	r2, r1
 80112ce:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112d0:	2240      	movs	r2, #64	; 0x40
 80112d2:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80112d4:	581a      	ldr	r2, [r3, r0]
 80112d6:	0212      	lsls	r2, r2, #8
 80112d8:	0a12      	lsrs	r2, r2, #8
 80112da:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112dc:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 80112de:	4640      	mov	r0, r8
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80112e4:	4302      	orrs	r2, r0
 80112e6:	63b2      	str	r2, [r6, #56]	; 0x38
 80112e8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80112ea:	4002      	ands	r2, r0
 80112ec:	920c      	str	r2, [sp, #48]	; 0x30
 80112ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80112f0:	22c2      	movs	r2, #194	; 0xc2
 80112f2:	0092      	lsls	r2, r2, #2
 80112f4:	5899      	ldr	r1, [r3, r2]
 80112f6:	489d      	ldr	r0, [pc, #628]	; (801156c <main+0x3f0>)
 80112f8:	4001      	ands	r1, r0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80112fa:	2080      	movs	r0, #128	; 0x80
 80112fc:	0080      	lsls	r0, r0, #2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80112fe:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011300:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011302:	5898      	ldr	r0, [r3, r2]
 8011304:	4998      	ldr	r1, [pc, #608]	; (8011568 <main+0x3ec>)
 8011306:	4008      	ands	r0, r1
 8011308:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801130a:	32f8      	adds	r2, #248	; 0xf8
 801130c:	601a      	str	r2, [r3, #0]
  hi2c1.Instance = I2C1;
 801130e:	4a98      	ldr	r2, [pc, #608]	; (8011570 <main+0x3f4>)
 8011310:	4693      	mov	fp, r2
 8011312:	4658      	mov	r0, fp
 8011314:	4a97      	ldr	r2, [pc, #604]	; (8011574 <main+0x3f8>)
 8011316:	63c2      	str	r2, [r0, #60]	; 0x3c
  hi2c1.Init.Timing = 0x10707DBC;
 8011318:	4a97      	ldr	r2, [pc, #604]	; (8011578 <main+0x3fc>)
 801131a:	6402      	str	r2, [r0, #64]	; 0x40
  hi2c1.Init.OwnAddress1 = 164;
 801131c:	22a4      	movs	r2, #164	; 0xa4
 801131e:	6442      	str	r2, [r0, #68]	; 0x44
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011320:	465a      	mov	r2, fp
 8011322:	4640      	mov	r0, r8
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011324:	64d7      	str	r7, [r2, #76]	; 0x4c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011326:	6490      	str	r0, [r2, #72]	; 0x48
  hi2c1.Init.OwnAddress2 = 0;
 8011328:	6517      	str	r7, [r2, #80]	; 0x50
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801132a:	6557      	str	r7, [r2, #84]	; 0x54
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801132c:	6597      	str	r7, [r2, #88]	; 0x58
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801132e:	65d7      	str	r7, [r2, #92]	; 0x5c
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011330:	327d      	adds	r2, #125	; 0x7d
 8011332:	7812      	ldrb	r2, [r2, #0]
 8011334:	9303      	str	r3, [sp, #12]
 8011336:	b2d2      	uxtb	r2, r2
 8011338:	9104      	str	r1, [sp, #16]
 801133a:	42ba      	cmp	r2, r7
 801133c:	d12c      	bne.n	8011398 <main+0x21c>
    hi2c->Lock = HAL_UNLOCKED;
 801133e:	465b      	mov	r3, fp
 8011340:	337c      	adds	r3, #124	; 0x7c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011342:	60e2      	str	r2, [r4, #12]
 8011344:	701a      	strb	r2, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011346:	4652      	mov	r2, sl
 8011348:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801134a:	0021      	movs	r1, r4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801134c:	4313      	orrs	r3, r2
 801134e:	6373      	str	r3, [r6, #52]	; 0x34
 8011350:	6b73      	ldr	r3, [r6, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011352:	60a0      	str	r0, [r4, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011354:	4013      	ands	r3, r2
 8011356:	9312      	str	r3, [sp, #72]	; 0x48
 8011358:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801135a:	23c0      	movs	r3, #192	; 0xc0
 801135c:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801135e:	3bae      	subs	r3, #174	; 0xae
 8011360:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011362:	4643      	mov	r3, r8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011364:	4648      	mov	r0, r9
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8011366:	3305      	adds	r3, #5
 8011368:	6123      	str	r3, [r4, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801136a:	f7fa fa0b 	bl	800b784 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 801136e:	2180      	movs	r1, #128	; 0x80
 8011370:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011372:	0389      	lsls	r1, r1, #14
 8011374:	430a      	orrs	r2, r1
 8011376:	63f2      	str	r2, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011378:	22c5      	movs	r2, #197	; 0xc5
 801137a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 801137c:	0092      	lsls	r2, r2, #2
 801137e:	400b      	ands	r3, r1
 8011380:	9311      	str	r3, [sp, #68]	; 0x44
 8011382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011384:	9b03      	ldr	r3, [sp, #12]
 8011386:	9903      	ldr	r1, [sp, #12]
 8011388:	589b      	ldr	r3, [r3, r2]
 801138a:	021b      	lsls	r3, r3, #8
 801138c:	0a1b      	lsrs	r3, r3, #8
 801138e:	508b      	str	r3, [r1, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011390:	2380      	movs	r3, #128	; 0x80
 8011392:	9a03      	ldr	r2, [sp, #12]
 8011394:	041b      	lsls	r3, r3, #16
 8011396:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8011398:	465b      	mov	r3, fp
 801139a:	2224      	movs	r2, #36	; 0x24
 801139c:	337d      	adds	r3, #125	; 0x7d
 801139e:	701a      	strb	r2, [r3, #0]
  __HAL_I2C_DISABLE(hi2c);
 80113a0:	465b      	mov	r3, fp
 80113a2:	2101      	movs	r1, #1
 80113a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113a6:	681a      	ldr	r2, [r3, #0]
 80113a8:	438a      	bics	r2, r1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80113aa:	4659      	mov	r1, fp
  __HAL_I2C_DISABLE(hi2c);
 80113ac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80113ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80113b0:	4a72      	ldr	r2, [pc, #456]	; (801157c <main+0x400>)
 80113b2:	400a      	ands	r2, r1
 80113b4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80113b6:	6899      	ldr	r1, [r3, #8]
 80113b8:	4a71      	ldr	r2, [pc, #452]	; (8011580 <main+0x404>)
 80113ba:	4011      	ands	r1, r2
 80113bc:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80113be:	4659      	mov	r1, fp
 80113c0:	6c88      	ldr	r0, [r1, #72]	; 0x48
 80113c2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80113c4:	468c      	mov	ip, r1
 80113c6:	2801      	cmp	r0, #1
 80113c8:	d000      	beq.n	80113cc <main+0x250>
 80113ca:	e3ea      	b.n	8011ba2 <main+0xa26>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80113cc:	2180      	movs	r1, #128	; 0x80
 80113ce:	4660      	mov	r0, ip
 80113d0:	0209      	lsls	r1, r1, #8
 80113d2:	4301      	orrs	r1, r0
 80113d4:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80113d6:	6858      	ldr	r0, [r3, #4]
 80113d8:	496a      	ldr	r1, [pc, #424]	; (8011584 <main+0x408>)
  hi2c->State = HAL_I2C_STATE_READY;
 80113da:	2720      	movs	r7, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80113dc:	4301      	orrs	r1, r0
 80113de:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80113e0:	68d9      	ldr	r1, [r3, #12]
 80113e2:	400a      	ands	r2, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80113e4:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80113e6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80113e8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80113ea:	6d09      	ldr	r1, [r1, #80]	; 0x50
 80113ec:	430a      	orrs	r2, r1
 80113ee:	4659      	mov	r1, fp
 80113f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80113f2:	0209      	lsls	r1, r1, #8
 80113f4:	430a      	orrs	r2, r1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80113f6:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80113f8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80113fa:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80113fc:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 80113fe:	430a      	orrs	r2, r1
 8011400:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8011402:	2201      	movs	r2, #1
 8011404:	6819      	ldr	r1, [r3, #0]
 8011406:	4311      	orrs	r1, r2
 8011408:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801140a:	4659      	mov	r1, fp
 801140c:	1d08      	adds	r0, r1, #4
 801140e:	2100      	movs	r1, #0
 8011410:	67c1      	str	r1, [r0, #124]	; 0x7c
  hi2c->State = HAL_I2C_STATE_READY;
 8011412:	4658      	mov	r0, fp
 8011414:	307d      	adds	r0, #125	; 0x7d
 8011416:	7007      	strb	r7, [r0, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8011418:	465f      	mov	r7, fp
 801141a:	66f9      	str	r1, [r7, #108]	; 0x6c
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801141c:	277e      	movs	r7, #126	; 0x7e
 801141e:	445f      	add	r7, fp
 8011420:	7039      	strb	r1, [r7, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011422:	7807      	ldrb	r7, [r0, #0]
 8011424:	b2ff      	uxtb	r7, r7
 8011426:	46bc      	mov	ip, r7
 8011428:	2f20      	cmp	r7, #32
 801142a:	d11c      	bne.n	8011466 <main+0x2ea>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801142c:	375c      	adds	r7, #92	; 0x5c
 801142e:	445f      	add	r7, fp
 8011430:	46b9      	mov	r9, r7
 8011432:	783f      	ldrb	r7, [r7, #0]
 8011434:	4297      	cmp	r7, r2
 8011436:	d016      	beq.n	8011466 <main+0x2ea>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011438:	2724      	movs	r7, #36	; 0x24
 801143a:	7007      	strb	r7, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801143c:	681f      	ldr	r7, [r3, #0]
 801143e:	4397      	bics	r7, r2
 8011440:	601f      	str	r7, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011442:	681f      	ldr	r7, [r3, #0]
 8011444:	46b8      	mov	r8, r7
 8011446:	4f50      	ldr	r7, [pc, #320]	; (8011588 <main+0x40c>)
 8011448:	46ba      	mov	sl, r7
 801144a:	4647      	mov	r7, r8
 801144c:	4652      	mov	r2, sl
 801144e:	4017      	ands	r7, r2
 8011450:	601f      	str	r7, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

    __HAL_I2C_ENABLE(hi2c);
 8011452:	2701      	movs	r7, #1
    hi2c->Instance->CR1 |= AnalogFilter;
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	433a      	orrs	r2, r7
 801145c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801145e:	4662      	mov	r2, ip
 8011460:	7002      	strb	r2, [r0, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011462:	464a      	mov	r2, r9
 8011464:	7011      	strb	r1, [r2, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011466:	4658      	mov	r0, fp
 8011468:	307d      	adds	r0, #125	; 0x7d
 801146a:	7801      	ldrb	r1, [r0, #0]
 801146c:	b2c9      	uxtb	r1, r1
 801146e:	2920      	cmp	r1, #32
 8011470:	d11e      	bne.n	80114b0 <main+0x334>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011472:	227c      	movs	r2, #124	; 0x7c
 8011474:	445a      	add	r2, fp
 8011476:	4690      	mov	r8, r2
 8011478:	7812      	ldrb	r2, [r2, #0]
 801147a:	2a01      	cmp	r2, #1
 801147c:	d018      	beq.n	80114b0 <main+0x334>

    hi2c->State = HAL_I2C_STATE_BUSY;
 801147e:	2224      	movs	r2, #36	; 0x24
 8011480:	7002      	strb	r2, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	4694      	mov	ip, r2
 8011486:	2201      	movs	r2, #1
 8011488:	4667      	mov	r7, ip
 801148a:	4397      	bics	r7, r2
 801148c:	601f      	str	r7, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801148e:	681f      	ldr	r7, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);
 8011490:	4692      	mov	sl, r2
    tmpreg = hi2c->Instance->CR1;
 8011492:	46bc      	mov	ip, r7

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011494:	4f3d      	ldr	r7, [pc, #244]	; (801158c <main+0x410>)
 8011496:	46b9      	mov	r9, r7
 8011498:	4667      	mov	r7, ip
 801149a:	464a      	mov	r2, r9
 801149c:	4017      	ands	r7, r2

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801149e:	601f      	str	r7, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80114a0:	4657      	mov	r7, sl
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	4317      	orrs	r7, r2
 80114a6:	601f      	str	r7, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80114a8:	4642      	mov	r2, r8
 80114aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80114ac:	7001      	strb	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80114ae:	7013      	strb	r3, [r2, #0]
  RTC_TimeTypeDef sTime = {0};
 80114b0:	2214      	movs	r2, #20
 80114b2:	2100      	movs	r1, #0
 80114b4:	a815      	add	r0, sp, #84	; 0x54
 80114b6:	f001 fcd1 	bl	8012e5c <memset>
  RTC_DateTypeDef sDate = {0};
 80114ba:	2300      	movs	r3, #0
 80114bc:	4699      	mov	r9, r3
  RTC_AlarmTypeDef sAlarm = {0};
 80114be:	0019      	movs	r1, r3
 80114c0:	2228      	movs	r2, #40	; 0x28
 80114c2:	0020      	movs	r0, r4
  RTC_DateTypeDef sDate = {0};
 80114c4:	9314      	str	r3, [sp, #80]	; 0x50
  RTC_AlarmTypeDef sAlarm = {0};
 80114c6:	f001 fcc9 	bl	8012e5c <memset>
  hrtc.Instance = RTC;
 80114ca:	4b31      	ldr	r3, [pc, #196]	; (8011590 <main+0x414>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80114cc:	4649      	mov	r1, r9
  hrtc.Instance = RTC;
 80114ce:	4698      	mov	r8, r3
 80114d0:	4a30      	ldr	r2, [pc, #192]	; (8011594 <main+0x418>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80114d2:	6099      	str	r1, [r3, #8]
  hrtc.Instance = RTC;
 80114d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = 31;
 80114d6:	4641      	mov	r1, r8
 80114d8:	231f      	movs	r3, #31
 80114da:	60cb      	str	r3, [r1, #12]
  hrtc.Init.SynchPrediv = 999;
 80114dc:	4b2e      	ldr	r3, [pc, #184]	; (8011598 <main+0x41c>)
 80114de:	610b      	str	r3, [r1, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80114e0:	4643      	mov	r3, r8
 80114e2:	4649      	mov	r1, r9
 80114e4:	6159      	str	r1, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80114e6:	6199      	str	r1, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80114e8:	61d9      	str	r1, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80114ea:	2380      	movs	r3, #128	; 0x80
 80114ec:	4641      	mov	r1, r8
 80114ee:	05db      	lsls	r3, r3, #23
 80114f0:	620b      	str	r3, [r1, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80114f2:	4643      	mov	r3, r8
 80114f4:	4649      	mov	r1, r9
 80114f6:	6259      	str	r1, [r3, #36]	; 0x24
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80114f8:	3329      	adds	r3, #41	; 0x29
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	454b      	cmp	r3, r9
 8011500:	d14c      	bne.n	801159c <main+0x420>
    hrtc->Lock = HAL_UNLOCKED;
 8011502:	4641      	mov	r1, r8
 8011504:	3128      	adds	r1, #40	; 0x28
 8011506:	700b      	strb	r3, [r1, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8011508:	2388      	movs	r3, #136	; 0x88
 801150a:	4641      	mov	r1, r8
 801150c:	021b      	lsls	r3, r3, #8
 801150e:	604b      	str	r3, [r1, #4]
    __HAL_RCC_RTC_ENABLE();
 8011510:	2380      	movs	r3, #128	; 0x80
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8011512:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8011514:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	430b      	orrs	r3, r1
 801151a:	65f3      	str	r3, [r6, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801151c:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 801151e:	00c0      	lsls	r0, r0, #3
 8011520:	4301      	orrs	r1, r0
 8011522:	63f1      	str	r1, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011524:	21c0      	movs	r1, #192	; 0xc0
 8011526:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8011528:	0089      	lsls	r1, r1, #2
 801152a:	4003      	ands	r3, r0
 801152c:	9313      	str	r3, [sp, #76]	; 0x4c
 801152e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011530:	9b03      	ldr	r3, [sp, #12]
 8011532:	480d      	ldr	r0, [pc, #52]	; (8011568 <main+0x3ec>)
 8011534:	585b      	ldr	r3, [r3, r1]
 8011536:	4003      	ands	r3, r0
 8011538:	9803      	ldr	r0, [sp, #12]
 801153a:	5043      	str	r3, [r0, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801153c:	2304      	movs	r3, #4
 801153e:	9903      	ldr	r1, [sp, #12]
 8011540:	600b      	str	r3, [r1, #0]
 8011542:	e02b      	b.n	801159c <main+0x420>
 8011544:	40022000 	.word	0x40022000
 8011548:	40021000 	.word	0x40021000
 801154c:	40010000 	.word	0x40010000
 8011550:	50000400 	.word	0x50000400
 8011554:	00000211 	.word	0x00000211
 8011558:	00000203 	.word	0x00000203
 801155c:	10110000 	.word	0x10110000
 8011560:	10310000 	.word	0x10310000
 8011564:	e000e100 	.word	0xe000e100
 8011568:	ff00ffff 	.word	0xff00ffff
 801156c:	ffff00ff 	.word	0xffff00ff
 8011570:	2000020c 	.word	0x2000020c
 8011574:	40005400 	.word	0x40005400
 8011578:	10707dbc 	.word	0x10707dbc
 801157c:	f0ffffff 	.word	0xf0ffffff
 8011580:	ffff7fff 	.word	0xffff7fff
 8011584:	02008000 	.word	0x02008000
 8011588:	ffffefff 	.word	0xffffefff
 801158c:	fffff0ff 	.word	0xfffff0ff
 8011590:	200003c0 	.word	0x200003c0
 8011594:	40002800 	.word	0x40002800
 8011598:	000003e7 	.word	0x000003e7
    hrtc->State = HAL_RTC_STATE_BUSY;
 801159c:	4643      	mov	r3, r8
 801159e:	2102      	movs	r1, #2
 80115a0:	3329      	adds	r3, #41	; 0x29
 80115a2:	7019      	strb	r1, [r3, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115a4:	23ca      	movs	r3, #202	; 0xca
 80115a6:	6253      	str	r3, [r2, #36]	; 0x24
 80115a8:	3b77      	subs	r3, #119	; 0x77
 80115aa:	6253      	str	r3, [r2, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80115ac:	f7f9 f9b6 	bl	800a91c <RTC_EnterInitMode.constprop.109>
    if(status == HAL_OK)
 80115b0:	2800      	cmp	r0, #0
 80115b2:	d12c      	bne.n	801160e <main+0x492>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80115b4:	4643      	mov	r3, r8
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80115b6:	4640      	mov	r0, r8
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	49ef      	ldr	r1, [pc, #956]	; (8011978 <main+0x7fc>)
 80115bc:	699a      	ldr	r2, [r3, #24]
 80115be:	400a      	ands	r2, r1
 80115c0:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80115c2:	6882      	ldr	r2, [r0, #8]
 80115c4:	6940      	ldr	r0, [r0, #20]
 80115c6:	6999      	ldr	r1, [r3, #24]
 80115c8:	4302      	orrs	r2, r0
 80115ca:	4640      	mov	r0, r8
 80115cc:	69c0      	ldr	r0, [r0, #28]
 80115ce:	4302      	orrs	r2, r0
 80115d0:	430a      	orrs	r2, r1
 80115d2:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80115d4:	4642      	mov	r2, r8
 80115d6:	6912      	ldr	r2, [r2, #16]
 80115d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80115da:	4642      	mov	r2, r8
 80115dc:	68d2      	ldr	r2, [r2, #12]
 80115de:	6919      	ldr	r1, [r3, #16]
 80115e0:	0412      	lsls	r2, r2, #16
 80115e2:	430a      	orrs	r2, r1
 80115e4:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 80115e6:	f7f9 f971 	bl	800a8cc <RTC_ExitInitMode.constprop.110>
      if (status == HAL_OK)
 80115ea:	2800      	cmp	r0, #0
 80115ec:	d10f      	bne.n	801160e <main+0x492>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80115ee:	4643      	mov	r3, r8
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80115f0:	4647      	mov	r7, r8
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	6993      	ldr	r3, [r2, #24]
 80115f6:	00db      	lsls	r3, r3, #3
 80115f8:	08db      	lsrs	r3, r3, #3
 80115fa:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80115fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fe:	6a3f      	ldr	r7, [r7, #32]
 8011600:	6991      	ldr	r1, [r2, #24]
 8011602:	433b      	orrs	r3, r7
 8011604:	4647      	mov	r7, r8
 8011606:	69bf      	ldr	r7, [r7, #24]
 8011608:	433b      	orrs	r3, r7
 801160a:	430b      	orrs	r3, r1
 801160c:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801160e:	4643      	mov	r3, r8
 8011610:	22ff      	movs	r2, #255	; 0xff
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8011616:	2800      	cmp	r0, #0
 8011618:	d103      	bne.n	8011622 <main+0x4a6>
      hrtc->State = HAL_RTC_STATE_READY;
 801161a:	4642      	mov	r2, r8
 801161c:	2101      	movs	r1, #1
 801161e:	3229      	adds	r2, #41	; 0x29
 8011620:	7011      	strb	r1, [r2, #0]
  __HAL_LOCK(hrtc);
 8011622:	4642      	mov	r2, r8
 8011624:	3228      	adds	r2, #40	; 0x28
 8011626:	7811      	ldrb	r1, [r2, #0]
 8011628:	2901      	cmp	r1, #1
 801162a:	d030      	beq.n	801168e <main+0x512>
 801162c:	2101      	movs	r1, #1
 801162e:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8011630:	4642      	mov	r2, r8
 8011632:	1849      	adds	r1, r1, r1
 8011634:	3229      	adds	r2, #41	; 0x29
 8011636:	7011      	strb	r1, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011638:	22ca      	movs	r2, #202	; 0xca
 801163a:	625a      	str	r2, [r3, #36]	; 0x24
 801163c:	3a77      	subs	r2, #119	; 0x77
 801163e:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8011640:	f7f9 f96c 	bl	800a91c <RTC_EnterInitMode.constprop.109>
  if(status == HAL_OK)
 8011644:	2800      	cmp	r0, #0
 8011646:	d114      	bne.n	8011672 <main+0x4f6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011648:	4643      	mov	r3, r8
 801164a:	681f      	ldr	r7, [r3, #0]
 801164c:	69bb      	ldr	r3, [r7, #24]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801164e:	f7f9 fce1 	bl	800b014 <RTC_ByteToBcd2>
 8011652:	0002      	movs	r2, r0
 8011654:	0403      	lsls	r3, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011656:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011658:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801165a:	4bc8      	ldr	r3, [pc, #800]	; (801197c <main+0x800>)
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801165c:	4310      	orrs	r0, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801165e:	4018      	ands	r0, r3
 8011660:	6038      	str	r0, [r7, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011662:	69bb      	ldr	r3, [r7, #24]
 8011664:	4ac6      	ldr	r2, [pc, #792]	; (8011980 <main+0x804>)
 8011666:	4013      	ands	r3, r2
 8011668:	61bb      	str	r3, [r7, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	61bb      	str	r3, [r7, #24]
    status = RTC_ExitInitMode(hrtc);
 801166e:	f7f9 f92d 	bl	800a8cc <RTC_ExitInitMode.constprop.110>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011672:	4643      	mov	r3, r8
 8011674:	22ff      	movs	r2, #255	; 0xff
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 801167a:	2800      	cmp	r0, #0
 801167c:	d103      	bne.n	8011686 <main+0x50a>
   hrtc->State = HAL_RTC_STATE_READY;
 801167e:	4643      	mov	r3, r8
 8011680:	3afe      	subs	r2, #254	; 0xfe
 8011682:	3329      	adds	r3, #41	; 0x29
 8011684:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8011686:	4643      	mov	r3, r8
 8011688:	2200      	movs	r2, #0
 801168a:	3328      	adds	r3, #40	; 0x28
 801168c:	701a      	strb	r2, [r3, #0]
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801168e:	2202      	movs	r2, #2
  sDate.Month = RTC_MONTH_JANUARY;
 8011690:	2701      	movs	r7, #1
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8011692:	ab14      	add	r3, sp, #80	; 0x50
 8011694:	32ff      	adds	r2, #255	; 0xff
 8011696:	801a      	strh	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8011698:	709f      	strb	r7, [r3, #2]
 __HAL_LOCK(hrtc);
 801169a:	4643      	mov	r3, r8
 801169c:	3328      	adds	r3, #40	; 0x28
 801169e:	781a      	ldrb	r2, [r3, #0]
 80116a0:	42ba      	cmp	r2, r7
 80116a2:	d032      	beq.n	801170a <main+0x58e>
 80116a4:	701f      	strb	r7, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80116a6:	4643      	mov	r3, r8
 80116a8:	2202      	movs	r2, #2
 80116aa:	3329      	adds	r3, #41	; 0x29
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116ac:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80116ae:	701a      	strb	r2, [r3, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116b0:	f7f9 fcb0 	bl	800b014 <RTC_ByteToBcd2>
 80116b4:	4681      	mov	r9, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80116b6:	0038      	movs	r0, r7
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116b8:	2780      	movs	r7, #128	; 0x80
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80116ba:	f7f9 fcab 	bl	800b014 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116be:	464b      	mov	r3, r9
 80116c0:	01bf      	lsls	r7, r7, #6
 80116c2:	4307      	orrs	r7, r0
 80116c4:	041b      	lsls	r3, r3, #16
 80116c6:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116c8:	4643      	mov	r3, r8
 80116ca:	22ca      	movs	r2, #202	; 0xca
 80116cc:	681b      	ldr	r3, [r3, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80116ce:	0200      	lsls	r0, r0, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116d0:	625a      	str	r2, [r3, #36]	; 0x24
 80116d2:	3a77      	subs	r2, #119	; 0x77
 80116d4:	625a      	str	r2, [r3, #36]	; 0x24
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80116d6:	4307      	orrs	r7, r0
  status = RTC_EnterInitMode(hrtc);
 80116d8:	f7f9 f920 	bl	800a91c <RTC_EnterInitMode.constprop.109>
  if(status == HAL_OK)
 80116dc:	2800      	cmp	r0, #0
 80116de:	d106      	bne.n	80116ee <main+0x572>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80116e0:	4643      	mov	r3, r8
 80116e2:	48a8      	ldr	r0, [pc, #672]	; (8011984 <main+0x808>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	4007      	ands	r7, r0
 80116e8:	605f      	str	r7, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 80116ea:	f7f9 f8ef 	bl	800a8cc <RTC_ExitInitMode.constprop.110>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80116ee:	4643      	mov	r3, r8
 80116f0:	22ff      	movs	r2, #255	; 0xff
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d103      	bne.n	8011702 <main+0x586>
    hrtc->State = HAL_RTC_STATE_READY;
 80116fa:	4643      	mov	r3, r8
 80116fc:	3afe      	subs	r2, #254	; 0xfe
 80116fe:	3329      	adds	r3, #41	; 0x29
 8011700:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8011702:	4643      	mov	r3, r8
 8011704:	2200      	movs	r2, #0
 8011706:	3328      	adds	r3, #40	; 0x28
 8011708:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmDateWeekDay = 1;
 801170a:	2301      	movs	r3, #1
 801170c:	4699      	mov	r9, r3
 801170e:	aa08      	add	r2, sp, #32
 8011710:	4694      	mov	ip, r2
  sAlarm.AlarmTime.Hours = 0;
 8011712:	2700      	movs	r7, #0
  sAlarm.AlarmDateWeekDay = 1;
 8011714:	464a      	mov	r2, r9
 8011716:	3348      	adds	r3, #72	; 0x48
 8011718:	4463      	add	r3, ip
  sAlarm.AlarmTime.Hours = 0;
 801171a:	8027      	strh	r7, [r4, #0]
  sAlarm.AlarmTime.Minutes = 0;
 801171c:	70a7      	strb	r7, [r4, #2]
  sAlarm.AlarmDateWeekDay = 1;
 801171e:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8011720:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8011722:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	6263      	str	r3, [r4, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = 0;
 8011728:	6067      	str	r7, [r4, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801172a:	60e7      	str	r7, [r4, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801172c:	6127      	str	r7, [r4, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801172e:	6167      	str	r7, [r4, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8011730:	61a7      	str	r7, [r4, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8011732:	61e7      	str	r7, [r4, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8011734:	f7f9 fc79 	bl	800b02a <HAL_RTC_SetAlarm_IT.constprop.133>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8011738:	0039      	movs	r1, r7
 801173a:	4893      	ldr	r0, [pc, #588]	; (8011988 <main+0x80c>)
 801173c:	f7f8 ff6c 	bl	800a618 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.151>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8011740:	f7f8 ff2a 	bl	800a598 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.152>
  hspi1.Instance = SPI1;
 8011744:	4b91      	ldr	r3, [pc, #580]	; (801198c <main+0x810>)
 8011746:	4698      	mov	r8, r3
 8011748:	4642      	mov	r2, r8
 801174a:	4b91      	ldr	r3, [pc, #580]	; (8011990 <main+0x814>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801174c:	6097      	str	r7, [r2, #8]
  hspi1.Instance = SPI1;
 801174e:	6013      	str	r3, [r2, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011750:	2382      	movs	r3, #130	; 0x82
 8011752:	005b      	lsls	r3, r3, #1
 8011754:	6053      	str	r3, [r2, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011756:	23e0      	movs	r3, #224	; 0xe0
 8011758:	00db      	lsls	r3, r3, #3
 801175a:	60d3      	str	r3, [r2, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801175c:	2380      	movs	r3, #128	; 0x80
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	6193      	str	r3, [r2, #24]
  hspi1.Init.CRCPolynomial = 7;
 8011762:	2307      	movs	r3, #7
 8011764:	62d3      	str	r3, [r2, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8011766:	2308      	movs	r3, #8
 8011768:	6353      	str	r3, [r2, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_RESET)
 801176a:	4643      	mov	r3, r8
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801176c:	6117      	str	r7, [r2, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801176e:	6157      	str	r7, [r2, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011770:	61d7      	str	r7, [r2, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011772:	6217      	str	r7, [r2, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8011774:	6257      	str	r7, [r2, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011776:	6297      	str	r7, [r2, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8011778:	6317      	str	r7, [r2, #48]	; 0x30
 801177a:	335d      	adds	r3, #93	; 0x5d
 801177c:	7819      	ldrb	r1, [r3, #0]
 801177e:	b2c9      	uxtb	r1, r1
 8011780:	42b9      	cmp	r1, r7
 8011782:	d122      	bne.n	80117ca <main+0x64e>
    hspi->Lock = HAL_UNLOCKED;
 8011784:	4643      	mov	r3, r8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011786:	220c      	movs	r2, #12
 8011788:	335c      	adds	r3, #92	; 0x5c
 801178a:	a81c      	add	r0, sp, #112	; 0x70
 801178c:	7019      	strb	r1, [r3, #0]
 801178e:	f001 fb65 	bl	8012e5c <memset>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8011792:	2180      	movs	r1, #128	; 0x80
 8011794:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011796:	0149      	lsls	r1, r1, #5
 8011798:	430a      	orrs	r2, r1
 801179a:	6432      	str	r2, [r6, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801179c:	464a      	mov	r2, r9
    __HAL_RCC_SPI1_CLK_ENABLE();
 801179e:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117a0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80117a2:	400b      	ands	r3, r1
 80117a4:	9315      	str	r3, [sp, #84]	; 0x54
 80117a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117a8:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117aa:	0021      	movs	r1, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117ac:	4313      	orrs	r3, r2
 80117ae:	6373      	str	r3, [r6, #52]	; 0x34
 80117b0:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117b2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117b4:	4013      	ands	r3, r2
 80117b6:	9314      	str	r3, [sp, #80]	; 0x50
 80117b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 80117ba:	23e0      	movs	r3, #224	; 0xe0
 80117bc:	931a      	str	r3, [sp, #104]	; 0x68
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117be:	3bde      	subs	r3, #222	; 0xde
 80117c0:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80117c2:	189b      	adds	r3, r3, r2
 80117c4:	60e3      	str	r3, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117c6:	f7f9 ffdd 	bl	800b784 <HAL_GPIO_Init>
  hspi->State = HAL_SPI_STATE_BUSY;
 80117ca:	4643      	mov	r3, r8
 80117cc:	2202      	movs	r2, #2
 80117ce:	335d      	adds	r3, #93	; 0x5d
 80117d0:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_DISABLE(hspi);
 80117d2:	4643      	mov	r3, r8
 80117d4:	2140      	movs	r1, #64	; 0x40
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	6813      	ldr	r3, [r2, #0]
 80117da:	438b      	bics	r3, r1
 80117dc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80117de:	4643      	mov	r3, r8
 80117e0:	68d8      	ldr	r0, [r3, #12]
 80117e2:	23e0      	movs	r3, #224	; 0xe0
 80117e4:	00db      	lsls	r3, r3, #3
 80117e6:	4298      	cmp	r0, r3
 80117e8:	d901      	bls.n	80117ee <main+0x672>
 80117ea:	f000 feff 	bl	80125ec <main+0x1470>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80117ee:	2680      	movs	r6, #128	; 0x80
 80117f0:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80117f2:	4298      	cmp	r0, r3
 80117f4:	d002      	beq.n	80117fc <main+0x680>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80117f6:	2300      	movs	r3, #0
 80117f8:	4641      	mov	r1, r8
 80117fa:	628b      	str	r3, [r1, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80117fc:	4643      	mov	r3, r8
 80117fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011800:	2b00      	cmp	r3, #0
 8011802:	d107      	bne.n	8011814 <main+0x698>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011804:	23e0      	movs	r3, #224	; 0xe0
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	4298      	cmp	r0, r3
 801180a:	d800      	bhi.n	801180e <main+0x692>
 801180c:	e1d5      	b.n	8011bba <main+0xa3e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 801180e:	2302      	movs	r3, #2
 8011810:	4641      	mov	r1, r8
 8011812:	630b      	str	r3, [r1, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8011814:	4643      	mov	r3, r8
 8011816:	4647      	mov	r7, r8
 8011818:	6999      	ldr	r1, [r3, #24]
 801181a:	68bf      	ldr	r7, [r7, #8]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	433b      	orrs	r3, r7
 8011820:	4647      	mov	r7, r8
 8011822:	693f      	ldr	r7, [r7, #16]
 8011824:	433b      	orrs	r3, r7
 8011826:	4647      	mov	r7, r8
 8011828:	697f      	ldr	r7, [r7, #20]
 801182a:	433b      	orrs	r3, r7
 801182c:	4647      	mov	r7, r8
 801182e:	69ff      	ldr	r7, [r7, #28]
 8011830:	433b      	orrs	r3, r7
 8011832:	4647      	mov	r7, r8
 8011834:	6a3f      	ldr	r7, [r7, #32]
 8011836:	433b      	orrs	r3, r7
 8011838:	4647      	mov	r7, r8
 801183a:	6abf      	ldr	r7, [r7, #40]	; 0x28
 801183c:	433b      	orrs	r3, r7
 801183e:	2780      	movs	r7, #128	; 0x80
 8011840:	00bf      	lsls	r7, r7, #2
 8011842:	400f      	ands	r7, r1
 8011844:	433b      	orrs	r3, r7
 8011846:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8011848:	4643      	mov	r3, r8
 801184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801184c:	0c09      	lsrs	r1, r1, #16
 801184e:	4318      	orrs	r0, r3
 8011850:	4643      	mov	r3, r8
 8011852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011854:	2700      	movs	r7, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8011856:	4318      	orrs	r0, r3
 8011858:	2304      	movs	r3, #4
 801185a:	4019      	ands	r1, r3
 801185c:	4301      	orrs	r1, r0
 801185e:	430e      	orrs	r6, r1
 8011860:	6056      	str	r6, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011862:	69d3      	ldr	r3, [r2, #28]
 8011864:	494b      	ldr	r1, [pc, #300]	; (8011994 <main+0x818>)
  MX_USART1_UART_Init(115200);
 8011866:	20e1      	movs	r0, #225	; 0xe1
 8011868:	400b      	ands	r3, r1
 801186a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801186c:	4643      	mov	r3, r8
  hspi->State     = HAL_SPI_STATE_READY;
 801186e:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011870:	661f      	str	r7, [r3, #96]	; 0x60
 8011872:	0240      	lsls	r0, r0, #9
  hspi->State     = HAL_SPI_STATE_READY;
 8011874:	335d      	adds	r3, #93	; 0x5d
 8011876:	701a      	strb	r2, [r3, #0]
 8011878:	4691      	mov	r9, r2
 801187a:	f7f0 fd3d 	bl	80022f8 <MX_USART1_UART_Init>
  huart2.Instance = USART2;
 801187e:	4e46      	ldr	r6, [pc, #280]	; (8011998 <main+0x81c>)
 8011880:	4b46      	ldr	r3, [pc, #280]	; (801199c <main+0x820>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011882:	0030      	movs	r0, r6
  huart2.Instance = USART2;
 8011884:	6033      	str	r3, [r6, #0]
  huart2.Init.BaudRate = 921600;
 8011886:	23e1      	movs	r3, #225	; 0xe1
 8011888:	031b      	lsls	r3, r3, #12
 801188a:	6073      	str	r3, [r6, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801188c:	230c      	movs	r3, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801188e:	60b7      	str	r7, [r6, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011890:	6173      	str	r3, [r6, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011892:	60f7      	str	r7, [r6, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011894:	6137      	str	r7, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011896:	61b7      	str	r7, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011898:	61f7      	str	r7, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801189a:	6237      	str	r7, [r6, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801189c:	6277      	str	r7, [r6, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801189e:	62b7      	str	r7, [r6, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80118a0:	f7fa f852 	bl	800b948 <HAL_UART_Init.constprop.98>
  __HAL_LOCK(huart);
 80118a4:	237c      	movs	r3, #124	; 0x7c
 80118a6:	4698      	mov	r8, r3
 80118a8:	44b0      	add	r8, r6
 80118aa:	4643      	mov	r3, r8
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	454b      	cmp	r3, r9
 80118b0:	d01d      	beq.n	80118ee <main+0x772>
 80118b2:	4643      	mov	r3, r8
 80118b4:	464a      	mov	r2, r9
 80118b6:	701a      	strb	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80118b8:	1d33      	adds	r3, r6, #4
 80118ba:	469a      	mov	sl, r3
 80118bc:	2324      	movs	r3, #36	; 0x24
 80118be:	4652      	mov	r2, sl
  __HAL_UART_DISABLE(huart);
 80118c0:	4649      	mov	r1, r9
  huart->gState = HAL_UART_STATE_BUSY;
 80118c2:	67d3      	str	r3, [r2, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118c4:	6832      	ldr	r2, [r6, #0]
  UARTEx_SetNbDataToProcess(huart);
 80118c6:	0030      	movs	r0, r6
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80118c8:	6813      	ldr	r3, [r2, #0]
 80118ca:	9303      	str	r3, [sp, #12]
  __HAL_UART_DISABLE(huart);
 80118cc:	6813      	ldr	r3, [r2, #0]
 80118ce:	438b      	bics	r3, r1
 80118d0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80118d2:	6893      	ldr	r3, [r2, #8]
 80118d4:	00db      	lsls	r3, r3, #3
 80118d6:	08db      	lsrs	r3, r3, #3
 80118d8:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80118da:	f7f9 fad5 	bl	800ae88 <UARTEx_SetNbDataToProcess.lto_priv.675>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118de:	6833      	ldr	r3, [r6, #0]
 80118e0:	9a03      	ldr	r2, [sp, #12]
 80118e2:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80118e4:	2320      	movs	r3, #32
 80118e6:	4652      	mov	r2, sl
 80118e8:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 80118ea:	4643      	mov	r3, r8
 80118ec:	701f      	strb	r7, [r3, #0]
  __HAL_LOCK(huart);
 80118ee:	0037      	movs	r7, r6
 80118f0:	377c      	adds	r7, #124	; 0x7c
 80118f2:	783b      	ldrb	r3, [r7, #0]
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d01b      	beq.n	8011930 <main+0x7b4>
  huart->gState = HAL_UART_STATE_BUSY;
 80118f8:	1d33      	adds	r3, r6, #4
 80118fa:	4698      	mov	r8, r3
 80118fc:	2324      	movs	r3, #36	; 0x24
 80118fe:	4642      	mov	r2, r8
  __HAL_LOCK(huart);
 8011900:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8011902:	67d3      	str	r3, [r2, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011904:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(huart);
 8011906:	7039      	strb	r1, [r7, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011908:	6813      	ldr	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 801190a:	0030      	movs	r0, r6
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801190c:	4699      	mov	r9, r3
  __HAL_UART_DISABLE(huart);
 801190e:	6813      	ldr	r3, [r2, #0]
 8011910:	438b      	bics	r3, r1
 8011912:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011914:	6893      	ldr	r3, [r2, #8]
 8011916:	4922      	ldr	r1, [pc, #136]	; (80119a0 <main+0x824>)
 8011918:	400b      	ands	r3, r1
 801191a:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 801191c:	f7f9 fab4 	bl	800ae88 <UARTEx_SetNbDataToProcess.lto_priv.675>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011920:	464a      	mov	r2, r9
 8011922:	6833      	ldr	r3, [r6, #0]
 8011924:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8011926:	2320      	movs	r3, #32
 8011928:	4642      	mov	r2, r8
 801192a:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 801192c:	2300      	movs	r3, #0
 801192e:	703b      	strb	r3, [r7, #0]
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8011930:	0030      	movs	r0, r6
 8011932:	f7f9 fadd 	bl	800aef0 <HAL_UARTEx_DisableFifoMode>
  FLASH_OBProgramInitTypeDef obInit = {0};
 8011936:	2300      	movs	r3, #0
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
  }
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8011938:	213f      	movs	r1, #63	; 0x3f
 801193a:	6063      	str	r3, [r4, #4]
  pOBInit->OptionType = OPTIONBYTE_ALL;
 801193c:	331f      	adds	r3, #31
 801193e:	931a      	str	r3, [sp, #104]	; 0x68
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8011940:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011942:	400a      	ands	r2, r1
 8011944:	921c      	str	r2, [sp, #112]	; 0x70
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8011946:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011948:	0c1b      	lsrs	r3, r3, #16
 801194a:	400b      	ands	r3, r1
 801194c:	931d      	str	r3, [sp, #116]	; 0x74
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 801194e:	6a2b      	ldr	r3, [r5, #32]
 8011950:	b2db      	uxtb	r3, r3

  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8011952:	2baa      	cmp	r3, #170	; 0xaa
 8011954:	d002      	beq.n	801195c <main+0x7e0>
 8011956:	2bcc      	cmp	r3, #204	; 0xcc
 8011958:	d000      	beq.n	801195c <main+0x7e0>
  {
    return (OB_RDP_LEVEL_1);
 801195a:	23bb      	movs	r3, #187	; 0xbb
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 801195c:	6123      	str	r3, [r4, #16]
  *         @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 801195e:	6a2e      	ldr	r6, [r5, #32]
 8011960:	4b10      	ldr	r3, [pc, #64]	; (80119a4 <main+0x828>)
 8011962:	0032      	movs	r2, r6
 8011964:	401a      	ands	r2, r3
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8011966:	61a2      	str	r2, [r4, #24]
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AStartAddr += FLASH_BASE;
 8011968:	2280      	movs	r2, #128	; 0x80
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 801196a:	20ff      	movs	r0, #255	; 0xff
  *PCROP1AStartAddr += FLASH_BASE;
 801196c:	0512      	lsls	r2, r2, #20
 801196e:	4694      	mov	ip, r2
  pOBInit->USERType = OB_USER_ALL;
 8011970:	6163      	str	r3, [r4, #20]
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 8011972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011974:	e018      	b.n	80119a8 <main+0x82c>
 8011976:	46c0      	nop			; (mov r8, r8)
 8011978:	fb8fffbf 	.word	0xfb8fffbf
 801197c:	007f7f7f 	.word	0x007f7f7f
 8011980:	fffbffff 	.word	0xfffbffff
 8011984:	00ffff3f 	.word	0x00ffff3f
 8011988:	0000ffff 	.word	0x0000ffff
 801198c:	20000428 	.word	0x20000428
 8011990:	40013000 	.word	0x40013000
 8011994:	fffff7ff 	.word	0xfffff7ff
 8011998:	20000640 	.word	0x20000640
 801199c:	40004400 	.word	0x40004400
 80119a0:	f1ffffff 	.word	0xf1ffffff
 80119a4:	3f4fff00 	.word	0x3f4fff00
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80119a8:	0240      	lsls	r0, r0, #9

  pcrop = FLASH->PCROP1AER;
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119aa:	4ab6      	ldr	r2, [pc, #728]	; (8011c84 <main+0xb08>)
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80119ac:	025b      	lsls	r3, r3, #9
 80119ae:	4003      	ands	r3, r0
  *PCROP1AStartAddr += FLASH_BASE;
 80119b0:	4463      	add	r3, ip
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119b2:	4694      	mov	ip, r2
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BStartAddr += FLASH_BASE;
 80119b4:	2280      	movs	r2, #128	; 0x80
  *PCROP1AStartAddr += FLASH_BASE;
 80119b6:	9322      	str	r3, [sp, #136]	; 0x88
  pcrop = FLASH->PCROP1AER;
 80119b8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  *PCROP1BStartAddr += FLASH_BASE;
 80119ba:	0512      	lsls	r2, r2, #20
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 80119bc:	024b      	lsls	r3, r1, #9
 80119be:	4003      	ands	r3, r0
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119c0:	4463      	add	r3, ip
  *PCROP1BStartAddr += FLASH_BASE;
 80119c2:	4694      	mov	ip, r2
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119c4:	9323      	str	r3, [sp, #140]	; 0x8c
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 80119c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 80119c8:	0fc9      	lsrs	r1, r1, #31
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80119ca:	025b      	lsls	r3, r3, #9
 80119cc:	4003      	ands	r3, r0
  *PCROP1BStartAddr += FLASH_BASE;
 80119ce:	4463      	add	r3, ip
 80119d0:	9324      	str	r3, [sp, #144]	; 0x90

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119d2:	4bac      	ldr	r3, [pc, #688]	; (8011c84 <main+0xb08>)
  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 80119d4:	6baa      	ldr	r2, [r5, #56]	; 0x38
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119d6:	469c      	mov	ip, r3
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80119d8:	0252      	lsls	r2, r2, #9
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 80119da:	2303      	movs	r3, #3
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 80119dc:	4002      	ands	r2, r0
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 80119de:	4462      	add	r2, ip
 80119e0:	9225      	str	r2, [sp, #148]	; 0x94
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
  uint32_t secmem = FLASH->SECR;

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 80119e2:	2280      	movs	r2, #128	; 0x80
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 80119e4:	07c9      	lsls	r1, r1, #31
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 80119e6:	4319      	orrs	r1, r3
  uint32_t secmem = FLASH->SECR;
 80119e8:	4ba7      	ldr	r3, [pc, #668]	; (8011c88 <main+0xb0c>)
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 80119ea:	61e1      	str	r1, [r4, #28]
  uint32_t secmem = FLASH->SECR;
 80119ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 80119ee:	0252      	lsls	r2, r2, #9
 80119f0:	401a      	ands	r2, r3
 80119f2:	9226      	str	r2, [sp, #152]	; 0x98
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 80119f4:	227f      	movs	r2, #127	; 0x7f
 80119f6:	4013      	ands	r3, r2
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 80119f8:	22c0      	movs	r2, #192	; 0xc0
 80119fa:	2780      	movs	r7, #128	; 0x80
 80119fc:	0492      	lsls	r2, r2, #18
 80119fe:	9327      	str	r3, [sp, #156]	; 0x9c
 8011a00:	4032      	ands	r2, r6
 8011a02:	04bf      	lsls	r7, r7, #18
 8011a04:	42ba      	cmp	r2, r7
 8011a06:	d000      	beq.n	8011a0a <main+0x88e>
 8011a08:	e0db      	b.n	8011bc2 <main+0xa46>
    printf("Boot config OK\n");
 8011a0a:	48a0      	ldr	r0, [pc, #640]	; (8011c8c <main+0xb10>)
 8011a0c:	f003 fa68 	bl	8014ee0 <__wrap_puts>
  return uwTick;
 8011a10:	4a9f      	ldr	r2, [pc, #636]	; (8011c90 <main+0xb14>)
 8011a12:	6811      	ldr	r1, [r2, #0]
 8011a14:	6813      	ldr	r3, [r2, #0]
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8011a16:	1a5b      	subs	r3, r3, r1
 8011a18:	2b0a      	cmp	r3, #10
 8011a1a:	d9fb      	bls.n	8011a14 <main+0x898>
	queue_cmd_end = 0;
 8011a1c:	465b      	mov	r3, fp
 8011a1e:	2400      	movs	r4, #0
		RegInt_setregf(i, 0, 1);
 8011a20:	2501      	movs	r5, #1
	queue_cmd_end = 0;
 8011a22:	3338      	adds	r3, #56	; 0x38
 8011a24:	701c      	strb	r4, [r3, #0]
		if(i == 3){continue;}//writing to this reg controlls the RSS.//remove if works
 8011a26:	2c03      	cmp	r4, #3
 8011a28:	d004      	beq.n	8011a34 <main+0x8b8>
		RegInt_setregf(i, 0, 1);
 8011a2a:	002a      	movs	r2, r5
 8011a2c:	2100      	movs	r1, #0
 8011a2e:	0020      	movs	r0, r4
 8011a30:	f7f2 f998 	bl	8003d64 <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 8011a34:	3401      	adds	r4, #1
 8011a36:	b2e4      	uxtb	r4, r4
 8011a38:	2cff      	cmp	r4, #255	; 0xff
 8011a3a:	d1f4      	bne.n	8011a26 <main+0x8aa>
	RegInt_setregf(0x07, 115200, 1);//set default baud rate
 8011a3c:	21e1      	movs	r1, #225	; 0xe1
 8011a3e:	2201      	movs	r2, #1
 8011a40:	0249      	lsls	r1, r1, #9
 8011a42:	2007      	movs	r0, #7
 8011a44:	f7f2 f98e 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x0A, 0, 1);//set default baud rate
 8011a48:	2201      	movs	r2, #1
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	200a      	movs	r0, #10
 8011a4e:	f7f2 f989 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x10, HARDWARE_REVISION, 1);//set product identification register
 8011a52:	2201      	movs	r2, #1
 8011a54:	498f      	ldr	r1, [pc, #572]	; (8011c94 <main+0xb18>)
 8011a56:	2010      	movs	r0, #16
 8011a58:	f7f2 f984 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0x11, FIRMWARE_REVISION, 1);//set firmware revision register
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	498e      	ldr	r1, [pc, #568]	; (8011c98 <main+0xb1c>)
 8011a60:	2011      	movs	r0, #17
 8011a62:	f7f2 f97f 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD4, 600, 1);//set default mean sq distance threshold
 8011a66:	2196      	movs	r1, #150	; 0x96
 8011a68:	2201      	movs	r2, #1
 8011a6a:	0089      	lsls	r1, r1, #2
 8011a6c:	20d4      	movs	r0, #212	; 0xd4
 8011a6e:	f7f2 f979 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD5, 1000, 1);//set default radius for gf kernal
 8011a72:	21fa      	movs	r1, #250	; 0xfa
 8011a74:	2201      	movs	r2, #1
 8011a76:	0089      	lsls	r1, r1, #2
 8011a78:	20d5      	movs	r0, #213	; 0xd5
 8011a7a:	f7f2 f973 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD6, 0x0000000F, 1);//set default eval mode
 8011a7e:	2201      	movs	r2, #1
 8011a80:	210f      	movs	r1, #15
 8011a82:	20d6      	movs	r0, #214	; 0xd6
 8011a84:	f7f2 f96e 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD7, 0x00000002, 1);//set default radius for averaging
 8011a88:	2201      	movs	r2, #1
 8011a8a:	2102      	movs	r1, #2
 8011a8c:	20d7      	movs	r0, #215	; 0xd7
 8011a8e:	f7f2 f969 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 8011a92:	21fa      	movs	r1, #250	; 0xfa
 8011a94:	2201      	movs	r2, #1
 8011a96:	0049      	lsls	r1, r1, #1
 8011a98:	20d8      	movs	r0, #216	; 0xd8
 8011a9a:	f7f2 f963 	bl	8003d64 <RegInt_setregf>
	RegInt_setregf(0xD9, 0x00000000, 1);//sets no bandstop
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	20d9      	movs	r0, #217	; 0xd9
 8011aa4:	f7f2 f95e 	bl	8003d64 <RegInt_setregf>
	uart_state = 0;
 8011aa8:	2400      	movs	r4, #0
 8011aaa:	465b      	mov	r3, fp
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8011aac:	2101      	movs	r1, #1
 8011aae:	487b      	ldr	r0, [pc, #492]	; (8011c9c <main+0xb20>)
	uart_state = 0;
 8011ab0:	751c      	strb	r4, [r3, #20]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8011ab2:	f7f8 ff97 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
	DBG_PRINTLN("Registers Initialised");
 8011ab6:	487a      	ldr	r0, [pc, #488]	; (8011ca0 <main+0xb24>)
 8011ab8:	f003 fa24 	bl	8014f04 <__wrap_printf>
 8011abc:	4879      	ldr	r0, [pc, #484]	; (8011ca4 <main+0xb28>)
 8011abe:	f003 fa21 	bl	8014f04 <__wrap_printf>
 8011ac2:	4e79      	ldr	r6, [pc, #484]	; (8011ca8 <main+0xb2c>)
 8011ac4:	2285      	movs	r2, #133	; 0x85
 8011ac6:	4979      	ldr	r1, [pc, #484]	; (8011cac <main+0xb30>)
 8011ac8:	0030      	movs	r0, r6
 8011aca:	f003 fa1b 	bl	8014f04 <__wrap_printf>
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 8011ace:	4d78      	ldr	r5, [pc, #480]	; (8011cb0 <main+0xb34>)
 8011ad0:	0028      	movs	r0, r5
 8011ad2:	f003 fa17 	bl	8014f04 <__wrap_printf>
 8011ad6:	4a77      	ldr	r2, [pc, #476]	; (8011cb4 <main+0xb38>)
 8011ad8:	4977      	ldr	r1, [pc, #476]	; (8011cb8 <main+0xb3c>)
 8011ada:	4878      	ldr	r0, [pc, #480]	; (8011cbc <main+0xb40>)
 8011adc:	f003 fa12 	bl	8014f04 <__wrap_printf>
 8011ae0:	22a8      	movs	r2, #168	; 0xa8
 8011ae2:	4972      	ldr	r1, [pc, #456]	; (8011cac <main+0xb30>)
 8011ae4:	0052      	lsls	r2, r2, #1
 8011ae6:	0030      	movs	r0, r6
 8011ae8:	f003 fa0c 	bl	8014f04 <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 8011aec:	0028      	movs	r0, r5
 8011aee:	f003 fa09 	bl	8014f04 <__wrap_printf>
 8011af2:	0023      	movs	r3, r4
 8011af4:	2204      	movs	r2, #4
 8011af6:	2101      	movs	r1, #1
 8011af8:	4871      	ldr	r0, [pc, #452]	; (8011cc0 <main+0xb44>)
 8011afa:	f003 fa03 	bl	8014f04 <__wrap_printf>
 8011afe:	2252      	movs	r2, #82	; 0x52
 8011b00:	496a      	ldr	r1, [pc, #424]	; (8011cac <main+0xb30>)
 8011b02:	32ff      	adds	r2, #255	; 0xff
 8011b04:	0030      	movs	r0, r6
 8011b06:	f003 f9fd 	bl	8014f04 <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 8011b0a:	0028      	movs	r0, r5
 8011b0c:	f003 f9fa 	bl	8014f04 <__wrap_printf>
 8011b10:	2201      	movs	r2, #1
 8011b12:	0023      	movs	r3, r4
 8011b14:	0011      	movs	r1, r2
 8011b16:	486b      	ldr	r0, [pc, #428]	; (8011cc4 <main+0xb48>)
 8011b18:	f003 f9f4 	bl	8014f04 <__wrap_printf>
 8011b1c:	22a9      	movs	r2, #169	; 0xa9
 8011b1e:	4963      	ldr	r1, [pc, #396]	; (8011cac <main+0xb30>)
 8011b20:	0052      	lsls	r2, r2, #1
 8011b22:	0030      	movs	r0, r6
 8011b24:	f003 f9ee 	bl	8014f04 <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 8011b28:	4c67      	ldr	r4, [pc, #412]	; (8011cc8 <main+0xb4c>)
 8011b2a:	4968      	ldr	r1, [pc, #416]	; (8011ccc <main+0xb50>)
 8011b2c:	0025      	movs	r5, r4
 8011b2e:	350c      	adds	r5, #12
 8011b30:	2238      	movs	r2, #56	; 0x38
 8011b32:	3170      	adds	r1, #112	; 0x70
 8011b34:	0028      	movs	r0, r5
 8011b36:	f003 fdb5 	bl	80156a4 <memcpy>
 8011b3a:	0023      	movs	r3, r4
 8011b3c:	3344      	adds	r3, #68	; 0x44
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	4f63      	ldr	r7, [pc, #396]	; (8011cd0 <main+0xb54>)
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d000      	beq.n	8011b48 <main+0x9cc>
 8011b46:	e27b      	b.n	8012040 <main+0xec4>
 8011b48:	2238      	movs	r2, #56	; 0x38
 8011b4a:	0029      	movs	r1, r5
 8011b4c:	0038      	movs	r0, r7
 8011b4e:	f003 fda9 	bl	80156a4 <memcpy>
 8011b52:	4b60      	ldr	r3, [pc, #384]	; (8011cd4 <main+0xb58>)
 8011b54:	3338      	adds	r3, #56	; 0x38
 8011b56:	781a      	ldrb	r2, [r3, #0]
 8011b58:	2a00      	cmp	r2, #0
 8011b5a:	d104      	bne.n	8011b66 <main+0x9ea>
 8011b5c:	3201      	adds	r2, #1
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	4b5d      	ldr	r3, [pc, #372]	; (8011cd8 <main+0xb5c>)
 8011b62:	3338      	adds	r3, #56	; 0x38
 8011b64:	701a      	strb	r2, [r3, #0]
 8011b66:	4b5b      	ldr	r3, [pc, #364]	; (8011cd4 <main+0xb58>)
 8011b68:	3338      	adds	r3, #56	; 0x38
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d012      	beq.n	8011b96 <main+0xa1a>
 8011b70:	0023      	movs	r3, r4
 8011b72:	3345      	adds	r3, #69	; 0x45
 8011b74:	781d      	ldrb	r5, [r3, #0]
 8011b76:	2d00      	cmp	r5, #0
 8011b78:	d000      	beq.n	8011b7c <main+0xa00>
 8011b7a:	e0ea      	b.n	8011d52 <main+0xbd6>
 8011b7c:	2254      	movs	r2, #84	; 0x54
 8011b7e:	4957      	ldr	r1, [pc, #348]	; (8011cdc <main+0xb60>)
 8011b80:	32ff      	adds	r2, #255	; 0xff
 8011b82:	2048      	movs	r0, #72	; 0x48
 8011b84:	f7f4 fa70 	bl	8006068 <acc_rss_integration_mem_alloc_debug>
 8011b88:	4b55      	ldr	r3, [pc, #340]	; (8011ce0 <main+0xb64>)
 8011b8a:	46a9      	mov	r9, r5
 8011b8c:	469a      	mov	sl, r3
 8011b8e:	6018      	str	r0, [r3, #0]
 8011b90:	2800      	cmp	r0, #0
 8011b92:	d000      	beq.n	8011b96 <main+0xa1a>
 8011b94:	e0d6      	b.n	8011d44 <main+0xbc8>
 8011b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b98:	4a52      	ldr	r2, [pc, #328]	; (8011ce4 <main+0xb68>)
 8011b9a:	4953      	ldr	r1, [pc, #332]	; (8011ce8 <main+0xb6c>)
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	4798      	blx	r3
 8011ba0:	e0e5      	b.n	8011d6e <main+0xbf2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011ba2:	2184      	movs	r1, #132	; 0x84
 8011ba4:	4667      	mov	r7, ip
 8011ba6:	0209      	lsls	r1, r1, #8
 8011ba8:	4339      	orrs	r1, r7
 8011baa:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011bac:	2802      	cmp	r0, #2
 8011bae:	d000      	beq.n	8011bb2 <main+0xa36>
 8011bb0:	e411      	b.n	80113d6 <main+0x25a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011bb2:	2180      	movs	r1, #128	; 0x80
 8011bb4:	0109      	lsls	r1, r1, #4
 8011bb6:	6059      	str	r1, [r3, #4]
 8011bb8:	e40d      	b.n	80113d6 <main+0x25a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	4641      	mov	r1, r8
 8011bbe:	630b      	str	r3, [r1, #48]	; 0x30
 8011bc0:	e628      	b.n	8011814 <main+0x698>
  printf("Enabling BOOT0\n");
 8011bc2:	484a      	ldr	r0, [pc, #296]	; (8011cec <main+0xb70>)
 8011bc4:	f003 f98c 	bl	8014ee0 <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 8011bc8:	4b49      	ldr	r3, [pc, #292]	; (8011cf0 <main+0xb74>)
 8011bca:	401e      	ands	r6, r3
  obInit.OptionType = OPTIONBYTE_USER;
 8011bcc:	2304      	movs	r3, #4
  obInit.USERConfig |= OB_BOOT1_SYSTEM;
 8011bce:	433e      	orrs	r6, r7
 8011bd0:	61a6      	str	r6, [r4, #24]
  obInit.OptionType = OPTIONBYTE_USER;
 8011bd2:	931a      	str	r3, [sp, #104]	; 0x68
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8011bd4:	696b      	ldr	r3, [r5, #20]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	db0b      	blt.n	8011bf2 <main+0xa76>
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8011bda:	2180      	movs	r1, #128	; 0x80
 8011bdc:	696b      	ldr	r3, [r5, #20]
 8011bde:	05c9      	lsls	r1, r1, #23
 8011be0:	420b      	tst	r3, r1
 8011be2:	d111      	bne.n	8011c08 <main+0xa8c>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011be4:	2380      	movs	r3, #128	; 0x80
 8011be6:	696a      	ldr	r2, [r5, #20]
 8011be8:	061b      	lsls	r3, r3, #24
 8011bea:	4313      	orrs	r3, r2
 8011bec:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8011bee:	696b      	ldr	r3, [r5, #20]
 8011bf0:	e006      	b.n	8011c00 <main+0xa84>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011bf2:	4b40      	ldr	r3, [pc, #256]	; (8011cf4 <main+0xb78>)
 8011bf4:	60ab      	str	r3, [r5, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011bf6:	4b40      	ldr	r3, [pc, #256]	; (8011cf8 <main+0xb7c>)
 8011bf8:	60ab      	str	r3, [r5, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8011bfa:	696b      	ldr	r3, [r5, #20]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	daec      	bge.n	8011bda <main+0xa5e>
  printf("BOOT0 enable failed\n");
 8011c00:	483e      	ldr	r0, [pc, #248]	; (8011cfc <main+0xb80>)
 8011c02:	f003 f96d 	bl	8014ee0 <__wrap_puts>
 8011c06:	e703      	b.n	8011a10 <main+0x894>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8011c08:	4b3d      	ldr	r3, [pc, #244]	; (8011d00 <main+0xb84>)
 8011c0a:	60eb      	str	r3, [r5, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8011c0c:	4b3d      	ldr	r3, [pc, #244]	; (8011d04 <main+0xb88>)
 8011c0e:	60eb      	str	r3, [r5, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 8011c10:	696a      	ldr	r2, [r5, #20]
 8011c12:	400a      	ands	r2, r1
 8011c14:	d1e6      	bne.n	8011be4 <main+0xa68>
  __HAL_LOCK(&pFlash);
 8011c16:	4c3c      	ldr	r4, [pc, #240]	; (8011d08 <main+0xb8c>)
 8011c18:	7823      	ldrb	r3, [r4, #0]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d02a      	beq.n	8011c74 <main+0xaf8>
 8011c1e:	2301      	movs	r3, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011c20:	6062      	str	r2, [r4, #4]
  __HAL_LOCK(&pFlash);
 8011c22:	7023      	strb	r3, [r4, #0]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8011c24:	6a2a      	ldr	r2, [r5, #32]
 8011c26:	b2d2      	uxtb	r2, r2
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 8011c28:	2aaa      	cmp	r2, #170	; 0xaa
 8011c2a:	d002      	beq.n	8011c32 <main+0xab6>
 8011c2c:	2acc      	cmp	r2, #204	; 0xcc
 8011c2e:	d000      	beq.n	8011c32 <main+0xab6>
    return (OB_RDP_LEVEL_1);
 8011c30:	22bb      	movs	r2, #187	; 0xbb
  optr = FLASH->OPTR;
 8011c32:	6a2b      	ldr	r3, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 8011c34:	4935      	ldr	r1, [pc, #212]	; (8011d0c <main+0xb90>)
 8011c36:	400b      	ands	r3, r1
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 8011c38:	4333      	orrs	r3, r6
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	622b      	str	r3, [r5, #32]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011c3e:	f7f8 fe91 	bl	800a964 <FLASH_WaitForLastOperation.constprop.96>
  if (status == HAL_OK)
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d10a      	bne.n	8011c5c <main+0xae0>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8011c46:	2380      	movs	r3, #128	; 0x80
 8011c48:	696a      	ldr	r2, [r5, #20]
 8011c4a:	029b      	lsls	r3, r3, #10
 8011c4c:	4313      	orrs	r3, r2
 8011c4e:	616b      	str	r3, [r5, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8011c50:	f7f8 fe88 	bl	800a964 <FLASH_WaitForLastOperation.constprop.96>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8011c54:	696b      	ldr	r3, [r5, #20]
 8011c56:	4a2e      	ldr	r2, [pc, #184]	; (8011d10 <main+0xb94>)
 8011c58:	4013      	ands	r3, r2
 8011c5a:	616b      	str	r3, [r5, #20]
  __HAL_UNLOCK(&pFlash);
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	7023      	strb	r3, [r4, #0]
      if (result == HAL_OK)
 8011c60:	4298      	cmp	r0, r3
 8011c62:	d107      	bne.n	8011c74 <main+0xaf8>
        printf("Reset and reload\n");
 8011c64:	482b      	ldr	r0, [pc, #172]	; (8011d14 <main+0xb98>)
 8011c66:	f003 f93b 	bl	8014ee0 <__wrap_puts>
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8011c6a:	2380      	movs	r3, #128	; 0x80
 8011c6c:	696a      	ldr	r2, [r5, #20]
 8011c6e:	051b      	lsls	r3, r3, #20
 8011c70:	4313      	orrs	r3, r2
 8011c72:	616b      	str	r3, [r5, #20]
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8011c74:	2380      	movs	r3, #128	; 0x80
 8011c76:	696a      	ldr	r2, [r5, #20]
 8011c78:	05db      	lsls	r3, r3, #23
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8011c7e:	696b      	ldr	r3, [r5, #20]
 8011c80:	e7b0      	b.n	8011be4 <main+0xa68>
 8011c82:	46c0      	nop			; (mov r8, r8)
 8011c84:	080001ff 	.word	0x080001ff
 8011c88:	40022004 	.word	0x40022004
 8011c8c:	0801c1ad 	.word	0x0801c1ad
 8011c90:	200003ec 	.word	0x200003ec
 8011c94:	bd010100 	.word	0xbd010100
 8011c98:	bf010400 	.word	0xbf010400
 8011c9c:	200005a8 	.word	0x200005a8
 8011ca0:	0801bcc3 	.word	0x0801bcc3
 8011ca4:	0801c1f0 	.word	0x0801c1f0
 8011ca8:	0801c13a 	.word	0x0801c13a
 8011cac:	0801bcdb 	.word	0x0801bcdb
 8011cb0:	0801c206 	.word	0x0801c206
 8011cb4:	0801c20c 	.word	0x0801c20c
 8011cb8:	0801c215 	.word	0x0801c215
 8011cbc:	0801c221 	.word	0x0801c221
 8011cc0:	0801c230 	.word	0x0801c230
 8011cc4:	0801c24f 	.word	0x0801c24f
 8011cc8:	2000028c 	.word	0x2000028c
 8011ccc:	080156f8 	.word	0x080156f8
 8011cd0:	200003f0 	.word	0x200003f0
 8011cd4:	2000010c 	.word	0x2000010c
 8011cd8:	2000018c 	.word	0x2000018c
 8011cdc:	0801c26f 	.word	0x0801c26f
 8011ce0:	200005a0 	.word	0x200005a0
 8011ce4:	0801c2c2 	.word	0x0801c2c2
 8011ce8:	0801c2be 	.word	0x0801c2be
 8011cec:	0801c1bc 	.word	0x0801c1bc
 8011cf0:	3c4fff00 	.word	0x3c4fff00
 8011cf4:	45670123 	.word	0x45670123
 8011cf8:	cdef89ab 	.word	0xcdef89ab
 8011cfc:	0801c1dc 	.word	0x0801c1dc
 8011d00:	08192a3b 	.word	0x08192a3b
 8011d04:	4c5d6e7f 	.word	0x4c5d6e7f
 8011d08:	20000490 	.word	0x20000490
 8011d0c:	c0b00000 	.word	0xc0b00000
 8011d10:	fffdffff 	.word	0xfffdffff
 8011d14:	0801c1cb 	.word	0x0801c1cb
 8011d18:	4652      	mov	r2, sl
 8011d1a:	2348      	movs	r3, #72	; 0x48
 8011d1c:	6812      	ldr	r2, [r2, #0]
 8011d1e:	436b      	muls	r3, r5
 8011d20:	4690      	mov	r8, r2
 8011d22:	4498      	add	r8, r3
 8011d24:	2244      	movs	r2, #68	; 0x44
 8011d26:	2100      	movs	r1, #0
 8011d28:	4640      	mov	r0, r8
 8011d2a:	f001 f897 	bl	8012e5c <memset>
 8011d2e:	4643      	mov	r3, r8
 8011d30:	464a      	mov	r2, r9
 8011d32:	3341      	adds	r3, #65	; 0x41
 8011d34:	701a      	strb	r2, [r3, #0]
 8011d36:	3b01      	subs	r3, #1
 8011d38:	701a      	strb	r2, [r3, #0]
 8011d3a:	709a      	strb	r2, [r3, #2]
 8011d3c:	4642      	mov	r2, r8
 8011d3e:	4bc6      	ldr	r3, [pc, #792]	; (8012058 <main+0xedc>)
 8011d40:	3501      	adds	r5, #1
 8011d42:	6453      	str	r3, [r2, #68]	; 0x44
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	429d      	cmp	r5, r3
 8011d48:	d3e6      	bcc.n	8011d18 <main+0xb9c>
 8011d4a:	0023      	movs	r3, r4
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	3345      	adds	r3, #69	; 0x45
 8011d50:	701a      	strb	r2, [r3, #0]
 8011d52:	0023      	movs	r3, r4
 8011d54:	2201      	movs	r2, #1
 8011d56:	3344      	adds	r3, #68	; 0x44
 8011d58:	701a      	strb	r2, [r3, #0]
 8011d5a:	003b      	movs	r3, r7
 8011d5c:	3330      	adds	r3, #48	; 0x30
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	4293      	cmp	r3, r2
 8011d62:	d914      	bls.n	8011d8e <main+0xc12>
 8011d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d66:	4abd      	ldr	r2, [pc, #756]	; (801205c <main+0xee0>)
 8011d68:	49bd      	ldr	r1, [pc, #756]	; (8012060 <main+0xee4>)
 8011d6a:	2002      	movs	r0, #2
 8011d6c:	4798      	blx	r3
 8011d6e:	3444      	adds	r4, #68	; 0x44
	if (!acc_rss_activate(&radar_hal))
 8011d70:	7823      	ldrb	r3, [r4, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10b      	bne.n	8011d8e <main+0xc12>
		ERR_PRINTLN("RSS activation fail");
 8011d76:	48bb      	ldr	r0, [pc, #748]	; (8012064 <main+0xee8>)
 8011d78:	f003 f8c4 	bl	8014f04 <__wrap_printf>
 8011d7c:	48ba      	ldr	r0, [pc, #744]	; (8012068 <main+0xeec>)
 8011d7e:	f003 f8c1 	bl	8014f04 <__wrap_printf>
 8011d82:	225a      	movs	r2, #90	; 0x5a
 8011d84:	49b9      	ldr	r1, [pc, #740]	; (801206c <main+0xef0>)
 8011d86:	32ff      	adds	r2, #255	; 0xff
 8011d88:	0030      	movs	r0, r6
 8011d8a:	f003 f8bb 	bl	8014f04 <__wrap_printf>
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4bb7      	ldr	r3, [pc, #732]	; (8012070 <main+0xef4>)
 8011d92:	3338      	adds	r3, #56	; 0x38
 8011d94:	705a      	strb	r2, [r3, #1]
	sparse_config = acc_service_sparse_configuration_create();
 8011d96:	f7ee ff15 	bl	8000bc4 <acc_service_sparse_configuration_create>
 8011d9a:	4bb6      	ldr	r3, [pc, #728]	; (8012074 <main+0xef8>)
 8011d9c:	6218      	str	r0, [r3, #32]
	if (sparse_config == NULL)
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d10b      	bne.n	8011dba <main+0xc3e>
		ERR_PRINTLN("sparse config creation fail");
 8011da2:	48b0      	ldr	r0, [pc, #704]	; (8012064 <main+0xee8>)
 8011da4:	f003 f8ae 	bl	8014f04 <__wrap_printf>
 8011da8:	48b3      	ldr	r0, [pc, #716]	; (8012078 <main+0xefc>)
 8011daa:	f003 f8ab 	bl	8014f04 <__wrap_printf>
 8011dae:	22b1      	movs	r2, #177	; 0xb1
 8011db0:	49ae      	ldr	r1, [pc, #696]	; (801206c <main+0xef0>)
 8011db2:	0052      	lsls	r2, r2, #1
 8011db4:	0030      	movs	r0, r6
 8011db6:	f003 f8a5 	bl	8014f04 <__wrap_printf>
	sparse_config_far = acc_service_sparse_configuration_create();
 8011dba:	f7ee ff03 	bl	8000bc4 <acc_service_sparse_configuration_create>
 8011dbe:	465b      	mov	r3, fp
 8011dc0:	6358      	str	r0, [r3, #52]	; 0x34
	if (sparse_config_far == NULL)
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d10b      	bne.n	8011dde <main+0xc62>
		ERR_PRINTLN("far sparse config creation fail");
 8011dc6:	48a7      	ldr	r0, [pc, #668]	; (8012064 <main+0xee8>)
 8011dc8:	f003 f89c 	bl	8014f04 <__wrap_printf>
 8011dcc:	48ab      	ldr	r0, [pc, #684]	; (801207c <main+0xf00>)
 8011dce:	f003 f899 	bl	8014f04 <__wrap_printf>
 8011dd2:	22b5      	movs	r2, #181	; 0xb5
 8011dd4:	49a5      	ldr	r1, [pc, #660]	; (801206c <main+0xef0>)
 8011dd6:	0052      	lsls	r2, r2, #1
 8011dd8:	0030      	movs	r0, r6
 8011dda:	f003 f893 	bl	8014f04 <__wrap_printf>
 8011dde:	226d      	movs	r2, #109	; 0x6d
 8011de0:	49a7      	ldr	r1, [pc, #668]	; (8012080 <main+0xf04>)
 8011de2:	2090      	movs	r0, #144	; 0x90
 8011de4:	f7f8 ff02 	bl	800abec <acc_rss_integration_mem_calloc_debug.constprop.75>
 8011de8:	1e04      	subs	r4, r0, #0
 8011dea:	d101      	bne.n	8011df0 <main+0xc74>
 8011dec:	f000 fd80 	bl	80128f0 <main+0x1774>
 8011df0:	4ba4      	ldr	r3, [pc, #656]	; (8012084 <main+0xf08>)
 8011df2:	0005      	movs	r5, r0
 8011df4:	6003      	str	r3, [r0, #0]
 8011df6:	4ba4      	ldr	r3, [pc, #656]	; (8012088 <main+0xf0c>)
 8011df8:	2600      	movs	r6, #0
 8011dfa:	6083      	str	r3, [r0, #8]
 8011dfc:	4ba3      	ldr	r3, [pc, #652]	; (801208c <main+0xf10>)
 8011dfe:	351c      	adds	r5, #28
 8011e00:	6143      	str	r3, [r0, #20]
 8011e02:	2358      	movs	r3, #88	; 0x58
 8011e04:	7106      	strb	r6, [r0, #4]
 8011e06:	8303      	strh	r3, [r0, #24]
 8011e08:	6105      	str	r5, [r0, #16]
 8011e0a:	2102      	movs	r1, #2
 8011e0c:	f7ee fe10 	bl	8000a30 <acc_service_profile_set>
 8011e10:	0020      	movs	r0, r4
 8011e12:	0031      	movs	r1, r6
 8011e14:	f7ee fdfb 	bl	8000a0e <acc_service_maximize_signal_attenuation_set>
 8011e18:	0028      	movs	r0, r5
 8011e1a:	f7f4 fbe5 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e1e:	42b0      	cmp	r0, r6
 8011e20:	d001      	beq.n	8011e26 <main+0xcaa>
 8011e22:	4b9b      	ldr	r3, [pc, #620]	; (8012090 <main+0xf14>)
 8011e24:	6423      	str	r3, [r4, #64]	; 0x40
 8011e26:	0028      	movs	r0, r5
 8011e28:	f7f4 fbde 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	d001      	beq.n	8011e34 <main+0xcb8>
 8011e30:	4b98      	ldr	r3, [pc, #608]	; (8012094 <main+0xf18>)
 8011e32:	6463      	str	r3, [r4, #68]	; 0x44
 8011e34:	0028      	movs	r0, r5
 8011e36:	f7f4 fbd7 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e3a:	2800      	cmp	r0, #0
 8011e3c:	d003      	beq.n	8011e46 <main+0xcca>
 8011e3e:	0023      	movs	r3, r4
 8011e40:	2206      	movs	r2, #6
 8011e42:	334e      	adds	r3, #78	; 0x4e
 8011e44:	701a      	strb	r2, [r3, #0]
 8011e46:	0028      	movs	r0, r5
 8011e48:	f7f4 fbce 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d003      	beq.n	8011e58 <main+0xcdc>
 8011e50:	0023      	movs	r3, r4
 8011e52:	220a      	movs	r2, #10
 8011e54:	3358      	adds	r3, #88	; 0x58
 8011e56:	801a      	strh	r2, [r3, #0]
 8011e58:	0028      	movs	r0, r5
 8011e5a:	f7f4 fbc5 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d001      	beq.n	8011e66 <main+0xcea>
 8011e62:	2301      	movs	r3, #1
 8011e64:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e66:	0028      	movs	r0, r5
 8011e68:	f7ee fda8 	bl	80009bc <acc_base_configuration_repetition_mode_on_demand_set>
 8011e6c:	0028      	movs	r0, r5
 8011e6e:	f7f4 fbbb 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e72:	2800      	cmp	r0, #0
 8011e74:	d001      	beq.n	8011e7a <main+0xcfe>
 8011e76:	2302      	movs	r3, #2
 8011e78:	6563      	str	r3, [r4, #84]	; 0x54
 8011e7a:	0028      	movs	r0, r5
 8011e7c:	f7f4 fbb4 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e80:	2800      	cmp	r0, #0
 8011e82:	d003      	beq.n	8011e8c <main+0xd10>
 8011e84:	0023      	movs	r3, r4
 8011e86:	2200      	movs	r2, #0
 8011e88:	3348      	adds	r3, #72	; 0x48
 8011e8a:	701a      	strb	r2, [r3, #0]
 8011e8c:	0028      	movs	r0, r5
 8011e8e:	f7f4 fbab 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d003      	beq.n	8011e9e <main+0xd22>
 8011e96:	0023      	movs	r3, r4
 8011e98:	2200      	movs	r2, #0
 8011e9a:	3362      	adds	r3, #98	; 0x62
 8011e9c:	701a      	strb	r2, [r3, #0]
 8011e9e:	0028      	movs	r0, r5
 8011ea0:	f7f4 fba2 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d003      	beq.n	8011eb0 <main+0xd34>
 8011ea8:	0023      	movs	r3, r4
 8011eaa:	2200      	movs	r2, #0
 8011eac:	3363      	adds	r3, #99	; 0x63
 8011eae:	701a      	strb	r2, [r3, #0]
 8011eb0:	0028      	movs	r0, r5
 8011eb2:	f7f4 fb99 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011eb6:	2800      	cmp	r0, #0
 8011eb8:	d003      	beq.n	8011ec2 <main+0xd46>
 8011eba:	0023      	movs	r3, r4
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	3364      	adds	r3, #100	; 0x64
 8011ec0:	701a      	strb	r2, [r3, #0]
 8011ec2:	0028      	movs	r0, r5
 8011ec4:	f7f4 fb90 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d007      	beq.n	8011edc <main+0xd60>
 8011ecc:	0023      	movs	r3, r4
 8011ece:	2200      	movs	r2, #0
 8011ed0:	336b      	adds	r3, #107	; 0x6b
 8011ed2:	705a      	strb	r2, [r3, #1]
 8011ed4:	701a      	strb	r2, [r3, #0]
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	3240      	adds	r2, #64	; 0x40
 8011eda:	805a      	strh	r2, [r3, #2]
 8011edc:	0028      	movs	r0, r5
 8011ede:	f7f4 fb83 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d003      	beq.n	8011eee <main+0xd72>
 8011ee6:	0023      	movs	r3, r4
 8011ee8:	22ff      	movs	r2, #255	; 0xff
 8011eea:	3372      	adds	r3, #114	; 0x72
 8011eec:	801a      	strh	r2, [r3, #0]
 8011eee:	0028      	movs	r0, r5
 8011ef0:	f7f4 fb7a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d003      	beq.n	8011f00 <main+0xd84>
 8011ef8:	0023      	movs	r3, r4
 8011efa:	2200      	movs	r2, #0
 8011efc:	3374      	adds	r3, #116	; 0x74
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	0028      	movs	r0, r5
 8011f02:	f7f4 fb71 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d004      	beq.n	8011f14 <main+0xd98>
 8011f0a:	0023      	movs	r3, r4
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	3376      	adds	r3, #118	; 0x76
 8011f10:	701a      	strb	r2, [r3, #0]
 8011f12:	67a2      	str	r2, [r4, #120]	; 0x78
 8011f14:	0028      	movs	r0, r5
 8011f16:	2101      	movs	r1, #1
 8011f18:	f7ee fcb2 	bl	8000880 <acc_base_configuration_downsampling_factor_set>
 8011f1c:	0028      	movs	r0, r5
 8011f1e:	f7f4 fb63 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	d003      	beq.n	8011f2e <main+0xdb2>
 8011f26:	0023      	movs	r3, r4
 8011f28:	220b      	movs	r2, #11
 8011f2a:	335a      	adds	r3, #90	; 0x5a
 8011f2c:	801a      	strh	r2, [r3, #0]
 8011f2e:	0028      	movs	r0, r5
 8011f30:	f7f4 fb5a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d003      	beq.n	8011f40 <main+0xdc4>
 8011f38:	0023      	movs	r3, r4
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	3365      	adds	r3, #101	; 0x65
 8011f3e:	701a      	strb	r2, [r3, #0]
 8011f40:	0028      	movs	r0, r5
 8011f42:	f7f4 fb51 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f46:	2800      	cmp	r0, #0
 8011f48:	d001      	beq.n	8011f4e <main+0xdd2>
 8011f4a:	4b53      	ldr	r3, [pc, #332]	; (8012098 <main+0xf1c>)
 8011f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f4e:	0028      	movs	r0, r5
 8011f50:	f7f4 fb4a 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f54:	2800      	cmp	r0, #0
 8011f56:	d005      	beq.n	8011f64 <main+0xde8>
 8011f58:	4b50      	ldr	r3, [pc, #320]	; (801209c <main+0xf20>)
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	6323      	str	r3, [r4, #48]	; 0x30
 8011f5e:	0023      	movs	r3, r4
 8011f60:	3334      	adds	r3, #52	; 0x34
 8011f62:	701a      	strb	r2, [r3, #0]
 8011f64:	0028      	movs	r0, r5
 8011f66:	f7f4 fb3f 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f6a:	2800      	cmp	r0, #0
 8011f6c:	d003      	beq.n	8011f76 <main+0xdfa>
 8011f6e:	0023      	movs	r3, r4
 8011f70:	2201      	movs	r2, #1
 8011f72:	3338      	adds	r3, #56	; 0x38
 8011f74:	701a      	strb	r2, [r3, #0]
 8011f76:	0028      	movs	r0, r5
 8011f78:	f7f4 fb36 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d003      	beq.n	8011f88 <main+0xe0c>
 8011f80:	0023      	movs	r3, r4
 8011f82:	2201      	movs	r2, #1
 8011f84:	336a      	adds	r3, #106	; 0x6a
 8011f86:	701a      	strb	r2, [r3, #0]
 8011f88:	0028      	movs	r0, r5
 8011f8a:	f7f4 fb2d 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d004      	beq.n	8011f9c <main+0xe20>
 8011f92:	2296      	movs	r2, #150	; 0x96
 8011f94:	0023      	movs	r3, r4
 8011f96:	0152      	lsls	r2, r2, #5
 8011f98:	3370      	adds	r3, #112	; 0x70
 8011f9a:	801a      	strh	r2, [r3, #0]
 8011f9c:	0028      	movs	r0, r5
 8011f9e:	f7f4 fb23 	bl	80065e8 <configuration_is_valid.lto_priv.672>
 8011fa2:	4b3f      	ldr	r3, [pc, #252]	; (80120a0 <main+0xf24>)
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d001      	beq.n	8011fac <main+0xe30>
 8011fa8:	4a3e      	ldr	r2, [pc, #248]	; (80120a4 <main+0xf28>)
 8011faa:	61e2      	str	r2, [r4, #28]
    envelope_config = acc_service_envelope_configuration_create();
 8011fac:	621c      	str	r4, [r3, #32]
	if (uart_state != 4){return;}
 8011fae:	4c3c      	ldr	r4, [pc, #240]	; (80120a0 <main+0xf24>)
 8011fb0:	7d23      	ldrb	r3, [r4, #20]
 8011fb2:	2b04      	cmp	r3, #4
 8011fb4:	d12a      	bne.n	801200c <main+0xe90>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8011fb6:	493c      	ldr	r1, [pc, #240]	; (80120a8 <main+0xf2c>)
 8011fb8:	780b      	ldrb	r3, [r1, #0]
 8011fba:	2bf8      	cmp	r3, #248	; 0xf8
 8011fbc:	d000      	beq.n	8011fc0 <main+0xe44>
 8011fbe:	e081      	b.n	80120c4 <main+0xf48>
 8011fc0:	7d63      	ldrb	r3, [r4, #21]
 8011fc2:	2b01      	cmp	r3, #1
 8011fc4:	d11b      	bne.n	8011ffe <main+0xe82>
		uint8_t reg = uart_rx_buff[1];
 8011fc6:	784c      	ldrb	r4, [r1, #1]
		uint32_t val = RegInt_getreg(reg);
 8011fc8:	0020      	movs	r0, r4
 8011fca:	f7f1 fd75 	bl	8003ab8 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 8011fce:	22cc      	movs	r2, #204	; 0xcc
 8011fd0:	4b36      	ldr	r3, [pc, #216]	; (80120ac <main+0xf30>)
 8011fd2:	3346      	adds	r3, #70	; 0x46
 8011fd4:	701a      	strb	r2, [r3, #0]
		uart_tx_buff[1] = 0x05;
 8011fd6:	3ac7      	subs	r2, #199	; 0xc7
 8011fd8:	705a      	strb	r2, [r3, #1]
		uart_tx_buff[2] = 0x00;
 8011fda:	2200      	movs	r2, #0
 8011fdc:	709a      	strb	r2, [r3, #2]
		uart_tx_buff[3] = 0xF6;
 8011fde:	32f6      	adds	r2, #246	; 0xf6
 8011fe0:	70da      	strb	r2, [r3, #3]
		uart_tx_buff[4] = reg;
 8011fe2:	711c      	strb	r4, [r3, #4]
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8011fe4:	0a02      	lsrs	r2, r0, #8
		uart_tx_buff[6] = get_byte(val,1);
 8011fe6:	719a      	strb	r2, [r3, #6]
 8011fe8:	0c02      	lsrs	r2, r0, #16
		uart_tx_buff[7] = get_byte(val,2);
 8011fea:	71da      	strb	r2, [r3, #7]
		uart_tx_buff[9] = 0xCD;
 8011fec:	22cd      	movs	r2, #205	; 0xcd
		uart_tx_buff[5] = get_byte(val,0);
 8011fee:	7158      	strb	r0, [r3, #5]
 8011ff0:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[8] = get_byte(val,3);
 8011ff2:	7218      	strb	r0, [r3, #8]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8011ff4:	210a      	movs	r1, #10
 8011ff6:	0018      	movs	r0, r3
		uart_tx_buff[9] = 0xCD;
 8011ff8:	725a      	strb	r2, [r3, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8011ffa:	f7f8 fc05 	bl	800a808 <HAL_UART_Transmit_IT.constprop.123>
	uart_state = 0;
 8011ffe:	2200      	movs	r2, #0
 8012000:	4b27      	ldr	r3, [pc, #156]	; (80120a0 <main+0xf24>)
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8012002:	2101      	movs	r1, #1
 8012004:	482a      	ldr	r0, [pc, #168]	; (80120b0 <main+0xf34>)
	uart_state = 0;
 8012006:	751a      	strb	r2, [r3, #20]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8012008:	f7f8 fcec 	bl	800a9e4 <HAL_UART_Receive_IT.constprop.87>
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 801200c:	2202      	movs	r2, #2
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 801200e:	2580      	movs	r5, #128	; 0x80
 8012010:	4c28      	ldr	r4, [pc, #160]	; (80120b4 <main+0xf38>)
 8012012:	4e29      	ldr	r6, [pc, #164]	; (80120b8 <main+0xf3c>)
 8012014:	6823      	ldr	r3, [r4, #0]
 8012016:	00ad      	lsls	r5, r5, #2
 8012018:	4393      	bics	r3, r2
 801201a:	6023      	str	r3, [r4, #0]
 801201c:	6973      	ldr	r3, [r6, #20]
 801201e:	0037      	movs	r7, r6
 8012020:	422b      	tst	r3, r5
 8012022:	d000      	beq.n	8012026 <main+0xeaa>
 8012024:	e2cd      	b.n	80125c2 <main+0x1446>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8012026:	2104      	movs	r1, #4
 8012028:	4a24      	ldr	r2, [pc, #144]	; (80120bc <main+0xf40>)
 801202a:	6913      	ldr	r3, [r2, #16]
 801202c:	438b      	bics	r3, r1
 801202e:	6113      	str	r3, [r2, #16]
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8012030:	bf40      	sev
    __WFE();
 8012032:	bf20      	wfe
    __WFE();
 8012034:	bf20      	wfe
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8012036:	2202      	movs	r2, #2
 8012038:	6823      	ldr	r3, [r4, #0]
 801203a:	4313      	orrs	r3, r2
 801203c:	6023      	str	r3, [r4, #0]
 801203e:	e7b6      	b.n	8011fae <main+0xe32>
 8012040:	003b      	movs	r3, r7
 8012042:	3330      	adds	r3, #48	; 0x30
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	2b01      	cmp	r3, #1
 8012048:	d800      	bhi.n	801204c <main+0xed0>
 801204a:	e6a0      	b.n	8011d8e <main+0xc12>
 801204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204e:	4a1c      	ldr	r2, [pc, #112]	; (80120c0 <main+0xf44>)
 8012050:	4903      	ldr	r1, [pc, #12]	; (8012060 <main+0xee4>)
 8012052:	2002      	movs	r0, #2
 8012054:	4798      	blx	r3
 8012056:	e68a      	b.n	8011d6e <main+0xbf2>
 8012058:	ff800000 	.word	0xff800000
 801205c:	0801c29e 	.word	0x0801c29e
 8012060:	0801c2be 	.word	0x0801c2be
 8012064:	0801bcff 	.word	0x0801bcff
 8012068:	0801c300 	.word	0x0801c300
 801206c:	0801bcdb 	.word	0x0801bcdb
 8012070:	2000010c 	.word	0x2000010c
 8012074:	2000018c 	.word	0x2000018c
 8012078:	0801c318 	.word	0x0801c318
 801207c:	0801c314 	.word	0x0801c314
 8012080:	0801c334 	.word	0x0801c334
 8012084:	acc09dd7 	.word	0xacc09dd7
 8012088:	0800092f 	.word	0x0800092f
 801208c:	08002c3b 	.word	0x08002c3b
 8012090:	3e4ccccd 	.word	0x3e4ccccd
 8012094:	3ecccccd 	.word	0x3ecccccd
 8012098:	3dcccccd 	.word	0x3dcccccd
 801209c:	3e99999a 	.word	0x3e99999a
 80120a0:	2000020c 	.word	0x2000020c
 80120a4:	08005695 	.word	0x08005695
 80120a8:	200004a8 	.word	0x200004a8
 80120ac:	2000028c 	.word	0x2000028c
 80120b0:	200005a8 	.word	0x200005a8
 80120b4:	e000e010 	.word	0xe000e010
 80120b8:	40007000 	.word	0x40007000
 80120bc:	e000ed00 	.word	0xe000ed00
 80120c0:	0801c2d8 	.word	0x0801c2d8
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 80120c4:	2bf9      	cmp	r3, #249	; 0xf9
 80120c6:	d000      	beq.n	80120ca <main+0xf4e>
 80120c8:	e1f6      	b.n	80124b8 <main+0x133c>
 80120ca:	7d63      	ldrb	r3, [r4, #21]
 80120cc:	2b05      	cmp	r3, #5
 80120ce:	d196      	bne.n	8011ffe <main+0xe82>
		uint8_t reg = uart_rx_buff[1];
 80120d0:	784b      	ldrb	r3, [r1, #1]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 80120d2:	788d      	ldrb	r5, [r1, #2]
		uint8_t reg = uart_rx_buff[1];
 80120d4:	9303      	str	r3, [sp, #12]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 80120d6:	78cb      	ldrb	r3, [r1, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 80120d8:	2200      	movs	r2, #0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 80120da:	021b      	lsls	r3, r3, #8
 80120dc:	432b      	orrs	r3, r5
 80120de:	790d      	ldrb	r5, [r1, #4]
	int8_t success = RegInt_setregf(reg, val, 0);
 80120e0:	9803      	ldr	r0, [sp, #12]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 80120e2:	042d      	lsls	r5, r5, #16
 80120e4:	432b      	orrs	r3, r5
 80120e6:	794d      	ldrb	r5, [r1, #5]
 80120e8:	062d      	lsls	r5, r5, #24
 80120ea:	431d      	orrs	r5, r3
	int8_t success = RegInt_setregf(reg, val, 0);
 80120ec:	0029      	movs	r1, r5
 80120ee:	f7f1 fe39 	bl	8003d64 <RegInt_setregf>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 80120f2:	2800      	cmp	r0, #0
 80120f4:	d007      	beq.n	8012106 <main+0xf8a>
	if(reg == 0x03){
 80120f6:	9b03      	ldr	r3, [sp, #12]
 80120f8:	2b03      	cmp	r3, #3
 80120fa:	d000      	beq.n	80120fe <main+0xf82>
 80120fc:	e149      	b.n	8012392 <main+0x1216>
	if (val == 0x00){stopService();}
 80120fe:	2d00      	cmp	r5, #0
 8012100:	d111      	bne.n	8012126 <main+0xfaa>
 8012102:	f7f1 fe6d 	bl	8003de0 <stopService>
		val = RegInt_getreg(reg);
 8012106:	9803      	ldr	r0, [sp, #12]
 8012108:	f7f1 fcd6 	bl	8003ab8 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 801210c:	22cc      	movs	r2, #204	; 0xcc
 801210e:	4bcd      	ldr	r3, [pc, #820]	; (8012444 <main+0x12c8>)
 8012110:	3346      	adds	r3, #70	; 0x46
 8012112:	701a      	strb	r2, [r3, #0]
		uart_tx_buff[1] = 0x05;
 8012114:	3ac7      	subs	r2, #199	; 0xc7
 8012116:	705a      	strb	r2, [r3, #1]
		uart_tx_buff[2] = 0x00;
 8012118:	2200      	movs	r2, #0
 801211a:	709a      	strb	r2, [r3, #2]
		uart_tx_buff[3] = 0xF5;
 801211c:	32f5      	adds	r2, #245	; 0xf5
 801211e:	70da      	strb	r2, [r3, #3]
		uart_tx_buff[4] = reg;
 8012120:	9a03      	ldr	r2, [sp, #12]
 8012122:	711a      	strb	r2, [r3, #4]
 8012124:	e75e      	b.n	8011fe4 <main+0xe68>
	if (val == 0x01){createService();}
 8012126:	2d01      	cmp	r5, #1
 8012128:	d102      	bne.n	8012130 <main+0xfb4>
 801212a:	f7f1 ff37 	bl	8003f9c <createService>
 801212e:	e7ea      	b.n	8012106 <main+0xf8a>
	if (val == 0x02){activateService();}
 8012130:	2d02      	cmp	r5, #2
 8012132:	d102      	bne.n	801213a <main+0xfbe>
		if(createService()){activateService();}
 8012134:	f7f1 fcc5 	bl	8003ac2 <activateService>
 8012138:	e7e5      	b.n	8012106 <main+0xf8a>
	if (val == 0x03){
 801213a:	2d03      	cmp	r5, #3
 801213c:	d104      	bne.n	8012148 <main+0xfcc>
		if(createService()){activateService();}
 801213e:	f7f1 ff2d 	bl	8003f9c <createService>
 8012142:	2800      	cmp	r0, #0
 8012144:	d0df      	beq.n	8012106 <main+0xf8a>
 8012146:	e7f5      	b.n	8012134 <main+0xfb8>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 8012148:	2d04      	cmp	r5, #4
 801214a:	d108      	bne.n	801215e <main+0xfe2>
	uint32_t flags = RegInt_getreg(reg); 
 801214c:	2006      	movs	r0, #6
 801214e:	f7f1 fcb3 	bl	8003ab8 <RegInt_getreg>
	RegInt_setregf(reg, flags, 1);
 8012152:	2201      	movs	r2, #1
	flags &= andbits;
 8012154:	b2c1      	uxtb	r1, r0
	RegInt_setregf(reg, flags, 1);
 8012156:	2006      	movs	r0, #6
 8012158:	f7f1 fe04 	bl	8003d64 <RegInt_setregf>
 801215c:	e7d3      	b.n	8012106 <main+0xf8a>
	if (val == 0x05){measure();}
 801215e:	2d05      	cmp	r5, #5
 8012160:	d000      	beq.n	8012164 <main+0xfe8>
 8012162:	e277      	b.n	8012654 <main+0x14d8>
    uint32_t service_type = RegInt_getreg(0x02);
 8012164:	2002      	movs	r0, #2
 8012166:	f7f1 fca7 	bl	8003ab8 <RegInt_getreg>
    if(service_type == 0x02){envelopeMeasure();}
 801216a:	2802      	cmp	r0, #2
 801216c:	d139      	bne.n	80121e2 <main+0x1066>
	INF_PRINTLN("Start Envelope measurement");
 801216e:	4bb6      	ldr	r3, [pc, #728]	; (8012448 <main+0x12cc>)
 8012170:	0018      	movs	r0, r3
 8012172:	4698      	mov	r8, r3
 8012174:	f002 fec6 	bl	8014f04 <__wrap_printf>
 8012178:	48b4      	ldr	r0, [pc, #720]	; (801244c <main+0x12d0>)
 801217a:	f002 fec3 	bl	8014f04 <__wrap_printf>
 801217e:	22bb      	movs	r2, #187	; 0xbb
 8012180:	4fb3      	ldr	r7, [pc, #716]	; (8012450 <main+0x12d4>)
 8012182:	4eb4      	ldr	r6, [pc, #720]	; (8012454 <main+0x12d8>)
 8012184:	0039      	movs	r1, r7
 8012186:	0092      	lsls	r2, r2, #2
 8012188:	0030      	movs	r0, r6
 801218a:	f002 febb 	bl	8014f04 <__wrap_printf>
 801218e:	4db2      	ldr	r5, [pc, #712]	; (8012458 <main+0x12dc>)
 8012190:	a91a      	add	r1, sp, #104	; 0x68
 8012192:	68aa      	ldr	r2, [r5, #8]
 8012194:	2300      	movs	r3, #0
 8012196:	604a      	str	r2, [r1, #4]
 8012198:	002a      	movs	r2, r5
 801219a:	3208      	adds	r2, #8
 801219c:	608a      	str	r2, [r1, #8]
 801219e:	002a      	movs	r2, r5
 80121a0:	320c      	adds	r2, #12
 80121a2:	610a      	str	r2, [r1, #16]
 80121a4:	2204      	movs	r2, #4
 80121a6:	69a0      	ldr	r0, [r4, #24]
 80121a8:	700b      	strb	r3, [r1, #0]
 80121aa:	60cb      	str	r3, [r1, #12]
 80121ac:	614a      	str	r2, [r1, #20]
 80121ae:	760b      	strb	r3, [r1, #24]
 80121b0:	764b      	strb	r3, [r1, #25]
 80121b2:	768b      	strb	r3, [r1, #26]
 80121b4:	f7f8 fca8 	bl	800ab08 <acc_service_get_next.constprop.80>
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 80121b8:	4ba8      	ldr	r3, [pc, #672]	; (801245c <main+0x12e0>)
 80121ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80121bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121be:	68a9      	ldr	r1, [r5, #8]
 80121c0:	6818      	ldr	r0, [r3, #0]
 80121c2:	0052      	lsls	r2, r2, #1
 80121c4:	f003 fa6e 	bl	80156a4 <memcpy>
	INF_PRINTLN("Envelope measurement complete");
 80121c8:	4640      	mov	r0, r8
 80121ca:	f002 fe9b 	bl	8014f04 <__wrap_printf>
 80121ce:	48a4      	ldr	r0, [pc, #656]	; (8012460 <main+0x12e4>)
 80121d0:	f002 fe98 	bl	8014f04 <__wrap_printf>
 80121d4:	22bc      	movs	r2, #188	; 0xbc
 80121d6:	0039      	movs	r1, r7
 80121d8:	0092      	lsls	r2, r2, #2
 80121da:	0030      	movs	r0, r6
 80121dc:	f002 fe92 	bl	8014f04 <__wrap_printf>
 80121e0:	e791      	b.n	8012106 <main+0xf8a>
    else if(service_type == 0x04){sparseMeasure();}
 80121e2:	2804      	cmp	r0, #4
 80121e4:	d18f      	bne.n	8012106 <main+0xf8a>
	INF_PRINTLN("Start Sparse measurement");
 80121e6:	4898      	ldr	r0, [pc, #608]	; (8012448 <main+0x12cc>)
 80121e8:	f002 fe8c 	bl	8014f04 <__wrap_printf>
 80121ec:	489d      	ldr	r0, [pc, #628]	; (8012464 <main+0x12e8>)
 80121ee:	f002 fe89 	bl	8014f04 <__wrap_printf>
 80121f2:	4f97      	ldr	r7, [pc, #604]	; (8012450 <main+0x12d4>)
 80121f4:	4a9c      	ldr	r2, [pc, #624]	; (8012468 <main+0x12ec>)
 80121f6:	0039      	movs	r1, r7
 80121f8:	4896      	ldr	r0, [pc, #600]	; (8012454 <main+0x12d8>)
 80121fa:	f002 fe83 	bl	8014f04 <__wrap_printf>
 80121fe:	4e96      	ldr	r6, [pc, #600]	; (8012458 <main+0x12dc>)
 8012200:	69e0      	ldr	r0, [r4, #28]
 8012202:	0032      	movs	r2, r6
 8012204:	0031      	movs	r1, r6
 8012206:	3210      	adds	r2, #16
 8012208:	3114      	adds	r1, #20
 801220a:	f7ee fc8e 	bl	8000b2a <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 801220e:	4b93      	ldr	r3, [pc, #588]	; (801245c <main+0x12e0>)
 8012210:	469a      	mov	sl, r3
 8012212:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8012214:	46d3      	mov	fp, sl
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 8012216:	9304      	str	r3, [sp, #16]
 8012218:	4b94      	ldr	r3, [pc, #592]	; (801246c <main+0x12f0>)
 801221a:	9904      	ldr	r1, [sp, #16]
 801221c:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
 801221e:	f7fc fcb7 	bl	800eb90 <__udivsi3>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8012222:	b285      	uxth	r5, r0
 8012224:	006d      	lsls	r5, r5, #1
 8012226:	426b      	negs	r3, r5
 8012228:	9305      	str	r3, [sp, #20]
 801222a:	2300      	movs	r3, #0
 801222c:	4699      	mov	r9, r3
 801222e:	4698      	mov	r8, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8012230:	4643      	mov	r3, r8
 8012232:	9a04      	ldr	r2, [sp, #16]
 8012234:	b29b      	uxth	r3, r3
 8012236:	44a9      	add	r9, r5
 8012238:	429a      	cmp	r2, r3
 801223a:	d900      	bls.n	801223e <main+0x10c2>
 801223c:	e083      	b.n	8012346 <main+0x11ca>
	INF_PRINTLN("Sparse measurement complete");
 801223e:	4882      	ldr	r0, [pc, #520]	; (8012448 <main+0x12cc>)
 8012240:	f002 fe60 	bl	8014f04 <__wrap_printf>
 8012244:	488a      	ldr	r0, [pc, #552]	; (8012470 <main+0x12f4>)
 8012246:	f002 fe5d 	bl	8014f04 <__wrap_printf>
 801224a:	4d82      	ldr	r5, [pc, #520]	; (8012454 <main+0x12d8>)
 801224c:	4a89      	ldr	r2, [pc, #548]	; (8012474 <main+0x12f8>)
 801224e:	0039      	movs	r1, r7
 8012250:	0028      	movs	r0, r5
 8012252:	f002 fe57 	bl	8014f04 <__wrap_printf>
	if(far_active){
 8012256:	4b85      	ldr	r3, [pc, #532]	; (801246c <main+0x12f0>)
 8012258:	7a1b      	ldrb	r3, [r3, #8]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d100      	bne.n	8012260 <main+0x10e4>
 801225e:	e752      	b.n	8012106 <main+0xf8a>
		if(!acc_service_deactivate(sparse_handle)){
 8012260:	69e0      	ldr	r0, [r4, #28]
 8012262:	f7f1 fab7 	bl	80037d4 <acc_service_deactivate>
 8012266:	2800      	cmp	r0, #0
 8012268:	d10a      	bne.n	8012280 <main+0x1104>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 801226a:	4883      	ldr	r0, [pc, #524]	; (8012478 <main+0x12fc>)
 801226c:	f002 fe4a 	bl	8014f04 <__wrap_printf>
 8012270:	4882      	ldr	r0, [pc, #520]	; (801247c <main+0x1300>)
 8012272:	f002 fe47 	bl	8014f04 <__wrap_printf>
 8012276:	4a82      	ldr	r2, [pc, #520]	; (8012480 <main+0x1304>)
 8012278:	0039      	movs	r1, r7
 801227a:	0028      	movs	r0, r5
 801227c:	f002 fe42 	bl	8014f04 <__wrap_printf>
		if (!acc_service_activate(sparse_handle_far)){
 8012280:	6920      	ldr	r0, [r4, #16]
 8012282:	f7f1 fb19 	bl	80038b8 <acc_service_activate>
 8012286:	2800      	cmp	r0, #0
 8012288:	d10a      	bne.n	80122a0 <main+0x1124>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 801228a:	487b      	ldr	r0, [pc, #492]	; (8012478 <main+0x12fc>)
 801228c:	f002 fe3a 	bl	8014f04 <__wrap_printf>
 8012290:	487c      	ldr	r0, [pc, #496]	; (8012484 <main+0x1308>)
 8012292:	f002 fe37 	bl	8014f04 <__wrap_printf>
 8012296:	4a7c      	ldr	r2, [pc, #496]	; (8012488 <main+0x130c>)
 8012298:	0039      	movs	r1, r7
 801229a:	0028      	movs	r0, r5
 801229c:	f002 fe32 	bl	8014f04 <__wrap_printf>
 80122a0:	4e6d      	ldr	r6, [pc, #436]	; (8012458 <main+0x12dc>)
 80122a2:	6920      	ldr	r0, [r4, #16]
 80122a4:	0032      	movs	r2, r6
 80122a6:	0031      	movs	r1, r6
 80122a8:	3218      	adds	r2, #24
 80122aa:	311c      	adds	r1, #28
 80122ac:	f7ee fc3d 	bl	8000b2a <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80122b0:	4653      	mov	r3, sl
 80122b2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80122b4:	4699      	mov	r9, r3
 80122b6:	4b6d      	ldr	r3, [pc, #436]	; (801246c <main+0x12f0>)
 80122b8:	4649      	mov	r1, r9
 80122ba:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
 80122bc:	f7fc fc68 	bl	800eb90 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 80122c0:	b280      	uxth	r0, r0
 80122c2:	0043      	lsls	r3, r0, #1
 80122c4:	469b      	mov	fp, r3
		bins_far = sparse_metadata_far.data_length/sweeps;
 80122c6:	4b69      	ldr	r3, [pc, #420]	; (801246c <main+0x12f0>)
 80122c8:	4649      	mov	r1, r9
 80122ca:	8a98      	ldrh	r0, [r3, #20]
 80122cc:	f7fc fc60 	bl	800eb90 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 80122d0:	b285      	uxth	r5, r0
 80122d2:	006d      	lsls	r5, r5, #1
 80122d4:	426b      	negs	r3, r5
 80122d6:	9304      	str	r3, [sp, #16]
 80122d8:	2300      	movs	r3, #0
 80122da:	4698      	mov	r8, r3
 80122dc:	001f      	movs	r7, r3
 80122de:	4b5f      	ldr	r3, [pc, #380]	; (801245c <main+0x12e0>)
 80122e0:	469a      	mov	sl, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 80122e2:	b2bb      	uxth	r3, r7
 80122e4:	44a8      	add	r8, r5
 80122e6:	454b      	cmp	r3, r9
 80122e8:	d33f      	bcc.n	801236a <main+0x11ee>
		if(!acc_service_deactivate(sparse_handle_far)){
 80122ea:	6920      	ldr	r0, [r4, #16]
 80122ec:	f7f1 fa72 	bl	80037d4 <acc_service_deactivate>
 80122f0:	4e57      	ldr	r6, [pc, #348]	; (8012450 <main+0x12d4>)
 80122f2:	4d58      	ldr	r5, [pc, #352]	; (8012454 <main+0x12d8>)
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d10a      	bne.n	801230e <main+0x1192>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 80122f8:	485f      	ldr	r0, [pc, #380]	; (8012478 <main+0x12fc>)
 80122fa:	f002 fe03 	bl	8014f04 <__wrap_printf>
 80122fe:	4863      	ldr	r0, [pc, #396]	; (801248c <main+0x1310>)
 8012300:	f002 fe00 	bl	8014f04 <__wrap_printf>
 8012304:	4a62      	ldr	r2, [pc, #392]	; (8012490 <main+0x1314>)
 8012306:	0031      	movs	r1, r6
 8012308:	0028      	movs	r0, r5
 801230a:	f002 fdfb 	bl	8014f04 <__wrap_printf>
		if (!acc_service_activate(sparse_handle)){
 801230e:	69e0      	ldr	r0, [r4, #28]
 8012310:	f7f1 fad2 	bl	80038b8 <acc_service_activate>
 8012314:	2800      	cmp	r0, #0
 8012316:	d10a      	bne.n	801232e <main+0x11b2>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 8012318:	4857      	ldr	r0, [pc, #348]	; (8012478 <main+0x12fc>)
 801231a:	f002 fdf3 	bl	8014f04 <__wrap_printf>
 801231e:	485d      	ldr	r0, [pc, #372]	; (8012494 <main+0x1318>)
 8012320:	f002 fdf0 	bl	8014f04 <__wrap_printf>
 8012324:	4a5c      	ldr	r2, [pc, #368]	; (8012498 <main+0x131c>)
 8012326:	0031      	movs	r1, r6
 8012328:	0028      	movs	r0, r5
 801232a:	f002 fdeb 	bl	8014f04 <__wrap_printf>
		INF_PRINTLN("Sparse Far measurement end");
 801232e:	4846      	ldr	r0, [pc, #280]	; (8012448 <main+0x12cc>)
 8012330:	f002 fde8 	bl	8014f04 <__wrap_printf>
 8012334:	4859      	ldr	r0, [pc, #356]	; (801249c <main+0x1320>)
 8012336:	f002 fde5 	bl	8014f04 <__wrap_printf>
 801233a:	4a59      	ldr	r2, [pc, #356]	; (80124a0 <main+0x1324>)
 801233c:	0031      	movs	r1, r6
 801233e:	0028      	movs	r0, r5
 8012340:	f002 fde0 	bl	8014f04 <__wrap_printf>
 8012344:	e6df      	b.n	8012106 <main+0xf8a>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 8012346:	465a      	mov	r2, fp
 8012348:	4643      	mov	r3, r8
 801234a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	5898      	ldr	r0, [r3, r2]
 8012350:	9b05      	ldr	r3, [sp, #20]
 8012352:	002a      	movs	r2, r5
 8012354:	444b      	add	r3, r9
 8012356:	0019      	movs	r1, r3
 8012358:	6973      	ldr	r3, [r6, #20]
 801235a:	469c      	mov	ip, r3
 801235c:	4461      	add	r1, ip
 801235e:	f003 f9a1 	bl	80156a4 <memcpy>
 8012362:	2301      	movs	r3, #1
 8012364:	469c      	mov	ip, r3
 8012366:	44e0      	add	r8, ip
 8012368:	e762      	b.n	8012230 <main+0x10b4>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 801236a:	4652      	mov	r2, sl
 801236c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801236e:	00bb      	lsls	r3, r7, #2
 8012370:	5898      	ldr	r0, [r3, r2]
 8012372:	9b04      	ldr	r3, [sp, #16]
 8012374:	4458      	add	r0, fp
 8012376:	4443      	add	r3, r8
 8012378:	0019      	movs	r1, r3
 801237a:	69f3      	ldr	r3, [r6, #28]
 801237c:	002a      	movs	r2, r5
 801237e:	469c      	mov	ip, r3
 8012380:	4461      	add	r1, ip
 8012382:	f003 f98f 	bl	80156a4 <memcpy>
 8012386:	3701      	adds	r7, #1
 8012388:	e7ab      	b.n	80122e2 <main+0x1166>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
	float sweep_rate = sparse_metadata.sweep_rate;
	uint8v2_t data_size = {sweeps,bins};
	
	float min_scale = 1.0f;
 801238a:	23fe      	movs	r3, #254	; 0xfe
 801238c:	059b      	lsls	r3, r3, #22
 801238e:	469b      	mov	fp, r3
 8012390:	e19c      	b.n	80126cc <main+0x1550>
	if(reg == 0x07){
 8012392:	9b03      	ldr	r3, [sp, #12]
 8012394:	2b07      	cmp	r3, #7
 8012396:	d103      	bne.n	80123a0 <main+0x1224>
		changeUART1baud(val);
 8012398:	0028      	movs	r0, r5
 801239a:	f7f0 f809 	bl	80023b0 <changeUART1baud>
 801239e:	e6b2      	b.n	8012106 <main+0xf8a>
    if(reg == 0x0A){
 80123a0:	9b03      	ldr	r3, [sp, #12]
 80123a2:	2b0a      	cmp	r3, #10
 80123a4:	d000      	beq.n	80123a8 <main+0x122c>
 80123a6:	e6ae      	b.n	8012106 <main+0xf8a>
    if(mode == 0x00000000){return;}
 80123a8:	2d00      	cmp	r5, #0
 80123aa:	d100      	bne.n	80123ae <main+0x1232>
 80123ac:	e6ab      	b.n	8012106 <main+0xf8a>
    if(mode == 0x00000001){    
 80123ae:	2d01      	cmp	r5, #1
 80123b0:	d142      	bne.n	8012438 <main+0x12bc>
        stopService();
 80123b2:	f7f1 fd15 	bl	8003de0 <stopService>
        INF_PRINTLN("STM32 Sleep");
 80123b6:	4f24      	ldr	r7, [pc, #144]	; (8012448 <main+0x12cc>)
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80123b8:	4c3a      	ldr	r4, [pc, #232]	; (80124a4 <main+0x1328>)
 80123ba:	0038      	movs	r0, r7
 80123bc:	f002 fda2 	bl	8014f04 <__wrap_printf>
 80123c0:	4839      	ldr	r0, [pc, #228]	; (80124a8 <main+0x132c>)
 80123c2:	f002 fd9f 	bl	8014f04 <__wrap_printf>
 80123c6:	2296      	movs	r2, #150	; 0x96
 80123c8:	4e21      	ldr	r6, [pc, #132]	; (8012450 <main+0x12d4>)
 80123ca:	4d22      	ldr	r5, [pc, #136]	; (8012454 <main+0x12d8>)
 80123cc:	0031      	movs	r1, r6
 80123ce:	0052      	lsls	r2, r2, #1
 80123d0:	0028      	movs	r0, r5
 80123d2:	f002 fd97 	bl	8014f04 <__wrap_printf>
 80123d6:	2102      	movs	r1, #2
 80123d8:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80123da:	4834      	ldr	r0, [pc, #208]	; (80124ac <main+0x1330>)
 80123dc:	438b      	bics	r3, r1
 80123de:	6023      	str	r3, [r4, #0]
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80123e0:	4b33      	ldr	r3, [pc, #204]	; (80124b0 <main+0x1334>)
 80123e2:	691a      	ldr	r2, [r3, #16]
 80123e4:	438a      	bics	r2, r1
 80123e6:	611a      	str	r2, [r3, #16]
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80123e8:	2207      	movs	r2, #7
 80123ea:	6801      	ldr	r1, [r0, #0]
 80123ec:	4690      	mov	r8, r2
 80123ee:	4391      	bics	r1, r2
 80123f0:	3a06      	subs	r2, #6
 80123f2:	430a      	orrs	r2, r1
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80123f4:	2104      	movs	r1, #4
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80123f6:	6002      	str	r2, [r0, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80123f8:	691a      	ldr	r2, [r3, #16]
 80123fa:	430a      	orrs	r2, r1
 80123fc:	611a      	str	r2, [r3, #16]
    __SEV();
 80123fe:	bf40      	sev
    __WFE();
 8012400:	bf20      	wfe
    __WFE();
 8012402:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8012404:	691a      	ldr	r2, [r3, #16]
 8012406:	438a      	bics	r2, r1
 8012408:	611a      	str	r2, [r3, #16]
        SystemClock_Config();
 801240a:	f7f0 f82d 	bl	8002468 <SystemClock_Config>
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 801240e:	2102      	movs	r1, #2
 8012410:	6823      	ldr	r3, [r4, #0]
        uint32_t baudrate = RegInt_getreg(0x07);
 8012412:	4640      	mov	r0, r8
 8012414:	430b      	orrs	r3, r1
 8012416:	6023      	str	r3, [r4, #0]
 8012418:	f7f1 fb4e 	bl	8003ab8 <RegInt_getreg>
        changeUART1baud(baudrate);
 801241c:	f7ef ffc8 	bl	80023b0 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 8012420:	0038      	movs	r0, r7
 8012422:	f002 fd6f 	bl	8014f04 <__wrap_printf>
 8012426:	4823      	ldr	r0, [pc, #140]	; (80124b4 <main+0x1338>)
 8012428:	f002 fd6c 	bl	8014f04 <__wrap_printf>
 801242c:	2238      	movs	r2, #56	; 0x38
 801242e:	0031      	movs	r1, r6
 8012430:	32ff      	adds	r2, #255	; 0xff
 8012432:	0028      	movs	r0, r5
 8012434:	f002 fd66 	bl	8014f04 <__wrap_printf>
    RegInt_setregf(0x0A,0x00000000,1);
 8012438:	2201      	movs	r2, #1
 801243a:	2100      	movs	r1, #0
 801243c:	200a      	movs	r0, #10
 801243e:	f7f1 fc91 	bl	8003d64 <RegInt_setregf>
 8012442:	e660      	b.n	8012106 <main+0xf8a>
 8012444:	2000028c 	.word	0x2000028c
 8012448:	0801c206 	.word	0x0801c206
 801244c:	0801c357 	.word	0x0801c357
 8012450:	0801bcdb 	.word	0x0801bcdb
 8012454:	0801c13a 	.word	0x0801c13a
 8012458:	2000030c 	.word	0x2000030c
 801245c:	2000010c 	.word	0x2000010c
 8012460:	0801c372 	.word	0x0801c372
 8012464:	0801c390 	.word	0x0801c390
 8012468:	000002ca 	.word	0x000002ca
 801246c:	2000018c 	.word	0x2000018c
 8012470:	0801c3a9 	.word	0x0801c3a9
 8012474:	000002ce 	.word	0x000002ce
 8012478:	0801bcff 	.word	0x0801bcff
 801247c:	0801c3c5 	.word	0x0801c3c5
 8012480:	000002d2 	.word	0x000002d2
 8012484:	0801c3f0 	.word	0x0801c3f0
 8012488:	000002d6 	.word	0x000002d6
 801248c:	0801c41d 	.word	0x0801c41d
 8012490:	000002df 	.word	0x000002df
 8012494:	0801c44c 	.word	0x0801c44c
 8012498:	000002e2 	.word	0x000002e2
 801249c:	0801c475 	.word	0x0801c475
 80124a0:	000002e6 	.word	0x000002e6
 80124a4:	e000e010 	.word	0xe000e010
 80124a8:	0801c50c 	.word	0x0801c50c
 80124ac:	40007000 	.word	0x40007000
 80124b0:	e000ed00 	.word	0xe000ed00
 80124b4:	0801c518 	.word	0x0801c518
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 80124b8:	2bfa      	cmp	r3, #250	; 0xfa
 80124ba:	d000      	beq.n	80124be <main+0x1342>
 80124bc:	e59f      	b.n	8011ffe <main+0xe82>
 80124be:	784a      	ldrb	r2, [r1, #1]
 80124c0:	0013      	movs	r3, r2
 80124c2:	3318      	adds	r3, #24
 80124c4:	b2db      	uxtb	r3, r3
 80124c6:	2b01      	cmp	r3, #1
 80124c8:	d900      	bls.n	80124cc <main+0x1350>
 80124ca:	e598      	b.n	8011ffe <main+0xe82>
 80124cc:	7d63      	ldrb	r3, [r4, #21]
 80124ce:	2b03      	cmp	r3, #3
 80124d0:	d000      	beq.n	80124d4 <main+0x1358>
 80124d2:	e594      	b.n	8011ffe <main+0xe82>
		uint16_t offst = (offst_h << 8) | offst_l;
 80124d4:	78c8      	ldrb	r0, [r1, #3]
 80124d6:	788f      	ldrb	r7, [r1, #2]
 80124d8:	0200      	lsls	r0, r0, #8
 80124da:	4307      	orrs	r7, r0
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 80124dc:	4848      	ldr	r0, [pc, #288]	; (8012600 <main+0x1484>)
 80124de:	4949      	ldr	r1, [pc, #292]	; (8012604 <main+0x1488>)
 80124e0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80124e2:	005b      	lsls	r3, r3, #1
 80124e4:	620b      	str	r3, [r1, #32]
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 80124e6:	8a83      	ldrh	r3, [r0, #20]
 80124e8:	005b      	lsls	r3, r3, #1
 80124ea:	624b      	str	r3, [r1, #36]	; 0x24
		if(uart_rx_buff[1] == 0xE8){
 80124ec:	2ae8      	cmp	r2, #232	; 0xe8
 80124ee:	d165      	bne.n	80125bc <main+0x1440>
        DBG_PRINTINT(bins);
 80124f0:	23bc      	movs	r3, #188	; 0xbc
 80124f2:	4d45      	ldr	r5, [pc, #276]	; (8012608 <main+0x148c>)
 80124f4:	4c45      	ldr	r4, [pc, #276]	; (801260c <main+0x1490>)
 80124f6:	4e46      	ldr	r6, [pc, #280]	; (8012610 <main+0x1494>)
 80124f8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80124fa:	4946      	ldr	r1, [pc, #280]	; (8012614 <main+0x1498>)
 80124fc:	9300      	str	r3, [sp, #0]
 80124fe:	0020      	movs	r0, r4
 8012500:	0033      	movs	r3, r6
 8012502:	f002 fcff 	bl	8014f04 <__wrap_printf>
        DBG_PRINTINT(sweeps);
 8012506:	23bd      	movs	r3, #189	; 0xbd
 8012508:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
 801250a:	4943      	ldr	r1, [pc, #268]	; (8012618 <main+0x149c>)
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	0020      	movs	r0, r4
 8012510:	0033      	movs	r3, r6
 8012512:	f002 fcf7 	bl	8014f04 <__wrap_printf>
		datalen = sweeps*bins*sizeof(uint16_t);
 8012516:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8012518:	8eec      	ldrh	r4, [r5, #54]	; 0x36
 801251a:	434c      	muls	r4, r1
 801251c:	0064      	lsls	r4, r4, #1
		uart_tx_buff[0] = 0xCC;
 801251e:	23cc      	movs	r3, #204	; 0xcc
 8012520:	4d3e      	ldr	r5, [pc, #248]	; (801261c <main+0x14a0>)
 8012522:	4699      	mov	r9, r3
 8012524:	3546      	adds	r5, #70	; 0x46
 8012526:	702b      	strb	r3, [r5, #0]
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8012528:	1c63      	adds	r3, r4, #1
 801252a:	706b      	strb	r3, [r5, #1]
 801252c:	0a1b      	lsrs	r3, r3, #8
		uart_tx_buff[2] = get_byte(datalen+1,1);
 801252e:	70ab      	strb	r3, [r5, #2]
		uart_tx_buff[3] = 0xF7;
 8012530:	23f7      	movs	r3, #247	; 0xf7
 8012532:	70eb      	strb	r3, [r5, #3]
		uart_tx_buff[4] = uart_rx_buff[1];
 8012534:	4b3a      	ldr	r3, [pc, #232]	; (8012620 <main+0x14a4>)
		DBG_PRINTLN("buffer transmitt");
 8012536:	483b      	ldr	r0, [pc, #236]	; (8012624 <main+0x14a8>)
		uart_tx_buff[4] = uart_rx_buff[1];
 8012538:	785b      	ldrb	r3, [r3, #1]
 801253a:	712b      	strb	r3, [r5, #4]
		DBG_PRINTLN("buffer transmitt");
 801253c:	f002 fce2 	bl	8014f04 <__wrap_printf>
 8012540:	4839      	ldr	r0, [pc, #228]	; (8012628 <main+0x14ac>)
 8012542:	f002 fcdf 	bl	8014f04 <__wrap_printf>
 8012546:	22c9      	movs	r2, #201	; 0xc9
 8012548:	4931      	ldr	r1, [pc, #196]	; (8012610 <main+0x1494>)
 801254a:	4838      	ldr	r0, [pc, #224]	; (801262c <main+0x14b0>)
 801254c:	f002 fcda 	bl	8014f04 <__wrap_printf>
		DBG_PRINTINT(datalen);
 8012550:	23ca      	movs	r3, #202	; 0xca
 8012552:	4e2e      	ldr	r6, [pc, #184]	; (801260c <main+0x1490>)
 8012554:	9300      	str	r3, [sp, #0]
 8012556:	0022      	movs	r2, r4
 8012558:	4b2d      	ldr	r3, [pc, #180]	; (8012610 <main+0x1494>)
 801255a:	4935      	ldr	r1, [pc, #212]	; (8012630 <main+0x14b4>)
 801255c:	0030      	movs	r0, r6
 801255e:	f002 fcd1 	bl	8014f04 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 8012562:	4b28      	ldr	r3, [pc, #160]	; (8012604 <main+0x1488>)
 8012564:	4933      	ldr	r1, [pc, #204]	; (8012634 <main+0x14b8>)
 8012566:	4698      	mov	r8, r3
 8012568:	23cb      	movs	r3, #203	; 0xcb
 801256a:	4642      	mov	r2, r8
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	6a12      	ldr	r2, [r2, #32]
 8012570:	4b27      	ldr	r3, [pc, #156]	; (8012610 <main+0x1494>)
 8012572:	0030      	movs	r0, r6
 8012574:	f002 fcc6 	bl	8014f04 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 8012578:	464b      	mov	r3, r9
 801257a:	4642      	mov	r2, r8
 801257c:	9300      	str	r3, [sp, #0]
 801257e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012580:	4b23      	ldr	r3, [pc, #140]	; (8012610 <main+0x1494>)
 8012582:	492d      	ldr	r1, [pc, #180]	; (8012638 <main+0x14bc>)
 8012584:	0030      	movs	r0, r6
 8012586:	f002 fcbd 	bl	8014f04 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 801258a:	0029      	movs	r1, r5
 801258c:	230a      	movs	r3, #10
 801258e:	2205      	movs	r2, #5
 8012590:	482a      	ldr	r0, [pc, #168]	; (801263c <main+0x14c0>)
 8012592:	f7f8 fcc9 	bl	800af28 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 8012596:	2201      	movs	r2, #1
 8012598:	4b29      	ldr	r3, [pc, #164]	; (8012640 <main+0x14c4>)
		DBG_PRINTINT(queue_cmd_end);
 801259a:	492a      	ldr	r1, [pc, #168]	; (8012644 <main+0x14c8>)
		queue_cmd_end = 1;
 801259c:	3338      	adds	r3, #56	; 0x38
 801259e:	701a      	strb	r2, [r3, #0]
		DBG_PRINTINT(queue_cmd_end);
 80125a0:	23d0      	movs	r3, #208	; 0xd0
 80125a2:	0030      	movs	r0, r6
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	4b1a      	ldr	r3, [pc, #104]	; (8012610 <main+0x1494>)
 80125a8:	f002 fcac 	bl	8014f04 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 80125ac:	4b16      	ldr	r3, [pc, #88]	; (8012608 <main+0x148c>)
 80125ae:	b2a1      	uxth	r1, r4
 80125b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125b2:	6818      	ldr	r0, [r3, #0]
 80125b4:	19c0      	adds	r0, r0, r7
 80125b6:	f7f8 f927 	bl	800a808 <HAL_UART_Transmit_IT.constprop.123>
 80125ba:	e520      	b.n	8011ffe <main+0xe82>
		datalen = 128*sizeof(uint16_t);
 80125bc:	2480      	movs	r4, #128	; 0x80
 80125be:	0064      	lsls	r4, r4, #1
 80125c0:	e7ad      	b.n	801251e <main+0x13a2>
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80125c2:	4b21      	ldr	r3, [pc, #132]	; (8012648 <main+0x14cc>)
 80125c4:	4921      	ldr	r1, [pc, #132]	; (801264c <main+0x14d0>)
 80125c6:	6818      	ldr	r0, [r3, #0]
 80125c8:	2306      	movs	r3, #6
 80125ca:	4358      	muls	r0, r3
 80125cc:	f7fc fae0 	bl	800eb90 <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80125d0:	6833      	ldr	r3, [r6, #0]
 80125d2:	4a1f      	ldr	r2, [pc, #124]	; (8012650 <main+0x14d4>)
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80125d4:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80125d6:	4013      	ands	r3, r2
 80125d8:	6033      	str	r3, [r6, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	422b      	tst	r3, r5
 80125de:	d100      	bne.n	80125e2 <main+0x1466>
 80125e0:	e521      	b.n	8012026 <main+0xeaa>
  {
    if(wait_loop_index != 0U)
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d100      	bne.n	80125e8 <main+0x146c>
 80125e6:	e526      	b.n	8012036 <main+0xeba>
    {
      wait_loop_index--;
 80125e8:	3801      	subs	r0, #1
 80125ea:	e7f6      	b.n	80125da <main+0x145e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80125ec:	23f0      	movs	r3, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80125ee:	2600      	movs	r6, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80125f0:	011b      	lsls	r3, r3, #4
 80125f2:	4298      	cmp	r0, r3
 80125f4:	d001      	beq.n	80125fa <main+0x147e>
 80125f6:	f7ff f8fe 	bl	80117f6 <main+0x67a>
 80125fa:	f7ff f8ff 	bl	80117fc <main+0x680>
 80125fe:	46c0      	nop			; (mov r8, r8)
 8012600:	2000018c 	.word	0x2000018c
 8012604:	2000030c 	.word	0x2000030c
 8012608:	2000010c 	.word	0x2000010c
 801260c:	0801c133 	.word	0x0801c133
 8012610:	0801bcdb 	.word	0x0801bcdb
 8012614:	0801c523 	.word	0x0801c523
 8012618:	0801c8b6 	.word	0x0801c8b6
 801261c:	2000028c 	.word	0x2000028c
 8012620:	200004a8 	.word	0x200004a8
 8012624:	0801bcc3 	.word	0x0801bcc3
 8012628:	0801c528 	.word	0x0801c528
 801262c:	0801c13a 	.word	0x0801c13a
 8012630:	0801c539 	.word	0x0801c539
 8012634:	0801c541 	.word	0x0801c541
 8012638:	0801c549 	.word	0x0801c549
 801263c:	200005a8 	.word	0x200005a8
 8012640:	2000020c 	.word	0x2000020c
 8012644:	0801c555 	.word	0x0801c555
 8012648:	20000000 	.word	0x20000000
 801264c:	000f4240 	.word	0x000f4240
 8012650:	ffffbfff 	.word	0xffffbfff
	if (val == 0x06){evalData();}
 8012654:	2d06      	cmp	r5, #6
 8012656:	d000      	beq.n	801265a <main+0x14de>
 8012658:	e555      	b.n	8012106 <main+0xf8a>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 801265a:	4ba9      	ldr	r3, [pc, #676]	; (8012900 <main+0x1784>)
	uint8v2_t data_size = {sweeps,bins};
 801265c:	4fa9      	ldr	r7, [pc, #676]	; (8012904 <main+0x1788>)
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 801265e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint8v2_t data_size = {sweeps,bins};
 8012660:	ad0a      	add	r5, sp, #40	; 0x28
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8012662:	9204      	str	r2, [sp, #16]
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 8012664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	float sweep_rate = sparse_metadata.sweep_rate;
 8012666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8012668:	20d4      	movs	r0, #212	; 0xd4
	float sweep_rate = sparse_metadata.sweep_rate;
 801266a:	9306      	str	r3, [sp, #24]
	uint8v2_t data_size = {sweeps,bins};
 801266c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 801266e:	9205      	str	r2, [sp, #20]
	uint8v2_t data_size = {sweeps,bins};
 8012670:	702b      	strb	r3, [r5, #0]
 8012672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012674:	706b      	strb	r3, [r5, #1]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8012676:	f7f1 fa1f 	bl	8003ab8 <RegInt_getreg>
 801267a:	9007      	str	r0, [sp, #28]
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 801267c:	20d8      	movs	r0, #216	; 0xd8
 801267e:	f7f1 fa1b 	bl	8003ab8 <RegInt_getreg>
 8012682:	9008      	str	r0, [sp, #32]
	uint32_t mode = RegInt_getreg(0xD6);
 8012684:	20d6      	movs	r0, #214	; 0xd6
 8012686:	f7f1 fa17 	bl	8003ab8 <RegInt_getreg>
 801268a:	0004      	movs	r4, r0
	uint8_t roi_radius = RegInt_getreg(0xD7);
 801268c:	20d7      	movs	r0, #215	; 0xd7
 801268e:	f7f1 fa13 	bl	8003ab8 <RegInt_getreg>
 8012692:	9009      	str	r0, [sp, #36]	; 0x24
	uint32_t band_filt = RegInt_getreg(0xD9);
 8012694:	20d9      	movs	r0, #217	; 0xd9
 8012696:	f7f1 fa0f 	bl	8003ab8 <RegInt_getreg>
	float velocity;
	float distance;
	float amplitude;
	float meansqdist;

	DBG_PRINTINT(mode);
 801269a:	4b9b      	ldr	r3, [pc, #620]	; (8012908 <main+0x178c>)
	uint32_t band_filt = RegInt_getreg(0xD9);
 801269c:	0006      	movs	r6, r0
	DBG_PRINTINT(mode);
 801269e:	9300      	str	r3, [sp, #0]
 80126a0:	0022      	movs	r2, r4
 80126a2:	4b9a      	ldr	r3, [pc, #616]	; (801290c <main+0x1790>)
 80126a4:	499a      	ldr	r1, [pc, #616]	; (8012910 <main+0x1794>)
 80126a6:	489b      	ldr	r0, [pc, #620]	; (8012914 <main+0x1798>)
 80126a8:	f002 fc2c 	bl	8014f04 <__wrap_printf>

	//dc removal
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 80126ac:	07e3      	lsls	r3, r4, #31
 80126ae:	d503      	bpl.n	80126b8 <main+0x153c>
 80126b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80126b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126b4:	f7ee f825 	bl	8000702 <dcdatarm>
	
	//do fft on each row of data
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 80126b8:	2302      	movs	r3, #2
 80126ba:	421c      	tst	r4, r3
 80126bc:	d100      	bne.n	80126c0 <main+0x1544>
 80126be:	e664      	b.n	801238a <main+0x120e>
 80126c0:	4b90      	ldr	r3, [pc, #576]	; (8012904 <main+0x1788>)
 80126c2:	6829      	ldr	r1, [r5, #0]
 80126c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126c6:	f7ef fa13 	bl	8001af0 <dofft>
 80126ca:	4683      	mov	fp, r0
	
	//bandstop filter
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 80126cc:	06a3      	lsls	r3, r4, #26
 80126ce:	d505      	bpl.n	80126dc <main+0x1560>
 80126d0:	4b8c      	ldr	r3, [pc, #560]	; (8012904 <main+0x1788>)
 80126d2:	0032      	movs	r2, r6
 80126d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80126d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126d8:	f7ed ffdf 	bl	800069a <dobandstop>
	
	//do convolution
	if(mode & 0x00000004){
 80126dc:	0763      	lsls	r3, r4, #29
 80126de:	d50d      	bpl.n	80126fc <main+0x1580>
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80126e0:	20d5      	movs	r0, #213	; 0xd5
 80126e2:	f7f1 f9e9 	bl	8003ab8 <RegInt_getreg>
 80126e6:	f7fc fe81 	bl	800f3ec <__aeabi_ui2f>
 80126ea:	498b      	ldr	r1, [pc, #556]	; (8012918 <main+0x179c>)
 80126ec:	f7fb fe0c 	bl	800e308 <__aeabi_fdiv>
		doconv(data, data_size, st_dev);
 80126f0:	4b84      	ldr	r3, [pc, #528]	; (8012904 <main+0x1788>)
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80126f2:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 80126f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80126f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126f8:	f7ee fd8a 	bl	8001210 <doconv>
	}
	//calulate velocity parameters
	if(mode & 0x00000008){
 80126fc:	0723      	lsls	r3, r4, #28
 80126fe:	d400      	bmi.n	8012702 <main+0x1586>
 8012700:	e501      	b.n	8012106 <main+0xf8a>
			//get maximum index and maximum
		uint8v2_t max_index = max2d(data, data_size);
 8012702:	4b80      	ldr	r3, [pc, #512]	; (8012904 <main+0x1788>)
 8012704:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012706:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8012708:	469a      	mov	sl, r3
 801270a:	0038      	movs	r0, r7
 801270c:	f7ed ff83 	bl	8000616 <max2d>
 8012710:	ab0b      	add	r3, sp, #44	; 0x2c
 8012712:	b2c5      	uxtb	r5, r0
 8012714:	8018      	strh	r0, [r3, #0]
 8012716:	0406      	lsls	r6, r0, #16
		uint16_t apex = data[max_index.x1][max_index.x2];
 8012718:	00ab      	lsls	r3, r5, #2
 801271a:	59db      	ldr	r3, [r3, r7]
		uint8v2_t max_index = max2d(data, data_size);
 801271c:	0e36      	lsrs	r6, r6, #24
		uint16_t apex = data[max_index.x1][max_index.x2];
 801271e:	0072      	lsls	r2, r6, #1
		
		DBG_PRINTINT(apex);
 8012720:	5ad3      	ldrh	r3, [r2, r3]
 8012722:	4f7c      	ldr	r7, [pc, #496]	; (8012914 <main+0x1798>)
 8012724:	4699      	mov	r9, r3
 8012726:	4b79      	ldr	r3, [pc, #484]	; (801290c <main+0x1790>)
 8012728:	464a      	mov	r2, r9
 801272a:	4698      	mov	r8, r3
 801272c:	4b7b      	ldr	r3, [pc, #492]	; (801291c <main+0x17a0>)
 801272e:	497c      	ldr	r1, [pc, #496]	; (8012920 <main+0x17a4>)
 8012730:	9300      	str	r3, [sp, #0]
 8012732:	0038      	movs	r0, r7
 8012734:	4643      	mov	r3, r8
 8012736:	f002 fbe5 	bl	8014f04 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 801273a:	23d0      	movs	r3, #208	; 0xd0
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	002a      	movs	r2, r5
 8012740:	9300      	str	r3, [sp, #0]
 8012742:	4978      	ldr	r1, [pc, #480]	; (8012924 <main+0x17a8>)
 8012744:	4643      	mov	r3, r8
 8012746:	0038      	movs	r0, r7
 8012748:	f002 fbdc 	bl	8014f04 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 801274c:	4b76      	ldr	r3, [pc, #472]	; (8012928 <main+0x17ac>)
 801274e:	0032      	movs	r2, r6
 8012750:	4976      	ldr	r1, [pc, #472]	; (801292c <main+0x17b0>)
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	0038      	movs	r0, r7
 8012756:	4643      	mov	r3, r8
 8012758:	f002 fbd4 	bl	8014f04 <__wrap_printf>
		
		//get mean square distnace from maximum
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 801275c:	4653      	mov	r3, sl
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 801275e:	9807      	ldr	r0, [sp, #28]
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8012760:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 8012762:	f7fc fe43 	bl	800f3ec <__aeabi_ui2f>
 8012766:	496c      	ldr	r1, [pc, #432]	; (8012918 <main+0x179c>)
 8012768:	f7fb fdce 	bl	800e308 <__aeabi_fdiv>
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 801276c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 801276e:	1c03      	adds	r3, r0, #0
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 8012770:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012772:	0028      	movs	r0, r5
 8012774:	f7ed fecc 	bl	8000510 <get_msd>
 8012778:	1c06      	adds	r6, r0, #0
				
		//null data less than threshold
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 801277a:	06e3      	lsls	r3, r4, #27
 801277c:	d50b      	bpl.n	8012796 <main+0x161a>
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 801277e:	9808      	ldr	r0, [sp, #32]
 8012780:	f7fc fe34 	bl	800f3ec <__aeabi_ui2f>
 8012784:	4964      	ldr	r1, [pc, #400]	; (8012918 <main+0x179c>)
 8012786:	f7fb fdbf 	bl	800e308 <__aeabi_fdiv>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 801278a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 801278c:	1c03      	adds	r3, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 801278e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012790:	0028      	movs	r0, r5
 8012792:	f7ed fe81 	bl	8000498 <null_data>
		
		//the center of mass of the image need to be computed
		floatv2_t com = center_of_mass(max_index, roi_radius);
 8012796:	2224      	movs	r2, #36	; 0x24
 8012798:	466b      	mov	r3, sp
 801279a:	189b      	adds	r3, r3, r2
 801279c:	781a      	ldrb	r2, [r3, #0]
 801279e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80127a0:	a81a      	add	r0, sp, #104	; 0x68
 80127a2:	f7ed fd6d 	bl	8000280 <center_of_mass>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 80127a6:	495c      	ldr	r1, [pc, #368]	; (8012918 <main+0x179c>)
 80127a8:	9804      	ldr	r0, [sp, #16]
 80127aa:	f7fb febf 	bl	800e52c <__aeabi_fmul>
 80127ae:	f7fc fbfd 	bl	800efac <__aeabi_f2uiz>
		
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80127b2:	b280      	uxth	r0, r0
 80127b4:	f7fc fdd0 	bl	800f358 <__aeabi_i2f>
 80127b8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80127ba:	f7fb feb7 	bl	800e52c <__aeabi_fmul>
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 80127be:	4956      	ldr	r1, [pc, #344]	; (8012918 <main+0x179c>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80127c0:	1c04      	adds	r4, r0, #0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 80127c2:	9805      	ldr	r0, [sp, #20]
 80127c4:	f7fb feb2 	bl	800e52c <__aeabi_fmul>
 80127c8:	f7fc fbf0 	bl	800efac <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80127cc:	b280      	uxth	r0, r0
 80127ce:	f7fc fdc3 	bl	800f358 <__aeabi_i2f>
 80127d2:	1c01      	adds	r1, r0, #0
 80127d4:	1c20      	adds	r0, r4, #0
 80127d6:	f7fb fbfd 	bl	800dfd4 <__aeabi_fadd>
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80127da:	4b4a      	ldr	r3, [pc, #296]	; (8012904 <main+0x1788>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 80127dc:	1c04      	adds	r4, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80127de:	8e98      	ldrh	r0, [r3, #52]	; 0x34
 80127e0:	f7fc fdba 	bl	800f358 <__aeabi_i2f>
 80127e4:	1c01      	adds	r1, r0, #0
 80127e6:	9806      	ldr	r0, [sp, #24]
 80127e8:	f7fb fd8e 	bl	800e308 <__aeabi_fdiv>
 80127ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80127ee:	f7fb fe9d 	bl	800e52c <__aeabi_fmul>
 80127f2:	494f      	ldr	r1, [pc, #316]	; (8012930 <main+0x17b4>)
 80127f4:	f7fb fe9a 	bl	800e52c <__aeabi_fmul>
		
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80127f8:	2100      	movs	r1, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80127fa:	1c05      	adds	r5, r0, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80127fc:	4658      	mov	r0, fp
 80127fe:	f7fc fb87 	bl	800ef10 <__aeabi_fcmpeq>
		else{amplitude = 0;}
 8012802:	2700      	movs	r7, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 8012804:	2800      	cmp	r0, #0
 8012806:	d106      	bne.n	8012816 <main+0x169a>
 8012808:	4648      	mov	r0, r9
 801280a:	f7fc fda5 	bl	800f358 <__aeabi_i2f>
 801280e:	4659      	mov	r1, fp
 8012810:	f7fb fd7a 	bl	800e308 <__aeabi_fdiv>
 8012814:	1c07      	adds	r7, r0, #0
		
		//store results
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 8012816:	1c28      	adds	r0, r5, #0
 8012818:	f7fc fbc8 	bl	800efac <__aeabi_f2uiz>
 801281c:	2201      	movs	r2, #1
 801281e:	0001      	movs	r1, r0
 8012820:	20d0      	movs	r0, #208	; 0xd0
 8012822:	f7f1 fa9f 	bl	8003d64 <RegInt_setregf>
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 8012826:	1c20      	adds	r0, r4, #0
 8012828:	f7fc fbc0 	bl	800efac <__aeabi_f2uiz>
 801282c:	2201      	movs	r2, #1
 801282e:	0001      	movs	r1, r0
 8012830:	20d1      	movs	r0, #209	; 0xd1
 8012832:	f7f1 fa97 	bl	8003d64 <RegInt_setregf>
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 8012836:	1c38      	adds	r0, r7, #0
 8012838:	f7fc fbb8 	bl	800efac <__aeabi_f2uiz>
 801283c:	2201      	movs	r2, #1
 801283e:	0001      	movs	r1, r0
 8012840:	20d2      	movs	r0, #210	; 0xd2
 8012842:	f7f1 fa8f 	bl	8003d64 <RegInt_setregf>
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 8012846:	1c30      	adds	r0, r6, #0
 8012848:	f7fc fbb0 	bl	800efac <__aeabi_f2uiz>
 801284c:	2201      	movs	r2, #1
 801284e:	0001      	movs	r1, r0
 8012850:	20d3      	movs	r0, #211	; 0xd3
 8012852:	f7f1 fa87 	bl	8003d64 <RegInt_setregf>
		print_sparse_results();
	}
}

void print_sparse_results(void){
		INF_PRINTLN("RESULTS");
 8012856:	4e37      	ldr	r6, [pc, #220]	; (8012934 <main+0x17b8>)
 8012858:	0030      	movs	r0, r6
 801285a:	f002 fb53 	bl	8014f04 <__wrap_printf>
 801285e:	4836      	ldr	r0, [pc, #216]	; (8012938 <main+0x17bc>)
 8012860:	f002 fb50 	bl	8014f04 <__wrap_printf>
 8012864:	4d29      	ldr	r5, [pc, #164]	; (801290c <main+0x1790>)
 8012866:	4c35      	ldr	r4, [pc, #212]	; (801293c <main+0x17c0>)
 8012868:	4a35      	ldr	r2, [pc, #212]	; (8012940 <main+0x17c4>)
 801286a:	0029      	movs	r1, r5
 801286c:	0020      	movs	r0, r4
 801286e:	f002 fb49 	bl	8014f04 <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8012872:	0030      	movs	r0, r6
 8012874:	f002 fb46 	bl	8014f04 <__wrap_printf>
 8012878:	20d0      	movs	r0, #208	; 0xd0
 801287a:	f7f1 f91d 	bl	8003ab8 <RegInt_getreg>
 801287e:	0001      	movs	r1, r0
 8012880:	4830      	ldr	r0, [pc, #192]	; (8012944 <main+0x17c8>)
 8012882:	f002 fb3f 	bl	8014f04 <__wrap_printf>
 8012886:	4a30      	ldr	r2, [pc, #192]	; (8012948 <main+0x17cc>)
 8012888:	0029      	movs	r1, r5
 801288a:	0020      	movs	r0, r4
 801288c:	f002 fb3a 	bl	8014f04 <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8012890:	0030      	movs	r0, r6
 8012892:	f002 fb37 	bl	8014f04 <__wrap_printf>
 8012896:	20d1      	movs	r0, #209	; 0xd1
 8012898:	f7f1 f90e 	bl	8003ab8 <RegInt_getreg>
 801289c:	0001      	movs	r1, r0
 801289e:	482b      	ldr	r0, [pc, #172]	; (801294c <main+0x17d0>)
 80128a0:	f002 fb30 	bl	8014f04 <__wrap_printf>
 80128a4:	4a2a      	ldr	r2, [pc, #168]	; (8012950 <main+0x17d4>)
 80128a6:	0029      	movs	r1, r5
 80128a8:	0020      	movs	r0, r4
 80128aa:	f002 fb2b 	bl	8014f04 <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 80128ae:	0030      	movs	r0, r6
 80128b0:	f002 fb28 	bl	8014f04 <__wrap_printf>
 80128b4:	20d2      	movs	r0, #210	; 0xd2
 80128b6:	f7f1 f8ff 	bl	8003ab8 <RegInt_getreg>
 80128ba:	0001      	movs	r1, r0
 80128bc:	4825      	ldr	r0, [pc, #148]	; (8012954 <main+0x17d8>)
 80128be:	f002 fb21 	bl	8014f04 <__wrap_printf>
 80128c2:	22d8      	movs	r2, #216	; 0xd8
 80128c4:	0029      	movs	r1, r5
 80128c6:	0092      	lsls	r2, r2, #2
 80128c8:	0020      	movs	r0, r4
 80128ca:	f002 fb1b 	bl	8014f04 <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80128ce:	0030      	movs	r0, r6
 80128d0:	f002 fb18 	bl	8014f04 <__wrap_printf>
 80128d4:	20d3      	movs	r0, #211	; 0xd3
 80128d6:	f7f1 f8ef 	bl	8003ab8 <RegInt_getreg>
 80128da:	0001      	movs	r1, r0
 80128dc:	481e      	ldr	r0, [pc, #120]	; (8012958 <main+0x17dc>)
 80128de:	f002 fb11 	bl	8014f04 <__wrap_printf>
 80128e2:	4a1e      	ldr	r2, [pc, #120]	; (801295c <main+0x17e0>)
 80128e4:	0029      	movs	r1, r5
 80128e6:	0020      	movs	r0, r4
 80128e8:	f002 fb0c 	bl	8014f04 <__wrap_printf>
 80128ec:	f7ff fc0b 	bl	8012106 <main+0xf8a>
    envelope_config = acc_service_envelope_configuration_create();
 80128f0:	465b      	mov	r3, fp
 80128f2:	6218      	str	r0, [r3, #32]
		printf("envelope config creation fail");
 80128f4:	481a      	ldr	r0, [pc, #104]	; (8012960 <main+0x17e4>)
 80128f6:	f002 fb05 	bl	8014f04 <__wrap_printf>
 80128fa:	f7ff fb58 	bl	8011fae <main+0xe32>
 80128fe:	46c0      	nop			; (mov r8, r8)
 8012900:	2000018c 	.word	0x2000018c
 8012904:	2000010c 	.word	0x2000010c
 8012908:	00000329 	.word	0x00000329
 801290c:	0801bcdb 	.word	0x0801bcdb
 8012910:	0801cbb3 	.word	0x0801cbb3
 8012914:	0801c133 	.word	0x0801c133
 8012918:	447a0000 	.word	0x447a0000
 801291c:	0000033f 	.word	0x0000033f
 8012920:	0801c490 	.word	0x0801c490
 8012924:	0801c495 	.word	0x0801c495
 8012928:	00000341 	.word	0x00000341
 801292c:	0801c4a2 	.word	0x0801c4a2
 8012930:	401c7ae1 	.word	0x401c7ae1
 8012934:	0801c206 	.word	0x0801c206
 8012938:	0801c4af 	.word	0x0801c4af
 801293c:	0801c13a 	.word	0x0801c13a
 8012940:	0000035d 	.word	0x0000035d
 8012944:	0801c4b7 	.word	0x0801c4b7
 8012948:	0000035e 	.word	0x0000035e
 801294c:	0801c4ca 	.word	0x0801c4ca
 8012950:	0000035f 	.word	0x0000035f
 8012954:	0801c4db 	.word	0x0801c4db
 8012958:	0801c4ee 	.word	0x0801c4ee
 801295c:	00000361 	.word	0x00000361
 8012960:	0801c563 	.word	0x0801c563

08012964 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8012964:	b510      	push	{r4, lr}
 8012966:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8012968:	4b03      	ldr	r3, [pc, #12]	; (8012978 <_write+0x14>)
 801296a:	b292      	uxth	r2, r2
 801296c:	4803      	ldr	r0, [pc, #12]	; (801297c <_write+0x18>)
 801296e:	f7f8 fadb 	bl	800af28 <HAL_UART_Transmit>
	return len;
}
 8012972:	0020      	movs	r0, r4
 8012974:	bd10      	pop	{r4, pc}
 8012976:	46c0      	nop			; (mov r8, r8)
 8012978:	0000ffff 	.word	0x0000ffff
 801297c:	20000640 	.word	0x20000640

08012980 <Reset_Handler>:
 8012980:	480d      	ldr	r0, [pc, #52]	; (80129b8 <LoopForever+0x2>)
 8012982:	4685      	mov	sp, r0
 8012984:	2100      	movs	r1, #0
 8012986:	e003      	b.n	8012990 <LoopCopyDataInit>

08012988 <CopyDataInit>:
 8012988:	4b0c      	ldr	r3, [pc, #48]	; (80129bc <LoopForever+0x6>)
 801298a:	585b      	ldr	r3, [r3, r1]
 801298c:	5043      	str	r3, [r0, r1]
 801298e:	3104      	adds	r1, #4

08012990 <LoopCopyDataInit>:
 8012990:	480b      	ldr	r0, [pc, #44]	; (80129c0 <LoopForever+0xa>)
 8012992:	4b0c      	ldr	r3, [pc, #48]	; (80129c4 <LoopForever+0xe>)
 8012994:	1842      	adds	r2, r0, r1
 8012996:	429a      	cmp	r2, r3
 8012998:	d3f6      	bcc.n	8012988 <CopyDataInit>
 801299a:	4a0b      	ldr	r2, [pc, #44]	; (80129c8 <LoopForever+0x12>)
 801299c:	e002      	b.n	80129a4 <LoopFillZerobss>

0801299e <FillZerobss>:
 801299e:	2300      	movs	r3, #0
 80129a0:	6013      	str	r3, [r2, #0]
 80129a2:	3204      	adds	r2, #4

080129a4 <LoopFillZerobss>:
 80129a4:	4b09      	ldr	r3, [pc, #36]	; (80129cc <LoopForever+0x16>)
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d3f9      	bcc.n	801299e <FillZerobss>
 80129aa:	f7f1 fe57 	bl	800465c <SystemInit>
 80129ae:	f000 fa31 	bl	8012e14 <__libc_init_array>
 80129b2:	f7fe fbe3 	bl	801117c <main>

080129b6 <LoopForever>:
 80129b6:	e7fe      	b.n	80129b6 <LoopForever>
 80129b8:	20009000 	.word	0x20009000
 80129bc:	0801e630 	.word	0x0801e630
 80129c0:	20000000 	.word	0x20000000
 80129c4:	20000070 	.word	0x20000070
 80129c8:	20000070 	.word	0x20000070
 80129cc:	200006d0 	.word	0x200006d0

080129d0 <ADC1_COMP_IRQHandler>:
 80129d0:	e7fe      	b.n	80129d0 <ADC1_COMP_IRQHandler>
	...

080129d4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80129d4:	4b0b      	ldr	r3, [pc, #44]	; (8012a04 <_sbrk+0x30>)
 80129d6:	490c      	ldr	r1, [pc, #48]	; (8012a08 <_sbrk+0x34>)
{
 80129d8:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80129da:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80129dc:	4b0b      	ldr	r3, [pc, #44]	; (8012a0c <_sbrk+0x38>)
{
 80129de:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80129e0:	6818      	ldr	r0, [r3, #0]
 80129e2:	2800      	cmp	r0, #0
 80129e4:	d101      	bne.n	80129ea <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80129e6:	480a      	ldr	r0, [pc, #40]	; (8012a10 <_sbrk+0x3c>)
 80129e8:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80129ea:	6818      	ldr	r0, [r3, #0]
 80129ec:	1882      	adds	r2, r0, r2
 80129ee:	428a      	cmp	r2, r1
 80129f0:	d906      	bls.n	8012a00 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80129f2:	f000 f869 	bl	8012ac8 <__errno>
 80129f6:	230c      	movs	r3, #12
 80129f8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80129fa:	2001      	movs	r0, #1
 80129fc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80129fe:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8012a00:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8012a02:	e7fc      	b.n	80129fe <_sbrk+0x2a>
 8012a04:	00001400 	.word	0x00001400
 8012a08:	20009000 	.word	0x20009000
 8012a0c:	20000634 	.word	0x20000634
 8012a10:	200006d0 	.word	0x200006d0

08012a14 <__ieee754_sqrtf>:
 8012a14:	492a      	ldr	r1, [pc, #168]	; (8012ac0 <__ieee754_sqrtf+0xac>)
 8012a16:	0043      	lsls	r3, r0, #1
 8012a18:	b570      	push	{r4, r5, r6, lr}
 8012a1a:	0002      	movs	r2, r0
 8012a1c:	1c04      	adds	r4, r0, #0
 8012a1e:	085b      	lsrs	r3, r3, #1
 8012a20:	428b      	cmp	r3, r1
 8012a22:	d83b      	bhi.n	8012a9c <__ieee754_sqrtf+0x88>
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d038      	beq.n	8012a9a <__ieee754_sqrtf+0x86>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	db3e      	blt.n	8012aaa <__ieee754_sqrtf+0x96>
 8012a2c:	4925      	ldr	r1, [pc, #148]	; (8012ac4 <__ieee754_sqrtf+0xb0>)
 8012a2e:	15c6      	asrs	r6, r0, #23
 8012a30:	428b      	cmp	r3, r1
 8012a32:	d80b      	bhi.n	8012a4c <__ieee754_sqrtf+0x38>
 8012a34:	2080      	movs	r0, #128	; 0x80
 8012a36:	0400      	lsls	r0, r0, #16
 8012a38:	4220      	tst	r0, r4
 8012a3a:	d13d      	bne.n	8012ab8 <__ieee754_sqrtf+0xa4>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	e000      	b.n	8012a42 <__ieee754_sqrtf+0x2e>
 8012a40:	000b      	movs	r3, r1
 8012a42:	0052      	lsls	r2, r2, #1
 8012a44:	1c59      	adds	r1, r3, #1
 8012a46:	4202      	tst	r2, r0
 8012a48:	d0fa      	beq.n	8012a40 <__ieee754_sqrtf+0x2c>
 8012a4a:	1af6      	subs	r6, r6, r3
 8012a4c:	2380      	movs	r3, #128	; 0x80
 8012a4e:	0252      	lsls	r2, r2, #9
 8012a50:	041b      	lsls	r3, r3, #16
 8012a52:	0a52      	lsrs	r2, r2, #9
 8012a54:	431a      	orrs	r2, r3
 8012a56:	3e7f      	subs	r6, #127	; 0x7f
 8012a58:	0053      	lsls	r3, r2, #1
 8012a5a:	07f1      	lsls	r1, r6, #31
 8012a5c:	d500      	bpl.n	8012a60 <__ieee754_sqrtf+0x4c>
 8012a5e:	0093      	lsls	r3, r2, #2
 8012a60:	2280      	movs	r2, #128	; 0x80
 8012a62:	1070      	asrs	r0, r6, #1
 8012a64:	2119      	movs	r1, #25
 8012a66:	2600      	movs	r6, #0
 8012a68:	2500      	movs	r5, #0
 8012a6a:	0452      	lsls	r2, r2, #17
 8012a6c:	18ac      	adds	r4, r5, r2
 8012a6e:	429c      	cmp	r4, r3
 8012a70:	dc02      	bgt.n	8012a78 <__ieee754_sqrtf+0x64>
 8012a72:	18a5      	adds	r5, r4, r2
 8012a74:	1b1b      	subs	r3, r3, r4
 8012a76:	18b6      	adds	r6, r6, r2
 8012a78:	3901      	subs	r1, #1
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	0852      	lsrs	r2, r2, #1
 8012a7e:	2900      	cmp	r1, #0
 8012a80:	d1f4      	bne.n	8012a6c <__ieee754_sqrtf+0x58>
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d002      	beq.n	8012a8c <__ieee754_sqrtf+0x78>
 8012a86:	2301      	movs	r3, #1
 8012a88:	3601      	adds	r6, #1
 8012a8a:	439e      	bics	r6, r3
 8012a8c:	23fc      	movs	r3, #252	; 0xfc
 8012a8e:	059b      	lsls	r3, r3, #22
 8012a90:	469c      	mov	ip, r3
 8012a92:	1076      	asrs	r6, r6, #1
 8012a94:	4466      	add	r6, ip
 8012a96:	05c0      	lsls	r0, r0, #23
 8012a98:	1980      	adds	r0, r0, r6
 8012a9a:	bd70      	pop	{r4, r5, r6, pc}
 8012a9c:	1c01      	adds	r1, r0, #0
 8012a9e:	f7fb fd45 	bl	800e52c <__aeabi_fmul>
 8012aa2:	1c21      	adds	r1, r4, #0
 8012aa4:	f7fb fa96 	bl	800dfd4 <__aeabi_fadd>
 8012aa8:	e7f7      	b.n	8012a9a <__ieee754_sqrtf+0x86>
 8012aaa:	1c01      	adds	r1, r0, #0
 8012aac:	f7fb fe70 	bl	800e790 <__aeabi_fsub>
 8012ab0:	1c01      	adds	r1, r0, #0
 8012ab2:	f7fb fc29 	bl	800e308 <__aeabi_fdiv>
 8012ab6:	e7f0      	b.n	8012a9a <__ieee754_sqrtf+0x86>
 8012ab8:	2301      	movs	r3, #1
 8012aba:	425b      	negs	r3, r3
 8012abc:	e7c5      	b.n	8012a4a <__ieee754_sqrtf+0x36>
 8012abe:	46c0      	nop			; (mov r8, r8)
 8012ac0:	7f7fffff 	.word	0x7f7fffff
 8012ac4:	007fffff 	.word	0x007fffff

08012ac8 <__errno>:
 8012ac8:	4b01      	ldr	r3, [pc, #4]	; (8012ad0 <__errno+0x8>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	4770      	bx	lr
 8012ace:	46c0      	nop			; (mov r8, r8)
 8012ad0:	20000008 	.word	0x20000008

08012ad4 <__sflush_r>:
 8012ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ad6:	898a      	ldrh	r2, [r1, #12]
 8012ad8:	0005      	movs	r5, r0
 8012ada:	000c      	movs	r4, r1
 8012adc:	0713      	lsls	r3, r2, #28
 8012ade:	d460      	bmi.n	8012ba2 <__sflush_r+0xce>
 8012ae0:	684b      	ldr	r3, [r1, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	dc04      	bgt.n	8012af0 <__sflush_r+0x1c>
 8012ae6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	dc01      	bgt.n	8012af0 <__sflush_r+0x1c>
 8012aec:	2000      	movs	r0, #0
 8012aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012af0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012af2:	2f00      	cmp	r7, #0
 8012af4:	d0fa      	beq.n	8012aec <__sflush_r+0x18>
 8012af6:	2300      	movs	r3, #0
 8012af8:	682e      	ldr	r6, [r5, #0]
 8012afa:	602b      	str	r3, [r5, #0]
 8012afc:	2380      	movs	r3, #128	; 0x80
 8012afe:	015b      	lsls	r3, r3, #5
 8012b00:	6a21      	ldr	r1, [r4, #32]
 8012b02:	401a      	ands	r2, r3
 8012b04:	d034      	beq.n	8012b70 <__sflush_r+0x9c>
 8012b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012b08:	89a3      	ldrh	r3, [r4, #12]
 8012b0a:	075b      	lsls	r3, r3, #29
 8012b0c:	d506      	bpl.n	8012b1c <__sflush_r+0x48>
 8012b0e:	6863      	ldr	r3, [r4, #4]
 8012b10:	1ac0      	subs	r0, r0, r3
 8012b12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d001      	beq.n	8012b1c <__sflush_r+0x48>
 8012b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012b1a:	1ac0      	subs	r0, r0, r3
 8012b1c:	0002      	movs	r2, r0
 8012b1e:	6a21      	ldr	r1, [r4, #32]
 8012b20:	2300      	movs	r3, #0
 8012b22:	0028      	movs	r0, r5
 8012b24:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012b26:	47b8      	blx	r7
 8012b28:	89a1      	ldrh	r1, [r4, #12]
 8012b2a:	1c43      	adds	r3, r0, #1
 8012b2c:	d106      	bne.n	8012b3c <__sflush_r+0x68>
 8012b2e:	682b      	ldr	r3, [r5, #0]
 8012b30:	2b1d      	cmp	r3, #29
 8012b32:	d830      	bhi.n	8012b96 <__sflush_r+0xc2>
 8012b34:	4a2b      	ldr	r2, [pc, #172]	; (8012be4 <__sflush_r+0x110>)
 8012b36:	40da      	lsrs	r2, r3
 8012b38:	07d3      	lsls	r3, r2, #31
 8012b3a:	d52c      	bpl.n	8012b96 <__sflush_r+0xc2>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	6063      	str	r3, [r4, #4]
 8012b40:	6923      	ldr	r3, [r4, #16]
 8012b42:	6023      	str	r3, [r4, #0]
 8012b44:	04cb      	lsls	r3, r1, #19
 8012b46:	d505      	bpl.n	8012b54 <__sflush_r+0x80>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d102      	bne.n	8012b52 <__sflush_r+0x7e>
 8012b4c:	682b      	ldr	r3, [r5, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d100      	bne.n	8012b54 <__sflush_r+0x80>
 8012b52:	6560      	str	r0, [r4, #84]	; 0x54
 8012b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b56:	602e      	str	r6, [r5, #0]
 8012b58:	2900      	cmp	r1, #0
 8012b5a:	d0c7      	beq.n	8012aec <__sflush_r+0x18>
 8012b5c:	0023      	movs	r3, r4
 8012b5e:	3344      	adds	r3, #68	; 0x44
 8012b60:	4299      	cmp	r1, r3
 8012b62:	d002      	beq.n	8012b6a <__sflush_r+0x96>
 8012b64:	0028      	movs	r0, r5
 8012b66:	f000 f981 	bl	8012e6c <_free_r>
 8012b6a:	2000      	movs	r0, #0
 8012b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8012b6e:	e7be      	b.n	8012aee <__sflush_r+0x1a>
 8012b70:	2301      	movs	r3, #1
 8012b72:	0028      	movs	r0, r5
 8012b74:	47b8      	blx	r7
 8012b76:	1c43      	adds	r3, r0, #1
 8012b78:	d1c6      	bne.n	8012b08 <__sflush_r+0x34>
 8012b7a:	682b      	ldr	r3, [r5, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d0c3      	beq.n	8012b08 <__sflush_r+0x34>
 8012b80:	2b1d      	cmp	r3, #29
 8012b82:	d001      	beq.n	8012b88 <__sflush_r+0xb4>
 8012b84:	2b16      	cmp	r3, #22
 8012b86:	d101      	bne.n	8012b8c <__sflush_r+0xb8>
 8012b88:	602e      	str	r6, [r5, #0]
 8012b8a:	e7af      	b.n	8012aec <__sflush_r+0x18>
 8012b8c:	2340      	movs	r3, #64	; 0x40
 8012b8e:	89a2      	ldrh	r2, [r4, #12]
 8012b90:	4313      	orrs	r3, r2
 8012b92:	81a3      	strh	r3, [r4, #12]
 8012b94:	e7ab      	b.n	8012aee <__sflush_r+0x1a>
 8012b96:	2340      	movs	r3, #64	; 0x40
 8012b98:	430b      	orrs	r3, r1
 8012b9a:	2001      	movs	r0, #1
 8012b9c:	81a3      	strh	r3, [r4, #12]
 8012b9e:	4240      	negs	r0, r0
 8012ba0:	e7a5      	b.n	8012aee <__sflush_r+0x1a>
 8012ba2:	690f      	ldr	r7, [r1, #16]
 8012ba4:	2f00      	cmp	r7, #0
 8012ba6:	d0a1      	beq.n	8012aec <__sflush_r+0x18>
 8012ba8:	680b      	ldr	r3, [r1, #0]
 8012baa:	600f      	str	r7, [r1, #0]
 8012bac:	1bdb      	subs	r3, r3, r7
 8012bae:	9301      	str	r3, [sp, #4]
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	0792      	lsls	r2, r2, #30
 8012bb4:	d100      	bne.n	8012bb8 <__sflush_r+0xe4>
 8012bb6:	694b      	ldr	r3, [r1, #20]
 8012bb8:	60a3      	str	r3, [r4, #8]
 8012bba:	9b01      	ldr	r3, [sp, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	dc00      	bgt.n	8012bc2 <__sflush_r+0xee>
 8012bc0:	e794      	b.n	8012aec <__sflush_r+0x18>
 8012bc2:	9b01      	ldr	r3, [sp, #4]
 8012bc4:	003a      	movs	r2, r7
 8012bc6:	6a21      	ldr	r1, [r4, #32]
 8012bc8:	0028      	movs	r0, r5
 8012bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012bcc:	47b0      	blx	r6
 8012bce:	2800      	cmp	r0, #0
 8012bd0:	dc03      	bgt.n	8012bda <__sflush_r+0x106>
 8012bd2:	2340      	movs	r3, #64	; 0x40
 8012bd4:	89a2      	ldrh	r2, [r4, #12]
 8012bd6:	4313      	orrs	r3, r2
 8012bd8:	e7df      	b.n	8012b9a <__sflush_r+0xc6>
 8012bda:	9b01      	ldr	r3, [sp, #4]
 8012bdc:	183f      	adds	r7, r7, r0
 8012bde:	1a1b      	subs	r3, r3, r0
 8012be0:	9301      	str	r3, [sp, #4]
 8012be2:	e7ea      	b.n	8012bba <__sflush_r+0xe6>
 8012be4:	20400001 	.word	0x20400001

08012be8 <_fflush_r>:
 8012be8:	690b      	ldr	r3, [r1, #16]
 8012bea:	b570      	push	{r4, r5, r6, lr}
 8012bec:	0005      	movs	r5, r0
 8012bee:	000c      	movs	r4, r1
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <_fflush_r+0x10>
 8012bf4:	2000      	movs	r0, #0
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d004      	beq.n	8012c06 <_fflush_r+0x1e>
 8012bfc:	6983      	ldr	r3, [r0, #24]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d101      	bne.n	8012c06 <_fflush_r+0x1e>
 8012c02:	f000 f873 	bl	8012cec <__sinit>
 8012c06:	4b0b      	ldr	r3, [pc, #44]	; (8012c34 <_fflush_r+0x4c>)
 8012c08:	429c      	cmp	r4, r3
 8012c0a:	d109      	bne.n	8012c20 <_fflush_r+0x38>
 8012c0c:	686c      	ldr	r4, [r5, #4]
 8012c0e:	220c      	movs	r2, #12
 8012c10:	5ea3      	ldrsh	r3, [r4, r2]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d0ee      	beq.n	8012bf4 <_fflush_r+0xc>
 8012c16:	0021      	movs	r1, r4
 8012c18:	0028      	movs	r0, r5
 8012c1a:	f7ff ff5b 	bl	8012ad4 <__sflush_r>
 8012c1e:	e7ea      	b.n	8012bf6 <_fflush_r+0xe>
 8012c20:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <_fflush_r+0x50>)
 8012c22:	429c      	cmp	r4, r3
 8012c24:	d101      	bne.n	8012c2a <_fflush_r+0x42>
 8012c26:	68ac      	ldr	r4, [r5, #8]
 8012c28:	e7f1      	b.n	8012c0e <_fflush_r+0x26>
 8012c2a:	4b04      	ldr	r3, [pc, #16]	; (8012c3c <_fflush_r+0x54>)
 8012c2c:	429c      	cmp	r4, r3
 8012c2e:	d1ee      	bne.n	8012c0e <_fflush_r+0x26>
 8012c30:	68ec      	ldr	r4, [r5, #12]
 8012c32:	e7ec      	b.n	8012c0e <_fflush_r+0x26>
 8012c34:	0801e3d0 	.word	0x0801e3d0
 8012c38:	0801e3f0 	.word	0x0801e3f0
 8012c3c:	0801e3b0 	.word	0x0801e3b0

08012c40 <fflush>:
 8012c40:	b510      	push	{r4, lr}
 8012c42:	1e01      	subs	r1, r0, #0
 8012c44:	d105      	bne.n	8012c52 <fflush+0x12>
 8012c46:	4b05      	ldr	r3, [pc, #20]	; (8012c5c <fflush+0x1c>)
 8012c48:	4905      	ldr	r1, [pc, #20]	; (8012c60 <fflush+0x20>)
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	f000 f8c0 	bl	8012dd0 <_fwalk_reent>
 8012c50:	bd10      	pop	{r4, pc}
 8012c52:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <fflush+0x24>)
 8012c54:	6818      	ldr	r0, [r3, #0]
 8012c56:	f7ff ffc7 	bl	8012be8 <_fflush_r>
 8012c5a:	e7f9      	b.n	8012c50 <fflush+0x10>
 8012c5c:	0801e410 	.word	0x0801e410
 8012c60:	08012be9 	.word	0x08012be9
 8012c64:	20000008 	.word	0x20000008

08012c68 <std>:
 8012c68:	2300      	movs	r3, #0
 8012c6a:	b510      	push	{r4, lr}
 8012c6c:	0004      	movs	r4, r0
 8012c6e:	6003      	str	r3, [r0, #0]
 8012c70:	6043      	str	r3, [r0, #4]
 8012c72:	6083      	str	r3, [r0, #8]
 8012c74:	8181      	strh	r1, [r0, #12]
 8012c76:	6643      	str	r3, [r0, #100]	; 0x64
 8012c78:	81c2      	strh	r2, [r0, #14]
 8012c7a:	6103      	str	r3, [r0, #16]
 8012c7c:	6143      	str	r3, [r0, #20]
 8012c7e:	6183      	str	r3, [r0, #24]
 8012c80:	0019      	movs	r1, r3
 8012c82:	2208      	movs	r2, #8
 8012c84:	305c      	adds	r0, #92	; 0x5c
 8012c86:	f000 f8e9 	bl	8012e5c <memset>
 8012c8a:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <std+0x38>)
 8012c8c:	6224      	str	r4, [r4, #32]
 8012c8e:	6263      	str	r3, [r4, #36]	; 0x24
 8012c90:	4b04      	ldr	r3, [pc, #16]	; (8012ca4 <std+0x3c>)
 8012c92:	62a3      	str	r3, [r4, #40]	; 0x28
 8012c94:	4b04      	ldr	r3, [pc, #16]	; (8012ca8 <std+0x40>)
 8012c96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012c98:	4b04      	ldr	r3, [pc, #16]	; (8012cac <std+0x44>)
 8012c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8012c9c:	bd10      	pop	{r4, pc}
 8012c9e:	46c0      	nop			; (mov r8, r8)
 8012ca0:	08012fe1 	.word	0x08012fe1
 8012ca4:	08013009 	.word	0x08013009
 8012ca8:	08013041 	.word	0x08013041
 8012cac:	0801306d 	.word	0x0801306d

08012cb0 <_cleanup_r>:
 8012cb0:	b510      	push	{r4, lr}
 8012cb2:	4902      	ldr	r1, [pc, #8]	; (8012cbc <_cleanup_r+0xc>)
 8012cb4:	f000 f88c 	bl	8012dd0 <_fwalk_reent>
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	46c0      	nop			; (mov r8, r8)
 8012cbc:	08012be9 	.word	0x08012be9

08012cc0 <__sfmoreglue>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	2568      	movs	r5, #104	; 0x68
 8012cc4:	1e4a      	subs	r2, r1, #1
 8012cc6:	4355      	muls	r5, r2
 8012cc8:	000e      	movs	r6, r1
 8012cca:	0029      	movs	r1, r5
 8012ccc:	3174      	adds	r1, #116	; 0x74
 8012cce:	f000 f917 	bl	8012f00 <_malloc_r>
 8012cd2:	1e04      	subs	r4, r0, #0
 8012cd4:	d008      	beq.n	8012ce8 <__sfmoreglue+0x28>
 8012cd6:	2100      	movs	r1, #0
 8012cd8:	002a      	movs	r2, r5
 8012cda:	6001      	str	r1, [r0, #0]
 8012cdc:	6046      	str	r6, [r0, #4]
 8012cde:	300c      	adds	r0, #12
 8012ce0:	60a0      	str	r0, [r4, #8]
 8012ce2:	3268      	adds	r2, #104	; 0x68
 8012ce4:	f000 f8ba 	bl	8012e5c <memset>
 8012ce8:	0020      	movs	r0, r4
 8012cea:	bd70      	pop	{r4, r5, r6, pc}

08012cec <__sinit>:
 8012cec:	6983      	ldr	r3, [r0, #24]
 8012cee:	b513      	push	{r0, r1, r4, lr}
 8012cf0:	0004      	movs	r4, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d128      	bne.n	8012d48 <__sinit+0x5c>
 8012cf6:	6483      	str	r3, [r0, #72]	; 0x48
 8012cf8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012cfa:	6503      	str	r3, [r0, #80]	; 0x50
 8012cfc:	4b13      	ldr	r3, [pc, #76]	; (8012d4c <__sinit+0x60>)
 8012cfe:	4a14      	ldr	r2, [pc, #80]	; (8012d50 <__sinit+0x64>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	6282      	str	r2, [r0, #40]	; 0x28
 8012d04:	9301      	str	r3, [sp, #4]
 8012d06:	4298      	cmp	r0, r3
 8012d08:	d101      	bne.n	8012d0e <__sinit+0x22>
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	6183      	str	r3, [r0, #24]
 8012d0e:	0020      	movs	r0, r4
 8012d10:	f000 f820 	bl	8012d54 <__sfp>
 8012d14:	6060      	str	r0, [r4, #4]
 8012d16:	0020      	movs	r0, r4
 8012d18:	f000 f81c 	bl	8012d54 <__sfp>
 8012d1c:	60a0      	str	r0, [r4, #8]
 8012d1e:	0020      	movs	r0, r4
 8012d20:	f000 f818 	bl	8012d54 <__sfp>
 8012d24:	2200      	movs	r2, #0
 8012d26:	60e0      	str	r0, [r4, #12]
 8012d28:	2104      	movs	r1, #4
 8012d2a:	6860      	ldr	r0, [r4, #4]
 8012d2c:	f7ff ff9c 	bl	8012c68 <std>
 8012d30:	2201      	movs	r2, #1
 8012d32:	2109      	movs	r1, #9
 8012d34:	68a0      	ldr	r0, [r4, #8]
 8012d36:	f7ff ff97 	bl	8012c68 <std>
 8012d3a:	2202      	movs	r2, #2
 8012d3c:	2112      	movs	r1, #18
 8012d3e:	68e0      	ldr	r0, [r4, #12]
 8012d40:	f7ff ff92 	bl	8012c68 <std>
 8012d44:	2301      	movs	r3, #1
 8012d46:	61a3      	str	r3, [r4, #24]
 8012d48:	bd13      	pop	{r0, r1, r4, pc}
 8012d4a:	46c0      	nop			; (mov r8, r8)
 8012d4c:	0801e410 	.word	0x0801e410
 8012d50:	08012cb1 	.word	0x08012cb1

08012d54 <__sfp>:
 8012d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d56:	4b1c      	ldr	r3, [pc, #112]	; (8012dc8 <__sfp+0x74>)
 8012d58:	0007      	movs	r7, r0
 8012d5a:	681e      	ldr	r6, [r3, #0]
 8012d5c:	69b3      	ldr	r3, [r6, #24]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d102      	bne.n	8012d68 <__sfp+0x14>
 8012d62:	0030      	movs	r0, r6
 8012d64:	f7ff ffc2 	bl	8012cec <__sinit>
 8012d68:	3648      	adds	r6, #72	; 0x48
 8012d6a:	68b4      	ldr	r4, [r6, #8]
 8012d6c:	6873      	ldr	r3, [r6, #4]
 8012d6e:	3b01      	subs	r3, #1
 8012d70:	d504      	bpl.n	8012d7c <__sfp+0x28>
 8012d72:	6833      	ldr	r3, [r6, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d007      	beq.n	8012d88 <__sfp+0x34>
 8012d78:	6836      	ldr	r6, [r6, #0]
 8012d7a:	e7f6      	b.n	8012d6a <__sfp+0x16>
 8012d7c:	220c      	movs	r2, #12
 8012d7e:	5ea5      	ldrsh	r5, [r4, r2]
 8012d80:	2d00      	cmp	r5, #0
 8012d82:	d00d      	beq.n	8012da0 <__sfp+0x4c>
 8012d84:	3468      	adds	r4, #104	; 0x68
 8012d86:	e7f2      	b.n	8012d6e <__sfp+0x1a>
 8012d88:	2104      	movs	r1, #4
 8012d8a:	0038      	movs	r0, r7
 8012d8c:	f7ff ff98 	bl	8012cc0 <__sfmoreglue>
 8012d90:	6030      	str	r0, [r6, #0]
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d1f0      	bne.n	8012d78 <__sfp+0x24>
 8012d96:	230c      	movs	r3, #12
 8012d98:	0004      	movs	r4, r0
 8012d9a:	603b      	str	r3, [r7, #0]
 8012d9c:	0020      	movs	r0, r4
 8012d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da0:	0020      	movs	r0, r4
 8012da2:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <__sfp+0x78>)
 8012da4:	6665      	str	r5, [r4, #100]	; 0x64
 8012da6:	6025      	str	r5, [r4, #0]
 8012da8:	6065      	str	r5, [r4, #4]
 8012daa:	60a5      	str	r5, [r4, #8]
 8012dac:	60e3      	str	r3, [r4, #12]
 8012dae:	6125      	str	r5, [r4, #16]
 8012db0:	6165      	str	r5, [r4, #20]
 8012db2:	61a5      	str	r5, [r4, #24]
 8012db4:	2208      	movs	r2, #8
 8012db6:	0029      	movs	r1, r5
 8012db8:	305c      	adds	r0, #92	; 0x5c
 8012dba:	f000 f84f 	bl	8012e5c <memset>
 8012dbe:	6365      	str	r5, [r4, #52]	; 0x34
 8012dc0:	63a5      	str	r5, [r4, #56]	; 0x38
 8012dc2:	64a5      	str	r5, [r4, #72]	; 0x48
 8012dc4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012dc6:	e7e9      	b.n	8012d9c <__sfp+0x48>
 8012dc8:	0801e410 	.word	0x0801e410
 8012dcc:	ffff0001 	.word	0xffff0001

08012dd0 <_fwalk_reent>:
 8012dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dd2:	0004      	movs	r4, r0
 8012dd4:	0007      	movs	r7, r0
 8012dd6:	2600      	movs	r6, #0
 8012dd8:	9101      	str	r1, [sp, #4]
 8012dda:	3448      	adds	r4, #72	; 0x48
 8012ddc:	2c00      	cmp	r4, #0
 8012dde:	d101      	bne.n	8012de4 <_fwalk_reent+0x14>
 8012de0:	0030      	movs	r0, r6
 8012de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012de4:	6863      	ldr	r3, [r4, #4]
 8012de6:	68a5      	ldr	r5, [r4, #8]
 8012de8:	9300      	str	r3, [sp, #0]
 8012dea:	9b00      	ldr	r3, [sp, #0]
 8012dec:	3b01      	subs	r3, #1
 8012dee:	9300      	str	r3, [sp, #0]
 8012df0:	d501      	bpl.n	8012df6 <_fwalk_reent+0x26>
 8012df2:	6824      	ldr	r4, [r4, #0]
 8012df4:	e7f2      	b.n	8012ddc <_fwalk_reent+0xc>
 8012df6:	89ab      	ldrh	r3, [r5, #12]
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d908      	bls.n	8012e0e <_fwalk_reent+0x3e>
 8012dfc:	220e      	movs	r2, #14
 8012dfe:	5eab      	ldrsh	r3, [r5, r2]
 8012e00:	3301      	adds	r3, #1
 8012e02:	d004      	beq.n	8012e0e <_fwalk_reent+0x3e>
 8012e04:	0029      	movs	r1, r5
 8012e06:	0038      	movs	r0, r7
 8012e08:	9b01      	ldr	r3, [sp, #4]
 8012e0a:	4798      	blx	r3
 8012e0c:	4306      	orrs	r6, r0
 8012e0e:	3568      	adds	r5, #104	; 0x68
 8012e10:	e7eb      	b.n	8012dea <_fwalk_reent+0x1a>
	...

08012e14 <__libc_init_array>:
 8012e14:	b570      	push	{r4, r5, r6, lr}
 8012e16:	2600      	movs	r6, #0
 8012e18:	4d0c      	ldr	r5, [pc, #48]	; (8012e4c <__libc_init_array+0x38>)
 8012e1a:	4c0d      	ldr	r4, [pc, #52]	; (8012e50 <__libc_init_array+0x3c>)
 8012e1c:	1b64      	subs	r4, r4, r5
 8012e1e:	10a4      	asrs	r4, r4, #2
 8012e20:	42a6      	cmp	r6, r4
 8012e22:	d109      	bne.n	8012e38 <__libc_init_array+0x24>
 8012e24:	2600      	movs	r6, #0
 8012e26:	f002 fc59 	bl	80156dc <_init>
 8012e2a:	4d0a      	ldr	r5, [pc, #40]	; (8012e54 <__libc_init_array+0x40>)
 8012e2c:	4c0a      	ldr	r4, [pc, #40]	; (8012e58 <__libc_init_array+0x44>)
 8012e2e:	1b64      	subs	r4, r4, r5
 8012e30:	10a4      	asrs	r4, r4, #2
 8012e32:	42a6      	cmp	r6, r4
 8012e34:	d105      	bne.n	8012e42 <__libc_init_array+0x2e>
 8012e36:	bd70      	pop	{r4, r5, r6, pc}
 8012e38:	00b3      	lsls	r3, r6, #2
 8012e3a:	58eb      	ldr	r3, [r5, r3]
 8012e3c:	4798      	blx	r3
 8012e3e:	3601      	adds	r6, #1
 8012e40:	e7ee      	b.n	8012e20 <__libc_init_array+0xc>
 8012e42:	00b3      	lsls	r3, r6, #2
 8012e44:	58eb      	ldr	r3, [r5, r3]
 8012e46:	4798      	blx	r3
 8012e48:	3601      	adds	r6, #1
 8012e4a:	e7f2      	b.n	8012e32 <__libc_init_array+0x1e>
 8012e4c:	0801e628 	.word	0x0801e628
 8012e50:	0801e628 	.word	0x0801e628
 8012e54:	0801e628 	.word	0x0801e628
 8012e58:	0801e62c 	.word	0x0801e62c

08012e5c <memset>:
 8012e5c:	0003      	movs	r3, r0
 8012e5e:	1812      	adds	r2, r2, r0
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d100      	bne.n	8012e66 <memset+0xa>
 8012e64:	4770      	bx	lr
 8012e66:	7019      	strb	r1, [r3, #0]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	e7f9      	b.n	8012e60 <memset+0x4>

08012e6c <_free_r>:
 8012e6c:	b570      	push	{r4, r5, r6, lr}
 8012e6e:	0005      	movs	r5, r0
 8012e70:	2900      	cmp	r1, #0
 8012e72:	d010      	beq.n	8012e96 <_free_r+0x2a>
 8012e74:	1f0c      	subs	r4, r1, #4
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	da00      	bge.n	8012e7e <_free_r+0x12>
 8012e7c:	18e4      	adds	r4, r4, r3
 8012e7e:	0028      	movs	r0, r5
 8012e80:	f000 f934 	bl	80130ec <__malloc_lock>
 8012e84:	4a1d      	ldr	r2, [pc, #116]	; (8012efc <_free_r+0x90>)
 8012e86:	6813      	ldr	r3, [r2, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d105      	bne.n	8012e98 <_free_r+0x2c>
 8012e8c:	6063      	str	r3, [r4, #4]
 8012e8e:	6014      	str	r4, [r2, #0]
 8012e90:	0028      	movs	r0, r5
 8012e92:	f000 f92c 	bl	80130ee <__malloc_unlock>
 8012e96:	bd70      	pop	{r4, r5, r6, pc}
 8012e98:	42a3      	cmp	r3, r4
 8012e9a:	d909      	bls.n	8012eb0 <_free_r+0x44>
 8012e9c:	6821      	ldr	r1, [r4, #0]
 8012e9e:	1860      	adds	r0, r4, r1
 8012ea0:	4283      	cmp	r3, r0
 8012ea2:	d1f3      	bne.n	8012e8c <_free_r+0x20>
 8012ea4:	6818      	ldr	r0, [r3, #0]
 8012ea6:	685b      	ldr	r3, [r3, #4]
 8012ea8:	1841      	adds	r1, r0, r1
 8012eaa:	6021      	str	r1, [r4, #0]
 8012eac:	e7ee      	b.n	8012e8c <_free_r+0x20>
 8012eae:	0013      	movs	r3, r2
 8012eb0:	685a      	ldr	r2, [r3, #4]
 8012eb2:	2a00      	cmp	r2, #0
 8012eb4:	d001      	beq.n	8012eba <_free_r+0x4e>
 8012eb6:	42a2      	cmp	r2, r4
 8012eb8:	d9f9      	bls.n	8012eae <_free_r+0x42>
 8012eba:	6819      	ldr	r1, [r3, #0]
 8012ebc:	1858      	adds	r0, r3, r1
 8012ebe:	42a0      	cmp	r0, r4
 8012ec0:	d10b      	bne.n	8012eda <_free_r+0x6e>
 8012ec2:	6820      	ldr	r0, [r4, #0]
 8012ec4:	1809      	adds	r1, r1, r0
 8012ec6:	1858      	adds	r0, r3, r1
 8012ec8:	6019      	str	r1, [r3, #0]
 8012eca:	4282      	cmp	r2, r0
 8012ecc:	d1e0      	bne.n	8012e90 <_free_r+0x24>
 8012ece:	6810      	ldr	r0, [r2, #0]
 8012ed0:	6852      	ldr	r2, [r2, #4]
 8012ed2:	1841      	adds	r1, r0, r1
 8012ed4:	6019      	str	r1, [r3, #0]
 8012ed6:	605a      	str	r2, [r3, #4]
 8012ed8:	e7da      	b.n	8012e90 <_free_r+0x24>
 8012eda:	42a0      	cmp	r0, r4
 8012edc:	d902      	bls.n	8012ee4 <_free_r+0x78>
 8012ede:	230c      	movs	r3, #12
 8012ee0:	602b      	str	r3, [r5, #0]
 8012ee2:	e7d5      	b.n	8012e90 <_free_r+0x24>
 8012ee4:	6821      	ldr	r1, [r4, #0]
 8012ee6:	1860      	adds	r0, r4, r1
 8012ee8:	4282      	cmp	r2, r0
 8012eea:	d103      	bne.n	8012ef4 <_free_r+0x88>
 8012eec:	6810      	ldr	r0, [r2, #0]
 8012eee:	6852      	ldr	r2, [r2, #4]
 8012ef0:	1841      	adds	r1, r0, r1
 8012ef2:	6021      	str	r1, [r4, #0]
 8012ef4:	6062      	str	r2, [r4, #4]
 8012ef6:	605c      	str	r4, [r3, #4]
 8012ef8:	e7ca      	b.n	8012e90 <_free_r+0x24>
 8012efa:	46c0      	nop			; (mov r8, r8)
 8012efc:	20000638 	.word	0x20000638

08012f00 <_malloc_r>:
 8012f00:	2303      	movs	r3, #3
 8012f02:	b570      	push	{r4, r5, r6, lr}
 8012f04:	1ccd      	adds	r5, r1, #3
 8012f06:	439d      	bics	r5, r3
 8012f08:	3508      	adds	r5, #8
 8012f0a:	0006      	movs	r6, r0
 8012f0c:	2d0c      	cmp	r5, #12
 8012f0e:	d21e      	bcs.n	8012f4e <_malloc_r+0x4e>
 8012f10:	250c      	movs	r5, #12
 8012f12:	42a9      	cmp	r1, r5
 8012f14:	d81d      	bhi.n	8012f52 <_malloc_r+0x52>
 8012f16:	0030      	movs	r0, r6
 8012f18:	f000 f8e8 	bl	80130ec <__malloc_lock>
 8012f1c:	4a25      	ldr	r2, [pc, #148]	; (8012fb4 <_malloc_r+0xb4>)
 8012f1e:	6814      	ldr	r4, [r2, #0]
 8012f20:	0021      	movs	r1, r4
 8012f22:	2900      	cmp	r1, #0
 8012f24:	d119      	bne.n	8012f5a <_malloc_r+0x5a>
 8012f26:	4c24      	ldr	r4, [pc, #144]	; (8012fb8 <_malloc_r+0xb8>)
 8012f28:	6823      	ldr	r3, [r4, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d103      	bne.n	8012f36 <_malloc_r+0x36>
 8012f2e:	0030      	movs	r0, r6
 8012f30:	f000 f844 	bl	8012fbc <_sbrk_r>
 8012f34:	6020      	str	r0, [r4, #0]
 8012f36:	0029      	movs	r1, r5
 8012f38:	0030      	movs	r0, r6
 8012f3a:	f000 f83f 	bl	8012fbc <_sbrk_r>
 8012f3e:	1c43      	adds	r3, r0, #1
 8012f40:	d12b      	bne.n	8012f9a <_malloc_r+0x9a>
 8012f42:	230c      	movs	r3, #12
 8012f44:	0030      	movs	r0, r6
 8012f46:	6033      	str	r3, [r6, #0]
 8012f48:	f000 f8d1 	bl	80130ee <__malloc_unlock>
 8012f4c:	e003      	b.n	8012f56 <_malloc_r+0x56>
 8012f4e:	2d00      	cmp	r5, #0
 8012f50:	dadf      	bge.n	8012f12 <_malloc_r+0x12>
 8012f52:	230c      	movs	r3, #12
 8012f54:	6033      	str	r3, [r6, #0]
 8012f56:	2000      	movs	r0, #0
 8012f58:	bd70      	pop	{r4, r5, r6, pc}
 8012f5a:	680b      	ldr	r3, [r1, #0]
 8012f5c:	1b5b      	subs	r3, r3, r5
 8012f5e:	d419      	bmi.n	8012f94 <_malloc_r+0x94>
 8012f60:	2b0b      	cmp	r3, #11
 8012f62:	d903      	bls.n	8012f6c <_malloc_r+0x6c>
 8012f64:	600b      	str	r3, [r1, #0]
 8012f66:	18cc      	adds	r4, r1, r3
 8012f68:	6025      	str	r5, [r4, #0]
 8012f6a:	e003      	b.n	8012f74 <_malloc_r+0x74>
 8012f6c:	684b      	ldr	r3, [r1, #4]
 8012f6e:	428c      	cmp	r4, r1
 8012f70:	d10d      	bne.n	8012f8e <_malloc_r+0x8e>
 8012f72:	6013      	str	r3, [r2, #0]
 8012f74:	0030      	movs	r0, r6
 8012f76:	f000 f8ba 	bl	80130ee <__malloc_unlock>
 8012f7a:	0020      	movs	r0, r4
 8012f7c:	2207      	movs	r2, #7
 8012f7e:	300b      	adds	r0, #11
 8012f80:	1d23      	adds	r3, r4, #4
 8012f82:	4390      	bics	r0, r2
 8012f84:	1ac3      	subs	r3, r0, r3
 8012f86:	d0e7      	beq.n	8012f58 <_malloc_r+0x58>
 8012f88:	425a      	negs	r2, r3
 8012f8a:	50e2      	str	r2, [r4, r3]
 8012f8c:	e7e4      	b.n	8012f58 <_malloc_r+0x58>
 8012f8e:	6063      	str	r3, [r4, #4]
 8012f90:	000c      	movs	r4, r1
 8012f92:	e7ef      	b.n	8012f74 <_malloc_r+0x74>
 8012f94:	000c      	movs	r4, r1
 8012f96:	6849      	ldr	r1, [r1, #4]
 8012f98:	e7c3      	b.n	8012f22 <_malloc_r+0x22>
 8012f9a:	2303      	movs	r3, #3
 8012f9c:	1cc4      	adds	r4, r0, #3
 8012f9e:	439c      	bics	r4, r3
 8012fa0:	42a0      	cmp	r0, r4
 8012fa2:	d0e1      	beq.n	8012f68 <_malloc_r+0x68>
 8012fa4:	1a21      	subs	r1, r4, r0
 8012fa6:	0030      	movs	r0, r6
 8012fa8:	f000 f808 	bl	8012fbc <_sbrk_r>
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	d1db      	bne.n	8012f68 <_malloc_r+0x68>
 8012fb0:	e7c7      	b.n	8012f42 <_malloc_r+0x42>
 8012fb2:	46c0      	nop			; (mov r8, r8)
 8012fb4:	20000638 	.word	0x20000638
 8012fb8:	2000063c 	.word	0x2000063c

08012fbc <_sbrk_r>:
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	b570      	push	{r4, r5, r6, lr}
 8012fc0:	4c06      	ldr	r4, [pc, #24]	; (8012fdc <_sbrk_r+0x20>)
 8012fc2:	0005      	movs	r5, r0
 8012fc4:	0008      	movs	r0, r1
 8012fc6:	6023      	str	r3, [r4, #0]
 8012fc8:	f7ff fd04 	bl	80129d4 <_sbrk>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d103      	bne.n	8012fd8 <_sbrk_r+0x1c>
 8012fd0:	6823      	ldr	r3, [r4, #0]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d000      	beq.n	8012fd8 <_sbrk_r+0x1c>
 8012fd6:	602b      	str	r3, [r5, #0]
 8012fd8:	bd70      	pop	{r4, r5, r6, pc}
 8012fda:	46c0      	nop			; (mov r8, r8)
 8012fdc:	200006cc 	.word	0x200006cc

08012fe0 <__sread>:
 8012fe0:	b570      	push	{r4, r5, r6, lr}
 8012fe2:	000c      	movs	r4, r1
 8012fe4:	250e      	movs	r5, #14
 8012fe6:	5f49      	ldrsh	r1, [r1, r5]
 8012fe8:	f000 f882 	bl	80130f0 <_read_r>
 8012fec:	2800      	cmp	r0, #0
 8012fee:	db03      	blt.n	8012ff8 <__sread+0x18>
 8012ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012ff2:	181b      	adds	r3, r3, r0
 8012ff4:	6563      	str	r3, [r4, #84]	; 0x54
 8012ff6:	bd70      	pop	{r4, r5, r6, pc}
 8012ff8:	89a3      	ldrh	r3, [r4, #12]
 8012ffa:	4a02      	ldr	r2, [pc, #8]	; (8013004 <__sread+0x24>)
 8012ffc:	4013      	ands	r3, r2
 8012ffe:	81a3      	strh	r3, [r4, #12]
 8013000:	e7f9      	b.n	8012ff6 <__sread+0x16>
 8013002:	46c0      	nop			; (mov r8, r8)
 8013004:	ffffefff 	.word	0xffffefff

08013008 <__swrite>:
 8013008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300a:	001f      	movs	r7, r3
 801300c:	898b      	ldrh	r3, [r1, #12]
 801300e:	0005      	movs	r5, r0
 8013010:	000c      	movs	r4, r1
 8013012:	0016      	movs	r6, r2
 8013014:	05db      	lsls	r3, r3, #23
 8013016:	d505      	bpl.n	8013024 <__swrite+0x1c>
 8013018:	230e      	movs	r3, #14
 801301a:	5ec9      	ldrsh	r1, [r1, r3]
 801301c:	2200      	movs	r2, #0
 801301e:	2302      	movs	r3, #2
 8013020:	f000 f850 	bl	80130c4 <_lseek_r>
 8013024:	89a3      	ldrh	r3, [r4, #12]
 8013026:	4a05      	ldr	r2, [pc, #20]	; (801303c <__swrite+0x34>)
 8013028:	0028      	movs	r0, r5
 801302a:	4013      	ands	r3, r2
 801302c:	81a3      	strh	r3, [r4, #12]
 801302e:	0032      	movs	r2, r6
 8013030:	230e      	movs	r3, #14
 8013032:	5ee1      	ldrsh	r1, [r4, r3]
 8013034:	003b      	movs	r3, r7
 8013036:	f000 f81f 	bl	8013078 <_write_r>
 801303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801303c:	ffffefff 	.word	0xffffefff

08013040 <__sseek>:
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	000c      	movs	r4, r1
 8013044:	250e      	movs	r5, #14
 8013046:	5f49      	ldrsh	r1, [r1, r5]
 8013048:	f000 f83c 	bl	80130c4 <_lseek_r>
 801304c:	89a3      	ldrh	r3, [r4, #12]
 801304e:	1c42      	adds	r2, r0, #1
 8013050:	d103      	bne.n	801305a <__sseek+0x1a>
 8013052:	4a05      	ldr	r2, [pc, #20]	; (8013068 <__sseek+0x28>)
 8013054:	4013      	ands	r3, r2
 8013056:	81a3      	strh	r3, [r4, #12]
 8013058:	bd70      	pop	{r4, r5, r6, pc}
 801305a:	2280      	movs	r2, #128	; 0x80
 801305c:	0152      	lsls	r2, r2, #5
 801305e:	4313      	orrs	r3, r2
 8013060:	81a3      	strh	r3, [r4, #12]
 8013062:	6560      	str	r0, [r4, #84]	; 0x54
 8013064:	e7f8      	b.n	8013058 <__sseek+0x18>
 8013066:	46c0      	nop			; (mov r8, r8)
 8013068:	ffffefff 	.word	0xffffefff

0801306c <__sclose>:
 801306c:	b510      	push	{r4, lr}
 801306e:	230e      	movs	r3, #14
 8013070:	5ec9      	ldrsh	r1, [r1, r3]
 8013072:	f000 f815 	bl	80130a0 <_close_r>
 8013076:	bd10      	pop	{r4, pc}

08013078 <_write_r>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	0005      	movs	r5, r0
 801307c:	0008      	movs	r0, r1
 801307e:	0011      	movs	r1, r2
 8013080:	2200      	movs	r2, #0
 8013082:	4c06      	ldr	r4, [pc, #24]	; (801309c <_write_r+0x24>)
 8013084:	6022      	str	r2, [r4, #0]
 8013086:	001a      	movs	r2, r3
 8013088:	f7ff fc6c 	bl	8012964 <_write>
 801308c:	1c43      	adds	r3, r0, #1
 801308e:	d103      	bne.n	8013098 <_write_r+0x20>
 8013090:	6823      	ldr	r3, [r4, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d000      	beq.n	8013098 <_write_r+0x20>
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	bd70      	pop	{r4, r5, r6, pc}
 801309a:	46c0      	nop			; (mov r8, r8)
 801309c:	200006cc 	.word	0x200006cc

080130a0 <_close_r>:
 80130a0:	2300      	movs	r3, #0
 80130a2:	b570      	push	{r4, r5, r6, lr}
 80130a4:	4c06      	ldr	r4, [pc, #24]	; (80130c0 <_close_r+0x20>)
 80130a6:	0005      	movs	r5, r0
 80130a8:	0008      	movs	r0, r1
 80130aa:	6023      	str	r3, [r4, #0]
 80130ac:	f000 f834 	bl	8013118 <_close>
 80130b0:	1c43      	adds	r3, r0, #1
 80130b2:	d103      	bne.n	80130bc <_close_r+0x1c>
 80130b4:	6823      	ldr	r3, [r4, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d000      	beq.n	80130bc <_close_r+0x1c>
 80130ba:	602b      	str	r3, [r5, #0]
 80130bc:	bd70      	pop	{r4, r5, r6, pc}
 80130be:	46c0      	nop			; (mov r8, r8)
 80130c0:	200006cc 	.word	0x200006cc

080130c4 <_lseek_r>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	0005      	movs	r5, r0
 80130c8:	0008      	movs	r0, r1
 80130ca:	0011      	movs	r1, r2
 80130cc:	2200      	movs	r2, #0
 80130ce:	4c06      	ldr	r4, [pc, #24]	; (80130e8 <_lseek_r+0x24>)
 80130d0:	6022      	str	r2, [r4, #0]
 80130d2:	001a      	movs	r2, r3
 80130d4:	f000 f828 	bl	8013128 <_lseek>
 80130d8:	1c43      	adds	r3, r0, #1
 80130da:	d103      	bne.n	80130e4 <_lseek_r+0x20>
 80130dc:	6823      	ldr	r3, [r4, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d000      	beq.n	80130e4 <_lseek_r+0x20>
 80130e2:	602b      	str	r3, [r5, #0]
 80130e4:	bd70      	pop	{r4, r5, r6, pc}
 80130e6:	46c0      	nop			; (mov r8, r8)
 80130e8:	200006cc 	.word	0x200006cc

080130ec <__malloc_lock>:
 80130ec:	4770      	bx	lr

080130ee <__malloc_unlock>:
 80130ee:	4770      	bx	lr

080130f0 <_read_r>:
 80130f0:	b570      	push	{r4, r5, r6, lr}
 80130f2:	0005      	movs	r5, r0
 80130f4:	0008      	movs	r0, r1
 80130f6:	0011      	movs	r1, r2
 80130f8:	2200      	movs	r2, #0
 80130fa:	4c06      	ldr	r4, [pc, #24]	; (8013114 <_read_r+0x24>)
 80130fc:	6022      	str	r2, [r4, #0]
 80130fe:	001a      	movs	r2, r3
 8013100:	f000 f81a 	bl	8013138 <_read>
 8013104:	1c43      	adds	r3, r0, #1
 8013106:	d103      	bne.n	8013110 <_read_r+0x20>
 8013108:	6823      	ldr	r3, [r4, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d000      	beq.n	8013110 <_read_r+0x20>
 801310e:	602b      	str	r3, [r5, #0]
 8013110:	bd70      	pop	{r4, r5, r6, pc}
 8013112:	46c0      	nop			; (mov r8, r8)
 8013114:	200006cc 	.word	0x200006cc

08013118 <_close>:
 8013118:	2258      	movs	r2, #88	; 0x58
 801311a:	2001      	movs	r0, #1
 801311c:	4b01      	ldr	r3, [pc, #4]	; (8013124 <_close+0xc>)
 801311e:	4240      	negs	r0, r0
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	4770      	bx	lr
 8013124:	200006cc 	.word	0x200006cc

08013128 <_lseek>:
 8013128:	2258      	movs	r2, #88	; 0x58
 801312a:	2001      	movs	r0, #1
 801312c:	4b01      	ldr	r3, [pc, #4]	; (8013134 <_lseek+0xc>)
 801312e:	4240      	negs	r0, r0
 8013130:	601a      	str	r2, [r3, #0]
 8013132:	4770      	bx	lr
 8013134:	200006cc 	.word	0x200006cc

08013138 <_read>:
 8013138:	2258      	movs	r2, #88	; 0x58
 801313a:	2001      	movs	r0, #1
 801313c:	4b01      	ldr	r3, [pc, #4]	; (8013144 <_read+0xc>)
 801313e:	4240      	negs	r0, r0
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	4770      	bx	lr
 8013144:	200006cc 	.word	0x200006cc

08013148 <cos>:
 8013148:	b530      	push	{r4, r5, lr}
 801314a:	4a20      	ldr	r2, [pc, #128]	; (80131cc <cos+0x84>)
 801314c:	004b      	lsls	r3, r1, #1
 801314e:	b087      	sub	sp, #28
 8013150:	085b      	lsrs	r3, r3, #1
 8013152:	4293      	cmp	r3, r2
 8013154:	dd1c      	ble.n	8013190 <cos+0x48>
 8013156:	4a1e      	ldr	r2, [pc, #120]	; (80131d0 <cos+0x88>)
 8013158:	4293      	cmp	r3, r2
 801315a:	dd05      	ble.n	8013168 <cos+0x20>
 801315c:	0002      	movs	r2, r0
 801315e:	000b      	movs	r3, r1
 8013160:	f7fd fb1c 	bl	801079c <__aeabi_dsub>
 8013164:	b007      	add	sp, #28
 8013166:	bd30      	pop	{r4, r5, pc}
 8013168:	aa02      	add	r2, sp, #8
 801316a:	f000 f9db 	bl	8013524 <__ieee754_rem_pio2>
 801316e:	2303      	movs	r3, #3
 8013170:	4018      	ands	r0, r3
 8013172:	9a04      	ldr	r2, [sp, #16]
 8013174:	9b05      	ldr	r3, [sp, #20]
 8013176:	2801      	cmp	r0, #1
 8013178:	d00f      	beq.n	801319a <cos+0x52>
 801317a:	2802      	cmp	r0, #2
 801317c:	d01c      	beq.n	80131b8 <cos+0x70>
 801317e:	2800      	cmp	r0, #0
 8013180:	d015      	beq.n	80131ae <cos+0x66>
 8013182:	9802      	ldr	r0, [sp, #8]
 8013184:	9903      	ldr	r1, [sp, #12]
 8013186:	2401      	movs	r4, #1
 8013188:	9400      	str	r4, [sp, #0]
 801318a:	f001 fb7f 	bl	801488c <__kernel_sin>
 801318e:	e7e9      	b.n	8013164 <cos+0x1c>
 8013190:	2200      	movs	r2, #0
 8013192:	2300      	movs	r3, #0
 8013194:	f000 fe00 	bl	8013d98 <__kernel_cos>
 8013198:	e7e4      	b.n	8013164 <cos+0x1c>
 801319a:	9000      	str	r0, [sp, #0]
 801319c:	9802      	ldr	r0, [sp, #8]
 801319e:	9903      	ldr	r1, [sp, #12]
 80131a0:	f001 fb74 	bl	801488c <__kernel_sin>
 80131a4:	2380      	movs	r3, #128	; 0x80
 80131a6:	061b      	lsls	r3, r3, #24
 80131a8:	469c      	mov	ip, r3
 80131aa:	4461      	add	r1, ip
 80131ac:	e7da      	b.n	8013164 <cos+0x1c>
 80131ae:	9802      	ldr	r0, [sp, #8]
 80131b0:	9903      	ldr	r1, [sp, #12]
 80131b2:	f000 fdf1 	bl	8013d98 <__kernel_cos>
 80131b6:	e7d5      	b.n	8013164 <cos+0x1c>
 80131b8:	9802      	ldr	r0, [sp, #8]
 80131ba:	9903      	ldr	r1, [sp, #12]
 80131bc:	f000 fdec 	bl	8013d98 <__kernel_cos>
 80131c0:	2380      	movs	r3, #128	; 0x80
 80131c2:	061b      	lsls	r3, r3, #24
 80131c4:	469c      	mov	ip, r3
 80131c6:	4461      	add	r1, ip
 80131c8:	e7cc      	b.n	8013164 <cos+0x1c>
 80131ca:	46c0      	nop			; (mov r8, r8)
 80131cc:	3fe921fb 	.word	0x3fe921fb
 80131d0:	7fefffff 	.word	0x7fefffff

080131d4 <fmaxf>:
 80131d4:	b570      	push	{r4, r5, r6, lr}
 80131d6:	1c04      	adds	r4, r0, #0
 80131d8:	1c0d      	adds	r5, r1, #0
 80131da:	f000 f811 	bl	8013200 <__fpclassifyf>
 80131de:	2800      	cmp	r0, #0
 80131e0:	d102      	bne.n	80131e8 <fmaxf+0x14>
 80131e2:	1c2c      	adds	r4, r5, #0
 80131e4:	1c20      	adds	r0, r4, #0
 80131e6:	bd70      	pop	{r4, r5, r6, pc}
 80131e8:	1c28      	adds	r0, r5, #0
 80131ea:	f000 f809 	bl	8013200 <__fpclassifyf>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d0f8      	beq.n	80131e4 <fmaxf+0x10>
 80131f2:	1c29      	adds	r1, r5, #0
 80131f4:	1c20      	adds	r0, r4, #0
 80131f6:	f7fb fea5 	bl	800ef44 <__aeabi_fcmpgt>
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d0f1      	beq.n	80131e2 <fmaxf+0xe>
 80131fe:	e7f1      	b.n	80131e4 <fmaxf+0x10>

08013200 <__fpclassifyf>:
 8013200:	0040      	lsls	r0, r0, #1
 8013202:	0840      	lsrs	r0, r0, #1
 8013204:	d00e      	beq.n	8013224 <__fpclassifyf+0x24>
 8013206:	4b0a      	ldr	r3, [pc, #40]	; (8013230 <__fpclassifyf+0x30>)
 8013208:	4a0a      	ldr	r2, [pc, #40]	; (8013234 <__fpclassifyf+0x34>)
 801320a:	18c3      	adds	r3, r0, r3
 801320c:	4293      	cmp	r3, r2
 801320e:	d90b      	bls.n	8013228 <__fpclassifyf+0x28>
 8013210:	4a09      	ldr	r2, [pc, #36]	; (8013238 <__fpclassifyf+0x38>)
 8013212:	1e43      	subs	r3, r0, #1
 8013214:	4293      	cmp	r3, r2
 8013216:	d909      	bls.n	801322c <__fpclassifyf+0x2c>
 8013218:	4b08      	ldr	r3, [pc, #32]	; (801323c <__fpclassifyf+0x3c>)
 801321a:	469c      	mov	ip, r3
 801321c:	4460      	add	r0, ip
 801321e:	4243      	negs	r3, r0
 8013220:	4158      	adcs	r0, r3
 8013222:	4770      	bx	lr
 8013224:	2002      	movs	r0, #2
 8013226:	e7fc      	b.n	8013222 <__fpclassifyf+0x22>
 8013228:	2004      	movs	r0, #4
 801322a:	e7fa      	b.n	8013222 <__fpclassifyf+0x22>
 801322c:	2003      	movs	r0, #3
 801322e:	e7f8      	b.n	8013222 <__fpclassifyf+0x22>
 8013230:	ff800000 	.word	0xff800000
 8013234:	7effffff 	.word	0x7effffff
 8013238:	007ffffe 	.word	0x007ffffe
 801323c:	80800000 	.word	0x80800000

08013240 <roundf>:
 8013240:	0043      	lsls	r3, r0, #1
 8013242:	0e1b      	lsrs	r3, r3, #24
 8013244:	3b7f      	subs	r3, #127	; 0x7f
 8013246:	b510      	push	{r4, lr}
 8013248:	1c01      	adds	r1, r0, #0
 801324a:	2b16      	cmp	r3, #22
 801324c:	dc0b      	bgt.n	8013266 <roundf+0x26>
 801324e:	2b00      	cmp	r3, #0
 8013250:	db0e      	blt.n	8013270 <roundf+0x30>
 8013252:	4c0b      	ldr	r4, [pc, #44]	; (8013280 <roundf+0x40>)
 8013254:	411c      	asrs	r4, r3
 8013256:	4204      	tst	r4, r0
 8013258:	d004      	beq.n	8013264 <roundf+0x24>
 801325a:	2280      	movs	r2, #128	; 0x80
 801325c:	03d2      	lsls	r2, r2, #15
 801325e:	411a      	asrs	r2, r3
 8013260:	1810      	adds	r0, r2, r0
 8013262:	43a0      	bics	r0, r4
 8013264:	bd10      	pop	{r4, pc}
 8013266:	2b80      	cmp	r3, #128	; 0x80
 8013268:	d1fc      	bne.n	8013264 <roundf+0x24>
 801326a:	f7fa feb3 	bl	800dfd4 <__aeabi_fadd>
 801326e:	e7f9      	b.n	8013264 <roundf+0x24>
 8013270:	0fc0      	lsrs	r0, r0, #31
 8013272:	07c0      	lsls	r0, r0, #31
 8013274:	3301      	adds	r3, #1
 8013276:	d1f5      	bne.n	8013264 <roundf+0x24>
 8013278:	23fe      	movs	r3, #254	; 0xfe
 801327a:	059b      	lsls	r3, r3, #22
 801327c:	4318      	orrs	r0, r3
 801327e:	e7f1      	b.n	8013264 <roundf+0x24>
 8013280:	007fffff 	.word	0x007fffff

08013284 <sqrt>:
 8013284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013286:	4647      	mov	r7, r8
 8013288:	46ce      	mov	lr, r9
 801328a:	b580      	push	{r7, lr}
 801328c:	b08d      	sub	sp, #52	; 0x34
 801328e:	0004      	movs	r4, r0
 8013290:	000d      	movs	r5, r1
 8013292:	f000 fb57 	bl	8013944 <__ieee754_sqrt>
 8013296:	4b29      	ldr	r3, [pc, #164]	; (801333c <sqrt+0xb8>)
 8013298:	0006      	movs	r6, r0
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	000f      	movs	r7, r1
 801329e:	b25b      	sxtb	r3, r3
 80132a0:	4698      	mov	r8, r3
 80132a2:	3301      	adds	r3, #1
 80132a4:	d010      	beq.n	80132c8 <sqrt+0x44>
 80132a6:	0022      	movs	r2, r4
 80132a8:	002b      	movs	r3, r5
 80132aa:	0020      	movs	r0, r4
 80132ac:	0029      	movs	r1, r5
 80132ae:	f7fd fdbd 	bl	8010e2c <__aeabi_dcmpun>
 80132b2:	4681      	mov	r9, r0
 80132b4:	2800      	cmp	r0, #0
 80132b6:	d107      	bne.n	80132c8 <sqrt+0x44>
 80132b8:	2200      	movs	r2, #0
 80132ba:	2300      	movs	r3, #0
 80132bc:	0020      	movs	r0, r4
 80132be:	0029      	movs	r1, r5
 80132c0:	f7fb fdf2 	bl	800eea8 <__aeabi_dcmplt>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d106      	bne.n	80132d6 <sqrt+0x52>
 80132c8:	0030      	movs	r0, r6
 80132ca:	0039      	movs	r1, r7
 80132cc:	b00d      	add	sp, #52	; 0x34
 80132ce:	bc0c      	pop	{r2, r3}
 80132d0:	4690      	mov	r8, r2
 80132d2:	4699      	mov	r9, r3
 80132d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132d6:	2301      	movs	r3, #1
 80132d8:	9302      	str	r3, [sp, #8]
 80132da:	4b19      	ldr	r3, [pc, #100]	; (8013340 <sqrt+0xbc>)
 80132dc:	9406      	str	r4, [sp, #24]
 80132de:	9507      	str	r5, [sp, #28]
 80132e0:	9303      	str	r3, [sp, #12]
 80132e2:	464b      	mov	r3, r9
 80132e4:	930a      	str	r3, [sp, #40]	; 0x28
 80132e6:	4643      	mov	r3, r8
 80132e8:	9404      	str	r4, [sp, #16]
 80132ea:	9505      	str	r5, [sp, #20]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d015      	beq.n	801331c <sqrt+0x98>
 80132f0:	2300      	movs	r3, #0
 80132f2:	2200      	movs	r2, #0
 80132f4:	0019      	movs	r1, r3
 80132f6:	0010      	movs	r0, r2
 80132f8:	f7fc fbd4 	bl	800faa4 <__aeabi_ddiv>
 80132fc:	4643      	mov	r3, r8
 80132fe:	9008      	str	r0, [sp, #32]
 8013300:	9109      	str	r1, [sp, #36]	; 0x24
 8013302:	2b02      	cmp	r3, #2
 8013304:	d10e      	bne.n	8013324 <sqrt+0xa0>
 8013306:	f7ff fbdf 	bl	8012ac8 <__errno>
 801330a:	2321      	movs	r3, #33	; 0x21
 801330c:	6003      	str	r3, [r0, #0]
 801330e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013310:	9301      	str	r3, [sp, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d10c      	bne.n	8013330 <sqrt+0xac>
 8013316:	9e08      	ldr	r6, [sp, #32]
 8013318:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801331a:	e7d5      	b.n	80132c8 <sqrt+0x44>
 801331c:	2300      	movs	r3, #0
 801331e:	2400      	movs	r4, #0
 8013320:	9308      	str	r3, [sp, #32]
 8013322:	9409      	str	r4, [sp, #36]	; 0x24
 8013324:	a802      	add	r0, sp, #8
 8013326:	f001 fc03 	bl	8014b30 <matherr>
 801332a:	2800      	cmp	r0, #0
 801332c:	d1ef      	bne.n	801330e <sqrt+0x8a>
 801332e:	e7ea      	b.n	8013306 <sqrt+0x82>
 8013330:	f7ff fbca 	bl	8012ac8 <__errno>
 8013334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013336:	9301      	str	r3, [sp, #4]
 8013338:	6003      	str	r3, [r0, #0]
 801333a:	e7ec      	b.n	8013316 <sqrt+0x92>
 801333c:	2000006c 	.word	0x2000006c
 8013340:	0801e414 	.word	0x0801e414

08013344 <expf>:
 8013344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013346:	b08b      	sub	sp, #44	; 0x2c
 8013348:	1c04      	adds	r4, r0, #0
 801334a:	f000 fbd3 	bl	8013af4 <__ieee754_expf>
 801334e:	2300      	movs	r3, #0
 8013350:	4e30      	ldr	r6, [pc, #192]	; (8013414 <expf+0xd0>)
 8013352:	1c05      	adds	r5, r0, #0
 8013354:	56f3      	ldrsb	r3, [r6, r3]
 8013356:	3301      	adds	r3, #1
 8013358:	d036      	beq.n	80133c8 <expf+0x84>
 801335a:	1c20      	adds	r0, r4, #0
 801335c:	f001 fc58 	bl	8014c10 <finitef>
 8013360:	2800      	cmp	r0, #0
 8013362:	d031      	beq.n	80133c8 <expf+0x84>
 8013364:	492c      	ldr	r1, [pc, #176]	; (8013418 <expf+0xd4>)
 8013366:	1c20      	adds	r0, r4, #0
 8013368:	f7fb fdec 	bl	800ef44 <__aeabi_fcmpgt>
 801336c:	1e07      	subs	r7, r0, #0
 801336e:	d12e      	bne.n	80133ce <expf+0x8a>
 8013370:	492a      	ldr	r1, [pc, #168]	; (801341c <expf+0xd8>)
 8013372:	1c20      	adds	r0, r4, #0
 8013374:	f7fb fdd2 	bl	800ef1c <__aeabi_fcmplt>
 8013378:	2800      	cmp	r0, #0
 801337a:	d025      	beq.n	80133c8 <expf+0x84>
 801337c:	2304      	movs	r3, #4
 801337e:	466d      	mov	r5, sp
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	4b27      	ldr	r3, [pc, #156]	; (8013420 <expf+0xdc>)
 8013384:	622f      	str	r7, [r5, #32]
 8013386:	606b      	str	r3, [r5, #4]
 8013388:	1c20      	adds	r0, r4, #0
 801338a:	f7fd fe0d 	bl	8010fa8 <__aeabi_f2d>
 801338e:	2300      	movs	r3, #0
 8013390:	2200      	movs	r2, #0
 8013392:	61aa      	str	r2, [r5, #24]
 8013394:	61eb      	str	r3, [r5, #28]
 8013396:	2300      	movs	r3, #0
 8013398:	56f3      	ldrsb	r3, [r6, r3]
 801339a:	6128      	str	r0, [r5, #16]
 801339c:	6169      	str	r1, [r5, #20]
 801339e:	60a8      	str	r0, [r5, #8]
 80133a0:	60e9      	str	r1, [r5, #12]
 80133a2:	2b02      	cmp	r3, #2
 80133a4:	d031      	beq.n	801340a <expf+0xc6>
 80133a6:	0028      	movs	r0, r5
 80133a8:	f001 fbc2 	bl	8014b30 <matherr>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d02c      	beq.n	801340a <expf+0xc6>
 80133b0:	6a2b      	ldr	r3, [r5, #32]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d003      	beq.n	80133be <expf+0x7a>
 80133b6:	f7ff fb87 	bl	8012ac8 <__errno>
 80133ba:	6a2b      	ldr	r3, [r5, #32]
 80133bc:	6003      	str	r3, [r0, #0]
 80133be:	69a8      	ldr	r0, [r5, #24]
 80133c0:	69e9      	ldr	r1, [r5, #28]
 80133c2:	f7fd fe43 	bl	801104c <__aeabi_d2f>
 80133c6:	1c05      	adds	r5, r0, #0
 80133c8:	1c28      	adds	r0, r5, #0
 80133ca:	b00b      	add	sp, #44	; 0x2c
 80133cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133ce:	2303      	movs	r3, #3
 80133d0:	466d      	mov	r5, sp
 80133d2:	9300      	str	r3, [sp, #0]
 80133d4:	4b12      	ldr	r3, [pc, #72]	; (8013420 <expf+0xdc>)
 80133d6:	1c20      	adds	r0, r4, #0
 80133d8:	606b      	str	r3, [r5, #4]
 80133da:	2300      	movs	r3, #0
 80133dc:	622b      	str	r3, [r5, #32]
 80133de:	f7fd fde3 	bl	8010fa8 <__aeabi_f2d>
 80133e2:	2300      	movs	r3, #0
 80133e4:	56f3      	ldrsb	r3, [r6, r3]
 80133e6:	6128      	str	r0, [r5, #16]
 80133e8:	6169      	str	r1, [r5, #20]
 80133ea:	60a8      	str	r0, [r5, #8]
 80133ec:	60e9      	str	r1, [r5, #12]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d105      	bne.n	80133fe <expf+0xba>
 80133f2:	22e0      	movs	r2, #224	; 0xe0
 80133f4:	4b0b      	ldr	r3, [pc, #44]	; (8013424 <expf+0xe0>)
 80133f6:	0612      	lsls	r2, r2, #24
 80133f8:	61aa      	str	r2, [r5, #24]
 80133fa:	61eb      	str	r3, [r5, #28]
 80133fc:	e7d3      	b.n	80133a6 <expf+0x62>
 80133fe:	2000      	movs	r0, #0
 8013400:	4909      	ldr	r1, [pc, #36]	; (8013428 <expf+0xe4>)
 8013402:	61a8      	str	r0, [r5, #24]
 8013404:	61e9      	str	r1, [r5, #28]
 8013406:	2b02      	cmp	r3, #2
 8013408:	d1cd      	bne.n	80133a6 <expf+0x62>
 801340a:	f7ff fb5d 	bl	8012ac8 <__errno>
 801340e:	2322      	movs	r3, #34	; 0x22
 8013410:	6003      	str	r3, [r0, #0]
 8013412:	e7cd      	b.n	80133b0 <expf+0x6c>
 8013414:	2000006c 	.word	0x2000006c
 8013418:	42b17180 	.word	0x42b17180
 801341c:	c2cff1b5 	.word	0xc2cff1b5
 8013420:	0801e41c 	.word	0x0801e41c
 8013424:	47efffff 	.word	0x47efffff
 8013428:	7ff00000 	.word	0x7ff00000

0801342c <log10f>:
 801342c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801342e:	2500      	movs	r5, #0
 8013430:	b08d      	sub	sp, #52	; 0x34
 8013432:	1c04      	adds	r4, r0, #0
 8013434:	f000 fc58 	bl	8013ce8 <__ieee754_log10f>
 8013438:	4b35      	ldr	r3, [pc, #212]	; (8013510 <log10f+0xe4>)
 801343a:	1c06      	adds	r6, r0, #0
 801343c:	575d      	ldrsb	r5, [r3, r5]
 801343e:	1c6b      	adds	r3, r5, #1
 8013440:	d00b      	beq.n	801345a <log10f+0x2e>
 8013442:	1c21      	adds	r1, r4, #0
 8013444:	1c20      	adds	r0, r4, #0
 8013446:	f7fb ff51 	bl	800f2ec <__aeabi_fcmpun>
 801344a:	1e07      	subs	r7, r0, #0
 801344c:	d105      	bne.n	801345a <log10f+0x2e>
 801344e:	2100      	movs	r1, #0
 8013450:	1c20      	adds	r0, r4, #0
 8013452:	f7fb fd6d 	bl	800ef30 <__aeabi_fcmple>
 8013456:	2800      	cmp	r0, #0
 8013458:	d102      	bne.n	8013460 <log10f+0x34>
 801345a:	1c30      	adds	r0, r6, #0
 801345c:	b00d      	add	sp, #52	; 0x34
 801345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013460:	4b2c      	ldr	r3, [pc, #176]	; (8013514 <log10f+0xe8>)
 8013462:	1c20      	adds	r0, r4, #0
 8013464:	9303      	str	r3, [sp, #12]
 8013466:	970a      	str	r7, [sp, #40]	; 0x28
 8013468:	f7fd fd9e 	bl	8010fa8 <__aeabi_f2d>
 801346c:	9006      	str	r0, [sp, #24]
 801346e:	9107      	str	r1, [sp, #28]
 8013470:	9004      	str	r0, [sp, #16]
 8013472:	9105      	str	r1, [sp, #20]
 8013474:	2d00      	cmp	r5, #0
 8013476:	d11b      	bne.n	80134b0 <log10f+0x84>
 8013478:	22e0      	movs	r2, #224	; 0xe0
 801347a:	4b27      	ldr	r3, [pc, #156]	; (8013518 <log10f+0xec>)
 801347c:	0612      	lsls	r2, r2, #24
 801347e:	2100      	movs	r1, #0
 8013480:	1c20      	adds	r0, r4, #0
 8013482:	9208      	str	r2, [sp, #32]
 8013484:	9309      	str	r3, [sp, #36]	; 0x24
 8013486:	f7fb fd43 	bl	800ef10 <__aeabi_fcmpeq>
 801348a:	2800      	cmp	r0, #0
 801348c:	d037      	beq.n	80134fe <log10f+0xd2>
 801348e:	2302      	movs	r3, #2
 8013490:	9302      	str	r3, [sp, #8]
 8013492:	a802      	add	r0, sp, #8
 8013494:	f001 fb4c 	bl	8014b30 <matherr>
 8013498:	2800      	cmp	r0, #0
 801349a:	d017      	beq.n	80134cc <log10f+0xa0>
 801349c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801349e:	9301      	str	r3, [sp, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d118      	bne.n	80134d6 <log10f+0xaa>
 80134a4:	9808      	ldr	r0, [sp, #32]
 80134a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80134a8:	f7fd fdd0 	bl	801104c <__aeabi_d2f>
 80134ac:	1c06      	adds	r6, r0, #0
 80134ae:	e7d4      	b.n	801345a <log10f+0x2e>
 80134b0:	2200      	movs	r2, #0
 80134b2:	4b1a      	ldr	r3, [pc, #104]	; (801351c <log10f+0xf0>)
 80134b4:	2100      	movs	r1, #0
 80134b6:	1c20      	adds	r0, r4, #0
 80134b8:	9208      	str	r2, [sp, #32]
 80134ba:	9309      	str	r3, [sp, #36]	; 0x24
 80134bc:	f7fb fd28 	bl	800ef10 <__aeabi_fcmpeq>
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d00e      	beq.n	80134e2 <log10f+0xb6>
 80134c4:	2302      	movs	r3, #2
 80134c6:	9302      	str	r3, [sp, #8]
 80134c8:	2d02      	cmp	r5, #2
 80134ca:	d1e2      	bne.n	8013492 <log10f+0x66>
 80134cc:	f7ff fafc 	bl	8012ac8 <__errno>
 80134d0:	2322      	movs	r3, #34	; 0x22
 80134d2:	6003      	str	r3, [r0, #0]
 80134d4:	e7e2      	b.n	801349c <log10f+0x70>
 80134d6:	f7ff faf7 	bl	8012ac8 <__errno>
 80134da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134dc:	9301      	str	r3, [sp, #4]
 80134de:	6003      	str	r3, [r0, #0]
 80134e0:	e7e0      	b.n	80134a4 <log10f+0x78>
 80134e2:	2301      	movs	r3, #1
 80134e4:	9302      	str	r3, [sp, #8]
 80134e6:	2d02      	cmp	r5, #2
 80134e8:	d10b      	bne.n	8013502 <log10f+0xd6>
 80134ea:	f7ff faed 	bl	8012ac8 <__errno>
 80134ee:	2321      	movs	r3, #33	; 0x21
 80134f0:	6003      	str	r3, [r0, #0]
 80134f2:	480b      	ldr	r0, [pc, #44]	; (8013520 <log10f+0xf4>)
 80134f4:	f001 fb1e 	bl	8014b34 <nan>
 80134f8:	9008      	str	r0, [sp, #32]
 80134fa:	9109      	str	r1, [sp, #36]	; 0x24
 80134fc:	e7ce      	b.n	801349c <log10f+0x70>
 80134fe:	2301      	movs	r3, #1
 8013500:	9302      	str	r3, [sp, #8]
 8013502:	a802      	add	r0, sp, #8
 8013504:	f001 fb14 	bl	8014b30 <matherr>
 8013508:	2800      	cmp	r0, #0
 801350a:	d1f2      	bne.n	80134f2 <log10f+0xc6>
 801350c:	e7ed      	b.n	80134ea <log10f+0xbe>
 801350e:	46c0      	nop			; (mov r8, r8)
 8013510:	2000006c 	.word	0x2000006c
 8013514:	0801e424 	.word	0x0801e424
 8013518:	c7efffff 	.word	0xc7efffff
 801351c:	fff00000 	.word	0xfff00000
 8013520:	0801e420 	.word	0x0801e420

08013524 <__ieee754_rem_pio2>:
 8013524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013526:	464e      	mov	r6, r9
 8013528:	4645      	mov	r5, r8
 801352a:	46de      	mov	lr, fp
 801352c:	4657      	mov	r7, sl
 801352e:	b5e0      	push	{r5, r6, r7, lr}
 8013530:	4be1      	ldr	r3, [pc, #900]	; (80138b8 <__ieee754_rem_pio2+0x394>)
 8013532:	004c      	lsls	r4, r1, #1
 8013534:	b08f      	sub	sp, #60	; 0x3c
 8013536:	4690      	mov	r8, r2
 8013538:	4689      	mov	r9, r1
 801353a:	0864      	lsrs	r4, r4, #1
 801353c:	429c      	cmp	r4, r3
 801353e:	dc00      	bgt.n	8013542 <__ieee754_rem_pio2+0x1e>
 8013540:	e087      	b.n	8013652 <__ieee754_rem_pio2+0x12e>
 8013542:	4bde      	ldr	r3, [pc, #888]	; (80138bc <__ieee754_rem_pio2+0x398>)
 8013544:	429c      	cmp	r4, r3
 8013546:	dc22      	bgt.n	801358e <__ieee754_rem_pio2+0x6a>
 8013548:	4add      	ldr	r2, [pc, #884]	; (80138c0 <__ieee754_rem_pio2+0x39c>)
 801354a:	2900      	cmp	r1, #0
 801354c:	dc00      	bgt.n	8013550 <__ieee754_rem_pio2+0x2c>
 801354e:	e092      	b.n	8013676 <__ieee754_rem_pio2+0x152>
 8013550:	4bdc      	ldr	r3, [pc, #880]	; (80138c4 <__ieee754_rem_pio2+0x3a0>)
 8013552:	f7fd f923 	bl	801079c <__aeabi_dsub>
 8013556:	4bdb      	ldr	r3, [pc, #876]	; (80138c4 <__ieee754_rem_pio2+0x3a0>)
 8013558:	0006      	movs	r6, r0
 801355a:	000f      	movs	r7, r1
 801355c:	429c      	cmp	r4, r3
 801355e:	d100      	bne.n	8013562 <__ieee754_rem_pio2+0x3e>
 8013560:	e17e      	b.n	8013860 <__ieee754_rem_pio2+0x33c>
 8013562:	4ad9      	ldr	r2, [pc, #868]	; (80138c8 <__ieee754_rem_pio2+0x3a4>)
 8013564:	4bd9      	ldr	r3, [pc, #868]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 8013566:	f7fd f919 	bl	801079c <__aeabi_dsub>
 801356a:	0002      	movs	r2, r0
 801356c:	000b      	movs	r3, r1
 801356e:	4641      	mov	r1, r8
 8013570:	0030      	movs	r0, r6
 8013572:	600a      	str	r2, [r1, #0]
 8013574:	604b      	str	r3, [r1, #4]
 8013576:	0039      	movs	r1, r7
 8013578:	f7fd f910 	bl	801079c <__aeabi_dsub>
 801357c:	4bd3      	ldr	r3, [pc, #844]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 801357e:	4ad2      	ldr	r2, [pc, #840]	; (80138c8 <__ieee754_rem_pio2+0x3a4>)
 8013580:	f7fd f90c 	bl	801079c <__aeabi_dsub>
 8013584:	4643      	mov	r3, r8
 8013586:	2501      	movs	r5, #1
 8013588:	6098      	str	r0, [r3, #8]
 801358a:	60d9      	str	r1, [r3, #12]
 801358c:	e06b      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 801358e:	4bd0      	ldr	r3, [pc, #832]	; (80138d0 <__ieee754_rem_pio2+0x3ac>)
 8013590:	429c      	cmp	r4, r3
 8013592:	dc00      	bgt.n	8013596 <__ieee754_rem_pio2+0x72>
 8013594:	e08f      	b.n	80136b6 <__ieee754_rem_pio2+0x192>
 8013596:	4bcf      	ldr	r3, [pc, #828]	; (80138d4 <__ieee754_rem_pio2+0x3b0>)
 8013598:	429c      	cmp	r4, r3
 801359a:	dd00      	ble.n	801359e <__ieee754_rem_pio2+0x7a>
 801359c:	e155      	b.n	801384a <__ieee754_rem_pio2+0x326>
 801359e:	4ace      	ldr	r2, [pc, #824]	; (80138d8 <__ieee754_rem_pio2+0x3b4>)
 80135a0:	1523      	asrs	r3, r4, #20
 80135a2:	4692      	mov	sl, r2
 80135a4:	449a      	add	sl, r3
 80135a6:	4651      	mov	r1, sl
 80135a8:	0509      	lsls	r1, r1, #20
 80135aa:	1a63      	subs	r3, r4, r1
 80135ac:	0019      	movs	r1, r3
 80135ae:	001d      	movs	r5, r3
 80135b0:	0004      	movs	r4, r0
 80135b2:	f7fd fc57 	bl	8010e64 <__aeabi_d2iz>
 80135b6:	f7fd fc8b 	bl	8010ed0 <__aeabi_i2d>
 80135ba:	0002      	movs	r2, r0
 80135bc:	000b      	movs	r3, r1
 80135be:	0020      	movs	r0, r4
 80135c0:	0029      	movs	r1, r5
 80135c2:	9208      	str	r2, [sp, #32]
 80135c4:	9309      	str	r3, [sp, #36]	; 0x24
 80135c6:	f7fd f8e9 	bl	801079c <__aeabi_dsub>
 80135ca:	2200      	movs	r2, #0
 80135cc:	4bc3      	ldr	r3, [pc, #780]	; (80138dc <__ieee754_rem_pio2+0x3b8>)
 80135ce:	f7fc fe73 	bl	80102b8 <__aeabi_dmul>
 80135d2:	000f      	movs	r7, r1
 80135d4:	0006      	movs	r6, r0
 80135d6:	f7fd fc45 	bl	8010e64 <__aeabi_d2iz>
 80135da:	f7fd fc79 	bl	8010ed0 <__aeabi_i2d>
 80135de:	0004      	movs	r4, r0
 80135e0:	000d      	movs	r5, r1
 80135e2:	0002      	movs	r2, r0
 80135e4:	000b      	movs	r3, r1
 80135e6:	0030      	movs	r0, r6
 80135e8:	0039      	movs	r1, r7
 80135ea:	940a      	str	r4, [sp, #40]	; 0x28
 80135ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80135ee:	f7fd f8d5 	bl	801079c <__aeabi_dsub>
 80135f2:	2200      	movs	r2, #0
 80135f4:	4bb9      	ldr	r3, [pc, #740]	; (80138dc <__ieee754_rem_pio2+0x3b8>)
 80135f6:	f7fc fe5f 	bl	80102b8 <__aeabi_dmul>
 80135fa:	2200      	movs	r2, #0
 80135fc:	2300      	movs	r3, #0
 80135fe:	900c      	str	r0, [sp, #48]	; 0x30
 8013600:	910d      	str	r1, [sp, #52]	; 0x34
 8013602:	f7fb fc4b 	bl	800ee9c <__aeabi_dcmpeq>
 8013606:	2800      	cmp	r0, #0
 8013608:	d100      	bne.n	801360c <__ieee754_rem_pio2+0xe8>
 801360a:	e192      	b.n	8013932 <__ieee754_rem_pio2+0x40e>
 801360c:	2300      	movs	r3, #0
 801360e:	2200      	movs	r2, #0
 8013610:	0020      	movs	r0, r4
 8013612:	0029      	movs	r1, r5
 8013614:	f7fb fc42 	bl	800ee9c <__aeabi_dcmpeq>
 8013618:	4243      	negs	r3, r0
 801361a:	4143      	adcs	r3, r0
 801361c:	3301      	adds	r3, #1
 801361e:	4ab0      	ldr	r2, [pc, #704]	; (80138e0 <__ieee754_rem_pio2+0x3bc>)
 8013620:	4641      	mov	r1, r8
 8013622:	9201      	str	r2, [sp, #4]
 8013624:	2202      	movs	r2, #2
 8013626:	a808      	add	r0, sp, #32
 8013628:	9200      	str	r2, [sp, #0]
 801362a:	4652      	mov	r2, sl
 801362c:	f000 fcce 	bl	8013fcc <__kernel_rem_pio2>
 8013630:	464b      	mov	r3, r9
 8013632:	0005      	movs	r5, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	da16      	bge.n	8013666 <__ieee754_rem_pio2+0x142>
 8013638:	2280      	movs	r2, #128	; 0x80
 801363a:	4643      	mov	r3, r8
 801363c:	0612      	lsls	r2, r2, #24
 801363e:	4694      	mov	ip, r2
 8013640:	4642      	mov	r2, r8
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	4245      	negs	r5, r0
 8013646:	4463      	add	r3, ip
 8013648:	6053      	str	r3, [r2, #4]
 801364a:	68d3      	ldr	r3, [r2, #12]
 801364c:	4463      	add	r3, ip
 801364e:	60d3      	str	r3, [r2, #12]
 8013650:	e009      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 8013652:	000b      	movs	r3, r1
 8013654:	0002      	movs	r2, r0
 8013656:	4641      	mov	r1, r8
 8013658:	600a      	str	r2, [r1, #0]
 801365a:	604b      	str	r3, [r1, #4]
 801365c:	2200      	movs	r2, #0
 801365e:	2300      	movs	r3, #0
 8013660:	2500      	movs	r5, #0
 8013662:	608a      	str	r2, [r1, #8]
 8013664:	60cb      	str	r3, [r1, #12]
 8013666:	0028      	movs	r0, r5
 8013668:	b00f      	add	sp, #60	; 0x3c
 801366a:	bc3c      	pop	{r2, r3, r4, r5}
 801366c:	4690      	mov	r8, r2
 801366e:	4699      	mov	r9, r3
 8013670:	46a2      	mov	sl, r4
 8013672:	46ab      	mov	fp, r5
 8013674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013676:	4b93      	ldr	r3, [pc, #588]	; (80138c4 <__ieee754_rem_pio2+0x3a0>)
 8013678:	f7fb fef8 	bl	800f46c <__aeabi_dadd>
 801367c:	4b91      	ldr	r3, [pc, #580]	; (80138c4 <__ieee754_rem_pio2+0x3a0>)
 801367e:	0006      	movs	r6, r0
 8013680:	000f      	movs	r7, r1
 8013682:	429c      	cmp	r4, r3
 8013684:	d100      	bne.n	8013688 <__ieee754_rem_pio2+0x164>
 8013686:	e13d      	b.n	8013904 <__ieee754_rem_pio2+0x3e0>
 8013688:	4a8f      	ldr	r2, [pc, #572]	; (80138c8 <__ieee754_rem_pio2+0x3a4>)
 801368a:	4b90      	ldr	r3, [pc, #576]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 801368c:	f7fb feee 	bl	800f46c <__aeabi_dadd>
 8013690:	0002      	movs	r2, r0
 8013692:	000b      	movs	r3, r1
 8013694:	4641      	mov	r1, r8
 8013696:	0030      	movs	r0, r6
 8013698:	600a      	str	r2, [r1, #0]
 801369a:	604b      	str	r3, [r1, #4]
 801369c:	0039      	movs	r1, r7
 801369e:	f7fd f87d 	bl	801079c <__aeabi_dsub>
 80136a2:	4a89      	ldr	r2, [pc, #548]	; (80138c8 <__ieee754_rem_pio2+0x3a4>)
 80136a4:	4b89      	ldr	r3, [pc, #548]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 80136a6:	f7fb fee1 	bl	800f46c <__aeabi_dadd>
 80136aa:	2501      	movs	r5, #1
 80136ac:	4643      	mov	r3, r8
 80136ae:	426d      	negs	r5, r5
 80136b0:	6098      	str	r0, [r3, #8]
 80136b2:	60d9      	str	r1, [r3, #12]
 80136b4:	e7d7      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 80136b6:	f001 f99b 	bl	80149f0 <fabs>
 80136ba:	4a8a      	ldr	r2, [pc, #552]	; (80138e4 <__ieee754_rem_pio2+0x3c0>)
 80136bc:	4b8a      	ldr	r3, [pc, #552]	; (80138e8 <__ieee754_rem_pio2+0x3c4>)
 80136be:	0006      	movs	r6, r0
 80136c0:	000f      	movs	r7, r1
 80136c2:	f7fc fdf9 	bl	80102b8 <__aeabi_dmul>
 80136c6:	2200      	movs	r2, #0
 80136c8:	4b88      	ldr	r3, [pc, #544]	; (80138ec <__ieee754_rem_pio2+0x3c8>)
 80136ca:	f7fb fecf 	bl	800f46c <__aeabi_dadd>
 80136ce:	f7fd fbc9 	bl	8010e64 <__aeabi_d2iz>
 80136d2:	0005      	movs	r5, r0
 80136d4:	f7fd fbfc 	bl	8010ed0 <__aeabi_i2d>
 80136d8:	4a79      	ldr	r2, [pc, #484]	; (80138c0 <__ieee754_rem_pio2+0x39c>)
 80136da:	4b7a      	ldr	r3, [pc, #488]	; (80138c4 <__ieee754_rem_pio2+0x3a0>)
 80136dc:	9004      	str	r0, [sp, #16]
 80136de:	9105      	str	r1, [sp, #20]
 80136e0:	f7fc fdea 	bl	80102b8 <__aeabi_dmul>
 80136e4:	0002      	movs	r2, r0
 80136e6:	000b      	movs	r3, r1
 80136e8:	0030      	movs	r0, r6
 80136ea:	0039      	movs	r1, r7
 80136ec:	f7fd f856 	bl	801079c <__aeabi_dsub>
 80136f0:	4a75      	ldr	r2, [pc, #468]	; (80138c8 <__ieee754_rem_pio2+0x3a4>)
 80136f2:	0006      	movs	r6, r0
 80136f4:	000f      	movs	r7, r1
 80136f6:	9804      	ldr	r0, [sp, #16]
 80136f8:	9905      	ldr	r1, [sp, #20]
 80136fa:	4b74      	ldr	r3, [pc, #464]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 80136fc:	f7fc fddc 	bl	80102b8 <__aeabi_dmul>
 8013700:	9002      	str	r0, [sp, #8]
 8013702:	9103      	str	r1, [sp, #12]
 8013704:	2d1f      	cmp	r5, #31
 8013706:	dc00      	bgt.n	801370a <__ieee754_rem_pio2+0x1e6>
 8013708:	e0c7      	b.n	801389a <__ieee754_rem_pio2+0x376>
 801370a:	9a02      	ldr	r2, [sp, #8]
 801370c:	9b03      	ldr	r3, [sp, #12]
 801370e:	0030      	movs	r0, r6
 8013710:	0039      	movs	r1, r7
 8013712:	f7fd f843 	bl	801079c <__aeabi_dsub>
 8013716:	4683      	mov	fp, r0
 8013718:	468a      	mov	sl, r1
 801371a:	4653      	mov	r3, sl
 801371c:	005b      	lsls	r3, r3, #1
 801371e:	1524      	asrs	r4, r4, #20
 8013720:	0d5b      	lsrs	r3, r3, #21
 8013722:	1ae3      	subs	r3, r4, r3
 8013724:	2b10      	cmp	r3, #16
 8013726:	dd6c      	ble.n	8013802 <__ieee754_rem_pio2+0x2de>
 8013728:	9804      	ldr	r0, [sp, #16]
 801372a:	9905      	ldr	r1, [sp, #20]
 801372c:	22d3      	movs	r2, #211	; 0xd3
 801372e:	4b67      	ldr	r3, [pc, #412]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 8013730:	0552      	lsls	r2, r2, #21
 8013732:	f7fc fdc1 	bl	80102b8 <__aeabi_dmul>
 8013736:	0002      	movs	r2, r0
 8013738:	000b      	movs	r3, r1
 801373a:	0030      	movs	r0, r6
 801373c:	0039      	movs	r1, r7
 801373e:	9202      	str	r2, [sp, #8]
 8013740:	9303      	str	r3, [sp, #12]
 8013742:	f7fd f82b 	bl	801079c <__aeabi_dsub>
 8013746:	000a      	movs	r2, r1
 8013748:	0001      	movs	r1, r0
 801374a:	0013      	movs	r3, r2
 801374c:	9106      	str	r1, [sp, #24]
 801374e:	9207      	str	r2, [sp, #28]
 8013750:	0002      	movs	r2, r0
 8013752:	0039      	movs	r1, r7
 8013754:	0030      	movs	r0, r6
 8013756:	f7fd f821 	bl	801079c <__aeabi_dsub>
 801375a:	9a02      	ldr	r2, [sp, #8]
 801375c:	9b03      	ldr	r3, [sp, #12]
 801375e:	f7fd f81d 	bl	801079c <__aeabi_dsub>
 8013762:	0006      	movs	r6, r0
 8013764:	000f      	movs	r7, r1
 8013766:	9804      	ldr	r0, [sp, #16]
 8013768:	9905      	ldr	r1, [sp, #20]
 801376a:	4a61      	ldr	r2, [pc, #388]	; (80138f0 <__ieee754_rem_pio2+0x3cc>)
 801376c:	4b61      	ldr	r3, [pc, #388]	; (80138f4 <__ieee754_rem_pio2+0x3d0>)
 801376e:	f7fc fda3 	bl	80102b8 <__aeabi_dmul>
 8013772:	0032      	movs	r2, r6
 8013774:	003b      	movs	r3, r7
 8013776:	f7fd f811 	bl	801079c <__aeabi_dsub>
 801377a:	9e06      	ldr	r6, [sp, #24]
 801377c:	9f07      	ldr	r7, [sp, #28]
 801377e:	000b      	movs	r3, r1
 8013780:	0002      	movs	r2, r0
 8013782:	0039      	movs	r1, r7
 8013784:	0030      	movs	r0, r6
 8013786:	9202      	str	r2, [sp, #8]
 8013788:	9303      	str	r3, [sp, #12]
 801378a:	f7fd f807 	bl	801079c <__aeabi_dsub>
 801378e:	004b      	lsls	r3, r1, #1
 8013790:	0d5b      	lsrs	r3, r3, #21
 8013792:	4683      	mov	fp, r0
 8013794:	468a      	mov	sl, r1
 8013796:	1ae4      	subs	r4, r4, r3
 8013798:	2c31      	cmp	r4, #49	; 0x31
 801379a:	dd32      	ble.n	8013802 <__ieee754_rem_pio2+0x2de>
 801379c:	9804      	ldr	r0, [sp, #16]
 801379e:	9905      	ldr	r1, [sp, #20]
 80137a0:	22b8      	movs	r2, #184	; 0xb8
 80137a2:	4b54      	ldr	r3, [pc, #336]	; (80138f4 <__ieee754_rem_pio2+0x3d0>)
 80137a4:	0592      	lsls	r2, r2, #22
 80137a6:	f7fc fd87 	bl	80102b8 <__aeabi_dmul>
 80137aa:	0003      	movs	r3, r0
 80137ac:	000c      	movs	r4, r1
 80137ae:	0002      	movs	r2, r0
 80137b0:	9302      	str	r3, [sp, #8]
 80137b2:	9403      	str	r4, [sp, #12]
 80137b4:	000b      	movs	r3, r1
 80137b6:	9806      	ldr	r0, [sp, #24]
 80137b8:	9907      	ldr	r1, [sp, #28]
 80137ba:	f7fc ffef 	bl	801079c <__aeabi_dsub>
 80137be:	0002      	movs	r2, r0
 80137c0:	000b      	movs	r3, r1
 80137c2:	0006      	movs	r6, r0
 80137c4:	000f      	movs	r7, r1
 80137c6:	9806      	ldr	r0, [sp, #24]
 80137c8:	9907      	ldr	r1, [sp, #28]
 80137ca:	f7fc ffe7 	bl	801079c <__aeabi_dsub>
 80137ce:	9a02      	ldr	r2, [sp, #8]
 80137d0:	9b03      	ldr	r3, [sp, #12]
 80137d2:	f7fc ffe3 	bl	801079c <__aeabi_dsub>
 80137d6:	4a48      	ldr	r2, [pc, #288]	; (80138f8 <__ieee754_rem_pio2+0x3d4>)
 80137d8:	9002      	str	r0, [sp, #8]
 80137da:	9103      	str	r1, [sp, #12]
 80137dc:	9804      	ldr	r0, [sp, #16]
 80137de:	9905      	ldr	r1, [sp, #20]
 80137e0:	4b46      	ldr	r3, [pc, #280]	; (80138fc <__ieee754_rem_pio2+0x3d8>)
 80137e2:	f7fc fd69 	bl	80102b8 <__aeabi_dmul>
 80137e6:	9a02      	ldr	r2, [sp, #8]
 80137e8:	9b03      	ldr	r3, [sp, #12]
 80137ea:	f7fc ffd7 	bl	801079c <__aeabi_dsub>
 80137ee:	0002      	movs	r2, r0
 80137f0:	000b      	movs	r3, r1
 80137f2:	0030      	movs	r0, r6
 80137f4:	0039      	movs	r1, r7
 80137f6:	9202      	str	r2, [sp, #8]
 80137f8:	9303      	str	r3, [sp, #12]
 80137fa:	f7fc ffcf 	bl	801079c <__aeabi_dsub>
 80137fe:	4683      	mov	fp, r0
 8013800:	468a      	mov	sl, r1
 8013802:	465a      	mov	r2, fp
 8013804:	4653      	mov	r3, sl
 8013806:	4641      	mov	r1, r8
 8013808:	0030      	movs	r0, r6
 801380a:	600a      	str	r2, [r1, #0]
 801380c:	604b      	str	r3, [r1, #4]
 801380e:	0039      	movs	r1, r7
 8013810:	f7fc ffc4 	bl	801079c <__aeabi_dsub>
 8013814:	9a02      	ldr	r2, [sp, #8]
 8013816:	9b03      	ldr	r3, [sp, #12]
 8013818:	f7fc ffc0 	bl	801079c <__aeabi_dsub>
 801381c:	4644      	mov	r4, r8
 801381e:	000b      	movs	r3, r1
 8013820:	0002      	movs	r2, r0
 8013822:	60a2      	str	r2, [r4, #8]
 8013824:	60e3      	str	r3, [r4, #12]
 8013826:	464b      	mov	r3, r9
 8013828:	2b00      	cmp	r3, #0
 801382a:	db00      	blt.n	801382e <__ieee754_rem_pio2+0x30a>
 801382c:	e71b      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 801382e:	465b      	mov	r3, fp
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	2380      	movs	r3, #128	; 0x80
 8013834:	061b      	lsls	r3, r3, #24
 8013836:	4453      	add	r3, sl
 8013838:	6063      	str	r3, [r4, #4]
 801383a:	2380      	movs	r3, #128	; 0x80
 801383c:	061b      	lsls	r3, r3, #24
 801383e:	469c      	mov	ip, r3
 8013840:	4461      	add	r1, ip
 8013842:	60a0      	str	r0, [r4, #8]
 8013844:	60e1      	str	r1, [r4, #12]
 8013846:	426d      	negs	r5, r5
 8013848:	e70d      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 801384a:	000b      	movs	r3, r1
 801384c:	0002      	movs	r2, r0
 801384e:	f7fc ffa5 	bl	801079c <__aeabi_dsub>
 8013852:	4643      	mov	r3, r8
 8013854:	2500      	movs	r5, #0
 8013856:	6098      	str	r0, [r3, #8]
 8013858:	60d9      	str	r1, [r3, #12]
 801385a:	6018      	str	r0, [r3, #0]
 801385c:	6059      	str	r1, [r3, #4]
 801385e:	e702      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 8013860:	22d3      	movs	r2, #211	; 0xd3
 8013862:	4b1a      	ldr	r3, [pc, #104]	; (80138cc <__ieee754_rem_pio2+0x3a8>)
 8013864:	0552      	lsls	r2, r2, #21
 8013866:	f7fc ff99 	bl	801079c <__aeabi_dsub>
 801386a:	4a21      	ldr	r2, [pc, #132]	; (80138f0 <__ieee754_rem_pio2+0x3cc>)
 801386c:	4b21      	ldr	r3, [pc, #132]	; (80138f4 <__ieee754_rem_pio2+0x3d0>)
 801386e:	000d      	movs	r5, r1
 8013870:	0004      	movs	r4, r0
 8013872:	f7fc ff93 	bl	801079c <__aeabi_dsub>
 8013876:	0002      	movs	r2, r0
 8013878:	000b      	movs	r3, r1
 801387a:	4641      	mov	r1, r8
 801387c:	0020      	movs	r0, r4
 801387e:	600a      	str	r2, [r1, #0]
 8013880:	604b      	str	r3, [r1, #4]
 8013882:	0029      	movs	r1, r5
 8013884:	f7fc ff8a 	bl	801079c <__aeabi_dsub>
 8013888:	4b1a      	ldr	r3, [pc, #104]	; (80138f4 <__ieee754_rem_pio2+0x3d0>)
 801388a:	4a19      	ldr	r2, [pc, #100]	; (80138f0 <__ieee754_rem_pio2+0x3cc>)
 801388c:	f7fc ff86 	bl	801079c <__aeabi_dsub>
 8013890:	4643      	mov	r3, r8
 8013892:	2501      	movs	r5, #1
 8013894:	6098      	str	r0, [r3, #8]
 8013896:	60d9      	str	r1, [r3, #12]
 8013898:	e6e5      	b.n	8013666 <__ieee754_rem_pio2+0x142>
 801389a:	0002      	movs	r2, r0
 801389c:	000b      	movs	r3, r1
 801389e:	0030      	movs	r0, r6
 80138a0:	0039      	movs	r1, r7
 80138a2:	f7fc ff7b 	bl	801079c <__aeabi_dsub>
 80138a6:	1e6b      	subs	r3, r5, #1
 80138a8:	4a15      	ldr	r2, [pc, #84]	; (8013900 <__ieee754_rem_pio2+0x3dc>)
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	589b      	ldr	r3, [r3, r2]
 80138ae:	4683      	mov	fp, r0
 80138b0:	468a      	mov	sl, r1
 80138b2:	42a3      	cmp	r3, r4
 80138b4:	d1a5      	bne.n	8013802 <__ieee754_rem_pio2+0x2de>
 80138b6:	e730      	b.n	801371a <__ieee754_rem_pio2+0x1f6>
 80138b8:	3fe921fb 	.word	0x3fe921fb
 80138bc:	4002d97b 	.word	0x4002d97b
 80138c0:	54400000 	.word	0x54400000
 80138c4:	3ff921fb 	.word	0x3ff921fb
 80138c8:	1a626331 	.word	0x1a626331
 80138cc:	3dd0b461 	.word	0x3dd0b461
 80138d0:	413921fb 	.word	0x413921fb
 80138d4:	7fefffff 	.word	0x7fefffff
 80138d8:	fffffbea 	.word	0xfffffbea
 80138dc:	41700000 	.word	0x41700000
 80138e0:	0801e4ac 	.word	0x0801e4ac
 80138e4:	6dc9c883 	.word	0x6dc9c883
 80138e8:	3fe45f30 	.word	0x3fe45f30
 80138ec:	3fe00000 	.word	0x3fe00000
 80138f0:	2e037073 	.word	0x2e037073
 80138f4:	3ba3198a 	.word	0x3ba3198a
 80138f8:	252049c1 	.word	0x252049c1
 80138fc:	397b839a 	.word	0x397b839a
 8013900:	0801e42c 	.word	0x0801e42c
 8013904:	22d3      	movs	r2, #211	; 0xd3
 8013906:	4b0c      	ldr	r3, [pc, #48]	; (8013938 <__ieee754_rem_pio2+0x414>)
 8013908:	0552      	lsls	r2, r2, #21
 801390a:	f7fb fdaf 	bl	800f46c <__aeabi_dadd>
 801390e:	4a0b      	ldr	r2, [pc, #44]	; (801393c <__ieee754_rem_pio2+0x418>)
 8013910:	4b0b      	ldr	r3, [pc, #44]	; (8013940 <__ieee754_rem_pio2+0x41c>)
 8013912:	0004      	movs	r4, r0
 8013914:	000d      	movs	r5, r1
 8013916:	f7fb fda9 	bl	800f46c <__aeabi_dadd>
 801391a:	0002      	movs	r2, r0
 801391c:	000b      	movs	r3, r1
 801391e:	4641      	mov	r1, r8
 8013920:	0020      	movs	r0, r4
 8013922:	600a      	str	r2, [r1, #0]
 8013924:	604b      	str	r3, [r1, #4]
 8013926:	0029      	movs	r1, r5
 8013928:	f7fc ff38 	bl	801079c <__aeabi_dsub>
 801392c:	4a03      	ldr	r2, [pc, #12]	; (801393c <__ieee754_rem_pio2+0x418>)
 801392e:	4b04      	ldr	r3, [pc, #16]	; (8013940 <__ieee754_rem_pio2+0x41c>)
 8013930:	e6b9      	b.n	80136a6 <__ieee754_rem_pio2+0x182>
 8013932:	2303      	movs	r3, #3
 8013934:	e673      	b.n	801361e <__ieee754_rem_pio2+0xfa>
 8013936:	46c0      	nop			; (mov r8, r8)
 8013938:	3dd0b461 	.word	0x3dd0b461
 801393c:	2e037073 	.word	0x2e037073
 8013940:	3ba3198a 	.word	0x3ba3198a

08013944 <__ieee754_sqrt>:
 8013944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013946:	4647      	mov	r7, r8
 8013948:	46ce      	mov	lr, r9
 801394a:	4b67      	ldr	r3, [pc, #412]	; (8013ae8 <__ieee754_sqrt+0x1a4>)
 801394c:	b580      	push	{r7, lr}
 801394e:	000a      	movs	r2, r1
 8013950:	000f      	movs	r7, r1
 8013952:	0019      	movs	r1, r3
 8013954:	0005      	movs	r5, r0
 8013956:	4039      	ands	r1, r7
 8013958:	4299      	cmp	r1, r3
 801395a:	d100      	bne.n	801395e <__ieee754_sqrt+0x1a>
 801395c:	e09b      	b.n	8013a96 <__ieee754_sqrt+0x152>
 801395e:	0004      	movs	r4, r0
 8013960:	0001      	movs	r1, r0
 8013962:	2f00      	cmp	r7, #0
 8013964:	dd69      	ble.n	8013a3a <__ieee754_sqrt+0xf6>
 8013966:	153f      	asrs	r7, r7, #20
 8013968:	d100      	bne.n	801396c <__ieee754_sqrt+0x28>
 801396a:	e0b4      	b.n	8013ad6 <__ieee754_sqrt+0x192>
 801396c:	4b5f      	ldr	r3, [pc, #380]	; (8013aec <__ieee754_sqrt+0x1a8>)
 801396e:	0312      	lsls	r2, r2, #12
 8013970:	469c      	mov	ip, r3
 8013972:	2380      	movs	r3, #128	; 0x80
 8013974:	0b12      	lsrs	r2, r2, #12
 8013976:	035b      	lsls	r3, r3, #13
 8013978:	4313      	orrs	r3, r2
 801397a:	005b      	lsls	r3, r3, #1
 801397c:	0fca      	lsrs	r2, r1, #31
 801397e:	4467      	add	r7, ip
 8013980:	189b      	adds	r3, r3, r2
 8013982:	004a      	lsls	r2, r1, #1
 8013984:	07f8      	lsls	r0, r7, #31
 8013986:	d503      	bpl.n	8013990 <__ieee754_sqrt+0x4c>
 8013988:	0fd2      	lsrs	r2, r2, #31
 801398a:	005b      	lsls	r3, r3, #1
 801398c:	189b      	adds	r3, r3, r2
 801398e:	008a      	lsls	r2, r1, #2
 8013990:	1079      	asrs	r1, r7, #1
 8013992:	468c      	mov	ip, r1
 8013994:	2100      	movs	r1, #0
 8013996:	2080      	movs	r0, #128	; 0x80
 8013998:	2416      	movs	r4, #22
 801399a:	4689      	mov	r9, r1
 801399c:	0380      	lsls	r0, r0, #14
 801399e:	180d      	adds	r5, r1, r0
 80139a0:	429d      	cmp	r5, r3
 80139a2:	dc02      	bgt.n	80139aa <__ieee754_sqrt+0x66>
 80139a4:	1829      	adds	r1, r5, r0
 80139a6:	1b5b      	subs	r3, r3, r5
 80139a8:	4481      	add	r9, r0
 80139aa:	0fd5      	lsrs	r5, r2, #31
 80139ac:	005b      	lsls	r3, r3, #1
 80139ae:	3c01      	subs	r4, #1
 80139b0:	195b      	adds	r3, r3, r5
 80139b2:	0052      	lsls	r2, r2, #1
 80139b4:	0840      	lsrs	r0, r0, #1
 80139b6:	2c00      	cmp	r4, #0
 80139b8:	d1f1      	bne.n	801399e <__ieee754_sqrt+0x5a>
 80139ba:	2000      	movs	r0, #0
 80139bc:	4680      	mov	r8, r0
 80139be:	2080      	movs	r0, #128	; 0x80
 80139c0:	2520      	movs	r5, #32
 80139c2:	2700      	movs	r7, #0
 80139c4:	0600      	lsls	r0, r0, #24
 80139c6:	e009      	b.n	80139dc <__ieee754_sqrt+0x98>
 80139c8:	428b      	cmp	r3, r1
 80139ca:	d05c      	beq.n	8013a86 <__ieee754_sqrt+0x142>
 80139cc:	0fd4      	lsrs	r4, r2, #31
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	3d01      	subs	r5, #1
 80139d2:	18e3      	adds	r3, r4, r3
 80139d4:	0052      	lsls	r2, r2, #1
 80139d6:	0840      	lsrs	r0, r0, #1
 80139d8:	2d00      	cmp	r5, #0
 80139da:	d016      	beq.n	8013a0a <__ieee754_sqrt+0xc6>
 80139dc:	19c4      	adds	r4, r0, r7
 80139de:	428b      	cmp	r3, r1
 80139e0:	ddf2      	ble.n	80139c8 <__ieee754_sqrt+0x84>
 80139e2:	1827      	adds	r7, r4, r0
 80139e4:	000e      	movs	r6, r1
 80139e6:	2c00      	cmp	r4, #0
 80139e8:	db49      	blt.n	8013a7e <__ieee754_sqrt+0x13a>
 80139ea:	1a5b      	subs	r3, r3, r1
 80139ec:	42a2      	cmp	r2, r4
 80139ee:	4189      	sbcs	r1, r1
 80139f0:	4249      	negs	r1, r1
 80139f2:	1a5b      	subs	r3, r3, r1
 80139f4:	1b12      	subs	r2, r2, r4
 80139f6:	0fd4      	lsrs	r4, r2, #31
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	3d01      	subs	r5, #1
 80139fc:	4480      	add	r8, r0
 80139fe:	0031      	movs	r1, r6
 8013a00:	18e3      	adds	r3, r4, r3
 8013a02:	0052      	lsls	r2, r2, #1
 8013a04:	0840      	lsrs	r0, r0, #1
 8013a06:	2d00      	cmp	r5, #0
 8013a08:	d1e8      	bne.n	80139dc <__ieee754_sqrt+0x98>
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	d14e      	bne.n	8013aac <__ieee754_sqrt+0x168>
 8013a0e:	4643      	mov	r3, r8
 8013a10:	085b      	lsrs	r3, r3, #1
 8013a12:	4937      	ldr	r1, [pc, #220]	; (8013af0 <__ieee754_sqrt+0x1ac>)
 8013a14:	464a      	mov	r2, r9
 8013a16:	4688      	mov	r8, r1
 8013a18:	4649      	mov	r1, r9
 8013a1a:	1052      	asrs	r2, r2, #1
 8013a1c:	4442      	add	r2, r8
 8013a1e:	07c9      	lsls	r1, r1, #31
 8013a20:	d502      	bpl.n	8013a28 <__ieee754_sqrt+0xe4>
 8013a22:	2180      	movs	r1, #128	; 0x80
 8013a24:	0609      	lsls	r1, r1, #24
 8013a26:	430b      	orrs	r3, r1
 8013a28:	4661      	mov	r1, ip
 8013a2a:	050f      	lsls	r7, r1, #20
 8013a2c:	18bd      	adds	r5, r7, r2
 8013a2e:	0018      	movs	r0, r3
 8013a30:	0029      	movs	r1, r5
 8013a32:	bc0c      	pop	{r2, r3}
 8013a34:	4690      	mov	r8, r2
 8013a36:	4699      	mov	r9, r3
 8013a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a3a:	007b      	lsls	r3, r7, #1
 8013a3c:	085b      	lsrs	r3, r3, #1
 8013a3e:	4303      	orrs	r3, r0
 8013a40:	0039      	movs	r1, r7
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d0f5      	beq.n	8013a32 <__ieee754_sqrt+0xee>
 8013a46:	2f00      	cmp	r7, #0
 8013a48:	d13c      	bne.n	8013ac4 <__ieee754_sqrt+0x180>
 8013a4a:	0ae3      	lsrs	r3, r4, #11
 8013a4c:	3a15      	subs	r2, #21
 8013a4e:	0564      	lsls	r4, r4, #21
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d0fa      	beq.n	8013a4a <__ieee754_sqrt+0x106>
 8013a54:	2080      	movs	r0, #128	; 0x80
 8013a56:	0340      	lsls	r0, r0, #13
 8013a58:	4203      	tst	r3, r0
 8013a5a:	d13f      	bne.n	8013adc <__ieee754_sqrt+0x198>
 8013a5c:	2700      	movs	r7, #0
 8013a5e:	e000      	b.n	8013a62 <__ieee754_sqrt+0x11e>
 8013a60:	000f      	movs	r7, r1
 8013a62:	005b      	lsls	r3, r3, #1
 8013a64:	1c79      	adds	r1, r7, #1
 8013a66:	4203      	tst	r3, r0
 8013a68:	d0fa      	beq.n	8013a60 <__ieee754_sqrt+0x11c>
 8013a6a:	0025      	movs	r5, r4
 8013a6c:	2020      	movs	r0, #32
 8013a6e:	408d      	lsls	r5, r1
 8013a70:	1a40      	subs	r0, r0, r1
 8013a72:	0029      	movs	r1, r5
 8013a74:	1bd7      	subs	r7, r2, r7
 8013a76:	0022      	movs	r2, r4
 8013a78:	40c2      	lsrs	r2, r0
 8013a7a:	431a      	orrs	r2, r3
 8013a7c:	e776      	b.n	801396c <__ieee754_sqrt+0x28>
 8013a7e:	43fe      	mvns	r6, r7
 8013a80:	0ff6      	lsrs	r6, r6, #31
 8013a82:	198e      	adds	r6, r1, r6
 8013a84:	e7b1      	b.n	80139ea <__ieee754_sqrt+0xa6>
 8013a86:	4294      	cmp	r4, r2
 8013a88:	d8a0      	bhi.n	80139cc <__ieee754_sqrt+0x88>
 8013a8a:	1827      	adds	r7, r4, r0
 8013a8c:	2c00      	cmp	r4, #0
 8013a8e:	dbf6      	blt.n	8013a7e <__ieee754_sqrt+0x13a>
 8013a90:	001e      	movs	r6, r3
 8013a92:	2300      	movs	r3, #0
 8013a94:	e7ae      	b.n	80139f4 <__ieee754_sqrt+0xb0>
 8013a96:	0002      	movs	r2, r0
 8013a98:	003b      	movs	r3, r7
 8013a9a:	0028      	movs	r0, r5
 8013a9c:	0039      	movs	r1, r7
 8013a9e:	f7fc fc0b 	bl	80102b8 <__aeabi_dmul>
 8013aa2:	002a      	movs	r2, r5
 8013aa4:	003b      	movs	r3, r7
 8013aa6:	f7fb fce1 	bl	800f46c <__aeabi_dadd>
 8013aaa:	e7c2      	b.n	8013a32 <__ieee754_sqrt+0xee>
 8013aac:	4643      	mov	r3, r8
 8013aae:	3301      	adds	r3, #1
 8013ab0:	d003      	beq.n	8013aba <__ieee754_sqrt+0x176>
 8013ab2:	4643      	mov	r3, r8
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	085b      	lsrs	r3, r3, #1
 8013ab8:	e7ab      	b.n	8013a12 <__ieee754_sqrt+0xce>
 8013aba:	2301      	movs	r3, #1
 8013abc:	4698      	mov	r8, r3
 8013abe:	2300      	movs	r3, #0
 8013ac0:	44c1      	add	r9, r8
 8013ac2:	e7a6      	b.n	8013a12 <__ieee754_sqrt+0xce>
 8013ac4:	003b      	movs	r3, r7
 8013ac6:	0002      	movs	r2, r0
 8013ac8:	f7fc fe68 	bl	801079c <__aeabi_dsub>
 8013acc:	0002      	movs	r2, r0
 8013ace:	000b      	movs	r3, r1
 8013ad0:	f7fb ffe8 	bl	800faa4 <__aeabi_ddiv>
 8013ad4:	e7ad      	b.n	8013a32 <__ieee754_sqrt+0xee>
 8013ad6:	0013      	movs	r3, r2
 8013ad8:	2200      	movs	r2, #0
 8013ada:	e7bb      	b.n	8013a54 <__ieee754_sqrt+0x110>
 8013adc:	2701      	movs	r7, #1
 8013ade:	0021      	movs	r1, r4
 8013ae0:	2020      	movs	r0, #32
 8013ae2:	427f      	negs	r7, r7
 8013ae4:	e7c6      	b.n	8013a74 <__ieee754_sqrt+0x130>
 8013ae6:	46c0      	nop			; (mov r8, r8)
 8013ae8:	7ff00000 	.word	0x7ff00000
 8013aec:	fffffc01 	.word	0xfffffc01
 8013af0:	3fe00000 	.word	0x3fe00000

08013af4 <__ieee754_expf>:
 8013af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013af6:	22ff      	movs	r2, #255	; 0xff
 8013af8:	46d6      	mov	lr, sl
 8013afa:	464f      	mov	r7, r9
 8013afc:	4646      	mov	r6, r8
 8013afe:	0043      	lsls	r3, r0, #1
 8013b00:	b5c0      	push	{r6, r7, lr}
 8013b02:	1c04      	adds	r4, r0, #0
 8013b04:	0001      	movs	r1, r0
 8013b06:	085b      	lsrs	r3, r3, #1
 8013b08:	05d2      	lsls	r2, r2, #23
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d831      	bhi.n	8013b72 <__ieee754_expf+0x7e>
 8013b0e:	0fc5      	lsrs	r5, r0, #31
 8013b10:	4293      	cmp	r3, r2
 8013b12:	d035      	beq.n	8013b80 <__ieee754_expf+0x8c>
 8013b14:	4a63      	ldr	r2, [pc, #396]	; (8013ca4 <__ieee754_expf+0x1b0>)
 8013b16:	4290      	cmp	r0, r2
 8013b18:	dc36      	bgt.n	8013b88 <__ieee754_expf+0x94>
 8013b1a:	2800      	cmp	r0, #0
 8013b1c:	da00      	bge.n	8013b20 <__ieee754_expf+0x2c>
 8013b1e:	e088      	b.n	8013c32 <__ieee754_expf+0x13e>
 8013b20:	4a61      	ldr	r2, [pc, #388]	; (8013ca8 <__ieee754_expf+0x1b4>)
 8013b22:	4293      	cmp	r3, r2
 8013b24:	d935      	bls.n	8013b92 <__ieee754_expf+0x9e>
 8013b26:	4a61      	ldr	r2, [pc, #388]	; (8013cac <__ieee754_expf+0x1b8>)
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d800      	bhi.n	8013b2e <__ieee754_expf+0x3a>
 8013b2c:	e0a9      	b.n	8013c82 <__ieee754_expf+0x18e>
 8013b2e:	4960      	ldr	r1, [pc, #384]	; (8013cb0 <__ieee754_expf+0x1bc>)
 8013b30:	1c20      	adds	r0, r4, #0
 8013b32:	f7fa fcfb 	bl	800e52c <__aeabi_fmul>
 8013b36:	4b5f      	ldr	r3, [pc, #380]	; (8013cb4 <__ieee754_expf+0x1c0>)
 8013b38:	00ad      	lsls	r5, r5, #2
 8013b3a:	58e9      	ldr	r1, [r5, r3]
 8013b3c:	f7fa fa4a 	bl	800dfd4 <__aeabi_fadd>
 8013b40:	f7fb fbea 	bl	800f318 <__aeabi_f2iz>
 8013b44:	0005      	movs	r5, r0
 8013b46:	f7fb fc07 	bl	800f358 <__aeabi_i2f>
 8013b4a:	495b      	ldr	r1, [pc, #364]	; (8013cb8 <__ieee754_expf+0x1c4>)
 8013b4c:	1c07      	adds	r7, r0, #0
 8013b4e:	f7fa fced 	bl	800e52c <__aeabi_fmul>
 8013b52:	1c01      	adds	r1, r0, #0
 8013b54:	1c20      	adds	r0, r4, #0
 8013b56:	f7fa fe1b 	bl	800e790 <__aeabi_fsub>
 8013b5a:	4958      	ldr	r1, [pc, #352]	; (8013cbc <__ieee754_expf+0x1c8>)
 8013b5c:	4682      	mov	sl, r0
 8013b5e:	1c38      	adds	r0, r7, #0
 8013b60:	f7fa fce4 	bl	800e52c <__aeabi_fmul>
 8013b64:	1c07      	adds	r7, r0, #0
 8013b66:	1c39      	adds	r1, r7, #0
 8013b68:	4650      	mov	r0, sl
 8013b6a:	f7fa fe11 	bl	800e790 <__aeabi_fsub>
 8013b6e:	1c04      	adds	r4, r0, #0
 8013b70:	e013      	b.n	8013b9a <__ieee754_expf+0xa6>
 8013b72:	f7fa fa2f 	bl	800dfd4 <__aeabi_fadd>
 8013b76:	bc1c      	pop	{r2, r3, r4}
 8013b78:	4690      	mov	r8, r2
 8013b7a:	4699      	mov	r9, r3
 8013b7c:	46a2      	mov	sl, r4
 8013b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b80:	2d00      	cmp	r5, #0
 8013b82:	d0f8      	beq.n	8013b76 <__ieee754_expf+0x82>
 8013b84:	2000      	movs	r0, #0
 8013b86:	e7f6      	b.n	8013b76 <__ieee754_expf+0x82>
 8013b88:	494d      	ldr	r1, [pc, #308]	; (8013cc0 <__ieee754_expf+0x1cc>)
 8013b8a:	1c08      	adds	r0, r1, #0
 8013b8c:	f7fa fcce 	bl	800e52c <__aeabi_fmul>
 8013b90:	e7f1      	b.n	8013b76 <__ieee754_expf+0x82>
 8013b92:	4a4c      	ldr	r2, [pc, #304]	; (8013cc4 <__ieee754_expf+0x1d0>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d964      	bls.n	8013c62 <__ieee754_expf+0x16e>
 8013b98:	2500      	movs	r5, #0
 8013b9a:	1c21      	adds	r1, r4, #0
 8013b9c:	1c20      	adds	r0, r4, #0
 8013b9e:	f7fa fcc5 	bl	800e52c <__aeabi_fmul>
 8013ba2:	4949      	ldr	r1, [pc, #292]	; (8013cc8 <__ieee754_expf+0x1d4>)
 8013ba4:	1c06      	adds	r6, r0, #0
 8013ba6:	f7fa fcc1 	bl	800e52c <__aeabi_fmul>
 8013baa:	4948      	ldr	r1, [pc, #288]	; (8013ccc <__ieee754_expf+0x1d8>)
 8013bac:	f7fa fdf0 	bl	800e790 <__aeabi_fsub>
 8013bb0:	1c31      	adds	r1, r6, #0
 8013bb2:	f7fa fcbb 	bl	800e52c <__aeabi_fmul>
 8013bb6:	4946      	ldr	r1, [pc, #280]	; (8013cd0 <__ieee754_expf+0x1dc>)
 8013bb8:	f7fa fa0c 	bl	800dfd4 <__aeabi_fadd>
 8013bbc:	1c31      	adds	r1, r6, #0
 8013bbe:	f7fa fcb5 	bl	800e52c <__aeabi_fmul>
 8013bc2:	4944      	ldr	r1, [pc, #272]	; (8013cd4 <__ieee754_expf+0x1e0>)
 8013bc4:	f7fa fde4 	bl	800e790 <__aeabi_fsub>
 8013bc8:	1c31      	adds	r1, r6, #0
 8013bca:	f7fa fcaf 	bl	800e52c <__aeabi_fmul>
 8013bce:	4942      	ldr	r1, [pc, #264]	; (8013cd8 <__ieee754_expf+0x1e4>)
 8013bd0:	f7fa fa00 	bl	800dfd4 <__aeabi_fadd>
 8013bd4:	1c31      	adds	r1, r6, #0
 8013bd6:	f7fa fca9 	bl	800e52c <__aeabi_fmul>
 8013bda:	1c01      	adds	r1, r0, #0
 8013bdc:	1c20      	adds	r0, r4, #0
 8013bde:	f7fa fdd7 	bl	800e790 <__aeabi_fsub>
 8013be2:	1c01      	adds	r1, r0, #0
 8013be4:	4680      	mov	r8, r0
 8013be6:	1c20      	adds	r0, r4, #0
 8013be8:	f7fa fca0 	bl	800e52c <__aeabi_fmul>
 8013bec:	4681      	mov	r9, r0
 8013bee:	2d00      	cmp	r5, #0
 8013bf0:	d025      	beq.n	8013c3e <__ieee754_expf+0x14a>
 8013bf2:	2080      	movs	r0, #128	; 0x80
 8013bf4:	4641      	mov	r1, r8
 8013bf6:	05c0      	lsls	r0, r0, #23
 8013bf8:	f7fa fdca 	bl	800e790 <__aeabi_fsub>
 8013bfc:	1c01      	adds	r1, r0, #0
 8013bfe:	4648      	mov	r0, r9
 8013c00:	f7fa fb82 	bl	800e308 <__aeabi_fdiv>
 8013c04:	1c01      	adds	r1, r0, #0
 8013c06:	1c38      	adds	r0, r7, #0
 8013c08:	f7fa fdc2 	bl	800e790 <__aeabi_fsub>
 8013c0c:	4651      	mov	r1, sl
 8013c0e:	f7fa fdbf 	bl	800e790 <__aeabi_fsub>
 8013c12:	1c01      	adds	r1, r0, #0
 8013c14:	20fe      	movs	r0, #254	; 0xfe
 8013c16:	0580      	lsls	r0, r0, #22
 8013c18:	f7fa fdba 	bl	800e790 <__aeabi_fsub>
 8013c1c:	002b      	movs	r3, r5
 8013c1e:	337d      	adds	r3, #125	; 0x7d
 8013c20:	da3c      	bge.n	8013c9c <__ieee754_expf+0x1a8>
 8013c22:	21d8      	movs	r1, #216	; 0xd8
 8013c24:	3564      	adds	r5, #100	; 0x64
 8013c26:	05ed      	lsls	r5, r5, #23
 8013c28:	1828      	adds	r0, r5, r0
 8013c2a:	0509      	lsls	r1, r1, #20
 8013c2c:	f7fa fc7e 	bl	800e52c <__aeabi_fmul>
 8013c30:	e7a1      	b.n	8013b76 <__ieee754_expf+0x82>
 8013c32:	4a2a      	ldr	r2, [pc, #168]	; (8013cdc <__ieee754_expf+0x1e8>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d800      	bhi.n	8013c3a <__ieee754_expf+0x146>
 8013c38:	e772      	b.n	8013b20 <__ieee754_expf+0x2c>
 8013c3a:	2000      	movs	r0, #0
 8013c3c:	e79b      	b.n	8013b76 <__ieee754_expf+0x82>
 8013c3e:	2180      	movs	r1, #128	; 0x80
 8013c40:	4640      	mov	r0, r8
 8013c42:	05c9      	lsls	r1, r1, #23
 8013c44:	f7fa fda4 	bl	800e790 <__aeabi_fsub>
 8013c48:	1c01      	adds	r1, r0, #0
 8013c4a:	4648      	mov	r0, r9
 8013c4c:	f7fa fb5c 	bl	800e308 <__aeabi_fdiv>
 8013c50:	1c21      	adds	r1, r4, #0
 8013c52:	f7fa fd9d 	bl	800e790 <__aeabi_fsub>
 8013c56:	1c01      	adds	r1, r0, #0
 8013c58:	20fe      	movs	r0, #254	; 0xfe
 8013c5a:	0580      	lsls	r0, r0, #22
 8013c5c:	f7fa fd98 	bl	800e790 <__aeabi_fsub>
 8013c60:	e789      	b.n	8013b76 <__ieee754_expf+0x82>
 8013c62:	4917      	ldr	r1, [pc, #92]	; (8013cc0 <__ieee754_expf+0x1cc>)
 8013c64:	1c20      	adds	r0, r4, #0
 8013c66:	f7fa f9b5 	bl	800dfd4 <__aeabi_fadd>
 8013c6a:	21fe      	movs	r1, #254	; 0xfe
 8013c6c:	0589      	lsls	r1, r1, #22
 8013c6e:	f7fb f969 	bl	800ef44 <__aeabi_fcmpgt>
 8013c72:	2800      	cmp	r0, #0
 8013c74:	d090      	beq.n	8013b98 <__ieee754_expf+0xa4>
 8013c76:	21fe      	movs	r1, #254	; 0xfe
 8013c78:	1c20      	adds	r0, r4, #0
 8013c7a:	0589      	lsls	r1, r1, #22
 8013c7c:	f7fa f9aa 	bl	800dfd4 <__aeabi_fadd>
 8013c80:	e779      	b.n	8013b76 <__ieee754_expf+0x82>
 8013c82:	4b17      	ldr	r3, [pc, #92]	; (8013ce0 <__ieee754_expf+0x1ec>)
 8013c84:	00af      	lsls	r7, r5, #2
 8013c86:	58f9      	ldr	r1, [r7, r3]
 8013c88:	1c20      	adds	r0, r4, #0
 8013c8a:	2401      	movs	r4, #1
 8013c8c:	f7fa fd80 	bl	800e790 <__aeabi_fsub>
 8013c90:	4b14      	ldr	r3, [pc, #80]	; (8013ce4 <__ieee754_expf+0x1f0>)
 8013c92:	1b64      	subs	r4, r4, r5
 8013c94:	4682      	mov	sl, r0
 8013c96:	58ff      	ldr	r7, [r7, r3]
 8013c98:	1b65      	subs	r5, r4, r5
 8013c9a:	e764      	b.n	8013b66 <__ieee754_expf+0x72>
 8013c9c:	05ed      	lsls	r5, r5, #23
 8013c9e:	1828      	adds	r0, r5, r0
 8013ca0:	e769      	b.n	8013b76 <__ieee754_expf+0x82>
 8013ca2:	46c0      	nop			; (mov r8, r8)
 8013ca4:	42b17217 	.word	0x42b17217
 8013ca8:	3eb17218 	.word	0x3eb17218
 8013cac:	3f851591 	.word	0x3f851591
 8013cb0:	3fb8aa3b 	.word	0x3fb8aa3b
 8013cb4:	0801e5b4 	.word	0x0801e5b4
 8013cb8:	3f317180 	.word	0x3f317180
 8013cbc:	3717f7d1 	.word	0x3717f7d1
 8013cc0:	7149f2ca 	.word	0x7149f2ca
 8013cc4:	317fffff 	.word	0x317fffff
 8013cc8:	3331bb4c 	.word	0x3331bb4c
 8013ccc:	35ddea0e 	.word	0x35ddea0e
 8013cd0:	388ab355 	.word	0x388ab355
 8013cd4:	3b360b61 	.word	0x3b360b61
 8013cd8:	3e2aaaab 	.word	0x3e2aaaab
 8013cdc:	42cff1b5 	.word	0x42cff1b5
 8013ce0:	0801e5bc 	.word	0x0801e5bc
 8013ce4:	0801e5c4 	.word	0x0801e5c4

08013ce8 <__ieee754_log10f>:
 8013ce8:	b570      	push	{r4, r5, r6, lr}
 8013cea:	0003      	movs	r3, r0
 8013cec:	0042      	lsls	r2, r0, #1
 8013cee:	d037      	beq.n	8013d60 <__ieee754_log10f+0x78>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	db3b      	blt.n	8013d6c <__ieee754_log10f+0x84>
 8013cf4:	4a23      	ldr	r2, [pc, #140]	; (8013d84 <__ieee754_log10f+0x9c>)
 8013cf6:	4290      	cmp	r0, r2
 8013cf8:	dc3f      	bgt.n	8013d7a <__ieee754_log10f+0x92>
 8013cfa:	4923      	ldr	r1, [pc, #140]	; (8013d88 <__ieee754_log10f+0xa0>)
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	4288      	cmp	r0, r1
 8013d00:	dc06      	bgt.n	8013d10 <__ieee754_log10f+0x28>
 8013d02:	2198      	movs	r1, #152	; 0x98
 8013d04:	05c9      	lsls	r1, r1, #23
 8013d06:	f7fa fc11 	bl	800e52c <__aeabi_fmul>
 8013d0a:	2219      	movs	r2, #25
 8013d0c:	0003      	movs	r3, r0
 8013d0e:	4252      	negs	r2, r2
 8013d10:	15d8      	asrs	r0, r3, #23
 8013d12:	387f      	subs	r0, #127	; 0x7f
 8013d14:	1880      	adds	r0, r0, r2
 8013d16:	0fc6      	lsrs	r6, r0, #31
 8013d18:	025b      	lsls	r3, r3, #9
 8013d1a:	1980      	adds	r0, r0, r6
 8013d1c:	0a5c      	lsrs	r4, r3, #9
 8013d1e:	f7fb fb1b 	bl	800f358 <__aeabi_i2f>
 8013d22:	1c05      	adds	r5, r0, #0
 8013d24:	207f      	movs	r0, #127	; 0x7f
 8013d26:	1b80      	subs	r0, r0, r6
 8013d28:	05c0      	lsls	r0, r0, #23
 8013d2a:	4320      	orrs	r0, r4
 8013d2c:	f000 ff7a 	bl	8014c24 <__ieee754_logf>
 8013d30:	4916      	ldr	r1, [pc, #88]	; (8013d8c <__ieee754_log10f+0xa4>)
 8013d32:	1c06      	adds	r6, r0, #0
 8013d34:	1c28      	adds	r0, r5, #0
 8013d36:	f7fa fbf9 	bl	800e52c <__aeabi_fmul>
 8013d3a:	4915      	ldr	r1, [pc, #84]	; (8013d90 <__ieee754_log10f+0xa8>)
 8013d3c:	1c04      	adds	r4, r0, #0
 8013d3e:	1c30      	adds	r0, r6, #0
 8013d40:	f7fa fbf4 	bl	800e52c <__aeabi_fmul>
 8013d44:	1c01      	adds	r1, r0, #0
 8013d46:	1c20      	adds	r0, r4, #0
 8013d48:	f7fa f944 	bl	800dfd4 <__aeabi_fadd>
 8013d4c:	4911      	ldr	r1, [pc, #68]	; (8013d94 <__ieee754_log10f+0xac>)
 8013d4e:	1c04      	adds	r4, r0, #0
 8013d50:	1c28      	adds	r0, r5, #0
 8013d52:	f7fa fbeb 	bl	800e52c <__aeabi_fmul>
 8013d56:	1c01      	adds	r1, r0, #0
 8013d58:	1c20      	adds	r0, r4, #0
 8013d5a:	f7fa f93b 	bl	800dfd4 <__aeabi_fadd>
 8013d5e:	e004      	b.n	8013d6a <__ieee754_log10f+0x82>
 8013d60:	20cc      	movs	r0, #204	; 0xcc
 8013d62:	2100      	movs	r1, #0
 8013d64:	0600      	lsls	r0, r0, #24
 8013d66:	f7fa facf 	bl	800e308 <__aeabi_fdiv>
 8013d6a:	bd70      	pop	{r4, r5, r6, pc}
 8013d6c:	1c01      	adds	r1, r0, #0
 8013d6e:	f7fa fd0f 	bl	800e790 <__aeabi_fsub>
 8013d72:	2100      	movs	r1, #0
 8013d74:	f7fa fac8 	bl	800e308 <__aeabi_fdiv>
 8013d78:	e7f7      	b.n	8013d6a <__ieee754_log10f+0x82>
 8013d7a:	1c01      	adds	r1, r0, #0
 8013d7c:	f7fa f92a 	bl	800dfd4 <__aeabi_fadd>
 8013d80:	e7f3      	b.n	8013d6a <__ieee754_log10f+0x82>
 8013d82:	46c0      	nop			; (mov r8, r8)
 8013d84:	7f7fffff 	.word	0x7f7fffff
 8013d88:	007fffff 	.word	0x007fffff
 8013d8c:	355427db 	.word	0x355427db
 8013d90:	3ede5bd9 	.word	0x3ede5bd9
 8013d94:	3e9a2080 	.word	0x3e9a2080

08013d98 <__kernel_cos>:
 8013d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d9a:	4647      	mov	r7, r8
 8013d9c:	46ce      	mov	lr, r9
 8013d9e:	b580      	push	{r7, lr}
 8013da0:	b087      	sub	sp, #28
 8013da2:	9200      	str	r2, [sp, #0]
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	4b75      	ldr	r3, [pc, #468]	; (8013f7c <__kernel_cos+0x1e4>)
 8013da8:	004f      	lsls	r7, r1, #1
 8013daa:	4681      	mov	r9, r0
 8013dac:	4688      	mov	r8, r1
 8013dae:	087f      	lsrs	r7, r7, #1
 8013db0:	429f      	cmp	r7, r3
 8013db2:	dc63      	bgt.n	8013e7c <__kernel_cos+0xe4>
 8013db4:	f7fd f856 	bl	8010e64 <__aeabi_d2iz>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	d100      	bne.n	8013dbe <__kernel_cos+0x26>
 8013dbc:	e0d4      	b.n	8013f68 <__kernel_cos+0x1d0>
 8013dbe:	464a      	mov	r2, r9
 8013dc0:	4643      	mov	r3, r8
 8013dc2:	4648      	mov	r0, r9
 8013dc4:	4641      	mov	r1, r8
 8013dc6:	f7fc fa77 	bl	80102b8 <__aeabi_dmul>
 8013dca:	0004      	movs	r4, r0
 8013dcc:	000d      	movs	r5, r1
 8013dce:	4a6c      	ldr	r2, [pc, #432]	; (8013f80 <__kernel_cos+0x1e8>)
 8013dd0:	4b6c      	ldr	r3, [pc, #432]	; (8013f84 <__kernel_cos+0x1ec>)
 8013dd2:	f7fc fa71 	bl	80102b8 <__aeabi_dmul>
 8013dd6:	4a6c      	ldr	r2, [pc, #432]	; (8013f88 <__kernel_cos+0x1f0>)
 8013dd8:	4b6c      	ldr	r3, [pc, #432]	; (8013f8c <__kernel_cos+0x1f4>)
 8013dda:	f7fb fb47 	bl	800f46c <__aeabi_dadd>
 8013dde:	0022      	movs	r2, r4
 8013de0:	002b      	movs	r3, r5
 8013de2:	f7fc fa69 	bl	80102b8 <__aeabi_dmul>
 8013de6:	4a6a      	ldr	r2, [pc, #424]	; (8013f90 <__kernel_cos+0x1f8>)
 8013de8:	4b6a      	ldr	r3, [pc, #424]	; (8013f94 <__kernel_cos+0x1fc>)
 8013dea:	f7fc fcd7 	bl	801079c <__aeabi_dsub>
 8013dee:	0022      	movs	r2, r4
 8013df0:	002b      	movs	r3, r5
 8013df2:	f7fc fa61 	bl	80102b8 <__aeabi_dmul>
 8013df6:	4a68      	ldr	r2, [pc, #416]	; (8013f98 <__kernel_cos+0x200>)
 8013df8:	4b68      	ldr	r3, [pc, #416]	; (8013f9c <__kernel_cos+0x204>)
 8013dfa:	f7fb fb37 	bl	800f46c <__aeabi_dadd>
 8013dfe:	0022      	movs	r2, r4
 8013e00:	002b      	movs	r3, r5
 8013e02:	f7fc fa59 	bl	80102b8 <__aeabi_dmul>
 8013e06:	4a66      	ldr	r2, [pc, #408]	; (8013fa0 <__kernel_cos+0x208>)
 8013e08:	4b66      	ldr	r3, [pc, #408]	; (8013fa4 <__kernel_cos+0x20c>)
 8013e0a:	f7fc fcc7 	bl	801079c <__aeabi_dsub>
 8013e0e:	0022      	movs	r2, r4
 8013e10:	002b      	movs	r3, r5
 8013e12:	f7fc fa51 	bl	80102b8 <__aeabi_dmul>
 8013e16:	4a64      	ldr	r2, [pc, #400]	; (8013fa8 <__kernel_cos+0x210>)
 8013e18:	4b64      	ldr	r3, [pc, #400]	; (8013fac <__kernel_cos+0x214>)
 8013e1a:	f7fb fb27 	bl	800f46c <__aeabi_dadd>
 8013e1e:	0022      	movs	r2, r4
 8013e20:	002b      	movs	r3, r5
 8013e22:	f7fc fa49 	bl	80102b8 <__aeabi_dmul>
 8013e26:	9002      	str	r0, [sp, #8]
 8013e28:	9103      	str	r1, [sp, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	4b60      	ldr	r3, [pc, #384]	; (8013fb0 <__kernel_cos+0x218>)
 8013e2e:	0020      	movs	r0, r4
 8013e30:	0029      	movs	r1, r5
 8013e32:	f7fc fa41 	bl	80102b8 <__aeabi_dmul>
 8013e36:	9a02      	ldr	r2, [sp, #8]
 8013e38:	9b03      	ldr	r3, [sp, #12]
 8013e3a:	0006      	movs	r6, r0
 8013e3c:	000f      	movs	r7, r1
 8013e3e:	0020      	movs	r0, r4
 8013e40:	0029      	movs	r1, r5
 8013e42:	f7fc fa39 	bl	80102b8 <__aeabi_dmul>
 8013e46:	9a00      	ldr	r2, [sp, #0]
 8013e48:	9b01      	ldr	r3, [sp, #4]
 8013e4a:	0004      	movs	r4, r0
 8013e4c:	000d      	movs	r5, r1
 8013e4e:	4648      	mov	r0, r9
 8013e50:	4641      	mov	r1, r8
 8013e52:	f7fc fa31 	bl	80102b8 <__aeabi_dmul>
 8013e56:	0002      	movs	r2, r0
 8013e58:	000b      	movs	r3, r1
 8013e5a:	0020      	movs	r0, r4
 8013e5c:	0029      	movs	r1, r5
 8013e5e:	f7fc fc9d 	bl	801079c <__aeabi_dsub>
 8013e62:	0002      	movs	r2, r0
 8013e64:	000b      	movs	r3, r1
 8013e66:	0030      	movs	r0, r6
 8013e68:	0039      	movs	r1, r7
 8013e6a:	f7fc fc97 	bl	801079c <__aeabi_dsub>
 8013e6e:	0002      	movs	r2, r0
 8013e70:	000b      	movs	r3, r1
 8013e72:	2000      	movs	r0, #0
 8013e74:	494f      	ldr	r1, [pc, #316]	; (8013fb4 <__kernel_cos+0x21c>)
 8013e76:	f7fc fc91 	bl	801079c <__aeabi_dsub>
 8013e7a:	e070      	b.n	8013f5e <__kernel_cos+0x1c6>
 8013e7c:	0002      	movs	r2, r0
 8013e7e:	000b      	movs	r3, r1
 8013e80:	f7fc fa1a 	bl	80102b8 <__aeabi_dmul>
 8013e84:	0004      	movs	r4, r0
 8013e86:	000d      	movs	r5, r1
 8013e88:	4a3d      	ldr	r2, [pc, #244]	; (8013f80 <__kernel_cos+0x1e8>)
 8013e8a:	4b3e      	ldr	r3, [pc, #248]	; (8013f84 <__kernel_cos+0x1ec>)
 8013e8c:	f7fc fa14 	bl	80102b8 <__aeabi_dmul>
 8013e90:	4a3d      	ldr	r2, [pc, #244]	; (8013f88 <__kernel_cos+0x1f0>)
 8013e92:	4b3e      	ldr	r3, [pc, #248]	; (8013f8c <__kernel_cos+0x1f4>)
 8013e94:	f7fb faea 	bl	800f46c <__aeabi_dadd>
 8013e98:	0022      	movs	r2, r4
 8013e9a:	002b      	movs	r3, r5
 8013e9c:	f7fc fa0c 	bl	80102b8 <__aeabi_dmul>
 8013ea0:	4a3b      	ldr	r2, [pc, #236]	; (8013f90 <__kernel_cos+0x1f8>)
 8013ea2:	4b3c      	ldr	r3, [pc, #240]	; (8013f94 <__kernel_cos+0x1fc>)
 8013ea4:	f7fc fc7a 	bl	801079c <__aeabi_dsub>
 8013ea8:	0022      	movs	r2, r4
 8013eaa:	002b      	movs	r3, r5
 8013eac:	f7fc fa04 	bl	80102b8 <__aeabi_dmul>
 8013eb0:	4a39      	ldr	r2, [pc, #228]	; (8013f98 <__kernel_cos+0x200>)
 8013eb2:	4b3a      	ldr	r3, [pc, #232]	; (8013f9c <__kernel_cos+0x204>)
 8013eb4:	f7fb fada 	bl	800f46c <__aeabi_dadd>
 8013eb8:	0022      	movs	r2, r4
 8013eba:	002b      	movs	r3, r5
 8013ebc:	f7fc f9fc 	bl	80102b8 <__aeabi_dmul>
 8013ec0:	4a37      	ldr	r2, [pc, #220]	; (8013fa0 <__kernel_cos+0x208>)
 8013ec2:	4b38      	ldr	r3, [pc, #224]	; (8013fa4 <__kernel_cos+0x20c>)
 8013ec4:	f7fc fc6a 	bl	801079c <__aeabi_dsub>
 8013ec8:	0022      	movs	r2, r4
 8013eca:	002b      	movs	r3, r5
 8013ecc:	f7fc f9f4 	bl	80102b8 <__aeabi_dmul>
 8013ed0:	4a35      	ldr	r2, [pc, #212]	; (8013fa8 <__kernel_cos+0x210>)
 8013ed2:	4b36      	ldr	r3, [pc, #216]	; (8013fac <__kernel_cos+0x214>)
 8013ed4:	f7fb faca 	bl	800f46c <__aeabi_dadd>
 8013ed8:	002b      	movs	r3, r5
 8013eda:	0022      	movs	r2, r4
 8013edc:	f7fc f9ec 	bl	80102b8 <__aeabi_dmul>
 8013ee0:	4b35      	ldr	r3, [pc, #212]	; (8013fb8 <__kernel_cos+0x220>)
 8013ee2:	9002      	str	r0, [sp, #8]
 8013ee4:	9103      	str	r1, [sp, #12]
 8013ee6:	429f      	cmp	r7, r3
 8013ee8:	dd9f      	ble.n	8013e2a <__kernel_cos+0x92>
 8013eea:	4b34      	ldr	r3, [pc, #208]	; (8013fbc <__kernel_cos+0x224>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	429f      	cmp	r7, r3
 8013ef0:	dc3d      	bgt.n	8013f6e <__kernel_cos+0x1d6>
 8013ef2:	4933      	ldr	r1, [pc, #204]	; (8013fc0 <__kernel_cos+0x228>)
 8013ef4:	2000      	movs	r0, #0
 8013ef6:	187b      	adds	r3, r7, r1
 8013ef8:	492e      	ldr	r1, [pc, #184]	; (8013fb4 <__kernel_cos+0x21c>)
 8013efa:	0016      	movs	r6, r2
 8013efc:	001f      	movs	r7, r3
 8013efe:	f7fc fc4d 	bl	801079c <__aeabi_dsub>
 8013f02:	9004      	str	r0, [sp, #16]
 8013f04:	9105      	str	r1, [sp, #20]
 8013f06:	2200      	movs	r2, #0
 8013f08:	4b29      	ldr	r3, [pc, #164]	; (8013fb0 <__kernel_cos+0x218>)
 8013f0a:	0020      	movs	r0, r4
 8013f0c:	0029      	movs	r1, r5
 8013f0e:	f7fc f9d3 	bl	80102b8 <__aeabi_dmul>
 8013f12:	0032      	movs	r2, r6
 8013f14:	003b      	movs	r3, r7
 8013f16:	f7fc fc41 	bl	801079c <__aeabi_dsub>
 8013f1a:	9a02      	ldr	r2, [sp, #8]
 8013f1c:	9b03      	ldr	r3, [sp, #12]
 8013f1e:	0006      	movs	r6, r0
 8013f20:	000f      	movs	r7, r1
 8013f22:	0020      	movs	r0, r4
 8013f24:	0029      	movs	r1, r5
 8013f26:	f7fc f9c7 	bl	80102b8 <__aeabi_dmul>
 8013f2a:	9a00      	ldr	r2, [sp, #0]
 8013f2c:	9b01      	ldr	r3, [sp, #4]
 8013f2e:	0004      	movs	r4, r0
 8013f30:	000d      	movs	r5, r1
 8013f32:	4648      	mov	r0, r9
 8013f34:	4641      	mov	r1, r8
 8013f36:	f7fc f9bf 	bl	80102b8 <__aeabi_dmul>
 8013f3a:	0002      	movs	r2, r0
 8013f3c:	000b      	movs	r3, r1
 8013f3e:	0020      	movs	r0, r4
 8013f40:	0029      	movs	r1, r5
 8013f42:	f7fc fc2b 	bl	801079c <__aeabi_dsub>
 8013f46:	0002      	movs	r2, r0
 8013f48:	000b      	movs	r3, r1
 8013f4a:	0030      	movs	r0, r6
 8013f4c:	0039      	movs	r1, r7
 8013f4e:	f7fc fc25 	bl	801079c <__aeabi_dsub>
 8013f52:	0002      	movs	r2, r0
 8013f54:	000b      	movs	r3, r1
 8013f56:	9804      	ldr	r0, [sp, #16]
 8013f58:	9905      	ldr	r1, [sp, #20]
 8013f5a:	f7fc fc1f 	bl	801079c <__aeabi_dsub>
 8013f5e:	b007      	add	sp, #28
 8013f60:	bc0c      	pop	{r2, r3}
 8013f62:	4690      	mov	r8, r2
 8013f64:	4699      	mov	r9, r3
 8013f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f68:	2000      	movs	r0, #0
 8013f6a:	4912      	ldr	r1, [pc, #72]	; (8013fb4 <__kernel_cos+0x21c>)
 8013f6c:	e7f7      	b.n	8013f5e <__kernel_cos+0x1c6>
 8013f6e:	4b15      	ldr	r3, [pc, #84]	; (8013fc4 <__kernel_cos+0x22c>)
 8013f70:	2600      	movs	r6, #0
 8013f72:	9204      	str	r2, [sp, #16]
 8013f74:	9305      	str	r3, [sp, #20]
 8013f76:	4f14      	ldr	r7, [pc, #80]	; (8013fc8 <__kernel_cos+0x230>)
 8013f78:	e7c5      	b.n	8013f06 <__kernel_cos+0x16e>
 8013f7a:	46c0      	nop			; (mov r8, r8)
 8013f7c:	3e3fffff 	.word	0x3e3fffff
 8013f80:	be8838d4 	.word	0xbe8838d4
 8013f84:	bda8fae9 	.word	0xbda8fae9
 8013f88:	bdb4b1c4 	.word	0xbdb4b1c4
 8013f8c:	3e21ee9e 	.word	0x3e21ee9e
 8013f90:	809c52ad 	.word	0x809c52ad
 8013f94:	3e927e4f 	.word	0x3e927e4f
 8013f98:	19cb1590 	.word	0x19cb1590
 8013f9c:	3efa01a0 	.word	0x3efa01a0
 8013fa0:	16c15177 	.word	0x16c15177
 8013fa4:	3f56c16c 	.word	0x3f56c16c
 8013fa8:	5555554c 	.word	0x5555554c
 8013fac:	3fa55555 	.word	0x3fa55555
 8013fb0:	3fe00000 	.word	0x3fe00000
 8013fb4:	3ff00000 	.word	0x3ff00000
 8013fb8:	3fd33332 	.word	0x3fd33332
 8013fbc:	3fe90000 	.word	0x3fe90000
 8013fc0:	ffe00000 	.word	0xffe00000
 8013fc4:	3fe70000 	.word	0x3fe70000
 8013fc8:	3fd20000 	.word	0x3fd20000

08013fcc <__kernel_rem_pio2>:
 8013fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fce:	46de      	mov	lr, fp
 8013fd0:	464e      	mov	r6, r9
 8013fd2:	4645      	mov	r5, r8
 8013fd4:	4657      	mov	r7, sl
 8013fd6:	b5e0      	push	{r5, r6, r7, lr}
 8013fd8:	4cdc      	ldr	r4, [pc, #880]	; (801434c <__kernel_rem_pio2+0x380>)
 8013fda:	44a5      	add	sp, r4
 8013fdc:	910d      	str	r1, [sp, #52]	; 0x34
 8013fde:	0014      	movs	r4, r2
 8013fe0:	0019      	movs	r1, r3
 8013fe2:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 8013fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8013fe6:	4bda      	ldr	r3, [pc, #872]	; (8014350 <__kernel_rem_pio2+0x384>)
 8013fe8:	0092      	lsls	r2, r2, #2
 8013fea:	58d6      	ldr	r6, [r2, r3]
 8013fec:	1e4d      	subs	r5, r1, #1
 8013fee:	9003      	str	r0, [sp, #12]
 8013ff0:	2118      	movs	r1, #24
 8013ff2:	1ee0      	subs	r0, r4, #3
 8013ff4:	9606      	str	r6, [sp, #24]
 8013ff6:	9502      	str	r5, [sp, #8]
 8013ff8:	f7fa fe54 	bl	800eca4 <__divsi3>
 8013ffc:	43c3      	mvns	r3, r0
 8013ffe:	0001      	movs	r1, r0
 8014000:	17db      	asrs	r3, r3, #31
 8014002:	4019      	ands	r1, r3
 8014004:	1c4b      	adds	r3, r1, #1
 8014006:	009a      	lsls	r2, r3, #2
 8014008:	1a9b      	subs	r3, r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	191b      	adds	r3, r3, r4
 801400e:	910b      	str	r1, [sp, #44]	; 0x2c
 8014010:	9305      	str	r3, [sp, #20]
 8014012:	1b4c      	subs	r4, r1, r5
 8014014:	1977      	adds	r7, r6, r5
 8014016:	d418      	bmi.n	801404a <__kernel_rem_pio2+0x7e>
 8014018:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801401a:	00a5      	lsls	r5, r4, #2
 801401c:	469c      	mov	ip, r3
 801401e:	193f      	adds	r7, r7, r4
 8014020:	ae22      	add	r6, sp, #136	; 0x88
 8014022:	4465      	add	r5, ip
 8014024:	3701      	adds	r7, #1
 8014026:	e007      	b.n	8014038 <__kernel_rem_pio2+0x6c>
 8014028:	6828      	ldr	r0, [r5, #0]
 801402a:	f7fc ff51 	bl	8010ed0 <__aeabi_i2d>
 801402e:	3401      	adds	r4, #1
 8014030:	c603      	stmia	r6!, {r0, r1}
 8014032:	3504      	adds	r5, #4
 8014034:	42bc      	cmp	r4, r7
 8014036:	d008      	beq.n	801404a <__kernel_rem_pio2+0x7e>
 8014038:	2c00      	cmp	r4, #0
 801403a:	daf5      	bge.n	8014028 <__kernel_rem_pio2+0x5c>
 801403c:	2000      	movs	r0, #0
 801403e:	2100      	movs	r1, #0
 8014040:	3401      	adds	r4, #1
 8014042:	c603      	stmia	r6!, {r0, r1}
 8014044:	3504      	adds	r5, #4
 8014046:	42bc      	cmp	r4, r7
 8014048:	d1f6      	bne.n	8014038 <__kernel_rem_pio2+0x6c>
 801404a:	9b06      	ldr	r3, [sp, #24]
 801404c:	2b00      	cmp	r3, #0
 801404e:	da01      	bge.n	8014054 <__kernel_rem_pio2+0x88>
 8014050:	f000 fbfd 	bl	801484e <__kernel_rem_pio2+0x882>
 8014054:	9b06      	ldr	r3, [sp, #24]
 8014056:	9903      	ldr	r1, [sp, #12]
 8014058:	3301      	adds	r3, #1
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	469a      	mov	sl, r3
 801405e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014060:	00da      	lsls	r2, r3, #3
 8014062:	4694      	mov	ip, r2
 8014064:	9200      	str	r2, [sp, #0]
 8014066:	2200      	movs	r2, #0
 8014068:	4691      	mov	r9, r2
 801406a:	aa72      	add	r2, sp, #456	; 0x1c8
 801406c:	9204      	str	r2, [sp, #16]
 801406e:	4ab9      	ldr	r2, [pc, #740]	; (8014354 <__kernel_rem_pio2+0x388>)
 8014070:	4461      	add	r1, ip
 8014072:	4693      	mov	fp, r2
 8014074:	4688      	mov	r8, r1
 8014076:	ab9a      	add	r3, sp, #616	; 0x268
 8014078:	4463      	add	r3, ip
 801407a:	449b      	add	fp, r3
 801407c:	9b02      	ldr	r3, [sp, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	da00      	bge.n	8014084 <__kernel_rem_pio2+0xb8>
 8014082:	e1bc      	b.n	80143fe <__kernel_rem_pio2+0x432>
 8014084:	465d      	mov	r5, fp
 8014086:	2600      	movs	r6, #0
 8014088:	2700      	movs	r7, #0
 801408a:	9c03      	ldr	r4, [sp, #12]
 801408c:	444d      	add	r5, r9
 801408e:	682a      	ldr	r2, [r5, #0]
 8014090:	686b      	ldr	r3, [r5, #4]
 8014092:	cc03      	ldmia	r4!, {r0, r1}
 8014094:	f7fc f910 	bl	80102b8 <__aeabi_dmul>
 8014098:	0002      	movs	r2, r0
 801409a:	000b      	movs	r3, r1
 801409c:	0030      	movs	r0, r6
 801409e:	0039      	movs	r1, r7
 80140a0:	f7fb f9e4 	bl	800f46c <__aeabi_dadd>
 80140a4:	3d08      	subs	r5, #8
 80140a6:	0006      	movs	r6, r0
 80140a8:	000f      	movs	r7, r1
 80140aa:	4544      	cmp	r4, r8
 80140ac:	d1ef      	bne.n	801408e <__kernel_rem_pio2+0xc2>
 80140ae:	9b04      	ldr	r3, [sp, #16]
 80140b0:	444b      	add	r3, r9
 80140b2:	601e      	str	r6, [r3, #0]
 80140b4:	605f      	str	r7, [r3, #4]
 80140b6:	2308      	movs	r3, #8
 80140b8:	469c      	mov	ip, r3
 80140ba:	44e1      	add	r9, ip
 80140bc:	45d1      	cmp	r9, sl
 80140be:	d1dd      	bne.n	801407c <__kernel_rem_pio2+0xb0>
 80140c0:	a80e      	add	r0, sp, #56	; 0x38
 80140c2:	2104      	movs	r1, #4
 80140c4:	4684      	mov	ip, r0
 80140c6:	4249      	negs	r1, r1
 80140c8:	4461      	add	r1, ip
 80140ca:	468c      	mov	ip, r1
 80140cc:	9a06      	ldr	r2, [sp, #24]
 80140ce:	0093      	lsls	r3, r2, #2
 80140d0:	449c      	add	ip, r3
 80140d2:	4661      	mov	r1, ip
 80140d4:	4684      	mov	ip, r0
 80140d6:	910a      	str	r1, [sp, #40]	; 0x28
 80140d8:	9903      	ldr	r1, [sp, #12]
 80140da:	3b08      	subs	r3, #8
 80140dc:	4463      	add	r3, ip
 80140de:	468c      	mov	ip, r1
 80140e0:	930c      	str	r3, [sp, #48]	; 0x30
 80140e2:	9b00      	ldr	r3, [sp, #0]
 80140e4:	9200      	str	r2, [sp, #0]
 80140e6:	4463      	add	r3, ip
 80140e8:	469b      	mov	fp, r3
 80140ea:	9a00      	ldr	r2, [sp, #0]
 80140ec:	9804      	ldr	r0, [sp, #16]
 80140ee:	00d1      	lsls	r1, r2, #3
 80140f0:	0003      	movs	r3, r0
 80140f2:	468c      	mov	ip, r1
 80140f4:	4463      	add	r3, ip
 80140f6:	9108      	str	r1, [sp, #32]
 80140f8:	681e      	ldr	r6, [r3, #0]
 80140fa:	685f      	ldr	r7, [r3, #4]
 80140fc:	2a00      	cmp	r2, #0
 80140fe:	dd33      	ble.n	8014168 <__kernel_rem_pio2+0x19c>
 8014100:	4995      	ldr	r1, [pc, #596]	; (8014358 <__kernel_rem_pio2+0x38c>)
 8014102:	4680      	mov	r8, r0
 8014104:	468c      	mov	ip, r1
 8014106:	4462      	add	r2, ip
 8014108:	00d3      	lsls	r3, r2, #3
 801410a:	4498      	add	r8, r3
 801410c:	ab70      	add	r3, sp, #448	; 0x1c0
 801410e:	469a      	mov	sl, r3
 8014110:	ab0e      	add	r3, sp, #56	; 0x38
 8014112:	4699      	mov	r9, r3
 8014114:	2200      	movs	r2, #0
 8014116:	4b91      	ldr	r3, [pc, #580]	; (801435c <__kernel_rem_pio2+0x390>)
 8014118:	0030      	movs	r0, r6
 801411a:	0039      	movs	r1, r7
 801411c:	f7fc f8cc 	bl	80102b8 <__aeabi_dmul>
 8014120:	f7fc fea0 	bl	8010e64 <__aeabi_d2iz>
 8014124:	f7fc fed4 	bl	8010ed0 <__aeabi_i2d>
 8014128:	2200      	movs	r2, #0
 801412a:	4b8d      	ldr	r3, [pc, #564]	; (8014360 <__kernel_rem_pio2+0x394>)
 801412c:	0004      	movs	r4, r0
 801412e:	000d      	movs	r5, r1
 8014130:	f7fc f8c2 	bl	80102b8 <__aeabi_dmul>
 8014134:	0002      	movs	r2, r0
 8014136:	000b      	movs	r3, r1
 8014138:	0030      	movs	r0, r6
 801413a:	0039      	movs	r1, r7
 801413c:	f7fc fb2e 	bl	801079c <__aeabi_dsub>
 8014140:	f7fc fe90 	bl	8010e64 <__aeabi_d2iz>
 8014144:	464b      	mov	r3, r9
 8014146:	c301      	stmia	r3!, {r0}
 8014148:	4699      	mov	r9, r3
 801414a:	4643      	mov	r3, r8
 801414c:	0020      	movs	r0, r4
 801414e:	681a      	ldr	r2, [r3, #0]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	0029      	movs	r1, r5
 8014154:	f7fb f98a 	bl	800f46c <__aeabi_dadd>
 8014158:	2308      	movs	r3, #8
 801415a:	425b      	negs	r3, r3
 801415c:	469c      	mov	ip, r3
 801415e:	44e0      	add	r8, ip
 8014160:	0006      	movs	r6, r0
 8014162:	000f      	movs	r7, r1
 8014164:	45d0      	cmp	r8, sl
 8014166:	d1d5      	bne.n	8014114 <__kernel_rem_pio2+0x148>
 8014168:	9b05      	ldr	r3, [sp, #20]
 801416a:	0030      	movs	r0, r6
 801416c:	001a      	movs	r2, r3
 801416e:	0039      	movs	r1, r7
 8014170:	4698      	mov	r8, r3
 8014172:	f000 fce5 	bl	8014b40 <scalbn>
 8014176:	23ff      	movs	r3, #255	; 0xff
 8014178:	2200      	movs	r2, #0
 801417a:	059b      	lsls	r3, r3, #22
 801417c:	0004      	movs	r4, r0
 801417e:	000d      	movs	r5, r1
 8014180:	f7fc f89a 	bl	80102b8 <__aeabi_dmul>
 8014184:	f000 fc38 	bl	80149f8 <floor>
 8014188:	2200      	movs	r2, #0
 801418a:	4b76      	ldr	r3, [pc, #472]	; (8014364 <__kernel_rem_pio2+0x398>)
 801418c:	f7fc f894 	bl	80102b8 <__aeabi_dmul>
 8014190:	0002      	movs	r2, r0
 8014192:	000b      	movs	r3, r1
 8014194:	0020      	movs	r0, r4
 8014196:	0029      	movs	r1, r5
 8014198:	f7fc fb00 	bl	801079c <__aeabi_dsub>
 801419c:	000d      	movs	r5, r1
 801419e:	0004      	movs	r4, r0
 80141a0:	f7fc fe60 	bl	8010e64 <__aeabi_d2iz>
 80141a4:	4681      	mov	r9, r0
 80141a6:	f7fc fe93 	bl	8010ed0 <__aeabi_i2d>
 80141aa:	0002      	movs	r2, r0
 80141ac:	000b      	movs	r3, r1
 80141ae:	0020      	movs	r0, r4
 80141b0:	0029      	movs	r1, r5
 80141b2:	f7fc faf3 	bl	801079c <__aeabi_dsub>
 80141b6:	0006      	movs	r6, r0
 80141b8:	4640      	mov	r0, r8
 80141ba:	000f      	movs	r7, r1
 80141bc:	2800      	cmp	r0, #0
 80141be:	dc00      	bgt.n	80141c2 <__kernel_rem_pio2+0x1f6>
 80141c0:	e0ee      	b.n	80143a0 <__kernel_rem_pio2+0x3d4>
 80141c2:	9b00      	ldr	r3, [sp, #0]
 80141c4:	2118      	movs	r1, #24
 80141c6:	1e5a      	subs	r2, r3, #1
 80141c8:	0092      	lsls	r2, r2, #2
 80141ca:	ab0e      	add	r3, sp, #56	; 0x38
 80141cc:	589b      	ldr	r3, [r3, r2]
 80141ce:	1a09      	subs	r1, r1, r0
 80141d0:	001d      	movs	r5, r3
 80141d2:	410d      	asrs	r5, r1
 80141d4:	44a9      	add	r9, r5
 80141d6:	408d      	lsls	r5, r1
 80141d8:	1b5d      	subs	r5, r3, r5
 80141da:	ab0e      	add	r3, sp, #56	; 0x38
 80141dc:	509d      	str	r5, [r3, r2]
 80141de:	2317      	movs	r3, #23
 80141e0:	1a1b      	subs	r3, r3, r0
 80141e2:	411d      	asrs	r5, r3
 80141e4:	2d00      	cmp	r5, #0
 80141e6:	dd2d      	ble.n	8014244 <__kernel_rem_pio2+0x278>
 80141e8:	2301      	movs	r3, #1
 80141ea:	469c      	mov	ip, r3
 80141ec:	9b00      	ldr	r3, [sp, #0]
 80141ee:	44e1      	add	r9, ip
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	dc00      	bgt.n	80141f6 <__kernel_rem_pio2+0x22a>
 80141f4:	e21c      	b.n	8014630 <__kernel_rem_pio2+0x664>
 80141f6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80141f8:	2301      	movs	r3, #1
 80141fa:	2c00      	cmp	r4, #0
 80141fc:	d000      	beq.n	8014200 <__kernel_rem_pio2+0x234>
 80141fe:	e0b5      	b.n	801436c <__kernel_rem_pio2+0x3a0>
 8014200:	9a00      	ldr	r2, [sp, #0]
 8014202:	2a01      	cmp	r2, #1
 8014204:	d009      	beq.n	801421a <__kernel_rem_pio2+0x24e>
 8014206:	0099      	lsls	r1, r3, #2
 8014208:	aa0e      	add	r2, sp, #56	; 0x38
 801420a:	5854      	ldr	r4, [r2, r1]
 801420c:	3301      	adds	r3, #1
 801420e:	2c00      	cmp	r4, #0
 8014210:	d000      	beq.n	8014214 <__kernel_rem_pio2+0x248>
 8014212:	e0ac      	b.n	801436e <__kernel_rem_pio2+0x3a2>
 8014214:	9a00      	ldr	r2, [sp, #0]
 8014216:	429a      	cmp	r2, r3
 8014218:	d1f5      	bne.n	8014206 <__kernel_rem_pio2+0x23a>
 801421a:	9b05      	ldr	r3, [sp, #20]
 801421c:	2b00      	cmp	r3, #0
 801421e:	dd0e      	ble.n	801423e <__kernel_rem_pio2+0x272>
 8014220:	2b01      	cmp	r3, #1
 8014222:	d100      	bne.n	8014226 <__kernel_rem_pio2+0x25a>
 8014224:	e1a8      	b.n	8014578 <__kernel_rem_pio2+0x5ac>
 8014226:	2b02      	cmp	r3, #2
 8014228:	d109      	bne.n	801423e <__kernel_rem_pio2+0x272>
 801422a:	9b00      	ldr	r3, [sp, #0]
 801422c:	a90e      	add	r1, sp, #56	; 0x38
 801422e:	1e5a      	subs	r2, r3, #1
 8014230:	0092      	lsls	r2, r2, #2
 8014232:	ab0e      	add	r3, sp, #56	; 0x38
 8014234:	589b      	ldr	r3, [r3, r2]
 8014236:	9307      	str	r3, [sp, #28]
 8014238:	029b      	lsls	r3, r3, #10
 801423a:	0a9b      	lsrs	r3, r3, #10
 801423c:	508b      	str	r3, [r1, r2]
 801423e:	2d02      	cmp	r5, #2
 8014240:	d100      	bne.n	8014244 <__kernel_rem_pio2+0x278>
 8014242:	e0c1      	b.n	80143c8 <__kernel_rem_pio2+0x3fc>
 8014244:	2300      	movs	r3, #0
 8014246:	2200      	movs	r2, #0
 8014248:	0030      	movs	r0, r6
 801424a:	0039      	movs	r1, r7
 801424c:	f7fa fe26 	bl	800ee9c <__aeabi_dcmpeq>
 8014250:	9b00      	ldr	r3, [sp, #0]
 8014252:	2800      	cmp	r0, #0
 8014254:	d100      	bne.n	8014258 <__kernel_rem_pio2+0x28c>
 8014256:	e294      	b.n	8014782 <__kernel_rem_pio2+0x7b6>
 8014258:	9a06      	ldr	r2, [sp, #24]
 801425a:	1e59      	subs	r1, r3, #1
 801425c:	428a      	cmp	r2, r1
 801425e:	dc10      	bgt.n	8014282 <__kernel_rem_pio2+0x2b6>
 8014260:	4a41      	ldr	r2, [pc, #260]	; (8014368 <__kernel_rem_pio2+0x39c>)
 8014262:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014264:	4694      	mov	ip, r2
 8014266:	aa0e      	add	r2, sp, #56	; 0x38
 8014268:	4463      	add	r3, ip
 801426a:	4694      	mov	ip, r2
 801426c:	2200      	movs	r2, #0
 801426e:	009b      	lsls	r3, r3, #2
 8014270:	4463      	add	r3, ip
 8014272:	681c      	ldr	r4, [r3, #0]
 8014274:	3b04      	subs	r3, #4
 8014276:	4322      	orrs	r2, r4
 8014278:	4283      	cmp	r3, r0
 801427a:	d1fa      	bne.n	8014272 <__kernel_rem_pio2+0x2a6>
 801427c:	2a00      	cmp	r2, #0
 801427e:	d000      	beq.n	8014282 <__kernel_rem_pio2+0x2b6>
 8014280:	e0c0      	b.n	8014404 <__kernel_rem_pio2+0x438>
 8014282:	9b06      	ldr	r3, [sp, #24]
 8014284:	aa0e      	add	r2, sp, #56	; 0x38
 8014286:	3b01      	subs	r3, #1
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	58d3      	ldr	r3, [r2, r3]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d000      	beq.n	8014292 <__kernel_rem_pio2+0x2c6>
 8014290:	e0b3      	b.n	80143fa <__kernel_rem_pio2+0x42e>
 8014292:	2201      	movs	r2, #1
 8014294:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014296:	3b04      	subs	r3, #4
 8014298:	6859      	ldr	r1, [r3, #4]
 801429a:	3201      	adds	r2, #1
 801429c:	2900      	cmp	r1, #0
 801429e:	d0fa      	beq.n	8014296 <__kernel_rem_pio2+0x2ca>
 80142a0:	9b00      	ldr	r3, [sp, #0]
 80142a2:	469c      	mov	ip, r3
 80142a4:	4462      	add	r2, ip
 80142a6:	0011      	movs	r1, r2
 80142a8:	9207      	str	r2, [sp, #28]
 80142aa:	001a      	movs	r2, r3
 80142ac:	3301      	adds	r3, #1
 80142ae:	428b      	cmp	r3, r1
 80142b0:	dc46      	bgt.n	8014340 <__kernel_rem_pio2+0x374>
 80142b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80142b4:	4663      	mov	r3, ip
 80142b6:	4680      	mov	r8, r0
 80142b8:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 80142ba:	4443      	add	r3, r8
 80142bc:	46a0      	mov	r8, r4
 80142be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	46a1      	mov	r9, r4
 80142c4:	444a      	add	r2, r9
 80142c6:	4498      	add	r8, r3
 80142c8:	00d3      	lsls	r3, r2, #3
 80142ca:	aa22      	add	r2, sp, #136	; 0x88
 80142cc:	4691      	mov	r9, r2
 80142ce:	9a04      	ldr	r2, [sp, #16]
 80142d0:	4499      	add	r9, r3
 80142d2:	4694      	mov	ip, r2
 80142d4:	9b08      	ldr	r3, [sp, #32]
 80142d6:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80142d8:	4463      	add	r3, ip
 80142da:	4684      	mov	ip, r0
 80142dc:	4461      	add	r1, ip
 80142de:	4694      	mov	ip, r2
 80142e0:	469a      	mov	sl, r3
 80142e2:	008b      	lsls	r3, r1, #2
 80142e4:	4463      	add	r3, ip
 80142e6:	9300      	str	r3, [sp, #0]
 80142e8:	4643      	mov	r3, r8
 80142ea:	6858      	ldr	r0, [r3, #4]
 80142ec:	f7fc fdf0 	bl	8010ed0 <__aeabi_i2d>
 80142f0:	464b      	mov	r3, r9
 80142f2:	6018      	str	r0, [r3, #0]
 80142f4:	6059      	str	r1, [r3, #4]
 80142f6:	9b02      	ldr	r3, [sp, #8]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	db24      	blt.n	8014346 <__kernel_rem_pio2+0x37a>
 80142fc:	464d      	mov	r5, r9
 80142fe:	9c03      	ldr	r4, [sp, #12]
 8014300:	2600      	movs	r6, #0
 8014302:	2700      	movs	r7, #0
 8014304:	e001      	b.n	801430a <__kernel_rem_pio2+0x33e>
 8014306:	6828      	ldr	r0, [r5, #0]
 8014308:	6869      	ldr	r1, [r5, #4]
 801430a:	cc0c      	ldmia	r4!, {r2, r3}
 801430c:	f7fb ffd4 	bl	80102b8 <__aeabi_dmul>
 8014310:	0002      	movs	r2, r0
 8014312:	000b      	movs	r3, r1
 8014314:	0030      	movs	r0, r6
 8014316:	0039      	movs	r1, r7
 8014318:	f7fb f8a8 	bl	800f46c <__aeabi_dadd>
 801431c:	3d08      	subs	r5, #8
 801431e:	0006      	movs	r6, r0
 8014320:	000f      	movs	r7, r1
 8014322:	455c      	cmp	r4, fp
 8014324:	d1ef      	bne.n	8014306 <__kernel_rem_pio2+0x33a>
 8014326:	4653      	mov	r3, sl
 8014328:	609e      	str	r6, [r3, #8]
 801432a:	60df      	str	r7, [r3, #12]
 801432c:	2304      	movs	r3, #4
 801432e:	469c      	mov	ip, r3
 8014330:	3304      	adds	r3, #4
 8014332:	44e0      	add	r8, ip
 8014334:	469c      	mov	ip, r3
 8014336:	9b00      	ldr	r3, [sp, #0]
 8014338:	44e1      	add	r9, ip
 801433a:	44e2      	add	sl, ip
 801433c:	4598      	cmp	r8, r3
 801433e:	d1d3      	bne.n	80142e8 <__kernel_rem_pio2+0x31c>
 8014340:	9b07      	ldr	r3, [sp, #28]
 8014342:	9300      	str	r3, [sp, #0]
 8014344:	e6d1      	b.n	80140ea <__kernel_rem_pio2+0x11e>
 8014346:	2600      	movs	r6, #0
 8014348:	2700      	movs	r7, #0
 801434a:	e7ec      	b.n	8014326 <__kernel_rem_pio2+0x35a>
 801434c:	fffffd94 	.word	0xfffffd94
 8014350:	0801e610 	.word	0x0801e610
 8014354:	fffffe18 	.word	0xfffffe18
 8014358:	1fffffff 	.word	0x1fffffff
 801435c:	3e700000 	.word	0x3e700000
 8014360:	41700000 	.word	0x41700000
 8014364:	40200000 	.word	0x40200000
 8014368:	3fffffff 	.word	0x3fffffff
 801436c:	2100      	movs	r1, #0
 801436e:	2280      	movs	r2, #128	; 0x80
 8014370:	0452      	lsls	r2, r2, #17
 8014372:	1b14      	subs	r4, r2, r4
 8014374:	aa0e      	add	r2, sp, #56	; 0x38
 8014376:	5054      	str	r4, [r2, r1]
 8014378:	9900      	ldr	r1, [sp, #0]
 801437a:	4299      	cmp	r1, r3
 801437c:	dd0e      	ble.n	801439c <__kernel_rem_pio2+0x3d0>
 801437e:	a80e      	add	r0, sp, #56	; 0x38
 8014380:	4684      	mov	ip, r0
 8014382:	009b      	lsls	r3, r3, #2
 8014384:	aa0e      	add	r2, sp, #56	; 0x38
 8014386:	0089      	lsls	r1, r1, #2
 8014388:	58d2      	ldr	r2, [r2, r3]
 801438a:	4461      	add	r1, ip
 801438c:	4463      	add	r3, ip
 801438e:	48cf      	ldr	r0, [pc, #828]	; (80146cc <__kernel_rem_pio2+0x700>)
 8014390:	e000      	b.n	8014394 <__kernel_rem_pio2+0x3c8>
 8014392:	681a      	ldr	r2, [r3, #0]
 8014394:	1a82      	subs	r2, r0, r2
 8014396:	c304      	stmia	r3!, {r2}
 8014398:	428b      	cmp	r3, r1
 801439a:	d1fa      	bne.n	8014392 <__kernel_rem_pio2+0x3c6>
 801439c:	2401      	movs	r4, #1
 801439e:	e73c      	b.n	801421a <__kernel_rem_pio2+0x24e>
 80143a0:	9b05      	ldr	r3, [sp, #20]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <__kernel_rem_pio2+0x3e8>
 80143a6:	9b00      	ldr	r3, [sp, #0]
 80143a8:	aa0e      	add	r2, sp, #56	; 0x38
 80143aa:	3b01      	subs	r3, #1
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	58d5      	ldr	r5, [r2, r3]
 80143b0:	15ed      	asrs	r5, r5, #23
 80143b2:	e717      	b.n	80141e4 <__kernel_rem_pio2+0x218>
 80143b4:	2200      	movs	r2, #0
 80143b6:	4bc6      	ldr	r3, [pc, #792]	; (80146d0 <__kernel_rem_pio2+0x704>)
 80143b8:	0030      	movs	r0, r6
 80143ba:	f7fa fd93 	bl	800eee4 <__aeabi_dcmpge>
 80143be:	2800      	cmp	r0, #0
 80143c0:	d000      	beq.n	80143c4 <__kernel_rem_pio2+0x3f8>
 80143c2:	e124      	b.n	801460e <__kernel_rem_pio2+0x642>
 80143c4:	2500      	movs	r5, #0
 80143c6:	e73d      	b.n	8014244 <__kernel_rem_pio2+0x278>
 80143c8:	0032      	movs	r2, r6
 80143ca:	003b      	movs	r3, r7
 80143cc:	2000      	movs	r0, #0
 80143ce:	49c1      	ldr	r1, [pc, #772]	; (80146d4 <__kernel_rem_pio2+0x708>)
 80143d0:	f7fc f9e4 	bl	801079c <__aeabi_dsub>
 80143d4:	0006      	movs	r6, r0
 80143d6:	000f      	movs	r7, r1
 80143d8:	2c00      	cmp	r4, #0
 80143da:	d100      	bne.n	80143de <__kernel_rem_pio2+0x412>
 80143dc:	e732      	b.n	8014244 <__kernel_rem_pio2+0x278>
 80143de:	9a05      	ldr	r2, [sp, #20]
 80143e0:	2000      	movs	r0, #0
 80143e2:	49bc      	ldr	r1, [pc, #752]	; (80146d4 <__kernel_rem_pio2+0x708>)
 80143e4:	f000 fbac 	bl	8014b40 <scalbn>
 80143e8:	0002      	movs	r2, r0
 80143ea:	000b      	movs	r3, r1
 80143ec:	0030      	movs	r0, r6
 80143ee:	0039      	movs	r1, r7
 80143f0:	f7fc f9d4 	bl	801079c <__aeabi_dsub>
 80143f4:	0006      	movs	r6, r0
 80143f6:	000f      	movs	r7, r1
 80143f8:	e724      	b.n	8014244 <__kernel_rem_pio2+0x278>
 80143fa:	2201      	movs	r2, #1
 80143fc:	e750      	b.n	80142a0 <__kernel_rem_pio2+0x2d4>
 80143fe:	2600      	movs	r6, #0
 8014400:	2700      	movs	r7, #0
 8014402:	e654      	b.n	80140ae <__kernel_rem_pio2+0xe2>
 8014404:	464b      	mov	r3, r9
 8014406:	9a05      	ldr	r2, [sp, #20]
 8014408:	9307      	str	r3, [sp, #28]
 801440a:	4688      	mov	r8, r1
 801440c:	008b      	lsls	r3, r1, #2
 801440e:	a90e      	add	r1, sp, #56	; 0x38
 8014410:	58cb      	ldr	r3, [r1, r3]
 8014412:	3a18      	subs	r2, #24
 8014414:	9508      	str	r5, [sp, #32]
 8014416:	9205      	str	r2, [sp, #20]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d10d      	bne.n	8014438 <__kernel_rem_pio2+0x46c>
 801441c:	468c      	mov	ip, r1
 801441e:	4641      	mov	r1, r8
 8014420:	4bad      	ldr	r3, [pc, #692]	; (80146d8 <__kernel_rem_pio2+0x70c>)
 8014422:	4443      	add	r3, r8
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	4463      	add	r3, ip
 8014428:	3b04      	subs	r3, #4
 801442a:	6858      	ldr	r0, [r3, #4]
 801442c:	3901      	subs	r1, #1
 801442e:	3a18      	subs	r2, #24
 8014430:	2800      	cmp	r0, #0
 8014432:	d0f9      	beq.n	8014428 <__kernel_rem_pio2+0x45c>
 8014434:	4688      	mov	r8, r1
 8014436:	9205      	str	r2, [sp, #20]
 8014438:	9a05      	ldr	r2, [sp, #20]
 801443a:	2000      	movs	r0, #0
 801443c:	49a5      	ldr	r1, [pc, #660]	; (80146d4 <__kernel_rem_pio2+0x708>)
 801443e:	f000 fb7f 	bl	8014b40 <scalbn>
 8014442:	4643      	mov	r3, r8
 8014444:	0004      	movs	r4, r0
 8014446:	000d      	movs	r5, r1
 8014448:	2b00      	cmp	r3, #0
 801444a:	da00      	bge.n	801444e <__kernel_rem_pio2+0x482>
 801444c:	e205      	b.n	801485a <__kernel_rem_pio2+0x88e>
 801444e:	009e      	lsls	r6, r3, #2
 8014450:	ab0e      	add	r3, sp, #56	; 0x38
 8014452:	469c      	mov	ip, r3
 8014454:	4643      	mov	r3, r8
 8014456:	00db      	lsls	r3, r3, #3
 8014458:	4466      	add	r6, ip
 801445a:	469c      	mov	ip, r3
 801445c:	9305      	str	r3, [sp, #20]
 801445e:	ab70      	add	r3, sp, #448	; 0x1c0
 8014460:	4699      	mov	r9, r3
 8014462:	9f04      	ldr	r7, [sp, #16]
 8014464:	4467      	add	r7, ip
 8014466:	9700      	str	r7, [sp, #0]
 8014468:	6830      	ldr	r0, [r6, #0]
 801446a:	f7fc fd31 	bl	8010ed0 <__aeabi_i2d>
 801446e:	0022      	movs	r2, r4
 8014470:	002b      	movs	r3, r5
 8014472:	f7fb ff21 	bl	80102b8 <__aeabi_dmul>
 8014476:	2200      	movs	r2, #0
 8014478:	6038      	str	r0, [r7, #0]
 801447a:	6079      	str	r1, [r7, #4]
 801447c:	4b97      	ldr	r3, [pc, #604]	; (80146dc <__kernel_rem_pio2+0x710>)
 801447e:	0020      	movs	r0, r4
 8014480:	0029      	movs	r1, r5
 8014482:	f7fb ff19 	bl	80102b8 <__aeabi_dmul>
 8014486:	3f08      	subs	r7, #8
 8014488:	0004      	movs	r4, r0
 801448a:	000d      	movs	r5, r1
 801448c:	3e04      	subs	r6, #4
 801448e:	45b9      	cmp	r9, r7
 8014490:	d1ea      	bne.n	8014468 <__kernel_rem_pio2+0x49c>
 8014492:	ab4a      	add	r3, sp, #296	; 0x128
 8014494:	9303      	str	r3, [sp, #12]
 8014496:	469b      	mov	fp, r3
 8014498:	2300      	movs	r3, #0
 801449a:	469a      	mov	sl, r3
 801449c:	9b06      	ldr	r3, [sp, #24]
 801449e:	4642      	mov	r2, r8
 80144a0:	4699      	mov	r9, r3
 80144a2:	4643      	mov	r3, r8
 80144a4:	3201      	adds	r2, #1
 80144a6:	9202      	str	r2, [sp, #8]
 80144a8:	9304      	str	r3, [sp, #16]
 80144aa:	464b      	mov	r3, r9
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	da00      	bge.n	80144b2 <__kernel_rem_pio2+0x4e6>
 80144b0:	e0aa      	b.n	8014608 <__kernel_rem_pio2+0x63c>
 80144b2:	2080      	movs	r0, #128	; 0x80
 80144b4:	4b8a      	ldr	r3, [pc, #552]	; (80146e0 <__kernel_rem_pio2+0x714>)
 80144b6:	9d00      	ldr	r5, [sp, #0]
 80144b8:	4698      	mov	r8, r3
 80144ba:	05c0      	lsls	r0, r0, #23
 80144bc:	4989      	ldr	r1, [pc, #548]	; (80146e4 <__kernel_rem_pio2+0x718>)
 80144be:	2600      	movs	r6, #0
 80144c0:	2700      	movs	r7, #0
 80144c2:	2400      	movs	r4, #0
 80144c4:	e008      	b.n	80144d8 <__kernel_rem_pio2+0x50c>
 80144c6:	2308      	movs	r3, #8
 80144c8:	469c      	mov	ip, r3
 80144ca:	3508      	adds	r5, #8
 80144cc:	44e0      	add	r8, ip
 80144ce:	4554      	cmp	r4, sl
 80144d0:	dc11      	bgt.n	80144f6 <__kernel_rem_pio2+0x52a>
 80144d2:	4643      	mov	r3, r8
 80144d4:	6818      	ldr	r0, [r3, #0]
 80144d6:	6859      	ldr	r1, [r3, #4]
 80144d8:	682a      	ldr	r2, [r5, #0]
 80144da:	686b      	ldr	r3, [r5, #4]
 80144dc:	f7fb feec 	bl	80102b8 <__aeabi_dmul>
 80144e0:	0002      	movs	r2, r0
 80144e2:	000b      	movs	r3, r1
 80144e4:	0030      	movs	r0, r6
 80144e6:	0039      	movs	r1, r7
 80144e8:	f7fa ffc0 	bl	800f46c <__aeabi_dadd>
 80144ec:	3401      	adds	r4, #1
 80144ee:	0006      	movs	r6, r0
 80144f0:	000f      	movs	r7, r1
 80144f2:	45a1      	cmp	r9, r4
 80144f4:	dae7      	bge.n	80144c6 <__kernel_rem_pio2+0x4fa>
 80144f6:	465b      	mov	r3, fp
 80144f8:	c3c0      	stmia	r3!, {r6, r7}
 80144fa:	469b      	mov	fp, r3
 80144fc:	2301      	movs	r3, #1
 80144fe:	469c      	mov	ip, r3
 8014500:	9b00      	ldr	r3, [sp, #0]
 8014502:	44e2      	add	sl, ip
 8014504:	3b08      	subs	r3, #8
 8014506:	9300      	str	r3, [sp, #0]
 8014508:	9b02      	ldr	r3, [sp, #8]
 801450a:	459a      	cmp	sl, r3
 801450c:	d1cd      	bne.n	80144aa <__kernel_rem_pio2+0x4de>
 801450e:	9b04      	ldr	r3, [sp, #16]
 8014510:	4698      	mov	r8, r3
 8014512:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014514:	2b02      	cmp	r3, #2
 8014516:	dd00      	ble.n	801451a <__kernel_rem_pio2+0x54e>
 8014518:	e08e      	b.n	8014638 <__kernel_rem_pio2+0x66c>
 801451a:	2b00      	cmp	r3, #0
 801451c:	dc37      	bgt.n	801458e <__kernel_rem_pio2+0x5c2>
 801451e:	d11f      	bne.n	8014560 <__kernel_rem_pio2+0x594>
 8014520:	9b05      	ldr	r3, [sp, #20]
 8014522:	2700      	movs	r7, #0
 8014524:	001d      	movs	r5, r3
 8014526:	9b03      	ldr	r3, [sp, #12]
 8014528:	2400      	movs	r4, #0
 801452a:	469c      	mov	ip, r3
 801452c:	001e      	movs	r6, r3
 801452e:	4465      	add	r5, ip
 8014530:	3e08      	subs	r6, #8
 8014532:	682a      	ldr	r2, [r5, #0]
 8014534:	686b      	ldr	r3, [r5, #4]
 8014536:	0038      	movs	r0, r7
 8014538:	0021      	movs	r1, r4
 801453a:	f7fa ff97 	bl	800f46c <__aeabi_dadd>
 801453e:	3d08      	subs	r5, #8
 8014540:	0007      	movs	r7, r0
 8014542:	000c      	movs	r4, r1
 8014544:	42ae      	cmp	r6, r5
 8014546:	d1f4      	bne.n	8014532 <__kernel_rem_pio2+0x566>
 8014548:	9b08      	ldr	r3, [sp, #32]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d003      	beq.n	8014556 <__kernel_rem_pio2+0x58a>
 801454e:	2380      	movs	r3, #128	; 0x80
 8014550:	061b      	lsls	r3, r3, #24
 8014552:	469c      	mov	ip, r3
 8014554:	4464      	add	r4, ip
 8014556:	003a      	movs	r2, r7
 8014558:	0023      	movs	r3, r4
 801455a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801455c:	600a      	str	r2, [r1, #0]
 801455e:	604b      	str	r3, [r1, #4]
 8014560:	2007      	movs	r0, #7
 8014562:	9b07      	ldr	r3, [sp, #28]
 8014564:	4018      	ands	r0, r3
 8014566:	239b      	movs	r3, #155	; 0x9b
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	449d      	add	sp, r3
 801456c:	bc3c      	pop	{r2, r3, r4, r5}
 801456e:	4690      	mov	r8, r2
 8014570:	4699      	mov	r9, r3
 8014572:	46a2      	mov	sl, r4
 8014574:	46ab      	mov	fp, r5
 8014576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014578:	9b00      	ldr	r3, [sp, #0]
 801457a:	a90e      	add	r1, sp, #56	; 0x38
 801457c:	1e5a      	subs	r2, r3, #1
 801457e:	0092      	lsls	r2, r2, #2
 8014580:	ab0e      	add	r3, sp, #56	; 0x38
 8014582:	589b      	ldr	r3, [r3, r2]
 8014584:	9307      	str	r3, [sp, #28]
 8014586:	025b      	lsls	r3, r3, #9
 8014588:	0a5b      	lsrs	r3, r3, #9
 801458a:	508b      	str	r3, [r1, r2]
 801458c:	e657      	b.n	801423e <__kernel_rem_pio2+0x272>
 801458e:	4643      	mov	r3, r8
 8014590:	2b00      	cmp	r3, #0
 8014592:	da00      	bge.n	8014596 <__kernel_rem_pio2+0x5ca>
 8014594:	e170      	b.n	8014878 <__kernel_rem_pio2+0x8ac>
 8014596:	2000      	movs	r0, #0
 8014598:	2100      	movs	r1, #0
 801459a:	00db      	lsls	r3, r3, #3
 801459c:	aa4a      	add	r2, sp, #296	; 0x128
 801459e:	18d6      	adds	r6, r2, r3
 80145a0:	af48      	add	r7, sp, #288	; 0x120
 80145a2:	6832      	ldr	r2, [r6, #0]
 80145a4:	6873      	ldr	r3, [r6, #4]
 80145a6:	3e08      	subs	r6, #8
 80145a8:	f7fa ff60 	bl	800f46c <__aeabi_dadd>
 80145ac:	42b7      	cmp	r7, r6
 80145ae:	d1f8      	bne.n	80145a2 <__kernel_rem_pio2+0x5d6>
 80145b0:	9b08      	ldr	r3, [sp, #32]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d000      	beq.n	80145b8 <__kernel_rem_pio2+0x5ec>
 80145b6:	e125      	b.n	8014804 <__kernel_rem_pio2+0x838>
 80145b8:	000b      	movs	r3, r1
 80145ba:	0002      	movs	r2, r0
 80145bc:	984a      	ldr	r0, [sp, #296]	; 0x128
 80145be:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80145c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80145c2:	6022      	str	r2, [r4, #0]
 80145c4:	6063      	str	r3, [r4, #4]
 80145c6:	f7fc f8e9 	bl	801079c <__aeabi_dsub>
 80145ca:	4643      	mov	r3, r8
 80145cc:	0007      	movs	r7, r0
 80145ce:	000c      	movs	r4, r1
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	dd13      	ble.n	80145fc <__kernel_rem_pio2+0x630>
 80145d4:	2501      	movs	r5, #1
 80145d6:	ae4c      	add	r6, sp, #304	; 0x130
 80145d8:	46b1      	mov	r9, r6
 80145da:	0038      	movs	r0, r7
 80145dc:	002e      	movs	r6, r5
 80145de:	0021      	movs	r1, r4
 80145e0:	464c      	mov	r4, r9
 80145e2:	3601      	adds	r6, #1
 80145e4:	cc0c      	ldmia	r4!, {r2, r3}
 80145e6:	f7fa ff41 	bl	800f46c <__aeabi_dadd>
 80145ea:	46a1      	mov	r9, r4
 80145ec:	45b0      	cmp	r8, r6
 80145ee:	daf7      	bge.n	80145e0 <__kernel_rem_pio2+0x614>
 80145f0:	9b08      	ldr	r3, [sp, #32]
 80145f2:	0007      	movs	r7, r0
 80145f4:	000c      	movs	r4, r1
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d000      	beq.n	80145fc <__kernel_rem_pio2+0x630>
 80145fa:	e115      	b.n	8014828 <__kernel_rem_pio2+0x85c>
 80145fc:	003a      	movs	r2, r7
 80145fe:	0023      	movs	r3, r4
 8014600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014602:	608a      	str	r2, [r1, #8]
 8014604:	60cb      	str	r3, [r1, #12]
 8014606:	e7ab      	b.n	8014560 <__kernel_rem_pio2+0x594>
 8014608:	2600      	movs	r6, #0
 801460a:	2700      	movs	r7, #0
 801460c:	e773      	b.n	80144f6 <__kernel_rem_pio2+0x52a>
 801460e:	2301      	movs	r3, #1
 8014610:	469c      	mov	ip, r3
 8014612:	9b00      	ldr	r3, [sp, #0]
 8014614:	44e1      	add	r9, ip
 8014616:	2502      	movs	r5, #2
 8014618:	2b00      	cmp	r3, #0
 801461a:	dd00      	ble.n	801461e <__kernel_rem_pio2+0x652>
 801461c:	e5eb      	b.n	80141f6 <__kernel_rem_pio2+0x22a>
 801461e:	0032      	movs	r2, r6
 8014620:	003b      	movs	r3, r7
 8014622:	2000      	movs	r0, #0
 8014624:	492b      	ldr	r1, [pc, #172]	; (80146d4 <__kernel_rem_pio2+0x708>)
 8014626:	f7fc f8b9 	bl	801079c <__aeabi_dsub>
 801462a:	0006      	movs	r6, r0
 801462c:	000f      	movs	r7, r1
 801462e:	e609      	b.n	8014244 <__kernel_rem_pio2+0x278>
 8014630:	2400      	movs	r4, #0
 8014632:	e5f2      	b.n	801421a <__kernel_rem_pio2+0x24e>
 8014634:	ab4a      	add	r3, sp, #296	; 0x128
 8014636:	9303      	str	r3, [sp, #12]
 8014638:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801463a:	2b03      	cmp	r3, #3
 801463c:	d000      	beq.n	8014640 <__kernel_rem_pio2+0x674>
 801463e:	e78f      	b.n	8014560 <__kernel_rem_pio2+0x594>
 8014640:	4643      	mov	r3, r8
 8014642:	2b00      	cmp	r3, #0
 8014644:	dc00      	bgt.n	8014648 <__kernel_rem_pio2+0x67c>
 8014646:	e114      	b.n	8014872 <__kernel_rem_pio2+0x8a6>
 8014648:	9a03      	ldr	r2, [sp, #12]
 801464a:	00db      	lsls	r3, r3, #3
 801464c:	469b      	mov	fp, r3
 801464e:	0013      	movs	r3, r2
 8014650:	4691      	mov	r9, r2
 8014652:	445b      	add	r3, fp
 8014654:	681e      	ldr	r6, [r3, #0]
 8014656:	685f      	ldr	r7, [r3, #4]
 8014658:	4b23      	ldr	r3, [pc, #140]	; (80146e8 <__kernel_rem_pio2+0x71c>)
 801465a:	4443      	add	r3, r8
 801465c:	9302      	str	r3, [sp, #8]
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	4499      	add	r9, r3
 8014662:	ab48      	add	r3, sp, #288	; 0x120
 8014664:	469a      	mov	sl, r3
 8014666:	464b      	mov	r3, r9
 8014668:	685c      	ldr	r4, [r3, #4]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	0018      	movs	r0, r3
 801466e:	0021      	movs	r1, r4
 8014670:	0032      	movs	r2, r6
 8014672:	003b      	movs	r3, r7
 8014674:	9000      	str	r0, [sp, #0]
 8014676:	9101      	str	r1, [sp, #4]
 8014678:	f7fa fef8 	bl	800f46c <__aeabi_dadd>
 801467c:	0004      	movs	r4, r0
 801467e:	000d      	movs	r5, r1
 8014680:	0002      	movs	r2, r0
 8014682:	000b      	movs	r3, r1
 8014684:	9800      	ldr	r0, [sp, #0]
 8014686:	9901      	ldr	r1, [sp, #4]
 8014688:	f7fc f888 	bl	801079c <__aeabi_dsub>
 801468c:	003b      	movs	r3, r7
 801468e:	0032      	movs	r2, r6
 8014690:	f7fa feec 	bl	800f46c <__aeabi_dadd>
 8014694:	464b      	mov	r3, r9
 8014696:	6098      	str	r0, [r3, #8]
 8014698:	60d9      	str	r1, [r3, #12]
 801469a:	601c      	str	r4, [r3, #0]
 801469c:	605d      	str	r5, [r3, #4]
 801469e:	2308      	movs	r3, #8
 80146a0:	425b      	negs	r3, r3
 80146a2:	469c      	mov	ip, r3
 80146a4:	44e1      	add	r9, ip
 80146a6:	0026      	movs	r6, r4
 80146a8:	002f      	movs	r7, r5
 80146aa:	45ca      	cmp	sl, r9
 80146ac:	d1db      	bne.n	8014666 <__kernel_rem_pio2+0x69a>
 80146ae:	4643      	mov	r3, r8
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	dc00      	bgt.n	80146b6 <__kernel_rem_pio2+0x6ea>
 80146b4:	e0e3      	b.n	801487e <__kernel_rem_pio2+0x8b2>
 80146b6:	9a03      	ldr	r2, [sp, #12]
 80146b8:	0013      	movs	r3, r2
 80146ba:	445b      	add	r3, fp
 80146bc:	681e      	ldr	r6, [r3, #0]
 80146be:	685f      	ldr	r7, [r3, #4]
 80146c0:	9b02      	ldr	r3, [sp, #8]
 80146c2:	00db      	lsls	r3, r3, #3
 80146c4:	4699      	mov	r9, r3
 80146c6:	444a      	add	r2, r9
 80146c8:	4690      	mov	r8, r2
 80146ca:	e010      	b.n	80146ee <__kernel_rem_pio2+0x722>
 80146cc:	00ffffff 	.word	0x00ffffff
 80146d0:	3fe00000 	.word	0x3fe00000
 80146d4:	3ff00000 	.word	0x3ff00000
 80146d8:	3fffffff 	.word	0x3fffffff
 80146dc:	3e700000 	.word	0x3e700000
 80146e0:	0801e5d0 	.word	0x0801e5d0
 80146e4:	3ff921fb 	.word	0x3ff921fb
 80146e8:	1fffffff 	.word	0x1fffffff
 80146ec:	4698      	mov	r8, r3
 80146ee:	4643      	mov	r3, r8
 80146f0:	685c      	ldr	r4, [r3, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	0018      	movs	r0, r3
 80146f6:	0021      	movs	r1, r4
 80146f8:	0032      	movs	r2, r6
 80146fa:	003b      	movs	r3, r7
 80146fc:	9000      	str	r0, [sp, #0]
 80146fe:	9101      	str	r1, [sp, #4]
 8014700:	f7fa feb4 	bl	800f46c <__aeabi_dadd>
 8014704:	0004      	movs	r4, r0
 8014706:	000d      	movs	r5, r1
 8014708:	0002      	movs	r2, r0
 801470a:	000b      	movs	r3, r1
 801470c:	9800      	ldr	r0, [sp, #0]
 801470e:	9901      	ldr	r1, [sp, #4]
 8014710:	f7fc f844 	bl	801079c <__aeabi_dsub>
 8014714:	0032      	movs	r2, r6
 8014716:	003b      	movs	r3, r7
 8014718:	f7fa fea8 	bl	800f46c <__aeabi_dadd>
 801471c:	4643      	mov	r3, r8
 801471e:	9a03      	ldr	r2, [sp, #12]
 8014720:	6098      	str	r0, [r3, #8]
 8014722:	60d9      	str	r1, [r3, #12]
 8014724:	601c      	str	r4, [r3, #0]
 8014726:	605d      	str	r5, [r3, #4]
 8014728:	3b08      	subs	r3, #8
 801472a:	0026      	movs	r6, r4
 801472c:	002f      	movs	r7, r5
 801472e:	429a      	cmp	r2, r3
 8014730:	d1dc      	bne.n	80146ec <__kernel_rem_pio2+0x720>
 8014732:	464d      	mov	r5, r9
 8014734:	4694      	mov	ip, r2
 8014736:	2600      	movs	r6, #0
 8014738:	2400      	movs	r4, #0
 801473a:	4647      	mov	r7, r8
 801473c:	3508      	adds	r5, #8
 801473e:	4465      	add	r5, ip
 8014740:	682a      	ldr	r2, [r5, #0]
 8014742:	686b      	ldr	r3, [r5, #4]
 8014744:	0030      	movs	r0, r6
 8014746:	0021      	movs	r1, r4
 8014748:	f7fa fe90 	bl	800f46c <__aeabi_dadd>
 801474c:	3d08      	subs	r5, #8
 801474e:	0006      	movs	r6, r0
 8014750:	000c      	movs	r4, r1
 8014752:	42af      	cmp	r7, r5
 8014754:	d1f4      	bne.n	8014740 <__kernel_rem_pio2+0x774>
 8014756:	9b03      	ldr	r3, [sp, #12]
 8014758:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 801475a:	685d      	ldr	r5, [r3, #4]
 801475c:	6899      	ldr	r1, [r3, #8]
 801475e:	68d8      	ldr	r0, [r3, #12]
 8014760:	9b08      	ldr	r3, [sp, #32]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d065      	beq.n	8014832 <__kernel_rem_pio2+0x866>
 8014766:	2280      	movs	r2, #128	; 0x80
 8014768:	0612      	lsls	r2, r2, #24
 801476a:	4694      	mov	ip, r2
 801476c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801476e:	4465      	add	r5, ip
 8014770:	4460      	add	r0, ip
 8014772:	4464      	add	r4, ip
 8014774:	601f      	str	r7, [r3, #0]
 8014776:	605d      	str	r5, [r3, #4]
 8014778:	6099      	str	r1, [r3, #8]
 801477a:	60d8      	str	r0, [r3, #12]
 801477c:	611e      	str	r6, [r3, #16]
 801477e:	615c      	str	r4, [r3, #20]
 8014780:	e6ee      	b.n	8014560 <__kernel_rem_pio2+0x594>
 8014782:	469a      	mov	sl, r3
 8014784:	464b      	mov	r3, r9
 8014786:	9307      	str	r3, [sp, #28]
 8014788:	9b05      	ldr	r3, [sp, #20]
 801478a:	0030      	movs	r0, r6
 801478c:	425a      	negs	r2, r3
 801478e:	0039      	movs	r1, r7
 8014790:	9508      	str	r5, [sp, #32]
 8014792:	f000 f9d5 	bl	8014b40 <scalbn>
 8014796:	2200      	movs	r2, #0
 8014798:	4b3a      	ldr	r3, [pc, #232]	; (8014884 <__kernel_rem_pio2+0x8b8>)
 801479a:	0006      	movs	r6, r0
 801479c:	000f      	movs	r7, r1
 801479e:	f7fa fba1 	bl	800eee4 <__aeabi_dcmpge>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	d024      	beq.n	80147f0 <__kernel_rem_pio2+0x824>
 80147a6:	4b38      	ldr	r3, [pc, #224]	; (8014888 <__kernel_rem_pio2+0x8bc>)
 80147a8:	2200      	movs	r2, #0
 80147aa:	0030      	movs	r0, r6
 80147ac:	0039      	movs	r1, r7
 80147ae:	f7fb fd83 	bl	80102b8 <__aeabi_dmul>
 80147b2:	f7fc fb57 	bl	8010e64 <__aeabi_d2iz>
 80147b6:	4652      	mov	r2, sl
 80147b8:	0004      	movs	r4, r0
 80147ba:	0095      	lsls	r5, r2, #2
 80147bc:	f7fc fb88 	bl	8010ed0 <__aeabi_i2d>
 80147c0:	2200      	movs	r2, #0
 80147c2:	4b30      	ldr	r3, [pc, #192]	; (8014884 <__kernel_rem_pio2+0x8b8>)
 80147c4:	f7fb fd78 	bl	80102b8 <__aeabi_dmul>
 80147c8:	0002      	movs	r2, r0
 80147ca:	000b      	movs	r3, r1
 80147cc:	0030      	movs	r0, r6
 80147ce:	0039      	movs	r1, r7
 80147d0:	f7fb ffe4 	bl	801079c <__aeabi_dsub>
 80147d4:	f7fc fb46 	bl	8010e64 <__aeabi_d2iz>
 80147d8:	aa0e      	add	r2, sp, #56	; 0x38
 80147da:	5150      	str	r0, [r2, r5]
 80147dc:	2201      	movs	r2, #1
 80147de:	9b05      	ldr	r3, [sp, #20]
 80147e0:	4452      	add	r2, sl
 80147e2:	3318      	adds	r3, #24
 80147e4:	4690      	mov	r8, r2
 80147e6:	9305      	str	r3, [sp, #20]
 80147e8:	0093      	lsls	r3, r2, #2
 80147ea:	aa0e      	add	r2, sp, #56	; 0x38
 80147ec:	50d4      	str	r4, [r2, r3]
 80147ee:	e623      	b.n	8014438 <__kernel_rem_pio2+0x46c>
 80147f0:	4653      	mov	r3, sl
 80147f2:	0030      	movs	r0, r6
 80147f4:	0039      	movs	r1, r7
 80147f6:	009c      	lsls	r4, r3, #2
 80147f8:	f7fc fb34 	bl	8010e64 <__aeabi_d2iz>
 80147fc:	ab0e      	add	r3, sp, #56	; 0x38
 80147fe:	5118      	str	r0, [r3, r4]
 8014800:	46d0      	mov	r8, sl
 8014802:	e619      	b.n	8014438 <__kernel_rem_pio2+0x46c>
 8014804:	2380      	movs	r3, #128	; 0x80
 8014806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014808:	061b      	lsls	r3, r3, #24
 801480a:	18cb      	adds	r3, r1, r3
 801480c:	6010      	str	r0, [r2, #0]
 801480e:	6053      	str	r3, [r2, #4]
 8014810:	000b      	movs	r3, r1
 8014812:	0002      	movs	r2, r0
 8014814:	984a      	ldr	r0, [sp, #296]	; 0x128
 8014816:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8014818:	f7fb ffc0 	bl	801079c <__aeabi_dsub>
 801481c:	4643      	mov	r3, r8
 801481e:	0007      	movs	r7, r0
 8014820:	000c      	movs	r4, r1
 8014822:	2b00      	cmp	r3, #0
 8014824:	dd00      	ble.n	8014828 <__kernel_rem_pio2+0x85c>
 8014826:	e6d5      	b.n	80145d4 <__kernel_rem_pio2+0x608>
 8014828:	2380      	movs	r3, #128	; 0x80
 801482a:	061b      	lsls	r3, r3, #24
 801482c:	469c      	mov	ip, r3
 801482e:	4464      	add	r4, ip
 8014830:	e6e4      	b.n	80145fc <__kernel_rem_pio2+0x630>
 8014832:	002b      	movs	r3, r5
 8014834:	003a      	movs	r2, r7
 8014836:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014838:	602a      	str	r2, [r5, #0]
 801483a:	606b      	str	r3, [r5, #4]
 801483c:	000a      	movs	r2, r1
 801483e:	0003      	movs	r3, r0
 8014840:	60aa      	str	r2, [r5, #8]
 8014842:	60eb      	str	r3, [r5, #12]
 8014844:	0032      	movs	r2, r6
 8014846:	0023      	movs	r3, r4
 8014848:	612a      	str	r2, [r5, #16]
 801484a:	616b      	str	r3, [r5, #20]
 801484c:	e688      	b.n	8014560 <__kernel_rem_pio2+0x594>
 801484e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	9300      	str	r3, [sp, #0]
 8014854:	ab72      	add	r3, sp, #456	; 0x1c8
 8014856:	9304      	str	r3, [sp, #16]
 8014858:	e432      	b.n	80140c0 <__kernel_rem_pio2+0xf4>
 801485a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801485c:	2b02      	cmp	r3, #2
 801485e:	dd00      	ble.n	8014862 <__kernel_rem_pio2+0x896>
 8014860:	e6e8      	b.n	8014634 <__kernel_rem_pio2+0x668>
 8014862:	2b00      	cmp	r3, #0
 8014864:	dd00      	ble.n	8014868 <__kernel_rem_pio2+0x89c>
 8014866:	e692      	b.n	801458e <__kernel_rem_pio2+0x5c2>
 8014868:	d000      	beq.n	801486c <__kernel_rem_pio2+0x8a0>
 801486a:	e679      	b.n	8014560 <__kernel_rem_pio2+0x594>
 801486c:	2700      	movs	r7, #0
 801486e:	2400      	movs	r4, #0
 8014870:	e66a      	b.n	8014548 <__kernel_rem_pio2+0x57c>
 8014872:	2600      	movs	r6, #0
 8014874:	2400      	movs	r4, #0
 8014876:	e76e      	b.n	8014756 <__kernel_rem_pio2+0x78a>
 8014878:	2000      	movs	r0, #0
 801487a:	2100      	movs	r1, #0
 801487c:	e698      	b.n	80145b0 <__kernel_rem_pio2+0x5e4>
 801487e:	2600      	movs	r6, #0
 8014880:	0034      	movs	r4, r6
 8014882:	e768      	b.n	8014756 <__kernel_rem_pio2+0x78a>
 8014884:	41700000 	.word	0x41700000
 8014888:	3e700000 	.word	0x3e700000

0801488c <__kernel_sin>:
 801488c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801488e:	46ce      	mov	lr, r9
 8014890:	4647      	mov	r7, r8
 8014892:	b580      	push	{r7, lr}
 8014894:	b087      	sub	sp, #28
 8014896:	9200      	str	r2, [sp, #0]
 8014898:	9301      	str	r3, [sp, #4]
 801489a:	4a47      	ldr	r2, [pc, #284]	; (80149b8 <__kernel_sin+0x12c>)
 801489c:	004b      	lsls	r3, r1, #1
 801489e:	4681      	mov	r9, r0
 80148a0:	4688      	mov	r8, r1
 80148a2:	085b      	lsrs	r3, r3, #1
 80148a4:	4293      	cmp	r3, r2
 80148a6:	dc07      	bgt.n	80148b8 <__kernel_sin+0x2c>
 80148a8:	4641      	mov	r1, r8
 80148aa:	4648      	mov	r0, r9
 80148ac:	f7fc fada 	bl	8010e64 <__aeabi_d2iz>
 80148b0:	4641      	mov	r1, r8
 80148b2:	1e03      	subs	r3, r0, #0
 80148b4:	4648      	mov	r0, r9
 80148b6:	d066      	beq.n	8014986 <__kernel_sin+0xfa>
 80148b8:	464a      	mov	r2, r9
 80148ba:	4643      	mov	r3, r8
 80148bc:	4648      	mov	r0, r9
 80148be:	4641      	mov	r1, r8
 80148c0:	f7fb fcfa 	bl	80102b8 <__aeabi_dmul>
 80148c4:	0004      	movs	r4, r0
 80148c6:	000d      	movs	r5, r1
 80148c8:	0002      	movs	r2, r0
 80148ca:	000b      	movs	r3, r1
 80148cc:	4648      	mov	r0, r9
 80148ce:	4641      	mov	r1, r8
 80148d0:	f7fb fcf2 	bl	80102b8 <__aeabi_dmul>
 80148d4:	4a39      	ldr	r2, [pc, #228]	; (80149bc <__kernel_sin+0x130>)
 80148d6:	4b3a      	ldr	r3, [pc, #232]	; (80149c0 <__kernel_sin+0x134>)
 80148d8:	0006      	movs	r6, r0
 80148da:	000f      	movs	r7, r1
 80148dc:	0020      	movs	r0, r4
 80148de:	0029      	movs	r1, r5
 80148e0:	f7fb fcea 	bl	80102b8 <__aeabi_dmul>
 80148e4:	4a37      	ldr	r2, [pc, #220]	; (80149c4 <__kernel_sin+0x138>)
 80148e6:	4b38      	ldr	r3, [pc, #224]	; (80149c8 <__kernel_sin+0x13c>)
 80148e8:	f7fb ff58 	bl	801079c <__aeabi_dsub>
 80148ec:	0022      	movs	r2, r4
 80148ee:	002b      	movs	r3, r5
 80148f0:	f7fb fce2 	bl	80102b8 <__aeabi_dmul>
 80148f4:	4a35      	ldr	r2, [pc, #212]	; (80149cc <__kernel_sin+0x140>)
 80148f6:	4b36      	ldr	r3, [pc, #216]	; (80149d0 <__kernel_sin+0x144>)
 80148f8:	f7fa fdb8 	bl	800f46c <__aeabi_dadd>
 80148fc:	0022      	movs	r2, r4
 80148fe:	002b      	movs	r3, r5
 8014900:	f7fb fcda 	bl	80102b8 <__aeabi_dmul>
 8014904:	4a33      	ldr	r2, [pc, #204]	; (80149d4 <__kernel_sin+0x148>)
 8014906:	4b34      	ldr	r3, [pc, #208]	; (80149d8 <__kernel_sin+0x14c>)
 8014908:	f7fb ff48 	bl	801079c <__aeabi_dsub>
 801490c:	0022      	movs	r2, r4
 801490e:	002b      	movs	r3, r5
 8014910:	f7fb fcd2 	bl	80102b8 <__aeabi_dmul>
 8014914:	4b31      	ldr	r3, [pc, #196]	; (80149dc <__kernel_sin+0x150>)
 8014916:	4a32      	ldr	r2, [pc, #200]	; (80149e0 <__kernel_sin+0x154>)
 8014918:	f7fa fda8 	bl	800f46c <__aeabi_dadd>
 801491c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801491e:	9002      	str	r0, [sp, #8]
 8014920:	9103      	str	r1, [sp, #12]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d034      	beq.n	8014990 <__kernel_sin+0x104>
 8014926:	9800      	ldr	r0, [sp, #0]
 8014928:	9901      	ldr	r1, [sp, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	4b2d      	ldr	r3, [pc, #180]	; (80149e4 <__kernel_sin+0x158>)
 801492e:	f7fb fcc3 	bl	80102b8 <__aeabi_dmul>
 8014932:	9a02      	ldr	r2, [sp, #8]
 8014934:	9b03      	ldr	r3, [sp, #12]
 8014936:	9004      	str	r0, [sp, #16]
 8014938:	9105      	str	r1, [sp, #20]
 801493a:	0030      	movs	r0, r6
 801493c:	0039      	movs	r1, r7
 801493e:	f7fb fcbb 	bl	80102b8 <__aeabi_dmul>
 8014942:	0002      	movs	r2, r0
 8014944:	000b      	movs	r3, r1
 8014946:	9804      	ldr	r0, [sp, #16]
 8014948:	9905      	ldr	r1, [sp, #20]
 801494a:	f7fb ff27 	bl	801079c <__aeabi_dsub>
 801494e:	0022      	movs	r2, r4
 8014950:	002b      	movs	r3, r5
 8014952:	f7fb fcb1 	bl	80102b8 <__aeabi_dmul>
 8014956:	9a00      	ldr	r2, [sp, #0]
 8014958:	9b01      	ldr	r3, [sp, #4]
 801495a:	f7fb ff1f 	bl	801079c <__aeabi_dsub>
 801495e:	4a22      	ldr	r2, [pc, #136]	; (80149e8 <__kernel_sin+0x15c>)
 8014960:	0004      	movs	r4, r0
 8014962:	000d      	movs	r5, r1
 8014964:	4b21      	ldr	r3, [pc, #132]	; (80149ec <__kernel_sin+0x160>)
 8014966:	0030      	movs	r0, r6
 8014968:	0039      	movs	r1, r7
 801496a:	f7fb fca5 	bl	80102b8 <__aeabi_dmul>
 801496e:	0002      	movs	r2, r0
 8014970:	000b      	movs	r3, r1
 8014972:	0020      	movs	r0, r4
 8014974:	0029      	movs	r1, r5
 8014976:	f7fa fd79 	bl	800f46c <__aeabi_dadd>
 801497a:	0002      	movs	r2, r0
 801497c:	000b      	movs	r3, r1
 801497e:	4648      	mov	r0, r9
 8014980:	4641      	mov	r1, r8
 8014982:	f7fb ff0b 	bl	801079c <__aeabi_dsub>
 8014986:	b007      	add	sp, #28
 8014988:	bc0c      	pop	{r2, r3}
 801498a:	4690      	mov	r8, r2
 801498c:	4699      	mov	r9, r3
 801498e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014990:	0002      	movs	r2, r0
 8014992:	000b      	movs	r3, r1
 8014994:	0020      	movs	r0, r4
 8014996:	0029      	movs	r1, r5
 8014998:	f7fb fc8e 	bl	80102b8 <__aeabi_dmul>
 801499c:	4a12      	ldr	r2, [pc, #72]	; (80149e8 <__kernel_sin+0x15c>)
 801499e:	4b13      	ldr	r3, [pc, #76]	; (80149ec <__kernel_sin+0x160>)
 80149a0:	f7fb fefc 	bl	801079c <__aeabi_dsub>
 80149a4:	0032      	movs	r2, r6
 80149a6:	003b      	movs	r3, r7
 80149a8:	f7fb fc86 	bl	80102b8 <__aeabi_dmul>
 80149ac:	464a      	mov	r2, r9
 80149ae:	4643      	mov	r3, r8
 80149b0:	f7fa fd5c 	bl	800f46c <__aeabi_dadd>
 80149b4:	e7e7      	b.n	8014986 <__kernel_sin+0xfa>
 80149b6:	46c0      	nop			; (mov r8, r8)
 80149b8:	3e3fffff 	.word	0x3e3fffff
 80149bc:	5acfd57c 	.word	0x5acfd57c
 80149c0:	3de5d93a 	.word	0x3de5d93a
 80149c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80149c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80149cc:	57b1fe7d 	.word	0x57b1fe7d
 80149d0:	3ec71de3 	.word	0x3ec71de3
 80149d4:	19c161d5 	.word	0x19c161d5
 80149d8:	3f2a01a0 	.word	0x3f2a01a0
 80149dc:	3f811111 	.word	0x3f811111
 80149e0:	1110f8a6 	.word	0x1110f8a6
 80149e4:	3fe00000 	.word	0x3fe00000
 80149e8:	55555549 	.word	0x55555549
 80149ec:	3fc55555 	.word	0x3fc55555

080149f0 <fabs>:
 80149f0:	0049      	lsls	r1, r1, #1
 80149f2:	084b      	lsrs	r3, r1, #1
 80149f4:	0019      	movs	r1, r3
 80149f6:	4770      	bx	lr

080149f8 <floor>:
 80149f8:	4a47      	ldr	r2, [pc, #284]	; (8014b18 <floor+0x120>)
 80149fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149fc:	464f      	mov	r7, r9
 80149fe:	4691      	mov	r9, r2
 8014a00:	004b      	lsls	r3, r1, #1
 8014a02:	0d5b      	lsrs	r3, r3, #21
 8014a04:	4499      	add	r9, r3
 8014a06:	4646      	mov	r6, r8
 8014a08:	46d6      	mov	lr, sl
 8014a0a:	464a      	mov	r2, r9
 8014a0c:	b5c0      	push	{r6, r7, lr}
 8014a0e:	0005      	movs	r5, r0
 8014a10:	000c      	movs	r4, r1
 8014a12:	000e      	movs	r6, r1
 8014a14:	4688      	mov	r8, r1
 8014a16:	0007      	movs	r7, r0
 8014a18:	2a13      	cmp	r2, #19
 8014a1a:	dc27      	bgt.n	8014a6c <floor+0x74>
 8014a1c:	2a00      	cmp	r2, #0
 8014a1e:	db4b      	blt.n	8014ab8 <floor+0xc0>
 8014a20:	4b3e      	ldr	r3, [pc, #248]	; (8014b1c <floor+0x124>)
 8014a22:	4113      	asrs	r3, r2
 8014a24:	469a      	mov	sl, r3
 8014a26:	000b      	movs	r3, r1
 8014a28:	4652      	mov	r2, sl
 8014a2a:	4013      	ands	r3, r2
 8014a2c:	4303      	orrs	r3, r0
 8014a2e:	d018      	beq.n	8014a62 <floor+0x6a>
 8014a30:	4a3b      	ldr	r2, [pc, #236]	; (8014b20 <floor+0x128>)
 8014a32:	4b3c      	ldr	r3, [pc, #240]	; (8014b24 <floor+0x12c>)
 8014a34:	0028      	movs	r0, r5
 8014a36:	0021      	movs	r1, r4
 8014a38:	f7fa fd18 	bl	800f46c <__aeabi_dadd>
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	2300      	movs	r3, #0
 8014a40:	f7fa fa46 	bl	800eed0 <__aeabi_dcmpgt>
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d047      	beq.n	8014ad8 <floor+0xe0>
 8014a48:	2c00      	cmp	r4, #0
 8014a4a:	da04      	bge.n	8014a56 <floor+0x5e>
 8014a4c:	2380      	movs	r3, #128	; 0x80
 8014a4e:	464a      	mov	r2, r9
 8014a50:	035b      	lsls	r3, r3, #13
 8014a52:	4113      	asrs	r3, r2
 8014a54:	4498      	add	r8, r3
 8014a56:	4646      	mov	r6, r8
 8014a58:	4653      	mov	r3, sl
 8014a5a:	2700      	movs	r7, #0
 8014a5c:	439e      	bics	r6, r3
 8014a5e:	0038      	movs	r0, r7
 8014a60:	0031      	movs	r1, r6
 8014a62:	bc1c      	pop	{r2, r3, r4}
 8014a64:	4690      	mov	r8, r2
 8014a66:	4699      	mov	r9, r3
 8014a68:	46a2      	mov	sl, r4
 8014a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a6c:	2a33      	cmp	r2, #51	; 0x33
 8014a6e:	dd08      	ble.n	8014a82 <floor+0x8a>
 8014a70:	2380      	movs	r3, #128	; 0x80
 8014a72:	00db      	lsls	r3, r3, #3
 8014a74:	4599      	cmp	r9, r3
 8014a76:	d1f4      	bne.n	8014a62 <floor+0x6a>
 8014a78:	0002      	movs	r2, r0
 8014a7a:	000b      	movs	r3, r1
 8014a7c:	f7fa fcf6 	bl	800f46c <__aeabi_dadd>
 8014a80:	e7ef      	b.n	8014a62 <floor+0x6a>
 8014a82:	4a29      	ldr	r2, [pc, #164]	; (8014b28 <floor+0x130>)
 8014a84:	4694      	mov	ip, r2
 8014a86:	2201      	movs	r2, #1
 8014a88:	4463      	add	r3, ip
 8014a8a:	4252      	negs	r2, r2
 8014a8c:	40da      	lsrs	r2, r3
 8014a8e:	4692      	mov	sl, r2
 8014a90:	4202      	tst	r2, r0
 8014a92:	d0e6      	beq.n	8014a62 <floor+0x6a>
 8014a94:	4a22      	ldr	r2, [pc, #136]	; (8014b20 <floor+0x128>)
 8014a96:	4b23      	ldr	r3, [pc, #140]	; (8014b24 <floor+0x12c>)
 8014a98:	0028      	movs	r0, r5
 8014a9a:	0021      	movs	r1, r4
 8014a9c:	f7fa fce6 	bl	800f46c <__aeabi_dadd>
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	f7fa fa14 	bl	800eed0 <__aeabi_dcmpgt>
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d015      	beq.n	8014ad8 <floor+0xe0>
 8014aac:	2c00      	cmp	r4, #0
 8014aae:	db1e      	blt.n	8014aee <floor+0xf6>
 8014ab0:	4653      	mov	r3, sl
 8014ab2:	4646      	mov	r6, r8
 8014ab4:	439f      	bics	r7, r3
 8014ab6:	e00f      	b.n	8014ad8 <floor+0xe0>
 8014ab8:	4a19      	ldr	r2, [pc, #100]	; (8014b20 <floor+0x128>)
 8014aba:	4b1a      	ldr	r3, [pc, #104]	; (8014b24 <floor+0x12c>)
 8014abc:	0028      	movs	r0, r5
 8014abe:	0021      	movs	r1, r4
 8014ac0:	f7fa fcd4 	bl	800f46c <__aeabi_dadd>
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	f7fa fa02 	bl	800eed0 <__aeabi_dcmpgt>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d003      	beq.n	8014ad8 <floor+0xe0>
 8014ad0:	2c00      	cmp	r4, #0
 8014ad2:	db04      	blt.n	8014ade <floor+0xe6>
 8014ad4:	2700      	movs	r7, #0
 8014ad6:	2600      	movs	r6, #0
 8014ad8:	0038      	movs	r0, r7
 8014ada:	0031      	movs	r1, r6
 8014adc:	e7c1      	b.n	8014a62 <floor+0x6a>
 8014ade:	0064      	lsls	r4, r4, #1
 8014ae0:	0864      	lsrs	r4, r4, #1
 8014ae2:	4325      	orrs	r5, r4
 8014ae4:	2700      	movs	r7, #0
 8014ae6:	2d00      	cmp	r5, #0
 8014ae8:	d0f6      	beq.n	8014ad8 <floor+0xe0>
 8014aea:	4e10      	ldr	r6, [pc, #64]	; (8014b2c <floor+0x134>)
 8014aec:	e7f4      	b.n	8014ad8 <floor+0xe0>
 8014aee:	464b      	mov	r3, r9
 8014af0:	2b14      	cmp	r3, #20
 8014af2:	d00b      	beq.n	8014b0c <floor+0x114>
 8014af4:	2234      	movs	r2, #52	; 0x34
 8014af6:	1ad2      	subs	r2, r2, r3
 8014af8:	2301      	movs	r3, #1
 8014afa:	4093      	lsls	r3, r2
 8014afc:	195d      	adds	r5, r3, r5
 8014afe:	42bd      	cmp	r5, r7
 8014b00:	d208      	bcs.n	8014b14 <floor+0x11c>
 8014b02:	2301      	movs	r3, #1
 8014b04:	469c      	mov	ip, r3
 8014b06:	002f      	movs	r7, r5
 8014b08:	44e0      	add	r8, ip
 8014b0a:	e7d1      	b.n	8014ab0 <floor+0xb8>
 8014b0c:	3b13      	subs	r3, #19
 8014b0e:	469c      	mov	ip, r3
 8014b10:	44e0      	add	r8, ip
 8014b12:	e7cd      	b.n	8014ab0 <floor+0xb8>
 8014b14:	002f      	movs	r7, r5
 8014b16:	e7cb      	b.n	8014ab0 <floor+0xb8>
 8014b18:	fffffc01 	.word	0xfffffc01
 8014b1c:	000fffff 	.word	0x000fffff
 8014b20:	8800759c 	.word	0x8800759c
 8014b24:	7e37e43c 	.word	0x7e37e43c
 8014b28:	fffffbed 	.word	0xfffffbed
 8014b2c:	bff00000 	.word	0xbff00000

08014b30 <matherr>:
 8014b30:	2000      	movs	r0, #0
 8014b32:	4770      	bx	lr

08014b34 <nan>:
 8014b34:	2000      	movs	r0, #0
 8014b36:	4901      	ldr	r1, [pc, #4]	; (8014b3c <nan+0x8>)
 8014b38:	4770      	bx	lr
 8014b3a:	46c0      	nop			; (mov r8, r8)
 8014b3c:	7ff80000 	.word	0x7ff80000

08014b40 <scalbn>:
 8014b40:	004b      	lsls	r3, r1, #1
 8014b42:	b570      	push	{r4, r5, r6, lr}
 8014b44:	0d5b      	lsrs	r3, r3, #21
 8014b46:	0014      	movs	r4, r2
 8014b48:	000a      	movs	r2, r1
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d11a      	bne.n	8014b84 <scalbn+0x44>
 8014b4e:	004b      	lsls	r3, r1, #1
 8014b50:	085b      	lsrs	r3, r3, #1
 8014b52:	4303      	orrs	r3, r0
 8014b54:	d015      	beq.n	8014b82 <scalbn+0x42>
 8014b56:	4b23      	ldr	r3, [pc, #140]	; (8014be4 <scalbn+0xa4>)
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f7fb fbad 	bl	80102b8 <__aeabi_dmul>
 8014b5e:	4b22      	ldr	r3, [pc, #136]	; (8014be8 <scalbn+0xa8>)
 8014b60:	429c      	cmp	r4, r3
 8014b62:	db2d      	blt.n	8014bc0 <scalbn+0x80>
 8014b64:	000a      	movs	r2, r1
 8014b66:	004b      	lsls	r3, r1, #1
 8014b68:	0d5b      	lsrs	r3, r3, #21
 8014b6a:	3b36      	subs	r3, #54	; 0x36
 8014b6c:	4d1f      	ldr	r5, [pc, #124]	; (8014bec <scalbn+0xac>)
 8014b6e:	18e3      	adds	r3, r4, r3
 8014b70:	42ab      	cmp	r3, r5
 8014b72:	dc2a      	bgt.n	8014bca <scalbn+0x8a>
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	dd0d      	ble.n	8014b94 <scalbn+0x54>
 8014b78:	4c1d      	ldr	r4, [pc, #116]	; (8014bf0 <scalbn+0xb0>)
 8014b7a:	051b      	lsls	r3, r3, #20
 8014b7c:	4022      	ands	r2, r4
 8014b7e:	431a      	orrs	r2, r3
 8014b80:	0011      	movs	r1, r2
 8014b82:	bd70      	pop	{r4, r5, r6, pc}
 8014b84:	4d1b      	ldr	r5, [pc, #108]	; (8014bf4 <scalbn+0xb4>)
 8014b86:	42ab      	cmp	r3, r5
 8014b88:	d1f0      	bne.n	8014b6c <scalbn+0x2c>
 8014b8a:	0002      	movs	r2, r0
 8014b8c:	000b      	movs	r3, r1
 8014b8e:	f7fa fc6d 	bl	800f46c <__aeabi_dadd>
 8014b92:	e7f6      	b.n	8014b82 <scalbn+0x42>
 8014b94:	001d      	movs	r5, r3
 8014b96:	3535      	adds	r5, #53	; 0x35
 8014b98:	da19      	bge.n	8014bce <scalbn+0x8e>
 8014b9a:	4b17      	ldr	r3, [pc, #92]	; (8014bf8 <scalbn+0xb8>)
 8014b9c:	0002      	movs	r2, r0
 8014b9e:	429c      	cmp	r4, r3
 8014ba0:	dd09      	ble.n	8014bb6 <scalbn+0x76>
 8014ba2:	000b      	movs	r3, r1
 8014ba4:	4815      	ldr	r0, [pc, #84]	; (8014bfc <scalbn+0xbc>)
 8014ba6:	4916      	ldr	r1, [pc, #88]	; (8014c00 <scalbn+0xc0>)
 8014ba8:	f000 f982 	bl	8014eb0 <copysign>
 8014bac:	4a13      	ldr	r2, [pc, #76]	; (8014bfc <scalbn+0xbc>)
 8014bae:	4b14      	ldr	r3, [pc, #80]	; (8014c00 <scalbn+0xc0>)
 8014bb0:	f7fb fb82 	bl	80102b8 <__aeabi_dmul>
 8014bb4:	e7e5      	b.n	8014b82 <scalbn+0x42>
 8014bb6:	000b      	movs	r3, r1
 8014bb8:	4812      	ldr	r0, [pc, #72]	; (8014c04 <scalbn+0xc4>)
 8014bba:	4913      	ldr	r1, [pc, #76]	; (8014c08 <scalbn+0xc8>)
 8014bbc:	f000 f978 	bl	8014eb0 <copysign>
 8014bc0:	4a10      	ldr	r2, [pc, #64]	; (8014c04 <scalbn+0xc4>)
 8014bc2:	4b11      	ldr	r3, [pc, #68]	; (8014c08 <scalbn+0xc8>)
 8014bc4:	f7fb fb78 	bl	80102b8 <__aeabi_dmul>
 8014bc8:	e7db      	b.n	8014b82 <scalbn+0x42>
 8014bca:	0002      	movs	r2, r0
 8014bcc:	e7e9      	b.n	8014ba2 <scalbn+0x62>
 8014bce:	4c08      	ldr	r4, [pc, #32]	; (8014bf0 <scalbn+0xb0>)
 8014bd0:	3336      	adds	r3, #54	; 0x36
 8014bd2:	4022      	ands	r2, r4
 8014bd4:	051b      	lsls	r3, r3, #20
 8014bd6:	4313      	orrs	r3, r2
 8014bd8:	0019      	movs	r1, r3
 8014bda:	2200      	movs	r2, #0
 8014bdc:	4b0b      	ldr	r3, [pc, #44]	; (8014c0c <scalbn+0xcc>)
 8014bde:	f7fb fb6b 	bl	80102b8 <__aeabi_dmul>
 8014be2:	e7ce      	b.n	8014b82 <scalbn+0x42>
 8014be4:	43500000 	.word	0x43500000
 8014be8:	ffff3cb0 	.word	0xffff3cb0
 8014bec:	000007fe 	.word	0x000007fe
 8014bf0:	800fffff 	.word	0x800fffff
 8014bf4:	000007ff 	.word	0x000007ff
 8014bf8:	0000c350 	.word	0x0000c350
 8014bfc:	8800759c 	.word	0x8800759c
 8014c00:	7e37e43c 	.word	0x7e37e43c
 8014c04:	c2f8f359 	.word	0xc2f8f359
 8014c08:	01a56e1f 	.word	0x01a56e1f
 8014c0c:	3c900000 	.word	0x3c900000

08014c10 <finitef>:
 8014c10:	0043      	lsls	r3, r0, #1
 8014c12:	2000      	movs	r0, #0
 8014c14:	4a02      	ldr	r2, [pc, #8]	; (8014c20 <finitef+0x10>)
 8014c16:	085b      	lsrs	r3, r3, #1
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	4140      	adcs	r0, r0
 8014c1c:	4770      	bx	lr
 8014c1e:	46c0      	nop			; (mov r8, r8)
 8014c20:	7f7fffff 	.word	0x7f7fffff

08014c24 <__ieee754_logf>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	46de      	mov	lr, fp
 8014c28:	4657      	mov	r7, sl
 8014c2a:	464e      	mov	r6, r9
 8014c2c:	4645      	mov	r5, r8
 8014c2e:	0003      	movs	r3, r0
 8014c30:	b5e0      	push	{r5, r6, r7, lr}
 8014c32:	0042      	lsls	r2, r0, #1
 8014c34:	d044      	beq.n	8014cc0 <__ieee754_logf+0x9c>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	db4d      	blt.n	8014cd6 <__ieee754_logf+0xb2>
 8014c3a:	4a8e      	ldr	r2, [pc, #568]	; (8014e74 <__ieee754_logf+0x250>)
 8014c3c:	4290      	cmp	r0, r2
 8014c3e:	dc51      	bgt.n	8014ce4 <__ieee754_logf+0xc0>
 8014c40:	4a8d      	ldr	r2, [pc, #564]	; (8014e78 <__ieee754_logf+0x254>)
 8014c42:	2100      	movs	r1, #0
 8014c44:	4290      	cmp	r0, r2
 8014c46:	dc06      	bgt.n	8014c56 <__ieee754_logf+0x32>
 8014c48:	2198      	movs	r1, #152	; 0x98
 8014c4a:	05c9      	lsls	r1, r1, #23
 8014c4c:	f7f9 fc6e 	bl	800e52c <__aeabi_fmul>
 8014c50:	2119      	movs	r1, #25
 8014c52:	0003      	movs	r3, r0
 8014c54:	4249      	negs	r1, r1
 8014c56:	15da      	asrs	r2, r3, #23
 8014c58:	025b      	lsls	r3, r3, #9
 8014c5a:	0a5c      	lsrs	r4, r3, #9
 8014c5c:	4b87      	ldr	r3, [pc, #540]	; (8014e7c <__ieee754_logf+0x258>)
 8014c5e:	3a7f      	subs	r2, #127	; 0x7f
 8014c60:	18e0      	adds	r0, r4, r3
 8014c62:	2380      	movs	r3, #128	; 0x80
 8014c64:	041b      	lsls	r3, r3, #16
 8014c66:	4003      	ands	r3, r0
 8014c68:	20fe      	movs	r0, #254	; 0xfe
 8014c6a:	1852      	adds	r2, r2, r1
 8014c6c:	21fe      	movs	r1, #254	; 0xfe
 8014c6e:	0580      	lsls	r0, r0, #22
 8014c70:	4058      	eors	r0, r3
 8014c72:	15dd      	asrs	r5, r3, #23
 8014c74:	4320      	orrs	r0, r4
 8014c76:	0589      	lsls	r1, r1, #22
 8014c78:	18ad      	adds	r5, r5, r2
 8014c7a:	f7f9 fd89 	bl	800e790 <__aeabi_fsub>
 8014c7e:	0023      	movs	r3, r4
 8014c80:	330f      	adds	r3, #15
 8014c82:	025b      	lsls	r3, r3, #9
 8014c84:	1c06      	adds	r6, r0, #0
 8014c86:	0a5b      	lsrs	r3, r3, #9
 8014c88:	2b0f      	cmp	r3, #15
 8014c8a:	dc2f      	bgt.n	8014cec <__ieee754_logf+0xc8>
 8014c8c:	2100      	movs	r1, #0
 8014c8e:	f7fa f93f 	bl	800ef10 <__aeabi_fcmpeq>
 8014c92:	2800      	cmp	r0, #0
 8014c94:	d100      	bne.n	8014c98 <__ieee754_logf+0x74>
 8014c96:	e09e      	b.n	8014dd6 <__ieee754_logf+0x1b2>
 8014c98:	2000      	movs	r0, #0
 8014c9a:	2d00      	cmp	r5, #0
 8014c9c:	d015      	beq.n	8014cca <__ieee754_logf+0xa6>
 8014c9e:	0028      	movs	r0, r5
 8014ca0:	f7fa fb5a 	bl	800f358 <__aeabi_i2f>
 8014ca4:	4976      	ldr	r1, [pc, #472]	; (8014e80 <__ieee754_logf+0x25c>)
 8014ca6:	1c04      	adds	r4, r0, #0
 8014ca8:	f7f9 fc40 	bl	800e52c <__aeabi_fmul>
 8014cac:	4975      	ldr	r1, [pc, #468]	; (8014e84 <__ieee754_logf+0x260>)
 8014cae:	1c05      	adds	r5, r0, #0
 8014cb0:	1c20      	adds	r0, r4, #0
 8014cb2:	f7f9 fc3b 	bl	800e52c <__aeabi_fmul>
 8014cb6:	1c01      	adds	r1, r0, #0
 8014cb8:	1c28      	adds	r0, r5, #0
 8014cba:	f7f9 f98b 	bl	800dfd4 <__aeabi_fadd>
 8014cbe:	e004      	b.n	8014cca <__ieee754_logf+0xa6>
 8014cc0:	20cc      	movs	r0, #204	; 0xcc
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	0600      	lsls	r0, r0, #24
 8014cc6:	f7f9 fb1f 	bl	800e308 <__aeabi_fdiv>
 8014cca:	bc3c      	pop	{r2, r3, r4, r5}
 8014ccc:	4690      	mov	r8, r2
 8014cce:	4699      	mov	r9, r3
 8014cd0:	46a2      	mov	sl, r4
 8014cd2:	46ab      	mov	fp, r5
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cd6:	1c01      	adds	r1, r0, #0
 8014cd8:	f7f9 fd5a 	bl	800e790 <__aeabi_fsub>
 8014cdc:	2100      	movs	r1, #0
 8014cde:	f7f9 fb13 	bl	800e308 <__aeabi_fdiv>
 8014ce2:	e7f2      	b.n	8014cca <__ieee754_logf+0xa6>
 8014ce4:	1c01      	adds	r1, r0, #0
 8014ce6:	f7f9 f975 	bl	800dfd4 <__aeabi_fadd>
 8014cea:	e7ee      	b.n	8014cca <__ieee754_logf+0xa6>
 8014cec:	2180      	movs	r1, #128	; 0x80
 8014cee:	05c9      	lsls	r1, r1, #23
 8014cf0:	f7f9 f970 	bl	800dfd4 <__aeabi_fadd>
 8014cf4:	1c01      	adds	r1, r0, #0
 8014cf6:	1c30      	adds	r0, r6, #0
 8014cf8:	f7f9 fb06 	bl	800e308 <__aeabi_fdiv>
 8014cfc:	4680      	mov	r8, r0
 8014cfe:	0028      	movs	r0, r5
 8014d00:	f7fa fb2a 	bl	800f358 <__aeabi_i2f>
 8014d04:	4641      	mov	r1, r8
 8014d06:	4681      	mov	r9, r0
 8014d08:	4640      	mov	r0, r8
 8014d0a:	f7f9 fc0f 	bl	800e52c <__aeabi_fmul>
 8014d0e:	4b5e      	ldr	r3, [pc, #376]	; (8014e88 <__ieee754_logf+0x264>)
 8014d10:	1c01      	adds	r1, r0, #0
 8014d12:	469a      	mov	sl, r3
 8014d14:	4683      	mov	fp, r0
 8014d16:	f7f9 fc09 	bl	800e52c <__aeabi_fmul>
 8014d1a:	495c      	ldr	r1, [pc, #368]	; (8014e8c <__ieee754_logf+0x268>)
 8014d1c:	1c07      	adds	r7, r0, #0
 8014d1e:	f7f9 fc05 	bl	800e52c <__aeabi_fmul>
 8014d22:	495b      	ldr	r1, [pc, #364]	; (8014e90 <__ieee754_logf+0x26c>)
 8014d24:	f7f9 f956 	bl	800dfd4 <__aeabi_fadd>
 8014d28:	1c39      	adds	r1, r7, #0
 8014d2a:	f7f9 fbff 	bl	800e52c <__aeabi_fmul>
 8014d2e:	4959      	ldr	r1, [pc, #356]	; (8014e94 <__ieee754_logf+0x270>)
 8014d30:	f7f9 f950 	bl	800dfd4 <__aeabi_fadd>
 8014d34:	1c39      	adds	r1, r7, #0
 8014d36:	f7f9 fbf9 	bl	800e52c <__aeabi_fmul>
 8014d3a:	4957      	ldr	r1, [pc, #348]	; (8014e98 <__ieee754_logf+0x274>)
 8014d3c:	f7f9 f94a 	bl	800dfd4 <__aeabi_fadd>
 8014d40:	4659      	mov	r1, fp
 8014d42:	f7f9 fbf3 	bl	800e52c <__aeabi_fmul>
 8014d46:	4955      	ldr	r1, [pc, #340]	; (8014e9c <__ieee754_logf+0x278>)
 8014d48:	4683      	mov	fp, r0
 8014d4a:	1c38      	adds	r0, r7, #0
 8014d4c:	f7f9 fbee 	bl	800e52c <__aeabi_fmul>
 8014d50:	4953      	ldr	r1, [pc, #332]	; (8014ea0 <__ieee754_logf+0x27c>)
 8014d52:	f7f9 f93f 	bl	800dfd4 <__aeabi_fadd>
 8014d56:	1c39      	adds	r1, r7, #0
 8014d58:	f7f9 fbe8 	bl	800e52c <__aeabi_fmul>
 8014d5c:	4951      	ldr	r1, [pc, #324]	; (8014ea4 <__ieee754_logf+0x280>)
 8014d5e:	f7f9 f939 	bl	800dfd4 <__aeabi_fadd>
 8014d62:	1c39      	adds	r1, r7, #0
 8014d64:	f7f9 fbe2 	bl	800e52c <__aeabi_fmul>
 8014d68:	1c01      	adds	r1, r0, #0
 8014d6a:	4658      	mov	r0, fp
 8014d6c:	f7f9 f932 	bl	800dfd4 <__aeabi_fadd>
 8014d70:	4b4d      	ldr	r3, [pc, #308]	; (8014ea8 <__ieee754_logf+0x284>)
 8014d72:	44a2      	add	sl, r4
 8014d74:	1b1c      	subs	r4, r3, r4
 8014d76:	4653      	mov	r3, sl
 8014d78:	1c07      	adds	r7, r0, #0
 8014d7a:	431c      	orrs	r4, r3
 8014d7c:	2c00      	cmp	r4, #0
 8014d7e:	dd65      	ble.n	8014e4c <__ieee754_logf+0x228>
 8014d80:	21fc      	movs	r1, #252	; 0xfc
 8014d82:	1c30      	adds	r0, r6, #0
 8014d84:	0589      	lsls	r1, r1, #22
 8014d86:	f7f9 fbd1 	bl	800e52c <__aeabi_fmul>
 8014d8a:	1c31      	adds	r1, r6, #0
 8014d8c:	f7f9 fbce 	bl	800e52c <__aeabi_fmul>
 8014d90:	1c01      	adds	r1, r0, #0
 8014d92:	1c04      	adds	r4, r0, #0
 8014d94:	1c38      	adds	r0, r7, #0
 8014d96:	f7f9 f91d 	bl	800dfd4 <__aeabi_fadd>
 8014d9a:	4641      	mov	r1, r8
 8014d9c:	f7f9 fbc6 	bl	800e52c <__aeabi_fmul>
 8014da0:	1c07      	adds	r7, r0, #0
 8014da2:	2d00      	cmp	r5, #0
 8014da4:	d044      	beq.n	8014e30 <__ieee754_logf+0x20c>
 8014da6:	4936      	ldr	r1, [pc, #216]	; (8014e80 <__ieee754_logf+0x25c>)
 8014da8:	4648      	mov	r0, r9
 8014daa:	f7f9 fbbf 	bl	800e52c <__aeabi_fmul>
 8014dae:	4935      	ldr	r1, [pc, #212]	; (8014e84 <__ieee754_logf+0x260>)
 8014db0:	1c05      	adds	r5, r0, #0
 8014db2:	4648      	mov	r0, r9
 8014db4:	f7f9 fbba 	bl	800e52c <__aeabi_fmul>
 8014db8:	1c39      	adds	r1, r7, #0
 8014dba:	f7f9 f90b 	bl	800dfd4 <__aeabi_fadd>
 8014dbe:	1c01      	adds	r1, r0, #0
 8014dc0:	1c20      	adds	r0, r4, #0
 8014dc2:	f7f9 fce5 	bl	800e790 <__aeabi_fsub>
 8014dc6:	1c31      	adds	r1, r6, #0
 8014dc8:	f7f9 fce2 	bl	800e790 <__aeabi_fsub>
 8014dcc:	1c01      	adds	r1, r0, #0
 8014dce:	1c28      	adds	r0, r5, #0
 8014dd0:	f7f9 fcde 	bl	800e790 <__aeabi_fsub>
 8014dd4:	e779      	b.n	8014cca <__ieee754_logf+0xa6>
 8014dd6:	4935      	ldr	r1, [pc, #212]	; (8014eac <__ieee754_logf+0x288>)
 8014dd8:	1c30      	adds	r0, r6, #0
 8014dda:	f7f9 fba7 	bl	800e52c <__aeabi_fmul>
 8014dde:	1c01      	adds	r1, r0, #0
 8014de0:	20fc      	movs	r0, #252	; 0xfc
 8014de2:	0580      	lsls	r0, r0, #22
 8014de4:	f7f9 fcd4 	bl	800e790 <__aeabi_fsub>
 8014de8:	1c31      	adds	r1, r6, #0
 8014dea:	1c04      	adds	r4, r0, #0
 8014dec:	1c30      	adds	r0, r6, #0
 8014dee:	f7f9 fb9d 	bl	800e52c <__aeabi_fmul>
 8014df2:	1c01      	adds	r1, r0, #0
 8014df4:	1c20      	adds	r0, r4, #0
 8014df6:	f7f9 fb99 	bl	800e52c <__aeabi_fmul>
 8014dfa:	1c04      	adds	r4, r0, #0
 8014dfc:	2d00      	cmp	r5, #0
 8014dfe:	d020      	beq.n	8014e42 <__ieee754_logf+0x21e>
 8014e00:	0028      	movs	r0, r5
 8014e02:	f7fa faa9 	bl	800f358 <__aeabi_i2f>
 8014e06:	491e      	ldr	r1, [pc, #120]	; (8014e80 <__ieee754_logf+0x25c>)
 8014e08:	1c05      	adds	r5, r0, #0
 8014e0a:	f7f9 fb8f 	bl	800e52c <__aeabi_fmul>
 8014e0e:	491d      	ldr	r1, [pc, #116]	; (8014e84 <__ieee754_logf+0x260>)
 8014e10:	1c07      	adds	r7, r0, #0
 8014e12:	1c28      	adds	r0, r5, #0
 8014e14:	f7f9 fb8a 	bl	800e52c <__aeabi_fmul>
 8014e18:	1c01      	adds	r1, r0, #0
 8014e1a:	1c20      	adds	r0, r4, #0
 8014e1c:	f7f9 fcb8 	bl	800e790 <__aeabi_fsub>
 8014e20:	1c31      	adds	r1, r6, #0
 8014e22:	f7f9 fcb5 	bl	800e790 <__aeabi_fsub>
 8014e26:	1c01      	adds	r1, r0, #0
 8014e28:	1c38      	adds	r0, r7, #0
 8014e2a:	f7f9 fcb1 	bl	800e790 <__aeabi_fsub>
 8014e2e:	e74c      	b.n	8014cca <__ieee754_logf+0xa6>
 8014e30:	1c01      	adds	r1, r0, #0
 8014e32:	1c20      	adds	r0, r4, #0
 8014e34:	f7f9 fcac 	bl	800e790 <__aeabi_fsub>
 8014e38:	1c01      	adds	r1, r0, #0
 8014e3a:	1c30      	adds	r0, r6, #0
 8014e3c:	f7f9 fca8 	bl	800e790 <__aeabi_fsub>
 8014e40:	e743      	b.n	8014cca <__ieee754_logf+0xa6>
 8014e42:	1c21      	adds	r1, r4, #0
 8014e44:	1c30      	adds	r0, r6, #0
 8014e46:	f7f9 fca3 	bl	800e790 <__aeabi_fsub>
 8014e4a:	e73e      	b.n	8014cca <__ieee754_logf+0xa6>
 8014e4c:	1c01      	adds	r1, r0, #0
 8014e4e:	1c30      	adds	r0, r6, #0
 8014e50:	f7f9 fc9e 	bl	800e790 <__aeabi_fsub>
 8014e54:	4641      	mov	r1, r8
 8014e56:	f7f9 fb69 	bl	800e52c <__aeabi_fmul>
 8014e5a:	1c04      	adds	r4, r0, #0
 8014e5c:	2d00      	cmp	r5, #0
 8014e5e:	d0f0      	beq.n	8014e42 <__ieee754_logf+0x21e>
 8014e60:	4907      	ldr	r1, [pc, #28]	; (8014e80 <__ieee754_logf+0x25c>)
 8014e62:	4648      	mov	r0, r9
 8014e64:	f7f9 fb62 	bl	800e52c <__aeabi_fmul>
 8014e68:	4906      	ldr	r1, [pc, #24]	; (8014e84 <__ieee754_logf+0x260>)
 8014e6a:	1c05      	adds	r5, r0, #0
 8014e6c:	4648      	mov	r0, r9
 8014e6e:	f7f9 fb5d 	bl	800e52c <__aeabi_fmul>
 8014e72:	e7a4      	b.n	8014dbe <__ieee754_logf+0x19a>
 8014e74:	7f7fffff 	.word	0x7f7fffff
 8014e78:	007fffff 	.word	0x007fffff
 8014e7c:	004afb20 	.word	0x004afb20
 8014e80:	3f317180 	.word	0x3f317180
 8014e84:	3717f7d1 	.word	0x3717f7d1
 8014e88:	ffcf5c30 	.word	0xffcf5c30
 8014e8c:	3e178897 	.word	0x3e178897
 8014e90:	3e3a3325 	.word	0x3e3a3325
 8014e94:	3e924925 	.word	0x3e924925
 8014e98:	3f2aaaab 	.word	0x3f2aaaab
 8014e9c:	3e1cd04f 	.word	0x3e1cd04f
 8014ea0:	3e638e29 	.word	0x3e638e29
 8014ea4:	3ecccccd 	.word	0x3ecccccd
 8014ea8:	0035c288 	.word	0x0035c288
 8014eac:	3eaaaaab 	.word	0x3eaaaaab

08014eb0 <copysign>:
 8014eb0:	b530      	push	{r4, r5, lr}
 8014eb2:	004a      	lsls	r2, r1, #1
 8014eb4:	0fdb      	lsrs	r3, r3, #31
 8014eb6:	07db      	lsls	r3, r3, #31
 8014eb8:	0852      	lsrs	r2, r2, #1
 8014eba:	431a      	orrs	r2, r3
 8014ebc:	0011      	movs	r1, r2
 8014ebe:	bd30      	pop	{r4, r5, pc}

08014ec0 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 8014ec0:	b510      	push	{r4, lr}
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 8014ec2:	000c      	movs	r4, r1
 8014ec4:	34c8      	adds	r4, #200	; 0xc8
 8014ec6:	8823      	ldrh	r3, [r4, #0]
 8014ec8:	1c5a      	adds	r2, r3, #1
 8014eca:	b292      	uxth	r2, r2
 8014ecc:	8022      	strh	r2, [r4, #0]
 8014ece:	54c8      	strb	r0, [r1, r3]
	if (buf->position == BUF_SIZE)
 8014ed0:	2ac8      	cmp	r2, #200	; 0xc8
 8014ed2:	d104      	bne.n	8014ede <out_func+0x1e>
	{
		_write(0, buf->buffer, BUF_SIZE);
 8014ed4:	2000      	movs	r0, #0
 8014ed6:	f7fd fd45 	bl	8012964 <_write>
		buf->position = 0;
 8014eda:	2300      	movs	r3, #0
 8014edc:	8023      	strh	r3, [r4, #0]
	}
}
 8014ede:	bd10      	pop	{r4, pc}

08014ee0 <__wrap_puts>:


int __wrap_puts(const char *str)
{
 8014ee0:	b510      	push	{r4, lr}
 8014ee2:	0004      	movs	r4, r0
	size_t len = strlen(str);
 8014ee4:	f7fc f942 	bl	801116c <strlen>

	_write(0, str, len);
 8014ee8:	0021      	movs	r1, r4
	size_t len = strlen(str);
 8014eea:	0002      	movs	r2, r0
	_write(0, str, len);
 8014eec:	2000      	movs	r0, #0
 8014eee:	f7fd fd39 	bl	8012964 <_write>
	_write(0, "\n", 1);
 8014ef2:	2201      	movs	r2, #1
 8014ef4:	4902      	ldr	r1, [pc, #8]	; (8014f00 <__wrap_puts+0x20>)
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	f7fd fd34 	bl	8012964 <_write>
	return 0;
}
 8014efc:	2000      	movs	r0, #0
 8014efe:	bd10      	pop	{r4, pc}
 8014f00:	0801c143 	.word	0x0801c143

08014f04 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 8014f04:	b40f      	push	{r0, r1, r2, r3}
 8014f06:	b530      	push	{r4, r5, lr}
 8014f08:	b0b5      	sub	sp, #212	; 0xd4
 8014f0a:	ac38      	add	r4, sp, #224	; 0xe0
 8014f0c:	cc20      	ldmia	r4!, {r5}
	print_buffer_t buf = {
 8014f0e:	22ca      	movs	r2, #202	; 0xca
 8014f10:	2100      	movs	r1, #0
 8014f12:	a801      	add	r0, sp, #4
 8014f14:	f7fd ffa2 	bl	8012e5c <memset>
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
	int ret = fctvprintf(out_func, &buf, format, va);
 8014f18:	0023      	movs	r3, r4
 8014f1a:	002a      	movs	r2, r5
 8014f1c:	a901      	add	r1, sp, #4
 8014f1e:	4809      	ldr	r0, [pc, #36]	; (8014f44 <__wrap_printf+0x40>)
	va_start(va, format);
 8014f20:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8014f22:	f000 fb9b 	bl	801565c <fctvprintf>
	if (buf.position != 0)
 8014f26:	ab33      	add	r3, sp, #204	; 0xcc
 8014f28:	881a      	ldrh	r2, [r3, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8014f2a:	0004      	movs	r4, r0
	if (buf.position != 0)
 8014f2c:	2a00      	cmp	r2, #0
 8014f2e:	d003      	beq.n	8014f38 <__wrap_printf+0x34>
	{
		_write(0, buf.buffer, buf.position);
 8014f30:	a901      	add	r1, sp, #4
 8014f32:	2000      	movs	r0, #0
 8014f34:	f7fd fd16 	bl	8012964 <_write>
	}

	va_end(va);

	return ret;
}
 8014f38:	0020      	movs	r0, r4
 8014f3a:	b035      	add	sp, #212	; 0xd4
 8014f3c:	bc30      	pop	{r4, r5}
 8014f3e:	bc08      	pop	{r3}
 8014f40:	b004      	add	sp, #16
 8014f42:	4718      	bx	r3
 8014f44:	08014ec1 	.word	0x08014ec1

08014f48 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8014f48:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8014f4a:	f000 fb7b 	bl	8015644 <vsnprintf_>
}
 8014f4e:	bd10      	pop	{r4, pc}

08014f50 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8014f50:	429a      	cmp	r2, r3
 8014f52:	d200      	bcs.n	8014f56 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8014f54:	5488      	strb	r0, [r1, r2]
  }
}
 8014f56:	4770      	bx	lr

08014f58 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8014f58:	4770      	bx	lr

08014f5a <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8014f5a:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d002      	beq.n	8014f66 <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8014f60:	680b      	ldr	r3, [r1, #0]
 8014f62:	6849      	ldr	r1, [r1, #4]
 8014f64:	4798      	blx	r3
  }
}
 8014f66:	bd10      	pop	{r4, pc}

08014f68 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f6a:	b087      	sub	sp, #28
 8014f6c:	9103      	str	r1, [sp, #12]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8014f6e:	2102      	movs	r1, #2
{
 8014f70:	9304      	str	r3, [sp, #16]
 8014f72:	ab0e      	add	r3, sp, #56	; 0x38
 8014f74:	781f      	ldrb	r7, [r3, #0]
 8014f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f78:	9002      	str	r0, [sp, #8]
  if (!(flags & FLAGS_LEFT)) {
 8014f7a:	4019      	ands	r1, r3
{
 8014f7c:	9201      	str	r2, [sp, #4]
 8014f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014f82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014f84:	9810      	ldr	r0, [sp, #64]	; 0x40
  if (!(flags & FLAGS_LEFT)) {
 8014f86:	9105      	str	r1, [sp, #20]
 8014f88:	d11f      	bne.n	8014fca <_ntoa_format+0x62>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014f8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014f8c:	3101      	adds	r1, #1
 8014f8e:	4019      	ands	r1, r3
 8014f90:	2e00      	cmp	r6, #0
 8014f92:	d009      	beq.n	8014fa8 <_ntoa_format+0x40>
 8014f94:	2900      	cmp	r1, #0
 8014f96:	d007      	beq.n	8014fa8 <_ntoa_format+0x40>
 8014f98:	2f00      	cmp	r7, #0
 8014f9a:	d102      	bne.n	8014fa2 <_ntoa_format+0x3a>
 8014f9c:	260c      	movs	r6, #12
 8014f9e:	4233      	tst	r3, r6
 8014fa0:	d002      	beq.n	8014fa8 <_ntoa_format+0x40>
      width--;
 8014fa2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014fa4:	3e01      	subs	r6, #1
 8014fa6:	9611      	str	r6, [sp, #68]	; 0x44
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8014fa8:	2630      	movs	r6, #48	; 0x30
 8014faa:	e003      	b.n	8014fb4 <_ntoa_format+0x4c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014fac:	2c20      	cmp	r4, #32
 8014fae:	d003      	beq.n	8014fb8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8014fb0:	552e      	strb	r6, [r5, r4]
 8014fb2:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014fb4:	42a0      	cmp	r0, r4
 8014fb6:	d8f9      	bhi.n	8014fac <_ntoa_format+0x44>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8014fb8:	2630      	movs	r6, #48	; 0x30
 8014fba:	46b4      	mov	ip, r6
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014fbc:	2900      	cmp	r1, #0
 8014fbe:	d004      	beq.n	8014fca <_ntoa_format+0x62>
 8014fc0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014fc2:	42a6      	cmp	r6, r4
 8014fc4:	d901      	bls.n	8014fca <_ntoa_format+0x62>
 8014fc6:	2c20      	cmp	r4, #32
 8014fc8:	d114      	bne.n	8014ff4 <_ntoa_format+0x8c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8014fca:	06d9      	lsls	r1, r3, #27
 8014fcc:	d536      	bpl.n	801503c <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8014fce:	0559      	lsls	r1, r3, #21
 8014fd0:	d415      	bmi.n	8014ffe <_ntoa_format+0x96>
 8014fd2:	2c00      	cmp	r4, #0
 8014fd4:	d013      	beq.n	8014ffe <_ntoa_format+0x96>
 8014fd6:	4284      	cmp	r4, r0
 8014fd8:	d002      	beq.n	8014fe0 <_ntoa_format+0x78>
 8014fda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014fdc:	428c      	cmp	r4, r1
 8014fde:	d10e      	bne.n	8014ffe <_ntoa_format+0x96>
      len--;
 8014fe0:	1e61      	subs	r1, r4, #1
      if (len && (base == 16U)) {
 8014fe2:	2900      	cmp	r1, #0
 8014fe4:	d00a      	beq.n	8014ffc <_ntoa_format+0x94>
        len--;
 8014fe6:	3c02      	subs	r4, #2
      if (len && (base == 16U)) {
 8014fe8:	2a10      	cmp	r2, #16
 8014fea:	d00a      	beq.n	8015002 <_ntoa_format+0x9a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014fec:	000c      	movs	r4, r1
 8014fee:	2a02      	cmp	r2, #2
 8014ff0:	d11f      	bne.n	8015032 <_ntoa_format+0xca>
 8014ff2:	e032      	b.n	801505a <_ntoa_format+0xf2>
      buf[len++] = '0';
 8014ff4:	4666      	mov	r6, ip
 8014ff6:	552e      	strb	r6, [r5, r4]
 8014ff8:	3401      	adds	r4, #1
 8014ffa:	e7df      	b.n	8014fbc <_ntoa_format+0x54>
 8014ffc:	000c      	movs	r4, r1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014ffe:	2a10      	cmp	r2, #16
 8015000:	d127      	bne.n	8015052 <_ntoa_format+0xea>
 8015002:	069a      	lsls	r2, r3, #26
 8015004:	d410      	bmi.n	8015028 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 8015006:	2278      	movs	r2, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015008:	2c1f      	cmp	r4, #31
 801500a:	d910      	bls.n	801502e <_ntoa_format+0xc6>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 801500c:	9e01      	ldr	r6, [sp, #4]
 801500e:	079b      	lsls	r3, r3, #30
 8015010:	d031      	beq.n	8015076 <_ntoa_format+0x10e>
      out(' ', buffer, idx++, maxlen);
 8015012:	9400      	str	r4, [sp, #0]
 8015014:	9b00      	ldr	r3, [sp, #0]
 8015016:	19a0      	adds	r0, r4, r6
 8015018:	1ac2      	subs	r2, r0, r3
  while (len) {
 801501a:	2b00      	cmp	r3, #0
 801501c:	d132      	bne.n	8015084 <_ntoa_format+0x11c>
  if (flags & FLAGS_LEFT) {
 801501e:	9b05      	ldr	r3, [sp, #20]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d140      	bne.n	80150a6 <_ntoa_format+0x13e>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8015024:	b007      	add	sp, #28
 8015026:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8015028:	2258      	movs	r2, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801502a:	2c1f      	cmp	r4, #31
 801502c:	d8ee      	bhi.n	801500c <_ntoa_format+0xa4>
      buf[len++] = 'b';
 801502e:	552a      	strb	r2, [r5, r4]
 8015030:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015032:	2c1f      	cmp	r4, #31
 8015034:	d8ea      	bhi.n	801500c <_ntoa_format+0xa4>
      buf[len++] = '0';
 8015036:	2230      	movs	r2, #48	; 0x30
 8015038:	552a      	strb	r2, [r5, r4]
 801503a:	3401      	adds	r4, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801503c:	2c20      	cmp	r4, #32
 801503e:	d0e5      	beq.n	801500c <_ntoa_format+0xa4>
      buf[len++] = '-';
 8015040:	222d      	movs	r2, #45	; 0x2d
    if (negative) {
 8015042:	2f00      	cmp	r7, #0
 8015044:	d102      	bne.n	801504c <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
 8015046:	075a      	lsls	r2, r3, #29
 8015048:	d509      	bpl.n	801505e <_ntoa_format+0xf6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 801504a:	222b      	movs	r2, #43	; 0x2b
      buf[len++] = ' ';
 801504c:	552a      	strb	r2, [r5, r4]
 801504e:	3401      	adds	r4, #1
 8015050:	e7dc      	b.n	801500c <_ntoa_format+0xa4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015052:	2a02      	cmp	r2, #2
 8015054:	d1ed      	bne.n	8015032 <_ntoa_format+0xca>
 8015056:	2c1f      	cmp	r4, #31
 8015058:	d8d8      	bhi.n	801500c <_ntoa_format+0xa4>
      buf[len++] = 'b';
 801505a:	2262      	movs	r2, #98	; 0x62
 801505c:	e7e7      	b.n	801502e <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
 801505e:	071a      	lsls	r2, r3, #28
 8015060:	d5d4      	bpl.n	801500c <_ntoa_format+0xa4>
      buf[len++] = ' ';
 8015062:	2220      	movs	r2, #32
 8015064:	e7f2      	b.n	801504c <_ntoa_format+0xe4>
      out(' ', buffer, idx++, maxlen);
 8015066:	1c77      	adds	r7, r6, #1
 8015068:	0032      	movs	r2, r6
 801506a:	9b04      	ldr	r3, [sp, #16]
 801506c:	9e02      	ldr	r6, [sp, #8]
 801506e:	9903      	ldr	r1, [sp, #12]
 8015070:	2020      	movs	r0, #32
 8015072:	47b0      	blx	r6
 8015074:	003e      	movs	r6, r7
    for (size_t i = len; i < width; i++) {
 8015076:	9b01      	ldr	r3, [sp, #4]
 8015078:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801507a:	1ae3      	subs	r3, r4, r3
 801507c:	199b      	adds	r3, r3, r6
 801507e:	429a      	cmp	r2, r3
 8015080:	d8f1      	bhi.n	8015066 <_ntoa_format+0xfe>
 8015082:	e7c6      	b.n	8015012 <_ntoa_format+0xaa>
    out(buf[--len], buffer, idx++, maxlen);
 8015084:	9b00      	ldr	r3, [sp, #0]
 8015086:	9903      	ldr	r1, [sp, #12]
 8015088:	3b01      	subs	r3, #1
 801508a:	9300      	str	r3, [sp, #0]
 801508c:	5ce8      	ldrb	r0, [r5, r3]
 801508e:	9f02      	ldr	r7, [sp, #8]
 8015090:	9b04      	ldr	r3, [sp, #16]
 8015092:	47b8      	blx	r7
 8015094:	e7be      	b.n	8015014 <_ntoa_format+0xac>
      out(' ', buffer, idx++, maxlen);
 8015096:	1c44      	adds	r4, r0, #1
 8015098:	0002      	movs	r2, r0
 801509a:	9b04      	ldr	r3, [sp, #16]
 801509c:	2020      	movs	r0, #32
 801509e:	9903      	ldr	r1, [sp, #12]
 80150a0:	9d02      	ldr	r5, [sp, #8]
 80150a2:	47a8      	blx	r5
 80150a4:	0020      	movs	r0, r4
    while (idx - start_idx < width) {
 80150a6:	9b01      	ldr	r3, [sp, #4]
 80150a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80150aa:	1ac3      	subs	r3, r0, r3
 80150ac:	429a      	cmp	r2, r3
 80150ae:	d8f2      	bhi.n	8015096 <_ntoa_format+0x12e>
 80150b0:	e7b8      	b.n	8015024 <_ntoa_format+0xbc>

080150b2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80150b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150b4:	b095      	sub	sp, #84	; 0x54
 80150b6:	9309      	str	r3, [sp, #36]	; 0x24
 80150b8:	ab1a      	add	r3, sp, #104	; 0x68
 80150ba:	0006      	movs	r6, r0
 80150bc:	cb01      	ldmia	r3!, {r0}
 80150be:	000f      	movs	r7, r1
 80150c0:	781b      	ldrb	r3, [r3, #0]
 80150c2:	9208      	str	r2, [sp, #32]
 80150c4:	930a      	str	r3, [sp, #40]	; 0x28
 80150c6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80150c8:	2800      	cmp	r0, #0
 80150ca:	d101      	bne.n	80150d0 <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 80150cc:	2310      	movs	r3, #16
 80150ce:	439c      	bics	r4, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80150d0:	0563      	lsls	r3, r4, #21
 80150d2:	d502      	bpl.n	80150da <_ntoa_long+0x28>
  size_t len = 0U;
 80150d4:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 80150d6:	4298      	cmp	r0, r3
 80150d8:	d01d      	beq.n	8015116 <_ntoa_long+0x64>
 80150da:	2361      	movs	r3, #97	; 0x61
 80150dc:	06a2      	lsls	r2, r4, #26
 80150de:	d500      	bpl.n	80150e2 <_ntoa_long+0x30>
 80150e0:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80150e2:	2500      	movs	r5, #0
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	3b0a      	subs	r3, #10
 80150e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80150ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80150ec:	f7f9 fdd6 	bl	800ec9c <__aeabi_uidivmod>
 80150f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 80150f2:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80150f4:	189a      	adds	r2, r3, r2
 80150f6:	4684      	mov	ip, r0
 80150f8:	b2d2      	uxtb	r2, r2
 80150fa:	2909      	cmp	r1, #9
 80150fc:	d801      	bhi.n	8015102 <_ntoa_long+0x50>
 80150fe:	3330      	adds	r3, #48	; 0x30
 8015100:	b2da      	uxtb	r2, r3
 8015102:	2020      	movs	r0, #32
 8015104:	a904      	add	r1, sp, #16
 8015106:	1809      	adds	r1, r1, r0
      value /= base;
 8015108:	4660      	mov	r0, ip
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801510a:	1c6b      	adds	r3, r5, #1
 801510c:	554a      	strb	r2, [r1, r5]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801510e:	2800      	cmp	r0, #0
 8015110:	d001      	beq.n	8015116 <_ntoa_long+0x64>
 8015112:	2b20      	cmp	r3, #32
 8015114:	d113      	bne.n	801513e <_ntoa_long+0x8c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015116:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015118:	9301      	str	r3, [sp, #4]
 801511a:	9205      	str	r2, [sp, #20]
 801511c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801511e:	ab0c      	add	r3, sp, #48	; 0x30
 8015120:	9204      	str	r2, [sp, #16]
 8015122:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	9203      	str	r2, [sp, #12]
 8015128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801512a:	9406      	str	r4, [sp, #24]
 801512c:	9202      	str	r2, [sp, #8]
 801512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015130:	9a08      	ldr	r2, [sp, #32]
 8015132:	0039      	movs	r1, r7
 8015134:	0030      	movs	r0, r6
 8015136:	f7ff ff17 	bl	8014f68 <_ntoa_format>
}
 801513a:	b015      	add	sp, #84	; 0x54
 801513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801513e:	001d      	movs	r5, r3
 8015140:	e7d3      	b.n	80150ea <_ntoa_long+0x38>

08015142 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015144:	b099      	sub	sp, #100	; 0x64
 8015146:	930c      	str	r3, [sp, #48]	; 0x30
 8015148:	ab20      	add	r3, sp, #128	; 0x80
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	9009      	str	r0, [sp, #36]	; 0x24
 801514e:	930d      	str	r3, [sp, #52]	; 0x34
 8015150:	981e      	ldr	r0, [sp, #120]	; 0x78
 8015152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015154:	910a      	str	r1, [sp, #40]	; 0x28
 8015156:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015158:	0003      	movs	r3, r0
{
 801515a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801515c:	920b      	str	r2, [sp, #44]	; 0x2c
 801515e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8015160:	9e26      	ldr	r6, [sp, #152]	; 0x98
  if (!value) {
 8015162:	430b      	orrs	r3, r1
 8015164:	d101      	bne.n	801516a <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 8015166:	3310      	adds	r3, #16
 8015168:	439e      	bics	r6, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 801516a:	0573      	lsls	r3, r6, #21
 801516c:	d504      	bpl.n	8015178 <_ntoa_long_long+0x36>
 801516e:	0003      	movs	r3, r0
  size_t len = 0U;
 8015170:	2200      	movs	r2, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015172:	430b      	orrs	r3, r1
 8015174:	4293      	cmp	r3, r2
 8015176:	d021      	beq.n	80151bc <_ntoa_long_long+0x7a>
 8015178:	2361      	movs	r3, #97	; 0x61
 801517a:	06b2      	lsls	r2, r6, #26
 801517c:	d500      	bpl.n	8015180 <_ntoa_long_long+0x3e>
 801517e:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015180:	2400      	movs	r4, #0
 8015182:	b2db      	uxtb	r3, r3
 8015184:	3b0a      	subs	r3, #10
 8015186:	930f      	str	r3, [sp, #60]	; 0x3c
 8015188:	002a      	movs	r2, r5
 801518a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801518c:	f7f9 feee 	bl	800ef6c <__aeabi_uldivmod>
 8015190:	468c      	mov	ip, r1
 8015192:	990f      	ldr	r1, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 8015194:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015196:	1851      	adds	r1, r2, r1
 8015198:	0003      	movs	r3, r0
 801519a:	b2c9      	uxtb	r1, r1
 801519c:	2a09      	cmp	r2, #9
 801519e:	d801      	bhi.n	80151a4 <_ntoa_long_long+0x62>
 80151a0:	3230      	adds	r2, #48	; 0x30
 80151a2:	b2d1      	uxtb	r1, r2
 80151a4:	2720      	movs	r7, #32
 80151a6:	a808      	add	r0, sp, #32
 80151a8:	19c0      	adds	r0, r0, r7
 80151aa:	5501      	strb	r1, [r0, r4]
 80151ac:	1c62      	adds	r2, r4, #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80151ae:	4664      	mov	r4, ip
      value /= base;
 80151b0:	0018      	movs	r0, r3
 80151b2:	4661      	mov	r1, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80151b4:	431c      	orrs	r4, r3
 80151b6:	d001      	beq.n	80151bc <_ntoa_long_long+0x7a>
 80151b8:	42ba      	cmp	r2, r7
 80151ba:	d112      	bne.n	80151e2 <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80151bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80151be:	9201      	str	r2, [sp, #4]
 80151c0:	9305      	str	r3, [sp, #20]
 80151c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80151c4:	9606      	str	r6, [sp, #24]
 80151c6:	9304      	str	r3, [sp, #16]
 80151c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151ca:	9503      	str	r5, [sp, #12]
 80151cc:	9302      	str	r3, [sp, #8]
 80151ce:	ab10      	add	r3, sp, #64	; 0x40
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80151d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80151d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80151da:	f7ff fec5 	bl	8014f68 <_ntoa_format>
}
 80151de:	b019      	add	sp, #100	; 0x64
 80151e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151e2:	0014      	movs	r4, r2
 80151e4:	e7d0      	b.n	8015188 <_ntoa_long_long+0x46>
	...

080151e8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80151e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151ea:	b099      	sub	sp, #100	; 0x64
 80151ec:	900d      	str	r0, [sp, #52]	; 0x34
 80151ee:	910e      	str	r1, [sp, #56]	; 0x38
 80151f0:	920c      	str	r2, [sp, #48]	; 0x30
 80151f2:	930a      	str	r3, [sp, #40]	; 0x28
 80151f4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 80151f6:	2900      	cmp	r1, #0
 80151f8:	d101      	bne.n	80151fe <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 80151fa:	4bb6      	ldr	r3, [pc, #728]	; (80154d4 <_vsnprintf+0x2ec>)
 80151fc:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 80151fe:	2700      	movs	r7, #0
 8015200:	e101      	b.n	8015406 <_vsnprintf+0x21e>
 8015202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015204:	3301      	adds	r3, #1
 8015206:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8015208:	2825      	cmp	r0, #37	; 0x25
 801520a:	d007      	beq.n	801521c <_vsnprintf+0x34>
        out(*format, buffer, idx++, maxlen);
 801520c:	003a      	movs	r2, r7
 801520e:	1c7c      	adds	r4, r7, #1
 8015210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015212:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015214:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015216:	47a8      	blx	r5
 8015218:	0027      	movs	r7, r4
        format++;
        break;
 801521a:	e0f4      	b.n	8015406 <_vsnprintf+0x21e>
    flags = 0U;
 801521c:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801521e:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015220:	2008      	movs	r0, #8
 8015222:	e005      	b.n	8015230 <_vsnprintf+0x48>
      switch (*format) {
 8015224:	2b2d      	cmp	r3, #45	; 0x2d
 8015226:	d016      	beq.n	8015256 <_vsnprintf+0x6e>
 8015228:	2b30      	cmp	r3, #48	; 0x30
 801522a:	d10c      	bne.n	8015246 <_vsnprintf+0x5e>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801522c:	430c      	orrs	r4, r1
{
 801522e:	920a      	str	r2, [sp, #40]	; 0x28
      switch (*format) {
 8015230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015234:	781b      	ldrb	r3, [r3, #0]
 8015236:	3201      	adds	r2, #1
 8015238:	2b2b      	cmp	r3, #43	; 0x2b
 801523a:	d00f      	beq.n	801525c <_vsnprintf+0x74>
 801523c:	d8f2      	bhi.n	8015224 <_vsnprintf+0x3c>
 801523e:	2b20      	cmp	r3, #32
 8015240:	d00e      	beq.n	8015260 <_vsnprintf+0x78>
 8015242:	2b23      	cmp	r3, #35	; 0x23
 8015244:	d00e      	beq.n	8015264 <_vsnprintf+0x7c>
    if (_is_digit(*format)) {
 8015246:	0019      	movs	r1, r3
 8015248:	3930      	subs	r1, #48	; 0x30
 801524a:	2909      	cmp	r1, #9
 801524c:	d82c      	bhi.n	80152a8 <_vsnprintf+0xc0>
  unsigned int i = 0U;
 801524e:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015250:	200a      	movs	r0, #10
  unsigned int i = 0U;
 8015252:	930f      	str	r3, [sp, #60]	; 0x3c
 8015254:	e00e      	b.n	8015274 <_vsnprintf+0x8c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015256:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8015258:	431c      	orrs	r4, r3
 801525a:	e7e8      	b.n	801522e <_vsnprintf+0x46>
 801525c:	2304      	movs	r3, #4
 801525e:	e7fb      	b.n	8015258 <_vsnprintf+0x70>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015260:	4304      	orrs	r4, r0
 8015262:	e7e4      	b.n	801522e <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8015264:	2310      	movs	r3, #16
 8015266:	e7f7      	b.n	8015258 <_vsnprintf+0x70>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801526a:	910a      	str	r1, [sp, #40]	; 0x28
 801526c:	4343      	muls	r3, r0
 801526e:	3b30      	subs	r3, #48	; 0x30
 8015270:	18d3      	adds	r3, r2, r3
 8015272:	930f      	str	r3, [sp, #60]	; 0x3c
  while (_is_digit(**str)) {
 8015274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015276:	781a      	ldrb	r2, [r3, #0]
 8015278:	1c59      	adds	r1, r3, #1
 801527a:	0013      	movs	r3, r2
 801527c:	3b30      	subs	r3, #48	; 0x30
 801527e:	2b09      	cmp	r3, #9
 8015280:	d9f2      	bls.n	8015268 <_vsnprintf+0x80>
    precision = 0U;
 8015282:	2200      	movs	r2, #0
    if (*format == '.') {
 8015284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    precision = 0U;
 8015286:	920b      	str	r2, [sp, #44]	; 0x2c
    if (*format == '.') {
 8015288:	781b      	ldrb	r3, [r3, #0]
 801528a:	2b2e      	cmp	r3, #46	; 0x2e
 801528c:	d138      	bne.n	8015300 <_vsnprintf+0x118>
      flags |= FLAGS_PRECISION;
 801528e:	2280      	movs	r2, #128	; 0x80
 8015290:	00d2      	lsls	r2, r2, #3
 8015292:	4314      	orrs	r4, r2
      if (_is_digit(*format)) {
 8015294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015298:	7852      	ldrb	r2, [r2, #1]
 801529a:	3301      	adds	r3, #1
 801529c:	0011      	movs	r1, r2
 801529e:	3930      	subs	r1, #48	; 0x30
 80152a0:	2909      	cmp	r1, #9
 80152a2:	d820      	bhi.n	80152e6 <_vsnprintf+0xfe>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80152a4:	250a      	movs	r5, #10
 80152a6:	e016      	b.n	80152d6 <_vsnprintf+0xee>
    width = 0U;
 80152a8:	2100      	movs	r1, #0
 80152aa:	910f      	str	r1, [sp, #60]	; 0x3c
    else if (*format == '*') {
 80152ac:	2b2a      	cmp	r3, #42	; 0x2a
 80152ae:	d1e8      	bne.n	8015282 <_vsnprintf+0x9a>
      const int w = va_arg(va, int);
 80152b0:	6831      	ldr	r1, [r6, #0]
 80152b2:	1d33      	adds	r3, r6, #4
 80152b4:	910f      	str	r1, [sp, #60]	; 0x3c
      if (w < 0) {
 80152b6:	2900      	cmp	r1, #0
 80152b8:	da04      	bge.n	80152c4 <_vsnprintf+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 80152ba:	2102      	movs	r1, #2
 80152bc:	430c      	orrs	r4, r1
        width = (unsigned int)-w;
 80152be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152c0:	4249      	negs	r1, r1
 80152c2:	910f      	str	r1, [sp, #60]	; 0x3c
      const int w = va_arg(va, int);
 80152c4:	001e      	movs	r6, r3
 80152c6:	920a      	str	r2, [sp, #40]	; 0x28
 80152c8:	e7db      	b.n	8015282 <_vsnprintf+0x9a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80152ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152cc:	436b      	muls	r3, r5
 80152ce:	3b30      	subs	r3, #48	; 0x30
 80152d0:	18d3      	adds	r3, r2, r3
 80152d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80152d4:	0003      	movs	r3, r0
  while (_is_digit(**str)) {
 80152d6:	781a      	ldrb	r2, [r3, #0]
 80152d8:	1c58      	adds	r0, r3, #1
 80152da:	0011      	movs	r1, r2
 80152dc:	3930      	subs	r1, #48	; 0x30
 80152de:	2909      	cmp	r1, #9
 80152e0:	d9f3      	bls.n	80152ca <_vsnprintf+0xe2>
      format++;
 80152e2:	930a      	str	r3, [sp, #40]	; 0x28
 80152e4:	e00c      	b.n	8015300 <_vsnprintf+0x118>
      else if (*format == '*') {
 80152e6:	2a2a      	cmp	r2, #42	; 0x2a
 80152e8:	d1fb      	bne.n	80152e2 <_vsnprintf+0xfa>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80152ea:	6833      	ldr	r3, [r6, #0]
        const int prec = (int)va_arg(va, int);
 80152ec:	3604      	adds	r6, #4
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80152ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80152f0:	43db      	mvns	r3, r3
 80152f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152f4:	17db      	asrs	r3, r3, #31
 80152f6:	401a      	ands	r2, r3
        format++;
 80152f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80152fa:	920b      	str	r2, [sp, #44]	; 0x2c
        format++;
 80152fc:	3302      	adds	r3, #2
 80152fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015302:	1c5a      	adds	r2, r3, #1
    switch (*format) {
 8015304:	781b      	ldrb	r3, [r3, #0]
 8015306:	2b6c      	cmp	r3, #108	; 0x6c
 8015308:	d00d      	beq.n	8015326 <_vsnprintf+0x13e>
 801530a:	d805      	bhi.n	8015318 <_vsnprintf+0x130>
 801530c:	2b68      	cmp	r3, #104	; 0x68
 801530e:	d014      	beq.n	801533a <_vsnprintf+0x152>
 8015310:	2b6a      	cmp	r3, #106	; 0x6a
 8015312:	d02f      	beq.n	8015374 <_vsnprintf+0x18c>
 8015314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015316:	e016      	b.n	8015346 <_vsnprintf+0x15e>
 8015318:	2b74      	cmp	r3, #116	; 0x74
 801531a:	d001      	beq.n	8015320 <_vsnprintf+0x138>
 801531c:	2b7a      	cmp	r3, #122	; 0x7a
 801531e:	d1f9      	bne.n	8015314 <_vsnprintf+0x12c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015320:	2380      	movs	r3, #128	; 0x80
 8015322:	005b      	lsls	r3, r3, #1
 8015324:	e00e      	b.n	8015344 <_vsnprintf+0x15c>
        if (*format == 'l') {
 8015326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015328:	785b      	ldrb	r3, [r3, #1]
 801532a:	2b6c      	cmp	r3, #108	; 0x6c
 801532c:	d1f8      	bne.n	8015320 <_vsnprintf+0x138>
          flags |= FLAGS_LONG_LONG;
 801532e:	23c0      	movs	r3, #192	; 0xc0
 8015330:	009b      	lsls	r3, r3, #2
          format++;
 8015332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          flags |= FLAGS_CHAR;
 8015334:	431c      	orrs	r4, r3
          format++;
 8015336:	3202      	adds	r2, #2
 8015338:	e005      	b.n	8015346 <_vsnprintf+0x15e>
        if (*format == 'h') {
 801533a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801533c:	785b      	ldrb	r3, [r3, #1]
 801533e:	2b68      	cmp	r3, #104	; 0x68
 8015340:	d016      	beq.n	8015370 <_vsnprintf+0x188>
        flags |= FLAGS_SHORT;
 8015342:	2380      	movs	r3, #128	; 0x80
 8015344:	431c      	orrs	r4, r3
    switch (*format) {
 8015346:	7810      	ldrb	r0, [r2, #0]
 8015348:	1c53      	adds	r3, r2, #1
 801534a:	930a      	str	r3, [sp, #40]	; 0x28
 801534c:	2869      	cmp	r0, #105	; 0x69
 801534e:	d01a      	beq.n	8015386 <_vsnprintf+0x19e>
 8015350:	d900      	bls.n	8015354 <_vsnprintf+0x16c>
 8015352:	e06a      	b.n	801542a <_vsnprintf+0x242>
 8015354:	2862      	cmp	r0, #98	; 0x62
 8015356:	d100      	bne.n	801535a <_vsnprintf+0x172>
 8015358:	e172      	b.n	8015640 <_vsnprintf+0x458>
 801535a:	d80e      	bhi.n	801537a <_vsnprintf+0x192>
 801535c:	2825      	cmp	r0, #37	; 0x25
 801535e:	d100      	bne.n	8015362 <_vsnprintf+0x17a>
 8015360:	e754      	b.n	801520c <_vsnprintf+0x24>
 8015362:	2858      	cmp	r0, #88	; 0x58
 8015364:	d000      	beq.n	8015368 <_vsnprintf+0x180>
 8015366:	e751      	b.n	801520c <_vsnprintf+0x24>
          flags |= FLAGS_UPPERCASE;
 8015368:	2320      	movs	r3, #32
 801536a:	431c      	orrs	r4, r3
          base = 16U;
 801536c:	3b10      	subs	r3, #16
 801536e:	e011      	b.n	8015394 <_vsnprintf+0x1ac>
          flags |= FLAGS_CHAR;
 8015370:	23c0      	movs	r3, #192	; 0xc0
 8015372:	e7de      	b.n	8015332 <_vsnprintf+0x14a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015374:	2380      	movs	r3, #128	; 0x80
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	e7e4      	b.n	8015344 <_vsnprintf+0x15c>
    switch (*format) {
 801537a:	2863      	cmp	r0, #99	; 0x63
 801537c:	d100      	bne.n	8015380 <_vsnprintf+0x198>
 801537e:	e0c9      	b.n	8015514 <_vsnprintf+0x32c>
 8015380:	2864      	cmp	r0, #100	; 0x64
 8015382:	d000      	beq.n	8015386 <_vsnprintf+0x19e>
 8015384:	e742      	b.n	801520c <_vsnprintf+0x24>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8015386:	2310      	movs	r3, #16
 8015388:	439c      	bics	r4, r3
          base = 10U;
 801538a:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 801538c:	2869      	cmp	r0, #105	; 0x69
 801538e:	d003      	beq.n	8015398 <_vsnprintf+0x1b0>
 8015390:	2864      	cmp	r0, #100	; 0x64
 8015392:	d001      	beq.n	8015398 <_vsnprintf+0x1b0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8015394:	220c      	movs	r2, #12
 8015396:	4394      	bics	r4, r2
        if (flags & FLAGS_PRECISION) {
 8015398:	0562      	lsls	r2, r4, #21
 801539a:	d501      	bpl.n	80153a0 <_vsnprintf+0x1b8>
          flags &= ~FLAGS_ZEROPAD;
 801539c:	2201      	movs	r2, #1
 801539e:	4394      	bics	r4, r2
 80153a0:	2280      	movs	r2, #128	; 0x80
 80153a2:	0092      	lsls	r2, r2, #2
 80153a4:	4022      	ands	r2, r4
        if ((*format == 'i') || (*format == 'd')) {
 80153a6:	2869      	cmp	r0, #105	; 0x69
 80153a8:	d002      	beq.n	80153b0 <_vsnprintf+0x1c8>
 80153aa:	2864      	cmp	r0, #100	; 0x64
 80153ac:	d000      	beq.n	80153b0 <_vsnprintf+0x1c8>
 80153ae:	e07b      	b.n	80154a8 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
 80153b0:	2a00      	cmp	r2, #0
 80153b2:	d059      	beq.n	8015468 <_vsnprintf+0x280>
            const long long value = va_arg(va, long long);
 80153b4:	2107      	movs	r1, #7
 80153b6:	1df2      	adds	r2, r6, #7
 80153b8:	438a      	bics	r2, r1
 80153ba:	6811      	ldr	r1, [r2, #0]
 80153bc:	0015      	movs	r5, r2
 80153be:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80153c0:	9304      	str	r3, [sp, #16]
 80153c2:	2300      	movs	r3, #0
 80153c4:	9305      	str	r3, [sp, #20]
 80153c6:	0fd3      	lsrs	r3, r2, #31
 80153c8:	9302      	str	r3, [sp, #8]
 80153ca:	17d3      	asrs	r3, r2, #31
 80153cc:	9311      	str	r3, [sp, #68]	; 0x44
 80153ce:	9310      	str	r3, [sp, #64]	; 0x40
 80153d0:	404b      	eors	r3, r1
 80153d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80153d4:	9314      	str	r3, [sp, #80]	; 0x50
 80153d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80153d8:	9007      	str	r0, [sp, #28]
 80153da:	4053      	eors	r3, r2
 80153dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80153de:	9315      	str	r3, [sp, #84]	; 0x54
 80153e0:	9006      	str	r0, [sp, #24]
 80153e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80153e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80153e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80153ea:	1a12      	subs	r2, r2, r0
 80153ec:	418b      	sbcs	r3, r1
 80153ee:	9200      	str	r2, [sp, #0]
 80153f0:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 80153f2:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80153f4:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80153f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153f8:	003a      	movs	r2, r7
 80153fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80153fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80153fe:	f7ff fea0 	bl	8015142 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015402:	0007      	movs	r7, r0
        break;
 8015404:	002e      	movs	r6, r5
  while (*format)
 8015406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015408:	7818      	ldrb	r0, [r3, #0]
 801540a:	2800      	cmp	r0, #0
 801540c:	d000      	beq.n	8015410 <_vsnprintf+0x228>
 801540e:	e6f8      	b.n	8015202 <_vsnprintf+0x1a>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015412:	003a      	movs	r2, r7
 8015414:	429f      	cmp	r7, r3
 8015416:	d300      	bcc.n	801541a <_vsnprintf+0x232>
 8015418:	1e5a      	subs	r2, r3, #1
 801541a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801541c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801541e:	2000      	movs	r0, #0
 8015420:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015422:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8015424:	0038      	movs	r0, r7
 8015426:	b019      	add	sp, #100	; 0x64
 8015428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (*format) {
 801542a:	2873      	cmp	r0, #115	; 0x73
 801542c:	d100      	bne.n	8015430 <_vsnprintf+0x248>
 801542e:	e0a7      	b.n	8015580 <_vsnprintf+0x398>
 8015430:	d812      	bhi.n	8015458 <_vsnprintf+0x270>
 8015432:	286f      	cmp	r0, #111	; 0x6f
 8015434:	d100      	bne.n	8015438 <_vsnprintf+0x250>
 8015436:	e101      	b.n	801563c <_vsnprintf+0x454>
 8015438:	2870      	cmp	r0, #112	; 0x70
 801543a:	d000      	beq.n	801543e <_vsnprintf+0x256>
 801543c:	e6e6      	b.n	801520c <_vsnprintf+0x24>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 801543e:	2321      	movs	r3, #33	; 0x21
 8015440:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015442:	3b19      	subs	r3, #25
 8015444:	9304      	str	r3, [sp, #16]
 8015446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015448:	1d35      	adds	r5, r6, #4
 801544a:	9303      	str	r3, [sp, #12]
 801544c:	2310      	movs	r3, #16
 801544e:	9302      	str	r3, [sp, #8]
 8015450:	2300      	movs	r3, #0
 8015452:	9405      	str	r4, [sp, #20]
 8015454:	9301      	str	r3, [sp, #4]
 8015456:	e049      	b.n	80154ec <_vsnprintf+0x304>
    switch (*format) {
 8015458:	2875      	cmp	r0, #117	; 0x75
 801545a:	d100      	bne.n	801545e <_vsnprintf+0x276>
 801545c:	e793      	b.n	8015386 <_vsnprintf+0x19e>
 801545e:	2878      	cmp	r0, #120	; 0x78
 8015460:	d000      	beq.n	8015464 <_vsnprintf+0x27c>
 8015462:	e6d3      	b.n	801520c <_vsnprintf+0x24>
          base = 16U;
 8015464:	2310      	movs	r3, #16
 8015466:	e795      	b.n	8015394 <_vsnprintf+0x1ac>
 8015468:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 801546a:	05e2      	lsls	r2, r4, #23
 801546c:	d513      	bpl.n	8015496 <_vsnprintf+0x2ae>
            const long value = va_arg(va, long);
 801546e:	6832      	ldr	r2, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015470:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015472:	9302      	str	r3, [sp, #8]
 8015474:	0fd3      	lsrs	r3, r2, #31
 8015476:	9104      	str	r1, [sp, #16]
 8015478:	9301      	str	r3, [sp, #4]
 801547a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801547c:	17d3      	asrs	r3, r2, #31
 801547e:	18d2      	adds	r2, r2, r3
 8015480:	9405      	str	r4, [sp, #20]
 8015482:	9103      	str	r1, [sp, #12]
 8015484:	405a      	eors	r2, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015486:	9200      	str	r2, [sp, #0]
 8015488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801548a:	003a      	movs	r2, r7
 801548c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801548e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015490:	f7ff fe0f 	bl	80150b2 <_ntoa_long>
 8015494:	e7b5      	b.n	8015402 <_vsnprintf+0x21a>
 8015496:	6832      	ldr	r2, [r6, #0]
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8015498:	0661      	lsls	r1, r4, #25
 801549a:	d501      	bpl.n	80154a0 <_vsnprintf+0x2b8>
 801549c:	b252      	sxtb	r2, r2
 801549e:	e7e7      	b.n	8015470 <_vsnprintf+0x288>
 80154a0:	0621      	lsls	r1, r4, #24
 80154a2:	d5e5      	bpl.n	8015470 <_vsnprintf+0x288>
 80154a4:	b212      	sxth	r2, r2
 80154a6:	e7e3      	b.n	8015470 <_vsnprintf+0x288>
          if (flags & FLAGS_LONG_LONG) {
 80154a8:	2a00      	cmp	r2, #0
 80154aa:	d015      	beq.n	80154d8 <_vsnprintf+0x2f0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80154ac:	2107      	movs	r1, #7
 80154ae:	1df2      	adds	r2, r6, #7
 80154b0:	438a      	bics	r2, r1
 80154b2:	9304      	str	r3, [sp, #16]
 80154b4:	2300      	movs	r3, #0
 80154b6:	0015      	movs	r5, r2
 80154b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80154ba:	9408      	str	r4, [sp, #32]
 80154bc:	9107      	str	r1, [sp, #28]
 80154be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154c0:	9305      	str	r3, [sp, #20]
 80154c2:	9106      	str	r1, [sp, #24]
 80154c4:	9302      	str	r3, [sp, #8]
 80154c6:	6813      	ldr	r3, [r2, #0]
 80154c8:	6854      	ldr	r4, [r2, #4]
 80154ca:	3508      	adds	r5, #8
 80154cc:	9300      	str	r3, [sp, #0]
 80154ce:	9401      	str	r4, [sp, #4]
 80154d0:	e791      	b.n	80153f6 <_vsnprintf+0x20e>
 80154d2:	46c0      	nop			; (mov r8, r8)
 80154d4:	08014f59 	.word	0x08014f59
 80154d8:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 80154da:	05e1      	lsls	r1, r4, #23
 80154dc:	d509      	bpl.n	80154f2 <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80154de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80154e0:	9405      	str	r4, [sp, #20]
 80154e2:	9104      	str	r1, [sp, #16]
 80154e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80154e6:	9302      	str	r3, [sp, #8]
 80154e8:	9103      	str	r1, [sp, #12]
 80154ea:	9201      	str	r2, [sp, #4]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80154ec:	6833      	ldr	r3, [r6, #0]
 80154ee:	9300      	str	r3, [sp, #0]
 80154f0:	e7ca      	b.n	8015488 <_vsnprintf+0x2a0>
 80154f2:	6832      	ldr	r2, [r6, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80154f4:	0661      	lsls	r1, r4, #25
 80154f6:	d509      	bpl.n	801550c <_vsnprintf+0x324>
 80154f8:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80154fa:	9302      	str	r3, [sp, #8]
 80154fc:	2300      	movs	r3, #0
 80154fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015500:	9405      	str	r4, [sp, #20]
 8015502:	9104      	str	r1, [sp, #16]
 8015504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015506:	9301      	str	r3, [sp, #4]
 8015508:	9103      	str	r1, [sp, #12]
 801550a:	e7bc      	b.n	8015486 <_vsnprintf+0x29e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801550c:	0621      	lsls	r1, r4, #24
 801550e:	d5f4      	bpl.n	80154fa <_vsnprintf+0x312>
 8015510:	b292      	uxth	r2, r2
 8015512:	e7f2      	b.n	80154fa <_vsnprintf+0x312>
        if (!(flags & FLAGS_LEFT)) {
 8015514:	2302      	movs	r3, #2
 8015516:	4023      	ands	r3, r4
 8015518:	930b      	str	r3, [sp, #44]	; 0x2c
 801551a:	d026      	beq.n	801556a <_vsnprintf+0x382>
        unsigned int l = 1U;
 801551c:	2301      	movs	r3, #1
 801551e:	003c      	movs	r4, r7
 8015520:	9312      	str	r3, [sp, #72]	; 0x48
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015522:	6830      	ldr	r0, [r6, #0]
 8015524:	1d33      	adds	r3, r6, #4
 8015526:	9313      	str	r3, [sp, #76]	; 0x4c
 8015528:	b2c0      	uxtb	r0, r0
 801552a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801552c:	0022      	movs	r2, r4
 801552e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015530:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015532:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 8015534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015536:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 8015538:	2b00      	cmp	r3, #0
 801553a:	d006      	beq.n	801554a <_vsnprintf+0x362>
 801553c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801553e:	3d01      	subs	r5, #1
 8015540:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 8015542:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015544:	197b      	adds	r3, r7, r5
 8015546:	4293      	cmp	r3, r2
 8015548:	d311      	bcc.n	801556e <_vsnprintf+0x386>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801554a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        break;
 801554c:	e75b      	b.n	8015406 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 801554e:	0022      	movs	r2, r4
 8015550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015552:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015554:	2020      	movs	r0, #32
 8015556:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015558:	47a0      	blx	r4
 801555a:	1cab      	adds	r3, r5, #2
 801555c:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 801555e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015560:	197c      	adds	r4, r7, r5
 8015562:	3501      	adds	r5, #1
 8015564:	429d      	cmp	r5, r3
 8015566:	d3f2      	bcc.n	801554e <_vsnprintf+0x366>
 8015568:	e7db      	b.n	8015522 <_vsnprintf+0x33a>
 801556a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801556c:	e7f5      	b.n	801555a <_vsnprintf+0x372>
            out(' ', buffer, idx++, maxlen);
 801556e:	003a      	movs	r2, r7
 8015570:	1c7c      	adds	r4, r7, #1
 8015572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015574:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015576:	2020      	movs	r0, #32
 8015578:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801557a:	47b0      	blx	r6
 801557c:	0027      	movs	r7, r4
 801557e:	e7e0      	b.n	8015542 <_vsnprintf+0x35a>
        const char* p = va_arg(va, char*);
 8015580:	1d33      	adds	r3, r6, #4
 8015582:	9317      	str	r3, [sp, #92]	; 0x5c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        const char* p = va_arg(va, char*);
 8015586:	6836      	ldr	r6, [r6, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015588:	2b00      	cmp	r3, #0
 801558a:	d101      	bne.n	8015590 <_vsnprintf+0x3a8>
 801558c:	2301      	movs	r3, #1
 801558e:	425b      	negs	r3, r3
 8015590:	0035      	movs	r5, r6
 8015592:	18f3      	adds	r3, r6, r3
  for (s = str; *s && maxsize--; ++s);
 8015594:	782a      	ldrb	r2, [r5, #0]
 8015596:	2a00      	cmp	r2, #0
 8015598:	d001      	beq.n	801559e <_vsnprintf+0x3b6>
 801559a:	42ab      	cmp	r3, r5
 801559c:	d112      	bne.n	80155c4 <_vsnprintf+0x3dc>
        if (flags & FLAGS_PRECISION) {
 801559e:	2380      	movs	r3, #128	; 0x80
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	4023      	ands	r3, r4
  return (unsigned int)(s - str);
 80155a4:	1bad      	subs	r5, r5, r6
        if (flags & FLAGS_PRECISION) {
 80155a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d003      	beq.n	80155b4 <_vsnprintf+0x3cc>
          l = (l < precision ? l : precision);
 80155ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155ae:	429d      	cmp	r5, r3
 80155b0:	d900      	bls.n	80155b4 <_vsnprintf+0x3cc>
 80155b2:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 80155b4:	2302      	movs	r3, #2
 80155b6:	4023      	ands	r3, r4
 80155b8:	9316      	str	r3, [sp, #88]	; 0x58
 80155ba:	d014      	beq.n	80155e6 <_vsnprintf+0x3fe>
 80155bc:	003c      	movs	r4, r7
 80155be:	9512      	str	r5, [sp, #72]	; 0x48
 80155c0:	0025      	movs	r5, r4
 80155c2:	e01a      	b.n	80155fa <_vsnprintf+0x412>
  for (s = str; *s && maxsize--; ++s);
 80155c4:	3501      	adds	r5, #1
 80155c6:	e7e5      	b.n	8015594 <_vsnprintf+0x3ac>
            out(' ', buffer, idx++, maxlen);
 80155c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155ca:	0022      	movs	r2, r4
 80155cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80155ce:	2020      	movs	r0, #32
 80155d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80155d2:	47a0      	blx	r4
          while (l++ < width) {
 80155d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155d6:	1c5a      	adds	r2, r3, #1
 80155d8:	9212      	str	r2, [sp, #72]	; 0x48
 80155da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155dc:	1b7c      	subs	r4, r7, r5
 80155de:	18e4      	adds	r4, r4, r3
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d8f1      	bhi.n	80155c8 <_vsnprintf+0x3e0>
 80155e4:	e7ec      	b.n	80155c0 <_vsnprintf+0x3d8>
 80155e6:	002b      	movs	r3, r5
 80155e8:	e7f5      	b.n	80155d6 <_vsnprintf+0x3ee>
 80155ea:	930b      	str	r3, [sp, #44]	; 0x2c
          out(*(p++), buffer, idx++, maxlen);
 80155ec:	1c6f      	adds	r7, r5, #1
 80155ee:	002a      	movs	r2, r5
 80155f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80155f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80155f6:	47a8      	blx	r5
 80155f8:	003d      	movs	r5, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80155fa:	1b33      	subs	r3, r6, r4
 80155fc:	5d58      	ldrb	r0, [r3, r5]
 80155fe:	2800      	cmp	r0, #0
 8015600:	d007      	beq.n	8015612 <_vsnprintf+0x42a>
 8015602:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015604:	2b00      	cmp	r3, #0
 8015606:	d0f1      	beq.n	80155ec <_vsnprintf+0x404>
 8015608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801560a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801560c:	3b01      	subs	r3, #1
 801560e:	2a00      	cmp	r2, #0
 8015610:	d1eb      	bne.n	80155ea <_vsnprintf+0x402>
        if (flags & FLAGS_LEFT) {
 8015612:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015614:	002f      	movs	r7, r5
 8015616:	2b00      	cmp	r3, #0
 8015618:	d109      	bne.n	801562e <_vsnprintf+0x446>
        const char* p = va_arg(va, char*);
 801561a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
        break;
 801561c:	e6f3      	b.n	8015406 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 801561e:	003a      	movs	r2, r7
 8015620:	1c7c      	adds	r4, r7, #1
 8015622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015624:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015626:	2020      	movs	r0, #32
 8015628:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801562a:	47b0      	blx	r6
 801562c:	0027      	movs	r7, r4
 801562e:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015632:	1b5b      	subs	r3, r3, r5
 8015634:	19db      	adds	r3, r3, r7
 8015636:	4293      	cmp	r3, r2
 8015638:	d3f1      	bcc.n	801561e <_vsnprintf+0x436>
 801563a:	e7ee      	b.n	801561a <_vsnprintf+0x432>
          base =  8U;
 801563c:	2308      	movs	r3, #8
 801563e:	e6a9      	b.n	8015394 <_vsnprintf+0x1ac>
          base =  2U;
 8015640:	2302      	movs	r3, #2
 8015642:	e6a7      	b.n	8015394 <_vsnprintf+0x1ac>

08015644 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8015644:	b507      	push	{r0, r1, r2, lr}
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	0013      	movs	r3, r2
 801564a:	000a      	movs	r2, r1
 801564c:	0001      	movs	r1, r0
 801564e:	4802      	ldr	r0, [pc, #8]	; (8015658 <vsnprintf_+0x14>)
 8015650:	f7ff fdca 	bl	80151e8 <_vsnprintf>
}
 8015654:	bd0e      	pop	{r1, r2, r3, pc}
 8015656:	46c0      	nop			; (mov r8, r8)
 8015658:	08014f51 	.word	0x08014f51

0801565c <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 801565c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 801565e:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015660:	2101      	movs	r1, #1
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015662:	9002      	str	r0, [sp, #8]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015664:	9300      	str	r3, [sp, #0]
 8015666:	4804      	ldr	r0, [pc, #16]	; (8015678 <fctvprintf+0x1c>)
 8015668:	0013      	movs	r3, r2
 801566a:	424a      	negs	r2, r1
 801566c:	a902      	add	r1, sp, #8
 801566e:	f7ff fdbb 	bl	80151e8 <_vsnprintf>
}
 8015672:	b005      	add	sp, #20
 8015674:	bd00      	pop	{pc}
 8015676:	46c0      	nop			; (mov r8, r8)
 8015678:	08014f5b 	.word	0x08014f5b

0801567c <malloc>:
 801567c:	b510      	push	{r4, lr}
 801567e:	4b03      	ldr	r3, [pc, #12]	; (801568c <malloc+0x10>)
 8015680:	0001      	movs	r1, r0
 8015682:	6818      	ldr	r0, [r3, #0]
 8015684:	f7fd fc3c 	bl	8012f00 <_malloc_r>
 8015688:	bd10      	pop	{r4, pc}
 801568a:	46c0      	nop			; (mov r8, r8)
 801568c:	20000008 	.word	0x20000008

08015690 <free>:
 8015690:	b510      	push	{r4, lr}
 8015692:	4b03      	ldr	r3, [pc, #12]	; (80156a0 <free+0x10>)
 8015694:	0001      	movs	r1, r0
 8015696:	6818      	ldr	r0, [r3, #0]
 8015698:	f7fd fbe8 	bl	8012e6c <_free_r>
 801569c:	bd10      	pop	{r4, pc}
 801569e:	46c0      	nop			; (mov r8, r8)
 80156a0:	20000008 	.word	0x20000008

080156a4 <memcpy>:
 80156a4:	2300      	movs	r3, #0
 80156a6:	b510      	push	{r4, lr}
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d100      	bne.n	80156ae <memcpy+0xa>
 80156ac:	bd10      	pop	{r4, pc}
 80156ae:	5ccc      	ldrb	r4, [r1, r3]
 80156b0:	54c4      	strb	r4, [r0, r3]
 80156b2:	3301      	adds	r3, #1
 80156b4:	e7f8      	b.n	80156a8 <memcpy+0x4>

080156b6 <memmove>:
 80156b6:	b510      	push	{r4, lr}
 80156b8:	4288      	cmp	r0, r1
 80156ba:	d902      	bls.n	80156c2 <memmove+0xc>
 80156bc:	188b      	adds	r3, r1, r2
 80156be:	4298      	cmp	r0, r3
 80156c0:	d303      	bcc.n	80156ca <memmove+0x14>
 80156c2:	2300      	movs	r3, #0
 80156c4:	e007      	b.n	80156d6 <memmove+0x20>
 80156c6:	5c8b      	ldrb	r3, [r1, r2]
 80156c8:	5483      	strb	r3, [r0, r2]
 80156ca:	3a01      	subs	r2, #1
 80156cc:	d2fb      	bcs.n	80156c6 <memmove+0x10>
 80156ce:	bd10      	pop	{r4, pc}
 80156d0:	5ccc      	ldrb	r4, [r1, r3]
 80156d2:	54c4      	strb	r4, [r0, r3]
 80156d4:	3301      	adds	r3, #1
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d1fa      	bne.n	80156d0 <memmove+0x1a>
 80156da:	e7f8      	b.n	80156ce <memmove+0x18>

080156dc <_init>:
 80156dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156de:	46c0      	nop			; (mov r8, r8)
 80156e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156e2:	bc08      	pop	{r3}
 80156e4:	469e      	mov	lr, r3
 80156e6:	4770      	bx	lr

080156e8 <_fini>:
 80156e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ea:	46c0      	nop			; (mov r8, r8)
 80156ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156ee:	bc08      	pop	{r3}
 80156f0:	469e      	mov	lr, r3
 80156f2:	4770      	bx	lr
