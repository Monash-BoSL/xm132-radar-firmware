
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016610  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009158  080166d0  080166d0  000266d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f828  0801f828  0002f828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f830  0801f830  0002f830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f834  0801f834  0002f834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801f838  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000658  20000070  0801f8a8  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001600  200006c8  0801f8a8  000306c8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c2b3  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ae5  00000000  00000000  0005c34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001ab6a  00000000  00000000  0005de30  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000170  00000000  00000000  0007899a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004020  00000000  00000000  00078b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000765c  00000000  00000000  0007cb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000c4a6  00000000  00000000  00084186  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  0009062c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e5c  00000000  00000000  000906ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  00094508  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  0009455c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080166b4 	.word	0x080166b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080166b4 	.word	0x080166b4

08000104 <acc_probes_execute>:
 8000104:	230c      	movs	r3, #12
 8000106:	b510      	push	{r4, lr}
 8000108:	7804      	ldrb	r4, [r0, #0]
 800010a:	435c      	muls	r4, r3
 800010c:	4b03      	ldr	r3, [pc, #12]	; (800011c <acc_probes_execute+0x18>)
 800010e:	191b      	adds	r3, r3, r4
 8000110:	685c      	ldr	r4, [r3, #4]
 8000112:	2c00      	cmp	r4, #0
 8000114:	d001      	beq.n	800011a <acc_probes_execute+0x16>
 8000116:	689b      	ldr	r3, [r3, #8]
 8000118:	47a0      	blx	r4
 800011a:	bd10      	pop	{r4, pc}
 800011c:	08018a10 	.word	0x08018a10

08000120 <acc_probes_execute_primitive_probe>:
 8000120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000122:	9102      	str	r1, [sp, #8]
 8000124:	2100      	movs	r1, #0
 8000126:	ab01      	add	r3, sp, #4
 8000128:	7018      	strb	r0, [r3, #0]
 800012a:	000a      	movs	r2, r1
 800012c:	0018      	movs	r0, r3
 800012e:	9103      	str	r1, [sp, #12]
 8000130:	f7ff ffe8 	bl	8000104 <acc_probes_execute>
 8000134:	b005      	add	sp, #20
 8000136:	bd00      	pop	{pc}

08000138 <acc_probes_execute_uint16>:
 8000138:	b530      	push	{r4, r5, lr}
 800013a:	000c      	movs	r4, r1
 800013c:	0011      	movs	r1, r2
 800013e:	2201      	movs	r2, #1
 8000140:	0005      	movs	r5, r0
 8000142:	b085      	sub	sp, #20
 8000144:	a801      	add	r0, sp, #4
 8000146:	6082      	str	r2, [r0, #8]
 8000148:	005a      	lsls	r2, r3, #1
 800014a:	7005      	strb	r5, [r0, #0]
 800014c:	6044      	str	r4, [r0, #4]
 800014e:	f7ff ffd9 	bl	8000104 <acc_probes_execute>
 8000152:	b005      	add	sp, #20
 8000154:	bd30      	pop	{r4, r5, pc}

08000156 <validate.lto_priv.94>:
 8000156:	6983      	ldr	r3, [r0, #24]
 8000158:	b510      	push	{r4, lr}
 800015a:	0004      	movs	r4, r0
 800015c:	2b00      	cmp	r3, #0
 800015e:	d00a      	beq.n	8000176 <validate.lto_priv.94+0x20>
 8000160:	4b12      	ldr	r3, [pc, #72]	; (80001ac <validate.lto_priv.94+0x56>)
 8000162:	001a      	movs	r2, r3
 8000164:	3230      	adds	r2, #48	; 0x30
 8000166:	7812      	ldrb	r2, [r2, #0]
 8000168:	2a00      	cmp	r2, #0
 800016a:	d004      	beq.n	8000176 <validate.lto_priv.94+0x20>
 800016c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800016e:	4a10      	ldr	r2, [pc, #64]	; (80001b0 <validate.lto_priv.94+0x5a>)
 8000170:	4910      	ldr	r1, [pc, #64]	; (80001b4 <validate.lto_priv.94+0x5e>)
 8000172:	2001      	movs	r0, #1
 8000174:	4798      	blx	r3
 8000176:	69e3      	ldr	r3, [r4, #28]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d00a      	beq.n	8000192 <validate.lto_priv.94+0x3c>
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <validate.lto_priv.94+0x56>)
 800017e:	001a      	movs	r2, r3
 8000180:	3230      	adds	r2, #48	; 0x30
 8000182:	7812      	ldrb	r2, [r2, #0]
 8000184:	2a00      	cmp	r2, #0
 8000186:	d004      	beq.n	8000192 <validate.lto_priv.94+0x3c>
 8000188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <validate.lto_priv.94+0x62>)
 800018c:	4909      	ldr	r1, [pc, #36]	; (80001b4 <validate.lto_priv.94+0x5e>)
 800018e:	2001      	movs	r0, #1
 8000190:	4798      	blx	r3
 8000192:	6963      	ldr	r3, [r4, #20]
 8000194:	2001      	movs	r0, #1
 8000196:	2b00      	cmp	r3, #0
 8000198:	d006      	beq.n	80001a8 <validate.lto_priv.94+0x52>
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <validate.lto_priv.94+0x56>)
 800019c:	2000      	movs	r0, #0
 800019e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001a0:	4a06      	ldr	r2, [pc, #24]	; (80001bc <validate.lto_priv.94+0x66>)
 80001a2:	4904      	ldr	r1, [pc, #16]	; (80001b4 <validate.lto_priv.94+0x5e>)
 80001a4:	4798      	blx	r3
 80001a6:	2000      	movs	r0, #0
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	46c0      	nop			; (mov r8, r8)
 80001ac:	200005d8 	.word	0x200005d8
 80001b0:	0801ca68 	.word	0x0801ca68
 80001b4:	0801ca79 	.word	0x0801ca79
 80001b8:	0801ca8f 	.word	0x0801ca8f
 80001bc:	0801ca9e 	.word	0x0801ca9e

080001c0 <filter_no_operation>:
 80001c0:	4770      	bx	lr

080001c2 <reset.lto_priv.105>:
 80001c2:	4770      	bx	lr

080001c4 <consume>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	0004      	movs	r4, r0
 80001c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80001ca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80001cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80001ce:	6900      	ldr	r0, [r0, #16]
 80001d0:	4798      	blx	r3
 80001d2:	2200      	movs	r2, #0
 80001d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80001d6:	615a      	str	r2, [r3, #20]
 80001d8:	bd10      	pop	{r4, pc}

080001da <validate.lto_priv.93>:
 80001da:	6942      	ldr	r2, [r0, #20]
 80001dc:	6903      	ldr	r3, [r0, #16]
 80001de:	b510      	push	{r4, lr}
 80001e0:	4293      	cmp	r3, r2
 80001e2:	d107      	bne.n	80001f4 <validate.lto_priv.93+0x1a>
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <validate.lto_priv.93+0x52>)
 80001e6:	2000      	movs	r0, #0
 80001e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ea:	4a11      	ldr	r2, [pc, #68]	; (8000230 <validate.lto_priv.93+0x56>)
 80001ec:	4911      	ldr	r1, [pc, #68]	; (8000234 <validate.lto_priv.93+0x5a>)
 80001ee:	4798      	blx	r3
 80001f0:	2000      	movs	r0, #0
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	6984      	ldr	r4, [r0, #24]
 80001f6:	2c00      	cmp	r4, #0
 80001f8:	d007      	beq.n	800020a <validate.lto_priv.93+0x30>
 80001fa:	4b0c      	ldr	r3, [pc, #48]	; (800022c <validate.lto_priv.93+0x52>)
 80001fc:	2000      	movs	r0, #0
 80001fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000200:	4a0d      	ldr	r2, [pc, #52]	; (8000238 <validate.lto_priv.93+0x5e>)
 8000202:	490c      	ldr	r1, [pc, #48]	; (8000234 <validate.lto_priv.93+0x5a>)
 8000204:	4798      	blx	r3
 8000206:	2000      	movs	r0, #0
 8000208:	e7f3      	b.n	80001f2 <validate.lto_priv.93+0x18>
 800020a:	69c3      	ldr	r3, [r0, #28]
 800020c:	3304      	adds	r3, #4
 800020e:	429a      	cmp	r2, r3
 8000210:	d007      	beq.n	8000222 <validate.lto_priv.93+0x48>
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <validate.lto_priv.93+0x52>)
 8000214:	0020      	movs	r0, r4
 8000216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000218:	4a08      	ldr	r2, [pc, #32]	; (800023c <validate.lto_priv.93+0x62>)
 800021a:	4906      	ldr	r1, [pc, #24]	; (8000234 <validate.lto_priv.93+0x5a>)
 800021c:	4798      	blx	r3
 800021e:	0020      	movs	r0, r4
 8000220:	e7e7      	b.n	80001f2 <validate.lto_priv.93+0x18>
 8000222:	6800      	ldr	r0, [r0, #0]
 8000224:	6883      	ldr	r3, [r0, #8]
 8000226:	4798      	blx	r3
 8000228:	e7e3      	b.n	80001f2 <validate.lto_priv.93+0x18>
 800022a:	46c0      	nop			; (mov r8, r8)
 800022c:	200005d8 	.word	0x200005d8
 8000230:	0801cac5 	.word	0x0801cac5
 8000234:	0801caf1 	.word	0x0801caf1
 8000238:	0801cb15 	.word	0x0801cb15
 800023c:	0801cb35 	.word	0x0801cb35

08000240 <reset.lto_priv.104>:
 8000240:	2301      	movs	r3, #1
 8000242:	b510      	push	{r4, lr}
 8000244:	69c2      	ldr	r2, [r0, #28]
 8000246:	6800      	ldr	r0, [r0, #0]
 8000248:	7013      	strb	r3, [r2, #0]
 800024a:	68c3      	ldr	r3, [r0, #12]
 800024c:	4798      	blx	r3
 800024e:	bd10      	pop	{r4, pc}

08000250 <filter_q3_12_complex.lto_priv.121>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	46c6      	mov	lr, r8
 8000254:	000f      	movs	r7, r1
 8000256:	218b      	movs	r1, #139	; 0x8b
 8000258:	b500      	push	{lr}
 800025a:	05c9      	lsls	r1, r1, #23
 800025c:	0006      	movs	r6, r0
 800025e:	1c18      	adds	r0, r3, #0
 8000260:	1c1c      	adds	r4, r3, #0
 8000262:	0895      	lsrs	r5, r2, #2
 8000264:	f010 fc44 	bl	8010af0 <__aeabi_fmul>
 8000268:	2100      	movs	r1, #0
 800026a:	4680      	mov	r8, r0
 800026c:	1c20      	adds	r0, r4, #0
 800026e:	f011 f955 	bl	801151c <__aeabi_fcmpge>
 8000272:	2800      	cmp	r0, #0
 8000274:	d10f      	bne.n	8000296 <filter_q3_12_complex.lto_priv.121+0x46>
 8000276:	21bf      	movs	r1, #191	; 0xbf
 8000278:	0609      	lsls	r1, r1, #24
 800027a:	4640      	mov	r0, r8
 800027c:	f010 f98c 	bl	8010598 <__aeabi_fadd>
 8000280:	f011 fb2c 	bl	80118dc <__aeabi_f2iz>
 8000284:	b204      	sxth	r4, r0
 8000286:	0030      	movs	r0, r6
 8000288:	00aa      	lsls	r2, r5, #2
 800028a:	18ba      	adds	r2, r7, r2
 800028c:	42ba      	cmp	r2, r7
 800028e:	d105      	bne.n	800029c <filter_q3_12_complex.lto_priv.121+0x4c>
 8000290:	bc04      	pop	{r2}
 8000292:	4690      	mov	r8, r2
 8000294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000296:	21fc      	movs	r1, #252	; 0xfc
 8000298:	0589      	lsls	r1, r1, #22
 800029a:	e7ee      	b.n	800027a <filter_q3_12_complex.lto_priv.121+0x2a>
 800029c:	2300      	movs	r3, #0
 800029e:	5efe      	ldrsh	r6, [r7, r3]
 80002a0:	2300      	movs	r3, #0
 80002a2:	5ec5      	ldrsh	r5, [r0, r3]
 80002a4:	1bad      	subs	r5, r5, r6
 80002a6:	4365      	muls	r5, r4
 80002a8:	17eb      	asrs	r3, r5, #31
 80002aa:	051b      	lsls	r3, r3, #20
 80002ac:	0d1b      	lsrs	r3, r3, #20
 80002ae:	195b      	adds	r3, r3, r5
 80002b0:	131b      	asrs	r3, r3, #12
 80002b2:	199b      	adds	r3, r3, r6
 80002b4:	803b      	strh	r3, [r7, #0]
 80002b6:	2302      	movs	r3, #2
 80002b8:	5ec5      	ldrsh	r5, [r0, r3]
 80002ba:	2302      	movs	r3, #2
 80002bc:	5efe      	ldrsh	r6, [r7, r3]
 80002be:	3004      	adds	r0, #4
 80002c0:	1bad      	subs	r5, r5, r6
 80002c2:	4365      	muls	r5, r4
 80002c4:	17eb      	asrs	r3, r5, #31
 80002c6:	051b      	lsls	r3, r3, #20
 80002c8:	0d1b      	lsrs	r3, r3, #20
 80002ca:	195b      	adds	r3, r3, r5
 80002cc:	131b      	asrs	r3, r3, #12
 80002ce:	199b      	adds	r3, r3, r6
 80002d0:	807b      	strh	r3, [r7, #2]
 80002d2:	3704      	adds	r7, #4
 80002d4:	e7da      	b.n	800028c <filter_q3_12_complex.lto_priv.121+0x3c>

080002d6 <validate.lto_priv.92>:
 80002d6:	6983      	ldr	r3, [r0, #24]
 80002d8:	b510      	push	{r4, lr}
 80002da:	0004      	movs	r4, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d00a      	beq.n	80002f6 <validate.lto_priv.92+0x20>
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <validate.lto_priv.92+0x46>)
 80002e2:	001a      	movs	r2, r3
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	d004      	beq.n	80002f6 <validate.lto_priv.92+0x20>
 80002ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002ee:	4a0c      	ldr	r2, [pc, #48]	; (8000320 <validate.lto_priv.92+0x4a>)
 80002f0:	490c      	ldr	r1, [pc, #48]	; (8000324 <validate.lto_priv.92+0x4e>)
 80002f2:	2001      	movs	r0, #1
 80002f4:	4798      	blx	r3
 80002f6:	69e3      	ldr	r3, [r4, #28]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d00a      	beq.n	8000312 <validate.lto_priv.92+0x3c>
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <validate.lto_priv.92+0x46>)
 80002fe:	001a      	movs	r2, r3
 8000300:	3230      	adds	r2, #48	; 0x30
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	2a00      	cmp	r2, #0
 8000306:	d004      	beq.n	8000312 <validate.lto_priv.92+0x3c>
 8000308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800030a:	4a07      	ldr	r2, [pc, #28]	; (8000328 <validate.lto_priv.92+0x52>)
 800030c:	4905      	ldr	r1, [pc, #20]	; (8000324 <validate.lto_priv.92+0x4e>)
 800030e:	2001      	movs	r0, #1
 8000310:	4798      	blx	r3
 8000312:	6820      	ldr	r0, [r4, #0]
 8000314:	6883      	ldr	r3, [r0, #8]
 8000316:	4798      	blx	r3
 8000318:	bd10      	pop	{r4, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	200005d8 	.word	0x200005d8
 8000320:	0801ca68 	.word	0x0801ca68
 8000324:	0801cb5c 	.word	0x0801cb5c
 8000328:	0801ca8f 	.word	0x0801ca8f

0800032c <event.lto_priv.118>:
 800032c:	b570      	push	{r4, r5, r6, lr}
 800032e:	0004      	movs	r4, r0
 8000330:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000332:	6945      	ldr	r5, [r0, #20]
 8000334:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	6900      	ldr	r0, [r0, #16]
 800033a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800033c:	4798      	blx	r3
 800033e:	7028      	strb	r0, [r5, #0]
 8000340:	6820      	ldr	r0, [r4, #0]
 8000342:	6843      	ldr	r3, [r0, #4]
 8000344:	4798      	blx	r3
 8000346:	bd70      	pop	{r4, r5, r6, pc}

08000348 <saturation_check_i16>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	0005      	movs	r5, r0
 800034c:	000c      	movs	r4, r1
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <saturation_check_i16+0x54>)
 8000350:	1c11      	adds	r1, r2, #0
 8000352:	f010 fcff 	bl	8010d54 <__aeabi_fsub>
 8000356:	4911      	ldr	r1, [pc, #68]	; (800039c <saturation_check_i16+0x54>)
 8000358:	f010 fab8 	bl	80108cc <__aeabi_fdiv>
 800035c:	21c7      	movs	r1, #199	; 0xc7
 800035e:	0609      	lsls	r1, r1, #24
 8000360:	1c07      	adds	r7, r0, #0
 8000362:	f010 fbc5 	bl	8010af0 <__aeabi_fmul>
 8000366:	f011 fab9 	bl	80118dc <__aeabi_f2iz>
 800036a:	490d      	ldr	r1, [pc, #52]	; (80003a0 <saturation_check_i16+0x58>)
 800036c:	b206      	sxth	r6, r0
 800036e:	1c38      	adds	r0, r7, #0
 8000370:	f010 fbbe 	bl	8010af0 <__aeabi_fmul>
 8000374:	f011 fab2 	bl	80118dc <__aeabi_f2iz>
 8000378:	0864      	lsrs	r4, r4, #1
 800037a:	0064      	lsls	r4, r4, #1
 800037c:	b200      	sxth	r0, r0
 800037e:	192c      	adds	r4, r5, r4
 8000380:	42a5      	cmp	r5, r4
 8000382:	d101      	bne.n	8000388 <saturation_check_i16+0x40>
 8000384:	2000      	movs	r0, #0
 8000386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000388:	2300      	movs	r3, #0
 800038a:	5eea      	ldrsh	r2, [r5, r3]
 800038c:	4290      	cmp	r0, r2
 800038e:	dd02      	ble.n	8000396 <saturation_check_i16+0x4e>
 8000390:	3502      	adds	r5, #2
 8000392:	4296      	cmp	r6, r2
 8000394:	dbf4      	blt.n	8000380 <saturation_check_i16+0x38>
 8000396:	2001      	movs	r0, #1
 8000398:	e7f5      	b.n	8000386 <saturation_check_i16+0x3e>
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	42c80000 	.word	0x42c80000
 80003a0:	46fffe00 	.word	0x46fffe00

080003a4 <validate.lto_priv.91>:
 80003a4:	6903      	ldr	r3, [r0, #16]
 80003a6:	6942      	ldr	r2, [r0, #20]
 80003a8:	b510      	push	{r4, lr}
 80003aa:	0004      	movs	r4, r0
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d007      	beq.n	80003c0 <validate.lto_priv.91+0x1c>
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <validate.lto_priv.91+0x5c>)
 80003b2:	2000      	movs	r0, #0
 80003b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b6:	4a13      	ldr	r2, [pc, #76]	; (8000404 <validate.lto_priv.91+0x60>)
 80003b8:	4913      	ldr	r1, [pc, #76]	; (8000408 <validate.lto_priv.91+0x64>)
 80003ba:	4798      	blx	r3
 80003bc:	2000      	movs	r0, #0
 80003be:	bd10      	pop	{r4, pc}
 80003c0:	6983      	ldr	r3, [r0, #24]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00a      	beq.n	80003dc <validate.lto_priv.91+0x38>
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <validate.lto_priv.91+0x5c>)
 80003c8:	001a      	movs	r2, r3
 80003ca:	3230      	adds	r2, #48	; 0x30
 80003cc:	7812      	ldrb	r2, [r2, #0]
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d004      	beq.n	80003dc <validate.lto_priv.91+0x38>
 80003d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <validate.lto_priv.91+0x68>)
 80003d6:	490c      	ldr	r1, [pc, #48]	; (8000408 <validate.lto_priv.91+0x64>)
 80003d8:	2001      	movs	r0, #1
 80003da:	4798      	blx	r3
 80003dc:	69e3      	ldr	r3, [r4, #28]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00a      	beq.n	80003f8 <validate.lto_priv.91+0x54>
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <validate.lto_priv.91+0x5c>)
 80003e4:	001a      	movs	r2, r3
 80003e6:	3230      	adds	r2, #48	; 0x30
 80003e8:	7812      	ldrb	r2, [r2, #0]
 80003ea:	2a00      	cmp	r2, #0
 80003ec:	d004      	beq.n	80003f8 <validate.lto_priv.91+0x54>
 80003ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <validate.lto_priv.91+0x6c>)
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <validate.lto_priv.91+0x64>)
 80003f4:	2001      	movs	r0, #1
 80003f6:	4798      	blx	r3
 80003f8:	6820      	ldr	r0, [r4, #0]
 80003fa:	6883      	ldr	r3, [r0, #8]
 80003fc:	4798      	blx	r3
 80003fe:	e7de      	b.n	80003be <validate.lto_priv.91+0x1a>
 8000400:	200005d8 	.word	0x200005d8
 8000404:	0801cb75 	.word	0x0801cb75
 8000408:	0801cb9d 	.word	0x0801cb9d
 800040c:	0801ca68 	.word	0x0801ca68
 8000410:	0801ca8f 	.word	0x0801ca8f

08000414 <event.lto_priv.117>:
 8000414:	b510      	push	{r4, lr}
 8000416:	0004      	movs	r4, r0
 8000418:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800041a:	4798      	blx	r3
 800041c:	6820      	ldr	r0, [r4, #0]
 800041e:	6843      	ldr	r3, [r0, #4]
 8000420:	4798      	blx	r3
 8000422:	bd10      	pop	{r4, pc}

08000424 <validate.lto_priv.90>:
 8000424:	6983      	ldr	r3, [r0, #24]
 8000426:	b510      	push	{r4, lr}
 8000428:	0004      	movs	r4, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d00a      	beq.n	8000444 <validate.lto_priv.90+0x20>
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <validate.lto_priv.90+0x44>)
 8000430:	001a      	movs	r2, r3
 8000432:	3230      	adds	r2, #48	; 0x30
 8000434:	7812      	ldrb	r2, [r2, #0]
 8000436:	2a00      	cmp	r2, #0
 8000438:	d004      	beq.n	8000444 <validate.lto_priv.90+0x20>
 800043a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <validate.lto_priv.90+0x48>)
 800043e:	490c      	ldr	r1, [pc, #48]	; (8000470 <validate.lto_priv.90+0x4c>)
 8000440:	2001      	movs	r0, #1
 8000442:	4798      	blx	r3
 8000444:	69e3      	ldr	r3, [r4, #28]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d00a      	beq.n	8000460 <validate.lto_priv.90+0x3c>
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <validate.lto_priv.90+0x44>)
 800044c:	001a      	movs	r2, r3
 800044e:	3230      	adds	r2, #48	; 0x30
 8000450:	7812      	ldrb	r2, [r2, #0]
 8000452:	2a00      	cmp	r2, #0
 8000454:	d004      	beq.n	8000460 <validate.lto_priv.90+0x3c>
 8000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000458:	4a06      	ldr	r2, [pc, #24]	; (8000474 <validate.lto_priv.90+0x50>)
 800045a:	4905      	ldr	r1, [pc, #20]	; (8000470 <validate.lto_priv.90+0x4c>)
 800045c:	2001      	movs	r0, #1
 800045e:	4798      	blx	r3
 8000460:	6820      	ldr	r0, [r4, #0]
 8000462:	6883      	ldr	r3, [r0, #8]
 8000464:	4798      	blx	r3
 8000466:	bd10      	pop	{r4, pc}
 8000468:	200005d8 	.word	0x200005d8
 800046c:	0801ca68 	.word	0x0801ca68
 8000470:	0801cbb8 	.word	0x0801cbb8
 8000474:	0801ca8f 	.word	0x0801ca8f

08000478 <event.lto_priv.116>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	0004      	movs	r4, r0
 800047c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800047e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8000480:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 8000482:	6809      	ldr	r1, [r1, #0]
 8000484:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000486:	6900      	ldr	r0, [r0, #16]
 8000488:	47a8      	blx	r5
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	6843      	ldr	r3, [r0, #4]
 800048e:	4798      	blx	r3
 8000490:	bd70      	pop	{r4, r5, r6, pc}

08000492 <noise_level_normalization_u16>:
 8000492:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000494:	464f      	mov	r7, r9
 8000496:	4646      	mov	r6, r8
 8000498:	46d6      	mov	lr, sl
 800049a:	b5c0      	push	{r6, r7, lr}
 800049c:	001f      	movs	r7, r3
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <noise_level_normalization_u16+0x62>)
 80004a0:	0016      	movs	r6, r2
 80004a2:	4698      	mov	r8, r3
 80004a4:	2301      	movs	r3, #1
 80004a6:	425b      	negs	r3, r3
 80004a8:	4699      	mov	r9, r3
 80004aa:	2300      	movs	r3, #0
 80004ac:	0004      	movs	r4, r0
 80004ae:	469a      	mov	sl, r3
 80004b0:	084d      	lsrs	r5, r1, #1
 80004b2:	006d      	lsls	r5, r5, #1
 80004b4:	1945      	adds	r5, r0, r5
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	d104      	bne.n	80004c4 <noise_level_normalization_u16+0x32>
 80004ba:	bc1c      	pop	{r2, r3, r4}
 80004bc:	4690      	mov	r8, r2
 80004be:	4699      	mov	r9, r3
 80004c0:	46a2      	mov	sl, r4
 80004c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <noise_level_normalization_u16+0x66>)
 80004c6:	8820      	ldrh	r0, [r4, #0]
 80004c8:	469c      	mov	ip, r3
 80004ca:	4460      	add	r0, ip
 80004cc:	4378      	muls	r0, r7
 80004ce:	0031      	movs	r1, r6
 80004d0:	f010 feca 	bl	8011268 <__divsi3>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	021b      	lsls	r3, r3, #8
 80004d8:	18c0      	adds	r0, r0, r3
 80004da:	d503      	bpl.n	80004e4 <noise_level_normalization_u16+0x52>
 80004dc:	4653      	mov	r3, sl
 80004de:	8023      	strh	r3, [r4, #0]
 80004e0:	3402      	adds	r4, #2
 80004e2:	e7e8      	b.n	80004b6 <noise_level_normalization_u16+0x24>
 80004e4:	4540      	cmp	r0, r8
 80004e6:	dd02      	ble.n	80004ee <noise_level_normalization_u16+0x5c>
 80004e8:	464b      	mov	r3, r9
 80004ea:	8023      	strh	r3, [r4, #0]
 80004ec:	e7f8      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004ee:	8020      	strh	r0, [r4, #0]
 80004f0:	e7f6      	b.n	80004e0 <noise_level_normalization_u16+0x4e>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	0000ffff 	.word	0x0000ffff
 80004f8:	ffff8000 	.word	0xffff8000

080004fc <validate.lto_priv.89>:
 80004fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80004fe:	4a24      	ldr	r2, [pc, #144]	; (8000590 <validate.lto_priv.89+0x94>)
 8000500:	b510      	push	{r4, lr}
 8000502:	0004      	movs	r4, r0
 8000504:	4293      	cmp	r3, r2
 8000506:	d10b      	bne.n	8000520 <validate.lto_priv.89+0x24>
 8000508:	6903      	ldr	r3, [r0, #16]
 800050a:	6942      	ldr	r2, [r0, #20]
 800050c:	4293      	cmp	r3, r2
 800050e:	d01e      	beq.n	800054e <validate.lto_priv.89+0x52>
 8000510:	4b20      	ldr	r3, [pc, #128]	; (8000594 <validate.lto_priv.89+0x98>)
 8000512:	2000      	movs	r0, #0
 8000514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000516:	4a20      	ldr	r2, [pc, #128]	; (8000598 <validate.lto_priv.89+0x9c>)
 8000518:	4920      	ldr	r1, [pc, #128]	; (800059c <validate.lto_priv.89+0xa0>)
 800051a:	4798      	blx	r3
 800051c:	2000      	movs	r0, #0
 800051e:	bd10      	pop	{r4, pc}
 8000520:	4a1f      	ldr	r2, [pc, #124]	; (80005a0 <validate.lto_priv.89+0xa4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <validate.lto_priv.89+0x42>
 8000526:	6903      	ldr	r3, [r0, #16]
 8000528:	6942      	ldr	r2, [r0, #20]
 800052a:	4293      	cmp	r3, r2
 800052c:	d10f      	bne.n	800054e <validate.lto_priv.89+0x52>
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <validate.lto_priv.89+0x98>)
 8000530:	2000      	movs	r0, #0
 8000532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000534:	4a1b      	ldr	r2, [pc, #108]	; (80005a4 <validate.lto_priv.89+0xa8>)
 8000536:	4919      	ldr	r1, [pc, #100]	; (800059c <validate.lto_priv.89+0xa0>)
 8000538:	4798      	blx	r3
 800053a:	2000      	movs	r0, #0
 800053c:	e7ef      	b.n	800051e <validate.lto_priv.89+0x22>
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <validate.lto_priv.89+0x98>)
 8000540:	2000      	movs	r0, #0
 8000542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000544:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <validate.lto_priv.89+0xac>)
 8000546:	4915      	ldr	r1, [pc, #84]	; (800059c <validate.lto_priv.89+0xa0>)
 8000548:	4798      	blx	r3
 800054a:	2000      	movs	r0, #0
 800054c:	e7e7      	b.n	800051e <validate.lto_priv.89+0x22>
 800054e:	69a3      	ldr	r3, [r4, #24]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d00a      	beq.n	800056a <validate.lto_priv.89+0x6e>
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <validate.lto_priv.89+0x98>)
 8000556:	001a      	movs	r2, r3
 8000558:	3230      	adds	r2, #48	; 0x30
 800055a:	7812      	ldrb	r2, [r2, #0]
 800055c:	2a00      	cmp	r2, #0
 800055e:	d004      	beq.n	800056a <validate.lto_priv.89+0x6e>
 8000560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <validate.lto_priv.89+0xb0>)
 8000564:	490d      	ldr	r1, [pc, #52]	; (800059c <validate.lto_priv.89+0xa0>)
 8000566:	2001      	movs	r0, #1
 8000568:	4798      	blx	r3
 800056a:	69e3      	ldr	r3, [r4, #28]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d00a      	beq.n	8000586 <validate.lto_priv.89+0x8a>
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <validate.lto_priv.89+0x98>)
 8000572:	001a      	movs	r2, r3
 8000574:	3230      	adds	r2, #48	; 0x30
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	2a00      	cmp	r2, #0
 800057a:	d004      	beq.n	8000586 <validate.lto_priv.89+0x8a>
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <validate.lto_priv.89+0xb4>)
 8000580:	4906      	ldr	r1, [pc, #24]	; (800059c <validate.lto_priv.89+0xa0>)
 8000582:	2001      	movs	r0, #1
 8000584:	4798      	blx	r3
 8000586:	6820      	ldr	r0, [r4, #0]
 8000588:	6883      	ldr	r3, [r0, #8]
 800058a:	4798      	blx	r3
 800058c:	e7c7      	b.n	800051e <validate.lto_priv.89+0x22>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	08001d81 	.word	0x08001d81
 8000594:	200005d8 	.word	0x200005d8
 8000598:	0801cb75 	.word	0x0801cb75
 800059c:	0801cbda 	.word	0x0801cbda
 80005a0:	08001e3b 	.word	0x08001e3b
 80005a4:	0801cbeb 	.word	0x0801cbeb
 80005a8:	0801cc20 	.word	0x0801cc20
 80005ac:	0801ca68 	.word	0x0801ca68
 80005b0:	0801ca8f 	.word	0x0801ca8f

080005b4 <event.lto_priv.115>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	0004      	movs	r4, r0
 80005b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80005ba:	4798      	blx	r3
 80005bc:	6820      	ldr	r0, [r4, #0]
 80005be:	6843      	ldr	r3, [r0, #4]
 80005c0:	4798      	blx	r3
 80005c2:	bd10      	pop	{r4, pc}

080005c4 <validate.lto_priv.88>:
 80005c4:	6903      	ldr	r3, [r0, #16]
 80005c6:	6942      	ldr	r2, [r0, #20]
 80005c8:	b510      	push	{r4, lr}
 80005ca:	0004      	movs	r4, r0
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d007      	beq.n	80005e0 <validate.lto_priv.88+0x1c>
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <validate.lto_priv.88+0x5c>)
 80005d2:	2000      	movs	r0, #0
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <validate.lto_priv.88+0x60>)
 80005d8:	4913      	ldr	r1, [pc, #76]	; (8000628 <validate.lto_priv.88+0x64>)
 80005da:	4798      	blx	r3
 80005dc:	2000      	movs	r0, #0
 80005de:	bd10      	pop	{r4, pc}
 80005e0:	6983      	ldr	r3, [r0, #24]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d00a      	beq.n	80005fc <validate.lto_priv.88+0x38>
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <validate.lto_priv.88+0x5c>)
 80005e8:	001a      	movs	r2, r3
 80005ea:	3230      	adds	r2, #48	; 0x30
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	d004      	beq.n	80005fc <validate.lto_priv.88+0x38>
 80005f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <validate.lto_priv.88+0x68>)
 80005f6:	490c      	ldr	r1, [pc, #48]	; (8000628 <validate.lto_priv.88+0x64>)
 80005f8:	2001      	movs	r0, #1
 80005fa:	4798      	blx	r3
 80005fc:	69e3      	ldr	r3, [r4, #28]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00a      	beq.n	8000618 <validate.lto_priv.88+0x54>
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <validate.lto_priv.88+0x5c>)
 8000604:	001a      	movs	r2, r3
 8000606:	3230      	adds	r2, #48	; 0x30
 8000608:	7812      	ldrb	r2, [r2, #0]
 800060a:	2a00      	cmp	r2, #0
 800060c:	d004      	beq.n	8000618 <validate.lto_priv.88+0x54>
 800060e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <validate.lto_priv.88+0x6c>)
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <validate.lto_priv.88+0x64>)
 8000614:	2001      	movs	r0, #1
 8000616:	4798      	blx	r3
 8000618:	6820      	ldr	r0, [r4, #0]
 800061a:	6883      	ldr	r3, [r0, #8]
 800061c:	4798      	blx	r3
 800061e:	e7de      	b.n	80005de <validate.lto_priv.88+0x1a>
 8000620:	200005d8 	.word	0x200005d8
 8000624:	0801cb75 	.word	0x0801cb75
 8000628:	0801cc35 	.word	0x0801cc35
 800062c:	0801ca68 	.word	0x0801ca68
 8000630:	0801ca8f 	.word	0x0801ca8f

08000634 <event.lto_priv.114>:
 8000634:	b510      	push	{r4, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800063a:	4798      	blx	r3
 800063c:	6820      	ldr	r0, [r4, #0]
 800063e:	6843      	ldr	r3, [r0, #4]
 8000640:	4798      	blx	r3
 8000642:	bd10      	pop	{r4, pc}

08000644 <validate.lto_priv.87>:
 8000644:	6983      	ldr	r3, [r0, #24]
 8000646:	b510      	push	{r4, lr}
 8000648:	0004      	movs	r4, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00a      	beq.n	8000664 <validate.lto_priv.87+0x20>
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <validate.lto_priv.87+0x44>)
 8000650:	001a      	movs	r2, r3
 8000652:	3230      	adds	r2, #48	; 0x30
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	2a00      	cmp	r2, #0
 8000658:	d004      	beq.n	8000664 <validate.lto_priv.87+0x20>
 800065a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065c:	4a0b      	ldr	r2, [pc, #44]	; (800068c <validate.lto_priv.87+0x48>)
 800065e:	490c      	ldr	r1, [pc, #48]	; (8000690 <validate.lto_priv.87+0x4c>)
 8000660:	2001      	movs	r0, #1
 8000662:	4798      	blx	r3
 8000664:	69e3      	ldr	r3, [r4, #28]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d00a      	beq.n	8000680 <validate.lto_priv.87+0x3c>
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <validate.lto_priv.87+0x44>)
 800066c:	001a      	movs	r2, r3
 800066e:	3230      	adds	r2, #48	; 0x30
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	2a00      	cmp	r2, #0
 8000674:	d004      	beq.n	8000680 <validate.lto_priv.87+0x3c>
 8000676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <validate.lto_priv.87+0x50>)
 800067a:	4905      	ldr	r1, [pc, #20]	; (8000690 <validate.lto_priv.87+0x4c>)
 800067c:	2001      	movs	r0, #1
 800067e:	4798      	blx	r3
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	6883      	ldr	r3, [r0, #8]
 8000684:	4798      	blx	r3
 8000686:	bd10      	pop	{r4, pc}
 8000688:	200005d8 	.word	0x200005d8
 800068c:	0801ca68 	.word	0x0801ca68
 8000690:	0801cc4d 	.word	0x0801cc4d
 8000694:	0801ca8f 	.word	0x0801ca8f

08000698 <event.lto_priv.113>:
 8000698:	b510      	push	{r4, lr}
 800069a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800069c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800069e:	6800      	ldr	r0, [r0, #0]
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	6843      	ldr	r3, [r0, #4]
 80006a4:	4798      	blx	r3
 80006a6:	bd10      	pop	{r4, pc}

080006a8 <validate.lto_priv.86>:
 80006a8:	6983      	ldr	r3, [r0, #24]
 80006aa:	b510      	push	{r4, lr}
 80006ac:	0004      	movs	r4, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00a      	beq.n	80006c8 <validate.lto_priv.86+0x20>
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <validate.lto_priv.86+0x44>)
 80006b4:	001a      	movs	r2, r3
 80006b6:	3230      	adds	r2, #48	; 0x30
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	d004      	beq.n	80006c8 <validate.lto_priv.86+0x20>
 80006be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <validate.lto_priv.86+0x48>)
 80006c2:	490c      	ldr	r1, [pc, #48]	; (80006f4 <validate.lto_priv.86+0x4c>)
 80006c4:	2001      	movs	r0, #1
 80006c6:	4798      	blx	r3
 80006c8:	69e3      	ldr	r3, [r4, #28]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00a      	beq.n	80006e4 <validate.lto_priv.86+0x3c>
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <validate.lto_priv.86+0x44>)
 80006d0:	001a      	movs	r2, r3
 80006d2:	3230      	adds	r2, #48	; 0x30
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d004      	beq.n	80006e4 <validate.lto_priv.86+0x3c>
 80006da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006dc:	4a06      	ldr	r2, [pc, #24]	; (80006f8 <validate.lto_priv.86+0x50>)
 80006de:	4905      	ldr	r1, [pc, #20]	; (80006f4 <validate.lto_priv.86+0x4c>)
 80006e0:	2001      	movs	r0, #1
 80006e2:	4798      	blx	r3
 80006e4:	6820      	ldr	r0, [r4, #0]
 80006e6:	6883      	ldr	r3, [r0, #8]
 80006e8:	4798      	blx	r3
 80006ea:	bd10      	pop	{r4, pc}
 80006ec:	200005d8 	.word	0x200005d8
 80006f0:	0801ca68 	.word	0x0801ca68
 80006f4:	0801cc5a 	.word	0x0801cc5a
 80006f8:	0801ca8f 	.word	0x0801ca8f

080006fc <convert_q12_4_to_q3_12_complex>:
 80006fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006fe:	2600      	movs	r6, #0
 8000700:	0852      	lsrs	r2, r2, #1
 8000702:	0004      	movs	r4, r0
 8000704:	4d06      	ldr	r5, [pc, #24]	; (8000720 <convert_q12_4_to_q3_12_complex+0x24>)
 8000706:	0090      	lsls	r0, r2, #2
 8000708:	1809      	adds	r1, r1, r0
 800070a:	3904      	subs	r1, #4
 800070c:	3a01      	subs	r2, #1
 800070e:	d200      	bcs.n	8000712 <convert_q12_4_to_q3_12_complex+0x16>
 8000710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000712:	0053      	lsls	r3, r2, #1
 8000714:	5ee3      	ldrsh	r3, [r4, r3]
 8000716:	804e      	strh	r6, [r1, #2]
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	406b      	eors	r3, r5
 800071c:	800b      	strh	r3, [r1, #0]
 800071e:	e7f4      	b.n	800070a <convert_q12_4_to_q3_12_complex+0xe>
 8000720:	ffffc000 	.word	0xffffc000

08000724 <convert_q12_4_to_q3_12>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	0853      	lsrs	r3, r2, #1
 8000728:	4d06      	ldr	r5, [pc, #24]	; (8000744 <convert_q12_4_to_q3_12+0x20>)
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	3b02      	subs	r3, #2
 800072e:	1c9c      	adds	r4, r3, #2
 8000730:	d103      	bne.n	800073a <convert_q12_4_to_q3_12+0x16>
 8000732:	3303      	adds	r3, #3
 8000734:	439a      	bics	r2, r3
 8000736:	0010      	movs	r0, r2
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	5ec4      	ldrsh	r4, [r0, r3]
 800073c:	1064      	asrs	r4, r4, #1
 800073e:	406c      	eors	r4, r5
 8000740:	52cc      	strh	r4, [r1, r3]
 8000742:	e7f3      	b.n	800072c <convert_q12_4_to_q3_12+0x8>
 8000744:	ffffc000 	.word	0xffffc000

08000748 <convert_q12_4_to_q15_16>:
 8000748:	0852      	lsrs	r2, r2, #1
 800074a:	0013      	movs	r3, r2
 800074c:	b530      	push	{r4, r5, lr}
 800074e:	3b01      	subs	r3, #1
 8000750:	d201      	bcs.n	8000756 <convert_q12_4_to_q15_16+0xe>
 8000752:	0090      	lsls	r0, r2, #2
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	005c      	lsls	r4, r3, #1
 8000758:	5b04      	ldrh	r4, [r0, r4]
 800075a:	009d      	lsls	r5, r3, #2
 800075c:	0324      	lsls	r4, r4, #12
 800075e:	514c      	str	r4, [r1, r5]
 8000760:	e7f5      	b.n	800074e <convert_q12_4_to_q15_16+0x6>

08000762 <convert_q3_12_complex_to_f32_complex>:
 8000762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000764:	4647      	mov	r7, r8
 8000766:	46ce      	mov	lr, r9
 8000768:	b580      	push	{r7, lr}
 800076a:	0007      	movs	r7, r0
 800076c:	0894      	lsrs	r4, r2, #2
 800076e:	00e6      	lsls	r6, r4, #3
 8000770:	198d      	adds	r5, r1, r6
 8000772:	00a4      	lsls	r4, r4, #2
 8000774:	3c04      	subs	r4, #4
 8000776:	3d08      	subs	r5, #8
 8000778:	1d23      	adds	r3, r4, #4
 800077a:	d104      	bne.n	8000786 <convert_q3_12_complex_to_f32_complex+0x24>
 800077c:	0030      	movs	r0, r6
 800077e:	bc0c      	pop	{r2, r3}
 8000780:	4690      	mov	r8, r2
 8000782:	4699      	mov	r9, r3
 8000784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2002      	movs	r0, #2
 800078a:	5e18      	ldrsh	r0, [r3, r0]
 800078c:	f011 f8c6 	bl	801191c <__aeabi_i2f>
 8000790:	21e6      	movs	r1, #230	; 0xe6
 8000792:	0589      	lsls	r1, r1, #22
 8000794:	f010 f9ac 	bl	8010af0 <__aeabi_fmul>
 8000798:	4680      	mov	r8, r0
 800079a:	5f38      	ldrsh	r0, [r7, r4]
 800079c:	f011 f8be 	bl	801191c <__aeabi_i2f>
 80007a0:	21e6      	movs	r1, #230	; 0xe6
 80007a2:	0589      	lsls	r1, r1, #22
 80007a4:	f010 f9a4 	bl	8010af0 <__aeabi_fmul>
 80007a8:	2100      	movs	r1, #0
 80007aa:	4681      	mov	r9, r0
 80007ac:	4640      	mov	r0, r8
 80007ae:	f010 f99f 	bl	8010af0 <__aeabi_fmul>
 80007b2:	1c01      	adds	r1, r0, #0
 80007b4:	4648      	mov	r0, r9
 80007b6:	f00f feef 	bl	8010598 <__aeabi_fadd>
 80007ba:	4643      	mov	r3, r8
 80007bc:	6028      	str	r0, [r5, #0]
 80007be:	606b      	str	r3, [r5, #4]
 80007c0:	e7d8      	b.n	8000774 <convert_q3_12_complex_to_f32_complex+0x12>

080007c2 <convert_q15_16_to_f32>:
 80007c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c4:	4647      	mov	r7, r8
 80007c6:	46ce      	mov	lr, r9
 80007c8:	4688      	mov	r8, r1
 80007ca:	b580      	push	{r7, lr}
 80007cc:	0015      	movs	r5, r2
 80007ce:	0007      	movs	r7, r0
 80007d0:	0894      	lsrs	r4, r2, #2
 80007d2:	00a4      	lsls	r4, r4, #2
 80007d4:	3c04      	subs	r4, #4
 80007d6:	1d23      	adds	r3, r4, #4
 80007d8:	d106      	bne.n	80007e8 <convert_q15_16_to_f32+0x26>
 80007da:	0028      	movs	r0, r5
 80007dc:	2303      	movs	r3, #3
 80007de:	4398      	bics	r0, r3
 80007e0:	bc0c      	pop	{r2, r3}
 80007e2:	4690      	mov	r8, r2
 80007e4:	4699      	mov	r9, r3
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007e8:	593e      	ldr	r6, [r7, r4]
 80007ea:	b2b0      	uxth	r0, r6
 80007ec:	f011 f896 	bl	801191c <__aeabi_i2f>
 80007f0:	21de      	movs	r1, #222	; 0xde
 80007f2:	0589      	lsls	r1, r1, #22
 80007f4:	f010 f97c 	bl	8010af0 <__aeabi_fmul>
 80007f8:	4681      	mov	r9, r0
 80007fa:	1430      	asrs	r0, r6, #16
 80007fc:	f011 f88e 	bl	801191c <__aeabi_i2f>
 8000800:	1c01      	adds	r1, r0, #0
 8000802:	4648      	mov	r0, r9
 8000804:	f00f fec8 	bl	8010598 <__aeabi_fadd>
 8000808:	4643      	mov	r3, r8
 800080a:	5118      	str	r0, [r3, r4]
 800080c:	e7e2      	b.n	80007d4 <convert_q15_16_to_f32+0x12>

0800080e <convert_q3_12_to_u16>:
 800080e:	b510      	push	{r4, lr}
 8000810:	0853      	lsrs	r3, r2, #1
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	3b02      	subs	r3, #2
 8000816:	1c9c      	adds	r4, r3, #2
 8000818:	d103      	bne.n	8000822 <convert_q3_12_to_u16+0x14>
 800081a:	3303      	adds	r3, #3
 800081c:	439a      	bics	r2, r3
 800081e:	0010      	movs	r0, r2
 8000820:	bd10      	pop	{r4, pc}
 8000822:	5ac4      	ldrh	r4, [r0, r3]
 8000824:	0064      	lsls	r4, r4, #1
 8000826:	52cc      	strh	r4, [r1, r3]
 8000828:	e7f4      	b.n	8000814 <convert_q3_12_to_u16+0x6>

0800082a <validate.lto_priv.85>:
 800082a:	6983      	ldr	r3, [r0, #24]
 800082c:	b510      	push	{r4, lr}
 800082e:	0004      	movs	r4, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00a      	beq.n	800084a <validate.lto_priv.85+0x20>
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <validate.lto_priv.85+0x46>)
 8000836:	001a      	movs	r2, r3
 8000838:	3230      	adds	r2, #48	; 0x30
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	2a00      	cmp	r2, #0
 800083e:	d004      	beq.n	800084a <validate.lto_priv.85+0x20>
 8000840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <validate.lto_priv.85+0x4a>)
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <validate.lto_priv.85+0x4e>)
 8000846:	2001      	movs	r0, #1
 8000848:	4798      	blx	r3
 800084a:	69e3      	ldr	r3, [r4, #28]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00a      	beq.n	8000866 <validate.lto_priv.85+0x3c>
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <validate.lto_priv.85+0x46>)
 8000852:	001a      	movs	r2, r3
 8000854:	3230      	adds	r2, #48	; 0x30
 8000856:	7812      	ldrb	r2, [r2, #0]
 8000858:	2a00      	cmp	r2, #0
 800085a:	d004      	beq.n	8000866 <validate.lto_priv.85+0x3c>
 800085c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <validate.lto_priv.85+0x52>)
 8000860:	4905      	ldr	r1, [pc, #20]	; (8000878 <validate.lto_priv.85+0x4e>)
 8000862:	2001      	movs	r0, #1
 8000864:	4798      	blx	r3
 8000866:	6820      	ldr	r0, [r4, #0]
 8000868:	6883      	ldr	r3, [r0, #8]
 800086a:	4798      	blx	r3
 800086c:	bd10      	pop	{r4, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	200005d8 	.word	0x200005d8
 8000874:	0801ca68 	.word	0x0801ca68
 8000878:	0801cc6c 	.word	0x0801cc6c
 800087c:	0801ca8f 	.word	0x0801ca8f

08000880 <event.lto_priv.111>:
 8000880:	b510      	push	{r4, lr}
 8000882:	0004      	movs	r4, r0
 8000884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000886:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	6900      	ldr	r0, [r0, #16]
 800088c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800088e:	4798      	blx	r3
 8000890:	6820      	ldr	r0, [r4, #0]
 8000892:	6843      	ldr	r3, [r0, #4]
 8000894:	4798      	blx	r3
 8000896:	bd10      	pop	{r4, pc}

08000898 <validate.lto_priv.84>:
 8000898:	6983      	ldr	r3, [r0, #24]
 800089a:	b510      	push	{r4, lr}
 800089c:	0004      	movs	r4, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d00a      	beq.n	80008b8 <validate.lto_priv.84+0x20>
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <validate.lto_priv.84+0x44>)
 80008a4:	001a      	movs	r2, r3
 80008a6:	3230      	adds	r2, #48	; 0x30
 80008a8:	7812      	ldrb	r2, [r2, #0]
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d004      	beq.n	80008b8 <validate.lto_priv.84+0x20>
 80008ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <validate.lto_priv.84+0x48>)
 80008b2:	490c      	ldr	r1, [pc, #48]	; (80008e4 <validate.lto_priv.84+0x4c>)
 80008b4:	2001      	movs	r0, #1
 80008b6:	4798      	blx	r3
 80008b8:	69e3      	ldr	r3, [r4, #28]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00a      	beq.n	80008d4 <validate.lto_priv.84+0x3c>
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <validate.lto_priv.84+0x44>)
 80008c0:	001a      	movs	r2, r3
 80008c2:	3230      	adds	r2, #48	; 0x30
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d004      	beq.n	80008d4 <validate.lto_priv.84+0x3c>
 80008ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <validate.lto_priv.84+0x50>)
 80008ce:	4905      	ldr	r1, [pc, #20]	; (80008e4 <validate.lto_priv.84+0x4c>)
 80008d0:	2001      	movs	r0, #1
 80008d2:	4798      	blx	r3
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	6883      	ldr	r3, [r0, #8]
 80008d8:	4798      	blx	r3
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	200005d8 	.word	0x200005d8
 80008e0:	0801ca68 	.word	0x0801ca68
 80008e4:	0801cc7e 	.word	0x0801cc7e
 80008e8:	0801ca8f 	.word	0x0801ca8f

080008ec <reset.lto_priv.95>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	6800      	ldr	r0, [r0, #0]
 80008f0:	68c3      	ldr	r3, [r0, #12]
 80008f2:	4798      	blx	r3
 80008f4:	bd10      	pop	{r4, pc}

080008f6 <reset.lto_priv.103>:
 80008f6:	b510      	push	{r4, lr}
 80008f8:	f7ff fff8 	bl	80008ec <reset.lto_priv.95>
 80008fc:	bd10      	pop	{r4, pc}

080008fe <reset.lto_priv.102>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	f7ff fff4 	bl	80008ec <reset.lto_priv.95>
 8000904:	bd10      	pop	{r4, pc}

08000906 <reset.lto_priv.101>:
 8000906:	b510      	push	{r4, lr}
 8000908:	f7ff fff0 	bl	80008ec <reset.lto_priv.95>
 800090c:	bd10      	pop	{r4, pc}

0800090e <reset.lto_priv.100>:
 800090e:	b510      	push	{r4, lr}
 8000910:	f7ff ffec 	bl	80008ec <reset.lto_priv.95>
 8000914:	bd10      	pop	{r4, pc}

08000916 <reset.lto_priv.99>:
 8000916:	b510      	push	{r4, lr}
 8000918:	f7ff ffe8 	bl	80008ec <reset.lto_priv.95>
 800091c:	bd10      	pop	{r4, pc}

0800091e <reset.lto_priv.98>:
 800091e:	b510      	push	{r4, lr}
 8000920:	f7ff ffe4 	bl	80008ec <reset.lto_priv.95>
 8000924:	bd10      	pop	{r4, pc}

08000926 <reset.lto_priv.97>:
 8000926:	b510      	push	{r4, lr}
 8000928:	f7ff ffe0 	bl	80008ec <reset.lto_priv.95>
 800092c:	bd10      	pop	{r4, pc}

0800092e <reset.lto_priv.96>:
 800092e:	b510      	push	{r4, lr}
 8000930:	f7ff ffdc 	bl	80008ec <reset.lto_priv.95>
 8000934:	bd10      	pop	{r4, pc}

08000936 <event.lto_priv.110>:
 8000936:	b570      	push	{r4, r5, r6, lr}
 8000938:	0004      	movs	r4, r0
 800093a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800093c:	6941      	ldr	r1, [r0, #20]
 800093e:	682a      	ldr	r2, [r5, #0]
 8000940:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000942:	6900      	ldr	r0, [r0, #16]
 8000944:	4798      	blx	r3
 8000946:	6028      	str	r0, [r5, #0]
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	6843      	ldr	r3, [r0, #4]
 800094c:	4798      	blx	r3
 800094e:	bd70      	pop	{r4, r5, r6, pc}

08000950 <event.lto_priv.112>:
 8000950:	b510      	push	{r4, lr}
 8000952:	f7ff fff0 	bl	8000936 <event.lto_priv.110>
 8000956:	bd10      	pop	{r4, pc}

08000958 <acc_sweep_manager_release>:
 8000958:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800095a:	b510      	push	{r4, lr}
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <acc_sweep_manager_release+0xe>
 8000960:	3014      	adds	r0, #20
 8000962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000964:	4798      	blx	r3
 8000966:	bd10      	pop	{r4, pc}

08000968 <acc_sensor_manager_release_measurement>:
 8000968:	6982      	ldr	r2, [r0, #24]
 800096a:	b510      	push	{r4, lr}
 800096c:	2a00      	cmp	r2, #0
 800096e:	d00f      	beq.n	8000990 <acc_sensor_manager_release_measurement+0x28>
 8000970:	2348      	movs	r3, #72	; 0x48
 8000972:	435a      	muls	r2, r3
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <acc_sensor_manager_release_measurement+0x2c>)
 8000976:	3a48      	subs	r2, #72	; 0x48
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	189b      	adds	r3, r3, r2
 800097c:	001a      	movs	r2, r3
 800097e:	3240      	adds	r2, #64	; 0x40
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	2a00      	cmp	r2, #0
 8000984:	d101      	bne.n	800098a <acc_sensor_manager_release_measurement+0x22>
 8000986:	3341      	adds	r3, #65	; 0x41
 8000988:	701a      	strb	r2, [r3, #0]
 800098a:	3004      	adds	r0, #4
 800098c:	f7ff ffe4 	bl	8000958 <acc_sweep_manager_release>
 8000990:	bd10      	pop	{r4, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000008c 	.word	0x2000008c

08000998 <acc_sensor_manager_hibernate_enter>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800099c:	6985      	ldr	r5, [r0, #24]
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	6841      	ldr	r1, [r0, #4]
 80009a2:	0028      	movs	r0, r5
 80009a4:	4798      	blx	r3
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <acc_sensor_manager_hibernate_enter+0x2c>)
 80009a8:	1e04      	subs	r4, r0, #0
 80009aa:	d105      	bne.n	80009b8 <acc_sensor_manager_hibernate_enter+0x20>
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <acc_sensor_manager_hibernate_enter+0x30>)
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <acc_sensor_manager_hibernate_enter+0x34>)
 80009b2:	4798      	blx	r3
 80009b4:	0020      	movs	r0, r4
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0fa      	beq.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009be:	0028      	movs	r0, r5
 80009c0:	4798      	blx	r3
 80009c2:	e7f7      	b.n	80009b4 <acc_sensor_manager_hibernate_enter+0x1c>
 80009c4:	200005d8 	.word	0x200005d8
 80009c8:	0801cc8a 	.word	0x0801cc8a
 80009cc:	0801ccaa 	.word	0x0801ccaa

080009d0 <measure_noise.lto_priv.123>:
 80009d0:	2000      	movs	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <acc_rss_integration_mem_free>:
 80009d4:	b510      	push	{r4, lr}
 80009d6:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <acc_rss_integration_mem_free+0xc>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	4798      	blx	r3
 80009dc:	bd10      	pop	{r4, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	200005d8 	.word	0x200005d8

080009e4 <destroy.lto_priv.154>:
 80009e4:	b510      	push	{r4, lr}
 80009e6:	0004      	movs	r4, r0
 80009e8:	6940      	ldr	r0, [r0, #20]
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d003      	beq.n	80009f6 <destroy.lto_priv.154+0x12>
 80009ee:	f7ff fff1 	bl	80009d4 <acc_rss_integration_mem_free>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6163      	str	r3, [r4, #20]
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <destroy.lto_priv.153>:
 80009f8:	b510      	push	{r4, lr}
 80009fa:	0004      	movs	r4, r0
 80009fc:	6940      	ldr	r0, [r0, #20]
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d003      	beq.n	8000a0a <destroy.lto_priv.153+0x12>
 8000a02:	f7ff ffe7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a06:	2300      	movs	r3, #0
 8000a08:	6163      	str	r3, [r4, #20]
 8000a0a:	bd10      	pop	{r4, pc}

08000a0c <disassemble.lto_priv.159>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	6804      	ldr	r4, [r0, #0]
 8000a10:	0005      	movs	r5, r0
 8000a12:	2c00      	cmp	r4, #0
 8000a14:	d00a      	beq.n	8000a2c <disassemble.lto_priv.159+0x20>
 8000a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a18:	f7ff ffa6 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a1c:	23ea      	movs	r3, #234	; 0xea
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	58e0      	ldr	r0, [r4, r3]
 8000a22:	f7ff ffd7 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff ffd4 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a2c:	0028      	movs	r0, r5
 8000a2e:	f7ff ffd1 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a32:	bd70      	pop	{r4, r5, r6, pc}

08000a34 <disassemble.lto_priv.158>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	6804      	ldr	r4, [r0, #0]
 8000a38:	0005      	movs	r5, r0
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d00a      	beq.n	8000a54 <disassemble.lto_priv.158+0x20>
 8000a3e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000a40:	f7ff ff92 	bl	8000968 <acc_sensor_manager_release_measurement>
 8000a44:	0023      	movs	r3, r4
 8000a46:	33fc      	adds	r3, #252	; 0xfc
 8000a48:	69d8      	ldr	r0, [r3, #28]
 8000a4a:	f7ff ffc3 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a4e:	0020      	movs	r0, r4
 8000a50:	f7ff ffc0 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a54:	0028      	movs	r0, r5
 8000a56:	f7ff ffbd 	bl	80009d4 <acc_rss_integration_mem_free>
 8000a5a:	bd70      	pop	{r4, r5, r6, pc}

08000a5c <acc_rss_integration_sensor_device_power_off>:
 8000a5c:	b510      	push	{r4, lr}
 8000a5e:	4b02      	ldr	r3, [pc, #8]	; (8000a68 <acc_rss_integration_sensor_device_power_off+0xc>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4798      	blx	r3
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	200005d8 	.word	0x200005d8

08000a6c <acc_rss_integration_sensor_device_power_on>:
 8000a6c:	b510      	push	{r4, lr}
 8000a6e:	4b02      	ldr	r3, [pc, #8]	; (8000a78 <acc_rss_integration_sensor_device_power_on+0xc>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4798      	blx	r3
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200005d8 	.word	0x200005d8

08000a7c <acc_sensor_manager_power_on_and_start_sensor>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	6985      	ldr	r5, [r0, #24]
 8000a80:	0004      	movs	r4, r0
 8000a82:	0028      	movs	r0, r5
 8000a84:	f7ff fff2 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000a88:	2148      	movs	r1, #72	; 0x48
 8000a8a:	4369      	muls	r1, r5
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <acc_sensor_manager_power_on_and_start_sensor+0x48>)
 8000a8e:	3948      	subs	r1, #72	; 0x48
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a94:	1859      	adds	r1, r3, r1
 8000a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a98:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d104      	bne.n	8000aac <acc_sensor_manager_power_on_and_start_sensor+0x30>
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	f7ff ffda 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	0020      	movs	r0, r4
 8000aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab0:	0031      	movs	r1, r6
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	3018      	adds	r0, #24
 8000ab6:	4798      	blx	r3
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d0f2      	beq.n	8000aa2 <acc_sensor_manager_power_on_and_start_sensor+0x26>
 8000abc:	2301      	movs	r3, #1
 8000abe:	70e3      	strb	r3, [r4, #3]
 8000ac0:	e7f3      	b.n	8000aaa <acc_sensor_manager_power_on_and_start_sensor+0x2e>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <acc_base_configuration_check.part.6>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8000acc:	2d04      	cmp	r5, #4
 8000ace:	d908      	bls.n	8000ae2 <acc_base_configuration_check.part.6+0x1a>
 8000ad0:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ad2:	4a34      	ldr	r2, [pc, #208]	; (8000ba4 <acc_base_configuration_check.part.6+0xdc>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ad6:	4934      	ldr	r1, [pc, #208]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	4798      	blx	r3
 8000adc:	2400      	movs	r4, #0
 8000ade:	0020      	movs	r0, r4
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d04      	cmp	r5, #4
 8000ae4:	d113      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000ae8:	69dc      	ldr	r4, [r3, #28]
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d105      	bne.n	8000afa <acc_base_configuration_check.part.6+0x32>
 8000aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af0:	4a2e      	ldr	r2, [pc, #184]	; (8000bac <acc_base_configuration_check.part.6+0xe4>)
 8000af2:	492d      	ldr	r1, [pc, #180]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000af4:	0020      	movs	r0, r4
 8000af6:	4798      	blx	r3
 8000af8:	e7f1      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000afa:	7902      	ldrb	r2, [r0, #4]
 8000afc:	2a03      	cmp	r2, #3
 8000afe:	d106      	bne.n	8000b0e <acc_base_configuration_check.part.6+0x46>
 8000b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <acc_base_configuration_check.part.6+0xe8>)
 8000b04:	4928      	ldr	r1, [pc, #160]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b06:	2000      	movs	r0, #0
 8000b08:	4798      	blx	r3
 8000b0a:	2400      	movs	r4, #0
 8000b0c:	e7e7      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b0e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8000b10:	2b16      	cmp	r3, #22
 8000b12:	d907      	bls.n	8000b24 <acc_base_configuration_check.part.6+0x5c>
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <acc_base_configuration_check.part.6+0xec>)
 8000b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1a:	4923      	ldr	r1, [pc, #140]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	4798      	blx	r3
 8000b20:	2400      	movs	r4, #0
 8000b22:	e7dc      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b24:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000b26:	3b01      	subs	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8000b2c:	d907      	bls.n	8000b3e <acc_base_configuration_check.part.6+0x76>
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <acc_base_configuration_check.part.6+0xf0>)
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	491c      	ldr	r1, [pc, #112]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b36:	2000      	movs	r0, #0
 8000b38:	4798      	blx	r3
 8000b3a:	2400      	movs	r4, #0
 8000b3c:	e7cf      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b3e:	7903      	ldrb	r3, [r0, #4]
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d109      	bne.n	8000b58 <acc_base_configuration_check.part.6+0x90>
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d115      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <acc_base_configuration_check.part.6+0xf4>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	4916      	ldr	r1, [pc, #88]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b50:	0028      	movs	r0, r5
 8000b52:	4798      	blx	r3
 8000b54:	002c      	movs	r4, r5
 8000b56:	e7c2      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d10b      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	334e      	adds	r3, #78	; 0x4e
 8000b60:	781c      	ldrb	r4, [r3, #0]
 8000b62:	2c00      	cmp	r4, #0
 8000b64:	d106      	bne.n	8000b74 <acc_base_configuration_check.part.6+0xac>
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b68:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <acc_base_configuration_check.part.6+0xf8>)
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	490e      	ldr	r1, [pc, #56]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b6e:	0020      	movs	r0, r4
 8000b70:	4798      	blx	r3
 8000b72:	e7b4      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b74:	2304      	movs	r3, #4
 8000b76:	439d      	bics	r5, r3
 8000b78:	d103      	bne.n	8000b82 <acc_base_configuration_check.part.6+0xba>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	334e      	adds	r3, #78	; 0x4e
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	3032      	adds	r0, #50	; 0x32
 8000b84:	7803      	ldrb	r3, [r0, #0]
 8000b86:	2401      	movs	r4, #1
 8000b88:	2b06      	cmp	r3, #6
 8000b8a:	d0a8      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	d0a6      	beq.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <acc_base_configuration_check.part.6+0xd8>)
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <acc_base_configuration_check.part.6+0xfc>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	4904      	ldr	r1, [pc, #16]	; (8000ba8 <acc_base_configuration_check.part.6+0xe0>)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	4798      	blx	r3
 8000b9c:	2400      	movs	r4, #0
 8000b9e:	e79e      	b.n	8000ade <acc_base_configuration_check.part.6+0x16>
 8000ba0:	200005d8 	.word	0x200005d8
 8000ba4:	0801ccb9 	.word	0x0801ccb9
 8000ba8:	0801ccd1 	.word	0x0801ccd1
 8000bac:	0801cce4 	.word	0x0801cce4
 8000bb0:	0801cd23 	.word	0x0801cd23
 8000bb4:	0801cd65 	.word	0x0801cd65
 8000bb8:	0801cd99 	.word	0x0801cd99
 8000bbc:	0801cdeb 	.word	0x0801cdeb
 8000bc0:	0801ce27 	.word	0x0801ce27
 8000bc4:	0801ce67 	.word	0x0801ce67

08000bc8 <configuration_is_valid>:
 8000bc8:	b510      	push	{r4, lr}
 8000bca:	0004      	movs	r4, r0
 8000bcc:	2001      	movs	r0, #1
 8000bce:	2c00      	cmp	r4, #0
 8000bd0:	d10a      	bne.n	8000be8 <configuration_is_valid+0x20>
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <configuration_is_valid+0x28>)
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	3330      	adds	r3, #48	; 0x30
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d005      	beq.n	8000bea <configuration_is_valid+0x22>
 8000bde:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000be0:	4904      	ldr	r1, [pc, #16]	; (8000bf4 <configuration_is_valid+0x2c>)
 8000be2:	4a05      	ldr	r2, [pc, #20]	; (8000bf8 <configuration_is_valid+0x30>)
 8000be4:	4798      	blx	r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	0018      	movs	r0, r3
 8000bec:	e7fc      	b.n	8000be8 <configuration_is_valid+0x20>
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	200005d8 	.word	0x200005d8
 8000bf4:	0801ccd1 	.word	0x0801ccd1
 8000bf8:	0801ce7b 	.word	0x0801ce7b

08000bfc <acc_base_configuration_asynchronous_measurement_get>:
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	0004      	movs	r4, r0
 8000c00:	f7ff ffe2 	bl	8000bc8 <configuration_is_valid>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d001      	beq.n	8000c0c <acc_base_configuration_asynchronous_measurement_get+0x10>
 8000c08:	344e      	adds	r4, #78	; 0x4e
 8000c0a:	7820      	ldrb	r0, [r4, #0]
 8000c0c:	bd10      	pop	{r4, pc}

08000c0e <acc_base_configuration_noise_level_normalization_get>:
 8000c0e:	b510      	push	{r4, lr}
 8000c10:	0004      	movs	r4, r0
 8000c12:	f7ff ffd9 	bl	8000bc8 <configuration_is_valid>
 8000c16:	2800      	cmp	r0, #0
 8000c18:	d001      	beq.n	8000c1e <acc_base_configuration_noise_level_normalization_get+0x10>
 8000c1a:	3449      	adds	r4, #73	; 0x49
 8000c1c:	7820      	ldrb	r0, [r4, #0]
 8000c1e:	bd10      	pop	{r4, pc}

08000c20 <acc_base_configuration_downsampling_factor_set>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	0004      	movs	r4, r0
 8000c24:	000d      	movs	r5, r1
 8000c26:	f7ff ffcf 	bl	8000bc8 <configuration_is_valid>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d001      	beq.n	8000c32 <acc_base_configuration_downsampling_factor_set+0x12>
 8000c2e:	3468      	adds	r4, #104	; 0x68
 8000c30:	8025      	strh	r5, [r4, #0]
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <acc_base_configuration_downsampling_factor_get>:
 8000c34:	b510      	push	{r4, lr}
 8000c36:	0004      	movs	r4, r0
 8000c38:	f7ff ffc6 	bl	8000bc8 <configuration_is_valid>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d001      	beq.n	8000c46 <acc_base_configuration_downsampling_factor_get+0x12>
 8000c42:	3468      	adds	r4, #104	; 0x68
 8000c44:	8823      	ldrh	r3, [r4, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	bd10      	pop	{r4, pc}

08000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>:
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	0004      	movs	r4, r0
 8000c4e:	f7ff ffbb 	bl	8000bc8 <configuration_is_valid>
 8000c52:	2300      	movs	r3, #0
 8000c54:	4298      	cmp	r0, r3
 8000c56:	d001      	beq.n	8000c5c <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 8000c58:	3460      	adds	r4, #96	; 0x60
 8000c5a:	8823      	ldrh	r3, [r4, #0]
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <acc_base_configuration_integrator_ramp_up_set>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	0004      	movs	r4, r0
 8000c64:	000d      	movs	r5, r1
 8000c66:	f7ff ffaf 	bl	8000bc8 <configuration_is_valid>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	d001      	beq.n	8000c72 <acc_base_configuration_integrator_ramp_up_set+0x12>
 8000c6e:	3406      	adds	r4, #6
 8000c70:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <acc_base_configuration_wg_duration_set>:
 8000c74:	b570      	push	{r4, r5, r6, lr}
 8000c76:	0004      	movs	r4, r0
 8000c78:	000d      	movs	r5, r1
 8000c7a:	f7ff ffa5 	bl	8000bc8 <configuration_is_valid>
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d001      	beq.n	8000c86 <acc_base_configuration_wg_duration_set+0x12>
 8000c82:	3404      	adds	r4, #4
 8000c84:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000c86:	bd70      	pop	{r4, r5, r6, pc}

08000c88 <acc_base_configuration_wg_duration_get>:
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	f7ff ff9c 	bl	8000bc8 <configuration_is_valid>
 8000c90:	2300      	movs	r3, #0
 8000c92:	4298      	cmp	r0, r3
 8000c94:	d001      	beq.n	8000c9a <acc_base_configuration_wg_duration_get+0x12>
 8000c96:	3404      	adds	r4, #4
 8000c98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	bd10      	pop	{r4, pc}

08000c9e <acc_base_configuration_integrator_set>:
 8000c9e:	b570      	push	{r4, r5, r6, lr}
 8000ca0:	0004      	movs	r4, r0
 8000ca2:	000d      	movs	r5, r1
 8000ca4:	f7ff ff90 	bl	8000bc8 <configuration_is_valid>
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d001      	beq.n	8000cb0 <acc_base_configuration_integrator_set+0x12>
 8000cac:	3402      	adds	r4, #2
 8000cae:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}

08000cb2 <acc_base_configuration_integrator_get>:
 8000cb2:	b510      	push	{r4, lr}
 8000cb4:	0004      	movs	r4, r0
 8000cb6:	f7ff ff87 	bl	8000bc8 <configuration_is_valid>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	4298      	cmp	r0, r3
 8000cbe:	d001      	beq.n	8000cc4 <acc_base_configuration_integrator_get+0x12>
 8000cc0:	3402      	adds	r4, #2
 8000cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	bd10      	pop	{r4, pc}

08000cc8 <acc_base_configuration_update_rate_get>:
 8000cc8:	b510      	push	{r4, lr}
 8000cca:	0004      	movs	r4, r0
 8000ccc:	f7ff ff7c 	bl	8000bc8 <configuration_is_valid>
 8000cd0:	2800      	cmp	r0, #0
 8000cd2:	d00b      	beq.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cd4:	7920      	ldrb	r0, [r4, #4]
 8000cd6:	2803      	cmp	r0, #3
 8000cd8:	d808      	bhi.n	8000cec <acc_base_configuration_update_rate_get+0x24>
 8000cda:	f010 fa27 	bl	801112c <__gnu_thumb1_case_uqi>
 8000cde:	0202      	.short	0x0202
 8000ce0:	0505      	.short	0x0505
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	05c0      	lsls	r0, r0, #23
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	68a0      	ldr	r0, [r4, #8]
 8000cea:	e7fc      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cec:	4800      	ldr	r0, [pc, #0]	; (8000cf0 <acc_base_configuration_update_rate_get+0x28>)
 8000cee:	e7fa      	b.n	8000ce6 <acc_base_configuration_update_rate_get+0x1e>
 8000cf0:	7fc00000 	.word	0x7fc00000

08000cf4 <acc_base_configuration_repetition_mode_get>:
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	f7ff ff66 	bl	8000bc8 <configuration_is_valid>
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d000      	beq.n	8000d04 <acc_base_configuration_repetition_mode_get+0x10>
 8000d02:	7923      	ldrb	r3, [r4, #4]
 8000d04:	0018      	movs	r0, r3
 8000d06:	bd10      	pop	{r4, pc}

08000d08 <acc_radar_engine_common_get_timeout_ms>:
 8000d08:	b510      	push	{r4, lr}
 8000d0a:	0004      	movs	r4, r0
 8000d0c:	f7ff fff2 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8000d10:	2801      	cmp	r0, #1
 8000d12:	d00c      	beq.n	8000d2e <acc_radar_engine_common_get_timeout_ms+0x26>
 8000d14:	0020      	movs	r0, r4
 8000d16:	f7ff ffd7 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8000d1a:	1c01      	adds	r1, r0, #0
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d1e:	f00f fdd5 	bl	80108cc <__aeabi_fdiv>
 8000d22:	4904      	ldr	r1, [pc, #16]	; (8000d34 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8000d24:	f00f fc38 	bl	8010598 <__aeabi_fadd>
 8000d28:	f010 fc22 	bl	8011570 <__aeabi_f2uiz>
 8000d2c:	bd10      	pop	{r4, pc}
 8000d2e:	20fa      	movs	r0, #250	; 0xfa
 8000d30:	00c0      	lsls	r0, r0, #3
 8000d32:	e7fb      	b.n	8000d2c <acc_radar_engine_common_get_timeout_ms+0x24>
 8000d34:	44fa0000 	.word	0x44fa0000

08000d38 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	0004      	movs	r4, r0
 8000d3c:	f7ff ff44 	bl	8000bc8 <configuration_is_valid>
 8000d40:	2300      	movs	r3, #0
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d001      	beq.n	8000d4a <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 8000d46:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	bd10      	pop	{r4, pc}

08000d4e <acc_base_configuration_decrease_tx_emission_get>:
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	0004      	movs	r4, r0
 8000d52:	f7ff ff39 	bl	8000bc8 <configuration_is_valid>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d001      	beq.n	8000d5e <acc_base_configuration_decrease_tx_emission_get+0x10>
 8000d5a:	3448      	adds	r4, #72	; 0x48
 8000d5c:	7820      	ldrb	r0, [r4, #0]
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <acc_base_configuration_tx_disable_get>:
 8000d60:	b510      	push	{r4, lr}
 8000d62:	0004      	movs	r4, r0
 8000d64:	f7ff ff30 	bl	8000bc8 <configuration_is_valid>
 8000d68:	2800      	cmp	r0, #0
 8000d6a:	d001      	beq.n	8000d70 <acc_base_configuration_tx_disable_get+0x10>
 8000d6c:	3447      	adds	r4, #71	; 0x47
 8000d6e:	7820      	ldrb	r0, [r4, #0]
 8000d70:	bd10      	pop	{r4, pc}

08000d72 <acc_base_configuration_power_save_mode_get>:
 8000d72:	b510      	push	{r4, lr}
 8000d74:	0004      	movs	r4, r0
 8000d76:	f7ff ff27 	bl	8000bc8 <configuration_is_valid>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d000      	beq.n	8000d82 <acc_base_configuration_power_save_mode_get+0x10>
 8000d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d82:	0018      	movs	r0, r3
 8000d84:	bd10      	pop	{r4, pc}

08000d86 <acc_base_configuration_repetition_mode_on_demand_set>:
 8000d86:	b510      	push	{r4, lr}
 8000d88:	0004      	movs	r4, r0
 8000d8a:	f7ff ff1d 	bl	8000bc8 <configuration_is_valid>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d001      	beq.n	8000d96 <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 8000d92:	2301      	movs	r3, #1
 8000d94:	7123      	strb	r3, [r4, #4]
 8000d96:	bd10      	pop	{r4, pc}

08000d98 <acc_base_configuration_sensor_get>:
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	f7ff ff14 	bl	8000bc8 <configuration_is_valid>
 8000da0:	2300      	movs	r3, #0
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d000      	beq.n	8000da8 <acc_base_configuration_sensor_get+0x10>
 8000da6:	68e3      	ldr	r3, [r4, #12]
 8000da8:	0018      	movs	r0, r3
 8000daa:	bd10      	pop	{r4, pc}

08000dac <acc_sensor_manager_prepare_measurement>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	46de      	mov	lr, fp
 8000db0:	464e      	mov	r6, r9
 8000db2:	4657      	mov	r7, sl
 8000db4:	4645      	mov	r5, r8
 8000db6:	b5e0      	push	{r5, r6, r7, lr}
 8000db8:	0004      	movs	r4, r0
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	4689      	mov	r9, r1
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	4693      	mov	fp, r2
 8000dc4:	f7ff ffe8 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000dc8:	0006      	movs	r6, r0
 8000dca:	4648      	mov	r0, r9
 8000dcc:	f7ff fefc 	bl	8000bc8 <configuration_is_valid>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d003      	beq.n	8000de0 <acc_sensor_manager_prepare_measurement+0x34>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	334c      	adds	r3, #76	; 0x4c
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	2248      	movs	r2, #72	; 0x48
 8000de2:	2348      	movs	r3, #72	; 0x48
 8000de4:	4252      	negs	r2, r2
 8000de6:	4692      	mov	sl, r2
 8000de8:	4373      	muls	r3, r6
 8000dea:	449a      	add	sl, r3
 8000dec:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4698      	mov	r8, r3
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4453      	add	r3, sl
 8000df6:	001a      	movs	r2, r3
 8000df8:	3242      	adds	r2, #66	; 0x42
 8000dfa:	7011      	strb	r1, [r2, #0]
 8000dfc:	494f      	ldr	r1, [pc, #316]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000dfe:	6459      	str	r1, [r3, #68]	; 0x44
 8000e00:	9903      	ldr	r1, [sp, #12]
 8000e02:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e04:	0019      	movs	r1, r3
 8000e06:	3141      	adds	r1, #65	; 0x41
 8000e08:	7809      	ldrb	r1, [r1, #0]
 8000e0a:	9102      	str	r1, [sp, #8]
 8000e0c:	2900      	cmp	r1, #0
 8000e0e:	d156      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e10:	7011      	strb	r1, [r2, #0]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e14:	0030      	movs	r0, r6
 8000e16:	645a      	str	r2, [r3, #68]	; 0x44
 8000e18:	f7ff fe28 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000e1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e1e:	69a0      	ldr	r0, [r4, #24]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4798      	blx	r3
 8000e24:	1e05      	subs	r5, r0, #0
 8000e26:	d02c      	beq.n	8000e82 <acc_sensor_manager_prepare_measurement+0xd6>
 8000e28:	af05      	add	r7, sp, #20
 8000e2a:	0031      	movs	r1, r6
 8000e2c:	200b      	movs	r0, #11
 8000e2e:	f7ff f977 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e32:	220c      	movs	r2, #12
 8000e34:	9902      	ldr	r1, [sp, #8]
 8000e36:	0038      	movs	r0, r7
 8000e38:	f012 ff02 	bl	8013c40 <memset>
 8000e3c:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <acc_sensor_manager_prepare_measurement+0x190>)
 8000e3e:	0020      	movs	r0, r4
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4643      	mov	r3, r8
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	9903      	ldr	r1, [sp, #12]
 8000e48:	4453      	add	r3, sl
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e4e:	3018      	adds	r0, #24
 8000e50:	68dd      	ldr	r5, [r3, #12]
 8000e52:	003b      	movs	r3, r7
 8000e54:	47a8      	blx	r5
 8000e56:	1e05      	subs	r5, r0, #0
 8000e58:	d029      	beq.n	8000eae <acc_sensor_manager_prepare_measurement+0x102>
 8000e5a:	4643      	mov	r3, r8
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4453      	add	r3, sl
 8000e62:	3341      	adds	r3, #65	; 0x41
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000e68:	7839      	ldrb	r1, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	200c      	movs	r0, #12
 8000e6e:	4453      	add	r3, sl
 8000e70:	001a      	movs	r2, r3
 8000e72:	3242      	adds	r2, #66	; 0x42
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	0031      	movs	r1, r6
 8000e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8000e7c:	f7ff f950 	bl	8000120 <acc_probes_execute_primitive_probe>
 8000e80:	e005      	b.n	8000e8e <acc_sensor_manager_prepare_measurement+0xe2>
 8000e82:	4b2f      	ldr	r3, [pc, #188]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <acc_sensor_manager_prepare_measurement+0x198>)
 8000e86:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000e88:	492f      	ldr	r1, [pc, #188]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000e8a:	0033      	movs	r3, r6
 8000e8c:	47b8      	blx	r7
 8000e8e:	0030      	movs	r0, r6
 8000e90:	f7ff fde4 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d112      	bne.n	8000ebe <acc_sensor_manager_prepare_measurement+0x112>
 8000e98:	1d20      	adds	r0, r4, #4
 8000e9a:	f7ff fd5d 	bl	8000958 <acc_sweep_manager_release>
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	b009      	add	sp, #36	; 0x24
 8000ea2:	bc3c      	pop	{r2, r3, r4, r5}
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	46a2      	mov	sl, r4
 8000eaa:	46ab      	mov	fp, r5
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <acc_sensor_manager_prepare_measurement+0x194>)
 8000eb0:	4a26      	ldr	r2, [pc, #152]	; (8000f4c <acc_sensor_manager_prepare_measurement+0x1a0>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	4924      	ldr	r1, [pc, #144]	; (8000f48 <acc_sensor_manager_prepare_measurement+0x19c>)
 8000eb6:	4698      	mov	r8, r3
 8000eb8:	0033      	movs	r3, r6
 8000eba:	47c0      	blx	r8
 8000ebc:	e7d3      	b.n	8000e66 <acc_sensor_manager_prepare_measurement+0xba>
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d134      	bne.n	8000f2e <acc_sensor_manager_prepare_measurement+0x182>
 8000ec4:	4648      	mov	r0, r9
 8000ec6:	f7ff fea2 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 8000eca:	2800      	cmp	r0, #0
 8000ecc:	d023      	beq.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000ece:	2314      	movs	r3, #20
 8000ed0:	69a7      	ldr	r7, [r4, #24]
 8000ed2:	445b      	add	r3, fp
 8000ed4:	0038      	movs	r0, r7
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	f7ff fdc8 	bl	8000a6c <acc_rss_integration_sensor_device_power_on>
 8000edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ede:	2148      	movs	r1, #72	; 0x48
 8000ee0:	4699      	mov	r9, r3
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	4379      	muls	r1, r7
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <acc_sensor_manager_prepare_measurement+0x18c>)
 8000eea:	3948      	subs	r1, #72	; 0x48
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000ef0:	1859      	adds	r1, r3, r1
 8000ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef4:	44a0      	add	r8, r4
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	4798      	blx	r3
 8000efa:	1e05      	subs	r5, r0, #0
 8000efc:	d006      	beq.n	8000f0c <acc_sensor_manager_prepare_measurement+0x160>
 8000efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f00:	4652      	mov	r2, sl
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4649      	mov	r1, r9
 8000f06:	4640      	mov	r0, r8
 8000f08:	4798      	blx	r3
 8000f0a:	0005      	movs	r5, r0
 8000f0c:	0038      	movs	r0, r7
 8000f0e:	f7ff fda5 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8000f12:	2d00      	cmp	r5, #0
 8000f14:	d0c0      	beq.n	8000e98 <acc_sensor_manager_prepare_measurement+0xec>
 8000f16:	230e      	movs	r3, #14
 8000f18:	a805      	add	r0, sp, #20
 8000f1a:	7003      	strb	r3, [r0, #0]
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	3b07      	subs	r3, #7
 8000f20:	4659      	mov	r1, fp
 8000f22:	6046      	str	r6, [r0, #4]
 8000f24:	6083      	str	r3, [r0, #8]
 8000f26:	2501      	movs	r5, #1
 8000f28:	f7ff f8ec 	bl	8000104 <acc_probes_execute>
 8000f2c:	e7b7      	b.n	8000e9e <acc_sensor_manager_prepare_measurement+0xf2>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	9a01      	ldr	r2, [sp, #4]
 8000f32:	829a      	strh	r2, [r3, #20]
 8000f34:	e7ef      	b.n	8000f16 <acc_sensor_manager_prepare_measurement+0x16a>
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	ff800000 	.word	0xff800000
 8000f40:	200005d8 	.word	0x200005d8
 8000f44:	0801ce96 	.word	0x0801ce96
 8000f48:	0801ccaa 	.word	0x0801ccaa
 8000f4c:	0801ced1 	.word	0x0801ced1

08000f50 <acc_base_configuration_print.part.5>:
 8000f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f52:	46de      	mov	lr, fp
 8000f54:	4645      	mov	r5, r8
 8000f56:	4657      	mov	r7, sl
 8000f58:	464e      	mov	r6, r9
 8000f5a:	b5e0      	push	{r5, r6, r7, lr}
 8000f5c:	4b32      	ldr	r3, [pc, #200]	; (8001028 <acc_base_configuration_print.part.5+0xd8>)
 8000f5e:	b08f      	sub	sp, #60	; 0x3c
 8000f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f62:	0004      	movs	r4, r0
 8000f64:	930a      	str	r3, [sp, #40]	; 0x28
 8000f66:	f7ff ff17 	bl	8000d98 <acc_base_configuration_sensor_get>
 8000f6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f7ff fee3 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8000f72:	900c      	str	r0, [sp, #48]	; 0x30
 8000f74:	0020      	movs	r0, r4
 8000f76:	f7ff fe27 	bl	8000bc8 <configuration_is_valid>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d001      	beq.n	8000f86 <acc_base_configuration_print.part.5+0x36>
 8000f82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f84:	4698      	mov	r8, r3
 8000f86:	0020      	movs	r0, r4
 8000f88:	f7ff fe93 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8000f8c:	900d      	str	r0, [sp, #52]	; 0x34
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f7ff fe7a 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8000f94:	4681      	mov	r9, r0
 8000f96:	0020      	movs	r0, r4
 8000f98:	f7ff fe16 	bl	8000bc8 <configuration_is_valid>
 8000f9c:	2600      	movs	r6, #0
 8000f9e:	42b0      	cmp	r0, r6
 8000fa0:	d001      	beq.n	8000fa6 <acc_base_configuration_print.part.5+0x56>
 8000fa2:	1da3      	adds	r3, r4, #6
 8000fa4:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f7ff fee3 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8000fac:	4f1f      	ldr	r7, [pc, #124]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fae:	2804      	cmp	r0, #4
 8000fb0:	d802      	bhi.n	8000fb8 <acc_base_configuration_print.part.5+0x68>
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <acc_base_configuration_print.part.5+0xe0>)
 8000fb4:	0080      	lsls	r0, r0, #2
 8000fb6:	58c7      	ldr	r7, [r0, r3]
 8000fb8:	0020      	movs	r0, r4
 8000fba:	f7ff fe05 	bl	8000bc8 <configuration_is_valid>
 8000fbe:	4d1d      	ldr	r5, [pc, #116]	; (8001034 <acc_base_configuration_print.part.5+0xe4>)
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	d008      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fc4:	0023      	movs	r3, r4
 8000fc6:	336a      	adds	r3, #106	; 0x6a
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fce:	4d1a      	ldr	r5, [pc, #104]	; (8001038 <acc_base_configuration_print.part.5+0xe8>)
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d000      	beq.n	8000fd6 <acc_base_configuration_print.part.5+0x86>
 8000fd4:	4d15      	ldr	r5, [pc, #84]	; (800102c <acc_base_configuration_print.part.5+0xdc>)
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f7ff fec2 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8000fdc:	4682      	mov	sl, r0
 8000fde:	0020      	movs	r0, r4
 8000fe0:	f7ff fe33 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8000fe4:	4683      	mov	fp, r0
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f7ff feb1 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8000fec:	465b      	mov	r3, fp
 8000fee:	9308      	str	r3, [sp, #32]
 8000ff0:	4653      	mov	r3, sl
 8000ff2:	9307      	str	r3, [sp, #28]
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	9303      	str	r3, [sp, #12]
 8000ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ffa:	9009      	str	r0, [sp, #36]	; 0x24
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	4643      	mov	r3, r8
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001004:	9506      	str	r5, [sp, #24]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	9705      	str	r7, [sp, #20]
 800100a:	9604      	str	r6, [sp, #16]
 800100c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800100e:	4a0b      	ldr	r2, [pc, #44]	; (800103c <acc_base_configuration_print.part.5+0xec>)
 8001010:	490b      	ldr	r1, [pc, #44]	; (8001040 <acc_base_configuration_print.part.5+0xf0>)
 8001012:	2002      	movs	r0, #2
 8001014:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001016:	47a0      	blx	r4
 8001018:	b00f      	add	sp, #60	; 0x3c
 800101a:	bc3c      	pop	{r2, r3, r4, r5}
 800101c:	4690      	mov	r8, r2
 800101e:	4699      	mov	r9, r3
 8001020:	46a2      	mov	sl, r4
 8001022:	46ab      	mov	fp, r5
 8001024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	200005d8 	.word	0x200005d8
 800102c:	0801e847 	.word	0x0801e847
 8001030:	080166d0 	.word	0x080166d0
 8001034:	0801cef4 	.word	0x0801cef4
 8001038:	0801d562 	.word	0x0801d562
 800103c:	0801cef6 	.word	0x0801cef6
 8001040:	0801ccd1 	.word	0x0801ccd1

08001044 <acc_service_maximize_signal_attenuation_set.part.8>:
 8001044:	b510      	push	{r4, lr}
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	4903      	ldr	r1, [pc, #12]	; (800105c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800104e:	2001      	movs	r0, #1
 8001050:	4798      	blx	r3
 8001052:	bd10      	pop	{r4, pc}
 8001054:	200005d8 	.word	0x200005d8
 8001058:	0801cf2e 	.word	0x0801cf2e
 800105c:	0801dd1a 	.word	0x0801dd1a

08001060 <acc_service_configuration_valid>:
 8001060:	b510      	push	{r4, lr}
 8001062:	2800      	cmp	r0, #0
 8001064:	d00a      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <acc_service_configuration_valid+0x2c>)
 8001068:	6802      	ldr	r2, [r0, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d106      	bne.n	800107c <acc_service_configuration_valid+0x1c>
 800106e:	8b03      	ldrh	r3, [r0, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <acc_service_configuration_valid+0x1c>
 8001074:	6943      	ldr	r3, [r0, #20]
 8001076:	2001      	movs	r0, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d106      	bne.n	800108a <acc_service_configuration_valid+0x2a>
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <acc_service_configuration_valid+0x30>)
 800107e:	2000      	movs	r0, #0
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <acc_service_configuration_valid+0x34>)
 8001084:	4904      	ldr	r1, [pc, #16]	; (8001098 <acc_service_configuration_valid+0x38>)
 8001086:	4798      	blx	r3
 8001088:	2000      	movs	r0, #0
 800108a:	bd10      	pop	{r4, pc}
 800108c:	acc09dd7 	.word	0xacc09dd7
 8001090:	200005d8 	.word	0x200005d8
 8001094:	0801cf2e 	.word	0x0801cf2e
 8001098:	0801dd1a 	.word	0x0801dd1a

0800109c <acc_service_configuration_check>:
 800109c:	b510      	push	{r4, lr}
 800109e:	0004      	movs	r4, r0
 80010a0:	f7ff ffde 	bl	8001060 <acc_service_configuration_valid>
 80010a4:	2800      	cmp	r0, #0
 80010a6:	d00b      	beq.n	80010c0 <acc_service_configuration_check+0x24>
 80010a8:	7963      	ldrb	r3, [r4, #5]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	d906      	bls.n	80010c0 <acc_service_configuration_check+0x24>
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <acc_service_configuration_check+0x28>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <acc_service_configuration_check+0x2c>)
 80010ba:	4904      	ldr	r1, [pc, #16]	; (80010cc <acc_service_configuration_check+0x30>)
 80010bc:	4798      	blx	r3
 80010be:	2000      	movs	r0, #0
 80010c0:	bd10      	pop	{r4, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	200005d8 	.word	0x200005d8
 80010c8:	0801cf44 	.word	0x0801cf44
 80010cc:	0801dd1a 	.word	0x0801dd1a

080010d0 <acc_service_pipeline_destroy>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	0004      	movs	r4, r0
 80010d4:	6900      	ldr	r0, [r0, #16]
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d003      	beq.n	80010e2 <acc_service_pipeline_destroy+0x12>
 80010da:	68c3      	ldr	r3, [r0, #12]
 80010dc:	4798      	blx	r3
 80010de:	2300      	movs	r3, #0
 80010e0:	6123      	str	r3, [r4, #16]
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <acc_service_get_base_configuration>:
 80010e4:	b510      	push	{r4, lr}
 80010e6:	1e04      	subs	r4, r0, #0
 80010e8:	d001      	beq.n	80010ee <acc_service_get_base_configuration+0xa>
 80010ea:	6900      	ldr	r0, [r0, #16]
 80010ec:	bd10      	pop	{r4, pc}
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <acc_service_get_base_configuration+0x24>)
 80010f0:	001a      	movs	r2, r3
 80010f2:	3230      	adds	r2, #48	; 0x30
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	1e10      	subs	r0, r2, #0
 80010f8:	d0f8      	beq.n	80010ec <acc_service_get_base_configuration+0x8>
 80010fa:	2001      	movs	r0, #1
 80010fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fe:	4a03      	ldr	r2, [pc, #12]	; (800110c <acc_service_get_base_configuration+0x28>)
 8001100:	4903      	ldr	r1, [pc, #12]	; (8001110 <acc_service_get_base_configuration+0x2c>)
 8001102:	4798      	blx	r3
 8001104:	0020      	movs	r0, r4
 8001106:	e7f1      	b.n	80010ec <acc_service_get_base_configuration+0x8>
 8001108:	200005d8 	.word	0x200005d8
 800110c:	0801cf2e 	.word	0x0801cf2e
 8001110:	0801dd1a 	.word	0x0801dd1a

08001114 <set_maximize_signal_attenuation>:
 8001114:	b570      	push	{r4, r5, r6, lr}
 8001116:	0005      	movs	r5, r0
 8001118:	000e      	movs	r6, r1
 800111a:	f7ff ffe3 	bl	80010e4 <acc_service_get_base_configuration>
 800111e:	1e04      	subs	r4, r0, #0
 8001120:	d010      	beq.n	8001144 <set_maximize_signal_attenuation+0x30>
 8001122:	f7ff fd51 	bl	8000bc8 <configuration_is_valid>
 8001126:	2800      	cmp	r0, #0
 8001128:	d002      	beq.n	8001130 <set_maximize_signal_attenuation+0x1c>
 800112a:	0023      	movs	r3, r4
 800112c:	334a      	adds	r3, #74	; 0x4a
 800112e:	701e      	strb	r6, [r3, #0]
 8001130:	2e00      	cmp	r6, #0
 8001132:	d008      	beq.n	8001146 <set_maximize_signal_attenuation+0x32>
 8001134:	210f      	movs	r1, #15
 8001136:	0020      	movs	r0, r4
 8001138:	f7ff fdb1 	bl	8000c9e <acc_base_configuration_integrator_set>
 800113c:	2101      	movs	r1, #1
 800113e:	0020      	movs	r0, r4
 8001140:	f7ff fd8e 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	68ab      	ldr	r3, [r5, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0fb      	beq.n	8001144 <set_maximize_signal_attenuation+0x30>
 800114c:	7969      	ldrb	r1, [r5, #5]
 800114e:	0028      	movs	r0, r5
 8001150:	4798      	blx	r3
 8001152:	e7f7      	b.n	8001144 <set_maximize_signal_attenuation+0x30>

08001154 <acc_service_maximize_signal_attenuation_set>:
 8001154:	b510      	push	{r4, lr}
 8001156:	2800      	cmp	r0, #0
 8001158:	d003      	beq.n	8001162 <acc_service_maximize_signal_attenuation_set+0xe>
 800115a:	7301      	strb	r1, [r0, #12]
 800115c:	f7ff ffda 	bl	8001114 <set_maximize_signal_attenuation>
 8001160:	bd10      	pop	{r4, pc}
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <acc_service_maximize_signal_attenuation_set+0x20>)
 8001164:	3330      	adds	r3, #48	; 0x30
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f9      	beq.n	8001160 <acc_service_maximize_signal_attenuation_set+0xc>
 800116c:	f7ff ff6a 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 8001170:	e7f6      	b.n	8001160 <acc_service_maximize_signal_attenuation_set+0xc>
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	200005d8 	.word	0x200005d8

08001178 <acc_service_profile_set>:
 8001178:	b510      	push	{r4, lr}
 800117a:	1e04      	subs	r4, r0, #0
 800117c:	d00c      	beq.n	8001198 <acc_service_profile_set+0x20>
 800117e:	6883      	ldr	r3, [r0, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <acc_service_profile_set+0x20>
 8001184:	7141      	strb	r1, [r0, #5]
 8001186:	4798      	blx	r3
 8001188:	7b23      	ldrb	r3, [r4, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <acc_service_profile_set+0x1e>
 800118e:	2101      	movs	r1, #1
 8001190:	0020      	movs	r0, r4
 8001192:	f7ff ffbf 	bl	8001114 <set_maximize_signal_attenuation>
 8001196:	bd10      	pop	{r4, pc}
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <acc_service_profile_set+0x30>)
 800119a:	3330      	adds	r3, #48	; 0x30
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f9      	beq.n	8001196 <acc_service_profile_set+0x1e>
 80011a2:	f7ff ff4f 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 80011a6:	e7f6      	b.n	8001196 <acc_service_profile_set+0x1e>
 80011a8:	200005d8 	.word	0x200005d8

080011ac <acc_service_receiver_gain_set>:
 80011ac:	b570      	push	{r4, r5, r6, lr}
 80011ae:	1c0d      	adds	r5, r1, #0
 80011b0:	f7ff ff98 	bl	80010e4 <acc_service_get_base_configuration>
 80011b4:	0004      	movs	r4, r0
 80011b6:	f7ff fd07 	bl	8000bc8 <configuration_is_valid>
 80011ba:	2800      	cmp	r0, #0
 80011bc:	d00e      	beq.n	80011dc <acc_service_receiver_gain_set+0x30>
 80011be:	4908      	ldr	r1, [pc, #32]	; (80011e0 <acc_service_receiver_gain_set+0x34>)
 80011c0:	1c28      	adds	r0, r5, #0
 80011c2:	f00f fc95 	bl	8010af0 <__aeabi_fmul>
 80011c6:	1c01      	adds	r1, r0, #0
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <acc_service_receiver_gain_set+0x34>)
 80011ca:	f00f fdc3 	bl	8010d54 <__aeabi_fsub>
 80011ce:	21fc      	movs	r1, #252	; 0xfc
 80011d0:	0589      	lsls	r1, r1, #22
 80011d2:	f00f f9e1 	bl	8010598 <__aeabi_fadd>
 80011d6:	f010 fb81 	bl	80118dc <__aeabi_f2iz>
 80011da:	87e0      	strh	r0, [r4, #62]	; 0x3e
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	41b00000 	.word	0x41b00000

080011e4 <get_sparse_configuration>:
 80011e4:	b510      	push	{r4, lr}
 80011e6:	1e04      	subs	r4, r0, #0
 80011e8:	d004      	beq.n	80011f4 <get_sparse_configuration+0x10>
 80011ea:	7903      	ldrb	r3, [r0, #4]
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d10d      	bne.n	800120c <get_sparse_configuration+0x28>
 80011f0:	0020      	movs	r0, r4
 80011f2:	bd10      	pop	{r4, pc}
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <get_sparse_configuration+0x2c>)
 80011f6:	001a      	movs	r2, r3
 80011f8:	3230      	adds	r2, #48	; 0x30
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	2a00      	cmp	r2, #0
 80011fe:	d0f7      	beq.n	80011f0 <get_sparse_configuration+0xc>
 8001200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001202:	4a04      	ldr	r2, [pc, #16]	; (8001214 <get_sparse_configuration+0x30>)
 8001204:	4904      	ldr	r1, [pc, #16]	; (8001218 <get_sparse_configuration+0x34>)
 8001206:	2001      	movs	r0, #1
 8001208:	4798      	blx	r3
 800120a:	e7f1      	b.n	80011f0 <get_sparse_configuration+0xc>
 800120c:	2400      	movs	r4, #0
 800120e:	e7ef      	b.n	80011f0 <get_sparse_configuration+0xc>
 8001210:	200005d8 	.word	0x200005d8
 8001214:	0801cf2e 	.word	0x0801cf2e
 8001218:	0801cf5c 	.word	0x0801cf5c

0800121c <set_configuration_for_profile.lto_priv.167>:
 800121c:	b570      	push	{r4, r5, r6, lr}
 800121e:	000d      	movs	r5, r1
 8001220:	f7ff ffe0 	bl	80011e4 <get_sparse_configuration>
 8001224:	2800      	cmp	r0, #0
 8001226:	d011      	beq.n	800124c <set_configuration_for_profile.lto_priv.167+0x30>
 8001228:	301c      	adds	r0, #28
 800122a:	0004      	movs	r4, r0
 800122c:	1e68      	subs	r0, r5, #1
 800122e:	2804      	cmp	r0, #4
 8001230:	d80c      	bhi.n	800124c <set_configuration_for_profile.lto_priv.167+0x30>
 8001232:	f00f ff7b 	bl	801112c <__gnu_thumb1_case_uqi>
 8001236:	0c03      	.short	0x0c03
 8001238:	170e      	.short	0x170e
 800123a:	20          	.byte	0x20
 800123b:	00          	.byte	0x00
 800123c:	2100      	movs	r1, #0
 800123e:	0020      	movs	r0, r4
 8001240:	f7ff fd18 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 8001244:	2100      	movs	r1, #0
 8001246:	0020      	movs	r0, r4
 8001248:	f7ff fd29 	bl	8000c9e <acc_base_configuration_integrator_set>
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	2107      	movs	r1, #7
 8001250:	e7f5      	b.n	800123e <set_configuration_for_profile.lto_priv.167+0x22>
 8001252:	0020      	movs	r0, r4
 8001254:	2109      	movs	r1, #9
 8001256:	f7ff fd0d 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800125a:	2103      	movs	r1, #3
 800125c:	0020      	movs	r0, r4
 800125e:	f7ff fd1e 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001262:	e7f3      	b.n	800124c <set_configuration_for_profile.lto_priv.167+0x30>
 8001264:	210c      	movs	r1, #12
 8001266:	0020      	movs	r0, r4
 8001268:	f7ff fd04 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800126c:	2106      	movs	r1, #6
 800126e:	0020      	movs	r0, r4
 8001270:	f7ff fd15 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001274:	e7ea      	b.n	800124c <set_configuration_for_profile.lto_priv.167+0x30>
 8001276:	2110      	movs	r1, #16
 8001278:	e7f5      	b.n	8001266 <set_configuration_for_profile.lto_priv.167+0x4a>

0800127a <acc_service_sparse_get_metadata>:
 800127a:	b510      	push	{r4, lr}
 800127c:	000c      	movs	r4, r1
 800127e:	2800      	cmp	r0, #0
 8001280:	d015      	beq.n	80012ae <acc_service_sparse_get_metadata+0x34>
 8001282:	7a03      	ldrb	r3, [r0, #8]
 8001284:	2b03      	cmp	r3, #3
 8001286:	d112      	bne.n	80012ae <acc_service_sparse_get_metadata+0x34>
 8001288:	6903      	ldr	r3, [r0, #16]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001290:	600a      	str	r2, [r1, #0]
 8001292:	69da      	ldr	r2, [r3, #28]
 8001294:	604a      	str	r2, [r1, #4]
 8001296:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8001298:	810a      	strh	r2, [r1, #8]
 800129a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800129c:	60ca      	str	r2, [r1, #12]
 800129e:	4904      	ldr	r1, [pc, #16]	; (80012b0 <acc_service_sparse_get_metadata+0x36>)
 80012a0:	f00f fc26 	bl	8010af0 <__aeabi_fmul>
 80012a4:	21fc      	movs	r1, #252	; 0xfc
 80012a6:	0589      	lsls	r1, r1, #22
 80012a8:	f00f fc22 	bl	8010af0 <__aeabi_fmul>
 80012ac:	6120      	str	r0, [r4, #16]
 80012ae:	bd10      	pop	{r4, pc}
 80012b0:	4d8ef3c2 	.word	0x4d8ef3c2

080012b4 <destroy_handle>:
 80012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b6:	46c6      	mov	lr, r8
 80012b8:	4b16      	ldr	r3, [pc, #88]	; (8001314 <destroy_handle+0x60>)
 80012ba:	4e17      	ldr	r6, [pc, #92]	; (8001318 <destroy_handle+0x64>)
 80012bc:	4698      	mov	r8, r3
 80012be:	689c      	ldr	r4, [r3, #8]
 80012c0:	0033      	movs	r3, r6
 80012c2:	b500      	push	{lr}
 80012c4:	3330      	adds	r3, #48	; 0x30
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	0005      	movs	r5, r0
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d905      	bls.n	80012da <destroy_handle+0x26>
 80012ce:	6843      	ldr	r3, [r0, #4]
 80012d0:	4a12      	ldr	r2, [pc, #72]	; (800131c <destroy_handle+0x68>)
 80012d2:	4913      	ldr	r1, [pc, #76]	; (8001320 <destroy_handle+0x6c>)
 80012d4:	2004      	movs	r0, #4
 80012d6:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80012d8:	47b8      	blx	r7
 80012da:	2300      	movs	r3, #0
 80012dc:	2c00      	cmp	r4, #0
 80012de:	d00d      	beq.n	80012fc <destroy_handle+0x48>
 80012e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012e2:	42ac      	cmp	r4, r5
 80012e4:	d107      	bne.n	80012f6 <destroy_handle+0x42>
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d111      	bne.n	800130e <destroy_handle+0x5a>
 80012ea:	4643      	mov	r3, r8
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	0020      	movs	r0, r4
 80012f0:	f7ff fb70 	bl	80009d4 <acc_rss_integration_mem_free>
 80012f4:	e008      	b.n	8001308 <destroy_handle+0x54>
 80012f6:	0023      	movs	r3, r4
 80012f8:	0014      	movs	r4, r2
 80012fa:	e7ef      	b.n	80012dc <destroy_handle+0x28>
 80012fc:	6b76      	ldr	r6, [r6, #52]	; 0x34
 80012fe:	686b      	ldr	r3, [r5, #4]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <destroy_handle+0x70>)
 8001302:	4907      	ldr	r1, [pc, #28]	; (8001320 <destroy_handle+0x6c>)
 8001304:	0020      	movs	r0, r4
 8001306:	47b0      	blx	r6
 8001308:	bc04      	pop	{r2}
 800130a:	4690      	mov	r8, r2
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
 8001310:	e7ed      	b.n	80012ee <destroy_handle+0x3a>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	2000008c 	.word	0x2000008c
 8001318:	200005d8 	.word	0x200005d8
 800131c:	0801cf6b 	.word	0x0801cf6b
 8001320:	0801cf8c 	.word	0x0801cf8c
 8001324:	0801cf9c 	.word	0x0801cf9c

08001328 <get_and_validate_envelope_configuration>:
 8001328:	b510      	push	{r4, lr}
 800132a:	0004      	movs	r4, r0
 800132c:	f7ff fe98 	bl	8001060 <acc_service_configuration_valid>
 8001330:	2800      	cmp	r0, #0
 8001332:	d002      	beq.n	800133a <get_and_validate_envelope_configuration+0x12>
 8001334:	7923      	ldrb	r3, [r4, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00b      	beq.n	8001352 <get_and_validate_envelope_configuration+0x2a>
 800133a:	4b07      	ldr	r3, [pc, #28]	; (8001358 <get_and_validate_envelope_configuration+0x30>)
 800133c:	001a      	movs	r2, r3
 800133e:	3230      	adds	r2, #48	; 0x30
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	1e14      	subs	r4, r2, #0
 8001344:	d005      	beq.n	8001352 <get_and_validate_envelope_configuration+0x2a>
 8001346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001348:	4a04      	ldr	r2, [pc, #16]	; (800135c <get_and_validate_envelope_configuration+0x34>)
 800134a:	4905      	ldr	r1, [pc, #20]	; (8001360 <get_and_validate_envelope_configuration+0x38>)
 800134c:	2001      	movs	r0, #1
 800134e:	4798      	blx	r3
 8001350:	2400      	movs	r4, #0
 8001352:	0020      	movs	r0, r4
 8001354:	bd10      	pop	{r4, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	200005d8 	.word	0x200005d8
 800135c:	0801cf2e 	.word	0x0801cf2e
 8001360:	0801cfd0 	.word	0x0801cfd0

08001364 <set_configuration_for_profile.lto_priv.166>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	000e      	movs	r6, r1
 8001368:	f7ff ffde 	bl	8001328 <get_and_validate_envelope_configuration>
 800136c:	1e05      	subs	r5, r0, #0
 800136e:	d018      	beq.n	80013a2 <set_configuration_for_profile.lto_priv.166+0x3e>
 8001370:	0004      	movs	r4, r0
 8001372:	1e70      	subs	r0, r6, #1
 8001374:	341c      	adds	r4, #28
 8001376:	2804      	cmp	r0, #4
 8001378:	d813      	bhi.n	80013a2 <set_configuration_for_profile.lto_priv.166+0x3e>
 800137a:	358c      	adds	r5, #140	; 0x8c
 800137c:	f00f fed6 	bl	801112c <__gnu_thumb1_case_uqi>
 8001380:	23211203 	.word	0x23211203
 8001384:	32          	.byte	0x32
 8001385:	00          	.byte	0x00
 8001386:	2100      	movs	r1, #0
 8001388:	0020      	movs	r0, r4
 800138a:	f7ff fc73 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 800138e:	2100      	movs	r1, #0
 8001390:	0020      	movs	r0, r4
 8001392:	f7ff fc84 	bl	8000c9e <acc_base_configuration_integrator_set>
 8001396:	2103      	movs	r1, #3
 8001398:	0020      	movs	r0, r4
 800139a:	f7ff fc61 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <set_configuration_for_profile.lto_priv.166+0x84>)
 80013a0:	602b      	str	r3, [r5, #0]
 80013a2:	bd70      	pop	{r4, r5, r6, pc}
 80013a4:	2107      	movs	r1, #7
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7ff fc64 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 80013ac:	2106      	movs	r1, #6
 80013ae:	0020      	movs	r0, r4
 80013b0:	f7ff fc75 	bl	8000c9e <acc_base_configuration_integrator_set>
 80013b4:	2109      	movs	r1, #9
 80013b6:	0020      	movs	r0, r4
 80013b8:	f7ff fc52 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <set_configuration_for_profile.lto_priv.166+0x88>)
 80013be:	602b      	str	r3, [r5, #0]
 80013c0:	e7ef      	b.n	80013a2 <set_configuration_for_profile.lto_priv.166+0x3e>
 80013c2:	2109      	movs	r1, #9
 80013c4:	e7ef      	b.n	80013a6 <set_configuration_for_profile.lto_priv.166+0x42>
 80013c6:	210c      	movs	r1, #12
 80013c8:	0020      	movs	r0, r4
 80013ca:	f7ff fc53 	bl	8000c74 <acc_base_configuration_wg_duration_set>
 80013ce:	2106      	movs	r1, #6
 80013d0:	0020      	movs	r0, r4
 80013d2:	f7ff fc64 	bl	8000c9e <acc_base_configuration_integrator_set>
 80013d6:	2101      	movs	r1, #1
 80013d8:	0020      	movs	r0, r4
 80013da:	f7ff fc41 	bl	8000c60 <acc_base_configuration_integrator_ramp_up_set>
 80013de:	4b03      	ldr	r3, [pc, #12]	; (80013ec <set_configuration_for_profile.lto_priv.166+0x88>)
 80013e0:	602b      	str	r3, [r5, #0]
 80013e2:	e7de      	b.n	80013a2 <set_configuration_for_profile.lto_priv.166+0x3e>
 80013e4:	2110      	movs	r1, #16
 80013e6:	e7ef      	b.n	80013c8 <set_configuration_for_profile.lto_priv.166+0x64>
 80013e8:	3c8461fa 	.word	0x3c8461fa
 80013ec:	3b843809 	.word	0x3b843809

080013f0 <null_data>:
		meansqdist /= mass;
	}
	return meansqdist;
}

void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	0006      	movs	r6, r0
 80013f6:	1c0d      	adds	r5, r1, #0
 80013f8:	b28c      	uxth	r4, r1
 80013fa:	a801      	add	r0, sp, #4
 80013fc:	8001      	strh	r1, [r0, #0]
 80013fe:	b291      	uxth	r1, r2
 8001400:	466f      	mov	r7, sp
 8001402:	803a      	strh	r2, [r7, #0]
 8001404:	1c1f      	adds	r7, r3, #0
	uint8_t sweeps = data_size.x1;
 8001406:	b2ed      	uxtb	r5, r5
	uint8_t bins = data_size.x2;
 8001408:	0a24      	lsrs	r4, r4, #8
	
	uint8_t msweep = max.x1;
 800140a:	b2d0      	uxtb	r0, r2
	uint8_t mbin = max.x2;
 800140c:	0a09      	lsrs	r1, r1, #8
	
	uint16_t apex = data[msweep][mbin];
 800140e:	0080      	lsls	r0, r0, #2
 8001410:	5983      	ldr	r3, [r0, r6]
 8001412:	0049      	lsls	r1, r1, #1
 8001414:	5a58      	ldrh	r0, [r3, r1]
	uint16_t halfpex = apex*threshold;
 8001416:	f010 fa81 	bl	801191c <__aeabi_i2f>
 800141a:	1c39      	adds	r1, r7, #0
 800141c:	f00f fb68 	bl	8010af0 <__aeabi_fmul>
 8001420:	f010 f8a6 	bl	8011570 <__aeabi_f2uiz>
 8001424:	b280      	uxth	r0, r0
	
	for(uint16_t i = 0; i<bins; i++){
 8001426:	2700      	movs	r7, #0
 8001428:	e010      	b.n	800144c <null_data+0x5c>
	for(uint16_t j = 0; j<sweeps/2; j++){
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	086a      	lsrs	r2, r5, #1
 8001430:	429a      	cmp	r2, r3
 8001432:	d909      	bls.n	8001448 <null_data+0x58>
		if(data[j][i] > halfpex){
 8001434:	009a      	lsls	r2, r3, #2
 8001436:	5992      	ldr	r2, [r2, r6]
 8001438:	0079      	lsls	r1, r7, #1
 800143a:	1852      	adds	r2, r2, r1
 800143c:	8811      	ldrh	r1, [r2, #0]
 800143e:	4281      	cmp	r1, r0
 8001440:	d9f3      	bls.n	800142a <null_data+0x3a>
			data[j][i] = 0;
 8001442:	2100      	movs	r1, #0
 8001444:	8011      	strh	r1, [r2, #0]
 8001446:	e7f0      	b.n	800142a <null_data+0x3a>
	for(uint16_t i = 0; i<bins; i++){
 8001448:	3701      	adds	r7, #1
 800144a:	b2bf      	uxth	r7, r7
 800144c:	b2a3      	uxth	r3, r4
 800144e:	42bb      	cmp	r3, r7
 8001450:	d901      	bls.n	8001456 <null_data+0x66>
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001452:	2300      	movs	r3, #0
 8001454:	e7eb      	b.n	800142e <null_data+0x3e>
		}
	}
	}
}
 8001456:	b003      	add	sp, #12
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145a <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 800145a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145c:	46de      	mov	lr, fp
 800145e:	4657      	mov	r7, sl
 8001460:	464e      	mov	r6, r9
 8001462:	4645      	mov	r5, r8
 8001464:	b5e0      	push	{r5, r6, r7, lr}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	4682      	mov	sl, r0
 800146a:	1c0d      	adds	r5, r1, #0
 800146c:	b28e      	uxth	r6, r1
 800146e:	a807      	add	r0, sp, #28
 8001470:	8001      	strh	r1, [r0, #0]
 8001472:	b291      	uxth	r1, r2
 8001474:	ac06      	add	r4, sp, #24
 8001476:	8022      	strh	r2, [r4, #0]
 8001478:	1c1c      	adds	r4, r3, #0
	uint8_t sweeps = data_size.x1;
 800147a:	b2eb      	uxtb	r3, r5
 800147c:	4698      	mov	r8, r3
	uint8_t bins = data_size.x2;
 800147e:	0a33      	lsrs	r3, r6, #8
 8001480:	9305      	str	r3, [sp, #20]
	uint8_t msweep = max.x1;
 8001482:	b2d3      	uxtb	r3, r2
 8001484:	469b      	mov	fp, r3
	uint8_t mbin = max.x2;
 8001486:	0a0b      	lsrs	r3, r1, #8
 8001488:	4699      	mov	r9, r3
	uint16_t apex = data[msweep][mbin];
 800148a:	465b      	mov	r3, fp
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4652      	mov	r2, sl
 8001490:	589a      	ldr	r2, [r3, r2]
 8001492:	464b      	mov	r3, r9
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	5ad0      	ldrh	r0, [r2, r3]
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8001498:	f010 fa40 	bl	801191c <__aeabi_i2f>
 800149c:	1c21      	adds	r1, r4, #0
 800149e:	f00f fb27 	bl	8010af0 <__aeabi_fmul>
 80014a2:	f010 f865 	bl	8011570 <__aeabi_f2uiz>
 80014a6:	b287      	uxth	r7, r0
	for(int16_t i = 0; i<bins; i++){
 80014a8:	2600      	movs	r6, #0
	float mass = 0.0f;
 80014aa:	2300      	movs	r3, #0
 80014ac:	9302      	str	r3, [sp, #8]
	float meansqdist = 0.0f;
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	003b      	movs	r3, r7
 80014b2:	4647      	mov	r7, r8
 80014b4:	46d8      	mov	r8, fp
 80014b6:	469b      	mov	fp, r3
 80014b8:	e02a      	b.n	8001510 <get_msd+0xb6>
	for(int16_t j = 0; j<sweeps/2; j++){
 80014ba:	3501      	adds	r5, #1
 80014bc:	b22d      	sxth	r5, r5
 80014be:	002c      	movs	r4, r5
 80014c0:	087b      	lsrs	r3, r7, #1
 80014c2:	429d      	cmp	r5, r3
 80014c4:	da22      	bge.n	800150c <get_msd+0xb2>
		if (data[j][i] > halfpex){
 80014c6:	00ab      	lsls	r3, r5, #2
 80014c8:	4652      	mov	r2, sl
 80014ca:	589b      	ldr	r3, [r3, r2]
 80014cc:	0072      	lsls	r2, r6, #1
 80014ce:	5ad0      	ldrh	r0, [r2, r3]
 80014d0:	4558      	cmp	r0, fp
 80014d2:	d9f2      	bls.n	80014ba <get_msd+0x60>
			mass += data[j][i];
 80014d4:	f010 fa22 	bl	801191c <__aeabi_i2f>
 80014d8:	9003      	str	r0, [sp, #12]
 80014da:	1c01      	adds	r1, r0, #0
 80014dc:	9802      	ldr	r0, [sp, #8]
 80014de:	f00f f85b 	bl	8010598 <__aeabi_fadd>
 80014e2:	9002      	str	r0, [sp, #8]
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 80014e4:	4643      	mov	r3, r8
 80014e6:	1ae4      	subs	r4, r4, r3
 80014e8:	4364      	muls	r4, r4
 80014ea:	9b04      	ldr	r3, [sp, #16]
 80014ec:	464a      	mov	r2, r9
 80014ee:	1a98      	subs	r0, r3, r2
 80014f0:	4340      	muls	r0, r0
 80014f2:	1820      	adds	r0, r4, r0
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 80014f4:	f010 fa5c 	bl	80119b0 <__aeabi_ui2f>
 80014f8:	1c01      	adds	r1, r0, #0
 80014fa:	9803      	ldr	r0, [sp, #12]
 80014fc:	f00f faf8 	bl	8010af0 <__aeabi_fmul>
 8001500:	1c01      	adds	r1, r0, #0
 8001502:	9801      	ldr	r0, [sp, #4]
 8001504:	f00f f848 	bl	8010598 <__aeabi_fadd>
 8001508:	9001      	str	r0, [sp, #4]
 800150a:	e7d6      	b.n	80014ba <get_msd+0x60>
	for(int16_t i = 0; i<bins; i++){
 800150c:	3601      	adds	r6, #1
 800150e:	b236      	sxth	r6, r6
 8001510:	9604      	str	r6, [sp, #16]
 8001512:	9b05      	ldr	r3, [sp, #20]
 8001514:	429e      	cmp	r6, r3
 8001516:	da01      	bge.n	800151c <get_msd+0xc2>
	for(int16_t j = 0; j<sweeps/2; j++){
 8001518:	2500      	movs	r5, #0
 800151a:	e7d0      	b.n	80014be <get_msd+0x64>
	if(mass != 0.0f){
 800151c:	2100      	movs	r1, #0
 800151e:	9c02      	ldr	r4, [sp, #8]
 8001520:	1c20      	adds	r0, r4, #0
 8001522:	f00f ffd7 	bl	80114d4 <__aeabi_fcmpeq>
 8001526:	2800      	cmp	r0, #0
 8001528:	d104      	bne.n	8001534 <get_msd+0xda>
		meansqdist /= mass;
 800152a:	1c21      	adds	r1, r4, #0
 800152c:	9801      	ldr	r0, [sp, #4]
 800152e:	f00f f9cd 	bl	80108cc <__aeabi_fdiv>
 8001532:	9001      	str	r0, [sp, #4]
}
 8001534:	9801      	ldr	r0, [sp, #4]
 8001536:	b009      	add	sp, #36	; 0x24
 8001538:	bc3c      	pop	{r2, r3, r4, r5}
 800153a:	4690      	mov	r8, r2
 800153c:	4699      	mov	r9, r3
 800153e:	46a2      	mov	sl, r4
 8001540:	46ab      	mov	fp, r5
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001544 <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	46c6      	mov	lr, r8
 8001548:	b500      	push	{lr}
 800154a:	b084      	sub	sp, #16
 800154c:	b28d      	uxth	r5, r1
 800154e:	ab01      	add	r3, sp, #4
 8001550:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 8001552:	b2cf      	uxtb	r7, r1
	uint8_t bins = data_size.x2;
 8001554:	0a2b      	lsrs	r3, r5, #8
 8001556:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 8001558:	2100      	movs	r1, #0
	uint8_t msweep = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	4698      	mov	r8, r3
	uint8_t mbin = 0;
 800155e:	2500      	movs	r5, #0
	uint16_t apex = 0;
 8001560:	2600      	movs	r6, #0
 8001562:	e011      	b.n	8001588 <max2d+0x44>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8001564:	3301      	adds	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	087a      	lsrs	r2, r7, #1
 800156a:	429a      	cmp	r2, r3
 800156c:	d90a      	bls.n	8001584 <max2d+0x40>
				if(data[j][i] > apex){
 800156e:	009a      	lsls	r2, r3, #2
 8001570:	5812      	ldr	r2, [r2, r0]
 8001572:	004c      	lsls	r4, r1, #1
 8001574:	5aa2      	ldrh	r2, [r4, r2]
 8001576:	42b2      	cmp	r2, r6
 8001578:	d9f4      	bls.n	8001564 <max2d+0x20>
					mbin = i;
 800157a:	b2cd      	uxtb	r5, r1
					msweep = j;
 800157c:	b2dc      	uxtb	r4, r3
 800157e:	46a0      	mov	r8, r4
					apex = data[j][i];
 8001580:	0016      	movs	r6, r2
 8001582:	e7ef      	b.n	8001564 <max2d+0x20>
	for(uint16_t i = 0; i<bins; i++){
 8001584:	3101      	adds	r1, #1
 8001586:	b289      	uxth	r1, r1
 8001588:	9b00      	ldr	r3, [sp, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	428b      	cmp	r3, r1
 800158e:	d901      	bls.n	8001594 <max2d+0x50>
		for(uint16_t j = 0; j<sweeps/2; j++){
 8001590:	2300      	movs	r3, #0
 8001592:	e7e9      	b.n	8001568 <max2d+0x24>
	uint8v2_t max_index = {msweep,mbin};
 8001594:	ab02      	add	r3, sp, #8
 8001596:	4642      	mov	r2, r8
 8001598:	701a      	strb	r2, [r3, #0]
 800159a:	705d      	strb	r5, [r3, #1]
	return max_index;
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	0a18      	lsrs	r0, r3, #8
 80015a0:	0200      	lsls	r0, r0, #8
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	4013      	ands	r3, r2
 80015a6:	4318      	orrs	r0, r3
}
 80015a8:	b004      	add	sp, #16
 80015aa:	bc04      	pop	{r2}
 80015ac:	4690      	mov	r8, r2
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b0 <stackPush>:
float stackPush(float val){
 80015b0:	b530      	push	{r4, r5, lr}
 80015b2:	1c05      	adds	r5, r0, #0
	float popped = convstack[0];
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <stackPush+0x28>)
 80015b6:	68d8      	ldr	r0, [r3, #12]
	for(int i = 0; i < CONVKER-1; i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	e008      	b.n	80015ce <stackPush+0x1e>
	convstack[i] = convstack[i+1];
 80015bc:	1c5c      	adds	r4, r3, #1
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <stackPush+0x28>)
 80015c0:	00a1      	lsls	r1, r4, #2
 80015c2:	1851      	adds	r1, r2, r1
 80015c4:	68c9      	ldr	r1, [r1, #12]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	18d3      	adds	r3, r2, r3
 80015ca:	60d9      	str	r1, [r3, #12]
	for(int i = 0; i < CONVKER-1; i++){
 80015cc:	0023      	movs	r3, r4
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	ddf4      	ble.n	80015bc <stackPush+0xc>
	convstack[(CONVKER-1)/2 -1] = val;
 80015d2:	4b01      	ldr	r3, [pc, #4]	; (80015d8 <stackPush+0x28>)
 80015d4:	619d      	str	r5, [r3, #24]
}
 80015d6:	bd30      	pop	{r4, r5, pc}
 80015d8:	2000008c 	.word	0x2000008c

080015dc <stackSet>:
	for(int i = 0; i < CONVKER; i++){
 80015dc:	2300      	movs	r3, #0
 80015de:	e005      	b.n	80015ec <stackSet+0x10>
	convstack[i] = 0.0f;
 80015e0:	0099      	lsls	r1, r3, #2
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <stackSet+0x18>)
 80015e4:	1852      	adds	r2, r2, r1
 80015e6:	2100      	movs	r1, #0
 80015e8:	60d1      	str	r1, [r2, #12]
	for(int i = 0; i < CONVKER; i++){
 80015ea:	3301      	adds	r3, #1
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	ddf7      	ble.n	80015e0 <stackSet+0x4>
}
 80015f0:	4770      	bx	lr
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	2000008c 	.word	0x2000008c

080015f8 <setdata>:
void setdata(int16_t sweep, int16_t bin, uint16_t val){
 80015f8:	b510      	push	{r4, lr}
	if(
 80015fa:	2800      	cmp	r0, #0
 80015fc:	db0f      	blt.n	800161e <setdata+0x26>
		(sweep >= 0) && (sweep < _sweeps) &&
 80015fe:	4c08      	ldr	r4, [pc, #32]	; (8001620 <setdata+0x28>)
 8001600:	2330      	movs	r3, #48	; 0x30
 8001602:	5ce3      	ldrb	r3, [r4, r3]
 8001604:	4298      	cmp	r0, r3
 8001606:	da0a      	bge.n	800161e <setdata+0x26>
 8001608:	2900      	cmp	r1, #0
 800160a:	db08      	blt.n	800161e <setdata+0x26>
		(bin >= 0) && (bin < _bins)
 800160c:	2331      	movs	r3, #49	; 0x31
 800160e:	5ce3      	ldrb	r3, [r4, r3]
 8001610:	4299      	cmp	r1, r3
 8001612:	da04      	bge.n	800161e <setdata+0x26>
		_conv_data[sweep][bin] = val;
 8001614:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001616:	0080      	lsls	r0, r0, #2
 8001618:	58c3      	ldr	r3, [r0, r3]
 800161a:	0049      	lsls	r1, r1, #1
 800161c:	525a      	strh	r2, [r3, r1]
}
 800161e:	bd10      	pop	{r4, pc}
 8001620:	2000008c 	.word	0x2000008c

08001624 <getdata>:
	if(
 8001624:	2800      	cmp	r0, #0
 8001626:	db10      	blt.n	800164a <getdata+0x26>
		(sweep >= 0) && (sweep < _sweeps) &&
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <getdata+0x38>)
 800162a:	2330      	movs	r3, #48	; 0x30
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	4298      	cmp	r0, r3
 8001630:	da0d      	bge.n	800164e <getdata+0x2a>
 8001632:	2900      	cmp	r1, #0
 8001634:	db0d      	blt.n	8001652 <getdata+0x2e>
		(bin >= 0) && (bin < _bins)
 8001636:	2331      	movs	r3, #49	; 0x31
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	4299      	cmp	r1, r3
 800163c:	da0b      	bge.n	8001656 <getdata+0x32>
		return _conv_data[sweep][bin];
 800163e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001640:	0080      	lsls	r0, r0, #2
 8001642:	58c3      	ldr	r3, [r0, r3]
 8001644:	0049      	lsls	r1, r1, #1
 8001646:	5ac8      	ldrh	r0, [r1, r3]
 8001648:	e000      	b.n	800164c <getdata+0x28>
		return 0;
 800164a:	2000      	movs	r0, #0
}
 800164c:	4770      	bx	lr
		return 0;
 800164e:	2000      	movs	r0, #0
 8001650:	e7fc      	b.n	800164c <getdata+0x28>
 8001652:	2000      	movs	r0, #0
 8001654:	e7fa      	b.n	800164c <getdata+0x28>
 8001656:	2000      	movs	r0, #0
 8001658:	e7f8      	b.n	800164c <getdata+0x28>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	2000008c 	.word	0x2000008c

08001660 <center_of_mass>:

floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	46de      	mov	lr, fp
 8001664:	4657      	mov	r7, sl
 8001666:	464e      	mov	r6, r9
 8001668:	4645      	mov	r5, r8
 800166a:	b5e0      	push	{r5, r6, r7, lr}
 800166c:	b085      	sub	sp, #20
 800166e:	0007      	movs	r7, r0
 8001670:	b28b      	uxth	r3, r1
 8001672:	ac03      	add	r4, sp, #12
 8001674:	8021      	strh	r1, [r4, #0]
 8001676:	9202      	str	r2, [sp, #8]
	uint8_t msweep = max.x1;
 8001678:	b2c9      	uxtb	r1, r1
 800167a:	4689      	mov	r9, r1
	uint8_t mbin = max.x2;
 800167c:	0a1b      	lsrs	r3, r3, #8
 800167e:	469b      	mov	fp, r3
	
	float mass = 0.0f;	
	floatv2_t center = {0.0f,0.0f};
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	607b      	str	r3, [r7, #4]
	
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001686:	b292      	uxth	r2, r2
 8001688:	4690      	mov	r8, r2
 800168a:	465a      	mov	r2, fp
 800168c:	4641      	mov	r1, r8
 800168e:	1a55      	subs	r5, r2, r1
 8001690:	b22d      	sxth	r5, r5
	float mass = 0.0f;	
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	e036      	b.n	8001704 <center_of_mass+0xa4>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
			mass += getdata(j,i);
 8001696:	0029      	movs	r1, r5
 8001698:	0020      	movs	r0, r4
 800169a:	f7ff ffc3 	bl	8001624 <getdata>
 800169e:	0006      	movs	r6, r0
 80016a0:	f010 f93c 	bl	801191c <__aeabi_i2f>
 80016a4:	1c01      	adds	r1, r0, #0
 80016a6:	9801      	ldr	r0, [sp, #4]
 80016a8:	f00e ff76 	bl	8010598 <__aeabi_fadd>
 80016ac:	9001      	str	r0, [sp, #4]
			center.x1 += (float)getdata(j,i)*(float)j;
 80016ae:	0030      	movs	r0, r6
 80016b0:	f010 f97e 	bl	80119b0 <__aeabi_ui2f>
 80016b4:	1c06      	adds	r6, r0, #0
 80016b6:	0020      	movs	r0, r4
 80016b8:	f010 f930 	bl	801191c <__aeabi_i2f>
 80016bc:	1c01      	adds	r1, r0, #0
 80016be:	1c30      	adds	r0, r6, #0
 80016c0:	f00f fa16 	bl	8010af0 <__aeabi_fmul>
 80016c4:	1c01      	adds	r1, r0, #0
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f00e ff66 	bl	8010598 <__aeabi_fadd>
 80016cc:	6038      	str	r0, [r7, #0]
			center.x2 += (float)getdata(j,i)*(float)i;
 80016ce:	0029      	movs	r1, r5
 80016d0:	0020      	movs	r0, r4
 80016d2:	f7ff ffa7 	bl	8001624 <getdata>
 80016d6:	f010 f96b 	bl	80119b0 <__aeabi_ui2f>
 80016da:	1c06      	adds	r6, r0, #0
 80016dc:	0028      	movs	r0, r5
 80016de:	f010 f91d 	bl	801191c <__aeabi_i2f>
 80016e2:	1c01      	adds	r1, r0, #0
 80016e4:	1c30      	adds	r0, r6, #0
 80016e6:	f00f fa03 	bl	8010af0 <__aeabi_fmul>
 80016ea:	1c01      	adds	r1, r0, #0
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f00e ff53 	bl	8010598 <__aeabi_fadd>
 80016f2:	6078      	str	r0, [r7, #4]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80016f4:	3401      	adds	r4, #1
 80016f6:	b224      	sxth	r4, r4
 80016f8:	464b      	mov	r3, r9
 80016fa:	4453      	add	r3, sl
 80016fc:	429c      	cmp	r4, r3
 80016fe:	ddca      	ble.n	8001696 <center_of_mass+0x36>
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8001700:	3501      	adds	r5, #1
 8001702:	b22d      	sxth	r5, r5
 8001704:	9b02      	ldr	r3, [sp, #8]
 8001706:	469a      	mov	sl, r3
 8001708:	445b      	add	r3, fp
 800170a:	429d      	cmp	r5, r3
 800170c:	dc03      	bgt.n	8001716 <center_of_mass+0xb6>
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 800170e:	464b      	mov	r3, r9
 8001710:	4642      	mov	r2, r8
 8001712:	1a9c      	subs	r4, r3, r2
 8001714:	e7f0      	b.n	80016f8 <center_of_mass+0x98>
	}
	}
	if(mass != 0.0f){	
 8001716:	2100      	movs	r1, #0
 8001718:	9c01      	ldr	r4, [sp, #4]
 800171a:	1c20      	adds	r0, r4, #0
 800171c:	f00f feda 	bl	80114d4 <__aeabi_fcmpeq>
 8001720:	2800      	cmp	r0, #0
 8001722:	d109      	bne.n	8001738 <center_of_mass+0xd8>
		center.x1 /= mass;
 8001724:	1c21      	adds	r1, r4, #0
 8001726:	6838      	ldr	r0, [r7, #0]
 8001728:	f00f f8d0 	bl	80108cc <__aeabi_fdiv>
 800172c:	6038      	str	r0, [r7, #0]
		center.x2 /= mass;
 800172e:	1c21      	adds	r1, r4, #0
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f00f f8cb 	bl	80108cc <__aeabi_fdiv>
 8001736:	6078      	str	r0, [r7, #4]
	}
	return center;
}
 8001738:	0038      	movs	r0, r7
 800173a:	b005      	add	sp, #20
 800173c:	bc3c      	pop	{r2, r3, r4, r5}
 800173e:	4690      	mov	r8, r2
 8001740:	4699      	mov	r9, r3
 8001742:	46a2      	mov	sl, r4
 8001744:	46ab      	mov	fp, r5
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001748 <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	1c0f      	adds	r7, r1, #0
 800174e:	b289      	uxth	r1, r1
	uint8_t sweeps = data_size.x1;
 8001750:	b2ff      	uxtb	r7, r7
	uint8_t bins = data_size.x2;
 8001752:	0a09      	lsrs	r1, r1, #8
	for(uint16_t j = 0; j<sweeps/2; j++){
 8001754:	2400      	movs	r4, #0
 8001756:	e00c      	b.n	8001772 <dobandstop+0x2a>
					data[j][i] = 0;
 8001758:	00a5      	lsls	r5, r4, #2
 800175a:	582d      	ldr	r5, [r5, r0]
 800175c:	005e      	lsls	r6, r3, #1
 800175e:	19ad      	adds	r5, r5, r6
 8001760:	2600      	movs	r6, #0
 8001762:	802e      	strh	r6, [r5, #0]
			for(uint16_t i = 0; i<bins; i++){
 8001764:	3301      	adds	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	b28d      	uxth	r5, r1
 800176a:	429d      	cmp	r5, r3
 800176c:	d8f4      	bhi.n	8001758 <dobandstop+0x10>
	for(uint16_t j = 0; j<sweeps/2; j++){
 800176e:	3401      	adds	r4, #1
 8001770:	b2a4      	uxth	r4, r4
 8001772:	087b      	lsrs	r3, r7, #1
 8001774:	42a3      	cmp	r3, r4
 8001776:	d905      	bls.n	8001784 <dobandstop+0x3c>
		if(mask & (1<<j)){
 8001778:	2301      	movs	r3, #1
 800177a:	40a3      	lsls	r3, r4
 800177c:	421a      	tst	r2, r3
 800177e:	d0f6      	beq.n	800176e <dobandstop+0x26>
			for(uint16_t i = 0; i<bins; i++){
 8001780:	2300      	movs	r3, #0
 8001782:	e7f1      	b.n	8001768 <dobandstop+0x20>
}
 8001784:	b003      	add	sp, #12
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001788 <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	0007      	movs	r7, r0
 800178e:	b28d      	uxth	r5, r1
 8001790:	ab01      	add	r3, sp, #4
 8001792:	8019      	strh	r1, [r3, #0]
	uint8_t sweeps = data_size.x1;
 8001794:	b2cc      	uxtb	r4, r1
	uint8_t bins = data_size.x2;
 8001796:	0a2b      	lsrs	r3, r5, #8
 8001798:	9300      	str	r3, [sp, #0]
	for(uint16_t i = 0; i<bins; i++){
 800179a:	2600      	movs	r6, #0
 800179c:	e01b      	b.n	80017d6 <dcdatarm+0x4e>
			accumulator += data[j][i];
 800179e:	009a      	lsls	r2, r3, #2
 80017a0:	59d2      	ldr	r2, [r2, r7]
 80017a2:	0071      	lsls	r1, r6, #1
 80017a4:	5a8a      	ldrh	r2, [r1, r2]
 80017a6:	1880      	adds	r0, r0, r2
		for(uint16_t j = 0; j<sweeps; j++){
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b2a5      	uxth	r5, r4
 80017ae:	429d      	cmp	r5, r3
 80017b0:	d8f5      	bhi.n	800179e <dcdatarm+0x16>
		uint32_t average = accumulator/sweeps;
 80017b2:	0021      	movs	r1, r4
 80017b4:	f00f fcce 	bl	8011154 <__udivsi3>
		for(uint16_t j = 0; j<sweeps; j++){
 80017b8:	2300      	movs	r3, #0
 80017ba:	e008      	b.n	80017ce <dcdatarm+0x46>
			data[j][i] -= average;
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	59d2      	ldr	r2, [r2, r7]
 80017c0:	0071      	lsls	r1, r6, #1
 80017c2:	1852      	adds	r2, r2, r1
 80017c4:	8811      	ldrh	r1, [r2, #0]
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	8011      	strh	r1, [r2, #0]
		for(uint16_t j = 0; j<sweeps; j++){
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	429d      	cmp	r5, r3
 80017d0:	d8f4      	bhi.n	80017bc <dcdatarm+0x34>
	for(uint16_t i = 0; i<bins; i++){
 80017d2:	3601      	adds	r6, #1
 80017d4:	b2b6      	uxth	r6, r6
 80017d6:	9b00      	ldr	r3, [sp, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	42b3      	cmp	r3, r6
 80017dc:	d902      	bls.n	80017e4 <dcdatarm+0x5c>
		for(uint16_t j = 0; j<sweeps; j++){
 80017de:	2300      	movs	r3, #0
		uint32_t accumulator = 0;
 80017e0:	2000      	movs	r0, #0
 80017e2:	e7e3      	b.n	80017ac <dcdatarm+0x24>
}
 80017e4:	b003      	add	sp, #12
 80017e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017e8 <roundDown>:
    return numToRound + multiple - remainder;
}


uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
 80017e8:	b510      	push	{r4, lr}
 80017ea:	0004      	movs	r4, r0
    if (multiple == 0)
 80017ec:	2900      	cmp	r1, #0
 80017ee:	d004      	beq.n	80017fa <roundDown+0x12>
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 80017f0:	f00f fd36 	bl	8011260 <__aeabi_uidivmod>
    if (remainder == 0)
 80017f4:	2900      	cmp	r1, #0
 80017f6:	d000      	beq.n	80017fa <roundDown+0x12>
        return numToRound;

    return numToRound - remainder;
 80017f8:	1a64      	subs	r4, r4, r1
 80017fa:	0020      	movs	r0, r4
 80017fc:	bd10      	pop	{r4, pc}

080017fe <get_byte>:
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	23ff      	movs	r3, #255	; 0xff
 8001802:	408b      	lsls	r3, r1
 8001804:	4018      	ands	r0, r3
 8001806:	40c8      	lsrs	r0, r1
 8001808:	b2c0      	uxtb	r0, r0
}
 800180a:	4770      	bx	lr

0800180c <fftSwap>:
}

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
 800180c:	b510      	push	{r4, lr}
	int16_t temp = *x;
 800180e:	2200      	movs	r2, #0
 8001810:	5e83      	ldrsh	r3, [r0, r2]
	*x = *y;
 8001812:	2400      	movs	r4, #0
 8001814:	5f0a      	ldrsh	r2, [r1, r4]
 8001816:	8002      	strh	r2, [r0, #0]
	*y = temp;
 8001818:	800b      	strh	r3, [r1, #0]
}
 800181a:	bd10      	pop	{r4, pc}

0800181c <fftExponent>:
{
 800181c:	0002      	movs	r2, r0
	uint8_t result = 0;
 800181e:	2000      	movs	r0, #0
 8001820:	e001      	b.n	8001826 <fftExponent+0xa>
	while (((value >> result) & 1) != 1) result++;
 8001822:	3001      	adds	r0, #1
 8001824:	b2c0      	uxtb	r0, r0
 8001826:	0013      	movs	r3, r2
 8001828:	4103      	asrs	r3, r0
 800182a:	07db      	lsls	r3, r3, #31
 800182c:	d5f9      	bpl.n	8001822 <fftExponent+0x6>
}
 800182e:	4770      	bx	lr

08001830 <fftRangeScaling>:
{
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	0006      	movs	r6, r0
	for(int i =0; i<(samples);i++){
 8001836:	2300      	movs	r3, #0
	int max = 0;
 8001838:	2000      	movs	r0, #0
 800183a:	e002      	b.n	8001842 <fftRangeScaling+0x12>
			max = vReal[i];
 800183c:	0014      	movs	r4, r2
 800183e:	e008      	b.n	8001852 <fftRangeScaling+0x22>
	for(int i =0; i<(samples);i++){
 8001840:	3301      	adds	r3, #1
 8001842:	000f      	movs	r7, r1
 8001844:	4299      	cmp	r1, r3
 8001846:	dd09      	ble.n	800185c <fftRangeScaling+0x2c>
		if (max < vReal[i]){
 8001848:	005a      	lsls	r2, r3, #1
 800184a:	5f92      	ldrsh	r2, [r2, r6]
 800184c:	4282      	cmp	r2, r0
 800184e:	dcf5      	bgt.n	800183c <fftRangeScaling+0xc>
 8001850:	0004      	movs	r4, r0
		if (max < -vReal[i]){
 8001852:	4250      	negs	r0, r2
 8001854:	42a0      	cmp	r0, r4
 8001856:	dcf3      	bgt.n	8001840 <fftRangeScaling+0x10>
 8001858:	0020      	movs	r0, r4
 800185a:	e7f1      	b.n	8001840 <fftRangeScaling+0x10>
	float scaler = 256.0f/max;
 800185c:	f010 f85e 	bl	801191c <__aeabi_i2f>
 8001860:	1c01      	adds	r1, r0, #0
 8001862:	2087      	movs	r0, #135	; 0x87
 8001864:	05c0      	lsls	r0, r0, #23
 8001866:	f00f f831 	bl	80108cc <__aeabi_fdiv>
 800186a:	9001      	str	r0, [sp, #4]
	for(int i =0; i<(samples);i++){
 800186c:	2500      	movs	r5, #0
 800186e:	e00c      	b.n	800188a <fftRangeScaling+0x5a>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 8001870:	006c      	lsls	r4, r5, #1
 8001872:	1934      	adds	r4, r6, r4
 8001874:	2300      	movs	r3, #0
 8001876:	5ee0      	ldrsh	r0, [r4, r3]
 8001878:	f010 f850 	bl	801191c <__aeabi_i2f>
 800187c:	9901      	ldr	r1, [sp, #4]
 800187e:	f00f f937 	bl	8010af0 <__aeabi_fmul>
 8001882:	f010 f82b 	bl	80118dc <__aeabi_f2iz>
 8001886:	8020      	strh	r0, [r4, #0]
	for(int i =0; i<(samples);i++){
 8001888:	3501      	adds	r5, #1
 800188a:	42af      	cmp	r7, r5
 800188c:	dcf0      	bgt.n	8001870 <fftRangeScaling+0x40>
}
 800188e:	9801      	ldr	r0, [sp, #4]
 8001890:	b003      	add	sp, #12
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001894 <RegInt_regmap>:
//0xD6 :: Data Eval Mode
//0xD7 :: Focus weight Radius
//0xD8 :: Data zeroing threshold
//0xD9 :: Bandstop velocity filter
uint32_t* RegInt_regmap(uint8_t reg){
	REGADRERR = -1;
 8001894:	2101      	movs	r1, #1
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <RegInt_regmap+0x60>)
 8001898:	4249      	negs	r1, r1
uint32_t* RegInt_regmap(uint8_t reg){
 800189a:	0002      	movs	r2, r0
	REGADRERR = -1;
 800189c:	63d9      	str	r1, [r3, #60]	; 0x3c
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 800189e:	2812      	cmp	r0, #18
 80018a0:	d820      	bhi.n	80018e4 <RegInt_regmap+0x50>
		ptr = &GENERAL_REGISTERS[reg];
 80018a2:	3340      	adds	r3, #64	; 0x40
 80018a4:	0080      	lsls	r0, r0, #2
 80018a6:	1818      	adds	r0, r3, r0
	}
	if (reg == 0xE9){
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 80018a8:	0013      	movs	r3, r2
 80018aa:	3b20      	subs	r3, #32
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	2922      	cmp	r1, #34	; 0x22
 80018b0:	d802      	bhi.n	80018b8 <RegInt_regmap+0x24>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 80018b2:	0098      	lsls	r0, r3, #2
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <RegInt_regmap+0x64>)
 80018b6:	18c0      	adds	r0, r0, r3
	}
	if (0x81 <= reg && reg <= 0x85){
 80018b8:	0013      	movs	r3, r2
 80018ba:	337f      	adds	r3, #127	; 0x7f
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d805      	bhi.n	80018ce <RegInt_regmap+0x3a>
		ptr = &META_REGISTERS[reg - 0x81];
 80018c2:	0010      	movs	r0, r2
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <RegInt_regmap+0x68>)
 80018c6:	3881      	subs	r0, #129	; 0x81
 80018c8:	0080      	lsls	r0, r0, #2
 80018ca:	330c      	adds	r3, #12
 80018cc:	1818      	adds	r0, r3, r0
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 80018ce:	0013      	movs	r3, r2
 80018d0:	3330      	adds	r3, #48	; 0x30
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d804      	bhi.n	80018e2 <RegInt_regmap+0x4e>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <RegInt_regmap+0x68>)
 80018da:	3ad0      	subs	r2, #208	; 0xd0
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	3320      	adds	r3, #32
 80018e0:	1898      	adds	r0, r3, r2
	}
	return ptr;
}
 80018e2:	4770      	bx	lr
	uint32_t* ptr = &REGADRERR;
 80018e4:	0018      	movs	r0, r3
 80018e6:	303c      	adds	r0, #60	; 0x3c
	if (reg == 0xE9){
 80018e8:	2ae9      	cmp	r2, #233	; 0xe9
 80018ea:	d1dd      	bne.n	80018a8 <RegInt_regmap+0x14>
		ptr = &OUTPUT_BUFFER_LENGTH;
 80018ec:	3338      	adds	r3, #56	; 0x38
 80018ee:	0018      	movs	r0, r3
 80018f0:	e7da      	b.n	80018a8 <RegInt_regmap+0x14>
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	2000008c 	.word	0x2000008c
 80018f8:	200004c0 	.word	0x200004c0
 80018fc:	2000010c 	.word	0x2000010c

08001900 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8001900:	4770      	bx	lr

08001902 <rtc_tick_to_time>:
 *
 * @param[in] tick rtc ticks in ms
 * @param[out] time RTC time
 */
static void rtc_tick_to_time(uint32_t tick, RTC_TimeTypeDef *time)
{
 8001902:	b570      	push	{r4, r5, r6, lr}
 8001904:	0006      	movs	r6, r0
 8001906:	000c      	movs	r4, r1
	uint32_t rtc_ticks_ms = tick;

	time->SecondFraction = hrtc.Init.SynchPrediv;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <rtc_tick_to_time+0x6e>)
 800190a:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800190c:	608d      	str	r5, [r1, #8]

	time->Hours = (rtc_ticks_ms / (60 * 60 * 1000)) % 24;
 800190e:	4919      	ldr	r1, [pc, #100]	; (8001974 <rtc_tick_to_time+0x72>)
 8001910:	f00f fc20 	bl	8011154 <__udivsi3>
 8001914:	2118      	movs	r1, #24
 8001916:	f00f fca3 	bl	8011260 <__aeabi_uidivmod>
 800191a:	7021      	strb	r1, [r4, #0]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 60 * 1000);
 800191c:	4915      	ldr	r1, [pc, #84]	; (8001974 <rtc_tick_to_time+0x72>)
 800191e:	0030      	movs	r0, r6
 8001920:	f00f fc9e 	bl	8011260 <__aeabi_uidivmod>
 8001924:	000e      	movs	r6, r1

	time->Minutes = (rtc_ticks_ms / (60 * 1000)) % 60;
 8001926:	4914      	ldr	r1, [pc, #80]	; (8001978 <rtc_tick_to_time+0x76>)
 8001928:	0030      	movs	r0, r6
 800192a:	f00f fc13 	bl	8011154 <__udivsi3>
 800192e:	213c      	movs	r1, #60	; 0x3c
 8001930:	f00f fc96 	bl	8011260 <__aeabi_uidivmod>
 8001934:	7061      	strb	r1, [r4, #1]

	rtc_ticks_ms = rtc_ticks_ms % (60 * 1000);
 8001936:	4910      	ldr	r1, [pc, #64]	; (8001978 <rtc_tick_to_time+0x76>)
 8001938:	0030      	movs	r0, r6
 800193a:	f00f fc91 	bl	8011260 <__aeabi_uidivmod>
 800193e:	000e      	movs	r6, r1

	time->Seconds = (rtc_ticks_ms / 1000) % 60;
 8001940:	21fa      	movs	r1, #250	; 0xfa
 8001942:	0089      	lsls	r1, r1, #2
 8001944:	0030      	movs	r0, r6
 8001946:	f00f fc05 	bl	8011154 <__udivsi3>
 800194a:	213c      	movs	r1, #60	; 0x3c
 800194c:	f00f fc88 	bl	8011260 <__aeabi_uidivmod>
 8001950:	70a1      	strb	r1, [r4, #2]

	rtc_ticks_ms = rtc_ticks_ms % 1000;
 8001952:	21fa      	movs	r1, #250	; 0xfa
 8001954:	0089      	lsls	r1, r1, #2
 8001956:	0030      	movs	r0, r6
 8001958:	f00f fc82 	bl	8011260 <__aeabi_uidivmod>

	time->SubSeconds = time->SecondFraction - (rtc_ticks_ms * (time->SecondFraction + 1)) / 1000;
 800195c:	1c68      	adds	r0, r5, #1
 800195e:	4348      	muls	r0, r1
 8001960:	21fa      	movs	r1, #250	; 0xfa
 8001962:	0089      	lsls	r1, r1, #2
 8001964:	f00f fbf6 	bl	8011154 <__udivsi3>
 8001968:	1a2d      	subs	r5, r5, r0
 800196a:	6065      	str	r5, [r4, #4]
}
 800196c:	bd70      	pop	{r4, r5, r6, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	2000010c 	.word	0x2000010c
 8001974:	0036ee80 	.word	0x0036ee80
 8001978:	0000ea60 	.word	0x0000ea60

0800197c <rtc_time_to_tick>:
{
 800197c:	b510      	push	{r4, lr}
	if (time->Hours)
 800197e:	7803      	ldrb	r3, [r0, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d01d      	beq.n	80019c0 <rtc_time_to_tick+0x44>
		rtc_ticks_ms += time->Hours * 60 * 60 * 1000;
 8001984:	4c0f      	ldr	r4, [pc, #60]	; (80019c4 <rtc_time_to_tick+0x48>)
 8001986:	435c      	muls	r4, r3
	if (time->Minutes)
 8001988:	7843      	ldrb	r3, [r0, #1]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <rtc_time_to_tick+0x18>
		rtc_ticks_ms += time->Minutes * 60 * 1000;
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <rtc_time_to_tick+0x4c>)
 8001990:	4353      	muls	r3, r2
 8001992:	18e4      	adds	r4, r4, r3
	if (time->Seconds)
 8001994:	7882      	ldrb	r2, [r0, #2]
 8001996:	2a00      	cmp	r2, #0
 8001998:	d005      	beq.n	80019a6 <rtc_time_to_tick+0x2a>
		rtc_ticks_ms += time->Seconds * 1000;
 800199a:	0153      	lsls	r3, r2, #5
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	189b      	adds	r3, r3, r2
 80019a2:	00da      	lsls	r2, r3, #3
 80019a4:	18a4      	adds	r4, r4, r2
	rtc_ticks_ms += ((time->SecondFraction - time->SubSeconds) * 1000) / (time->SecondFraction + 1);
 80019a6:	6881      	ldr	r1, [r0, #8]
 80019a8:	6842      	ldr	r2, [r0, #4]
 80019aa:	1a8a      	subs	r2, r1, r2
 80019ac:	0153      	lsls	r3, r2, #5
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	189b      	adds	r3, r3, r2
 80019b4:	00d8      	lsls	r0, r3, #3
 80019b6:	3101      	adds	r1, #1
 80019b8:	f00f fbcc 	bl	8011154 <__udivsi3>
 80019bc:	1900      	adds	r0, r0, r4
}
 80019be:	bd10      	pop	{r4, pc}
	uint32_t rtc_ticks_ms = 0;
 80019c0:	2400      	movs	r4, #0
 80019c2:	e7e1      	b.n	8001988 <rtc_time_to_tick+0xc>
 80019c4:	0036ee80 	.word	0x0036ee80
 80019c8:	0000ea60 	.word	0x0000ea60

080019cc <acc_hal_integration_get_implementation>:
};


const acc_hal_t *acc_hal_integration_get_implementation(void)
{
	return &hal;
 80019cc:	4801      	ldr	r0, [pc, #4]	; (80019d4 <acc_hal_integration_get_implementation+0x8>)
}
 80019ce:	3014      	adds	r0, #20
 80019d0:	4770      	bx	lr
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	080166d0 	.word	0x080166d0

080019d8 <acc_hal_integration_get_reference_frequency>:
}
 80019d8:	4800      	ldr	r0, [pc, #0]	; (80019dc <acc_hal_integration_get_reference_frequency+0x4>)
 80019da:	4770      	bx	lr
 80019dc:	4bb71b00 	.word	0x4bb71b00

080019e0 <data_free>:
	}
	
	return 0;
}

void data_free(void){
 80019e0:	b510      	push	{r4, lr}
	free(data);
 80019e2:	4c04      	ldr	r4, [pc, #16]	; (80019f4 <data_free+0x14>)
 80019e4:	68e0      	ldr	r0, [r4, #12]
 80019e6:	f014 fe3f 	bl	8016668 <free>
	data = NULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	60e3      	str	r3, [r4, #12]
	sweeps = 0;
 80019ee:	8223      	strh	r3, [r4, #16]
	bins = 0;
 80019f0:	8263      	strh	r3, [r4, #18]
}
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	2000018c 	.word	0x2000018c

080019f8 <acc_cpd_linear_sweep_update_program>:
 80019f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019fa:	784b      	ldrb	r3, [r1, #1]
 80019fc:	0005      	movs	r5, r0
 80019fe:	000c      	movs	r4, r1
 8001a00:	684f      	ldr	r7, [r1, #4]
 8001a02:	68ce      	ldr	r6, [r1, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <acc_cpd_linear_sweep_update_program+0x20>
 8001a08:	688b      	ldr	r3, [r1, #8]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001a0c:	330e      	adds	r3, #14
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	490d      	ldr	r1, [pc, #52]	; (8001a48 <acc_cpd_linear_sweep_update_program+0x50>)
 8001a12:	235e      	movs	r3, #94	; 0x5e
 8001a14:	f00b fae4 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 8001a18:	7823      	ldrb	r3, [r4, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <acc_cpd_linear_sweep_update_program+0x34>
 8001a1e:	9700      	str	r7, [sp, #0]
 8001a20:	2336      	movs	r3, #54	; 0x36
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001a24:	4908      	ldr	r1, [pc, #32]	; (8001a48 <acc_cpd_linear_sweep_update_program+0x50>)
 8001a26:	0028      	movs	r0, r5
 8001a28:	f00b fada 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 8001a2c:	78a3      	ldrb	r3, [r4, #2]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <acc_cpd_linear_sweep_update_program+0x48>
 8001a32:	9600      	str	r6, [sp, #0]
 8001a34:	2372      	movs	r3, #114	; 0x72
 8001a36:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <acc_cpd_linear_sweep_update_program+0x4c>)
 8001a38:	4903      	ldr	r1, [pc, #12]	; (8001a48 <acc_cpd_linear_sweep_update_program+0x50>)
 8001a3a:	0028      	movs	r0, r5
 8001a3c:	f00b fad0 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 8001a40:	2001      	movs	r0, #1
 8001a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a44:	08018c58 	.word	0x08018c58
 8001a48:	0801b7a0 	.word	0x0801b7a0

08001a4c <update_program.lto_priv.130>:
 8001a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a4e:	6945      	ldr	r5, [r0, #20]
 8001a50:	2401      	movs	r4, #1
 8001a52:	002b      	movs	r3, r5
 8001a54:	33ba      	adds	r3, #186	; 0xba
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4319      	orrs	r1, r3
 8001a5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001a5c:	404c      	eors	r4, r1
 8001a5e:	425a      	negs	r2, r3
 8001a60:	4153      	adcs	r3, r2
 8001a62:	428b      	cmp	r3, r1
 8001a64:	d006      	beq.n	8001a74 <update_program.lto_priv.130+0x28>
 8001a66:	9400      	str	r4, [sp, #0]
 8001a68:	23ef      	movs	r3, #239	; 0xef
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <update_program.lto_priv.130+0x30>)
 8001a6c:	4904      	ldr	r1, [pc, #16]	; (8001a80 <update_program.lto_priv.130+0x34>)
 8001a6e:	6800      	ldr	r0, [r0, #0]
 8001a70:	f00b fab6 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 8001a74:	642c      	str	r4, [r5, #64]	; 0x40
 8001a76:	2001      	movs	r0, #1
 8001a78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	08018228 	.word	0x08018228
 8001a80:	08019de8 	.word	0x08019de8

08001a84 <acc_sensor_protocol_r2_check_asic_id>:
 8001a84:	b530      	push	{r4, r5, lr}
 8001a86:	250e      	movs	r5, #14
 8001a88:	2400      	movs	r4, #0
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	446d      	add	r5, sp
 8001a8e:	002a      	movs	r2, r5
 8001a90:	0021      	movs	r1, r4
 8001a92:	802c      	strh	r4, [r5, #0]
 8001a94:	f00e f9c4 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8001a98:	882a      	ldrh	r2, [r5, #0]
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <acc_sensor_protocol_r2_check_asic_id+0x34>)
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d007      	beq.n	8001ab2 <acc_sensor_protocol_r2_check_asic_id+0x2e>
 8001aa2:	9200      	str	r2, [sp, #0]
 8001aa4:	4a05      	ldr	r2, [pc, #20]	; (8001abc <acc_sensor_protocol_r2_check_asic_id+0x38>)
 8001aa6:	0020      	movs	r0, r4
 8001aa8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8001aaa:	4905      	ldr	r1, [pc, #20]	; (8001ac0 <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 8001aae:	47a8      	blx	r5
 8001ab0:	0020      	movs	r0, r4
 8001ab2:	b005      	add	sp, #20
 8001ab4:	bd30      	pop	{r4, r5, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	00001112 	.word	0x00001112
 8001abc:	200005d8 	.word	0x200005d8
 8001ac0:	0801d00f 	.word	0x0801d00f
 8001ac4:	0801cfe1 	.word	0x0801cfe1

08001ac8 <acc_sensor_protocol_r2_transfer_data>:
 8001ac8:	b570      	push	{r4, r5, r6, lr}
 8001aca:	0016      	movs	r6, r2
 8001acc:	0005      	movs	r5, r0
 8001ace:	f00b fa25 	bl	800cf1c <internal_buffer_processed_read.constprop.29>
 8001ad2:	0004      	movs	r4, r0
 8001ad4:	0033      	movs	r3, r6
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	0029      	movs	r1, r5
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7fe fb2c 	bl	8000138 <acc_probes_execute_uint16>
 8001ae0:	0020      	movs	r0, r4
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}

08001ae4 <acc_element_source_adc_inject_data>:
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0015      	movs	r5, r2
 8001aea:	6940      	ldr	r0, [r0, #20]
 8001aec:	f014 fdc6 	bl	801667c <memcpy>
 8001af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <acc_element_source_adc_inject_data+0x24>)
 8001af4:	601d      	str	r5, [r3, #0]
 8001af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	6a23      	ldr	r3, [r4, #32]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	6843      	ldr	r3, [r0, #4]
 8001b04:	4798      	blx	r3
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
 8001b08:	51645c3c 	.word	0x51645c3c

08001b0c <inject_data.lto_priv.161>:
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	3038      	adds	r0, #56	; 0x38
 8001b10:	f7ff ffe8 	bl	8001ae4 <acc_element_source_adc_inject_data>
 8001b14:	bd10      	pop	{r4, pc}

08001b16 <inject_data.lto_priv.160>:
 8001b16:	b510      	push	{r4, lr}
 8001b18:	3038      	adds	r0, #56	; 0x38
 8001b1a:	f7ff ffe3 	bl	8001ae4 <acc_element_source_adc_inject_data>
 8001b1e:	bd10      	pop	{r4, pc}

08001b20 <event.lto_priv.119>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	0004      	movs	r4, r0
 8001b24:	69c5      	ldr	r5, [r0, #28]
 8001b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b28:	1d2e      	adds	r6, r5, #4
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	782b      	ldrb	r3, [r5, #0]
 8001b2e:	6900      	ldr	r0, [r0, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d009      	beq.n	8001b48 <event.lto_priv.119+0x28>
 8001b34:	0001      	movs	r1, r0
 8001b36:	0030      	movs	r0, r6
 8001b38:	f014 fda0 	bl	801667c <memcpy>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	702b      	strb	r3, [r5, #0]
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	6843      	ldr	r3, [r0, #4]
 8001b44:	4798      	blx	r3
 8001b46:	bd70      	pop	{r4, r5, r6, pc}
 8001b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b4a:	0031      	movs	r1, r6
 8001b4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001b4e:	47a8      	blx	r5
 8001b50:	e7f6      	b.n	8001b40 <event.lto_priv.119+0x20>

08001b52 <acc_service_send_data>:
 8001b52:	b570      	push	{r4, r5, r6, lr}
 8001b54:	9d04      	ldr	r5, [sp, #16]
 8001b56:	001e      	movs	r6, r3
 8001b58:	782b      	ldrb	r3, [r5, #0]
 8001b5a:	6944      	ldr	r4, [r0, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10a      	bne.n	8001b76 <acc_service_send_data+0x24>
 8001b60:	7ea3      	ldrb	r3, [r4, #26]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d011      	beq.n	8001b8a <acc_service_send_data+0x38>
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	6860      	ldr	r0, [r4, #4]
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d900      	bls.n	8001b70 <acc_service_send_data+0x1e>
 8001b6e:	0013      	movs	r3, r2
 8001b70:	001a      	movs	r2, r3
 8001b72:	f014 fd83 	bl	801667c <memcpy>
 8001b76:	782b      	ldrb	r3, [r5, #0]
 8001b78:	6920      	ldr	r0, [r4, #16]
 8001b7a:	7663      	strb	r3, [r4, #25]
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d003      	beq.n	8001b88 <acc_service_send_data+0x36>
 8001b80:	6962      	ldr	r2, [r4, #20]
 8001b82:	0031      	movs	r1, r6
 8001b84:	f014 fd7a 	bl	801667c <memcpy>
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	68a3      	ldr	r3, [r4, #8]
 8001b8c:	6019      	str	r1, [r3, #0]
 8001b8e:	e7f2      	b.n	8001b76 <acc_service_send_data+0x24>

08001b90 <sparse_send_data>:
 8001b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001b92:	0005      	movs	r5, r0
 8001b94:	0010      	movs	r0, r2
 8001b96:	798a      	ldrb	r2, [r1, #6]
 8001b98:	790e      	ldrb	r6, [r1, #4]
 8001b9a:	794c      	ldrb	r4, [r1, #5]
 8001b9c:	ab03      	add	r3, sp, #12
 8001b9e:	709a      	strb	r2, [r3, #2]
 8001ba0:	aa02      	add	r2, sp, #8
 8001ba2:	705e      	strb	r6, [r3, #1]
 8001ba4:	7014      	strb	r4, [r2, #0]
 8001ba6:	701c      	strb	r4, [r3, #0]
 8001ba8:	9200      	str	r2, [sp, #0]
 8001baa:	694a      	ldr	r2, [r1, #20]
 8001bac:	0029      	movs	r1, r5
 8001bae:	f7ff ffd0 	bl	8001b52 <acc_service_send_data>
 8001bb2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08001bb4 <envelope_send_data>:
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb6:	0005      	movs	r5, r0
 8001bb8:	b085      	sub	sp, #20
 8001bba:	0010      	movs	r0, r2
 8001bbc:	79ca      	ldrb	r2, [r1, #7]
 8001bbe:	794c      	ldrb	r4, [r1, #5]
 8001bc0:	ab03      	add	r3, sp, #12
 8001bc2:	790e      	ldrb	r6, [r1, #4]
 8001bc4:	798f      	ldrb	r7, [r1, #6]
 8001bc6:	70da      	strb	r2, [r3, #3]
 8001bc8:	aa02      	add	r2, sp, #8
 8001bca:	7014      	strb	r4, [r2, #0]
 8001bcc:	701f      	strb	r7, [r3, #0]
 8001bce:	705c      	strb	r4, [r3, #1]
 8001bd0:	709e      	strb	r6, [r3, #2]
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	694a      	ldr	r2, [r1, #20]
 8001bd6:	0029      	movs	r1, r5
 8001bd8:	f7ff ffbb 	bl	8001b52 <acc_service_send_data>
 8001bdc:	b005      	add	sp, #20
 8001bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001be0 <acc_sensor_manager_prepare_radar_engine>:
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	46d6      	mov	lr, sl
 8001be4:	464f      	mov	r7, r9
 8001be6:	4646      	mov	r6, r8
 8001be8:	000c      	movs	r4, r1
 8001bea:	b5c0      	push	{r6, r7, lr}
 8001bec:	2100      	movs	r1, #0
 8001bee:	b092      	sub	sp, #72	; 0x48
 8001bf0:	0005      	movs	r5, r0
 8001bf2:	0017      	movs	r7, r2
 8001bf4:	3004      	adds	r0, #4
 8001bf6:	2234      	movs	r2, #52	; 0x34
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	f012 f821 	bl	8013c40 <memset>
 8001bfe:	0020      	movs	r0, r4
 8001c00:	f7ff f8ca 	bl	8000d98 <acc_base_configuration_sensor_get>
 8001c04:	4681      	mov	r9, r0
 8001c06:	0020      	movs	r0, r4
 8001c08:	f7ff f83e 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8001c0c:	ae01      	add	r6, sp, #4
 8001c0e:	8030      	strh	r0, [r6, #0]
 8001c10:	0020      	movs	r0, r4
 8001c12:	f7ff f84e 	bl	8000cb2 <acc_base_configuration_integrator_get>
 8001c16:	8070      	strh	r0, [r6, #2]
 8001c18:	0020      	movs	r0, r4
 8001c1a:	f7fe ffd5 	bl	8000bc8 <configuration_is_valid>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	4298      	cmp	r0, r3
 8001c22:	d001      	beq.n	8001c28 <acc_sensor_manager_prepare_radar_engine+0x48>
 8001c24:	1da3      	adds	r3, r4, #6
 8001c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c28:	0020      	movs	r0, r4
 8001c2a:	80b3      	strh	r3, [r6, #4]
 8001c2c:	f7ff f88f 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8001c30:	0032      	movs	r2, r6
 8001c32:	80f0      	strh	r0, [r6, #6]
 8001c34:	4649      	mov	r1, r9
 8001c36:	2304      	movs	r3, #4
 8001c38:	2012      	movs	r0, #18
 8001c3a:	f7fe fa7d 	bl	8000138 <acc_probes_execute_uint16>
 8001c3e:	2318      	movs	r3, #24
 8001c40:	469a      	mov	sl, r3
 8001c42:	44aa      	add	sl, r5
 8001c44:	2220      	movs	r2, #32
 8001c46:	2100      	movs	r1, #0
 8001c48:	4650      	mov	r0, sl
 8001c4a:	f011 fff9 	bl	8013c40 <memset>
 8001c4e:	0021      	movs	r1, r4
 8001c50:	4650      	mov	r0, sl
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	4798      	blx	r3
 8001c56:	ae0a      	add	r6, sp, #40	; 0x28
 8001c58:	4681      	mov	r9, r0
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d018      	beq.n	8001c90 <acc_sensor_manager_prepare_radar_engine+0xb0>
 8001c5e:	2220      	movs	r2, #32
 8001c60:	2100      	movs	r1, #0
 8001c62:	0030      	movs	r0, r6
 8001c64:	f011 ffec 	bl	8013c40 <memset>
 8001c68:	221c      	movs	r2, #28
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	a803      	add	r0, sp, #12
 8001c6e:	f011 ffe7 	bl	8013c40 <memset>
 8001c72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c74:	0032      	movs	r2, r6
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	0021      	movs	r1, r4
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	ab03      	add	r3, sp, #12
 8001c80:	47c8      	blx	r9
 8001c82:	4681      	mov	r9, r0
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d10d      	bne.n	8001ca4 <acc_sensor_manager_prepare_radar_engine+0xc4>
 8001c88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c8a:	4650      	mov	r0, sl
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	4798      	blx	r3
 8001c90:	0020      	movs	r0, r4
 8001c92:	f7ff f86e 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d02f      	beq.n	8001cfa <acc_sensor_manager_prepare_radar_engine+0x11a>
 8001c9a:	2804      	cmp	r0, #4
 8001c9c:	d04d      	beq.n	8001d3a <acc_sensor_manager_prepare_radar_engine+0x15a>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	702b      	strb	r3, [r5, #0]
 8001ca2:	e02c      	b.n	8001cfe <acc_sensor_manager_prepare_radar_engine+0x11e>
 8001ca4:	2f00      	cmp	r7, #0
 8001ca6:	d007      	beq.n	8001cb8 <acc_sensor_manager_prepare_radar_engine+0xd8>
 8001ca8:	003b      	movs	r3, r7
 8001caa:	0032      	movs	r2, r6
 8001cac:	ca83      	ldmia	r2!, {r0, r1, r7}
 8001cae:	c383      	stmia	r3!, {r0, r1, r7}
 8001cb0:	ca83      	ldmia	r2!, {r0, r1, r7}
 8001cb2:	c383      	stmia	r3!, {r0, r1, r7}
 8001cb4:	ca03      	ldmia	r2!, {r0, r1}
 8001cb6:	c303      	stmia	r3!, {r0, r1}
 8001cb8:	4643      	mov	r3, r8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <acc_sensor_manager_prepare_radar_engine+0xe8>
 8001cbe:	221c      	movs	r2, #28
 8001cc0:	a903      	add	r1, sp, #12
 8001cc2:	4640      	mov	r0, r8
 8001cc4:	f014 fcda 	bl	801667c <memcpy>
 8001cc8:	0020      	movs	r0, r4
 8001cca:	f7ff f813 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8001cce:	2801      	cmp	r0, #1
 8001cd0:	d010      	beq.n	8001cf4 <acc_sensor_manager_prepare_radar_engine+0x114>
 8001cd2:	0020      	movs	r0, r4
 8001cd4:	f7fe fff8 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8001cd8:	1c01      	adds	r1, r0, #0
 8001cda:	4819      	ldr	r0, [pc, #100]	; (8001d40 <acc_sensor_manager_prepare_radar_engine+0x160>)
 8001cdc:	f00e fdf6 	bl	80108cc <__aeabi_fdiv>
 8001ce0:	4917      	ldr	r1, [pc, #92]	; (8001d40 <acc_sensor_manager_prepare_radar_engine+0x160>)
 8001ce2:	f00e fc59 	bl	8010598 <__aeabi_fadd>
 8001ce6:	f00f fc43 	bl	8011570 <__aeabi_f2uiz>
 8001cea:	2300      	movs	r3, #0
 8001cec:	6068      	str	r0, [r5, #4]
 8001cee:	60eb      	str	r3, [r5, #12]
 8001cf0:	816b      	strh	r3, [r5, #10]
 8001cf2:	e7cd      	b.n	8001c90 <acc_sensor_manager_prepare_radar_engine+0xb0>
 8001cf4:	20fa      	movs	r0, #250	; 0xfa
 8001cf6:	00c0      	lsls	r0, r0, #3
 8001cf8:	e7f7      	b.n	8001cea <acc_sensor_manager_prepare_radar_engine+0x10a>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	702b      	strb	r3, [r5, #0]
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f7fe fff8 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8001d04:	4243      	negs	r3, r0
 8001d06:	4158      	adcs	r0, r3
 8001d08:	7068      	strb	r0, [r5, #1]
 8001d0a:	0020      	movs	r0, r4
 8001d0c:	f7fe ff76 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 8001d10:	70a8      	strb	r0, [r5, #2]
 8001d12:	0020      	movs	r0, r4
 8001d14:	f7ff f840 	bl	8000d98 <acc_base_configuration_sensor_get>
 8001d18:	2305      	movs	r3, #5
 8001d1a:	6070      	str	r0, [r6, #4]
 8001d1c:	7033      	strb	r3, [r6, #0]
 8001d1e:	0030      	movs	r0, r6
 8001d20:	3302      	adds	r3, #2
 8001d22:	221c      	movs	r2, #28
 8001d24:	4641      	mov	r1, r8
 8001d26:	60b3      	str	r3, [r6, #8]
 8001d28:	f7fe f9ec 	bl	8000104 <acc_probes_execute>
 8001d2c:	4648      	mov	r0, r9
 8001d2e:	b012      	add	sp, #72	; 0x48
 8001d30:	bc1c      	pop	{r2, r3, r4}
 8001d32:	4690      	mov	r8, r2
 8001d34:	4699      	mov	r9, r3
 8001d36:	46a2      	mov	sl, r4
 8001d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	702b      	strb	r3, [r5, #0]
 8001d3e:	e7de      	b.n	8001cfe <acc_sensor_manager_prepare_radar_engine+0x11e>
 8001d40:	44fa0000 	.word	0x44fa0000

08001d44 <saturation_check_u16>:
 8001d44:	b510      	push	{r4, lr}
 8001d46:	f00d ffb5 	bl	800fcb4 <acc_alg_basic_saturation_check_u16>
 8001d4a:	bd10      	pop	{r4, pc}

08001d4c <abs_q3_12_complex>:
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	46c6      	mov	lr, r8
 8001d50:	0007      	movs	r7, r0
 8001d52:	4688      	mov	r8, r1
 8001d54:	2400      	movs	r4, #0
 8001d56:	b500      	push	{lr}
 8001d58:	0895      	lsrs	r5, r2, #2
 8001d5a:	0066      	lsls	r6, r4, #1
 8001d5c:	42ac      	cmp	r4, r5
 8001d5e:	d103      	bne.n	8001d68 <abs_q3_12_complex+0x1c>
 8001d60:	0030      	movs	r0, r6
 8001d62:	bc04      	pop	{r2}
 8001d64:	4690      	mov	r8, r2
 8001d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d68:	00a3      	lsls	r3, r4, #2
 8001d6a:	5bda      	ldrh	r2, [r3, r7]
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	8858      	ldrh	r0, [r3, #2]
 8001d70:	3401      	adds	r4, #1
 8001d72:	0400      	lsls	r0, r0, #16
 8001d74:	4310      	orrs	r0, r2
 8001d76:	f00e f81f 	bl	800fdb8 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8001d7a:	4643      	mov	r3, r8
 8001d7c:	5398      	strh	r0, [r3, r6]
 8001d7e:	e7ec      	b.n	8001d5a <abs_q3_12_complex+0xe>

08001d80 <iq_mix_q3_12_complex>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	46de      	mov	lr, fp
 8001d84:	464e      	mov	r6, r9
 8001d86:	4645      	mov	r5, r8
 8001d88:	4657      	mov	r7, sl
 8001d8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d8c:	b5e0      	push	{r5, r6, r7, lr}
 8001d8e:	4698      	mov	r8, r3
 8001d90:	681e      	ldr	r6, [r3, #0]
 8001d92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d94:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001d96:	681d      	ldr	r5, [r3, #0]
 8001d98:	0004      	movs	r4, r0
 8001d9a:	1c28      	adds	r0, r5, #0
 8001d9c:	f00e fea8 	bl	8010af0 <__aeabi_fmul>
 8001da0:	f00d ff6a 	bl	800fc78 <accumulator_mod.lto_priv.543>
 8001da4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001da6:	0007      	movs	r7, r0
 8001da8:	1c28      	adds	r0, r5, #0
 8001daa:	f00e fea1 	bl	8010af0 <__aeabi_fmul>
 8001dae:	f00d ff63 	bl	800fc78 <accumulator_mod.lto_priv.543>
 8001db2:	4681      	mov	r9, r0
 8001db4:	6924      	ldr	r4, [r4, #16]
 8001db6:	08b5      	lsrs	r5, r6, #2
 8001db8:	00ad      	lsls	r5, r5, #2
 8001dba:	192d      	adds	r5, r5, r4
 8001dbc:	42ac      	cmp	r4, r5
 8001dbe:	d109      	bne.n	8001dd4 <iq_mix_q3_12_complex+0x54>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	439e      	bics	r6, r3
 8001dc4:	4643      	mov	r3, r8
 8001dc6:	601e      	str	r6, [r3, #0]
 8001dc8:	bc3c      	pop	{r2, r3, r4, r5}
 8001dca:	4690      	mov	r8, r2
 8001dcc:	4699      	mov	r9, r3
 8001dce:	46a2      	mov	sl, r4
 8001dd0:	46ab      	mov	fp, r5
 8001dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	05db      	lsls	r3, r3, #23
 8001dd8:	18f8      	adds	r0, r7, r3
 8001dda:	f00d ffd7 	bl	800fd8c <acc_alg_basic_math_q3_12_sin>
 8001dde:	4682      	mov	sl, r0
 8001de0:	0038      	movs	r0, r7
 8001de2:	f00d ffd3 	bl	800fd8c <acc_alg_basic_math_q3_12_sin>
 8001de6:	2200      	movs	r2, #0
 8001de8:	5ea3      	ldrsh	r3, [r4, r2]
 8001dea:	4651      	mov	r1, sl
 8001dec:	469c      	mov	ip, r3
 8001dee:	2202      	movs	r2, #2
 8001df0:	5ea3      	ldrsh	r3, [r4, r2]
 8001df2:	4662      	mov	r2, ip
 8001df4:	4351      	muls	r1, r2
 8001df6:	17ca      	asrs	r2, r1, #31
 8001df8:	0512      	lsls	r2, r2, #20
 8001dfa:	0d12      	lsrs	r2, r2, #20
 8001dfc:	1852      	adds	r2, r2, r1
 8001dfe:	0001      	movs	r1, r0
 8001e00:	4359      	muls	r1, r3
 8001e02:	468b      	mov	fp, r1
 8001e04:	17c9      	asrs	r1, r1, #31
 8001e06:	0509      	lsls	r1, r1, #20
 8001e08:	0d09      	lsrs	r1, r1, #20
 8001e0a:	4459      	add	r1, fp
 8001e0c:	1312      	asrs	r2, r2, #12
 8001e0e:	1309      	asrs	r1, r1, #12
 8001e10:	1a52      	subs	r2, r2, r1
 8001e12:	8022      	strh	r2, [r4, #0]
 8001e14:	4652      	mov	r2, sl
 8001e16:	435a      	muls	r2, r3
 8001e18:	17d3      	asrs	r3, r2, #31
 8001e1a:	051b      	lsls	r3, r3, #20
 8001e1c:	0d1b      	lsrs	r3, r3, #20
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	4342      	muls	r2, r0
 8001e24:	17d0      	asrs	r0, r2, #31
 8001e26:	0500      	lsls	r0, r0, #20
 8001e28:	0d00      	lsrs	r0, r0, #20
 8001e2a:	1880      	adds	r0, r0, r2
 8001e2c:	131b      	asrs	r3, r3, #12
 8001e2e:	1300      	asrs	r0, r0, #12
 8001e30:	181b      	adds	r3, r3, r0
 8001e32:	8063      	strh	r3, [r4, #2]
 8001e34:	444f      	add	r7, r9
 8001e36:	3404      	adds	r4, #4
 8001e38:	e7c0      	b.n	8001dbc <iq_mix_q3_12_complex+0x3c>

08001e3a <iq_mix_q3_12>:
 8001e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3c:	46de      	mov	lr, fp
 8001e3e:	4657      	mov	r7, sl
 8001e40:	464e      	mov	r6, r9
 8001e42:	4645      	mov	r5, r8
 8001e44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e46:	b5e0      	push	{r5, r6, r7, lr}
 8001e48:	4699      	mov	r9, r3
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0006      	movs	r6, r0
 8001e4e:	085c      	lsrs	r4, r3, #1
 8001e50:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e54:	681d      	ldr	r5, [r3, #0]
 8001e56:	1c28      	adds	r0, r5, #0
 8001e58:	f00e fe4a 	bl	8010af0 <__aeabi_fmul>
 8001e5c:	f00d ff0c 	bl	800fc78 <accumulator_mod.lto_priv.543>
 8001e60:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8001e62:	0007      	movs	r7, r0
 8001e64:	1c28      	adds	r0, r5, #0
 8001e66:	f00e fe43 	bl	8010af0 <__aeabi_fmul>
 8001e6a:	f00d ff05 	bl	800fc78 <accumulator_mod.lto_priv.543>
 8001e6e:	0063      	lsls	r3, r4, #1
 8001e70:	4698      	mov	r8, r3
 8001e72:	4682      	mov	sl, r0
 8001e74:	6935      	ldr	r5, [r6, #16]
 8001e76:	6976      	ldr	r6, [r6, #20]
 8001e78:	44a8      	add	r8, r5
 8001e7a:	4545      	cmp	r5, r8
 8001e7c:	d108      	bne.n	8001e90 <iq_mix_q3_12+0x56>
 8001e7e:	464b      	mov	r3, r9
 8001e80:	00a4      	lsls	r4, r4, #2
 8001e82:	601c      	str	r4, [r3, #0]
 8001e84:	bc3c      	pop	{r2, r3, r4, r5}
 8001e86:	4690      	mov	r8, r2
 8001e88:	4699      	mov	r9, r3
 8001e8a:	46a2      	mov	sl, r4
 8001e8c:	46ab      	mov	fp, r5
 8001e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e90:	2200      	movs	r2, #0
 8001e92:	5eab      	ldrsh	r3, [r5, r2]
 8001e94:	3502      	adds	r5, #2
 8001e96:	469b      	mov	fp, r3
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	05db      	lsls	r3, r3, #23
 8001e9c:	18f8      	adds	r0, r7, r3
 8001e9e:	f00d ff75 	bl	800fd8c <acc_alg_basic_math_q3_12_sin>
 8001ea2:	465b      	mov	r3, fp
 8001ea4:	4343      	muls	r3, r0
 8001ea6:	17d8      	asrs	r0, r3, #31
 8001ea8:	0500      	lsls	r0, r0, #20
 8001eaa:	0d00      	lsrs	r0, r0, #20
 8001eac:	18c0      	adds	r0, r0, r3
 8001eae:	1300      	asrs	r0, r0, #12
 8001eb0:	8030      	strh	r0, [r6, #0]
 8001eb2:	0038      	movs	r0, r7
 8001eb4:	f00d ff6a 	bl	800fd8c <acc_alg_basic_math_q3_12_sin>
 8001eb8:	465b      	mov	r3, fp
 8001eba:	4343      	muls	r3, r0
 8001ebc:	17d8      	asrs	r0, r3, #31
 8001ebe:	0500      	lsls	r0, r0, #20
 8001ec0:	0d00      	lsrs	r0, r0, #20
 8001ec2:	18c0      	adds	r0, r0, r3
 8001ec4:	1300      	asrs	r0, r0, #12
 8001ec6:	8070      	strh	r0, [r6, #2]
 8001ec8:	4457      	add	r7, sl
 8001eca:	3604      	adds	r6, #4
 8001ecc:	e7d5      	b.n	8001e7a <iq_mix_q3_12+0x40>

08001ece <filter_q3_12_complex.lto_priv.120>:
 8001ece:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ed4:	6906      	ldr	r6, [r0, #16]
 8001ed6:	681d      	ldr	r5, [r3, #0]
 8001ed8:	ab03      	add	r3, sp, #12
 8001eda:	801a      	strh	r2, [r3, #0]
 8001edc:	805a      	strh	r2, [r3, #2]
 8001ede:	9b03      	ldr	r3, [sp, #12]
 8001ee0:	08ad      	lsrs	r5, r5, #2
 8001ee2:	002a      	movs	r2, r5
 8001ee4:	0031      	movs	r1, r6
 8001ee6:	3040      	adds	r0, #64	; 0x40
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2301      	movs	r3, #1
 8001eec:	0004      	movs	r4, r0
 8001eee:	f00d fd47 	bl	800f980 <biquad_q3_12_complex_direct_form_1.lto_priv.544>
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <filter_q3_12_complex.lto_priv.120+0x4e>)
 8001ef4:	0020      	movs	r0, r4
 8001ef6:	18eb      	adds	r3, r5, r3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	18f3      	adds	r3, r6, r3
 8001efc:	2202      	movs	r2, #2
 8001efe:	5e99      	ldrsh	r1, [r3, r2]
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	aa02      	add	r2, sp, #8
 8001f04:	8013      	strh	r3, [r2, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	8051      	strh	r1, [r2, #2]
 8001f0a:	9a02      	ldr	r2, [sp, #8]
 8001f0c:	0031      	movs	r1, r6
 8001f0e:	9200      	str	r2, [sp, #0]
 8001f10:	425b      	negs	r3, r3
 8001f12:	002a      	movs	r2, r5
 8001f14:	f00d fd34 	bl	800f980 <biquad_q3_12_complex_direct_form_1.lto_priv.544>
 8001f18:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	3fffffff 	.word	0x3fffffff

08001f20 <centering_q12_4>:
 8001f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f22:	46de      	mov	lr, fp
 8001f24:	464e      	mov	r6, r9
 8001f26:	4645      	mov	r5, r8
 8001f28:	4657      	mov	r7, sl
 8001f2a:	b5e0      	push	{r5, r6, r7, lr}
 8001f2c:	0849      	lsrs	r1, r1, #1
 8001f2e:	0852      	lsrs	r2, r2, #1
 8001f30:	b28b      	uxth	r3, r1
 8001f32:	b295      	uxth	r5, r2
 8001f34:	b083      	sub	sp, #12
 8001f36:	4683      	mov	fp, r0
 8001f38:	4699      	mov	r9, r3
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d100      	bne.n	8001f40 <centering_q12_4+0x20>
 8001f3e:	001d      	movs	r5, r3
 8001f40:	b28b      	uxth	r3, r1
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2301      	movs	r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	46c8      	mov	r8, r9
 8001f4a:	002f      	movs	r7, r5
 8001f4c:	2600      	movs	r6, #0
 8001f4e:	469a      	mov	sl, r3
 8001f50:	45b1      	cmp	r9, r6
 8001f52:	d806      	bhi.n	8001f62 <centering_q12_4+0x42>
 8001f54:	b003      	add	sp, #12
 8001f56:	bc3c      	pop	{r2, r3, r4, r5}
 8001f58:	4690      	mov	r8, r2
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	46a2      	mov	sl, r4
 8001f5e:	46ab      	mov	fp, r5
 8001f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f62:	9a01      	ldr	r2, [sp, #4]
 8001f64:	19f3      	adds	r3, r6, r7
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dd00      	ble.n	8001f6c <centering_q12_4+0x4c>
 8001f6a:	4647      	mov	r7, r8
 8001f6c:	2f00      	cmp	r7, #0
 8001f6e:	d01e      	beq.n	8001fae <centering_q12_4+0x8e>
 8001f70:	2200      	movs	r2, #0
 8001f72:	0010      	movs	r0, r2
 8001f74:	0074      	lsls	r4, r6, #1
 8001f76:	445c      	add	r4, fp
 8001f78:	42ba      	cmp	r2, r7
 8001f7a:	d31f      	bcc.n	8001fbc <centering_q12_4+0x9c>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	2800      	cmp	r0, #0
 8001f80:	da00      	bge.n	8001f84 <centering_q12_4+0x64>
 8001f82:	4653      	mov	r3, sl
 8001f84:	087a      	lsrs	r2, r7, #1
 8001f86:	b292      	uxth	r2, r2
 8001f88:	4353      	muls	r3, r2
 8001f8a:	0039      	movs	r1, r7
 8001f8c:	1818      	adds	r0, r3, r0
 8001f8e:	f00f f96b 	bl	8011268 <__divsi3>
 8001f92:	007b      	lsls	r3, r7, #1
 8001f94:	b202      	sxth	r2, r0
 8001f96:	18e3      	adds	r3, r4, r3
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	dd1a      	ble.n	8001fd2 <centering_q12_4+0xb2>
 8001f9c:	b280      	uxth	r0, r0
 8001f9e:	8822      	ldrh	r2, [r4, #0]
 8001fa0:	4282      	cmp	r2, r0
 8001fa2:	d213      	bcs.n	8001fcc <centering_q12_4+0xac>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	8022      	strh	r2, [r4, #0]
 8001fa8:	3402      	adds	r4, #2
 8001faa:	42a3      	cmp	r3, r4
 8001fac:	d1f7      	bne.n	8001f9e <centering_q12_4+0x7e>
 8001fae:	4643      	mov	r3, r8
 8001fb0:	1b5b      	subs	r3, r3, r5
 8001fb2:	1976      	adds	r6, r6, r5
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	b2b6      	uxth	r6, r6
 8001fb8:	4698      	mov	r8, r3
 8001fba:	e7c9      	b.n	8001f50 <centering_q12_4+0x30>
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <centering_q12_4+0xd0>)
 8001fbe:	0053      	lsls	r3, r2, #1
 8001fc0:	468c      	mov	ip, r1
 8001fc2:	5ae3      	ldrh	r3, [r4, r3]
 8001fc4:	3201      	adds	r2, #1
 8001fc6:	4463      	add	r3, ip
 8001fc8:	18c0      	adds	r0, r0, r3
 8001fca:	e7d5      	b.n	8001f78 <centering_q12_4+0x58>
 8001fcc:	1a12      	subs	r2, r2, r0
 8001fce:	8022      	strh	r2, [r4, #0]
 8001fd0:	e7ea      	b.n	8001fa8 <centering_q12_4+0x88>
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <centering_q12_4+0xd4>)
 8001fd4:	468c      	mov	ip, r1
 8001fd6:	4462      	add	r2, ip
 8001fd8:	8821      	ldrh	r1, [r4, #0]
 8001fda:	4291      	cmp	r1, r2
 8001fdc:	dd05      	ble.n	8001fea <centering_q12_4+0xca>
 8001fde:	4651      	mov	r1, sl
 8001fe0:	8021      	strh	r1, [r4, #0]
 8001fe2:	3402      	adds	r4, #2
 8001fe4:	42a3      	cmp	r3, r4
 8001fe6:	d1f7      	bne.n	8001fd8 <centering_q12_4+0xb8>
 8001fe8:	e7e1      	b.n	8001fae <centering_q12_4+0x8e>
 8001fea:	1a09      	subs	r1, r1, r0
 8001fec:	8021      	strh	r1, [r4, #0]
 8001fee:	e7f8      	b.n	8001fe2 <centering_q12_4+0xc2>
 8001ff0:	ffff8000 	.word	0xffff8000
 8001ff4:	0000ffff 	.word	0x0000ffff

08001ff8 <acc_alg_cca_calculate>:
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	000c      	movs	r4, r1
 8001ffe:	2201      	movs	r2, #1
 8002000:	2000      	movs	r0, #0
 8002002:	42a2      	cmp	r2, r4
 8002004:	d30f      	bcc.n	8002026 <acc_alg_cca_calculate+0x2e>
 8002006:	f00f fc89 	bl	801191c <__aeabi_i2f>
 800200a:	1c05      	adds	r5, r0, #0
 800200c:	1e60      	subs	r0, r4, #1
 800200e:	f00f fc85 	bl	801191c <__aeabi_i2f>
 8002012:	1c01      	adds	r1, r0, #0
 8002014:	1c28      	adds	r0, r5, #0
 8002016:	f00e fc59 	bl	80108cc <__aeabi_fdiv>
 800201a:	f012 f8f9 	bl	8014210 <log10f>
 800201e:	4907      	ldr	r1, [pc, #28]	; (800203c <acc_alg_cca_calculate+0x44>)
 8002020:	f00e fd66 	bl	8010af0 <__aeabi_fmul>
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	881d      	ldrh	r5, [r3, #0]
 8002028:	8859      	ldrh	r1, [r3, #2]
 800202a:	3201      	adds	r2, #1
 800202c:	1b49      	subs	r1, r1, r5
 800202e:	17cd      	asrs	r5, r1, #31
 8002030:	1949      	adds	r1, r1, r5
 8002032:	4069      	eors	r1, r5
 8002034:	1840      	adds	r0, r0, r1
 8002036:	b292      	uxth	r2, r2
 8002038:	3302      	adds	r3, #2
 800203a:	e7e2      	b.n	8002002 <acc_alg_cca_calculate+0xa>
 800203c:	41a00000 	.word	0x41a00000

08002040 <process_data.lto_priv.132>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	001d      	movs	r5, r3
 8002044:	23b8      	movs	r3, #184	; 0xb8
 8002046:	46ce      	mov	lr, r9
 8002048:	4699      	mov	r9, r3
 800204a:	4647      	mov	r7, r8
 800204c:	6944      	ldr	r4, [r0, #20]
 800204e:	b580      	push	{r7, lr}
 8002050:	44a1      	add	r9, r4
 8002052:	464b      	mov	r3, r9
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	0017      	movs	r7, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d028      	beq.n	80020ae <process_data.lto_priv.132+0x6e>
 800205c:	0026      	movs	r6, r4
 800205e:	6809      	ldr	r1, [r1, #0]
 8002060:	36b4      	adds	r6, #180	; 0xb4
 8002062:	4688      	mov	r8, r1
 8002064:	8832      	ldrh	r2, [r6, #0]
 8002066:	6801      	ldr	r1, [r0, #0]
 8002068:	0052      	lsls	r2, r2, #1
 800206a:	4490      	add	r8, r2
 800206c:	4642      	mov	r2, r8
 800206e:	2001      	movs	r0, #1
 8002070:	f7fe f862 	bl	8000138 <acc_probes_execute_uint16>
 8002074:	464b      	mov	r3, r9
 8002076:	4640      	mov	r0, r8
 8002078:	8819      	ldrh	r1, [r3, #0]
 800207a:	f7ff ffbd 	bl	8001ff8 <acc_alg_cca_calculate>
 800207e:	2301      	movs	r3, #1
 8002080:	6068      	str	r0, [r5, #4]
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <process_data.lto_priv.132+0x78>)
 8002084:	4698      	mov	r8, r3
 8002086:	f00f fa3f 	bl	8011508 <__aeabi_fcmpgt>
 800208a:	2800      	cmp	r0, #0
 800208c:	d100      	bne.n	8002090 <process_data.lto_priv.132+0x50>
 800208e:	4680      	mov	r8, r0
 8002090:	4643      	mov	r3, r8
 8002092:	702b      	strb	r3, [r5, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002098:	429a      	cmp	r2, r3
 800209a:	d103      	bne.n	80020a4 <process_data.lto_priv.132+0x64>
 800209c:	34ba      	adds	r4, #186	; 0xba
 800209e:	7822      	ldrb	r2, [r4, #0]
 80020a0:	3301      	adds	r3, #1
 80020a2:	4053      	eors	r3, r2
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	722b      	strb	r3, [r5, #8]
 80020aa:	8833      	ldrh	r3, [r6, #0]
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	2001      	movs	r0, #1
 80020b0:	bc0c      	pop	{r2, r3}
 80020b2:	4690      	mov	r8, r2
 80020b4:	4699      	mov	r9, r3
 80020b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020b8:	42640000 	.word	0x42640000

080020bc <process_data.lto_priv.131>:
 80020bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020be:	4657      	mov	r7, sl
 80020c0:	464e      	mov	r6, r9
 80020c2:	4645      	mov	r5, r8
 80020c4:	46de      	mov	lr, fp
 80020c6:	6944      	ldr	r4, [r0, #20]
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0027      	movs	r7, r4
 80020cc:	37ce      	adds	r7, #206	; 0xce
 80020ce:	001d      	movs	r5, r3
 80020d0:	883b      	ldrh	r3, [r7, #0]
 80020d2:	4680      	mov	r8, r0
 80020d4:	468a      	mov	sl, r1
 80020d6:	0016      	movs	r6, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d03a      	beq.n	8002154 <process_data.lto_priv.131+0x98>
 80020de:	0023      	movs	r3, r4
 80020e0:	33c8      	adds	r3, #200	; 0xc8
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	b280      	uxth	r0, r0
 80020e6:	0043      	lsls	r3, r0, #1
 80020e8:	469b      	mov	fp, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	33cc      	adds	r3, #204	; 0xcc
 80020ee:	8819      	ldrh	r1, [r3, #0]
 80020f0:	207c      	movs	r0, #124	; 0x7c
 80020f2:	f00f f82f 	bl	8011154 <__udivsi3>
 80020f6:	465b      	mov	r3, fp
 80020f8:	4358      	muls	r0, r3
 80020fa:	0023      	movs	r3, r4
 80020fc:	33c4      	adds	r3, #196	; 0xc4
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	4641      	mov	r1, r8
 8002102:	18c0      	adds	r0, r0, r3
 8002104:	4653      	mov	r3, sl
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6809      	ldr	r1, [r1, #0]
 800210a:	469a      	mov	sl, r3
 800210c:	4482      	add	sl, r0
 800210e:	464b      	mov	r3, r9
 8002110:	4652      	mov	r2, sl
 8002112:	2001      	movs	r0, #1
 8002114:	f7fe f810 	bl	8000138 <acc_probes_execute_uint16>
 8002118:	883f      	ldrh	r7, [r7, #0]
 800211a:	4650      	mov	r0, sl
 800211c:	0039      	movs	r1, r7
 800211e:	f7ff ff6b 	bl	8001ff8 <acc_alg_cca_calculate>
 8002122:	2301      	movs	r3, #1
 8002124:	6068      	str	r0, [r5, #4]
 8002126:	490f      	ldr	r1, [pc, #60]	; (8002164 <process_data.lto_priv.131+0xa8>)
 8002128:	4698      	mov	r8, r3
 800212a:	f00f f9ed 	bl	8011508 <__aeabi_fcmpgt>
 800212e:	2800      	cmp	r0, #0
 8002130:	d100      	bne.n	8002134 <process_data.lto_priv.131+0x78>
 8002132:	4680      	mov	r8, r0
 8002134:	4643      	mov	r3, r8
 8002136:	702b      	strb	r3, [r5, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800213c:	429a      	cmp	r2, r3
 800213e:	d103      	bne.n	8002148 <process_data.lto_priv.131+0x8c>
 8002140:	34c0      	adds	r4, #192	; 0xc0
 8002142:	7822      	ldrb	r2, [r4, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	4053      	eors	r3, r2
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	722b      	strb	r3, [r5, #8]
 800214e:	6833      	ldr	r3, [r6, #0]
 8002150:	1bdf      	subs	r7, r3, r7
 8002152:	6037      	str	r7, [r6, #0]
 8002154:	2001      	movs	r0, #1
 8002156:	bc3c      	pop	{r2, r3, r4, r5}
 8002158:	4690      	mov	r8, r2
 800215a:	4699      	mov	r9, r3
 800215c:	46a2      	mov	sl, r4
 800215e:	46ab      	mov	fp, r5
 8002160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	42640000 	.word	0x42640000

08002168 <acc_sensor_protocol_r2_wait_for_sync_start>:
 8002168:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800216a:	ae03      	add	r6, sp, #12
 800216c:	0032      	movs	r2, r6
 800216e:	0005      	movs	r5, r0
 8002170:	f00e f886 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8002174:	1e04      	subs	r4, r0, #0
 8002176:	d108      	bne.n	800218a <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 800217c:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800217e:	490b      	ldr	r1, [pc, #44]	; (80021ac <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 8002180:	002b      	movs	r3, r5
 8002182:	47b0      	blx	r6
 8002184:	0020      	movs	r0, r4
 8002186:	b004      	add	sp, #16
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	8873      	ldrh	r3, [r6, #2]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d0f9      	beq.n	8002184 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8002196:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800219a:	002b      	movs	r3, r5
 800219c:	2000      	movs	r0, #0
 800219e:	47a0      	blx	r4
 80021a0:	2400      	movs	r4, #0
 80021a2:	e7ef      	b.n	8002184 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 80021a4:	200005d8 	.word	0x200005d8
 80021a8:	0801d01f 	.word	0x0801d01f
 80021ac:	0801d00f 	.word	0x0801d00f
 80021b0:	0801d051 	.word	0x0801d051

080021b4 <acc_sensor_protocol_r2_wait_for_radar_data>:
 80021b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b6:	b085      	sub	sp, #20
 80021b8:	ac03      	add	r4, sp, #12
 80021ba:	0017      	movs	r7, r2
 80021bc:	0022      	movs	r2, r4
 80021be:	0006      	movs	r6, r0
 80021c0:	f00e f85e 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 80021c4:	1e05      	subs	r5, r0, #0
 80021c6:	d032      	beq.n	800222e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 80021c8:	7822      	ldrb	r2, [r4, #0]
 80021ca:	8863      	ldrh	r3, [r4, #2]
 80021cc:	2a06      	cmp	r2, #6
 80021ce:	d125      	bne.n	800221c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80021d0:	051a      	lsls	r2, r3, #20
 80021d2:	d523      	bpl.n	800221c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	00d2      	lsls	r2, r2, #3
 80021d8:	4013      	ands	r3, r2
 80021da:	d12b      	bne.n	8002234 <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 80021dc:	2f00      	cmp	r7, #0
 80021de:	d000      	beq.n	80021e2 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 80021e0:	703b      	strb	r3, [r7, #0]
 80021e2:	8863      	ldrh	r3, [r4, #2]
 80021e4:	05db      	lsls	r3, r3, #23
 80021e6:	d50a      	bpl.n	80021fe <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 80021ea:	001a      	movs	r2, r3
 80021ec:	3230      	adds	r2, #48	; 0x30
 80021ee:	7812      	ldrb	r2, [r2, #0]
 80021f0:	2a03      	cmp	r2, #3
 80021f2:	d904      	bls.n	80021fe <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	4a13      	ldr	r2, [pc, #76]	; (8002244 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 80021f8:	4913      	ldr	r1, [pc, #76]	; (8002248 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 80021fa:	2004      	movs	r0, #4
 80021fc:	4798      	blx	r3
 80021fe:	8863      	ldrh	r3, [r4, #2]
 8002200:	059b      	lsls	r3, r3, #22
 8002202:	d514      	bpl.n	800222e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002206:	001a      	movs	r2, r3
 8002208:	3230      	adds	r2, #48	; 0x30
 800220a:	7812      	ldrb	r2, [r2, #0]
 800220c:	2a03      	cmp	r2, #3
 800220e:	d90e      	bls.n	800222e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002216:	2004      	movs	r0, #4
 8002218:	4798      	blx	r3
 800221a:	e008      	b.n	800222e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8002222:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002224:	4908      	ldr	r1, [pc, #32]	; (8002248 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8002226:	0033      	movs	r3, r6
 8002228:	2000      	movs	r0, #0
 800222a:	47a0      	blx	r4
 800222c:	2500      	movs	r5, #0
 800222e:	0028      	movs	r0, r5
 8002230:	b005      	add	sp, #20
 8002232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002234:	0031      	movs	r1, r6
 8002236:	200f      	movs	r0, #15
 8002238:	f7fd ff72 	bl	8000120 <acc_probes_execute_primitive_probe>
 800223c:	002b      	movs	r3, r5
 800223e:	e7cd      	b.n	80021dc <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 8002240:	200005d8 	.word	0x200005d8
 8002244:	0801d0bb 	.word	0x0801d0bb
 8002248:	0801d00f 	.word	0x0801d00f
 800224c:	0801d0d4 	.word	0x0801d0d4
 8002250:	0801d08b 	.word	0x0801d08b

08002254 <acc_sensor_protocol_r2_ack_event>:
 8002254:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002256:	466b      	mov	r3, sp
 8002258:	1d9c      	adds	r4, r3, #6
 800225a:	2300      	movs	r3, #0
 800225c:	0022      	movs	r2, r4
 800225e:	2138      	movs	r1, #56	; 0x38
 8002260:	0005      	movs	r5, r0
 8002262:	8023      	strh	r3, [r4, #0]
 8002264:	f00d fddc 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8002268:	8824      	ldrh	r4, [r4, #0]
 800226a:	2001      	movs	r0, #1
 800226c:	2c00      	cmp	r4, #0
 800226e:	d10a      	bne.n	8002286 <acc_sensor_protocol_r2_ack_event+0x32>
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <acc_sensor_protocol_r2_ack_event+0x34>)
 8002272:	4a06      	ldr	r2, [pc, #24]	; (800228c <acc_sensor_protocol_r2_ack_event+0x38>)
 8002274:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002276:	4906      	ldr	r1, [pc, #24]	; (8002290 <acc_sensor_protocol_r2_ack_event+0x3c>)
 8002278:	002b      	movs	r3, r5
 800227a:	0020      	movs	r0, r4
 800227c:	47b0      	blx	r6
 800227e:	0028      	movs	r0, r5
 8002280:	f00d fdf5 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 8002284:	0020      	movs	r0, r4
 8002286:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002288:	200005d8 	.word	0x200005d8
 800228c:	0801d0ec 	.word	0x0801d0ec
 8002290:	0801d00f 	.word	0x0801d00f

08002294 <acc_sensor_protocol_r2_wait_for_specific_event>:
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	ae03      	add	r6, sp, #12
 800229a:	0015      	movs	r5, r2
 800229c:	0032      	movs	r2, r6
 800229e:	0004      	movs	r4, r0
 80022a0:	001f      	movs	r7, r3
 80022a2:	f00d ffed 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d00d      	beq.n	80022c6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 80022aa:	7832      	ldrb	r2, [r6, #0]
 80022ac:	42aa      	cmp	r2, r5
 80022ae:	d00c      	beq.n	80022ca <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 80022b0:	9200      	str	r2, [sp, #0]
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 80022b6:	9501      	str	r5, [sp, #4]
 80022b8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80022ba:	2000      	movs	r0, #0
 80022bc:	334c      	adds	r3, #76	; 0x4c
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 80022c0:	4908      	ldr	r1, [pc, #32]	; (80022e4 <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 80022c2:	47a0      	blx	r4
 80022c4:	2000      	movs	r0, #0
 80022c6:	b005      	add	sp, #20
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	2f00      	cmp	r7, #0
 80022cc:	d0fb      	beq.n	80022c6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 80022ce:	0020      	movs	r0, r4
 80022d0:	f7ff ffc0 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 80022d4:	e7f7      	b.n	80022c6 <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	080166d0 	.word	0x080166d0
 80022dc:	200005d8 	.word	0x200005d8
 80022e0:	0801d11d 	.word	0x0801d11d
 80022e4:	0801d00f 	.word	0x0801d00f

080022e8 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 80022e8:	b510      	push	{r4, lr}
 80022ea:	2301      	movs	r3, #1
 80022ec:	220b      	movs	r2, #11
 80022ee:	f7ff ffd1 	bl	8002294 <acc_sensor_protocol_r2_wait_for_specific_event>
 80022f2:	bd10      	pop	{r4, pc}

080022f4 <acc_radar_engine_acquire_adc_data>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	4657      	mov	r7, sl
 80022f8:	464e      	mov	r6, r9
 80022fa:	4645      	mov	r5, r8
 80022fc:	46de      	mov	lr, fp
 80022fe:	2300      	movs	r3, #0
 8002300:	b5e0      	push	{r5, r6, r7, lr}
 8002302:	0005      	movs	r5, r0
 8002304:	4698      	mov	r8, r3
 8002306:	b08d      	sub	sp, #52	; 0x34
 8002308:	4689      	mov	r9, r1
 800230a:	4945      	ldr	r1, [pc, #276]	; (8002420 <acc_radar_engine_acquire_adc_data+0x12c>)
 800230c:	a806      	add	r0, sp, #24
 800230e:	7093      	strb	r3, [r2, #2]
 8002310:	70d3      	strb	r3, [r2, #3]
 8002312:	8013      	strh	r3, [r2, #0]
 8002314:	7313      	strb	r3, [r2, #12]
 8002316:	7113      	strb	r3, [r2, #4]
 8002318:	6091      	str	r1, [r2, #8]
 800231a:	1d87      	adds	r7, r0, #6
 800231c:	0014      	movs	r4, r2
 800231e:	6828      	ldr	r0, [r5, #0]
 8002320:	aa06      	add	r2, sp, #24
 8002322:	71d3      	strb	r3, [r2, #7]
 8002324:	703b      	strb	r3, [r7, #0]
 8002326:	4682      	mov	sl, r0
 8002328:	7ba8      	ldrb	r0, [r5, #14]
 800232a:	3207      	adds	r2, #7
 800232c:	9000      	str	r0, [sp, #0]
 800232e:	7be8      	ldrb	r0, [r5, #15]
 8002330:	9105      	str	r1, [sp, #20]
 8002332:	9003      	str	r0, [sp, #12]
 8002334:	89a8      	ldrh	r0, [r5, #12]
 8002336:	9202      	str	r2, [sp, #8]
 8002338:	9001      	str	r0, [sp, #4]
 800233a:	6928      	ldr	r0, [r5, #16]
 800233c:	ae09      	add	r6, sp, #36	; 0x24
 800233e:	9004      	str	r0, [sp, #16]
 8002340:	4643      	mov	r3, r8
 8002342:	9a01      	ldr	r2, [sp, #4]
 8002344:	b29b      	uxth	r3, r3
 8002346:	429a      	cmp	r2, r3
 8002348:	d959      	bls.n	80023fe <acc_radar_engine_acquire_adc_data+0x10a>
 800234a:	9b00      	ldr	r3, [sp, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <acc_radar_engine_acquire_adc_data+0x7c>
 8002350:	69ab      	ldr	r3, [r5, #24]
 8002352:	9a02      	ldr	r2, [sp, #8]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	9904      	ldr	r1, [sp, #16]
 8002358:	4650      	mov	r0, sl
 800235a:	4798      	blx	r3
 800235c:	2800      	cmp	r0, #0
 800235e:	d10e      	bne.n	800237e <acc_radar_engine_acquire_adc_data+0x8a>
 8002360:	2000      	movs	r0, #0
 8002362:	b00d      	add	sp, #52	; 0x34
 8002364:	bc3c      	pop	{r2, r3, r4, r5}
 8002366:	4690      	mov	r8, r2
 8002368:	4699      	mov	r9, r3
 800236a:	46a2      	mov	sl, r4
 800236c:	46ab      	mov	fp, r5
 800236e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002370:	69ab      	ldr	r3, [r5, #24]
 8002372:	4650      	mov	r0, sl
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4798      	blx	r3
 8002378:	2800      	cmp	r0, #0
 800237a:	d1e9      	bne.n	8002350 <acc_radar_engine_acquire_adc_data+0x5c>
 800237c:	e7f0      	b.n	8002360 <acc_radar_engine_acquire_adc_data+0x6c>
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d100      	bne.n	8002388 <acc_radar_engine_acquire_adc_data+0x94>
 8002386:	78a3      	ldrb	r3, [r4, #2]
 8002388:	70a3      	strb	r3, [r4, #2]
 800238a:	69ab      	ldr	r3, [r5, #24]
 800238c:	003a      	movs	r2, r7
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4649      	mov	r1, r9
 8002392:	0028      	movs	r0, r5
 8002394:	4798      	blx	r3
 8002396:	2300      	movs	r3, #0
 8002398:	7033      	strb	r3, [r6, #0]
 800239a:	7233      	strb	r3, [r6, #8]
 800239c:	69ab      	ldr	r3, [r5, #24]
 800239e:	9a05      	ldr	r2, [sp, #20]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	9008      	str	r0, [sp, #32]
 80023a4:	6072      	str	r2, [r6, #4]
 80023a6:	469b      	mov	fp, r3
 80023a8:	aa08      	add	r2, sp, #32
 80023aa:	0033      	movs	r3, r6
 80023ac:	4649      	mov	r1, r9
 80023ae:	0028      	movs	r0, r5
 80023b0:	47d8      	blx	fp
 80023b2:	7a33      	ldrb	r3, [r6, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d100      	bne.n	80023ba <acc_radar_engine_acquire_adc_data+0xc6>
 80023b8:	7b23      	ldrb	r3, [r4, #12]
 80023ba:	7323      	strb	r3, [r4, #12]
 80023bc:	7833      	ldrb	r3, [r6, #0]
 80023be:	469b      	mov	fp, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <acc_radar_engine_acquire_adc_data+0xd2>
 80023c4:	7923      	ldrb	r3, [r4, #4]
 80023c6:	7123      	strb	r3, [r4, #4]
 80023c8:	68a1      	ldr	r1, [r4, #8]
 80023ca:	6870      	ldr	r0, [r6, #4]
 80023cc:	f011 fdf4 	bl	8013fb8 <fmaxf>
 80023d0:	783b      	ldrb	r3, [r7, #0]
 80023d2:	60a0      	str	r0, [r4, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d100      	bne.n	80023da <acc_radar_engine_acquire_adc_data+0xe6>
 80023d8:	78e3      	ldrb	r3, [r4, #3]
 80023da:	9a08      	ldr	r2, [sp, #32]
 80023dc:	70e3      	strb	r3, [r4, #3]
 80023de:	4694      	mov	ip, r2
 80023e0:	8823      	ldrh	r3, [r4, #0]
 80023e2:	4659      	mov	r1, fp
 80023e4:	4463      	add	r3, ip
 80023e6:	8023      	strh	r3, [r4, #0]
 80023e8:	69ab      	ldr	r3, [r5, #24]
 80023ea:	0028      	movs	r0, r5
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	4798      	blx	r3
 80023f0:	9b03      	ldr	r3, [sp, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d006      	beq.n	8002404 <acc_radar_engine_acquire_adc_data+0x110>
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	4598      	cmp	r8, r3
 80023fc:	d102      	bne.n	8002404 <acc_radar_engine_acquire_adc_data+0x110>
 80023fe:	464b      	mov	r3, r9
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	e7ae      	b.n	8002362 <acc_radar_engine_acquire_adc_data+0x6e>
 8002404:	9b00      	ldr	r3, [sp, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <acc_radar_engine_acquire_adc_data+0x11e>
 800240a:	2301      	movs	r3, #1
 800240c:	469c      	mov	ip, r3
 800240e:	44e0      	add	r8, ip
 8002410:	e796      	b.n	8002340 <acc_radar_engine_acquire_adc_data+0x4c>
 8002412:	69ab      	ldr	r3, [r5, #24]
 8002414:	4650      	mov	r0, sl
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	4798      	blx	r3
 800241a:	2800      	cmp	r0, #0
 800241c:	d1f5      	bne.n	800240a <acc_radar_engine_acquire_adc_data+0x116>
 800241e:	e79f      	b.n	8002360 <acc_radar_engine_acquire_adc_data+0x6c>
 8002420:	ff800000 	.word	0xff800000

08002424 <transfer_data.lto_priv.134>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	000d      	movs	r5, r1
 8002428:	2100      	movs	r1, #0
 800242a:	6943      	ldr	r3, [r0, #20]
 800242c:	7011      	strb	r1, [r2, #0]
 800242e:	001a      	movs	r2, r3
 8002430:	33b8      	adds	r3, #184	; 0xb8
 8002432:	32b4      	adds	r2, #180	; 0xb4
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	8814      	ldrh	r4, [r2, #0]
 8002438:	6829      	ldr	r1, [r5, #0]
 800243a:	18e4      	adds	r4, r4, r3
 800243c:	0022      	movs	r2, r4
 800243e:	6800      	ldr	r0, [r0, #0]
 8002440:	f7ff fb42 	bl	8001ac8 <acc_sensor_protocol_r2_transfer_data>
 8002444:	0062      	lsls	r2, r4, #1
 8002446:	0001      	movs	r1, r0
 8002448:	6828      	ldr	r0, [r5, #0]
 800244a:	f014 f920 	bl	801668e <memmove>
 800244e:	0020      	movs	r0, r4
 8002450:	bd70      	pop	{r4, r5, r6, pc}

08002452 <acc_radar_engine_sparse_create>:
 8002452:	22cd      	movs	r2, #205	; 0xcd
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	0052      	lsls	r2, r2, #1
 8002458:	0004      	movs	r4, r0
 800245a:	000d      	movs	r5, r1
 800245c:	20bc      	movs	r0, #188	; 0xbc
 800245e:	490f      	ldr	r1, [pc, #60]	; (800249c <acc_radar_engine_sparse_create+0x4a>)
 8002460:	f00a fd50 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 8002464:	2300      	movs	r3, #0
 8002466:	6160      	str	r0, [r4, #20]
 8002468:	4298      	cmp	r0, r3
 800246a:	d015      	beq.n	8002498 <acc_radar_engine_sparse_create+0x46>
 800246c:	0028      	movs	r0, r5
 800246e:	f7fe fc93 	bl	8000d98 <acc_base_configuration_sensor_get>
 8002472:	6020      	str	r0, [r4, #0]
 8002474:	0028      	movs	r0, r5
 8002476:	f7fe fbc1 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800247a:	73a0      	strb	r0, [r4, #14]
 800247c:	0028      	movs	r0, r5
 800247e:	f7fe fc78 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8002482:	4243      	negs	r3, r0
 8002484:	4158      	adcs	r0, r3
 8002486:	73e0      	strb	r0, [r4, #15]
 8002488:	0028      	movs	r0, r5
 800248a:	f7fe fc3d 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <acc_radar_engine_sparse_create+0x4e>)
 8002490:	6120      	str	r0, [r4, #16]
 8002492:	337c      	adds	r3, #124	; 0x7c
 8002494:	61a3      	str	r3, [r4, #24]
 8002496:	2301      	movs	r3, #1
 8002498:	0018      	movs	r0, r3
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	0801d148 	.word	0x0801d148
 80024a0:	080166d0 	.word	0x080166d0

080024a4 <acc_radar_engine_linear_create>:
 80024a4:	222c      	movs	r2, #44	; 0x2c
 80024a6:	b570      	push	{r4, r5, r6, lr}
 80024a8:	32ff      	adds	r2, #255	; 0xff
 80024aa:	0004      	movs	r4, r0
 80024ac:	000d      	movs	r5, r1
 80024ae:	20d4      	movs	r0, #212	; 0xd4
 80024b0:	490f      	ldr	r1, [pc, #60]	; (80024f0 <acc_radar_engine_linear_create+0x4c>)
 80024b2:	f00a fd27 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 80024b6:	2300      	movs	r3, #0
 80024b8:	6160      	str	r0, [r4, #20]
 80024ba:	4298      	cmp	r0, r3
 80024bc:	d015      	beq.n	80024ea <acc_radar_engine_linear_create+0x46>
 80024be:	0028      	movs	r0, r5
 80024c0:	f7fe fc6a 	bl	8000d98 <acc_base_configuration_sensor_get>
 80024c4:	6020      	str	r0, [r4, #0]
 80024c6:	0028      	movs	r0, r5
 80024c8:	f7fe fb98 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 80024cc:	73a0      	strb	r0, [r4, #14]
 80024ce:	0028      	movs	r0, r5
 80024d0:	f7fe fc4f 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 80024d4:	4243      	negs	r3, r0
 80024d6:	4158      	adcs	r0, r3
 80024d8:	73e0      	strb	r0, [r4, #15]
 80024da:	0028      	movs	r0, r5
 80024dc:	f7fe fc14 	bl	8000d08 <acc_radar_engine_common_get_timeout_ms>
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <acc_radar_engine_linear_create+0x50>)
 80024e2:	6120      	str	r0, [r4, #16]
 80024e4:	3334      	adds	r3, #52	; 0x34
 80024e6:	61a3      	str	r3, [r4, #24]
 80024e8:	2301      	movs	r3, #1
 80024ea:	0018      	movs	r0, r3
 80024ec:	bd70      	pop	{r4, r5, r6, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	0801d17a 	.word	0x0801d17a
 80024f4:	08016750 	.word	0x08016750

080024f8 <acc_service_sparse_configuration_create>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	2260      	movs	r2, #96	; 0x60
 80024fc:	4972      	ldr	r1, [pc, #456]	; (80026c8 <acc_service_sparse_configuration_create+0x1d0>)
 80024fe:	208c      	movs	r0, #140	; 0x8c
 8002500:	f00a fd00 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 8002504:	1e04      	subs	r4, r0, #0
 8002506:	d100      	bne.n	800250a <acc_service_sparse_configuration_create+0x12>
 8002508:	e0db      	b.n	80026c2 <acc_service_sparse_configuration_create+0x1ca>
 800250a:	4b70      	ldr	r3, [pc, #448]	; (80026cc <acc_service_sparse_configuration_create+0x1d4>)
 800250c:	0005      	movs	r5, r0
 800250e:	6003      	str	r3, [r0, #0]
 8002510:	2303      	movs	r3, #3
 8002512:	7103      	strb	r3, [r0, #4]
 8002514:	4b6e      	ldr	r3, [pc, #440]	; (80026d0 <acc_service_sparse_configuration_create+0x1d8>)
 8002516:	351c      	adds	r5, #28
 8002518:	6083      	str	r3, [r0, #8]
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <acc_service_sparse_configuration_create+0x1dc>)
 800251c:	6105      	str	r5, [r0, #16]
 800251e:	6143      	str	r3, [r0, #20]
 8002520:	2358      	movs	r3, #88	; 0x58
 8002522:	2102      	movs	r1, #2
 8002524:	8303      	strh	r3, [r0, #24]
 8002526:	f7fe fe27 	bl	8001178 <acc_service_profile_set>
 800252a:	0020      	movs	r0, r4
 800252c:	2100      	movs	r1, #0
 800252e:	f7fe fe11 	bl	8001154 <acc_service_maximize_signal_attenuation_set>
 8002532:	0028      	movs	r0, r5
 8002534:	f7fe fb48 	bl	8000bc8 <configuration_is_valid>
 8002538:	2800      	cmp	r0, #0
 800253a:	d001      	beq.n	8002540 <acc_service_sparse_configuration_create+0x48>
 800253c:	4b66      	ldr	r3, [pc, #408]	; (80026d8 <acc_service_sparse_configuration_create+0x1e0>)
 800253e:	6423      	str	r3, [r4, #64]	; 0x40
 8002540:	0028      	movs	r0, r5
 8002542:	f7fe fb41 	bl	8000bc8 <configuration_is_valid>
 8002546:	2800      	cmp	r0, #0
 8002548:	d001      	beq.n	800254e <acc_service_sparse_configuration_create+0x56>
 800254a:	4b64      	ldr	r3, [pc, #400]	; (80026dc <acc_service_sparse_configuration_create+0x1e4>)
 800254c:	6463      	str	r3, [r4, #68]	; 0x44
 800254e:	0028      	movs	r0, r5
 8002550:	f7fe fb3a 	bl	8000bc8 <configuration_is_valid>
 8002554:	2800      	cmp	r0, #0
 8002556:	d003      	beq.n	8002560 <acc_service_sparse_configuration_create+0x68>
 8002558:	0023      	movs	r3, r4
 800255a:	2206      	movs	r2, #6
 800255c:	334e      	adds	r3, #78	; 0x4e
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	0028      	movs	r0, r5
 8002562:	f7fe fb31 	bl	8000bc8 <configuration_is_valid>
 8002566:	2800      	cmp	r0, #0
 8002568:	d001      	beq.n	800256e <acc_service_sparse_configuration_create+0x76>
 800256a:	2301      	movs	r3, #1
 800256c:	62a3      	str	r3, [r4, #40]	; 0x28
 800256e:	0028      	movs	r0, r5
 8002570:	f7fe fc09 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 8002574:	0028      	movs	r0, r5
 8002576:	f7fe fb27 	bl	8000bc8 <configuration_is_valid>
 800257a:	2800      	cmp	r0, #0
 800257c:	d001      	beq.n	8002582 <acc_service_sparse_configuration_create+0x8a>
 800257e:	2302      	movs	r3, #2
 8002580:	6563      	str	r3, [r4, #84]	; 0x54
 8002582:	0028      	movs	r0, r5
 8002584:	f7fe fb20 	bl	8000bc8 <configuration_is_valid>
 8002588:	2800      	cmp	r0, #0
 800258a:	d003      	beq.n	8002594 <acc_service_sparse_configuration_create+0x9c>
 800258c:	0023      	movs	r3, r4
 800258e:	2200      	movs	r2, #0
 8002590:	3348      	adds	r3, #72	; 0x48
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	0028      	movs	r0, r5
 8002596:	f7fe fb17 	bl	8000bc8 <configuration_is_valid>
 800259a:	2800      	cmp	r0, #0
 800259c:	d003      	beq.n	80025a6 <acc_service_sparse_configuration_create+0xae>
 800259e:	0023      	movs	r3, r4
 80025a0:	2210      	movs	r2, #16
 80025a2:	337c      	adds	r3, #124	; 0x7c
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	0028      	movs	r0, r5
 80025a8:	f7fe fb0e 	bl	8000bc8 <configuration_is_valid>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d002      	beq.n	80025b6 <acc_service_sparse_configuration_create+0xbe>
 80025b0:	2200      	movs	r2, #0
 80025b2:	1d23      	adds	r3, r4, #4
 80025b4:	67da      	str	r2, [r3, #124]	; 0x7c
 80025b6:	0028      	movs	r0, r5
 80025b8:	f7fe fb06 	bl	8000bc8 <configuration_is_valid>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d003      	beq.n	80025c8 <acc_service_sparse_configuration_create+0xd0>
 80025c0:	0023      	movs	r3, r4
 80025c2:	2200      	movs	r2, #0
 80025c4:	3362      	adds	r3, #98	; 0x62
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	0028      	movs	r0, r5
 80025ca:	f7fe fafd 	bl	8000bc8 <configuration_is_valid>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d003      	beq.n	80025da <acc_service_sparse_configuration_create+0xe2>
 80025d2:	0023      	movs	r3, r4
 80025d4:	2200      	movs	r2, #0
 80025d6:	3363      	adds	r3, #99	; 0x63
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	0028      	movs	r0, r5
 80025dc:	f7fe faf4 	bl	8000bc8 <configuration_is_valid>
 80025e0:	2800      	cmp	r0, #0
 80025e2:	d003      	beq.n	80025ec <acc_service_sparse_configuration_create+0xf4>
 80025e4:	0023      	movs	r3, r4
 80025e6:	2200      	movs	r2, #0
 80025e8:	3364      	adds	r3, #100	; 0x64
 80025ea:	701a      	strb	r2, [r3, #0]
 80025ec:	0028      	movs	r0, r5
 80025ee:	f7fe faeb 	bl	8000bc8 <configuration_is_valid>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d007      	beq.n	8002606 <acc_service_sparse_configuration_create+0x10e>
 80025f6:	0023      	movs	r3, r4
 80025f8:	2200      	movs	r2, #0
 80025fa:	336b      	adds	r3, #107	; 0x6b
 80025fc:	705a      	strb	r2, [r3, #1]
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	3240      	adds	r2, #64	; 0x40
 8002604:	805a      	strh	r2, [r3, #2]
 8002606:	0028      	movs	r0, r5
 8002608:	f7fe fade 	bl	8000bc8 <configuration_is_valid>
 800260c:	2800      	cmp	r0, #0
 800260e:	d003      	beq.n	8002618 <acc_service_sparse_configuration_create+0x120>
 8002610:	0023      	movs	r3, r4
 8002612:	22ff      	movs	r2, #255	; 0xff
 8002614:	3372      	adds	r3, #114	; 0x72
 8002616:	801a      	strh	r2, [r3, #0]
 8002618:	0028      	movs	r0, r5
 800261a:	f7fe fad5 	bl	8000bc8 <configuration_is_valid>
 800261e:	2800      	cmp	r0, #0
 8002620:	d003      	beq.n	800262a <acc_service_sparse_configuration_create+0x132>
 8002622:	0023      	movs	r3, r4
 8002624:	2200      	movs	r2, #0
 8002626:	3374      	adds	r3, #116	; 0x74
 8002628:	701a      	strb	r2, [r3, #0]
 800262a:	0028      	movs	r0, r5
 800262c:	f7fe facc 	bl	8000bc8 <configuration_is_valid>
 8002630:	2800      	cmp	r0, #0
 8002632:	d004      	beq.n	800263e <acc_service_sparse_configuration_create+0x146>
 8002634:	0023      	movs	r3, r4
 8002636:	2200      	movs	r2, #0
 8002638:	3376      	adds	r3, #118	; 0x76
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	67a2      	str	r2, [r4, #120]	; 0x78
 800263e:	0028      	movs	r0, r5
 8002640:	2101      	movs	r1, #1
 8002642:	f7fe faed 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 8002646:	0028      	movs	r0, r5
 8002648:	f7fe fabe 	bl	8000bc8 <configuration_is_valid>
 800264c:	2800      	cmp	r0, #0
 800264e:	d003      	beq.n	8002658 <acc_service_sparse_configuration_create+0x160>
 8002650:	0023      	movs	r3, r4
 8002652:	2201      	movs	r2, #1
 8002654:	3386      	adds	r3, #134	; 0x86
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	0028      	movs	r0, r5
 800265a:	f7fe fab5 	bl	8000bc8 <configuration_is_valid>
 800265e:	2800      	cmp	r0, #0
 8002660:	d003      	beq.n	800266a <acc_service_sparse_configuration_create+0x172>
 8002662:	0023      	movs	r3, r4
 8002664:	220b      	movs	r2, #11
 8002666:	335a      	adds	r3, #90	; 0x5a
 8002668:	801a      	strh	r2, [r3, #0]
 800266a:	0028      	movs	r0, r5
 800266c:	f7fe faac 	bl	8000bc8 <configuration_is_valid>
 8002670:	2800      	cmp	r0, #0
 8002672:	d003      	beq.n	800267c <acc_service_sparse_configuration_create+0x184>
 8002674:	0023      	movs	r3, r4
 8002676:	220a      	movs	r2, #10
 8002678:	3358      	adds	r3, #88	; 0x58
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	0028      	movs	r0, r5
 800267e:	f7fe faa3 	bl	8000bc8 <configuration_is_valid>
 8002682:	2800      	cmp	r0, #0
 8002684:	d003      	beq.n	800268e <acc_service_sparse_configuration_create+0x196>
 8002686:	0023      	movs	r3, r4
 8002688:	2200      	movs	r2, #0
 800268a:	3365      	adds	r3, #101	; 0x65
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	0028      	movs	r0, r5
 8002690:	f7fe fa9a 	bl	8000bc8 <configuration_is_valid>
 8002694:	2800      	cmp	r0, #0
 8002696:	d003      	beq.n	80026a0 <acc_service_sparse_configuration_create+0x1a8>
 8002698:	0023      	movs	r3, r4
 800269a:	2201      	movs	r2, #1
 800269c:	336a      	adds	r3, #106	; 0x6a
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	0028      	movs	r0, r5
 80026a2:	f7fe fa91 	bl	8000bc8 <configuration_is_valid>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d004      	beq.n	80026b4 <acc_service_sparse_configuration_create+0x1bc>
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	0023      	movs	r3, r4
 80026ae:	0152      	lsls	r2, r2, #5
 80026b0:	3370      	adds	r3, #112	; 0x70
 80026b2:	801a      	strh	r2, [r3, #0]
 80026b4:	0028      	movs	r0, r5
 80026b6:	f7fe fa87 	bl	8000bc8 <configuration_is_valid>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d001      	beq.n	80026c2 <acc_service_sparse_configuration_create+0x1ca>
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <acc_service_sparse_configuration_create+0x1e8>)
 80026c0:	61e3      	str	r3, [r4, #28]
 80026c2:	0020      	movs	r0, r4
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	0801d1ac 	.word	0x0801d1ac
 80026cc:	acc09dd7 	.word	0xacc09dd7
 80026d0:	0800121d 	.word	0x0800121d
 80026d4:	08004129 	.word	0x08004129
 80026d8:	3e4ccccd 	.word	0x3e4ccccd
 80026dc:	3e99999a 	.word	0x3e99999a
 80026e0:	08002453 	.word	0x08002453

080026e4 <acc_service_create>:
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	46c6      	mov	lr, r8
 80026e8:	4d30      	ldr	r5, [pc, #192]	; (80027ac <acc_service_create+0xc8>)
 80026ea:	b500      	push	{lr}
 80026ec:	792c      	ldrb	r4, [r5, #4]
 80026ee:	0007      	movs	r7, r0
 80026f0:	2c00      	cmp	r4, #0
 80026f2:	d04d      	beq.n	8002790 <acc_service_create+0xac>
 80026f4:	f7fe fcb4 	bl	8001060 <acc_service_configuration_valid>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d101      	bne.n	8002700 <acc_service_create+0x1c>
 80026fc:	2400      	movs	r4, #0
 80026fe:	e00b      	b.n	8002718 <acc_service_create+0x34>
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	68de      	ldr	r6, [r3, #12]
 8002704:	2e2a      	cmp	r6, #42	; 0x2a
 8002706:	d90b      	bls.n	8002720 <acc_service_create+0x3c>
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <acc_service_create+0xcc>)
 800270a:	4a2a      	ldr	r2, [pc, #168]	; (80027b4 <acc_service_create+0xd0>)
 800270c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800270e:	492a      	ldr	r1, [pc, #168]	; (80027b8 <acc_service_create+0xd4>)
 8002710:	232a      	movs	r3, #42	; 0x2a
 8002712:	2000      	movs	r0, #0
 8002714:	47a0      	blx	r4
 8002716:	2400      	movs	r4, #0
 8002718:	0020      	movs	r0, r4
 800271a:	bc04      	pop	{r2}
 800271c:	4690      	mov	r8, r2
 800271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002720:	796b      	ldrb	r3, [r5, #5]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <acc_service_create+0x48>
 8002726:	68ab      	ldr	r3, [r5, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d129      	bne.n	8002780 <acc_service_create+0x9c>
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <acc_service_create+0xcc>)
 800272e:	8b3c      	ldrh	r4, [r7, #24]
 8002730:	001a      	movs	r2, r3
 8002732:	3230      	adds	r2, #48	; 0x30
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	2a03      	cmp	r2, #3
 8002738:	d906      	bls.n	8002748 <acc_service_create+0x64>
 800273a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <acc_service_create+0xd8>)
 800273e:	4698      	mov	r8, r3
 8002740:	491d      	ldr	r1, [pc, #116]	; (80027b8 <acc_service_create+0xd4>)
 8002742:	0033      	movs	r3, r6
 8002744:	2004      	movs	r0, #4
 8002746:	47c0      	blx	r8
 8002748:	0020      	movs	r0, r4
 800274a:	22bd      	movs	r2, #189	; 0xbd
 800274c:	491c      	ldr	r1, [pc, #112]	; (80027c0 <acc_service_create+0xdc>)
 800274e:	f00a fbd9 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 8002752:	1e04      	subs	r4, r0, #0
 8002754:	d0d2      	beq.n	80026fc <acc_service_create+0x18>
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <acc_service_create+0xe0>)
 8002758:	6046      	str	r6, [r0, #4]
 800275a:	6003      	str	r3, [r0, #0]
 800275c:	68ab      	ldr	r3, [r5, #8]
 800275e:	0039      	movs	r1, r7
 8002760:	6543      	str	r3, [r0, #84]	; 0x54
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	60a8      	str	r0, [r5, #8]
 8002766:	4798      	blx	r3
 8002768:	2800      	cmp	r0, #0
 800276a:	d10e      	bne.n	800278a <acc_service_create+0xa6>
 800276c:	68e3      	ldr	r3, [r4, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <acc_service_create+0x92>
 8002772:	0020      	movs	r0, r4
 8002774:	4798      	blx	r3
 8002776:	0020      	movs	r0, r4
 8002778:	f7fe fd9c 	bl	80012b4 <destroy_handle>
 800277c:	2400      	movs	r4, #0
 800277e:	e7cb      	b.n	8002718 <acc_service_create+0x34>
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4296      	cmp	r6, r2
 8002784:	d00b      	beq.n	800279e <acc_service_create+0xba>
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	e7ce      	b.n	8002728 <acc_service_create+0x44>
 800278a:	2301      	movs	r3, #1
 800278c:	7263      	strb	r3, [r4, #9]
 800278e:	e7c3      	b.n	8002718 <acc_service_create+0x34>
 8002790:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <acc_service_create+0xcc>)
 8002792:	4a0d      	ldr	r2, [pc, #52]	; (80027c8 <acc_service_create+0xe4>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002796:	4908      	ldr	r1, [pc, #32]	; (80027b8 <acc_service_create+0xd4>)
 8002798:	0020      	movs	r0, r4
 800279a:	4798      	blx	r3
 800279c:	e7bc      	b.n	8002718 <acc_service_create+0x34>
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <acc_service_create+0xcc>)
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <acc_service_create+0xe8>)
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	4904      	ldr	r1, [pc, #16]	; (80027b8 <acc_service_create+0xd4>)
 80027a6:	2000      	movs	r0, #0
 80027a8:	4798      	blx	r3
 80027aa:	e7a7      	b.n	80026fc <acc_service_create+0x18>
 80027ac:	2000008c 	.word	0x2000008c
 80027b0:	200005d8 	.word	0x200005d8
 80027b4:	0801d1cd 	.word	0x0801d1cd
 80027b8:	0801cf8c 	.word	0x0801cf8c
 80027bc:	0801d1e6 	.word	0x0801d1e6
 80027c0:	0801d205 	.word	0x0801d205
 80027c4:	acc09ee8 	.word	0xacc09ee8
 80027c8:	0801d227 	.word	0x0801d227
 80027cc:	0801d239 	.word	0x0801d239

080027d0 <transfer_data.lto_priv.133>:
 80027d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027d2:	4657      	mov	r7, sl
 80027d4:	464e      	mov	r6, r9
 80027d6:	4645      	mov	r5, r8
 80027d8:	46de      	mov	lr, fp
 80027da:	6944      	ldr	r4, [r0, #20]
 80027dc:	b5e0      	push	{r5, r6, r7, lr}
 80027de:	0023      	movs	r3, r4
 80027e0:	0025      	movs	r5, r4
 80027e2:	b08d      	sub	sp, #52	; 0x34
 80027e4:	9204      	str	r2, [sp, #16]
 80027e6:	33c2      	adds	r3, #194	; 0xc2
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	0006      	movs	r6, r0
 80027ec:	468a      	mov	sl, r1
 80027ee:	35c6      	adds	r5, #198	; 0xc6
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d100      	bne.n	80027f6 <transfer_data.lto_priv.133+0x26>
 80027f4:	802b      	strh	r3, [r5, #0]
 80027f6:	23cc      	movs	r3, #204	; 0xcc
 80027f8:	469b      	mov	fp, r3
 80027fa:	44a3      	add	fp, r4
 80027fc:	465b      	mov	r3, fp
 80027fe:	207c      	movs	r0, #124	; 0x7c
 8002800:	8819      	ldrh	r1, [r3, #0]
 8002802:	f00e fca7 	bl	8011154 <__udivsi3>
 8002806:	23c8      	movs	r3, #200	; 0xc8
 8002808:	4699      	mov	r9, r3
 800280a:	44a1      	add	r9, r4
 800280c:	464b      	mov	r3, r9
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	a906      	add	r1, sp, #24
 8002812:	b29b      	uxth	r3, r3
 8002814:	4358      	muls	r0, r3
 8002816:	0023      	movs	r3, r4
 8002818:	4680      	mov	r8, r0
 800281a:	33ce      	adds	r3, #206	; 0xce
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	0020      	movs	r0, r4
 8002820:	4498      	add	r8, r3
 8002822:	f00d fea3 	bl	801056c <acc_cpd_linear_sweep_get_info>
 8002826:	9b06      	ldr	r3, [sp, #24]
 8002828:	8829      	ldrh	r1, [r5, #0]
 800282a:	4443      	add	r3, r8
 800282c:	001a      	movs	r2, r3
 800282e:	4653      	mov	r3, sl
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6830      	ldr	r0, [r6, #0]
 8002834:	469c      	mov	ip, r3
 8002836:	4461      	add	r1, ip
 8002838:	f7ff f946 	bl	8001ac8 <acc_sensor_protocol_r2_transfer_data>
 800283c:	0023      	movs	r3, r4
 800283e:	33ad      	adds	r3, #173	; 0xad
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	0006      	movs	r6, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d128      	bne.n	800289a <transfer_data.lto_priv.133+0xca>
 8002848:	2300      	movs	r3, #0
 800284a:	9a04      	ldr	r2, [sp, #16]
 800284c:	a906      	add	r1, sp, #24
 800284e:	7013      	strb	r3, [r2, #0]
 8002850:	0020      	movs	r0, r4
 8002852:	f00d fe8b 	bl	801056c <acc_cpd_linear_sweep_get_info>
 8002856:	4643      	mov	r3, r8
 8002858:	4650      	mov	r0, sl
 800285a:	005a      	lsls	r2, r3, #1
 800285c:	9b06      	ldr	r3, [sp, #24]
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	0059      	lsls	r1, r3, #1
 8002862:	882b      	ldrh	r3, [r5, #0]
 8002864:	1871      	adds	r1, r6, r1
 8002866:	18c0      	adds	r0, r0, r3
 8002868:	f013 ff11 	bl	801668e <memmove>
 800286c:	464b      	mov	r3, r9
 800286e:	882e      	ldrh	r6, [r5, #0]
 8002870:	34c4      	adds	r4, #196	; 0xc4
 8002872:	8026      	strh	r6, [r4, #0]
 8002874:	681c      	ldr	r4, [r3, #0]
 8002876:	465b      	mov	r3, fp
 8002878:	207c      	movs	r0, #124	; 0x7c
 800287a:	8819      	ldrh	r1, [r3, #0]
 800287c:	f00e fc6a 	bl	8011154 <__udivsi3>
 8002880:	b2a4      	uxth	r4, r4
 8002882:	0064      	lsls	r4, r4, #1
 8002884:	4344      	muls	r4, r0
 8002886:	4640      	mov	r0, r8
 8002888:	1936      	adds	r6, r6, r4
 800288a:	802e      	strh	r6, [r5, #0]
 800288c:	b00d      	add	sp, #52	; 0x34
 800288e:	bc3c      	pop	{r2, r3, r4, r5}
 8002890:	4690      	mov	r8, r2
 8002892:	4699      	mov	r9, r3
 8002894:	46a2      	mov	sl, r4
 8002896:	46ab      	mov	fp, r5
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289a:	0022      	movs	r2, r4
 800289c:	211f      	movs	r1, #31
 800289e:	32bc      	adds	r2, #188	; 0xbc
 80028a0:	6813      	ldr	r3, [r2, #0]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	400b      	ands	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <transfer_data.lto_priv.133+0x1d8>)
 80028aa:	0011      	movs	r1, r2
 80028ac:	3130      	adds	r1, #48	; 0x30
 80028ae:	7809      	ldrb	r1, [r1, #0]
 80028b0:	2903      	cmp	r1, #3
 80028b2:	d904      	bls.n	80028be <transfer_data.lto_priv.133+0xee>
 80028b4:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80028b6:	493d      	ldr	r1, [pc, #244]	; (80029ac <transfer_data.lto_priv.133+0x1dc>)
 80028b8:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <transfer_data.lto_priv.133+0x1e0>)
 80028ba:	2004      	movs	r0, #4
 80028bc:	47b8      	blx	r7
 80028be:	6a23      	ldr	r3, [r4, #32]
 80028c0:	4a3c      	ldr	r2, [pc, #240]	; (80029b4 <transfer_data.lto_priv.133+0x1e4>)
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	326c      	adds	r2, #108	; 0x6c
 80028c8:	5e98      	ldrsh	r0, [r3, r2]
 80028ca:	f00f f827 	bl	801191c <__aeabi_i2f>
 80028ce:	1c07      	adds	r7, r0, #0
 80028d0:	8830      	ldrh	r0, [r6, #0]
 80028d2:	f00f f86d 	bl	80119b0 <__aeabi_ui2f>
 80028d6:	21de      	movs	r1, #222	; 0xde
 80028d8:	0589      	lsls	r1, r1, #22
 80028da:	f00e f909 	bl	8010af0 <__aeabi_fmul>
 80028de:	21fc      	movs	r1, #252	; 0xfc
 80028e0:	0589      	lsls	r1, r1, #22
 80028e2:	f00e fa37 	bl	8010d54 <__aeabi_fsub>
 80028e6:	4934      	ldr	r1, [pc, #208]	; (80029b8 <transfer_data.lto_priv.133+0x1e8>)
 80028e8:	f00e f902 	bl	8010af0 <__aeabi_fmul>
 80028ec:	4933      	ldr	r1, [pc, #204]	; (80029bc <transfer_data.lto_priv.133+0x1ec>)
 80028ee:	f00e f8ff 	bl	8010af0 <__aeabi_fmul>
 80028f2:	1c01      	adds	r1, r0, #0
 80028f4:	1c38      	adds	r0, r7, #0
 80028f6:	f00e fa2d 	bl	8010d54 <__aeabi_fsub>
 80028fa:	f00e ffef 	bl	80118dc <__aeabi_f2iz>
 80028fe:	4a30      	ldr	r2, [pc, #192]	; (80029c0 <transfer_data.lto_priv.133+0x1f0>)
 8002900:	b207      	sxth	r7, r0
 8002902:	b2bb      	uxth	r3, r7
 8002904:	189a      	adds	r2, r3, r2
 8002906:	492f      	ldr	r1, [pc, #188]	; (80029c4 <transfer_data.lto_priv.133+0x1f4>)
 8002908:	b292      	uxth	r2, r2
 800290a:	428a      	cmp	r2, r1
 800290c:	d82a      	bhi.n	8002964 <transfer_data.lto_priv.133+0x194>
 800290e:	2126      	movs	r1, #38	; 0x26
 8002910:	5e62      	ldrsh	r2, [r4, r1]
 8002912:	8870      	ldrh	r0, [r6, #2]
 8002914:	9203      	str	r2, [sp, #12]
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <transfer_data.lto_priv.133+0x1f8>)
 8002918:	4694      	mov	ip, r2
 800291a:	22e6      	movs	r2, #230	; 0xe6
 800291c:	4463      	add	r3, ip
 800291e:	b29b      	uxth	r3, r3
 8002920:	0052      	lsls	r2, r2, #1
 8002922:	4293      	cmp	r3, r2
 8002924:	d924      	bls.n	8002970 <transfer_data.lto_priv.133+0x1a0>
 8002926:	f00f f843 	bl	80119b0 <__aeabi_ui2f>
 800292a:	21de      	movs	r1, #222	; 0xde
 800292c:	0589      	lsls	r1, r1, #22
 800292e:	f00e f8df 	bl	8010af0 <__aeabi_fmul>
 8002932:	21fc      	movs	r1, #252	; 0xfc
 8002934:	0589      	lsls	r1, r1, #22
 8002936:	f00e fa0d 	bl	8010d54 <__aeabi_fsub>
 800293a:	491f      	ldr	r1, [pc, #124]	; (80029b8 <transfer_data.lto_priv.133+0x1e8>)
 800293c:	f00e f8d8 	bl	8010af0 <__aeabi_fmul>
 8002940:	491e      	ldr	r1, [pc, #120]	; (80029bc <transfer_data.lto_priv.133+0x1ec>)
 8002942:	f00e f8d5 	bl	8010af0 <__aeabi_fmul>
 8002946:	9005      	str	r0, [sp, #20]
 8002948:	0038      	movs	r0, r7
 800294a:	f00e ffe7 	bl	801191c <__aeabi_i2f>
 800294e:	1c01      	adds	r1, r0, #0
 8002950:	9805      	ldr	r0, [sp, #20]
 8002952:	f00d fe21 	bl	8010598 <__aeabi_fadd>
 8002956:	f00e ffc1 	bl	80118dc <__aeabi_f2iz>
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	b200      	sxth	r0, r0
 800295e:	3364      	adds	r3, #100	; 0x64
 8002960:	4298      	cmp	r0, r3
 8002962:	dd05      	ble.n	8002970 <transfer_data.lto_priv.133+0x1a0>
 8002964:	0022      	movs	r2, r4
 8002966:	2301      	movs	r3, #1
 8002968:	32bc      	adds	r2, #188	; 0xbc
 800296a:	6811      	ldr	r1, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	0023      	movs	r3, r4
 8002972:	33bc      	adds	r3, #188	; 0xbc
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	2a00      	cmp	r2, #0
 800297a:	d111      	bne.n	80029a0 <transfer_data.lto_priv.133+0x1d0>
 800297c:	2b02      	cmp	r3, #2
 800297e:	d800      	bhi.n	8002982 <transfer_data.lto_priv.133+0x1b2>
 8002980:	e762      	b.n	8002848 <transfer_data.lto_priv.133+0x78>
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <transfer_data.lto_priv.133+0x1d8>)
 8002984:	0011      	movs	r1, r2
 8002986:	3130      	adds	r1, #48	; 0x30
 8002988:	7809      	ldrb	r1, [r1, #0]
 800298a:	2900      	cmp	r1, #0
 800298c:	d006      	beq.n	800299c <transfer_data.lto_priv.133+0x1cc>
 800298e:	2105      	movs	r1, #5
 8002990:	9100      	str	r1, [sp, #0]
 8002992:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8002994:	4905      	ldr	r1, [pc, #20]	; (80029ac <transfer_data.lto_priv.133+0x1dc>)
 8002996:	4a0d      	ldr	r2, [pc, #52]	; (80029cc <transfer_data.lto_priv.133+0x1fc>)
 8002998:	2001      	movs	r0, #1
 800299a:	47b8      	blx	r7
 800299c:	2301      	movs	r3, #1
 800299e:	e754      	b.n	800284a <transfer_data.lto_priv.133+0x7a>
 80029a0:	1e51      	subs	r1, r2, #1
 80029a2:	400a      	ands	r2, r1
 80029a4:	3301      	adds	r3, #1
 80029a6:	e7e7      	b.n	8002978 <transfer_data.lto_priv.133+0x1a8>
 80029a8:	200005d8 	.word	0x200005d8
 80029ac:	0801d277 	.word	0x0801d277
 80029b0:	0801d260 	.word	0x0801d260
 80029b4:	08016750 	.word	0x08016750
 80029b8:	3f99999a 	.word	0x3f99999a
 80029bc:	447a0000 	.word	0x447a0000
 80029c0:	fffffd12 	.word	0xfffffd12
 80029c4:	00000217 	.word	0x00000217
 80029c8:	fffffcf4 	.word	0xfffffcf4
 80029cc:	0801d288 	.word	0x0801d288

080029d0 <acc_service_sparse_get_next_by_reference.part.9>:
 80029d0:	b530      	push	{r4, r5, lr}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	680d      	ldr	r5, [r1, #0]
 80029d6:	9103      	str	r1, [sp, #12]
 80029d8:	2100      	movs	r1, #0
 80029da:	2403      	movs	r4, #3
 80029dc:	ab01      	add	r3, sp, #4
 80029de:	9104      	str	r1, [sp, #16]
 80029e0:	7619      	strb	r1, [r3, #24]
 80029e2:	7659      	strb	r1, [r3, #25]
 80029e4:	7699      	strb	r1, [r3, #26]
 80029e6:	0019      	movs	r1, r3
 80029e8:	701c      	strb	r4, [r3, #0]
 80029ea:	9502      	str	r5, [sp, #8]
 80029ec:	9205      	str	r2, [sp, #20]
 80029ee:	9406      	str	r4, [sp, #24]
 80029f0:	f00a fa16 	bl	800ce20 <acc_service_get_next.constprop.77>
 80029f4:	b009      	add	sp, #36	; 0x24
 80029f6:	bd30      	pop	{r4, r5, pc}

080029f8 <convolve1d>:
int8_t convolve1d(uint16_t indx, uint8_t dir){
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	0004      	movs	r4, r0
 80029fe:	9001      	str	r0, [sp, #4]
 8002a00:	000d      	movs	r5, r1
	stackSet();
 8002a02:	f7fe fdeb 	bl	80015dc <stackSet>
	if(dir == 0){	
 8002a06:	2d00      	cmp	r5, #0
 8002a08:	d149      	bne.n	8002a9e <convolve1d+0xa6>
		if(indx >= _bins){
 8002a0a:	4a49      	ldr	r2, [pc, #292]	; (8002b30 <convolve1d+0x138>)
 8002a0c:	2331      	movs	r3, #49	; 0x31
 8002a0e:	5cd3      	ldrb	r3, [r2, r3]
 8002a10:	42a3      	cmp	r3, r4
 8002a12:	d901      	bls.n	8002a18 <convolve1d+0x20>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8002a14:	2400      	movs	r4, #0
 8002a16:	e035      	b.n	8002a84 <convolve1d+0x8c>
			ERR_PRINTLN("bin count too great to convolve");
 8002a18:	4846      	ldr	r0, [pc, #280]	; (8002b34 <convolve1d+0x13c>)
 8002a1a:	f013 f969 	bl	8015cf0 <__wrap_printf>
 8002a1e:	4846      	ldr	r0, [pc, #280]	; (8002b38 <convolve1d+0x140>)
 8002a20:	f013 f966 	bl	8015cf0 <__wrap_printf>
 8002a24:	228c      	movs	r2, #140	; 0x8c
 8002a26:	4945      	ldr	r1, [pc, #276]	; (8002b3c <convolve1d+0x144>)
 8002a28:	4845      	ldr	r0, [pc, #276]	; (8002b40 <convolve1d+0x148>)
 8002a2a:	f013 f961 	bl	8015cf0 <__wrap_printf>
			return 0;
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e033      	b.n	8002a9a <convolve1d+0xa2>
				sum += kernel[j]*getdata(i-j+cent, indx);
 8002a32:	00b2      	lsls	r2, r6, #2
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <convolve1d+0x14c>)
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	695f      	ldr	r7, [r3, #20]
 8002a3a:	1ba0      	subs	r0, r4, r6
 8002a3c:	b280      	uxth	r0, r0
 8002a3e:	3004      	adds	r0, #4
 8002a40:	466b      	mov	r3, sp
 8002a42:	2104      	movs	r1, #4
 8002a44:	5e59      	ldrsh	r1, [r3, r1]
 8002a46:	b200      	sxth	r0, r0
 8002a48:	f7fe fdec 	bl	8001624 <getdata>
 8002a4c:	f00e ff66 	bl	801191c <__aeabi_i2f>
 8002a50:	1c39      	adds	r1, r7, #0
 8002a52:	f00e f84d 	bl	8010af0 <__aeabi_fmul>
 8002a56:	1c01      	adds	r1, r0, #0
 8002a58:	1c28      	adds	r0, r5, #0
 8002a5a:	f00d fd9d 	bl	8010598 <__aeabi_fadd>
 8002a5e:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 8002a60:	3601      	adds	r6, #1
 8002a62:	2e08      	cmp	r6, #8
 8002a64:	dde5      	ble.n	8002a32 <convolve1d+0x3a>
			pop = stackPush(sum);
 8002a66:	1c28      	adds	r0, r5, #0
 8002a68:	f7fe fda2 	bl	80015b0 <stackPush>
			setdata(i-cent, indx, pop);
 8002a6c:	1f25      	subs	r5, r4, #4
 8002a6e:	b2ad      	uxth	r5, r5
 8002a70:	f00e fd7e 	bl	8011570 <__aeabi_f2uiz>
 8002a74:	b282      	uxth	r2, r0
 8002a76:	466b      	mov	r3, sp
 8002a78:	2104      	movs	r1, #4
 8002a7a:	5e59      	ldrsh	r1, [r3, r1]
 8002a7c:	b228      	sxth	r0, r5
 8002a7e:	f7fe fdbb 	bl	80015f8 <setdata>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8002a82:	3401      	adds	r4, #1
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <convolve1d+0x138>)
 8002a86:	2330      	movs	r3, #48	; 0x30
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	085b      	lsrs	r3, r3, #1
 8002a8c:	3307      	adds	r3, #7
 8002a8e:	42a3      	cmp	r3, r4
 8002a90:	dd02      	ble.n	8002a98 <convolve1d+0xa0>
			for(int j = 0; j < CONVKER; j++){
 8002a92:	2600      	movs	r6, #0
			float sum = 0.0f;
 8002a94:	2500      	movs	r5, #0
 8002a96:	e7e4      	b.n	8002a62 <convolve1d+0x6a>
	return 1;
 8002a98:	2001      	movs	r0, #1
}
 8002a9a:	b003      	add	sp, #12
 8002a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(indx >= _sweeps){
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <convolve1d+0x138>)
 8002aa0:	2330      	movs	r3, #48	; 0x30
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	9a01      	ldr	r2, [sp, #4]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <convolve1d+0xb6>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8002aaa:	2400      	movs	r4, #0
 8002aac:	e035      	b.n	8002b1a <convolve1d+0x122>
			ERR_PRINTLN("sweep count too great to convolve");
 8002aae:	4821      	ldr	r0, [pc, #132]	; (8002b34 <convolve1d+0x13c>)
 8002ab0:	f013 f91e 	bl	8015cf0 <__wrap_printf>
 8002ab4:	4824      	ldr	r0, [pc, #144]	; (8002b48 <convolve1d+0x150>)
 8002ab6:	f013 f91b 	bl	8015cf0 <__wrap_printf>
 8002aba:	229d      	movs	r2, #157	; 0x9d
 8002abc:	491f      	ldr	r1, [pc, #124]	; (8002b3c <convolve1d+0x144>)
 8002abe:	4820      	ldr	r0, [pc, #128]	; (8002b40 <convolve1d+0x148>)
 8002ac0:	f013 f916 	bl	8015cf0 <__wrap_printf>
			return 0;
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	e7e8      	b.n	8002a9a <convolve1d+0xa2>
				sum += kernel[j]*getdata(indx, i-j+cent);
 8002ac8:	00b2      	lsls	r2, r6, #2
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <convolve1d+0x14c>)
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	695f      	ldr	r7, [r3, #20]
 8002ad0:	1ba1      	subs	r1, r4, r6
 8002ad2:	b289      	uxth	r1, r1
 8002ad4:	3104      	adds	r1, #4
 8002ad6:	b209      	sxth	r1, r1
 8002ad8:	466b      	mov	r3, sp
 8002ada:	2004      	movs	r0, #4
 8002adc:	5e18      	ldrsh	r0, [r3, r0]
 8002ade:	f7fe fda1 	bl	8001624 <getdata>
 8002ae2:	f00e ff1b 	bl	801191c <__aeabi_i2f>
 8002ae6:	1c39      	adds	r1, r7, #0
 8002ae8:	f00e f802 	bl	8010af0 <__aeabi_fmul>
 8002aec:	1c01      	adds	r1, r0, #0
 8002aee:	1c28      	adds	r0, r5, #0
 8002af0:	f00d fd52 	bl	8010598 <__aeabi_fadd>
 8002af4:	1c05      	adds	r5, r0, #0
			for(int j = 0; j < CONVKER; j++){
 8002af6:	3601      	adds	r6, #1
 8002af8:	2e08      	cmp	r6, #8
 8002afa:	dde5      	ble.n	8002ac8 <convolve1d+0xd0>
			pop = stackPush(sum);
 8002afc:	1c28      	adds	r0, r5, #0
 8002afe:	f7fe fd57 	bl	80015b0 <stackPush>
			setdata(indx, i-cent, pop);
 8002b02:	1f25      	subs	r5, r4, #4
 8002b04:	b2ad      	uxth	r5, r5
 8002b06:	f00e fd33 	bl	8011570 <__aeabi_f2uiz>
 8002b0a:	b282      	uxth	r2, r0
 8002b0c:	b229      	sxth	r1, r5
 8002b0e:	466b      	mov	r3, sp
 8002b10:	2004      	movs	r0, #4
 8002b12:	5e18      	ldrsh	r0, [r3, r0]
 8002b14:	f7fe fd70 	bl	80015f8 <setdata>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 8002b18:	3401      	adds	r4, #1
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <convolve1d+0x138>)
 8002b1c:	2331      	movs	r3, #49	; 0x31
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	3307      	adds	r3, #7
 8002b22:	42a3      	cmp	r3, r4
 8002b24:	dd02      	ble.n	8002b2c <convolve1d+0x134>
			for(int j = 0; j < CONVKER; j++){
 8002b26:	2600      	movs	r6, #0
			float sum = 0.0f;
 8002b28:	2500      	movs	r5, #0
 8002b2a:	e7e5      	b.n	8002af8 <convolve1d+0x100>
	return 1;
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	e7b4      	b.n	8002a9a <convolve1d+0xa2>
 8002b30:	2000008c 	.word	0x2000008c
 8002b34:	0801ead4 	.word	0x0801ead4
 8002b38:	0801eadc 	.word	0x0801eadc
 8002b3c:	0801eafc 	.word	0x0801eafc
 8002b40:	0801eb0c 	.word	0x0801eb0c
 8002b44:	2000018c 	.word	0x2000018c
 8002b48:	0801eb18 	.word	0x0801eb18

08002b4c <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	46d6      	mov	lr, sl
 8002b50:	464f      	mov	r7, r9
 8002b52:	4646      	mov	r6, r8
 8002b54:	b5c0      	push	{r6, r7, lr}
 8002b56:	0006      	movs	r6, r0
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8002b58:	4b33      	ldr	r3, [pc, #204]	; (8002c28 <data_malloc+0xdc>)
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8002b5a:	000d      	movs	r5, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	4699      	mov	r9, r3
 8002b60:	f013 f8c6 	bl	8015cf0 <__wrap_printf>
 8002b64:	0031      	movs	r1, r6
 8002b66:	4831      	ldr	r0, [pc, #196]	; (8002c2c <data_malloc+0xe0>)
 8002b68:	f013 f8c2 	bl	8015cf0 <__wrap_printf>
 8002b6c:	22c5      	movs	r2, #197	; 0xc5
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <data_malloc+0xe4>)
 8002b70:	4f30      	ldr	r7, [pc, #192]	; (8002c34 <data_malloc+0xe8>)
 8002b72:	0019      	movs	r1, r3
 8002b74:	0052      	lsls	r2, r2, #1
 8002b76:	0038      	movs	r0, r7
 8002b78:	4698      	mov	r8, r3
 8002b7a:	f013 f8b9 	bl	8015cf0 <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 8002b7e:	4648      	mov	r0, r9
 8002b80:	f013 f8b6 	bl	8015cf0 <__wrap_printf>
 8002b84:	0029      	movs	r1, r5
 8002b86:	482c      	ldr	r0, [pc, #176]	; (8002c38 <data_malloc+0xec>)
 8002b88:	f013 f8b2 	bl	8015cf0 <__wrap_printf>
 8002b8c:	228c      	movs	r2, #140	; 0x8c
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8002b8e:	1cac      	adds	r4, r5, #2
 8002b90:	4374      	muls	r4, r6
	DBG_PRINTLN("malloc bins: %d", bins);
 8002b92:	32ff      	adds	r2, #255	; 0xff
 8002b94:	4641      	mov	r1, r8
 8002b96:	0038      	movs	r0, r7
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8002b98:	0064      	lsls	r4, r4, #1
	DBG_PRINTLN("malloc bins: %d", bins);
 8002b9a:	f013 f8a9 	bl	8015cf0 <__wrap_printf>
    data = (uint16_t **)malloc(len);
 8002b9e:	0020      	movs	r0, r4
 8002ba0:	f013 fd58 	bl	8016654 <malloc>
 8002ba4:	4b25      	ldr	r3, [pc, #148]	; (8002c3c <data_malloc+0xf0>)
 8002ba6:	469a      	mov	sl, r3
 8002ba8:	60d8      	str	r0, [r3, #12]
	if (data == NULL){
 8002baa:	2800      	cmp	r0, #0
 8002bac:	d112      	bne.n	8002bd4 <data_malloc+0x88>
		ERR_PRINTLN("data buffer allociation failed");
 8002bae:	4824      	ldr	r0, [pc, #144]	; (8002c40 <data_malloc+0xf4>)
 8002bb0:	f013 f89e 	bl	8015cf0 <__wrap_printf>
 8002bb4:	4823      	ldr	r0, [pc, #140]	; (8002c44 <data_malloc+0xf8>)
 8002bb6:	f013 f89b 	bl	8015cf0 <__wrap_printf>
 8002bba:	2296      	movs	r2, #150	; 0x96
 8002bbc:	4641      	mov	r1, r8
 8002bbe:	32ff      	adds	r2, #255	; 0xff
 8002bc0:	0038      	movs	r0, r7
 8002bc2:	f013 f895 	bl	8015cf0 <__wrap_printf>
		return -1;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	4240      	negs	r0, r0
}
 8002bca:	bc1c      	pop	{r2, r3, r4}
 8002bcc:	4690      	mov	r8, r2
 8002bce:	4699      	mov	r9, r3
 8002bd0:	46a2      	mov	sl, r4
 8002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		DBG_PRINTLN("data buffer allociation success");
 8002bd4:	4648      	mov	r0, r9
 8002bd6:	f013 f88b 	bl	8015cf0 <__wrap_printf>
 8002bda:	481b      	ldr	r0, [pc, #108]	; (8002c48 <data_malloc+0xfc>)
 8002bdc:	f013 f888 	bl	8015cf0 <__wrap_printf>
 8002be0:	22cc      	movs	r2, #204	; 0xcc
 8002be2:	4641      	mov	r1, r8
 8002be4:	0052      	lsls	r2, r2, #1
 8002be6:	0038      	movs	r0, r7
 8002be8:	f013 f882 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 8002bec:	4648      	mov	r0, r9
 8002bee:	f013 f87f 	bl	8015cf0 <__wrap_printf>
 8002bf2:	0021      	movs	r1, r4
 8002bf4:	4815      	ldr	r0, [pc, #84]	; (8002c4c <data_malloc+0x100>)
 8002bf6:	f013 f87b 	bl	8015cf0 <__wrap_printf>
 8002bfa:	229a      	movs	r2, #154	; 0x9a
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	32ff      	adds	r2, #255	; 0xff
 8002c00:	0038      	movs	r0, r7
 8002c02:	f013 f875 	bl	8015cf0 <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 8002c06:	4653      	mov	r3, sl
 8002c08:	2200      	movs	r2, #0
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	00b3      	lsls	r3, r6, #2
 8002c0e:	006d      	lsls	r5, r5, #1
 8002c10:	18cb      	adds	r3, r1, r3
    for(uint16_t i = 0; i < r; i++){
 8002c12:	b290      	uxth	r0, r2
 8002c14:	4286      	cmp	r6, r0
 8002c16:	d801      	bhi.n	8002c1c <data_malloc+0xd0>
	return 0;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e7d6      	b.n	8002bca <data_malloc+0x7e>
        data[i] = (ptr + c * i);
 8002c1c:	0090      	lsls	r0, r2, #2
 8002c1e:	500b      	str	r3, [r1, r0]
 8002c20:	3201      	adds	r2, #1
 8002c22:	195b      	adds	r3, r3, r5
 8002c24:	e7f5      	b.n	8002c12 <data_malloc+0xc6>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	0801d2c3 	.word	0x0801d2c3
 8002c2c:	0801d2c9 	.word	0x0801d2c9
 8002c30:	0801d2db 	.word	0x0801d2db
 8002c34:	0801eb0c 	.word	0x0801eb0c
 8002c38:	0801d2ef 	.word	0x0801d2ef
 8002c3c:	2000018c 	.word	0x2000018c
 8002c40:	0801ead4 	.word	0x0801ead4
 8002c44:	0801d2ff 	.word	0x0801d2ff
 8002c48:	0801d31e 	.word	0x0801d31e
 8002c4c:	0801d33e 	.word	0x0801d33e

08002c50 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 8002c50:	b570      	push	{r4, r5, r6, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8002c52:	4c13      	ldr	r4, [pc, #76]	; (8002ca0 <sparse_data_malloc+0x50>)
 8002c54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002c56:	0028      	movs	r0, r5
 8002c58:	f7fe fa02 	bl	8001060 <acc_service_configuration_valid>
 8002c5c:	2800      	cmp	r0, #0
 8002c5e:	d01d      	beq.n	8002c9c <sparse_data_malloc+0x4c>
 8002c60:	6928      	ldr	r0, [r5, #16]
 8002c62:	f7fd fff2 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 8002c66:	0006      	movs	r6, r0
	bins = sparse_metadata.data_length/sweeps;
 8002c68:	1da3      	adds	r3, r4, #6
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8002c6a:	8220      	strh	r0, [r4, #16]
	bins = sparse_metadata.data_length/sweeps;
 8002c6c:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8002c6e:	0031      	movs	r1, r6
 8002c70:	f00e fa70 	bl	8011154 <__udivsi3>
	if(far_active){
 8002c74:	0023      	movs	r3, r4
 8002c76:	3350      	adds	r3, #80	; 0x50
 8002c78:	781b      	ldrb	r3, [r3, #0]
	bins = sparse_metadata.data_length/sweeps;
 8002c7a:	b285      	uxth	r5, r0
 8002c7c:	8265      	strh	r5, [r4, #18]
	if(far_active){
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <sparse_data_malloc+0x42>
		bins += sparse_metadata_far.data_length/sweeps;
 8002c82:	0023      	movs	r3, r4
 8002c84:	3354      	adds	r3, #84	; 0x54
 8002c86:	8918      	ldrh	r0, [r3, #8]
 8002c88:	0031      	movs	r1, r6
 8002c8a:	f00e fa63 	bl	8011154 <__udivsi3>
 8002c8e:	182d      	adds	r5, r5, r0
 8002c90:	8265      	strh	r5, [r4, #18]
	return data_malloc(sweeps,bins);
 8002c92:	0030      	movs	r0, r6
 8002c94:	8a61      	ldrh	r1, [r4, #18]
 8002c96:	f7ff ff59 	bl	8002b4c <data_malloc>
}
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 8002c9c:	8220      	strh	r0, [r4, #16]
 8002c9e:	deff      	udf	#255	; 0xff
 8002ca0:	2000018c 	.word	0x2000018c

08002ca4 <makekernel>:
void makekernel(float st_dev){
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8002ca8:	2400      	movs	r4, #0
	float norm = 0;
 8002caa:	2500      	movs	r5, #0
 8002cac:	e01c      	b.n	8002ce8 <makekernel+0x44>
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8002cae:	1f20      	subs	r0, r4, #4
 8002cb0:	f00e fe34 	bl	801191c <__aeabi_i2f>
 8002cb4:	1c31      	adds	r1, r6, #0
 8002cb6:	f00d fe09 	bl	80108cc <__aeabi_fdiv>
 8002cba:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	061b      	lsls	r3, r3, #24
 8002cc0:	18c0      	adds	r0, r0, r3
 8002cc2:	f00d ff15 	bl	8010af0 <__aeabi_fmul>
 8002cc6:	21fc      	movs	r1, #252	; 0xfc
 8002cc8:	0589      	lsls	r1, r1, #22
 8002cca:	f00d ff11 	bl	8010af0 <__aeabi_fmul>
		kernel[i] =  expf(t);
 8002cce:	f011 fa2b 	bl	8014128 <expf>
 8002cd2:	1c01      	adds	r1, r0, #0
 8002cd4:	00a2      	lsls	r2, r4, #2
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <makekernel+0x74>)
 8002cd8:	189b      	adds	r3, r3, r2
 8002cda:	6158      	str	r0, [r3, #20]
		norm += kernel[i];
 8002cdc:	1c28      	adds	r0, r5, #0
 8002cde:	f00d fc5b 	bl	8010598 <__aeabi_fadd>
 8002ce2:	1c05      	adds	r5, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8002ce4:	3401      	adds	r4, #1
 8002ce6:	b2a4      	uxth	r4, r4
 8002ce8:	2c08      	cmp	r4, #8
 8002cea:	d9e0      	bls.n	8002cae <makekernel+0xa>
	float sclfact = 1/norm;
 8002cec:	1c29      	adds	r1, r5, #0
 8002cee:	20fe      	movs	r0, #254	; 0xfe
 8002cf0:	0580      	lsls	r0, r0, #22
 8002cf2:	f00d fdeb 	bl	80108cc <__aeabi_fdiv>
 8002cf6:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8002cf8:	2400      	movs	r4, #0
 8002cfa:	e009      	b.n	8002d10 <makekernel+0x6c>
		kernel[i] *= sclfact;
 8002cfc:	00a3      	lsls	r3, r4, #2
 8002cfe:	4d06      	ldr	r5, [pc, #24]	; (8002d18 <makekernel+0x74>)
 8002d00:	18ed      	adds	r5, r5, r3
 8002d02:	1c31      	adds	r1, r6, #0
 8002d04:	6968      	ldr	r0, [r5, #20]
 8002d06:	f00d fef3 	bl	8010af0 <__aeabi_fmul>
 8002d0a:	6168      	str	r0, [r5, #20]
	for(uint16_t i = 0; i < CONVKER; i++){
 8002d0c:	3401      	adds	r4, #1
 8002d0e:	b2a4      	uxth	r4, r4
 8002d10:	2c08      	cmp	r4, #8
 8002d12:	d9f3      	bls.n	8002cfc <makekernel+0x58>
}
 8002d14:	bd70      	pop	{r4, r5, r6, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	2000018c 	.word	0x2000018c

08002d1c <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	1c0d      	adds	r5, r1, #0
 8002d22:	b28c      	uxth	r4, r1
 8002d24:	ab01      	add	r3, sp, #4
 8002d26:	8019      	strh	r1, [r3, #0]
	_conv_data = data;
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <doconv+0x5c>)
 8002d2a:	6358      	str	r0, [r3, #52]	; 0x34
	_sweeps = data_size.x1;
 8002d2c:	2130      	movs	r1, #48	; 0x30
 8002d2e:	545d      	strb	r5, [r3, r1]
	_bins = data_size.x2;
 8002d30:	0a24      	lsrs	r4, r4, #8
 8002d32:	3101      	adds	r1, #1
 8002d34:	545c      	strb	r4, [r3, r1]
	makekernel(st_dev);
 8002d36:	1c10      	adds	r0, r2, #0
 8002d38:	f7ff ffb4 	bl	8002ca4 <makekernel>
	for(uint16_t i = 0; i < _bins; i++){
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	e005      	b.n	8002d4c <doconv+0x30>
		convolve1d(i,0);
 8002d40:	2100      	movs	r1, #0
 8002d42:	0020      	movs	r0, r4
 8002d44:	f7ff fe58 	bl	80029f8 <convolve1d>
	for(uint16_t i = 0; i < _bins; i++){
 8002d48:	3401      	adds	r4, #1
 8002d4a:	b2a4      	uxth	r4, r4
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <doconv+0x5c>)
 8002d4e:	2331      	movs	r3, #49	; 0x31
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	42a3      	cmp	r3, r4
 8002d54:	d8f4      	bhi.n	8002d40 <doconv+0x24>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8002d56:	2400      	movs	r4, #0
 8002d58:	e005      	b.n	8002d66 <doconv+0x4a>
		convolve1d(j,1);
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	f7ff fe4b 	bl	80029f8 <convolve1d>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8002d62:	3401      	adds	r4, #1
 8002d64:	b2a4      	uxth	r4, r4
 8002d66:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <doconv+0x5c>)
 8002d68:	2330      	movs	r3, #48	; 0x30
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	42a3      	cmp	r3, r4
 8002d70:	d8f3      	bhi.n	8002d5a <doconv+0x3e>
}
 8002d72:	b003      	add	sp, #12
 8002d74:	bd30      	pop	{r4, r5, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	2000008c 	.word	0x2000008c

08002d7c <fftWindowing>:
{// Weighing factors are computed once before multiple use of FFT
 8002d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d7e:	46c6      	mov	lr, r8
 8002d80:	b500      	push	{lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	0007      	movs	r7, r0
 8002d86:	000e      	movs	r6, r1
 8002d88:	4690      	mov	r8, r2
	double samplesMinusOne = ((double)samples - 1.0);
 8002d8a:	0008      	movs	r0, r1
 8002d8c:	f010 fbbc 	bl	8013508 <__aeabi_ui2d>
 8002d90:	2200      	movs	r2, #0
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <fftWindowing+0xe8>)
 8002d94:	f00f ffe4 	bl	8012d60 <__aeabi_dsub>
 8002d98:	9002      	str	r0, [sp, #8]
 8002d9a:	9103      	str	r1, [sp, #12]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8002d9c:	2400      	movs	r4, #0
 8002d9e:	0033      	movs	r3, r6
 8002da0:	003e      	movs	r6, r7
 8002da2:	001f      	movs	r7, r3
 8002da4:	e01d      	b.n	8002de2 <fftWindowing+0x66>
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8002da6:	0065      	lsls	r5, r4, #1
 8002da8:	1975      	adds	r5, r6, r5
 8002daa:	2300      	movs	r3, #0
 8002dac:	5ee8      	ldrsh	r0, [r5, r3]
 8002dae:	f010 fb71 	bl	8013494 <__aeabi_i2d>
 8002db2:	9a00      	ldr	r2, [sp, #0]
 8002db4:	9b01      	ldr	r3, [sp, #4]
 8002db6:	f00f fd61 	bl	801287c <__aeabi_dmul>
 8002dba:	f010 fb35 	bl	8013428 <__aeabi_d2iz>
 8002dbe:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8002dc0:	1c65      	adds	r5, r4, #1
 8002dc2:	1b7d      	subs	r5, r7, r5
 8002dc4:	006d      	lsls	r5, r5, #1
 8002dc6:	1975      	adds	r5, r6, r5
 8002dc8:	2300      	movs	r3, #0
 8002dca:	5ee8      	ldrsh	r0, [r5, r3]
 8002dcc:	f010 fb62 	bl	8013494 <__aeabi_i2d>
 8002dd0:	9a00      	ldr	r2, [sp, #0]
 8002dd2:	9b01      	ldr	r3, [sp, #4]
 8002dd4:	f00f fd52 	bl	801287c <__aeabi_dmul>
 8002dd8:	f010 fb26 	bl	8013428 <__aeabi_d2iz>
 8002ddc:	8028      	strh	r0, [r5, #0]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8002dde:	3401      	adds	r4, #1
 8002de0:	b2a4      	uxth	r4, r4
 8002de2:	087b      	lsrs	r3, r7, #1
 8002de4:	42a3      	cmp	r3, r4
 8002de6:	d938      	bls.n	8002e5a <fftWindowing+0xde>
		double indexMinusOne = (double)i;
 8002de8:	0020      	movs	r0, r4
 8002dea:	f010 fb8d 	bl	8013508 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8002dee:	9a02      	ldr	r2, [sp, #8]
 8002df0:	9b03      	ldr	r3, [sp, #12]
 8002df2:	f00f f939 	bl	8012068 <__aeabi_ddiv>
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8002df6:	4a1c      	ldr	r2, [pc, #112]	; (8002e68 <fftWindowing+0xec>)
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <fftWindowing+0xf0>)
 8002dfa:	f00f fd3f 	bl	801287c <__aeabi_dmul>
 8002dfe:	f011 f895 	bl	8013f2c <cos>
 8002e02:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <fftWindowing+0xf4>)
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <fftWindowing+0xf8>)
 8002e06:	f00f fd39 	bl	801287c <__aeabi_dmul>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	000b      	movs	r3, r1
 8002e0e:	481a      	ldr	r0, [pc, #104]	; (8002e78 <fftWindowing+0xfc>)
 8002e10:	491a      	ldr	r1, [pc, #104]	; (8002e7c <fftWindowing+0x100>)
 8002e12:	f00f ffa5 	bl	8012d60 <__aeabi_dsub>
 8002e16:	9000      	str	r0, [sp, #0]
 8002e18:	9101      	str	r1, [sp, #4]
		if (dir == FFT_FORWARD) {
 8002e1a:	4643      	mov	r3, r8
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d0c2      	beq.n	8002da6 <fftWindowing+0x2a>
			vData[i] = (int16_t) vData[i]/weighingFactor;
 8002e20:	0065      	lsls	r5, r4, #1
 8002e22:	1975      	adds	r5, r6, r5
 8002e24:	2300      	movs	r3, #0
 8002e26:	5ee8      	ldrsh	r0, [r5, r3]
 8002e28:	f010 fb34 	bl	8013494 <__aeabi_i2d>
 8002e2c:	9a00      	ldr	r2, [sp, #0]
 8002e2e:	9b01      	ldr	r3, [sp, #4]
 8002e30:	f00f f91a 	bl	8012068 <__aeabi_ddiv>
 8002e34:	f010 faf8 	bl	8013428 <__aeabi_d2iz>
 8002e38:	8028      	strh	r0, [r5, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]/weighingFactor;
 8002e3a:	1c65      	adds	r5, r4, #1
 8002e3c:	1b7d      	subs	r5, r7, r5
 8002e3e:	006d      	lsls	r5, r5, #1
 8002e40:	1975      	adds	r5, r6, r5
 8002e42:	2300      	movs	r3, #0
 8002e44:	5ee8      	ldrsh	r0, [r5, r3]
 8002e46:	f010 fb25 	bl	8013494 <__aeabi_i2d>
 8002e4a:	9a00      	ldr	r2, [sp, #0]
 8002e4c:	9b01      	ldr	r3, [sp, #4]
 8002e4e:	f00f f90b 	bl	8012068 <__aeabi_ddiv>
 8002e52:	f010 fae9 	bl	8013428 <__aeabi_d2iz>
 8002e56:	8028      	strh	r0, [r5, #0]
 8002e58:	e7c1      	b.n	8002dde <fftWindowing+0x62>
}
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bc04      	pop	{r2}
 8002e5e:	4690      	mov	r8, r2
 8002e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	3ff00000 	.word	0x3ff00000
 8002e68:	5474a168 	.word	0x5474a168
 8002e6c:	401921fb 	.word	0x401921fb
 8002e70:	d70a3d71 	.word	0xd70a3d71
 8002e74:	3fdd70a3 	.word	0x3fdd70a3
 8002e78:	147ae148 	.word	0x147ae148
 8002e7c:	3fe147ae 	.word	0x3fe147ae

08002e80 <fftComplexToMagnitude>:
{	// vM is half the size of vReal and vImag
 8002e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e82:	46d6      	mov	lr, sl
 8002e84:	464f      	mov	r7, r9
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	4682      	mov	sl, r0
 8002e8c:	4689      	mov	r9, r1
 8002e8e:	0016      	movs	r6, r2
	for (int16_t i = 0; i < samples; i++) {
 8002e90:	2400      	movs	r4, #0
 8002e92:	e01e      	b.n	8002ed2 <fftComplexToMagnitude+0x52>
		vReal[i] = (int16_t) sqrt(sq((float)vReal[i]) + sq((float)vImag[i]));
 8002e94:	0067      	lsls	r7, r4, #1
 8002e96:	4653      	mov	r3, sl
 8002e98:	19dd      	adds	r5, r3, r7
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	5ee8      	ldrsh	r0, [r5, r3]
 8002e9e:	f00e fd3d 	bl	801191c <__aeabi_i2f>
 8002ea2:	1c01      	adds	r1, r0, #0
 8002ea4:	f00d fe24 	bl	8010af0 <__aeabi_fmul>
 8002ea8:	9001      	str	r0, [sp, #4]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	5fd8      	ldrsh	r0, [r3, r7]
 8002eae:	f00e fd35 	bl	801191c <__aeabi_i2f>
 8002eb2:	1c01      	adds	r1, r0, #0
 8002eb4:	f00d fe1c 	bl	8010af0 <__aeabi_fmul>
 8002eb8:	1c01      	adds	r1, r0, #0
 8002eba:	9801      	ldr	r0, [sp, #4]
 8002ebc:	f00d fb6c 	bl	8010598 <__aeabi_fadd>
 8002ec0:	f010 fb54 	bl	801356c <__aeabi_f2d>
 8002ec4:	f011 f8d0 	bl	8014068 <sqrt>
 8002ec8:	f010 faae 	bl	8013428 <__aeabi_d2iz>
 8002ecc:	8028      	strh	r0, [r5, #0]
	for (int16_t i = 0; i < samples; i++) {
 8002ece:	3401      	adds	r4, #1
 8002ed0:	b224      	sxth	r4, r4
 8002ed2:	42b4      	cmp	r4, r6
 8002ed4:	dbde      	blt.n	8002e94 <fftComplexToMagnitude+0x14>
}
 8002ed6:	b003      	add	sp, #12
 8002ed8:	bc0c      	pop	{r2, r3}
 8002eda:	4691      	mov	r9, r2
 8002edc:	469a      	mov	sl, r3
 8002ede:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ee0 <fftCompute>:
{	
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	46de      	mov	lr, fp
 8002ee4:	4657      	mov	r7, sl
 8002ee6:	464e      	mov	r6, r9
 8002ee8:	4645      	mov	r5, r8
 8002eea:	b5e0      	push	{r5, r6, r7, lr}
 8002eec:	b093      	sub	sp, #76	; 0x4c
 8002eee:	0007      	movs	r7, r0
 8002ef0:	468a      	mov	sl, r1
 8002ef2:	4693      	mov	fp, r2
 8002ef4:	9310      	str	r3, [sp, #64]	; 0x40
	uint8_t power = fftExponent(samples);
 8002ef6:	b210      	sxth	r0, r2
 8002ef8:	f7fe fc90 	bl	800181c <fftExponent>
 8002efc:	9011      	str	r0, [sp, #68]	; 0x44
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8002efe:	2500      	movs	r5, #0
	uint16_t j = 0;
 8002f00:	2400      	movs	r4, #0
 8002f02:	465e      	mov	r6, fp
 8002f04:	e01d      	b.n	8002f42 <fftCompute+0x62>
			fftSwap(&vReal[i], &vReal[j]);
 8002f06:	006b      	lsls	r3, r5, #1
 8002f08:	4698      	mov	r8, r3
 8002f0a:	0063      	lsls	r3, r4, #1
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	18f9      	adds	r1, r7, r3
 8002f10:	4643      	mov	r3, r8
 8002f12:	18f8      	adds	r0, r7, r3
 8002f14:	f7fe fc7a 	bl	800180c <fftSwap>
			if(dir==FFT_REVERSE)
 8002f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d116      	bne.n	8002f4c <fftCompute+0x6c>
				fftSwap(&vImag[i], &vImag[j]);
 8002f1e:	4653      	mov	r3, sl
 8002f20:	4652      	mov	r2, sl
 8002f22:	444a      	add	r2, r9
 8002f24:	0011      	movs	r1, r2
 8002f26:	4443      	add	r3, r8
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7fe fc6f 	bl	800180c <fftSwap>
 8002f2e:	e00d      	b.n	8002f4c <fftCompute+0x6c>
			j -= k;
 8002f30:	1ae4      	subs	r4, r4, r3
 8002f32:	b2a4      	uxth	r4, r4
			k >>= 1;
 8002f34:	085b      	lsrs	r3, r3, #1
		while (k <= j) {
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d2fa      	bcs.n	8002f30 <fftCompute+0x50>
		j += k;
 8002f3a:	18e4      	adds	r4, r4, r3
 8002f3c:	b2a4      	uxth	r4, r4
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8002f3e:	3501      	adds	r5, #1
 8002f40:	b2ad      	uxth	r5, r5
 8002f42:	1e73      	subs	r3, r6, #1
 8002f44:	429d      	cmp	r5, r3
 8002f46:	da03      	bge.n	8002f50 <fftCompute+0x70>
		if (i < j) {
 8002f48:	42ac      	cmp	r4, r5
 8002f4a:	d8dc      	bhi.n	8002f06 <fftCompute+0x26>
		uint16_t k = (samples >> 1);
 8002f4c:	0873      	lsrs	r3, r6, #1
 8002f4e:	e7f2      	b.n	8002f36 <fftCompute+0x56>
	for (uint8_t l = 0; (l < power); l++) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	4699      	mov	r9, r3
	uint16_t l2 = 1;
 8002f54:	3301      	adds	r3, #1
 8002f56:	0019      	movs	r1, r3
	double c2 = 0.0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8002f5c:	930d      	str	r3, [sp, #52]	; 0x34
	double c1 = -1.0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	4c7f      	ldr	r4, [pc, #508]	; (8003160 <fftCompute+0x280>)
 8002f62:	930a      	str	r3, [sp, #40]	; 0x28
 8002f64:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f66:	464b      	mov	r3, r9
 8002f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f6a:	9608      	str	r6, [sp, #32]
 8002f6c:	46d3      	mov	fp, sl
 8002f6e:	e0d3      	b.n	8003118 <fftCompute+0x238>
					uint16_t i1 = i + l1;
 8002f70:	464b      	mov	r3, r9
 8002f72:	195c      	adds	r4, r3, r5
 8002f74:	b2a4      	uxth	r4, r4
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8002f76:	0064      	lsls	r4, r4, #1
 8002f78:	46a0      	mov	r8, r4
 8002f7a:	44d8      	add	r8, fp
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	2000      	movs	r0, #0
 8002f80:	5e18      	ldrsh	r0, [r3, r0]
 8002f82:	f010 fa87 	bl	8013494 <__aeabi_i2d>
 8002f86:	9a04      	ldr	r2, [sp, #16]
 8002f88:	9b05      	ldr	r3, [sp, #20]
 8002f8a:	9002      	str	r0, [sp, #8]
 8002f8c:	9103      	str	r1, [sp, #12]
 8002f8e:	f00f fc75 	bl	801287c <__aeabi_dmul>
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	9101      	str	r1, [sp, #4]
 8002f96:	4454      	add	r4, sl
 8002f98:	2300      	movs	r3, #0
 8002f9a:	5ee0      	ldrsh	r0, [r4, r3]
 8002f9c:	f010 fa7a 	bl	8013494 <__aeabi_i2d>
 8002fa0:	0006      	movs	r6, r0
 8002fa2:	000f      	movs	r7, r1
 8002fa4:	9a06      	ldr	r2, [sp, #24]
 8002fa6:	9b07      	ldr	r3, [sp, #28]
 8002fa8:	f00f fc68 	bl	801287c <__aeabi_dmul>
 8002fac:	0002      	movs	r2, r0
 8002fae:	000b      	movs	r3, r1
 8002fb0:	9800      	ldr	r0, [sp, #0]
 8002fb2:	9901      	ldr	r1, [sp, #4]
 8002fb4:	f00f fed4 	bl	8012d60 <__aeabi_dsub>
 8002fb8:	9000      	str	r0, [sp, #0]
 8002fba:	9101      	str	r1, [sp, #4]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8002fbc:	9a04      	ldr	r2, [sp, #16]
 8002fbe:	9b05      	ldr	r3, [sp, #20]
 8002fc0:	0030      	movs	r0, r6
 8002fc2:	0039      	movs	r1, r7
 8002fc4:	f00f fc5a 	bl	801287c <__aeabi_dmul>
 8002fc8:	0006      	movs	r6, r0
 8002fca:	000f      	movs	r7, r1
 8002fcc:	9a06      	ldr	r2, [sp, #24]
 8002fce:	9b07      	ldr	r3, [sp, #28]
 8002fd0:	9802      	ldr	r0, [sp, #8]
 8002fd2:	9903      	ldr	r1, [sp, #12]
 8002fd4:	f00f fc52 	bl	801287c <__aeabi_dmul>
 8002fd8:	0002      	movs	r2, r0
 8002fda:	000b      	movs	r3, r1
 8002fdc:	0030      	movs	r0, r6
 8002fde:	0039      	movs	r1, r7
 8002fe0:	f00e fd26 	bl	8011a30 <__aeabi_dadd>
 8002fe4:	9002      	str	r0, [sp, #8]
 8002fe6:	9103      	str	r1, [sp, #12]
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8002fe8:	006e      	lsls	r6, r5, #1
 8002fea:	465b      	mov	r3, fp
 8002fec:	199f      	adds	r7, r3, r6
 8002fee:	2300      	movs	r3, #0
 8002ff0:	5ef8      	ldrsh	r0, [r7, r3]
 8002ff2:	f010 fa4f 	bl	8013494 <__aeabi_i2d>
 8002ff6:	9a00      	ldr	r2, [sp, #0]
 8002ff8:	9b01      	ldr	r3, [sp, #4]
 8002ffa:	f00f feb1 	bl	8012d60 <__aeabi_dsub>
 8002ffe:	f010 fa13 	bl	8013428 <__aeabi_d2iz>
 8003002:	4643      	mov	r3, r8
 8003004:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8003006:	4456      	add	r6, sl
 8003008:	2300      	movs	r3, #0
 800300a:	5ef0      	ldrsh	r0, [r6, r3]
 800300c:	f010 fa42 	bl	8013494 <__aeabi_i2d>
 8003010:	9a02      	ldr	r2, [sp, #8]
 8003012:	9b03      	ldr	r3, [sp, #12]
 8003014:	f00f fea4 	bl	8012d60 <__aeabi_dsub>
 8003018:	f010 fa06 	bl	8013428 <__aeabi_d2iz>
 800301c:	8020      	strh	r0, [r4, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 800301e:	2300      	movs	r3, #0
 8003020:	5ef8      	ldrsh	r0, [r7, r3]
 8003022:	f010 fa37 	bl	8013494 <__aeabi_i2d>
 8003026:	9a00      	ldr	r2, [sp, #0]
 8003028:	9b01      	ldr	r3, [sp, #4]
 800302a:	f00e fd01 	bl	8011a30 <__aeabi_dadd>
 800302e:	f010 f9fb 	bl	8013428 <__aeabi_d2iz>
 8003032:	8038      	strh	r0, [r7, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8003034:	2300      	movs	r3, #0
 8003036:	5ef0      	ldrsh	r0, [r6, r3]
 8003038:	f010 fa2c 	bl	8013494 <__aeabi_i2d>
 800303c:	9a02      	ldr	r2, [sp, #8]
 800303e:	9b03      	ldr	r3, [sp, #12]
 8003040:	f00e fcf6 	bl	8011a30 <__aeabi_dadd>
 8003044:	f010 f9f0 	bl	8013428 <__aeabi_d2iz>
 8003048:	8030      	strh	r0, [r6, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 800304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304c:	469c      	mov	ip, r3
 800304e:	4465      	add	r5, ip
 8003050:	b2ad      	uxth	r5, r5
 8003052:	9b08      	ldr	r3, [sp, #32]
 8003054:	429d      	cmp	r5, r3
 8003056:	d38b      	bcc.n	8002f70 <fftCompute+0x90>
 8003058:	46c8      	mov	r8, r9
			 double z = ((u1 * c1) - (u2 * c2));
 800305a:	9a04      	ldr	r2, [sp, #16]
 800305c:	9b05      	ldr	r3, [sp, #20]
 800305e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003060:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003062:	f00f fc0b 	bl	801287c <__aeabi_dmul>
 8003066:	0004      	movs	r4, r0
 8003068:	000d      	movs	r5, r1
 800306a:	9a06      	ldr	r2, [sp, #24]
 800306c:	9b07      	ldr	r3, [sp, #28]
 800306e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8003070:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003072:	f00f fc03 	bl	801287c <__aeabi_dmul>
 8003076:	0002      	movs	r2, r0
 8003078:	000b      	movs	r3, r1
 800307a:	0020      	movs	r0, r4
 800307c:	0029      	movs	r1, r5
 800307e:	f00f fe6f 	bl	8012d60 <__aeabi_dsub>
 8003082:	0006      	movs	r6, r0
 8003084:	000f      	movs	r7, r1
			 u2 = ((u1 * c2) + (u2 * c1));
 8003086:	9a04      	ldr	r2, [sp, #16]
 8003088:	9b05      	ldr	r3, [sp, #20]
 800308a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800308c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800308e:	f00f fbf5 	bl	801287c <__aeabi_dmul>
 8003092:	0004      	movs	r4, r0
 8003094:	000d      	movs	r5, r1
 8003096:	9a06      	ldr	r2, [sp, #24]
 8003098:	9b07      	ldr	r3, [sp, #28]
 800309a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800309c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800309e:	f00f fbed 	bl	801287c <__aeabi_dmul>
 80030a2:	0002      	movs	r2, r0
 80030a4:	000b      	movs	r3, r1
 80030a6:	0020      	movs	r0, r4
 80030a8:	0029      	movs	r1, r5
 80030aa:	f00e fcc1 	bl	8011a30 <__aeabi_dadd>
 80030ae:	9006      	str	r0, [sp, #24]
 80030b0:	9107      	str	r1, [sp, #28]
		for (j = 0; j < l1; j++) {
 80030b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b4:	3301      	adds	r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	930c      	str	r3, [sp, #48]	; 0x30
			 u1 = z;
 80030ba:	9604      	str	r6, [sp, #16]
 80030bc:	9705      	str	r7, [sp, #20]
		for (j = 0; j < l1; j++) {
 80030be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030c0:	4543      	cmp	r3, r8
 80030c2:	d202      	bcs.n	80030ca <fftCompute+0x1ea>
			 for (uint16_t i = j; i < samples; i += l2) {
 80030c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030c6:	46c1      	mov	r9, r8
 80030c8:	e7c3      	b.n	8003052 <fftCompute+0x172>
 80030ca:	465f      	mov	r7, fp
 80030cc:	46d3      	mov	fp, sl
		c2 = sqrt((1.0 - c1) / 2.0);
 80030ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030d2:	2000      	movs	r0, #0
 80030d4:	4923      	ldr	r1, [pc, #140]	; (8003164 <fftCompute+0x284>)
 80030d6:	f00f fe43 	bl	8012d60 <__aeabi_dsub>
 80030da:	2200      	movs	r2, #0
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <fftCompute+0x288>)
 80030de:	f00f fbcd 	bl	801287c <__aeabi_dmul>
 80030e2:	f010 ffc1 	bl	8014068 <sqrt>
 80030e6:	900e      	str	r0, [sp, #56]	; 0x38
 80030e8:	910d      	str	r1, [sp, #52]	; 0x34
		if (dir == FFT_FORWARD) {
 80030ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d028      	beq.n	8003142 <fftCompute+0x262>
		c1 = sqrt((1.0 + c1) / 2.0);
 80030f0:	2200      	movs	r2, #0
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <fftCompute+0x284>)
 80030f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80030f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030f8:	f00e fc9a 	bl	8011a30 <__aeabi_dadd>
 80030fc:	2200      	movs	r2, #0
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <fftCompute+0x288>)
 8003100:	f00f fbbc 	bl	801287c <__aeabi_dmul>
 8003104:	f010 ffb0 	bl	8014068 <sqrt>
 8003108:	900a      	str	r0, [sp, #40]	; 0x28
 800310a:	910b      	str	r1, [sp, #44]	; 0x2c
	for (uint8_t l = 0; (l < power); l++) {
 800310c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800310e:	3301      	adds	r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	930f      	str	r3, [sp, #60]	; 0x3c
		l2 <<= 1;
 8003114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003116:	0019      	movs	r1, r3
	for (uint8_t l = 0; (l < power); l++) {
 8003118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800311a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800311c:	4293      	cmp	r3, r2
 800311e:	d217      	bcs.n	8003150 <fftCompute+0x270>
		l2 <<= 1;
 8003120:	004b      	lsls	r3, r1, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	9309      	str	r3, [sp, #36]	; 0x24
		double u2 = 0.0;
 8003126:	2300      	movs	r3, #0
 8003128:	2400      	movs	r4, #0
 800312a:	9306      	str	r3, [sp, #24]
 800312c:	9407      	str	r4, [sp, #28]
		double u1 = 1.0;
 800312e:	2300      	movs	r3, #0
 8003130:	4c0c      	ldr	r4, [pc, #48]	; (8003164 <fftCompute+0x284>)
 8003132:	9304      	str	r3, [sp, #16]
 8003134:	9405      	str	r4, [sp, #20]
		for (j = 0; j < l1; j++) {
 8003136:	2300      	movs	r3, #0
 8003138:	930c      	str	r3, [sp, #48]	; 0x30
 800313a:	4688      	mov	r8, r1
 800313c:	46da      	mov	sl, fp
 800313e:	46bb      	mov	fp, r7
 8003140:	e7bd      	b.n	80030be <fftCompute+0x1de>
			c2 = -c2;
 8003142:	000b      	movs	r3, r1
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	0612      	lsls	r2, r2, #24
 8003148:	4694      	mov	ip, r2
 800314a:	4463      	add	r3, ip
 800314c:	930d      	str	r3, [sp, #52]	; 0x34
 800314e:	e7cf      	b.n	80030f0 <fftCompute+0x210>
}
 8003150:	b013      	add	sp, #76	; 0x4c
 8003152:	bc3c      	pop	{r2, r3, r4, r5}
 8003154:	4690      	mov	r8, r2
 8003156:	4699      	mov	r9, r3
 8003158:	46a2      	mov	sl, r4
 800315a:	46ab      	mov	fp, r5
 800315c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	bff00000 	.word	0xbff00000
 8003164:	3ff00000 	.word	0x3ff00000
 8003168:	3fe00000 	.word	0x3fe00000

0800316c <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 800316c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800316e:	46de      	mov	lr, fp
 8003170:	4657      	mov	r7, sl
 8003172:	464e      	mov	r6, r9
 8003174:	4645      	mov	r5, r8
 8003176:	b5e0      	push	{r5, r6, r7, lr}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	0006      	movs	r6, r0
 800317e:	b28b      	uxth	r3, r1
 8003180:	81b9      	strh	r1, [r7, #12]
	uint8_t sweeps = data_size.x1;
 8003182:	b2ca      	uxtb	r2, r1
 8003184:	4690      	mov	r8, r2
	uint8_t bins = data_size.x2;
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	603b      	str	r3, [r7, #0]
	float scales[bins];
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	330a      	adds	r3, #10
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	466a      	mov	r2, sp
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	469d      	mov	sp, r3
 8003198:	46eb      	mov	fp, sp
	int16_t real[sweeps];
 800319a:	4643      	mov	r3, r8
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	3308      	adds	r3, #8
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	466a      	mov	r2, sp
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	4695      	mov	sp, r2
 80031aa:	60ba      	str	r2, [r7, #8]
	int16_t imag[sweeps];
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	469d      	mov	sp, r3
 80031b0:	46e9      	mov	r9, sp
	for(uint16_t i = 0; i<bins; i++){
 80031b2:	2400      	movs	r4, #0
 80031b4:	e04d      	b.n	8003252 <dofft+0xe6>
		  real[j] = data[j][i];
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	5992      	ldr	r2, [r2, r6]
 80031ba:	0061      	lsls	r1, r4, #1
 80031bc:	5e89      	ldrsh	r1, [r1, r2]
 80031be:	005a      	lsls	r2, r3, #1
 80031c0:	68b8      	ldr	r0, [r7, #8]
 80031c2:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 80031c4:	3301      	adds	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4642      	mov	r2, r8
 80031ca:	b295      	uxth	r5, r2
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	d3f2      	bcc.n	80031b6 <dofft+0x4a>
		for (uint16_t j = 0; j < sweeps; j++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	e005      	b.n	80031e0 <dofft+0x74>
		  imag[j] = 0;
 80031d4:	005a      	lsls	r2, r3, #1
 80031d6:	2100      	movs	r1, #0
 80031d8:	4648      	mov	r0, r9
 80031da:	5211      	strh	r1, [r2, r0]
		for (uint16_t j = 0; j < sweeps; j++) {
 80031dc:	3301      	adds	r3, #1
 80031de:	b29b      	uxth	r3, r3
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	d3f7      	bcc.n	80031d4 <dofft+0x68>
		scales[i] = fftRangeScaling(real, sweeps);
 80031e4:	0029      	movs	r1, r5
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	469a      	mov	sl, r3
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fe fb20 	bl	8001830 <fftRangeScaling>
 80031f0:	00a3      	lsls	r3, r4, #2
 80031f2:	465a      	mov	r2, fp
 80031f4:	5098      	str	r0, [r3, r2]
		fftWindowing(real, sweeps, FFT_FORWARD);
 80031f6:	2201      	movs	r2, #1
 80031f8:	0029      	movs	r1, r5
 80031fa:	4650      	mov	r0, sl
 80031fc:	f7ff fdbe 	bl	8002d7c <fftWindowing>
		fftCompute(real, imag, sweeps, FFT_FORWARD);
 8003200:	2301      	movs	r3, #1
 8003202:	002a      	movs	r2, r5
 8003204:	4649      	mov	r1, r9
 8003206:	4650      	mov	r0, sl
 8003208:	f7ff fe6a 	bl	8002ee0 <fftCompute>
		fftComplexToMagnitude(real, imag, sweeps);
 800320c:	002a      	movs	r2, r5
 800320e:	4649      	mov	r1, r9
 8003210:	4650      	mov	r0, sl
 8003212:	f7ff fe35 	bl	8002e80 <fftComplexToMagnitude>
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8003216:	2200      	movs	r2, #0
 8003218:	e00a      	b.n	8003230 <dofft+0xc4>
		  data[j][i] = real[j];
 800321a:	0093      	lsls	r3, r2, #2
 800321c:	5999      	ldr	r1, [r3, r6]
 800321e:	0063      	lsls	r3, r4, #1
 8003220:	607b      	str	r3, [r7, #4]
 8003222:	0050      	lsls	r0, r2, #1
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	5ac0      	ldrh	r0, [r0, r3]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	52c8      	strh	r0, [r1, r3]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 800322c:	3201      	adds	r2, #1
 800322e:	b292      	uxth	r2, r2
 8003230:	4643      	mov	r3, r8
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	429a      	cmp	r2, r3
 8003236:	d3f0      	bcc.n	800321a <dofft+0xae>
 8003238:	e007      	b.n	800324a <dofft+0xde>
		  data[j][i] = 0;
 800323a:	009a      	lsls	r2, r3, #2
 800323c:	5992      	ldr	r2, [r2, r6]
 800323e:	0061      	lsls	r1, r4, #1
 8003240:	1852      	adds	r2, r2, r1
 8003242:	2100      	movs	r1, #0
 8003244:	8011      	strh	r1, [r2, #0]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8003246:	3301      	adds	r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	42ab      	cmp	r3, r5
 800324c:	d3f5      	bcc.n	800323a <dofft+0xce>
	for(uint16_t i = 0; i<bins; i++){
 800324e:	3401      	adds	r4, #1
 8003250:	b2a4      	uxth	r4, r4
 8003252:	883b      	ldrh	r3, [r7, #0]
 8003254:	469a      	mov	sl, r3
 8003256:	429c      	cmp	r4, r3
 8003258:	d201      	bcs.n	800325e <dofft+0xf2>
		for (uint16_t j = 0; j < sweeps; j++) {
 800325a:	2300      	movs	r3, #0
 800325c:	e7b4      	b.n	80031c8 <dofft+0x5c>
	float min_scale = scales[0];
 800325e:	465b      	mov	r3, fp
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	607b      	str	r3, [r7, #4]
	for(uint16_t i =1; i<bins; i++){
 8003264:	2501      	movs	r5, #1
 8003266:	e001      	b.n	800326c <dofft+0x100>
 8003268:	3501      	adds	r5, #1
 800326a:	b2ad      	uxth	r5, r5
 800326c:	4555      	cmp	r5, sl
 800326e:	d20a      	bcs.n	8003286 <dofft+0x11a>
		if (scales[i] < min_scale){
 8003270:	00ab      	lsls	r3, r5, #2
 8003272:	465a      	mov	r2, fp
 8003274:	589c      	ldr	r4, [r3, r2]
 8003276:	1c21      	adds	r1, r4, #0
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f00e f945 	bl	8011508 <__aeabi_fcmpgt>
 800327e:	2800      	cmp	r0, #0
 8003280:	d0f2      	beq.n	8003268 <dofft+0xfc>
			min_scale = scales[i];		
 8003282:	607c      	str	r4, [r7, #4]
 8003284:	e7f0      	b.n	8003268 <dofft+0xfc>
	for(uint16_t i =0; i<bins; i++){
 8003286:	2300      	movs	r3, #0
 8003288:	4699      	mov	r9, r3
 800328a:	e017      	b.n	80032bc <dofft+0x150>
			data[j][i] *= scaling_factor;
 800328c:	00a3      	lsls	r3, r4, #2
 800328e:	599d      	ldr	r5, [r3, r6]
 8003290:	464b      	mov	r3, r9
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	18ed      	adds	r5, r5, r3
 8003296:	8828      	ldrh	r0, [r5, #0]
 8003298:	f00e fb40 	bl	801191c <__aeabi_i2f>
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	f00d fc27 	bl	8010af0 <__aeabi_fmul>
 80032a2:	f00e f965 	bl	8011570 <__aeabi_f2uiz>
 80032a6:	8028      	strh	r0, [r5, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 80032a8:	3401      	adds	r4, #1
 80032aa:	b2a4      	uxth	r4, r4
 80032ac:	4643      	mov	r3, r8
 80032ae:	085b      	lsrs	r3, r3, #1
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d3eb      	bcc.n	800328c <dofft+0x120>
	for(uint16_t i =0; i<bins; i++){
 80032b4:	464b      	mov	r3, r9
 80032b6:	3301      	adds	r3, #1
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4699      	mov	r9, r3
 80032bc:	45d1      	cmp	r9, sl
 80032be:	d209      	bcs.n	80032d4 <dofft+0x168>
		float scaling_factor = min_scale/scales[i]; 
 80032c0:	464b      	mov	r3, r9
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	465a      	mov	r2, fp
 80032c6:	5899      	ldr	r1, [r3, r2]
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f00d faff 	bl	80108cc <__aeabi_fdiv>
 80032ce:	60b8      	str	r0, [r7, #8]
		for(uint16_t j = 0; j < sweeps/2; j++){
 80032d0:	2400      	movs	r4, #0
 80032d2:	e7eb      	b.n	80032ac <dofft+0x140>
}
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b005      	add	sp, #20
 80032da:	bc3c      	pop	{r2, r3, r4, r5}
 80032dc:	4690      	mov	r8, r2
 80032de:	4699      	mov	r9, r3
 80032e0:	46a2      	mov	sl, r4
 80032e2:	46ab      	mov	fp, r5
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032e6 <printf_sparse_metadata>:
	filldata_envelope();
	INF_PRINTLN("Envelope measurement complete");
	
}

void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 80032e6:	b084      	sub	sp, #16
 80032e8:	b510      	push	{r4, lr}
 80032ea:	9103      	str	r1, [sp, #12]
 80032ec:	9002      	str	r0, [sp, #8]
    printf("Sparse* Serivce Metadata\n");
 80032ee:	4825      	ldr	r0, [pc, #148]	; (8003384 <printf_sparse_metadata+0x9e>)
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 80032f0:	9204      	str	r2, [sp, #16]
 80032f2:	9305      	str	r3, [sp, #20]
 80032f4:	9c03      	ldr	r4, [sp, #12]
    printf("Sparse* Serivce Metadata\n");
 80032f6:	f012 fce9 	bl	8015ccc <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 80032fa:	4923      	ldr	r1, [pc, #140]	; (8003388 <printf_sparse_metadata+0xa2>)
 80032fc:	9802      	ldr	r0, [sp, #8]
 80032fe:	f00d fbf7 	bl	8010af0 <__aeabi_fmul>
 8003302:	f00e faeb 	bl	80118dc <__aeabi_f2iz>
 8003306:	0001      	movs	r1, r0
 8003308:	4820      	ldr	r0, [pc, #128]	; (800338c <printf_sparse_metadata+0xa6>)
 800330a:	f012 fcf1 	bl	8015cf0 <__wrap_printf>
    if(! far_active){
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <printf_sparse_metadata+0xaa>)
 8003310:	001a      	movs	r2, r3
 8003312:	3250      	adds	r2, #80	; 0x50
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	2a00      	cmp	r2, #0
 8003318:	d126      	bne.n	8003368 <printf_sparse_metadata+0x82>
        printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 800331a:	491b      	ldr	r1, [pc, #108]	; (8003388 <printf_sparse_metadata+0xa2>)
 800331c:	1c20      	adds	r0, r4, #0
 800331e:	f00d fbe7 	bl	8010af0 <__aeabi_fmul>
 8003322:	f00e f925 	bl	8011570 <__aeabi_f2uiz>
 8003326:	0001      	movs	r1, r0
 8003328:	481a      	ldr	r0, [pc, #104]	; (8003394 <printf_sparse_metadata+0xae>)
 800332a:	f012 fce1 	bl	8015cf0 <__wrap_printf>
    }else{
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
    }
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 800332e:	ab02      	add	r3, sp, #8
 8003330:	8919      	ldrh	r1, [r3, #8]
 8003332:	4819      	ldr	r0, [pc, #100]	; (8003398 <printf_sparse_metadata+0xb2>)
 8003334:	f012 fcdc 	bl	8015cf0 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8003338:	4913      	ldr	r1, [pc, #76]	; (8003388 <printf_sparse_metadata+0xa2>)
 800333a:	9805      	ldr	r0, [sp, #20]
 800333c:	f00d fbd8 	bl	8010af0 <__aeabi_fmul>
 8003340:	f00e f916 	bl	8011570 <__aeabi_f2uiz>
 8003344:	0001      	movs	r1, r0
 8003346:	4815      	ldr	r0, [pc, #84]	; (800339c <printf_sparse_metadata+0xb6>)
 8003348:	f012 fcd2 	bl	8015cf0 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <printf_sparse_metadata+0xa2>)
 800334e:	9806      	ldr	r0, [sp, #24]
 8003350:	f00d fbce 	bl	8010af0 <__aeabi_fmul>
 8003354:	f00e f90c 	bl	8011570 <__aeabi_f2uiz>
 8003358:	0001      	movs	r1, r0
 800335a:	4811      	ldr	r0, [pc, #68]	; (80033a0 <printf_sparse_metadata+0xba>)
 800335c:	f012 fcc8 	bl	8015cf0 <__wrap_printf>
}
 8003360:	bc10      	pop	{r4}
 8003362:	bc08      	pop	{r3}
 8003364:	b004      	add	sp, #16
 8003366:	4718      	bx	r3
       printf("Length (far): %lu mm\n", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8003368:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800336a:	1c20      	adds	r0, r4, #0
 800336c:	f00d f914 	bl	8010598 <__aeabi_fadd>
 8003370:	4905      	ldr	r1, [pc, #20]	; (8003388 <printf_sparse_metadata+0xa2>)
 8003372:	f00d fbbd 	bl	8010af0 <__aeabi_fmul>
 8003376:	f00e f8fb 	bl	8011570 <__aeabi_f2uiz>
 800337a:	0001      	movs	r1, r0
 800337c:	4809      	ldr	r0, [pc, #36]	; (80033a4 <printf_sparse_metadata+0xbe>)
 800337e:	f012 fcb7 	bl	8015cf0 <__wrap_printf>
 8003382:	e7d4      	b.n	800332e <printf_sparse_metadata+0x48>
 8003384:	0801d353 	.word	0x0801d353
 8003388:	447a0000 	.word	0x447a0000
 800338c:	0801d36c 	.word	0x0801d36c
 8003390:	2000018c 	.word	0x2000018c
 8003394:	0801d37b 	.word	0x0801d37b
 8003398:	0801d3a1 	.word	0x0801d3a1
 800339c:	0801d3b3 	.word	0x0801d3b3
 80033a0:	0801d3c8 	.word	0x0801d3c8
 80033a4:	0801d38b 	.word	0x0801d38b

080033a8 <MX_DMA_Init>:
{
 80033a8:	b500      	push	{lr}
 80033aa:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <MX_DMA_Init+0x3c>)
 80033ae:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80033b0:	2301      	movs	r3, #1
 80033b2:	4319      	orrs	r1, r3
 80033b4:	6391      	str	r1, [r2, #56]	; 0x38
 80033b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033b8:	4013      	ands	r3, r2
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2009      	movs	r0, #9
 80033c4:	f00b fa62 	bl	800e88c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033c8:	2009      	movs	r0, #9
 80033ca:	f00b fa53 	bl	800e874 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2100      	movs	r1, #0
 80033d2:	200a      	movs	r0, #10
 80033d4:	f00b fa5a 	bl	800e88c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80033d8:	200a      	movs	r0, #10
 80033da:	f00b fa4b 	bl	800e874 <HAL_NVIC_EnableIRQ>
}
 80033de:	b003      	add	sp, #12
 80033e0:	bd00      	pop	{pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40021000 	.word	0x40021000

080033e8 <MX_GPIO_Init>:
{
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	46d6      	mov	lr, sl
 80033ec:	b500      	push	{lr}
 80033ee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	2214      	movs	r2, #20
 80033f2:	2100      	movs	r1, #0
 80033f4:	a803      	add	r0, sp, #12
 80033f6:	f010 fc23 	bl	8013c40 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <MX_GPIO_Init+0x118>)
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	2601      	movs	r6, #1
 8003400:	4332      	orrs	r2, r6
 8003402:	635a      	str	r2, [r3, #52]	; 0x34
 8003404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003406:	4032      	ands	r2, r6
 8003408:	9201      	str	r2, [sp, #4]
 800340a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800340e:	2702      	movs	r7, #2
 8003410:	433a      	orrs	r2, r7
 8003412:	635a      	str	r2, [r3, #52]	; 0x34
 8003414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003416:	403b      	ands	r3, r7
 8003418:	9302      	str	r3, [sp, #8]
 800341a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, MCU_INT_Pin|A111_ENABLE_Pin, GPIO_PIN_RESET);
 800341c:	2188      	movs	r1, #136	; 0x88
 800341e:	2200      	movs	r2, #0
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	20a0      	movs	r0, #160	; 0xa0
 8003424:	05c0      	lsls	r0, r0, #23
 8003426:	f00c f969 	bl	800f6fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, A111_CS_N_Pin|A111_CTRL_Pin|PS_ENABLE_Pin, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	4935      	ldr	r1, [pc, #212]	; (8003504 <MX_GPIO_Init+0x11c>)
 800342e:	4836      	ldr	r0, [pc, #216]	; (8003508 <MX_GPIO_Init+0x120>)
 8003430:	f00c f964 	bl	800f6fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PMU_ENABLE_GPIO_Port, PMU_ENABLE_Pin, GPIO_PIN_SET);
 8003434:	2201      	movs	r2, #1
 8003436:	2102      	movs	r1, #2
 8003438:	4833      	ldr	r0, [pc, #204]	; (8003508 <MX_GPIO_Init+0x120>)
 800343a:	f00c f95f 	bl	800f6fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 800343e:	2503      	movs	r5, #3
 8003440:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003442:	2400      	movs	r4, #0
 8003444:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003446:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	a903      	add	r1, sp, #12
 800344a:	20a0      	movs	r0, #160	; 0xa0
 800344c:	05c0      	lsls	r0, r0, #23
 800344e:	f00c f9dd 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 8003452:	2310      	movs	r3, #16
 8003454:	469a      	mov	sl, r3
 8003456:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003458:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 800345e:	a903      	add	r1, sp, #12
 8003460:	20a0      	movs	r0, #160	; 0xa0
 8003462:	05c0      	lsls	r0, r0, #23
 8003464:	f00c f9d2 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <MX_GPIO_Init+0x124>)
 800346a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003470:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003472:	a903      	add	r1, sp, #12
 8003474:	4824      	ldr	r0, [pc, #144]	; (8003508 <MX_GPIO_Init+0x120>)
 8003476:	f00c f9c9 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 800347a:	23c0      	movs	r3, #192	; 0xc0
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003480:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003482:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003484:	a903      	add	r1, sp, #12
 8003486:	4820      	ldr	r0, [pc, #128]	; (8003508 <MX_GPIO_Init+0x120>)
 8003488:	f00c f9c0 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003492:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003498:	a903      	add	r1, sp, #12
 800349a:	20a0      	movs	r0, #160	; 0xa0
 800349c:	05c0      	lsls	r0, r0, #23
 800349e:	f00c f9b5 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 80034a2:	2308      	movs	r3, #8
 80034a4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_GPIO_Init+0x128>)
 80034a8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 80034ac:	a903      	add	r1, sp, #12
 80034ae:	4816      	ldr	r0, [pc, #88]	; (8003508 <MX_GPIO_Init+0x120>)
 80034b0:	f00c f9ac 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 80034b4:	4653      	mov	r3, sl
 80034b6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b8:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 80034be:	a903      	add	r1, sp, #12
 80034c0:	4811      	ldr	r0, [pc, #68]	; (8003508 <MX_GPIO_Init+0x120>)
 80034c2:	f00c f9a3 	bl	800f80c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 80034c6:	2320      	movs	r3, #32
 80034c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <MX_GPIO_Init+0x12c>)
 80034cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034ce:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 80034d0:	a903      	add	r1, sp, #12
 80034d2:	480d      	ldr	r0, [pc, #52]	; (8003508 <MX_GPIO_Init+0x120>)
 80034d4:	f00c f99a 	bl	800f80c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	2006      	movs	r0, #6
 80034de:	f00b f9d5 	bl	800e88c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80034e2:	2006      	movs	r0, #6
 80034e4:	f00b f9c6 	bl	800e874 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2007      	movs	r0, #7
 80034ee:	f00b f9cd 	bl	800e88c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80034f2:	2007      	movs	r0, #7
 80034f4:	f00b f9be 	bl	800e874 <HAL_NVIC_EnableIRQ>
}
 80034f8:	b008      	add	sp, #32
 80034fa:	bc04      	pop	{r2}
 80034fc:	4692      	mov	sl, r2
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	40021000 	.word	0x40021000
 8003504:	00000211 	.word	0x00000211
 8003508:	50000400 	.word	0x50000400
 800350c:	00000203 	.word	0x00000203
 8003510:	10110000 	.word	0x10110000
 8003514:	10310000 	.word	0x10310000

08003518 <MX_USART2_UART_Init>:
{
 8003518:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800351a:	4c10      	ldr	r4, [pc, #64]	; (800355c <MX_USART2_UART_Init+0x44>)
 800351c:	4b10      	ldr	r3, [pc, #64]	; (8003560 <MX_USART2_UART_Init+0x48>)
 800351e:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 8003520:	23e1      	movs	r3, #225	; 0xe1
 8003522:	031b      	lsls	r3, r3, #12
 8003524:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003526:	2300      	movs	r3, #0
 8003528:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800352a:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800352c:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800352e:	220c      	movs	r2, #12
 8003530:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003532:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003534:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003536:	6223      	str	r3, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003538:	6263      	str	r3, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800353a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800353c:	0020      	movs	r0, r4
 800353e:	f00a fad7 	bl	800daf0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003542:	2100      	movs	r1, #0
 8003544:	0020      	movs	r0, r4
 8003546:	f009 fe51 	bl	800d1ec <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800354a:	2100      	movs	r1, #0
 800354c:	0020      	movs	r0, r4
 800354e:	f009 fe27 	bl	800d1a0 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003552:	0020      	movs	r0, r4
 8003554:	f009 fe6e 	bl	800d234 <HAL_UARTEx_DisableFifoMode>
}
 8003558:	bd10      	pop	{r4, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	20000638 	.word	0x20000638
 8003560:	40004400 	.word	0x40004400

08003564 <MX_USART1_UART_Init>:
{
 8003564:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8003566:	4c10      	ldr	r4, [pc, #64]	; (80035a8 <MX_USART1_UART_Init+0x44>)
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <MX_USART1_UART_Init+0x48>)
 800356a:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
 800356c:	6060      	str	r0, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800356e:	2300      	movs	r3, #0
 8003570:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003572:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003574:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003576:	220c      	movs	r2, #12
 8003578:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800357a:	22c0      	movs	r2, #192	; 0xc0
 800357c:	0092      	lsls	r2, r2, #2
 800357e:	61a2      	str	r2, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003580:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003582:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003584:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003586:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003588:	0020      	movs	r0, r4
 800358a:	f00a fab1 	bl	800daf0 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800358e:	2100      	movs	r1, #0
 8003590:	0020      	movs	r0, r4
 8003592:	f009 fe2b 	bl	800d1ec <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003596:	2100      	movs	r1, #0
 8003598:	0020      	movs	r0, r4
 800359a:	f009 fe01 	bl	800d1a0 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800359e:	0020      	movs	r0, r4
 80035a0:	f009 fe48 	bl	800d234 <HAL_UARTEx_DisableFifoMode>
}
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	2000054c 	.word	0x2000054c
 80035ac:	40013800 	.word	0x40013800

080035b0 <changeUART1baud>:
void changeUART1baud(uint32_t baudrate){
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	0005      	movs	r5, r0
	HAL_UART_DeInit(&huart1);
 80035b4:	4c06      	ldr	r4, [pc, #24]	; (80035d0 <changeUART1baud+0x20>)
 80035b6:	0020      	movs	r0, r4
 80035b8:	f00a f81a 	bl	800d5f0 <HAL_UART_DeInit>
	MX_USART1_UART_Init(baudrate);
 80035bc:	0028      	movs	r0, r5
 80035be:	f7ff ffd1 	bl	8003564 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 80035c2:	4904      	ldr	r1, [pc, #16]	; (80035d4 <changeUART1baud+0x24>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	3168      	adds	r1, #104	; 0x68
 80035c8:	0020      	movs	r0, r4
 80035ca:	f009 fef7 	bl	800d3bc <HAL_UART_Receive_IT>
}
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	2000054c 	.word	0x2000054c
 80035d4:	2000018c 	.word	0x2000018c

080035d8 <MX_SPI1_Init>:
{
 80035d8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80035da:	480f      	ldr	r0, [pc, #60]	; (8003618 <MX_SPI1_Init+0x40>)
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <MX_SPI1_Init+0x44>)
 80035de:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035e0:	2382      	movs	r3, #130	; 0x82
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035e6:	2300      	movs	r3, #0
 80035e8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035ea:	22e0      	movs	r2, #224	; 0xe0
 80035ec:	00d2      	lsls	r2, r2, #3
 80035ee:	6342      	str	r2, [r0, #52]	; 0x34
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035f2:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035fa:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035fc:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035fe:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003600:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.CRCPolynomial = 7;
 8003602:	3afa      	subs	r2, #250	; 0xfa
 8003604:	3aff      	subs	r2, #255	; 0xff
 8003606:	6542      	str	r2, [r0, #84]	; 0x54
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003608:	6583      	str	r3, [r0, #88]	; 0x58
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800360a:	3308      	adds	r3, #8
 800360c:	65c3      	str	r3, [r0, #92]	; 0x5c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800360e:	3028      	adds	r0, #40	; 0x28
 8003610:	f00a f80d 	bl	800d62e <HAL_SPI_Init>
}
 8003614:	bd10      	pop	{r4, pc}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	2000020c 	.word	0x2000020c
 800361c:	40013000 	.word	0x40013000

08003620 <acc_integration_disable_wake_up>:
	}
}


static void acc_integration_disable_wake_up(void)
{
 8003620:	b510      	push	{r4, lr}
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 8003622:	4802      	ldr	r0, [pc, #8]	; (800362c <acc_integration_disable_wake_up+0xc>)
 8003624:	3060      	adds	r0, #96	; 0x60
 8003626:	f00a fd53 	bl	800e0d0 <HAL_RTCEx_DeactivateWakeUpTimer>
	{
		Error_Handler();
	}
}
 800362a:	bd10      	pop	{r4, pc}
 800362c:	2000010c 	.word	0x2000010c

08003630 <acc_integration_enable_wake_up>:
{
 8003630:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <acc_integration_enable_wake_up+0x48>)
 8003634:	2200      	movs	r2, #0
 8003636:	731a      	strb	r2, [r3, #12]
	if (time_usec > 30000000)
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <acc_integration_enable_wake_up+0x4c>)
 800363a:	4298      	cmp	r0, r3
 800363c:	d909      	bls.n	8003652 <acc_integration_enable_wake_up+0x22>
		wakeup_counter = (time_usec / 1000000) - 1;
 800363e:	4910      	ldr	r1, [pc, #64]	; (8003680 <acc_integration_enable_wake_up+0x50>)
 8003640:	f00d fd88 	bl	8011154 <__udivsi3>
 8003644:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_CK_SPRE_16BITS;
 8003646:	2204      	movs	r2, #4
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 8003648:	480e      	ldr	r0, [pc, #56]	; (8003684 <acc_integration_enable_wake_up+0x54>)
 800364a:	3060      	adds	r0, #96	; 0x60
 800364c:	f00a fd86 	bl	800e15c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 8003650:	bd10      	pop	{r4, pc}
	else if (time_usec > 100000)
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <acc_integration_enable_wake_up+0x58>)
 8003654:	4298      	cmp	r0, r3
 8003656:	d907      	bls.n	8003668 <acc_integration_enable_wake_up+0x38>
		wakeup_counter = (time_usec * 2 / 1000) - 1;
 8003658:	0040      	lsls	r0, r0, #1
 800365a:	21fa      	movs	r1, #250	; 0xfa
 800365c:	0089      	lsls	r1, r1, #2
 800365e:	f00d fd79 	bl	8011154 <__udivsi3>
 8003662:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV16;
 8003664:	2200      	movs	r2, #0
 8003666:	e7ef      	b.n	8003648 <acc_integration_enable_wake_up+0x18>
		wakeup_counter = (time_usec * 16 / 1000) - 1;
 8003668:	0100      	lsls	r0, r0, #4
 800366a:	21fa      	movs	r1, #250	; 0xfa
 800366c:	0089      	lsls	r1, r1, #2
 800366e:	f00d fd71 	bl	8011154 <__udivsi3>
 8003672:	1e41      	subs	r1, r0, #1
		wakeup_clock   = RTC_WAKEUPCLOCK_RTCCLK_DIV2;
 8003674:	2203      	movs	r2, #3
 8003676:	e7e7      	b.n	8003648 <acc_integration_enable_wake_up+0x18>
 8003678:	2000028c 	.word	0x2000028c
 800367c:	01c9c380 	.word	0x01c9c380
 8003680:	000f4240 	.word	0x000f4240
 8003684:	2000010c 	.word	0x2000010c
 8003688:	000186a0 	.word	0x000186a0

0800368c <acc_integration_sleep_us>:
	acc_integration_sleep_us(time_msec * 1000);
}


void acc_integration_sleep_us(uint32_t time_usec)
{
 800368c:	b510      	push	{r4, lr}
	acc_integration_enable_wake_up(time_usec);
 800368e:	f7ff ffcf 	bl	8003630 <acc_integration_enable_wake_up>
 8003692:	e004      	b.n	800369e <acc_integration_sleep_us+0x12>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003694:	b662      	cpsie	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003696:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800369a:	f3bf 8f6f 	isb	sy

	while (!rtc_wakeup_triggered)
 800369e:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <acc_integration_sleep_us+0x3c>)
 80036a0:	7b1b      	ldrb	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <acc_integration_sleep_us+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 80036a6:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 80036a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036ac:	f3bf 8f6f 	isb	sy
	{
		// Turn off interrupts
		disable_interrupts();

		if (!rtc_wakeup_triggered)
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <acc_integration_sleep_us+0x3c>)
 80036b2:	7b1b      	ldrb	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ed      	bne.n	8003694 <acc_integration_sleep_us+0x8>
		{
			__WFI();
 80036b8:	bf30      	wfi
 80036ba:	e7eb      	b.n	8003694 <acc_integration_sleep_us+0x8>

		// Enable interrupt again, the ISR will execute directly after this
		enable_interrupts();
	}

	rtc_wakeup_triggered = false;
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <acc_integration_sleep_us+0x3c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	731a      	strb	r2, [r3, #12]

	acc_integration_disable_wake_up();
 80036c2:	f7ff ffad 	bl	8003620 <acc_integration_disable_wake_up>
}
 80036c6:	bd10      	pop	{r4, pc}
 80036c8:	2000028c 	.word	0x2000028c

080036cc <acc_hal_integration_sensor_power_off>:
{
 80036cc:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 80036ce:	4c0c      	ldr	r4, [pc, #48]	; (8003700 <acc_hal_integration_sensor_power_off+0x34>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	2101      	movs	r1, #1
 80036d4:	0020      	movs	r0, r4
 80036d6:	f00c f811 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_RESET);
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	20a0      	movs	r0, #160	; 0xa0
 80036de:	2200      	movs	r2, #0
 80036e0:	0049      	lsls	r1, r1, #1
 80036e2:	05c0      	lsls	r0, r0, #23
 80036e4:	f00c f80a 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
 80036e8:	2180      	movs	r1, #128	; 0x80
 80036ea:	2200      	movs	r2, #0
 80036ec:	0089      	lsls	r1, r1, #2
 80036ee:	0020      	movs	r0, r4
 80036f0:	f00c f804 	bl	800f6fc <HAL_GPIO_WritePin>
	acc_integration_sleep_us(2000);
 80036f4:	20fa      	movs	r0, #250	; 0xfa
 80036f6:	00c0      	lsls	r0, r0, #3
 80036f8:	f7ff ffc8 	bl	800368c <acc_integration_sleep_us>
}
 80036fc:	bd10      	pop	{r4, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	50000400 	.word	0x50000400

08003704 <acc_hal_integration_sensor_power_on>:
{
 8003704:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
 8003706:	4c0e      	ldr	r4, [pc, #56]	; (8003740 <acc_hal_integration_sensor_power_on+0x3c>)
 8003708:	2200      	movs	r2, #0
 800370a:	2110      	movs	r1, #16
 800370c:	0020      	movs	r0, r4
 800370e:	f00b fff5 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	2201      	movs	r2, #1
 8003716:	0089      	lsls	r1, r1, #2
 8003718:	0020      	movs	r0, r4
 800371a:	f00b ffef 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_ENABLE_GPIO_Port, A111_ENABLE_Pin, GPIO_PIN_SET);
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	20a0      	movs	r0, #160	; 0xa0
 8003722:	2201      	movs	r2, #1
 8003724:	0049      	lsls	r1, r1, #1
 8003726:	05c0      	lsls	r0, r0, #23
 8003728:	f00b ffe8 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 800372c:	2201      	movs	r2, #1
 800372e:	2101      	movs	r1, #1
 8003730:	0020      	movs	r0, r4
 8003732:	f00b ffe3 	bl	800f6fc <HAL_GPIO_WritePin>
	acc_integration_sleep_us(2000);
 8003736:	20fa      	movs	r0, #250	; 0xfa
 8003738:	00c0      	lsls	r0, r0, #3
 800373a:	f7ff ffa7 	bl	800368c <acc_integration_sleep_us>
}
 800373e:	bd10      	pop	{r4, pc}
 8003740:	50000400 	.word	0x50000400

08003744 <MX_RTC_Init>:
{
 8003744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003746:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8003748:	ad0b      	add	r5, sp, #44	; 0x2c
 800374a:	2214      	movs	r2, #20
 800374c:	2100      	movs	r1, #0
 800374e:	0028      	movs	r0, r5
 8003750:	f010 fa76 	bl	8013c40 <memset>
  RTC_DateTypeDef sDate = {0};
 8003754:	ae0a      	add	r6, sp, #40	; 0x28
 8003756:	2400      	movs	r4, #0
 8003758:	940a      	str	r4, [sp, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800375a:	2228      	movs	r2, #40	; 0x28
 800375c:	2100      	movs	r1, #0
 800375e:	4668      	mov	r0, sp
 8003760:	f010 fa6e 	bl	8013c40 <memset>
  hrtc.Instance = RTC;
 8003764:	4f23      	ldr	r7, [pc, #140]	; (80037f4 <MX_RTC_Init+0xb0>)
 8003766:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <MX_RTC_Init+0xb4>)
 8003768:	663b      	str	r3, [r7, #96]	; 0x60
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800376a:	66bc      	str	r4, [r7, #104]	; 0x68
  hrtc.Init.AsynchPrediv = 31;
 800376c:	231f      	movs	r3, #31
 800376e:	66fb      	str	r3, [r7, #108]	; 0x6c
  hrtc.Init.SynchPrediv = 999;
 8003770:	4b22      	ldr	r3, [pc, #136]	; (80037fc <MX_RTC_Init+0xb8>)
 8003772:	673b      	str	r3, [r7, #112]	; 0x70
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003774:	677c      	str	r4, [r7, #116]	; 0x74
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003776:	67bc      	str	r4, [r7, #120]	; 0x78
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003778:	67fc      	str	r4, [r7, #124]	; 0x7c
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	05d2      	lsls	r2, r2, #23
 8003780:	50fa      	str	r2, [r7, r3]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003782:	3304      	adds	r3, #4
 8003784:	50fc      	str	r4, [r7, r3]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003786:	3760      	adds	r7, #96	; 0x60
 8003788:	0038      	movs	r0, r7
 800378a:	f00a fe71 	bl	800e470 <HAL_RTC_Init>
  sTime.Hours = 0;
 800378e:	702c      	strb	r4, [r5, #0]
  sTime.Minutes = 0;
 8003790:	706c      	strb	r4, [r5, #1]
  sTime.Seconds = 0;
 8003792:	70ac      	strb	r4, [r5, #2]
  sTime.SubSeconds = 0;
 8003794:	606c      	str	r4, [r5, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003796:	60ec      	str	r4, [r5, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003798:	612c      	str	r4, [r5, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800379a:	2200      	movs	r2, #0
 800379c:	0029      	movs	r1, r5
 800379e:	0038      	movs	r0, r7
 80037a0:	f00a fe00 	bl	800e3a4 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80037a4:	2501      	movs	r5, #1
 80037a6:	7035      	strb	r5, [r6, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80037a8:	7075      	strb	r5, [r6, #1]
  sDate.Date = 1;
 80037aa:	70b5      	strb	r5, [r6, #2]
  sDate.Year = 0;
 80037ac:	70f4      	strb	r4, [r6, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80037ae:	2200      	movs	r2, #0
 80037b0:	0031      	movs	r1, r6
 80037b2:	0038      	movs	r0, r7
 80037b4:	f00a fda0 	bl	800e2f8 <HAL_RTC_SetDate>
  sAlarm.AlarmTime.Hours = 0;
 80037b8:	466b      	mov	r3, sp
 80037ba:	701c      	strb	r4, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80037bc:	705c      	strb	r4, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80037be:	709c      	strb	r4, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80037c0:	9401      	str	r4, [sp, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037c2:	9403      	str	r4, [sp, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037c4:	9404      	str	r4, [sp, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80037c6:	9405      	str	r4, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80037c8:	9406      	str	r4, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80037ca:	9407      	str	r4, [sp, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80037cc:	2320      	movs	r3, #32
 80037ce:	466a      	mov	r2, sp
 80037d0:	54d5      	strb	r5, [r2, r3]
  sAlarm.Alarm = RTC_ALARM_A;
 80037d2:	33e0      	adds	r3, #224	; 0xe0
 80037d4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80037d6:	2200      	movs	r2, #0
 80037d8:	4669      	mov	r1, sp
 80037da:	0038      	movs	r0, r7
 80037dc:	f00a ff10 	bl	800e600 <HAL_RTC_SetAlarm_IT>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80037e0:	2200      	movs	r2, #0
 80037e2:	4907      	ldr	r1, [pc, #28]	; (8003800 <MX_RTC_Init+0xbc>)
 80037e4:	0038      	movs	r0, r7
 80037e6:	f00a fcb9 	bl	800e15c <HAL_RTCEx_SetWakeUpTimer_IT>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 80037ea:	0038      	movs	r0, r7
 80037ec:	f00a fc70 	bl	800e0d0 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 80037f0:	b011      	add	sp, #68	; 0x44
 80037f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f4:	2000010c 	.word	0x2000010c
 80037f8:	40002800 	.word	0x40002800
 80037fc:	000003e7 	.word	0x000003e7
 8003800:	0000ffff 	.word	0x0000ffff

08003804 <MX_I2C1_Init>:
{
 8003804:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8003806:	4c0e      	ldr	r4, [pc, #56]	; (8003840 <MX_I2C1_Init+0x3c>)
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <MX_I2C1_Init+0x40>)
 800380a:	6123      	str	r3, [r4, #16]
  hi2c1.Init.Timing = 0x10707DBC;
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <MX_I2C1_Init+0x44>)
 800380e:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress1 = 164;
 8003810:	23a4      	movs	r3, #164	; 0xa4
 8003812:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003814:	3ba3      	subs	r3, #163	; 0xa3
 8003816:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	6223      	str	r3, [r4, #32]
  hi2c1.Init.OwnAddress2 = 0;
 800381c:	6263      	str	r3, [r4, #36]	; 0x24
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800381e:	62a3      	str	r3, [r4, #40]	; 0x28
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003820:	62e3      	str	r3, [r4, #44]	; 0x2c
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003822:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003824:	3410      	adds	r4, #16
 8003826:	0020      	movs	r0, r4
 8003828:	f00a f878 	bl	800d91c <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800382c:	2100      	movs	r1, #0
 800382e:	0020      	movs	r0, r4
 8003830:	f00a f810 	bl	800d854 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003834:	2100      	movs	r1, #0
 8003836:	0020      	movs	r0, r4
 8003838:	f009 ffe2 	bl	800d800 <HAL_I2CEx_ConfigDigitalFilter>
}
 800383c:	bd10      	pop	{r4, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	2000028c 	.word	0x2000028c
 8003844:	40005400 	.word	0x40005400
 8003848:	10707dbc 	.word	0x10707dbc

0800384c <SystemClock_Config>:
{
 800384c:	b570      	push	{r4, r5, r6, lr}
 800384e:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003850:	2238      	movs	r2, #56	; 0x38
 8003852:	2100      	movs	r1, #0
 8003854:	a812      	add	r0, sp, #72	; 0x48
 8003856:	f010 f9f3 	bl	8013c40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800385a:	2210      	movs	r2, #16
 800385c:	2100      	movs	r1, #0
 800385e:	a80e      	add	r0, sp, #56	; 0x38
 8003860:	f010 f9ee 	bl	8013c40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003864:	2234      	movs	r2, #52	; 0x34
 8003866:	2100      	movs	r1, #0
 8003868:	a801      	add	r0, sp, #4
 800386a:	f010 f9e9 	bl	8013c40 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800386e:	2680      	movs	r6, #128	; 0x80
 8003870:	00b6      	lsls	r6, r6, #2
 8003872:	0030      	movs	r0, r6
 8003874:	f00b f86e 	bl	800e954 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003878:	230a      	movs	r3, #10
 800387a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800387c:	33f6      	adds	r3, #246	; 0xf6
 800387e:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003880:	2400      	movs	r4, #0
 8003882:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003884:	3bc0      	subs	r3, #192	; 0xc0
 8003886:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003888:	3b3f      	subs	r3, #63	; 0x3f
 800388a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800388c:	2502      	movs	r5, #2
 800388e:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003890:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003892:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003894:	3307      	adds	r3, #7
 8003896:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	049b      	lsls	r3, r3, #18
 80038a2:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	059b      	lsls	r3, r3, #22
 80038a8:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038aa:	a812      	add	r0, sp, #72	; 0x48
 80038ac:	f00b fcb6 	bl	800f21c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b0:	2307      	movs	r3, #7
 80038b2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038b4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038b6:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038b8:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ba:	2102      	movs	r1, #2
 80038bc:	a80e      	add	r0, sp, #56	; 0x38
 80038be:	f00b fbe9 	bl	800f094 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80038c2:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SystemClock_Config+0x8c>)
 80038c4:	9301      	str	r3, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80038c6:	9402      	str	r4, [sp, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038c8:	9403      	str	r4, [sp, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038ca:	9405      	str	r4, [sp, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038cc:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ce:	a801      	add	r0, sp, #4
 80038d0:	f00b fabe 	bl	800ee50 <HAL_RCCEx_PeriphCLKConfig>
}
 80038d4:	b020      	add	sp, #128	; 0x80
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	00020043 	.word	0x00020043

080038dc <EnableBootLoader>:
{
 80038dc:	b500      	push	{lr}
 80038de:	b091      	sub	sp, #68	; 0x44
  FLASH_OBProgramInitTypeDef obInit = {0};
 80038e0:	2238      	movs	r2, #56	; 0x38
 80038e2:	2100      	movs	r1, #0
 80038e4:	a802      	add	r0, sp, #8
 80038e6:	f010 f9ab 	bl	8013c40 <memset>
  HAL_FLASHEx_OBGetConfig(&obInit);
 80038ea:	a802      	add	r0, sp, #8
 80038ec:	f00b f9b4 	bl	800ec58 <HAL_FLASHEx_OBGetConfig>
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 80038f0:	9b08      	ldr	r3, [sp, #32]
 80038f2:	22c0      	movs	r2, #192	; 0xc0
 80038f4:	0492      	lsls	r2, r2, #18
 80038f6:	4013      	ands	r3, r2
 80038f8:	2280      	movs	r2, #128	; 0x80
 80038fa:	0492      	lsls	r2, r2, #18
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <EnableBootLoader+0x56>
  printf("Enabling BOOT0\n");
 8003900:	4818      	ldr	r0, [pc, #96]	; (8003964 <EnableBootLoader+0x88>)
 8003902:	f012 f9e3 	bl	8015ccc <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT1;
 8003906:	9b08      	ldr	r3, [sp, #32]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <EnableBootLoader+0x8c>)
 800390c:	9a01      	ldr	r2, [sp, #4]
 800390e:	4013      	ands	r3, r2
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 8003910:	4a16      	ldr	r2, [pc, #88]	; (800396c <EnableBootLoader+0x90>)
 8003912:	4013      	ands	r3, r2
  obInit.USERConfig |= OB_BOOT1_SYSTEM;
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	0492      	lsls	r2, r2, #18
 8003918:	4313      	orrs	r3, r2
 800391a:	9308      	str	r3, [sp, #32]
  obInit.OptionType = OPTIONBYTE_USER;
 800391c:	2304      	movs	r3, #4
 800391e:	9302      	str	r3, [sp, #8]
  HAL_StatusTypeDef result = HAL_FLASH_Unlock();
 8003920:	f00b fa7e 	bl	800ee20 <HAL_FLASH_Unlock>
  if (result == HAL_OK)
 8003924:	2800      	cmp	r0, #0
 8003926:	d008      	beq.n	800393a <EnableBootLoader+0x5e>
  printf("BOOT0 enable failed\n");
 8003928:	4811      	ldr	r0, [pc, #68]	; (8003970 <EnableBootLoader+0x94>)
 800392a:	f012 f9cf 	bl	8015ccc <__wrap_puts>
}
 800392e:	b011      	add	sp, #68	; 0x44
 8003930:	bd00      	pop	{pc}
    printf("Boot config OK\n");
 8003932:	4810      	ldr	r0, [pc, #64]	; (8003974 <EnableBootLoader+0x98>)
 8003934:	f012 f9ca 	bl	8015ccc <__wrap_puts>
 8003938:	e7f9      	b.n	800392e <EnableBootLoader+0x52>
    result = HAL_FLASH_OB_Unlock();
 800393a:	f00b fa49 	bl	800edd0 <HAL_FLASH_OB_Unlock>
    if (result == HAL_OK)
 800393e:	2800      	cmp	r0, #0
 8003940:	d002      	beq.n	8003948 <EnableBootLoader+0x6c>
    HAL_FLASH_Lock();
 8003942:	f00b fa5d 	bl	800ee00 <HAL_FLASH_Lock>
 8003946:	e7ef      	b.n	8003928 <EnableBootLoader+0x4c>
      result = HAL_FLASHEx_OBProgram(&obInit);
 8003948:	a802      	add	r0, sp, #8
 800394a:	f00b f9b3 	bl	800ecb4 <HAL_FLASHEx_OBProgram>
      if (result == HAL_OK)
 800394e:	2800      	cmp	r0, #0
 8003950:	d002      	beq.n	8003958 <EnableBootLoader+0x7c>
      HAL_FLASH_OB_Lock();
 8003952:	f00b fa2d 	bl	800edb0 <HAL_FLASH_OB_Lock>
 8003956:	e7f4      	b.n	8003942 <EnableBootLoader+0x66>
        printf("Reset and reload\n");
 8003958:	4807      	ldr	r0, [pc, #28]	; (8003978 <EnableBootLoader+0x9c>)
 800395a:	f012 f9b7 	bl	8015ccc <__wrap_puts>
        HAL_FLASH_OB_Launch();
 800395e:	f00b fa1d 	bl	800ed9c <HAL_FLASH_OB_Launch>
 8003962:	e7f6      	b.n	8003952 <EnableBootLoader+0x76>
 8003964:	0801eb4c 	.word	0x0801eb4c
 8003968:	fdffffff 	.word	0xfdffffff
 800396c:	feffffff 	.word	0xfeffffff
 8003970:	0801eb70 	.word	0x0801eb70
 8003974:	0801eb3c 	.word	0x0801eb3c
 8003978:	0801eb5c 	.word	0x0801eb5c

0800397c <acc_integration_get_time>:
	}
}


uint32_t acc_integration_get_time(void)
{
 800397c:	b510      	push	{r4, lr}
	return HAL_GetTick();
 800397e:	f00a f843 	bl	800da08 <HAL_GetTick>
}
 8003982:	bd10      	pop	{r4, pc}

08003984 <get_rtc_tick>:
{
 8003984:	b510      	push	{r4, lr}
 8003986:	b086      	sub	sp, #24
	RTC_DateTypeDef rtc_date = { 0 };
 8003988:	2300      	movs	r3, #0
 800398a:	9305      	str	r3, [sp, #20]
	RTC_TimeTypeDef rtc_time = { 0 };
 800398c:	2214      	movs	r2, #20
 800398e:	2100      	movs	r1, #0
 8003990:	4668      	mov	r0, sp
 8003992:	f010 f955 	bl	8013c40 <memset>
	while ((hrtc.Instance->ICSR & RTC_ICSR_SHPF) != RESET)
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <get_rtc_tick+0x40>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	071b      	lsls	r3, r3, #28
 800399e:	d4fa      	bmi.n	8003996 <get_rtc_tick+0x12>
	if (HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN) != HAL_OK)
 80039a0:	4c08      	ldr	r4, [pc, #32]	; (80039c4 <get_rtc_tick+0x40>)
 80039a2:	3460      	adds	r4, #96	; 0x60
 80039a4:	2200      	movs	r2, #0
 80039a6:	4669      	mov	r1, sp
 80039a8:	0020      	movs	r0, r4
 80039aa:	f009 fefd 	bl	800d7a8 <HAL_RTC_GetTime>
	if (HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN) != HAL_OK)
 80039ae:	2200      	movs	r2, #0
 80039b0:	a905      	add	r1, sp, #20
 80039b2:	0020      	movs	r0, r4
 80039b4:	f009 fed3 	bl	800d75e <HAL_RTC_GetDate>
	return rtc_time_to_tick(&rtc_time);
 80039b8:	4668      	mov	r0, sp
 80039ba:	f7fd ffdf 	bl	800197c <rtc_time_to_tick>
}
 80039be:	b006      	add	sp, #24
 80039c0:	bd10      	pop	{r4, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	2000010c 	.word	0x2000010c

080039c8 <rtc_set_next_wakeup_time>:
}
 80039c8:	4770      	bx	lr

080039ca <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80039ca:	b40c      	push	{r2, r3}
 80039cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ce:	b0af      	sub	sp, #188	; 0xbc
 80039d0:	0006      	movs	r6, r0
 80039d2:	000d      	movs	r5, r1
 80039d4:	ab34      	add	r3, sp, #208	; 0xd0
 80039d6:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);
 80039d8:	9307      	str	r3, [sp, #28]

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80039da:	2196      	movs	r1, #150	; 0x96
 80039dc:	a808      	add	r0, sp, #32
 80039de:	f012 f9ab 	bl	8015d38 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 80039e2:	2895      	cmp	r0, #149	; 0x95
 80039e4:	dd0a      	ble.n	80039fc <acc_integration_log+0x32>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80039e6:	ab08      	add	r3, sp, #32
 80039e8:	222e      	movs	r2, #46	; 0x2e
 80039ea:	2192      	movs	r1, #146	; 0x92
 80039ec:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 80039ee:	3101      	adds	r1, #1
 80039f0:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 2] = '.';
 80039f2:	3101      	adds	r1, #1
 80039f4:	545a      	strb	r2, [r3, r1]
		log_buffer[LOG_BUFFER_MAX_SIZE - 1] = 0;
 80039f6:	3267      	adds	r2, #103	; 0x67
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]
	}

	uint32_t time_ms = acc_integration_get_time();
 80039fc:	f7ff ffbe 	bl	800397c <acc_integration_get_time>
 8003a00:	0004      	movs	r4, r0
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8003a02:	491a      	ldr	r1, [pc, #104]	; (8003a6c <acc_integration_log+0xa2>)
 8003a04:	f00d fba6 	bl	8011154 <__udivsi3>
 8003a08:	9004      	str	r0, [sp, #16]
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8003a0a:	4919      	ldr	r1, [pc, #100]	; (8003a70 <acc_integration_log+0xa6>)
 8003a0c:	0020      	movs	r0, r4
 8003a0e:	f00d fba1 	bl	8011154 <__udivsi3>
 8003a12:	213c      	movs	r1, #60	; 0x3c
 8003a14:	f00d fc24 	bl	8011260 <__aeabi_uidivmod>
 8003a18:	9105      	str	r1, [sp, #20]
	unsigned int seconds      = timestamp / 1000 % 60;
 8003a1a:	21fa      	movs	r1, #250	; 0xfa
 8003a1c:	0089      	lsls	r1, r1, #2
 8003a1e:	0020      	movs	r0, r4
 8003a20:	f00d fb98 	bl	8011154 <__udivsi3>
 8003a24:	213c      	movs	r1, #60	; 0x3c
 8003a26:	f00d fc1b 	bl	8011260 <__aeabi_uidivmod>
 8003a2a:	000f      	movs	r7, r1
	unsigned int milliseconds = timestamp % 1000;
 8003a2c:	21fa      	movs	r1, #250	; 0xfa
 8003a2e:	0089      	lsls	r1, r1, #2
 8003a30:	0020      	movs	r0, r4
 8003a32:	f00d fc15 	bl	8011260 <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8003a36:	2e04      	cmp	r6, #4
 8003a38:	d816      	bhi.n	8003a68 <acc_integration_log+0x9e>
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <acc_integration_log+0xaa>)
 8003a3c:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8003a3e:	aa08      	add	r2, sp, #32
 8003a40:	9203      	str	r2, [sp, #12]
 8003a42:	9502      	str	r5, [sp, #8]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	9100      	str	r1, [sp, #0]
 8003a48:	003b      	movs	r3, r7
 8003a4a:	9a05      	ldr	r2, [sp, #20]
 8003a4c:	9904      	ldr	r1, [sp, #16]
 8003a4e:	480a      	ldr	r0, [pc, #40]	; (8003a78 <acc_integration_log+0xae>)
 8003a50:	f012 f94e 	bl	8015cf0 <__wrap_printf>

	fflush(stdout);
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <acc_integration_log+0xb2>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6898      	ldr	r0, [r3, #8]
 8003a5a:	f00f ffe3 	bl	8013a24 <fflush>

	va_end(ap);
}
 8003a5e:	b02f      	add	sp, #188	; 0xbc
 8003a60:	bcf0      	pop	{r4, r5, r6, r7}
 8003a62:	bc08      	pop	{r3}
 8003a64:	b002      	add	sp, #8
 8003a66:	4718      	bx	r3
	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8003a68:	233f      	movs	r3, #63	; 0x3f
 8003a6a:	e7e8      	b.n	8003a3e <acc_integration_log+0x74>
 8003a6c:	0036ee80 	.word	0x0036ee80
 8003a70:	0000ea60 	.word	0x0000ea60
 8003a74:	0801eba8 	.word	0x0801eba8
 8003a78:	0801eb84 	.word	0x0801eb84
 8003a7c:	20000008 	.word	0x20000008

08003a80 <pulse_hibernate_pin>:
{
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	0005      	movs	r5, r0
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8003a84:	2400      	movs	r4, #0
 8003a86:	e017      	b.n	8003ab8 <pulse_hibernate_pin+0x38>
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_SET);
 8003a88:	2201      	movs	r2, #1
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	480c      	ldr	r0, [pc, #48]	; (8003ac0 <pulse_hibernate_pin+0x40>)
 8003a8e:	f00b fe35 	bl	800f6fc <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_SET)
 8003a92:	2110      	movs	r1, #16
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <pulse_hibernate_pin+0x40>)
 8003a96:	f00b fe37 	bl	800f708 <HAL_GPIO_ReadPin>
 8003a9a:	2801      	cmp	r0, #1
 8003a9c:	d1f4      	bne.n	8003a88 <pulse_hibernate_pin+0x8>
 8003a9e:	e004      	b.n	8003aaa <pulse_hibernate_pin+0x2a>
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <pulse_hibernate_pin+0x40>)
 8003aa6:	f00b fe29 	bl	800f6fc <HAL_GPIO_WritePin>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
 8003aaa:	2110      	movs	r1, #16
 8003aac:	4804      	ldr	r0, [pc, #16]	; (8003ac0 <pulse_hibernate_pin+0x40>)
 8003aae:	f00b fe2b 	bl	800f708 <HAL_GPIO_ReadPin>
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1f4      	bne.n	8003aa0 <pulse_hibernate_pin+0x20>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8003ab6:	3401      	adds	r4, #1
 8003ab8:	42ac      	cmp	r4, r5
 8003aba:	d3ea      	bcc.n	8003a92 <pulse_hibernate_pin+0x12>
}
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	50000400 	.word	0x50000400

08003ac4 <acc_hal_integration_sensor_hibernate_exit>:
{
 8003ac4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	2201      	movs	r2, #1
 8003aca:	0089      	lsls	r1, r1, #2
 8003acc:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <acc_hal_integration_sensor_hibernate_exit+0x24>)
 8003ace:	f00b fe15 	bl	800f6fc <HAL_GPIO_WritePin>
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8003ad2:	2003      	movs	r0, #3
 8003ad4:	f7ff ffd4 	bl	8003a80 <pulse_hibernate_pin>
	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 8003ad8:	20fa      	movs	r0, #250	; 0xfa
 8003ada:	00c0      	lsls	r0, r0, #3
 8003adc:	f7ff fdd6 	bl	800368c <acc_integration_sleep_us>
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8003ae0:	200a      	movs	r0, #10
 8003ae2:	f7ff ffcd 	bl	8003a80 <pulse_hibernate_pin>
}
 8003ae6:	bd10      	pop	{r4, pc}
 8003ae8:	50000400 	.word	0x50000400

08003aec <acc_hal_integration_sensor_hibernate_enter>:
{
 8003aec:	b510      	push	{r4, lr}
	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 8003aee:	200a      	movs	r0, #10
 8003af0:	f7ff ffc6 	bl	8003a80 <pulse_hibernate_pin>
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	2200      	movs	r2, #0
 8003af8:	0089      	lsls	r1, r1, #2
 8003afa:	4802      	ldr	r0, [pc, #8]	; (8003b04 <acc_hal_integration_sensor_hibernate_enter+0x18>)
 8003afc:	f00b fdfe 	bl	800f6fc <HAL_GPIO_WritePin>
}
 8003b00:	bd10      	pop	{r4, pc}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	50000400 	.word	0x50000400

08003b08 <acc_hal_integration_wait_for_sensor_interrupt>:
{
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	000d      	movs	r5, r1
	const uint32_t wait_begin_ms = HAL_GetTick();
 8003b0c:	f009 ff7c 	bl	800da08 <HAL_GetTick>
 8003b10:	0004      	movs	r4, r0
 8003b12:	e002      	b.n	8003b1a <acc_hal_integration_wait_for_sensor_interrupt+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8003b14:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
 8003b16:	f3bf 8f6f 	isb	sy
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	480d      	ldr	r0, [pc, #52]	; (8003b54 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 8003b1e:	f00b fdf3 	bl	800f708 <HAL_GPIO_ReadPin>
 8003b22:	2801      	cmp	r0, #1
 8003b24:	d00d      	beq.n	8003b42 <acc_hal_integration_wait_for_sensor_interrupt+0x3a>
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 8003b26:	f009 ff6f 	bl	800da08 <HAL_GetTick>
 8003b2a:	1b00      	subs	r0, r0, r4
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 8003b2c:	42a8      	cmp	r0, r5
 8003b2e:	d208      	bcs.n	8003b42 <acc_hal_integration_wait_for_sensor_interrupt+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003b30:	b672      	cpsid	i
		if (HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET)
 8003b32:	2108      	movs	r1, #8
 8003b34:	4807      	ldr	r0, [pc, #28]	; (8003b54 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 8003b36:	f00b fde7 	bl	800f708 <HAL_GPIO_ReadPin>
 8003b3a:	2801      	cmp	r0, #1
 8003b3c:	d0ea      	beq.n	8003b14 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
			__WFI();
 8003b3e:	bf30      	wfi
 8003b40:	e7e8      	b.n	8003b14 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 8003b42:	2108      	movs	r1, #8
 8003b44:	4803      	ldr	r0, [pc, #12]	; (8003b54 <acc_hal_integration_wait_for_sensor_interrupt+0x4c>)
 8003b46:	f00b fddf 	bl	800f708 <HAL_GPIO_ReadPin>
 8003b4a:	3801      	subs	r0, #1
 8003b4c:	4243      	negs	r3, r0
 8003b4e:	4158      	adcs	r0, r3
 8003b50:	b2c0      	uxtb	r0, r0
}
 8003b52:	bd70      	pop	{r4, r5, r6, pc}
 8003b54:	50000400 	.word	0x50000400

08003b58 <acc_hal_integration_sensor_transfer>:
{
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	000e      	movs	r6, r1
 8003b5e:	0014      	movs	r4, r2
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_RESET);
 8003b60:	4d0a      	ldr	r5, [pc, #40]	; (8003b8c <acc_hal_integration_sensor_transfer+0x34>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	2101      	movs	r1, #1
 8003b66:	0028      	movs	r0, r5
 8003b68:	f00b fdc8 	bl	800f6fc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8003b6c:	b2a3      	uxth	r3, r4
 8003b6e:	4808      	ldr	r0, [pc, #32]	; (8003b90 <acc_hal_integration_sensor_transfer+0x38>)
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <acc_hal_integration_sensor_transfer+0x3c>)
 8003b72:	9200      	str	r2, [sp, #0]
 8003b74:	0032      	movs	r2, r6
 8003b76:	0031      	movs	r1, r6
 8003b78:	3028      	adds	r0, #40	; 0x28
 8003b7a:	f00a f941 	bl	800de00 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(A111_CS_N_GPIO_Port, A111_CS_N_Pin, GPIO_PIN_SET);
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2101      	movs	r1, #1
 8003b82:	0028      	movs	r0, r5
 8003b84:	f00b fdba 	bl	800f6fc <HAL_GPIO_WritePin>
}
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	50000400 	.word	0x50000400
 8003b90:	2000020c 	.word	0x2000020c
 8003b94:	00001388 	.word	0x00001388

08003b98 <acc_assert_fail>:
 8003b98:	b513      	push	{r0, r1, r4, lr}
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <acc_assert_fail+0x14>)
 8003b9c:	9100      	str	r1, [sp, #0]
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003ba2:	4903      	ldr	r1, [pc, #12]	; (8003bb0 <acc_assert_fail+0x18>)
 8003ba4:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <acc_assert_fail+0x1c>)
 8003ba6:	2000      	movs	r0, #0
 8003ba8:	47a0      	blx	r4
 8003baa:	e7fe      	b.n	8003baa <acc_assert_fail+0x12>
 8003bac:	200005d8 	.word	0x200005d8
 8003bb0:	0801d3f2 	.word	0x0801d3f2
 8003bb4:	0801d3dd 	.word	0x0801d3dd

08003bb8 <acc_element_source_adc_produce>:
 8003bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bba:	4645      	mov	r5, r8
 8003bbc:	46de      	mov	lr, fp
 8003bbe:	4657      	mov	r7, sl
 8003bc0:	464e      	mov	r6, r9
 8003bc2:	b5e0      	push	{r5, r6, r7, lr}
 8003bc4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	0005      	movs	r5, r0
 8003bca:	2c00      	cmp	r4, #0
 8003bcc:	d100      	bne.n	8003bd0 <acc_element_source_adc_produce+0x18>
 8003bce:	e09d      	b.n	8003d0c <acc_element_source_adc_produce+0x154>
 8003bd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003bd2:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <acc_element_source_adc_produce+0x168>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	6a03      	ldr	r3, [r0, #32]
 8003bd8:	69a2      	ldr	r2, [r4, #24]
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	6943      	ldr	r3, [r0, #20]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	7866      	ldrb	r6, [r4, #1]
 8003be6:	69a3      	ldr	r3, [r4, #24]
 8003be8:	469a      	mov	sl, r3
 8003bea:	2e00      	cmp	r6, #0
 8003bec:	d000      	beq.n	8003bf0 <acc_element_source_adc_produce+0x38>
 8003bee:	e088      	b.n	8003d02 <acc_element_source_adc_produce+0x14a>
 8003bf0:	7823      	ldrb	r3, [r4, #0]
 8003bf2:	469b      	mov	fp, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d133      	bne.n	8003c60 <acc_element_source_adc_produce+0xa8>
 8003bf8:	0020      	movs	r0, r4
 8003bfa:	f7fc ff3f 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d027      	beq.n	8003c52 <acc_element_source_adc_produce+0x9a>
 8003c02:	0020      	movs	r0, r4
 8003c04:	2210      	movs	r2, #16
 8003c06:	2100      	movs	r1, #0
 8003c08:	3008      	adds	r0, #8
 8003c0a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8003c0c:	f010 f818 	bl	8013c40 <memset>
 8003c10:	0020      	movs	r0, r4
 8003c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c14:	0039      	movs	r1, r7
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	aa02      	add	r2, sp, #8
 8003c1a:	3018      	adds	r0, #24
 8003c1c:	4798      	blx	r3
 8003c1e:	ab02      	add	r3, sp, #8
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	60e0      	str	r0, [r4, #12]
 8003c24:	8163      	strh	r3, [r4, #10]
 8003c26:	aa02      	add	r2, sp, #8
 8003c28:	7892      	ldrb	r2, [r2, #2]
 8003c2a:	9904      	ldr	r1, [sp, #16]
 8003c2c:	7222      	strb	r2, [r4, #8]
 8003c2e:	4691      	mov	r9, r2
 8003c30:	aa02      	add	r2, sp, #8
 8003c32:	78d2      	ldrb	r2, [r2, #3]
 8003c34:	7262      	strb	r2, [r4, #9]
 8003c36:	4690      	mov	r8, r2
 8003c38:	aa02      	add	r2, sp, #8
 8003c3a:	7b17      	ldrb	r7, [r2, #12]
 8003c3c:	7427      	strb	r7, [r4, #16]
 8003c3e:	7912      	ldrb	r2, [r2, #4]
 8003c40:	6161      	str	r1, [r4, #20]
 8003c42:	7462      	strb	r2, [r4, #17]
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d163      	bne.n	8003d10 <acc_element_source_adc_produce+0x158>
 8003c48:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <acc_element_source_adc_produce+0x16c>)
 8003c4a:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <acc_element_source_adc_produce+0x170>)
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	4937      	ldr	r1, [pc, #220]	; (8003d2c <acc_element_source_adc_produce+0x174>)
 8003c50:	4798      	blx	r3
 8003c52:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <acc_element_source_adc_produce+0x16c>)
 8003c54:	4a36      	ldr	r2, [pc, #216]	; (8003d30 <acc_element_source_adc_produce+0x178>)
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	4936      	ldr	r1, [pc, #216]	; (8003d34 <acc_element_source_adc_produce+0x17c>)
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	4798      	blx	r3
 8003c5e:	e042      	b.n	8003ce6 <acc_element_source_adc_produce+0x12e>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d1ce      	bne.n	8003c02 <acc_element_source_adc_produce+0x4a>
 8003c64:	4b2f      	ldr	r3, [pc, #188]	; (8003d24 <acc_element_source_adc_produce+0x16c>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ca      	beq.n	8003c02 <acc_element_source_adc_produce+0x4a>
 8003c6c:	4650      	mov	r0, sl
 8003c6e:	4798      	blx	r3
 8003c70:	e7c7      	b.n	8003c02 <acc_element_source_adc_produce+0x4a>
 8003c72:	9801      	ldr	r0, [sp, #4]
 8003c74:	4298      	cmp	r0, r3
 8003c76:	d004      	beq.n	8003c82 <acc_element_source_adc_produce+0xca>
 8003c78:	21ca      	movs	r1, #202	; 0xca
 8003c7a:	482f      	ldr	r0, [pc, #188]	; (8003d38 <acc_element_source_adc_produce+0x180>)
 8003c7c:	31ff      	adds	r1, #255	; 0xff
 8003c7e:	f7ff ff8b 	bl	8003b98 <acc_assert_fail>
 8003c82:	0016      	movs	r6, r2
 8003c84:	2348      	movs	r3, #72	; 0x48
 8003c86:	4652      	mov	r2, sl
 8003c88:	4353      	muls	r3, r2
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <acc_element_source_adc_produce+0x184>)
 8003c8c:	3b48      	subs	r3, #72	; 0x48
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	001a      	movs	r2, r3
 8003c94:	3242      	adds	r2, #66	; 0x42
 8003c96:	7016      	strb	r6, [r2, #0]
 8003c98:	6459      	str	r1, [r3, #68]	; 0x44
 8003c9a:	465b      	mov	r3, fp
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d12a      	bne.n	8003cf6 <acc_element_source_adc_produce+0x13e>
 8003ca0:	4650      	mov	r0, sl
 8003ca2:	f7fc fedb 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	70e3      	strb	r3, [r4, #3]
 8003caa:	7863      	ldrb	r3, [r4, #1]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d105      	bne.n	8003cbc <acc_element_source_adc_produce+0x104>
 8003cb0:	9b01      	ldr	r3, [sp, #4]
 8003cb2:	9a00      	ldr	r2, [sp, #0]
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	f7fc fa3e 	bl	8000138 <acc_probes_execute_uint16>
 8003cbc:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8003cbe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	464a      	mov	r2, r9
 8003cc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	4642      	mov	r2, r8
 8003ccc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	d100      	bne.n	8003cd8 <acc_element_source_adc_produce+0x120>
 8003cd6:	003b      	movs	r3, r7
 8003cd8:	2601      	movs	r6, #1
 8003cda:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003cdc:	6828      	ldr	r0, [r5, #0]
 8003cde:	4033      	ands	r3, r6
 8003ce0:	7013      	strb	r3, [r2, #0]
 8003ce2:	6843      	ldr	r3, [r0, #4]
 8003ce4:	4798      	blx	r3
 8003ce6:	0030      	movs	r0, r6
 8003ce8:	b007      	add	sp, #28
 8003cea:	bc3c      	pop	{r2, r3, r4, r5}
 8003cec:	4690      	mov	r8, r2
 8003cee:	4699      	mov	r9, r3
 8003cf0:	46a2      	mov	sl, r4
 8003cf2:	46ab      	mov	fp, r5
 8003cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d1d7      	bne.n	8003caa <acc_element_source_adc_produce+0xf2>
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	f7fc fe4c 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 8003d00:	e7d3      	b.n	8003caa <acc_element_source_adc_produce+0xf2>
 8003d02:	2600      	movs	r6, #0
 8003d04:	0037      	movs	r7, r6
 8003d06:	46b0      	mov	r8, r6
 8003d08:	46b1      	mov	r9, r6
 8003d0a:	e7ce      	b.n	8003caa <acc_element_source_adc_produce+0xf2>
 8003d0c:	0026      	movs	r6, r4
 8003d0e:	e7ea      	b.n	8003ce6 <acc_element_source_adc_produce+0x12e>
 8003d10:	9e00      	ldr	r6, [sp, #0]
 8003d12:	4286      	cmp	r6, r0
 8003d14:	d0ad      	beq.n	8003c72 <acc_element_source_adc_produce+0xba>
 8003d16:	21e4      	movs	r1, #228	; 0xe4
 8003d18:	4807      	ldr	r0, [pc, #28]	; (8003d38 <acc_element_source_adc_produce+0x180>)
 8003d1a:	0049      	lsls	r1, r1, #1
 8003d1c:	f7ff ff3c 	bl	8003b98 <acc_assert_fail>
 8003d20:	51645c3c 	.word	0x51645c3c
 8003d24:	200005d8 	.word	0x200005d8
 8003d28:	0801d3fd 	.word	0x0801d3fd
 8003d2c:	0801ccaa 	.word	0x0801ccaa
 8003d30:	0801d444 	.word	0x0801d444
 8003d34:	0801d461 	.word	0x0801d461
 8003d38:	0801d415 	.word	0x0801d415
 8003d3c:	2000008c 	.word	0x2000008c

08003d40 <produce.lto_priv.163>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	0004      	movs	r4, r0
 8003d44:	3038      	adds	r0, #56	; 0x38
 8003d46:	f7ff ff37 	bl	8003bb8 <acc_element_source_adc_produce>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d10c      	bne.n	8003d68 <produce.lto_priv.163+0x28>
 8003d4e:	23e0      	movs	r3, #224	; 0xe0
 8003d50:	2201      	movs	r2, #1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	58e3      	ldr	r3, [r4, r3]
 8003d56:	6158      	str	r0, [r3, #20]
 8003d58:	7198      	strb	r0, [r3, #6]
 8003d5a:	715a      	strb	r2, [r3, #5]
 8003d5c:	23d2      	movs	r3, #210	; 0xd2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	18e0      	adds	r0, r4, r3
 8003d62:	3304      	adds	r3, #4
 8003d64:	58e3      	ldr	r3, [r4, r3]
 8003d66:	4798      	blx	r3
 8003d68:	bd10      	pop	{r4, pc}

08003d6a <produce.lto_priv.162>:
 8003d6a:	b510      	push	{r4, lr}
 8003d6c:	0004      	movs	r4, r0
 8003d6e:	3038      	adds	r0, #56	; 0x38
 8003d70:	f7ff ff22 	bl	8003bb8 <acc_element_source_adc_produce>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	d10b      	bne.n	8003d90 <produce.lto_priv.162+0x26>
 8003d78:	0023      	movs	r3, r4
 8003d7a:	33f0      	adds	r3, #240	; 0xf0
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	6158      	str	r0, [r3, #20]
 8003d82:	7198      	strb	r0, [r3, #6]
 8003d84:	0020      	movs	r0, r4
 8003d86:	34bc      	adds	r4, #188	; 0xbc
 8003d88:	715a      	strb	r2, [r3, #5]
 8003d8a:	30b8      	adds	r0, #184	; 0xb8
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	4798      	blx	r3
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <do_phase_compensation_q3_12>:
 8003d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d94:	4657      	mov	r7, sl
 8003d96:	4645      	mov	r5, r8
 8003d98:	46de      	mov	lr, fp
 8003d9a:	464e      	mov	r6, r9
 8003d9c:	b5e0      	push	{r5, r6, r7, lr}
 8003d9e:	4c64      	ldr	r4, [pc, #400]	; (8003f30 <do_phase_compensation_q3_12+0x19e>)
 8003da0:	0017      	movs	r7, r2
 8003da2:	44a5      	add	sp, r4
 8003da4:	9104      	str	r1, [sp, #16]
 8003da6:	4698      	mov	r8, r3
 8003da8:	2a7c      	cmp	r2, #124	; 0x7c
 8003daa:	d814      	bhi.n	8003dd6 <do_phase_compensation_q3_12+0x44>
 8003dac:	0093      	lsls	r3, r2, #2
 8003dae:	9302      	str	r3, [sp, #8]
 8003db0:	ac06      	add	r4, sp, #24
 8003db2:	3b06      	subs	r3, #6
 8003db4:	18e3      	adds	r3, r4, r3
 8003db6:	9303      	str	r3, [sp, #12]
 8003db8:	2300      	movs	r3, #0
 8003dba:	469b      	mov	fp, r3
 8003dbc:	9001      	str	r0, [sp, #4]
 8003dbe:	9b04      	ldr	r3, [sp, #16]
 8003dc0:	459b      	cmp	fp, r3
 8003dc2:	d10c      	bne.n	8003dde <do_phase_compensation_q3_12+0x4c>
 8003dc4:	2383      	movs	r3, #131	; 0x83
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	449d      	add	sp, r3
 8003dca:	bc3c      	pop	{r2, r3, r4, r5}
 8003dcc:	4690      	mov	r8, r2
 8003dce:	4699      	mov	r9, r3
 8003dd0:	46a2      	mov	sl, r4
 8003dd2:	46ab      	mov	fp, r5
 8003dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd6:	217d      	movs	r1, #125	; 0x7d
 8003dd8:	4856      	ldr	r0, [pc, #344]	; (8003f34 <do_phase_compensation_q3_12+0x1a2>)
 8003dda:	f7ff fedd 	bl	8003b98 <acc_assert_fail>
 8003dde:	9a02      	ldr	r2, [sp, #8]
 8003de0:	9901      	ldr	r1, [sp, #4]
 8003de2:	0020      	movs	r0, r4
 8003de4:	f012 fc4a 	bl	801667c <memcpy>
 8003de8:	a982      	add	r1, sp, #520	; 0x208
 8003dea:	468c      	mov	ip, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	1e78      	subs	r0, r7, #1
 8003df0:	0083      	lsls	r3, r0, #2
 8003df2:	4463      	add	r3, ip
 8003df4:	3bf1      	subs	r3, #241	; 0xf1
 8003df6:	3bff      	subs	r3, #255	; 0xff
 8003df8:	9206      	str	r2, [sp, #24]
 8003dfa:	2501      	movs	r5, #1
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	0022      	movs	r2, r4
 8003e00:	42af      	cmp	r7, r5
 8003e02:	d814      	bhi.n	8003e2e <do_phase_compensation_q3_12+0x9c>
 8003e04:	9a03      	ldr	r2, [sp, #12]
 8003e06:	3a04      	subs	r2, #4
 8003e08:	3801      	subs	r0, #1
 8003e0a:	d233      	bcs.n	8003e74 <do_phase_compensation_q3_12+0xe2>
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	9b02      	ldr	r3, [sp, #8]
 8003e10:	42ab      	cmp	r3, r5
 8003e12:	d14c      	bne.n	8003eae <do_phase_compensation_q3_12+0x11c>
 8003e14:	2200      	movs	r2, #0
 8003e16:	9901      	ldr	r1, [sp, #4]
 8003e18:	42aa      	cmp	r2, r5
 8003e1a:	d169      	bne.n	8003ef0 <do_phase_compensation_q3_12+0x15e>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	469c      	mov	ip, r3
 8003e20:	9b01      	ldr	r3, [sp, #4]
 8003e22:	44e3      	add	fp, ip
 8003e24:	469c      	mov	ip, r3
 8003e26:	4494      	add	ip, r2
 8003e28:	4663      	mov	r3, ip
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	e7c7      	b.n	8003dbe <do_phase_compensation_q3_12+0x2c>
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5e53      	ldrsh	r3, [r2, r1]
 8003e32:	3501      	adds	r5, #1
 8003e34:	469c      	mov	ip, r3
 8003e36:	2304      	movs	r3, #4
 8003e38:	5ed1      	ldrsh	r1, [r2, r3]
 8003e3a:	4663      	mov	r3, ip
 8003e3c:	1ac9      	subs	r1, r1, r3
 8003e3e:	4643      	mov	r3, r8
 8003e40:	4359      	muls	r1, r3
 8003e42:	17cb      	asrs	r3, r1, #31
 8003e44:	051b      	lsls	r3, r3, #20
 8003e46:	0d1b      	lsrs	r3, r3, #20
 8003e48:	185b      	adds	r3, r3, r1
 8003e4a:	131b      	asrs	r3, r3, #12
 8003e4c:	4463      	add	r3, ip
 8003e4e:	8093      	strh	r3, [r2, #4]
 8003e50:	2102      	movs	r1, #2
 8003e52:	5e53      	ldrsh	r3, [r2, r1]
 8003e54:	3204      	adds	r2, #4
 8003e56:	469c      	mov	ip, r3
 8003e58:	2302      	movs	r3, #2
 8003e5a:	5ed1      	ldrsh	r1, [r2, r3]
 8003e5c:	4663      	mov	r3, ip
 8003e5e:	1ac9      	subs	r1, r1, r3
 8003e60:	4643      	mov	r3, r8
 8003e62:	4359      	muls	r1, r3
 8003e64:	17cb      	asrs	r3, r1, #31
 8003e66:	051b      	lsls	r3, r3, #20
 8003e68:	0d1b      	lsrs	r3, r3, #20
 8003e6a:	185b      	adds	r3, r3, r1
 8003e6c:	131b      	asrs	r3, r3, #12
 8003e6e:	4463      	add	r3, ip
 8003e70:	8053      	strh	r3, [r2, #2]
 8003e72:	e7c5      	b.n	8003e00 <do_phase_compensation_q3_12+0x6e>
 8003e74:	2306      	movs	r3, #6
 8003e76:	5ed1      	ldrsh	r1, [r2, r3]
 8003e78:	2302      	movs	r3, #2
 8003e7a:	5ed5      	ldrsh	r5, [r2, r3]
 8003e7c:	4643      	mov	r3, r8
 8003e7e:	1a6d      	subs	r5, r5, r1
 8003e80:	435d      	muls	r5, r3
 8003e82:	17eb      	asrs	r3, r5, #31
 8003e84:	051b      	lsls	r3, r3, #20
 8003e86:	0d1b      	lsrs	r3, r3, #20
 8003e88:	195b      	adds	r3, r3, r5
 8003e8a:	131b      	asrs	r3, r3, #12
 8003e8c:	185b      	adds	r3, r3, r1
 8003e8e:	8053      	strh	r3, [r2, #2]
 8003e90:	2308      	movs	r3, #8
 8003e92:	5ed1      	ldrsh	r1, [r2, r3]
 8003e94:	2304      	movs	r3, #4
 8003e96:	5ed5      	ldrsh	r5, [r2, r3]
 8003e98:	4643      	mov	r3, r8
 8003e9a:	1a6d      	subs	r5, r5, r1
 8003e9c:	435d      	muls	r5, r3
 8003e9e:	17eb      	asrs	r3, r5, #31
 8003ea0:	051b      	lsls	r3, r3, #20
 8003ea2:	0d1b      	lsrs	r3, r3, #20
 8003ea4:	195b      	adds	r3, r3, r5
 8003ea6:	131b      	asrs	r3, r3, #12
 8003ea8:	185b      	adds	r3, r3, r1
 8003eaa:	8093      	strh	r3, [r2, #4]
 8003eac:	e7ab      	b.n	8003e06 <do_phase_compensation_q3_12+0x74>
 8003eae:	1962      	adds	r2, r4, r5
 8003eb0:	8850      	ldrh	r0, [r2, #2]
 8003eb2:	5b63      	ldrh	r3, [r4, r5]
 8003eb4:	0400      	lsls	r0, r0, #16
 8003eb6:	4318      	orrs	r0, r3
 8003eb8:	4692      	mov	sl, r2
 8003eba:	f00b ff7d 	bl	800fdb8 <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8003ebe:	4681      	mov	r9, r0
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d104      	bne.n	8003ece <do_phase_compensation_q3_12+0x13c>
 8003ec4:	4653      	mov	r3, sl
 8003ec6:	5360      	strh	r0, [r4, r5]
 8003ec8:	8058      	strh	r0, [r3, #2]
 8003eca:	3504      	adds	r5, #4
 8003ecc:	e79f      	b.n	8003e0e <do_phase_compensation_q3_12+0x7c>
 8003ece:	5f60      	ldrsh	r0, [r4, r5]
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	0300      	lsls	r0, r0, #12
 8003ed4:	f00d f9c8 	bl	8011268 <__divsi3>
 8003ed8:	4653      	mov	r3, sl
 8003eda:	5360      	strh	r0, [r4, r5]
 8003edc:	2002      	movs	r0, #2
 8003ede:	5e18      	ldrsh	r0, [r3, r0]
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	0300      	lsls	r0, r0, #12
 8003ee4:	4240      	negs	r0, r0
 8003ee6:	f00d f9bf 	bl	8011268 <__divsi3>
 8003eea:	4653      	mov	r3, sl
 8003eec:	8058      	strh	r0, [r3, #2]
 8003eee:	e7ec      	b.n	8003eca <do_phase_compensation_q3_12+0x138>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	5e0b      	ldrsh	r3, [r1, r0]
 8003ef4:	4699      	mov	r9, r3
 8003ef6:	5f13      	ldrsh	r3, [r2, r4]
 8003ef8:	2602      	movs	r6, #2
 8003efa:	5f88      	ldrsh	r0, [r1, r6]
 8003efc:	4682      	mov	sl, r0
 8003efe:	18a0      	adds	r0, r4, r2
 8003f00:	2602      	movs	r6, #2
 8003f02:	5f80      	ldrsh	r0, [r0, r6]
 8003f04:	3204      	adds	r2, #4
 8003f06:	4684      	mov	ip, r0
 8003f08:	4648      	mov	r0, r9
 8003f0a:	4358      	muls	r0, r3
 8003f0c:	4666      	mov	r6, ip
 8003f0e:	9005      	str	r0, [sp, #20]
 8003f10:	4650      	mov	r0, sl
 8003f12:	4370      	muls	r0, r6
 8003f14:	9e05      	ldr	r6, [sp, #20]
 8003f16:	1a30      	subs	r0, r6, r0
 8003f18:	1300      	asrs	r0, r0, #12
 8003f1a:	8008      	strh	r0, [r1, #0]
 8003f1c:	4650      	mov	r0, sl
 8003f1e:	4666      	mov	r6, ip
 8003f20:	4343      	muls	r3, r0
 8003f22:	4648      	mov	r0, r9
 8003f24:	4370      	muls	r0, r6
 8003f26:	181b      	adds	r3, r3, r0
 8003f28:	131b      	asrs	r3, r3, #12
 8003f2a:	804b      	strh	r3, [r1, #2]
 8003f2c:	3104      	adds	r1, #4
 8003f2e:	e773      	b.n	8003e18 <do_phase_compensation_q3_12+0x86>
 8003f30:	fffffdf4 	.word	0xfffffdf4
 8003f34:	0801d476 	.word	0x0801d476

08003f38 <phase_compensate_q3_12_complex>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	1d83      	adds	r3, r0, #6
 8003f3c:	223e      	movs	r2, #62	; 0x3e
 8003f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8003f40:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003f42:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003f44:	6900      	ldr	r0, [r0, #16]
 8003f46:	f7ff ff24 	bl	8003d92 <do_phase_compensation_q3_12>
 8003f4a:	bd10      	pop	{r4, pc}

08003f4c <get_package_range_coarse_max>:
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	b570      	push	{r4, r5, r6, lr}
 8003f50:	33cc      	adds	r3, #204	; 0xcc
 8003f52:	881d      	ldrh	r5, [r3, #0]
 8003f54:	b086      	sub	sp, #24
 8003f56:	2d00      	cmp	r5, #0
 8003f58:	d104      	bne.n	8003f64 <get_package_range_coarse_max+0x18>
 8003f5a:	2158      	movs	r1, #88	; 0x58
 8003f5c:	480c      	ldr	r0, [pc, #48]	; (8003f90 <get_package_range_coarse_max+0x44>)
 8003f5e:	31ff      	adds	r1, #255	; 0xff
 8003f60:	f7ff fe1a 	bl	8003b98 <acc_assert_fail>
 8003f64:	0003      	movs	r3, r0
 8003f66:	2480      	movs	r4, #128	; 0x80
 8003f68:	33ce      	adds	r3, #206	; 0xce
 8003f6a:	4669      	mov	r1, sp
 8003f6c:	881e      	ldrh	r6, [r3, #0]
 8003f6e:	f00c fafd 	bl	801056c <acc_cpd_linear_sweep_get_info>
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	0029      	movs	r1, r5
 8003f76:	0124      	lsls	r4, r4, #4
 8003f78:	207c      	movs	r0, #124	; 0x7c
 8003f7a:	1ae4      	subs	r4, r4, r3
 8003f7c:	f00d f8ea 	bl	8011154 <__udivsi3>
 8003f80:	1ba4      	subs	r4, r4, r6
 8003f82:	0001      	movs	r1, r0
 8003f84:	0020      	movs	r0, r4
 8003f86:	f00d f8e5 	bl	8011154 <__udivsi3>
 8003f8a:	b006      	add	sp, #24
 8003f8c:	bd70      	pop	{r4, r5, r6, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	0801d17a 	.word	0x0801d17a

08003f94 <coarse_count_for_next_package>:
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	0004      	movs	r4, r0
 8003f98:	6940      	ldr	r0, [r0, #20]
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	32c2      	adds	r2, #194	; 0xc2
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	8812      	ldrh	r2, [r2, #0]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d002      	beq.n	8003fb0 <coarse_count_for_next_package+0x1c>
 8003faa:	f7ff ffcf 	bl	8003f4c <get_package_range_coarse_max>
 8003fae:	bd70      	pop	{r4, r5, r6, pc}
 8003fb0:	8965      	ldrh	r5, [r4, #10]
 8003fb2:	f7ff ffcb 	bl	8003f4c <get_package_range_coarse_max>
 8003fb6:	0001      	movs	r1, r0
 8003fb8:	0028      	movs	r0, r5
 8003fba:	f00d f951 	bl	8011260 <__aeabi_uidivmod>
 8003fbe:	1e08      	subs	r0, r1, #0
 8003fc0:	d1f5      	bne.n	8003fae <coarse_count_for_next_package+0x1a>
 8003fc2:	6960      	ldr	r0, [r4, #20]
 8003fc4:	e7f1      	b.n	8003faa <coarse_count_for_next_package+0x16>

08003fc6 <update_program.lto_priv.129>:
 8003fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc8:	4657      	mov	r7, sl
 8003fca:	464e      	mov	r6, r9
 8003fcc:	4645      	mov	r5, r8
 8003fce:	46de      	mov	lr, fp
 8003fd0:	b5e0      	push	{r5, r6, r7, lr}
 8003fd2:	6944      	ldr	r4, [r0, #20]
 8003fd4:	000f      	movs	r7, r1
 8003fd6:	0006      	movs	r6, r0
 8003fd8:	8981      	ldrh	r1, [r0, #12]
 8003fda:	2001      	movs	r0, #1
 8003fdc:	4288      	cmp	r0, r1
 8003fde:	419b      	sbcs	r3, r3
 8003fe0:	425b      	negs	r3, r3
 8003fe2:	4698      	mov	r8, r3
 8003fe4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	425a      	negs	r2, r3
 8003fea:	4153      	adcs	r3, r2
 8003fec:	22c0      	movs	r2, #192	; 0xc0
 8003fee:	4691      	mov	r9, r2
 8003ff0:	44a1      	add	r9, r4
 8003ff2:	464a      	mov	r2, r9
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	001d      	movs	r5, r3
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	433a      	orrs	r2, r7
 8003ffc:	4055      	eors	r5, r2
 8003ffe:	46aa      	mov	sl, r5
 8004000:	4281      	cmp	r1, r0
 8004002:	d808      	bhi.n	8004016 <update_program.lto_priv.129+0x50>
 8004004:	4293      	cmp	r3, r2
 8004006:	d136      	bne.n	8004076 <update_program.lto_priv.129+0xb0>
 8004008:	b005      	add	sp, #20
 800400a:	bc3c      	pop	{r2, r3, r4, r5}
 800400c:	4690      	mov	r8, r2
 800400e:	4699      	mov	r9, r3
 8004010:	46a2      	mov	sl, r4
 8004012:	46ab      	mov	fp, r5
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004016:	0025      	movs	r5, r4
 8004018:	35c2      	adds	r5, #194	; 0xc2
 800401a:	8828      	ldrh	r0, [r5, #0]
 800401c:	3001      	adds	r0, #1
 800401e:	b280      	uxth	r0, r0
 8004020:	f00d f91e 	bl	8011260 <__aeabi_uidivmod>
 8004024:	b28b      	uxth	r3, r1
 8004026:	469b      	mov	fp, r3
 8004028:	802b      	strh	r3, [r5, #0]
 800402a:	0020      	movs	r0, r4
 800402c:	2308      	movs	r3, #8
 800402e:	5ef5      	ldrsh	r5, [r6, r3]
 8004030:	f7ff ff8c 	bl	8003f4c <get_package_range_coarse_max>
 8004034:	465b      	mov	r3, fp
 8004036:	4358      	muls	r0, r3
 8004038:	1945      	adds	r5, r0, r5
 800403a:	0030      	movs	r0, r6
 800403c:	f7ff ffaa 	bl	8003f94 <coarse_count_for_next_package>
 8004040:	0023      	movs	r3, r4
 8004042:	33c8      	adds	r3, #200	; 0xc8
 8004044:	6018      	str	r0, [r3, #0]
 8004046:	466b      	mov	r3, sp
 8004048:	4642      	mov	r2, r8
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	705a      	strb	r2, [r3, #1]
 800404e:	4652      	mov	r2, sl
 8004050:	709a      	strb	r2, [r3, #2]
 8004052:	464b      	mov	r3, r9
 8004054:	3801      	subs	r0, #1
 8004056:	9001      	str	r0, [sp, #4]
 8004058:	9502      	str	r5, [sp, #8]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	4669      	mov	r1, sp
 800405e:	431f      	orrs	r7, r3
 8004060:	2301      	movs	r3, #1
 8004062:	6830      	ldr	r0, [r6, #0]
 8004064:	405f      	eors	r7, r3
 8004066:	9703      	str	r7, [sp, #12]
 8004068:	f7fd fcc6 	bl	80019f8 <acc_cpd_linear_sweep_update_program>
 800406c:	2800      	cmp	r0, #0
 800406e:	d0cb      	beq.n	8004008 <update_program.lto_priv.129+0x42>
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004074:	e7c8      	b.n	8004008 <update_program.lto_priv.129+0x42>
 8004076:	2000      	movs	r0, #0
 8004078:	0005      	movs	r5, r0
 800407a:	e7e4      	b.n	8004046 <update_program.lto_priv.129+0x80>

0800407c <acc_sensor_protocol_r2_is_sensor_running>:
 800407c:	b513      	push	{r0, r1, r4, lr}
 800407e:	466b      	mov	r3, sp
 8004080:	1d9c      	adds	r4, r3, #6
 8004082:	2300      	movs	r3, #0
 8004084:	0022      	movs	r2, r4
 8004086:	2111      	movs	r1, #17
 8004088:	8023      	strh	r3, [r4, #0]
 800408a:	f00b fec9 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800408e:	2301      	movs	r3, #1
 8004090:	8820      	ldrh	r0, [r4, #0]
 8004092:	0a80      	lsrs	r0, r0, #10
 8004094:	4018      	ands	r0, r3
 8004096:	bd16      	pop	{r1, r2, r4, pc}

08004098 <acc_sensor_protocol_r2_run_program>:
 8004098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800409a:	4d16      	ldr	r5, [pc, #88]	; (80040f4 <acc_sensor_protocol_r2_run_program+0x5c>)
 800409c:	0004      	movs	r4, r0
 800409e:	002b      	movs	r3, r5
 80040a0:	3330      	adds	r3, #48	; 0x30
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	000e      	movs	r6, r1
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d906      	bls.n	80040b8 <acc_sensor_protocol_r2_run_program+0x20>
 80040aa:	9100      	str	r1, [sp, #0]
 80040ac:	0003      	movs	r3, r0
 80040ae:	4a12      	ldr	r2, [pc, #72]	; (80040f8 <acc_sensor_protocol_r2_run_program+0x60>)
 80040b0:	4912      	ldr	r1, [pc, #72]	; (80040fc <acc_sensor_protocol_r2_run_program+0x64>)
 80040b2:	2004      	movs	r0, #4
 80040b4:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 80040b6:	47b8      	blx	r7
 80040b8:	0020      	movs	r0, r4
 80040ba:	f7ff ffdf 	bl	800407c <acc_sensor_protocol_r2_is_sensor_running>
 80040be:	1e02      	subs	r2, r0, #0
 80040c0:	d00a      	beq.n	80040d8 <acc_sensor_protocol_r2_run_program+0x40>
 80040c2:	0023      	movs	r3, r4
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <acc_sensor_protocol_r2_run_program+0x68>)
 80040c6:	490d      	ldr	r1, [pc, #52]	; (80040fc <acc_sensor_protocol_r2_run_program+0x64>)
 80040c8:	2000      	movs	r0, #0
 80040ca:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80040cc:	47a8      	blx	r5
 80040ce:	0020      	movs	r0, r4
 80040d0:	f00b fecd 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 80040d4:	2000      	movs	r0, #0
 80040d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040d8:	2110      	movs	r1, #16
 80040da:	0020      	movs	r0, r4
 80040dc:	f008 ff72 	bl	800cfc4 <acc_sensor_reg_write>
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	00d2      	lsls	r2, r2, #3
 80040e4:	0020      	movs	r0, r4
 80040e6:	4332      	orrs	r2, r6
 80040e8:	2110      	movs	r1, #16
 80040ea:	f008 ff6b 	bl	800cfc4 <acc_sensor_reg_write>
 80040ee:	2001      	movs	r0, #1
 80040f0:	e7f1      	b.n	80040d6 <acc_sensor_protocol_r2_run_program+0x3e>
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	200005d8 	.word	0x200005d8
 80040f8:	0801d4a9 	.word	0x0801d4a9
 80040fc:	0801d00f 	.word	0x0801d00f
 8004100:	0801d4cc 	.word	0x0801d4cc

08004104 <acc_rss_integration_mem_alloc_debug>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4d05      	ldr	r5, [pc, #20]	; (800411c <acc_rss_integration_mem_alloc_debug+0x18>)
 8004108:	68ab      	ldr	r3, [r5, #8]
 800410a:	4798      	blx	r3
 800410c:	1e04      	subs	r4, r0, #0
 800410e:	d103      	bne.n	8004118 <acc_rss_integration_mem_alloc_debug+0x14>
 8004110:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004112:	4a03      	ldr	r2, [pc, #12]	; (8004120 <acc_rss_integration_mem_alloc_debug+0x1c>)
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <acc_rss_integration_mem_alloc_debug+0x20>)
 8004116:	4798      	blx	r3
 8004118:	0020      	movs	r0, r4
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	200005d8 	.word	0x200005d8
 8004120:	0801d4fb 	.word	0x0801d4fb
 8004124:	0801e2f8 	.word	0x0801e2f8

08004128 <sparse_create_service>:
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800412a:	46de      	mov	lr, fp
 800412c:	4645      	mov	r5, r8
 800412e:	4657      	mov	r7, sl
 8004130:	464e      	mov	r6, r9
 8004132:	b5e0      	push	{r5, r6, r7, lr}
 8004134:	b0a5      	sub	sp, #148	; 0x94
 8004136:	4680      	mov	r8, r0
 8004138:	228c      	movs	r2, #140	; 0x8c
 800413a:	a801      	add	r0, sp, #4
 800413c:	000c      	movs	r4, r1
 800413e:	f012 fa9d 	bl	801667c <memcpy>
 8004142:	a801      	add	r0, sp, #4
 8004144:	f7fc ffaa 	bl	800109c <acc_service_configuration_check>
 8004148:	2800      	cmp	r0, #0
 800414a:	d101      	bne.n	8004150 <sparse_create_service+0x28>
 800414c:	2000      	movs	r0, #0
 800414e:	e014      	b.n	800417a <sparse_create_service+0x52>
 8004150:	a808      	add	r0, sp, #32
 8004152:	f7fc fd39 	bl	8000bc8 <configuration_is_valid>
 8004156:	2800      	cmp	r0, #0
 8004158:	d0f8      	beq.n	800414c <sparse_create_service+0x24>
 800415a:	a808      	add	r0, sp, #32
 800415c:	f7fc fcb4 	bl	8000ac8 <acc_base_configuration_check.part.6>
 8004160:	2800      	cmp	r0, #0
 8004162:	d0f3      	beq.n	800414c <sparse_create_service+0x24>
 8004164:	ab22      	add	r3, sp, #136	; 0x88
 8004166:	881d      	ldrh	r5, [r3, #0]
 8004168:	2d00      	cmp	r5, #0
 800416a:	d10d      	bne.n	8004188 <sparse_create_service+0x60>
 800416c:	4b73      	ldr	r3, [pc, #460]	; (800433c <sparse_create_service+0x214>)
 800416e:	0028      	movs	r0, r5
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4a73      	ldr	r2, [pc, #460]	; (8004340 <sparse_create_service+0x218>)
 8004174:	4973      	ldr	r1, [pc, #460]	; (8004344 <sparse_create_service+0x21c>)
 8004176:	4798      	blx	r3
 8004178:	0028      	movs	r0, r5
 800417a:	b025      	add	sp, #148	; 0x94
 800417c:	bc3c      	pop	{r2, r3, r4, r5}
 800417e:	4690      	mov	r8, r2
 8004180:	4699      	mov	r9, r3
 8004182:	46a2      	mov	sl, r4
 8004184:	46ab      	mov	fp, r5
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004188:	238a      	movs	r3, #138	; 0x8a
 800418a:	446b      	add	r3, sp
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d10a      	bne.n	80041a8 <sparse_create_service+0x80>
 8004192:	ab20      	add	r3, sp, #128	; 0x80
 8004194:	881b      	ldrh	r3, [r3, #0]
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	d906      	bls.n	80041a8 <sparse_create_service+0x80>
 800419a:	4b68      	ldr	r3, [pc, #416]	; (800433c <sparse_create_service+0x214>)
 800419c:	4a6a      	ldr	r2, [pc, #424]	; (8004348 <sparse_create_service+0x220>)
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	4968      	ldr	r1, [pc, #416]	; (8004344 <sparse_create_service+0x21c>)
 80041a2:	2000      	movs	r0, #0
 80041a4:	4798      	blx	r3
 80041a6:	e7d1      	b.n	800414c <sparse_create_service+0x24>
 80041a8:	4642      	mov	r2, r8
 80041aa:	7923      	ldrb	r3, [r4, #4]
 80041ac:	2010      	movs	r0, #16
 80041ae:	7213      	strb	r3, [r2, #8]
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <sparse_create_service+0x224>)
 80041b2:	22ec      	movs	r2, #236	; 0xec
 80041b4:	0019      	movs	r1, r3
 80041b6:	469b      	mov	fp, r3
 80041b8:	f008 fea4 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 80041bc:	0005      	movs	r5, r0
 80041be:	2090      	movs	r0, #144	; 0x90
 80041c0:	22ed      	movs	r2, #237	; 0xed
 80041c2:	4659      	mov	r1, fp
 80041c4:	0040      	lsls	r0, r0, #1
 80041c6:	f008 fe9d 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 80041ca:	0004      	movs	r4, r0
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	d001      	beq.n	80041d4 <sparse_create_service+0xac>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d10f      	bne.n	80041f4 <sparse_create_service+0xcc>
 80041d4:	0028      	movs	r0, r5
 80041d6:	f7fc fbfd 	bl	80009d4 <acc_rss_integration_mem_free>
 80041da:	0020      	movs	r0, r4
 80041dc:	f7fc fbfa 	bl	80009d4 <acc_rss_integration_mem_free>
 80041e0:	2500      	movs	r5, #0
 80041e2:	4643      	mov	r3, r8
 80041e4:	4642      	mov	r2, r8
 80041e6:	611d      	str	r5, [r3, #16]
 80041e8:	1e68      	subs	r0, r5, #1
 80041ea:	4185      	sbcs	r5, r0
 80041ec:	4b58      	ldr	r3, [pc, #352]	; (8004350 <sparse_create_service+0x228>)
 80041ee:	b2e8      	uxtb	r0, r5
 80041f0:	60d3      	str	r3, [r2, #12]
 80041f2:	e7c2      	b.n	800417a <sparse_create_service+0x52>
 80041f4:	2318      	movs	r3, #24
 80041f6:	469a      	mov	sl, r3
 80041f8:	6028      	str	r0, [r5, #0]
 80041fa:	4482      	add	sl, r0
 80041fc:	4640      	mov	r0, r8
 80041fe:	18c0      	adds	r0, r0, r3
 8004200:	33e4      	adds	r3, #228	; 0xe4
 8004202:	4699      	mov	r9, r3
 8004204:	44a1      	add	r9, r4
 8004206:	464b      	mov	r3, r9
 8004208:	4652      	mov	r2, sl
 800420a:	6760      	str	r0, [r4, #116]	; 0x74
 800420c:	a908      	add	r1, sp, #32
 800420e:	f7fd fce7 	bl	8001be0 <acc_sensor_manager_prepare_radar_engine>
 8004212:	464b      	mov	r3, r9
 8004214:	895a      	ldrh	r2, [r3, #10]
 8004216:	0023      	movs	r3, r4
 8004218:	3370      	adds	r3, #112	; 0x70
 800421a:	1e06      	subs	r6, r0, #0
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	d104      	bne.n	800422a <sparse_create_service+0x102>
 8004220:	0028      	movs	r0, r5
 8004222:	f7fc fc07 	bl	8000a34 <disassemble.lto_priv.158>
 8004226:	0035      	movs	r5, r6
 8004228:	e7db      	b.n	80041e2 <sparse_create_service+0xba>
 800422a:	464b      	mov	r3, r9
 800422c:	89db      	ldrh	r3, [r3, #14]
 800422e:	189b      	adds	r3, r3, r2
 8004230:	464a      	mov	r2, r9
 8004232:	8997      	ldrh	r7, [r2, #12]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	007f      	lsls	r7, r7, #1
 8004238:	429f      	cmp	r7, r3
 800423a:	d200      	bcs.n	800423e <sparse_create_service+0x116>
 800423c:	001f      	movs	r7, r3
 800423e:	a808      	add	r0, sp, #32
 8004240:	f7fc fcc2 	bl	8000bc8 <configuration_is_valid>
 8004244:	2600      	movs	r6, #0
 8004246:	42b0      	cmp	r0, r6
 8004248:	d001      	beq.n	800424e <sparse_create_service+0x126>
 800424a:	ab1d      	add	r3, sp, #116	; 0x74
 800424c:	881e      	ldrh	r6, [r3, #0]
 800424e:	42be      	cmp	r6, r7
 8004250:	d200      	bcs.n	8004254 <sparse_create_service+0x12c>
 8004252:	003e      	movs	r6, r7
 8004254:	2298      	movs	r2, #152	; 0x98
 8004256:	4659      	mov	r1, fp
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	0030      	movs	r0, r6
 800425c:	f7ff ff52 	bl	8004104 <acc_rss_integration_mem_alloc_debug>
 8004260:	464b      	mov	r3, r9
 8004262:	1e07      	subs	r7, r0, #0
 8004264:	61d8      	str	r0, [r3, #28]
 8004266:	d056      	beq.n	8004316 <sparse_create_service+0x1ee>
 8004268:	621e      	str	r6, [r3, #32]
 800426a:	0022      	movs	r2, r4
 800426c:	0026      	movs	r6, r4
 800426e:	1da3      	adds	r3, r4, #6
 8004270:	6623      	str	r3, [r4, #96]	; 0x60
 8004272:	1de3      	adds	r3, r4, #7
 8004274:	6663      	str	r3, [r4, #100]	; 0x64
 8004276:	3214      	adds	r2, #20
 8004278:	3305      	adds	r3, #5
 800427a:	3608      	adds	r6, #8
 800427c:	66a3      	str	r3, [r4, #104]	; 0x68
 800427e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8004280:	65e2      	str	r2, [r4, #92]	; 0x5c
 8004282:	65a4      	str	r4, [r4, #88]	; 0x58
 8004284:	66e6      	str	r6, [r4, #108]	; 0x6c
 8004286:	67d8      	str	r0, [r3, #124]	; 0x7c
 8004288:	1d23      	adds	r3, r4, #4
 800428a:	4699      	mov	r9, r3
 800428c:	4649      	mov	r1, r9
 800428e:	3388      	adds	r3, #136	; 0x88
 8004290:	6019      	str	r1, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
 8004294:	63d8      	str	r0, [r3, #60]	; 0x3c
 8004296:	665c      	str	r4, [r3, #100]	; 0x64
 8004298:	238c      	movs	r3, #140	; 0x8c
 800429a:	4f28      	ldr	r7, [pc, #160]	; (800433c <sparse_create_service+0x214>)
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	469b      	mov	fp, r3
 80042a0:	003b      	movs	r3, r7
 80042a2:	3330      	adds	r3, #48	; 0x30
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	44a3      	add	fp, r4
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d839      	bhi.n	8004320 <sparse_create_service+0x1f8>
 80042ac:	4652      	mov	r2, sl
 80042ae:	465b      	mov	r3, fp
 80042b0:	a908      	add	r1, sp, #32
 80042b2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042b4:	f7fc fd7a 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 80042b8:	4682      	mov	sl, r0
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d034      	beq.n	8004328 <sparse_create_service+0x200>
 80042be:	0023      	movs	r3, r4
 80042c0:	4a24      	ldr	r2, [pc, #144]	; (8004354 <sparse_create_service+0x22c>)
 80042c2:	33b0      	adds	r3, #176	; 0xb0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <sparse_create_service+0x230>)
 80042c8:	0020      	movs	r0, r4
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	464a      	mov	r2, r9
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <sparse_create_service+0x234>)
 80042d0:	3078      	adds	r0, #120	; 0x78
 80042d2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80042d4:	4b22      	ldr	r3, [pc, #136]	; (8004360 <sparse_create_service+0x238>)
 80042d6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <sparse_create_service+0x23c>)
 80042da:	4a23      	ldr	r2, [pc, #140]	; (8004368 <sparse_create_service+0x240>)
 80042dc:	67f3      	str	r3, [r6, #124]	; 0x7c
 80042de:	0023      	movs	r3, r4
 80042e0:	33b8      	adds	r3, #184	; 0xb8
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
 80042e4:	4a21      	ldr	r2, [pc, #132]	; (800436c <sparse_create_service+0x244>)
 80042e6:	605a      	str	r2, [r3, #4]
 80042e8:	4a21      	ldr	r2, [pc, #132]	; (8004370 <sparse_create_service+0x248>)
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	4a21      	ldr	r2, [pc, #132]	; (8004374 <sparse_create_service+0x24c>)
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80042f2:	67a3      	str	r3, [r4, #120]	; 0x78
 80042f4:	f7fb ffef 	bl	80002d6 <validate.lto_priv.92>
 80042f8:	1e06      	subs	r6, r0, #0
 80042fa:	d01a      	beq.n	8004332 <sparse_create_service+0x20a>
 80042fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80042fe:	34f4      	adds	r4, #244	; 0xf4
 8004300:	68c3      	ldr	r3, [r0, #12]
 8004302:	4798      	blx	r3
 8004304:	4643      	mov	r3, r8
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <sparse_create_service+0x250>)
 800430a:	606b      	str	r3, [r5, #4]
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <sparse_create_service+0x254>)
 800430e:	60ab      	str	r3, [r5, #8]
 8004310:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <sparse_create_service+0x258>)
 8004312:	60eb      	str	r3, [r5, #12]
 8004314:	e765      	b.n	80041e2 <sparse_create_service+0xba>
 8004316:	0028      	movs	r0, r5
 8004318:	f7fc fb8c 	bl	8000a34 <disassemble.lto_priv.158>
 800431c:	003d      	movs	r5, r7
 800431e:	e760      	b.n	80041e2 <sparse_create_service+0xba>
 8004320:	a808      	add	r0, sp, #32
 8004322:	f7fc fe15 	bl	8000f50 <acc_base_configuration_print.part.5>
 8004326:	e7c1      	b.n	80042ac <sparse_create_service+0x184>
 8004328:	0028      	movs	r0, r5
 800432a:	f7fc fb83 	bl	8000a34 <disassemble.lto_priv.158>
 800432e:	4655      	mov	r5, sl
 8004330:	e757      	b.n	80041e2 <sparse_create_service+0xba>
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <sparse_create_service+0x25c>)
 8004336:	4914      	ldr	r1, [pc, #80]	; (8004388 <sparse_create_service+0x260>)
 8004338:	4798      	blx	r3
 800433a:	e771      	b.n	8004220 <sparse_create_service+0xf8>
 800433c:	200005d8 	.word	0x200005d8
 8004340:	0801d509 	.word	0x0801d509
 8004344:	0801cf5c 	.word	0x0801cf5c
 8004348:	0801d539 	.word	0x0801d539
 800434c:	0801d564 	.word	0x0801d564
 8004350:	080010d1 	.word	0x080010d1
 8004354:	40400000 	.word	0x40400000
 8004358:	08001d45 	.word	0x08001d45
 800435c:	0800032d 	.word	0x0800032d
 8004360:	080002d7 	.word	0x080002d7
 8004364:	080008f7 	.word	0x080008f7
 8004368:	08001b91 	.word	0x08001b91
 800436c:	080001c5 	.word	0x080001c5
 8004370:	08000157 	.word	0x08000157
 8004374:	080001c3 	.word	0x080001c3
 8004378:	08003d6b 	.word	0x08003d6b
 800437c:	08001b17 	.word	0x08001b17
 8004380:	08000a35 	.word	0x08000a35
 8004384:	0801d58d 	.word	0x0801d58d
 8004388:	0801d5ad 	.word	0x0801d5ad

0800438c <envelope_create_service>:
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	46de      	mov	lr, fp
 8004390:	4657      	mov	r7, sl
 8004392:	464e      	mov	r6, r9
 8004394:	4645      	mov	r5, r8
 8004396:	b5e0      	push	{r5, r6, r7, lr}
 8004398:	b0a9      	sub	sp, #164	; 0xa4
 800439a:	2290      	movs	r2, #144	; 0x90
 800439c:	4682      	mov	sl, r0
 800439e:	a804      	add	r0, sp, #16
 80043a0:	000d      	movs	r5, r1
 80043a2:	f012 f96b 	bl	801667c <memcpy>
 80043a6:	a80b      	add	r0, sp, #44	; 0x2c
 80043a8:	f7fc fc44 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 80043ac:	0006      	movs	r6, r0
 80043ae:	a80b      	add	r0, sp, #44	; 0x2c
 80043b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80043b2:	f7fc fc09 	bl	8000bc8 <configuration_is_valid>
 80043b6:	2800      	cmp	r0, #0
 80043b8:	d006      	beq.n	80043c8 <envelope_create_service+0x3c>
 80043ba:	0030      	movs	r0, r6
 80043bc:	f00d faae 	bl	801191c <__aeabi_i2f>
 80043c0:	1c21      	adds	r1, r4, #0
 80043c2:	f00c fb95 	bl	8010af0 <__aeabi_fmul>
 80043c6:	9013      	str	r0, [sp, #76]	; 0x4c
 80043c8:	a804      	add	r0, sp, #16
 80043ca:	f7fc fe67 	bl	800109c <acc_service_configuration_check>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d101      	bne.n	80043d6 <envelope_create_service+0x4a>
 80043d2:	2000      	movs	r0, #0
 80043d4:	e009      	b.n	80043ea <envelope_create_service+0x5e>
 80043d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d10d      	bne.n	80043f8 <envelope_create_service+0x6c>
 80043dc:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <envelope_create_service+0x168>)
 80043de:	2000      	movs	r0, #0
 80043e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e2:	4a45      	ldr	r2, [pc, #276]	; (80044f8 <envelope_create_service+0x16c>)
 80043e4:	4945      	ldr	r1, [pc, #276]	; (80044fc <envelope_create_service+0x170>)
 80043e6:	4798      	blx	r3
 80043e8:	2000      	movs	r0, #0
 80043ea:	b029      	add	sp, #164	; 0xa4
 80043ec:	bc3c      	pop	{r2, r3, r4, r5}
 80043ee:	4690      	mov	r8, r2
 80043f0:	4699      	mov	r9, r3
 80043f2:	46a2      	mov	sl, r4
 80043f4:	46ab      	mov	fp, r5
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f8:	a80b      	add	r0, sp, #44	; 0x2c
 80043fa:	f7fc fbe5 	bl	8000bc8 <configuration_is_valid>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0e7      	beq.n	80043d2 <envelope_create_service+0x46>
 8004402:	a80b      	add	r0, sp, #44	; 0x2c
 8004404:	f7fc fb60 	bl	8000ac8 <acc_base_configuration_check.part.6>
 8004408:	2800      	cmp	r0, #0
 800440a:	d0e2      	beq.n	80043d2 <envelope_create_service+0x46>
 800440c:	a80b      	add	r0, sp, #44	; 0x2c
 800440e:	f7fc fc11 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8004412:	1e43      	subs	r3, r0, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b01      	cmp	r3, #1
 8004418:	d908      	bls.n	800442c <envelope_create_service+0xa0>
 800441a:	2804      	cmp	r0, #4
 800441c:	d006      	beq.n	800442c <envelope_create_service+0xa0>
 800441e:	4b35      	ldr	r3, [pc, #212]	; (80044f4 <envelope_create_service+0x168>)
 8004420:	4a37      	ldr	r2, [pc, #220]	; (8004500 <envelope_create_service+0x174>)
 8004422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004424:	4935      	ldr	r1, [pc, #212]	; (80044fc <envelope_create_service+0x170>)
 8004426:	2000      	movs	r0, #0
 8004428:	4798      	blx	r3
 800442a:	e7d2      	b.n	80043d2 <envelope_create_service+0x46>
 800442c:	a80b      	add	r0, sp, #44	; 0x2c
 800442e:	f7fc fbcb 	bl	8000bc8 <configuration_is_valid>
 8004432:	1e04      	subs	r4, r0, #0
 8004434:	d004      	beq.n	8004440 <envelope_create_service+0xb4>
 8004436:	aa04      	add	r2, sp, #16
 8004438:	236b      	movs	r3, #107	; 0x6b
 800443a:	4694      	mov	ip, r2
 800443c:	4463      	add	r3, ip
 800443e:	781c      	ldrb	r4, [r3, #0]
 8004440:	a80b      	add	r0, sp, #44	; 0x2c
 8004442:	f7fc fbc1 	bl	8000bc8 <configuration_is_valid>
 8004446:	2800      	cmp	r0, #0
 8004448:	d010      	beq.n	800446c <envelope_create_service+0xe0>
 800444a:	2c00      	cmp	r4, #0
 800444c:	d00e      	beq.n	800446c <envelope_create_service+0xe0>
 800444e:	ab11      	add	r3, sp, #68	; 0x44
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <envelope_create_service+0xe0>
 8004456:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <envelope_create_service+0x168>)
 8004458:	001a      	movs	r2, r3
 800445a:	3230      	adds	r2, #48	; 0x30
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	2a00      	cmp	r2, #0
 8004460:	d004      	beq.n	800446c <envelope_create_service+0xe0>
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	4a27      	ldr	r2, [pc, #156]	; (8004504 <envelope_create_service+0x178>)
 8004466:	4925      	ldr	r1, [pc, #148]	; (80044fc <envelope_create_service+0x170>)
 8004468:	2001      	movs	r0, #1
 800446a:	4798      	blx	r3
 800446c:	4652      	mov	r2, sl
 800446e:	792b      	ldrb	r3, [r5, #4]
 8004470:	2010      	movs	r0, #16
 8004472:	7213      	strb	r3, [r2, #8]
 8004474:	2280      	movs	r2, #128	; 0x80
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <envelope_create_service+0x17c>)
 8004478:	0052      	lsls	r2, r2, #1
 800447a:	0019      	movs	r1, r3
 800447c:	4699      	mov	r9, r3
 800447e:	f008 fd41 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 8004482:	2202      	movs	r2, #2
 8004484:	0005      	movs	r5, r0
 8004486:	20ec      	movs	r0, #236	; 0xec
 8004488:	32ff      	adds	r2, #255	; 0xff
 800448a:	4649      	mov	r1, r9
 800448c:	0080      	lsls	r0, r0, #2
 800448e:	f008 fd39 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 8004492:	0004      	movs	r4, r0
 8004494:	2d00      	cmp	r5, #0
 8004496:	d001      	beq.n	800449c <envelope_create_service+0x110>
 8004498:	2800      	cmp	r0, #0
 800449a:	d10f      	bne.n	80044bc <envelope_create_service+0x130>
 800449c:	0028      	movs	r0, r5
 800449e:	f7fc fa99 	bl	80009d4 <acc_rss_integration_mem_free>
 80044a2:	0020      	movs	r0, r4
 80044a4:	f7fc fa96 	bl	80009d4 <acc_rss_integration_mem_free>
 80044a8:	2500      	movs	r5, #0
 80044aa:	4653      	mov	r3, sl
 80044ac:	4652      	mov	r2, sl
 80044ae:	611d      	str	r5, [r3, #16]
 80044b0:	1e68      	subs	r0, r5, #1
 80044b2:	4185      	sbcs	r5, r0
 80044b4:	4b15      	ldr	r3, [pc, #84]	; (800450c <envelope_create_service+0x180>)
 80044b6:	b2e8      	uxtb	r0, r5
 80044b8:	60d3      	str	r3, [r2, #12]
 80044ba:	e796      	b.n	80043ea <envelope_create_service+0x5e>
 80044bc:	2318      	movs	r3, #24
 80044be:	469c      	mov	ip, r3
 80044c0:	4484      	add	ip, r0
 80044c2:	4663      	mov	r3, ip
 80044c4:	9302      	str	r3, [sp, #8]
 80044c6:	23e3      	movs	r3, #227	; 0xe3
 80044c8:	6028      	str	r0, [r5, #0]
 80044ca:	4650      	mov	r0, sl
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	3018      	adds	r0, #24
 80044d0:	18e7      	adds	r7, r4, r3
 80044d2:	003b      	movs	r3, r7
 80044d4:	4662      	mov	r2, ip
 80044d6:	6760      	str	r0, [r4, #116]	; 0x74
 80044d8:	a90b      	add	r1, sp, #44	; 0x2c
 80044da:	f7fd fb81 	bl	8001be0 <acc_sensor_manager_prepare_radar_engine>
 80044de:	0023      	movs	r3, r4
 80044e0:	897a      	ldrh	r2, [r7, #10]
 80044e2:	3370      	adds	r3, #112	; 0x70
 80044e4:	1e06      	subs	r6, r0, #0
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	d112      	bne.n	8004510 <envelope_create_service+0x184>
 80044ea:	0028      	movs	r0, r5
 80044ec:	f7fc fa8e 	bl	8000a0c <disassemble.lto_priv.159>
 80044f0:	0035      	movs	r5, r6
 80044f2:	e7da      	b.n	80044aa <envelope_create_service+0x11e>
 80044f4:	200005d8 	.word	0x200005d8
 80044f8:	0801d5bd 	.word	0x0801d5bd
 80044fc:	0801cfd0 	.word	0x0801cfd0
 8004500:	0801d5f8 	.word	0x0801d5f8
 8004504:	0801d618 	.word	0x0801d618
 8004508:	0801d65d 	.word	0x0801d65d
 800450c:	080010d1 	.word	0x080010d1
 8004510:	a80b      	add	r0, sp, #44	; 0x2c
 8004512:	f7fc fb59 	bl	8000bc8 <configuration_is_valid>
 8004516:	4683      	mov	fp, r0
 8004518:	2800      	cmp	r0, #0
 800451a:	d002      	beq.n	8004522 <envelope_create_service+0x196>
 800451c:	ab11      	add	r3, sp, #68	; 0x44
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	469b      	mov	fp, r3
 8004522:	23e3      	movs	r3, #227	; 0xe3
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	5ae2      	ldrh	r2, [r4, r3]
 8004528:	89bb      	ldrh	r3, [r7, #12]
 800452a:	0092      	lsls	r2, r2, #2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	4293      	cmp	r3, r2
 8004530:	d200      	bcs.n	8004534 <envelope_create_service+0x1a8>
 8004532:	0013      	movs	r3, r2
 8004534:	897e      	ldrh	r6, [r7, #10]
 8004536:	89fa      	ldrh	r2, [r7, #14]
 8004538:	18b6      	adds	r6, r6, r2
 800453a:	0076      	lsls	r6, r6, #1
 800453c:	429e      	cmp	r6, r3
 800453e:	d200      	bcs.n	8004542 <envelope_create_service+0x1b6>
 8004540:	001e      	movs	r6, r3
 8004542:	a80b      	add	r0, sp, #44	; 0x2c
 8004544:	f7fc fb40 	bl	8000bc8 <configuration_is_valid>
 8004548:	2300      	movs	r3, #0
 800454a:	4298      	cmp	r0, r3
 800454c:	d001      	beq.n	8004552 <envelope_create_service+0x1c6>
 800454e:	ab20      	add	r3, sp, #128	; 0x80
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	4698      	mov	r8, r3
 8004554:	42b3      	cmp	r3, r6
 8004556:	d200      	bcs.n	800455a <envelope_create_service+0x1ce>
 8004558:	46b0      	mov	r8, r6
 800455a:	23eb      	movs	r3, #235	; 0xeb
 800455c:	4642      	mov	r2, r8
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	50e2      	str	r2, [r4, r3]
 8004562:	465b      	mov	r3, fp
 8004564:	4640      	mov	r0, r8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <envelope_create_service+0x1ea>
 800456a:	23e3      	movs	r3, #227	; 0xe3
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	5ae0      	ldrh	r0, [r4, r3]
 8004570:	0080      	lsls	r0, r0, #2
 8004572:	300a      	adds	r0, #10
 8004574:	4440      	add	r0, r8
 8004576:	2286      	movs	r2, #134	; 0x86
 8004578:	4649      	mov	r1, r9
 800457a:	32ff      	adds	r2, #255	; 0xff
 800457c:	f7ff fdc2 	bl	8004104 <acc_rss_integration_mem_alloc_debug>
 8004580:	23ea      	movs	r3, #234	; 0xea
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	1e06      	subs	r6, r0, #0
 8004586:	50e0      	str	r0, [r4, r3]
 8004588:	d0af      	beq.n	80044ea <envelope_create_service+0x15e>
 800458a:	887b      	ldrh	r3, [r7, #2]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4699      	mov	r9, r3
 8004590:	4481      	add	r9, r0
 8004592:	464b      	mov	r3, r9
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	465b      	mov	r3, fp
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <envelope_create_service+0x218>
 800459c:	4643      	mov	r3, r8
 800459e:	3304      	adds	r3, #4
 80045a0:	18c3      	adds	r3, r0, r3
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	1da3      	adds	r3, r4, #6
 80045a6:	6623      	str	r3, [r4, #96]	; 0x60
 80045a8:	1de3      	adds	r3, r4, #7
 80045aa:	6663      	str	r3, [r4, #100]	; 0x64
 80045ac:	230c      	movs	r3, #12
 80045ae:	469c      	mov	ip, r3
 80045b0:	44a4      	add	ip, r4
 80045b2:	4663      	mov	r3, ip
 80045b4:	0027      	movs	r7, r4
 80045b6:	66a3      	str	r3, [r4, #104]	; 0x68
 80045b8:	9303      	str	r3, [sp, #12]
 80045ba:	3b04      	subs	r3, #4
 80045bc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80045be:	3714      	adds	r7, #20
 80045c0:	3380      	adds	r3, #128	; 0x80
 80045c2:	1d22      	adds	r2, r4, #4
 80045c4:	64e6      	str	r6, [r4, #76]	; 0x4c
 80045c6:	65e7      	str	r7, [r4, #92]	; 0x5c
 80045c8:	65a4      	str	r4, [r4, #88]	; 0x58
 80045ca:	a80b      	add	r0, sp, #44	; 0x2c
 80045cc:	601e      	str	r6, [r3, #0]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	615f      	str	r7, [r3, #20]
 80045d2:	641e      	str	r6, [r3, #64]	; 0x40
 80045d4:	645e      	str	r6, [r3, #68]	; 0x44
 80045d6:	655f      	str	r7, [r3, #84]	; 0x54
 80045d8:	f7fc fb19 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 80045dc:	2800      	cmp	r0, #0
 80045de:	d004      	beq.n	80045ea <envelope_create_service+0x25e>
 80045e0:	0023      	movs	r3, r4
 80045e2:	33fc      	adds	r3, #252	; 0xfc
 80045e4:	60de      	str	r6, [r3, #12]
 80045e6:	611e      	str	r6, [r3, #16]
 80045e8:	621f      	str	r7, [r3, #32]
 80045ea:	0023      	movs	r3, r4
 80045ec:	33fc      	adds	r3, #252	; 0xfc
 80045ee:	64de      	str	r6, [r3, #76]	; 0x4c
 80045f0:	651e      	str	r6, [r3, #80]	; 0x50
 80045f2:	661f      	str	r7, [r3, #96]	; 0x60
 80045f4:	23c2      	movs	r3, #194	; 0xc2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	50e6      	str	r6, [r4, r3]
 80045fa:	3304      	adds	r3, #4
 80045fc:	50e6      	str	r6, [r4, r3]
 80045fe:	9a03      	ldr	r2, [sp, #12]
 8004600:	3310      	adds	r3, #16
 8004602:	50e7      	str	r7, [r4, r3]
 8004604:	330c      	adds	r3, #12
 8004606:	50e2      	str	r2, [r4, r3]
 8004608:	464a      	mov	r2, r9
 800460a:	3324      	adds	r3, #36	; 0x24
 800460c:	50e6      	str	r6, [r4, r3]
 800460e:	3304      	adds	r3, #4
 8004610:	50e6      	str	r6, [r4, r3]
 8004612:	3310      	adds	r3, #16
 8004614:	50e7      	str	r7, [r4, r3]
 8004616:	3334      	adds	r3, #52	; 0x34
 8004618:	50e6      	str	r6, [r4, r3]
 800461a:	3304      	adds	r3, #4
 800461c:	50e2      	str	r2, [r4, r3]
 800461e:	3310      	adds	r3, #16
 8004620:	50e7      	str	r7, [r4, r3]
 8004622:	3328      	adds	r3, #40	; 0x28
 8004624:	50e2      	str	r2, [r4, r3]
 8004626:	3304      	adds	r3, #4
 8004628:	50e2      	str	r2, [r4, r3]
 800462a:	3310      	adds	r3, #16
 800462c:	50e7      	str	r7, [r4, r3]
 800462e:	465b      	mov	r3, fp
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <envelope_create_service+0x2c4>
 8004634:	23a8      	movs	r3, #168	; 0xa8
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	50e2      	str	r2, [r4, r3]
 800463a:	4643      	mov	r3, r8
 800463c:	22ab      	movs	r2, #171	; 0xab
 800463e:	18f3      	adds	r3, r6, r3
 8004640:	0092      	lsls	r2, r2, #2
 8004642:	50a3      	str	r3, [r4, r2]
 8004644:	23a9      	movs	r3, #169	; 0xa9
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	50e2      	str	r2, [r4, r3]
 800464c:	3310      	adds	r3, #16
 800464e:	50e7      	str	r7, [r4, r3]
 8004650:	23b8      	movs	r3, #184	; 0xb8
 8004652:	9a01      	ldr	r2, [sp, #4]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	50e2      	str	r2, [r4, r3]
 8004658:	3304      	adds	r3, #4
 800465a:	50e6      	str	r6, [r4, r3]
 800465c:	3310      	adds	r3, #16
 800465e:	50e7      	str	r7, [r4, r3]
 8004660:	3328      	adds	r3, #40	; 0x28
 8004662:	50e6      	str	r6, [r4, r3]
 8004664:	3304      	adds	r3, #4
 8004666:	50e6      	str	r6, [r4, r3]
 8004668:	3310      	adds	r3, #16
 800466a:	50e7      	str	r7, [r4, r3]
 800466c:	3328      	adds	r3, #40	; 0x28
 800466e:	50e6      	str	r6, [r4, r3]
 8004670:	3328      	adds	r3, #40	; 0x28
 8004672:	50e4      	str	r4, [r4, r3]
 8004674:	3328      	adds	r3, #40	; 0x28
 8004676:	18e6      	adds	r6, r4, r3
 8004678:	4be9      	ldr	r3, [pc, #932]	; (8004a20 <envelope_create_service+0x694>)
 800467a:	4698      	mov	r8, r3
 800467c:	3330      	adds	r3, #48	; 0x30
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d900      	bls.n	8004686 <envelope_create_service+0x2fa>
 8004684:	e1bf      	b.n	8004a06 <envelope_create_service+0x67a>
 8004686:	0033      	movs	r3, r6
 8004688:	9a02      	ldr	r2, [sp, #8]
 800468a:	a90b      	add	r1, sp, #44	; 0x2c
 800468c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800468e:	f7fc fb8d 	bl	8000dac <acc_sensor_manager_prepare_measurement>
 8004692:	1e06      	subs	r6, r0, #0
 8004694:	d100      	bne.n	8004698 <envelope_create_service+0x30c>
 8004696:	e728      	b.n	80044ea <envelope_create_service+0x15e>
 8004698:	0023      	movs	r3, r4
 800469a:	2600      	movs	r6, #0
 800469c:	4ae1      	ldr	r2, [pc, #900]	; (8004a24 <envelope_create_service+0x698>)
 800469e:	33b0      	adds	r3, #176	; 0xb0
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	601e      	str	r6, [r3, #0]
 80046a4:	4be0      	ldr	r3, [pc, #896]	; (8004a28 <envelope_create_service+0x69c>)
 80046a6:	4ae1      	ldr	r2, [pc, #900]	; (8004a2c <envelope_create_service+0x6a0>)
 80046a8:	67e3      	str	r3, [r4, #124]	; 0x7c
 80046aa:	1d23      	adds	r3, r4, #4
 80046ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80046ae:	4ae0      	ldr	r2, [pc, #896]	; (8004a30 <envelope_create_service+0x6a4>)
 80046b0:	3304      	adds	r3, #4
 80046b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80046b4:	4adf      	ldr	r2, [pc, #892]	; (8004a34 <envelope_create_service+0x6a8>)
 80046b6:	33b0      	adds	r3, #176	; 0xb0
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	4adf      	ldr	r2, [pc, #892]	; (8004a38 <envelope_create_service+0x6ac>)
 80046bc:	a80b      	add	r0, sp, #44	; 0x2c
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	4ade      	ldr	r2, [pc, #888]	; (8004a3c <envelope_create_service+0x6b0>)
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	4ade      	ldr	r2, [pc, #888]	; (8004a40 <envelope_create_service+0x6b4>)
 80046c6:	639a      	str	r2, [r3, #56]	; 0x38
 80046c8:	2200      	movs	r2, #0
 80046ca:	879a      	strh	r2, [r3, #60]	; 0x3c
 80046cc:	f7fc fa9f 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 80046d0:	9601      	str	r6, [sp, #4]
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d01b      	beq.n	800470e <envelope_create_service+0x382>
 80046d6:	a80b      	add	r0, sp, #44	; 0x2c
 80046d8:	f7fc fa76 	bl	8000bc8 <configuration_is_valid>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d007      	beq.n	80046f0 <envelope_create_service+0x364>
 80046e0:	aa04      	add	r2, sp, #16
 80046e2:	4694      	mov	ip, r2
 80046e4:	2366      	movs	r3, #102	; 0x66
 80046e6:	4463      	add	r3, ip
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	221e      	movs	r2, #30
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <envelope_create_service+0x368>
 80046f0:	2296      	movs	r2, #150	; 0x96
 80046f2:	0052      	lsls	r2, r2, #1
 80046f4:	0023      	movs	r3, r4
 80046f6:	33f8      	adds	r3, #248	; 0xf8
 80046f8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80046fa:	875a      	strh	r2, [r3, #58]	; 0x3a
 80046fc:	4ad1      	ldr	r2, [pc, #836]	; (8004a44 <envelope_create_service+0x6b8>)
 80046fe:	8719      	strh	r1, [r3, #56]	; 0x38
 8004700:	63da      	str	r2, [r3, #60]	; 0x3c
 8004702:	4ad1      	ldr	r2, [pc, #836]	; (8004a48 <envelope_create_service+0x6bc>)
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	4ad1      	ldr	r2, [pc, #836]	; (8004a4c <envelope_create_service+0x6c0>)
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	4ad1      	ldr	r2, [pc, #836]	; (8004a50 <envelope_create_service+0x6c4>)
 800470c:	60da      	str	r2, [r3, #12]
 800470e:	0023      	movs	r3, r4
 8004710:	4ad0      	ldr	r2, [pc, #832]	; (8004a54 <envelope_create_service+0x6c8>)
 8004712:	3339      	adds	r3, #57	; 0x39
 8004714:	33ff      	adds	r3, #255	; 0xff
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
 8004718:	4acf      	ldr	r2, [pc, #828]	; (8004a58 <envelope_create_service+0x6cc>)
 800471a:	49d0      	ldr	r1, [pc, #832]	; (8004a5c <envelope_create_service+0x6d0>)
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	4ad0      	ldr	r2, [pc, #832]	; (8004a60 <envelope_create_service+0x6d4>)
 8004720:	a80b      	add	r0, sp, #44	; 0x2c
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	4acf      	ldr	r2, [pc, #828]	; (8004a64 <envelope_create_service+0x6d8>)
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800472a:	6419      	str	r1, [r3, #64]	; 0x40
 800472c:	679a      	str	r2, [r3, #120]	; 0x78
 800472e:	49ce      	ldr	r1, [pc, #824]	; (8004a68 <envelope_create_service+0x6dc>)
 8004730:	9a01      	ldr	r2, [sp, #4]
 8004732:	6459      	str	r1, [r3, #68]	; 0x44
 8004734:	67da      	str	r2, [r3, #124]	; 0x7c
 8004736:	49cd      	ldr	r1, [pc, #820]	; (8004a6c <envelope_create_service+0x6e0>)
 8004738:	4acd      	ldr	r2, [pc, #820]	; (8004a70 <envelope_create_service+0x6e4>)
 800473a:	6499      	str	r1, [r3, #72]	; 0x48
 800473c:	675a      	str	r2, [r3, #116]	; 0x74
 800473e:	23e3      	movs	r3, #227	; 0xe3
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	18e7      	adds	r7, r4, r3
 8004744:	893b      	ldrh	r3, [r7, #8]
 8004746:	9302      	str	r3, [sp, #8]
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	469b      	mov	fp, r3
 800474c:	f7fc fa3c 	bl	8000bc8 <configuration_is_valid>
 8004750:	2800      	cmp	r0, #0
 8004752:	d100      	bne.n	8004756 <envelope_create_service+0x3ca>
 8004754:	e15b      	b.n	8004a0e <envelope_create_service+0x682>
 8004756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004758:	4699      	mov	r9, r3
 800475a:	0026      	movs	r6, r4
 800475c:	4bc5      	ldr	r3, [pc, #788]	; (8004a74 <envelope_create_service+0x6e8>)
 800475e:	36b9      	adds	r6, #185	; 0xb9
 8004760:	36ff      	adds	r6, #255	; 0xff
 8004762:	6073      	str	r3, [r6, #4]
 8004764:	4bc4      	ldr	r3, [pc, #784]	; (8004a78 <envelope_create_service+0x6ec>)
 8004766:	218b      	movs	r1, #139	; 0x8b
 8004768:	60b3      	str	r3, [r6, #8]
 800476a:	4bc4      	ldr	r3, [pc, #784]	; (8004a7c <envelope_create_service+0x6f0>)
 800476c:	05c9      	lsls	r1, r1, #23
 800476e:	60f3      	str	r3, [r6, #12]
 8004770:	465b      	mov	r3, fp
 8004772:	6433      	str	r3, [r6, #64]	; 0x40
 8004774:	9b02      	ldr	r3, [sp, #8]
 8004776:	4648      	mov	r0, r9
 8004778:	63f3      	str	r3, [r6, #60]	; 0x3c
 800477a:	f00c f9b9 	bl	8010af0 <__aeabi_fmul>
 800477e:	2100      	movs	r1, #0
 8004780:	4683      	mov	fp, r0
 8004782:	4648      	mov	r0, r9
 8004784:	f00c feca 	bl	801151c <__aeabi_fcmpge>
 8004788:	2800      	cmp	r0, #0
 800478a:	d100      	bne.n	800478e <envelope_create_service+0x402>
 800478c:	e142      	b.n	8004a14 <envelope_create_service+0x688>
 800478e:	21fc      	movs	r1, #252	; 0xfc
 8004790:	0589      	lsls	r1, r1, #22
 8004792:	4658      	mov	r0, fp
 8004794:	f00b ff00 	bl	8010598 <__aeabi_fadd>
 8004798:	f00d f8a0 	bl	80118dc <__aeabi_f2iz>
 800479c:	0023      	movs	r3, r4
 800479e:	33bf      	adds	r3, #191	; 0xbf
 80047a0:	33ff      	adds	r3, #255	; 0xff
 80047a2:	87d8      	strh	r0, [r3, #62]	; 0x3e
 80047a4:	4bb6      	ldr	r3, [pc, #728]	; (8004a80 <envelope_create_service+0x6f4>)
 80047a6:	a80b      	add	r0, sp, #44	; 0x2c
 80047a8:	63b3      	str	r3, [r6, #56]	; 0x38
 80047aa:	2380      	movs	r3, #128	; 0x80
 80047ac:	88ba      	ldrh	r2, [r7, #4]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	18e3      	adds	r3, r4, r3
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
 80047b6:	4ab3      	ldr	r2, [pc, #716]	; (8004a84 <envelope_create_service+0x6f8>)
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	4ab3      	ldr	r2, [pc, #716]	; (8004a88 <envelope_create_service+0x6fc>)
 80047bc:	609a      	str	r2, [r3, #8]
 80047be:	4ab3      	ldr	r2, [pc, #716]	; (8004a8c <envelope_create_service+0x700>)
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	f7fc fa01 	bl	8000bc8 <configuration_is_valid>
 80047c6:	4681      	mov	r9, r0
 80047c8:	2800      	cmp	r0, #0
 80047ca:	d002      	beq.n	80047d2 <envelope_create_service+0x446>
 80047cc:	ab12      	add	r3, sp, #72	; 0x48
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	4699      	mov	r9, r3
 80047d2:	a80b      	add	r0, sp, #44	; 0x2c
 80047d4:	f7fc f9f8 	bl	8000bc8 <configuration_is_valid>
 80047d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80047da:	2800      	cmp	r0, #0
 80047dc:	d100      	bne.n	80047e0 <envelope_create_service+0x454>
 80047de:	2600      	movs	r6, #0
 80047e0:	238f      	movs	r3, #143	; 0x8f
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	18e7      	adds	r7, r4, r3
 80047e6:	4baa      	ldr	r3, [pc, #680]	; (8004a90 <envelope_create_service+0x704>)
 80047e8:	607b      	str	r3, [r7, #4]
 80047ea:	4baa      	ldr	r3, [pc, #680]	; (8004a94 <envelope_create_service+0x708>)
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	4baa      	ldr	r3, [pc, #680]	; (8004a98 <envelope_create_service+0x70c>)
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	464b      	mov	r3, r9
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d100      	bne.n	80047fa <envelope_create_service+0x46e>
 80047f8:	e10f      	b.n	8004a1a <envelope_create_service+0x68e>
 80047fa:	49a8      	ldr	r1, [pc, #672]	; (8004a9c <envelope_create_service+0x710>)
 80047fc:	1c30      	adds	r0, r6, #0
 80047fe:	f00c fe6f 	bl	80114e0 <__aeabi_fcmplt>
 8004802:	4683      	mov	fp, r0
 8004804:	2800      	cmp	r0, #0
 8004806:	d000      	beq.n	800480a <envelope_create_service+0x47e>
 8004808:	e178      	b.n	8004afc <envelope_create_service+0x770>
 800480a:	49a5      	ldr	r1, [pc, #660]	; (8004aa0 <envelope_create_service+0x714>)
 800480c:	1c30      	adds	r0, r6, #0
 800480e:	f00c fe7b 	bl	8011508 <__aeabi_fcmpgt>
 8004812:	2800      	cmp	r0, #0
 8004814:	d000      	beq.n	8004818 <envelope_create_service+0x48c>
 8004816:	e173      	b.n	8004b00 <envelope_create_service+0x774>
 8004818:	464b      	mov	r3, r9
 800481a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d100      	bne.n	8004822 <envelope_create_service+0x496>
 8004820:	e250      	b.n	8004cc4 <envelope_create_service+0x938>
 8004822:	4ba0      	ldr	r3, [pc, #640]	; (8004aa4 <envelope_create_service+0x718>)
 8004824:	0076      	lsls	r6, r6, #1
 8004826:	0876      	lsrs	r6, r6, #1
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
 800482a:	499f      	ldr	r1, [pc, #636]	; (8004aa8 <envelope_create_service+0x71c>)
 800482c:	1c30      	adds	r0, r6, #0
 800482e:	f00c fe6b 	bl	8011508 <__aeabi_fcmpgt>
 8004832:	2800      	cmp	r0, #0
 8004834:	d000      	beq.n	8004838 <envelope_create_service+0x4ac>
 8004836:	4e9c      	ldr	r6, [pc, #624]	; (8004aa8 <envelope_create_service+0x71c>)
 8004838:	2191      	movs	r1, #145	; 0x91
 800483a:	1c30      	adds	r0, r6, #0
 800483c:	05c9      	lsls	r1, r1, #23
 800483e:	f00c f957 	bl	8010af0 <__aeabi_fmul>
 8004842:	f00f fbef 	bl	8014024 <roundf>
 8004846:	21da      	movs	r1, #218	; 0xda
 8004848:	0589      	lsls	r1, r1, #22
 800484a:	f00c f951 	bl	8010af0 <__aeabi_fmul>
 800484e:	4997      	ldr	r1, [pc, #604]	; (8004aac <envelope_create_service+0x720>)
 8004850:	f00c f94e 	bl	8010af0 <__aeabi_fmul>
 8004854:	1c01      	adds	r1, r0, #0
 8004856:	1c06      	adds	r6, r0, #0
 8004858:	4895      	ldr	r0, [pc, #596]	; (8004ab0 <envelope_create_service+0x724>)
 800485a:	f00c fa7b 	bl	8010d54 <__aeabi_fsub>
 800485e:	4995      	ldr	r1, [pc, #596]	; (8004ab4 <envelope_create_service+0x728>)
 8004860:	f00c fa78 	bl	8010d54 <__aeabi_fsub>
 8004864:	1c07      	adds	r7, r0, #0
 8004866:	1c01      	adds	r1, r0, #0
 8004868:	1c30      	adds	r0, r6, #0
 800486a:	f00c fe39 	bl	80114e0 <__aeabi_fcmplt>
 800486e:	2800      	cmp	r0, #0
 8004870:	d100      	bne.n	8004874 <envelope_create_service+0x4e8>
 8004872:	e149      	b.n	8004b08 <envelope_create_service+0x77c>
 8004874:	2100      	movs	r1, #0
 8004876:	1c30      	adds	r0, r6, #0
 8004878:	f00b fa63 	bl	800fd42 <quarter_pi_cos_sin_f32.lto_priv.545>
 800487c:	2101      	movs	r1, #1
 800487e:	4681      	mov	r9, r0
 8004880:	1c30      	adds	r0, r6, #0
 8004882:	f00b fa5e 	bl	800fd42 <quarter_pi_cos_sin_f32.lto_priv.545>
 8004886:	1c01      	adds	r1, r0, #0
 8004888:	4648      	mov	r0, r9
 800488a:	f00c f81f 	bl	80108cc <__aeabi_fdiv>
 800488e:	498a      	ldr	r1, [pc, #552]	; (8004ab8 <envelope_create_service+0x72c>)
 8004890:	f00c f92e 	bl	8010af0 <__aeabi_fmul>
 8004894:	4989      	ldr	r1, [pc, #548]	; (8004abc <envelope_create_service+0x730>)
 8004896:	1c06      	adds	r6, r0, #0
 8004898:	f00b fe7e 	bl	8010598 <__aeabi_fadd>
 800489c:	1c31      	adds	r1, r6, #0
 800489e:	f00c f927 	bl	8010af0 <__aeabi_fmul>
 80048a2:	4986      	ldr	r1, [pc, #536]	; (8004abc <envelope_create_service+0x730>)
 80048a4:	1c07      	adds	r7, r0, #0
 80048a6:	1c30      	adds	r0, r6, #0
 80048a8:	f00c f922 	bl	8010af0 <__aeabi_fmul>
 80048ac:	21fe      	movs	r1, #254	; 0xfe
 80048ae:	0589      	lsls	r1, r1, #22
 80048b0:	f00b fe72 	bl	8010598 <__aeabi_fadd>
 80048b4:	1c01      	adds	r1, r0, #0
 80048b6:	1c38      	adds	r0, r7, #0
 80048b8:	f00c f808 	bl	80108cc <__aeabi_fdiv>
 80048bc:	1c01      	adds	r1, r0, #0
 80048be:	1c06      	adds	r6, r0, #0
 80048c0:	f00c f916 	bl	8010af0 <__aeabi_fmul>
 80048c4:	21fe      	movs	r1, #254	; 0xfe
 80048c6:	0589      	lsls	r1, r1, #22
 80048c8:	f00b fe66 	bl	8010598 <__aeabi_fadd>
 80048cc:	f00e ff94 	bl	80137f8 <__ieee754_sqrtf>
 80048d0:	1c01      	adds	r1, r0, #0
 80048d2:	20fe      	movs	r0, #254	; 0xfe
 80048d4:	0580      	lsls	r0, r0, #22
 80048d6:	f00b fff9 	bl	80108cc <__aeabi_fdiv>
 80048da:	2181      	movs	r1, #129	; 0x81
 80048dc:	1c07      	adds	r7, r0, #0
 80048de:	05c9      	lsls	r1, r1, #23
 80048e0:	1c30      	adds	r0, r6, #0
 80048e2:	f00c fdfd 	bl	80114e0 <__aeabi_fcmplt>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d100      	bne.n	80048ec <envelope_create_service+0x560>
 80048ea:	e124      	b.n	8004b36 <envelope_create_service+0x7aa>
 80048ec:	21fe      	movs	r1, #254	; 0xfe
 80048ee:	1c30      	adds	r0, r6, #0
 80048f0:	0589      	lsls	r1, r1, #22
 80048f2:	f00c fe09 	bl	8011508 <__aeabi_fcmpgt>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d100      	bne.n	80048fc <envelope_create_service+0x570>
 80048fa:	e10f      	b.n	8004b1c <envelope_create_service+0x790>
 80048fc:	218a      	movs	r1, #138	; 0x8a
 80048fe:	1c38      	adds	r0, r7, #0
 8004900:	05c9      	lsls	r1, r1, #23
 8004902:	f00c f8f5 	bl	8010af0 <__aeabi_fmul>
 8004906:	21fc      	movs	r1, #252	; 0xfc
 8004908:	0589      	lsls	r1, r1, #22
 800490a:	f00b fe45 	bl	8010598 <__aeabi_fadd>
 800490e:	f00c ffe5 	bl	80118dc <__aeabi_f2iz>
 8004912:	0046      	lsls	r6, r0, #1
 8004914:	2080      	movs	r0, #128	; 0x80
 8004916:	00b3      	lsls	r3, r6, #2
 8004918:	4373      	muls	r3, r6
 800491a:	04c0      	lsls	r0, r0, #19
 800491c:	1ac0      	subs	r0, r0, r3
 800491e:	f00d f847 	bl	80119b0 <__aeabi_ui2f>
 8004922:	f00e ff69 	bl	80137f8 <__ieee754_sqrtf>
 8004926:	21fc      	movs	r1, #252	; 0xfc
 8004928:	0589      	lsls	r1, r1, #22
 800492a:	f00b fe35 	bl	8010598 <__aeabi_fadd>
 800492e:	f00c ffd5 	bl	80118dc <__aeabi_f2iz>
 8004932:	0007      	movs	r7, r0
 8004934:	239f      	movs	r3, #159	; 0x9f
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4699      	mov	r9, r3
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	015b      	lsls	r3, r3, #5
 800493e:	469b      	mov	fp, r3
 8004940:	2e00      	cmp	r6, #0
 8004942:	d000      	beq.n	8004946 <envelope_create_service+0x5ba>
 8004944:	e11b      	b.n	8004b7e <envelope_create_service+0x7f2>
 8004946:	229e      	movs	r2, #158	; 0x9e
 8004948:	21fc      	movs	r1, #252	; 0xfc
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	0589      	lsls	r1, r1, #22
 800494e:	50a1      	str	r1, [r4, r2]
 8004950:	465b      	mov	r3, fp
 8004952:	464a      	mov	r2, r9
 8004954:	50a3      	str	r3, [r4, r2]
 8004956:	23a0      	movs	r3, #160	; 0xa0
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	50e6      	str	r6, [r4, r3]
 800495c:	3304      	adds	r3, #4
 800495e:	52e6      	strh	r6, [r4, r3]
 8004960:	4643      	mov	r3, r8
 8004962:	4a57      	ldr	r2, [pc, #348]	; (8004ac0 <envelope_create_service+0x734>)
 8004964:	4957      	ldr	r1, [pc, #348]	; (8004ac4 <envelope_create_service+0x738>)
 8004966:	2000      	movs	r0, #0
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	4798      	blx	r3
 800496c:	a80b      	add	r0, sp, #44	; 0x2c
 800496e:	f7fc f92b 	bl	8000bc8 <configuration_is_valid>
 8004972:	2800      	cmp	r0, #0
 8004974:	d010      	beq.n	8004998 <envelope_create_service+0x60c>
 8004976:	ab11      	add	r3, sp, #68	; 0x44
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00c      	beq.n	8004998 <envelope_create_service+0x60c>
 800497e:	23a4      	movs	r3, #164	; 0xa4
 8004980:	4951      	ldr	r1, [pc, #324]	; (8004ac8 <envelope_create_service+0x73c>)
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	18e3      	adds	r3, r4, r3
 8004986:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004988:	6059      	str	r1, [r3, #4]
 800498a:	4950      	ldr	r1, [pc, #320]	; (8004acc <envelope_create_service+0x740>)
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c
 800498e:	6099      	str	r1, [r3, #8]
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <envelope_create_service+0x744>)
 8004992:	4950      	ldr	r1, [pc, #320]	; (8004ad4 <envelope_create_service+0x748>)
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
 8004996:	60d9      	str	r1, [r3, #12]
 8004998:	23b4      	movs	r3, #180	; 0xb4
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	18e6      	adds	r6, r4, r3
 800499e:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <envelope_create_service+0x74c>)
 80049a0:	a80b      	add	r0, sp, #44	; 0x2c
 80049a2:	6073      	str	r3, [r6, #4]
 80049a4:	4b4d      	ldr	r3, [pc, #308]	; (8004adc <envelope_create_service+0x750>)
 80049a6:	60b3      	str	r3, [r6, #8]
 80049a8:	4b4d      	ldr	r3, [pc, #308]	; (8004ae0 <envelope_create_service+0x754>)
 80049aa:	60f3      	str	r3, [r6, #12]
 80049ac:	4b4d      	ldr	r3, [pc, #308]	; (8004ae4 <envelope_create_service+0x758>)
 80049ae:	63b3      	str	r3, [r6, #56]	; 0x38
 80049b0:	23c3      	movs	r3, #195	; 0xc3
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4699      	mov	r9, r3
 80049b6:	44a1      	add	r9, r4
 80049b8:	464a      	mov	r2, r9
 80049ba:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <envelope_create_service+0x75c>)
 80049bc:	6393      	str	r3, [r2, #56]	; 0x38
 80049be:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <envelope_create_service+0x6cc>)
 80049c0:	6053      	str	r3, [r2, #4]
 80049c2:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <envelope_create_service+0x6d4>)
 80049c4:	6093      	str	r3, [r2, #8]
 80049c6:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <envelope_create_service+0x6d8>)
 80049c8:	60d3      	str	r3, [r2, #12]
 80049ca:	23d2      	movs	r3, #210	; 0xd2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	18e7      	adds	r7, r4, r3
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <envelope_create_service+0x760>)
 80049d2:	643b      	str	r3, [r7, #64]	; 0x40
 80049d4:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <envelope_create_service+0x764>)
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	4b46      	ldr	r3, [pc, #280]	; (8004af4 <envelope_create_service+0x768>)
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <envelope_create_service+0x76c>)
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	0023      	movs	r3, r4
 80049e2:	3378      	adds	r3, #120	; 0x78
 80049e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80049e6:	23b8      	movs	r3, #184	; 0xb8
 80049e8:	469b      	mov	fp, r3
 80049ea:	44a3      	add	fp, r4
 80049ec:	465b      	mov	r3, fp
 80049ee:	67a3      	str	r3, [r4, #120]	; 0x78
 80049f0:	f7fc f90d 	bl	8000c0e <acc_base_configuration_noise_level_normalization_get>
 80049f4:	0023      	movs	r3, r4
 80049f6:	3339      	adds	r3, #57	; 0x39
 80049f8:	33ff      	adds	r3, #255	; 0xff
 80049fa:	2800      	cmp	r0, #0
 80049fc:	d000      	beq.n	8004a00 <envelope_create_service+0x674>
 80049fe:	e164      	b.n	8004cca <envelope_create_service+0x93e>
 8004a00:	465a      	mov	r2, fp
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e166      	b.n	8004cd4 <envelope_create_service+0x948>
 8004a06:	a80b      	add	r0, sp, #44	; 0x2c
 8004a08:	f7fc faa2 	bl	8000f50 <acc_base_configuration_print.part.5>
 8004a0c:	e63b      	b.n	8004686 <envelope_create_service+0x2fa>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4699      	mov	r9, r3
 8004a12:	e6a2      	b.n	800475a <envelope_create_service+0x3ce>
 8004a14:	21bf      	movs	r1, #191	; 0xbf
 8004a16:	0609      	lsls	r1, r1, #24
 8004a18:	e6bb      	b.n	8004792 <envelope_create_service+0x406>
 8004a1a:	26fc      	movs	r6, #252	; 0xfc
 8004a1c:	05b6      	lsls	r6, r6, #22
 8004a1e:	e6fb      	b.n	8004818 <envelope_create_service+0x48c>
 8004a20:	200005d8 	.word	0x200005d8
 8004a24:	08001d45 	.word	0x08001d45
 8004a28:	0800032d 	.word	0x0800032d
 8004a2c:	080002d7 	.word	0x080002d7
 8004a30:	080008f7 	.word	0x080008f7
 8004a34:	08000881 	.word	0x08000881
 8004a38:	0800082b 	.word	0x0800082b
 8004a3c:	0800092f 	.word	0x0800092f
 8004a40:	08001f21 	.word	0x08001f21
 8004a44:	08000493 	.word	0x08000493
 8004a48:	08000479 	.word	0x08000479
 8004a4c:	08000425 	.word	0x08000425
 8004a50:	08000907 	.word	0x08000907
 8004a54:	080006fd 	.word	0x080006fd
 8004a58:	08000951 	.word	0x08000951
 8004a5c:	080005b5 	.word	0x080005b5
 8004a60:	080006a9 	.word	0x080006a9
 8004a64:	08000927 	.word	0x08000927
 8004a68:	080004fd 	.word	0x080004fd
 8004a6c:	0800090f 	.word	0x0800090f
 8004a70:	08001d81 	.word	0x08001d81
 8004a74:	08000415 	.word	0x08000415
 8004a78:	080003a5 	.word	0x080003a5
 8004a7c:	080008ff 	.word	0x080008ff
 8004a80:	08003f39 	.word	0x08003f39
 8004a84:	08000699 	.word	0x08000699
 8004a88:	08000645 	.word	0x08000645
 8004a8c:	0800091f 	.word	0x0800091f
 8004a90:	08000635 	.word	0x08000635
 8004a94:	080005c5 	.word	0x080005c5
 8004a98:	08000917 	.word	0x08000917
 8004a9c:	3b843809 	.word	0x3b843809
 8004aa0:	3efdca08 	.word	0x3efdca08
 8004aa4:	08001ecf 	.word	0x08001ecf
 8004aa8:	3effffde 	.word	0x3effffde
 8004aac:	40490fdb 	.word	0x40490fdb
 8004ab0:	3fc90fdb 	.word	0x3fc90fdb
 8004ab4:	333bbd2e 	.word	0x333bbd2e
 8004ab8:	3f9f8d77 	.word	0x3f9f8d77
 8004abc:	3fb504f3 	.word	0x3fb504f3
 8004ac0:	0801d688 	.word	0x0801d688
 8004ac4:	0801cc35 	.word	0x0801cc35
 8004ac8:	08001b21 	.word	0x08001b21
 8004acc:	080001db 	.word	0x080001db
 8004ad0:	08000251 	.word	0x08000251
 8004ad4:	08000241 	.word	0x08000241
 8004ad8:	08000937 	.word	0x08000937
 8004adc:	08000899 	.word	0x08000899
 8004ae0:	080008ed 	.word	0x080008ed
 8004ae4:	08001d4d 	.word	0x08001d4d
 8004ae8:	0800080f 	.word	0x0800080f
 8004aec:	08001bb5 	.word	0x08001bb5
 8004af0:	080001c5 	.word	0x080001c5
 8004af4:	08000157 	.word	0x08000157
 8004af8:	080001c3 	.word	0x080001c3
 8004afc:	4e99      	ldr	r6, [pc, #612]	; (8004d64 <envelope_create_service+0x9d8>)
 8004afe:	e68b      	b.n	8004818 <envelope_create_service+0x48c>
 8004b00:	26fc      	movs	r6, #252	; 0xfc
 8004b02:	46d9      	mov	r9, fp
 8004b04:	05b6      	lsls	r6, r6, #22
 8004b06:	e687      	b.n	8004818 <envelope_create_service+0x48c>
 8004b08:	2101      	movs	r1, #1
 8004b0a:	1c38      	adds	r0, r7, #0
 8004b0c:	f00b f919 	bl	800fd42 <quarter_pi_cos_sin_f32.lto_priv.545>
 8004b10:	2100      	movs	r1, #0
 8004b12:	4681      	mov	r9, r0
 8004b14:	1c38      	adds	r0, r7, #0
 8004b16:	f00b f914 	bl	800fd42 <quarter_pi_cos_sin_f32.lto_priv.545>
 8004b1a:	e6b4      	b.n	8004886 <envelope_create_service+0x4fa>
 8004b1c:	218b      	movs	r1, #139	; 0x8b
 8004b1e:	1c38      	adds	r0, r7, #0
 8004b20:	05c9      	lsls	r1, r1, #23
 8004b22:	f00b ffe5 	bl	8010af0 <__aeabi_fmul>
 8004b26:	21fc      	movs	r1, #252	; 0xfc
 8004b28:	0589      	lsls	r1, r1, #22
 8004b2a:	f00b fd35 	bl	8010598 <__aeabi_fadd>
 8004b2e:	f00c fed5 	bl	80118dc <__aeabi_f2iz>
 8004b32:	0006      	movs	r6, r0
 8004b34:	e6ee      	b.n	8004914 <envelope_create_service+0x588>
 8004b36:	218c      	movs	r1, #140	; 0x8c
 8004b38:	1c30      	adds	r0, r6, #0
 8004b3a:	05c9      	lsls	r1, r1, #23
 8004b3c:	f00b ffd8 	bl	8010af0 <__aeabi_fmul>
 8004b40:	1c39      	adds	r1, r7, #0
 8004b42:	f00b ffd5 	bl	8010af0 <__aeabi_fmul>
 8004b46:	21fc      	movs	r1, #252	; 0xfc
 8004b48:	0589      	lsls	r1, r1, #22
 8004b4a:	f00b fd25 	bl	8010598 <__aeabi_fadd>
 8004b4e:	f00c fec5 	bl	80118dc <__aeabi_f2iz>
 8004b52:	0003      	movs	r3, r0
 8004b54:	0007      	movs	r7, r0
 8004b56:	4343      	muls	r3, r0
 8004b58:	2080      	movs	r0, #128	; 0x80
 8004b5a:	04c0      	lsls	r0, r0, #19
 8004b5c:	1ac0      	subs	r0, r0, r3
 8004b5e:	f00c ff27 	bl	80119b0 <__aeabi_ui2f>
 8004b62:	f00e fe49 	bl	80137f8 <__ieee754_sqrtf>
 8004b66:	21fc      	movs	r1, #252	; 0xfc
 8004b68:	0589      	lsls	r1, r1, #22
 8004b6a:	f00b ffc1 	bl	8010af0 <__aeabi_fmul>
 8004b6e:	21fc      	movs	r1, #252	; 0xfc
 8004b70:	0589      	lsls	r1, r1, #22
 8004b72:	f00b fd11 	bl	8010598 <__aeabi_fadd>
 8004b76:	f00c feb1 	bl	80118dc <__aeabi_f2iz>
 8004b7a:	0006      	movs	r6, r0
 8004b7c:	e6da      	b.n	8004934 <envelope_create_service+0x5a8>
 8004b7e:	465b      	mov	r3, fp
 8004b80:	b2b0      	uxth	r0, r6
 8004b82:	1a19      	subs	r1, r3, r0
 8004b84:	b289      	uxth	r1, r1
 8004b86:	b20a      	sxth	r2, r1
 8004b88:	4694      	mov	ip, r2
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	4663      	mov	r3, ip
 8004b8e:	52a3      	strh	r3, [r4, r2]
 8004b90:	004b      	lsls	r3, r1, #1
 8004b92:	4699      	mov	r9, r3
 8004b94:	239f      	movs	r3, #159	; 0x9f
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	18e1      	adds	r1, r4, r3
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	804b      	strh	r3, [r1, #2]
 8004b9e:	4663      	mov	r3, ip
 8004ba0:	808b      	strh	r3, [r1, #4]
 8004ba2:	0043      	lsls	r3, r0, #1
 8004ba4:	b2b8      	uxth	r0, r7
 8004ba6:	1ac2      	subs	r2, r0, r3
 8004ba8:	80ca      	strh	r2, [r1, #6]
 8004baa:	22c0      	movs	r2, #192	; 0xc0
 8004bac:	0152      	lsls	r2, r2, #5
 8004bae:	1b92      	subs	r2, r2, r6
 8004bb0:	0052      	lsls	r2, r2, #1
 8004bb2:	1a12      	subs	r2, r2, r0
 8004bb4:	810a      	strh	r2, [r1, #8]
 8004bb6:	2f00      	cmp	r7, #0
 8004bb8:	d104      	bne.n	8004bc4 <envelope_create_service+0x838>
 8004bba:	239e      	movs	r3, #158	; 0x9e
 8004bbc:	9a01      	ldr	r2, [sp, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	50e2      	str	r2, [r4, r3]
 8004bc2:	e6cd      	b.n	8004960 <envelope_create_service+0x5d4>
 8004bc4:	465b      	mov	r3, fp
 8004bc6:	22fc      	movs	r2, #252	; 0xfc
 8004bc8:	00b0      	lsls	r0, r6, #2
 8004bca:	1b9b      	subs	r3, r3, r6
 8004bcc:	4346      	muls	r6, r0
 8004bce:	0038      	movs	r0, r7
 8004bd0:	0612      	lsls	r2, r2, #24
 8004bd2:	4694      	mov	ip, r2
 8004bd4:	4378      	muls	r0, r7
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	1bdb      	subs	r3, r3, r7
 8004bda:	435b      	muls	r3, r3
 8004bdc:	1836      	adds	r6, r6, r0
 8004bde:	4466      	add	r6, ip
 8004be0:	0076      	lsls	r6, r6, #1
 8004be2:	1b98      	subs	r0, r3, r6
 8004be4:	f00c fe9a 	bl	801191c <__aeabi_i2f>
 8004be8:	4681      	mov	r9, r0
 8004bea:	0030      	movs	r0, r6
 8004bec:	f00c fe96 	bl	801191c <__aeabi_i2f>
 8004bf0:	4649      	mov	r1, r9
 8004bf2:	f00b fe6b 	bl	80108cc <__aeabi_fdiv>
 8004bf6:	495c      	ldr	r1, [pc, #368]	; (8004d68 <envelope_create_service+0x9dc>)
 8004bf8:	1c06      	adds	r6, r0, #0
 8004bfa:	f00b fccd 	bl	8010598 <__aeabi_fadd>
 8004bfe:	4683      	mov	fp, r0
 8004c00:	4648      	mov	r0, r9
 8004c02:	f00e fdf9 	bl	80137f8 <__ieee754_sqrtf>
 8004c06:	4681      	mov	r9, r0
 8004c08:	2080      	movs	r0, #128	; 0x80
 8004c0a:	0180      	lsls	r0, r0, #6
 8004c0c:	1bc0      	subs	r0, r0, r7
 8004c0e:	0040      	lsls	r0, r0, #1
 8004c10:	f00c fe84 	bl	801191c <__aeabi_i2f>
 8004c14:	1c01      	adds	r1, r0, #0
 8004c16:	4648      	mov	r0, r9
 8004c18:	f00b fe58 	bl	80108cc <__aeabi_fdiv>
 8004c1c:	4953      	ldr	r1, [pc, #332]	; (8004d6c <envelope_create_service+0x9e0>)
 8004c1e:	1c07      	adds	r7, r0, #0
 8004c20:	4658      	mov	r0, fp
 8004c22:	f00b ff65 	bl	8010af0 <__aeabi_fmul>
 8004c26:	4659      	mov	r1, fp
 8004c28:	f00b ff62 	bl	8010af0 <__aeabi_fmul>
 8004c2c:	4950      	ldr	r1, [pc, #320]	; (8004d70 <envelope_create_service+0x9e4>)
 8004c2e:	f00b fcb3 	bl	8010598 <__aeabi_fadd>
 8004c32:	f00e fde1 	bl	80137f8 <__ieee754_sqrtf>
 8004c36:	1c31      	adds	r1, r6, #0
 8004c38:	f00c f88c 	bl	8010d54 <__aeabi_fsub>
 8004c3c:	f00e fddc 	bl	80137f8 <__ieee754_sqrtf>
 8004c40:	1c01      	adds	r1, r0, #0
 8004c42:	1c38      	adds	r0, r7, #0
 8004c44:	f00b ff54 	bl	8010af0 <__aeabi_fmul>
 8004c48:	494a      	ldr	r1, [pc, #296]	; (8004d74 <envelope_create_service+0x9e8>)
 8004c4a:	1c07      	adds	r7, r0, #0
 8004c4c:	f00c fc48 	bl	80114e0 <__aeabi_fcmplt>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d135      	bne.n	8004cc0 <envelope_create_service+0x934>
 8004c54:	21fe      	movs	r1, #254	; 0xfe
 8004c56:	1c38      	adds	r0, r7, #0
 8004c58:	0589      	lsls	r1, r1, #22
 8004c5a:	f00c fc55 	bl	8011508 <__aeabi_fcmpgt>
 8004c5e:	4e46      	ldr	r6, [pc, #280]	; (8004d78 <envelope_create_service+0x9ec>)
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d022      	beq.n	8004caa <envelope_create_service+0x91e>
 8004c64:	20fe      	movs	r0, #254	; 0xfe
 8004c66:	1c39      	adds	r1, r7, #0
 8004c68:	0580      	lsls	r0, r0, #22
 8004c6a:	f00b fe2f 	bl	80108cc <__aeabi_fdiv>
 8004c6e:	1c07      	adds	r7, r0, #0
 8004c70:	0030      	movs	r0, r6
 8004c72:	1c3a      	adds	r2, r7, #0
 8004c74:	2109      	movs	r1, #9
 8004c76:	3074      	adds	r0, #116	; 0x74
 8004c78:	f00b f84a 	bl	800fd10 <eval_even_poly_f32.lto_priv.546>
 8004c7c:	1c01      	adds	r1, r0, #0
 8004c7e:	1c38      	adds	r0, r7, #0
 8004c80:	f00b ff36 	bl	8010af0 <__aeabi_fmul>
 8004c84:	1c01      	adds	r1, r0, #0
 8004c86:	483d      	ldr	r0, [pc, #244]	; (8004d7c <envelope_create_service+0x9f0>)
 8004c88:	f00c f864 	bl	8010d54 <__aeabi_fsub>
 8004c8c:	493c      	ldr	r1, [pc, #240]	; (8004d80 <envelope_create_service+0x9f4>)
 8004c8e:	f00c f861 	bl	8010d54 <__aeabi_fsub>
 8004c92:	493c      	ldr	r1, [pc, #240]	; (8004d84 <envelope_create_service+0x9f8>)
 8004c94:	f00b fe1a 	bl	80108cc <__aeabi_fdiv>
 8004c98:	239e      	movs	r3, #158	; 0x9e
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	50e0      	str	r0, [r4, r3]
 8004c9e:	238f      	movs	r3, #143	; 0x8f
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	18e3      	adds	r3, r4, r3
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8004ca8:	e660      	b.n	800496c <envelope_create_service+0x5e0>
 8004caa:	0030      	movs	r0, r6
 8004cac:	1c3a      	adds	r2, r7, #0
 8004cae:	2109      	movs	r1, #9
 8004cb0:	3074      	adds	r0, #116	; 0x74
 8004cb2:	f00b f82d 	bl	800fd10 <eval_even_poly_f32.lto_priv.546>
 8004cb6:	1c01      	adds	r1, r0, #0
 8004cb8:	1c38      	adds	r0, r7, #0
 8004cba:	f00b ff19 	bl	8010af0 <__aeabi_fmul>
 8004cbe:	e7e8      	b.n	8004c92 <envelope_create_service+0x906>
 8004cc0:	4831      	ldr	r0, [pc, #196]	; (8004d88 <envelope_create_service+0x9fc>)
 8004cc2:	e7e6      	b.n	8004c92 <envelope_create_service+0x906>
 8004cc4:	4b31      	ldr	r3, [pc, #196]	; (8004d8c <envelope_create_service+0xa00>)
 8004cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc8:	e7e9      	b.n	8004c9e <envelope_create_service+0x912>
 8004cca:	0022      	movs	r2, r4
 8004ccc:	4659      	mov	r1, fp
 8004cce:	32f8      	adds	r2, #248	; 0xf8
 8004cd0:	600a      	str	r2, [r1, #0]
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	0023      	movs	r3, r4
 8004cd6:	229c      	movs	r2, #156	; 0x9c
 8004cd8:	3375      	adds	r3, #117	; 0x75
 8004cda:	0052      	lsls	r2, r2, #1
 8004cdc:	33ff      	adds	r3, #255	; 0xff
 8004cde:	50a3      	str	r3, [r4, r2]
 8004ce0:	323c      	adds	r2, #60	; 0x3c
 8004ce2:	3344      	adds	r3, #68	; 0x44
 8004ce4:	50a3      	str	r3, [r4, r2]
 8004ce6:	2380      	movs	r3, #128	; 0x80
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	3244      	adds	r2, #68	; 0x44
 8004cec:	18e3      	adds	r3, r4, r3
 8004cee:	50a3      	str	r3, [r4, r2]
 8004cf0:	238f      	movs	r3, #143	; 0x8f
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	18e3      	adds	r3, r4, r3
 8004cf6:	3248      	adds	r2, #72	; 0x48
 8004cf8:	50a3      	str	r3, [r4, r2]
 8004cfa:	a80b      	add	r0, sp, #44	; 0x2c
 8004cfc:	f7fb ff64 	bl	8000bc8 <configuration_is_valid>
 8004d00:	238f      	movs	r3, #143	; 0x8f
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d01b      	beq.n	8004d40 <envelope_create_service+0x9b4>
 8004d08:	aa11      	add	r2, sp, #68	; 0x44
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	2a00      	cmp	r2, #0
 8004d0e:	d017      	beq.n	8004d40 <envelope_create_service+0x9b4>
 8004d10:	22a4      	movs	r2, #164	; 0xa4
 8004d12:	0092      	lsls	r2, r2, #2
 8004d14:	18a2      	adds	r2, r4, r2
 8004d16:	50e2      	str	r2, [r4, r3]
 8004d18:	3354      	adds	r3, #84	; 0x54
 8004d1a:	50e6      	str	r6, [r4, r3]
 8004d1c:	23b4      	movs	r3, #180	; 0xb4
 8004d1e:	464a      	mov	r2, r9
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	50e2      	str	r2, [r4, r3]
 8004d24:	333c      	adds	r3, #60	; 0x3c
 8004d26:	50e7      	str	r7, [r4, r3]
 8004d28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d2a:	6883      	ldr	r3, [r0, #8]
 8004d2c:	4798      	blx	r3
 8004d2e:	1e06      	subs	r6, r0, #0
 8004d30:	d108      	bne.n	8004d44 <envelope_create_service+0x9b8>
 8004d32:	4643      	mov	r3, r8
 8004d34:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <envelope_create_service+0xa04>)
 8004d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <envelope_create_service+0xa08>)
 8004d3a:	4798      	blx	r3
 8004d3c:	f7ff fbd5 	bl	80044ea <envelope_create_service+0x15e>
 8004d40:	50e6      	str	r6, [r4, r3]
 8004d42:	e7eb      	b.n	8004d1c <envelope_create_service+0x990>
 8004d44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d46:	68c3      	ldr	r3, [r0, #12]
 8004d48:	4798      	blx	r3
 8004d4a:	23e1      	movs	r3, #225	; 0xe1
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	50e2      	str	r2, [r4, r3]
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <envelope_create_service+0xa0c>)
 8004d54:	606b      	str	r3, [r5, #4]
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <envelope_create_service+0xa10>)
 8004d58:	60ab      	str	r3, [r5, #8]
 8004d5a:	4b11      	ldr	r3, [pc, #68]	; (8004da0 <envelope_create_service+0xa14>)
 8004d5c:	60eb      	str	r3, [r5, #12]
 8004d5e:	f7ff fba4 	bl	80044aa <envelope_create_service+0x11e>
 8004d62:	46c0      	nop			; (mov r8, r8)
 8004d64:	3b843809 	.word	0x3b843809
 8004d68:	3f15f61a 	.word	0x3f15f61a
 8004d6c:	3fb504f3 	.word	0x3fb504f3
 8004d70:	3f95f61a 	.word	0x3f95f61a
 8004d74:	bf800000 	.word	0xbf800000
 8004d78:	08016750 	.word	0x08016750
 8004d7c:	3fc90fdb 	.word	0x3fc90fdb
 8004d80:	333bbd2e 	.word	0x333bbd2e
 8004d84:	40490fdb 	.word	0x40490fdb
 8004d88:	7fc00000 	.word	0x7fc00000
 8004d8c:	080001c1 	.word	0x080001c1
 8004d90:	0801d58d 	.word	0x0801d58d
 8004d94:	0801d6b1 	.word	0x0801d6b1
 8004d98:	08003d41 	.word	0x08003d41
 8004d9c:	08001b0d 	.word	0x08001b0d
 8004da0:	08000a0d 	.word	0x08000a0d

08004da4 <initRSS>:
void initRSS(void){
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	46de      	mov	lr, fp
 8004da8:	4657      	mov	r7, sl
 8004daa:	4645      	mov	r5, r8
 8004dac:	464e      	mov	r6, r9
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 8004dae:	4c66      	ldr	r4, [pc, #408]	; (8004f48 <initRSS+0x1a4>)
void initRSS(void){
 8004db0:	b5e0      	push	{r5, r6, r7, lr}
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 8004db2:	0020      	movs	r0, r4
 8004db4:	f010 ff9c 	bl	8015cf0 <__wrap_printf>
 8004db8:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <initRSS+0x1a8>)
 8004dba:	4965      	ldr	r1, [pc, #404]	; (8004f50 <initRSS+0x1ac>)
 8004dbc:	4865      	ldr	r0, [pc, #404]	; (8004f54 <initRSS+0x1b0>)
 8004dbe:	f010 ff97 	bl	8015cf0 <__wrap_printf>
 8004dc2:	22a8      	movs	r2, #168	; 0xa8
 8004dc4:	4b64      	ldr	r3, [pc, #400]	; (8004f58 <initRSS+0x1b4>)
 8004dc6:	4f65      	ldr	r7, [pc, #404]	; (8004f5c <initRSS+0x1b8>)
 8004dc8:	0019      	movs	r1, r3
 8004dca:	0052      	lsls	r2, r2, #1
 8004dcc:	0038      	movs	r0, r7
 8004dce:	4698      	mov	r8, r3
 8004dd0:	f010 ff8e 	bl	8015cf0 <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 8004dd4:	0020      	movs	r0, r4
 8004dd6:	f010 ff8b 	bl	8015cf0 <__wrap_printf>
 8004dda:	2102      	movs	r1, #2
 8004ddc:	4860      	ldr	r0, [pc, #384]	; (8004f60 <initRSS+0x1bc>)
 8004dde:	f7fc fd0e 	bl	80017fe <get_byte>
 8004de2:	2101      	movs	r1, #1
 8004de4:	0005      	movs	r5, r0
 8004de6:	485e      	ldr	r0, [pc, #376]	; (8004f60 <initRSS+0x1bc>)
 8004de8:	f7fc fd09 	bl	80017fe <get_byte>
 8004dec:	2100      	movs	r1, #0
 8004dee:	0006      	movs	r6, r0
 8004df0:	485b      	ldr	r0, [pc, #364]	; (8004f60 <initRSS+0x1bc>)
 8004df2:	f7fc fd04 	bl	80017fe <get_byte>
 8004df6:	0029      	movs	r1, r5
 8004df8:	0003      	movs	r3, r0
 8004dfa:	0032      	movs	r2, r6
 8004dfc:	4859      	ldr	r0, [pc, #356]	; (8004f64 <initRSS+0x1c0>)
 8004dfe:	f010 ff77 	bl	8015cf0 <__wrap_printf>
 8004e02:	2252      	movs	r2, #82	; 0x52
 8004e04:	4641      	mov	r1, r8
 8004e06:	32ff      	adds	r2, #255	; 0xff
 8004e08:	0038      	movs	r0, r7
 8004e0a:	f010 ff71 	bl	8015cf0 <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 8004e0e:	0020      	movs	r0, r4
 8004e10:	f010 ff6e 	bl	8015cf0 <__wrap_printf>
 8004e14:	2102      	movs	r1, #2
 8004e16:	4854      	ldr	r0, [pc, #336]	; (8004f68 <initRSS+0x1c4>)
 8004e18:	f7fc fcf1 	bl	80017fe <get_byte>
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	0004      	movs	r4, r0
 8004e20:	4851      	ldr	r0, [pc, #324]	; (8004f68 <initRSS+0x1c4>)
 8004e22:	f7fc fcec 	bl	80017fe <get_byte>
 8004e26:	2100      	movs	r1, #0
 8004e28:	0005      	movs	r5, r0
 8004e2a:	484f      	ldr	r0, [pc, #316]	; (8004f68 <initRSS+0x1c4>)
 8004e2c:	f7fc fce7 	bl	80017fe <get_byte>
 8004e30:	002a      	movs	r2, r5
 8004e32:	0003      	movs	r3, r0
 8004e34:	0021      	movs	r1, r4
 8004e36:	484d      	ldr	r0, [pc, #308]	; (8004f6c <initRSS+0x1c8>)
 8004e38:	f010 ff5a 	bl	8015cf0 <__wrap_printf>
 8004e3c:	22a9      	movs	r2, #169	; 0xa9
 8004e3e:	4641      	mov	r1, r8
 8004e40:	0052      	lsls	r2, r2, #1
 8004e42:	0038      	movs	r0, r7
 8004e44:	f010 ff54 	bl	8015cf0 <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 8004e48:	f7fc fdc0 	bl	80019cc <acc_hal_integration_get_implementation>
 8004e4c:	4c48      	ldr	r4, [pc, #288]	; (8004f70 <initRSS+0x1cc>)
 8004e4e:	0001      	movs	r1, r0
 8004e50:	0020      	movs	r0, r4
 8004e52:	2238      	movs	r2, #56	; 0x38
 8004e54:	305c      	adds	r0, #92	; 0x5c
 8004e56:	f011 fc11 	bl	801667c <memcpy>
 8004e5a:	4d46      	ldr	r5, [pc, #280]	; (8004f74 <initRSS+0x1d0>)
 8004e5c:	4a46      	ldr	r2, [pc, #280]	; (8004f78 <initRSS+0x1d4>)
 8004e5e:	7d2b      	ldrb	r3, [r5, #20]
 8004e60:	4692      	mov	sl, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d000      	beq.n	8004e68 <initRSS+0xc4>
 8004e66:	e1ce      	b.n	8005206 <initRSS+0x462>
 8004e68:	0023      	movs	r3, r4
 8004e6a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004e6c:	3390      	adds	r3, #144	; 0x90
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2a00      	cmp	r2, #0
 8004e72:	d100      	bne.n	8004e76 <initRSS+0xd2>
 8004e74:	e08a      	b.n	8004f8c <initRSS+0x1e8>
 8004e76:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004e78:	2a00      	cmp	r2, #0
 8004e7a:	d100      	bne.n	8004e7e <initRSS+0xda>
 8004e7c:	e086      	b.n	8004f8c <initRSS+0x1e8>
 8004e7e:	0022      	movs	r2, r4
 8004e80:	3208      	adds	r2, #8
 8004e82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d100      	bne.n	8004e8a <initRSS+0xe6>
 8004e88:	e080      	b.n	8004f8c <initRSS+0x1e8>
 8004e8a:	1d22      	adds	r2, r4, #4
 8004e8c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004e8e:	2a00      	cmp	r2, #0
 8004e90:	d07c      	beq.n	8004f8c <initRSS+0x1e8>
 8004e92:	0022      	movs	r2, r4
 8004e94:	3288      	adds	r2, #136	; 0x88
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	2a00      	cmp	r2, #0
 8004e9a:	d077      	beq.n	8004f8c <initRSS+0x1e8>
 8004e9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	d074      	beq.n	8004f8c <initRSS+0x1e8>
 8004ea2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004ea4:	2a00      	cmp	r2, #0
 8004ea6:	d071      	beq.n	8004f8c <initRSS+0x1e8>
 8004ea8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004eaa:	2a00      	cmp	r2, #0
 8004eac:	d06e      	beq.n	8004f8c <initRSS+0x1e8>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d072      	beq.n	8004f98 <initRSS+0x1f4>
 8004eb2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004eb4:	2a2a      	cmp	r2, #42	; 0x2a
 8004eb6:	d86b      	bhi.n	8004f90 <initRSS+0x1ec>
 8004eb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004eba:	2a0f      	cmp	r2, #15
 8004ebc:	d968      	bls.n	8004f90 <initRSS+0x1ec>
 8004ebe:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004ec0:	2a00      	cmp	r2, #0
 8004ec2:	d002      	beq.n	8004eca <initRSS+0x126>
 8004ec4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004ec6:	2a00      	cmp	r2, #0
 8004ec8:	d062      	beq.n	8004f90 <initRSS+0x1ec>
 8004eca:	0021      	movs	r1, r4
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <initRSS+0x1d8>)
 8004ece:	315c      	adds	r1, #92	; 0x5c
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	2238      	movs	r2, #56	; 0x38
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	f011 fbd1 	bl	801667c <memcpy>
 8004eda:	4653      	mov	r3, sl
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <initRSS+0x146>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4652      	mov	r2, sl
 8004ee6:	756b      	strb	r3, [r5, #21]
 8004ee8:	7113      	strb	r3, [r2, #4]
 8004eea:	4653      	mov	r3, sl
 8004eec:	791b      	ldrb	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d100      	bne.n	8004ef4 <initRSS+0x150>
 8004ef2:	e181      	b.n	80051f8 <initRSS+0x454>
 8004ef4:	7dae      	ldrb	r6, [r5, #22]
 8004ef6:	2e00      	cmp	r6, #0
 8004ef8:	d117      	bne.n	8004f2a <initRSS+0x186>
 8004efa:	464b      	mov	r3, r9
 8004efc:	2048      	movs	r0, #72	; 0x48
 8004efe:	2254      	movs	r2, #84	; 0x54
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	32ff      	adds	r2, #255	; 0xff
 8004f04:	4358      	muls	r0, r3
 8004f06:	491e      	ldr	r1, [pc, #120]	; (8004f80 <initRSS+0x1dc>)
 8004f08:	f7ff f8fc 	bl	8004104 <acc_rss_integration_mem_alloc_debug>
 8004f0c:	4653      	mov	r3, sl
 8004f0e:	6018      	str	r0, [r3, #0]
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d100      	bne.n	8004f16 <initRSS+0x172>
 8004f14:	e170      	b.n	80051f8 <initRSS+0x454>
 8004f16:	3040      	adds	r0, #64	; 0x40
 8004f18:	0004      	movs	r4, r0
 8004f1a:	46b3      	mov	fp, r6
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	429e      	cmp	r6, r3
 8004f22:	d200      	bcs.n	8004f26 <initRSS+0x182>
 8004f24:	e159      	b.n	80051da <initRSS+0x436>
 8004f26:	2301      	movs	r3, #1
 8004f28:	75ab      	strb	r3, [r5, #22]
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	752b      	strb	r3, [r5, #20]
 8004f2e:	464b      	mov	r3, r9
 8004f30:	3330      	adds	r3, #48	; 0x30
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d93e      	bls.n	8004fb6 <initRSS+0x212>
 8004f38:	464b      	mov	r3, r9
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <initRSS+0x1e0>)
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	4912      	ldr	r1, [pc, #72]	; (8004f88 <initRSS+0x1e4>)
 8004f40:	2002      	movs	r0, #2
 8004f42:	4798      	blx	r3
 8004f44:	e028      	b.n	8004f98 <initRSS+0x1f4>
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	0801d6c3 	.word	0x0801d6c3
 8004f4c:	0801d6c9 	.word	0x0801d6c9
 8004f50:	0801d6d2 	.word	0x0801d6d2
 8004f54:	0801d6de 	.word	0x0801d6de
 8004f58:	0801d2db 	.word	0x0801d2db
 8004f5c:	0801eb0c 	.word	0x0801eb0c
 8004f60:	bf010400 	.word	0xbf010400
 8004f64:	0801d6ed 	.word	0x0801d6ed
 8004f68:	bd010100 	.word	0xbd010100
 8004f6c:	0801d70c 	.word	0x0801d70c
 8004f70:	2000028c 	.word	0x2000028c
 8004f74:	2000030c 	.word	0x2000030c
 8004f78:	2000008c 	.word	0x2000008c
 8004f7c:	200005d8 	.word	0x200005d8
 8004f80:	0801d415 	.word	0x0801d415
 8004f84:	0801d740 	.word	0x0801d740
 8004f88:	0801d760 	.word	0x0801d760
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d006      	beq.n	8004f9e <initRSS+0x1fa>
 8004f90:	4aa7      	ldr	r2, [pc, #668]	; (8005230 <initRSS+0x48c>)
 8004f92:	49a8      	ldr	r1, [pc, #672]	; (8005234 <initRSS+0x490>)
 8004f94:	2000      	movs	r0, #0
 8004f96:	4798      	blx	r3
	if (!acc_rss_activate(&radar_hal))
 8004f98:	7d2b      	ldrb	r3, [r5, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <initRSS+0x212>
		ERR_PRINTLN("RSS activation fail");
 8004f9e:	48a6      	ldr	r0, [pc, #664]	; (8005238 <initRSS+0x494>)
 8004fa0:	f010 fea6 	bl	8015cf0 <__wrap_printf>
 8004fa4:	48a5      	ldr	r0, [pc, #660]	; (800523c <initRSS+0x498>)
 8004fa6:	f010 fea3 	bl	8015cf0 <__wrap_printf>
 8004faa:	225a      	movs	r2, #90	; 0x5a
 8004fac:	4641      	mov	r1, r8
 8004fae:	32ff      	adds	r2, #255	; 0xff
 8004fb0:	0038      	movs	r0, r7
 8004fb2:	f010 fe9d 	bl	8015cf0 <__wrap_printf>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	4652      	mov	r2, sl
 8004fba:	7153      	strb	r3, [r2, #5]
	sparse_config = acc_service_sparse_configuration_create();
 8004fbc:	f7fd fa9c 	bl	80024f8 <acc_service_sparse_configuration_create>
 8004fc0:	4b9f      	ldr	r3, [pc, #636]	; (8005240 <initRSS+0x49c>)
 8004fc2:	6398      	str	r0, [r3, #56]	; 0x38
	if (sparse_config == NULL)
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d10b      	bne.n	8004fe0 <initRSS+0x23c>
		ERR_PRINTLN("sparse config creation fail");
 8004fc8:	489b      	ldr	r0, [pc, #620]	; (8005238 <initRSS+0x494>)
 8004fca:	f010 fe91 	bl	8015cf0 <__wrap_printf>
 8004fce:	489d      	ldr	r0, [pc, #628]	; (8005244 <initRSS+0x4a0>)
 8004fd0:	f010 fe8e 	bl	8015cf0 <__wrap_printf>
 8004fd4:	22b1      	movs	r2, #177	; 0xb1
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	0052      	lsls	r2, r2, #1
 8004fda:	0038      	movs	r0, r7
 8004fdc:	f010 fe88 	bl	8015cf0 <__wrap_printf>
	sparse_config_far = acc_service_sparse_configuration_create();
 8004fe0:	f7fd fa8a 	bl	80024f8 <acc_service_sparse_configuration_create>
 8004fe4:	61a8      	str	r0, [r5, #24]
	if (sparse_config_far == NULL)
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d10b      	bne.n	8005002 <initRSS+0x25e>
		ERR_PRINTLN("far sparse config creation fail");
 8004fea:	4893      	ldr	r0, [pc, #588]	; (8005238 <initRSS+0x494>)
 8004fec:	f010 fe80 	bl	8015cf0 <__wrap_printf>
 8004ff0:	4895      	ldr	r0, [pc, #596]	; (8005248 <initRSS+0x4a4>)
 8004ff2:	f010 fe7d 	bl	8015cf0 <__wrap_printf>
 8004ff6:	22b5      	movs	r2, #181	; 0xb5
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	0052      	lsls	r2, r2, #1
 8004ffc:	0038      	movs	r0, r7
 8004ffe:	f010 fe77 	bl	8015cf0 <__wrap_printf>
 8005002:	226d      	movs	r2, #109	; 0x6d
 8005004:	4991      	ldr	r1, [pc, #580]	; (800524c <initRSS+0x4a8>)
 8005006:	2090      	movs	r0, #144	; 0x90
 8005008:	f007 ff7c 	bl	800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>
 800500c:	1e04      	subs	r4, r0, #0
 800500e:	d100      	bne.n	8005012 <initRSS+0x26e>
 8005010:	e106      	b.n	8005220 <initRSS+0x47c>
 8005012:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <initRSS+0x4ac>)
 8005014:	0006      	movs	r6, r0
 8005016:	6003      	str	r3, [r0, #0]
 8005018:	4b8e      	ldr	r3, [pc, #568]	; (8005254 <initRSS+0x4b0>)
 800501a:	2700      	movs	r7, #0
 800501c:	6083      	str	r3, [r0, #8]
 800501e:	4b8e      	ldr	r3, [pc, #568]	; (8005258 <initRSS+0x4b4>)
 8005020:	361c      	adds	r6, #28
 8005022:	6143      	str	r3, [r0, #20]
 8005024:	2358      	movs	r3, #88	; 0x58
 8005026:	7107      	strb	r7, [r0, #4]
 8005028:	8303      	strh	r3, [r0, #24]
 800502a:	6106      	str	r6, [r0, #16]
 800502c:	2102      	movs	r1, #2
 800502e:	f7fc f8a3 	bl	8001178 <acc_service_profile_set>
 8005032:	0020      	movs	r0, r4
 8005034:	0039      	movs	r1, r7
 8005036:	f7fc f88d 	bl	8001154 <acc_service_maximize_signal_attenuation_set>
 800503a:	0030      	movs	r0, r6
 800503c:	f7fb fdc4 	bl	8000bc8 <configuration_is_valid>
 8005040:	42b8      	cmp	r0, r7
 8005042:	d001      	beq.n	8005048 <initRSS+0x2a4>
 8005044:	4b85      	ldr	r3, [pc, #532]	; (800525c <initRSS+0x4b8>)
 8005046:	6423      	str	r3, [r4, #64]	; 0x40
 8005048:	0030      	movs	r0, r6
 800504a:	f7fb fdbd 	bl	8000bc8 <configuration_is_valid>
 800504e:	2800      	cmp	r0, #0
 8005050:	d001      	beq.n	8005056 <initRSS+0x2b2>
 8005052:	4b83      	ldr	r3, [pc, #524]	; (8005260 <initRSS+0x4bc>)
 8005054:	6463      	str	r3, [r4, #68]	; 0x44
 8005056:	0030      	movs	r0, r6
 8005058:	f7fb fdb6 	bl	8000bc8 <configuration_is_valid>
 800505c:	2800      	cmp	r0, #0
 800505e:	d003      	beq.n	8005068 <initRSS+0x2c4>
 8005060:	0023      	movs	r3, r4
 8005062:	2206      	movs	r2, #6
 8005064:	334e      	adds	r3, #78	; 0x4e
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	0030      	movs	r0, r6
 800506a:	f7fb fdad 	bl	8000bc8 <configuration_is_valid>
 800506e:	2800      	cmp	r0, #0
 8005070:	d003      	beq.n	800507a <initRSS+0x2d6>
 8005072:	0023      	movs	r3, r4
 8005074:	220a      	movs	r2, #10
 8005076:	3358      	adds	r3, #88	; 0x58
 8005078:	801a      	strh	r2, [r3, #0]
 800507a:	0030      	movs	r0, r6
 800507c:	f7fb fda4 	bl	8000bc8 <configuration_is_valid>
 8005080:	2800      	cmp	r0, #0
 8005082:	d001      	beq.n	8005088 <initRSS+0x2e4>
 8005084:	2301      	movs	r3, #1
 8005086:	62a3      	str	r3, [r4, #40]	; 0x28
 8005088:	0030      	movs	r0, r6
 800508a:	f7fb fe7c 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 800508e:	0030      	movs	r0, r6
 8005090:	f7fb fd9a 	bl	8000bc8 <configuration_is_valid>
 8005094:	2800      	cmp	r0, #0
 8005096:	d001      	beq.n	800509c <initRSS+0x2f8>
 8005098:	2302      	movs	r3, #2
 800509a:	6563      	str	r3, [r4, #84]	; 0x54
 800509c:	0030      	movs	r0, r6
 800509e:	f7fb fd93 	bl	8000bc8 <configuration_is_valid>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d003      	beq.n	80050ae <initRSS+0x30a>
 80050a6:	0023      	movs	r3, r4
 80050a8:	2200      	movs	r2, #0
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	0030      	movs	r0, r6
 80050b0:	f7fb fd8a 	bl	8000bc8 <configuration_is_valid>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d003      	beq.n	80050c0 <initRSS+0x31c>
 80050b8:	0023      	movs	r3, r4
 80050ba:	2200      	movs	r2, #0
 80050bc:	3362      	adds	r3, #98	; 0x62
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	0030      	movs	r0, r6
 80050c2:	f7fb fd81 	bl	8000bc8 <configuration_is_valid>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d003      	beq.n	80050d2 <initRSS+0x32e>
 80050ca:	0023      	movs	r3, r4
 80050cc:	2200      	movs	r2, #0
 80050ce:	3363      	adds	r3, #99	; 0x63
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	0030      	movs	r0, r6
 80050d4:	f7fb fd78 	bl	8000bc8 <configuration_is_valid>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d003      	beq.n	80050e4 <initRSS+0x340>
 80050dc:	0023      	movs	r3, r4
 80050de:	2200      	movs	r2, #0
 80050e0:	3364      	adds	r3, #100	; 0x64
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	0030      	movs	r0, r6
 80050e6:	f7fb fd6f 	bl	8000bc8 <configuration_is_valid>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d007      	beq.n	80050fe <initRSS+0x35a>
 80050ee:	0023      	movs	r3, r4
 80050f0:	2200      	movs	r2, #0
 80050f2:	336b      	adds	r3, #107	; 0x6b
 80050f4:	705a      	strb	r2, [r3, #1]
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	3301      	adds	r3, #1
 80050fa:	3240      	adds	r2, #64	; 0x40
 80050fc:	805a      	strh	r2, [r3, #2]
 80050fe:	0030      	movs	r0, r6
 8005100:	f7fb fd62 	bl	8000bc8 <configuration_is_valid>
 8005104:	2800      	cmp	r0, #0
 8005106:	d003      	beq.n	8005110 <initRSS+0x36c>
 8005108:	0023      	movs	r3, r4
 800510a:	22ff      	movs	r2, #255	; 0xff
 800510c:	3372      	adds	r3, #114	; 0x72
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	0030      	movs	r0, r6
 8005112:	f7fb fd59 	bl	8000bc8 <configuration_is_valid>
 8005116:	2800      	cmp	r0, #0
 8005118:	d003      	beq.n	8005122 <initRSS+0x37e>
 800511a:	0023      	movs	r3, r4
 800511c:	2200      	movs	r2, #0
 800511e:	3374      	adds	r3, #116	; 0x74
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	0030      	movs	r0, r6
 8005124:	f7fb fd50 	bl	8000bc8 <configuration_is_valid>
 8005128:	2800      	cmp	r0, #0
 800512a:	d004      	beq.n	8005136 <initRSS+0x392>
 800512c:	0023      	movs	r3, r4
 800512e:	2200      	movs	r2, #0
 8005130:	3376      	adds	r3, #118	; 0x76
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	67a2      	str	r2, [r4, #120]	; 0x78
 8005136:	0030      	movs	r0, r6
 8005138:	2101      	movs	r1, #1
 800513a:	f7fb fd71 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
 800513e:	0030      	movs	r0, r6
 8005140:	f7fb fd42 	bl	8000bc8 <configuration_is_valid>
 8005144:	2800      	cmp	r0, #0
 8005146:	d003      	beq.n	8005150 <initRSS+0x3ac>
 8005148:	0023      	movs	r3, r4
 800514a:	220b      	movs	r2, #11
 800514c:	335a      	adds	r3, #90	; 0x5a
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	0030      	movs	r0, r6
 8005152:	f7fb fd39 	bl	8000bc8 <configuration_is_valid>
 8005156:	2800      	cmp	r0, #0
 8005158:	d003      	beq.n	8005162 <initRSS+0x3be>
 800515a:	0023      	movs	r3, r4
 800515c:	2201      	movs	r2, #1
 800515e:	3365      	adds	r3, #101	; 0x65
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	0030      	movs	r0, r6
 8005164:	f7fb fd30 	bl	8000bc8 <configuration_is_valid>
 8005168:	2800      	cmp	r0, #0
 800516a:	d001      	beq.n	8005170 <initRSS+0x3cc>
 800516c:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <initRSS+0x4c0>)
 800516e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005170:	0030      	movs	r0, r6
 8005172:	f7fb fd29 	bl	8000bc8 <configuration_is_valid>
 8005176:	2800      	cmp	r0, #0
 8005178:	d005      	beq.n	8005186 <initRSS+0x3e2>
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <initRSS+0x4c4>)
 800517c:	2201      	movs	r2, #1
 800517e:	6323      	str	r3, [r4, #48]	; 0x30
 8005180:	0023      	movs	r3, r4
 8005182:	3334      	adds	r3, #52	; 0x34
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	0030      	movs	r0, r6
 8005188:	f7fb fd1e 	bl	8000bc8 <configuration_is_valid>
 800518c:	2800      	cmp	r0, #0
 800518e:	d003      	beq.n	8005198 <initRSS+0x3f4>
 8005190:	0023      	movs	r3, r4
 8005192:	2201      	movs	r2, #1
 8005194:	3338      	adds	r3, #56	; 0x38
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	0030      	movs	r0, r6
 800519a:	f7fb fd15 	bl	8000bc8 <configuration_is_valid>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d003      	beq.n	80051aa <initRSS+0x406>
 80051a2:	0023      	movs	r3, r4
 80051a4:	2201      	movs	r2, #1
 80051a6:	336a      	adds	r3, #106	; 0x6a
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	0030      	movs	r0, r6
 80051ac:	f7fb fd0c 	bl	8000bc8 <configuration_is_valid>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	d004      	beq.n	80051be <initRSS+0x41a>
 80051b4:	2296      	movs	r2, #150	; 0x96
 80051b6:	0023      	movs	r3, r4
 80051b8:	0152      	lsls	r2, r2, #5
 80051ba:	3370      	adds	r3, #112	; 0x70
 80051bc:	801a      	strh	r2, [r3, #0]
 80051be:	0030      	movs	r0, r6
 80051c0:	f7fb fd02 	bl	8000bc8 <configuration_is_valid>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d030      	beq.n	800522a <initRSS+0x486>
 80051c8:	4b28      	ldr	r3, [pc, #160]	; (800526c <initRSS+0x4c8>)
    envelope_config = acc_service_envelope_configuration_create();
 80051ca:	61ec      	str	r4, [r5, #28]
 80051cc:	61e3      	str	r3, [r4, #28]
}
 80051ce:	bc3c      	pop	{r2, r3, r4, r5}
 80051d0:	4690      	mov	r8, r2
 80051d2:	4699      	mov	r9, r3
 80051d4:	46a2      	mov	sl, r4
 80051d6:	46ab      	mov	fp, r5
 80051d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051da:	0020      	movs	r0, r4
 80051dc:	2244      	movs	r2, #68	; 0x44
 80051de:	3840      	subs	r0, #64	; 0x40
 80051e0:	2100      	movs	r1, #0
 80051e2:	f00e fd2d 	bl	8013c40 <memset>
 80051e6:	465b      	mov	r3, fp
 80051e8:	7063      	strb	r3, [r4, #1]
 80051ea:	7023      	strb	r3, [r4, #0]
 80051ec:	70a3      	strb	r3, [r4, #2]
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <initRSS+0x4cc>)
 80051f0:	3601      	adds	r6, #1
 80051f2:	6063      	str	r3, [r4, #4]
 80051f4:	3448      	adds	r4, #72	; 0x48
 80051f6:	e691      	b.n	8004f1c <initRSS+0x178>
 80051f8:	464b      	mov	r3, r9
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <initRSS+0x4d0>)
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	491e      	ldr	r1, [pc, #120]	; (8005278 <initRSS+0x4d4>)
 8005200:	2000      	movs	r0, #0
 8005202:	4798      	blx	r3
 8005204:	e6c8      	b.n	8004f98 <initRSS+0x1f4>
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <initRSS+0x4d8>)
 8005208:	001a      	movs	r2, r3
 800520a:	3230      	adds	r2, #48	; 0x30
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	2a01      	cmp	r2, #1
 8005210:	d800      	bhi.n	8005214 <initRSS+0x470>
 8005212:	e6d0      	b.n	8004fb6 <initRSS+0x212>
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005216:	4a1a      	ldr	r2, [pc, #104]	; (8005280 <initRSS+0x4dc>)
 8005218:	4917      	ldr	r1, [pc, #92]	; (8005278 <initRSS+0x4d4>)
 800521a:	2002      	movs	r0, #2
 800521c:	4798      	blx	r3
 800521e:	e6bb      	b.n	8004f98 <initRSS+0x1f4>
    envelope_config = acc_service_envelope_configuration_create();
 8005220:	61e8      	str	r0, [r5, #28]
		printf("envelope config creation fail");
 8005222:	4818      	ldr	r0, [pc, #96]	; (8005284 <initRSS+0x4e0>)
 8005224:	f010 fd64 	bl	8015cf0 <__wrap_printf>
 8005228:	e7d1      	b.n	80051ce <initRSS+0x42a>
    envelope_config = acc_service_envelope_configuration_create();
 800522a:	61ec      	str	r4, [r5, #28]
 800522c:	e7cf      	b.n	80051ce <initRSS+0x42a>
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	0801d72c 	.word	0x0801d72c
 8005234:	0801e2f8 	.word	0x0801e2f8
 8005238:	0801ead4 	.word	0x0801ead4
 800523c:	0801d7a2 	.word	0x0801d7a2
 8005240:	2000018c 	.word	0x2000018c
 8005244:	0801d7ba 	.word	0x0801d7ba
 8005248:	0801d7b6 	.word	0x0801d7b6
 800524c:	0801d7d6 	.word	0x0801d7d6
 8005250:	acc09dd7 	.word	0xacc09dd7
 8005254:	08001365 	.word	0x08001365
 8005258:	0800438d 	.word	0x0800438d
 800525c:	3e4ccccd 	.word	0x3e4ccccd
 8005260:	3ecccccd 	.word	0x3ecccccd
 8005264:	3dcccccd 	.word	0x3dcccccd
 8005268:	3e99999a 	.word	0x3e99999a
 800526c:	080024a5 	.word	0x080024a5
 8005270:	ff800000 	.word	0xff800000
 8005274:	0801d764 	.word	0x0801d764
 8005278:	0801d760 	.word	0x0801d760
 800527c:	200005d8 	.word	0x200005d8
 8005280:	0801d77a 	.word	0x0801d77a
 8005284:	0801d7f9 	.word	0x0801d7f9

08005288 <acc_rss_integration_sensor_device_transfer>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	001e      	movs	r6, r3
 800528c:	000c      	movs	r4, r1
 800528e:	0015      	movs	r5, r2
 8005290:	000b      	movs	r3, r1
 8005292:	3a01      	subs	r2, #1
 8005294:	d209      	bcs.n	80052aa <acc_rss_integration_sensor_device_transfer+0x22>
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <acc_rss_integration_sensor_device_transfer+0x38>)
 8005298:	006a      	lsls	r2, r5, #1
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	0021      	movs	r1, r4
 800529e:	4798      	blx	r3
 80052a0:	2e00      	cmp	r6, #0
 80052a2:	d001      	beq.n	80052a8 <acc_rss_integration_sensor_device_transfer+0x20>
 80052a4:	3d01      	subs	r5, #1
 80052a6:	d205      	bcs.n	80052b4 <acc_rss_integration_sensor_device_transfer+0x2c>
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	8819      	ldrh	r1, [r3, #0]
 80052ac:	ba49      	rev16	r1, r1
 80052ae:	8019      	strh	r1, [r3, #0]
 80052b0:	3302      	adds	r3, #2
 80052b2:	e7ee      	b.n	8005292 <acc_rss_integration_sensor_device_transfer+0xa>
 80052b4:	8823      	ldrh	r3, [r4, #0]
 80052b6:	ba5b      	rev16	r3, r3
 80052b8:	8023      	strh	r3, [r4, #0]
 80052ba:	3402      	adds	r4, #2
 80052bc:	e7f2      	b.n	80052a4 <acc_rss_integration_sensor_device_transfer+0x1c>
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	200005d8 	.word	0x200005d8

080052c4 <acc_sensor_r2_conf_write_instr>:
 80052c4:	23a0      	movs	r3, #160	; 0xa0
 80052c6:	b530      	push	{r4, r5, lr}
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	b085      	sub	sp, #20
 80052cc:	4319      	orrs	r1, r3
 80052ce:	ac02      	add	r4, sp, #8
 80052d0:	8021      	strh	r1, [r4, #0]
 80052d2:	210a      	movs	r1, #10
 80052d4:	0005      	movs	r5, r0
 80052d6:	9201      	str	r2, [sp, #4]
 80052d8:	4469      	add	r1, sp
 80052da:	a801      	add	r0, sp, #4
 80052dc:	2201      	movs	r2, #1
 80052de:	f00a fbd3 	bl	800fa88 <acc_confprogram_copy>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2203      	movs	r2, #3
 80052e6:	0021      	movs	r1, r4
 80052e8:	0028      	movs	r0, r5
 80052ea:	f7ff ffcd 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 80052ee:	b005      	add	sp, #20
 80052f0:	bd30      	pop	{r4, r5, pc}

080052f2 <acc_sensor_r2_load_confmem>:
 80052f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f4:	4647      	mov	r7, r8
 80052f6:	46ce      	mov	lr, r9
 80052f8:	1c5c      	adds	r4, r3, #1
 80052fa:	4d17      	ldr	r5, [pc, #92]	; (8005358 <acc_sensor_r2_load_confmem+0x66>)
 80052fc:	0063      	lsls	r3, r4, #1
 80052fe:	4699      	mov	r9, r3
 8005300:	002b      	movs	r3, r5
 8005302:	b580      	push	{r7, lr}
 8005304:	3330      	adds	r3, #48	; 0x30
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	b083      	sub	sp, #12
 800530a:	0006      	movs	r6, r0
 800530c:	4688      	mov	r8, r1
 800530e:	0017      	movs	r7, r2
 8005310:	2b03      	cmp	r3, #3
 8005312:	d906      	bls.n	8005322 <acc_sensor_r2_load_confmem+0x30>
 8005314:	9100      	str	r1, [sp, #0]
 8005316:	0003      	movs	r3, r0
 8005318:	4a10      	ldr	r2, [pc, #64]	; (800535c <acc_sensor_r2_load_confmem+0x6a>)
 800531a:	4911      	ldr	r1, [pc, #68]	; (8005360 <acc_sensor_r2_load_confmem+0x6e>)
 800531c:	2004      	movs	r0, #4
 800531e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8005320:	47a0      	blx	r4
 8005322:	686b      	ldr	r3, [r5, #4]
 8005324:	4599      	cmp	r9, r3
 8005326:	d909      	bls.n	800533c <acc_sensor_r2_load_confmem+0x4a>
 8005328:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <acc_sensor_r2_load_confmem+0x72>)
 800532c:	490c      	ldr	r1, [pc, #48]	; (8005360 <acc_sensor_r2_load_confmem+0x6e>)
 800532e:	2000      	movs	r0, #0
 8005330:	4798      	blx	r3
 8005332:	b003      	add	sp, #12
 8005334:	bc0c      	pop	{r2, r3}
 8005336:	4690      	mov	r8, r2
 8005338:	4699      	mov	r9, r3
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533c:	21a0      	movs	r1, #160	; 0xa0
 800533e:	4643      	mov	r3, r8
 8005340:	01c9      	lsls	r1, r1, #7
 8005342:	4319      	orrs	r1, r3
 8005344:	464b      	mov	r3, r9
 8005346:	8039      	strh	r1, [r7, #0]
 8005348:	085a      	lsrs	r2, r3, #1
 800534a:	0039      	movs	r1, r7
 800534c:	2300      	movs	r3, #0
 800534e:	0030      	movs	r0, r6
 8005350:	f7ff ff9a 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 8005354:	e7ed      	b.n	8005332 <acc_sensor_r2_load_confmem+0x40>
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	200005d8 	.word	0x200005d8
 800535c:	0801d817 	.word	0x0801d817
 8005360:	0801d83d 	.word	0x0801d83d
 8005364:	0801d847 	.word	0x0801d847

08005368 <acc_cpd_linear_sweep_load_program>:
 8005368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536a:	46de      	mov	lr, fp
 800536c:	4657      	mov	r7, sl
 800536e:	4645      	mov	r5, r8
 8005370:	464e      	mov	r6, r9
 8005372:	b5e0      	push	{r5, r6, r7, lr}
 8005374:	001f      	movs	r7, r3
 8005376:	2316      	movs	r3, #22
 8005378:	b08f      	sub	sp, #60	; 0x3c
 800537a:	ac0b      	add	r4, sp, #44	; 0x2c
 800537c:	7023      	strb	r3, [r4, #0]
 800537e:	2307      	movs	r3, #7
 8005380:	9005      	str	r0, [sp, #20]
 8005382:	9108      	str	r1, [sp, #32]
 8005384:	0015      	movs	r5, r2
 8005386:	900c      	str	r0, [sp, #48]	; 0x30
 8005388:	22bc      	movs	r2, #188	; 0xbc
 800538a:	0039      	movs	r1, r7
 800538c:	0020      	movs	r0, r4
 800538e:	930d      	str	r3, [sp, #52]	; 0x34
 8005390:	f7fa feb8 	bl	8000104 <acc_probes_execute>
 8005394:	2300      	movs	r3, #0
 8005396:	930b      	str	r3, [sp, #44]	; 0x2c
 8005398:	930a      	str	r3, [sp, #40]	; 0x28
 800539a:	ab0a      	add	r3, sp, #40	; 0x28
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	002a      	movs	r2, r5
 80053a0:	0023      	movs	r3, r4
 80053a2:	9908      	ldr	r1, [sp, #32]
 80053a4:	9805      	ldr	r0, [sp, #20]
 80053a6:	f00b f863 	bl	8010470 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80053aa:	9009      	str	r0, [sp, #36]	; 0x24
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d101      	bne.n	80053b4 <acc_cpd_linear_sweep_load_program+0x4c>
 80053b0:	f000 fc50 	bl	8005c54 <acc_cpd_linear_sweep_load_program+0x8ec>
 80053b4:	4bf9      	ldr	r3, [pc, #996]	; (800579c <acc_cpd_linear_sweep_load_program+0x434>)
 80053b6:	001a      	movs	r2, r3
 80053b8:	3230      	adds	r2, #48	; 0x30
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	2a03      	cmp	r2, #3
 80053be:	d904      	bls.n	80053ca <acc_cpd_linear_sweep_load_program+0x62>
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	4af7      	ldr	r2, [pc, #988]	; (80057a0 <acc_cpd_linear_sweep_load_program+0x438>)
 80053c4:	49f7      	ldr	r1, [pc, #988]	; (80057a4 <acc_cpd_linear_sweep_load_program+0x43c>)
 80053c6:	2004      	movs	r0, #4
 80053c8:	4798      	blx	r3
 80053ca:	2300      	movs	r3, #0
 80053cc:	469b      	mov	fp, r3
 80053ce:	23e2      	movs	r3, #226	; 0xe2
 80053d0:	465a      	mov	r2, fp
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053d8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80053da:	9203      	str	r2, [sp, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d900      	bls.n	80053e2 <acc_cpd_linear_sweep_load_program+0x7a>
 80053e0:	9303      	str	r3, [sp, #12]
 80053e2:	465b      	mov	r3, fp
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	9306      	str	r3, [sp, #24]
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	0021      	movs	r1, r4
 80053ec:	085a      	lsrs	r2, r3, #1
 80053ee:	9b06      	ldr	r3, [sp, #24]
 80053f0:	0098      	lsls	r0, r3, #2
 80053f2:	4bed      	ldr	r3, [pc, #948]	; (80057a8 <acc_cpd_linear_sweep_load_program+0x440>)
 80053f4:	18c0      	adds	r0, r0, r3
 80053f6:	f00a fb47 	bl	800fa88 <acc_confprogram_copy>
 80053fa:	465b      	mov	r3, fp
 80053fc:	b29d      	uxth	r5, r3
 80053fe:	466b      	mov	r3, sp
 8005400:	899e      	ldrh	r6, [r3, #12]
 8005402:	4bea      	ldr	r3, [pc, #936]	; (80057ac <acc_cpd_linear_sweep_load_program+0x444>)
 8005404:	0032      	movs	r2, r6
 8005406:	4698      	mov	r8, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	0029      	movs	r1, r5
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	2350      	movs	r3, #80	; 0x50
 8005410:	0020      	movs	r0, r4
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4643      	mov	r3, r8
 8005416:	f00a fb7f 	bl	800fb18 <acc_confprogram_patch_offset>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0032      	movs	r2, r6
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	234e      	movs	r3, #78	; 0x4e
 8005422:	0029      	movs	r1, r5
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	0020      	movs	r0, r4
 8005428:	4643      	mov	r3, r8
 800542a:	f00a fb75 	bl	800fb18 <acc_confprogram_patch_offset>
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0032      	movs	r2, r6
 8005432:	9301      	str	r3, [sp, #4]
 8005434:	234f      	movs	r3, #79	; 0x4f
 8005436:	0029      	movs	r1, r5
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	0020      	movs	r0, r4
 800543c:	4643      	mov	r3, r8
 800543e:	f00a fb6b 	bl	800fb18 <acc_confprogram_patch_offset>
 8005442:	89bb      	ldrh	r3, [r7, #12]
 8005444:	0032      	movs	r2, r6
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	234c      	movs	r3, #76	; 0x4c
 800544a:	0029      	movs	r1, r5
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	0020      	movs	r0, r4
 8005450:	4643      	mov	r3, r8
 8005452:	f00a fb61 	bl	800fb18 <acc_confprogram_patch_offset>
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	0032      	movs	r2, r6
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2326      	movs	r3, #38	; 0x26
 800545e:	0029      	movs	r1, r5
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	0020      	movs	r0, r4
 8005464:	4643      	mov	r3, r8
 8005466:	f00a fb57 	bl	800fb18 <acc_confprogram_patch_offset>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	0032      	movs	r2, r6
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2373      	movs	r3, #115	; 0x73
 8005472:	0029      	movs	r1, r5
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	0020      	movs	r0, r4
 8005478:	4643      	mov	r3, r8
 800547a:	f00a fb4d 	bl	800fb18 <acc_confprogram_patch_offset>
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	0032      	movs	r2, r6
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	2362      	movs	r3, #98	; 0x62
 8005486:	0029      	movs	r1, r5
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	0020      	movs	r0, r4
 800548c:	4643      	mov	r3, r8
 800548e:	f00a fb43 	bl	800fb18 <acc_confprogram_patch_offset>
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	0032      	movs	r2, r6
 8005496:	9301      	str	r3, [sp, #4]
 8005498:	2337      	movs	r3, #55	; 0x37
 800549a:	0029      	movs	r1, r5
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	0020      	movs	r0, r4
 80054a0:	4643      	mov	r3, r8
 80054a2:	f00a fb39 	bl	800fb18 <acc_confprogram_patch_offset>
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	0032      	movs	r2, r6
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	2376      	movs	r3, #118	; 0x76
 80054ae:	0029      	movs	r1, r5
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	0020      	movs	r0, r4
 80054b4:	4643      	mov	r3, r8
 80054b6:	f00a fb2f 	bl	800fb18 <acc_confprogram_patch_offset>
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	0032      	movs	r2, r6
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	2369      	movs	r3, #105	; 0x69
 80054c2:	0029      	movs	r1, r5
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	0020      	movs	r0, r4
 80054c8:	4643      	mov	r3, r8
 80054ca:	f00a fb25 	bl	800fb18 <acc_confprogram_patch_offset>
 80054ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d0:	0032      	movs	r2, r6
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	236a      	movs	r3, #106	; 0x6a
 80054d6:	0029      	movs	r1, r5
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	0020      	movs	r0, r4
 80054dc:	4643      	mov	r3, r8
 80054de:	f00a fb1b 	bl	800fb18 <acc_confprogram_patch_offset>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	0032      	movs	r2, r6
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	2319      	movs	r3, #25
 80054ea:	0029      	movs	r1, r5
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	0020      	movs	r0, r4
 80054f0:	4643      	mov	r3, r8
 80054f2:	f00a fb11 	bl	800fb18 <acc_confprogram_patch_offset>
 80054f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f8:	0032      	movs	r2, r6
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	231a      	movs	r3, #26
 80054fe:	0029      	movs	r1, r5
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	0020      	movs	r0, r4
 8005504:	4643      	mov	r3, r8
 8005506:	f00a fb07 	bl	800fb18 <acc_confprogram_patch_offset>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	0032      	movs	r2, r6
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	231b      	movs	r3, #27
 8005512:	0029      	movs	r1, r5
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	0020      	movs	r0, r4
 8005518:	4643      	mov	r3, r8
 800551a:	f00a fafd 	bl	800fb18 <acc_confprogram_patch_offset>
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	0032      	movs	r2, r6
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	231c      	movs	r3, #28
 8005526:	0029      	movs	r1, r5
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	0020      	movs	r0, r4
 800552c:	4643      	mov	r3, r8
 800552e:	f00a faf3 	bl	800fb18 <acc_confprogram_patch_offset>
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	0032      	movs	r2, r6
 8005536:	9301      	str	r3, [sp, #4]
 8005538:	231d      	movs	r3, #29
 800553a:	0029      	movs	r1, r5
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	0020      	movs	r0, r4
 8005540:	4643      	mov	r3, r8
 8005542:	f00a fae9 	bl	800fb18 <acc_confprogram_patch_offset>
 8005546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005548:	0032      	movs	r2, r6
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	231e      	movs	r3, #30
 800554e:	0029      	movs	r1, r5
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	0020      	movs	r0, r4
 8005554:	4643      	mov	r3, r8
 8005556:	f00a fadf 	bl	800fb18 <acc_confprogram_patch_offset>
 800555a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555c:	0032      	movs	r2, r6
 800555e:	9301      	str	r3, [sp, #4]
 8005560:	2355      	movs	r3, #85	; 0x55
 8005562:	0029      	movs	r1, r5
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	0020      	movs	r0, r4
 8005568:	4643      	mov	r3, r8
 800556a:	f00a fad5 	bl	800fb18 <acc_confprogram_patch_offset>
 800556e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005570:	0032      	movs	r2, r6
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	2356      	movs	r3, #86	; 0x56
 8005576:	0029      	movs	r1, r5
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	0020      	movs	r0, r4
 800557c:	4643      	mov	r3, r8
 800557e:	f00a facb 	bl	800fb18 <acc_confprogram_patch_offset>
 8005582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005584:	0032      	movs	r2, r6
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	2358      	movs	r3, #88	; 0x58
 800558a:	0029      	movs	r1, r5
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	0020      	movs	r0, r4
 8005590:	4643      	mov	r3, r8
 8005592:	f00a fac1 	bl	800fb18 <acc_confprogram_patch_offset>
 8005596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005598:	0032      	movs	r2, r6
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	236b      	movs	r3, #107	; 0x6b
 800559e:	0029      	movs	r1, r5
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	0020      	movs	r0, r4
 80055a4:	4643      	mov	r3, r8
 80055a6:	f00a fab7 	bl	800fb18 <acc_confprogram_patch_offset>
 80055aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ac:	0032      	movs	r2, r6
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	2386      	movs	r3, #134	; 0x86
 80055b2:	0029      	movs	r1, r5
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	0020      	movs	r0, r4
 80055b8:	4643      	mov	r3, r8
 80055ba:	f00a faad 	bl	800fb18 <acc_confprogram_patch_offset>
 80055be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c0:	0032      	movs	r2, r6
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	2364      	movs	r3, #100	; 0x64
 80055c6:	0029      	movs	r1, r5
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	0020      	movs	r0, r4
 80055cc:	4643      	mov	r3, r8
 80055ce:	f00a faa3 	bl	800fb18 <acc_confprogram_patch_offset>
 80055d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d4:	0032      	movs	r2, r6
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	2365      	movs	r3, #101	; 0x65
 80055da:	0029      	movs	r1, r5
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	0020      	movs	r0, r4
 80055e0:	4643      	mov	r3, r8
 80055e2:	f00a fa99 	bl	800fb18 <acc_confprogram_patch_offset>
 80055e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e8:	0032      	movs	r2, r6
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	0029      	movs	r1, r5
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	0020      	movs	r0, r4
 80055f4:	4643      	mov	r3, r8
 80055f6:	f00a fa8f 	bl	800fb18 <acc_confprogram_patch_offset>
 80055fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055fc:	0032      	movs	r2, r6
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	2341      	movs	r3, #65	; 0x41
 8005602:	0029      	movs	r1, r5
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	0020      	movs	r0, r4
 8005608:	4643      	mov	r3, r8
 800560a:	f00a fa85 	bl	800fb18 <acc_confprogram_patch_offset>
 800560e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005610:	0032      	movs	r2, r6
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	2372      	movs	r3, #114	; 0x72
 8005616:	0029      	movs	r1, r5
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	0020      	movs	r0, r4
 800561c:	4643      	mov	r3, r8
 800561e:	f00a fa7b 	bl	800fb18 <acc_confprogram_patch_offset>
 8005622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005624:	0032      	movs	r2, r6
 8005626:	9301      	str	r3, [sp, #4]
 8005628:	2354      	movs	r3, #84	; 0x54
 800562a:	0029      	movs	r1, r5
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	0020      	movs	r0, r4
 8005630:	4643      	mov	r3, r8
 8005632:	f00a fa71 	bl	800fb18 <acc_confprogram_patch_offset>
 8005636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005638:	0032      	movs	r2, r6
 800563a:	9301      	str	r3, [sp, #4]
 800563c:	2339      	movs	r3, #57	; 0x39
 800563e:	0029      	movs	r1, r5
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	0020      	movs	r0, r4
 8005644:	4643      	mov	r3, r8
 8005646:	f00a fa67 	bl	800fb18 <acc_confprogram_patch_offset>
 800564a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564c:	2b00      	cmp	r3, #0
 800564e:	d06f      	beq.n	8005730 <acc_cpd_linear_sweep_load_program+0x3c8>
 8005650:	2301      	movs	r3, #1
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	330f      	adds	r3, #15
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	0032      	movs	r2, r6
 800565a:	4643      	mov	r3, r8
 800565c:	0029      	movs	r1, r5
 800565e:	0020      	movs	r0, r4
 8005660:	f00a fa5a 	bl	800fb18 <acc_confprogram_patch_offset>
 8005664:	4b52      	ldr	r3, [pc, #328]	; (80057b0 <acc_cpd_linear_sweep_load_program+0x448>)
 8005666:	0032      	movs	r2, r6
 8005668:	469a      	mov	sl, r3
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	2312      	movs	r3, #18
 800566e:	0029      	movs	r1, r5
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0020      	movs	r0, r4
 8005674:	4643      	mov	r3, r8
 8005676:	f00a fa4f 	bl	800fb18 <acc_confprogram_patch_offset>
 800567a:	2307      	movs	r3, #7
 800567c:	4699      	mov	r9, r3
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	330d      	adds	r3, #13
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	0032      	movs	r2, r6
 8005686:	4643      	mov	r3, r8
 8005688:	0029      	movs	r1, r5
 800568a:	0020      	movs	r0, r4
 800568c:	f00a fa44 	bl	800fb18 <acc_confprogram_patch_offset>
 8005690:	4653      	mov	r3, sl
 8005692:	9301      	str	r3, [sp, #4]
 8005694:	2311      	movs	r3, #17
 8005696:	0032      	movs	r2, r6
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	0029      	movs	r1, r5
 800569c:	4643      	mov	r3, r8
 800569e:	0020      	movs	r0, r4
 80056a0:	f00a fa3a 	bl	800fb18 <acc_confprogram_patch_offset>
 80056a4:	2300      	movs	r3, #0
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	3313      	adds	r3, #19
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	0032      	movs	r2, r6
 80056ae:	4643      	mov	r3, r8
 80056b0:	0029      	movs	r1, r5
 80056b2:	0020      	movs	r0, r4
 80056b4:	f00a fa30 	bl	800fb18 <acc_confprogram_patch_offset>
 80056b8:	4b3e      	ldr	r3, [pc, #248]	; (80057b4 <acc_cpd_linear_sweep_load_program+0x44c>)
 80056ba:	0032      	movs	r2, r6
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	2315      	movs	r3, #21
 80056c0:	0029      	movs	r1, r5
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	0020      	movs	r0, r4
 80056c6:	4643      	mov	r3, r8
 80056c8:	f00a fa26 	bl	800fb18 <acc_confprogram_patch_offset>
 80056cc:	464b      	mov	r3, r9
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	330f      	adds	r3, #15
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	0032      	movs	r2, r6
 80056d6:	4643      	mov	r3, r8
 80056d8:	0029      	movs	r1, r5
 80056da:	0020      	movs	r0, r4
 80056dc:	f00a fa1c 	bl	800fb18 <acc_confprogram_patch_offset>
 80056e0:	4b35      	ldr	r3, [pc, #212]	; (80057b8 <acc_cpd_linear_sweep_load_program+0x450>)
 80056e2:	0032      	movs	r2, r6
 80056e4:	9301      	str	r3, [sp, #4]
 80056e6:	230e      	movs	r3, #14
 80056e8:	0029      	movs	r1, r5
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	0020      	movs	r0, r4
 80056ee:	4643      	mov	r3, r8
 80056f0:	f00a fa12 	bl	800fb18 <acc_confprogram_patch_offset>
 80056f4:	464b      	mov	r3, r9
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	3308      	adds	r3, #8
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	0032      	movs	r2, r6
 80056fe:	4643      	mov	r3, r8
 8005700:	0029      	movs	r1, r5
 8005702:	0020      	movs	r0, r4
 8005704:	f00a fa08 	bl	800fb18 <acc_confprogram_patch_offset>
 8005708:	4b2c      	ldr	r3, [pc, #176]	; (80057bc <acc_cpd_linear_sweep_load_program+0x454>)
 800570a:	0032      	movs	r2, r6
 800570c:	9301      	str	r3, [sp, #4]
 800570e:	2317      	movs	r3, #23
 8005710:	0029      	movs	r1, r5
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	0020      	movs	r0, r4
 8005716:	4643      	mov	r3, r8
 8005718:	f00a f9fe 	bl	800fb18 <acc_confprogram_patch_offset>
 800571c:	464b      	mov	r3, r9
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	3311      	adds	r3, #17
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	0032      	movs	r2, r6
 8005726:	4643      	mov	r3, r8
 8005728:	0029      	movs	r1, r5
 800572a:	0020      	movs	r0, r4
 800572c:	f00a f9f4 	bl	800fb18 <acc_confprogram_patch_offset>
 8005730:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <acc_cpd_linear_sweep_load_program+0x444>)
 8005732:	0032      	movs	r2, r6
 8005734:	4698      	mov	r8, r3
 8005736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005738:	0029      	movs	r1, r5
 800573a:	9301      	str	r3, [sp, #4]
 800573c:	2351      	movs	r3, #81	; 0x51
 800573e:	0020      	movs	r0, r4
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4643      	mov	r3, r8
 8005744:	f00a f9e8 	bl	800fb18 <acc_confprogram_patch_offset>
 8005748:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800574a:	0032      	movs	r2, r6
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	2377      	movs	r3, #119	; 0x77
 8005750:	0029      	movs	r1, r5
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	0020      	movs	r0, r4
 8005756:	4643      	mov	r3, r8
 8005758:	f00a f9de 	bl	800fb18 <acc_confprogram_patch_offset>
 800575c:	1d3b      	adds	r3, r7, #4
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	0032      	movs	r2, r6
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	2344      	movs	r3, #68	; 0x44
 8005766:	0029      	movs	r1, r5
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	0020      	movs	r0, r4
 800576c:	4643      	mov	r3, r8
 800576e:	f00a f9d3 	bl	800fb18 <acc_confprogram_patch_offset>
 8005772:	003b      	movs	r3, r7
 8005774:	3308      	adds	r3, #8
 8005776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005778:	0032      	movs	r2, r6
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	2343      	movs	r3, #67	; 0x43
 800577e:	0029      	movs	r1, r5
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	0020      	movs	r0, r4
 8005784:	4643      	mov	r3, r8
 8005786:	f00a f9c7 	bl	800fb18 <acc_confprogram_patch_offset>
 800578a:	003b      	movs	r3, r7
 800578c:	3388      	adds	r3, #136	; 0x88
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	b29a      	uxth	r2, r3
 8005792:	4691      	mov	r9, r2
 8005794:	2200      	movs	r2, #0
 8005796:	4692      	mov	sl, r2
 8005798:	464a      	mov	r2, r9
 800579a:	e011      	b.n	80057c0 <acc_cpd_linear_sweep_load_program+0x458>
 800579c:	200005d8 	.word	0x200005d8
 80057a0:	0801d867 	.word	0x0801d867
 80057a4:	0801d277 	.word	0x0801d277
 80057a8:	0801b7a0 	.word	0x0801b7a0
 80057ac:	08018c58 	.word	0x08018c58
 80057b0:	0000ff80 	.word	0x0000ff80
 80057b4:	0000ffc0 	.word	0x0000ffc0
 80057b8:	0000fff0 	.word	0x0000fff0
 80057bc:	0000ffff 	.word	0x0000ffff
 80057c0:	2a08      	cmp	r2, #8
 80057c2:	d914      	bls.n	80057ee <acc_cpd_linear_sweep_load_program+0x486>
 80057c4:	464b      	mov	r3, r9
 80057c6:	22ff      	movs	r2, #255	; 0xff
 80057c8:	3b08      	subs	r3, #8
 80057ca:	409a      	lsls	r2, r3
 80057cc:	0013      	movs	r3, r2
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	4393      	bics	r3, r2
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	469a      	mov	sl, r3
 80057d6:	2302      	movs	r3, #2
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	3365      	adds	r3, #101	; 0x65
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	0032      	movs	r2, r6
 80057e0:	4643      	mov	r3, r8
 80057e2:	0029      	movs	r1, r5
 80057e4:	0020      	movs	r0, r4
 80057e6:	f00a f997 	bl	800fb18 <acc_confprogram_patch_offset>
 80057ea:	2308      	movs	r3, #8
 80057ec:	4699      	mov	r9, r3
 80057ee:	4bf2      	ldr	r3, [pc, #968]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 80057f0:	0032      	movs	r2, r6
 80057f2:	4698      	mov	r8, r3
 80057f4:	464b      	mov	r3, r9
 80057f6:	9301      	str	r3, [sp, #4]
 80057f8:	236c      	movs	r3, #108	; 0x6c
 80057fa:	0029      	movs	r1, r5
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	0020      	movs	r0, r4
 8005800:	4643      	mov	r3, r8
 8005802:	f00a f989 	bl	800fb18 <acc_confprogram_patch_offset>
 8005806:	464b      	mov	r3, r9
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	2359      	movs	r3, #89	; 0x59
 800580c:	0032      	movs	r2, r6
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	0029      	movs	r1, r5
 8005812:	4643      	mov	r3, r8
 8005814:	0020      	movs	r0, r4
 8005816:	f00a f97f 	bl	800fb18 <acc_confprogram_patch_offset>
 800581a:	2380      	movs	r3, #128	; 0x80
 800581c:	4652      	mov	r2, sl
 800581e:	431a      	orrs	r2, r3
 8005820:	236e      	movs	r3, #110	; 0x6e
 8005822:	9207      	str	r2, [sp, #28]
 8005824:	9201      	str	r2, [sp, #4]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	0032      	movs	r2, r6
 800582a:	4643      	mov	r3, r8
 800582c:	0029      	movs	r1, r5
 800582e:	0020      	movs	r0, r4
 8005830:	f00a f972 	bl	800fb18 <acc_confprogram_patch_offset>
 8005834:	23c0      	movs	r3, #192	; 0xc0
 8005836:	4652      	mov	r2, sl
 8005838:	431a      	orrs	r2, r3
 800583a:	2370      	movs	r3, #112	; 0x70
 800583c:	4691      	mov	r9, r2
 800583e:	9201      	str	r2, [sp, #4]
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	0032      	movs	r2, r6
 8005844:	4643      	mov	r3, r8
 8005846:	0029      	movs	r1, r5
 8005848:	0020      	movs	r0, r4
 800584a:	f00a f965 	bl	800fb18 <acc_confprogram_patch_offset>
 800584e:	4652      	mov	r2, sl
 8005850:	23ff      	movs	r3, #255	; 0xff
 8005852:	4313      	orrs	r3, r2
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	236f      	movs	r3, #111	; 0x6f
 800585a:	0032      	movs	r2, r6
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	0029      	movs	r1, r5
 8005860:	4643      	mov	r3, r8
 8005862:	0020      	movs	r0, r4
 8005864:	f00a f958 	bl	800fb18 <acc_confprogram_patch_offset>
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	0032      	movs	r2, r6
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	235b      	movs	r3, #91	; 0x5b
 8005870:	0029      	movs	r1, r5
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	0020      	movs	r0, r4
 8005876:	4643      	mov	r3, r8
 8005878:	f00a f94e 	bl	800fb18 <acc_confprogram_patch_offset>
 800587c:	464b      	mov	r3, r9
 800587e:	9301      	str	r3, [sp, #4]
 8005880:	235d      	movs	r3, #93	; 0x5d
 8005882:	0032      	movs	r2, r6
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	0029      	movs	r1, r5
 8005888:	4643      	mov	r3, r8
 800588a:	0020      	movs	r0, r4
 800588c:	f00a f944 	bl	800fb18 <acc_confprogram_patch_offset>
 8005890:	9b04      	ldr	r3, [sp, #16]
 8005892:	0032      	movs	r2, r6
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	235c      	movs	r3, #92	; 0x5c
 8005898:	0029      	movs	r1, r5
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	0020      	movs	r0, r4
 800589e:	4643      	mov	r3, r8
 80058a0:	f00a f93a 	bl	800fb18 <acc_confprogram_patch_offset>
 80058a4:	23f0      	movs	r3, #240	; 0xf0
 80058a6:	4652      	mov	r2, sl
 80058a8:	431a      	orrs	r2, r3
 80058aa:	234a      	movs	r3, #74	; 0x4a
 80058ac:	4691      	mov	r9, r2
 80058ae:	9201      	str	r2, [sp, #4]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	0032      	movs	r2, r6
 80058b4:	4643      	mov	r3, r8
 80058b6:	0029      	movs	r1, r5
 80058b8:	0020      	movs	r0, r4
 80058ba:	f00a f92d 	bl	800fb18 <acc_confprogram_patch_offset>
 80058be:	464b      	mov	r3, r9
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	2345      	movs	r3, #69	; 0x45
 80058c4:	0032      	movs	r2, r6
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	0029      	movs	r1, r5
 80058ca:	4643      	mov	r3, r8
 80058cc:	0020      	movs	r0, r4
 80058ce:	f00a f923 	bl	800fb18 <acc_confprogram_patch_offset>
 80058d2:	9b04      	ldr	r3, [sp, #16]
 80058d4:	0032      	movs	r2, r6
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	2322      	movs	r3, #34	; 0x22
 80058da:	0029      	movs	r1, r5
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	0020      	movs	r0, r4
 80058e0:	4643      	mov	r3, r8
 80058e2:	f00a f919 	bl	800fb18 <acc_confprogram_patch_offset>
 80058e6:	003b      	movs	r3, r7
 80058e8:	3390      	adds	r3, #144	; 0x90
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	2364      	movs	r3, #100	; 0x64
 80058ee:	2a05      	cmp	r2, #5
 80058f0:	d800      	bhi.n	80058f4 <acc_cpd_linear_sweep_load_program+0x58c>
 80058f2:	3b20      	subs	r3, #32
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	2305      	movs	r3, #5
 80058f8:	0032      	movs	r2, r6
 80058fa:	4699      	mov	r9, r3
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	0029      	movs	r1, r5
 8005900:	4643      	mov	r3, r8
 8005902:	0020      	movs	r0, r4
 8005904:	f00a f908 	bl	800fb18 <acc_confprogram_patch_offset>
 8005908:	2390      	movs	r3, #144	; 0x90
 800590a:	469a      	mov	sl, r3
 800590c:	44ba      	add	sl, r7
 800590e:	4653      	mov	r3, sl
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	0032      	movs	r2, r6
 8005914:	015b      	lsls	r3, r3, #5
 8005916:	3b03      	subs	r3, #3
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	2324      	movs	r3, #36	; 0x24
 800591c:	0029      	movs	r1, r5
 800591e:	9300      	str	r3, [sp, #0]
 8005920:	0020      	movs	r0, r4
 8005922:	4643      	mov	r3, r8
 8005924:	f00a f8f8 	bl	800fb18 <acc_confprogram_patch_offset>
 8005928:	4653      	mov	r3, sl
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0032      	movs	r2, r6
 800592e:	015b      	lsls	r3, r3, #5
 8005930:	085b      	lsrs	r3, r3, #1
 8005932:	3b03      	subs	r3, #3
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	2325      	movs	r3, #37	; 0x25
 8005938:	0029      	movs	r1, r5
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	0020      	movs	r0, r4
 800593e:	4643      	mov	r3, r8
 8005940:	f00a f8ea 	bl	800fb18 <acc_confprogram_patch_offset>
 8005944:	003b      	movs	r3, r7
 8005946:	3394      	adds	r3, #148	; 0x94
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	0032      	movs	r2, r6
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	2336      	movs	r3, #54	; 0x36
 8005950:	0029      	movs	r1, r5
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	0020      	movs	r0, r4
 8005956:	4643      	mov	r3, r8
 8005958:	f00a f8de 	bl	800fb18 <acc_confprogram_patch_offset>
 800595c:	003b      	movs	r3, r7
 800595e:	3398      	adds	r3, #152	; 0x98
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	0032      	movs	r2, r6
 8005964:	330e      	adds	r3, #14
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	235e      	movs	r3, #94	; 0x5e
 800596a:	0029      	movs	r1, r5
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	0020      	movs	r0, r4
 8005970:	4643      	mov	r3, r8
 8005972:	f00a f8d1 	bl	800fb18 <acc_confprogram_patch_offset>
 8005976:	4653      	mov	r3, sl
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	469a      	mov	sl, r3
 800597c:	4599      	cmp	r9, r3
 800597e:	4180      	sbcs	r0, r0
 8005980:	2301      	movs	r3, #1
 8005982:	4398      	bics	r0, r3
 8005984:	4b8d      	ldr	r3, [pc, #564]	; (8005bbc <acc_cpd_linear_sweep_load_program+0x854>)
 8005986:	4651      	mov	r1, sl
 8005988:	469c      	mov	ip, r3
 800598a:	4460      	add	r0, ip
 800598c:	f00b fc68 	bl	8011260 <__aeabi_uidivmod>
 8005990:	4688      	mov	r8, r1
 8005992:	2900      	cmp	r1, #0
 8005994:	d002      	beq.n	800599c <acc_cpd_linear_sweep_load_program+0x634>
 8005996:	4653      	mov	r3, sl
 8005998:	1a5b      	subs	r3, r3, r1
 800599a:	4698      	mov	r8, r3
 800599c:	239c      	movs	r3, #156	; 0x9c
 800599e:	469a      	mov	sl, r3
 80059a0:	44ba      	add	sl, r7
 80059a2:	4653      	mov	r3, sl
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	0032      	movs	r2, r6
 80059a8:	4443      	add	r3, r8
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	4699      	mov	r9, r3
 80059ae:	231f      	movs	r3, #31
 80059b0:	0029      	movs	r1, r5
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	0020      	movs	r0, r4
 80059b6:	4b80      	ldr	r3, [pc, #512]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 80059b8:	f00a f8ae 	bl	800fb18 <acc_confprogram_patch_offset>
 80059bc:	4653      	mov	r3, sl
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d019      	beq.n	80059f8 <acc_cpd_linear_sweep_load_program+0x690>
 80059c4:	4b7e      	ldr	r3, [pc, #504]	; (8005bc0 <acc_cpd_linear_sweep_load_program+0x858>)
 80059c6:	001a      	movs	r2, r3
 80059c8:	3230      	adds	r2, #48	; 0x30
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	2a01      	cmp	r2, #1
 80059ce:	d906      	bls.n	80059de <acc_cpd_linear_sweep_load_program+0x676>
 80059d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d2:	4a7c      	ldr	r2, [pc, #496]	; (8005bc4 <acc_cpd_linear_sweep_load_program+0x85c>)
 80059d4:	469a      	mov	sl, r3
 80059d6:	497c      	ldr	r1, [pc, #496]	; (8005bc8 <acc_cpd_linear_sweep_load_program+0x860>)
 80059d8:	4643      	mov	r3, r8
 80059da:	2002      	movs	r0, #2
 80059dc:	47d0      	blx	sl
 80059de:	4b78      	ldr	r3, [pc, #480]	; (8005bc0 <acc_cpd_linear_sweep_load_program+0x858>)
 80059e0:	001a      	movs	r2, r3
 80059e2:	3230      	adds	r2, #48	; 0x30
 80059e4:	7812      	ldrb	r2, [r2, #0]
 80059e6:	2a01      	cmp	r2, #1
 80059e8:	d906      	bls.n	80059f8 <acc_cpd_linear_sweep_load_program+0x690>
 80059ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ec:	4a77      	ldr	r2, [pc, #476]	; (8005bcc <acc_cpd_linear_sweep_load_program+0x864>)
 80059ee:	4698      	mov	r8, r3
 80059f0:	4975      	ldr	r1, [pc, #468]	; (8005bc8 <acc_cpd_linear_sweep_load_program+0x860>)
 80059f2:	464b      	mov	r3, r9
 80059f4:	2002      	movs	r0, #2
 80059f6:	47c0      	blx	r8
 80059f8:	003b      	movs	r3, r7
 80059fa:	3390      	adds	r3, #144	; 0x90
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2008      	movs	r0, #8
 8005a00:	4699      	mov	r9, r3
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	d800      	bhi.n	8005a08 <acc_cpd_linear_sweep_load_program+0x6a0>
 8005a06:	3002      	adds	r0, #2
 8005a08:	4649      	mov	r1, r9
 8005a0a:	f00b fc29 	bl	8011260 <__aeabi_uidivmod>
 8005a0e:	4688      	mov	r8, r1
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d002      	beq.n	8005a1a <acc_cpd_linear_sweep_load_program+0x6b2>
 8005a14:	464b      	mov	r3, r9
 8005a16:	1a5b      	subs	r3, r3, r1
 8005a18:	4698      	mov	r8, r3
 8005a1a:	23a0      	movs	r3, #160	; 0xa0
 8005a1c:	469a      	mov	sl, r3
 8005a1e:	44ba      	add	sl, r7
 8005a20:	4653      	mov	r3, sl
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	0032      	movs	r2, r6
 8005a26:	4443      	add	r3, r8
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	4699      	mov	r9, r3
 8005a2c:	2366      	movs	r3, #102	; 0x66
 8005a2e:	0029      	movs	r1, r5
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	0020      	movs	r0, r4
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 8005a36:	f00a f86f 	bl	800fb18 <acc_confprogram_patch_offset>
 8005a3a:	4653      	mov	r3, sl
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d019      	beq.n	8005a76 <acc_cpd_linear_sweep_load_program+0x70e>
 8005a42:	4b5f      	ldr	r3, [pc, #380]	; (8005bc0 <acc_cpd_linear_sweep_load_program+0x858>)
 8005a44:	001a      	movs	r2, r3
 8005a46:	3230      	adds	r2, #48	; 0x30
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	d906      	bls.n	8005a5c <acc_cpd_linear_sweep_load_program+0x6f4>
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	4a5f      	ldr	r2, [pc, #380]	; (8005bd0 <acc_cpd_linear_sweep_load_program+0x868>)
 8005a52:	469a      	mov	sl, r3
 8005a54:	495c      	ldr	r1, [pc, #368]	; (8005bc8 <acc_cpd_linear_sweep_load_program+0x860>)
 8005a56:	4643      	mov	r3, r8
 8005a58:	2002      	movs	r0, #2
 8005a5a:	47d0      	blx	sl
 8005a5c:	4b58      	ldr	r3, [pc, #352]	; (8005bc0 <acc_cpd_linear_sweep_load_program+0x858>)
 8005a5e:	001a      	movs	r2, r3
 8005a60:	3230      	adds	r2, #48	; 0x30
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	2a01      	cmp	r2, #1
 8005a66:	d906      	bls.n	8005a76 <acc_cpd_linear_sweep_load_program+0x70e>
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4a5a      	ldr	r2, [pc, #360]	; (8005bd4 <acc_cpd_linear_sweep_load_program+0x86c>)
 8005a6c:	4698      	mov	r8, r3
 8005a6e:	4956      	ldr	r1, [pc, #344]	; (8005bc8 <acc_cpd_linear_sweep_load_program+0x860>)
 8005a70:	464b      	mov	r3, r9
 8005a72:	2002      	movs	r0, #2
 8005a74:	47c0      	blx	r8
 8005a76:	003b      	movs	r3, r7
 8005a78:	338d      	adds	r3, #141	; 0x8d
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d014      	beq.n	8005aaa <acc_cpd_linear_sweep_load_program+0x742>
 8005a80:	2300      	movs	r3, #0
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	333b      	adds	r3, #59	; 0x3b
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	0032      	movs	r2, r6
 8005a8a:	4b4b      	ldr	r3, [pc, #300]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 8005a8c:	0029      	movs	r1, r5
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f00a f842 	bl	800fb18 <acc_confprogram_patch_offset>
 8005a94:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <acc_cpd_linear_sweep_load_program+0x858>)
 8005a96:	001a      	movs	r2, r3
 8005a98:	3230      	adds	r2, #48	; 0x30
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	2a01      	cmp	r2, #1
 8005a9e:	d904      	bls.n	8005aaa <acc_cpd_linear_sweep_load_program+0x742>
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	4a4d      	ldr	r2, [pc, #308]	; (8005bd8 <acc_cpd_linear_sweep_load_program+0x870>)
 8005aa4:	4948      	ldr	r1, [pc, #288]	; (8005bc8 <acc_cpd_linear_sweep_load_program+0x860>)
 8005aa6:	2002      	movs	r0, #2
 8005aa8:	4798      	blx	r3
 8005aaa:	003b      	movs	r3, r7
 8005aac:	33a4      	adds	r3, #164	; 0xa4
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	0032      	movs	r2, r6
 8005ab2:	4699      	mov	r9, r3
 8005ab4:	4b40      	ldr	r3, [pc, #256]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 8005ab6:	0029      	movs	r1, r5
 8005ab8:	4698      	mov	r8, r3
 8005aba:	464b      	mov	r3, r9
 8005abc:	3b01      	subs	r3, #1
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	2306      	movs	r3, #6
 8005ac2:	0020      	movs	r0, r4
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	4643      	mov	r3, r8
 8005ac8:	f00a f826 	bl	800fb18 <acc_confprogram_patch_offset>
 8005acc:	4649      	mov	r1, r9
 8005ace:	2004      	movs	r0, #4
 8005ad0:	f00b fb40 	bl	8011154 <__udivsi3>
 8005ad4:	2363      	movs	r3, #99	; 0x63
 8005ad6:	3801      	subs	r0, #1
 8005ad8:	9001      	str	r0, [sp, #4]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	0032      	movs	r2, r6
 8005ade:	4643      	mov	r3, r8
 8005ae0:	0029      	movs	r1, r5
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	f00a f818 	bl	800fb18 <acc_confprogram_patch_offset>
 8005ae8:	003b      	movs	r3, r7
 8005aea:	33a8      	adds	r3, #168	; 0xa8
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	0032      	movs	r2, r6
 8005af0:	9301      	str	r3, [sp, #4]
 8005af2:	2361      	movs	r3, #97	; 0x61
 8005af4:	0029      	movs	r1, r5
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	0020      	movs	r0, r4
 8005afa:	4643      	mov	r3, r8
 8005afc:	f00a f80c 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b00:	23ad      	movs	r3, #173	; 0xad
 8005b02:	4699      	mov	r9, r3
 8005b04:	44b9      	add	r9, r7
 8005b06:	464b      	mov	r3, r9
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	0032      	movs	r2, r6
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	2346      	movs	r3, #70	; 0x46
 8005b10:	0029      	movs	r1, r5
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0020      	movs	r0, r4
 8005b16:	4643      	mov	r3, r8
 8005b18:	f009 fffe 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b1c:	464b      	mov	r3, r9
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	2323      	movs	r3, #35	; 0x23
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	d100      	bne.n	8005b28 <acc_cpd_linear_sweep_load_program+0x7c0>
 8005b26:	e09d      	b.n	8005c64 <acc_cpd_linear_sweep_load_program+0x8fc>
 8005b28:	2203      	movs	r2, #3
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	9201      	str	r2, [sp, #4]
 8005b2e:	4643      	mov	r3, r8
 8005b30:	0032      	movs	r2, r6
 8005b32:	0029      	movs	r1, r5
 8005b34:	0020      	movs	r0, r4
 8005b36:	f009 ffef 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	337d      	adds	r3, #125	; 0x7d
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	0032      	movs	r2, r6
 8005b44:	4643      	mov	r3, r8
 8005b46:	0029      	movs	r1, r5
 8005b48:	0020      	movs	r0, r4
 8005b4a:	f009 ffe5 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	3380      	adds	r3, #128	; 0x80
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	0032      	movs	r2, r6
 8005b58:	4643      	mov	r3, r8
 8005b5a:	0029      	movs	r1, r5
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	f009 ffdb 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b62:	2302      	movs	r3, #2
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	3373      	adds	r3, #115	; 0x73
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	0032      	movs	r2, r6
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	0029      	movs	r1, r5
 8005b70:	0020      	movs	r0, r4
 8005b72:	f009 ffd1 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <acc_cpd_linear_sweep_load_program+0x850>)
 8005b78:	0032      	movs	r2, r6
 8005b7a:	4698      	mov	r8, r3
 8005b7c:	003b      	movs	r3, r7
 8005b7e:	33ac      	adds	r3, #172	; 0xac
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	0029      	movs	r1, r5
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	2352      	movs	r3, #82	; 0x52
 8005b88:	0020      	movs	r0, r4
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4643      	mov	r3, r8
 8005b8e:	f009 ffc3 	bl	800fb18 <acc_confprogram_patch_offset>
 8005b92:	003b      	movs	r3, r7
 8005b94:	33b0      	adds	r3, #176	; 0xb0
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	4910      	ldr	r1, [pc, #64]	; (8005bdc <acc_cpd_linear_sweep_load_program+0x874>)
 8005b9a:	f00a ffa9 	bl	8010af0 <__aeabi_fmul>
 8005b9e:	f00b fce7 	bl	8011570 <__aeabi_f2uiz>
 8005ba2:	2368      	movs	r3, #104	; 0x68
 8005ba4:	3801      	subs	r0, #1
 8005ba6:	b280      	uxth	r0, r0
 8005ba8:	9001      	str	r0, [sp, #4]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	0032      	movs	r2, r6
 8005bae:	4643      	mov	r3, r8
 8005bb0:	0029      	movs	r1, r5
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	e014      	b.n	8005be0 <acc_cpd_linear_sweep_load_program+0x878>
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	08018c58 	.word	0x08018c58
 8005bbc:	000004e4 	.word	0x000004e4
 8005bc0:	200005d8 	.word	0x200005d8
 8005bc4:	0801d88c 	.word	0x0801d88c
 8005bc8:	0801d277 	.word	0x0801d277
 8005bcc:	0801d8c3 	.word	0x0801d8c3
 8005bd0:	0801d8fa 	.word	0x0801d8fa
 8005bd4:	0801d91f 	.word	0x0801d91f
 8005bd8:	0801d944 	.word	0x0801d944
 8005bdc:	3751b717 	.word	0x3751b717
 8005be0:	f009 ff9a 	bl	800fb18 <acc_confprogram_patch_offset>
 8005be4:	23b4      	movs	r3, #180	; 0xb4
 8005be6:	4699      	mov	r9, r3
 8005be8:	44b9      	add	r9, r7
 8005bea:	464b      	mov	r3, r9
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	0032      	movs	r2, r6
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	2353      	movs	r3, #83	; 0x53
 8005bf4:	0029      	movs	r1, r5
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	0020      	movs	r0, r4
 8005bfa:	4643      	mov	r3, r8
 8005bfc:	f009 ff8c 	bl	800fb18 <acc_confprogram_patch_offset>
 8005c00:	464b      	mov	r3, r9
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00b      	beq.n	8005c20 <acc_cpd_linear_sweep_load_program+0x8b8>
 8005c08:	003b      	movs	r3, r7
 8005c0a:	33b8      	adds	r3, #184	; 0xb8
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	0032      	movs	r2, r6
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	2332      	movs	r3, #50	; 0x32
 8005c14:	0029      	movs	r1, r5
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	0020      	movs	r0, r4
 8005c1a:	4643      	mov	r3, r8
 8005c1c:	f009 ff7c 	bl	800fb18 <acc_confprogram_patch_offset>
 8005c20:	466b      	mov	r3, sp
 8005c22:	9a08      	ldr	r2, [sp, #32]
 8005c24:	8b19      	ldrh	r1, [r3, #24]
 8005c26:	9805      	ldr	r0, [sp, #20]
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	f7ff fb62 	bl	80052f2 <acc_sensor_r2_load_confmem>
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	469c      	mov	ip, r3
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <acc_cpd_linear_sweep_load_program+0x900>)
 8005c34:	44e3      	add	fp, ip
 8005c36:	459b      	cmp	fp, r3
 8005c38:	d801      	bhi.n	8005c3e <acc_cpd_linear_sweep_load_program+0x8d6>
 8005c3a:	f7ff fbc8 	bl	80053ce <acc_cpd_linear_sweep_load_program+0x66>
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <acc_cpd_linear_sweep_load_program+0x904>)
 8005c40:	001a      	movs	r2, r3
 8005c42:	3230      	adds	r2, #48	; 0x30
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	2a03      	cmp	r2, #3
 8005c48:	d904      	bls.n	8005c54 <acc_cpd_linear_sweep_load_program+0x8ec>
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	4a08      	ldr	r2, [pc, #32]	; (8005c70 <acc_cpd_linear_sweep_load_program+0x908>)
 8005c4e:	4909      	ldr	r1, [pc, #36]	; (8005c74 <acc_cpd_linear_sweep_load_program+0x90c>)
 8005c50:	2004      	movs	r0, #4
 8005c52:	4798      	blx	r3
 8005c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c56:	b00f      	add	sp, #60	; 0x3c
 8005c58:	bc3c      	pop	{r2, r3, r4, r5}
 8005c5a:	4690      	mov	r8, r2
 8005c5c:	4699      	mov	r9, r3
 8005c5e:	46a2      	mov	sl, r4
 8005c60:	46ab      	mov	fp, r5
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	9201      	str	r2, [sp, #4]
 8005c66:	e77f      	b.n	8005b68 <acc_cpd_linear_sweep_load_program+0x800>
 8005c68:	0000070f 	.word	0x0000070f
 8005c6c:	200005d8 	.word	0x200005d8
 8005c70:	0801d95e 	.word	0x0801d95e
 8005c74:	0801d277 	.word	0x0801d277

08005c78 <start.lto_priv.135>:
 8005c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7a:	464f      	mov	r7, r9
 8005c7c:	46d6      	mov	lr, sl
 8005c7e:	4646      	mov	r6, r8
 8005c80:	6944      	ldr	r4, [r0, #20]
 8005c82:	2300      	movs	r3, #0
 8005c84:	0022      	movs	r2, r4
 8005c86:	b5c0      	push	{r6, r7, lr}
 8005c88:	32c2      	adds	r2, #194	; 0xc2
 8005c8a:	8013      	strh	r3, [r2, #0]
 8005c8c:	8053      	strh	r3, [r2, #2]
 8005c8e:	8093      	strh	r3, [r2, #4]
 8005c90:	3a16      	subs	r2, #22
 8005c92:	7812      	ldrb	r2, [r2, #0]
 8005c94:	b084      	sub	sp, #16
 8005c96:	4692      	mov	sl, r2
 8005c98:	0022      	movs	r2, r4
 8005c9a:	32b4      	adds	r2, #180	; 0xb4
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	0007      	movs	r7, r0
 8005ca0:	4691      	mov	r9, r2
 8005ca2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005ca4:	000d      	movs	r5, r1
 8005ca6:	4690      	mov	r8, r2
 8005ca8:	464a      	mov	r2, r9
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d003      	beq.n	8005cb6 <start.lto_priv.135+0x3e>
 8005cae:	4652      	mov	r2, sl
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d000      	beq.n	8005cb6 <start.lto_priv.135+0x3e>
 8005cb4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005cb6:	0038      	movs	r0, r7
 8005cb8:	f7fe f96c 	bl	8003f94 <coarse_count_for_next_package>
 8005cbc:	0023      	movs	r3, r4
 8005cbe:	4e2c      	ldr	r6, [pc, #176]	; (8005d70 <start.lto_priv.135+0xf8>)
 8005cc0:	33c8      	adds	r3, #200	; 0xc8
 8005cc2:	6018      	str	r0, [r3, #0]
 8005cc4:	0033      	movs	r3, r6
 8005cc6:	3330      	adds	r3, #48	; 0x30
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d904      	bls.n	8005cd8 <start.lto_priv.135+0x60>
 8005cce:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <start.lto_priv.135+0xfc>)
 8005cd0:	4929      	ldr	r1, [pc, #164]	; (8005d78 <start.lto_priv.135+0x100>)
 8005cd2:	2004      	movs	r0, #4
 8005cd4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005cd6:	4798      	blx	r3
 8005cd8:	cd06      	ldmia	r5!, {r1, r2}
 8005cda:	0023      	movs	r3, r4
 8005cdc:	6838      	ldr	r0, [r7, #0]
 8005cde:	f7ff fb43 	bl	8005368 <acc_cpd_linear_sweep_load_program>
 8005ce2:	1e05      	subs	r5, r0, #0
 8005ce4:	d10a      	bne.n	8005cfc <start.lto_priv.135+0x84>
 8005ce6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005ce8:	4a24      	ldr	r2, [pc, #144]	; (8005d7c <start.lto_priv.135+0x104>)
 8005cea:	4923      	ldr	r1, [pc, #140]	; (8005d78 <start.lto_priv.135+0x100>)
 8005cec:	4798      	blx	r3
 8005cee:	0028      	movs	r0, r5
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bc1c      	pop	{r2, r3, r4}
 8005cf4:	4690      	mov	r8, r2
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	46a2      	mov	sl, r4
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	4920      	ldr	r1, [pc, #128]	; (8005d80 <start.lto_priv.135+0x108>)
 8005cfe:	6838      	ldr	r0, [r7, #0]
 8005d00:	f7fe f9ca 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 8005d04:	1e05      	subs	r5, r0, #0
 8005d06:	d101      	bne.n	8005d0c <start.lto_priv.135+0x94>
 8005d08:	2500      	movs	r5, #0
 8005d0a:	e7f0      	b.n	8005cee <start.lto_priv.135+0x76>
 8005d0c:	4653      	mov	r3, sl
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d023      	beq.n	8005d5a <start.lto_priv.135+0xe2>
 8005d12:	6939      	ldr	r1, [r7, #16]
 8005d14:	6838      	ldr	r0, [r7, #0]
 8005d16:	f7fc fa27 	bl	8002168 <acc_sensor_protocol_r2_wait_for_sync_start>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d0f4      	beq.n	8005d08 <start.lto_priv.135+0x90>
 8005d1e:	0033      	movs	r3, r6
 8005d20:	3330      	adds	r3, #48	; 0x30
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d904      	bls.n	8005d32 <start.lto_priv.135+0xba>
 8005d28:	4a16      	ldr	r2, [pc, #88]	; (8005d84 <start.lto_priv.135+0x10c>)
 8005d2a:	4913      	ldr	r1, [pc, #76]	; (8005d78 <start.lto_priv.135+0x100>)
 8005d2c:	2002      	movs	r0, #2
 8005d2e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005d30:	4798      	blx	r3
 8005d32:	464b      	mov	r3, r9
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d010      	beq.n	8005d5a <start.lto_priv.135+0xe2>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	466a      	mov	r2, sp
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	7013      	strb	r3, [r2, #0]
 8005d40:	7053      	strb	r3, [r2, #1]
 8005d42:	9302      	str	r3, [sp, #8]
 8005d44:	4643      	mov	r3, r8
 8005d46:	2201      	movs	r2, #1
 8005d48:	4669      	mov	r1, sp
 8005d4a:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005d4c:	6838      	ldr	r0, [r7, #0]
 8005d4e:	708a      	strb	r2, [r1, #2]
 8005d50:	9303      	str	r3, [sp, #12]
 8005d52:	f7fb fe51 	bl	80019f8 <acc_cpd_linear_sweep_update_program>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d0d6      	beq.n	8005d08 <start.lto_priv.135+0x90>
 8005d5a:	0033      	movs	r3, r6
 8005d5c:	3330      	adds	r3, #48	; 0x30
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d9c4      	bls.n	8005cee <start.lto_priv.135+0x76>
 8005d64:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <start.lto_priv.135+0x110>)
 8005d68:	4903      	ldr	r1, [pc, #12]	; (8005d78 <start.lto_priv.135+0x100>)
 8005d6a:	2004      	movs	r0, #4
 8005d6c:	4798      	blx	r3
 8005d6e:	e7be      	b.n	8005cee <start.lto_priv.135+0x76>
 8005d70:	200005d8 	.word	0x200005d8
 8005d74:	0801d981 	.word	0x0801d981
 8005d78:	0801d9a6 	.word	0x0801d9a6
 8005d7c:	0801d9ba 	.word	0x0801d9ba
 8005d80:	0000023a 	.word	0x0000023a
 8005d84:	0801d9d4 	.word	0x0801d9d4
 8005d88:	0801d9f8 	.word	0x0801d9f8

08005d8c <measure_noise.lto_priv.122>:
 8005d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8e:	464e      	mov	r6, r9
 8005d90:	46de      	mov	lr, fp
 8005d92:	4657      	mov	r7, sl
 8005d94:	4645      	mov	r5, r8
 8005d96:	b5e0      	push	{r5, r6, r7, lr}
 8005d98:	4e4a      	ldr	r6, [pc, #296]	; (8005ec4 <measure_noise.lto_priv.122+0x138>)
 8005d9a:	b0b9      	sub	sp, #228	; 0xe4
 8005d9c:	0033      	movs	r3, r6
 8005d9e:	9201      	str	r2, [sp, #4]
 8005da0:	3330      	adds	r3, #48	; 0x30
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	0004      	movs	r4, r0
 8005da6:	4689      	mov	r9, r1
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d904      	bls.n	8005db6 <measure_noise.lto_priv.122+0x2a>
 8005dac:	4a46      	ldr	r2, [pc, #280]	; (8005ec8 <measure_noise.lto_priv.122+0x13c>)
 8005dae:	4947      	ldr	r1, [pc, #284]	; (8005ecc <measure_noise.lto_priv.122+0x140>)
 8005db0:	2004      	movs	r0, #4
 8005db2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005db4:	4798      	blx	r3
 8005db6:	6967      	ldr	r7, [r4, #20]
 8005db8:	22bc      	movs	r2, #188	; 0xbc
 8005dba:	0039      	movs	r1, r7
 8005dbc:	a809      	add	r0, sp, #36	; 0x24
 8005dbe:	6825      	ldr	r5, [r4, #0]
 8005dc0:	f010 fc5c 	bl	801667c <memcpy>
 8005dc4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8005dc6:	2400      	movs	r4, #0
 8005dc8:	4698      	mov	r8, r3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	932e      	str	r3, [sp, #184]	; 0xb8
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	931f      	str	r3, [sp, #124]	; 0x7c
 8005dd6:	ab34      	add	r3, sp, #208	; 0xd0
 8005dd8:	701c      	strb	r4, [r3, #0]
 8005dda:	003b      	movs	r3, r7
 8005ddc:	922f      	str	r2, [sp, #188]	; 0xbc
 8005dde:	4649      	mov	r1, r9
 8005de0:	464a      	mov	r2, r9
 8005de2:	9424      	str	r4, [sp, #144]	; 0x90
 8005de4:	941e      	str	r4, [sp, #120]	; 0x78
 8005de6:	9436      	str	r4, [sp, #216]	; 0xd8
 8005de8:	33cc      	adds	r3, #204	; 0xcc
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	6852      	ldr	r2, [r2, #4]
 8005dee:	6809      	ldr	r1, [r1, #0]
 8005df0:	469b      	mov	fp, r3
 8005df2:	0028      	movs	r0, r5
 8005df4:	ab09      	add	r3, sp, #36	; 0x24
 8005df6:	f7ff fab7 	bl	8005368 <acc_cpd_linear_sweep_load_program>
 8005dfa:	4935      	ldr	r1, [pc, #212]	; (8005ed0 <measure_noise.lto_priv.122+0x144>)
 8005dfc:	0028      	movs	r0, r5
 8005dfe:	f7fe f94b 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 8005e02:	21fa      	movs	r1, #250	; 0xfa
 8005e04:	aa02      	add	r2, sp, #8
 8005e06:	00c9      	lsls	r1, r1, #3
 8005e08:	0028      	movs	r0, r5
 8005e0a:	f00a fa39 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 8005e0e:	4682      	mov	sl, r0
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d040      	beq.n	8005e96 <measure_noise.lto_priv.122+0x10a>
 8005e14:	4643      	mov	r3, r8
 8005e16:	049b      	lsls	r3, r3, #18
 8005e18:	0c1b      	lsrs	r3, r3, #16
 8005e1a:	4698      	mov	r8, r3
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	207c      	movs	r0, #124	; 0x7c
 8005e20:	f00b f998 	bl	8011154 <__udivsi3>
 8005e24:	4643      	mov	r3, r8
 8005e26:	4343      	muls	r3, r0
 8005e28:	4698      	mov	r8, r3
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	a903      	add	r1, sp, #12
 8005e30:	4699      	mov	r9, r3
 8005e32:	0038      	movs	r0, r7
 8005e34:	f00a fb9a 	bl	801056c <acc_cpd_linear_sweep_get_info>
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	4443      	add	r3, r8
 8005e3e:	001a      	movs	r2, r3
 8005e40:	0028      	movs	r0, r5
 8005e42:	f7fb fe41 	bl	8001ac8 <acc_sensor_protocol_r2_transfer_data>
 8005e46:	4681      	mov	r9, r0
 8005e48:	0028      	movs	r0, r5
 8005e4a:	f00a facb 	bl	80103e4 <acc_sensor_protocol_r2_stop.constprop.24>
 8005e4e:	0038      	movs	r0, r7
 8005e50:	a903      	add	r1, sp, #12
 8005e52:	f00a fb8b 	bl	801056c <acc_cpd_linear_sweep_get_info>
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	0020      	movs	r0, r4
 8005e5a:	005d      	lsls	r5, r3, #1
 8005e5c:	230e      	movs	r3, #14
 8005e5e:	444d      	add	r5, r9
 8005e60:	4598      	cmp	r8, r3
 8005e62:	d820      	bhi.n	8005ea6 <measure_noise.lto_priv.122+0x11a>
 8005e64:	4644      	mov	r4, r8
 8005e66:	3c0e      	subs	r4, #14
 8005e68:	0021      	movs	r1, r4
 8005e6a:	f00b f973 	bl	8011154 <__udivsi3>
 8005e6e:	220e      	movs	r2, #14
 8005e70:	0001      	movs	r1, r0
 8005e72:	2000      	movs	r0, #0
 8005e74:	4590      	cmp	r8, r2
 8005e76:	d81b      	bhi.n	8005eb0 <measure_noise.lto_priv.122+0x124>
 8005e78:	0021      	movs	r1, r4
 8005e7a:	f00b f96b 	bl	8011154 <__udivsi3>
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	8018      	strh	r0, [r3, #0]
 8005e82:	0033      	movs	r3, r6
 8005e84:	3330      	adds	r3, #48	; 0x30
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d904      	bls.n	8005e96 <measure_noise.lto_priv.122+0x10a>
 8005e8c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005e8e:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <measure_noise.lto_priv.122+0x148>)
 8005e90:	490e      	ldr	r1, [pc, #56]	; (8005ecc <measure_noise.lto_priv.122+0x140>)
 8005e92:	2004      	movs	r0, #4
 8005e94:	4798      	blx	r3
 8005e96:	4650      	mov	r0, sl
 8005e98:	b039      	add	sp, #228	; 0xe4
 8005e9a:	bc3c      	pop	{r2, r3, r4, r5}
 8005e9c:	4690      	mov	r8, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	46a2      	mov	sl, r4
 8005ea2:	46ab      	mov	fp, r5
 8005ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea6:	005a      	lsls	r2, r3, #1
 8005ea8:	5aaa      	ldrh	r2, [r5, r2]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	1880      	adds	r0, r0, r2
 8005eae:	e7d7      	b.n	8005e60 <measure_noise.lto_priv.122+0xd4>
 8005eb0:	0053      	lsls	r3, r2, #1
 8005eb2:	5aeb      	ldrh	r3, [r5, r3]
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	1a5b      	subs	r3, r3, r1
 8005eb8:	17df      	asrs	r7, r3, #31
 8005eba:	19db      	adds	r3, r3, r7
 8005ebc:	407b      	eors	r3, r7
 8005ebe:	18c0      	adds	r0, r0, r3
 8005ec0:	e7d8      	b.n	8005e74 <measure_noise.lto_priv.122+0xe8>
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	200005d8 	.word	0x200005d8
 8005ec8:	0801da1b 	.word	0x0801da1b
 8005ecc:	0801d9a6 	.word	0x0801d9a6
 8005ed0:	0000023a 	.word	0x0000023a
 8005ed4:	0801da3c 	.word	0x0801da3c

08005ed8 <acc_cpd_cbank_and_vana_calibration>:
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	46de      	mov	lr, fp
 8005edc:	4657      	mov	r7, sl
 8005ede:	4645      	mov	r5, r8
 8005ee0:	464e      	mov	r6, r9
 8005ee2:	0014      	movs	r4, r2
 8005ee4:	b5e0      	push	{r5, r6, r7, lr}
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	b089      	sub	sp, #36	; 0x24
 8005eea:	469b      	mov	fp, r3
 8005eec:	ab07      	add	r3, sp, #28
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	9003      	str	r0, [sp, #12]
 8005ef2:	9104      	str	r1, [sp, #16]
 8005ef4:	000a      	movs	r2, r1
 8005ef6:	ab06      	add	r3, sp, #24
 8005ef8:	0001      	movs	r1, r0
 8005efa:	6820      	ldr	r0, [r4, #0]
 8005efc:	9506      	str	r5, [sp, #24]
 8005efe:	9507      	str	r5, [sp, #28]
 8005f00:	f00a fab6 	bl	8010470 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 8005f04:	0007      	movs	r7, r0
 8005f06:	42a8      	cmp	r0, r5
 8005f08:	d10c      	bne.n	8005f24 <acc_cpd_cbank_and_vana_calibration+0x4c>
 8005f0a:	4bbc      	ldr	r3, [pc, #752]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005f0c:	4abc      	ldr	r2, [pc, #752]	; (8006200 <acc_cpd_cbank_and_vana_calibration+0x328>)
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	49bc      	ldr	r1, [pc, #752]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005f12:	4798      	blx	r3
 8005f14:	0038      	movs	r0, r7
 8005f16:	b009      	add	sp, #36	; 0x24
 8005f18:	bc3c      	pop	{r2, r3, r4, r5}
 8005f1a:	4690      	mov	r8, r2
 8005f1c:	4699      	mov	r9, r3
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	46ab      	mov	fp, r5
 8005f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f24:	4bb8      	ldr	r3, [pc, #736]	; (8006208 <acc_cpd_cbank_and_vana_calibration+0x330>)
 8005f26:	9a07      	ldr	r2, [sp, #28]
 8005f28:	9f06      	ldr	r7, [sp, #24]
 8005f2a:	1b5b      	subs	r3, r3, r5
 8005f2c:	4690      	mov	r8, r2
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d900      	bls.n	8005f34 <acc_cpd_cbank_and_vana_calibration+0x5c>
 8005f32:	4698      	mov	r8, r3
 8005f34:	086b      	lsrs	r3, r5, #1
 8005f36:	9305      	str	r3, [sp, #20]
 8005f38:	4643      	mov	r3, r8
 8005f3a:	085a      	lsrs	r2, r3, #1
 8005f3c:	086b      	lsrs	r3, r5, #1
 8005f3e:	0098      	lsls	r0, r3, #2
 8005f40:	4bb2      	ldr	r3, [pc, #712]	; (800620c <acc_cpd_cbank_and_vana_calibration+0x334>)
 8005f42:	0039      	movs	r1, r7
 8005f44:	469c      	mov	ip, r3
 8005f46:	4460      	add	r0, ip
 8005f48:	f009 fd9e 	bl	800fa88 <acc_confprogram_copy>
 8005f4c:	b2ab      	uxth	r3, r5
 8005f4e:	4699      	mov	r9, r3
 8005f50:	4643      	mov	r3, r8
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	469a      	mov	sl, r3
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	4ead      	ldr	r6, [pc, #692]	; (8006210 <acc_cpd_cbank_and_vana_calibration+0x338>)
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	231b      	movs	r3, #27
 8005f5e:	4652      	mov	r2, sl
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	4649      	mov	r1, r9
 8005f64:	0033      	movs	r3, r6
 8005f66:	0038      	movs	r0, r7
 8005f68:	f009 fdd6 	bl	800fb18 <acc_confprogram_patch_offset>
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	4652      	mov	r2, sl
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	2319      	movs	r3, #25
 8005f74:	4649      	mov	r1, r9
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	0038      	movs	r0, r7
 8005f7a:	0033      	movs	r3, r6
 8005f7c:	f009 fdcc 	bl	800fb18 <acc_confprogram_patch_offset>
 8005f80:	68e3      	ldr	r3, [r4, #12]
 8005f82:	4652      	mov	r2, sl
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	231a      	movs	r3, #26
 8005f88:	4649      	mov	r1, r9
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	0038      	movs	r0, r7
 8005f8e:	0033      	movs	r3, r6
 8005f90:	f009 fdc2 	bl	800fb18 <acc_confprogram_patch_offset>
 8005f94:	8a23      	ldrh	r3, [r4, #16]
 8005f96:	4652      	mov	r2, sl
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	2317      	movs	r3, #23
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	0038      	movs	r0, r7
 8005fa2:	0033      	movs	r3, r6
 8005fa4:	f009 fdb8 	bl	800fb18 <acc_confprogram_patch_offset>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	2300      	movs	r3, #0
 8005fae:	4652      	mov	r2, sl
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	0033      	movs	r3, r6
 8005fb6:	0038      	movs	r0, r7
 8005fb8:	f009 fdae 	bl	800fb18 <acc_confprogram_patch_offset>
 8005fbc:	466b      	mov	r3, sp
 8005fbe:	9a03      	ldr	r2, [sp, #12]
 8005fc0:	8a99      	ldrh	r1, [r3, #20]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	4643      	mov	r3, r8
 8005fc6:	f7ff f994 	bl	80052f2 <acc_sensor_r2_load_confmem>
 8005fca:	9b07      	ldr	r3, [sp, #28]
 8005fcc:	469c      	mov	ip, r3
 8005fce:	4b91      	ldr	r3, [pc, #580]	; (8006214 <acc_cpd_cbank_and_vana_calibration+0x33c>)
 8005fd0:	4465      	add	r5, ip
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	d9a6      	bls.n	8005f24 <acc_cpd_cbank_and_vana_calibration+0x4c>
 8005fd6:	2118      	movs	r1, #24
 8005fd8:	6820      	ldr	r0, [r4, #0]
 8005fda:	f7fe f85d 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 8005fde:	1e07      	subs	r7, r0, #0
 8005fe0:	d105      	bne.n	8005fee <acc_cpd_cbank_and_vana_calibration+0x116>
 8005fe2:	4b86      	ldr	r3, [pc, #536]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 8005fe4:	4a8c      	ldr	r2, [pc, #560]	; (8006218 <acc_cpd_cbank_and_vana_calibration+0x340>)
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	4986      	ldr	r1, [pc, #536]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8005fea:	4798      	blx	r3
 8005fec:	e792      	b.n	8005f14 <acc_cpd_cbank_and_vana_calibration+0x3c>
 8005fee:	488b      	ldr	r0, [pc, #556]	; (800621c <acc_cpd_cbank_and_vana_calibration+0x344>)
 8005ff0:	f009 fe41 	bl	800fc76 <acc_diagnostic_log_set_scope>
 8005ff4:	6821      	ldr	r1, [r4, #0]
 8005ff6:	488a      	ldr	r0, [pc, #552]	; (8006220 <acc_cpd_cbank_and_vana_calibration+0x348>)
 8005ff8:	f009 fe39 	bl	800fc6e <acc_diagnostic_log_scalar>
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	2100      	movs	r1, #0
 8006000:	4888      	ldr	r0, [pc, #544]	; (8006224 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8006002:	f009 fe37 	bl	800fc74 <acc_diagnostic_log_declare_parameter>
 8006006:	21fa      	movs	r1, #250	; 0xfa
 8006008:	6827      	ldr	r7, [r4, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	2203      	movs	r2, #3
 800600e:	00c9      	lsls	r1, r1, #3
 8006010:	0038      	movs	r0, r7
 8006012:	f7fc f93f 	bl	8002294 <acc_sensor_protocol_r2_wait_for_specific_event>
 8006016:	2800      	cmp	r0, #0
 8006018:	d04d      	beq.n	80060b6 <acc_cpd_cbank_and_vana_calibration+0x1de>
 800601a:	ad07      	add	r5, sp, #28
 800601c:	002a      	movs	r2, r5
 800601e:	219d      	movs	r1, #157	; 0x9d
 8006020:	0038      	movs	r0, r7
 8006022:	f009 fefd 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8006026:	2207      	movs	r2, #7
 8006028:	882b      	ldrh	r3, [r5, #0]
 800602a:	2006      	movs	r0, #6
 800602c:	4013      	ands	r3, r2
 800602e:	802b      	strh	r3, [r5, #0]
 8006030:	002a      	movs	r2, r5
 8006032:	2301      	movs	r3, #1
 8006034:	0039      	movs	r1, r7
 8006036:	f7fa f87f 	bl	8000138 <acc_probes_execute_uint16>
 800603a:	0038      	movs	r0, r7
 800603c:	f7fc f90a 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 8006040:	2800      	cmp	r0, #0
 8006042:	d038      	beq.n	80060b6 <acc_cpd_cbank_and_vana_calibration+0x1de>
 8006044:	465b      	mov	r3, fp
 8006046:	882f      	ldrh	r7, [r5, #0]
 8006048:	601f      	str	r7, [r3, #0]
 800604a:	23c0      	movs	r3, #192	; 0xc0
 800604c:	6824      	ldr	r4, [r4, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	802b      	strh	r3, [r5, #0]
 8006052:	0020      	movs	r0, r4
 8006054:	f7fe f812 	bl	800407c <acc_sensor_protocol_r2_is_sensor_running>
 8006058:	4680      	mov	r8, r0
 800605a:	2800      	cmp	r0, #0
 800605c:	d133      	bne.n	80060c6 <acc_cpd_cbank_and_vana_calibration+0x1ee>
 800605e:	0032      	movs	r2, r6
 8006060:	2311      	movs	r3, #17
 8006062:	496a      	ldr	r1, [pc, #424]	; (800620c <acc_cpd_cbank_and_vana_calibration+0x334>)
 8006064:	0020      	movs	r0, r4
 8006066:	9700      	str	r7, [sp, #0]
 8006068:	f006 ffba 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 800606c:	4643      	mov	r3, r8
 800606e:	0032      	movs	r2, r6
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4966      	ldr	r1, [pc, #408]	; (800620c <acc_cpd_cbank_and_vana_calibration+0x334>)
 8006074:	2301      	movs	r3, #1
 8006076:	0020      	movs	r0, r4
 8006078:	f006 ffb2 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 800607c:	4646      	mov	r6, r8
 800607e:	5dab      	ldrb	r3, [r5, r6]
 8006080:	4868      	ldr	r0, [pc, #416]	; (8006224 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8006082:	4698      	mov	r8, r3
 8006084:	0019      	movs	r1, r3
 8006086:	f009 fdf4 	bl	800fc72 <acc_diagnostic_log_set_parameter>
 800608a:	4643      	mov	r3, r8
 800608c:	495f      	ldr	r1, [pc, #380]	; (800620c <acc_cpd_cbank_and_vana_calibration+0x334>)
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	0020      	movs	r0, r4
 8006092:	231f      	movs	r3, #31
 8006094:	4a5e      	ldr	r2, [pc, #376]	; (8006210 <acc_cpd_cbank_and_vana_calibration+0x338>)
 8006096:	f006 ffa3 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 800609a:	21e8      	movs	r1, #232	; 0xe8
 800609c:	0020      	movs	r0, r4
 800609e:	0049      	lsls	r1, r1, #1
 80060a0:	f7fd fffa 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d11d      	bne.n	80060e4 <acc_cpd_cbank_and_vana_calibration+0x20c>
 80060a8:	4b54      	ldr	r3, [pc, #336]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80060aa:	4a5f      	ldr	r2, [pc, #380]	; (8006228 <acc_cpd_cbank_and_vana_calibration+0x350>)
 80060ac:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80060ae:	4955      	ldr	r1, [pc, #340]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80060b0:	4643      	mov	r3, r8
 80060b2:	47a0      	blx	r4
 80060b4:	e00e      	b.n	80060d4 <acc_cpd_cbank_and_vana_calibration+0x1fc>
 80060b6:	4b51      	ldr	r3, [pc, #324]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80060b8:	4a5c      	ldr	r2, [pc, #368]	; (800622c <acc_cpd_cbank_and_vana_calibration+0x354>)
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	4951      	ldr	r1, [pc, #324]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80060be:	2000      	movs	r0, #0
 80060c0:	4798      	blx	r3
 80060c2:	2700      	movs	r7, #0
 80060c4:	e726      	b.n	8005f14 <acc_cpd_cbank_and_vana_calibration+0x3c>
 80060c6:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80060c8:	4a59      	ldr	r2, [pc, #356]	; (8006230 <acc_cpd_cbank_and_vana_calibration+0x358>)
 80060ca:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80060cc:	494d      	ldr	r1, [pc, #308]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80060ce:	0023      	movs	r3, r4
 80060d0:	2000      	movs	r0, #0
 80060d2:	47a8      	blx	r5
 80060d4:	4b49      	ldr	r3, [pc, #292]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80060d6:	4a57      	ldr	r2, [pc, #348]	; (8006234 <acc_cpd_cbank_and_vana_calibration+0x35c>)
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	494a      	ldr	r1, [pc, #296]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80060dc:	2000      	movs	r0, #0
 80060de:	4798      	blx	r3
 80060e0:	2700      	movs	r7, #0
 80060e2:	e717      	b.n	8005f14 <acc_cpd_cbank_and_vana_calibration+0x3c>
 80060e4:	21fa      	movs	r1, #250	; 0xfa
 80060e6:	2300      	movs	r3, #0
 80060e8:	2209      	movs	r2, #9
 80060ea:	00c9      	lsls	r1, r1, #3
 80060ec:	0020      	movs	r0, r4
 80060ee:	f7fc f8d1 	bl	8002294 <acc_sensor_protocol_r2_wait_for_specific_event>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d008      	beq.n	8006108 <acc_cpd_cbank_and_vana_calibration+0x230>
 80060f6:	9b04      	ldr	r3, [sp, #16]
 80060f8:	2b25      	cmp	r3, #37	; 0x25
 80060fa:	d80d      	bhi.n	8006118 <acc_cpd_cbank_and_vana_calibration+0x240>
 80060fc:	4b3f      	ldr	r3, [pc, #252]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80060fe:	4a4e      	ldr	r2, [pc, #312]	; (8006238 <acc_cpd_cbank_and_vana_calibration+0x360>)
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	4940      	ldr	r1, [pc, #256]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8006104:	2000      	movs	r0, #0
 8006106:	4798      	blx	r3
 8006108:	4b3c      	ldr	r3, [pc, #240]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 800610a:	4a4c      	ldr	r2, [pc, #304]	; (800623c <acc_cpd_cbank_and_vana_calibration+0x364>)
 800610c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800610e:	493d      	ldr	r1, [pc, #244]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 8006110:	4643      	mov	r3, r8
 8006112:	2000      	movs	r0, #0
 8006114:	47a0      	blx	r4
 8006116:	e7dd      	b.n	80060d4 <acc_cpd_cbank_and_vana_calibration+0x1fc>
 8006118:	2210      	movs	r2, #16
 800611a:	9903      	ldr	r1, [sp, #12]
 800611c:	0020      	movs	r0, r4
 800611e:	f006 fefd 	bl	800cf1c <internal_buffer_processed_read.constprop.29>
 8006122:	2310      	movs	r3, #16
 8006124:	0002      	movs	r2, r0
 8006126:	0007      	movs	r7, r0
 8006128:	0021      	movs	r1, r4
 800612a:	2000      	movs	r0, #0
 800612c:	f7fa f804 	bl	8000138 <acc_probes_execute_uint16>
 8006130:	0020      	movs	r0, r4
 8006132:	f7fc f88f 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 8006136:	2800      	cmp	r0, #0
 8006138:	d0e6      	beq.n	8006108 <acc_cpd_cbank_and_vana_calibration+0x230>
 800613a:	221e      	movs	r2, #30
 800613c:	4694      	mov	ip, r2
 800613e:	2200      	movs	r2, #0
 8006140:	003b      	movs	r3, r7
 8006142:	4691      	mov	r9, r2
 8006144:	4692      	mov	sl, r2
 8006146:	44bc      	add	ip, r7
 8006148:	885a      	ldrh	r2, [r3, #2]
 800614a:	8818      	ldrh	r0, [r3, #0]
 800614c:	4492      	add	sl, r2
 800614e:	1a11      	subs	r1, r2, r0
 8006150:	4282      	cmp	r2, r0
 8006152:	d200      	bcs.n	8006156 <acc_cpd_cbank_and_vana_calibration+0x27e>
 8006154:	1a81      	subs	r1, r0, r2
 8006156:	4589      	cmp	r9, r1
 8006158:	d200      	bcs.n	800615c <acc_cpd_cbank_and_vana_calibration+0x284>
 800615a:	4689      	mov	r9, r1
 800615c:	3302      	adds	r3, #2
 800615e:	459c      	cmp	ip, r3
 8006160:	d1f2      	bne.n	8006148 <acc_cpd_cbank_and_vana_calibration+0x270>
 8006162:	4930      	ldr	r1, [pc, #192]	; (8006224 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 8006164:	4836      	ldr	r0, [pc, #216]	; (8006240 <acc_cpd_cbank_and_vana_calibration+0x368>)
 8006166:	f009 fd83 	bl	800fc70 <acc_diagnostic_log_array>
 800616a:	2110      	movs	r1, #16
 800616c:	0038      	movs	r0, r7
 800616e:	f009 fd7d 	bl	800fc6c <acc_diagnostic_log_data_u16>
 8006172:	883b      	ldrh	r3, [r7, #0]
 8006174:	4a33      	ldr	r2, [pc, #204]	; (8006244 <acc_cpd_cbank_and_vana_calibration+0x36c>)
 8006176:	4453      	add	r3, sl
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	189a      	adds	r2, r3, r2
 800617c:	4932      	ldr	r1, [pc, #200]	; (8006248 <acc_cpd_cbank_and_vana_calibration+0x370>)
 800617e:	b292      	uxth	r2, r2
 8006180:	2700      	movs	r7, #0
 8006182:	428a      	cmp	r2, r1
 8006184:	d805      	bhi.n	8006192 <acc_cpd_cbank_and_vana_calibration+0x2ba>
 8006186:	22c8      	movs	r2, #200	; 0xc8
 8006188:	4649      	mov	r1, r9
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	428a      	cmp	r2, r1
 800618e:	417f      	adcs	r7, r7
 8006190:	b2ff      	uxtb	r7, r7
 8006192:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 8006194:	0011      	movs	r1, r2
 8006196:	3130      	adds	r1, #48	; 0x30
 8006198:	7809      	ldrb	r1, [r1, #0]
 800619a:	2903      	cmp	r1, #3
 800619c:	d90a      	bls.n	80061b4 <acc_cpd_cbank_and_vana_calibration+0x2dc>
 800619e:	4649      	mov	r1, r9
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	9101      	str	r1, [sp, #4]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80061a8:	4916      	ldr	r1, [pc, #88]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80061aa:	4699      	mov	r9, r3
 80061ac:	4a27      	ldr	r2, [pc, #156]	; (800624c <acc_cpd_cbank_and_vana_calibration+0x374>)
 80061ae:	0023      	movs	r3, r4
 80061b0:	2004      	movs	r0, #4
 80061b2:	47c8      	blx	r9
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	d014      	beq.n	80061e2 <acc_cpd_cbank_and_vana_calibration+0x30a>
 80061b8:	465b      	mov	r3, fp
 80061ba:	4642      	mov	r2, r8
 80061bc:	711a      	strb	r2, [r3, #4]
 80061be:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <acc_cpd_cbank_and_vana_calibration+0x324>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	0011      	movs	r1, r2
 80061c4:	3130      	adds	r1, #48	; 0x30
 80061c6:	7809      	ldrb	r1, [r1, #0]
 80061c8:	2901      	cmp	r1, #1
 80061ca:	d80f      	bhi.n	80061ec <acc_cpd_cbank_and_vana_calibration+0x314>
 80061cc:	465b      	mov	r3, fp
 80061ce:	4820      	ldr	r0, [pc, #128]	; (8006250 <acc_cpd_cbank_and_vana_calibration+0x378>)
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	f009 fd4c 	bl	800fc6e <acc_diagnostic_log_scalar>
 80061d6:	465b      	mov	r3, fp
 80061d8:	4812      	ldr	r0, [pc, #72]	; (8006224 <acc_cpd_cbank_and_vana_calibration+0x34c>)
 80061da:	7919      	ldrb	r1, [r3, #4]
 80061dc:	f009 fd47 	bl	800fc6e <acc_diagnostic_log_scalar>
 80061e0:	e698      	b.n	8005f14 <acc_cpd_cbank_and_vana_calibration+0x3c>
 80061e2:	2e01      	cmp	r6, #1
 80061e4:	d100      	bne.n	80061e8 <acc_cpd_cbank_and_vana_calibration+0x310>
 80061e6:	e775      	b.n	80060d4 <acc_cpd_cbank_and_vana_calibration+0x1fc>
 80061e8:	2601      	movs	r6, #1
 80061ea:	e748      	b.n	800607e <acc_cpd_cbank_and_vana_calibration+0x1a6>
 80061ec:	4641      	mov	r1, r8
 80061ee:	9100      	str	r1, [sp, #0]
 80061f0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80061f2:	4904      	ldr	r1, [pc, #16]	; (8006204 <acc_cpd_cbank_and_vana_calibration+0x32c>)
 80061f4:	4a17      	ldr	r2, [pc, #92]	; (8006254 <acc_cpd_cbank_and_vana_calibration+0x37c>)
 80061f6:	2002      	movs	r0, #2
 80061f8:	47a0      	blx	r4
 80061fa:	e7e7      	b.n	80061cc <acc_cpd_cbank_and_vana_calibration+0x2f4>
 80061fc:	200005d8 	.word	0x200005d8
 8006200:	0801da5b 	.word	0x0801da5b
 8006204:	0801da9c 	.word	0x0801da9c
 8006208:	00000572 	.word	0x00000572
 800620c:	0801acbc 	.word	0x0801acbc
 8006210:	08018b30 	.word	0x08018b30
 8006214:	00000571 	.word	0x00000571
 8006218:	0801dabb 	.word	0x0801dabb
 800621c:	0801daa0 	.word	0x0801daa0
 8006220:	0801daed 	.word	0x0801daed
 8006224:	0801daf7 	.word	0x0801daf7
 8006228:	0801db49 	.word	0x0801db49
 800622c:	0801db00 	.word	0x0801db00
 8006230:	0801db18 	.word	0x0801db18
 8006234:	0801dbf8 	.word	0x0801dbf8
 8006238:	0801db89 	.word	0x0801db89
 800623c:	0801dbcd 	.word	0x0801dbcd
 8006240:	0801dba1 	.word	0x0801dba1
 8006244:	ffff86e8 	.word	0xffff86e8
 8006248:	00000bb8 	.word	0x00000bb8
 800624c:	0801dbaf 	.word	0x0801dbaf
 8006250:	0801dc22 	.word	0x0801dc22
 8006254:	0801dc0f 	.word	0x0801dc0f

08006258 <start.lto_priv.136>:
 8006258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800625a:	46de      	mov	lr, fp
 800625c:	4657      	mov	r7, sl
 800625e:	464e      	mov	r6, r9
 8006260:	4645      	mov	r5, r8
 8006262:	b5e0      	push	{r5, r6, r7, lr}
 8006264:	6947      	ldr	r7, [r0, #20]
 8006266:	b093      	sub	sp, #76	; 0x4c
 8006268:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800626a:	4683      	mov	fp, r0
 800626c:	9307      	str	r3, [sp, #28]
 800626e:	003b      	movs	r3, r7
 8006270:	3308      	adds	r3, #8
 8006272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006274:	9308      	str	r3, [sp, #32]
 8006276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006278:	930a      	str	r3, [sp, #40]	; 0x28
 800627a:	9b08      	ldr	r3, [sp, #32]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d004      	beq.n	800628a <start.lto_priv.136+0x32>
 8006280:	9b07      	ldr	r3, [sp, #28]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <start.lto_priv.136+0x32>
 8006286:	2300      	movs	r3, #0
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
 800628a:	465b      	mov	r3, fp
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	ac0f      	add	r4, sp, #60	; 0x3c
 8006290:	9306      	str	r3, [sp, #24]
 8006292:	680b      	ldr	r3, [r1, #0]
 8006294:	2500      	movs	r5, #0
 8006296:	9309      	str	r3, [sp, #36]	; 0x24
 8006298:	2315      	movs	r3, #21
 800629a:	7023      	strb	r3, [r4, #0]
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	684e      	ldr	r6, [r1, #4]
 80062a0:	9310      	str	r3, [sp, #64]	; 0x40
 80062a2:	2307      	movs	r3, #7
 80062a4:	0020      	movs	r0, r4
 80062a6:	22b4      	movs	r2, #180	; 0xb4
 80062a8:	0039      	movs	r1, r7
 80062aa:	9311      	str	r3, [sp, #68]	; 0x44
 80062ac:	f7f9 ff2a 	bl	8000104 <acc_probes_execute>
 80062b0:	9400      	str	r4, [sp, #0]
 80062b2:	ab0e      	add	r3, sp, #56	; 0x38
 80062b4:	0032      	movs	r2, r6
 80062b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062b8:	9806      	ldr	r0, [sp, #24]
 80062ba:	950e      	str	r5, [sp, #56]	; 0x38
 80062bc:	950f      	str	r5, [sp, #60]	; 0x3c
 80062be:	f00a f8d7 	bl	8010470 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80062c2:	9503      	str	r5, [sp, #12]
 80062c4:	0004      	movs	r4, r0
 80062c6:	42a8      	cmp	r0, r5
 80062c8:	d112      	bne.n	80062f0 <start.lto_priv.136+0x98>
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <start.lto_priv.136+0x8c>)
 80062cc:	4a06      	ldr	r2, [pc, #24]	; (80062e8 <start.lto_priv.136+0x90>)
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	4906      	ldr	r1, [pc, #24]	; (80062ec <start.lto_priv.136+0x94>)
 80062d2:	4798      	blx	r3
 80062d4:	0020      	movs	r0, r4
 80062d6:	b013      	add	sp, #76	; 0x4c
 80062d8:	bc3c      	pop	{r2, r3, r4, r5}
 80062da:	4690      	mov	r8, r2
 80062dc:	4699      	mov	r9, r3
 80062de:	46a2      	mov	sl, r4
 80062e0:	46ab      	mov	fp, r5
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	200005d8 	.word	0x200005d8
 80062e8:	0801dc2e 	.word	0x0801dc2e
 80062ec:	0801dc4b 	.word	0x0801dc4b
 80062f0:	9a03      	ldr	r2, [sp, #12]
 80062f2:	4bfa      	ldr	r3, [pc, #1000]	; (80066dc <start.lto_priv.136+0x484>)
 80062f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062fa:	9205      	str	r2, [sp, #20]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d900      	bls.n	8006302 <start.lto_priv.136+0xaa>
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	0021      	movs	r1, r4
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	930b      	str	r3, [sp, #44]	; 0x2c
 800630a:	9b05      	ldr	r3, [sp, #20]
 800630c:	085a      	lsrs	r2, r3, #1
 800630e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006310:	0098      	lsls	r0, r3, #2
 8006312:	4bf3      	ldr	r3, [pc, #972]	; (80066e0 <start.lto_priv.136+0x488>)
 8006314:	18c0      	adds	r0, r0, r3
 8006316:	f009 fbb7 	bl	800fa88 <acc_confprogram_copy>
 800631a:	466b      	mov	r3, sp
 800631c:	899d      	ldrh	r5, [r3, #12]
 800631e:	8a9e      	ldrh	r6, [r3, #20]
 8006320:	4bf0      	ldr	r3, [pc, #960]	; (80066e4 <start.lto_priv.136+0x48c>)
 8006322:	0032      	movs	r2, r6
 8006324:	4698      	mov	r8, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	0029      	movs	r1, r5
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	23d2      	movs	r3, #210	; 0xd2
 800632e:	0020      	movs	r0, r4
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	4643      	mov	r3, r8
 8006334:	f009 fbf0 	bl	800fb18 <acc_confprogram_patch_offset>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0032      	movs	r2, r6
 800633c:	9301      	str	r3, [sp, #4]
 800633e:	23d0      	movs	r3, #208	; 0xd0
 8006340:	0029      	movs	r1, r5
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	0020      	movs	r0, r4
 8006346:	4643      	mov	r3, r8
 8006348:	f009 fbe6 	bl	800fb18 <acc_confprogram_patch_offset>
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0032      	movs	r2, r6
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	23d1      	movs	r3, #209	; 0xd1
 8006354:	0029      	movs	r1, r5
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	0020      	movs	r0, r4
 800635a:	4643      	mov	r3, r8
 800635c:	f009 fbdc 	bl	800fb18 <acc_confprogram_patch_offset>
 8006360:	89bb      	ldrh	r3, [r7, #12]
 8006362:	0032      	movs	r2, r6
 8006364:	9301      	str	r3, [sp, #4]
 8006366:	23ce      	movs	r3, #206	; 0xce
 8006368:	0029      	movs	r1, r5
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	0020      	movs	r0, r4
 800636e:	4643      	mov	r3, r8
 8006370:	f009 fbd2 	bl	800fb18 <acc_confprogram_patch_offset>
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	0032      	movs	r2, r6
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	2365      	movs	r3, #101	; 0x65
 800637c:	0029      	movs	r1, r5
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	0020      	movs	r0, r4
 8006382:	4643      	mov	r3, r8
 8006384:	f009 fbc8 	bl	800fb18 <acc_confprogram_patch_offset>
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	0032      	movs	r2, r6
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	23f0      	movs	r3, #240	; 0xf0
 8006390:	0029      	movs	r1, r5
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	0020      	movs	r0, r4
 8006396:	4643      	mov	r3, r8
 8006398:	f009 fbbe 	bl	800fb18 <acc_confprogram_patch_offset>
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	0032      	movs	r2, r6
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	23e8      	movs	r3, #232	; 0xe8
 80063a4:	0029      	movs	r1, r5
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	0020      	movs	r0, r4
 80063aa:	4643      	mov	r3, r8
 80063ac:	f009 fbb4 	bl	800fb18 <acc_confprogram_patch_offset>
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	0032      	movs	r2, r6
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	23fc      	movs	r3, #252	; 0xfc
 80063b8:	0029      	movs	r1, r5
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	0020      	movs	r0, r4
 80063be:	4643      	mov	r3, r8
 80063c0:	f009 fbaa 	bl	800fb18 <acc_confprogram_patch_offset>
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	0032      	movs	r2, r6
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	23e0      	movs	r3, #224	; 0xe0
 80063cc:	0029      	movs	r1, r5
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	0020      	movs	r0, r4
 80063d2:	4643      	mov	r3, r8
 80063d4:	f009 fba0 	bl	800fb18 <acc_confprogram_patch_offset>
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	0032      	movs	r2, r6
 80063dc:	9301      	str	r3, [sp, #4]
 80063de:	23e1      	movs	r3, #225	; 0xe1
 80063e0:	0029      	movs	r1, r5
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	0020      	movs	r0, r4
 80063e6:	4643      	mov	r3, r8
 80063e8:	f009 fb96 	bl	800fb18 <acc_confprogram_patch_offset>
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	0032      	movs	r2, r6
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	0029      	movs	r1, r5
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	0020      	movs	r0, r4
 80063fa:	4643      	mov	r3, r8
 80063fc:	f009 fb8c 	bl	800fb18 <acc_confprogram_patch_offset>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	0032      	movs	r2, r6
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	2381      	movs	r3, #129	; 0x81
 8006408:	0029      	movs	r1, r5
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	0020      	movs	r0, r4
 800640e:	4643      	mov	r3, r8
 8006410:	f009 fb82 	bl	800fb18 <acc_confprogram_patch_offset>
 8006414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006416:	0032      	movs	r2, r6
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	237f      	movs	r3, #127	; 0x7f
 800641c:	0029      	movs	r1, r5
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	0020      	movs	r0, r4
 8006422:	4643      	mov	r3, r8
 8006424:	f009 fb78 	bl	800fb18 <acc_confprogram_patch_offset>
 8006428:	2300      	movs	r3, #0
 800642a:	0032      	movs	r2, r6
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	0029      	movs	r1, r5
 8006432:	0020      	movs	r0, r4
 8006434:	469a      	mov	sl, r3
 8006436:	4643      	mov	r3, r8
 8006438:	f009 fb6e 	bl	800fb18 <acc_confprogram_patch_offset>
 800643c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800643e:	0032      	movs	r2, r6
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	23ef      	movs	r3, #239	; 0xef
 8006444:	0029      	movs	r1, r5
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	0020      	movs	r0, r4
 800644a:	4643      	mov	r3, r8
 800644c:	f009 fb64 	bl	800fb18 <acc_confprogram_patch_offset>
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	0032      	movs	r2, r6
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	23d6      	movs	r3, #214	; 0xd6
 8006458:	0029      	movs	r1, r5
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	0020      	movs	r0, r4
 800645e:	4643      	mov	r3, r8
 8006460:	f009 fb5a 	bl	800fb18 <acc_confprogram_patch_offset>
 8006464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006466:	0032      	movs	r2, r6
 8006468:	9301      	str	r3, [sp, #4]
 800646a:	2378      	movs	r3, #120	; 0x78
 800646c:	0029      	movs	r1, r5
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	0020      	movs	r0, r4
 8006472:	4643      	mov	r3, r8
 8006474:	f009 fb50 	bl	800fb18 <acc_confprogram_patch_offset>
 8006478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800647a:	4553      	cmp	r3, sl
 800647c:	d06e      	beq.n	800655c <start.lto_priv.136+0x304>
 800647e:	2301      	movs	r3, #1
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	330e      	adds	r3, #14
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	0032      	movs	r2, r6
 8006488:	4643      	mov	r3, r8
 800648a:	0029      	movs	r1, r5
 800648c:	0020      	movs	r0, r4
 800648e:	f009 fb43 	bl	800fb18 <acc_confprogram_patch_offset>
 8006492:	4b95      	ldr	r3, [pc, #596]	; (80066e8 <start.lto_priv.136+0x490>)
 8006494:	0032      	movs	r2, r6
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	2311      	movs	r3, #17
 800649a:	0029      	movs	r1, r5
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	0020      	movs	r0, r4
 80064a0:	4643      	mov	r3, r8
 80064a2:	f009 fb39 	bl	800fb18 <acc_confprogram_patch_offset>
 80064a6:	2207      	movs	r2, #7
 80064a8:	2313      	movs	r3, #19
 80064aa:	4691      	mov	r9, r2
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	0032      	movs	r2, r6
 80064b2:	4643      	mov	r3, r8
 80064b4:	0029      	movs	r1, r5
 80064b6:	0020      	movs	r0, r4
 80064b8:	f009 fb2e 	bl	800fb18 <acc_confprogram_patch_offset>
 80064bc:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <start.lto_priv.136+0x490>)
 80064be:	0032      	movs	r2, r6
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	2310      	movs	r3, #16
 80064c4:	0029      	movs	r1, r5
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	0020      	movs	r0, r4
 80064ca:	4643      	mov	r3, r8
 80064cc:	f009 fb24 	bl	800fb18 <acc_confprogram_patch_offset>
 80064d0:	4653      	mov	r3, sl
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	3312      	adds	r3, #18
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	0032      	movs	r2, r6
 80064da:	4643      	mov	r3, r8
 80064dc:	0029      	movs	r1, r5
 80064de:	0020      	movs	r0, r4
 80064e0:	f009 fb1a 	bl	800fb18 <acc_confprogram_patch_offset>
 80064e4:	4b81      	ldr	r3, [pc, #516]	; (80066ec <start.lto_priv.136+0x494>)
 80064e6:	0032      	movs	r2, r6
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	2314      	movs	r3, #20
 80064ec:	0029      	movs	r1, r5
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	0020      	movs	r0, r4
 80064f2:	4643      	mov	r3, r8
 80064f4:	f009 fb10 	bl	800fb18 <acc_confprogram_patch_offset>
 80064f8:	464b      	mov	r3, r9
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	330e      	adds	r3, #14
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	0032      	movs	r2, r6
 8006502:	4643      	mov	r3, r8
 8006504:	0029      	movs	r1, r5
 8006506:	0020      	movs	r0, r4
 8006508:	f009 fb06 	bl	800fb18 <acc_confprogram_patch_offset>
 800650c:	4b78      	ldr	r3, [pc, #480]	; (80066f0 <start.lto_priv.136+0x498>)
 800650e:	0032      	movs	r2, r6
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	230d      	movs	r3, #13
 8006514:	0029      	movs	r1, r5
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	0020      	movs	r0, r4
 800651a:	4643      	mov	r3, r8
 800651c:	f009 fafc 	bl	800fb18 <acc_confprogram_patch_offset>
 8006520:	464b      	mov	r3, r9
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	18db      	adds	r3, r3, r3
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	0032      	movs	r2, r6
 800652a:	4643      	mov	r3, r8
 800652c:	0029      	movs	r1, r5
 800652e:	0020      	movs	r0, r4
 8006530:	f009 faf2 	bl	800fb18 <acc_confprogram_patch_offset>
 8006534:	4b6f      	ldr	r3, [pc, #444]	; (80066f4 <start.lto_priv.136+0x49c>)
 8006536:	0032      	movs	r2, r6
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	2316      	movs	r3, #22
 800653c:	0029      	movs	r1, r5
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	0020      	movs	r0, r4
 8006542:	4643      	mov	r3, r8
 8006544:	f009 fae8 	bl	800fb18 <acc_confprogram_patch_offset>
 8006548:	464b      	mov	r3, r9
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	3310      	adds	r3, #16
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	0032      	movs	r2, r6
 8006552:	4643      	mov	r3, r8
 8006554:	0029      	movs	r1, r5
 8006556:	0020      	movs	r0, r4
 8006558:	f009 fade 	bl	800fb18 <acc_confprogram_patch_offset>
 800655c:	4b61      	ldr	r3, [pc, #388]	; (80066e4 <start.lto_priv.136+0x48c>)
 800655e:	0032      	movs	r2, r6
 8006560:	4699      	mov	r9, r3
 8006562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006564:	0029      	movs	r1, r5
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	2386      	movs	r3, #134	; 0x86
 800656a:	0020      	movs	r0, r4
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	464b      	mov	r3, r9
 8006570:	f009 fad2 	bl	800fb18 <acc_confprogram_patch_offset>
 8006574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006576:	0032      	movs	r2, r6
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	23d3      	movs	r3, #211	; 0xd3
 800657c:	0029      	movs	r1, r5
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	0020      	movs	r0, r4
 8006582:	464b      	mov	r3, r9
 8006584:	f009 fac8 	bl	800fb18 <acc_confprogram_patch_offset>
 8006588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800658a:	0032      	movs	r2, r6
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	23f3      	movs	r3, #243	; 0xf3
 8006590:	0029      	movs	r1, r5
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	0020      	movs	r0, r4
 8006596:	464b      	mov	r3, r9
 8006598:	f009 fabe 	bl	800fb18 <acc_confprogram_patch_offset>
 800659c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800659e:	0032      	movs	r2, r6
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	2382      	movs	r3, #130	; 0x82
 80065a4:	0029      	movs	r1, r5
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	0020      	movs	r0, r4
 80065aa:	464b      	mov	r3, r9
 80065ac:	f009 fab4 	bl	800fb18 <acc_confprogram_patch_offset>
 80065b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	4690      	mov	r8, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	9204      	str	r2, [sp, #16]
 80065ba:	4642      	mov	r2, r8
 80065bc:	2a08      	cmp	r2, #8
 80065be:	d914      	bls.n	80065ea <start.lto_priv.136+0x392>
 80065c0:	4643      	mov	r3, r8
 80065c2:	22ff      	movs	r2, #255	; 0xff
 80065c4:	3b08      	subs	r3, #8
 80065c6:	409a      	lsls	r2, r3
 80065c8:	0013      	movs	r3, r2
 80065ca:	22ff      	movs	r2, #255	; 0xff
 80065cc:	4393      	bics	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	2302      	movs	r3, #2
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	33e0      	adds	r3, #224	; 0xe0
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	0032      	movs	r2, r6
 80065dc:	464b      	mov	r3, r9
 80065de:	0029      	movs	r1, r5
 80065e0:	0020      	movs	r0, r4
 80065e2:	f009 fa99 	bl	800fb18 <acc_confprogram_patch_offset>
 80065e6:	2308      	movs	r3, #8
 80065e8:	4698      	mov	r8, r3
 80065ea:	4b3e      	ldr	r3, [pc, #248]	; (80066e4 <start.lto_priv.136+0x48c>)
 80065ec:	0032      	movs	r2, r6
 80065ee:	469a      	mov	sl, r3
 80065f0:	4643      	mov	r3, r8
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	23e9      	movs	r3, #233	; 0xe9
 80065f6:	0029      	movs	r1, r5
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	0020      	movs	r0, r4
 80065fc:	4653      	mov	r3, sl
 80065fe:	f009 fa8b 	bl	800fb18 <acc_confprogram_patch_offset>
 8006602:	4643      	mov	r3, r8
 8006604:	9301      	str	r3, [sp, #4]
 8006606:	23d9      	movs	r3, #217	; 0xd9
 8006608:	0032      	movs	r2, r6
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	0029      	movs	r1, r5
 800660e:	4653      	mov	r3, sl
 8006610:	0020      	movs	r0, r4
 8006612:	f009 fa81 	bl	800fb18 <acc_confprogram_patch_offset>
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	9a04      	ldr	r2, [sp, #16]
 800661a:	0029      	movs	r1, r5
 800661c:	4313      	orrs	r3, r2
 800661e:	930c      	str	r3, [sp, #48]	; 0x30
 8006620:	9301      	str	r3, [sp, #4]
 8006622:	23eb      	movs	r3, #235	; 0xeb
 8006624:	0032      	movs	r2, r6
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	0020      	movs	r0, r4
 800662a:	4653      	mov	r3, sl
 800662c:	f009 fa74 	bl	800fb18 <acc_confprogram_patch_offset>
 8006630:	23c0      	movs	r3, #192	; 0xc0
 8006632:	9a04      	ldr	r2, [sp, #16]
 8006634:	0029      	movs	r1, r5
 8006636:	431a      	orrs	r2, r3
 8006638:	23ed      	movs	r3, #237	; 0xed
 800663a:	4690      	mov	r8, r2
 800663c:	9201      	str	r2, [sp, #4]
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	0032      	movs	r2, r6
 8006642:	4653      	mov	r3, sl
 8006644:	0020      	movs	r0, r4
 8006646:	f009 fa67 	bl	800fb18 <acc_confprogram_patch_offset>
 800664a:	23ff      	movs	r3, #255	; 0xff
 800664c:	9a04      	ldr	r2, [sp, #16]
 800664e:	0029      	movs	r1, r5
 8006650:	4313      	orrs	r3, r2
 8006652:	4699      	mov	r9, r3
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	23ec      	movs	r3, #236	; 0xec
 8006658:	0032      	movs	r2, r6
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	0020      	movs	r0, r4
 800665e:	4653      	mov	r3, sl
 8006660:	f009 fa5a 	bl	800fb18 <acc_confprogram_patch_offset>
 8006664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006666:	0032      	movs	r2, r6
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	23db      	movs	r3, #219	; 0xdb
 800666c:	0029      	movs	r1, r5
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	0020      	movs	r0, r4
 8006672:	4653      	mov	r3, sl
 8006674:	f009 fa50 	bl	800fb18 <acc_confprogram_patch_offset>
 8006678:	4643      	mov	r3, r8
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	23dd      	movs	r3, #221	; 0xdd
 800667e:	0032      	movs	r2, r6
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	0029      	movs	r1, r5
 8006684:	4653      	mov	r3, sl
 8006686:	0020      	movs	r0, r4
 8006688:	f009 fa46 	bl	800fb18 <acc_confprogram_patch_offset>
 800668c:	464b      	mov	r3, r9
 800668e:	9301      	str	r3, [sp, #4]
 8006690:	23dc      	movs	r3, #220	; 0xdc
 8006692:	0032      	movs	r2, r6
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	0029      	movs	r1, r5
 8006698:	4653      	mov	r3, sl
 800669a:	0020      	movs	r0, r4
 800669c:	f009 fa3c 	bl	800fb18 <acc_confprogram_patch_offset>
 80066a0:	22f0      	movs	r2, #240	; 0xf0
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	0029      	movs	r1, r5
 80066a6:	4313      	orrs	r3, r2
 80066a8:	4698      	mov	r8, r3
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	23cd      	movs	r3, #205	; 0xcd
 80066ae:	0032      	movs	r2, r6
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	0020      	movs	r0, r4
 80066b4:	4653      	mov	r3, sl
 80066b6:	f009 fa2f 	bl	800fb18 <acc_confprogram_patch_offset>
 80066ba:	4643      	mov	r3, r8
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	2385      	movs	r3, #133	; 0x85
 80066c0:	0032      	movs	r2, r6
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	0029      	movs	r1, r5
 80066c6:	4653      	mov	r3, sl
 80066c8:	0020      	movs	r0, r4
 80066ca:	f009 fa25 	bl	800fb18 <acc_confprogram_patch_offset>
 80066ce:	464b      	mov	r3, r9
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	2321      	movs	r3, #33	; 0x21
 80066d4:	0032      	movs	r2, r6
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	e00e      	b.n	80066f8 <start.lto_priv.136+0x4a0>
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	0000076a 	.word	0x0000076a
 80066e0:	08019de8 	.word	0x08019de8
 80066e4:	08018228 	.word	0x08018228
 80066e8:	0000ff80 	.word	0x0000ff80
 80066ec:	0000ffc0 	.word	0x0000ffc0
 80066f0:	0000fff0 	.word	0x0000fff0
 80066f4:	0000ffff 	.word	0x0000ffff
 80066f8:	0029      	movs	r1, r5
 80066fa:	4653      	mov	r3, sl
 80066fc:	0020      	movs	r0, r4
 80066fe:	f009 fa0b 	bl	800fb18 <acc_confprogram_patch_offset>
 8006702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006704:	0032      	movs	r2, r6
 8006706:	3b01      	subs	r3, #1
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	2374      	movs	r3, #116	; 0x74
 800670c:	0029      	movs	r1, r5
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	0020      	movs	r0, r4
 8006712:	4653      	mov	r3, sl
 8006714:	f009 fa00 	bl	800fb18 <acc_confprogram_patch_offset>
 8006718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800671a:	0032      	movs	r2, r6
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	2305      	movs	r3, #5
 8006720:	0029      	movs	r1, r5
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	0020      	movs	r0, r4
 8006726:	4653      	mov	r3, sl
 8006728:	f009 f9f6 	bl	800fb18 <acc_confprogram_patch_offset>
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	0032      	movs	r2, r6
 8006730:	015b      	lsls	r3, r3, #5
 8006732:	3b03      	subs	r3, #3
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	2363      	movs	r3, #99	; 0x63
 8006738:	0029      	movs	r1, r5
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	0020      	movs	r0, r4
 800673e:	4653      	mov	r3, sl
 8006740:	f009 f9ea 	bl	800fb18 <acc_confprogram_patch_offset>
 8006744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006746:	0032      	movs	r2, r6
 8006748:	015b      	lsls	r3, r3, #5
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	3b03      	subs	r3, #3
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	2364      	movs	r3, #100	; 0x64
 8006752:	0029      	movs	r1, r5
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	0020      	movs	r0, r4
 8006758:	4653      	mov	r3, sl
 800675a:	f009 f9dd 	bl	800fb18 <acc_confprogram_patch_offset>
 800675e:	2390      	movs	r3, #144	; 0x90
 8006760:	4698      	mov	r8, r3
 8006762:	44b8      	add	r8, r7
 8006764:	4643      	mov	r3, r8
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	0032      	movs	r2, r6
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	23de      	movs	r3, #222	; 0xde
 800676e:	0029      	movs	r1, r5
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	0020      	movs	r0, r4
 8006774:	4653      	mov	r3, sl
 8006776:	f009 f9cf 	bl	800fb18 <acc_confprogram_patch_offset>
 800677a:	003b      	movs	r3, r7
 800677c:	338c      	adds	r3, #140	; 0x8c
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	0032      	movs	r2, r6
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	23ee      	movs	r3, #238	; 0xee
 8006786:	0029      	movs	r1, r5
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	0020      	movs	r0, r4
 800678c:	4653      	mov	r3, sl
 800678e:	f009 f9c3 	bl	800fb18 <acc_confprogram_patch_offset>
 8006792:	4643      	mov	r3, r8
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	0032      	movs	r2, r6
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	237e      	movs	r3, #126	; 0x7e
 800679c:	0029      	movs	r1, r5
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	0020      	movs	r0, r4
 80067a2:	4653      	mov	r3, sl
 80067a4:	f009 f9b8 	bl	800fb18 <acc_confprogram_patch_offset>
 80067a8:	003b      	movs	r3, r7
 80067aa:	3394      	adds	r3, #148	; 0x94
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	0032      	movs	r2, r6
 80067b0:	9301      	str	r3, [sp, #4]
 80067b2:	23e4      	movs	r3, #228	; 0xe4
 80067b4:	0029      	movs	r1, r5
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	0020      	movs	r0, r4
 80067ba:	4653      	mov	r3, sl
 80067bc:	f009 f9ac 	bl	800fb18 <acc_confprogram_patch_offset>
 80067c0:	003b      	movs	r3, r7
 80067c2:	3398      	adds	r3, #152	; 0x98
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	0032      	movs	r2, r6
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	237c      	movs	r3, #124	; 0x7c
 80067cc:	0029      	movs	r1, r5
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	0020      	movs	r0, r4
 80067d2:	4653      	mov	r3, sl
 80067d4:	f009 f9a0 	bl	800fb18 <acc_confprogram_patch_offset>
 80067d8:	003b      	movs	r3, r7
 80067da:	339c      	adds	r3, #156	; 0x9c
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	0032      	movs	r2, r6
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	23c9      	movs	r3, #201	; 0xc9
 80067e4:	0029      	movs	r1, r5
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	0020      	movs	r0, r4
 80067ea:	4653      	mov	r3, sl
 80067ec:	f009 f994 	bl	800fb18 <acc_confprogram_patch_offset>
 80067f0:	003b      	movs	r3, r7
 80067f2:	33a0      	adds	r3, #160	; 0xa0
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	0032      	movs	r2, r6
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	2384      	movs	r3, #132	; 0x84
 80067fc:	0029      	movs	r1, r5
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	0020      	movs	r0, r4
 8006802:	4653      	mov	r3, sl
 8006804:	f009 f988 	bl	800fb18 <acc_confprogram_patch_offset>
 8006808:	003b      	movs	r3, r7
 800680a:	33a4      	adds	r3, #164	; 0xa4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	0032      	movs	r2, r6
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	237b      	movs	r3, #123	; 0x7b
 8006814:	0029      	movs	r1, r5
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	0020      	movs	r0, r4
 800681a:	4653      	mov	r3, sl
 800681c:	f009 f97c 	bl	800fb18 <acc_confprogram_patch_offset>
 8006820:	003b      	movs	r3, r7
 8006822:	33a8      	adds	r3, #168	; 0xa8
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	0032      	movs	r2, r6
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	23c7      	movs	r3, #199	; 0xc7
 800682c:	0029      	movs	r1, r5
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	0020      	movs	r0, r4
 8006832:	4653      	mov	r3, sl
 8006834:	f009 f970 	bl	800fb18 <acc_confprogram_patch_offset>
 8006838:	003b      	movs	r3, r7
 800683a:	33ac      	adds	r3, #172	; 0xac
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	0032      	movs	r2, r6
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	2383      	movs	r3, #131	; 0x83
 8006844:	0029      	movs	r1, r5
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	0020      	movs	r0, r4
 800684a:	4653      	mov	r3, sl
 800684c:	f009 f964 	bl	800fb18 <acc_confprogram_patch_offset>
 8006850:	003b      	movs	r3, r7
 8006852:	33b0      	adds	r3, #176	; 0xb0
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0032      	movs	r2, r6
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	23c8      	movs	r3, #200	; 0xc8
 800685c:	0029      	movs	r1, r5
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	0020      	movs	r0, r4
 8006862:	4653      	mov	r3, sl
 8006864:	f009 f958 	bl	800fb18 <acc_confprogram_patch_offset>
 8006868:	003b      	movs	r3, r7
 800686a:	3370      	adds	r3, #112	; 0x70
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	4698      	mov	r8, r3
 8006870:	4642      	mov	r2, r8
 8006872:	23d7      	movs	r3, #215	; 0xd7
 8006874:	2a00      	cmp	r2, #0
 8006876:	d000      	beq.n	800687a <start.lto_priv.136+0x622>
 8006878:	e07e      	b.n	8006978 <start.lto_priv.136+0x720>
 800687a:	3201      	adds	r2, #1
 800687c:	9201      	str	r2, [sp, #4]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	0032      	movs	r2, r6
 8006882:	4653      	mov	r3, sl
 8006884:	0029      	movs	r1, r5
 8006886:	0020      	movs	r0, r4
 8006888:	f009 f946 	bl	800fb18 <acc_confprogram_patch_offset>
 800688c:	4643      	mov	r3, r8
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	23d8      	movs	r3, #216	; 0xd8
 8006892:	0032      	movs	r2, r6
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	0029      	movs	r1, r5
 8006898:	4653      	mov	r3, sl
 800689a:	0020      	movs	r0, r4
 800689c:	f009 f93c 	bl	800fb18 <acc_confprogram_patch_offset>
 80068a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a2:	0032      	movs	r2, r6
 80068a4:	3b01      	subs	r3, #1
 80068a6:	9301      	str	r3, [sp, #4]
 80068a8:	23e3      	movs	r3, #227	; 0xe3
 80068aa:	0029      	movs	r1, r5
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	0020      	movs	r0, r4
 80068b0:	4653      	mov	r3, sl
 80068b2:	f009 f931 	bl	800fb18 <acc_confprogram_patch_offset>
 80068b6:	4b66      	ldr	r3, [pc, #408]	; (8006a50 <start.lto_priv.136+0x7f8>)
 80068b8:	0032      	movs	r2, r6
 80068ba:	4698      	mov	r8, r3
 80068bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068be:	0029      	movs	r1, r5
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	23d4      	movs	r3, #212	; 0xd4
 80068c4:	0020      	movs	r0, r4
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	4643      	mov	r3, r8
 80068ca:	f009 f925 	bl	800fb18 <acc_confprogram_patch_offset>
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	0032      	movs	r2, r6
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	2375      	movs	r3, #117	; 0x75
 80068d6:	0029      	movs	r1, r5
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	0020      	movs	r0, r4
 80068dc:	4643      	mov	r3, r8
 80068de:	f009 f91b 	bl	800fb18 <acc_confprogram_patch_offset>
 80068e2:	1d3b      	adds	r3, r7, #4
 80068e4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80068e6:	495b      	ldr	r1, [pc, #364]	; (8006a54 <start.lto_priv.136+0x7fc>)
 80068e8:	f00a f902 	bl	8010af0 <__aeabi_fmul>
 80068ec:	f00a fe40 	bl	8011570 <__aeabi_f2uiz>
 80068f0:	23e5      	movs	r3, #229	; 0xe5
 80068f2:	3801      	subs	r0, #1
 80068f4:	b280      	uxth	r0, r0
 80068f6:	9001      	str	r0, [sp, #4]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	0032      	movs	r2, r6
 80068fc:	4643      	mov	r3, r8
 80068fe:	0029      	movs	r1, r5
 8006900:	0020      	movs	r0, r4
 8006902:	f009 f909 	bl	800fb18 <acc_confprogram_patch_offset>
 8006906:	2308      	movs	r3, #8
 8006908:	4699      	mov	r9, r3
 800690a:	44b9      	add	r9, r7
 800690c:	464b      	mov	r3, r9
 800690e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006910:	0032      	movs	r2, r6
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	23d5      	movs	r3, #213	; 0xd5
 8006916:	0029      	movs	r1, r5
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	0020      	movs	r0, r4
 800691c:	4643      	mov	r3, r8
 800691e:	f009 f8fb 	bl	800fb18 <acc_confprogram_patch_offset>
 8006922:	464b      	mov	r3, r9
 8006924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00b      	beq.n	8006942 <start.lto_priv.136+0x6ea>
 800692a:	003b      	movs	r3, r7
 800692c:	3388      	adds	r3, #136	; 0x88
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	0032      	movs	r2, r6
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	2371      	movs	r3, #113	; 0x71
 8006936:	0029      	movs	r1, r5
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	0020      	movs	r0, r4
 800693c:	4643      	mov	r3, r8
 800693e:	f009 f8eb 	bl	800fb18 <acc_confprogram_patch_offset>
 8006942:	466b      	mov	r3, sp
 8006944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006946:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006948:	9806      	ldr	r0, [sp, #24]
 800694a:	9b05      	ldr	r3, [sp, #20]
 800694c:	f7fe fcd1 	bl	80052f2 <acc_sensor_r2_load_confmem>
 8006950:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	4694      	mov	ip, r2
 8006956:	4463      	add	r3, ip
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	9a03      	ldr	r2, [sp, #12]
 800695c:	4b3e      	ldr	r3, [pc, #248]	; (8006a58 <start.lto_priv.136+0x800>)
 800695e:	429a      	cmp	r2, r3
 8006960:	d800      	bhi.n	8006964 <start.lto_priv.136+0x70c>
 8006962:	e4c5      	b.n	80062f0 <start.lto_priv.136+0x98>
 8006964:	465b      	mov	r3, fp
 8006966:	21f4      	movs	r1, #244	; 0xf4
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	0049      	lsls	r1, r1, #1
 800696c:	f7fd fb94 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 8006970:	1e04      	subs	r4, r0, #0
 8006972:	d146      	bne.n	8006a02 <start.lto_priv.136+0x7aa>
 8006974:	2400      	movs	r4, #0
 8006976:	e4ad      	b.n	80062d4 <start.lto_priv.136+0x7c>
 8006978:	2200      	movs	r2, #0
 800697a:	4690      	mov	r8, r2
 800697c:	9201      	str	r2, [sp, #4]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	0032      	movs	r2, r6
 8006982:	4653      	mov	r3, sl
 8006984:	0029      	movs	r1, r5
 8006986:	0020      	movs	r0, r4
 8006988:	f009 f8c6 	bl	800fb18 <acc_confprogram_patch_offset>
 800698c:	2301      	movs	r3, #1
 800698e:	46c1      	mov	r9, r8
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	33d7      	adds	r3, #215	; 0xd7
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	0032      	movs	r2, r6
 8006998:	4653      	mov	r3, sl
 800699a:	0029      	movs	r1, r5
 800699c:	0020      	movs	r0, r4
 800699e:	f009 f8bb 	bl	800fb18 <acc_confprogram_patch_offset>
 80069a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a4:	3301      	adds	r3, #1
 80069a6:	930d      	str	r3, [sp, #52]	; 0x34
 80069a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069aa:	0029      	movs	r1, r5
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	464b      	mov	r3, r9
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	930c      	str	r3, [sp, #48]	; 0x30
 80069b4:	9b04      	ldr	r3, [sp, #16]
 80069b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069b8:	4599      	cmp	r9, r3
 80069ba:	419b      	sbcs	r3, r3
 80069bc:	425b      	negs	r3, r3
 80069be:	9301      	str	r3, [sp, #4]
 80069c0:	4b26      	ldr	r3, [pc, #152]	; (8006a5c <start.lto_priv.136+0x804>)
 80069c2:	0020      	movs	r0, r4
 80069c4:	5a9b      	ldrh	r3, [r3, r2]
 80069c6:	0032      	movs	r2, r6
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	4653      	mov	r3, sl
 80069cc:	f009 f8a4 	bl	800fb18 <acc_confprogram_patch_offset>
 80069d0:	9b04      	ldr	r3, [sp, #16]
 80069d2:	4599      	cmp	r9, r3
 80069d4:	d20b      	bcs.n	80069ee <start.lto_priv.136+0x796>
 80069d6:	4643      	mov	r3, r8
 80069d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069da:	9301      	str	r3, [sp, #4]
 80069dc:	4b20      	ldr	r3, [pc, #128]	; (8006a60 <start.lto_priv.136+0x808>)
 80069de:	0029      	movs	r1, r5
 80069e0:	5a9b      	ldrh	r3, [r3, r2]
 80069e2:	0020      	movs	r0, r4
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	0032      	movs	r2, r6
 80069e8:	4653      	mov	r3, sl
 80069ea:	f009 f895 	bl	800fb18 <acc_confprogram_patch_offset>
 80069ee:	2301      	movs	r3, #1
 80069f0:	469c      	mov	ip, r3
 80069f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f4:	44e1      	add	r9, ip
 80069f6:	469c      	mov	ip, r3
 80069f8:	464b      	mov	r3, r9
 80069fa:	44e0      	add	r8, ip
 80069fc:	2b40      	cmp	r3, #64	; 0x40
 80069fe:	d1d3      	bne.n	80069a8 <start.lto_priv.136+0x750>
 8006a00:	e759      	b.n	80068b6 <start.lto_priv.136+0x65e>
 8006a02:	9b07      	ldr	r3, [sp, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d100      	bne.n	8006a0a <start.lto_priv.136+0x7b2>
 8006a08:	e464      	b.n	80062d4 <start.lto_priv.136+0x7c>
 8006a0a:	465b      	mov	r3, fp
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	f7fb fbaa 	bl	8002168 <acc_sensor_protocol_r2_wait_for_sync_start>
 8006a14:	1e05      	subs	r5, r0, #0
 8006a16:	d0ad      	beq.n	8006974 <start.lto_priv.136+0x71c>
 8006a18:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <start.lto_priv.136+0x80c>)
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	3230      	adds	r2, #48	; 0x30
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	2a01      	cmp	r2, #1
 8006a22:	d904      	bls.n	8006a2e <start.lto_priv.136+0x7d6>
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	4a10      	ldr	r2, [pc, #64]	; (8006a68 <start.lto_priv.136+0x810>)
 8006a28:	4910      	ldr	r1, [pc, #64]	; (8006a6c <start.lto_priv.136+0x814>)
 8006a2a:	2002      	movs	r0, #2
 8006a2c:	4798      	blx	r3
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d100      	bne.n	8006a36 <start.lto_priv.136+0x7de>
 8006a34:	e44e      	b.n	80062d4 <start.lto_priv.136+0x7c>
 8006a36:	4658      	mov	r0, fp
 8006a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3a:	4642      	mov	r2, r8
 8006a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	490b      	ldr	r1, [pc, #44]	; (8006a70 <start.lto_priv.136+0x818>)
 8006a42:	23ef      	movs	r3, #239	; 0xef
 8006a44:	6800      	ldr	r0, [r0, #0]
 8006a46:	f006 facb 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 8006a4a:	002c      	movs	r4, r5
 8006a4c:	e442      	b.n	80062d4 <start.lto_priv.136+0x7c>
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	08018228 	.word	0x08018228
 8006a54:	3751b717 	.word	0x3751b717
 8006a58:	00000769 	.word	0x00000769
 8006a5c:	080181a8 	.word	0x080181a8
 8006a60:	08018128 	.word	0x08018128
 8006a64:	200005d8 	.word	0x200005d8
 8006a68:	0801d9d4 	.word	0x0801d9d4
 8006a6c:	0801dc4b 	.word	0x0801dc4b
 8006a70:	08019de8 	.word	0x08019de8

08006a74 <acc_rss_integration_get_sensor_reference_frequency>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	4798      	blx	r3
 8006a7c:	bd10      	pop	{r4, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	200005d8 	.word	0x200005d8

08006a84 <acc_radar_engine_common_frequency_to_main_clk>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	1c06      	adds	r6, r0, #0
 8006a88:	0015      	movs	r5, r2
 8006a8a:	000c      	movs	r4, r1
 8006a8c:	f7ff fff2 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 8006a90:	1c31      	adds	r1, r6, #0
 8006a92:	f009 ff1b 	bl	80108cc <__aeabi_fdiv>
 8006a96:	f00a fd6b 	bl	8011570 <__aeabi_f2uiz>
 8006a9a:	0c03      	lsrs	r3, r0, #16
 8006a9c:	b280      	uxth	r0, r0
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	6020      	str	r0, [r4, #0]
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}

08006aa4 <calculate_pll_divisors.lto_priv.137>:
 8006aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa6:	0005      	movs	r5, r0
 8006aa8:	f7ff ffe4 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 8006aac:	1c01      	adds	r1, r0, #0
 8006aae:	1c06      	adds	r6, r0, #0
 8006ab0:	4830      	ldr	r0, [pc, #192]	; (8006b74 <calculate_pll_divisors.lto_priv.137+0xd0>)
 8006ab2:	f009 ff0b 	bl	80108cc <__aeabi_fdiv>
 8006ab6:	21fc      	movs	r1, #252	; 0xfc
 8006ab8:	0589      	lsls	r1, r1, #22
 8006aba:	f009 fd6d 	bl	8010598 <__aeabi_fadd>
 8006abe:	f00a fd57 	bl	8011570 <__aeabi_f2uiz>
 8006ac2:	492d      	ldr	r1, [pc, #180]	; (8006b78 <calculate_pll_divisors.lto_priv.137+0xd4>)
 8006ac4:	b284      	uxth	r4, r0
 8006ac6:	1c30      	adds	r0, r6, #0
 8006ac8:	f00a f944 	bl	8010d54 <__aeabi_fsub>
 8006acc:	492b      	ldr	r1, [pc, #172]	; (8006b7c <calculate_pll_divisors.lto_priv.137+0xd8>)
 8006ace:	f00a f80f 	bl	8010af0 <__aeabi_fmul>
 8006ad2:	492b      	ldr	r1, [pc, #172]	; (8006b80 <calculate_pll_divisors.lto_priv.137+0xdc>)
 8006ad4:	f009 fd60 	bl	8010598 <__aeabi_fadd>
 8006ad8:	f00a fd4a 	bl	8011570 <__aeabi_f2uiz>
 8006adc:	0023      	movs	r3, r4
 8006ade:	3b10      	subs	r3, #16
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8128      	strh	r0, [r5, #8]
 8006ae4:	2bef      	cmp	r3, #239	; 0xef
 8006ae6:	d92b      	bls.n	8006b40 <calculate_pll_divisors.lto_priv.137+0x9c>
 8006ae8:	4b26      	ldr	r3, [pc, #152]	; (8006b84 <calculate_pll_divisors.lto_priv.137+0xe0>)
 8006aea:	2100      	movs	r1, #0
 8006aec:	1c30      	adds	r0, r6, #0
 8006aee:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8006af0:	f00a fcf6 	bl	80114e0 <__aeabi_fcmplt>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d01f      	beq.n	8006b38 <calculate_pll_divisors.lto_priv.137+0x94>
 8006af8:	4c23      	ldr	r4, [pc, #140]	; (8006b88 <calculate_pll_divisors.lto_priv.137+0xe4>)
 8006afa:	4924      	ldr	r1, [pc, #144]	; (8006b8c <calculate_pll_divisors.lto_priv.137+0xe8>)
 8006afc:	1c30      	adds	r0, r6, #0
 8006afe:	f009 fff7 	bl	8010af0 <__aeabi_fmul>
 8006b02:	4923      	ldr	r1, [pc, #140]	; (8006b90 <calculate_pll_divisors.lto_priv.137+0xec>)
 8006b04:	f009 fd48 	bl	8010598 <__aeabi_fadd>
 8006b08:	1c06      	adds	r6, r0, #0
 8006b0a:	f00a fd31 	bl	8011570 <__aeabi_f2uiz>
 8006b0e:	0005      	movs	r5, r0
 8006b10:	f00a ff4e 	bl	80119b0 <__aeabi_ui2f>
 8006b14:	1c01      	adds	r1, r0, #0
 8006b16:	1c30      	adds	r0, r6, #0
 8006b18:	f00a f91c 	bl	8010d54 <__aeabi_fsub>
 8006b1c:	491d      	ldr	r1, [pc, #116]	; (8006b94 <calculate_pll_divisors.lto_priv.137+0xf0>)
 8006b1e:	f009 ffe7 	bl	8010af0 <__aeabi_fmul>
 8006b22:	f00a fd25 	bl	8011570 <__aeabi_f2uiz>
 8006b26:	9500      	str	r5, [sp, #0]
 8006b28:	9001      	str	r0, [sp, #4]
 8006b2a:	0023      	movs	r3, r4
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <calculate_pll_divisors.lto_priv.137+0xf4>)
 8006b30:	491a      	ldr	r1, [pc, #104]	; (8006b9c <calculate_pll_divisors.lto_priv.137+0xf8>)
 8006b32:	47b8      	blx	r7
 8006b34:	2000      	movs	r0, #0
 8006b36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b38:	21fe      	movs	r1, #254	; 0xfe
 8006b3a:	4c19      	ldr	r4, [pc, #100]	; (8006ba0 <calculate_pll_divisors.lto_priv.137+0xfc>)
 8006b3c:	0589      	lsls	r1, r1, #22
 8006b3e:	e7dd      	b.n	8006afc <calculate_pll_divisors.lto_priv.137+0x58>
 8006b40:	2c3f      	cmp	r4, #63	; 0x3f
 8006b42:	d809      	bhi.n	8006b58 <calculate_pll_divisors.lto_priv.137+0xb4>
 8006b44:	2200      	movs	r2, #0
 8006b46:	806a      	strh	r2, [r5, #2]
 8006b48:	2c2f      	cmp	r4, #47	; 0x2f
 8006b4a:	d900      	bls.n	8006b4e <calculate_pll_divisors.lto_priv.137+0xaa>
 8006b4c:	0023      	movs	r3, r4
 8006b4e:	80ab      	strh	r3, [r5, #4]
 8006b50:	80ea      	strh	r2, [r5, #6]
 8006b52:	802c      	strh	r4, [r5, #0]
 8006b54:	2001      	movs	r0, #1
 8006b56:	e7ee      	b.n	8006b36 <calculate_pll_divisors.lto_priv.137+0x92>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	806b      	strh	r3, [r5, #2]
 8006b5c:	08e3      	lsrs	r3, r4, #3
 8006b5e:	2cbf      	cmp	r4, #191	; 0xbf
 8006b60:	d803      	bhi.n	8006b6a <calculate_pll_divisors.lto_priv.137+0xc6>
 8006b62:	0023      	movs	r3, r4
 8006b64:	3b40      	subs	r3, #64	; 0x40
 8006b66:	10db      	asrs	r3, r3, #3
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	80ab      	strh	r3, [r5, #4]
 8006b6c:	2307      	movs	r3, #7
 8006b6e:	4023      	ands	r3, r4
 8006b70:	80eb      	strh	r3, [r5, #6]
 8006b72:	e7ee      	b.n	8006b52 <calculate_pll_divisors.lto_priv.137+0xae>
 8006b74:	4f1502f9 	.word	0x4f1502f9
 8006b78:	4b989680 	.word	0x4b989680
 8006b7c:	b55b38e8 	.word	0xb55b38e8
 8006b80:	427c0000 	.word	0x427c0000
 8006b84:	200005d8 	.word	0x200005d8
 8006b88:	0801ee30 	.word	0x0801ee30
 8006b8c:	bf800000 	.word	0xbf800000
 8006b90:	350637bd 	.word	0x350637bd
 8006b94:	49742400 	.word	0x49742400
 8006b98:	0801dc5f 	.word	0x0801dc5f
 8006b9c:	0801dc8a 	.word	0x0801dc8a
 8006ba0:	0801e847 	.word	0x0801e847

08006ba4 <set_calibration_context.lto_priv.126>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	680b      	ldr	r3, [r1, #0]
 8006ba8:	b086      	sub	sp, #24
 8006baa:	0004      	movs	r4, r0
 8006bac:	000e      	movs	r6, r1
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d00a      	beq.n	8006bc8 <set_calibration_context.lto_priv.126+0x24>
 8006bb2:	2206      	movs	r2, #6
 8006bb4:	9200      	str	r2, [sp, #0]
 8006bb6:	4a0e      	ldr	r2, [pc, #56]	; (8006bf0 <set_calibration_context.lto_priv.126+0x4c>)
 8006bb8:	2000      	movs	r0, #0
 8006bba:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006bbc:	490d      	ldr	r1, [pc, #52]	; (8006bf4 <set_calibration_context.lto_priv.126+0x50>)
 8006bbe:	4a0e      	ldr	r2, [pc, #56]	; (8006bf8 <set_calibration_context.lto_priv.126+0x54>)
 8006bc0:	47a0      	blx	r4
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	b006      	add	sp, #24
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	ad03      	add	r5, sp, #12
 8006bca:	0028      	movs	r0, r5
 8006bcc:	f7ff ff6a 	bl	8006aa4 <calculate_pll_divisors.lto_priv.137>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0f7      	beq.n	8006bc4 <set_calibration_context.lto_priv.126+0x20>
 8006bd4:	88ab      	ldrh	r3, [r5, #4]
 8006bd6:	6063      	str	r3, [r4, #4]
 8006bd8:	88eb      	ldrh	r3, [r5, #6]
 8006bda:	60a3      	str	r3, [r4, #8]
 8006bdc:	886b      	ldrh	r3, [r5, #2]
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	892b      	ldrh	r3, [r5, #8]
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	88b3      	ldrh	r3, [r6, #4]
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	88f3      	ldrh	r3, [r6, #6]
 8006bea:	6163      	str	r3, [r4, #20]
 8006bec:	e7ea      	b.n	8006bc4 <set_calibration_context.lto_priv.126+0x20>
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	200005d8 	.word	0x200005d8
 8006bf4:	0801dc4b 	.word	0x0801dc4b
 8006bf8:	0801dc9b 	.word	0x0801dc9b

08006bfc <calibrate.lto_priv.140>:
 8006bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfe:	b08b      	sub	sp, #44	; 0x2c
 8006c00:	ac02      	add	r4, sp, #8
 8006c02:	6807      	ldr	r7, [r0, #0]
 8006c04:	0020      	movs	r0, r4
 8006c06:	000e      	movs	r6, r1
 8006c08:	0015      	movs	r5, r2
 8006c0a:	f7ff ff4b 	bl	8006aa4 <calculate_pll_divisors.lto_priv.137>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d103      	bne.n	8006c1a <calibrate.lto_priv.140+0x1e>
 8006c12:	2400      	movs	r4, #0
 8006c14:	0020      	movs	r0, r4
 8006c16:	b00b      	add	sp, #44	; 0x2c
 8006c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1a:	9705      	str	r7, [sp, #20]
 8006c1c:	8863      	ldrh	r3, [r4, #2]
 8006c1e:	aa05      	add	r2, sp, #20
 8006c20:	6053      	str	r3, [r2, #4]
 8006c22:	88a3      	ldrh	r3, [r4, #4]
 8006c24:	ce03      	ldmia	r6!, {r0, r1}
 8006c26:	6093      	str	r3, [r2, #8]
 8006c28:	88e3      	ldrh	r3, [r4, #6]
 8006c2a:	60d3      	str	r3, [r2, #12]
 8006c2c:	8923      	ldrh	r3, [r4, #8]
 8006c2e:	8213      	strh	r3, [r2, #16]
 8006c30:	466b      	mov	r3, sp
 8006c32:	f7ff f951 	bl	8005ed8 <acc_cpd_cbank_and_vana_calibration>
 8006c36:	1e04      	subs	r4, r0, #0
 8006c38:	d0eb      	beq.n	8006c12 <calibrate.lto_priv.140+0x16>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	80ab      	strh	r3, [r5, #4]
 8006c3e:	466b      	mov	r3, sp
 8006c40:	791b      	ldrb	r3, [r3, #4]
 8006c42:	80eb      	strh	r3, [r5, #6]
 8006c44:	2306      	movs	r3, #6
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <calibrate.lto_priv.140+0x64>)
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	3230      	adds	r2, #48	; 0x30
 8006c4e:	7812      	ldrb	r2, [r2, #0]
 8006c50:	2a01      	cmp	r2, #1
 8006c52:	d9df      	bls.n	8006c14 <calibrate.lto_priv.140+0x18>
 8006c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c56:	4a03      	ldr	r2, [pc, #12]	; (8006c64 <calibrate.lto_priv.140+0x68>)
 8006c58:	4903      	ldr	r1, [pc, #12]	; (8006c68 <calibrate.lto_priv.140+0x6c>)
 8006c5a:	2002      	movs	r0, #2
 8006c5c:	4798      	blx	r3
 8006c5e:	e7d9      	b.n	8006c14 <calibrate.lto_priv.140+0x18>
 8006c60:	200005d8 	.word	0x200005d8
 8006c64:	0801dcd9 	.word	0x0801dcd9
 8006c68:	0801dc4b 	.word	0x0801dc4b

08006c6c <set_calibration_context.lto_priv.125>:
 8006c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c6e:	680b      	ldr	r3, [r1, #0]
 8006c70:	b087      	sub	sp, #28
 8006c72:	0004      	movs	r4, r0
 8006c74:	000d      	movs	r5, r1
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d00b      	beq.n	8006c92 <set_calibration_context.lto_priv.125+0x26>
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	9200      	str	r2, [sp, #0]
 8006c7e:	4a22      	ldr	r2, [pc, #136]	; (8006d08 <set_calibration_context.lto_priv.125+0x9c>)
 8006c80:	4922      	ldr	r1, [pc, #136]	; (8006d0c <set_calibration_context.lto_priv.125+0xa0>)
 8006c82:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006c84:	2000      	movs	r0, #0
 8006c86:	4a22      	ldr	r2, [pc, #136]	; (8006d10 <set_calibration_context.lto_priv.125+0xa4>)
 8006c88:	47a0      	blx	r4
 8006c8a:	2700      	movs	r7, #0
 8006c8c:	0038      	movs	r0, r7
 8006c8e:	b007      	add	sp, #28
 8006c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c92:	ae03      	add	r6, sp, #12
 8006c94:	0030      	movs	r0, r6
 8006c96:	f7ff ff05 	bl	8006aa4 <calculate_pll_divisors.lto_priv.137>
 8006c9a:	1e07      	subs	r7, r0, #0
 8006c9c:	d0f6      	beq.n	8006c8c <set_calibration_context.lto_priv.125+0x20>
 8006c9e:	88b3      	ldrh	r3, [r6, #4]
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	88f3      	ldrh	r3, [r6, #6]
 8006ca4:	60a3      	str	r3, [r4, #8]
 8006ca6:	8873      	ldrh	r3, [r6, #2]
 8006ca8:	6023      	str	r3, [r4, #0]
 8006caa:	8933      	ldrh	r3, [r6, #8]
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	88ab      	ldrh	r3, [r5, #4]
 8006cb0:	6123      	str	r3, [r4, #16]
 8006cb2:	88eb      	ldrh	r3, [r5, #6]
 8006cb4:	6163      	str	r3, [r4, #20]
 8006cb6:	892b      	ldrh	r3, [r5, #8]
 8006cb8:	61a3      	str	r3, [r4, #24]
 8006cba:	896b      	ldrh	r3, [r5, #10]
 8006cbc:	61e3      	str	r3, [r4, #28]
 8006cbe:	89ab      	ldrh	r3, [r5, #12]
 8006cc0:	6223      	str	r3, [r4, #32]
 8006cc2:	8a2b      	ldrh	r3, [r5, #16]
 8006cc4:	84a3      	strh	r3, [r4, #36]	; 0x24
 8006cc6:	8a6b      	ldrh	r3, [r5, #18]
 8006cc8:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006cca:	89ed      	ldrh	r5, [r5, #14]
 8006ccc:	00ad      	lsls	r5, r5, #2
 8006cce:	b2ad      	uxth	r5, r5
 8006cd0:	0028      	movs	r0, r5
 8006cd2:	303e      	adds	r0, #62	; 0x3e
 8006cd4:	b280      	uxth	r0, r0
 8006cd6:	287b      	cmp	r0, #123	; 0x7b
 8006cd8:	d912      	bls.n	8006d00 <set_calibration_context.lto_priv.125+0x94>
 8006cda:	217c      	movs	r1, #124	; 0x7c
 8006cdc:	f00a fac0 	bl	8011260 <__aeabi_uidivmod>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	0028      	movs	r0, r5
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	b28d      	uxth	r5, r1
 8006ce8:	0011      	movs	r1, r2
 8006cea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006cec:	6323      	str	r3, [r4, #48]	; 0x30
 8006cee:	2003      	movs	r0, #3
 8006cf0:	6423      	str	r3, [r4, #64]	; 0x40
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62a5      	str	r5, [r4, #40]	; 0x28
 8006cf6:	6360      	str	r0, [r4, #52]	; 0x34
 8006cf8:	63a1      	str	r1, [r4, #56]	; 0x38
 8006cfa:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006cfc:	6463      	str	r3, [r4, #68]	; 0x44
 8006cfe:	e7c5      	b.n	8006c8c <set_calibration_context.lto_priv.125+0x20>
 8006d00:	2203      	movs	r2, #3
 8006d02:	2101      	movs	r1, #1
 8006d04:	2300      	movs	r3, #0
 8006d06:	e7f0      	b.n	8006cea <set_calibration_context.lto_priv.125+0x7e>
 8006d08:	200005d8 	.word	0x200005d8
 8006d0c:	0801d9a6 	.word	0x0801d9a6
 8006d10:	0801dc9b 	.word	0x0801dc9b

08006d14 <get_pll_freq>:
 8006d14:	b510      	push	{r4, lr}
 8006d16:	f7ff fead 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 8006d1a:	1c01      	adds	r1, r0, #0
 8006d1c:	1c04      	adds	r4, r0, #0
 8006d1e:	4805      	ldr	r0, [pc, #20]	; (8006d34 <get_pll_freq+0x20>)
 8006d20:	f009 fdd4 	bl	80108cc <__aeabi_fdiv>
 8006d24:	f00d f97e 	bl	8014024 <roundf>
 8006d28:	1c01      	adds	r1, r0, #0
 8006d2a:	1c20      	adds	r0, r4, #0
 8006d2c:	f009 fee0 	bl	8010af0 <__aeabi_fmul>
 8006d30:	bd10      	pop	{r4, pc}
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	4f1502f9 	.word	0x4f1502f9

08006d38 <points_to_meter.lto_priv.141>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	0004      	movs	r4, r0
 8006d3c:	f7ff ffea 	bl	8006d14 <get_pll_freq>
 8006d40:	1c05      	adds	r5, r0, #0
 8006d42:	0020      	movs	r0, r4
 8006d44:	f00a fdea 	bl	801191c <__aeabi_i2f>
 8006d48:	1c04      	adds	r4, r0, #0
 8006d4a:	20fe      	movs	r0, #254	; 0xfe
 8006d4c:	1c29      	adds	r1, r5, #0
 8006d4e:	0580      	lsls	r0, r0, #22
 8006d50:	f009 fdbc 	bl	80108cc <__aeabi_fdiv>
 8006d54:	1c01      	adds	r1, r0, #0
 8006d56:	1c20      	adds	r0, r4, #0
 8006d58:	f009 feca 	bl	8010af0 <__aeabi_fmul>
 8006d5c:	4903      	ldr	r1, [pc, #12]	; (8006d6c <points_to_meter.lto_priv.141+0x34>)
 8006d5e:	f009 fec7 	bl	8010af0 <__aeabi_fmul>
 8006d62:	21fc      	movs	r1, #252	; 0xfc
 8006d64:	0589      	lsls	r1, r1, #22
 8006d66:	f009 fec3 	bl	8010af0 <__aeabi_fmul>
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	4d8ef3c2 	.word	0x4d8ef3c2

08006d70 <meter_to_points.lto_priv.145>:
 8006d70:	b570      	push	{r4, r5, r6, lr}
 8006d72:	1c04      	adds	r4, r0, #0
 8006d74:	f7ff ffce 	bl	8006d14 <get_pll_freq>
 8006d78:	1c21      	adds	r1, r4, #0
 8006d7a:	1c06      	adds	r6, r0, #0
 8006d7c:	1c20      	adds	r0, r4, #0
 8006d7e:	f009 fc0b 	bl	8010598 <__aeabi_fadd>
 8006d82:	1c05      	adds	r5, r0, #0
 8006d84:	20fe      	movs	r0, #254	; 0xfe
 8006d86:	1c31      	adds	r1, r6, #0
 8006d88:	0580      	lsls	r0, r0, #22
 8006d8a:	f009 fd9f 	bl	80108cc <__aeabi_fdiv>
 8006d8e:	490c      	ldr	r1, [pc, #48]	; (8006dc0 <meter_to_points.lto_priv.145+0x50>)
 8006d90:	f009 feae 	bl	8010af0 <__aeabi_fmul>
 8006d94:	1c01      	adds	r1, r0, #0
 8006d96:	1c28      	adds	r0, r5, #0
 8006d98:	f009 fd98 	bl	80108cc <__aeabi_fdiv>
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	1c05      	adds	r5, r0, #0
 8006da0:	1c20      	adds	r0, r4, #0
 8006da2:	f00a fb9d 	bl	80114e0 <__aeabi_fcmplt>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d107      	bne.n	8006dba <meter_to_points.lto_priv.145+0x4a>
 8006daa:	21fc      	movs	r1, #252	; 0xfc
 8006dac:	0589      	lsls	r1, r1, #22
 8006dae:	1c28      	adds	r0, r5, #0
 8006db0:	f009 fbf2 	bl	8010598 <__aeabi_fadd>
 8006db4:	f00a fd92 	bl	80118dc <__aeabi_f2iz>
 8006db8:	bd70      	pop	{r4, r5, r6, pc}
 8006dba:	21bf      	movs	r1, #191	; 0xbf
 8006dbc:	0609      	lsls	r1, r1, #24
 8006dbe:	e7f6      	b.n	8006dae <meter_to_points.lto_priv.145+0x3e>
 8006dc0:	4d8ef3c2 	.word	0x4d8ef3c2

08006dc4 <initialize.lto_priv.148>:
 8006dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc6:	4657      	mov	r7, sl
 8006dc8:	46de      	mov	lr, fp
 8006dca:	464e      	mov	r6, r9
 8006dcc:	4645      	mov	r5, r8
 8006dce:	b5e0      	push	{r5, r6, r7, lr}
 8006dd0:	000f      	movs	r7, r1
 8006dd2:	b09d      	sub	sp, #116	; 0x74
 8006dd4:	3732      	adds	r7, #50	; 0x32
 8006dd6:	9308      	str	r3, [sp, #32]
 8006dd8:	783b      	ldrb	r3, [r7, #0]
 8006dda:	4683      	mov	fp, r0
 8006ddc:	000e      	movs	r6, r1
 8006dde:	4692      	mov	sl, r2
 8006de0:	2b06      	cmp	r3, #6
 8006de2:	d00f      	beq.n	8006e04 <initialize.lto_priv.148+0x40>
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d00d      	beq.n	8006e04 <initialize.lto_priv.148+0x40>
 8006de8:	4bb7      	ldr	r3, [pc, #732]	; (80070c8 <initialize.lto_priv.148+0x304>)
 8006dea:	2000      	movs	r0, #0
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dee:	4ab7      	ldr	r2, [pc, #732]	; (80070cc <initialize.lto_priv.148+0x308>)
 8006df0:	49b7      	ldr	r1, [pc, #732]	; (80070d0 <initialize.lto_priv.148+0x30c>)
 8006df2:	4798      	blx	r3
 8006df4:	2000      	movs	r0, #0
 8006df6:	b01d      	add	sp, #116	; 0x74
 8006df8:	bc3c      	pop	{r2, r3, r4, r5}
 8006dfa:	4690      	mov	r8, r2
 8006dfc:	4699      	mov	r9, r3
 8006dfe:	46a2      	mov	sl, r4
 8006e00:	46ab      	mov	fp, r5
 8006e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e04:	465b      	mov	r3, fp
 8006e06:	0030      	movs	r0, r6
 8006e08:	695d      	ldr	r5, [r3, #20]
 8006e0a:	f7f9 fedd 	bl	8000bc8 <configuration_is_valid>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	d040      	beq.n	8006e94 <initialize.lto_priv.148+0xd0>
 8006e12:	0033      	movs	r3, r6
 8006e14:	332c      	adds	r3, #44	; 0x2c
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d03b      	beq.n	8006e94 <initialize.lto_priv.148+0xd0>
 8006e1c:	0030      	movs	r0, r6
 8006e1e:	f7f9 fed3 	bl	8000bc8 <configuration_is_valid>
 8006e22:	2400      	movs	r4, #0
 8006e24:	42a0      	cmp	r0, r4
 8006e26:	d001      	beq.n	8006e2c <initialize.lto_priv.148+0x68>
 8006e28:	2334      	movs	r3, #52	; 0x34
 8006e2a:	5ef4      	ldrsh	r4, [r6, r3]
 8006e2c:	b223      	sxth	r3, r4
 8006e2e:	0030      	movs	r0, r6
 8006e30:	9307      	str	r3, [sp, #28]
 8006e32:	f7f9 fec9 	bl	8000bc8 <configuration_is_valid>
 8006e36:	2300      	movs	r3, #0
 8006e38:	b2a4      	uxth	r4, r4
 8006e3a:	4298      	cmp	r0, r3
 8006e3c:	d001      	beq.n	8006e42 <initialize.lto_priv.148+0x7e>
 8006e3e:	2236      	movs	r2, #54	; 0x36
 8006e40:	5eb3      	ldrsh	r3, [r6, r2]
 8006e42:	18e4      	adds	r4, r4, r3
 8006e44:	b223      	sxth	r3, r4
 8006e46:	4698      	mov	r8, r3
 8006e48:	0030      	movs	r0, r6
 8006e4a:	f7f9 fef3 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8006e4e:	4643      	mov	r3, r8
 8006e50:	9a07      	ldr	r2, [sp, #28]
 8006e52:	0001      	movs	r1, r0
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	0018      	movs	r0, r3
 8006e58:	f00a faec 	bl	8011434 <__aeabi_idivmod>
 8006e5c:	1e0c      	subs	r4, r1, #0
 8006e5e:	dd0e      	ble.n	8006e7e <initialize.lto_priv.148+0xba>
 8006e60:	4b99      	ldr	r3, [pc, #612]	; (80070c8 <initialize.lto_priv.148+0x304>)
 8006e62:	001a      	movs	r2, r3
 8006e64:	3230      	adds	r2, #48	; 0x30
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	2a01      	cmp	r2, #1
 8006e6a:	d904      	bls.n	8006e76 <initialize.lto_priv.148+0xb2>
 8006e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e6e:	4a99      	ldr	r2, [pc, #612]	; (80070d4 <initialize.lto_priv.148+0x310>)
 8006e70:	4997      	ldr	r1, [pc, #604]	; (80070d0 <initialize.lto_priv.148+0x30c>)
 8006e72:	2002      	movs	r0, #2
 8006e74:	4798      	blx	r3
 8006e76:	4643      	mov	r3, r8
 8006e78:	1b1c      	subs	r4, r3, r4
 8006e7a:	b223      	sxth	r3, r4
 8006e7c:	4698      	mov	r8, r3
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	4598      	cmp	r8, r3
 8006e82:	da28      	bge.n	8006ed6 <initialize.lto_priv.148+0x112>
 8006e84:	4b90      	ldr	r3, [pc, #576]	; (80070c8 <initialize.lto_priv.148+0x304>)
 8006e86:	2000      	movs	r0, #0
 8006e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8a:	4a93      	ldr	r2, [pc, #588]	; (80070d8 <initialize.lto_priv.148+0x314>)
 8006e8c:	4990      	ldr	r1, [pc, #576]	; (80070d0 <initialize.lto_priv.148+0x30c>)
 8006e8e:	4798      	blx	r3
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7b0      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 8006e94:	0030      	movs	r0, r6
 8006e96:	f7f9 fe97 	bl	8000bc8 <configuration_is_valid>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d016      	beq.n	8006ecc <initialize.lto_priv.148+0x108>
 8006e9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ea0:	4698      	mov	r8, r3
 8006ea2:	0030      	movs	r0, r6
 8006ea4:	f7f9 fe90 	bl	8000bc8 <configuration_is_valid>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d012      	beq.n	8006ed2 <initialize.lto_priv.148+0x10e>
 8006eac:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8006eae:	4641      	mov	r1, r8
 8006eb0:	f009 fb72 	bl	8010598 <__aeabi_fadd>
 8006eb4:	1c04      	adds	r4, r0, #0
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	f7ff ff5a 	bl	8006d70 <meter_to_points.lto_priv.145>
 8006ebc:	b203      	sxth	r3, r0
 8006ebe:	1c20      	adds	r0, r4, #0
 8006ec0:	9307      	str	r3, [sp, #28]
 8006ec2:	f7ff ff55 	bl	8006d70 <meter_to_points.lto_priv.145>
 8006ec6:	b203      	sxth	r3, r0
 8006ec8:	4698      	mov	r8, r3
 8006eca:	e7bd      	b.n	8006e48 <initialize.lto_priv.148+0x84>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4698      	mov	r8, r3
 8006ed0:	e7e7      	b.n	8006ea2 <initialize.lto_priv.148+0xde>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e7eb      	b.n	8006eae <initialize.lto_priv.148+0xea>
 8006ed6:	0030      	movs	r0, r6
 8006ed8:	f7f9 fe76 	bl	8000bc8 <configuration_is_valid>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d005      	beq.n	8006eec <initialize.lto_priv.148+0x128>
 8006ee0:	0033      	movs	r3, r6
 8006ee2:	336e      	adds	r3, #110	; 0x6e
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d000      	beq.n	8006eec <initialize.lto_priv.148+0x128>
 8006eea:	e1d7      	b.n	800729c <initialize.lto_priv.148+0x4d8>
 8006eec:	0033      	movs	r3, r6
 8006eee:	332e      	adds	r3, #46	; 0x2e
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d100      	bne.n	8006ef8 <initialize.lto_priv.148+0x134>
 8006ef6:	e0d2      	b.n	800709e <initialize.lto_priv.148+0x2da>
 8006ef8:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006efa:	b213      	sxth	r3, r2
 8006efc:	3b01      	subs	r3, #1
 8006efe:	2007      	movs	r0, #7
 8006f00:	015b      	lsls	r3, r3, #5
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	0019      	movs	r1, r3
 8006f06:	0152      	lsls	r2, r2, #5
 8006f08:	3a1a      	subs	r2, #26
 8006f0a:	b212      	sxth	r2, r2
 8006f0c:	17d4      	asrs	r4, r2, #31
 8006f0e:	4004      	ands	r4, r0
 8006f10:	18a2      	adds	r2, r4, r2
 8006f12:	10d2      	asrs	r2, r2, #3
 8006f14:	00d2      	lsls	r2, r2, #3
 8006f16:	390f      	subs	r1, #15
 8006f18:	1a8c      	subs	r4, r1, r2
 8006f1a:	9a07      	ldr	r2, [sp, #28]
 8006f1c:	b224      	sxth	r4, r4
 8006f1e:	4294      	cmp	r4, r2
 8006f20:	dc00      	bgt.n	8006f24 <initialize.lto_priv.148+0x160>
 8006f22:	e0e7      	b.n	80070f4 <initialize.lto_priv.148+0x330>
 8006f24:	4b68      	ldr	r3, [pc, #416]	; (80070c8 <initialize.lto_priv.148+0x304>)
 8006f26:	0010      	movs	r0, r2
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	9308      	str	r3, [sp, #32]
 8006f2c:	f7ff ff04 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f30:	2100      	movs	r1, #0
 8006f32:	f00a fad5 	bl	80114e0 <__aeabi_fcmplt>
 8006f36:	4d69      	ldr	r5, [pc, #420]	; (80070dc <initialize.lto_priv.148+0x318>)
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d100      	bne.n	8006f3e <initialize.lto_priv.148+0x17a>
 8006f3c:	4d68      	ldr	r5, [pc, #416]	; (80070e0 <initialize.lto_priv.148+0x31c>)
 8006f3e:	9807      	ldr	r0, [sp, #28]
 8006f40:	f7ff fefa 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f44:	1c06      	adds	r6, r0, #0
 8006f46:	9807      	ldr	r0, [sp, #28]
 8006f48:	f7ff fef6 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	f00a fac7 	bl	80114e0 <__aeabi_fcmplt>
 8006f52:	2800      	cmp	r0, #0
 8006f54:	d100      	bne.n	8006f58 <initialize.lto_priv.148+0x194>
 8006f56:	e0a4      	b.n	80070a2 <initialize.lto_priv.148+0x2de>
 8006f58:	4962      	ldr	r1, [pc, #392]	; (80070e4 <initialize.lto_priv.148+0x320>)
 8006f5a:	1c30      	adds	r0, r6, #0
 8006f5c:	f009 fdc8 	bl	8010af0 <__aeabi_fmul>
 8006f60:	4961      	ldr	r1, [pc, #388]	; (80070e8 <initialize.lto_priv.148+0x324>)
 8006f62:	f009 fb19 	bl	8010598 <__aeabi_fadd>
 8006f66:	f00a fb03 	bl	8011570 <__aeabi_f2uiz>
 8006f6a:	0007      	movs	r7, r0
 8006f6c:	9807      	ldr	r0, [sp, #28]
 8006f6e:	f7ff fee3 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f72:	1c06      	adds	r6, r0, #0
 8006f74:	9807      	ldr	r0, [sp, #28]
 8006f76:	f7ff fedf 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	f00a fab0 	bl	80114e0 <__aeabi_fcmplt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d100      	bne.n	8006f86 <initialize.lto_priv.148+0x1c2>
 8006f84:	e090      	b.n	80070a8 <initialize.lto_priv.148+0x2e4>
 8006f86:	4957      	ldr	r1, [pc, #348]	; (80070e4 <initialize.lto_priv.148+0x320>)
 8006f88:	1c30      	adds	r0, r6, #0
 8006f8a:	f009 fdb1 	bl	8010af0 <__aeabi_fmul>
 8006f8e:	4956      	ldr	r1, [pc, #344]	; (80070e8 <initialize.lto_priv.148+0x324>)
 8006f90:	f009 fb02 	bl	8010598 <__aeabi_fadd>
 8006f94:	1c06      	adds	r6, r0, #0
 8006f96:	9807      	ldr	r0, [sp, #28]
 8006f98:	f7ff fece 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	9807      	ldr	r0, [sp, #28]
 8006fa0:	f7ff feca 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	f00a fa9b 	bl	80114e0 <__aeabi_fcmplt>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d07f      	beq.n	80070ae <initialize.lto_priv.148+0x2ea>
 8006fae:	494d      	ldr	r1, [pc, #308]	; (80070e4 <initialize.lto_priv.148+0x320>)
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f009 fd9d 	bl	8010af0 <__aeabi_fmul>
 8006fb6:	494c      	ldr	r1, [pc, #304]	; (80070e8 <initialize.lto_priv.148+0x324>)
 8006fb8:	f009 faee 	bl	8010598 <__aeabi_fadd>
 8006fbc:	f00a fad8 	bl	8011570 <__aeabi_f2uiz>
 8006fc0:	f00a fcf6 	bl	80119b0 <__aeabi_ui2f>
 8006fc4:	1c01      	adds	r1, r0, #0
 8006fc6:	1c30      	adds	r0, r6, #0
 8006fc8:	f009 fec4 	bl	8010d54 <__aeabi_fsub>
 8006fcc:	4947      	ldr	r1, [pc, #284]	; (80070ec <initialize.lto_priv.148+0x328>)
 8006fce:	f009 fd8f 	bl	8010af0 <__aeabi_fmul>
 8006fd2:	f00a facd 	bl	8011570 <__aeabi_f2uiz>
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	0020      	movs	r0, r4
 8006fda:	f7ff fead 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f00a fa7e 	bl	80114e0 <__aeabi_fcmplt>
 8006fe4:	4e3d      	ldr	r6, [pc, #244]	; (80070dc <initialize.lto_priv.148+0x318>)
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d100      	bne.n	8006fec <initialize.lto_priv.148+0x228>
 8006fea:	4e3d      	ldr	r6, [pc, #244]	; (80070e0 <initialize.lto_priv.148+0x31c>)
 8006fec:	0020      	movs	r0, r4
 8006fee:	f7ff fea3 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006ff2:	4681      	mov	r9, r0
 8006ff4:	0020      	movs	r0, r4
 8006ff6:	f7ff fe9f 	bl	8006d38 <points_to_meter.lto_priv.141>
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	f00a fa70 	bl	80114e0 <__aeabi_fcmplt>
 8007000:	2800      	cmp	r0, #0
 8007002:	d057      	beq.n	80070b4 <initialize.lto_priv.148+0x2f0>
 8007004:	4937      	ldr	r1, [pc, #220]	; (80070e4 <initialize.lto_priv.148+0x320>)
 8007006:	4648      	mov	r0, r9
 8007008:	f009 fd72 	bl	8010af0 <__aeabi_fmul>
 800700c:	4936      	ldr	r1, [pc, #216]	; (80070e8 <initialize.lto_priv.148+0x324>)
 800700e:	f009 fac3 	bl	8010598 <__aeabi_fadd>
 8007012:	f00a faad 	bl	8011570 <__aeabi_f2uiz>
 8007016:	4681      	mov	r9, r0
 8007018:	0020      	movs	r0, r4
 800701a:	f7ff fe8d 	bl	8006d38 <points_to_meter.lto_priv.141>
 800701e:	4682      	mov	sl, r0
 8007020:	0020      	movs	r0, r4
 8007022:	f7ff fe89 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007026:	2100      	movs	r1, #0
 8007028:	f00a fa5a 	bl	80114e0 <__aeabi_fcmplt>
 800702c:	2800      	cmp	r0, #0
 800702e:	d044      	beq.n	80070ba <initialize.lto_priv.148+0x2f6>
 8007030:	492c      	ldr	r1, [pc, #176]	; (80070e4 <initialize.lto_priv.148+0x320>)
 8007032:	4650      	mov	r0, sl
 8007034:	f009 fd5c 	bl	8010af0 <__aeabi_fmul>
 8007038:	492b      	ldr	r1, [pc, #172]	; (80070e8 <initialize.lto_priv.148+0x324>)
 800703a:	f009 faad 	bl	8010598 <__aeabi_fadd>
 800703e:	4682      	mov	sl, r0
 8007040:	0020      	movs	r0, r4
 8007042:	f7ff fe79 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007046:	4683      	mov	fp, r0
 8007048:	0020      	movs	r0, r4
 800704a:	f7ff fe75 	bl	8006d38 <points_to_meter.lto_priv.141>
 800704e:	2100      	movs	r1, #0
 8007050:	f00a fa46 	bl	80114e0 <__aeabi_fcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	d033      	beq.n	80070c0 <initialize.lto_priv.148+0x2fc>
 8007058:	4922      	ldr	r1, [pc, #136]	; (80070e4 <initialize.lto_priv.148+0x320>)
 800705a:	4658      	mov	r0, fp
 800705c:	f009 fd48 	bl	8010af0 <__aeabi_fmul>
 8007060:	4921      	ldr	r1, [pc, #132]	; (80070e8 <initialize.lto_priv.148+0x324>)
 8007062:	f009 fa99 	bl	8010598 <__aeabi_fadd>
 8007066:	f00a fa83 	bl	8011570 <__aeabi_f2uiz>
 800706a:	f00a fca1 	bl	80119b0 <__aeabi_ui2f>
 800706e:	1c01      	adds	r1, r0, #0
 8007070:	4650      	mov	r0, sl
 8007072:	f009 fe6f 	bl	8010d54 <__aeabi_fsub>
 8007076:	491d      	ldr	r1, [pc, #116]	; (80070ec <initialize.lto_priv.148+0x328>)
 8007078:	f009 fd3a 	bl	8010af0 <__aeabi_fmul>
 800707c:	f00a fa78 	bl	8011570 <__aeabi_f2uiz>
 8007080:	464b      	mov	r3, r9
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	4643      	mov	r3, r8
 8007086:	9004      	str	r0, [sp, #16]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	2000      	movs	r0, #0
 800708c:	9602      	str	r6, [sp, #8]
 800708e:	9700      	str	r7, [sp, #0]
 8007090:	002b      	movs	r3, r5
 8007092:	4a17      	ldr	r2, [pc, #92]	; (80070f0 <initialize.lto_priv.148+0x32c>)
 8007094:	490e      	ldr	r1, [pc, #56]	; (80070d0 <initialize.lto_priv.148+0x30c>)
 8007096:	9c08      	ldr	r4, [sp, #32]
 8007098:	47a0      	blx	r4
 800709a:	2000      	movs	r0, #0
 800709c:	e6ab      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 800709e:	783a      	ldrb	r2, [r7, #0]
 80070a0:	e72b      	b.n	8006efa <initialize.lto_priv.148+0x136>
 80070a2:	21fe      	movs	r1, #254	; 0xfe
 80070a4:	0589      	lsls	r1, r1, #22
 80070a6:	e758      	b.n	8006f5a <initialize.lto_priv.148+0x196>
 80070a8:	21fe      	movs	r1, #254	; 0xfe
 80070aa:	0589      	lsls	r1, r1, #22
 80070ac:	e76c      	b.n	8006f88 <initialize.lto_priv.148+0x1c4>
 80070ae:	21fe      	movs	r1, #254	; 0xfe
 80070b0:	0589      	lsls	r1, r1, #22
 80070b2:	e77d      	b.n	8006fb0 <initialize.lto_priv.148+0x1ec>
 80070b4:	21fe      	movs	r1, #254	; 0xfe
 80070b6:	0589      	lsls	r1, r1, #22
 80070b8:	e7a5      	b.n	8007006 <initialize.lto_priv.148+0x242>
 80070ba:	21fe      	movs	r1, #254	; 0xfe
 80070bc:	0589      	lsls	r1, r1, #22
 80070be:	e7b8      	b.n	8007032 <initialize.lto_priv.148+0x26e>
 80070c0:	21fe      	movs	r1, #254	; 0xfe
 80070c2:	0589      	lsls	r1, r1, #22
 80070c4:	e7c9      	b.n	800705a <initialize.lto_priv.148+0x296>
 80070c6:	46c0      	nop			; (mov r8, r8)
 80070c8:	200005d8 	.word	0x200005d8
 80070cc:	0801dcf7 	.word	0x0801dcf7
 80070d0:	0801dc4b 	.word	0x0801dc4b
 80070d4:	0801dd22 	.word	0x0801dd22
 80070d8:	0801dd55 	.word	0x0801dd55
 80070dc:	0801ee30 	.word	0x0801ee30
 80070e0:	0801e847 	.word	0x0801e847
 80070e4:	bf800000 	.word	0xbf800000
 80070e8:	350637bd 	.word	0x350637bd
 80070ec:	49742400 	.word	0x49742400
 80070f0:	0801dd84 	.word	0x0801dd84
 80070f4:	3b30      	subs	r3, #48	; 0x30
 80070f6:	b21c      	sxth	r4, r3
 80070f8:	4544      	cmp	r4, r8
 80070fa:	db00      	blt.n	80070fe <initialize.lto_priv.148+0x33a>
 80070fc:	e0ce      	b.n	800729c <initialize.lto_priv.148+0x4d8>
 80070fe:	4bd7      	ldr	r3, [pc, #860]	; (800745c <initialize.lto_priv.148+0x698>)
 8007100:	4640      	mov	r0, r8
 8007102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	f7ff fe17 	bl	8006d38 <points_to_meter.lto_priv.141>
 800710a:	2100      	movs	r1, #0
 800710c:	f00a f9e8 	bl	80114e0 <__aeabi_fcmplt>
 8007110:	4dd3      	ldr	r5, [pc, #844]	; (8007460 <initialize.lto_priv.148+0x69c>)
 8007112:	2800      	cmp	r0, #0
 8007114:	d100      	bne.n	8007118 <initialize.lto_priv.148+0x354>
 8007116:	4dd3      	ldr	r5, [pc, #844]	; (8007464 <initialize.lto_priv.148+0x6a0>)
 8007118:	4640      	mov	r0, r8
 800711a:	f7ff fe0d 	bl	8006d38 <points_to_meter.lto_priv.141>
 800711e:	1c06      	adds	r6, r0, #0
 8007120:	4640      	mov	r0, r8
 8007122:	f7ff fe09 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007126:	2100      	movs	r1, #0
 8007128:	f00a f9da 	bl	80114e0 <__aeabi_fcmplt>
 800712c:	2800      	cmp	r0, #0
 800712e:	d100      	bne.n	8007132 <initialize.lto_priv.148+0x36e>
 8007130:	e0a2      	b.n	8007278 <initialize.lto_priv.148+0x4b4>
 8007132:	49cd      	ldr	r1, [pc, #820]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 8007134:	1c30      	adds	r0, r6, #0
 8007136:	f009 fcdb 	bl	8010af0 <__aeabi_fmul>
 800713a:	49cc      	ldr	r1, [pc, #816]	; (800746c <initialize.lto_priv.148+0x6a8>)
 800713c:	f009 fa2c 	bl	8010598 <__aeabi_fadd>
 8007140:	f00a fa16 	bl	8011570 <__aeabi_f2uiz>
 8007144:	0007      	movs	r7, r0
 8007146:	4640      	mov	r0, r8
 8007148:	f7ff fdf6 	bl	8006d38 <points_to_meter.lto_priv.141>
 800714c:	1c06      	adds	r6, r0, #0
 800714e:	4640      	mov	r0, r8
 8007150:	f7ff fdf2 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007154:	2100      	movs	r1, #0
 8007156:	f00a f9c3 	bl	80114e0 <__aeabi_fcmplt>
 800715a:	2800      	cmp	r0, #0
 800715c:	d100      	bne.n	8007160 <initialize.lto_priv.148+0x39c>
 800715e:	e08e      	b.n	800727e <initialize.lto_priv.148+0x4ba>
 8007160:	49c1      	ldr	r1, [pc, #772]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 8007162:	1c30      	adds	r0, r6, #0
 8007164:	f009 fcc4 	bl	8010af0 <__aeabi_fmul>
 8007168:	49c0      	ldr	r1, [pc, #768]	; (800746c <initialize.lto_priv.148+0x6a8>)
 800716a:	f009 fa15 	bl	8010598 <__aeabi_fadd>
 800716e:	1c06      	adds	r6, r0, #0
 8007170:	4640      	mov	r0, r8
 8007172:	f7ff fde1 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007176:	4681      	mov	r9, r0
 8007178:	4640      	mov	r0, r8
 800717a:	f7ff fddd 	bl	8006d38 <points_to_meter.lto_priv.141>
 800717e:	2100      	movs	r1, #0
 8007180:	f00a f9ae 	bl	80114e0 <__aeabi_fcmplt>
 8007184:	2800      	cmp	r0, #0
 8007186:	d07d      	beq.n	8007284 <initialize.lto_priv.148+0x4c0>
 8007188:	49b7      	ldr	r1, [pc, #732]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 800718a:	4648      	mov	r0, r9
 800718c:	f009 fcb0 	bl	8010af0 <__aeabi_fmul>
 8007190:	49b6      	ldr	r1, [pc, #728]	; (800746c <initialize.lto_priv.148+0x6a8>)
 8007192:	f009 fa01 	bl	8010598 <__aeabi_fadd>
 8007196:	f00a f9eb 	bl	8011570 <__aeabi_f2uiz>
 800719a:	f00a fc09 	bl	80119b0 <__aeabi_ui2f>
 800719e:	1c01      	adds	r1, r0, #0
 80071a0:	1c30      	adds	r0, r6, #0
 80071a2:	f009 fdd7 	bl	8010d54 <__aeabi_fsub>
 80071a6:	49b2      	ldr	r1, [pc, #712]	; (8007470 <initialize.lto_priv.148+0x6ac>)
 80071a8:	f009 fca2 	bl	8010af0 <__aeabi_fmul>
 80071ac:	f00a f9e0 	bl	8011570 <__aeabi_f2uiz>
 80071b0:	4680      	mov	r8, r0
 80071b2:	0020      	movs	r0, r4
 80071b4:	f7ff fdc0 	bl	8006d38 <points_to_meter.lto_priv.141>
 80071b8:	2100      	movs	r1, #0
 80071ba:	f00a f991 	bl	80114e0 <__aeabi_fcmplt>
 80071be:	4ea8      	ldr	r6, [pc, #672]	; (8007460 <initialize.lto_priv.148+0x69c>)
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d100      	bne.n	80071c6 <initialize.lto_priv.148+0x402>
 80071c4:	4ea7      	ldr	r6, [pc, #668]	; (8007464 <initialize.lto_priv.148+0x6a0>)
 80071c6:	0020      	movs	r0, r4
 80071c8:	f7ff fdb6 	bl	8006d38 <points_to_meter.lto_priv.141>
 80071cc:	4681      	mov	r9, r0
 80071ce:	0020      	movs	r0, r4
 80071d0:	f7ff fdb2 	bl	8006d38 <points_to_meter.lto_priv.141>
 80071d4:	2100      	movs	r1, #0
 80071d6:	f00a f983 	bl	80114e0 <__aeabi_fcmplt>
 80071da:	2800      	cmp	r0, #0
 80071dc:	d055      	beq.n	800728a <initialize.lto_priv.148+0x4c6>
 80071de:	49a2      	ldr	r1, [pc, #648]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 80071e0:	4648      	mov	r0, r9
 80071e2:	f009 fc85 	bl	8010af0 <__aeabi_fmul>
 80071e6:	49a1      	ldr	r1, [pc, #644]	; (800746c <initialize.lto_priv.148+0x6a8>)
 80071e8:	f009 f9d6 	bl	8010598 <__aeabi_fadd>
 80071ec:	f00a f9c0 	bl	8011570 <__aeabi_f2uiz>
 80071f0:	4681      	mov	r9, r0
 80071f2:	0020      	movs	r0, r4
 80071f4:	f7ff fda0 	bl	8006d38 <points_to_meter.lto_priv.141>
 80071f8:	4682      	mov	sl, r0
 80071fa:	0020      	movs	r0, r4
 80071fc:	f7ff fd9c 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007200:	2100      	movs	r1, #0
 8007202:	f00a f96d 	bl	80114e0 <__aeabi_fcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	d042      	beq.n	8007290 <initialize.lto_priv.148+0x4cc>
 800720a:	4997      	ldr	r1, [pc, #604]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 800720c:	4650      	mov	r0, sl
 800720e:	f009 fc6f 	bl	8010af0 <__aeabi_fmul>
 8007212:	4996      	ldr	r1, [pc, #600]	; (800746c <initialize.lto_priv.148+0x6a8>)
 8007214:	f009 f9c0 	bl	8010598 <__aeabi_fadd>
 8007218:	4682      	mov	sl, r0
 800721a:	0020      	movs	r0, r4
 800721c:	f7ff fd8c 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007220:	4683      	mov	fp, r0
 8007222:	0020      	movs	r0, r4
 8007224:	f7ff fd88 	bl	8006d38 <points_to_meter.lto_priv.141>
 8007228:	2100      	movs	r1, #0
 800722a:	f00a f959 	bl	80114e0 <__aeabi_fcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d031      	beq.n	8007296 <initialize.lto_priv.148+0x4d2>
 8007232:	498d      	ldr	r1, [pc, #564]	; (8007468 <initialize.lto_priv.148+0x6a4>)
 8007234:	4658      	mov	r0, fp
 8007236:	f009 fc5b 	bl	8010af0 <__aeabi_fmul>
 800723a:	498c      	ldr	r1, [pc, #560]	; (800746c <initialize.lto_priv.148+0x6a8>)
 800723c:	f009 f9ac 	bl	8010598 <__aeabi_fadd>
 8007240:	f00a f996 	bl	8011570 <__aeabi_f2uiz>
 8007244:	f00a fbb4 	bl	80119b0 <__aeabi_ui2f>
 8007248:	1c01      	adds	r1, r0, #0
 800724a:	4650      	mov	r0, sl
 800724c:	f009 fd82 	bl	8010d54 <__aeabi_fsub>
 8007250:	4987      	ldr	r1, [pc, #540]	; (8007470 <initialize.lto_priv.148+0x6ac>)
 8007252:	f009 fc4d 	bl	8010af0 <__aeabi_fmul>
 8007256:	f00a f98b 	bl	8011570 <__aeabi_f2uiz>
 800725a:	464b      	mov	r3, r9
 800725c:	9303      	str	r3, [sp, #12]
 800725e:	4643      	mov	r3, r8
 8007260:	9004      	str	r0, [sp, #16]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	2000      	movs	r0, #0
 8007266:	9602      	str	r6, [sp, #8]
 8007268:	9700      	str	r7, [sp, #0]
 800726a:	002b      	movs	r3, r5
 800726c:	4a81      	ldr	r2, [pc, #516]	; (8007474 <initialize.lto_priv.148+0x6b0>)
 800726e:	4982      	ldr	r1, [pc, #520]	; (8007478 <initialize.lto_priv.148+0x6b4>)
 8007270:	9c07      	ldr	r4, [sp, #28]
 8007272:	47a0      	blx	r4
 8007274:	2000      	movs	r0, #0
 8007276:	e5be      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 8007278:	21fe      	movs	r1, #254	; 0xfe
 800727a:	0589      	lsls	r1, r1, #22
 800727c:	e75a      	b.n	8007134 <initialize.lto_priv.148+0x370>
 800727e:	21fe      	movs	r1, #254	; 0xfe
 8007280:	0589      	lsls	r1, r1, #22
 8007282:	e76e      	b.n	8007162 <initialize.lto_priv.148+0x39e>
 8007284:	21fe      	movs	r1, #254	; 0xfe
 8007286:	0589      	lsls	r1, r1, #22
 8007288:	e77f      	b.n	800718a <initialize.lto_priv.148+0x3c6>
 800728a:	21fe      	movs	r1, #254	; 0xfe
 800728c:	0589      	lsls	r1, r1, #22
 800728e:	e7a7      	b.n	80071e0 <initialize.lto_priv.148+0x41c>
 8007290:	21fe      	movs	r1, #254	; 0xfe
 8007292:	0589      	lsls	r1, r1, #22
 8007294:	e7ba      	b.n	800720c <initialize.lto_priv.148+0x448>
 8007296:	21fe      	movs	r1, #254	; 0xfe
 8007298:	0589      	lsls	r1, r1, #22
 800729a:	e7cb      	b.n	8007234 <initialize.lto_priv.148+0x470>
 800729c:	0030      	movs	r0, r6
 800729e:	f7f9 fcc9 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 80072a2:	4643      	mov	r3, r8
 80072a4:	9a07      	ldr	r2, [sp, #28]
 80072a6:	9009      	str	r0, [sp, #36]	; 0x24
 80072a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072aa:	1a98      	subs	r0, r3, r2
 80072ac:	f009 ffdc 	bl	8011268 <__divsi3>
 80072b0:	3001      	adds	r0, #1
 80072b2:	b283      	uxth	r3, r0
 80072b4:	0030      	movs	r0, r6
 80072b6:	930a      	str	r3, [sp, #40]	; 0x28
 80072b8:	f7f9 fcc7 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 80072bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072be:	4358      	muls	r0, r3
 80072c0:	b283      	uxth	r3, r0
 80072c2:	0030      	movs	r0, r6
 80072c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c6:	f7f9 fc7f 	bl	8000bc8 <configuration_is_valid>
 80072ca:	2300      	movs	r3, #0
 80072cc:	4298      	cmp	r0, r3
 80072ce:	d009      	beq.n	80072e4 <initialize.lto_priv.148+0x520>
 80072d0:	0032      	movs	r2, r6
 80072d2:	324f      	adds	r2, #79	; 0x4f
 80072d4:	0033      	movs	r3, r6
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	3352      	adds	r3, #82	; 0x52
 80072da:	1e51      	subs	r1, r2, #1
 80072dc:	418a      	sbcs	r2, r1
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	4252      	negs	r2, r2
 80072e2:	4013      	ands	r3, r2
 80072e4:	002a      	movs	r2, r5
 80072e6:	32b8      	adds	r2, #184	; 0xb8
 80072e8:	8013      	strh	r3, [r2, #0]
 80072ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ec:	4694      	mov	ip, r2
 80072ee:	2280      	movs	r2, #128	; 0x80
 80072f0:	4463      	add	r3, ip
 80072f2:	0112      	lsls	r2, r2, #4
 80072f4:	4293      	cmp	r3, r2
 80072f6:	dd07      	ble.n	8007308 <initialize.lto_priv.148+0x544>
 80072f8:	4b58      	ldr	r3, [pc, #352]	; (800745c <initialize.lto_priv.148+0x698>)
 80072fa:	2000      	movs	r0, #0
 80072fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fe:	4a5f      	ldr	r2, [pc, #380]	; (800747c <initialize.lto_priv.148+0x6b8>)
 8007300:	495d      	ldr	r1, [pc, #372]	; (8007478 <initialize.lto_priv.148+0x6b4>)
 8007302:	4798      	blx	r3
 8007304:	2000      	movs	r0, #0
 8007306:	e576      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 8007308:	0030      	movs	r0, r6
 800730a:	f7f9 fd15 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 800730e:	4681      	mov	r9, r0
 8007310:	0030      	movs	r0, r6
 8007312:	f7f9 fc59 	bl	8000bc8 <configuration_is_valid>
 8007316:	2406      	movs	r4, #6
 8007318:	2800      	cmp	r0, #0
 800731a:	d000      	beq.n	800731e <initialize.lto_priv.148+0x55a>
 800731c:	783c      	ldrb	r4, [r7, #0]
 800731e:	0030      	movs	r0, r6
 8007320:	f7f9 fc52 	bl	8000bc8 <configuration_is_valid>
 8007324:	2303      	movs	r3, #3
 8007326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007328:	435a      	muls	r2, r3
 800732a:	920c      	str	r2, [sp, #48]	; 0x30
 800732c:	2800      	cmp	r0, #0
 800732e:	d004      	beq.n	800733a <initialize.lto_priv.148+0x576>
 8007330:	0032      	movs	r2, r6
 8007332:	326a      	adds	r2, #106	; 0x6a
 8007334:	7812      	ldrb	r2, [r2, #0]
 8007336:	2a00      	cmp	r2, #0
 8007338:	d142      	bne.n	80073c0 <initialize.lto_priv.148+0x5fc>
 800733a:	464b      	mov	r3, r9
 800733c:	2007      	movs	r0, #7
 800733e:	4358      	muls	r0, r3
 8007340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007342:	300d      	adds	r0, #13
 8007344:	4358      	muls	r0, r3
 8007346:	4344      	muls	r4, r0
 8007348:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800734a:	0023      	movs	r3, r4
 800734c:	4694      	mov	ip, r2
 800734e:	4463      	add	r3, ip
 8007350:	9313      	str	r3, [sp, #76]	; 0x4c
 8007352:	f7ff fcdf 	bl	8006d14 <get_pll_freq>
 8007356:	21f4      	movs	r1, #244	; 0xf4
 8007358:	0589      	lsls	r1, r1, #22
 800735a:	f009 fbc9 	bl	8010af0 <__aeabi_fmul>
 800735e:	9014      	str	r0, [sp, #80]	; 0x50
 8007360:	0030      	movs	r0, r6
 8007362:	f7f9 fc31 	bl	8000bc8 <configuration_is_valid>
 8007366:	2800      	cmp	r0, #0
 8007368:	d03d      	beq.n	80073e6 <initialize.lto_priv.148+0x622>
 800736a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800736c:	f00a fb20 	bl	80119b0 <__aeabi_ui2f>
 8007370:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8007372:	1c07      	adds	r7, r0, #0
 8007374:	2100      	movs	r1, #0
 8007376:	1c20      	adds	r0, r4, #0
 8007378:	f00a f8c6 	bl	8011508 <__aeabi_fcmpgt>
 800737c:	2800      	cmp	r0, #0
 800737e:	d032      	beq.n	80073e6 <initialize.lto_priv.148+0x622>
 8007380:	1c21      	adds	r1, r4, #0
 8007382:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007384:	f009 faa2 	bl	80108cc <__aeabi_fdiv>
 8007388:	1c39      	adds	r1, r7, #0
 800738a:	f009 fce3 	bl	8010d54 <__aeabi_fsub>
 800738e:	1c04      	adds	r4, r0, #0
 8007390:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007392:	f00a fb0d 	bl	80119b0 <__aeabi_ui2f>
 8007396:	1c01      	adds	r1, r0, #0
 8007398:	1c20      	adds	r0, r4, #0
 800739a:	f009 fa97 	bl	80108cc <__aeabi_fdiv>
 800739e:	21fc      	movs	r1, #252	; 0xfc
 80073a0:	0589      	lsls	r1, r1, #22
 80073a2:	f009 f8f9 	bl	8010598 <__aeabi_fadd>
 80073a6:	f00a fa99 	bl	80118dc <__aeabi_f2iz>
 80073aa:	900d      	str	r0, [sp, #52]	; 0x34
 80073ac:	2800      	cmp	r0, #0
 80073ae:	da0f      	bge.n	80073d0 <initialize.lto_priv.148+0x60c>
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <initialize.lto_priv.148+0x698>)
 80073b2:	2000      	movs	r0, #0
 80073b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b6:	4a32      	ldr	r2, [pc, #200]	; (8007480 <initialize.lto_priv.148+0x6bc>)
 80073b8:	492f      	ldr	r1, [pc, #188]	; (8007478 <initialize.lto_priv.148+0x6b4>)
 80073ba:	4798      	blx	r3
 80073bc:	2000      	movs	r0, #0
 80073be:	e51a      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 80073c0:	464a      	mov	r2, r9
 80073c2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80073c4:	930c      	str	r3, [sp, #48]	; 0x30
 80073c6:	4350      	muls	r0, r2
 80073c8:	300f      	adds	r0, #15
 80073ca:	4344      	muls	r4, r0
 80073cc:	34d4      	adds	r4, #212	; 0xd4
 80073ce:	e7bb      	b.n	8007348 <initialize.lto_priv.148+0x584>
 80073d0:	4b2c      	ldr	r3, [pc, #176]	; (8007484 <initialize.lto_priv.148+0x6c0>)
 80073d2:	4298      	cmp	r0, r3
 80073d4:	dd08      	ble.n	80073e8 <initialize.lto_priv.148+0x624>
 80073d6:	4b21      	ldr	r3, [pc, #132]	; (800745c <initialize.lto_priv.148+0x698>)
 80073d8:	2000      	movs	r0, #0
 80073da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073dc:	4a2a      	ldr	r2, [pc, #168]	; (8007488 <initialize.lto_priv.148+0x6c4>)
 80073de:	4926      	ldr	r1, [pc, #152]	; (8007478 <initialize.lto_priv.148+0x6b4>)
 80073e0:	4798      	blx	r3
 80073e2:	2000      	movs	r0, #0
 80073e4:	e507      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 80073e6:	900d      	str	r0, [sp, #52]	; 0x34
 80073e8:	002b      	movs	r3, r5
 80073ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073ec:	33b6      	adds	r3, #182	; 0xb6
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	0030      	movs	r0, r6
 80073f2:	f7f9 fcb5 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 80073f6:	002b      	movs	r3, r5
 80073f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073fa:	33ba      	adds	r3, #186	; 0xba
 80073fc:	7018      	strb	r0, [r3, #0]
 80073fe:	3b06      	subs	r3, #6
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	0033      	movs	r3, r6
 8007404:	332e      	adds	r3, #46	; 0x2e
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d022      	beq.n	8007452 <initialize.lto_priv.148+0x68e>
 800740c:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 800740e:	465b      	mov	r3, fp
 8007410:	809c      	strh	r4, [r3, #4]
 8007412:	466b      	mov	r3, sp
 8007414:	8b9f      	ldrh	r7, [r3, #28]
 8007416:	465b      	mov	r3, fp
 8007418:	9a07      	ldr	r2, [sp, #28]
 800741a:	811a      	strh	r2, [r3, #8]
 800741c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800741e:	815a      	strh	r2, [r3, #10]
 8007420:	2301      	movs	r3, #1
 8007422:	4699      	mov	r9, r3
 8007424:	465b      	mov	r3, fp
 8007426:	464a      	mov	r2, r9
 8007428:	819a      	strh	r2, [r3, #12]
 800742a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800742c:	3b01      	subs	r3, #1
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b07      	cmp	r3, #7
 8007432:	d806      	bhi.n	8007442 <initialize.lto_priv.148+0x67e>
 8007434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007436:	2008      	movs	r0, #8
 8007438:	f009 fffc 	bl	8011434 <__aeabi_idivmod>
 800743c:	910e      	str	r1, [sp, #56]	; 0x38
 800743e:	2900      	cmp	r1, #0
 8007440:	d026      	beq.n	8007490 <initialize.lto_priv.148+0x6cc>
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <initialize.lto_priv.148+0x698>)
 8007444:	2000      	movs	r0, #0
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	4a10      	ldr	r2, [pc, #64]	; (800748c <initialize.lto_priv.148+0x6c8>)
 800744a:	490b      	ldr	r1, [pc, #44]	; (8007478 <initialize.lto_priv.148+0x6b4>)
 800744c:	4798      	blx	r3
 800744e:	2000      	movs	r0, #0
 8007450:	e4d1      	b.n	8006df6 <initialize.lto_priv.148+0x32>
 8007452:	0033      	movs	r3, r6
 8007454:	3332      	adds	r3, #50	; 0x32
 8007456:	781c      	ldrb	r4, [r3, #0]
 8007458:	e7d9      	b.n	800740e <initialize.lto_priv.148+0x64a>
 800745a:	46c0      	nop			; (mov r8, r8)
 800745c:	200005d8 	.word	0x200005d8
 8007460:	0801ee30 	.word	0x0801ee30
 8007464:	0801e847 	.word	0x0801e847
 8007468:	bf800000 	.word	0xbf800000
 800746c:	350637bd 	.word	0x350637bd
 8007470:	49742400 	.word	0x49742400
 8007474:	0801ddc1 	.word	0x0801ddc1
 8007478:	0801dc4b 	.word	0x0801dc4b
 800747c:	0801ddfe 	.word	0x0801ddfe
 8007480:	0801de5e 	.word	0x0801de5e
 8007484:	0000fffe 	.word	0x0000fffe
 8007488:	0801de7f 	.word	0x0801de7f
 800748c:	0801de9f 	.word	0x0801de9f
 8007490:	b224      	sxth	r4, r4
 8007492:	3c01      	subs	r4, #1
 8007494:	0164      	lsls	r4, r4, #5
 8007496:	b2a3      	uxth	r3, r4
 8007498:	001c      	movs	r4, r3
 800749a:	3c0f      	subs	r4, #15
 800749c:	b2a4      	uxth	r4, r4
 800749e:	1b3f      	subs	r7, r7, r4
 80074a0:	b23f      	sxth	r7, r7
 80074a2:	9315      	str	r3, [sp, #84]	; 0x54
 80074a4:	10fb      	asrs	r3, r7, #3
 80074a6:	9318      	str	r3, [sp, #96]	; 0x60
 80074a8:	4643      	mov	r3, r8
 80074aa:	1b1c      	subs	r4, r3, r4
 80074ac:	464b      	mov	r3, r9
 80074ae:	10f9      	asrs	r1, r7, #3
 80074b0:	b224      	sxth	r4, r4
 80074b2:	10e2      	asrs	r2, r4, #3
 80074b4:	1a5b      	subs	r3, r3, r1
 80074b6:	189b      	adds	r3, r3, r2
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	9311      	str	r3, [sp, #68]	; 0x44
 80074bc:	2244      	movs	r2, #68	; 0x44
 80074be:	466b      	mov	r3, sp
 80074c0:	189b      	adds	r3, r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	5e9b      	ldrsh	r3, [r3, r2]
 80074c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c8:	2008      	movs	r0, #8
 80074ca:	4699      	mov	r9, r3
 80074cc:	f009 fecc 	bl	8011268 <__divsi3>
 80074d0:	9010      	str	r0, [sp, #64]	; 0x40
 80074d2:	48db      	ldr	r0, [pc, #876]	; (8007840 <initialize.lto_priv.148+0xa7c>)
 80074d4:	4007      	ands	r7, r0
 80074d6:	9012      	str	r0, [sp, #72]	; 0x48
 80074d8:	d504      	bpl.n	80074e4 <initialize.lto_priv.148+0x720>
 80074da:	2308      	movs	r3, #8
 80074dc:	3f01      	subs	r7, #1
 80074de:	425b      	negs	r3, r3
 80074e0:	431f      	orrs	r7, r3
 80074e2:	3701      	adds	r7, #1
 80074e4:	b23f      	sxth	r7, r7
 80074e6:	2f00      	cmp	r7, #0
 80074e8:	da01      	bge.n	80074ee <initialize.lto_priv.148+0x72a>
 80074ea:	3708      	adds	r7, #8
 80074ec:	b23f      	sxth	r7, r7
 80074ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074f0:	0038      	movs	r0, r7
 80074f2:	f009 ff9f 	bl	8011434 <__aeabi_idivmod>
 80074f6:	466b      	mov	r3, sp
 80074f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80074fa:	213c      	movs	r1, #60	; 0x3c
 80074fc:	5e59      	ldrsh	r1, [r3, r1]
 80074fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007500:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007502:	3b01      	subs	r3, #1
 8007504:	9316      	str	r3, [sp, #88]	; 0x58
 8007506:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750a:	4004      	ands	r4, r0
 800750c:	4353      	muls	r3, r2
 800750e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007510:	4694      	mov	ip, r2
 8007512:	4463      	add	r3, ip
 8007514:	b29b      	uxth	r3, r3
 8007516:	b21a      	sxth	r2, r3
 8007518:	2c00      	cmp	r4, #0
 800751a:	da04      	bge.n	8007526 <initialize.lto_priv.148+0x762>
 800751c:	2008      	movs	r0, #8
 800751e:	3c01      	subs	r4, #1
 8007520:	4240      	negs	r0, r0
 8007522:	4304      	orrs	r4, r0
 8007524:	3401      	adds	r4, #1
 8007526:	b224      	sxth	r4, r4
 8007528:	2c00      	cmp	r4, #0
 800752a:	da01      	bge.n	8007530 <initialize.lto_priv.148+0x76c>
 800752c:	3408      	adds	r4, #8
 800752e:	b224      	sxth	r4, r4
 8007530:	4648      	mov	r0, r9
 8007532:	2801      	cmp	r0, #1
 8007534:	d171      	bne.n	800761a <initialize.lto_priv.148+0x856>
 8007536:	46cc      	mov	ip, r9
 8007538:	42b9      	cmp	r1, r7
 800753a:	d102      	bne.n	8007542 <initialize.lto_priv.148+0x77e>
 800753c:	1b10      	subs	r0, r2, r4
 800753e:	1e42      	subs	r2, r0, #1
 8007540:	4190      	sbcs	r0, r2
 8007542:	4662      	mov	r2, ip
 8007544:	4002      	ands	r2, r0
 8007546:	9210      	str	r2, [sp, #64]	; 0x40
 8007548:	2200      	movs	r2, #0
 800754a:	9212      	str	r2, [sp, #72]	; 0x48
 800754c:	2000      	movs	r0, #0
 800754e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007550:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007552:	1a52      	subs	r2, r2, r1
 8007554:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007556:	1a52      	subs	r2, r2, r1
 8007558:	b212      	sxth	r2, r2
 800755a:	9211      	str	r2, [sp, #68]	; 0x44
 800755c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800755e:	4282      	cmp	r2, r0
 8007560:	d008      	beq.n	8007574 <initialize.lto_priv.148+0x7b0>
 8007562:	464a      	mov	r2, r9
 8007564:	2a01      	cmp	r2, #1
 8007566:	d100      	bne.n	800756a <initialize.lto_priv.148+0x7a6>
 8007568:	b2a3      	uxth	r3, r4
 800756a:	1bd8      	subs	r0, r3, r7
 800756c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800756e:	f009 fe7b 	bl	8011268 <__divsi3>
 8007572:	b280      	uxth	r0, r0
 8007574:	465b      	mov	r3, fp
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	2205      	movs	r2, #5
 800757a:	0019      	movs	r1, r3
 800757c:	4699      	mov	r9, r3
 800757e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007580:	318c      	adds	r1, #140	; 0x8c
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	600b      	str	r3, [r1, #0]
 8007588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800758a:	464a      	mov	r2, r9
 800758c:	468c      	mov	ip, r1
 800758e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007590:	3290      	adds	r2, #144	; 0x90
 8007592:	3b32      	subs	r3, #50	; 0x32
 8007594:	b21b      	sxth	r3, r3
 8007596:	18ff      	adds	r7, r7, r3
 8007598:	4463      	add	r3, ip
 800759a:	6053      	str	r3, [r2, #4]
 800759c:	464b      	mov	r3, r9
 800759e:	6017      	str	r7, [r2, #0]
 80075a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075a2:	3398      	adds	r3, #152	; 0x98
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	464a      	mov	r2, r9
 80075a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075ac:	17db      	asrs	r3, r3, #31
 80075ae:	1a5b      	subs	r3, r3, r1
 80075b0:	329c      	adds	r2, #156	; 0x9c
 80075b2:	0fdb      	lsrs	r3, r3, #31
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	464b      	mov	r3, r9
 80075b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ba:	33a0      	adds	r3, #160	; 0xa0
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80075c0:	6058      	str	r0, [r3, #4]
 80075c2:	609a      	str	r2, [r3, #8]
 80075c4:	4663      	mov	r3, ip
 80075c6:	464f      	mov	r7, r9
 80075c8:	1ae0      	subs	r0, r4, r3
 80075ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075cc:	f009 fe4c 	bl	8011268 <__divsi3>
 80075d0:	2200      	movs	r2, #0
 80075d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075d4:	37ac      	adds	r7, #172	; 0xac
 80075d6:	6038      	str	r0, [r7, #0]
 80075d8:	4293      	cmp	r3, r2
 80075da:	dd01      	ble.n	80075e0 <initialize.lto_priv.148+0x81c>
 80075dc:	001a      	movs	r2, r3
 80075de:	3a01      	subs	r2, #1
 80075e0:	464b      	mov	r3, r9
 80075e2:	33b0      	adds	r3, #176	; 0xb0
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	0030      	movs	r0, r6
 80075e8:	f7f9 faee 	bl	8000bc8 <configuration_is_valid>
 80075ec:	002b      	movs	r3, r5
 80075ee:	3370      	adds	r3, #112	; 0x70
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d004      	beq.n	80075fe <initialize.lto_priv.148+0x83a>
 80075f4:	0032      	movs	r2, r6
 80075f6:	326a      	adds	r2, #106	; 0x6a
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d118      	bne.n	8007630 <initialize.lto_priv.148+0x86c>
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	232e      	movs	r3, #46	; 0x2e
 8007604:	66ab      	str	r3, [r5, #104]	; 0x68
 8007606:	0030      	movs	r0, r6
 8007608:	f7f9 fb74 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800760c:	2803      	cmp	r0, #3
 800760e:	d818      	bhi.n	8007642 <initialize.lto_priv.148+0x87e>
 8007610:	2300      	movs	r3, #0
 8007612:	f009 fd8b 	bl	801112c <__gnu_thumb1_case_uqi>
 8007616:	2212      	.short	0x2212
 8007618:	3828      	.short	0x3828
 800761a:	1bc9      	subs	r1, r1, r7
 800761c:	1e48      	subs	r0, r1, #1
 800761e:	4181      	sbcs	r1, r0
 8007620:	1b12      	subs	r2, r2, r4
 8007622:	b2c9      	uxtb	r1, r1
 8007624:	9110      	str	r1, [sp, #64]	; 0x40
 8007626:	1e51      	subs	r1, r2, #1
 8007628:	418a      	sbcs	r2, r1
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	9212      	str	r2, [sp, #72]	; 0x48
 800762e:	e78d      	b.n	800754c <initialize.lto_priv.148+0x788>
 8007630:	2201      	movs	r2, #1
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	232e      	movs	r3, #46	; 0x2e
 8007636:	66ab      	str	r3, [r5, #104]	; 0x68
 8007638:	e7e5      	b.n	8007606 <initialize.lto_priv.148+0x842>
 800763a:	626b      	str	r3, [r5, #36]	; 0x24
 800763c:	62ab      	str	r3, [r5, #40]	; 0x28
 800763e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007640:	632b      	str	r3, [r5, #48]	; 0x30
 8007642:	0030      	movs	r0, r6
 8007644:	f7f9 fb95 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8007648:	2804      	cmp	r0, #4
 800764a:	d829      	bhi.n	80076a0 <initialize.lto_priv.148+0x8dc>
 800764c:	2300      	movs	r3, #0
 800764e:	2201      	movs	r2, #1
 8007650:	f009 fd6c 	bl	801112c <__gnu_thumb1_case_uqi>
 8007654:	efeb2323 	.word	0xefeb2323
 8007658:	e7          	.byte	0xe7
 8007659:	00          	.byte	0x00
 800765a:	2201      	movs	r2, #1
 800765c:	626b      	str	r3, [r5, #36]	; 0x24
 800765e:	62aa      	str	r2, [r5, #40]	; 0x28
 8007660:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007662:	632b      	str	r3, [r5, #48]	; 0x30
 8007664:	e7ed      	b.n	8007642 <initialize.lto_priv.148+0x87e>
 8007666:	0030      	movs	r0, r6
 8007668:	f7f9 fb2e 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800766c:	aa1a      	add	r2, sp, #104	; 0x68
 800766e:	a91b      	add	r1, sp, #108	; 0x6c
 8007670:	f7ff fa08 	bl	8006a84 <acc_radar_engine_common_frequency_to_main_clk>
 8007674:	2301      	movs	r3, #1
 8007676:	626b      	str	r3, [r5, #36]	; 0x24
 8007678:	2300      	movs	r3, #0
 800767a:	62ab      	str	r3, [r5, #40]	; 0x28
 800767c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800767e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8007680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007682:	632b      	str	r3, [r5, #48]	; 0x30
 8007684:	e7dd      	b.n	8007642 <initialize.lto_priv.148+0x87e>
 8007686:	0030      	movs	r0, r6
 8007688:	f7f9 fb1e 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 800768c:	aa1a      	add	r2, sp, #104	; 0x68
 800768e:	a91b      	add	r1, sp, #108	; 0x6c
 8007690:	f7ff f9f8 	bl	8006a84 <acc_radar_engine_common_frequency_to_main_clk>
 8007694:	2301      	movs	r3, #1
 8007696:	626b      	str	r3, [r5, #36]	; 0x24
 8007698:	e7ef      	b.n	800767a <initialize.lto_priv.148+0x8b6>
 800769a:	636a      	str	r2, [r5, #52]	; 0x34
 800769c:	63aa      	str	r2, [r5, #56]	; 0x38
 800769e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80076a0:	0030      	movs	r0, r6
 80076a2:	f7f9 fa91 	bl	8000bc8 <configuration_is_valid>
 80076a6:	2300      	movs	r3, #0
 80076a8:	0007      	movs	r7, r0
 80076aa:	4298      	cmp	r0, r3
 80076ac:	d00b      	beq.n	80076c6 <initialize.lto_priv.148+0x902>
 80076ae:	0033      	movs	r3, r6
 80076b0:	3350      	adds	r3, #80	; 0x50
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80076b6:	0033      	movs	r3, r6
 80076b8:	3352      	adds	r3, #82	; 0x52
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	9319      	str	r3, [sp, #100]	; 0x64
 80076be:	0033      	movs	r3, r6
 80076c0:	334f      	adds	r3, #79	; 0x4f
 80076c2:	781f      	ldrb	r7, [r3, #0]
 80076c4:	003b      	movs	r3, r7
 80076c6:	002a      	movs	r2, r5
 80076c8:	3208      	adds	r2, #8
 80076ca:	67d3      	str	r3, [r2, #124]	; 0x7c
 80076cc:	2f00      	cmp	r7, #0
 80076ce:	d003      	beq.n	80076d8 <initialize.lto_priv.148+0x914>
 80076d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076d2:	3280      	adds	r2, #128	; 0x80
 80076d4:	3b01      	subs	r3, #1
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	0030      	movs	r0, r6
 80076da:	f7f9 fb41 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 80076de:	2401      	movs	r4, #1
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d000      	beq.n	80076e6 <initialize.lto_priv.148+0x922>
 80076e4:	e0a9      	b.n	800783a <initialize.lto_priv.148+0xa76>
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	d001      	beq.n	80076ee <initialize.lto_priv.148+0x92a>
 80076ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076ec:	930e      	str	r3, [sp, #56]	; 0x38
 80076ee:	0023      	movs	r3, r4
 80076f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076f2:	0030      	movs	r0, r6
 80076f4:	4393      	bics	r3, r2
 80076f6:	642b      	str	r3, [r5, #64]	; 0x40
 80076f8:	f7f9 fb29 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 80076fc:	4060      	eors	r0, r4
 80076fe:	b2c0      	uxtb	r0, r0
 8007700:	6468      	str	r0, [r5, #68]	; 0x44
 8007702:	64ac      	str	r4, [r5, #72]	; 0x48
 8007704:	0030      	movs	r0, r6
 8007706:	f7f9 fb17 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 800770a:	2801      	cmp	r0, #1
 800770c:	d800      	bhi.n	8007710 <initialize.lto_priv.148+0x94c>
 800770e:	e099      	b.n	8007844 <initialize.lto_priv.148+0xa80>
 8007710:	3802      	subs	r0, #2
 8007712:	64ec      	str	r4, [r5, #76]	; 0x4c
 8007714:	6528      	str	r0, [r5, #80]	; 0x50
 8007716:	0030      	movs	r0, r6
 8007718:	f7f9 fa56 	bl	8000bc8 <configuration_is_valid>
 800771c:	2300      	movs	r3, #0
 800771e:	4298      	cmp	r0, r3
 8007720:	d000      	beq.n	8007724 <initialize.lto_priv.148+0x960>
 8007722:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8007724:	656b      	str	r3, [r5, #84]	; 0x54
 8007726:	0030      	movs	r0, r6
 8007728:	f7f9 fac3 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800772c:	65a8      	str	r0, [r5, #88]	; 0x58
 800772e:	0030      	movs	r0, r6
 8007730:	f7f9 faaa 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 8007734:	65e8      	str	r0, [r5, #92]	; 0x5c
 8007736:	0030      	movs	r0, r6
 8007738:	f7f9 fa87 	bl	8000c4a <acc_base_configuration_sparse_sweeps_per_frame_get>
 800773c:	6628      	str	r0, [r5, #96]	; 0x60
 800773e:	0030      	movs	r0, r6
 8007740:	f7f9 fa78 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8007744:	67a8      	str	r0, [r5, #120]	; 0x78
 8007746:	0030      	movs	r0, r6
 8007748:	f7f9 fa58 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 800774c:	2601      	movs	r6, #1
 800774e:	465b      	mov	r3, fp
 8007750:	4070      	eors	r0, r6
 8007752:	b2c0      	uxtb	r0, r0
 8007754:	67e8      	str	r0, [r5, #124]	; 0x7c
 8007756:	889b      	ldrh	r3, [r3, #4]
 8007758:	666b      	str	r3, [r5, #100]	; 0x64
 800775a:	465b      	mov	r3, fp
 800775c:	895b      	ldrh	r3, [r3, #10]
 800775e:	3b01      	subs	r3, #1
 8007760:	66eb      	str	r3, [r5, #108]	; 0x6c
 8007762:	465b      	mov	r3, fp
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	33b6      	adds	r3, #182	; 0xb6
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	676b      	str	r3, [r5, #116]	; 0x74
 800776c:	f7ff f982 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 8007770:	1d2b      	adds	r3, r5, #4
 8007772:	67d8      	str	r0, [r3, #124]	; 0x7c
 8007774:	f7ff face 	bl	8006d14 <get_pll_freq>
 8007778:	1c07      	adds	r7, r0, #0
 800777a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777c:	f00a f918 	bl	80119b0 <__aeabi_ui2f>
 8007780:	1c04      	adds	r4, r0, #0
 8007782:	20fe      	movs	r0, #254	; 0xfe
 8007784:	1c39      	adds	r1, r7, #0
 8007786:	0580      	lsls	r0, r0, #22
 8007788:	f009 f8a0 	bl	80108cc <__aeabi_fdiv>
 800778c:	1c01      	adds	r1, r0, #0
 800778e:	1c20      	adds	r0, r4, #0
 8007790:	f009 f9ae 	bl	8010af0 <__aeabi_fmul>
 8007794:	4653      	mov	r3, sl
 8007796:	60d8      	str	r0, [r3, #12]
 8007798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800779c:	35b8      	adds	r5, #184	; 0xb8
 800779e:	4358      	muls	r0, r3
 80077a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80077a2:	469c      	mov	ip, r3
 80077a4:	4460      	add	r0, ip
 80077a6:	f00a f903 	bl	80119b0 <__aeabi_ui2f>
 80077aa:	1c01      	adds	r1, r0, #0
 80077ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 80077ae:	f009 f88d 	bl	80108cc <__aeabi_fdiv>
 80077b2:	4653      	mov	r3, sl
 80077b4:	6118      	str	r0, [r3, #16]
 80077b6:	9807      	ldr	r0, [sp, #28]
 80077b8:	f7ff fabe 	bl	8006d38 <points_to_meter.lto_priv.141>
 80077bc:	4653      	mov	r3, sl
 80077be:	6018      	str	r0, [r3, #0]
 80077c0:	4640      	mov	r0, r8
 80077c2:	f7ff fab9 	bl	8006d38 <points_to_meter.lto_priv.141>
 80077c6:	4653      	mov	r3, sl
 80077c8:	6819      	ldr	r1, [r3, #0]
 80077ca:	6098      	str	r0, [r3, #8]
 80077cc:	f009 fac2 	bl	8010d54 <__aeabi_fsub>
 80077d0:	4653      	mov	r3, sl
 80077d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077d4:	6058      	str	r0, [r3, #4]
 80077d6:	82da      	strh	r2, [r3, #22]
 80077d8:	2300      	movs	r3, #0
 80077da:	4652      	mov	r2, sl
 80077dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077de:	8293      	strh	r3, [r2, #20]
 80077e0:	8316      	strh	r6, [r2, #24]
 80077e2:	9a08      	ldr	r2, [sp, #32]
 80077e4:	2013      	movs	r0, #19
 80077e6:	8011      	strh	r1, [r2, #0]
 80077e8:	8151      	strh	r1, [r2, #10]
 80077ea:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077ec:	8053      	strh	r3, [r2, #2]
 80077ee:	8111      	strh	r1, [r2, #8]
 80077f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077f2:	8313      	strh	r3, [r2, #24]
 80077f4:	8091      	strh	r1, [r2, #4]
 80077f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80077f8:	80d6      	strh	r6, [r2, #6]
 80077fa:	8291      	strh	r1, [r2, #20]
 80077fc:	82d1      	strh	r1, [r2, #22]
 80077fe:	4659      	mov	r1, fp
 8007800:	8216      	strh	r6, [r2, #16]
 8007802:	aa1b      	add	r2, sp, #108	; 0x6c
 8007804:	8013      	strh	r3, [r2, #0]
 8007806:	6809      	ldr	r1, [r1, #0]
 8007808:	0033      	movs	r3, r6
 800780a:	f7f8 fc95 	bl	8000138 <acc_probes_execute_uint16>
 800780e:	882b      	ldrh	r3, [r5, #0]
 8007810:	9a08      	ldr	r2, [sp, #32]
 8007812:	3303      	adds	r3, #3
 8007814:	81d3      	strh	r3, [r2, #14]
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	8193      	strh	r3, [r2, #12]
 800781c:	0030      	movs	r0, r6
 800781e:	f7ff faea 	bl	8006df6 <initialize.lto_priv.148+0x32>
 8007822:	636a      	str	r2, [r5, #52]	; 0x34
 8007824:	63aa      	str	r2, [r5, #56]	; 0x38
 8007826:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007828:	e73a      	b.n	80076a0 <initialize.lto_priv.148+0x8dc>
 800782a:	636a      	str	r2, [r5, #52]	; 0x34
 800782c:	63ab      	str	r3, [r5, #56]	; 0x38
 800782e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007830:	e736      	b.n	80076a0 <initialize.lto_priv.148+0x8dc>
 8007832:	636b      	str	r3, [r5, #52]	; 0x34
 8007834:	63ab      	str	r3, [r5, #56]	; 0x38
 8007836:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007838:	e732      	b.n	80076a0 <initialize.lto_priv.148+0x8dc>
 800783a:	940e      	str	r4, [sp, #56]	; 0x38
 800783c:	e757      	b.n	80076ee <initialize.lto_priv.148+0x92a>
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	80000007 	.word	0x80000007
 8007844:	2300      	movs	r3, #0
 8007846:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007848:	652b      	str	r3, [r5, #80]	; 0x50
 800784a:	e764      	b.n	8007716 <initialize.lto_priv.148+0x952>

0800784c <calibrate.lto_priv.139>:
 800784c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800784e:	4657      	mov	r7, sl
 8007850:	4645      	mov	r5, r8
 8007852:	46de      	mov	lr, fp
 8007854:	464e      	mov	r6, r9
 8007856:	b5e0      	push	{r5, r6, r7, lr}
 8007858:	4cb4      	ldr	r4, [pc, #720]	; (8007b2c <calibrate.lto_priv.139+0x2e0>)
 800785a:	000f      	movs	r7, r1
 800785c:	44a5      	add	sp, r4
 800785e:	9337      	str	r3, [sp, #220]	; 0xdc
 8007860:	4bb3      	ldr	r3, [pc, #716]	; (8007b30 <calibrate.lto_priv.139+0x2e4>)
 8007862:	920f      	str	r2, [sp, #60]	; 0x3c
 8007864:	4698      	mov	r8, r3
 8007866:	3330      	adds	r3, #48	; 0x30
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	0004      	movs	r4, r0
 800786c:	2b03      	cmp	r3, #3
 800786e:	d905      	bls.n	800787c <calibrate.lto_priv.139+0x30>
 8007870:	4643      	mov	r3, r8
 8007872:	4ab0      	ldr	r2, [pc, #704]	; (8007b34 <calibrate.lto_priv.139+0x2e8>)
 8007874:	49b0      	ldr	r1, [pc, #704]	; (8007b38 <calibrate.lto_priv.139+0x2ec>)
 8007876:	2004      	movs	r0, #4
 8007878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800787a:	4798      	blx	r3
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	6965      	ldr	r5, [r4, #20]
 8007880:	9309      	str	r3, [sp, #36]	; 0x24
 8007882:	002b      	movs	r3, r5
 8007884:	2600      	movs	r6, #0
 8007886:	33bc      	adds	r3, #188	; 0xbc
 8007888:	ac48      	add	r4, sp, #288	; 0x120
 800788a:	601e      	str	r6, [r3, #0]
 800788c:	0020      	movs	r0, r4
 800788e:	f7ff f909 	bl	8006aa4 <calculate_pll_divisors.lto_priv.137>
 8007892:	42b0      	cmp	r0, r6
 8007894:	d10a      	bne.n	80078ac <calibrate.lto_priv.139+0x60>
 8007896:	2400      	movs	r4, #0
 8007898:	0020      	movs	r0, r4
 800789a:	239b      	movs	r3, #155	; 0x9b
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	449d      	add	sp, r3
 80078a0:	bc3c      	pop	{r2, r3, r4, r5}
 80078a2:	4690      	mov	r8, r2
 80078a4:	4699      	mov	r9, r3
 80078a6:	46a2      	mov	sl, r4
 80078a8:	46ab      	mov	fp, r5
 80078aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ae:	aa4e      	add	r2, sp, #312	; 0x138
 80078b0:	934e      	str	r3, [sp, #312]	; 0x138
 80078b2:	8863      	ldrh	r3, [r4, #2]
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	6053      	str	r3, [r2, #4]
 80078b8:	88a3      	ldrh	r3, [r4, #4]
 80078ba:	6838      	ldr	r0, [r7, #0]
 80078bc:	6093      	str	r3, [r2, #8]
 80078be:	88e3      	ldrh	r3, [r4, #6]
 80078c0:	60d3      	str	r3, [r2, #12]
 80078c2:	8923      	ldrh	r3, [r4, #8]
 80078c4:	8213      	strh	r3, [r2, #16]
 80078c6:	ab46      	add	r3, sp, #280	; 0x118
 80078c8:	4699      	mov	r9, r3
 80078ca:	f7fe fb05 	bl	8005ed8 <acc_cpd_cbank_and_vana_calibration>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d0e1      	beq.n	8007896 <calibrate.lto_priv.139+0x4a>
 80078d2:	002b      	movs	r3, r5
 80078d4:	33ce      	adds	r3, #206	; 0xce
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	35d0      	adds	r5, #208	; 0xd0
 80078da:	930c      	str	r3, [sp, #48]	; 0x30
 80078dc:	1e5a      	subs	r2, r3, #1
 80078de:	4193      	sbcs	r3, r2
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	9338      	str	r3, [sp, #224]	; 0xe0
 80078e4:	782b      	ldrb	r3, [r5, #0]
 80078e6:	4a95      	ldr	r2, [pc, #596]	; (8007b3c <calibrate.lto_priv.139+0x2f0>)
 80078e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d80e      	bhi.n	800790e <calibrate.lto_priv.139+0xc2>
 80078f0:	4643      	mov	r3, r8
 80078f2:	4a93      	ldr	r2, [pc, #588]	; (8007b40 <calibrate.lto_priv.139+0x2f4>)
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	4993      	ldr	r1, [pc, #588]	; (8007b44 <calibrate.lto_priv.139+0x2f8>)
 80078f8:	0030      	movs	r0, r6
 80078fa:	4798      	blx	r3
 80078fc:	4b92      	ldr	r3, [pc, #584]	; (8007b48 <calibrate.lto_priv.139+0x2fc>)
 80078fe:	9617      	str	r6, [sp, #92]	; 0x5c
 8007900:	9316      	str	r3, [sp, #88]	; 0x58
 8007902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0c6      	beq.n	8007896 <calibrate.lto_priv.139+0x4a>
 8007908:	2400      	movs	r4, #0
 800790a:	f001 f986 	bl	8008c1a <calibrate.lto_priv.139+0x13ce>
 800790e:	8862      	ldrh	r2, [r4, #2]
 8007910:	2101      	movs	r1, #1
 8007912:	9224      	str	r2, [sp, #144]	; 0x90
 8007914:	88a2      	ldrh	r2, [r4, #4]
 8007916:	9225      	str	r2, [sp, #148]	; 0x94
 8007918:	88e2      	ldrh	r2, [r4, #6]
 800791a:	9226      	str	r2, [sp, #152]	; 0x98
 800791c:	8922      	ldrh	r2, [r4, #8]
 800791e:	9227      	str	r2, [sp, #156]	; 0x9c
 8007920:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8007922:	9228      	str	r2, [sp, #160]	; 0xa0
 8007924:	464a      	mov	r2, r9
 8007926:	7912      	ldrb	r2, [r2, #4]
 8007928:	9229      	str	r2, [sp, #164]	; 0xa4
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	9210      	str	r2, [sp, #64]	; 0x40
 800792e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007930:	4a86      	ldr	r2, [pc, #536]	; (8007b4c <calibrate.lto_priv.139+0x300>)
 8007932:	4684      	mov	ip, r0
 8007934:	189a      	adds	r2, r3, r2
 8007936:	438a      	bics	r2, r1
 8007938:	4462      	add	r2, ip
 800793a:	922b      	str	r2, [sp, #172]	; 0xac
 800793c:	4a84      	ldr	r2, [pc, #528]	; (8007b50 <calibrate.lto_priv.139+0x304>)
 800793e:	4683      	mov	fp, r0
 8007940:	4694      	mov	ip, r2
 8007942:	4463      	add	r3, ip
 8007944:	9313      	str	r3, [sp, #76]	; 0x4c
 8007946:	438b      	bics	r3, r1
 8007948:	449b      	add	fp, r3
 800794a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800794c:	4b81      	ldr	r3, [pc, #516]	; (8007b54 <calibrate.lto_priv.139+0x308>)
 800794e:	429a      	cmp	r2, r3
 8007950:	d80a      	bhi.n	8007968 <calibrate.lto_priv.139+0x11c>
 8007952:	4b77      	ldr	r3, [pc, #476]	; (8007b30 <calibrate.lto_priv.139+0x2e4>)
 8007954:	001a      	movs	r2, r3
 8007956:	3230      	adds	r2, #48	; 0x30
 8007958:	7812      	ldrb	r2, [r2, #0]
 800795a:	428a      	cmp	r2, r1
 800795c:	d904      	bls.n	8007968 <calibrate.lto_priv.139+0x11c>
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	4a7d      	ldr	r2, [pc, #500]	; (8007b58 <calibrate.lto_priv.139+0x30c>)
 8007962:	4978      	ldr	r1, [pc, #480]	; (8007b44 <calibrate.lto_priv.139+0x2f8>)
 8007964:	2002      	movs	r0, #2
 8007966:	4798      	blx	r3
 8007968:	487c      	ldr	r0, [pc, #496]	; (8007b5c <calibrate.lto_priv.139+0x310>)
 800796a:	f008 f984 	bl	800fc76 <acc_diagnostic_log_set_scope>
 800796e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007970:	487b      	ldr	r0, [pc, #492]	; (8007b60 <calibrate.lto_priv.139+0x314>)
 8007972:	f008 f97c 	bl	800fc6e <acc_diagnostic_log_scalar>
 8007976:	2202      	movs	r2, #2
 8007978:	2101      	movs	r1, #1
 800797a:	487a      	ldr	r0, [pc, #488]	; (8007b64 <calibrate.lto_priv.139+0x318>)
 800797c:	f008 f97a 	bl	800fc74 <acc_diagnostic_log_declare_parameter>
 8007980:	221f      	movs	r2, #31
 8007982:	2100      	movs	r1, #0
 8007984:	4878      	ldr	r0, [pc, #480]	; (8007b68 <calibrate.lto_priv.139+0x31c>)
 8007986:	f008 f975 	bl	800fc74 <acc_diagnostic_log_declare_parameter>
 800798a:	227b      	movs	r2, #123	; 0x7b
 800798c:	2100      	movs	r1, #0
 800798e:	4877      	ldr	r0, [pc, #476]	; (8007b6c <calibrate.lto_priv.139+0x320>)
 8007990:	f008 f970 	bl	800fc74 <acc_diagnostic_log_declare_parameter>
 8007994:	220b      	movs	r2, #11
 8007996:	2100      	movs	r1, #0
 8007998:	4875      	ldr	r0, [pc, #468]	; (8007b70 <calibrate.lto_priv.139+0x324>)
 800799a:	f008 f96b 	bl	800fc74 <acc_diagnostic_log_declare_parameter>
 800799e:	2302      	movs	r3, #2
 80079a0:	9336      	str	r3, [sp, #216]	; 0xd8
 80079a2:	4b69      	ldr	r3, [pc, #420]	; (8007b48 <calibrate.lto_priv.139+0x2fc>)
 80079a4:	9316      	str	r3, [sp, #88]	; 0x58
 80079a6:	2300      	movs	r3, #0
 80079a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80079aa:	3302      	adds	r3, #2
 80079ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079b0:	486c      	ldr	r0, [pc, #432]	; (8007b64 <calibrate.lto_priv.139+0x318>)
 80079b2:	f008 f95e 	bl	800fc72 <acc_diagnostic_log_set_parameter>
 80079b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80079b8:	930a      	str	r3, [sp, #40]	; 0x28
 80079ba:	2300      	movs	r3, #0
 80079bc:	4699      	mov	r9, r3
 80079be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	930d      	str	r3, [sp, #52]	; 0x34
 80079c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079c6:	4b6b      	ldr	r3, [pc, #428]	; (8007b74 <calibrate.lto_priv.139+0x328>)
 80079c8:	4694      	mov	ip, r2
 80079ca:	4463      	add	r3, ip
 80079cc:	9312      	str	r3, [sp, #72]	; 0x48
 80079ce:	2400      	movs	r4, #0
 80079d0:	4649      	mov	r1, r9
 80079d2:	4867      	ldr	r0, [pc, #412]	; (8007b70 <calibrate.lto_priv.139+0x324>)
 80079d4:	f008 f94d 	bl	800fc72 <acc_diagnostic_log_set_parameter>
 80079d8:	ab8d      	add	r3, sp, #564	; 0x234
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80079de:	ab80      	add	r3, sp, #512	; 0x200
 80079e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80079e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079e4:	9480      	str	r4, [sp, #512]	; 0x200
 80079e6:	948d      	str	r4, [sp, #564]	; 0x234
 80079e8:	f008 fd42 	bl	8010470 <acc_sensor_protocol_r2_prepare_load.constprop.20>
 80079ec:	42a0      	cmp	r0, r4
 80079ee:	d105      	bne.n	80079fc <calibrate.lto_priv.139+0x1b0>
 80079f0:	4b4f      	ldr	r3, [pc, #316]	; (8007b30 <calibrate.lto_priv.139+0x2e4>)
 80079f2:	4a61      	ldr	r2, [pc, #388]	; (8007b78 <calibrate.lto_priv.139+0x32c>)
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	4961      	ldr	r1, [pc, #388]	; (8007b7c <calibrate.lto_priv.139+0x330>)
 80079f8:	4798      	blx	r3
 80079fa:	e782      	b.n	8007902 <calibrate.lto_priv.139+0xb6>
 80079fc:	4b60      	ldr	r3, [pc, #384]	; (8007b80 <calibrate.lto_priv.139+0x334>)
 80079fe:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 8007a00:	9d80      	ldr	r5, [sp, #512]	; 0x200
 8007a02:	1b1b      	subs	r3, r3, r4
 8007a04:	4692      	mov	sl, r2
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d900      	bls.n	8007a0c <calibrate.lto_priv.139+0x1c0>
 8007a0a:	469a      	mov	sl, r3
 8007a0c:	0863      	lsrs	r3, r4, #1
 8007a0e:	9311      	str	r3, [sp, #68]	; 0x44
 8007a10:	4653      	mov	r3, sl
 8007a12:	085a      	lsrs	r2, r3, #1
 8007a14:	0863      	lsrs	r3, r4, #1
 8007a16:	0098      	lsls	r0, r3, #2
 8007a18:	4b5a      	ldr	r3, [pc, #360]	; (8007b84 <calibrate.lto_priv.139+0x338>)
 8007a1a:	0029      	movs	r1, r5
 8007a1c:	18c0      	adds	r0, r0, r3
 8007a1e:	f008 f833 	bl	800fa88 <acc_confprogram_copy>
 8007a22:	4653      	mov	r3, sl
 8007a24:	b29f      	uxth	r7, r3
 8007a26:	4b58      	ldr	r3, [pc, #352]	; (8007b88 <calibrate.lto_priv.139+0x33c>)
 8007a28:	b2a6      	uxth	r6, r4
 8007a2a:	4698      	mov	r8, r3
 8007a2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a2e:	003a      	movs	r2, r7
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	231b      	movs	r3, #27
 8007a34:	0031      	movs	r1, r6
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	0028      	movs	r0, r5
 8007a3a:	4643      	mov	r3, r8
 8007a3c:	f008 f86c 	bl	800fb18 <acc_confprogram_patch_offset>
 8007a40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007a42:	003a      	movs	r2, r7
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	2319      	movs	r3, #25
 8007a48:	0031      	movs	r1, r6
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	0028      	movs	r0, r5
 8007a4e:	4643      	mov	r3, r8
 8007a50:	f008 f862 	bl	800fb18 <acc_confprogram_patch_offset>
 8007a54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a56:	003a      	movs	r2, r7
 8007a58:	9301      	str	r3, [sp, #4]
 8007a5a:	231a      	movs	r3, #26
 8007a5c:	0031      	movs	r1, r6
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	0028      	movs	r0, r5
 8007a62:	4643      	mov	r3, r8
 8007a64:	f008 f858 	bl	800fb18 <acc_confprogram_patch_offset>
 8007a68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007a6a:	003a      	movs	r2, r7
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	2317      	movs	r3, #23
 8007a70:	0031      	movs	r1, r6
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	0028      	movs	r0, r5
 8007a76:	4643      	mov	r3, r8
 8007a78:	f008 f84e 	bl	800fb18 <acc_confprogram_patch_offset>
 8007a7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007a7e:	003a      	movs	r2, r7
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	230d      	movs	r3, #13
 8007a84:	0031      	movs	r1, r6
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	0028      	movs	r0, r5
 8007a8a:	4643      	mov	r3, r8
 8007a8c:	f008 f844 	bl	800fb18 <acc_confprogram_patch_offset>
 8007a90:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8007a92:	003a      	movs	r2, r7
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	232a      	movs	r3, #42	; 0x2a
 8007a98:	0031      	movs	r1, r6
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	0028      	movs	r0, r5
 8007a9e:	4643      	mov	r3, r8
 8007aa0:	f008 f83a 	bl	800fb18 <acc_confprogram_patch_offset>
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	230f      	movs	r3, #15
 8007aaa:	003a      	movs	r2, r7
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	0031      	movs	r1, r6
 8007ab0:	4643      	mov	r3, r8
 8007ab2:	0028      	movs	r0, r5
 8007ab4:	f008 f830 	bl	800fb18 <acc_confprogram_patch_offset>
 8007ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aba:	003a      	movs	r2, r7
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	232c      	movs	r3, #44	; 0x2c
 8007ac0:	0031      	movs	r1, r6
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	0028      	movs	r0, r5
 8007ac6:	4643      	mov	r3, r8
 8007ac8:	f008 f826 	bl	800fb18 <acc_confprogram_patch_offset>
 8007acc:	2244      	movs	r2, #68	; 0x44
 8007ace:	466b      	mov	r3, sp
 8007ad0:	189b      	adds	r3, r3, r2
 8007ad2:	8819      	ldrh	r1, [r3, #0]
 8007ad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ad6:	4653      	mov	r3, sl
 8007ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ada:	f7fd fc0a 	bl	80052f2 <acc_sensor_r2_load_confmem>
 8007ade:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8007ae0:	469c      	mov	ip, r3
 8007ae2:	4b2a      	ldr	r3, [pc, #168]	; (8007b8c <calibrate.lto_priv.139+0x340>)
 8007ae4:	4464      	add	r4, ip
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d988      	bls.n	80079fc <calibrate.lto_priv.139+0x1b0>
 8007aea:	2118      	movs	r1, #24
 8007aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aee:	f7fc fad3 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d105      	bne.n	8007b02 <calibrate.lto_priv.139+0x2b6>
 8007af6:	4b0e      	ldr	r3, [pc, #56]	; (8007b30 <calibrate.lto_priv.139+0x2e4>)
 8007af8:	4a25      	ldr	r2, [pc, #148]	; (8007b90 <calibrate.lto_priv.139+0x344>)
 8007afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afc:	491f      	ldr	r1, [pc, #124]	; (8007b7c <calibrate.lto_priv.139+0x330>)
 8007afe:	4798      	blx	r3
 8007b00:	e6ff      	b.n	8007902 <calibrate.lto_priv.139+0xb6>
 8007b02:	21fa      	movs	r1, #250	; 0xfa
 8007b04:	2300      	movs	r3, #0
 8007b06:	2208      	movs	r2, #8
 8007b08:	00c9      	lsls	r1, r1, #3
 8007b0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b0c:	f7fa fbc2 	bl	8002294 <acc_sensor_protocol_r2_wait_for_specific_event>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d100      	bne.n	8007b16 <calibrate.lto_priv.139+0x2ca>
 8007b14:	e6f5      	b.n	8007902 <calibrate.lto_priv.139+0xb6>
 8007b16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b18:	2b37      	cmp	r3, #55	; 0x37
 8007b1a:	d83d      	bhi.n	8007b98 <calibrate.lto_priv.139+0x34c>
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <calibrate.lto_priv.139+0x2e4>)
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <calibrate.lto_priv.139+0x348>)
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	4916      	ldr	r1, [pc, #88]	; (8007b7c <calibrate.lto_priv.139+0x330>)
 8007b24:	2000      	movs	r0, #0
 8007b26:	4798      	blx	r3
 8007b28:	e6eb      	b.n	8007902 <calibrate.lto_priv.139+0xb6>
 8007b2a:	46c0      	nop			; (mov r8, r8)
 8007b2c:	fffffd94 	.word	0xfffffd94
 8007b30:	200005d8 	.word	0x200005d8
 8007b34:	0801dec6 	.word	0x0801dec6
 8007b38:	0801d9a6 	.word	0x0801d9a6
 8007b3c:	00000313 	.word	0x00000313
 8007b40:	0801d4fb 	.word	0x0801d4fb
 8007b44:	0801dee3 	.word	0x0801dee3
 8007b48:	ff800000 	.word	0xff800000
 8007b4c:	fffffda8 	.word	0xfffffda8
 8007b50:	fffffcec 	.word	0xfffffcec
 8007b54:	000001ff 	.word	0x000001ff
 8007b58:	0801def3 	.word	0x0801def3
 8007b5c:	0801df1e 	.word	0x0801df1e
 8007b60:	0801daed 	.word	0x0801daed
 8007b64:	0801df2d 	.word	0x0801df2d
 8007b68:	0801e377 	.word	0x0801e377
 8007b6c:	0801e1e7 	.word	0x0801e1e7
 8007b70:	0801dfaf 	.word	0x0801dfaf
 8007b74:	080167d0 	.word	0x080167d0
 8007b78:	0801df36 	.word	0x0801df36
 8007b7c:	0801df5b 	.word	0x0801df5b
 8007b80:	000006ac 	.word	0x000006ac
 8007b84:	08019090 	.word	0x08019090
 8007b88:	08017f60 	.word	0x08017f60
 8007b8c:	000006ab 	.word	0x000006ab
 8007b90:	0801df73 	.word	0x0801df73
 8007b94:	0801db89 	.word	0x0801db89
 8007b98:	2219      	movs	r2, #25
 8007b9a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b9e:	f005 f9bd 	bl	800cf1c <internal_buffer_processed_read.constprop.29>
 8007ba2:	0004      	movs	r4, r0
 8007ba4:	2319      	movs	r3, #25
 8007ba6:	0002      	movs	r2, r0
 8007ba8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007baa:	200a      	movs	r0, #10
 8007bac:	f7f8 fac4 	bl	8000138 <acc_probes_execute_uint16>
 8007bb0:	2232      	movs	r2, #50	; 0x32
 8007bb2:	0021      	movs	r1, r4
 8007bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bb6:	f00e fd61 	bl	801667c <memcpy>
 8007bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bbc:	f7fa fb4a 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 8007bc0:	9018      	str	r0, [sp, #96]	; 0x60
 8007bc2:	902d      	str	r0, [sp, #180]	; 0xb4
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d100      	bne.n	8007bca <calibrate.lto_priv.139+0x37e>
 8007bc8:	e69b      	b.n	8007902 <calibrate.lto_priv.139+0xb6>
 8007bca:	4cbf      	ldr	r4, [pc, #764]	; (8007ec8 <calibrate.lto_priv.139+0x67c>)
 8007bcc:	48bf      	ldr	r0, [pc, #764]	; (8007ecc <calibrate.lto_priv.139+0x680>)
 8007bce:	0021      	movs	r1, r4
 8007bd0:	f008 f84e 	bl	800fc70 <acc_diagnostic_log_array>
 8007bd4:	2119      	movs	r1, #25
 8007bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007bd8:	f008 f848 	bl	800fc6c <acc_diagnostic_log_data_u16>
 8007bdc:	464b      	mov	r3, r9
 8007bde:	005e      	lsls	r6, r3, #1
 8007be0:	4bbb      	ldr	r3, [pc, #748]	; (8007ed0 <calibrate.lto_priv.139+0x684>)
 8007be2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007be4:	336c      	adds	r3, #108	; 0x6c
 8007be6:	5ad0      	ldrh	r0, [r2, r3]
 8007be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bea:	ad53      	add	r5, sp, #332	; 0x14c
 8007bec:	8b1b      	ldrh	r3, [r3, #24]
 8007bee:	1ac0      	subs	r0, r0, r3
 8007bf0:	b200      	sxth	r0, r0
 8007bf2:	f009 fe93 	bl	801191c <__aeabi_i2f>
 8007bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf8:	1c07      	adds	r7, r0, #0
 8007bfa:	8818      	ldrh	r0, [r3, #0]
 8007bfc:	f009 fed8 	bl	80119b0 <__aeabi_ui2f>
 8007c00:	21de      	movs	r1, #222	; 0xde
 8007c02:	0589      	lsls	r1, r1, #22
 8007c04:	f008 ff74 	bl	8010af0 <__aeabi_fmul>
 8007c08:	21fc      	movs	r1, #252	; 0xfc
 8007c0a:	0589      	lsls	r1, r1, #22
 8007c0c:	f009 f8a2 	bl	8010d54 <__aeabi_fsub>
 8007c10:	49b0      	ldr	r1, [pc, #704]	; (8007ed4 <calibrate.lto_priv.139+0x688>)
 8007c12:	f008 ff6d 	bl	8010af0 <__aeabi_fmul>
 8007c16:	49b0      	ldr	r1, [pc, #704]	; (8007ed8 <calibrate.lto_priv.139+0x68c>)
 8007c18:	f008 ff6a 	bl	8010af0 <__aeabi_fmul>
 8007c1c:	1c01      	adds	r1, r0, #0
 8007c1e:	1c38      	adds	r0, r7, #0
 8007c20:	f009 f898 	bl	8010d54 <__aeabi_fsub>
 8007c24:	f009 fe5a 	bl	80118dc <__aeabi_f2iz>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	469c      	mov	ip, r3
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2e:	44e1      	add	r9, ip
 8007c30:	3332      	adds	r3, #50	; 0x32
 8007c32:	930a      	str	r3, [sp, #40]	; 0x28
 8007c34:	464b      	mov	r3, r9
 8007c36:	5370      	strh	r0, [r6, r5]
 8007c38:	2b0c      	cmp	r3, #12
 8007c3a:	d000      	beq.n	8007c3e <calibrate.lto_priv.139+0x3f2>
 8007c3c:	e6c7      	b.n	80079ce <calibrate.lto_priv.139+0x182>
 8007c3e:	0021      	movs	r1, r4
 8007c40:	48a6      	ldr	r0, [pc, #664]	; (8007edc <calibrate.lto_priv.139+0x690>)
 8007c42:	f008 f815 	bl	800fc70 <acc_diagnostic_log_array>
 8007c46:	4649      	mov	r1, r9
 8007c48:	0028      	movs	r0, r5
 8007c4a:	f008 f80f 	bl	800fc6c <acc_diagnostic_log_data_u16>
 8007c4e:	2214      	movs	r2, #20
 8007c50:	5eab      	ldrsh	r3, [r5, r2]
 8007c52:	2700      	movs	r7, #0
 8007c54:	930a      	str	r3, [sp, #40]	; 0x28
 8007c56:	2216      	movs	r2, #22
 8007c58:	5eab      	ldrsh	r3, [r5, r2]
 8007c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c5c:	9311      	str	r3, [sp, #68]	; 0x44
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	9314      	str	r3, [sp, #80]	; 0x50
 8007c62:	2200      	movs	r2, #0
 8007c64:	5eab      	ldrsh	r3, [r5, r2]
 8007c66:	2632      	movs	r6, #50	; 0x32
 8007c68:	4699      	mov	r9, r3
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	5eab      	ldrsh	r3, [r5, r2]
 8007c6e:	464a      	mov	r2, r9
 8007c70:	930d      	str	r3, [sp, #52]	; 0x34
 8007c72:	1a9b      	subs	r3, r3, r2
 8007c74:	9312      	str	r3, [sp, #72]	; 0x48
 8007c76:	4b9a      	ldr	r3, [pc, #616]	; (8007ee0 <calibrate.lto_priv.139+0x694>)
 8007c78:	469a      	mov	sl, r3
 8007c7a:	b2fb      	uxtb	r3, r7
 8007c7c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c7e:	007b      	lsls	r3, r7, #1
 8007c80:	5f5a      	ldrsh	r2, [r3, r5]
 8007c82:	4690      	mov	r8, r2
 8007c84:	2f00      	cmp	r7, #0
 8007c86:	d000      	beq.n	8007c8a <calibrate.lto_priv.139+0x43e>
 8007c88:	e0d8      	b.n	8007e3c <calibrate.lto_priv.139+0x5f0>
 8007c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c8c:	0034      	movs	r4, r6
 8007c8e:	4599      	cmp	r9, r3
 8007c90:	dd0b      	ble.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007c92:	45d1      	cmp	r9, sl
 8007c94:	dc09      	bgt.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007c96:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c98:	f009 fe40 	bl	801191c <__aeabi_i2f>
 8007c9c:	4991      	ldr	r1, [pc, #580]	; (8007ee4 <calibrate.lto_priv.139+0x698>)
 8007c9e:	f009 fc1f 	bl	80114e0 <__aeabi_fcmplt>
 8007ca2:	2400      	movs	r4, #0
 8007ca4:	42a0      	cmp	r0, r4
 8007ca6:	d100      	bne.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007ca8:	0034      	movs	r4, r6
 8007caa:	488f      	ldr	r0, [pc, #572]	; (8007ee8 <calibrate.lto_priv.139+0x69c>)
 8007cac:	4440      	add	r0, r8
 8007cae:	17c3      	asrs	r3, r0, #31
 8007cb0:	18c0      	adds	r0, r0, r3
 8007cb2:	4058      	eors	r0, r3
 8007cb4:	f009 fe32 	bl	801191c <__aeabi_i2f>
 8007cb8:	4987      	ldr	r1, [pc, #540]	; (8007ed8 <calibrate.lto_priv.139+0x68c>)
 8007cba:	f008 fe07 	bl	80108cc <__aeabi_fdiv>
 8007cbe:	498b      	ldr	r1, [pc, #556]	; (8007eec <calibrate.lto_priv.139+0x6a0>)
 8007cc0:	f008 ff16 	bl	8010af0 <__aeabi_fmul>
 8007cc4:	4680      	mov	r8, r0
 8007cc6:	0020      	movs	r0, r4
 8007cc8:	f009 fe28 	bl	801191c <__aeabi_i2f>
 8007ccc:	1c01      	adds	r1, r0, #0
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f008 fc62 	bl	8010598 <__aeabi_fadd>
 8007cd4:	f009 fc4c 	bl	8011570 <__aeabi_f2uiz>
 8007cd8:	22a2      	movs	r2, #162	; 0xa2
 8007cda:	ab3c      	add	r3, sp, #240	; 0xf0
 8007cdc:	0052      	lsls	r2, r2, #1
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	55d8      	strb	r0, [r3, r7]
 8007ce2:	a94b      	add	r1, sp, #300	; 0x12c
 8007ce4:	b2fb      	uxtb	r3, r7
 8007ce6:	547b      	strb	r3, [r7, r1]
 8007ce8:	3701      	adds	r7, #1
 8007cea:	2f0c      	cmp	r7, #12
 8007cec:	d1c5      	bne.n	8007c7a <calibrate.lto_priv.139+0x42e>
 8007cee:	3a3a      	subs	r2, #58	; 0x3a
 8007cf0:	3aff      	subs	r2, #255	; 0xff
 8007cf2:	ac8d      	add	r4, sp, #564	; 0x234
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	5c5e      	ldrb	r6, [r3, r1]
 8007cfa:	18cd      	adds	r5, r1, r3
 8007cfc:	786f      	ldrb	r7, [r5, #1]
 8007cfe:	46a9      	mov	r9, r5
 8007d00:	5da5      	ldrb	r5, [r4, r6]
 8007d02:	46a8      	mov	r8, r5
 8007d04:	5de5      	ldrb	r5, [r4, r7]
 8007d06:	45a8      	cmp	r8, r5
 8007d08:	d904      	bls.n	8007d14 <calibrate.lto_priv.139+0x4c8>
 8007d0a:	464d      	mov	r5, r9
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	545f      	strb	r7, [r3, r1]
 8007d10:	b2c0      	uxtb	r0, r0
 8007d12:	706e      	strb	r6, [r5, #1]
 8007d14:	3301      	adds	r3, #1
 8007d16:	b2dd      	uxtb	r5, r3
 8007d18:	4295      	cmp	r5, r2
 8007d1a:	d3ed      	bcc.n	8007cf8 <calibrate.lto_priv.139+0x4ac>
 8007d1c:	3a01      	subs	r2, #1
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	d001      	beq.n	8007d28 <calibrate.lto_priv.139+0x4dc>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d1e5      	bne.n	8007cf4 <calibrate.lto_priv.139+0x4a8>
 8007d28:	4967      	ldr	r1, [pc, #412]	; (8007ec8 <calibrate.lto_priv.139+0x67c>)
 8007d2a:	4871      	ldr	r0, [pc, #452]	; (8007ef0 <calibrate.lto_priv.139+0x6a4>)
 8007d2c:	f007 ffa0 	bl	800fc70 <acc_diagnostic_log_array>
 8007d30:	2300      	movs	r3, #0
 8007d32:	931a      	str	r3, [sp, #104]	; 0x68
 8007d34:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007d36:	ab4b      	add	r3, sp, #300	; 0x12c
 8007d38:	5cd3      	ldrb	r3, [r2, r3]
 8007d3a:	2601      	movs	r6, #1
 8007d3c:	9311      	str	r3, [sp, #68]	; 0x44
 8007d3e:	932c      	str	r3, [sp, #176]	; 0xb0
 8007d40:	2332      	movs	r3, #50	; 0x32
 8007d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d44:	2700      	movs	r7, #0
 8007d46:	4353      	muls	r3, r2
 8007d48:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8007d4a:	4694      	mov	ip, r2
 8007d4c:	4463      	add	r3, ip
 8007d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d50:	4698      	mov	r8, r3
 8007d52:	2300      	movs	r3, #0
 8007d54:	4699      	mov	r9, r3
 8007d56:	001d      	movs	r5, r3
 8007d58:	001c      	movs	r4, r3
 8007d5a:	b2b3      	uxth	r3, r6
 8007d5c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d5e:	4643      	mov	r3, r8
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	3401      	adds	r4, #1
 8007d64:	0018      	movs	r0, r3
 8007d66:	469a      	mov	sl, r3
 8007d68:	f009 fdd8 	bl	801191c <__aeabi_i2f>
 8007d6c:	1c01      	adds	r1, r0, #0
 8007d6e:	1c38      	adds	r0, r7, #0
 8007d70:	f008 fc12 	bl	8010598 <__aeabi_fadd>
 8007d74:	b2b3      	uxth	r3, r6
 8007d76:	469c      	mov	ip, r3
 8007d78:	4643      	mov	r3, r8
 8007d7a:	885b      	ldrh	r3, [r3, #2]
 8007d7c:	4465      	add	r5, ip
 8007d7e:	1c07      	adds	r7, r0, #0
 8007d80:	b2a4      	uxth	r4, r4
 8007d82:	b2ad      	uxth	r5, r5
 8007d84:	4652      	mov	r2, sl
 8007d86:	459a      	cmp	sl, r3
 8007d88:	d300      	bcc.n	8007d8c <calibrate.lto_priv.139+0x540>
 8007d8a:	e082      	b.n	8007e92 <calibrate.lto_priv.139+0x646>
 8007d8c:	1a9b      	subs	r3, r3, r2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	22fa      	movs	r2, #250	; 0xfa
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d801      	bhi.n	8007d9c <calibrate.lto_priv.139+0x550>
 8007d98:	2e18      	cmp	r6, #24
 8007d9a:	d136      	bne.n	8007e0a <calibrate.lto_priv.139+0x5be>
 8007d9c:	2c02      	cmp	r4, #2
 8007d9e:	d97b      	bls.n	8007e98 <calibrate.lto_priv.139+0x64c>
 8007da0:	0028      	movs	r0, r5
 8007da2:	f009 fe05 	bl	80119b0 <__aeabi_ui2f>
 8007da6:	1c05      	adds	r5, r0, #0
 8007da8:	0020      	movs	r0, r4
 8007daa:	f009 fe01 	bl	80119b0 <__aeabi_ui2f>
 8007dae:	1c01      	adds	r1, r0, #0
 8007db0:	1c28      	adds	r0, r5, #0
 8007db2:	f008 fd8b 	bl	80108cc <__aeabi_fdiv>
 8007db6:	21fe      	movs	r1, #254	; 0xfe
 8007db8:	0589      	lsls	r1, r1, #22
 8007dba:	f008 ffcb 	bl	8010d54 <__aeabi_fsub>
 8007dbe:	f009 fbd7 	bl	8011570 <__aeabi_f2uiz>
 8007dc2:	b283      	uxth	r3, r0
 8007dc4:	469a      	mov	sl, r3
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	b2b2      	uxth	r2, r6
 8007dca:	005d      	lsls	r5, r3, #1
 8007dcc:	ab73      	add	r3, sp, #460	; 0x1cc
 8007dce:	52ea      	strh	r2, [r5, r3]
 8007dd0:	ab8d      	add	r3, sp, #564	; 0x234
 8007dd2:	52ec      	strh	r4, [r5, r3]
 8007dd4:	0020      	movs	r0, r4
 8007dd6:	f009 fda1 	bl	801191c <__aeabi_i2f>
 8007dda:	1c01      	adds	r1, r0, #0
 8007ddc:	1c38      	adds	r0, r7, #0
 8007dde:	f008 fd75 	bl	80108cc <__aeabi_fdiv>
 8007de2:	f009 fbc5 	bl	8011570 <__aeabi_f2uiz>
 8007de6:	ab80      	add	r3, sp, #512	; 0x200
 8007de8:	52e8      	strh	r0, [r5, r3]
 8007dea:	ab9a      	add	r3, sp, #616	; 0x268
 8007dec:	469c      	mov	ip, r3
 8007dee:	4650      	mov	r0, sl
 8007df0:	2305      	movs	r3, #5
 8007df2:	4358      	muls	r0, r3
 8007df4:	4465      	add	r5, ip
 8007df6:	464b      	mov	r3, r9
 8007df8:	3d05      	subs	r5, #5
 8007dfa:	3dff      	subs	r5, #255	; 0xff
 8007dfc:	8028      	strh	r0, [r5, #0]
 8007dfe:	2500      	movs	r5, #0
 8007e00:	3301      	adds	r3, #1
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4699      	mov	r9, r3
 8007e06:	002c      	movs	r4, r5
 8007e08:	2700      	movs	r7, #0
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	469c      	mov	ip, r3
 8007e0e:	3601      	adds	r6, #1
 8007e10:	44e0      	add	r8, ip
 8007e12:	2e19      	cmp	r6, #25
 8007e14:	d1a1      	bne.n	8007d5a <calibrate.lto_priv.139+0x50e>
 8007e16:	4b37      	ldr	r3, [pc, #220]	; (8007ef4 <calibrate.lto_priv.139+0x6a8>)
 8007e18:	001a      	movs	r2, r3
 8007e1a:	3230      	adds	r2, #48	; 0x30
 8007e1c:	7812      	ldrb	r2, [r2, #0]
 8007e1e:	2a03      	cmp	r2, #3
 8007e20:	d905      	bls.n	8007e2e <calibrate.lto_priv.139+0x5e2>
 8007e22:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007e24:	4a34      	ldr	r2, [pc, #208]	; (8007ef8 <calibrate.lto_priv.139+0x6ac>)
 8007e26:	464b      	mov	r3, r9
 8007e28:	4934      	ldr	r1, [pc, #208]	; (8007efc <calibrate.lto_priv.139+0x6b0>)
 8007e2a:	2004      	movs	r0, #4
 8007e2c:	47a0      	blx	r4
 8007e2e:	4d31      	ldr	r5, [pc, #196]	; (8007ef4 <calibrate.lto_priv.139+0x6a8>)
 8007e30:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <calibrate.lto_priv.139+0x6b4>)
 8007e32:	002e      	movs	r6, r5
 8007e34:	2400      	movs	r4, #0
 8007e36:	3630      	adds	r6, #48	; 0x30
 8007e38:	4698      	mov	r8, r3
 8007e3a:	e07b      	b.n	8007f34 <calibrate.lto_priv.139+0x6e8>
 8007e3c:	b2fa      	uxtb	r2, r7
 8007e3e:	2a0b      	cmp	r2, #11
 8007e40:	d10c      	bne.n	8007e5c <calibrate.lto_priv.139+0x610>
 8007e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e46:	0034      	movs	r4, r6
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	dc00      	bgt.n	8007e4e <calibrate.lto_priv.139+0x602>
 8007e4c:	e72d      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e4e:	4553      	cmp	r3, sl
 8007e50:	dd00      	ble.n	8007e54 <calibrate.lto_priv.139+0x608>
 8007e52:	e72a      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e54:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007e56:	f009 fd61 	bl	801191c <__aeabi_i2f>
 8007e5a:	e71f      	b.n	8007c9c <calibrate.lto_priv.139+0x450>
 8007e5c:	18eb      	adds	r3, r5, r3
 8007e5e:	1e9a      	subs	r2, r3, #2
 8007e60:	2100      	movs	r1, #0
 8007e62:	5e52      	ldrsh	r2, [r2, r1]
 8007e64:	0034      	movs	r4, r6
 8007e66:	4542      	cmp	r2, r8
 8007e68:	dc00      	bgt.n	8007e6c <calibrate.lto_priv.139+0x620>
 8007e6a:	e71e      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	5e18      	ldrsh	r0, [r3, r0]
 8007e70:	4540      	cmp	r0, r8
 8007e72:	db00      	blt.n	8007e76 <calibrate.lto_priv.139+0x62a>
 8007e74:	e719      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e76:	4552      	cmp	r2, sl
 8007e78:	dd00      	ble.n	8007e7c <calibrate.lto_priv.139+0x630>
 8007e7a:	e716      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e7c:	45d0      	cmp	r8, sl
 8007e7e:	dd00      	ble.n	8007e82 <calibrate.lto_priv.139+0x636>
 8007e80:	e713      	b.n	8007caa <calibrate.lto_priv.139+0x45e>
 8007e82:	1a80      	subs	r0, r0, r2
 8007e84:	f009 fd4a 	bl	801191c <__aeabi_i2f>
 8007e88:	21fc      	movs	r1, #252	; 0xfc
 8007e8a:	0589      	lsls	r1, r1, #22
 8007e8c:	f008 fe30 	bl	8010af0 <__aeabi_fmul>
 8007e90:	e704      	b.n	8007c9c <calibrate.lto_priv.139+0x450>
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	e77b      	b.n	8007d90 <calibrate.lto_priv.139+0x544>
 8007e98:	4b16      	ldr	r3, [pc, #88]	; (8007ef4 <calibrate.lto_priv.139+0x6a8>)
 8007e9a:	001a      	movs	r2, r3
 8007e9c:	3230      	adds	r2, #48	; 0x30
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	2a03      	cmp	r2, #3
 8007ea2:	d90c      	bls.n	8007ebe <calibrate.lto_priv.139+0x672>
 8007ea4:	4652      	mov	r2, sl
 8007ea6:	9401      	str	r4, [sp, #4]
 8007ea8:	9200      	str	r2, [sp, #0]
 8007eaa:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007eac:	4a15      	ldr	r2, [pc, #84]	; (8007f04 <calibrate.lto_priv.139+0x6b8>)
 8007eae:	0033      	movs	r3, r6
 8007eb0:	4912      	ldr	r1, [pc, #72]	; (8007efc <calibrate.lto_priv.139+0x6b0>)
 8007eb2:	2004      	movs	r0, #4
 8007eb4:	47a0      	blx	r4
 8007eb6:	2400      	movs	r4, #0
 8007eb8:	2700      	movs	r7, #0
 8007eba:	0025      	movs	r5, r4
 8007ebc:	e7a5      	b.n	8007e0a <calibrate.lto_priv.139+0x5be>
 8007ebe:	2500      	movs	r5, #0
 8007ec0:	2700      	movs	r7, #0
 8007ec2:	002c      	movs	r4, r5
 8007ec4:	e7a1      	b.n	8007e0a <calibrate.lto_priv.139+0x5be>
 8007ec6:	46c0      	nop			; (mov r8, r8)
 8007ec8:	0801dfa5 	.word	0x0801dfa5
 8007ecc:	0801dfba 	.word	0x0801dfba
 8007ed0:	08016750 	.word	0x08016750
 8007ed4:	3f99999a 	.word	0x3f99999a
 8007ed8:	447a0000 	.word	0x447a0000
 8007edc:	0801dfca 	.word	0x0801dfca
 8007ee0:	00000513 	.word	0x00000513
 8007ee4:	c2c80000 	.word	0xc2c80000
 8007ee8:	fffffc18 	.word	0xfffffc18
 8007eec:	42c80000 	.word	0x42c80000
 8007ef0:	0801dfdb 	.word	0x0801dfdb
 8007ef4:	200005d8 	.word	0x200005d8
 8007ef8:	0801e05a 	.word	0x0801e05a
 8007efc:	0801e043 	.word	0x0801e043
 8007f00:	0801e06d 	.word	0x0801e06d
 8007f04:	0801dff2 	.word	0x0801dff2
 8007f08:	2f03      	cmp	r7, #3
 8007f0a:	d912      	bls.n	8007f32 <calibrate.lto_priv.139+0x6e6>
 8007f0c:	0063      	lsls	r3, r4, #1
 8007f0e:	aa80      	add	r2, sp, #512	; 0x200
 8007f10:	5a9a      	ldrh	r2, [r3, r2]
 8007f12:	49c4      	ldr	r1, [pc, #784]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 8007f14:	9203      	str	r2, [sp, #12]
 8007f16:	aa8d      	add	r2, sp, #564	; 0x234
 8007f18:	5a9a      	ldrh	r2, [r3, r2]
 8007f1a:	2004      	movs	r0, #4
 8007f1c:	9202      	str	r2, [sp, #8]
 8007f1e:	aa59      	add	r2, sp, #356	; 0x164
 8007f20:	5a9a      	ldrh	r2, [r3, r2]
 8007f22:	9201      	str	r2, [sp, #4]
 8007f24:	aa73      	add	r2, sp, #460	; 0x1cc
 8007f26:	5a9b      	ldrh	r3, [r3, r2]
 8007f28:	4642      	mov	r2, r8
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8007f2e:	0023      	movs	r3, r4
 8007f30:	47b8      	blx	r7
 8007f32:	3401      	adds	r4, #1
 8007f34:	b2a3      	uxth	r3, r4
 8007f36:	7837      	ldrb	r7, [r6, #0]
 8007f38:	4599      	cmp	r9, r3
 8007f3a:	d8e5      	bhi.n	8007f08 <calibrate.lto_priv.139+0x6bc>
 8007f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3e:	881e      	ldrh	r6, [r3, #0]
 8007f40:	4bb9      	ldr	r3, [pc, #740]	; (8008228 <calibrate.lto_priv.139+0x9dc>)
 8007f42:	429e      	cmp	r6, r3
 8007f44:	d825      	bhi.n	8007f92 <calibrate.lto_priv.139+0x746>
 8007f46:	2f03      	cmp	r7, #3
 8007f48:	d905      	bls.n	8007f56 <calibrate.lto_priv.139+0x70a>
 8007f4a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8007f4c:	0033      	movs	r3, r6
 8007f4e:	4ab7      	ldr	r2, [pc, #732]	; (800822c <calibrate.lto_priv.139+0x9e0>)
 8007f50:	49b4      	ldr	r1, [pc, #720]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 8007f52:	2004      	movs	r0, #4
 8007f54:	47a0      	blx	r4
 8007f56:	4bb6      	ldr	r3, [pc, #728]	; (8008230 <calibrate.lto_priv.139+0x9e4>)
 8007f58:	001a      	movs	r2, r3
 8007f5a:	3230      	adds	r2, #48	; 0x30
 8007f5c:	7812      	ldrb	r2, [r2, #0]
 8007f5e:	2a03      	cmp	r2, #3
 8007f60:	d907      	bls.n	8007f72 <calibrate.lto_priv.139+0x726>
 8007f62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007f64:	49b3      	ldr	r1, [pc, #716]	; (8008234 <calibrate.lto_priv.139+0x9e8>)
 8007f66:	9200      	str	r2, [sp, #0]
 8007f68:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8007f6a:	4ab3      	ldr	r2, [pc, #716]	; (8008238 <calibrate.lto_priv.139+0x9ec>)
 8007f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6e:	2004      	movs	r0, #4
 8007f70:	47a0      	blx	r4
 8007f72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007f74:	3301      	adds	r3, #1
 8007f76:	931a      	str	r3, [sp, #104]	; 0x68
 8007f78:	2b0c      	cmp	r3, #12
 8007f7a:	d000      	beq.n	8007f7e <calibrate.lto_priv.139+0x732>
 8007f7c:	e6da      	b.n	8007d34 <calibrate.lto_priv.139+0x4e8>
 8007f7e:	3b0b      	subs	r3, #11
 8007f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f82:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <calibrate.lto_priv.139+0x740>
 8007f88:	f000 fe3c 	bl	8008c04 <calibrate.lto_priv.139+0x13b8>
 8007f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8e:	9336      	str	r3, [sp, #216]	; 0xd8
 8007f90:	e50d      	b.n	80079ae <calibrate.lto_priv.139+0x162>
 8007f92:	4baa      	ldr	r3, [pc, #680]	; (800823c <calibrate.lto_priv.139+0x9f0>)
 8007f94:	18f0      	adds	r0, r6, r3
 8007f96:	f009 fd0b 	bl	80119b0 <__aeabi_ui2f>
 8007f9a:	49a9      	ldr	r1, [pc, #676]	; (8008240 <calibrate.lto_priv.139+0x9f4>)
 8007f9c:	f008 fda8 	bl	8010af0 <__aeabi_fmul>
 8007fa0:	21de      	movs	r1, #222	; 0xde
 8007fa2:	0589      	lsls	r1, r1, #22
 8007fa4:	f008 fda4 	bl	8010af0 <__aeabi_fmul>
 8007fa8:	1c01      	adds	r1, r0, #0
 8007faa:	48a5      	ldr	r0, [pc, #660]	; (8008240 <calibrate.lto_priv.139+0x9f4>)
 8007fac:	f008 fed2 	bl	8010d54 <__aeabi_fsub>
 8007fb0:	1c01      	adds	r1, r0, #0
 8007fb2:	48a4      	ldr	r0, [pc, #656]	; (8008244 <calibrate.lto_priv.139+0x9f8>)
 8007fb4:	f008 fece 	bl	8010d54 <__aeabi_fsub>
 8007fb8:	49a1      	ldr	r1, [pc, #644]	; (8008240 <calibrate.lto_priv.139+0x9f4>)
 8007fba:	f008 fc87 	bl	80108cc <__aeabi_fdiv>
 8007fbe:	218f      	movs	r1, #143	; 0x8f
 8007fc0:	05c9      	lsls	r1, r1, #23
 8007fc2:	f008 fd95 	bl	8010af0 <__aeabi_fmul>
 8007fc6:	218e      	movs	r1, #142	; 0x8e
 8007fc8:	05c9      	lsls	r1, r1, #23
 8007fca:	f008 fae5 	bl	8010598 <__aeabi_fadd>
 8007fce:	f009 facf 	bl	8011570 <__aeabi_f2uiz>
 8007fd2:	b284      	uxth	r4, r0
 8007fd4:	2f03      	cmp	r7, #3
 8007fd6:	d905      	bls.n	8007fe4 <calibrate.lto_priv.139+0x798>
 8007fd8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8007fda:	0023      	movs	r3, r4
 8007fdc:	4a9a      	ldr	r2, [pc, #616]	; (8008248 <calibrate.lto_priv.139+0x9fc>)
 8007fde:	4991      	ldr	r1, [pc, #580]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 8007fe0:	2004      	movs	r0, #4
 8007fe2:	47a8      	blx	r5
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9312      	str	r3, [sp, #72]	; 0x48
 8007fe8:	930d      	str	r3, [sp, #52]	; 0x34
 8007fea:	3330      	adds	r3, #48	; 0x30
 8007fec:	4698      	mov	r8, r3
 8007fee:	4f90      	ldr	r7, [pc, #576]	; (8008230 <calibrate.lto_priv.139+0x9e4>)
 8007ff0:	ab80      	add	r3, sp, #512	; 0x200
 8007ff2:	44b8      	add	r8, r7
 8007ff4:	469a      	mov	sl, r3
 8007ff6:	e010      	b.n	800801a <calibrate.lto_priv.139+0x7ce>
 8007ff8:	4650      	mov	r0, sl
 8007ffa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	5a1b      	ldrh	r3, [r3, r0]
 8008000:	4892      	ldr	r0, [pc, #584]	; (800824c <calibrate.lto_priv.139+0xa00>)
 8008002:	4283      	cmp	r3, r0
 8008004:	d84f      	bhi.n	80080a6 <calibrate.lto_priv.139+0x85a>
 8008006:	2903      	cmp	r1, #3
 8008008:	d904      	bls.n	8008014 <calibrate.lto_priv.139+0x7c8>
 800800a:	4a91      	ldr	r2, [pc, #580]	; (8008250 <calibrate.lto_priv.139+0xa04>)
 800800c:	4985      	ldr	r1, [pc, #532]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 800800e:	2004      	movs	r0, #4
 8008010:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008012:	47a8      	blx	r5
 8008014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008016:	3301      	adds	r3, #1
 8008018:	9312      	str	r3, [sp, #72]	; 0x48
 800801a:	2248      	movs	r2, #72	; 0x48
 800801c:	466b      	mov	r3, sp
 800801e:	189b      	adds	r3, r3, r2
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	4643      	mov	r3, r8
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	454a      	cmp	r2, r9
 8008028:	d3e6      	bcc.n	8007ff8 <calibrate.lto_priv.139+0x7ac>
 800802a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800802c:	2b01      	cmp	r3, #1
 800802e:	d933      	bls.n	8008098 <calibrate.lto_priv.139+0x84c>
 8008030:	1e9f      	subs	r7, r3, #2
 8008032:	b23f      	sxth	r7, r7
 8008034:	007b      	lsls	r3, r7, #1
 8008036:	9312      	str	r3, [sp, #72]	; 0x48
 8008038:	ad66      	add	r5, sp, #408	; 0x198
 800803a:	ae80      	add	r6, sp, #512	; 0x200
 800803c:	2300      	movs	r3, #0
 800803e:	0039      	movs	r1, r7
 8008040:	469c      	mov	ip, r3
 8008042:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008044:	2900      	cmp	r1, #0
 8008046:	da46      	bge.n	80080d6 <calibrate.lto_priv.139+0x88a>
 8008048:	4663      	mov	r3, ip
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f6      	bne.n	800803c <calibrate.lto_priv.139+0x7f0>
 800804e:	2201      	movs	r2, #1
 8008050:	0015      	movs	r5, r2
 8008052:	a866      	add	r0, sp, #408	; 0x198
 8008054:	8803      	ldrh	r3, [r0, #0]
 8008056:	a980      	add	r1, sp, #512	; 0x200
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	5a5c      	ldrh	r4, [r3, r1]
 800805c:	4e7d      	ldr	r6, [pc, #500]	; (8008254 <calibrate.lto_priv.139+0xa08>)
 800805e:	0053      	lsls	r3, r2, #1
 8008060:	5a1b      	ldrh	r3, [r3, r0]
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	5a5b      	ldrh	r3, [r3, r1]
 8008066:	429c      	cmp	r4, r3
 8008068:	d25c      	bcs.n	8008124 <calibrate.lto_priv.139+0x8d8>
 800806a:	1b1b      	subs	r3, r3, r4
 800806c:	b29b      	uxth	r3, r3
 800806e:	42b3      	cmp	r3, r6
 8008070:	d801      	bhi.n	8008076 <calibrate.lto_priv.139+0x82a>
 8008072:	3501      	adds	r5, #1
 8008074:	b2ad      	uxth	r5, r5
 8008076:	3201      	adds	r2, #1
 8008078:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800807a:	b293      	uxth	r3, r2
 800807c:	429f      	cmp	r7, r3
 800807e:	d8ee      	bhi.n	800805e <calibrate.lto_priv.139+0x812>
 8008080:	4e6b      	ldr	r6, [pc, #428]	; (8008230 <calibrate.lto_priv.139+0x9e4>)
 8008082:	0037      	movs	r7, r6
 8008084:	3730      	adds	r7, #48	; 0x30
 8008086:	9714      	str	r7, [sp, #80]	; 0x50
 8008088:	2200      	movs	r2, #0
 800808a:	1e6b      	subs	r3, r5, #1
 800808c:	0014      	movs	r4, r2
 800808e:	4698      	mov	r8, r3
 8008090:	4544      	cmp	r4, r8
 8008092:	d34a      	bcc.n	800812a <calibrate.lto_priv.139+0x8de>
 8008094:	2a00      	cmp	r2, #0
 8008096:	d1f7      	bne.n	8008088 <calibrate.lto_priv.139+0x83c>
 8008098:	4c65      	ldr	r4, [pc, #404]	; (8008230 <calibrate.lto_priv.139+0x9e4>)
 800809a:	ab66      	add	r3, sp, #408	; 0x198
 800809c:	0027      	movs	r7, r4
 800809e:	2500      	movs	r5, #0
 80080a0:	3730      	adds	r7, #48	; 0x30
 80080a2:	4698      	mov	r8, r3
 80080a4:	e07b      	b.n	800819e <calibrate.lto_priv.139+0x952>
 80080a6:	486c      	ldr	r0, [pc, #432]	; (8008258 <calibrate.lto_priv.139+0xa0c>)
 80080a8:	1830      	adds	r0, r6, r0
 80080aa:	4283      	cmp	r3, r0
 80080ac:	d907      	bls.n	80080be <calibrate.lto_priv.139+0x872>
 80080ae:	2903      	cmp	r1, #3
 80080b0:	d9b0      	bls.n	8008014 <calibrate.lto_priv.139+0x7c8>
 80080b2:	4a6a      	ldr	r2, [pc, #424]	; (800825c <calibrate.lto_priv.139+0xa10>)
 80080b4:	495b      	ldr	r1, [pc, #364]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 80080b6:	2004      	movs	r0, #4
 80080b8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80080ba:	47a8      	blx	r5
 80080bc:	e7aa      	b.n	8008014 <calibrate.lto_priv.139+0x7c8>
 80080be:	a99a      	add	r1, sp, #616	; 0x268
 80080c0:	468c      	mov	ip, r1
 80080c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080c4:	005b      	lsls	r3, r3, #1
 80080c6:	4463      	add	r3, ip
 80080c8:	3bd0      	subs	r3, #208	; 0xd0
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080ce:	3301      	adds	r3, #1
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	930d      	str	r3, [sp, #52]	; 0x34
 80080d4:	e79e      	b.n	8008014 <calibrate.lto_priv.139+0x7c8>
 80080d6:	5b43      	ldrh	r3, [r0, r5]
 80080d8:	4699      	mov	r9, r3
 80080da:	182b      	adds	r3, r5, r0
 80080dc:	4698      	mov	r8, r3
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	469a      	mov	sl, r3
 80080e2:	464b      	mov	r3, r9
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	5b9a      	ldrh	r2, [r3, r6]
 80080e8:	4294      	cmp	r4, r2
 80080ea:	d215      	bcs.n	8008118 <calibrate.lto_priv.139+0x8cc>
 80080ec:	1b12      	subs	r2, r2, r4
 80080ee:	b292      	uxth	r2, r2
 80080f0:	4653      	mov	r3, sl
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	5af3      	ldrh	r3, [r6, r3]
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d211      	bcs.n	800811e <calibrate.lto_priv.139+0x8d2>
 80080fa:	1b1b      	subs	r3, r3, r4
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	429a      	cmp	r2, r3
 8008100:	d906      	bls.n	8008110 <calibrate.lto_priv.139+0x8c4>
 8008102:	4653      	mov	r3, sl
 8008104:	464a      	mov	r2, r9
 8008106:	5343      	strh	r3, [r0, r5]
 8008108:	4643      	mov	r3, r8
 800810a:	805a      	strh	r2, [r3, #2]
 800810c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800810e:	469c      	mov	ip, r3
 8008110:	3901      	subs	r1, #1
 8008112:	b209      	sxth	r1, r1
 8008114:	3802      	subs	r0, #2
 8008116:	e795      	b.n	8008044 <calibrate.lto_priv.139+0x7f8>
 8008118:	1aa2      	subs	r2, r4, r2
 800811a:	b292      	uxth	r2, r2
 800811c:	e7e8      	b.n	80080f0 <calibrate.lto_priv.139+0x8a4>
 800811e:	1ae3      	subs	r3, r4, r3
 8008120:	b29b      	uxth	r3, r3
 8008122:	e7ec      	b.n	80080fe <calibrate.lto_priv.139+0x8b2>
 8008124:	1ae3      	subs	r3, r4, r3
 8008126:	b29b      	uxth	r3, r3
 8008128:	e7a1      	b.n	800806e <calibrate.lto_priv.139+0x822>
 800812a:	a966      	add	r1, sp, #408	; 0x198
 800812c:	468c      	mov	ip, r1
 800812e:	a866      	add	r0, sp, #408	; 0x198
 8008130:	4681      	mov	r9, r0
 8008132:	0063      	lsls	r3, r4, #1
 8008134:	449c      	add	ip, r3
 8008136:	3302      	adds	r3, #2
 8008138:	444b      	add	r3, r9
 800813a:	4661      	mov	r1, ip
 800813c:	8818      	ldrh	r0, [r3, #0]
 800813e:	8809      	ldrh	r1, [r1, #0]
 8008140:	4681      	mov	r9, r0
 8008142:	004f      	lsls	r7, r1, #1
 8008144:	46ba      	mov	sl, r7
 8008146:	464f      	mov	r7, r9
 8008148:	007f      	lsls	r7, r7, #1
 800814a:	9712      	str	r7, [sp, #72]	; 0x48
 800814c:	4657      	mov	r7, sl
 800814e:	a88d      	add	r0, sp, #564	; 0x234
 8008150:	5a3f      	ldrh	r7, [r7, r0]
 8008152:	46ba      	mov	sl, r7
 8008154:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008156:	5a38      	ldrh	r0, [r7, r0]
 8008158:	4582      	cmp	sl, r0
 800815a:	d20e      	bcs.n	800817a <calibrate.lto_priv.139+0x92e>
 800815c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800815e:	464f      	mov	r7, r9
 8008160:	7810      	ldrb	r0, [r2, #0]
 8008162:	4662      	mov	r2, ip
 8008164:	8017      	strh	r7, [r2, #0]
 8008166:	8019      	strh	r1, [r3, #0]
 8008168:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800816a:	2803      	cmp	r0, #3
 800816c:	d905      	bls.n	800817a <calibrate.lto_priv.139+0x92e>
 800816e:	4a3c      	ldr	r2, [pc, #240]	; (8008260 <calibrate.lto_priv.139+0xa14>)
 8008170:	492c      	ldr	r1, [pc, #176]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 8008172:	2004      	movs	r0, #4
 8008174:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008176:	4798      	blx	r3
 8008178:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800817a:	3401      	adds	r4, #1
 800817c:	b2a4      	uxth	r4, r4
 800817e:	e787      	b.n	8008090 <calibrate.lto_priv.139+0x844>
 8008180:	2e03      	cmp	r6, #3
 8008182:	d90b      	bls.n	800819c <calibrate.lto_priv.139+0x950>
 8008184:	4642      	mov	r2, r8
 8008186:	006b      	lsls	r3, r5, #1
 8008188:	5a9b      	ldrh	r3, [r3, r2]
 800818a:	aa80      	add	r2, sp, #512	; 0x200
 800818c:	0059      	lsls	r1, r3, #1
 800818e:	5a8a      	ldrh	r2, [r1, r2]
 8008190:	2004      	movs	r0, #4
 8008192:	9200      	str	r2, [sp, #0]
 8008194:	4923      	ldr	r1, [pc, #140]	; (8008224 <calibrate.lto_priv.139+0x9d8>)
 8008196:	4a33      	ldr	r2, [pc, #204]	; (8008264 <calibrate.lto_priv.139+0xa18>)
 8008198:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800819a:	47b0      	blx	r6
 800819c:	3501      	adds	r5, #1
 800819e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081a0:	b2ab      	uxth	r3, r5
 80081a2:	783e      	ldrb	r6, [r7, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d8eb      	bhi.n	8008180 <calibrate.lto_priv.139+0x934>
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	d100      	bne.n	80081ae <calibrate.lto_priv.139+0x962>
 80081ac:	e6d3      	b.n	8007f56 <calibrate.lto_priv.139+0x70a>
 80081ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081b0:	4a2d      	ldr	r2, [pc, #180]	; (8008268 <calibrate.lto_priv.139+0xa1c>)
 80081b2:	0059      	lsls	r1, r3, #1
 80081b4:	4b2d      	ldr	r3, [pc, #180]	; (800826c <calibrate.lto_priv.139+0xa20>)
 80081b6:	326c      	adds	r2, #108	; 0x6c
 80081b8:	185b      	adds	r3, r3, r1
 80081ba:	5a88      	ldrh	r0, [r1, r2]
 80081bc:	8b1b      	ldrh	r3, [r3, #24]
 80081be:	1ac0      	subs	r0, r0, r3
 80081c0:	b200      	sxth	r0, r0
 80081c2:	f009 fbab 	bl	801191c <__aeabi_i2f>
 80081c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c8:	1c05      	adds	r5, r0, #0
 80081ca:	8818      	ldrh	r0, [r3, #0]
 80081cc:	f009 fbf0 	bl	80119b0 <__aeabi_ui2f>
 80081d0:	21de      	movs	r1, #222	; 0xde
 80081d2:	0589      	lsls	r1, r1, #22
 80081d4:	f008 fc8c 	bl	8010af0 <__aeabi_fmul>
 80081d8:	21fc      	movs	r1, #252	; 0xfc
 80081da:	0589      	lsls	r1, r1, #22
 80081dc:	f008 fdba 	bl	8010d54 <__aeabi_fsub>
 80081e0:	4917      	ldr	r1, [pc, #92]	; (8008240 <calibrate.lto_priv.139+0x9f4>)
 80081e2:	f008 fc85 	bl	8010af0 <__aeabi_fmul>
 80081e6:	4922      	ldr	r1, [pc, #136]	; (8008270 <calibrate.lto_priv.139+0xa24>)
 80081e8:	f008 fc82 	bl	8010af0 <__aeabi_fmul>
 80081ec:	1c01      	adds	r1, r0, #0
 80081ee:	1c28      	adds	r0, r5, #0
 80081f0:	f008 fdb0 	bl	8010d54 <__aeabi_fsub>
 80081f4:	f009 fb72 	bl	80118dc <__aeabi_f2iz>
 80081f8:	aa3c      	add	r2, sp, #240	; 0xf0
 80081fa:	4694      	mov	ip, r2
 80081fc:	2322      	movs	r3, #34	; 0x22
 80081fe:	22e6      	movs	r2, #230	; 0xe6
 8008200:	b205      	sxth	r5, r0
 8008202:	4463      	add	r3, ip
 8008204:	801d      	strh	r5, [r3, #0]
 8008206:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <calibrate.lto_priv.139+0xa28>)
 8008208:	0052      	lsls	r2, r2, #1
 800820a:	18eb      	adds	r3, r5, r3
 800820c:	b29b      	uxth	r3, r3
 800820e:	4293      	cmp	r3, r2
 8008210:	d934      	bls.n	800827c <calibrate.lto_priv.139+0xa30>
 8008212:	2e03      	cmp	r6, #3
 8008214:	d800      	bhi.n	8008218 <calibrate.lto_priv.139+0x9cc>
 8008216:	e69e      	b.n	8007f56 <calibrate.lto_priv.139+0x70a>
 8008218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800821a:	4a17      	ldr	r2, [pc, #92]	; (8008278 <calibrate.lto_priv.139+0xa2c>)
 800821c:	4905      	ldr	r1, [pc, #20]	; (8008234 <calibrate.lto_priv.139+0x9e8>)
 800821e:	2004      	movs	r0, #4
 8008220:	4798      	blx	r3
 8008222:	e698      	b.n	8007f56 <calibrate.lto_priv.139+0x70a>
 8008224:	0801e043 	.word	0x0801e043
 8008228:	000087cf 	.word	0x000087cf
 800822c:	0801e0af 	.word	0x0801e0af
 8008230:	200005d8 	.word	0x200005d8
 8008234:	0801dee3 	.word	0x0801dee3
 8008238:	0801e556 	.word	0x0801e556
 800823c:	ffff8000 	.word	0xffff8000
 8008240:	3f99999a 	.word	0x3f99999a
 8008244:	3f866666 	.word	0x3f866666
 8008248:	0801e0d4 	.word	0x0801e0d4
 800824c:	00001387 	.word	0x00001387
 8008250:	0801e0e4 	.word	0x0801e0e4
 8008254:	000007cf 	.word	0x000007cf
 8008258:	fffff830 	.word	0xfffff830
 800825c:	0801e112 	.word	0x0801e112
 8008260:	0801e140 	.word	0x0801e140
 8008264:	0801e171 	.word	0x0801e171
 8008268:	08016750 	.word	0x08016750
 800826c:	080167d0 	.word	0x080167d0
 8008270:	447a0000 	.word	0x447a0000
 8008274:	fffffcf4 	.word	0xfffffcf4
 8008278:	0801e193 	.word	0x0801e193
 800827c:	ab66      	add	r3, sp, #408	; 0x198
 800827e:	881f      	ldrh	r7, [r3, #0]
 8008280:	ab59      	add	r3, sp, #356	; 0x164
 8008282:	007a      	lsls	r2, r7, #1
 8008284:	5ad3      	ldrh	r3, [r2, r3]
 8008286:	2105      	movs	r1, #5
 8008288:	0018      	movs	r0, r3
 800828a:	9312      	str	r3, [sp, #72]	; 0x48
 800828c:	f008 ff62 	bl	8011154 <__udivsi3>
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	b2c0      	uxtb	r0, r0
 8008294:	0040      	lsls	r0, r0, #1
 8008296:	5ac0      	ldrh	r0, [r0, r3]
 8008298:	f009 fb8a 	bl	80119b0 <__aeabi_ui2f>
 800829c:	21de      	movs	r1, #222	; 0xde
 800829e:	0589      	lsls	r1, r1, #22
 80082a0:	f008 fc26 	bl	8010af0 <__aeabi_fmul>
 80082a4:	21fc      	movs	r1, #252	; 0xfc
 80082a6:	0589      	lsls	r1, r1, #22
 80082a8:	f008 fd54 	bl	8010d54 <__aeabi_fsub>
 80082ac:	49cd      	ldr	r1, [pc, #820]	; (80085e4 <calibrate.lto_priv.139+0xd98>)
 80082ae:	f008 fc1f 	bl	8010af0 <__aeabi_fmul>
 80082b2:	49cd      	ldr	r1, [pc, #820]	; (80085e8 <calibrate.lto_priv.139+0xd9c>)
 80082b4:	f008 fc1c 	bl	8010af0 <__aeabi_fmul>
 80082b8:	4680      	mov	r8, r0
 80082ba:	0028      	movs	r0, r5
 80082bc:	f009 fb2e 	bl	801191c <__aeabi_i2f>
 80082c0:	1c01      	adds	r1, r0, #0
 80082c2:	4640      	mov	r0, r8
 80082c4:	f008 f968 	bl	8010598 <__aeabi_fadd>
 80082c8:	f009 fb08 	bl	80118dc <__aeabi_f2iz>
 80082cc:	ab45      	add	r3, sp, #276	; 0x114
 80082ce:	8018      	strh	r0, [r3, #0]
 80082d0:	2e03      	cmp	r6, #3
 80082d2:	d907      	bls.n	80082e4 <calibrate.lto_priv.139+0xa98>
 80082d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082d6:	4ac5      	ldr	r2, [pc, #788]	; (80085ec <calibrate.lto_priv.139+0xda0>)
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80082dc:	003b      	movs	r3, r7
 80082de:	49c4      	ldr	r1, [pc, #784]	; (80085f0 <calibrate.lto_priv.139+0xda4>)
 80082e0:	2004      	movs	r0, #4
 80082e2:	47a0      	blx	r4
 80082e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082e6:	48c3      	ldr	r0, [pc, #780]	; (80085f4 <calibrate.lto_priv.139+0xda8>)
 80082e8:	f007 fcc3 	bl	800fc72 <acc_diagnostic_log_set_parameter>
 80082ec:	4dc2      	ldr	r5, [pc, #776]	; (80085f8 <calibrate.lto_priv.139+0xdac>)
 80082ee:	48c3      	ldr	r0, [pc, #780]	; (80085fc <calibrate.lto_priv.139+0xdb0>)
 80082f0:	0029      	movs	r1, r5
 80082f2:	ac45      	add	r4, sp, #276	; 0x114
 80082f4:	f007 fcbc 	bl	800fc70 <acc_diagnostic_log_array>
 80082f8:	0020      	movs	r0, r4
 80082fa:	f004 fe70 	bl	800cfde <acc_diagnostic_log_data_i16.constprop.19>
 80082fe:	0029      	movs	r1, r5
 8008300:	48bf      	ldr	r0, [pc, #764]	; (8008600 <calibrate.lto_priv.139+0xdb4>)
 8008302:	f007 fcb5 	bl	800fc70 <acc_diagnostic_log_array>
 8008306:	ab3c      	add	r3, sp, #240	; 0xf0
 8008308:	469c      	mov	ip, r3
 800830a:	2022      	movs	r0, #34	; 0x22
 800830c:	4460      	add	r0, ip
 800830e:	f004 fe66 	bl	800cfde <acc_diagnostic_log_data_i16.constprop.19>
 8008312:	4abc      	ldr	r2, [pc, #752]	; (8008604 <calibrate.lto_priv.139+0xdb8>)
 8008314:	8823      	ldrh	r3, [r4, #0]
 8008316:	4694      	mov	ip, r2
 8008318:	2200      	movs	r2, #0
 800831a:	4463      	add	r3, ip
 800831c:	b29b      	uxth	r3, r3
 800831e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008320:	2bc8      	cmp	r3, #200	; 0xc8
 8008322:	d900      	bls.n	8008326 <calibrate.lto_priv.139+0xada>
 8008324:	e0a9      	b.n	800847a <calibrate.lto_priv.139+0xc2e>
 8008326:	2301      	movs	r3, #1
 8008328:	469a      	mov	sl, r3
 800832a:	4bb7      	ldr	r3, [pc, #732]	; (8008608 <calibrate.lto_priv.139+0xdbc>)
 800832c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800832e:	3320      	adds	r3, #32
 8008330:	5cd3      	ldrb	r3, [r2, r3]
 8008332:	48b6      	ldr	r0, [pc, #728]	; (800860c <calibrate.lto_priv.139+0xdc0>)
 8008334:	0019      	movs	r1, r3
 8008336:	9320      	str	r3, [sp, #128]	; 0x80
 8008338:	f007 fc9b 	bl	800fc72 <acc_diagnostic_log_set_parameter>
 800833c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800833e:	2280      	movs	r2, #128	; 0x80
 8008340:	932e      	str	r3, [sp, #184]	; 0xb8
 8008342:	466b      	mov	r3, sp
 8008344:	189b      	adds	r3, r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	009c      	lsls	r4, r3, #2
 800834a:	0020      	movs	r0, r4
 800834c:	303e      	adds	r0, #62	; 0x3e
 800834e:	9322      	str	r3, [sp, #136]	; 0x88
 8008350:	287b      	cmp	r0, #123	; 0x7b
 8008352:	d800      	bhi.n	8008356 <calibrate.lto_priv.139+0xb0a>
 8008354:	e09e      	b.n	8008494 <calibrate.lto_priv.139+0xc48>
 8008356:	217c      	movs	r1, #124	; 0x7c
 8008358:	f008 ff82 	bl	8011260 <__aeabi_uidivmod>
 800835c:	2200      	movs	r2, #0
 800835e:	4653      	mov	r3, sl
 8008360:	0015      	movs	r5, r2
 8008362:	0020      	movs	r0, r4
 8008364:	b28c      	uxth	r4, r1
 8008366:	2100      	movs	r1, #0
 8008368:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800836a:	428e      	cmp	r6, r1
 800836c:	d000      	beq.n	8008370 <calibrate.lto_priv.139+0xb24>
 800836e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8008370:	465e      	mov	r6, fp
 8008372:	62b4      	str	r4, [r6, #40]	; 0x28
 8008374:	4654      	mov	r4, sl
 8008376:	62f0      	str	r0, [r6, #44]	; 0x2c
 8008378:	6333      	str	r3, [r6, #48]	; 0x30
 800837a:	6433      	str	r3, [r6, #64]	; 0x40
 800837c:	64f4      	str	r4, [r6, #76]	; 0x4c
 800837e:	2300      	movs	r3, #0
 8008380:	65b4      	str	r4, [r6, #88]	; 0x58
 8008382:	2003      	movs	r0, #3
 8008384:	465c      	mov	r4, fp
 8008386:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8008388:	6370      	str	r0, [r6, #52]	; 0x34
 800838a:	6037      	str	r7, [r6, #0]
 800838c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800838e:	63b5      	str	r5, [r6, #56]	; 0x38
 8008390:	6077      	str	r7, [r6, #4]
 8008392:	9f26      	ldr	r7, [sp, #152]	; 0x98
 8008394:	63f2      	str	r2, [r6, #60]	; 0x3c
 8008396:	60b7      	str	r7, [r6, #8]
 8008398:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800839a:	001a      	movs	r2, r3
 800839c:	81b7      	strh	r7, [r6, #12]
 800839e:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 80083a0:	6473      	str	r3, [r6, #68]	; 0x44
 80083a2:	6137      	str	r7, [r6, #16]
 80083a4:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 80083a6:	64b3      	str	r3, [r6, #72]	; 0x48
 80083a8:	6177      	str	r7, [r6, #20]
 80083aa:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80083ac:	6533      	str	r3, [r6, #80]	; 0x50
 80083ae:	61b7      	str	r7, [r6, #24]
 80083b0:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80083b2:	6573      	str	r3, [r6, #84]	; 0x54
 80083b4:	61f7      	str	r7, [r6, #28]
 80083b6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80083b8:	3604      	adds	r6, #4
 80083ba:	61f7      	str	r7, [r6, #28]
 80083bc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80083be:	4653      	mov	r3, sl
 80083c0:	438b      	bics	r3, r1
 80083c2:	65f2      	str	r2, [r6, #92]	; 0x5c
 80083c4:	4651      	mov	r1, sl
 80083c6:	66b3      	str	r3, [r6, #104]	; 0x68
 80083c8:	465b      	mov	r3, fp
 80083ca:	6632      	str	r2, [r6, #96]	; 0x60
 80083cc:	6672      	str	r2, [r6, #100]	; 0x64
 80083ce:	66f1      	str	r1, [r6, #108]	; 0x6c
 80083d0:	6731      	str	r1, [r6, #112]	; 0x70
 80083d2:	679a      	str	r2, [r3, #120]	; 0x78
 80083d4:	2316      	movs	r3, #22
 80083d6:	67b3      	str	r3, [r6, #120]	; 0x78
 80083d8:	230f      	movs	r3, #15
 80083da:	67f3      	str	r3, [r6, #124]	; 0x7c
 80083dc:	465b      	mov	r3, fp
 80083de:	0011      	movs	r1, r2
 80083e0:	3308      	adds	r3, #8
 80083e2:	67d9      	str	r1, [r3, #124]	; 0x7c
 80083e4:	465d      	mov	r5, fp
 80083e6:	465b      	mov	r3, fp
 80083e8:	2207      	movs	r2, #7
 80083ea:	3388      	adds	r3, #136	; 0x88
 80083ec:	358c      	adds	r5, #140	; 0x8c
 80083ee:	7029      	strb	r1, [r5, #0]
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	3a01      	subs	r2, #1
 80083f4:	609a      	str	r2, [r3, #8]
 80083f6:	3494      	adds	r4, #148	; 0x94
 80083f8:	3a08      	subs	r2, #8
 80083fa:	6020      	str	r0, [r4, #0]
 80083fc:	465f      	mov	r7, fp
 80083fe:	611a      	str	r2, [r3, #16]
 8008400:	6159      	str	r1, [r3, #20]
 8008402:	6199      	str	r1, [r3, #24]
 8008404:	3305      	adds	r3, #5
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	4653      	mov	r3, sl
 800840a:	37a4      	adds	r7, #164	; 0xa4
 800840c:	603b      	str	r3, [r7, #0]
 800840e:	465b      	mov	r3, fp
 8008410:	4652      	mov	r2, sl
 8008412:	33a8      	adds	r3, #168	; 0xa8
 8008414:	6019      	str	r1, [r3, #0]
 8008416:	715a      	strb	r2, [r3, #5]
 8008418:	f7fe fb2c 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 800841c:	465b      	mov	r3, fp
 800841e:	2100      	movs	r1, #0
 8008420:	33b0      	adds	r3, #176	; 0xb0
 8008422:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8008424:	6018      	str	r0, [r3, #0]
 8008426:	3b04      	subs	r3, #4
 8008428:	609a      	str	r2, [r3, #8]
 800842a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800842c:	7019      	strb	r1, [r3, #0]
 800842e:	3a01      	subs	r2, #1
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	aa3c      	add	r2, sp, #240	; 0xf0
 8008434:	4694      	mov	ip, r2
 8008436:	2322      	movs	r3, #34	; 0x22
 8008438:	4463      	add	r3, ip
 800843a:	2200      	movs	r2, #0
 800843c:	5e9b      	ldrsh	r3, [r3, r2]
 800843e:	a98d      	add	r1, sp, #564	; 0x234
 8008440:	933a      	str	r3, [sp, #232]	; 0xe8
 8008442:	ab45      	add	r3, sp, #276	; 0x114
 8008444:	2200      	movs	r2, #0
 8008446:	5e9b      	ldrsh	r3, [r3, r2]
 8008448:	4658      	mov	r0, fp
 800844a:	933b      	str	r3, [sp, #236]	; 0xec
 800844c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 800844e:	6824      	ldr	r4, [r4, #0]
 8008450:	4699      	mov	r9, r3
 8008452:	782b      	ldrb	r3, [r5, #0]
 8008454:	683f      	ldr	r7, [r7, #0]
 8008456:	930a      	str	r3, [sp, #40]	; 0x28
 8008458:	f008 f888 	bl	801056c <acc_cpd_linear_sweep_get_info>
 800845c:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 800845e:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8008460:	429a      	cmp	r2, r3
 8008462:	d11b      	bne.n	800849c <calibrate.lto_priv.139+0xc50>
 8008464:	4b6a      	ldr	r3, [pc, #424]	; (8008610 <calibrate.lto_priv.139+0xdc4>)
 8008466:	4a6b      	ldr	r2, [pc, #428]	; (8008614 <calibrate.lto_priv.139+0xdc8>)
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	4961      	ldr	r1, [pc, #388]	; (80085f0 <calibrate.lto_priv.139+0xda4>)
 800846c:	2000      	movs	r0, #0
 800846e:	4798      	blx	r3
 8008470:	2300      	movs	r3, #0
 8008472:	9322      	str	r3, [sp, #136]	; 0x88
 8008474:	932e      	str	r3, [sp, #184]	; 0xb8
 8008476:	931c      	str	r3, [sp, #112]	; 0x70
 8008478:	e085      	b.n	8008586 <calibrate.lto_priv.139+0xd3a>
 800847a:	4b65      	ldr	r3, [pc, #404]	; (8008610 <calibrate.lto_priv.139+0xdc4>)
 800847c:	001a      	movs	r2, r3
 800847e:	3230      	adds	r2, #48	; 0x30
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	2a03      	cmp	r2, #3
 8008484:	d800      	bhi.n	8008488 <calibrate.lto_priv.139+0xc3c>
 8008486:	e566      	b.n	8007f56 <calibrate.lto_priv.139+0x70a>
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	4a63      	ldr	r2, [pc, #396]	; (8008618 <calibrate.lto_priv.139+0xdcc>)
 800848c:	4958      	ldr	r1, [pc, #352]	; (80085f0 <calibrate.lto_priv.139+0xda4>)
 800848e:	2004      	movs	r0, #4
 8008490:	4798      	blx	r3
 8008492:	e560      	b.n	8007f56 <calibrate.lto_priv.139+0x70a>
 8008494:	2203      	movs	r2, #3
 8008496:	4655      	mov	r5, sl
 8008498:	2300      	movs	r3, #0
 800849a:	e764      	b.n	8008366 <calibrate.lto_priv.139+0xb1a>
 800849c:	465b      	mov	r3, fp
 800849e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80084a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084a4:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 80084a6:	f7fc ff5f 	bl	8005368 <acc_cpd_linear_sweep_load_program>
 80084aa:	901f      	str	r0, [sp, #124]	; 0x7c
 80084ac:	901c      	str	r0, [sp, #112]	; 0x70
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d0de      	beq.n	8008470 <calibrate.lto_priv.139+0xc24>
 80084b2:	2600      	movs	r6, #0
 80084b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b6:	42b3      	cmp	r3, r6
 80084b8:	d000      	beq.n	80084bc <calibrate.lto_priv.139+0xc70>
 80084ba:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80084bc:	0038      	movs	r0, r7
 80084be:	f009 fa77 	bl	80119b0 <__aeabi_ui2f>
 80084c2:	1c01      	adds	r1, r0, #0
 80084c4:	4855      	ldr	r0, [pc, #340]	; (800861c <calibrate.lto_priv.139+0xdd0>)
 80084c6:	f008 fa01 	bl	80108cc <__aeabi_fdiv>
 80084ca:	f009 f851 	bl	8011570 <__aeabi_f2uiz>
 80084ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d0:	3401      	adds	r4, #1
 80084d2:	469c      	mov	ip, r3
 80084d4:	b280      	uxth	r0, r0
 80084d6:	b2a4      	uxth	r4, r4
 80084d8:	4344      	muls	r4, r0
 80084da:	4465      	add	r5, ip
 80084dc:	002b      	movs	r3, r5
 80084de:	46a4      	mov	ip, r4
 80084e0:	4463      	add	r3, ip
 80084e2:	9331      	str	r3, [sp, #196]	; 0xc4
 80084e4:	4653      	mov	r3, sl
 80084e6:	4033      	ands	r3, r6
 80084e8:	22c4      	movs	r2, #196	; 0xc4
 80084ea:	9314      	str	r3, [sp, #80]	; 0x50
 80084ec:	466b      	mov	r3, sp
 80084ee:	189b      	adds	r3, r3, r2
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	2105      	movs	r1, #5
 80084f4:	3303      	adds	r3, #3
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	9340      	str	r3, [sp, #256]	; 0x100
 80084fa:	0020      	movs	r0, r4
 80084fc:	0063      	lsls	r3, r4, #1
 80084fe:	9321      	str	r3, [sp, #132]	; 0x84
 8008500:	941b      	str	r4, [sp, #108]	; 0x6c
 8008502:	f008 fe27 	bl	8011154 <__udivsi3>
 8008506:	2700      	movs	r7, #0
 8008508:	2305      	movs	r3, #5
 800850a:	0002      	movs	r2, r0
 800850c:	003e      	movs	r6, r7
 800850e:	003d      	movs	r5, r7
 8008510:	435a      	muls	r2, r3
 8008512:	0843      	lsrs	r3, r0, #1
 8008514:	9333      	str	r3, [sp, #204]	; 0xcc
 8008516:	3308      	adds	r3, #8
 8008518:	9334      	str	r3, [sp, #208]	; 0xd0
 800851a:	0053      	lsls	r3, r2, #1
 800851c:	9342      	str	r3, [sp, #264]	; 0x108
 800851e:	0043      	lsls	r3, r0, #1
 8008520:	9343      	str	r3, [sp, #268]	; 0x10c
 8008522:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008524:	9015      	str	r0, [sp, #84]	; 0x54
 8008526:	921d      	str	r2, [sp, #116]	; 0x74
 8008528:	9332      	str	r3, [sp, #200]	; 0xc8
 800852a:	2e00      	cmp	r6, #0
 800852c:	d03c      	beq.n	80085a8 <calibrate.lto_priv.139+0xd5c>
 800852e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008530:	f7fb fda4 	bl	800407c <acc_sensor_protocol_r2_is_sensor_running>
 8008534:	2800      	cmp	r0, #0
 8008536:	d02d      	beq.n	8008594 <calibrate.lto_priv.139+0xd48>
 8008538:	4b35      	ldr	r3, [pc, #212]	; (8008610 <calibrate.lto_priv.139+0xdc4>)
 800853a:	4a39      	ldr	r2, [pc, #228]	; (8008620 <calibrate.lto_priv.139+0xdd4>)
 800853c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800853e:	492c      	ldr	r1, [pc, #176]	; (80085f0 <calibrate.lto_priv.139+0xda4>)
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	2000      	movs	r0, #0
 8008544:	47a0      	blx	r4
 8008546:	2f00      	cmp	r7, #0
 8008548:	d092      	beq.n	8008470 <calibrate.lto_priv.139+0xc24>
 800854a:	2700      	movs	r7, #0
 800854c:	aa3c      	add	r2, sp, #240	; 0xf0
 800854e:	4694      	mov	ip, r2
 8008550:	2322      	movs	r3, #34	; 0x22
 8008552:	4463      	add	r3, ip
 8008554:	2200      	movs	r2, #0
 8008556:	5e9b      	ldrsh	r3, [r3, r2]
 8008558:	9330      	str	r3, [sp, #192]	; 0xc0
 800855a:	ab45      	add	r3, sp, #276	; 0x114
 800855c:	2200      	movs	r2, #0
 800855e:	5e9b      	ldrsh	r3, [r3, r2]
 8008560:	932f      	str	r3, [sp, #188]	; 0xbc
 8008562:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <calibrate.lto_priv.139+0xdc4>)
 8008564:	001a      	movs	r2, r3
 8008566:	3230      	adds	r2, #48	; 0x30
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	2a03      	cmp	r2, #3
 800856c:	d800      	bhi.n	8008570 <calibrate.lto_priv.139+0xd24>
 800856e:	e30a      	b.n	8008b86 <calibrate.lto_priv.139+0x133a>
 8008570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008572:	491f      	ldr	r1, [pc, #124]	; (80085f0 <calibrate.lto_priv.139+0xda4>)
 8008574:	9200      	str	r2, [sp, #0]
 8008576:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008578:	4a2a      	ldr	r2, [pc, #168]	; (8008624 <calibrate.lto_priv.139+0xdd8>)
 800857a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800857c:	2004      	movs	r0, #4
 800857e:	47a0      	blx	r4
 8008580:	2f00      	cmp	r7, #0
 8008582:	d000      	beq.n	8008586 <calibrate.lto_priv.139+0xd3a>
 8008584:	e302      	b.n	8008b8c <calibrate.lto_priv.139+0x1340>
 8008586:	2300      	movs	r3, #0
 8008588:	2200      	movs	r2, #0
 800858a:	930b      	str	r3, [sp, #44]	; 0x2c
 800858c:	932c      	str	r3, [sp, #176]	; 0xb0
 800858e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008590:	921c      	str	r2, [sp, #112]	; 0x70
 8008592:	e31a      	b.n	8008bca <calibrate.lto_priv.139+0x137e>
 8008594:	2d00      	cmp	r5, #0
 8008596:	d110      	bne.n	80085ba <calibrate.lto_priv.139+0xd6e>
 8008598:	4653      	mov	r3, sl
 800859a:	4a23      	ldr	r2, [pc, #140]	; (8008628 <calibrate.lto_priv.139+0xddc>)
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	4923      	ldr	r1, [pc, #140]	; (800862c <calibrate.lto_priv.139+0xde0>)
 80085a0:	2372      	movs	r3, #114	; 0x72
 80085a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a4:	f004 fd1c 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 80085a8:	4921      	ldr	r1, [pc, #132]	; (8008630 <calibrate.lto_priv.139+0xde4>)
 80085aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ac:	f7fb fd74 	bl	8004098 <acc_sensor_protocol_r2_run_program>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d0c8      	beq.n	8008546 <calibrate.lto_priv.139+0xcfa>
 80085b4:	2300      	movs	r3, #0
 80085b6:	931e      	str	r3, [sp, #120]	; 0x78
 80085b8:	e175      	b.n	80088a6 <calibrate.lto_priv.139+0x105a>
 80085ba:	464b      	mov	r3, r9
 80085bc:	4d1a      	ldr	r5, [pc, #104]	; (8008628 <calibrate.lto_priv.139+0xddc>)
 80085be:	4c1b      	ldr	r4, [pc, #108]	; (800862c <calibrate.lto_priv.139+0xde0>)
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	002a      	movs	r2, r5
 80085c4:	2344      	movs	r3, #68	; 0x44
 80085c6:	0021      	movs	r1, r4
 80085c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085ca:	f004 fd09 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 80085ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d0:	002a      	movs	r2, r5
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	0021      	movs	r1, r4
 80085d6:	2342      	movs	r3, #66	; 0x42
 80085d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085da:	f004 fd01 	bl	800cfe0 <acc_confprogram_live_patch.constprop.15>
 80085de:	2e00      	cmp	r6, #0
 80085e0:	d0e2      	beq.n	80085a8 <calibrate.lto_priv.139+0xd5c>
 80085e2:	e7d9      	b.n	8008598 <calibrate.lto_priv.139+0xd4c>
 80085e4:	3f99999a 	.word	0x3f99999a
 80085e8:	447a0000 	.word	0x447a0000
 80085ec:	0801e1b9 	.word	0x0801e1b9
 80085f0:	0801dee3 	.word	0x0801dee3
 80085f4:	0801e1e7 	.word	0x0801e1e7
 80085f8:	0801e1d1 	.word	0x0801e1d1
 80085fc:	0801e1f3 	.word	0x0801e1f3
 8008600:	0801e1fa 	.word	0x0801e1fa
 8008604:	fffffbe6 	.word	0xfffffbe6
 8008608:	080167d0 	.word	0x080167d0
 800860c:	0801e377 	.word	0x0801e377
 8008610:	200005d8 	.word	0x200005d8
 8008614:	0801e227 	.word	0x0801e227
 8008618:	0801e202 	.word	0x0801e202
 800861c:	42f80000 	.word	0x42f80000
 8008620:	0801db18 	.word	0x0801db18
 8008624:	0801e4c8 	.word	0x0801e4c8
 8008628:	08018c58 	.word	0x08018c58
 800862c:	0801b7a0 	.word	0x0801b7a0
 8008630:	0000023a 	.word	0x0000023a
 8008634:	2b03      	cmp	r3, #3
 8008636:	d904      	bls.n	8008642 <calibrate.lto_priv.139+0xdf6>
 8008638:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800863a:	49d1      	ldr	r1, [pc, #836]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 800863c:	4ad1      	ldr	r2, [pc, #836]	; (8008984 <calibrate.lto_priv.139+0x1138>)
 800863e:	2004      	movs	r0, #4
 8008640:	4798      	blx	r3
 8008642:	4ad1      	ldr	r2, [pc, #836]	; (8008988 <calibrate.lto_priv.139+0x113c>)
 8008644:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008646:	0020      	movs	r0, r4
 8008648:	f007 fb34 	bl	800fcb4 <acc_alg_basic_saturation_check_u16>
 800864c:	2800      	cmp	r0, #0
 800864e:	d012      	beq.n	8008676 <calibrate.lto_priv.139+0xe2a>
 8008650:	4ace      	ldr	r2, [pc, #824]	; (800898c <calibrate.lto_priv.139+0x1140>)
 8008652:	4649      	mov	r1, r9
 8008654:	0013      	movs	r3, r2
 8008656:	3330      	adds	r3, #48	; 0x30
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	290f      	cmp	r1, #15
 800865c:	d000      	beq.n	8008660 <calibrate.lto_priv.139+0xe14>
 800865e:	e0f8      	b.n	8008852 <calibrate.lto_priv.139+0x1006>
 8008660:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008662:	2900      	cmp	r1, #0
 8008664:	d100      	bne.n	8008668 <calibrate.lto_priv.139+0xe1c>
 8008666:	e0e7      	b.n	8008838 <calibrate.lto_priv.139+0xfec>
 8008668:	2b03      	cmp	r3, #3
 800866a:	d904      	bls.n	8008676 <calibrate.lto_priv.139+0xe2a>
 800866c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800866e:	49c4      	ldr	r1, [pc, #784]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 8008670:	4ac7      	ldr	r2, [pc, #796]	; (8008990 <calibrate.lto_priv.139+0x1144>)
 8008672:	2004      	movs	r0, #4
 8008674:	4798      	blx	r3
 8008676:	4642      	mov	r2, r8
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	49c6      	ldr	r1, [pc, #792]	; (8008994 <calibrate.lto_priv.139+0x1148>)
 800867c:	9341      	str	r3, [sp, #260]	; 0x104
 800867e:	9b90      	ldr	r3, [sp, #576]	; 0x240
 8008680:	316c      	adds	r1, #108	; 0x6c
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	5a9b      	ldrh	r3, [r3, r2]
 8008686:	ad73      	add	r5, sp, #460	; 0x1cc
 8008688:	9335      	str	r3, [sp, #212]	; 0xd4
 800868a:	9b91      	ldr	r3, [sp, #580]	; 0x244
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	5a9b      	ldrh	r3, [r3, r2]
 8008690:	4ac1      	ldr	r2, [pc, #772]	; (8008998 <calibrate.lto_priv.139+0x114c>)
 8008692:	933f      	str	r3, [sp, #252]	; 0xfc
 8008694:	465b      	mov	r3, fp
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	18d2      	adds	r2, r2, r3
 800869c:	8b12      	ldrh	r2, [r2, #24]
 800869e:	5a5b      	ldrh	r3, [r3, r1]
 80086a0:	1a9b      	subs	r3, r3, r2
 80086a2:	b21b      	sxth	r3, r3
 80086a4:	0018      	movs	r0, r3
 80086a6:	930e      	str	r3, [sp, #56]	; 0x38
 80086a8:	f009 f938 	bl	801191c <__aeabi_i2f>
 80086ac:	4642      	mov	r2, r8
 80086ae:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 80086b0:	1c06      	adds	r6, r0, #0
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	5a98      	ldrh	r0, [r3, r2]
 80086b6:	f009 f97b 	bl	80119b0 <__aeabi_ui2f>
 80086ba:	21de      	movs	r1, #222	; 0xde
 80086bc:	0589      	lsls	r1, r1, #22
 80086be:	f008 fa17 	bl	8010af0 <__aeabi_fmul>
 80086c2:	21fc      	movs	r1, #252	; 0xfc
 80086c4:	0589      	lsls	r1, r1, #22
 80086c6:	f008 fb45 	bl	8010d54 <__aeabi_fsub>
 80086ca:	49b4      	ldr	r1, [pc, #720]	; (800899c <calibrate.lto_priv.139+0x1150>)
 80086cc:	f008 fa10 	bl	8010af0 <__aeabi_fmul>
 80086d0:	49b3      	ldr	r1, [pc, #716]	; (80089a0 <calibrate.lto_priv.139+0x1154>)
 80086d2:	f008 fa0d 	bl	8010af0 <__aeabi_fmul>
 80086d6:	1c01      	adds	r1, r0, #0
 80086d8:	1c30      	adds	r0, r6, #0
 80086da:	f008 fb3b 	bl	8010d54 <__aeabi_fsub>
 80086de:	f009 f8fd 	bl	80118dc <__aeabi_f2iz>
 80086e2:	b203      	sxth	r3, r0
 80086e4:	4698      	mov	r8, r3
 80086e6:	ab3c      	add	r3, sp, #240	; 0xf0
 80086e8:	469c      	mov	ip, r3
 80086ea:	2626      	movs	r6, #38	; 0x26
 80086ec:	4643      	mov	r3, r8
 80086ee:	4466      	add	r6, ip
 80086f0:	8033      	strh	r3, [r6, #0]
 80086f2:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80086f4:	f009 f95c 	bl	80119b0 <__aeabi_ui2f>
 80086f8:	21de      	movs	r1, #222	; 0xde
 80086fa:	0589      	lsls	r1, r1, #22
 80086fc:	f008 f9f8 	bl	8010af0 <__aeabi_fmul>
 8008700:	21fc      	movs	r1, #252	; 0xfc
 8008702:	0589      	lsls	r1, r1, #22
 8008704:	f008 fb26 	bl	8010d54 <__aeabi_fsub>
 8008708:	49a4      	ldr	r1, [pc, #656]	; (800899c <calibrate.lto_priv.139+0x1150>)
 800870a:	f008 f9f1 	bl	8010af0 <__aeabi_fmul>
 800870e:	49a4      	ldr	r1, [pc, #656]	; (80089a0 <calibrate.lto_priv.139+0x1154>)
 8008710:	f008 f9ee 	bl	8010af0 <__aeabi_fmul>
 8008714:	9035      	str	r0, [sp, #212]	; 0xd4
 8008716:	4640      	mov	r0, r8
 8008718:	f009 f900 	bl	801191c <__aeabi_i2f>
 800871c:	1c01      	adds	r1, r0, #0
 800871e:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8008720:	f007 ff3a 	bl	8010598 <__aeabi_fadd>
 8008724:	f009 f8da 	bl	80118dc <__aeabi_f2iz>
 8008728:	8028      	strh	r0, [r5, #0]
 800872a:	983f      	ldr	r0, [sp, #252]	; 0xfc
 800872c:	f009 f940 	bl	80119b0 <__aeabi_ui2f>
 8008730:	21de      	movs	r1, #222	; 0xde
 8008732:	0589      	lsls	r1, r1, #22
 8008734:	f008 f9dc 	bl	8010af0 <__aeabi_fmul>
 8008738:	21fc      	movs	r1, #252	; 0xfc
 800873a:	0589      	lsls	r1, r1, #22
 800873c:	f008 fb0a 	bl	8010d54 <__aeabi_fsub>
 8008740:	4996      	ldr	r1, [pc, #600]	; (800899c <calibrate.lto_priv.139+0x1150>)
 8008742:	f008 f9d5 	bl	8010af0 <__aeabi_fmul>
 8008746:	4996      	ldr	r1, [pc, #600]	; (80089a0 <calibrate.lto_priv.139+0x1154>)
 8008748:	f008 f9d2 	bl	8010af0 <__aeabi_fmul>
 800874c:	f009 f8c6 	bl	80118dc <__aeabi_f2iz>
 8008750:	2288      	movs	r2, #136	; 0x88
 8008752:	ab3c      	add	r3, sp, #240	; 0xf0
 8008754:	0052      	lsls	r2, r2, #1
 8008756:	189b      	adds	r3, r3, r2
 8008758:	8018      	strh	r0, [r3, #0]
 800875a:	4b92      	ldr	r3, [pc, #584]	; (80089a4 <calibrate.lto_priv.139+0x1158>)
 800875c:	4892      	ldr	r0, [pc, #584]	; (80089a8 <calibrate.lto_priv.139+0x115c>)
 800875e:	4698      	mov	r8, r3
 8008760:	0019      	movs	r1, r3
 8008762:	f007 fa85 	bl	800fc70 <acc_diagnostic_log_array>
 8008766:	0030      	movs	r0, r6
 8008768:	f004 fc39 	bl	800cfde <acc_diagnostic_log_data_i16.constprop.19>
 800876c:	4641      	mov	r1, r8
 800876e:	488e      	ldr	r0, [pc, #568]	; (80089a8 <calibrate.lto_priv.139+0x115c>)
 8008770:	f007 fa7e 	bl	800fc70 <acc_diagnostic_log_array>
 8008774:	0028      	movs	r0, r5
 8008776:	f004 fc32 	bl	800cfde <acc_diagnostic_log_data_i16.constprop.19>
 800877a:	4641      	mov	r1, r8
 800877c:	488b      	ldr	r0, [pc, #556]	; (80089ac <calibrate.lto_priv.139+0x1160>)
 800877e:	f007 fa77 	bl	800fc70 <acc_diagnostic_log_array>
 8008782:	a880      	add	r0, sp, #512	; 0x200
 8008784:	f004 fc2b 	bl	800cfde <acc_diagnostic_log_data_i16.constprop.19>
 8008788:	8832      	ldrh	r2, [r6, #0]
 800878a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	b21b      	sxth	r3, r3
 8008790:	17d9      	asrs	r1, r3, #31
 8008792:	185b      	adds	r3, r3, r1
 8008794:	404b      	eors	r3, r1
 8008796:	b21b      	sxth	r3, r3
 8008798:	2b64      	cmp	r3, #100	; 0x64
 800879a:	dc6d      	bgt.n	8008878 <calibrate.lto_priv.139+0x102c>
 800879c:	4b84      	ldr	r3, [pc, #528]	; (80089b0 <calibrate.lto_priv.139+0x1164>)
 800879e:	469c      	mov	ip, r3
 80087a0:	23e6      	movs	r3, #230	; 0xe6
 80087a2:	4462      	add	r2, ip
 80087a4:	b292      	uxth	r2, r2
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d865      	bhi.n	8008878 <calibrate.lto_priv.139+0x102c>
 80087ac:	2300      	movs	r3, #0
 80087ae:	5eea      	ldrsh	r2, [r5, r3]
 80087b0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80087b2:	1a9b      	subs	r3, r3, r2
 80087b4:	b21b      	sxth	r3, r3
 80087b6:	17d9      	asrs	r1, r3, #31
 80087b8:	185b      	adds	r3, r3, r1
 80087ba:	404b      	eors	r3, r1
 80087bc:	b21b      	sxth	r3, r3
 80087be:	2b64      	cmp	r3, #100	; 0x64
 80087c0:	dc5a      	bgt.n	8008878 <calibrate.lto_priv.139+0x102c>
 80087c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c4:	4293      	cmp	r3, r2
 80087c6:	db57      	blt.n	8008878 <calibrate.lto_priv.139+0x102c>
 80087c8:	497a      	ldr	r1, [pc, #488]	; (80089b4 <calibrate.lto_priv.139+0x1168>)
 80087ca:	487b      	ldr	r0, [pc, #492]	; (80089b8 <calibrate.lto_priv.139+0x116c>)
 80087cc:	f007 fa50 	bl	800fc70 <acc_diagnostic_log_array>
 80087d0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80087d2:	0020      	movs	r0, r4
 80087d4:	f007 fa4a 	bl	800fc6c <acc_diagnostic_log_data_u16>
 80087d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d000      	beq.n	80087e0 <calibrate.lto_priv.139+0xf94>
 80087de:	e08d      	b.n	80088fc <calibrate.lto_priv.139+0x10b0>
 80087e0:	2124      	movs	r1, #36	; 0x24
 80087e2:	4876      	ldr	r0, [pc, #472]	; (80089bc <calibrate.lto_priv.139+0x1170>)
 80087e4:	f7fb f9d8 	bl	8003b98 <acc_assert_fail>
 80087e8:	464a      	mov	r2, r9
 80087ea:	2908      	cmp	r1, #8
 80087ec:	d200      	bcs.n	80087f0 <calibrate.lto_priv.139+0xfa4>
 80087ee:	2208      	movs	r2, #8
 80087f0:	2108      	movs	r1, #8
 80087f2:	4249      	negs	r1, r1
 80087f4:	4689      	mov	r9, r1
 80087f6:	4491      	add	r9, r2
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d906      	bls.n	800880a <calibrate.lto_priv.139+0xfbe>
 80087fc:	4b63      	ldr	r3, [pc, #396]	; (800898c <calibrate.lto_priv.139+0x1140>)
 80087fe:	4a70      	ldr	r2, [pc, #448]	; (80089c0 <calibrate.lto_priv.139+0x1174>)
 8008800:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008802:	495f      	ldr	r1, [pc, #380]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 8008804:	464b      	mov	r3, r9
 8008806:	2004      	movs	r0, #4
 8008808:	47a0      	blx	r4
 800880a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800880c:	f007 fdea 	bl	80103e4 <acc_sensor_protocol_r2_stop.constprop.24>
 8008810:	2d00      	cmp	r5, #0
 8008812:	d000      	beq.n	8008816 <calibrate.lto_priv.139+0xfca>
 8008814:	e68b      	b.n	800852e <calibrate.lto_priv.139+0xce2>
 8008816:	2e00      	cmp	r6, #0
 8008818:	d000      	beq.n	800881c <calibrate.lto_priv.139+0xfd0>
 800881a:	e686      	b.n	800852a <calibrate.lto_priv.139+0xcde>
 800881c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d100      	bne.n	8008824 <calibrate.lto_priv.139+0xfd8>
 8008822:	e690      	b.n	8008546 <calibrate.lto_priv.139+0xcfa>
 8008824:	2f00      	cmp	r7, #0
 8008826:	d000      	beq.n	800882a <calibrate.lto_priv.139+0xfde>
 8008828:	e690      	b.n	800854c <calibrate.lto_priv.139+0xd00>
 800882a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800882c:	2b01      	cmp	r3, #1
 800882e:	d100      	bne.n	8008832 <calibrate.lto_priv.139+0xfe6>
 8008830:	e1d6      	b.n	8008be0 <calibrate.lto_priv.139+0x1394>
 8008832:	4653      	mov	r3, sl
 8008834:	9323      	str	r3, [sp, #140]	; 0x8c
 8008836:	e578      	b.n	800832a <calibrate.lto_priv.139+0xade>
 8008838:	2b03      	cmp	r3, #3
 800883a:	d800      	bhi.n	800883e <calibrate.lto_priv.139+0xff2>
 800883c:	e198      	b.n	8008b70 <calibrate.lto_priv.139+0x1324>
 800883e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008840:	494f      	ldr	r1, [pc, #316]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 8008842:	4a60      	ldr	r2, [pc, #384]	; (80089c4 <calibrate.lto_priv.139+0x1178>)
 8008844:	2004      	movs	r0, #4
 8008846:	4798      	blx	r3
 8008848:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800884a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800884c:	46b1      	mov	r9, r6
 800884e:	930a      	str	r3, [sp, #40]	; 0x28
 8008850:	e7db      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008852:	2208      	movs	r2, #8
 8008854:	4694      	mov	ip, r2
 8008856:	44e1      	add	r9, ip
 8008858:	464a      	mov	r2, r9
 800885a:	2a0f      	cmp	r2, #15
 800885c:	d901      	bls.n	8008862 <calibrate.lto_priv.139+0x1016>
 800885e:	220f      	movs	r2, #15
 8008860:	4691      	mov	r9, r2
 8008862:	2600      	movs	r6, #0
 8008864:	2b03      	cmp	r3, #3
 8008866:	d9d0      	bls.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008868:	4b48      	ldr	r3, [pc, #288]	; (800898c <calibrate.lto_priv.139+0x1140>)
 800886a:	4a57      	ldr	r2, [pc, #348]	; (80089c8 <calibrate.lto_priv.139+0x117c>)
 800886c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800886e:	4944      	ldr	r1, [pc, #272]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 8008870:	464b      	mov	r3, r9
 8008872:	2004      	movs	r0, #4
 8008874:	47a0      	blx	r4
 8008876:	e7c8      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008878:	4b44      	ldr	r3, [pc, #272]	; (800898c <calibrate.lto_priv.139+0x1140>)
 800887a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800887c:	001a      	movs	r2, r3
 800887e:	3230      	adds	r2, #48	; 0x30
 8008880:	7812      	ldrb	r2, [r2, #0]
 8008882:	2902      	cmp	r1, #2
 8008884:	d02d      	beq.n	80088e2 <calibrate.lto_priv.139+0x1096>
 8008886:	2a03      	cmp	r2, #3
 8008888:	d905      	bls.n	8008896 <calibrate.lto_priv.139+0x104a>
 800888a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800888c:	4a4f      	ldr	r2, [pc, #316]	; (80089cc <calibrate.lto_priv.139+0x1180>)
 800888e:	000b      	movs	r3, r1
 8008890:	2004      	movs	r0, #4
 8008892:	493b      	ldr	r1, [pc, #236]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 8008894:	47a0      	blx	r4
 8008896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008898:	f7f9 fcdc 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 800889c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800889e:	3301      	adds	r3, #1
 80088a0:	931e      	str	r3, [sp, #120]	; 0x78
 80088a2:	464b      	mov	r3, r9
 80088a4:	930e      	str	r3, [sp, #56]	; 0x38
 80088a6:	21fa      	movs	r1, #250	; 0xfa
 80088a8:	ac80      	add	r4, sp, #512	; 0x200
 80088aa:	0022      	movs	r2, r4
 80088ac:	00c9      	lsls	r1, r1, #3
 80088ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b0:	f007 fce6 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 80088b4:	9019      	str	r0, [sp, #100]	; 0x64
 80088b6:	1e05      	subs	r5, r0, #0
 80088b8:	d100      	bne.n	80088bc <calibrate.lto_priv.139+0x1070>
 80088ba:	e644      	b.n	8008546 <calibrate.lto_priv.139+0xcfa>
 80088bc:	7823      	ldrb	r3, [r4, #0]
 80088be:	2b06      	cmp	r3, #6
 80088c0:	d000      	beq.n	80088c4 <calibrate.lto_priv.139+0x1078>
 80088c2:	e640      	b.n	8008546 <calibrate.lto_priv.139+0xcfa>
 80088c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80088c6:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d300      	bcc.n	80088ce <calibrate.lto_priv.139+0x1082>
 80088cc:	e0f6      	b.n	8008abc <calibrate.lto_priv.139+0x1270>
 80088ce:	4b2f      	ldr	r3, [pc, #188]	; (800898c <calibrate.lto_priv.139+0x1140>)
 80088d0:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <calibrate.lto_priv.139+0x1184>)
 80088d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d4:	492a      	ldr	r1, [pc, #168]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 80088d6:	2000      	movs	r0, #0
 80088d8:	4798      	blx	r3
 80088da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088dc:	f007 fd82 	bl	80103e4 <acc_sensor_protocol_r2_stop.constprop.24>
 80088e0:	e631      	b.n	8008546 <calibrate.lto_priv.139+0xcfa>
 80088e2:	2a03      	cmp	r2, #3
 80088e4:	d904      	bls.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 80088e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e8:	4a3a      	ldr	r2, [pc, #232]	; (80089d4 <calibrate.lto_priv.139+0x1188>)
 80088ea:	4925      	ldr	r1, [pc, #148]	; (8008980 <calibrate.lto_priv.139+0x1134>)
 80088ec:	2004      	movs	r0, #4
 80088ee:	4798      	blx	r3
 80088f0:	2700      	movs	r7, #0
 80088f2:	464b      	mov	r3, r9
 80088f4:	003e      	movs	r6, r7
 80088f6:	930e      	str	r3, [sp, #56]	; 0x38
 80088f8:	003d      	movs	r5, r7
 80088fa:	e786      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 80088fc:	0025      	movs	r5, r4
 80088fe:	2000      	movs	r0, #0
 8008900:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8008902:	940e      	str	r4, [sp, #56]	; 0x38
 8008904:	191b      	adds	r3, r3, r4
 8008906:	882a      	ldrh	r2, [r5, #0]
 8008908:	3502      	adds	r5, #2
 800890a:	1880      	adds	r0, r0, r2
 800890c:	42ab      	cmp	r3, r5
 800890e:	d1fa      	bne.n	8008906 <calibrate.lto_priv.139+0x10ba>
 8008910:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008912:	f008 fc1f 	bl	8011154 <__udivsi3>
 8008916:	0022      	movs	r2, r4
 8008918:	b280      	uxth	r0, r0
 800891a:	8813      	ldrh	r3, [r2, #0]
 800891c:	4283      	cmp	r3, r0
 800891e:	d92b      	bls.n	8008978 <calibrate.lto_priv.139+0x112c>
 8008920:	1a1b      	subs	r3, r3, r0
 8008922:	b29b      	uxth	r3, r3
 8008924:	8013      	strh	r3, [r2, #0]
 8008926:	3202      	adds	r2, #2
 8008928:	4295      	cmp	r5, r2
 800892a:	d1f6      	bne.n	800891a <calibrate.lto_priv.139+0x10ce>
 800892c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800892e:	0027      	movs	r7, r4
 8008930:	469c      	mov	ip, r3
 8008932:	44a4      	add	ip, r4
 8008934:	4663      	mov	r3, ip
 8008936:	46a0      	mov	r8, r4
 8008938:	9335      	str	r3, [sp, #212]	; 0xd4
 800893a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800893c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800893e:	931e      	str	r3, [sp, #120]	; 0x78
 8008940:	2d00      	cmp	r5, #0
 8008942:	d14d      	bne.n	80089e0 <calibrate.lto_priv.139+0x1194>
 8008944:	0023      	movs	r3, r4
 8008946:	0028      	movs	r0, r5
 8008948:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800894a:	429a      	cmp	r2, r3
 800894c:	d168      	bne.n	8008a20 <calibrate.lto_priv.139+0x11d4>
 800894e:	2103      	movs	r1, #3
 8008950:	f008 fc00 	bl	8011154 <__udivsi3>
 8008954:	0025      	movs	r5, r4
 8008956:	2302      	movs	r3, #2
 8008958:	b280      	uxth	r0, r0
 800895a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800895c:	429a      	cmp	r2, r3
 800895e:	d867      	bhi.n	8008a30 <calibrate.lto_priv.139+0x11e4>
 8008960:	0013      	movs	r3, r2
 8008962:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8008964:	4293      	cmp	r3, r2
 8008966:	d300      	bcc.n	800896a <calibrate.lto_priv.139+0x111e>
 8008968:	e081      	b.n	8008a6e <calibrate.lto_priv.139+0x1222>
 800896a:	4b08      	ldr	r3, [pc, #32]	; (800898c <calibrate.lto_priv.139+0x1140>)
 800896c:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <calibrate.lto_priv.139+0x118c>)
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	491a      	ldr	r1, [pc, #104]	; (80089dc <calibrate.lto_priv.139+0x1190>)
 8008972:	2000      	movs	r0, #0
 8008974:	4798      	blx	r3
 8008976:	e7bb      	b.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 8008978:	1ac3      	subs	r3, r0, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	e7d2      	b.n	8008924 <calibrate.lto_priv.139+0x10d8>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	0801dee3 	.word	0x0801dee3
 8008984:	0801e26c 	.word	0x0801e26c
 8008988:	402ca8ad 	.word	0x402ca8ad
 800898c:	200005d8 	.word	0x200005d8
 8008990:	0801e2bc 	.word	0x0801e2bc
 8008994:	08016750 	.word	0x08016750
 8008998:	080167d0 	.word	0x080167d0
 800899c:	3f99999a 	.word	0x3f99999a
 80089a0:	447a0000 	.word	0x447a0000
 80089a4:	0801e1d1 	.word	0x0801e1d1
 80089a8:	0801e338 	.word	0x0801e338
 80089ac:	0801e346 	.word	0x0801e346
 80089b0:	fffffcf4 	.word	0xfffffcf4
 80089b4:	0801e354 	.word	0x0801e354
 80089b8:	0801e382 	.word	0x0801e382
 80089bc:	0801e3d4 	.word	0x0801e3d4
 80089c0:	0801e28a 	.word	0x0801e28a
 80089c4:	0801e2dc 	.word	0x0801e2dc
 80089c8:	0801e304 	.word	0x0801e304
 80089cc:	0801e396 	.word	0x0801e396
 80089d0:	0801db89 	.word	0x0801db89
 80089d4:	0801e3bd 	.word	0x0801e3bd
 80089d8:	0801e47b 	.word	0x0801e47b
 80089dc:	0801e45e 	.word	0x0801e45e
 80089e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80089e2:	0058      	lsls	r0, r3, #1
 80089e4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80089e6:	1940      	adds	r0, r0, r5
 80089e8:	1bd9      	subs	r1, r3, r7
 80089ea:	f008 fbb3 	bl	8011154 <__udivsi3>
 80089ee:	1e06      	subs	r6, r0, #0
 80089f0:	d014      	beq.n	8008a1c <calibrate.lto_priv.139+0x11d0>
 80089f2:	0042      	lsls	r2, r0, #1
 80089f4:	4643      	mov	r3, r8
 80089f6:	2000      	movs	r0, #0
 80089f8:	4442      	add	r2, r8
 80089fa:	8819      	ldrh	r1, [r3, #0]
 80089fc:	3302      	adds	r3, #2
 80089fe:	1840      	adds	r0, r0, r1
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d1fa      	bne.n	80089fa <calibrate.lto_priv.139+0x11ae>
 8008a04:	0031      	movs	r1, r6
 8008a06:	f008 fba5 	bl	8011154 <__udivsi3>
 8008a0a:	8038      	strh	r0, [r7, #0]
 8008a0c:	0073      	lsls	r3, r6, #1
 8008a0e:	4498      	add	r8, r3
 8008a10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a12:	3d01      	subs	r5, #1
 8008a14:	1b9b      	subs	r3, r3, r6
 8008a16:	931e      	str	r3, [sp, #120]	; 0x78
 8008a18:	3702      	adds	r7, #2
 8008a1a:	e791      	b.n	8008940 <calibrate.lto_priv.139+0x10f4>
 8008a1c:	8038      	strh	r0, [r7, #0]
 8008a1e:	e7f5      	b.n	8008a0c <calibrate.lto_priv.139+0x11c0>
 8008a20:	8819      	ldrh	r1, [r3, #0]
 8008a22:	1c0a      	adds	r2, r1, #0
 8008a24:	4281      	cmp	r1, r0
 8008a26:	d200      	bcs.n	8008a2a <calibrate.lto_priv.139+0x11de>
 8008a28:	1c02      	adds	r2, r0, #0
 8008a2a:	b290      	uxth	r0, r2
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	e78b      	b.n	8008948 <calibrate.lto_priv.139+0x10fc>
 8008a30:	882a      	ldrh	r2, [r5, #0]
 8008a32:	88a9      	ldrh	r1, [r5, #4]
 8008a34:	428a      	cmp	r2, r1
 8008a36:	d802      	bhi.n	8008a3e <calibrate.lto_priv.139+0x11f2>
 8008a38:	0016      	movs	r6, r2
 8008a3a:	000a      	movs	r2, r1
 8008a3c:	0031      	movs	r1, r6
 8008a3e:	4290      	cmp	r0, r2
 8008a40:	d212      	bcs.n	8008a68 <calibrate.lto_priv.139+0x121c>
 8008a42:	00ce      	lsls	r6, r1, #3
 8008a44:	42b2      	cmp	r2, r6
 8008a46:	d90f      	bls.n	8008a68 <calibrate.lto_priv.139+0x121c>
 8008a48:	4c90      	ldr	r4, [pc, #576]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008a4a:	0025      	movs	r5, r4
 8008a4c:	3530      	adds	r5, #48	; 0x30
 8008a4e:	782d      	ldrb	r5, [r5, #0]
 8008a50:	2d03      	cmp	r5, #3
 8008a52:	d800      	bhi.n	8008a56 <calibrate.lto_priv.139+0x120a>
 8008a54:	e74c      	b.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 8008a56:	9002      	str	r0, [sp, #8]
 8008a58:	9101      	str	r1, [sp, #4]
 8008a5a:	9200      	str	r2, [sp, #0]
 8008a5c:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8008a5e:	4a8c      	ldr	r2, [pc, #560]	; (8008c90 <calibrate.lto_priv.139+0x1444>)
 8008a60:	498c      	ldr	r1, [pc, #560]	; (8008c94 <calibrate.lto_priv.139+0x1448>)
 8008a62:	2004      	movs	r0, #4
 8008a64:	47a0      	blx	r4
 8008a66:	e743      	b.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 8008a68:	3301      	adds	r3, #1
 8008a6a:	3502      	adds	r5, #2
 8008a6c:	e775      	b.n	800895a <calibrate.lto_priv.139+0x110e>
 8008a6e:	0022      	movs	r2, r4
 8008a70:	2300      	movs	r3, #0
 8008a72:	3210      	adds	r2, #16
 8008a74:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a76:	8809      	ldrh	r1, [r1, #0]
 8008a78:	185b      	adds	r3, r3, r1
 8008a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008a7c:	3102      	adds	r1, #2
 8008a7e:	910e      	str	r1, [sp, #56]	; 0x38
 8008a80:	428a      	cmp	r2, r1
 8008a82:	d1f7      	bne.n	8008a74 <calibrate.lto_priv.139+0x1228>
 8008a84:	2200      	movs	r2, #0
 8008a86:	9933      	ldr	r1, [sp, #204]	; 0xcc
 8008a88:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8008a8a:	4288      	cmp	r0, r1
 8008a8c:	d811      	bhi.n	8008ab2 <calibrate.lto_priv.139+0x1266>
 8008a8e:	2105      	movs	r1, #5
 8008a90:	4359      	muls	r1, r3
 8008a92:	428a      	cmp	r2, r1
 8008a94:	d271      	bcs.n	8008b7a <calibrate.lto_priv.139+0x132e>
 8008a96:	497d      	ldr	r1, [pc, #500]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008a98:	0008      	movs	r0, r1
 8008a9a:	3030      	adds	r0, #48	; 0x30
 8008a9c:	7800      	ldrb	r0, [r0, #0]
 8008a9e:	2803      	cmp	r0, #3
 8008aa0:	d800      	bhi.n	8008aa4 <calibrate.lto_priv.139+0x1258>
 8008aa2:	e725      	b.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 8008aa4:	9200      	str	r2, [sp, #0]
 8008aa6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008aa8:	4a7b      	ldr	r2, [pc, #492]	; (8008c98 <calibrate.lto_priv.139+0x144c>)
 8008aaa:	497a      	ldr	r1, [pc, #488]	; (8008c94 <calibrate.lto_priv.139+0x1448>)
 8008aac:	2004      	movs	r0, #4
 8008aae:	47a0      	blx	r4
 8008ab0:	e71e      	b.n	80088f0 <calibrate.lto_priv.139+0x10a4>
 8008ab2:	0048      	lsls	r0, r1, #1
 8008ab4:	5a20      	ldrh	r0, [r4, r0]
 8008ab6:	3101      	adds	r1, #1
 8008ab8:	1812      	adds	r2, r2, r0
 8008aba:	e7e5      	b.n	8008a88 <calibrate.lto_priv.139+0x123c>
 8008abc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8008abe:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ac2:	f7f9 f801 	bl	8001ac8 <acc_sensor_protocol_r2_transfer_data>
 8008ac6:	4680      	mov	r8, r0
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d100      	bne.n	8008ace <calibrate.lto_priv.139+0x1282>
 8008acc:	e53b      	b.n	8008546 <calibrate.lto_priv.139+0xcfa>
 8008ace:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 8008ad0:	005c      	lsls	r4, r3, #1
 8008ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ad4:	4444      	add	r4, r8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d01f      	beq.n	8008b1a <calibrate.lto_priv.139+0x12ce>
 8008ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ade:	18e6      	adds	r6, r4, r3
 8008ae0:	0032      	movs	r2, r6
 8008ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae4:	4650      	mov	r0, sl
 8008ae6:	f7f7 fb27 	bl	8000138 <acc_probes_execute_uint16>
 8008aea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008aec:	0030      	movs	r0, r6
 8008aee:	f7f9 fa83 	bl	8001ff8 <acc_alg_cca_calculate>
 8008af2:	496a      	ldr	r1, [pc, #424]	; (8008c9c <calibrate.lto_priv.139+0x1450>)
 8008af4:	9016      	str	r0, [sp, #88]	; 0x58
 8008af6:	2601      	movs	r6, #1
 8008af8:	f008 fd06 	bl	8011508 <__aeabi_fcmpgt>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d100      	bne.n	8008b02 <calibrate.lto_priv.139+0x12b6>
 8008b00:	1c06      	adds	r6, r0, #0
 8008b02:	b2f3      	uxtb	r3, r6
 8008b04:	4965      	ldr	r1, [pc, #404]	; (8008c9c <calibrate.lto_priv.139+0x1450>)
 8008b06:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008b08:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b0a:	f008 fcfd 	bl	8011508 <__aeabi_fcmpgt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d124      	bne.n	8008b5c <calibrate.lto_priv.139+0x1310>
 8008b12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d126      	bne.n	8008b66 <calibrate.lto_priv.139+0x131a>
 8008b18:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b1a:	4a61      	ldr	r2, [pc, #388]	; (8008ca0 <calibrate.lto_priv.139+0x1454>)
 8008b1c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8008b1e:	0020      	movs	r0, r4
 8008b20:	f007 f8c8 	bl	800fcb4 <acc_alg_basic_saturation_check_u16>
 8008b24:	1e06      	subs	r6, r0, #0
 8008b26:	d000      	beq.n	8008b2a <calibrate.lto_priv.139+0x12de>
 8008b28:	e58b      	b.n	8008642 <calibrate.lto_priv.139+0xdf6>
 8008b2a:	4a58      	ldr	r2, [pc, #352]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008b2c:	4649      	mov	r1, r9
 8008b2e:	0013      	movs	r3, r2
 8008b30:	3330      	adds	r3, #48	; 0x30
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d000      	beq.n	8008b3a <calibrate.lto_priv.139+0x12ee>
 8008b38:	e656      	b.n	80087e8 <calibrate.lto_priv.139+0xf9c>
 8008b3a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d100      	bne.n	8008b42 <calibrate.lto_priv.139+0x12f6>
 8008b40:	e578      	b.n	8008634 <calibrate.lto_priv.139+0xde8>
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d904      	bls.n	8008b50 <calibrate.lto_priv.139+0x1304>
 8008b46:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008b48:	4956      	ldr	r1, [pc, #344]	; (8008ca4 <calibrate.lto_priv.139+0x1458>)
 8008b4a:	4a57      	ldr	r2, [pc, #348]	; (8008ca8 <calibrate.lto_priv.139+0x145c>)
 8008b4c:	2004      	movs	r0, #4
 8008b4e:	4798      	blx	r3
 8008b50:	464b      	mov	r3, r9
 8008b52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b54:	930a      	str	r3, [sp, #40]	; 0x28
 8008b56:	230f      	movs	r3, #15
 8008b58:	4699      	mov	r9, r3
 8008b5a:	e656      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9332      	str	r3, [sp, #200]	; 0xc8
 8008b60:	001e      	movs	r6, r3
 8008b62:	001d      	movs	r5, r3
 8008b64:	e651      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008b66:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008b68:	9017      	str	r0, [sp, #92]	; 0x5c
 8008b6a:	9014      	str	r0, [sp, #80]	; 0x50
 8008b6c:	0005      	movs	r5, r0
 8008b6e:	e64c      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008b70:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b74:	46b1      	mov	r9, r6
 8008b76:	930a      	str	r3, [sp, #40]	; 0x28
 8008b78:	e647      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	2500      	movs	r5, #0
 8008b7e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b80:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008b82:	002e      	movs	r6, r5
 8008b84:	e641      	b.n	800880a <calibrate.lto_priv.139+0xfbe>
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	d100      	bne.n	8008b8c <calibrate.lto_priv.139+0x1340>
 8008b8a:	e4fc      	b.n	8008586 <calibrate.lto_priv.139+0xd3a>
 8008b8c:	4b3f      	ldr	r3, [pc, #252]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008b8e:	001a      	movs	r2, r3
 8008b90:	3230      	adds	r2, #48	; 0x30
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	2a01      	cmp	r2, #1
 8008b96:	d917      	bls.n	8008bc8 <calibrate.lto_priv.139+0x137c>
 8008b98:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b9a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008b9c:	4b43      	ldr	r3, [pc, #268]	; (8008cac <calibrate.lto_priv.139+0x1460>)
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d000      	beq.n	8008ba4 <calibrate.lto_priv.139+0x1358>
 8008ba2:	4b43      	ldr	r3, [pc, #268]	; (8008cb0 <calibrate.lto_priv.139+0x1464>)
 8008ba4:	9306      	str	r3, [sp, #24]
 8008ba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ba8:	4a42      	ldr	r2, [pc, #264]	; (8008cb4 <calibrate.lto_priv.139+0x1468>)
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8008bae:	493d      	ldr	r1, [pc, #244]	; (8008ca4 <calibrate.lto_priv.139+0x1458>)
 8008bb0:	9304      	str	r3, [sp, #16]
 8008bb2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008bb4:	2002      	movs	r0, #2
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bba:	9302      	str	r3, [sp, #8]
 8008bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc6:	47a0      	blx	r4
 8008bc8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8008bcc:	9239      	str	r2, [sp, #228]	; 0xe4
 8008bce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008bd0:	923e      	str	r2, [sp, #248]	; 0xf8
 8008bd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bd4:	923d      	str	r2, [sp, #244]	; 0xf4
 8008bd6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8008bd8:	923c      	str	r2, [sp, #240]	; 0xf0
 8008bda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008bdc:	922d      	str	r2, [sp, #180]	; 0xb4
 8008bde:	e012      	b.n	8008c06 <calibrate.lto_priv.139+0x13ba>
 8008be0:	4b2a      	ldr	r3, [pc, #168]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008be2:	001a      	movs	r2, r3
 8008be4:	3230      	adds	r2, #48	; 0x30
 8008be6:	7812      	ldrb	r2, [r2, #0]
 8008be8:	2a03      	cmp	r2, #3
 8008bea:	d801      	bhi.n	8008bf0 <calibrate.lto_priv.139+0x13a4>
 8008bec:	f7ff f9b3 	bl	8007f56 <calibrate.lto_priv.139+0x70a>
 8008bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bf2:	492c      	ldr	r1, [pc, #176]	; (8008ca4 <calibrate.lto_priv.139+0x1458>)
 8008bf4:	9200      	str	r2, [sp, #0]
 8008bf6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008bf8:	4a2f      	ldr	r2, [pc, #188]	; (8008cb8 <calibrate.lto_priv.139+0x146c>)
 8008bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bfc:	2004      	movs	r0, #4
 8008bfe:	47a0      	blx	r4
 8008c00:	f7ff f9a9 	bl	8007f56 <calibrate.lto_priv.139+0x70a>
 8008c04:	2300      	movs	r3, #0
 8008c06:	2400      	movs	r4, #0
 8008c08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8008c0a:	42a2      	cmp	r2, r4
 8008c0c:	d000      	beq.n	8008c10 <calibrate.lto_priv.139+0x13c4>
 8008c0e:	001c      	movs	r4, r3
 8008c10:	2301      	movs	r3, #1
 8008c12:	401c      	ands	r4, r3
 8008c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d004      	beq.n	8008c24 <calibrate.lto_priv.139+0x13d8>
 8008c1a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8008c1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c22:	605a      	str	r2, [r3, #4]
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	d101      	bne.n	8008c2c <calibrate.lto_priv.139+0x13e0>
 8008c28:	f7fe fe35 	bl	8007896 <calibrate.lto_priv.139+0x4a>
 8008c2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c2e:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8008c30:	4d16      	ldr	r5, [pc, #88]	; (8008c8c <calibrate.lto_priv.139+0x1440>)
 8008c32:	8093      	strh	r3, [r2, #4]
 8008c34:	ab46      	add	r3, sp, #280	; 0x118
 8008c36:	791b      	ldrb	r3, [r3, #4]
 8008c38:	80d3      	strh	r3, [r2, #6]
 8008c3a:	0013      	movs	r3, r2
 8008c3c:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8008c3e:	811a      	strh	r2, [r3, #8]
 8008c40:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8008c42:	815a      	strh	r2, [r3, #10]
 8008c44:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8008c46:	819a      	strh	r2, [r3, #12]
 8008c48:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8008c4a:	81da      	strh	r2, [r3, #14]
 8008c4c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8008c4e:	821a      	strh	r2, [r3, #16]
 8008c50:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8008c52:	825a      	strh	r2, [r3, #18]
 8008c54:	2306      	movs	r3, #6
 8008c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c58:	6013      	str	r3, [r2, #0]
 8008c5a:	002b      	movs	r3, r5
 8008c5c:	3330      	adds	r3, #48	; 0x30
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d904      	bls.n	8008c6e <calibrate.lto_priv.139+0x1422>
 8008c64:	4a15      	ldr	r2, [pc, #84]	; (8008cbc <calibrate.lto_priv.139+0x1470>)
 8008c66:	4916      	ldr	r1, [pc, #88]	; (8008cc0 <calibrate.lto_priv.139+0x1474>)
 8008c68:	2004      	movs	r0, #4
 8008c6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008c6c:	4798      	blx	r3
 8008c6e:	002b      	movs	r3, r5
 8008c70:	3330      	adds	r3, #48	; 0x30
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d801      	bhi.n	8008c7c <calibrate.lto_priv.139+0x1430>
 8008c78:	f7fe fe0e 	bl	8007898 <calibrate.lto_priv.139+0x4c>
 8008c7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008c7e:	4a11      	ldr	r2, [pc, #68]	; (8008cc4 <calibrate.lto_priv.139+0x1478>)
 8008c80:	490f      	ldr	r1, [pc, #60]	; (8008cc0 <calibrate.lto_priv.139+0x1474>)
 8008c82:	2002      	movs	r0, #2
 8008c84:	4798      	blx	r3
 8008c86:	f7fe fe07 	bl	8007898 <calibrate.lto_priv.139+0x4c>
 8008c8a:	46c0      	nop			; (mov r8, r8)
 8008c8c:	200005d8 	.word	0x200005d8
 8008c90:	0801e402 	.word	0x0801e402
 8008c94:	0801e45e 	.word	0x0801e45e
 8008c98:	0801e48b 	.word	0x0801e48b
 8008c9c:	42640000 	.word	0x42640000
 8008ca0:	42172c98 	.word	0x42172c98
 8008ca4:	0801dee3 	.word	0x0801dee3
 8008ca8:	0801e245 	.word	0x0801e245
 8008cac:	0801dec0 	.word	0x0801dec0
 8008cb0:	0801debb 	.word	0x0801debb
 8008cb4:	0801e529 	.word	0x0801e529
 8008cb8:	0801e4f5 	.word	0x0801e4f5
 8008cbc:	0801e591 	.word	0x0801e591
 8008cc0:	0801d9a6 	.word	0x0801d9a6
 8008cc4:	0801dcd9 	.word	0x0801dcd9

08008cc8 <initialize.lto_priv.147>:
 8008cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cca:	464e      	mov	r6, r9
 8008ccc:	46de      	mov	lr, fp
 8008cce:	4657      	mov	r7, sl
 8008cd0:	4645      	mov	r5, r8
 8008cd2:	b5e0      	push	{r5, r6, r7, lr}
 8008cd4:	b097      	sub	sp, #92	; 0x5c
 8008cd6:	9306      	str	r3, [sp, #24]
 8008cd8:	2332      	movs	r3, #50	; 0x32
 8008cda:	469a      	mov	sl, r3
 8008cdc:	448a      	add	sl, r1
 8008cde:	4653      	mov	r3, sl
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	4681      	mov	r9, r0
 8008ce4:	000e      	movs	r6, r1
 8008ce6:	4693      	mov	fp, r2
 8008ce8:	2b06      	cmp	r3, #6
 8008cea:	d00f      	beq.n	8008d0c <initialize.lto_priv.147+0x44>
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	d00d      	beq.n	8008d0c <initialize.lto_priv.147+0x44>
 8008cf0:	4b7a      	ldr	r3, [pc, #488]	; (8008edc <initialize.lto_priv.147+0x214>)
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	4a7a      	ldr	r2, [pc, #488]	; (8008ee0 <initialize.lto_priv.147+0x218>)
 8008cf8:	497a      	ldr	r1, [pc, #488]	; (8008ee4 <initialize.lto_priv.147+0x21c>)
 8008cfa:	4798      	blx	r3
 8008cfc:	2000      	movs	r0, #0
 8008cfe:	b017      	add	sp, #92	; 0x5c
 8008d00:	bc3c      	pop	{r2, r3, r4, r5}
 8008d02:	4690      	mov	r8, r2
 8008d04:	4699      	mov	r9, r3
 8008d06:	46a2      	mov	sl, r4
 8008d08:	46ab      	mov	fp, r5
 8008d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	0030      	movs	r0, r6
 8008d10:	695d      	ldr	r5, [r3, #20]
 8008d12:	f7f7 ff59 	bl	8000bc8 <configuration_is_valid>
 8008d16:	2300      	movs	r3, #0
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	d00c      	beq.n	8008d36 <initialize.lto_priv.147+0x6e>
 8008d1c:	0032      	movs	r2, r6
 8008d1e:	324f      	adds	r2, #79	; 0x4f
 8008d20:	7810      	ldrb	r0, [r2, #0]
 8008d22:	0033      	movs	r3, r6
 8008d24:	0002      	movs	r2, r0
 8008d26:	1e51      	subs	r1, r2, #1
 8008d28:	418a      	sbcs	r2, r1
 8008d2a:	3350      	adds	r3, #80	; 0x50
 8008d2c:	781c      	ldrb	r4, [r3, #0]
 8008d2e:	3302      	adds	r3, #2
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	4252      	negs	r2, r2
 8008d34:	4013      	ands	r3, r2
 8008d36:	002a      	movs	r2, r5
 8008d38:	32ce      	adds	r2, #206	; 0xce
 8008d3a:	8013      	strh	r3, [r2, #0]
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d000      	beq.n	8008d42 <initialize.lto_priv.147+0x7a>
 8008d40:	0020      	movs	r0, r4
 8008d42:	002b      	movs	r3, r5
 8008d44:	33d0      	adds	r3, #208	; 0xd0
 8008d46:	7018      	strb	r0, [r3, #0]
 8008d48:	0030      	movs	r0, r6
 8008d4a:	f7f7 ff73 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008d4e:	002b      	movs	r3, r5
 8008d50:	2700      	movs	r7, #0
 8008d52:	33cc      	adds	r3, #204	; 0xcc
 8008d54:	8018      	strh	r0, [r3, #0]
 8008d56:	3b10      	subs	r3, #16
 8008d58:	601f      	str	r7, [r3, #0]
 8008d5a:	0030      	movs	r0, r6
 8008d5c:	f7f8 f800 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 8008d60:	002b      	movs	r3, r5
 8008d62:	2201      	movs	r2, #1
 8008d64:	33c0      	adds	r3, #192	; 0xc0
 8008d66:	7018      	strb	r0, [r3, #0]
 8008d68:	3b13      	subs	r3, #19
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	0028      	movs	r0, r5
 8008d6e:	f7fb f8ed 	bl	8003f4c <get_package_range_coarse_max>
 8008d72:	9008      	str	r0, [sp, #32]
 8008d74:	0030      	movs	r0, r6
 8008d76:	f7f7 ff27 	bl	8000bc8 <configuration_is_valid>
 8008d7a:	42b8      	cmp	r0, r7
 8008d7c:	d052      	beq.n	8008e24 <initialize.lto_priv.147+0x15c>
 8008d7e:	0033      	movs	r3, r6
 8008d80:	332c      	adds	r3, #44	; 0x2c
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	42bb      	cmp	r3, r7
 8008d86:	d04d      	beq.n	8008e24 <initialize.lto_priv.147+0x15c>
 8008d88:	0030      	movs	r0, r6
 8008d8a:	f7f7 ff1d 	bl	8000bc8 <configuration_is_valid>
 8008d8e:	42b8      	cmp	r0, r7
 8008d90:	d001      	beq.n	8008d96 <initialize.lto_priv.147+0xce>
 8008d92:	2334      	movs	r3, #52	; 0x34
 8008d94:	5ef7      	ldrsh	r7, [r6, r3]
 8008d96:	0030      	movs	r0, r6
 8008d98:	f7f7 ff16 	bl	8000bc8 <configuration_is_valid>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4298      	cmp	r0, r3
 8008da0:	d001      	beq.n	8008da6 <initialize.lto_priv.147+0xde>
 8008da2:	2236      	movs	r2, #54	; 0x36
 8008da4:	5eb3      	ldrsh	r3, [r6, r2]
 8008da6:	4698      	mov	r8, r3
 8008da8:	44b8      	add	r8, r7
 8008daa:	0033      	movs	r3, r6
 8008dac:	332e      	adds	r3, #46	; 0x2e
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d100      	bne.n	8008db6 <initialize.lto_priv.147+0xee>
 8008db4:	e08e      	b.n	8008ed4 <initialize.lto_priv.147+0x20c>
 8008db6:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8008db8:	0030      	movs	r0, r6
 8008dba:	f7f7 ff3b 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	2801      	cmp	r0, #1
 8008dc2:	d925      	bls.n	8008e10 <initialize.lto_priv.147+0x148>
 8008dc4:	2802      	cmp	r0, #2
 8008dc6:	d10c      	bne.n	8008de2 <initialize.lto_priv.147+0x11a>
 8008dc8:	07fb      	lsls	r3, r7, #31
 8008dca:	d40a      	bmi.n	8008de2 <initialize.lto_priv.147+0x11a>
 8008dcc:	4b43      	ldr	r3, [pc, #268]	; (8008edc <initialize.lto_priv.147+0x214>)
 8008dce:	001a      	movs	r2, r3
 8008dd0:	3230      	adds	r2, #48	; 0x30
 8008dd2:	7812      	ldrb	r2, [r2, #0]
 8008dd4:	2a01      	cmp	r2, #1
 8008dd6:	d903      	bls.n	8008de0 <initialize.lto_priv.147+0x118>
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	4a43      	ldr	r2, [pc, #268]	; (8008ee8 <initialize.lto_priv.147+0x220>)
 8008ddc:	4943      	ldr	r1, [pc, #268]	; (8008eec <initialize.lto_priv.147+0x224>)
 8008dde:	4798      	blx	r3
 8008de0:	3701      	adds	r7, #1
 8008de2:	4643      	mov	r3, r8
 8008de4:	4651      	mov	r1, sl
 8008de6:	1bd8      	subs	r0, r3, r7
 8008de8:	f008 fb24 	bl	8011434 <__aeabi_idivmod>
 8008dec:	468a      	mov	sl, r1
 8008dee:	2900      	cmp	r1, #0
 8008df0:	dd0e      	ble.n	8008e10 <initialize.lto_priv.147+0x148>
 8008df2:	4b3a      	ldr	r3, [pc, #232]	; (8008edc <initialize.lto_priv.147+0x214>)
 8008df4:	001a      	movs	r2, r3
 8008df6:	3230      	adds	r2, #48	; 0x30
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	2a01      	cmp	r2, #1
 8008dfc:	d904      	bls.n	8008e08 <initialize.lto_priv.147+0x140>
 8008dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e00:	4a3b      	ldr	r2, [pc, #236]	; (8008ef0 <initialize.lto_priv.147+0x228>)
 8008e02:	493a      	ldr	r1, [pc, #232]	; (8008eec <initialize.lto_priv.147+0x224>)
 8008e04:	2002      	movs	r0, #2
 8008e06:	4798      	blx	r3
 8008e08:	4643      	mov	r3, r8
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	4698      	mov	r8, r3
 8008e10:	4547      	cmp	r7, r8
 8008e12:	dd73      	ble.n	8008efc <initialize.lto_priv.147+0x234>
 8008e14:	4b31      	ldr	r3, [pc, #196]	; (8008edc <initialize.lto_priv.147+0x214>)
 8008e16:	4a37      	ldr	r2, [pc, #220]	; (8008ef4 <initialize.lto_priv.147+0x22c>)
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	4934      	ldr	r1, [pc, #208]	; (8008eec <initialize.lto_priv.147+0x224>)
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	4798      	blx	r3
 8008e20:	2000      	movs	r0, #0
 8008e22:	e76c      	b.n	8008cfe <initialize.lto_priv.147+0x36>
 8008e24:	0030      	movs	r0, r6
 8008e26:	f7f7 fecf 	bl	8000bc8 <configuration_is_valid>
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d000      	beq.n	8008e32 <initialize.lto_priv.147+0x16a>
 8008e30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e32:	0030      	movs	r0, r6
 8008e34:	f7f7 fec8 	bl	8000bc8 <configuration_is_valid>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d043      	beq.n	8008ec4 <initialize.lto_priv.147+0x1fc>
 8008e3c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8008e3e:	1c21      	adds	r1, r4, #0
 8008e40:	f007 fbaa 	bl	8010598 <__aeabi_fadd>
 8008e44:	4680      	mov	r8, r0
 8008e46:	f004 f979 	bl	800d13c <get_dt.constprop.9>
 8008e4a:	1c21      	adds	r1, r4, #0
 8008e4c:	9007      	str	r0, [sp, #28]
 8008e4e:	1c20      	adds	r0, r4, #0
 8008e50:	f007 fba2 	bl	8010598 <__aeabi_fadd>
 8008e54:	4928      	ldr	r1, [pc, #160]	; (8008ef8 <initialize.lto_priv.147+0x230>)
 8008e56:	1c07      	adds	r7, r0, #0
 8008e58:	9807      	ldr	r0, [sp, #28]
 8008e5a:	f007 fe49 	bl	8010af0 <__aeabi_fmul>
 8008e5e:	1c01      	adds	r1, r0, #0
 8008e60:	1c38      	adds	r0, r7, #0
 8008e62:	f007 fd33 	bl	80108cc <__aeabi_fdiv>
 8008e66:	2100      	movs	r1, #0
 8008e68:	1c07      	adds	r7, r0, #0
 8008e6a:	1c20      	adds	r0, r4, #0
 8008e6c:	f008 fb38 	bl	80114e0 <__aeabi_fcmplt>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d129      	bne.n	8008ec8 <initialize.lto_priv.147+0x200>
 8008e74:	21fc      	movs	r1, #252	; 0xfc
 8008e76:	0589      	lsls	r1, r1, #22
 8008e78:	1c38      	adds	r0, r7, #0
 8008e7a:	f007 fb8d 	bl	8010598 <__aeabi_fadd>
 8008e7e:	f008 fd2d 	bl	80118dc <__aeabi_f2iz>
 8008e82:	0007      	movs	r7, r0
 8008e84:	f004 f95a 	bl	800d13c <get_dt.constprop.9>
 8008e88:	4641      	mov	r1, r8
 8008e8a:	9007      	str	r0, [sp, #28]
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	f007 fb83 	bl	8010598 <__aeabi_fadd>
 8008e92:	4919      	ldr	r1, [pc, #100]	; (8008ef8 <initialize.lto_priv.147+0x230>)
 8008e94:	1c04      	adds	r4, r0, #0
 8008e96:	9807      	ldr	r0, [sp, #28]
 8008e98:	f007 fe2a 	bl	8010af0 <__aeabi_fmul>
 8008e9c:	1c01      	adds	r1, r0, #0
 8008e9e:	1c20      	adds	r0, r4, #0
 8008ea0:	f007 fd14 	bl	80108cc <__aeabi_fdiv>
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	1c04      	adds	r4, r0, #0
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	f008 fb19 	bl	80114e0 <__aeabi_fcmplt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	d10d      	bne.n	8008ece <initialize.lto_priv.147+0x206>
 8008eb2:	21fc      	movs	r1, #252	; 0xfc
 8008eb4:	0589      	lsls	r1, r1, #22
 8008eb6:	1c20      	adds	r0, r4, #0
 8008eb8:	f007 fb6e 	bl	8010598 <__aeabi_fadd>
 8008ebc:	f008 fd0e 	bl	80118dc <__aeabi_f2iz>
 8008ec0:	4680      	mov	r8, r0
 8008ec2:	e772      	b.n	8008daa <initialize.lto_priv.147+0xe2>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e7ba      	b.n	8008e3e <initialize.lto_priv.147+0x176>
 8008ec8:	21bf      	movs	r1, #191	; 0xbf
 8008eca:	0609      	lsls	r1, r1, #24
 8008ecc:	e7d4      	b.n	8008e78 <initialize.lto_priv.147+0x1b0>
 8008ece:	21bf      	movs	r1, #191	; 0xbf
 8008ed0:	0609      	lsls	r1, r1, #24
 8008ed2:	e7f0      	b.n	8008eb6 <initialize.lto_priv.147+0x1ee>
 8008ed4:	4653      	mov	r3, sl
 8008ed6:	781c      	ldrb	r4, [r3, #0]
 8008ed8:	e76e      	b.n	8008db8 <initialize.lto_priv.147+0xf0>
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	200005d8 	.word	0x200005d8
 8008ee0:	0801ce67 	.word	0x0801ce67
 8008ee4:	0801d9a6 	.word	0x0801d9a6
 8008ee8:	0801e5ac 	.word	0x0801e5ac
 8008eec:	0801e5e1 	.word	0x0801e5e1
 8008ef0:	0801dd22 	.word	0x0801dd22
 8008ef4:	0801dd55 	.word	0x0801dd55
 8008ef8:	4d8ef3c2 	.word	0x4d8ef3c2
 8008efc:	0030      	movs	r0, r6
 8008efe:	f7f7 fe63 	bl	8000bc8 <configuration_is_valid>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d005      	beq.n	8008f12 <initialize.lto_priv.147+0x24a>
 8008f06:	0033      	movs	r3, r6
 8008f08:	336e      	adds	r3, #110	; 0x6e
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d000      	beq.n	8008f12 <initialize.lto_priv.147+0x24a>
 8008f10:	e1b8      	b.n	8009284 <initialize.lto_priv.147+0x5bc>
 8008f12:	4bd2      	ldr	r3, [pc, #840]	; (800925c <initialize.lto_priv.147+0x594>)
 8008f14:	429f      	cmp	r7, r3
 8008f16:	db00      	blt.n	8008f1a <initialize.lto_priv.147+0x252>
 8008f18:	e0cb      	b.n	80090b2 <initialize.lto_priv.147+0x3ea>
 8008f1a:	4bd1      	ldr	r3, [pc, #836]	; (8009260 <initialize.lto_priv.147+0x598>)
 8008f1c:	0038      	movs	r0, r7
 8008f1e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8008f20:	f004 f928 	bl	800d174 <points_to_meter.constprop.8>
 8008f24:	2100      	movs	r1, #0
 8008f26:	f008 fadb 	bl	80114e0 <__aeabi_fcmplt>
 8008f2a:	4cce      	ldr	r4, [pc, #824]	; (8009264 <initialize.lto_priv.147+0x59c>)
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d100      	bne.n	8008f32 <initialize.lto_priv.147+0x26a>
 8008f30:	4ccd      	ldr	r4, [pc, #820]	; (8009268 <initialize.lto_priv.147+0x5a0>)
 8008f32:	0038      	movs	r0, r7
 8008f34:	f004 f91e 	bl	800d174 <points_to_meter.constprop.8>
 8008f38:	1c05      	adds	r5, r0, #0
 8008f3a:	0038      	movs	r0, r7
 8008f3c:	f004 f91a 	bl	800d174 <points_to_meter.constprop.8>
 8008f40:	2100      	movs	r1, #0
 8008f42:	f008 facd 	bl	80114e0 <__aeabi_fcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d000      	beq.n	8008f4c <initialize.lto_priv.147+0x284>
 8008f4a:	e0a6      	b.n	800909a <initialize.lto_priv.147+0x3d2>
 8008f4c:	21fe      	movs	r1, #254	; 0xfe
 8008f4e:	0589      	lsls	r1, r1, #22
 8008f50:	1c28      	adds	r0, r5, #0
 8008f52:	f007 fdcd 	bl	8010af0 <__aeabi_fmul>
 8008f56:	49c5      	ldr	r1, [pc, #788]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8008f58:	f007 fb1e 	bl	8010598 <__aeabi_fadd>
 8008f5c:	f008 fb08 	bl	8011570 <__aeabi_f2uiz>
 8008f60:	4680      	mov	r8, r0
 8008f62:	0038      	movs	r0, r7
 8008f64:	f004 f906 	bl	800d174 <points_to_meter.constprop.8>
 8008f68:	1c05      	adds	r5, r0, #0
 8008f6a:	0038      	movs	r0, r7
 8008f6c:	f004 f902 	bl	800d174 <points_to_meter.constprop.8>
 8008f70:	2100      	movs	r1, #0
 8008f72:	f008 fab5 	bl	80114e0 <__aeabi_fcmplt>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d000      	beq.n	8008f7c <initialize.lto_priv.147+0x2b4>
 8008f7a:	e090      	b.n	800909e <initialize.lto_priv.147+0x3d6>
 8008f7c:	21fe      	movs	r1, #254	; 0xfe
 8008f7e:	0589      	lsls	r1, r1, #22
 8008f80:	1c28      	adds	r0, r5, #0
 8008f82:	f007 fdb5 	bl	8010af0 <__aeabi_fmul>
 8008f86:	49b9      	ldr	r1, [pc, #740]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8008f88:	f007 fb06 	bl	8010598 <__aeabi_fadd>
 8008f8c:	1c05      	adds	r5, r0, #0
 8008f8e:	0038      	movs	r0, r7
 8008f90:	f004 f8f0 	bl	800d174 <points_to_meter.constprop.8>
 8008f94:	4681      	mov	r9, r0
 8008f96:	0038      	movs	r0, r7
 8008f98:	f004 f8ec 	bl	800d174 <points_to_meter.constprop.8>
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	f008 fa9f 	bl	80114e0 <__aeabi_fcmplt>
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d17d      	bne.n	80090a2 <initialize.lto_priv.147+0x3da>
 8008fa6:	21fe      	movs	r1, #254	; 0xfe
 8008fa8:	0589      	lsls	r1, r1, #22
 8008faa:	4648      	mov	r0, r9
 8008fac:	f007 fda0 	bl	8010af0 <__aeabi_fmul>
 8008fb0:	49ae      	ldr	r1, [pc, #696]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8008fb2:	f007 faf1 	bl	8010598 <__aeabi_fadd>
 8008fb6:	f008 fadb 	bl	8011570 <__aeabi_f2uiz>
 8008fba:	f008 fcf9 	bl	80119b0 <__aeabi_ui2f>
 8008fbe:	1c01      	adds	r1, r0, #0
 8008fc0:	1c28      	adds	r0, r5, #0
 8008fc2:	f007 fec7 	bl	8010d54 <__aeabi_fsub>
 8008fc6:	49aa      	ldr	r1, [pc, #680]	; (8009270 <initialize.lto_priv.147+0x5a8>)
 8008fc8:	f007 fd92 	bl	8010af0 <__aeabi_fmul>
 8008fcc:	f008 fad0 	bl	8011570 <__aeabi_f2uiz>
 8008fd0:	0007      	movs	r7, r0
 8008fd2:	48a2      	ldr	r0, [pc, #648]	; (800925c <initialize.lto_priv.147+0x594>)
 8008fd4:	f004 f8ce 	bl	800d174 <points_to_meter.constprop.8>
 8008fd8:	2100      	movs	r1, #0
 8008fda:	f008 fa81 	bl	80114e0 <__aeabi_fcmplt>
 8008fde:	4da1      	ldr	r5, [pc, #644]	; (8009264 <initialize.lto_priv.147+0x59c>)
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d100      	bne.n	8008fe6 <initialize.lto_priv.147+0x31e>
 8008fe4:	4da0      	ldr	r5, [pc, #640]	; (8009268 <initialize.lto_priv.147+0x5a0>)
 8008fe6:	489d      	ldr	r0, [pc, #628]	; (800925c <initialize.lto_priv.147+0x594>)
 8008fe8:	f004 f8c4 	bl	800d174 <points_to_meter.constprop.8>
 8008fec:	4681      	mov	r9, r0
 8008fee:	489b      	ldr	r0, [pc, #620]	; (800925c <initialize.lto_priv.147+0x594>)
 8008ff0:	f004 f8c0 	bl	800d174 <points_to_meter.constprop.8>
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	f008 fa73 	bl	80114e0 <__aeabi_fcmplt>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d153      	bne.n	80090a6 <initialize.lto_priv.147+0x3de>
 8008ffe:	21fe      	movs	r1, #254	; 0xfe
 8009000:	0589      	lsls	r1, r1, #22
 8009002:	4648      	mov	r0, r9
 8009004:	f007 fd74 	bl	8010af0 <__aeabi_fmul>
 8009008:	4998      	ldr	r1, [pc, #608]	; (800926c <initialize.lto_priv.147+0x5a4>)
 800900a:	f007 fac5 	bl	8010598 <__aeabi_fadd>
 800900e:	f008 faaf 	bl	8011570 <__aeabi_f2uiz>
 8009012:	4681      	mov	r9, r0
 8009014:	4891      	ldr	r0, [pc, #580]	; (800925c <initialize.lto_priv.147+0x594>)
 8009016:	f004 f8ad 	bl	800d174 <points_to_meter.constprop.8>
 800901a:	4682      	mov	sl, r0
 800901c:	488f      	ldr	r0, [pc, #572]	; (800925c <initialize.lto_priv.147+0x594>)
 800901e:	f004 f8a9 	bl	800d174 <points_to_meter.constprop.8>
 8009022:	2100      	movs	r1, #0
 8009024:	f008 fa5c 	bl	80114e0 <__aeabi_fcmplt>
 8009028:	2800      	cmp	r0, #0
 800902a:	d13e      	bne.n	80090aa <initialize.lto_priv.147+0x3e2>
 800902c:	21fe      	movs	r1, #254	; 0xfe
 800902e:	0589      	lsls	r1, r1, #22
 8009030:	4650      	mov	r0, sl
 8009032:	f007 fd5d 	bl	8010af0 <__aeabi_fmul>
 8009036:	498d      	ldr	r1, [pc, #564]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8009038:	f007 faae 	bl	8010598 <__aeabi_fadd>
 800903c:	4682      	mov	sl, r0
 800903e:	4887      	ldr	r0, [pc, #540]	; (800925c <initialize.lto_priv.147+0x594>)
 8009040:	f004 f898 	bl	800d174 <points_to_meter.constprop.8>
 8009044:	4683      	mov	fp, r0
 8009046:	4885      	ldr	r0, [pc, #532]	; (800925c <initialize.lto_priv.147+0x594>)
 8009048:	f004 f894 	bl	800d174 <points_to_meter.constprop.8>
 800904c:	2100      	movs	r1, #0
 800904e:	f008 fa47 	bl	80114e0 <__aeabi_fcmplt>
 8009052:	2800      	cmp	r0, #0
 8009054:	d12b      	bne.n	80090ae <initialize.lto_priv.147+0x3e6>
 8009056:	21fe      	movs	r1, #254	; 0xfe
 8009058:	0589      	lsls	r1, r1, #22
 800905a:	4658      	mov	r0, fp
 800905c:	f007 fd48 	bl	8010af0 <__aeabi_fmul>
 8009060:	4982      	ldr	r1, [pc, #520]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8009062:	f007 fa99 	bl	8010598 <__aeabi_fadd>
 8009066:	f008 fa83 	bl	8011570 <__aeabi_f2uiz>
 800906a:	f008 fca1 	bl	80119b0 <__aeabi_ui2f>
 800906e:	1c01      	adds	r1, r0, #0
 8009070:	4650      	mov	r0, sl
 8009072:	f007 fe6f 	bl	8010d54 <__aeabi_fsub>
 8009076:	497e      	ldr	r1, [pc, #504]	; (8009270 <initialize.lto_priv.147+0x5a8>)
 8009078:	f007 fd3a 	bl	8010af0 <__aeabi_fmul>
 800907c:	f008 fa78 	bl	8011570 <__aeabi_f2uiz>
 8009080:	464b      	mov	r3, r9
 8009082:	9303      	str	r3, [sp, #12]
 8009084:	4643      	mov	r3, r8
 8009086:	9004      	str	r0, [sp, #16]
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	9502      	str	r5, [sp, #8]
 800908c:	9701      	str	r7, [sp, #4]
 800908e:	0023      	movs	r3, r4
 8009090:	4a78      	ldr	r2, [pc, #480]	; (8009274 <initialize.lto_priv.147+0x5ac>)
 8009092:	4979      	ldr	r1, [pc, #484]	; (8009278 <initialize.lto_priv.147+0x5b0>)
 8009094:	2000      	movs	r0, #0
 8009096:	47b0      	blx	r6
 8009098:	e6c2      	b.n	8008e20 <initialize.lto_priv.147+0x158>
 800909a:	4978      	ldr	r1, [pc, #480]	; (800927c <initialize.lto_priv.147+0x5b4>)
 800909c:	e758      	b.n	8008f50 <initialize.lto_priv.147+0x288>
 800909e:	4977      	ldr	r1, [pc, #476]	; (800927c <initialize.lto_priv.147+0x5b4>)
 80090a0:	e76e      	b.n	8008f80 <initialize.lto_priv.147+0x2b8>
 80090a2:	4976      	ldr	r1, [pc, #472]	; (800927c <initialize.lto_priv.147+0x5b4>)
 80090a4:	e781      	b.n	8008faa <initialize.lto_priv.147+0x2e2>
 80090a6:	4975      	ldr	r1, [pc, #468]	; (800927c <initialize.lto_priv.147+0x5b4>)
 80090a8:	e7ab      	b.n	8009002 <initialize.lto_priv.147+0x33a>
 80090aa:	4974      	ldr	r1, [pc, #464]	; (800927c <initialize.lto_priv.147+0x5b4>)
 80090ac:	e7c0      	b.n	8009030 <initialize.lto_priv.147+0x368>
 80090ae:	4973      	ldr	r1, [pc, #460]	; (800927c <initialize.lto_priv.147+0x5b4>)
 80090b0:	e7d3      	b.n	800905a <initialize.lto_priv.147+0x392>
 80090b2:	237c      	movs	r3, #124	; 0x7c
 80090b4:	0164      	lsls	r4, r4, #5
 80090b6:	3c4b      	subs	r4, #75	; 0x4b
 80090b8:	435c      	muls	r4, r3
 80090ba:	4544      	cmp	r4, r8
 80090bc:	db00      	blt.n	80090c0 <initialize.lto_priv.147+0x3f8>
 80090be:	e0e1      	b.n	8009284 <initialize.lto_priv.147+0x5bc>
 80090c0:	4b67      	ldr	r3, [pc, #412]	; (8009260 <initialize.lto_priv.147+0x598>)
 80090c2:	4640      	mov	r0, r8
 80090c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c6:	9306      	str	r3, [sp, #24]
 80090c8:	f004 f854 	bl	800d174 <points_to_meter.constprop.8>
 80090cc:	2100      	movs	r1, #0
 80090ce:	f008 fa07 	bl	80114e0 <__aeabi_fcmplt>
 80090d2:	4d64      	ldr	r5, [pc, #400]	; (8009264 <initialize.lto_priv.147+0x59c>)
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d100      	bne.n	80090da <initialize.lto_priv.147+0x412>
 80090d8:	4d63      	ldr	r5, [pc, #396]	; (8009268 <initialize.lto_priv.147+0x5a0>)
 80090da:	4640      	mov	r0, r8
 80090dc:	f004 f84a 	bl	800d174 <points_to_meter.constprop.8>
 80090e0:	1c06      	adds	r6, r0, #0
 80090e2:	4640      	mov	r0, r8
 80090e4:	f004 f846 	bl	800d174 <points_to_meter.constprop.8>
 80090e8:	2100      	movs	r1, #0
 80090ea:	f008 f9f9 	bl	80114e0 <__aeabi_fcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d000      	beq.n	80090f4 <initialize.lto_priv.147+0x42c>
 80090f2:	e0a7      	b.n	8009244 <initialize.lto_priv.147+0x57c>
 80090f4:	21fe      	movs	r1, #254	; 0xfe
 80090f6:	0589      	lsls	r1, r1, #22
 80090f8:	1c30      	adds	r0, r6, #0
 80090fa:	f007 fcf9 	bl	8010af0 <__aeabi_fmul>
 80090fe:	495b      	ldr	r1, [pc, #364]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8009100:	f007 fa4a 	bl	8010598 <__aeabi_fadd>
 8009104:	f008 fa34 	bl	8011570 <__aeabi_f2uiz>
 8009108:	0007      	movs	r7, r0
 800910a:	4640      	mov	r0, r8
 800910c:	f004 f832 	bl	800d174 <points_to_meter.constprop.8>
 8009110:	1c06      	adds	r6, r0, #0
 8009112:	4640      	mov	r0, r8
 8009114:	f004 f82e 	bl	800d174 <points_to_meter.constprop.8>
 8009118:	2100      	movs	r1, #0
 800911a:	f008 f9e1 	bl	80114e0 <__aeabi_fcmplt>
 800911e:	2800      	cmp	r0, #0
 8009120:	d000      	beq.n	8009124 <initialize.lto_priv.147+0x45c>
 8009122:	e091      	b.n	8009248 <initialize.lto_priv.147+0x580>
 8009124:	21fe      	movs	r1, #254	; 0xfe
 8009126:	0589      	lsls	r1, r1, #22
 8009128:	1c30      	adds	r0, r6, #0
 800912a:	f007 fce1 	bl	8010af0 <__aeabi_fmul>
 800912e:	494f      	ldr	r1, [pc, #316]	; (800926c <initialize.lto_priv.147+0x5a4>)
 8009130:	f007 fa32 	bl	8010598 <__aeabi_fadd>
 8009134:	1c06      	adds	r6, r0, #0
 8009136:	4640      	mov	r0, r8
 8009138:	f004 f81c 	bl	800d174 <points_to_meter.constprop.8>
 800913c:	4681      	mov	r9, r0
 800913e:	4640      	mov	r0, r8
 8009140:	f004 f818 	bl	800d174 <points_to_meter.constprop.8>
 8009144:	2100      	movs	r1, #0
 8009146:	f008 f9cb 	bl	80114e0 <__aeabi_fcmplt>
 800914a:	2800      	cmp	r0, #0
 800914c:	d17e      	bne.n	800924c <initialize.lto_priv.147+0x584>
 800914e:	21fe      	movs	r1, #254	; 0xfe
 8009150:	0589      	lsls	r1, r1, #22
 8009152:	4648      	mov	r0, r9
 8009154:	f007 fccc 	bl	8010af0 <__aeabi_fmul>
 8009158:	4944      	ldr	r1, [pc, #272]	; (800926c <initialize.lto_priv.147+0x5a4>)
 800915a:	f007 fa1d 	bl	8010598 <__aeabi_fadd>
 800915e:	f008 fa07 	bl	8011570 <__aeabi_f2uiz>
 8009162:	f008 fc25 	bl	80119b0 <__aeabi_ui2f>
 8009166:	1c01      	adds	r1, r0, #0
 8009168:	1c30      	adds	r0, r6, #0
 800916a:	f007 fdf3 	bl	8010d54 <__aeabi_fsub>
 800916e:	4940      	ldr	r1, [pc, #256]	; (8009270 <initialize.lto_priv.147+0x5a8>)
 8009170:	f007 fcbe 	bl	8010af0 <__aeabi_fmul>
 8009174:	f008 f9fc 	bl	8011570 <__aeabi_f2uiz>
 8009178:	4680      	mov	r8, r0
 800917a:	0020      	movs	r0, r4
 800917c:	f003 fffa 	bl	800d174 <points_to_meter.constprop.8>
 8009180:	2100      	movs	r1, #0
 8009182:	f008 f9ad 	bl	80114e0 <__aeabi_fcmplt>
 8009186:	4e37      	ldr	r6, [pc, #220]	; (8009264 <initialize.lto_priv.147+0x59c>)
 8009188:	2800      	cmp	r0, #0
 800918a:	d100      	bne.n	800918e <initialize.lto_priv.147+0x4c6>
 800918c:	4e36      	ldr	r6, [pc, #216]	; (8009268 <initialize.lto_priv.147+0x5a0>)
 800918e:	0020      	movs	r0, r4
 8009190:	f003 fff0 	bl	800d174 <points_to_meter.constprop.8>
 8009194:	4681      	mov	r9, r0
 8009196:	0020      	movs	r0, r4
 8009198:	f003 ffec 	bl	800d174 <points_to_meter.constprop.8>
 800919c:	2100      	movs	r1, #0
 800919e:	f008 f99f 	bl	80114e0 <__aeabi_fcmplt>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d154      	bne.n	8009250 <initialize.lto_priv.147+0x588>
 80091a6:	21fe      	movs	r1, #254	; 0xfe
 80091a8:	0589      	lsls	r1, r1, #22
 80091aa:	4648      	mov	r0, r9
 80091ac:	f007 fca0 	bl	8010af0 <__aeabi_fmul>
 80091b0:	492e      	ldr	r1, [pc, #184]	; (800926c <initialize.lto_priv.147+0x5a4>)
 80091b2:	f007 f9f1 	bl	8010598 <__aeabi_fadd>
 80091b6:	f008 f9db 	bl	8011570 <__aeabi_f2uiz>
 80091ba:	4681      	mov	r9, r0
 80091bc:	0020      	movs	r0, r4
 80091be:	f003 ffd9 	bl	800d174 <points_to_meter.constprop.8>
 80091c2:	4682      	mov	sl, r0
 80091c4:	0020      	movs	r0, r4
 80091c6:	f003 ffd5 	bl	800d174 <points_to_meter.constprop.8>
 80091ca:	2100      	movs	r1, #0
 80091cc:	f008 f988 	bl	80114e0 <__aeabi_fcmplt>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d13f      	bne.n	8009254 <initialize.lto_priv.147+0x58c>
 80091d4:	21fe      	movs	r1, #254	; 0xfe
 80091d6:	0589      	lsls	r1, r1, #22
 80091d8:	4650      	mov	r0, sl
 80091da:	f007 fc89 	bl	8010af0 <__aeabi_fmul>
 80091de:	4923      	ldr	r1, [pc, #140]	; (800926c <initialize.lto_priv.147+0x5a4>)
 80091e0:	f007 f9da 	bl	8010598 <__aeabi_fadd>
 80091e4:	4682      	mov	sl, r0
 80091e6:	0020      	movs	r0, r4
 80091e8:	f003 ffc4 	bl	800d174 <points_to_meter.constprop.8>
 80091ec:	4683      	mov	fp, r0
 80091ee:	0020      	movs	r0, r4
 80091f0:	f003 ffc0 	bl	800d174 <points_to_meter.constprop.8>
 80091f4:	2100      	movs	r1, #0
 80091f6:	f008 f973 	bl	80114e0 <__aeabi_fcmplt>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d12c      	bne.n	8009258 <initialize.lto_priv.147+0x590>
 80091fe:	21fe      	movs	r1, #254	; 0xfe
 8009200:	0589      	lsls	r1, r1, #22
 8009202:	4658      	mov	r0, fp
 8009204:	f007 fc74 	bl	8010af0 <__aeabi_fmul>
 8009208:	4918      	ldr	r1, [pc, #96]	; (800926c <initialize.lto_priv.147+0x5a4>)
 800920a:	f007 f9c5 	bl	8010598 <__aeabi_fadd>
 800920e:	f008 f9af 	bl	8011570 <__aeabi_f2uiz>
 8009212:	f008 fbcd 	bl	80119b0 <__aeabi_ui2f>
 8009216:	1c01      	adds	r1, r0, #0
 8009218:	4650      	mov	r0, sl
 800921a:	f007 fd9b 	bl	8010d54 <__aeabi_fsub>
 800921e:	4914      	ldr	r1, [pc, #80]	; (8009270 <initialize.lto_priv.147+0x5a8>)
 8009220:	f007 fc66 	bl	8010af0 <__aeabi_fmul>
 8009224:	f008 f9a4 	bl	8011570 <__aeabi_f2uiz>
 8009228:	464b      	mov	r3, r9
 800922a:	9303      	str	r3, [sp, #12]
 800922c:	4643      	mov	r3, r8
 800922e:	9004      	str	r0, [sp, #16]
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	9602      	str	r6, [sp, #8]
 8009234:	9700      	str	r7, [sp, #0]
 8009236:	002b      	movs	r3, r5
 8009238:	4a11      	ldr	r2, [pc, #68]	; (8009280 <initialize.lto_priv.147+0x5b8>)
 800923a:	490f      	ldr	r1, [pc, #60]	; (8009278 <initialize.lto_priv.147+0x5b0>)
 800923c:	2000      	movs	r0, #0
 800923e:	9c06      	ldr	r4, [sp, #24]
 8009240:	47a0      	blx	r4
 8009242:	e5ed      	b.n	8008e20 <initialize.lto_priv.147+0x158>
 8009244:	490d      	ldr	r1, [pc, #52]	; (800927c <initialize.lto_priv.147+0x5b4>)
 8009246:	e757      	b.n	80090f8 <initialize.lto_priv.147+0x430>
 8009248:	490c      	ldr	r1, [pc, #48]	; (800927c <initialize.lto_priv.147+0x5b4>)
 800924a:	e76d      	b.n	8009128 <initialize.lto_priv.147+0x460>
 800924c:	490b      	ldr	r1, [pc, #44]	; (800927c <initialize.lto_priv.147+0x5b4>)
 800924e:	e780      	b.n	8009152 <initialize.lto_priv.147+0x48a>
 8009250:	490a      	ldr	r1, [pc, #40]	; (800927c <initialize.lto_priv.147+0x5b4>)
 8009252:	e7aa      	b.n	80091aa <initialize.lto_priv.147+0x4e2>
 8009254:	4909      	ldr	r1, [pc, #36]	; (800927c <initialize.lto_priv.147+0x5b4>)
 8009256:	e7bf      	b.n	80091d8 <initialize.lto_priv.147+0x510>
 8009258:	4908      	ldr	r1, [pc, #32]	; (800927c <initialize.lto_priv.147+0x5b4>)
 800925a:	e7d2      	b.n	8009202 <initialize.lto_priv.147+0x53a>
 800925c:	fffffa30 	.word	0xfffffa30
 8009260:	200005d8 	.word	0x200005d8
 8009264:	0801ee30 	.word	0x0801ee30
 8009268:	0801e847 	.word	0x0801e847
 800926c:	350637bd 	.word	0x350637bd
 8009270:	49742400 	.word	0x49742400
 8009274:	0801dd84 	.word	0x0801dd84
 8009278:	0801e5e1 	.word	0x0801e5e1
 800927c:	bf800000 	.word	0xbf800000
 8009280:	0801ddc1 	.word	0x0801ddc1
 8009284:	0030      	movs	r0, r6
 8009286:	f7f7 fcd5 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800928a:	0033      	movs	r3, r6
 800928c:	332e      	adds	r3, #46	; 0x2e
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	4682      	mov	sl, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d049      	beq.n	800932a <initialize.lto_priv.147+0x662>
 8009296:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8009298:	466a      	mov	r2, sp
 800929a:	8c12      	ldrh	r2, [r2, #32]
 800929c:	0ffc      	lsrs	r4, r7, #31
 800929e:	9207      	str	r2, [sp, #28]
 80092a0:	464a      	mov	r2, r9
 80092a2:	19e0      	adds	r0, r4, r7
 80092a4:	8093      	strh	r3, [r2, #4]
 80092a6:	217c      	movs	r1, #124	; 0x7c
 80092a8:	f007 ffde 	bl	8011268 <__divsi3>
 80092ac:	464b      	mov	r3, r9
 80092ae:	1b04      	subs	r4, r0, r4
 80092b0:	811c      	strh	r4, [r3, #8]
 80092b2:	4643      	mov	r3, r8
 80092b4:	0fdb      	lsrs	r3, r3, #31
 80092b6:	9309      	str	r3, [sp, #36]	; 0x24
 80092b8:	4443      	add	r3, r8
 80092ba:	0018      	movs	r0, r3
 80092bc:	217c      	movs	r1, #124	; 0x7c
 80092be:	f007 ffd3 	bl	8011268 <__divsi3>
 80092c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c4:	4651      	mov	r1, sl
 80092c6:	1ac0      	subs	r0, r0, r3
 80092c8:	464b      	mov	r3, r9
 80092ca:	3001      	adds	r0, #1
 80092cc:	1b04      	subs	r4, r0, r4
 80092ce:	b2a4      	uxth	r4, r4
 80092d0:	815c      	strh	r4, [r3, #10]
 80092d2:	0038      	movs	r0, r7
 80092d4:	f008 f8ae 	bl	8011434 <__aeabi_idivmod>
 80092d8:	4451      	add	r1, sl
 80092da:	0008      	movs	r0, r1
 80092dc:	4651      	mov	r1, sl
 80092de:	f008 f8a9 	bl	8011434 <__aeabi_idivmod>
 80092e2:	464b      	mov	r3, r9
 80092e4:	0020      	movs	r0, r4
 80092e6:	80d9      	strh	r1, [r3, #6]
 80092e8:	9907      	ldr	r1, [sp, #28]
 80092ea:	f007 ffb9 	bl	8011260 <__aeabi_uidivmod>
 80092ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80092f0:	b280      	uxth	r0, r0
 80092f2:	2900      	cmp	r1, #0
 80092f4:	d11d      	bne.n	8009332 <initialize.lto_priv.147+0x66a>
 80092f6:	464b      	mov	r3, r9
 80092f8:	8198      	strh	r0, [r3, #12]
 80092fa:	0030      	movs	r0, r6
 80092fc:	f7f7 fd39 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 8009300:	0004      	movs	r4, r0
 8009302:	0030      	movs	r0, r6
 8009304:	f7f7 fcf6 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 8009308:	2c04      	cmp	r4, #4
 800930a:	d001      	beq.n	8009310 <initialize.lto_priv.147+0x648>
 800930c:	2801      	cmp	r0, #1
 800930e:	d012      	beq.n	8009336 <initialize.lto_priv.147+0x66e>
 8009310:	464b      	mov	r3, r9
 8009312:	9a07      	ldr	r2, [sp, #28]
 8009314:	895b      	ldrh	r3, [r3, #10]
 8009316:	429a      	cmp	r2, r3
 8009318:	d20d      	bcs.n	8009336 <initialize.lto_priv.147+0x66e>
 800931a:	4bd0      	ldr	r3, [pc, #832]	; (800965c <initialize.lto_priv.147+0x994>)
 800931c:	2000      	movs	r0, #0
 800931e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009320:	4acf      	ldr	r2, [pc, #828]	; (8009660 <initialize.lto_priv.147+0x998>)
 8009322:	49d0      	ldr	r1, [pc, #832]	; (8009664 <initialize.lto_priv.147+0x99c>)
 8009324:	4798      	blx	r3
 8009326:	2000      	movs	r0, #0
 8009328:	e4e9      	b.n	8008cfe <initialize.lto_priv.147+0x36>
 800932a:	0033      	movs	r3, r6
 800932c:	3332      	adds	r3, #50	; 0x32
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	e7b2      	b.n	8009298 <initialize.lto_priv.147+0x5d0>
 8009332:	3001      	adds	r0, #1
 8009334:	e7df      	b.n	80092f6 <initialize.lto_priv.147+0x62e>
 8009336:	f003 ff01 	bl	800d13c <get_dt.constprop.9>
 800933a:	1c04      	adds	r4, r0, #0
 800933c:	4650      	mov	r0, sl
 800933e:	f008 fb37 	bl	80119b0 <__aeabi_ui2f>
 8009342:	1c21      	adds	r1, r4, #0
 8009344:	f007 fbd4 	bl	8010af0 <__aeabi_fmul>
 8009348:	465b      	mov	r3, fp
 800934a:	60d8      	str	r0, [r3, #12]
 800934c:	0038      	movs	r0, r7
 800934e:	f003 ff11 	bl	800d174 <points_to_meter.constprop.8>
 8009352:	465b      	mov	r3, fp
 8009354:	6018      	str	r0, [r3, #0]
 8009356:	4640      	mov	r0, r8
 8009358:	f003 ff0c 	bl	800d174 <points_to_meter.constprop.8>
 800935c:	465b      	mov	r3, fp
 800935e:	6819      	ldr	r1, [r3, #0]
 8009360:	6098      	str	r0, [r3, #8]
 8009362:	f007 fcf7 	bl	8010d54 <__aeabi_fsub>
 8009366:	465b      	mov	r3, fp
 8009368:	6058      	str	r0, [r3, #4]
 800936a:	4643      	mov	r3, r8
 800936c:	4651      	mov	r1, sl
 800936e:	1bd8      	subs	r0, r3, r7
 8009370:	f007 ff7a 	bl	8011268 <__divsi3>
 8009374:	3001      	adds	r0, #1
 8009376:	b283      	uxth	r3, r0
 8009378:	9309      	str	r3, [sp, #36]	; 0x24
 800937a:	465b      	mov	r3, fp
 800937c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800937e:	4651      	mov	r1, sl
 8009380:	82da      	strh	r2, [r3, #22]
 8009382:	464b      	mov	r3, r9
 8009384:	899b      	ldrh	r3, [r3, #12]
 8009386:	930a      	str	r3, [sp, #40]	; 0x28
 8009388:	465b      	mov	r3, fp
 800938a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800938c:	831a      	strh	r2, [r3, #24]
 800938e:	464b      	mov	r3, r9
 8009390:	895c      	ldrh	r4, [r3, #10]
 8009392:	237c      	movs	r3, #124	; 0x7c
 8009394:	0018      	movs	r0, r3
 8009396:	4360      	muls	r0, r4
 8009398:	4698      	mov	r8, r3
 800939a:	f007 fedb 	bl	8011154 <__udivsi3>
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	4641      	mov	r1, r8
 80093a2:	8018      	strh	r0, [r3, #0]
 80093a4:	811c      	strh	r4, [r3, #8]
 80093a6:	0038      	movs	r0, r7
 80093a8:	f008 f844 	bl	8011434 <__aeabi_idivmod>
 80093ac:	4441      	add	r1, r8
 80093ae:	0008      	movs	r0, r1
 80093b0:	4641      	mov	r1, r8
 80093b2:	f008 f83f 	bl	8011434 <__aeabi_idivmod>
 80093b6:	0008      	movs	r0, r1
 80093b8:	4651      	mov	r1, sl
 80093ba:	f007 ff55 	bl	8011268 <__divsi3>
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c2:	8058      	strh	r0, [r3, #2]
 80093c4:	809a      	strh	r2, [r3, #4]
 80093c6:	4651      	mov	r1, sl
 80093c8:	4640      	mov	r0, r8
 80093ca:	f007 fec3 	bl	8011154 <__udivsi3>
 80093ce:	9b06      	ldr	r3, [sp, #24]
 80093d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093d2:	80d8      	strh	r0, [r3, #6]
 80093d4:	821a      	strh	r2, [r3, #16]
 80093d6:	9b07      	ldr	r3, [sp, #28]
 80093d8:	42a3      	cmp	r3, r4
 80093da:	d228      	bcs.n	800942e <initialize.lto_priv.147+0x766>
 80093dc:	466b      	mov	r3, sp
 80093de:	8c19      	ldrh	r1, [r3, #32]
 80093e0:	9b06      	ldr	r3, [sp, #24]
 80093e2:	8299      	strh	r1, [r3, #20]
 80093e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <initialize.lto_priv.147+0x72c>
 80093ea:	9907      	ldr	r1, [sp, #28]
 80093ec:	0020      	movs	r0, r4
 80093ee:	f007 ff37 	bl	8011260 <__aeabi_uidivmod>
 80093f2:	b289      	uxth	r1, r1
 80093f4:	9b06      	ldr	r3, [sp, #24]
 80093f6:	82d9      	strh	r1, [r3, #22]
 80093f8:	0030      	movs	r0, r6
 80093fa:	f7f7 fbe5 	bl	8000bc8 <configuration_is_valid>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d019      	beq.n	8009436 <initialize.lto_priv.147+0x76e>
 8009402:	0033      	movs	r3, r6
 8009404:	3346      	adds	r3, #70	; 0x46
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d014      	beq.n	8009436 <initialize.lto_priv.147+0x76e>
 800940c:	2301      	movs	r3, #1
 800940e:	64ab      	str	r3, [r5, #72]	; 0x48
 8009410:	2300      	movs	r3, #0
 8009412:	64eb      	str	r3, [r5, #76]	; 0x4c
 8009414:	2400      	movs	r4, #0
 8009416:	0030      	movs	r0, r6
 8009418:	652c      	str	r4, [r5, #80]	; 0x50
 800941a:	f7f7 fc6b 	bl	8000cf4 <acc_base_configuration_repetition_mode_get>
 800941e:	0023      	movs	r3, r4
 8009420:	ac10      	add	r4, sp, #64	; 0x40
 8009422:	2803      	cmp	r0, #3
 8009424:	d810      	bhi.n	8009448 <initialize.lto_priv.147+0x780>
 8009426:	f007 fe81 	bl	801112c <__gnu_thumb1_case_uqi>
 800942a:	1d0b      	.short	0x1d0b
 800942c:	3323      	.short	0x3323
 800942e:	9b06      	ldr	r3, [sp, #24]
 8009430:	829c      	strh	r4, [r3, #20]
 8009432:	82dc      	strh	r4, [r3, #22]
 8009434:	e7e0      	b.n	80093f8 <initialize.lto_priv.147+0x730>
 8009436:	2300      	movs	r3, #0
 8009438:	64ab      	str	r3, [r5, #72]	; 0x48
 800943a:	3301      	adds	r3, #1
 800943c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800943e:	e7e9      	b.n	8009414 <initialize.lto_priv.147+0x74c>
 8009440:	656b      	str	r3, [r5, #84]	; 0x54
 8009442:	65ab      	str	r3, [r5, #88]	; 0x58
 8009444:	65eb      	str	r3, [r5, #92]	; 0x5c
 8009446:	662b      	str	r3, [r5, #96]	; 0x60
 8009448:	0030      	movs	r0, r6
 800944a:	f7f7 fc92 	bl	8000d72 <acc_base_configuration_power_save_mode_get>
 800944e:	2804      	cmp	r0, #4
 8009450:	d82a      	bhi.n	80094a8 <initialize.lto_priv.147+0x7e0>
 8009452:	2300      	movs	r3, #0
 8009454:	2201      	movs	r2, #1
 8009456:	f007 fe73 	bl	8011140 <__gnu_thumb1_case_uhi>
 800945a:	0025      	.short	0x0025
 800945c:	00f70025 	.word	0x00f70025
 8009460:	002500fa 	.word	0x002500fa
 8009464:	2201      	movs	r2, #1
 8009466:	656b      	str	r3, [r5, #84]	; 0x54
 8009468:	65aa      	str	r2, [r5, #88]	; 0x58
 800946a:	65eb      	str	r3, [r5, #92]	; 0x5c
 800946c:	662b      	str	r3, [r5, #96]	; 0x60
 800946e:	e7eb      	b.n	8009448 <initialize.lto_priv.147+0x780>
 8009470:	0030      	movs	r0, r6
 8009472:	f7f7 fc29 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8009476:	aa0f      	add	r2, sp, #60	; 0x3c
 8009478:	0021      	movs	r1, r4
 800947a:	f7fd fb03 	bl	8006a84 <acc_radar_engine_common_frequency_to_main_clk>
 800947e:	2301      	movs	r3, #1
 8009480:	656b      	str	r3, [r5, #84]	; 0x54
 8009482:	2300      	movs	r3, #0
 8009484:	65ab      	str	r3, [r5, #88]	; 0x58
 8009486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009488:	65eb      	str	r3, [r5, #92]	; 0x5c
 800948a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800948c:	662b      	str	r3, [r5, #96]	; 0x60
 800948e:	e7db      	b.n	8009448 <initialize.lto_priv.147+0x780>
 8009490:	0030      	movs	r0, r6
 8009492:	f7f7 fc19 	bl	8000cc8 <acc_base_configuration_update_rate_get>
 8009496:	aa0f      	add	r2, sp, #60	; 0x3c
 8009498:	0021      	movs	r1, r4
 800949a:	f7fd faf3 	bl	8006a84 <acc_radar_engine_common_frequency_to_main_clk>
 800949e:	2301      	movs	r3, #1
 80094a0:	656b      	str	r3, [r5, #84]	; 0x54
 80094a2:	e7ef      	b.n	8009484 <initialize.lto_priv.147+0x7bc>
 80094a4:	666a      	str	r2, [r5, #100]	; 0x64
 80094a6:	66aa      	str	r2, [r5, #104]	; 0x68
 80094a8:	0030      	movs	r0, r6
 80094aa:	f7f7 fb8d 	bl	8000bc8 <configuration_is_valid>
 80094ae:	2300      	movs	r3, #0
 80094b0:	0007      	movs	r7, r0
 80094b2:	4298      	cmp	r0, r3
 80094b4:	d00b      	beq.n	80094ce <initialize.lto_priv.147+0x806>
 80094b6:	0033      	movs	r3, r6
 80094b8:	3350      	adds	r3, #80	; 0x50
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	930d      	str	r3, [sp, #52]	; 0x34
 80094be:	0033      	movs	r3, r6
 80094c0:	3352      	adds	r3, #82	; 0x52
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	930c      	str	r3, [sp, #48]	; 0x30
 80094c6:	0033      	movs	r3, r6
 80094c8:	334f      	adds	r3, #79	; 0x4f
 80094ca:	781f      	ldrb	r7, [r3, #0]
 80094cc:	003b      	movs	r3, r7
 80094ce:	002a      	movs	r2, r5
 80094d0:	32b4      	adds	r2, #180	; 0xb4
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	2f00      	cmp	r7, #0
 80094d6:	d002      	beq.n	80094de <initialize.lto_priv.147+0x816>
 80094d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094da:	3b01      	subs	r3, #1
 80094dc:	6053      	str	r3, [r2, #4]
 80094de:	0030      	movs	r0, r6
 80094e0:	f7f7 fc3e 	bl	8000d60 <acc_base_configuration_tx_disable_get>
 80094e4:	2301      	movs	r3, #1
 80094e6:	4698      	mov	r8, r3
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d103      	bne.n	80094f4 <initialize.lto_priv.147+0x82c>
 80094ec:	0003      	movs	r3, r0
 80094ee:	2f00      	cmp	r7, #0
 80094f0:	d000      	beq.n	80094f4 <initialize.lto_priv.147+0x82c>
 80094f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094f4:	4642      	mov	r2, r8
 80094f6:	439a      	bics	r2, r3
 80094f8:	66ea      	str	r2, [r5, #108]	; 0x6c
 80094fa:	0030      	movs	r0, r6
 80094fc:	f7f7 fc27 	bl	8000d4e <acc_base_configuration_decrease_tx_emission_get>
 8009500:	4643      	mov	r3, r8
 8009502:	4058      	eors	r0, r3
 8009504:	b2c0      	uxtb	r0, r0
 8009506:	676b      	str	r3, [r5, #116]	; 0x74
 8009508:	6728      	str	r0, [r5, #112]	; 0x70
 800950a:	0030      	movs	r0, r6
 800950c:	f7f7 fc14 	bl	8000d38 <acc_base_configuration_hw_accelerated_average_samples_get>
 8009510:	3801      	subs	r0, #1
 8009512:	67a8      	str	r0, [r5, #120]	; 0x78
 8009514:	0030      	movs	r0, r6
 8009516:	f7f7 fb57 	bl	8000bc8 <configuration_is_valid>
 800951a:	2300      	movs	r3, #0
 800951c:	4298      	cmp	r0, r3
 800951e:	d000      	beq.n	8009522 <initialize.lto_priv.147+0x85a>
 8009520:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8009522:	67eb      	str	r3, [r5, #124]	; 0x7c
 8009524:	0030      	movs	r0, r6
 8009526:	f7f7 fbc4 	bl	8000cb2 <acc_base_configuration_integrator_get>
 800952a:	1d2b      	adds	r3, r5, #4
 800952c:	67d8      	str	r0, [r3, #124]	; 0x7c
 800952e:	0030      	movs	r0, r6
 8009530:	f7f7 fb4a 	bl	8000bc8 <configuration_is_valid>
 8009534:	2300      	movs	r3, #0
 8009536:	4298      	cmp	r0, r3
 8009538:	d001      	beq.n	800953e <initialize.lto_priv.147+0x876>
 800953a:	1db3      	adds	r3, r6, #6
 800953c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953e:	002a      	movs	r2, r5
 8009540:	3b01      	subs	r3, #1
 8009542:	3208      	adds	r2, #8
 8009544:	67d3      	str	r3, [r2, #124]	; 0x7c
 8009546:	0030      	movs	r0, r6
 8009548:	f7f7 fb9e 	bl	8000c88 <acc_base_configuration_wg_duration_get>
 800954c:	002b      	movs	r3, r5
 800954e:	3388      	adds	r3, #136	; 0x88
 8009550:	6018      	str	r0, [r3, #0]
 8009552:	0030      	movs	r0, r6
 8009554:	f7f7 fb38 	bl	8000bc8 <configuration_is_valid>
 8009558:	2800      	cmp	r0, #0
 800955a:	d002      	beq.n	8009562 <initialize.lto_priv.147+0x89a>
 800955c:	0033      	movs	r3, r6
 800955e:	336d      	adds	r3, #109	; 0x6d
 8009560:	7818      	ldrb	r0, [r3, #0]
 8009562:	002b      	movs	r3, r5
 8009564:	338d      	adds	r3, #141	; 0x8d
 8009566:	7018      	strb	r0, [r3, #0]
 8009568:	0030      	movs	r0, r6
 800956a:	f7f7 fb63 	bl	8000c34 <acc_base_configuration_downsampling_factor_get>
 800956e:	002b      	movs	r3, r5
 8009570:	33a4      	adds	r3, #164	; 0xa4
 8009572:	6018      	str	r0, [r3, #0]
 8009574:	0030      	movs	r0, r6
 8009576:	f7f7 fb27 	bl	8000bc8 <configuration_is_valid>
 800957a:	2300      	movs	r3, #0
 800957c:	4298      	cmp	r0, r3
 800957e:	d002      	beq.n	8009586 <initialize.lto_priv.147+0x8be>
 8009580:	0033      	movs	r3, r6
 8009582:	336b      	adds	r3, #107	; 0x6b
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	002a      	movs	r2, r5
 8009588:	329c      	adds	r2, #156	; 0x9c
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	0030      	movs	r0, r6
 800958e:	f7f7 fb1b 	bl	8000bc8 <configuration_is_valid>
 8009592:	2300      	movs	r3, #0
 8009594:	4298      	cmp	r0, r3
 8009596:	d002      	beq.n	800959e <initialize.lto_priv.147+0x8d6>
 8009598:	0033      	movs	r3, r6
 800959a:	336c      	adds	r3, #108	; 0x6c
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	002a      	movs	r2, r5
 80095a0:	32a0      	adds	r2, #160	; 0xa0
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	0030      	movs	r0, r6
 80095a6:	f7f7 fb29 	bl	8000bfc <acc_base_configuration_asynchronous_measurement_get>
 80095aa:	2301      	movs	r3, #1
 80095ac:	002a      	movs	r2, r5
 80095ae:	4058      	eors	r0, r3
 80095b0:	32ac      	adds	r2, #172	; 0xac
 80095b2:	7053      	strb	r3, [r2, #1]
 80095b4:	7010      	strb	r0, [r2, #0]
 80095b6:	464a      	mov	r2, r9
 80095b8:	002b      	movs	r3, r5
 80095ba:	8892      	ldrh	r2, [r2, #4]
 80095bc:	3390      	adds	r3, #144	; 0x90
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	464b      	mov	r3, r9
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d945      	bls.n	8009654 <initialize.lto_priv.147+0x98c>
 80095c8:	464b      	mov	r3, r9
 80095ca:	6958      	ldr	r0, [r3, #20]
 80095cc:	f7fa fcbe 	bl	8003f4c <get_package_range_coarse_max>
 80095d0:	002b      	movs	r3, r5
 80095d2:	464a      	mov	r2, r9
 80095d4:	3394      	adds	r3, #148	; 0x94
 80095d6:	3801      	subs	r0, #1
 80095d8:	6018      	str	r0, [r3, #0]
 80095da:	2108      	movs	r1, #8
 80095dc:	5e52      	ldrsh	r2, [r2, r1]
 80095de:	605a      	str	r2, [r3, #4]
 80095e0:	464a      	mov	r2, r9
 80095e2:	88d2      	ldrh	r2, [r2, #6]
 80095e4:	615a      	str	r2, [r3, #20]
 80095e6:	f7fd fa45 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 80095ea:	002b      	movs	r3, r5
 80095ec:	33b0      	adds	r3, #176	; 0xb0
 80095ee:	6018      	str	r0, [r3, #0]
 80095f0:	23e1      	movs	r3, #225	; 0xe1
 80095f2:	465a      	mov	r2, fp
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	8293      	strh	r3, [r2, #20]
 80095f8:	002b      	movs	r3, r5
 80095fa:	33cc      	adds	r3, #204	; 0xcc
 80095fc:	8819      	ldrh	r1, [r3, #0]
 80095fe:	207c      	movs	r0, #124	; 0x7c
 8009600:	f007 fda8 	bl	8011154 <__udivsi3>
 8009604:	9b06      	ldr	r3, [sp, #24]
 8009606:	9a06      	ldr	r2, [sp, #24]
 8009608:	891b      	ldrh	r3, [r3, #8]
 800960a:	0021      	movs	r1, r4
 800960c:	4358      	muls	r0, r3
 800960e:	9b06      	ldr	r3, [sp, #24]
 8009610:	8158      	strh	r0, [r3, #10]
 8009612:	2300      	movs	r3, #0
 8009614:	0028      	movs	r0, r5
 8009616:	8313      	strh	r3, [r2, #24]
 8009618:	f006 ffa8 	bl	801056c <acc_cpd_linear_sweep_get_info>
 800961c:	4649      	mov	r1, r9
 800961e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009620:	0022      	movs	r2, r4
 8009622:	8023      	strh	r3, [r4, #0]
 8009624:	2013      	movs	r0, #19
 8009626:	2301      	movs	r3, #1
 8009628:	6809      	ldr	r1, [r1, #0]
 800962a:	f7f6 fd85 	bl	8000138 <acc_probes_execute_uint16>
 800962e:	35ce      	adds	r5, #206	; 0xce
 8009630:	8823      	ldrh	r3, [r4, #0]
 8009632:	882a      	ldrh	r2, [r5, #0]
 8009634:	3303      	adds	r3, #3
 8009636:	189b      	adds	r3, r3, r2
 8009638:	9a06      	ldr	r2, [sp, #24]
 800963a:	2001      	movs	r0, #1
 800963c:	81d3      	strh	r3, [r2, #14]
 800963e:	2396      	movs	r3, #150	; 0x96
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	8193      	strh	r3, [r2, #12]
 8009644:	f7ff fb5b 	bl	8008cfe <initialize.lto_priv.147+0x36>
 8009648:	666a      	str	r2, [r5, #100]	; 0x64
 800964a:	66ab      	str	r3, [r5, #104]	; 0x68
 800964c:	e72c      	b.n	80094a8 <initialize.lto_priv.147+0x7e0>
 800964e:	666b      	str	r3, [r5, #100]	; 0x64
 8009650:	66ab      	str	r3, [r5, #104]	; 0x68
 8009652:	e729      	b.n	80094a8 <initialize.lto_priv.147+0x7e0>
 8009654:	464b      	mov	r3, r9
 8009656:	8958      	ldrh	r0, [r3, #10]
 8009658:	e7ba      	b.n	80095d0 <initialize.lto_priv.147+0x908>
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	200005d8 	.word	0x200005d8
 8009660:	0801e601 	.word	0x0801e601
 8009664:	0801e5e1 	.word	0x0801e5e1

08009668 <acc_service_handle_valid>:
 8009668:	b510      	push	{r4, lr}
 800966a:	2800      	cmp	r0, #0
 800966c:	d004      	beq.n	8009678 <acc_service_handle_valid+0x10>
 800966e:	6802      	ldr	r2, [r0, #0]
 8009670:	4b05      	ldr	r3, [pc, #20]	; (8009688 <acc_service_handle_valid+0x20>)
 8009672:	2001      	movs	r0, #1
 8009674:	429a      	cmp	r2, r3
 8009676:	d006      	beq.n	8009686 <acc_service_handle_valid+0x1e>
 8009678:	4b04      	ldr	r3, [pc, #16]	; (800968c <acc_service_handle_valid+0x24>)
 800967a:	2000      	movs	r0, #0
 800967c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967e:	4a04      	ldr	r2, [pc, #16]	; (8009690 <acc_service_handle_valid+0x28>)
 8009680:	4904      	ldr	r1, [pc, #16]	; (8009694 <acc_service_handle_valid+0x2c>)
 8009682:	4798      	blx	r3
 8009684:	2000      	movs	r0, #0
 8009686:	bd10      	pop	{r4, pc}
 8009688:	acc09ee8 	.word	0xacc09ee8
 800968c:	200005d8 	.word	0x200005d8
 8009690:	0801e62c 	.word	0x0801e62c
 8009694:	0801dd1a 	.word	0x0801dd1a

08009698 <acc_service_deactivate>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	0005      	movs	r5, r0
 800969c:	f7ff ffe4 	bl	8009668 <acc_service_handle_valid>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d02b      	beq.n	80096fc <acc_service_deactivate+0x64>
 80096a4:	4c19      	ldr	r4, [pc, #100]	; (800970c <acc_service_deactivate+0x74>)
 80096a6:	7d66      	ldrb	r6, [r4, #21]
 80096a8:	2e00      	cmp	r6, #0
 80096aa:	d027      	beq.n	80096fc <acc_service_deactivate+0x64>
 80096ac:	7a6b      	ldrb	r3, [r5, #9]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d122      	bne.n	80096f8 <acc_service_deactivate+0x60>
 80096b2:	686a      	ldr	r2, [r5, #4]
 80096b4:	2a2a      	cmp	r2, #42	; 0x2a
 80096b6:	d821      	bhi.n	80096fc <acc_service_deactivate+0x64>
 80096b8:	1c63      	adds	r3, r4, #1
 80096ba:	0052      	lsls	r2, r2, #1
 80096bc:	189b      	adds	r3, r3, r2
 80096be:	7fdf      	ldrb	r7, [r3, #31]
 80096c0:	2f00      	cmp	r7, #0
 80096c2:	d11b      	bne.n	80096fc <acc_service_deactivate+0x64>
 80096c4:	2201      	movs	r2, #1
 80096c6:	77da      	strb	r2, [r3, #31]
 80096c8:	7eeb      	ldrb	r3, [r5, #27]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <acc_service_deactivate+0x3e>
 80096ce:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80096d0:	f7f7 f9c4 	bl	8000a5c <acc_rss_integration_sensor_device_power_off>
 80096d4:	76ef      	strb	r7, [r5, #27]
 80096d6:	686b      	ldr	r3, [r5, #4]
 80096d8:	2b2a      	cmp	r3, #42	; 0x2a
 80096da:	d804      	bhi.n	80096e6 <acc_service_deactivate+0x4e>
 80096dc:	0059      	lsls	r1, r3, #1
 80096de:	1ca2      	adds	r2, r4, #2
 80096e0:	1852      	adds	r2, r2, r1
 80096e2:	2100      	movs	r1, #0
 80096e4:	77d1      	strb	r1, [r2, #31]
 80096e6:	2201      	movs	r2, #1
 80096e8:	726a      	strb	r2, [r5, #9]
 80096ea:	2b2a      	cmp	r3, #42	; 0x2a
 80096ec:	d804      	bhi.n	80096f8 <acc_service_deactivate+0x60>
 80096ee:	4093      	lsls	r3, r2
 80096f0:	18a4      	adds	r4, r4, r2
 80096f2:	18e4      	adds	r4, r4, r3
 80096f4:	2300      	movs	r3, #0
 80096f6:	77e3      	strb	r3, [r4, #31]
 80096f8:	0030      	movs	r0, r6
 80096fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <acc_service_deactivate+0x78>)
 80096fe:	4a05      	ldr	r2, [pc, #20]	; (8009714 <acc_service_deactivate+0x7c>)
 8009700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009702:	4905      	ldr	r1, [pc, #20]	; (8009718 <acc_service_deactivate+0x80>)
 8009704:	2000      	movs	r0, #0
 8009706:	4798      	blx	r3
 8009708:	2600      	movs	r6, #0
 800970a:	e7f5      	b.n	80096f8 <acc_service_deactivate+0x60>
 800970c:	2000030c 	.word	0x2000030c
 8009710:	200005d8 	.word	0x200005d8
 8009714:	0801e63b 	.word	0x0801e63b
 8009718:	0801dd1a 	.word	0x0801dd1a

0800971c <acc_service_destroy>:
 800971c:	4b12      	ldr	r3, [pc, #72]	; (8009768 <acc_service_destroy+0x4c>)
 800971e:	b510      	push	{r4, lr}
 8009720:	791b      	ldrb	r3, [r3, #4]
 8009722:	0004      	movs	r4, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d012      	beq.n	800974e <acc_service_destroy+0x32>
 8009728:	6800      	ldr	r0, [r0, #0]
 800972a:	f7ff ff9d 	bl	8009668 <acc_service_handle_valid>
 800972e:	2800      	cmp	r0, #0
 8009730:	d00c      	beq.n	800974c <acc_service_destroy+0x30>
 8009732:	6820      	ldr	r0, [r4, #0]
 8009734:	f7ff ffb0 	bl	8009698 <acc_service_deactivate>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	68c3      	ldr	r3, [r0, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d000      	beq.n	8009742 <acc_service_destroy+0x26>
 8009740:	4798      	blx	r3
 8009742:	6820      	ldr	r0, [r4, #0]
 8009744:	f7f7 fdb6 	bl	80012b4 <destroy_handle>
 8009748:	2300      	movs	r3, #0
 800974a:	6023      	str	r3, [r4, #0]
 800974c:	bd10      	pop	{r4, pc}
 800974e:	4b07      	ldr	r3, [pc, #28]	; (800976c <acc_service_destroy+0x50>)
 8009750:	001a      	movs	r2, r3
 8009752:	3230      	adds	r2, #48	; 0x30
 8009754:	7812      	ldrb	r2, [r2, #0]
 8009756:	2a00      	cmp	r2, #0
 8009758:	d0f8      	beq.n	800974c <acc_service_destroy+0x30>
 800975a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975c:	4a04      	ldr	r2, [pc, #16]	; (8009770 <acc_service_destroy+0x54>)
 800975e:	4905      	ldr	r1, [pc, #20]	; (8009774 <acc_service_destroy+0x58>)
 8009760:	2001      	movs	r0, #1
 8009762:	4798      	blx	r3
 8009764:	e7f2      	b.n	800974c <acc_service_destroy+0x30>
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	2000008c 	.word	0x2000008c
 800976c:	200005d8 	.word	0x200005d8
 8009770:	0801d227 	.word	0x0801d227
 8009774:	0801cf8c 	.word	0x0801cf8c

08009778 <acc_service_activate>:
 8009778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977a:	46c6      	mov	lr, r8
 800977c:	b500      	push	{lr}
 800977e:	0004      	movs	r4, r0
 8009780:	f7ff ff72 	bl	8009668 <acc_service_handle_valid>
 8009784:	2800      	cmp	r0, #0
 8009786:	d10a      	bne.n	800979e <acc_service_activate+0x26>
 8009788:	4b35      	ldr	r3, [pc, #212]	; (8009860 <acc_service_activate+0xe8>)
 800978a:	4a36      	ldr	r2, [pc, #216]	; (8009864 <acc_service_activate+0xec>)
 800978c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978e:	4936      	ldr	r1, [pc, #216]	; (8009868 <acc_service_activate+0xf0>)
 8009790:	2000      	movs	r0, #0
 8009792:	4798      	blx	r3
 8009794:	2600      	movs	r6, #0
 8009796:	0030      	movs	r0, r6
 8009798:	bc04      	pop	{r2}
 800979a:	4690      	mov	r8, r2
 800979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979e:	4d33      	ldr	r5, [pc, #204]	; (800986c <acc_service_activate+0xf4>)
 80097a0:	7d6e      	ldrb	r6, [r5, #21]
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	d0f0      	beq.n	8009788 <acc_service_activate+0x10>
 80097a6:	7a63      	ldrb	r3, [r4, #9]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0f4      	beq.n	8009796 <acc_service_activate+0x1e>
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	2b2a      	cmp	r3, #42	; 0x2a
 80097b0:	d8ea      	bhi.n	8009788 <acc_service_activate+0x10>
 80097b2:	1c6a      	adds	r2, r5, #1
 80097b4:	0059      	lsls	r1, r3, #1
 80097b6:	1850      	adds	r0, r2, r1
 80097b8:	7fc7      	ldrb	r7, [r0, #31]
 80097ba:	4690      	mov	r8, r2
 80097bc:	2f00      	cmp	r7, #0
 80097be:	d1e3      	bne.n	8009788 <acc_service_activate+0x10>
 80097c0:	2201      	movs	r2, #1
 80097c2:	4694      	mov	ip, r2
 80097c4:	77c2      	strb	r2, [r0, #31]
 80097c6:	4642      	mov	r2, r8
 80097c8:	4462      	add	r2, ip
 80097ca:	1852      	adds	r2, r2, r1
 80097cc:	7fd2      	ldrb	r2, [r2, #31]
 80097ce:	2a00      	cmp	r2, #0
 80097d0:	d13b      	bne.n	800984a <acc_service_activate+0xd2>
 80097d2:	7e22      	ldrb	r2, [r4, #24]
 80097d4:	2a02      	cmp	r2, #2
 80097d6:	d021      	beq.n	800981c <acc_service_activate+0xa4>
 80097d8:	2318      	movs	r3, #24
 80097da:	4698      	mov	r8, r3
 80097dc:	44a0      	add	r8, r4
 80097de:	4640      	mov	r0, r8
 80097e0:	f7f7 f94c 	bl	8000a7c <acc_sensor_manager_power_on_and_start_sensor>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d030      	beq.n	800984a <acc_service_activate+0xd2>
 80097e8:	7ea3      	ldrb	r3, [r4, #26]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d01f      	beq.n	800982e <acc_service_activate+0xb6>
 80097ee:	7e23      	ldrb	r3, [r4, #24]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d110      	bne.n	8009816 <acc_service_activate+0x9e>
 80097f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80097f6:	2200      	movs	r2, #0
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	69e1      	ldr	r1, [r4, #28]
 80097fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80097fe:	4798      	blx	r3
 8009800:	2800      	cmp	r0, #0
 8009802:	d022      	beq.n	800984a <acc_service_activate+0xd2>
 8009804:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009806:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	4798      	blx	r3
 800980c:	2800      	cmp	r0, #0
 800980e:	d01c      	beq.n	800984a <acc_service_activate+0xd2>
 8009810:	4640      	mov	r0, r8
 8009812:	f7f7 f8c1 	bl	8000998 <acc_sensor_manager_hibernate_enter>
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	2b2a      	cmp	r3, #42	; 0x2a
 800981a:	d804      	bhi.n	8009826 <acc_service_activate+0xae>
 800981c:	1caa      	adds	r2, r5, #2
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	18d3      	adds	r3, r2, r3
 8009822:	2201      	movs	r2, #1
 8009824:	77da      	strb	r2, [r3, #31]
 8009826:	2300      	movs	r3, #0
 8009828:	0037      	movs	r7, r6
 800982a:	7263      	strb	r3, [r4, #9]
 800982c:	e00d      	b.n	800984a <acc_service_activate+0xd2>
 800982e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009830:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009834:	4798      	blx	r3
 8009836:	2800      	cmp	r0, #0
 8009838:	d007      	beq.n	800984a <acc_service_activate+0xd2>
 800983a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800983c:	2200      	movs	r2, #0
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	69e1      	ldr	r1, [r4, #28]
 8009842:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009844:	4798      	blx	r3
 8009846:	2800      	cmp	r0, #0
 8009848:	d1d1      	bne.n	80097ee <acc_service_activate+0x76>
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	2b2a      	cmp	r3, #42	; 0x2a
 800984e:	d804      	bhi.n	800985a <acc_service_activate+0xe2>
 8009850:	2200      	movs	r2, #0
 8009852:	3501      	adds	r5, #1
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	18eb      	adds	r3, r5, r3
 8009858:	77da      	strb	r2, [r3, #31]
 800985a:	2f00      	cmp	r7, #0
 800985c:	d094      	beq.n	8009788 <acc_service_activate+0x10>
 800985e:	e79a      	b.n	8009796 <acc_service_activate+0x1e>
 8009860:	200005d8 	.word	0x200005d8
 8009864:	0801e657 	.word	0x0801e657
 8009868:	0801dd1a 	.word	0x0801dd1a
 800986c:	2000030c 	.word	0x2000030c

08009870 <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 8009870:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009872:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 8009874:	f7ff ff80 	bl	8009778 <acc_service_activate>
 8009878:	4e16      	ldr	r6, [pc, #88]	; (80098d4 <activateService_handle+0x64>)
 800987a:	1e04      	subs	r4, r0, #0
 800987c:	4d16      	ldr	r5, [pc, #88]	; (80098d8 <activateService_handle+0x68>)
 800987e:	d11b      	bne.n	80098b8 <activateService_handle+0x48>
		ERR_PRINTLN("acc_service_activate() failed");
 8009880:	4816      	ldr	r0, [pc, #88]	; (80098dc <activateService_handle+0x6c>)
 8009882:	f00c fa35 	bl	8015cf0 <__wrap_printf>
 8009886:	4816      	ldr	r0, [pc, #88]	; (80098e0 <activateService_handle+0x70>)
 8009888:	f00c fa32 	bl	8015cf0 <__wrap_printf>
 800988c:	22a4      	movs	r2, #164	; 0xa4
 800988e:	0031      	movs	r1, r6
 8009890:	0092      	lsls	r2, r2, #2
 8009892:	0028      	movs	r0, r5
 8009894:	f00c fa2c 	bl	8015cf0 <__wrap_printf>
		acc_service_destroy(&handle);
 8009898:	a801      	add	r0, sp, #4
 800989a:	f7ff ff3f 	bl	800971c <acc_service_destroy>
		data_free();
 800989e:	f7f8 f89f 	bl	80019e0 <data_free>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80098a2:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <activateService_handle+0x74>)
 80098a4:	3350      	adds	r3, #80	; 0x50
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d003      	beq.n	80098b4 <activateService_handle+0x44>
 80098ac:	480e      	ldr	r0, [pc, #56]	; (80098e8 <activateService_handle+0x78>)
 80098ae:	3078      	adds	r0, #120	; 0x78
 80098b0:	f7ff ff34 	bl	800971c <acc_service_destroy>
}
 80098b4:	0020      	movs	r0, r4
 80098b6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		DBG_PRINTLN("service handle activated");
 80098b8:	480c      	ldr	r0, [pc, #48]	; (80098ec <activateService_handle+0x7c>)
 80098ba:	f00c fa19 	bl	8015cf0 <__wrap_printf>
 80098be:	480c      	ldr	r0, [pc, #48]	; (80098f0 <activateService_handle+0x80>)
 80098c0:	f00c fa16 	bl	8015cf0 <__wrap_printf>
 80098c4:	4a0b      	ldr	r2, [pc, #44]	; (80098f4 <activateService_handle+0x84>)
 80098c6:	0031      	movs	r1, r6
 80098c8:	0028      	movs	r0, r5
 80098ca:	f00c fa11 	bl	8015cf0 <__wrap_printf>
 80098ce:	2401      	movs	r4, #1
 80098d0:	e7f0      	b.n	80098b4 <activateService_handle+0x44>
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	0801d2db 	.word	0x0801d2db
 80098d8:	0801eb0c 	.word	0x0801eb0c
 80098dc:	0801ead4 	.word	0x0801ead4
 80098e0:	0801e671 	.word	0x0801e671
 80098e4:	2000018c 	.word	0x2000018c
 80098e8:	2000030c 	.word	0x2000030c
 80098ec:	0801d2c3 	.word	0x0801d2c3
 80098f0:	0801e68f 	.word	0x0801e68f
 80098f4:	0000029a 	.word	0x0000029a

080098f8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80098f8:	b507      	push	{r0, r1, r2, lr}
	if (queue_cmd_end == 2){
 80098fa:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_UART_TxCpltCallback+0x28>)
 80098fc:	337c      	adds	r3, #124	; 0x7c
 80098fe:	781a      	ldrb	r2, [r3, #0]
 8009900:	2a02      	cmp	r2, #2
 8009902:	d102      	bne.n	800990a <HAL_UART_TxCpltCallback+0x12>
		queue_cmd_end = 1;
 8009904:	3a01      	subs	r2, #1
 8009906:	701a      	strb	r2, [r3, #0]
}
 8009908:	bd07      	pop	{r0, r1, r2, pc}
	}else if(queue_cmd_end == 1){
 800990a:	2a01      	cmp	r2, #1
 800990c:	d1fc      	bne.n	8009908 <HAL_UART_TxCpltCallback+0x10>
		queue_cmd_end = 0;
 800990e:	2100      	movs	r1, #0
 8009910:	7019      	strb	r1, [r3, #0]
		uint8_t end = 0xCD;
 8009912:	466b      	mov	r3, sp
 8009914:	1dd9      	adds	r1, r3, #7
 8009916:	23cd      	movs	r3, #205	; 0xcd
 8009918:	700b      	strb	r3, [r1, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 800991a:	f003 fdff 	bl	800d51c <HAL_UART_Transmit_IT>
 800991e:	e7f3      	b.n	8009908 <HAL_UART_TxCpltCallback+0x10>
 8009920:	2000030c 	.word	0x2000030c

08009924 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (uart_state == 0){
 8009926:	4c1d      	ldr	r4, [pc, #116]	; (800999c <HAL_UART_RxCpltCallback+0x78>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009928:	0005      	movs	r5, r0
	if (uart_state == 0){
 800992a:	0023      	movs	r3, r4
 800992c:	337d      	adds	r3, #125	; 0x7d
 800992e:	781a      	ldrb	r2, [r3, #0]
 8009930:	2a00      	cmp	r2, #0
 8009932:	d112      	bne.n	800995a <HAL_UART_RxCpltCallback+0x36>
		if (uart_rx_buff[0] == 0xCC){
 8009934:	491a      	ldr	r1, [pc, #104]	; (80099a0 <HAL_UART_RxCpltCallback+0x7c>)
 8009936:	3168      	adds	r1, #104	; 0x68
 8009938:	7808      	ldrb	r0, [r1, #0]
 800993a:	28cc      	cmp	r0, #204	; 0xcc
 800993c:	d108      	bne.n	8009950 <HAL_UART_RxCpltCallback+0x2c>
			uart_state = 1;
 800993e:	38cb      	subs	r0, #203	; 0xcb
			cmd_length = 0;
 8009940:	347e      	adds	r4, #126	; 0x7e
			uart_state = 1;
 8009942:	7018      	strb	r0, [r3, #0]
			cmd_length = 0;
 8009944:	7022      	strb	r2, [r4, #0]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 8009946:	0028      	movs	r0, r5
 8009948:	3202      	adds	r2, #2
 800994a:	f003 fd37 	bl	800d3bc <HAL_UART_Receive_IT>
}
 800994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8009950:	2201      	movs	r2, #1
 8009952:	0028      	movs	r0, r5
 8009954:	f003 fd32 	bl	800d3bc <HAL_UART_Receive_IT>
 8009958:	e7f9      	b.n	800994e <HAL_UART_RxCpltCallback+0x2a>
	}else if (uart_state == 1){
 800995a:	2a01      	cmp	r2, #1
 800995c:	d119      	bne.n	8009992 <HAL_UART_RxCpltCallback+0x6e>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 800995e:	4e10      	ldr	r6, [pc, #64]	; (80099a0 <HAL_UART_RxCpltCallback+0x7c>)
 8009960:	0027      	movs	r7, r4
 8009962:	0031      	movs	r1, r6
 8009964:	3168      	adds	r1, #104	; 0x68
 8009966:	7808      	ldrb	r0, [r1, #0]
 8009968:	377e      	adds	r7, #126	; 0x7e
 800996a:	7038      	strb	r0, [r7, #0]
		if (cmd_length +2 > UART_BUFF){
 800996c:	283e      	cmp	r0, #62	; 0x3e
 800996e:	d80a      	bhi.n	8009986 <HAL_UART_RxCpltCallback+0x62>
		uart_state = 3;
 8009970:	3202      	adds	r2, #2
 8009972:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 8009974:	0031      	movs	r1, r6
 8009976:	347e      	adds	r4, #126	; 0x7e
 8009978:	7822      	ldrb	r2, [r4, #0]
 800997a:	3168      	adds	r1, #104	; 0x68
 800997c:	3202      	adds	r2, #2
 800997e:	0028      	movs	r0, r5
 8009980:	f003 fd1c 	bl	800d3bc <HAL_UART_Receive_IT>
 8009984:	e7e3      	b.n	800994e <HAL_UART_RxCpltCallback+0x2a>
			uart_state = 0;
 8009986:	2000      	movs	r0, #0
 8009988:	7018      	strb	r0, [r3, #0]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 800998a:	0028      	movs	r0, r5
 800998c:	f003 fd16 	bl	800d3bc <HAL_UART_Receive_IT>
 8009990:	e7f0      	b.n	8009974 <HAL_UART_RxCpltCallback+0x50>
	}else if (uart_state == 3){
 8009992:	2a03      	cmp	r2, #3
 8009994:	d1db      	bne.n	800994e <HAL_UART_RxCpltCallback+0x2a>
		uart_state = 4;
 8009996:	3201      	adds	r2, #1
 8009998:	701a      	strb	r2, [r3, #0]
 800999a:	e7d8      	b.n	800994e <HAL_UART_RxCpltCallback+0x2a>
 800999c:	2000030c 	.word	0x2000030c
 80099a0:	2000018c 	.word	0x2000018c

080099a4 <RegInt_getreg>:
uint32_t RegInt_getreg(uint8_t reg){
 80099a4:	b510      	push	{r4, lr}
	uint32_t* regptr = RegInt_regmap(reg);
 80099a6:	f7f7 ff75 	bl	8001894 <RegInt_regmap>
	return *regptr;
 80099aa:	6800      	ldr	r0, [r0, #0]
}
 80099ac:	bd10      	pop	{r4, pc}

080099ae <activateService>:
int8_t activateService(void){
 80099ae:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 80099b0:	4817      	ldr	r0, [pc, #92]	; (8009a10 <activateService+0x62>)
 80099b2:	f00c f99d 	bl	8015cf0 <__wrap_printf>
 80099b6:	4817      	ldr	r0, [pc, #92]	; (8009a14 <activateService+0x66>)
 80099b8:	f00c f99a 	bl	8015cf0 <__wrap_printf>
 80099bc:	4a16      	ldr	r2, [pc, #88]	; (8009a18 <activateService+0x6a>)
 80099be:	4917      	ldr	r1, [pc, #92]	; (8009a1c <activateService+0x6e>)
 80099c0:	4817      	ldr	r0, [pc, #92]	; (8009a20 <activateService+0x72>)
 80099c2:	f00c f995 	bl	8015cf0 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 80099c6:	2002      	movs	r0, #2
 80099c8:	f7ff ffec 	bl	80099a4 <RegInt_getreg>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 80099cc:	2802      	cmp	r0, #2
 80099ce:	d10a      	bne.n	80099e6 <activateService+0x38>
 80099d0:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <activateService+0x76>)
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	f7ff ff4c 	bl	8009870 <activateService_handle>
 80099d8:	0004      	movs	r4, r0
    if(success){
 80099da:	2c00      	cmp	r4, #0
 80099dc:	d012      	beq.n	8009a04 <activateService+0x56>
        Reg_regor(0x06, 0x00000002);
 80099de:	2002      	movs	r0, #2
 80099e0:	f003 fa84 	bl	800ceec <Reg_regor.constprop.73>
 80099e4:	e00c      	b.n	8009a00 <activateService+0x52>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 80099e6:	2804      	cmp	r0, #4
 80099e8:	d105      	bne.n	80099f6 <activateService+0x48>
 80099ea:	4b0e      	ldr	r3, [pc, #56]	; (8009a24 <activateService+0x76>)
 80099ec:	6858      	ldr	r0, [r3, #4]
 80099ee:	f7ff ff3f 	bl	8009870 <activateService_handle>
 80099f2:	0004      	movs	r4, r0
 80099f4:	e7f1      	b.n	80099da <activateService+0x2c>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 80099f6:	2080      	movs	r0, #128	; 0x80
 80099f8:	02c0      	lsls	r0, r0, #11
 80099fa:	f003 fa77 	bl	800ceec <Reg_regor.constprop.73>
 80099fe:	2400      	movs	r4, #0
}
 8009a00:	0020      	movs	r0, r4
 8009a02:	bd10      	pop	{r4, pc}
        Reg_regor(0x06, 0x00100000);
 8009a04:	2080      	movs	r0, #128	; 0x80
 8009a06:	0340      	lsls	r0, r0, #13
 8009a08:	f003 fa70 	bl	800ceec <Reg_regor.constprop.73>
 8009a0c:	e7f8      	b.n	8009a00 <activateService+0x52>
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	0801d2c3 	.word	0x0801d2c3
 8009a14:	0801e6a8 	.word	0x0801e6a8
 8009a18:	0000027d 	.word	0x0000027d
 8009a1c:	0801d2db 	.word	0x0801d2db
 8009a20:	0801eb0c 	.word	0x0801eb0c
 8009a24:	2000038c 	.word	0x2000038c

08009a28 <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8009a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a2a:	46c6      	mov	lr, r8
 8009a2c:	0004      	movs	r4, r0
 8009a2e:	b500      	push	{lr}
	DBG_PRINTLN("updating config");
 8009a30:	487f      	ldr	r0, [pc, #508]	; (8009c30 <updateSparseConfig+0x208>)
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8009a32:	4688      	mov	r8, r1
 8009a34:	0017      	movs	r7, r2
	DBG_PRINTLN("updating config");
 8009a36:	f00c f95b 	bl	8015cf0 <__wrap_printf>
 8009a3a:	487e      	ldr	r0, [pc, #504]	; (8009c34 <updateSparseConfig+0x20c>)
 8009a3c:	f00c f958 	bl	8015cf0 <__wrap_printf>
 8009a40:	22c4      	movs	r2, #196	; 0xc4
 8009a42:	497d      	ldr	r1, [pc, #500]	; (8009c38 <updateSparseConfig+0x210>)
 8009a44:	32ff      	adds	r2, #255	; 0xff
 8009a46:	487d      	ldr	r0, [pc, #500]	; (8009c3c <updateSparseConfig+0x214>)
 8009a48:	f00c f952 	bl	8015cf0 <__wrap_printf>
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8009a4c:	2028      	movs	r0, #40	; 0x28
 8009a4e:	f7ff ffa9 	bl	80099a4 <RegInt_getreg>
 8009a52:	b2c1      	uxtb	r1, r0
 8009a54:	0020      	movs	r0, r4
 8009a56:	f7f7 fb8f 	bl	8001178 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8009a5a:	2022      	movs	r0, #34	; 0x22
 8009a5c:	f7ff ffa2 	bl	80099a4 <RegInt_getreg>
	if(rep_mode == 0x01){
 8009a60:	2801      	cmp	r0, #1
 8009a62:	d000      	beq.n	8009a66 <updateSparseConfig+0x3e>
 8009a64:	e0c2      	b.n	8009bec <updateSparseConfig+0x1c4>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8009a66:	3022      	adds	r0, #34	; 0x22
 8009a68:	f7ff ff9c 	bl	80099a4 <RegInt_getreg>
 8009a6c:	0006      	movs	r6, r0
 8009a6e:	0020      	movs	r0, r4
 8009a70:	f7f7 fb38 	bl	80010e4 <acc_service_get_base_configuration>
 8009a74:	0005      	movs	r5, r0
 8009a76:	f7f7 f8a7 	bl	8000bc8 <configuration_is_valid>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d008      	beq.n	8009a90 <updateSparseConfig+0x68>
 8009a7e:	2303      	movs	r3, #3
 8009a80:	0030      	movs	r0, r6
 8009a82:	712b      	strb	r3, [r5, #4]
 8009a84:	f007 ff94 	bl	80119b0 <__aeabi_ui2f>
 8009a88:	496d      	ldr	r1, [pc, #436]	; (8009c40 <updateSparseConfig+0x218>)
 8009a8a:	f006 ff1f 	bl	80108cc <__aeabi_fdiv>
 8009a8e:	60a8      	str	r0, [r5, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8009a90:	2026      	movs	r0, #38	; 0x26
 8009a92:	f7ff ff87 	bl	80099a4 <RegInt_getreg>
 8009a96:	0006      	movs	r6, r0
 8009a98:	0020      	movs	r0, r4
 8009a9a:	f7f7 fb23 	bl	80010e4 <acc_service_get_base_configuration>
 8009a9e:	0005      	movs	r5, r0
 8009aa0:	f7f7 f892 	bl	8000bc8 <configuration_is_valid>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d003      	beq.n	8009ab0 <updateSparseConfig+0x88>
 8009aa8:	1e73      	subs	r3, r6, #1
 8009aaa:	419e      	sbcs	r6, r3
 8009aac:	3547      	adds	r5, #71	; 0x47
 8009aae:	702e      	strb	r6, [r5, #0]
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8009ab0:	2025      	movs	r0, #37	; 0x25
 8009ab2:	f7ff ff77 	bl	80099a4 <RegInt_getreg>
 8009ab6:	0006      	movs	r6, r0
 8009ab8:	0020      	movs	r0, r4
 8009aba:	f7f7 fb13 	bl	80010e4 <acc_service_get_base_configuration>
 8009abe:	0005      	movs	r5, r0
 8009ac0:	f7f7 f882 	bl	8000bc8 <configuration_is_valid>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d000      	beq.n	8009aca <updateSparseConfig+0xa2>
 8009ac8:	63ae      	str	r6, [r5, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8009aca:	2033      	movs	r0, #51	; 0x33
 8009acc:	f7ff ff6a 	bl	80099a4 <RegInt_getreg>
 8009ad0:	0006      	movs	r6, r0
 8009ad2:	0020      	movs	r0, r4
 8009ad4:	f7f7 fb06 	bl	80010e4 <acc_service_get_base_configuration>
 8009ad8:	0005      	movs	r5, r0
 8009ada:	f7f7 f875 	bl	8000bc8 <configuration_is_valid>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d003      	beq.n	8009aea <updateSparseConfig+0xc2>
 8009ae2:	1e73      	subs	r3, r6, #1
 8009ae4:	419e      	sbcs	r6, r3
 8009ae6:	354e      	adds	r5, #78	; 0x4e
 8009ae8:	702e      	strb	r6, [r5, #0]
 8009aea:	0020      	movs	r0, r4
 8009aec:	f7f7 fafa 	bl	80010e4 <acc_service_get_base_configuration>
 8009af0:	0005      	movs	r5, r0
 8009af2:	f7f7 f869 	bl	8000bc8 <configuration_is_valid>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d006      	beq.n	8009b08 <updateSparseConfig+0xe0>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 8009afa:	4640      	mov	r0, r8
 8009afc:	f007 ff58 	bl	80119b0 <__aeabi_ui2f>
 8009b00:	494f      	ldr	r1, [pc, #316]	; (8009c40 <updateSparseConfig+0x218>)
 8009b02:	f006 fee3 	bl	80108cc <__aeabi_fdiv>
 8009b06:	6268      	str	r0, [r5, #36]	; 0x24
 8009b08:	0020      	movs	r0, r4
 8009b0a:	f7f7 faeb 	bl	80010e4 <acc_service_get_base_configuration>
 8009b0e:	0005      	movs	r5, r0
 8009b10:	f7f7 f85a 	bl	8000bc8 <configuration_is_valid>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d006      	beq.n	8009b26 <updateSparseConfig+0xfe>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 8009b18:	0038      	movs	r0, r7
 8009b1a:	f007 ff49 	bl	80119b0 <__aeabi_ui2f>
 8009b1e:	4948      	ldr	r1, [pc, #288]	; (8009c40 <updateSparseConfig+0x218>)
 8009b20:	f006 fed4 	bl	80108cc <__aeabi_fdiv>
 8009b24:	62a8      	str	r0, [r5, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8009b26:	2024      	movs	r0, #36	; 0x24
 8009b28:	f7ff ff3c 	bl	80099a4 <RegInt_getreg>
 8009b2c:	f007 ff40 	bl	80119b0 <__aeabi_ui2f>
 8009b30:	4943      	ldr	r1, [pc, #268]	; (8009c40 <updateSparseConfig+0x218>)
 8009b32:	f006 fecb 	bl	80108cc <__aeabi_fdiv>
 8009b36:	1c01      	adds	r1, r0, #0
 8009b38:	0020      	movs	r0, r4
 8009b3a:	f7f7 fb37 	bl	80011ac <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 8009b3e:	2030      	movs	r0, #48	; 0x30
 8009b40:	f7ff ff30 	bl	80099a4 <RegInt_getreg>
 8009b44:	0005      	movs	r5, r0
 8009b46:	0020      	movs	r0, r4
 8009b48:	f7f7 facc 	bl	80010e4 <acc_service_get_base_configuration>
 8009b4c:	0006      	movs	r6, r0
 8009b4e:	f7f7 f83b 	bl	8000bc8 <configuration_is_valid>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d001      	beq.n	8009b5a <updateSparseConfig+0x132>
 8009b56:	b2ed      	uxtb	r5, r5
 8009b58:	87b5      	strh	r5, [r6, #60]	; 0x3c
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8009b5a:	2032      	movs	r0, #50	; 0x32
 8009b5c:	f7ff ff22 	bl	80099a4 <RegInt_getreg>
 8009b60:	1e41      	subs	r1, r0, #1
 8009b62:	4188      	sbcs	r0, r1
 8009b64:	b2c1      	uxtb	r1, r0
 8009b66:	0020      	movs	r0, r4
 8009b68:	f7f7 faf4 	bl	8001154 <acc_service_maximize_signal_attenuation_set>
	acc_service_sparse_configuration_sweeps_per_frame_set (config, RegInt_getreg(0x40));
 8009b6c:	2040      	movs	r0, #64	; 0x40
 8009b6e:	f7ff ff19 	bl	80099a4 <RegInt_getreg>
 8009b72:	0006      	movs	r6, r0
 8009b74:	0020      	movs	r0, r4
 8009b76:	f7f7 fa73 	bl	8001060 <acc_service_configuration_valid>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d007      	beq.n	8009b8e <updateSparseConfig+0x166>
 8009b7e:	6925      	ldr	r5, [r4, #16]
 8009b80:	0028      	movs	r0, r5
 8009b82:	f7f7 f821 	bl	8000bc8 <configuration_is_valid>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d001      	beq.n	8009b8e <updateSparseConfig+0x166>
 8009b8a:	3560      	adds	r5, #96	; 0x60
 8009b8c:	802e      	strh	r6, [r5, #0]
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 8009b8e:	2041      	movs	r0, #65	; 0x41
 8009b90:	f7ff ff08 	bl	80099a4 <RegInt_getreg>
 8009b94:	0006      	movs	r6, r0
 8009b96:	0020      	movs	r0, r4
 8009b98:	f7f7 fa62 	bl	8001060 <acc_service_configuration_valid>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d00c      	beq.n	8009bba <updateSparseConfig+0x192>
 8009ba0:	6925      	ldr	r5, [r4, #16]
 8009ba2:	0028      	movs	r0, r5
 8009ba4:	f7f7 f810 	bl	8000bc8 <configuration_is_valid>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d006      	beq.n	8009bba <updateSparseConfig+0x192>
 8009bac:	0030      	movs	r0, r6
 8009bae:	f007 feff 	bl	80119b0 <__aeabi_ui2f>
 8009bb2:	4923      	ldr	r1, [pc, #140]	; (8009c40 <updateSparseConfig+0x218>)
 8009bb4:	f006 fe8a 	bl	80108cc <__aeabi_fdiv>
 8009bb8:	6668      	str	r0, [r5, #100]	; 0x64
	acc_service_sparse_sampling_mode_set (config, RegInt_getreg(0x42));
 8009bba:	2042      	movs	r0, #66	; 0x42
 8009bbc:	f7ff fef2 	bl	80099a4 <RegInt_getreg>
 8009bc0:	0006      	movs	r6, r0
 8009bc2:	0020      	movs	r0, r4
 8009bc4:	f7f7 fb0e 	bl	80011e4 <get_sparse_configuration>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d020      	beq.n	8009c0e <updateSparseConfig+0x1e6>
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	d016      	beq.n	8009bfe <updateSparseConfig+0x1d6>
 8009bd0:	2e01      	cmp	r6, #1
 8009bd2:	d014      	beq.n	8009bfe <updateSparseConfig+0x1d6>
 8009bd4:	4b1b      	ldr	r3, [pc, #108]	; (8009c44 <updateSparseConfig+0x21c>)
 8009bd6:	001a      	movs	r2, r3
 8009bd8:	3230      	adds	r2, #48	; 0x30
 8009bda:	7812      	ldrb	r2, [r2, #0]
 8009bdc:	2a00      	cmp	r2, #0
 8009bde:	d016      	beq.n	8009c0e <updateSparseConfig+0x1e6>
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	4a19      	ldr	r2, [pc, #100]	; (8009c48 <updateSparseConfig+0x220>)
 8009be4:	4919      	ldr	r1, [pc, #100]	; (8009c4c <updateSparseConfig+0x224>)
 8009be6:	2001      	movs	r0, #1
 8009be8:	4798      	blx	r3
 8009bea:	e010      	b.n	8009c0e <updateSparseConfig+0x1e6>
	}else if (rep_mode == 0x02){
 8009bec:	2802      	cmp	r0, #2
 8009bee:	d000      	beq.n	8009bf2 <updateSparseConfig+0x1ca>
 8009bf0:	e74e      	b.n	8009a90 <updateSparseConfig+0x68>
 8009bf2:	0020      	movs	r0, r4
 8009bf4:	f7f7 fa76 	bl	80010e4 <acc_service_get_base_configuration>
 8009bf8:	f7f7 f8c5 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 8009bfc:	e748      	b.n	8009a90 <updateSparseConfig+0x68>
 8009bfe:	6925      	ldr	r5, [r4, #16]
 8009c00:	0028      	movs	r0, r5
 8009c02:	f7f6 ffe1 	bl	8000bc8 <configuration_is_valid>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d001      	beq.n	8009c0e <updateSparseConfig+0x1e6>
 8009c0a:	356a      	adds	r5, #106	; 0x6a
 8009c0c:	702e      	strb	r6, [r5, #0]
	acc_service_sparse_downsampling_factor_set (config, RegInt_getreg(0x29));
 8009c0e:	2029      	movs	r0, #41	; 0x29
 8009c10:	f7ff fec8 	bl	80099a4 <RegInt_getreg>
 8009c14:	0005      	movs	r5, r0
 8009c16:	0020      	movs	r0, r4
 8009c18:	f7f7 fa22 	bl	8001060 <acc_service_configuration_valid>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d003      	beq.n	8009c28 <updateSparseConfig+0x200>
 8009c20:	b2a9      	uxth	r1, r5
 8009c22:	6920      	ldr	r0, [r4, #16]
 8009c24:	f7f6 fffc 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
}
 8009c28:	bc04      	pop	{r2}
 8009c2a:	4690      	mov	r8, r2
 8009c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	0801d2c3 	.word	0x0801d2c3
 8009c34:	0801e6bb 	.word	0x0801e6bb
 8009c38:	0801d2db 	.word	0x0801d2db
 8009c3c:	0801eb0c 	.word	0x0801eb0c
 8009c40:	447a0000 	.word	0x447a0000
 8009c44:	200005d8 	.word	0x200005d8
 8009c48:	0801e6cb 	.word	0x0801e6cb
 8009c4c:	0801cf5c 	.word	0x0801cf5c

08009c50 <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8009c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009c52:	0004      	movs	r4, r0
 8009c54:	000e      	movs	r6, r1
	if(!force){
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d115      	bne.n	8009c86 <RegInt_setregf+0x36>
    if(reg == 0x02){
 8009c5a:	2802      	cmp	r0, #2
 8009c5c:	d104      	bne.n	8009c68 <RegInt_setregf+0x18>
        if(RegInt_getreg(0x06) && 0x00000001){
 8009c5e:	2006      	movs	r0, #6
 8009c60:	f7ff fea0 	bl	80099a4 <RegInt_getreg>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d10e      	bne.n	8009c86 <RegInt_setregf+0x36>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8009c68:	4913      	ldr	r1, [pc, #76]	; (8009cb8 <RegInt_setregf+0x68>)
 8009c6a:	ad01      	add	r5, sp, #4
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	3122      	adds	r1, #34	; 0x22
 8009c70:	0028      	movs	r0, r5
 8009c72:	f00c fd03 	bl	801667c <memcpy>
 8009c76:	2300      	movs	r3, #0
		if (reg == read_only_addr[i]){return 0;}
 8009c78:	5cea      	ldrb	r2, [r5, r3]
 8009c7a:	4294      	cmp	r4, r2
 8009c7c:	d00e      	beq.n	8009c9c <RegInt_setregf+0x4c>
		if (reg < read_only_addr[i]){break;}
 8009c7e:	d302      	bcc.n	8009c86 <RegInt_setregf+0x36>
 8009c80:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 10; i++){
 8009c82:	2b0a      	cmp	r3, #10
 8009c84:	d1f8      	bne.n	8009c78 <RegInt_setregf+0x28>
	uint32_t* regptr = RegInt_regmap(reg);
 8009c86:	0020      	movs	r0, r4
 8009c88:	f7f7 fe04 	bl	8001894 <RegInt_regmap>
	if (!(*regptr == (uint32_t)-1)){
 8009c8c:	6802      	ldr	r2, [r0, #0]
	return 1;
 8009c8e:	2301      	movs	r3, #1
	if (!(*regptr == (uint32_t)-1)){
 8009c90:	3201      	adds	r2, #1
 8009c92:	d000      	beq.n	8009c96 <RegInt_setregf+0x46>
		*regptr = val;
 8009c94:	6006      	str	r6, [r0, #0]
}
 8009c96:	0018      	movs	r0, r3
 8009c98:	b004      	add	sp, #16
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 8009c9c:	4807      	ldr	r0, [pc, #28]	; (8009cbc <RegInt_setregf+0x6c>)
 8009c9e:	f00c f827 	bl	8015cf0 <__wrap_printf>
 8009ca2:	4807      	ldr	r0, [pc, #28]	; (8009cc0 <RegInt_setregf+0x70>)
 8009ca4:	f00c f824 	bl	8015cf0 <__wrap_printf>
 8009ca8:	2244      	movs	r2, #68	; 0x44
 8009caa:	4906      	ldr	r1, [pc, #24]	; (8009cc4 <RegInt_setregf+0x74>)
 8009cac:	4806      	ldr	r0, [pc, #24]	; (8009cc8 <RegInt_setregf+0x78>)
 8009cae:	f00c f81f 	bl	8015cf0 <__wrap_printf>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	e7ef      	b.n	8009c96 <RegInt_setregf+0x46>
 8009cb6:	46c0      	nop			; (mov r8, r8)
 8009cb8:	080167d0 	.word	0x080167d0
 8009cbc:	0801d2c3 	.word	0x0801d2c3
 8009cc0:	0801e6f0 	.word	0x0801e6f0
 8009cc4:	0801d2db 	.word	0x0801d2db
 8009cc8:	0801eb0c 	.word	0x0801eb0c

08009ccc <stopService>:
void stopService(void){
 8009ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cce:	46c6      	mov	lr, r8
 8009cd0:	b500      	push	{lr}
    DBG_PRINTLN("stopping service");
 8009cd2:	4b3c      	ldr	r3, [pc, #240]	; (8009dc4 <stopService+0xf8>)
void stopService(void){
 8009cd4:	b082      	sub	sp, #8
    DBG_PRINTLN("stopping service");
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	4698      	mov	r8, r3
 8009cda:	f00c f809 	bl	8015cf0 <__wrap_printf>
 8009cde:	483a      	ldr	r0, [pc, #232]	; (8009dc8 <stopService+0xfc>)
 8009ce0:	f00c f806 	bl	8015cf0 <__wrap_printf>
 8009ce4:	4d39      	ldr	r5, [pc, #228]	; (8009dcc <stopService+0x100>)
 8009ce6:	4c3a      	ldr	r4, [pc, #232]	; (8009dd0 <stopService+0x104>)
 8009ce8:	4a3a      	ldr	r2, [pc, #232]	; (8009dd4 <stopService+0x108>)
 8009cea:	0029      	movs	r1, r5
 8009cec:	0020      	movs	r0, r4
 8009cee:	f00b ffff 	bl	8015cf0 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8009cf2:	2002      	movs	r0, #2
 8009cf4:	f7ff fe56 	bl	80099a4 <RegInt_getreg>
    if(service_type == 0x02){handle = envelope_handle;}
 8009cf8:	2802      	cmp	r0, #2
 8009cfa:	d143      	bne.n	8009d84 <stopService+0xb8>
 8009cfc:	4b36      	ldr	r3, [pc, #216]	; (8009dd8 <stopService+0x10c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	9301      	str	r3, [sp, #4]
	if(acc_service_deactivate(handle)){
 8009d02:	9801      	ldr	r0, [sp, #4]
 8009d04:	f7ff fcc8 	bl	8009698 <acc_service_deactivate>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d041      	beq.n	8009d90 <stopService+0xc4>
		acc_service_destroy(&handle);	
 8009d0c:	a801      	add	r0, sp, #4
 8009d0e:	f7ff fd05 	bl	800971c <acc_service_destroy>
		data_free();//maybe a memory leak?
 8009d12:	f7f7 fe65 	bl	80019e0 <data_free>
		DBG_PRINTLN("sparse service destroyed");
 8009d16:	4640      	mov	r0, r8
 8009d18:	f00b ffea 	bl	8015cf0 <__wrap_printf>
 8009d1c:	482f      	ldr	r0, [pc, #188]	; (8009ddc <stopService+0x110>)
 8009d1e:	f00b ffe7 	bl	8015cf0 <__wrap_printf>
 8009d22:	22ab      	movs	r2, #171	; 0xab
 8009d24:	0029      	movs	r1, r5
 8009d26:	0092      	lsls	r2, r2, #2
 8009d28:	0020      	movs	r0, r4
 8009d2a:	f00b ffe1 	bl	8015cf0 <__wrap_printf>
	if(far_active){
 8009d2e:	4e2c      	ldr	r6, [pc, #176]	; (8009de0 <stopService+0x114>)
 8009d30:	3650      	adds	r6, #80	; 0x50
 8009d32:	7833      	ldrb	r3, [r6, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d018      	beq.n	8009d6a <stopService+0x9e>
	if(acc_service_deactivate(sparse_handle_far)){
 8009d38:	4f2a      	ldr	r7, [pc, #168]	; (8009de4 <stopService+0x118>)
 8009d3a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009d3c:	f7ff fcac 	bl	8009698 <acc_service_deactivate>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d031      	beq.n	8009da8 <stopService+0xdc>
		acc_service_destroy(&sparse_handle_far);	
 8009d44:	0038      	movs	r0, r7
 8009d46:	3078      	adds	r0, #120	; 0x78
 8009d48:	f7ff fce8 	bl	800971c <acc_service_destroy>
		data_free();
 8009d4c:	f7f7 fe48 	bl	80019e0 <data_free>
		far_active = 0;
 8009d50:	2300      	movs	r3, #0
		DBG_PRINTLN("far sparse service destroyed");
 8009d52:	4640      	mov	r0, r8
		far_active = 0;
 8009d54:	7033      	strb	r3, [r6, #0]
		DBG_PRINTLN("far sparse service destroyed");
 8009d56:	f00b ffcb 	bl	8015cf0 <__wrap_printf>
 8009d5a:	4823      	ldr	r0, [pc, #140]	; (8009de8 <stopService+0x11c>)
 8009d5c:	f00b ffc8 	bl	8015cf0 <__wrap_printf>
 8009d60:	4a22      	ldr	r2, [pc, #136]	; (8009dec <stopService+0x120>)
 8009d62:	0029      	movs	r1, r5
 8009d64:	0020      	movs	r0, r4
 8009d66:	f00b ffc3 	bl	8015cf0 <__wrap_printf>
    uint32_t setbits = RegInt_getreg(0x06);
 8009d6a:	2006      	movs	r0, #6
 8009d6c:	f7ff fe1a 	bl	80099a4 <RegInt_getreg>
    setbits &= 0xFFFFFFFE;
 8009d70:	2201      	movs	r2, #1
 8009d72:	0001      	movs	r1, r0
    RegInt_setregf(0x06, setbits, 1);
 8009d74:	2006      	movs	r0, #6
    setbits &= 0xFFFFFFFE;
 8009d76:	4391      	bics	r1, r2
    RegInt_setregf(0x06, setbits, 1);
 8009d78:	f7ff ff6a 	bl	8009c50 <RegInt_setregf>
}
 8009d7c:	b002      	add	sp, #8
 8009d7e:	bc04      	pop	{r2}
 8009d80:	4690      	mov	r8, r2
 8009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(service_type == 0x04){handle = sparse_handle;}
 8009d84:	2804      	cmp	r0, #4
 8009d86:	d1f9      	bne.n	8009d7c <stopService+0xb0>
 8009d88:	4b13      	ldr	r3, [pc, #76]	; (8009dd8 <stopService+0x10c>)
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	e7b8      	b.n	8009d02 <stopService+0x36>
		ERR_PRINTLN("sparse service deactivation fail");
 8009d90:	4817      	ldr	r0, [pc, #92]	; (8009df0 <stopService+0x124>)
 8009d92:	f00b ffad 	bl	8015cf0 <__wrap_printf>
 8009d96:	4817      	ldr	r0, [pc, #92]	; (8009df4 <stopService+0x128>)
 8009d98:	f00b ffaa 	bl	8015cf0 <__wrap_printf>
 8009d9c:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <stopService+0x12c>)
 8009d9e:	0029      	movs	r1, r5
 8009da0:	0020      	movs	r0, r4
 8009da2:	f00b ffa5 	bl	8015cf0 <__wrap_printf>
 8009da6:	e7c2      	b.n	8009d2e <stopService+0x62>
		ERR_PRINTLN("far sparse service deactivation fail");
 8009da8:	4811      	ldr	r0, [pc, #68]	; (8009df0 <stopService+0x124>)
 8009daa:	f00b ffa1 	bl	8015cf0 <__wrap_printf>
 8009dae:	4813      	ldr	r0, [pc, #76]	; (8009dfc <stopService+0x130>)
 8009db0:	f00b ff9e 	bl	8015cf0 <__wrap_printf>
 8009db4:	22ae      	movs	r2, #174	; 0xae
 8009db6:	0029      	movs	r1, r5
 8009db8:	0092      	lsls	r2, r2, #2
 8009dba:	0020      	movs	r0, r4
 8009dbc:	f00b ff98 	bl	8015cf0 <__wrap_printf>
 8009dc0:	e7d3      	b.n	8009d6a <stopService+0x9e>
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	0801d2c3 	.word	0x0801d2c3
 8009dc8:	0801e6fd 	.word	0x0801e6fd
 8009dcc:	0801d2db 	.word	0x0801d2db
 8009dd0:	0801eb0c 	.word	0x0801eb0c
 8009dd4:	000002a1 	.word	0x000002a1
 8009dd8:	2000038c 	.word	0x2000038c
 8009ddc:	0801e712 	.word	0x0801e712
 8009de0:	2000018c 	.word	0x2000018c
 8009de4:	2000030c 	.word	0x2000030c
 8009de8:	0801e70e 	.word	0x0801e70e
 8009dec:	000002b6 	.word	0x000002b6
 8009df0:	0801ead4 	.word	0x0801ead4
 8009df4:	0801e72f 	.word	0x0801e72f
 8009df8:	000002ae 	.word	0x000002ae
 8009dfc:	0801e72b 	.word	0x0801e72b

08009e00 <Reg_store_sparse_metadata>:
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8009e00:	b084      	sub	sp, #16
 8009e02:	b510      	push	{r4, lr}
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	9103      	str	r1, [sp, #12]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8009e08:	9802      	ldr	r0, [sp, #8]
 8009e0a:	491e      	ldr	r1, [pc, #120]	; (8009e84 <Reg_store_sparse_metadata+0x84>)
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8009e0c:	9305      	str	r3, [sp, #20]
 8009e0e:	9204      	str	r2, [sp, #16]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8009e10:	f006 fe6e 	bl	8010af0 <__aeabi_fmul>
 8009e14:	f007 fbac 	bl	8011570 <__aeabi_f2uiz>
 8009e18:	2201      	movs	r2, #1
 8009e1a:	0001      	movs	r1, r0
 8009e1c:	2081      	movs	r0, #129	; 0x81
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8009e1e:	9c07      	ldr	r4, [sp, #28]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8009e20:	f7ff ff16 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8009e24:	4917      	ldr	r1, [pc, #92]	; (8009e84 <Reg_store_sparse_metadata+0x84>)
 8009e26:	9803      	ldr	r0, [sp, #12]
 8009e28:	f006 fe62 	bl	8010af0 <__aeabi_fmul>
 8009e2c:	f007 fba0 	bl	8011570 <__aeabi_f2uiz>
 8009e30:	2201      	movs	r2, #1
 8009e32:	0001      	movs	r1, r0
 8009e34:	2082      	movs	r0, #130	; 0x82
 8009e36:	f7ff ff0b 	bl	8009c50 <RegInt_setregf>
	uint32_t bufflen = metadata.data_length;
 8009e3a:	ab02      	add	r3, sp, #8
 8009e3c:	8919      	ldrh	r1, [r3, #8]
	if(metadata_far_ptr != NULL){
 8009e3e:	2c00      	cmp	r4, #0
 8009e40:	d001      	beq.n	8009e46 <Reg_store_sparse_metadata+0x46>
		bufflen += (*metadata_far_ptr).data_length;
 8009e42:	8923      	ldrh	r3, [r4, #8]
 8009e44:	18c9      	adds	r1, r1, r3
	RegInt_setregf(0x83, bufflen ,1);
 8009e46:	2201      	movs	r2, #1
 8009e48:	2083      	movs	r0, #131	; 0x83
 8009e4a:	f7ff ff01 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 8009e4e:	490d      	ldr	r1, [pc, #52]	; (8009e84 <Reg_store_sparse_metadata+0x84>)
 8009e50:	9805      	ldr	r0, [sp, #20]
 8009e52:	f006 fe4d 	bl	8010af0 <__aeabi_fmul>
 8009e56:	f007 fb8b 	bl	8011570 <__aeabi_f2uiz>
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	0001      	movs	r1, r0
 8009e5e:	2084      	movs	r0, #132	; 0x84
 8009e60:	f7ff fef6 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 8009e64:	4907      	ldr	r1, [pc, #28]	; (8009e84 <Reg_store_sparse_metadata+0x84>)
 8009e66:	9806      	ldr	r0, [sp, #24]
 8009e68:	f006 fe42 	bl	8010af0 <__aeabi_fmul>
 8009e6c:	f007 fb80 	bl	8011570 <__aeabi_f2uiz>
 8009e70:	2201      	movs	r2, #1
 8009e72:	0001      	movs	r1, r0
 8009e74:	2085      	movs	r0, #133	; 0x85
 8009e76:	f7ff feeb 	bl	8009c50 <RegInt_setregf>
}
 8009e7a:	bc10      	pop	{r4}
 8009e7c:	bc08      	pop	{r3}
 8009e7e:	b004      	add	sp, #16
 8009e80:	4718      	bx	r3
 8009e82:	46c0      	nop			; (mov r8, r8)
 8009e84:	447a0000 	.word	0x447a0000

08009e88 <createService>:
int8_t createService(void){
 8009e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8a:	46de      	mov	lr, fp
 8009e8c:	4657      	mov	r7, sl
 8009e8e:	464e      	mov	r6, r9
 8009e90:	4645      	mov	r5, r8
 8009e92:	b5e0      	push	{r5, r6, r7, lr}
    DBG_PRINTLN("creating service");
 8009e94:	4fb2      	ldr	r7, [pc, #712]	; (800a160 <createService+0x2d8>)
int8_t createService(void){
 8009e96:	b083      	sub	sp, #12
    DBG_PRINTLN("creating service");
 8009e98:	0038      	movs	r0, r7
 8009e9a:	f00b ff29 	bl	8015cf0 <__wrap_printf>
 8009e9e:	48b1      	ldr	r0, [pc, #708]	; (800a164 <createService+0x2dc>)
 8009ea0:	f00b ff26 	bl	8015cf0 <__wrap_printf>
 8009ea4:	4db0      	ldr	r5, [pc, #704]	; (800a168 <createService+0x2e0>)
 8009ea6:	4eb1      	ldr	r6, [pc, #708]	; (800a16c <createService+0x2e4>)
 8009ea8:	4ab1      	ldr	r2, [pc, #708]	; (800a170 <createService+0x2e8>)
 8009eaa:	0029      	movs	r1, r5
 8009eac:	0030      	movs	r0, r6
 8009eae:	f00b ff1f 	bl	8015cf0 <__wrap_printf>
    uint32_t service_type = RegInt_getreg(0x02);
 8009eb2:	2002      	movs	r0, #2
 8009eb4:	f7ff fd76 	bl	80099a4 <RegInt_getreg>
    if(service_type == 0x02){success = createEnvelopeService();}
 8009eb8:	2802      	cmp	r0, #2
 8009eba:	d000      	beq.n	8009ebe <createService+0x36>
 8009ebc:	e1fd      	b.n	800a2ba <createService+0x432>
    updateEnvelopeConfig(envelope_config);
 8009ebe:	4bad      	ldr	r3, [pc, #692]	; (800a174 <createService+0x2ec>)
    DBG_PRINTLN("updating config");
 8009ec0:	0038      	movs	r0, r7
    updateEnvelopeConfig(envelope_config);
 8009ec2:	69dc      	ldr	r4, [r3, #28]
 8009ec4:	4699      	mov	r9, r3
    DBG_PRINTLN("updating config");
 8009ec6:	f00b ff13 	bl	8015cf0 <__wrap_printf>
 8009eca:	48ab      	ldr	r0, [pc, #684]	; (800a178 <createService+0x2f0>)
 8009ecc:	f00b ff10 	bl	8015cf0 <__wrap_printf>
 8009ed0:	22f5      	movs	r2, #245	; 0xf5
 8009ed2:	0029      	movs	r1, r5
 8009ed4:	0052      	lsls	r2, r2, #1
 8009ed6:	0030      	movs	r0, r6
 8009ed8:	f00b ff0a 	bl	8015cf0 <__wrap_printf>
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8009edc:	2028      	movs	r0, #40	; 0x28
 8009ede:	f7ff fd61 	bl	80099a4 <RegInt_getreg>
 8009ee2:	b2c1      	uxtb	r1, r0
 8009ee4:	0020      	movs	r0, r4
 8009ee6:	f7f7 f947 	bl	8001178 <acc_service_profile_set>
	uint32_t rep_mode = RegInt_getreg(0x22); 
 8009eea:	2022      	movs	r0, #34	; 0x22
 8009eec:	f7ff fd5a 	bl	80099a4 <RegInt_getreg>
	if(rep_mode == 0x01){
 8009ef0:	2801      	cmp	r0, #1
 8009ef2:	d000      	beq.n	8009ef6 <createService+0x6e>
 8009ef4:	e109      	b.n	800a10a <createService+0x282>
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8009ef6:	3022      	adds	r0, #34	; 0x22
 8009ef8:	f7ff fd54 	bl	80099a4 <RegInt_getreg>
 8009efc:	4682      	mov	sl, r0
 8009efe:	0020      	movs	r0, r4
 8009f00:	f7f7 f8f0 	bl	80010e4 <acc_service_get_base_configuration>
 8009f04:	4680      	mov	r8, r0
 8009f06:	f7f6 fe5f 	bl	8000bc8 <configuration_is_valid>
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d00a      	beq.n	8009f24 <createService+0x9c>
 8009f0e:	2303      	movs	r3, #3
 8009f10:	4642      	mov	r2, r8
 8009f12:	4650      	mov	r0, sl
 8009f14:	7113      	strb	r3, [r2, #4]
 8009f16:	f007 fd4b 	bl	80119b0 <__aeabi_ui2f>
 8009f1a:	4998      	ldr	r1, [pc, #608]	; (800a17c <createService+0x2f4>)
 8009f1c:	f006 fcd6 	bl	80108cc <__aeabi_fdiv>
 8009f20:	4643      	mov	r3, r8
 8009f22:	6098      	str	r0, [r3, #8]
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8009f24:	2026      	movs	r0, #38	; 0x26
 8009f26:	f7ff fd3d 	bl	80099a4 <RegInt_getreg>
 8009f2a:	4682      	mov	sl, r0
 8009f2c:	0020      	movs	r0, r4
 8009f2e:	f7f7 f8d9 	bl	80010e4 <acc_service_get_base_configuration>
 8009f32:	4680      	mov	r8, r0
 8009f34:	f7f6 fe48 	bl	8000bc8 <configuration_is_valid>
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	d005      	beq.n	8009f48 <createService+0xc0>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	1e53      	subs	r3, r2, #1
 8009f40:	419a      	sbcs	r2, r3
 8009f42:	4643      	mov	r3, r8
 8009f44:	3347      	adds	r3, #71	; 0x47
 8009f46:	701a      	strb	r2, [r3, #0]
	acc_service_envelope_downsampling_factor_set(config, RegInt_getreg(0x29));
 8009f48:	2029      	movs	r0, #41	; 0x29
 8009f4a:	f7ff fd2b 	bl	80099a4 <RegInt_getreg>
 8009f4e:	4680      	mov	r8, r0
 8009f50:	0020      	movs	r0, r4
 8009f52:	f7f7 f9e9 	bl	8001328 <get_and_validate_envelope_configuration>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d004      	beq.n	8009f64 <createService+0xdc>
 8009f5a:	4643      	mov	r3, r8
 8009f5c:	6920      	ldr	r0, [r4, #16]
 8009f5e:	b299      	uxth	r1, r3
 8009f60:	f7f6 fe5e 	bl	8000c20 <acc_base_configuration_downsampling_factor_set>
	acc_service_power_save_mode_set(config, RegInt_getreg(0x25));
 8009f64:	2025      	movs	r0, #37	; 0x25
 8009f66:	f7ff fd1d 	bl	80099a4 <RegInt_getreg>
 8009f6a:	4682      	mov	sl, r0
 8009f6c:	0020      	movs	r0, r4
 8009f6e:	f7f7 f8b9 	bl	80010e4 <acc_service_get_base_configuration>
 8009f72:	4680      	mov	r8, r0
 8009f74:	f7f6 fe28 	bl	8000bc8 <configuration_is_valid>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d002      	beq.n	8009f82 <createService+0xfa>
 8009f7c:	4643      	mov	r3, r8
 8009f7e:	4652      	mov	r2, sl
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8009f82:	2033      	movs	r0, #51	; 0x33
 8009f84:	f7ff fd0e 	bl	80099a4 <RegInt_getreg>
 8009f88:	4682      	mov	sl, r0
 8009f8a:	0020      	movs	r0, r4
 8009f8c:	f7f7 f8aa 	bl	80010e4 <acc_service_get_base_configuration>
 8009f90:	4680      	mov	r8, r0
 8009f92:	f7f6 fe19 	bl	8000bc8 <configuration_is_valid>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d005      	beq.n	8009fa6 <createService+0x11e>
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	1e53      	subs	r3, r2, #1
 8009f9e:	419a      	sbcs	r2, r3
 8009fa0:	4643      	mov	r3, r8
 8009fa2:	334e      	adds	r3, #78	; 0x4e
 8009fa4:	701a      	strb	r2, [r3, #0]
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 8009fa6:	2020      	movs	r0, #32
 8009fa8:	f7ff fcfc 	bl	80099a4 <RegInt_getreg>
 8009fac:	4682      	mov	sl, r0
 8009fae:	0020      	movs	r0, r4
 8009fb0:	f7f7 f898 	bl	80010e4 <acc_service_get_base_configuration>
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	f7f6 fe07 	bl	8000bc8 <configuration_is_valid>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d007      	beq.n	8009fce <createService+0x146>
 8009fbe:	4650      	mov	r0, sl
 8009fc0:	f007 fcf6 	bl	80119b0 <__aeabi_ui2f>
 8009fc4:	496d      	ldr	r1, [pc, #436]	; (800a17c <createService+0x2f4>)
 8009fc6:	f006 fc81 	bl	80108cc <__aeabi_fdiv>
 8009fca:	4643      	mov	r3, r8
 8009fcc:	6258      	str	r0, [r3, #36]	; 0x24
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 8009fce:	2021      	movs	r0, #33	; 0x21
 8009fd0:	f7ff fce8 	bl	80099a4 <RegInt_getreg>
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	0020      	movs	r0, r4
 8009fd8:	f7f7 f884 	bl	80010e4 <acc_service_get_base_configuration>
 8009fdc:	4680      	mov	r8, r0
 8009fde:	f7f6 fdf3 	bl	8000bc8 <configuration_is_valid>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d007      	beq.n	8009ff6 <createService+0x16e>
 8009fe6:	4650      	mov	r0, sl
 8009fe8:	f007 fce2 	bl	80119b0 <__aeabi_ui2f>
 8009fec:	4963      	ldr	r1, [pc, #396]	; (800a17c <createService+0x2f4>)
 8009fee:	f006 fc6d 	bl	80108cc <__aeabi_fdiv>
 8009ff2:	4643      	mov	r3, r8
 8009ff4:	6298      	str	r0, [r3, #40]	; 0x28
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8009ff6:	2024      	movs	r0, #36	; 0x24
 8009ff8:	f7ff fcd4 	bl	80099a4 <RegInt_getreg>
 8009ffc:	f007 fcd8 	bl	80119b0 <__aeabi_ui2f>
 800a000:	495e      	ldr	r1, [pc, #376]	; (800a17c <createService+0x2f4>)
 800a002:	f006 fc63 	bl	80108cc <__aeabi_fdiv>
 800a006:	1c01      	adds	r1, r0, #0
 800a008:	0020      	movs	r0, r4
 800a00a:	f7f7 f8cf 	bl	80011ac <acc_service_receiver_gain_set>
	acc_service_hw_accelerated_average_samples_set (config, RegInt_getreg(0x30));
 800a00e:	2030      	movs	r0, #48	; 0x30
 800a010:	f7ff fcc8 	bl	80099a4 <RegInt_getreg>
 800a014:	4680      	mov	r8, r0
 800a016:	0020      	movs	r0, r4
 800a018:	f7f7 f864 	bl	80010e4 <acc_service_get_base_configuration>
 800a01c:	4682      	mov	sl, r0
 800a01e:	f7f6 fdd3 	bl	8000bc8 <configuration_is_valid>
 800a022:	2800      	cmp	r0, #0
 800a024:	d003      	beq.n	800a02e <createService+0x1a6>
 800a026:	4643      	mov	r3, r8
 800a028:	4652      	mov	r2, sl
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	8793      	strh	r3, [r2, #60]	; 0x3c
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 800a02e:	2031      	movs	r0, #49	; 0x31
 800a030:	f7ff fcb8 	bl	80099a4 <RegInt_getreg>
 800a034:	4682      	mov	sl, r0
 800a036:	0020      	movs	r0, r4
 800a038:	f7f7 f976 	bl	8001328 <get_and_validate_envelope_configuration>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d00d      	beq.n	800a05c <createService+0x1d4>
 800a040:	0020      	movs	r0, r4
 800a042:	f7f7 f84f 	bl	80010e4 <acc_service_get_base_configuration>
 800a046:	4680      	mov	r8, r0
 800a048:	f7f6 fdbe 	bl	8000bc8 <configuration_is_valid>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d005      	beq.n	800a05c <createService+0x1d4>
 800a050:	4652      	mov	r2, sl
 800a052:	1e53      	subs	r3, r2, #1
 800a054:	419a      	sbcs	r2, r3
 800a056:	4643      	mov	r3, r8
 800a058:	3349      	adds	r3, #73	; 0x49
 800a05a:	701a      	strb	r2, [r3, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800a05c:	2032      	movs	r0, #50	; 0x32
 800a05e:	f7ff fca1 	bl	80099a4 <RegInt_getreg>
 800a062:	1e41      	subs	r1, r0, #1
 800a064:	4188      	sbcs	r0, r1
 800a066:	b2c1      	uxtb	r1, r0
 800a068:	0020      	movs	r0, r4
 800a06a:	f7f7 f873 	bl	8001154 <acc_service_maximize_signal_attenuation_set>
    acc_service_mur_set (config, RegInt_getreg(0x34));
 800a06e:	2034      	movs	r0, #52	; 0x34
 800a070:	f7ff fc98 	bl	80099a4 <RegInt_getreg>
 800a074:	4682      	mov	sl, r0
 800a076:	0020      	movs	r0, r4
 800a078:	f7f7 f834 	bl	80010e4 <acc_service_get_base_configuration>
 800a07c:	4680      	mov	r8, r0
 800a07e:	2800      	cmp	r0, #0
 800a080:	d04c      	beq.n	800a11c <createService+0x294>
 800a082:	f7f6 fda1 	bl	8000bc8 <configuration_is_valid>
 800a086:	2800      	cmp	r0, #0
 800a088:	d003      	beq.n	800a092 <createService+0x20a>
 800a08a:	4643      	mov	r3, r8
 800a08c:	4652      	mov	r2, sl
 800a08e:	3332      	adds	r3, #50	; 0x32
 800a090:	701a      	strb	r2, [r3, #0]
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 800a092:	2040      	movs	r0, #64	; 0x40
 800a094:	f7ff fc86 	bl	80099a4 <RegInt_getreg>
 800a098:	4680      	mov	r8, r0
 800a09a:	0020      	movs	r0, r4
 800a09c:	f7f7 f944 	bl	8001328 <get_and_validate_envelope_configuration>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d018      	beq.n	800a0d6 <createService+0x24e>
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	f007 fc83 	bl	80119b0 <__aeabi_ui2f>
 800a0aa:	4934      	ldr	r1, [pc, #208]	; (800a17c <createService+0x2f4>)
 800a0ac:	f006 fc0e 	bl	80108cc <__aeabi_fdiv>
 800a0b0:	21fe      	movs	r1, #254	; 0xfe
 800a0b2:	0589      	lsls	r1, r1, #22
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	f007 fa27 	bl	8011508 <__aeabi_fcmpgt>
 800a0ba:	4682      	mov	sl, r0
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d035      	beq.n	800a12c <createService+0x2a4>
 800a0c0:	4b2f      	ldr	r3, [pc, #188]	; (800a180 <createService+0x2f8>)
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	3230      	adds	r2, #48	; 0x30
 800a0c6:	7812      	ldrb	r2, [r2, #0]
 800a0c8:	2a00      	cmp	r2, #0
 800a0ca:	d004      	beq.n	800a0d6 <createService+0x24e>
 800a0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ce:	4a2d      	ldr	r2, [pc, #180]	; (800a184 <createService+0x2fc>)
 800a0d0:	492d      	ldr	r1, [pc, #180]	; (800a188 <createService+0x300>)
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	4798      	blx	r3
   	envelope_handle = acc_service_create(envelope_config);	
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	69d8      	ldr	r0, [r3, #28]
 800a0da:	f7f8 fb03 	bl	80026e4 <acc_service_create>
 800a0de:	4c2b      	ldr	r4, [pc, #172]	; (800a18c <createService+0x304>)
 800a0e0:	6020      	str	r0, [r4, #0]
	if (envelope_handle == NULL){//handles error
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d158      	bne.n	800a198 <createService+0x310>
		ERR_PRINTLN("envelope service creation failed");
 800a0e6:	482a      	ldr	r0, [pc, #168]	; (800a190 <createService+0x308>)
 800a0e8:	f00b fe02 	bl	8015cf0 <__wrap_printf>
 800a0ec:	4829      	ldr	r0, [pc, #164]	; (800a194 <createService+0x30c>)
 800a0ee:	f00b fdff 	bl	8015cf0 <__wrap_printf>
 800a0f2:	228b      	movs	r2, #139	; 0x8b
 800a0f4:	0029      	movs	r1, r5
 800a0f6:	0092      	lsls	r2, r2, #2
 800a0f8:	0030      	movs	r0, r6
 800a0fa:	f00b fdf9 	bl	8015cf0 <__wrap_printf>
        Reg_regor(0x06, 0x00080000);
 800a0fe:	2080      	movs	r0, #128	; 0x80
 800a100:	0300      	lsls	r0, r0, #12
 800a102:	f002 fef3 	bl	800ceec <Reg_regor.constprop.73>
        return 0;
 800a106:	2000      	movs	r0, #0
 800a108:	e1da      	b.n	800a4c0 <createService+0x638>
	}else if (rep_mode == 0x02){
 800a10a:	2802      	cmp	r0, #2
 800a10c:	d000      	beq.n	800a110 <createService+0x288>
 800a10e:	e709      	b.n	8009f24 <createService+0x9c>
 800a110:	0020      	movs	r0, r4
 800a112:	f7f6 ffe7 	bl	80010e4 <acc_service_get_base_configuration>
 800a116:	f7f6 fe36 	bl	8000d86 <acc_base_configuration_repetition_mode_on_demand_set>
 800a11a:	e703      	b.n	8009f24 <createService+0x9c>
 800a11c:	4b18      	ldr	r3, [pc, #96]	; (800a180 <createService+0x2f8>)
 800a11e:	3330      	adds	r3, #48	; 0x30
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0b5      	beq.n	800a092 <createService+0x20a>
 800a126:	f7f6 ff8d 	bl	8001044 <acc_service_maximize_signal_attenuation_set.part.8>
 800a12a:	e7b2      	b.n	800a092 <createService+0x20a>
 800a12c:	0020      	movs	r0, r4
 800a12e:	f7f6 ffd9 	bl	80010e4 <acc_service_get_base_configuration>
 800a132:	0004      	movs	r4, r0
 800a134:	f7f6 fd48 	bl	8000bc8 <configuration_is_valid>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d0cc      	beq.n	800a0d6 <createService+0x24e>
 800a13c:	20fe      	movs	r0, #254	; 0xfe
 800a13e:	4641      	mov	r1, r8
 800a140:	0580      	lsls	r0, r0, #22
 800a142:	f006 fe07 	bl	8010d54 <__aeabi_fsub>
 800a146:	2301      	movs	r3, #1
 800a148:	6160      	str	r0, [r4, #20]
 800a14a:	2100      	movs	r1, #0
 800a14c:	4640      	mov	r0, r8
 800a14e:	469b      	mov	fp, r3
 800a150:	f007 f9c0 	bl	80114d4 <__aeabi_fcmpeq>
 800a154:	2800      	cmp	r0, #0
 800a156:	d000      	beq.n	800a15a <createService+0x2d2>
 800a158:	46d3      	mov	fp, sl
 800a15a:	465b      	mov	r3, fp
 800a15c:	7623      	strb	r3, [r4, #24]
 800a15e:	e7ba      	b.n	800a0d6 <createService+0x24e>
 800a160:	0801d2c3 	.word	0x0801d2c3
 800a164:	0801e750 	.word	0x0801e750
 800a168:	0801d2db 	.word	0x0801d2db
 800a16c:	0801eb0c 	.word	0x0801eb0c
 800a170:	00000211 	.word	0x00000211
 800a174:	2000030c 	.word	0x2000030c
 800a178:	0801e6bb 	.word	0x0801e6bb
 800a17c:	447a0000 	.word	0x447a0000
 800a180:	200005d8 	.word	0x200005d8
 800a184:	0801e761 	.word	0x0801e761
 800a188:	0801cfd0 	.word	0x0801cfd0
 800a18c:	2000038c 	.word	0x2000038c
 800a190:	0801ead4 	.word	0x0801ead4
 800a194:	0801e7a3 	.word	0x0801e7a3
 800a198:	7a03      	ldrb	r3, [r0, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d113      	bne.n	800a1c6 <createService+0x33e>
 800a19e:	6903      	ldr	r3, [r0, #16]
 800a1a0:	49cb      	ldr	r1, [pc, #812]	; (800a4d0 <createService+0x648>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a1a8:	60a2      	str	r2, [r4, #8]
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	60e2      	str	r2, [r4, #12]
 800a1ae:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800a1b0:	8222      	strh	r2, [r4, #16]
 800a1b2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800a1b4:	3a01      	subs	r2, #1
 800a1b6:	8262      	strh	r2, [r4, #18]
 800a1b8:	f006 fc9a 	bl	8010af0 <__aeabi_fmul>
 800a1bc:	21fc      	movs	r1, #252	; 0xfc
 800a1be:	0589      	lsls	r1, r1, #22
 800a1c0:	f006 fc96 	bl	8010af0 <__aeabi_fmul>
 800a1c4:	6160      	str	r0, [r4, #20]
    sweeps = 1;
 800a1c6:	2001      	movs	r0, #1
    bins = envelope_metadata.data_length;
 800a1c8:	4bc2      	ldr	r3, [pc, #776]	; (800a4d4 <createService+0x64c>)
 800a1ca:	8a21      	ldrh	r1, [r4, #16]
    sweeps = 1;
 800a1cc:	8218      	strh	r0, [r3, #16]
    bins = envelope_metadata.data_length;
 800a1ce:	8259      	strh	r1, [r3, #18]
    return data_malloc(sweeps,bins);
 800a1d0:	f7f8 fcbc 	bl	8002b4c <data_malloc>
        if(envelope_data_malloc() == -1){
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d10c      	bne.n	800a1f2 <createService+0x36a>
            DBG_PRINTLN("data buffer allocation failed");
 800a1d8:	0038      	movs	r0, r7
 800a1da:	f00b fd89 	bl	8015cf0 <__wrap_printf>
 800a1de:	48be      	ldr	r0, [pc, #760]	; (800a4d8 <createService+0x650>)
 800a1e0:	f00b fd86 	bl	8015cf0 <__wrap_printf>
 800a1e4:	4abd      	ldr	r2, [pc, #756]	; (800a4dc <createService+0x654>)
 800a1e6:	0029      	movs	r1, r5
 800a1e8:	0030      	movs	r0, r6
 800a1ea:	f00b fd81 	bl	8015cf0 <__wrap_printf>
            stopService();
 800a1ee:	f7ff fd6d 	bl	8009ccc <stopService>
 800a1f2:	68e3      	ldr	r3, [r4, #12]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 800a1f4:	49ba      	ldr	r1, [pc, #744]	; (800a4e0 <createService+0x658>)
 800a1f6:	68a0      	ldr	r0, [r4, #8]
 800a1f8:	4698      	mov	r8, r3
 800a1fa:	f006 fc79 	bl	8010af0 <__aeabi_fmul>
 800a1fe:	f007 f9b7 	bl	8011570 <__aeabi_f2uiz>
 800a202:	2201      	movs	r2, #1
 800a204:	0001      	movs	r1, r0
 800a206:	2081      	movs	r0, #129	; 0x81
 800a208:	8a27      	ldrh	r7, [r4, #16]
 800a20a:	8a66      	ldrh	r6, [r4, #18]
 800a20c:	6965      	ldr	r5, [r4, #20]
 800a20e:	f7ff fd1f 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800a212:	49b3      	ldr	r1, [pc, #716]	; (800a4e0 <createService+0x658>)
 800a214:	4640      	mov	r0, r8
 800a216:	f006 fc6b 	bl	8010af0 <__aeabi_fmul>
 800a21a:	f007 f9a9 	bl	8011570 <__aeabi_f2uiz>
 800a21e:	2201      	movs	r2, #1
 800a220:	0001      	movs	r1, r0
 800a222:	2082      	movs	r0, #130	; 0x82
 800a224:	f7ff fd14 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x83, (uint32_t)metadata.data_length ,1);
 800a228:	0039      	movs	r1, r7
 800a22a:	2201      	movs	r2, #1
 800a22c:	2083      	movs	r0, #131	; 0x83
 800a22e:	f7ff fd0f 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x84, (uint32_t)metadata.stitch_count,1);
 800a232:	2201      	movs	r2, #1
 800a234:	0031      	movs	r1, r6
 800a236:	2084      	movs	r0, #132	; 0x84
 800a238:	f7ff fd0a 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1000.0f),1);
 800a23c:	49a8      	ldr	r1, [pc, #672]	; (800a4e0 <createService+0x658>)
 800a23e:	1c28      	adds	r0, r5, #0
 800a240:	f006 fc56 	bl	8010af0 <__aeabi_fmul>
 800a244:	f007 f994 	bl	8011570 <__aeabi_f2uiz>
 800a248:	2201      	movs	r2, #1
 800a24a:	0001      	movs	r1, r0
 800a24c:	2085      	movs	r0, #133	; 0x85
 800a24e:	f7ff fcff 	bl	8009c50 <RegInt_setregf>
 800a252:	68a3      	ldr	r3, [r4, #8]

void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
    printf("Envelope Serivce Metadata\n");
 800a254:	48a3      	ldr	r0, [pc, #652]	; (800a4e4 <createService+0x65c>)
 800a256:	4698      	mov	r8, r3
 800a258:	68e7      	ldr	r7, [r4, #12]
 800a25a:	8a26      	ldrh	r6, [r4, #16]
 800a25c:	8a65      	ldrh	r5, [r4, #18]
 800a25e:	6964      	ldr	r4, [r4, #20]
 800a260:	f00b fd34 	bl	8015ccc <__wrap_puts>
	printf("Start: %ld mm\n", (int32_t)(metadata.start_m * 1000.0f));
 800a264:	499e      	ldr	r1, [pc, #632]	; (800a4e0 <createService+0x658>)
 800a266:	4640      	mov	r0, r8
 800a268:	f006 fc42 	bl	8010af0 <__aeabi_fmul>
 800a26c:	f007 fb36 	bl	80118dc <__aeabi_f2iz>
 800a270:	0001      	movs	r1, r0
 800a272:	489d      	ldr	r0, [pc, #628]	; (800a4e8 <createService+0x660>)
 800a274:	f00b fd3c 	bl	8015cf0 <__wrap_printf>
    printf("Length: %lu mm\n", (uint32_t)(metadata.length_m * 1000.0f));
 800a278:	4999      	ldr	r1, [pc, #612]	; (800a4e0 <createService+0x658>)
 800a27a:	1c38      	adds	r0, r7, #0
 800a27c:	f006 fc38 	bl	8010af0 <__aeabi_fmul>
 800a280:	f007 f976 	bl	8011570 <__aeabi_f2uiz>
 800a284:	0001      	movs	r1, r0
 800a286:	4899      	ldr	r0, [pc, #612]	; (800a4ec <createService+0x664>)
 800a288:	f00b fd32 	bl	8015cf0 <__wrap_printf>
    printf("Data length: %lu\n", (uint32_t)metadata.data_length);
 800a28c:	0031      	movs	r1, r6
 800a28e:	4898      	ldr	r0, [pc, #608]	; (800a4f0 <createService+0x668>)
 800a290:	f00b fd2e 	bl	8015cf0 <__wrap_printf>
    printf("Sweep rate: %lu mHz\n", (uint32_t)(metadata.stitch_count));
 800a294:	0029      	movs	r1, r5
 800a296:	4897      	ldr	r0, [pc, #604]	; (800a4f4 <createService+0x66c>)
 800a298:	f00b fd2a 	bl	8015cf0 <__wrap_printf>
    printf("Step length: %lu mm\n", (uint32_t)(metadata.step_length_m * 1000.0f));
 800a29c:	4990      	ldr	r1, [pc, #576]	; (800a4e0 <createService+0x658>)
 800a29e:	1c20      	adds	r0, r4, #0
 800a2a0:	f006 fc26 	bl	8010af0 <__aeabi_fmul>
 800a2a4:	f007 f964 	bl	8011570 <__aeabi_f2uiz>
 800a2a8:	0001      	movs	r1, r0
 800a2aa:	4893      	ldr	r0, [pc, #588]	; (800a4f8 <createService+0x670>)
 800a2ac:	f00b fd20 	bl	8015cf0 <__wrap_printf>
        Reg_regor(0x06, 0x00000001);
 800a2b0:	2001      	movs	r0, #1
 800a2b2:	f002 fe1b 	bl	800ceec <Reg_regor.constprop.73>
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	e102      	b.n	800a4c0 <createService+0x638>
    else if(service_type == 0x04){success = createSparseService();}
 800a2ba:	2804      	cmp	r0, #4
 800a2bc:	d000      	beq.n	800a2c0 <createService+0x438>
 800a2be:	e0fa      	b.n	800a4b6 <createService+0x62e>
	uint32_t start_reg = roundDown(RegInt_getreg(0x20),60);
 800a2c0:	301c      	adds	r0, #28
 800a2c2:	f7ff fb6f 	bl	80099a4 <RegInt_getreg>
 800a2c6:	213c      	movs	r1, #60	; 0x3c
 800a2c8:	f7f7 fa8e 	bl	80017e8 <roundDown>
 800a2cc:	4680      	mov	r8, r0
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 800a2ce:	2021      	movs	r0, #33	; 0x21
 800a2d0:	f7ff fb68 	bl	80099a4 <RegInt_getreg>
 800a2d4:	213c      	movs	r1, #60	; 0x3c
 800a2d6:	f7f7 fa87 	bl	80017e8 <roundDown>
	if (len_reg < 1891){
 800a2da:	4b88      	ldr	r3, [pc, #544]	; (800a4fc <createService+0x674>)
	uint32_t len_reg = roundDown(RegInt_getreg(0x21),60);
 800a2dc:	0004      	movs	r4, r0
	if (len_reg < 1891){
 800a2de:	469a      	mov	sl, r3
 800a2e0:	4298      	cmp	r0, r3
 800a2e2:	d82a      	bhi.n	800a33a <createService+0x4b2>
		far_active = 0;
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4b7b      	ldr	r3, [pc, #492]	; (800a4d4 <createService+0x64c>)
        DBG_PRINTLN("updating sparse config");
 800a2e8:	0038      	movs	r0, r7
		far_active = 0;
 800a2ea:	4699      	mov	r9, r3
 800a2ec:	3350      	adds	r3, #80	; 0x50
 800a2ee:	701a      	strb	r2, [r3, #0]
        DBG_PRINTLN("updating sparse config");
 800a2f0:	f00b fcfe 	bl	8015cf0 <__wrap_printf>
 800a2f4:	4882      	ldr	r0, [pc, #520]	; (800a500 <createService+0x678>)
 800a2f6:	f00b fcfb 	bl	8015cf0 <__wrap_printf>
 800a2fa:	4a82      	ldr	r2, [pc, #520]	; (800a504 <createService+0x67c>)
 800a2fc:	0029      	movs	r1, r5
 800a2fe:	0030      	movs	r0, r6
 800a300:	f00b fcf6 	bl	8015cf0 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 800a304:	4643      	mov	r3, r8
 800a306:	b299      	uxth	r1, r3
 800a308:	464b      	mov	r3, r9
 800a30a:	b2a2      	uxth	r2, r4
 800a30c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a30e:	f7ff fb8b 	bl	8009a28 <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 800a312:	4c70      	ldr	r4, [pc, #448]	; (800a4d4 <createService+0x64c>)
 800a314:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a316:	f7f8 f9e5 	bl	80026e4 <acc_service_create>
 800a31a:	4b7b      	ldr	r3, [pc, #492]	; (800a508 <createService+0x680>)
 800a31c:	6058      	str	r0, [r3, #4]
	if (sparse_handle == NULL){//handles error
 800a31e:	2800      	cmp	r0, #0
 800a320:	d15a      	bne.n	800a3d8 <createService+0x550>
		ERR_PRINTLN("sparse service creation fail");
 800a322:	487a      	ldr	r0, [pc, #488]	; (800a50c <createService+0x684>)
 800a324:	f00b fce4 	bl	8015cf0 <__wrap_printf>
 800a328:	4879      	ldr	r0, [pc, #484]	; (800a510 <createService+0x688>)
 800a32a:	f00b fce1 	bl	8015cf0 <__wrap_printf>
 800a32e:	4a79      	ldr	r2, [pc, #484]	; (800a514 <createService+0x68c>)
 800a330:	0029      	movs	r1, r5
 800a332:	0030      	movs	r0, r6
 800a334:	f00b fcdc 	bl	8015cf0 <__wrap_printf>
 800a338:	e6e1      	b.n	800a0fe <createService+0x276>
	}else if (len_reg < 3811){
 800a33a:	4b77      	ldr	r3, [pc, #476]	; (800a518 <createService+0x690>)
 800a33c:	4298      	cmp	r0, r3
 800a33e:	d83e      	bhi.n	800a3be <createService+0x536>
		far_active = 1;
 800a340:	2201      	movs	r2, #1
 800a342:	4b64      	ldr	r3, [pc, #400]	; (800a4d4 <createService+0x64c>)
		DBG_PRINTLN("updating sparse config");
 800a344:	0038      	movs	r0, r7
		far_active = 1;
 800a346:	4699      	mov	r9, r3
 800a348:	3350      	adds	r3, #80	; 0x50
 800a34a:	701a      	strb	r2, [r3, #0]
		DBG_PRINTLN("updating sparse config");
 800a34c:	f00b fcd0 	bl	8015cf0 <__wrap_printf>
 800a350:	486b      	ldr	r0, [pc, #428]	; (800a500 <createService+0x678>)
 800a352:	f00b fccd 	bl	8015cf0 <__wrap_printf>
 800a356:	2292      	movs	r2, #146	; 0x92
 800a358:	0029      	movs	r1, r5
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	0030      	movs	r0, r6
 800a35e:	f00b fcc7 	bl	8015cf0 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 800a362:	4643      	mov	r3, r8
 800a364:	b29b      	uxth	r3, r3
 800a366:	0019      	movs	r1, r3
 800a368:	4698      	mov	r8, r3
 800a36a:	464b      	mov	r3, r9
 800a36c:	4652      	mov	r2, sl
 800a36e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a370:	f7ff fb5a 	bl	8009a28 <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 800a374:	0038      	movs	r0, r7
 800a376:	f00b fcbb 	bl	8015cf0 <__wrap_printf>
 800a37a:	4868      	ldr	r0, [pc, #416]	; (800a51c <createService+0x694>)
 800a37c:	f00b fcb8 	bl	8015cf0 <__wrap_printf>
 800a380:	4a67      	ldr	r2, [pc, #412]	; (800a520 <createService+0x698>)
 800a382:	0029      	movs	r1, r5
 800a384:	0030      	movs	r0, r6
 800a386:	f00b fcb3 	bl	8015cf0 <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 800a38a:	4b66      	ldr	r3, [pc, #408]	; (800a524 <createService+0x69c>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	d200      	bcs.n	800a392 <createService+0x50a>
 800a390:	001c      	movs	r4, r3
 800a392:	4b65      	ldr	r3, [pc, #404]	; (800a528 <createService+0x6a0>)
		DBG_PRINTINT(far_len);
 800a394:	4965      	ldr	r1, [pc, #404]	; (800a52c <createService+0x6a4>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 800a396:	469c      	mov	ip, r3
		DBG_PRINTINT(far_len);
 800a398:	4b65      	ldr	r3, [pc, #404]	; (800a530 <createService+0x6a8>)
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 800a39a:	4464      	add	r4, ip
 800a39c:	b2a4      	uxth	r4, r4
		DBG_PRINTINT(far_len);
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	0022      	movs	r2, r4
 800a3a2:	002b      	movs	r3, r5
 800a3a4:	4863      	ldr	r0, [pc, #396]	; (800a534 <createService+0x6ac>)
 800a3a6:	f00b fca3 	bl	8015cf0 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 800a3aa:	21f0      	movs	r1, #240	; 0xf0
 800a3ac:	4b62      	ldr	r3, [pc, #392]	; (800a538 <createService+0x6b0>)
 800a3ae:	00c9      	lsls	r1, r1, #3
 800a3b0:	4441      	add	r1, r8
 800a3b2:	b289      	uxth	r1, r1
 800a3b4:	0022      	movs	r2, r4
 800a3b6:	6998      	ldr	r0, [r3, #24]
 800a3b8:	f7ff fb36 	bl	8009a28 <updateSparseConfig>
 800a3bc:	e7a9      	b.n	800a312 <createService+0x48a>
		ERR_PRINTLN("sparse service creation failed (too long)");
 800a3be:	4853      	ldr	r0, [pc, #332]	; (800a50c <createService+0x684>)
 800a3c0:	f00b fc96 	bl	8015cf0 <__wrap_printf>
 800a3c4:	485d      	ldr	r0, [pc, #372]	; (800a53c <createService+0x6b4>)
 800a3c6:	f00b fc93 	bl	8015cf0 <__wrap_printf>
 800a3ca:	2294      	movs	r2, #148	; 0x94
 800a3cc:	0029      	movs	r1, r5
 800a3ce:	0092      	lsls	r2, r2, #2
 800a3d0:	0030      	movs	r0, r6
 800a3d2:	f00b fc8d 	bl	8015cf0 <__wrap_printf>
 800a3d6:	e692      	b.n	800a0fe <createService+0x276>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 800a3d8:	0021      	movs	r1, r4
 800a3da:	313c      	adds	r1, #60	; 0x3c
 800a3dc:	f7f6 ff4d 	bl	800127a <acc_service_sparse_get_metadata>
		if(!far_active){
 800a3e0:	0023      	movs	r3, r4
 800a3e2:	3350      	adds	r3, #80	; 0x50
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d111      	bne.n	800a40e <createService+0x586>
			if(sparse_data_malloc() == -1){
 800a3ea:	f7f8 fc31 	bl	8002c50 <sparse_data_malloc>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	d10d      	bne.n	800a40e <createService+0x586>
                DBG_PRINTLN("data buffer allocation failed");
 800a3f2:	0038      	movs	r0, r7
 800a3f4:	f00b fc7c 	bl	8015cf0 <__wrap_printf>
 800a3f8:	4837      	ldr	r0, [pc, #220]	; (800a4d8 <createService+0x650>)
 800a3fa:	f00b fc79 	bl	8015cf0 <__wrap_printf>
 800a3fe:	2297      	movs	r2, #151	; 0x97
 800a400:	0029      	movs	r1, r5
 800a402:	0092      	lsls	r2, r2, #2
 800a404:	0030      	movs	r0, r6
 800a406:	f00b fc73 	bl	8015cf0 <__wrap_printf>
                stopService();
 800a40a:	f7ff fc5f 	bl	8009ccc <stopService>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 800a40e:	2300      	movs	r3, #0
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a418:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a41a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a41c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a41e:	f7ff fcef 	bl	8009e00 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 800a422:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a428:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a42a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a42c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a42e:	f7f8 ff5a 	bl	80032e6 <printf_sparse_metadata>
	if(far_active){
 800a432:	0023      	movs	r3, r4
 800a434:	3350      	adds	r3, #80	; 0x50
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d100      	bne.n	800a43e <createService+0x5b6>
 800a43c:	e738      	b.n	800a2b0 <createService+0x428>
	sparse_handle_far = acc_service_create(sparse_config_far);
 800a43e:	4b3e      	ldr	r3, [pc, #248]	; (800a538 <createService+0x6b0>)
 800a440:	4698      	mov	r8, r3
 800a442:	6998      	ldr	r0, [r3, #24]
 800a444:	f7f8 f94e 	bl	80026e4 <acc_service_create>
 800a448:	4643      	mov	r3, r8
 800a44a:	6798      	str	r0, [r3, #120]	; 0x78
	if (sparse_handle_far == NULL){//handles error		
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d10b      	bne.n	800a468 <createService+0x5e0>
		ERR_PRINTLN("sparse far service creation fail");
 800a450:	482e      	ldr	r0, [pc, #184]	; (800a50c <createService+0x684>)
 800a452:	f00b fc4d 	bl	8015cf0 <__wrap_printf>
 800a456:	483a      	ldr	r0, [pc, #232]	; (800a540 <createService+0x6b8>)
 800a458:	f00b fc4a 	bl	8015cf0 <__wrap_printf>
 800a45c:	4a39      	ldr	r2, [pc, #228]	; (800a544 <createService+0x6bc>)
 800a45e:	0029      	movs	r1, r5
 800a460:	0030      	movs	r0, r6
 800a462:	f00b fc45 	bl	8015cf0 <__wrap_printf>
 800a466:	e64a      	b.n	800a0fe <createService+0x276>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 800a468:	0021      	movs	r1, r4
 800a46a:	3154      	adds	r1, #84	; 0x54
 800a46c:	f7f6 ff05 	bl	800127a <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){
 800a470:	f7f8 fbee 	bl	8002c50 <sparse_data_malloc>
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	d10c      	bne.n	800a492 <createService+0x60a>
            DBG_PRINTLN("data buffer allocation failed");
 800a478:	0038      	movs	r0, r7
 800a47a:	f00b fc39 	bl	8015cf0 <__wrap_printf>
 800a47e:	4816      	ldr	r0, [pc, #88]	; (800a4d8 <createService+0x650>)
 800a480:	f00b fc36 	bl	8015cf0 <__wrap_printf>
 800a484:	4a30      	ldr	r2, [pc, #192]	; (800a548 <createService+0x6c0>)
 800a486:	0029      	movs	r1, r5
 800a488:	0030      	movs	r0, r6
 800a48a:	f00b fc31 	bl	8015cf0 <__wrap_printf>
            stopService();
 800a48e:	f7ff fc1d 	bl	8009ccc <stopService>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 800a492:	0023      	movs	r3, r4
 800a494:	3354      	adds	r3, #84	; 0x54
 800a496:	9301      	str	r3, [sp, #4]
 800a498:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a49e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a4a0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a4a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a4a4:	f7ff fcac 	bl	8009e00 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 800a4a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4aa:	3454      	adds	r4, #84	; 0x54
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4b0:	f7f8 ff19 	bl	80032e6 <printf_sparse_metadata>
 800a4b4:	e6fc      	b.n	800a2b0 <createService+0x428>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 800a4b6:	2080      	movs	r0, #128	; 0x80
 800a4b8:	02c0      	lsls	r0, r0, #11
 800a4ba:	f002 fd17 	bl	800ceec <Reg_regor.constprop.73>
 800a4be:	2000      	movs	r0, #0
}
 800a4c0:	b003      	add	sp, #12
 800a4c2:	bc3c      	pop	{r2, r3, r4, r5}
 800a4c4:	4690      	mov	r8, r2
 800a4c6:	4699      	mov	r9, r3
 800a4c8:	46a2      	mov	sl, r4
 800a4ca:	46ab      	mov	fp, r5
 800a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	4d8ef3c2 	.word	0x4d8ef3c2
 800a4d4:	2000018c 	.word	0x2000018c
 800a4d8:	0801e7c4 	.word	0x0801e7c4
 800a4dc:	00000232 	.word	0x00000232
 800a4e0:	447a0000 	.word	0x447a0000
 800a4e4:	0801e7e2 	.word	0x0801e7e2
 800a4e8:	0801d36c 	.word	0x0801d36c
 800a4ec:	0801d37b 	.word	0x0801d37b
 800a4f0:	0801d3a1 	.word	0x0801d3a1
 800a4f4:	0801d3b3 	.word	0x0801d3b3
 800a4f8:	0801d3c8 	.word	0x0801d3c8
 800a4fc:	00000762 	.word	0x00000762
 800a500:	0801e7fc 	.word	0x0801e7fc
 800a504:	00000243 	.word	0x00000243
 800a508:	2000038c 	.word	0x2000038c
 800a50c:	0801ead4 	.word	0x0801ead4
 800a510:	0801e872 	.word	0x0801e872
 800a514:	00000256 	.word	0x00000256
 800a518:	00000ee2 	.word	0x00000ee2
 800a51c:	0801e813 	.word	0x0801e813
 800a520:	0000024a 	.word	0x0000024a
 800a524:	00000781 	.word	0x00000781
 800a528:	fffff880 	.word	0xfffff880
 800a52c:	0801e82e 	.word	0x0801e82e
 800a530:	0000024d 	.word	0x0000024d
 800a534:	0801e836 	.word	0x0801e836
 800a538:	2000030c 	.word	0x2000030c
 800a53c:	0801e848 	.word	0x0801e848
 800a540:	0801e88f 	.word	0x0801e88f
 800a544:	0000026a 	.word	0x0000026a
 800a548:	0000026f 	.word	0x0000026f

0800a54c <RegInt_Init>:
void RegInt_Init(void){
 800a54c:	b570      	push	{r4, r5, r6, lr}
	queue_cmd_end = 0;
 800a54e:	4d2e      	ldr	r5, [pc, #184]	; (800a608 <RegInt_Init+0xbc>)
 800a550:	2400      	movs	r4, #0
 800a552:	002b      	movs	r3, r5
		RegInt_setregf(i, 0, 1);
 800a554:	2601      	movs	r6, #1
	queue_cmd_end = 0;
 800a556:	337c      	adds	r3, #124	; 0x7c
 800a558:	701c      	strb	r4, [r3, #0]
		if(i == 3){continue;}//writing to this reg controlls the RSS.//remove if works
 800a55a:	2c03      	cmp	r4, #3
 800a55c:	d004      	beq.n	800a568 <RegInt_Init+0x1c>
		RegInt_setregf(i, 0, 1);
 800a55e:	0032      	movs	r2, r6
 800a560:	2100      	movs	r1, #0
 800a562:	0020      	movs	r0, r4
 800a564:	f7ff fb74 	bl	8009c50 <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 800a568:	3401      	adds	r4, #1
 800a56a:	b2e4      	uxtb	r4, r4
 800a56c:	2cff      	cmp	r4, #255	; 0xff
 800a56e:	d1f4      	bne.n	800a55a <RegInt_Init+0xe>
	RegInt_setregf(0x07, 115200, 1);//set default baud rate
 800a570:	21e1      	movs	r1, #225	; 0xe1
 800a572:	2201      	movs	r2, #1
 800a574:	0249      	lsls	r1, r1, #9
 800a576:	2007      	movs	r0, #7
 800a578:	f7ff fb6a 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x0A, 0, 1);//set default baud rate
 800a57c:	2201      	movs	r2, #1
 800a57e:	2100      	movs	r1, #0
 800a580:	200a      	movs	r0, #10
 800a582:	f7ff fb65 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x10, HARDWARE_REVISION, 1);//set product identification register
 800a586:	2201      	movs	r2, #1
 800a588:	4920      	ldr	r1, [pc, #128]	; (800a60c <RegInt_Init+0xc0>)
 800a58a:	2010      	movs	r0, #16
 800a58c:	f7ff fb60 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0x11, FIRMWARE_REVISION, 1);//set firmware revision register
 800a590:	2201      	movs	r2, #1
 800a592:	491f      	ldr	r1, [pc, #124]	; (800a610 <RegInt_Init+0xc4>)
 800a594:	2011      	movs	r0, #17
 800a596:	f7ff fb5b 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD4, 600, 1);//set default mean sq distance threshold
 800a59a:	2196      	movs	r1, #150	; 0x96
 800a59c:	2201      	movs	r2, #1
 800a59e:	0089      	lsls	r1, r1, #2
 800a5a0:	20d4      	movs	r0, #212	; 0xd4
 800a5a2:	f7ff fb55 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD5, 1000, 1);//set default radius for gf kernal
 800a5a6:	21fa      	movs	r1, #250	; 0xfa
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	0089      	lsls	r1, r1, #2
 800a5ac:	20d5      	movs	r0, #213	; 0xd5
 800a5ae:	f7ff fb4f 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD6, 0x0000000F, 1);//set default eval mode
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	210f      	movs	r1, #15
 800a5b6:	20d6      	movs	r0, #214	; 0xd6
 800a5b8:	f7ff fb4a 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD7, 0x00000002, 1);//set default radius for averaging
 800a5bc:	2201      	movs	r2, #1
 800a5be:	2102      	movs	r1, #2
 800a5c0:	20d7      	movs	r0, #215	; 0xd7
 800a5c2:	f7ff fb45 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD8, 500, 1);//sets theshold data zeroing
 800a5c6:	21fa      	movs	r1, #250	; 0xfa
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	0049      	lsls	r1, r1, #1
 800a5cc:	20d8      	movs	r0, #216	; 0xd8
 800a5ce:	f7ff fb3f 	bl	8009c50 <RegInt_setregf>
	RegInt_setregf(0xD9, 0x00000000, 1);//sets no bandstop
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	20d9      	movs	r0, #217	; 0xd9
 800a5d8:	f7ff fb3a 	bl	8009c50 <RegInt_setregf>
	uart_state = 0;
 800a5dc:	2300      	movs	r3, #0
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800a5de:	490d      	ldr	r1, [pc, #52]	; (800a614 <RegInt_Init+0xc8>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	3168      	adds	r1, #104	; 0x68
	uart_state = 0;
 800a5e4:	357d      	adds	r5, #125	; 0x7d
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800a5e6:	480c      	ldr	r0, [pc, #48]	; (800a618 <RegInt_Init+0xcc>)
	uart_state = 0;
 800a5e8:	702b      	strb	r3, [r5, #0]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800a5ea:	f002 fee7 	bl	800d3bc <HAL_UART_Receive_IT>
	DBG_PRINTLN("Registers Initialised");
 800a5ee:	480b      	ldr	r0, [pc, #44]	; (800a61c <RegInt_Init+0xd0>)
 800a5f0:	f00b fb7e 	bl	8015cf0 <__wrap_printf>
 800a5f4:	480a      	ldr	r0, [pc, #40]	; (800a620 <RegInt_Init+0xd4>)
 800a5f6:	f00b fb7b 	bl	8015cf0 <__wrap_printf>
 800a5fa:	2285      	movs	r2, #133	; 0x85
 800a5fc:	4909      	ldr	r1, [pc, #36]	; (800a624 <RegInt_Init+0xd8>)
 800a5fe:	480a      	ldr	r0, [pc, #40]	; (800a628 <RegInt_Init+0xdc>)
 800a600:	f00b fb76 	bl	8015cf0 <__wrap_printf>
}
 800a604:	bd70      	pop	{r4, r5, r6, pc}
 800a606:	46c0      	nop			; (mov r8, r8)
 800a608:	2000030c 	.word	0x2000030c
 800a60c:	bd010100 	.word	0xbd010100
 800a610:	bf010400 	.word	0xbf010400
 800a614:	2000018c 	.word	0x2000018c
 800a618:	2000054c 	.word	0x2000054c
 800a61c:	0801d2c3 	.word	0x0801d2c3
 800a620:	0801e8b0 	.word	0x0801e8b0
 800a624:	0801d2db 	.word	0x0801d2db
 800a628:	0801eb0c 	.word	0x0801eb0c

0800a62c <HAL_RTCEx_WakeUpTimerEventCallback>:
	rtc_wakeup_triggered = true;
 800a62c:	4b01      	ldr	r3, [pc, #4]	; (800a634 <HAL_RTCEx_WakeUpTimerEventCallback+0x8>)
 800a62e:	2201      	movs	r2, #1
 800a630:	731a      	strb	r2, [r3, #12]
}
 800a632:	4770      	bx	lr
 800a634:	2000028c 	.word	0x2000028c

0800a638 <HAL_RTC_AlarmAEventCallback>:
	rtc_alarm_triggered = true;
 800a638:	4b01      	ldr	r3, [pc, #4]	; (800a640 <HAL_RTC_AlarmAEventCallback+0x8>)
 800a63a:	2201      	movs	r2, #1
 800a63c:	761a      	strb	r2, [r3, #24]
}
 800a63e:	4770      	bx	lr
 800a640:	2000038c 	.word	0x2000038c

0800a644 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a644:	4b02      	ldr	r3, [pc, #8]	; (800a650 <SystemInit+0xc>)
 800a646:	2280      	movs	r2, #128	; 0x80
 800a648:	0512      	lsls	r2, r2, #20
 800a64a:	609a      	str	r2, [r3, #8]
#endif
}
 800a64c:	4770      	bx	lr
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	e000ed00 	.word	0xe000ed00

0800a654 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 800a654:	b510      	push	{r4, lr}
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800a656:	4802      	ldr	r0, [pc, #8]	; (800a660 <USART1_IRQHandler+0xc>)
 800a658:	f002 fe0c 	bl	800d274 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	46c0      	nop			; (mov r8, r8)
 800a660:	2000054c 	.word	0x2000054c

0800a664 <I2C1_IRQHandler>:
{
 800a664:	b510      	push	{r4, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800a666:	4b08      	ldr	r3, [pc, #32]	; (800a688 <I2C1_IRQHandler+0x24>)
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	699a      	ldr	r2, [r3, #24]
 800a66c:	23e0      	movs	r3, #224	; 0xe0
 800a66e:	00db      	lsls	r3, r3, #3
 800a670:	421a      	tst	r2, r3
 800a672:	d104      	bne.n	800a67e <I2C1_IRQHandler+0x1a>
		HAL_I2C_EV_IRQHandler(&hi2c1);
 800a674:	4804      	ldr	r0, [pc, #16]	; (800a688 <I2C1_IRQHandler+0x24>)
 800a676:	3010      	adds	r0, #16
 800a678:	f003 f947 	bl	800d90a <HAL_I2C_EV_IRQHandler>
}
 800a67c:	bd10      	pop	{r4, pc}
		HAL_I2C_ER_IRQHandler(&hi2c1);
 800a67e:	4802      	ldr	r0, [pc, #8]	; (800a688 <I2C1_IRQHandler+0x24>)
 800a680:	3010      	adds	r0, #16
 800a682:	f003 f913 	bl	800d8ac <HAL_I2C_ER_IRQHandler>
 800a686:	e7f9      	b.n	800a67c <I2C1_IRQHandler+0x18>
 800a688:	2000028c 	.word	0x2000028c

0800a68c <DMA1_Channel2_3_IRQHandler>:
{
 800a68c:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a68e:	4802      	ldr	r0, [pc, #8]	; (800a698 <DMA1_Channel2_3_IRQHandler+0xc>)
 800a690:	301c      	adds	r0, #28
 800a692:	f004 f9dd 	bl	800ea50 <HAL_DMA_IRQHandler>
}
 800a696:	bd10      	pop	{r4, pc}
 800a698:	2000038c 	.word	0x2000038c

0800a69c <DMA1_Channel1_IRQHandler>:
{
 800a69c:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a69e:	4802      	ldr	r0, [pc, #8]	; (800a6a8 <DMA1_Channel1_IRQHandler+0xc>)
 800a6a0:	3078      	adds	r0, #120	; 0x78
 800a6a2:	f004 f9d5 	bl	800ea50 <HAL_DMA_IRQHandler>
}
 800a6a6:	bd10      	pop	{r4, pc}
 800a6a8:	2000038c 	.word	0x2000038c

0800a6ac <EXTI4_15_IRQHandler>:
{
 800a6ac:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800a6ae:	2020      	movs	r0, #32
 800a6b0:	f005 f812 	bl	800f6d8 <HAL_GPIO_EXTI_IRQHandler>
}
 800a6b4:	bd10      	pop	{r4, pc}

0800a6b6 <EXTI2_3_IRQHandler>:
{
 800a6b6:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800a6b8:	2008      	movs	r0, #8
 800a6ba:	f005 f80d 	bl	800f6d8 <HAL_GPIO_EXTI_IRQHandler>
}
 800a6be:	bd10      	pop	{r4, pc}

0800a6c0 <RTC_TAMP_IRQHandler>:
{
 800a6c0:	b510      	push	{r4, lr}
	HAL_RTC_AlarmIRQHandler(&hrtc);
 800a6c2:	4c04      	ldr	r4, [pc, #16]	; (800a6d4 <RTC_TAMP_IRQHandler+0x14>)
 800a6c4:	3460      	adds	r4, #96	; 0x60
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	f003 f829 	bl	800d71e <HAL_RTC_AlarmIRQHandler>
	HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800a6cc:	0020      	movs	r0, r4
 800a6ce:	f003 f815 	bl	800d6fc <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800a6d2:	bd10      	pop	{r4, pc}
 800a6d4:	2000010c 	.word	0x2000010c

0800a6d8 <SysTick_Handler>:
{
 800a6d8:	b510      	push	{r4, lr}
	HAL_IncTick();
 800a6da:	f004 f8b3 	bl	800e844 <HAL_IncTick>
}
 800a6de:	bd10      	pop	{r4, pc}

0800a6e0 <PendSV_Handler>:
}
 800a6e0:	4770      	bx	lr

0800a6e2 <SVC_Handler>:
}
 800a6e2:	4770      	bx	lr

0800a6e4 <HardFault_Handler>:
{
 800a6e4:	e7fe      	b.n	800a6e4 <HardFault_Handler>

0800a6e6 <NMI_Handler>:
}
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	0004      	movs	r4, r0
  if(huart->Instance==USART1)
 800a6ec:	6803      	ldr	r3, [r0, #0]
 800a6ee:	4a13      	ldr	r2, [pc, #76]	; (800a73c <HAL_UART_MspDeInit+0x54>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d003      	beq.n	800a6fc <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800a6f4:	4a12      	ldr	r2, [pc, #72]	; (800a740 <HAL_UART_MspDeInit+0x58>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d015      	beq.n	800a726 <HAL_UART_MspDeInit+0x3e>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800a6fa:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 800a6fc:	4a11      	ldr	r2, [pc, #68]	; (800a744 <HAL_UART_MspDeInit+0x5c>)
 800a6fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800a700:	4911      	ldr	r1, [pc, #68]	; (800a748 <HAL_UART_MspDeInit+0x60>)
 800a702:	400b      	ands	r3, r1
 800a704:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800a706:	21f0      	movs	r1, #240	; 0xf0
 800a708:	20a0      	movs	r0, #160	; 0xa0
 800a70a:	0149      	lsls	r1, r1, #5
 800a70c:	05c0      	lsls	r0, r0, #23
 800a70e:	f005 f802 	bl	800f716 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800a712:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a714:	f004 fa02 	bl	800eb1c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800a718:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a71a:	f004 f9ff 	bl	800eb1c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800a71e:	201b      	movs	r0, #27
 800a720:	f004 f898 	bl	800e854 <HAL_NVIC_DisableIRQ>
 800a724:	e7e9      	b.n	800a6fa <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART2_CLK_DISABLE();
 800a726:	4a07      	ldr	r2, [pc, #28]	; (800a744 <HAL_UART_MspDeInit+0x5c>)
 800a728:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a72a:	4908      	ldr	r1, [pc, #32]	; (800a74c <HAL_UART_MspDeInit+0x64>)
 800a72c:	400b      	ands	r3, r1
 800a72e:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800a730:	20a0      	movs	r0, #160	; 0xa0
 800a732:	210c      	movs	r1, #12
 800a734:	05c0      	lsls	r0, r0, #23
 800a736:	f004 ffee 	bl	800f716 <HAL_GPIO_DeInit>
 800a73a:	e7de      	b.n	800a6fa <HAL_UART_MspDeInit+0x12>
 800a73c:	40013800 	.word	0x40013800
 800a740:	40004400 	.word	0x40004400
 800a744:	40021000 	.word	0x40021000
 800a748:	ffffbfff 	.word	0xffffbfff
 800a74c:	fffdffff 	.word	0xfffdffff

0800a750 <HAL_UART_MspInit>:
{
 800a750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a752:	46c6      	mov	lr, r8
 800a754:	b500      	push	{lr}
 800a756:	b08a      	sub	sp, #40	; 0x28
 800a758:	0005      	movs	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a75a:	2214      	movs	r2, #20
 800a75c:	2100      	movs	r1, #0
 800a75e:	a805      	add	r0, sp, #20
 800a760:	f009 fa6e 	bl	8013c40 <memset>
  if(huart->Instance==USART1)
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	4a3f      	ldr	r2, [pc, #252]	; (800a864 <HAL_UART_MspInit+0x114>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d006      	beq.n	800a77a <HAL_UART_MspInit+0x2a>
  else if(huart->Instance==USART2)
 800a76c:	4a3e      	ldr	r2, [pc, #248]	; (800a868 <HAL_UART_MspInit+0x118>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d05a      	beq.n	800a828 <HAL_UART_MspInit+0xd8>
}
 800a772:	b00a      	add	sp, #40	; 0x28
 800a774:	bc04      	pop	{r2}
 800a776:	4690      	mov	r8, r2
 800a778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800a77a:	4b3c      	ldr	r3, [pc, #240]	; (800a86c <HAL_UART_MspInit+0x11c>)
 800a77c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a77e:	2080      	movs	r0, #128	; 0x80
 800a780:	01c0      	lsls	r0, r0, #7
 800a782:	4301      	orrs	r1, r0
 800a784:	6419      	str	r1, [r3, #64]	; 0x40
 800a786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a788:	4002      	ands	r2, r0
 800a78a:	9201      	str	r2, [sp, #4]
 800a78c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a78e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a790:	2201      	movs	r2, #1
 800a792:	4311      	orrs	r1, r2
 800a794:	6359      	str	r1, [r3, #52]	; 0x34
 800a796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a798:	4013      	ands	r3, r2
 800a79a:	9302      	str	r3, [sp, #8]
 800a79c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800a79e:	23f0      	movs	r3, #240	; 0xf0
 800a7a0:	015b      	lsls	r3, r3, #5
 800a7a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800a7a8:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7aa:	20a0      	movs	r0, #160	; 0xa0
 800a7ac:	a905      	add	r1, sp, #20
 800a7ae:	05c0      	lsls	r0, r0, #23
 800a7b0:	f005 f82c 	bl	800f80c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800a7b4:	4c2e      	ldr	r4, [pc, #184]	; (800a870 <HAL_UART_MspInit+0x120>)
 800a7b6:	4b2f      	ldr	r3, [pc, #188]	; (800a874 <HAL_UART_MspInit+0x124>)
 800a7b8:	67a3      	str	r3, [r4, #120]	; 0x78
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800a7ba:	2333      	movs	r3, #51	; 0x33
 800a7bc:	67e3      	str	r3, [r4, #124]	; 0x7c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7be:	2780      	movs	r7, #128	; 0x80
 800a7c0:	3b23      	subs	r3, #35	; 0x23
 800a7c2:	51e3      	str	r3, [r4, r7]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	3374      	adds	r3, #116	; 0x74
 800a7c8:	50e6      	str	r6, [r4, r3]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	50e7      	str	r7, [r4, r3]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7ce:	3304      	adds	r3, #4
 800a7d0:	50e6      	str	r6, [r4, r3]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	50e6      	str	r6, [r4, r3]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	50e6      	str	r6, [r4, r3]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a7da:	3304      	adds	r3, #4
 800a7dc:	50e6      	str	r6, [r4, r3]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a7de:	3b20      	subs	r3, #32
 800a7e0:	4698      	mov	r8, r3
 800a7e2:	44a0      	add	r8, r4
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	f004 f9df 	bl	800eba8 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800a7ea:	4643      	mov	r3, r8
 800a7ec:	676b      	str	r3, [r5, #116]	; 0x74
 800a7ee:	23a0      	movs	r3, #160	; 0xa0
 800a7f0:	50e5      	str	r5, [r4, r3]
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800a7f2:	4b21      	ldr	r3, [pc, #132]	; (800a878 <HAL_UART_MspInit+0x128>)
 800a7f4:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800a7f6:	2332      	movs	r3, #50	; 0x32
 800a7f8:	6223      	str	r3, [r4, #32]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7fa:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7fc:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7fe:	62e7      	str	r7, [r4, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a800:	6326      	str	r6, [r4, #48]	; 0x30
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a802:	6366      	str	r6, [r4, #52]	; 0x34
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a804:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a806:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a808:	0026      	movs	r6, r4
 800a80a:	361c      	adds	r6, #28
 800a80c:	0030      	movs	r0, r6
 800a80e:	f004 f9cb 	bl	800eba8 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800a812:	67ae      	str	r6, [r5, #120]	; 0x78
 800a814:	6465      	str	r5, [r4, #68]	; 0x44
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a816:	2200      	movs	r2, #0
 800a818:	2100      	movs	r1, #0
 800a81a:	201b      	movs	r0, #27
 800a81c:	f004 f836 	bl	800e88c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a820:	201b      	movs	r0, #27
 800a822:	f004 f827 	bl	800e874 <HAL_NVIC_EnableIRQ>
 800a826:	e7a4      	b.n	800a772 <HAL_UART_MspInit+0x22>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a828:	4b10      	ldr	r3, [pc, #64]	; (800a86c <HAL_UART_MspInit+0x11c>)
 800a82a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a82c:	2080      	movs	r0, #128	; 0x80
 800a82e:	0280      	lsls	r0, r0, #10
 800a830:	4301      	orrs	r1, r0
 800a832:	63d9      	str	r1, [r3, #60]	; 0x3c
 800a834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a836:	4002      	ands	r2, r0
 800a838:	9203      	str	r2, [sp, #12]
 800a83a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a83c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a83e:	2201      	movs	r2, #1
 800a840:	4311      	orrs	r1, r2
 800a842:	6359      	str	r1, [r3, #52]	; 0x34
 800a844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a846:	4013      	ands	r3, r2
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a84c:	230c      	movs	r3, #12
 800a84e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a850:	3b0a      	subs	r3, #10
 800a852:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800a854:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a856:	20a0      	movs	r0, #160	; 0xa0
 800a858:	a905      	add	r1, sp, #20
 800a85a:	05c0      	lsls	r0, r0, #23
 800a85c:	f004 ffd6 	bl	800f80c <HAL_GPIO_Init>
 800a860:	e787      	b.n	800a772 <HAL_UART_MspInit+0x22>
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	40013800 	.word	0x40013800
 800a868:	40004400 	.word	0x40004400
 800a86c:	40021000 	.word	0x40021000
 800a870:	2000038c 	.word	0x2000038c
 800a874:	40020008 	.word	0x40020008
 800a878:	4002001c 	.word	0x4002001c

0800a87c <HAL_SPI_MspInit>:
{
 800a87c:	b510      	push	{r4, lr}
 800a87e:	b088      	sub	sp, #32
 800a880:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a882:	2214      	movs	r2, #20
 800a884:	2100      	movs	r1, #0
 800a886:	a803      	add	r0, sp, #12
 800a888:	f009 f9da 	bl	8013c40 <memset>
  if(hspi->Instance==SPI1)
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <HAL_SPI_MspInit+0x58>)
 800a890:	429a      	cmp	r2, r3
 800a892:	d001      	beq.n	800a898 <HAL_SPI_MspInit+0x1c>
}
 800a894:	b008      	add	sp, #32
 800a896:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <HAL_SPI_MspInit+0x5c>)
 800a89a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a89c:	2080      	movs	r0, #128	; 0x80
 800a89e:	0140      	lsls	r0, r0, #5
 800a8a0:	4301      	orrs	r1, r0
 800a8a2:	6419      	str	r1, [r3, #64]	; 0x40
 800a8a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8a6:	4002      	ands	r2, r0
 800a8a8:	9201      	str	r2, [sp, #4]
 800a8aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	635a      	str	r2, [r3, #52]	; 0x34
 800a8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b6:	400b      	ands	r3, r1
 800a8b8:	9302      	str	r3, [sp, #8]
 800a8ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 800a8bc:	23e0      	movs	r3, #224	; 0xe0
 800a8be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8c0:	3bde      	subs	r3, #222	; 0xde
 800a8c2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8c8:	20a0      	movs	r0, #160	; 0xa0
 800a8ca:	a903      	add	r1, sp, #12
 800a8cc:	05c0      	lsls	r0, r0, #23
 800a8ce:	f004 ff9d 	bl	800f80c <HAL_GPIO_Init>
 800a8d2:	e7df      	b.n	800a894 <HAL_SPI_MspInit+0x18>
 800a8d4:	40013000 	.word	0x40013000
 800a8d8:	40021000 	.word	0x40021000

0800a8dc <HAL_RTC_MspInit>:
{
 800a8dc:	b500      	push	{lr}
 800a8de:	b083      	sub	sp, #12
  if(hrtc->Instance==RTC)
 800a8e0:	6802      	ldr	r2, [r0, #0]
 800a8e2:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <HAL_RTC_MspInit+0x40>)
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d001      	beq.n	800a8ec <HAL_RTC_MspInit+0x10>
}
 800a8e8:	b003      	add	sp, #12
 800a8ea:	bd00      	pop	{pc}
    __HAL_RCC_RTC_ENABLE();
 800a8ec:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <HAL_RTC_MspInit+0x44>)
 800a8ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a8f0:	2280      	movs	r2, #128	; 0x80
 800a8f2:	0212      	lsls	r2, r2, #8
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a8f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8fa:	2180      	movs	r1, #128	; 0x80
 800a8fc:	00c9      	lsls	r1, r1, #3
 800a8fe:	430a      	orrs	r2, r1
 800a900:	63da      	str	r2, [r3, #60]	; 0x3c
 800a902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a904:	400b      	ands	r3, r1
 800a906:	9301      	str	r3, [sp, #4]
 800a908:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 800a90a:	2200      	movs	r2, #0
 800a90c:	0011      	movs	r1, r2
 800a90e:	2002      	movs	r0, #2
 800a910:	f003 ffbc 	bl	800e88c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800a914:	2002      	movs	r0, #2
 800a916:	f003 ffad 	bl	800e874 <HAL_NVIC_EnableIRQ>
 800a91a:	e7e5      	b.n	800a8e8 <HAL_RTC_MspInit+0xc>
 800a91c:	40002800 	.word	0x40002800
 800a920:	40021000 	.word	0x40021000

0800a924 <HAL_I2C_MspInit>:
{
 800a924:	b510      	push	{r4, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a92a:	2214      	movs	r2, #20
 800a92c:	2100      	movs	r1, #0
 800a92e:	a803      	add	r0, sp, #12
 800a930:	f009 f986 	bl	8013c40 <memset>
  if(hi2c->Instance==I2C1)
 800a934:	6822      	ldr	r2, [r4, #0]
 800a936:	4b16      	ldr	r3, [pc, #88]	; (800a990 <HAL_I2C_MspInit+0x6c>)
 800a938:	429a      	cmp	r2, r3
 800a93a:	d001      	beq.n	800a940 <HAL_I2C_MspInit+0x1c>
}
 800a93c:	b008      	add	sp, #32
 800a93e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a940:	4c14      	ldr	r4, [pc, #80]	; (800a994 <HAL_I2C_MspInit+0x70>)
 800a942:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a944:	2102      	movs	r1, #2
 800a946:	430a      	orrs	r2, r1
 800a948:	6362      	str	r2, [r4, #52]	; 0x34
 800a94a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a94c:	400b      	ands	r3, r1
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a952:	23c0      	movs	r3, #192	; 0xc0
 800a954:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a956:	3bae      	subs	r3, #174	; 0xae
 800a958:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a95a:	3b11      	subs	r3, #17
 800a95c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800a95e:	3305      	adds	r3, #5
 800a960:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a962:	a903      	add	r1, sp, #12
 800a964:	480c      	ldr	r0, [pc, #48]	; (800a998 <HAL_I2C_MspInit+0x74>)
 800a966:	f004 ff51 	bl	800f80c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a96a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a96c:	2180      	movs	r1, #128	; 0x80
 800a96e:	0389      	lsls	r1, r1, #14
 800a970:	430a      	orrs	r2, r1
 800a972:	63e2      	str	r2, [r4, #60]	; 0x3c
 800a974:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a976:	400b      	ands	r3, r1
 800a978:	9302      	str	r3, [sp, #8]
 800a97a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800a97c:	2200      	movs	r2, #0
 800a97e:	0011      	movs	r1, r2
 800a980:	2017      	movs	r0, #23
 800a982:	f003 ff83 	bl	800e88c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800a986:	2017      	movs	r0, #23
 800a988:	f003 ff74 	bl	800e874 <HAL_NVIC_EnableIRQ>
 800a98c:	e7d6      	b.n	800a93c <HAL_I2C_MspInit+0x18>
 800a98e:	46c0      	nop			; (mov r8, r8)
 800a990:	40005400 	.word	0x40005400
 800a994:	40021000 	.word	0x40021000
 800a998:	50000400 	.word	0x50000400

0800a99c <HAL_MspInit>:
{
 800a99c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a99e:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <HAL_MspInit+0x38>)
 800a9a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4311      	orrs	r1, r2
 800a9a6:	6419      	str	r1, [r3, #64]	; 0x40
 800a9a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a9aa:	400a      	ands	r2, r1
 800a9ac:	9200      	str	r2, [sp, #0]
 800a9ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a9b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9b2:	2180      	movs	r1, #128	; 0x80
 800a9b4:	0549      	lsls	r1, r1, #21
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	63da      	str	r2, [r3, #60]	; 0x3c
 800a9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9bc:	400b      	ands	r3, r1
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	9b01      	ldr	r3, [sp, #4]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 800a9c2:	4a05      	ldr	r2, [pc, #20]	; (800a9d8 <HAL_MspInit+0x3c>)
 800a9c4:	6811      	ldr	r1, [r2, #0]
 800a9c6:	23c0      	movs	r3, #192	; 0xc0
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6013      	str	r3, [r2, #0]
}
 800a9ce:	b002      	add	sp, #8
 800a9d0:	4770      	bx	lr
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	40021000 	.word	0x40021000
 800a9d8:	40010000 	.word	0x40010000

0800a9dc <RegInt_parsecmd>:
void RegInt_parsecmd(void){
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	46de      	mov	lr, fp
 800a9e0:	4657      	mov	r7, sl
 800a9e2:	464e      	mov	r6, r9
 800a9e4:	4645      	mov	r5, r8
 800a9e6:	b5e0      	push	{r5, r6, r7, lr}
	if (uart_state != 4){return;}
 800a9e8:	4bd3      	ldr	r3, [pc, #844]	; (800ad38 <RegInt_parsecmd+0x35c>)
void RegInt_parsecmd(void){
 800a9ea:	b095      	sub	sp, #84	; 0x54
	if (uart_state != 4){return;}
 800a9ec:	469b      	mov	fp, r3
 800a9ee:	337d      	adds	r3, #125	; 0x7d
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d13e      	bne.n	800aa74 <RegInt_parsecmd+0x98>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 800a9f6:	4dd1      	ldr	r5, [pc, #836]	; (800ad3c <RegInt_parsecmd+0x360>)
 800a9f8:	002b      	movs	r3, r5
 800a9fa:	3368      	adds	r3, #104	; 0x68
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	2af8      	cmp	r2, #248	; 0xf8
 800aa00:	d13f      	bne.n	800aa82 <RegInt_parsecmd+0xa6>
 800aa02:	465a      	mov	r2, fp
 800aa04:	327e      	adds	r2, #126	; 0x7e
 800aa06:	7816      	ldrb	r6, [r2, #0]
 800aa08:	2e01      	cmp	r6, #1
 800aa0a:	d129      	bne.n	800aa60 <RegInt_parsecmd+0x84>
		uint8_t reg = uart_rx_buff[1];
 800aa0c:	785f      	ldrb	r7, [r3, #1]
		uint32_t val = RegInt_getreg(reg);
 800aa0e:	0038      	movs	r0, r7
 800aa10:	f7fe ffc8 	bl	80099a4 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 800aa14:	23cc      	movs	r3, #204	; 0xcc
		uart_tx_buff[2] = 0x00;
 800aa16:	2100      	movs	r1, #0
		uint32_t val = RegInt_getreg(reg);
 800aa18:	0005      	movs	r5, r0
		uart_tx_buff[0] = 0xCC;
 800aa1a:	4cc9      	ldr	r4, [pc, #804]	; (800ad40 <RegInt_parsecmd+0x364>)
 800aa1c:	3454      	adds	r4, #84	; 0x54
 800aa1e:	7023      	strb	r3, [r4, #0]
		uart_tx_buff[1] = 0x05;
 800aa20:	3bc7      	subs	r3, #199	; 0xc7
 800aa22:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[3] = 0xF6;
 800aa24:	33f1      	adds	r3, #241	; 0xf1
		uart_tx_buff[2] = 0x00;
 800aa26:	70a1      	strb	r1, [r4, #2]
		uart_tx_buff[3] = 0xF6;
 800aa28:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800aa2a:	7127      	strb	r7, [r4, #4]
		uart_tx_buff[5] = get_byte(val,0);
 800aa2c:	0028      	movs	r0, r5
 800aa2e:	f7f6 fee6 	bl	80017fe <get_byte>
		uart_tx_buff[6] = get_byte(val,1);
 800aa32:	2101      	movs	r1, #1
		uart_tx_buff[5] = get_byte(val,0);
 800aa34:	7160      	strb	r0, [r4, #5]
		uart_tx_buff[6] = get_byte(val,1);
 800aa36:	0028      	movs	r0, r5
 800aa38:	f7f6 fee1 	bl	80017fe <get_byte>
		uart_tx_buff[7] = get_byte(val,2);
 800aa3c:	2102      	movs	r1, #2
		uart_tx_buff[6] = get_byte(val,1);
 800aa3e:	71a0      	strb	r0, [r4, #6]
		uart_tx_buff[7] = get_byte(val,2);
 800aa40:	0028      	movs	r0, r5
 800aa42:	f7f6 fedc 	bl	80017fe <get_byte>
		uart_tx_buff[8] = get_byte(val,3);
 800aa46:	2103      	movs	r1, #3
		uart_tx_buff[7] = get_byte(val,2);
 800aa48:	71e0      	strb	r0, [r4, #7]
		uart_tx_buff[8] = get_byte(val,3);
 800aa4a:	0028      	movs	r0, r5
 800aa4c:	f7f6 fed7 	bl	80017fe <get_byte>
		uart_tx_buff[9] = 0xCD;
 800aa50:	23cd      	movs	r3, #205	; 0xcd
		uart_tx_buff[8] = get_byte(val,3);
 800aa52:	7220      	strb	r0, [r4, #8]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800aa54:	220a      	movs	r2, #10
 800aa56:	0021      	movs	r1, r4
 800aa58:	48ba      	ldr	r0, [pc, #744]	; (800ad44 <RegInt_parsecmd+0x368>)
		uart_tx_buff[9] = 0xCD;
 800aa5a:	7263      	strb	r3, [r4, #9]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 800aa5c:	f002 fd5e 	bl	800d51c <HAL_UART_Transmit_IT>
	uart_state = 0;
 800aa60:	2200      	movs	r2, #0
 800aa62:	4bb5      	ldr	r3, [pc, #724]	; (800ad38 <RegInt_parsecmd+0x35c>)
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800aa64:	49b5      	ldr	r1, [pc, #724]	; (800ad3c <RegInt_parsecmd+0x360>)
	uart_state = 0;
 800aa66:	337d      	adds	r3, #125	; 0x7d
 800aa68:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800aa6a:	3168      	adds	r1, #104	; 0x68
 800aa6c:	3201      	adds	r2, #1
 800aa6e:	48b5      	ldr	r0, [pc, #724]	; (800ad44 <RegInt_parsecmd+0x368>)
 800aa70:	f002 fca4 	bl	800d3bc <HAL_UART_Receive_IT>
}
 800aa74:	b015      	add	sp, #84	; 0x54
 800aa76:	bc3c      	pop	{r2, r3, r4, r5}
 800aa78:	4690      	mov	r8, r2
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	46a2      	mov	sl, r4
 800aa7e:	46ab      	mov	fp, r5
 800aa80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 800aa82:	2af9      	cmp	r2, #249	; 0xf9
 800aa84:	d000      	beq.n	800aa88 <RegInt_parsecmd+0xac>
 800aa86:	e1e5      	b.n	800ae54 <RegInt_parsecmd+0x478>
 800aa88:	465a      	mov	r2, fp
 800aa8a:	327e      	adds	r2, #126	; 0x7e
 800aa8c:	7812      	ldrb	r2, [r2, #0]
 800aa8e:	2a05      	cmp	r2, #5
 800aa90:	d1e6      	bne.n	800aa60 <RegInt_parsecmd+0x84>
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800aa92:	002a      	movs	r2, r5
		uint8_t reg = uart_rx_buff[1];
 800aa94:	785b      	ldrb	r3, [r3, #1]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800aa96:	326a      	adds	r2, #106	; 0x6a
		uint8_t reg = uart_rx_buff[1];
 800aa98:	9302      	str	r3, [sp, #8]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800aa9a:	7853      	ldrb	r3, [r2, #1]
 800aa9c:	7814      	ldrb	r4, [r2, #0]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	4323      	orrs	r3, r4
 800aaa2:	7894      	ldrb	r4, [r2, #2]
	int8_t success = RegInt_setregf(reg, val, 0);
 800aaa4:	9802      	ldr	r0, [sp, #8]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800aaa6:	0424      	lsls	r4, r4, #16
 800aaa8:	4323      	orrs	r3, r4
 800aaaa:	78d4      	ldrb	r4, [r2, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 800aaac:	2200      	movs	r2, #0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 800aaae:	0624      	lsls	r4, r4, #24
 800aab0:	431c      	orrs	r4, r3
	int8_t success = RegInt_setregf(reg, val, 0);
 800aab2:	0021      	movs	r1, r4
 800aab4:	f7ff f8cc 	bl	8009c50 <RegInt_setregf>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d007      	beq.n	800aacc <RegInt_parsecmd+0xf0>
	if(reg == 0x03){
 800aabc:	9b02      	ldr	r3, [sp, #8]
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d000      	beq.n	800aac4 <RegInt_parsecmd+0xe8>
 800aac2:	e182      	b.n	800adca <RegInt_parsecmd+0x3ee>
	if (val == 0x00){stopService();}
 800aac4:	2c00      	cmp	r4, #0
 800aac6:	d112      	bne.n	800aaee <RegInt_parsecmd+0x112>
 800aac8:	f7ff f900 	bl	8009ccc <stopService>
		val = RegInt_getreg(reg);
 800aacc:	9802      	ldr	r0, [sp, #8]
 800aace:	f7fe ff69 	bl	80099a4 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 800aad2:	23cc      	movs	r3, #204	; 0xcc
		uart_tx_buff[2] = 0x00;
 800aad4:	2100      	movs	r1, #0
		uart_tx_buff[0] = 0xCC;
 800aad6:	4c9a      	ldr	r4, [pc, #616]	; (800ad40 <RegInt_parsecmd+0x364>)
		val = RegInt_getreg(reg);
 800aad8:	0005      	movs	r5, r0
		uart_tx_buff[0] = 0xCC;
 800aada:	3454      	adds	r4, #84	; 0x54
 800aadc:	7023      	strb	r3, [r4, #0]
		uart_tx_buff[1] = 0x05;
 800aade:	3bc7      	subs	r3, #199	; 0xc7
 800aae0:	7063      	strb	r3, [r4, #1]
		uart_tx_buff[3] = 0xF5;
 800aae2:	33f0      	adds	r3, #240	; 0xf0
 800aae4:	70e3      	strb	r3, [r4, #3]
		uart_tx_buff[4] = reg;
 800aae6:	9b02      	ldr	r3, [sp, #8]
		uart_tx_buff[2] = 0x00;
 800aae8:	70a1      	strb	r1, [r4, #2]
		uart_tx_buff[4] = reg;
 800aaea:	7123      	strb	r3, [r4, #4]
 800aaec:	e79e      	b.n	800aa2c <RegInt_parsecmd+0x50>
	if (val == 0x01){createService();}
 800aaee:	2c01      	cmp	r4, #1
 800aaf0:	d102      	bne.n	800aaf8 <RegInt_parsecmd+0x11c>
 800aaf2:	f7ff f9c9 	bl	8009e88 <createService>
 800aaf6:	e7e9      	b.n	800aacc <RegInt_parsecmd+0xf0>
	if (val == 0x02){activateService();}
 800aaf8:	2c02      	cmp	r4, #2
 800aafa:	d102      	bne.n	800ab02 <RegInt_parsecmd+0x126>
		if(createService()){activateService();}
 800aafc:	f7fe ff57 	bl	80099ae <activateService>
 800ab00:	e7e4      	b.n	800aacc <RegInt_parsecmd+0xf0>
	if (val == 0x03){
 800ab02:	2c03      	cmp	r4, #3
 800ab04:	d104      	bne.n	800ab10 <RegInt_parsecmd+0x134>
		if(createService()){activateService();}
 800ab06:	f7ff f9bf 	bl	8009e88 <createService>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d0de      	beq.n	800aacc <RegInt_parsecmd+0xf0>
 800ab0e:	e7f5      	b.n	800aafc <RegInt_parsecmd+0x120>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 800ab10:	2c04      	cmp	r4, #4
 800ab12:	d108      	bne.n	800ab26 <RegInt_parsecmd+0x14a>
	uint32_t flags = RegInt_getreg(reg); 
 800ab14:	2006      	movs	r0, #6
 800ab16:	f7fe ff45 	bl	80099a4 <RegInt_getreg>
	RegInt_setregf(reg, flags, 1);
 800ab1a:	2201      	movs	r2, #1
	flags &= andbits;
 800ab1c:	b2c1      	uxtb	r1, r0
	RegInt_setregf(reg, flags, 1);
 800ab1e:	2006      	movs	r0, #6
 800ab20:	f7ff f896 	bl	8009c50 <RegInt_setregf>
 800ab24:	e7d2      	b.n	800aacc <RegInt_parsecmd+0xf0>
	if (val == 0x05){measure();}
 800ab26:	2c05      	cmp	r4, #5
 800ab28:	d000      	beq.n	800ab2c <RegInt_parsecmd+0x150>
 800ab2a:	e24f      	b.n	800afcc <RegInt_parsecmd+0x5f0>
    uint32_t service_type = RegInt_getreg(0x02);
 800ab2c:	2002      	movs	r0, #2
 800ab2e:	f7fe ff39 	bl	80099a4 <RegInt_getreg>
    if(service_type == 0x02){envelopeMeasure();}
 800ab32:	2802      	cmp	r0, #2
 800ab34:	d13c      	bne.n	800abb0 <RegInt_parsecmd+0x1d4>
	INF_PRINTLN("Start Envelope measurement");
 800ab36:	4b84      	ldr	r3, [pc, #528]	; (800ad48 <RegInt_parsecmd+0x36c>)
 800ab38:	0018      	movs	r0, r3
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	f00b f8d8 	bl	8015cf0 <__wrap_printf>
 800ab40:	4882      	ldr	r0, [pc, #520]	; (800ad4c <RegInt_parsecmd+0x370>)
 800ab42:	f00b f8d5 	bl	8015cf0 <__wrap_printf>
 800ab46:	22bb      	movs	r2, #187	; 0xbb
 800ab48:	4f81      	ldr	r7, [pc, #516]	; (800ad50 <RegInt_parsecmd+0x374>)
 800ab4a:	4e82      	ldr	r6, [pc, #520]	; (800ad54 <RegInt_parsecmd+0x378>)
 800ab4c:	0039      	movs	r1, r7
 800ab4e:	0092      	lsls	r2, r2, #2
 800ab50:	0030      	movs	r0, r6
 800ab52:	f00b f8cd 	bl	8015cf0 <__wrap_printf>
 800ab56:	4c80      	ldr	r4, [pc, #512]	; (800ad58 <RegInt_parsecmd+0x37c>)
 800ab58:	a90d      	add	r1, sp, #52	; 0x34
 800ab5a:	6962      	ldr	r2, [r4, #20]
    acc_service_envelope_get_next_by_reference(sparse_handle, &envelope_data, &envelope_result_info);
 800ab5c:	4b7f      	ldr	r3, [pc, #508]	; (800ad5c <RegInt_parsecmd+0x380>)
 800ab5e:	604a      	str	r2, [r1, #4]
 800ab60:	0022      	movs	r2, r4
 800ab62:	3214      	adds	r2, #20
 800ab64:	4699      	mov	r9, r3
 800ab66:	608a      	str	r2, [r1, #8]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	0022      	movs	r2, r4
 800ab6c:	700b      	strb	r3, [r1, #0]
 800ab6e:	60cb      	str	r3, [r1, #12]
 800ab70:	760b      	strb	r3, [r1, #24]
 800ab72:	764b      	strb	r3, [r1, #25]
 800ab74:	768b      	strb	r3, [r1, #26]
 800ab76:	3218      	adds	r2, #24
 800ab78:	464b      	mov	r3, r9
 800ab7a:	610a      	str	r2, [r1, #16]
 800ab7c:	2204      	movs	r2, #4
 800ab7e:	6858      	ldr	r0, [r3, #4]
 800ab80:	614a      	str	r2, [r1, #20]
 800ab82:	f002 f94d 	bl	800ce20 <acc_service_get_next.constprop.77>
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 800ab86:	68eb      	ldr	r3, [r5, #12]
 800ab88:	6961      	ldr	r1, [r4, #20]
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	464b      	mov	r3, r9
 800ab8e:	8a1a      	ldrh	r2, [r3, #16]
 800ab90:	0052      	lsls	r2, r2, #1
 800ab92:	f00b fd73 	bl	801667c <memcpy>
	INF_PRINTLN("Envelope measurement complete");
 800ab96:	4640      	mov	r0, r8
 800ab98:	f00b f8aa 	bl	8015cf0 <__wrap_printf>
 800ab9c:	4870      	ldr	r0, [pc, #448]	; (800ad60 <RegInt_parsecmd+0x384>)
 800ab9e:	f00b f8a7 	bl	8015cf0 <__wrap_printf>
 800aba2:	22bc      	movs	r2, #188	; 0xbc
 800aba4:	0039      	movs	r1, r7
 800aba6:	0092      	lsls	r2, r2, #2
 800aba8:	0030      	movs	r0, r6
 800abaa:	f00b f8a1 	bl	8015cf0 <__wrap_printf>
 800abae:	e78d      	b.n	800aacc <RegInt_parsecmd+0xf0>
    else if(service_type == 0x04){sparseMeasure();}
 800abb0:	2804      	cmp	r0, #4
 800abb2:	d18b      	bne.n	800aacc <RegInt_parsecmd+0xf0>
	INF_PRINTLN("Start Sparse measurement");
 800abb4:	4864      	ldr	r0, [pc, #400]	; (800ad48 <RegInt_parsecmd+0x36c>)
 800abb6:	f00b f89b 	bl	8015cf0 <__wrap_printf>
 800abba:	486a      	ldr	r0, [pc, #424]	; (800ad64 <RegInt_parsecmd+0x388>)
 800abbc:	f00b f898 	bl	8015cf0 <__wrap_printf>
 800abc0:	4e63      	ldr	r6, [pc, #396]	; (800ad50 <RegInt_parsecmd+0x374>)
 800abc2:	4a69      	ldr	r2, [pc, #420]	; (800ad68 <RegInt_parsecmd+0x38c>)
 800abc4:	0031      	movs	r1, r6
 800abc6:	4863      	ldr	r0, [pc, #396]	; (800ad54 <RegInt_parsecmd+0x378>)
 800abc8:	f00b f892 	bl	8015cf0 <__wrap_printf>
 800abcc:	4c62      	ldr	r4, [pc, #392]	; (800ad58 <RegInt_parsecmd+0x37c>)
 800abce:	4b63      	ldr	r3, [pc, #396]	; (800ad5c <RegInt_parsecmd+0x380>)
 800abd0:	0022      	movs	r2, r4
 800abd2:	0021      	movs	r1, r4
 800abd4:	321c      	adds	r2, #28
 800abd6:	3120      	adds	r1, #32
 800abd8:	6858      	ldr	r0, [r3, #4]
 800abda:	f7f7 fef9 	bl	80029d0 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 800abde:	8a2b      	ldrh	r3, [r5, #16]
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 800abe0:	46a1      	mov	r9, r4
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	1dab      	adds	r3, r5, #6
 800abe6:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800abe8:	9903      	ldr	r1, [sp, #12]
 800abea:	f006 fab3 	bl	8011154 <__udivsi3>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 800abee:	b280      	uxth	r0, r0
 800abf0:	0043      	lsls	r3, r0, #1
 800abf2:	469a      	mov	sl, r3
 800abf4:	425b      	negs	r3, r3
 800abf6:	9304      	str	r3, [sp, #16]
 800abf8:	2300      	movs	r3, #0
 800abfa:	4698      	mov	r8, r3
 800abfc:	001f      	movs	r7, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800abfe:	9a03      	ldr	r2, [sp, #12]
 800ac00:	b2bb      	uxth	r3, r7
 800ac02:	44d0      	add	r8, sl
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d200      	bcs.n	800ac0a <RegInt_parsecmd+0x22e>
 800ac08:	e087      	b.n	800ad1a <RegInt_parsecmd+0x33e>
	INF_PRINTLN("Sparse measurement complete");
 800ac0a:	484f      	ldr	r0, [pc, #316]	; (800ad48 <RegInt_parsecmd+0x36c>)
 800ac0c:	f00b f870 	bl	8015cf0 <__wrap_printf>
 800ac10:	4856      	ldr	r0, [pc, #344]	; (800ad6c <RegInt_parsecmd+0x390>)
 800ac12:	f00b f86d 	bl	8015cf0 <__wrap_printf>
 800ac16:	4f4f      	ldr	r7, [pc, #316]	; (800ad54 <RegInt_parsecmd+0x378>)
 800ac18:	4a55      	ldr	r2, [pc, #340]	; (800ad70 <RegInt_parsecmd+0x394>)
 800ac1a:	0031      	movs	r1, r6
 800ac1c:	0038      	movs	r0, r7
 800ac1e:	f00b f867 	bl	8015cf0 <__wrap_printf>
	if(far_active){
 800ac22:	002b      	movs	r3, r5
 800ac24:	3350      	adds	r3, #80	; 0x50
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d100      	bne.n	800ac2e <RegInt_parsecmd+0x252>
 800ac2c:	e74e      	b.n	800aacc <RegInt_parsecmd+0xf0>
		if(!acc_service_deactivate(sparse_handle)){
 800ac2e:	4b4b      	ldr	r3, [pc, #300]	; (800ad5c <RegInt_parsecmd+0x380>)
 800ac30:	6858      	ldr	r0, [r3, #4]
 800ac32:	f7fe fd31 	bl	8009698 <acc_service_deactivate>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d10a      	bne.n	800ac50 <RegInt_parsecmd+0x274>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 800ac3a:	484e      	ldr	r0, [pc, #312]	; (800ad74 <RegInt_parsecmd+0x398>)
 800ac3c:	f00b f858 	bl	8015cf0 <__wrap_printf>
 800ac40:	484d      	ldr	r0, [pc, #308]	; (800ad78 <RegInt_parsecmd+0x39c>)
 800ac42:	f00b f855 	bl	8015cf0 <__wrap_printf>
 800ac46:	4a4d      	ldr	r2, [pc, #308]	; (800ad7c <RegInt_parsecmd+0x3a0>)
 800ac48:	0031      	movs	r1, r6
 800ac4a:	0038      	movs	r0, r7
 800ac4c:	f00b f850 	bl	8015cf0 <__wrap_printf>
		if (!acc_service_activate(sparse_handle_far)){
 800ac50:	465b      	mov	r3, fp
 800ac52:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ac54:	f7fe fd90 	bl	8009778 <acc_service_activate>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d10a      	bne.n	800ac72 <RegInt_parsecmd+0x296>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 800ac5c:	4845      	ldr	r0, [pc, #276]	; (800ad74 <RegInt_parsecmd+0x398>)
 800ac5e:	f00b f847 	bl	8015cf0 <__wrap_printf>
 800ac62:	4847      	ldr	r0, [pc, #284]	; (800ad80 <RegInt_parsecmd+0x3a4>)
 800ac64:	f00b f844 	bl	8015cf0 <__wrap_printf>
 800ac68:	4a46      	ldr	r2, [pc, #280]	; (800ad84 <RegInt_parsecmd+0x3a8>)
 800ac6a:	0031      	movs	r1, r6
 800ac6c:	0038      	movs	r0, r7
 800ac6e:	f00b f83f 	bl	8015cf0 <__wrap_printf>
 800ac72:	465b      	mov	r3, fp
 800ac74:	0022      	movs	r2, r4
 800ac76:	0021      	movs	r1, r4
 800ac78:	3224      	adds	r2, #36	; 0x24
 800ac7a:	3128      	adds	r1, #40	; 0x28
 800ac7c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ac7e:	f7f7 fea7 	bl	80029d0 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 800ac82:	8a2b      	ldrh	r3, [r5, #16]
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 800ac84:	2600      	movs	r6, #0
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 800ac86:	4699      	mov	r9, r3
 800ac88:	1dab      	adds	r3, r5, #6
 800ac8a:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	f006 fa61 	bl	8011154 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 800ac92:	b280      	uxth	r0, r0
 800ac94:	0043      	lsls	r3, r0, #1
 800ac96:	9303      	str	r3, [sp, #12]
		bins_far = sparse_metadata_far.data_length/sweeps;
 800ac98:	002b      	movs	r3, r5
 800ac9a:	3354      	adds	r3, #84	; 0x54
 800ac9c:	8918      	ldrh	r0, [r3, #8]
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f006 fa58 	bl	8011154 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 800aca4:	b284      	uxth	r4, r0
 800aca6:	0064      	lsls	r4, r4, #1
 800aca8:	4263      	negs	r3, r4
 800acaa:	4698      	mov	r8, r3
 800acac:	4b2a      	ldr	r3, [pc, #168]	; (800ad58 <RegInt_parsecmd+0x37c>)
 800acae:	0037      	movs	r7, r6
 800acb0:	469a      	mov	sl, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800acb2:	b2bb      	uxth	r3, r7
 800acb4:	1936      	adds	r6, r6, r4
 800acb6:	454b      	cmp	r3, r9
 800acb8:	d372      	bcc.n	800ada0 <RegInt_parsecmd+0x3c4>
		if(!acc_service_deactivate(sparse_handle_far)){
 800acba:	465b      	mov	r3, fp
 800acbc:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800acbe:	f7fe fceb 	bl	8009698 <acc_service_deactivate>
 800acc2:	4d23      	ldr	r5, [pc, #140]	; (800ad50 <RegInt_parsecmd+0x374>)
 800acc4:	4c23      	ldr	r4, [pc, #140]	; (800ad54 <RegInt_parsecmd+0x378>)
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d10a      	bne.n	800ace0 <RegInt_parsecmd+0x304>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 800acca:	482a      	ldr	r0, [pc, #168]	; (800ad74 <RegInt_parsecmd+0x398>)
 800accc:	f00b f810 	bl	8015cf0 <__wrap_printf>
 800acd0:	482d      	ldr	r0, [pc, #180]	; (800ad88 <RegInt_parsecmd+0x3ac>)
 800acd2:	f00b f80d 	bl	8015cf0 <__wrap_printf>
 800acd6:	4a2d      	ldr	r2, [pc, #180]	; (800ad8c <RegInt_parsecmd+0x3b0>)
 800acd8:	0029      	movs	r1, r5
 800acda:	0020      	movs	r0, r4
 800acdc:	f00b f808 	bl	8015cf0 <__wrap_printf>
		if (!acc_service_activate(sparse_handle)){
 800ace0:	4b1e      	ldr	r3, [pc, #120]	; (800ad5c <RegInt_parsecmd+0x380>)
 800ace2:	6858      	ldr	r0, [r3, #4]
 800ace4:	f7fe fd48 	bl	8009778 <acc_service_activate>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d10a      	bne.n	800ad02 <RegInt_parsecmd+0x326>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 800acec:	4821      	ldr	r0, [pc, #132]	; (800ad74 <RegInt_parsecmd+0x398>)
 800acee:	f00a ffff 	bl	8015cf0 <__wrap_printf>
 800acf2:	4827      	ldr	r0, [pc, #156]	; (800ad90 <RegInt_parsecmd+0x3b4>)
 800acf4:	f00a fffc 	bl	8015cf0 <__wrap_printf>
 800acf8:	4a26      	ldr	r2, [pc, #152]	; (800ad94 <RegInt_parsecmd+0x3b8>)
 800acfa:	0029      	movs	r1, r5
 800acfc:	0020      	movs	r0, r4
 800acfe:	f00a fff7 	bl	8015cf0 <__wrap_printf>
		INF_PRINTLN("Sparse Far measurement end");
 800ad02:	4811      	ldr	r0, [pc, #68]	; (800ad48 <RegInt_parsecmd+0x36c>)
 800ad04:	f00a fff4 	bl	8015cf0 <__wrap_printf>
 800ad08:	4823      	ldr	r0, [pc, #140]	; (800ad98 <RegInt_parsecmd+0x3bc>)
 800ad0a:	f00a fff1 	bl	8015cf0 <__wrap_printf>
 800ad0e:	4a23      	ldr	r2, [pc, #140]	; (800ad9c <RegInt_parsecmd+0x3c0>)
 800ad10:	0029      	movs	r1, r5
 800ad12:	0020      	movs	r0, r4
 800ad14:	f00a ffec 	bl	8015cf0 <__wrap_printf>
 800ad18:	e6d8      	b.n	800aacc <RegInt_parsecmd+0xf0>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 800ad1a:	68ea      	ldr	r2, [r5, #12]
 800ad1c:	00bb      	lsls	r3, r7, #2
 800ad1e:	5898      	ldr	r0, [r3, r2]
 800ad20:	9b04      	ldr	r3, [sp, #16]
 800ad22:	4652      	mov	r2, sl
 800ad24:	4443      	add	r3, r8
 800ad26:	0019      	movs	r1, r3
 800ad28:	464b      	mov	r3, r9
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	3701      	adds	r7, #1
 800ad2e:	469c      	mov	ip, r3
 800ad30:	4461      	add	r1, ip
 800ad32:	f00b fca3 	bl	801667c <memcpy>
 800ad36:	e762      	b.n	800abfe <RegInt_parsecmd+0x222>
 800ad38:	2000030c 	.word	0x2000030c
 800ad3c:	2000018c 	.word	0x2000018c
 800ad40:	2000040c 	.word	0x2000040c
 800ad44:	2000054c 	.word	0x2000054c
 800ad48:	0801d6c3 	.word	0x0801d6c3
 800ad4c:	0801e8c6 	.word	0x0801e8c6
 800ad50:	0801d2db 	.word	0x0801d2db
 800ad54:	0801eb0c 	.word	0x0801eb0c
 800ad58:	2000048c 	.word	0x2000048c
 800ad5c:	2000038c 	.word	0x2000038c
 800ad60:	0801e8e1 	.word	0x0801e8e1
 800ad64:	0801e8ff 	.word	0x0801e8ff
 800ad68:	000002ca 	.word	0x000002ca
 800ad6c:	0801e918 	.word	0x0801e918
 800ad70:	000002ce 	.word	0x000002ce
 800ad74:	0801ead4 	.word	0x0801ead4
 800ad78:	0801e934 	.word	0x0801e934
 800ad7c:	000002d2 	.word	0x000002d2
 800ad80:	0801e95f 	.word	0x0801e95f
 800ad84:	000002d6 	.word	0x000002d6
 800ad88:	0801e98c 	.word	0x0801e98c
 800ad8c:	000002df 	.word	0x000002df
 800ad90:	0801e9bb 	.word	0x0801e9bb
 800ad94:	000002e2 	.word	0x000002e2
 800ad98:	0801e9e4 	.word	0x0801e9e4
 800ad9c:	000002e6 	.word	0x000002e6
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 800ada0:	68ea      	ldr	r2, [r5, #12]
 800ada2:	00bb      	lsls	r3, r7, #2
 800ada4:	5898      	ldr	r0, [r3, r2]
 800ada6:	9b03      	ldr	r3, [sp, #12]
 800ada8:	0022      	movs	r2, r4
 800adaa:	469c      	mov	ip, r3
 800adac:	4643      	mov	r3, r8
 800adae:	1999      	adds	r1, r3, r6
 800adb0:	4653      	mov	r3, sl
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	4460      	add	r0, ip
 800adb6:	469c      	mov	ip, r3
 800adb8:	4461      	add	r1, ip
 800adba:	f00b fc5f 	bl	801667c <memcpy>
 800adbe:	3701      	adds	r7, #1
 800adc0:	e777      	b.n	800acb2 <RegInt_parsecmd+0x2d6>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
	float sweep_rate = sparse_metadata.sweep_rate;
	uint8v2_t data_size = {sweeps,bins};
	
	float min_scale = 1.0f;
 800adc2:	23fe      	movs	r3, #254	; 0xfe
 800adc4:	059b      	lsls	r3, r3, #22
 800adc6:	4698      	mov	r8, r3
 800adc8:	e13a      	b.n	800b040 <RegInt_parsecmd+0x664>
	if(reg == 0x07){
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	2b07      	cmp	r3, #7
 800adce:	d103      	bne.n	800add8 <RegInt_parsecmd+0x3fc>
		changeUART1baud(val);
 800add0:	0020      	movs	r0, r4
 800add2:	f7f8 fbed 	bl	80035b0 <changeUART1baud>
 800add6:	e679      	b.n	800aacc <RegInt_parsecmd+0xf0>
    if(reg == 0x0A){
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	2b0a      	cmp	r3, #10
 800addc:	d000      	beq.n	800ade0 <RegInt_parsecmd+0x404>
 800adde:	e675      	b.n	800aacc <RegInt_parsecmd+0xf0>
    if(mode == 0x00000000){return;}
 800ade0:	2c00      	cmp	r4, #0
 800ade2:	d100      	bne.n	800ade6 <RegInt_parsecmd+0x40a>
 800ade4:	e672      	b.n	800aacc <RegInt_parsecmd+0xf0>
    if(mode == 0x00000001){    
 800ade6:	2c01      	cmp	r4, #1
 800ade8:	d12e      	bne.n	800ae48 <RegInt_parsecmd+0x46c>
        stopService();
 800adea:	f7fe ff6f 	bl	8009ccc <stopService>
        INF_PRINTLN("STM32 Sleep");
 800adee:	4e65      	ldr	r6, [pc, #404]	; (800af84 <RegInt_parsecmd+0x5a8>)
 800adf0:	0030      	movs	r0, r6
 800adf2:	f00a ff7d 	bl	8015cf0 <__wrap_printf>
 800adf6:	4864      	ldr	r0, [pc, #400]	; (800af88 <RegInt_parsecmd+0x5ac>)
 800adf8:	f00a ff7a 	bl	8015cf0 <__wrap_printf>
 800adfc:	2296      	movs	r2, #150	; 0x96
 800adfe:	4d63      	ldr	r5, [pc, #396]	; (800af8c <RegInt_parsecmd+0x5b0>)
 800ae00:	4c63      	ldr	r4, [pc, #396]	; (800af90 <RegInt_parsecmd+0x5b4>)
 800ae02:	0052      	lsls	r2, r2, #1
 800ae04:	0029      	movs	r1, r5
 800ae06:	0020      	movs	r0, r4
 800ae08:	f00a ff72 	bl	8015cf0 <__wrap_printf>
        HAL_SuspendTick();
 800ae0c:	f002 fdf4 	bl	800d9f8 <HAL_SuspendTick>
        HAL_PWR_DisableSleepOnExit();
 800ae10:	f003 fdca 	bl	800e9a8 <HAL_PWR_DisableSleepOnExit>
        HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 800ae14:	2080      	movs	r0, #128	; 0x80
 800ae16:	2102      	movs	r1, #2
 800ae18:	01c0      	lsls	r0, r0, #7
 800ae1a:	f003 fdcd 	bl	800e9b8 <HAL_PWR_EnterSTOPMode>
        SystemClock_Config();
 800ae1e:	f7f8 fd15 	bl	800384c <SystemClock_Config>
        HAL_ResumeTick();
 800ae22:	f002 fde1 	bl	800d9e8 <HAL_ResumeTick>
        uint32_t baudrate = RegInt_getreg(0x07);
 800ae26:	2007      	movs	r0, #7
 800ae28:	f7fe fdbc 	bl	80099a4 <RegInt_getreg>
        changeUART1baud(baudrate);
 800ae2c:	f7f8 fbc0 	bl	80035b0 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 800ae30:	0030      	movs	r0, r6
 800ae32:	f00a ff5d 	bl	8015cf0 <__wrap_printf>
 800ae36:	4857      	ldr	r0, [pc, #348]	; (800af94 <RegInt_parsecmd+0x5b8>)
 800ae38:	f00a ff5a 	bl	8015cf0 <__wrap_printf>
 800ae3c:	2238      	movs	r2, #56	; 0x38
 800ae3e:	0029      	movs	r1, r5
 800ae40:	32ff      	adds	r2, #255	; 0xff
 800ae42:	0020      	movs	r0, r4
 800ae44:	f00a ff54 	bl	8015cf0 <__wrap_printf>
    RegInt_setregf(0x0A,0x00000000,1);
 800ae48:	2201      	movs	r2, #1
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	200a      	movs	r0, #10
 800ae4e:	f7fe feff 	bl	8009c50 <RegInt_setregf>
 800ae52:	e63b      	b.n	800aacc <RegInt_parsecmd+0xf0>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 800ae54:	2afa      	cmp	r2, #250	; 0xfa
 800ae56:	d000      	beq.n	800ae5a <RegInt_parsecmd+0x47e>
 800ae58:	e602      	b.n	800aa60 <RegInt_parsecmd+0x84>
 800ae5a:	7858      	ldrb	r0, [r3, #1]
 800ae5c:	0002      	movs	r2, r0
 800ae5e:	3218      	adds	r2, #24
 800ae60:	b2d2      	uxtb	r2, r2
 800ae62:	2a01      	cmp	r2, #1
 800ae64:	d900      	bls.n	800ae68 <RegInt_parsecmd+0x48c>
 800ae66:	e5fb      	b.n	800aa60 <RegInt_parsecmd+0x84>
 800ae68:	465a      	mov	r2, fp
 800ae6a:	327e      	adds	r2, #126	; 0x7e
 800ae6c:	7812      	ldrb	r2, [r2, #0]
 800ae6e:	2a03      	cmp	r2, #3
 800ae70:	d000      	beq.n	800ae74 <RegInt_parsecmd+0x498>
 800ae72:	e5f5      	b.n	800aa60 <RegInt_parsecmd+0x84>
		uint16_t offst = (offst_h << 8) | offst_l;
 800ae74:	78d9      	ldrb	r1, [r3, #3]
 800ae76:	789b      	ldrb	r3, [r3, #2]
 800ae78:	0209      	lsls	r1, r1, #8
 800ae7a:	430b      	orrs	r3, r1
 800ae7c:	9302      	str	r3, [sp, #8]
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 800ae7e:	1dab      	adds	r3, r5, #6
 800ae80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae82:	4a45      	ldr	r2, [pc, #276]	; (800af98 <RegInt_parsecmd+0x5bc>)
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	62d3      	str	r3, [r2, #44]	; 0x2c
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 800ae88:	002b      	movs	r3, r5
 800ae8a:	3354      	adds	r3, #84	; 0x54
 800ae8c:	891b      	ldrh	r3, [r3, #8]
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	6313      	str	r3, [r2, #48]	; 0x30
		if(uart_rx_buff[1] == 0xE8){
 800ae92:	28e8      	cmp	r0, #232	; 0xe8
 800ae94:	d173      	bne.n	800af7e <RegInt_parsecmd+0x5a2>
        DBG_PRINTINT(bins);
 800ae96:	23bc      	movs	r3, #188	; 0xbc
 800ae98:	4c40      	ldr	r4, [pc, #256]	; (800af9c <RegInt_parsecmd+0x5c0>)
 800ae9a:	4e3c      	ldr	r6, [pc, #240]	; (800af8c <RegInt_parsecmd+0x5b0>)
 800ae9c:	8a6a      	ldrh	r2, [r5, #18]
 800ae9e:	4940      	ldr	r1, [pc, #256]	; (800afa0 <RegInt_parsecmd+0x5c4>)
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	0020      	movs	r0, r4
 800aea4:	0033      	movs	r3, r6
 800aea6:	f00a ff23 	bl	8015cf0 <__wrap_printf>
        DBG_PRINTINT(sweeps);
 800aeaa:	23bd      	movs	r3, #189	; 0xbd
 800aeac:	8a2a      	ldrh	r2, [r5, #16]
 800aeae:	0020      	movs	r0, r4
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	493c      	ldr	r1, [pc, #240]	; (800afa4 <RegInt_parsecmd+0x5c8>)
 800aeb4:	0033      	movs	r3, r6
 800aeb6:	f00a ff1b 	bl	8015cf0 <__wrap_printf>
		datalen = sweeps*bins*sizeof(uint16_t);
 800aeba:	8a2a      	ldrh	r2, [r5, #16]
 800aebc:	8a6c      	ldrh	r4, [r5, #18]
 800aebe:	4354      	muls	r4, r2
 800aec0:	0064      	lsls	r4, r4, #1
		uart_tx_buff[0] = 0xCC;
 800aec2:	23cc      	movs	r3, #204	; 0xcc
 800aec4:	4d38      	ldr	r5, [pc, #224]	; (800afa8 <RegInt_parsecmd+0x5cc>)
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800aec6:	1c66      	adds	r6, r4, #1
		uart_tx_buff[0] = 0xCC;
 800aec8:	3554      	adds	r5, #84	; 0x54
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800aeca:	2100      	movs	r1, #0
 800aecc:	0030      	movs	r0, r6
		uart_tx_buff[0] = 0xCC;
 800aece:	4698      	mov	r8, r3
 800aed0:	702b      	strb	r3, [r5, #0]
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800aed2:	f7f6 fc94 	bl	80017fe <get_byte>
		uart_tx_buff[2] = get_byte(datalen+1,1);
 800aed6:	2101      	movs	r1, #1
		uart_tx_buff[1] = get_byte(datalen+1,0);
 800aed8:	7068      	strb	r0, [r5, #1]
		uart_tx_buff[2] = get_byte(datalen+1,1);
 800aeda:	0030      	movs	r0, r6
 800aedc:	f7f6 fc8f 	bl	80017fe <get_byte>
		uart_tx_buff[3] = 0xF7;
 800aee0:	23f7      	movs	r3, #247	; 0xf7
 800aee2:	70eb      	strb	r3, [r5, #3]
		uart_tx_buff[4] = uart_rx_buff[1];
 800aee4:	4b31      	ldr	r3, [pc, #196]	; (800afac <RegInt_parsecmd+0x5d0>)
		uart_tx_buff[2] = get_byte(datalen+1,1);
 800aee6:	70a8      	strb	r0, [r5, #2]
		uart_tx_buff[4] = uart_rx_buff[1];
 800aee8:	4699      	mov	r9, r3
 800aeea:	3368      	adds	r3, #104	; 0x68
 800aeec:	785b      	ldrb	r3, [r3, #1]
		DBG_PRINTLN("buffer transmitt");
 800aeee:	4830      	ldr	r0, [pc, #192]	; (800afb0 <RegInt_parsecmd+0x5d4>)
		uart_tx_buff[4] = uart_rx_buff[1];
 800aef0:	712b      	strb	r3, [r5, #4]
		DBG_PRINTLN("buffer transmitt");
 800aef2:	f00a fefd 	bl	8015cf0 <__wrap_printf>
 800aef6:	482f      	ldr	r0, [pc, #188]	; (800afb4 <RegInt_parsecmd+0x5d8>)
 800aef8:	f00a fefa 	bl	8015cf0 <__wrap_printf>
 800aefc:	4e23      	ldr	r6, [pc, #140]	; (800af8c <RegInt_parsecmd+0x5b0>)
 800aefe:	22c9      	movs	r2, #201	; 0xc9
 800af00:	0031      	movs	r1, r6
 800af02:	4823      	ldr	r0, [pc, #140]	; (800af90 <RegInt_parsecmd+0x5b4>)
 800af04:	f00a fef4 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTINT(datalen);
 800af08:	23ca      	movs	r3, #202	; 0xca
 800af0a:	4f24      	ldr	r7, [pc, #144]	; (800af9c <RegInt_parsecmd+0x5c0>)
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	0022      	movs	r2, r4
 800af10:	0033      	movs	r3, r6
 800af12:	4929      	ldr	r1, [pc, #164]	; (800afb8 <RegInt_parsecmd+0x5dc>)
 800af14:	0038      	movs	r0, r7
 800af16:	f00a feeb 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 800af1a:	4b1f      	ldr	r3, [pc, #124]	; (800af98 <RegInt_parsecmd+0x5bc>)
 800af1c:	4927      	ldr	r1, [pc, #156]	; (800afbc <RegInt_parsecmd+0x5e0>)
 800af1e:	469a      	mov	sl, r3
 800af20:	23cb      	movs	r3, #203	; 0xcb
 800af22:	4652      	mov	r2, sl
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800af28:	0033      	movs	r3, r6
 800af2a:	0038      	movs	r0, r7
 800af2c:	f00a fee0 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 800af30:	4643      	mov	r3, r8
 800af32:	4652      	mov	r2, sl
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af38:	0033      	movs	r3, r6
 800af3a:	4921      	ldr	r1, [pc, #132]	; (800afc0 <RegInt_parsecmd+0x5e4>)
 800af3c:	0038      	movs	r0, r7
 800af3e:	f00a fed7 	bl	8015cf0 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 800af42:	4b20      	ldr	r3, [pc, #128]	; (800afc4 <RegInt_parsecmd+0x5e8>)
 800af44:	0029      	movs	r1, r5
 800af46:	469a      	mov	sl, r3
 800af48:	2205      	movs	r2, #5
 800af4a:	230a      	movs	r3, #10
 800af4c:	4650      	mov	r0, sl
 800af4e:	f002 fe07 	bl	800db60 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 800af52:	465b      	mov	r3, fp
 800af54:	2201      	movs	r2, #1
 800af56:	337c      	adds	r3, #124	; 0x7c
 800af58:	701a      	strb	r2, [r3, #0]
		DBG_PRINTINT(queue_cmd_end);
 800af5a:	23d0      	movs	r3, #208	; 0xd0
 800af5c:	491a      	ldr	r1, [pc, #104]	; (800afc8 <RegInt_parsecmd+0x5ec>)
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	0038      	movs	r0, r7
 800af62:	0033      	movs	r3, r6
 800af64:	f00a fec4 	bl	8015cf0 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 800af68:	464b      	mov	r3, r9
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	b2a2      	uxth	r2, r4
 800af6e:	6819      	ldr	r1, [r3, #0]
 800af70:	9b02      	ldr	r3, [sp, #8]
 800af72:	4650      	mov	r0, sl
 800af74:	469c      	mov	ip, r3
 800af76:	4461      	add	r1, ip
 800af78:	f002 fad0 	bl	800d51c <HAL_UART_Transmit_IT>
 800af7c:	e570      	b.n	800aa60 <RegInt_parsecmd+0x84>
		datalen = 128*sizeof(uint16_t);
 800af7e:	2480      	movs	r4, #128	; 0x80
 800af80:	0064      	lsls	r4, r4, #1
 800af82:	e79e      	b.n	800aec2 <RegInt_parsecmd+0x4e6>
 800af84:	0801d6c3 	.word	0x0801d6c3
 800af88:	0801ea7b 	.word	0x0801ea7b
 800af8c:	0801d2db 	.word	0x0801d2db
 800af90:	0801eb0c 	.word	0x0801eb0c
 800af94:	0801ea87 	.word	0x0801ea87
 800af98:	2000048c 	.word	0x2000048c
 800af9c:	0801e836 	.word	0x0801e836
 800afa0:	0801ea92 	.word	0x0801ea92
 800afa4:	0801d2bc 	.word	0x0801d2bc
 800afa8:	2000040c 	.word	0x2000040c
 800afac:	2000018c 	.word	0x2000018c
 800afb0:	0801d2c3 	.word	0x0801d2c3
 800afb4:	0801ea97 	.word	0x0801ea97
 800afb8:	0801eaa8 	.word	0x0801eaa8
 800afbc:	0801eab0 	.word	0x0801eab0
 800afc0:	0801eab8 	.word	0x0801eab8
 800afc4:	2000054c 	.word	0x2000054c
 800afc8:	0801eac4 	.word	0x0801eac4
	if (val == 0x06){evalData();}
 800afcc:	2c06      	cmp	r4, #6
 800afce:	d000      	beq.n	800afd2 <RegInt_parsecmd+0x5f6>
 800afd0:	e57c      	b.n	800aacc <RegInt_parsecmd+0xf0>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 800afd2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
	uint8v2_t data_size = {sweeps,bins};
 800afd4:	8a2a      	ldrh	r2, [r5, #16]
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 800afd6:	9304      	str	r3, [sp, #16]
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800afd8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800afda:	20d4      	movs	r0, #212	; 0xd4
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800afdc:	9305      	str	r3, [sp, #20]
	float sweep_rate = sparse_metadata.sweep_rate;
 800afde:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800afe0:	9306      	str	r3, [sp, #24]
	uint8v2_t data_size = {sweeps,bins};
 800afe2:	ab0b      	add	r3, sp, #44	; 0x2c
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	8a6a      	ldrh	r2, [r5, #18]
 800afe8:	705a      	strb	r2, [r3, #1]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800afea:	f7fe fcdb 	bl	80099a4 <RegInt_getreg>
 800afee:	9007      	str	r0, [sp, #28]
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 800aff0:	20d8      	movs	r0, #216	; 0xd8
 800aff2:	f7fe fcd7 	bl	80099a4 <RegInt_getreg>
 800aff6:	9008      	str	r0, [sp, #32]
	uint32_t mode = RegInt_getreg(0xD6);
 800aff8:	20d6      	movs	r0, #214	; 0xd6
 800affa:	f7fe fcd3 	bl	80099a4 <RegInt_getreg>
 800affe:	0004      	movs	r4, r0
	uint8_t roi_radius = RegInt_getreg(0xD7);
 800b000:	20d7      	movs	r0, #215	; 0xd7
 800b002:	f7fe fccf 	bl	80099a4 <RegInt_getreg>
 800b006:	9009      	str	r0, [sp, #36]	; 0x24
	uint32_t band_filt = RegInt_getreg(0xD9);
 800b008:	20d9      	movs	r0, #217	; 0xd9
 800b00a:	f7fe fccb 	bl	80099a4 <RegInt_getreg>
	float velocity;
	float distance;
	float amplitude;
	float meansqdist;

	DBG_PRINTINT(mode);
 800b00e:	4b95      	ldr	r3, [pc, #596]	; (800b264 <RegInt_parsecmd+0x888>)
 800b010:	4e95      	ldr	r6, [pc, #596]	; (800b268 <RegInt_parsecmd+0x88c>)
	uint32_t band_filt = RegInt_getreg(0xD9);
 800b012:	0007      	movs	r7, r0
	DBG_PRINTINT(mode);
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	0022      	movs	r2, r4
 800b018:	0033      	movs	r3, r6
 800b01a:	4994      	ldr	r1, [pc, #592]	; (800b26c <RegInt_parsecmd+0x890>)
 800b01c:	4894      	ldr	r0, [pc, #592]	; (800b270 <RegInt_parsecmd+0x894>)
 800b01e:	f00a fe67 	bl	8015cf0 <__wrap_printf>

	//dc removal
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 800b022:	07e3      	lsls	r3, r4, #31
 800b024:	d503      	bpl.n	800b02e <RegInt_parsecmd+0x652>
 800b026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b028:	68e8      	ldr	r0, [r5, #12]
 800b02a:	f7f6 fbad 	bl	8001788 <dcdatarm>
 800b02e:	4d91      	ldr	r5, [pc, #580]	; (800b274 <RegInt_parsecmd+0x898>)
	
	//do fft on each row of data
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 800b030:	07a3      	lsls	r3, r4, #30
 800b032:	d400      	bmi.n	800b036 <RegInt_parsecmd+0x65a>
 800b034:	e6c5      	b.n	800adc2 <RegInt_parsecmd+0x3e6>
 800b036:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b038:	68e8      	ldr	r0, [r5, #12]
 800b03a:	f7f8 f897 	bl	800316c <dofft>
 800b03e:	4680      	mov	r8, r0
	
	//bandstop filter
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 800b040:	06a3      	lsls	r3, r4, #26
 800b042:	d504      	bpl.n	800b04e <RegInt_parsecmd+0x672>
 800b044:	003a      	movs	r2, r7
 800b046:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b048:	68e8      	ldr	r0, [r5, #12]
 800b04a:	f7f6 fb7d 	bl	8001748 <dobandstop>
	
	//do convolution
	if(mode & 0x00000004){
 800b04e:	0763      	lsls	r3, r4, #29
 800b050:	d50d      	bpl.n	800b06e <RegInt_parsecmd+0x692>
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 800b052:	20d5      	movs	r0, #213	; 0xd5
 800b054:	f7fe fca6 	bl	80099a4 <RegInt_getreg>
 800b058:	f006 fcaa 	bl	80119b0 <__aeabi_ui2f>
 800b05c:	4986      	ldr	r1, [pc, #536]	; (800b278 <RegInt_parsecmd+0x89c>)
 800b05e:	f005 fc35 	bl	80108cc <__aeabi_fdiv>
		doconv(data, data_size, st_dev);
 800b062:	4b84      	ldr	r3, [pc, #528]	; (800b274 <RegInt_parsecmd+0x898>)
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 800b064:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 800b066:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b068:	68d8      	ldr	r0, [r3, #12]
 800b06a:	f7f7 fe57 	bl	8002d1c <doconv>
	}
	//calulate velocity parameters
	if(mode & 0x00000008){
 800b06e:	0723      	lsls	r3, r4, #28
 800b070:	d400      	bmi.n	800b074 <RegInt_parsecmd+0x698>
 800b072:	e52b      	b.n	800aacc <RegInt_parsecmd+0xf0>
			//get maximum index and maximum
		uint8v2_t max_index = max2d(data, data_size);
 800b074:	4b7f      	ldr	r3, [pc, #508]	; (800b274 <RegInt_parsecmd+0x898>)
 800b076:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b078:	4699      	mov	r9, r3
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	469a      	mov	sl, r3
 800b07e:	0018      	movs	r0, r3
 800b080:	f7f6 fa60 	bl	8001544 <max2d>
		uint16_t apex = data[max_index.x1][max_index.x2];
 800b084:	4652      	mov	r2, sl
		uint8v2_t max_index = max2d(data, data_size);
 800b086:	b2c5      	uxtb	r5, r0
 800b088:	ab0c      	add	r3, sp, #48	; 0x30
 800b08a:	8018      	strh	r0, [r3, #0]
 800b08c:	b287      	uxth	r7, r0
		uint16_t apex = data[max_index.x1][max_index.x2];
 800b08e:	00ab      	lsls	r3, r5, #2
 800b090:	589b      	ldr	r3, [r3, r2]
		uint8v2_t max_index = max2d(data, data_size);
 800b092:	0a3f      	lsrs	r7, r7, #8
		uint16_t apex = data[max_index.x1][max_index.x2];
 800b094:	007a      	lsls	r2, r7, #1
		
		DBG_PRINTINT(apex);
 800b096:	5ad3      	ldrh	r3, [r2, r3]
 800b098:	4978      	ldr	r1, [pc, #480]	; (800b27c <RegInt_parsecmd+0x8a0>)
 800b09a:	9303      	str	r3, [sp, #12]
 800b09c:	4b72      	ldr	r3, [pc, #456]	; (800b268 <RegInt_parsecmd+0x88c>)
 800b09e:	9a03      	ldr	r2, [sp, #12]
 800b0a0:	469b      	mov	fp, r3
 800b0a2:	4b73      	ldr	r3, [pc, #460]	; (800b270 <RegInt_parsecmd+0x894>)
 800b0a4:	469a      	mov	sl, r3
 800b0a6:	4b76      	ldr	r3, [pc, #472]	; (800b280 <RegInt_parsecmd+0x8a4>)
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	f00a fe1f 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 800b0b2:	23d0      	movs	r3, #208	; 0xd0
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	002a      	movs	r2, r5
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	4972      	ldr	r1, [pc, #456]	; (800b284 <RegInt_parsecmd+0x8a8>)
 800b0bc:	465b      	mov	r3, fp
 800b0be:	4650      	mov	r0, sl
 800b0c0:	f00a fe16 	bl	8015cf0 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 800b0c4:	4b70      	ldr	r3, [pc, #448]	; (800b288 <RegInt_parsecmd+0x8ac>)
 800b0c6:	003a      	movs	r2, r7
 800b0c8:	4970      	ldr	r1, [pc, #448]	; (800b28c <RegInt_parsecmd+0x8b0>)
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	465b      	mov	r3, fp
 800b0d0:	f00a fe0e 	bl	8015cf0 <__wrap_printf>
		
		//get mean square distnace from maximum
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800b0d4:	464b      	mov	r3, r9
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800b0d6:	9807      	ldr	r0, [sp, #28]
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800b0d8:	68dd      	ldr	r5, [r3, #12]
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800b0da:	f006 fc69 	bl	80119b0 <__aeabi_ui2f>
 800b0de:	4966      	ldr	r1, [pc, #408]	; (800b278 <RegInt_parsecmd+0x89c>)
 800b0e0:	f005 fbf4 	bl	80108cc <__aeabi_fdiv>
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800b0e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800b0e6:	1c03      	adds	r3, r0, #0
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800b0e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ea:	0028      	movs	r0, r5
 800b0ec:	f7f6 f9b5 	bl	800145a <get_msd>
 800b0f0:	1c07      	adds	r7, r0, #0
				
		//null data less than threshold
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 800b0f2:	06e3      	lsls	r3, r4, #27
 800b0f4:	d50b      	bpl.n	800b10e <RegInt_parsecmd+0x732>
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 800b0f6:	9808      	ldr	r0, [sp, #32]
 800b0f8:	f006 fc5a 	bl	80119b0 <__aeabi_ui2f>
 800b0fc:	495e      	ldr	r1, [pc, #376]	; (800b278 <RegInt_parsecmd+0x89c>)
 800b0fe:	f005 fbe5 	bl	80108cc <__aeabi_fdiv>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 800b102:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 800b104:	1c03      	adds	r3, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 800b106:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b108:	0028      	movs	r0, r5
 800b10a:	f7f6 f971 	bl	80013f0 <null_data>
		
		//the center of mass of the image need to be computed
		floatv2_t com = center_of_mass(max_index, roi_radius);
 800b10e:	2224      	movs	r2, #36	; 0x24
 800b110:	466b      	mov	r3, sp
 800b112:	189b      	adds	r3, r3, r2
 800b114:	781a      	ldrb	r2, [r3, #0]
 800b116:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b118:	a80d      	add	r0, sp, #52	; 0x34
 800b11a:	f7f6 faa1 	bl	8001660 <center_of_mass>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 800b11e:	4956      	ldr	r1, [pc, #344]	; (800b278 <RegInt_parsecmd+0x89c>)
 800b120:	9804      	ldr	r0, [sp, #16]
 800b122:	f005 fce5 	bl	8010af0 <__aeabi_fmul>
 800b126:	f006 fa23 	bl	8011570 <__aeabi_f2uiz>
		
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800b12a:	b280      	uxth	r0, r0
 800b12c:	f006 fbf6 	bl	801191c <__aeabi_i2f>
 800b130:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b132:	f005 fcdd 	bl	8010af0 <__aeabi_fmul>
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800b136:	4950      	ldr	r1, [pc, #320]	; (800b278 <RegInt_parsecmd+0x89c>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800b138:	1c04      	adds	r4, r0, #0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800b13a:	9805      	ldr	r0, [sp, #20]
 800b13c:	f005 fcd8 	bl	8010af0 <__aeabi_fmul>
 800b140:	f006 fa16 	bl	8011570 <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800b144:	b280      	uxth	r0, r0
 800b146:	f006 fbe9 	bl	801191c <__aeabi_i2f>
 800b14a:	1c01      	adds	r1, r0, #0
 800b14c:	1c20      	adds	r0, r4, #0
 800b14e:	f005 fa23 	bl	8010598 <__aeabi_fadd>
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 800b152:	464b      	mov	r3, r9
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800b154:	1c04      	adds	r4, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 800b156:	8a18      	ldrh	r0, [r3, #16]
 800b158:	f006 fbe0 	bl	801191c <__aeabi_i2f>
 800b15c:	1c01      	adds	r1, r0, #0
 800b15e:	9806      	ldr	r0, [sp, #24]
 800b160:	f005 fbb4 	bl	80108cc <__aeabi_fdiv>
 800b164:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b166:	f005 fcc3 	bl	8010af0 <__aeabi_fmul>
 800b16a:	4949      	ldr	r1, [pc, #292]	; (800b290 <RegInt_parsecmd+0x8b4>)
 800b16c:	f005 fcc0 	bl	8010af0 <__aeabi_fmul>
		
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 800b170:	2100      	movs	r1, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 800b172:	4681      	mov	r9, r0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 800b174:	4640      	mov	r0, r8
 800b176:	f006 f9ad 	bl	80114d4 <__aeabi_fcmpeq>
		else{amplitude = 0;}
 800b17a:	2500      	movs	r5, #0
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d106      	bne.n	800b18e <RegInt_parsecmd+0x7b2>
 800b180:	9803      	ldr	r0, [sp, #12]
 800b182:	f006 fbcb 	bl	801191c <__aeabi_i2f>
 800b186:	4641      	mov	r1, r8
 800b188:	f005 fba0 	bl	80108cc <__aeabi_fdiv>
 800b18c:	1c05      	adds	r5, r0, #0
		
		//store results
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 800b18e:	4648      	mov	r0, r9
 800b190:	f006 f9ee 	bl	8011570 <__aeabi_f2uiz>
 800b194:	2201      	movs	r2, #1
 800b196:	0001      	movs	r1, r0
 800b198:	20d0      	movs	r0, #208	; 0xd0
 800b19a:	f7fe fd59 	bl	8009c50 <RegInt_setregf>
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 800b19e:	1c20      	adds	r0, r4, #0
 800b1a0:	f006 f9e6 	bl	8011570 <__aeabi_f2uiz>
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	0001      	movs	r1, r0
 800b1a8:	20d1      	movs	r0, #209	; 0xd1
 800b1aa:	f7fe fd51 	bl	8009c50 <RegInt_setregf>
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 800b1ae:	1c28      	adds	r0, r5, #0
 800b1b0:	f006 f9de 	bl	8011570 <__aeabi_f2uiz>
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	0001      	movs	r1, r0
 800b1b8:	20d2      	movs	r0, #210	; 0xd2
 800b1ba:	f7fe fd49 	bl	8009c50 <RegInt_setregf>
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 800b1be:	1c38      	adds	r0, r7, #0
 800b1c0:	f006 f9d6 	bl	8011570 <__aeabi_f2uiz>
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	0001      	movs	r1, r0
 800b1c8:	20d3      	movs	r0, #211	; 0xd3
 800b1ca:	f7fe fd41 	bl	8009c50 <RegInt_setregf>
		print_sparse_results();
	}
}

void print_sparse_results(void){
		INF_PRINTLN("RESULTS");
 800b1ce:	4d31      	ldr	r5, [pc, #196]	; (800b294 <RegInt_parsecmd+0x8b8>)
 800b1d0:	0028      	movs	r0, r5
 800b1d2:	f00a fd8d 	bl	8015cf0 <__wrap_printf>
 800b1d6:	4830      	ldr	r0, [pc, #192]	; (800b298 <RegInt_parsecmd+0x8bc>)
 800b1d8:	f00a fd8a 	bl	8015cf0 <__wrap_printf>
 800b1dc:	4c2f      	ldr	r4, [pc, #188]	; (800b29c <RegInt_parsecmd+0x8c0>)
 800b1de:	4a30      	ldr	r2, [pc, #192]	; (800b2a0 <RegInt_parsecmd+0x8c4>)
 800b1e0:	0031      	movs	r1, r6
 800b1e2:	0020      	movs	r0, r4
 800b1e4:	f00a fd84 	bl	8015cf0 <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 800b1e8:	0028      	movs	r0, r5
 800b1ea:	f00a fd81 	bl	8015cf0 <__wrap_printf>
 800b1ee:	20d0      	movs	r0, #208	; 0xd0
 800b1f0:	f7fe fbd8 	bl	80099a4 <RegInt_getreg>
 800b1f4:	0001      	movs	r1, r0
 800b1f6:	482b      	ldr	r0, [pc, #172]	; (800b2a4 <RegInt_parsecmd+0x8c8>)
 800b1f8:	f00a fd7a 	bl	8015cf0 <__wrap_printf>
 800b1fc:	4a2a      	ldr	r2, [pc, #168]	; (800b2a8 <RegInt_parsecmd+0x8cc>)
 800b1fe:	0031      	movs	r1, r6
 800b200:	0020      	movs	r0, r4
 800b202:	f00a fd75 	bl	8015cf0 <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 800b206:	0028      	movs	r0, r5
 800b208:	f00a fd72 	bl	8015cf0 <__wrap_printf>
 800b20c:	20d1      	movs	r0, #209	; 0xd1
 800b20e:	f7fe fbc9 	bl	80099a4 <RegInt_getreg>
 800b212:	0001      	movs	r1, r0
 800b214:	4825      	ldr	r0, [pc, #148]	; (800b2ac <RegInt_parsecmd+0x8d0>)
 800b216:	f00a fd6b 	bl	8015cf0 <__wrap_printf>
 800b21a:	4a25      	ldr	r2, [pc, #148]	; (800b2b0 <RegInt_parsecmd+0x8d4>)
 800b21c:	0031      	movs	r1, r6
 800b21e:	0020      	movs	r0, r4
 800b220:	f00a fd66 	bl	8015cf0 <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 800b224:	0028      	movs	r0, r5
 800b226:	f00a fd63 	bl	8015cf0 <__wrap_printf>
 800b22a:	20d2      	movs	r0, #210	; 0xd2
 800b22c:	f7fe fbba 	bl	80099a4 <RegInt_getreg>
 800b230:	0001      	movs	r1, r0
 800b232:	4820      	ldr	r0, [pc, #128]	; (800b2b4 <RegInt_parsecmd+0x8d8>)
 800b234:	f00a fd5c 	bl	8015cf0 <__wrap_printf>
 800b238:	22d8      	movs	r2, #216	; 0xd8
 800b23a:	0031      	movs	r1, r6
 800b23c:	0092      	lsls	r2, r2, #2
 800b23e:	0020      	movs	r0, r4
 800b240:	f00a fd56 	bl	8015cf0 <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 800b244:	0028      	movs	r0, r5
 800b246:	f00a fd53 	bl	8015cf0 <__wrap_printf>
 800b24a:	20d3      	movs	r0, #211	; 0xd3
 800b24c:	f7fe fbaa 	bl	80099a4 <RegInt_getreg>
 800b250:	0001      	movs	r1, r0
 800b252:	4819      	ldr	r0, [pc, #100]	; (800b2b8 <RegInt_parsecmd+0x8dc>)
 800b254:	f00a fd4c 	bl	8015cf0 <__wrap_printf>
 800b258:	4a18      	ldr	r2, [pc, #96]	; (800b2bc <RegInt_parsecmd+0x8e0>)
 800b25a:	0031      	movs	r1, r6
 800b25c:	0020      	movs	r0, r4
 800b25e:	f00a fd47 	bl	8015cf0 <__wrap_printf>
 800b262:	e433      	b.n	800aacc <RegInt_parsecmd+0xf0>
 800b264:	00000329 	.word	0x00000329
 800b268:	0801d2db 	.word	0x0801d2db
 800b26c:	0801cccc 	.word	0x0801cccc
 800b270:	0801e836 	.word	0x0801e836
 800b274:	2000018c 	.word	0x2000018c
 800b278:	447a0000 	.word	0x447a0000
 800b27c:	0801e9ff 	.word	0x0801e9ff
 800b280:	0000033f 	.word	0x0000033f
 800b284:	0801ea04 	.word	0x0801ea04
 800b288:	00000341 	.word	0x00000341
 800b28c:	0801ea11 	.word	0x0801ea11
 800b290:	401c7ae1 	.word	0x401c7ae1
 800b294:	0801d6c3 	.word	0x0801d6c3
 800b298:	0801ea1e 	.word	0x0801ea1e
 800b29c:	0801eb0c 	.word	0x0801eb0c
 800b2a0:	0000035d 	.word	0x0000035d
 800b2a4:	0801ea26 	.word	0x0801ea26
 800b2a8:	0000035e 	.word	0x0000035e
 800b2ac:	0801ea39 	.word	0x0801ea39
 800b2b0:	0000035f 	.word	0x0000035f
 800b2b4:	0801ea4a 	.word	0x0801ea4a
 800b2b8:	0801ea5d 	.word	0x0801ea5d
 800b2bc:	00000361 	.word	0x00000361

0800b2c0 <main>:
{
 800b2c0:	b510      	push	{r4, lr}
  HAL_Init();
 800b2c2:	f003 fb33 	bl	800e92c <HAL_Init>
  SystemClock_Config();
 800b2c6:	f7f8 fac1 	bl	800384c <SystemClock_Config>
  MX_GPIO_Init();
 800b2ca:	f7f8 f88d 	bl	80033e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800b2ce:	f7f8 f86b 	bl	80033a8 <MX_DMA_Init>
  MX_I2C1_Init();
 800b2d2:	f7f8 fa97 	bl	8003804 <MX_I2C1_Init>
  MX_RTC_Init();
 800b2d6:	f7f8 fa35 	bl	8003744 <MX_RTC_Init>
  MX_SPI1_Init();
 800b2da:	f7f8 f97d 	bl	80035d8 <MX_SPI1_Init>
  MX_USART1_UART_Init(115200);
 800b2de:	20e1      	movs	r0, #225	; 0xe1
 800b2e0:	0240      	lsls	r0, r0, #9
 800b2e2:	f7f8 f93f 	bl	8003564 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b2e6:	f7f8 f917 	bl	8003518 <MX_USART2_UART_Init>
    EnableBootLoader();
 800b2ea:	f7f8 faf7 	bl	80038dc <EnableBootLoader>
    HAL_Delay(10);
 800b2ee:	200a      	movs	r0, #10
 800b2f0:	f003 fa5e 	bl	800e7b0 <HAL_Delay>
    RegInt_Init();
 800b2f4:	f7ff f92a 	bl	800a54c <RegInt_Init>
    initRSS();
 800b2f8:	f7f9 fd54 	bl	8004da4 <initRSS>
        RegInt_parsecmd();
 800b2fc:	f7ff fb6e 	bl	800a9dc <RegInt_parsecmd>
        HAL_SuspendTick(); //1.23947
 800b300:	f002 fb7a 	bl	800d9f8 <HAL_SuspendTick>
        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE);
 800b304:	2102      	movs	r1, #2
 800b306:	2000      	movs	r0, #0
 800b308:	f003 fb7c 	bl	800ea04 <HAL_PWR_EnterSLEEPMode>
        HAL_ResumeTick();
 800b30c:	f002 fb6c 	bl	800d9e8 <HAL_ResumeTick>
 800b310:	e7f4      	b.n	800b2fc <main+0x3c>
 800b312:	46c0      	nop			; (mov r8, r8)

0800b314 <acc_utils_transfer_buffer_to_uint32.constprop.23>:
 800b314:	8803      	ldrh	r3, [r0, #0]
 800b316:	8842      	ldrh	r2, [r0, #2]
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	4313      	orrs	r3, r2
 800b31c:	600b      	str	r3, [r1, #0]
 800b31e:	4770      	bx	lr

0800b320 <acc_confprogram_modify_runif_sensor.constprop.18>:
 800b320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b322:	0015      	movs	r5, r2
 800b324:	aa08      	add	r2, sp, #32
 800b326:	0006      	movs	r6, r0
 800b328:	7810      	ldrb	r0, [r2, #0]
 800b32a:	00aa      	lsls	r2, r5, #2
 800b32c:	5854      	ldr	r4, [r2, r1]
 800b32e:	220f      	movs	r2, #15
 800b330:	4394      	bics	r4, r2
 800b332:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <acc_confprogram_modify_runif_sensor.constprop.18+0x50>)
 800b334:	0011      	movs	r1, r2
 800b336:	3130      	adds	r1, #48	; 0x30
 800b338:	7809      	ldrb	r1, [r1, #0]
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d00f      	beq.n	800b35e <acc_confprogram_modify_runif_sensor.constprop.18+0x3e>
 800b33e:	431c      	orrs	r4, r3
 800b340:	2903      	cmp	r1, #3
 800b342:	d906      	bls.n	800b352 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b348:	002b      	movs	r3, r5
 800b34a:	4a0a      	ldr	r2, [pc, #40]	; (800b374 <acc_confprogram_modify_runif_sensor.constprop.18+0x54>)
 800b34c:	490a      	ldr	r1, [pc, #40]	; (800b378 <acc_confprogram_modify_runif_sensor.constprop.18+0x58>)
 800b34e:	2004      	movs	r0, #4
 800b350:	47b8      	blx	r7
 800b352:	0029      	movs	r1, r5
 800b354:	0030      	movs	r0, r6
 800b356:	0022      	movs	r2, r4
 800b358:	f7f9 ffb4 	bl	80052c4 <acc_sensor_r2_conf_write_instr>
 800b35c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800b35e:	2903      	cmp	r1, #3
 800b360:	d9f7      	bls.n	800b352 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b362:	6b57      	ldr	r7, [r2, #52]	; 0x34
 800b364:	002b      	movs	r3, r5
 800b366:	4a05      	ldr	r2, [pc, #20]	; (800b37c <acc_confprogram_modify_runif_sensor.constprop.18+0x5c>)
 800b368:	4903      	ldr	r1, [pc, #12]	; (800b378 <acc_confprogram_modify_runif_sensor.constprop.18+0x58>)
 800b36a:	2004      	movs	r0, #4
 800b36c:	47b8      	blx	r7
 800b36e:	e7f0      	b.n	800b352 <acc_confprogram_modify_runif_sensor.constprop.18+0x32>
 800b370:	200005d8 	.word	0x200005d8
 800b374:	0801ebd6 	.word	0x0801ebd6
 800b378:	0801df99 	.word	0x0801df99
 800b37c:	0801ec0c 	.word	0x0801ec0c

0800b380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	0004      	movs	r4, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b386:	a902      	add	r1, sp, #8
 800b388:	4a15      	ldr	r2, [pc, #84]	; (800b3e0 <UARTEx_SetNbDataToProcess+0x60>)
 800b38a:	0013      	movs	r3, r2
 800b38c:	cb05      	ldmia	r3!, {r0, r2}
 800b38e:	c105      	stmia	r1!, {r0, r2}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b390:	466a      	mov	r2, sp
 800b392:	cb03      	ldmia	r3!, {r0, r1}
 800b394:	c203      	stmia	r2!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d01a      	beq.n	800b3d2 <UARTEx_SetNbDataToProcess+0x52>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b39c:	6822      	ldr	r2, [r4, #0]
 800b39e:	6895      	ldr	r5, [r2, #8]
 800b3a0:	0e6d      	lsrs	r5, r5, #25
 800b3a2:	2307      	movs	r3, #7
 800b3a4:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3a6:	6892      	ldr	r2, [r2, #8]
 800b3a8:	0f52      	lsrs	r2, r2, #29
 800b3aa:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b3ac:	ae02      	add	r6, sp, #8
 800b3ae:	5cf0      	ldrb	r0, [r6, r3]
 800b3b0:	00c0      	lsls	r0, r0, #3
 800b3b2:	466a      	mov	r2, sp
 800b3b4:	5cd1      	ldrb	r1, [r2, r3]
 800b3b6:	f005 ff57 	bl	8011268 <__divsi3>
 800b3ba:	236a      	movs	r3, #106	; 0x6a
 800b3bc:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b3be:	5d70      	ldrb	r0, [r6, r5]
 800b3c0:	00c0      	lsls	r0, r0, #3
 800b3c2:	466b      	mov	r3, sp
 800b3c4:	5d59      	ldrb	r1, [r3, r5]
 800b3c6:	f005 ff4f 	bl	8011268 <__divsi3>
 800b3ca:	2368      	movs	r3, #104	; 0x68
 800b3cc:	52e0      	strh	r0, [r4, r3]
  }
}
 800b3ce:	b004      	add	sp, #16
 800b3d0:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbTxDataToProcess = 1U;
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	226a      	movs	r2, #106	; 0x6a
 800b3d6:	52a3      	strh	r3, [r4, r2]
    huart->NbRxDataToProcess = 1U;
 800b3d8:	3a02      	subs	r2, #2
 800b3da:	52a3      	strh	r3, [r4, r2]
 800b3dc:	e7f7      	b.n	800b3ce <UARTEx_SetNbDataToProcess+0x4e>
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	0801c5c0 	.word	0x0801c5c0

0800b3e4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800b3e4:	4770      	bx	lr

0800b3e6 <HAL_UARTEx_RxFifoFullCallback>:
}
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_UARTEx_WakeupCallback>:
}
 800b3e8:	4770      	bx	lr

0800b3ea <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b3ea:	2380      	movs	r3, #128	; 0x80
 800b3ec:	58c3      	ldr	r3, [r0, r3]
 800b3ee:	2b21      	cmp	r3, #33	; 0x21
 800b3f0:	d000      	beq.n	800b3f4 <UART_TxISR_16BIT_FIFOEN+0xa>
      {
        /* Nothing to do */
      }
    }
  }
}
 800b3f2:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b3f4:	3349      	adds	r3, #73	; 0x49
 800b3f6:	5ac3      	ldrh	r3, [r0, r3]
 800b3f8:	e00c      	b.n	800b414 <UART_TxISR_16BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b3fa:	6802      	ldr	r2, [r0, #0]
 800b3fc:	6893      	ldr	r3, [r2, #8]
 800b3fe:	4912      	ldr	r1, [pc, #72]	; (800b448 <UART_TxISR_16BIT_FIFOEN+0x5e>)
 800b400:	400b      	ands	r3, r1
 800b402:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b404:	6802      	ldr	r2, [r0, #0]
 800b406:	6813      	ldr	r3, [r2, #0]
 800b408:	2140      	movs	r1, #64	; 0x40
 800b40a:	430b      	orrs	r3, r1
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	e7f0      	b.n	800b3f2 <UART_TxISR_16BIT_FIFOEN+0x8>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b410:	3b01      	subs	r3, #1
 800b412:	b29b      	uxth	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0ec      	beq.n	800b3f2 <UART_TxISR_16BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800b418:	2256      	movs	r2, #86	; 0x56
 800b41a:	5a82      	ldrh	r2, [r0, r2]
 800b41c:	b292      	uxth	r2, r2
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d0eb      	beq.n	800b3fa <UART_TxISR_16BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b422:	6801      	ldr	r1, [r0, #0]
 800b424:	69ca      	ldr	r2, [r1, #28]
 800b426:	0612      	lsls	r2, r2, #24
 800b428:	d5f2      	bpl.n	800b410 <UART_TxISR_16BIT_FIFOEN+0x26>
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b42a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b42c:	8812      	ldrh	r2, [r2, #0]
 800b42e:	05d2      	lsls	r2, r2, #23
 800b430:	0dd2      	lsrs	r2, r2, #23
 800b432:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800b434:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b436:	3202      	adds	r2, #2
 800b438:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800b43a:	2156      	movs	r1, #86	; 0x56
 800b43c:	5a42      	ldrh	r2, [r0, r1]
 800b43e:	3a01      	subs	r2, #1
 800b440:	b292      	uxth	r2, r2
 800b442:	5242      	strh	r2, [r0, r1]
 800b444:	e7e4      	b.n	800b410 <UART_TxISR_16BIT_FIFOEN+0x26>
 800b446:	46c0      	nop			; (mov r8, r8)
 800b448:	ff7fffff 	.word	0xff7fffff

0800b44c <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b44c:	2380      	movs	r3, #128	; 0x80
 800b44e:	58c3      	ldr	r3, [r0, r3]
 800b450:	2b21      	cmp	r3, #33	; 0x21
 800b452:	d000      	beq.n	800b456 <UART_TxISR_8BIT_FIFOEN+0xa>
}
 800b454:	4770      	bx	lr
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b456:	3349      	adds	r3, #73	; 0x49
 800b458:	5ac3      	ldrh	r3, [r0, r3]
 800b45a:	e00c      	b.n	800b476 <UART_TxISR_8BIT_FIFOEN+0x2a>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800b45c:	6802      	ldr	r2, [r0, #0]
 800b45e:	6893      	ldr	r3, [r2, #8]
 800b460:	4910      	ldr	r1, [pc, #64]	; (800b4a4 <UART_TxISR_8BIT_FIFOEN+0x58>)
 800b462:	400b      	ands	r3, r1
 800b464:	6093      	str	r3, [r2, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b466:	6802      	ldr	r2, [r0, #0]
 800b468:	6813      	ldr	r3, [r2, #0]
 800b46a:	2140      	movs	r1, #64	; 0x40
 800b46c:	430b      	orrs	r3, r1
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	e7f0      	b.n	800b454 <UART_TxISR_8BIT_FIFOEN+0x8>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800b472:	3b01      	subs	r3, #1
 800b474:	b29b      	uxth	r3, r3
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0ec      	beq.n	800b454 <UART_TxISR_8BIT_FIFOEN+0x8>
      if (huart->TxXferCount == 0U)
 800b47a:	2256      	movs	r2, #86	; 0x56
 800b47c:	5a82      	ldrh	r2, [r0, r2]
 800b47e:	b292      	uxth	r2, r2
 800b480:	2a00      	cmp	r2, #0
 800b482:	d0eb      	beq.n	800b45c <UART_TxISR_8BIT_FIFOEN+0x10>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800b484:	6802      	ldr	r2, [r0, #0]
 800b486:	69d1      	ldr	r1, [r2, #28]
 800b488:	0609      	lsls	r1, r1, #24
 800b48a:	d5f2      	bpl.n	800b472 <UART_TxISR_8BIT_FIFOEN+0x26>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b48c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b48e:	7809      	ldrb	r1, [r1, #0]
 800b490:	6291      	str	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 800b492:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b494:	3201      	adds	r2, #1
 800b496:	6502      	str	r2, [r0, #80]	; 0x50
        huart->TxXferCount--;
 800b498:	2156      	movs	r1, #86	; 0x56
 800b49a:	5a42      	ldrh	r2, [r0, r1]
 800b49c:	3a01      	subs	r2, #1
 800b49e:	b292      	uxth	r2, r2
 800b4a0:	5242      	strh	r2, [r0, r1]
 800b4a2:	e7e6      	b.n	800b472 <UART_TxISR_8BIT_FIFOEN+0x26>
 800b4a4:	ff7fffff 	.word	0xff7fffff

0800b4a8 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4a8:	2380      	movs	r3, #128	; 0x80
 800b4aa:	58c3      	ldr	r3, [r0, r3]
 800b4ac:	2b21      	cmp	r3, #33	; 0x21
 800b4ae:	d000      	beq.n	800b4b2 <UART_TxISR_16BIT+0xa>
}
 800b4b0:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800b4b2:	3335      	adds	r3, #53	; 0x35
 800b4b4:	5ac3      	ldrh	r3, [r0, r3]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00e      	beq.n	800b4da <UART_TxISR_16BIT+0x32>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b4bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b4be:	881b      	ldrh	r3, [r3, #0]
 800b4c0:	6802      	ldr	r2, [r0, #0]
 800b4c2:	05db      	lsls	r3, r3, #23
 800b4c4:	0ddb      	lsrs	r3, r3, #23
 800b4c6:	6293      	str	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b4c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b4ca:	3302      	adds	r3, #2
 800b4cc:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800b4ce:	2256      	movs	r2, #86	; 0x56
 800b4d0:	5a83      	ldrh	r3, [r0, r2]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	5283      	strh	r3, [r0, r2]
 800b4d8:	e7ea      	b.n	800b4b0 <UART_TxISR_16BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b4da:	6802      	ldr	r2, [r0, #0]
 800b4dc:	6813      	ldr	r3, [r2, #0]
 800b4de:	2180      	movs	r1, #128	; 0x80
 800b4e0:	438b      	bics	r3, r1
 800b4e2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4e4:	6802      	ldr	r2, [r0, #0]
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	3940      	subs	r1, #64	; 0x40
 800b4ea:	430b      	orrs	r3, r1
 800b4ec:	6013      	str	r3, [r2, #0]
 800b4ee:	e7df      	b.n	800b4b0 <UART_TxISR_16BIT+0x8>

0800b4f0 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4f0:	2380      	movs	r3, #128	; 0x80
 800b4f2:	58c3      	ldr	r3, [r0, r3]
 800b4f4:	2b21      	cmp	r3, #33	; 0x21
 800b4f6:	d000      	beq.n	800b4fa <UART_TxISR_8BIT+0xa>
}
 800b4f8:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800b4fa:	3335      	adds	r3, #53	; 0x35
 800b4fc:	5ac3      	ldrh	r3, [r0, r3]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00c      	beq.n	800b51e <UART_TxISR_8BIT+0x2e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b504:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b506:	781a      	ldrb	r2, [r3, #0]
 800b508:	6803      	ldr	r3, [r0, #0]
 800b50a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b50c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b50e:	3301      	adds	r3, #1
 800b510:	6503      	str	r3, [r0, #80]	; 0x50
      huart->TxXferCount--;
 800b512:	2256      	movs	r2, #86	; 0x56
 800b514:	5a83      	ldrh	r3, [r0, r2]
 800b516:	3b01      	subs	r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	5283      	strh	r3, [r0, r2]
 800b51c:	e7ec      	b.n	800b4f8 <UART_TxISR_8BIT+0x8>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800b51e:	6802      	ldr	r2, [r0, #0]
 800b520:	6813      	ldr	r3, [r2, #0]
 800b522:	2180      	movs	r1, #128	; 0x80
 800b524:	438b      	bics	r3, r1
 800b526:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b528:	6802      	ldr	r2, [r0, #0]
 800b52a:	6813      	ldr	r3, [r2, #0]
 800b52c:	3940      	subs	r1, #64	; 0x40
 800b52e:	430b      	orrs	r3, r1
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e7e1      	b.n	800b4f8 <UART_TxISR_8BIT+0x8>

0800b534 <UART_EndRxTransfer>:
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b534:	6802      	ldr	r2, [r0, #0]
 800b536:	6813      	ldr	r3, [r2, #0]
 800b538:	4906      	ldr	r1, [pc, #24]	; (800b554 <UART_EndRxTransfer+0x20>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b53e:	6802      	ldr	r2, [r0, #0]
 800b540:	6893      	ldr	r3, [r2, #8]
 800b542:	4905      	ldr	r1, [pc, #20]	; (800b558 <UART_EndRxTransfer+0x24>)
 800b544:	400b      	ands	r3, r1
 800b546:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800b548:	2384      	movs	r3, #132	; 0x84
 800b54a:	2220      	movs	r2, #32
 800b54c:	50c2      	str	r2, [r0, r3]
  huart->RxISR = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b552:	4770      	bx	lr
 800b554:	fffffedf 	.word	0xfffffedf
 800b558:	effffffe 	.word	0xeffffffe

0800b55c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b55c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b55e:	07db      	lsls	r3, r3, #31
 800b560:	d506      	bpl.n	800b570 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b562:	6802      	ldr	r2, [r0, #0]
 800b564:	6853      	ldr	r3, [r2, #4]
 800b566:	492c      	ldr	r1, [pc, #176]	; (800b618 <UART_AdvFeatureConfig+0xbc>)
 800b568:	400b      	ands	r3, r1
 800b56a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b56c:	430b      	orrs	r3, r1
 800b56e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b572:	079b      	lsls	r3, r3, #30
 800b574:	d506      	bpl.n	800b584 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b576:	6802      	ldr	r2, [r0, #0]
 800b578:	6853      	ldr	r3, [r2, #4]
 800b57a:	4928      	ldr	r1, [pc, #160]	; (800b61c <UART_AdvFeatureConfig+0xc0>)
 800b57c:	400b      	ands	r3, r1
 800b57e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800b580:	430b      	orrs	r3, r1
 800b582:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b584:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b586:	075b      	lsls	r3, r3, #29
 800b588:	d506      	bpl.n	800b598 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b58a:	6802      	ldr	r2, [r0, #0]
 800b58c:	6853      	ldr	r3, [r2, #4]
 800b58e:	4924      	ldr	r1, [pc, #144]	; (800b620 <UART_AdvFeatureConfig+0xc4>)
 800b590:	400b      	ands	r3, r1
 800b592:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800b594:	430b      	orrs	r3, r1
 800b596:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b598:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b59a:	071b      	lsls	r3, r3, #28
 800b59c:	d506      	bpl.n	800b5ac <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b59e:	6802      	ldr	r2, [r0, #0]
 800b5a0:	6853      	ldr	r3, [r2, #4]
 800b5a2:	4920      	ldr	r1, [pc, #128]	; (800b624 <UART_AdvFeatureConfig+0xc8>)
 800b5a4:	400b      	ands	r3, r1
 800b5a6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800b5a8:	430b      	orrs	r3, r1
 800b5aa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b5ae:	06db      	lsls	r3, r3, #27
 800b5b0:	d506      	bpl.n	800b5c0 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5b2:	6802      	ldr	r2, [r0, #0]
 800b5b4:	6893      	ldr	r3, [r2, #8]
 800b5b6:	491c      	ldr	r1, [pc, #112]	; (800b628 <UART_AdvFeatureConfig+0xcc>)
 800b5b8:	400b      	ands	r3, r1
 800b5ba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800b5bc:	430b      	orrs	r3, r1
 800b5be:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b5c2:	069b      	lsls	r3, r3, #26
 800b5c4:	d506      	bpl.n	800b5d4 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5c6:	6802      	ldr	r2, [r0, #0]
 800b5c8:	6893      	ldr	r3, [r2, #8]
 800b5ca:	4918      	ldr	r1, [pc, #96]	; (800b62c <UART_AdvFeatureConfig+0xd0>)
 800b5cc:	400b      	ands	r3, r1
 800b5ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800b5d0:	430b      	orrs	r3, r1
 800b5d2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b5d6:	065b      	lsls	r3, r3, #25
 800b5d8:	d50b      	bpl.n	800b5f2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5da:	6802      	ldr	r2, [r0, #0]
 800b5dc:	6853      	ldr	r3, [r2, #4]
 800b5de:	4914      	ldr	r1, [pc, #80]	; (800b630 <UART_AdvFeatureConfig+0xd4>)
 800b5e0:	400b      	ands	r3, r1
 800b5e2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5e8:	2380      	movs	r3, #128	; 0x80
 800b5ea:	035b      	lsls	r3, r3, #13
 800b5ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d00a      	beq.n	800b608 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b5f4:	061b      	lsls	r3, r3, #24
 800b5f6:	d506      	bpl.n	800b606 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5f8:	6802      	ldr	r2, [r0, #0]
 800b5fa:	6853      	ldr	r3, [r2, #4]
 800b5fc:	490d      	ldr	r1, [pc, #52]	; (800b634 <UART_AdvFeatureConfig+0xd8>)
 800b5fe:	400b      	ands	r3, r1
 800b600:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b602:	430b      	orrs	r3, r1
 800b604:	6053      	str	r3, [r2, #4]
}
 800b606:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b608:	6802      	ldr	r2, [r0, #0]
 800b60a:	6853      	ldr	r3, [r2, #4]
 800b60c:	490a      	ldr	r1, [pc, #40]	; (800b638 <UART_AdvFeatureConfig+0xdc>)
 800b60e:	400b      	ands	r3, r1
 800b610:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800b612:	430b      	orrs	r3, r1
 800b614:	6053      	str	r3, [r2, #4]
 800b616:	e7ec      	b.n	800b5f2 <UART_AdvFeatureConfig+0x96>
 800b618:	fffdffff 	.word	0xfffdffff
 800b61c:	fffeffff 	.word	0xfffeffff
 800b620:	fffbffff 	.word	0xfffbffff
 800b624:	ffff7fff 	.word	0xffff7fff
 800b628:	ffffefff 	.word	0xffffefff
 800b62c:	ffffdfff 	.word	0xffffdfff
 800b630:	ffefffff 	.word	0xffefffff
 800b634:	fff7ffff 	.word	0xfff7ffff
 800b638:	ff9fffff 	.word	0xff9fffff

0800b63c <HAL_UART_ErrorCallback>:
}
 800b63c:	4770      	bx	lr

0800b63e <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b63e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800b640:	2200      	movs	r2, #0
 800b642:	215e      	movs	r1, #94	; 0x5e
 800b644:	525a      	strh	r2, [r3, r1]
  huart->TxXferCount = 0U;
 800b646:	3908      	subs	r1, #8
 800b648:	525a      	strh	r2, [r3, r1]
}
 800b64a:	4770      	bx	lr

0800b64c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800b64c:	4770      	bx	lr

0800b64e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b64e:	0902      	lsrs	r2, r0, #4
 800b650:	0093      	lsls	r3, r2, #2
 800b652:	189b      	adds	r3, r3, r2
 800b654:	005a      	lsls	r2, r3, #1
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b656:	230f      	movs	r3, #15
 800b658:	4018      	ands	r0, r3
 800b65a:	1880      	adds	r0, r0, r2
 800b65c:	b2c0      	uxtb	r0, r0
}
 800b65e:	4770      	bx	lr

0800b660 <RTC_ByteToBcd2>:
  uint32_t bcdhigh = 0U;
 800b660:	2300      	movs	r3, #0
 800b662:	e002      	b.n	800b66a <RTC_ByteToBcd2+0xa>
    bcdhigh++;
 800b664:	3301      	adds	r3, #1
    Param -= 10U;
 800b666:	380a      	subs	r0, #10
 800b668:	b2c0      	uxtb	r0, r0
  while(Param >= 10U)
 800b66a:	2809      	cmp	r0, #9
 800b66c:	d8fa      	bhi.n	800b664 <RTC_ByteToBcd2+0x4>
  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	b2db      	uxtb	r3, r3
 800b672:	4318      	orrs	r0, r3
}
 800b674:	4770      	bx	lr

0800b676 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b676:	b530      	push	{r4, r5, lr}
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b678:	07cb      	lsls	r3, r1, #31
 800b67a:	d509      	bpl.n	800b690 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b67c:	2341      	movs	r3, #65	; 0x41
 800b67e:	5cc3      	ldrb	r3, [r0, r3]
 800b680:	2228      	movs	r2, #40	; 0x28
 800b682:	4013      	ands	r3, r2
 800b684:	2b28      	cmp	r3, #40	; 0x28
 800b686:	d001      	beq.n	800b68c <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b688:	23f2      	movs	r3, #242	; 0xf2
 800b68a:	e002      	b.n	800b692 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b68c:	331a      	adds	r3, #26
 800b68e:	e000      	b.n	800b692 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800b690:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b692:	078a      	lsls	r2, r1, #30
 800b694:	d509      	bpl.n	800b6aa <I2C_Disable_IRQ+0x34>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b696:	2444      	movs	r4, #68	; 0x44
 800b698:	431c      	orrs	r4, r3

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b69a:	2241      	movs	r2, #65	; 0x41
 800b69c:	5c82      	ldrb	r2, [r0, r2]
 800b69e:	2528      	movs	r5, #40	; 0x28
 800b6a0:	402a      	ands	r2, r5
 800b6a2:	2a28      	cmp	r2, #40	; 0x28
 800b6a4:	d014      	beq.n	800b6d0 <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6a6:	22f4      	movs	r2, #244	; 0xf4
 800b6a8:	4313      	orrs	r3, r2
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b6aa:	074a      	lsls	r2, r1, #29
 800b6ac:	d501      	bpl.n	800b6b2 <I2C_Disable_IRQ+0x3c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6ae:	22b8      	movs	r2, #184	; 0xb8
 800b6b0:	4313      	orrs	r3, r2
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800b6b2:	2211      	movs	r2, #17
 800b6b4:	400a      	ands	r2, r1
 800b6b6:	2a11      	cmp	r2, #17
 800b6b8:	d00c      	beq.n	800b6d4 <I2C_Disable_IRQ+0x5e>
 800b6ba:	2212      	movs	r2, #18
 800b6bc:	4011      	ands	r1, r2
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800b6be:	2912      	cmp	r1, #18
 800b6c0:	d00b      	beq.n	800b6da <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800b6c2:	2912      	cmp	r1, #18
 800b6c4:	d00c      	beq.n	800b6e0 <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b6c6:	6801      	ldr	r1, [r0, #0]
 800b6c8:	680a      	ldr	r2, [r1, #0]
 800b6ca:	439a      	bics	r2, r3
 800b6cc:	600a      	str	r2, [r1, #0]
}
 800b6ce:	bd30      	pop	{r4, r5, pc}
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b6d0:	0023      	movs	r3, r4
 800b6d2:	e7ea      	b.n	800b6aa <I2C_Disable_IRQ+0x34>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b6d4:	327f      	adds	r2, #127	; 0x7f
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	e7ef      	b.n	800b6ba <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_STOPI;
 800b6da:	320e      	adds	r2, #14
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	e7f0      	b.n	800b6c2 <I2C_Disable_IRQ+0x4c>
    tmpisr |= I2C_IT_TCI;
 800b6e0:	2240      	movs	r2, #64	; 0x40
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	e7ef      	b.n	800b6c6 <I2C_Disable_IRQ+0x50>

0800b6e6 <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b6e6:	6803      	ldr	r3, [r0, #0]
 800b6e8:	699a      	ldr	r2, [r3, #24]
 800b6ea:	0792      	lsls	r2, r2, #30
 800b6ec:	d501      	bpl.n	800b6f2 <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b6f2:	6803      	ldr	r3, [r0, #0]
 800b6f4:	699a      	ldr	r2, [r3, #24]
 800b6f6:	07d2      	lsls	r2, r2, #31
 800b6f8:	d403      	bmi.n	800b702 <I2C_Flush_TXDR+0x1c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b6fa:	699a      	ldr	r2, [r3, #24]
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	430a      	orrs	r2, r1
 800b700:	619a      	str	r2, [r3, #24]
}
 800b702:	4770      	bx	lr

0800b704 <HAL_I2C_AbortCpltCallback>:
}
 800b704:	4770      	bx	lr

0800b706 <HAL_I2C_ErrorCallback>:
}
 800b706:	4770      	bx	lr

0800b708 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b708:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800b70a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800b70c:	2200      	movs	r2, #0
 800b70e:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800b710:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b712:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b714:	3241      	adds	r2, #65	; 0x41
 800b716:	5c9a      	ldrb	r2, [r3, r2]
 800b718:	2a60      	cmp	r2, #96	; 0x60
 800b71a:	d000      	beq.n	800b71e <I2C_DMAAbort+0x16>
}
 800b71c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_READY;
 800b71e:	3a1f      	subs	r2, #31
 800b720:	2120      	movs	r1, #32
 800b722:	5499      	strb	r1, [r3, r2]
 800b724:	e7fa      	b.n	800b71c <I2C_DMAAbort+0x14>

0800b726 <HAL_I2C_ListenCpltCallback>:
}
 800b726:	4770      	bx	lr

0800b728 <I2C_ITListenCplt>:
{
 800b728:	b510      	push	{r4, lr}
 800b72a:	0004      	movs	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b72c:	4b15      	ldr	r3, [pc, #84]	; (800b784 <I2C_ITListenCplt+0x5c>)
 800b72e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b730:	2300      	movs	r3, #0
 800b732:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b734:	2241      	movs	r2, #65	; 0x41
 800b736:	2020      	movs	r0, #32
 800b738:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73a:	3201      	adds	r2, #1
 800b73c:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 800b73e:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b740:	074b      	lsls	r3, r1, #29
 800b742:	d513      	bpl.n	800b76c <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b74a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b74e:	3301      	adds	r3, #1
 800b750:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b752:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 800b758:	3b01      	subs	r3, #1
 800b75a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b75c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29b      	uxth	r3, r3
 800b762:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b764:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b766:	2204      	movs	r2, #4
 800b768:	4313      	orrs	r3, r2
 800b76a:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b76c:	2107      	movs	r1, #7
 800b76e:	0020      	movs	r0, r4
 800b770:	f7ff ff81 	bl	800b676 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	2210      	movs	r2, #16
 800b778:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800b77a:	2340      	movs	r3, #64	; 0x40
 800b77c:	2200      	movs	r2, #0
 800b77e:	54e2      	strb	r2, [r4, r3]
}
 800b780:	bd10      	pop	{r4, pc}
 800b782:	46c0      	nop			; (mov r8, r8)
 800b784:	ffff0000 	.word	0xffff0000

0800b788 <HAL_I2C_AddrCallback>:
}
 800b788:	4770      	bx	lr

0800b78a <I2C_ITAddrCplt>:
{
 800b78a:	b510      	push	{r4, lr}
 800b78c:	0004      	movs	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b78e:	2341      	movs	r3, #65	; 0x41
 800b790:	5cc3      	ldrb	r3, [r0, r3]
 800b792:	2228      	movs	r2, #40	; 0x28
 800b794:	4013      	ands	r3, r2
 800b796:	2b28      	cmp	r3, #40	; 0x28
 800b798:	d006      	beq.n	800b7a8 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b79a:	6803      	ldr	r3, [r0, #0]
 800b79c:	2208      	movs	r2, #8
 800b79e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b7a0:	2340      	movs	r3, #64	; 0x40
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	54c2      	strb	r2, [r0, r3]
}
 800b7a6:	bd10      	pop	{r4, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800b7a8:	6802      	ldr	r2, [r0, #0]
 800b7aa:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b7ac:	6991      	ldr	r1, [r2, #24]
 800b7ae:	0c09      	lsrs	r1, r1, #16
 800b7b0:	23fe      	movs	r3, #254	; 0xfe
 800b7b2:	4019      	ands	r1, r3
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b7b4:	6893      	ldr	r3, [r2, #8]
 800b7b6:	059b      	lsls	r3, r3, #22
 800b7b8:	0d9b      	lsrs	r3, r3, #22
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b7ba:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b7bc:	68e0      	ldr	r0, [r4, #12]
 800b7be:	2802      	cmp	r0, #2
 800b7c0:	d119      	bne.n	800b7f6 <I2C_ITAddrCplt+0x6c>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b7c2:	09db      	lsrs	r3, r3, #7
 800b7c4:	404b      	eors	r3, r1
 800b7c6:	2106      	movs	r1, #6
 800b7c8:	4219      	tst	r1, r3
 800b7ca:	d10c      	bne.n	800b7e6 <I2C_ITAddrCplt+0x5c>
        hi2c->AddrEventCount++;
 800b7cc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	64a3      	str	r3, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b7d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d1e6      	bne.n	800b7a6 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b7dc:	3102      	adds	r1, #2
 800b7de:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800b7e0:	2240      	movs	r2, #64	; 0x40
 800b7e2:	54a3      	strb	r3, [r4, r2]
 800b7e4:	e7df      	b.n	800b7a6 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b7e6:	2104      	movs	r1, #4
 800b7e8:	0020      	movs	r0, r4
 800b7ea:	f7ff ff44 	bl	800b676 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	54e2      	strb	r2, [r4, r3]
 800b7f4:	e7d7      	b.n	800b7a6 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b7f6:	2104      	movs	r1, #4
 800b7f8:	0020      	movs	r0, r4
 800b7fa:	f7ff ff3c 	bl	800b676 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b7fe:	2340      	movs	r3, #64	; 0x40
 800b800:	2200      	movs	r2, #0
 800b802:	54e2      	strb	r2, [r4, r3]
 800b804:	e7cf      	b.n	800b7a6 <I2C_ITAddrCplt+0x1c>

0800b806 <HAL_I2C_SlaveRxCpltCallback>:
}
 800b806:	4770      	bx	lr

0800b808 <HAL_I2C_SlaveTxCpltCallback>:
}
 800b808:	4770      	bx	lr

0800b80a <I2C_ITSlaveSeqCplt>:
{
 800b80a:	b510      	push	{r4, lr}
 800b80c:	0004      	movs	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b80e:	2342      	movs	r3, #66	; 0x42
 800b810:	2200      	movs	r2, #0
 800b812:	54c2      	strb	r2, [r0, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b814:	3b01      	subs	r3, #1
 800b816:	5cc3      	ldrb	r3, [r0, r3]
 800b818:	2b29      	cmp	r3, #41	; 0x29
 800b81a:	d004      	beq.n	800b826 <I2C_ITSlaveSeqCplt+0x1c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b81c:	2341      	movs	r3, #65	; 0x41
 800b81e:	5cc3      	ldrb	r3, [r0, r3]
 800b820:	2b2a      	cmp	r3, #42	; 0x2a
 800b822:	d00c      	beq.n	800b83e <I2C_ITSlaveSeqCplt+0x34>
}
 800b824:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b826:	3318      	adds	r3, #24
 800b828:	3228      	adds	r2, #40	; 0x28
 800b82a:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b82c:	3b20      	subs	r3, #32
 800b82e:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b830:	2101      	movs	r1, #1
 800b832:	f7ff ff20 	bl	800b676 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b836:	2340      	movs	r3, #64	; 0x40
 800b838:	2200      	movs	r2, #0
 800b83a:	54e2      	strb	r2, [r4, r3]
 800b83c:	e7f2      	b.n	800b824 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b83e:	3317      	adds	r3, #23
 800b840:	2228      	movs	r2, #40	; 0x28
 800b842:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b844:	3b1f      	subs	r3, #31
 800b846:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b848:	2102      	movs	r1, #2
 800b84a:	f7ff ff14 	bl	800b676 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b84e:	2340      	movs	r3, #64	; 0x40
 800b850:	2200      	movs	r2, #0
 800b852:	54e2      	strb	r2, [r4, r3]
 800b854:	e7e6      	b.n	800b824 <I2C_ITSlaveSeqCplt+0x1a>

0800b856 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b856:	3801      	subs	r0, #1
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <HAL_SYSTICK_Config+0x2e>)
 800b85a:	4298      	cmp	r0, r3
 800b85c:	d80f      	bhi.n	800b87e <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b85e:	4a0a      	ldr	r2, [pc, #40]	; (800b888 <HAL_SYSTICK_Config+0x32>)
 800b860:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b862:	480a      	ldr	r0, [pc, #40]	; (800b88c <HAL_SYSTICK_Config+0x36>)
 800b864:	6a03      	ldr	r3, [r0, #32]
 800b866:	021b      	lsls	r3, r3, #8
 800b868:	0a1b      	lsrs	r3, r3, #8
 800b86a:	21c0      	movs	r1, #192	; 0xc0
 800b86c:	0609      	lsls	r1, r1, #24
 800b86e:	430b      	orrs	r3, r1
 800b870:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b872:	2300      	movs	r3, #0
 800b874:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b876:	3307      	adds	r3, #7
 800b878:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b87a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 800b87c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800b87e:	2001      	movs	r0, #1
 800b880:	e7fc      	b.n	800b87c <HAL_SYSTICK_Config+0x26>
 800b882:	46c0      	nop			; (mov r8, r8)
 800b884:	00ffffff 	.word	0x00ffffff
 800b888:	e000e010 	.word	0xe000e010
 800b88c:	e000ed00 	.word	0xe000ed00

0800b890 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800b890:	b510      	push	{r4, lr}
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800b892:	4b0d      	ldr	r3, [pc, #52]	; (800b8c8 <HAL_PWREx_DisableLowPowerRunMode+0x38>)
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	0053      	lsls	r3, r2, #1
 800b898:	189b      	adds	r3, r3, r2
 800b89a:	0058      	lsls	r0, r3, #1
 800b89c:	490b      	ldr	r1, [pc, #44]	; (800b8cc <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 800b89e:	f005 fc59 	bl	8011154 <__udivsi3>
 800b8a2:	3001      	adds	r0, #1

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800b8a4:	4a0a      	ldr	r2, [pc, #40]	; (800b8d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800b8a6:	6813      	ldr	r3, [r2, #0]
 800b8a8:	490a      	ldr	r1, [pc, #40]	; (800b8d4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800b8aa:	400b      	ands	r3, r1
 800b8ac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800b8ae:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	059b      	lsls	r3, r3, #22
 800b8b4:	d503      	bpl.n	800b8be <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    if(wait_loop_index != 0U)
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_PWREx_DisableLowPowerRunMode+0x32>
    {
      wait_loop_index--;
 800b8ba:	3801      	subs	r0, #1
 800b8bc:	e7f7      	b.n	800b8ae <HAL_PWREx_DisableLowPowerRunMode+0x1e>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 800b8be:	2000      	movs	r0, #0
}
 800b8c0:	bd10      	pop	{r4, pc}
      return HAL_TIMEOUT;
 800b8c2:	2003      	movs	r0, #3
 800b8c4:	e7fc      	b.n	800b8c0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
 800b8c6:	46c0      	nop			; (mov r8, r8)
 800b8c8:	20000000 	.word	0x20000000
 800b8cc:	000f4240 	.word	0x000f4240
 800b8d0:	40007000 	.word	0x40007000
 800b8d4:	ffffbfff 	.word	0xffffbfff

0800b8d8 <HAL_PWREx_EnableLowPowerRunMode>:
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800b8d8:	4a03      	ldr	r2, [pc, #12]	; (800b8e8 <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 800b8da:	6811      	ldr	r1, [r2, #0]
 800b8dc:	2380      	movs	r3, #128	; 0x80
 800b8de:	01db      	lsls	r3, r3, #7
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	6013      	str	r3, [r2, #0]
}
 800b8e4:	4770      	bx	lr
 800b8e6:	46c0      	nop			; (mov r8, r8)
 800b8e8:	40007000 	.word	0x40007000

0800b8ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b8ec:	23ff      	movs	r3, #255	; 0xff
 800b8ee:	6842      	ldr	r2, [r0, #4]
 800b8f0:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8f2:	4a06      	ldr	r2, [pc, #24]	; (800b90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800b8f4:	189a      	adds	r2, r3, r2
 800b8f6:	0092      	lsls	r2, r2, #2
 800b8f8:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b8fa:	4a05      	ldr	r2, [pc, #20]	; (800b910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800b8fc:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b8fe:	3b01      	subs	r3, #1
 800b900:	2203      	movs	r2, #3
 800b902:	401a      	ands	r2, r3
 800b904:	2301      	movs	r3, #1
 800b906:	4093      	lsls	r3, r2
 800b908:	6583      	str	r3, [r0, #88]	; 0x58
}
 800b90a:	4770      	bx	lr
 800b90c:	1000823f 	.word	0x1000823f
 800b910:	40020940 	.word	0x40020940

0800b914 <DMA_CalcDMAMUXChannelBaseAndMask>:
{
 800b914:	b510      	push	{r4, lr}
 800b916:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b918:	20ff      	movs	r0, #255	; 0xff
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	4018      	ands	r0, r3
 800b91e:	3808      	subs	r0, #8
 800b920:	2114      	movs	r1, #20
 800b922:	f005 fc17 	bl	8011154 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b928:	089b      	lsrs	r3, r3, #2
 800b92a:	4a06      	ldr	r2, [pc, #24]	; (800b944 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800b92c:	4694      	mov	ip, r2
 800b92e:	4463      	add	r3, ip
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b934:	4b04      	ldr	r3, [pc, #16]	; (800b948 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 800b936:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800b938:	231c      	movs	r3, #28
 800b93a:	4018      	ands	r0, r3
 800b93c:	3b1b      	subs	r3, #27
 800b93e:	4083      	lsls	r3, r0
 800b940:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800b942:	bd10      	pop	{r4, pc}
 800b944:	10008200 	.word	0x10008200
 800b948:	40020880 	.word	0x40020880

0800b94c <HAL_DMA_Abort_IT>:
{
 800b94c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800b94e:	2324      	movs	r3, #36	; 0x24
 800b950:	2201      	movs	r2, #1
 800b952:	54c2      	strb	r2, [r0, r3]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b954:	3301      	adds	r3, #1
 800b956:	5cc3      	ldrb	r3, [r0, r3]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d003      	beq.n	800b964 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b95c:	2304      	movs	r3, #4
 800b95e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800b960:	2001      	movs	r0, #1
}
 800b962:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b964:	6802      	ldr	r2, [r0, #0]
 800b966:	6813      	ldr	r3, [r2, #0]
 800b968:	210e      	movs	r1, #14
 800b96a:	438b      	bics	r3, r1
 800b96c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b96e:	6801      	ldr	r1, [r0, #0]
 800b970:	680a      	ldr	r2, [r1, #0]
 800b972:	2301      	movs	r3, #1
 800b974:	439a      	bics	r2, r3
 800b976:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b978:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800b97a:	680a      	ldr	r2, [r1, #0]
 800b97c:	4c12      	ldr	r4, [pc, #72]	; (800b9c8 <HAL_DMA_Abort_IT+0x7c>)
 800b97e:	4022      	ands	r2, r4
 800b980:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800b982:	4912      	ldr	r1, [pc, #72]	; (800b9cc <HAL_DMA_Abort_IT+0x80>)
 800b984:	684c      	ldr	r4, [r1, #4]
 800b986:	221c      	movs	r2, #28
 800b988:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800b98a:	402a      	ands	r2, r5
 800b98c:	4093      	lsls	r3, r2
 800b98e:	4323      	orrs	r3, r4
 800b990:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b992:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b994:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b996:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b998:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d006      	beq.n	800b9ac <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	4909      	ldr	r1, [pc, #36]	; (800b9c8 <HAL_DMA_Abort_IT+0x7c>)
 800b9a2:	400a      	ands	r2, r1
 800b9a4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b9a8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b9aa:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b9ac:	2325      	movs	r3, #37	; 0x25
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800b9b2:	3b01      	subs	r3, #1
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800b9b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <HAL_DMA_Abort_IT+0x78>
      hdma->XferAbortCallback(hdma);
 800b9be:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e7ce      	b.n	800b962 <HAL_DMA_Abort_IT+0x16>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	e7cc      	b.n	800b962 <HAL_DMA_Abort_IT+0x16>
 800b9c8:	fffffeff 	.word	0xfffffeff
 800b9cc:	40020000 	.word	0x40020000

0800b9d0 <I2C_ITError>:
{
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b9d4:	2341      	movs	r3, #65	; 0x41
 800b9d6:	5cc3      	ldrb	r3, [r0, r3]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b9d8:	2200      	movs	r2, #0
 800b9da:	2042      	movs	r0, #66	; 0x42
 800b9dc:	5422      	strb	r2, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b9de:	4832      	ldr	r0, [pc, #200]	; (800baa8 <I2C_ITError+0xd8>)
 800b9e0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b9e2:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b9e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b9e6:	4311      	orrs	r1, r2
 800b9e8:	6461      	str	r1, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b9ea:	3b28      	subs	r3, #40	; 0x28
 800b9ec:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d823      	bhi.n	800ba3a <I2C_ITError+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b9f2:	2103      	movs	r1, #3
 800b9f4:	0020      	movs	r0, r4
 800b9f6:	f7ff fe3e 	bl	800b676 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b9fa:	2341      	movs	r3, #65	; 0x41
 800b9fc:	2228      	movs	r2, #40	; 0x28
 800b9fe:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba00:	2300      	movs	r3, #0
 800ba02:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ba04:	4b29      	ldr	r3, [pc, #164]	; (800baac <I2C_ITError+0xdc>)
 800ba06:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	0452      	lsls	r2, r2, #17
 800ba0e:	d523      	bpl.n	800ba58 <I2C_ITError+0x88>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4927      	ldr	r1, [pc, #156]	; (800bab0 <I2C_ITError+0xe0>)
 800ba14:	400a      	ands	r2, r1
 800ba16:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800ba18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00c      	beq.n	800ba38 <I2C_ITError+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ba1e:	4a25      	ldr	r2, [pc, #148]	; (800bab4 <I2C_ITError+0xe4>)
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800ba22:	2340      	movs	r3, #64	; 0x40
 800ba24:	2200      	movs	r2, #0
 800ba26:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ba28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ba2a:	f7ff ff8f 	bl	800b94c <HAL_DMA_Abort_IT>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	d002      	beq.n	800ba38 <I2C_ITError+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ba32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800ba34:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba36:	4798      	blx	r3
}
 800ba38:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ba3a:	2107      	movs	r1, #7
 800ba3c:	0020      	movs	r0, r4
 800ba3e:	f7ff fe1a 	bl	800b676 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ba42:	2341      	movs	r3, #65	; 0x41
 800ba44:	5ce3      	ldrb	r3, [r4, r3]
 800ba46:	2b60      	cmp	r3, #96	; 0x60
 800ba48:	d002      	beq.n	800ba50 <I2C_ITError+0x80>
      hi2c->State         = HAL_I2C_STATE_READY;
 800ba4a:	2341      	movs	r3, #65	; 0x41
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba50:	2300      	movs	r3, #0
 800ba52:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ba54:	6363      	str	r3, [r4, #52]	; 0x34
 800ba56:	e7d7      	b.n	800ba08 <I2C_ITError+0x38>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	0412      	lsls	r2, r2, #16
 800ba5c:	d514      	bpl.n	800ba88 <I2C_ITError+0xb8>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4915      	ldr	r1, [pc, #84]	; (800bab8 <I2C_ITError+0xe8>)
 800ba62:	400a      	ands	r2, r1
 800ba64:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800ba66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0e5      	beq.n	800ba38 <I2C_ITError+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ba6c:	4a11      	ldr	r2, [pc, #68]	; (800bab4 <I2C_ITError+0xe4>)
 800ba6e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	2200      	movs	r2, #0
 800ba74:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ba76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ba78:	f7ff ff68 	bl	800b94c <HAL_DMA_Abort_IT>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d0db      	beq.n	800ba38 <I2C_ITError+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ba80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ba82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ba84:	4798      	blx	r3
 800ba86:	e7d7      	b.n	800ba38 <I2C_ITError+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ba88:	2341      	movs	r3, #65	; 0x41
 800ba8a:	5ce3      	ldrb	r3, [r4, r3]
 800ba8c:	2b60      	cmp	r3, #96	; 0x60
 800ba8e:	d003      	beq.n	800ba98 <I2C_ITError+0xc8>
    __HAL_UNLOCK(hi2c);
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	2200      	movs	r2, #0
 800ba94:	54e2      	strb	r2, [r4, r3]
 800ba96:	e7cf      	b.n	800ba38 <I2C_ITError+0x68>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba98:	3b1f      	subs	r3, #31
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	2200      	movs	r2, #0
 800baa2:	54e2      	strb	r2, [r4, r3]
 800baa4:	e7c8      	b.n	800ba38 <I2C_ITError+0x68>
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	ffff0000 	.word	0xffff0000
 800baac:	0800bbc1 	.word	0x0800bbc1
 800bab0:	ffffbfff 	.word	0xffffbfff
 800bab4:	0800b709 	.word	0x0800b709
 800bab8:	ffff7fff 	.word	0xffff7fff

0800babc <I2C_ITSlaveCplt>:
{
 800babc:	b570      	push	{r4, r5, r6, lr}
 800babe:	0004      	movs	r4, r0
 800bac0:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bac2:	6803      	ldr	r3, [r0, #0]
 800bac4:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bac6:	2220      	movs	r2, #32
 800bac8:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800baca:	2107      	movs	r1, #7
 800bacc:	f7ff fdd3 	bl	800b676 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bad0:	6822      	ldr	r2, [r4, #0]
 800bad2:	6851      	ldr	r1, [r2, #4]
 800bad4:	2380      	movs	r3, #128	; 0x80
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	430b      	orrs	r3, r1
 800bada:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800badc:	6822      	ldr	r2, [r4, #0]
 800bade:	6853      	ldr	r3, [r2, #4]
 800bae0:	4935      	ldr	r1, [pc, #212]	; (800bbb8 <I2C_ITSlaveCplt+0xfc>)
 800bae2:	400b      	ands	r3, r1
 800bae4:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 800bae6:	0020      	movs	r0, r4
 800bae8:	f7ff fdfd 	bl	800b6e6 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800baec:	0473      	lsls	r3, r6, #17
 800baee:	d539      	bpl.n	800bb64 <I2C_ITSlaveCplt+0xa8>
    if (hi2c->hdmatx != NULL)
 800baf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <I2C_ITSlaveCplt+0x42>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bafe:	076b      	lsls	r3, r5, #29
 800bb00:	d511      	bpl.n	800bb26 <I2C_ITSlaveCplt+0x6a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bb02:	2304      	movs	r3, #4
 800bb04:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb06:	6823      	ldr	r3, [r4, #0]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bb0c:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800bb0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb10:	3301      	adds	r3, #1
 800bb12:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800bb14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <I2C_ITSlaveCplt+0x6a>
      hi2c->XferSize--;
 800bb1a:	3b01      	subs	r3, #1
 800bb1c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bb1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb20:	3b01      	subs	r3, #1
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800bb26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb30:	2204      	movs	r2, #4
 800bb32:	4313      	orrs	r3, r2
 800bb34:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb36:	2300      	movs	r3, #0
 800bb38:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb3a:	2242      	movs	r2, #66	; 0x42
 800bb3c:	54a3      	strb	r3, [r4, r2]
  hi2c->XferISR = NULL;
 800bb3e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bb40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d118      	bne.n	800bb78 <I2C_ITSlaveCplt+0xbc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bb46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bb48:	4b1c      	ldr	r3, [pc, #112]	; (800bbbc <I2C_ITSlaveCplt+0x100>)
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d121      	bne.n	800bb92 <I2C_ITSlaveCplt+0xd6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb4e:	2341      	movs	r3, #65	; 0x41
 800bb50:	5ce3      	ldrb	r3, [r4, r3]
 800bb52:	2b22      	cmp	r3, #34	; 0x22
 800bb54:	d029      	beq.n	800bbaa <I2C_ITSlaveCplt+0xee>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb56:	2341      	movs	r3, #65	; 0x41
 800bb58:	2220      	movs	r2, #32
 800bb5a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	2200      	movs	r2, #0
 800bb60:	54e2      	strb	r2, [r4, r3]
 800bb62:	e021      	b.n	800bba8 <I2C_ITSlaveCplt+0xec>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bb64:	0433      	lsls	r3, r6, #16
 800bb66:	d5ca      	bpl.n	800bafe <I2C_ITSlaveCplt+0x42>
    if (hi2c->hdmarx != NULL)
 800bb68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0c7      	beq.n	800bafe <I2C_ITSlaveCplt+0x42>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	8563      	strh	r3, [r4, #42]	; 0x2a
 800bb76:	e7c2      	b.n	800bafe <I2C_ITSlaveCplt+0x42>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bb7a:	0020      	movs	r0, r4
 800bb7c:	f7ff ff28 	bl	800b9d0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bb80:	2341      	movs	r3, #65	; 0x41
 800bb82:	5ce3      	ldrb	r3, [r4, r3]
 800bb84:	2b28      	cmp	r3, #40	; 0x28
 800bb86:	d10f      	bne.n	800bba8 <I2C_ITSlaveCplt+0xec>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bb88:	0029      	movs	r1, r5
 800bb8a:	0020      	movs	r0, r4
 800bb8c:	f7ff fdcc 	bl	800b728 <I2C_ITListenCplt>
 800bb90:	e00a      	b.n	800bba8 <I2C_ITSlaveCplt+0xec>
    I2C_ITSlaveSeqCplt(hi2c);
 800bb92:	0020      	movs	r0, r4
 800bb94:	f7ff fe39 	bl	800b80a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb98:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <I2C_ITSlaveCplt+0x100>)
 800bb9a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bb9c:	2341      	movs	r3, #65	; 0x41
 800bb9e:	2220      	movs	r2, #32
 800bba0:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800bba2:	3b01      	subs	r3, #1
 800bba4:	2200      	movs	r2, #0
 800bba6:	54e2      	strb	r2, [r4, r3]
}
 800bba8:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800bbaa:	331f      	adds	r3, #31
 800bbac:	2220      	movs	r2, #32
 800bbae:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	54e2      	strb	r2, [r4, r3]
 800bbb6:	e7f7      	b.n	800bba8 <I2C_ITSlaveCplt+0xec>
 800bbb8:	fe00e800 	.word	0xfe00e800
 800bbbc:	ffff0000 	.word	0xffff0000

0800bbc0 <I2C_Slave_ISR_IT>:
{
 800bbc0:	b570      	push	{r4, r5, r6, lr}
 800bbc2:	0004      	movs	r4, r0
 800bbc4:	000d      	movs	r5, r1
 800bbc6:	0016      	movs	r6, r2
  uint32_t tmpoptions = hi2c->XferOptions;
 800bbc8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800bbca:	2340      	movs	r3, #64	; 0x40
 800bbcc:	5cc3      	ldrb	r3, [r0, r3]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d100      	bne.n	800bbd4 <I2C_Slave_ISR_IT+0x14>
 800bbd2:	e09a      	b.n	800bd0a <I2C_Slave_ISR_IT+0x14a>
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	2240      	movs	r2, #64	; 0x40
 800bbd8:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bbda:	092a      	lsrs	r2, r5, #4
 800bbdc:	4213      	tst	r3, r2
 800bbde:	d041      	beq.n	800bc64 <I2C_Slave_ISR_IT+0xa4>
 800bbe0:	06f3      	lsls	r3, r6, #27
 800bbe2:	d53f      	bpl.n	800bc64 <I2C_Slave_ISR_IT+0xa4>
    if (hi2c->XferCount == 0U)
 800bbe4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d129      	bne.n	800bc40 <I2C_Slave_ISR_IT+0x80>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800bbec:	3341      	adds	r3, #65	; 0x41
 800bbee:	5cc3      	ldrb	r3, [r0, r3]
 800bbf0:	2b28      	cmp	r3, #40	; 0x28
 800bbf2:	d010      	beq.n	800bc16 <I2C_Slave_ISR_IT+0x56>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bbf4:	2341      	movs	r3, #65	; 0x41
 800bbf6:	5ce3      	ldrb	r3, [r4, r3]
 800bbf8:	2b29      	cmp	r3, #41	; 0x29
 800bbfa:	d014      	beq.n	800bc26 <I2C_Slave_ISR_IT+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	2210      	movs	r2, #16
 800bc00:	61da      	str	r2, [r3, #28]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bc02:	06ab      	lsls	r3, r5, #26
 800bc04:	d502      	bpl.n	800bc0c <I2C_Slave_ISR_IT+0x4c>
 800bc06:	06b3      	lsls	r3, r6, #26
 800bc08:	d500      	bpl.n	800bc0c <I2C_Slave_ISR_IT+0x4c>
 800bc0a:	e079      	b.n	800bd00 <I2C_Slave_ISR_IT+0x140>
  __HAL_UNLOCK(hi2c);
 800bc0c:	2340      	movs	r3, #64	; 0x40
 800bc0e:	2200      	movs	r2, #0
 800bc10:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800bc12:	2000      	movs	r0, #0
}
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800bc16:	2380      	movs	r3, #128	; 0x80
 800bc18:	049b      	lsls	r3, r3, #18
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	d1ea      	bne.n	800bbf4 <I2C_Slave_ISR_IT+0x34>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bc1e:	0029      	movs	r1, r5
 800bc20:	f7ff fd82 	bl	800b728 <I2C_ITListenCplt>
 800bc24:	e7ed      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bc26:	4b3a      	ldr	r3, [pc, #232]	; (800bd10 <I2C_Slave_ISR_IT+0x150>)
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d0e7      	beq.n	800bbfc <I2C_Slave_ISR_IT+0x3c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc2c:	6823      	ldr	r3, [r4, #0]
 800bc2e:	2210      	movs	r2, #16
 800bc30:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800bc32:	0020      	movs	r0, r4
 800bc34:	f7ff fd57 	bl	800b6e6 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800bc38:	0020      	movs	r0, r4
 800bc3a:	f7ff fde6 	bl	800b80a <I2C_ITSlaveSeqCplt>
 800bc3e:	e7e0      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc40:	6803      	ldr	r3, [r0, #0]
 800bc42:	2210      	movs	r2, #16
 800bc44:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800bc48:	3a0c      	subs	r2, #12
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	6443      	str	r3, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bc4e:	2900      	cmp	r1, #0
 800bc50:	d003      	beq.n	800bc5a <I2C_Slave_ISR_IT+0x9a>
 800bc52:	2380      	movs	r3, #128	; 0x80
 800bc54:	045b      	lsls	r3, r3, #17
 800bc56:	4299      	cmp	r1, r3
 800bc58:	d1d3      	bne.n	800bc02 <I2C_Slave_ISR_IT+0x42>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800bc5a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	f7ff feb7 	bl	800b9d0 <I2C_ITError>
 800bc62:	e7ce      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bc64:	076b      	lsls	r3, r5, #29
 800bc66:	d520      	bpl.n	800bcaa <I2C_Slave_ISR_IT+0xea>
 800bc68:	0773      	lsls	r3, r6, #29
 800bc6a:	d51e      	bpl.n	800bcaa <I2C_Slave_ISR_IT+0xea>
    if (hi2c->XferCount > 0U)
 800bc6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00f      	beq.n	800bc94 <I2C_Slave_ISR_IT+0xd4>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800bc74:	2304      	movs	r3, #4
 800bc76:	439d      	bics	r5, r3
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bc7e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800bc80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc82:	3301      	adds	r3, #1
 800bc84:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bc86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bc8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800bc94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1b2      	bne.n	800bc02 <I2C_Slave_ISR_IT+0x42>
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <I2C_Slave_ISR_IT+0x150>)
 800bc9e:	4299      	cmp	r1, r3
 800bca0:	d0af      	beq.n	800bc02 <I2C_Slave_ISR_IT+0x42>
      I2C_ITSlaveSeqCplt(hi2c);
 800bca2:	0020      	movs	r0, r4
 800bca4:	f7ff fdb1 	bl	800b80a <I2C_ITSlaveSeqCplt>
 800bca8:	e7ab      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bcaa:	072b      	lsls	r3, r5, #28
 800bcac:	d501      	bpl.n	800bcb2 <I2C_Slave_ISR_IT+0xf2>
 800bcae:	0733      	lsls	r3, r6, #28
 800bcb0:	d416      	bmi.n	800bce0 <I2C_Slave_ISR_IT+0x120>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bcb2:	07ab      	lsls	r3, r5, #30
 800bcb4:	d5a5      	bpl.n	800bc02 <I2C_Slave_ISR_IT+0x42>
 800bcb6:	07b3      	lsls	r3, r6, #30
 800bcb8:	d5a3      	bpl.n	800bc02 <I2C_Slave_ISR_IT+0x42>
    if (hi2c->XferCount > 0U)
 800bcba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d013      	beq.n	800bcea <I2C_Slave_ISR_IT+0x12a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800bcca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bccc:	3301      	adds	r3, #1
 800bcce:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800bcd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bcd8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	8523      	strh	r3, [r4, #40]	; 0x28
 800bcde:	e790      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bce0:	0029      	movs	r1, r5
 800bce2:	0020      	movs	r0, r4
 800bce4:	f7ff fd51 	bl	800b78a <I2C_ITAddrCplt>
 800bce8:	e78b      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bcea:	2380      	movs	r3, #128	; 0x80
 800bcec:	045b      	lsls	r3, r3, #17
 800bcee:	4299      	cmp	r1, r3
 800bcf0:	d002      	beq.n	800bcf8 <I2C_Slave_ISR_IT+0x138>
 800bcf2:	2900      	cmp	r1, #0
 800bcf4:	d000      	beq.n	800bcf8 <I2C_Slave_ISR_IT+0x138>
 800bcf6:	e784      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
        I2C_ITSlaveSeqCplt(hi2c);
 800bcf8:	0020      	movs	r0, r4
 800bcfa:	f7ff fd86 	bl	800b80a <I2C_ITSlaveSeqCplt>
 800bcfe:	e780      	b.n	800bc02 <I2C_Slave_ISR_IT+0x42>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bd00:	0029      	movs	r1, r5
 800bd02:	0020      	movs	r0, r4
 800bd04:	f7ff feda 	bl	800babc <I2C_ITSlaveCplt>
 800bd08:	e780      	b.n	800bc0c <I2C_Slave_ISR_IT+0x4c>
  __HAL_LOCK(hi2c);
 800bd0a:	2002      	movs	r0, #2
 800bd0c:	e782      	b.n	800bc14 <I2C_Slave_ISR_IT+0x54>
 800bd0e:	46c0      	nop			; (mov r8, r8)
 800bd10:	ffff0000 	.word	0xffff0000

0800bd14 <FLASH_OB_GetSecMem>:
  * @param  SecSize specifies number of pages to protect as secure memory area, starting from
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
 800bd14:	b510      	push	{r4, lr}
  uint32_t secmem = FLASH->SECR;
 800bd16:	4a05      	ldr	r2, [pc, #20]	; (800bd2c <FLASH_OB_GetSecMem+0x18>)
 800bd18:	2380      	movs	r3, #128	; 0x80
 800bd1a:	58d4      	ldr	r4, [r2, r3]

  *BootEntry = (secmem & FLASH_SECR_BOOT_LOCK);
 800bd1c:	2280      	movs	r2, #128	; 0x80
 800bd1e:	0252      	lsls	r2, r2, #9
 800bd20:	4022      	ands	r2, r4
 800bd22:	6002      	str	r2, [r0, #0]
  *SecSize = (secmem & FLASH_SECR_SEC_SIZE);
 800bd24:	3b01      	subs	r3, #1
 800bd26:	4023      	ands	r3, r4
 800bd28:	600b      	str	r3, [r1, #0]
}
 800bd2a:	bd10      	pop	{r4, pc}
 800bd2c:	40022000 	.word	0x40022000

0800bd30 <FLASH_OB_GetPCROP1B>:
{
 800bd30:	b530      	push	{r4, r5, lr}
  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 800bd32:	4b09      	ldr	r3, [pc, #36]	; (800bd58 <FLASH_OB_GetPCROP1B+0x28>)
 800bd34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bd36:	0252      	lsls	r2, r2, #9
 800bd38:	24ff      	movs	r4, #255	; 0xff
 800bd3a:	0264      	lsls	r4, r4, #9
 800bd3c:	4022      	ands	r2, r4
  *PCROP1BStartAddr += FLASH_BASE;
 800bd3e:	2580      	movs	r5, #128	; 0x80
 800bd40:	052d      	lsls	r5, r5, #20
 800bd42:	46ac      	mov	ip, r5
 800bd44:	4462      	add	r2, ip
 800bd46:	6002      	str	r2, [r0, #0]
  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  *PCROP1BEndAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bd4a:	025b      	lsls	r3, r3, #9
 800bd4c:	4023      	ands	r3, r4
  *PCROP1BEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800bd4e:	4a03      	ldr	r2, [pc, #12]	; (800bd5c <FLASH_OB_GetPCROP1B+0x2c>)
 800bd50:	4694      	mov	ip, r2
 800bd52:	4463      	add	r3, ip
 800bd54:	600b      	str	r3, [r1, #0]
}
 800bd56:	bd30      	pop	{r4, r5, pc}
 800bd58:	40022000 	.word	0x40022000
 800bd5c:	080001ff 	.word	0x080001ff

0800bd60 <FLASH_OB_GetPCROP1A>:
{
 800bd60:	b570      	push	{r4, r5, r6, lr}
  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 800bd62:	4d0d      	ldr	r5, [pc, #52]	; (800bd98 <FLASH_OB_GetPCROP1A+0x38>)
 800bd64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
 800bd66:	025b      	lsls	r3, r3, #9
 800bd68:	24ff      	movs	r4, #255	; 0xff
 800bd6a:	0264      	lsls	r4, r4, #9
 800bd6c:	4023      	ands	r3, r4
  *PCROP1AStartAddr += FLASH_BASE;
 800bd6e:	2680      	movs	r6, #128	; 0x80
 800bd70:	0536      	lsls	r6, r6, #20
 800bd72:	46b4      	mov	ip, r6
 800bd74:	4463      	add	r3, ip
 800bd76:	600b      	str	r3, [r1, #0]
  pcrop = FLASH->PCROP1AER;
 800bd78:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  *PCROP1AEndAddr = ((pcrop & FLASH_PCROP1AER_PCROP1A_END) << FLASH_PCROP_GRANULARITY_OFFSET);
 800bd7a:	024b      	lsls	r3, r1, #9
 800bd7c:	4023      	ands	r3, r4
  *PCROP1AEndAddr += (FLASH_BASE + FLASH_PCROP_GRANULARITY - 1U);
 800bd7e:	4c07      	ldr	r4, [pc, #28]	; (800bd9c <FLASH_OB_GetPCROP1A+0x3c>)
 800bd80:	46a4      	mov	ip, r4
 800bd82:	4463      	add	r3, ip
 800bd84:	6013      	str	r3, [r2, #0]
  *PCROPConfig &= ~OB_PCROP_RDP_ERASE;
 800bd86:	6803      	ldr	r3, [r0, #0]
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	085b      	lsrs	r3, r3, #1
  *PCROPConfig |= (pcrop & FLASH_PCROP1AER_PCROP_RDP);
 800bd8c:	0fc9      	lsrs	r1, r1, #31
 800bd8e:	07c9      	lsls	r1, r1, #31
 800bd90:	430b      	orrs	r3, r1
 800bd92:	6003      	str	r3, [r0, #0]
}
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	46c0      	nop			; (mov r8, r8)
 800bd98:	40022000 	.word	0x40022000
 800bd9c:	080001ff 	.word	0x080001ff

0800bda0 <FLASH_OB_GetUser>:
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 800bda0:	4b02      	ldr	r3, [pc, #8]	; (800bdac <FLASH_OB_GetUser+0xc>)
 800bda2:	6a18      	ldr	r0, [r3, #32]
 800bda4:	4b02      	ldr	r3, [pc, #8]	; (800bdb0 <FLASH_OB_GetUser+0x10>)
 800bda6:	4018      	ands	r0, r3
}
 800bda8:	4770      	bx	lr
 800bdaa:	46c0      	nop			; (mov r8, r8)
 800bdac:	40022000 	.word	0x40022000
 800bdb0:	3f4fff00 	.word	0x3f4fff00

0800bdb4 <FLASH_OB_GetRDP>:
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 800bdb4:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <FLASH_OB_GetRDP+0x18>)
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	20ff      	movs	r0, #255	; 0xff
 800bdba:	4018      	ands	r0, r3
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 800bdbc:	28aa      	cmp	r0, #170	; 0xaa
 800bdbe:	d001      	beq.n	800bdc4 <FLASH_OB_GetRDP+0x10>
 800bdc0:	28cc      	cmp	r0, #204	; 0xcc
 800bdc2:	d100      	bne.n	800bdc6 <FLASH_OB_GetRDP+0x12>
}
 800bdc4:	4770      	bx	lr
    return (OB_RDP_LEVEL_1);
 800bdc6:	20bb      	movs	r0, #187	; 0xbb
 800bdc8:	e7fc      	b.n	800bdc4 <FLASH_OB_GetRDP+0x10>
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	40022000 	.word	0x40022000

0800bdd0 <FLASH_OB_GetWRP>:
{
 800bdd0:	b510      	push	{r4, lr}
  if (WRPArea == OB_WRPAREA_ZONE_A)
 800bdd2:	2801      	cmp	r0, #1
 800bdd4:	d009      	beq.n	800bdea <FLASH_OB_GetWRP+0x1a>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 800bdd6:	4c0a      	ldr	r4, [pc, #40]	; (800be00 <FLASH_OB_GetWRP+0x30>)
 800bdd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bdda:	233f      	movs	r3, #63	; 0x3f
 800bddc:	4018      	ands	r0, r3
 800bdde:	6008      	str	r0, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800bde0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bde2:	0c09      	lsrs	r1, r1, #16
 800bde4:	400b      	ands	r3, r1
 800bde6:	6013      	str	r3, [r2, #0]
}
 800bde8:	bd10      	pop	{r4, pc}
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 800bdea:	4b05      	ldr	r3, [pc, #20]	; (800be00 <FLASH_OB_GetWRP+0x30>)
 800bdec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bdee:	243f      	movs	r4, #63	; 0x3f
 800bdf0:	4020      	ands	r0, r4
 800bdf2:	6008      	str	r0, [r1, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	0c1b      	lsrs	r3, r3, #16
 800bdf8:	4023      	ands	r3, r4
 800bdfa:	6013      	str	r3, [r2, #0]
 800bdfc:	e7f4      	b.n	800bde8 <FLASH_OB_GetWRP+0x18>
 800bdfe:	46c0      	nop			; (mov r8, r8)
 800be00:	40022000 	.word	0x40022000

0800be04 <FLASH_OB_SecMemConfig>:
{
 800be04:	b530      	push	{r4, r5, lr}
  secmem = (FLASH->SECR & ~(FLASH_SECR_BOOT_LOCK | FLASH_SECR_SEC_SIZE));
 800be06:	4c04      	ldr	r4, [pc, #16]	; (800be18 <FLASH_OB_SecMemConfig+0x14>)
 800be08:	2280      	movs	r2, #128	; 0x80
 800be0a:	58a3      	ldr	r3, [r4, r2]
 800be0c:	4d03      	ldr	r5, [pc, #12]	; (800be1c <FLASH_OB_SecMemConfig+0x18>)
 800be0e:	402b      	ands	r3, r5
  FLASH->SECR = (secmem | BootEntry | SecSize);
 800be10:	4318      	orrs	r0, r3
 800be12:	4301      	orrs	r1, r0
 800be14:	50a1      	str	r1, [r4, r2]
}
 800be16:	bd30      	pop	{r4, r5, pc}
 800be18:	40022000 	.word	0x40022000
 800be1c:	fffeff80 	.word	0xfffeff80

0800be20 <FLASH_OB_PCROP1BConfig>:
  startoffset = ((PCROP1BStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800be20:	23f8      	movs	r3, #248	; 0xf8
 800be22:	061b      	lsls	r3, r3, #24
 800be24:	469c      	mov	ip, r3
 800be26:	4460      	add	r0, ip
 800be28:	0a40      	lsrs	r0, r0, #9
  endoffset = ((PCROP1BEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800be2a:	4461      	add	r1, ip
 800be2c:	0a49      	lsrs	r1, r1, #9
  FLASH->PCROP1BSR = startoffset;
 800be2e:	4b02      	ldr	r3, [pc, #8]	; (800be38 <FLASH_OB_PCROP1BConfig+0x18>)
 800be30:	6358      	str	r0, [r3, #52]	; 0x34
  FLASH->PCROP1BER = endoffset;
 800be32:	6399      	str	r1, [r3, #56]	; 0x38
}
 800be34:	4770      	bx	lr
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	40022000 	.word	0x40022000

0800be3c <FLASH_OB_PCROP1AConfig>:
{
 800be3c:	b510      	push	{r4, lr}
  pcrop1aend = FLASH->PCROP1AER;
 800be3e:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <FLASH_OB_PCROP1AConfig+0x34>)
 800be40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((PCROPConfig & OB_PCROP_ZONE_A) != 0x00U)
 800be42:	07c4      	lsls	r4, r0, #31
 800be44:	d50b      	bpl.n	800be5e <FLASH_OB_PCROP1AConfig+0x22>
    startoffset = ((PCROP1AStartAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800be46:	24f8      	movs	r4, #248	; 0xf8
 800be48:	0624      	lsls	r4, r4, #24
 800be4a:	46a4      	mov	ip, r4
 800be4c:	4461      	add	r1, ip
 800be4e:	0a49      	lsrs	r1, r1, #9
    endoffset = ((PCROP1AEndAddr - FLASH_BASE) >> FLASH_PCROP_GRANULARITY_OFFSET);
 800be50:	4462      	add	r2, ip
 800be52:	0a52      	lsrs	r2, r2, #9
    FLASH->PCROP1ASR = startoffset;
 800be54:	4c06      	ldr	r4, [pc, #24]	; (800be70 <FLASH_OB_PCROP1AConfig+0x34>)
 800be56:	6261      	str	r1, [r4, #36]	; 0x24
    pcrop1aend &= ~FLASH_PCROP1AER_PCROP1A_END;
 800be58:	21ff      	movs	r1, #255	; 0xff
 800be5a:	438b      	bics	r3, r1
    pcrop1aend |= endoffset;
 800be5c:	4313      	orrs	r3, r2
  if ((PCROPConfig & OB_PCROP_RDP_ERASE) != 0x00U)
 800be5e:	2800      	cmp	r0, #0
 800be60:	db02      	blt.n	800be68 <FLASH_OB_PCROP1AConfig+0x2c>
  FLASH->PCROP1AER = pcrop1aend;
 800be62:	4a03      	ldr	r2, [pc, #12]	; (800be70 <FLASH_OB_PCROP1AConfig+0x34>)
 800be64:	6293      	str	r3, [r2, #40]	; 0x28
}
 800be66:	bd10      	pop	{r4, pc}
    pcrop1aend |= FLASH_PCROP1AER_PCROP_RDP;
 800be68:	2280      	movs	r2, #128	; 0x80
 800be6a:	0612      	lsls	r2, r2, #24
 800be6c:	4313      	orrs	r3, r2
 800be6e:	e7f8      	b.n	800be62 <FLASH_OB_PCROP1AConfig+0x26>
 800be70:	40022000 	.word	0x40022000

0800be74 <FLASH_OB_OptrConfig>:
{
 800be74:	b530      	push	{r4, r5, lr}
  optr = FLASH->OPTR;
 800be76:	4c04      	ldr	r4, [pc, #16]	; (800be88 <FLASH_OB_OptrConfig+0x14>)
 800be78:	6a23      	ldr	r3, [r4, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 800be7a:	25ff      	movs	r5, #255	; 0xff
 800be7c:	4328      	orrs	r0, r5
 800be7e:	4383      	bics	r3, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 800be80:	4319      	orrs	r1, r3
 800be82:	430a      	orrs	r2, r1
 800be84:	6222      	str	r2, [r4, #32]
}
 800be86:	bd30      	pop	{r4, r5, pc}
 800be88:	40022000 	.word	0x40022000

0800be8c <FLASH_OB_WRPConfig>:
  if (WRPArea != OB_WRPAREA_ZONE_A)
 800be8c:	2801      	cmp	r0, #1
 800be8e:	d004      	beq.n	800be9a <FLASH_OB_WRPConfig+0xe>
    FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 800be90:	0412      	lsls	r2, r2, #16
 800be92:	4311      	orrs	r1, r2
 800be94:	4b03      	ldr	r3, [pc, #12]	; (800bea4 <FLASH_OB_WRPConfig+0x18>)
 800be96:	6319      	str	r1, [r3, #48]	; 0x30
}
 800be98:	4770      	bx	lr
    FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 800be9a:	0412      	lsls	r2, r2, #16
 800be9c:	4311      	orrs	r1, r2
 800be9e:	4b01      	ldr	r3, [pc, #4]	; (800bea4 <FLASH_OB_WRPConfig+0x18>)
 800bea0:	62d9      	str	r1, [r3, #44]	; 0x2c
 800bea2:	e7f9      	b.n	800be98 <FLASH_OB_WRPConfig+0xc>
 800bea4:	40022000 	.word	0x40022000

0800bea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800bea8:	4b01      	ldr	r3, [pc, #4]	; (800beb0 <HAL_RCC_GetHCLKFreq+0x8>)
 800beaa:	6818      	ldr	r0, [r3, #0]
}
 800beac:	4770      	bx	lr
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	20000000 	.word	0x20000000

0800beb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800beb4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800beb6:	f7ff fff7 	bl	800bea8 <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800beba:	4b06      	ldr	r3, [pc, #24]	; (800bed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bebc:	689a      	ldr	r2, [r3, #8]
 800bebe:	0b12      	lsrs	r2, r2, #12
 800bec0:	2307      	movs	r3, #7
 800bec2:	4013      	ands	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4a04      	ldr	r2, [pc, #16]	; (800bed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bec8:	18d3      	adds	r3, r2, r3
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	221f      	movs	r2, #31
 800bece:	4013      	ands	r3, r2
 800bed0:	40d8      	lsrs	r0, r3
}
 800bed2:	bd10      	pop	{r4, pc}
 800bed4:	40021000 	.word	0x40021000
 800bed8:	0801c5c0 	.word	0x0801c5c0

0800bedc <HAL_RCC_GetSysClockFreq>:
{
 800bedc:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bede:	4b2b      	ldr	r3, [pc, #172]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	2238      	movs	r2, #56	; 0x38
 800bee4:	421a      	tst	r2, r3
 800bee6:	d019      	beq.n	800bf1c <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bee8:	4b28      	ldr	r3, [pc, #160]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800beea:	689a      	ldr	r2, [r3, #8]
 800beec:	2338      	movs	r3, #56	; 0x38
 800beee:	4013      	ands	r3, r2
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d046      	beq.n	800bf82 <HAL_RCC_GetSysClockFreq+0xa6>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bef4:	4b25      	ldr	r3, [pc, #148]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bef6:	689a      	ldr	r2, [r3, #8]
 800bef8:	2338      	movs	r3, #56	; 0x38
 800befa:	4013      	ands	r3, r2
 800befc:	2b10      	cmp	r3, #16
 800befe:	d018      	beq.n	800bf32 <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800bf00:	4b22      	ldr	r3, [pc, #136]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	2338      	movs	r3, #56	; 0x38
 800bf06:	4013      	ands	r3, r2
 800bf08:	2b20      	cmp	r3, #32
 800bf0a:	d03c      	beq.n	800bf86 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800bf0c:	4b1f      	ldr	r3, [pc, #124]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	2338      	movs	r3, #56	; 0x38
 800bf12:	4013      	ands	r3, r2
 800bf14:	2b18      	cmp	r3, #24
 800bf16:	d031      	beq.n	800bf7c <HAL_RCC_GetSysClockFreq+0xa0>
    sysclockfreq = 0U;
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e009      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x54>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800bf1c:	4b1b      	ldr	r3, [pc, #108]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	0ad2      	lsrs	r2, r2, #11
 800bf22:	2307      	movs	r3, #7
 800bf24:	4013      	ands	r3, r2
 800bf26:	2101      	movs	r1, #1
 800bf28:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800bf2a:	4819      	ldr	r0, [pc, #100]	; (800bf90 <HAL_RCC_GetSysClockFreq+0xb4>)
 800bf2c:	f005 f912 	bl	8011154 <__udivsi3>
}
 800bf30:	bd10      	pop	{r4, pc}
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800bf32:	4a16      	ldr	r2, [pc, #88]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf34:	68d1      	ldr	r1, [r2, #12]
 800bf36:	3b0d      	subs	r3, #13
 800bf38:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf3a:	68d2      	ldr	r2, [r2, #12]
 800bf3c:	0912      	lsrs	r2, r2, #4
 800bf3e:	2107      	movs	r1, #7
 800bf40:	4011      	ands	r1, r2
 800bf42:	3101      	adds	r1, #1
    switch (pllsource)
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d10f      	bne.n	800bf68 <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bf48:	4812      	ldr	r0, [pc, #72]	; (800bf94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bf4a:	f005 f903 	bl	8011154 <__udivsi3>
 800bf4e:	4b0f      	ldr	r3, [pc, #60]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	0a12      	lsrs	r2, r2, #8
 800bf54:	237f      	movs	r3, #127	; 0x7f
 800bf56:	4013      	ands	r3, r2
 800bf58:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800bf5a:	4b0c      	ldr	r3, [pc, #48]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf5c:	68d9      	ldr	r1, [r3, #12]
 800bf5e:	0f49      	lsrs	r1, r1, #29
 800bf60:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800bf62:	f005 f8f7 	bl	8011154 <__udivsi3>
 800bf66:	e7e3      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800bf68:	4809      	ldr	r0, [pc, #36]	; (800bf90 <HAL_RCC_GetSysClockFreq+0xb4>)
 800bf6a:	f005 f8f3 	bl	8011154 <__udivsi3>
 800bf6e:	4b07      	ldr	r3, [pc, #28]	; (800bf8c <HAL_RCC_GetSysClockFreq+0xb0>)
 800bf70:	68da      	ldr	r2, [r3, #12]
 800bf72:	0a12      	lsrs	r2, r2, #8
 800bf74:	237f      	movs	r3, #127	; 0x7f
 800bf76:	4013      	ands	r3, r2
 800bf78:	4358      	muls	r0, r3
 800bf7a:	e7ee      	b.n	800bf5a <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = LSI_VALUE;
 800bf7c:	20fa      	movs	r0, #250	; 0xfa
 800bf7e:	01c0      	lsls	r0, r0, #7
 800bf80:	e7d6      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x54>
    sysclockfreq = HSE_VALUE;
 800bf82:	4804      	ldr	r0, [pc, #16]	; (800bf94 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bf84:	e7d4      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x54>
    sysclockfreq = LSE_VALUE;
 800bf86:	2080      	movs	r0, #128	; 0x80
 800bf88:	0200      	lsls	r0, r0, #8
 800bf8a:	e7d1      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x54>
 800bf8c:	40021000 	.word	0x40021000
 800bf90:	00f42400 	.word	0x00f42400
 800bf94:	007a1200 	.word	0x007a1200

0800bf98 <UART_SetConfig>:
{
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf9c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf9e:	6883      	ldr	r3, [r0, #8]
 800bfa0:	6902      	ldr	r2, [r0, #16]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	6942      	ldr	r2, [r0, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	69c2      	ldr	r2, [r0, #28]
 800bfaa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 800bfac:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800bfae:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfb0:	680b      	ldr	r3, [r1, #0]
 800bfb2:	48bd      	ldr	r0, [pc, #756]	; (800c2a8 <UART_SetConfig+0x310>)
 800bfb4:	4003      	ands	r3, r0
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfba:	6822      	ldr	r2, [r4, #0]
 800bfbc:	6853      	ldr	r3, [r2, #4]
 800bfbe:	49bb      	ldr	r1, [pc, #748]	; (800c2ac <UART_SetConfig+0x314>)
 800bfc0:	400b      	ands	r3, r1
 800bfc2:	68e1      	ldr	r1, [r4, #12]
 800bfc4:	430b      	orrs	r3, r1
 800bfc6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfc8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	4bb8      	ldr	r3, [pc, #736]	; (800c2b0 <UART_SetConfig+0x318>)
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d001      	beq.n	800bfd6 <UART_SetConfig+0x3e>
    tmpreg |= huart->Init.OneBitSampling;
 800bfd2:	6a23      	ldr	r3, [r4, #32]
 800bfd4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bfd6:	6893      	ldr	r3, [r2, #8]
 800bfd8:	48b6      	ldr	r0, [pc, #728]	; (800c2b4 <UART_SetConfig+0x31c>)
 800bfda:	4003      	ands	r3, r0
 800bfdc:	430b      	orrs	r3, r1
 800bfde:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bfe4:	210f      	movs	r1, #15
 800bfe6:	438b      	bics	r3, r1
 800bfe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfea:	430b      	orrs	r3, r1
 800bfec:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	4ab1      	ldr	r2, [pc, #708]	; (800c2b8 <UART_SetConfig+0x320>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d05c      	beq.n	800c0b0 <UART_SetConfig+0x118>
 800bff6:	4ab1      	ldr	r2, [pc, #708]	; (800c2bc <UART_SetConfig+0x324>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d06d      	beq.n	800c0d8 <UART_SetConfig+0x140>
 800bffc:	4ab0      	ldr	r2, [pc, #704]	; (800c2c0 <UART_SetConfig+0x328>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d100      	bne.n	800c004 <UART_SetConfig+0x6c>
 800c002:	e09e      	b.n	800c142 <UART_SetConfig+0x1aa>
 800c004:	4aaf      	ldr	r2, [pc, #700]	; (800c2c4 <UART_SetConfig+0x32c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d100      	bne.n	800c00c <UART_SetConfig+0x74>
 800c00a:	e09c      	b.n	800c146 <UART_SetConfig+0x1ae>
 800c00c:	4aa8      	ldr	r2, [pc, #672]	; (800c2b0 <UART_SetConfig+0x318>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d077      	beq.n	800c102 <UART_SetConfig+0x16a>
 800c012:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800c014:	4aa6      	ldr	r2, [pc, #664]	; (800c2b0 <UART_SetConfig+0x318>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d100      	bne.n	800c01c <UART_SetConfig+0x84>
 800c01a:	e098      	b.n	800c14e <UART_SetConfig+0x1b6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c01c:	2380      	movs	r3, #128	; 0x80
 800c01e:	021b      	lsls	r3, r3, #8
 800c020:	69e2      	ldr	r2, [r4, #28]
 800c022:	429a      	cmp	r2, r3
 800c024:	d100      	bne.n	800c028 <UART_SetConfig+0x90>
 800c026:	e351      	b.n	800c6cc <UART_SetConfig+0x734>
    switch (clocksource)
 800c028:	2d02      	cmp	r5, #2
 800c02a:	d101      	bne.n	800c030 <UART_SetConfig+0x98>
 800c02c:	f000 fcf8 	bl	800ca20 <UART_SetConfig+0xa88>
 800c030:	d801      	bhi.n	800c036 <UART_SetConfig+0x9e>
 800c032:	f000 fca1 	bl	800c978 <UART_SetConfig+0x9e0>
 800c036:	2d04      	cmp	r5, #4
 800c038:	d101      	bne.n	800c03e <UART_SetConfig+0xa6>
 800c03a:	f000 fd2d 	bl	800ca98 <UART_SetConfig+0xb00>
 800c03e:	2d08      	cmp	r5, #8
 800c040:	d001      	beq.n	800c046 <UART_SetConfig+0xae>
 800c042:	f000 fd93 	bl	800cb6c <UART_SetConfig+0xbd4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <UART_SetConfig+0xb8>
 800c04c:	f000 fd67 	bl	800cb1e <UART_SetConfig+0xb86>
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <UART_SetConfig+0xc0>
 800c054:	f000 fd6f 	bl	800cb36 <UART_SetConfig+0xb9e>
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d101      	bne.n	800c060 <UART_SetConfig+0xc8>
 800c05c:	f000 fd6e 	bl	800cb3c <UART_SetConfig+0xba4>
 800c060:	2b03      	cmp	r3, #3
 800c062:	d101      	bne.n	800c068 <UART_SetConfig+0xd0>
 800c064:	f000 fd6d 	bl	800cb42 <UART_SetConfig+0xbaa>
 800c068:	2b04      	cmp	r3, #4
 800c06a:	d101      	bne.n	800c070 <UART_SetConfig+0xd8>
 800c06c:	f000 fd6b 	bl	800cb46 <UART_SetConfig+0xbae>
 800c070:	2b05      	cmp	r3, #5
 800c072:	d101      	bne.n	800c078 <UART_SetConfig+0xe0>
 800c074:	f000 fd6a 	bl	800cb4c <UART_SetConfig+0xbb4>
 800c078:	2b06      	cmp	r3, #6
 800c07a:	d101      	bne.n	800c080 <UART_SetConfig+0xe8>
 800c07c:	f000 fd68 	bl	800cb50 <UART_SetConfig+0xbb8>
 800c080:	2b07      	cmp	r3, #7
 800c082:	d101      	bne.n	800c088 <UART_SetConfig+0xf0>
 800c084:	f000 fd66 	bl	800cb54 <UART_SetConfig+0xbbc>
 800c088:	2b08      	cmp	r3, #8
 800c08a:	d101      	bne.n	800c090 <UART_SetConfig+0xf8>
 800c08c:	f000 fd65 	bl	800cb5a <UART_SetConfig+0xbc2>
 800c090:	2b09      	cmp	r3, #9
 800c092:	d101      	bne.n	800c098 <UART_SetConfig+0x100>
 800c094:	f000 fd64 	bl	800cb60 <UART_SetConfig+0xbc8>
 800c098:	2b0a      	cmp	r3, #10
 800c09a:	d101      	bne.n	800c0a0 <UART_SetConfig+0x108>
 800c09c:	f000 fd63 	bl	800cb66 <UART_SetConfig+0xbce>
 800c0a0:	2b0b      	cmp	r3, #11
 800c0a2:	d101      	bne.n	800c0a8 <UART_SetConfig+0x110>
 800c0a4:	f000 fd39 	bl	800cb1a <UART_SetConfig+0xb82>
 800c0a8:	2380      	movs	r3, #128	; 0x80
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	f000 fd39 	bl	800cb22 <UART_SetConfig+0xb8a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0b0:	4a85      	ldr	r2, [pc, #532]	; (800c2c8 <UART_SetConfig+0x330>)
 800c0b2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c0b4:	2203      	movs	r2, #3
 800c0b6:	400a      	ands	r2, r1
 800c0b8:	2a01      	cmp	r2, #1
 800c0ba:	d009      	beq.n	800c0d0 <UART_SetConfig+0x138>
 800c0bc:	2a00      	cmp	r2, #0
 800c0be:	d005      	beq.n	800c0cc <UART_SetConfig+0x134>
 800c0c0:	2a02      	cmp	r2, #2
 800c0c2:	d03a      	beq.n	800c13a <UART_SetConfig+0x1a2>
 800c0c4:	2a03      	cmp	r2, #3
 800c0c6:	d005      	beq.n	800c0d4 <UART_SetConfig+0x13c>
 800c0c8:	2510      	movs	r5, #16
 800c0ca:	e7a3      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	e7a1      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0d0:	2504      	movs	r5, #4
 800c0d2:	e79f      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0d4:	2508      	movs	r5, #8
 800c0d6:	e79d      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0d8:	4a7b      	ldr	r2, [pc, #492]	; (800c2c8 <UART_SetConfig+0x330>)
 800c0da:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c0dc:	220c      	movs	r2, #12
 800c0de:	400a      	ands	r2, r1
 800c0e0:	2a04      	cmp	r2, #4
 800c0e2:	d00a      	beq.n	800c0fa <UART_SetConfig+0x162>
 800c0e4:	d905      	bls.n	800c0f2 <UART_SetConfig+0x15a>
 800c0e6:	2a08      	cmp	r2, #8
 800c0e8:	d029      	beq.n	800c13e <UART_SetConfig+0x1a6>
 800c0ea:	2a0c      	cmp	r2, #12
 800c0ec:	d107      	bne.n	800c0fe <UART_SetConfig+0x166>
 800c0ee:	2508      	movs	r5, #8
 800c0f0:	e790      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	d103      	bne.n	800c0fe <UART_SetConfig+0x166>
 800c0f6:	2500      	movs	r5, #0
 800c0f8:	e78c      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0fa:	2504      	movs	r5, #4
 800c0fc:	e78a      	b.n	800c014 <UART_SetConfig+0x7c>
 800c0fe:	2510      	movs	r5, #16
 800c100:	e788      	b.n	800c014 <UART_SetConfig+0x7c>
 800c102:	4a71      	ldr	r2, [pc, #452]	; (800c2c8 <UART_SetConfig+0x330>)
 800c104:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c106:	21c0      	movs	r1, #192	; 0xc0
 800c108:	0109      	lsls	r1, r1, #4
 800c10a:	400a      	ands	r2, r1
 800c10c:	2180      	movs	r1, #128	; 0x80
 800c10e:	00c9      	lsls	r1, r1, #3
 800c110:	428a      	cmp	r2, r1
 800c112:	d00e      	beq.n	800c132 <UART_SetConfig+0x19a>
 800c114:	d909      	bls.n	800c12a <UART_SetConfig+0x192>
 800c116:	2180      	movs	r1, #128	; 0x80
 800c118:	0109      	lsls	r1, r1, #4
 800c11a:	428a      	cmp	r2, r1
 800c11c:	d015      	beq.n	800c14a <UART_SetConfig+0x1b2>
 800c11e:	21c0      	movs	r1, #192	; 0xc0
 800c120:	0109      	lsls	r1, r1, #4
 800c122:	428a      	cmp	r2, r1
 800c124:	d107      	bne.n	800c136 <UART_SetConfig+0x19e>
 800c126:	2508      	movs	r5, #8
 800c128:	e774      	b.n	800c014 <UART_SetConfig+0x7c>
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d103      	bne.n	800c136 <UART_SetConfig+0x19e>
 800c12e:	2500      	movs	r5, #0
 800c130:	e770      	b.n	800c014 <UART_SetConfig+0x7c>
 800c132:	2504      	movs	r5, #4
 800c134:	e76e      	b.n	800c014 <UART_SetConfig+0x7c>
 800c136:	2510      	movs	r5, #16
 800c138:	e76c      	b.n	800c014 <UART_SetConfig+0x7c>
 800c13a:	2502      	movs	r5, #2
 800c13c:	e76a      	b.n	800c014 <UART_SetConfig+0x7c>
 800c13e:	2502      	movs	r5, #2
 800c140:	e768      	b.n	800c014 <UART_SetConfig+0x7c>
 800c142:	2500      	movs	r5, #0
 800c144:	e766      	b.n	800c014 <UART_SetConfig+0x7c>
 800c146:	2500      	movs	r5, #0
 800c148:	e764      	b.n	800c014 <UART_SetConfig+0x7c>
 800c14a:	2502      	movs	r5, #2
 800c14c:	e762      	b.n	800c014 <UART_SetConfig+0x7c>
    switch (clocksource)
 800c14e:	2d02      	cmp	r5, #2
 800c150:	d100      	bne.n	800c154 <UART_SetConfig+0x1bc>
 800c152:	e0c1      	b.n	800c2d8 <UART_SetConfig+0x340>
 800c154:	d92e      	bls.n	800c1b4 <UART_SetConfig+0x21c>
 800c156:	2d04      	cmp	r5, #4
 800c158:	d100      	bne.n	800c15c <UART_SetConfig+0x1c4>
 800c15a:	e0da      	b.n	800c312 <UART_SetConfig+0x37a>
 800c15c:	2d08      	cmp	r5, #8
 800c15e:	d001      	beq.n	800c164 <UART_SetConfig+0x1cc>
 800c160:	f000 fd07 	bl	800cb72 <UART_SetConfig+0xbda>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c164:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c166:	2b00      	cmp	r3, #0
 800c168:	d100      	bne.n	800c16c <UART_SetConfig+0x1d4>
 800c16a:	e122      	b.n	800c3b2 <UART_SetConfig+0x41a>
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d100      	bne.n	800c172 <UART_SetConfig+0x1da>
 800c170:	e122      	b.n	800c3b8 <UART_SetConfig+0x420>
 800c172:	2b02      	cmp	r3, #2
 800c174:	d100      	bne.n	800c178 <UART_SetConfig+0x1e0>
 800c176:	e122      	b.n	800c3be <UART_SetConfig+0x426>
 800c178:	2b03      	cmp	r3, #3
 800c17a:	d100      	bne.n	800c17e <UART_SetConfig+0x1e6>
 800c17c:	e122      	b.n	800c3c4 <UART_SetConfig+0x42c>
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d100      	bne.n	800c184 <UART_SetConfig+0x1ec>
 800c182:	e121      	b.n	800c3c8 <UART_SetConfig+0x430>
 800c184:	2b05      	cmp	r3, #5
 800c186:	d100      	bne.n	800c18a <UART_SetConfig+0x1f2>
 800c188:	e121      	b.n	800c3ce <UART_SetConfig+0x436>
 800c18a:	2b06      	cmp	r3, #6
 800c18c:	d100      	bne.n	800c190 <UART_SetConfig+0x1f8>
 800c18e:	e120      	b.n	800c3d2 <UART_SetConfig+0x43a>
 800c190:	2b07      	cmp	r3, #7
 800c192:	d100      	bne.n	800c196 <UART_SetConfig+0x1fe>
 800c194:	e11f      	b.n	800c3d6 <UART_SetConfig+0x43e>
 800c196:	2b08      	cmp	r3, #8
 800c198:	d100      	bne.n	800c19c <UART_SetConfig+0x204>
 800c19a:	e11f      	b.n	800c3dc <UART_SetConfig+0x444>
 800c19c:	2b09      	cmp	r3, #9
 800c19e:	d100      	bne.n	800c1a2 <UART_SetConfig+0x20a>
 800c1a0:	e11f      	b.n	800c3e2 <UART_SetConfig+0x44a>
 800c1a2:	2b0a      	cmp	r3, #10
 800c1a4:	d100      	bne.n	800c1a8 <UART_SetConfig+0x210>
 800c1a6:	e11f      	b.n	800c3e8 <UART_SetConfig+0x450>
 800c1a8:	2b0b      	cmp	r3, #11
 800c1aa:	d100      	bne.n	800c1ae <UART_SetConfig+0x216>
 800c1ac:	e0e9      	b.n	800c382 <UART_SetConfig+0x3ea>
 800c1ae:	2080      	movs	r0, #128	; 0x80
 800c1b0:	0200      	lsls	r0, r0, #8
 800c1b2:	e026      	b.n	800c202 <UART_SetConfig+0x26a>
    switch (clocksource)
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	d001      	beq.n	800c1bc <UART_SetConfig+0x224>
 800c1b8:	f000 fcdb 	bl	800cb72 <UART_SetConfig+0xbda>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c1bc:	f7ff fe7a 	bl	800beb4 <HAL_RCC_GetPCLK1Freq>
 800c1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d01a      	beq.n	800c1fc <UART_SetConfig+0x264>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d05f      	beq.n	800c28a <UART_SetConfig+0x2f2>
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d05f      	beq.n	800c28e <UART_SetConfig+0x2f6>
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d05f      	beq.n	800c292 <UART_SetConfig+0x2fa>
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d05f      	beq.n	800c296 <UART_SetConfig+0x2fe>
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d05f      	beq.n	800c29a <UART_SetConfig+0x302>
 800c1da:	2b06      	cmp	r3, #6
 800c1dc:	d05f      	beq.n	800c29e <UART_SetConfig+0x306>
 800c1de:	2b07      	cmp	r3, #7
 800c1e0:	d05f      	beq.n	800c2a2 <UART_SetConfig+0x30a>
 800c1e2:	2b08      	cmp	r3, #8
 800c1e4:	d072      	beq.n	800c2cc <UART_SetConfig+0x334>
 800c1e6:	2b09      	cmp	r3, #9
 800c1e8:	d072      	beq.n	800c2d0 <UART_SetConfig+0x338>
 800c1ea:	2b0a      	cmp	r3, #10
 800c1ec:	d072      	beq.n	800c2d4 <UART_SetConfig+0x33c>
 800c1ee:	2b0b      	cmp	r3, #11
 800c1f0:	d001      	beq.n	800c1f6 <UART_SetConfig+0x25e>
 800c1f2:	2101      	movs	r1, #1
 800c1f4:	e003      	b.n	800c1fe <UART_SetConfig+0x266>
 800c1f6:	2180      	movs	r1, #128	; 0x80
 800c1f8:	0049      	lsls	r1, r1, #1
 800c1fa:	e000      	b.n	800c1fe <UART_SetConfig+0x266>
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	f004 ffa9 	bl	8011154 <__udivsi3>
    if (lpuart_ker_ck_pres != 0U)
 800c202:	2800      	cmp	r0, #0
 800c204:	d101      	bne.n	800c20a <UART_SetConfig+0x272>
 800c206:	f000 fcb6 	bl	800cb76 <UART_SetConfig+0xbde>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c20a:	6862      	ldr	r2, [r4, #4]
 800c20c:	0053      	lsls	r3, r2, #1
 800c20e:	189b      	adds	r3, r3, r2
 800c210:	4283      	cmp	r3, r0
 800c212:	d901      	bls.n	800c218 <UART_SetConfig+0x280>
 800c214:	f000 fcb1 	bl	800cb7a <UART_SetConfig+0xbe2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c218:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c21a:	4283      	cmp	r3, r0
 800c21c:	d201      	bcs.n	800c222 <UART_SetConfig+0x28a>
 800c21e:	f000 fcae 	bl	800cb7e <UART_SetConfig+0xbe6>
        switch (clocksource)
 800c222:	2d02      	cmp	r5, #2
 800c224:	d100      	bne.n	800c228 <UART_SetConfig+0x290>
 800c226:	e142      	b.n	800c4ae <UART_SetConfig+0x516>
 800c228:	d800      	bhi.n	800c22c <UART_SetConfig+0x294>
 800c22a:	e0e0      	b.n	800c3ee <UART_SetConfig+0x456>
 800c22c:	2d04      	cmp	r5, #4
 800c22e:	d100      	bne.n	800c232 <UART_SetConfig+0x29a>
 800c230:	e186      	b.n	800c540 <UART_SetConfig+0x5a8>
 800c232:	2d08      	cmp	r5, #8
 800c234:	d000      	beq.n	800c238 <UART_SetConfig+0x2a0>
 800c236:	e246      	b.n	800c6c6 <UART_SetConfig+0x72e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d100      	bne.n	800c240 <UART_SetConfig+0x2a8>
 800c23e:	e210      	b.n	800c662 <UART_SetConfig+0x6ca>
 800c240:	2b01      	cmp	r3, #1
 800c242:	d100      	bne.n	800c246 <UART_SetConfig+0x2ae>
 800c244:	e21a      	b.n	800c67c <UART_SetConfig+0x6e4>
 800c246:	2b02      	cmp	r3, #2
 800c248:	d100      	bne.n	800c24c <UART_SetConfig+0x2b4>
 800c24a:	e21b      	b.n	800c684 <UART_SetConfig+0x6ec>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d100      	bne.n	800c252 <UART_SetConfig+0x2ba>
 800c250:	e21c      	b.n	800c68c <UART_SetConfig+0x6f4>
 800c252:	2b04      	cmp	r3, #4
 800c254:	d100      	bne.n	800c258 <UART_SetConfig+0x2c0>
 800c256:	e21c      	b.n	800c692 <UART_SetConfig+0x6fa>
 800c258:	2b05      	cmp	r3, #5
 800c25a:	d100      	bne.n	800c25e <UART_SetConfig+0x2c6>
 800c25c:	e21d      	b.n	800c69a <UART_SetConfig+0x702>
 800c25e:	2b06      	cmp	r3, #6
 800c260:	d100      	bne.n	800c264 <UART_SetConfig+0x2cc>
 800c262:	e21d      	b.n	800c6a0 <UART_SetConfig+0x708>
 800c264:	2b07      	cmp	r3, #7
 800c266:	d100      	bne.n	800c26a <UART_SetConfig+0x2d2>
 800c268:	e21d      	b.n	800c6a6 <UART_SetConfig+0x70e>
 800c26a:	2b08      	cmp	r3, #8
 800c26c:	d100      	bne.n	800c270 <UART_SetConfig+0x2d8>
 800c26e:	e21e      	b.n	800c6ae <UART_SetConfig+0x716>
 800c270:	2b09      	cmp	r3, #9
 800c272:	d100      	bne.n	800c276 <UART_SetConfig+0x2de>
 800c274:	e21f      	b.n	800c6b6 <UART_SetConfig+0x71e>
 800c276:	2b0a      	cmp	r3, #10
 800c278:	d100      	bne.n	800c27c <UART_SetConfig+0x2e4>
 800c27a:	e220      	b.n	800c6be <UART_SetConfig+0x726>
 800c27c:	2b0b      	cmp	r3, #11
 800c27e:	d100      	bne.n	800c282 <UART_SetConfig+0x2ea>
 800c280:	e1eb      	b.n	800c65a <UART_SetConfig+0x6c2>
 800c282:	2680      	movs	r6, #128	; 0x80
 800c284:	0436      	lsls	r6, r6, #16
 800c286:	2700      	movs	r7, #0
 800c288:	e1ee      	b.n	800c668 <UART_SetConfig+0x6d0>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c28a:	2102      	movs	r1, #2
 800c28c:	e7b7      	b.n	800c1fe <UART_SetConfig+0x266>
 800c28e:	2104      	movs	r1, #4
 800c290:	e7b5      	b.n	800c1fe <UART_SetConfig+0x266>
 800c292:	2106      	movs	r1, #6
 800c294:	e7b3      	b.n	800c1fe <UART_SetConfig+0x266>
 800c296:	2108      	movs	r1, #8
 800c298:	e7b1      	b.n	800c1fe <UART_SetConfig+0x266>
 800c29a:	210a      	movs	r1, #10
 800c29c:	e7af      	b.n	800c1fe <UART_SetConfig+0x266>
 800c29e:	210c      	movs	r1, #12
 800c2a0:	e7ad      	b.n	800c1fe <UART_SetConfig+0x266>
 800c2a2:	2110      	movs	r1, #16
 800c2a4:	e7ab      	b.n	800c1fe <UART_SetConfig+0x266>
 800c2a6:	46c0      	nop			; (mov r8, r8)
 800c2a8:	cfff69f3 	.word	0xcfff69f3
 800c2ac:	ffffcfff 	.word	0xffffcfff
 800c2b0:	40008000 	.word	0x40008000
 800c2b4:	11fff4ff 	.word	0x11fff4ff
 800c2b8:	40013800 	.word	0x40013800
 800c2bc:	40004400 	.word	0x40004400
 800c2c0:	40004800 	.word	0x40004800
 800c2c4:	40004c00 	.word	0x40004c00
 800c2c8:	40021000 	.word	0x40021000
 800c2cc:	2120      	movs	r1, #32
 800c2ce:	e796      	b.n	800c1fe <UART_SetConfig+0x266>
 800c2d0:	2140      	movs	r1, #64	; 0x40
 800c2d2:	e794      	b.n	800c1fe <UART_SetConfig+0x266>
 800c2d4:	2180      	movs	r1, #128	; 0x80
 800c2d6:	e792      	b.n	800c1fe <UART_SetConfig+0x266>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c2d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d053      	beq.n	800c386 <UART_SetConfig+0x3ee>
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d053      	beq.n	800c38a <UART_SetConfig+0x3f2>
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d053      	beq.n	800c38e <UART_SetConfig+0x3f6>
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	d053      	beq.n	800c392 <UART_SetConfig+0x3fa>
 800c2ea:	2b04      	cmp	r3, #4
 800c2ec:	d053      	beq.n	800c396 <UART_SetConfig+0x3fe>
 800c2ee:	2b05      	cmp	r3, #5
 800c2f0:	d053      	beq.n	800c39a <UART_SetConfig+0x402>
 800c2f2:	2b06      	cmp	r3, #6
 800c2f4:	d053      	beq.n	800c39e <UART_SetConfig+0x406>
 800c2f6:	2b07      	cmp	r3, #7
 800c2f8:	d053      	beq.n	800c3a2 <UART_SetConfig+0x40a>
 800c2fa:	2b08      	cmp	r3, #8
 800c2fc:	d053      	beq.n	800c3a6 <UART_SetConfig+0x40e>
 800c2fe:	2b09      	cmp	r3, #9
 800c300:	d053      	beq.n	800c3aa <UART_SetConfig+0x412>
 800c302:	2b0a      	cmp	r3, #10
 800c304:	d053      	beq.n	800c3ae <UART_SetConfig+0x416>
 800c306:	2b0b      	cmp	r3, #11
 800c308:	d001      	beq.n	800c30e <UART_SetConfig+0x376>
 800c30a:	48aa      	ldr	r0, [pc, #680]	; (800c5b4 <UART_SetConfig+0x61c>)
 800c30c:	e779      	b.n	800c202 <UART_SetConfig+0x26a>
 800c30e:	48aa      	ldr	r0, [pc, #680]	; (800c5b8 <UART_SetConfig+0x620>)
 800c310:	e777      	b.n	800c202 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c312:	f7ff fde3 	bl	800bedc <HAL_RCC_GetSysClockFreq>
 800c316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d01a      	beq.n	800c352 <UART_SetConfig+0x3ba>
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d01c      	beq.n	800c35a <UART_SetConfig+0x3c2>
 800c320:	2b02      	cmp	r3, #2
 800c322:	d01c      	beq.n	800c35e <UART_SetConfig+0x3c6>
 800c324:	2b03      	cmp	r3, #3
 800c326:	d01c      	beq.n	800c362 <UART_SetConfig+0x3ca>
 800c328:	2b04      	cmp	r3, #4
 800c32a:	d01c      	beq.n	800c366 <UART_SetConfig+0x3ce>
 800c32c:	2b05      	cmp	r3, #5
 800c32e:	d01c      	beq.n	800c36a <UART_SetConfig+0x3d2>
 800c330:	2b06      	cmp	r3, #6
 800c332:	d01c      	beq.n	800c36e <UART_SetConfig+0x3d6>
 800c334:	2b07      	cmp	r3, #7
 800c336:	d01c      	beq.n	800c372 <UART_SetConfig+0x3da>
 800c338:	2b08      	cmp	r3, #8
 800c33a:	d01c      	beq.n	800c376 <UART_SetConfig+0x3de>
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	d01c      	beq.n	800c37a <UART_SetConfig+0x3e2>
 800c340:	2b0a      	cmp	r3, #10
 800c342:	d01c      	beq.n	800c37e <UART_SetConfig+0x3e6>
 800c344:	2b0b      	cmp	r3, #11
 800c346:	d001      	beq.n	800c34c <UART_SetConfig+0x3b4>
 800c348:	2101      	movs	r1, #1
 800c34a:	e003      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c34c:	2180      	movs	r1, #128	; 0x80
 800c34e:	0049      	lsls	r1, r1, #1
 800c350:	e000      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c352:	2101      	movs	r1, #1
 800c354:	f004 fefe 	bl	8011154 <__udivsi3>
 800c358:	e753      	b.n	800c202 <UART_SetConfig+0x26a>
 800c35a:	2102      	movs	r1, #2
 800c35c:	e7fa      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c35e:	2104      	movs	r1, #4
 800c360:	e7f8      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c362:	2106      	movs	r1, #6
 800c364:	e7f6      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c366:	2108      	movs	r1, #8
 800c368:	e7f4      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c36a:	210a      	movs	r1, #10
 800c36c:	e7f2      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c36e:	210c      	movs	r1, #12
 800c370:	e7f0      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c372:	2110      	movs	r1, #16
 800c374:	e7ee      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c376:	2120      	movs	r1, #32
 800c378:	e7ec      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c37a:	2140      	movs	r1, #64	; 0x40
 800c37c:	e7ea      	b.n	800c354 <UART_SetConfig+0x3bc>
 800c37e:	2180      	movs	r1, #128	; 0x80
 800c380:	e7e8      	b.n	800c354 <UART_SetConfig+0x3bc>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c382:	2080      	movs	r0, #128	; 0x80
 800c384:	e73d      	b.n	800c202 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c386:	488b      	ldr	r0, [pc, #556]	; (800c5b4 <UART_SetConfig+0x61c>)
 800c388:	e73b      	b.n	800c202 <UART_SetConfig+0x26a>
 800c38a:	488c      	ldr	r0, [pc, #560]	; (800c5bc <UART_SetConfig+0x624>)
 800c38c:	e739      	b.n	800c202 <UART_SetConfig+0x26a>
 800c38e:	488c      	ldr	r0, [pc, #560]	; (800c5c0 <UART_SetConfig+0x628>)
 800c390:	e737      	b.n	800c202 <UART_SetConfig+0x26a>
 800c392:	488c      	ldr	r0, [pc, #560]	; (800c5c4 <UART_SetConfig+0x62c>)
 800c394:	e735      	b.n	800c202 <UART_SetConfig+0x26a>
 800c396:	488c      	ldr	r0, [pc, #560]	; (800c5c8 <UART_SetConfig+0x630>)
 800c398:	e733      	b.n	800c202 <UART_SetConfig+0x26a>
 800c39a:	488c      	ldr	r0, [pc, #560]	; (800c5cc <UART_SetConfig+0x634>)
 800c39c:	e731      	b.n	800c202 <UART_SetConfig+0x26a>
 800c39e:	488c      	ldr	r0, [pc, #560]	; (800c5d0 <UART_SetConfig+0x638>)
 800c3a0:	e72f      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3a2:	488c      	ldr	r0, [pc, #560]	; (800c5d4 <UART_SetConfig+0x63c>)
 800c3a4:	e72d      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3a6:	488c      	ldr	r0, [pc, #560]	; (800c5d8 <UART_SetConfig+0x640>)
 800c3a8:	e72b      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3aa:	488c      	ldr	r0, [pc, #560]	; (800c5dc <UART_SetConfig+0x644>)
 800c3ac:	e729      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3ae:	488c      	ldr	r0, [pc, #560]	; (800c5e0 <UART_SetConfig+0x648>)
 800c3b0:	e727      	b.n	800c202 <UART_SetConfig+0x26a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800c3b2:	2080      	movs	r0, #128	; 0x80
 800c3b4:	0200      	lsls	r0, r0, #8
 800c3b6:	e724      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3b8:	2080      	movs	r0, #128	; 0x80
 800c3ba:	01c0      	lsls	r0, r0, #7
 800c3bc:	e721      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3be:	2080      	movs	r0, #128	; 0x80
 800c3c0:	0180      	lsls	r0, r0, #6
 800c3c2:	e71e      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3c4:	4887      	ldr	r0, [pc, #540]	; (800c5e4 <UART_SetConfig+0x64c>)
 800c3c6:	e71c      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3c8:	2080      	movs	r0, #128	; 0x80
 800c3ca:	0140      	lsls	r0, r0, #5
 800c3cc:	e719      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3ce:	4886      	ldr	r0, [pc, #536]	; (800c5e8 <UART_SetConfig+0x650>)
 800c3d0:	e717      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3d2:	4886      	ldr	r0, [pc, #536]	; (800c5ec <UART_SetConfig+0x654>)
 800c3d4:	e715      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3d6:	2080      	movs	r0, #128	; 0x80
 800c3d8:	0100      	lsls	r0, r0, #4
 800c3da:	e712      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3dc:	2080      	movs	r0, #128	; 0x80
 800c3de:	00c0      	lsls	r0, r0, #3
 800c3e0:	e70f      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3e2:	2080      	movs	r0, #128	; 0x80
 800c3e4:	0080      	lsls	r0, r0, #2
 800c3e6:	e70c      	b.n	800c202 <UART_SetConfig+0x26a>
 800c3e8:	2080      	movs	r0, #128	; 0x80
 800c3ea:	0040      	lsls	r0, r0, #1
 800c3ec:	e709      	b.n	800c202 <UART_SetConfig+0x26a>
        switch (clocksource)
 800c3ee:	2d00      	cmp	r5, #0
 800c3f0:	d000      	beq.n	800c3f4 <UART_SetConfig+0x45c>
 800c3f2:	e168      	b.n	800c6c6 <UART_SetConfig+0x72e>
            pclk = HAL_RCC_GetPCLK1Freq();
 800c3f4:	f7ff fd5e 	bl	800beb4 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01c      	beq.n	800c438 <UART_SetConfig+0x4a0>
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d037      	beq.n	800c472 <UART_SetConfig+0x4da>
 800c402:	2b02      	cmp	r3, #2
 800c404:	d038      	beq.n	800c478 <UART_SetConfig+0x4e0>
 800c406:	2b03      	cmp	r3, #3
 800c408:	d039      	beq.n	800c47e <UART_SetConfig+0x4e6>
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	d03a      	beq.n	800c484 <UART_SetConfig+0x4ec>
 800c40e:	2b05      	cmp	r3, #5
 800c410:	d03b      	beq.n	800c48a <UART_SetConfig+0x4f2>
 800c412:	2b06      	cmp	r3, #6
 800c414:	d03c      	beq.n	800c490 <UART_SetConfig+0x4f8>
 800c416:	2b07      	cmp	r3, #7
 800c418:	d03d      	beq.n	800c496 <UART_SetConfig+0x4fe>
 800c41a:	2b08      	cmp	r3, #8
 800c41c:	d03e      	beq.n	800c49c <UART_SetConfig+0x504>
 800c41e:	2b09      	cmp	r3, #9
 800c420:	d03f      	beq.n	800c4a2 <UART_SetConfig+0x50a>
 800c422:	2b0a      	cmp	r3, #10
 800c424:	d040      	beq.n	800c4a8 <UART_SetConfig+0x510>
 800c426:	2b0b      	cmp	r3, #11
 800c428:	d002      	beq.n	800c430 <UART_SetConfig+0x498>
 800c42a:	2201      	movs	r2, #1
 800c42c:	2300      	movs	r3, #0
 800c42e:	e005      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c430:	2280      	movs	r2, #128	; 0x80
 800c432:	0052      	lsls	r2, r2, #1
 800c434:	2300      	movs	r3, #0
 800c436:	e001      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c438:	2201      	movs	r2, #1
 800c43a:	2300      	movs	r3, #0
 800c43c:	6865      	ldr	r5, [r4, #4]
 800c43e:	2100      	movs	r1, #0
 800c440:	f005 f876 	bl	8011530 <__aeabi_uldivmod>
 800c444:	0e06      	lsrs	r6, r0, #24
 800c446:	020b      	lsls	r3, r1, #8
 800c448:	4333      	orrs	r3, r6
 800c44a:	0202      	lsls	r2, r0, #8
 800c44c:	0868      	lsrs	r0, r5, #1
 800c44e:	2100      	movs	r1, #0
 800c450:	1880      	adds	r0, r0, r2
 800c452:	4159      	adcs	r1, r3
 800c454:	002a      	movs	r2, r5
 800c456:	2300      	movs	r3, #0
 800c458:	f005 f86a 	bl	8011530 <__aeabi_uldivmod>
 800c45c:	0002      	movs	r2, r0
 800c45e:	2000      	movs	r0, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c460:	4963      	ldr	r1, [pc, #396]	; (800c5f0 <UART_SetConfig+0x658>)
 800c462:	4b64      	ldr	r3, [pc, #400]	; (800c5f4 <UART_SetConfig+0x65c>)
 800c464:	18d3      	adds	r3, r2, r3
 800c466:	428b      	cmp	r3, r1
 800c468:	d900      	bls.n	800c46c <UART_SetConfig+0x4d4>
 800c46a:	e38a      	b.n	800cb82 <UART_SetConfig+0xbea>
          huart->Instance->BRR = usartdiv;
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	60da      	str	r2, [r3, #12]
 800c470:	e2b9      	b.n	800c9e6 <UART_SetConfig+0xa4e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c472:	2202      	movs	r2, #2
 800c474:	2300      	movs	r3, #0
 800c476:	e7e1      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c478:	2204      	movs	r2, #4
 800c47a:	2300      	movs	r3, #0
 800c47c:	e7de      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c47e:	2206      	movs	r2, #6
 800c480:	2300      	movs	r3, #0
 800c482:	e7db      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c484:	2208      	movs	r2, #8
 800c486:	2300      	movs	r3, #0
 800c488:	e7d8      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c48a:	220a      	movs	r2, #10
 800c48c:	2300      	movs	r3, #0
 800c48e:	e7d5      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c490:	220c      	movs	r2, #12
 800c492:	2300      	movs	r3, #0
 800c494:	e7d2      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c496:	2210      	movs	r2, #16
 800c498:	2300      	movs	r3, #0
 800c49a:	e7cf      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c49c:	2220      	movs	r2, #32
 800c49e:	2300      	movs	r3, #0
 800c4a0:	e7cc      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c4a2:	2240      	movs	r2, #64	; 0x40
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e7c9      	b.n	800c43c <UART_SetConfig+0x4a4>
 800c4a8:	2280      	movs	r2, #128	; 0x80
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e7c6      	b.n	800c43c <UART_SetConfig+0x4a4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d01b      	beq.n	800c4ec <UART_SetConfig+0x554>
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d025      	beq.n	800c504 <UART_SetConfig+0x56c>
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d026      	beq.n	800c50a <UART_SetConfig+0x572>
 800c4bc:	2b03      	cmp	r3, #3
 800c4be:	d027      	beq.n	800c510 <UART_SetConfig+0x578>
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d028      	beq.n	800c516 <UART_SetConfig+0x57e>
 800c4c4:	2b05      	cmp	r3, #5
 800c4c6:	d029      	beq.n	800c51c <UART_SetConfig+0x584>
 800c4c8:	2b06      	cmp	r3, #6
 800c4ca:	d02a      	beq.n	800c522 <UART_SetConfig+0x58a>
 800c4cc:	2b07      	cmp	r3, #7
 800c4ce:	d02b      	beq.n	800c528 <UART_SetConfig+0x590>
 800c4d0:	2b08      	cmp	r3, #8
 800c4d2:	d02c      	beq.n	800c52e <UART_SetConfig+0x596>
 800c4d4:	2b09      	cmp	r3, #9
 800c4d6:	d02d      	beq.n	800c534 <UART_SetConfig+0x59c>
 800c4d8:	2b0a      	cmp	r3, #10
 800c4da:	d02e      	beq.n	800c53a <UART_SetConfig+0x5a2>
 800c4dc:	2b0b      	cmp	r3, #11
 800c4de:	d002      	beq.n	800c4e6 <UART_SetConfig+0x54e>
 800c4e0:	4e45      	ldr	r6, [pc, #276]	; (800c5f8 <UART_SetConfig+0x660>)
 800c4e2:	2700      	movs	r7, #0
 800c4e4:	e004      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c4e6:	4e33      	ldr	r6, [pc, #204]	; (800c5b4 <UART_SetConfig+0x61c>)
 800c4e8:	2700      	movs	r7, #0
 800c4ea:	e001      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c4ec:	4e42      	ldr	r6, [pc, #264]	; (800c5f8 <UART_SetConfig+0x660>)
 800c4ee:	2700      	movs	r7, #0
 800c4f0:	0850      	lsrs	r0, r2, #1
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	1980      	adds	r0, r0, r6
 800c4f6:	4179      	adcs	r1, r7
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f005 f819 	bl	8011530 <__aeabi_uldivmod>
 800c4fe:	0002      	movs	r2, r0
 800c500:	2000      	movs	r0, #0
 800c502:	e7ad      	b.n	800c460 <UART_SetConfig+0x4c8>
 800c504:	4e3d      	ldr	r6, [pc, #244]	; (800c5fc <UART_SetConfig+0x664>)
 800c506:	2700      	movs	r7, #0
 800c508:	e7f2      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c50a:	4e3d      	ldr	r6, [pc, #244]	; (800c600 <UART_SetConfig+0x668>)
 800c50c:	2700      	movs	r7, #0
 800c50e:	e7ef      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c510:	4e3c      	ldr	r6, [pc, #240]	; (800c604 <UART_SetConfig+0x66c>)
 800c512:	2700      	movs	r7, #0
 800c514:	e7ec      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c516:	4e3c      	ldr	r6, [pc, #240]	; (800c608 <UART_SetConfig+0x670>)
 800c518:	2700      	movs	r7, #0
 800c51a:	e7e9      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c51c:	4e3b      	ldr	r6, [pc, #236]	; (800c60c <UART_SetConfig+0x674>)
 800c51e:	2700      	movs	r7, #0
 800c520:	e7e6      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c522:	4e3b      	ldr	r6, [pc, #236]	; (800c610 <UART_SetConfig+0x678>)
 800c524:	2700      	movs	r7, #0
 800c526:	e7e3      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c528:	4e3a      	ldr	r6, [pc, #232]	; (800c614 <UART_SetConfig+0x67c>)
 800c52a:	2700      	movs	r7, #0
 800c52c:	e7e0      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c52e:	4e3a      	ldr	r6, [pc, #232]	; (800c618 <UART_SetConfig+0x680>)
 800c530:	2700      	movs	r7, #0
 800c532:	e7dd      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c534:	4e39      	ldr	r6, [pc, #228]	; (800c61c <UART_SetConfig+0x684>)
 800c536:	2700      	movs	r7, #0
 800c538:	e7da      	b.n	800c4f0 <UART_SetConfig+0x558>
 800c53a:	4e39      	ldr	r6, [pc, #228]	; (800c620 <UART_SetConfig+0x688>)
 800c53c:	2700      	movs	r7, #0
 800c53e:	e7d7      	b.n	800c4f0 <UART_SetConfig+0x558>
            pclk = HAL_RCC_GetSysClockFreq();
 800c540:	f7ff fccc 	bl	800bedc <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c546:	2b00      	cmp	r3, #0
 800c548:	d01c      	beq.n	800c584 <UART_SetConfig+0x5ec>
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d02f      	beq.n	800c5ae <UART_SetConfig+0x616>
 800c54e:	2b02      	cmp	r3, #2
 800c550:	d068      	beq.n	800c624 <UART_SetConfig+0x68c>
 800c552:	2b03      	cmp	r3, #3
 800c554:	d069      	beq.n	800c62a <UART_SetConfig+0x692>
 800c556:	2b04      	cmp	r3, #4
 800c558:	d06a      	beq.n	800c630 <UART_SetConfig+0x698>
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	d06b      	beq.n	800c636 <UART_SetConfig+0x69e>
 800c55e:	2b06      	cmp	r3, #6
 800c560:	d06c      	beq.n	800c63c <UART_SetConfig+0x6a4>
 800c562:	2b07      	cmp	r3, #7
 800c564:	d06d      	beq.n	800c642 <UART_SetConfig+0x6aa>
 800c566:	2b08      	cmp	r3, #8
 800c568:	d06e      	beq.n	800c648 <UART_SetConfig+0x6b0>
 800c56a:	2b09      	cmp	r3, #9
 800c56c:	d06f      	beq.n	800c64e <UART_SetConfig+0x6b6>
 800c56e:	2b0a      	cmp	r3, #10
 800c570:	d070      	beq.n	800c654 <UART_SetConfig+0x6bc>
 800c572:	2b0b      	cmp	r3, #11
 800c574:	d002      	beq.n	800c57c <UART_SetConfig+0x5e4>
 800c576:	2201      	movs	r2, #1
 800c578:	2300      	movs	r3, #0
 800c57a:	e005      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c57c:	2280      	movs	r2, #128	; 0x80
 800c57e:	0052      	lsls	r2, r2, #1
 800c580:	2300      	movs	r3, #0
 800c582:	e001      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c584:	2201      	movs	r2, #1
 800c586:	2300      	movs	r3, #0
 800c588:	6865      	ldr	r5, [r4, #4]
 800c58a:	2100      	movs	r1, #0
 800c58c:	f004 ffd0 	bl	8011530 <__aeabi_uldivmod>
 800c590:	0e06      	lsrs	r6, r0, #24
 800c592:	020b      	lsls	r3, r1, #8
 800c594:	4333      	orrs	r3, r6
 800c596:	0202      	lsls	r2, r0, #8
 800c598:	0868      	lsrs	r0, r5, #1
 800c59a:	2100      	movs	r1, #0
 800c59c:	1880      	adds	r0, r0, r2
 800c59e:	4159      	adcs	r1, r3
 800c5a0:	002a      	movs	r2, r5
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f004 ffc4 	bl	8011530 <__aeabi_uldivmod>
 800c5a8:	0002      	movs	r2, r0
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	e758      	b.n	800c460 <UART_SetConfig+0x4c8>
 800c5ae:	2202      	movs	r2, #2
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e7e9      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c5b4:	00f42400 	.word	0x00f42400
 800c5b8:	0000f424 	.word	0x0000f424
 800c5bc:	007a1200 	.word	0x007a1200
 800c5c0:	003d0900 	.word	0x003d0900
 800c5c4:	0028b0aa 	.word	0x0028b0aa
 800c5c8:	001e8480 	.word	0x001e8480
 800c5cc:	00186a00 	.word	0x00186a00
 800c5d0:	00145855 	.word	0x00145855
 800c5d4:	000f4240 	.word	0x000f4240
 800c5d8:	0007a120 	.word	0x0007a120
 800c5dc:	0003d090 	.word	0x0003d090
 800c5e0:	0001e848 	.word	0x0001e848
 800c5e4:	00001555 	.word	0x00001555
 800c5e8:	00000ccc 	.word	0x00000ccc
 800c5ec:	00000aaa 	.word	0x00000aaa
 800c5f0:	000ffcff 	.word	0x000ffcff
 800c5f4:	fffffd00 	.word	0xfffffd00
 800c5f8:	f4240000 	.word	0xf4240000
 800c5fc:	7a120000 	.word	0x7a120000
 800c600:	3d090000 	.word	0x3d090000
 800c604:	28b0aa00 	.word	0x28b0aa00
 800c608:	1e848000 	.word	0x1e848000
 800c60c:	186a0000 	.word	0x186a0000
 800c610:	14585500 	.word	0x14585500
 800c614:	0f424000 	.word	0x0f424000
 800c618:	07a12000 	.word	0x07a12000
 800c61c:	03d09000 	.word	0x03d09000
 800c620:	01e84800 	.word	0x01e84800
 800c624:	2204      	movs	r2, #4
 800c626:	2300      	movs	r3, #0
 800c628:	e7ae      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c62a:	2206      	movs	r2, #6
 800c62c:	2300      	movs	r3, #0
 800c62e:	e7ab      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c630:	2208      	movs	r2, #8
 800c632:	2300      	movs	r3, #0
 800c634:	e7a8      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c636:	220a      	movs	r2, #10
 800c638:	2300      	movs	r3, #0
 800c63a:	e7a5      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c63c:	220c      	movs	r2, #12
 800c63e:	2300      	movs	r3, #0
 800c640:	e7a2      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c642:	2210      	movs	r2, #16
 800c644:	2300      	movs	r3, #0
 800c646:	e79f      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c648:	2220      	movs	r2, #32
 800c64a:	2300      	movs	r3, #0
 800c64c:	e79c      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c64e:	2240      	movs	r2, #64	; 0x40
 800c650:	2300      	movs	r3, #0
 800c652:	e799      	b.n	800c588 <UART_SetConfig+0x5f0>
 800c654:	2280      	movs	r2, #128	; 0x80
 800c656:	2300      	movs	r3, #0
 800c658:	e796      	b.n	800c588 <UART_SetConfig+0x5f0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c65a:	2680      	movs	r6, #128	; 0x80
 800c65c:	0236      	lsls	r6, r6, #8
 800c65e:	2700      	movs	r7, #0
 800c660:	e002      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c662:	2680      	movs	r6, #128	; 0x80
 800c664:	0436      	lsls	r6, r6, #16
 800c666:	2700      	movs	r7, #0
 800c668:	0850      	lsrs	r0, r2, #1
 800c66a:	2100      	movs	r1, #0
 800c66c:	1980      	adds	r0, r0, r6
 800c66e:	4179      	adcs	r1, r7
 800c670:	2300      	movs	r3, #0
 800c672:	f004 ff5d 	bl	8011530 <__aeabi_uldivmod>
 800c676:	0002      	movs	r2, r0
 800c678:	2000      	movs	r0, #0
 800c67a:	e6f1      	b.n	800c460 <UART_SetConfig+0x4c8>
 800c67c:	2680      	movs	r6, #128	; 0x80
 800c67e:	03f6      	lsls	r6, r6, #15
 800c680:	2700      	movs	r7, #0
 800c682:	e7f1      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c684:	2680      	movs	r6, #128	; 0x80
 800c686:	03b6      	lsls	r6, r6, #14
 800c688:	2700      	movs	r7, #0
 800c68a:	e7ed      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c68c:	4ea7      	ldr	r6, [pc, #668]	; (800c92c <UART_SetConfig+0x994>)
 800c68e:	2700      	movs	r7, #0
 800c690:	e7ea      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c692:	2680      	movs	r6, #128	; 0x80
 800c694:	0376      	lsls	r6, r6, #13
 800c696:	2700      	movs	r7, #0
 800c698:	e7e6      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c69a:	4ea5      	ldr	r6, [pc, #660]	; (800c930 <UART_SetConfig+0x998>)
 800c69c:	2700      	movs	r7, #0
 800c69e:	e7e3      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c6a0:	4ea4      	ldr	r6, [pc, #656]	; (800c934 <UART_SetConfig+0x99c>)
 800c6a2:	2700      	movs	r7, #0
 800c6a4:	e7e0      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c6a6:	2680      	movs	r6, #128	; 0x80
 800c6a8:	0336      	lsls	r6, r6, #12
 800c6aa:	2700      	movs	r7, #0
 800c6ac:	e7dc      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c6ae:	2680      	movs	r6, #128	; 0x80
 800c6b0:	02f6      	lsls	r6, r6, #11
 800c6b2:	2700      	movs	r7, #0
 800c6b4:	e7d8      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c6b6:	2680      	movs	r6, #128	; 0x80
 800c6b8:	02b6      	lsls	r6, r6, #10
 800c6ba:	2700      	movs	r7, #0
 800c6bc:	e7d4      	b.n	800c668 <UART_SetConfig+0x6d0>
 800c6be:	2680      	movs	r6, #128	; 0x80
 800c6c0:	0276      	lsls	r6, r6, #9
 800c6c2:	2700      	movs	r7, #0
 800c6c4:	e7d0      	b.n	800c668 <UART_SetConfig+0x6d0>
            ret = HAL_ERROR;
 800c6c6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	e6c9      	b.n	800c460 <UART_SetConfig+0x4c8>
    switch (clocksource)
 800c6cc:	2d02      	cmp	r5, #2
 800c6ce:	d100      	bne.n	800c6d2 <UART_SetConfig+0x73a>
 800c6d0:	e082      	b.n	800c7d8 <UART_SetConfig+0x840>
 800c6d2:	d92d      	bls.n	800c730 <UART_SetConfig+0x798>
 800c6d4:	2d04      	cmp	r5, #4
 800c6d6:	d100      	bne.n	800c6da <UART_SetConfig+0x742>
 800c6d8:	e0ba      	b.n	800c850 <UART_SetConfig+0x8b8>
 800c6da:	2d08      	cmp	r5, #8
 800c6dc:	d000      	beq.n	800c6e0 <UART_SetConfig+0x748>
 800c6de:	e122      	b.n	800c926 <UART_SetConfig+0x98e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d100      	bne.n	800c6e8 <UART_SetConfig+0x750>
 800c6e6:	e0f7      	b.n	800c8d8 <UART_SetConfig+0x940>
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d100      	bne.n	800c6ee <UART_SetConfig+0x756>
 800c6ec:	e100      	b.n	800c8f0 <UART_SetConfig+0x958>
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d100      	bne.n	800c6f4 <UART_SetConfig+0x75c>
 800c6f2:	e100      	b.n	800c8f6 <UART_SetConfig+0x95e>
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d100      	bne.n	800c6fa <UART_SetConfig+0x762>
 800c6f8:	e100      	b.n	800c8fc <UART_SetConfig+0x964>
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d100      	bne.n	800c700 <UART_SetConfig+0x768>
 800c6fe:	e0ff      	b.n	800c900 <UART_SetConfig+0x968>
 800c700:	2b05      	cmp	r3, #5
 800c702:	d100      	bne.n	800c706 <UART_SetConfig+0x76e>
 800c704:	e0ff      	b.n	800c906 <UART_SetConfig+0x96e>
 800c706:	2b06      	cmp	r3, #6
 800c708:	d100      	bne.n	800c70c <UART_SetConfig+0x774>
 800c70a:	e0fe      	b.n	800c90a <UART_SetConfig+0x972>
 800c70c:	2b07      	cmp	r3, #7
 800c70e:	d100      	bne.n	800c712 <UART_SetConfig+0x77a>
 800c710:	e0fd      	b.n	800c90e <UART_SetConfig+0x976>
 800c712:	2b08      	cmp	r3, #8
 800c714:	d100      	bne.n	800c718 <UART_SetConfig+0x780>
 800c716:	e0fd      	b.n	800c914 <UART_SetConfig+0x97c>
 800c718:	2b09      	cmp	r3, #9
 800c71a:	d100      	bne.n	800c71e <UART_SetConfig+0x786>
 800c71c:	e0fd      	b.n	800c91a <UART_SetConfig+0x982>
 800c71e:	2b0a      	cmp	r3, #10
 800c720:	d100      	bne.n	800c724 <UART_SetConfig+0x78c>
 800c722:	e0fd      	b.n	800c920 <UART_SetConfig+0x988>
 800c724:	2b0b      	cmp	r3, #11
 800c726:	d100      	bne.n	800c72a <UART_SetConfig+0x792>
 800c728:	e0d4      	b.n	800c8d4 <UART_SetConfig+0x93c>
 800c72a:	2380      	movs	r3, #128	; 0x80
 800c72c:	025b      	lsls	r3, r3, #9
 800c72e:	e0d5      	b.n	800c8dc <UART_SetConfig+0x944>
    switch (clocksource)
 800c730:	2d00      	cmp	r5, #0
 800c732:	d000      	beq.n	800c736 <UART_SetConfig+0x79e>
 800c734:	e0f7      	b.n	800c926 <UART_SetConfig+0x98e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c736:	f7ff fbbd 	bl	800beb4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d01a      	beq.n	800c776 <UART_SetConfig+0x7de>
 800c740:	2b01      	cmp	r3, #1
 800c742:	d035      	beq.n	800c7b0 <UART_SetConfig+0x818>
 800c744:	2b02      	cmp	r3, #2
 800c746:	d035      	beq.n	800c7b4 <UART_SetConfig+0x81c>
 800c748:	2b03      	cmp	r3, #3
 800c74a:	d035      	beq.n	800c7b8 <UART_SetConfig+0x820>
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d035      	beq.n	800c7bc <UART_SetConfig+0x824>
 800c750:	2b05      	cmp	r3, #5
 800c752:	d035      	beq.n	800c7c0 <UART_SetConfig+0x828>
 800c754:	2b06      	cmp	r3, #6
 800c756:	d035      	beq.n	800c7c4 <UART_SetConfig+0x82c>
 800c758:	2b07      	cmp	r3, #7
 800c75a:	d035      	beq.n	800c7c8 <UART_SetConfig+0x830>
 800c75c:	2b08      	cmp	r3, #8
 800c75e:	d035      	beq.n	800c7cc <UART_SetConfig+0x834>
 800c760:	2b09      	cmp	r3, #9
 800c762:	d035      	beq.n	800c7d0 <UART_SetConfig+0x838>
 800c764:	2b0a      	cmp	r3, #10
 800c766:	d035      	beq.n	800c7d4 <UART_SetConfig+0x83c>
 800c768:	2b0b      	cmp	r3, #11
 800c76a:	d001      	beq.n	800c770 <UART_SetConfig+0x7d8>
 800c76c:	2101      	movs	r1, #1
 800c76e:	e003      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c770:	2180      	movs	r1, #128	; 0x80
 800c772:	0049      	lsls	r1, r1, #1
 800c774:	e000      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c776:	2101      	movs	r1, #1
 800c778:	6865      	ldr	r5, [r4, #4]
 800c77a:	f004 fceb 	bl	8011154 <__udivsi3>
 800c77e:	0040      	lsls	r0, r0, #1
 800c780:	086b      	lsrs	r3, r5, #1
 800c782:	18c0      	adds	r0, r0, r3
 800c784:	0029      	movs	r1, r5
 800c786:	f004 fce5 	bl	8011154 <__udivsi3>
 800c78a:	0403      	lsls	r3, r0, #16
 800c78c:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c78e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c790:	4969      	ldr	r1, [pc, #420]	; (800c938 <UART_SetConfig+0x9a0>)
 800c792:	001a      	movs	r2, r3
 800c794:	3a10      	subs	r2, #16
 800c796:	428a      	cmp	r2, r1
 800c798:	d900      	bls.n	800c79c <UART_SetConfig+0x804>
 800c79a:	e1f4      	b.n	800cb86 <UART_SetConfig+0xbee>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c79c:	220f      	movs	r2, #15
 800c79e:	0019      	movs	r1, r3
 800c7a0:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7a2:	085b      	lsrs	r3, r3, #1
 800c7a4:	3a08      	subs	r2, #8
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 800c7aa:	6822      	ldr	r2, [r4, #0]
 800c7ac:	60d3      	str	r3, [r2, #12]
 800c7ae:	e11a      	b.n	800c9e6 <UART_SetConfig+0xa4e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7b0:	2102      	movs	r1, #2
 800c7b2:	e7e1      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7b4:	2104      	movs	r1, #4
 800c7b6:	e7df      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7b8:	2106      	movs	r1, #6
 800c7ba:	e7dd      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7bc:	2108      	movs	r1, #8
 800c7be:	e7db      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7c0:	210a      	movs	r1, #10
 800c7c2:	e7d9      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7c4:	210c      	movs	r1, #12
 800c7c6:	e7d7      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7c8:	2110      	movs	r1, #16
 800c7ca:	e7d5      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7cc:	2120      	movs	r1, #32
 800c7ce:	e7d3      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7d0:	2140      	movs	r1, #64	; 0x40
 800c7d2:	e7d1      	b.n	800c778 <UART_SetConfig+0x7e0>
 800c7d4:	2180      	movs	r1, #128	; 0x80
 800c7d6:	e7cf      	b.n	800c778 <UART_SetConfig+0x7e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d019      	beq.n	800c812 <UART_SetConfig+0x87a>
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d022      	beq.n	800c828 <UART_SetConfig+0x890>
 800c7e2:	2b02      	cmp	r3, #2
 800c7e4:	d022      	beq.n	800c82c <UART_SetConfig+0x894>
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d022      	beq.n	800c830 <UART_SetConfig+0x898>
 800c7ea:	2b04      	cmp	r3, #4
 800c7ec:	d022      	beq.n	800c834 <UART_SetConfig+0x89c>
 800c7ee:	2b05      	cmp	r3, #5
 800c7f0:	d022      	beq.n	800c838 <UART_SetConfig+0x8a0>
 800c7f2:	2b06      	cmp	r3, #6
 800c7f4:	d022      	beq.n	800c83c <UART_SetConfig+0x8a4>
 800c7f6:	2b07      	cmp	r3, #7
 800c7f8:	d022      	beq.n	800c840 <UART_SetConfig+0x8a8>
 800c7fa:	2b08      	cmp	r3, #8
 800c7fc:	d022      	beq.n	800c844 <UART_SetConfig+0x8ac>
 800c7fe:	2b09      	cmp	r3, #9
 800c800:	d022      	beq.n	800c848 <UART_SetConfig+0x8b0>
 800c802:	2b0a      	cmp	r3, #10
 800c804:	d022      	beq.n	800c84c <UART_SetConfig+0x8b4>
 800c806:	2b0b      	cmp	r3, #11
 800c808:	d001      	beq.n	800c80e <UART_SetConfig+0x876>
 800c80a:	4b4c      	ldr	r3, [pc, #304]	; (800c93c <UART_SetConfig+0x9a4>)
 800c80c:	e002      	b.n	800c814 <UART_SetConfig+0x87c>
 800c80e:	4b4c      	ldr	r3, [pc, #304]	; (800c940 <UART_SetConfig+0x9a8>)
 800c810:	e000      	b.n	800c814 <UART_SetConfig+0x87c>
 800c812:	4b4a      	ldr	r3, [pc, #296]	; (800c93c <UART_SetConfig+0x9a4>)
 800c814:	6862      	ldr	r2, [r4, #4]
 800c816:	0850      	lsrs	r0, r2, #1
 800c818:	18c0      	adds	r0, r0, r3
 800c81a:	0011      	movs	r1, r2
 800c81c:	f004 fc9a 	bl	8011154 <__udivsi3>
 800c820:	0403      	lsls	r3, r0, #16
 800c822:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c824:	2000      	movs	r0, #0
 800c826:	e7b3      	b.n	800c790 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c828:	4b46      	ldr	r3, [pc, #280]	; (800c944 <UART_SetConfig+0x9ac>)
 800c82a:	e7f3      	b.n	800c814 <UART_SetConfig+0x87c>
 800c82c:	4b46      	ldr	r3, [pc, #280]	; (800c948 <UART_SetConfig+0x9b0>)
 800c82e:	e7f1      	b.n	800c814 <UART_SetConfig+0x87c>
 800c830:	4b46      	ldr	r3, [pc, #280]	; (800c94c <UART_SetConfig+0x9b4>)
 800c832:	e7ef      	b.n	800c814 <UART_SetConfig+0x87c>
 800c834:	4b46      	ldr	r3, [pc, #280]	; (800c950 <UART_SetConfig+0x9b8>)
 800c836:	e7ed      	b.n	800c814 <UART_SetConfig+0x87c>
 800c838:	4b46      	ldr	r3, [pc, #280]	; (800c954 <UART_SetConfig+0x9bc>)
 800c83a:	e7eb      	b.n	800c814 <UART_SetConfig+0x87c>
 800c83c:	4b46      	ldr	r3, [pc, #280]	; (800c958 <UART_SetConfig+0x9c0>)
 800c83e:	e7e9      	b.n	800c814 <UART_SetConfig+0x87c>
 800c840:	4b46      	ldr	r3, [pc, #280]	; (800c95c <UART_SetConfig+0x9c4>)
 800c842:	e7e7      	b.n	800c814 <UART_SetConfig+0x87c>
 800c844:	4b46      	ldr	r3, [pc, #280]	; (800c960 <UART_SetConfig+0x9c8>)
 800c846:	e7e5      	b.n	800c814 <UART_SetConfig+0x87c>
 800c848:	4b46      	ldr	r3, [pc, #280]	; (800c964 <UART_SetConfig+0x9cc>)
 800c84a:	e7e3      	b.n	800c814 <UART_SetConfig+0x87c>
 800c84c:	4b46      	ldr	r3, [pc, #280]	; (800c968 <UART_SetConfig+0x9d0>)
 800c84e:	e7e1      	b.n	800c814 <UART_SetConfig+0x87c>
        pclk = HAL_RCC_GetSysClockFreq();
 800c850:	f7ff fb44 	bl	800bedc <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01a      	beq.n	800c890 <UART_SetConfig+0x8f8>
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d026      	beq.n	800c8ac <UART_SetConfig+0x914>
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d026      	beq.n	800c8b0 <UART_SetConfig+0x918>
 800c862:	2b03      	cmp	r3, #3
 800c864:	d026      	beq.n	800c8b4 <UART_SetConfig+0x91c>
 800c866:	2b04      	cmp	r3, #4
 800c868:	d026      	beq.n	800c8b8 <UART_SetConfig+0x920>
 800c86a:	2b05      	cmp	r3, #5
 800c86c:	d026      	beq.n	800c8bc <UART_SetConfig+0x924>
 800c86e:	2b06      	cmp	r3, #6
 800c870:	d026      	beq.n	800c8c0 <UART_SetConfig+0x928>
 800c872:	2b07      	cmp	r3, #7
 800c874:	d026      	beq.n	800c8c4 <UART_SetConfig+0x92c>
 800c876:	2b08      	cmp	r3, #8
 800c878:	d026      	beq.n	800c8c8 <UART_SetConfig+0x930>
 800c87a:	2b09      	cmp	r3, #9
 800c87c:	d026      	beq.n	800c8cc <UART_SetConfig+0x934>
 800c87e:	2b0a      	cmp	r3, #10
 800c880:	d026      	beq.n	800c8d0 <UART_SetConfig+0x938>
 800c882:	2b0b      	cmp	r3, #11
 800c884:	d001      	beq.n	800c88a <UART_SetConfig+0x8f2>
 800c886:	2101      	movs	r1, #1
 800c888:	e003      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c88a:	2180      	movs	r1, #128	; 0x80
 800c88c:	0049      	lsls	r1, r1, #1
 800c88e:	e000      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c890:	2101      	movs	r1, #1
 800c892:	6865      	ldr	r5, [r4, #4]
 800c894:	f004 fc5e 	bl	8011154 <__udivsi3>
 800c898:	0040      	lsls	r0, r0, #1
 800c89a:	086b      	lsrs	r3, r5, #1
 800c89c:	18c0      	adds	r0, r0, r3
 800c89e:	0029      	movs	r1, r5
 800c8a0:	f004 fc58 	bl	8011154 <__udivsi3>
 800c8a4:	0403      	lsls	r3, r0, #16
 800c8a6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8a8:	2000      	movs	r0, #0
 800c8aa:	e771      	b.n	800c790 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8ac:	2102      	movs	r1, #2
 800c8ae:	e7f0      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8b0:	2104      	movs	r1, #4
 800c8b2:	e7ee      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8b4:	2106      	movs	r1, #6
 800c8b6:	e7ec      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8b8:	2108      	movs	r1, #8
 800c8ba:	e7ea      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8bc:	210a      	movs	r1, #10
 800c8be:	e7e8      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8c0:	210c      	movs	r1, #12
 800c8c2:	e7e6      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8c4:	2110      	movs	r1, #16
 800c8c6:	e7e4      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8c8:	2120      	movs	r1, #32
 800c8ca:	e7e2      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8cc:	2140      	movs	r1, #64	; 0x40
 800c8ce:	e7e0      	b.n	800c892 <UART_SetConfig+0x8fa>
 800c8d0:	2180      	movs	r1, #128	; 0x80
 800c8d2:	e7de      	b.n	800c892 <UART_SetConfig+0x8fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8d4:	33f5      	adds	r3, #245	; 0xf5
 800c8d6:	e001      	b.n	800c8dc <UART_SetConfig+0x944>
 800c8d8:	2380      	movs	r3, #128	; 0x80
 800c8da:	025b      	lsls	r3, r3, #9
 800c8dc:	6862      	ldr	r2, [r4, #4]
 800c8de:	0850      	lsrs	r0, r2, #1
 800c8e0:	18c0      	adds	r0, r0, r3
 800c8e2:	0011      	movs	r1, r2
 800c8e4:	f004 fc36 	bl	8011154 <__udivsi3>
 800c8e8:	0403      	lsls	r3, r0, #16
 800c8ea:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	e74f      	b.n	800c790 <UART_SetConfig+0x7f8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8f0:	2380      	movs	r3, #128	; 0x80
 800c8f2:	021b      	lsls	r3, r3, #8
 800c8f4:	e7f2      	b.n	800c8dc <UART_SetConfig+0x944>
 800c8f6:	2380      	movs	r3, #128	; 0x80
 800c8f8:	01db      	lsls	r3, r3, #7
 800c8fa:	e7ef      	b.n	800c8dc <UART_SetConfig+0x944>
 800c8fc:	4b1b      	ldr	r3, [pc, #108]	; (800c96c <UART_SetConfig+0x9d4>)
 800c8fe:	e7ed      	b.n	800c8dc <UART_SetConfig+0x944>
 800c900:	2380      	movs	r3, #128	; 0x80
 800c902:	019b      	lsls	r3, r3, #6
 800c904:	e7ea      	b.n	800c8dc <UART_SetConfig+0x944>
 800c906:	4b1a      	ldr	r3, [pc, #104]	; (800c970 <UART_SetConfig+0x9d8>)
 800c908:	e7e8      	b.n	800c8dc <UART_SetConfig+0x944>
 800c90a:	4b1a      	ldr	r3, [pc, #104]	; (800c974 <UART_SetConfig+0x9dc>)
 800c90c:	e7e6      	b.n	800c8dc <UART_SetConfig+0x944>
 800c90e:	2380      	movs	r3, #128	; 0x80
 800c910:	015b      	lsls	r3, r3, #5
 800c912:	e7e3      	b.n	800c8dc <UART_SetConfig+0x944>
 800c914:	2380      	movs	r3, #128	; 0x80
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	e7e0      	b.n	800c8dc <UART_SetConfig+0x944>
 800c91a:	2380      	movs	r3, #128	; 0x80
 800c91c:	00db      	lsls	r3, r3, #3
 800c91e:	e7dd      	b.n	800c8dc <UART_SetConfig+0x944>
 800c920:	2380      	movs	r3, #128	; 0x80
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	e7da      	b.n	800c8dc <UART_SetConfig+0x944>
        ret = HAL_ERROR;
 800c926:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c928:	2300      	movs	r3, #0
 800c92a:	e731      	b.n	800c790 <UART_SetConfig+0x7f8>
 800c92c:	00155500 	.word	0x00155500
 800c930:	000ccc00 	.word	0x000ccc00
 800c934:	000aaa00 	.word	0x000aaa00
 800c938:	0000ffef 	.word	0x0000ffef
 800c93c:	01e84800 	.word	0x01e84800
 800c940:	0001e848 	.word	0x0001e848
 800c944:	00f42400 	.word	0x00f42400
 800c948:	007a1200 	.word	0x007a1200
 800c94c:	00516154 	.word	0x00516154
 800c950:	003d0900 	.word	0x003d0900
 800c954:	0030d400 	.word	0x0030d400
 800c958:	0028b0aa 	.word	0x0028b0aa
 800c95c:	001e8480 	.word	0x001e8480
 800c960:	000f4240 	.word	0x000f4240
 800c964:	0007a120 	.word	0x0007a120
 800c968:	0003d090 	.word	0x0003d090
 800c96c:	00002aaa 	.word	0x00002aaa
 800c970:	00001998 	.word	0x00001998
 800c974:	00001554 	.word	0x00001554
    switch (clocksource)
 800c978:	2d00      	cmp	r5, #0
 800c97a:	d000      	beq.n	800c97e <UART_SetConfig+0x9e6>
 800c97c:	e0f6      	b.n	800cb6c <UART_SetConfig+0xbd4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c97e:	f7ff fa99 	bl	800beb4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c984:	2b00      	cmp	r3, #0
 800c986:	d01a      	beq.n	800c9be <UART_SetConfig+0xa26>
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d035      	beq.n	800c9f8 <UART_SetConfig+0xa60>
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d035      	beq.n	800c9fc <UART_SetConfig+0xa64>
 800c990:	2b03      	cmp	r3, #3
 800c992:	d035      	beq.n	800ca00 <UART_SetConfig+0xa68>
 800c994:	2b04      	cmp	r3, #4
 800c996:	d035      	beq.n	800ca04 <UART_SetConfig+0xa6c>
 800c998:	2b05      	cmp	r3, #5
 800c99a:	d035      	beq.n	800ca08 <UART_SetConfig+0xa70>
 800c99c:	2b06      	cmp	r3, #6
 800c99e:	d035      	beq.n	800ca0c <UART_SetConfig+0xa74>
 800c9a0:	2b07      	cmp	r3, #7
 800c9a2:	d035      	beq.n	800ca10 <UART_SetConfig+0xa78>
 800c9a4:	2b08      	cmp	r3, #8
 800c9a6:	d035      	beq.n	800ca14 <UART_SetConfig+0xa7c>
 800c9a8:	2b09      	cmp	r3, #9
 800c9aa:	d035      	beq.n	800ca18 <UART_SetConfig+0xa80>
 800c9ac:	2b0a      	cmp	r3, #10
 800c9ae:	d035      	beq.n	800ca1c <UART_SetConfig+0xa84>
 800c9b0:	2b0b      	cmp	r3, #11
 800c9b2:	d001      	beq.n	800c9b8 <UART_SetConfig+0xa20>
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	e003      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800c9b8:	2180      	movs	r1, #128	; 0x80
 800c9ba:	0049      	lsls	r1, r1, #1
 800c9bc:	e000      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800c9be:	2101      	movs	r1, #1
 800c9c0:	6865      	ldr	r5, [r4, #4]
 800c9c2:	f004 fbc7 	bl	8011154 <__udivsi3>
 800c9c6:	086b      	lsrs	r3, r5, #1
 800c9c8:	18c0      	adds	r0, r0, r3
 800c9ca:	0029      	movs	r1, r5
 800c9cc:	f004 fbc2 	bl	8011154 <__udivsi3>
 800c9d0:	0403      	lsls	r3, r0, #16
 800c9d2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800c9d4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9d6:	496e      	ldr	r1, [pc, #440]	; (800cb90 <UART_SetConfig+0xbf8>)
 800c9d8:	001a      	movs	r2, r3
 800c9da:	3a10      	subs	r2, #16
 800c9dc:	428a      	cmp	r2, r1
 800c9de:	d900      	bls.n	800c9e2 <UART_SetConfig+0xa4a>
 800c9e0:	e0d3      	b.n	800cb8a <UART_SetConfig+0xbf2>
      huart->Instance->BRR = usartdiv;
 800c9e2:	6822      	ldr	r2, [r4, #0]
 800c9e4:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	226a      	movs	r2, #106	; 0x6a
 800c9ea:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800c9ec:	3a02      	subs	r2, #2
 800c9ee:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800c9f4:	6723      	str	r3, [r4, #112]	; 0x70
}
 800c9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9f8:	2102      	movs	r1, #2
 800c9fa:	e7e1      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800c9fc:	2104      	movs	r1, #4
 800c9fe:	e7df      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca00:	2106      	movs	r1, #6
 800ca02:	e7dd      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca04:	2108      	movs	r1, #8
 800ca06:	e7db      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca08:	210a      	movs	r1, #10
 800ca0a:	e7d9      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca0c:	210c      	movs	r1, #12
 800ca0e:	e7d7      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca10:	2110      	movs	r1, #16
 800ca12:	e7d5      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca14:	2120      	movs	r1, #32
 800ca16:	e7d3      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca18:	2140      	movs	r1, #64	; 0x40
 800ca1a:	e7d1      	b.n	800c9c0 <UART_SetConfig+0xa28>
 800ca1c:	2180      	movs	r1, #128	; 0x80
 800ca1e:	e7cf      	b.n	800c9c0 <UART_SetConfig+0xa28>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d019      	beq.n	800ca5a <UART_SetConfig+0xac2>
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d022      	beq.n	800ca70 <UART_SetConfig+0xad8>
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d022      	beq.n	800ca74 <UART_SetConfig+0xadc>
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d022      	beq.n	800ca78 <UART_SetConfig+0xae0>
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d022      	beq.n	800ca7c <UART_SetConfig+0xae4>
 800ca36:	2b05      	cmp	r3, #5
 800ca38:	d022      	beq.n	800ca80 <UART_SetConfig+0xae8>
 800ca3a:	2b06      	cmp	r3, #6
 800ca3c:	d022      	beq.n	800ca84 <UART_SetConfig+0xaec>
 800ca3e:	2b07      	cmp	r3, #7
 800ca40:	d022      	beq.n	800ca88 <UART_SetConfig+0xaf0>
 800ca42:	2b08      	cmp	r3, #8
 800ca44:	d022      	beq.n	800ca8c <UART_SetConfig+0xaf4>
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d022      	beq.n	800ca90 <UART_SetConfig+0xaf8>
 800ca4a:	2b0a      	cmp	r3, #10
 800ca4c:	d022      	beq.n	800ca94 <UART_SetConfig+0xafc>
 800ca4e:	2b0b      	cmp	r3, #11
 800ca50:	d001      	beq.n	800ca56 <UART_SetConfig+0xabe>
 800ca52:	4b50      	ldr	r3, [pc, #320]	; (800cb94 <UART_SetConfig+0xbfc>)
 800ca54:	e002      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca56:	4b50      	ldr	r3, [pc, #320]	; (800cb98 <UART_SetConfig+0xc00>)
 800ca58:	e000      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca5a:	4b4e      	ldr	r3, [pc, #312]	; (800cb94 <UART_SetConfig+0xbfc>)
 800ca5c:	6862      	ldr	r2, [r4, #4]
 800ca5e:	0850      	lsrs	r0, r2, #1
 800ca60:	18c0      	adds	r0, r0, r3
 800ca62:	0011      	movs	r1, r2
 800ca64:	f004 fb76 	bl	8011154 <__udivsi3>
 800ca68:	0403      	lsls	r3, r0, #16
 800ca6a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7b2      	b.n	800c9d6 <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca70:	4b4a      	ldr	r3, [pc, #296]	; (800cb9c <UART_SetConfig+0xc04>)
 800ca72:	e7f3      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca74:	4b4a      	ldr	r3, [pc, #296]	; (800cba0 <UART_SetConfig+0xc08>)
 800ca76:	e7f1      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca78:	4b4a      	ldr	r3, [pc, #296]	; (800cba4 <UART_SetConfig+0xc0c>)
 800ca7a:	e7ef      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca7c:	4b4a      	ldr	r3, [pc, #296]	; (800cba8 <UART_SetConfig+0xc10>)
 800ca7e:	e7ed      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca80:	4b4a      	ldr	r3, [pc, #296]	; (800cbac <UART_SetConfig+0xc14>)
 800ca82:	e7eb      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca84:	4b4a      	ldr	r3, [pc, #296]	; (800cbb0 <UART_SetConfig+0xc18>)
 800ca86:	e7e9      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca88:	4b4a      	ldr	r3, [pc, #296]	; (800cbb4 <UART_SetConfig+0xc1c>)
 800ca8a:	e7e7      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca8c:	4b4a      	ldr	r3, [pc, #296]	; (800cbb8 <UART_SetConfig+0xc20>)
 800ca8e:	e7e5      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca90:	4b4a      	ldr	r3, [pc, #296]	; (800cbbc <UART_SetConfig+0xc24>)
 800ca92:	e7e3      	b.n	800ca5c <UART_SetConfig+0xac4>
 800ca94:	4b4a      	ldr	r3, [pc, #296]	; (800cbc0 <UART_SetConfig+0xc28>)
 800ca96:	e7e1      	b.n	800ca5c <UART_SetConfig+0xac4>
        pclk = HAL_RCC_GetSysClockFreq();
 800ca98:	f7ff fa20 	bl	800bedc <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d01a      	beq.n	800cad8 <UART_SetConfig+0xb40>
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d025      	beq.n	800caf2 <UART_SetConfig+0xb5a>
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d025      	beq.n	800caf6 <UART_SetConfig+0xb5e>
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d025      	beq.n	800cafa <UART_SetConfig+0xb62>
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d025      	beq.n	800cafe <UART_SetConfig+0xb66>
 800cab2:	2b05      	cmp	r3, #5
 800cab4:	d025      	beq.n	800cb02 <UART_SetConfig+0xb6a>
 800cab6:	2b06      	cmp	r3, #6
 800cab8:	d025      	beq.n	800cb06 <UART_SetConfig+0xb6e>
 800caba:	2b07      	cmp	r3, #7
 800cabc:	d025      	beq.n	800cb0a <UART_SetConfig+0xb72>
 800cabe:	2b08      	cmp	r3, #8
 800cac0:	d025      	beq.n	800cb0e <UART_SetConfig+0xb76>
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	d025      	beq.n	800cb12 <UART_SetConfig+0xb7a>
 800cac6:	2b0a      	cmp	r3, #10
 800cac8:	d025      	beq.n	800cb16 <UART_SetConfig+0xb7e>
 800caca:	2b0b      	cmp	r3, #11
 800cacc:	d001      	beq.n	800cad2 <UART_SetConfig+0xb3a>
 800cace:	2101      	movs	r1, #1
 800cad0:	e003      	b.n	800cada <UART_SetConfig+0xb42>
 800cad2:	2180      	movs	r1, #128	; 0x80
 800cad4:	0049      	lsls	r1, r1, #1
 800cad6:	e000      	b.n	800cada <UART_SetConfig+0xb42>
 800cad8:	2101      	movs	r1, #1
 800cada:	6865      	ldr	r5, [r4, #4]
 800cadc:	f004 fb3a 	bl	8011154 <__udivsi3>
 800cae0:	086b      	lsrs	r3, r5, #1
 800cae2:	18c0      	adds	r0, r0, r3
 800cae4:	0029      	movs	r1, r5
 800cae6:	f004 fb35 	bl	8011154 <__udivsi3>
 800caea:	0403      	lsls	r3, r0, #16
 800caec:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800caee:	2000      	movs	r0, #0
 800caf0:	e771      	b.n	800c9d6 <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800caf2:	2102      	movs	r1, #2
 800caf4:	e7f1      	b.n	800cada <UART_SetConfig+0xb42>
 800caf6:	2104      	movs	r1, #4
 800caf8:	e7ef      	b.n	800cada <UART_SetConfig+0xb42>
 800cafa:	2106      	movs	r1, #6
 800cafc:	e7ed      	b.n	800cada <UART_SetConfig+0xb42>
 800cafe:	2108      	movs	r1, #8
 800cb00:	e7eb      	b.n	800cada <UART_SetConfig+0xb42>
 800cb02:	210a      	movs	r1, #10
 800cb04:	e7e9      	b.n	800cada <UART_SetConfig+0xb42>
 800cb06:	210c      	movs	r1, #12
 800cb08:	e7e7      	b.n	800cada <UART_SetConfig+0xb42>
 800cb0a:	2110      	movs	r1, #16
 800cb0c:	e7e5      	b.n	800cada <UART_SetConfig+0xb42>
 800cb0e:	2120      	movs	r1, #32
 800cb10:	e7e3      	b.n	800cada <UART_SetConfig+0xb42>
 800cb12:	2140      	movs	r1, #64	; 0x40
 800cb14:	e7e1      	b.n	800cada <UART_SetConfig+0xb42>
 800cb16:	2180      	movs	r1, #128	; 0x80
 800cb18:	e7df      	b.n	800cada <UART_SetConfig+0xb42>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb1a:	3375      	adds	r3, #117	; 0x75
 800cb1c:	e001      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb1e:	2380      	movs	r3, #128	; 0x80
 800cb20:	021b      	lsls	r3, r3, #8
 800cb22:	6862      	ldr	r2, [r4, #4]
 800cb24:	0850      	lsrs	r0, r2, #1
 800cb26:	18c0      	adds	r0, r0, r3
 800cb28:	0011      	movs	r1, r2
 800cb2a:	f004 fb13 	bl	8011154 <__udivsi3>
 800cb2e:	0403      	lsls	r3, r0, #16
 800cb30:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb32:	2000      	movs	r0, #0
 800cb34:	e74f      	b.n	800c9d6 <UART_SetConfig+0xa3e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb36:	2380      	movs	r3, #128	; 0x80
 800cb38:	01db      	lsls	r3, r3, #7
 800cb3a:	e7f2      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb3c:	2380      	movs	r3, #128	; 0x80
 800cb3e:	019b      	lsls	r3, r3, #6
 800cb40:	e7ef      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb42:	4b20      	ldr	r3, [pc, #128]	; (800cbc4 <UART_SetConfig+0xc2c>)
 800cb44:	e7ed      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb46:	2380      	movs	r3, #128	; 0x80
 800cb48:	015b      	lsls	r3, r3, #5
 800cb4a:	e7ea      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb4c:	4b1e      	ldr	r3, [pc, #120]	; (800cbc8 <UART_SetConfig+0xc30>)
 800cb4e:	e7e8      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb50:	4b1e      	ldr	r3, [pc, #120]	; (800cbcc <UART_SetConfig+0xc34>)
 800cb52:	e7e6      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb54:	2380      	movs	r3, #128	; 0x80
 800cb56:	011b      	lsls	r3, r3, #4
 800cb58:	e7e3      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb5a:	2380      	movs	r3, #128	; 0x80
 800cb5c:	00db      	lsls	r3, r3, #3
 800cb5e:	e7e0      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb60:	2380      	movs	r3, #128	; 0x80
 800cb62:	009b      	lsls	r3, r3, #2
 800cb64:	e7dd      	b.n	800cb22 <UART_SetConfig+0xb8a>
 800cb66:	2380      	movs	r3, #128	; 0x80
 800cb68:	005b      	lsls	r3, r3, #1
 800cb6a:	e7da      	b.n	800cb22 <UART_SetConfig+0xb8a>
        ret = HAL_ERROR;
 800cb6c:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e731      	b.n	800c9d6 <UART_SetConfig+0xa3e>
        ret = HAL_ERROR;
 800cb72:	2001      	movs	r0, #1
 800cb74:	e737      	b.n	800c9e6 <UART_SetConfig+0xa4e>
    if (lpuart_ker_ck_pres != 0U)
 800cb76:	2000      	movs	r0, #0
 800cb78:	e735      	b.n	800c9e6 <UART_SetConfig+0xa4e>
        ret = HAL_ERROR;
 800cb7a:	2001      	movs	r0, #1
 800cb7c:	e733      	b.n	800c9e6 <UART_SetConfig+0xa4e>
 800cb7e:	2001      	movs	r0, #1
 800cb80:	e731      	b.n	800c9e6 <UART_SetConfig+0xa4e>
          ret = HAL_ERROR;
 800cb82:	2001      	movs	r0, #1
 800cb84:	e72f      	b.n	800c9e6 <UART_SetConfig+0xa4e>
      ret = HAL_ERROR;
 800cb86:	2001      	movs	r0, #1
 800cb88:	e72d      	b.n	800c9e6 <UART_SetConfig+0xa4e>
      ret = HAL_ERROR;
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	e72b      	b.n	800c9e6 <UART_SetConfig+0xa4e>
 800cb8e:	46c0      	nop			; (mov r8, r8)
 800cb90:	0000ffef 	.word	0x0000ffef
 800cb94:	00f42400 	.word	0x00f42400
 800cb98:	0000f424 	.word	0x0000f424
 800cb9c:	007a1200 	.word	0x007a1200
 800cba0:	003d0900 	.word	0x003d0900
 800cba4:	0028b0aa 	.word	0x0028b0aa
 800cba8:	001e8480 	.word	0x001e8480
 800cbac:	00186a00 	.word	0x00186a00
 800cbb0:	00145855 	.word	0x00145855
 800cbb4:	000f4240 	.word	0x000f4240
 800cbb8:	0007a120 	.word	0x0007a120
 800cbbc:	0003d090 	.word	0x0003d090
 800cbc0:	0001e848 	.word	0x0001e848
 800cbc4:	00001555 	.word	0x00001555
 800cbc8:	00000ccc 	.word	0x00000ccc
 800cbcc:	00000aaa 	.word	0x00000aaa

0800cbd0 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800cbd0:	4770      	bx	lr

0800cbd2 <HAL_GPIO_EXTI_Rising_Callback>:
}
 800cbd2:	4770      	bx	lr

0800cbd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbd4:	b570      	push	{r4, r5, r6, lr}
 800cbd6:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cbd8:	2360      	movs	r3, #96	; 0x60
 800cbda:	5ac6      	ldrh	r6, [r0, r3]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbdc:	3324      	adds	r3, #36	; 0x24
 800cbde:	58c3      	ldr	r3, [r0, r3]
 800cbe0:	2b22      	cmp	r3, #34	; 0x22
 800cbe2:	d005      	beq.n	800cbf0 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cbe4:	6802      	ldr	r2, [r0, #0]
 800cbe6:	6993      	ldr	r3, [r2, #24]
 800cbe8:	2108      	movs	r1, #8
 800cbea:	430b      	orrs	r3, r1
 800cbec:	6193      	str	r3, [r2, #24]
  }
}
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cbf0:	3346      	adds	r3, #70	; 0x46
 800cbf2:	5ac5      	ldrh	r5, [r0, r3]
 800cbf4:	e001      	b.n	800cbfa <UART_RxISR_16BIT_FIFOEN+0x26>
 800cbf6:	3d01      	subs	r5, #1
 800cbf8:	b2ad      	uxth	r5, r5
 800cbfa:	2d00      	cmp	r5, #0
 800cbfc:	d023      	beq.n	800cc46 <UART_RxISR_16BIT_FIFOEN+0x72>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc02:	4033      	ands	r3, r6
 800cc04:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cc06:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800cc08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc0a:	3302      	adds	r3, #2
 800cc0c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cc0e:	225e      	movs	r2, #94	; 0x5e
 800cc10:	5aa3      	ldrh	r3, [r4, r2]
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	52a3      	strh	r3, [r4, r2]
      if (huart->RxXferCount == 0U)
 800cc18:	5aa3      	ldrh	r3, [r4, r2]
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1ea      	bne.n	800cbf6 <UART_RxISR_16BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc20:	6822      	ldr	r2, [r4, #0]
 800cc22:	6813      	ldr	r3, [r2, #0]
 800cc24:	4913      	ldr	r1, [pc, #76]	; (800cc74 <UART_RxISR_16BIT_FIFOEN+0xa0>)
 800cc26:	400b      	ands	r3, r1
 800cc28:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc2a:	6822      	ldr	r2, [r4, #0]
 800cc2c:	6893      	ldr	r3, [r2, #8]
 800cc2e:	4912      	ldr	r1, [pc, #72]	; (800cc78 <UART_RxISR_16BIT_FIFOEN+0xa4>)
 800cc30:	400b      	ands	r3, r1
 800cc32:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800cc34:	2384      	movs	r3, #132	; 0x84
 800cc36:	2220      	movs	r2, #32
 800cc38:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800cc3e:	0020      	movs	r0, r4
 800cc40:	f7fc fe70 	bl	8009924 <HAL_UART_RxCpltCallback>
 800cc44:	e7d7      	b.n	800cbf6 <UART_RxISR_16BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800cc46:	235e      	movs	r3, #94	; 0x5e
 800cc48:	5ae3      	ldrh	r3, [r4, r3]
 800cc4a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0ce      	beq.n	800cbee <UART_RxISR_16BIT_FIFOEN+0x1a>
 800cc50:	2268      	movs	r2, #104	; 0x68
 800cc52:	5aa2      	ldrh	r2, [r4, r2]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d9ca      	bls.n	800cbee <UART_RxISR_16BIT_FIFOEN+0x1a>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	6893      	ldr	r3, [r2, #8]
 800cc5c:	4907      	ldr	r1, [pc, #28]	; (800cc7c <UART_RxISR_16BIT_FIFOEN+0xa8>)
 800cc5e:	400b      	ands	r3, r1
 800cc60:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_16BIT;
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <UART_RxISR_16BIT_FIFOEN+0xac>)
 800cc64:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cc66:	6822      	ldr	r2, [r4, #0]
 800cc68:	6813      	ldr	r3, [r2, #0]
 800cc6a:	2120      	movs	r1, #32
 800cc6c:	430b      	orrs	r3, r1
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	e7bd      	b.n	800cbee <UART_RxISR_16BIT_FIFOEN+0x1a>
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	fffffeff 	.word	0xfffffeff
 800cc78:	effffffe 	.word	0xeffffffe
 800cc7c:	efffffff 	.word	0xefffffff
 800cc80:	0800cc85 	.word	0x0800cc85

0800cc84 <UART_RxISR_16BIT>:
{
 800cc84:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 800cc86:	2360      	movs	r3, #96	; 0x60
 800cc88:	5ac2      	ldrh	r2, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc8a:	3324      	adds	r3, #36	; 0x24
 800cc8c:	58c3      	ldr	r3, [r0, r3]
 800cc8e:	2b22      	cmp	r3, #34	; 0x22
 800cc90:	d005      	beq.n	800cc9e <UART_RxISR_16BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc92:	6802      	ldr	r2, [r0, #0]
 800cc94:	6993      	ldr	r3, [r2, #24]
 800cc96:	2108      	movs	r1, #8
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	6193      	str	r3, [r2, #24]
}
 800cc9c:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc9e:	6803      	ldr	r3, [r0, #0]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800cca2:	4013      	ands	r3, r2
 800cca4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cca6:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800cca8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ccaa:	3302      	adds	r3, #2
 800ccac:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800ccae:	225e      	movs	r2, #94	; 0x5e
 800ccb0:	5a83      	ldrh	r3, [r0, r2]
 800ccb2:	3b01      	subs	r3, #1
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800ccb8:	5a83      	ldrh	r3, [r0, r2]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1ed      	bne.n	800cc9c <UART_RxISR_16BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccc0:	6802      	ldr	r2, [r0, #0]
 800ccc2:	6813      	ldr	r3, [r2, #0]
 800ccc4:	4908      	ldr	r1, [pc, #32]	; (800cce8 <UART_RxISR_16BIT+0x64>)
 800ccc6:	400b      	ands	r3, r1
 800ccc8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccca:	6802      	ldr	r2, [r0, #0]
 800cccc:	6893      	ldr	r3, [r2, #8]
 800ccce:	3123      	adds	r1, #35	; 0x23
 800ccd0:	31ff      	adds	r1, #255	; 0xff
 800ccd2:	438b      	bics	r3, r1
 800ccd4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800ccd6:	2384      	movs	r3, #132	; 0x84
 800ccd8:	2220      	movs	r2, #32
 800ccda:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800cce0:	f7fc fe20 	bl	8009924 <HAL_UART_RxCpltCallback>
 800cce4:	e7da      	b.n	800cc9c <UART_RxISR_16BIT+0x18>
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	fffffedf 	.word	0xfffffedf

0800ccec <UART_RxISR_8BIT_FIFOEN>:
{
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	0004      	movs	r4, r0
  uint16_t  uhMask = huart->Mask;
 800ccf0:	2360      	movs	r3, #96	; 0x60
 800ccf2:	5ac5      	ldrh	r5, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccf4:	3324      	adds	r3, #36	; 0x24
 800ccf6:	58c3      	ldr	r3, [r0, r3]
 800ccf8:	2b22      	cmp	r3, #34	; 0x22
 800ccfa:	d005      	beq.n	800cd08 <UART_RxISR_8BIT_FIFOEN+0x1c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccfc:	6802      	ldr	r2, [r0, #0]
 800ccfe:	6993      	ldr	r3, [r2, #24]
 800cd00:	2108      	movs	r1, #8
 800cd02:	430b      	orrs	r3, r1
 800cd04:	6193      	str	r3, [r2, #24]
}
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800cd08:	3346      	adds	r3, #70	; 0x46
 800cd0a:	5ac6      	ldrh	r6, [r0, r3]
 800cd0c:	e001      	b.n	800cd12 <UART_RxISR_8BIT_FIFOEN+0x26>
 800cd0e:	3e01      	subs	r6, #1
 800cd10:	b2b6      	uxth	r6, r6
 800cd12:	2e00      	cmp	r6, #0
 800cd14:	d024      	beq.n	800cd60 <UART_RxISR_8BIT_FIFOEN+0x74>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cd1a:	b2ea      	uxtb	r2, r5
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800cd20:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800cd22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd24:	3301      	adds	r3, #1
 800cd26:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800cd28:	225e      	movs	r2, #94	; 0x5e
 800cd2a:	5aa3      	ldrh	r3, [r4, r2]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	52a3      	strh	r3, [r4, r2]
      if (huart->RxXferCount == 0U)
 800cd32:	5aa3      	ldrh	r3, [r4, r2]
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1e9      	bne.n	800cd0e <UART_RxISR_8BIT_FIFOEN+0x22>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd3a:	6822      	ldr	r2, [r4, #0]
 800cd3c:	6813      	ldr	r3, [r2, #0]
 800cd3e:	4913      	ldr	r1, [pc, #76]	; (800cd8c <UART_RxISR_8BIT_FIFOEN+0xa0>)
 800cd40:	400b      	ands	r3, r1
 800cd42:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd44:	6822      	ldr	r2, [r4, #0]
 800cd46:	6893      	ldr	r3, [r2, #8]
 800cd48:	4911      	ldr	r1, [pc, #68]	; (800cd90 <UART_RxISR_8BIT_FIFOEN+0xa4>)
 800cd4a:	400b      	ands	r3, r1
 800cd4c:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800cd4e:	2384      	movs	r3, #132	; 0x84
 800cd50:	2220      	movs	r2, #32
 800cd52:	50e2      	str	r2, [r4, r3]
        huart->RxISR = NULL;
 800cd54:	2300      	movs	r3, #0
 800cd56:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800cd58:	0020      	movs	r0, r4
 800cd5a:	f7fc fde3 	bl	8009924 <HAL_UART_RxCpltCallback>
 800cd5e:	e7d6      	b.n	800cd0e <UART_RxISR_8BIT_FIFOEN+0x22>
    rxdatacount = huart->RxXferCount;
 800cd60:	235e      	movs	r3, #94	; 0x5e
 800cd62:	5ae3      	ldrh	r3, [r4, r3]
 800cd64:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0cd      	beq.n	800cd06 <UART_RxISR_8BIT_FIFOEN+0x1a>
 800cd6a:	2268      	movs	r2, #104	; 0x68
 800cd6c:	5aa2      	ldrh	r2, [r4, r2]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d9c9      	bls.n	800cd06 <UART_RxISR_8BIT_FIFOEN+0x1a>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd72:	6822      	ldr	r2, [r4, #0]
 800cd74:	6893      	ldr	r3, [r2, #8]
 800cd76:	4907      	ldr	r1, [pc, #28]	; (800cd94 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 800cd78:	400b      	ands	r3, r1
 800cd7a:	6093      	str	r3, [r2, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800cd7c:	4b06      	ldr	r3, [pc, #24]	; (800cd98 <UART_RxISR_8BIT_FIFOEN+0xac>)
 800cd7e:	66e3      	str	r3, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd80:	6822      	ldr	r2, [r4, #0]
 800cd82:	6813      	ldr	r3, [r2, #0]
 800cd84:	2120      	movs	r1, #32
 800cd86:	430b      	orrs	r3, r1
 800cd88:	6013      	str	r3, [r2, #0]
 800cd8a:	e7bc      	b.n	800cd06 <UART_RxISR_8BIT_FIFOEN+0x1a>
 800cd8c:	fffffeff 	.word	0xfffffeff
 800cd90:	effffffe 	.word	0xeffffffe
 800cd94:	efffffff 	.word	0xefffffff
 800cd98:	0800cd9d 	.word	0x0800cd9d

0800cd9c <UART_RxISR_8BIT>:
{
 800cd9c:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 800cd9e:	2360      	movs	r3, #96	; 0x60
 800cda0:	5ac3      	ldrh	r3, [r0, r3]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cda2:	2284      	movs	r2, #132	; 0x84
 800cda4:	5882      	ldr	r2, [r0, r2]
 800cda6:	2a22      	cmp	r2, #34	; 0x22
 800cda8:	d005      	beq.n	800cdb6 <UART_RxISR_8BIT+0x1a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdaa:	6802      	ldr	r2, [r0, #0]
 800cdac:	6993      	ldr	r3, [r2, #24]
 800cdae:	2108      	movs	r1, #8
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	6193      	str	r3, [r2, #24]
}
 800cdb4:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdb6:	6802      	ldr	r2, [r0, #0]
 800cdb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800cdc0:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800cdc2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800cdc8:	225e      	movs	r2, #94	; 0x5e
 800cdca:	5a83      	ldrh	r3, [r0, r2]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800cdd2:	5a83      	ldrh	r3, [r0, r2]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1ec      	bne.n	800cdb4 <UART_RxISR_8BIT+0x18>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdda:	6802      	ldr	r2, [r0, #0]
 800cddc:	6813      	ldr	r3, [r2, #0]
 800cdde:	4908      	ldr	r1, [pc, #32]	; (800ce00 <UART_RxISR_8BIT+0x64>)
 800cde0:	400b      	ands	r3, r1
 800cde2:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cde4:	6802      	ldr	r2, [r0, #0]
 800cde6:	6893      	ldr	r3, [r2, #8]
 800cde8:	3123      	adds	r1, #35	; 0x23
 800cdea:	31ff      	adds	r1, #255	; 0xff
 800cdec:	438b      	bics	r3, r1
 800cdee:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800cdf0:	2384      	movs	r3, #132	; 0x84
 800cdf2:	2220      	movs	r2, #32
 800cdf4:	50c2      	str	r2, [r0, r3]
      huart->RxISR = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800cdfa:	f7fc fd93 	bl	8009924 <HAL_UART_RxCpltCallback>
 800cdfe:	e7d9      	b.n	800cdb4 <UART_RxISR_8BIT+0x18>
 800ce00:	fffffedf 	.word	0xfffffedf

0800ce04 <UART_EndTransmit_IT>:
{
 800ce04:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce06:	6802      	ldr	r2, [r0, #0]
 800ce08:	6813      	ldr	r3, [r2, #0]
 800ce0a:	2140      	movs	r1, #64	; 0x40
 800ce0c:	438b      	bics	r3, r1
 800ce0e:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800ce10:	2380      	movs	r3, #128	; 0x80
 800ce12:	2220      	movs	r2, #32
 800ce14:	50c2      	str	r2, [r0, r3]
  huart->TxISR = NULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	6703      	str	r3, [r0, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800ce1a:	f7fc fd6d 	bl	80098f8 <HAL_UART_TxCpltCallback>
}
 800ce1e:	bd10      	pop	{r4, pc}

0800ce20 <acc_service_get_next.constprop.77>:
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	46c6      	mov	lr, r8
 800ce24:	000e      	movs	r6, r1
 800ce26:	b500      	push	{lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	0005      	movs	r5, r0
 800ce2c:	f7fc fc1c 	bl	8009668 <acc_service_handle_valid>
 800ce30:	7eb4      	ldrb	r4, [r6, #26]
 800ce32:	2c00      	cmp	r4, #0
 800ce34:	d011      	beq.n	800ce5a <acc_service_get_next.constprop.77+0x3a>
 800ce36:	6873      	ldr	r3, [r6, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <acc_service_get_next.constprop.77+0x22>
 800ce3c:	68f3      	ldr	r3, [r6, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d115      	bne.n	800ce6e <acc_service_get_next.constprop.77+0x4e>
 800ce42:	4b24      	ldr	r3, [pc, #144]	; (800ced4 <acc_service_get_next.constprop.77+0xb4>)
 800ce44:	4a24      	ldr	r2, [pc, #144]	; (800ced8 <acc_service_get_next.constprop.77+0xb8>)
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	4924      	ldr	r1, [pc, #144]	; (800cedc <acc_service_get_next.constprop.77+0xbc>)
 800ce4a:	2000      	movs	r0, #0
 800ce4c:	4798      	blx	r3
 800ce4e:	2400      	movs	r4, #0
 800ce50:	0020      	movs	r0, r4
 800ce52:	b002      	add	sp, #8
 800ce54:	bc04      	pop	{r2}
 800ce56:	4690      	mov	r8, r2
 800ce58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce5a:	68b3      	ldr	r3, [r6, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d106      	bne.n	800ce6e <acc_service_get_next.constprop.77+0x4e>
 800ce60:	4b1c      	ldr	r3, [pc, #112]	; (800ced4 <acc_service_get_next.constprop.77+0xb4>)
 800ce62:	4a1f      	ldr	r2, [pc, #124]	; (800cee0 <acc_service_get_next.constprop.77+0xc0>)
 800ce64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce66:	491d      	ldr	r1, [pc, #116]	; (800cedc <acc_service_get_next.constprop.77+0xbc>)
 800ce68:	0020      	movs	r0, r4
 800ce6a:	4798      	blx	r3
 800ce6c:	e7f0      	b.n	800ce50 <acc_service_get_next.constprop.77+0x30>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d101      	bne.n	800ce76 <acc_service_get_next.constprop.77+0x56>
 800ce72:	2400      	movs	r4, #0
 800ce74:	e7ec      	b.n	800ce50 <acc_service_get_next.constprop.77+0x30>
 800ce76:	7a2b      	ldrb	r3, [r5, #8]
 800ce78:	7832      	ldrb	r2, [r6, #0]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d007      	beq.n	800ce8e <acc_service_get_next.constprop.77+0x6e>
 800ce7e:	9200      	str	r2, [sp, #0]
 800ce80:	4a14      	ldr	r2, [pc, #80]	; (800ced4 <acc_service_get_next.constprop.77+0xb4>)
 800ce82:	4916      	ldr	r1, [pc, #88]	; (800cedc <acc_service_get_next.constprop.77+0xbc>)
 800ce84:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800ce86:	2000      	movs	r0, #0
 800ce88:	4a16      	ldr	r2, [pc, #88]	; (800cee4 <acc_service_get_next.constprop.77+0xc4>)
 800ce8a:	47a0      	blx	r4
 800ce8c:	e7f1      	b.n	800ce72 <acc_service_get_next.constprop.77+0x52>
 800ce8e:	7e37      	ldrb	r7, [r6, #24]
 800ce90:	2f00      	cmp	r7, #0
 800ce92:	d004      	beq.n	800ce9e <acc_service_get_next.constprop.77+0x7e>
 800ce94:	0028      	movs	r0, r5
 800ce96:	f7fc fc6f 	bl	8009778 <acc_service_activate>
 800ce9a:	1e07      	subs	r7, r0, #0
 800ce9c:	d0e9      	beq.n	800ce72 <acc_service_get_next.constprop.77+0x52>
 800ce9e:	7a6b      	ldrb	r3, [r5, #9]
 800cea0:	4698      	mov	r8, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00c      	beq.n	800cec0 <acc_service_get_next.constprop.77+0xa0>
 800cea6:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <acc_service_get_next.constprop.77+0xb4>)
 800cea8:	4a0f      	ldr	r2, [pc, #60]	; (800cee8 <acc_service_get_next.constprop.77+0xc8>)
 800ceaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceac:	490b      	ldr	r1, [pc, #44]	; (800cedc <acc_service_get_next.constprop.77+0xbc>)
 800ceae:	2000      	movs	r0, #0
 800ceb0:	4798      	blx	r3
 800ceb2:	2400      	movs	r4, #0
 800ceb4:	2f00      	cmp	r7, #0
 800ceb6:	d0cb      	beq.n	800ce50 <acc_service_get_next.constprop.77+0x30>
 800ceb8:	0028      	movs	r0, r5
 800ceba:	f7fc fbed 	bl	8009698 <acc_service_deactivate>
 800cebe:	e7c7      	b.n	800ce50 <acc_service_get_next.constprop.77+0x30>
 800cec0:	2401      	movs	r4, #1
 800cec2:	692b      	ldr	r3, [r5, #16]
 800cec4:	616e      	str	r6, [r5, #20]
 800cec6:	cb05      	ldmia	r3!, {r0, r2}
 800cec8:	4790      	blx	r2
 800ceca:	7e73      	ldrb	r3, [r6, #25]
 800cecc:	405c      	eors	r4, r3
 800cece:	4643      	mov	r3, r8
 800ced0:	616b      	str	r3, [r5, #20]
 800ced2:	e7ef      	b.n	800ceb4 <acc_service_get_next.constprop.77+0x94>
 800ced4:	200005d8 	.word	0x200005d8
 800ced8:	0801ec3b 	.word	0x0801ec3b
 800cedc:	0801dd1a 	.word	0x0801dd1a
 800cee0:	0801ec58 	.word	0x0801ec58
 800cee4:	0801ec6d 	.word	0x0801ec6d
 800cee8:	0801ec89 	.word	0x0801ec89

0800ceec <Reg_regor.constprop.73>:
void Reg_regor(uint8_t reg, uint32_t orbits){
 800ceec:	b510      	push	{r4, lr}
 800ceee:	0004      	movs	r4, r0
	uint32_t flags = RegInt_getreg(reg); 
 800cef0:	2006      	movs	r0, #6
 800cef2:	f7fc fd57 	bl	80099a4 <RegInt_getreg>
	flags |= orbits;
 800cef6:	0001      	movs	r1, r0
	RegInt_setregf(reg, flags, 1);
 800cef8:	2201      	movs	r2, #1
	flags |= orbits;
 800cefa:	4321      	orrs	r1, r4
	RegInt_setregf(reg, flags, 1);
 800cefc:	2006      	movs	r0, #6
 800cefe:	f7fc fea7 	bl	8009c50 <RegInt_setregf>
}
 800cf02:	bd10      	pop	{r4, pc}

0800cf04 <acc_rss_integration_mem_calloc_debug.constprop.72>:
 800cf04:	b570      	push	{r4, r5, r6, lr}
 800cf06:	0005      	movs	r5, r0
 800cf08:	f7f7 f8fc 	bl	8004104 <acc_rss_integration_mem_alloc_debug>
 800cf0c:	1e04      	subs	r4, r0, #0
 800cf0e:	d003      	beq.n	800cf18 <acc_rss_integration_mem_calloc_debug.constprop.72+0x14>
 800cf10:	002a      	movs	r2, r5
 800cf12:	2100      	movs	r1, #0
 800cf14:	f006 fe94 	bl	8013c40 <memset>
 800cf18:	0020      	movs	r0, r4
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}

0800cf1c <internal_buffer_processed_read.constprop.29>:
 800cf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf1e:	46de      	mov	lr, fp
 800cf20:	464e      	mov	r6, r9
 800cf22:	4645      	mov	r5, r8
 800cf24:	4657      	mov	r7, sl
 800cf26:	b5e0      	push	{r5, r6, r7, lr}
 800cf28:	4b24      	ldr	r3, [pc, #144]	; (800cfbc <internal_buffer_processed_read.constprop.29+0xa0>)
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	9001      	str	r0, [sp, #4]
 800cf2e:	4688      	mov	r8, r1
 800cf30:	0017      	movs	r7, r2
 800cf32:	2100      	movs	r1, #0
 800cf34:	2206      	movs	r2, #6
 800cf36:	a802      	add	r0, sp, #8
 800cf38:	685e      	ldr	r6, [r3, #4]
 800cf3a:	f006 fe81 	bl	8013c40 <memset>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	4699      	mov	r9, r3
 800cf42:	3301      	adds	r3, #1
 800cf44:	4645      	mov	r5, r8
 800cf46:	469b      	mov	fp, r3
 800cf48:	0876      	lsrs	r6, r6, #1
 800cf4a:	3e03      	subs	r6, #3
 800cf4c:	2f00      	cmp	r7, #0
 800cf4e:	d108      	bne.n	800cf62 <internal_buffer_processed_read.constprop.29+0x46>
 800cf50:	4640      	mov	r0, r8
 800cf52:	3006      	adds	r0, #6
 800cf54:	b005      	add	sp, #20
 800cf56:	bc3c      	pop	{r2, r3, r4, r5}
 800cf58:	4690      	mov	r8, r2
 800cf5a:	4699      	mov	r9, r3
 800cf5c:	46a2      	mov	sl, r4
 800cf5e:	46ab      	mov	fp, r5
 800cf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf62:	0034      	movs	r4, r6
 800cf64:	42be      	cmp	r6, r7
 800cf66:	d900      	bls.n	800cf6a <internal_buffer_processed_read.constprop.29+0x4e>
 800cf68:	003c      	movs	r4, r7
 800cf6a:	42be      	cmp	r6, r7
 800cf6c:	d202      	bcs.n	800cf74 <internal_buffer_processed_read.constprop.29+0x58>
 800cf6e:	465b      	mov	r3, fp
 800cf70:	421c      	tst	r4, r3
 800cf72:	d121      	bne.n	800cfb8 <internal_buffer_processed_read.constprop.29+0x9c>
 800cf74:	464a      	mov	r2, r9
 800cf76:	4b12      	ldr	r3, [pc, #72]	; (800cfc0 <internal_buffer_processed_read.constprop.29+0xa4>)
 800cf78:	0029      	movs	r1, r5
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	802b      	strh	r3, [r5, #0]
 800cf7e:	b2a3      	uxth	r3, r4
 800cf80:	469a      	mov	sl, r3
 800cf82:	3b01      	subs	r3, #1
 800cf84:	806b      	strh	r3, [r5, #2]
 800cf86:	2300      	movs	r3, #0
 800cf88:	1ce2      	adds	r2, r4, #3
 800cf8a:	80ab      	strh	r3, [r5, #4]
 800cf8c:	9801      	ldr	r0, [sp, #4]
 800cf8e:	465b      	mov	r3, fp
 800cf90:	f7f8 f97a 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 800cf94:	a902      	add	r1, sp, #8
 800cf96:	2206      	movs	r2, #6
 800cf98:	0028      	movs	r0, r5
 800cf9a:	f009 fb6f 	bl	801667c <memcpy>
 800cf9e:	464b      	mov	r3, r9
 800cfa0:	1b3f      	subs	r7, r7, r4
 800cfa2:	0064      	lsls	r4, r4, #1
 800cfa4:	4453      	add	r3, sl
 800cfa6:	192d      	adds	r5, r5, r4
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	2206      	movs	r2, #6
 800cfac:	0029      	movs	r1, r5
 800cfae:	a802      	add	r0, sp, #8
 800cfb0:	4699      	mov	r9, r3
 800cfb2:	f009 fb63 	bl	801667c <memcpy>
 800cfb6:	e7c9      	b.n	800cf4c <internal_buffer_processed_read.constprop.29+0x30>
 800cfb8:	3c01      	subs	r4, #1
 800cfba:	e7d8      	b.n	800cf6e <internal_buffer_processed_read.constprop.29+0x52>
 800cfbc:	200005d8 	.word	0x200005d8
 800cfc0:	ffff8000 	.word	0xffff8000

0800cfc4 <acc_sensor_reg_write>:
 800cfc4:	2380      	movs	r3, #128	; 0x80
 800cfc6:	b513      	push	{r0, r1, r4, lr}
 800cfc8:	015b      	lsls	r3, r3, #5
 800cfca:	ac01      	add	r4, sp, #4
 800cfcc:	4319      	orrs	r1, r3
 800cfce:	8021      	strh	r1, [r4, #0]
 800cfd0:	8062      	strh	r2, [r4, #2]
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	0021      	movs	r1, r4
 800cfd8:	f7f8 f956 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 800cfdc:	bd13      	pop	{r0, r1, r4, pc}

0800cfde <acc_diagnostic_log_data_i16.constprop.19>:
 800cfde:	4770      	bx	lr

0800cfe0 <acc_confprogram_live_patch.constprop.15>:
 800cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfe2:	4645      	mov	r5, r8
 800cfe4:	46de      	mov	lr, fp
 800cfe6:	464e      	mov	r6, r9
 800cfe8:	4657      	mov	r7, sl
 800cfea:	b5e0      	push	{r5, r6, r7, lr}
 800cfec:	001d      	movs	r5, r3
 800cfee:	4b4c      	ldr	r3, [pc, #304]	; (800d120 <acc_confprogram_live_patch.constprop.15+0x140>)
 800cff0:	0016      	movs	r6, r2
 800cff2:	001a      	movs	r2, r3
 800cff4:	3230      	adds	r2, #48	; 0x30
 800cff6:	7812      	ldrb	r2, [r2, #0]
 800cff8:	b08b      	sub	sp, #44	; 0x2c
 800cffa:	4680      	mov	r8, r0
 800cffc:	468b      	mov	fp, r1
 800cffe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800d000:	2a03      	cmp	r2, #3
 800d002:	d906      	bls.n	800d012 <acc_confprogram_live_patch.constprop.15+0x32>
 800d004:	9400      	str	r4, [sp, #0]
 800d006:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800d008:	4a46      	ldr	r2, [pc, #280]	; (800d124 <acc_confprogram_live_patch.constprop.15+0x144>)
 800d00a:	002b      	movs	r3, r5
 800d00c:	4946      	ldr	r1, [pc, #280]	; (800d128 <acc_confprogram_live_patch.constprop.15+0x148>)
 800d00e:	2004      	movs	r0, #4
 800d010:	47b8      	blx	r7
 800d012:	0023      	movs	r3, r4
 800d014:	1e5a      	subs	r2, r3, #1
 800d016:	4193      	sbcs	r3, r2
 800d018:	00ed      	lsls	r5, r5, #3
 800d01a:	1976      	adds	r6, r6, r5
 800d01c:	2500      	movs	r5, #0
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	9305      	str	r3, [sp, #20]
 800d022:	8873      	ldrh	r3, [r6, #2]
 800d024:	429d      	cmp	r5, r3
 800d026:	d306      	bcc.n	800d036 <acc_confprogram_live_patch.constprop.15+0x56>
 800d028:	b00b      	add	sp, #44	; 0x2c
 800d02a:	bc3c      	pop	{r2, r3, r4, r5}
 800d02c:	4690      	mov	r8, r2
 800d02e:	4699      	mov	r9, r3
 800d030:	46a2      	mov	sl, r4
 800d032:	46ab      	mov	fp, r5
 800d034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d036:	2206      	movs	r2, #6
 800d038:	6873      	ldr	r3, [r6, #4]
 800d03a:	436a      	muls	r2, r5
 800d03c:	469c      	mov	ip, r3
 800d03e:	4462      	add	r2, ip
 800d040:	7810      	ldrb	r0, [r2, #0]
 800d042:	2801      	cmp	r0, #1
 800d044:	d059      	beq.n	800d0fa <acc_confprogram_live_patch.constprop.15+0x11a>
 800d046:	2800      	cmp	r0, #0
 800d048:	d00b      	beq.n	800d062 <acc_confprogram_live_patch.constprop.15+0x82>
 800d04a:	2802      	cmp	r0, #2
 800d04c:	d05e      	beq.n	800d10c <acc_confprogram_live_patch.constprop.15+0x12c>
 800d04e:	4b34      	ldr	r3, [pc, #208]	; (800d120 <acc_confprogram_live_patch.constprop.15+0x140>)
 800d050:	4935      	ldr	r1, [pc, #212]	; (800d128 <acc_confprogram_live_patch.constprop.15+0x148>)
 800d052:	2000      	movs	r0, #0
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	4a35      	ldr	r2, [pc, #212]	; (800d12c <acc_confprogram_live_patch.constprop.15+0x14c>)
 800d058:	4798      	blx	r3
 800d05a:	21e7      	movs	r1, #231	; 0xe7
 800d05c:	4834      	ldr	r0, [pc, #208]	; (800d130 <acc_confprogram_live_patch.constprop.15+0x150>)
 800d05e:	f7f6 fd9b 	bl	8003b98 <acc_assert_fail>
 800d062:	8853      	ldrh	r3, [r2, #2]
 800d064:	4699      	mov	r9, r3
 800d066:	7913      	ldrb	r3, [r2, #4]
 800d068:	9303      	str	r3, [sp, #12]
 800d06a:	7953      	ldrb	r3, [r2, #5]
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	2301      	movs	r3, #1
 800d070:	9a04      	ldr	r2, [sp, #16]
 800d072:	469a      	mov	sl, r3
 800d074:	4093      	lsls	r3, r2
 800d076:	429c      	cmp	r4, r3
 800d078:	d30c      	bcc.n	800d094 <acc_confprogram_live_patch.constprop.15+0xb4>
 800d07a:	3b01      	subs	r3, #1
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	4b28      	ldr	r3, [pc, #160]	; (800d120 <acc_confprogram_live_patch.constprop.15+0x140>)
 800d080:	9400      	str	r4, [sp, #0]
 800d082:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d084:	4928      	ldr	r1, [pc, #160]	; (800d128 <acc_confprogram_live_patch.constprop.15+0x148>)
 800d086:	464b      	mov	r3, r9
 800d088:	4a2a      	ldr	r2, [pc, #168]	; (800d134 <acc_confprogram_live_patch.constprop.15+0x154>)
 800d08a:	47a0      	blx	r4
 800d08c:	2129      	movs	r1, #41	; 0x29
 800d08e:	4828      	ldr	r0, [pc, #160]	; (800d130 <acc_confprogram_live_patch.constprop.15+0x150>)
 800d090:	f7f6 fd82 	bl	8003b98 <acc_assert_fail>
 800d094:	464a      	mov	r2, r9
 800d096:	4b28      	ldr	r3, [pc, #160]	; (800d138 <acc_confprogram_live_patch.constprop.15+0x158>)
 800d098:	af07      	add	r7, sp, #28
 800d09a:	4313      	orrs	r3, r2
 800d09c:	803b      	strh	r3, [r7, #0]
 800d09e:	4653      	mov	r3, sl
 800d0a0:	0001      	movs	r1, r0
 800d0a2:	80b8      	strh	r0, [r7, #4]
 800d0a4:	a804      	add	r0, sp, #16
 800d0a6:	4684      	mov	ip, r0
 800d0a8:	807b      	strh	r3, [r7, #2]
 800d0aa:	2312      	movs	r3, #18
 800d0ac:	4463      	add	r3, ip
 800d0ae:	2204      	movs	r2, #4
 800d0b0:	0018      	movs	r0, r3
 800d0b2:	f006 fdc5 	bl	8013c40 <memset>
 800d0b6:	4653      	mov	r3, sl
 800d0b8:	2205      	movs	r2, #5
 800d0ba:	0039      	movs	r1, r7
 800d0bc:	4640      	mov	r0, r8
 800d0be:	f7f8 f8e3 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 800d0c2:	aa04      	add	r2, sp, #16
 800d0c4:	4694      	mov	ip, r2
 800d0c6:	2312      	movs	r3, #18
 800d0c8:	4463      	add	r3, ip
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	a906      	add	r1, sp, #24
 800d0ce:	f7fe f921 	bl	800b314 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800d0d2:	2220      	movs	r2, #32
 800d0d4:	9b04      	ldr	r3, [sp, #16]
 800d0d6:	9903      	ldr	r1, [sp, #12]
 800d0d8:	1ad2      	subs	r2, r2, r3
 800d0da:	2301      	movs	r3, #1
 800d0dc:	425b      	negs	r3, r3
 800d0de:	40d3      	lsrs	r3, r2
 800d0e0:	9a03      	ldr	r2, [sp, #12]
 800d0e2:	4640      	mov	r0, r8
 800d0e4:	4093      	lsls	r3, r2
 800d0e6:	9a06      	ldr	r2, [sp, #24]
 800d0e8:	439a      	bics	r2, r3
 800d0ea:	0023      	movs	r3, r4
 800d0ec:	408b      	lsls	r3, r1
 800d0ee:	4649      	mov	r1, r9
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	f7f8 f8e7 	bl	80052c4 <acc_sensor_r2_conf_write_instr>
 800d0f6:	3501      	adds	r5, #1
 800d0f8:	e793      	b.n	800d022 <acc_confprogram_live_patch.constprop.15+0x42>
 800d0fa:	9905      	ldr	r1, [sp, #20]
 800d0fc:	8853      	ldrh	r3, [r2, #2]
 800d0fe:	4640      	mov	r0, r8
 800d100:	8892      	ldrh	r2, [r2, #4]
 800d102:	9100      	str	r1, [sp, #0]
 800d104:	4659      	mov	r1, fp
 800d106:	f7fe f90b 	bl	800b320 <acc_confprogram_modify_runif_sensor.constprop.18>
 800d10a:	e7f4      	b.n	800d0f6 <acc_confprogram_live_patch.constprop.15+0x116>
 800d10c:	4261      	negs	r1, r4
 800d10e:	4161      	adcs	r1, r4
 800d110:	8853      	ldrh	r3, [r2, #2]
 800d112:	4640      	mov	r0, r8
 800d114:	8892      	ldrh	r2, [r2, #4]
 800d116:	9100      	str	r1, [sp, #0]
 800d118:	4659      	mov	r1, fp
 800d11a:	f7fe f901 	bl	800b320 <acc_confprogram_modify_runif_sensor.constprop.18>
 800d11e:	e7ea      	b.n	800d0f6 <acc_confprogram_live_patch.constprop.15+0x116>
 800d120:	200005d8 	.word	0x200005d8
 800d124:	0801ec9f 	.word	0x0801ec9f
 800d128:	0801df99 	.word	0x0801df99
 800d12c:	0801ed2a 	.word	0x0801ed2a
 800d130:	0801ecf9 	.word	0x0801ecf9
 800d134:	0801ecc1 	.word	0x0801ecc1
 800d138:	ffffa000 	.word	0xffffa000

0800d13c <get_dt.constprop.9>:
 800d13c:	b510      	push	{r4, lr}
 800d13e:	f7f9 fc99 	bl	8006a74 <acc_rss_integration_get_sensor_reference_frequency>
 800d142:	1c01      	adds	r1, r0, #0
 800d144:	1c04      	adds	r4, r0, #0
 800d146:	4809      	ldr	r0, [pc, #36]	; (800d16c <get_dt.constprop.9+0x30>)
 800d148:	f003 fbc0 	bl	80108cc <__aeabi_fdiv>
 800d14c:	f006 ff6a 	bl	8014024 <roundf>
 800d150:	1c01      	adds	r1, r0, #0
 800d152:	1c20      	adds	r0, r4, #0
 800d154:	f003 fccc 	bl	8010af0 <__aeabi_fmul>
 800d158:	1c01      	adds	r1, r0, #0
 800d15a:	20fe      	movs	r0, #254	; 0xfe
 800d15c:	0580      	lsls	r0, r0, #22
 800d15e:	f003 fbb5 	bl	80108cc <__aeabi_fdiv>
 800d162:	4903      	ldr	r1, [pc, #12]	; (800d170 <get_dt.constprop.9+0x34>)
 800d164:	f003 fbb2 	bl	80108cc <__aeabi_fdiv>
 800d168:	bd10      	pop	{r4, pc}
 800d16a:	46c0      	nop			; (mov r8, r8)
 800d16c:	4f1502f9 	.word	0x4f1502f9
 800d170:	42f80000 	.word	0x42f80000

0800d174 <points_to_meter.constprop.8>:
 800d174:	b570      	push	{r4, r5, r6, lr}
 800d176:	0005      	movs	r5, r0
 800d178:	f7ff ffe0 	bl	800d13c <get_dt.constprop.9>
 800d17c:	1c04      	adds	r4, r0, #0
 800d17e:	0028      	movs	r0, r5
 800d180:	f004 fbcc 	bl	801191c <__aeabi_i2f>
 800d184:	1c21      	adds	r1, r4, #0
 800d186:	f003 fcb3 	bl	8010af0 <__aeabi_fmul>
 800d18a:	4904      	ldr	r1, [pc, #16]	; (800d19c <points_to_meter.constprop.8+0x28>)
 800d18c:	f003 fcb0 	bl	8010af0 <__aeabi_fmul>
 800d190:	21fc      	movs	r1, #252	; 0xfc
 800d192:	0589      	lsls	r1, r1, #22
 800d194:	f003 fcac 	bl	8010af0 <__aeabi_fmul>
 800d198:	bd70      	pop	{r4, r5, r6, pc}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	4d8ef3c2 	.word	0x4d8ef3c2

0800d1a0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800d1a4:	237c      	movs	r3, #124	; 0x7c
 800d1a6:	5cc3      	ldrb	r3, [r0, r3]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d01b      	beq.n	800d1e4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800d1ac:	257c      	movs	r5, #124	; 0x7c
 800d1ae:	2001      	movs	r0, #1
 800d1b0:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800d1b2:	2680      	movs	r6, #128	; 0x80
 800d1b4:	2324      	movs	r3, #36	; 0x24
 800d1b6:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1b8:	6823      	ldr	r3, [r4, #0]
 800d1ba:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	4382      	bics	r2, r0
 800d1c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	6893      	ldr	r3, [r2, #8]
 800d1c6:	4808      	ldr	r0, [pc, #32]	; (800d1e8 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 800d1c8:	4003      	ands	r3, r0
 800d1ca:	4319      	orrs	r1, r3
 800d1cc:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d1ce:	0020      	movs	r0, r4
 800d1d0:	f7fe f8d6 	bl	800b380 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1d4:	6823      	ldr	r3, [r4, #0]
 800d1d6:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d1d8:	2320      	movs	r3, #32
 800d1da:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800d1dc:	2300      	movs	r3, #0
 800d1de:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800d1e0:	2000      	movs	r0, #0
}
 800d1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800d1e4:	2002      	movs	r0, #2
 800d1e6:	e7fc      	b.n	800d1e2 <HAL_UARTEx_SetRxFifoThreshold+0x42>
 800d1e8:	f1ffffff 	.word	0xf1ffffff

0800d1ec <HAL_UARTEx_SetTxFifoThreshold>:
{
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 800d1f0:	237c      	movs	r3, #124	; 0x7c
 800d1f2:	5cc3      	ldrb	r3, [r0, r3]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	d01b      	beq.n	800d230 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800d1f8:	257c      	movs	r5, #124	; 0x7c
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800d1fe:	2680      	movs	r6, #128	; 0x80
 800d200:	2324      	movs	r3, #36	; 0x24
 800d202:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d204:	6823      	ldr	r3, [r4, #0]
 800d206:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	4382      	bics	r2, r0
 800d20c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d20e:	6822      	ldr	r2, [r4, #0]
 800d210:	6893      	ldr	r3, [r2, #8]
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	08db      	lsrs	r3, r3, #3
 800d216:	4319      	orrs	r1, r3
 800d218:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d21a:	0020      	movs	r0, r4
 800d21c:	f7fe f8b0 	bl	800b380 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d220:	6823      	ldr	r3, [r4, #0]
 800d222:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d224:	2320      	movs	r3, #32
 800d226:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800d228:	2300      	movs	r3, #0
 800d22a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800d22c:	2000      	movs	r0, #0
}
 800d22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800d230:	2002      	movs	r0, #2
 800d232:	e7fc      	b.n	800d22e <HAL_UARTEx_SetTxFifoThreshold+0x42>

0800d234 <HAL_UARTEx_DisableFifoMode>:
{
 800d234:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800d236:	237c      	movs	r3, #124	; 0x7c
 800d238:	5cc3      	ldrb	r3, [r0, r3]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d015      	beq.n	800d26a <HAL_UARTEx_DisableFifoMode+0x36>
 800d23e:	247c      	movs	r4, #124	; 0x7c
 800d240:	2601      	movs	r6, #1
 800d242:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 800d244:	2580      	movs	r5, #128	; 0x80
 800d246:	2324      	movs	r3, #36	; 0x24
 800d248:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d24a:	6802      	ldr	r2, [r0, #0]
 800d24c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d24e:	6811      	ldr	r1, [r2, #0]
 800d250:	43b1      	bics	r1, r6
 800d252:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d254:	4a06      	ldr	r2, [pc, #24]	; (800d270 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800d256:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d258:	2200      	movs	r2, #0
 800d25a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d25c:	6801      	ldr	r1, [r0, #0]
 800d25e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d260:	2320      	movs	r3, #32
 800d262:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800d264:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800d266:	2000      	movs	r0, #0
}
 800d268:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800d26a:	2002      	movs	r0, #2
 800d26c:	e7fc      	b.n	800d268 <HAL_UARTEx_DisableFifoMode+0x34>
 800d26e:	46c0      	nop			; (mov r8, r8)
 800d270:	dfffffff 	.word	0xdfffffff

0800d274 <HAL_UART_IRQHandler>:
{
 800d274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d276:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d278:	6801      	ldr	r1, [r0, #0]
 800d27a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d27c:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d27e:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800d280:	220f      	movs	r2, #15
 800d282:	401a      	ands	r2, r3
  if (errorflags == 0U)
 800d284:	d10b      	bne.n	800d29e <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d286:	069e      	lsls	r6, r3, #26
 800d288:	d509      	bpl.n	800d29e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d28a:	06ae      	lsls	r6, r5, #26
 800d28c:	d401      	bmi.n	800d292 <HAL_UART_IRQHandler+0x1e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d28e:	00c6      	lsls	r6, r0, #3
 800d290:	d505      	bpl.n	800d29e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800d292:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <HAL_UART_IRQHandler+0x28>
        huart->RxISR(huart);
 800d298:	0020      	movs	r0, r4
 800d29a:	4798      	blx	r3
}
 800d29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((errorflags != 0U)
 800d29e:	2a00      	cmp	r2, #0
 800d2a0:	d069      	beq.n	800d376 <HAL_UART_IRQHandler+0x102>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2a2:	4a44      	ldr	r2, [pc, #272]	; (800d3b4 <HAL_UART_IRQHandler+0x140>)
 800d2a4:	4002      	ands	r2, r0
 800d2a6:	d103      	bne.n	800d2b0 <HAL_UART_IRQHandler+0x3c>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800d2a8:	2690      	movs	r6, #144	; 0x90
 800d2aa:	0076      	lsls	r6, r6, #1
 800d2ac:	4235      	tst	r5, r6
 800d2ae:	d062      	beq.n	800d376 <HAL_UART_IRQHandler+0x102>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2b0:	07de      	lsls	r6, r3, #31
 800d2b2:	d507      	bpl.n	800d2c4 <HAL_UART_IRQHandler+0x50>
 800d2b4:	05ee      	lsls	r6, r5, #23
 800d2b6:	d505      	bpl.n	800d2c4 <HAL_UART_IRQHandler+0x50>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d2b8:	2701      	movs	r7, #1
 800d2ba:	620f      	str	r7, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d2bc:	2688      	movs	r6, #136	; 0x88
 800d2be:	59a1      	ldr	r1, [r4, r6]
 800d2c0:	4339      	orrs	r1, r7
 800d2c2:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2c4:	0799      	lsls	r1, r3, #30
 800d2c6:	d509      	bpl.n	800d2dc <HAL_UART_IRQHandler+0x68>
 800d2c8:	07c1      	lsls	r1, r0, #31
 800d2ca:	d507      	bpl.n	800d2dc <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d2cc:	6821      	ldr	r1, [r4, #0]
 800d2ce:	2602      	movs	r6, #2
 800d2d0:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d2d2:	3686      	adds	r6, #134	; 0x86
 800d2d4:	59a1      	ldr	r1, [r4, r6]
 800d2d6:	2704      	movs	r7, #4
 800d2d8:	4339      	orrs	r1, r7
 800d2da:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d2dc:	0759      	lsls	r1, r3, #29
 800d2de:	d509      	bpl.n	800d2f4 <HAL_UART_IRQHandler+0x80>
 800d2e0:	07c1      	lsls	r1, r0, #31
 800d2e2:	d507      	bpl.n	800d2f4 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2e4:	6821      	ldr	r1, [r4, #0]
 800d2e6:	2604      	movs	r6, #4
 800d2e8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2ea:	3684      	adds	r6, #132	; 0x84
 800d2ec:	59a1      	ldr	r1, [r4, r6]
 800d2ee:	2702      	movs	r7, #2
 800d2f0:	4339      	orrs	r1, r7
 800d2f2:	51a1      	str	r1, [r4, r6]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d2f4:	0719      	lsls	r1, r3, #28
 800d2f6:	d50a      	bpl.n	800d30e <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d2f8:	06a9      	lsls	r1, r5, #26
 800d2fa:	d401      	bmi.n	800d300 <HAL_UART_IRQHandler+0x8c>
 800d2fc:	2a00      	cmp	r2, #0
 800d2fe:	d006      	beq.n	800d30e <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d300:	6822      	ldr	r2, [r4, #0]
 800d302:	2608      	movs	r6, #8
 800d304:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d306:	2188      	movs	r1, #136	; 0x88
 800d308:	5862      	ldr	r2, [r4, r1]
 800d30a:	4332      	orrs	r2, r6
 800d30c:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d30e:	2288      	movs	r2, #136	; 0x88
 800d310:	58a2      	ldr	r2, [r4, r2]
 800d312:	2a00      	cmp	r2, #0
 800d314:	d0c2      	beq.n	800d29c <HAL_UART_IRQHandler+0x28>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d316:	069b      	lsls	r3, r3, #26
 800d318:	d508      	bpl.n	800d32c <HAL_UART_IRQHandler+0xb8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d31a:	06ab      	lsls	r3, r5, #26
 800d31c:	d401      	bmi.n	800d322 <HAL_UART_IRQHandler+0xae>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d31e:	00c3      	lsls	r3, r0, #3
 800d320:	d504      	bpl.n	800d32c <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 800d322:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 800d328:	0020      	movs	r0, r4
 800d32a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800d32c:	2388      	movs	r3, #136	; 0x88
 800d32e:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d330:	6823      	ldr	r3, [r4, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	065b      	lsls	r3, r3, #25
 800d336:	d401      	bmi.n	800d33c <HAL_UART_IRQHandler+0xc8>
 800d338:	0713      	lsls	r3, r2, #28
 800d33a:	d518      	bpl.n	800d36e <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800d33c:	0020      	movs	r0, r4
 800d33e:	f7fe f8f9 	bl	800b534 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	689a      	ldr	r2, [r3, #8]
 800d346:	0652      	lsls	r2, r2, #25
 800d348:	d5a8      	bpl.n	800d29c <HAL_UART_IRQHandler+0x28>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d34a:	689a      	ldr	r2, [r3, #8]
 800d34c:	2140      	movs	r1, #64	; 0x40
 800d34e:	438a      	bics	r2, r1
 800d350:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800d352:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d354:	2b00      	cmp	r3, #0
 800d356:	d0a1      	beq.n	800d29c <HAL_UART_IRQHandler+0x28>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d358:	4a17      	ldr	r2, [pc, #92]	; (800d3b8 <HAL_UART_IRQHandler+0x144>)
 800d35a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d35c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d35e:	f7fe faf5 	bl	800b94c <HAL_DMA_Abort_IT>
 800d362:	2800      	cmp	r0, #0
 800d364:	d09a      	beq.n	800d29c <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d366:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800d368:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d36a:	4798      	blx	r3
 800d36c:	e796      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d36e:	2388      	movs	r3, #136	; 0x88
 800d370:	2200      	movs	r2, #0
 800d372:	50e2      	str	r2, [r4, r3]
 800d374:	e792      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d376:	02da      	lsls	r2, r3, #11
 800d378:	d501      	bpl.n	800d37e <HAL_UART_IRQHandler+0x10a>
 800d37a:	0242      	lsls	r2, r0, #9
 800d37c:	d40c      	bmi.n	800d398 <HAL_UART_IRQHandler+0x124>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d37e:	061a      	lsls	r2, r3, #24
 800d380:	d50e      	bpl.n	800d3a0 <HAL_UART_IRQHandler+0x12c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d382:	062a      	lsls	r2, r5, #24
 800d384:	d401      	bmi.n	800d38a <HAL_UART_IRQHandler+0x116>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d386:	0202      	lsls	r2, r0, #8
 800d388:	d50a      	bpl.n	800d3a0 <HAL_UART_IRQHandler+0x12c>
    if (huart->TxISR != NULL)
 800d38a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d100      	bne.n	800d392 <HAL_UART_IRQHandler+0x11e>
 800d390:	e784      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
      huart->TxISR(huart);
 800d392:	0020      	movs	r0, r4
 800d394:	4798      	blx	r3
 800d396:	e781      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d398:	2380      	movs	r3, #128	; 0x80
 800d39a:	035b      	lsls	r3, r3, #13
 800d39c:	620b      	str	r3, [r1, #32]
 800d39e:	e77d      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3a0:	065b      	lsls	r3, r3, #25
 800d3a2:	d400      	bmi.n	800d3a6 <HAL_UART_IRQHandler+0x132>
 800d3a4:	e77a      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
 800d3a6:	066b      	lsls	r3, r5, #25
 800d3a8:	d400      	bmi.n	800d3ac <HAL_UART_IRQHandler+0x138>
 800d3aa:	e777      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
    UART_EndTransmit_IT(huart);
 800d3ac:	0020      	movs	r0, r4
 800d3ae:	f7ff fd29 	bl	800ce04 <UART_EndTransmit_IT>
 800d3b2:	e773      	b.n	800d29c <HAL_UART_IRQHandler+0x28>
 800d3b4:	10000001 	.word	0x10000001
 800d3b8:	0800b63f 	.word	0x0800b63f

0800d3bc <HAL_UART_Receive_IT>:
{
 800d3bc:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3be:	2384      	movs	r3, #132	; 0x84
 800d3c0:	58c3      	ldr	r3, [r0, r3]
 800d3c2:	2b20      	cmp	r3, #32
 800d3c4:	d000      	beq.n	800d3c8 <HAL_UART_Receive_IT+0xc>
 800d3c6:	e096      	b.n	800d4f6 <HAL_UART_Receive_IT+0x13a>
    if ((pData == NULL) || (Size == 0U))
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	d100      	bne.n	800d3ce <HAL_UART_Receive_IT+0x12>
 800d3cc:	e095      	b.n	800d4fa <HAL_UART_Receive_IT+0x13e>
 800d3ce:	2a00      	cmp	r2, #0
 800d3d0:	d100      	bne.n	800d3d4 <HAL_UART_Receive_IT+0x18>
 800d3d2:	e094      	b.n	800d4fe <HAL_UART_Receive_IT+0x142>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d3d4:	6883      	ldr	r3, [r0, #8]
 800d3d6:	2480      	movs	r4, #128	; 0x80
 800d3d8:	0164      	lsls	r4, r4, #5
 800d3da:	42a3      	cmp	r3, r4
 800d3dc:	d01b      	beq.n	800d416 <HAL_UART_Receive_IT+0x5a>
    __HAL_LOCK(huart);
 800d3de:	247c      	movs	r4, #124	; 0x7c
 800d3e0:	5d04      	ldrb	r4, [r0, r4]
 800d3e2:	2c01      	cmp	r4, #1
 800d3e4:	d100      	bne.n	800d3e8 <HAL_UART_Receive_IT+0x2c>
 800d3e6:	e08c      	b.n	800d502 <HAL_UART_Receive_IT+0x146>
 800d3e8:	247c      	movs	r4, #124	; 0x7c
 800d3ea:	2501      	movs	r5, #1
 800d3ec:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 800d3ee:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize  = Size;
 800d3f0:	215c      	movs	r1, #92	; 0x5c
 800d3f2:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 800d3f4:	3102      	adds	r1, #2
 800d3f6:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	66c1      	str	r1, [r0, #108]	; 0x6c
    UART_MASK_COMPUTATION(huart);
 800d3fc:	2180      	movs	r1, #128	; 0x80
 800d3fe:	0149      	lsls	r1, r1, #5
 800d400:	428b      	cmp	r3, r1
 800d402:	d00f      	beq.n	800d424 <HAL_UART_Receive_IT+0x68>
 800d404:	2b00      	cmp	r3, #0
 800d406:	d11c      	bne.n	800d442 <HAL_UART_Receive_IT+0x86>
 800d408:	6903      	ldr	r3, [r0, #16]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d115      	bne.n	800d43a <HAL_UART_Receive_IT+0x7e>
 800d40e:	3360      	adds	r3, #96	; 0x60
 800d410:	21ff      	movs	r1, #255	; 0xff
 800d412:	52c1      	strh	r1, [r0, r3]
 800d414:	e01c      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d416:	6904      	ldr	r4, [r0, #16]
 800d418:	2c00      	cmp	r4, #0
 800d41a:	d1e0      	bne.n	800d3de <HAL_UART_Receive_IT+0x22>
      if ((((uint32_t)pData) & 1U) != 0U)
 800d41c:	07cc      	lsls	r4, r1, #31
 800d41e:	d5de      	bpl.n	800d3de <HAL_UART_Receive_IT+0x22>
        return  HAL_ERROR;
 800d420:	2001      	movs	r0, #1
 800d422:	e069      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
    UART_MASK_COMPUTATION(huart);
 800d424:	6903      	ldr	r3, [r0, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d103      	bne.n	800d432 <HAL_UART_Receive_IT+0x76>
 800d42a:	3360      	adds	r3, #96	; 0x60
 800d42c:	4936      	ldr	r1, [pc, #216]	; (800d508 <HAL_UART_Receive_IT+0x14c>)
 800d42e:	52c1      	strh	r1, [r0, r3]
 800d430:	e00e      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
 800d432:	2360      	movs	r3, #96	; 0x60
 800d434:	21ff      	movs	r1, #255	; 0xff
 800d436:	52c1      	strh	r1, [r0, r3]
 800d438:	e00a      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
 800d43a:	2360      	movs	r3, #96	; 0x60
 800d43c:	217f      	movs	r1, #127	; 0x7f
 800d43e:	52c1      	strh	r1, [r0, r3]
 800d440:	e006      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
 800d442:	2180      	movs	r1, #128	; 0x80
 800d444:	0549      	lsls	r1, r1, #21
 800d446:	428b      	cmp	r3, r1
 800d448:	d023      	beq.n	800d492 <HAL_UART_Receive_IT+0xd6>
 800d44a:	2360      	movs	r3, #96	; 0x60
 800d44c:	2100      	movs	r1, #0
 800d44e:	52c1      	strh	r1, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d450:	2388      	movs	r3, #136	; 0x88
 800d452:	2100      	movs	r1, #0
 800d454:	50c1      	str	r1, [r0, r3]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d456:	3b04      	subs	r3, #4
 800d458:	3122      	adds	r1, #34	; 0x22
 800d45a:	50c1      	str	r1, [r0, r3]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d45c:	6801      	ldr	r1, [r0, #0]
 800d45e:	688b      	ldr	r3, [r1, #8]
 800d460:	2401      	movs	r4, #1
 800d462:	4323      	orrs	r3, r4
 800d464:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d466:	2380      	movs	r3, #128	; 0x80
 800d468:	059b      	lsls	r3, r3, #22
 800d46a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800d46c:	4299      	cmp	r1, r3
 800d46e:	d01b      	beq.n	800d4a8 <HAL_UART_Receive_IT+0xec>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d470:	2380      	movs	r3, #128	; 0x80
 800d472:	015b      	lsls	r3, r3, #5
 800d474:	6882      	ldr	r2, [r0, #8]
 800d476:	429a      	cmp	r2, r3
 800d478:	d037      	beq.n	800d4ea <HAL_UART_Receive_IT+0x12e>
        huart->RxISR = UART_RxISR_8BIT;
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <HAL_UART_Receive_IT+0x150>)
 800d47c:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800d47e:	237c      	movs	r3, #124	; 0x7c
 800d480:	2200      	movs	r2, #0
 800d482:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d484:	6802      	ldr	r2, [r0, #0]
 800d486:	6811      	ldr	r1, [r2, #0]
 800d488:	33a4      	adds	r3, #164	; 0xa4
 800d48a:	430b      	orrs	r3, r1
 800d48c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800d48e:	2000      	movs	r0, #0
 800d490:	e032      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
    UART_MASK_COMPUTATION(huart);
 800d492:	6903      	ldr	r3, [r0, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d103      	bne.n	800d4a0 <HAL_UART_Receive_IT+0xe4>
 800d498:	3360      	adds	r3, #96	; 0x60
 800d49a:	217f      	movs	r1, #127	; 0x7f
 800d49c:	52c1      	strh	r1, [r0, r3]
 800d49e:	e7d7      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
 800d4a0:	2360      	movs	r3, #96	; 0x60
 800d4a2:	213f      	movs	r1, #63	; 0x3f
 800d4a4:	52c1      	strh	r1, [r0, r3]
 800d4a6:	e7d3      	b.n	800d450 <HAL_UART_Receive_IT+0x94>
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d4a8:	2368      	movs	r3, #104	; 0x68
 800d4aa:	5ac3      	ldrh	r3, [r0, r3]
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d8df      	bhi.n	800d470 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4b0:	2380      	movs	r3, #128	; 0x80
 800d4b2:	015b      	lsls	r3, r3, #5
 800d4b4:	6882      	ldr	r2, [r0, #8]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d011      	beq.n	800d4de <HAL_UART_Receive_IT+0x122>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d4ba:	4b15      	ldr	r3, [pc, #84]	; (800d510 <HAL_UART_Receive_IT+0x154>)
 800d4bc:	66c3      	str	r3, [r0, #108]	; 0x6c
      __HAL_UNLOCK(huart);
 800d4be:	237c      	movs	r3, #124	; 0x7c
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4c4:	6802      	ldr	r2, [r0, #0]
 800d4c6:	6811      	ldr	r1, [r2, #0]
 800d4c8:	3384      	adds	r3, #132	; 0x84
 800d4ca:	430b      	orrs	r3, r1
 800d4cc:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d4ce:	6802      	ldr	r2, [r0, #0]
 800d4d0:	6891      	ldr	r1, [r2, #8]
 800d4d2:	2380      	movs	r3, #128	; 0x80
 800d4d4:	055b      	lsls	r3, r3, #21
 800d4d6:	430b      	orrs	r3, r1
 800d4d8:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800d4da:	2000      	movs	r0, #0
 800d4dc:	e00c      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4de:	6903      	ldr	r3, [r0, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d1ea      	bne.n	800d4ba <HAL_UART_Receive_IT+0xfe>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d4e4:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <HAL_UART_Receive_IT+0x158>)
 800d4e6:	66c3      	str	r3, [r0, #108]	; 0x6c
 800d4e8:	e7e9      	b.n	800d4be <HAL_UART_Receive_IT+0x102>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4ea:	6903      	ldr	r3, [r0, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1c4      	bne.n	800d47a <HAL_UART_Receive_IT+0xbe>
        huart->RxISR = UART_RxISR_16BIT;
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <HAL_UART_Receive_IT+0x15c>)
 800d4f2:	66c3      	str	r3, [r0, #108]	; 0x6c
 800d4f4:	e7c3      	b.n	800d47e <HAL_UART_Receive_IT+0xc2>
    return HAL_BUSY;
 800d4f6:	2002      	movs	r0, #2
}
 800d4f8:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800d4fa:	2001      	movs	r0, #1
 800d4fc:	e7fc      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
 800d4fe:	2001      	movs	r0, #1
 800d500:	e7fa      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
    __HAL_LOCK(huart);
 800d502:	2002      	movs	r0, #2
 800d504:	e7f8      	b.n	800d4f8 <HAL_UART_Receive_IT+0x13c>
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	000001ff 	.word	0x000001ff
 800d50c:	0800cd9d 	.word	0x0800cd9d
 800d510:	0800cced 	.word	0x0800cced
 800d514:	0800cbd5 	.word	0x0800cbd5
 800d518:	0800cc85 	.word	0x0800cc85

0800d51c <HAL_UART_Transmit_IT>:
{
 800d51c:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800d51e:	2380      	movs	r3, #128	; 0x80
 800d520:	58c3      	ldr	r3, [r0, r3]
 800d522:	2b20      	cmp	r3, #32
 800d524:	d154      	bne.n	800d5d0 <HAL_UART_Transmit_IT+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800d526:	2900      	cmp	r1, #0
 800d528:	d054      	beq.n	800d5d4 <HAL_UART_Transmit_IT+0xb8>
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d054      	beq.n	800d5d8 <HAL_UART_Transmit_IT+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d52e:	6883      	ldr	r3, [r0, #8]
 800d530:	2480      	movs	r4, #128	; 0x80
 800d532:	0164      	lsls	r4, r4, #5
 800d534:	42a3      	cmp	r3, r4
 800d536:	d027      	beq.n	800d588 <HAL_UART_Transmit_IT+0x6c>
    __HAL_LOCK(huart);
 800d538:	247c      	movs	r4, #124	; 0x7c
 800d53a:	5d04      	ldrb	r4, [r0, r4]
 800d53c:	2c01      	cmp	r4, #1
 800d53e:	d04d      	beq.n	800d5dc <HAL_UART_Transmit_IT+0xc0>
 800d540:	247c      	movs	r4, #124	; 0x7c
 800d542:	2501      	movs	r5, #1
 800d544:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 800d546:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d548:	2154      	movs	r1, #84	; 0x54
 800d54a:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 800d54c:	3102      	adds	r1, #2
 800d54e:	5242      	strh	r2, [r0, r1]
    huart->TxISR       = NULL;
 800d550:	2200      	movs	r2, #0
 800d552:	6702      	str	r2, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d554:	3132      	adds	r1, #50	; 0x32
 800d556:	5042      	str	r2, [r0, r1]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d558:	3280      	adds	r2, #128	; 0x80
 800d55a:	3967      	subs	r1, #103	; 0x67
 800d55c:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800d55e:	2280      	movs	r2, #128	; 0x80
 800d560:	0592      	lsls	r2, r2, #22
 800d562:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800d564:	4291      	cmp	r1, r2
 800d566:	d016      	beq.n	800d596 <HAL_UART_Transmit_IT+0x7a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d568:	2280      	movs	r2, #128	; 0x80
 800d56a:	0152      	lsls	r2, r2, #5
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d029      	beq.n	800d5c4 <HAL_UART_Transmit_IT+0xa8>
        huart->TxISR = UART_TxISR_8BIT;
 800d570:	4b1b      	ldr	r3, [pc, #108]	; (800d5e0 <HAL_UART_Transmit_IT+0xc4>)
 800d572:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800d574:	237c      	movs	r3, #124	; 0x7c
 800d576:	2200      	movs	r2, #0
 800d578:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800d57a:	6802      	ldr	r2, [r0, #0]
 800d57c:	6813      	ldr	r3, [r2, #0]
 800d57e:	2180      	movs	r1, #128	; 0x80
 800d580:	430b      	orrs	r3, r1
 800d582:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800d584:	2000      	movs	r0, #0
 800d586:	e024      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d588:	6904      	ldr	r4, [r0, #16]
 800d58a:	2c00      	cmp	r4, #0
 800d58c:	d1d4      	bne.n	800d538 <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800d58e:	07cc      	lsls	r4, r1, #31
 800d590:	d5d2      	bpl.n	800d538 <HAL_UART_Transmit_IT+0x1c>
        return  HAL_ERROR;
 800d592:	2001      	movs	r0, #1
 800d594:	e01d      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d596:	2280      	movs	r2, #128	; 0x80
 800d598:	0152      	lsls	r2, r2, #5
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d00c      	beq.n	800d5b8 <HAL_UART_Transmit_IT+0x9c>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800d59e:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <HAL_UART_Transmit_IT+0xc8>)
 800d5a0:	6703      	str	r3, [r0, #112]	; 0x70
      __HAL_UNLOCK(huart);
 800d5a2:	237c      	movs	r3, #124	; 0x7c
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	54c2      	strb	r2, [r0, r3]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800d5a8:	6802      	ldr	r2, [r0, #0]
 800d5aa:	6891      	ldr	r1, [r2, #8]
 800d5ac:	2380      	movs	r3, #128	; 0x80
 800d5ae:	041b      	lsls	r3, r3, #16
 800d5b0:	430b      	orrs	r3, r1
 800d5b2:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e00c      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5b8:	6903      	ldr	r3, [r0, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1ef      	bne.n	800d59e <HAL_UART_Transmit_IT+0x82>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800d5be:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <HAL_UART_Transmit_IT+0xcc>)
 800d5c0:	6703      	str	r3, [r0, #112]	; 0x70
 800d5c2:	e7ee      	b.n	800d5a2 <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c4:	6903      	ldr	r3, [r0, #16]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1d2      	bne.n	800d570 <HAL_UART_Transmit_IT+0x54>
        huart->TxISR = UART_TxISR_16BIT;
 800d5ca:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <HAL_UART_Transmit_IT+0xd0>)
 800d5cc:	6703      	str	r3, [r0, #112]	; 0x70
 800d5ce:	e7d1      	b.n	800d574 <HAL_UART_Transmit_IT+0x58>
    return HAL_BUSY;
 800d5d0:	2002      	movs	r0, #2
}
 800d5d2:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800d5d4:	2001      	movs	r0, #1
 800d5d6:	e7fc      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
 800d5d8:	2001      	movs	r0, #1
 800d5da:	e7fa      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
    __HAL_LOCK(huart);
 800d5dc:	2002      	movs	r0, #2
 800d5de:	e7f8      	b.n	800d5d2 <HAL_UART_Transmit_IT+0xb6>
 800d5e0:	0800b4f1 	.word	0x0800b4f1
 800d5e4:	0800b44d 	.word	0x0800b44d
 800d5e8:	0800b3eb 	.word	0x0800b3eb
 800d5ec:	0800b4a9 	.word	0x0800b4a9

0800d5f0 <HAL_UART_DeInit>:
{
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800d5f4:	d019      	beq.n	800d62a <HAL_UART_DeInit+0x3a>
  huart->gState = HAL_UART_STATE_BUSY;
 800d5f6:	2680      	movs	r6, #128	; 0x80
 800d5f8:	2324      	movs	r3, #36	; 0x24
 800d5fa:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 800d5fc:	6802      	ldr	r2, [r0, #0]
 800d5fe:	6813      	ldr	r3, [r2, #0]
 800d600:	2101      	movs	r1, #1
 800d602:	438b      	bics	r3, r1
 800d604:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800d606:	6803      	ldr	r3, [r0, #0]
 800d608:	2500      	movs	r5, #0
 800d60a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800d60c:	6803      	ldr	r3, [r0, #0]
 800d60e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800d610:	6803      	ldr	r3, [r0, #0]
 800d612:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800d614:	f7fd f868 	bl	800a6e8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d618:	2388      	movs	r3, #136	; 0x88
 800d61a:	50e5      	str	r5, [r4, r3]
  huart->gState = HAL_UART_STATE_RESET;
 800d61c:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 800d61e:	3b04      	subs	r3, #4
 800d620:	50e5      	str	r5, [r4, r3]
  __HAL_UNLOCK(huart);
 800d622:	3b08      	subs	r3, #8
 800d624:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 800d626:	2000      	movs	r0, #0
}
 800d628:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800d62a:	2001      	movs	r0, #1
 800d62c:	e7fc      	b.n	800d628 <HAL_UART_DeInit+0x38>

0800d62e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d62e:	b570      	push	{r4, r5, r6, lr}
 800d630:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d632:	d05e      	beq.n	800d6f2 <HAL_SPI_Init+0xc4>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d634:	2300      	movs	r3, #0
 800d636:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d638:	335d      	adds	r3, #93	; 0x5d
 800d63a:	5cc3      	ldrb	r3, [r0, r3]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d04c      	beq.n	800d6da <HAL_SPI_Init+0xac>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d640:	235d      	movs	r3, #93	; 0x5d
 800d642:	2202      	movs	r2, #2
 800d644:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d646:	6822      	ldr	r2, [r4, #0]
 800d648:	6813      	ldr	r3, [r2, #0]
 800d64a:	2140      	movs	r1, #64	; 0x40
 800d64c:	438b      	bics	r3, r1
 800d64e:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d650:	68e3      	ldr	r3, [r4, #12]
 800d652:	22e0      	movs	r2, #224	; 0xe0
 800d654:	00d2      	lsls	r2, r2, #3
 800d656:	4293      	cmp	r3, r2
 800d658:	d945      	bls.n	800d6e6 <HAL_SPI_Init+0xb8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d65a:	2100      	movs	r1, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d65c:	22f0      	movs	r2, #240	; 0xf0
 800d65e:	0112      	lsls	r2, r2, #4
 800d660:	4293      	cmp	r3, r2
 800d662:	d005      	beq.n	800d670 <HAL_SPI_Init+0x42>
 800d664:	22e0      	movs	r2, #224	; 0xe0
 800d666:	00d2      	lsls	r2, r2, #3
 800d668:	4293      	cmp	r3, r2
 800d66a:	d001      	beq.n	800d670 <HAL_SPI_Init+0x42>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d66c:	2200      	movs	r2, #0
 800d66e:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d670:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d672:	2a00      	cmp	r2, #0
 800d674:	d105      	bne.n	800d682 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d676:	22e0      	movs	r2, #224	; 0xe0
 800d678:	00d2      	lsls	r2, r2, #3
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d936      	bls.n	800d6ec <HAL_SPI_Init+0xbe>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d67e:	2302      	movs	r3, #2
 800d680:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	6863      	ldr	r3, [r4, #4]
 800d686:	68a0      	ldr	r0, [r4, #8]
 800d688:	4303      	orrs	r3, r0
 800d68a:	6920      	ldr	r0, [r4, #16]
 800d68c:	4303      	orrs	r3, r0
 800d68e:	6960      	ldr	r0, [r4, #20]
 800d690:	4303      	orrs	r3, r0
 800d692:	2080      	movs	r0, #128	; 0x80
 800d694:	0080      	lsls	r0, r0, #2
 800d696:	69a5      	ldr	r5, [r4, #24]
 800d698:	4028      	ands	r0, r5
 800d69a:	4303      	orrs	r3, r0
 800d69c:	69e0      	ldr	r0, [r4, #28]
 800d69e:	4303      	orrs	r3, r0
 800d6a0:	6a20      	ldr	r0, [r4, #32]
 800d6a2:	4303      	orrs	r3, r0
 800d6a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d6a6:	4303      	orrs	r3, r0
 800d6a8:	6013      	str	r3, [r2, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d6aa:	6822      	ldr	r2, [r4, #0]
 800d6ac:	8b60      	ldrh	r0, [r4, #26]
 800d6ae:	2304      	movs	r3, #4
 800d6b0:	4003      	ands	r3, r0
 800d6b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d6b4:	4303      	orrs	r3, r0
 800d6b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d6b8:	4303      	orrs	r3, r0
 800d6ba:	68e0      	ldr	r0, [r4, #12]
 800d6bc:	4303      	orrs	r3, r0
 800d6be:	430b      	orrs	r3, r1
 800d6c0:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6c2:	6822      	ldr	r2, [r4, #0]
 800d6c4:	69d3      	ldr	r3, [r2, #28]
 800d6c6:	490c      	ldr	r1, [pc, #48]	; (800d6f8 <HAL_SPI_Init+0xca>)
 800d6c8:	400b      	ands	r3, r1
 800d6ca:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d6d0:	335d      	adds	r3, #93	; 0x5d
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	54e2      	strb	r2, [r4, r3]

  return HAL_OK;
 800d6d6:	2000      	movs	r0, #0
}
 800d6d8:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800d6da:	335c      	adds	r3, #92	; 0x5c
 800d6dc:	2200      	movs	r2, #0
 800d6de:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 800d6e0:	f7fd f8cc 	bl	800a87c <HAL_SPI_MspInit>
 800d6e4:	e7ac      	b.n	800d640 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d6e6:	2180      	movs	r1, #128	; 0x80
 800d6e8:	0149      	lsls	r1, r1, #5
 800d6ea:	e7b7      	b.n	800d65c <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	6323      	str	r3, [r4, #48]	; 0x30
 800d6f0:	e7c7      	b.n	800d682 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 800d6f2:	2001      	movs	r0, #1
 800d6f4:	e7f0      	b.n	800d6d8 <HAL_SPI_Init+0xaa>
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	fffff7ff 	.word	0xfffff7ff

0800d6fc <HAL_RTCEx_WakeUpTimerIRQHandler>:
{
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	0004      	movs	r4, r0
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800d700:	6803      	ldr	r3, [r0, #0]
 800d702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d704:	0752      	lsls	r2, r2, #29
 800d706:	d403      	bmi.n	800d710 <HAL_RTCEx_WakeUpTimerIRQHandler+0x14>
  hrtc->State = HAL_RTC_STATE_READY;
 800d708:	2329      	movs	r3, #41	; 0x29
 800d70a:	2201      	movs	r2, #1
 800d70c:	54e2      	strb	r2, [r4, r3]
}
 800d70e:	bd10      	pop	{r4, pc}
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d710:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d712:	2104      	movs	r1, #4
 800d714:	430a      	orrs	r2, r1
 800d716:	65da      	str	r2, [r3, #92]	; 0x5c
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800d718:	f7fc ff88 	bl	800a62c <HAL_RTCEx_WakeUpTimerEventCallback>
 800d71c:	e7f4      	b.n	800d708 <HAL_RTCEx_WakeUpTimerIRQHandler+0xc>

0800d71e <HAL_RTC_AlarmIRQHandler>:
{
 800d71e:	b510      	push	{r4, lr}
 800d720:	0004      	movs	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800d722:	6803      	ldr	r3, [r0, #0]
 800d724:	699a      	ldr	r2, [r3, #24]
 800d726:	04d2      	lsls	r2, r2, #19
 800d728:	d502      	bpl.n	800d730 <HAL_RTC_AlarmIRQHandler+0x12>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800d72a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d72c:	07d2      	lsls	r2, r2, #31
 800d72e:	d40a      	bmi.n	800d746 <HAL_RTC_AlarmIRQHandler+0x28>
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	699a      	ldr	r2, [r3, #24]
 800d734:	0492      	lsls	r2, r2, #18
 800d736:	d502      	bpl.n	800d73e <HAL_RTC_AlarmIRQHandler+0x20>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800d738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d73a:	0792      	lsls	r2, r2, #30
 800d73c:	d40a      	bmi.n	800d754 <HAL_RTC_AlarmIRQHandler+0x36>
  hrtc->State = HAL_RTC_STATE_READY;
 800d73e:	2329      	movs	r3, #41	; 0x29
 800d740:	2201      	movs	r2, #1
 800d742:	54e2      	strb	r2, [r4, r3]
}
 800d744:	bd10      	pop	{r4, pc}
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d748:	2101      	movs	r1, #1
 800d74a:	430a      	orrs	r2, r1
 800d74c:	65da      	str	r2, [r3, #92]	; 0x5c
      HAL_RTC_AlarmAEventCallback(hrtc);
 800d74e:	f7fc ff73 	bl	800a638 <HAL_RTC_AlarmAEventCallback>
 800d752:	e7ed      	b.n	800d730 <HAL_RTC_AlarmIRQHandler+0x12>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800d754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d756:	2102      	movs	r1, #2
 800d758:	430a      	orrs	r2, r1
 800d75a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d75c:	e7ef      	b.n	800d73e <HAL_RTC_AlarmIRQHandler+0x20>

0800d75e <HAL_RTC_GetDate>:
{
 800d75e:	b570      	push	{r4, r5, r6, lr}
 800d760:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d762:	6803      	ldr	r3, [r0, #0]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	490f      	ldr	r1, [pc, #60]	; (800d7a4 <HAL_RTC_GetDate+0x46>)
 800d768:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d76a:	0c18      	lsrs	r0, r3, #16
 800d76c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d76e:	0a19      	lsrs	r1, r3, #8
 800d770:	261f      	movs	r6, #31
 800d772:	400e      	ands	r6, r1
 800d774:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d776:	253f      	movs	r5, #63	; 0x3f
 800d778:	401d      	ands	r5, r3
 800d77a:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800d77c:	0b5b      	lsrs	r3, r3, #13
 800d77e:	2107      	movs	r1, #7
 800d780:	400b      	ands	r3, r1
 800d782:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 800d784:	2a00      	cmp	r2, #0
 800d786:	d10a      	bne.n	800d79e <HAL_RTC_GetDate+0x40>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d788:	f7fd ff61 	bl	800b64e <RTC_Bcd2ToByte>
 800d78c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d78e:	0030      	movs	r0, r6
 800d790:	f7fd ff5d 	bl	800b64e <RTC_Bcd2ToByte>
 800d794:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d796:	0028      	movs	r0, r5
 800d798:	f7fd ff59 	bl	800b64e <RTC_Bcd2ToByte>
 800d79c:	70a0      	strb	r0, [r4, #2]
}
 800d79e:	2000      	movs	r0, #0
 800d7a0:	bd70      	pop	{r4, r5, r6, pc}
 800d7a2:	46c0      	nop			; (mov r8, r8)
 800d7a4:	00ffff3f 	.word	0x00ffff3f

0800d7a8 <HAL_RTC_GetTime>:
{
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d7ac:	6803      	ldr	r3, [r0, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d7b2:	6803      	ldr	r3, [r0, #0]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	045b      	lsls	r3, r3, #17
 800d7b8:	0c5b      	lsrs	r3, r3, #17
 800d7ba:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d7bc:	6803      	ldr	r3, [r0, #0]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	490e      	ldr	r1, [pc, #56]	; (800d7fc <HAL_RTC_GetTime+0x54>)
 800d7c2:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800d7c4:	0c19      	lsrs	r1, r3, #16
 800d7c6:	203f      	movs	r0, #63	; 0x3f
 800d7c8:	4008      	ands	r0, r1
 800d7ca:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d7cc:	0a1e      	lsrs	r6, r3, #8
 800d7ce:	257f      	movs	r5, #127	; 0x7f
 800d7d0:	402e      	ands	r6, r5
 800d7d2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800d7d4:	401d      	ands	r5, r3
 800d7d6:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800d7d8:	0d9b      	lsrs	r3, r3, #22
 800d7da:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 800d7dc:	2a00      	cmp	r2, #0
 800d7de:	d10a      	bne.n	800d7f6 <HAL_RTC_GetTime+0x4e>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d7e0:	f7fd ff35 	bl	800b64e <RTC_Bcd2ToByte>
 800d7e4:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d7e6:	0030      	movs	r0, r6
 800d7e8:	f7fd ff31 	bl	800b64e <RTC_Bcd2ToByte>
 800d7ec:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d7ee:	0028      	movs	r0, r5
 800d7f0:	f7fd ff2d 	bl	800b64e <RTC_Bcd2ToByte>
 800d7f4:	70a0      	strb	r0, [r4, #2]
}
 800d7f6:	2000      	movs	r0, #0
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	46c0      	nop			; (mov r8, r8)
 800d7fc:	007f7f7f 	.word	0x007f7f7f

0800d800 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d800:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d802:	2341      	movs	r3, #65	; 0x41
 800d804:	5cc3      	ldrb	r3, [r0, r3]
 800d806:	2b20      	cmp	r3, #32
 800d808:	d11e      	bne.n	800d848 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d80a:	3320      	adds	r3, #32
 800d80c:	5cc3      	ldrb	r3, [r0, r3]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d01c      	beq.n	800d84c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 800d812:	2440      	movs	r4, #64	; 0x40
 800d814:	2301      	movs	r3, #1
 800d816:	5503      	strb	r3, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d818:	2541      	movs	r5, #65	; 0x41
 800d81a:	2224      	movs	r2, #36	; 0x24
 800d81c:	5542      	strb	r2, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d81e:	6806      	ldr	r6, [r0, #0]
 800d820:	6832      	ldr	r2, [r6, #0]
 800d822:	439a      	bics	r2, r3
 800d824:	6032      	str	r2, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d826:	6806      	ldr	r6, [r0, #0]
 800d828:	6832      	ldr	r2, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d82a:	4f09      	ldr	r7, [pc, #36]	; (800d850 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 800d82c:	403a      	ands	r2, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d82e:	0209      	lsls	r1, r1, #8
 800d830:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d832:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d834:	6802      	ldr	r2, [r0, #0]
 800d836:	6811      	ldr	r1, [r2, #0]
 800d838:	430b      	orrs	r3, r1
 800d83a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d83c:	2320      	movs	r3, #32
 800d83e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d840:	2300      	movs	r3, #0
 800d842:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 800d844:	0018      	movs	r0, r3
 800d846:	e000      	b.n	800d84a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  }
  else
  {
    return HAL_BUSY;
 800d848:	2002      	movs	r0, #2
  }
}
 800d84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800d84c:	2002      	movs	r0, #2
 800d84e:	e7fc      	b.n	800d84a <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800d850:	fffff0ff 	.word	0xfffff0ff

0800d854 <HAL_I2CEx_ConfigAnalogFilter>:
{
 800d854:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d856:	2341      	movs	r3, #65	; 0x41
 800d858:	5cc3      	ldrb	r3, [r0, r3]
 800d85a:	2b20      	cmp	r3, #32
 800d85c:	d120      	bne.n	800d8a0 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
    __HAL_LOCK(hi2c);
 800d85e:	3320      	adds	r3, #32
 800d860:	5cc3      	ldrb	r3, [r0, r3]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d01e      	beq.n	800d8a4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800d866:	2440      	movs	r4, #64	; 0x40
 800d868:	2301      	movs	r3, #1
 800d86a:	5503      	strb	r3, [r0, r4]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d86c:	2541      	movs	r5, #65	; 0x41
 800d86e:	2224      	movs	r2, #36	; 0x24
 800d870:	5542      	strb	r2, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 800d872:	6806      	ldr	r6, [r0, #0]
 800d874:	6832      	ldr	r2, [r6, #0]
 800d876:	439a      	bics	r2, r3
 800d878:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d87a:	6806      	ldr	r6, [r0, #0]
 800d87c:	6832      	ldr	r2, [r6, #0]
 800d87e:	4f0a      	ldr	r7, [pc, #40]	; (800d8a8 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 800d880:	403a      	ands	r2, r7
 800d882:	6032      	str	r2, [r6, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800d884:	6806      	ldr	r6, [r0, #0]
 800d886:	6832      	ldr	r2, [r6, #0]
 800d888:	4311      	orrs	r1, r2
 800d88a:	6031      	str	r1, [r6, #0]
    __HAL_I2C_ENABLE(hi2c);
 800d88c:	6802      	ldr	r2, [r0, #0]
 800d88e:	6811      	ldr	r1, [r2, #0]
 800d890:	430b      	orrs	r3, r1
 800d892:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800d894:	2320      	movs	r3, #32
 800d896:	5543      	strb	r3, [r0, r5]
    __HAL_UNLOCK(hi2c);
 800d898:	2300      	movs	r3, #0
 800d89a:	5503      	strb	r3, [r0, r4]
    return HAL_OK;
 800d89c:	0018      	movs	r0, r3
 800d89e:	e000      	b.n	800d8a2 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
    return HAL_BUSY;
 800d8a0:	2002      	movs	r0, #2
}
 800d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	e7fc      	b.n	800d8a2 <HAL_I2CEx_ConfigAnalogFilter+0x4e>
 800d8a8:	ffffefff 	.word	0xffffefff

0800d8ac <HAL_I2C_ER_IRQHandler>:
{
 800d8ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d8ae:	6802      	ldr	r2, [r0, #0]
 800d8b0:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d8b2:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d8b4:	05dc      	lsls	r4, r3, #23
 800d8b6:	d508      	bpl.n	800d8ca <HAL_I2C_ER_IRQHandler+0x1e>
 800d8b8:	060c      	lsls	r4, r1, #24
 800d8ba:	d506      	bpl.n	800d8ca <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d8bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800d8be:	2501      	movs	r5, #1
 800d8c0:	432c      	orrs	r4, r5
 800d8c2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d8c4:	2480      	movs	r4, #128	; 0x80
 800d8c6:	0064      	lsls	r4, r4, #1
 800d8c8:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d8ca:	055a      	lsls	r2, r3, #21
 800d8cc:	d509      	bpl.n	800d8e2 <HAL_I2C_ER_IRQHandler+0x36>
 800d8ce:	060a      	lsls	r2, r1, #24
 800d8d0:	d507      	bpl.n	800d8e2 <HAL_I2C_ER_IRQHandler+0x36>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d8d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d8d4:	2408      	movs	r4, #8
 800d8d6:	4322      	orrs	r2, r4
 800d8d8:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d8da:	6802      	ldr	r2, [r0, #0]
 800d8dc:	2480      	movs	r4, #128	; 0x80
 800d8de:	00e4      	lsls	r4, r4, #3
 800d8e0:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d8e2:	059b      	lsls	r3, r3, #22
 800d8e4:	d509      	bpl.n	800d8fa <HAL_I2C_ER_IRQHandler+0x4e>
 800d8e6:	060b      	lsls	r3, r1, #24
 800d8e8:	d507      	bpl.n	800d8fa <HAL_I2C_ER_IRQHandler+0x4e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d8ea:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d8f2:	6803      	ldr	r3, [r0, #0]
 800d8f4:	32ff      	adds	r2, #255	; 0xff
 800d8f6:	32ff      	adds	r2, #255	; 0xff
 800d8f8:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800d8fa:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d8fc:	230b      	movs	r3, #11
 800d8fe:	420b      	tst	r3, r1
 800d900:	d100      	bne.n	800d904 <HAL_I2C_ER_IRQHandler+0x58>
}
 800d902:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITError(hi2c, tmperror);
 800d904:	f7fe f864 	bl	800b9d0 <I2C_ITError>
 800d908:	e7fb      	b.n	800d902 <HAL_I2C_ER_IRQHandler+0x56>

0800d90a <HAL_I2C_EV_IRQHandler>:
{
 800d90a:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d90c:	6803      	ldr	r3, [r0, #0]
 800d90e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d910:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 800d912:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d914:	2b00      	cmp	r3, #0
 800d916:	d000      	beq.n	800d91a <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 800d918:	4798      	blx	r3
}
 800d91a:	bd10      	pop	{r4, pc}

0800d91c <HAL_I2C_Init>:
{
 800d91c:	b510      	push	{r4, lr}
 800d91e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 800d920:	d059      	beq.n	800d9d6 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d922:	2341      	movs	r3, #65	; 0x41
 800d924:	5cc3      	ldrb	r3, [r0, r3]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d043      	beq.n	800d9b2 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d92a:	2341      	movs	r3, #65	; 0x41
 800d92c:	2224      	movs	r2, #36	; 0x24
 800d92e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 800d930:	6822      	ldr	r2, [r4, #0]
 800d932:	6813      	ldr	r3, [r2, #0]
 800d934:	2101      	movs	r1, #1
 800d936:	438b      	bics	r3, r1
 800d938:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d93a:	6822      	ldr	r2, [r4, #0]
 800d93c:	4b27      	ldr	r3, [pc, #156]	; (800d9dc <HAL_I2C_Init+0xc0>)
 800d93e:	6861      	ldr	r1, [r4, #4]
 800d940:	400b      	ands	r3, r1
 800d942:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d944:	6822      	ldr	r2, [r4, #0]
 800d946:	6893      	ldr	r3, [r2, #8]
 800d948:	4925      	ldr	r1, [pc, #148]	; (800d9e0 <HAL_I2C_Init+0xc4>)
 800d94a:	400b      	ands	r3, r1
 800d94c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d94e:	68e3      	ldr	r3, [r4, #12]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d034      	beq.n	800d9be <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d954:	6822      	ldr	r2, [r4, #0]
 800d956:	2384      	movs	r3, #132	; 0x84
 800d958:	021b      	lsls	r3, r3, #8
 800d95a:	68a1      	ldr	r1, [r4, #8]
 800d95c:	430b      	orrs	r3, r1
 800d95e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d960:	68e3      	ldr	r3, [r4, #12]
 800d962:	2b02      	cmp	r3, #2
 800d964:	d032      	beq.n	800d9cc <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d966:	6822      	ldr	r2, [r4, #0]
 800d968:	6851      	ldr	r1, [r2, #4]
 800d96a:	4b1e      	ldr	r3, [pc, #120]	; (800d9e4 <HAL_I2C_Init+0xc8>)
 800d96c:	430b      	orrs	r3, r1
 800d96e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d970:	6822      	ldr	r2, [r4, #0]
 800d972:	68d3      	ldr	r3, [r2, #12]
 800d974:	491a      	ldr	r1, [pc, #104]	; (800d9e0 <HAL_I2C_Init+0xc4>)
 800d976:	400b      	ands	r3, r1
 800d978:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	6962      	ldr	r2, [r4, #20]
 800d97e:	4313      	orrs	r3, r2
 800d980:	69a2      	ldr	r2, [r4, #24]
 800d982:	0212      	lsls	r2, r2, #8
 800d984:	6821      	ldr	r1, [r4, #0]
 800d986:	4313      	orrs	r3, r2
 800d988:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d98a:	6822      	ldr	r2, [r4, #0]
 800d98c:	69e3      	ldr	r3, [r4, #28]
 800d98e:	6a21      	ldr	r1, [r4, #32]
 800d990:	430b      	orrs	r3, r1
 800d992:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d994:	6822      	ldr	r2, [r4, #0]
 800d996:	6813      	ldr	r3, [r2, #0]
 800d998:	2101      	movs	r1, #1
 800d99a:	430b      	orrs	r3, r1
 800d99c:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d9a2:	2241      	movs	r2, #65	; 0x41
 800d9a4:	311f      	adds	r1, #31
 800d9a6:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d9a8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d9aa:	3201      	adds	r2, #1
 800d9ac:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800d9ae:	2000      	movs	r0, #0
}
 800d9b0:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800d9b2:	3340      	adds	r3, #64	; 0x40
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800d9b8:	f7fc ffb4 	bl	800a924 <HAL_I2C_MspInit>
 800d9bc:	e7b5      	b.n	800d92a <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d9be:	6822      	ldr	r2, [r4, #0]
 800d9c0:	2380      	movs	r3, #128	; 0x80
 800d9c2:	021b      	lsls	r3, r3, #8
 800d9c4:	68a1      	ldr	r1, [r4, #8]
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	6093      	str	r3, [r2, #8]
 800d9ca:	e7c9      	b.n	800d960 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	2280      	movs	r2, #128	; 0x80
 800d9d0:	0112      	lsls	r2, r2, #4
 800d9d2:	605a      	str	r2, [r3, #4]
 800d9d4:	e7c7      	b.n	800d966 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	e7ea      	b.n	800d9b0 <HAL_I2C_Init+0x94>
 800d9da:	46c0      	nop			; (mov r8, r8)
 800d9dc:	f0ffffff 	.word	0xf0ffffff
 800d9e0:	ffff7fff 	.word	0xffff7fff
 800d9e4:	02008000 	.word	0x02008000

0800d9e8 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800d9e8:	4a02      	ldr	r2, [pc, #8]	; (800d9f4 <HAL_ResumeTick+0xc>)
 800d9ea:	6813      	ldr	r3, [r2, #0]
 800d9ec:	2102      	movs	r1, #2
 800d9ee:	430b      	orrs	r3, r1
 800d9f0:	6013      	str	r3, [r2, #0]
}
 800d9f2:	4770      	bx	lr
 800d9f4:	e000e010 	.word	0xe000e010

0800d9f8 <HAL_SuspendTick>:
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800d9f8:	4a02      	ldr	r2, [pc, #8]	; (800da04 <HAL_SuspendTick+0xc>)
 800d9fa:	6813      	ldr	r3, [r2, #0]
 800d9fc:	2102      	movs	r1, #2
 800d9fe:	438b      	bics	r3, r1
 800da00:	6013      	str	r3, [r2, #0]
}
 800da02:	4770      	bx	lr
 800da04:	e000e010 	.word	0xe000e010

0800da08 <HAL_GetTick>:
  return uwTick;
 800da08:	4b01      	ldr	r3, [pc, #4]	; (800da10 <HAL_GetTick+0x8>)
 800da0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
}
 800da0c:	4770      	bx	lr
 800da0e:	46c0      	nop			; (mov r8, r8)
 800da10:	200005d8 	.word	0x200005d8

0800da14 <UART_WaitOnFlagUntilTimeout>:
{
 800da14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da16:	46c6      	mov	lr, r8
 800da18:	b500      	push	{lr}
 800da1a:	0006      	movs	r6, r0
 800da1c:	000c      	movs	r4, r1
 800da1e:	0017      	movs	r7, r2
 800da20:	4698      	mov	r8, r3
 800da22:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da24:	6833      	ldr	r3, [r6, #0]
 800da26:	69db      	ldr	r3, [r3, #28]
 800da28:	4023      	ands	r3, r4
 800da2a:	1b1b      	subs	r3, r3, r4
 800da2c:	425a      	negs	r2, r3
 800da2e:	4153      	adcs	r3, r2
 800da30:	42bb      	cmp	r3, r7
 800da32:	d11e      	bne.n	800da72 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 800da34:	1c6b      	adds	r3, r5, #1
 800da36:	d0f5      	beq.n	800da24 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da38:	f7ff ffe6 	bl	800da08 <HAL_GetTick>
 800da3c:	4643      	mov	r3, r8
 800da3e:	1ac0      	subs	r0, r0, r3
 800da40:	42a8      	cmp	r0, r5
 800da42:	d801      	bhi.n	800da48 <UART_WaitOnFlagUntilTimeout+0x34>
 800da44:	2d00      	cmp	r5, #0
 800da46:	d1ed      	bne.n	800da24 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800da48:	6832      	ldr	r2, [r6, #0]
 800da4a:	6813      	ldr	r3, [r2, #0]
 800da4c:	490b      	ldr	r1, [pc, #44]	; (800da7c <UART_WaitOnFlagUntilTimeout+0x68>)
 800da4e:	400b      	ands	r3, r1
 800da50:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da52:	6832      	ldr	r2, [r6, #0]
 800da54:	6893      	ldr	r3, [r2, #8]
 800da56:	31a3      	adds	r1, #163	; 0xa3
 800da58:	31ff      	adds	r1, #255	; 0xff
 800da5a:	438b      	bics	r3, r1
 800da5c:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 800da5e:	2320      	movs	r3, #32
 800da60:	2280      	movs	r2, #128	; 0x80
 800da62:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800da64:	3204      	adds	r2, #4
 800da66:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 800da68:	335c      	adds	r3, #92	; 0x5c
 800da6a:	2200      	movs	r2, #0
 800da6c:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800da6e:	2003      	movs	r0, #3
 800da70:	e000      	b.n	800da74 <UART_WaitOnFlagUntilTimeout+0x60>
  return HAL_OK;
 800da72:	2000      	movs	r0, #0
}
 800da74:	bc04      	pop	{r2}
 800da76:	4690      	mov	r8, r2
 800da78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da7a:	46c0      	nop			; (mov r8, r8)
 800da7c:	fffffe5f 	.word	0xfffffe5f

0800da80 <UART_CheckIdleState>:
{
 800da80:	b530      	push	{r4, r5, lr}
 800da82:	b083      	sub	sp, #12
 800da84:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da86:	2388      	movs	r3, #136	; 0x88
 800da88:	2200      	movs	r2, #0
 800da8a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800da8c:	f7ff ffbc 	bl	800da08 <HAL_GetTick>
 800da90:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	071b      	lsls	r3, r3, #28
 800da98:	d40e      	bmi.n	800dab8 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	075b      	lsls	r3, r3, #29
 800daa0:	d417      	bmi.n	800dad2 <UART_CheckIdleState+0x52>
  huart->gState = HAL_UART_STATE_READY;
 800daa2:	2320      	movs	r3, #32
 800daa4:	2280      	movs	r2, #128	; 0x80
 800daa6:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800daa8:	3204      	adds	r2, #4
 800daaa:	50a3      	str	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 800daac:	335c      	adds	r3, #92	; 0x5c
 800daae:	2200      	movs	r2, #0
 800dab0:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800dab2:	2000      	movs	r0, #0
}
 800dab4:	b003      	add	sp, #12
 800dab6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dab8:	2180      	movs	r1, #128	; 0x80
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <UART_CheckIdleState+0x6c>)
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	0003      	movs	r3, r0
 800dac0:	2200      	movs	r2, #0
 800dac2:	0389      	lsls	r1, r1, #14
 800dac4:	0020      	movs	r0, r4
 800dac6:	f7ff ffa5 	bl	800da14 <UART_WaitOnFlagUntilTimeout>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d0e5      	beq.n	800da9a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800dace:	2003      	movs	r0, #3
 800dad0:	e7f0      	b.n	800dab4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dad2:	2180      	movs	r1, #128	; 0x80
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <UART_CheckIdleState+0x6c>)
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	002b      	movs	r3, r5
 800dada:	2200      	movs	r2, #0
 800dadc:	03c9      	lsls	r1, r1, #15
 800dade:	0020      	movs	r0, r4
 800dae0:	f7ff ff98 	bl	800da14 <UART_WaitOnFlagUntilTimeout>
 800dae4:	2800      	cmp	r0, #0
 800dae6:	d0dc      	beq.n	800daa2 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800dae8:	2003      	movs	r0, #3
 800daea:	e7e3      	b.n	800dab4 <UART_CheckIdleState+0x34>
 800daec:	01ffffff 	.word	0x01ffffff

0800daf0 <HAL_UART_Init>:
{
 800daf0:	b510      	push	{r4, lr}
 800daf2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800daf4:	d030      	beq.n	800db58 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800daf6:	2380      	movs	r3, #128	; 0x80
 800daf8:	58c3      	ldr	r3, [r0, r3]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d022      	beq.n	800db44 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800dafe:	2380      	movs	r3, #128	; 0x80
 800db00:	2224      	movs	r2, #36	; 0x24
 800db02:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800db04:	6822      	ldr	r2, [r4, #0]
 800db06:	6813      	ldr	r3, [r2, #0]
 800db08:	2101      	movs	r1, #1
 800db0a:	438b      	bics	r3, r1
 800db0c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db0e:	0020      	movs	r0, r4
 800db10:	f7fe fa42 	bl	800bf98 <UART_SetConfig>
 800db14:	2801      	cmp	r0, #1
 800db16:	d014      	beq.n	800db42 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d118      	bne.n	800db50 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db1e:	6822      	ldr	r2, [r4, #0]
 800db20:	6853      	ldr	r3, [r2, #4]
 800db22:	490e      	ldr	r1, [pc, #56]	; (800db5c <HAL_UART_Init+0x6c>)
 800db24:	400b      	ands	r3, r1
 800db26:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db28:	6822      	ldr	r2, [r4, #0]
 800db2a:	6893      	ldr	r3, [r2, #8]
 800db2c:	212a      	movs	r1, #42	; 0x2a
 800db2e:	438b      	bics	r3, r1
 800db30:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800db32:	6822      	ldr	r2, [r4, #0]
 800db34:	6813      	ldr	r3, [r2, #0]
 800db36:	3929      	subs	r1, #41	; 0x29
 800db38:	430b      	orrs	r3, r1
 800db3a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800db3c:	0020      	movs	r0, r4
 800db3e:	f7ff ff9f 	bl	800da80 <UART_CheckIdleState>
}
 800db42:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800db44:	337c      	adds	r3, #124	; 0x7c
 800db46:	2200      	movs	r2, #0
 800db48:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800db4a:	f7fc fe01 	bl	800a750 <HAL_UART_MspInit>
 800db4e:	e7d6      	b.n	800dafe <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800db50:	0020      	movs	r0, r4
 800db52:	f7fd fd03 	bl	800b55c <UART_AdvFeatureConfig>
 800db56:	e7e2      	b.n	800db1e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800db58:	2001      	movs	r0, #1
 800db5a:	e7f2      	b.n	800db42 <HAL_UART_Init+0x52>
 800db5c:	ffffb7ff 	.word	0xffffb7ff

0800db60 <HAL_UART_Transmit>:
{
 800db60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db62:	b085      	sub	sp, #20
 800db64:	0004      	movs	r4, r0
 800db66:	000e      	movs	r6, r1
 800db68:	0017      	movs	r7, r2
 800db6a:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800db6c:	2380      	movs	r3, #128	; 0x80
 800db6e:	58c3      	ldr	r3, [r0, r3]
 800db70:	2b20      	cmp	r3, #32
 800db72:	d162      	bne.n	800dc3a <HAL_UART_Transmit+0xda>
    if ((pData == NULL) || (Size == 0U))
 800db74:	2900      	cmp	r1, #0
 800db76:	d063      	beq.n	800dc40 <HAL_UART_Transmit+0xe0>
 800db78:	2a00      	cmp	r2, #0
 800db7a:	d063      	beq.n	800dc44 <HAL_UART_Transmit+0xe4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db7c:	2380      	movs	r3, #128	; 0x80
 800db7e:	015b      	lsls	r3, r3, #5
 800db80:	6882      	ldr	r2, [r0, #8]
 800db82:	429a      	cmp	r2, r3
 800db84:	d01a      	beq.n	800dbbc <HAL_UART_Transmit+0x5c>
    __HAL_LOCK(huart);
 800db86:	237c      	movs	r3, #124	; 0x7c
 800db88:	5ce3      	ldrb	r3, [r4, r3]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d05c      	beq.n	800dc48 <HAL_UART_Transmit+0xe8>
 800db8e:	237c      	movs	r3, #124	; 0x7c
 800db90:	2201      	movs	r2, #1
 800db92:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db94:	330c      	adds	r3, #12
 800db96:	2200      	movs	r2, #0
 800db98:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db9a:	3b08      	subs	r3, #8
 800db9c:	3221      	adds	r2, #33	; 0x21
 800db9e:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800dba0:	f7ff ff32 	bl	800da08 <HAL_GetTick>
 800dba4:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 800dba6:	2354      	movs	r3, #84	; 0x54
 800dba8:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 800dbaa:	3302      	adds	r3, #2
 800dbac:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbae:	2380      	movs	r3, #128	; 0x80
 800dbb0:	015b      	lsls	r3, r3, #5
 800dbb2:	68a2      	ldr	r2, [r4, #8]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d008      	beq.n	800dbca <HAL_UART_Transmit+0x6a>
      pdata16bits = NULL;
 800dbb8:	2700      	movs	r7, #0
 800dbba:	e016      	b.n	800dbea <HAL_UART_Transmit+0x8a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbbc:	6903      	ldr	r3, [r0, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1e1      	bne.n	800db86 <HAL_UART_Transmit+0x26>
      if ((((uint32_t)pData) & 1U) != 0U)
 800dbc2:	07cb      	lsls	r3, r1, #31
 800dbc4:	d5df      	bpl.n	800db86 <HAL_UART_Transmit+0x26>
        return  HAL_ERROR;
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	e038      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbca:	6923      	ldr	r3, [r4, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d021      	beq.n	800dc14 <HAL_UART_Transmit+0xb4>
      pdata16bits = NULL;
 800dbd0:	2700      	movs	r7, #0
 800dbd2:	e00a      	b.n	800dbea <HAL_UART_Transmit+0x8a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dbd4:	883b      	ldrh	r3, [r7, #0]
 800dbd6:	6822      	ldr	r2, [r4, #0]
 800dbd8:	05db      	lsls	r3, r3, #23
 800dbda:	0ddb      	lsrs	r3, r3, #23
 800dbdc:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800dbde:	3702      	adds	r7, #2
      huart->TxXferCount--;
 800dbe0:	2256      	movs	r2, #86	; 0x56
 800dbe2:	5aa3      	ldrh	r3, [r4, r2]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	52a3      	strh	r3, [r4, r2]
    while (huart->TxXferCount > 0U)
 800dbea:	2356      	movs	r3, #86	; 0x56
 800dbec:	5ae3      	ldrh	r3, [r4, r3]
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d012      	beq.n	800dc1a <HAL_UART_Transmit+0xba>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dbf4:	9500      	str	r5, [sp, #0]
 800dbf6:	9b03      	ldr	r3, [sp, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	2180      	movs	r1, #128	; 0x80
 800dbfc:	0020      	movs	r0, r4
 800dbfe:	f7ff ff09 	bl	800da14 <UART_WaitOnFlagUntilTimeout>
 800dc02:	2800      	cmp	r0, #0
 800dc04:	d122      	bne.n	800dc4c <HAL_UART_Transmit+0xec>
      if (pdata8bits == NULL)
 800dc06:	2e00      	cmp	r6, #0
 800dc08:	d0e4      	beq.n	800dbd4 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc0a:	7832      	ldrb	r2, [r6, #0]
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc10:	3601      	adds	r6, #1
 800dc12:	e7e5      	b.n	800dbe0 <HAL_UART_Transmit+0x80>
      pdata16bits = (uint16_t *) pData;
 800dc14:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 800dc16:	2600      	movs	r6, #0
 800dc18:	e7e7      	b.n	800dbea <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc1a:	9500      	str	r5, [sp, #0]
 800dc1c:	9b03      	ldr	r3, [sp, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	2140      	movs	r1, #64	; 0x40
 800dc22:	0020      	movs	r0, r4
 800dc24:	f7ff fef6 	bl	800da14 <UART_WaitOnFlagUntilTimeout>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d111      	bne.n	800dc50 <HAL_UART_Transmit+0xf0>
    huart->gState = HAL_UART_STATE_READY;
 800dc2c:	2380      	movs	r3, #128	; 0x80
 800dc2e:	2220      	movs	r2, #32
 800dc30:	50e2      	str	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 800dc32:	3b04      	subs	r3, #4
 800dc34:	2200      	movs	r2, #0
 800dc36:	54e2      	strb	r2, [r4, r3]
 800dc38:	e000      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
    return HAL_BUSY;
 800dc3a:	2002      	movs	r0, #2
}
 800dc3c:	b005      	add	sp, #20
 800dc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800dc40:	2001      	movs	r0, #1
 800dc42:	e7fb      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
 800dc44:	2001      	movs	r0, #1
 800dc46:	e7f9      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
    __HAL_LOCK(huart);
 800dc48:	2002      	movs	r0, #2
 800dc4a:	e7f7      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
        return HAL_TIMEOUT;
 800dc4c:	2003      	movs	r0, #3
 800dc4e:	e7f5      	b.n	800dc3c <HAL_UART_Transmit+0xdc>
      return HAL_TIMEOUT;
 800dc50:	2003      	movs	r0, #3
 800dc52:	e7f3      	b.n	800dc3c <HAL_UART_Transmit+0xdc>

0800dc54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc56:	0007      	movs	r7, r0
 800dc58:	000c      	movs	r4, r1
 800dc5a:	0015      	movs	r5, r2
 800dc5c:	001e      	movs	r6, r3
 800dc5e:	e001      	b.n	800dc64 <SPI_WaitFifoStateUntilTimeout+0x10>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 800dc60:	1c73      	adds	r3, r6, #1
 800dc62:	d10c      	bne.n	800dc7e <SPI_WaitFifoStateUntilTimeout+0x2a>
  while ((hspi->Instance->SR & Fifo) != State)
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	6893      	ldr	r3, [r2, #8]
 800dc68:	4023      	ands	r3, r4
 800dc6a:	42ab      	cmp	r3, r5
 800dc6c:	d041      	beq.n	800dcf2 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dc6e:	23c0      	movs	r3, #192	; 0xc0
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	429c      	cmp	r4, r3
 800dc74:	d1f4      	bne.n	800dc60 <SPI_WaitFifoStateUntilTimeout+0xc>
 800dc76:	2d00      	cmp	r5, #0
 800dc78:	d1f2      	bne.n	800dc60 <SPI_WaitFifoStateUntilTimeout+0xc>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800dc7a:	7b13      	ldrb	r3, [r2, #12]
 800dc7c:	e7f0      	b.n	800dc60 <SPI_WaitFifoStateUntilTimeout+0xc>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dc7e:	f7ff fec3 	bl	800da08 <HAL_GetTick>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	1ac0      	subs	r0, r0, r3
 800dc86:	42b0      	cmp	r0, r6
 800dc88:	d201      	bcs.n	800dc8e <SPI_WaitFifoStateUntilTimeout+0x3a>
 800dc8a:	2e00      	cmp	r6, #0
 800dc8c:	d1ea      	bne.n	800dc64 <SPI_WaitFifoStateUntilTimeout+0x10>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	6853      	ldr	r3, [r2, #4]
 800dc92:	21e0      	movs	r1, #224	; 0xe0
 800dc94:	438b      	bics	r3, r1
 800dc96:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc98:	2382      	movs	r3, #130	; 0x82
 800dc9a:	005b      	lsls	r3, r3, #1
 800dc9c:	687a      	ldr	r2, [r7, #4]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d00c      	beq.n	800dcbc <SPI_WaitFifoStateUntilTimeout+0x68>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dca2:	2380      	movs	r3, #128	; 0x80
 800dca4:	019b      	lsls	r3, r3, #6
 800dca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d016      	beq.n	800dcda <SPI_WaitFifoStateUntilTimeout+0x86>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dcac:	235d      	movs	r3, #93	; 0x5d
 800dcae:	2201      	movs	r2, #1
 800dcb0:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dcb2:	3b01      	subs	r3, #1
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 800dcb8:	2003      	movs	r0, #3
 800dcba:	e01b      	b.n	800dcf4 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	2280      	movs	r2, #128	; 0x80
 800dcc0:	0212      	lsls	r2, r2, #8
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d003      	beq.n	800dcce <SPI_WaitFifoStateUntilTimeout+0x7a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dcc6:	2280      	movs	r2, #128	; 0x80
 800dcc8:	00d2      	lsls	r2, r2, #3
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d1e9      	bne.n	800dca2 <SPI_WaitFifoStateUntilTimeout+0x4e>
          __HAL_SPI_DISABLE(hspi);
 800dcce:	683a      	ldr	r2, [r7, #0]
 800dcd0:	6813      	ldr	r3, [r2, #0]
 800dcd2:	2140      	movs	r1, #64	; 0x40
 800dcd4:	438b      	bics	r3, r1
 800dcd6:	6013      	str	r3, [r2, #0]
 800dcd8:	e7e3      	b.n	800dca2 <SPI_WaitFifoStateUntilTimeout+0x4e>
          SPI_RESET_CRC(hspi);
 800dcda:	683a      	ldr	r2, [r7, #0]
 800dcdc:	6813      	ldr	r3, [r2, #0]
 800dcde:	4906      	ldr	r1, [pc, #24]	; (800dcf8 <SPI_WaitFifoStateUntilTimeout+0xa4>)
 800dce0:	400b      	ands	r3, r1
 800dce2:	6013      	str	r3, [r2, #0]
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	6811      	ldr	r1, [r2, #0]
 800dce8:	2380      	movs	r3, #128	; 0x80
 800dcea:	019b      	lsls	r3, r3, #6
 800dcec:	430b      	orrs	r3, r1
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	e7dc      	b.n	800dcac <SPI_WaitFifoStateUntilTimeout+0x58>
      }
    }
  }

  return HAL_OK;
 800dcf2:	2000      	movs	r0, #0
}
 800dcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf6:	46c0      	nop			; (mov r8, r8)
 800dcf8:	ffffdfff 	.word	0xffffdfff

0800dcfc <SPI_WaitFlagStateUntilTimeout>:
{
 800dcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfe:	0006      	movs	r6, r0
 800dd00:	000c      	movs	r4, r1
 800dd02:	0017      	movs	r7, r2
 800dd04:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd06:	6833      	ldr	r3, [r6, #0]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	4023      	ands	r3, r4
 800dd0c:	1b1b      	subs	r3, r3, r4
 800dd0e:	425a      	negs	r2, r3
 800dd10:	4153      	adcs	r3, r2
 800dd12:	42bb      	cmp	r3, r7
 800dd14:	d03b      	beq.n	800dd8e <SPI_WaitFlagStateUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 800dd16:	1c6b      	adds	r3, r5, #1
 800dd18:	d0f5      	beq.n	800dd06 <SPI_WaitFlagStateUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800dd1a:	f7ff fe75 	bl	800da08 <HAL_GetTick>
 800dd1e:	9b06      	ldr	r3, [sp, #24]
 800dd20:	1ac0      	subs	r0, r0, r3
 800dd22:	42a8      	cmp	r0, r5
 800dd24:	d201      	bcs.n	800dd2a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800dd26:	2d00      	cmp	r5, #0
 800dd28:	d1ed      	bne.n	800dd06 <SPI_WaitFlagStateUntilTimeout+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dd2a:	6832      	ldr	r2, [r6, #0]
 800dd2c:	6853      	ldr	r3, [r2, #4]
 800dd2e:	21e0      	movs	r1, #224	; 0xe0
 800dd30:	438b      	bics	r3, r1
 800dd32:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd34:	2382      	movs	r3, #130	; 0x82
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	6872      	ldr	r2, [r6, #4]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d00c      	beq.n	800dd58 <SPI_WaitFlagStateUntilTimeout+0x5c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dd3e:	2380      	movs	r3, #128	; 0x80
 800dd40:	019b      	lsls	r3, r3, #6
 800dd42:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d016      	beq.n	800dd76 <SPI_WaitFlagStateUntilTimeout+0x7a>
        hspi->State = HAL_SPI_STATE_READY;
 800dd48:	235d      	movs	r3, #93	; 0x5d
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 800dd4e:	3b01      	subs	r3, #1
 800dd50:	2200      	movs	r2, #0
 800dd52:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800dd54:	2003      	movs	r0, #3
 800dd56:	e01b      	b.n	800dd90 <SPI_WaitFlagStateUntilTimeout+0x94>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd58:	68b3      	ldr	r3, [r6, #8]
 800dd5a:	2280      	movs	r2, #128	; 0x80
 800dd5c:	0212      	lsls	r2, r2, #8
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d003      	beq.n	800dd6a <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd62:	2280      	movs	r2, #128	; 0x80
 800dd64:	00d2      	lsls	r2, r2, #3
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d1e9      	bne.n	800dd3e <SPI_WaitFlagStateUntilTimeout+0x42>
          __HAL_SPI_DISABLE(hspi);
 800dd6a:	6832      	ldr	r2, [r6, #0]
 800dd6c:	6813      	ldr	r3, [r2, #0]
 800dd6e:	2140      	movs	r1, #64	; 0x40
 800dd70:	438b      	bics	r3, r1
 800dd72:	6013      	str	r3, [r2, #0]
 800dd74:	e7e3      	b.n	800dd3e <SPI_WaitFlagStateUntilTimeout+0x42>
          SPI_RESET_CRC(hspi);
 800dd76:	6832      	ldr	r2, [r6, #0]
 800dd78:	6813      	ldr	r3, [r2, #0]
 800dd7a:	4906      	ldr	r1, [pc, #24]	; (800dd94 <SPI_WaitFlagStateUntilTimeout+0x98>)
 800dd7c:	400b      	ands	r3, r1
 800dd7e:	6013      	str	r3, [r2, #0]
 800dd80:	6832      	ldr	r2, [r6, #0]
 800dd82:	6811      	ldr	r1, [r2, #0]
 800dd84:	2380      	movs	r3, #128	; 0x80
 800dd86:	019b      	lsls	r3, r3, #6
 800dd88:	430b      	orrs	r3, r1
 800dd8a:	6013      	str	r3, [r2, #0]
 800dd8c:	e7dc      	b.n	800dd48 <SPI_WaitFlagStateUntilTimeout+0x4c>
  return HAL_OK;
 800dd8e:	2000      	movs	r0, #0
}
 800dd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd92:	46c0      	nop			; (mov r8, r8)
 800dd94:	ffffdfff 	.word	0xffffdfff

0800dd98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	0004      	movs	r4, r0
 800dd9e:	000d      	movs	r5, r1
 800dda0:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dda2:	21c0      	movs	r1, #192	; 0xc0
 800dda4:	9200      	str	r2, [sp, #0]
 800dda6:	002b      	movs	r3, r5
 800dda8:	2200      	movs	r2, #0
 800ddaa:	0149      	lsls	r1, r1, #5
 800ddac:	f7ff ff52 	bl	800dc54 <SPI_WaitFifoStateUntilTimeout>
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	d118      	bne.n	800dde6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ddb4:	9600      	str	r6, [sp, #0]
 800ddb6:	002b      	movs	r3, r5
 800ddb8:	2200      	movs	r2, #0
 800ddba:	2180      	movs	r1, #128	; 0x80
 800ddbc:	0020      	movs	r0, r4
 800ddbe:	f7ff ff9d 	bl	800dcfc <SPI_WaitFlagStateUntilTimeout>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d116      	bne.n	800ddf4 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ddc6:	21c0      	movs	r1, #192	; 0xc0
 800ddc8:	9600      	str	r6, [sp, #0]
 800ddca:	002b      	movs	r3, r5
 800ddcc:	2200      	movs	r2, #0
 800ddce:	00c9      	lsls	r1, r1, #3
 800ddd0:	0020      	movs	r0, r4
 800ddd2:	f7ff ff3f 	bl	800dc54 <SPI_WaitFifoStateUntilTimeout>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d00a      	beq.n	800ddf0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddda:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dddc:	2220      	movs	r2, #32
 800ddde:	4313      	orrs	r3, r2
 800dde0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800dde2:	2003      	movs	r0, #3
 800dde4:	e004      	b.n	800ddf0 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dde6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800dde8:	2220      	movs	r2, #32
 800ddea:	4313      	orrs	r3, r2
 800ddec:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ddee:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800ddf0:	b002      	add	sp, #8
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800ddfc:	2003      	movs	r0, #3
 800ddfe:	e7f7      	b.n	800ddf0 <SPI_EndRxTxTransaction+0x58>

0800de00 <HAL_SPI_TransmitReceive>:
{
 800de00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de02:	b083      	sub	sp, #12
 800de04:	0004      	movs	r4, r0
 800de06:	000e      	movs	r6, r1
 800de08:	9201      	str	r2, [sp, #4]
 800de0a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 800de0c:	235c      	movs	r3, #92	; 0x5c
 800de0e:	5cc3      	ldrb	r3, [r0, r3]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d100      	bne.n	800de16 <HAL_SPI_TransmitReceive+0x16>
 800de14:	e157      	b.n	800e0c6 <HAL_SPI_TransmitReceive+0x2c6>
 800de16:	235c      	movs	r3, #92	; 0x5c
 800de18:	2201      	movs	r2, #1
 800de1a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800de1c:	f7ff fdf4 	bl	800da08 <HAL_GetTick>
 800de20:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 800de22:	235d      	movs	r3, #93	; 0x5d
 800de24:	5ce3      	ldrb	r3, [r4, r3]
 800de26:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800de28:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d014      	beq.n	800de58 <HAL_SPI_TransmitReceive+0x58>
 800de2e:	2182      	movs	r1, #130	; 0x82
 800de30:	0049      	lsls	r1, r1, #1
 800de32:	428a      	cmp	r2, r1
 800de34:	d008      	beq.n	800de48 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800de36:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800de38:	235d      	movs	r3, #93	; 0x5d
 800de3a:	2201      	movs	r2, #1
 800de3c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800de3e:	3b01      	subs	r3, #1
 800de40:	2200      	movs	r2, #0
 800de42:	54e2      	strb	r2, [r4, r3]
}
 800de44:	b003      	add	sp, #12
 800de46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800de48:	68a2      	ldr	r2, [r4, #8]
 800de4a:	2a00      	cmp	r2, #0
 800de4c:	d000      	beq.n	800de50 <HAL_SPI_TransmitReceive+0x50>
 800de4e:	e12c      	b.n	800e0aa <HAL_SPI_TransmitReceive+0x2aa>
 800de50:	2b04      	cmp	r3, #4
 800de52:	d001      	beq.n	800de58 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 800de54:	2002      	movs	r0, #2
 800de56:	e7ef      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de58:	2e00      	cmp	r6, #0
 800de5a:	d100      	bne.n	800de5e <HAL_SPI_TransmitReceive+0x5e>
 800de5c:	e127      	b.n	800e0ae <HAL_SPI_TransmitReceive+0x2ae>
 800de5e:	9b01      	ldr	r3, [sp, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d100      	bne.n	800de66 <HAL_SPI_TransmitReceive+0x66>
 800de64:	e125      	b.n	800e0b2 <HAL_SPI_TransmitReceive+0x2b2>
 800de66:	2d00      	cmp	r5, #0
 800de68:	d100      	bne.n	800de6c <HAL_SPI_TransmitReceive+0x6c>
 800de6a:	e124      	b.n	800e0b6 <HAL_SPI_TransmitReceive+0x2b6>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de6c:	235d      	movs	r3, #93	; 0x5d
 800de6e:	5ce3      	ldrb	r3, [r4, r3]
 800de70:	2b04      	cmp	r3, #4
 800de72:	d002      	beq.n	800de7a <HAL_SPI_TransmitReceive+0x7a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de74:	235d      	movs	r3, #93	; 0x5d
 800de76:	2205      	movs	r2, #5
 800de78:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de7a:	2300      	movs	r3, #0
 800de7c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de7e:	9a01      	ldr	r2, [sp, #4]
 800de80:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800de82:	2246      	movs	r2, #70	; 0x46
 800de84:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 800de86:	3a02      	subs	r2, #2
 800de88:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800de8a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800de8c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800de8e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800de90:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800de92:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800de94:	23e0      	movs	r3, #224	; 0xe0
 800de96:	00db      	lsls	r3, r3, #3
 800de98:	68e2      	ldr	r2, [r4, #12]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d801      	bhi.n	800dea2 <HAL_SPI_TransmitReceive+0xa2>
 800de9e:	2d01      	cmp	r5, #1
 800dea0:	d923      	bls.n	800deea <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dea2:	6822      	ldr	r2, [r4, #0]
 800dea4:	6853      	ldr	r3, [r2, #4]
 800dea6:	4989      	ldr	r1, [pc, #548]	; (800e0cc <HAL_SPI_TransmitReceive+0x2cc>)
 800dea8:	400b      	ands	r3, r1
 800deaa:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	0652      	lsls	r2, r2, #25
 800deb2:	d403      	bmi.n	800debc <HAL_SPI_TransmitReceive+0xbc>
    __HAL_SPI_ENABLE(hspi);
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	2140      	movs	r1, #64	; 0x40
 800deb8:	430a      	orrs	r2, r1
 800deba:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800debc:	23e0      	movs	r3, #224	; 0xe0
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	68e2      	ldr	r2, [r4, #12]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d956      	bls.n	800df74 <HAL_SPI_TransmitReceive+0x174>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dec6:	6863      	ldr	r3, [r4, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <HAL_SPI_TransmitReceive+0xd0>
 800decc:	2d01      	cmp	r5, #1
 800dece:	d10a      	bne.n	800dee6 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ded4:	8812      	ldrh	r2, [r2, #0]
 800ded6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ded8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800deda:	3302      	adds	r3, #2
 800dedc:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800dede:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dee0:	3b01      	subs	r3, #1
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800dee6:	2501      	movs	r5, #1
 800dee8:	e024      	b.n	800df34 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800deea:	6822      	ldr	r2, [r4, #0]
 800deec:	6851      	ldr	r1, [r2, #4]
 800deee:	2380      	movs	r3, #128	; 0x80
 800def0:	015b      	lsls	r3, r3, #5
 800def2:	430b      	orrs	r3, r1
 800def4:	6053      	str	r3, [r2, #4]
 800def6:	e7d9      	b.n	800deac <HAL_SPI_TransmitReceive+0xac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	689a      	ldr	r2, [r3, #8]
 800defc:	07d2      	lsls	r2, r2, #31
 800defe:	d510      	bpl.n	800df22 <HAL_SPI_TransmitReceive+0x122>
 800df00:	2246      	movs	r2, #70	; 0x46
 800df02:	5aa2      	ldrh	r2, [r4, r2]
 800df04:	b292      	uxth	r2, r2
 800df06:	2a00      	cmp	r2, #0
 800df08:	d00b      	beq.n	800df22 <HAL_SPI_TransmitReceive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800df0e:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df12:	3302      	adds	r3, #2
 800df14:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800df16:	2246      	movs	r2, #70	; 0x46
 800df18:	5aa3      	ldrh	r3, [r4, r2]
 800df1a:	3b01      	subs	r3, #1
 800df1c:	b29b      	uxth	r3, r3
 800df1e:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800df20:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800df22:	f7ff fd71 	bl	800da08 <HAL_GetTick>
 800df26:	1bc0      	subs	r0, r0, r7
 800df28:	9b08      	ldr	r3, [sp, #32]
 800df2a:	4298      	cmp	r0, r3
 800df2c:	d302      	bcc.n	800df34 <HAL_SPI_TransmitReceive+0x134>
 800df2e:	3301      	adds	r3, #1
 800df30:	d000      	beq.n	800df34 <HAL_SPI_TransmitReceive+0x134>
 800df32:	e0c2      	b.n	800e0ba <HAL_SPI_TransmitReceive+0x2ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800df36:	b29b      	uxth	r3, r3
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d105      	bne.n	800df48 <HAL_SPI_TransmitReceive+0x148>
 800df3c:	3346      	adds	r3, #70	; 0x46
 800df3e:	5ae3      	ldrh	r3, [r4, r3]
 800df40:	b29b      	uxth	r3, r3
 800df42:	2b00      	cmp	r3, #0
 800df44:	d100      	bne.n	800df48 <HAL_SPI_TransmitReceive+0x148>
 800df46:	e0a4      	b.n	800e092 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	0792      	lsls	r2, r2, #30
 800df4e:	d5d3      	bpl.n	800def8 <HAL_SPI_TransmitReceive+0xf8>
 800df50:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800df52:	b292      	uxth	r2, r2
 800df54:	2a00      	cmp	r2, #0
 800df56:	d0cf      	beq.n	800def8 <HAL_SPI_TransmitReceive+0xf8>
 800df58:	2d01      	cmp	r5, #1
 800df5a:	d1cd      	bne.n	800def8 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800df5e:	8812      	ldrh	r2, [r2, #0]
 800df60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df64:	3302      	adds	r3, #2
 800df66:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800df68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800df6a:	3b01      	subs	r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800df70:	2500      	movs	r5, #0
 800df72:	e7c1      	b.n	800def8 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df74:	6863      	ldr	r3, [r4, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <HAL_SPI_TransmitReceive+0x17e>
 800df7a:	2d01      	cmp	r5, #1
 800df7c:	d10e      	bne.n	800df9c <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 800df7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800df80:	b29b      	uxth	r3, r3
 800df82:	2b01      	cmp	r3, #1
 800df84:	d90c      	bls.n	800dfa0 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800df8a:	8812      	ldrh	r2, [r2, #0]
 800df8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800df90:	3302      	adds	r3, #2
 800df92:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800df94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800df96:	3b02      	subs	r3, #2
 800df98:	b29b      	uxth	r3, r3
 800df9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800df9c:	2501      	movs	r5, #1
 800df9e:	e046      	b.n	800e02e <HAL_SPI_TransmitReceive+0x22e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dfa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	6822      	ldr	r2, [r4, #0]
 800dfa6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800dfa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfaa:	3301      	adds	r3, #1
 800dfac:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800dfae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800dfb6:	e7f1      	b.n	800df9c <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 800dfb8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800dfba:	b292      	uxth	r2, r2
 800dfbc:	2a01      	cmp	r2, #1
 800dfbe:	d90b      	bls.n	800dfd8 <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dfc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dfc2:	8812      	ldrh	r2, [r2, #0]
 800dfc4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dfc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfc8:	3302      	adds	r3, #2
 800dfca:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800dfcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dfce:	3b02      	subs	r3, #2
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800dfd4:	2500      	movs	r5, #0
 800dfd6:	e03d      	b.n	800e054 <HAL_SPI_TransmitReceive+0x254>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dfd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dfda:	7812      	ldrb	r2, [r2, #0]
 800dfdc:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 800dfde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800dfe4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800dfec:	2500      	movs	r5, #0
 800dfee:	e031      	b.n	800e054 <HAL_SPI_TransmitReceive+0x254>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	6851      	ldr	r1, [r2, #4]
 800dff4:	2380      	movs	r3, #128	; 0x80
 800dff6:	015b      	lsls	r3, r3, #5
 800dff8:	430b      	orrs	r3, r1
 800dffa:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800dffc:	2501      	movs	r5, #1
 800dffe:	e00b      	b.n	800e018 <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e000:	7b1b      	ldrb	r3, [r3, #12]
 800e002:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e004:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 800e006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e008:	3301      	adds	r3, #1
 800e00a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 800e00c:	2246      	movs	r2, #70	; 0x46
 800e00e:	5aa3      	ldrh	r3, [r4, r2]
 800e010:	3b01      	subs	r3, #1
 800e012:	b29b      	uxth	r3, r3
 800e014:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800e016:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e018:	f7ff fcf6 	bl	800da08 <HAL_GetTick>
 800e01c:	1bc0      	subs	r0, r0, r7
 800e01e:	9b08      	ldr	r3, [sp, #32]
 800e020:	4298      	cmp	r0, r3
 800e022:	d301      	bcc.n	800e028 <HAL_SPI_TransmitReceive+0x228>
 800e024:	3301      	adds	r3, #1
 800e026:	d14a      	bne.n	800e0be <HAL_SPI_TransmitReceive+0x2be>
 800e028:	9b08      	ldr	r3, [sp, #32]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d049      	beq.n	800e0c2 <HAL_SPI_TransmitReceive+0x2c2>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e02e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e030:	b29b      	uxth	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d104      	bne.n	800e040 <HAL_SPI_TransmitReceive+0x240>
 800e036:	3346      	adds	r3, #70	; 0x46
 800e038:	5ae3      	ldrh	r3, [r4, r3]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d028      	beq.n	800e092 <HAL_SPI_TransmitReceive+0x292>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e040:	6823      	ldr	r3, [r4, #0]
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	0792      	lsls	r2, r2, #30
 800e046:	d505      	bpl.n	800e054 <HAL_SPI_TransmitReceive+0x254>
 800e048:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e04a:	b292      	uxth	r2, r2
 800e04c:	2a00      	cmp	r2, #0
 800e04e:	d001      	beq.n	800e054 <HAL_SPI_TransmitReceive+0x254>
 800e050:	2d01      	cmp	r5, #1
 800e052:	d0b1      	beq.n	800dfb8 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e054:	6823      	ldr	r3, [r4, #0]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	07d2      	lsls	r2, r2, #31
 800e05a:	d5dd      	bpl.n	800e018 <HAL_SPI_TransmitReceive+0x218>
 800e05c:	2246      	movs	r2, #70	; 0x46
 800e05e:	5aa2      	ldrh	r2, [r4, r2]
 800e060:	b292      	uxth	r2, r2
 800e062:	2a00      	cmp	r2, #0
 800e064:	d0d8      	beq.n	800e018 <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 800e066:	2246      	movs	r2, #70	; 0x46
 800e068:	5aa2      	ldrh	r2, [r4, r2]
 800e06a:	b292      	uxth	r2, r2
 800e06c:	2a01      	cmp	r2, #1
 800e06e:	d9c7      	bls.n	800e000 <HAL_SPI_TransmitReceive+0x200>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e074:	8013      	strh	r3, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e076:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e078:	3302      	adds	r3, #2
 800e07a:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800e07c:	2246      	movs	r2, #70	; 0x46
 800e07e:	5aa3      	ldrh	r3, [r4, r2]
 800e080:	3b02      	subs	r3, #2
 800e082:	b29b      	uxth	r3, r3
 800e084:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 800e086:	5aa3      	ldrh	r3, [r4, r2]
 800e088:	b29b      	uxth	r3, r3
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d9b0      	bls.n	800dff0 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 800e08e:	2501      	movs	r5, #1
 800e090:	e7c2      	b.n	800e018 <HAL_SPI_TransmitReceive+0x218>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e092:	003a      	movs	r2, r7
 800e094:	9908      	ldr	r1, [sp, #32]
 800e096:	0020      	movs	r0, r4
 800e098:	f7ff fe7e 	bl	800dd98 <SPI_EndRxTxTransaction>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d100      	bne.n	800e0a2 <HAL_SPI_TransmitReceive+0x2a2>
 800e0a0:	e6ca      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e0a2:	2320      	movs	r3, #32
 800e0a4:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800e0a6:	2001      	movs	r0, #1
 800e0a8:	e6c6      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800e0aa:	2002      	movs	r0, #2
 800e0ac:	e6c4      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 800e0ae:	2001      	movs	r0, #1
 800e0b0:	e6c2      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	e6c0      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	e6be      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800e0ba:	2003      	movs	r0, #3
 800e0bc:	e6bc      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
        errorcode = HAL_TIMEOUT;
 800e0be:	2003      	movs	r0, #3
 800e0c0:	e6ba      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
 800e0c2:	2003      	movs	r0, #3
 800e0c4:	e6b8      	b.n	800de38 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 800e0c6:	2002      	movs	r0, #2
 800e0c8:	e6bc      	b.n	800de44 <HAL_SPI_TransmitReceive+0x44>
 800e0ca:	46c0      	nop			; (mov r8, r8)
 800e0cc:	ffffefff 	.word	0xffffefff

0800e0d0 <HAL_RTCEx_DeactivateWakeUpTimer>:
{
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800e0d4:	2328      	movs	r3, #40	; 0x28
 800e0d6:	5cc3      	ldrb	r3, [r0, r3]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d038      	beq.n	800e14e <HAL_RTCEx_DeactivateWakeUpTimer+0x7e>
 800e0dc:	2328      	movs	r3, #40	; 0x28
 800e0de:	2201      	movs	r2, #1
 800e0e0:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	3201      	adds	r2, #1
 800e0e6:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e0e8:	6803      	ldr	r3, [r0, #0]
 800e0ea:	32c8      	adds	r2, #200	; 0xc8
 800e0ec:	625a      	str	r2, [r3, #36]	; 0x24
 800e0ee:	6803      	ldr	r3, [r0, #0]
 800e0f0:	3a77      	subs	r2, #119	; 0x77
 800e0f2:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800e0f4:	6802      	ldr	r2, [r0, #0]
 800e0f6:	6993      	ldr	r3, [r2, #24]
 800e0f8:	4916      	ldr	r1, [pc, #88]	; (800e154 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>)
 800e0fa:	400b      	ands	r3, r1
 800e0fc:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800e0fe:	6802      	ldr	r2, [r0, #0]
 800e100:	6993      	ldr	r3, [r2, #24]
 800e102:	4915      	ldr	r1, [pc, #84]	; (800e158 <HAL_RTCEx_DeactivateWakeUpTimer+0x88>)
 800e104:	400b      	ands	r3, r1
 800e106:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 800e108:	f7ff fc7e 	bl	800da08 <HAL_GetTick>
 800e10c:	0005      	movs	r5, r0
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e10e:	6823      	ldr	r3, [r4, #0]
 800e110:	68da      	ldr	r2, [r3, #12]
 800e112:	0752      	lsls	r2, r2, #29
 800e114:	d411      	bmi.n	800e13a <HAL_RTCEx_DeactivateWakeUpTimer+0x6a>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e116:	f7ff fc77 	bl	800da08 <HAL_GetTick>
 800e11a:	1b40      	subs	r0, r0, r5
 800e11c:	23fa      	movs	r3, #250	; 0xfa
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4298      	cmp	r0, r3
 800e122:	d9f4      	bls.n	800e10e <HAL_RTCEx_DeactivateWakeUpTimer+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e124:	6823      	ldr	r3, [r4, #0]
 800e126:	22ff      	movs	r2, #255	; 0xff
 800e128:	625a      	str	r2, [r3, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e12a:	2329      	movs	r3, #41	; 0x29
 800e12c:	3afc      	subs	r2, #252	; 0xfc
 800e12e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hrtc);
 800e130:	3b01      	subs	r3, #1
 800e132:	2200      	movs	r2, #0
 800e134:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 800e136:	2003      	movs	r0, #3
 800e138:	e008      	b.n	800e14c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e13a:	22ff      	movs	r2, #255	; 0xff
 800e13c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e13e:	2329      	movs	r3, #41	; 0x29
 800e140:	3afe      	subs	r2, #254	; 0xfe
 800e142:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e144:	3b01      	subs	r3, #1
 800e146:	2200      	movs	r2, #0
 800e148:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e14a:	2000      	movs	r0, #0
}
 800e14c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800e14e:	2002      	movs	r0, #2
 800e150:	e7fc      	b.n	800e14c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>
 800e152:	46c0      	nop			; (mov r8, r8)
 800e154:	fffffbff 	.word	0xfffffbff
 800e158:	ffffbfff 	.word	0xffffbfff

0800e15c <HAL_RTCEx_SetWakeUpTimer_IT>:
{
 800e15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e15e:	0004      	movs	r4, r0
 800e160:	000e      	movs	r6, r1
 800e162:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 800e164:	2328      	movs	r3, #40	; 0x28
 800e166:	5cc3      	ldrb	r3, [r0, r3]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d05b      	beq.n	800e224 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
 800e16c:	2328      	movs	r3, #40	; 0x28
 800e16e:	2201      	movs	r2, #1
 800e170:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e172:	3301      	adds	r3, #1
 800e174:	3201      	adds	r2, #1
 800e176:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e178:	6803      	ldr	r3, [r0, #0]
 800e17a:	32c8      	adds	r2, #200	; 0xc8
 800e17c:	625a      	str	r2, [r3, #36]	; 0x24
 800e17e:	6803      	ldr	r3, [r0, #0]
 800e180:	3a77      	subs	r2, #119	; 0x77
 800e182:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800e184:	6802      	ldr	r2, [r0, #0]
 800e186:	6993      	ldr	r3, [r2, #24]
 800e188:	4927      	ldr	r1, [pc, #156]	; (800e228 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>)
 800e18a:	400b      	ands	r3, r1
 800e18c:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800e18e:	6802      	ldr	r2, [r0, #0]
 800e190:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e192:	2104      	movs	r1, #4
 800e194:	430b      	orrs	r3, r1
 800e196:	65d3      	str	r3, [r2, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800e198:	4b24      	ldr	r3, [pc, #144]	; (800e22c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>)
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	065b      	lsls	r3, r3, #25
 800e19e:	d528      	bpl.n	800e1f2 <HAL_RTCEx_SetWakeUpTimer_IT+0x96>
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800e1a0:	6823      	ldr	r3, [r4, #0]
 800e1a2:	615e      	str	r6, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800e1a4:	6822      	ldr	r2, [r4, #0]
 800e1a6:	6993      	ldr	r3, [r2, #24]
 800e1a8:	2107      	movs	r1, #7
 800e1aa:	438b      	bics	r3, r1
 800e1ac:	6193      	str	r3, [r2, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800e1ae:	6822      	ldr	r2, [r4, #0]
 800e1b0:	6993      	ldr	r3, [r2, #24]
 800e1b2:	431d      	orrs	r5, r3
 800e1b4:	6195      	str	r5, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800e1b6:	491e      	ldr	r1, [pc, #120]	; (800e230 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 800e1b8:	2280      	movs	r2, #128	; 0x80
 800e1ba:	5888      	ldr	r0, [r1, r2]
 800e1bc:	2380      	movs	r3, #128	; 0x80
 800e1be:	031b      	lsls	r3, r3, #12
 800e1c0:	4303      	orrs	r3, r0
 800e1c2:	508b      	str	r3, [r1, r2]
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800e1c4:	6822      	ldr	r2, [r4, #0]
 800e1c6:	6991      	ldr	r1, [r2, #24]
 800e1c8:	2380      	movs	r3, #128	; 0x80
 800e1ca:	01db      	lsls	r3, r3, #7
 800e1cc:	430b      	orrs	r3, r1
 800e1ce:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800e1d0:	6822      	ldr	r2, [r4, #0]
 800e1d2:	6991      	ldr	r1, [r2, #24]
 800e1d4:	2380      	movs	r3, #128	; 0x80
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	430b      	orrs	r3, r1
 800e1da:	6193      	str	r3, [r2, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	22ff      	movs	r2, #255	; 0xff
 800e1e0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e1e2:	2329      	movs	r3, #41	; 0x29
 800e1e4:	3afe      	subs	r2, #254	; 0xfe
 800e1e6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e1ee:	2000      	movs	r0, #0
}
 800e1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 800e1f2:	f7ff fc09 	bl	800da08 <HAL_GetTick>
 800e1f6:	0007      	movs	r7, r0
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800e1f8:	6823      	ldr	r3, [r4, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	075b      	lsls	r3, r3, #29
 800e1fe:	d4cf      	bmi.n	800e1a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x44>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e200:	f7ff fc02 	bl	800da08 <HAL_GetTick>
 800e204:	1bc0      	subs	r0, r0, r7
 800e206:	23fa      	movs	r3, #250	; 0xfa
 800e208:	009b      	lsls	r3, r3, #2
 800e20a:	4298      	cmp	r0, r3
 800e20c:	d9f4      	bls.n	800e1f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	22ff      	movs	r2, #255	; 0xff
 800e212:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e214:	2329      	movs	r3, #41	; 0x29
 800e216:	3afc      	subs	r2, #252	; 0xfc
 800e218:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e21a:	3b01      	subs	r3, #1
 800e21c:	2200      	movs	r2, #0
 800e21e:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e220:	2003      	movs	r0, #3
 800e222:	e7e5      	b.n	800e1f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  __HAL_LOCK(hrtc);
 800e224:	2002      	movs	r0, #2
 800e226:	e7e3      	b.n	800e1f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
 800e228:	fffffbff 	.word	0xfffffbff
 800e22c:	40002800 	.word	0x40002800
 800e230:	40021800 	.word	0x40021800

0800e234 <RTC_EnterInitMode>:
{
 800e234:	b570      	push	{r4, r5, r6, lr}
 800e236:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800e238:	6803      	ldr	r3, [r0, #0]
 800e23a:	68da      	ldr	r2, [r3, #12]
 800e23c:	0652      	lsls	r2, r2, #25
 800e23e:	d502      	bpl.n	800e246 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;  
 800e240:	2400      	movs	r4, #0
}
 800e242:	0020      	movs	r0, r4
 800e244:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e246:	68d9      	ldr	r1, [r3, #12]
 800e248:	2280      	movs	r2, #128	; 0x80
 800e24a:	430a      	orrs	r2, r1
 800e24c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800e24e:	f7ff fbdb 	bl	800da08 <HAL_GetTick>
 800e252:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;  
 800e254:	2400      	movs	r4, #0
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	68db      	ldr	r3, [r3, #12]
 800e25a:	065b      	lsls	r3, r3, #25
 800e25c:	d4f1      	bmi.n	800e242 <RTC_EnterInitMode+0xe>
 800e25e:	2c03      	cmp	r4, #3
 800e260:	d0ef      	beq.n	800e242 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e262:	f7ff fbd1 	bl	800da08 <HAL_GetTick>
 800e266:	1b80      	subs	r0, r0, r6
 800e268:	23fa      	movs	r3, #250	; 0xfa
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4298      	cmp	r0, r3
 800e26e:	d9f2      	bls.n	800e256 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e270:	2403      	movs	r4, #3
 800e272:	2329      	movs	r3, #41	; 0x29
 800e274:	54ec      	strb	r4, [r5, r3]
 800e276:	e7ee      	b.n	800e256 <RTC_EnterInitMode+0x22>

0800e278 <HAL_RTC_WaitForSynchro>:
{
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800e27c:	6802      	ldr	r2, [r0, #0]
 800e27e:	68d3      	ldr	r3, [r2, #12]
 800e280:	21a0      	movs	r1, #160	; 0xa0
 800e282:	438b      	bics	r3, r1
 800e284:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick();
 800e286:	f7ff fbbf 	bl	800da08 <HAL_GetTick>
 800e28a:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	069b      	lsls	r3, r3, #26
 800e292:	d408      	bmi.n	800e2a6 <HAL_RTC_WaitForSynchro+0x2e>
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e294:	f7ff fbb8 	bl	800da08 <HAL_GetTick>
 800e298:	1b40      	subs	r0, r0, r5
 800e29a:	23fa      	movs	r3, #250	; 0xfa
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	4298      	cmp	r0, r3
 800e2a0:	d9f4      	bls.n	800e28c <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 800e2a2:	2003      	movs	r0, #3
 800e2a4:	e000      	b.n	800e2a8 <HAL_RTC_WaitForSynchro+0x30>
  return HAL_OK;
 800e2a6:	2000      	movs	r0, #0
}
 800e2a8:	bd70      	pop	{r4, r5, r6, pc}

0800e2aa <RTC_ExitInitMode>:
{
 800e2aa:	b510      	push	{r4, lr}
 800e2ac:	0004      	movs	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800e2ae:	4b11      	ldr	r3, [pc, #68]	; (800e2f4 <RTC_ExitInitMode+0x4a>)
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	2180      	movs	r1, #128	; 0x80
 800e2b4:	438a      	bics	r2, r1
 800e2b6:	60da      	str	r2, [r3, #12]
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	069b      	lsls	r3, r3, #26
 800e2bc:	d407      	bmi.n	800e2ce <RTC_ExitInitMode+0x24>
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e2be:	f7ff ffdb 	bl	800e278 <HAL_RTC_WaitForSynchro>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d014      	beq.n	800e2f0 <RTC_ExitInitMode+0x46>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2c6:	2003      	movs	r0, #3
 800e2c8:	2329      	movs	r3, #41	; 0x29
 800e2ca:	54e0      	strb	r0, [r4, r3]
 800e2cc:	e010      	b.n	800e2f0 <RTC_ExitInitMode+0x46>
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e2ce:	4a09      	ldr	r2, [pc, #36]	; (800e2f4 <RTC_ExitInitMode+0x4a>)
 800e2d0:	6993      	ldr	r3, [r2, #24]
 800e2d2:	2120      	movs	r1, #32
 800e2d4:	438b      	bics	r3, r1
 800e2d6:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e2d8:	f7ff ffce 	bl	800e278 <HAL_RTC_WaitForSynchro>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d002      	beq.n	800e2e6 <RTC_ExitInitMode+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e2e0:	2003      	movs	r0, #3
 800e2e2:	2329      	movs	r3, #41	; 0x29
 800e2e4:	54e0      	strb	r0, [r4, r3]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e2e6:	4a03      	ldr	r2, [pc, #12]	; (800e2f4 <RTC_ExitInitMode+0x4a>)
 800e2e8:	6991      	ldr	r1, [r2, #24]
 800e2ea:	2320      	movs	r3, #32
 800e2ec:	430b      	orrs	r3, r1
 800e2ee:	6193      	str	r3, [r2, #24]
}
 800e2f0:	bd10      	pop	{r4, pc}
 800e2f2:	46c0      	nop			; (mov r8, r8)
 800e2f4:	40002800 	.word	0x40002800

0800e2f8 <HAL_RTC_SetDate>:
{
 800e2f8:	b570      	push	{r4, r5, r6, lr}
 800e2fa:	0004      	movs	r4, r0
 800e2fc:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 800e2fe:	2328      	movs	r3, #40	; 0x28
 800e300:	5cc3      	ldrb	r3, [r0, r3]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d04a      	beq.n	800e39c <HAL_RTC_SetDate+0xa4>
 800e306:	2328      	movs	r3, #40	; 0x28
 800e308:	2101      	movs	r1, #1
 800e30a:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e30c:	3301      	adds	r3, #1
 800e30e:	3101      	adds	r1, #1
 800e310:	54c1      	strb	r1, [r0, r3]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e312:	2a00      	cmp	r2, #0
 800e314:	d106      	bne.n	800e324 <HAL_RTC_SetDate+0x2c>
 800e316:	7873      	ldrb	r3, [r6, #1]
 800e318:	06d9      	lsls	r1, r3, #27
 800e31a:	d503      	bpl.n	800e324 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e31c:	2110      	movs	r1, #16
 800e31e:	438b      	bics	r3, r1
 800e320:	330a      	adds	r3, #10
 800e322:	7073      	strb	r3, [r6, #1]
  if(Format == RTC_FORMAT_BIN)
 800e324:	2a00      	cmp	r2, #0
 800e326:	d126      	bne.n	800e376 <HAL_RTC_SetDate+0x7e>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e328:	78f0      	ldrb	r0, [r6, #3]
 800e32a:	f7fd f999 	bl	800b660 <RTC_ByteToBcd2>
 800e32e:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e330:	7870      	ldrb	r0, [r6, #1]
 800e332:	f7fd f995 	bl	800b660 <RTC_ByteToBcd2>
 800e336:	0200      	lsls	r0, r0, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e338:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e33a:	78b0      	ldrb	r0, [r6, #2]
 800e33c:	f7fd f990 	bl	800b660 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e340:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800e342:	7830      	ldrb	r0, [r6, #0]
 800e344:	0340      	lsls	r0, r0, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e346:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e348:	6823      	ldr	r3, [r4, #0]
 800e34a:	22ca      	movs	r2, #202	; 0xca
 800e34c:	625a      	str	r2, [r3, #36]	; 0x24
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	3a77      	subs	r2, #119	; 0x77
 800e352:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800e354:	0020      	movs	r0, r4
 800e356:	f7ff ff6d 	bl	800e234 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800e35a:	2800      	cmp	r0, #0
 800e35c:	d016      	beq.n	800e38c <HAL_RTC_SetDate+0x94>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e35e:	6823      	ldr	r3, [r4, #0]
 800e360:	22ff      	movs	r2, #255	; 0xff
 800e362:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800e364:	2800      	cmp	r0, #0
 800e366:	d102      	bne.n	800e36e <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 800e368:	2329      	movs	r3, #41	; 0x29
 800e36a:	3afe      	subs	r2, #254	; 0xfe
 800e36c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e36e:	2328      	movs	r3, #40	; 0x28
 800e370:	2200      	movs	r2, #0
 800e372:	54e2      	strb	r2, [r4, r3]
}
 800e374:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e376:	78f5      	ldrb	r5, [r6, #3]
 800e378:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e37a:	7870      	ldrb	r0, [r6, #1]
 800e37c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e37e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800e380:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800e382:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e384:	7830      	ldrb	r0, [r6, #0]
 800e386:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800e388:	4305      	orrs	r5, r0
 800e38a:	e7dd      	b.n	800e348 <HAL_RTC_SetDate+0x50>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	4804      	ldr	r0, [pc, #16]	; (800e3a0 <HAL_RTC_SetDate+0xa8>)
 800e390:	4005      	ands	r5, r0
 800e392:	605d      	str	r5, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 800e394:	0020      	movs	r0, r4
 800e396:	f7ff ff88 	bl	800e2aa <RTC_ExitInitMode>
 800e39a:	e7e0      	b.n	800e35e <HAL_RTC_SetDate+0x66>
 __HAL_LOCK(hrtc);
 800e39c:	2002      	movs	r0, #2
 800e39e:	e7e9      	b.n	800e374 <HAL_RTC_SetDate+0x7c>
 800e3a0:	00ffff3f 	.word	0x00ffff3f

0800e3a4 <HAL_RTC_SetTime>:
{
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	0004      	movs	r4, r0
 800e3a8:	000e      	movs	r6, r1
 800e3aa:	0015      	movs	r5, r2
  __HAL_LOCK(hrtc);
 800e3ac:	2328      	movs	r3, #40	; 0x28
 800e3ae:	5cc3      	ldrb	r3, [r0, r3]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d057      	beq.n	800e464 <HAL_RTC_SetTime+0xc0>
 800e3b4:	2328      	movs	r3, #40	; 0x28
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	3201      	adds	r2, #1
 800e3be:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e3c0:	6803      	ldr	r3, [r0, #0]
 800e3c2:	32c8      	adds	r2, #200	; 0xc8
 800e3c4:	625a      	str	r2, [r3, #36]	; 0x24
 800e3c6:	6803      	ldr	r3, [r0, #0]
 800e3c8:	3a77      	subs	r2, #119	; 0x77
 800e3ca:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800e3cc:	f7ff ff32 	bl	800e234 <RTC_EnterInitMode>
  if(status == HAL_OK)
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d12a      	bne.n	800e42a <HAL_RTC_SetTime+0x86>
    if(Format == RTC_FORMAT_BIN)
 800e3d4:	2d00      	cmp	r5, #0
 800e3d6:	d134      	bne.n	800e442 <HAL_RTC_SetTime+0x9e>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	699b      	ldr	r3, [r3, #24]
 800e3dc:	065b      	lsls	r3, r3, #25
 800e3de:	d401      	bmi.n	800e3e4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	70f3      	strb	r3, [r6, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e3e4:	7830      	ldrb	r0, [r6, #0]
 800e3e6:	f7fd f93b 	bl	800b660 <RTC_ByteToBcd2>
 800e3ea:	0405      	lsls	r5, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e3ec:	7870      	ldrb	r0, [r6, #1]
 800e3ee:	f7fd f937 	bl	800b660 <RTC_ByteToBcd2>
 800e3f2:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e3f4:	4305      	orrs	r5, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e3f6:	78b0      	ldrb	r0, [r6, #2]
 800e3f8:	f7fd f932 	bl	800b660 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e3fc:	4328      	orrs	r0, r5
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e3fe:	78f3      	ldrb	r3, [r6, #3]
 800e400:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e402:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800e404:	6823      	ldr	r3, [r4, #0]
 800e406:	4a18      	ldr	r2, [pc, #96]	; (800e468 <HAL_RTC_SetTime+0xc4>)
 800e408:	4010      	ands	r0, r2
 800e40a:	6018      	str	r0, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800e40c:	6822      	ldr	r2, [r4, #0]
 800e40e:	6993      	ldr	r3, [r2, #24]
 800e410:	4916      	ldr	r1, [pc, #88]	; (800e46c <HAL_RTC_SetTime+0xc8>)
 800e412:	400b      	ands	r3, r1
 800e414:	6193      	str	r3, [r2, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800e416:	6821      	ldr	r1, [r4, #0]
 800e418:	698b      	ldr	r3, [r1, #24]
 800e41a:	68f2      	ldr	r2, [r6, #12]
 800e41c:	6930      	ldr	r0, [r6, #16]
 800e41e:	4302      	orrs	r2, r0
 800e420:	4313      	orrs	r3, r2
 800e422:	618b      	str	r3, [r1, #24]
    status = RTC_ExitInitMode(hrtc);
 800e424:	0020      	movs	r0, r4
 800e426:	f7ff ff40 	bl	800e2aa <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	22ff      	movs	r2, #255	; 0xff
 800e42e:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 800e430:	2800      	cmp	r0, #0
 800e432:	d102      	bne.n	800e43a <HAL_RTC_SetTime+0x96>
   hrtc->State = HAL_RTC_STATE_READY;
 800e434:	2329      	movs	r3, #41	; 0x29
 800e436:	3afe      	subs	r2, #254	; 0xfe
 800e438:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e43a:	2328      	movs	r3, #40	; 0x28
 800e43c:	2200      	movs	r2, #0
 800e43e:	54e2      	strb	r2, [r4, r3]
}
 800e440:	bd70      	pop	{r4, r5, r6, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e442:	6823      	ldr	r3, [r4, #0]
 800e444:	699b      	ldr	r3, [r3, #24]
 800e446:	065b      	lsls	r3, r3, #25
 800e448:	d401      	bmi.n	800e44e <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800e44a:	2300      	movs	r3, #0
 800e44c:	70f3      	strb	r3, [r6, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e44e:	7830      	ldrb	r0, [r6, #0]
 800e450:	0400      	lsls	r0, r0, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e452:	7873      	ldrb	r3, [r6, #1]
 800e454:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e456:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800e458:	78b3      	ldrb	r3, [r6, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800e45a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800e45c:	78f3      	ldrb	r3, [r6, #3]
 800e45e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800e460:	4318      	orrs	r0, r3
 800e462:	e7cf      	b.n	800e404 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 800e464:	2002      	movs	r0, #2
 800e466:	e7eb      	b.n	800e440 <HAL_RTC_SetTime+0x9c>
 800e468:	007f7f7f 	.word	0x007f7f7f
 800e46c:	fffbffff 	.word	0xfffbffff

0800e470 <HAL_RTC_Init>:
{
 800e470:	b570      	push	{r4, r5, r6, lr}
 800e472:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 800e474:	d04e      	beq.n	800e514 <HAL_RTC_Init+0xa4>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800e476:	2329      	movs	r3, #41	; 0x29
 800e478:	5cc3      	ldrb	r3, [r0, r3]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d016      	beq.n	800e4ac <HAL_RTC_Init+0x3c>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e47e:	2329      	movs	r3, #41	; 0x29
 800e480:	2202      	movs	r2, #2
 800e482:	54e2      	strb	r2, [r4, r3]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e484:	6823      	ldr	r3, [r4, #0]
 800e486:	32c8      	adds	r2, #200	; 0xc8
 800e488:	625a      	str	r2, [r3, #36]	; 0x24
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	3a77      	subs	r2, #119	; 0x77
 800e48e:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800e490:	0020      	movs	r0, r4
 800e492:	f7ff fecf 	bl	800e234 <RTC_EnterInitMode>
    if(status == HAL_OK)
 800e496:	2800      	cmp	r0, #0
 800e498:	d011      	beq.n	800e4be <HAL_RTC_Init+0x4e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	22ff      	movs	r2, #255	; 0xff
 800e49e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d102      	bne.n	800e4aa <HAL_RTC_Init+0x3a>
      hrtc->State = HAL_RTC_STATE_READY;
 800e4a4:	2329      	movs	r3, #41	; 0x29
 800e4a6:	3afe      	subs	r2, #254	; 0xfe
 800e4a8:	54e2      	strb	r2, [r4, r3]
}
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800e4ac:	3328      	adds	r3, #40	; 0x28
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	54c2      	strb	r2, [r0, r3]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800e4b2:	2388      	movs	r3, #136	; 0x88
 800e4b4:	021b      	lsls	r3, r3, #8
 800e4b6:	6043      	str	r3, [r0, #4]
    HAL_RTC_MspInit(hrtc);
 800e4b8:	f7fc fa10 	bl	800a8dc <HAL_RTC_MspInit>
 800e4bc:	e7df      	b.n	800e47e <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800e4be:	6822      	ldr	r2, [r4, #0]
 800e4c0:	6993      	ldr	r3, [r2, #24]
 800e4c2:	4915      	ldr	r1, [pc, #84]	; (800e518 <HAL_RTC_Init+0xa8>)
 800e4c4:	400b      	ands	r3, r1
 800e4c6:	6193      	str	r3, [r2, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e4c8:	6821      	ldr	r1, [r4, #0]
 800e4ca:	698a      	ldr	r2, [r1, #24]
 800e4cc:	68a3      	ldr	r3, [r4, #8]
 800e4ce:	6960      	ldr	r0, [r4, #20]
 800e4d0:	4303      	orrs	r3, r0
 800e4d2:	69e0      	ldr	r0, [r4, #28]
 800e4d4:	4303      	orrs	r3, r0
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	618b      	str	r3, [r1, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	6922      	ldr	r2, [r4, #16]
 800e4de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800e4e0:	6821      	ldr	r1, [r4, #0]
 800e4e2:	690b      	ldr	r3, [r1, #16]
 800e4e4:	68e2      	ldr	r2, [r4, #12]
 800e4e6:	0412      	lsls	r2, r2, #16
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 800e4ec:	0020      	movs	r0, r4
 800e4ee:	f7ff fedc 	bl	800e2aa <RTC_ExitInitMode>
      if (status == HAL_OK)
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d1d1      	bne.n	800e49a <HAL_RTC_Init+0x2a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800e4f6:	6822      	ldr	r2, [r4, #0]
 800e4f8:	6993      	ldr	r3, [r2, #24]
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	08db      	lsrs	r3, r3, #3
 800e4fe:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e500:	6821      	ldr	r1, [r4, #0]
 800e502:	698a      	ldr	r2, [r1, #24]
 800e504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e506:	6a25      	ldr	r5, [r4, #32]
 800e508:	432b      	orrs	r3, r5
 800e50a:	69a5      	ldr	r5, [r4, #24]
 800e50c:	432b      	orrs	r3, r5
 800e50e:	4313      	orrs	r3, r2
 800e510:	618b      	str	r3, [r1, #24]
 800e512:	e7c2      	b.n	800e49a <HAL_RTC_Init+0x2a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800e514:	2001      	movs	r0, #1
 800e516:	e7c8      	b.n	800e4aa <HAL_RTC_Init+0x3a>
 800e518:	fb8fffbf 	.word	0xfb8fffbf

0800e51c <HAL_RTC_DeactivateAlarm>:
{
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800e520:	2328      	movs	r3, #40	; 0x28
 800e522:	5cc3      	ldrb	r3, [r0, r3]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d060      	beq.n	800e5ea <HAL_RTC_DeactivateAlarm+0xce>
 800e528:	2328      	movs	r3, #40	; 0x28
 800e52a:	2201      	movs	r2, #1
 800e52c:	54c2      	strb	r2, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e52e:	3301      	adds	r3, #1
 800e530:	3201      	adds	r2, #1
 800e532:	54c2      	strb	r2, [r0, r3]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e534:	6803      	ldr	r3, [r0, #0]
 800e536:	32c8      	adds	r2, #200	; 0xc8
 800e538:	625a      	str	r2, [r3, #36]	; 0x24
 800e53a:	6803      	ldr	r3, [r0, #0]
 800e53c:	3a77      	subs	r2, #119	; 0x77
 800e53e:	625a      	str	r2, [r3, #36]	; 0x24
  if(Alarm == RTC_ALARM_A)
 800e540:	2380      	movs	r3, #128	; 0x80
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	4299      	cmp	r1, r3
 800e546:	d022      	beq.n	800e58e <HAL_RTC_DeactivateAlarm+0x72>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e548:	6802      	ldr	r2, [r0, #0]
 800e54a:	6993      	ldr	r3, [r2, #24]
 800e54c:	4928      	ldr	r1, [pc, #160]	; (800e5f0 <HAL_RTC_DeactivateAlarm+0xd4>)
 800e54e:	400b      	ands	r3, r1
 800e550:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 800e552:	6802      	ldr	r2, [r0, #0]
 800e554:	6993      	ldr	r3, [r2, #24]
 800e556:	4927      	ldr	r1, [pc, #156]	; (800e5f4 <HAL_RTC_DeactivateAlarm+0xd8>)
 800e558:	400b      	ands	r3, r1
 800e55a:	6193      	str	r3, [r2, #24]
    tickstart = HAL_GetTick();
 800e55c:	f7ff fa54 	bl	800da08 <HAL_GetTick>
 800e560:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	079b      	lsls	r3, r3, #30
 800e568:	d434      	bmi.n	800e5d4 <HAL_RTC_DeactivateAlarm+0xb8>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e56a:	f7ff fa4d 	bl	800da08 <HAL_GetTick>
 800e56e:	1b40      	subs	r0, r0, r5
 800e570:	23fa      	movs	r3, #250	; 0xfa
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4298      	cmp	r0, r3
 800e576:	d9f4      	bls.n	800e562 <HAL_RTC_DeactivateAlarm+0x46>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	22ff      	movs	r2, #255	; 0xff
 800e57c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e57e:	2329      	movs	r3, #41	; 0x29
 800e580:	3afc      	subs	r2, #252	; 0xfc
 800e582:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e584:	3b01      	subs	r3, #1
 800e586:	2200      	movs	r2, #0
 800e588:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e58a:	2003      	movs	r0, #3
 800e58c:	e02c      	b.n	800e5e8 <HAL_RTC_DeactivateAlarm+0xcc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e58e:	6802      	ldr	r2, [r0, #0]
 800e590:	6993      	ldr	r3, [r2, #24]
 800e592:	4919      	ldr	r1, [pc, #100]	; (800e5f8 <HAL_RTC_DeactivateAlarm+0xdc>)
 800e594:	400b      	ands	r3, r1
 800e596:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800e598:	6802      	ldr	r2, [r0, #0]
 800e59a:	6993      	ldr	r3, [r2, #24]
 800e59c:	4917      	ldr	r1, [pc, #92]	; (800e5fc <HAL_RTC_DeactivateAlarm+0xe0>)
 800e59e:	400b      	ands	r3, r1
 800e5a0:	6193      	str	r3, [r2, #24]
    tickstart = HAL_GetTick();
 800e5a2:	f7ff fa31 	bl	800da08 <HAL_GetTick>
 800e5a6:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e5a8:	6823      	ldr	r3, [r4, #0]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	07db      	lsls	r3, r3, #31
 800e5ae:	d411      	bmi.n	800e5d4 <HAL_RTC_DeactivateAlarm+0xb8>
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800e5b0:	f7ff fa2a 	bl	800da08 <HAL_GetTick>
 800e5b4:	1b40      	subs	r0, r0, r5
 800e5b6:	23fa      	movs	r3, #250	; 0xfa
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4298      	cmp	r0, r3
 800e5bc:	d9f4      	bls.n	800e5a8 <HAL_RTC_DeactivateAlarm+0x8c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	22ff      	movs	r2, #255	; 0xff
 800e5c2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e5c4:	2329      	movs	r3, #41	; 0x29
 800e5c6:	3afc      	subs	r2, #252	; 0xfc
 800e5c8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e5d0:	2003      	movs	r0, #3
 800e5d2:	e009      	b.n	800e5e8 <HAL_RTC_DeactivateAlarm+0xcc>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	22ff      	movs	r2, #255	; 0xff
 800e5d8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e5da:	2329      	movs	r3, #41	; 0x29
 800e5dc:	3afe      	subs	r2, #254	; 0xfe
 800e5de:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e5e0:	3b01      	subs	r3, #1
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e5e6:	2000      	movs	r0, #0
}
 800e5e8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 800e5ea:	2002      	movs	r0, #2
 800e5ec:	e7fc      	b.n	800e5e8 <HAL_RTC_DeactivateAlarm+0xcc>
 800e5ee:	46c0      	nop			; (mov r8, r8)
 800e5f0:	fffffdff 	.word	0xfffffdff
 800e5f4:	ffffdfff 	.word	0xffffdfff
 800e5f8:	fffffeff 	.word	0xfffffeff
 800e5fc:	ffffefff 	.word	0xffffefff

0800e600 <HAL_RTC_SetAlarm_IT>:
{
 800e600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e602:	0004      	movs	r4, r0
 800e604:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800e606:	2328      	movs	r3, #40	; 0x28
 800e608:	5cc3      	ldrb	r3, [r0, r3]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d100      	bne.n	800e610 <HAL_RTC_SetAlarm_IT+0x10>
 800e60e:	e0c6      	b.n	800e79e <HAL_RTC_SetAlarm_IT+0x19e>
 800e610:	2328      	movs	r3, #40	; 0x28
 800e612:	2101      	movs	r1, #1
 800e614:	54c1      	strb	r1, [r0, r3]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800e616:	3301      	adds	r3, #1
 800e618:	3101      	adds	r1, #1
 800e61a:	54c1      	strb	r1, [r0, r3]
  if(Format == RTC_FORMAT_BIN)
 800e61c:	2a00      	cmp	r2, #0
 800e61e:	d150      	bne.n	800e6c2 <HAL_RTC_SetAlarm_IT+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e620:	6803      	ldr	r3, [r0, #0]
 800e622:	699b      	ldr	r3, [r3, #24]
 800e624:	065b      	lsls	r3, r3, #25
 800e626:	d401      	bmi.n	800e62c <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e628:	2300      	movs	r3, #0
 800e62a:	70eb      	strb	r3, [r5, #3]
    if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 800e62c:	69ee      	ldr	r6, [r5, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e62e:	7828      	ldrb	r0, [r5, #0]
 800e630:	f7fd f816 	bl	800b660 <RTC_ByteToBcd2>
 800e634:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e636:	7868      	ldrb	r0, [r5, #1]
 800e638:	f7fd f812 	bl	800b660 <RTC_ByteToBcd2>
 800e63c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e63e:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e640:	78a8      	ldrb	r0, [r5, #2]
 800e642:	f7fd f80d 	bl	800b660 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e646:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e648:	78e8      	ldrb	r0, [r5, #3]
 800e64a:	0580      	lsls	r0, r0, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e64c:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e64e:	2320      	movs	r3, #32
 800e650:	5ce8      	ldrb	r0, [r5, r3]
 800e652:	f7fd f805 	bl	800b660 <RTC_ByteToBcd2>
 800e656:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e658:	4307      	orrs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e65a:	433e      	orrs	r6, r7
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e65c:	696b      	ldr	r3, [r5, #20]
 800e65e:	431e      	orrs	r6, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800e660:	686f      	ldr	r7, [r5, #4]
 800e662:	69ab      	ldr	r3, [r5, #24]
 800e664:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	22ca      	movs	r2, #202	; 0xca
 800e66a:	625a      	str	r2, [r3, #36]	; 0x24
 800e66c:	6823      	ldr	r3, [r4, #0]
 800e66e:	3a77      	subs	r2, #119	; 0x77
 800e670:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800e672:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e674:	2380      	movs	r3, #128	; 0x80
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	429a      	cmp	r2, r3
 800e67a:	d03b      	beq.n	800e6f4 <HAL_RTC_SetAlarm_IT+0xf4>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800e67c:	6822      	ldr	r2, [r4, #0]
 800e67e:	6993      	ldr	r3, [r2, #24]
 800e680:	4948      	ldr	r1, [pc, #288]	; (800e7a4 <HAL_RTC_SetAlarm_IT+0x1a4>)
 800e682:	400b      	ands	r3, r1
 800e684:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800e686:	6822      	ldr	r2, [r4, #0]
 800e688:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e68a:	2102      	movs	r1, #2
 800e68c:	430b      	orrs	r3, r1
 800e68e:	65d3      	str	r3, [r2, #92]	; 0x5c
    tickstart = HAL_GetTick();
 800e690:	f7ff f9ba 	bl	800da08 <HAL_GetTick>
 800e694:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800e696:	6823      	ldr	r3, [r4, #0]
 800e698:	68da      	ldr	r2, [r3, #12]
 800e69a:	0792      	lsls	r2, r2, #30
 800e69c:	d45e      	bmi.n	800e75c <HAL_RTC_SetAlarm_IT+0x15c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e69e:	f7ff f9b3 	bl	800da08 <HAL_GetTick>
 800e6a2:	1b40      	subs	r0, r0, r5
 800e6a4:	23fa      	movs	r3, #250	; 0xfa
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4298      	cmp	r0, r3
 800e6aa:	d9f4      	bls.n	800e696 <HAL_RTC_SetAlarm_IT+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e6ac:	6823      	ldr	r3, [r4, #0]
 800e6ae:	22ff      	movs	r2, #255	; 0xff
 800e6b0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e6b2:	2329      	movs	r3, #41	; 0x29
 800e6b4:	3afc      	subs	r2, #252	; 0xfc
 800e6b6:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e6be:	2003      	movs	r0, #3
 800e6c0:	e06c      	b.n	800e79c <HAL_RTC_SetAlarm_IT+0x19c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800e6c2:	6803      	ldr	r3, [r0, #0]
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	065b      	lsls	r3, r3, #25
 800e6c8:	d401      	bmi.n	800e6ce <HAL_RTC_SetAlarm_IT+0xce>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e6ce:	782e      	ldrb	r6, [r5, #0]
 800e6d0:	0436      	lsls	r6, r6, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e6d2:	786b      	ldrb	r3, [r5, #1]
 800e6d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e6d6:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e6d8:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800e6da:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e6dc:	78eb      	ldrb	r3, [r5, #3]
 800e6de:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800e6e0:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e6e2:	2320      	movs	r3, #32
 800e6e4:	5ceb      	ldrb	r3, [r5, r3]
 800e6e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800e6e8:	431e      	orrs	r6, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800e6ea:	69eb      	ldr	r3, [r5, #28]
 800e6ec:	431e      	orrs	r6, r3
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800e6ee:	696b      	ldr	r3, [r5, #20]
 800e6f0:	431e      	orrs	r6, r3
 800e6f2:	e7b5      	b.n	800e660 <HAL_RTC_SetAlarm_IT+0x60>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800e6f4:	6822      	ldr	r2, [r4, #0]
 800e6f6:	6993      	ldr	r3, [r2, #24]
 800e6f8:	492b      	ldr	r1, [pc, #172]	; (800e7a8 <HAL_RTC_SetAlarm_IT+0x1a8>)
 800e6fa:	400b      	ands	r3, r1
 800e6fc:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800e6fe:	6822      	ldr	r2, [r4, #0]
 800e700:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800e702:	3103      	adds	r1, #3
 800e704:	31ff      	adds	r1, #255	; 0xff
 800e706:	430b      	orrs	r3, r1
 800e708:	65d3      	str	r3, [r2, #92]	; 0x5c
    tickstart = HAL_GetTick();
 800e70a:	f7ff f97d 	bl	800da08 <HAL_GetTick>
 800e70e:	0005      	movs	r5, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	68da      	ldr	r2, [r3, #12]
 800e714:	07d2      	lsls	r2, r2, #31
 800e716:	d411      	bmi.n	800e73c <HAL_RTC_SetAlarm_IT+0x13c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800e718:	f7ff f976 	bl	800da08 <HAL_GetTick>
 800e71c:	1b40      	subs	r0, r0, r5
 800e71e:	23fa      	movs	r3, #250	; 0xfa
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4298      	cmp	r0, r3
 800e724:	d9f4      	bls.n	800e710 <HAL_RTC_SetAlarm_IT+0x110>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e726:	6823      	ldr	r3, [r4, #0]
 800e728:	22ff      	movs	r2, #255	; 0xff
 800e72a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e72c:	2329      	movs	r3, #41	; 0x29
 800e72e:	3afc      	subs	r2, #252	; 0xfc
 800e730:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hrtc);
 800e732:	3b01      	subs	r3, #1
 800e734:	2200      	movs	r2, #0
 800e736:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800e738:	2003      	movs	r0, #3
 800e73a:	e02f      	b.n	800e79c <HAL_RTC_SetAlarm_IT+0x19c>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800e73c:	641e      	str	r6, [r3, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	645f      	str	r7, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800e742:	6822      	ldr	r2, [r4, #0]
 800e744:	6991      	ldr	r1, [r2, #24]
 800e746:	2380      	movs	r3, #128	; 0x80
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	430b      	orrs	r3, r1
 800e74c:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800e74e:	6822      	ldr	r2, [r4, #0]
 800e750:	6991      	ldr	r1, [r2, #24]
 800e752:	2380      	movs	r3, #128	; 0x80
 800e754:	015b      	lsls	r3, r3, #5
 800e756:	430b      	orrs	r3, r1
 800e758:	6193      	str	r3, [r2, #24]
 800e75a:	e00e      	b.n	800e77a <HAL_RTC_SetAlarm_IT+0x17a>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800e75c:	649e      	str	r6, [r3, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800e75e:	6823      	ldr	r3, [r4, #0]
 800e760:	64df      	str	r7, [r3, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800e762:	6822      	ldr	r2, [r4, #0]
 800e764:	6991      	ldr	r1, [r2, #24]
 800e766:	2380      	movs	r3, #128	; 0x80
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	430b      	orrs	r3, r1
 800e76c:	6193      	str	r3, [r2, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800e76e:	6822      	ldr	r2, [r4, #0]
 800e770:	6991      	ldr	r1, [r2, #24]
 800e772:	2380      	movs	r3, #128	; 0x80
 800e774:	019b      	lsls	r3, r3, #6
 800e776:	430b      	orrs	r3, r1
 800e778:	6193      	str	r3, [r2, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800e77a:	490c      	ldr	r1, [pc, #48]	; (800e7ac <HAL_RTC_SetAlarm_IT+0x1ac>)
 800e77c:	2280      	movs	r2, #128	; 0x80
 800e77e:	5888      	ldr	r0, [r1, r2]
 800e780:	2380      	movs	r3, #128	; 0x80
 800e782:	031b      	lsls	r3, r3, #12
 800e784:	4303      	orrs	r3, r0
 800e786:	508b      	str	r3, [r1, r2]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	327f      	adds	r2, #127	; 0x7f
 800e78c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800e78e:	2329      	movs	r3, #41	; 0x29
 800e790:	3afe      	subs	r2, #254	; 0xfe
 800e792:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hrtc);
 800e794:	3b01      	subs	r3, #1
 800e796:	2200      	movs	r2, #0
 800e798:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800e79a:	2000      	movs	r0, #0
}
 800e79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800e79e:	2002      	movs	r0, #2
 800e7a0:	e7fc      	b.n	800e79c <HAL_RTC_SetAlarm_IT+0x19c>
 800e7a2:	46c0      	nop			; (mov r8, r8)
 800e7a4:	fffffdff 	.word	0xfffffdff
 800e7a8:	fffffeff 	.word	0xfffffeff
 800e7ac:	40021800 	.word	0x40021800

0800e7b0 <HAL_Delay>:
{
 800e7b0:	b570      	push	{r4, r5, r6, lr}
 800e7b2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e7b4:	f7ff f928 	bl	800da08 <HAL_GetTick>
 800e7b8:	0005      	movs	r5, r0
  if (wait < HAL_MAX_DELAY)
 800e7ba:	1c63      	adds	r3, r4, #1
 800e7bc:	d000      	beq.n	800e7c0 <HAL_Delay+0x10>
    wait += (uint32_t)(uwTickFreq);
 800e7be:	3401      	adds	r4, #1
  while ((HAL_GetTick() - tickstart) < wait)
 800e7c0:	f7ff f922 	bl	800da08 <HAL_GetTick>
 800e7c4:	1b40      	subs	r0, r0, r5
 800e7c6:	42a0      	cmp	r0, r4
 800e7c8:	d3fa      	bcc.n	800e7c0 <HAL_Delay+0x10>
}
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}

0800e7cc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e7cc:	b570      	push	{r4, r5, r6, lr}
 800e7ce:	0005      	movs	r5, r0
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800e7d0:	f7ff f91a 	bl	800da08 <HAL_GetTick>
 800e7d4:	1944      	adds	r4, r0, r5

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800e7d6:	4b17      	ldr	r3, [pc, #92]	; (800e834 <FLASH_WaitForLastOperation+0x68>)
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	03db      	lsls	r3, r3, #15
 800e7dc:	d505      	bpl.n	800e7ea <FLASH_WaitForLastOperation+0x1e>
  {
    if (HAL_GetTick() >= timeout)
 800e7de:	f7ff f913 	bl	800da08 <HAL_GetTick>
 800e7e2:	42a0      	cmp	r0, r4
 800e7e4:	d3f7      	bcc.n	800e7d6 <FLASH_WaitForLastOperation+0xa>
    {
      return HAL_TIMEOUT;
 800e7e6:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800e7e8:	bd70      	pop	{r4, r5, r6, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800e7ea:	4a12      	ldr	r2, [pc, #72]	; (800e834 <FLASH_WaitForLastOperation+0x68>)
 800e7ec:	6913      	ldr	r3, [r2, #16]
 800e7ee:	4912      	ldr	r1, [pc, #72]	; (800e838 <FLASH_WaitForLastOperation+0x6c>)
 800e7f0:	400b      	ands	r3, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800e7f2:	4912      	ldr	r1, [pc, #72]	; (800e83c <FLASH_WaitForLastOperation+0x70>)
 800e7f4:	6111      	str	r1, [r2, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800e7f6:	6992      	ldr	r2, [r2, #24]
 800e7f8:	2180      	movs	r1, #128	; 0x80
 800e7fa:	05c9      	lsls	r1, r1, #23
 800e7fc:	400a      	ands	r2, r1
  if(eccerr != 0x00u)
 800e7fe:	d004      	beq.n	800e80a <FLASH_WaitForLastOperation+0x3e>
    FLASH->ECCR |= eccerr;
 800e800:	480c      	ldr	r0, [pc, #48]	; (800e834 <FLASH_WaitForLastOperation+0x68>)
 800e802:	6981      	ldr	r1, [r0, #24]
 800e804:	4311      	orrs	r1, r2
 800e806:	6181      	str	r1, [r0, #24]
    error |= eccerr;
 800e808:	4313      	orrs	r3, r2
  if (error != 0x00U)
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d003      	beq.n	800e816 <FLASH_WaitForLastOperation+0x4a>
    pFlash.ErrorCode = error;
 800e80e:	4a0c      	ldr	r2, [pc, #48]	; (800e840 <FLASH_WaitForLastOperation+0x74>)
 800e810:	6413      	str	r3, [r2, #64]	; 0x40
    return HAL_ERROR;
 800e812:	2001      	movs	r0, #1
 800e814:	e7e8      	b.n	800e7e8 <FLASH_WaitForLastOperation+0x1c>
  timeout = HAL_GetTick() + Timeout;
 800e816:	f7ff f8f7 	bl	800da08 <HAL_GetTick>
 800e81a:	1945      	adds	r5, r0, r5
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800e81c:	4b05      	ldr	r3, [pc, #20]	; (800e834 <FLASH_WaitForLastOperation+0x68>)
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	035b      	lsls	r3, r3, #13
 800e822:	d505      	bpl.n	800e830 <FLASH_WaitForLastOperation+0x64>
    if (HAL_GetTick() >= timeout)
 800e824:	f7ff f8f0 	bl	800da08 <HAL_GetTick>
 800e828:	42a8      	cmp	r0, r5
 800e82a:	d3f7      	bcc.n	800e81c <FLASH_WaitForLastOperation+0x50>
      return HAL_TIMEOUT;
 800e82c:	2003      	movs	r0, #3
 800e82e:	e7db      	b.n	800e7e8 <FLASH_WaitForLastOperation+0x1c>
  return HAL_OK;
 800e830:	2000      	movs	r0, #0
 800e832:	e7d9      	b.n	800e7e8 <FLASH_WaitForLastOperation+0x1c>
 800e834:	40022000 	.word	0x40022000
 800e838:	0000c3fa 	.word	0x0000c3fa
 800e83c:	0000c3fb 	.word	0x0000c3fb
 800e840:	200005d8 	.word	0x200005d8

0800e844 <HAL_IncTick>:
  uwTick += uwTickFreq;
 800e844:	4a02      	ldr	r2, [pc, #8]	; (800e850 <HAL_IncTick+0xc>)
 800e846:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e848:	3301      	adds	r3, #1
 800e84a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e84c:	4770      	bx	lr
 800e84e:	46c0      	nop			; (mov r8, r8)
 800e850:	200005d8 	.word	0x200005d8

0800e854 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800e854:	2800      	cmp	r0, #0
 800e856:	db0a      	blt.n	800e86e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e858:	231f      	movs	r3, #31
 800e85a:	4018      	ands	r0, r3
 800e85c:	3b1e      	subs	r3, #30
 800e85e:	4083      	lsls	r3, r0
 800e860:	4903      	ldr	r1, [pc, #12]	; (800e870 <HAL_NVIC_DisableIRQ+0x1c>)
 800e862:	2280      	movs	r2, #128	; 0x80
 800e864:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800e866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800e86a:	f3bf 8f6f 	isb	sy
}
 800e86e:	4770      	bx	lr
 800e870:	e000e100 	.word	0xe000e100

0800e874 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800e874:	2800      	cmp	r0, #0
 800e876:	db05      	blt.n	800e884 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e878:	231f      	movs	r3, #31
 800e87a:	4018      	ands	r0, r3
 800e87c:	3b1e      	subs	r3, #30
 800e87e:	4083      	lsls	r3, r0
 800e880:	4a01      	ldr	r2, [pc, #4]	; (800e888 <HAL_NVIC_EnableIRQ+0x14>)
 800e882:	6013      	str	r3, [r2, #0]
}
 800e884:	4770      	bx	lr
 800e886:	46c0      	nop			; (mov r8, r8)
 800e888:	e000e100 	.word	0xe000e100

0800e88c <HAL_NVIC_SetPriority>:
{
 800e88c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800e88e:	2800      	cmp	r0, #0
 800e890:	db11      	blt.n	800e8b6 <HAL_NVIC_SetPriority+0x2a>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e892:	0883      	lsrs	r3, r0, #2
 800e894:	4d14      	ldr	r5, [pc, #80]	; (800e8e8 <HAL_NVIC_SetPriority+0x5c>)
 800e896:	33c0      	adds	r3, #192	; 0xc0
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	595c      	ldr	r4, [r3, r5]
 800e89c:	2203      	movs	r2, #3
 800e89e:	4010      	ands	r0, r2
 800e8a0:	00c0      	lsls	r0, r0, #3
 800e8a2:	32fc      	adds	r2, #252	; 0xfc
 800e8a4:	0016      	movs	r6, r2
 800e8a6:	4086      	lsls	r6, r0
 800e8a8:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e8aa:	0189      	lsls	r1, r1, #6
 800e8ac:	400a      	ands	r2, r1
 800e8ae:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8b0:	4322      	orrs	r2, r4
 800e8b2:	515a      	str	r2, [r3, r5]
}
 800e8b4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8b6:	b2c0      	uxtb	r0, r0
 800e8b8:	230f      	movs	r3, #15
 800e8ba:	4003      	ands	r3, r0
 800e8bc:	3b08      	subs	r3, #8
 800e8be:	089b      	lsrs	r3, r3, #2
 800e8c0:	3306      	adds	r3, #6
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4a09      	ldr	r2, [pc, #36]	; (800e8ec <HAL_NVIC_SetPriority+0x60>)
 800e8c6:	4694      	mov	ip, r2
 800e8c8:	4463      	add	r3, ip
 800e8ca:	685d      	ldr	r5, [r3, #4]
 800e8cc:	2403      	movs	r4, #3
 800e8ce:	4020      	ands	r0, r4
 800e8d0:	00c0      	lsls	r0, r0, #3
 800e8d2:	22ff      	movs	r2, #255	; 0xff
 800e8d4:	0014      	movs	r4, r2
 800e8d6:	4084      	lsls	r4, r0
 800e8d8:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e8da:	0189      	lsls	r1, r1, #6
 800e8dc:	4011      	ands	r1, r2
 800e8de:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8e0:	4329      	orrs	r1, r5
 800e8e2:	6059      	str	r1, [r3, #4]
 800e8e4:	e7e6      	b.n	800e8b4 <HAL_NVIC_SetPriority+0x28>
 800e8e6:	46c0      	nop			; (mov r8, r8)
 800e8e8:	e000e100 	.word	0xe000e100
 800e8ec:	e000ed00 	.word	0xe000ed00

0800e8f0 <HAL_InitTick>:
{
 800e8f0:	b510      	push	{r4, lr}
 800e8f2:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	; (800e928 <HAL_InitTick+0x38>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	21fa      	movs	r1, #250	; 0xfa
 800e8fa:	0089      	lsls	r1, r1, #2
 800e8fc:	f002 fc2a 	bl	8011154 <__udivsi3>
 800e900:	f7fc ffa9 	bl	800b856 <HAL_SYSTICK_Config>
 800e904:	2800      	cmp	r0, #0
 800e906:	d10d      	bne.n	800e924 <HAL_InitTick+0x34>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e908:	2c03      	cmp	r4, #3
 800e90a:	d901      	bls.n	800e910 <HAL_InitTick+0x20>
        status = HAL_ERROR;
 800e90c:	2001      	movs	r0, #1
 800e90e:	e00a      	b.n	800e926 <HAL_InitTick+0x36>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e910:	3001      	adds	r0, #1
 800e912:	2200      	movs	r2, #0
 800e914:	0021      	movs	r1, r4
 800e916:	4240      	negs	r0, r0
 800e918:	f7ff ffb8 	bl	800e88c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e91c:	4b02      	ldr	r3, [pc, #8]	; (800e928 <HAL_InitTick+0x38>)
 800e91e:	605c      	str	r4, [r3, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800e920:	2000      	movs	r0, #0
 800e922:	e000      	b.n	800e926 <HAL_InitTick+0x36>
      status = HAL_ERROR;
 800e924:	2001      	movs	r0, #1
}
 800e926:	bd10      	pop	{r4, pc}
 800e928:	20000000 	.word	0x20000000

0800e92c <HAL_Init>:
{
 800e92c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e92e:	4a08      	ldr	r2, [pc, #32]	; (800e950 <HAL_Init+0x24>)
 800e930:	6811      	ldr	r1, [r2, #0]
 800e932:	2380      	movs	r3, #128	; 0x80
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	430b      	orrs	r3, r1
 800e938:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800e93a:	2000      	movs	r0, #0
 800e93c:	f7ff ffd8 	bl	800e8f0 <HAL_InitTick>
 800e940:	1e04      	subs	r4, r0, #0
 800e942:	d002      	beq.n	800e94a <HAL_Init+0x1e>
    status = HAL_ERROR;
 800e944:	2401      	movs	r4, #1
}
 800e946:	0020      	movs	r0, r4
 800e948:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800e94a:	f7fc f827 	bl	800a99c <HAL_MspInit>
 800e94e:	e7fa      	b.n	800e946 <HAL_Init+0x1a>
 800e950:	40022000 	.word	0x40022000

0800e954 <HAL_PWREx_ControlVoltageScaling>:
{
 800e954:	b510      	push	{r4, lr}
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800e956:	4a10      	ldr	r2, [pc, #64]	; (800e998 <HAL_PWREx_ControlVoltageScaling+0x44>)
 800e958:	6813      	ldr	r3, [r2, #0]
 800e95a:	4910      	ldr	r1, [pc, #64]	; (800e99c <HAL_PWREx_ControlVoltageScaling+0x48>)
 800e95c:	400b      	ands	r3, r1
 800e95e:	4303      	orrs	r3, r0
 800e960:	6013      	str	r3, [r2, #0]
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e962:	2380      	movs	r3, #128	; 0x80
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4298      	cmp	r0, r3
 800e968:	d001      	beq.n	800e96e <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 800e96a:	2000      	movs	r0, #0
}
 800e96c:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800e96e:	4b0c      	ldr	r3, [pc, #48]	; (800e9a0 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	0053      	lsls	r3, r2, #1
 800e974:	189b      	adds	r3, r3, r2
 800e976:	0058      	lsls	r0, r3, #1
 800e978:	490a      	ldr	r1, [pc, #40]	; (800e9a4 <HAL_PWREx_ControlVoltageScaling+0x50>)
 800e97a:	f002 fbeb 	bl	8011154 <__udivsi3>
 800e97e:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <HAL_PWREx_ControlVoltageScaling+0x44>)
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	055b      	lsls	r3, r3, #21
 800e986:	d503      	bpl.n	800e990 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if(wait_loop_index != 0U)
 800e988:	2800      	cmp	r0, #0
 800e98a:	d003      	beq.n	800e994 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 800e98c:	3801      	subs	r0, #1
 800e98e:	e7f7      	b.n	800e980 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 800e990:	2000      	movs	r0, #0
 800e992:	e7eb      	b.n	800e96c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800e994:	2003      	movs	r0, #3
 800e996:	e7e9      	b.n	800e96c <HAL_PWREx_ControlVoltageScaling+0x18>
 800e998:	40007000 	.word	0x40007000
 800e99c:	fffff9ff 	.word	0xfffff9ff
 800e9a0:	20000000 	.word	0x20000000
 800e9a4:	000f4240 	.word	0x000f4240

0800e9a8 <HAL_PWR_DisableSleepOnExit>:
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800e9a8:	4a02      	ldr	r2, [pc, #8]	; (800e9b4 <HAL_PWR_DisableSleepOnExit+0xc>)
 800e9aa:	6913      	ldr	r3, [r2, #16]
 800e9ac:	2102      	movs	r1, #2
 800e9ae:	438b      	bics	r3, r1
 800e9b0:	6113      	str	r3, [r2, #16]
}
 800e9b2:	4770      	bx	lr
 800e9b4:	e000ed00 	.word	0xe000ed00

0800e9b8 <HAL_PWR_EnterSTOPMode>:
  if (Regulator != PWR_MAINREGULATOR_ON)
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d016      	beq.n	800e9ea <HAL_PWR_EnterSTOPMode+0x32>
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 800e9bc:	4a0f      	ldr	r2, [pc, #60]	; (800e9fc <HAL_PWR_EnterSTOPMode+0x44>)
 800e9be:	6813      	ldr	r3, [r2, #0]
 800e9c0:	2007      	movs	r0, #7
 800e9c2:	4383      	bics	r3, r0
 800e9c4:	3806      	subs	r0, #6
 800e9c6:	4303      	orrs	r3, r0
 800e9c8:	6013      	str	r3, [r2, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e9ca:	4a0d      	ldr	r2, [pc, #52]	; (800ea00 <HAL_PWR_EnterSTOPMode+0x48>)
 800e9cc:	6913      	ldr	r3, [r2, #16]
 800e9ce:	2004      	movs	r0, #4
 800e9d0:	4303      	orrs	r3, r0
 800e9d2:	6113      	str	r3, [r2, #16]
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800e9d4:	2901      	cmp	r1, #1
 800e9d6:	d00e      	beq.n	800e9f6 <HAL_PWR_EnterSTOPMode+0x3e>
    __SEV();
 800e9d8:	bf40      	sev
    __WFE();
 800e9da:	bf20      	wfe
    __WFE();
 800e9dc:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800e9de:	4a08      	ldr	r2, [pc, #32]	; (800ea00 <HAL_PWR_EnterSTOPMode+0x48>)
 800e9e0:	6913      	ldr	r3, [r2, #16]
 800e9e2:	2104      	movs	r1, #4
 800e9e4:	438b      	bics	r3, r1
 800e9e6:	6113      	str	r3, [r2, #16]
}
 800e9e8:	4770      	bx	lr
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800e9ea:	4a04      	ldr	r2, [pc, #16]	; (800e9fc <HAL_PWR_EnterSTOPMode+0x44>)
 800e9ec:	6813      	ldr	r3, [r2, #0]
 800e9ee:	2007      	movs	r0, #7
 800e9f0:	4383      	bics	r3, r0
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	e7e9      	b.n	800e9ca <HAL_PWR_EnterSTOPMode+0x12>
    __WFI();
 800e9f6:	bf30      	wfi
 800e9f8:	e7f1      	b.n	800e9de <HAL_PWR_EnterSTOPMode+0x26>
 800e9fa:	46c0      	nop			; (mov r8, r8)
 800e9fc:	40007000 	.word	0x40007000
 800ea00:	e000ed00 	.word	0xe000ed00

0800ea04 <HAL_PWR_EnterSLEEPMode>:
{
 800ea04:	b510      	push	{r4, lr}
 800ea06:	000c      	movs	r4, r1
  if(Regulator != PWR_MAINREGULATOR_ON)
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	d011      	beq.n	800ea30 <HAL_PWR_EnterSLEEPMode+0x2c>
    if((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 800ea0c:	4b0e      	ldr	r3, [pc, #56]	; (800ea48 <HAL_PWR_EnterSLEEPMode+0x44>)
 800ea0e:	695b      	ldr	r3, [r3, #20]
 800ea10:	059b      	lsls	r3, r3, #22
 800ea12:	d50a      	bpl.n	800ea2a <HAL_PWR_EnterSLEEPMode+0x26>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800ea14:	4a0d      	ldr	r2, [pc, #52]	; (800ea4c <HAL_PWR_EnterSLEEPMode+0x48>)
 800ea16:	6913      	ldr	r3, [r2, #16]
 800ea18:	2104      	movs	r1, #4
 800ea1a:	438b      	bics	r3, r1
 800ea1c:	6113      	str	r3, [r2, #16]
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800ea1e:	2c01      	cmp	r4, #1
 800ea20:	d00f      	beq.n	800ea42 <HAL_PWR_EnterSLEEPMode+0x3e>
    __SEV();
 800ea22:	bf40      	sev
    __WFE();
 800ea24:	bf20      	wfe
    __WFE();
 800ea26:	bf20      	wfe
}
 800ea28:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableLowPowerRunMode();
 800ea2a:	f7fc ff55 	bl	800b8d8 <HAL_PWREx_EnableLowPowerRunMode>
 800ea2e:	e7f1      	b.n	800ea14 <HAL_PWR_EnterSLEEPMode+0x10>
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 800ea30:	4b05      	ldr	r3, [pc, #20]	; (800ea48 <HAL_PWR_EnterSLEEPMode+0x44>)
 800ea32:	695b      	ldr	r3, [r3, #20]
 800ea34:	059b      	lsls	r3, r3, #22
 800ea36:	d5ed      	bpl.n	800ea14 <HAL_PWR_EnterSLEEPMode+0x10>
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800ea38:	f7fc ff2a 	bl	800b890 <HAL_PWREx_DisableLowPowerRunMode>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d0e9      	beq.n	800ea14 <HAL_PWR_EnterSLEEPMode+0x10>
 800ea40:	e7f2      	b.n	800ea28 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFI();
 800ea42:	bf30      	wfi
 800ea44:	e7f0      	b.n	800ea28 <HAL_PWR_EnterSLEEPMode+0x24>
 800ea46:	46c0      	nop			; (mov r8, r8)
 800ea48:	40007000 	.word	0x40007000
 800ea4c:	e000ed00 	.word	0xe000ed00

0800ea50 <HAL_DMA_IRQHandler>:
{
 800ea50:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800ea52:	4b31      	ldr	r3, [pc, #196]	; (800eb18 <HAL_DMA_IRQHandler+0xc8>)
 800ea54:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800ea56:	6804      	ldr	r4, [r0, #0]
 800ea58:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800ea5a:	231c      	movs	r3, #28
 800ea5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ea5e:	4013      	ands	r3, r2
 800ea60:	2204      	movs	r2, #4
 800ea62:	409a      	lsls	r2, r3
 800ea64:	4211      	tst	r1, r2
 800ea66:	d016      	beq.n	800ea96 <HAL_DMA_IRQHandler+0x46>
 800ea68:	076a      	lsls	r2, r5, #29
 800ea6a:	d514      	bpl.n	800ea96 <HAL_DMA_IRQHandler+0x46>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	069b      	lsls	r3, r3, #26
 800ea70:	d403      	bmi.n	800ea7a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ea72:	6823      	ldr	r3, [r4, #0]
 800ea74:	2204      	movs	r2, #4
 800ea76:	4393      	bics	r3, r2
 800ea78:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800ea7a:	4927      	ldr	r1, [pc, #156]	; (800eb18 <HAL_DMA_IRQHandler+0xc8>)
 800ea7c:	684c      	ldr	r4, [r1, #4]
 800ea7e:	221c      	movs	r2, #28
 800ea80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ea82:	401a      	ands	r2, r3
 800ea84:	2304      	movs	r3, #4
 800ea86:	4093      	lsls	r3, r2
 800ea88:	4323      	orrs	r3, r4
 800ea8a:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800ea8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d000      	beq.n	800ea94 <HAL_DMA_IRQHandler+0x44>
      hdma->XferHalfCpltCallback(hdma);
 800ea92:	4798      	blx	r3
}
 800ea94:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ea96:	2202      	movs	r2, #2
 800ea98:	409a      	lsls	r2, r3
 800ea9a:	4211      	tst	r1, r2
 800ea9c:	d01c      	beq.n	800ead8 <HAL_DMA_IRQHandler+0x88>
 800ea9e:	07aa      	lsls	r2, r5, #30
 800eaa0:	d51a      	bpl.n	800ead8 <HAL_DMA_IRQHandler+0x88>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	069b      	lsls	r3, r3, #26
 800eaa6:	d406      	bmi.n	800eab6 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	220a      	movs	r2, #10
 800eaac:	4393      	bics	r3, r2
 800eaae:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800eab0:	2325      	movs	r3, #37	; 0x25
 800eab2:	3a09      	subs	r2, #9
 800eab4:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800eab6:	4918      	ldr	r1, [pc, #96]	; (800eb18 <HAL_DMA_IRQHandler+0xc8>)
 800eab8:	684c      	ldr	r4, [r1, #4]
 800eaba:	221c      	movs	r2, #28
 800eabc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eabe:	401a      	ands	r2, r3
 800eac0:	2302      	movs	r3, #2
 800eac2:	4093      	lsls	r3, r2
 800eac4:	4323      	orrs	r3, r4
 800eac6:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800eac8:	2324      	movs	r3, #36	; 0x24
 800eaca:	2200      	movs	r2, #0
 800eacc:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 800eace:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d0df      	beq.n	800ea94 <HAL_DMA_IRQHandler+0x44>
      hdma->XferCpltCallback(hdma);
 800ead4:	4798      	blx	r3
 800ead6:	e7dd      	b.n	800ea94 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800ead8:	2208      	movs	r2, #8
 800eada:	409a      	lsls	r2, r3
 800eadc:	4211      	tst	r1, r2
 800eade:	d0d9      	beq.n	800ea94 <HAL_DMA_IRQHandler+0x44>
 800eae0:	072b      	lsls	r3, r5, #28
 800eae2:	d5d7      	bpl.n	800ea94 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eae4:	6823      	ldr	r3, [r4, #0]
 800eae6:	220e      	movs	r2, #14
 800eae8:	4393      	bics	r3, r2
 800eaea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800eaec:	4c0a      	ldr	r4, [pc, #40]	; (800eb18 <HAL_DMA_IRQHandler+0xc8>)
 800eaee:	6865      	ldr	r5, [r4, #4]
 800eaf0:	211c      	movs	r1, #28
 800eaf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800eaf4:	4019      	ands	r1, r3
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	001a      	movs	r2, r3
 800eafa:	408a      	lsls	r2, r1
 800eafc:	432a      	orrs	r2, r5
 800eafe:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800eb00:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800eb02:	2225      	movs	r2, #37	; 0x25
 800eb04:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800eb06:	3323      	adds	r3, #35	; 0x23
 800eb08:	2200      	movs	r2, #0
 800eb0a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800eb0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0c0      	beq.n	800ea94 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800eb12:	4798      	blx	r3
 800eb14:	e7be      	b.n	800ea94 <HAL_DMA_IRQHandler+0x44>
 800eb16:	46c0      	nop			; (mov r8, r8)
 800eb18:	40020000 	.word	0x40020000

0800eb1c <HAL_DMA_DeInit>:
{
 800eb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1e:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 800eb20:	d03b      	beq.n	800eb9a <HAL_DMA_DeInit+0x7e>
  __HAL_DMA_DISABLE(hdma);
 800eb22:	6802      	ldr	r2, [r0, #0]
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	2501      	movs	r5, #1
 800eb28:	43ab      	bics	r3, r5
 800eb2a:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800eb2c:	6807      	ldr	r7, [r0, #0]
 800eb2e:	4b1c      	ldr	r3, [pc, #112]	; (800eba0 <HAL_DMA_DeInit+0x84>)
 800eb30:	18f8      	adds	r0, r7, r3
 800eb32:	2114      	movs	r1, #20
 800eb34:	f002 fb0e 	bl	8011154 <__udivsi3>
 800eb38:	0080      	lsls	r0, r0, #2
 800eb3a:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 800eb3c:	2600      	movs	r6, #0
 800eb3e:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800eb40:	4a18      	ldr	r2, [pc, #96]	; (800eba4 <HAL_DMA_DeInit+0x88>)
 800eb42:	6851      	ldr	r1, [r2, #4]
 800eb44:	231c      	movs	r3, #28
 800eb46:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800eb48:	4003      	ands	r3, r0
 800eb4a:	409d      	lsls	r5, r3
 800eb4c:	430d      	orrs	r5, r1
 800eb4e:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800eb50:	0020      	movs	r0, r4
 800eb52:	f7fc fedf 	bl	800b914 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800eb56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eb58:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800eb5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eb5c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800eb5e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800eb60:	6863      	ldr	r3, [r4, #4]
 800eb62:	3b01      	subs	r3, #1
 800eb64:	2b03      	cmp	r3, #3
 800eb66:	d90e      	bls.n	800eb86 <HAL_DMA_DeInit+0x6a>
  hdma->XferCpltCallback = NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800eb6c:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800eb6e:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800eb70:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800eb72:	6523      	str	r3, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800eb74:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800eb76:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb78:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800eb7a:	2225      	movs	r2, #37	; 0x25
 800eb7c:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 800eb7e:	3a01      	subs	r2, #1
 800eb80:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800eb82:	2000      	movs	r0, #0
}
 800eb84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800eb86:	0020      	movs	r0, r4
 800eb88:	f7fc feb0 	bl	800b8ec <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800eb8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800eb8e:	2200      	movs	r2, #0
 800eb90:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800eb92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eb94:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800eb96:	605a      	str	r2, [r3, #4]
 800eb98:	e7e6      	b.n	800eb68 <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	e7f2      	b.n	800eb84 <HAL_DMA_DeInit+0x68>
 800eb9e:	46c0      	nop			; (mov r8, r8)
 800eba0:	bffdfff8 	.word	0xbffdfff8
 800eba4:	40020000 	.word	0x40020000

0800eba8 <HAL_DMA_Init>:
{
 800eba8:	b570      	push	{r4, r5, r6, lr}
 800ebaa:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 800ebac:	d04d      	beq.n	800ec4a <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ebae:	6805      	ldr	r5, [r0, #0]
 800ebb0:	4b27      	ldr	r3, [pc, #156]	; (800ec50 <HAL_DMA_Init+0xa8>)
 800ebb2:	18e8      	adds	r0, r5, r3
 800ebb4:	2114      	movs	r1, #20
 800ebb6:	f002 facd 	bl	8011154 <__udivsi3>
 800ebba:	0080      	lsls	r0, r0, #2
 800ebbc:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800ebbe:	2325      	movs	r3, #37	; 0x25
 800ebc0:	2202      	movs	r2, #2
 800ebc2:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	4a23      	ldr	r2, [pc, #140]	; (800ec54 <HAL_DMA_Init+0xac>)
 800ebc8:	4013      	ands	r3, r2
 800ebca:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	6811      	ldr	r1, [r2, #0]
 800ebd0:	68a3      	ldr	r3, [r4, #8]
 800ebd2:	68e0      	ldr	r0, [r4, #12]
 800ebd4:	4303      	orrs	r3, r0
 800ebd6:	6920      	ldr	r0, [r4, #16]
 800ebd8:	4303      	orrs	r3, r0
 800ebda:	6960      	ldr	r0, [r4, #20]
 800ebdc:	4303      	orrs	r3, r0
 800ebde:	69a0      	ldr	r0, [r4, #24]
 800ebe0:	4303      	orrs	r3, r0
 800ebe2:	69e0      	ldr	r0, [r4, #28]
 800ebe4:	4303      	orrs	r3, r0
 800ebe6:	6a20      	ldr	r0, [r4, #32]
 800ebe8:	4303      	orrs	r3, r0
 800ebea:	430b      	orrs	r3, r1
 800ebec:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800ebee:	0020      	movs	r0, r4
 800ebf0:	f7fc fe90 	bl	800b914 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800ebf4:	2380      	movs	r3, #128	; 0x80
 800ebf6:	01db      	lsls	r3, r3, #7
 800ebf8:	68a2      	ldr	r2, [r4, #8]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d018      	beq.n	800ec30 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800ebfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ec00:	23ff      	movs	r3, #255	; 0xff
 800ec02:	6861      	ldr	r1, [r4, #4]
 800ec04:	400b      	ands	r3, r1
 800ec06:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ec08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ec0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ec0c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800ec0e:	6863      	ldr	r3, [r4, #4]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	2b03      	cmp	r3, #3
 800ec14:	d90f      	bls.n	800ec36 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800ec1a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ec1c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800ec22:	2225      	movs	r2, #37	; 0x25
 800ec24:	2101      	movs	r1, #1
 800ec26:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800ec28:	3a01      	subs	r2, #1
 800ec2a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800ec2c:	2000      	movs	r0, #0
}
 800ec2e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800ec30:	2300      	movs	r3, #0
 800ec32:	6063      	str	r3, [r4, #4]
 800ec34:	e7e3      	b.n	800ebfe <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ec36:	0020      	movs	r0, r4
 800ec38:	f7fc fe58 	bl	800b8ec <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ec3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800ec3e:	2200      	movs	r2, #0
 800ec40:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ec42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ec44:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ec46:	605a      	str	r2, [r3, #4]
 800ec48:	e7e9      	b.n	800ec1e <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 800ec4a:	2001      	movs	r0, #1
 800ec4c:	e7ef      	b.n	800ec2e <HAL_DMA_Init+0x86>
 800ec4e:	46c0      	nop			; (mov r8, r8)
 800ec50:	bffdfff8 	.word	0xbffdfff8
 800ec54:	ffff800f 	.word	0xffff800f

0800ec58 <HAL_FLASHEx_OBGetConfig>:
{
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	0004      	movs	r4, r0
  pOBInit->OptionType = OPTIONBYTE_ALL;
 800ec5c:	231f      	movs	r3, #31
 800ec5e:	6003      	str	r3, [r0, #0]
  FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800ec60:	0002      	movs	r2, r0
 800ec62:	320c      	adds	r2, #12
 800ec64:	0001      	movs	r1, r0
 800ec66:	3108      	adds	r1, #8
 800ec68:	6840      	ldr	r0, [r0, #4]
 800ec6a:	f7fd f8b1 	bl	800bdd0 <FLASH_OB_GetWRP>
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800ec6e:	f7fd f8a1 	bl	800bdb4 <FLASH_OB_GetRDP>
 800ec72:	6120      	str	r0, [r4, #16]
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800ec74:	f7fd f894 	bl	800bda0 <FLASH_OB_GetUser>
 800ec78:	61a0      	str	r0, [r4, #24]
  pOBInit->USERType = OB_USER_ALL;
 800ec7a:	4b0d      	ldr	r3, [pc, #52]	; (800ecb0 <HAL_FLASHEx_OBGetConfig+0x58>)
 800ec7c:	6163      	str	r3, [r4, #20]
  FLASH_OB_GetPCROP1A(&(pOBInit->PCROPConfig), &(pOBInit->PCROP1AStartAddr), &(pOBInit->PCROP1AEndAddr));
 800ec7e:	0022      	movs	r2, r4
 800ec80:	3224      	adds	r2, #36	; 0x24
 800ec82:	0021      	movs	r1, r4
 800ec84:	3120      	adds	r1, #32
 800ec86:	0020      	movs	r0, r4
 800ec88:	301c      	adds	r0, #28
 800ec8a:	f7fd f869 	bl	800bd60 <FLASH_OB_GetPCROP1A>
  FLASH_OB_GetPCROP1B(&(pOBInit->PCROP1BStartAddr), &(pOBInit->PCROP1BEndAddr));
 800ec8e:	0021      	movs	r1, r4
 800ec90:	312c      	adds	r1, #44	; 0x2c
 800ec92:	0020      	movs	r0, r4
 800ec94:	3028      	adds	r0, #40	; 0x28
 800ec96:	f7fd f84b 	bl	800bd30 <FLASH_OB_GetPCROP1B>
  pOBInit->PCROPConfig |= (OB_PCROP_ZONE_A | OB_PCROP_ZONE_B);
 800ec9a:	2303      	movs	r3, #3
 800ec9c:	69e2      	ldr	r2, [r4, #28]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	61e3      	str	r3, [r4, #28]
  FLASH_OB_GetSecMem(&(pOBInit->BootEntryPoint), &(pOBInit->SecSize));
 800eca2:	0021      	movs	r1, r4
 800eca4:	3134      	adds	r1, #52	; 0x34
 800eca6:	0020      	movs	r0, r4
 800eca8:	3030      	adds	r0, #48	; 0x30
 800ecaa:	f7fd f833 	bl	800bd14 <FLASH_OB_GetSecMem>
}
 800ecae:	bd10      	pop	{r4, pc}
 800ecb0:	3f4fff00 	.word	0x3f4fff00

0800ecb4 <HAL_FLASHEx_OBProgram>:
{
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800ecb8:	4a34      	ldr	r2, [pc, #208]	; (800ed8c <HAL_FLASHEx_OBProgram+0xd8>)
 800ecba:	233c      	movs	r3, #60	; 0x3c
 800ecbc:	5cd3      	ldrb	r3, [r2, r3]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d061      	beq.n	800ed86 <HAL_FLASHEx_OBProgram+0xd2>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	213c      	movs	r1, #60	; 0x3c
 800ecc6:	5453      	strb	r3, [r2, r1]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ecc8:	2100      	movs	r1, #0
 800ecca:	6411      	str	r1, [r2, #64]	; 0x40
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0x00U)
 800eccc:	6802      	ldr	r2, [r0, #0]
 800ecce:	4213      	tst	r3, r2
 800ecd0:	d120      	bne.n	800ed14 <HAL_FLASHEx_OBProgram+0x60>
  if ((pOBInit->OptionType & (OPTIONBYTE_RDP | OPTIONBYTE_USER)) == (OPTIONBYTE_RDP | OPTIONBYTE_USER))
 800ecd2:	6822      	ldr	r2, [r4, #0]
 800ecd4:	2306      	movs	r3, #6
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	2b06      	cmp	r3, #6
 800ecda:	d021      	beq.n	800ed20 <HAL_FLASHEx_OBProgram+0x6c>
  else if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0x00U)
 800ecdc:	0793      	lsls	r3, r2, #30
 800ecde:	d425      	bmi.n	800ed2c <HAL_FLASHEx_OBProgram+0x78>
  else if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0x00U)
 800ece0:	0753      	lsls	r3, r2, #29
 800ece2:	d42a      	bmi.n	800ed3a <HAL_FLASHEx_OBProgram+0x86>
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0x00U)
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	071b      	lsls	r3, r3, #28
 800ece8:	d506      	bpl.n	800ecf8 <HAL_FLASHEx_OBProgram+0x44>
    if ((pOBInit->PCROPConfig & (OB_PCROP_ZONE_A | OB_PCROP_RDP_ERASE)) != 0x00U)
 800ecea:	69e0      	ldr	r0, [r4, #28]
 800ecec:	4b28      	ldr	r3, [pc, #160]	; (800ed90 <HAL_FLASHEx_OBProgram+0xdc>)
 800ecee:	4218      	tst	r0, r3
 800ecf0:	d12b      	bne.n	800ed4a <HAL_FLASHEx_OBProgram+0x96>
    if ((pOBInit->PCROPConfig & OB_PCROP_ZONE_B) != 0x00U)
 800ecf2:	69e3      	ldr	r3, [r4, #28]
 800ecf4:	079b      	lsls	r3, r3, #30
 800ecf6:	d42d      	bmi.n	800ed54 <HAL_FLASHEx_OBProgram+0xa0>
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0x00U)
 800ecf8:	6823      	ldr	r3, [r4, #0]
 800ecfa:	06db      	lsls	r3, r3, #27
 800ecfc:	d42f      	bmi.n	800ed5e <HAL_FLASHEx_OBProgram+0xaa>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ecfe:	20fa      	movs	r0, #250	; 0xfa
 800ed00:	0080      	lsls	r0, r0, #2
 800ed02:	f7ff fd63 	bl	800e7cc <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800ed06:	2800      	cmp	r0, #0
 800ed08:	d02e      	beq.n	800ed68 <HAL_FLASHEx_OBProgram+0xb4>
  __HAL_UNLOCK(&pFlash);
 800ed0a:	4a20      	ldr	r2, [pc, #128]	; (800ed8c <HAL_FLASHEx_OBProgram+0xd8>)
 800ed0c:	233c      	movs	r3, #60	; 0x3c
 800ed0e:	2100      	movs	r1, #0
 800ed10:	54d1      	strb	r1, [r2, r3]
}
 800ed12:	bd10      	pop	{r4, pc}
    FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset);
 800ed14:	68c2      	ldr	r2, [r0, #12]
 800ed16:	6881      	ldr	r1, [r0, #8]
 800ed18:	6840      	ldr	r0, [r0, #4]
 800ed1a:	f7fd f8b7 	bl	800be8c <FLASH_OB_WRPConfig>
 800ed1e:	e7d8      	b.n	800ecd2 <HAL_FLASHEx_OBProgram+0x1e>
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, pOBInit->RDPLevel);
 800ed20:	6922      	ldr	r2, [r4, #16]
 800ed22:	69a1      	ldr	r1, [r4, #24]
 800ed24:	6960      	ldr	r0, [r4, #20]
 800ed26:	f7fd f8a5 	bl	800be74 <FLASH_OB_OptrConfig>
 800ed2a:	e7db      	b.n	800ece4 <HAL_FLASHEx_OBProgram+0x30>
    optr = FLASH_OB_GetUser();
 800ed2c:	f7fd f838 	bl	800bda0 <FLASH_OB_GetUser>
    FLASH_OB_OptrConfig(optr, optr, pOBInit->RDPLevel);
 800ed30:	6922      	ldr	r2, [r4, #16]
 800ed32:	0001      	movs	r1, r0
 800ed34:	f7fd f89e 	bl	800be74 <FLASH_OB_OptrConfig>
 800ed38:	e7d4      	b.n	800ece4 <HAL_FLASHEx_OBProgram+0x30>
    optr = FLASH_OB_GetRDP();
 800ed3a:	f7fd f83b 	bl	800bdb4 <FLASH_OB_GetRDP>
 800ed3e:	0002      	movs	r2, r0
    FLASH_OB_OptrConfig(pOBInit->USERType, pOBInit->USERConfig, optr);
 800ed40:	69a1      	ldr	r1, [r4, #24]
 800ed42:	6960      	ldr	r0, [r4, #20]
 800ed44:	f7fd f896 	bl	800be74 <FLASH_OB_OptrConfig>
 800ed48:	e7cc      	b.n	800ece4 <HAL_FLASHEx_OBProgram+0x30>
      FLASH_OB_PCROP1AConfig(pOBInit->PCROPConfig, pOBInit->PCROP1AStartAddr, pOBInit->PCROP1AEndAddr);
 800ed4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ed4c:	6a21      	ldr	r1, [r4, #32]
 800ed4e:	f7fd f875 	bl	800be3c <FLASH_OB_PCROP1AConfig>
 800ed52:	e7ce      	b.n	800ecf2 <HAL_FLASHEx_OBProgram+0x3e>
      FLASH_OB_PCROP1BConfig(pOBInit->PCROP1BStartAddr, pOBInit->PCROP1BEndAddr);
 800ed54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ed56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ed58:	f7fd f862 	bl	800be20 <FLASH_OB_PCROP1BConfig>
 800ed5c:	e7cc      	b.n	800ecf8 <HAL_FLASHEx_OBProgram+0x44>
    FLASH_OB_SecMemConfig(pOBInit->BootEntryPoint, pOBInit->SecSize);
 800ed5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ed62:	f7fd f84f 	bl	800be04 <FLASH_OB_SecMemConfig>
 800ed66:	e7ca      	b.n	800ecfe <HAL_FLASHEx_OBProgram+0x4a>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ed68:	4c0a      	ldr	r4, [pc, #40]	; (800ed94 <HAL_FLASHEx_OBProgram+0xe0>)
 800ed6a:	6962      	ldr	r2, [r4, #20]
 800ed6c:	2380      	movs	r3, #128	; 0x80
 800ed6e:	029b      	lsls	r3, r3, #10
 800ed70:	4313      	orrs	r3, r2
 800ed72:	6163      	str	r3, [r4, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed74:	30fa      	adds	r0, #250	; 0xfa
 800ed76:	0080      	lsls	r0, r0, #2
 800ed78:	f7ff fd28 	bl	800e7cc <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800ed7c:	6963      	ldr	r3, [r4, #20]
 800ed7e:	4a06      	ldr	r2, [pc, #24]	; (800ed98 <HAL_FLASHEx_OBProgram+0xe4>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	6163      	str	r3, [r4, #20]
 800ed84:	e7c1      	b.n	800ed0a <HAL_FLASHEx_OBProgram+0x56>
  __HAL_LOCK(&pFlash);
 800ed86:	2002      	movs	r0, #2
 800ed88:	e7c3      	b.n	800ed12 <HAL_FLASHEx_OBProgram+0x5e>
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	200005d8 	.word	0x200005d8
 800ed90:	80000001 	.word	0x80000001
 800ed94:	40022000 	.word	0x40022000
 800ed98:	fffdffff 	.word	0xfffdffff

0800ed9c <HAL_FLASH_OB_Launch>:
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800ed9c:	4a03      	ldr	r2, [pc, #12]	; (800edac <HAL_FLASH_OB_Launch+0x10>)
 800ed9e:	6951      	ldr	r1, [r2, #20]
 800eda0:	2380      	movs	r3, #128	; 0x80
 800eda2:	051b      	lsls	r3, r3, #20
 800eda4:	430b      	orrs	r3, r1
 800eda6:	6153      	str	r3, [r2, #20]
}
 800eda8:	2001      	movs	r0, #1
 800edaa:	4770      	bx	lr
 800edac:	40022000 	.word	0x40022000

0800edb0 <HAL_FLASH_OB_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 800edb0:	4b06      	ldr	r3, [pc, #24]	; (800edcc <HAL_FLASH_OB_Lock+0x1c>)
 800edb2:	695a      	ldr	r2, [r3, #20]
 800edb4:	2180      	movs	r1, #128	; 0x80
 800edb6:	05c9      	lsls	r1, r1, #23
 800edb8:	430a      	orrs	r2, r1
 800edba:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	420b      	tst	r3, r1
 800edc0:	d001      	beq.n	800edc6 <HAL_FLASH_OB_Lock+0x16>
    status = HAL_OK;
 800edc2:	2000      	movs	r0, #0
}
 800edc4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_ERROR;
 800edc6:	2001      	movs	r0, #1
 800edc8:	e7fc      	b.n	800edc4 <HAL_FLASH_OB_Lock+0x14>
 800edca:	46c0      	nop			; (mov r8, r8)
 800edcc:	40022000 	.word	0x40022000

0800edd0 <HAL_FLASH_OB_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 800edd0:	4b08      	ldr	r3, [pc, #32]	; (800edf4 <HAL_FLASH_OB_Unlock+0x24>)
 800edd2:	695b      	ldr	r3, [r3, #20]
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	d50b      	bpl.n	800edf0 <HAL_FLASH_OB_Unlock+0x20>
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800edd8:	4b06      	ldr	r3, [pc, #24]	; (800edf4 <HAL_FLASH_OB_Unlock+0x24>)
 800edda:	4a07      	ldr	r2, [pc, #28]	; (800edf8 <HAL_FLASH_OB_Unlock+0x28>)
 800eddc:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 800edde:	4a07      	ldr	r2, [pc, #28]	; (800edfc <HAL_FLASH_OB_Unlock+0x2c>)
 800ede0:	60da      	str	r2, [r3, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	d401      	bmi.n	800edec <HAL_FLASH_OB_Unlock+0x1c>
      status = HAL_OK;
 800ede8:	2000      	movs	r0, #0
 800edea:	e002      	b.n	800edf2 <HAL_FLASH_OB_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_ERROR;
 800edec:	2001      	movs	r0, #1
 800edee:	e000      	b.n	800edf2 <HAL_FLASH_OB_Unlock+0x22>
 800edf0:	2001      	movs	r0, #1
}
 800edf2:	4770      	bx	lr
 800edf4:	40022000 	.word	0x40022000
 800edf8:	08192a3b 	.word	0x08192a3b
 800edfc:	4c5d6e7f 	.word	0x4c5d6e7f

0800ee00 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ee00:	4b06      	ldr	r3, [pc, #24]	; (800ee1c <HAL_FLASH_Lock+0x1c>)
 800ee02:	6959      	ldr	r1, [r3, #20]
 800ee04:	2280      	movs	r2, #128	; 0x80
 800ee06:	0612      	lsls	r2, r2, #24
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	db01      	blt.n	800ee16 <HAL_FLASH_Lock+0x16>
  HAL_StatusTypeDef status = HAL_ERROR;
 800ee12:	2001      	movs	r0, #1
}
 800ee14:	4770      	bx	lr
    status = HAL_OK;
 800ee16:	2000      	movs	r0, #0
 800ee18:	e7fc      	b.n	800ee14 <HAL_FLASH_Lock+0x14>
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	40022000 	.word	0x40022000

0800ee20 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ee20:	4b08      	ldr	r3, [pc, #32]	; (800ee44 <HAL_FLASH_Unlock+0x24>)
 800ee22:	695b      	ldr	r3, [r3, #20]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	db01      	blt.n	800ee2c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800ee28:	2000      	movs	r0, #0
}
 800ee2a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ee2c:	4b05      	ldr	r3, [pc, #20]	; (800ee44 <HAL_FLASH_Unlock+0x24>)
 800ee2e:	4a06      	ldr	r2, [pc, #24]	; (800ee48 <HAL_FLASH_Unlock+0x28>)
 800ee30:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ee32:	4a06      	ldr	r2, [pc, #24]	; (800ee4c <HAL_FLASH_Unlock+0x2c>)
 800ee34:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db01      	blt.n	800ee40 <HAL_FLASH_Unlock+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e7f4      	b.n	800ee2a <HAL_FLASH_Unlock+0xa>
      status = HAL_ERROR;
 800ee40:	2001      	movs	r0, #1
 800ee42:	e7f2      	b.n	800ee2a <HAL_FLASH_Unlock+0xa>
 800ee44:	40022000 	.word	0x40022000
 800ee48:	45670123 	.word	0x45670123
 800ee4c:	cdef89ab 	.word	0xcdef89ab

0800ee50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ee50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee52:	b083      	sub	sp, #12
 800ee54:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ee56:	6803      	ldr	r3, [r0, #0]
 800ee58:	039b      	lsls	r3, r3, #14
 800ee5a:	d560      	bpl.n	800ef1e <HAL_RCCEx_PeriphCLKConfig+0xce>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee5c:	4b80      	ldr	r3, [pc, #512]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ee5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	d41e      	bmi.n	800eea2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee64:	4a7e      	ldr	r2, [pc, #504]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ee66:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800ee68:	2080      	movs	r0, #128	; 0x80
 800ee6a:	0540      	lsls	r0, r0, #21
 800ee6c:	4301      	orrs	r1, r0
 800ee6e:	63d1      	str	r1, [r2, #60]	; 0x3c
 800ee70:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800ee72:	4003      	ands	r3, r0
 800ee74:	9301      	str	r3, [sp, #4]
 800ee76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800ee78:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee7a:	4a7a      	ldr	r2, [pc, #488]	; (800f064 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800ee7c:	6811      	ldr	r1, [r2, #0]
 800ee7e:	2380      	movs	r3, #128	; 0x80
 800ee80:	005b      	lsls	r3, r3, #1
 800ee82:	430b      	orrs	r3, r1
 800ee84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ee86:	f7fe fdbf 	bl	800da08 <HAL_GetTick>
 800ee8a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ee8c:	4b75      	ldr	r3, [pc, #468]	; (800f064 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	05db      	lsls	r3, r3, #23
 800ee92:	d408      	bmi.n	800eea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee94:	f7fe fdb8 	bl	800da08 <HAL_GetTick>
 800ee98:	1b40      	subs	r0, r0, r5
 800ee9a:	2802      	cmp	r0, #2
 800ee9c:	d9f6      	bls.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 800ee9e:	2503      	movs	r5, #3
 800eea0:	e002      	b.n	800eea8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 800eea2:	2600      	movs	r6, #0
 800eea4:	e7e9      	b.n	800ee7a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800eea6:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 800eea8:	2d00      	cmp	r5, #0
 800eeaa:	d121      	bne.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800eeac:	4b6c      	ldr	r3, [pc, #432]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eeae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeb0:	22c0      	movs	r2, #192	; 0xc0
 800eeb2:	0092      	lsls	r2, r2, #2
 800eeb4:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800eeb6:	d010      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800eeb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d00d      	beq.n	800eeda <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800eebe:	4a68      	ldr	r2, [pc, #416]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eec0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800eec2:	4969      	ldr	r1, [pc, #420]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800eec4:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800eec6:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800eec8:	2180      	movs	r1, #128	; 0x80
 800eeca:	0249      	lsls	r1, r1, #9
 800eecc:	4301      	orrs	r1, r0
 800eece:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800eed0:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800eed2:	4866      	ldr	r0, [pc, #408]	; (800f06c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800eed4:	4001      	ands	r1, r0
 800eed6:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800eed8:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800eeda:	07db      	lsls	r3, r3, #31
 800eedc:	d410      	bmi.n	800ef00 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 800eede:	2d00      	cmp	r5, #0
 800eee0:	d106      	bne.n	800eef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eee2:	4a5f      	ldr	r2, [pc, #380]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eee4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800eee6:	4960      	ldr	r1, [pc, #384]	; (800f068 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800eee8:	400b      	ands	r3, r1
 800eeea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eeec:	430b      	orrs	r3, r1
 800eeee:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800eef0:	2e01      	cmp	r6, #1
 800eef2:	d115      	bne.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eef4:	4a5a      	ldr	r2, [pc, #360]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eef6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800eef8:	495d      	ldr	r1, [pc, #372]	; (800f070 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800eefa:	400b      	ands	r3, r1
 800eefc:	63d3      	str	r3, [r2, #60]	; 0x3c
 800eefe:	e00f      	b.n	800ef20 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        tickstart = HAL_GetTick();
 800ef00:	f7fe fd82 	bl	800da08 <HAL_GetTick>
 800ef04:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ef06:	4b56      	ldr	r3, [pc, #344]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef0a:	079b      	lsls	r3, r3, #30
 800ef0c:	d4e7      	bmi.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef0e:	f7fe fd7b 	bl	800da08 <HAL_GetTick>
 800ef12:	1bc0      	subs	r0, r0, r7
 800ef14:	4b57      	ldr	r3, [pc, #348]	; (800f074 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800ef16:	4298      	cmp	r0, r3
 800ef18:	d9f5      	bls.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            ret = HAL_TIMEOUT;
 800ef1a:	2503      	movs	r5, #3
 800ef1c:	e7df      	b.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x8e>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ef1e:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	07db      	lsls	r3, r3, #31
 800ef24:	d506      	bpl.n	800ef34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ef26:	4a4e      	ldr	r2, [pc, #312]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef28:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef2a:	2103      	movs	r1, #3
 800ef2c:	438b      	bics	r3, r1
 800ef2e:	6861      	ldr	r1, [r4, #4]
 800ef30:	430b      	orrs	r3, r1
 800ef32:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	079b      	lsls	r3, r3, #30
 800ef38:	d506      	bpl.n	800ef48 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ef3a:	4a49      	ldr	r2, [pc, #292]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef3e:	210c      	movs	r1, #12
 800ef40:	438b      	bics	r3, r1
 800ef42:	68a1      	ldr	r1, [r4, #8]
 800ef44:	430b      	orrs	r3, r1
 800ef46:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ef48:	6823      	ldr	r3, [r4, #0]
 800ef4a:	069b      	lsls	r3, r3, #26
 800ef4c:	d506      	bpl.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ef4e:	4a44      	ldr	r2, [pc, #272]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef50:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef52:	4949      	ldr	r1, [pc, #292]	; (800f078 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800ef54:	400b      	ands	r3, r1
 800ef56:	68e1      	ldr	r1, [r4, #12]
 800ef58:	430b      	orrs	r3, r1
 800ef5a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ef5c:	6823      	ldr	r3, [r4, #0]
 800ef5e:	059b      	lsls	r3, r3, #22
 800ef60:	d506      	bpl.n	800ef70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ef62:	4a3f      	ldr	r2, [pc, #252]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef66:	4945      	ldr	r1, [pc, #276]	; (800f07c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800ef68:	400b      	ands	r3, r1
 800ef6a:	69a1      	ldr	r1, [r4, #24]
 800ef6c:	430b      	orrs	r3, r1
 800ef6e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	055b      	lsls	r3, r3, #21
 800ef74:	d506      	bpl.n	800ef84 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ef76:	4a3a      	ldr	r2, [pc, #232]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef7a:	4941      	ldr	r1, [pc, #260]	; (800f080 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800ef7c:	400b      	ands	r3, r1
 800ef7e:	69e1      	ldr	r1, [r4, #28]
 800ef80:	430b      	orrs	r3, r1
 800ef82:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ef84:	6823      	ldr	r3, [r4, #0]
 800ef86:	065b      	lsls	r3, r3, #25
 800ef88:	d506      	bpl.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ef8a:	4a35      	ldr	r2, [pc, #212]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800ef8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ef8e:	493d      	ldr	r1, [pc, #244]	; (800f084 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800ef90:	400b      	ands	r3, r1
 800ef92:	6921      	ldr	r1, [r4, #16]
 800ef94:	430b      	orrs	r3, r1
 800ef96:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	045b      	lsls	r3, r3, #17
 800ef9c:	d50b      	bpl.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ef9e:	4a30      	ldr	r2, [pc, #192]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800efa0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	089b      	lsrs	r3, r3, #2
 800efa6:	6a21      	ldr	r1, [r4, #32]
 800efa8:	430b      	orrs	r3, r1
 800efaa:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800efac:	2380      	movs	r3, #128	; 0x80
 800efae:	05db      	lsls	r3, r3, #23
 800efb0:	6a22      	ldr	r2, [r4, #32]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d039      	beq.n	800f02a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800efb6:	6823      	ldr	r3, [r4, #0]
 800efb8:	031b      	lsls	r3, r3, #12
 800efba:	d506      	bpl.n	800efca <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800efbc:	4a28      	ldr	r2, [pc, #160]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800efbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800efc0:	2140      	movs	r1, #64	; 0x40
 800efc2:	438b      	bics	r3, r1
 800efc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efc6:	430b      	orrs	r3, r1
 800efc8:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	029b      	lsls	r3, r3, #10
 800efce:	d50b      	bpl.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800efd0:	4a23      	ldr	r2, [pc, #140]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800efd2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800efd4:	492c      	ldr	r1, [pc, #176]	; (800f088 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800efd6:	400b      	ands	r3, r1
 800efd8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800efda:	430b      	orrs	r3, r1
 800efdc:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800efde:	2380      	movs	r3, #128	; 0x80
 800efe0:	03db      	lsls	r3, r3, #15
 800efe2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d027      	beq.n	800f038 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	025b      	lsls	r3, r3, #9
 800efec:	d50b      	bpl.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800efee:	4a1c      	ldr	r2, [pc, #112]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800eff0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800eff2:	4926      	ldr	r1, [pc, #152]	; (800f08c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800eff4:	400b      	ands	r3, r1
 800eff6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800eff8:	430b      	orrs	r3, r1
 800effa:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800effc:	2380      	movs	r3, #128	; 0x80
 800effe:	045b      	lsls	r3, r3, #17
 800f000:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f002:	429a      	cmp	r2, r3
 800f004:	d01f      	beq.n	800f046 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800f006:	6823      	ldr	r3, [r4, #0]
 800f008:	051b      	lsls	r3, r3, #20
 800f00a:	d50b      	bpl.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800f00c:	4a14      	ldr	r2, [pc, #80]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f00e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f010:	491f      	ldr	r1, [pc, #124]	; (800f090 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800f012:	400b      	ands	r3, r1
 800f014:	6961      	ldr	r1, [r4, #20]
 800f016:	430b      	orrs	r3, r1
 800f018:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800f01a:	6962      	ldr	r2, [r4, #20]
 800f01c:	2380      	movs	r3, #128	; 0x80
 800f01e:	01db      	lsls	r3, r3, #7
 800f020:	429a      	cmp	r2, r3
 800f022:	d015      	beq.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x200>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
    }
  }

  return status;
}
 800f024:	0028      	movs	r0, r5
 800f026:	b003      	add	sp, #12
 800f028:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800f02a:	4a0d      	ldr	r2, [pc, #52]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f02c:	68d1      	ldr	r1, [r2, #12]
 800f02e:	2380      	movs	r3, #128	; 0x80
 800f030:	025b      	lsls	r3, r3, #9
 800f032:	430b      	orrs	r3, r1
 800f034:	60d3      	str	r3, [r2, #12]
 800f036:	e7be      	b.n	800efb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800f038:	4a09      	ldr	r2, [pc, #36]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f03a:	68d1      	ldr	r1, [r2, #12]
 800f03c:	2380      	movs	r3, #128	; 0x80
 800f03e:	045b      	lsls	r3, r3, #17
 800f040:	430b      	orrs	r3, r1
 800f042:	60d3      	str	r3, [r2, #12]
 800f044:	e7d0      	b.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800f046:	4a06      	ldr	r2, [pc, #24]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f048:	68d1      	ldr	r1, [r2, #12]
 800f04a:	430b      	orrs	r3, r1
 800f04c:	60d3      	str	r3, [r2, #12]
 800f04e:	e7da      	b.n	800f006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800f050:	4a03      	ldr	r2, [pc, #12]	; (800f060 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800f052:	68d1      	ldr	r1, [r2, #12]
 800f054:	2380      	movs	r3, #128	; 0x80
 800f056:	025b      	lsls	r3, r3, #9
 800f058:	430b      	orrs	r3, r1
 800f05a:	60d3      	str	r3, [r2, #12]
 800f05c:	e7e2      	b.n	800f024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f05e:	46c0      	nop			; (mov r8, r8)
 800f060:	40021000 	.word	0x40021000
 800f064:	40007000 	.word	0x40007000
 800f068:	fffffcff 	.word	0xfffffcff
 800f06c:	fffeffff 	.word	0xfffeffff
 800f070:	efffffff 	.word	0xefffffff
 800f074:	00001388 	.word	0x00001388
 800f078:	fffff3ff 	.word	0xfffff3ff
 800f07c:	fff3ffff 	.word	0xfff3ffff
 800f080:	ffcfffff 	.word	0xffcfffff
 800f084:	ffffcfff 	.word	0xffffcfff
 800f088:	ffbfffff 	.word	0xffbfffff
 800f08c:	feffffff 	.word	0xfeffffff
 800f090:	ffff3fff 	.word	0xffff3fff

0800f094 <HAL_RCC_ClockConfig>:
{
 800f094:	b570      	push	{r4, r5, r6, lr}
 800f096:	0004      	movs	r4, r0
 800f098:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d100      	bne.n	800f0a0 <HAL_RCC_ClockConfig+0xc>
 800f09e:	e0aa      	b.n	800f1f6 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f0a0:	4b57      	ldr	r3, [pc, #348]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	2307      	movs	r3, #7
 800f0a6:	4013      	ands	r3, r2
 800f0a8:	428b      	cmp	r3, r1
 800f0aa:	d321      	bcc.n	800f0f0 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	079a      	lsls	r2, r3, #30
 800f0b0:	d50e      	bpl.n	800f0d0 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0b2:	075b      	lsls	r3, r3, #29
 800f0b4:	d505      	bpl.n	800f0c2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800f0b6:	4a53      	ldr	r2, [pc, #332]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f0b8:	6891      	ldr	r1, [r2, #8]
 800f0ba:	23e0      	movs	r3, #224	; 0xe0
 800f0bc:	01db      	lsls	r3, r3, #7
 800f0be:	430b      	orrs	r3, r1
 800f0c0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f0c2:	4a50      	ldr	r2, [pc, #320]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f0c4:	6893      	ldr	r3, [r2, #8]
 800f0c6:	4950      	ldr	r1, [pc, #320]	; (800f208 <HAL_RCC_ClockConfig+0x174>)
 800f0c8:	400b      	ands	r3, r1
 800f0ca:	68a1      	ldr	r1, [r4, #8]
 800f0cc:	430b      	orrs	r3, r1
 800f0ce:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	07db      	lsls	r3, r3, #31
 800f0d4:	d554      	bpl.n	800f180 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0d6:	6863      	ldr	r3, [r4, #4]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d020      	beq.n	800f11e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0dc:	2b02      	cmp	r3, #2
 800f0de:	d03b      	beq.n	800f158 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d13f      	bne.n	800f164 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f0e4:	4a47      	ldr	r2, [pc, #284]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f0e6:	6812      	ldr	r2, [r2, #0]
 800f0e8:	0552      	lsls	r2, r2, #21
 800f0ea:	d41c      	bmi.n	800f126 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800f0ec:	2001      	movs	r0, #1
 800f0ee:	e06a      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0f0:	4a43      	ldr	r2, [pc, #268]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f0f2:	6813      	ldr	r3, [r2, #0]
 800f0f4:	2107      	movs	r1, #7
 800f0f6:	438b      	bics	r3, r1
 800f0f8:	432b      	orrs	r3, r5
 800f0fa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f0fc:	f7fe fc84 	bl	800da08 <HAL_GetTick>
 800f100:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800f102:	4b3f      	ldr	r3, [pc, #252]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	2307      	movs	r3, #7
 800f108:	4013      	ands	r3, r2
 800f10a:	42ab      	cmp	r3, r5
 800f10c:	d0ce      	beq.n	800f0ac <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f10e:	f7fe fc7b 	bl	800da08 <HAL_GetTick>
 800f112:	1b80      	subs	r0, r0, r6
 800f114:	4b3d      	ldr	r3, [pc, #244]	; (800f20c <HAL_RCC_ClockConfig+0x178>)
 800f116:	4298      	cmp	r0, r3
 800f118:	d9f3      	bls.n	800f102 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800f11a:	2003      	movs	r0, #3
 800f11c:	e053      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f11e:	4a39      	ldr	r2, [pc, #228]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f120:	6812      	ldr	r2, [r2, #0]
 800f122:	0392      	lsls	r2, r2, #14
 800f124:	d569      	bpl.n	800f1fa <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f126:	4937      	ldr	r1, [pc, #220]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f128:	688a      	ldr	r2, [r1, #8]
 800f12a:	2007      	movs	r0, #7
 800f12c:	4382      	bics	r2, r0
 800f12e:	4313      	orrs	r3, r2
 800f130:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800f132:	f7fe fc69 	bl	800da08 <HAL_GetTick>
 800f136:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f138:	4b32      	ldr	r3, [pc, #200]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	2238      	movs	r2, #56	; 0x38
 800f13e:	401a      	ands	r2, r3
 800f140:	6863      	ldr	r3, [r4, #4]
 800f142:	00db      	lsls	r3, r3, #3
 800f144:	429a      	cmp	r2, r3
 800f146:	d01b      	beq.n	800f180 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f148:	f7fe fc5e 	bl	800da08 <HAL_GetTick>
 800f14c:	1b80      	subs	r0, r0, r6
 800f14e:	4b2f      	ldr	r3, [pc, #188]	; (800f20c <HAL_RCC_ClockConfig+0x178>)
 800f150:	4298      	cmp	r0, r3
 800f152:	d9f1      	bls.n	800f138 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 800f154:	2003      	movs	r0, #3
 800f156:	e036      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f158:	4a2a      	ldr	r2, [pc, #168]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f15a:	6812      	ldr	r2, [r2, #0]
 800f15c:	0192      	lsls	r2, r2, #6
 800f15e:	d4e2      	bmi.n	800f126 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800f160:	2001      	movs	r0, #1
 800f162:	e030      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800f164:	2b03      	cmp	r3, #3
 800f166:	d005      	beq.n	800f174 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f168:	4a26      	ldr	r2, [pc, #152]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f16a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800f16c:	0792      	lsls	r2, r2, #30
 800f16e:	d4da      	bmi.n	800f126 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800f170:	2001      	movs	r0, #1
 800f172:	e028      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f174:	4a23      	ldr	r2, [pc, #140]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f176:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800f178:	0792      	lsls	r2, r2, #30
 800f17a:	d4d4      	bmi.n	800f126 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800f17c:	2001      	movs	r0, #1
 800f17e:	e022      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f180:	4b1f      	ldr	r3, [pc, #124]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	2307      	movs	r3, #7
 800f186:	4013      	ands	r3, r2
 800f188:	42ab      	cmp	r3, r5
 800f18a:	d81d      	bhi.n	800f1c8 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	075b      	lsls	r3, r3, #29
 800f190:	d506      	bpl.n	800f1a0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800f192:	4a1c      	ldr	r2, [pc, #112]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f194:	6893      	ldr	r3, [r2, #8]
 800f196:	491e      	ldr	r1, [pc, #120]	; (800f210 <HAL_RCC_ClockConfig+0x17c>)
 800f198:	400b      	ands	r3, r1
 800f19a:	68e1      	ldr	r1, [r4, #12]
 800f19c:	430b      	orrs	r3, r1
 800f19e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800f1a0:	f7fc fe9c 	bl	800bedc <HAL_RCC_GetSysClockFreq>
 800f1a4:	4b17      	ldr	r3, [pc, #92]	; (800f204 <HAL_RCC_ClockConfig+0x170>)
 800f1a6:	689a      	ldr	r2, [r3, #8]
 800f1a8:	0a12      	lsrs	r2, r2, #8
 800f1aa:	230f      	movs	r3, #15
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	009b      	lsls	r3, r3, #2
 800f1b0:	4a18      	ldr	r2, [pc, #96]	; (800f214 <HAL_RCC_ClockConfig+0x180>)
 800f1b2:	18d3      	adds	r3, r2, r3
 800f1b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1b6:	231f      	movs	r3, #31
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	40d8      	lsrs	r0, r3
 800f1bc:	4b16      	ldr	r3, [pc, #88]	; (800f218 <HAL_RCC_ClockConfig+0x184>)
 800f1be:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800f1c0:	6858      	ldr	r0, [r3, #4]
 800f1c2:	f7ff fb95 	bl	800e8f0 <HAL_InitTick>
}
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1c8:	4a0d      	ldr	r2, [pc, #52]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f1ca:	6813      	ldr	r3, [r2, #0]
 800f1cc:	2107      	movs	r1, #7
 800f1ce:	438b      	bics	r3, r1
 800f1d0:	432b      	orrs	r3, r5
 800f1d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f1d4:	f7fe fc18 	bl	800da08 <HAL_GetTick>
 800f1d8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800f1da:	4b09      	ldr	r3, [pc, #36]	; (800f200 <HAL_RCC_ClockConfig+0x16c>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	2307      	movs	r3, #7
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	42ab      	cmp	r3, r5
 800f1e4:	d0d2      	beq.n	800f18c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1e6:	f7fe fc0f 	bl	800da08 <HAL_GetTick>
 800f1ea:	1b80      	subs	r0, r0, r6
 800f1ec:	4b07      	ldr	r3, [pc, #28]	; (800f20c <HAL_RCC_ClockConfig+0x178>)
 800f1ee:	4298      	cmp	r0, r3
 800f1f0:	d9f3      	bls.n	800f1da <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 800f1f2:	2003      	movs	r0, #3
 800f1f4:	e7e7      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 800f1f6:	2001      	movs	r0, #1
 800f1f8:	e7e5      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	e7e3      	b.n	800f1c6 <HAL_RCC_ClockConfig+0x132>
 800f1fe:	46c0      	nop			; (mov r8, r8)
 800f200:	40022000 	.word	0x40022000
 800f204:	40021000 	.word	0x40021000
 800f208:	fffff0ff 	.word	0xfffff0ff
 800f20c:	00001388 	.word	0x00001388
 800f210:	ffff8fff 	.word	0xffff8fff
 800f214:	0801c5c0 	.word	0x0801c5c0
 800f218:	20000000 	.word	0x20000000

0800f21c <HAL_RCC_OscConfig>:
{
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	1e04      	subs	r4, r0, #0
  if (RCC_OscInitStruct == NULL)
 800f222:	d100      	bne.n	800f226 <HAL_RCC_OscConfig+0xa>
 800f224:	e23c      	b.n	800f6a0 <HAL_RCC_OscConfig+0x484>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f226:	6803      	ldr	r3, [r0, #0]
 800f228:	07db      	lsls	r3, r3, #31
 800f22a:	d539      	bpl.n	800f2a0 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f22c:	4ac1      	ldr	r2, [pc, #772]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f22e:	6891      	ldr	r1, [r2, #8]
 800f230:	2338      	movs	r3, #56	; 0x38
 800f232:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f234:	68d1      	ldr	r1, [r2, #12]
 800f236:	2203      	movs	r2, #3
 800f238:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800f23a:	2b10      	cmp	r3, #16
 800f23c:	d026      	beq.n	800f28c <HAL_RCC_OscConfig+0x70>
 800f23e:	2b08      	cmp	r3, #8
 800f240:	d026      	beq.n	800f290 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f242:	6863      	ldr	r3, [r4, #4]
 800f244:	2280      	movs	r2, #128	; 0x80
 800f246:	0252      	lsls	r2, r2, #9
 800f248:	4293      	cmp	r3, r2
 800f24a:	d07f      	beq.n	800f34c <HAL_RCC_OscConfig+0x130>
 800f24c:	22a0      	movs	r2, #160	; 0xa0
 800f24e:	02d2      	lsls	r2, r2, #11
 800f250:	4293      	cmp	r3, r2
 800f252:	d100      	bne.n	800f256 <HAL_RCC_OscConfig+0x3a>
 800f254:	e081      	b.n	800f35a <HAL_RCC_OscConfig+0x13e>
 800f256:	4bb7      	ldr	r3, [pc, #732]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	49b7      	ldr	r1, [pc, #732]	; (800f538 <HAL_RCC_OscConfig+0x31c>)
 800f25c:	400a      	ands	r2, r1
 800f25e:	601a      	str	r2, [r3, #0]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	49b6      	ldr	r1, [pc, #728]	; (800f53c <HAL_RCC_OscConfig+0x320>)
 800f264:	400a      	ands	r2, r1
 800f266:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f268:	6863      	ldr	r3, [r4, #4]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d100      	bne.n	800f270 <HAL_RCC_OscConfig+0x54>
 800f26e:	e080      	b.n	800f372 <HAL_RCC_OscConfig+0x156>
        tickstart = HAL_GetTick();
 800f270:	f7fe fbca 	bl	800da08 <HAL_GetTick>
 800f274:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f276:	4baf      	ldr	r3, [pc, #700]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	039b      	lsls	r3, r3, #14
 800f27c:	d410      	bmi.n	800f2a0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f27e:	f7fe fbc3 	bl	800da08 <HAL_GetTick>
 800f282:	1b40      	subs	r0, r0, r5
 800f284:	2864      	cmp	r0, #100	; 0x64
 800f286:	d9f6      	bls.n	800f276 <HAL_RCC_OscConfig+0x5a>
            return HAL_TIMEOUT;
 800f288:	2003      	movs	r0, #3
 800f28a:	e20a      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800f28c:	2a03      	cmp	r2, #3
 800f28e:	d1d6      	bne.n	800f23e <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f290:	4ba8      	ldr	r3, [pc, #672]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	039b      	lsls	r3, r3, #14
 800f296:	d503      	bpl.n	800f2a0 <HAL_RCC_OscConfig+0x84>
 800f298:	6863      	ldr	r3, [r4, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d100      	bne.n	800f2a0 <HAL_RCC_OscConfig+0x84>
 800f29e:	e202      	b.n	800f6a6 <HAL_RCC_OscConfig+0x48a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f2a0:	6823      	ldr	r3, [r4, #0]
 800f2a2:	079b      	lsls	r3, r3, #30
 800f2a4:	d531      	bpl.n	800f30a <HAL_RCC_OscConfig+0xee>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f2a6:	4aa3      	ldr	r2, [pc, #652]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f2a8:	6893      	ldr	r3, [r2, #8]
 800f2aa:	2138      	movs	r1, #56	; 0x38
 800f2ac:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f2ae:	68d1      	ldr	r1, [r2, #12]
 800f2b0:	2203      	movs	r2, #3
 800f2b2:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800f2b4:	2b10      	cmp	r3, #16
 800f2b6:	d06a      	beq.n	800f38e <HAL_RCC_OscConfig+0x172>
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d16b      	bne.n	800f394 <HAL_RCC_OscConfig+0x178>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f2bc:	4a9d      	ldr	r2, [pc, #628]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f2be:	6812      	ldr	r2, [r2, #0]
 800f2c0:	0552      	lsls	r2, r2, #21
 800f2c2:	d503      	bpl.n	800f2cc <HAL_RCC_OscConfig+0xb0>
 800f2c4:	68e2      	ldr	r2, [r4, #12]
 800f2c6:	2a00      	cmp	r2, #0
 800f2c8:	d100      	bne.n	800f2cc <HAL_RCC_OscConfig+0xb0>
 800f2ca:	e1ee      	b.n	800f6aa <HAL_RCC_OscConfig+0x48e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2cc:	4899      	ldr	r0, [pc, #612]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f2ce:	6841      	ldr	r1, [r0, #4]
 800f2d0:	6962      	ldr	r2, [r4, #20]
 800f2d2:	0212      	lsls	r2, r2, #8
 800f2d4:	4d9a      	ldr	r5, [pc, #616]	; (800f540 <HAL_RCC_OscConfig+0x324>)
 800f2d6:	4029      	ands	r1, r5
 800f2d8:	430a      	orrs	r2, r1
 800f2da:	6042      	str	r2, [r0, #4]
        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10d      	bne.n	800f2fc <HAL_RCC_OscConfig+0xe0>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800f2e0:	6803      	ldr	r3, [r0, #0]
 800f2e2:	4998      	ldr	r1, [pc, #608]	; (800f544 <HAL_RCC_OscConfig+0x328>)
 800f2e4:	400b      	ands	r3, r1
 800f2e6:	6921      	ldr	r1, [r4, #16]
 800f2e8:	430b      	orrs	r3, r1
 800f2ea:	6003      	str	r3, [r0, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800f2ec:	6803      	ldr	r3, [r0, #0]
 800f2ee:	0adb      	lsrs	r3, r3, #11
 800f2f0:	2207      	movs	r2, #7
 800f2f2:	401a      	ands	r2, r3
 800f2f4:	4b94      	ldr	r3, [pc, #592]	; (800f548 <HAL_RCC_OscConfig+0x32c>)
 800f2f6:	40d3      	lsrs	r3, r2
 800f2f8:	4a94      	ldr	r2, [pc, #592]	; (800f54c <HAL_RCC_OscConfig+0x330>)
 800f2fa:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800f2fc:	4b93      	ldr	r3, [pc, #588]	; (800f54c <HAL_RCC_OscConfig+0x330>)
 800f2fe:	6858      	ldr	r0, [r3, #4]
 800f300:	f7ff faf6 	bl	800e8f0 <HAL_InitTick>
 800f304:	2800      	cmp	r0, #0
 800f306:	d000      	beq.n	800f30a <HAL_RCC_OscConfig+0xee>
 800f308:	e1d1      	b.n	800f6ae <HAL_RCC_OscConfig+0x492>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	071b      	lsls	r3, r3, #28
 800f30e:	d400      	bmi.n	800f312 <HAL_RCC_OscConfig+0xf6>
 800f310:	e081      	b.n	800f416 <HAL_RCC_OscConfig+0x1fa>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800f312:	4b88      	ldr	r3, [pc, #544]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f314:	689a      	ldr	r2, [r3, #8]
 800f316:	2338      	movs	r3, #56	; 0x38
 800f318:	4013      	ands	r3, r2
 800f31a:	2b18      	cmp	r3, #24
 800f31c:	d073      	beq.n	800f406 <HAL_RCC_OscConfig+0x1ea>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f31e:	69a3      	ldr	r3, [r4, #24]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d100      	bne.n	800f326 <HAL_RCC_OscConfig+0x10a>
 800f324:	e091      	b.n	800f44a <HAL_RCC_OscConfig+0x22e>
        __HAL_RCC_LSI_ENABLE();
 800f326:	4a83      	ldr	r2, [pc, #524]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f328:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800f32a:	2101      	movs	r1, #1
 800f32c:	430b      	orrs	r3, r1
 800f32e:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800f330:	f7fe fb6a 	bl	800da08 <HAL_GetTick>
 800f334:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f336:	4b7f      	ldr	r3, [pc, #508]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f33a:	079b      	lsls	r3, r3, #30
 800f33c:	d46b      	bmi.n	800f416 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f33e:	f7fe fb63 	bl	800da08 <HAL_GetTick>
 800f342:	1b40      	subs	r0, r0, r5
 800f344:	2802      	cmp	r0, #2
 800f346:	d9f6      	bls.n	800f336 <HAL_RCC_OscConfig+0x11a>
            return HAL_TIMEOUT;
 800f348:	2003      	movs	r0, #3
 800f34a:	e1aa      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f34c:	4a79      	ldr	r2, [pc, #484]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f34e:	6811      	ldr	r1, [r2, #0]
 800f350:	2380      	movs	r3, #128	; 0x80
 800f352:	025b      	lsls	r3, r3, #9
 800f354:	430b      	orrs	r3, r1
 800f356:	6013      	str	r3, [r2, #0]
 800f358:	e786      	b.n	800f268 <HAL_RCC_OscConfig+0x4c>
 800f35a:	4b76      	ldr	r3, [pc, #472]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f35c:	6819      	ldr	r1, [r3, #0]
 800f35e:	2280      	movs	r2, #128	; 0x80
 800f360:	02d2      	lsls	r2, r2, #11
 800f362:	430a      	orrs	r2, r1
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	6819      	ldr	r1, [r3, #0]
 800f368:	2280      	movs	r2, #128	; 0x80
 800f36a:	0252      	lsls	r2, r2, #9
 800f36c:	430a      	orrs	r2, r1
 800f36e:	601a      	str	r2, [r3, #0]
 800f370:	e77a      	b.n	800f268 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800f372:	f7fe fb49 	bl	800da08 <HAL_GetTick>
 800f376:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f378:	4b6e      	ldr	r3, [pc, #440]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	039b      	lsls	r3, r3, #14
 800f37e:	d58f      	bpl.n	800f2a0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f380:	f7fe fb42 	bl	800da08 <HAL_GetTick>
 800f384:	1b40      	subs	r0, r0, r5
 800f386:	2864      	cmp	r0, #100	; 0x64
 800f388:	d9f6      	bls.n	800f378 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 800f38a:	2003      	movs	r0, #3
 800f38c:	e189      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800f38e:	2a02      	cmp	r2, #2
 800f390:	d192      	bne.n	800f2b8 <HAL_RCC_OscConfig+0x9c>
 800f392:	e793      	b.n	800f2bc <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f394:	68e3      	ldr	r3, [r4, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d022      	beq.n	800f3e0 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800f39a:	4a66      	ldr	r2, [pc, #408]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f39c:	6813      	ldr	r3, [r2, #0]
 800f39e:	4969      	ldr	r1, [pc, #420]	; (800f544 <HAL_RCC_OscConfig+0x328>)
 800f3a0:	400b      	ands	r3, r1
 800f3a2:	6921      	ldr	r1, [r4, #16]
 800f3a4:	430b      	orrs	r3, r1
 800f3a6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 800f3a8:	6811      	ldr	r1, [r2, #0]
 800f3aa:	2380      	movs	r3, #128	; 0x80
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	430b      	orrs	r3, r1
 800f3b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f3b2:	f7fe fb29 	bl	800da08 <HAL_GetTick>
 800f3b6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f3b8:	4b5e      	ldr	r3, [pc, #376]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	055b      	lsls	r3, r3, #21
 800f3be:	d406      	bmi.n	800f3ce <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3c0:	f7fe fb22 	bl	800da08 <HAL_GetTick>
 800f3c4:	1b40      	subs	r0, r0, r5
 800f3c6:	2802      	cmp	r0, #2
 800f3c8:	d9f6      	bls.n	800f3b8 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 800f3ca:	2003      	movs	r0, #3
 800f3cc:	e169      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f3ce:	4959      	ldr	r1, [pc, #356]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f3d0:	684a      	ldr	r2, [r1, #4]
 800f3d2:	6963      	ldr	r3, [r4, #20]
 800f3d4:	021b      	lsls	r3, r3, #8
 800f3d6:	485a      	ldr	r0, [pc, #360]	; (800f540 <HAL_RCC_OscConfig+0x324>)
 800f3d8:	4002      	ands	r2, r0
 800f3da:	4313      	orrs	r3, r2
 800f3dc:	604b      	str	r3, [r1, #4]
 800f3de:	e794      	b.n	800f30a <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 800f3e0:	4a54      	ldr	r2, [pc, #336]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f3e2:	6813      	ldr	r3, [r2, #0]
 800f3e4:	495a      	ldr	r1, [pc, #360]	; (800f550 <HAL_RCC_OscConfig+0x334>)
 800f3e6:	400b      	ands	r3, r1
 800f3e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f3ea:	f7fe fb0d 	bl	800da08 <HAL_GetTick>
 800f3ee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f3f0:	4b50      	ldr	r3, [pc, #320]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	055b      	lsls	r3, r3, #21
 800f3f6:	d588      	bpl.n	800f30a <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3f8:	f7fe fb06 	bl	800da08 <HAL_GetTick>
 800f3fc:	1b40      	subs	r0, r0, r5
 800f3fe:	2802      	cmp	r0, #2
 800f400:	d9f6      	bls.n	800f3f0 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 800f402:	2003      	movs	r0, #3
 800f404:	e14d      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800f406:	4b4b      	ldr	r3, [pc, #300]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f40a:	079b      	lsls	r3, r3, #30
 800f40c:	d503      	bpl.n	800f416 <HAL_RCC_OscConfig+0x1fa>
 800f40e:	69a3      	ldr	r3, [r4, #24]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d100      	bne.n	800f416 <HAL_RCC_OscConfig+0x1fa>
 800f414:	e14d      	b.n	800f6b2 <HAL_RCC_OscConfig+0x496>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	075b      	lsls	r3, r3, #29
 800f41a:	d400      	bmi.n	800f41e <HAL_RCC_OscConfig+0x202>
 800f41c:	e0a0      	b.n	800f560 <HAL_RCC_OscConfig+0x344>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800f41e:	4b45      	ldr	r3, [pc, #276]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f420:	689a      	ldr	r2, [r3, #8]
 800f422:	2338      	movs	r3, #56	; 0x38
 800f424:	4013      	ands	r3, r2
 800f426:	2b20      	cmp	r3, #32
 800f428:	d022      	beq.n	800f470 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f42a:	4b42      	ldr	r3, [pc, #264]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f42e:	00db      	lsls	r3, r3, #3
 800f430:	d427      	bmi.n	800f482 <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_PWR_CLK_ENABLE();
 800f432:	4a40      	ldr	r2, [pc, #256]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f434:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f436:	2080      	movs	r0, #128	; 0x80
 800f438:	0540      	lsls	r0, r0, #21
 800f43a:	4301      	orrs	r1, r0
 800f43c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800f43e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f440:	4003      	ands	r3, r0
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800f446:	2501      	movs	r5, #1
 800f448:	e01c      	b.n	800f484 <HAL_RCC_OscConfig+0x268>
        __HAL_RCC_LSI_DISABLE();
 800f44a:	4a3a      	ldr	r2, [pc, #232]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f44c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 800f44e:	2101      	movs	r1, #1
 800f450:	438b      	bics	r3, r1
 800f452:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800f454:	f7fe fad8 	bl	800da08 <HAL_GetTick>
 800f458:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f45a:	4b36      	ldr	r3, [pc, #216]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f45c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f45e:	079b      	lsls	r3, r3, #30
 800f460:	d5d9      	bpl.n	800f416 <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f462:	f7fe fad1 	bl	800da08 <HAL_GetTick>
 800f466:	1b40      	subs	r0, r0, r5
 800f468:	2802      	cmp	r0, #2
 800f46a:	d9f6      	bls.n	800f45a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 800f46c:	2003      	movs	r0, #3
 800f46e:	e118      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800f470:	4b30      	ldr	r3, [pc, #192]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f474:	079b      	lsls	r3, r3, #30
 800f476:	d573      	bpl.n	800f560 <HAL_RCC_OscConfig+0x344>
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d170      	bne.n	800f560 <HAL_RCC_OscConfig+0x344>
        return HAL_ERROR;
 800f47e:	2001      	movs	r0, #1
 800f480:	e10f      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
    FlagStatus       pwrclkchanged = RESET;
 800f482:	2500      	movs	r5, #0
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f484:	4b33      	ldr	r3, [pc, #204]	; (800f554 <HAL_RCC_OscConfig+0x338>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	05db      	lsls	r3, r3, #23
 800f48a:	d51f      	bpl.n	800f4cc <HAL_RCC_OscConfig+0x2b0>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f48c:	68a3      	ldr	r3, [r4, #8]
 800f48e:	2b01      	cmp	r3, #1
 800f490:	d030      	beq.n	800f4f4 <HAL_RCC_OscConfig+0x2d8>
 800f492:	2b05      	cmp	r3, #5
 800f494:	d034      	beq.n	800f500 <HAL_RCC_OscConfig+0x2e4>
 800f496:	4b27      	ldr	r3, [pc, #156]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f49a:	2101      	movs	r1, #1
 800f49c:	438a      	bics	r2, r1
 800f49e:	65da      	str	r2, [r3, #92]	; 0x5c
 800f4a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4a2:	3103      	adds	r1, #3
 800f4a4:	438a      	bics	r2, r1
 800f4a6:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f4a8:	68a3      	ldr	r3, [r4, #8]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d032      	beq.n	800f514 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800f4ae:	f7fe faab 	bl	800da08 <HAL_GetTick>
 800f4b2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f4b4:	4b1f      	ldr	r3, [pc, #124]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4b8:	079b      	lsls	r3, r3, #30
 800f4ba:	d44f      	bmi.n	800f55c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f4bc:	f7fe faa4 	bl	800da08 <HAL_GetTick>
 800f4c0:	1b80      	subs	r0, r0, r6
 800f4c2:	4b25      	ldr	r3, [pc, #148]	; (800f558 <HAL_RCC_OscConfig+0x33c>)
 800f4c4:	4298      	cmp	r0, r3
 800f4c6:	d9f5      	bls.n	800f4b4 <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 800f4c8:	2003      	movs	r0, #3
 800f4ca:	e0ea      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f4cc:	4a21      	ldr	r2, [pc, #132]	; (800f554 <HAL_RCC_OscConfig+0x338>)
 800f4ce:	6811      	ldr	r1, [r2, #0]
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	430b      	orrs	r3, r1
 800f4d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f4d8:	f7fe fa96 	bl	800da08 <HAL_GetTick>
 800f4dc:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f4de:	4b1d      	ldr	r3, [pc, #116]	; (800f554 <HAL_RCC_OscConfig+0x338>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	05db      	lsls	r3, r3, #23
 800f4e4:	d4d2      	bmi.n	800f48c <HAL_RCC_OscConfig+0x270>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f4e6:	f7fe fa8f 	bl	800da08 <HAL_GetTick>
 800f4ea:	1b80      	subs	r0, r0, r6
 800f4ec:	2802      	cmp	r0, #2
 800f4ee:	d9f6      	bls.n	800f4de <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 800f4f0:	2003      	movs	r0, #3
 800f4f2:	e0d6      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f4f4:	4a0f      	ldr	r2, [pc, #60]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f4f6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	430b      	orrs	r3, r1
 800f4fc:	65d3      	str	r3, [r2, #92]	; 0x5c
 800f4fe:	e7d3      	b.n	800f4a8 <HAL_RCC_OscConfig+0x28c>
 800f500:	4b0c      	ldr	r3, [pc, #48]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f502:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f504:	2104      	movs	r1, #4
 800f506:	430a      	orrs	r2, r1
 800f508:	65da      	str	r2, [r3, #92]	; 0x5c
 800f50a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f50c:	3903      	subs	r1, #3
 800f50e:	430a      	orrs	r2, r1
 800f510:	65da      	str	r2, [r3, #92]	; 0x5c
 800f512:	e7c9      	b.n	800f4a8 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 800f514:	f7fe fa78 	bl	800da08 <HAL_GetTick>
 800f518:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f51a:	4b06      	ldr	r3, [pc, #24]	; (800f534 <HAL_RCC_OscConfig+0x318>)
 800f51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f51e:	079b      	lsls	r3, r3, #30
 800f520:	d51c      	bpl.n	800f55c <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f522:	f7fe fa71 	bl	800da08 <HAL_GetTick>
 800f526:	1b80      	subs	r0, r0, r6
 800f528:	4b0b      	ldr	r3, [pc, #44]	; (800f558 <HAL_RCC_OscConfig+0x33c>)
 800f52a:	4298      	cmp	r0, r3
 800f52c:	d9f5      	bls.n	800f51a <HAL_RCC_OscConfig+0x2fe>
            return HAL_TIMEOUT;
 800f52e:	2003      	movs	r0, #3
 800f530:	e0b7      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
 800f532:	46c0      	nop			; (mov r8, r8)
 800f534:	40021000 	.word	0x40021000
 800f538:	fffeffff 	.word	0xfffeffff
 800f53c:	fffbffff 	.word	0xfffbffff
 800f540:	ffff80ff 	.word	0xffff80ff
 800f544:	ffffc7ff 	.word	0xffffc7ff
 800f548:	00f42400 	.word	0x00f42400
 800f54c:	20000000 	.word	0x20000000
 800f550:	fffffeff 	.word	0xfffffeff
 800f554:	40007000 	.word	0x40007000
 800f558:	00001388 	.word	0x00001388
      if (pwrclkchanged == SET)
 800f55c:	2d01      	cmp	r5, #1
 800f55e:	d026      	beq.n	800f5ae <HAL_RCC_OscConfig+0x392>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f560:	69e3      	ldr	r3, [r4, #28]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d100      	bne.n	800f568 <HAL_RCC_OscConfig+0x34c>
 800f566:	e0a6      	b.n	800f6b6 <HAL_RCC_OscConfig+0x49a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f568:	4a56      	ldr	r2, [pc, #344]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f56a:	6891      	ldr	r1, [r2, #8]
 800f56c:	2238      	movs	r2, #56	; 0x38
 800f56e:	400a      	ands	r2, r1
 800f570:	2a10      	cmp	r2, #16
 800f572:	d063      	beq.n	800f63c <HAL_RCC_OscConfig+0x420>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f574:	2b02      	cmp	r3, #2
 800f576:	d020      	beq.n	800f5ba <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_DISABLE();
 800f578:	4b52      	ldr	r3, [pc, #328]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	4952      	ldr	r1, [pc, #328]	; (800f6c8 <HAL_RCC_OscConfig+0x4ac>)
 800f57e:	400a      	ands	r2, r1
 800f580:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800f582:	68da      	ldr	r2, [r3, #12]
 800f584:	2103      	movs	r1, #3
 800f586:	438a      	bics	r2, r1
 800f588:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800f58a:	68da      	ldr	r2, [r3, #12]
 800f58c:	494f      	ldr	r1, [pc, #316]	; (800f6cc <HAL_RCC_OscConfig+0x4b0>)
 800f58e:	400a      	ands	r2, r1
 800f590:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 800f592:	f7fe fa39 	bl	800da08 <HAL_GetTick>
 800f596:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f598:	4b4a      	ldr	r3, [pc, #296]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	019b      	lsls	r3, r3, #6
 800f59e:	d54b      	bpl.n	800f638 <HAL_RCC_OscConfig+0x41c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5a0:	f7fe fa32 	bl	800da08 <HAL_GetTick>
 800f5a4:	1b00      	subs	r0, r0, r4
 800f5a6:	2802      	cmp	r0, #2
 800f5a8:	d9f6      	bls.n	800f598 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800f5aa:	2003      	movs	r0, #3
 800f5ac:	e079      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_PWR_CLK_DISABLE();
 800f5ae:	4a45      	ldr	r2, [pc, #276]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f5b0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f5b2:	4947      	ldr	r1, [pc, #284]	; (800f6d0 <HAL_RCC_OscConfig+0x4b4>)
 800f5b4:	400b      	ands	r3, r1
 800f5b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800f5b8:	e7d2      	b.n	800f560 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_PLL_DISABLE();
 800f5ba:	4a42      	ldr	r2, [pc, #264]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f5bc:	6813      	ldr	r3, [r2, #0]
 800f5be:	4942      	ldr	r1, [pc, #264]	; (800f6c8 <HAL_RCC_OscConfig+0x4ac>)
 800f5c0:	400b      	ands	r3, r1
 800f5c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800f5c4:	f7fe fa20 	bl	800da08 <HAL_GetTick>
 800f5c8:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f5ca:	4b3e      	ldr	r3, [pc, #248]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	019b      	lsls	r3, r3, #6
 800f5d0:	d506      	bpl.n	800f5e0 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f5d2:	f7fe fa19 	bl	800da08 <HAL_GetTick>
 800f5d6:	1b40      	subs	r0, r0, r5
 800f5d8:	2802      	cmp	r0, #2
 800f5da:	d9f6      	bls.n	800f5ca <HAL_RCC_OscConfig+0x3ae>
            return HAL_TIMEOUT;
 800f5dc:	2003      	movs	r0, #3
 800f5de:	e060      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f5e0:	4a38      	ldr	r2, [pc, #224]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f5e2:	68d1      	ldr	r1, [r2, #12]
 800f5e4:	6a23      	ldr	r3, [r4, #32]
 800f5e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f5e8:	4303      	orrs	r3, r0
 800f5ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f5ec:	0200      	lsls	r0, r0, #8
 800f5ee:	4303      	orrs	r3, r0
 800f5f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f5f2:	4303      	orrs	r3, r0
 800f5f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f5f6:	4303      	orrs	r3, r0
 800f5f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800f5fa:	4303      	orrs	r3, r0
 800f5fc:	4835      	ldr	r0, [pc, #212]	; (800f6d4 <HAL_RCC_OscConfig+0x4b8>)
 800f5fe:	4001      	ands	r1, r0
 800f600:	430b      	orrs	r3, r1
 800f602:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800f604:	6811      	ldr	r1, [r2, #0]
 800f606:	2380      	movs	r3, #128	; 0x80
 800f608:	045b      	lsls	r3, r3, #17
 800f60a:	430b      	orrs	r3, r1
 800f60c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800f60e:	68d1      	ldr	r1, [r2, #12]
 800f610:	2380      	movs	r3, #128	; 0x80
 800f612:	055b      	lsls	r3, r3, #21
 800f614:	430b      	orrs	r3, r1
 800f616:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800f618:	f7fe f9f6 	bl	800da08 <HAL_GetTick>
 800f61c:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f61e:	4b29      	ldr	r3, [pc, #164]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	019b      	lsls	r3, r3, #6
 800f624:	d406      	bmi.n	800f634 <HAL_RCC_OscConfig+0x418>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f626:	f7fe f9ef 	bl	800da08 <HAL_GetTick>
 800f62a:	1b00      	subs	r0, r0, r4
 800f62c:	2802      	cmp	r0, #2
 800f62e:	d9f6      	bls.n	800f61e <HAL_RCC_OscConfig+0x402>
            return HAL_TIMEOUT;
 800f630:	2003      	movs	r0, #3
 800f632:	e036      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f634:	2000      	movs	r0, #0
 800f636:	e034      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
 800f638:	2000      	movs	r0, #0
 800f63a:	e032      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d03c      	beq.n	800f6ba <HAL_RCC_OscConfig+0x49e>
        temp_pllckcfg = RCC->PLLCFGR;
 800f640:	4b20      	ldr	r3, [pc, #128]	; (800f6c4 <HAL_RCC_OscConfig+0x4a8>)
 800f642:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f644:	2303      	movs	r3, #3
 800f646:	4013      	ands	r3, r2
 800f648:	6a21      	ldr	r1, [r4, #32]
 800f64a:	428b      	cmp	r3, r1
 800f64c:	d001      	beq.n	800f652 <HAL_RCC_OscConfig+0x436>
          return HAL_ERROR;
 800f64e:	2001      	movs	r0, #1
 800f650:	e027      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f652:	2370      	movs	r3, #112	; 0x70
 800f654:	4013      	ands	r3, r2
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f656:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f658:	428b      	cmp	r3, r1
 800f65a:	d001      	beq.n	800f660 <HAL_RCC_OscConfig+0x444>
          return HAL_ERROR;
 800f65c:	2001      	movs	r0, #1
 800f65e:	e020      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f660:	21fe      	movs	r1, #254	; 0xfe
 800f662:	01c9      	lsls	r1, r1, #7
 800f664:	4011      	ands	r1, r2
 800f666:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f668:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800f66a:	4299      	cmp	r1, r3
 800f66c:	d001      	beq.n	800f672 <HAL_RCC_OscConfig+0x456>
          return HAL_ERROR;
 800f66e:	2001      	movs	r0, #1
 800f670:	e017      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f672:	23f8      	movs	r3, #248	; 0xf8
 800f674:	039b      	lsls	r3, r3, #14
 800f676:	4013      	ands	r3, r2
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f678:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f67a:	428b      	cmp	r3, r1
 800f67c:	d001      	beq.n	800f682 <HAL_RCC_OscConfig+0x466>
          return HAL_ERROR;
 800f67e:	2001      	movs	r0, #1
 800f680:	e00f      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f682:	23e0      	movs	r3, #224	; 0xe0
 800f684:	051b      	lsls	r3, r3, #20
 800f686:	4013      	ands	r3, r2
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800f688:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f68a:	428b      	cmp	r3, r1
 800f68c:	d001      	beq.n	800f692 <HAL_RCC_OscConfig+0x476>
          return HAL_ERROR;
 800f68e:	2001      	movs	r0, #1
 800f690:	e007      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800f692:	0f52      	lsrs	r2, r2, #29
 800f694:	0752      	lsls	r2, r2, #29
 800f696:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800f698:	429a      	cmp	r2, r3
 800f69a:	d010      	beq.n	800f6be <HAL_RCC_OscConfig+0x4a2>
          return HAL_ERROR;
 800f69c:	2001      	movs	r0, #1
 800f69e:	e000      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
    return HAL_ERROR;
 800f6a0:	2001      	movs	r0, #1
}
 800f6a2:	b002      	add	sp, #8
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	e7fb      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f6aa:	2001      	movs	r0, #1
 800f6ac:	e7f9      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
          return HAL_ERROR;
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	e7f7      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f6b2:	2001      	movs	r0, #1
 800f6b4:	e7f5      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f6b6:	2000      	movs	r0, #0
 800f6b8:	e7f3      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
        return HAL_ERROR;
 800f6ba:	2001      	movs	r0, #1
 800f6bc:	e7f1      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
  return HAL_OK;
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e7ef      	b.n	800f6a2 <HAL_RCC_OscConfig+0x486>
 800f6c2:	46c0      	nop			; (mov r8, r8)
 800f6c4:	40021000 	.word	0x40021000
 800f6c8:	feffffff 	.word	0xfeffffff
 800f6cc:	eefeffff 	.word	0xeefeffff
 800f6d0:	efffffff 	.word	0xefffffff
 800f6d4:	11c1808c 	.word	0x11c1808c

0800f6d8 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800f6d8:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	4218      	tst	r0, r3
 800f6de:	d104      	bne.n	800f6ea <HAL_GPIO_EXTI_IRQHandler+0x12>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800f6e0:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f6e2:	691b      	ldr	r3, [r3, #16]
 800f6e4:	4203      	tst	r3, r0
 800f6e6:	d103      	bne.n	800f6f0 <HAL_GPIO_EXTI_IRQHandler+0x18>
}
 800f6e8:	4770      	bx	lr
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800f6ea:	4b03      	ldr	r3, [pc, #12]	; (800f6f8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f6ec:	60d8      	str	r0, [r3, #12]
 800f6ee:	e7f7      	b.n	800f6e0 <HAL_GPIO_EXTI_IRQHandler+0x8>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800f6f0:	4b01      	ldr	r3, [pc, #4]	; (800f6f8 <HAL_GPIO_EXTI_IRQHandler+0x20>)
 800f6f2:	6118      	str	r0, [r3, #16]
 800f6f4:	e7f8      	b.n	800f6e8 <HAL_GPIO_EXTI_IRQHandler+0x10>
 800f6f6:	46c0      	nop			; (mov r8, r8)
 800f6f8:	40021800 	.word	0x40021800

0800f6fc <HAL_GPIO_WritePin>:
  if (PinState != GPIO_PIN_RESET)
 800f6fc:	2a00      	cmp	r2, #0
 800f6fe:	d101      	bne.n	800f704 <HAL_GPIO_WritePin+0x8>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800f700:	6281      	str	r1, [r0, #40]	; 0x28
}
 800f702:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800f704:	6181      	str	r1, [r0, #24]
 800f706:	e7fc      	b.n	800f702 <HAL_GPIO_WritePin+0x6>

0800f708 <HAL_GPIO_ReadPin>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800f708:	6903      	ldr	r3, [r0, #16]
 800f70a:	420b      	tst	r3, r1
 800f70c:	d101      	bne.n	800f712 <HAL_GPIO_ReadPin+0xa>
    bitstatus = GPIO_PIN_RESET;
 800f70e:	2000      	movs	r0, #0
}
 800f710:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800f712:	2001      	movs	r0, #1
 800f714:	e7fc      	b.n	800f710 <HAL_GPIO_ReadPin+0x8>

0800f716 <HAL_GPIO_DeInit>:
{
 800f716:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f718:	46ce      	mov	lr, r9
 800f71a:	4647      	mov	r7, r8
 800f71c:	b580      	push	{r7, lr}
 800f71e:	4689      	mov	r9, r1
  uint32_t position = 0x00u;
 800f720:	2300      	movs	r3, #0
 800f722:	e024      	b.n	800f76e <HAL_GPIO_DeInit+0x58>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800f724:	2103      	movs	r1, #3
 800f726:	4688      	mov	r8, r1
 800f728:	e001      	b.n	800f72e <HAL_GPIO_DeInit+0x18>
 800f72a:	2100      	movs	r1, #0
 800f72c:	4688      	mov	r8, r1
 800f72e:	4641      	mov	r1, r8
 800f730:	40a1      	lsls	r1, r4
 800f732:	42a9      	cmp	r1, r5
 800f734:	d046      	beq.n	800f7c4 <HAL_GPIO_DeInit+0xae>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800f736:	6806      	ldr	r6, [r0, #0]
 800f738:	005f      	lsls	r7, r3, #1
 800f73a:	2503      	movs	r5, #3
 800f73c:	40bd      	lsls	r5, r7
 800f73e:	432e      	orrs	r6, r5
 800f740:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800f742:	08dc      	lsrs	r4, r3, #3
 800f744:	3408      	adds	r4, #8
 800f746:	00a4      	lsls	r4, r4, #2
 800f748:	5827      	ldr	r7, [r4, r0]
 800f74a:	2607      	movs	r6, #7
 800f74c:	401e      	ands	r6, r3
 800f74e:	00b6      	lsls	r6, r6, #2
 800f750:	210f      	movs	r1, #15
 800f752:	40b1      	lsls	r1, r6
 800f754:	438f      	bics	r7, r1
 800f756:	5027      	str	r7, [r4, r0]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f758:	6886      	ldr	r6, [r0, #8]
 800f75a:	43ec      	mvns	r4, r5
 800f75c:	4026      	ands	r6, r4
 800f75e:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800f760:	6845      	ldr	r5, [r0, #4]
 800f762:	4395      	bics	r5, r2
 800f764:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f766:	68c2      	ldr	r2, [r0, #12]
 800f768:	4014      	ands	r4, r2
 800f76a:	60c4      	str	r4, [r0, #12]
    position++;
 800f76c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800f76e:	464a      	mov	r2, r9
 800f770:	40da      	lsrs	r2, r3
 800f772:	d03e      	beq.n	800f7f2 <HAL_GPIO_DeInit+0xdc>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800f774:	2201      	movs	r2, #1
 800f776:	409a      	lsls	r2, r3
 800f778:	464e      	mov	r6, r9
 800f77a:	4016      	ands	r6, r2
    if (iocurrent != 0x00u)
 800f77c:	d0f6      	beq.n	800f76c <HAL_GPIO_DeInit+0x56>
      tmp = EXTI->EXTICR[position >> 2u];
 800f77e:	0899      	lsrs	r1, r3, #2
 800f780:	468c      	mov	ip, r1
 800f782:	000c      	movs	r4, r1
 800f784:	3418      	adds	r4, #24
 800f786:	00a4      	lsls	r4, r4, #2
 800f788:	4d1c      	ldr	r5, [pc, #112]	; (800f7fc <HAL_GPIO_DeInit+0xe6>)
 800f78a:	5965      	ldr	r5, [r4, r5]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800f78c:	2403      	movs	r4, #3
 800f78e:	401c      	ands	r4, r3
 800f790:	00e4      	lsls	r4, r4, #3
 800f792:	270f      	movs	r7, #15
 800f794:	40a7      	lsls	r7, r4
 800f796:	403d      	ands	r5, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800f798:	21a0      	movs	r1, #160	; 0xa0
 800f79a:	05c9      	lsls	r1, r1, #23
 800f79c:	4288      	cmp	r0, r1
 800f79e:	d0c4      	beq.n	800f72a <HAL_GPIO_DeInit+0x14>
 800f7a0:	4917      	ldr	r1, [pc, #92]	; (800f800 <HAL_GPIO_DeInit+0xea>)
 800f7a2:	4288      	cmp	r0, r1
 800f7a4:	d008      	beq.n	800f7b8 <HAL_GPIO_DeInit+0xa2>
 800f7a6:	4917      	ldr	r1, [pc, #92]	; (800f804 <HAL_GPIO_DeInit+0xee>)
 800f7a8:	4288      	cmp	r0, r1
 800f7aa:	d008      	beq.n	800f7be <HAL_GPIO_DeInit+0xa8>
 800f7ac:	4916      	ldr	r1, [pc, #88]	; (800f808 <HAL_GPIO_DeInit+0xf2>)
 800f7ae:	4288      	cmp	r0, r1
 800f7b0:	d0b8      	beq.n	800f724 <HAL_GPIO_DeInit+0xe>
 800f7b2:	2105      	movs	r1, #5
 800f7b4:	4688      	mov	r8, r1
 800f7b6:	e7ba      	b.n	800f72e <HAL_GPIO_DeInit+0x18>
 800f7b8:	2101      	movs	r1, #1
 800f7ba:	4688      	mov	r8, r1
 800f7bc:	e7b7      	b.n	800f72e <HAL_GPIO_DeInit+0x18>
 800f7be:	2102      	movs	r1, #2
 800f7c0:	4688      	mov	r8, r1
 800f7c2:	e7b4      	b.n	800f72e <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 800f7c4:	4d0d      	ldr	r5, [pc, #52]	; (800f7fc <HAL_GPIO_DeInit+0xe6>)
 800f7c6:	2180      	movs	r1, #128	; 0x80
 800f7c8:	586c      	ldr	r4, [r5, r1]
 800f7ca:	43f6      	mvns	r6, r6
 800f7cc:	4034      	ands	r4, r6
 800f7ce:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 800f7d0:	3104      	adds	r1, #4
 800f7d2:	586c      	ldr	r4, [r5, r1]
 800f7d4:	4034      	ands	r4, r6
 800f7d6:	506c      	str	r4, [r5, r1]
        EXTI->RTSR1 &= ~(iocurrent);
 800f7d8:	682c      	ldr	r4, [r5, #0]
 800f7da:	4034      	ands	r4, r6
 800f7dc:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800f7de:	686c      	ldr	r4, [r5, #4]
 800f7e0:	4026      	ands	r6, r4
 800f7e2:	606e      	str	r6, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800f7e4:	4664      	mov	r4, ip
 800f7e6:	3418      	adds	r4, #24
 800f7e8:	00a4      	lsls	r4, r4, #2
 800f7ea:	5966      	ldr	r6, [r4, r5]
 800f7ec:	43be      	bics	r6, r7
 800f7ee:	5166      	str	r6, [r4, r5]
 800f7f0:	e7a1      	b.n	800f736 <HAL_GPIO_DeInit+0x20>
}
 800f7f2:	bc0c      	pop	{r2, r3}
 800f7f4:	4690      	mov	r8, r2
 800f7f6:	4699      	mov	r9, r3
 800f7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7fa:	46c0      	nop			; (mov r8, r8)
 800f7fc:	40021800 	.word	0x40021800
 800f800:	50000400 	.word	0x50000400
 800f804:	50000800 	.word	0x50000800
 800f808:	50000c00 	.word	0x50000c00

0800f80c <HAL_GPIO_Init>:
{
 800f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80e:	46c6      	mov	lr, r8
 800f810:	b500      	push	{lr}
  uint32_t position = 0x00u;
 800f812:	2300      	movs	r3, #0
 800f814:	e03b      	b.n	800f88e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800f816:	2603      	movs	r6, #3
 800f818:	e000      	b.n	800f81c <HAL_GPIO_Init+0x10>
 800f81a:	2600      	movs	r6, #0
 800f81c:	40ae      	lsls	r6, r5
 800f81e:	0035      	movs	r5, r6
 800f820:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800f822:	4e53      	ldr	r6, [pc, #332]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f824:	3418      	adds	r4, #24
 800f826:	00a4      	lsls	r4, r4, #2
 800f828:	51a5      	str	r5, [r4, r6]
        temp = EXTI->IMR1;
 800f82a:	2480      	movs	r4, #128	; 0x80
 800f82c:	5935      	ldr	r5, [r6, r4]
        temp &= ~(iocurrent);
 800f82e:	4642      	mov	r2, r8
 800f830:	43d4      	mvns	r4, r2
 800f832:	002e      	movs	r6, r5
 800f834:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f836:	684a      	ldr	r2, [r1, #4]
 800f838:	03d2      	lsls	r2, r2, #15
 800f83a:	d502      	bpl.n	800f842 <HAL_GPIO_Init+0x36>
          temp |= iocurrent;
 800f83c:	4642      	mov	r2, r8
 800f83e:	4315      	orrs	r5, r2
 800f840:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 800f842:	4d4b      	ldr	r5, [pc, #300]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f844:	2780      	movs	r7, #128	; 0x80
 800f846:	51ee      	str	r6, [r5, r7]
        temp = EXTI->EMR1;
 800f848:	2684      	movs	r6, #132	; 0x84
 800f84a:	59ad      	ldr	r5, [r5, r6]
        temp &= ~(iocurrent);
 800f84c:	002e      	movs	r6, r5
 800f84e:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f850:	684a      	ldr	r2, [r1, #4]
 800f852:	0392      	lsls	r2, r2, #14
 800f854:	d502      	bpl.n	800f85c <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 800f856:	4642      	mov	r2, r8
 800f858:	4315      	orrs	r5, r2
 800f85a:	002e      	movs	r6, r5
        EXTI->EMR1 = temp;
 800f85c:	4d44      	ldr	r5, [pc, #272]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f85e:	2784      	movs	r7, #132	; 0x84
 800f860:	51ee      	str	r6, [r5, r7]
        temp = EXTI->RTSR1;
 800f862:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800f864:	002e      	movs	r6, r5
 800f866:	4026      	ands	r6, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f868:	684a      	ldr	r2, [r1, #4]
 800f86a:	02d2      	lsls	r2, r2, #11
 800f86c:	d502      	bpl.n	800f874 <HAL_GPIO_Init+0x68>
          temp |= iocurrent;
 800f86e:	4642      	mov	r2, r8
 800f870:	4315      	orrs	r5, r2
 800f872:	002e      	movs	r6, r5
        EXTI->RTSR1 = temp;
 800f874:	4d3e      	ldr	r5, [pc, #248]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f876:	602e      	str	r6, [r5, #0]
        temp = EXTI->FTSR1;
 800f878:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800f87a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f87c:	684a      	ldr	r2, [r1, #4]
 800f87e:	0292      	lsls	r2, r2, #10
 800f880:	d502      	bpl.n	800f888 <HAL_GPIO_Init+0x7c>
          temp |= iocurrent;
 800f882:	4642      	mov	r2, r8
 800f884:	432a      	orrs	r2, r5
 800f886:	0014      	movs	r4, r2
        EXTI->FTSR1 = temp;
 800f888:	4a39      	ldr	r2, [pc, #228]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f88a:	6054      	str	r4, [r2, #4]
    position++;
 800f88c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f88e:	680a      	ldr	r2, [r1, #0]
 800f890:	0014      	movs	r4, r2
 800f892:	40dc      	lsrs	r4, r3
 800f894:	d069      	beq.n	800f96a <HAL_GPIO_Init+0x15e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800f896:	2501      	movs	r5, #1
 800f898:	409d      	lsls	r5, r3
 800f89a:	402a      	ands	r2, r5
 800f89c:	4690      	mov	r8, r2
    if (iocurrent != 0x00u)
 800f89e:	d0f5      	beq.n	800f88c <HAL_GPIO_Init+0x80>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f8a0:	684c      	ldr	r4, [r1, #4]
 800f8a2:	2c02      	cmp	r4, #2
 800f8a4:	d001      	beq.n	800f8aa <HAL_GPIO_Init+0x9e>
 800f8a6:	2c12      	cmp	r4, #18
 800f8a8:	d10e      	bne.n	800f8c8 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3u];
 800f8aa:	08dc      	lsrs	r4, r3, #3
 800f8ac:	3408      	adds	r4, #8
 800f8ae:	00a4      	lsls	r4, r4, #2
 800f8b0:	5827      	ldr	r7, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800f8b2:	2607      	movs	r6, #7
 800f8b4:	401e      	ands	r6, r3
 800f8b6:	00b6      	lsls	r6, r6, #2
 800f8b8:	220f      	movs	r2, #15
 800f8ba:	40b2      	lsls	r2, r6
 800f8bc:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800f8be:	690a      	ldr	r2, [r1, #16]
 800f8c0:	40b2      	lsls	r2, r6
 800f8c2:	0016      	movs	r6, r2
 800f8c4:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3u] = temp;
 800f8c6:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 800f8c8:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800f8ca:	005f      	lsls	r7, r3, #1
 800f8cc:	2403      	movs	r4, #3
 800f8ce:	0026      	movs	r6, r4
 800f8d0:	40be      	lsls	r6, r7
 800f8d2:	43f6      	mvns	r6, r6
 800f8d4:	4032      	ands	r2, r6
 800f8d6:	4694      	mov	ip, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800f8d8:	684a      	ldr	r2, [r1, #4]
 800f8da:	4014      	ands	r4, r2
 800f8dc:	40bc      	lsls	r4, r7
 800f8de:	4662      	mov	r2, ip
 800f8e0:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800f8e2:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800f8e4:	684c      	ldr	r4, [r1, #4]
 800f8e6:	1e62      	subs	r2, r4, #1
 800f8e8:	2a01      	cmp	r2, #1
 800f8ea:	d903      	bls.n	800f8f4 <HAL_GPIO_Init+0xe8>
 800f8ec:	2c11      	cmp	r4, #17
 800f8ee:	d001      	beq.n	800f8f4 <HAL_GPIO_Init+0xe8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800f8f0:	2c12      	cmp	r4, #18
 800f8f2:	d110      	bne.n	800f916 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->OSPEEDR;
 800f8f4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800f8f6:	4034      	ands	r4, r6
 800f8f8:	46a4      	mov	ip, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800f8fa:	68cc      	ldr	r4, [r1, #12]
 800f8fc:	40bc      	lsls	r4, r7
 800f8fe:	4662      	mov	r2, ip
 800f900:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 800f902:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800f904:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f906:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800f908:	684a      	ldr	r2, [r1, #4]
 800f90a:	0912      	lsrs	r2, r2, #4
 800f90c:	2501      	movs	r5, #1
 800f90e:	4015      	ands	r5, r2
 800f910:	409d      	lsls	r5, r3
 800f912:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 800f914:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800f916:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800f918:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800f91a:	688c      	ldr	r4, [r1, #8]
 800f91c:	40bc      	lsls	r4, r7
 800f91e:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 800f920:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800f922:	684a      	ldr	r2, [r1, #4]
 800f924:	00d2      	lsls	r2, r2, #3
 800f926:	d5b1      	bpl.n	800f88c <HAL_GPIO_Init+0x80>
        temp = EXTI->EXTICR[position >> 2u];
 800f928:	089c      	lsrs	r4, r3, #2
 800f92a:	0025      	movs	r5, r4
 800f92c:	3518      	adds	r5, #24
 800f92e:	00ad      	lsls	r5, r5, #2
 800f930:	4e0f      	ldr	r6, [pc, #60]	; (800f970 <HAL_GPIO_Init+0x164>)
 800f932:	59af      	ldr	r7, [r5, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800f934:	2503      	movs	r5, #3
 800f936:	401d      	ands	r5, r3
 800f938:	00ed      	lsls	r5, r5, #3
 800f93a:	260f      	movs	r6, #15
 800f93c:	40ae      	lsls	r6, r5
 800f93e:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800f940:	26a0      	movs	r6, #160	; 0xa0
 800f942:	05f6      	lsls	r6, r6, #23
 800f944:	42b0      	cmp	r0, r6
 800f946:	d100      	bne.n	800f94a <HAL_GPIO_Init+0x13e>
 800f948:	e767      	b.n	800f81a <HAL_GPIO_Init+0xe>
 800f94a:	4e0a      	ldr	r6, [pc, #40]	; (800f974 <HAL_GPIO_Init+0x168>)
 800f94c:	42b0      	cmp	r0, r6
 800f94e:	d008      	beq.n	800f962 <HAL_GPIO_Init+0x156>
 800f950:	4e09      	ldr	r6, [pc, #36]	; (800f978 <HAL_GPIO_Init+0x16c>)
 800f952:	42b0      	cmp	r0, r6
 800f954:	d007      	beq.n	800f966 <HAL_GPIO_Init+0x15a>
 800f956:	4e09      	ldr	r6, [pc, #36]	; (800f97c <HAL_GPIO_Init+0x170>)
 800f958:	42b0      	cmp	r0, r6
 800f95a:	d100      	bne.n	800f95e <HAL_GPIO_Init+0x152>
 800f95c:	e75b      	b.n	800f816 <HAL_GPIO_Init+0xa>
 800f95e:	2605      	movs	r6, #5
 800f960:	e75c      	b.n	800f81c <HAL_GPIO_Init+0x10>
 800f962:	2601      	movs	r6, #1
 800f964:	e75a      	b.n	800f81c <HAL_GPIO_Init+0x10>
 800f966:	2602      	movs	r6, #2
 800f968:	e758      	b.n	800f81c <HAL_GPIO_Init+0x10>
}
 800f96a:	bc04      	pop	{r2}
 800f96c:	4690      	mov	r8, r2
 800f96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f970:	40021800 	.word	0x40021800
 800f974:	50000400 	.word	0x50000400
 800f978:	50000800 	.word	0x50000800
 800f97c:	50000c00 	.word	0x50000c00

0800f980 <biquad_q3_12_complex_direct_form_1.lto_priv.544>:
 800f980:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f982:	4645      	mov	r5, r8
 800f984:	4657      	mov	r7, sl
 800f986:	464e      	mov	r6, r9
 800f988:	46de      	mov	lr, fp
 800f98a:	b5e0      	push	{r5, r6, r7, lr}
 800f98c:	b08d      	sub	sp, #52	; 0x34
 800f98e:	ac16      	add	r4, sp, #88	; 0x58
 800f990:	4688      	mov	r8, r1
 800f992:	2100      	movs	r1, #0
 800f994:	5e65      	ldrsh	r5, [r4, r1]
 800f996:	2102      	movs	r1, #2
 800f998:	5e66      	ldrsh	r6, [r4, r1]
 800f99a:	2400      	movs	r4, #0
 800f99c:	5f01      	ldrsh	r1, [r0, r4]
 800f99e:	9102      	str	r1, [sp, #8]
 800f9a0:	2402      	movs	r4, #2
 800f9a2:	5f01      	ldrsh	r1, [r0, r4]
 800f9a4:	9103      	str	r1, [sp, #12]
 800f9a6:	2404      	movs	r4, #4
 800f9a8:	5f01      	ldrsh	r1, [r0, r4]
 800f9aa:	4c36      	ldr	r4, [pc, #216]	; (800fa84 <biquad_q3_12_complex_direct_form_1.lto_priv.544+0x104>)
 800f9ac:	9104      	str	r1, [sp, #16]
 800f9ae:	88c7      	ldrh	r7, [r0, #6]
 800f9b0:	1be4      	subs	r4, r4, r7
 800f9b2:	b221      	sxth	r1, r4
 800f9b4:	9105      	str	r1, [sp, #20]
 800f9b6:	2108      	movs	r1, #8
 800f9b8:	5e41      	ldrsh	r1, [r0, r1]
 800f9ba:	0334      	lsls	r4, r6, #12
 800f9bc:	9106      	str	r1, [sp, #24]
 800f9be:	0328      	lsls	r0, r5, #12
 800f9c0:	0097      	lsls	r7, r2, #2
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d001      	beq.n	800f9ca <biquad_q3_12_complex_direct_form_1.lto_priv.544+0x4a>
 800f9c6:	2704      	movs	r7, #4
 800f9c8:	427f      	negs	r7, r7
 800f9ca:	4259      	negs	r1, r3
 800f9cc:	4351      	muls	r1, r2
 800f9ce:	009a      	lsls	r2, r3, #2
 800f9d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f9d2:	008a      	lsls	r2, r1, #2
 800f9d4:	19d2      	adds	r2, r2, r7
 800f9d6:	4442      	add	r2, r8
 800f9d8:	468c      	mov	ip, r1
 800f9da:	46a8      	mov	r8, r5
 800f9dc:	0011      	movs	r1, r2
 800f9de:	46b2      	mov	sl, r6
 800f9e0:	46a9      	mov	r9, r5
 800f9e2:	9608      	str	r6, [sp, #32]
 800f9e4:	9507      	str	r5, [sp, #28]
 800f9e6:	9601      	str	r6, [sp, #4]
 800f9e8:	4662      	mov	r2, ip
 800f9ea:	2a00      	cmp	r2, #0
 800f9ec:	d106      	bne.n	800f9fc <biquad_q3_12_complex_direct_form_1.lto_priv.544+0x7c>
 800f9ee:	b00d      	add	sp, #52	; 0x34
 800f9f0:	bc3c      	pop	{r2, r3, r4, r5}
 800f9f2:	4690      	mov	r8, r2
 800f9f4:	4699      	mov	r9, r3
 800f9f6:	46a2      	mov	sl, r4
 800f9f8:	46ab      	mov	fp, r5
 800f9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fc:	2700      	movs	r7, #0
 800f9fe:	5fca      	ldrsh	r2, [r1, r7]
 800fa00:	449c      	add	ip, r3
 800fa02:	9209      	str	r2, [sp, #36]	; 0x24
 800fa04:	2702      	movs	r7, #2
 800fa06:	5fca      	ldrsh	r2, [r1, r7]
 800fa08:	464f      	mov	r7, r9
 800fa0a:	920a      	str	r2, [sp, #40]	; 0x28
 800fa0c:	9a03      	ldr	r2, [sp, #12]
 800fa0e:	437a      	muls	r2, r7
 800fa10:	4647      	mov	r7, r8
 800fa12:	4693      	mov	fp, r2
 800fa14:	9a05      	ldr	r2, [sp, #20]
 800fa16:	437a      	muls	r2, r7
 800fa18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa1a:	4493      	add	fp, r2
 800fa1c:	9a02      	ldr	r2, [sp, #8]
 800fa1e:	437a      	muls	r2, r7
 800fa20:	1810      	adds	r0, r2, r0
 800fa22:	9a04      	ldr	r2, [sp, #16]
 800fa24:	9f07      	ldr	r7, [sp, #28]
 800fa26:	4355      	muls	r5, r2
 800fa28:	9a06      	ldr	r2, [sp, #24]
 800fa2a:	4458      	add	r0, fp
 800fa2c:	4357      	muls	r7, r2
 800fa2e:	1bed      	subs	r5, r5, r7
 800fa30:	1940      	adds	r0, r0, r5
 800fa32:	4655      	mov	r5, sl
 800fa34:	9a03      	ldr	r2, [sp, #12]
 800fa36:	9f01      	ldr	r7, [sp, #4]
 800fa38:	436a      	muls	r2, r5
 800fa3a:	9d05      	ldr	r5, [sp, #20]
 800fa3c:	437d      	muls	r5, r7
 800fa3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800fa40:	1955      	adds	r5, r2, r5
 800fa42:	9a02      	ldr	r2, [sp, #8]
 800fa44:	437a      	muls	r2, r7
 800fa46:	1914      	adds	r4, r2, r4
 800fa48:	9a04      	ldr	r2, [sp, #16]
 800fa4a:	192c      	adds	r4, r5, r4
 800fa4c:	4356      	muls	r6, r2
 800fa4e:	9d06      	ldr	r5, [sp, #24]
 800fa50:	9a08      	ldr	r2, [sp, #32]
 800fa52:	436a      	muls	r2, r5
 800fa54:	1ab6      	subs	r6, r6, r2
 800fa56:	19a4      	adds	r4, r4, r6
 800fa58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fa5a:	1302      	asrs	r2, r0, #12
 800fa5c:	46b3      	mov	fp, r6
 800fa5e:	9e01      	ldr	r6, [sp, #4]
 800fa60:	b212      	sxth	r2, r2
 800fa62:	9608      	str	r6, [sp, #32]
 800fa64:	4646      	mov	r6, r8
 800fa66:	800a      	strh	r2, [r1, #0]
 800fa68:	1325      	asrs	r5, r4, #12
 800fa6a:	4690      	mov	r8, r2
 800fa6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa6e:	b22d      	sxth	r5, r5
 800fa70:	804d      	strh	r5, [r1, #2]
 800fa72:	9607      	str	r6, [sp, #28]
 800fa74:	9501      	str	r5, [sp, #4]
 800fa76:	4656      	mov	r6, sl
 800fa78:	464d      	mov	r5, r9
 800fa7a:	4459      	add	r1, fp
 800fa7c:	46ba      	mov	sl, r7
 800fa7e:	4691      	mov	r9, r2
 800fa80:	e7b2      	b.n	800f9e8 <biquad_q3_12_complex_direct_form_1.lto_priv.544+0x68>
 800fa82:	46c0      	nop			; (mov r8, r8)
 800fa84:	fffff000 	.word	0xfffff000

0800fa88 <acc_confprogram_copy>:
 800fa88:	2300      	movs	r3, #0
 800fa8a:	b530      	push	{r4, r5, lr}
 800fa8c:	0092      	lsls	r2, r2, #2
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d100      	bne.n	800fa94 <acc_confprogram_copy+0xc>
 800fa92:	bd30      	pop	{r4, r5, pc}
 800fa94:	58c4      	ldr	r4, [r0, r3]
 800fa96:	0c25      	lsrs	r5, r4, #16
 800fa98:	52cd      	strh	r5, [r1, r3]
 800fa9a:	18cd      	adds	r5, r1, r3
 800fa9c:	806c      	strh	r4, [r5, #2]
 800fa9e:	3304      	adds	r3, #4
 800faa0:	e7f5      	b.n	800fa8e <acc_confprogram_copy+0x6>

0800faa2 <acc_confprogram_modify_runif>:
 800faa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa4:	0055      	lsls	r5, r2, #1
 800faa6:	b085      	sub	sp, #20
 800faa8:	1945      	adds	r5, r0, r5
 800faaa:	000e      	movs	r6, r1
 800faac:	0028      	movs	r0, r5
 800faae:	a903      	add	r1, sp, #12
 800fab0:	0014      	movs	r4, r2
 800fab2:	001f      	movs	r7, r3
 800fab4:	f7fb fc2e 	bl	800b314 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800fab8:	230f      	movs	r3, #15
 800faba:	9a03      	ldr	r2, [sp, #12]
 800fabc:	439a      	bics	r2, r3
 800fabe:	9202      	str	r2, [sp, #8]
 800fac0:	0013      	movs	r3, r2
 800fac2:	4a11      	ldr	r2, [pc, #68]	; (800fb08 <acc_confprogram_modify_runif+0x66>)
 800fac4:	0011      	movs	r1, r2
 800fac6:	3130      	adds	r1, #48	; 0x30
 800fac8:	7809      	ldrb	r1, [r1, #0]
 800faca:	2f00      	cmp	r7, #0
 800facc:	d011      	beq.n	800faf2 <acc_confprogram_modify_runif+0x50>
 800face:	4333      	orrs	r3, r6
 800fad0:	9302      	str	r3, [sp, #8]
 800fad2:	2903      	cmp	r1, #3
 800fad4:	d906      	bls.n	800fae4 <acc_confprogram_modify_runif+0x42>
 800fad6:	9600      	str	r6, [sp, #0]
 800fad8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800fada:	0863      	lsrs	r3, r4, #1
 800fadc:	4a0b      	ldr	r2, [pc, #44]	; (800fb0c <acc_confprogram_modify_runif+0x6a>)
 800fade:	490c      	ldr	r1, [pc, #48]	; (800fb10 <acc_confprogram_modify_runif+0x6e>)
 800fae0:	2004      	movs	r0, #4
 800fae2:	47b0      	blx	r6
 800fae4:	2201      	movs	r2, #1
 800fae6:	0029      	movs	r1, r5
 800fae8:	a802      	add	r0, sp, #8
 800faea:	f7ff ffcd 	bl	800fa88 <acc_confprogram_copy>
 800faee:	b005      	add	sp, #20
 800faf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faf2:	2903      	cmp	r1, #3
 800faf4:	d9f6      	bls.n	800fae4 <acc_confprogram_modify_runif+0x42>
 800faf6:	9600      	str	r6, [sp, #0]
 800faf8:	0863      	lsrs	r3, r4, #1
 800fafa:	4905      	ldr	r1, [pc, #20]	; (800fb10 <acc_confprogram_modify_runif+0x6e>)
 800fafc:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fafe:	2004      	movs	r0, #4
 800fb00:	4a04      	ldr	r2, [pc, #16]	; (800fb14 <acc_confprogram_modify_runif+0x72>)
 800fb02:	47a0      	blx	r4
 800fb04:	e7ee      	b.n	800fae4 <acc_confprogram_modify_runif+0x42>
 800fb06:	46c0      	nop			; (mov r8, r8)
 800fb08:	200005d8 	.word	0x200005d8
 800fb0c:	0801ebd6 	.word	0x0801ebd6
 800fb10:	0801df99 	.word	0x0801df99
 800fb14:	0801ed5c 	.word	0x0801ed5c

0800fb18 <acc_confprogram_patch_offset>:
 800fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb1a:	464e      	mov	r6, r9
 800fb1c:	4645      	mov	r5, r8
 800fb1e:	4657      	mov	r7, sl
 800fb20:	46de      	mov	lr, fp
 800fb22:	b5e0      	push	{r5, r6, r7, lr}
 800fb24:	b089      	sub	sp, #36	; 0x24
 800fb26:	4698      	mov	r8, r3
 800fb28:	ab12      	add	r3, sp, #72	; 0x48
 800fb2a:	881c      	ldrh	r4, [r3, #0]
 800fb2c:	4b48      	ldr	r3, [pc, #288]	; (800fc50 <acc_confprogram_patch_offset+0x138>)
 800fb2e:	9204      	str	r2, [sp, #16]
 800fb30:	4699      	mov	r9, r3
 800fb32:	3330      	adds	r3, #48	; 0x30
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	4682      	mov	sl, r0
 800fb38:	000e      	movs	r6, r1
 800fb3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d907      	bls.n	800fb50 <acc_confprogram_patch_offset+0x38>
 800fb40:	464f      	mov	r7, r9
 800fb42:	9500      	str	r5, [sp, #0]
 800fb44:	0023      	movs	r3, r4
 800fb46:	4a43      	ldr	r2, [pc, #268]	; (800fc54 <acc_confprogram_patch_offset+0x13c>)
 800fb48:	4943      	ldr	r1, [pc, #268]	; (800fc58 <acc_confprogram_patch_offset+0x140>)
 800fb4a:	2004      	movs	r0, #4
 800fb4c:	6b7f      	ldr	r7, [r7, #52]	; 0x34
 800fb4e:	47b8      	blx	r7
 800fb50:	002b      	movs	r3, r5
 800fb52:	1e5a      	subs	r2, r3, #1
 800fb54:	4193      	sbcs	r3, r2
 800fb56:	2700      	movs	r7, #0
 800fb58:	00e4      	lsls	r4, r4, #3
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	44a0      	add	r8, r4
 800fb5e:	9305      	str	r3, [sp, #20]
 800fb60:	4643      	mov	r3, r8
 800fb62:	885b      	ldrh	r3, [r3, #2]
 800fb64:	42bb      	cmp	r3, r7
 800fb66:	d806      	bhi.n	800fb76 <acc_confprogram_patch_offset+0x5e>
 800fb68:	b009      	add	sp, #36	; 0x24
 800fb6a:	bc3c      	pop	{r2, r3, r4, r5}
 800fb6c:	4690      	mov	r8, r2
 800fb6e:	4699      	mov	r9, r3
 800fb70:	46a2      	mov	sl, r4
 800fb72:	46ab      	mov	fp, r5
 800fb74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb76:	4643      	mov	r3, r8
 800fb78:	2106      	movs	r1, #6
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	4379      	muls	r1, r7
 800fb7e:	469c      	mov	ip, r3
 800fb80:	4461      	add	r1, ip
 800fb82:	7808      	ldrb	r0, [r1, #0]
 800fb84:	2800      	cmp	r0, #0
 800fb86:	d003      	beq.n	800fb90 <acc_confprogram_patch_offset+0x78>
 800fb88:	2802      	cmp	r0, #2
 800fb8a:	d81d      	bhi.n	800fbc8 <acc_confprogram_patch_offset+0xb0>
 800fb8c:	888a      	ldrh	r2, [r1, #4]
 800fb8e:	e000      	b.n	800fb92 <acc_confprogram_patch_offset+0x7a>
 800fb90:	884a      	ldrh	r2, [r1, #2]
 800fb92:	4b32      	ldr	r3, [pc, #200]	; (800fc5c <acc_confprogram_patch_offset+0x144>)
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d01d      	beq.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fb98:	0052      	lsls	r2, r2, #1
 800fb9a:	b292      	uxth	r2, r2
 800fb9c:	42b2      	cmp	r2, r6
 800fb9e:	d319      	bcc.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fba0:	9b04      	ldr	r3, [sp, #16]
 800fba2:	18f3      	adds	r3, r6, r3
 800fba4:	429a      	cmp	r2, r3
 800fba6:	da15      	bge.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fba8:	2801      	cmp	r0, #1
 800fbaa:	d049      	beq.n	800fc40 <acc_confprogram_patch_offset+0x128>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d013      	beq.n	800fbd8 <acc_confprogram_patch_offset+0xc0>
 800fbb0:	2802      	cmp	r0, #2
 800fbb2:	d10f      	bne.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fbb4:	426b      	negs	r3, r5
 800fbb6:	416b      	adcs	r3, r5
 800fbb8:	1b92      	subs	r2, r2, r6
 800fbba:	b2db      	uxtb	r3, r3
 800fbbc:	b292      	uxth	r2, r2
 800fbbe:	8849      	ldrh	r1, [r1, #2]
 800fbc0:	4650      	mov	r0, sl
 800fbc2:	f7ff ff6e 	bl	800faa2 <acc_confprogram_modify_runif>
 800fbc6:	e005      	b.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fbc8:	464b      	mov	r3, r9
 800fbca:	4a25      	ldr	r2, [pc, #148]	; (800fc60 <acc_confprogram_patch_offset+0x148>)
 800fbcc:	4922      	ldr	r1, [pc, #136]	; (800fc58 <acc_confprogram_patch_offset+0x140>)
 800fbce:	2000      	movs	r0, #0
 800fbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbd2:	4798      	blx	r3
 800fbd4:	3701      	adds	r7, #1
 800fbd6:	e7c3      	b.n	800fb60 <acc_confprogram_patch_offset+0x48>
 800fbd8:	1b92      	subs	r2, r2, r6
 800fbda:	b293      	uxth	r3, r2
 800fbdc:	790a      	ldrb	r2, [r1, #4]
 800fbde:	9203      	str	r2, [sp, #12]
 800fbe0:	794a      	ldrb	r2, [r1, #5]
 800fbe2:	4693      	mov	fp, r2
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	4659      	mov	r1, fp
 800fbe8:	408a      	lsls	r2, r1
 800fbea:	4295      	cmp	r5, r2
 800fbec:	d30b      	bcc.n	800fc06 <acc_confprogram_patch_offset+0xee>
 800fbee:	3a01      	subs	r2, #1
 800fbf0:	9201      	str	r2, [sp, #4]
 800fbf2:	464a      	mov	r2, r9
 800fbf4:	9500      	str	r5, [sp, #0]
 800fbf6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fbf8:	4917      	ldr	r1, [pc, #92]	; (800fc58 <acc_confprogram_patch_offset+0x140>)
 800fbfa:	4a1a      	ldr	r2, [pc, #104]	; (800fc64 <acc_confprogram_patch_offset+0x14c>)
 800fbfc:	47a0      	blx	r4
 800fbfe:	2139      	movs	r1, #57	; 0x39
 800fc00:	4819      	ldr	r0, [pc, #100]	; (800fc68 <acc_confprogram_patch_offset+0x150>)
 800fc02:	f7f3 ffc9 	bl	8003b98 <acc_assert_fail>
 800fc06:	005b      	lsls	r3, r3, #1
 800fc08:	4453      	add	r3, sl
 800fc0a:	a906      	add	r1, sp, #24
 800fc0c:	0018      	movs	r0, r3
 800fc0e:	001c      	movs	r4, r3
 800fc10:	f7fb fb80 	bl	800b314 <acc_utils_transfer_buffer_to_uint32.constprop.23>
 800fc14:	465b      	mov	r3, fp
 800fc16:	2220      	movs	r2, #32
 800fc18:	1ad2      	subs	r2, r2, r3
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	425b      	negs	r3, r3
 800fc1e:	40d3      	lsrs	r3, r2
 800fc20:	9a03      	ldr	r2, [sp, #12]
 800fc22:	9903      	ldr	r1, [sp, #12]
 800fc24:	4093      	lsls	r3, r2
 800fc26:	9a06      	ldr	r2, [sp, #24]
 800fc28:	a807      	add	r0, sp, #28
 800fc2a:	439a      	bics	r2, r3
 800fc2c:	0013      	movs	r3, r2
 800fc2e:	002a      	movs	r2, r5
 800fc30:	408a      	lsls	r2, r1
 800fc32:	0021      	movs	r1, r4
 800fc34:	4313      	orrs	r3, r2
 800fc36:	2201      	movs	r2, #1
 800fc38:	9307      	str	r3, [sp, #28]
 800fc3a:	f7ff ff25 	bl	800fa88 <acc_confprogram_copy>
 800fc3e:	e7c9      	b.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fc40:	1b92      	subs	r2, r2, r6
 800fc42:	b292      	uxth	r2, r2
 800fc44:	8849      	ldrh	r1, [r1, #2]
 800fc46:	9b05      	ldr	r3, [sp, #20]
 800fc48:	4650      	mov	r0, sl
 800fc4a:	f7ff ff2a 	bl	800faa2 <acc_confprogram_modify_runif>
 800fc4e:	e7c1      	b.n	800fbd4 <acc_confprogram_patch_offset+0xbc>
 800fc50:	200005d8 	.word	0x200005d8
 800fc54:	0801eca3 	.word	0x0801eca3
 800fc58:	0801df99 	.word	0x0801df99
 800fc5c:	0000ffff 	.word	0x0000ffff
 800fc60:	0801ed8e 	.word	0x0801ed8e
 800fc64:	0801edbb 	.word	0x0801edbb
 800fc68:	0801ecf9 	.word	0x0801ecf9

0800fc6c <acc_diagnostic_log_data_u16>:
 800fc6c:	4770      	bx	lr

0800fc6e <acc_diagnostic_log_scalar>:
 800fc6e:	4770      	bx	lr

0800fc70 <acc_diagnostic_log_array>:
 800fc70:	4770      	bx	lr

0800fc72 <acc_diagnostic_log_set_parameter>:
 800fc72:	4770      	bx	lr

0800fc74 <acc_diagnostic_log_declare_parameter>:
 800fc74:	4770      	bx	lr

0800fc76 <acc_diagnostic_log_set_scope>:
 800fc76:	4770      	bx	lr

0800fc78 <accumulator_mod.lto_priv.543>:
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	1c04      	adds	r4, r0, #0
 800fc7c:	f001 fe2e 	bl	80118dc <__aeabi_f2iz>
 800fc80:	f001 fe4c 	bl	801191c <__aeabi_i2f>
 800fc84:	1c01      	adds	r1, r0, #0
 800fc86:	1c20      	adds	r0, r4, #0
 800fc88:	f001 f864 	bl	8010d54 <__aeabi_fsub>
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	1c04      	adds	r4, r0, #0
 800fc90:	f001 fc44 	bl	801151c <__aeabi_fcmpge>
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d10b      	bne.n	800fcb0 <accumulator_mod.lto_priv.543+0x38>
 800fc98:	20fe      	movs	r0, #254	; 0xfe
 800fc9a:	0580      	lsls	r0, r0, #22
 800fc9c:	1c21      	adds	r1, r4, #0
 800fc9e:	f000 fc7b 	bl	8010598 <__aeabi_fadd>
 800fca2:	219f      	movs	r1, #159	; 0x9f
 800fca4:	05c9      	lsls	r1, r1, #23
 800fca6:	f000 ff23 	bl	8010af0 <__aeabi_fmul>
 800fcaa:	f001 fc61 	bl	8011570 <__aeabi_f2uiz>
 800fcae:	bd10      	pop	{r4, pc}
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	e7f3      	b.n	800fc9c <accumulator_mod.lto_priv.543+0x24>

0800fcb4 <acc_alg_basic_saturation_check_u16>:
 800fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb6:	0005      	movs	r5, r0
 800fcb8:	000c      	movs	r4, r1
 800fcba:	1c10      	adds	r0, r2, #0
 800fcbc:	4912      	ldr	r1, [pc, #72]	; (800fd08 <acc_alg_basic_saturation_check_u16+0x54>)
 800fcbe:	1c17      	adds	r7, r2, #0
 800fcc0:	f000 fe04 	bl	80108cc <__aeabi_fdiv>
 800fcc4:	4911      	ldr	r1, [pc, #68]	; (800fd0c <acc_alg_basic_saturation_check_u16+0x58>)
 800fcc6:	f000 ff13 	bl	8010af0 <__aeabi_fmul>
 800fcca:	f001 fc51 	bl	8011570 <__aeabi_f2uiz>
 800fcce:	1c39      	adds	r1, r7, #0
 800fcd0:	b286      	uxth	r6, r0
 800fcd2:	480d      	ldr	r0, [pc, #52]	; (800fd08 <acc_alg_basic_saturation_check_u16+0x54>)
 800fcd4:	f001 f83e 	bl	8010d54 <__aeabi_fsub>
 800fcd8:	490b      	ldr	r1, [pc, #44]	; (800fd08 <acc_alg_basic_saturation_check_u16+0x54>)
 800fcda:	f000 fdf7 	bl	80108cc <__aeabi_fdiv>
 800fcde:	490b      	ldr	r1, [pc, #44]	; (800fd0c <acc_alg_basic_saturation_check_u16+0x58>)
 800fce0:	f000 ff06 	bl	8010af0 <__aeabi_fmul>
 800fce4:	f001 fc44 	bl	8011570 <__aeabi_f2uiz>
 800fce8:	0864      	lsrs	r4, r4, #1
 800fcea:	0064      	lsls	r4, r4, #1
 800fcec:	b280      	uxth	r0, r0
 800fcee:	192c      	adds	r4, r5, r4
 800fcf0:	42a5      	cmp	r5, r4
 800fcf2:	d101      	bne.n	800fcf8 <acc_alg_basic_saturation_check_u16+0x44>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcf8:	882a      	ldrh	r2, [r5, #0]
 800fcfa:	4282      	cmp	r2, r0
 800fcfc:	d202      	bcs.n	800fd04 <acc_alg_basic_saturation_check_u16+0x50>
 800fcfe:	3502      	adds	r5, #2
 800fd00:	42b2      	cmp	r2, r6
 800fd02:	d8f5      	bhi.n	800fcf0 <acc_alg_basic_saturation_check_u16+0x3c>
 800fd04:	2001      	movs	r0, #1
 800fd06:	e7f6      	b.n	800fcf6 <acc_alg_basic_saturation_check_u16+0x42>
 800fd08:	42c80000 	.word	0x42c80000
 800fd0c:	477fff00 	.word	0x477fff00

0800fd10 <eval_even_poly_f32.lto_priv.546>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	0005      	movs	r5, r0
 800fd14:	000c      	movs	r4, r1
 800fd16:	1c10      	adds	r0, r2, #0
 800fd18:	1c11      	adds	r1, r2, #0
 800fd1a:	f000 fee9 	bl	8010af0 <__aeabi_fmul>
 800fd1e:	1c06      	adds	r6, r0, #0
 800fd20:	2000      	movs	r0, #0
 800fd22:	3c01      	subs	r4, #1
 800fd24:	b2a4      	uxth	r4, r4
 800fd26:	00a4      	lsls	r4, r4, #2
 800fd28:	192c      	adds	r4, r5, r4
 800fd2a:	6821      	ldr	r1, [r4, #0]
 800fd2c:	f000 fc34 	bl	8010598 <__aeabi_fadd>
 800fd30:	42a5      	cmp	r5, r4
 800fd32:	d005      	beq.n	800fd40 <eval_even_poly_f32.lto_priv.546+0x30>
 800fd34:	1c01      	adds	r1, r0, #0
 800fd36:	1c30      	adds	r0, r6, #0
 800fd38:	f000 feda 	bl	8010af0 <__aeabi_fmul>
 800fd3c:	3c04      	subs	r4, #4
 800fd3e:	e7f4      	b.n	800fd2a <eval_even_poly_f32.lto_priv.546+0x1a>
 800fd40:	bd70      	pop	{r4, r5, r6, pc}

0800fd42 <quarter_pi_cos_sin_f32.lto_priv.545>:
 800fd42:	b570      	push	{r4, r5, r6, lr}
 800fd44:	000d      	movs	r5, r1
 800fd46:	490d      	ldr	r1, [pc, #52]	; (800fd7c <quarter_pi_cos_sin_f32.lto_priv.545+0x3a>)
 800fd48:	1c04      	adds	r4, r0, #0
 800fd4a:	f001 fbc9 	bl	80114e0 <__aeabi_fcmplt>
 800fd4e:	2800      	cmp	r0, #0
 800fd50:	d112      	bne.n	800fd78 <quarter_pi_cos_sin_f32.lto_priv.545+0x36>
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	d006      	beq.n	800fd64 <quarter_pi_cos_sin_f32.lto_priv.545+0x22>
 800fd56:	480a      	ldr	r0, [pc, #40]	; (800fd80 <quarter_pi_cos_sin_f32.lto_priv.545+0x3e>)
 800fd58:	1c22      	adds	r2, r4, #0
 800fd5a:	2105      	movs	r1, #5
 800fd5c:	3070      	adds	r0, #112	; 0x70
 800fd5e:	f7ff ffd7 	bl	800fd10 <eval_even_poly_f32.lto_priv.546>
 800fd62:	bd70      	pop	{r4, r5, r6, pc}
 800fd64:	2104      	movs	r1, #4
 800fd66:	4807      	ldr	r0, [pc, #28]	; (800fd84 <quarter_pi_cos_sin_f32.lto_priv.545+0x42>)
 800fd68:	1c22      	adds	r2, r4, #0
 800fd6a:	1840      	adds	r0, r0, r1
 800fd6c:	f7ff ffd0 	bl	800fd10 <eval_even_poly_f32.lto_priv.546>
 800fd70:	1c21      	adds	r1, r4, #0
 800fd72:	f000 febd 	bl	8010af0 <__aeabi_fmul>
 800fd76:	e7f4      	b.n	800fd62 <quarter_pi_cos_sin_f32.lto_priv.545+0x20>
 800fd78:	4803      	ldr	r0, [pc, #12]	; (800fd88 <quarter_pi_cos_sin_f32.lto_priv.545+0x46>)
 800fd7a:	e7f2      	b.n	800fd62 <quarter_pi_cos_sin_f32.lto_priv.545+0x20>
 800fd7c:	bf490fdb 	.word	0xbf490fdb
 800fd80:	0801c5c0 	.word	0x0801c5c0
 800fd84:	0801c640 	.word	0x0801c640
 800fd88:	7fc00000 	.word	0x7fc00000

0800fd8c <acc_alg_basic_math_q3_12_sin>:
 800fd8c:	0002      	movs	r2, r0
 800fd8e:	0003      	movs	r3, r0
 800fd90:	0041      	lsls	r1, r0, #1
 800fd92:	d500      	bpl.n	800fd96 <acc_alg_basic_math_q3_12_sin+0xa>
 800fd94:	43c3      	mvns	r3, r0
 800fd96:	2180      	movs	r1, #128	; 0x80
 800fd98:	0389      	lsls	r1, r1, #14
 800fd9a:	468c      	mov	ip, r1
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	089b      	lsrs	r3, r3, #2
 800fda0:	4463      	add	r3, ip
 800fda2:	0d9b      	lsrs	r3, r3, #22
 800fda4:	4903      	ldr	r1, [pc, #12]	; (800fdb4 <acc_alg_basic_math_q3_12_sin+0x28>)
 800fda6:	005b      	lsls	r3, r3, #1
 800fda8:	5e58      	ldrsh	r0, [r3, r1]
 800fdaa:	2a00      	cmp	r2, #0
 800fdac:	da01      	bge.n	800fdb2 <acc_alg_basic_math_q3_12_sin+0x26>
 800fdae:	4240      	negs	r0, r0
 800fdb0:	b200      	sxth	r0, r0
 800fdb2:	4770      	bx	lr
 800fdb4:	0801c69c 	.word	0x0801c69c

0800fdb8 <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800fdb8:	b203      	sxth	r3, r0
 800fdba:	17da      	asrs	r2, r3, #31
 800fdbc:	189b      	adds	r3, r3, r2
 800fdbe:	1400      	asrs	r0, r0, #16
 800fdc0:	4053      	eors	r3, r2
 800fdc2:	17c2      	asrs	r2, r0, #31
 800fdc4:	1880      	adds	r0, r0, r2
 800fdc6:	4050      	eors	r0, r2
 800fdc8:	b21b      	sxth	r3, r3
 800fdca:	b202      	sxth	r2, r0
 800fdcc:	b082      	sub	sp, #8
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	db02      	blt.n	800fdd8 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800fdd2:	0011      	movs	r1, r2
 800fdd4:	001a      	movs	r2, r3
 800fdd6:	000b      	movs	r3, r1
 800fdd8:	480c      	ldr	r0, [pc, #48]	; (800fe0c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800fdda:	4350      	muls	r0, r2
 800fddc:	17c1      	asrs	r1, r0, #31
 800fdde:	0509      	lsls	r1, r1, #20
 800fde0:	0d09      	lsrs	r1, r1, #20
 800fde2:	1809      	adds	r1, r1, r0
 800fde4:	1309      	asrs	r1, r1, #12
 800fde6:	b209      	sxth	r1, r1
 800fde8:	428b      	cmp	r3, r1
 800fdea:	da08      	bge.n	800fdfe <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800fdec:	4808      	ldr	r0, [pc, #32]	; (800fe10 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800fdee:	4350      	muls	r0, r2
 800fdf0:	4a08      	ldr	r2, [pc, #32]	; (800fe14 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800fdf2:	4353      	muls	r3, r2
 800fdf4:	18c0      	adds	r0, r0, r3
 800fdf6:	1300      	asrs	r0, r0, #12
 800fdf8:	b200      	sxth	r0, r0
 800fdfa:	b002      	add	sp, #8
 800fdfc:	4770      	bx	lr
 800fdfe:	4806      	ldr	r0, [pc, #24]	; (800fe18 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800fe00:	4350      	muls	r0, r2
 800fe02:	4a06      	ldr	r2, [pc, #24]	; (800fe1c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800fe04:	4353      	muls	r3, r2
 800fe06:	18c0      	adds	r0, r0, r3
 800fe08:	e7f5      	b.n	800fdf6 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800fe0a:	46c0      	nop			; (mov r8, r8)
 800fe0c:	000006a1 	.word	0x000006a1
 800fe10:	00000fd7 	.word	0x00000fd7
 800fe14:	00000327 	.word	0x00000327
 800fe18:	00000d71 	.word	0x00000d71
 800fe1c:	000008fa 	.word	0x000008fa

0800fe20 <internal_reg_read.lto_priv.542>:
 800fe20:	23c0      	movs	r3, #192	; 0xc0
 800fe22:	b513      	push	{r0, r1, r4, lr}
 800fe24:	019b      	lsls	r3, r3, #6
 800fe26:	4319      	orrs	r1, r3
 800fe28:	466b      	mov	r3, sp
 800fe2a:	0014      	movs	r4, r2
 800fe2c:	8019      	strh	r1, [r3, #0]
 800fe2e:	466a      	mov	r2, sp
 800fe30:	2300      	movs	r3, #0
 800fe32:	4669      	mov	r1, sp
 800fe34:	8053      	strh	r3, [r2, #2]
 800fe36:	8093      	strh	r3, [r2, #4]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	2203      	movs	r2, #3
 800fe3c:	f7f5 fa24 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 800fe40:	466b      	mov	r3, sp
 800fe42:	889b      	ldrh	r3, [r3, #4]
 800fe44:	8023      	strh	r3, [r4, #0]
 800fe46:	bd13      	pop	{r0, r1, r4, pc}

0800fe48 <read_reg_array>:
 800fe48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe4a:	0007      	movs	r7, r0
 800fe4c:	000d      	movs	r5, r1
 800fe4e:	001e      	movs	r6, r3
 800fe50:	3a01      	subs	r2, #1
 800fe52:	b294      	uxth	r4, r2
 800fe54:	0064      	lsls	r4, r4, #1
 800fe56:	1c8a      	adds	r2, r1, #2
 800fe58:	18a4      	adds	r4, r4, r2
 800fe5a:	8829      	ldrh	r1, [r5, #0]
 800fe5c:	0032      	movs	r2, r6
 800fe5e:	0038      	movs	r0, r7
 800fe60:	3502      	adds	r5, #2
 800fe62:	f7ff ffdd 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800fe66:	3602      	adds	r6, #2
 800fe68:	42a5      	cmp	r5, r4
 800fe6a:	d1f6      	bne.n	800fe5a <read_reg_array+0x12>
 800fe6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fe6e <acc_sensor_diagnostics_r2_sensor_status>:
 800fe6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe70:	4657      	mov	r7, sl
 800fe72:	464e      	mov	r6, r9
 800fe74:	46de      	mov	lr, fp
 800fe76:	4645      	mov	r5, r8
 800fe78:	b5e0      	push	{r5, r6, r7, lr}
 800fe7a:	4f1c      	ldr	r7, [pc, #112]	; (800feec <acc_sensor_diagnostics_r2_sensor_status+0x7e>)
 800fe7c:	b097      	sub	sp, #92	; 0x5c
 800fe7e:	003b      	movs	r3, r7
 800fe80:	3330      	adds	r3, #48	; 0x30
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	4681      	mov	r9, r0
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d904      	bls.n	800fe94 <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800fe8a:	4a19      	ldr	r2, [pc, #100]	; (800fef0 <acc_sensor_diagnostics_r2_sensor_status+0x82>)
 800fe8c:	4919      	ldr	r1, [pc, #100]	; (800fef4 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800fe8e:	2002      	movs	r0, #2
 800fe90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe92:	4798      	blx	r3
 800fe94:	2201      	movs	r2, #1
 800fe96:	21b2      	movs	r1, #178	; 0xb2
 800fe98:	4648      	mov	r0, r9
 800fe9a:	f7fd f893 	bl	800cfc4 <acc_sensor_reg_write>
 800fe9e:	2300      	movs	r3, #0
 800fea0:	ac0e      	add	r4, sp, #56	; 0x38
 800fea2:	8023      	strh	r3, [r4, #0]
 800fea4:	3311      	adds	r3, #17
 800fea6:	4698      	mov	r8, r3
 800fea8:	2380      	movs	r3, #128	; 0x80
 800feaa:	00db      	lsls	r3, r3, #3
 800feac:	469b      	mov	fp, r3
 800feae:	2330      	movs	r3, #48	; 0x30
 800feb0:	469a      	mov	sl, r3
 800feb2:	2564      	movs	r5, #100	; 0x64
 800feb4:	44ba      	add	sl, r7
 800feb6:	0022      	movs	r2, r4
 800feb8:	4641      	mov	r1, r8
 800feba:	4648      	mov	r0, r9
 800febc:	f7ff ffb0 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800fec0:	465a      	mov	r2, fp
 800fec2:	8823      	ldrh	r3, [r4, #0]
 800fec4:	4213      	tst	r3, r2
 800fec6:	d019      	beq.n	800fefc <acc_sensor_diagnostics_r2_sensor_status+0x8e>
 800fec8:	4652      	mov	r2, sl
 800feca:	7812      	ldrb	r2, [r2, #0]
 800fecc:	2a01      	cmp	r2, #1
 800fece:	d908      	bls.n	800fee2 <acc_sensor_diagnostics_r2_sensor_status+0x74>
 800fed0:	059b      	lsls	r3, r3, #22
 800fed2:	0d9b      	lsrs	r3, r3, #22
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	4a08      	ldr	r2, [pc, #32]	; (800fef8 <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800fed8:	464b      	mov	r3, r9
 800feda:	4906      	ldr	r1, [pc, #24]	; (800fef4 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800fedc:	2002      	movs	r0, #2
 800fede:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fee0:	47b0      	blx	r6
 800fee2:	3d01      	subs	r5, #1
 800fee4:	b2ad      	uxth	r5, r5
 800fee6:	2d00      	cmp	r5, #0
 800fee8:	d1e5      	bne.n	800feb6 <acc_sensor_diagnostics_r2_sensor_status+0x48>
 800feea:	e015      	b.n	800ff18 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800feec:	200005d8 	.word	0x200005d8
 800fef0:	0801edf2 	.word	0x0801edf2
 800fef4:	0801ee32 	.word	0x0801ee32
 800fef8:	0801ee45 	.word	0x0801ee45
 800fefc:	003a      	movs	r2, r7
 800fefe:	3230      	adds	r2, #48	; 0x30
 800ff00:	7812      	ldrb	r2, [r2, #0]
 800ff02:	2a01      	cmp	r2, #1
 800ff04:	d908      	bls.n	800ff18 <acc_sensor_diagnostics_r2_sensor_status+0xaa>
 800ff06:	059b      	lsls	r3, r3, #22
 800ff08:	0d9b      	lsrs	r3, r3, #22
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	4ac9      	ldr	r2, [pc, #804]	; (8010234 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>)
 800ff0e:	464b      	mov	r3, r9
 800ff10:	49c9      	ldr	r1, [pc, #804]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ff12:	2002      	movs	r0, #2
 800ff14:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800ff16:	47a8      	blx	r5
 800ff18:	2500      	movs	r5, #0
 800ff1a:	ab02      	add	r3, sp, #8
 800ff1c:	0029      	movs	r1, r5
 800ff1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ff20:	4648      	mov	r0, r9
 800ff22:	849d      	strh	r5, [r3, #36]	; 0x24
 800ff24:	f7ff ff7c 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800ff28:	ab02      	add	r3, sp, #8
 800ff2a:	aa02      	add	r2, sp, #8
 800ff2c:	4694      	mov	ip, r2
 800ff2e:	84dd      	strh	r5, [r3, #38]	; 0x26
 800ff30:	2326      	movs	r3, #38	; 0x26
 800ff32:	4463      	add	r3, ip
 800ff34:	001a      	movs	r2, r3
 800ff36:	212a      	movs	r1, #42	; 0x2a
 800ff38:	4648      	mov	r0, r9
 800ff3a:	f7ff ff71 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800ff3e:	ab02      	add	r3, sp, #8
 800ff40:	aa0c      	add	r2, sp, #48	; 0x30
 800ff42:	2128      	movs	r1, #40	; 0x28
 800ff44:	4648      	mov	r0, r9
 800ff46:	851d      	strh	r5, [r3, #40]	; 0x28
 800ff48:	f7ff ff6a 	bl	800fe20 <internal_reg_read.lto_priv.542>
 800ff4c:	4dbb      	ldr	r5, [pc, #748]	; (801023c <acc_sensor_diagnostics_r2_sensor_status+0x3ce>)
 800ff4e:	0023      	movs	r3, r4
 800ff50:	0029      	movs	r1, r5
 800ff52:	2210      	movs	r2, #16
 800ff54:	3114      	adds	r1, #20
 800ff56:	4648      	mov	r0, r9
 800ff58:	f7ff ff76 	bl	800fe48 <read_reg_array>
 800ff5c:	003b      	movs	r3, r7
 800ff5e:	3330      	adds	r3, #48	; 0x30
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d915      	bls.n	800ff92 <acc_sensor_diagnostics_r2_sensor_status+0x124>
 800ff66:	89e3      	ldrh	r3, [r4, #14]
 800ff68:	4ab5      	ldr	r2, [pc, #724]	; (8010240 <acc_sensor_diagnostics_r2_sensor_status+0x3d2>)
 800ff6a:	9307      	str	r3, [sp, #28]
 800ff6c:	89a3      	ldrh	r3, [r4, #12]
 800ff6e:	49b2      	ldr	r1, [pc, #712]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ff70:	9306      	str	r3, [sp, #24]
 800ff72:	8963      	ldrh	r3, [r4, #10]
 800ff74:	2002      	movs	r0, #2
 800ff76:	9305      	str	r3, [sp, #20]
 800ff78:	8923      	ldrh	r3, [r4, #8]
 800ff7a:	9304      	str	r3, [sp, #16]
 800ff7c:	88e3      	ldrh	r3, [r4, #6]
 800ff7e:	9303      	str	r3, [sp, #12]
 800ff80:	88a3      	ldrh	r3, [r4, #4]
 800ff82:	9302      	str	r3, [sp, #8]
 800ff84:	8863      	ldrh	r3, [r4, #2]
 800ff86:	9301      	str	r3, [sp, #4]
 800ff88:	8823      	ldrh	r3, [r4, #0]
 800ff8a:	9300      	str	r3, [sp, #0]
 800ff8c:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800ff8e:	464b      	mov	r3, r9
 800ff90:	47b0      	blx	r6
 800ff92:	003b      	movs	r3, r7
 800ff94:	3330      	adds	r3, #48	; 0x30
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b01      	cmp	r3, #1
 800ff9a:	d915      	bls.n	800ffc8 <acc_sensor_diagnostics_r2_sensor_status+0x15a>
 800ff9c:	8be3      	ldrh	r3, [r4, #30]
 800ff9e:	4aa9      	ldr	r2, [pc, #676]	; (8010244 <acc_sensor_diagnostics_r2_sensor_status+0x3d6>)
 800ffa0:	9307      	str	r3, [sp, #28]
 800ffa2:	8ba3      	ldrh	r3, [r4, #28]
 800ffa4:	49a4      	ldr	r1, [pc, #656]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ffa6:	9306      	str	r3, [sp, #24]
 800ffa8:	8b63      	ldrh	r3, [r4, #26]
 800ffaa:	2002      	movs	r0, #2
 800ffac:	9305      	str	r3, [sp, #20]
 800ffae:	8b23      	ldrh	r3, [r4, #24]
 800ffb0:	9304      	str	r3, [sp, #16]
 800ffb2:	8ae3      	ldrh	r3, [r4, #22]
 800ffb4:	9303      	str	r3, [sp, #12]
 800ffb6:	8aa3      	ldrh	r3, [r4, #20]
 800ffb8:	9302      	str	r3, [sp, #8]
 800ffba:	8a63      	ldrh	r3, [r4, #18]
 800ffbc:	9301      	str	r3, [sp, #4]
 800ffbe:	8a23      	ldrh	r3, [r4, #16]
 800ffc0:	9300      	str	r3, [sp, #0]
 800ffc2:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800ffc4:	464b      	mov	r3, r9
 800ffc6:	47b0      	blx	r6
 800ffc8:	0029      	movs	r1, r5
 800ffca:	0023      	movs	r3, r4
 800ffcc:	3134      	adds	r1, #52	; 0x34
 800ffce:	2204      	movs	r2, #4
 800ffd0:	4648      	mov	r0, r9
 800ffd2:	f7ff ff39 	bl	800fe48 <read_reg_array>
 800ffd6:	003b      	movs	r3, r7
 800ffd8:	3330      	adds	r3, #48	; 0x30
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d90d      	bls.n	800fffc <acc_sensor_diagnostics_r2_sensor_status+0x18e>
 800ffe0:	88e3      	ldrh	r3, [r4, #6]
 800ffe2:	4a99      	ldr	r2, [pc, #612]	; (8010248 <acc_sensor_diagnostics_r2_sensor_status+0x3da>)
 800ffe4:	9303      	str	r3, [sp, #12]
 800ffe6:	88a3      	ldrh	r3, [r4, #4]
 800ffe8:	4993      	ldr	r1, [pc, #588]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 800ffea:	9302      	str	r3, [sp, #8]
 800ffec:	8863      	ldrh	r3, [r4, #2]
 800ffee:	2002      	movs	r0, #2
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	8823      	ldrh	r3, [r4, #0]
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800fff8:	464b      	mov	r3, r9
 800fffa:	47b0      	blx	r6
 800fffc:	ab02      	add	r3, sp, #8
 800fffe:	469c      	mov	ip, r3
 8010000:	222a      	movs	r2, #42	; 0x2a
 8010002:	2600      	movs	r6, #0
 8010004:	4462      	add	r2, ip
 8010006:	2153      	movs	r1, #83	; 0x53
 8010008:	4648      	mov	r0, r9
 801000a:	8016      	strh	r6, [r2, #0]
 801000c:	f7ff ff08 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8010010:	0022      	movs	r2, r4
 8010012:	2140      	movs	r1, #64	; 0x40
 8010014:	4648      	mov	r0, r9
 8010016:	8026      	strh	r6, [r4, #0]
 8010018:	f7ff ff02 	bl	800fe20 <internal_reg_read.lto_priv.542>
 801001c:	003b      	movs	r3, r7
 801001e:	3330      	adds	r3, #48	; 0x30
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	2b01      	cmp	r3, #1
 8010024:	d907      	bls.n	8010036 <acc_sensor_diagnostics_r2_sensor_status+0x1c8>
 8010026:	8823      	ldrh	r3, [r4, #0]
 8010028:	4a88      	ldr	r2, [pc, #544]	; (801024c <acc_sensor_diagnostics_r2_sensor_status+0x3de>)
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	4982      	ldr	r1, [pc, #520]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 801002e:	464b      	mov	r3, r9
 8010030:	2002      	movs	r0, #2
 8010032:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8010034:	47b0      	blx	r6
 8010036:	003b      	movs	r3, r7
 8010038:	3330      	adds	r3, #48	; 0x30
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	2b01      	cmp	r3, #1
 801003e:	d90c      	bls.n	801005a <acc_sensor_diagnostics_r2_sensor_status+0x1ec>
 8010040:	2240      	movs	r2, #64	; 0x40
 8010042:	8823      	ldrh	r3, [r4, #0]
 8010044:	497c      	ldr	r1, [pc, #496]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 8010046:	401a      	ands	r2, r3
 8010048:	9201      	str	r2, [sp, #4]
 801004a:	2280      	movs	r2, #128	; 0x80
 801004c:	4013      	ands	r3, r2
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	4a7f      	ldr	r2, [pc, #508]	; (8010250 <acc_sensor_diagnostics_r2_sensor_status+0x3e2>)
 8010052:	464b      	mov	r3, r9
 8010054:	2002      	movs	r0, #2
 8010056:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8010058:	47b0      	blx	r6
 801005a:	003b      	movs	r3, r7
 801005c:	3330      	adds	r3, #48	; 0x30
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d90c      	bls.n	801007e <acc_sensor_diagnostics_r2_sensor_status+0x210>
 8010064:	2210      	movs	r2, #16
 8010066:	8823      	ldrh	r3, [r4, #0]
 8010068:	4973      	ldr	r1, [pc, #460]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 801006a:	401a      	ands	r2, r3
 801006c:	9201      	str	r2, [sp, #4]
 801006e:	2220      	movs	r2, #32
 8010070:	4013      	ands	r3, r2
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	4a77      	ldr	r2, [pc, #476]	; (8010254 <acc_sensor_diagnostics_r2_sensor_status+0x3e6>)
 8010076:	464b      	mov	r3, r9
 8010078:	2002      	movs	r0, #2
 801007a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 801007c:	47b0      	blx	r6
 801007e:	003b      	movs	r3, r7
 8010080:	3330      	adds	r3, #48	; 0x30
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d90c      	bls.n	80100a2 <acc_sensor_diagnostics_r2_sensor_status+0x234>
 8010088:	2204      	movs	r2, #4
 801008a:	8823      	ldrh	r3, [r4, #0]
 801008c:	496a      	ldr	r1, [pc, #424]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 801008e:	401a      	ands	r2, r3
 8010090:	9201      	str	r2, [sp, #4]
 8010092:	2208      	movs	r2, #8
 8010094:	4013      	ands	r3, r2
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	4a6f      	ldr	r2, [pc, #444]	; (8010258 <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 801009a:	464b      	mov	r3, r9
 801009c:	2002      	movs	r0, #2
 801009e:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80100a0:	47b0      	blx	r6
 80100a2:	0029      	movs	r1, r5
 80100a4:	0023      	movs	r3, r4
 80100a6:	313c      	adds	r1, #60	; 0x3c
 80100a8:	2210      	movs	r2, #16
 80100aa:	4648      	mov	r0, r9
 80100ac:	f7ff fecc 	bl	800fe48 <read_reg_array>
 80100b0:	003b      	movs	r3, r7
 80100b2:	3330      	adds	r3, #48	; 0x30
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2500      	movs	r5, #0
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d908      	bls.n	80100ce <acc_sensor_diagnostics_r2_sensor_status+0x260>
 80100bc:	8823      	ldrh	r3, [r4, #0]
 80100be:	4a67      	ldr	r2, [pc, #412]	; (801025c <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80100c4:	464b      	mov	r3, r9
 80100c6:	495c      	ldr	r1, [pc, #368]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 80100c8:	2002      	movs	r0, #2
 80100ca:	47a8      	blx	r5
 80100cc:	2501      	movs	r5, #1
 80100ce:	003b      	movs	r3, r7
 80100d0:	3330      	adds	r3, #48	; 0x30
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d90b      	bls.n	80100f0 <acc_sensor_diagnostics_r2_sensor_status+0x282>
 80100d8:	1c6e      	adds	r6, r5, #1
 80100da:	006d      	lsls	r5, r5, #1
 80100dc:	5b63      	ldrh	r3, [r4, r5]
 80100de:	b2f6      	uxtb	r6, r6
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80100e4:	464b      	mov	r3, r9
 80100e6:	4a5e      	ldr	r2, [pc, #376]	; (8010260 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 80100e8:	4953      	ldr	r1, [pc, #332]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 80100ea:	2002      	movs	r0, #2
 80100ec:	47a8      	blx	r5
 80100ee:	0035      	movs	r5, r6
 80100f0:	2301      	movs	r3, #1
 80100f2:	9309      	str	r3, [sp, #36]	; 0x24
 80100f4:	332f      	adds	r3, #47	; 0x2f
 80100f6:	4698      	mov	r8, r3
 80100f8:	4b5a      	ldr	r3, [pc, #360]	; (8010264 <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 80100fa:	44b8      	add	r8, r7
 80100fc:	469b      	mov	fp, r3
 80100fe:	4b4e      	ldr	r3, [pc, #312]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 8010100:	469a      	mov	sl, r3
 8010102:	4643      	mov	r3, r8
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d90e      	bls.n	8010128 <acc_sensor_diagnostics_r2_sensor_status+0x2ba>
 801010a:	1c6b      	adds	r3, r5, #1
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	5ae3      	ldrh	r3, [r4, r3]
 8010110:	465a      	mov	r2, fp
 8010112:	9302      	str	r3, [sp, #8]
 8010114:	006b      	lsls	r3, r5, #1
 8010116:	5ae3      	ldrh	r3, [r4, r3]
 8010118:	4651      	mov	r1, sl
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801011e:	2002      	movs	r0, #2
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 8010124:	464b      	mov	r3, r9
 8010126:	47b0      	blx	r6
 8010128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801012a:	3502      	adds	r5, #2
 801012c:	3301      	adds	r3, #1
 801012e:	b2ed      	uxtb	r5, r5
 8010130:	9309      	str	r3, [sp, #36]	; 0x24
 8010132:	2b08      	cmp	r3, #8
 8010134:	d1e5      	bne.n	8010102 <acc_sensor_diagnostics_r2_sensor_status+0x294>
 8010136:	2300      	movs	r3, #0
 8010138:	469a      	mov	sl, r3
 801013a:	ae0d      	add	r6, sp, #52	; 0x34
 801013c:	0032      	movs	r2, r6
 801013e:	219d      	movs	r1, #157	; 0x9d
 8010140:	4648      	mov	r0, r9
 8010142:	8033      	strh	r3, [r6, #0]
 8010144:	f7ff fe6c 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8010148:	ab02      	add	r3, sp, #8
 801014a:	469c      	mov	ip, r3
 801014c:	252e      	movs	r5, #46	; 0x2e
 801014e:	4653      	mov	r3, sl
 8010150:	4465      	add	r5, ip
 8010152:	002a      	movs	r2, r5
 8010154:	2199      	movs	r1, #153	; 0x99
 8010156:	4648      	mov	r0, r9
 8010158:	802b      	strh	r3, [r5, #0]
 801015a:	9509      	str	r5, [sp, #36]	; 0x24
 801015c:	f7ff fe60 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8010160:	4653      	mov	r3, sl
 8010162:	0022      	movs	r2, r4
 8010164:	2196      	movs	r1, #150	; 0x96
 8010166:	4648      	mov	r0, r9
 8010168:	8023      	strh	r3, [r4, #0]
 801016a:	f7ff fe59 	bl	800fe20 <internal_reg_read.lto_priv.542>
 801016e:	4652      	mov	r2, sl
 8010170:	21b2      	movs	r1, #178	; 0xb2
 8010172:	4648      	mov	r0, r9
 8010174:	f7fc ff26 	bl	800cfc4 <acc_sensor_reg_write>
 8010178:	003b      	movs	r3, r7
 801017a:	3330      	adds	r3, #48	; 0x30
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	2b01      	cmp	r3, #1
 8010180:	d90e      	bls.n	80101a0 <acc_sensor_diagnostics_r2_sensor_status+0x332>
 8010182:	ab02      	add	r3, sp, #8
 8010184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010186:	4a38      	ldr	r2, [pc, #224]	; (8010268 <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 8010188:	9302      	str	r3, [sp, #8]
 801018a:	ab02      	add	r3, sp, #8
 801018c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801018e:	492a      	ldr	r1, [pc, #168]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 8010190:	9301      	str	r3, [sp, #4]
 8010192:	ab02      	add	r3, sp, #8
 8010194:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010196:	2002      	movs	r0, #2
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 801019c:	464b      	mov	r3, r9
 801019e:	47a8      	blx	r5
 80101a0:	003b      	movs	r3, r7
 80101a2:	3330      	adds	r3, #48	; 0x30
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d90b      	bls.n	80101c2 <acc_sensor_diagnostics_r2_sensor_status+0x354>
 80101aa:	aa02      	add	r2, sp, #8
 80101ac:	4694      	mov	ip, r2
 80101ae:	232a      	movs	r3, #42	; 0x2a
 80101b0:	4463      	add	r3, ip
 80101b2:	881b      	ldrh	r3, [r3, #0]
 80101b4:	4a2d      	ldr	r2, [pc, #180]	; (801026c <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	491f      	ldr	r1, [pc, #124]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 80101ba:	464b      	mov	r3, r9
 80101bc:	2002      	movs	r0, #2
 80101be:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80101c0:	47a8      	blx	r5
 80101c2:	003b      	movs	r3, r7
 80101c4:	3330      	adds	r3, #48	; 0x30
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d907      	bls.n	80101dc <acc_sensor_diagnostics_r2_sensor_status+0x36e>
 80101cc:	8833      	ldrh	r3, [r6, #0]
 80101ce:	4a28      	ldr	r2, [pc, #160]	; (8010270 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	4919      	ldr	r1, [pc, #100]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 80101d4:	464b      	mov	r3, r9
 80101d6:	2002      	movs	r0, #2
 80101d8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80101da:	47a8      	blx	r5
 80101dc:	003b      	movs	r3, r7
 80101de:	3330      	adds	r3, #48	; 0x30
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d908      	bls.n	80101f8 <acc_sensor_diagnostics_r2_sensor_status+0x38a>
 80101e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101e8:	4a22      	ldr	r2, [pc, #136]	; (8010274 <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 80101ea:	881b      	ldrh	r3, [r3, #0]
 80101ec:	4912      	ldr	r1, [pc, #72]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	2002      	movs	r0, #2
 80101f2:	464b      	mov	r3, r9
 80101f4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80101f6:	47a8      	blx	r5
 80101f8:	003b      	movs	r3, r7
 80101fa:	3330      	adds	r3, #48	; 0x30
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d907      	bls.n	8010212 <acc_sensor_diagnostics_r2_sensor_status+0x3a4>
 8010202:	8823      	ldrh	r3, [r4, #0]
 8010204:	4a1c      	ldr	r2, [pc, #112]	; (8010278 <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	490b      	ldr	r1, [pc, #44]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 801020a:	464b      	mov	r3, r9
 801020c:	2002      	movs	r0, #2
 801020e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8010210:	47a0      	blx	r4
 8010212:	003b      	movs	r3, r7
 8010214:	3330      	adds	r3, #48	; 0x30
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d904      	bls.n	8010226 <acc_sensor_diagnostics_r2_sensor_status+0x3b8>
 801021c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021e:	4a17      	ldr	r2, [pc, #92]	; (801027c <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 8010220:	4905      	ldr	r1, [pc, #20]	; (8010238 <acc_sensor_diagnostics_r2_sensor_status+0x3ca>)
 8010222:	2002      	movs	r0, #2
 8010224:	4798      	blx	r3
 8010226:	b017      	add	sp, #92	; 0x5c
 8010228:	bc3c      	pop	{r2, r3, r4, r5}
 801022a:	4690      	mov	r8, r2
 801022c:	4699      	mov	r9, r3
 801022e:	46a2      	mov	sl, r4
 8010230:	46ab      	mov	fp, r5
 8010232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010234:	0801ee62 	.word	0x0801ee62
 8010238:	0801ee32 	.word	0x0801ee32
 801023c:	0801c640 	.word	0x0801c640
 8010240:	0801ee7f 	.word	0x0801ee7f
 8010244:	0801eec6 	.word	0x0801eec6
 8010248:	0801ef0f 	.word	0x0801ef0f
 801024c:	0801ef40 	.word	0x0801ef40
 8010250:	0801ef5d 	.word	0x0801ef5d
 8010254:	0801ef89 	.word	0x0801ef89
 8010258:	0801efba 	.word	0x0801efba
 801025c:	0801efea 	.word	0x0801efea
 8010260:	0801f011 	.word	0x0801f011
 8010264:	0801f02f 	.word	0x0801f02f
 8010268:	0801f057 	.word	0x0801f057
 801026c:	0801f0a8 	.word	0x0801f0a8
 8010270:	0801f0cb 	.word	0x0801f0cb
 8010274:	0801f0e7 	.word	0x0801f0e7
 8010278:	0801f0fd 	.word	0x0801f0fd
 801027c:	0801f117 	.word	0x0801f117

08010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>:
 8010280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010282:	464e      	mov	r6, r9
 8010284:	46de      	mov	lr, fp
 8010286:	4645      	mov	r5, r8
 8010288:	4657      	mov	r7, sl
 801028a:	0004      	movs	r4, r0
 801028c:	b5e0      	push	{r5, r6, r7, lr}
 801028e:	468b      	mov	fp, r1
 8010290:	4691      	mov	r9, r2
 8010292:	2665      	movs	r6, #101	; 0x65
 8010294:	4d47      	ldr	r5, [pc, #284]	; (80103b4 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x134>)
 8010296:	b085      	sub	sp, #20
 8010298:	4659      	mov	r1, fp
 801029a:	0020      	movs	r0, r4
 801029c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801029e:	4798      	blx	r3
 80102a0:	4680      	mov	r8, r0
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d10f      	bne.n	80102c6 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x46>
 80102a6:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 80102a8:	0023      	movs	r3, r4
 80102aa:	4a43      	ldr	r2, [pc, #268]	; (80103b8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x138>)
 80102ac:	4943      	ldr	r1, [pc, #268]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 80102ae:	47a8      	blx	r5
 80102b0:	0020      	movs	r0, r4
 80102b2:	f7ff fddc 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 80102b6:	4640      	mov	r0, r8
 80102b8:	b005      	add	sp, #20
 80102ba:	bc3c      	pop	{r2, r3, r4, r5}
 80102bc:	4690      	mov	r8, r2
 80102be:	4699      	mov	r9, r3
 80102c0:	46a2      	mov	sl, r4
 80102c2:	46ab      	mov	fp, r5
 80102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102c6:	270e      	movs	r7, #14
 80102c8:	2300      	movs	r3, #0
 80102ca:	446f      	add	r7, sp
 80102cc:	003a      	movs	r2, r7
 80102ce:	212a      	movs	r1, #42	; 0x2a
 80102d0:	0020      	movs	r0, r4
 80102d2:	469a      	mov	sl, r3
 80102d4:	803b      	strh	r3, [r7, #0]
 80102d6:	f7ff fda3 	bl	800fe20 <internal_reg_read.lto_priv.542>
 80102da:	2240      	movs	r2, #64	; 0x40
 80102dc:	883b      	ldrh	r3, [r7, #0]
 80102de:	4213      	tst	r3, r2
 80102e0:	d04f      	beq.n	8010382 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x102>
 80102e2:	003a      	movs	r2, r7
 80102e4:	2128      	movs	r1, #40	; 0x28
 80102e6:	0020      	movs	r0, r4
 80102e8:	f7ff fd9a 	bl	800fe20 <internal_reg_read.lto_priv.542>
 80102ec:	4649      	mov	r1, r9
 80102ee:	883a      	ldrh	r2, [r7, #0]
 80102f0:	b2d3      	uxtb	r3, r2
 80102f2:	700b      	strb	r3, [r1, #0]
 80102f4:	804a      	strh	r2, [r1, #2]
 80102f6:	2b0b      	cmp	r3, #11
 80102f8:	d839      	bhi.n	801036e <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xee>
 80102fa:	0018      	movs	r0, r3
 80102fc:	f000 ff0c 	bl	8011118 <__gnu_thumb1_case_sqi>
 8010300:	dbdb1806 	.word	0xdbdb1806
 8010304:	dbdbdbdb 	.word	0xdbdbdbdb
 8010308:	dbdbdbdb 	.word	0xdbdbdbdb
 801030c:	0023      	movs	r3, r4
 801030e:	4a2c      	ldr	r2, [pc, #176]	; (80103c0 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x140>)
 8010310:	492a      	ldr	r1, [pc, #168]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010312:	2000      	movs	r0, #0
 8010314:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010316:	47b0      	blx	r6
 8010318:	0020      	movs	r0, r4
 801031a:	f7ff fda8 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 801031e:	0023      	movs	r3, r4
 8010320:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8010322:	4a28      	ldr	r2, [pc, #160]	; (80103c4 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x144>)
 8010324:	4925      	ldr	r1, [pc, #148]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010326:	2000      	movs	r0, #0
 8010328:	47a8      	blx	r5
 801032a:	2300      	movs	r3, #0
 801032c:	4698      	mov	r8, r3
 801032e:	e7c2      	b.n	80102b6 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x36>
 8010330:	0a11      	lsrs	r1, r2, #8
 8010332:	2910      	cmp	r1, #16
 8010334:	d804      	bhi.n	8010340 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xc0>
 8010336:	2301      	movs	r3, #1
 8010338:	408b      	lsls	r3, r1
 801033a:	4923      	ldr	r1, [pc, #140]	; (80103c8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x148>)
 801033c:	420b      	tst	r3, r1
 801033e:	d105      	bne.n	801034c <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xcc>
 8010340:	2384      	movs	r3, #132	; 0x84
 8010342:	b2d2      	uxtb	r2, r2
 8010344:	019b      	lsls	r3, r3, #6
 8010346:	431a      	orrs	r2, r3
 8010348:	464b      	mov	r3, r9
 801034a:	805a      	strh	r2, [r3, #2]
 801034c:	464b      	mov	r3, r9
 801034e:	885a      	ldrh	r2, [r3, #2]
 8010350:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010352:	0a12      	lsrs	r2, r2, #8
 8010354:	3a01      	subs	r2, #1
 8010356:	b2d2      	uxtb	r2, r2
 8010358:	4b1c      	ldr	r3, [pc, #112]	; (80103cc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x14c>)
 801035a:	2a20      	cmp	r2, #32
 801035c:	d802      	bhi.n	8010364 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0xe4>
 801035e:	4b1c      	ldr	r3, [pc, #112]	; (80103d0 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x150>)
 8010360:	0092      	lsls	r2, r2, #2
 8010362:	58d3      	ldr	r3, [r2, r3]
 8010364:	4a1b      	ldr	r2, [pc, #108]	; (80103d4 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x154>)
 8010366:	4915      	ldr	r1, [pc, #84]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010368:	2000      	movs	r0, #0
 801036a:	47b0      	blx	r6
 801036c:	e7d4      	b.n	8010318 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x98>
 801036e:	9400      	str	r4, [sp, #0]
 8010370:	4a19      	ldr	r2, [pc, #100]	; (80103d8 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x158>)
 8010372:	4912      	ldr	r1, [pc, #72]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010374:	4650      	mov	r0, sl
 8010376:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8010378:	47b0      	blx	r6
 801037a:	464b      	mov	r3, r9
 801037c:	2200      	movs	r2, #0
 801037e:	701a      	strb	r2, [r3, #0]
 8010380:	e7ca      	b.n	8010318 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x98>
 8010382:	002b      	movs	r3, r5
 8010384:	3330      	adds	r3, #48	; 0x30
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d005      	beq.n	8010398 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x118>
 801038c:	0023      	movs	r3, r4
 801038e:	4a13      	ldr	r2, [pc, #76]	; (80103dc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x15c>)
 8010390:	490a      	ldr	r1, [pc, #40]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 8010392:	2001      	movs	r0, #1
 8010394:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8010396:	47b8      	blx	r7
 8010398:	3e01      	subs	r6, #1
 801039a:	b2b6      	uxth	r6, r6
 801039c:	2e00      	cmp	r6, #0
 801039e:	d000      	beq.n	80103a2 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x122>
 80103a0:	e77a      	b.n	8010298 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x18>
 80103a2:	9400      	str	r4, [sp, #0]
 80103a4:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80103a6:	2364      	movs	r3, #100	; 0x64
 80103a8:	4a0d      	ldr	r2, [pc, #52]	; (80103e0 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x160>)
 80103aa:	4904      	ldr	r1, [pc, #16]	; (80103bc <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x13c>)
 80103ac:	0030      	movs	r0, r6
 80103ae:	47a0      	blx	r4
 80103b0:	46b0      	mov	r8, r6
 80103b2:	e780      	b.n	80102b6 <acc_sensor_protocol_r2_wait_for_event.constprop.26+0x36>
 80103b4:	200005d8 	.word	0x200005d8
 80103b8:	0801f165 	.word	0x0801f165
 80103bc:	0801d00f 	.word	0x0801d00f
 80103c0:	0801f18d 	.word	0x0801f18d
 80103c4:	0801f1ff 	.word	0x0801f1ff
 80103c8:	00010016 	.word	0x00010016
 80103cc:	0801f157 	.word	0x0801f157
 80103d0:	0801c8a4 	.word	0x0801c8a4
 80103d4:	0801f1b0 	.word	0x0801f1b0
 80103d8:	0801f1d0 	.word	0x0801f1d0
 80103dc:	0801f227 	.word	0x0801f227
 80103e0:	0801f248 	.word	0x0801f248

080103e4 <acc_sensor_protocol_r2_stop.constprop.24>:
 80103e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e6:	0005      	movs	r5, r0
 80103e8:	f7f3 fe48 	bl	800407c <acc_sensor_protocol_r2_is_sensor_running>
 80103ec:	1e04      	subs	r4, r0, #0
 80103ee:	d109      	bne.n	8010404 <acc_sensor_protocol_r2_stop.constprop.24+0x20>
 80103f0:	4b1a      	ldr	r3, [pc, #104]	; (801045c <acc_sensor_protocol_r2_stop.constprop.24+0x78>)
 80103f2:	4a1b      	ldr	r2, [pc, #108]	; (8010460 <acc_sensor_protocol_r2_stop.constprop.24+0x7c>)
 80103f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103f6:	491b      	ldr	r1, [pc, #108]	; (8010464 <acc_sensor_protocol_r2_stop.constprop.24+0x80>)
 80103f8:	4798      	blx	r3
 80103fa:	0028      	movs	r0, r5
 80103fc:	f7ff fd37 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 8010400:	0020      	movs	r0, r4
 8010402:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8010404:	4b18      	ldr	r3, [pc, #96]	; (8010468 <acc_sensor_protocol_r2_stop.constprop.24+0x84>)
 8010406:	ae01      	add	r6, sp, #4
 8010408:	9301      	str	r3, [sp, #4]
 801040a:	2202      	movs	r2, #2
 801040c:	2300      	movs	r3, #0
 801040e:	0031      	movs	r1, r6
 8010410:	0028      	movs	r0, r5
 8010412:	f7f4 ff39 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 8010416:	0028      	movs	r0, r5
 8010418:	f7f1 ff1c 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 801041c:	1e04      	subs	r4, r0, #0
 801041e:	d0ef      	beq.n	8010400 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 8010420:	21fa      	movs	r1, #250	; 0xfa
 8010422:	0032      	movs	r2, r6
 8010424:	00c9      	lsls	r1, r1, #3
 8010426:	0028      	movs	r0, r5
 8010428:	f7ff ff2a 	bl	8010280 <acc_sensor_protocol_r2_wait_for_event.constprop.26>
 801042c:	2800      	cmp	r0, #0
 801042e:	d101      	bne.n	8010434 <acc_sensor_protocol_r2_stop.constprop.24+0x50>
 8010430:	2400      	movs	r4, #0
 8010432:	e7e5      	b.n	8010400 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 8010434:	0028      	movs	r0, r5
 8010436:	f7f1 ff0d 	bl	8002254 <acc_sensor_protocol_r2_ack_event>
 801043a:	1e04      	subs	r4, r0, #0
 801043c:	d0f8      	beq.n	8010430 <acc_sensor_protocol_r2_stop.constprop.24+0x4c>
 801043e:	7833      	ldrb	r3, [r6, #0]
 8010440:	2b02      	cmp	r3, #2
 8010442:	d0dd      	beq.n	8010400 <acc_sensor_protocol_r2_stop.constprop.24+0x1c>
 8010444:	4a05      	ldr	r2, [pc, #20]	; (801045c <acc_sensor_protocol_r2_stop.constprop.24+0x78>)
 8010446:	8873      	ldrh	r3, [r6, #2]
 8010448:	6b54      	ldr	r4, [r2, #52]	; 0x34
 801044a:	4906      	ldr	r1, [pc, #24]	; (8010464 <acc_sensor_protocol_r2_stop.constprop.24+0x80>)
 801044c:	4a07      	ldr	r2, [pc, #28]	; (801046c <acc_sensor_protocol_r2_stop.constprop.24+0x88>)
 801044e:	2000      	movs	r0, #0
 8010450:	47a0      	blx	r4
 8010452:	0028      	movs	r0, r5
 8010454:	f7ff fd0b 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 8010458:	e7ea      	b.n	8010430 <acc_sensor_protocol_r2_stop.constprop.24+0x4c>
 801045a:	46c0      	nop			; (mov r8, r8)
 801045c:	200005d8 	.word	0x200005d8
 8010460:	0801f281 	.word	0x0801f281
 8010464:	0801d00f 	.word	0x0801d00f
 8010468:	00011074 	.word	0x00011074
 801046c:	0801f2b3 	.word	0x0801f2b3

08010470 <acc_sensor_protocol_r2_prepare_load.constprop.20>:
 8010470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010472:	46ce      	mov	lr, r9
 8010474:	4647      	mov	r7, r8
 8010476:	b580      	push	{r7, lr}
 8010478:	b083      	sub	sp, #12
 801047a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801047c:	0852      	lsrs	r2, r2, #1
 801047e:	4e37      	ldr	r6, [pc, #220]	; (801055c <acc_sensor_protocol_r2_prepare_load.constprop.20+0xec>)
 8010480:	602a      	str	r2, [r5, #0]
 8010482:	0004      	movs	r4, r0
 8010484:	6870      	ldr	r0, [r6, #4]
 8010486:	0840      	lsrs	r0, r0, #1
 8010488:	4290      	cmp	r0, r2
 801048a:	d900      	bls.n	801048e <acc_sensor_protocol_r2_prepare_load.constprop.20+0x1e>
 801048c:	0010      	movs	r0, r2
 801048e:	2701      	movs	r7, #1
 8010490:	3102      	adds	r1, #2
 8010492:	6019      	str	r1, [r3, #0]
 8010494:	2300      	movs	r3, #0
 8010496:	3801      	subs	r0, #1
 8010498:	43b8      	bics	r0, r7
 801049a:	6028      	str	r0, [r5, #0]
 801049c:	ad01      	add	r5, sp, #4
 801049e:	002a      	movs	r2, r5
 80104a0:	212a      	movs	r1, #42	; 0x2a
 80104a2:	0020      	movs	r0, r4
 80104a4:	802b      	strh	r3, [r5, #0]
 80104a6:	f7ff fcbb 	bl	800fe20 <internal_reg_read.lto_priv.542>
 80104aa:	882b      	ldrh	r3, [r5, #0]
 80104ac:	065b      	lsls	r3, r3, #25
 80104ae:	d50d      	bpl.n	80104cc <acc_sensor_protocol_r2_prepare_load.constprop.20+0x5c>
 80104b0:	0033      	movs	r3, r6
 80104b2:	3330      	adds	r3, #48	; 0x30
 80104b4:	781b      	ldrb	r3, [r3, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d005      	beq.n	80104c6 <acc_sensor_protocol_r2_prepare_load.constprop.20+0x56>
 80104ba:	0038      	movs	r0, r7
 80104bc:	0023      	movs	r3, r4
 80104be:	4a28      	ldr	r2, [pc, #160]	; (8010560 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf0>)
 80104c0:	4928      	ldr	r1, [pc, #160]	; (8010564 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf4>)
 80104c2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80104c4:	47b8      	blx	r7
 80104c6:	0020      	movs	r0, r4
 80104c8:	f7ff fcd1 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 80104cc:	0020      	movs	r0, r4
 80104ce:	f7f3 fdd5 	bl	800407c <acc_sensor_protocol_r2_is_sensor_running>
 80104d2:	4680      	mov	r8, r0
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d00e      	beq.n	80104f6 <acc_sensor_protocol_r2_prepare_load.constprop.20+0x86>
 80104d8:	0023      	movs	r3, r4
 80104da:	4a23      	ldr	r2, [pc, #140]	; (8010568 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf8>)
 80104dc:	4921      	ldr	r1, [pc, #132]	; (8010564 <acc_sensor_protocol_r2_prepare_load.constprop.20+0xf4>)
 80104de:	2000      	movs	r0, #0
 80104e0:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80104e2:	47a8      	blx	r5
 80104e4:	0020      	movs	r0, r4
 80104e6:	f7ff fcc2 	bl	800fe6e <acc_sensor_diagnostics_r2_sensor_status>
 80104ea:	2000      	movs	r0, #0
 80104ec:	b003      	add	sp, #12
 80104ee:	bc0c      	pop	{r2, r3}
 80104f0:	4690      	mov	r8, r2
 80104f2:	4699      	mov	r9, r3
 80104f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f6:	466b      	mov	r3, sp
 80104f8:	1c9e      	adds	r6, r3, #2
 80104fa:	2702      	movs	r7, #2
 80104fc:	0032      	movs	r2, r6
 80104fe:	2180      	movs	r1, #128	; 0x80
 8010500:	0020      	movs	r0, r4
 8010502:	f7ff fc8d 	bl	800fe20 <internal_reg_read.lto_priv.542>
 8010506:	2284      	movs	r2, #132	; 0x84
 8010508:	8833      	ldrh	r3, [r6, #0]
 801050a:	0152      	lsls	r2, r2, #5
 801050c:	43bb      	bics	r3, r7
 801050e:	433b      	orrs	r3, r7
 8010510:	4691      	mov	r9, r2
 8010512:	802a      	strh	r2, [r5, #0]
 8010514:	806b      	strh	r3, [r5, #2]
 8010516:	003a      	movs	r2, r7
 8010518:	4643      	mov	r3, r8
 801051a:	0029      	movs	r1, r5
 801051c:	0020      	movs	r0, r4
 801051e:	f7f4 feb3 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 8010522:	0032      	movs	r2, r6
 8010524:	2180      	movs	r1, #128	; 0x80
 8010526:	0020      	movs	r0, r4
 8010528:	f7ff fc7a 	bl	800fe20 <internal_reg_read.lto_priv.542>
 801052c:	2280      	movs	r2, #128	; 0x80
 801052e:	8833      	ldrh	r3, [r6, #0]
 8010530:	0029      	movs	r1, r5
 8010532:	4393      	bics	r3, r2
 8010534:	464a      	mov	r2, r9
 8010536:	806b      	strh	r3, [r5, #2]
 8010538:	802a      	strh	r2, [r5, #0]
 801053a:	4643      	mov	r3, r8
 801053c:	003a      	movs	r2, r7
 801053e:	0020      	movs	r0, r4
 8010540:	f7f4 fea2 	bl	8005288 <acc_rss_integration_sensor_device_transfer>
 8010544:	2201      	movs	r2, #1
 8010546:	2105      	movs	r1, #5
 8010548:	0020      	movs	r0, r4
 801054a:	f7fc fd3b 	bl	800cfc4 <acc_sensor_reg_write>
 801054e:	0020      	movs	r0, r4
 8010550:	2203      	movs	r2, #3
 8010552:	217a      	movs	r1, #122	; 0x7a
 8010554:	f7fc fd36 	bl	800cfc4 <acc_sensor_reg_write>
 8010558:	2001      	movs	r0, #1
 801055a:	e7c7      	b.n	80104ec <acc_sensor_protocol_r2_prepare_load.constprop.20+0x7c>
 801055c:	200005d8 	.word	0x200005d8
 8010560:	0801f2d3 	.word	0x0801f2d3
 8010564:	0801d00f 	.word	0x0801d00f
 8010568:	0801f2ff 	.word	0x0801f2ff

0801056c <acc_cpd_linear_sweep_get_info>:
 801056c:	30ad      	adds	r0, #173	; 0xad
 801056e:	7803      	ldrb	r3, [r0, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00a      	beq.n	801058a <acc_cpd_linear_sweep_get_info+0x1e>
 8010574:	2200      	movs	r2, #0
 8010576:	2303      	movs	r3, #3
 8010578:	604a      	str	r2, [r1, #4]
 801057a:	608a      	str	r2, [r1, #8]
 801057c:	3201      	adds	r2, #1
 801057e:	60ca      	str	r2, [r1, #12]
 8010580:	3201      	adds	r2, #1
 8010582:	600b      	str	r3, [r1, #0]
 8010584:	610a      	str	r2, [r1, #16]
 8010586:	614b      	str	r3, [r1, #20]
 8010588:	4770      	bx	lr
 801058a:	600b      	str	r3, [r1, #0]
 801058c:	604b      	str	r3, [r1, #4]
 801058e:	608b      	str	r3, [r1, #8]
 8010590:	60cb      	str	r3, [r1, #12]
 8010592:	610b      	str	r3, [r1, #16]
 8010594:	614b      	str	r3, [r1, #20]
 8010596:	e7f7      	b.n	8010588 <acc_cpd_linear_sweep_get_info+0x1c>

08010598 <__aeabi_fadd>:
 8010598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059a:	4647      	mov	r7, r8
 801059c:	46ce      	mov	lr, r9
 801059e:	0243      	lsls	r3, r0, #9
 80105a0:	0a5b      	lsrs	r3, r3, #9
 80105a2:	0044      	lsls	r4, r0, #1
 80105a4:	0fc2      	lsrs	r2, r0, #31
 80105a6:	469c      	mov	ip, r3
 80105a8:	0048      	lsls	r0, r1, #1
 80105aa:	00dd      	lsls	r5, r3, #3
 80105ac:	024b      	lsls	r3, r1, #9
 80105ae:	0e24      	lsrs	r4, r4, #24
 80105b0:	0a5b      	lsrs	r3, r3, #9
 80105b2:	0e00      	lsrs	r0, r0, #24
 80105b4:	b580      	push	{r7, lr}
 80105b6:	4698      	mov	r8, r3
 80105b8:	0026      	movs	r6, r4
 80105ba:	4691      	mov	r9, r2
 80105bc:	0fc9      	lsrs	r1, r1, #31
 80105be:	00db      	lsls	r3, r3, #3
 80105c0:	1a27      	subs	r7, r4, r0
 80105c2:	428a      	cmp	r2, r1
 80105c4:	d029      	beq.n	801061a <__aeabi_fadd+0x82>
 80105c6:	2f00      	cmp	r7, #0
 80105c8:	dd15      	ble.n	80105f6 <__aeabi_fadd+0x5e>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d14a      	bne.n	8010664 <__aeabi_fadd+0xcc>
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d000      	beq.n	80105d4 <__aeabi_fadd+0x3c>
 80105d2:	e095      	b.n	8010700 <__aeabi_fadd+0x168>
 80105d4:	08ed      	lsrs	r5, r5, #3
 80105d6:	2cff      	cmp	r4, #255	; 0xff
 80105d8:	d100      	bne.n	80105dc <__aeabi_fadd+0x44>
 80105da:	e088      	b.n	80106ee <__aeabi_fadd+0x156>
 80105dc:	026b      	lsls	r3, r5, #9
 80105de:	0a5b      	lsrs	r3, r3, #9
 80105e0:	b2e6      	uxtb	r6, r4
 80105e2:	025b      	lsls	r3, r3, #9
 80105e4:	05f6      	lsls	r6, r6, #23
 80105e6:	0a58      	lsrs	r0, r3, #9
 80105e8:	4330      	orrs	r0, r6
 80105ea:	07d2      	lsls	r2, r2, #31
 80105ec:	4310      	orrs	r0, r2
 80105ee:	bc0c      	pop	{r2, r3}
 80105f0:	4690      	mov	r8, r2
 80105f2:	4699      	mov	r9, r3
 80105f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105f6:	2f00      	cmp	r7, #0
 80105f8:	d000      	beq.n	80105fc <__aeabi_fadd+0x64>
 80105fa:	e087      	b.n	801070c <__aeabi_fadd+0x174>
 80105fc:	1c60      	adds	r0, r4, #1
 80105fe:	b2c0      	uxtb	r0, r0
 8010600:	2801      	cmp	r0, #1
 8010602:	dc00      	bgt.n	8010606 <__aeabi_fadd+0x6e>
 8010604:	e0b6      	b.n	8010774 <__aeabi_fadd+0x1dc>
 8010606:	1aee      	subs	r6, r5, r3
 8010608:	0172      	lsls	r2, r6, #5
 801060a:	d500      	bpl.n	801060e <__aeabi_fadd+0x76>
 801060c:	e0c5      	b.n	801079a <__aeabi_fadd+0x202>
 801060e:	2e00      	cmp	r6, #0
 8010610:	d13d      	bne.n	801068e <__aeabi_fadd+0xf6>
 8010612:	2200      	movs	r2, #0
 8010614:	2600      	movs	r6, #0
 8010616:	2300      	movs	r3, #0
 8010618:	e7e3      	b.n	80105e2 <__aeabi_fadd+0x4a>
 801061a:	2f00      	cmp	r7, #0
 801061c:	dc00      	bgt.n	8010620 <__aeabi_fadd+0x88>
 801061e:	e096      	b.n	801074e <__aeabi_fadd+0x1b6>
 8010620:	2800      	cmp	r0, #0
 8010622:	d05d      	beq.n	80106e0 <__aeabi_fadd+0x148>
 8010624:	2cff      	cmp	r4, #255	; 0xff
 8010626:	d060      	beq.n	80106ea <__aeabi_fadd+0x152>
 8010628:	2280      	movs	r2, #128	; 0x80
 801062a:	04d2      	lsls	r2, r2, #19
 801062c:	4313      	orrs	r3, r2
 801062e:	2f1b      	cmp	r7, #27
 8010630:	dd00      	ble.n	8010634 <__aeabi_fadd+0x9c>
 8010632:	e0ec      	b.n	801080e <__aeabi_fadd+0x276>
 8010634:	2220      	movs	r2, #32
 8010636:	1bd2      	subs	r2, r2, r7
 8010638:	0018      	movs	r0, r3
 801063a:	4093      	lsls	r3, r2
 801063c:	40f8      	lsrs	r0, r7
 801063e:	1e5a      	subs	r2, r3, #1
 8010640:	4193      	sbcs	r3, r2
 8010642:	4303      	orrs	r3, r0
 8010644:	18ed      	adds	r5, r5, r3
 8010646:	016b      	lsls	r3, r5, #5
 8010648:	d57b      	bpl.n	8010742 <__aeabi_fadd+0x1aa>
 801064a:	3401      	adds	r4, #1
 801064c:	2cff      	cmp	r4, #255	; 0xff
 801064e:	d100      	bne.n	8010652 <__aeabi_fadd+0xba>
 8010650:	e0b7      	b.n	80107c2 <__aeabi_fadd+0x22a>
 8010652:	2201      	movs	r2, #1
 8010654:	2607      	movs	r6, #7
 8010656:	402a      	ands	r2, r5
 8010658:	086b      	lsrs	r3, r5, #1
 801065a:	4d9a      	ldr	r5, [pc, #616]	; (80108c4 <__aeabi_fadd+0x32c>)
 801065c:	401d      	ands	r5, r3
 801065e:	4315      	orrs	r5, r2
 8010660:	402e      	ands	r6, r5
 8010662:	e029      	b.n	80106b8 <__aeabi_fadd+0x120>
 8010664:	2cff      	cmp	r4, #255	; 0xff
 8010666:	d0b5      	beq.n	80105d4 <__aeabi_fadd+0x3c>
 8010668:	2280      	movs	r2, #128	; 0x80
 801066a:	04d2      	lsls	r2, r2, #19
 801066c:	4313      	orrs	r3, r2
 801066e:	2f1b      	cmp	r7, #27
 8010670:	dd00      	ble.n	8010674 <__aeabi_fadd+0xdc>
 8010672:	e0b2      	b.n	80107da <__aeabi_fadd+0x242>
 8010674:	2220      	movs	r2, #32
 8010676:	1bd2      	subs	r2, r2, r7
 8010678:	0019      	movs	r1, r3
 801067a:	4093      	lsls	r3, r2
 801067c:	40f9      	lsrs	r1, r7
 801067e:	1e5a      	subs	r2, r3, #1
 8010680:	4193      	sbcs	r3, r2
 8010682:	430b      	orrs	r3, r1
 8010684:	1aed      	subs	r5, r5, r3
 8010686:	016b      	lsls	r3, r5, #5
 8010688:	d55b      	bpl.n	8010742 <__aeabi_fadd+0x1aa>
 801068a:	01ad      	lsls	r5, r5, #6
 801068c:	09ae      	lsrs	r6, r5, #6
 801068e:	0030      	movs	r0, r6
 8010690:	f000 fd24 	bl	80110dc <__clzsi2>
 8010694:	3805      	subs	r0, #5
 8010696:	4086      	lsls	r6, r0
 8010698:	4284      	cmp	r4, r0
 801069a:	dc65      	bgt.n	8010768 <__aeabi_fadd+0x1d0>
 801069c:	1b04      	subs	r4, r0, r4
 801069e:	0033      	movs	r3, r6
 80106a0:	2020      	movs	r0, #32
 80106a2:	3401      	adds	r4, #1
 80106a4:	40e3      	lsrs	r3, r4
 80106a6:	1b04      	subs	r4, r0, r4
 80106a8:	40a6      	lsls	r6, r4
 80106aa:	1e75      	subs	r5, r6, #1
 80106ac:	41ae      	sbcs	r6, r5
 80106ae:	4333      	orrs	r3, r6
 80106b0:	2607      	movs	r6, #7
 80106b2:	001d      	movs	r5, r3
 80106b4:	2400      	movs	r4, #0
 80106b6:	401e      	ands	r6, r3
 80106b8:	2201      	movs	r2, #1
 80106ba:	464b      	mov	r3, r9
 80106bc:	401a      	ands	r2, r3
 80106be:	2e00      	cmp	r6, #0
 80106c0:	d004      	beq.n	80106cc <__aeabi_fadd+0x134>
 80106c2:	230f      	movs	r3, #15
 80106c4:	402b      	ands	r3, r5
 80106c6:	2b04      	cmp	r3, #4
 80106c8:	d000      	beq.n	80106cc <__aeabi_fadd+0x134>
 80106ca:	3504      	adds	r5, #4
 80106cc:	016b      	lsls	r3, r5, #5
 80106ce:	d400      	bmi.n	80106d2 <__aeabi_fadd+0x13a>
 80106d0:	e780      	b.n	80105d4 <__aeabi_fadd+0x3c>
 80106d2:	3401      	adds	r4, #1
 80106d4:	b2e6      	uxtb	r6, r4
 80106d6:	2cff      	cmp	r4, #255	; 0xff
 80106d8:	d12f      	bne.n	801073a <__aeabi_fadd+0x1a2>
 80106da:	26ff      	movs	r6, #255	; 0xff
 80106dc:	2300      	movs	r3, #0
 80106de:	e780      	b.n	80105e2 <__aeabi_fadd+0x4a>
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d152      	bne.n	801078a <__aeabi_fadd+0x1f2>
 80106e4:	2cff      	cmp	r4, #255	; 0xff
 80106e6:	d000      	beq.n	80106ea <__aeabi_fadd+0x152>
 80106e8:	e774      	b.n	80105d4 <__aeabi_fadd+0x3c>
 80106ea:	000a      	movs	r2, r1
 80106ec:	08ed      	lsrs	r5, r5, #3
 80106ee:	2d00      	cmp	r5, #0
 80106f0:	d0f3      	beq.n	80106da <__aeabi_fadd+0x142>
 80106f2:	2380      	movs	r3, #128	; 0x80
 80106f4:	03db      	lsls	r3, r3, #15
 80106f6:	432b      	orrs	r3, r5
 80106f8:	025b      	lsls	r3, r3, #9
 80106fa:	0a5b      	lsrs	r3, r3, #9
 80106fc:	26ff      	movs	r6, #255	; 0xff
 80106fe:	e770      	b.n	80105e2 <__aeabi_fadd+0x4a>
 8010700:	3f01      	subs	r7, #1
 8010702:	2f00      	cmp	r7, #0
 8010704:	d0be      	beq.n	8010684 <__aeabi_fadd+0xec>
 8010706:	2cff      	cmp	r4, #255	; 0xff
 8010708:	d1b1      	bne.n	801066e <__aeabi_fadd+0xd6>
 801070a:	e763      	b.n	80105d4 <__aeabi_fadd+0x3c>
 801070c:	2c00      	cmp	r4, #0
 801070e:	d047      	beq.n	80107a0 <__aeabi_fadd+0x208>
 8010710:	28ff      	cmp	r0, #255	; 0xff
 8010712:	d069      	beq.n	80107e8 <__aeabi_fadd+0x250>
 8010714:	2480      	movs	r4, #128	; 0x80
 8010716:	04e4      	lsls	r4, r4, #19
 8010718:	427a      	negs	r2, r7
 801071a:	4325      	orrs	r5, r4
 801071c:	2a1b      	cmp	r2, #27
 801071e:	dd00      	ble.n	8010722 <__aeabi_fadd+0x18a>
 8010720:	e0c5      	b.n	80108ae <__aeabi_fadd+0x316>
 8010722:	002c      	movs	r4, r5
 8010724:	2620      	movs	r6, #32
 8010726:	40d4      	lsrs	r4, r2
 8010728:	1ab2      	subs	r2, r6, r2
 801072a:	4095      	lsls	r5, r2
 801072c:	1e6a      	subs	r2, r5, #1
 801072e:	4195      	sbcs	r5, r2
 8010730:	4325      	orrs	r5, r4
 8010732:	1b5d      	subs	r5, r3, r5
 8010734:	0004      	movs	r4, r0
 8010736:	4689      	mov	r9, r1
 8010738:	e7a5      	b.n	8010686 <__aeabi_fadd+0xee>
 801073a:	01ab      	lsls	r3, r5, #6
 801073c:	0a5b      	lsrs	r3, r3, #9
 801073e:	e750      	b.n	80105e2 <__aeabi_fadd+0x4a>
 8010740:	2400      	movs	r4, #0
 8010742:	2201      	movs	r2, #1
 8010744:	464b      	mov	r3, r9
 8010746:	401a      	ands	r2, r3
 8010748:	076b      	lsls	r3, r5, #29
 801074a:	d1ba      	bne.n	80106c2 <__aeabi_fadd+0x12a>
 801074c:	e742      	b.n	80105d4 <__aeabi_fadd+0x3c>
 801074e:	2f00      	cmp	r7, #0
 8010750:	d13b      	bne.n	80107ca <__aeabi_fadd+0x232>
 8010752:	3401      	adds	r4, #1
 8010754:	b2e0      	uxtb	r0, r4
 8010756:	2801      	cmp	r0, #1
 8010758:	dd4a      	ble.n	80107f0 <__aeabi_fadd+0x258>
 801075a:	2cff      	cmp	r4, #255	; 0xff
 801075c:	d0bd      	beq.n	80106da <__aeabi_fadd+0x142>
 801075e:	2607      	movs	r6, #7
 8010760:	18ed      	adds	r5, r5, r3
 8010762:	086d      	lsrs	r5, r5, #1
 8010764:	402e      	ands	r6, r5
 8010766:	e7a7      	b.n	80106b8 <__aeabi_fadd+0x120>
 8010768:	2307      	movs	r3, #7
 801076a:	4d57      	ldr	r5, [pc, #348]	; (80108c8 <__aeabi_fadd+0x330>)
 801076c:	1a24      	subs	r4, r4, r0
 801076e:	4035      	ands	r5, r6
 8010770:	401e      	ands	r6, r3
 8010772:	e7a1      	b.n	80106b8 <__aeabi_fadd+0x120>
 8010774:	2c00      	cmp	r4, #0
 8010776:	d11b      	bne.n	80107b0 <__aeabi_fadd+0x218>
 8010778:	2d00      	cmp	r5, #0
 801077a:	d16e      	bne.n	801085a <__aeabi_fadd+0x2c2>
 801077c:	2b00      	cmp	r3, #0
 801077e:	d100      	bne.n	8010782 <__aeabi_fadd+0x1ea>
 8010780:	e09a      	b.n	80108b8 <__aeabi_fadd+0x320>
 8010782:	000a      	movs	r2, r1
 8010784:	001d      	movs	r5, r3
 8010786:	003c      	movs	r4, r7
 8010788:	e724      	b.n	80105d4 <__aeabi_fadd+0x3c>
 801078a:	3f01      	subs	r7, #1
 801078c:	2f00      	cmp	r7, #0
 801078e:	d100      	bne.n	8010792 <__aeabi_fadd+0x1fa>
 8010790:	e758      	b.n	8010644 <__aeabi_fadd+0xac>
 8010792:	2cff      	cmp	r4, #255	; 0xff
 8010794:	d000      	beq.n	8010798 <__aeabi_fadd+0x200>
 8010796:	e74a      	b.n	801062e <__aeabi_fadd+0x96>
 8010798:	e7a7      	b.n	80106ea <__aeabi_fadd+0x152>
 801079a:	1b5e      	subs	r6, r3, r5
 801079c:	4689      	mov	r9, r1
 801079e:	e776      	b.n	801068e <__aeabi_fadd+0xf6>
 80107a0:	2d00      	cmp	r5, #0
 80107a2:	d11c      	bne.n	80107de <__aeabi_fadd+0x246>
 80107a4:	000a      	movs	r2, r1
 80107a6:	28ff      	cmp	r0, #255	; 0xff
 80107a8:	d01f      	beq.n	80107ea <__aeabi_fadd+0x252>
 80107aa:	0004      	movs	r4, r0
 80107ac:	001d      	movs	r5, r3
 80107ae:	e711      	b.n	80105d4 <__aeabi_fadd+0x3c>
 80107b0:	2d00      	cmp	r5, #0
 80107b2:	d15d      	bne.n	8010870 <__aeabi_fadd+0x2d8>
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d117      	bne.n	80107e8 <__aeabi_fadd+0x250>
 80107b8:	2380      	movs	r3, #128	; 0x80
 80107ba:	2200      	movs	r2, #0
 80107bc:	03db      	lsls	r3, r3, #15
 80107be:	26ff      	movs	r6, #255	; 0xff
 80107c0:	e70f      	b.n	80105e2 <__aeabi_fadd+0x4a>
 80107c2:	000a      	movs	r2, r1
 80107c4:	26ff      	movs	r6, #255	; 0xff
 80107c6:	2300      	movs	r3, #0
 80107c8:	e70b      	b.n	80105e2 <__aeabi_fadd+0x4a>
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	d121      	bne.n	8010812 <__aeabi_fadd+0x27a>
 80107ce:	2d00      	cmp	r5, #0
 80107d0:	d166      	bne.n	80108a0 <__aeabi_fadd+0x308>
 80107d2:	28ff      	cmp	r0, #255	; 0xff
 80107d4:	d1e9      	bne.n	80107aa <__aeabi_fadd+0x212>
 80107d6:	001d      	movs	r5, r3
 80107d8:	e787      	b.n	80106ea <__aeabi_fadd+0x152>
 80107da:	2301      	movs	r3, #1
 80107dc:	e752      	b.n	8010684 <__aeabi_fadd+0xec>
 80107de:	1c7a      	adds	r2, r7, #1
 80107e0:	d0a7      	beq.n	8010732 <__aeabi_fadd+0x19a>
 80107e2:	43fa      	mvns	r2, r7
 80107e4:	28ff      	cmp	r0, #255	; 0xff
 80107e6:	d199      	bne.n	801071c <__aeabi_fadd+0x184>
 80107e8:	000a      	movs	r2, r1
 80107ea:	001d      	movs	r5, r3
 80107ec:	24ff      	movs	r4, #255	; 0xff
 80107ee:	e6f1      	b.n	80105d4 <__aeabi_fadd+0x3c>
 80107f0:	2e00      	cmp	r6, #0
 80107f2:	d121      	bne.n	8010838 <__aeabi_fadd+0x2a0>
 80107f4:	2d00      	cmp	r5, #0
 80107f6:	d04f      	beq.n	8010898 <__aeabi_fadd+0x300>
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d04c      	beq.n	8010896 <__aeabi_fadd+0x2fe>
 80107fc:	18ed      	adds	r5, r5, r3
 80107fe:	016b      	lsls	r3, r5, #5
 8010800:	d59e      	bpl.n	8010740 <__aeabi_fadd+0x1a8>
 8010802:	4b31      	ldr	r3, [pc, #196]	; (80108c8 <__aeabi_fadd+0x330>)
 8010804:	3607      	adds	r6, #7
 8010806:	402e      	ands	r6, r5
 8010808:	2401      	movs	r4, #1
 801080a:	401d      	ands	r5, r3
 801080c:	e754      	b.n	80106b8 <__aeabi_fadd+0x120>
 801080e:	2301      	movs	r3, #1
 8010810:	e718      	b.n	8010644 <__aeabi_fadd+0xac>
 8010812:	28ff      	cmp	r0, #255	; 0xff
 8010814:	d0df      	beq.n	80107d6 <__aeabi_fadd+0x23e>
 8010816:	2480      	movs	r4, #128	; 0x80
 8010818:	04e4      	lsls	r4, r4, #19
 801081a:	427f      	negs	r7, r7
 801081c:	4325      	orrs	r5, r4
 801081e:	2f1b      	cmp	r7, #27
 8010820:	dc4d      	bgt.n	80108be <__aeabi_fadd+0x326>
 8010822:	2620      	movs	r6, #32
 8010824:	1bf6      	subs	r6, r6, r7
 8010826:	002c      	movs	r4, r5
 8010828:	40b5      	lsls	r5, r6
 801082a:	40fc      	lsrs	r4, r7
 801082c:	1e6a      	subs	r2, r5, #1
 801082e:	4195      	sbcs	r5, r2
 8010830:	4325      	orrs	r5, r4
 8010832:	18ed      	adds	r5, r5, r3
 8010834:	0004      	movs	r4, r0
 8010836:	e706      	b.n	8010646 <__aeabi_fadd+0xae>
 8010838:	2d00      	cmp	r5, #0
 801083a:	d0cc      	beq.n	80107d6 <__aeabi_fadd+0x23e>
 801083c:	2b00      	cmp	r3, #0
 801083e:	d100      	bne.n	8010842 <__aeabi_fadd+0x2aa>
 8010840:	e753      	b.n	80106ea <__aeabi_fadd+0x152>
 8010842:	2180      	movs	r1, #128	; 0x80
 8010844:	4660      	mov	r0, ip
 8010846:	03c9      	lsls	r1, r1, #15
 8010848:	4208      	tst	r0, r1
 801084a:	d003      	beq.n	8010854 <__aeabi_fadd+0x2bc>
 801084c:	4640      	mov	r0, r8
 801084e:	4208      	tst	r0, r1
 8010850:	d100      	bne.n	8010854 <__aeabi_fadd+0x2bc>
 8010852:	001d      	movs	r5, r3
 8010854:	2101      	movs	r1, #1
 8010856:	4011      	ands	r1, r2
 8010858:	e747      	b.n	80106ea <__aeabi_fadd+0x152>
 801085a:	2b00      	cmp	r3, #0
 801085c:	d100      	bne.n	8010860 <__aeabi_fadd+0x2c8>
 801085e:	e6b9      	b.n	80105d4 <__aeabi_fadd+0x3c>
 8010860:	1aea      	subs	r2, r5, r3
 8010862:	0150      	lsls	r0, r2, #5
 8010864:	d525      	bpl.n	80108b2 <__aeabi_fadd+0x31a>
 8010866:	2607      	movs	r6, #7
 8010868:	1b5d      	subs	r5, r3, r5
 801086a:	402e      	ands	r6, r5
 801086c:	4689      	mov	r9, r1
 801086e:	e723      	b.n	80106b8 <__aeabi_fadd+0x120>
 8010870:	24ff      	movs	r4, #255	; 0xff
 8010872:	2b00      	cmp	r3, #0
 8010874:	d100      	bne.n	8010878 <__aeabi_fadd+0x2e0>
 8010876:	e6ad      	b.n	80105d4 <__aeabi_fadd+0x3c>
 8010878:	2280      	movs	r2, #128	; 0x80
 801087a:	4660      	mov	r0, ip
 801087c:	03d2      	lsls	r2, r2, #15
 801087e:	4210      	tst	r0, r2
 8010880:	d004      	beq.n	801088c <__aeabi_fadd+0x2f4>
 8010882:	4640      	mov	r0, r8
 8010884:	4210      	tst	r0, r2
 8010886:	d101      	bne.n	801088c <__aeabi_fadd+0x2f4>
 8010888:	001d      	movs	r5, r3
 801088a:	4689      	mov	r9, r1
 801088c:	2201      	movs	r2, #1
 801088e:	464b      	mov	r3, r9
 8010890:	24ff      	movs	r4, #255	; 0xff
 8010892:	401a      	ands	r2, r3
 8010894:	e69e      	b.n	80105d4 <__aeabi_fadd+0x3c>
 8010896:	002b      	movs	r3, r5
 8010898:	08dd      	lsrs	r5, r3, #3
 801089a:	000a      	movs	r2, r1
 801089c:	2400      	movs	r4, #0
 801089e:	e69d      	b.n	80105dc <__aeabi_fadd+0x44>
 80108a0:	1c7a      	adds	r2, r7, #1
 80108a2:	d0c6      	beq.n	8010832 <__aeabi_fadd+0x29a>
 80108a4:	43ff      	mvns	r7, r7
 80108a6:	28ff      	cmp	r0, #255	; 0xff
 80108a8:	d1b9      	bne.n	801081e <__aeabi_fadd+0x286>
 80108aa:	001d      	movs	r5, r3
 80108ac:	e71d      	b.n	80106ea <__aeabi_fadd+0x152>
 80108ae:	2501      	movs	r5, #1
 80108b0:	e73f      	b.n	8010732 <__aeabi_fadd+0x19a>
 80108b2:	1e15      	subs	r5, r2, #0
 80108b4:	d000      	beq.n	80108b8 <__aeabi_fadd+0x320>
 80108b6:	e744      	b.n	8010742 <__aeabi_fadd+0x1aa>
 80108b8:	2200      	movs	r2, #0
 80108ba:	2300      	movs	r3, #0
 80108bc:	e691      	b.n	80105e2 <__aeabi_fadd+0x4a>
 80108be:	2501      	movs	r5, #1
 80108c0:	e7b7      	b.n	8010832 <__aeabi_fadd+0x29a>
 80108c2:	46c0      	nop			; (mov r8, r8)
 80108c4:	7dffffff 	.word	0x7dffffff
 80108c8:	fbffffff 	.word	0xfbffffff

080108cc <__aeabi_fdiv>:
 80108cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ce:	4657      	mov	r7, sl
 80108d0:	464e      	mov	r6, r9
 80108d2:	4645      	mov	r5, r8
 80108d4:	46de      	mov	lr, fp
 80108d6:	0244      	lsls	r4, r0, #9
 80108d8:	b5e0      	push	{r5, r6, r7, lr}
 80108da:	0046      	lsls	r6, r0, #1
 80108dc:	4688      	mov	r8, r1
 80108de:	0a64      	lsrs	r4, r4, #9
 80108e0:	0e36      	lsrs	r6, r6, #24
 80108e2:	0fc7      	lsrs	r7, r0, #31
 80108e4:	2e00      	cmp	r6, #0
 80108e6:	d063      	beq.n	80109b0 <__aeabi_fdiv+0xe4>
 80108e8:	2eff      	cmp	r6, #255	; 0xff
 80108ea:	d024      	beq.n	8010936 <__aeabi_fdiv+0x6a>
 80108ec:	2380      	movs	r3, #128	; 0x80
 80108ee:	00e4      	lsls	r4, r4, #3
 80108f0:	04db      	lsls	r3, r3, #19
 80108f2:	431c      	orrs	r4, r3
 80108f4:	2300      	movs	r3, #0
 80108f6:	4699      	mov	r9, r3
 80108f8:	469b      	mov	fp, r3
 80108fa:	3e7f      	subs	r6, #127	; 0x7f
 80108fc:	4643      	mov	r3, r8
 80108fe:	4642      	mov	r2, r8
 8010900:	025d      	lsls	r5, r3, #9
 8010902:	0fd2      	lsrs	r2, r2, #31
 8010904:	005b      	lsls	r3, r3, #1
 8010906:	0a6d      	lsrs	r5, r5, #9
 8010908:	0e1b      	lsrs	r3, r3, #24
 801090a:	4690      	mov	r8, r2
 801090c:	4692      	mov	sl, r2
 801090e:	d065      	beq.n	80109dc <__aeabi_fdiv+0x110>
 8010910:	2bff      	cmp	r3, #255	; 0xff
 8010912:	d055      	beq.n	80109c0 <__aeabi_fdiv+0xf4>
 8010914:	2280      	movs	r2, #128	; 0x80
 8010916:	2100      	movs	r1, #0
 8010918:	00ed      	lsls	r5, r5, #3
 801091a:	04d2      	lsls	r2, r2, #19
 801091c:	3b7f      	subs	r3, #127	; 0x7f
 801091e:	4315      	orrs	r5, r2
 8010920:	1af6      	subs	r6, r6, r3
 8010922:	4643      	mov	r3, r8
 8010924:	464a      	mov	r2, r9
 8010926:	407b      	eors	r3, r7
 8010928:	2a0f      	cmp	r2, #15
 801092a:	d900      	bls.n	801092e <__aeabi_fdiv+0x62>
 801092c:	e08d      	b.n	8010a4a <__aeabi_fdiv+0x17e>
 801092e:	486d      	ldr	r0, [pc, #436]	; (8010ae4 <__aeabi_fdiv+0x218>)
 8010930:	0092      	lsls	r2, r2, #2
 8010932:	5882      	ldr	r2, [r0, r2]
 8010934:	4697      	mov	pc, r2
 8010936:	2c00      	cmp	r4, #0
 8010938:	d154      	bne.n	80109e4 <__aeabi_fdiv+0x118>
 801093a:	2308      	movs	r3, #8
 801093c:	4699      	mov	r9, r3
 801093e:	3b06      	subs	r3, #6
 8010940:	26ff      	movs	r6, #255	; 0xff
 8010942:	469b      	mov	fp, r3
 8010944:	e7da      	b.n	80108fc <__aeabi_fdiv+0x30>
 8010946:	2500      	movs	r5, #0
 8010948:	4653      	mov	r3, sl
 801094a:	2902      	cmp	r1, #2
 801094c:	d01b      	beq.n	8010986 <__aeabi_fdiv+0xba>
 801094e:	2903      	cmp	r1, #3
 8010950:	d100      	bne.n	8010954 <__aeabi_fdiv+0x88>
 8010952:	e0bf      	b.n	8010ad4 <__aeabi_fdiv+0x208>
 8010954:	2901      	cmp	r1, #1
 8010956:	d028      	beq.n	80109aa <__aeabi_fdiv+0xde>
 8010958:	0030      	movs	r0, r6
 801095a:	307f      	adds	r0, #127	; 0x7f
 801095c:	2800      	cmp	r0, #0
 801095e:	dd20      	ble.n	80109a2 <__aeabi_fdiv+0xd6>
 8010960:	076a      	lsls	r2, r5, #29
 8010962:	d004      	beq.n	801096e <__aeabi_fdiv+0xa2>
 8010964:	220f      	movs	r2, #15
 8010966:	402a      	ands	r2, r5
 8010968:	2a04      	cmp	r2, #4
 801096a:	d000      	beq.n	801096e <__aeabi_fdiv+0xa2>
 801096c:	3504      	adds	r5, #4
 801096e:	012a      	lsls	r2, r5, #4
 8010970:	d503      	bpl.n	801097a <__aeabi_fdiv+0xae>
 8010972:	0030      	movs	r0, r6
 8010974:	4a5c      	ldr	r2, [pc, #368]	; (8010ae8 <__aeabi_fdiv+0x21c>)
 8010976:	3080      	adds	r0, #128	; 0x80
 8010978:	4015      	ands	r5, r2
 801097a:	28fe      	cmp	r0, #254	; 0xfe
 801097c:	dc03      	bgt.n	8010986 <__aeabi_fdiv+0xba>
 801097e:	01ac      	lsls	r4, r5, #6
 8010980:	0a64      	lsrs	r4, r4, #9
 8010982:	b2c2      	uxtb	r2, r0
 8010984:	e001      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010986:	22ff      	movs	r2, #255	; 0xff
 8010988:	2400      	movs	r4, #0
 801098a:	0264      	lsls	r4, r4, #9
 801098c:	05d2      	lsls	r2, r2, #23
 801098e:	0a60      	lsrs	r0, r4, #9
 8010990:	07db      	lsls	r3, r3, #31
 8010992:	4310      	orrs	r0, r2
 8010994:	4318      	orrs	r0, r3
 8010996:	bc3c      	pop	{r2, r3, r4, r5}
 8010998:	4690      	mov	r8, r2
 801099a:	4699      	mov	r9, r3
 801099c:	46a2      	mov	sl, r4
 801099e:	46ab      	mov	fp, r5
 80109a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109a2:	2201      	movs	r2, #1
 80109a4:	1a10      	subs	r0, r2, r0
 80109a6:	281b      	cmp	r0, #27
 80109a8:	dd7c      	ble.n	8010aa4 <__aeabi_fdiv+0x1d8>
 80109aa:	2200      	movs	r2, #0
 80109ac:	2400      	movs	r4, #0
 80109ae:	e7ec      	b.n	801098a <__aeabi_fdiv+0xbe>
 80109b0:	2c00      	cmp	r4, #0
 80109b2:	d11d      	bne.n	80109f0 <__aeabi_fdiv+0x124>
 80109b4:	2304      	movs	r3, #4
 80109b6:	4699      	mov	r9, r3
 80109b8:	3b03      	subs	r3, #3
 80109ba:	2600      	movs	r6, #0
 80109bc:	469b      	mov	fp, r3
 80109be:	e79d      	b.n	80108fc <__aeabi_fdiv+0x30>
 80109c0:	3eff      	subs	r6, #255	; 0xff
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	d120      	bne.n	8010a08 <__aeabi_fdiv+0x13c>
 80109c6:	2102      	movs	r1, #2
 80109c8:	4643      	mov	r3, r8
 80109ca:	464a      	mov	r2, r9
 80109cc:	407b      	eors	r3, r7
 80109ce:	430a      	orrs	r2, r1
 80109d0:	2a0f      	cmp	r2, #15
 80109d2:	d8d8      	bhi.n	8010986 <__aeabi_fdiv+0xba>
 80109d4:	4845      	ldr	r0, [pc, #276]	; (8010aec <__aeabi_fdiv+0x220>)
 80109d6:	0092      	lsls	r2, r2, #2
 80109d8:	5882      	ldr	r2, [r0, r2]
 80109da:	4697      	mov	pc, r2
 80109dc:	2d00      	cmp	r5, #0
 80109de:	d119      	bne.n	8010a14 <__aeabi_fdiv+0x148>
 80109e0:	2101      	movs	r1, #1
 80109e2:	e7f1      	b.n	80109c8 <__aeabi_fdiv+0xfc>
 80109e4:	230c      	movs	r3, #12
 80109e6:	4699      	mov	r9, r3
 80109e8:	3b09      	subs	r3, #9
 80109ea:	26ff      	movs	r6, #255	; 0xff
 80109ec:	469b      	mov	fp, r3
 80109ee:	e785      	b.n	80108fc <__aeabi_fdiv+0x30>
 80109f0:	0020      	movs	r0, r4
 80109f2:	f000 fb73 	bl	80110dc <__clzsi2>
 80109f6:	2676      	movs	r6, #118	; 0x76
 80109f8:	1f43      	subs	r3, r0, #5
 80109fa:	409c      	lsls	r4, r3
 80109fc:	2300      	movs	r3, #0
 80109fe:	4276      	negs	r6, r6
 8010a00:	1a36      	subs	r6, r6, r0
 8010a02:	4699      	mov	r9, r3
 8010a04:	469b      	mov	fp, r3
 8010a06:	e779      	b.n	80108fc <__aeabi_fdiv+0x30>
 8010a08:	464a      	mov	r2, r9
 8010a0a:	2303      	movs	r3, #3
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	4691      	mov	r9, r2
 8010a10:	2103      	movs	r1, #3
 8010a12:	e786      	b.n	8010922 <__aeabi_fdiv+0x56>
 8010a14:	0028      	movs	r0, r5
 8010a16:	f000 fb61 	bl	80110dc <__clzsi2>
 8010a1a:	1f43      	subs	r3, r0, #5
 8010a1c:	1836      	adds	r6, r6, r0
 8010a1e:	409d      	lsls	r5, r3
 8010a20:	3676      	adds	r6, #118	; 0x76
 8010a22:	2100      	movs	r1, #0
 8010a24:	e77d      	b.n	8010922 <__aeabi_fdiv+0x56>
 8010a26:	2480      	movs	r4, #128	; 0x80
 8010a28:	2300      	movs	r3, #0
 8010a2a:	03e4      	lsls	r4, r4, #15
 8010a2c:	22ff      	movs	r2, #255	; 0xff
 8010a2e:	e7ac      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010a30:	2500      	movs	r5, #0
 8010a32:	2380      	movs	r3, #128	; 0x80
 8010a34:	03db      	lsls	r3, r3, #15
 8010a36:	421c      	tst	r4, r3
 8010a38:	d028      	beq.n	8010a8c <__aeabi_fdiv+0x1c0>
 8010a3a:	421d      	tst	r5, r3
 8010a3c:	d126      	bne.n	8010a8c <__aeabi_fdiv+0x1c0>
 8010a3e:	432b      	orrs	r3, r5
 8010a40:	025c      	lsls	r4, r3, #9
 8010a42:	0a64      	lsrs	r4, r4, #9
 8010a44:	4643      	mov	r3, r8
 8010a46:	22ff      	movs	r2, #255	; 0xff
 8010a48:	e79f      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010a4a:	0162      	lsls	r2, r4, #5
 8010a4c:	016c      	lsls	r4, r5, #5
 8010a4e:	42a2      	cmp	r2, r4
 8010a50:	d224      	bcs.n	8010a9c <__aeabi_fdiv+0x1d0>
 8010a52:	211b      	movs	r1, #27
 8010a54:	2500      	movs	r5, #0
 8010a56:	3e01      	subs	r6, #1
 8010a58:	2701      	movs	r7, #1
 8010a5a:	0010      	movs	r0, r2
 8010a5c:	006d      	lsls	r5, r5, #1
 8010a5e:	0052      	lsls	r2, r2, #1
 8010a60:	2800      	cmp	r0, #0
 8010a62:	db01      	blt.n	8010a68 <__aeabi_fdiv+0x19c>
 8010a64:	4294      	cmp	r4, r2
 8010a66:	d801      	bhi.n	8010a6c <__aeabi_fdiv+0x1a0>
 8010a68:	1b12      	subs	r2, r2, r4
 8010a6a:	433d      	orrs	r5, r7
 8010a6c:	3901      	subs	r1, #1
 8010a6e:	2900      	cmp	r1, #0
 8010a70:	d1f3      	bne.n	8010a5a <__aeabi_fdiv+0x18e>
 8010a72:	0014      	movs	r4, r2
 8010a74:	1e62      	subs	r2, r4, #1
 8010a76:	4194      	sbcs	r4, r2
 8010a78:	4325      	orrs	r5, r4
 8010a7a:	e76d      	b.n	8010958 <__aeabi_fdiv+0x8c>
 8010a7c:	46ba      	mov	sl, r7
 8010a7e:	4659      	mov	r1, fp
 8010a80:	0025      	movs	r5, r4
 8010a82:	4653      	mov	r3, sl
 8010a84:	2902      	cmp	r1, #2
 8010a86:	d000      	beq.n	8010a8a <__aeabi_fdiv+0x1be>
 8010a88:	e761      	b.n	801094e <__aeabi_fdiv+0x82>
 8010a8a:	e77c      	b.n	8010986 <__aeabi_fdiv+0xba>
 8010a8c:	2380      	movs	r3, #128	; 0x80
 8010a8e:	03db      	lsls	r3, r3, #15
 8010a90:	431c      	orrs	r4, r3
 8010a92:	0264      	lsls	r4, r4, #9
 8010a94:	0a64      	lsrs	r4, r4, #9
 8010a96:	003b      	movs	r3, r7
 8010a98:	22ff      	movs	r2, #255	; 0xff
 8010a9a:	e776      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010a9c:	1b12      	subs	r2, r2, r4
 8010a9e:	211a      	movs	r1, #26
 8010aa0:	2501      	movs	r5, #1
 8010aa2:	e7d9      	b.n	8010a58 <__aeabi_fdiv+0x18c>
 8010aa4:	369e      	adds	r6, #158	; 0x9e
 8010aa6:	002a      	movs	r2, r5
 8010aa8:	40b5      	lsls	r5, r6
 8010aaa:	002c      	movs	r4, r5
 8010aac:	40c2      	lsrs	r2, r0
 8010aae:	1e65      	subs	r5, r4, #1
 8010ab0:	41ac      	sbcs	r4, r5
 8010ab2:	4314      	orrs	r4, r2
 8010ab4:	0762      	lsls	r2, r4, #29
 8010ab6:	d004      	beq.n	8010ac2 <__aeabi_fdiv+0x1f6>
 8010ab8:	220f      	movs	r2, #15
 8010aba:	4022      	ands	r2, r4
 8010abc:	2a04      	cmp	r2, #4
 8010abe:	d000      	beq.n	8010ac2 <__aeabi_fdiv+0x1f6>
 8010ac0:	3404      	adds	r4, #4
 8010ac2:	0162      	lsls	r2, r4, #5
 8010ac4:	d403      	bmi.n	8010ace <__aeabi_fdiv+0x202>
 8010ac6:	01a4      	lsls	r4, r4, #6
 8010ac8:	0a64      	lsrs	r4, r4, #9
 8010aca:	2200      	movs	r2, #0
 8010acc:	e75d      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010ace:	2201      	movs	r2, #1
 8010ad0:	2400      	movs	r4, #0
 8010ad2:	e75a      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010ad4:	2480      	movs	r4, #128	; 0x80
 8010ad6:	03e4      	lsls	r4, r4, #15
 8010ad8:	432c      	orrs	r4, r5
 8010ada:	0264      	lsls	r4, r4, #9
 8010adc:	0a64      	lsrs	r4, r4, #9
 8010ade:	22ff      	movs	r2, #255	; 0xff
 8010ae0:	e753      	b.n	801098a <__aeabi_fdiv+0xbe>
 8010ae2:	46c0      	nop			; (mov r8, r8)
 8010ae4:	0801c928 	.word	0x0801c928
 8010ae8:	f7ffffff 	.word	0xf7ffffff
 8010aec:	0801c968 	.word	0x0801c968

08010af0 <__aeabi_fmul>:
 8010af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af2:	464e      	mov	r6, r9
 8010af4:	4657      	mov	r7, sl
 8010af6:	4645      	mov	r5, r8
 8010af8:	46de      	mov	lr, fp
 8010afa:	b5e0      	push	{r5, r6, r7, lr}
 8010afc:	0243      	lsls	r3, r0, #9
 8010afe:	0a5b      	lsrs	r3, r3, #9
 8010b00:	0045      	lsls	r5, r0, #1
 8010b02:	b083      	sub	sp, #12
 8010b04:	1c0f      	adds	r7, r1, #0
 8010b06:	4699      	mov	r9, r3
 8010b08:	0e2d      	lsrs	r5, r5, #24
 8010b0a:	0fc6      	lsrs	r6, r0, #31
 8010b0c:	2d00      	cmp	r5, #0
 8010b0e:	d057      	beq.n	8010bc0 <__aeabi_fmul+0xd0>
 8010b10:	2dff      	cmp	r5, #255	; 0xff
 8010b12:	d024      	beq.n	8010b5e <__aeabi_fmul+0x6e>
 8010b14:	2080      	movs	r0, #128	; 0x80
 8010b16:	00db      	lsls	r3, r3, #3
 8010b18:	04c0      	lsls	r0, r0, #19
 8010b1a:	4318      	orrs	r0, r3
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4681      	mov	r9, r0
 8010b20:	469a      	mov	sl, r3
 8010b22:	469b      	mov	fp, r3
 8010b24:	3d7f      	subs	r5, #127	; 0x7f
 8010b26:	027c      	lsls	r4, r7, #9
 8010b28:	007a      	lsls	r2, r7, #1
 8010b2a:	0ffb      	lsrs	r3, r7, #31
 8010b2c:	0a64      	lsrs	r4, r4, #9
 8010b2e:	0e12      	lsrs	r2, r2, #24
 8010b30:	4698      	mov	r8, r3
 8010b32:	d023      	beq.n	8010b7c <__aeabi_fmul+0x8c>
 8010b34:	2aff      	cmp	r2, #255	; 0xff
 8010b36:	d04b      	beq.n	8010bd0 <__aeabi_fmul+0xe0>
 8010b38:	00e3      	lsls	r3, r4, #3
 8010b3a:	2480      	movs	r4, #128	; 0x80
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	04e4      	lsls	r4, r4, #19
 8010b40:	3a7f      	subs	r2, #127	; 0x7f
 8010b42:	431c      	orrs	r4, r3
 8010b44:	18ad      	adds	r5, r5, r2
 8010b46:	1c6b      	adds	r3, r5, #1
 8010b48:	4647      	mov	r7, r8
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	4653      	mov	r3, sl
 8010b4e:	4077      	eors	r7, r6
 8010b50:	003a      	movs	r2, r7
 8010b52:	2b0f      	cmp	r3, #15
 8010b54:	d848      	bhi.n	8010be8 <__aeabi_fmul+0xf8>
 8010b56:	497d      	ldr	r1, [pc, #500]	; (8010d4c <__aeabi_fmul+0x25c>)
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	58cb      	ldr	r3, [r1, r3]
 8010b5c:	469f      	mov	pc, r3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d000      	beq.n	8010b64 <__aeabi_fmul+0x74>
 8010b62:	e085      	b.n	8010c70 <__aeabi_fmul+0x180>
 8010b64:	3308      	adds	r3, #8
 8010b66:	469a      	mov	sl, r3
 8010b68:	3b06      	subs	r3, #6
 8010b6a:	469b      	mov	fp, r3
 8010b6c:	027c      	lsls	r4, r7, #9
 8010b6e:	007a      	lsls	r2, r7, #1
 8010b70:	0ffb      	lsrs	r3, r7, #31
 8010b72:	25ff      	movs	r5, #255	; 0xff
 8010b74:	0a64      	lsrs	r4, r4, #9
 8010b76:	0e12      	lsrs	r2, r2, #24
 8010b78:	4698      	mov	r8, r3
 8010b7a:	d1db      	bne.n	8010b34 <__aeabi_fmul+0x44>
 8010b7c:	2c00      	cmp	r4, #0
 8010b7e:	d000      	beq.n	8010b82 <__aeabi_fmul+0x92>
 8010b80:	e090      	b.n	8010ca4 <__aeabi_fmul+0x1b4>
 8010b82:	4652      	mov	r2, sl
 8010b84:	2301      	movs	r3, #1
 8010b86:	431a      	orrs	r2, r3
 8010b88:	4692      	mov	sl, r2
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	e7db      	b.n	8010b46 <__aeabi_fmul+0x56>
 8010b8e:	464c      	mov	r4, r9
 8010b90:	4658      	mov	r0, fp
 8010b92:	0017      	movs	r7, r2
 8010b94:	2802      	cmp	r0, #2
 8010b96:	d024      	beq.n	8010be2 <__aeabi_fmul+0xf2>
 8010b98:	2803      	cmp	r0, #3
 8010b9a:	d100      	bne.n	8010b9e <__aeabi_fmul+0xae>
 8010b9c:	e0cf      	b.n	8010d3e <__aeabi_fmul+0x24e>
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	2801      	cmp	r0, #1
 8010ba4:	d14d      	bne.n	8010c42 <__aeabi_fmul+0x152>
 8010ba6:	0258      	lsls	r0, r3, #9
 8010ba8:	05d2      	lsls	r2, r2, #23
 8010baa:	0a40      	lsrs	r0, r0, #9
 8010bac:	07ff      	lsls	r7, r7, #31
 8010bae:	4310      	orrs	r0, r2
 8010bb0:	4338      	orrs	r0, r7
 8010bb2:	b003      	add	sp, #12
 8010bb4:	bc3c      	pop	{r2, r3, r4, r5}
 8010bb6:	4690      	mov	r8, r2
 8010bb8:	4699      	mov	r9, r3
 8010bba:	46a2      	mov	sl, r4
 8010bbc:	46ab      	mov	fp, r5
 8010bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d15b      	bne.n	8010c7c <__aeabi_fmul+0x18c>
 8010bc4:	2304      	movs	r3, #4
 8010bc6:	469a      	mov	sl, r3
 8010bc8:	3b03      	subs	r3, #3
 8010bca:	2500      	movs	r5, #0
 8010bcc:	469b      	mov	fp, r3
 8010bce:	e7aa      	b.n	8010b26 <__aeabi_fmul+0x36>
 8010bd0:	35ff      	adds	r5, #255	; 0xff
 8010bd2:	2c00      	cmp	r4, #0
 8010bd4:	d160      	bne.n	8010c98 <__aeabi_fmul+0x1a8>
 8010bd6:	4652      	mov	r2, sl
 8010bd8:	2302      	movs	r3, #2
 8010bda:	431a      	orrs	r2, r3
 8010bdc:	4692      	mov	sl, r2
 8010bde:	2002      	movs	r0, #2
 8010be0:	e7b1      	b.n	8010b46 <__aeabi_fmul+0x56>
 8010be2:	22ff      	movs	r2, #255	; 0xff
 8010be4:	2300      	movs	r3, #0
 8010be6:	e7de      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010be8:	464b      	mov	r3, r9
 8010bea:	0c1b      	lsrs	r3, r3, #16
 8010bec:	469c      	mov	ip, r3
 8010bee:	464b      	mov	r3, r9
 8010bf0:	0426      	lsls	r6, r4, #16
 8010bf2:	0c36      	lsrs	r6, r6, #16
 8010bf4:	0418      	lsls	r0, r3, #16
 8010bf6:	4661      	mov	r1, ip
 8010bf8:	0033      	movs	r3, r6
 8010bfa:	0c22      	lsrs	r2, r4, #16
 8010bfc:	4664      	mov	r4, ip
 8010bfe:	0c00      	lsrs	r0, r0, #16
 8010c00:	4343      	muls	r3, r0
 8010c02:	434e      	muls	r6, r1
 8010c04:	4350      	muls	r0, r2
 8010c06:	4354      	muls	r4, r2
 8010c08:	1980      	adds	r0, r0, r6
 8010c0a:	0c1a      	lsrs	r2, r3, #16
 8010c0c:	1812      	adds	r2, r2, r0
 8010c0e:	4296      	cmp	r6, r2
 8010c10:	d903      	bls.n	8010c1a <__aeabi_fmul+0x12a>
 8010c12:	2180      	movs	r1, #128	; 0x80
 8010c14:	0249      	lsls	r1, r1, #9
 8010c16:	468c      	mov	ip, r1
 8010c18:	4464      	add	r4, ip
 8010c1a:	041b      	lsls	r3, r3, #16
 8010c1c:	0c1b      	lsrs	r3, r3, #16
 8010c1e:	0410      	lsls	r0, r2, #16
 8010c20:	18c0      	adds	r0, r0, r3
 8010c22:	0183      	lsls	r3, r0, #6
 8010c24:	1e5e      	subs	r6, r3, #1
 8010c26:	41b3      	sbcs	r3, r6
 8010c28:	0e80      	lsrs	r0, r0, #26
 8010c2a:	4318      	orrs	r0, r3
 8010c2c:	0c13      	lsrs	r3, r2, #16
 8010c2e:	191b      	adds	r3, r3, r4
 8010c30:	019b      	lsls	r3, r3, #6
 8010c32:	4303      	orrs	r3, r0
 8010c34:	001c      	movs	r4, r3
 8010c36:	0123      	lsls	r3, r4, #4
 8010c38:	d579      	bpl.n	8010d2e <__aeabi_fmul+0x23e>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	0862      	lsrs	r2, r4, #1
 8010c3e:	401c      	ands	r4, r3
 8010c40:	4314      	orrs	r4, r2
 8010c42:	9a01      	ldr	r2, [sp, #4]
 8010c44:	327f      	adds	r2, #127	; 0x7f
 8010c46:	2a00      	cmp	r2, #0
 8010c48:	dd4d      	ble.n	8010ce6 <__aeabi_fmul+0x1f6>
 8010c4a:	0763      	lsls	r3, r4, #29
 8010c4c:	d004      	beq.n	8010c58 <__aeabi_fmul+0x168>
 8010c4e:	230f      	movs	r3, #15
 8010c50:	4023      	ands	r3, r4
 8010c52:	2b04      	cmp	r3, #4
 8010c54:	d000      	beq.n	8010c58 <__aeabi_fmul+0x168>
 8010c56:	3404      	adds	r4, #4
 8010c58:	0123      	lsls	r3, r4, #4
 8010c5a:	d503      	bpl.n	8010c64 <__aeabi_fmul+0x174>
 8010c5c:	4b3c      	ldr	r3, [pc, #240]	; (8010d50 <__aeabi_fmul+0x260>)
 8010c5e:	9a01      	ldr	r2, [sp, #4]
 8010c60:	401c      	ands	r4, r3
 8010c62:	3280      	adds	r2, #128	; 0x80
 8010c64:	2afe      	cmp	r2, #254	; 0xfe
 8010c66:	dcbc      	bgt.n	8010be2 <__aeabi_fmul+0xf2>
 8010c68:	01a3      	lsls	r3, r4, #6
 8010c6a:	0a5b      	lsrs	r3, r3, #9
 8010c6c:	b2d2      	uxtb	r2, r2
 8010c6e:	e79a      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010c70:	230c      	movs	r3, #12
 8010c72:	469a      	mov	sl, r3
 8010c74:	3b09      	subs	r3, #9
 8010c76:	25ff      	movs	r5, #255	; 0xff
 8010c78:	469b      	mov	fp, r3
 8010c7a:	e754      	b.n	8010b26 <__aeabi_fmul+0x36>
 8010c7c:	0018      	movs	r0, r3
 8010c7e:	f000 fa2d 	bl	80110dc <__clzsi2>
 8010c82:	464a      	mov	r2, r9
 8010c84:	1f43      	subs	r3, r0, #5
 8010c86:	2576      	movs	r5, #118	; 0x76
 8010c88:	409a      	lsls	r2, r3
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	426d      	negs	r5, r5
 8010c8e:	4691      	mov	r9, r2
 8010c90:	1a2d      	subs	r5, r5, r0
 8010c92:	469a      	mov	sl, r3
 8010c94:	469b      	mov	fp, r3
 8010c96:	e746      	b.n	8010b26 <__aeabi_fmul+0x36>
 8010c98:	4652      	mov	r2, sl
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	431a      	orrs	r2, r3
 8010c9e:	4692      	mov	sl, r2
 8010ca0:	2003      	movs	r0, #3
 8010ca2:	e750      	b.n	8010b46 <__aeabi_fmul+0x56>
 8010ca4:	0020      	movs	r0, r4
 8010ca6:	f000 fa19 	bl	80110dc <__clzsi2>
 8010caa:	1f43      	subs	r3, r0, #5
 8010cac:	1a2d      	subs	r5, r5, r0
 8010cae:	409c      	lsls	r4, r3
 8010cb0:	3d76      	subs	r5, #118	; 0x76
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	e747      	b.n	8010b46 <__aeabi_fmul+0x56>
 8010cb6:	2380      	movs	r3, #128	; 0x80
 8010cb8:	2700      	movs	r7, #0
 8010cba:	03db      	lsls	r3, r3, #15
 8010cbc:	22ff      	movs	r2, #255	; 0xff
 8010cbe:	e772      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010cc0:	4642      	mov	r2, r8
 8010cc2:	e766      	b.n	8010b92 <__aeabi_fmul+0xa2>
 8010cc4:	464c      	mov	r4, r9
 8010cc6:	0032      	movs	r2, r6
 8010cc8:	4658      	mov	r0, fp
 8010cca:	e762      	b.n	8010b92 <__aeabi_fmul+0xa2>
 8010ccc:	2380      	movs	r3, #128	; 0x80
 8010cce:	464a      	mov	r2, r9
 8010cd0:	03db      	lsls	r3, r3, #15
 8010cd2:	421a      	tst	r2, r3
 8010cd4:	d022      	beq.n	8010d1c <__aeabi_fmul+0x22c>
 8010cd6:	421c      	tst	r4, r3
 8010cd8:	d120      	bne.n	8010d1c <__aeabi_fmul+0x22c>
 8010cda:	4323      	orrs	r3, r4
 8010cdc:	025b      	lsls	r3, r3, #9
 8010cde:	0a5b      	lsrs	r3, r3, #9
 8010ce0:	4647      	mov	r7, r8
 8010ce2:	22ff      	movs	r2, #255	; 0xff
 8010ce4:	e75f      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	1a9a      	subs	r2, r3, r2
 8010cea:	2a1b      	cmp	r2, #27
 8010cec:	dc21      	bgt.n	8010d32 <__aeabi_fmul+0x242>
 8010cee:	0023      	movs	r3, r4
 8010cf0:	9901      	ldr	r1, [sp, #4]
 8010cf2:	40d3      	lsrs	r3, r2
 8010cf4:	319e      	adds	r1, #158	; 0x9e
 8010cf6:	408c      	lsls	r4, r1
 8010cf8:	001a      	movs	r2, r3
 8010cfa:	0023      	movs	r3, r4
 8010cfc:	1e5c      	subs	r4, r3, #1
 8010cfe:	41a3      	sbcs	r3, r4
 8010d00:	4313      	orrs	r3, r2
 8010d02:	075a      	lsls	r2, r3, #29
 8010d04:	d004      	beq.n	8010d10 <__aeabi_fmul+0x220>
 8010d06:	220f      	movs	r2, #15
 8010d08:	401a      	ands	r2, r3
 8010d0a:	2a04      	cmp	r2, #4
 8010d0c:	d000      	beq.n	8010d10 <__aeabi_fmul+0x220>
 8010d0e:	3304      	adds	r3, #4
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	d411      	bmi.n	8010d38 <__aeabi_fmul+0x248>
 8010d14:	019b      	lsls	r3, r3, #6
 8010d16:	0a5b      	lsrs	r3, r3, #9
 8010d18:	2200      	movs	r2, #0
 8010d1a:	e744      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010d1c:	2380      	movs	r3, #128	; 0x80
 8010d1e:	464a      	mov	r2, r9
 8010d20:	03db      	lsls	r3, r3, #15
 8010d22:	4313      	orrs	r3, r2
 8010d24:	025b      	lsls	r3, r3, #9
 8010d26:	0a5b      	lsrs	r3, r3, #9
 8010d28:	0037      	movs	r7, r6
 8010d2a:	22ff      	movs	r2, #255	; 0xff
 8010d2c:	e73b      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010d2e:	9501      	str	r5, [sp, #4]
 8010d30:	e787      	b.n	8010c42 <__aeabi_fmul+0x152>
 8010d32:	2200      	movs	r2, #0
 8010d34:	2300      	movs	r3, #0
 8010d36:	e736      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010d38:	2201      	movs	r2, #1
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	e733      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010d3e:	2380      	movs	r3, #128	; 0x80
 8010d40:	03db      	lsls	r3, r3, #15
 8010d42:	4323      	orrs	r3, r4
 8010d44:	025b      	lsls	r3, r3, #9
 8010d46:	0a5b      	lsrs	r3, r3, #9
 8010d48:	22ff      	movs	r2, #255	; 0xff
 8010d4a:	e72c      	b.n	8010ba6 <__aeabi_fmul+0xb6>
 8010d4c:	0801c9a8 	.word	0x0801c9a8
 8010d50:	f7ffffff 	.word	0xf7ffffff

08010d54 <__aeabi_fsub>:
 8010d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d56:	4647      	mov	r7, r8
 8010d58:	46ce      	mov	lr, r9
 8010d5a:	0044      	lsls	r4, r0, #1
 8010d5c:	0fc2      	lsrs	r2, r0, #31
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	0247      	lsls	r7, r0, #9
 8010d62:	0248      	lsls	r0, r1, #9
 8010d64:	0a40      	lsrs	r0, r0, #9
 8010d66:	4684      	mov	ip, r0
 8010d68:	4666      	mov	r6, ip
 8010d6a:	0048      	lsls	r0, r1, #1
 8010d6c:	0a7f      	lsrs	r7, r7, #9
 8010d6e:	0e24      	lsrs	r4, r4, #24
 8010d70:	00f6      	lsls	r6, r6, #3
 8010d72:	0025      	movs	r5, r4
 8010d74:	4690      	mov	r8, r2
 8010d76:	00fb      	lsls	r3, r7, #3
 8010d78:	0e00      	lsrs	r0, r0, #24
 8010d7a:	0fc9      	lsrs	r1, r1, #31
 8010d7c:	46b1      	mov	r9, r6
 8010d7e:	28ff      	cmp	r0, #255	; 0xff
 8010d80:	d100      	bne.n	8010d84 <__aeabi_fsub+0x30>
 8010d82:	e085      	b.n	8010e90 <__aeabi_fsub+0x13c>
 8010d84:	2601      	movs	r6, #1
 8010d86:	4071      	eors	r1, r6
 8010d88:	1a26      	subs	r6, r4, r0
 8010d8a:	4291      	cmp	r1, r2
 8010d8c:	d057      	beq.n	8010e3e <__aeabi_fsub+0xea>
 8010d8e:	2e00      	cmp	r6, #0
 8010d90:	dd43      	ble.n	8010e1a <__aeabi_fsub+0xc6>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d000      	beq.n	8010d98 <__aeabi_fsub+0x44>
 8010d96:	e07f      	b.n	8010e98 <__aeabi_fsub+0x144>
 8010d98:	4649      	mov	r1, r9
 8010d9a:	2900      	cmp	r1, #0
 8010d9c:	d100      	bne.n	8010da0 <__aeabi_fsub+0x4c>
 8010d9e:	e0aa      	b.n	8010ef6 <__aeabi_fsub+0x1a2>
 8010da0:	3e01      	subs	r6, #1
 8010da2:	2e00      	cmp	r6, #0
 8010da4:	d000      	beq.n	8010da8 <__aeabi_fsub+0x54>
 8010da6:	e0f7      	b.n	8010f98 <__aeabi_fsub+0x244>
 8010da8:	1a5b      	subs	r3, r3, r1
 8010daa:	015a      	lsls	r2, r3, #5
 8010dac:	d400      	bmi.n	8010db0 <__aeabi_fsub+0x5c>
 8010dae:	e08b      	b.n	8010ec8 <__aeabi_fsub+0x174>
 8010db0:	019b      	lsls	r3, r3, #6
 8010db2:	099c      	lsrs	r4, r3, #6
 8010db4:	0020      	movs	r0, r4
 8010db6:	f000 f991 	bl	80110dc <__clzsi2>
 8010dba:	3805      	subs	r0, #5
 8010dbc:	4084      	lsls	r4, r0
 8010dbe:	4285      	cmp	r5, r0
 8010dc0:	dd00      	ble.n	8010dc4 <__aeabi_fsub+0x70>
 8010dc2:	e0d3      	b.n	8010f6c <__aeabi_fsub+0x218>
 8010dc4:	1b45      	subs	r5, r0, r5
 8010dc6:	0023      	movs	r3, r4
 8010dc8:	2020      	movs	r0, #32
 8010dca:	3501      	adds	r5, #1
 8010dcc:	40eb      	lsrs	r3, r5
 8010dce:	1b45      	subs	r5, r0, r5
 8010dd0:	40ac      	lsls	r4, r5
 8010dd2:	1e62      	subs	r2, r4, #1
 8010dd4:	4194      	sbcs	r4, r2
 8010dd6:	4323      	orrs	r3, r4
 8010dd8:	2407      	movs	r4, #7
 8010dda:	2500      	movs	r5, #0
 8010ddc:	401c      	ands	r4, r3
 8010dde:	2201      	movs	r2, #1
 8010de0:	4641      	mov	r1, r8
 8010de2:	400a      	ands	r2, r1
 8010de4:	2c00      	cmp	r4, #0
 8010de6:	d004      	beq.n	8010df2 <__aeabi_fsub+0x9e>
 8010de8:	210f      	movs	r1, #15
 8010dea:	4019      	ands	r1, r3
 8010dec:	2904      	cmp	r1, #4
 8010dee:	d000      	beq.n	8010df2 <__aeabi_fsub+0x9e>
 8010df0:	3304      	adds	r3, #4
 8010df2:	0159      	lsls	r1, r3, #5
 8010df4:	d400      	bmi.n	8010df8 <__aeabi_fsub+0xa4>
 8010df6:	e080      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010df8:	3501      	adds	r5, #1
 8010dfa:	b2ec      	uxtb	r4, r5
 8010dfc:	2dff      	cmp	r5, #255	; 0xff
 8010dfe:	d000      	beq.n	8010e02 <__aeabi_fsub+0xae>
 8010e00:	e0a3      	b.n	8010f4a <__aeabi_fsub+0x1f6>
 8010e02:	24ff      	movs	r4, #255	; 0xff
 8010e04:	2300      	movs	r3, #0
 8010e06:	025b      	lsls	r3, r3, #9
 8010e08:	05e4      	lsls	r4, r4, #23
 8010e0a:	0a58      	lsrs	r0, r3, #9
 8010e0c:	07d2      	lsls	r2, r2, #31
 8010e0e:	4320      	orrs	r0, r4
 8010e10:	4310      	orrs	r0, r2
 8010e12:	bc0c      	pop	{r2, r3}
 8010e14:	4690      	mov	r8, r2
 8010e16:	4699      	mov	r9, r3
 8010e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e1a:	2e00      	cmp	r6, #0
 8010e1c:	d174      	bne.n	8010f08 <__aeabi_fsub+0x1b4>
 8010e1e:	1c60      	adds	r0, r4, #1
 8010e20:	b2c0      	uxtb	r0, r0
 8010e22:	2801      	cmp	r0, #1
 8010e24:	dc00      	bgt.n	8010e28 <__aeabi_fsub+0xd4>
 8010e26:	e0a7      	b.n	8010f78 <__aeabi_fsub+0x224>
 8010e28:	464a      	mov	r2, r9
 8010e2a:	1a9c      	subs	r4, r3, r2
 8010e2c:	0162      	lsls	r2, r4, #5
 8010e2e:	d500      	bpl.n	8010e32 <__aeabi_fsub+0xde>
 8010e30:	e0b6      	b.n	8010fa0 <__aeabi_fsub+0x24c>
 8010e32:	2c00      	cmp	r4, #0
 8010e34:	d1be      	bne.n	8010db4 <__aeabi_fsub+0x60>
 8010e36:	2200      	movs	r2, #0
 8010e38:	2400      	movs	r4, #0
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	e7e3      	b.n	8010e06 <__aeabi_fsub+0xb2>
 8010e3e:	2e00      	cmp	r6, #0
 8010e40:	dc00      	bgt.n	8010e44 <__aeabi_fsub+0xf0>
 8010e42:	e085      	b.n	8010f50 <__aeabi_fsub+0x1fc>
 8010e44:	2800      	cmp	r0, #0
 8010e46:	d046      	beq.n	8010ed6 <__aeabi_fsub+0x182>
 8010e48:	2cff      	cmp	r4, #255	; 0xff
 8010e4a:	d049      	beq.n	8010ee0 <__aeabi_fsub+0x18c>
 8010e4c:	2280      	movs	r2, #128	; 0x80
 8010e4e:	4648      	mov	r0, r9
 8010e50:	04d2      	lsls	r2, r2, #19
 8010e52:	4310      	orrs	r0, r2
 8010e54:	4681      	mov	r9, r0
 8010e56:	2201      	movs	r2, #1
 8010e58:	2e1b      	cmp	r6, #27
 8010e5a:	dc09      	bgt.n	8010e70 <__aeabi_fsub+0x11c>
 8010e5c:	2020      	movs	r0, #32
 8010e5e:	464c      	mov	r4, r9
 8010e60:	1b80      	subs	r0, r0, r6
 8010e62:	4084      	lsls	r4, r0
 8010e64:	464a      	mov	r2, r9
 8010e66:	0020      	movs	r0, r4
 8010e68:	40f2      	lsrs	r2, r6
 8010e6a:	1e44      	subs	r4, r0, #1
 8010e6c:	41a0      	sbcs	r0, r4
 8010e6e:	4302      	orrs	r2, r0
 8010e70:	189b      	adds	r3, r3, r2
 8010e72:	015a      	lsls	r2, r3, #5
 8010e74:	d528      	bpl.n	8010ec8 <__aeabi_fsub+0x174>
 8010e76:	3501      	adds	r5, #1
 8010e78:	2dff      	cmp	r5, #255	; 0xff
 8010e7a:	d100      	bne.n	8010e7e <__aeabi_fsub+0x12a>
 8010e7c:	e0a8      	b.n	8010fd0 <__aeabi_fsub+0x27c>
 8010e7e:	2201      	movs	r2, #1
 8010e80:	2407      	movs	r4, #7
 8010e82:	4994      	ldr	r1, [pc, #592]	; (80110d4 <__aeabi_fsub+0x380>)
 8010e84:	401a      	ands	r2, r3
 8010e86:	085b      	lsrs	r3, r3, #1
 8010e88:	400b      	ands	r3, r1
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	401c      	ands	r4, r3
 8010e8e:	e7a6      	b.n	8010dde <__aeabi_fsub+0x8a>
 8010e90:	2e00      	cmp	r6, #0
 8010e92:	d000      	beq.n	8010e96 <__aeabi_fsub+0x142>
 8010e94:	e778      	b.n	8010d88 <__aeabi_fsub+0x34>
 8010e96:	e775      	b.n	8010d84 <__aeabi_fsub+0x30>
 8010e98:	2cff      	cmp	r4, #255	; 0xff
 8010e9a:	d054      	beq.n	8010f46 <__aeabi_fsub+0x1f2>
 8010e9c:	2280      	movs	r2, #128	; 0x80
 8010e9e:	4649      	mov	r1, r9
 8010ea0:	04d2      	lsls	r2, r2, #19
 8010ea2:	4311      	orrs	r1, r2
 8010ea4:	4689      	mov	r9, r1
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	2e1b      	cmp	r6, #27
 8010eaa:	dc09      	bgt.n	8010ec0 <__aeabi_fsub+0x16c>
 8010eac:	2120      	movs	r1, #32
 8010eae:	4648      	mov	r0, r9
 8010eb0:	1b89      	subs	r1, r1, r6
 8010eb2:	4088      	lsls	r0, r1
 8010eb4:	464a      	mov	r2, r9
 8010eb6:	0001      	movs	r1, r0
 8010eb8:	40f2      	lsrs	r2, r6
 8010eba:	1e48      	subs	r0, r1, #1
 8010ebc:	4181      	sbcs	r1, r0
 8010ebe:	430a      	orrs	r2, r1
 8010ec0:	1a9b      	subs	r3, r3, r2
 8010ec2:	015a      	lsls	r2, r3, #5
 8010ec4:	d500      	bpl.n	8010ec8 <__aeabi_fsub+0x174>
 8010ec6:	e773      	b.n	8010db0 <__aeabi_fsub+0x5c>
 8010ec8:	2201      	movs	r2, #1
 8010eca:	4641      	mov	r1, r8
 8010ecc:	400a      	ands	r2, r1
 8010ece:	0759      	lsls	r1, r3, #29
 8010ed0:	d000      	beq.n	8010ed4 <__aeabi_fsub+0x180>
 8010ed2:	e789      	b.n	8010de8 <__aeabi_fsub+0x94>
 8010ed4:	e011      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010ed6:	4648      	mov	r0, r9
 8010ed8:	2800      	cmp	r0, #0
 8010eda:	d158      	bne.n	8010f8e <__aeabi_fsub+0x23a>
 8010edc:	2cff      	cmp	r4, #255	; 0xff
 8010ede:	d10c      	bne.n	8010efa <__aeabi_fsub+0x1a6>
 8010ee0:	08db      	lsrs	r3, r3, #3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d100      	bne.n	8010ee8 <__aeabi_fsub+0x194>
 8010ee6:	e78c      	b.n	8010e02 <__aeabi_fsub+0xae>
 8010ee8:	2080      	movs	r0, #128	; 0x80
 8010eea:	03c0      	lsls	r0, r0, #15
 8010eec:	4303      	orrs	r3, r0
 8010eee:	025b      	lsls	r3, r3, #9
 8010ef0:	0a5b      	lsrs	r3, r3, #9
 8010ef2:	24ff      	movs	r4, #255	; 0xff
 8010ef4:	e787      	b.n	8010e06 <__aeabi_fsub+0xb2>
 8010ef6:	2cff      	cmp	r4, #255	; 0xff
 8010ef8:	d025      	beq.n	8010f46 <__aeabi_fsub+0x1f2>
 8010efa:	08db      	lsrs	r3, r3, #3
 8010efc:	2dff      	cmp	r5, #255	; 0xff
 8010efe:	d0f0      	beq.n	8010ee2 <__aeabi_fsub+0x18e>
 8010f00:	025b      	lsls	r3, r3, #9
 8010f02:	0a5b      	lsrs	r3, r3, #9
 8010f04:	b2ec      	uxtb	r4, r5
 8010f06:	e77e      	b.n	8010e06 <__aeabi_fsub+0xb2>
 8010f08:	2c00      	cmp	r4, #0
 8010f0a:	d04d      	beq.n	8010fa8 <__aeabi_fsub+0x254>
 8010f0c:	28ff      	cmp	r0, #255	; 0xff
 8010f0e:	d018      	beq.n	8010f42 <__aeabi_fsub+0x1ee>
 8010f10:	2480      	movs	r4, #128	; 0x80
 8010f12:	04e4      	lsls	r4, r4, #19
 8010f14:	4272      	negs	r2, r6
 8010f16:	4323      	orrs	r3, r4
 8010f18:	2a1b      	cmp	r2, #27
 8010f1a:	dd00      	ble.n	8010f1e <__aeabi_fsub+0x1ca>
 8010f1c:	e0c4      	b.n	80110a8 <__aeabi_fsub+0x354>
 8010f1e:	001c      	movs	r4, r3
 8010f20:	2520      	movs	r5, #32
 8010f22:	40d4      	lsrs	r4, r2
 8010f24:	1aaa      	subs	r2, r5, r2
 8010f26:	4093      	lsls	r3, r2
 8010f28:	1e5a      	subs	r2, r3, #1
 8010f2a:	4193      	sbcs	r3, r2
 8010f2c:	4323      	orrs	r3, r4
 8010f2e:	464a      	mov	r2, r9
 8010f30:	0005      	movs	r5, r0
 8010f32:	1ad3      	subs	r3, r2, r3
 8010f34:	4688      	mov	r8, r1
 8010f36:	e738      	b.n	8010daa <__aeabi_fsub+0x56>
 8010f38:	1c72      	adds	r2, r6, #1
 8010f3a:	d0f8      	beq.n	8010f2e <__aeabi_fsub+0x1da>
 8010f3c:	43f2      	mvns	r2, r6
 8010f3e:	28ff      	cmp	r0, #255	; 0xff
 8010f40:	d1ea      	bne.n	8010f18 <__aeabi_fsub+0x1c4>
 8010f42:	000a      	movs	r2, r1
 8010f44:	464b      	mov	r3, r9
 8010f46:	25ff      	movs	r5, #255	; 0xff
 8010f48:	e7d7      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010f4a:	019b      	lsls	r3, r3, #6
 8010f4c:	0a5b      	lsrs	r3, r3, #9
 8010f4e:	e75a      	b.n	8010e06 <__aeabi_fsub+0xb2>
 8010f50:	2e00      	cmp	r6, #0
 8010f52:	d141      	bne.n	8010fd8 <__aeabi_fsub+0x284>
 8010f54:	1c65      	adds	r5, r4, #1
 8010f56:	b2e9      	uxtb	r1, r5
 8010f58:	2901      	cmp	r1, #1
 8010f5a:	dd45      	ble.n	8010fe8 <__aeabi_fsub+0x294>
 8010f5c:	2dff      	cmp	r5, #255	; 0xff
 8010f5e:	d100      	bne.n	8010f62 <__aeabi_fsub+0x20e>
 8010f60:	e74f      	b.n	8010e02 <__aeabi_fsub+0xae>
 8010f62:	2407      	movs	r4, #7
 8010f64:	444b      	add	r3, r9
 8010f66:	085b      	lsrs	r3, r3, #1
 8010f68:	401c      	ands	r4, r3
 8010f6a:	e738      	b.n	8010dde <__aeabi_fsub+0x8a>
 8010f6c:	2207      	movs	r2, #7
 8010f6e:	4b5a      	ldr	r3, [pc, #360]	; (80110d8 <__aeabi_fsub+0x384>)
 8010f70:	1a2d      	subs	r5, r5, r0
 8010f72:	4023      	ands	r3, r4
 8010f74:	4014      	ands	r4, r2
 8010f76:	e732      	b.n	8010dde <__aeabi_fsub+0x8a>
 8010f78:	2c00      	cmp	r4, #0
 8010f7a:	d11d      	bne.n	8010fb8 <__aeabi_fsub+0x264>
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d17a      	bne.n	8011076 <__aeabi_fsub+0x322>
 8010f80:	464b      	mov	r3, r9
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d100      	bne.n	8010f88 <__aeabi_fsub+0x234>
 8010f86:	e091      	b.n	80110ac <__aeabi_fsub+0x358>
 8010f88:	000a      	movs	r2, r1
 8010f8a:	2500      	movs	r5, #0
 8010f8c:	e7b5      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010f8e:	3e01      	subs	r6, #1
 8010f90:	2e00      	cmp	r6, #0
 8010f92:	d119      	bne.n	8010fc8 <__aeabi_fsub+0x274>
 8010f94:	444b      	add	r3, r9
 8010f96:	e76c      	b.n	8010e72 <__aeabi_fsub+0x11e>
 8010f98:	2cff      	cmp	r4, #255	; 0xff
 8010f9a:	d184      	bne.n	8010ea6 <__aeabi_fsub+0x152>
 8010f9c:	25ff      	movs	r5, #255	; 0xff
 8010f9e:	e7ac      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010fa0:	464a      	mov	r2, r9
 8010fa2:	4688      	mov	r8, r1
 8010fa4:	1ad4      	subs	r4, r2, r3
 8010fa6:	e705      	b.n	8010db4 <__aeabi_fsub+0x60>
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1c5      	bne.n	8010f38 <__aeabi_fsub+0x1e4>
 8010fac:	000a      	movs	r2, r1
 8010fae:	28ff      	cmp	r0, #255	; 0xff
 8010fb0:	d0c8      	beq.n	8010f44 <__aeabi_fsub+0x1f0>
 8010fb2:	0005      	movs	r5, r0
 8010fb4:	464b      	mov	r3, r9
 8010fb6:	e7a0      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d149      	bne.n	8011050 <__aeabi_fsub+0x2fc>
 8010fbc:	464b      	mov	r3, r9
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d077      	beq.n	80110b2 <__aeabi_fsub+0x35e>
 8010fc2:	000a      	movs	r2, r1
 8010fc4:	25ff      	movs	r5, #255	; 0xff
 8010fc6:	e798      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8010fc8:	2cff      	cmp	r4, #255	; 0xff
 8010fca:	d000      	beq.n	8010fce <__aeabi_fsub+0x27a>
 8010fcc:	e743      	b.n	8010e56 <__aeabi_fsub+0x102>
 8010fce:	e787      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 8010fd0:	000a      	movs	r2, r1
 8010fd2:	24ff      	movs	r4, #255	; 0xff
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	e716      	b.n	8010e06 <__aeabi_fsub+0xb2>
 8010fd8:	2c00      	cmp	r4, #0
 8010fda:	d115      	bne.n	8011008 <__aeabi_fsub+0x2b4>
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d157      	bne.n	8011090 <__aeabi_fsub+0x33c>
 8010fe0:	28ff      	cmp	r0, #255	; 0xff
 8010fe2:	d1e6      	bne.n	8010fb2 <__aeabi_fsub+0x25e>
 8010fe4:	464b      	mov	r3, r9
 8010fe6:	e77b      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 8010fe8:	2c00      	cmp	r4, #0
 8010fea:	d120      	bne.n	801102e <__aeabi_fsub+0x2da>
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d057      	beq.n	80110a0 <__aeabi_fsub+0x34c>
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	2900      	cmp	r1, #0
 8010ff4:	d053      	beq.n	801109e <__aeabi_fsub+0x34a>
 8010ff6:	444b      	add	r3, r9
 8010ff8:	015a      	lsls	r2, r3, #5
 8010ffa:	d568      	bpl.n	80110ce <__aeabi_fsub+0x37a>
 8010ffc:	2407      	movs	r4, #7
 8010ffe:	4a36      	ldr	r2, [pc, #216]	; (80110d8 <__aeabi_fsub+0x384>)
 8011000:	401c      	ands	r4, r3
 8011002:	2501      	movs	r5, #1
 8011004:	4013      	ands	r3, r2
 8011006:	e6ea      	b.n	8010dde <__aeabi_fsub+0x8a>
 8011008:	28ff      	cmp	r0, #255	; 0xff
 801100a:	d0eb      	beq.n	8010fe4 <__aeabi_fsub+0x290>
 801100c:	2280      	movs	r2, #128	; 0x80
 801100e:	04d2      	lsls	r2, r2, #19
 8011010:	4276      	negs	r6, r6
 8011012:	4313      	orrs	r3, r2
 8011014:	2e1b      	cmp	r6, #27
 8011016:	dc53      	bgt.n	80110c0 <__aeabi_fsub+0x36c>
 8011018:	2520      	movs	r5, #32
 801101a:	1bad      	subs	r5, r5, r6
 801101c:	001a      	movs	r2, r3
 801101e:	40ab      	lsls	r3, r5
 8011020:	40f2      	lsrs	r2, r6
 8011022:	1e5c      	subs	r4, r3, #1
 8011024:	41a3      	sbcs	r3, r4
 8011026:	4313      	orrs	r3, r2
 8011028:	444b      	add	r3, r9
 801102a:	0005      	movs	r5, r0
 801102c:	e721      	b.n	8010e72 <__aeabi_fsub+0x11e>
 801102e:	2b00      	cmp	r3, #0
 8011030:	d0d8      	beq.n	8010fe4 <__aeabi_fsub+0x290>
 8011032:	4649      	mov	r1, r9
 8011034:	2900      	cmp	r1, #0
 8011036:	d100      	bne.n	801103a <__aeabi_fsub+0x2e6>
 8011038:	e752      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 801103a:	2180      	movs	r1, #128	; 0x80
 801103c:	03c9      	lsls	r1, r1, #15
 801103e:	420f      	tst	r7, r1
 8011040:	d100      	bne.n	8011044 <__aeabi_fsub+0x2f0>
 8011042:	e74d      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 8011044:	4660      	mov	r0, ip
 8011046:	4208      	tst	r0, r1
 8011048:	d000      	beq.n	801104c <__aeabi_fsub+0x2f8>
 801104a:	e749      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 801104c:	464b      	mov	r3, r9
 801104e:	e747      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 8011050:	4648      	mov	r0, r9
 8011052:	25ff      	movs	r5, #255	; 0xff
 8011054:	2800      	cmp	r0, #0
 8011056:	d100      	bne.n	801105a <__aeabi_fsub+0x306>
 8011058:	e74f      	b.n	8010efa <__aeabi_fsub+0x1a6>
 801105a:	2280      	movs	r2, #128	; 0x80
 801105c:	03d2      	lsls	r2, r2, #15
 801105e:	4217      	tst	r7, r2
 8011060:	d004      	beq.n	801106c <__aeabi_fsub+0x318>
 8011062:	4660      	mov	r0, ip
 8011064:	4210      	tst	r0, r2
 8011066:	d101      	bne.n	801106c <__aeabi_fsub+0x318>
 8011068:	464b      	mov	r3, r9
 801106a:	4688      	mov	r8, r1
 801106c:	2201      	movs	r2, #1
 801106e:	4641      	mov	r1, r8
 8011070:	25ff      	movs	r5, #255	; 0xff
 8011072:	400a      	ands	r2, r1
 8011074:	e741      	b.n	8010efa <__aeabi_fsub+0x1a6>
 8011076:	4648      	mov	r0, r9
 8011078:	2800      	cmp	r0, #0
 801107a:	d01f      	beq.n	80110bc <__aeabi_fsub+0x368>
 801107c:	1a1a      	subs	r2, r3, r0
 801107e:	0150      	lsls	r0, r2, #5
 8011080:	d520      	bpl.n	80110c4 <__aeabi_fsub+0x370>
 8011082:	464a      	mov	r2, r9
 8011084:	2407      	movs	r4, #7
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	401c      	ands	r4, r3
 801108a:	4688      	mov	r8, r1
 801108c:	2500      	movs	r5, #0
 801108e:	e6a6      	b.n	8010dde <__aeabi_fsub+0x8a>
 8011090:	1c74      	adds	r4, r6, #1
 8011092:	d0c9      	beq.n	8011028 <__aeabi_fsub+0x2d4>
 8011094:	43f6      	mvns	r6, r6
 8011096:	28ff      	cmp	r0, #255	; 0xff
 8011098:	d1bc      	bne.n	8011014 <__aeabi_fsub+0x2c0>
 801109a:	464b      	mov	r3, r9
 801109c:	e720      	b.n	8010ee0 <__aeabi_fsub+0x18c>
 801109e:	4699      	mov	r9, r3
 80110a0:	464b      	mov	r3, r9
 80110a2:	2500      	movs	r5, #0
 80110a4:	08db      	lsrs	r3, r3, #3
 80110a6:	e72b      	b.n	8010f00 <__aeabi_fsub+0x1ac>
 80110a8:	2301      	movs	r3, #1
 80110aa:	e740      	b.n	8010f2e <__aeabi_fsub+0x1da>
 80110ac:	2200      	movs	r2, #0
 80110ae:	2300      	movs	r3, #0
 80110b0:	e6a9      	b.n	8010e06 <__aeabi_fsub+0xb2>
 80110b2:	2380      	movs	r3, #128	; 0x80
 80110b4:	2200      	movs	r2, #0
 80110b6:	03db      	lsls	r3, r3, #15
 80110b8:	24ff      	movs	r4, #255	; 0xff
 80110ba:	e6a4      	b.n	8010e06 <__aeabi_fsub+0xb2>
 80110bc:	2500      	movs	r5, #0
 80110be:	e71c      	b.n	8010efa <__aeabi_fsub+0x1a6>
 80110c0:	2301      	movs	r3, #1
 80110c2:	e7b1      	b.n	8011028 <__aeabi_fsub+0x2d4>
 80110c4:	2a00      	cmp	r2, #0
 80110c6:	d0f1      	beq.n	80110ac <__aeabi_fsub+0x358>
 80110c8:	0013      	movs	r3, r2
 80110ca:	2500      	movs	r5, #0
 80110cc:	e6fc      	b.n	8010ec8 <__aeabi_fsub+0x174>
 80110ce:	2500      	movs	r5, #0
 80110d0:	e6fa      	b.n	8010ec8 <__aeabi_fsub+0x174>
 80110d2:	46c0      	nop			; (mov r8, r8)
 80110d4:	7dffffff 	.word	0x7dffffff
 80110d8:	fbffffff 	.word	0xfbffffff

080110dc <__clzsi2>:
 80110dc:	211c      	movs	r1, #28
 80110de:	2301      	movs	r3, #1
 80110e0:	041b      	lsls	r3, r3, #16
 80110e2:	4298      	cmp	r0, r3
 80110e4:	d301      	bcc.n	80110ea <__clzsi2+0xe>
 80110e6:	0c00      	lsrs	r0, r0, #16
 80110e8:	3910      	subs	r1, #16
 80110ea:	0a1b      	lsrs	r3, r3, #8
 80110ec:	4298      	cmp	r0, r3
 80110ee:	d301      	bcc.n	80110f4 <__clzsi2+0x18>
 80110f0:	0a00      	lsrs	r0, r0, #8
 80110f2:	3908      	subs	r1, #8
 80110f4:	091b      	lsrs	r3, r3, #4
 80110f6:	4298      	cmp	r0, r3
 80110f8:	d301      	bcc.n	80110fe <__clzsi2+0x22>
 80110fa:	0900      	lsrs	r0, r0, #4
 80110fc:	3904      	subs	r1, #4
 80110fe:	a202      	add	r2, pc, #8	; (adr r2, 8011108 <__clzsi2+0x2c>)
 8011100:	5c10      	ldrb	r0, [r2, r0]
 8011102:	1840      	adds	r0, r0, r1
 8011104:	4770      	bx	lr
 8011106:	46c0      	nop			; (mov r8, r8)
 8011108:	02020304 	.word	0x02020304
 801110c:	01010101 	.word	0x01010101
	...

08011118 <__gnu_thumb1_case_sqi>:
 8011118:	b402      	push	{r1}
 801111a:	4671      	mov	r1, lr
 801111c:	0849      	lsrs	r1, r1, #1
 801111e:	0049      	lsls	r1, r1, #1
 8011120:	5609      	ldrsb	r1, [r1, r0]
 8011122:	0049      	lsls	r1, r1, #1
 8011124:	448e      	add	lr, r1
 8011126:	bc02      	pop	{r1}
 8011128:	4770      	bx	lr
 801112a:	46c0      	nop			; (mov r8, r8)

0801112c <__gnu_thumb1_case_uqi>:
 801112c:	b402      	push	{r1}
 801112e:	4671      	mov	r1, lr
 8011130:	0849      	lsrs	r1, r1, #1
 8011132:	0049      	lsls	r1, r1, #1
 8011134:	5c09      	ldrb	r1, [r1, r0]
 8011136:	0049      	lsls	r1, r1, #1
 8011138:	448e      	add	lr, r1
 801113a:	bc02      	pop	{r1}
 801113c:	4770      	bx	lr
 801113e:	46c0      	nop			; (mov r8, r8)

08011140 <__gnu_thumb1_case_uhi>:
 8011140:	b403      	push	{r0, r1}
 8011142:	4671      	mov	r1, lr
 8011144:	0849      	lsrs	r1, r1, #1
 8011146:	0040      	lsls	r0, r0, #1
 8011148:	0049      	lsls	r1, r1, #1
 801114a:	5a09      	ldrh	r1, [r1, r0]
 801114c:	0049      	lsls	r1, r1, #1
 801114e:	448e      	add	lr, r1
 8011150:	bc03      	pop	{r0, r1}
 8011152:	4770      	bx	lr

08011154 <__udivsi3>:
 8011154:	2200      	movs	r2, #0
 8011156:	0843      	lsrs	r3, r0, #1
 8011158:	428b      	cmp	r3, r1
 801115a:	d374      	bcc.n	8011246 <__udivsi3+0xf2>
 801115c:	0903      	lsrs	r3, r0, #4
 801115e:	428b      	cmp	r3, r1
 8011160:	d35f      	bcc.n	8011222 <__udivsi3+0xce>
 8011162:	0a03      	lsrs	r3, r0, #8
 8011164:	428b      	cmp	r3, r1
 8011166:	d344      	bcc.n	80111f2 <__udivsi3+0x9e>
 8011168:	0b03      	lsrs	r3, r0, #12
 801116a:	428b      	cmp	r3, r1
 801116c:	d328      	bcc.n	80111c0 <__udivsi3+0x6c>
 801116e:	0c03      	lsrs	r3, r0, #16
 8011170:	428b      	cmp	r3, r1
 8011172:	d30d      	bcc.n	8011190 <__udivsi3+0x3c>
 8011174:	22ff      	movs	r2, #255	; 0xff
 8011176:	0209      	lsls	r1, r1, #8
 8011178:	ba12      	rev	r2, r2
 801117a:	0c03      	lsrs	r3, r0, #16
 801117c:	428b      	cmp	r3, r1
 801117e:	d302      	bcc.n	8011186 <__udivsi3+0x32>
 8011180:	1212      	asrs	r2, r2, #8
 8011182:	0209      	lsls	r1, r1, #8
 8011184:	d065      	beq.n	8011252 <__udivsi3+0xfe>
 8011186:	0b03      	lsrs	r3, r0, #12
 8011188:	428b      	cmp	r3, r1
 801118a:	d319      	bcc.n	80111c0 <__udivsi3+0x6c>
 801118c:	e000      	b.n	8011190 <__udivsi3+0x3c>
 801118e:	0a09      	lsrs	r1, r1, #8
 8011190:	0bc3      	lsrs	r3, r0, #15
 8011192:	428b      	cmp	r3, r1
 8011194:	d301      	bcc.n	801119a <__udivsi3+0x46>
 8011196:	03cb      	lsls	r3, r1, #15
 8011198:	1ac0      	subs	r0, r0, r3
 801119a:	4152      	adcs	r2, r2
 801119c:	0b83      	lsrs	r3, r0, #14
 801119e:	428b      	cmp	r3, r1
 80111a0:	d301      	bcc.n	80111a6 <__udivsi3+0x52>
 80111a2:	038b      	lsls	r3, r1, #14
 80111a4:	1ac0      	subs	r0, r0, r3
 80111a6:	4152      	adcs	r2, r2
 80111a8:	0b43      	lsrs	r3, r0, #13
 80111aa:	428b      	cmp	r3, r1
 80111ac:	d301      	bcc.n	80111b2 <__udivsi3+0x5e>
 80111ae:	034b      	lsls	r3, r1, #13
 80111b0:	1ac0      	subs	r0, r0, r3
 80111b2:	4152      	adcs	r2, r2
 80111b4:	0b03      	lsrs	r3, r0, #12
 80111b6:	428b      	cmp	r3, r1
 80111b8:	d301      	bcc.n	80111be <__udivsi3+0x6a>
 80111ba:	030b      	lsls	r3, r1, #12
 80111bc:	1ac0      	subs	r0, r0, r3
 80111be:	4152      	adcs	r2, r2
 80111c0:	0ac3      	lsrs	r3, r0, #11
 80111c2:	428b      	cmp	r3, r1
 80111c4:	d301      	bcc.n	80111ca <__udivsi3+0x76>
 80111c6:	02cb      	lsls	r3, r1, #11
 80111c8:	1ac0      	subs	r0, r0, r3
 80111ca:	4152      	adcs	r2, r2
 80111cc:	0a83      	lsrs	r3, r0, #10
 80111ce:	428b      	cmp	r3, r1
 80111d0:	d301      	bcc.n	80111d6 <__udivsi3+0x82>
 80111d2:	028b      	lsls	r3, r1, #10
 80111d4:	1ac0      	subs	r0, r0, r3
 80111d6:	4152      	adcs	r2, r2
 80111d8:	0a43      	lsrs	r3, r0, #9
 80111da:	428b      	cmp	r3, r1
 80111dc:	d301      	bcc.n	80111e2 <__udivsi3+0x8e>
 80111de:	024b      	lsls	r3, r1, #9
 80111e0:	1ac0      	subs	r0, r0, r3
 80111e2:	4152      	adcs	r2, r2
 80111e4:	0a03      	lsrs	r3, r0, #8
 80111e6:	428b      	cmp	r3, r1
 80111e8:	d301      	bcc.n	80111ee <__udivsi3+0x9a>
 80111ea:	020b      	lsls	r3, r1, #8
 80111ec:	1ac0      	subs	r0, r0, r3
 80111ee:	4152      	adcs	r2, r2
 80111f0:	d2cd      	bcs.n	801118e <__udivsi3+0x3a>
 80111f2:	09c3      	lsrs	r3, r0, #7
 80111f4:	428b      	cmp	r3, r1
 80111f6:	d301      	bcc.n	80111fc <__udivsi3+0xa8>
 80111f8:	01cb      	lsls	r3, r1, #7
 80111fa:	1ac0      	subs	r0, r0, r3
 80111fc:	4152      	adcs	r2, r2
 80111fe:	0983      	lsrs	r3, r0, #6
 8011200:	428b      	cmp	r3, r1
 8011202:	d301      	bcc.n	8011208 <__udivsi3+0xb4>
 8011204:	018b      	lsls	r3, r1, #6
 8011206:	1ac0      	subs	r0, r0, r3
 8011208:	4152      	adcs	r2, r2
 801120a:	0943      	lsrs	r3, r0, #5
 801120c:	428b      	cmp	r3, r1
 801120e:	d301      	bcc.n	8011214 <__udivsi3+0xc0>
 8011210:	014b      	lsls	r3, r1, #5
 8011212:	1ac0      	subs	r0, r0, r3
 8011214:	4152      	adcs	r2, r2
 8011216:	0903      	lsrs	r3, r0, #4
 8011218:	428b      	cmp	r3, r1
 801121a:	d301      	bcc.n	8011220 <__udivsi3+0xcc>
 801121c:	010b      	lsls	r3, r1, #4
 801121e:	1ac0      	subs	r0, r0, r3
 8011220:	4152      	adcs	r2, r2
 8011222:	08c3      	lsrs	r3, r0, #3
 8011224:	428b      	cmp	r3, r1
 8011226:	d301      	bcc.n	801122c <__udivsi3+0xd8>
 8011228:	00cb      	lsls	r3, r1, #3
 801122a:	1ac0      	subs	r0, r0, r3
 801122c:	4152      	adcs	r2, r2
 801122e:	0883      	lsrs	r3, r0, #2
 8011230:	428b      	cmp	r3, r1
 8011232:	d301      	bcc.n	8011238 <__udivsi3+0xe4>
 8011234:	008b      	lsls	r3, r1, #2
 8011236:	1ac0      	subs	r0, r0, r3
 8011238:	4152      	adcs	r2, r2
 801123a:	0843      	lsrs	r3, r0, #1
 801123c:	428b      	cmp	r3, r1
 801123e:	d301      	bcc.n	8011244 <__udivsi3+0xf0>
 8011240:	004b      	lsls	r3, r1, #1
 8011242:	1ac0      	subs	r0, r0, r3
 8011244:	4152      	adcs	r2, r2
 8011246:	1a41      	subs	r1, r0, r1
 8011248:	d200      	bcs.n	801124c <__udivsi3+0xf8>
 801124a:	4601      	mov	r1, r0
 801124c:	4152      	adcs	r2, r2
 801124e:	4610      	mov	r0, r2
 8011250:	4770      	bx	lr
 8011252:	e7ff      	b.n	8011254 <__udivsi3+0x100>
 8011254:	b501      	push	{r0, lr}
 8011256:	2000      	movs	r0, #0
 8011258:	f000 f8f0 	bl	801143c <__aeabi_idiv0>
 801125c:	bd02      	pop	{r1, pc}
 801125e:	46c0      	nop			; (mov r8, r8)

08011260 <__aeabi_uidivmod>:
 8011260:	2900      	cmp	r1, #0
 8011262:	d0f7      	beq.n	8011254 <__udivsi3+0x100>
 8011264:	e776      	b.n	8011154 <__udivsi3>
 8011266:	4770      	bx	lr

08011268 <__divsi3>:
 8011268:	4603      	mov	r3, r0
 801126a:	430b      	orrs	r3, r1
 801126c:	d47f      	bmi.n	801136e <__divsi3+0x106>
 801126e:	2200      	movs	r2, #0
 8011270:	0843      	lsrs	r3, r0, #1
 8011272:	428b      	cmp	r3, r1
 8011274:	d374      	bcc.n	8011360 <__divsi3+0xf8>
 8011276:	0903      	lsrs	r3, r0, #4
 8011278:	428b      	cmp	r3, r1
 801127a:	d35f      	bcc.n	801133c <__divsi3+0xd4>
 801127c:	0a03      	lsrs	r3, r0, #8
 801127e:	428b      	cmp	r3, r1
 8011280:	d344      	bcc.n	801130c <__divsi3+0xa4>
 8011282:	0b03      	lsrs	r3, r0, #12
 8011284:	428b      	cmp	r3, r1
 8011286:	d328      	bcc.n	80112da <__divsi3+0x72>
 8011288:	0c03      	lsrs	r3, r0, #16
 801128a:	428b      	cmp	r3, r1
 801128c:	d30d      	bcc.n	80112aa <__divsi3+0x42>
 801128e:	22ff      	movs	r2, #255	; 0xff
 8011290:	0209      	lsls	r1, r1, #8
 8011292:	ba12      	rev	r2, r2
 8011294:	0c03      	lsrs	r3, r0, #16
 8011296:	428b      	cmp	r3, r1
 8011298:	d302      	bcc.n	80112a0 <__divsi3+0x38>
 801129a:	1212      	asrs	r2, r2, #8
 801129c:	0209      	lsls	r1, r1, #8
 801129e:	d065      	beq.n	801136c <__divsi3+0x104>
 80112a0:	0b03      	lsrs	r3, r0, #12
 80112a2:	428b      	cmp	r3, r1
 80112a4:	d319      	bcc.n	80112da <__divsi3+0x72>
 80112a6:	e000      	b.n	80112aa <__divsi3+0x42>
 80112a8:	0a09      	lsrs	r1, r1, #8
 80112aa:	0bc3      	lsrs	r3, r0, #15
 80112ac:	428b      	cmp	r3, r1
 80112ae:	d301      	bcc.n	80112b4 <__divsi3+0x4c>
 80112b0:	03cb      	lsls	r3, r1, #15
 80112b2:	1ac0      	subs	r0, r0, r3
 80112b4:	4152      	adcs	r2, r2
 80112b6:	0b83      	lsrs	r3, r0, #14
 80112b8:	428b      	cmp	r3, r1
 80112ba:	d301      	bcc.n	80112c0 <__divsi3+0x58>
 80112bc:	038b      	lsls	r3, r1, #14
 80112be:	1ac0      	subs	r0, r0, r3
 80112c0:	4152      	adcs	r2, r2
 80112c2:	0b43      	lsrs	r3, r0, #13
 80112c4:	428b      	cmp	r3, r1
 80112c6:	d301      	bcc.n	80112cc <__divsi3+0x64>
 80112c8:	034b      	lsls	r3, r1, #13
 80112ca:	1ac0      	subs	r0, r0, r3
 80112cc:	4152      	adcs	r2, r2
 80112ce:	0b03      	lsrs	r3, r0, #12
 80112d0:	428b      	cmp	r3, r1
 80112d2:	d301      	bcc.n	80112d8 <__divsi3+0x70>
 80112d4:	030b      	lsls	r3, r1, #12
 80112d6:	1ac0      	subs	r0, r0, r3
 80112d8:	4152      	adcs	r2, r2
 80112da:	0ac3      	lsrs	r3, r0, #11
 80112dc:	428b      	cmp	r3, r1
 80112de:	d301      	bcc.n	80112e4 <__divsi3+0x7c>
 80112e0:	02cb      	lsls	r3, r1, #11
 80112e2:	1ac0      	subs	r0, r0, r3
 80112e4:	4152      	adcs	r2, r2
 80112e6:	0a83      	lsrs	r3, r0, #10
 80112e8:	428b      	cmp	r3, r1
 80112ea:	d301      	bcc.n	80112f0 <__divsi3+0x88>
 80112ec:	028b      	lsls	r3, r1, #10
 80112ee:	1ac0      	subs	r0, r0, r3
 80112f0:	4152      	adcs	r2, r2
 80112f2:	0a43      	lsrs	r3, r0, #9
 80112f4:	428b      	cmp	r3, r1
 80112f6:	d301      	bcc.n	80112fc <__divsi3+0x94>
 80112f8:	024b      	lsls	r3, r1, #9
 80112fa:	1ac0      	subs	r0, r0, r3
 80112fc:	4152      	adcs	r2, r2
 80112fe:	0a03      	lsrs	r3, r0, #8
 8011300:	428b      	cmp	r3, r1
 8011302:	d301      	bcc.n	8011308 <__divsi3+0xa0>
 8011304:	020b      	lsls	r3, r1, #8
 8011306:	1ac0      	subs	r0, r0, r3
 8011308:	4152      	adcs	r2, r2
 801130a:	d2cd      	bcs.n	80112a8 <__divsi3+0x40>
 801130c:	09c3      	lsrs	r3, r0, #7
 801130e:	428b      	cmp	r3, r1
 8011310:	d301      	bcc.n	8011316 <__divsi3+0xae>
 8011312:	01cb      	lsls	r3, r1, #7
 8011314:	1ac0      	subs	r0, r0, r3
 8011316:	4152      	adcs	r2, r2
 8011318:	0983      	lsrs	r3, r0, #6
 801131a:	428b      	cmp	r3, r1
 801131c:	d301      	bcc.n	8011322 <__divsi3+0xba>
 801131e:	018b      	lsls	r3, r1, #6
 8011320:	1ac0      	subs	r0, r0, r3
 8011322:	4152      	adcs	r2, r2
 8011324:	0943      	lsrs	r3, r0, #5
 8011326:	428b      	cmp	r3, r1
 8011328:	d301      	bcc.n	801132e <__divsi3+0xc6>
 801132a:	014b      	lsls	r3, r1, #5
 801132c:	1ac0      	subs	r0, r0, r3
 801132e:	4152      	adcs	r2, r2
 8011330:	0903      	lsrs	r3, r0, #4
 8011332:	428b      	cmp	r3, r1
 8011334:	d301      	bcc.n	801133a <__divsi3+0xd2>
 8011336:	010b      	lsls	r3, r1, #4
 8011338:	1ac0      	subs	r0, r0, r3
 801133a:	4152      	adcs	r2, r2
 801133c:	08c3      	lsrs	r3, r0, #3
 801133e:	428b      	cmp	r3, r1
 8011340:	d301      	bcc.n	8011346 <__divsi3+0xde>
 8011342:	00cb      	lsls	r3, r1, #3
 8011344:	1ac0      	subs	r0, r0, r3
 8011346:	4152      	adcs	r2, r2
 8011348:	0883      	lsrs	r3, r0, #2
 801134a:	428b      	cmp	r3, r1
 801134c:	d301      	bcc.n	8011352 <__divsi3+0xea>
 801134e:	008b      	lsls	r3, r1, #2
 8011350:	1ac0      	subs	r0, r0, r3
 8011352:	4152      	adcs	r2, r2
 8011354:	0843      	lsrs	r3, r0, #1
 8011356:	428b      	cmp	r3, r1
 8011358:	d301      	bcc.n	801135e <__divsi3+0xf6>
 801135a:	004b      	lsls	r3, r1, #1
 801135c:	1ac0      	subs	r0, r0, r3
 801135e:	4152      	adcs	r2, r2
 8011360:	1a41      	subs	r1, r0, r1
 8011362:	d200      	bcs.n	8011366 <__divsi3+0xfe>
 8011364:	4601      	mov	r1, r0
 8011366:	4152      	adcs	r2, r2
 8011368:	4610      	mov	r0, r2
 801136a:	4770      	bx	lr
 801136c:	e05d      	b.n	801142a <__divsi3+0x1c2>
 801136e:	0fca      	lsrs	r2, r1, #31
 8011370:	d000      	beq.n	8011374 <__divsi3+0x10c>
 8011372:	4249      	negs	r1, r1
 8011374:	1003      	asrs	r3, r0, #32
 8011376:	d300      	bcc.n	801137a <__divsi3+0x112>
 8011378:	4240      	negs	r0, r0
 801137a:	4053      	eors	r3, r2
 801137c:	2200      	movs	r2, #0
 801137e:	469c      	mov	ip, r3
 8011380:	0903      	lsrs	r3, r0, #4
 8011382:	428b      	cmp	r3, r1
 8011384:	d32d      	bcc.n	80113e2 <__divsi3+0x17a>
 8011386:	0a03      	lsrs	r3, r0, #8
 8011388:	428b      	cmp	r3, r1
 801138a:	d312      	bcc.n	80113b2 <__divsi3+0x14a>
 801138c:	22fc      	movs	r2, #252	; 0xfc
 801138e:	0189      	lsls	r1, r1, #6
 8011390:	ba12      	rev	r2, r2
 8011392:	0a03      	lsrs	r3, r0, #8
 8011394:	428b      	cmp	r3, r1
 8011396:	d30c      	bcc.n	80113b2 <__divsi3+0x14a>
 8011398:	0189      	lsls	r1, r1, #6
 801139a:	1192      	asrs	r2, r2, #6
 801139c:	428b      	cmp	r3, r1
 801139e:	d308      	bcc.n	80113b2 <__divsi3+0x14a>
 80113a0:	0189      	lsls	r1, r1, #6
 80113a2:	1192      	asrs	r2, r2, #6
 80113a4:	428b      	cmp	r3, r1
 80113a6:	d304      	bcc.n	80113b2 <__divsi3+0x14a>
 80113a8:	0189      	lsls	r1, r1, #6
 80113aa:	d03a      	beq.n	8011422 <__divsi3+0x1ba>
 80113ac:	1192      	asrs	r2, r2, #6
 80113ae:	e000      	b.n	80113b2 <__divsi3+0x14a>
 80113b0:	0989      	lsrs	r1, r1, #6
 80113b2:	09c3      	lsrs	r3, r0, #7
 80113b4:	428b      	cmp	r3, r1
 80113b6:	d301      	bcc.n	80113bc <__divsi3+0x154>
 80113b8:	01cb      	lsls	r3, r1, #7
 80113ba:	1ac0      	subs	r0, r0, r3
 80113bc:	4152      	adcs	r2, r2
 80113be:	0983      	lsrs	r3, r0, #6
 80113c0:	428b      	cmp	r3, r1
 80113c2:	d301      	bcc.n	80113c8 <__divsi3+0x160>
 80113c4:	018b      	lsls	r3, r1, #6
 80113c6:	1ac0      	subs	r0, r0, r3
 80113c8:	4152      	adcs	r2, r2
 80113ca:	0943      	lsrs	r3, r0, #5
 80113cc:	428b      	cmp	r3, r1
 80113ce:	d301      	bcc.n	80113d4 <__divsi3+0x16c>
 80113d0:	014b      	lsls	r3, r1, #5
 80113d2:	1ac0      	subs	r0, r0, r3
 80113d4:	4152      	adcs	r2, r2
 80113d6:	0903      	lsrs	r3, r0, #4
 80113d8:	428b      	cmp	r3, r1
 80113da:	d301      	bcc.n	80113e0 <__divsi3+0x178>
 80113dc:	010b      	lsls	r3, r1, #4
 80113de:	1ac0      	subs	r0, r0, r3
 80113e0:	4152      	adcs	r2, r2
 80113e2:	08c3      	lsrs	r3, r0, #3
 80113e4:	428b      	cmp	r3, r1
 80113e6:	d301      	bcc.n	80113ec <__divsi3+0x184>
 80113e8:	00cb      	lsls	r3, r1, #3
 80113ea:	1ac0      	subs	r0, r0, r3
 80113ec:	4152      	adcs	r2, r2
 80113ee:	0883      	lsrs	r3, r0, #2
 80113f0:	428b      	cmp	r3, r1
 80113f2:	d301      	bcc.n	80113f8 <__divsi3+0x190>
 80113f4:	008b      	lsls	r3, r1, #2
 80113f6:	1ac0      	subs	r0, r0, r3
 80113f8:	4152      	adcs	r2, r2
 80113fa:	d2d9      	bcs.n	80113b0 <__divsi3+0x148>
 80113fc:	0843      	lsrs	r3, r0, #1
 80113fe:	428b      	cmp	r3, r1
 8011400:	d301      	bcc.n	8011406 <__divsi3+0x19e>
 8011402:	004b      	lsls	r3, r1, #1
 8011404:	1ac0      	subs	r0, r0, r3
 8011406:	4152      	adcs	r2, r2
 8011408:	1a41      	subs	r1, r0, r1
 801140a:	d200      	bcs.n	801140e <__divsi3+0x1a6>
 801140c:	4601      	mov	r1, r0
 801140e:	4663      	mov	r3, ip
 8011410:	4152      	adcs	r2, r2
 8011412:	105b      	asrs	r3, r3, #1
 8011414:	4610      	mov	r0, r2
 8011416:	d301      	bcc.n	801141c <__divsi3+0x1b4>
 8011418:	4240      	negs	r0, r0
 801141a:	2b00      	cmp	r3, #0
 801141c:	d500      	bpl.n	8011420 <__divsi3+0x1b8>
 801141e:	4249      	negs	r1, r1
 8011420:	4770      	bx	lr
 8011422:	4663      	mov	r3, ip
 8011424:	105b      	asrs	r3, r3, #1
 8011426:	d300      	bcc.n	801142a <__divsi3+0x1c2>
 8011428:	4240      	negs	r0, r0
 801142a:	b501      	push	{r0, lr}
 801142c:	2000      	movs	r0, #0
 801142e:	f000 f805 	bl	801143c <__aeabi_idiv0>
 8011432:	bd02      	pop	{r1, pc}

08011434 <__aeabi_idivmod>:
 8011434:	2900      	cmp	r1, #0
 8011436:	d0f8      	beq.n	801142a <__divsi3+0x1c2>
 8011438:	e716      	b.n	8011268 <__divsi3>
 801143a:	4770      	bx	lr

0801143c <__aeabi_idiv0>:
 801143c:	4770      	bx	lr
 801143e:	46c0      	nop			; (mov r8, r8)

08011440 <__aeabi_cdrcmple>:
 8011440:	4684      	mov	ip, r0
 8011442:	1c10      	adds	r0, r2, #0
 8011444:	4662      	mov	r2, ip
 8011446:	468c      	mov	ip, r1
 8011448:	1c19      	adds	r1, r3, #0
 801144a:	4663      	mov	r3, ip
 801144c:	e000      	b.n	8011450 <__aeabi_cdcmpeq>
 801144e:	46c0      	nop			; (mov r8, r8)

08011450 <__aeabi_cdcmpeq>:
 8011450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011452:	f001 f9ab 	bl	80127ac <__ledf2>
 8011456:	2800      	cmp	r0, #0
 8011458:	d401      	bmi.n	801145e <__aeabi_cdcmpeq+0xe>
 801145a:	2100      	movs	r1, #0
 801145c:	42c8      	cmn	r0, r1
 801145e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08011460 <__aeabi_dcmpeq>:
 8011460:	b510      	push	{r4, lr}
 8011462:	f001 f903 	bl	801266c <__eqdf2>
 8011466:	4240      	negs	r0, r0
 8011468:	3001      	adds	r0, #1
 801146a:	bd10      	pop	{r4, pc}

0801146c <__aeabi_dcmplt>:
 801146c:	b510      	push	{r4, lr}
 801146e:	f001 f99d 	bl	80127ac <__ledf2>
 8011472:	2800      	cmp	r0, #0
 8011474:	db01      	blt.n	801147a <__aeabi_dcmplt+0xe>
 8011476:	2000      	movs	r0, #0
 8011478:	bd10      	pop	{r4, pc}
 801147a:	2001      	movs	r0, #1
 801147c:	bd10      	pop	{r4, pc}
 801147e:	46c0      	nop			; (mov r8, r8)

08011480 <__aeabi_dcmple>:
 8011480:	b510      	push	{r4, lr}
 8011482:	f001 f993 	bl	80127ac <__ledf2>
 8011486:	2800      	cmp	r0, #0
 8011488:	dd01      	ble.n	801148e <__aeabi_dcmple+0xe>
 801148a:	2000      	movs	r0, #0
 801148c:	bd10      	pop	{r4, pc}
 801148e:	2001      	movs	r0, #1
 8011490:	bd10      	pop	{r4, pc}
 8011492:	46c0      	nop			; (mov r8, r8)

08011494 <__aeabi_dcmpgt>:
 8011494:	b510      	push	{r4, lr}
 8011496:	f001 f925 	bl	80126e4 <__gedf2>
 801149a:	2800      	cmp	r0, #0
 801149c:	dc01      	bgt.n	80114a2 <__aeabi_dcmpgt+0xe>
 801149e:	2000      	movs	r0, #0
 80114a0:	bd10      	pop	{r4, pc}
 80114a2:	2001      	movs	r0, #1
 80114a4:	bd10      	pop	{r4, pc}
 80114a6:	46c0      	nop			; (mov r8, r8)

080114a8 <__aeabi_dcmpge>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	f001 f91b 	bl	80126e4 <__gedf2>
 80114ae:	2800      	cmp	r0, #0
 80114b0:	da01      	bge.n	80114b6 <__aeabi_dcmpge+0xe>
 80114b2:	2000      	movs	r0, #0
 80114b4:	bd10      	pop	{r4, pc}
 80114b6:	2001      	movs	r0, #1
 80114b8:	bd10      	pop	{r4, pc}
 80114ba:	46c0      	nop			; (mov r8, r8)

080114bc <__aeabi_cfrcmple>:
 80114bc:	4684      	mov	ip, r0
 80114be:	1c08      	adds	r0, r1, #0
 80114c0:	4661      	mov	r1, ip
 80114c2:	e7ff      	b.n	80114c4 <__aeabi_cfcmpeq>

080114c4 <__aeabi_cfcmpeq>:
 80114c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114c6:	f000 f9a3 	bl	8011810 <__lesf2>
 80114ca:	2800      	cmp	r0, #0
 80114cc:	d401      	bmi.n	80114d2 <__aeabi_cfcmpeq+0xe>
 80114ce:	2100      	movs	r1, #0
 80114d0:	42c8      	cmn	r0, r1
 80114d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080114d4 <__aeabi_fcmpeq>:
 80114d4:	b510      	push	{r4, lr}
 80114d6:	f000 f925 	bl	8011724 <__eqsf2>
 80114da:	4240      	negs	r0, r0
 80114dc:	3001      	adds	r0, #1
 80114de:	bd10      	pop	{r4, pc}

080114e0 <__aeabi_fcmplt>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	f000 f995 	bl	8011810 <__lesf2>
 80114e6:	2800      	cmp	r0, #0
 80114e8:	db01      	blt.n	80114ee <__aeabi_fcmplt+0xe>
 80114ea:	2000      	movs	r0, #0
 80114ec:	bd10      	pop	{r4, pc}
 80114ee:	2001      	movs	r0, #1
 80114f0:	bd10      	pop	{r4, pc}
 80114f2:	46c0      	nop			; (mov r8, r8)

080114f4 <__aeabi_fcmple>:
 80114f4:	b510      	push	{r4, lr}
 80114f6:	f000 f98b 	bl	8011810 <__lesf2>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	dd01      	ble.n	8011502 <__aeabi_fcmple+0xe>
 80114fe:	2000      	movs	r0, #0
 8011500:	bd10      	pop	{r4, pc}
 8011502:	2001      	movs	r0, #1
 8011504:	bd10      	pop	{r4, pc}
 8011506:	46c0      	nop			; (mov r8, r8)

08011508 <__aeabi_fcmpgt>:
 8011508:	b510      	push	{r4, lr}
 801150a:	f000 f933 	bl	8011774 <__gesf2>
 801150e:	2800      	cmp	r0, #0
 8011510:	dc01      	bgt.n	8011516 <__aeabi_fcmpgt+0xe>
 8011512:	2000      	movs	r0, #0
 8011514:	bd10      	pop	{r4, pc}
 8011516:	2001      	movs	r0, #1
 8011518:	bd10      	pop	{r4, pc}
 801151a:	46c0      	nop			; (mov r8, r8)

0801151c <__aeabi_fcmpge>:
 801151c:	b510      	push	{r4, lr}
 801151e:	f000 f929 	bl	8011774 <__gesf2>
 8011522:	2800      	cmp	r0, #0
 8011524:	da01      	bge.n	801152a <__aeabi_fcmpge+0xe>
 8011526:	2000      	movs	r0, #0
 8011528:	bd10      	pop	{r4, pc}
 801152a:	2001      	movs	r0, #1
 801152c:	bd10      	pop	{r4, pc}
 801152e:	46c0      	nop			; (mov r8, r8)

08011530 <__aeabi_uldivmod>:
 8011530:	2b00      	cmp	r3, #0
 8011532:	d111      	bne.n	8011558 <__aeabi_uldivmod+0x28>
 8011534:	2a00      	cmp	r2, #0
 8011536:	d10f      	bne.n	8011558 <__aeabi_uldivmod+0x28>
 8011538:	2900      	cmp	r1, #0
 801153a:	d100      	bne.n	801153e <__aeabi_uldivmod+0xe>
 801153c:	2800      	cmp	r0, #0
 801153e:	d002      	beq.n	8011546 <__aeabi_uldivmod+0x16>
 8011540:	2100      	movs	r1, #0
 8011542:	43c9      	mvns	r1, r1
 8011544:	1c08      	adds	r0, r1, #0
 8011546:	b407      	push	{r0, r1, r2}
 8011548:	4802      	ldr	r0, [pc, #8]	; (8011554 <__aeabi_uldivmod+0x24>)
 801154a:	a102      	add	r1, pc, #8	; (adr r1, 8011554 <__aeabi_uldivmod+0x24>)
 801154c:	1840      	adds	r0, r0, r1
 801154e:	9002      	str	r0, [sp, #8]
 8011550:	bd03      	pop	{r0, r1, pc}
 8011552:	46c0      	nop			; (mov r8, r8)
 8011554:	fffffee9 	.word	0xfffffee9
 8011558:	b403      	push	{r0, r1}
 801155a:	4668      	mov	r0, sp
 801155c:	b501      	push	{r0, lr}
 801155e:	9802      	ldr	r0, [sp, #8]
 8011560:	f000 f81e 	bl	80115a0 <__udivmoddi4>
 8011564:	9b01      	ldr	r3, [sp, #4]
 8011566:	469e      	mov	lr, r3
 8011568:	b002      	add	sp, #8
 801156a:	bc0c      	pop	{r2, r3}
 801156c:	4770      	bx	lr
 801156e:	46c0      	nop			; (mov r8, r8)

08011570 <__aeabi_f2uiz>:
 8011570:	219e      	movs	r1, #158	; 0x9e
 8011572:	b510      	push	{r4, lr}
 8011574:	05c9      	lsls	r1, r1, #23
 8011576:	1c04      	adds	r4, r0, #0
 8011578:	f7ff ffd0 	bl	801151c <__aeabi_fcmpge>
 801157c:	2800      	cmp	r0, #0
 801157e:	d103      	bne.n	8011588 <__aeabi_f2uiz+0x18>
 8011580:	1c20      	adds	r0, r4, #0
 8011582:	f000 f9ab 	bl	80118dc <__aeabi_f2iz>
 8011586:	bd10      	pop	{r4, pc}
 8011588:	219e      	movs	r1, #158	; 0x9e
 801158a:	1c20      	adds	r0, r4, #0
 801158c:	05c9      	lsls	r1, r1, #23
 801158e:	f7ff fbe1 	bl	8010d54 <__aeabi_fsub>
 8011592:	f000 f9a3 	bl	80118dc <__aeabi_f2iz>
 8011596:	2380      	movs	r3, #128	; 0x80
 8011598:	061b      	lsls	r3, r3, #24
 801159a:	469c      	mov	ip, r3
 801159c:	4460      	add	r0, ip
 801159e:	e7f2      	b.n	8011586 <__aeabi_f2uiz+0x16>

080115a0 <__udivmoddi4>:
 80115a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115a2:	464f      	mov	r7, r9
 80115a4:	4646      	mov	r6, r8
 80115a6:	46d6      	mov	lr, sl
 80115a8:	b5c0      	push	{r6, r7, lr}
 80115aa:	0004      	movs	r4, r0
 80115ac:	b082      	sub	sp, #8
 80115ae:	000d      	movs	r5, r1
 80115b0:	4691      	mov	r9, r2
 80115b2:	4698      	mov	r8, r3
 80115b4:	428b      	cmp	r3, r1
 80115b6:	d82f      	bhi.n	8011618 <__udivmoddi4+0x78>
 80115b8:	d02c      	beq.n	8011614 <__udivmoddi4+0x74>
 80115ba:	4641      	mov	r1, r8
 80115bc:	4648      	mov	r0, r9
 80115be:	f002 f8ab 	bl	8013718 <__clzdi2>
 80115c2:	0029      	movs	r1, r5
 80115c4:	0006      	movs	r6, r0
 80115c6:	0020      	movs	r0, r4
 80115c8:	f002 f8a6 	bl	8013718 <__clzdi2>
 80115cc:	1a33      	subs	r3, r6, r0
 80115ce:	469c      	mov	ip, r3
 80115d0:	3b20      	subs	r3, #32
 80115d2:	469a      	mov	sl, r3
 80115d4:	d500      	bpl.n	80115d8 <__udivmoddi4+0x38>
 80115d6:	e076      	b.n	80116c6 <__udivmoddi4+0x126>
 80115d8:	464b      	mov	r3, r9
 80115da:	4652      	mov	r2, sl
 80115dc:	4093      	lsls	r3, r2
 80115de:	001f      	movs	r7, r3
 80115e0:	464b      	mov	r3, r9
 80115e2:	4662      	mov	r2, ip
 80115e4:	4093      	lsls	r3, r2
 80115e6:	001e      	movs	r6, r3
 80115e8:	42af      	cmp	r7, r5
 80115ea:	d828      	bhi.n	801163e <__udivmoddi4+0x9e>
 80115ec:	d025      	beq.n	801163a <__udivmoddi4+0x9a>
 80115ee:	4653      	mov	r3, sl
 80115f0:	1ba4      	subs	r4, r4, r6
 80115f2:	41bd      	sbcs	r5, r7
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	da00      	bge.n	80115fa <__udivmoddi4+0x5a>
 80115f8:	e07b      	b.n	80116f2 <__udivmoddi4+0x152>
 80115fa:	2200      	movs	r2, #0
 80115fc:	2300      	movs	r3, #0
 80115fe:	9200      	str	r2, [sp, #0]
 8011600:	9301      	str	r3, [sp, #4]
 8011602:	2301      	movs	r3, #1
 8011604:	4652      	mov	r2, sl
 8011606:	4093      	lsls	r3, r2
 8011608:	9301      	str	r3, [sp, #4]
 801160a:	2301      	movs	r3, #1
 801160c:	4662      	mov	r2, ip
 801160e:	4093      	lsls	r3, r2
 8011610:	9300      	str	r3, [sp, #0]
 8011612:	e018      	b.n	8011646 <__udivmoddi4+0xa6>
 8011614:	4282      	cmp	r2, r0
 8011616:	d9d0      	bls.n	80115ba <__udivmoddi4+0x1a>
 8011618:	2200      	movs	r2, #0
 801161a:	2300      	movs	r3, #0
 801161c:	9200      	str	r2, [sp, #0]
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <__udivmoddi4+0x8a>
 8011626:	601c      	str	r4, [r3, #0]
 8011628:	605d      	str	r5, [r3, #4]
 801162a:	9800      	ldr	r0, [sp, #0]
 801162c:	9901      	ldr	r1, [sp, #4]
 801162e:	b002      	add	sp, #8
 8011630:	bc1c      	pop	{r2, r3, r4}
 8011632:	4690      	mov	r8, r2
 8011634:	4699      	mov	r9, r3
 8011636:	46a2      	mov	sl, r4
 8011638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801163a:	42a3      	cmp	r3, r4
 801163c:	d9d7      	bls.n	80115ee <__udivmoddi4+0x4e>
 801163e:	2200      	movs	r2, #0
 8011640:	2300      	movs	r3, #0
 8011642:	9200      	str	r2, [sp, #0]
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	4663      	mov	r3, ip
 8011648:	2b00      	cmp	r3, #0
 801164a:	d0e9      	beq.n	8011620 <__udivmoddi4+0x80>
 801164c:	07fb      	lsls	r3, r7, #31
 801164e:	4698      	mov	r8, r3
 8011650:	4641      	mov	r1, r8
 8011652:	0872      	lsrs	r2, r6, #1
 8011654:	430a      	orrs	r2, r1
 8011656:	087b      	lsrs	r3, r7, #1
 8011658:	4666      	mov	r6, ip
 801165a:	e00e      	b.n	801167a <__udivmoddi4+0xda>
 801165c:	42ab      	cmp	r3, r5
 801165e:	d101      	bne.n	8011664 <__udivmoddi4+0xc4>
 8011660:	42a2      	cmp	r2, r4
 8011662:	d80c      	bhi.n	801167e <__udivmoddi4+0xde>
 8011664:	1aa4      	subs	r4, r4, r2
 8011666:	419d      	sbcs	r5, r3
 8011668:	2001      	movs	r0, #1
 801166a:	1924      	adds	r4, r4, r4
 801166c:	416d      	adcs	r5, r5
 801166e:	2100      	movs	r1, #0
 8011670:	3e01      	subs	r6, #1
 8011672:	1824      	adds	r4, r4, r0
 8011674:	414d      	adcs	r5, r1
 8011676:	2e00      	cmp	r6, #0
 8011678:	d006      	beq.n	8011688 <__udivmoddi4+0xe8>
 801167a:	42ab      	cmp	r3, r5
 801167c:	d9ee      	bls.n	801165c <__udivmoddi4+0xbc>
 801167e:	3e01      	subs	r6, #1
 8011680:	1924      	adds	r4, r4, r4
 8011682:	416d      	adcs	r5, r5
 8011684:	2e00      	cmp	r6, #0
 8011686:	d1f8      	bne.n	801167a <__udivmoddi4+0xda>
 8011688:	9800      	ldr	r0, [sp, #0]
 801168a:	9901      	ldr	r1, [sp, #4]
 801168c:	4653      	mov	r3, sl
 801168e:	1900      	adds	r0, r0, r4
 8011690:	4169      	adcs	r1, r5
 8011692:	2b00      	cmp	r3, #0
 8011694:	db23      	blt.n	80116de <__udivmoddi4+0x13e>
 8011696:	002b      	movs	r3, r5
 8011698:	4652      	mov	r2, sl
 801169a:	40d3      	lsrs	r3, r2
 801169c:	002a      	movs	r2, r5
 801169e:	4664      	mov	r4, ip
 80116a0:	40e2      	lsrs	r2, r4
 80116a2:	001c      	movs	r4, r3
 80116a4:	4653      	mov	r3, sl
 80116a6:	0015      	movs	r5, r2
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	db2d      	blt.n	8011708 <__udivmoddi4+0x168>
 80116ac:	0026      	movs	r6, r4
 80116ae:	4657      	mov	r7, sl
 80116b0:	40be      	lsls	r6, r7
 80116b2:	0033      	movs	r3, r6
 80116b4:	0026      	movs	r6, r4
 80116b6:	4667      	mov	r7, ip
 80116b8:	40be      	lsls	r6, r7
 80116ba:	0032      	movs	r2, r6
 80116bc:	1a80      	subs	r0, r0, r2
 80116be:	4199      	sbcs	r1, r3
 80116c0:	9000      	str	r0, [sp, #0]
 80116c2:	9101      	str	r1, [sp, #4]
 80116c4:	e7ac      	b.n	8011620 <__udivmoddi4+0x80>
 80116c6:	4662      	mov	r2, ip
 80116c8:	2320      	movs	r3, #32
 80116ca:	1a9b      	subs	r3, r3, r2
 80116cc:	464a      	mov	r2, r9
 80116ce:	40da      	lsrs	r2, r3
 80116d0:	4661      	mov	r1, ip
 80116d2:	0013      	movs	r3, r2
 80116d4:	4642      	mov	r2, r8
 80116d6:	408a      	lsls	r2, r1
 80116d8:	0017      	movs	r7, r2
 80116da:	431f      	orrs	r7, r3
 80116dc:	e780      	b.n	80115e0 <__udivmoddi4+0x40>
 80116de:	4662      	mov	r2, ip
 80116e0:	2320      	movs	r3, #32
 80116e2:	1a9b      	subs	r3, r3, r2
 80116e4:	002a      	movs	r2, r5
 80116e6:	4666      	mov	r6, ip
 80116e8:	409a      	lsls	r2, r3
 80116ea:	0023      	movs	r3, r4
 80116ec:	40f3      	lsrs	r3, r6
 80116ee:	4313      	orrs	r3, r2
 80116f0:	e7d4      	b.n	801169c <__udivmoddi4+0xfc>
 80116f2:	4662      	mov	r2, ip
 80116f4:	2320      	movs	r3, #32
 80116f6:	2100      	movs	r1, #0
 80116f8:	1a9b      	subs	r3, r3, r2
 80116fa:	2200      	movs	r2, #0
 80116fc:	9100      	str	r1, [sp, #0]
 80116fe:	9201      	str	r2, [sp, #4]
 8011700:	2201      	movs	r2, #1
 8011702:	40da      	lsrs	r2, r3
 8011704:	9201      	str	r2, [sp, #4]
 8011706:	e780      	b.n	801160a <__udivmoddi4+0x6a>
 8011708:	2320      	movs	r3, #32
 801170a:	4662      	mov	r2, ip
 801170c:	0026      	movs	r6, r4
 801170e:	1a9b      	subs	r3, r3, r2
 8011710:	40de      	lsrs	r6, r3
 8011712:	002f      	movs	r7, r5
 8011714:	46b0      	mov	r8, r6
 8011716:	4666      	mov	r6, ip
 8011718:	40b7      	lsls	r7, r6
 801171a:	4646      	mov	r6, r8
 801171c:	003b      	movs	r3, r7
 801171e:	4333      	orrs	r3, r6
 8011720:	e7c8      	b.n	80116b4 <__udivmoddi4+0x114>
 8011722:	46c0      	nop			; (mov r8, r8)

08011724 <__eqsf2>:
 8011724:	b570      	push	{r4, r5, r6, lr}
 8011726:	0042      	lsls	r2, r0, #1
 8011728:	024e      	lsls	r6, r1, #9
 801172a:	004c      	lsls	r4, r1, #1
 801172c:	0245      	lsls	r5, r0, #9
 801172e:	0a6d      	lsrs	r5, r5, #9
 8011730:	0e12      	lsrs	r2, r2, #24
 8011732:	0fc3      	lsrs	r3, r0, #31
 8011734:	0a76      	lsrs	r6, r6, #9
 8011736:	0e24      	lsrs	r4, r4, #24
 8011738:	0fc9      	lsrs	r1, r1, #31
 801173a:	2aff      	cmp	r2, #255	; 0xff
 801173c:	d00f      	beq.n	801175e <__eqsf2+0x3a>
 801173e:	2cff      	cmp	r4, #255	; 0xff
 8011740:	d011      	beq.n	8011766 <__eqsf2+0x42>
 8011742:	2001      	movs	r0, #1
 8011744:	42a2      	cmp	r2, r4
 8011746:	d000      	beq.n	801174a <__eqsf2+0x26>
 8011748:	bd70      	pop	{r4, r5, r6, pc}
 801174a:	42b5      	cmp	r5, r6
 801174c:	d1fc      	bne.n	8011748 <__eqsf2+0x24>
 801174e:	428b      	cmp	r3, r1
 8011750:	d00d      	beq.n	801176e <__eqsf2+0x4a>
 8011752:	2a00      	cmp	r2, #0
 8011754:	d1f8      	bne.n	8011748 <__eqsf2+0x24>
 8011756:	0028      	movs	r0, r5
 8011758:	1e45      	subs	r5, r0, #1
 801175a:	41a8      	sbcs	r0, r5
 801175c:	e7f4      	b.n	8011748 <__eqsf2+0x24>
 801175e:	2001      	movs	r0, #1
 8011760:	2d00      	cmp	r5, #0
 8011762:	d1f1      	bne.n	8011748 <__eqsf2+0x24>
 8011764:	e7eb      	b.n	801173e <__eqsf2+0x1a>
 8011766:	2001      	movs	r0, #1
 8011768:	2e00      	cmp	r6, #0
 801176a:	d1ed      	bne.n	8011748 <__eqsf2+0x24>
 801176c:	e7e9      	b.n	8011742 <__eqsf2+0x1e>
 801176e:	2000      	movs	r0, #0
 8011770:	e7ea      	b.n	8011748 <__eqsf2+0x24>
 8011772:	46c0      	nop			; (mov r8, r8)

08011774 <__gesf2>:
 8011774:	b570      	push	{r4, r5, r6, lr}
 8011776:	004a      	lsls	r2, r1, #1
 8011778:	024e      	lsls	r6, r1, #9
 801177a:	0245      	lsls	r5, r0, #9
 801177c:	0044      	lsls	r4, r0, #1
 801177e:	0a6d      	lsrs	r5, r5, #9
 8011780:	0e24      	lsrs	r4, r4, #24
 8011782:	0fc3      	lsrs	r3, r0, #31
 8011784:	0a76      	lsrs	r6, r6, #9
 8011786:	0e12      	lsrs	r2, r2, #24
 8011788:	0fc9      	lsrs	r1, r1, #31
 801178a:	2cff      	cmp	r4, #255	; 0xff
 801178c:	d015      	beq.n	80117ba <__gesf2+0x46>
 801178e:	2aff      	cmp	r2, #255	; 0xff
 8011790:	d00e      	beq.n	80117b0 <__gesf2+0x3c>
 8011792:	2c00      	cmp	r4, #0
 8011794:	d115      	bne.n	80117c2 <__gesf2+0x4e>
 8011796:	2a00      	cmp	r2, #0
 8011798:	d101      	bne.n	801179e <__gesf2+0x2a>
 801179a:	2e00      	cmp	r6, #0
 801179c:	d01c      	beq.n	80117d8 <__gesf2+0x64>
 801179e:	2d00      	cmp	r5, #0
 80117a0:	d014      	beq.n	80117cc <__gesf2+0x58>
 80117a2:	428b      	cmp	r3, r1
 80117a4:	d027      	beq.n	80117f6 <__gesf2+0x82>
 80117a6:	2002      	movs	r0, #2
 80117a8:	3b01      	subs	r3, #1
 80117aa:	4018      	ands	r0, r3
 80117ac:	3801      	subs	r0, #1
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	2e00      	cmp	r6, #0
 80117b2:	d0ee      	beq.n	8011792 <__gesf2+0x1e>
 80117b4:	2002      	movs	r0, #2
 80117b6:	4240      	negs	r0, r0
 80117b8:	e7f9      	b.n	80117ae <__gesf2+0x3a>
 80117ba:	2d00      	cmp	r5, #0
 80117bc:	d1fa      	bne.n	80117b4 <__gesf2+0x40>
 80117be:	2aff      	cmp	r2, #255	; 0xff
 80117c0:	d00e      	beq.n	80117e0 <__gesf2+0x6c>
 80117c2:	2a00      	cmp	r2, #0
 80117c4:	d10e      	bne.n	80117e4 <__gesf2+0x70>
 80117c6:	2e00      	cmp	r6, #0
 80117c8:	d0ed      	beq.n	80117a6 <__gesf2+0x32>
 80117ca:	e00b      	b.n	80117e4 <__gesf2+0x70>
 80117cc:	2301      	movs	r3, #1
 80117ce:	3901      	subs	r1, #1
 80117d0:	4399      	bics	r1, r3
 80117d2:	0008      	movs	r0, r1
 80117d4:	3001      	adds	r0, #1
 80117d6:	e7ea      	b.n	80117ae <__gesf2+0x3a>
 80117d8:	2000      	movs	r0, #0
 80117da:	2d00      	cmp	r5, #0
 80117dc:	d0e7      	beq.n	80117ae <__gesf2+0x3a>
 80117de:	e7e2      	b.n	80117a6 <__gesf2+0x32>
 80117e0:	2e00      	cmp	r6, #0
 80117e2:	d1e7      	bne.n	80117b4 <__gesf2+0x40>
 80117e4:	428b      	cmp	r3, r1
 80117e6:	d1de      	bne.n	80117a6 <__gesf2+0x32>
 80117e8:	4294      	cmp	r4, r2
 80117ea:	dd05      	ble.n	80117f8 <__gesf2+0x84>
 80117ec:	2102      	movs	r1, #2
 80117ee:	1e58      	subs	r0, r3, #1
 80117f0:	4008      	ands	r0, r1
 80117f2:	3801      	subs	r0, #1
 80117f4:	e7db      	b.n	80117ae <__gesf2+0x3a>
 80117f6:	2400      	movs	r4, #0
 80117f8:	42a2      	cmp	r2, r4
 80117fa:	dc04      	bgt.n	8011806 <__gesf2+0x92>
 80117fc:	42b5      	cmp	r5, r6
 80117fe:	d8d2      	bhi.n	80117a6 <__gesf2+0x32>
 8011800:	2000      	movs	r0, #0
 8011802:	42b5      	cmp	r5, r6
 8011804:	d2d3      	bcs.n	80117ae <__gesf2+0x3a>
 8011806:	1e58      	subs	r0, r3, #1
 8011808:	2301      	movs	r3, #1
 801180a:	4398      	bics	r0, r3
 801180c:	3001      	adds	r0, #1
 801180e:	e7ce      	b.n	80117ae <__gesf2+0x3a>

08011810 <__lesf2>:
 8011810:	b530      	push	{r4, r5, lr}
 8011812:	0042      	lsls	r2, r0, #1
 8011814:	0244      	lsls	r4, r0, #9
 8011816:	024d      	lsls	r5, r1, #9
 8011818:	0fc3      	lsrs	r3, r0, #31
 801181a:	0048      	lsls	r0, r1, #1
 801181c:	0a64      	lsrs	r4, r4, #9
 801181e:	0e12      	lsrs	r2, r2, #24
 8011820:	0a6d      	lsrs	r5, r5, #9
 8011822:	0e00      	lsrs	r0, r0, #24
 8011824:	0fc9      	lsrs	r1, r1, #31
 8011826:	2aff      	cmp	r2, #255	; 0xff
 8011828:	d012      	beq.n	8011850 <__lesf2+0x40>
 801182a:	28ff      	cmp	r0, #255	; 0xff
 801182c:	d00c      	beq.n	8011848 <__lesf2+0x38>
 801182e:	2a00      	cmp	r2, #0
 8011830:	d112      	bne.n	8011858 <__lesf2+0x48>
 8011832:	2800      	cmp	r0, #0
 8011834:	d119      	bne.n	801186a <__lesf2+0x5a>
 8011836:	2d00      	cmp	r5, #0
 8011838:	d117      	bne.n	801186a <__lesf2+0x5a>
 801183a:	2c00      	cmp	r4, #0
 801183c:	d02b      	beq.n	8011896 <__lesf2+0x86>
 801183e:	2002      	movs	r0, #2
 8011840:	3b01      	subs	r3, #1
 8011842:	4018      	ands	r0, r3
 8011844:	3801      	subs	r0, #1
 8011846:	e026      	b.n	8011896 <__lesf2+0x86>
 8011848:	2d00      	cmp	r5, #0
 801184a:	d0f0      	beq.n	801182e <__lesf2+0x1e>
 801184c:	2002      	movs	r0, #2
 801184e:	e022      	b.n	8011896 <__lesf2+0x86>
 8011850:	2c00      	cmp	r4, #0
 8011852:	d1fb      	bne.n	801184c <__lesf2+0x3c>
 8011854:	28ff      	cmp	r0, #255	; 0xff
 8011856:	d01f      	beq.n	8011898 <__lesf2+0x88>
 8011858:	2800      	cmp	r0, #0
 801185a:	d11f      	bne.n	801189c <__lesf2+0x8c>
 801185c:	2d00      	cmp	r5, #0
 801185e:	d11d      	bne.n	801189c <__lesf2+0x8c>
 8011860:	2002      	movs	r0, #2
 8011862:	3b01      	subs	r3, #1
 8011864:	4018      	ands	r0, r3
 8011866:	3801      	subs	r0, #1
 8011868:	e015      	b.n	8011896 <__lesf2+0x86>
 801186a:	2c00      	cmp	r4, #0
 801186c:	d00e      	beq.n	801188c <__lesf2+0x7c>
 801186e:	428b      	cmp	r3, r1
 8011870:	d1e5      	bne.n	801183e <__lesf2+0x2e>
 8011872:	2200      	movs	r2, #0
 8011874:	4290      	cmp	r0, r2
 8011876:	dc04      	bgt.n	8011882 <__lesf2+0x72>
 8011878:	42ac      	cmp	r4, r5
 801187a:	d8e0      	bhi.n	801183e <__lesf2+0x2e>
 801187c:	2000      	movs	r0, #0
 801187e:	42ac      	cmp	r4, r5
 8011880:	d209      	bcs.n	8011896 <__lesf2+0x86>
 8011882:	1e58      	subs	r0, r3, #1
 8011884:	2301      	movs	r3, #1
 8011886:	4398      	bics	r0, r3
 8011888:	3001      	adds	r0, #1
 801188a:	e004      	b.n	8011896 <__lesf2+0x86>
 801188c:	2301      	movs	r3, #1
 801188e:	3901      	subs	r1, #1
 8011890:	4399      	bics	r1, r3
 8011892:	0008      	movs	r0, r1
 8011894:	3001      	adds	r0, #1
 8011896:	bd30      	pop	{r4, r5, pc}
 8011898:	2d00      	cmp	r5, #0
 801189a:	d1d7      	bne.n	801184c <__lesf2+0x3c>
 801189c:	428b      	cmp	r3, r1
 801189e:	d1ce      	bne.n	801183e <__lesf2+0x2e>
 80118a0:	4282      	cmp	r2, r0
 80118a2:	dde7      	ble.n	8011874 <__lesf2+0x64>
 80118a4:	2102      	movs	r1, #2
 80118a6:	1e58      	subs	r0, r3, #1
 80118a8:	4008      	ands	r0, r1
 80118aa:	3801      	subs	r0, #1
 80118ac:	e7f3      	b.n	8011896 <__lesf2+0x86>
 80118ae:	46c0      	nop			; (mov r8, r8)

080118b0 <__aeabi_fcmpun>:
 80118b0:	0242      	lsls	r2, r0, #9
 80118b2:	024b      	lsls	r3, r1, #9
 80118b4:	0040      	lsls	r0, r0, #1
 80118b6:	0049      	lsls	r1, r1, #1
 80118b8:	0a52      	lsrs	r2, r2, #9
 80118ba:	0a5b      	lsrs	r3, r3, #9
 80118bc:	0e09      	lsrs	r1, r1, #24
 80118be:	0e00      	lsrs	r0, r0, #24
 80118c0:	28ff      	cmp	r0, #255	; 0xff
 80118c2:	d006      	beq.n	80118d2 <__aeabi_fcmpun+0x22>
 80118c4:	2000      	movs	r0, #0
 80118c6:	29ff      	cmp	r1, #255	; 0xff
 80118c8:	d102      	bne.n	80118d0 <__aeabi_fcmpun+0x20>
 80118ca:	0018      	movs	r0, r3
 80118cc:	1e43      	subs	r3, r0, #1
 80118ce:	4198      	sbcs	r0, r3
 80118d0:	4770      	bx	lr
 80118d2:	38fe      	subs	r0, #254	; 0xfe
 80118d4:	2a00      	cmp	r2, #0
 80118d6:	d1fb      	bne.n	80118d0 <__aeabi_fcmpun+0x20>
 80118d8:	e7f4      	b.n	80118c4 <__aeabi_fcmpun+0x14>
 80118da:	46c0      	nop			; (mov r8, r8)

080118dc <__aeabi_f2iz>:
 80118dc:	0241      	lsls	r1, r0, #9
 80118de:	0042      	lsls	r2, r0, #1
 80118e0:	0fc3      	lsrs	r3, r0, #31
 80118e2:	0a49      	lsrs	r1, r1, #9
 80118e4:	0e12      	lsrs	r2, r2, #24
 80118e6:	2000      	movs	r0, #0
 80118e8:	2a7e      	cmp	r2, #126	; 0x7e
 80118ea:	d90d      	bls.n	8011908 <__aeabi_f2iz+0x2c>
 80118ec:	2a9d      	cmp	r2, #157	; 0x9d
 80118ee:	d80c      	bhi.n	801190a <__aeabi_f2iz+0x2e>
 80118f0:	2080      	movs	r0, #128	; 0x80
 80118f2:	0400      	lsls	r0, r0, #16
 80118f4:	4301      	orrs	r1, r0
 80118f6:	2a95      	cmp	r2, #149	; 0x95
 80118f8:	dc0a      	bgt.n	8011910 <__aeabi_f2iz+0x34>
 80118fa:	2096      	movs	r0, #150	; 0x96
 80118fc:	1a82      	subs	r2, r0, r2
 80118fe:	40d1      	lsrs	r1, r2
 8011900:	4248      	negs	r0, r1
 8011902:	2b00      	cmp	r3, #0
 8011904:	d100      	bne.n	8011908 <__aeabi_f2iz+0x2c>
 8011906:	0008      	movs	r0, r1
 8011908:	4770      	bx	lr
 801190a:	4a03      	ldr	r2, [pc, #12]	; (8011918 <__aeabi_f2iz+0x3c>)
 801190c:	1898      	adds	r0, r3, r2
 801190e:	e7fb      	b.n	8011908 <__aeabi_f2iz+0x2c>
 8011910:	3a96      	subs	r2, #150	; 0x96
 8011912:	4091      	lsls	r1, r2
 8011914:	e7f4      	b.n	8011900 <__aeabi_f2iz+0x24>
 8011916:	46c0      	nop			; (mov r8, r8)
 8011918:	7fffffff 	.word	0x7fffffff

0801191c <__aeabi_i2f>:
 801191c:	b570      	push	{r4, r5, r6, lr}
 801191e:	2800      	cmp	r0, #0
 8011920:	d03d      	beq.n	801199e <__aeabi_i2f+0x82>
 8011922:	17c3      	asrs	r3, r0, #31
 8011924:	18c5      	adds	r5, r0, r3
 8011926:	405d      	eors	r5, r3
 8011928:	0fc4      	lsrs	r4, r0, #31
 801192a:	0028      	movs	r0, r5
 801192c:	f7ff fbd6 	bl	80110dc <__clzsi2>
 8011930:	229e      	movs	r2, #158	; 0x9e
 8011932:	1a12      	subs	r2, r2, r0
 8011934:	2a96      	cmp	r2, #150	; 0x96
 8011936:	dc07      	bgt.n	8011948 <__aeabi_i2f+0x2c>
 8011938:	b2d2      	uxtb	r2, r2
 801193a:	2808      	cmp	r0, #8
 801193c:	dd33      	ble.n	80119a6 <__aeabi_i2f+0x8a>
 801193e:	3808      	subs	r0, #8
 8011940:	4085      	lsls	r5, r0
 8011942:	0268      	lsls	r0, r5, #9
 8011944:	0a40      	lsrs	r0, r0, #9
 8011946:	e023      	b.n	8011990 <__aeabi_i2f+0x74>
 8011948:	2a99      	cmp	r2, #153	; 0x99
 801194a:	dd0b      	ble.n	8011964 <__aeabi_i2f+0x48>
 801194c:	2305      	movs	r3, #5
 801194e:	0029      	movs	r1, r5
 8011950:	1a1b      	subs	r3, r3, r0
 8011952:	40d9      	lsrs	r1, r3
 8011954:	0003      	movs	r3, r0
 8011956:	331b      	adds	r3, #27
 8011958:	409d      	lsls	r5, r3
 801195a:	002b      	movs	r3, r5
 801195c:	1e5d      	subs	r5, r3, #1
 801195e:	41ab      	sbcs	r3, r5
 8011960:	4319      	orrs	r1, r3
 8011962:	000d      	movs	r5, r1
 8011964:	2805      	cmp	r0, #5
 8011966:	dd01      	ble.n	801196c <__aeabi_i2f+0x50>
 8011968:	1f43      	subs	r3, r0, #5
 801196a:	409d      	lsls	r5, r3
 801196c:	002b      	movs	r3, r5
 801196e:	490f      	ldr	r1, [pc, #60]	; (80119ac <__aeabi_i2f+0x90>)
 8011970:	400b      	ands	r3, r1
 8011972:	076e      	lsls	r6, r5, #29
 8011974:	d009      	beq.n	801198a <__aeabi_i2f+0x6e>
 8011976:	260f      	movs	r6, #15
 8011978:	4035      	ands	r5, r6
 801197a:	2d04      	cmp	r5, #4
 801197c:	d005      	beq.n	801198a <__aeabi_i2f+0x6e>
 801197e:	3304      	adds	r3, #4
 8011980:	015d      	lsls	r5, r3, #5
 8011982:	d502      	bpl.n	801198a <__aeabi_i2f+0x6e>
 8011984:	229f      	movs	r2, #159	; 0x9f
 8011986:	400b      	ands	r3, r1
 8011988:	1a12      	subs	r2, r2, r0
 801198a:	019b      	lsls	r3, r3, #6
 801198c:	0a58      	lsrs	r0, r3, #9
 801198e:	b2d2      	uxtb	r2, r2
 8011990:	0240      	lsls	r0, r0, #9
 8011992:	05d2      	lsls	r2, r2, #23
 8011994:	0a40      	lsrs	r0, r0, #9
 8011996:	07e4      	lsls	r4, r4, #31
 8011998:	4310      	orrs	r0, r2
 801199a:	4320      	orrs	r0, r4
 801199c:	bd70      	pop	{r4, r5, r6, pc}
 801199e:	2400      	movs	r4, #0
 80119a0:	2200      	movs	r2, #0
 80119a2:	2000      	movs	r0, #0
 80119a4:	e7f4      	b.n	8011990 <__aeabi_i2f+0x74>
 80119a6:	0268      	lsls	r0, r5, #9
 80119a8:	0a40      	lsrs	r0, r0, #9
 80119aa:	e7f1      	b.n	8011990 <__aeabi_i2f+0x74>
 80119ac:	fbffffff 	.word	0xfbffffff

080119b0 <__aeabi_ui2f>:
 80119b0:	b570      	push	{r4, r5, r6, lr}
 80119b2:	1e04      	subs	r4, r0, #0
 80119b4:	d034      	beq.n	8011a20 <__aeabi_ui2f+0x70>
 80119b6:	f7ff fb91 	bl	80110dc <__clzsi2>
 80119ba:	229e      	movs	r2, #158	; 0x9e
 80119bc:	1a12      	subs	r2, r2, r0
 80119be:	2a96      	cmp	r2, #150	; 0x96
 80119c0:	dc07      	bgt.n	80119d2 <__aeabi_ui2f+0x22>
 80119c2:	b2d2      	uxtb	r2, r2
 80119c4:	2808      	cmp	r0, #8
 80119c6:	dd2e      	ble.n	8011a26 <__aeabi_ui2f+0x76>
 80119c8:	3808      	subs	r0, #8
 80119ca:	4084      	lsls	r4, r0
 80119cc:	0260      	lsls	r0, r4, #9
 80119ce:	0a40      	lsrs	r0, r0, #9
 80119d0:	e021      	b.n	8011a16 <__aeabi_ui2f+0x66>
 80119d2:	2a99      	cmp	r2, #153	; 0x99
 80119d4:	dd09      	ble.n	80119ea <__aeabi_ui2f+0x3a>
 80119d6:	0003      	movs	r3, r0
 80119d8:	0021      	movs	r1, r4
 80119da:	331b      	adds	r3, #27
 80119dc:	4099      	lsls	r1, r3
 80119de:	1e4b      	subs	r3, r1, #1
 80119e0:	4199      	sbcs	r1, r3
 80119e2:	2305      	movs	r3, #5
 80119e4:	1a1b      	subs	r3, r3, r0
 80119e6:	40dc      	lsrs	r4, r3
 80119e8:	430c      	orrs	r4, r1
 80119ea:	2805      	cmp	r0, #5
 80119ec:	dd01      	ble.n	80119f2 <__aeabi_ui2f+0x42>
 80119ee:	1f43      	subs	r3, r0, #5
 80119f0:	409c      	lsls	r4, r3
 80119f2:	0023      	movs	r3, r4
 80119f4:	490d      	ldr	r1, [pc, #52]	; (8011a2c <__aeabi_ui2f+0x7c>)
 80119f6:	400b      	ands	r3, r1
 80119f8:	0765      	lsls	r5, r4, #29
 80119fa:	d009      	beq.n	8011a10 <__aeabi_ui2f+0x60>
 80119fc:	250f      	movs	r5, #15
 80119fe:	402c      	ands	r4, r5
 8011a00:	2c04      	cmp	r4, #4
 8011a02:	d005      	beq.n	8011a10 <__aeabi_ui2f+0x60>
 8011a04:	3304      	adds	r3, #4
 8011a06:	015c      	lsls	r4, r3, #5
 8011a08:	d502      	bpl.n	8011a10 <__aeabi_ui2f+0x60>
 8011a0a:	229f      	movs	r2, #159	; 0x9f
 8011a0c:	400b      	ands	r3, r1
 8011a0e:	1a12      	subs	r2, r2, r0
 8011a10:	019b      	lsls	r3, r3, #6
 8011a12:	0a58      	lsrs	r0, r3, #9
 8011a14:	b2d2      	uxtb	r2, r2
 8011a16:	0240      	lsls	r0, r0, #9
 8011a18:	05d2      	lsls	r2, r2, #23
 8011a1a:	0a40      	lsrs	r0, r0, #9
 8011a1c:	4310      	orrs	r0, r2
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	2200      	movs	r2, #0
 8011a22:	2000      	movs	r0, #0
 8011a24:	e7f7      	b.n	8011a16 <__aeabi_ui2f+0x66>
 8011a26:	0260      	lsls	r0, r4, #9
 8011a28:	0a40      	lsrs	r0, r0, #9
 8011a2a:	e7f4      	b.n	8011a16 <__aeabi_ui2f+0x66>
 8011a2c:	fbffffff 	.word	0xfbffffff

08011a30 <__aeabi_dadd>:
 8011a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a32:	464f      	mov	r7, r9
 8011a34:	4646      	mov	r6, r8
 8011a36:	46d6      	mov	lr, sl
 8011a38:	000c      	movs	r4, r1
 8011a3a:	0309      	lsls	r1, r1, #12
 8011a3c:	b5c0      	push	{r6, r7, lr}
 8011a3e:	0a49      	lsrs	r1, r1, #9
 8011a40:	0f47      	lsrs	r7, r0, #29
 8011a42:	005e      	lsls	r6, r3, #1
 8011a44:	4339      	orrs	r1, r7
 8011a46:	031f      	lsls	r7, r3, #12
 8011a48:	0fdb      	lsrs	r3, r3, #31
 8011a4a:	469c      	mov	ip, r3
 8011a4c:	0065      	lsls	r5, r4, #1
 8011a4e:	0a7b      	lsrs	r3, r7, #9
 8011a50:	0f57      	lsrs	r7, r2, #29
 8011a52:	431f      	orrs	r7, r3
 8011a54:	0d6d      	lsrs	r5, r5, #21
 8011a56:	0fe4      	lsrs	r4, r4, #31
 8011a58:	0d76      	lsrs	r6, r6, #21
 8011a5a:	46a1      	mov	r9, r4
 8011a5c:	00c0      	lsls	r0, r0, #3
 8011a5e:	46b8      	mov	r8, r7
 8011a60:	00d2      	lsls	r2, r2, #3
 8011a62:	1bab      	subs	r3, r5, r6
 8011a64:	4564      	cmp	r4, ip
 8011a66:	d07b      	beq.n	8011b60 <__aeabi_dadd+0x130>
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	dd5f      	ble.n	8011b2c <__aeabi_dadd+0xfc>
 8011a6c:	2e00      	cmp	r6, #0
 8011a6e:	d000      	beq.n	8011a72 <__aeabi_dadd+0x42>
 8011a70:	e0a4      	b.n	8011bbc <__aeabi_dadd+0x18c>
 8011a72:	003e      	movs	r6, r7
 8011a74:	4316      	orrs	r6, r2
 8011a76:	d100      	bne.n	8011a7a <__aeabi_dadd+0x4a>
 8011a78:	e112      	b.n	8011ca0 <__aeabi_dadd+0x270>
 8011a7a:	1e5e      	subs	r6, r3, #1
 8011a7c:	2e00      	cmp	r6, #0
 8011a7e:	d000      	beq.n	8011a82 <__aeabi_dadd+0x52>
 8011a80:	e19e      	b.n	8011dc0 <__aeabi_dadd+0x390>
 8011a82:	1a87      	subs	r7, r0, r2
 8011a84:	4643      	mov	r3, r8
 8011a86:	42b8      	cmp	r0, r7
 8011a88:	4180      	sbcs	r0, r0
 8011a8a:	2501      	movs	r5, #1
 8011a8c:	1ac9      	subs	r1, r1, r3
 8011a8e:	4240      	negs	r0, r0
 8011a90:	1a09      	subs	r1, r1, r0
 8011a92:	020b      	lsls	r3, r1, #8
 8011a94:	d400      	bmi.n	8011a98 <__aeabi_dadd+0x68>
 8011a96:	e131      	b.n	8011cfc <__aeabi_dadd+0x2cc>
 8011a98:	0249      	lsls	r1, r1, #9
 8011a9a:	0a4e      	lsrs	r6, r1, #9
 8011a9c:	2e00      	cmp	r6, #0
 8011a9e:	d100      	bne.n	8011aa2 <__aeabi_dadd+0x72>
 8011aa0:	e16e      	b.n	8011d80 <__aeabi_dadd+0x350>
 8011aa2:	0030      	movs	r0, r6
 8011aa4:	f7ff fb1a 	bl	80110dc <__clzsi2>
 8011aa8:	0003      	movs	r3, r0
 8011aaa:	3b08      	subs	r3, #8
 8011aac:	2b1f      	cmp	r3, #31
 8011aae:	dd00      	ble.n	8011ab2 <__aeabi_dadd+0x82>
 8011ab0:	e161      	b.n	8011d76 <__aeabi_dadd+0x346>
 8011ab2:	2220      	movs	r2, #32
 8011ab4:	0039      	movs	r1, r7
 8011ab6:	1ad2      	subs	r2, r2, r3
 8011ab8:	409e      	lsls	r6, r3
 8011aba:	40d1      	lsrs	r1, r2
 8011abc:	409f      	lsls	r7, r3
 8011abe:	430e      	orrs	r6, r1
 8011ac0:	429d      	cmp	r5, r3
 8011ac2:	dd00      	ble.n	8011ac6 <__aeabi_dadd+0x96>
 8011ac4:	e151      	b.n	8011d6a <__aeabi_dadd+0x33a>
 8011ac6:	1b5d      	subs	r5, r3, r5
 8011ac8:	1c6b      	adds	r3, r5, #1
 8011aca:	2b1f      	cmp	r3, #31
 8011acc:	dd00      	ble.n	8011ad0 <__aeabi_dadd+0xa0>
 8011ace:	e17c      	b.n	8011dca <__aeabi_dadd+0x39a>
 8011ad0:	2120      	movs	r1, #32
 8011ad2:	1ac9      	subs	r1, r1, r3
 8011ad4:	003d      	movs	r5, r7
 8011ad6:	0030      	movs	r0, r6
 8011ad8:	408f      	lsls	r7, r1
 8011ada:	4088      	lsls	r0, r1
 8011adc:	40dd      	lsrs	r5, r3
 8011ade:	1e79      	subs	r1, r7, #1
 8011ae0:	418f      	sbcs	r7, r1
 8011ae2:	0031      	movs	r1, r6
 8011ae4:	2207      	movs	r2, #7
 8011ae6:	4328      	orrs	r0, r5
 8011ae8:	40d9      	lsrs	r1, r3
 8011aea:	2500      	movs	r5, #0
 8011aec:	4307      	orrs	r7, r0
 8011aee:	403a      	ands	r2, r7
 8011af0:	2a00      	cmp	r2, #0
 8011af2:	d009      	beq.n	8011b08 <__aeabi_dadd+0xd8>
 8011af4:	230f      	movs	r3, #15
 8011af6:	403b      	ands	r3, r7
 8011af8:	2b04      	cmp	r3, #4
 8011afa:	d005      	beq.n	8011b08 <__aeabi_dadd+0xd8>
 8011afc:	1d3b      	adds	r3, r7, #4
 8011afe:	42bb      	cmp	r3, r7
 8011b00:	41bf      	sbcs	r7, r7
 8011b02:	427f      	negs	r7, r7
 8011b04:	19c9      	adds	r1, r1, r7
 8011b06:	001f      	movs	r7, r3
 8011b08:	020b      	lsls	r3, r1, #8
 8011b0a:	d400      	bmi.n	8011b0e <__aeabi_dadd+0xde>
 8011b0c:	e226      	b.n	8011f5c <__aeabi_dadd+0x52c>
 8011b0e:	1c6a      	adds	r2, r5, #1
 8011b10:	4bc6      	ldr	r3, [pc, #792]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011b12:	0555      	lsls	r5, r2, #21
 8011b14:	0d6d      	lsrs	r5, r5, #21
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d100      	bne.n	8011b1c <__aeabi_dadd+0xec>
 8011b1a:	e106      	b.n	8011d2a <__aeabi_dadd+0x2fa>
 8011b1c:	4ac4      	ldr	r2, [pc, #784]	; (8011e30 <__aeabi_dadd+0x400>)
 8011b1e:	08ff      	lsrs	r7, r7, #3
 8011b20:	400a      	ands	r2, r1
 8011b22:	0753      	lsls	r3, r2, #29
 8011b24:	0252      	lsls	r2, r2, #9
 8011b26:	433b      	orrs	r3, r7
 8011b28:	0b12      	lsrs	r2, r2, #12
 8011b2a:	e08e      	b.n	8011c4a <__aeabi_dadd+0x21a>
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d000      	beq.n	8011b32 <__aeabi_dadd+0x102>
 8011b30:	e0b8      	b.n	8011ca4 <__aeabi_dadd+0x274>
 8011b32:	1c6b      	adds	r3, r5, #1
 8011b34:	055b      	lsls	r3, r3, #21
 8011b36:	0d5b      	lsrs	r3, r3, #21
 8011b38:	2b01      	cmp	r3, #1
 8011b3a:	dc00      	bgt.n	8011b3e <__aeabi_dadd+0x10e>
 8011b3c:	e130      	b.n	8011da0 <__aeabi_dadd+0x370>
 8011b3e:	1a87      	subs	r7, r0, r2
 8011b40:	4643      	mov	r3, r8
 8011b42:	42b8      	cmp	r0, r7
 8011b44:	41b6      	sbcs	r6, r6
 8011b46:	1acb      	subs	r3, r1, r3
 8011b48:	4276      	negs	r6, r6
 8011b4a:	1b9e      	subs	r6, r3, r6
 8011b4c:	0233      	lsls	r3, r6, #8
 8011b4e:	d500      	bpl.n	8011b52 <__aeabi_dadd+0x122>
 8011b50:	e14c      	b.n	8011dec <__aeabi_dadd+0x3bc>
 8011b52:	003b      	movs	r3, r7
 8011b54:	4333      	orrs	r3, r6
 8011b56:	d1a1      	bne.n	8011a9c <__aeabi_dadd+0x6c>
 8011b58:	2200      	movs	r2, #0
 8011b5a:	2400      	movs	r4, #0
 8011b5c:	2500      	movs	r5, #0
 8011b5e:	e070      	b.n	8011c42 <__aeabi_dadd+0x212>
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	dc00      	bgt.n	8011b66 <__aeabi_dadd+0x136>
 8011b64:	e0e5      	b.n	8011d32 <__aeabi_dadd+0x302>
 8011b66:	2e00      	cmp	r6, #0
 8011b68:	d100      	bne.n	8011b6c <__aeabi_dadd+0x13c>
 8011b6a:	e083      	b.n	8011c74 <__aeabi_dadd+0x244>
 8011b6c:	4eaf      	ldr	r6, [pc, #700]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011b6e:	42b5      	cmp	r5, r6
 8011b70:	d060      	beq.n	8011c34 <__aeabi_dadd+0x204>
 8011b72:	2680      	movs	r6, #128	; 0x80
 8011b74:	0436      	lsls	r6, r6, #16
 8011b76:	4337      	orrs	r7, r6
 8011b78:	46b8      	mov	r8, r7
 8011b7a:	2b38      	cmp	r3, #56	; 0x38
 8011b7c:	dc00      	bgt.n	8011b80 <__aeabi_dadd+0x150>
 8011b7e:	e13e      	b.n	8011dfe <__aeabi_dadd+0x3ce>
 8011b80:	4643      	mov	r3, r8
 8011b82:	4313      	orrs	r3, r2
 8011b84:	001f      	movs	r7, r3
 8011b86:	1e7a      	subs	r2, r7, #1
 8011b88:	4197      	sbcs	r7, r2
 8011b8a:	183f      	adds	r7, r7, r0
 8011b8c:	4287      	cmp	r7, r0
 8011b8e:	4180      	sbcs	r0, r0
 8011b90:	4240      	negs	r0, r0
 8011b92:	1809      	adds	r1, r1, r0
 8011b94:	020b      	lsls	r3, r1, #8
 8011b96:	d400      	bmi.n	8011b9a <__aeabi_dadd+0x16a>
 8011b98:	e0b0      	b.n	8011cfc <__aeabi_dadd+0x2cc>
 8011b9a:	4ba4      	ldr	r3, [pc, #656]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011b9c:	3501      	adds	r5, #1
 8011b9e:	429d      	cmp	r5, r3
 8011ba0:	d100      	bne.n	8011ba4 <__aeabi_dadd+0x174>
 8011ba2:	e0c3      	b.n	8011d2c <__aeabi_dadd+0x2fc>
 8011ba4:	4aa2      	ldr	r2, [pc, #648]	; (8011e30 <__aeabi_dadd+0x400>)
 8011ba6:	087b      	lsrs	r3, r7, #1
 8011ba8:	400a      	ands	r2, r1
 8011baa:	2101      	movs	r1, #1
 8011bac:	400f      	ands	r7, r1
 8011bae:	431f      	orrs	r7, r3
 8011bb0:	0851      	lsrs	r1, r2, #1
 8011bb2:	07d3      	lsls	r3, r2, #31
 8011bb4:	2207      	movs	r2, #7
 8011bb6:	431f      	orrs	r7, r3
 8011bb8:	403a      	ands	r2, r7
 8011bba:	e799      	b.n	8011af0 <__aeabi_dadd+0xc0>
 8011bbc:	4e9b      	ldr	r6, [pc, #620]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011bbe:	42b5      	cmp	r5, r6
 8011bc0:	d038      	beq.n	8011c34 <__aeabi_dadd+0x204>
 8011bc2:	2680      	movs	r6, #128	; 0x80
 8011bc4:	0436      	lsls	r6, r6, #16
 8011bc6:	4337      	orrs	r7, r6
 8011bc8:	46b8      	mov	r8, r7
 8011bca:	2b38      	cmp	r3, #56	; 0x38
 8011bcc:	dd00      	ble.n	8011bd0 <__aeabi_dadd+0x1a0>
 8011bce:	e0dc      	b.n	8011d8a <__aeabi_dadd+0x35a>
 8011bd0:	2b1f      	cmp	r3, #31
 8011bd2:	dc00      	bgt.n	8011bd6 <__aeabi_dadd+0x1a6>
 8011bd4:	e130      	b.n	8011e38 <__aeabi_dadd+0x408>
 8011bd6:	001e      	movs	r6, r3
 8011bd8:	4647      	mov	r7, r8
 8011bda:	3e20      	subs	r6, #32
 8011bdc:	40f7      	lsrs	r7, r6
 8011bde:	46bc      	mov	ip, r7
 8011be0:	2b20      	cmp	r3, #32
 8011be2:	d004      	beq.n	8011bee <__aeabi_dadd+0x1be>
 8011be4:	2640      	movs	r6, #64	; 0x40
 8011be6:	1af3      	subs	r3, r6, r3
 8011be8:	4646      	mov	r6, r8
 8011bea:	409e      	lsls	r6, r3
 8011bec:	4332      	orrs	r2, r6
 8011bee:	0017      	movs	r7, r2
 8011bf0:	4663      	mov	r3, ip
 8011bf2:	1e7a      	subs	r2, r7, #1
 8011bf4:	4197      	sbcs	r7, r2
 8011bf6:	431f      	orrs	r7, r3
 8011bf8:	e0cc      	b.n	8011d94 <__aeabi_dadd+0x364>
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d100      	bne.n	8011c00 <__aeabi_dadd+0x1d0>
 8011bfe:	e204      	b.n	801200a <__aeabi_dadd+0x5da>
 8011c00:	4643      	mov	r3, r8
 8011c02:	4313      	orrs	r3, r2
 8011c04:	d100      	bne.n	8011c08 <__aeabi_dadd+0x1d8>
 8011c06:	e159      	b.n	8011ebc <__aeabi_dadd+0x48c>
 8011c08:	074b      	lsls	r3, r1, #29
 8011c0a:	08c0      	lsrs	r0, r0, #3
 8011c0c:	4318      	orrs	r0, r3
 8011c0e:	2380      	movs	r3, #128	; 0x80
 8011c10:	08c9      	lsrs	r1, r1, #3
 8011c12:	031b      	lsls	r3, r3, #12
 8011c14:	4219      	tst	r1, r3
 8011c16:	d008      	beq.n	8011c2a <__aeabi_dadd+0x1fa>
 8011c18:	4645      	mov	r5, r8
 8011c1a:	08ed      	lsrs	r5, r5, #3
 8011c1c:	421d      	tst	r5, r3
 8011c1e:	d104      	bne.n	8011c2a <__aeabi_dadd+0x1fa>
 8011c20:	4643      	mov	r3, r8
 8011c22:	08d0      	lsrs	r0, r2, #3
 8011c24:	0759      	lsls	r1, r3, #29
 8011c26:	4308      	orrs	r0, r1
 8011c28:	0029      	movs	r1, r5
 8011c2a:	0f42      	lsrs	r2, r0, #29
 8011c2c:	00c9      	lsls	r1, r1, #3
 8011c2e:	4d7f      	ldr	r5, [pc, #508]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011c30:	4311      	orrs	r1, r2
 8011c32:	00c0      	lsls	r0, r0, #3
 8011c34:	074b      	lsls	r3, r1, #29
 8011c36:	08ca      	lsrs	r2, r1, #3
 8011c38:	497c      	ldr	r1, [pc, #496]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011c3a:	08c0      	lsrs	r0, r0, #3
 8011c3c:	4303      	orrs	r3, r0
 8011c3e:	428d      	cmp	r5, r1
 8011c40:	d068      	beq.n	8011d14 <__aeabi_dadd+0x2e4>
 8011c42:	0312      	lsls	r2, r2, #12
 8011c44:	056d      	lsls	r5, r5, #21
 8011c46:	0b12      	lsrs	r2, r2, #12
 8011c48:	0d6d      	lsrs	r5, r5, #21
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	0312      	lsls	r2, r2, #12
 8011c4e:	0018      	movs	r0, r3
 8011c50:	0b13      	lsrs	r3, r2, #12
 8011c52:	0d0a      	lsrs	r2, r1, #20
 8011c54:	0512      	lsls	r2, r2, #20
 8011c56:	431a      	orrs	r2, r3
 8011c58:	4b76      	ldr	r3, [pc, #472]	; (8011e34 <__aeabi_dadd+0x404>)
 8011c5a:	052d      	lsls	r5, r5, #20
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	432b      	orrs	r3, r5
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	07e4      	lsls	r4, r4, #31
 8011c64:	085b      	lsrs	r3, r3, #1
 8011c66:	4323      	orrs	r3, r4
 8011c68:	0019      	movs	r1, r3
 8011c6a:	bc1c      	pop	{r2, r3, r4}
 8011c6c:	4690      	mov	r8, r2
 8011c6e:	4699      	mov	r9, r3
 8011c70:	46a2      	mov	sl, r4
 8011c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c74:	003e      	movs	r6, r7
 8011c76:	4316      	orrs	r6, r2
 8011c78:	d012      	beq.n	8011ca0 <__aeabi_dadd+0x270>
 8011c7a:	1e5e      	subs	r6, r3, #1
 8011c7c:	2e00      	cmp	r6, #0
 8011c7e:	d000      	beq.n	8011c82 <__aeabi_dadd+0x252>
 8011c80:	e100      	b.n	8011e84 <__aeabi_dadd+0x454>
 8011c82:	1887      	adds	r7, r0, r2
 8011c84:	4287      	cmp	r7, r0
 8011c86:	4180      	sbcs	r0, r0
 8011c88:	4441      	add	r1, r8
 8011c8a:	4240      	negs	r0, r0
 8011c8c:	1809      	adds	r1, r1, r0
 8011c8e:	2501      	movs	r5, #1
 8011c90:	020b      	lsls	r3, r1, #8
 8011c92:	d533      	bpl.n	8011cfc <__aeabi_dadd+0x2cc>
 8011c94:	2502      	movs	r5, #2
 8011c96:	e785      	b.n	8011ba4 <__aeabi_dadd+0x174>
 8011c98:	4664      	mov	r4, ip
 8011c9a:	0033      	movs	r3, r6
 8011c9c:	4641      	mov	r1, r8
 8011c9e:	0010      	movs	r0, r2
 8011ca0:	001d      	movs	r5, r3
 8011ca2:	e7c7      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011ca4:	2d00      	cmp	r5, #0
 8011ca6:	d000      	beq.n	8011caa <__aeabi_dadd+0x27a>
 8011ca8:	e0da      	b.n	8011e60 <__aeabi_dadd+0x430>
 8011caa:	000c      	movs	r4, r1
 8011cac:	4304      	orrs	r4, r0
 8011cae:	d0f3      	beq.n	8011c98 <__aeabi_dadd+0x268>
 8011cb0:	1c5c      	adds	r4, r3, #1
 8011cb2:	d100      	bne.n	8011cb6 <__aeabi_dadd+0x286>
 8011cb4:	e19f      	b.n	8011ff6 <__aeabi_dadd+0x5c6>
 8011cb6:	4c5d      	ldr	r4, [pc, #372]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011cb8:	42a6      	cmp	r6, r4
 8011cba:	d100      	bne.n	8011cbe <__aeabi_dadd+0x28e>
 8011cbc:	e12f      	b.n	8011f1e <__aeabi_dadd+0x4ee>
 8011cbe:	43db      	mvns	r3, r3
 8011cc0:	2b38      	cmp	r3, #56	; 0x38
 8011cc2:	dd00      	ble.n	8011cc6 <__aeabi_dadd+0x296>
 8011cc4:	e166      	b.n	8011f94 <__aeabi_dadd+0x564>
 8011cc6:	2b1f      	cmp	r3, #31
 8011cc8:	dd00      	ble.n	8011ccc <__aeabi_dadd+0x29c>
 8011cca:	e183      	b.n	8011fd4 <__aeabi_dadd+0x5a4>
 8011ccc:	2420      	movs	r4, #32
 8011cce:	0005      	movs	r5, r0
 8011cd0:	1ae4      	subs	r4, r4, r3
 8011cd2:	000f      	movs	r7, r1
 8011cd4:	40dd      	lsrs	r5, r3
 8011cd6:	40d9      	lsrs	r1, r3
 8011cd8:	40a0      	lsls	r0, r4
 8011cda:	4643      	mov	r3, r8
 8011cdc:	40a7      	lsls	r7, r4
 8011cde:	1a5b      	subs	r3, r3, r1
 8011ce0:	1e44      	subs	r4, r0, #1
 8011ce2:	41a0      	sbcs	r0, r4
 8011ce4:	4698      	mov	r8, r3
 8011ce6:	432f      	orrs	r7, r5
 8011ce8:	4338      	orrs	r0, r7
 8011cea:	1a17      	subs	r7, r2, r0
 8011cec:	42ba      	cmp	r2, r7
 8011cee:	4192      	sbcs	r2, r2
 8011cf0:	4643      	mov	r3, r8
 8011cf2:	4252      	negs	r2, r2
 8011cf4:	1a99      	subs	r1, r3, r2
 8011cf6:	4664      	mov	r4, ip
 8011cf8:	0035      	movs	r5, r6
 8011cfa:	e6ca      	b.n	8011a92 <__aeabi_dadd+0x62>
 8011cfc:	2207      	movs	r2, #7
 8011cfe:	403a      	ands	r2, r7
 8011d00:	2a00      	cmp	r2, #0
 8011d02:	d000      	beq.n	8011d06 <__aeabi_dadd+0x2d6>
 8011d04:	e6f6      	b.n	8011af4 <__aeabi_dadd+0xc4>
 8011d06:	074b      	lsls	r3, r1, #29
 8011d08:	08ca      	lsrs	r2, r1, #3
 8011d0a:	4948      	ldr	r1, [pc, #288]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011d0c:	08ff      	lsrs	r7, r7, #3
 8011d0e:	433b      	orrs	r3, r7
 8011d10:	428d      	cmp	r5, r1
 8011d12:	d196      	bne.n	8011c42 <__aeabi_dadd+0x212>
 8011d14:	0019      	movs	r1, r3
 8011d16:	4311      	orrs	r1, r2
 8011d18:	d100      	bne.n	8011d1c <__aeabi_dadd+0x2ec>
 8011d1a:	e19e      	b.n	801205a <__aeabi_dadd+0x62a>
 8011d1c:	2180      	movs	r1, #128	; 0x80
 8011d1e:	0309      	lsls	r1, r1, #12
 8011d20:	430a      	orrs	r2, r1
 8011d22:	0312      	lsls	r2, r2, #12
 8011d24:	0b12      	lsrs	r2, r2, #12
 8011d26:	4d41      	ldr	r5, [pc, #260]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011d28:	e78f      	b.n	8011c4a <__aeabi_dadd+0x21a>
 8011d2a:	0015      	movs	r5, r2
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e78b      	b.n	8011c4a <__aeabi_dadd+0x21a>
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d000      	beq.n	8011d38 <__aeabi_dadd+0x308>
 8011d36:	e0c7      	b.n	8011ec8 <__aeabi_dadd+0x498>
 8011d38:	1c6b      	adds	r3, r5, #1
 8011d3a:	055f      	lsls	r7, r3, #21
 8011d3c:	0d7f      	lsrs	r7, r7, #21
 8011d3e:	2f01      	cmp	r7, #1
 8011d40:	dc00      	bgt.n	8011d44 <__aeabi_dadd+0x314>
 8011d42:	e0f1      	b.n	8011f28 <__aeabi_dadd+0x4f8>
 8011d44:	4d39      	ldr	r5, [pc, #228]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011d46:	42ab      	cmp	r3, r5
 8011d48:	d100      	bne.n	8011d4c <__aeabi_dadd+0x31c>
 8011d4a:	e0b9      	b.n	8011ec0 <__aeabi_dadd+0x490>
 8011d4c:	1885      	adds	r5, r0, r2
 8011d4e:	000a      	movs	r2, r1
 8011d50:	4285      	cmp	r5, r0
 8011d52:	4189      	sbcs	r1, r1
 8011d54:	4442      	add	r2, r8
 8011d56:	4249      	negs	r1, r1
 8011d58:	1851      	adds	r1, r2, r1
 8011d5a:	2207      	movs	r2, #7
 8011d5c:	07cf      	lsls	r7, r1, #31
 8011d5e:	086d      	lsrs	r5, r5, #1
 8011d60:	432f      	orrs	r7, r5
 8011d62:	0849      	lsrs	r1, r1, #1
 8011d64:	403a      	ands	r2, r7
 8011d66:	001d      	movs	r5, r3
 8011d68:	e6c2      	b.n	8011af0 <__aeabi_dadd+0xc0>
 8011d6a:	2207      	movs	r2, #7
 8011d6c:	4930      	ldr	r1, [pc, #192]	; (8011e30 <__aeabi_dadd+0x400>)
 8011d6e:	1aed      	subs	r5, r5, r3
 8011d70:	4031      	ands	r1, r6
 8011d72:	403a      	ands	r2, r7
 8011d74:	e6bc      	b.n	8011af0 <__aeabi_dadd+0xc0>
 8011d76:	003e      	movs	r6, r7
 8011d78:	3828      	subs	r0, #40	; 0x28
 8011d7a:	4086      	lsls	r6, r0
 8011d7c:	2700      	movs	r7, #0
 8011d7e:	e69f      	b.n	8011ac0 <__aeabi_dadd+0x90>
 8011d80:	0038      	movs	r0, r7
 8011d82:	f7ff f9ab 	bl	80110dc <__clzsi2>
 8011d86:	3020      	adds	r0, #32
 8011d88:	e68e      	b.n	8011aa8 <__aeabi_dadd+0x78>
 8011d8a:	4643      	mov	r3, r8
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	001f      	movs	r7, r3
 8011d90:	1e7a      	subs	r2, r7, #1
 8011d92:	4197      	sbcs	r7, r2
 8011d94:	1bc7      	subs	r7, r0, r7
 8011d96:	42b8      	cmp	r0, r7
 8011d98:	4180      	sbcs	r0, r0
 8011d9a:	4240      	negs	r0, r0
 8011d9c:	1a09      	subs	r1, r1, r0
 8011d9e:	e678      	b.n	8011a92 <__aeabi_dadd+0x62>
 8011da0:	000e      	movs	r6, r1
 8011da2:	003b      	movs	r3, r7
 8011da4:	4306      	orrs	r6, r0
 8011da6:	4313      	orrs	r3, r2
 8011da8:	2d00      	cmp	r5, #0
 8011daa:	d161      	bne.n	8011e70 <__aeabi_dadd+0x440>
 8011dac:	2e00      	cmp	r6, #0
 8011dae:	d000      	beq.n	8011db2 <__aeabi_dadd+0x382>
 8011db0:	e0f4      	b.n	8011f9c <__aeabi_dadd+0x56c>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d100      	bne.n	8011db8 <__aeabi_dadd+0x388>
 8011db6:	e11b      	b.n	8011ff0 <__aeabi_dadd+0x5c0>
 8011db8:	4664      	mov	r4, ip
 8011dba:	0039      	movs	r1, r7
 8011dbc:	0010      	movs	r0, r2
 8011dbe:	e739      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011dc0:	4f1a      	ldr	r7, [pc, #104]	; (8011e2c <__aeabi_dadd+0x3fc>)
 8011dc2:	42bb      	cmp	r3, r7
 8011dc4:	d07a      	beq.n	8011ebc <__aeabi_dadd+0x48c>
 8011dc6:	0033      	movs	r3, r6
 8011dc8:	e6ff      	b.n	8011bca <__aeabi_dadd+0x19a>
 8011dca:	0030      	movs	r0, r6
 8011dcc:	3d1f      	subs	r5, #31
 8011dce:	40e8      	lsrs	r0, r5
 8011dd0:	2b20      	cmp	r3, #32
 8011dd2:	d003      	beq.n	8011ddc <__aeabi_dadd+0x3ac>
 8011dd4:	2140      	movs	r1, #64	; 0x40
 8011dd6:	1acb      	subs	r3, r1, r3
 8011dd8:	409e      	lsls	r6, r3
 8011dda:	4337      	orrs	r7, r6
 8011ddc:	1e7b      	subs	r3, r7, #1
 8011dde:	419f      	sbcs	r7, r3
 8011de0:	2207      	movs	r2, #7
 8011de2:	4307      	orrs	r7, r0
 8011de4:	403a      	ands	r2, r7
 8011de6:	2100      	movs	r1, #0
 8011de8:	2500      	movs	r5, #0
 8011dea:	e789      	b.n	8011d00 <__aeabi_dadd+0x2d0>
 8011dec:	1a17      	subs	r7, r2, r0
 8011dee:	4643      	mov	r3, r8
 8011df0:	42ba      	cmp	r2, r7
 8011df2:	41b6      	sbcs	r6, r6
 8011df4:	1a59      	subs	r1, r3, r1
 8011df6:	4276      	negs	r6, r6
 8011df8:	1b8e      	subs	r6, r1, r6
 8011dfa:	4664      	mov	r4, ip
 8011dfc:	e64e      	b.n	8011a9c <__aeabi_dadd+0x6c>
 8011dfe:	2b1f      	cmp	r3, #31
 8011e00:	dd00      	ble.n	8011e04 <__aeabi_dadd+0x3d4>
 8011e02:	e0ad      	b.n	8011f60 <__aeabi_dadd+0x530>
 8011e04:	2620      	movs	r6, #32
 8011e06:	4647      	mov	r7, r8
 8011e08:	1af6      	subs	r6, r6, r3
 8011e0a:	40b7      	lsls	r7, r6
 8011e0c:	46b9      	mov	r9, r7
 8011e0e:	0017      	movs	r7, r2
 8011e10:	46b2      	mov	sl, r6
 8011e12:	40df      	lsrs	r7, r3
 8011e14:	464e      	mov	r6, r9
 8011e16:	433e      	orrs	r6, r7
 8011e18:	0037      	movs	r7, r6
 8011e1a:	4656      	mov	r6, sl
 8011e1c:	40b2      	lsls	r2, r6
 8011e1e:	1e56      	subs	r6, r2, #1
 8011e20:	41b2      	sbcs	r2, r6
 8011e22:	4317      	orrs	r7, r2
 8011e24:	4642      	mov	r2, r8
 8011e26:	40da      	lsrs	r2, r3
 8011e28:	1889      	adds	r1, r1, r2
 8011e2a:	e6ae      	b.n	8011b8a <__aeabi_dadd+0x15a>
 8011e2c:	000007ff 	.word	0x000007ff
 8011e30:	ff7fffff 	.word	0xff7fffff
 8011e34:	800fffff 	.word	0x800fffff
 8011e38:	2620      	movs	r6, #32
 8011e3a:	4647      	mov	r7, r8
 8011e3c:	1af6      	subs	r6, r6, r3
 8011e3e:	40b7      	lsls	r7, r6
 8011e40:	46b9      	mov	r9, r7
 8011e42:	0017      	movs	r7, r2
 8011e44:	46b2      	mov	sl, r6
 8011e46:	40df      	lsrs	r7, r3
 8011e48:	464e      	mov	r6, r9
 8011e4a:	433e      	orrs	r6, r7
 8011e4c:	0037      	movs	r7, r6
 8011e4e:	4656      	mov	r6, sl
 8011e50:	40b2      	lsls	r2, r6
 8011e52:	1e56      	subs	r6, r2, #1
 8011e54:	41b2      	sbcs	r2, r6
 8011e56:	4317      	orrs	r7, r2
 8011e58:	4642      	mov	r2, r8
 8011e5a:	40da      	lsrs	r2, r3
 8011e5c:	1a89      	subs	r1, r1, r2
 8011e5e:	e799      	b.n	8011d94 <__aeabi_dadd+0x364>
 8011e60:	4c7f      	ldr	r4, [pc, #508]	; (8012060 <__aeabi_dadd+0x630>)
 8011e62:	42a6      	cmp	r6, r4
 8011e64:	d05b      	beq.n	8011f1e <__aeabi_dadd+0x4ee>
 8011e66:	2480      	movs	r4, #128	; 0x80
 8011e68:	0424      	lsls	r4, r4, #16
 8011e6a:	425b      	negs	r3, r3
 8011e6c:	4321      	orrs	r1, r4
 8011e6e:	e727      	b.n	8011cc0 <__aeabi_dadd+0x290>
 8011e70:	2e00      	cmp	r6, #0
 8011e72:	d10c      	bne.n	8011e8e <__aeabi_dadd+0x45e>
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d100      	bne.n	8011e7a <__aeabi_dadd+0x44a>
 8011e78:	e0cb      	b.n	8012012 <__aeabi_dadd+0x5e2>
 8011e7a:	4664      	mov	r4, ip
 8011e7c:	0039      	movs	r1, r7
 8011e7e:	0010      	movs	r0, r2
 8011e80:	4d77      	ldr	r5, [pc, #476]	; (8012060 <__aeabi_dadd+0x630>)
 8011e82:	e6d7      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011e84:	4f76      	ldr	r7, [pc, #472]	; (8012060 <__aeabi_dadd+0x630>)
 8011e86:	42bb      	cmp	r3, r7
 8011e88:	d018      	beq.n	8011ebc <__aeabi_dadd+0x48c>
 8011e8a:	0033      	movs	r3, r6
 8011e8c:	e675      	b.n	8011b7a <__aeabi_dadd+0x14a>
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d014      	beq.n	8011ebc <__aeabi_dadd+0x48c>
 8011e92:	074b      	lsls	r3, r1, #29
 8011e94:	08c0      	lsrs	r0, r0, #3
 8011e96:	4318      	orrs	r0, r3
 8011e98:	2380      	movs	r3, #128	; 0x80
 8011e9a:	08c9      	lsrs	r1, r1, #3
 8011e9c:	031b      	lsls	r3, r3, #12
 8011e9e:	4219      	tst	r1, r3
 8011ea0:	d007      	beq.n	8011eb2 <__aeabi_dadd+0x482>
 8011ea2:	08fc      	lsrs	r4, r7, #3
 8011ea4:	421c      	tst	r4, r3
 8011ea6:	d104      	bne.n	8011eb2 <__aeabi_dadd+0x482>
 8011ea8:	0779      	lsls	r1, r7, #29
 8011eaa:	08d0      	lsrs	r0, r2, #3
 8011eac:	4308      	orrs	r0, r1
 8011eae:	46e1      	mov	r9, ip
 8011eb0:	0021      	movs	r1, r4
 8011eb2:	464c      	mov	r4, r9
 8011eb4:	0f42      	lsrs	r2, r0, #29
 8011eb6:	00c9      	lsls	r1, r1, #3
 8011eb8:	4311      	orrs	r1, r2
 8011eba:	00c0      	lsls	r0, r0, #3
 8011ebc:	4d68      	ldr	r5, [pc, #416]	; (8012060 <__aeabi_dadd+0x630>)
 8011ebe:	e6b9      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011ec0:	001d      	movs	r5, r3
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	e6c0      	b.n	8011c4a <__aeabi_dadd+0x21a>
 8011ec8:	2d00      	cmp	r5, #0
 8011eca:	d15b      	bne.n	8011f84 <__aeabi_dadd+0x554>
 8011ecc:	000d      	movs	r5, r1
 8011ece:	4305      	orrs	r5, r0
 8011ed0:	d100      	bne.n	8011ed4 <__aeabi_dadd+0x4a4>
 8011ed2:	e6e2      	b.n	8011c9a <__aeabi_dadd+0x26a>
 8011ed4:	1c5d      	adds	r5, r3, #1
 8011ed6:	d100      	bne.n	8011eda <__aeabi_dadd+0x4aa>
 8011ed8:	e0b0      	b.n	801203c <__aeabi_dadd+0x60c>
 8011eda:	4d61      	ldr	r5, [pc, #388]	; (8012060 <__aeabi_dadd+0x630>)
 8011edc:	42ae      	cmp	r6, r5
 8011ede:	d01f      	beq.n	8011f20 <__aeabi_dadd+0x4f0>
 8011ee0:	43db      	mvns	r3, r3
 8011ee2:	2b38      	cmp	r3, #56	; 0x38
 8011ee4:	dc71      	bgt.n	8011fca <__aeabi_dadd+0x59a>
 8011ee6:	2b1f      	cmp	r3, #31
 8011ee8:	dd00      	ble.n	8011eec <__aeabi_dadd+0x4bc>
 8011eea:	e096      	b.n	801201a <__aeabi_dadd+0x5ea>
 8011eec:	2520      	movs	r5, #32
 8011eee:	000f      	movs	r7, r1
 8011ef0:	1aed      	subs	r5, r5, r3
 8011ef2:	40af      	lsls	r7, r5
 8011ef4:	46b9      	mov	r9, r7
 8011ef6:	0007      	movs	r7, r0
 8011ef8:	46aa      	mov	sl, r5
 8011efa:	40df      	lsrs	r7, r3
 8011efc:	464d      	mov	r5, r9
 8011efe:	433d      	orrs	r5, r7
 8011f00:	002f      	movs	r7, r5
 8011f02:	4655      	mov	r5, sl
 8011f04:	40a8      	lsls	r0, r5
 8011f06:	40d9      	lsrs	r1, r3
 8011f08:	1e45      	subs	r5, r0, #1
 8011f0a:	41a8      	sbcs	r0, r5
 8011f0c:	4488      	add	r8, r1
 8011f0e:	4307      	orrs	r7, r0
 8011f10:	18bf      	adds	r7, r7, r2
 8011f12:	4297      	cmp	r7, r2
 8011f14:	4192      	sbcs	r2, r2
 8011f16:	4251      	negs	r1, r2
 8011f18:	4441      	add	r1, r8
 8011f1a:	0035      	movs	r5, r6
 8011f1c:	e63a      	b.n	8011b94 <__aeabi_dadd+0x164>
 8011f1e:	4664      	mov	r4, ip
 8011f20:	0035      	movs	r5, r6
 8011f22:	4641      	mov	r1, r8
 8011f24:	0010      	movs	r0, r2
 8011f26:	e685      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011f28:	000b      	movs	r3, r1
 8011f2a:	4303      	orrs	r3, r0
 8011f2c:	2d00      	cmp	r5, #0
 8011f2e:	d000      	beq.n	8011f32 <__aeabi_dadd+0x502>
 8011f30:	e663      	b.n	8011bfa <__aeabi_dadd+0x1ca>
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d0f5      	beq.n	8011f22 <__aeabi_dadd+0x4f2>
 8011f36:	4643      	mov	r3, r8
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	d100      	bne.n	8011f3e <__aeabi_dadd+0x50e>
 8011f3c:	e67a      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011f3e:	1887      	adds	r7, r0, r2
 8011f40:	4287      	cmp	r7, r0
 8011f42:	4180      	sbcs	r0, r0
 8011f44:	2207      	movs	r2, #7
 8011f46:	4441      	add	r1, r8
 8011f48:	4240      	negs	r0, r0
 8011f4a:	1809      	adds	r1, r1, r0
 8011f4c:	403a      	ands	r2, r7
 8011f4e:	020b      	lsls	r3, r1, #8
 8011f50:	d400      	bmi.n	8011f54 <__aeabi_dadd+0x524>
 8011f52:	e6d5      	b.n	8011d00 <__aeabi_dadd+0x2d0>
 8011f54:	4b43      	ldr	r3, [pc, #268]	; (8012064 <__aeabi_dadd+0x634>)
 8011f56:	3501      	adds	r5, #1
 8011f58:	4019      	ands	r1, r3
 8011f5a:	e5c9      	b.n	8011af0 <__aeabi_dadd+0xc0>
 8011f5c:	0038      	movs	r0, r7
 8011f5e:	e669      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011f60:	001e      	movs	r6, r3
 8011f62:	4647      	mov	r7, r8
 8011f64:	3e20      	subs	r6, #32
 8011f66:	40f7      	lsrs	r7, r6
 8011f68:	46bc      	mov	ip, r7
 8011f6a:	2b20      	cmp	r3, #32
 8011f6c:	d004      	beq.n	8011f78 <__aeabi_dadd+0x548>
 8011f6e:	2640      	movs	r6, #64	; 0x40
 8011f70:	1af3      	subs	r3, r6, r3
 8011f72:	4646      	mov	r6, r8
 8011f74:	409e      	lsls	r6, r3
 8011f76:	4332      	orrs	r2, r6
 8011f78:	0017      	movs	r7, r2
 8011f7a:	4663      	mov	r3, ip
 8011f7c:	1e7a      	subs	r2, r7, #1
 8011f7e:	4197      	sbcs	r7, r2
 8011f80:	431f      	orrs	r7, r3
 8011f82:	e602      	b.n	8011b8a <__aeabi_dadd+0x15a>
 8011f84:	4d36      	ldr	r5, [pc, #216]	; (8012060 <__aeabi_dadd+0x630>)
 8011f86:	42ae      	cmp	r6, r5
 8011f88:	d0ca      	beq.n	8011f20 <__aeabi_dadd+0x4f0>
 8011f8a:	2580      	movs	r5, #128	; 0x80
 8011f8c:	042d      	lsls	r5, r5, #16
 8011f8e:	425b      	negs	r3, r3
 8011f90:	4329      	orrs	r1, r5
 8011f92:	e7a6      	b.n	8011ee2 <__aeabi_dadd+0x4b2>
 8011f94:	4308      	orrs	r0, r1
 8011f96:	1e41      	subs	r1, r0, #1
 8011f98:	4188      	sbcs	r0, r1
 8011f9a:	e6a6      	b.n	8011cea <__aeabi_dadd+0x2ba>
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d100      	bne.n	8011fa2 <__aeabi_dadd+0x572>
 8011fa0:	e648      	b.n	8011c34 <__aeabi_dadd+0x204>
 8011fa2:	1a87      	subs	r7, r0, r2
 8011fa4:	4643      	mov	r3, r8
 8011fa6:	42b8      	cmp	r0, r7
 8011fa8:	41b6      	sbcs	r6, r6
 8011faa:	1acb      	subs	r3, r1, r3
 8011fac:	4276      	negs	r6, r6
 8011fae:	1b9e      	subs	r6, r3, r6
 8011fb0:	0233      	lsls	r3, r6, #8
 8011fb2:	d54b      	bpl.n	801204c <__aeabi_dadd+0x61c>
 8011fb4:	1a17      	subs	r7, r2, r0
 8011fb6:	4643      	mov	r3, r8
 8011fb8:	42ba      	cmp	r2, r7
 8011fba:	4192      	sbcs	r2, r2
 8011fbc:	1a59      	subs	r1, r3, r1
 8011fbe:	4252      	negs	r2, r2
 8011fc0:	1a89      	subs	r1, r1, r2
 8011fc2:	2207      	movs	r2, #7
 8011fc4:	4664      	mov	r4, ip
 8011fc6:	403a      	ands	r2, r7
 8011fc8:	e592      	b.n	8011af0 <__aeabi_dadd+0xc0>
 8011fca:	4301      	orrs	r1, r0
 8011fcc:	000f      	movs	r7, r1
 8011fce:	1e79      	subs	r1, r7, #1
 8011fd0:	418f      	sbcs	r7, r1
 8011fd2:	e79d      	b.n	8011f10 <__aeabi_dadd+0x4e0>
 8011fd4:	001c      	movs	r4, r3
 8011fd6:	000f      	movs	r7, r1
 8011fd8:	3c20      	subs	r4, #32
 8011fda:	40e7      	lsrs	r7, r4
 8011fdc:	2b20      	cmp	r3, #32
 8011fde:	d003      	beq.n	8011fe8 <__aeabi_dadd+0x5b8>
 8011fe0:	2440      	movs	r4, #64	; 0x40
 8011fe2:	1ae3      	subs	r3, r4, r3
 8011fe4:	4099      	lsls	r1, r3
 8011fe6:	4308      	orrs	r0, r1
 8011fe8:	1e41      	subs	r1, r0, #1
 8011fea:	4188      	sbcs	r0, r1
 8011fec:	4338      	orrs	r0, r7
 8011fee:	e67c      	b.n	8011cea <__aeabi_dadd+0x2ba>
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2400      	movs	r4, #0
 8011ff4:	e625      	b.n	8011c42 <__aeabi_dadd+0x212>
 8011ff6:	1a17      	subs	r7, r2, r0
 8011ff8:	4643      	mov	r3, r8
 8011ffa:	42ba      	cmp	r2, r7
 8011ffc:	4192      	sbcs	r2, r2
 8011ffe:	1a59      	subs	r1, r3, r1
 8012000:	4252      	negs	r2, r2
 8012002:	1a89      	subs	r1, r1, r2
 8012004:	4664      	mov	r4, ip
 8012006:	0035      	movs	r5, r6
 8012008:	e543      	b.n	8011a92 <__aeabi_dadd+0x62>
 801200a:	4641      	mov	r1, r8
 801200c:	0010      	movs	r0, r2
 801200e:	4d14      	ldr	r5, [pc, #80]	; (8012060 <__aeabi_dadd+0x630>)
 8012010:	e610      	b.n	8011c34 <__aeabi_dadd+0x204>
 8012012:	2280      	movs	r2, #128	; 0x80
 8012014:	2400      	movs	r4, #0
 8012016:	0312      	lsls	r2, r2, #12
 8012018:	e680      	b.n	8011d1c <__aeabi_dadd+0x2ec>
 801201a:	001d      	movs	r5, r3
 801201c:	000f      	movs	r7, r1
 801201e:	3d20      	subs	r5, #32
 8012020:	40ef      	lsrs	r7, r5
 8012022:	46bc      	mov	ip, r7
 8012024:	2b20      	cmp	r3, #32
 8012026:	d003      	beq.n	8012030 <__aeabi_dadd+0x600>
 8012028:	2540      	movs	r5, #64	; 0x40
 801202a:	1aeb      	subs	r3, r5, r3
 801202c:	4099      	lsls	r1, r3
 801202e:	4308      	orrs	r0, r1
 8012030:	0007      	movs	r7, r0
 8012032:	4663      	mov	r3, ip
 8012034:	1e78      	subs	r0, r7, #1
 8012036:	4187      	sbcs	r7, r0
 8012038:	431f      	orrs	r7, r3
 801203a:	e769      	b.n	8011f10 <__aeabi_dadd+0x4e0>
 801203c:	1887      	adds	r7, r0, r2
 801203e:	4297      	cmp	r7, r2
 8012040:	419b      	sbcs	r3, r3
 8012042:	4441      	add	r1, r8
 8012044:	425b      	negs	r3, r3
 8012046:	18c9      	adds	r1, r1, r3
 8012048:	0035      	movs	r5, r6
 801204a:	e5a3      	b.n	8011b94 <__aeabi_dadd+0x164>
 801204c:	003b      	movs	r3, r7
 801204e:	4333      	orrs	r3, r6
 8012050:	d0ce      	beq.n	8011ff0 <__aeabi_dadd+0x5c0>
 8012052:	2207      	movs	r2, #7
 8012054:	0031      	movs	r1, r6
 8012056:	403a      	ands	r2, r7
 8012058:	e652      	b.n	8011d00 <__aeabi_dadd+0x2d0>
 801205a:	2300      	movs	r3, #0
 801205c:	001a      	movs	r2, r3
 801205e:	e5f4      	b.n	8011c4a <__aeabi_dadd+0x21a>
 8012060:	000007ff 	.word	0x000007ff
 8012064:	ff7fffff 	.word	0xff7fffff

08012068 <__aeabi_ddiv>:
 8012068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801206a:	4657      	mov	r7, sl
 801206c:	46de      	mov	lr, fp
 801206e:	464e      	mov	r6, r9
 8012070:	4645      	mov	r5, r8
 8012072:	b5e0      	push	{r5, r6, r7, lr}
 8012074:	4683      	mov	fp, r0
 8012076:	0007      	movs	r7, r0
 8012078:	030e      	lsls	r6, r1, #12
 801207a:	0048      	lsls	r0, r1, #1
 801207c:	b085      	sub	sp, #20
 801207e:	4692      	mov	sl, r2
 8012080:	001c      	movs	r4, r3
 8012082:	0b36      	lsrs	r6, r6, #12
 8012084:	0d40      	lsrs	r0, r0, #21
 8012086:	0fcd      	lsrs	r5, r1, #31
 8012088:	2800      	cmp	r0, #0
 801208a:	d100      	bne.n	801208e <__aeabi_ddiv+0x26>
 801208c:	e09d      	b.n	80121ca <__aeabi_ddiv+0x162>
 801208e:	4b95      	ldr	r3, [pc, #596]	; (80122e4 <__aeabi_ddiv+0x27c>)
 8012090:	4298      	cmp	r0, r3
 8012092:	d039      	beq.n	8012108 <__aeabi_ddiv+0xa0>
 8012094:	2380      	movs	r3, #128	; 0x80
 8012096:	00f6      	lsls	r6, r6, #3
 8012098:	041b      	lsls	r3, r3, #16
 801209a:	431e      	orrs	r6, r3
 801209c:	4a92      	ldr	r2, [pc, #584]	; (80122e8 <__aeabi_ddiv+0x280>)
 801209e:	0f7b      	lsrs	r3, r7, #29
 80120a0:	4333      	orrs	r3, r6
 80120a2:	4699      	mov	r9, r3
 80120a4:	4694      	mov	ip, r2
 80120a6:	0003      	movs	r3, r0
 80120a8:	4463      	add	r3, ip
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	2300      	movs	r3, #0
 80120ae:	2600      	movs	r6, #0
 80120b0:	00ff      	lsls	r7, r7, #3
 80120b2:	9302      	str	r3, [sp, #8]
 80120b4:	0323      	lsls	r3, r4, #12
 80120b6:	0b1b      	lsrs	r3, r3, #12
 80120b8:	4698      	mov	r8, r3
 80120ba:	0063      	lsls	r3, r4, #1
 80120bc:	0fe4      	lsrs	r4, r4, #31
 80120be:	4652      	mov	r2, sl
 80120c0:	0d5b      	lsrs	r3, r3, #21
 80120c2:	9401      	str	r4, [sp, #4]
 80120c4:	d100      	bne.n	80120c8 <__aeabi_ddiv+0x60>
 80120c6:	e0b3      	b.n	8012230 <__aeabi_ddiv+0x1c8>
 80120c8:	4986      	ldr	r1, [pc, #536]	; (80122e4 <__aeabi_ddiv+0x27c>)
 80120ca:	428b      	cmp	r3, r1
 80120cc:	d100      	bne.n	80120d0 <__aeabi_ddiv+0x68>
 80120ce:	e09e      	b.n	801220e <__aeabi_ddiv+0x1a6>
 80120d0:	4642      	mov	r2, r8
 80120d2:	00d1      	lsls	r1, r2, #3
 80120d4:	2280      	movs	r2, #128	; 0x80
 80120d6:	0412      	lsls	r2, r2, #16
 80120d8:	430a      	orrs	r2, r1
 80120da:	4651      	mov	r1, sl
 80120dc:	0f49      	lsrs	r1, r1, #29
 80120de:	4311      	orrs	r1, r2
 80120e0:	468b      	mov	fp, r1
 80120e2:	4981      	ldr	r1, [pc, #516]	; (80122e8 <__aeabi_ddiv+0x280>)
 80120e4:	4652      	mov	r2, sl
 80120e6:	468c      	mov	ip, r1
 80120e8:	9900      	ldr	r1, [sp, #0]
 80120ea:	4463      	add	r3, ip
 80120ec:	1acb      	subs	r3, r1, r3
 80120ee:	2100      	movs	r1, #0
 80120f0:	00d2      	lsls	r2, r2, #3
 80120f2:	9300      	str	r3, [sp, #0]
 80120f4:	002b      	movs	r3, r5
 80120f6:	4063      	eors	r3, r4
 80120f8:	469a      	mov	sl, r3
 80120fa:	2e0f      	cmp	r6, #15
 80120fc:	d900      	bls.n	8012100 <__aeabi_ddiv+0x98>
 80120fe:	e105      	b.n	801230c <__aeabi_ddiv+0x2a4>
 8012100:	4b7a      	ldr	r3, [pc, #488]	; (80122ec <__aeabi_ddiv+0x284>)
 8012102:	00b6      	lsls	r6, r6, #2
 8012104:	599b      	ldr	r3, [r3, r6]
 8012106:	469f      	mov	pc, r3
 8012108:	465b      	mov	r3, fp
 801210a:	4333      	orrs	r3, r6
 801210c:	4699      	mov	r9, r3
 801210e:	d000      	beq.n	8012112 <__aeabi_ddiv+0xaa>
 8012110:	e0b8      	b.n	8012284 <__aeabi_ddiv+0x21c>
 8012112:	2302      	movs	r3, #2
 8012114:	2608      	movs	r6, #8
 8012116:	2700      	movs	r7, #0
 8012118:	9000      	str	r0, [sp, #0]
 801211a:	9302      	str	r3, [sp, #8]
 801211c:	e7ca      	b.n	80120b4 <__aeabi_ddiv+0x4c>
 801211e:	46cb      	mov	fp, r9
 8012120:	003a      	movs	r2, r7
 8012122:	9902      	ldr	r1, [sp, #8]
 8012124:	9501      	str	r5, [sp, #4]
 8012126:	9b01      	ldr	r3, [sp, #4]
 8012128:	469a      	mov	sl, r3
 801212a:	2902      	cmp	r1, #2
 801212c:	d027      	beq.n	801217e <__aeabi_ddiv+0x116>
 801212e:	2903      	cmp	r1, #3
 8012130:	d100      	bne.n	8012134 <__aeabi_ddiv+0xcc>
 8012132:	e280      	b.n	8012636 <__aeabi_ddiv+0x5ce>
 8012134:	2901      	cmp	r1, #1
 8012136:	d044      	beq.n	80121c2 <__aeabi_ddiv+0x15a>
 8012138:	496d      	ldr	r1, [pc, #436]	; (80122f0 <__aeabi_ddiv+0x288>)
 801213a:	9b00      	ldr	r3, [sp, #0]
 801213c:	468c      	mov	ip, r1
 801213e:	4463      	add	r3, ip
 8012140:	001c      	movs	r4, r3
 8012142:	2c00      	cmp	r4, #0
 8012144:	dd38      	ble.n	80121b8 <__aeabi_ddiv+0x150>
 8012146:	0753      	lsls	r3, r2, #29
 8012148:	d000      	beq.n	801214c <__aeabi_ddiv+0xe4>
 801214a:	e213      	b.n	8012574 <__aeabi_ddiv+0x50c>
 801214c:	08d2      	lsrs	r2, r2, #3
 801214e:	465b      	mov	r3, fp
 8012150:	01db      	lsls	r3, r3, #7
 8012152:	d509      	bpl.n	8012168 <__aeabi_ddiv+0x100>
 8012154:	4659      	mov	r1, fp
 8012156:	4b67      	ldr	r3, [pc, #412]	; (80122f4 <__aeabi_ddiv+0x28c>)
 8012158:	4019      	ands	r1, r3
 801215a:	468b      	mov	fp, r1
 801215c:	2180      	movs	r1, #128	; 0x80
 801215e:	00c9      	lsls	r1, r1, #3
 8012160:	468c      	mov	ip, r1
 8012162:	9b00      	ldr	r3, [sp, #0]
 8012164:	4463      	add	r3, ip
 8012166:	001c      	movs	r4, r3
 8012168:	4b63      	ldr	r3, [pc, #396]	; (80122f8 <__aeabi_ddiv+0x290>)
 801216a:	429c      	cmp	r4, r3
 801216c:	dc07      	bgt.n	801217e <__aeabi_ddiv+0x116>
 801216e:	465b      	mov	r3, fp
 8012170:	0564      	lsls	r4, r4, #21
 8012172:	075f      	lsls	r7, r3, #29
 8012174:	025b      	lsls	r3, r3, #9
 8012176:	4317      	orrs	r7, r2
 8012178:	0b1b      	lsrs	r3, r3, #12
 801217a:	0d62      	lsrs	r2, r4, #21
 801217c:	e002      	b.n	8012184 <__aeabi_ddiv+0x11c>
 801217e:	2300      	movs	r3, #0
 8012180:	2700      	movs	r7, #0
 8012182:	4a58      	ldr	r2, [pc, #352]	; (80122e4 <__aeabi_ddiv+0x27c>)
 8012184:	2100      	movs	r1, #0
 8012186:	031b      	lsls	r3, r3, #12
 8012188:	0b1c      	lsrs	r4, r3, #12
 801218a:	0d0b      	lsrs	r3, r1, #20
 801218c:	051b      	lsls	r3, r3, #20
 801218e:	4323      	orrs	r3, r4
 8012190:	0514      	lsls	r4, r2, #20
 8012192:	4a5a      	ldr	r2, [pc, #360]	; (80122fc <__aeabi_ddiv+0x294>)
 8012194:	0038      	movs	r0, r7
 8012196:	4013      	ands	r3, r2
 8012198:	431c      	orrs	r4, r3
 801219a:	4653      	mov	r3, sl
 801219c:	0064      	lsls	r4, r4, #1
 801219e:	07db      	lsls	r3, r3, #31
 80121a0:	0864      	lsrs	r4, r4, #1
 80121a2:	431c      	orrs	r4, r3
 80121a4:	0021      	movs	r1, r4
 80121a6:	b005      	add	sp, #20
 80121a8:	bc3c      	pop	{r2, r3, r4, r5}
 80121aa:	4690      	mov	r8, r2
 80121ac:	4699      	mov	r9, r3
 80121ae:	46a2      	mov	sl, r4
 80121b0:	46ab      	mov	fp, r5
 80121b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b4:	2201      	movs	r2, #1
 80121b6:	4252      	negs	r2, r2
 80121b8:	2301      	movs	r3, #1
 80121ba:	1b1b      	subs	r3, r3, r4
 80121bc:	2b38      	cmp	r3, #56	; 0x38
 80121be:	dc00      	bgt.n	80121c2 <__aeabi_ddiv+0x15a>
 80121c0:	e1ad      	b.n	801251e <__aeabi_ddiv+0x4b6>
 80121c2:	2200      	movs	r2, #0
 80121c4:	2300      	movs	r3, #0
 80121c6:	2700      	movs	r7, #0
 80121c8:	e7dc      	b.n	8012184 <__aeabi_ddiv+0x11c>
 80121ca:	465b      	mov	r3, fp
 80121cc:	4333      	orrs	r3, r6
 80121ce:	4699      	mov	r9, r3
 80121d0:	d05e      	beq.n	8012290 <__aeabi_ddiv+0x228>
 80121d2:	2e00      	cmp	r6, #0
 80121d4:	d100      	bne.n	80121d8 <__aeabi_ddiv+0x170>
 80121d6:	e18a      	b.n	80124ee <__aeabi_ddiv+0x486>
 80121d8:	0030      	movs	r0, r6
 80121da:	f7fe ff7f 	bl	80110dc <__clzsi2>
 80121de:	0003      	movs	r3, r0
 80121e0:	3b0b      	subs	r3, #11
 80121e2:	2b1c      	cmp	r3, #28
 80121e4:	dd00      	ble.n	80121e8 <__aeabi_ddiv+0x180>
 80121e6:	e17b      	b.n	80124e0 <__aeabi_ddiv+0x478>
 80121e8:	221d      	movs	r2, #29
 80121ea:	1ad3      	subs	r3, r2, r3
 80121ec:	465a      	mov	r2, fp
 80121ee:	0001      	movs	r1, r0
 80121f0:	40da      	lsrs	r2, r3
 80121f2:	3908      	subs	r1, #8
 80121f4:	408e      	lsls	r6, r1
 80121f6:	0013      	movs	r3, r2
 80121f8:	465f      	mov	r7, fp
 80121fa:	4333      	orrs	r3, r6
 80121fc:	4699      	mov	r9, r3
 80121fe:	408f      	lsls	r7, r1
 8012200:	4b3f      	ldr	r3, [pc, #252]	; (8012300 <__aeabi_ddiv+0x298>)
 8012202:	2600      	movs	r6, #0
 8012204:	1a1b      	subs	r3, r3, r0
 8012206:	9300      	str	r3, [sp, #0]
 8012208:	2300      	movs	r3, #0
 801220a:	9302      	str	r3, [sp, #8]
 801220c:	e752      	b.n	80120b4 <__aeabi_ddiv+0x4c>
 801220e:	4641      	mov	r1, r8
 8012210:	4653      	mov	r3, sl
 8012212:	430b      	orrs	r3, r1
 8012214:	493b      	ldr	r1, [pc, #236]	; (8012304 <__aeabi_ddiv+0x29c>)
 8012216:	469b      	mov	fp, r3
 8012218:	468c      	mov	ip, r1
 801221a:	9b00      	ldr	r3, [sp, #0]
 801221c:	4463      	add	r3, ip
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	465b      	mov	r3, fp
 8012222:	2b00      	cmp	r3, #0
 8012224:	d13b      	bne.n	801229e <__aeabi_ddiv+0x236>
 8012226:	2302      	movs	r3, #2
 8012228:	2200      	movs	r2, #0
 801222a:	431e      	orrs	r6, r3
 801222c:	2102      	movs	r1, #2
 801222e:	e761      	b.n	80120f4 <__aeabi_ddiv+0x8c>
 8012230:	4643      	mov	r3, r8
 8012232:	4313      	orrs	r3, r2
 8012234:	469b      	mov	fp, r3
 8012236:	d037      	beq.n	80122a8 <__aeabi_ddiv+0x240>
 8012238:	4643      	mov	r3, r8
 801223a:	2b00      	cmp	r3, #0
 801223c:	d100      	bne.n	8012240 <__aeabi_ddiv+0x1d8>
 801223e:	e162      	b.n	8012506 <__aeabi_ddiv+0x49e>
 8012240:	4640      	mov	r0, r8
 8012242:	f7fe ff4b 	bl	80110dc <__clzsi2>
 8012246:	0003      	movs	r3, r0
 8012248:	3b0b      	subs	r3, #11
 801224a:	2b1c      	cmp	r3, #28
 801224c:	dd00      	ble.n	8012250 <__aeabi_ddiv+0x1e8>
 801224e:	e153      	b.n	80124f8 <__aeabi_ddiv+0x490>
 8012250:	0002      	movs	r2, r0
 8012252:	4641      	mov	r1, r8
 8012254:	3a08      	subs	r2, #8
 8012256:	4091      	lsls	r1, r2
 8012258:	4688      	mov	r8, r1
 801225a:	211d      	movs	r1, #29
 801225c:	1acb      	subs	r3, r1, r3
 801225e:	4651      	mov	r1, sl
 8012260:	40d9      	lsrs	r1, r3
 8012262:	000b      	movs	r3, r1
 8012264:	4641      	mov	r1, r8
 8012266:	430b      	orrs	r3, r1
 8012268:	469b      	mov	fp, r3
 801226a:	4653      	mov	r3, sl
 801226c:	4093      	lsls	r3, r2
 801226e:	001a      	movs	r2, r3
 8012270:	9b00      	ldr	r3, [sp, #0]
 8012272:	4925      	ldr	r1, [pc, #148]	; (8012308 <__aeabi_ddiv+0x2a0>)
 8012274:	469c      	mov	ip, r3
 8012276:	4460      	add	r0, ip
 8012278:	0003      	movs	r3, r0
 801227a:	468c      	mov	ip, r1
 801227c:	4463      	add	r3, ip
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	2100      	movs	r1, #0
 8012282:	e737      	b.n	80120f4 <__aeabi_ddiv+0x8c>
 8012284:	2303      	movs	r3, #3
 8012286:	46b1      	mov	r9, r6
 8012288:	9000      	str	r0, [sp, #0]
 801228a:	260c      	movs	r6, #12
 801228c:	9302      	str	r3, [sp, #8]
 801228e:	e711      	b.n	80120b4 <__aeabi_ddiv+0x4c>
 8012290:	2300      	movs	r3, #0
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	3301      	adds	r3, #1
 8012296:	2604      	movs	r6, #4
 8012298:	2700      	movs	r7, #0
 801229a:	9302      	str	r3, [sp, #8]
 801229c:	e70a      	b.n	80120b4 <__aeabi_ddiv+0x4c>
 801229e:	2303      	movs	r3, #3
 80122a0:	46c3      	mov	fp, r8
 80122a2:	431e      	orrs	r6, r3
 80122a4:	2103      	movs	r1, #3
 80122a6:	e725      	b.n	80120f4 <__aeabi_ddiv+0x8c>
 80122a8:	3301      	adds	r3, #1
 80122aa:	431e      	orrs	r6, r3
 80122ac:	2200      	movs	r2, #0
 80122ae:	2101      	movs	r1, #1
 80122b0:	e720      	b.n	80120f4 <__aeabi_ddiv+0x8c>
 80122b2:	2300      	movs	r3, #0
 80122b4:	469a      	mov	sl, r3
 80122b6:	2380      	movs	r3, #128	; 0x80
 80122b8:	2700      	movs	r7, #0
 80122ba:	031b      	lsls	r3, r3, #12
 80122bc:	4a09      	ldr	r2, [pc, #36]	; (80122e4 <__aeabi_ddiv+0x27c>)
 80122be:	e761      	b.n	8012184 <__aeabi_ddiv+0x11c>
 80122c0:	2380      	movs	r3, #128	; 0x80
 80122c2:	4649      	mov	r1, r9
 80122c4:	031b      	lsls	r3, r3, #12
 80122c6:	4219      	tst	r1, r3
 80122c8:	d100      	bne.n	80122cc <__aeabi_ddiv+0x264>
 80122ca:	e0e2      	b.n	8012492 <__aeabi_ddiv+0x42a>
 80122cc:	4659      	mov	r1, fp
 80122ce:	4219      	tst	r1, r3
 80122d0:	d000      	beq.n	80122d4 <__aeabi_ddiv+0x26c>
 80122d2:	e0de      	b.n	8012492 <__aeabi_ddiv+0x42a>
 80122d4:	430b      	orrs	r3, r1
 80122d6:	031b      	lsls	r3, r3, #12
 80122d8:	0017      	movs	r7, r2
 80122da:	0b1b      	lsrs	r3, r3, #12
 80122dc:	46a2      	mov	sl, r4
 80122de:	4a01      	ldr	r2, [pc, #4]	; (80122e4 <__aeabi_ddiv+0x27c>)
 80122e0:	e750      	b.n	8012184 <__aeabi_ddiv+0x11c>
 80122e2:	46c0      	nop			; (mov r8, r8)
 80122e4:	000007ff 	.word	0x000007ff
 80122e8:	fffffc01 	.word	0xfffffc01
 80122ec:	0801c9e8 	.word	0x0801c9e8
 80122f0:	000003ff 	.word	0x000003ff
 80122f4:	feffffff 	.word	0xfeffffff
 80122f8:	000007fe 	.word	0x000007fe
 80122fc:	800fffff 	.word	0x800fffff
 8012300:	fffffc0d 	.word	0xfffffc0d
 8012304:	fffff801 	.word	0xfffff801
 8012308:	000003f3 	.word	0x000003f3
 801230c:	45d9      	cmp	r9, fp
 801230e:	d900      	bls.n	8012312 <__aeabi_ddiv+0x2aa>
 8012310:	e0cb      	b.n	80124aa <__aeabi_ddiv+0x442>
 8012312:	d100      	bne.n	8012316 <__aeabi_ddiv+0x2ae>
 8012314:	e0c6      	b.n	80124a4 <__aeabi_ddiv+0x43c>
 8012316:	003c      	movs	r4, r7
 8012318:	4648      	mov	r0, r9
 801231a:	2700      	movs	r7, #0
 801231c:	9b00      	ldr	r3, [sp, #0]
 801231e:	3b01      	subs	r3, #1
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	465b      	mov	r3, fp
 8012324:	0e16      	lsrs	r6, r2, #24
 8012326:	021b      	lsls	r3, r3, #8
 8012328:	431e      	orrs	r6, r3
 801232a:	0213      	lsls	r3, r2, #8
 801232c:	4698      	mov	r8, r3
 801232e:	0433      	lsls	r3, r6, #16
 8012330:	0c1b      	lsrs	r3, r3, #16
 8012332:	4699      	mov	r9, r3
 8012334:	0c31      	lsrs	r1, r6, #16
 8012336:	9101      	str	r1, [sp, #4]
 8012338:	f7fe ff92 	bl	8011260 <__aeabi_uidivmod>
 801233c:	464a      	mov	r2, r9
 801233e:	4342      	muls	r2, r0
 8012340:	040b      	lsls	r3, r1, #16
 8012342:	0c21      	lsrs	r1, r4, #16
 8012344:	0005      	movs	r5, r0
 8012346:	4319      	orrs	r1, r3
 8012348:	428a      	cmp	r2, r1
 801234a:	d907      	bls.n	801235c <__aeabi_ddiv+0x2f4>
 801234c:	1989      	adds	r1, r1, r6
 801234e:	3d01      	subs	r5, #1
 8012350:	428e      	cmp	r6, r1
 8012352:	d803      	bhi.n	801235c <__aeabi_ddiv+0x2f4>
 8012354:	428a      	cmp	r2, r1
 8012356:	d901      	bls.n	801235c <__aeabi_ddiv+0x2f4>
 8012358:	1e85      	subs	r5, r0, #2
 801235a:	1989      	adds	r1, r1, r6
 801235c:	1a88      	subs	r0, r1, r2
 801235e:	9901      	ldr	r1, [sp, #4]
 8012360:	f7fe ff7e 	bl	8011260 <__aeabi_uidivmod>
 8012364:	0409      	lsls	r1, r1, #16
 8012366:	468c      	mov	ip, r1
 8012368:	464a      	mov	r2, r9
 801236a:	0421      	lsls	r1, r4, #16
 801236c:	4664      	mov	r4, ip
 801236e:	4342      	muls	r2, r0
 8012370:	0c09      	lsrs	r1, r1, #16
 8012372:	0003      	movs	r3, r0
 8012374:	4321      	orrs	r1, r4
 8012376:	428a      	cmp	r2, r1
 8012378:	d904      	bls.n	8012384 <__aeabi_ddiv+0x31c>
 801237a:	1989      	adds	r1, r1, r6
 801237c:	3b01      	subs	r3, #1
 801237e:	428e      	cmp	r6, r1
 8012380:	d800      	bhi.n	8012384 <__aeabi_ddiv+0x31c>
 8012382:	e0f1      	b.n	8012568 <__aeabi_ddiv+0x500>
 8012384:	042d      	lsls	r5, r5, #16
 8012386:	431d      	orrs	r5, r3
 8012388:	46ab      	mov	fp, r5
 801238a:	4643      	mov	r3, r8
 801238c:	1a89      	subs	r1, r1, r2
 801238e:	4642      	mov	r2, r8
 8012390:	0c28      	lsrs	r0, r5, #16
 8012392:	0412      	lsls	r2, r2, #16
 8012394:	0c1d      	lsrs	r5, r3, #16
 8012396:	465b      	mov	r3, fp
 8012398:	0c14      	lsrs	r4, r2, #16
 801239a:	0022      	movs	r2, r4
 801239c:	041b      	lsls	r3, r3, #16
 801239e:	0c1b      	lsrs	r3, r3, #16
 80123a0:	435a      	muls	r2, r3
 80123a2:	9403      	str	r4, [sp, #12]
 80123a4:	436b      	muls	r3, r5
 80123a6:	4344      	muls	r4, r0
 80123a8:	9502      	str	r5, [sp, #8]
 80123aa:	4368      	muls	r0, r5
 80123ac:	191b      	adds	r3, r3, r4
 80123ae:	0c15      	lsrs	r5, r2, #16
 80123b0:	18eb      	adds	r3, r5, r3
 80123b2:	429c      	cmp	r4, r3
 80123b4:	d903      	bls.n	80123be <__aeabi_ddiv+0x356>
 80123b6:	2480      	movs	r4, #128	; 0x80
 80123b8:	0264      	lsls	r4, r4, #9
 80123ba:	46a4      	mov	ip, r4
 80123bc:	4460      	add	r0, ip
 80123be:	0c1c      	lsrs	r4, r3, #16
 80123c0:	0415      	lsls	r5, r2, #16
 80123c2:	041b      	lsls	r3, r3, #16
 80123c4:	0c2d      	lsrs	r5, r5, #16
 80123c6:	1820      	adds	r0, r4, r0
 80123c8:	195d      	adds	r5, r3, r5
 80123ca:	4281      	cmp	r1, r0
 80123cc:	d377      	bcc.n	80124be <__aeabi_ddiv+0x456>
 80123ce:	d073      	beq.n	80124b8 <__aeabi_ddiv+0x450>
 80123d0:	1a0c      	subs	r4, r1, r0
 80123d2:	4aa2      	ldr	r2, [pc, #648]	; (801265c <__aeabi_ddiv+0x5f4>)
 80123d4:	1b7d      	subs	r5, r7, r5
 80123d6:	42af      	cmp	r7, r5
 80123d8:	41bf      	sbcs	r7, r7
 80123da:	4694      	mov	ip, r2
 80123dc:	9b00      	ldr	r3, [sp, #0]
 80123de:	427f      	negs	r7, r7
 80123e0:	4463      	add	r3, ip
 80123e2:	1be0      	subs	r0, r4, r7
 80123e4:	001c      	movs	r4, r3
 80123e6:	4286      	cmp	r6, r0
 80123e8:	d100      	bne.n	80123ec <__aeabi_ddiv+0x384>
 80123ea:	e0db      	b.n	80125a4 <__aeabi_ddiv+0x53c>
 80123ec:	9901      	ldr	r1, [sp, #4]
 80123ee:	f7fe ff37 	bl	8011260 <__aeabi_uidivmod>
 80123f2:	464a      	mov	r2, r9
 80123f4:	4342      	muls	r2, r0
 80123f6:	040b      	lsls	r3, r1, #16
 80123f8:	0c29      	lsrs	r1, r5, #16
 80123fa:	0007      	movs	r7, r0
 80123fc:	4319      	orrs	r1, r3
 80123fe:	428a      	cmp	r2, r1
 8012400:	d907      	bls.n	8012412 <__aeabi_ddiv+0x3aa>
 8012402:	1989      	adds	r1, r1, r6
 8012404:	3f01      	subs	r7, #1
 8012406:	428e      	cmp	r6, r1
 8012408:	d803      	bhi.n	8012412 <__aeabi_ddiv+0x3aa>
 801240a:	428a      	cmp	r2, r1
 801240c:	d901      	bls.n	8012412 <__aeabi_ddiv+0x3aa>
 801240e:	1e87      	subs	r7, r0, #2
 8012410:	1989      	adds	r1, r1, r6
 8012412:	1a88      	subs	r0, r1, r2
 8012414:	9901      	ldr	r1, [sp, #4]
 8012416:	f7fe ff23 	bl	8011260 <__aeabi_uidivmod>
 801241a:	0409      	lsls	r1, r1, #16
 801241c:	464a      	mov	r2, r9
 801241e:	4689      	mov	r9, r1
 8012420:	0429      	lsls	r1, r5, #16
 8012422:	464d      	mov	r5, r9
 8012424:	4342      	muls	r2, r0
 8012426:	0c09      	lsrs	r1, r1, #16
 8012428:	0003      	movs	r3, r0
 801242a:	4329      	orrs	r1, r5
 801242c:	428a      	cmp	r2, r1
 801242e:	d907      	bls.n	8012440 <__aeabi_ddiv+0x3d8>
 8012430:	1989      	adds	r1, r1, r6
 8012432:	3b01      	subs	r3, #1
 8012434:	428e      	cmp	r6, r1
 8012436:	d803      	bhi.n	8012440 <__aeabi_ddiv+0x3d8>
 8012438:	428a      	cmp	r2, r1
 801243a:	d901      	bls.n	8012440 <__aeabi_ddiv+0x3d8>
 801243c:	1e83      	subs	r3, r0, #2
 801243e:	1989      	adds	r1, r1, r6
 8012440:	043f      	lsls	r7, r7, #16
 8012442:	1a89      	subs	r1, r1, r2
 8012444:	003a      	movs	r2, r7
 8012446:	9f03      	ldr	r7, [sp, #12]
 8012448:	431a      	orrs	r2, r3
 801244a:	0038      	movs	r0, r7
 801244c:	0413      	lsls	r3, r2, #16
 801244e:	0c1b      	lsrs	r3, r3, #16
 8012450:	4358      	muls	r0, r3
 8012452:	4681      	mov	r9, r0
 8012454:	9802      	ldr	r0, [sp, #8]
 8012456:	0c15      	lsrs	r5, r2, #16
 8012458:	436f      	muls	r7, r5
 801245a:	4343      	muls	r3, r0
 801245c:	4345      	muls	r5, r0
 801245e:	4648      	mov	r0, r9
 8012460:	0c00      	lsrs	r0, r0, #16
 8012462:	4684      	mov	ip, r0
 8012464:	19db      	adds	r3, r3, r7
 8012466:	4463      	add	r3, ip
 8012468:	429f      	cmp	r7, r3
 801246a:	d903      	bls.n	8012474 <__aeabi_ddiv+0x40c>
 801246c:	2080      	movs	r0, #128	; 0x80
 801246e:	0240      	lsls	r0, r0, #9
 8012470:	4684      	mov	ip, r0
 8012472:	4465      	add	r5, ip
 8012474:	4648      	mov	r0, r9
 8012476:	0c1f      	lsrs	r7, r3, #16
 8012478:	0400      	lsls	r0, r0, #16
 801247a:	041b      	lsls	r3, r3, #16
 801247c:	0c00      	lsrs	r0, r0, #16
 801247e:	197d      	adds	r5, r7, r5
 8012480:	1818      	adds	r0, r3, r0
 8012482:	42a9      	cmp	r1, r5
 8012484:	d200      	bcs.n	8012488 <__aeabi_ddiv+0x420>
 8012486:	e084      	b.n	8012592 <__aeabi_ddiv+0x52a>
 8012488:	d100      	bne.n	801248c <__aeabi_ddiv+0x424>
 801248a:	e07f      	b.n	801258c <__aeabi_ddiv+0x524>
 801248c:	2301      	movs	r3, #1
 801248e:	431a      	orrs	r2, r3
 8012490:	e657      	b.n	8012142 <__aeabi_ddiv+0xda>
 8012492:	2380      	movs	r3, #128	; 0x80
 8012494:	464a      	mov	r2, r9
 8012496:	031b      	lsls	r3, r3, #12
 8012498:	4313      	orrs	r3, r2
 801249a:	031b      	lsls	r3, r3, #12
 801249c:	0b1b      	lsrs	r3, r3, #12
 801249e:	46aa      	mov	sl, r5
 80124a0:	4a6f      	ldr	r2, [pc, #444]	; (8012660 <__aeabi_ddiv+0x5f8>)
 80124a2:	e66f      	b.n	8012184 <__aeabi_ddiv+0x11c>
 80124a4:	42ba      	cmp	r2, r7
 80124a6:	d900      	bls.n	80124aa <__aeabi_ddiv+0x442>
 80124a8:	e735      	b.n	8012316 <__aeabi_ddiv+0x2ae>
 80124aa:	464b      	mov	r3, r9
 80124ac:	07dc      	lsls	r4, r3, #31
 80124ae:	0858      	lsrs	r0, r3, #1
 80124b0:	087b      	lsrs	r3, r7, #1
 80124b2:	431c      	orrs	r4, r3
 80124b4:	07ff      	lsls	r7, r7, #31
 80124b6:	e734      	b.n	8012322 <__aeabi_ddiv+0x2ba>
 80124b8:	2400      	movs	r4, #0
 80124ba:	42af      	cmp	r7, r5
 80124bc:	d289      	bcs.n	80123d2 <__aeabi_ddiv+0x36a>
 80124be:	4447      	add	r7, r8
 80124c0:	4547      	cmp	r7, r8
 80124c2:	41a4      	sbcs	r4, r4
 80124c4:	465b      	mov	r3, fp
 80124c6:	4264      	negs	r4, r4
 80124c8:	19a4      	adds	r4, r4, r6
 80124ca:	1864      	adds	r4, r4, r1
 80124cc:	3b01      	subs	r3, #1
 80124ce:	42a6      	cmp	r6, r4
 80124d0:	d21e      	bcs.n	8012510 <__aeabi_ddiv+0x4a8>
 80124d2:	42a0      	cmp	r0, r4
 80124d4:	d86d      	bhi.n	80125b2 <__aeabi_ddiv+0x54a>
 80124d6:	d100      	bne.n	80124da <__aeabi_ddiv+0x472>
 80124d8:	e0b6      	b.n	8012648 <__aeabi_ddiv+0x5e0>
 80124da:	1a24      	subs	r4, r4, r0
 80124dc:	469b      	mov	fp, r3
 80124de:	e778      	b.n	80123d2 <__aeabi_ddiv+0x36a>
 80124e0:	0003      	movs	r3, r0
 80124e2:	465a      	mov	r2, fp
 80124e4:	3b28      	subs	r3, #40	; 0x28
 80124e6:	409a      	lsls	r2, r3
 80124e8:	2700      	movs	r7, #0
 80124ea:	4691      	mov	r9, r2
 80124ec:	e688      	b.n	8012200 <__aeabi_ddiv+0x198>
 80124ee:	4658      	mov	r0, fp
 80124f0:	f7fe fdf4 	bl	80110dc <__clzsi2>
 80124f4:	3020      	adds	r0, #32
 80124f6:	e672      	b.n	80121de <__aeabi_ddiv+0x176>
 80124f8:	0003      	movs	r3, r0
 80124fa:	4652      	mov	r2, sl
 80124fc:	3b28      	subs	r3, #40	; 0x28
 80124fe:	409a      	lsls	r2, r3
 8012500:	4693      	mov	fp, r2
 8012502:	2200      	movs	r2, #0
 8012504:	e6b4      	b.n	8012270 <__aeabi_ddiv+0x208>
 8012506:	4650      	mov	r0, sl
 8012508:	f7fe fde8 	bl	80110dc <__clzsi2>
 801250c:	3020      	adds	r0, #32
 801250e:	e69a      	b.n	8012246 <__aeabi_ddiv+0x1de>
 8012510:	42a6      	cmp	r6, r4
 8012512:	d1e2      	bne.n	80124da <__aeabi_ddiv+0x472>
 8012514:	45b8      	cmp	r8, r7
 8012516:	d9dc      	bls.n	80124d2 <__aeabi_ddiv+0x46a>
 8012518:	1a34      	subs	r4, r6, r0
 801251a:	469b      	mov	fp, r3
 801251c:	e759      	b.n	80123d2 <__aeabi_ddiv+0x36a>
 801251e:	2b1f      	cmp	r3, #31
 8012520:	dc65      	bgt.n	80125ee <__aeabi_ddiv+0x586>
 8012522:	4c50      	ldr	r4, [pc, #320]	; (8012664 <__aeabi_ddiv+0x5fc>)
 8012524:	9900      	ldr	r1, [sp, #0]
 8012526:	46a4      	mov	ip, r4
 8012528:	465c      	mov	r4, fp
 801252a:	4461      	add	r1, ip
 801252c:	0008      	movs	r0, r1
 801252e:	408c      	lsls	r4, r1
 8012530:	0011      	movs	r1, r2
 8012532:	4082      	lsls	r2, r0
 8012534:	40d9      	lsrs	r1, r3
 8012536:	1e50      	subs	r0, r2, #1
 8012538:	4182      	sbcs	r2, r0
 801253a:	430c      	orrs	r4, r1
 801253c:	4314      	orrs	r4, r2
 801253e:	465a      	mov	r2, fp
 8012540:	40da      	lsrs	r2, r3
 8012542:	0013      	movs	r3, r2
 8012544:	0762      	lsls	r2, r4, #29
 8012546:	d009      	beq.n	801255c <__aeabi_ddiv+0x4f4>
 8012548:	220f      	movs	r2, #15
 801254a:	4022      	ands	r2, r4
 801254c:	2a04      	cmp	r2, #4
 801254e:	d005      	beq.n	801255c <__aeabi_ddiv+0x4f4>
 8012550:	0022      	movs	r2, r4
 8012552:	1d14      	adds	r4, r2, #4
 8012554:	4294      	cmp	r4, r2
 8012556:	4189      	sbcs	r1, r1
 8012558:	4249      	negs	r1, r1
 801255a:	185b      	adds	r3, r3, r1
 801255c:	021a      	lsls	r2, r3, #8
 801255e:	d562      	bpl.n	8012626 <__aeabi_ddiv+0x5be>
 8012560:	2201      	movs	r2, #1
 8012562:	2300      	movs	r3, #0
 8012564:	2700      	movs	r7, #0
 8012566:	e60d      	b.n	8012184 <__aeabi_ddiv+0x11c>
 8012568:	428a      	cmp	r2, r1
 801256a:	d800      	bhi.n	801256e <__aeabi_ddiv+0x506>
 801256c:	e70a      	b.n	8012384 <__aeabi_ddiv+0x31c>
 801256e:	1e83      	subs	r3, r0, #2
 8012570:	1989      	adds	r1, r1, r6
 8012572:	e707      	b.n	8012384 <__aeabi_ddiv+0x31c>
 8012574:	230f      	movs	r3, #15
 8012576:	4013      	ands	r3, r2
 8012578:	2b04      	cmp	r3, #4
 801257a:	d100      	bne.n	801257e <__aeabi_ddiv+0x516>
 801257c:	e5e6      	b.n	801214c <__aeabi_ddiv+0xe4>
 801257e:	1d17      	adds	r7, r2, #4
 8012580:	4297      	cmp	r7, r2
 8012582:	4192      	sbcs	r2, r2
 8012584:	4253      	negs	r3, r2
 8012586:	449b      	add	fp, r3
 8012588:	08fa      	lsrs	r2, r7, #3
 801258a:	e5e0      	b.n	801214e <__aeabi_ddiv+0xe6>
 801258c:	2800      	cmp	r0, #0
 801258e:	d100      	bne.n	8012592 <__aeabi_ddiv+0x52a>
 8012590:	e5d7      	b.n	8012142 <__aeabi_ddiv+0xda>
 8012592:	1871      	adds	r1, r6, r1
 8012594:	1e53      	subs	r3, r2, #1
 8012596:	42b1      	cmp	r1, r6
 8012598:	d327      	bcc.n	80125ea <__aeabi_ddiv+0x582>
 801259a:	42a9      	cmp	r1, r5
 801259c:	d315      	bcc.n	80125ca <__aeabi_ddiv+0x562>
 801259e:	d058      	beq.n	8012652 <__aeabi_ddiv+0x5ea>
 80125a0:	001a      	movs	r2, r3
 80125a2:	e773      	b.n	801248c <__aeabi_ddiv+0x424>
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	dc00      	bgt.n	80125aa <__aeabi_ddiv+0x542>
 80125a8:	e604      	b.n	80121b4 <__aeabi_ddiv+0x14c>
 80125aa:	2301      	movs	r3, #1
 80125ac:	2200      	movs	r2, #0
 80125ae:	449b      	add	fp, r3
 80125b0:	e5cd      	b.n	801214e <__aeabi_ddiv+0xe6>
 80125b2:	2302      	movs	r3, #2
 80125b4:	4447      	add	r7, r8
 80125b6:	4547      	cmp	r7, r8
 80125b8:	4189      	sbcs	r1, r1
 80125ba:	425b      	negs	r3, r3
 80125bc:	469c      	mov	ip, r3
 80125be:	4249      	negs	r1, r1
 80125c0:	1989      	adds	r1, r1, r6
 80125c2:	190c      	adds	r4, r1, r4
 80125c4:	44e3      	add	fp, ip
 80125c6:	1a24      	subs	r4, r4, r0
 80125c8:	e703      	b.n	80123d2 <__aeabi_ddiv+0x36a>
 80125ca:	4643      	mov	r3, r8
 80125cc:	005f      	lsls	r7, r3, #1
 80125ce:	4547      	cmp	r7, r8
 80125d0:	419b      	sbcs	r3, r3
 80125d2:	46b8      	mov	r8, r7
 80125d4:	425b      	negs	r3, r3
 80125d6:	199e      	adds	r6, r3, r6
 80125d8:	3a02      	subs	r2, #2
 80125da:	1989      	adds	r1, r1, r6
 80125dc:	42a9      	cmp	r1, r5
 80125de:	d000      	beq.n	80125e2 <__aeabi_ddiv+0x57a>
 80125e0:	e754      	b.n	801248c <__aeabi_ddiv+0x424>
 80125e2:	4540      	cmp	r0, r8
 80125e4:	d000      	beq.n	80125e8 <__aeabi_ddiv+0x580>
 80125e6:	e751      	b.n	801248c <__aeabi_ddiv+0x424>
 80125e8:	e5ab      	b.n	8012142 <__aeabi_ddiv+0xda>
 80125ea:	001a      	movs	r2, r3
 80125ec:	e7f6      	b.n	80125dc <__aeabi_ddiv+0x574>
 80125ee:	211f      	movs	r1, #31
 80125f0:	465f      	mov	r7, fp
 80125f2:	4249      	negs	r1, r1
 80125f4:	1b0c      	subs	r4, r1, r4
 80125f6:	40e7      	lsrs	r7, r4
 80125f8:	2b20      	cmp	r3, #32
 80125fa:	d007      	beq.n	801260c <__aeabi_ddiv+0x5a4>
 80125fc:	491a      	ldr	r1, [pc, #104]	; (8012668 <__aeabi_ddiv+0x600>)
 80125fe:	9b00      	ldr	r3, [sp, #0]
 8012600:	468c      	mov	ip, r1
 8012602:	4463      	add	r3, ip
 8012604:	0018      	movs	r0, r3
 8012606:	465b      	mov	r3, fp
 8012608:	4083      	lsls	r3, r0
 801260a:	431a      	orrs	r2, r3
 801260c:	1e50      	subs	r0, r2, #1
 801260e:	4182      	sbcs	r2, r0
 8012610:	433a      	orrs	r2, r7
 8012612:	2707      	movs	r7, #7
 8012614:	2300      	movs	r3, #0
 8012616:	4017      	ands	r7, r2
 8012618:	d009      	beq.n	801262e <__aeabi_ddiv+0x5c6>
 801261a:	210f      	movs	r1, #15
 801261c:	2300      	movs	r3, #0
 801261e:	4011      	ands	r1, r2
 8012620:	0014      	movs	r4, r2
 8012622:	2904      	cmp	r1, #4
 8012624:	d195      	bne.n	8012552 <__aeabi_ddiv+0x4ea>
 8012626:	0022      	movs	r2, r4
 8012628:	075f      	lsls	r7, r3, #29
 801262a:	025b      	lsls	r3, r3, #9
 801262c:	0b1b      	lsrs	r3, r3, #12
 801262e:	08d2      	lsrs	r2, r2, #3
 8012630:	4317      	orrs	r7, r2
 8012632:	2200      	movs	r2, #0
 8012634:	e5a6      	b.n	8012184 <__aeabi_ddiv+0x11c>
 8012636:	2380      	movs	r3, #128	; 0x80
 8012638:	4659      	mov	r1, fp
 801263a:	031b      	lsls	r3, r3, #12
 801263c:	430b      	orrs	r3, r1
 801263e:	031b      	lsls	r3, r3, #12
 8012640:	0017      	movs	r7, r2
 8012642:	0b1b      	lsrs	r3, r3, #12
 8012644:	4a06      	ldr	r2, [pc, #24]	; (8012660 <__aeabi_ddiv+0x5f8>)
 8012646:	e59d      	b.n	8012184 <__aeabi_ddiv+0x11c>
 8012648:	42bd      	cmp	r5, r7
 801264a:	d8b2      	bhi.n	80125b2 <__aeabi_ddiv+0x54a>
 801264c:	469b      	mov	fp, r3
 801264e:	2400      	movs	r4, #0
 8012650:	e6bf      	b.n	80123d2 <__aeabi_ddiv+0x36a>
 8012652:	4580      	cmp	r8, r0
 8012654:	d3b9      	bcc.n	80125ca <__aeabi_ddiv+0x562>
 8012656:	001a      	movs	r2, r3
 8012658:	e7c3      	b.n	80125e2 <__aeabi_ddiv+0x57a>
 801265a:	46c0      	nop			; (mov r8, r8)
 801265c:	000003ff 	.word	0x000003ff
 8012660:	000007ff 	.word	0x000007ff
 8012664:	0000041e 	.word	0x0000041e
 8012668:	0000043e 	.word	0x0000043e

0801266c <__eqdf2>:
 801266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801266e:	464f      	mov	r7, r9
 8012670:	4646      	mov	r6, r8
 8012672:	46d6      	mov	lr, sl
 8012674:	4684      	mov	ip, r0
 8012676:	b5c0      	push	{r6, r7, lr}
 8012678:	4680      	mov	r8, r0
 801267a:	4e19      	ldr	r6, [pc, #100]	; (80126e0 <__eqdf2+0x74>)
 801267c:	0318      	lsls	r0, r3, #12
 801267e:	030f      	lsls	r7, r1, #12
 8012680:	004d      	lsls	r5, r1, #1
 8012682:	0b00      	lsrs	r0, r0, #12
 8012684:	005c      	lsls	r4, r3, #1
 8012686:	4682      	mov	sl, r0
 8012688:	0b3f      	lsrs	r7, r7, #12
 801268a:	0d6d      	lsrs	r5, r5, #21
 801268c:	0fc9      	lsrs	r1, r1, #31
 801268e:	4691      	mov	r9, r2
 8012690:	0d64      	lsrs	r4, r4, #21
 8012692:	0fdb      	lsrs	r3, r3, #31
 8012694:	2001      	movs	r0, #1
 8012696:	42b5      	cmp	r5, r6
 8012698:	d00a      	beq.n	80126b0 <__eqdf2+0x44>
 801269a:	42b4      	cmp	r4, r6
 801269c:	d003      	beq.n	80126a6 <__eqdf2+0x3a>
 801269e:	42a5      	cmp	r5, r4
 80126a0:	d101      	bne.n	80126a6 <__eqdf2+0x3a>
 80126a2:	4557      	cmp	r7, sl
 80126a4:	d00c      	beq.n	80126c0 <__eqdf2+0x54>
 80126a6:	bc1c      	pop	{r2, r3, r4}
 80126a8:	4690      	mov	r8, r2
 80126aa:	4699      	mov	r9, r3
 80126ac:	46a2      	mov	sl, r4
 80126ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126b0:	4666      	mov	r6, ip
 80126b2:	433e      	orrs	r6, r7
 80126b4:	d1f7      	bne.n	80126a6 <__eqdf2+0x3a>
 80126b6:	42ac      	cmp	r4, r5
 80126b8:	d1f5      	bne.n	80126a6 <__eqdf2+0x3a>
 80126ba:	4654      	mov	r4, sl
 80126bc:	4314      	orrs	r4, r2
 80126be:	d1f2      	bne.n	80126a6 <__eqdf2+0x3a>
 80126c0:	2001      	movs	r0, #1
 80126c2:	45c8      	cmp	r8, r9
 80126c4:	d1ef      	bne.n	80126a6 <__eqdf2+0x3a>
 80126c6:	4299      	cmp	r1, r3
 80126c8:	d007      	beq.n	80126da <__eqdf2+0x6e>
 80126ca:	2d00      	cmp	r5, #0
 80126cc:	d1eb      	bne.n	80126a6 <__eqdf2+0x3a>
 80126ce:	4663      	mov	r3, ip
 80126d0:	431f      	orrs	r7, r3
 80126d2:	0038      	movs	r0, r7
 80126d4:	1e47      	subs	r7, r0, #1
 80126d6:	41b8      	sbcs	r0, r7
 80126d8:	e7e5      	b.n	80126a6 <__eqdf2+0x3a>
 80126da:	2000      	movs	r0, #0
 80126dc:	e7e3      	b.n	80126a6 <__eqdf2+0x3a>
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	000007ff 	.word	0x000007ff

080126e4 <__gedf2>:
 80126e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126e6:	464f      	mov	r7, r9
 80126e8:	4646      	mov	r6, r8
 80126ea:	46d6      	mov	lr, sl
 80126ec:	004d      	lsls	r5, r1, #1
 80126ee:	b5c0      	push	{r6, r7, lr}
 80126f0:	030e      	lsls	r6, r1, #12
 80126f2:	0fc9      	lsrs	r1, r1, #31
 80126f4:	468a      	mov	sl, r1
 80126f6:	492c      	ldr	r1, [pc, #176]	; (80127a8 <__gedf2+0xc4>)
 80126f8:	031f      	lsls	r7, r3, #12
 80126fa:	005c      	lsls	r4, r3, #1
 80126fc:	4680      	mov	r8, r0
 80126fe:	0b36      	lsrs	r6, r6, #12
 8012700:	0d6d      	lsrs	r5, r5, #21
 8012702:	4691      	mov	r9, r2
 8012704:	0b3f      	lsrs	r7, r7, #12
 8012706:	0d64      	lsrs	r4, r4, #21
 8012708:	0fdb      	lsrs	r3, r3, #31
 801270a:	428d      	cmp	r5, r1
 801270c:	d01e      	beq.n	801274c <__gedf2+0x68>
 801270e:	428c      	cmp	r4, r1
 8012710:	d016      	beq.n	8012740 <__gedf2+0x5c>
 8012712:	2d00      	cmp	r5, #0
 8012714:	d11e      	bne.n	8012754 <__gedf2+0x70>
 8012716:	4330      	orrs	r0, r6
 8012718:	4684      	mov	ip, r0
 801271a:	2c00      	cmp	r4, #0
 801271c:	d101      	bne.n	8012722 <__gedf2+0x3e>
 801271e:	433a      	orrs	r2, r7
 8012720:	d023      	beq.n	801276a <__gedf2+0x86>
 8012722:	4662      	mov	r2, ip
 8012724:	2a00      	cmp	r2, #0
 8012726:	d01a      	beq.n	801275e <__gedf2+0x7a>
 8012728:	459a      	cmp	sl, r3
 801272a:	d029      	beq.n	8012780 <__gedf2+0x9c>
 801272c:	4651      	mov	r1, sl
 801272e:	2002      	movs	r0, #2
 8012730:	3901      	subs	r1, #1
 8012732:	4008      	ands	r0, r1
 8012734:	3801      	subs	r0, #1
 8012736:	bc1c      	pop	{r2, r3, r4}
 8012738:	4690      	mov	r8, r2
 801273a:	4699      	mov	r9, r3
 801273c:	46a2      	mov	sl, r4
 801273e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012740:	0039      	movs	r1, r7
 8012742:	4311      	orrs	r1, r2
 8012744:	d0e5      	beq.n	8012712 <__gedf2+0x2e>
 8012746:	2002      	movs	r0, #2
 8012748:	4240      	negs	r0, r0
 801274a:	e7f4      	b.n	8012736 <__gedf2+0x52>
 801274c:	4330      	orrs	r0, r6
 801274e:	d1fa      	bne.n	8012746 <__gedf2+0x62>
 8012750:	42ac      	cmp	r4, r5
 8012752:	d00f      	beq.n	8012774 <__gedf2+0x90>
 8012754:	2c00      	cmp	r4, #0
 8012756:	d10f      	bne.n	8012778 <__gedf2+0x94>
 8012758:	433a      	orrs	r2, r7
 801275a:	d0e7      	beq.n	801272c <__gedf2+0x48>
 801275c:	e00c      	b.n	8012778 <__gedf2+0x94>
 801275e:	2201      	movs	r2, #1
 8012760:	3b01      	subs	r3, #1
 8012762:	4393      	bics	r3, r2
 8012764:	0018      	movs	r0, r3
 8012766:	3001      	adds	r0, #1
 8012768:	e7e5      	b.n	8012736 <__gedf2+0x52>
 801276a:	4663      	mov	r3, ip
 801276c:	2000      	movs	r0, #0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d0e1      	beq.n	8012736 <__gedf2+0x52>
 8012772:	e7db      	b.n	801272c <__gedf2+0x48>
 8012774:	433a      	orrs	r2, r7
 8012776:	d1e6      	bne.n	8012746 <__gedf2+0x62>
 8012778:	459a      	cmp	sl, r3
 801277a:	d1d7      	bne.n	801272c <__gedf2+0x48>
 801277c:	42a5      	cmp	r5, r4
 801277e:	dcd5      	bgt.n	801272c <__gedf2+0x48>
 8012780:	42a5      	cmp	r5, r4
 8012782:	db05      	blt.n	8012790 <__gedf2+0xac>
 8012784:	42be      	cmp	r6, r7
 8012786:	d8d1      	bhi.n	801272c <__gedf2+0x48>
 8012788:	d008      	beq.n	801279c <__gedf2+0xb8>
 801278a:	2000      	movs	r0, #0
 801278c:	42be      	cmp	r6, r7
 801278e:	d2d2      	bcs.n	8012736 <__gedf2+0x52>
 8012790:	4650      	mov	r0, sl
 8012792:	2301      	movs	r3, #1
 8012794:	3801      	subs	r0, #1
 8012796:	4398      	bics	r0, r3
 8012798:	3001      	adds	r0, #1
 801279a:	e7cc      	b.n	8012736 <__gedf2+0x52>
 801279c:	45c8      	cmp	r8, r9
 801279e:	d8c5      	bhi.n	801272c <__gedf2+0x48>
 80127a0:	2000      	movs	r0, #0
 80127a2:	45c8      	cmp	r8, r9
 80127a4:	d3f4      	bcc.n	8012790 <__gedf2+0xac>
 80127a6:	e7c6      	b.n	8012736 <__gedf2+0x52>
 80127a8:	000007ff 	.word	0x000007ff

080127ac <__ledf2>:
 80127ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127ae:	464f      	mov	r7, r9
 80127b0:	4646      	mov	r6, r8
 80127b2:	46d6      	mov	lr, sl
 80127b4:	004d      	lsls	r5, r1, #1
 80127b6:	b5c0      	push	{r6, r7, lr}
 80127b8:	030e      	lsls	r6, r1, #12
 80127ba:	0fc9      	lsrs	r1, r1, #31
 80127bc:	468a      	mov	sl, r1
 80127be:	492e      	ldr	r1, [pc, #184]	; (8012878 <__ledf2+0xcc>)
 80127c0:	031f      	lsls	r7, r3, #12
 80127c2:	005c      	lsls	r4, r3, #1
 80127c4:	4680      	mov	r8, r0
 80127c6:	0b36      	lsrs	r6, r6, #12
 80127c8:	0d6d      	lsrs	r5, r5, #21
 80127ca:	4691      	mov	r9, r2
 80127cc:	0b3f      	lsrs	r7, r7, #12
 80127ce:	0d64      	lsrs	r4, r4, #21
 80127d0:	0fdb      	lsrs	r3, r3, #31
 80127d2:	428d      	cmp	r5, r1
 80127d4:	d018      	beq.n	8012808 <__ledf2+0x5c>
 80127d6:	428c      	cmp	r4, r1
 80127d8:	d011      	beq.n	80127fe <__ledf2+0x52>
 80127da:	2d00      	cmp	r5, #0
 80127dc:	d118      	bne.n	8012810 <__ledf2+0x64>
 80127de:	4330      	orrs	r0, r6
 80127e0:	4684      	mov	ip, r0
 80127e2:	2c00      	cmp	r4, #0
 80127e4:	d11e      	bne.n	8012824 <__ledf2+0x78>
 80127e6:	433a      	orrs	r2, r7
 80127e8:	d11c      	bne.n	8012824 <__ledf2+0x78>
 80127ea:	4663      	mov	r3, ip
 80127ec:	2000      	movs	r0, #0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d030      	beq.n	8012854 <__ledf2+0xa8>
 80127f2:	4651      	mov	r1, sl
 80127f4:	2002      	movs	r0, #2
 80127f6:	3901      	subs	r1, #1
 80127f8:	4008      	ands	r0, r1
 80127fa:	3801      	subs	r0, #1
 80127fc:	e02a      	b.n	8012854 <__ledf2+0xa8>
 80127fe:	0039      	movs	r1, r7
 8012800:	4311      	orrs	r1, r2
 8012802:	d0ea      	beq.n	80127da <__ledf2+0x2e>
 8012804:	2002      	movs	r0, #2
 8012806:	e025      	b.n	8012854 <__ledf2+0xa8>
 8012808:	4330      	orrs	r0, r6
 801280a:	d1fb      	bne.n	8012804 <__ledf2+0x58>
 801280c:	42ac      	cmp	r4, r5
 801280e:	d026      	beq.n	801285e <__ledf2+0xb2>
 8012810:	2c00      	cmp	r4, #0
 8012812:	d126      	bne.n	8012862 <__ledf2+0xb6>
 8012814:	433a      	orrs	r2, r7
 8012816:	d124      	bne.n	8012862 <__ledf2+0xb6>
 8012818:	4651      	mov	r1, sl
 801281a:	2002      	movs	r0, #2
 801281c:	3901      	subs	r1, #1
 801281e:	4008      	ands	r0, r1
 8012820:	3801      	subs	r0, #1
 8012822:	e017      	b.n	8012854 <__ledf2+0xa8>
 8012824:	4662      	mov	r2, ip
 8012826:	2a00      	cmp	r2, #0
 8012828:	d00f      	beq.n	801284a <__ledf2+0x9e>
 801282a:	459a      	cmp	sl, r3
 801282c:	d1e1      	bne.n	80127f2 <__ledf2+0x46>
 801282e:	42a5      	cmp	r5, r4
 8012830:	db05      	blt.n	801283e <__ledf2+0x92>
 8012832:	42be      	cmp	r6, r7
 8012834:	d8dd      	bhi.n	80127f2 <__ledf2+0x46>
 8012836:	d019      	beq.n	801286c <__ledf2+0xc0>
 8012838:	2000      	movs	r0, #0
 801283a:	42be      	cmp	r6, r7
 801283c:	d20a      	bcs.n	8012854 <__ledf2+0xa8>
 801283e:	4650      	mov	r0, sl
 8012840:	2301      	movs	r3, #1
 8012842:	3801      	subs	r0, #1
 8012844:	4398      	bics	r0, r3
 8012846:	3001      	adds	r0, #1
 8012848:	e004      	b.n	8012854 <__ledf2+0xa8>
 801284a:	2201      	movs	r2, #1
 801284c:	3b01      	subs	r3, #1
 801284e:	4393      	bics	r3, r2
 8012850:	0018      	movs	r0, r3
 8012852:	3001      	adds	r0, #1
 8012854:	bc1c      	pop	{r2, r3, r4}
 8012856:	4690      	mov	r8, r2
 8012858:	4699      	mov	r9, r3
 801285a:	46a2      	mov	sl, r4
 801285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801285e:	433a      	orrs	r2, r7
 8012860:	d1d0      	bne.n	8012804 <__ledf2+0x58>
 8012862:	459a      	cmp	sl, r3
 8012864:	d1c5      	bne.n	80127f2 <__ledf2+0x46>
 8012866:	42a5      	cmp	r5, r4
 8012868:	dcc3      	bgt.n	80127f2 <__ledf2+0x46>
 801286a:	e7e0      	b.n	801282e <__ledf2+0x82>
 801286c:	45c8      	cmp	r8, r9
 801286e:	d8c0      	bhi.n	80127f2 <__ledf2+0x46>
 8012870:	2000      	movs	r0, #0
 8012872:	45c8      	cmp	r8, r9
 8012874:	d3e3      	bcc.n	801283e <__ledf2+0x92>
 8012876:	e7ed      	b.n	8012854 <__ledf2+0xa8>
 8012878:	000007ff 	.word	0x000007ff

0801287c <__aeabi_dmul>:
 801287c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801287e:	4657      	mov	r7, sl
 8012880:	46de      	mov	lr, fp
 8012882:	464e      	mov	r6, r9
 8012884:	4645      	mov	r5, r8
 8012886:	b5e0      	push	{r5, r6, r7, lr}
 8012888:	4683      	mov	fp, r0
 801288a:	0006      	movs	r6, r0
 801288c:	030f      	lsls	r7, r1, #12
 801288e:	0048      	lsls	r0, r1, #1
 8012890:	b087      	sub	sp, #28
 8012892:	4692      	mov	sl, r2
 8012894:	001d      	movs	r5, r3
 8012896:	0b3f      	lsrs	r7, r7, #12
 8012898:	0d40      	lsrs	r0, r0, #21
 801289a:	0fcc      	lsrs	r4, r1, #31
 801289c:	2800      	cmp	r0, #0
 801289e:	d100      	bne.n	80128a2 <__aeabi_dmul+0x26>
 80128a0:	e06f      	b.n	8012982 <__aeabi_dmul+0x106>
 80128a2:	4bde      	ldr	r3, [pc, #888]	; (8012c1c <__aeabi_dmul+0x3a0>)
 80128a4:	4298      	cmp	r0, r3
 80128a6:	d038      	beq.n	801291a <__aeabi_dmul+0x9e>
 80128a8:	2380      	movs	r3, #128	; 0x80
 80128aa:	00ff      	lsls	r7, r7, #3
 80128ac:	041b      	lsls	r3, r3, #16
 80128ae:	431f      	orrs	r7, r3
 80128b0:	0f73      	lsrs	r3, r6, #29
 80128b2:	433b      	orrs	r3, r7
 80128b4:	9301      	str	r3, [sp, #4]
 80128b6:	4bda      	ldr	r3, [pc, #872]	; (8012c20 <__aeabi_dmul+0x3a4>)
 80128b8:	2700      	movs	r7, #0
 80128ba:	4699      	mov	r9, r3
 80128bc:	2300      	movs	r3, #0
 80128be:	469b      	mov	fp, r3
 80128c0:	00f6      	lsls	r6, r6, #3
 80128c2:	4481      	add	r9, r0
 80128c4:	032b      	lsls	r3, r5, #12
 80128c6:	0069      	lsls	r1, r5, #1
 80128c8:	0b1b      	lsrs	r3, r3, #12
 80128ca:	4652      	mov	r2, sl
 80128cc:	4698      	mov	r8, r3
 80128ce:	0d49      	lsrs	r1, r1, #21
 80128d0:	0fed      	lsrs	r5, r5, #31
 80128d2:	2900      	cmp	r1, #0
 80128d4:	d100      	bne.n	80128d8 <__aeabi_dmul+0x5c>
 80128d6:	e085      	b.n	80129e4 <__aeabi_dmul+0x168>
 80128d8:	4bd0      	ldr	r3, [pc, #832]	; (8012c1c <__aeabi_dmul+0x3a0>)
 80128da:	4299      	cmp	r1, r3
 80128dc:	d100      	bne.n	80128e0 <__aeabi_dmul+0x64>
 80128de:	e073      	b.n	80129c8 <__aeabi_dmul+0x14c>
 80128e0:	4643      	mov	r3, r8
 80128e2:	00da      	lsls	r2, r3, #3
 80128e4:	2380      	movs	r3, #128	; 0x80
 80128e6:	041b      	lsls	r3, r3, #16
 80128e8:	4313      	orrs	r3, r2
 80128ea:	4652      	mov	r2, sl
 80128ec:	48cc      	ldr	r0, [pc, #816]	; (8012c20 <__aeabi_dmul+0x3a4>)
 80128ee:	0f52      	lsrs	r2, r2, #29
 80128f0:	4684      	mov	ip, r0
 80128f2:	4313      	orrs	r3, r2
 80128f4:	4652      	mov	r2, sl
 80128f6:	2000      	movs	r0, #0
 80128f8:	4461      	add	r1, ip
 80128fa:	00d2      	lsls	r2, r2, #3
 80128fc:	4489      	add	r9, r1
 80128fe:	0021      	movs	r1, r4
 8012900:	4069      	eors	r1, r5
 8012902:	9100      	str	r1, [sp, #0]
 8012904:	468c      	mov	ip, r1
 8012906:	2101      	movs	r1, #1
 8012908:	4449      	add	r1, r9
 801290a:	468a      	mov	sl, r1
 801290c:	2f0f      	cmp	r7, #15
 801290e:	d900      	bls.n	8012912 <__aeabi_dmul+0x96>
 8012910:	e090      	b.n	8012a34 <__aeabi_dmul+0x1b8>
 8012912:	49c4      	ldr	r1, [pc, #784]	; (8012c24 <__aeabi_dmul+0x3a8>)
 8012914:	00bf      	lsls	r7, r7, #2
 8012916:	59cf      	ldr	r7, [r1, r7]
 8012918:	46bf      	mov	pc, r7
 801291a:	465b      	mov	r3, fp
 801291c:	433b      	orrs	r3, r7
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	d000      	beq.n	8012924 <__aeabi_dmul+0xa8>
 8012922:	e16a      	b.n	8012bfa <__aeabi_dmul+0x37e>
 8012924:	2302      	movs	r3, #2
 8012926:	2708      	movs	r7, #8
 8012928:	2600      	movs	r6, #0
 801292a:	4681      	mov	r9, r0
 801292c:	469b      	mov	fp, r3
 801292e:	e7c9      	b.n	80128c4 <__aeabi_dmul+0x48>
 8012930:	0032      	movs	r2, r6
 8012932:	4658      	mov	r0, fp
 8012934:	9b01      	ldr	r3, [sp, #4]
 8012936:	4661      	mov	r1, ip
 8012938:	9100      	str	r1, [sp, #0]
 801293a:	2802      	cmp	r0, #2
 801293c:	d100      	bne.n	8012940 <__aeabi_dmul+0xc4>
 801293e:	e075      	b.n	8012a2c <__aeabi_dmul+0x1b0>
 8012940:	2803      	cmp	r0, #3
 8012942:	d100      	bne.n	8012946 <__aeabi_dmul+0xca>
 8012944:	e1fe      	b.n	8012d44 <__aeabi_dmul+0x4c8>
 8012946:	2801      	cmp	r0, #1
 8012948:	d000      	beq.n	801294c <__aeabi_dmul+0xd0>
 801294a:	e12c      	b.n	8012ba6 <__aeabi_dmul+0x32a>
 801294c:	2300      	movs	r3, #0
 801294e:	2700      	movs	r7, #0
 8012950:	2600      	movs	r6, #0
 8012952:	2500      	movs	r5, #0
 8012954:	033f      	lsls	r7, r7, #12
 8012956:	0d2a      	lsrs	r2, r5, #20
 8012958:	0b3f      	lsrs	r7, r7, #12
 801295a:	48b3      	ldr	r0, [pc, #716]	; (8012c28 <__aeabi_dmul+0x3ac>)
 801295c:	0512      	lsls	r2, r2, #20
 801295e:	433a      	orrs	r2, r7
 8012960:	4002      	ands	r2, r0
 8012962:	051b      	lsls	r3, r3, #20
 8012964:	4313      	orrs	r3, r2
 8012966:	9a00      	ldr	r2, [sp, #0]
 8012968:	005b      	lsls	r3, r3, #1
 801296a:	07d1      	lsls	r1, r2, #31
 801296c:	085b      	lsrs	r3, r3, #1
 801296e:	430b      	orrs	r3, r1
 8012970:	0030      	movs	r0, r6
 8012972:	0019      	movs	r1, r3
 8012974:	b007      	add	sp, #28
 8012976:	bc3c      	pop	{r2, r3, r4, r5}
 8012978:	4690      	mov	r8, r2
 801297a:	4699      	mov	r9, r3
 801297c:	46a2      	mov	sl, r4
 801297e:	46ab      	mov	fp, r5
 8012980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012982:	465b      	mov	r3, fp
 8012984:	433b      	orrs	r3, r7
 8012986:	9301      	str	r3, [sp, #4]
 8012988:	d100      	bne.n	801298c <__aeabi_dmul+0x110>
 801298a:	e12f      	b.n	8012bec <__aeabi_dmul+0x370>
 801298c:	2f00      	cmp	r7, #0
 801298e:	d100      	bne.n	8012992 <__aeabi_dmul+0x116>
 8012990:	e1a5      	b.n	8012cde <__aeabi_dmul+0x462>
 8012992:	0038      	movs	r0, r7
 8012994:	f7fe fba2 	bl	80110dc <__clzsi2>
 8012998:	0003      	movs	r3, r0
 801299a:	3b0b      	subs	r3, #11
 801299c:	2b1c      	cmp	r3, #28
 801299e:	dd00      	ble.n	80129a2 <__aeabi_dmul+0x126>
 80129a0:	e196      	b.n	8012cd0 <__aeabi_dmul+0x454>
 80129a2:	221d      	movs	r2, #29
 80129a4:	1ad3      	subs	r3, r2, r3
 80129a6:	465a      	mov	r2, fp
 80129a8:	0001      	movs	r1, r0
 80129aa:	40da      	lsrs	r2, r3
 80129ac:	465e      	mov	r6, fp
 80129ae:	3908      	subs	r1, #8
 80129b0:	408f      	lsls	r7, r1
 80129b2:	0013      	movs	r3, r2
 80129b4:	408e      	lsls	r6, r1
 80129b6:	433b      	orrs	r3, r7
 80129b8:	9301      	str	r3, [sp, #4]
 80129ba:	4b9c      	ldr	r3, [pc, #624]	; (8012c2c <__aeabi_dmul+0x3b0>)
 80129bc:	2700      	movs	r7, #0
 80129be:	1a1b      	subs	r3, r3, r0
 80129c0:	4699      	mov	r9, r3
 80129c2:	2300      	movs	r3, #0
 80129c4:	469b      	mov	fp, r3
 80129c6:	e77d      	b.n	80128c4 <__aeabi_dmul+0x48>
 80129c8:	4641      	mov	r1, r8
 80129ca:	4653      	mov	r3, sl
 80129cc:	430b      	orrs	r3, r1
 80129ce:	4993      	ldr	r1, [pc, #588]	; (8012c1c <__aeabi_dmul+0x3a0>)
 80129d0:	468c      	mov	ip, r1
 80129d2:	44e1      	add	r9, ip
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d000      	beq.n	80129da <__aeabi_dmul+0x15e>
 80129d8:	e11a      	b.n	8012c10 <__aeabi_dmul+0x394>
 80129da:	2202      	movs	r2, #2
 80129dc:	2002      	movs	r0, #2
 80129de:	4317      	orrs	r7, r2
 80129e0:	2200      	movs	r2, #0
 80129e2:	e78c      	b.n	80128fe <__aeabi_dmul+0x82>
 80129e4:	4313      	orrs	r3, r2
 80129e6:	d100      	bne.n	80129ea <__aeabi_dmul+0x16e>
 80129e8:	e10d      	b.n	8012c06 <__aeabi_dmul+0x38a>
 80129ea:	4643      	mov	r3, r8
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d100      	bne.n	80129f2 <__aeabi_dmul+0x176>
 80129f0:	e181      	b.n	8012cf6 <__aeabi_dmul+0x47a>
 80129f2:	4640      	mov	r0, r8
 80129f4:	f7fe fb72 	bl	80110dc <__clzsi2>
 80129f8:	0002      	movs	r2, r0
 80129fa:	3a0b      	subs	r2, #11
 80129fc:	2a1c      	cmp	r2, #28
 80129fe:	dd00      	ble.n	8012a02 <__aeabi_dmul+0x186>
 8012a00:	e172      	b.n	8012ce8 <__aeabi_dmul+0x46c>
 8012a02:	0001      	movs	r1, r0
 8012a04:	4643      	mov	r3, r8
 8012a06:	3908      	subs	r1, #8
 8012a08:	408b      	lsls	r3, r1
 8012a0a:	4698      	mov	r8, r3
 8012a0c:	231d      	movs	r3, #29
 8012a0e:	1a9a      	subs	r2, r3, r2
 8012a10:	4653      	mov	r3, sl
 8012a12:	40d3      	lsrs	r3, r2
 8012a14:	001a      	movs	r2, r3
 8012a16:	4643      	mov	r3, r8
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	4652      	mov	r2, sl
 8012a1c:	408a      	lsls	r2, r1
 8012a1e:	4649      	mov	r1, r9
 8012a20:	1a08      	subs	r0, r1, r0
 8012a22:	4982      	ldr	r1, [pc, #520]	; (8012c2c <__aeabi_dmul+0x3b0>)
 8012a24:	4689      	mov	r9, r1
 8012a26:	4481      	add	r9, r0
 8012a28:	2000      	movs	r0, #0
 8012a2a:	e768      	b.n	80128fe <__aeabi_dmul+0x82>
 8012a2c:	4b7b      	ldr	r3, [pc, #492]	; (8012c1c <__aeabi_dmul+0x3a0>)
 8012a2e:	2700      	movs	r7, #0
 8012a30:	2600      	movs	r6, #0
 8012a32:	e78e      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012a34:	0c14      	lsrs	r4, r2, #16
 8012a36:	0412      	lsls	r2, r2, #16
 8012a38:	0c12      	lsrs	r2, r2, #16
 8012a3a:	0011      	movs	r1, r2
 8012a3c:	0c37      	lsrs	r7, r6, #16
 8012a3e:	0436      	lsls	r6, r6, #16
 8012a40:	0c35      	lsrs	r5, r6, #16
 8012a42:	4379      	muls	r1, r7
 8012a44:	0028      	movs	r0, r5
 8012a46:	468c      	mov	ip, r1
 8012a48:	002e      	movs	r6, r5
 8012a4a:	4360      	muls	r0, r4
 8012a4c:	4460      	add	r0, ip
 8012a4e:	4683      	mov	fp, r0
 8012a50:	4356      	muls	r6, r2
 8012a52:	0021      	movs	r1, r4
 8012a54:	0c30      	lsrs	r0, r6, #16
 8012a56:	4680      	mov	r8, r0
 8012a58:	4658      	mov	r0, fp
 8012a5a:	4379      	muls	r1, r7
 8012a5c:	4440      	add	r0, r8
 8012a5e:	9102      	str	r1, [sp, #8]
 8012a60:	4584      	cmp	ip, r0
 8012a62:	d906      	bls.n	8012a72 <__aeabi_dmul+0x1f6>
 8012a64:	4688      	mov	r8, r1
 8012a66:	2180      	movs	r1, #128	; 0x80
 8012a68:	0249      	lsls	r1, r1, #9
 8012a6a:	468c      	mov	ip, r1
 8012a6c:	44e0      	add	r8, ip
 8012a6e:	4641      	mov	r1, r8
 8012a70:	9102      	str	r1, [sp, #8]
 8012a72:	0436      	lsls	r6, r6, #16
 8012a74:	0c01      	lsrs	r1, r0, #16
 8012a76:	0c36      	lsrs	r6, r6, #16
 8012a78:	0400      	lsls	r0, r0, #16
 8012a7a:	468b      	mov	fp, r1
 8012a7c:	1981      	adds	r1, r0, r6
 8012a7e:	0c1e      	lsrs	r6, r3, #16
 8012a80:	041b      	lsls	r3, r3, #16
 8012a82:	0c1b      	lsrs	r3, r3, #16
 8012a84:	9103      	str	r1, [sp, #12]
 8012a86:	0019      	movs	r1, r3
 8012a88:	4379      	muls	r1, r7
 8012a8a:	468c      	mov	ip, r1
 8012a8c:	0028      	movs	r0, r5
 8012a8e:	4375      	muls	r5, r6
 8012a90:	4465      	add	r5, ip
 8012a92:	46a8      	mov	r8, r5
 8012a94:	4358      	muls	r0, r3
 8012a96:	0c05      	lsrs	r5, r0, #16
 8012a98:	4445      	add	r5, r8
 8012a9a:	4377      	muls	r7, r6
 8012a9c:	42a9      	cmp	r1, r5
 8012a9e:	d903      	bls.n	8012aa8 <__aeabi_dmul+0x22c>
 8012aa0:	2180      	movs	r1, #128	; 0x80
 8012aa2:	0249      	lsls	r1, r1, #9
 8012aa4:	468c      	mov	ip, r1
 8012aa6:	4467      	add	r7, ip
 8012aa8:	0c29      	lsrs	r1, r5, #16
 8012aaa:	468c      	mov	ip, r1
 8012aac:	0039      	movs	r1, r7
 8012aae:	0400      	lsls	r0, r0, #16
 8012ab0:	0c00      	lsrs	r0, r0, #16
 8012ab2:	042d      	lsls	r5, r5, #16
 8012ab4:	182d      	adds	r5, r5, r0
 8012ab6:	4461      	add	r1, ip
 8012ab8:	44ab      	add	fp, r5
 8012aba:	9105      	str	r1, [sp, #20]
 8012abc:	4659      	mov	r1, fp
 8012abe:	9104      	str	r1, [sp, #16]
 8012ac0:	9901      	ldr	r1, [sp, #4]
 8012ac2:	040f      	lsls	r7, r1, #16
 8012ac4:	0c3f      	lsrs	r7, r7, #16
 8012ac6:	0c08      	lsrs	r0, r1, #16
 8012ac8:	0039      	movs	r1, r7
 8012aca:	4351      	muls	r1, r2
 8012acc:	4342      	muls	r2, r0
 8012ace:	4690      	mov	r8, r2
 8012ad0:	0002      	movs	r2, r0
 8012ad2:	468c      	mov	ip, r1
 8012ad4:	0c09      	lsrs	r1, r1, #16
 8012ad6:	468b      	mov	fp, r1
 8012ad8:	4362      	muls	r2, r4
 8012ada:	437c      	muls	r4, r7
 8012adc:	4444      	add	r4, r8
 8012ade:	445c      	add	r4, fp
 8012ae0:	45a0      	cmp	r8, r4
 8012ae2:	d903      	bls.n	8012aec <__aeabi_dmul+0x270>
 8012ae4:	2180      	movs	r1, #128	; 0x80
 8012ae6:	0249      	lsls	r1, r1, #9
 8012ae8:	4688      	mov	r8, r1
 8012aea:	4442      	add	r2, r8
 8012aec:	0c21      	lsrs	r1, r4, #16
 8012aee:	4688      	mov	r8, r1
 8012af0:	4661      	mov	r1, ip
 8012af2:	0409      	lsls	r1, r1, #16
 8012af4:	0c09      	lsrs	r1, r1, #16
 8012af6:	468c      	mov	ip, r1
 8012af8:	0039      	movs	r1, r7
 8012afa:	4359      	muls	r1, r3
 8012afc:	4343      	muls	r3, r0
 8012afe:	4370      	muls	r0, r6
 8012b00:	437e      	muls	r6, r7
 8012b02:	0c0f      	lsrs	r7, r1, #16
 8012b04:	18f6      	adds	r6, r6, r3
 8012b06:	0424      	lsls	r4, r4, #16
 8012b08:	19be      	adds	r6, r7, r6
 8012b0a:	4464      	add	r4, ip
 8012b0c:	4442      	add	r2, r8
 8012b0e:	468c      	mov	ip, r1
 8012b10:	42b3      	cmp	r3, r6
 8012b12:	d903      	bls.n	8012b1c <__aeabi_dmul+0x2a0>
 8012b14:	2380      	movs	r3, #128	; 0x80
 8012b16:	025b      	lsls	r3, r3, #9
 8012b18:	4698      	mov	r8, r3
 8012b1a:	4440      	add	r0, r8
 8012b1c:	9b02      	ldr	r3, [sp, #8]
 8012b1e:	4661      	mov	r1, ip
 8012b20:	4698      	mov	r8, r3
 8012b22:	9b04      	ldr	r3, [sp, #16]
 8012b24:	0437      	lsls	r7, r6, #16
 8012b26:	4443      	add	r3, r8
 8012b28:	469b      	mov	fp, r3
 8012b2a:	45ab      	cmp	fp, r5
 8012b2c:	41ad      	sbcs	r5, r5
 8012b2e:	426b      	negs	r3, r5
 8012b30:	040d      	lsls	r5, r1, #16
 8012b32:	9905      	ldr	r1, [sp, #20]
 8012b34:	0c2d      	lsrs	r5, r5, #16
 8012b36:	468c      	mov	ip, r1
 8012b38:	197f      	adds	r7, r7, r5
 8012b3a:	4467      	add	r7, ip
 8012b3c:	18fd      	adds	r5, r7, r3
 8012b3e:	46a8      	mov	r8, r5
 8012b40:	465d      	mov	r5, fp
 8012b42:	192d      	adds	r5, r5, r4
 8012b44:	42a5      	cmp	r5, r4
 8012b46:	41a4      	sbcs	r4, r4
 8012b48:	4693      	mov	fp, r2
 8012b4a:	4264      	negs	r4, r4
 8012b4c:	46a4      	mov	ip, r4
 8012b4e:	44c3      	add	fp, r8
 8012b50:	44dc      	add	ip, fp
 8012b52:	428f      	cmp	r7, r1
 8012b54:	41bf      	sbcs	r7, r7
 8012b56:	4598      	cmp	r8, r3
 8012b58:	419b      	sbcs	r3, r3
 8012b5a:	4593      	cmp	fp, r2
 8012b5c:	4192      	sbcs	r2, r2
 8012b5e:	45a4      	cmp	ip, r4
 8012b60:	41a4      	sbcs	r4, r4
 8012b62:	425b      	negs	r3, r3
 8012b64:	427f      	negs	r7, r7
 8012b66:	431f      	orrs	r7, r3
 8012b68:	0c36      	lsrs	r6, r6, #16
 8012b6a:	4252      	negs	r2, r2
 8012b6c:	4264      	negs	r4, r4
 8012b6e:	19bf      	adds	r7, r7, r6
 8012b70:	4322      	orrs	r2, r4
 8012b72:	18bf      	adds	r7, r7, r2
 8012b74:	4662      	mov	r2, ip
 8012b76:	1838      	adds	r0, r7, r0
 8012b78:	0243      	lsls	r3, r0, #9
 8012b7a:	0dd2      	lsrs	r2, r2, #23
 8012b7c:	9903      	ldr	r1, [sp, #12]
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	026a      	lsls	r2, r5, #9
 8012b82:	430a      	orrs	r2, r1
 8012b84:	1e50      	subs	r0, r2, #1
 8012b86:	4182      	sbcs	r2, r0
 8012b88:	4661      	mov	r1, ip
 8012b8a:	0ded      	lsrs	r5, r5, #23
 8012b8c:	432a      	orrs	r2, r5
 8012b8e:	024e      	lsls	r6, r1, #9
 8012b90:	4332      	orrs	r2, r6
 8012b92:	01d9      	lsls	r1, r3, #7
 8012b94:	d400      	bmi.n	8012b98 <__aeabi_dmul+0x31c>
 8012b96:	e0b3      	b.n	8012d00 <__aeabi_dmul+0x484>
 8012b98:	2601      	movs	r6, #1
 8012b9a:	0850      	lsrs	r0, r2, #1
 8012b9c:	4032      	ands	r2, r6
 8012b9e:	4302      	orrs	r2, r0
 8012ba0:	07de      	lsls	r6, r3, #31
 8012ba2:	4332      	orrs	r2, r6
 8012ba4:	085b      	lsrs	r3, r3, #1
 8012ba6:	4c22      	ldr	r4, [pc, #136]	; (8012c30 <__aeabi_dmul+0x3b4>)
 8012ba8:	4454      	add	r4, sl
 8012baa:	2c00      	cmp	r4, #0
 8012bac:	dd62      	ble.n	8012c74 <__aeabi_dmul+0x3f8>
 8012bae:	0751      	lsls	r1, r2, #29
 8012bb0:	d009      	beq.n	8012bc6 <__aeabi_dmul+0x34a>
 8012bb2:	200f      	movs	r0, #15
 8012bb4:	4010      	ands	r0, r2
 8012bb6:	2804      	cmp	r0, #4
 8012bb8:	d005      	beq.n	8012bc6 <__aeabi_dmul+0x34a>
 8012bba:	1d10      	adds	r0, r2, #4
 8012bbc:	4290      	cmp	r0, r2
 8012bbe:	4192      	sbcs	r2, r2
 8012bc0:	4252      	negs	r2, r2
 8012bc2:	189b      	adds	r3, r3, r2
 8012bc4:	0002      	movs	r2, r0
 8012bc6:	01d9      	lsls	r1, r3, #7
 8012bc8:	d504      	bpl.n	8012bd4 <__aeabi_dmul+0x358>
 8012bca:	2480      	movs	r4, #128	; 0x80
 8012bcc:	4819      	ldr	r0, [pc, #100]	; (8012c34 <__aeabi_dmul+0x3b8>)
 8012bce:	00e4      	lsls	r4, r4, #3
 8012bd0:	4003      	ands	r3, r0
 8012bd2:	4454      	add	r4, sl
 8012bd4:	4818      	ldr	r0, [pc, #96]	; (8012c38 <__aeabi_dmul+0x3bc>)
 8012bd6:	4284      	cmp	r4, r0
 8012bd8:	dd00      	ble.n	8012bdc <__aeabi_dmul+0x360>
 8012bda:	e727      	b.n	8012a2c <__aeabi_dmul+0x1b0>
 8012bdc:	075e      	lsls	r6, r3, #29
 8012bde:	025b      	lsls	r3, r3, #9
 8012be0:	08d2      	lsrs	r2, r2, #3
 8012be2:	0b1f      	lsrs	r7, r3, #12
 8012be4:	0563      	lsls	r3, r4, #21
 8012be6:	4316      	orrs	r6, r2
 8012be8:	0d5b      	lsrs	r3, r3, #21
 8012bea:	e6b2      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012bec:	2300      	movs	r3, #0
 8012bee:	4699      	mov	r9, r3
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	2704      	movs	r7, #4
 8012bf4:	2600      	movs	r6, #0
 8012bf6:	469b      	mov	fp, r3
 8012bf8:	e664      	b.n	80128c4 <__aeabi_dmul+0x48>
 8012bfa:	2303      	movs	r3, #3
 8012bfc:	9701      	str	r7, [sp, #4]
 8012bfe:	4681      	mov	r9, r0
 8012c00:	270c      	movs	r7, #12
 8012c02:	469b      	mov	fp, r3
 8012c04:	e65e      	b.n	80128c4 <__aeabi_dmul+0x48>
 8012c06:	2201      	movs	r2, #1
 8012c08:	2001      	movs	r0, #1
 8012c0a:	4317      	orrs	r7, r2
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	e676      	b.n	80128fe <__aeabi_dmul+0x82>
 8012c10:	2303      	movs	r3, #3
 8012c12:	2003      	movs	r0, #3
 8012c14:	431f      	orrs	r7, r3
 8012c16:	4643      	mov	r3, r8
 8012c18:	e671      	b.n	80128fe <__aeabi_dmul+0x82>
 8012c1a:	46c0      	nop			; (mov r8, r8)
 8012c1c:	000007ff 	.word	0x000007ff
 8012c20:	fffffc01 	.word	0xfffffc01
 8012c24:	0801ca28 	.word	0x0801ca28
 8012c28:	800fffff 	.word	0x800fffff
 8012c2c:	fffffc0d 	.word	0xfffffc0d
 8012c30:	000003ff 	.word	0x000003ff
 8012c34:	feffffff 	.word	0xfeffffff
 8012c38:	000007fe 	.word	0x000007fe
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	2780      	movs	r7, #128	; 0x80
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	033f      	lsls	r7, r7, #12
 8012c44:	2600      	movs	r6, #0
 8012c46:	4b43      	ldr	r3, [pc, #268]	; (8012d54 <__aeabi_dmul+0x4d8>)
 8012c48:	e683      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012c4a:	9b01      	ldr	r3, [sp, #4]
 8012c4c:	0032      	movs	r2, r6
 8012c4e:	46a4      	mov	ip, r4
 8012c50:	4658      	mov	r0, fp
 8012c52:	e670      	b.n	8012936 <__aeabi_dmul+0xba>
 8012c54:	46ac      	mov	ip, r5
 8012c56:	e66e      	b.n	8012936 <__aeabi_dmul+0xba>
 8012c58:	2780      	movs	r7, #128	; 0x80
 8012c5a:	9901      	ldr	r1, [sp, #4]
 8012c5c:	033f      	lsls	r7, r7, #12
 8012c5e:	4239      	tst	r1, r7
 8012c60:	d02d      	beq.n	8012cbe <__aeabi_dmul+0x442>
 8012c62:	423b      	tst	r3, r7
 8012c64:	d12b      	bne.n	8012cbe <__aeabi_dmul+0x442>
 8012c66:	431f      	orrs	r7, r3
 8012c68:	033f      	lsls	r7, r7, #12
 8012c6a:	0b3f      	lsrs	r7, r7, #12
 8012c6c:	9500      	str	r5, [sp, #0]
 8012c6e:	0016      	movs	r6, r2
 8012c70:	4b38      	ldr	r3, [pc, #224]	; (8012d54 <__aeabi_dmul+0x4d8>)
 8012c72:	e66e      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012c74:	2501      	movs	r5, #1
 8012c76:	1b2d      	subs	r5, r5, r4
 8012c78:	2d38      	cmp	r5, #56	; 0x38
 8012c7a:	dd00      	ble.n	8012c7e <__aeabi_dmul+0x402>
 8012c7c:	e666      	b.n	801294c <__aeabi_dmul+0xd0>
 8012c7e:	2d1f      	cmp	r5, #31
 8012c80:	dc40      	bgt.n	8012d04 <__aeabi_dmul+0x488>
 8012c82:	4835      	ldr	r0, [pc, #212]	; (8012d58 <__aeabi_dmul+0x4dc>)
 8012c84:	001c      	movs	r4, r3
 8012c86:	4450      	add	r0, sl
 8012c88:	0016      	movs	r6, r2
 8012c8a:	4082      	lsls	r2, r0
 8012c8c:	4084      	lsls	r4, r0
 8012c8e:	40ee      	lsrs	r6, r5
 8012c90:	1e50      	subs	r0, r2, #1
 8012c92:	4182      	sbcs	r2, r0
 8012c94:	4334      	orrs	r4, r6
 8012c96:	4314      	orrs	r4, r2
 8012c98:	40eb      	lsrs	r3, r5
 8012c9a:	0762      	lsls	r2, r4, #29
 8012c9c:	d009      	beq.n	8012cb2 <__aeabi_dmul+0x436>
 8012c9e:	220f      	movs	r2, #15
 8012ca0:	4022      	ands	r2, r4
 8012ca2:	2a04      	cmp	r2, #4
 8012ca4:	d005      	beq.n	8012cb2 <__aeabi_dmul+0x436>
 8012ca6:	0022      	movs	r2, r4
 8012ca8:	1d14      	adds	r4, r2, #4
 8012caa:	4294      	cmp	r4, r2
 8012cac:	4180      	sbcs	r0, r0
 8012cae:	4240      	negs	r0, r0
 8012cb0:	181b      	adds	r3, r3, r0
 8012cb2:	021a      	lsls	r2, r3, #8
 8012cb4:	d53e      	bpl.n	8012d34 <__aeabi_dmul+0x4b8>
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	2700      	movs	r7, #0
 8012cba:	2600      	movs	r6, #0
 8012cbc:	e649      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012cbe:	2780      	movs	r7, #128	; 0x80
 8012cc0:	9b01      	ldr	r3, [sp, #4]
 8012cc2:	033f      	lsls	r7, r7, #12
 8012cc4:	431f      	orrs	r7, r3
 8012cc6:	033f      	lsls	r7, r7, #12
 8012cc8:	0b3f      	lsrs	r7, r7, #12
 8012cca:	9400      	str	r4, [sp, #0]
 8012ccc:	4b21      	ldr	r3, [pc, #132]	; (8012d54 <__aeabi_dmul+0x4d8>)
 8012cce:	e640      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012cd0:	0003      	movs	r3, r0
 8012cd2:	465a      	mov	r2, fp
 8012cd4:	3b28      	subs	r3, #40	; 0x28
 8012cd6:	409a      	lsls	r2, r3
 8012cd8:	2600      	movs	r6, #0
 8012cda:	9201      	str	r2, [sp, #4]
 8012cdc:	e66d      	b.n	80129ba <__aeabi_dmul+0x13e>
 8012cde:	4658      	mov	r0, fp
 8012ce0:	f7fe f9fc 	bl	80110dc <__clzsi2>
 8012ce4:	3020      	adds	r0, #32
 8012ce6:	e657      	b.n	8012998 <__aeabi_dmul+0x11c>
 8012ce8:	0003      	movs	r3, r0
 8012cea:	4652      	mov	r2, sl
 8012cec:	3b28      	subs	r3, #40	; 0x28
 8012cee:	409a      	lsls	r2, r3
 8012cf0:	0013      	movs	r3, r2
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	e693      	b.n	8012a1e <__aeabi_dmul+0x1a2>
 8012cf6:	4650      	mov	r0, sl
 8012cf8:	f7fe f9f0 	bl	80110dc <__clzsi2>
 8012cfc:	3020      	adds	r0, #32
 8012cfe:	e67b      	b.n	80129f8 <__aeabi_dmul+0x17c>
 8012d00:	46ca      	mov	sl, r9
 8012d02:	e750      	b.n	8012ba6 <__aeabi_dmul+0x32a>
 8012d04:	201f      	movs	r0, #31
 8012d06:	001e      	movs	r6, r3
 8012d08:	4240      	negs	r0, r0
 8012d0a:	1b04      	subs	r4, r0, r4
 8012d0c:	40e6      	lsrs	r6, r4
 8012d0e:	2d20      	cmp	r5, #32
 8012d10:	d003      	beq.n	8012d1a <__aeabi_dmul+0x49e>
 8012d12:	4c12      	ldr	r4, [pc, #72]	; (8012d5c <__aeabi_dmul+0x4e0>)
 8012d14:	4454      	add	r4, sl
 8012d16:	40a3      	lsls	r3, r4
 8012d18:	431a      	orrs	r2, r3
 8012d1a:	1e50      	subs	r0, r2, #1
 8012d1c:	4182      	sbcs	r2, r0
 8012d1e:	4332      	orrs	r2, r6
 8012d20:	2607      	movs	r6, #7
 8012d22:	2700      	movs	r7, #0
 8012d24:	4016      	ands	r6, r2
 8012d26:	d009      	beq.n	8012d3c <__aeabi_dmul+0x4c0>
 8012d28:	200f      	movs	r0, #15
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	4010      	ands	r0, r2
 8012d2e:	0014      	movs	r4, r2
 8012d30:	2804      	cmp	r0, #4
 8012d32:	d1b9      	bne.n	8012ca8 <__aeabi_dmul+0x42c>
 8012d34:	0022      	movs	r2, r4
 8012d36:	075e      	lsls	r6, r3, #29
 8012d38:	025b      	lsls	r3, r3, #9
 8012d3a:	0b1f      	lsrs	r7, r3, #12
 8012d3c:	08d2      	lsrs	r2, r2, #3
 8012d3e:	4316      	orrs	r6, r2
 8012d40:	2300      	movs	r3, #0
 8012d42:	e606      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012d44:	2780      	movs	r7, #128	; 0x80
 8012d46:	033f      	lsls	r7, r7, #12
 8012d48:	431f      	orrs	r7, r3
 8012d4a:	033f      	lsls	r7, r7, #12
 8012d4c:	0b3f      	lsrs	r7, r7, #12
 8012d4e:	0016      	movs	r6, r2
 8012d50:	4b00      	ldr	r3, [pc, #0]	; (8012d54 <__aeabi_dmul+0x4d8>)
 8012d52:	e5fe      	b.n	8012952 <__aeabi_dmul+0xd6>
 8012d54:	000007ff 	.word	0x000007ff
 8012d58:	0000041e 	.word	0x0000041e
 8012d5c:	0000043e 	.word	0x0000043e

08012d60 <__aeabi_dsub>:
 8012d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d62:	4657      	mov	r7, sl
 8012d64:	464e      	mov	r6, r9
 8012d66:	4645      	mov	r5, r8
 8012d68:	46de      	mov	lr, fp
 8012d6a:	000c      	movs	r4, r1
 8012d6c:	0309      	lsls	r1, r1, #12
 8012d6e:	b5e0      	push	{r5, r6, r7, lr}
 8012d70:	0a49      	lsrs	r1, r1, #9
 8012d72:	0f46      	lsrs	r6, r0, #29
 8012d74:	005f      	lsls	r7, r3, #1
 8012d76:	4331      	orrs	r1, r6
 8012d78:	031e      	lsls	r6, r3, #12
 8012d7a:	0fdb      	lsrs	r3, r3, #31
 8012d7c:	0a76      	lsrs	r6, r6, #9
 8012d7e:	469b      	mov	fp, r3
 8012d80:	0f53      	lsrs	r3, r2, #29
 8012d82:	4333      	orrs	r3, r6
 8012d84:	4ec8      	ldr	r6, [pc, #800]	; (80130a8 <__aeabi_dsub+0x348>)
 8012d86:	0065      	lsls	r5, r4, #1
 8012d88:	00c0      	lsls	r0, r0, #3
 8012d8a:	0fe4      	lsrs	r4, r4, #31
 8012d8c:	00d2      	lsls	r2, r2, #3
 8012d8e:	0d6d      	lsrs	r5, r5, #21
 8012d90:	46a2      	mov	sl, r4
 8012d92:	4681      	mov	r9, r0
 8012d94:	0d7f      	lsrs	r7, r7, #21
 8012d96:	469c      	mov	ip, r3
 8012d98:	4690      	mov	r8, r2
 8012d9a:	42b7      	cmp	r7, r6
 8012d9c:	d100      	bne.n	8012da0 <__aeabi_dsub+0x40>
 8012d9e:	e0b9      	b.n	8012f14 <__aeabi_dsub+0x1b4>
 8012da0:	465b      	mov	r3, fp
 8012da2:	2601      	movs	r6, #1
 8012da4:	4073      	eors	r3, r6
 8012da6:	469b      	mov	fp, r3
 8012da8:	1bee      	subs	r6, r5, r7
 8012daa:	45a3      	cmp	fp, r4
 8012dac:	d100      	bne.n	8012db0 <__aeabi_dsub+0x50>
 8012dae:	e083      	b.n	8012eb8 <__aeabi_dsub+0x158>
 8012db0:	2e00      	cmp	r6, #0
 8012db2:	dd63      	ble.n	8012e7c <__aeabi_dsub+0x11c>
 8012db4:	2f00      	cmp	r7, #0
 8012db6:	d000      	beq.n	8012dba <__aeabi_dsub+0x5a>
 8012db8:	e0b1      	b.n	8012f1e <__aeabi_dsub+0x1be>
 8012dba:	4663      	mov	r3, ip
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	d100      	bne.n	8012dc2 <__aeabi_dsub+0x62>
 8012dc0:	e123      	b.n	801300a <__aeabi_dsub+0x2aa>
 8012dc2:	1e73      	subs	r3, r6, #1
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d000      	beq.n	8012dca <__aeabi_dsub+0x6a>
 8012dc8:	e1ba      	b.n	8013140 <__aeabi_dsub+0x3e0>
 8012dca:	1a86      	subs	r6, r0, r2
 8012dcc:	4663      	mov	r3, ip
 8012dce:	42b0      	cmp	r0, r6
 8012dd0:	4180      	sbcs	r0, r0
 8012dd2:	2501      	movs	r5, #1
 8012dd4:	1ac9      	subs	r1, r1, r3
 8012dd6:	4240      	negs	r0, r0
 8012dd8:	1a09      	subs	r1, r1, r0
 8012dda:	020b      	lsls	r3, r1, #8
 8012ddc:	d400      	bmi.n	8012de0 <__aeabi_dsub+0x80>
 8012dde:	e147      	b.n	8013070 <__aeabi_dsub+0x310>
 8012de0:	0249      	lsls	r1, r1, #9
 8012de2:	0a4b      	lsrs	r3, r1, #9
 8012de4:	4698      	mov	r8, r3
 8012de6:	4643      	mov	r3, r8
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d100      	bne.n	8012dee <__aeabi_dsub+0x8e>
 8012dec:	e189      	b.n	8013102 <__aeabi_dsub+0x3a2>
 8012dee:	4640      	mov	r0, r8
 8012df0:	f7fe f974 	bl	80110dc <__clzsi2>
 8012df4:	0003      	movs	r3, r0
 8012df6:	3b08      	subs	r3, #8
 8012df8:	2b1f      	cmp	r3, #31
 8012dfa:	dd00      	ble.n	8012dfe <__aeabi_dsub+0x9e>
 8012dfc:	e17c      	b.n	80130f8 <__aeabi_dsub+0x398>
 8012dfe:	2220      	movs	r2, #32
 8012e00:	0030      	movs	r0, r6
 8012e02:	1ad2      	subs	r2, r2, r3
 8012e04:	4641      	mov	r1, r8
 8012e06:	40d0      	lsrs	r0, r2
 8012e08:	4099      	lsls	r1, r3
 8012e0a:	0002      	movs	r2, r0
 8012e0c:	409e      	lsls	r6, r3
 8012e0e:	430a      	orrs	r2, r1
 8012e10:	429d      	cmp	r5, r3
 8012e12:	dd00      	ble.n	8012e16 <__aeabi_dsub+0xb6>
 8012e14:	e16a      	b.n	80130ec <__aeabi_dsub+0x38c>
 8012e16:	1b5d      	subs	r5, r3, r5
 8012e18:	1c6b      	adds	r3, r5, #1
 8012e1a:	2b1f      	cmp	r3, #31
 8012e1c:	dd00      	ble.n	8012e20 <__aeabi_dsub+0xc0>
 8012e1e:	e194      	b.n	801314a <__aeabi_dsub+0x3ea>
 8012e20:	2120      	movs	r1, #32
 8012e22:	0010      	movs	r0, r2
 8012e24:	0035      	movs	r5, r6
 8012e26:	1ac9      	subs	r1, r1, r3
 8012e28:	408e      	lsls	r6, r1
 8012e2a:	40da      	lsrs	r2, r3
 8012e2c:	4088      	lsls	r0, r1
 8012e2e:	40dd      	lsrs	r5, r3
 8012e30:	1e71      	subs	r1, r6, #1
 8012e32:	418e      	sbcs	r6, r1
 8012e34:	0011      	movs	r1, r2
 8012e36:	2207      	movs	r2, #7
 8012e38:	4328      	orrs	r0, r5
 8012e3a:	2500      	movs	r5, #0
 8012e3c:	4306      	orrs	r6, r0
 8012e3e:	4032      	ands	r2, r6
 8012e40:	2a00      	cmp	r2, #0
 8012e42:	d009      	beq.n	8012e58 <__aeabi_dsub+0xf8>
 8012e44:	230f      	movs	r3, #15
 8012e46:	4033      	ands	r3, r6
 8012e48:	2b04      	cmp	r3, #4
 8012e4a:	d005      	beq.n	8012e58 <__aeabi_dsub+0xf8>
 8012e4c:	1d33      	adds	r3, r6, #4
 8012e4e:	42b3      	cmp	r3, r6
 8012e50:	41b6      	sbcs	r6, r6
 8012e52:	4276      	negs	r6, r6
 8012e54:	1989      	adds	r1, r1, r6
 8012e56:	001e      	movs	r6, r3
 8012e58:	020b      	lsls	r3, r1, #8
 8012e5a:	d400      	bmi.n	8012e5e <__aeabi_dsub+0xfe>
 8012e5c:	e23d      	b.n	80132da <__aeabi_dsub+0x57a>
 8012e5e:	1c6a      	adds	r2, r5, #1
 8012e60:	4b91      	ldr	r3, [pc, #580]	; (80130a8 <__aeabi_dsub+0x348>)
 8012e62:	0555      	lsls	r5, r2, #21
 8012e64:	0d6d      	lsrs	r5, r5, #21
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d100      	bne.n	8012e6c <__aeabi_dsub+0x10c>
 8012e6a:	e119      	b.n	80130a0 <__aeabi_dsub+0x340>
 8012e6c:	4a8f      	ldr	r2, [pc, #572]	; (80130ac <__aeabi_dsub+0x34c>)
 8012e6e:	08f6      	lsrs	r6, r6, #3
 8012e70:	400a      	ands	r2, r1
 8012e72:	0757      	lsls	r7, r2, #29
 8012e74:	0252      	lsls	r2, r2, #9
 8012e76:	4337      	orrs	r7, r6
 8012e78:	0b12      	lsrs	r2, r2, #12
 8012e7a:	e09b      	b.n	8012fb4 <__aeabi_dsub+0x254>
 8012e7c:	2e00      	cmp	r6, #0
 8012e7e:	d000      	beq.n	8012e82 <__aeabi_dsub+0x122>
 8012e80:	e0c5      	b.n	801300e <__aeabi_dsub+0x2ae>
 8012e82:	1c6e      	adds	r6, r5, #1
 8012e84:	0576      	lsls	r6, r6, #21
 8012e86:	0d76      	lsrs	r6, r6, #21
 8012e88:	2e01      	cmp	r6, #1
 8012e8a:	dc00      	bgt.n	8012e8e <__aeabi_dsub+0x12e>
 8012e8c:	e148      	b.n	8013120 <__aeabi_dsub+0x3c0>
 8012e8e:	4667      	mov	r7, ip
 8012e90:	1a86      	subs	r6, r0, r2
 8012e92:	1bcb      	subs	r3, r1, r7
 8012e94:	42b0      	cmp	r0, r6
 8012e96:	41bf      	sbcs	r7, r7
 8012e98:	427f      	negs	r7, r7
 8012e9a:	46b8      	mov	r8, r7
 8012e9c:	001f      	movs	r7, r3
 8012e9e:	4643      	mov	r3, r8
 8012ea0:	1aff      	subs	r7, r7, r3
 8012ea2:	003b      	movs	r3, r7
 8012ea4:	46b8      	mov	r8, r7
 8012ea6:	021b      	lsls	r3, r3, #8
 8012ea8:	d500      	bpl.n	8012eac <__aeabi_dsub+0x14c>
 8012eaa:	e15f      	b.n	801316c <__aeabi_dsub+0x40c>
 8012eac:	4337      	orrs	r7, r6
 8012eae:	d19a      	bne.n	8012de6 <__aeabi_dsub+0x86>
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	2400      	movs	r4, #0
 8012eb4:	2500      	movs	r5, #0
 8012eb6:	e079      	b.n	8012fac <__aeabi_dsub+0x24c>
 8012eb8:	2e00      	cmp	r6, #0
 8012eba:	dc00      	bgt.n	8012ebe <__aeabi_dsub+0x15e>
 8012ebc:	e0fa      	b.n	80130b4 <__aeabi_dsub+0x354>
 8012ebe:	2f00      	cmp	r7, #0
 8012ec0:	d100      	bne.n	8012ec4 <__aeabi_dsub+0x164>
 8012ec2:	e08d      	b.n	8012fe0 <__aeabi_dsub+0x280>
 8012ec4:	4b78      	ldr	r3, [pc, #480]	; (80130a8 <__aeabi_dsub+0x348>)
 8012ec6:	429d      	cmp	r5, r3
 8012ec8:	d067      	beq.n	8012f9a <__aeabi_dsub+0x23a>
 8012eca:	2380      	movs	r3, #128	; 0x80
 8012ecc:	4667      	mov	r7, ip
 8012ece:	041b      	lsls	r3, r3, #16
 8012ed0:	431f      	orrs	r7, r3
 8012ed2:	46bc      	mov	ip, r7
 8012ed4:	2e38      	cmp	r6, #56	; 0x38
 8012ed6:	dc00      	bgt.n	8012eda <__aeabi_dsub+0x17a>
 8012ed8:	e152      	b.n	8013180 <__aeabi_dsub+0x420>
 8012eda:	4663      	mov	r3, ip
 8012edc:	4313      	orrs	r3, r2
 8012ede:	1e5a      	subs	r2, r3, #1
 8012ee0:	4193      	sbcs	r3, r2
 8012ee2:	181e      	adds	r6, r3, r0
 8012ee4:	4286      	cmp	r6, r0
 8012ee6:	4180      	sbcs	r0, r0
 8012ee8:	4240      	negs	r0, r0
 8012eea:	1809      	adds	r1, r1, r0
 8012eec:	020b      	lsls	r3, r1, #8
 8012eee:	d400      	bmi.n	8012ef2 <__aeabi_dsub+0x192>
 8012ef0:	e0be      	b.n	8013070 <__aeabi_dsub+0x310>
 8012ef2:	4b6d      	ldr	r3, [pc, #436]	; (80130a8 <__aeabi_dsub+0x348>)
 8012ef4:	3501      	adds	r5, #1
 8012ef6:	429d      	cmp	r5, r3
 8012ef8:	d100      	bne.n	8012efc <__aeabi_dsub+0x19c>
 8012efa:	e0d2      	b.n	80130a2 <__aeabi_dsub+0x342>
 8012efc:	4a6b      	ldr	r2, [pc, #428]	; (80130ac <__aeabi_dsub+0x34c>)
 8012efe:	0873      	lsrs	r3, r6, #1
 8012f00:	400a      	ands	r2, r1
 8012f02:	2101      	movs	r1, #1
 8012f04:	400e      	ands	r6, r1
 8012f06:	431e      	orrs	r6, r3
 8012f08:	0851      	lsrs	r1, r2, #1
 8012f0a:	07d3      	lsls	r3, r2, #31
 8012f0c:	2207      	movs	r2, #7
 8012f0e:	431e      	orrs	r6, r3
 8012f10:	4032      	ands	r2, r6
 8012f12:	e795      	b.n	8012e40 <__aeabi_dsub+0xe0>
 8012f14:	001e      	movs	r6, r3
 8012f16:	4316      	orrs	r6, r2
 8012f18:	d000      	beq.n	8012f1c <__aeabi_dsub+0x1bc>
 8012f1a:	e745      	b.n	8012da8 <__aeabi_dsub+0x48>
 8012f1c:	e740      	b.n	8012da0 <__aeabi_dsub+0x40>
 8012f1e:	4b62      	ldr	r3, [pc, #392]	; (80130a8 <__aeabi_dsub+0x348>)
 8012f20:	429d      	cmp	r5, r3
 8012f22:	d03a      	beq.n	8012f9a <__aeabi_dsub+0x23a>
 8012f24:	2380      	movs	r3, #128	; 0x80
 8012f26:	4667      	mov	r7, ip
 8012f28:	041b      	lsls	r3, r3, #16
 8012f2a:	431f      	orrs	r7, r3
 8012f2c:	46bc      	mov	ip, r7
 8012f2e:	2e38      	cmp	r6, #56	; 0x38
 8012f30:	dd00      	ble.n	8012f34 <__aeabi_dsub+0x1d4>
 8012f32:	e0eb      	b.n	801310c <__aeabi_dsub+0x3ac>
 8012f34:	2e1f      	cmp	r6, #31
 8012f36:	dc00      	bgt.n	8012f3a <__aeabi_dsub+0x1da>
 8012f38:	e13a      	b.n	80131b0 <__aeabi_dsub+0x450>
 8012f3a:	0033      	movs	r3, r6
 8012f3c:	4667      	mov	r7, ip
 8012f3e:	3b20      	subs	r3, #32
 8012f40:	40df      	lsrs	r7, r3
 8012f42:	003b      	movs	r3, r7
 8012f44:	2e20      	cmp	r6, #32
 8012f46:	d005      	beq.n	8012f54 <__aeabi_dsub+0x1f4>
 8012f48:	2740      	movs	r7, #64	; 0x40
 8012f4a:	1bbf      	subs	r7, r7, r6
 8012f4c:	4666      	mov	r6, ip
 8012f4e:	40be      	lsls	r6, r7
 8012f50:	4332      	orrs	r2, r6
 8012f52:	4690      	mov	r8, r2
 8012f54:	4646      	mov	r6, r8
 8012f56:	1e72      	subs	r2, r6, #1
 8012f58:	4196      	sbcs	r6, r2
 8012f5a:	4333      	orrs	r3, r6
 8012f5c:	e0da      	b.n	8013114 <__aeabi_dsub+0x3b4>
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d100      	bne.n	8012f64 <__aeabi_dsub+0x204>
 8012f62:	e214      	b.n	801338e <__aeabi_dsub+0x62e>
 8012f64:	4663      	mov	r3, ip
 8012f66:	4313      	orrs	r3, r2
 8012f68:	d100      	bne.n	8012f6c <__aeabi_dsub+0x20c>
 8012f6a:	e168      	b.n	801323e <__aeabi_dsub+0x4de>
 8012f6c:	2380      	movs	r3, #128	; 0x80
 8012f6e:	074e      	lsls	r6, r1, #29
 8012f70:	08c0      	lsrs	r0, r0, #3
 8012f72:	08c9      	lsrs	r1, r1, #3
 8012f74:	031b      	lsls	r3, r3, #12
 8012f76:	4306      	orrs	r6, r0
 8012f78:	4219      	tst	r1, r3
 8012f7a:	d008      	beq.n	8012f8e <__aeabi_dsub+0x22e>
 8012f7c:	4660      	mov	r0, ip
 8012f7e:	08c0      	lsrs	r0, r0, #3
 8012f80:	4218      	tst	r0, r3
 8012f82:	d104      	bne.n	8012f8e <__aeabi_dsub+0x22e>
 8012f84:	4663      	mov	r3, ip
 8012f86:	0001      	movs	r1, r0
 8012f88:	08d2      	lsrs	r2, r2, #3
 8012f8a:	075e      	lsls	r6, r3, #29
 8012f8c:	4316      	orrs	r6, r2
 8012f8e:	00f3      	lsls	r3, r6, #3
 8012f90:	4699      	mov	r9, r3
 8012f92:	00c9      	lsls	r1, r1, #3
 8012f94:	0f72      	lsrs	r2, r6, #29
 8012f96:	4d44      	ldr	r5, [pc, #272]	; (80130a8 <__aeabi_dsub+0x348>)
 8012f98:	4311      	orrs	r1, r2
 8012f9a:	464b      	mov	r3, r9
 8012f9c:	08de      	lsrs	r6, r3, #3
 8012f9e:	4b42      	ldr	r3, [pc, #264]	; (80130a8 <__aeabi_dsub+0x348>)
 8012fa0:	074f      	lsls	r7, r1, #29
 8012fa2:	4337      	orrs	r7, r6
 8012fa4:	08ca      	lsrs	r2, r1, #3
 8012fa6:	429d      	cmp	r5, r3
 8012fa8:	d100      	bne.n	8012fac <__aeabi_dsub+0x24c>
 8012faa:	e06e      	b.n	801308a <__aeabi_dsub+0x32a>
 8012fac:	0312      	lsls	r2, r2, #12
 8012fae:	056d      	lsls	r5, r5, #21
 8012fb0:	0b12      	lsrs	r2, r2, #12
 8012fb2:	0d6d      	lsrs	r5, r5, #21
 8012fb4:	2100      	movs	r1, #0
 8012fb6:	0312      	lsls	r2, r2, #12
 8012fb8:	0b13      	lsrs	r3, r2, #12
 8012fba:	0d0a      	lsrs	r2, r1, #20
 8012fbc:	0512      	lsls	r2, r2, #20
 8012fbe:	431a      	orrs	r2, r3
 8012fc0:	4b3b      	ldr	r3, [pc, #236]	; (80130b0 <__aeabi_dsub+0x350>)
 8012fc2:	052d      	lsls	r5, r5, #20
 8012fc4:	4013      	ands	r3, r2
 8012fc6:	432b      	orrs	r3, r5
 8012fc8:	005b      	lsls	r3, r3, #1
 8012fca:	07e4      	lsls	r4, r4, #31
 8012fcc:	085b      	lsrs	r3, r3, #1
 8012fce:	4323      	orrs	r3, r4
 8012fd0:	0038      	movs	r0, r7
 8012fd2:	0019      	movs	r1, r3
 8012fd4:	bc3c      	pop	{r2, r3, r4, r5}
 8012fd6:	4690      	mov	r8, r2
 8012fd8:	4699      	mov	r9, r3
 8012fda:	46a2      	mov	sl, r4
 8012fdc:	46ab      	mov	fp, r5
 8012fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe0:	4663      	mov	r3, ip
 8012fe2:	4313      	orrs	r3, r2
 8012fe4:	d011      	beq.n	801300a <__aeabi_dsub+0x2aa>
 8012fe6:	1e73      	subs	r3, r6, #1
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d000      	beq.n	8012fee <__aeabi_dsub+0x28e>
 8012fec:	e107      	b.n	80131fe <__aeabi_dsub+0x49e>
 8012fee:	1886      	adds	r6, r0, r2
 8012ff0:	4286      	cmp	r6, r0
 8012ff2:	4180      	sbcs	r0, r0
 8012ff4:	4461      	add	r1, ip
 8012ff6:	4240      	negs	r0, r0
 8012ff8:	1809      	adds	r1, r1, r0
 8012ffa:	2501      	movs	r5, #1
 8012ffc:	020b      	lsls	r3, r1, #8
 8012ffe:	d537      	bpl.n	8013070 <__aeabi_dsub+0x310>
 8013000:	2502      	movs	r5, #2
 8013002:	e77b      	b.n	8012efc <__aeabi_dsub+0x19c>
 8013004:	003e      	movs	r6, r7
 8013006:	4661      	mov	r1, ip
 8013008:	4691      	mov	r9, r2
 801300a:	0035      	movs	r5, r6
 801300c:	e7c5      	b.n	8012f9a <__aeabi_dsub+0x23a>
 801300e:	465c      	mov	r4, fp
 8013010:	2d00      	cmp	r5, #0
 8013012:	d000      	beq.n	8013016 <__aeabi_dsub+0x2b6>
 8013014:	e0e1      	b.n	80131da <__aeabi_dsub+0x47a>
 8013016:	000b      	movs	r3, r1
 8013018:	4303      	orrs	r3, r0
 801301a:	d0f3      	beq.n	8013004 <__aeabi_dsub+0x2a4>
 801301c:	1c73      	adds	r3, r6, #1
 801301e:	d100      	bne.n	8013022 <__aeabi_dsub+0x2c2>
 8013020:	e1ac      	b.n	801337c <__aeabi_dsub+0x61c>
 8013022:	4b21      	ldr	r3, [pc, #132]	; (80130a8 <__aeabi_dsub+0x348>)
 8013024:	429f      	cmp	r7, r3
 8013026:	d100      	bne.n	801302a <__aeabi_dsub+0x2ca>
 8013028:	e13a      	b.n	80132a0 <__aeabi_dsub+0x540>
 801302a:	43f3      	mvns	r3, r6
 801302c:	2b38      	cmp	r3, #56	; 0x38
 801302e:	dd00      	ble.n	8013032 <__aeabi_dsub+0x2d2>
 8013030:	e16f      	b.n	8013312 <__aeabi_dsub+0x5b2>
 8013032:	2b1f      	cmp	r3, #31
 8013034:	dd00      	ble.n	8013038 <__aeabi_dsub+0x2d8>
 8013036:	e18c      	b.n	8013352 <__aeabi_dsub+0x5f2>
 8013038:	2520      	movs	r5, #32
 801303a:	000e      	movs	r6, r1
 801303c:	1aed      	subs	r5, r5, r3
 801303e:	40ae      	lsls	r6, r5
 8013040:	46b0      	mov	r8, r6
 8013042:	0006      	movs	r6, r0
 8013044:	46aa      	mov	sl, r5
 8013046:	40de      	lsrs	r6, r3
 8013048:	4645      	mov	r5, r8
 801304a:	4335      	orrs	r5, r6
 801304c:	002e      	movs	r6, r5
 801304e:	4655      	mov	r5, sl
 8013050:	40d9      	lsrs	r1, r3
 8013052:	40a8      	lsls	r0, r5
 8013054:	4663      	mov	r3, ip
 8013056:	1e45      	subs	r5, r0, #1
 8013058:	41a8      	sbcs	r0, r5
 801305a:	1a5b      	subs	r3, r3, r1
 801305c:	469c      	mov	ip, r3
 801305e:	4330      	orrs	r0, r6
 8013060:	1a16      	subs	r6, r2, r0
 8013062:	42b2      	cmp	r2, r6
 8013064:	4192      	sbcs	r2, r2
 8013066:	4663      	mov	r3, ip
 8013068:	4252      	negs	r2, r2
 801306a:	1a99      	subs	r1, r3, r2
 801306c:	003d      	movs	r5, r7
 801306e:	e6b4      	b.n	8012dda <__aeabi_dsub+0x7a>
 8013070:	2207      	movs	r2, #7
 8013072:	4032      	ands	r2, r6
 8013074:	2a00      	cmp	r2, #0
 8013076:	d000      	beq.n	801307a <__aeabi_dsub+0x31a>
 8013078:	e6e4      	b.n	8012e44 <__aeabi_dsub+0xe4>
 801307a:	4b0b      	ldr	r3, [pc, #44]	; (80130a8 <__aeabi_dsub+0x348>)
 801307c:	08f6      	lsrs	r6, r6, #3
 801307e:	074f      	lsls	r7, r1, #29
 8013080:	4337      	orrs	r7, r6
 8013082:	08ca      	lsrs	r2, r1, #3
 8013084:	429d      	cmp	r5, r3
 8013086:	d000      	beq.n	801308a <__aeabi_dsub+0x32a>
 8013088:	e790      	b.n	8012fac <__aeabi_dsub+0x24c>
 801308a:	003b      	movs	r3, r7
 801308c:	4313      	orrs	r3, r2
 801308e:	d100      	bne.n	8013092 <__aeabi_dsub+0x332>
 8013090:	e1a6      	b.n	80133e0 <__aeabi_dsub+0x680>
 8013092:	2380      	movs	r3, #128	; 0x80
 8013094:	031b      	lsls	r3, r3, #12
 8013096:	431a      	orrs	r2, r3
 8013098:	0312      	lsls	r2, r2, #12
 801309a:	0b12      	lsrs	r2, r2, #12
 801309c:	4d02      	ldr	r5, [pc, #8]	; (80130a8 <__aeabi_dsub+0x348>)
 801309e:	e789      	b.n	8012fb4 <__aeabi_dsub+0x254>
 80130a0:	0015      	movs	r5, r2
 80130a2:	2200      	movs	r2, #0
 80130a4:	2700      	movs	r7, #0
 80130a6:	e785      	b.n	8012fb4 <__aeabi_dsub+0x254>
 80130a8:	000007ff 	.word	0x000007ff
 80130ac:	ff7fffff 	.word	0xff7fffff
 80130b0:	800fffff 	.word	0x800fffff
 80130b4:	2e00      	cmp	r6, #0
 80130b6:	d000      	beq.n	80130ba <__aeabi_dsub+0x35a>
 80130b8:	e0c7      	b.n	801324a <__aeabi_dsub+0x4ea>
 80130ba:	1c6b      	adds	r3, r5, #1
 80130bc:	055e      	lsls	r6, r3, #21
 80130be:	0d76      	lsrs	r6, r6, #21
 80130c0:	2e01      	cmp	r6, #1
 80130c2:	dc00      	bgt.n	80130c6 <__aeabi_dsub+0x366>
 80130c4:	e0f0      	b.n	80132a8 <__aeabi_dsub+0x548>
 80130c6:	4dc8      	ldr	r5, [pc, #800]	; (80133e8 <__aeabi_dsub+0x688>)
 80130c8:	42ab      	cmp	r3, r5
 80130ca:	d100      	bne.n	80130ce <__aeabi_dsub+0x36e>
 80130cc:	e0b9      	b.n	8013242 <__aeabi_dsub+0x4e2>
 80130ce:	1885      	adds	r5, r0, r2
 80130d0:	000a      	movs	r2, r1
 80130d2:	4285      	cmp	r5, r0
 80130d4:	4189      	sbcs	r1, r1
 80130d6:	4462      	add	r2, ip
 80130d8:	4249      	negs	r1, r1
 80130da:	1851      	adds	r1, r2, r1
 80130dc:	2207      	movs	r2, #7
 80130de:	07ce      	lsls	r6, r1, #31
 80130e0:	086d      	lsrs	r5, r5, #1
 80130e2:	432e      	orrs	r6, r5
 80130e4:	0849      	lsrs	r1, r1, #1
 80130e6:	4032      	ands	r2, r6
 80130e8:	001d      	movs	r5, r3
 80130ea:	e6a9      	b.n	8012e40 <__aeabi_dsub+0xe0>
 80130ec:	49bf      	ldr	r1, [pc, #764]	; (80133ec <__aeabi_dsub+0x68c>)
 80130ee:	1aed      	subs	r5, r5, r3
 80130f0:	4011      	ands	r1, r2
 80130f2:	2207      	movs	r2, #7
 80130f4:	4032      	ands	r2, r6
 80130f6:	e6a3      	b.n	8012e40 <__aeabi_dsub+0xe0>
 80130f8:	0032      	movs	r2, r6
 80130fa:	3828      	subs	r0, #40	; 0x28
 80130fc:	4082      	lsls	r2, r0
 80130fe:	2600      	movs	r6, #0
 8013100:	e686      	b.n	8012e10 <__aeabi_dsub+0xb0>
 8013102:	0030      	movs	r0, r6
 8013104:	f7fd ffea 	bl	80110dc <__clzsi2>
 8013108:	3020      	adds	r0, #32
 801310a:	e673      	b.n	8012df4 <__aeabi_dsub+0x94>
 801310c:	4663      	mov	r3, ip
 801310e:	4313      	orrs	r3, r2
 8013110:	1e5a      	subs	r2, r3, #1
 8013112:	4193      	sbcs	r3, r2
 8013114:	1ac6      	subs	r6, r0, r3
 8013116:	42b0      	cmp	r0, r6
 8013118:	4180      	sbcs	r0, r0
 801311a:	4240      	negs	r0, r0
 801311c:	1a09      	subs	r1, r1, r0
 801311e:	e65c      	b.n	8012dda <__aeabi_dsub+0x7a>
 8013120:	000e      	movs	r6, r1
 8013122:	4667      	mov	r7, ip
 8013124:	4306      	orrs	r6, r0
 8013126:	4317      	orrs	r7, r2
 8013128:	2d00      	cmp	r5, #0
 801312a:	d15e      	bne.n	80131ea <__aeabi_dsub+0x48a>
 801312c:	2e00      	cmp	r6, #0
 801312e:	d000      	beq.n	8013132 <__aeabi_dsub+0x3d2>
 8013130:	e0f3      	b.n	801331a <__aeabi_dsub+0x5ba>
 8013132:	2f00      	cmp	r7, #0
 8013134:	d100      	bne.n	8013138 <__aeabi_dsub+0x3d8>
 8013136:	e11e      	b.n	8013376 <__aeabi_dsub+0x616>
 8013138:	465c      	mov	r4, fp
 801313a:	4661      	mov	r1, ip
 801313c:	4691      	mov	r9, r2
 801313e:	e72c      	b.n	8012f9a <__aeabi_dsub+0x23a>
 8013140:	4fa9      	ldr	r7, [pc, #676]	; (80133e8 <__aeabi_dsub+0x688>)
 8013142:	42be      	cmp	r6, r7
 8013144:	d07b      	beq.n	801323e <__aeabi_dsub+0x4de>
 8013146:	001e      	movs	r6, r3
 8013148:	e6f1      	b.n	8012f2e <__aeabi_dsub+0x1ce>
 801314a:	0010      	movs	r0, r2
 801314c:	3d1f      	subs	r5, #31
 801314e:	40e8      	lsrs	r0, r5
 8013150:	2b20      	cmp	r3, #32
 8013152:	d003      	beq.n	801315c <__aeabi_dsub+0x3fc>
 8013154:	2140      	movs	r1, #64	; 0x40
 8013156:	1acb      	subs	r3, r1, r3
 8013158:	409a      	lsls	r2, r3
 801315a:	4316      	orrs	r6, r2
 801315c:	1e73      	subs	r3, r6, #1
 801315e:	419e      	sbcs	r6, r3
 8013160:	2207      	movs	r2, #7
 8013162:	4306      	orrs	r6, r0
 8013164:	4032      	ands	r2, r6
 8013166:	2100      	movs	r1, #0
 8013168:	2500      	movs	r5, #0
 801316a:	e783      	b.n	8013074 <__aeabi_dsub+0x314>
 801316c:	1a16      	subs	r6, r2, r0
 801316e:	4663      	mov	r3, ip
 8013170:	42b2      	cmp	r2, r6
 8013172:	4180      	sbcs	r0, r0
 8013174:	1a59      	subs	r1, r3, r1
 8013176:	4240      	negs	r0, r0
 8013178:	1a0b      	subs	r3, r1, r0
 801317a:	4698      	mov	r8, r3
 801317c:	465c      	mov	r4, fp
 801317e:	e632      	b.n	8012de6 <__aeabi_dsub+0x86>
 8013180:	2e1f      	cmp	r6, #31
 8013182:	dd00      	ble.n	8013186 <__aeabi_dsub+0x426>
 8013184:	e0ab      	b.n	80132de <__aeabi_dsub+0x57e>
 8013186:	2720      	movs	r7, #32
 8013188:	1bbb      	subs	r3, r7, r6
 801318a:	469a      	mov	sl, r3
 801318c:	4663      	mov	r3, ip
 801318e:	4657      	mov	r7, sl
 8013190:	40bb      	lsls	r3, r7
 8013192:	4699      	mov	r9, r3
 8013194:	0013      	movs	r3, r2
 8013196:	464f      	mov	r7, r9
 8013198:	40f3      	lsrs	r3, r6
 801319a:	431f      	orrs	r7, r3
 801319c:	003b      	movs	r3, r7
 801319e:	4657      	mov	r7, sl
 80131a0:	40ba      	lsls	r2, r7
 80131a2:	1e57      	subs	r7, r2, #1
 80131a4:	41ba      	sbcs	r2, r7
 80131a6:	4313      	orrs	r3, r2
 80131a8:	4662      	mov	r2, ip
 80131aa:	40f2      	lsrs	r2, r6
 80131ac:	1889      	adds	r1, r1, r2
 80131ae:	e698      	b.n	8012ee2 <__aeabi_dsub+0x182>
 80131b0:	2720      	movs	r7, #32
 80131b2:	1bbb      	subs	r3, r7, r6
 80131b4:	469a      	mov	sl, r3
 80131b6:	4663      	mov	r3, ip
 80131b8:	4657      	mov	r7, sl
 80131ba:	40bb      	lsls	r3, r7
 80131bc:	4699      	mov	r9, r3
 80131be:	0013      	movs	r3, r2
 80131c0:	464f      	mov	r7, r9
 80131c2:	40f3      	lsrs	r3, r6
 80131c4:	431f      	orrs	r7, r3
 80131c6:	003b      	movs	r3, r7
 80131c8:	4657      	mov	r7, sl
 80131ca:	40ba      	lsls	r2, r7
 80131cc:	1e57      	subs	r7, r2, #1
 80131ce:	41ba      	sbcs	r2, r7
 80131d0:	4313      	orrs	r3, r2
 80131d2:	4662      	mov	r2, ip
 80131d4:	40f2      	lsrs	r2, r6
 80131d6:	1a89      	subs	r1, r1, r2
 80131d8:	e79c      	b.n	8013114 <__aeabi_dsub+0x3b4>
 80131da:	4b83      	ldr	r3, [pc, #524]	; (80133e8 <__aeabi_dsub+0x688>)
 80131dc:	429f      	cmp	r7, r3
 80131de:	d05f      	beq.n	80132a0 <__aeabi_dsub+0x540>
 80131e0:	2580      	movs	r5, #128	; 0x80
 80131e2:	042d      	lsls	r5, r5, #16
 80131e4:	4273      	negs	r3, r6
 80131e6:	4329      	orrs	r1, r5
 80131e8:	e720      	b.n	801302c <__aeabi_dsub+0x2cc>
 80131ea:	2e00      	cmp	r6, #0
 80131ec:	d10c      	bne.n	8013208 <__aeabi_dsub+0x4a8>
 80131ee:	2f00      	cmp	r7, #0
 80131f0:	d100      	bne.n	80131f4 <__aeabi_dsub+0x494>
 80131f2:	e0d0      	b.n	8013396 <__aeabi_dsub+0x636>
 80131f4:	465c      	mov	r4, fp
 80131f6:	4661      	mov	r1, ip
 80131f8:	4691      	mov	r9, r2
 80131fa:	4d7b      	ldr	r5, [pc, #492]	; (80133e8 <__aeabi_dsub+0x688>)
 80131fc:	e6cd      	b.n	8012f9a <__aeabi_dsub+0x23a>
 80131fe:	4f7a      	ldr	r7, [pc, #488]	; (80133e8 <__aeabi_dsub+0x688>)
 8013200:	42be      	cmp	r6, r7
 8013202:	d01c      	beq.n	801323e <__aeabi_dsub+0x4de>
 8013204:	001e      	movs	r6, r3
 8013206:	e665      	b.n	8012ed4 <__aeabi_dsub+0x174>
 8013208:	2f00      	cmp	r7, #0
 801320a:	d018      	beq.n	801323e <__aeabi_dsub+0x4de>
 801320c:	08c0      	lsrs	r0, r0, #3
 801320e:	074e      	lsls	r6, r1, #29
 8013210:	4306      	orrs	r6, r0
 8013212:	2080      	movs	r0, #128	; 0x80
 8013214:	08c9      	lsrs	r1, r1, #3
 8013216:	0300      	lsls	r0, r0, #12
 8013218:	4201      	tst	r1, r0
 801321a:	d008      	beq.n	801322e <__aeabi_dsub+0x4ce>
 801321c:	4663      	mov	r3, ip
 801321e:	08dc      	lsrs	r4, r3, #3
 8013220:	4204      	tst	r4, r0
 8013222:	d104      	bne.n	801322e <__aeabi_dsub+0x4ce>
 8013224:	0021      	movs	r1, r4
 8013226:	46da      	mov	sl, fp
 8013228:	08d2      	lsrs	r2, r2, #3
 801322a:	075e      	lsls	r6, r3, #29
 801322c:	4316      	orrs	r6, r2
 801322e:	00f3      	lsls	r3, r6, #3
 8013230:	4699      	mov	r9, r3
 8013232:	2401      	movs	r4, #1
 8013234:	4653      	mov	r3, sl
 8013236:	00c9      	lsls	r1, r1, #3
 8013238:	0f72      	lsrs	r2, r6, #29
 801323a:	4311      	orrs	r1, r2
 801323c:	401c      	ands	r4, r3
 801323e:	4d6a      	ldr	r5, [pc, #424]	; (80133e8 <__aeabi_dsub+0x688>)
 8013240:	e6ab      	b.n	8012f9a <__aeabi_dsub+0x23a>
 8013242:	001d      	movs	r5, r3
 8013244:	2200      	movs	r2, #0
 8013246:	2700      	movs	r7, #0
 8013248:	e6b4      	b.n	8012fb4 <__aeabi_dsub+0x254>
 801324a:	2d00      	cmp	r5, #0
 801324c:	d159      	bne.n	8013302 <__aeabi_dsub+0x5a2>
 801324e:	000b      	movs	r3, r1
 8013250:	4303      	orrs	r3, r0
 8013252:	d100      	bne.n	8013256 <__aeabi_dsub+0x4f6>
 8013254:	e6d6      	b.n	8013004 <__aeabi_dsub+0x2a4>
 8013256:	1c73      	adds	r3, r6, #1
 8013258:	d100      	bne.n	801325c <__aeabi_dsub+0x4fc>
 801325a:	e0b2      	b.n	80133c2 <__aeabi_dsub+0x662>
 801325c:	4b62      	ldr	r3, [pc, #392]	; (80133e8 <__aeabi_dsub+0x688>)
 801325e:	429f      	cmp	r7, r3
 8013260:	d01e      	beq.n	80132a0 <__aeabi_dsub+0x540>
 8013262:	43f3      	mvns	r3, r6
 8013264:	2b38      	cmp	r3, #56	; 0x38
 8013266:	dc6f      	bgt.n	8013348 <__aeabi_dsub+0x5e8>
 8013268:	2b1f      	cmp	r3, #31
 801326a:	dd00      	ble.n	801326e <__aeabi_dsub+0x50e>
 801326c:	e097      	b.n	801339e <__aeabi_dsub+0x63e>
 801326e:	2520      	movs	r5, #32
 8013270:	000e      	movs	r6, r1
 8013272:	1aed      	subs	r5, r5, r3
 8013274:	40ae      	lsls	r6, r5
 8013276:	46b0      	mov	r8, r6
 8013278:	0006      	movs	r6, r0
 801327a:	46aa      	mov	sl, r5
 801327c:	40de      	lsrs	r6, r3
 801327e:	4645      	mov	r5, r8
 8013280:	4335      	orrs	r5, r6
 8013282:	002e      	movs	r6, r5
 8013284:	4655      	mov	r5, sl
 8013286:	40a8      	lsls	r0, r5
 8013288:	40d9      	lsrs	r1, r3
 801328a:	1e45      	subs	r5, r0, #1
 801328c:	41a8      	sbcs	r0, r5
 801328e:	448c      	add	ip, r1
 8013290:	4306      	orrs	r6, r0
 8013292:	18b6      	adds	r6, r6, r2
 8013294:	4296      	cmp	r6, r2
 8013296:	4192      	sbcs	r2, r2
 8013298:	4251      	negs	r1, r2
 801329a:	4461      	add	r1, ip
 801329c:	003d      	movs	r5, r7
 801329e:	e625      	b.n	8012eec <__aeabi_dsub+0x18c>
 80132a0:	003d      	movs	r5, r7
 80132a2:	4661      	mov	r1, ip
 80132a4:	4691      	mov	r9, r2
 80132a6:	e678      	b.n	8012f9a <__aeabi_dsub+0x23a>
 80132a8:	000b      	movs	r3, r1
 80132aa:	4303      	orrs	r3, r0
 80132ac:	2d00      	cmp	r5, #0
 80132ae:	d000      	beq.n	80132b2 <__aeabi_dsub+0x552>
 80132b0:	e655      	b.n	8012f5e <__aeabi_dsub+0x1fe>
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d0f5      	beq.n	80132a2 <__aeabi_dsub+0x542>
 80132b6:	4663      	mov	r3, ip
 80132b8:	4313      	orrs	r3, r2
 80132ba:	d100      	bne.n	80132be <__aeabi_dsub+0x55e>
 80132bc:	e66d      	b.n	8012f9a <__aeabi_dsub+0x23a>
 80132be:	1886      	adds	r6, r0, r2
 80132c0:	4286      	cmp	r6, r0
 80132c2:	4180      	sbcs	r0, r0
 80132c4:	4461      	add	r1, ip
 80132c6:	4240      	negs	r0, r0
 80132c8:	1809      	adds	r1, r1, r0
 80132ca:	2200      	movs	r2, #0
 80132cc:	020b      	lsls	r3, r1, #8
 80132ce:	d400      	bmi.n	80132d2 <__aeabi_dsub+0x572>
 80132d0:	e6d0      	b.n	8013074 <__aeabi_dsub+0x314>
 80132d2:	4b46      	ldr	r3, [pc, #280]	; (80133ec <__aeabi_dsub+0x68c>)
 80132d4:	3501      	adds	r5, #1
 80132d6:	4019      	ands	r1, r3
 80132d8:	e5b2      	b.n	8012e40 <__aeabi_dsub+0xe0>
 80132da:	46b1      	mov	r9, r6
 80132dc:	e65d      	b.n	8012f9a <__aeabi_dsub+0x23a>
 80132de:	0033      	movs	r3, r6
 80132e0:	4667      	mov	r7, ip
 80132e2:	3b20      	subs	r3, #32
 80132e4:	40df      	lsrs	r7, r3
 80132e6:	003b      	movs	r3, r7
 80132e8:	2e20      	cmp	r6, #32
 80132ea:	d005      	beq.n	80132f8 <__aeabi_dsub+0x598>
 80132ec:	2740      	movs	r7, #64	; 0x40
 80132ee:	1bbf      	subs	r7, r7, r6
 80132f0:	4666      	mov	r6, ip
 80132f2:	40be      	lsls	r6, r7
 80132f4:	4332      	orrs	r2, r6
 80132f6:	4690      	mov	r8, r2
 80132f8:	4646      	mov	r6, r8
 80132fa:	1e72      	subs	r2, r6, #1
 80132fc:	4196      	sbcs	r6, r2
 80132fe:	4333      	orrs	r3, r6
 8013300:	e5ef      	b.n	8012ee2 <__aeabi_dsub+0x182>
 8013302:	4b39      	ldr	r3, [pc, #228]	; (80133e8 <__aeabi_dsub+0x688>)
 8013304:	429f      	cmp	r7, r3
 8013306:	d0cb      	beq.n	80132a0 <__aeabi_dsub+0x540>
 8013308:	2580      	movs	r5, #128	; 0x80
 801330a:	042d      	lsls	r5, r5, #16
 801330c:	4273      	negs	r3, r6
 801330e:	4329      	orrs	r1, r5
 8013310:	e7a8      	b.n	8013264 <__aeabi_dsub+0x504>
 8013312:	4308      	orrs	r0, r1
 8013314:	1e41      	subs	r1, r0, #1
 8013316:	4188      	sbcs	r0, r1
 8013318:	e6a2      	b.n	8013060 <__aeabi_dsub+0x300>
 801331a:	2f00      	cmp	r7, #0
 801331c:	d100      	bne.n	8013320 <__aeabi_dsub+0x5c0>
 801331e:	e63c      	b.n	8012f9a <__aeabi_dsub+0x23a>
 8013320:	4663      	mov	r3, ip
 8013322:	1a86      	subs	r6, r0, r2
 8013324:	1acf      	subs	r7, r1, r3
 8013326:	42b0      	cmp	r0, r6
 8013328:	419b      	sbcs	r3, r3
 801332a:	425b      	negs	r3, r3
 801332c:	1afb      	subs	r3, r7, r3
 801332e:	4698      	mov	r8, r3
 8013330:	021b      	lsls	r3, r3, #8
 8013332:	d54e      	bpl.n	80133d2 <__aeabi_dsub+0x672>
 8013334:	1a16      	subs	r6, r2, r0
 8013336:	4663      	mov	r3, ip
 8013338:	42b2      	cmp	r2, r6
 801333a:	4192      	sbcs	r2, r2
 801333c:	1a59      	subs	r1, r3, r1
 801333e:	4252      	negs	r2, r2
 8013340:	1a89      	subs	r1, r1, r2
 8013342:	465c      	mov	r4, fp
 8013344:	2200      	movs	r2, #0
 8013346:	e57b      	b.n	8012e40 <__aeabi_dsub+0xe0>
 8013348:	4301      	orrs	r1, r0
 801334a:	000e      	movs	r6, r1
 801334c:	1e71      	subs	r1, r6, #1
 801334e:	418e      	sbcs	r6, r1
 8013350:	e79f      	b.n	8013292 <__aeabi_dsub+0x532>
 8013352:	001d      	movs	r5, r3
 8013354:	000e      	movs	r6, r1
 8013356:	3d20      	subs	r5, #32
 8013358:	40ee      	lsrs	r6, r5
 801335a:	46b0      	mov	r8, r6
 801335c:	2b20      	cmp	r3, #32
 801335e:	d004      	beq.n	801336a <__aeabi_dsub+0x60a>
 8013360:	2540      	movs	r5, #64	; 0x40
 8013362:	1aeb      	subs	r3, r5, r3
 8013364:	4099      	lsls	r1, r3
 8013366:	4308      	orrs	r0, r1
 8013368:	4681      	mov	r9, r0
 801336a:	4648      	mov	r0, r9
 801336c:	4643      	mov	r3, r8
 801336e:	1e41      	subs	r1, r0, #1
 8013370:	4188      	sbcs	r0, r1
 8013372:	4318      	orrs	r0, r3
 8013374:	e674      	b.n	8013060 <__aeabi_dsub+0x300>
 8013376:	2200      	movs	r2, #0
 8013378:	2400      	movs	r4, #0
 801337a:	e617      	b.n	8012fac <__aeabi_dsub+0x24c>
 801337c:	1a16      	subs	r6, r2, r0
 801337e:	4663      	mov	r3, ip
 8013380:	42b2      	cmp	r2, r6
 8013382:	4192      	sbcs	r2, r2
 8013384:	1a59      	subs	r1, r3, r1
 8013386:	4252      	negs	r2, r2
 8013388:	1a89      	subs	r1, r1, r2
 801338a:	003d      	movs	r5, r7
 801338c:	e525      	b.n	8012dda <__aeabi_dsub+0x7a>
 801338e:	4661      	mov	r1, ip
 8013390:	4691      	mov	r9, r2
 8013392:	4d15      	ldr	r5, [pc, #84]	; (80133e8 <__aeabi_dsub+0x688>)
 8013394:	e601      	b.n	8012f9a <__aeabi_dsub+0x23a>
 8013396:	2280      	movs	r2, #128	; 0x80
 8013398:	2400      	movs	r4, #0
 801339a:	0312      	lsls	r2, r2, #12
 801339c:	e679      	b.n	8013092 <__aeabi_dsub+0x332>
 801339e:	001d      	movs	r5, r3
 80133a0:	000e      	movs	r6, r1
 80133a2:	3d20      	subs	r5, #32
 80133a4:	40ee      	lsrs	r6, r5
 80133a6:	46b0      	mov	r8, r6
 80133a8:	2b20      	cmp	r3, #32
 80133aa:	d004      	beq.n	80133b6 <__aeabi_dsub+0x656>
 80133ac:	2540      	movs	r5, #64	; 0x40
 80133ae:	1aeb      	subs	r3, r5, r3
 80133b0:	4099      	lsls	r1, r3
 80133b2:	4308      	orrs	r0, r1
 80133b4:	4681      	mov	r9, r0
 80133b6:	464e      	mov	r6, r9
 80133b8:	4643      	mov	r3, r8
 80133ba:	1e71      	subs	r1, r6, #1
 80133bc:	418e      	sbcs	r6, r1
 80133be:	431e      	orrs	r6, r3
 80133c0:	e767      	b.n	8013292 <__aeabi_dsub+0x532>
 80133c2:	1886      	adds	r6, r0, r2
 80133c4:	4296      	cmp	r6, r2
 80133c6:	419b      	sbcs	r3, r3
 80133c8:	4461      	add	r1, ip
 80133ca:	425b      	negs	r3, r3
 80133cc:	18c9      	adds	r1, r1, r3
 80133ce:	003d      	movs	r5, r7
 80133d0:	e58c      	b.n	8012eec <__aeabi_dsub+0x18c>
 80133d2:	4647      	mov	r7, r8
 80133d4:	4337      	orrs	r7, r6
 80133d6:	d0ce      	beq.n	8013376 <__aeabi_dsub+0x616>
 80133d8:	2207      	movs	r2, #7
 80133da:	4641      	mov	r1, r8
 80133dc:	4032      	ands	r2, r6
 80133de:	e649      	b.n	8013074 <__aeabi_dsub+0x314>
 80133e0:	2700      	movs	r7, #0
 80133e2:	003a      	movs	r2, r7
 80133e4:	e5e6      	b.n	8012fb4 <__aeabi_dsub+0x254>
 80133e6:	46c0      	nop			; (mov r8, r8)
 80133e8:	000007ff 	.word	0x000007ff
 80133ec:	ff7fffff 	.word	0xff7fffff

080133f0 <__aeabi_dcmpun>:
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	4e0c      	ldr	r6, [pc, #48]	; (8013424 <__aeabi_dcmpun+0x34>)
 80133f4:	030d      	lsls	r5, r1, #12
 80133f6:	031c      	lsls	r4, r3, #12
 80133f8:	0049      	lsls	r1, r1, #1
 80133fa:	005b      	lsls	r3, r3, #1
 80133fc:	0b2d      	lsrs	r5, r5, #12
 80133fe:	0d49      	lsrs	r1, r1, #21
 8013400:	0b24      	lsrs	r4, r4, #12
 8013402:	0d5b      	lsrs	r3, r3, #21
 8013404:	42b1      	cmp	r1, r6
 8013406:	d008      	beq.n	801341a <__aeabi_dcmpun+0x2a>
 8013408:	4906      	ldr	r1, [pc, #24]	; (8013424 <__aeabi_dcmpun+0x34>)
 801340a:	2000      	movs	r0, #0
 801340c:	428b      	cmp	r3, r1
 801340e:	d103      	bne.n	8013418 <__aeabi_dcmpun+0x28>
 8013410:	4314      	orrs	r4, r2
 8013412:	0020      	movs	r0, r4
 8013414:	1e44      	subs	r4, r0, #1
 8013416:	41a0      	sbcs	r0, r4
 8013418:	bd70      	pop	{r4, r5, r6, pc}
 801341a:	4305      	orrs	r5, r0
 801341c:	2001      	movs	r0, #1
 801341e:	2d00      	cmp	r5, #0
 8013420:	d1fa      	bne.n	8013418 <__aeabi_dcmpun+0x28>
 8013422:	e7f1      	b.n	8013408 <__aeabi_dcmpun+0x18>
 8013424:	000007ff 	.word	0x000007ff

08013428 <__aeabi_d2iz>:
 8013428:	b530      	push	{r4, r5, lr}
 801342a:	4d14      	ldr	r5, [pc, #80]	; (801347c <__aeabi_d2iz+0x54>)
 801342c:	030a      	lsls	r2, r1, #12
 801342e:	004b      	lsls	r3, r1, #1
 8013430:	0b12      	lsrs	r2, r2, #12
 8013432:	0d5b      	lsrs	r3, r3, #21
 8013434:	0fc9      	lsrs	r1, r1, #31
 8013436:	2400      	movs	r4, #0
 8013438:	42ab      	cmp	r3, r5
 801343a:	dd11      	ble.n	8013460 <__aeabi_d2iz+0x38>
 801343c:	4c10      	ldr	r4, [pc, #64]	; (8013480 <__aeabi_d2iz+0x58>)
 801343e:	42a3      	cmp	r3, r4
 8013440:	dc10      	bgt.n	8013464 <__aeabi_d2iz+0x3c>
 8013442:	2480      	movs	r4, #128	; 0x80
 8013444:	0364      	lsls	r4, r4, #13
 8013446:	4322      	orrs	r2, r4
 8013448:	4c0e      	ldr	r4, [pc, #56]	; (8013484 <__aeabi_d2iz+0x5c>)
 801344a:	1ae4      	subs	r4, r4, r3
 801344c:	2c1f      	cmp	r4, #31
 801344e:	dd0c      	ble.n	801346a <__aeabi_d2iz+0x42>
 8013450:	480d      	ldr	r0, [pc, #52]	; (8013488 <__aeabi_d2iz+0x60>)
 8013452:	1ac3      	subs	r3, r0, r3
 8013454:	40da      	lsrs	r2, r3
 8013456:	0013      	movs	r3, r2
 8013458:	425c      	negs	r4, r3
 801345a:	2900      	cmp	r1, #0
 801345c:	d100      	bne.n	8013460 <__aeabi_d2iz+0x38>
 801345e:	001c      	movs	r4, r3
 8013460:	0020      	movs	r0, r4
 8013462:	bd30      	pop	{r4, r5, pc}
 8013464:	4b09      	ldr	r3, [pc, #36]	; (801348c <__aeabi_d2iz+0x64>)
 8013466:	18cc      	adds	r4, r1, r3
 8013468:	e7fa      	b.n	8013460 <__aeabi_d2iz+0x38>
 801346a:	4d09      	ldr	r5, [pc, #36]	; (8013490 <__aeabi_d2iz+0x68>)
 801346c:	40e0      	lsrs	r0, r4
 801346e:	46ac      	mov	ip, r5
 8013470:	4463      	add	r3, ip
 8013472:	409a      	lsls	r2, r3
 8013474:	0013      	movs	r3, r2
 8013476:	4303      	orrs	r3, r0
 8013478:	e7ee      	b.n	8013458 <__aeabi_d2iz+0x30>
 801347a:	46c0      	nop			; (mov r8, r8)
 801347c:	000003fe 	.word	0x000003fe
 8013480:	0000041d 	.word	0x0000041d
 8013484:	00000433 	.word	0x00000433
 8013488:	00000413 	.word	0x00000413
 801348c:	7fffffff 	.word	0x7fffffff
 8013490:	fffffbed 	.word	0xfffffbed

08013494 <__aeabi_i2d>:
 8013494:	b570      	push	{r4, r5, r6, lr}
 8013496:	2800      	cmp	r0, #0
 8013498:	d02d      	beq.n	80134f6 <__aeabi_i2d+0x62>
 801349a:	17c3      	asrs	r3, r0, #31
 801349c:	18c5      	adds	r5, r0, r3
 801349e:	405d      	eors	r5, r3
 80134a0:	0fc4      	lsrs	r4, r0, #31
 80134a2:	0028      	movs	r0, r5
 80134a4:	f7fd fe1a 	bl	80110dc <__clzsi2>
 80134a8:	4b15      	ldr	r3, [pc, #84]	; (8013500 <__aeabi_i2d+0x6c>)
 80134aa:	1a1b      	subs	r3, r3, r0
 80134ac:	055b      	lsls	r3, r3, #21
 80134ae:	0d5b      	lsrs	r3, r3, #21
 80134b0:	280a      	cmp	r0, #10
 80134b2:	dd15      	ble.n	80134e0 <__aeabi_i2d+0x4c>
 80134b4:	380b      	subs	r0, #11
 80134b6:	4085      	lsls	r5, r0
 80134b8:	2200      	movs	r2, #0
 80134ba:	032d      	lsls	r5, r5, #12
 80134bc:	0b2d      	lsrs	r5, r5, #12
 80134be:	2100      	movs	r1, #0
 80134c0:	0010      	movs	r0, r2
 80134c2:	032d      	lsls	r5, r5, #12
 80134c4:	0d0a      	lsrs	r2, r1, #20
 80134c6:	0b2d      	lsrs	r5, r5, #12
 80134c8:	0512      	lsls	r2, r2, #20
 80134ca:	432a      	orrs	r2, r5
 80134cc:	4d0d      	ldr	r5, [pc, #52]	; (8013504 <__aeabi_i2d+0x70>)
 80134ce:	051b      	lsls	r3, r3, #20
 80134d0:	402a      	ands	r2, r5
 80134d2:	4313      	orrs	r3, r2
 80134d4:	005b      	lsls	r3, r3, #1
 80134d6:	07e4      	lsls	r4, r4, #31
 80134d8:	085b      	lsrs	r3, r3, #1
 80134da:	4323      	orrs	r3, r4
 80134dc:	0019      	movs	r1, r3
 80134de:	bd70      	pop	{r4, r5, r6, pc}
 80134e0:	0002      	movs	r2, r0
 80134e2:	0029      	movs	r1, r5
 80134e4:	3215      	adds	r2, #21
 80134e6:	4091      	lsls	r1, r2
 80134e8:	000a      	movs	r2, r1
 80134ea:	210b      	movs	r1, #11
 80134ec:	1a08      	subs	r0, r1, r0
 80134ee:	40c5      	lsrs	r5, r0
 80134f0:	032d      	lsls	r5, r5, #12
 80134f2:	0b2d      	lsrs	r5, r5, #12
 80134f4:	e7e3      	b.n	80134be <__aeabi_i2d+0x2a>
 80134f6:	2400      	movs	r4, #0
 80134f8:	2300      	movs	r3, #0
 80134fa:	2500      	movs	r5, #0
 80134fc:	2200      	movs	r2, #0
 80134fe:	e7de      	b.n	80134be <__aeabi_i2d+0x2a>
 8013500:	0000041e 	.word	0x0000041e
 8013504:	800fffff 	.word	0x800fffff

08013508 <__aeabi_ui2d>:
 8013508:	b510      	push	{r4, lr}
 801350a:	1e04      	subs	r4, r0, #0
 801350c:	d025      	beq.n	801355a <__aeabi_ui2d+0x52>
 801350e:	f7fd fde5 	bl	80110dc <__clzsi2>
 8013512:	4b14      	ldr	r3, [pc, #80]	; (8013564 <__aeabi_ui2d+0x5c>)
 8013514:	1a1b      	subs	r3, r3, r0
 8013516:	055b      	lsls	r3, r3, #21
 8013518:	0d5b      	lsrs	r3, r3, #21
 801351a:	280a      	cmp	r0, #10
 801351c:	dd12      	ble.n	8013544 <__aeabi_ui2d+0x3c>
 801351e:	380b      	subs	r0, #11
 8013520:	4084      	lsls	r4, r0
 8013522:	2200      	movs	r2, #0
 8013524:	0324      	lsls	r4, r4, #12
 8013526:	0b24      	lsrs	r4, r4, #12
 8013528:	2100      	movs	r1, #0
 801352a:	0010      	movs	r0, r2
 801352c:	0324      	lsls	r4, r4, #12
 801352e:	0d0a      	lsrs	r2, r1, #20
 8013530:	0b24      	lsrs	r4, r4, #12
 8013532:	0512      	lsls	r2, r2, #20
 8013534:	4322      	orrs	r2, r4
 8013536:	4c0c      	ldr	r4, [pc, #48]	; (8013568 <__aeabi_ui2d+0x60>)
 8013538:	051b      	lsls	r3, r3, #20
 801353a:	4022      	ands	r2, r4
 801353c:	4313      	orrs	r3, r2
 801353e:	005b      	lsls	r3, r3, #1
 8013540:	0859      	lsrs	r1, r3, #1
 8013542:	bd10      	pop	{r4, pc}
 8013544:	0002      	movs	r2, r0
 8013546:	0021      	movs	r1, r4
 8013548:	3215      	adds	r2, #21
 801354a:	4091      	lsls	r1, r2
 801354c:	000a      	movs	r2, r1
 801354e:	210b      	movs	r1, #11
 8013550:	1a08      	subs	r0, r1, r0
 8013552:	40c4      	lsrs	r4, r0
 8013554:	0324      	lsls	r4, r4, #12
 8013556:	0b24      	lsrs	r4, r4, #12
 8013558:	e7e6      	b.n	8013528 <__aeabi_ui2d+0x20>
 801355a:	2300      	movs	r3, #0
 801355c:	2400      	movs	r4, #0
 801355e:	2200      	movs	r2, #0
 8013560:	e7e2      	b.n	8013528 <__aeabi_ui2d+0x20>
 8013562:	46c0      	nop			; (mov r8, r8)
 8013564:	0000041e 	.word	0x0000041e
 8013568:	800fffff 	.word	0x800fffff

0801356c <__aeabi_f2d>:
 801356c:	0041      	lsls	r1, r0, #1
 801356e:	0e09      	lsrs	r1, r1, #24
 8013570:	1c4b      	adds	r3, r1, #1
 8013572:	b570      	push	{r4, r5, r6, lr}
 8013574:	b2db      	uxtb	r3, r3
 8013576:	0246      	lsls	r6, r0, #9
 8013578:	0a75      	lsrs	r5, r6, #9
 801357a:	0fc4      	lsrs	r4, r0, #31
 801357c:	2b01      	cmp	r3, #1
 801357e:	dd14      	ble.n	80135aa <__aeabi_f2d+0x3e>
 8013580:	23e0      	movs	r3, #224	; 0xe0
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	076d      	lsls	r5, r5, #29
 8013586:	0b36      	lsrs	r6, r6, #12
 8013588:	18cb      	adds	r3, r1, r3
 801358a:	2100      	movs	r1, #0
 801358c:	0d0a      	lsrs	r2, r1, #20
 801358e:	0028      	movs	r0, r5
 8013590:	0512      	lsls	r2, r2, #20
 8013592:	4d1c      	ldr	r5, [pc, #112]	; (8013604 <__aeabi_f2d+0x98>)
 8013594:	4332      	orrs	r2, r6
 8013596:	055b      	lsls	r3, r3, #21
 8013598:	402a      	ands	r2, r5
 801359a:	085b      	lsrs	r3, r3, #1
 801359c:	4313      	orrs	r3, r2
 801359e:	005b      	lsls	r3, r3, #1
 80135a0:	07e4      	lsls	r4, r4, #31
 80135a2:	085b      	lsrs	r3, r3, #1
 80135a4:	4323      	orrs	r3, r4
 80135a6:	0019      	movs	r1, r3
 80135a8:	bd70      	pop	{r4, r5, r6, pc}
 80135aa:	2900      	cmp	r1, #0
 80135ac:	d114      	bne.n	80135d8 <__aeabi_f2d+0x6c>
 80135ae:	2d00      	cmp	r5, #0
 80135b0:	d01e      	beq.n	80135f0 <__aeabi_f2d+0x84>
 80135b2:	0028      	movs	r0, r5
 80135b4:	f7fd fd92 	bl	80110dc <__clzsi2>
 80135b8:	280a      	cmp	r0, #10
 80135ba:	dc1c      	bgt.n	80135f6 <__aeabi_f2d+0x8a>
 80135bc:	230b      	movs	r3, #11
 80135be:	002a      	movs	r2, r5
 80135c0:	1a1b      	subs	r3, r3, r0
 80135c2:	40da      	lsrs	r2, r3
 80135c4:	0003      	movs	r3, r0
 80135c6:	3315      	adds	r3, #21
 80135c8:	409d      	lsls	r5, r3
 80135ca:	4b0f      	ldr	r3, [pc, #60]	; (8013608 <__aeabi_f2d+0x9c>)
 80135cc:	0312      	lsls	r2, r2, #12
 80135ce:	1a1b      	subs	r3, r3, r0
 80135d0:	055b      	lsls	r3, r3, #21
 80135d2:	0b16      	lsrs	r6, r2, #12
 80135d4:	0d5b      	lsrs	r3, r3, #21
 80135d6:	e7d8      	b.n	801358a <__aeabi_f2d+0x1e>
 80135d8:	2d00      	cmp	r5, #0
 80135da:	d006      	beq.n	80135ea <__aeabi_f2d+0x7e>
 80135dc:	0b32      	lsrs	r2, r6, #12
 80135de:	2680      	movs	r6, #128	; 0x80
 80135e0:	0336      	lsls	r6, r6, #12
 80135e2:	076d      	lsls	r5, r5, #29
 80135e4:	4316      	orrs	r6, r2
 80135e6:	4b09      	ldr	r3, [pc, #36]	; (801360c <__aeabi_f2d+0xa0>)
 80135e8:	e7cf      	b.n	801358a <__aeabi_f2d+0x1e>
 80135ea:	4b08      	ldr	r3, [pc, #32]	; (801360c <__aeabi_f2d+0xa0>)
 80135ec:	2600      	movs	r6, #0
 80135ee:	e7cc      	b.n	801358a <__aeabi_f2d+0x1e>
 80135f0:	2300      	movs	r3, #0
 80135f2:	2600      	movs	r6, #0
 80135f4:	e7c9      	b.n	801358a <__aeabi_f2d+0x1e>
 80135f6:	0003      	movs	r3, r0
 80135f8:	002a      	movs	r2, r5
 80135fa:	3b0b      	subs	r3, #11
 80135fc:	409a      	lsls	r2, r3
 80135fe:	2500      	movs	r5, #0
 8013600:	e7e3      	b.n	80135ca <__aeabi_f2d+0x5e>
 8013602:	46c0      	nop			; (mov r8, r8)
 8013604:	800fffff 	.word	0x800fffff
 8013608:	00000389 	.word	0x00000389
 801360c:	000007ff 	.word	0x000007ff

08013610 <__aeabi_d2f>:
 8013610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013612:	004c      	lsls	r4, r1, #1
 8013614:	0d64      	lsrs	r4, r4, #21
 8013616:	030b      	lsls	r3, r1, #12
 8013618:	1c62      	adds	r2, r4, #1
 801361a:	0a5b      	lsrs	r3, r3, #9
 801361c:	0f46      	lsrs	r6, r0, #29
 801361e:	0552      	lsls	r2, r2, #21
 8013620:	0fc9      	lsrs	r1, r1, #31
 8013622:	431e      	orrs	r6, r3
 8013624:	00c5      	lsls	r5, r0, #3
 8013626:	0d52      	lsrs	r2, r2, #21
 8013628:	2a01      	cmp	r2, #1
 801362a:	dd29      	ble.n	8013680 <__aeabi_d2f+0x70>
 801362c:	4b37      	ldr	r3, [pc, #220]	; (801370c <__aeabi_d2f+0xfc>)
 801362e:	18e7      	adds	r7, r4, r3
 8013630:	2ffe      	cmp	r7, #254	; 0xfe
 8013632:	dc1c      	bgt.n	801366e <__aeabi_d2f+0x5e>
 8013634:	2f00      	cmp	r7, #0
 8013636:	dd3b      	ble.n	80136b0 <__aeabi_d2f+0xa0>
 8013638:	0180      	lsls	r0, r0, #6
 801363a:	1e43      	subs	r3, r0, #1
 801363c:	4198      	sbcs	r0, r3
 801363e:	2207      	movs	r2, #7
 8013640:	00f3      	lsls	r3, r6, #3
 8013642:	0f6d      	lsrs	r5, r5, #29
 8013644:	4303      	orrs	r3, r0
 8013646:	432b      	orrs	r3, r5
 8013648:	401a      	ands	r2, r3
 801364a:	2a00      	cmp	r2, #0
 801364c:	d004      	beq.n	8013658 <__aeabi_d2f+0x48>
 801364e:	220f      	movs	r2, #15
 8013650:	401a      	ands	r2, r3
 8013652:	2a04      	cmp	r2, #4
 8013654:	d000      	beq.n	8013658 <__aeabi_d2f+0x48>
 8013656:	3304      	adds	r3, #4
 8013658:	2280      	movs	r2, #128	; 0x80
 801365a:	04d2      	lsls	r2, r2, #19
 801365c:	401a      	ands	r2, r3
 801365e:	d024      	beq.n	80136aa <__aeabi_d2f+0x9a>
 8013660:	3701      	adds	r7, #1
 8013662:	b2fa      	uxtb	r2, r7
 8013664:	2fff      	cmp	r7, #255	; 0xff
 8013666:	d002      	beq.n	801366e <__aeabi_d2f+0x5e>
 8013668:	019b      	lsls	r3, r3, #6
 801366a:	0a58      	lsrs	r0, r3, #9
 801366c:	e001      	b.n	8013672 <__aeabi_d2f+0x62>
 801366e:	22ff      	movs	r2, #255	; 0xff
 8013670:	2000      	movs	r0, #0
 8013672:	0240      	lsls	r0, r0, #9
 8013674:	05d2      	lsls	r2, r2, #23
 8013676:	0a40      	lsrs	r0, r0, #9
 8013678:	07c9      	lsls	r1, r1, #31
 801367a:	4310      	orrs	r0, r2
 801367c:	4308      	orrs	r0, r1
 801367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013680:	4335      	orrs	r5, r6
 8013682:	2c00      	cmp	r4, #0
 8013684:	d104      	bne.n	8013690 <__aeabi_d2f+0x80>
 8013686:	2d00      	cmp	r5, #0
 8013688:	d10a      	bne.n	80136a0 <__aeabi_d2f+0x90>
 801368a:	2200      	movs	r2, #0
 801368c:	2000      	movs	r0, #0
 801368e:	e7f0      	b.n	8013672 <__aeabi_d2f+0x62>
 8013690:	2d00      	cmp	r5, #0
 8013692:	d0ec      	beq.n	801366e <__aeabi_d2f+0x5e>
 8013694:	2080      	movs	r0, #128	; 0x80
 8013696:	03c0      	lsls	r0, r0, #15
 8013698:	4330      	orrs	r0, r6
 801369a:	22ff      	movs	r2, #255	; 0xff
 801369c:	e7e9      	b.n	8013672 <__aeabi_d2f+0x62>
 801369e:	2400      	movs	r4, #0
 80136a0:	2300      	movs	r3, #0
 80136a2:	025b      	lsls	r3, r3, #9
 80136a4:	0a58      	lsrs	r0, r3, #9
 80136a6:	b2e2      	uxtb	r2, r4
 80136a8:	e7e3      	b.n	8013672 <__aeabi_d2f+0x62>
 80136aa:	08db      	lsrs	r3, r3, #3
 80136ac:	003c      	movs	r4, r7
 80136ae:	e7f8      	b.n	80136a2 <__aeabi_d2f+0x92>
 80136b0:	003b      	movs	r3, r7
 80136b2:	3317      	adds	r3, #23
 80136b4:	dbf3      	blt.n	801369e <__aeabi_d2f+0x8e>
 80136b6:	2380      	movs	r3, #128	; 0x80
 80136b8:	041b      	lsls	r3, r3, #16
 80136ba:	4333      	orrs	r3, r6
 80136bc:	261e      	movs	r6, #30
 80136be:	1bf6      	subs	r6, r6, r7
 80136c0:	2e1f      	cmp	r6, #31
 80136c2:	dd14      	ble.n	80136ee <__aeabi_d2f+0xde>
 80136c4:	2202      	movs	r2, #2
 80136c6:	4252      	negs	r2, r2
 80136c8:	1bd7      	subs	r7, r2, r7
 80136ca:	001a      	movs	r2, r3
 80136cc:	40fa      	lsrs	r2, r7
 80136ce:	0017      	movs	r7, r2
 80136d0:	2e20      	cmp	r6, #32
 80136d2:	d004      	beq.n	80136de <__aeabi_d2f+0xce>
 80136d4:	4a0e      	ldr	r2, [pc, #56]	; (8013710 <__aeabi_d2f+0x100>)
 80136d6:	4694      	mov	ip, r2
 80136d8:	4464      	add	r4, ip
 80136da:	40a3      	lsls	r3, r4
 80136dc:	431d      	orrs	r5, r3
 80136de:	002b      	movs	r3, r5
 80136e0:	1e5d      	subs	r5, r3, #1
 80136e2:	41ab      	sbcs	r3, r5
 80136e4:	2207      	movs	r2, #7
 80136e6:	433b      	orrs	r3, r7
 80136e8:	401a      	ands	r2, r3
 80136ea:	2700      	movs	r7, #0
 80136ec:	e7ad      	b.n	801364a <__aeabi_d2f+0x3a>
 80136ee:	4a09      	ldr	r2, [pc, #36]	; (8013714 <__aeabi_d2f+0x104>)
 80136f0:	0028      	movs	r0, r5
 80136f2:	18a2      	adds	r2, r4, r2
 80136f4:	4095      	lsls	r5, r2
 80136f6:	4093      	lsls	r3, r2
 80136f8:	1e6c      	subs	r4, r5, #1
 80136fa:	41a5      	sbcs	r5, r4
 80136fc:	40f0      	lsrs	r0, r6
 80136fe:	2207      	movs	r2, #7
 8013700:	432b      	orrs	r3, r5
 8013702:	4303      	orrs	r3, r0
 8013704:	401a      	ands	r2, r3
 8013706:	2700      	movs	r7, #0
 8013708:	e79f      	b.n	801364a <__aeabi_d2f+0x3a>
 801370a:	46c0      	nop			; (mov r8, r8)
 801370c:	fffffc80 	.word	0xfffffc80
 8013710:	fffffca2 	.word	0xfffffca2
 8013714:	fffffc82 	.word	0xfffffc82

08013718 <__clzdi2>:
 8013718:	b510      	push	{r4, lr}
 801371a:	2900      	cmp	r1, #0
 801371c:	d103      	bne.n	8013726 <__clzdi2+0xe>
 801371e:	f7fd fcdd 	bl	80110dc <__clzsi2>
 8013722:	3020      	adds	r0, #32
 8013724:	e002      	b.n	801372c <__clzdi2+0x14>
 8013726:	1c08      	adds	r0, r1, #0
 8013728:	f7fd fcd8 	bl	80110dc <__clzsi2>
 801372c:	bd10      	pop	{r4, pc}
 801372e:	46c0      	nop			; (mov r8, r8)

08013730 <strlen>:
 8013730:	2300      	movs	r3, #0
 8013732:	5cc2      	ldrb	r2, [r0, r3]
 8013734:	3301      	adds	r3, #1
 8013736:	2a00      	cmp	r2, #0
 8013738:	d1fb      	bne.n	8013732 <strlen+0x2>
 801373a:	1e58      	subs	r0, r3, #1
 801373c:	4770      	bx	lr
	...

08013740 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8013740:	b510      	push	{r4, lr}
 8013742:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8013744:	b292      	uxth	r2, r2
 8013746:	4b03      	ldr	r3, [pc, #12]	; (8013754 <_write+0x14>)
 8013748:	4803      	ldr	r0, [pc, #12]	; (8013758 <_write+0x18>)
 801374a:	f7fa fa09 	bl	800db60 <HAL_UART_Transmit>
	return len;
}
 801374e:	0020      	movs	r0, r4
 8013750:	bd10      	pop	{r4, pc}
 8013752:	46c0      	nop			; (mov r8, r8)
 8013754:	0000ffff 	.word	0x0000ffff
 8013758:	20000638 	.word	0x20000638

0801375c <Reset_Handler>:
 801375c:	480d      	ldr	r0, [pc, #52]	; (8013794 <LoopForever+0x2>)
 801375e:	4685      	mov	sp, r0
 8013760:	2100      	movs	r1, #0
 8013762:	e003      	b.n	801376c <LoopCopyDataInit>

08013764 <CopyDataInit>:
 8013764:	4b0c      	ldr	r3, [pc, #48]	; (8013798 <LoopForever+0x6>)
 8013766:	585b      	ldr	r3, [r3, r1]
 8013768:	5043      	str	r3, [r0, r1]
 801376a:	3104      	adds	r1, #4

0801376c <LoopCopyDataInit>:
 801376c:	480b      	ldr	r0, [pc, #44]	; (801379c <LoopForever+0xa>)
 801376e:	4b0c      	ldr	r3, [pc, #48]	; (80137a0 <LoopForever+0xe>)
 8013770:	1842      	adds	r2, r0, r1
 8013772:	429a      	cmp	r2, r3
 8013774:	d3f6      	bcc.n	8013764 <CopyDataInit>
 8013776:	4a0b      	ldr	r2, [pc, #44]	; (80137a4 <LoopForever+0x12>)
 8013778:	e002      	b.n	8013780 <LoopFillZerobss>

0801377a <FillZerobss>:
 801377a:	2300      	movs	r3, #0
 801377c:	6013      	str	r3, [r2, #0]
 801377e:	3204      	adds	r2, #4

08013780 <LoopFillZerobss>:
 8013780:	4b09      	ldr	r3, [pc, #36]	; (80137a8 <LoopForever+0x16>)
 8013782:	429a      	cmp	r2, r3
 8013784:	d3f9      	bcc.n	801377a <FillZerobss>
 8013786:	f7f6 ff5d 	bl	800a644 <SystemInit>
 801378a:	f000 fa35 	bl	8013bf8 <__libc_init_array>
 801378e:	f7f7 fd97 	bl	800b2c0 <main>

08013792 <LoopForever>:
 8013792:	e7fe      	b.n	8013792 <LoopForever>
 8013794:	20009000 	.word	0x20009000
 8013798:	0801f838 	.word	0x0801f838
 801379c:	20000000 	.word	0x20000000
 80137a0:	20000070 	.word	0x20000070
 80137a4:	20000070 	.word	0x20000070
 80137a8:	200006c8 	.word	0x200006c8

080137ac <ADC1_COMP_IRQHandler>:
 80137ac:	e7fe      	b.n	80137ac <ADC1_COMP_IRQHandler>
	...

080137b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80137b0:	b510      	push	{r4, lr}
 80137b2:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80137b4:	4a0c      	ldr	r2, [pc, #48]	; (80137e8 <_sbrk+0x38>)
 80137b6:	490d      	ldr	r1, [pc, #52]	; (80137ec <_sbrk+0x3c>)
 80137b8:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80137ba:	490d      	ldr	r1, [pc, #52]	; (80137f0 <_sbrk+0x40>)
 80137bc:	6809      	ldr	r1, [r1, #0]
 80137be:	2900      	cmp	r1, #0
 80137c0:	d007      	beq.n	80137d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80137c2:	490b      	ldr	r1, [pc, #44]	; (80137f0 <_sbrk+0x40>)
 80137c4:	6808      	ldr	r0, [r1, #0]
 80137c6:	18c3      	adds	r3, r0, r3
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d806      	bhi.n	80137da <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80137cc:	4a08      	ldr	r2, [pc, #32]	; (80137f0 <_sbrk+0x40>)
 80137ce:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80137d0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80137d2:	4907      	ldr	r1, [pc, #28]	; (80137f0 <_sbrk+0x40>)
 80137d4:	4807      	ldr	r0, [pc, #28]	; (80137f4 <_sbrk+0x44>)
 80137d6:	6008      	str	r0, [r1, #0]
 80137d8:	e7f3      	b.n	80137c2 <_sbrk+0x12>
    errno = ENOMEM;
 80137da:	f000 f867 	bl	80138ac <__errno>
 80137de:	230c      	movs	r3, #12
 80137e0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80137e2:	2001      	movs	r0, #1
 80137e4:	4240      	negs	r0, r0
 80137e6:	e7f3      	b.n	80137d0 <_sbrk+0x20>
 80137e8:	20009000 	.word	0x20009000
 80137ec:	00001400 	.word	0x00001400
 80137f0:	2000062c 	.word	0x2000062c
 80137f4:	200006c8 	.word	0x200006c8

080137f8 <__ieee754_sqrtf>:
 80137f8:	492a      	ldr	r1, [pc, #168]	; (80138a4 <__ieee754_sqrtf+0xac>)
 80137fa:	0043      	lsls	r3, r0, #1
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	0002      	movs	r2, r0
 8013800:	1c04      	adds	r4, r0, #0
 8013802:	085b      	lsrs	r3, r3, #1
 8013804:	428b      	cmp	r3, r1
 8013806:	d83b      	bhi.n	8013880 <__ieee754_sqrtf+0x88>
 8013808:	2b00      	cmp	r3, #0
 801380a:	d038      	beq.n	801387e <__ieee754_sqrtf+0x86>
 801380c:	2800      	cmp	r0, #0
 801380e:	db3e      	blt.n	801388e <__ieee754_sqrtf+0x96>
 8013810:	4925      	ldr	r1, [pc, #148]	; (80138a8 <__ieee754_sqrtf+0xb0>)
 8013812:	15c6      	asrs	r6, r0, #23
 8013814:	428b      	cmp	r3, r1
 8013816:	d80b      	bhi.n	8013830 <__ieee754_sqrtf+0x38>
 8013818:	2080      	movs	r0, #128	; 0x80
 801381a:	0400      	lsls	r0, r0, #16
 801381c:	4220      	tst	r0, r4
 801381e:	d13d      	bne.n	801389c <__ieee754_sqrtf+0xa4>
 8013820:	2300      	movs	r3, #0
 8013822:	e000      	b.n	8013826 <__ieee754_sqrtf+0x2e>
 8013824:	000b      	movs	r3, r1
 8013826:	0052      	lsls	r2, r2, #1
 8013828:	1c59      	adds	r1, r3, #1
 801382a:	4202      	tst	r2, r0
 801382c:	d0fa      	beq.n	8013824 <__ieee754_sqrtf+0x2c>
 801382e:	1af6      	subs	r6, r6, r3
 8013830:	2380      	movs	r3, #128	; 0x80
 8013832:	0252      	lsls	r2, r2, #9
 8013834:	041b      	lsls	r3, r3, #16
 8013836:	0a52      	lsrs	r2, r2, #9
 8013838:	431a      	orrs	r2, r3
 801383a:	3e7f      	subs	r6, #127	; 0x7f
 801383c:	0053      	lsls	r3, r2, #1
 801383e:	07f1      	lsls	r1, r6, #31
 8013840:	d500      	bpl.n	8013844 <__ieee754_sqrtf+0x4c>
 8013842:	0093      	lsls	r3, r2, #2
 8013844:	2280      	movs	r2, #128	; 0x80
 8013846:	1070      	asrs	r0, r6, #1
 8013848:	2119      	movs	r1, #25
 801384a:	2600      	movs	r6, #0
 801384c:	2500      	movs	r5, #0
 801384e:	0452      	lsls	r2, r2, #17
 8013850:	18ac      	adds	r4, r5, r2
 8013852:	429c      	cmp	r4, r3
 8013854:	dc02      	bgt.n	801385c <__ieee754_sqrtf+0x64>
 8013856:	18a5      	adds	r5, r4, r2
 8013858:	1b1b      	subs	r3, r3, r4
 801385a:	18b6      	adds	r6, r6, r2
 801385c:	3901      	subs	r1, #1
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	0852      	lsrs	r2, r2, #1
 8013862:	2900      	cmp	r1, #0
 8013864:	d1f4      	bne.n	8013850 <__ieee754_sqrtf+0x58>
 8013866:	2b00      	cmp	r3, #0
 8013868:	d002      	beq.n	8013870 <__ieee754_sqrtf+0x78>
 801386a:	2301      	movs	r3, #1
 801386c:	3601      	adds	r6, #1
 801386e:	439e      	bics	r6, r3
 8013870:	23fc      	movs	r3, #252	; 0xfc
 8013872:	059b      	lsls	r3, r3, #22
 8013874:	469c      	mov	ip, r3
 8013876:	1076      	asrs	r6, r6, #1
 8013878:	4466      	add	r6, ip
 801387a:	05c0      	lsls	r0, r0, #23
 801387c:	1980      	adds	r0, r0, r6
 801387e:	bd70      	pop	{r4, r5, r6, pc}
 8013880:	1c01      	adds	r1, r0, #0
 8013882:	f7fd f935 	bl	8010af0 <__aeabi_fmul>
 8013886:	1c21      	adds	r1, r4, #0
 8013888:	f7fc fe86 	bl	8010598 <__aeabi_fadd>
 801388c:	e7f7      	b.n	801387e <__ieee754_sqrtf+0x86>
 801388e:	1c01      	adds	r1, r0, #0
 8013890:	f7fd fa60 	bl	8010d54 <__aeabi_fsub>
 8013894:	1c01      	adds	r1, r0, #0
 8013896:	f7fd f819 	bl	80108cc <__aeabi_fdiv>
 801389a:	e7f0      	b.n	801387e <__ieee754_sqrtf+0x86>
 801389c:	2301      	movs	r3, #1
 801389e:	425b      	negs	r3, r3
 80138a0:	e7c5      	b.n	801382e <__ieee754_sqrtf+0x36>
 80138a2:	46c0      	nop			; (mov r8, r8)
 80138a4:	7f7fffff 	.word	0x7f7fffff
 80138a8:	007fffff 	.word	0x007fffff

080138ac <__errno>:
 80138ac:	4b01      	ldr	r3, [pc, #4]	; (80138b4 <__errno+0x8>)
 80138ae:	6818      	ldr	r0, [r3, #0]
 80138b0:	4770      	bx	lr
 80138b2:	46c0      	nop			; (mov r8, r8)
 80138b4:	20000008 	.word	0x20000008

080138b8 <__sflush_r>:
 80138b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138ba:	898a      	ldrh	r2, [r1, #12]
 80138bc:	0005      	movs	r5, r0
 80138be:	000c      	movs	r4, r1
 80138c0:	0713      	lsls	r3, r2, #28
 80138c2:	d460      	bmi.n	8013986 <__sflush_r+0xce>
 80138c4:	684b      	ldr	r3, [r1, #4]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	dc04      	bgt.n	80138d4 <__sflush_r+0x1c>
 80138ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	dc01      	bgt.n	80138d4 <__sflush_r+0x1c>
 80138d0:	2000      	movs	r0, #0
 80138d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80138d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80138d6:	2f00      	cmp	r7, #0
 80138d8:	d0fa      	beq.n	80138d0 <__sflush_r+0x18>
 80138da:	2300      	movs	r3, #0
 80138dc:	682e      	ldr	r6, [r5, #0]
 80138de:	602b      	str	r3, [r5, #0]
 80138e0:	2380      	movs	r3, #128	; 0x80
 80138e2:	015b      	lsls	r3, r3, #5
 80138e4:	6a21      	ldr	r1, [r4, #32]
 80138e6:	401a      	ands	r2, r3
 80138e8:	d034      	beq.n	8013954 <__sflush_r+0x9c>
 80138ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80138ec:	89a3      	ldrh	r3, [r4, #12]
 80138ee:	075b      	lsls	r3, r3, #29
 80138f0:	d506      	bpl.n	8013900 <__sflush_r+0x48>
 80138f2:	6863      	ldr	r3, [r4, #4]
 80138f4:	1ac0      	subs	r0, r0, r3
 80138f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d001      	beq.n	8013900 <__sflush_r+0x48>
 80138fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80138fe:	1ac0      	subs	r0, r0, r3
 8013900:	0002      	movs	r2, r0
 8013902:	6a21      	ldr	r1, [r4, #32]
 8013904:	2300      	movs	r3, #0
 8013906:	0028      	movs	r0, r5
 8013908:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801390a:	47b8      	blx	r7
 801390c:	89a1      	ldrh	r1, [r4, #12]
 801390e:	1c43      	adds	r3, r0, #1
 8013910:	d106      	bne.n	8013920 <__sflush_r+0x68>
 8013912:	682b      	ldr	r3, [r5, #0]
 8013914:	2b1d      	cmp	r3, #29
 8013916:	d830      	bhi.n	801397a <__sflush_r+0xc2>
 8013918:	4a2b      	ldr	r2, [pc, #172]	; (80139c8 <__sflush_r+0x110>)
 801391a:	40da      	lsrs	r2, r3
 801391c:	07d3      	lsls	r3, r2, #31
 801391e:	d52c      	bpl.n	801397a <__sflush_r+0xc2>
 8013920:	2300      	movs	r3, #0
 8013922:	6063      	str	r3, [r4, #4]
 8013924:	6923      	ldr	r3, [r4, #16]
 8013926:	6023      	str	r3, [r4, #0]
 8013928:	04cb      	lsls	r3, r1, #19
 801392a:	d505      	bpl.n	8013938 <__sflush_r+0x80>
 801392c:	1c43      	adds	r3, r0, #1
 801392e:	d102      	bne.n	8013936 <__sflush_r+0x7e>
 8013930:	682b      	ldr	r3, [r5, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d100      	bne.n	8013938 <__sflush_r+0x80>
 8013936:	6560      	str	r0, [r4, #84]	; 0x54
 8013938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801393a:	602e      	str	r6, [r5, #0]
 801393c:	2900      	cmp	r1, #0
 801393e:	d0c7      	beq.n	80138d0 <__sflush_r+0x18>
 8013940:	0023      	movs	r3, r4
 8013942:	3344      	adds	r3, #68	; 0x44
 8013944:	4299      	cmp	r1, r3
 8013946:	d002      	beq.n	801394e <__sflush_r+0x96>
 8013948:	0028      	movs	r0, r5
 801394a:	f000 f981 	bl	8013c50 <_free_r>
 801394e:	2000      	movs	r0, #0
 8013950:	6360      	str	r0, [r4, #52]	; 0x34
 8013952:	e7be      	b.n	80138d2 <__sflush_r+0x1a>
 8013954:	2301      	movs	r3, #1
 8013956:	0028      	movs	r0, r5
 8013958:	47b8      	blx	r7
 801395a:	1c43      	adds	r3, r0, #1
 801395c:	d1c6      	bne.n	80138ec <__sflush_r+0x34>
 801395e:	682b      	ldr	r3, [r5, #0]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d0c3      	beq.n	80138ec <__sflush_r+0x34>
 8013964:	2b1d      	cmp	r3, #29
 8013966:	d001      	beq.n	801396c <__sflush_r+0xb4>
 8013968:	2b16      	cmp	r3, #22
 801396a:	d101      	bne.n	8013970 <__sflush_r+0xb8>
 801396c:	602e      	str	r6, [r5, #0]
 801396e:	e7af      	b.n	80138d0 <__sflush_r+0x18>
 8013970:	2340      	movs	r3, #64	; 0x40
 8013972:	89a2      	ldrh	r2, [r4, #12]
 8013974:	4313      	orrs	r3, r2
 8013976:	81a3      	strh	r3, [r4, #12]
 8013978:	e7ab      	b.n	80138d2 <__sflush_r+0x1a>
 801397a:	2340      	movs	r3, #64	; 0x40
 801397c:	430b      	orrs	r3, r1
 801397e:	2001      	movs	r0, #1
 8013980:	81a3      	strh	r3, [r4, #12]
 8013982:	4240      	negs	r0, r0
 8013984:	e7a5      	b.n	80138d2 <__sflush_r+0x1a>
 8013986:	690f      	ldr	r7, [r1, #16]
 8013988:	2f00      	cmp	r7, #0
 801398a:	d0a1      	beq.n	80138d0 <__sflush_r+0x18>
 801398c:	680b      	ldr	r3, [r1, #0]
 801398e:	600f      	str	r7, [r1, #0]
 8013990:	1bdb      	subs	r3, r3, r7
 8013992:	9301      	str	r3, [sp, #4]
 8013994:	2300      	movs	r3, #0
 8013996:	0792      	lsls	r2, r2, #30
 8013998:	d100      	bne.n	801399c <__sflush_r+0xe4>
 801399a:	694b      	ldr	r3, [r1, #20]
 801399c:	60a3      	str	r3, [r4, #8]
 801399e:	9b01      	ldr	r3, [sp, #4]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	dc00      	bgt.n	80139a6 <__sflush_r+0xee>
 80139a4:	e794      	b.n	80138d0 <__sflush_r+0x18>
 80139a6:	9b01      	ldr	r3, [sp, #4]
 80139a8:	003a      	movs	r2, r7
 80139aa:	6a21      	ldr	r1, [r4, #32]
 80139ac:	0028      	movs	r0, r5
 80139ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80139b0:	47b0      	blx	r6
 80139b2:	2800      	cmp	r0, #0
 80139b4:	dc03      	bgt.n	80139be <__sflush_r+0x106>
 80139b6:	2340      	movs	r3, #64	; 0x40
 80139b8:	89a2      	ldrh	r2, [r4, #12]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	e7df      	b.n	801397e <__sflush_r+0xc6>
 80139be:	9b01      	ldr	r3, [sp, #4]
 80139c0:	183f      	adds	r7, r7, r0
 80139c2:	1a1b      	subs	r3, r3, r0
 80139c4:	9301      	str	r3, [sp, #4]
 80139c6:	e7ea      	b.n	801399e <__sflush_r+0xe6>
 80139c8:	20400001 	.word	0x20400001

080139cc <_fflush_r>:
 80139cc:	690b      	ldr	r3, [r1, #16]
 80139ce:	b570      	push	{r4, r5, r6, lr}
 80139d0:	0005      	movs	r5, r0
 80139d2:	000c      	movs	r4, r1
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d101      	bne.n	80139dc <_fflush_r+0x10>
 80139d8:	2000      	movs	r0, #0
 80139da:	bd70      	pop	{r4, r5, r6, pc}
 80139dc:	2800      	cmp	r0, #0
 80139de:	d004      	beq.n	80139ea <_fflush_r+0x1e>
 80139e0:	6983      	ldr	r3, [r0, #24]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d101      	bne.n	80139ea <_fflush_r+0x1e>
 80139e6:	f000 f873 	bl	8013ad0 <__sinit>
 80139ea:	4b0b      	ldr	r3, [pc, #44]	; (8013a18 <_fflush_r+0x4c>)
 80139ec:	429c      	cmp	r4, r3
 80139ee:	d109      	bne.n	8013a04 <_fflush_r+0x38>
 80139f0:	686c      	ldr	r4, [r5, #4]
 80139f2:	220c      	movs	r2, #12
 80139f4:	5ea3      	ldrsh	r3, [r4, r2]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d0ee      	beq.n	80139d8 <_fflush_r+0xc>
 80139fa:	0021      	movs	r1, r4
 80139fc:	0028      	movs	r0, r5
 80139fe:	f7ff ff5b 	bl	80138b8 <__sflush_r>
 8013a02:	e7ea      	b.n	80139da <_fflush_r+0xe>
 8013a04:	4b05      	ldr	r3, [pc, #20]	; (8013a1c <_fflush_r+0x50>)
 8013a06:	429c      	cmp	r4, r3
 8013a08:	d101      	bne.n	8013a0e <_fflush_r+0x42>
 8013a0a:	68ac      	ldr	r4, [r5, #8]
 8013a0c:	e7f1      	b.n	80139f2 <_fflush_r+0x26>
 8013a0e:	4b04      	ldr	r3, [pc, #16]	; (8013a20 <_fflush_r+0x54>)
 8013a10:	429c      	cmp	r4, r3
 8013a12:	d1ee      	bne.n	80139f2 <_fflush_r+0x26>
 8013a14:	68ec      	ldr	r4, [r5, #12]
 8013a16:	e7ec      	b.n	80139f2 <_fflush_r+0x26>
 8013a18:	0801f3fc 	.word	0x0801f3fc
 8013a1c:	0801f41c 	.word	0x0801f41c
 8013a20:	0801f3dc 	.word	0x0801f3dc

08013a24 <fflush>:
 8013a24:	b510      	push	{r4, lr}
 8013a26:	1e01      	subs	r1, r0, #0
 8013a28:	d105      	bne.n	8013a36 <fflush+0x12>
 8013a2a:	4b05      	ldr	r3, [pc, #20]	; (8013a40 <fflush+0x1c>)
 8013a2c:	4905      	ldr	r1, [pc, #20]	; (8013a44 <fflush+0x20>)
 8013a2e:	6818      	ldr	r0, [r3, #0]
 8013a30:	f000 f8c0 	bl	8013bb4 <_fwalk_reent>
 8013a34:	bd10      	pop	{r4, pc}
 8013a36:	4b04      	ldr	r3, [pc, #16]	; (8013a48 <fflush+0x24>)
 8013a38:	6818      	ldr	r0, [r3, #0]
 8013a3a:	f7ff ffc7 	bl	80139cc <_fflush_r>
 8013a3e:	e7f9      	b.n	8013a34 <fflush+0x10>
 8013a40:	0801f43c 	.word	0x0801f43c
 8013a44:	080139cd 	.word	0x080139cd
 8013a48:	20000008 	.word	0x20000008

08013a4c <std>:
 8013a4c:	2300      	movs	r3, #0
 8013a4e:	b510      	push	{r4, lr}
 8013a50:	0004      	movs	r4, r0
 8013a52:	6003      	str	r3, [r0, #0]
 8013a54:	6043      	str	r3, [r0, #4]
 8013a56:	6083      	str	r3, [r0, #8]
 8013a58:	8181      	strh	r1, [r0, #12]
 8013a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8013a5c:	81c2      	strh	r2, [r0, #14]
 8013a5e:	6103      	str	r3, [r0, #16]
 8013a60:	6143      	str	r3, [r0, #20]
 8013a62:	6183      	str	r3, [r0, #24]
 8013a64:	0019      	movs	r1, r3
 8013a66:	2208      	movs	r2, #8
 8013a68:	305c      	adds	r0, #92	; 0x5c
 8013a6a:	f000 f8e9 	bl	8013c40 <memset>
 8013a6e:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <std+0x38>)
 8013a70:	6224      	str	r4, [r4, #32]
 8013a72:	6263      	str	r3, [r4, #36]	; 0x24
 8013a74:	4b04      	ldr	r3, [pc, #16]	; (8013a88 <std+0x3c>)
 8013a76:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a78:	4b04      	ldr	r3, [pc, #16]	; (8013a8c <std+0x40>)
 8013a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a7c:	4b04      	ldr	r3, [pc, #16]	; (8013a90 <std+0x44>)
 8013a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8013a80:	bd10      	pop	{r4, pc}
 8013a82:	46c0      	nop			; (mov r8, r8)
 8013a84:	08013dc5 	.word	0x08013dc5
 8013a88:	08013ded 	.word	0x08013ded
 8013a8c:	08013e25 	.word	0x08013e25
 8013a90:	08013e51 	.word	0x08013e51

08013a94 <_cleanup_r>:
 8013a94:	b510      	push	{r4, lr}
 8013a96:	4902      	ldr	r1, [pc, #8]	; (8013aa0 <_cleanup_r+0xc>)
 8013a98:	f000 f88c 	bl	8013bb4 <_fwalk_reent>
 8013a9c:	bd10      	pop	{r4, pc}
 8013a9e:	46c0      	nop			; (mov r8, r8)
 8013aa0:	080139cd 	.word	0x080139cd

08013aa4 <__sfmoreglue>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	2568      	movs	r5, #104	; 0x68
 8013aa8:	1e4a      	subs	r2, r1, #1
 8013aaa:	4355      	muls	r5, r2
 8013aac:	000e      	movs	r6, r1
 8013aae:	0029      	movs	r1, r5
 8013ab0:	3174      	adds	r1, #116	; 0x74
 8013ab2:	f000 f917 	bl	8013ce4 <_malloc_r>
 8013ab6:	1e04      	subs	r4, r0, #0
 8013ab8:	d008      	beq.n	8013acc <__sfmoreglue+0x28>
 8013aba:	2100      	movs	r1, #0
 8013abc:	002a      	movs	r2, r5
 8013abe:	6001      	str	r1, [r0, #0]
 8013ac0:	6046      	str	r6, [r0, #4]
 8013ac2:	300c      	adds	r0, #12
 8013ac4:	60a0      	str	r0, [r4, #8]
 8013ac6:	3268      	adds	r2, #104	; 0x68
 8013ac8:	f000 f8ba 	bl	8013c40 <memset>
 8013acc:	0020      	movs	r0, r4
 8013ace:	bd70      	pop	{r4, r5, r6, pc}

08013ad0 <__sinit>:
 8013ad0:	6983      	ldr	r3, [r0, #24]
 8013ad2:	b513      	push	{r0, r1, r4, lr}
 8013ad4:	0004      	movs	r4, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d128      	bne.n	8013b2c <__sinit+0x5c>
 8013ada:	6483      	str	r3, [r0, #72]	; 0x48
 8013adc:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013ade:	6503      	str	r3, [r0, #80]	; 0x50
 8013ae0:	4b13      	ldr	r3, [pc, #76]	; (8013b30 <__sinit+0x60>)
 8013ae2:	4a14      	ldr	r2, [pc, #80]	; (8013b34 <__sinit+0x64>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	6282      	str	r2, [r0, #40]	; 0x28
 8013ae8:	9301      	str	r3, [sp, #4]
 8013aea:	4298      	cmp	r0, r3
 8013aec:	d101      	bne.n	8013af2 <__sinit+0x22>
 8013aee:	2301      	movs	r3, #1
 8013af0:	6183      	str	r3, [r0, #24]
 8013af2:	0020      	movs	r0, r4
 8013af4:	f000 f820 	bl	8013b38 <__sfp>
 8013af8:	6060      	str	r0, [r4, #4]
 8013afa:	0020      	movs	r0, r4
 8013afc:	f000 f81c 	bl	8013b38 <__sfp>
 8013b00:	60a0      	str	r0, [r4, #8]
 8013b02:	0020      	movs	r0, r4
 8013b04:	f000 f818 	bl	8013b38 <__sfp>
 8013b08:	2200      	movs	r2, #0
 8013b0a:	60e0      	str	r0, [r4, #12]
 8013b0c:	2104      	movs	r1, #4
 8013b0e:	6860      	ldr	r0, [r4, #4]
 8013b10:	f7ff ff9c 	bl	8013a4c <std>
 8013b14:	2201      	movs	r2, #1
 8013b16:	2109      	movs	r1, #9
 8013b18:	68a0      	ldr	r0, [r4, #8]
 8013b1a:	f7ff ff97 	bl	8013a4c <std>
 8013b1e:	2202      	movs	r2, #2
 8013b20:	2112      	movs	r1, #18
 8013b22:	68e0      	ldr	r0, [r4, #12]
 8013b24:	f7ff ff92 	bl	8013a4c <std>
 8013b28:	2301      	movs	r3, #1
 8013b2a:	61a3      	str	r3, [r4, #24]
 8013b2c:	bd13      	pop	{r0, r1, r4, pc}
 8013b2e:	46c0      	nop			; (mov r8, r8)
 8013b30:	0801f43c 	.word	0x0801f43c
 8013b34:	08013a95 	.word	0x08013a95

08013b38 <__sfp>:
 8013b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3a:	4b1c      	ldr	r3, [pc, #112]	; (8013bac <__sfp+0x74>)
 8013b3c:	0007      	movs	r7, r0
 8013b3e:	681e      	ldr	r6, [r3, #0]
 8013b40:	69b3      	ldr	r3, [r6, #24]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d102      	bne.n	8013b4c <__sfp+0x14>
 8013b46:	0030      	movs	r0, r6
 8013b48:	f7ff ffc2 	bl	8013ad0 <__sinit>
 8013b4c:	3648      	adds	r6, #72	; 0x48
 8013b4e:	68b4      	ldr	r4, [r6, #8]
 8013b50:	6873      	ldr	r3, [r6, #4]
 8013b52:	3b01      	subs	r3, #1
 8013b54:	d504      	bpl.n	8013b60 <__sfp+0x28>
 8013b56:	6833      	ldr	r3, [r6, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d007      	beq.n	8013b6c <__sfp+0x34>
 8013b5c:	6836      	ldr	r6, [r6, #0]
 8013b5e:	e7f6      	b.n	8013b4e <__sfp+0x16>
 8013b60:	220c      	movs	r2, #12
 8013b62:	5ea5      	ldrsh	r5, [r4, r2]
 8013b64:	2d00      	cmp	r5, #0
 8013b66:	d00d      	beq.n	8013b84 <__sfp+0x4c>
 8013b68:	3468      	adds	r4, #104	; 0x68
 8013b6a:	e7f2      	b.n	8013b52 <__sfp+0x1a>
 8013b6c:	2104      	movs	r1, #4
 8013b6e:	0038      	movs	r0, r7
 8013b70:	f7ff ff98 	bl	8013aa4 <__sfmoreglue>
 8013b74:	6030      	str	r0, [r6, #0]
 8013b76:	2800      	cmp	r0, #0
 8013b78:	d1f0      	bne.n	8013b5c <__sfp+0x24>
 8013b7a:	230c      	movs	r3, #12
 8013b7c:	0004      	movs	r4, r0
 8013b7e:	603b      	str	r3, [r7, #0]
 8013b80:	0020      	movs	r0, r4
 8013b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b84:	0020      	movs	r0, r4
 8013b86:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <__sfp+0x78>)
 8013b88:	6665      	str	r5, [r4, #100]	; 0x64
 8013b8a:	6025      	str	r5, [r4, #0]
 8013b8c:	6065      	str	r5, [r4, #4]
 8013b8e:	60a5      	str	r5, [r4, #8]
 8013b90:	60e3      	str	r3, [r4, #12]
 8013b92:	6125      	str	r5, [r4, #16]
 8013b94:	6165      	str	r5, [r4, #20]
 8013b96:	61a5      	str	r5, [r4, #24]
 8013b98:	2208      	movs	r2, #8
 8013b9a:	0029      	movs	r1, r5
 8013b9c:	305c      	adds	r0, #92	; 0x5c
 8013b9e:	f000 f84f 	bl	8013c40 <memset>
 8013ba2:	6365      	str	r5, [r4, #52]	; 0x34
 8013ba4:	63a5      	str	r5, [r4, #56]	; 0x38
 8013ba6:	64a5      	str	r5, [r4, #72]	; 0x48
 8013ba8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013baa:	e7e9      	b.n	8013b80 <__sfp+0x48>
 8013bac:	0801f43c 	.word	0x0801f43c
 8013bb0:	ffff0001 	.word	0xffff0001

08013bb4 <_fwalk_reent>:
 8013bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bb6:	0004      	movs	r4, r0
 8013bb8:	0007      	movs	r7, r0
 8013bba:	2600      	movs	r6, #0
 8013bbc:	9101      	str	r1, [sp, #4]
 8013bbe:	3448      	adds	r4, #72	; 0x48
 8013bc0:	2c00      	cmp	r4, #0
 8013bc2:	d101      	bne.n	8013bc8 <_fwalk_reent+0x14>
 8013bc4:	0030      	movs	r0, r6
 8013bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013bc8:	6863      	ldr	r3, [r4, #4]
 8013bca:	68a5      	ldr	r5, [r4, #8]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	9b00      	ldr	r3, [sp, #0]
 8013bd0:	3b01      	subs	r3, #1
 8013bd2:	9300      	str	r3, [sp, #0]
 8013bd4:	d501      	bpl.n	8013bda <_fwalk_reent+0x26>
 8013bd6:	6824      	ldr	r4, [r4, #0]
 8013bd8:	e7f2      	b.n	8013bc0 <_fwalk_reent+0xc>
 8013bda:	89ab      	ldrh	r3, [r5, #12]
 8013bdc:	2b01      	cmp	r3, #1
 8013bde:	d908      	bls.n	8013bf2 <_fwalk_reent+0x3e>
 8013be0:	220e      	movs	r2, #14
 8013be2:	5eab      	ldrsh	r3, [r5, r2]
 8013be4:	3301      	adds	r3, #1
 8013be6:	d004      	beq.n	8013bf2 <_fwalk_reent+0x3e>
 8013be8:	0029      	movs	r1, r5
 8013bea:	0038      	movs	r0, r7
 8013bec:	9b01      	ldr	r3, [sp, #4]
 8013bee:	4798      	blx	r3
 8013bf0:	4306      	orrs	r6, r0
 8013bf2:	3568      	adds	r5, #104	; 0x68
 8013bf4:	e7eb      	b.n	8013bce <_fwalk_reent+0x1a>
	...

08013bf8 <__libc_init_array>:
 8013bf8:	b570      	push	{r4, r5, r6, lr}
 8013bfa:	2600      	movs	r6, #0
 8013bfc:	4d0c      	ldr	r5, [pc, #48]	; (8013c30 <__libc_init_array+0x38>)
 8013bfe:	4c0d      	ldr	r4, [pc, #52]	; (8013c34 <__libc_init_array+0x3c>)
 8013c00:	1b64      	subs	r4, r4, r5
 8013c02:	10a4      	asrs	r4, r4, #2
 8013c04:	42a6      	cmp	r6, r4
 8013c06:	d109      	bne.n	8013c1c <__libc_init_array+0x24>
 8013c08:	2600      	movs	r6, #0
 8013c0a:	f002 fd53 	bl	80166b4 <_init>
 8013c0e:	4d0a      	ldr	r5, [pc, #40]	; (8013c38 <__libc_init_array+0x40>)
 8013c10:	4c0a      	ldr	r4, [pc, #40]	; (8013c3c <__libc_init_array+0x44>)
 8013c12:	1b64      	subs	r4, r4, r5
 8013c14:	10a4      	asrs	r4, r4, #2
 8013c16:	42a6      	cmp	r6, r4
 8013c18:	d105      	bne.n	8013c26 <__libc_init_array+0x2e>
 8013c1a:	bd70      	pop	{r4, r5, r6, pc}
 8013c1c:	00b3      	lsls	r3, r6, #2
 8013c1e:	58eb      	ldr	r3, [r5, r3]
 8013c20:	4798      	blx	r3
 8013c22:	3601      	adds	r6, #1
 8013c24:	e7ee      	b.n	8013c04 <__libc_init_array+0xc>
 8013c26:	00b3      	lsls	r3, r6, #2
 8013c28:	58eb      	ldr	r3, [r5, r3]
 8013c2a:	4798      	blx	r3
 8013c2c:	3601      	adds	r6, #1
 8013c2e:	e7f2      	b.n	8013c16 <__libc_init_array+0x1e>
 8013c30:	0801f830 	.word	0x0801f830
 8013c34:	0801f830 	.word	0x0801f830
 8013c38:	0801f830 	.word	0x0801f830
 8013c3c:	0801f834 	.word	0x0801f834

08013c40 <memset>:
 8013c40:	0003      	movs	r3, r0
 8013c42:	1812      	adds	r2, r2, r0
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d100      	bne.n	8013c4a <memset+0xa>
 8013c48:	4770      	bx	lr
 8013c4a:	7019      	strb	r1, [r3, #0]
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	e7f9      	b.n	8013c44 <memset+0x4>

08013c50 <_free_r>:
 8013c50:	b570      	push	{r4, r5, r6, lr}
 8013c52:	0005      	movs	r5, r0
 8013c54:	2900      	cmp	r1, #0
 8013c56:	d010      	beq.n	8013c7a <_free_r+0x2a>
 8013c58:	1f0c      	subs	r4, r1, #4
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	da00      	bge.n	8013c62 <_free_r+0x12>
 8013c60:	18e4      	adds	r4, r4, r3
 8013c62:	0028      	movs	r0, r5
 8013c64:	f000 f934 	bl	8013ed0 <__malloc_lock>
 8013c68:	4a1d      	ldr	r2, [pc, #116]	; (8013ce0 <_free_r+0x90>)
 8013c6a:	6813      	ldr	r3, [r2, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d105      	bne.n	8013c7c <_free_r+0x2c>
 8013c70:	6063      	str	r3, [r4, #4]
 8013c72:	6014      	str	r4, [r2, #0]
 8013c74:	0028      	movs	r0, r5
 8013c76:	f000 f92c 	bl	8013ed2 <__malloc_unlock>
 8013c7a:	bd70      	pop	{r4, r5, r6, pc}
 8013c7c:	42a3      	cmp	r3, r4
 8013c7e:	d909      	bls.n	8013c94 <_free_r+0x44>
 8013c80:	6821      	ldr	r1, [r4, #0]
 8013c82:	1860      	adds	r0, r4, r1
 8013c84:	4283      	cmp	r3, r0
 8013c86:	d1f3      	bne.n	8013c70 <_free_r+0x20>
 8013c88:	6818      	ldr	r0, [r3, #0]
 8013c8a:	685b      	ldr	r3, [r3, #4]
 8013c8c:	1841      	adds	r1, r0, r1
 8013c8e:	6021      	str	r1, [r4, #0]
 8013c90:	e7ee      	b.n	8013c70 <_free_r+0x20>
 8013c92:	0013      	movs	r3, r2
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	2a00      	cmp	r2, #0
 8013c98:	d001      	beq.n	8013c9e <_free_r+0x4e>
 8013c9a:	42a2      	cmp	r2, r4
 8013c9c:	d9f9      	bls.n	8013c92 <_free_r+0x42>
 8013c9e:	6819      	ldr	r1, [r3, #0]
 8013ca0:	1858      	adds	r0, r3, r1
 8013ca2:	42a0      	cmp	r0, r4
 8013ca4:	d10b      	bne.n	8013cbe <_free_r+0x6e>
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	1809      	adds	r1, r1, r0
 8013caa:	1858      	adds	r0, r3, r1
 8013cac:	6019      	str	r1, [r3, #0]
 8013cae:	4282      	cmp	r2, r0
 8013cb0:	d1e0      	bne.n	8013c74 <_free_r+0x24>
 8013cb2:	6810      	ldr	r0, [r2, #0]
 8013cb4:	6852      	ldr	r2, [r2, #4]
 8013cb6:	1841      	adds	r1, r0, r1
 8013cb8:	6019      	str	r1, [r3, #0]
 8013cba:	605a      	str	r2, [r3, #4]
 8013cbc:	e7da      	b.n	8013c74 <_free_r+0x24>
 8013cbe:	42a0      	cmp	r0, r4
 8013cc0:	d902      	bls.n	8013cc8 <_free_r+0x78>
 8013cc2:	230c      	movs	r3, #12
 8013cc4:	602b      	str	r3, [r5, #0]
 8013cc6:	e7d5      	b.n	8013c74 <_free_r+0x24>
 8013cc8:	6821      	ldr	r1, [r4, #0]
 8013cca:	1860      	adds	r0, r4, r1
 8013ccc:	4282      	cmp	r2, r0
 8013cce:	d103      	bne.n	8013cd8 <_free_r+0x88>
 8013cd0:	6810      	ldr	r0, [r2, #0]
 8013cd2:	6852      	ldr	r2, [r2, #4]
 8013cd4:	1841      	adds	r1, r0, r1
 8013cd6:	6021      	str	r1, [r4, #0]
 8013cd8:	6062      	str	r2, [r4, #4]
 8013cda:	605c      	str	r4, [r3, #4]
 8013cdc:	e7ca      	b.n	8013c74 <_free_r+0x24>
 8013cde:	46c0      	nop			; (mov r8, r8)
 8013ce0:	20000630 	.word	0x20000630

08013ce4 <_malloc_r>:
 8013ce4:	2303      	movs	r3, #3
 8013ce6:	b570      	push	{r4, r5, r6, lr}
 8013ce8:	1ccd      	adds	r5, r1, #3
 8013cea:	439d      	bics	r5, r3
 8013cec:	3508      	adds	r5, #8
 8013cee:	0006      	movs	r6, r0
 8013cf0:	2d0c      	cmp	r5, #12
 8013cf2:	d21e      	bcs.n	8013d32 <_malloc_r+0x4e>
 8013cf4:	250c      	movs	r5, #12
 8013cf6:	42a9      	cmp	r1, r5
 8013cf8:	d81d      	bhi.n	8013d36 <_malloc_r+0x52>
 8013cfa:	0030      	movs	r0, r6
 8013cfc:	f000 f8e8 	bl	8013ed0 <__malloc_lock>
 8013d00:	4a25      	ldr	r2, [pc, #148]	; (8013d98 <_malloc_r+0xb4>)
 8013d02:	6814      	ldr	r4, [r2, #0]
 8013d04:	0021      	movs	r1, r4
 8013d06:	2900      	cmp	r1, #0
 8013d08:	d119      	bne.n	8013d3e <_malloc_r+0x5a>
 8013d0a:	4c24      	ldr	r4, [pc, #144]	; (8013d9c <_malloc_r+0xb8>)
 8013d0c:	6823      	ldr	r3, [r4, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d103      	bne.n	8013d1a <_malloc_r+0x36>
 8013d12:	0030      	movs	r0, r6
 8013d14:	f000 f844 	bl	8013da0 <_sbrk_r>
 8013d18:	6020      	str	r0, [r4, #0]
 8013d1a:	0029      	movs	r1, r5
 8013d1c:	0030      	movs	r0, r6
 8013d1e:	f000 f83f 	bl	8013da0 <_sbrk_r>
 8013d22:	1c43      	adds	r3, r0, #1
 8013d24:	d12b      	bne.n	8013d7e <_malloc_r+0x9a>
 8013d26:	230c      	movs	r3, #12
 8013d28:	0030      	movs	r0, r6
 8013d2a:	6033      	str	r3, [r6, #0]
 8013d2c:	f000 f8d1 	bl	8013ed2 <__malloc_unlock>
 8013d30:	e003      	b.n	8013d3a <_malloc_r+0x56>
 8013d32:	2d00      	cmp	r5, #0
 8013d34:	dadf      	bge.n	8013cf6 <_malloc_r+0x12>
 8013d36:	230c      	movs	r3, #12
 8013d38:	6033      	str	r3, [r6, #0]
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	680b      	ldr	r3, [r1, #0]
 8013d40:	1b5b      	subs	r3, r3, r5
 8013d42:	d419      	bmi.n	8013d78 <_malloc_r+0x94>
 8013d44:	2b0b      	cmp	r3, #11
 8013d46:	d903      	bls.n	8013d50 <_malloc_r+0x6c>
 8013d48:	600b      	str	r3, [r1, #0]
 8013d4a:	18cc      	adds	r4, r1, r3
 8013d4c:	6025      	str	r5, [r4, #0]
 8013d4e:	e003      	b.n	8013d58 <_malloc_r+0x74>
 8013d50:	684b      	ldr	r3, [r1, #4]
 8013d52:	428c      	cmp	r4, r1
 8013d54:	d10d      	bne.n	8013d72 <_malloc_r+0x8e>
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	0030      	movs	r0, r6
 8013d5a:	f000 f8ba 	bl	8013ed2 <__malloc_unlock>
 8013d5e:	0020      	movs	r0, r4
 8013d60:	2207      	movs	r2, #7
 8013d62:	300b      	adds	r0, #11
 8013d64:	1d23      	adds	r3, r4, #4
 8013d66:	4390      	bics	r0, r2
 8013d68:	1ac3      	subs	r3, r0, r3
 8013d6a:	d0e7      	beq.n	8013d3c <_malloc_r+0x58>
 8013d6c:	425a      	negs	r2, r3
 8013d6e:	50e2      	str	r2, [r4, r3]
 8013d70:	e7e4      	b.n	8013d3c <_malloc_r+0x58>
 8013d72:	6063      	str	r3, [r4, #4]
 8013d74:	000c      	movs	r4, r1
 8013d76:	e7ef      	b.n	8013d58 <_malloc_r+0x74>
 8013d78:	000c      	movs	r4, r1
 8013d7a:	6849      	ldr	r1, [r1, #4]
 8013d7c:	e7c3      	b.n	8013d06 <_malloc_r+0x22>
 8013d7e:	2303      	movs	r3, #3
 8013d80:	1cc4      	adds	r4, r0, #3
 8013d82:	439c      	bics	r4, r3
 8013d84:	42a0      	cmp	r0, r4
 8013d86:	d0e1      	beq.n	8013d4c <_malloc_r+0x68>
 8013d88:	1a21      	subs	r1, r4, r0
 8013d8a:	0030      	movs	r0, r6
 8013d8c:	f000 f808 	bl	8013da0 <_sbrk_r>
 8013d90:	1c43      	adds	r3, r0, #1
 8013d92:	d1db      	bne.n	8013d4c <_malloc_r+0x68>
 8013d94:	e7c7      	b.n	8013d26 <_malloc_r+0x42>
 8013d96:	46c0      	nop			; (mov r8, r8)
 8013d98:	20000630 	.word	0x20000630
 8013d9c:	20000634 	.word	0x20000634

08013da0 <_sbrk_r>:
 8013da0:	2300      	movs	r3, #0
 8013da2:	b570      	push	{r4, r5, r6, lr}
 8013da4:	4c06      	ldr	r4, [pc, #24]	; (8013dc0 <_sbrk_r+0x20>)
 8013da6:	0005      	movs	r5, r0
 8013da8:	0008      	movs	r0, r1
 8013daa:	6023      	str	r3, [r4, #0]
 8013dac:	f7ff fd00 	bl	80137b0 <_sbrk>
 8013db0:	1c43      	adds	r3, r0, #1
 8013db2:	d103      	bne.n	8013dbc <_sbrk_r+0x1c>
 8013db4:	6823      	ldr	r3, [r4, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d000      	beq.n	8013dbc <_sbrk_r+0x1c>
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	bd70      	pop	{r4, r5, r6, pc}
 8013dbe:	46c0      	nop			; (mov r8, r8)
 8013dc0:	200006c4 	.word	0x200006c4

08013dc4 <__sread>:
 8013dc4:	b570      	push	{r4, r5, r6, lr}
 8013dc6:	000c      	movs	r4, r1
 8013dc8:	250e      	movs	r5, #14
 8013dca:	5f49      	ldrsh	r1, [r1, r5]
 8013dcc:	f000 f882 	bl	8013ed4 <_read_r>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	db03      	blt.n	8013ddc <__sread+0x18>
 8013dd4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013dd6:	181b      	adds	r3, r3, r0
 8013dd8:	6563      	str	r3, [r4, #84]	; 0x54
 8013dda:	bd70      	pop	{r4, r5, r6, pc}
 8013ddc:	89a3      	ldrh	r3, [r4, #12]
 8013dde:	4a02      	ldr	r2, [pc, #8]	; (8013de8 <__sread+0x24>)
 8013de0:	4013      	ands	r3, r2
 8013de2:	81a3      	strh	r3, [r4, #12]
 8013de4:	e7f9      	b.n	8013dda <__sread+0x16>
 8013de6:	46c0      	nop			; (mov r8, r8)
 8013de8:	ffffefff 	.word	0xffffefff

08013dec <__swrite>:
 8013dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dee:	001f      	movs	r7, r3
 8013df0:	898b      	ldrh	r3, [r1, #12]
 8013df2:	0005      	movs	r5, r0
 8013df4:	000c      	movs	r4, r1
 8013df6:	0016      	movs	r6, r2
 8013df8:	05db      	lsls	r3, r3, #23
 8013dfa:	d505      	bpl.n	8013e08 <__swrite+0x1c>
 8013dfc:	230e      	movs	r3, #14
 8013dfe:	5ec9      	ldrsh	r1, [r1, r3]
 8013e00:	2200      	movs	r2, #0
 8013e02:	2302      	movs	r3, #2
 8013e04:	f000 f850 	bl	8013ea8 <_lseek_r>
 8013e08:	89a3      	ldrh	r3, [r4, #12]
 8013e0a:	4a05      	ldr	r2, [pc, #20]	; (8013e20 <__swrite+0x34>)
 8013e0c:	0028      	movs	r0, r5
 8013e0e:	4013      	ands	r3, r2
 8013e10:	81a3      	strh	r3, [r4, #12]
 8013e12:	0032      	movs	r2, r6
 8013e14:	230e      	movs	r3, #14
 8013e16:	5ee1      	ldrsh	r1, [r4, r3]
 8013e18:	003b      	movs	r3, r7
 8013e1a:	f000 f81f 	bl	8013e5c <_write_r>
 8013e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e20:	ffffefff 	.word	0xffffefff

08013e24 <__sseek>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	000c      	movs	r4, r1
 8013e28:	250e      	movs	r5, #14
 8013e2a:	5f49      	ldrsh	r1, [r1, r5]
 8013e2c:	f000 f83c 	bl	8013ea8 <_lseek_r>
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	1c42      	adds	r2, r0, #1
 8013e34:	d103      	bne.n	8013e3e <__sseek+0x1a>
 8013e36:	4a05      	ldr	r2, [pc, #20]	; (8013e4c <__sseek+0x28>)
 8013e38:	4013      	ands	r3, r2
 8013e3a:	81a3      	strh	r3, [r4, #12]
 8013e3c:	bd70      	pop	{r4, r5, r6, pc}
 8013e3e:	2280      	movs	r2, #128	; 0x80
 8013e40:	0152      	lsls	r2, r2, #5
 8013e42:	4313      	orrs	r3, r2
 8013e44:	81a3      	strh	r3, [r4, #12]
 8013e46:	6560      	str	r0, [r4, #84]	; 0x54
 8013e48:	e7f8      	b.n	8013e3c <__sseek+0x18>
 8013e4a:	46c0      	nop			; (mov r8, r8)
 8013e4c:	ffffefff 	.word	0xffffefff

08013e50 <__sclose>:
 8013e50:	b510      	push	{r4, lr}
 8013e52:	230e      	movs	r3, #14
 8013e54:	5ec9      	ldrsh	r1, [r1, r3]
 8013e56:	f000 f815 	bl	8013e84 <_close_r>
 8013e5a:	bd10      	pop	{r4, pc}

08013e5c <_write_r>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	0005      	movs	r5, r0
 8013e60:	0008      	movs	r0, r1
 8013e62:	0011      	movs	r1, r2
 8013e64:	2200      	movs	r2, #0
 8013e66:	4c06      	ldr	r4, [pc, #24]	; (8013e80 <_write_r+0x24>)
 8013e68:	6022      	str	r2, [r4, #0]
 8013e6a:	001a      	movs	r2, r3
 8013e6c:	f7ff fc68 	bl	8013740 <_write>
 8013e70:	1c43      	adds	r3, r0, #1
 8013e72:	d103      	bne.n	8013e7c <_write_r+0x20>
 8013e74:	6823      	ldr	r3, [r4, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d000      	beq.n	8013e7c <_write_r+0x20>
 8013e7a:	602b      	str	r3, [r5, #0]
 8013e7c:	bd70      	pop	{r4, r5, r6, pc}
 8013e7e:	46c0      	nop			; (mov r8, r8)
 8013e80:	200006c4 	.word	0x200006c4

08013e84 <_close_r>:
 8013e84:	2300      	movs	r3, #0
 8013e86:	b570      	push	{r4, r5, r6, lr}
 8013e88:	4c06      	ldr	r4, [pc, #24]	; (8013ea4 <_close_r+0x20>)
 8013e8a:	0005      	movs	r5, r0
 8013e8c:	0008      	movs	r0, r1
 8013e8e:	6023      	str	r3, [r4, #0]
 8013e90:	f000 f834 	bl	8013efc <_close>
 8013e94:	1c43      	adds	r3, r0, #1
 8013e96:	d103      	bne.n	8013ea0 <_close_r+0x1c>
 8013e98:	6823      	ldr	r3, [r4, #0]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d000      	beq.n	8013ea0 <_close_r+0x1c>
 8013e9e:	602b      	str	r3, [r5, #0]
 8013ea0:	bd70      	pop	{r4, r5, r6, pc}
 8013ea2:	46c0      	nop			; (mov r8, r8)
 8013ea4:	200006c4 	.word	0x200006c4

08013ea8 <_lseek_r>:
 8013ea8:	b570      	push	{r4, r5, r6, lr}
 8013eaa:	0005      	movs	r5, r0
 8013eac:	0008      	movs	r0, r1
 8013eae:	0011      	movs	r1, r2
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	4c06      	ldr	r4, [pc, #24]	; (8013ecc <_lseek_r+0x24>)
 8013eb4:	6022      	str	r2, [r4, #0]
 8013eb6:	001a      	movs	r2, r3
 8013eb8:	f000 f828 	bl	8013f0c <_lseek>
 8013ebc:	1c43      	adds	r3, r0, #1
 8013ebe:	d103      	bne.n	8013ec8 <_lseek_r+0x20>
 8013ec0:	6823      	ldr	r3, [r4, #0]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d000      	beq.n	8013ec8 <_lseek_r+0x20>
 8013ec6:	602b      	str	r3, [r5, #0]
 8013ec8:	bd70      	pop	{r4, r5, r6, pc}
 8013eca:	46c0      	nop			; (mov r8, r8)
 8013ecc:	200006c4 	.word	0x200006c4

08013ed0 <__malloc_lock>:
 8013ed0:	4770      	bx	lr

08013ed2 <__malloc_unlock>:
 8013ed2:	4770      	bx	lr

08013ed4 <_read_r>:
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	0005      	movs	r5, r0
 8013ed8:	0008      	movs	r0, r1
 8013eda:	0011      	movs	r1, r2
 8013edc:	2200      	movs	r2, #0
 8013ede:	4c06      	ldr	r4, [pc, #24]	; (8013ef8 <_read_r+0x24>)
 8013ee0:	6022      	str	r2, [r4, #0]
 8013ee2:	001a      	movs	r2, r3
 8013ee4:	f000 f81a 	bl	8013f1c <_read>
 8013ee8:	1c43      	adds	r3, r0, #1
 8013eea:	d103      	bne.n	8013ef4 <_read_r+0x20>
 8013eec:	6823      	ldr	r3, [r4, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d000      	beq.n	8013ef4 <_read_r+0x20>
 8013ef2:	602b      	str	r3, [r5, #0]
 8013ef4:	bd70      	pop	{r4, r5, r6, pc}
 8013ef6:	46c0      	nop			; (mov r8, r8)
 8013ef8:	200006c4 	.word	0x200006c4

08013efc <_close>:
 8013efc:	2258      	movs	r2, #88	; 0x58
 8013efe:	2001      	movs	r0, #1
 8013f00:	4b01      	ldr	r3, [pc, #4]	; (8013f08 <_close+0xc>)
 8013f02:	4240      	negs	r0, r0
 8013f04:	601a      	str	r2, [r3, #0]
 8013f06:	4770      	bx	lr
 8013f08:	200006c4 	.word	0x200006c4

08013f0c <_lseek>:
 8013f0c:	2258      	movs	r2, #88	; 0x58
 8013f0e:	2001      	movs	r0, #1
 8013f10:	4b01      	ldr	r3, [pc, #4]	; (8013f18 <_lseek+0xc>)
 8013f12:	4240      	negs	r0, r0
 8013f14:	601a      	str	r2, [r3, #0]
 8013f16:	4770      	bx	lr
 8013f18:	200006c4 	.word	0x200006c4

08013f1c <_read>:
 8013f1c:	2258      	movs	r2, #88	; 0x58
 8013f1e:	2001      	movs	r0, #1
 8013f20:	4b01      	ldr	r3, [pc, #4]	; (8013f28 <_read+0xc>)
 8013f22:	4240      	negs	r0, r0
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	4770      	bx	lr
 8013f28:	200006c4 	.word	0x200006c4

08013f2c <cos>:
 8013f2c:	b530      	push	{r4, r5, lr}
 8013f2e:	4a20      	ldr	r2, [pc, #128]	; (8013fb0 <cos+0x84>)
 8013f30:	004b      	lsls	r3, r1, #1
 8013f32:	b087      	sub	sp, #28
 8013f34:	085b      	lsrs	r3, r3, #1
 8013f36:	4293      	cmp	r3, r2
 8013f38:	dd1c      	ble.n	8013f74 <cos+0x48>
 8013f3a:	4a1e      	ldr	r2, [pc, #120]	; (8013fb4 <cos+0x88>)
 8013f3c:	4293      	cmp	r3, r2
 8013f3e:	dd05      	ble.n	8013f4c <cos+0x20>
 8013f40:	0002      	movs	r2, r0
 8013f42:	000b      	movs	r3, r1
 8013f44:	f7fe ff0c 	bl	8012d60 <__aeabi_dsub>
 8013f48:	b007      	add	sp, #28
 8013f4a:	bd30      	pop	{r4, r5, pc}
 8013f4c:	aa02      	add	r2, sp, #8
 8013f4e:	f000 f9db 	bl	8014308 <__ieee754_rem_pio2>
 8013f52:	2303      	movs	r3, #3
 8013f54:	4018      	ands	r0, r3
 8013f56:	9a04      	ldr	r2, [sp, #16]
 8013f58:	9b05      	ldr	r3, [sp, #20]
 8013f5a:	2801      	cmp	r0, #1
 8013f5c:	d00f      	beq.n	8013f7e <cos+0x52>
 8013f5e:	2802      	cmp	r0, #2
 8013f60:	d01c      	beq.n	8013f9c <cos+0x70>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	d015      	beq.n	8013f92 <cos+0x66>
 8013f66:	9802      	ldr	r0, [sp, #8]
 8013f68:	9903      	ldr	r1, [sp, #12]
 8013f6a:	2401      	movs	r4, #1
 8013f6c:	9400      	str	r4, [sp, #0]
 8013f6e:	f001 fb7f 	bl	8015670 <__kernel_sin>
 8013f72:	e7e9      	b.n	8013f48 <cos+0x1c>
 8013f74:	2200      	movs	r2, #0
 8013f76:	2300      	movs	r3, #0
 8013f78:	f000 fe00 	bl	8014b7c <__kernel_cos>
 8013f7c:	e7e4      	b.n	8013f48 <cos+0x1c>
 8013f7e:	9000      	str	r0, [sp, #0]
 8013f80:	9802      	ldr	r0, [sp, #8]
 8013f82:	9903      	ldr	r1, [sp, #12]
 8013f84:	f001 fb74 	bl	8015670 <__kernel_sin>
 8013f88:	2380      	movs	r3, #128	; 0x80
 8013f8a:	061b      	lsls	r3, r3, #24
 8013f8c:	469c      	mov	ip, r3
 8013f8e:	4461      	add	r1, ip
 8013f90:	e7da      	b.n	8013f48 <cos+0x1c>
 8013f92:	9802      	ldr	r0, [sp, #8]
 8013f94:	9903      	ldr	r1, [sp, #12]
 8013f96:	f000 fdf1 	bl	8014b7c <__kernel_cos>
 8013f9a:	e7d5      	b.n	8013f48 <cos+0x1c>
 8013f9c:	9802      	ldr	r0, [sp, #8]
 8013f9e:	9903      	ldr	r1, [sp, #12]
 8013fa0:	f000 fdec 	bl	8014b7c <__kernel_cos>
 8013fa4:	2380      	movs	r3, #128	; 0x80
 8013fa6:	061b      	lsls	r3, r3, #24
 8013fa8:	469c      	mov	ip, r3
 8013faa:	4461      	add	r1, ip
 8013fac:	e7cc      	b.n	8013f48 <cos+0x1c>
 8013fae:	46c0      	nop			; (mov r8, r8)
 8013fb0:	3fe921fb 	.word	0x3fe921fb
 8013fb4:	7fefffff 	.word	0x7fefffff

08013fb8 <fmaxf>:
 8013fb8:	b570      	push	{r4, r5, r6, lr}
 8013fba:	1c04      	adds	r4, r0, #0
 8013fbc:	1c0d      	adds	r5, r1, #0
 8013fbe:	f000 f811 	bl	8013fe4 <__fpclassifyf>
 8013fc2:	2800      	cmp	r0, #0
 8013fc4:	d102      	bne.n	8013fcc <fmaxf+0x14>
 8013fc6:	1c2c      	adds	r4, r5, #0
 8013fc8:	1c20      	adds	r0, r4, #0
 8013fca:	bd70      	pop	{r4, r5, r6, pc}
 8013fcc:	1c28      	adds	r0, r5, #0
 8013fce:	f000 f809 	bl	8013fe4 <__fpclassifyf>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d0f8      	beq.n	8013fc8 <fmaxf+0x10>
 8013fd6:	1c29      	adds	r1, r5, #0
 8013fd8:	1c20      	adds	r0, r4, #0
 8013fda:	f7fd fa95 	bl	8011508 <__aeabi_fcmpgt>
 8013fde:	2800      	cmp	r0, #0
 8013fe0:	d0f1      	beq.n	8013fc6 <fmaxf+0xe>
 8013fe2:	e7f1      	b.n	8013fc8 <fmaxf+0x10>

08013fe4 <__fpclassifyf>:
 8013fe4:	0040      	lsls	r0, r0, #1
 8013fe6:	0840      	lsrs	r0, r0, #1
 8013fe8:	d00e      	beq.n	8014008 <__fpclassifyf+0x24>
 8013fea:	4b0a      	ldr	r3, [pc, #40]	; (8014014 <__fpclassifyf+0x30>)
 8013fec:	4a0a      	ldr	r2, [pc, #40]	; (8014018 <__fpclassifyf+0x34>)
 8013fee:	18c3      	adds	r3, r0, r3
 8013ff0:	4293      	cmp	r3, r2
 8013ff2:	d90b      	bls.n	801400c <__fpclassifyf+0x28>
 8013ff4:	4a09      	ldr	r2, [pc, #36]	; (801401c <__fpclassifyf+0x38>)
 8013ff6:	1e43      	subs	r3, r0, #1
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d909      	bls.n	8014010 <__fpclassifyf+0x2c>
 8013ffc:	4b08      	ldr	r3, [pc, #32]	; (8014020 <__fpclassifyf+0x3c>)
 8013ffe:	469c      	mov	ip, r3
 8014000:	4460      	add	r0, ip
 8014002:	4243      	negs	r3, r0
 8014004:	4158      	adcs	r0, r3
 8014006:	4770      	bx	lr
 8014008:	2002      	movs	r0, #2
 801400a:	e7fc      	b.n	8014006 <__fpclassifyf+0x22>
 801400c:	2004      	movs	r0, #4
 801400e:	e7fa      	b.n	8014006 <__fpclassifyf+0x22>
 8014010:	2003      	movs	r0, #3
 8014012:	e7f8      	b.n	8014006 <__fpclassifyf+0x22>
 8014014:	ff800000 	.word	0xff800000
 8014018:	7effffff 	.word	0x7effffff
 801401c:	007ffffe 	.word	0x007ffffe
 8014020:	80800000 	.word	0x80800000

08014024 <roundf>:
 8014024:	0043      	lsls	r3, r0, #1
 8014026:	0e1b      	lsrs	r3, r3, #24
 8014028:	3b7f      	subs	r3, #127	; 0x7f
 801402a:	b510      	push	{r4, lr}
 801402c:	1c01      	adds	r1, r0, #0
 801402e:	2b16      	cmp	r3, #22
 8014030:	dc0b      	bgt.n	801404a <roundf+0x26>
 8014032:	2b00      	cmp	r3, #0
 8014034:	db0e      	blt.n	8014054 <roundf+0x30>
 8014036:	4c0b      	ldr	r4, [pc, #44]	; (8014064 <roundf+0x40>)
 8014038:	411c      	asrs	r4, r3
 801403a:	4204      	tst	r4, r0
 801403c:	d004      	beq.n	8014048 <roundf+0x24>
 801403e:	2280      	movs	r2, #128	; 0x80
 8014040:	03d2      	lsls	r2, r2, #15
 8014042:	411a      	asrs	r2, r3
 8014044:	1810      	adds	r0, r2, r0
 8014046:	43a0      	bics	r0, r4
 8014048:	bd10      	pop	{r4, pc}
 801404a:	2b80      	cmp	r3, #128	; 0x80
 801404c:	d1fc      	bne.n	8014048 <roundf+0x24>
 801404e:	f7fc faa3 	bl	8010598 <__aeabi_fadd>
 8014052:	e7f9      	b.n	8014048 <roundf+0x24>
 8014054:	0fc0      	lsrs	r0, r0, #31
 8014056:	07c0      	lsls	r0, r0, #31
 8014058:	3301      	adds	r3, #1
 801405a:	d1f5      	bne.n	8014048 <roundf+0x24>
 801405c:	23fe      	movs	r3, #254	; 0xfe
 801405e:	059b      	lsls	r3, r3, #22
 8014060:	4318      	orrs	r0, r3
 8014062:	e7f1      	b.n	8014048 <roundf+0x24>
 8014064:	007fffff 	.word	0x007fffff

08014068 <sqrt>:
 8014068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801406a:	4647      	mov	r7, r8
 801406c:	46ce      	mov	lr, r9
 801406e:	b580      	push	{r7, lr}
 8014070:	b08d      	sub	sp, #52	; 0x34
 8014072:	0004      	movs	r4, r0
 8014074:	000d      	movs	r5, r1
 8014076:	f000 fb57 	bl	8014728 <__ieee754_sqrt>
 801407a:	4b29      	ldr	r3, [pc, #164]	; (8014120 <sqrt+0xb8>)
 801407c:	0006      	movs	r6, r0
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	000f      	movs	r7, r1
 8014082:	b25b      	sxtb	r3, r3
 8014084:	4698      	mov	r8, r3
 8014086:	3301      	adds	r3, #1
 8014088:	d010      	beq.n	80140ac <sqrt+0x44>
 801408a:	0022      	movs	r2, r4
 801408c:	002b      	movs	r3, r5
 801408e:	0020      	movs	r0, r4
 8014090:	0029      	movs	r1, r5
 8014092:	f7ff f9ad 	bl	80133f0 <__aeabi_dcmpun>
 8014096:	4681      	mov	r9, r0
 8014098:	2800      	cmp	r0, #0
 801409a:	d107      	bne.n	80140ac <sqrt+0x44>
 801409c:	2200      	movs	r2, #0
 801409e:	2300      	movs	r3, #0
 80140a0:	0020      	movs	r0, r4
 80140a2:	0029      	movs	r1, r5
 80140a4:	f7fd f9e2 	bl	801146c <__aeabi_dcmplt>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d106      	bne.n	80140ba <sqrt+0x52>
 80140ac:	0030      	movs	r0, r6
 80140ae:	0039      	movs	r1, r7
 80140b0:	b00d      	add	sp, #52	; 0x34
 80140b2:	bc0c      	pop	{r2, r3}
 80140b4:	4690      	mov	r8, r2
 80140b6:	4699      	mov	r9, r3
 80140b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140ba:	2301      	movs	r3, #1
 80140bc:	9302      	str	r3, [sp, #8]
 80140be:	4b19      	ldr	r3, [pc, #100]	; (8014124 <sqrt+0xbc>)
 80140c0:	9406      	str	r4, [sp, #24]
 80140c2:	9507      	str	r5, [sp, #28]
 80140c4:	9303      	str	r3, [sp, #12]
 80140c6:	464b      	mov	r3, r9
 80140c8:	930a      	str	r3, [sp, #40]	; 0x28
 80140ca:	4643      	mov	r3, r8
 80140cc:	9404      	str	r4, [sp, #16]
 80140ce:	9505      	str	r5, [sp, #20]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d015      	beq.n	8014100 <sqrt+0x98>
 80140d4:	2300      	movs	r3, #0
 80140d6:	2200      	movs	r2, #0
 80140d8:	0019      	movs	r1, r3
 80140da:	0010      	movs	r0, r2
 80140dc:	f7fd ffc4 	bl	8012068 <__aeabi_ddiv>
 80140e0:	4643      	mov	r3, r8
 80140e2:	9008      	str	r0, [sp, #32]
 80140e4:	9109      	str	r1, [sp, #36]	; 0x24
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	d10e      	bne.n	8014108 <sqrt+0xa0>
 80140ea:	f7ff fbdf 	bl	80138ac <__errno>
 80140ee:	2321      	movs	r3, #33	; 0x21
 80140f0:	6003      	str	r3, [r0, #0]
 80140f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140f4:	9301      	str	r3, [sp, #4]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d10c      	bne.n	8014114 <sqrt+0xac>
 80140fa:	9e08      	ldr	r6, [sp, #32]
 80140fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80140fe:	e7d5      	b.n	80140ac <sqrt+0x44>
 8014100:	2300      	movs	r3, #0
 8014102:	2400      	movs	r4, #0
 8014104:	9308      	str	r3, [sp, #32]
 8014106:	9409      	str	r4, [sp, #36]	; 0x24
 8014108:	a802      	add	r0, sp, #8
 801410a:	f001 fc03 	bl	8015914 <matherr>
 801410e:	2800      	cmp	r0, #0
 8014110:	d1ef      	bne.n	80140f2 <sqrt+0x8a>
 8014112:	e7ea      	b.n	80140ea <sqrt+0x82>
 8014114:	f7ff fbca 	bl	80138ac <__errno>
 8014118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801411a:	9301      	str	r3, [sp, #4]
 801411c:	6003      	str	r3, [r0, #0]
 801411e:	e7ec      	b.n	80140fa <sqrt+0x92>
 8014120:	2000006c 	.word	0x2000006c
 8014124:	0801f440 	.word	0x0801f440

08014128 <expf>:
 8014128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801412a:	b08b      	sub	sp, #44	; 0x2c
 801412c:	1c04      	adds	r4, r0, #0
 801412e:	f000 fbd3 	bl	80148d8 <__ieee754_expf>
 8014132:	2300      	movs	r3, #0
 8014134:	4e30      	ldr	r6, [pc, #192]	; (80141f8 <expf+0xd0>)
 8014136:	1c05      	adds	r5, r0, #0
 8014138:	56f3      	ldrsb	r3, [r6, r3]
 801413a:	3301      	adds	r3, #1
 801413c:	d036      	beq.n	80141ac <expf+0x84>
 801413e:	1c20      	adds	r0, r4, #0
 8014140:	f001 fc58 	bl	80159f4 <finitef>
 8014144:	2800      	cmp	r0, #0
 8014146:	d031      	beq.n	80141ac <expf+0x84>
 8014148:	492c      	ldr	r1, [pc, #176]	; (80141fc <expf+0xd4>)
 801414a:	1c20      	adds	r0, r4, #0
 801414c:	f7fd f9dc 	bl	8011508 <__aeabi_fcmpgt>
 8014150:	1e07      	subs	r7, r0, #0
 8014152:	d12e      	bne.n	80141b2 <expf+0x8a>
 8014154:	492a      	ldr	r1, [pc, #168]	; (8014200 <expf+0xd8>)
 8014156:	1c20      	adds	r0, r4, #0
 8014158:	f7fd f9c2 	bl	80114e0 <__aeabi_fcmplt>
 801415c:	2800      	cmp	r0, #0
 801415e:	d025      	beq.n	80141ac <expf+0x84>
 8014160:	2304      	movs	r3, #4
 8014162:	466d      	mov	r5, sp
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	4b27      	ldr	r3, [pc, #156]	; (8014204 <expf+0xdc>)
 8014168:	622f      	str	r7, [r5, #32]
 801416a:	606b      	str	r3, [r5, #4]
 801416c:	1c20      	adds	r0, r4, #0
 801416e:	f7ff f9fd 	bl	801356c <__aeabi_f2d>
 8014172:	2300      	movs	r3, #0
 8014174:	2200      	movs	r2, #0
 8014176:	61aa      	str	r2, [r5, #24]
 8014178:	61eb      	str	r3, [r5, #28]
 801417a:	2300      	movs	r3, #0
 801417c:	56f3      	ldrsb	r3, [r6, r3]
 801417e:	6128      	str	r0, [r5, #16]
 8014180:	6169      	str	r1, [r5, #20]
 8014182:	60a8      	str	r0, [r5, #8]
 8014184:	60e9      	str	r1, [r5, #12]
 8014186:	2b02      	cmp	r3, #2
 8014188:	d031      	beq.n	80141ee <expf+0xc6>
 801418a:	0028      	movs	r0, r5
 801418c:	f001 fbc2 	bl	8015914 <matherr>
 8014190:	2800      	cmp	r0, #0
 8014192:	d02c      	beq.n	80141ee <expf+0xc6>
 8014194:	6a2b      	ldr	r3, [r5, #32]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d003      	beq.n	80141a2 <expf+0x7a>
 801419a:	f7ff fb87 	bl	80138ac <__errno>
 801419e:	6a2b      	ldr	r3, [r5, #32]
 80141a0:	6003      	str	r3, [r0, #0]
 80141a2:	69a8      	ldr	r0, [r5, #24]
 80141a4:	69e9      	ldr	r1, [r5, #28]
 80141a6:	f7ff fa33 	bl	8013610 <__aeabi_d2f>
 80141aa:	1c05      	adds	r5, r0, #0
 80141ac:	1c28      	adds	r0, r5, #0
 80141ae:	b00b      	add	sp, #44	; 0x2c
 80141b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141b2:	2303      	movs	r3, #3
 80141b4:	466d      	mov	r5, sp
 80141b6:	9300      	str	r3, [sp, #0]
 80141b8:	4b12      	ldr	r3, [pc, #72]	; (8014204 <expf+0xdc>)
 80141ba:	1c20      	adds	r0, r4, #0
 80141bc:	606b      	str	r3, [r5, #4]
 80141be:	2300      	movs	r3, #0
 80141c0:	622b      	str	r3, [r5, #32]
 80141c2:	f7ff f9d3 	bl	801356c <__aeabi_f2d>
 80141c6:	2300      	movs	r3, #0
 80141c8:	56f3      	ldrsb	r3, [r6, r3]
 80141ca:	6128      	str	r0, [r5, #16]
 80141cc:	6169      	str	r1, [r5, #20]
 80141ce:	60a8      	str	r0, [r5, #8]
 80141d0:	60e9      	str	r1, [r5, #12]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d105      	bne.n	80141e2 <expf+0xba>
 80141d6:	22e0      	movs	r2, #224	; 0xe0
 80141d8:	4b0b      	ldr	r3, [pc, #44]	; (8014208 <expf+0xe0>)
 80141da:	0612      	lsls	r2, r2, #24
 80141dc:	61aa      	str	r2, [r5, #24]
 80141de:	61eb      	str	r3, [r5, #28]
 80141e0:	e7d3      	b.n	801418a <expf+0x62>
 80141e2:	2000      	movs	r0, #0
 80141e4:	4909      	ldr	r1, [pc, #36]	; (801420c <expf+0xe4>)
 80141e6:	61a8      	str	r0, [r5, #24]
 80141e8:	61e9      	str	r1, [r5, #28]
 80141ea:	2b02      	cmp	r3, #2
 80141ec:	d1cd      	bne.n	801418a <expf+0x62>
 80141ee:	f7ff fb5d 	bl	80138ac <__errno>
 80141f2:	2322      	movs	r3, #34	; 0x22
 80141f4:	6003      	str	r3, [r0, #0]
 80141f6:	e7cd      	b.n	8014194 <expf+0x6c>
 80141f8:	2000006c 	.word	0x2000006c
 80141fc:	42b17180 	.word	0x42b17180
 8014200:	c2cff1b5 	.word	0xc2cff1b5
 8014204:	0801f448 	.word	0x0801f448
 8014208:	47efffff 	.word	0x47efffff
 801420c:	7ff00000 	.word	0x7ff00000

08014210 <log10f>:
 8014210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014212:	2500      	movs	r5, #0
 8014214:	b08d      	sub	sp, #52	; 0x34
 8014216:	1c04      	adds	r4, r0, #0
 8014218:	f000 fc58 	bl	8014acc <__ieee754_log10f>
 801421c:	4b35      	ldr	r3, [pc, #212]	; (80142f4 <log10f+0xe4>)
 801421e:	1c06      	adds	r6, r0, #0
 8014220:	575d      	ldrsb	r5, [r3, r5]
 8014222:	1c6b      	adds	r3, r5, #1
 8014224:	d00b      	beq.n	801423e <log10f+0x2e>
 8014226:	1c21      	adds	r1, r4, #0
 8014228:	1c20      	adds	r0, r4, #0
 801422a:	f7fd fb41 	bl	80118b0 <__aeabi_fcmpun>
 801422e:	1e07      	subs	r7, r0, #0
 8014230:	d105      	bne.n	801423e <log10f+0x2e>
 8014232:	2100      	movs	r1, #0
 8014234:	1c20      	adds	r0, r4, #0
 8014236:	f7fd f95d 	bl	80114f4 <__aeabi_fcmple>
 801423a:	2800      	cmp	r0, #0
 801423c:	d102      	bne.n	8014244 <log10f+0x34>
 801423e:	1c30      	adds	r0, r6, #0
 8014240:	b00d      	add	sp, #52	; 0x34
 8014242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014244:	4b2c      	ldr	r3, [pc, #176]	; (80142f8 <log10f+0xe8>)
 8014246:	1c20      	adds	r0, r4, #0
 8014248:	9303      	str	r3, [sp, #12]
 801424a:	970a      	str	r7, [sp, #40]	; 0x28
 801424c:	f7ff f98e 	bl	801356c <__aeabi_f2d>
 8014250:	9006      	str	r0, [sp, #24]
 8014252:	9107      	str	r1, [sp, #28]
 8014254:	9004      	str	r0, [sp, #16]
 8014256:	9105      	str	r1, [sp, #20]
 8014258:	2d00      	cmp	r5, #0
 801425a:	d11b      	bne.n	8014294 <log10f+0x84>
 801425c:	22e0      	movs	r2, #224	; 0xe0
 801425e:	4b27      	ldr	r3, [pc, #156]	; (80142fc <log10f+0xec>)
 8014260:	0612      	lsls	r2, r2, #24
 8014262:	2100      	movs	r1, #0
 8014264:	1c20      	adds	r0, r4, #0
 8014266:	9208      	str	r2, [sp, #32]
 8014268:	9309      	str	r3, [sp, #36]	; 0x24
 801426a:	f7fd f933 	bl	80114d4 <__aeabi_fcmpeq>
 801426e:	2800      	cmp	r0, #0
 8014270:	d037      	beq.n	80142e2 <log10f+0xd2>
 8014272:	2302      	movs	r3, #2
 8014274:	9302      	str	r3, [sp, #8]
 8014276:	a802      	add	r0, sp, #8
 8014278:	f001 fb4c 	bl	8015914 <matherr>
 801427c:	2800      	cmp	r0, #0
 801427e:	d017      	beq.n	80142b0 <log10f+0xa0>
 8014280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014282:	9301      	str	r3, [sp, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d118      	bne.n	80142ba <log10f+0xaa>
 8014288:	9808      	ldr	r0, [sp, #32]
 801428a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801428c:	f7ff f9c0 	bl	8013610 <__aeabi_d2f>
 8014290:	1c06      	adds	r6, r0, #0
 8014292:	e7d4      	b.n	801423e <log10f+0x2e>
 8014294:	2200      	movs	r2, #0
 8014296:	4b1a      	ldr	r3, [pc, #104]	; (8014300 <log10f+0xf0>)
 8014298:	2100      	movs	r1, #0
 801429a:	1c20      	adds	r0, r4, #0
 801429c:	9208      	str	r2, [sp, #32]
 801429e:	9309      	str	r3, [sp, #36]	; 0x24
 80142a0:	f7fd f918 	bl	80114d4 <__aeabi_fcmpeq>
 80142a4:	2800      	cmp	r0, #0
 80142a6:	d00e      	beq.n	80142c6 <log10f+0xb6>
 80142a8:	2302      	movs	r3, #2
 80142aa:	9302      	str	r3, [sp, #8]
 80142ac:	2d02      	cmp	r5, #2
 80142ae:	d1e2      	bne.n	8014276 <log10f+0x66>
 80142b0:	f7ff fafc 	bl	80138ac <__errno>
 80142b4:	2322      	movs	r3, #34	; 0x22
 80142b6:	6003      	str	r3, [r0, #0]
 80142b8:	e7e2      	b.n	8014280 <log10f+0x70>
 80142ba:	f7ff faf7 	bl	80138ac <__errno>
 80142be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142c0:	9301      	str	r3, [sp, #4]
 80142c2:	6003      	str	r3, [r0, #0]
 80142c4:	e7e0      	b.n	8014288 <log10f+0x78>
 80142c6:	2301      	movs	r3, #1
 80142c8:	9302      	str	r3, [sp, #8]
 80142ca:	2d02      	cmp	r5, #2
 80142cc:	d10b      	bne.n	80142e6 <log10f+0xd6>
 80142ce:	f7ff faed 	bl	80138ac <__errno>
 80142d2:	2321      	movs	r3, #33	; 0x21
 80142d4:	6003      	str	r3, [r0, #0]
 80142d6:	480b      	ldr	r0, [pc, #44]	; (8014304 <log10f+0xf4>)
 80142d8:	f001 fb1e 	bl	8015918 <nan>
 80142dc:	9008      	str	r0, [sp, #32]
 80142de:	9109      	str	r1, [sp, #36]	; 0x24
 80142e0:	e7ce      	b.n	8014280 <log10f+0x70>
 80142e2:	2301      	movs	r3, #1
 80142e4:	9302      	str	r3, [sp, #8]
 80142e6:	a802      	add	r0, sp, #8
 80142e8:	f001 fb14 	bl	8015914 <matherr>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	d1f2      	bne.n	80142d6 <log10f+0xc6>
 80142f0:	e7ed      	b.n	80142ce <log10f+0xbe>
 80142f2:	46c0      	nop			; (mov r8, r8)
 80142f4:	2000006c 	.word	0x2000006c
 80142f8:	0801f450 	.word	0x0801f450
 80142fc:	c7efffff 	.word	0xc7efffff
 8014300:	fff00000 	.word	0xfff00000
 8014304:	0801eb6c 	.word	0x0801eb6c

08014308 <__ieee754_rem_pio2>:
 8014308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801430a:	464e      	mov	r6, r9
 801430c:	4645      	mov	r5, r8
 801430e:	46de      	mov	lr, fp
 8014310:	4657      	mov	r7, sl
 8014312:	b5e0      	push	{r5, r6, r7, lr}
 8014314:	4be1      	ldr	r3, [pc, #900]	; (801469c <__ieee754_rem_pio2+0x394>)
 8014316:	004c      	lsls	r4, r1, #1
 8014318:	b08f      	sub	sp, #60	; 0x3c
 801431a:	4690      	mov	r8, r2
 801431c:	4689      	mov	r9, r1
 801431e:	0864      	lsrs	r4, r4, #1
 8014320:	429c      	cmp	r4, r3
 8014322:	dc00      	bgt.n	8014326 <__ieee754_rem_pio2+0x1e>
 8014324:	e087      	b.n	8014436 <__ieee754_rem_pio2+0x12e>
 8014326:	4bde      	ldr	r3, [pc, #888]	; (80146a0 <__ieee754_rem_pio2+0x398>)
 8014328:	429c      	cmp	r4, r3
 801432a:	dc22      	bgt.n	8014372 <__ieee754_rem_pio2+0x6a>
 801432c:	4add      	ldr	r2, [pc, #884]	; (80146a4 <__ieee754_rem_pio2+0x39c>)
 801432e:	2900      	cmp	r1, #0
 8014330:	dc00      	bgt.n	8014334 <__ieee754_rem_pio2+0x2c>
 8014332:	e092      	b.n	801445a <__ieee754_rem_pio2+0x152>
 8014334:	4bdc      	ldr	r3, [pc, #880]	; (80146a8 <__ieee754_rem_pio2+0x3a0>)
 8014336:	f7fe fd13 	bl	8012d60 <__aeabi_dsub>
 801433a:	4bdb      	ldr	r3, [pc, #876]	; (80146a8 <__ieee754_rem_pio2+0x3a0>)
 801433c:	0006      	movs	r6, r0
 801433e:	000f      	movs	r7, r1
 8014340:	429c      	cmp	r4, r3
 8014342:	d100      	bne.n	8014346 <__ieee754_rem_pio2+0x3e>
 8014344:	e17e      	b.n	8014644 <__ieee754_rem_pio2+0x33c>
 8014346:	4ad9      	ldr	r2, [pc, #868]	; (80146ac <__ieee754_rem_pio2+0x3a4>)
 8014348:	4bd9      	ldr	r3, [pc, #868]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 801434a:	f7fe fd09 	bl	8012d60 <__aeabi_dsub>
 801434e:	0002      	movs	r2, r0
 8014350:	000b      	movs	r3, r1
 8014352:	4641      	mov	r1, r8
 8014354:	0030      	movs	r0, r6
 8014356:	600a      	str	r2, [r1, #0]
 8014358:	604b      	str	r3, [r1, #4]
 801435a:	0039      	movs	r1, r7
 801435c:	f7fe fd00 	bl	8012d60 <__aeabi_dsub>
 8014360:	4bd3      	ldr	r3, [pc, #844]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 8014362:	4ad2      	ldr	r2, [pc, #840]	; (80146ac <__ieee754_rem_pio2+0x3a4>)
 8014364:	f7fe fcfc 	bl	8012d60 <__aeabi_dsub>
 8014368:	4643      	mov	r3, r8
 801436a:	2501      	movs	r5, #1
 801436c:	6098      	str	r0, [r3, #8]
 801436e:	60d9      	str	r1, [r3, #12]
 8014370:	e06b      	b.n	801444a <__ieee754_rem_pio2+0x142>
 8014372:	4bd0      	ldr	r3, [pc, #832]	; (80146b4 <__ieee754_rem_pio2+0x3ac>)
 8014374:	429c      	cmp	r4, r3
 8014376:	dc00      	bgt.n	801437a <__ieee754_rem_pio2+0x72>
 8014378:	e08f      	b.n	801449a <__ieee754_rem_pio2+0x192>
 801437a:	4bcf      	ldr	r3, [pc, #828]	; (80146b8 <__ieee754_rem_pio2+0x3b0>)
 801437c:	429c      	cmp	r4, r3
 801437e:	dd00      	ble.n	8014382 <__ieee754_rem_pio2+0x7a>
 8014380:	e155      	b.n	801462e <__ieee754_rem_pio2+0x326>
 8014382:	4ace      	ldr	r2, [pc, #824]	; (80146bc <__ieee754_rem_pio2+0x3b4>)
 8014384:	1523      	asrs	r3, r4, #20
 8014386:	4692      	mov	sl, r2
 8014388:	449a      	add	sl, r3
 801438a:	4651      	mov	r1, sl
 801438c:	0509      	lsls	r1, r1, #20
 801438e:	1a63      	subs	r3, r4, r1
 8014390:	0019      	movs	r1, r3
 8014392:	001d      	movs	r5, r3
 8014394:	0004      	movs	r4, r0
 8014396:	f7ff f847 	bl	8013428 <__aeabi_d2iz>
 801439a:	f7ff f87b 	bl	8013494 <__aeabi_i2d>
 801439e:	0002      	movs	r2, r0
 80143a0:	000b      	movs	r3, r1
 80143a2:	0020      	movs	r0, r4
 80143a4:	0029      	movs	r1, r5
 80143a6:	9208      	str	r2, [sp, #32]
 80143a8:	9309      	str	r3, [sp, #36]	; 0x24
 80143aa:	f7fe fcd9 	bl	8012d60 <__aeabi_dsub>
 80143ae:	2200      	movs	r2, #0
 80143b0:	4bc3      	ldr	r3, [pc, #780]	; (80146c0 <__ieee754_rem_pio2+0x3b8>)
 80143b2:	f7fe fa63 	bl	801287c <__aeabi_dmul>
 80143b6:	000f      	movs	r7, r1
 80143b8:	0006      	movs	r6, r0
 80143ba:	f7ff f835 	bl	8013428 <__aeabi_d2iz>
 80143be:	f7ff f869 	bl	8013494 <__aeabi_i2d>
 80143c2:	0004      	movs	r4, r0
 80143c4:	000d      	movs	r5, r1
 80143c6:	0002      	movs	r2, r0
 80143c8:	000b      	movs	r3, r1
 80143ca:	0030      	movs	r0, r6
 80143cc:	0039      	movs	r1, r7
 80143ce:	940a      	str	r4, [sp, #40]	; 0x28
 80143d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80143d2:	f7fe fcc5 	bl	8012d60 <__aeabi_dsub>
 80143d6:	2200      	movs	r2, #0
 80143d8:	4bb9      	ldr	r3, [pc, #740]	; (80146c0 <__ieee754_rem_pio2+0x3b8>)
 80143da:	f7fe fa4f 	bl	801287c <__aeabi_dmul>
 80143de:	2200      	movs	r2, #0
 80143e0:	2300      	movs	r3, #0
 80143e2:	900c      	str	r0, [sp, #48]	; 0x30
 80143e4:	910d      	str	r1, [sp, #52]	; 0x34
 80143e6:	f7fd f83b 	bl	8011460 <__aeabi_dcmpeq>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d100      	bne.n	80143f0 <__ieee754_rem_pio2+0xe8>
 80143ee:	e192      	b.n	8014716 <__ieee754_rem_pio2+0x40e>
 80143f0:	2300      	movs	r3, #0
 80143f2:	2200      	movs	r2, #0
 80143f4:	0020      	movs	r0, r4
 80143f6:	0029      	movs	r1, r5
 80143f8:	f7fd f832 	bl	8011460 <__aeabi_dcmpeq>
 80143fc:	4243      	negs	r3, r0
 80143fe:	4143      	adcs	r3, r0
 8014400:	3301      	adds	r3, #1
 8014402:	4ab0      	ldr	r2, [pc, #704]	; (80146c4 <__ieee754_rem_pio2+0x3bc>)
 8014404:	4641      	mov	r1, r8
 8014406:	9201      	str	r2, [sp, #4]
 8014408:	2202      	movs	r2, #2
 801440a:	a808      	add	r0, sp, #32
 801440c:	9200      	str	r2, [sp, #0]
 801440e:	4652      	mov	r2, sl
 8014410:	f000 fcce 	bl	8014db0 <__kernel_rem_pio2>
 8014414:	464b      	mov	r3, r9
 8014416:	0005      	movs	r5, r0
 8014418:	2b00      	cmp	r3, #0
 801441a:	da16      	bge.n	801444a <__ieee754_rem_pio2+0x142>
 801441c:	2280      	movs	r2, #128	; 0x80
 801441e:	4643      	mov	r3, r8
 8014420:	0612      	lsls	r2, r2, #24
 8014422:	4694      	mov	ip, r2
 8014424:	4642      	mov	r2, r8
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	4245      	negs	r5, r0
 801442a:	4463      	add	r3, ip
 801442c:	6053      	str	r3, [r2, #4]
 801442e:	68d3      	ldr	r3, [r2, #12]
 8014430:	4463      	add	r3, ip
 8014432:	60d3      	str	r3, [r2, #12]
 8014434:	e009      	b.n	801444a <__ieee754_rem_pio2+0x142>
 8014436:	000b      	movs	r3, r1
 8014438:	0002      	movs	r2, r0
 801443a:	4641      	mov	r1, r8
 801443c:	600a      	str	r2, [r1, #0]
 801443e:	604b      	str	r3, [r1, #4]
 8014440:	2200      	movs	r2, #0
 8014442:	2300      	movs	r3, #0
 8014444:	2500      	movs	r5, #0
 8014446:	608a      	str	r2, [r1, #8]
 8014448:	60cb      	str	r3, [r1, #12]
 801444a:	0028      	movs	r0, r5
 801444c:	b00f      	add	sp, #60	; 0x3c
 801444e:	bc3c      	pop	{r2, r3, r4, r5}
 8014450:	4690      	mov	r8, r2
 8014452:	4699      	mov	r9, r3
 8014454:	46a2      	mov	sl, r4
 8014456:	46ab      	mov	fp, r5
 8014458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801445a:	4b93      	ldr	r3, [pc, #588]	; (80146a8 <__ieee754_rem_pio2+0x3a0>)
 801445c:	f7fd fae8 	bl	8011a30 <__aeabi_dadd>
 8014460:	4b91      	ldr	r3, [pc, #580]	; (80146a8 <__ieee754_rem_pio2+0x3a0>)
 8014462:	0006      	movs	r6, r0
 8014464:	000f      	movs	r7, r1
 8014466:	429c      	cmp	r4, r3
 8014468:	d100      	bne.n	801446c <__ieee754_rem_pio2+0x164>
 801446a:	e13d      	b.n	80146e8 <__ieee754_rem_pio2+0x3e0>
 801446c:	4a8f      	ldr	r2, [pc, #572]	; (80146ac <__ieee754_rem_pio2+0x3a4>)
 801446e:	4b90      	ldr	r3, [pc, #576]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 8014470:	f7fd fade 	bl	8011a30 <__aeabi_dadd>
 8014474:	0002      	movs	r2, r0
 8014476:	000b      	movs	r3, r1
 8014478:	4641      	mov	r1, r8
 801447a:	0030      	movs	r0, r6
 801447c:	600a      	str	r2, [r1, #0]
 801447e:	604b      	str	r3, [r1, #4]
 8014480:	0039      	movs	r1, r7
 8014482:	f7fe fc6d 	bl	8012d60 <__aeabi_dsub>
 8014486:	4a89      	ldr	r2, [pc, #548]	; (80146ac <__ieee754_rem_pio2+0x3a4>)
 8014488:	4b89      	ldr	r3, [pc, #548]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 801448a:	f7fd fad1 	bl	8011a30 <__aeabi_dadd>
 801448e:	2501      	movs	r5, #1
 8014490:	4643      	mov	r3, r8
 8014492:	426d      	negs	r5, r5
 8014494:	6098      	str	r0, [r3, #8]
 8014496:	60d9      	str	r1, [r3, #12]
 8014498:	e7d7      	b.n	801444a <__ieee754_rem_pio2+0x142>
 801449a:	f001 f99b 	bl	80157d4 <fabs>
 801449e:	4a8a      	ldr	r2, [pc, #552]	; (80146c8 <__ieee754_rem_pio2+0x3c0>)
 80144a0:	4b8a      	ldr	r3, [pc, #552]	; (80146cc <__ieee754_rem_pio2+0x3c4>)
 80144a2:	0006      	movs	r6, r0
 80144a4:	000f      	movs	r7, r1
 80144a6:	f7fe f9e9 	bl	801287c <__aeabi_dmul>
 80144aa:	2200      	movs	r2, #0
 80144ac:	4b88      	ldr	r3, [pc, #544]	; (80146d0 <__ieee754_rem_pio2+0x3c8>)
 80144ae:	f7fd fabf 	bl	8011a30 <__aeabi_dadd>
 80144b2:	f7fe ffb9 	bl	8013428 <__aeabi_d2iz>
 80144b6:	0005      	movs	r5, r0
 80144b8:	f7fe ffec 	bl	8013494 <__aeabi_i2d>
 80144bc:	4a79      	ldr	r2, [pc, #484]	; (80146a4 <__ieee754_rem_pio2+0x39c>)
 80144be:	4b7a      	ldr	r3, [pc, #488]	; (80146a8 <__ieee754_rem_pio2+0x3a0>)
 80144c0:	9004      	str	r0, [sp, #16]
 80144c2:	9105      	str	r1, [sp, #20]
 80144c4:	f7fe f9da 	bl	801287c <__aeabi_dmul>
 80144c8:	0002      	movs	r2, r0
 80144ca:	000b      	movs	r3, r1
 80144cc:	0030      	movs	r0, r6
 80144ce:	0039      	movs	r1, r7
 80144d0:	f7fe fc46 	bl	8012d60 <__aeabi_dsub>
 80144d4:	4a75      	ldr	r2, [pc, #468]	; (80146ac <__ieee754_rem_pio2+0x3a4>)
 80144d6:	0006      	movs	r6, r0
 80144d8:	000f      	movs	r7, r1
 80144da:	9804      	ldr	r0, [sp, #16]
 80144dc:	9905      	ldr	r1, [sp, #20]
 80144de:	4b74      	ldr	r3, [pc, #464]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 80144e0:	f7fe f9cc 	bl	801287c <__aeabi_dmul>
 80144e4:	9002      	str	r0, [sp, #8]
 80144e6:	9103      	str	r1, [sp, #12]
 80144e8:	2d1f      	cmp	r5, #31
 80144ea:	dc00      	bgt.n	80144ee <__ieee754_rem_pio2+0x1e6>
 80144ec:	e0c7      	b.n	801467e <__ieee754_rem_pio2+0x376>
 80144ee:	9a02      	ldr	r2, [sp, #8]
 80144f0:	9b03      	ldr	r3, [sp, #12]
 80144f2:	0030      	movs	r0, r6
 80144f4:	0039      	movs	r1, r7
 80144f6:	f7fe fc33 	bl	8012d60 <__aeabi_dsub>
 80144fa:	4683      	mov	fp, r0
 80144fc:	468a      	mov	sl, r1
 80144fe:	4653      	mov	r3, sl
 8014500:	005b      	lsls	r3, r3, #1
 8014502:	1524      	asrs	r4, r4, #20
 8014504:	0d5b      	lsrs	r3, r3, #21
 8014506:	1ae3      	subs	r3, r4, r3
 8014508:	2b10      	cmp	r3, #16
 801450a:	dd6c      	ble.n	80145e6 <__ieee754_rem_pio2+0x2de>
 801450c:	9804      	ldr	r0, [sp, #16]
 801450e:	9905      	ldr	r1, [sp, #20]
 8014510:	22d3      	movs	r2, #211	; 0xd3
 8014512:	4b67      	ldr	r3, [pc, #412]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 8014514:	0552      	lsls	r2, r2, #21
 8014516:	f7fe f9b1 	bl	801287c <__aeabi_dmul>
 801451a:	0002      	movs	r2, r0
 801451c:	000b      	movs	r3, r1
 801451e:	0030      	movs	r0, r6
 8014520:	0039      	movs	r1, r7
 8014522:	9202      	str	r2, [sp, #8]
 8014524:	9303      	str	r3, [sp, #12]
 8014526:	f7fe fc1b 	bl	8012d60 <__aeabi_dsub>
 801452a:	000a      	movs	r2, r1
 801452c:	0001      	movs	r1, r0
 801452e:	0013      	movs	r3, r2
 8014530:	9106      	str	r1, [sp, #24]
 8014532:	9207      	str	r2, [sp, #28]
 8014534:	0002      	movs	r2, r0
 8014536:	0039      	movs	r1, r7
 8014538:	0030      	movs	r0, r6
 801453a:	f7fe fc11 	bl	8012d60 <__aeabi_dsub>
 801453e:	9a02      	ldr	r2, [sp, #8]
 8014540:	9b03      	ldr	r3, [sp, #12]
 8014542:	f7fe fc0d 	bl	8012d60 <__aeabi_dsub>
 8014546:	0006      	movs	r6, r0
 8014548:	000f      	movs	r7, r1
 801454a:	9804      	ldr	r0, [sp, #16]
 801454c:	9905      	ldr	r1, [sp, #20]
 801454e:	4a61      	ldr	r2, [pc, #388]	; (80146d4 <__ieee754_rem_pio2+0x3cc>)
 8014550:	4b61      	ldr	r3, [pc, #388]	; (80146d8 <__ieee754_rem_pio2+0x3d0>)
 8014552:	f7fe f993 	bl	801287c <__aeabi_dmul>
 8014556:	0032      	movs	r2, r6
 8014558:	003b      	movs	r3, r7
 801455a:	f7fe fc01 	bl	8012d60 <__aeabi_dsub>
 801455e:	9e06      	ldr	r6, [sp, #24]
 8014560:	9f07      	ldr	r7, [sp, #28]
 8014562:	000b      	movs	r3, r1
 8014564:	0002      	movs	r2, r0
 8014566:	0039      	movs	r1, r7
 8014568:	0030      	movs	r0, r6
 801456a:	9202      	str	r2, [sp, #8]
 801456c:	9303      	str	r3, [sp, #12]
 801456e:	f7fe fbf7 	bl	8012d60 <__aeabi_dsub>
 8014572:	004b      	lsls	r3, r1, #1
 8014574:	0d5b      	lsrs	r3, r3, #21
 8014576:	4683      	mov	fp, r0
 8014578:	468a      	mov	sl, r1
 801457a:	1ae4      	subs	r4, r4, r3
 801457c:	2c31      	cmp	r4, #49	; 0x31
 801457e:	dd32      	ble.n	80145e6 <__ieee754_rem_pio2+0x2de>
 8014580:	9804      	ldr	r0, [sp, #16]
 8014582:	9905      	ldr	r1, [sp, #20]
 8014584:	22b8      	movs	r2, #184	; 0xb8
 8014586:	4b54      	ldr	r3, [pc, #336]	; (80146d8 <__ieee754_rem_pio2+0x3d0>)
 8014588:	0592      	lsls	r2, r2, #22
 801458a:	f7fe f977 	bl	801287c <__aeabi_dmul>
 801458e:	0003      	movs	r3, r0
 8014590:	000c      	movs	r4, r1
 8014592:	0002      	movs	r2, r0
 8014594:	9302      	str	r3, [sp, #8]
 8014596:	9403      	str	r4, [sp, #12]
 8014598:	000b      	movs	r3, r1
 801459a:	9806      	ldr	r0, [sp, #24]
 801459c:	9907      	ldr	r1, [sp, #28]
 801459e:	f7fe fbdf 	bl	8012d60 <__aeabi_dsub>
 80145a2:	0002      	movs	r2, r0
 80145a4:	000b      	movs	r3, r1
 80145a6:	0006      	movs	r6, r0
 80145a8:	000f      	movs	r7, r1
 80145aa:	9806      	ldr	r0, [sp, #24]
 80145ac:	9907      	ldr	r1, [sp, #28]
 80145ae:	f7fe fbd7 	bl	8012d60 <__aeabi_dsub>
 80145b2:	9a02      	ldr	r2, [sp, #8]
 80145b4:	9b03      	ldr	r3, [sp, #12]
 80145b6:	f7fe fbd3 	bl	8012d60 <__aeabi_dsub>
 80145ba:	4a48      	ldr	r2, [pc, #288]	; (80146dc <__ieee754_rem_pio2+0x3d4>)
 80145bc:	9002      	str	r0, [sp, #8]
 80145be:	9103      	str	r1, [sp, #12]
 80145c0:	9804      	ldr	r0, [sp, #16]
 80145c2:	9905      	ldr	r1, [sp, #20]
 80145c4:	4b46      	ldr	r3, [pc, #280]	; (80146e0 <__ieee754_rem_pio2+0x3d8>)
 80145c6:	f7fe f959 	bl	801287c <__aeabi_dmul>
 80145ca:	9a02      	ldr	r2, [sp, #8]
 80145cc:	9b03      	ldr	r3, [sp, #12]
 80145ce:	f7fe fbc7 	bl	8012d60 <__aeabi_dsub>
 80145d2:	0002      	movs	r2, r0
 80145d4:	000b      	movs	r3, r1
 80145d6:	0030      	movs	r0, r6
 80145d8:	0039      	movs	r1, r7
 80145da:	9202      	str	r2, [sp, #8]
 80145dc:	9303      	str	r3, [sp, #12]
 80145de:	f7fe fbbf 	bl	8012d60 <__aeabi_dsub>
 80145e2:	4683      	mov	fp, r0
 80145e4:	468a      	mov	sl, r1
 80145e6:	465a      	mov	r2, fp
 80145e8:	4653      	mov	r3, sl
 80145ea:	4641      	mov	r1, r8
 80145ec:	0030      	movs	r0, r6
 80145ee:	600a      	str	r2, [r1, #0]
 80145f0:	604b      	str	r3, [r1, #4]
 80145f2:	0039      	movs	r1, r7
 80145f4:	f7fe fbb4 	bl	8012d60 <__aeabi_dsub>
 80145f8:	9a02      	ldr	r2, [sp, #8]
 80145fa:	9b03      	ldr	r3, [sp, #12]
 80145fc:	f7fe fbb0 	bl	8012d60 <__aeabi_dsub>
 8014600:	4644      	mov	r4, r8
 8014602:	000b      	movs	r3, r1
 8014604:	0002      	movs	r2, r0
 8014606:	60a2      	str	r2, [r4, #8]
 8014608:	60e3      	str	r3, [r4, #12]
 801460a:	464b      	mov	r3, r9
 801460c:	2b00      	cmp	r3, #0
 801460e:	db00      	blt.n	8014612 <__ieee754_rem_pio2+0x30a>
 8014610:	e71b      	b.n	801444a <__ieee754_rem_pio2+0x142>
 8014612:	465b      	mov	r3, fp
 8014614:	6023      	str	r3, [r4, #0]
 8014616:	2380      	movs	r3, #128	; 0x80
 8014618:	061b      	lsls	r3, r3, #24
 801461a:	4453      	add	r3, sl
 801461c:	6063      	str	r3, [r4, #4]
 801461e:	2380      	movs	r3, #128	; 0x80
 8014620:	061b      	lsls	r3, r3, #24
 8014622:	469c      	mov	ip, r3
 8014624:	4461      	add	r1, ip
 8014626:	60a0      	str	r0, [r4, #8]
 8014628:	60e1      	str	r1, [r4, #12]
 801462a:	426d      	negs	r5, r5
 801462c:	e70d      	b.n	801444a <__ieee754_rem_pio2+0x142>
 801462e:	000b      	movs	r3, r1
 8014630:	0002      	movs	r2, r0
 8014632:	f7fe fb95 	bl	8012d60 <__aeabi_dsub>
 8014636:	4643      	mov	r3, r8
 8014638:	2500      	movs	r5, #0
 801463a:	6098      	str	r0, [r3, #8]
 801463c:	60d9      	str	r1, [r3, #12]
 801463e:	6018      	str	r0, [r3, #0]
 8014640:	6059      	str	r1, [r3, #4]
 8014642:	e702      	b.n	801444a <__ieee754_rem_pio2+0x142>
 8014644:	22d3      	movs	r2, #211	; 0xd3
 8014646:	4b1a      	ldr	r3, [pc, #104]	; (80146b0 <__ieee754_rem_pio2+0x3a8>)
 8014648:	0552      	lsls	r2, r2, #21
 801464a:	f7fe fb89 	bl	8012d60 <__aeabi_dsub>
 801464e:	4a21      	ldr	r2, [pc, #132]	; (80146d4 <__ieee754_rem_pio2+0x3cc>)
 8014650:	4b21      	ldr	r3, [pc, #132]	; (80146d8 <__ieee754_rem_pio2+0x3d0>)
 8014652:	000d      	movs	r5, r1
 8014654:	0004      	movs	r4, r0
 8014656:	f7fe fb83 	bl	8012d60 <__aeabi_dsub>
 801465a:	0002      	movs	r2, r0
 801465c:	000b      	movs	r3, r1
 801465e:	4641      	mov	r1, r8
 8014660:	0020      	movs	r0, r4
 8014662:	600a      	str	r2, [r1, #0]
 8014664:	604b      	str	r3, [r1, #4]
 8014666:	0029      	movs	r1, r5
 8014668:	f7fe fb7a 	bl	8012d60 <__aeabi_dsub>
 801466c:	4b1a      	ldr	r3, [pc, #104]	; (80146d8 <__ieee754_rem_pio2+0x3d0>)
 801466e:	4a19      	ldr	r2, [pc, #100]	; (80146d4 <__ieee754_rem_pio2+0x3cc>)
 8014670:	f7fe fb76 	bl	8012d60 <__aeabi_dsub>
 8014674:	4643      	mov	r3, r8
 8014676:	2501      	movs	r5, #1
 8014678:	6098      	str	r0, [r3, #8]
 801467a:	60d9      	str	r1, [r3, #12]
 801467c:	e6e5      	b.n	801444a <__ieee754_rem_pio2+0x142>
 801467e:	0002      	movs	r2, r0
 8014680:	000b      	movs	r3, r1
 8014682:	0030      	movs	r0, r6
 8014684:	0039      	movs	r1, r7
 8014686:	f7fe fb6b 	bl	8012d60 <__aeabi_dsub>
 801468a:	1e6b      	subs	r3, r5, #1
 801468c:	4a15      	ldr	r2, [pc, #84]	; (80146e4 <__ieee754_rem_pio2+0x3dc>)
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	589b      	ldr	r3, [r3, r2]
 8014692:	4683      	mov	fp, r0
 8014694:	468a      	mov	sl, r1
 8014696:	42a3      	cmp	r3, r4
 8014698:	d1a5      	bne.n	80145e6 <__ieee754_rem_pio2+0x2de>
 801469a:	e730      	b.n	80144fe <__ieee754_rem_pio2+0x1f6>
 801469c:	3fe921fb 	.word	0x3fe921fb
 80146a0:	4002d97b 	.word	0x4002d97b
 80146a4:	54400000 	.word	0x54400000
 80146a8:	3ff921fb 	.word	0x3ff921fb
 80146ac:	1a626331 	.word	0x1a626331
 80146b0:	3dd0b461 	.word	0x3dd0b461
 80146b4:	413921fb 	.word	0x413921fb
 80146b8:	7fefffff 	.word	0x7fefffff
 80146bc:	fffffbea 	.word	0xfffffbea
 80146c0:	41700000 	.word	0x41700000
 80146c4:	0801f4d8 	.word	0x0801f4d8
 80146c8:	6dc9c883 	.word	0x6dc9c883
 80146cc:	3fe45f30 	.word	0x3fe45f30
 80146d0:	3fe00000 	.word	0x3fe00000
 80146d4:	2e037073 	.word	0x2e037073
 80146d8:	3ba3198a 	.word	0x3ba3198a
 80146dc:	252049c1 	.word	0x252049c1
 80146e0:	397b839a 	.word	0x397b839a
 80146e4:	0801f458 	.word	0x0801f458
 80146e8:	22d3      	movs	r2, #211	; 0xd3
 80146ea:	4b0c      	ldr	r3, [pc, #48]	; (801471c <__ieee754_rem_pio2+0x414>)
 80146ec:	0552      	lsls	r2, r2, #21
 80146ee:	f7fd f99f 	bl	8011a30 <__aeabi_dadd>
 80146f2:	4a0b      	ldr	r2, [pc, #44]	; (8014720 <__ieee754_rem_pio2+0x418>)
 80146f4:	4b0b      	ldr	r3, [pc, #44]	; (8014724 <__ieee754_rem_pio2+0x41c>)
 80146f6:	0004      	movs	r4, r0
 80146f8:	000d      	movs	r5, r1
 80146fa:	f7fd f999 	bl	8011a30 <__aeabi_dadd>
 80146fe:	0002      	movs	r2, r0
 8014700:	000b      	movs	r3, r1
 8014702:	4641      	mov	r1, r8
 8014704:	0020      	movs	r0, r4
 8014706:	600a      	str	r2, [r1, #0]
 8014708:	604b      	str	r3, [r1, #4]
 801470a:	0029      	movs	r1, r5
 801470c:	f7fe fb28 	bl	8012d60 <__aeabi_dsub>
 8014710:	4a03      	ldr	r2, [pc, #12]	; (8014720 <__ieee754_rem_pio2+0x418>)
 8014712:	4b04      	ldr	r3, [pc, #16]	; (8014724 <__ieee754_rem_pio2+0x41c>)
 8014714:	e6b9      	b.n	801448a <__ieee754_rem_pio2+0x182>
 8014716:	2303      	movs	r3, #3
 8014718:	e673      	b.n	8014402 <__ieee754_rem_pio2+0xfa>
 801471a:	46c0      	nop			; (mov r8, r8)
 801471c:	3dd0b461 	.word	0x3dd0b461
 8014720:	2e037073 	.word	0x2e037073
 8014724:	3ba3198a 	.word	0x3ba3198a

08014728 <__ieee754_sqrt>:
 8014728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801472a:	4647      	mov	r7, r8
 801472c:	46ce      	mov	lr, r9
 801472e:	4b67      	ldr	r3, [pc, #412]	; (80148cc <__ieee754_sqrt+0x1a4>)
 8014730:	b580      	push	{r7, lr}
 8014732:	000a      	movs	r2, r1
 8014734:	000f      	movs	r7, r1
 8014736:	0019      	movs	r1, r3
 8014738:	0005      	movs	r5, r0
 801473a:	4039      	ands	r1, r7
 801473c:	4299      	cmp	r1, r3
 801473e:	d100      	bne.n	8014742 <__ieee754_sqrt+0x1a>
 8014740:	e09b      	b.n	801487a <__ieee754_sqrt+0x152>
 8014742:	0004      	movs	r4, r0
 8014744:	0001      	movs	r1, r0
 8014746:	2f00      	cmp	r7, #0
 8014748:	dd69      	ble.n	801481e <__ieee754_sqrt+0xf6>
 801474a:	153f      	asrs	r7, r7, #20
 801474c:	d100      	bne.n	8014750 <__ieee754_sqrt+0x28>
 801474e:	e0b4      	b.n	80148ba <__ieee754_sqrt+0x192>
 8014750:	4b5f      	ldr	r3, [pc, #380]	; (80148d0 <__ieee754_sqrt+0x1a8>)
 8014752:	0312      	lsls	r2, r2, #12
 8014754:	469c      	mov	ip, r3
 8014756:	2380      	movs	r3, #128	; 0x80
 8014758:	0b12      	lsrs	r2, r2, #12
 801475a:	035b      	lsls	r3, r3, #13
 801475c:	4313      	orrs	r3, r2
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	0fca      	lsrs	r2, r1, #31
 8014762:	4467      	add	r7, ip
 8014764:	189b      	adds	r3, r3, r2
 8014766:	004a      	lsls	r2, r1, #1
 8014768:	07f8      	lsls	r0, r7, #31
 801476a:	d503      	bpl.n	8014774 <__ieee754_sqrt+0x4c>
 801476c:	0fd2      	lsrs	r2, r2, #31
 801476e:	005b      	lsls	r3, r3, #1
 8014770:	189b      	adds	r3, r3, r2
 8014772:	008a      	lsls	r2, r1, #2
 8014774:	1079      	asrs	r1, r7, #1
 8014776:	468c      	mov	ip, r1
 8014778:	2100      	movs	r1, #0
 801477a:	2080      	movs	r0, #128	; 0x80
 801477c:	2416      	movs	r4, #22
 801477e:	4689      	mov	r9, r1
 8014780:	0380      	lsls	r0, r0, #14
 8014782:	180d      	adds	r5, r1, r0
 8014784:	429d      	cmp	r5, r3
 8014786:	dc02      	bgt.n	801478e <__ieee754_sqrt+0x66>
 8014788:	1829      	adds	r1, r5, r0
 801478a:	1b5b      	subs	r3, r3, r5
 801478c:	4481      	add	r9, r0
 801478e:	0fd5      	lsrs	r5, r2, #31
 8014790:	005b      	lsls	r3, r3, #1
 8014792:	3c01      	subs	r4, #1
 8014794:	195b      	adds	r3, r3, r5
 8014796:	0052      	lsls	r2, r2, #1
 8014798:	0840      	lsrs	r0, r0, #1
 801479a:	2c00      	cmp	r4, #0
 801479c:	d1f1      	bne.n	8014782 <__ieee754_sqrt+0x5a>
 801479e:	2000      	movs	r0, #0
 80147a0:	4680      	mov	r8, r0
 80147a2:	2080      	movs	r0, #128	; 0x80
 80147a4:	2520      	movs	r5, #32
 80147a6:	2700      	movs	r7, #0
 80147a8:	0600      	lsls	r0, r0, #24
 80147aa:	e009      	b.n	80147c0 <__ieee754_sqrt+0x98>
 80147ac:	428b      	cmp	r3, r1
 80147ae:	d05c      	beq.n	801486a <__ieee754_sqrt+0x142>
 80147b0:	0fd4      	lsrs	r4, r2, #31
 80147b2:	005b      	lsls	r3, r3, #1
 80147b4:	3d01      	subs	r5, #1
 80147b6:	18e3      	adds	r3, r4, r3
 80147b8:	0052      	lsls	r2, r2, #1
 80147ba:	0840      	lsrs	r0, r0, #1
 80147bc:	2d00      	cmp	r5, #0
 80147be:	d016      	beq.n	80147ee <__ieee754_sqrt+0xc6>
 80147c0:	19c4      	adds	r4, r0, r7
 80147c2:	428b      	cmp	r3, r1
 80147c4:	ddf2      	ble.n	80147ac <__ieee754_sqrt+0x84>
 80147c6:	1827      	adds	r7, r4, r0
 80147c8:	000e      	movs	r6, r1
 80147ca:	2c00      	cmp	r4, #0
 80147cc:	db49      	blt.n	8014862 <__ieee754_sqrt+0x13a>
 80147ce:	1a5b      	subs	r3, r3, r1
 80147d0:	42a2      	cmp	r2, r4
 80147d2:	4189      	sbcs	r1, r1
 80147d4:	4249      	negs	r1, r1
 80147d6:	1a5b      	subs	r3, r3, r1
 80147d8:	1b12      	subs	r2, r2, r4
 80147da:	0fd4      	lsrs	r4, r2, #31
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	3d01      	subs	r5, #1
 80147e0:	4480      	add	r8, r0
 80147e2:	0031      	movs	r1, r6
 80147e4:	18e3      	adds	r3, r4, r3
 80147e6:	0052      	lsls	r2, r2, #1
 80147e8:	0840      	lsrs	r0, r0, #1
 80147ea:	2d00      	cmp	r5, #0
 80147ec:	d1e8      	bne.n	80147c0 <__ieee754_sqrt+0x98>
 80147ee:	4313      	orrs	r3, r2
 80147f0:	d14e      	bne.n	8014890 <__ieee754_sqrt+0x168>
 80147f2:	4643      	mov	r3, r8
 80147f4:	085b      	lsrs	r3, r3, #1
 80147f6:	4937      	ldr	r1, [pc, #220]	; (80148d4 <__ieee754_sqrt+0x1ac>)
 80147f8:	464a      	mov	r2, r9
 80147fa:	4688      	mov	r8, r1
 80147fc:	4649      	mov	r1, r9
 80147fe:	1052      	asrs	r2, r2, #1
 8014800:	4442      	add	r2, r8
 8014802:	07c9      	lsls	r1, r1, #31
 8014804:	d502      	bpl.n	801480c <__ieee754_sqrt+0xe4>
 8014806:	2180      	movs	r1, #128	; 0x80
 8014808:	0609      	lsls	r1, r1, #24
 801480a:	430b      	orrs	r3, r1
 801480c:	4661      	mov	r1, ip
 801480e:	050f      	lsls	r7, r1, #20
 8014810:	18bd      	adds	r5, r7, r2
 8014812:	0018      	movs	r0, r3
 8014814:	0029      	movs	r1, r5
 8014816:	bc0c      	pop	{r2, r3}
 8014818:	4690      	mov	r8, r2
 801481a:	4699      	mov	r9, r3
 801481c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801481e:	007b      	lsls	r3, r7, #1
 8014820:	085b      	lsrs	r3, r3, #1
 8014822:	4303      	orrs	r3, r0
 8014824:	0039      	movs	r1, r7
 8014826:	2b00      	cmp	r3, #0
 8014828:	d0f5      	beq.n	8014816 <__ieee754_sqrt+0xee>
 801482a:	2f00      	cmp	r7, #0
 801482c:	d13c      	bne.n	80148a8 <__ieee754_sqrt+0x180>
 801482e:	0ae3      	lsrs	r3, r4, #11
 8014830:	3a15      	subs	r2, #21
 8014832:	0564      	lsls	r4, r4, #21
 8014834:	2b00      	cmp	r3, #0
 8014836:	d0fa      	beq.n	801482e <__ieee754_sqrt+0x106>
 8014838:	2080      	movs	r0, #128	; 0x80
 801483a:	0340      	lsls	r0, r0, #13
 801483c:	4203      	tst	r3, r0
 801483e:	d13f      	bne.n	80148c0 <__ieee754_sqrt+0x198>
 8014840:	2700      	movs	r7, #0
 8014842:	e000      	b.n	8014846 <__ieee754_sqrt+0x11e>
 8014844:	000f      	movs	r7, r1
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	1c79      	adds	r1, r7, #1
 801484a:	4203      	tst	r3, r0
 801484c:	d0fa      	beq.n	8014844 <__ieee754_sqrt+0x11c>
 801484e:	0025      	movs	r5, r4
 8014850:	2020      	movs	r0, #32
 8014852:	408d      	lsls	r5, r1
 8014854:	1a40      	subs	r0, r0, r1
 8014856:	0029      	movs	r1, r5
 8014858:	1bd7      	subs	r7, r2, r7
 801485a:	0022      	movs	r2, r4
 801485c:	40c2      	lsrs	r2, r0
 801485e:	431a      	orrs	r2, r3
 8014860:	e776      	b.n	8014750 <__ieee754_sqrt+0x28>
 8014862:	43fe      	mvns	r6, r7
 8014864:	0ff6      	lsrs	r6, r6, #31
 8014866:	198e      	adds	r6, r1, r6
 8014868:	e7b1      	b.n	80147ce <__ieee754_sqrt+0xa6>
 801486a:	4294      	cmp	r4, r2
 801486c:	d8a0      	bhi.n	80147b0 <__ieee754_sqrt+0x88>
 801486e:	1827      	adds	r7, r4, r0
 8014870:	2c00      	cmp	r4, #0
 8014872:	dbf6      	blt.n	8014862 <__ieee754_sqrt+0x13a>
 8014874:	001e      	movs	r6, r3
 8014876:	2300      	movs	r3, #0
 8014878:	e7ae      	b.n	80147d8 <__ieee754_sqrt+0xb0>
 801487a:	0002      	movs	r2, r0
 801487c:	003b      	movs	r3, r7
 801487e:	0028      	movs	r0, r5
 8014880:	0039      	movs	r1, r7
 8014882:	f7fd fffb 	bl	801287c <__aeabi_dmul>
 8014886:	002a      	movs	r2, r5
 8014888:	003b      	movs	r3, r7
 801488a:	f7fd f8d1 	bl	8011a30 <__aeabi_dadd>
 801488e:	e7c2      	b.n	8014816 <__ieee754_sqrt+0xee>
 8014890:	4643      	mov	r3, r8
 8014892:	3301      	adds	r3, #1
 8014894:	d003      	beq.n	801489e <__ieee754_sqrt+0x176>
 8014896:	4643      	mov	r3, r8
 8014898:	3301      	adds	r3, #1
 801489a:	085b      	lsrs	r3, r3, #1
 801489c:	e7ab      	b.n	80147f6 <__ieee754_sqrt+0xce>
 801489e:	2301      	movs	r3, #1
 80148a0:	4698      	mov	r8, r3
 80148a2:	2300      	movs	r3, #0
 80148a4:	44c1      	add	r9, r8
 80148a6:	e7a6      	b.n	80147f6 <__ieee754_sqrt+0xce>
 80148a8:	003b      	movs	r3, r7
 80148aa:	0002      	movs	r2, r0
 80148ac:	f7fe fa58 	bl	8012d60 <__aeabi_dsub>
 80148b0:	0002      	movs	r2, r0
 80148b2:	000b      	movs	r3, r1
 80148b4:	f7fd fbd8 	bl	8012068 <__aeabi_ddiv>
 80148b8:	e7ad      	b.n	8014816 <__ieee754_sqrt+0xee>
 80148ba:	0013      	movs	r3, r2
 80148bc:	2200      	movs	r2, #0
 80148be:	e7bb      	b.n	8014838 <__ieee754_sqrt+0x110>
 80148c0:	2701      	movs	r7, #1
 80148c2:	0021      	movs	r1, r4
 80148c4:	2020      	movs	r0, #32
 80148c6:	427f      	negs	r7, r7
 80148c8:	e7c6      	b.n	8014858 <__ieee754_sqrt+0x130>
 80148ca:	46c0      	nop			; (mov r8, r8)
 80148cc:	7ff00000 	.word	0x7ff00000
 80148d0:	fffffc01 	.word	0xfffffc01
 80148d4:	3fe00000 	.word	0x3fe00000

080148d8 <__ieee754_expf>:
 80148d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148da:	22ff      	movs	r2, #255	; 0xff
 80148dc:	46d6      	mov	lr, sl
 80148de:	464f      	mov	r7, r9
 80148e0:	4646      	mov	r6, r8
 80148e2:	0043      	lsls	r3, r0, #1
 80148e4:	b5c0      	push	{r6, r7, lr}
 80148e6:	1c04      	adds	r4, r0, #0
 80148e8:	0001      	movs	r1, r0
 80148ea:	085b      	lsrs	r3, r3, #1
 80148ec:	05d2      	lsls	r2, r2, #23
 80148ee:	4293      	cmp	r3, r2
 80148f0:	d831      	bhi.n	8014956 <__ieee754_expf+0x7e>
 80148f2:	0fc5      	lsrs	r5, r0, #31
 80148f4:	4293      	cmp	r3, r2
 80148f6:	d035      	beq.n	8014964 <__ieee754_expf+0x8c>
 80148f8:	4a63      	ldr	r2, [pc, #396]	; (8014a88 <__ieee754_expf+0x1b0>)
 80148fa:	4290      	cmp	r0, r2
 80148fc:	dc36      	bgt.n	801496c <__ieee754_expf+0x94>
 80148fe:	2800      	cmp	r0, #0
 8014900:	da00      	bge.n	8014904 <__ieee754_expf+0x2c>
 8014902:	e088      	b.n	8014a16 <__ieee754_expf+0x13e>
 8014904:	4a61      	ldr	r2, [pc, #388]	; (8014a8c <__ieee754_expf+0x1b4>)
 8014906:	4293      	cmp	r3, r2
 8014908:	d935      	bls.n	8014976 <__ieee754_expf+0x9e>
 801490a:	4a61      	ldr	r2, [pc, #388]	; (8014a90 <__ieee754_expf+0x1b8>)
 801490c:	4293      	cmp	r3, r2
 801490e:	d800      	bhi.n	8014912 <__ieee754_expf+0x3a>
 8014910:	e0a9      	b.n	8014a66 <__ieee754_expf+0x18e>
 8014912:	4960      	ldr	r1, [pc, #384]	; (8014a94 <__ieee754_expf+0x1bc>)
 8014914:	1c20      	adds	r0, r4, #0
 8014916:	f7fc f8eb 	bl	8010af0 <__aeabi_fmul>
 801491a:	4b5f      	ldr	r3, [pc, #380]	; (8014a98 <__ieee754_expf+0x1c0>)
 801491c:	00ad      	lsls	r5, r5, #2
 801491e:	58e9      	ldr	r1, [r5, r3]
 8014920:	f7fb fe3a 	bl	8010598 <__aeabi_fadd>
 8014924:	f7fc ffda 	bl	80118dc <__aeabi_f2iz>
 8014928:	0005      	movs	r5, r0
 801492a:	f7fc fff7 	bl	801191c <__aeabi_i2f>
 801492e:	495b      	ldr	r1, [pc, #364]	; (8014a9c <__ieee754_expf+0x1c4>)
 8014930:	1c07      	adds	r7, r0, #0
 8014932:	f7fc f8dd 	bl	8010af0 <__aeabi_fmul>
 8014936:	1c01      	adds	r1, r0, #0
 8014938:	1c20      	adds	r0, r4, #0
 801493a:	f7fc fa0b 	bl	8010d54 <__aeabi_fsub>
 801493e:	4958      	ldr	r1, [pc, #352]	; (8014aa0 <__ieee754_expf+0x1c8>)
 8014940:	4682      	mov	sl, r0
 8014942:	1c38      	adds	r0, r7, #0
 8014944:	f7fc f8d4 	bl	8010af0 <__aeabi_fmul>
 8014948:	1c07      	adds	r7, r0, #0
 801494a:	1c39      	adds	r1, r7, #0
 801494c:	4650      	mov	r0, sl
 801494e:	f7fc fa01 	bl	8010d54 <__aeabi_fsub>
 8014952:	1c04      	adds	r4, r0, #0
 8014954:	e013      	b.n	801497e <__ieee754_expf+0xa6>
 8014956:	f7fb fe1f 	bl	8010598 <__aeabi_fadd>
 801495a:	bc1c      	pop	{r2, r3, r4}
 801495c:	4690      	mov	r8, r2
 801495e:	4699      	mov	r9, r3
 8014960:	46a2      	mov	sl, r4
 8014962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014964:	2d00      	cmp	r5, #0
 8014966:	d0f8      	beq.n	801495a <__ieee754_expf+0x82>
 8014968:	2000      	movs	r0, #0
 801496a:	e7f6      	b.n	801495a <__ieee754_expf+0x82>
 801496c:	494d      	ldr	r1, [pc, #308]	; (8014aa4 <__ieee754_expf+0x1cc>)
 801496e:	1c08      	adds	r0, r1, #0
 8014970:	f7fc f8be 	bl	8010af0 <__aeabi_fmul>
 8014974:	e7f1      	b.n	801495a <__ieee754_expf+0x82>
 8014976:	4a4c      	ldr	r2, [pc, #304]	; (8014aa8 <__ieee754_expf+0x1d0>)
 8014978:	4293      	cmp	r3, r2
 801497a:	d964      	bls.n	8014a46 <__ieee754_expf+0x16e>
 801497c:	2500      	movs	r5, #0
 801497e:	1c21      	adds	r1, r4, #0
 8014980:	1c20      	adds	r0, r4, #0
 8014982:	f7fc f8b5 	bl	8010af0 <__aeabi_fmul>
 8014986:	4949      	ldr	r1, [pc, #292]	; (8014aac <__ieee754_expf+0x1d4>)
 8014988:	1c06      	adds	r6, r0, #0
 801498a:	f7fc f8b1 	bl	8010af0 <__aeabi_fmul>
 801498e:	4948      	ldr	r1, [pc, #288]	; (8014ab0 <__ieee754_expf+0x1d8>)
 8014990:	f7fc f9e0 	bl	8010d54 <__aeabi_fsub>
 8014994:	1c31      	adds	r1, r6, #0
 8014996:	f7fc f8ab 	bl	8010af0 <__aeabi_fmul>
 801499a:	4946      	ldr	r1, [pc, #280]	; (8014ab4 <__ieee754_expf+0x1dc>)
 801499c:	f7fb fdfc 	bl	8010598 <__aeabi_fadd>
 80149a0:	1c31      	adds	r1, r6, #0
 80149a2:	f7fc f8a5 	bl	8010af0 <__aeabi_fmul>
 80149a6:	4944      	ldr	r1, [pc, #272]	; (8014ab8 <__ieee754_expf+0x1e0>)
 80149a8:	f7fc f9d4 	bl	8010d54 <__aeabi_fsub>
 80149ac:	1c31      	adds	r1, r6, #0
 80149ae:	f7fc f89f 	bl	8010af0 <__aeabi_fmul>
 80149b2:	4942      	ldr	r1, [pc, #264]	; (8014abc <__ieee754_expf+0x1e4>)
 80149b4:	f7fb fdf0 	bl	8010598 <__aeabi_fadd>
 80149b8:	1c31      	adds	r1, r6, #0
 80149ba:	f7fc f899 	bl	8010af0 <__aeabi_fmul>
 80149be:	1c01      	adds	r1, r0, #0
 80149c0:	1c20      	adds	r0, r4, #0
 80149c2:	f7fc f9c7 	bl	8010d54 <__aeabi_fsub>
 80149c6:	1c01      	adds	r1, r0, #0
 80149c8:	4680      	mov	r8, r0
 80149ca:	1c20      	adds	r0, r4, #0
 80149cc:	f7fc f890 	bl	8010af0 <__aeabi_fmul>
 80149d0:	4681      	mov	r9, r0
 80149d2:	2d00      	cmp	r5, #0
 80149d4:	d025      	beq.n	8014a22 <__ieee754_expf+0x14a>
 80149d6:	2080      	movs	r0, #128	; 0x80
 80149d8:	4641      	mov	r1, r8
 80149da:	05c0      	lsls	r0, r0, #23
 80149dc:	f7fc f9ba 	bl	8010d54 <__aeabi_fsub>
 80149e0:	1c01      	adds	r1, r0, #0
 80149e2:	4648      	mov	r0, r9
 80149e4:	f7fb ff72 	bl	80108cc <__aeabi_fdiv>
 80149e8:	1c01      	adds	r1, r0, #0
 80149ea:	1c38      	adds	r0, r7, #0
 80149ec:	f7fc f9b2 	bl	8010d54 <__aeabi_fsub>
 80149f0:	4651      	mov	r1, sl
 80149f2:	f7fc f9af 	bl	8010d54 <__aeabi_fsub>
 80149f6:	1c01      	adds	r1, r0, #0
 80149f8:	20fe      	movs	r0, #254	; 0xfe
 80149fa:	0580      	lsls	r0, r0, #22
 80149fc:	f7fc f9aa 	bl	8010d54 <__aeabi_fsub>
 8014a00:	002b      	movs	r3, r5
 8014a02:	337d      	adds	r3, #125	; 0x7d
 8014a04:	da3c      	bge.n	8014a80 <__ieee754_expf+0x1a8>
 8014a06:	21d8      	movs	r1, #216	; 0xd8
 8014a08:	3564      	adds	r5, #100	; 0x64
 8014a0a:	05ed      	lsls	r5, r5, #23
 8014a0c:	1828      	adds	r0, r5, r0
 8014a0e:	0509      	lsls	r1, r1, #20
 8014a10:	f7fc f86e 	bl	8010af0 <__aeabi_fmul>
 8014a14:	e7a1      	b.n	801495a <__ieee754_expf+0x82>
 8014a16:	4a2a      	ldr	r2, [pc, #168]	; (8014ac0 <__ieee754_expf+0x1e8>)
 8014a18:	4293      	cmp	r3, r2
 8014a1a:	d800      	bhi.n	8014a1e <__ieee754_expf+0x146>
 8014a1c:	e772      	b.n	8014904 <__ieee754_expf+0x2c>
 8014a1e:	2000      	movs	r0, #0
 8014a20:	e79b      	b.n	801495a <__ieee754_expf+0x82>
 8014a22:	2180      	movs	r1, #128	; 0x80
 8014a24:	4640      	mov	r0, r8
 8014a26:	05c9      	lsls	r1, r1, #23
 8014a28:	f7fc f994 	bl	8010d54 <__aeabi_fsub>
 8014a2c:	1c01      	adds	r1, r0, #0
 8014a2e:	4648      	mov	r0, r9
 8014a30:	f7fb ff4c 	bl	80108cc <__aeabi_fdiv>
 8014a34:	1c21      	adds	r1, r4, #0
 8014a36:	f7fc f98d 	bl	8010d54 <__aeabi_fsub>
 8014a3a:	1c01      	adds	r1, r0, #0
 8014a3c:	20fe      	movs	r0, #254	; 0xfe
 8014a3e:	0580      	lsls	r0, r0, #22
 8014a40:	f7fc f988 	bl	8010d54 <__aeabi_fsub>
 8014a44:	e789      	b.n	801495a <__ieee754_expf+0x82>
 8014a46:	4917      	ldr	r1, [pc, #92]	; (8014aa4 <__ieee754_expf+0x1cc>)
 8014a48:	1c20      	adds	r0, r4, #0
 8014a4a:	f7fb fda5 	bl	8010598 <__aeabi_fadd>
 8014a4e:	21fe      	movs	r1, #254	; 0xfe
 8014a50:	0589      	lsls	r1, r1, #22
 8014a52:	f7fc fd59 	bl	8011508 <__aeabi_fcmpgt>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	d090      	beq.n	801497c <__ieee754_expf+0xa4>
 8014a5a:	21fe      	movs	r1, #254	; 0xfe
 8014a5c:	1c20      	adds	r0, r4, #0
 8014a5e:	0589      	lsls	r1, r1, #22
 8014a60:	f7fb fd9a 	bl	8010598 <__aeabi_fadd>
 8014a64:	e779      	b.n	801495a <__ieee754_expf+0x82>
 8014a66:	4b17      	ldr	r3, [pc, #92]	; (8014ac4 <__ieee754_expf+0x1ec>)
 8014a68:	00af      	lsls	r7, r5, #2
 8014a6a:	58f9      	ldr	r1, [r7, r3]
 8014a6c:	1c20      	adds	r0, r4, #0
 8014a6e:	2401      	movs	r4, #1
 8014a70:	f7fc f970 	bl	8010d54 <__aeabi_fsub>
 8014a74:	4b14      	ldr	r3, [pc, #80]	; (8014ac8 <__ieee754_expf+0x1f0>)
 8014a76:	1b64      	subs	r4, r4, r5
 8014a78:	4682      	mov	sl, r0
 8014a7a:	58ff      	ldr	r7, [r7, r3]
 8014a7c:	1b65      	subs	r5, r4, r5
 8014a7e:	e764      	b.n	801494a <__ieee754_expf+0x72>
 8014a80:	05ed      	lsls	r5, r5, #23
 8014a82:	1828      	adds	r0, r5, r0
 8014a84:	e769      	b.n	801495a <__ieee754_expf+0x82>
 8014a86:	46c0      	nop			; (mov r8, r8)
 8014a88:	42b17217 	.word	0x42b17217
 8014a8c:	3eb17218 	.word	0x3eb17218
 8014a90:	3f851591 	.word	0x3f851591
 8014a94:	3fb8aa3b 	.word	0x3fb8aa3b
 8014a98:	0801f5e0 	.word	0x0801f5e0
 8014a9c:	3f317180 	.word	0x3f317180
 8014aa0:	3717f7d1 	.word	0x3717f7d1
 8014aa4:	7149f2ca 	.word	0x7149f2ca
 8014aa8:	317fffff 	.word	0x317fffff
 8014aac:	3331bb4c 	.word	0x3331bb4c
 8014ab0:	35ddea0e 	.word	0x35ddea0e
 8014ab4:	388ab355 	.word	0x388ab355
 8014ab8:	3b360b61 	.word	0x3b360b61
 8014abc:	3e2aaaab 	.word	0x3e2aaaab
 8014ac0:	42cff1b5 	.word	0x42cff1b5
 8014ac4:	0801f5e8 	.word	0x0801f5e8
 8014ac8:	0801f5f0 	.word	0x0801f5f0

08014acc <__ieee754_log10f>:
 8014acc:	b570      	push	{r4, r5, r6, lr}
 8014ace:	0003      	movs	r3, r0
 8014ad0:	0042      	lsls	r2, r0, #1
 8014ad2:	d037      	beq.n	8014b44 <__ieee754_log10f+0x78>
 8014ad4:	2800      	cmp	r0, #0
 8014ad6:	db3b      	blt.n	8014b50 <__ieee754_log10f+0x84>
 8014ad8:	4a23      	ldr	r2, [pc, #140]	; (8014b68 <__ieee754_log10f+0x9c>)
 8014ada:	4290      	cmp	r0, r2
 8014adc:	dc3f      	bgt.n	8014b5e <__ieee754_log10f+0x92>
 8014ade:	4923      	ldr	r1, [pc, #140]	; (8014b6c <__ieee754_log10f+0xa0>)
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	4288      	cmp	r0, r1
 8014ae4:	dc06      	bgt.n	8014af4 <__ieee754_log10f+0x28>
 8014ae6:	2198      	movs	r1, #152	; 0x98
 8014ae8:	05c9      	lsls	r1, r1, #23
 8014aea:	f7fc f801 	bl	8010af0 <__aeabi_fmul>
 8014aee:	2219      	movs	r2, #25
 8014af0:	0003      	movs	r3, r0
 8014af2:	4252      	negs	r2, r2
 8014af4:	15d8      	asrs	r0, r3, #23
 8014af6:	387f      	subs	r0, #127	; 0x7f
 8014af8:	1880      	adds	r0, r0, r2
 8014afa:	0fc6      	lsrs	r6, r0, #31
 8014afc:	025b      	lsls	r3, r3, #9
 8014afe:	1980      	adds	r0, r0, r6
 8014b00:	0a5c      	lsrs	r4, r3, #9
 8014b02:	f7fc ff0b 	bl	801191c <__aeabi_i2f>
 8014b06:	1c05      	adds	r5, r0, #0
 8014b08:	207f      	movs	r0, #127	; 0x7f
 8014b0a:	1b80      	subs	r0, r0, r6
 8014b0c:	05c0      	lsls	r0, r0, #23
 8014b0e:	4320      	orrs	r0, r4
 8014b10:	f000 ff7a 	bl	8015a08 <__ieee754_logf>
 8014b14:	4916      	ldr	r1, [pc, #88]	; (8014b70 <__ieee754_log10f+0xa4>)
 8014b16:	1c06      	adds	r6, r0, #0
 8014b18:	1c28      	adds	r0, r5, #0
 8014b1a:	f7fb ffe9 	bl	8010af0 <__aeabi_fmul>
 8014b1e:	4915      	ldr	r1, [pc, #84]	; (8014b74 <__ieee754_log10f+0xa8>)
 8014b20:	1c04      	adds	r4, r0, #0
 8014b22:	1c30      	adds	r0, r6, #0
 8014b24:	f7fb ffe4 	bl	8010af0 <__aeabi_fmul>
 8014b28:	1c01      	adds	r1, r0, #0
 8014b2a:	1c20      	adds	r0, r4, #0
 8014b2c:	f7fb fd34 	bl	8010598 <__aeabi_fadd>
 8014b30:	4911      	ldr	r1, [pc, #68]	; (8014b78 <__ieee754_log10f+0xac>)
 8014b32:	1c04      	adds	r4, r0, #0
 8014b34:	1c28      	adds	r0, r5, #0
 8014b36:	f7fb ffdb 	bl	8010af0 <__aeabi_fmul>
 8014b3a:	1c01      	adds	r1, r0, #0
 8014b3c:	1c20      	adds	r0, r4, #0
 8014b3e:	f7fb fd2b 	bl	8010598 <__aeabi_fadd>
 8014b42:	e004      	b.n	8014b4e <__ieee754_log10f+0x82>
 8014b44:	20cc      	movs	r0, #204	; 0xcc
 8014b46:	2100      	movs	r1, #0
 8014b48:	0600      	lsls	r0, r0, #24
 8014b4a:	f7fb febf 	bl	80108cc <__aeabi_fdiv>
 8014b4e:	bd70      	pop	{r4, r5, r6, pc}
 8014b50:	1c01      	adds	r1, r0, #0
 8014b52:	f7fc f8ff 	bl	8010d54 <__aeabi_fsub>
 8014b56:	2100      	movs	r1, #0
 8014b58:	f7fb feb8 	bl	80108cc <__aeabi_fdiv>
 8014b5c:	e7f7      	b.n	8014b4e <__ieee754_log10f+0x82>
 8014b5e:	1c01      	adds	r1, r0, #0
 8014b60:	f7fb fd1a 	bl	8010598 <__aeabi_fadd>
 8014b64:	e7f3      	b.n	8014b4e <__ieee754_log10f+0x82>
 8014b66:	46c0      	nop			; (mov r8, r8)
 8014b68:	7f7fffff 	.word	0x7f7fffff
 8014b6c:	007fffff 	.word	0x007fffff
 8014b70:	355427db 	.word	0x355427db
 8014b74:	3ede5bd9 	.word	0x3ede5bd9
 8014b78:	3e9a2080 	.word	0x3e9a2080

08014b7c <__kernel_cos>:
 8014b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b7e:	4647      	mov	r7, r8
 8014b80:	46ce      	mov	lr, r9
 8014b82:	b580      	push	{r7, lr}
 8014b84:	b087      	sub	sp, #28
 8014b86:	9200      	str	r2, [sp, #0]
 8014b88:	9301      	str	r3, [sp, #4]
 8014b8a:	4b75      	ldr	r3, [pc, #468]	; (8014d60 <__kernel_cos+0x1e4>)
 8014b8c:	004f      	lsls	r7, r1, #1
 8014b8e:	4681      	mov	r9, r0
 8014b90:	4688      	mov	r8, r1
 8014b92:	087f      	lsrs	r7, r7, #1
 8014b94:	429f      	cmp	r7, r3
 8014b96:	dc63      	bgt.n	8014c60 <__kernel_cos+0xe4>
 8014b98:	f7fe fc46 	bl	8013428 <__aeabi_d2iz>
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d100      	bne.n	8014ba2 <__kernel_cos+0x26>
 8014ba0:	e0d4      	b.n	8014d4c <__kernel_cos+0x1d0>
 8014ba2:	464a      	mov	r2, r9
 8014ba4:	4643      	mov	r3, r8
 8014ba6:	4648      	mov	r0, r9
 8014ba8:	4641      	mov	r1, r8
 8014baa:	f7fd fe67 	bl	801287c <__aeabi_dmul>
 8014bae:	0004      	movs	r4, r0
 8014bb0:	000d      	movs	r5, r1
 8014bb2:	4a6c      	ldr	r2, [pc, #432]	; (8014d64 <__kernel_cos+0x1e8>)
 8014bb4:	4b6c      	ldr	r3, [pc, #432]	; (8014d68 <__kernel_cos+0x1ec>)
 8014bb6:	f7fd fe61 	bl	801287c <__aeabi_dmul>
 8014bba:	4a6c      	ldr	r2, [pc, #432]	; (8014d6c <__kernel_cos+0x1f0>)
 8014bbc:	4b6c      	ldr	r3, [pc, #432]	; (8014d70 <__kernel_cos+0x1f4>)
 8014bbe:	f7fc ff37 	bl	8011a30 <__aeabi_dadd>
 8014bc2:	0022      	movs	r2, r4
 8014bc4:	002b      	movs	r3, r5
 8014bc6:	f7fd fe59 	bl	801287c <__aeabi_dmul>
 8014bca:	4a6a      	ldr	r2, [pc, #424]	; (8014d74 <__kernel_cos+0x1f8>)
 8014bcc:	4b6a      	ldr	r3, [pc, #424]	; (8014d78 <__kernel_cos+0x1fc>)
 8014bce:	f7fe f8c7 	bl	8012d60 <__aeabi_dsub>
 8014bd2:	0022      	movs	r2, r4
 8014bd4:	002b      	movs	r3, r5
 8014bd6:	f7fd fe51 	bl	801287c <__aeabi_dmul>
 8014bda:	4a68      	ldr	r2, [pc, #416]	; (8014d7c <__kernel_cos+0x200>)
 8014bdc:	4b68      	ldr	r3, [pc, #416]	; (8014d80 <__kernel_cos+0x204>)
 8014bde:	f7fc ff27 	bl	8011a30 <__aeabi_dadd>
 8014be2:	0022      	movs	r2, r4
 8014be4:	002b      	movs	r3, r5
 8014be6:	f7fd fe49 	bl	801287c <__aeabi_dmul>
 8014bea:	4a66      	ldr	r2, [pc, #408]	; (8014d84 <__kernel_cos+0x208>)
 8014bec:	4b66      	ldr	r3, [pc, #408]	; (8014d88 <__kernel_cos+0x20c>)
 8014bee:	f7fe f8b7 	bl	8012d60 <__aeabi_dsub>
 8014bf2:	0022      	movs	r2, r4
 8014bf4:	002b      	movs	r3, r5
 8014bf6:	f7fd fe41 	bl	801287c <__aeabi_dmul>
 8014bfa:	4a64      	ldr	r2, [pc, #400]	; (8014d8c <__kernel_cos+0x210>)
 8014bfc:	4b64      	ldr	r3, [pc, #400]	; (8014d90 <__kernel_cos+0x214>)
 8014bfe:	f7fc ff17 	bl	8011a30 <__aeabi_dadd>
 8014c02:	0022      	movs	r2, r4
 8014c04:	002b      	movs	r3, r5
 8014c06:	f7fd fe39 	bl	801287c <__aeabi_dmul>
 8014c0a:	9002      	str	r0, [sp, #8]
 8014c0c:	9103      	str	r1, [sp, #12]
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4b60      	ldr	r3, [pc, #384]	; (8014d94 <__kernel_cos+0x218>)
 8014c12:	0020      	movs	r0, r4
 8014c14:	0029      	movs	r1, r5
 8014c16:	f7fd fe31 	bl	801287c <__aeabi_dmul>
 8014c1a:	9a02      	ldr	r2, [sp, #8]
 8014c1c:	9b03      	ldr	r3, [sp, #12]
 8014c1e:	0006      	movs	r6, r0
 8014c20:	000f      	movs	r7, r1
 8014c22:	0020      	movs	r0, r4
 8014c24:	0029      	movs	r1, r5
 8014c26:	f7fd fe29 	bl	801287c <__aeabi_dmul>
 8014c2a:	9a00      	ldr	r2, [sp, #0]
 8014c2c:	9b01      	ldr	r3, [sp, #4]
 8014c2e:	0004      	movs	r4, r0
 8014c30:	000d      	movs	r5, r1
 8014c32:	4648      	mov	r0, r9
 8014c34:	4641      	mov	r1, r8
 8014c36:	f7fd fe21 	bl	801287c <__aeabi_dmul>
 8014c3a:	0002      	movs	r2, r0
 8014c3c:	000b      	movs	r3, r1
 8014c3e:	0020      	movs	r0, r4
 8014c40:	0029      	movs	r1, r5
 8014c42:	f7fe f88d 	bl	8012d60 <__aeabi_dsub>
 8014c46:	0002      	movs	r2, r0
 8014c48:	000b      	movs	r3, r1
 8014c4a:	0030      	movs	r0, r6
 8014c4c:	0039      	movs	r1, r7
 8014c4e:	f7fe f887 	bl	8012d60 <__aeabi_dsub>
 8014c52:	0002      	movs	r2, r0
 8014c54:	000b      	movs	r3, r1
 8014c56:	2000      	movs	r0, #0
 8014c58:	494f      	ldr	r1, [pc, #316]	; (8014d98 <__kernel_cos+0x21c>)
 8014c5a:	f7fe f881 	bl	8012d60 <__aeabi_dsub>
 8014c5e:	e070      	b.n	8014d42 <__kernel_cos+0x1c6>
 8014c60:	0002      	movs	r2, r0
 8014c62:	000b      	movs	r3, r1
 8014c64:	f7fd fe0a 	bl	801287c <__aeabi_dmul>
 8014c68:	0004      	movs	r4, r0
 8014c6a:	000d      	movs	r5, r1
 8014c6c:	4a3d      	ldr	r2, [pc, #244]	; (8014d64 <__kernel_cos+0x1e8>)
 8014c6e:	4b3e      	ldr	r3, [pc, #248]	; (8014d68 <__kernel_cos+0x1ec>)
 8014c70:	f7fd fe04 	bl	801287c <__aeabi_dmul>
 8014c74:	4a3d      	ldr	r2, [pc, #244]	; (8014d6c <__kernel_cos+0x1f0>)
 8014c76:	4b3e      	ldr	r3, [pc, #248]	; (8014d70 <__kernel_cos+0x1f4>)
 8014c78:	f7fc feda 	bl	8011a30 <__aeabi_dadd>
 8014c7c:	0022      	movs	r2, r4
 8014c7e:	002b      	movs	r3, r5
 8014c80:	f7fd fdfc 	bl	801287c <__aeabi_dmul>
 8014c84:	4a3b      	ldr	r2, [pc, #236]	; (8014d74 <__kernel_cos+0x1f8>)
 8014c86:	4b3c      	ldr	r3, [pc, #240]	; (8014d78 <__kernel_cos+0x1fc>)
 8014c88:	f7fe f86a 	bl	8012d60 <__aeabi_dsub>
 8014c8c:	0022      	movs	r2, r4
 8014c8e:	002b      	movs	r3, r5
 8014c90:	f7fd fdf4 	bl	801287c <__aeabi_dmul>
 8014c94:	4a39      	ldr	r2, [pc, #228]	; (8014d7c <__kernel_cos+0x200>)
 8014c96:	4b3a      	ldr	r3, [pc, #232]	; (8014d80 <__kernel_cos+0x204>)
 8014c98:	f7fc feca 	bl	8011a30 <__aeabi_dadd>
 8014c9c:	0022      	movs	r2, r4
 8014c9e:	002b      	movs	r3, r5
 8014ca0:	f7fd fdec 	bl	801287c <__aeabi_dmul>
 8014ca4:	4a37      	ldr	r2, [pc, #220]	; (8014d84 <__kernel_cos+0x208>)
 8014ca6:	4b38      	ldr	r3, [pc, #224]	; (8014d88 <__kernel_cos+0x20c>)
 8014ca8:	f7fe f85a 	bl	8012d60 <__aeabi_dsub>
 8014cac:	0022      	movs	r2, r4
 8014cae:	002b      	movs	r3, r5
 8014cb0:	f7fd fde4 	bl	801287c <__aeabi_dmul>
 8014cb4:	4a35      	ldr	r2, [pc, #212]	; (8014d8c <__kernel_cos+0x210>)
 8014cb6:	4b36      	ldr	r3, [pc, #216]	; (8014d90 <__kernel_cos+0x214>)
 8014cb8:	f7fc feba 	bl	8011a30 <__aeabi_dadd>
 8014cbc:	002b      	movs	r3, r5
 8014cbe:	0022      	movs	r2, r4
 8014cc0:	f7fd fddc 	bl	801287c <__aeabi_dmul>
 8014cc4:	4b35      	ldr	r3, [pc, #212]	; (8014d9c <__kernel_cos+0x220>)
 8014cc6:	9002      	str	r0, [sp, #8]
 8014cc8:	9103      	str	r1, [sp, #12]
 8014cca:	429f      	cmp	r7, r3
 8014ccc:	dd9f      	ble.n	8014c0e <__kernel_cos+0x92>
 8014cce:	4b34      	ldr	r3, [pc, #208]	; (8014da0 <__kernel_cos+0x224>)
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	429f      	cmp	r7, r3
 8014cd4:	dc3d      	bgt.n	8014d52 <__kernel_cos+0x1d6>
 8014cd6:	4933      	ldr	r1, [pc, #204]	; (8014da4 <__kernel_cos+0x228>)
 8014cd8:	2000      	movs	r0, #0
 8014cda:	187b      	adds	r3, r7, r1
 8014cdc:	492e      	ldr	r1, [pc, #184]	; (8014d98 <__kernel_cos+0x21c>)
 8014cde:	0016      	movs	r6, r2
 8014ce0:	001f      	movs	r7, r3
 8014ce2:	f7fe f83d 	bl	8012d60 <__aeabi_dsub>
 8014ce6:	9004      	str	r0, [sp, #16]
 8014ce8:	9105      	str	r1, [sp, #20]
 8014cea:	2200      	movs	r2, #0
 8014cec:	4b29      	ldr	r3, [pc, #164]	; (8014d94 <__kernel_cos+0x218>)
 8014cee:	0020      	movs	r0, r4
 8014cf0:	0029      	movs	r1, r5
 8014cf2:	f7fd fdc3 	bl	801287c <__aeabi_dmul>
 8014cf6:	0032      	movs	r2, r6
 8014cf8:	003b      	movs	r3, r7
 8014cfa:	f7fe f831 	bl	8012d60 <__aeabi_dsub>
 8014cfe:	9a02      	ldr	r2, [sp, #8]
 8014d00:	9b03      	ldr	r3, [sp, #12]
 8014d02:	0006      	movs	r6, r0
 8014d04:	000f      	movs	r7, r1
 8014d06:	0020      	movs	r0, r4
 8014d08:	0029      	movs	r1, r5
 8014d0a:	f7fd fdb7 	bl	801287c <__aeabi_dmul>
 8014d0e:	9a00      	ldr	r2, [sp, #0]
 8014d10:	9b01      	ldr	r3, [sp, #4]
 8014d12:	0004      	movs	r4, r0
 8014d14:	000d      	movs	r5, r1
 8014d16:	4648      	mov	r0, r9
 8014d18:	4641      	mov	r1, r8
 8014d1a:	f7fd fdaf 	bl	801287c <__aeabi_dmul>
 8014d1e:	0002      	movs	r2, r0
 8014d20:	000b      	movs	r3, r1
 8014d22:	0020      	movs	r0, r4
 8014d24:	0029      	movs	r1, r5
 8014d26:	f7fe f81b 	bl	8012d60 <__aeabi_dsub>
 8014d2a:	0002      	movs	r2, r0
 8014d2c:	000b      	movs	r3, r1
 8014d2e:	0030      	movs	r0, r6
 8014d30:	0039      	movs	r1, r7
 8014d32:	f7fe f815 	bl	8012d60 <__aeabi_dsub>
 8014d36:	0002      	movs	r2, r0
 8014d38:	000b      	movs	r3, r1
 8014d3a:	9804      	ldr	r0, [sp, #16]
 8014d3c:	9905      	ldr	r1, [sp, #20]
 8014d3e:	f7fe f80f 	bl	8012d60 <__aeabi_dsub>
 8014d42:	b007      	add	sp, #28
 8014d44:	bc0c      	pop	{r2, r3}
 8014d46:	4690      	mov	r8, r2
 8014d48:	4699      	mov	r9, r3
 8014d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	4912      	ldr	r1, [pc, #72]	; (8014d98 <__kernel_cos+0x21c>)
 8014d50:	e7f7      	b.n	8014d42 <__kernel_cos+0x1c6>
 8014d52:	4b15      	ldr	r3, [pc, #84]	; (8014da8 <__kernel_cos+0x22c>)
 8014d54:	2600      	movs	r6, #0
 8014d56:	9204      	str	r2, [sp, #16]
 8014d58:	9305      	str	r3, [sp, #20]
 8014d5a:	4f14      	ldr	r7, [pc, #80]	; (8014dac <__kernel_cos+0x230>)
 8014d5c:	e7c5      	b.n	8014cea <__kernel_cos+0x16e>
 8014d5e:	46c0      	nop			; (mov r8, r8)
 8014d60:	3e3fffff 	.word	0x3e3fffff
 8014d64:	be8838d4 	.word	0xbe8838d4
 8014d68:	bda8fae9 	.word	0xbda8fae9
 8014d6c:	bdb4b1c4 	.word	0xbdb4b1c4
 8014d70:	3e21ee9e 	.word	0x3e21ee9e
 8014d74:	809c52ad 	.word	0x809c52ad
 8014d78:	3e927e4f 	.word	0x3e927e4f
 8014d7c:	19cb1590 	.word	0x19cb1590
 8014d80:	3efa01a0 	.word	0x3efa01a0
 8014d84:	16c15177 	.word	0x16c15177
 8014d88:	3f56c16c 	.word	0x3f56c16c
 8014d8c:	5555554c 	.word	0x5555554c
 8014d90:	3fa55555 	.word	0x3fa55555
 8014d94:	3fe00000 	.word	0x3fe00000
 8014d98:	3ff00000 	.word	0x3ff00000
 8014d9c:	3fd33332 	.word	0x3fd33332
 8014da0:	3fe90000 	.word	0x3fe90000
 8014da4:	ffe00000 	.word	0xffe00000
 8014da8:	3fe70000 	.word	0x3fe70000
 8014dac:	3fd20000 	.word	0x3fd20000

08014db0 <__kernel_rem_pio2>:
 8014db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014db2:	46de      	mov	lr, fp
 8014db4:	464e      	mov	r6, r9
 8014db6:	4645      	mov	r5, r8
 8014db8:	4657      	mov	r7, sl
 8014dba:	b5e0      	push	{r5, r6, r7, lr}
 8014dbc:	4cdc      	ldr	r4, [pc, #880]	; (8015130 <__kernel_rem_pio2+0x380>)
 8014dbe:	44a5      	add	sp, r4
 8014dc0:	910d      	str	r1, [sp, #52]	; 0x34
 8014dc2:	0014      	movs	r4, r2
 8014dc4:	0019      	movs	r1, r3
 8014dc6:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 8014dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8014dca:	4bda      	ldr	r3, [pc, #872]	; (8015134 <__kernel_rem_pio2+0x384>)
 8014dcc:	0092      	lsls	r2, r2, #2
 8014dce:	58d6      	ldr	r6, [r2, r3]
 8014dd0:	1e4d      	subs	r5, r1, #1
 8014dd2:	9003      	str	r0, [sp, #12]
 8014dd4:	2118      	movs	r1, #24
 8014dd6:	1ee0      	subs	r0, r4, #3
 8014dd8:	9606      	str	r6, [sp, #24]
 8014dda:	9502      	str	r5, [sp, #8]
 8014ddc:	f7fc fa44 	bl	8011268 <__divsi3>
 8014de0:	43c3      	mvns	r3, r0
 8014de2:	0001      	movs	r1, r0
 8014de4:	17db      	asrs	r3, r3, #31
 8014de6:	4019      	ands	r1, r3
 8014de8:	1c4b      	adds	r3, r1, #1
 8014dea:	009a      	lsls	r2, r3, #2
 8014dec:	1a9b      	subs	r3, r3, r2
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	191b      	adds	r3, r3, r4
 8014df2:	910b      	str	r1, [sp, #44]	; 0x2c
 8014df4:	9305      	str	r3, [sp, #20]
 8014df6:	1b4c      	subs	r4, r1, r5
 8014df8:	1977      	adds	r7, r6, r5
 8014dfa:	d418      	bmi.n	8014e2e <__kernel_rem_pio2+0x7e>
 8014dfc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014dfe:	00a5      	lsls	r5, r4, #2
 8014e00:	469c      	mov	ip, r3
 8014e02:	193f      	adds	r7, r7, r4
 8014e04:	ae22      	add	r6, sp, #136	; 0x88
 8014e06:	4465      	add	r5, ip
 8014e08:	3701      	adds	r7, #1
 8014e0a:	e007      	b.n	8014e1c <__kernel_rem_pio2+0x6c>
 8014e0c:	6828      	ldr	r0, [r5, #0]
 8014e0e:	f7fe fb41 	bl	8013494 <__aeabi_i2d>
 8014e12:	3401      	adds	r4, #1
 8014e14:	c603      	stmia	r6!, {r0, r1}
 8014e16:	3504      	adds	r5, #4
 8014e18:	42bc      	cmp	r4, r7
 8014e1a:	d008      	beq.n	8014e2e <__kernel_rem_pio2+0x7e>
 8014e1c:	2c00      	cmp	r4, #0
 8014e1e:	daf5      	bge.n	8014e0c <__kernel_rem_pio2+0x5c>
 8014e20:	2000      	movs	r0, #0
 8014e22:	2100      	movs	r1, #0
 8014e24:	3401      	adds	r4, #1
 8014e26:	c603      	stmia	r6!, {r0, r1}
 8014e28:	3504      	adds	r5, #4
 8014e2a:	42bc      	cmp	r4, r7
 8014e2c:	d1f6      	bne.n	8014e1c <__kernel_rem_pio2+0x6c>
 8014e2e:	9b06      	ldr	r3, [sp, #24]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	da01      	bge.n	8014e38 <__kernel_rem_pio2+0x88>
 8014e34:	f000 fbfd 	bl	8015632 <__kernel_rem_pio2+0x882>
 8014e38:	9b06      	ldr	r3, [sp, #24]
 8014e3a:	9903      	ldr	r1, [sp, #12]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	469a      	mov	sl, r3
 8014e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e44:	00da      	lsls	r2, r3, #3
 8014e46:	4694      	mov	ip, r2
 8014e48:	9200      	str	r2, [sp, #0]
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	4691      	mov	r9, r2
 8014e4e:	aa72      	add	r2, sp, #456	; 0x1c8
 8014e50:	9204      	str	r2, [sp, #16]
 8014e52:	4ab9      	ldr	r2, [pc, #740]	; (8015138 <__kernel_rem_pio2+0x388>)
 8014e54:	4461      	add	r1, ip
 8014e56:	4693      	mov	fp, r2
 8014e58:	4688      	mov	r8, r1
 8014e5a:	ab9a      	add	r3, sp, #616	; 0x268
 8014e5c:	4463      	add	r3, ip
 8014e5e:	449b      	add	fp, r3
 8014e60:	9b02      	ldr	r3, [sp, #8]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	da00      	bge.n	8014e68 <__kernel_rem_pio2+0xb8>
 8014e66:	e1bc      	b.n	80151e2 <__kernel_rem_pio2+0x432>
 8014e68:	465d      	mov	r5, fp
 8014e6a:	2600      	movs	r6, #0
 8014e6c:	2700      	movs	r7, #0
 8014e6e:	9c03      	ldr	r4, [sp, #12]
 8014e70:	444d      	add	r5, r9
 8014e72:	682a      	ldr	r2, [r5, #0]
 8014e74:	686b      	ldr	r3, [r5, #4]
 8014e76:	cc03      	ldmia	r4!, {r0, r1}
 8014e78:	f7fd fd00 	bl	801287c <__aeabi_dmul>
 8014e7c:	0002      	movs	r2, r0
 8014e7e:	000b      	movs	r3, r1
 8014e80:	0030      	movs	r0, r6
 8014e82:	0039      	movs	r1, r7
 8014e84:	f7fc fdd4 	bl	8011a30 <__aeabi_dadd>
 8014e88:	3d08      	subs	r5, #8
 8014e8a:	0006      	movs	r6, r0
 8014e8c:	000f      	movs	r7, r1
 8014e8e:	4544      	cmp	r4, r8
 8014e90:	d1ef      	bne.n	8014e72 <__kernel_rem_pio2+0xc2>
 8014e92:	9b04      	ldr	r3, [sp, #16]
 8014e94:	444b      	add	r3, r9
 8014e96:	601e      	str	r6, [r3, #0]
 8014e98:	605f      	str	r7, [r3, #4]
 8014e9a:	2308      	movs	r3, #8
 8014e9c:	469c      	mov	ip, r3
 8014e9e:	44e1      	add	r9, ip
 8014ea0:	45d1      	cmp	r9, sl
 8014ea2:	d1dd      	bne.n	8014e60 <__kernel_rem_pio2+0xb0>
 8014ea4:	a80e      	add	r0, sp, #56	; 0x38
 8014ea6:	2104      	movs	r1, #4
 8014ea8:	4684      	mov	ip, r0
 8014eaa:	4249      	negs	r1, r1
 8014eac:	4461      	add	r1, ip
 8014eae:	468c      	mov	ip, r1
 8014eb0:	9a06      	ldr	r2, [sp, #24]
 8014eb2:	0093      	lsls	r3, r2, #2
 8014eb4:	449c      	add	ip, r3
 8014eb6:	4661      	mov	r1, ip
 8014eb8:	4684      	mov	ip, r0
 8014eba:	910a      	str	r1, [sp, #40]	; 0x28
 8014ebc:	9903      	ldr	r1, [sp, #12]
 8014ebe:	3b08      	subs	r3, #8
 8014ec0:	4463      	add	r3, ip
 8014ec2:	468c      	mov	ip, r1
 8014ec4:	930c      	str	r3, [sp, #48]	; 0x30
 8014ec6:	9b00      	ldr	r3, [sp, #0]
 8014ec8:	9200      	str	r2, [sp, #0]
 8014eca:	4463      	add	r3, ip
 8014ecc:	469b      	mov	fp, r3
 8014ece:	9a00      	ldr	r2, [sp, #0]
 8014ed0:	9804      	ldr	r0, [sp, #16]
 8014ed2:	00d1      	lsls	r1, r2, #3
 8014ed4:	0003      	movs	r3, r0
 8014ed6:	468c      	mov	ip, r1
 8014ed8:	4463      	add	r3, ip
 8014eda:	9108      	str	r1, [sp, #32]
 8014edc:	681e      	ldr	r6, [r3, #0]
 8014ede:	685f      	ldr	r7, [r3, #4]
 8014ee0:	2a00      	cmp	r2, #0
 8014ee2:	dd33      	ble.n	8014f4c <__kernel_rem_pio2+0x19c>
 8014ee4:	4995      	ldr	r1, [pc, #596]	; (801513c <__kernel_rem_pio2+0x38c>)
 8014ee6:	4680      	mov	r8, r0
 8014ee8:	468c      	mov	ip, r1
 8014eea:	4462      	add	r2, ip
 8014eec:	00d3      	lsls	r3, r2, #3
 8014eee:	4498      	add	r8, r3
 8014ef0:	ab70      	add	r3, sp, #448	; 0x1c0
 8014ef2:	469a      	mov	sl, r3
 8014ef4:	ab0e      	add	r3, sp, #56	; 0x38
 8014ef6:	4699      	mov	r9, r3
 8014ef8:	2200      	movs	r2, #0
 8014efa:	4b91      	ldr	r3, [pc, #580]	; (8015140 <__kernel_rem_pio2+0x390>)
 8014efc:	0030      	movs	r0, r6
 8014efe:	0039      	movs	r1, r7
 8014f00:	f7fd fcbc 	bl	801287c <__aeabi_dmul>
 8014f04:	f7fe fa90 	bl	8013428 <__aeabi_d2iz>
 8014f08:	f7fe fac4 	bl	8013494 <__aeabi_i2d>
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	4b8d      	ldr	r3, [pc, #564]	; (8015144 <__kernel_rem_pio2+0x394>)
 8014f10:	0004      	movs	r4, r0
 8014f12:	000d      	movs	r5, r1
 8014f14:	f7fd fcb2 	bl	801287c <__aeabi_dmul>
 8014f18:	0002      	movs	r2, r0
 8014f1a:	000b      	movs	r3, r1
 8014f1c:	0030      	movs	r0, r6
 8014f1e:	0039      	movs	r1, r7
 8014f20:	f7fd ff1e 	bl	8012d60 <__aeabi_dsub>
 8014f24:	f7fe fa80 	bl	8013428 <__aeabi_d2iz>
 8014f28:	464b      	mov	r3, r9
 8014f2a:	c301      	stmia	r3!, {r0}
 8014f2c:	4699      	mov	r9, r3
 8014f2e:	4643      	mov	r3, r8
 8014f30:	0020      	movs	r0, r4
 8014f32:	681a      	ldr	r2, [r3, #0]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	0029      	movs	r1, r5
 8014f38:	f7fc fd7a 	bl	8011a30 <__aeabi_dadd>
 8014f3c:	2308      	movs	r3, #8
 8014f3e:	425b      	negs	r3, r3
 8014f40:	469c      	mov	ip, r3
 8014f42:	44e0      	add	r8, ip
 8014f44:	0006      	movs	r6, r0
 8014f46:	000f      	movs	r7, r1
 8014f48:	45d0      	cmp	r8, sl
 8014f4a:	d1d5      	bne.n	8014ef8 <__kernel_rem_pio2+0x148>
 8014f4c:	9b05      	ldr	r3, [sp, #20]
 8014f4e:	0030      	movs	r0, r6
 8014f50:	001a      	movs	r2, r3
 8014f52:	0039      	movs	r1, r7
 8014f54:	4698      	mov	r8, r3
 8014f56:	f000 fce5 	bl	8015924 <scalbn>
 8014f5a:	23ff      	movs	r3, #255	; 0xff
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	059b      	lsls	r3, r3, #22
 8014f60:	0004      	movs	r4, r0
 8014f62:	000d      	movs	r5, r1
 8014f64:	f7fd fc8a 	bl	801287c <__aeabi_dmul>
 8014f68:	f000 fc38 	bl	80157dc <floor>
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	4b76      	ldr	r3, [pc, #472]	; (8015148 <__kernel_rem_pio2+0x398>)
 8014f70:	f7fd fc84 	bl	801287c <__aeabi_dmul>
 8014f74:	0002      	movs	r2, r0
 8014f76:	000b      	movs	r3, r1
 8014f78:	0020      	movs	r0, r4
 8014f7a:	0029      	movs	r1, r5
 8014f7c:	f7fd fef0 	bl	8012d60 <__aeabi_dsub>
 8014f80:	000d      	movs	r5, r1
 8014f82:	0004      	movs	r4, r0
 8014f84:	f7fe fa50 	bl	8013428 <__aeabi_d2iz>
 8014f88:	4681      	mov	r9, r0
 8014f8a:	f7fe fa83 	bl	8013494 <__aeabi_i2d>
 8014f8e:	0002      	movs	r2, r0
 8014f90:	000b      	movs	r3, r1
 8014f92:	0020      	movs	r0, r4
 8014f94:	0029      	movs	r1, r5
 8014f96:	f7fd fee3 	bl	8012d60 <__aeabi_dsub>
 8014f9a:	0006      	movs	r6, r0
 8014f9c:	4640      	mov	r0, r8
 8014f9e:	000f      	movs	r7, r1
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	dc00      	bgt.n	8014fa6 <__kernel_rem_pio2+0x1f6>
 8014fa4:	e0ee      	b.n	8015184 <__kernel_rem_pio2+0x3d4>
 8014fa6:	9b00      	ldr	r3, [sp, #0]
 8014fa8:	2118      	movs	r1, #24
 8014faa:	1e5a      	subs	r2, r3, #1
 8014fac:	0092      	lsls	r2, r2, #2
 8014fae:	ab0e      	add	r3, sp, #56	; 0x38
 8014fb0:	589b      	ldr	r3, [r3, r2]
 8014fb2:	1a09      	subs	r1, r1, r0
 8014fb4:	001d      	movs	r5, r3
 8014fb6:	410d      	asrs	r5, r1
 8014fb8:	44a9      	add	r9, r5
 8014fba:	408d      	lsls	r5, r1
 8014fbc:	1b5d      	subs	r5, r3, r5
 8014fbe:	ab0e      	add	r3, sp, #56	; 0x38
 8014fc0:	509d      	str	r5, [r3, r2]
 8014fc2:	2317      	movs	r3, #23
 8014fc4:	1a1b      	subs	r3, r3, r0
 8014fc6:	411d      	asrs	r5, r3
 8014fc8:	2d00      	cmp	r5, #0
 8014fca:	dd2d      	ble.n	8015028 <__kernel_rem_pio2+0x278>
 8014fcc:	2301      	movs	r3, #1
 8014fce:	469c      	mov	ip, r3
 8014fd0:	9b00      	ldr	r3, [sp, #0]
 8014fd2:	44e1      	add	r9, ip
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	dc00      	bgt.n	8014fda <__kernel_rem_pio2+0x22a>
 8014fd8:	e21c      	b.n	8015414 <__kernel_rem_pio2+0x664>
 8014fda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8014fdc:	2301      	movs	r3, #1
 8014fde:	2c00      	cmp	r4, #0
 8014fe0:	d000      	beq.n	8014fe4 <__kernel_rem_pio2+0x234>
 8014fe2:	e0b5      	b.n	8015150 <__kernel_rem_pio2+0x3a0>
 8014fe4:	9a00      	ldr	r2, [sp, #0]
 8014fe6:	2a01      	cmp	r2, #1
 8014fe8:	d009      	beq.n	8014ffe <__kernel_rem_pio2+0x24e>
 8014fea:	0099      	lsls	r1, r3, #2
 8014fec:	aa0e      	add	r2, sp, #56	; 0x38
 8014fee:	5854      	ldr	r4, [r2, r1]
 8014ff0:	3301      	adds	r3, #1
 8014ff2:	2c00      	cmp	r4, #0
 8014ff4:	d000      	beq.n	8014ff8 <__kernel_rem_pio2+0x248>
 8014ff6:	e0ac      	b.n	8015152 <__kernel_rem_pio2+0x3a2>
 8014ff8:	9a00      	ldr	r2, [sp, #0]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d1f5      	bne.n	8014fea <__kernel_rem_pio2+0x23a>
 8014ffe:	9b05      	ldr	r3, [sp, #20]
 8015000:	2b00      	cmp	r3, #0
 8015002:	dd0e      	ble.n	8015022 <__kernel_rem_pio2+0x272>
 8015004:	2b01      	cmp	r3, #1
 8015006:	d100      	bne.n	801500a <__kernel_rem_pio2+0x25a>
 8015008:	e1a8      	b.n	801535c <__kernel_rem_pio2+0x5ac>
 801500a:	2b02      	cmp	r3, #2
 801500c:	d109      	bne.n	8015022 <__kernel_rem_pio2+0x272>
 801500e:	9b00      	ldr	r3, [sp, #0]
 8015010:	a90e      	add	r1, sp, #56	; 0x38
 8015012:	1e5a      	subs	r2, r3, #1
 8015014:	0092      	lsls	r2, r2, #2
 8015016:	ab0e      	add	r3, sp, #56	; 0x38
 8015018:	589b      	ldr	r3, [r3, r2]
 801501a:	9307      	str	r3, [sp, #28]
 801501c:	029b      	lsls	r3, r3, #10
 801501e:	0a9b      	lsrs	r3, r3, #10
 8015020:	508b      	str	r3, [r1, r2]
 8015022:	2d02      	cmp	r5, #2
 8015024:	d100      	bne.n	8015028 <__kernel_rem_pio2+0x278>
 8015026:	e0c1      	b.n	80151ac <__kernel_rem_pio2+0x3fc>
 8015028:	2300      	movs	r3, #0
 801502a:	2200      	movs	r2, #0
 801502c:	0030      	movs	r0, r6
 801502e:	0039      	movs	r1, r7
 8015030:	f7fc fa16 	bl	8011460 <__aeabi_dcmpeq>
 8015034:	9b00      	ldr	r3, [sp, #0]
 8015036:	2800      	cmp	r0, #0
 8015038:	d100      	bne.n	801503c <__kernel_rem_pio2+0x28c>
 801503a:	e294      	b.n	8015566 <__kernel_rem_pio2+0x7b6>
 801503c:	9a06      	ldr	r2, [sp, #24]
 801503e:	1e59      	subs	r1, r3, #1
 8015040:	428a      	cmp	r2, r1
 8015042:	dc10      	bgt.n	8015066 <__kernel_rem_pio2+0x2b6>
 8015044:	4a41      	ldr	r2, [pc, #260]	; (801514c <__kernel_rem_pio2+0x39c>)
 8015046:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015048:	4694      	mov	ip, r2
 801504a:	aa0e      	add	r2, sp, #56	; 0x38
 801504c:	4463      	add	r3, ip
 801504e:	4694      	mov	ip, r2
 8015050:	2200      	movs	r2, #0
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4463      	add	r3, ip
 8015056:	681c      	ldr	r4, [r3, #0]
 8015058:	3b04      	subs	r3, #4
 801505a:	4322      	orrs	r2, r4
 801505c:	4283      	cmp	r3, r0
 801505e:	d1fa      	bne.n	8015056 <__kernel_rem_pio2+0x2a6>
 8015060:	2a00      	cmp	r2, #0
 8015062:	d000      	beq.n	8015066 <__kernel_rem_pio2+0x2b6>
 8015064:	e0c0      	b.n	80151e8 <__kernel_rem_pio2+0x438>
 8015066:	9b06      	ldr	r3, [sp, #24]
 8015068:	aa0e      	add	r2, sp, #56	; 0x38
 801506a:	3b01      	subs	r3, #1
 801506c:	009b      	lsls	r3, r3, #2
 801506e:	58d3      	ldr	r3, [r2, r3]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d000      	beq.n	8015076 <__kernel_rem_pio2+0x2c6>
 8015074:	e0b3      	b.n	80151de <__kernel_rem_pio2+0x42e>
 8015076:	2201      	movs	r2, #1
 8015078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801507a:	3b04      	subs	r3, #4
 801507c:	6859      	ldr	r1, [r3, #4]
 801507e:	3201      	adds	r2, #1
 8015080:	2900      	cmp	r1, #0
 8015082:	d0fa      	beq.n	801507a <__kernel_rem_pio2+0x2ca>
 8015084:	9b00      	ldr	r3, [sp, #0]
 8015086:	469c      	mov	ip, r3
 8015088:	4462      	add	r2, ip
 801508a:	0011      	movs	r1, r2
 801508c:	9207      	str	r2, [sp, #28]
 801508e:	001a      	movs	r2, r3
 8015090:	3301      	adds	r3, #1
 8015092:	428b      	cmp	r3, r1
 8015094:	dc46      	bgt.n	8015124 <__kernel_rem_pio2+0x374>
 8015096:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015098:	4663      	mov	r3, ip
 801509a:	4680      	mov	r8, r0
 801509c:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 801509e:	4443      	add	r3, r8
 80150a0:	46a0      	mov	r8, r4
 80150a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80150a4:	009b      	lsls	r3, r3, #2
 80150a6:	46a1      	mov	r9, r4
 80150a8:	444a      	add	r2, r9
 80150aa:	4498      	add	r8, r3
 80150ac:	00d3      	lsls	r3, r2, #3
 80150ae:	aa22      	add	r2, sp, #136	; 0x88
 80150b0:	4691      	mov	r9, r2
 80150b2:	9a04      	ldr	r2, [sp, #16]
 80150b4:	4499      	add	r9, r3
 80150b6:	4694      	mov	ip, r2
 80150b8:	9b08      	ldr	r3, [sp, #32]
 80150ba:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80150bc:	4463      	add	r3, ip
 80150be:	4684      	mov	ip, r0
 80150c0:	4461      	add	r1, ip
 80150c2:	4694      	mov	ip, r2
 80150c4:	469a      	mov	sl, r3
 80150c6:	008b      	lsls	r3, r1, #2
 80150c8:	4463      	add	r3, ip
 80150ca:	9300      	str	r3, [sp, #0]
 80150cc:	4643      	mov	r3, r8
 80150ce:	6858      	ldr	r0, [r3, #4]
 80150d0:	f7fe f9e0 	bl	8013494 <__aeabi_i2d>
 80150d4:	464b      	mov	r3, r9
 80150d6:	6018      	str	r0, [r3, #0]
 80150d8:	6059      	str	r1, [r3, #4]
 80150da:	9b02      	ldr	r3, [sp, #8]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	db24      	blt.n	801512a <__kernel_rem_pio2+0x37a>
 80150e0:	464d      	mov	r5, r9
 80150e2:	9c03      	ldr	r4, [sp, #12]
 80150e4:	2600      	movs	r6, #0
 80150e6:	2700      	movs	r7, #0
 80150e8:	e001      	b.n	80150ee <__kernel_rem_pio2+0x33e>
 80150ea:	6828      	ldr	r0, [r5, #0]
 80150ec:	6869      	ldr	r1, [r5, #4]
 80150ee:	cc0c      	ldmia	r4!, {r2, r3}
 80150f0:	f7fd fbc4 	bl	801287c <__aeabi_dmul>
 80150f4:	0002      	movs	r2, r0
 80150f6:	000b      	movs	r3, r1
 80150f8:	0030      	movs	r0, r6
 80150fa:	0039      	movs	r1, r7
 80150fc:	f7fc fc98 	bl	8011a30 <__aeabi_dadd>
 8015100:	3d08      	subs	r5, #8
 8015102:	0006      	movs	r6, r0
 8015104:	000f      	movs	r7, r1
 8015106:	455c      	cmp	r4, fp
 8015108:	d1ef      	bne.n	80150ea <__kernel_rem_pio2+0x33a>
 801510a:	4653      	mov	r3, sl
 801510c:	609e      	str	r6, [r3, #8]
 801510e:	60df      	str	r7, [r3, #12]
 8015110:	2304      	movs	r3, #4
 8015112:	469c      	mov	ip, r3
 8015114:	3304      	adds	r3, #4
 8015116:	44e0      	add	r8, ip
 8015118:	469c      	mov	ip, r3
 801511a:	9b00      	ldr	r3, [sp, #0]
 801511c:	44e1      	add	r9, ip
 801511e:	44e2      	add	sl, ip
 8015120:	4598      	cmp	r8, r3
 8015122:	d1d3      	bne.n	80150cc <__kernel_rem_pio2+0x31c>
 8015124:	9b07      	ldr	r3, [sp, #28]
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	e6d1      	b.n	8014ece <__kernel_rem_pio2+0x11e>
 801512a:	2600      	movs	r6, #0
 801512c:	2700      	movs	r7, #0
 801512e:	e7ec      	b.n	801510a <__kernel_rem_pio2+0x35a>
 8015130:	fffffd94 	.word	0xfffffd94
 8015134:	0801f638 	.word	0x0801f638
 8015138:	fffffe18 	.word	0xfffffe18
 801513c:	1fffffff 	.word	0x1fffffff
 8015140:	3e700000 	.word	0x3e700000
 8015144:	41700000 	.word	0x41700000
 8015148:	40200000 	.word	0x40200000
 801514c:	3fffffff 	.word	0x3fffffff
 8015150:	2100      	movs	r1, #0
 8015152:	2280      	movs	r2, #128	; 0x80
 8015154:	0452      	lsls	r2, r2, #17
 8015156:	1b14      	subs	r4, r2, r4
 8015158:	aa0e      	add	r2, sp, #56	; 0x38
 801515a:	5054      	str	r4, [r2, r1]
 801515c:	9900      	ldr	r1, [sp, #0]
 801515e:	4299      	cmp	r1, r3
 8015160:	dd0e      	ble.n	8015180 <__kernel_rem_pio2+0x3d0>
 8015162:	a80e      	add	r0, sp, #56	; 0x38
 8015164:	4684      	mov	ip, r0
 8015166:	009b      	lsls	r3, r3, #2
 8015168:	aa0e      	add	r2, sp, #56	; 0x38
 801516a:	0089      	lsls	r1, r1, #2
 801516c:	58d2      	ldr	r2, [r2, r3]
 801516e:	4461      	add	r1, ip
 8015170:	4463      	add	r3, ip
 8015172:	48cf      	ldr	r0, [pc, #828]	; (80154b0 <__kernel_rem_pio2+0x700>)
 8015174:	e000      	b.n	8015178 <__kernel_rem_pio2+0x3c8>
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	1a82      	subs	r2, r0, r2
 801517a:	c304      	stmia	r3!, {r2}
 801517c:	428b      	cmp	r3, r1
 801517e:	d1fa      	bne.n	8015176 <__kernel_rem_pio2+0x3c6>
 8015180:	2401      	movs	r4, #1
 8015182:	e73c      	b.n	8014ffe <__kernel_rem_pio2+0x24e>
 8015184:	9b05      	ldr	r3, [sp, #20]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d106      	bne.n	8015198 <__kernel_rem_pio2+0x3e8>
 801518a:	9b00      	ldr	r3, [sp, #0]
 801518c:	aa0e      	add	r2, sp, #56	; 0x38
 801518e:	3b01      	subs	r3, #1
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	58d5      	ldr	r5, [r2, r3]
 8015194:	15ed      	asrs	r5, r5, #23
 8015196:	e717      	b.n	8014fc8 <__kernel_rem_pio2+0x218>
 8015198:	2200      	movs	r2, #0
 801519a:	4bc6      	ldr	r3, [pc, #792]	; (80154b4 <__kernel_rem_pio2+0x704>)
 801519c:	0030      	movs	r0, r6
 801519e:	f7fc f983 	bl	80114a8 <__aeabi_dcmpge>
 80151a2:	2800      	cmp	r0, #0
 80151a4:	d000      	beq.n	80151a8 <__kernel_rem_pio2+0x3f8>
 80151a6:	e124      	b.n	80153f2 <__kernel_rem_pio2+0x642>
 80151a8:	2500      	movs	r5, #0
 80151aa:	e73d      	b.n	8015028 <__kernel_rem_pio2+0x278>
 80151ac:	0032      	movs	r2, r6
 80151ae:	003b      	movs	r3, r7
 80151b0:	2000      	movs	r0, #0
 80151b2:	49c1      	ldr	r1, [pc, #772]	; (80154b8 <__kernel_rem_pio2+0x708>)
 80151b4:	f7fd fdd4 	bl	8012d60 <__aeabi_dsub>
 80151b8:	0006      	movs	r6, r0
 80151ba:	000f      	movs	r7, r1
 80151bc:	2c00      	cmp	r4, #0
 80151be:	d100      	bne.n	80151c2 <__kernel_rem_pio2+0x412>
 80151c0:	e732      	b.n	8015028 <__kernel_rem_pio2+0x278>
 80151c2:	9a05      	ldr	r2, [sp, #20]
 80151c4:	2000      	movs	r0, #0
 80151c6:	49bc      	ldr	r1, [pc, #752]	; (80154b8 <__kernel_rem_pio2+0x708>)
 80151c8:	f000 fbac 	bl	8015924 <scalbn>
 80151cc:	0002      	movs	r2, r0
 80151ce:	000b      	movs	r3, r1
 80151d0:	0030      	movs	r0, r6
 80151d2:	0039      	movs	r1, r7
 80151d4:	f7fd fdc4 	bl	8012d60 <__aeabi_dsub>
 80151d8:	0006      	movs	r6, r0
 80151da:	000f      	movs	r7, r1
 80151dc:	e724      	b.n	8015028 <__kernel_rem_pio2+0x278>
 80151de:	2201      	movs	r2, #1
 80151e0:	e750      	b.n	8015084 <__kernel_rem_pio2+0x2d4>
 80151e2:	2600      	movs	r6, #0
 80151e4:	2700      	movs	r7, #0
 80151e6:	e654      	b.n	8014e92 <__kernel_rem_pio2+0xe2>
 80151e8:	464b      	mov	r3, r9
 80151ea:	9a05      	ldr	r2, [sp, #20]
 80151ec:	9307      	str	r3, [sp, #28]
 80151ee:	4688      	mov	r8, r1
 80151f0:	008b      	lsls	r3, r1, #2
 80151f2:	a90e      	add	r1, sp, #56	; 0x38
 80151f4:	58cb      	ldr	r3, [r1, r3]
 80151f6:	3a18      	subs	r2, #24
 80151f8:	9508      	str	r5, [sp, #32]
 80151fa:	9205      	str	r2, [sp, #20]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d10d      	bne.n	801521c <__kernel_rem_pio2+0x46c>
 8015200:	468c      	mov	ip, r1
 8015202:	4641      	mov	r1, r8
 8015204:	4bad      	ldr	r3, [pc, #692]	; (80154bc <__kernel_rem_pio2+0x70c>)
 8015206:	4443      	add	r3, r8
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	4463      	add	r3, ip
 801520c:	3b04      	subs	r3, #4
 801520e:	6858      	ldr	r0, [r3, #4]
 8015210:	3901      	subs	r1, #1
 8015212:	3a18      	subs	r2, #24
 8015214:	2800      	cmp	r0, #0
 8015216:	d0f9      	beq.n	801520c <__kernel_rem_pio2+0x45c>
 8015218:	4688      	mov	r8, r1
 801521a:	9205      	str	r2, [sp, #20]
 801521c:	9a05      	ldr	r2, [sp, #20]
 801521e:	2000      	movs	r0, #0
 8015220:	49a5      	ldr	r1, [pc, #660]	; (80154b8 <__kernel_rem_pio2+0x708>)
 8015222:	f000 fb7f 	bl	8015924 <scalbn>
 8015226:	4643      	mov	r3, r8
 8015228:	0004      	movs	r4, r0
 801522a:	000d      	movs	r5, r1
 801522c:	2b00      	cmp	r3, #0
 801522e:	da00      	bge.n	8015232 <__kernel_rem_pio2+0x482>
 8015230:	e205      	b.n	801563e <__kernel_rem_pio2+0x88e>
 8015232:	009e      	lsls	r6, r3, #2
 8015234:	ab0e      	add	r3, sp, #56	; 0x38
 8015236:	469c      	mov	ip, r3
 8015238:	4643      	mov	r3, r8
 801523a:	00db      	lsls	r3, r3, #3
 801523c:	4466      	add	r6, ip
 801523e:	469c      	mov	ip, r3
 8015240:	9305      	str	r3, [sp, #20]
 8015242:	ab70      	add	r3, sp, #448	; 0x1c0
 8015244:	4699      	mov	r9, r3
 8015246:	9f04      	ldr	r7, [sp, #16]
 8015248:	4467      	add	r7, ip
 801524a:	9700      	str	r7, [sp, #0]
 801524c:	6830      	ldr	r0, [r6, #0]
 801524e:	f7fe f921 	bl	8013494 <__aeabi_i2d>
 8015252:	0022      	movs	r2, r4
 8015254:	002b      	movs	r3, r5
 8015256:	f7fd fb11 	bl	801287c <__aeabi_dmul>
 801525a:	2200      	movs	r2, #0
 801525c:	6038      	str	r0, [r7, #0]
 801525e:	6079      	str	r1, [r7, #4]
 8015260:	4b97      	ldr	r3, [pc, #604]	; (80154c0 <__kernel_rem_pio2+0x710>)
 8015262:	0020      	movs	r0, r4
 8015264:	0029      	movs	r1, r5
 8015266:	f7fd fb09 	bl	801287c <__aeabi_dmul>
 801526a:	3f08      	subs	r7, #8
 801526c:	0004      	movs	r4, r0
 801526e:	000d      	movs	r5, r1
 8015270:	3e04      	subs	r6, #4
 8015272:	45b9      	cmp	r9, r7
 8015274:	d1ea      	bne.n	801524c <__kernel_rem_pio2+0x49c>
 8015276:	ab4a      	add	r3, sp, #296	; 0x128
 8015278:	9303      	str	r3, [sp, #12]
 801527a:	469b      	mov	fp, r3
 801527c:	2300      	movs	r3, #0
 801527e:	469a      	mov	sl, r3
 8015280:	9b06      	ldr	r3, [sp, #24]
 8015282:	4642      	mov	r2, r8
 8015284:	4699      	mov	r9, r3
 8015286:	4643      	mov	r3, r8
 8015288:	3201      	adds	r2, #1
 801528a:	9202      	str	r2, [sp, #8]
 801528c:	9304      	str	r3, [sp, #16]
 801528e:	464b      	mov	r3, r9
 8015290:	2b00      	cmp	r3, #0
 8015292:	da00      	bge.n	8015296 <__kernel_rem_pio2+0x4e6>
 8015294:	e0aa      	b.n	80153ec <__kernel_rem_pio2+0x63c>
 8015296:	2080      	movs	r0, #128	; 0x80
 8015298:	4b8a      	ldr	r3, [pc, #552]	; (80154c4 <__kernel_rem_pio2+0x714>)
 801529a:	9d00      	ldr	r5, [sp, #0]
 801529c:	4698      	mov	r8, r3
 801529e:	05c0      	lsls	r0, r0, #23
 80152a0:	4989      	ldr	r1, [pc, #548]	; (80154c8 <__kernel_rem_pio2+0x718>)
 80152a2:	2600      	movs	r6, #0
 80152a4:	2700      	movs	r7, #0
 80152a6:	2400      	movs	r4, #0
 80152a8:	e008      	b.n	80152bc <__kernel_rem_pio2+0x50c>
 80152aa:	2308      	movs	r3, #8
 80152ac:	469c      	mov	ip, r3
 80152ae:	3508      	adds	r5, #8
 80152b0:	44e0      	add	r8, ip
 80152b2:	4554      	cmp	r4, sl
 80152b4:	dc11      	bgt.n	80152da <__kernel_rem_pio2+0x52a>
 80152b6:	4643      	mov	r3, r8
 80152b8:	6818      	ldr	r0, [r3, #0]
 80152ba:	6859      	ldr	r1, [r3, #4]
 80152bc:	682a      	ldr	r2, [r5, #0]
 80152be:	686b      	ldr	r3, [r5, #4]
 80152c0:	f7fd fadc 	bl	801287c <__aeabi_dmul>
 80152c4:	0002      	movs	r2, r0
 80152c6:	000b      	movs	r3, r1
 80152c8:	0030      	movs	r0, r6
 80152ca:	0039      	movs	r1, r7
 80152cc:	f7fc fbb0 	bl	8011a30 <__aeabi_dadd>
 80152d0:	3401      	adds	r4, #1
 80152d2:	0006      	movs	r6, r0
 80152d4:	000f      	movs	r7, r1
 80152d6:	45a1      	cmp	r9, r4
 80152d8:	dae7      	bge.n	80152aa <__kernel_rem_pio2+0x4fa>
 80152da:	465b      	mov	r3, fp
 80152dc:	c3c0      	stmia	r3!, {r6, r7}
 80152de:	469b      	mov	fp, r3
 80152e0:	2301      	movs	r3, #1
 80152e2:	469c      	mov	ip, r3
 80152e4:	9b00      	ldr	r3, [sp, #0]
 80152e6:	44e2      	add	sl, ip
 80152e8:	3b08      	subs	r3, #8
 80152ea:	9300      	str	r3, [sp, #0]
 80152ec:	9b02      	ldr	r3, [sp, #8]
 80152ee:	459a      	cmp	sl, r3
 80152f0:	d1cd      	bne.n	801528e <__kernel_rem_pio2+0x4de>
 80152f2:	9b04      	ldr	r3, [sp, #16]
 80152f4:	4698      	mov	r8, r3
 80152f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80152f8:	2b02      	cmp	r3, #2
 80152fa:	dd00      	ble.n	80152fe <__kernel_rem_pio2+0x54e>
 80152fc:	e08e      	b.n	801541c <__kernel_rem_pio2+0x66c>
 80152fe:	2b00      	cmp	r3, #0
 8015300:	dc37      	bgt.n	8015372 <__kernel_rem_pio2+0x5c2>
 8015302:	d11f      	bne.n	8015344 <__kernel_rem_pio2+0x594>
 8015304:	9b05      	ldr	r3, [sp, #20]
 8015306:	2700      	movs	r7, #0
 8015308:	001d      	movs	r5, r3
 801530a:	9b03      	ldr	r3, [sp, #12]
 801530c:	2400      	movs	r4, #0
 801530e:	469c      	mov	ip, r3
 8015310:	001e      	movs	r6, r3
 8015312:	4465      	add	r5, ip
 8015314:	3e08      	subs	r6, #8
 8015316:	682a      	ldr	r2, [r5, #0]
 8015318:	686b      	ldr	r3, [r5, #4]
 801531a:	0038      	movs	r0, r7
 801531c:	0021      	movs	r1, r4
 801531e:	f7fc fb87 	bl	8011a30 <__aeabi_dadd>
 8015322:	3d08      	subs	r5, #8
 8015324:	0007      	movs	r7, r0
 8015326:	000c      	movs	r4, r1
 8015328:	42ae      	cmp	r6, r5
 801532a:	d1f4      	bne.n	8015316 <__kernel_rem_pio2+0x566>
 801532c:	9b08      	ldr	r3, [sp, #32]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d003      	beq.n	801533a <__kernel_rem_pio2+0x58a>
 8015332:	2380      	movs	r3, #128	; 0x80
 8015334:	061b      	lsls	r3, r3, #24
 8015336:	469c      	mov	ip, r3
 8015338:	4464      	add	r4, ip
 801533a:	003a      	movs	r2, r7
 801533c:	0023      	movs	r3, r4
 801533e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015340:	600a      	str	r2, [r1, #0]
 8015342:	604b      	str	r3, [r1, #4]
 8015344:	2007      	movs	r0, #7
 8015346:	9b07      	ldr	r3, [sp, #28]
 8015348:	4018      	ands	r0, r3
 801534a:	239b      	movs	r3, #155	; 0x9b
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	449d      	add	sp, r3
 8015350:	bc3c      	pop	{r2, r3, r4, r5}
 8015352:	4690      	mov	r8, r2
 8015354:	4699      	mov	r9, r3
 8015356:	46a2      	mov	sl, r4
 8015358:	46ab      	mov	fp, r5
 801535a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801535c:	9b00      	ldr	r3, [sp, #0]
 801535e:	a90e      	add	r1, sp, #56	; 0x38
 8015360:	1e5a      	subs	r2, r3, #1
 8015362:	0092      	lsls	r2, r2, #2
 8015364:	ab0e      	add	r3, sp, #56	; 0x38
 8015366:	589b      	ldr	r3, [r3, r2]
 8015368:	9307      	str	r3, [sp, #28]
 801536a:	025b      	lsls	r3, r3, #9
 801536c:	0a5b      	lsrs	r3, r3, #9
 801536e:	508b      	str	r3, [r1, r2]
 8015370:	e657      	b.n	8015022 <__kernel_rem_pio2+0x272>
 8015372:	4643      	mov	r3, r8
 8015374:	2b00      	cmp	r3, #0
 8015376:	da00      	bge.n	801537a <__kernel_rem_pio2+0x5ca>
 8015378:	e170      	b.n	801565c <__kernel_rem_pio2+0x8ac>
 801537a:	2000      	movs	r0, #0
 801537c:	2100      	movs	r1, #0
 801537e:	00db      	lsls	r3, r3, #3
 8015380:	aa4a      	add	r2, sp, #296	; 0x128
 8015382:	18d6      	adds	r6, r2, r3
 8015384:	af48      	add	r7, sp, #288	; 0x120
 8015386:	6832      	ldr	r2, [r6, #0]
 8015388:	6873      	ldr	r3, [r6, #4]
 801538a:	3e08      	subs	r6, #8
 801538c:	f7fc fb50 	bl	8011a30 <__aeabi_dadd>
 8015390:	42b7      	cmp	r7, r6
 8015392:	d1f8      	bne.n	8015386 <__kernel_rem_pio2+0x5d6>
 8015394:	9b08      	ldr	r3, [sp, #32]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d000      	beq.n	801539c <__kernel_rem_pio2+0x5ec>
 801539a:	e125      	b.n	80155e8 <__kernel_rem_pio2+0x838>
 801539c:	000b      	movs	r3, r1
 801539e:	0002      	movs	r2, r0
 80153a0:	984a      	ldr	r0, [sp, #296]	; 0x128
 80153a2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80153a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80153a6:	6022      	str	r2, [r4, #0]
 80153a8:	6063      	str	r3, [r4, #4]
 80153aa:	f7fd fcd9 	bl	8012d60 <__aeabi_dsub>
 80153ae:	4643      	mov	r3, r8
 80153b0:	0007      	movs	r7, r0
 80153b2:	000c      	movs	r4, r1
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	dd13      	ble.n	80153e0 <__kernel_rem_pio2+0x630>
 80153b8:	2501      	movs	r5, #1
 80153ba:	ae4c      	add	r6, sp, #304	; 0x130
 80153bc:	46b1      	mov	r9, r6
 80153be:	0038      	movs	r0, r7
 80153c0:	002e      	movs	r6, r5
 80153c2:	0021      	movs	r1, r4
 80153c4:	464c      	mov	r4, r9
 80153c6:	3601      	adds	r6, #1
 80153c8:	cc0c      	ldmia	r4!, {r2, r3}
 80153ca:	f7fc fb31 	bl	8011a30 <__aeabi_dadd>
 80153ce:	46a1      	mov	r9, r4
 80153d0:	45b0      	cmp	r8, r6
 80153d2:	daf7      	bge.n	80153c4 <__kernel_rem_pio2+0x614>
 80153d4:	9b08      	ldr	r3, [sp, #32]
 80153d6:	0007      	movs	r7, r0
 80153d8:	000c      	movs	r4, r1
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d000      	beq.n	80153e0 <__kernel_rem_pio2+0x630>
 80153de:	e115      	b.n	801560c <__kernel_rem_pio2+0x85c>
 80153e0:	003a      	movs	r2, r7
 80153e2:	0023      	movs	r3, r4
 80153e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80153e6:	608a      	str	r2, [r1, #8]
 80153e8:	60cb      	str	r3, [r1, #12]
 80153ea:	e7ab      	b.n	8015344 <__kernel_rem_pio2+0x594>
 80153ec:	2600      	movs	r6, #0
 80153ee:	2700      	movs	r7, #0
 80153f0:	e773      	b.n	80152da <__kernel_rem_pio2+0x52a>
 80153f2:	2301      	movs	r3, #1
 80153f4:	469c      	mov	ip, r3
 80153f6:	9b00      	ldr	r3, [sp, #0]
 80153f8:	44e1      	add	r9, ip
 80153fa:	2502      	movs	r5, #2
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	dd00      	ble.n	8015402 <__kernel_rem_pio2+0x652>
 8015400:	e5eb      	b.n	8014fda <__kernel_rem_pio2+0x22a>
 8015402:	0032      	movs	r2, r6
 8015404:	003b      	movs	r3, r7
 8015406:	2000      	movs	r0, #0
 8015408:	492b      	ldr	r1, [pc, #172]	; (80154b8 <__kernel_rem_pio2+0x708>)
 801540a:	f7fd fca9 	bl	8012d60 <__aeabi_dsub>
 801540e:	0006      	movs	r6, r0
 8015410:	000f      	movs	r7, r1
 8015412:	e609      	b.n	8015028 <__kernel_rem_pio2+0x278>
 8015414:	2400      	movs	r4, #0
 8015416:	e5f2      	b.n	8014ffe <__kernel_rem_pio2+0x24e>
 8015418:	ab4a      	add	r3, sp, #296	; 0x128
 801541a:	9303      	str	r3, [sp, #12]
 801541c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801541e:	2b03      	cmp	r3, #3
 8015420:	d000      	beq.n	8015424 <__kernel_rem_pio2+0x674>
 8015422:	e78f      	b.n	8015344 <__kernel_rem_pio2+0x594>
 8015424:	4643      	mov	r3, r8
 8015426:	2b00      	cmp	r3, #0
 8015428:	dc00      	bgt.n	801542c <__kernel_rem_pio2+0x67c>
 801542a:	e114      	b.n	8015656 <__kernel_rem_pio2+0x8a6>
 801542c:	9a03      	ldr	r2, [sp, #12]
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	469b      	mov	fp, r3
 8015432:	0013      	movs	r3, r2
 8015434:	4691      	mov	r9, r2
 8015436:	445b      	add	r3, fp
 8015438:	681e      	ldr	r6, [r3, #0]
 801543a:	685f      	ldr	r7, [r3, #4]
 801543c:	4b23      	ldr	r3, [pc, #140]	; (80154cc <__kernel_rem_pio2+0x71c>)
 801543e:	4443      	add	r3, r8
 8015440:	9302      	str	r3, [sp, #8]
 8015442:	00db      	lsls	r3, r3, #3
 8015444:	4499      	add	r9, r3
 8015446:	ab48      	add	r3, sp, #288	; 0x120
 8015448:	469a      	mov	sl, r3
 801544a:	464b      	mov	r3, r9
 801544c:	685c      	ldr	r4, [r3, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	0018      	movs	r0, r3
 8015452:	0021      	movs	r1, r4
 8015454:	0032      	movs	r2, r6
 8015456:	003b      	movs	r3, r7
 8015458:	9000      	str	r0, [sp, #0]
 801545a:	9101      	str	r1, [sp, #4]
 801545c:	f7fc fae8 	bl	8011a30 <__aeabi_dadd>
 8015460:	0004      	movs	r4, r0
 8015462:	000d      	movs	r5, r1
 8015464:	0002      	movs	r2, r0
 8015466:	000b      	movs	r3, r1
 8015468:	9800      	ldr	r0, [sp, #0]
 801546a:	9901      	ldr	r1, [sp, #4]
 801546c:	f7fd fc78 	bl	8012d60 <__aeabi_dsub>
 8015470:	003b      	movs	r3, r7
 8015472:	0032      	movs	r2, r6
 8015474:	f7fc fadc 	bl	8011a30 <__aeabi_dadd>
 8015478:	464b      	mov	r3, r9
 801547a:	6098      	str	r0, [r3, #8]
 801547c:	60d9      	str	r1, [r3, #12]
 801547e:	601c      	str	r4, [r3, #0]
 8015480:	605d      	str	r5, [r3, #4]
 8015482:	2308      	movs	r3, #8
 8015484:	425b      	negs	r3, r3
 8015486:	469c      	mov	ip, r3
 8015488:	44e1      	add	r9, ip
 801548a:	0026      	movs	r6, r4
 801548c:	002f      	movs	r7, r5
 801548e:	45ca      	cmp	sl, r9
 8015490:	d1db      	bne.n	801544a <__kernel_rem_pio2+0x69a>
 8015492:	4643      	mov	r3, r8
 8015494:	2b01      	cmp	r3, #1
 8015496:	dc00      	bgt.n	801549a <__kernel_rem_pio2+0x6ea>
 8015498:	e0e3      	b.n	8015662 <__kernel_rem_pio2+0x8b2>
 801549a:	9a03      	ldr	r2, [sp, #12]
 801549c:	0013      	movs	r3, r2
 801549e:	445b      	add	r3, fp
 80154a0:	681e      	ldr	r6, [r3, #0]
 80154a2:	685f      	ldr	r7, [r3, #4]
 80154a4:	9b02      	ldr	r3, [sp, #8]
 80154a6:	00db      	lsls	r3, r3, #3
 80154a8:	4699      	mov	r9, r3
 80154aa:	444a      	add	r2, r9
 80154ac:	4690      	mov	r8, r2
 80154ae:	e010      	b.n	80154d2 <__kernel_rem_pio2+0x722>
 80154b0:	00ffffff 	.word	0x00ffffff
 80154b4:	3fe00000 	.word	0x3fe00000
 80154b8:	3ff00000 	.word	0x3ff00000
 80154bc:	3fffffff 	.word	0x3fffffff
 80154c0:	3e700000 	.word	0x3e700000
 80154c4:	0801f5f8 	.word	0x0801f5f8
 80154c8:	3ff921fb 	.word	0x3ff921fb
 80154cc:	1fffffff 	.word	0x1fffffff
 80154d0:	4698      	mov	r8, r3
 80154d2:	4643      	mov	r3, r8
 80154d4:	685c      	ldr	r4, [r3, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	0018      	movs	r0, r3
 80154da:	0021      	movs	r1, r4
 80154dc:	0032      	movs	r2, r6
 80154de:	003b      	movs	r3, r7
 80154e0:	9000      	str	r0, [sp, #0]
 80154e2:	9101      	str	r1, [sp, #4]
 80154e4:	f7fc faa4 	bl	8011a30 <__aeabi_dadd>
 80154e8:	0004      	movs	r4, r0
 80154ea:	000d      	movs	r5, r1
 80154ec:	0002      	movs	r2, r0
 80154ee:	000b      	movs	r3, r1
 80154f0:	9800      	ldr	r0, [sp, #0]
 80154f2:	9901      	ldr	r1, [sp, #4]
 80154f4:	f7fd fc34 	bl	8012d60 <__aeabi_dsub>
 80154f8:	0032      	movs	r2, r6
 80154fa:	003b      	movs	r3, r7
 80154fc:	f7fc fa98 	bl	8011a30 <__aeabi_dadd>
 8015500:	4643      	mov	r3, r8
 8015502:	9a03      	ldr	r2, [sp, #12]
 8015504:	6098      	str	r0, [r3, #8]
 8015506:	60d9      	str	r1, [r3, #12]
 8015508:	601c      	str	r4, [r3, #0]
 801550a:	605d      	str	r5, [r3, #4]
 801550c:	3b08      	subs	r3, #8
 801550e:	0026      	movs	r6, r4
 8015510:	002f      	movs	r7, r5
 8015512:	429a      	cmp	r2, r3
 8015514:	d1dc      	bne.n	80154d0 <__kernel_rem_pio2+0x720>
 8015516:	464d      	mov	r5, r9
 8015518:	4694      	mov	ip, r2
 801551a:	2600      	movs	r6, #0
 801551c:	2400      	movs	r4, #0
 801551e:	4647      	mov	r7, r8
 8015520:	3508      	adds	r5, #8
 8015522:	4465      	add	r5, ip
 8015524:	682a      	ldr	r2, [r5, #0]
 8015526:	686b      	ldr	r3, [r5, #4]
 8015528:	0030      	movs	r0, r6
 801552a:	0021      	movs	r1, r4
 801552c:	f7fc fa80 	bl	8011a30 <__aeabi_dadd>
 8015530:	3d08      	subs	r5, #8
 8015532:	0006      	movs	r6, r0
 8015534:	000c      	movs	r4, r1
 8015536:	42af      	cmp	r7, r5
 8015538:	d1f4      	bne.n	8015524 <__kernel_rem_pio2+0x774>
 801553a:	9b03      	ldr	r3, [sp, #12]
 801553c:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 801553e:	685d      	ldr	r5, [r3, #4]
 8015540:	6899      	ldr	r1, [r3, #8]
 8015542:	68d8      	ldr	r0, [r3, #12]
 8015544:	9b08      	ldr	r3, [sp, #32]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d065      	beq.n	8015616 <__kernel_rem_pio2+0x866>
 801554a:	2280      	movs	r2, #128	; 0x80
 801554c:	0612      	lsls	r2, r2, #24
 801554e:	4694      	mov	ip, r2
 8015550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015552:	4465      	add	r5, ip
 8015554:	4460      	add	r0, ip
 8015556:	4464      	add	r4, ip
 8015558:	601f      	str	r7, [r3, #0]
 801555a:	605d      	str	r5, [r3, #4]
 801555c:	6099      	str	r1, [r3, #8]
 801555e:	60d8      	str	r0, [r3, #12]
 8015560:	611e      	str	r6, [r3, #16]
 8015562:	615c      	str	r4, [r3, #20]
 8015564:	e6ee      	b.n	8015344 <__kernel_rem_pio2+0x594>
 8015566:	469a      	mov	sl, r3
 8015568:	464b      	mov	r3, r9
 801556a:	9307      	str	r3, [sp, #28]
 801556c:	9b05      	ldr	r3, [sp, #20]
 801556e:	0030      	movs	r0, r6
 8015570:	425a      	negs	r2, r3
 8015572:	0039      	movs	r1, r7
 8015574:	9508      	str	r5, [sp, #32]
 8015576:	f000 f9d5 	bl	8015924 <scalbn>
 801557a:	2200      	movs	r2, #0
 801557c:	4b3a      	ldr	r3, [pc, #232]	; (8015668 <__kernel_rem_pio2+0x8b8>)
 801557e:	0006      	movs	r6, r0
 8015580:	000f      	movs	r7, r1
 8015582:	f7fb ff91 	bl	80114a8 <__aeabi_dcmpge>
 8015586:	2800      	cmp	r0, #0
 8015588:	d024      	beq.n	80155d4 <__kernel_rem_pio2+0x824>
 801558a:	4b38      	ldr	r3, [pc, #224]	; (801566c <__kernel_rem_pio2+0x8bc>)
 801558c:	2200      	movs	r2, #0
 801558e:	0030      	movs	r0, r6
 8015590:	0039      	movs	r1, r7
 8015592:	f7fd f973 	bl	801287c <__aeabi_dmul>
 8015596:	f7fd ff47 	bl	8013428 <__aeabi_d2iz>
 801559a:	4652      	mov	r2, sl
 801559c:	0004      	movs	r4, r0
 801559e:	0095      	lsls	r5, r2, #2
 80155a0:	f7fd ff78 	bl	8013494 <__aeabi_i2d>
 80155a4:	2200      	movs	r2, #0
 80155a6:	4b30      	ldr	r3, [pc, #192]	; (8015668 <__kernel_rem_pio2+0x8b8>)
 80155a8:	f7fd f968 	bl	801287c <__aeabi_dmul>
 80155ac:	0002      	movs	r2, r0
 80155ae:	000b      	movs	r3, r1
 80155b0:	0030      	movs	r0, r6
 80155b2:	0039      	movs	r1, r7
 80155b4:	f7fd fbd4 	bl	8012d60 <__aeabi_dsub>
 80155b8:	f7fd ff36 	bl	8013428 <__aeabi_d2iz>
 80155bc:	aa0e      	add	r2, sp, #56	; 0x38
 80155be:	5150      	str	r0, [r2, r5]
 80155c0:	2201      	movs	r2, #1
 80155c2:	9b05      	ldr	r3, [sp, #20]
 80155c4:	4452      	add	r2, sl
 80155c6:	3318      	adds	r3, #24
 80155c8:	4690      	mov	r8, r2
 80155ca:	9305      	str	r3, [sp, #20]
 80155cc:	0093      	lsls	r3, r2, #2
 80155ce:	aa0e      	add	r2, sp, #56	; 0x38
 80155d0:	50d4      	str	r4, [r2, r3]
 80155d2:	e623      	b.n	801521c <__kernel_rem_pio2+0x46c>
 80155d4:	4653      	mov	r3, sl
 80155d6:	0030      	movs	r0, r6
 80155d8:	0039      	movs	r1, r7
 80155da:	009c      	lsls	r4, r3, #2
 80155dc:	f7fd ff24 	bl	8013428 <__aeabi_d2iz>
 80155e0:	ab0e      	add	r3, sp, #56	; 0x38
 80155e2:	5118      	str	r0, [r3, r4]
 80155e4:	46d0      	mov	r8, sl
 80155e6:	e619      	b.n	801521c <__kernel_rem_pio2+0x46c>
 80155e8:	2380      	movs	r3, #128	; 0x80
 80155ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155ec:	061b      	lsls	r3, r3, #24
 80155ee:	18cb      	adds	r3, r1, r3
 80155f0:	6010      	str	r0, [r2, #0]
 80155f2:	6053      	str	r3, [r2, #4]
 80155f4:	000b      	movs	r3, r1
 80155f6:	0002      	movs	r2, r0
 80155f8:	984a      	ldr	r0, [sp, #296]	; 0x128
 80155fa:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80155fc:	f7fd fbb0 	bl	8012d60 <__aeabi_dsub>
 8015600:	4643      	mov	r3, r8
 8015602:	0007      	movs	r7, r0
 8015604:	000c      	movs	r4, r1
 8015606:	2b00      	cmp	r3, #0
 8015608:	dd00      	ble.n	801560c <__kernel_rem_pio2+0x85c>
 801560a:	e6d5      	b.n	80153b8 <__kernel_rem_pio2+0x608>
 801560c:	2380      	movs	r3, #128	; 0x80
 801560e:	061b      	lsls	r3, r3, #24
 8015610:	469c      	mov	ip, r3
 8015612:	4464      	add	r4, ip
 8015614:	e6e4      	b.n	80153e0 <__kernel_rem_pio2+0x630>
 8015616:	002b      	movs	r3, r5
 8015618:	003a      	movs	r2, r7
 801561a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801561c:	602a      	str	r2, [r5, #0]
 801561e:	606b      	str	r3, [r5, #4]
 8015620:	000a      	movs	r2, r1
 8015622:	0003      	movs	r3, r0
 8015624:	60aa      	str	r2, [r5, #8]
 8015626:	60eb      	str	r3, [r5, #12]
 8015628:	0032      	movs	r2, r6
 801562a:	0023      	movs	r3, r4
 801562c:	612a      	str	r2, [r5, #16]
 801562e:	616b      	str	r3, [r5, #20]
 8015630:	e688      	b.n	8015344 <__kernel_rem_pio2+0x594>
 8015632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015634:	00db      	lsls	r3, r3, #3
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	ab72      	add	r3, sp, #456	; 0x1c8
 801563a:	9304      	str	r3, [sp, #16]
 801563c:	e432      	b.n	8014ea4 <__kernel_rem_pio2+0xf4>
 801563e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8015640:	2b02      	cmp	r3, #2
 8015642:	dd00      	ble.n	8015646 <__kernel_rem_pio2+0x896>
 8015644:	e6e8      	b.n	8015418 <__kernel_rem_pio2+0x668>
 8015646:	2b00      	cmp	r3, #0
 8015648:	dd00      	ble.n	801564c <__kernel_rem_pio2+0x89c>
 801564a:	e692      	b.n	8015372 <__kernel_rem_pio2+0x5c2>
 801564c:	d000      	beq.n	8015650 <__kernel_rem_pio2+0x8a0>
 801564e:	e679      	b.n	8015344 <__kernel_rem_pio2+0x594>
 8015650:	2700      	movs	r7, #0
 8015652:	2400      	movs	r4, #0
 8015654:	e66a      	b.n	801532c <__kernel_rem_pio2+0x57c>
 8015656:	2600      	movs	r6, #0
 8015658:	2400      	movs	r4, #0
 801565a:	e76e      	b.n	801553a <__kernel_rem_pio2+0x78a>
 801565c:	2000      	movs	r0, #0
 801565e:	2100      	movs	r1, #0
 8015660:	e698      	b.n	8015394 <__kernel_rem_pio2+0x5e4>
 8015662:	2600      	movs	r6, #0
 8015664:	0034      	movs	r4, r6
 8015666:	e768      	b.n	801553a <__kernel_rem_pio2+0x78a>
 8015668:	41700000 	.word	0x41700000
 801566c:	3e700000 	.word	0x3e700000

08015670 <__kernel_sin>:
 8015670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015672:	46ce      	mov	lr, r9
 8015674:	4647      	mov	r7, r8
 8015676:	b580      	push	{r7, lr}
 8015678:	b087      	sub	sp, #28
 801567a:	9200      	str	r2, [sp, #0]
 801567c:	9301      	str	r3, [sp, #4]
 801567e:	4a47      	ldr	r2, [pc, #284]	; (801579c <__kernel_sin+0x12c>)
 8015680:	004b      	lsls	r3, r1, #1
 8015682:	4681      	mov	r9, r0
 8015684:	4688      	mov	r8, r1
 8015686:	085b      	lsrs	r3, r3, #1
 8015688:	4293      	cmp	r3, r2
 801568a:	dc07      	bgt.n	801569c <__kernel_sin+0x2c>
 801568c:	4641      	mov	r1, r8
 801568e:	4648      	mov	r0, r9
 8015690:	f7fd feca 	bl	8013428 <__aeabi_d2iz>
 8015694:	4641      	mov	r1, r8
 8015696:	1e03      	subs	r3, r0, #0
 8015698:	4648      	mov	r0, r9
 801569a:	d066      	beq.n	801576a <__kernel_sin+0xfa>
 801569c:	464a      	mov	r2, r9
 801569e:	4643      	mov	r3, r8
 80156a0:	4648      	mov	r0, r9
 80156a2:	4641      	mov	r1, r8
 80156a4:	f7fd f8ea 	bl	801287c <__aeabi_dmul>
 80156a8:	0004      	movs	r4, r0
 80156aa:	000d      	movs	r5, r1
 80156ac:	0002      	movs	r2, r0
 80156ae:	000b      	movs	r3, r1
 80156b0:	4648      	mov	r0, r9
 80156b2:	4641      	mov	r1, r8
 80156b4:	f7fd f8e2 	bl	801287c <__aeabi_dmul>
 80156b8:	4a39      	ldr	r2, [pc, #228]	; (80157a0 <__kernel_sin+0x130>)
 80156ba:	4b3a      	ldr	r3, [pc, #232]	; (80157a4 <__kernel_sin+0x134>)
 80156bc:	0006      	movs	r6, r0
 80156be:	000f      	movs	r7, r1
 80156c0:	0020      	movs	r0, r4
 80156c2:	0029      	movs	r1, r5
 80156c4:	f7fd f8da 	bl	801287c <__aeabi_dmul>
 80156c8:	4a37      	ldr	r2, [pc, #220]	; (80157a8 <__kernel_sin+0x138>)
 80156ca:	4b38      	ldr	r3, [pc, #224]	; (80157ac <__kernel_sin+0x13c>)
 80156cc:	f7fd fb48 	bl	8012d60 <__aeabi_dsub>
 80156d0:	0022      	movs	r2, r4
 80156d2:	002b      	movs	r3, r5
 80156d4:	f7fd f8d2 	bl	801287c <__aeabi_dmul>
 80156d8:	4a35      	ldr	r2, [pc, #212]	; (80157b0 <__kernel_sin+0x140>)
 80156da:	4b36      	ldr	r3, [pc, #216]	; (80157b4 <__kernel_sin+0x144>)
 80156dc:	f7fc f9a8 	bl	8011a30 <__aeabi_dadd>
 80156e0:	0022      	movs	r2, r4
 80156e2:	002b      	movs	r3, r5
 80156e4:	f7fd f8ca 	bl	801287c <__aeabi_dmul>
 80156e8:	4a33      	ldr	r2, [pc, #204]	; (80157b8 <__kernel_sin+0x148>)
 80156ea:	4b34      	ldr	r3, [pc, #208]	; (80157bc <__kernel_sin+0x14c>)
 80156ec:	f7fd fb38 	bl	8012d60 <__aeabi_dsub>
 80156f0:	0022      	movs	r2, r4
 80156f2:	002b      	movs	r3, r5
 80156f4:	f7fd f8c2 	bl	801287c <__aeabi_dmul>
 80156f8:	4b31      	ldr	r3, [pc, #196]	; (80157c0 <__kernel_sin+0x150>)
 80156fa:	4a32      	ldr	r2, [pc, #200]	; (80157c4 <__kernel_sin+0x154>)
 80156fc:	f7fc f998 	bl	8011a30 <__aeabi_dadd>
 8015700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015702:	9002      	str	r0, [sp, #8]
 8015704:	9103      	str	r1, [sp, #12]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d034      	beq.n	8015774 <__kernel_sin+0x104>
 801570a:	9800      	ldr	r0, [sp, #0]
 801570c:	9901      	ldr	r1, [sp, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	4b2d      	ldr	r3, [pc, #180]	; (80157c8 <__kernel_sin+0x158>)
 8015712:	f7fd f8b3 	bl	801287c <__aeabi_dmul>
 8015716:	9a02      	ldr	r2, [sp, #8]
 8015718:	9b03      	ldr	r3, [sp, #12]
 801571a:	9004      	str	r0, [sp, #16]
 801571c:	9105      	str	r1, [sp, #20]
 801571e:	0030      	movs	r0, r6
 8015720:	0039      	movs	r1, r7
 8015722:	f7fd f8ab 	bl	801287c <__aeabi_dmul>
 8015726:	0002      	movs	r2, r0
 8015728:	000b      	movs	r3, r1
 801572a:	9804      	ldr	r0, [sp, #16]
 801572c:	9905      	ldr	r1, [sp, #20]
 801572e:	f7fd fb17 	bl	8012d60 <__aeabi_dsub>
 8015732:	0022      	movs	r2, r4
 8015734:	002b      	movs	r3, r5
 8015736:	f7fd f8a1 	bl	801287c <__aeabi_dmul>
 801573a:	9a00      	ldr	r2, [sp, #0]
 801573c:	9b01      	ldr	r3, [sp, #4]
 801573e:	f7fd fb0f 	bl	8012d60 <__aeabi_dsub>
 8015742:	4a22      	ldr	r2, [pc, #136]	; (80157cc <__kernel_sin+0x15c>)
 8015744:	0004      	movs	r4, r0
 8015746:	000d      	movs	r5, r1
 8015748:	4b21      	ldr	r3, [pc, #132]	; (80157d0 <__kernel_sin+0x160>)
 801574a:	0030      	movs	r0, r6
 801574c:	0039      	movs	r1, r7
 801574e:	f7fd f895 	bl	801287c <__aeabi_dmul>
 8015752:	0002      	movs	r2, r0
 8015754:	000b      	movs	r3, r1
 8015756:	0020      	movs	r0, r4
 8015758:	0029      	movs	r1, r5
 801575a:	f7fc f969 	bl	8011a30 <__aeabi_dadd>
 801575e:	0002      	movs	r2, r0
 8015760:	000b      	movs	r3, r1
 8015762:	4648      	mov	r0, r9
 8015764:	4641      	mov	r1, r8
 8015766:	f7fd fafb 	bl	8012d60 <__aeabi_dsub>
 801576a:	b007      	add	sp, #28
 801576c:	bc0c      	pop	{r2, r3}
 801576e:	4690      	mov	r8, r2
 8015770:	4699      	mov	r9, r3
 8015772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015774:	0002      	movs	r2, r0
 8015776:	000b      	movs	r3, r1
 8015778:	0020      	movs	r0, r4
 801577a:	0029      	movs	r1, r5
 801577c:	f7fd f87e 	bl	801287c <__aeabi_dmul>
 8015780:	4a12      	ldr	r2, [pc, #72]	; (80157cc <__kernel_sin+0x15c>)
 8015782:	4b13      	ldr	r3, [pc, #76]	; (80157d0 <__kernel_sin+0x160>)
 8015784:	f7fd faec 	bl	8012d60 <__aeabi_dsub>
 8015788:	0032      	movs	r2, r6
 801578a:	003b      	movs	r3, r7
 801578c:	f7fd f876 	bl	801287c <__aeabi_dmul>
 8015790:	464a      	mov	r2, r9
 8015792:	4643      	mov	r3, r8
 8015794:	f7fc f94c 	bl	8011a30 <__aeabi_dadd>
 8015798:	e7e7      	b.n	801576a <__kernel_sin+0xfa>
 801579a:	46c0      	nop			; (mov r8, r8)
 801579c:	3e3fffff 	.word	0x3e3fffff
 80157a0:	5acfd57c 	.word	0x5acfd57c
 80157a4:	3de5d93a 	.word	0x3de5d93a
 80157a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80157ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80157b0:	57b1fe7d 	.word	0x57b1fe7d
 80157b4:	3ec71de3 	.word	0x3ec71de3
 80157b8:	19c161d5 	.word	0x19c161d5
 80157bc:	3f2a01a0 	.word	0x3f2a01a0
 80157c0:	3f811111 	.word	0x3f811111
 80157c4:	1110f8a6 	.word	0x1110f8a6
 80157c8:	3fe00000 	.word	0x3fe00000
 80157cc:	55555549 	.word	0x55555549
 80157d0:	3fc55555 	.word	0x3fc55555

080157d4 <fabs>:
 80157d4:	0049      	lsls	r1, r1, #1
 80157d6:	084b      	lsrs	r3, r1, #1
 80157d8:	0019      	movs	r1, r3
 80157da:	4770      	bx	lr

080157dc <floor>:
 80157dc:	4a47      	ldr	r2, [pc, #284]	; (80158fc <floor+0x120>)
 80157de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157e0:	464f      	mov	r7, r9
 80157e2:	4691      	mov	r9, r2
 80157e4:	004b      	lsls	r3, r1, #1
 80157e6:	0d5b      	lsrs	r3, r3, #21
 80157e8:	4499      	add	r9, r3
 80157ea:	4646      	mov	r6, r8
 80157ec:	46d6      	mov	lr, sl
 80157ee:	464a      	mov	r2, r9
 80157f0:	b5c0      	push	{r6, r7, lr}
 80157f2:	0005      	movs	r5, r0
 80157f4:	000c      	movs	r4, r1
 80157f6:	000e      	movs	r6, r1
 80157f8:	4688      	mov	r8, r1
 80157fa:	0007      	movs	r7, r0
 80157fc:	2a13      	cmp	r2, #19
 80157fe:	dc27      	bgt.n	8015850 <floor+0x74>
 8015800:	2a00      	cmp	r2, #0
 8015802:	db4b      	blt.n	801589c <floor+0xc0>
 8015804:	4b3e      	ldr	r3, [pc, #248]	; (8015900 <floor+0x124>)
 8015806:	4113      	asrs	r3, r2
 8015808:	469a      	mov	sl, r3
 801580a:	000b      	movs	r3, r1
 801580c:	4652      	mov	r2, sl
 801580e:	4013      	ands	r3, r2
 8015810:	4303      	orrs	r3, r0
 8015812:	d018      	beq.n	8015846 <floor+0x6a>
 8015814:	4a3b      	ldr	r2, [pc, #236]	; (8015904 <floor+0x128>)
 8015816:	4b3c      	ldr	r3, [pc, #240]	; (8015908 <floor+0x12c>)
 8015818:	0028      	movs	r0, r5
 801581a:	0021      	movs	r1, r4
 801581c:	f7fc f908 	bl	8011a30 <__aeabi_dadd>
 8015820:	2200      	movs	r2, #0
 8015822:	2300      	movs	r3, #0
 8015824:	f7fb fe36 	bl	8011494 <__aeabi_dcmpgt>
 8015828:	2800      	cmp	r0, #0
 801582a:	d047      	beq.n	80158bc <floor+0xe0>
 801582c:	2c00      	cmp	r4, #0
 801582e:	da04      	bge.n	801583a <floor+0x5e>
 8015830:	2380      	movs	r3, #128	; 0x80
 8015832:	464a      	mov	r2, r9
 8015834:	035b      	lsls	r3, r3, #13
 8015836:	4113      	asrs	r3, r2
 8015838:	4498      	add	r8, r3
 801583a:	4646      	mov	r6, r8
 801583c:	4653      	mov	r3, sl
 801583e:	2700      	movs	r7, #0
 8015840:	439e      	bics	r6, r3
 8015842:	0038      	movs	r0, r7
 8015844:	0031      	movs	r1, r6
 8015846:	bc1c      	pop	{r2, r3, r4}
 8015848:	4690      	mov	r8, r2
 801584a:	4699      	mov	r9, r3
 801584c:	46a2      	mov	sl, r4
 801584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015850:	2a33      	cmp	r2, #51	; 0x33
 8015852:	dd08      	ble.n	8015866 <floor+0x8a>
 8015854:	2380      	movs	r3, #128	; 0x80
 8015856:	00db      	lsls	r3, r3, #3
 8015858:	4599      	cmp	r9, r3
 801585a:	d1f4      	bne.n	8015846 <floor+0x6a>
 801585c:	0002      	movs	r2, r0
 801585e:	000b      	movs	r3, r1
 8015860:	f7fc f8e6 	bl	8011a30 <__aeabi_dadd>
 8015864:	e7ef      	b.n	8015846 <floor+0x6a>
 8015866:	4a29      	ldr	r2, [pc, #164]	; (801590c <floor+0x130>)
 8015868:	4694      	mov	ip, r2
 801586a:	2201      	movs	r2, #1
 801586c:	4463      	add	r3, ip
 801586e:	4252      	negs	r2, r2
 8015870:	40da      	lsrs	r2, r3
 8015872:	4692      	mov	sl, r2
 8015874:	4202      	tst	r2, r0
 8015876:	d0e6      	beq.n	8015846 <floor+0x6a>
 8015878:	4a22      	ldr	r2, [pc, #136]	; (8015904 <floor+0x128>)
 801587a:	4b23      	ldr	r3, [pc, #140]	; (8015908 <floor+0x12c>)
 801587c:	0028      	movs	r0, r5
 801587e:	0021      	movs	r1, r4
 8015880:	f7fc f8d6 	bl	8011a30 <__aeabi_dadd>
 8015884:	2200      	movs	r2, #0
 8015886:	2300      	movs	r3, #0
 8015888:	f7fb fe04 	bl	8011494 <__aeabi_dcmpgt>
 801588c:	2800      	cmp	r0, #0
 801588e:	d015      	beq.n	80158bc <floor+0xe0>
 8015890:	2c00      	cmp	r4, #0
 8015892:	db1e      	blt.n	80158d2 <floor+0xf6>
 8015894:	4653      	mov	r3, sl
 8015896:	4646      	mov	r6, r8
 8015898:	439f      	bics	r7, r3
 801589a:	e00f      	b.n	80158bc <floor+0xe0>
 801589c:	4a19      	ldr	r2, [pc, #100]	; (8015904 <floor+0x128>)
 801589e:	4b1a      	ldr	r3, [pc, #104]	; (8015908 <floor+0x12c>)
 80158a0:	0028      	movs	r0, r5
 80158a2:	0021      	movs	r1, r4
 80158a4:	f7fc f8c4 	bl	8011a30 <__aeabi_dadd>
 80158a8:	2200      	movs	r2, #0
 80158aa:	2300      	movs	r3, #0
 80158ac:	f7fb fdf2 	bl	8011494 <__aeabi_dcmpgt>
 80158b0:	2800      	cmp	r0, #0
 80158b2:	d003      	beq.n	80158bc <floor+0xe0>
 80158b4:	2c00      	cmp	r4, #0
 80158b6:	db04      	blt.n	80158c2 <floor+0xe6>
 80158b8:	2700      	movs	r7, #0
 80158ba:	2600      	movs	r6, #0
 80158bc:	0038      	movs	r0, r7
 80158be:	0031      	movs	r1, r6
 80158c0:	e7c1      	b.n	8015846 <floor+0x6a>
 80158c2:	0064      	lsls	r4, r4, #1
 80158c4:	0864      	lsrs	r4, r4, #1
 80158c6:	4325      	orrs	r5, r4
 80158c8:	2700      	movs	r7, #0
 80158ca:	2d00      	cmp	r5, #0
 80158cc:	d0f6      	beq.n	80158bc <floor+0xe0>
 80158ce:	4e10      	ldr	r6, [pc, #64]	; (8015910 <floor+0x134>)
 80158d0:	e7f4      	b.n	80158bc <floor+0xe0>
 80158d2:	464b      	mov	r3, r9
 80158d4:	2b14      	cmp	r3, #20
 80158d6:	d00b      	beq.n	80158f0 <floor+0x114>
 80158d8:	2234      	movs	r2, #52	; 0x34
 80158da:	1ad2      	subs	r2, r2, r3
 80158dc:	2301      	movs	r3, #1
 80158de:	4093      	lsls	r3, r2
 80158e0:	195d      	adds	r5, r3, r5
 80158e2:	42bd      	cmp	r5, r7
 80158e4:	d208      	bcs.n	80158f8 <floor+0x11c>
 80158e6:	2301      	movs	r3, #1
 80158e8:	469c      	mov	ip, r3
 80158ea:	002f      	movs	r7, r5
 80158ec:	44e0      	add	r8, ip
 80158ee:	e7d1      	b.n	8015894 <floor+0xb8>
 80158f0:	3b13      	subs	r3, #19
 80158f2:	469c      	mov	ip, r3
 80158f4:	44e0      	add	r8, ip
 80158f6:	e7cd      	b.n	8015894 <floor+0xb8>
 80158f8:	002f      	movs	r7, r5
 80158fa:	e7cb      	b.n	8015894 <floor+0xb8>
 80158fc:	fffffc01 	.word	0xfffffc01
 8015900:	000fffff 	.word	0x000fffff
 8015904:	8800759c 	.word	0x8800759c
 8015908:	7e37e43c 	.word	0x7e37e43c
 801590c:	fffffbed 	.word	0xfffffbed
 8015910:	bff00000 	.word	0xbff00000

08015914 <matherr>:
 8015914:	2000      	movs	r0, #0
 8015916:	4770      	bx	lr

08015918 <nan>:
 8015918:	2000      	movs	r0, #0
 801591a:	4901      	ldr	r1, [pc, #4]	; (8015920 <nan+0x8>)
 801591c:	4770      	bx	lr
 801591e:	46c0      	nop			; (mov r8, r8)
 8015920:	7ff80000 	.word	0x7ff80000

08015924 <scalbn>:
 8015924:	004b      	lsls	r3, r1, #1
 8015926:	b570      	push	{r4, r5, r6, lr}
 8015928:	0d5b      	lsrs	r3, r3, #21
 801592a:	0014      	movs	r4, r2
 801592c:	000a      	movs	r2, r1
 801592e:	2b00      	cmp	r3, #0
 8015930:	d11a      	bne.n	8015968 <scalbn+0x44>
 8015932:	004b      	lsls	r3, r1, #1
 8015934:	085b      	lsrs	r3, r3, #1
 8015936:	4303      	orrs	r3, r0
 8015938:	d015      	beq.n	8015966 <scalbn+0x42>
 801593a:	4b23      	ldr	r3, [pc, #140]	; (80159c8 <scalbn+0xa4>)
 801593c:	2200      	movs	r2, #0
 801593e:	f7fc ff9d 	bl	801287c <__aeabi_dmul>
 8015942:	4b22      	ldr	r3, [pc, #136]	; (80159cc <scalbn+0xa8>)
 8015944:	429c      	cmp	r4, r3
 8015946:	db2d      	blt.n	80159a4 <scalbn+0x80>
 8015948:	000a      	movs	r2, r1
 801594a:	004b      	lsls	r3, r1, #1
 801594c:	0d5b      	lsrs	r3, r3, #21
 801594e:	3b36      	subs	r3, #54	; 0x36
 8015950:	4d1f      	ldr	r5, [pc, #124]	; (80159d0 <scalbn+0xac>)
 8015952:	18e3      	adds	r3, r4, r3
 8015954:	42ab      	cmp	r3, r5
 8015956:	dc2a      	bgt.n	80159ae <scalbn+0x8a>
 8015958:	2b00      	cmp	r3, #0
 801595a:	dd0d      	ble.n	8015978 <scalbn+0x54>
 801595c:	4c1d      	ldr	r4, [pc, #116]	; (80159d4 <scalbn+0xb0>)
 801595e:	051b      	lsls	r3, r3, #20
 8015960:	4022      	ands	r2, r4
 8015962:	431a      	orrs	r2, r3
 8015964:	0011      	movs	r1, r2
 8015966:	bd70      	pop	{r4, r5, r6, pc}
 8015968:	4d1b      	ldr	r5, [pc, #108]	; (80159d8 <scalbn+0xb4>)
 801596a:	42ab      	cmp	r3, r5
 801596c:	d1f0      	bne.n	8015950 <scalbn+0x2c>
 801596e:	0002      	movs	r2, r0
 8015970:	000b      	movs	r3, r1
 8015972:	f7fc f85d 	bl	8011a30 <__aeabi_dadd>
 8015976:	e7f6      	b.n	8015966 <scalbn+0x42>
 8015978:	001d      	movs	r5, r3
 801597a:	3535      	adds	r5, #53	; 0x35
 801597c:	da19      	bge.n	80159b2 <scalbn+0x8e>
 801597e:	4b17      	ldr	r3, [pc, #92]	; (80159dc <scalbn+0xb8>)
 8015980:	0002      	movs	r2, r0
 8015982:	429c      	cmp	r4, r3
 8015984:	dd09      	ble.n	801599a <scalbn+0x76>
 8015986:	000b      	movs	r3, r1
 8015988:	4815      	ldr	r0, [pc, #84]	; (80159e0 <scalbn+0xbc>)
 801598a:	4916      	ldr	r1, [pc, #88]	; (80159e4 <scalbn+0xc0>)
 801598c:	f000 f982 	bl	8015c94 <copysign>
 8015990:	4a13      	ldr	r2, [pc, #76]	; (80159e0 <scalbn+0xbc>)
 8015992:	4b14      	ldr	r3, [pc, #80]	; (80159e4 <scalbn+0xc0>)
 8015994:	f7fc ff72 	bl	801287c <__aeabi_dmul>
 8015998:	e7e5      	b.n	8015966 <scalbn+0x42>
 801599a:	000b      	movs	r3, r1
 801599c:	4812      	ldr	r0, [pc, #72]	; (80159e8 <scalbn+0xc4>)
 801599e:	4913      	ldr	r1, [pc, #76]	; (80159ec <scalbn+0xc8>)
 80159a0:	f000 f978 	bl	8015c94 <copysign>
 80159a4:	4a10      	ldr	r2, [pc, #64]	; (80159e8 <scalbn+0xc4>)
 80159a6:	4b11      	ldr	r3, [pc, #68]	; (80159ec <scalbn+0xc8>)
 80159a8:	f7fc ff68 	bl	801287c <__aeabi_dmul>
 80159ac:	e7db      	b.n	8015966 <scalbn+0x42>
 80159ae:	0002      	movs	r2, r0
 80159b0:	e7e9      	b.n	8015986 <scalbn+0x62>
 80159b2:	4c08      	ldr	r4, [pc, #32]	; (80159d4 <scalbn+0xb0>)
 80159b4:	3336      	adds	r3, #54	; 0x36
 80159b6:	4022      	ands	r2, r4
 80159b8:	051b      	lsls	r3, r3, #20
 80159ba:	4313      	orrs	r3, r2
 80159bc:	0019      	movs	r1, r3
 80159be:	2200      	movs	r2, #0
 80159c0:	4b0b      	ldr	r3, [pc, #44]	; (80159f0 <scalbn+0xcc>)
 80159c2:	f7fc ff5b 	bl	801287c <__aeabi_dmul>
 80159c6:	e7ce      	b.n	8015966 <scalbn+0x42>
 80159c8:	43500000 	.word	0x43500000
 80159cc:	ffff3cb0 	.word	0xffff3cb0
 80159d0:	000007fe 	.word	0x000007fe
 80159d4:	800fffff 	.word	0x800fffff
 80159d8:	000007ff 	.word	0x000007ff
 80159dc:	0000c350 	.word	0x0000c350
 80159e0:	8800759c 	.word	0x8800759c
 80159e4:	7e37e43c 	.word	0x7e37e43c
 80159e8:	c2f8f359 	.word	0xc2f8f359
 80159ec:	01a56e1f 	.word	0x01a56e1f
 80159f0:	3c900000 	.word	0x3c900000

080159f4 <finitef>:
 80159f4:	0043      	lsls	r3, r0, #1
 80159f6:	2000      	movs	r0, #0
 80159f8:	4a02      	ldr	r2, [pc, #8]	; (8015a04 <finitef+0x10>)
 80159fa:	085b      	lsrs	r3, r3, #1
 80159fc:	429a      	cmp	r2, r3
 80159fe:	4140      	adcs	r0, r0
 8015a00:	4770      	bx	lr
 8015a02:	46c0      	nop			; (mov r8, r8)
 8015a04:	7f7fffff 	.word	0x7f7fffff

08015a08 <__ieee754_logf>:
 8015a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a0a:	46de      	mov	lr, fp
 8015a0c:	4657      	mov	r7, sl
 8015a0e:	464e      	mov	r6, r9
 8015a10:	4645      	mov	r5, r8
 8015a12:	0003      	movs	r3, r0
 8015a14:	b5e0      	push	{r5, r6, r7, lr}
 8015a16:	0042      	lsls	r2, r0, #1
 8015a18:	d044      	beq.n	8015aa4 <__ieee754_logf+0x9c>
 8015a1a:	2800      	cmp	r0, #0
 8015a1c:	db4d      	blt.n	8015aba <__ieee754_logf+0xb2>
 8015a1e:	4a8e      	ldr	r2, [pc, #568]	; (8015c58 <__ieee754_logf+0x250>)
 8015a20:	4290      	cmp	r0, r2
 8015a22:	dc51      	bgt.n	8015ac8 <__ieee754_logf+0xc0>
 8015a24:	4a8d      	ldr	r2, [pc, #564]	; (8015c5c <__ieee754_logf+0x254>)
 8015a26:	2100      	movs	r1, #0
 8015a28:	4290      	cmp	r0, r2
 8015a2a:	dc06      	bgt.n	8015a3a <__ieee754_logf+0x32>
 8015a2c:	2198      	movs	r1, #152	; 0x98
 8015a2e:	05c9      	lsls	r1, r1, #23
 8015a30:	f7fb f85e 	bl	8010af0 <__aeabi_fmul>
 8015a34:	2119      	movs	r1, #25
 8015a36:	0003      	movs	r3, r0
 8015a38:	4249      	negs	r1, r1
 8015a3a:	15da      	asrs	r2, r3, #23
 8015a3c:	025b      	lsls	r3, r3, #9
 8015a3e:	0a5c      	lsrs	r4, r3, #9
 8015a40:	4b87      	ldr	r3, [pc, #540]	; (8015c60 <__ieee754_logf+0x258>)
 8015a42:	3a7f      	subs	r2, #127	; 0x7f
 8015a44:	18e0      	adds	r0, r4, r3
 8015a46:	2380      	movs	r3, #128	; 0x80
 8015a48:	041b      	lsls	r3, r3, #16
 8015a4a:	4003      	ands	r3, r0
 8015a4c:	20fe      	movs	r0, #254	; 0xfe
 8015a4e:	1852      	adds	r2, r2, r1
 8015a50:	21fe      	movs	r1, #254	; 0xfe
 8015a52:	0580      	lsls	r0, r0, #22
 8015a54:	4058      	eors	r0, r3
 8015a56:	15dd      	asrs	r5, r3, #23
 8015a58:	4320      	orrs	r0, r4
 8015a5a:	0589      	lsls	r1, r1, #22
 8015a5c:	18ad      	adds	r5, r5, r2
 8015a5e:	f7fb f979 	bl	8010d54 <__aeabi_fsub>
 8015a62:	0023      	movs	r3, r4
 8015a64:	330f      	adds	r3, #15
 8015a66:	025b      	lsls	r3, r3, #9
 8015a68:	1c06      	adds	r6, r0, #0
 8015a6a:	0a5b      	lsrs	r3, r3, #9
 8015a6c:	2b0f      	cmp	r3, #15
 8015a6e:	dc2f      	bgt.n	8015ad0 <__ieee754_logf+0xc8>
 8015a70:	2100      	movs	r1, #0
 8015a72:	f7fb fd2f 	bl	80114d4 <__aeabi_fcmpeq>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d100      	bne.n	8015a7c <__ieee754_logf+0x74>
 8015a7a:	e09e      	b.n	8015bba <__ieee754_logf+0x1b2>
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	2d00      	cmp	r5, #0
 8015a80:	d015      	beq.n	8015aae <__ieee754_logf+0xa6>
 8015a82:	0028      	movs	r0, r5
 8015a84:	f7fb ff4a 	bl	801191c <__aeabi_i2f>
 8015a88:	4976      	ldr	r1, [pc, #472]	; (8015c64 <__ieee754_logf+0x25c>)
 8015a8a:	1c04      	adds	r4, r0, #0
 8015a8c:	f7fb f830 	bl	8010af0 <__aeabi_fmul>
 8015a90:	4975      	ldr	r1, [pc, #468]	; (8015c68 <__ieee754_logf+0x260>)
 8015a92:	1c05      	adds	r5, r0, #0
 8015a94:	1c20      	adds	r0, r4, #0
 8015a96:	f7fb f82b 	bl	8010af0 <__aeabi_fmul>
 8015a9a:	1c01      	adds	r1, r0, #0
 8015a9c:	1c28      	adds	r0, r5, #0
 8015a9e:	f7fa fd7b 	bl	8010598 <__aeabi_fadd>
 8015aa2:	e004      	b.n	8015aae <__ieee754_logf+0xa6>
 8015aa4:	20cc      	movs	r0, #204	; 0xcc
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	0600      	lsls	r0, r0, #24
 8015aaa:	f7fa ff0f 	bl	80108cc <__aeabi_fdiv>
 8015aae:	bc3c      	pop	{r2, r3, r4, r5}
 8015ab0:	4690      	mov	r8, r2
 8015ab2:	4699      	mov	r9, r3
 8015ab4:	46a2      	mov	sl, r4
 8015ab6:	46ab      	mov	fp, r5
 8015ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aba:	1c01      	adds	r1, r0, #0
 8015abc:	f7fb f94a 	bl	8010d54 <__aeabi_fsub>
 8015ac0:	2100      	movs	r1, #0
 8015ac2:	f7fa ff03 	bl	80108cc <__aeabi_fdiv>
 8015ac6:	e7f2      	b.n	8015aae <__ieee754_logf+0xa6>
 8015ac8:	1c01      	adds	r1, r0, #0
 8015aca:	f7fa fd65 	bl	8010598 <__aeabi_fadd>
 8015ace:	e7ee      	b.n	8015aae <__ieee754_logf+0xa6>
 8015ad0:	2180      	movs	r1, #128	; 0x80
 8015ad2:	05c9      	lsls	r1, r1, #23
 8015ad4:	f7fa fd60 	bl	8010598 <__aeabi_fadd>
 8015ad8:	1c01      	adds	r1, r0, #0
 8015ada:	1c30      	adds	r0, r6, #0
 8015adc:	f7fa fef6 	bl	80108cc <__aeabi_fdiv>
 8015ae0:	4680      	mov	r8, r0
 8015ae2:	0028      	movs	r0, r5
 8015ae4:	f7fb ff1a 	bl	801191c <__aeabi_i2f>
 8015ae8:	4641      	mov	r1, r8
 8015aea:	4681      	mov	r9, r0
 8015aec:	4640      	mov	r0, r8
 8015aee:	f7fa ffff 	bl	8010af0 <__aeabi_fmul>
 8015af2:	4b5e      	ldr	r3, [pc, #376]	; (8015c6c <__ieee754_logf+0x264>)
 8015af4:	1c01      	adds	r1, r0, #0
 8015af6:	469a      	mov	sl, r3
 8015af8:	4683      	mov	fp, r0
 8015afa:	f7fa fff9 	bl	8010af0 <__aeabi_fmul>
 8015afe:	495c      	ldr	r1, [pc, #368]	; (8015c70 <__ieee754_logf+0x268>)
 8015b00:	1c07      	adds	r7, r0, #0
 8015b02:	f7fa fff5 	bl	8010af0 <__aeabi_fmul>
 8015b06:	495b      	ldr	r1, [pc, #364]	; (8015c74 <__ieee754_logf+0x26c>)
 8015b08:	f7fa fd46 	bl	8010598 <__aeabi_fadd>
 8015b0c:	1c39      	adds	r1, r7, #0
 8015b0e:	f7fa ffef 	bl	8010af0 <__aeabi_fmul>
 8015b12:	4959      	ldr	r1, [pc, #356]	; (8015c78 <__ieee754_logf+0x270>)
 8015b14:	f7fa fd40 	bl	8010598 <__aeabi_fadd>
 8015b18:	1c39      	adds	r1, r7, #0
 8015b1a:	f7fa ffe9 	bl	8010af0 <__aeabi_fmul>
 8015b1e:	4957      	ldr	r1, [pc, #348]	; (8015c7c <__ieee754_logf+0x274>)
 8015b20:	f7fa fd3a 	bl	8010598 <__aeabi_fadd>
 8015b24:	4659      	mov	r1, fp
 8015b26:	f7fa ffe3 	bl	8010af0 <__aeabi_fmul>
 8015b2a:	4955      	ldr	r1, [pc, #340]	; (8015c80 <__ieee754_logf+0x278>)
 8015b2c:	4683      	mov	fp, r0
 8015b2e:	1c38      	adds	r0, r7, #0
 8015b30:	f7fa ffde 	bl	8010af0 <__aeabi_fmul>
 8015b34:	4953      	ldr	r1, [pc, #332]	; (8015c84 <__ieee754_logf+0x27c>)
 8015b36:	f7fa fd2f 	bl	8010598 <__aeabi_fadd>
 8015b3a:	1c39      	adds	r1, r7, #0
 8015b3c:	f7fa ffd8 	bl	8010af0 <__aeabi_fmul>
 8015b40:	4951      	ldr	r1, [pc, #324]	; (8015c88 <__ieee754_logf+0x280>)
 8015b42:	f7fa fd29 	bl	8010598 <__aeabi_fadd>
 8015b46:	1c39      	adds	r1, r7, #0
 8015b48:	f7fa ffd2 	bl	8010af0 <__aeabi_fmul>
 8015b4c:	1c01      	adds	r1, r0, #0
 8015b4e:	4658      	mov	r0, fp
 8015b50:	f7fa fd22 	bl	8010598 <__aeabi_fadd>
 8015b54:	4b4d      	ldr	r3, [pc, #308]	; (8015c8c <__ieee754_logf+0x284>)
 8015b56:	44a2      	add	sl, r4
 8015b58:	1b1c      	subs	r4, r3, r4
 8015b5a:	4653      	mov	r3, sl
 8015b5c:	1c07      	adds	r7, r0, #0
 8015b5e:	431c      	orrs	r4, r3
 8015b60:	2c00      	cmp	r4, #0
 8015b62:	dd65      	ble.n	8015c30 <__ieee754_logf+0x228>
 8015b64:	21fc      	movs	r1, #252	; 0xfc
 8015b66:	1c30      	adds	r0, r6, #0
 8015b68:	0589      	lsls	r1, r1, #22
 8015b6a:	f7fa ffc1 	bl	8010af0 <__aeabi_fmul>
 8015b6e:	1c31      	adds	r1, r6, #0
 8015b70:	f7fa ffbe 	bl	8010af0 <__aeabi_fmul>
 8015b74:	1c01      	adds	r1, r0, #0
 8015b76:	1c04      	adds	r4, r0, #0
 8015b78:	1c38      	adds	r0, r7, #0
 8015b7a:	f7fa fd0d 	bl	8010598 <__aeabi_fadd>
 8015b7e:	4641      	mov	r1, r8
 8015b80:	f7fa ffb6 	bl	8010af0 <__aeabi_fmul>
 8015b84:	1c07      	adds	r7, r0, #0
 8015b86:	2d00      	cmp	r5, #0
 8015b88:	d044      	beq.n	8015c14 <__ieee754_logf+0x20c>
 8015b8a:	4936      	ldr	r1, [pc, #216]	; (8015c64 <__ieee754_logf+0x25c>)
 8015b8c:	4648      	mov	r0, r9
 8015b8e:	f7fa ffaf 	bl	8010af0 <__aeabi_fmul>
 8015b92:	4935      	ldr	r1, [pc, #212]	; (8015c68 <__ieee754_logf+0x260>)
 8015b94:	1c05      	adds	r5, r0, #0
 8015b96:	4648      	mov	r0, r9
 8015b98:	f7fa ffaa 	bl	8010af0 <__aeabi_fmul>
 8015b9c:	1c39      	adds	r1, r7, #0
 8015b9e:	f7fa fcfb 	bl	8010598 <__aeabi_fadd>
 8015ba2:	1c01      	adds	r1, r0, #0
 8015ba4:	1c20      	adds	r0, r4, #0
 8015ba6:	f7fb f8d5 	bl	8010d54 <__aeabi_fsub>
 8015baa:	1c31      	adds	r1, r6, #0
 8015bac:	f7fb f8d2 	bl	8010d54 <__aeabi_fsub>
 8015bb0:	1c01      	adds	r1, r0, #0
 8015bb2:	1c28      	adds	r0, r5, #0
 8015bb4:	f7fb f8ce 	bl	8010d54 <__aeabi_fsub>
 8015bb8:	e779      	b.n	8015aae <__ieee754_logf+0xa6>
 8015bba:	4935      	ldr	r1, [pc, #212]	; (8015c90 <__ieee754_logf+0x288>)
 8015bbc:	1c30      	adds	r0, r6, #0
 8015bbe:	f7fa ff97 	bl	8010af0 <__aeabi_fmul>
 8015bc2:	1c01      	adds	r1, r0, #0
 8015bc4:	20fc      	movs	r0, #252	; 0xfc
 8015bc6:	0580      	lsls	r0, r0, #22
 8015bc8:	f7fb f8c4 	bl	8010d54 <__aeabi_fsub>
 8015bcc:	1c31      	adds	r1, r6, #0
 8015bce:	1c04      	adds	r4, r0, #0
 8015bd0:	1c30      	adds	r0, r6, #0
 8015bd2:	f7fa ff8d 	bl	8010af0 <__aeabi_fmul>
 8015bd6:	1c01      	adds	r1, r0, #0
 8015bd8:	1c20      	adds	r0, r4, #0
 8015bda:	f7fa ff89 	bl	8010af0 <__aeabi_fmul>
 8015bde:	1c04      	adds	r4, r0, #0
 8015be0:	2d00      	cmp	r5, #0
 8015be2:	d020      	beq.n	8015c26 <__ieee754_logf+0x21e>
 8015be4:	0028      	movs	r0, r5
 8015be6:	f7fb fe99 	bl	801191c <__aeabi_i2f>
 8015bea:	491e      	ldr	r1, [pc, #120]	; (8015c64 <__ieee754_logf+0x25c>)
 8015bec:	1c05      	adds	r5, r0, #0
 8015bee:	f7fa ff7f 	bl	8010af0 <__aeabi_fmul>
 8015bf2:	491d      	ldr	r1, [pc, #116]	; (8015c68 <__ieee754_logf+0x260>)
 8015bf4:	1c07      	adds	r7, r0, #0
 8015bf6:	1c28      	adds	r0, r5, #0
 8015bf8:	f7fa ff7a 	bl	8010af0 <__aeabi_fmul>
 8015bfc:	1c01      	adds	r1, r0, #0
 8015bfe:	1c20      	adds	r0, r4, #0
 8015c00:	f7fb f8a8 	bl	8010d54 <__aeabi_fsub>
 8015c04:	1c31      	adds	r1, r6, #0
 8015c06:	f7fb f8a5 	bl	8010d54 <__aeabi_fsub>
 8015c0a:	1c01      	adds	r1, r0, #0
 8015c0c:	1c38      	adds	r0, r7, #0
 8015c0e:	f7fb f8a1 	bl	8010d54 <__aeabi_fsub>
 8015c12:	e74c      	b.n	8015aae <__ieee754_logf+0xa6>
 8015c14:	1c01      	adds	r1, r0, #0
 8015c16:	1c20      	adds	r0, r4, #0
 8015c18:	f7fb f89c 	bl	8010d54 <__aeabi_fsub>
 8015c1c:	1c01      	adds	r1, r0, #0
 8015c1e:	1c30      	adds	r0, r6, #0
 8015c20:	f7fb f898 	bl	8010d54 <__aeabi_fsub>
 8015c24:	e743      	b.n	8015aae <__ieee754_logf+0xa6>
 8015c26:	1c21      	adds	r1, r4, #0
 8015c28:	1c30      	adds	r0, r6, #0
 8015c2a:	f7fb f893 	bl	8010d54 <__aeabi_fsub>
 8015c2e:	e73e      	b.n	8015aae <__ieee754_logf+0xa6>
 8015c30:	1c01      	adds	r1, r0, #0
 8015c32:	1c30      	adds	r0, r6, #0
 8015c34:	f7fb f88e 	bl	8010d54 <__aeabi_fsub>
 8015c38:	4641      	mov	r1, r8
 8015c3a:	f7fa ff59 	bl	8010af0 <__aeabi_fmul>
 8015c3e:	1c04      	adds	r4, r0, #0
 8015c40:	2d00      	cmp	r5, #0
 8015c42:	d0f0      	beq.n	8015c26 <__ieee754_logf+0x21e>
 8015c44:	4907      	ldr	r1, [pc, #28]	; (8015c64 <__ieee754_logf+0x25c>)
 8015c46:	4648      	mov	r0, r9
 8015c48:	f7fa ff52 	bl	8010af0 <__aeabi_fmul>
 8015c4c:	4906      	ldr	r1, [pc, #24]	; (8015c68 <__ieee754_logf+0x260>)
 8015c4e:	1c05      	adds	r5, r0, #0
 8015c50:	4648      	mov	r0, r9
 8015c52:	f7fa ff4d 	bl	8010af0 <__aeabi_fmul>
 8015c56:	e7a4      	b.n	8015ba2 <__ieee754_logf+0x19a>
 8015c58:	7f7fffff 	.word	0x7f7fffff
 8015c5c:	007fffff 	.word	0x007fffff
 8015c60:	004afb20 	.word	0x004afb20
 8015c64:	3f317180 	.word	0x3f317180
 8015c68:	3717f7d1 	.word	0x3717f7d1
 8015c6c:	ffcf5c30 	.word	0xffcf5c30
 8015c70:	3e178897 	.word	0x3e178897
 8015c74:	3e3a3325 	.word	0x3e3a3325
 8015c78:	3e924925 	.word	0x3e924925
 8015c7c:	3f2aaaab 	.word	0x3f2aaaab
 8015c80:	3e1cd04f 	.word	0x3e1cd04f
 8015c84:	3e638e29 	.word	0x3e638e29
 8015c88:	3ecccccd 	.word	0x3ecccccd
 8015c8c:	0035c288 	.word	0x0035c288
 8015c90:	3eaaaaab 	.word	0x3eaaaaab

08015c94 <copysign>:
 8015c94:	b530      	push	{r4, r5, lr}
 8015c96:	004a      	lsls	r2, r1, #1
 8015c98:	0fdb      	lsrs	r3, r3, #31
 8015c9a:	07db      	lsls	r3, r3, #31
 8015c9c:	0852      	lsrs	r2, r2, #1
 8015c9e:	431a      	orrs	r2, r3
 8015ca0:	0011      	movs	r1, r2
 8015ca2:	bd30      	pop	{r4, r5, pc}

08015ca4 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 8015ca4:	b510      	push	{r4, lr}
 8015ca6:	000c      	movs	r4, r1
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 8015ca8:	21c8      	movs	r1, #200	; 0xc8
 8015caa:	5a62      	ldrh	r2, [r4, r1]
 8015cac:	1c53      	adds	r3, r2, #1
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	5263      	strh	r3, [r4, r1]
 8015cb2:	54a0      	strb	r0, [r4, r2]
	if (buf->position == BUF_SIZE)
 8015cb4:	2bc8      	cmp	r3, #200	; 0xc8
 8015cb6:	d000      	beq.n	8015cba <out_func+0x16>
	{
		_write(0, buf->buffer, BUF_SIZE);
		buf->position = 0;
	}
}
 8015cb8:	bd10      	pop	{r4, pc}
		_write(0, buf->buffer, BUF_SIZE);
 8015cba:	22c8      	movs	r2, #200	; 0xc8
 8015cbc:	0021      	movs	r1, r4
 8015cbe:	2000      	movs	r0, #0
 8015cc0:	f7fd fd3e 	bl	8013740 <_write>
		buf->position = 0;
 8015cc4:	23c8      	movs	r3, #200	; 0xc8
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	52e2      	strh	r2, [r4, r3]
}
 8015cca:	e7f5      	b.n	8015cb8 <out_func+0x14>

08015ccc <__wrap_puts>:


int __wrap_puts(const char *str)
{
 8015ccc:	b510      	push	{r4, lr}
 8015cce:	0004      	movs	r4, r0
	size_t len = strlen(str);
 8015cd0:	f7fd fd2e 	bl	8013730 <strlen>
 8015cd4:	0002      	movs	r2, r0

	_write(0, str, len);
 8015cd6:	0021      	movs	r1, r4
 8015cd8:	2000      	movs	r0, #0
 8015cda:	f7fd fd31 	bl	8013740 <_write>
	_write(0, "\n", 1);
 8015cde:	2201      	movs	r2, #1
 8015ce0:	4902      	ldr	r1, [pc, #8]	; (8015cec <__wrap_puts+0x20>)
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	f7fd fd2c 	bl	8013740 <_write>
	return 0;
}
 8015ce8:	2000      	movs	r0, #0
 8015cea:	bd10      	pop	{r4, pc}
 8015cec:	0801eba4 	.word	0x0801eba4

08015cf0 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 8015cf0:	b40f      	push	{r0, r1, r2, r3}
 8015cf2:	b570      	push	{r4, r5, r6, lr}
 8015cf4:	b0b4      	sub	sp, #208	; 0xd0
 8015cf6:	ac38      	add	r4, sp, #224	; 0xe0
 8015cf8:	cc40      	ldmia	r4!, {r6}
	print_buffer_t buf = {
 8015cfa:	ad01      	add	r5, sp, #4
 8015cfc:	22ca      	movs	r2, #202	; 0xca
 8015cfe:	2100      	movs	r1, #0
 8015d00:	0028      	movs	r0, r5
 8015d02:	f7fd ff9d 	bl	8013c40 <memset>
		.position = 0,
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
 8015d06:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8015d08:	0023      	movs	r3, r4
 8015d0a:	0032      	movs	r2, r6
 8015d0c:	0029      	movs	r1, r5
 8015d0e:	4809      	ldr	r0, [pc, #36]	; (8015d34 <__wrap_printf+0x44>)
 8015d10:	f000 fc90 	bl	8016634 <fctvprintf>
 8015d14:	0004      	movs	r4, r0
	if (buf.position != 0)
 8015d16:	23c8      	movs	r3, #200	; 0xc8
 8015d18:	5aea      	ldrh	r2, [r5, r3]
 8015d1a:	2a00      	cmp	r2, #0
 8015d1c:	d105      	bne.n	8015d2a <__wrap_printf+0x3a>
	}

	va_end(va);

	return ret;
}
 8015d1e:	0020      	movs	r0, r4
 8015d20:	b034      	add	sp, #208	; 0xd0
 8015d22:	bc70      	pop	{r4, r5, r6}
 8015d24:	bc08      	pop	{r3}
 8015d26:	b004      	add	sp, #16
 8015d28:	4718      	bx	r3
		_write(0, buf.buffer, buf.position);
 8015d2a:	a901      	add	r1, sp, #4
 8015d2c:	2000      	movs	r0, #0
 8015d2e:	f7fd fd07 	bl	8013740 <_write>
	return ret;
 8015d32:	e7f4      	b.n	8015d1e <__wrap_printf+0x2e>
 8015d34:	08015ca5 	.word	0x08015ca5

08015d38 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8015d38:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8015d3a:	f000 fc6d 	bl	8016618 <vsnprintf_>
}
 8015d3e:	bd10      	pop	{r4, pc}

08015d40 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d200      	bcs.n	8015d46 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8015d44:	5488      	strb	r0, [r1, r2]
  }
}
 8015d46:	4770      	bx	lr

08015d48 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8015d48:	4770      	bx	lr

08015d4a <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8015d4a:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	d002      	beq.n	8015d56 <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8015d50:	680b      	ldr	r3, [r1, #0]
 8015d52:	6849      	ldr	r1, [r1, #4]
 8015d54:	4798      	blx	r3
  }
}
 8015d56:	bd10      	pop	{r4, pc}

08015d58 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
  unsigned int i = 0U;
 8015d58:	2300      	movs	r3, #0
  while (_is_digit(**str)) {
 8015d5a:	e007      	b.n	8015d6c <_atoi+0x14>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015d5c:	009a      	lsls	r2, r3, #2
 8015d5e:	18d3      	adds	r3, r2, r3
 8015d60:	005a      	lsls	r2, r3, #1
 8015d62:	1c4b      	adds	r3, r1, #1
 8015d64:	6003      	str	r3, [r0, #0]
 8015d66:	780b      	ldrb	r3, [r1, #0]
 8015d68:	189b      	adds	r3, r3, r2
 8015d6a:	3b30      	subs	r3, #48	; 0x30
  while (_is_digit(**str)) {
 8015d6c:	6801      	ldr	r1, [r0, #0]
 8015d6e:	780a      	ldrb	r2, [r1, #0]
  return (ch >= '0') && (ch <= '9');
 8015d70:	3a30      	subs	r2, #48	; 0x30
 8015d72:	b2d2      	uxtb	r2, r2
  while (_is_digit(**str)) {
 8015d74:	2a09      	cmp	r2, #9
 8015d76:	d9f1      	bls.n	8015d5c <_atoi+0x4>
  }
  return i;
}
 8015d78:	0018      	movs	r0, r3
 8015d7a:	4770      	bx	lr

08015d7c <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8015d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d7e:	46d6      	mov	lr, sl
 8015d80:	464f      	mov	r7, r9
 8015d82:	4646      	mov	r6, r8
 8015d84:	b5c0      	push	{r6, r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	0005      	movs	r5, r0
 8015d8a:	9100      	str	r1, [sp, #0]
 8015d8c:	4690      	mov	r8, r2
 8015d8e:	9301      	str	r3, [sp, #4]
 8015d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d92:	4699      	mov	r9, r3
 8015d94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015d96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8015d98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d9a:	079b      	lsls	r3, r3, #30
 8015d9c:	d012      	beq.n	8015dc4 <_out_rev+0x48>
 8015d9e:	464e      	mov	r6, r9
 8015da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015da2:	4699      	mov	r9, r3
 8015da4:	e018      	b.n	8015dd8 <_out_rev+0x5c>
    for (size_t i = len; i < width; i++) {
      out(' ', buffer, idx++, maxlen);
 8015da6:	1c54      	adds	r4, r2, #1
 8015da8:	9b01      	ldr	r3, [sp, #4]
 8015daa:	9900      	ldr	r1, [sp, #0]
 8015dac:	2020      	movs	r0, #32
 8015dae:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 8015db0:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8015db2:	0022      	movs	r2, r4
    for (size_t i = len; i < width; i++) {
 8015db4:	42b7      	cmp	r7, r6
 8015db6:	d3f6      	bcc.n	8015da6 <_out_rev+0x2a>
 8015db8:	4654      	mov	r4, sl
 8015dba:	960c      	str	r6, [sp, #48]	; 0x30
 8015dbc:	464e      	mov	r6, r9
 8015dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015dc0:	4699      	mov	r9, r3
 8015dc2:	e009      	b.n	8015dd8 <_out_rev+0x5c>
 8015dc4:	0027      	movs	r7, r4
 8015dc6:	46a2      	mov	sl, r4
 8015dc8:	e7f4      	b.n	8015db4 <_out_rev+0x38>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 8015dca:	3c01      	subs	r4, #1
 8015dcc:	1c57      	adds	r7, r2, #1
 8015dce:	5d30      	ldrb	r0, [r6, r4]
 8015dd0:	9b01      	ldr	r3, [sp, #4]
 8015dd2:	9900      	ldr	r1, [sp, #0]
 8015dd4:	47a8      	blx	r5
 8015dd6:	003a      	movs	r2, r7
  while (len) {
 8015dd8:	2c00      	cmp	r4, #0
 8015dda:	d1f6      	bne.n	8015dca <_out_rev+0x4e>
 8015ddc:	464e      	mov	r6, r9
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8015dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015de0:	079b      	lsls	r3, r3, #30
 8015de2:	d50a      	bpl.n	8015dfa <_out_rev+0x7e>
 8015de4:	4647      	mov	r7, r8
 8015de6:	e005      	b.n	8015df4 <_out_rev+0x78>
    while (idx - start_idx < width) {
      out(' ', buffer, idx++, maxlen);
 8015de8:	1c54      	adds	r4, r2, #1
 8015dea:	9b01      	ldr	r3, [sp, #4]
 8015dec:	9900      	ldr	r1, [sp, #0]
 8015dee:	2020      	movs	r0, #32
 8015df0:	47a8      	blx	r5
 8015df2:	0022      	movs	r2, r4
    while (idx - start_idx < width) {
 8015df4:	1bd3      	subs	r3, r2, r7
 8015df6:	42b3      	cmp	r3, r6
 8015df8:	d3f6      	bcc.n	8015de8 <_out_rev+0x6c>
    }
  }

  return idx;
}
 8015dfa:	0010      	movs	r0, r2
 8015dfc:	b002      	add	sp, #8
 8015dfe:	bc1c      	pop	{r2, r3, r4}
 8015e00:	4690      	mov	r8, r2
 8015e02:	4699      	mov	r9, r3
 8015e04:	46a2      	mov	sl, r4
 8015e06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015e08 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e0a:	46ce      	mov	lr, r9
 8015e0c:	4647      	mov	r7, r8
 8015e0e:	b580      	push	{r7, lr}
 8015e10:	b087      	sub	sp, #28
 8015e12:	9204      	str	r2, [sp, #16]
 8015e14:	9305      	str	r3, [sp, #20]
 8015e16:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8015e18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8015e1a:	ad10      	add	r5, sp, #64	; 0x40
 8015e1c:	782b      	ldrb	r3, [r5, #0]
 8015e1e:	4699      	mov	r9, r3
 8015e20:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015e22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e24:	9d14      	ldr	r5, [sp, #80]	; 0x50
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8015e26:	07aa      	lsls	r2, r5, #30
 8015e28:	d41c      	bmi.n	8015e64 <_ntoa_format+0x5c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d00c      	beq.n	8015e48 <_ntoa_format+0x40>
 8015e2e:	07ea      	lsls	r2, r5, #31
 8015e30:	d50a      	bpl.n	8015e48 <_ntoa_format+0x40>
 8015e32:	464a      	mov	r2, r9
 8015e34:	2a00      	cmp	r2, #0
 8015e36:	d102      	bne.n	8015e3e <_ntoa_format+0x36>
 8015e38:	320c      	adds	r2, #12
 8015e3a:	422a      	tst	r2, r5
 8015e3c:	d004      	beq.n	8015e48 <_ntoa_format+0x40>
      width--;
 8015e3e:	3b01      	subs	r3, #1
 8015e40:	e002      	b.n	8015e48 <_ntoa_format+0x40>
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015e42:	2230      	movs	r2, #48	; 0x30
 8015e44:	5532      	strb	r2, [r6, r4]
 8015e46:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e48:	42bc      	cmp	r4, r7
 8015e4a:	d205      	bcs.n	8015e58 <_ntoa_format+0x50>
 8015e4c:	2c1f      	cmp	r4, #31
 8015e4e:	d9f8      	bls.n	8015e42 <_ntoa_format+0x3a>
 8015e50:	e002      	b.n	8015e58 <_ntoa_format+0x50>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8015e52:	2230      	movs	r2, #48	; 0x30
 8015e54:	5532      	strb	r2, [r6, r4]
 8015e56:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e58:	07ea      	lsls	r2, r5, #31
 8015e5a:	d503      	bpl.n	8015e64 <_ntoa_format+0x5c>
 8015e5c:	429c      	cmp	r4, r3
 8015e5e:	d201      	bcs.n	8015e64 <_ntoa_format+0x5c>
 8015e60:	2c1f      	cmp	r4, #31
 8015e62:	d9f6      	bls.n	8015e52 <_ntoa_format+0x4a>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8015e64:	06ea      	lsls	r2, r5, #27
 8015e66:	d515      	bpl.n	8015e94 <_ntoa_format+0x8c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8015e68:	056a      	lsls	r2, r5, #21
 8015e6a:	d405      	bmi.n	8015e78 <_ntoa_format+0x70>
 8015e6c:	2c00      	cmp	r4, #0
 8015e6e:	d003      	beq.n	8015e78 <_ntoa_format+0x70>
 8015e70:	42bc      	cmp	r4, r7
 8015e72:	d01c      	beq.n	8015eae <_ntoa_format+0xa6>
 8015e74:	429c      	cmp	r4, r3
 8015e76:	d01a      	beq.n	8015eae <_ntoa_format+0xa6>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e7a:	2a10      	cmp	r2, #16
 8015e7c:	d023      	beq.n	8015ec6 <_ntoa_format+0xbe>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e80:	2a10      	cmp	r2, #16
 8015e82:	d028      	beq.n	8015ed6 <_ntoa_format+0xce>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015e84:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015e86:	2a02      	cmp	r2, #2
 8015e88:	d02d      	beq.n	8015ee6 <_ntoa_format+0xde>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015e8a:	2c1f      	cmp	r4, #31
 8015e8c:	d802      	bhi.n	8015e94 <_ntoa_format+0x8c>
      buf[len++] = '0';
 8015e8e:	2730      	movs	r7, #48	; 0x30
 8015e90:	5537      	strb	r7, [r6, r4]
 8015e92:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015e94:	2c1f      	cmp	r4, #31
 8015e96:	d82f      	bhi.n	8015ef8 <_ntoa_format+0xf0>
    if (negative) {
 8015e98:	464a      	mov	r2, r9
 8015e9a:	2a00      	cmp	r2, #0
 8015e9c:	d129      	bne.n	8015ef2 <_ntoa_format+0xea>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 8015e9e:	076a      	lsls	r2, r5, #29
 8015ea0:	d437      	bmi.n	8015f12 <_ntoa_format+0x10a>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 8015ea2:	072a      	lsls	r2, r5, #28
 8015ea4:	d528      	bpl.n	8015ef8 <_ntoa_format+0xf0>
      buf[len++] = ' ';
 8015ea6:	2720      	movs	r7, #32
 8015ea8:	5537      	strb	r7, [r6, r4]
 8015eaa:	3401      	adds	r4, #1
 8015eac:	e024      	b.n	8015ef8 <_ntoa_format+0xf0>
      len--;
 8015eae:	1e67      	subs	r7, r4, #1
      if (len && (base == 16U)) {
 8015eb0:	2f00      	cmp	r7, #0
 8015eb2:	d006      	beq.n	8015ec2 <_ntoa_format+0xba>
 8015eb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015eb6:	2a10      	cmp	r2, #16
 8015eb8:	d001      	beq.n	8015ebe <_ntoa_format+0xb6>
      len--;
 8015eba:	003c      	movs	r4, r7
 8015ebc:	e7dc      	b.n	8015e78 <_ntoa_format+0x70>
        len--;
 8015ebe:	3c02      	subs	r4, #2
 8015ec0:	e7da      	b.n	8015e78 <_ntoa_format+0x70>
      len--;
 8015ec2:	003c      	movs	r4, r7
 8015ec4:	e7d8      	b.n	8015e78 <_ntoa_format+0x70>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015ec6:	06aa      	lsls	r2, r5, #26
 8015ec8:	d4d9      	bmi.n	8015e7e <_ntoa_format+0x76>
 8015eca:	2c1f      	cmp	r4, #31
 8015ecc:	d8d7      	bhi.n	8015e7e <_ntoa_format+0x76>
      buf[len++] = 'x';
 8015ece:	2778      	movs	r7, #120	; 0x78
 8015ed0:	5537      	strb	r7, [r6, r4]
 8015ed2:	3401      	adds	r4, #1
 8015ed4:	e7d9      	b.n	8015e8a <_ntoa_format+0x82>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015ed6:	06aa      	lsls	r2, r5, #26
 8015ed8:	d5d4      	bpl.n	8015e84 <_ntoa_format+0x7c>
 8015eda:	2c1f      	cmp	r4, #31
 8015edc:	d8d2      	bhi.n	8015e84 <_ntoa_format+0x7c>
      buf[len++] = 'X';
 8015ede:	2758      	movs	r7, #88	; 0x58
 8015ee0:	5537      	strb	r7, [r6, r4]
 8015ee2:	3401      	adds	r4, #1
 8015ee4:	e7d1      	b.n	8015e8a <_ntoa_format+0x82>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015ee6:	2c1f      	cmp	r4, #31
 8015ee8:	d8cf      	bhi.n	8015e8a <_ntoa_format+0x82>
      buf[len++] = 'b';
 8015eea:	2762      	movs	r7, #98	; 0x62
 8015eec:	5537      	strb	r7, [r6, r4]
 8015eee:	3401      	adds	r4, #1
 8015ef0:	e7cb      	b.n	8015e8a <_ntoa_format+0x82>
      buf[len++] = '-';
 8015ef2:	272d      	movs	r7, #45	; 0x2d
 8015ef4:	5537      	strb	r7, [r6, r4]
 8015ef6:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8015ef8:	9503      	str	r5, [sp, #12]
 8015efa:	9302      	str	r3, [sp, #8]
 8015efc:	9401      	str	r4, [sp, #4]
 8015efe:	9600      	str	r6, [sp, #0]
 8015f00:	9b05      	ldr	r3, [sp, #20]
 8015f02:	9a04      	ldr	r2, [sp, #16]
 8015f04:	f7ff ff3a 	bl	8015d7c <_out_rev>
}
 8015f08:	b007      	add	sp, #28
 8015f0a:	bc0c      	pop	{r2, r3}
 8015f0c:	4690      	mov	r8, r2
 8015f0e:	4699      	mov	r9, r3
 8015f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = '+';  // ignore the space if the '+' exists
 8015f12:	272b      	movs	r7, #43	; 0x2b
 8015f14:	5537      	strb	r7, [r6, r4]
 8015f16:	3401      	adds	r4, #1
 8015f18:	e7ee      	b.n	8015ef8 <_ntoa_format+0xf0>

08015f1a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f1c:	46c6      	mov	lr, r8
 8015f1e:	b500      	push	{lr}
 8015f20:	b094      	sub	sp, #80	; 0x50
 8015f22:	9008      	str	r0, [sp, #32]
 8015f24:	9109      	str	r1, [sp, #36]	; 0x24
 8015f26:	920a      	str	r2, [sp, #40]	; 0x28
 8015f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8015f2a:	ab1a      	add	r3, sp, #104	; 0x68
 8015f2c:	cb10      	ldmia	r3!, {r4}
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	4698      	mov	r8, r3
 8015f32:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015f34:	2c00      	cmp	r4, #0
 8015f36:	d101      	bne.n	8015f3c <_ntoa_long+0x22>
    flags &= ~FLAGS_HASH;
 8015f38:	2310      	movs	r3, #16
 8015f3a:	439d      	bics	r5, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015f3c:	2780      	movs	r7, #128	; 0x80
 8015f3e:	00ff      	lsls	r7, r7, #3
 8015f40:	402f      	ands	r7, r5
 8015f42:	d016      	beq.n	8015f72 <_ntoa_long+0x58>
 8015f44:	2c00      	cmp	r4, #0
 8015f46:	d020      	beq.n	8015f8a <_ntoa_long+0x70>
 8015f48:	2700      	movs	r7, #0
 8015f4a:	e012      	b.n	8015f72 <_ntoa_long+0x58>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015f4c:	06aa      	lsls	r2, r5, #26
 8015f4e:	d51a      	bpl.n	8015f86 <_ntoa_long+0x6c>
 8015f50:	2141      	movs	r1, #65	; 0x41
 8015f52:	18c9      	adds	r1, r1, r3
 8015f54:	b2c9      	uxtb	r1, r1
 8015f56:	390a      	subs	r1, #10
 8015f58:	b2c9      	uxtb	r1, r1
 8015f5a:	1c7e      	adds	r6, r7, #1
 8015f5c:	ab0c      	add	r3, sp, #48	; 0x30
 8015f5e:	55d9      	strb	r1, [r3, r7]
      value /= base;
 8015f60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f62:	0020      	movs	r0, r4
 8015f64:	f7fb f8f6 	bl	8011154 <__udivsi3>
 8015f68:	1e04      	subs	r4, r0, #0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015f6a:	d00f      	beq.n	8015f8c <_ntoa_long+0x72>
 8015f6c:	2e1f      	cmp	r6, #31
 8015f6e:	d80d      	bhi.n	8015f8c <_ntoa_long+0x72>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015f70:	0037      	movs	r7, r6
      const char digit = (char)(value % base);
 8015f72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f74:	0020      	movs	r0, r4
 8015f76:	f7fb f973 	bl	8011260 <__aeabi_uidivmod>
 8015f7a:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015f7c:	2b09      	cmp	r3, #9
 8015f7e:	d8e5      	bhi.n	8015f4c <_ntoa_long+0x32>
 8015f80:	3330      	adds	r3, #48	; 0x30
 8015f82:	b2d9      	uxtb	r1, r3
 8015f84:	e7e9      	b.n	8015f5a <_ntoa_long+0x40>
 8015f86:	2161      	movs	r1, #97	; 0x61
 8015f88:	e7e3      	b.n	8015f52 <_ntoa_long+0x38>
  size_t len = 0U;
 8015f8a:	2600      	movs	r6, #0
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015f8c:	9506      	str	r5, [sp, #24]
 8015f8e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015f90:	9305      	str	r3, [sp, #20]
 8015f92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015f98:	9303      	str	r3, [sp, #12]
 8015f9a:	4643      	mov	r3, r8
 8015f9c:	9302      	str	r3, [sp, #8]
 8015f9e:	9601      	str	r6, [sp, #4]
 8015fa0:	ab0c      	add	r3, sp, #48	; 0x30
 8015fa2:	9300      	str	r3, [sp, #0]
 8015fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015faa:	9808      	ldr	r0, [sp, #32]
 8015fac:	f7ff ff2c 	bl	8015e08 <_ntoa_format>
}
 8015fb0:	b014      	add	sp, #80	; 0x50
 8015fb2:	bc04      	pop	{r2}
 8015fb4:	4690      	mov	r8, r2
 8015fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015fb8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fba:	46d6      	mov	lr, sl
 8015fbc:	464f      	mov	r7, r9
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b099      	sub	sp, #100	; 0x64
 8015fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8015fc4:	910d      	str	r1, [sp, #52]	; 0x34
 8015fc6:	920e      	str	r2, [sp, #56]	; 0x38
 8015fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fca:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8015fcc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015fce:	ab22      	add	r3, sp, #136	; 0x88
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	469a      	mov	sl, r3
 8015fd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8015fd8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fdc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015fde:	4699      	mov	r9, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8015fe0:	0023      	movs	r3, r4
 8015fe2:	432b      	orrs	r3, r5
 8015fe4:	d103      	bne.n	8015fee <_ntoa_long_long+0x36>
    flags &= ~FLAGS_HASH;
 8015fe6:	3310      	adds	r3, #16
 8015fe8:	464a      	mov	r2, r9
 8015fea:	439a      	bics	r2, r3
 8015fec:	4691      	mov	r9, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015fee:	2680      	movs	r6, #128	; 0x80
 8015ff0:	00f6      	lsls	r6, r6, #3
 8015ff2:	464b      	mov	r3, r9
 8015ff4:	401e      	ands	r6, r3
 8015ff6:	d007      	beq.n	8016008 <_ntoa_long_long+0x50>
 8015ff8:	0023      	movs	r3, r4
 8015ffa:	432b      	orrs	r3, r5
 8015ffc:	d031      	beq.n	8016062 <_ntoa_long_long+0xaa>
 8015ffe:	2600      	movs	r6, #0
 8016000:	0037      	movs	r7, r6
 8016002:	464e      	mov	r6, r9
 8016004:	9409      	str	r4, [sp, #36]	; 0x24
 8016006:	e01b      	b.n	8016040 <_ntoa_long_long+0x88>
 8016008:	0037      	movs	r7, r6
 801600a:	464e      	mov	r6, r9
 801600c:	9409      	str	r4, [sp, #36]	; 0x24
 801600e:	e017      	b.n	8016040 <_ntoa_long_long+0x88>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8016010:	06b2      	lsls	r2, r6, #26
 8016012:	d521      	bpl.n	8016058 <_ntoa_long_long+0xa0>
 8016014:	2241      	movs	r2, #65	; 0x41
 8016016:	18d2      	adds	r2, r2, r3
 8016018:	b2d2      	uxtb	r2, r2
 801601a:	3a0a      	subs	r2, #10
 801601c:	b2d2      	uxtb	r2, r2
 801601e:	1c7c      	adds	r4, r7, #1
 8016020:	ab10      	add	r3, sp, #64	; 0x40
 8016022:	55da      	strb	r2, [r3, r7]
      value /= base;
 8016024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016028:	9809      	ldr	r0, [sp, #36]	; 0x24
 801602a:	0029      	movs	r1, r5
 801602c:	f7fb fa80 	bl	8011530 <__aeabi_uldivmod>
 8016030:	9009      	str	r0, [sp, #36]	; 0x24
 8016032:	000d      	movs	r5, r1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8016034:	000b      	movs	r3, r1
 8016036:	4303      	orrs	r3, r0
 8016038:	d015      	beq.n	8016066 <_ntoa_long_long+0xae>
 801603a:	2c1f      	cmp	r4, #31
 801603c:	d80e      	bhi.n	801605c <_ntoa_long_long+0xa4>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801603e:	0027      	movs	r7, r4
      const char digit = (char)(value % base);
 8016040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016046:	0029      	movs	r1, r5
 8016048:	f7fb fa72 	bl	8011530 <__aeabi_uldivmod>
 801604c:	b2d3      	uxtb	r3, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801604e:	2b09      	cmp	r3, #9
 8016050:	d8de      	bhi.n	8016010 <_ntoa_long_long+0x58>
 8016052:	3330      	adds	r3, #48	; 0x30
 8016054:	b2da      	uxtb	r2, r3
 8016056:	e7e2      	b.n	801601e <_ntoa_long_long+0x66>
 8016058:	2261      	movs	r2, #97	; 0x61
 801605a:	e7dc      	b.n	8016016 <_ntoa_long_long+0x5e>
 801605c:	0027      	movs	r7, r4
 801605e:	46b1      	mov	r9, r6
 8016060:	e003      	b.n	801606a <_ntoa_long_long+0xb2>
  size_t len = 0U;
 8016062:	2700      	movs	r7, #0
 8016064:	e001      	b.n	801606a <_ntoa_long_long+0xb2>
 8016066:	0027      	movs	r7, r4
 8016068:	46b1      	mov	r9, r6
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801606a:	464b      	mov	r3, r9
 801606c:	9306      	str	r3, [sp, #24]
 801606e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8016070:	9305      	str	r3, [sp, #20]
 8016072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016074:	9304      	str	r3, [sp, #16]
 8016076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016078:	9303      	str	r3, [sp, #12]
 801607a:	4653      	mov	r3, sl
 801607c:	9302      	str	r3, [sp, #8]
 801607e:	9701      	str	r7, [sp, #4]
 8016080:	ab10      	add	r3, sp, #64	; 0x40
 8016082:	9300      	str	r3, [sp, #0]
 8016084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016086:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016088:	990d      	ldr	r1, [sp, #52]	; 0x34
 801608a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801608c:	f7ff febc 	bl	8015e08 <_ntoa_format>
}
 8016090:	b019      	add	sp, #100	; 0x64
 8016092:	bc0c      	pop	{r2, r3}
 8016094:	4691      	mov	r9, r2
 8016096:	469a      	mov	sl, r3
 8016098:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801609c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 801609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801609e:	46de      	mov	lr, fp
 80160a0:	4657      	mov	r7, sl
 80160a2:	464e      	mov	r6, r9
 80160a4:	4645      	mov	r5, r8
 80160a6:	b5e0      	push	{r5, r6, r7, lr}
 80160a8:	b093      	sub	sp, #76	; 0x4c
 80160aa:	0006      	movs	r6, r0
 80160ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80160ae:	920a      	str	r2, [sp, #40]	; 0x28
 80160b0:	9311      	str	r3, [sp, #68]	; 0x44
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 80160b2:	2900      	cmp	r1, #0
 80160b4:	d100      	bne.n	80160b8 <_vsnprintf+0x1c>
 80160b6:	e299      	b.n	80165ec <_vsnprintf+0x550>
        format++;
        break;
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80160b8:	2700      	movs	r7, #0
  while (*format)
 80160ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160bc:	7818      	ldrb	r0, [r3, #0]
 80160be:	2800      	cmp	r0, #0
 80160c0:	d100      	bne.n	80160c4 <_vsnprintf+0x28>
 80160c2:	e295      	b.n	80165f0 <_vsnprintf+0x554>
    if (*format != '%') {
 80160c4:	2825      	cmp	r0, #37	; 0x25
 80160c6:	d009      	beq.n	80160dc <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 80160c8:	1c7c      	adds	r4, r7, #1
 80160ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160cc:	003a      	movs	r2, r7
 80160ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160d0:	47b0      	blx	r6
      format++;
 80160d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160d4:	3301      	adds	r3, #1
 80160d6:	9311      	str	r3, [sp, #68]	; 0x44
      out(*format, buffer, idx++, maxlen);
 80160d8:	0027      	movs	r7, r4
      continue;
 80160da:	e7ee      	b.n	80160ba <_vsnprintf+0x1e>
      format++;
 80160dc:	3301      	adds	r3, #1
 80160de:	9311      	str	r3, [sp, #68]	; 0x44
    flags = 0U;
 80160e0:	2500      	movs	r5, #0
 80160e2:	e01d      	b.n	8016120 <_vsnprintf+0x84>
  return (ch >= '0') && (ch <= '9');
 80160e4:	000b      	movs	r3, r1
 80160e6:	3b30      	subs	r3, #48	; 0x30
 80160e8:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 80160ea:	2b09      	cmp	r3, #9
 80160ec:	d937      	bls.n	801615e <_vsnprintf+0xc2>
    else if (*format == '*') {
 80160ee:	292a      	cmp	r1, #42	; 0x2a
 80160f0:	d03a      	beq.n	8016168 <_vsnprintf+0xcc>
    width = 0U;
 80160f2:	2300      	movs	r3, #0
 80160f4:	4698      	mov	r8, r3
    if (*format == '.') {
 80160f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160f8:	781a      	ldrb	r2, [r3, #0]
 80160fa:	2a2e      	cmp	r2, #46	; 0x2e
 80160fc:	d044      	beq.n	8016188 <_vsnprintf+0xec>
    precision = 0U;
 80160fe:	2300      	movs	r3, #0
 8016100:	469b      	mov	fp, r3
    switch (*format) {
 8016102:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016104:	7813      	ldrb	r3, [r2, #0]
 8016106:	3b68      	subs	r3, #104	; 0x68
 8016108:	b2d9      	uxtb	r1, r3
 801610a:	2912      	cmp	r1, #18
 801610c:	d900      	bls.n	8016110 <_vsnprintf+0x74>
 801610e:	e080      	b.n	8016212 <_vsnprintf+0x176>
 8016110:	008b      	lsls	r3, r1, #2
 8016112:	49ce      	ldr	r1, [pc, #824]	; (801644c <_vsnprintf+0x3b0>)
 8016114:	58cb      	ldr	r3, [r1, r3]
 8016116:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8016118:	2301      	movs	r3, #1
 801611a:	431d      	orrs	r5, r3
 801611c:	3201      	adds	r2, #1
 801611e:	9211      	str	r2, [sp, #68]	; 0x44
      switch (*format) {
 8016120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016122:	7811      	ldrb	r1, [r2, #0]
 8016124:	000b      	movs	r3, r1
 8016126:	3b20      	subs	r3, #32
 8016128:	b2d8      	uxtb	r0, r3
 801612a:	2810      	cmp	r0, #16
 801612c:	d8da      	bhi.n	80160e4 <_vsnprintf+0x48>
 801612e:	0083      	lsls	r3, r0, #2
 8016130:	48c7      	ldr	r0, [pc, #796]	; (8016450 <_vsnprintf+0x3b4>)
 8016132:	58c3      	ldr	r3, [r0, r3]
 8016134:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8016136:	2302      	movs	r3, #2
 8016138:	431d      	orrs	r5, r3
 801613a:	3201      	adds	r2, #1
 801613c:	9211      	str	r2, [sp, #68]	; 0x44
 801613e:	e7ef      	b.n	8016120 <_vsnprintf+0x84>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8016140:	2304      	movs	r3, #4
 8016142:	431d      	orrs	r5, r3
 8016144:	3201      	adds	r2, #1
 8016146:	9211      	str	r2, [sp, #68]	; 0x44
 8016148:	e7ea      	b.n	8016120 <_vsnprintf+0x84>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 801614a:	2308      	movs	r3, #8
 801614c:	431d      	orrs	r5, r3
 801614e:	3201      	adds	r2, #1
 8016150:	9211      	str	r2, [sp, #68]	; 0x44
 8016152:	e7e5      	b.n	8016120 <_vsnprintf+0x84>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8016154:	2310      	movs	r3, #16
 8016156:	431d      	orrs	r5, r3
 8016158:	3201      	adds	r2, #1
 801615a:	9211      	str	r2, [sp, #68]	; 0x44
 801615c:	e7e0      	b.n	8016120 <_vsnprintf+0x84>
      width = _atoi(&format);
 801615e:	a811      	add	r0, sp, #68	; 0x44
 8016160:	f7ff fdfa 	bl	8015d58 <_atoi>
 8016164:	4680      	mov	r8, r0
 8016166:	e7c6      	b.n	80160f6 <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 8016168:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801616a:	1d1a      	adds	r2, r3, #4
 801616c:	921c      	str	r2, [sp, #112]	; 0x70
 801616e:	681b      	ldr	r3, [r3, #0]
      if (w < 0) {
 8016170:	2b00      	cmp	r3, #0
 8016172:	db04      	blt.n	801617e <_vsnprintf+0xe2>
        width = (unsigned int)w;
 8016174:	4698      	mov	r8, r3
      format++;
 8016176:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016178:	3301      	adds	r3, #1
 801617a:	9311      	str	r3, [sp, #68]	; 0x44
 801617c:	e7bb      	b.n	80160f6 <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 801617e:	2202      	movs	r2, #2
 8016180:	4315      	orrs	r5, r2
        width = (unsigned int)-w;
 8016182:	425b      	negs	r3, r3
 8016184:	4698      	mov	r8, r3
 8016186:	e7f6      	b.n	8016176 <_vsnprintf+0xda>
      flags |= FLAGS_PRECISION;
 8016188:	2280      	movs	r2, #128	; 0x80
 801618a:	00d2      	lsls	r2, r2, #3
 801618c:	4315      	orrs	r5, r2
      format++;
 801618e:	1c5a      	adds	r2, r3, #1
 8016190:	9211      	str	r2, [sp, #68]	; 0x44
      if (_is_digit(*format)) {
 8016192:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 8016194:	0013      	movs	r3, r2
 8016196:	3b30      	subs	r3, #48	; 0x30
 8016198:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 801619a:	2b09      	cmp	r3, #9
 801619c:	d904      	bls.n	80161a8 <_vsnprintf+0x10c>
      else if (*format == '*') {
 801619e:	2a2a      	cmp	r2, #42	; 0x2a
 80161a0:	d007      	beq.n	80161b2 <_vsnprintf+0x116>
    precision = 0U;
 80161a2:	2300      	movs	r3, #0
 80161a4:	469b      	mov	fp, r3
 80161a6:	e7ac      	b.n	8016102 <_vsnprintf+0x66>
        precision = _atoi(&format);
 80161a8:	a811      	add	r0, sp, #68	; 0x44
 80161aa:	f7ff fdd5 	bl	8015d58 <_atoi>
 80161ae:	4683      	mov	fp, r0
 80161b0:	e7a7      	b.n	8016102 <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 80161b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161b4:	1d1a      	adds	r2, r3, #4
 80161b6:	921c      	str	r2, [sp, #112]	; 0x70
 80161b8:	681b      	ldr	r3, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	db04      	blt.n	80161c8 <_vsnprintf+0x12c>
 80161be:	469b      	mov	fp, r3
        format++;
 80161c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80161c2:	3301      	adds	r3, #1
 80161c4:	9311      	str	r3, [sp, #68]	; 0x44
 80161c6:	e79c      	b.n	8016102 <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80161c8:	2300      	movs	r3, #0
 80161ca:	e7f8      	b.n	80161be <_vsnprintf+0x122>
        flags |= FLAGS_LONG;
 80161cc:	2380      	movs	r3, #128	; 0x80
 80161ce:	005b      	lsls	r3, r3, #1
 80161d0:	432b      	orrs	r3, r5
        format++;
 80161d2:	1c51      	adds	r1, r2, #1
 80161d4:	9111      	str	r1, [sp, #68]	; 0x44
        if (*format == 'l') {
 80161d6:	7852      	ldrb	r2, [r2, #1]
 80161d8:	2a6c      	cmp	r2, #108	; 0x6c
 80161da:	d001      	beq.n	80161e0 <_vsnprintf+0x144>
        flags |= FLAGS_LONG;
 80161dc:	001d      	movs	r5, r3
 80161de:	e018      	b.n	8016212 <_vsnprintf+0x176>
          flags |= FLAGS_LONG_LONG;
 80161e0:	23c0      	movs	r3, #192	; 0xc0
 80161e2:	009b      	lsls	r3, r3, #2
 80161e4:	431d      	orrs	r5, r3
          format++;
 80161e6:	3101      	adds	r1, #1
 80161e8:	9111      	str	r1, [sp, #68]	; 0x44
 80161ea:	e012      	b.n	8016212 <_vsnprintf+0x176>
        flags |= FLAGS_SHORT;
 80161ec:	2380      	movs	r3, #128	; 0x80
 80161ee:	432b      	orrs	r3, r5
        format++;
 80161f0:	1c51      	adds	r1, r2, #1
 80161f2:	9111      	str	r1, [sp, #68]	; 0x44
        if (*format == 'h') {
 80161f4:	7852      	ldrb	r2, [r2, #1]
 80161f6:	2a68      	cmp	r2, #104	; 0x68
 80161f8:	d001      	beq.n	80161fe <_vsnprintf+0x162>
        flags |= FLAGS_SHORT;
 80161fa:	001d      	movs	r5, r3
 80161fc:	e009      	b.n	8016212 <_vsnprintf+0x176>
          flags |= FLAGS_CHAR;
 80161fe:	23c0      	movs	r3, #192	; 0xc0
 8016200:	431d      	orrs	r5, r3
          format++;
 8016202:	3101      	adds	r1, #1
 8016204:	9111      	str	r1, [sp, #68]	; 0x44
 8016206:	e004      	b.n	8016212 <_vsnprintf+0x176>
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016208:	2380      	movs	r3, #128	; 0x80
 801620a:	005b      	lsls	r3, r3, #1
 801620c:	431d      	orrs	r5, r3
        format++;
 801620e:	3201      	adds	r2, #1
 8016210:	9211      	str	r2, [sp, #68]	; 0x44
    switch (*format) {
 8016212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016214:	7818      	ldrb	r0, [r3, #0]
 8016216:	0003      	movs	r3, r0
 8016218:	3b25      	subs	r3, #37	; 0x25
 801621a:	b2da      	uxtb	r2, r3
 801621c:	2a53      	cmp	r2, #83	; 0x53
 801621e:	d900      	bls.n	8016222 <_vsnprintf+0x186>
 8016220:	e1da      	b.n	80165d8 <_vsnprintf+0x53c>
 8016222:	0093      	lsls	r3, r2, #2
 8016224:	4a8b      	ldr	r2, [pc, #556]	; (8016454 <_vsnprintf+0x3b8>)
 8016226:	58d3      	ldr	r3, [r2, r3]
 8016228:	469f      	mov	pc, r3
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 801622a:	2380      	movs	r3, #128	; 0x80
 801622c:	009b      	lsls	r3, r3, #2
 801622e:	431d      	orrs	r5, r3
        format++;
 8016230:	3201      	adds	r2, #1
 8016232:	9211      	str	r2, [sp, #68]	; 0x44
        break;
 8016234:	e7ed      	b.n	8016212 <_vsnprintf+0x176>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016236:	2380      	movs	r3, #128	; 0x80
 8016238:	005b      	lsls	r3, r3, #1
 801623a:	431d      	orrs	r5, r3
        format++;
 801623c:	3201      	adds	r2, #1
 801623e:	9211      	str	r2, [sp, #68]	; 0x44
        break;
 8016240:	e7e7      	b.n	8016212 <_vsnprintf+0x176>
        if (*format == 'x' || *format == 'X') {
 8016242:	2878      	cmp	r0, #120	; 0x78
 8016244:	d00a      	beq.n	801625c <_vsnprintf+0x1c0>
 8016246:	2858      	cmp	r0, #88	; 0x58
 8016248:	d03b      	beq.n	80162c2 <_vsnprintf+0x226>
        else if (*format == 'o') {
 801624a:	286f      	cmp	r0, #111	; 0x6f
 801624c:	d03c      	beq.n	80162c8 <_vsnprintf+0x22c>
        else if (*format == 'b') {
 801624e:	2862      	cmp	r0, #98	; 0x62
 8016250:	d03d      	beq.n	80162ce <_vsnprintf+0x232>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8016252:	2310      	movs	r3, #16
 8016254:	439d      	bics	r5, r3
          base = 10U;
 8016256:	3b06      	subs	r3, #6
 8016258:	469c      	mov	ip, r3
 801625a:	e001      	b.n	8016260 <_vsnprintf+0x1c4>
          base = 16U;
 801625c:	2310      	movs	r3, #16
 801625e:	469c      	mov	ip, r3
        if (*format == 'X') {
 8016260:	2858      	cmp	r0, #88	; 0x58
 8016262:	d037      	beq.n	80162d4 <_vsnprintf+0x238>
        if ((*format != 'i') && (*format != 'd')) {
 8016264:	2869      	cmp	r0, #105	; 0x69
 8016266:	d003      	beq.n	8016270 <_vsnprintf+0x1d4>
 8016268:	2864      	cmp	r0, #100	; 0x64
 801626a:	d001      	beq.n	8016270 <_vsnprintf+0x1d4>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 801626c:	220c      	movs	r2, #12
 801626e:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8016270:	056b      	lsls	r3, r5, #21
 8016272:	d501      	bpl.n	8016278 <_vsnprintf+0x1dc>
          flags &= ~FLAGS_ZEROPAD;
 8016274:	2201      	movs	r2, #1
 8016276:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 8016278:	2869      	cmp	r0, #105	; 0x69
 801627a:	d02e      	beq.n	80162da <_vsnprintf+0x23e>
 801627c:	2864      	cmp	r0, #100	; 0x64
 801627e:	d02c      	beq.n	80162da <_vsnprintf+0x23e>
          if (flags & FLAGS_LONG_LONG) {
 8016280:	05ab      	lsls	r3, r5, #22
 8016282:	d500      	bpl.n	8016286 <_vsnprintf+0x1ea>
 8016284:	e0a1      	b.n	80163ca <_vsnprintf+0x32e>
          else if (flags & FLAGS_LONG) {
 8016286:	05eb      	lsls	r3, r5, #23
 8016288:	d500      	bpl.n	801628c <_vsnprintf+0x1f0>
 801628a:	e0bb      	b.n	8016404 <_vsnprintf+0x368>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801628c:	066b      	lsls	r3, r5, #25
 801628e:	d400      	bmi.n	8016292 <_vsnprintf+0x1f6>
 8016290:	e0ce      	b.n	8016430 <_vsnprintf+0x394>
 8016292:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016294:	1d11      	adds	r1, r2, #4
 8016296:	911c      	str	r1, [sp, #112]	; 0x70
 8016298:	6811      	ldr	r1, [r2, #0]
 801629a:	22ff      	movs	r2, #255	; 0xff
 801629c:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 801629e:	9505      	str	r5, [sp, #20]
 80162a0:	4643      	mov	r3, r8
 80162a2:	9304      	str	r3, [sp, #16]
 80162a4:	465b      	mov	r3, fp
 80162a6:	9303      	str	r3, [sp, #12]
 80162a8:	4663      	mov	r3, ip
 80162aa:	9302      	str	r3, [sp, #8]
 80162ac:	2300      	movs	r3, #0
 80162ae:	9301      	str	r3, [sp, #4]
 80162b0:	9200      	str	r2, [sp, #0]
 80162b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162b4:	003a      	movs	r2, r7
 80162b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162b8:	0030      	movs	r0, r6
 80162ba:	f7ff fe2e 	bl	8015f1a <_ntoa_long>
 80162be:	0007      	movs	r7, r0
 80162c0:	e02a      	b.n	8016318 <_vsnprintf+0x27c>
          base = 16U;
 80162c2:	2310      	movs	r3, #16
 80162c4:	469c      	mov	ip, r3
 80162c6:	e7cb      	b.n	8016260 <_vsnprintf+0x1c4>
          base =  8U;
 80162c8:	2308      	movs	r3, #8
 80162ca:	469c      	mov	ip, r3
 80162cc:	e7c8      	b.n	8016260 <_vsnprintf+0x1c4>
          base =  2U;
 80162ce:	2302      	movs	r3, #2
 80162d0:	469c      	mov	ip, r3
 80162d2:	e7c5      	b.n	8016260 <_vsnprintf+0x1c4>
          flags |= FLAGS_UPPERCASE;
 80162d4:	2220      	movs	r2, #32
 80162d6:	4315      	orrs	r5, r2
 80162d8:	e7c4      	b.n	8016264 <_vsnprintf+0x1c8>
          if (flags & FLAGS_LONG_LONG) {
 80162da:	05ab      	lsls	r3, r5, #22
 80162dc:	d420      	bmi.n	8016320 <_vsnprintf+0x284>
          else if (flags & FLAGS_LONG) {
 80162de:	05eb      	lsls	r3, r5, #23
 80162e0:	d44d      	bmi.n	801637e <_vsnprintf+0x2e2>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80162e2:	066b      	lsls	r3, r5, #25
 80162e4:	d564      	bpl.n	80163b0 <_vsnprintf+0x314>
 80162e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80162e8:	1d11      	adds	r1, r2, #4
 80162ea:	911c      	str	r1, [sp, #112]	; 0x70
 80162ec:	7812      	ldrb	r2, [r2, #0]
 80162ee:	b252      	sxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80162f0:	17d3      	asrs	r3, r2, #31
 80162f2:	18d1      	adds	r1, r2, r3
 80162f4:	4059      	eors	r1, r3
 80162f6:	0fd2      	lsrs	r2, r2, #31
 80162f8:	9505      	str	r5, [sp, #20]
 80162fa:	4643      	mov	r3, r8
 80162fc:	9304      	str	r3, [sp, #16]
 80162fe:	465b      	mov	r3, fp
 8016300:	9303      	str	r3, [sp, #12]
 8016302:	4663      	mov	r3, ip
 8016304:	9302      	str	r3, [sp, #8]
 8016306:	9201      	str	r2, [sp, #4]
 8016308:	9100      	str	r1, [sp, #0]
 801630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801630c:	003a      	movs	r2, r7
 801630e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016310:	0030      	movs	r0, r6
 8016312:	f7ff fe02 	bl	8015f1a <_ntoa_long>
 8016316:	0007      	movs	r7, r0
        format++;
 8016318:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801631a:	3301      	adds	r3, #1
 801631c:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 801631e:	e6cc      	b.n	80160ba <_vsnprintf+0x1e>
            const long long value = va_arg(va, long long);
 8016320:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016322:	1dda      	adds	r2, r3, #7
 8016324:	2107      	movs	r1, #7
 8016326:	438a      	bics	r2, r1
 8016328:	0011      	movs	r1, r2
 801632a:	3108      	adds	r1, #8
 801632c:	911c      	str	r1, [sp, #112]	; 0x70
 801632e:	6811      	ldr	r1, [r2, #0]
 8016330:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016332:	17d3      	asrs	r3, r2, #31
 8016334:	930e      	str	r3, [sp, #56]	; 0x38
 8016336:	930f      	str	r3, [sp, #60]	; 0x3c
 8016338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801633a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801633c:	0018      	movs	r0, r3
 801633e:	4048      	eors	r0, r1
 8016340:	900c      	str	r0, [sp, #48]	; 0x30
 8016342:	0021      	movs	r1, r4
 8016344:	4051      	eors	r1, r2
 8016346:	910d      	str	r1, [sp, #52]	; 0x34
 8016348:	980c      	ldr	r0, [sp, #48]	; 0x30
 801634a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801634c:	1ac0      	subs	r0, r0, r3
 801634e:	41a1      	sbcs	r1, r4
 8016350:	900c      	str	r0, [sp, #48]	; 0x30
 8016352:	910d      	str	r1, [sp, #52]	; 0x34
 8016354:	0fd2      	lsrs	r2, r2, #31
 8016356:	9508      	str	r5, [sp, #32]
 8016358:	4643      	mov	r3, r8
 801635a:	9307      	str	r3, [sp, #28]
 801635c:	465b      	mov	r3, fp
 801635e:	9306      	str	r3, [sp, #24]
 8016360:	4663      	mov	r3, ip
 8016362:	9304      	str	r3, [sp, #16]
 8016364:	2300      	movs	r3, #0
 8016366:	9305      	str	r3, [sp, #20]
 8016368:	9202      	str	r2, [sp, #8]
 801636a:	9000      	str	r0, [sp, #0]
 801636c:	9101      	str	r1, [sp, #4]
 801636e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016370:	003a      	movs	r2, r7
 8016372:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016374:	0030      	movs	r0, r6
 8016376:	f7ff fe1f 	bl	8015fb8 <_ntoa_long_long>
 801637a:	0007      	movs	r7, r0
 801637c:	e7cc      	b.n	8016318 <_vsnprintf+0x27c>
            const long value = va_arg(va, long);
 801637e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016380:	1d11      	adds	r1, r2, #4
 8016382:	911c      	str	r1, [sp, #112]	; 0x70
 8016384:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016386:	17d3      	asrs	r3, r2, #31
 8016388:	18d1      	adds	r1, r2, r3
 801638a:	4059      	eors	r1, r3
 801638c:	0fd2      	lsrs	r2, r2, #31
 801638e:	9505      	str	r5, [sp, #20]
 8016390:	4643      	mov	r3, r8
 8016392:	9304      	str	r3, [sp, #16]
 8016394:	465b      	mov	r3, fp
 8016396:	9303      	str	r3, [sp, #12]
 8016398:	4663      	mov	r3, ip
 801639a:	9302      	str	r3, [sp, #8]
 801639c:	9201      	str	r2, [sp, #4]
 801639e:	9100      	str	r1, [sp, #0]
 80163a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163a2:	003a      	movs	r2, r7
 80163a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163a6:	0030      	movs	r0, r6
 80163a8:	f7ff fdb7 	bl	8015f1a <_ntoa_long>
 80163ac:	0007      	movs	r7, r0
 80163ae:	e7b3      	b.n	8016318 <_vsnprintf+0x27c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80163b0:	062b      	lsls	r3, r5, #24
 80163b2:	d505      	bpl.n	80163c0 <_vsnprintf+0x324>
 80163b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80163b6:	1d11      	adds	r1, r2, #4
 80163b8:	911c      	str	r1, [sp, #112]	; 0x70
 80163ba:	2300      	movs	r3, #0
 80163bc:	5ed2      	ldrsh	r2, [r2, r3]
 80163be:	e797      	b.n	80162f0 <_vsnprintf+0x254>
 80163c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80163c2:	1d11      	adds	r1, r2, #4
 80163c4:	911c      	str	r1, [sp, #112]	; 0x70
 80163c6:	6812      	ldr	r2, [r2, #0]
 80163c8:	e792      	b.n	80162f0 <_vsnprintf+0x254>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80163ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80163cc:	1dda      	adds	r2, r3, #7
 80163ce:	2107      	movs	r1, #7
 80163d0:	438a      	bics	r2, r1
 80163d2:	0011      	movs	r1, r2
 80163d4:	3108      	adds	r1, #8
 80163d6:	911c      	str	r1, [sp, #112]	; 0x70
 80163d8:	6813      	ldr	r3, [r2, #0]
 80163da:	6854      	ldr	r4, [r2, #4]
 80163dc:	9300      	str	r3, [sp, #0]
 80163de:	9401      	str	r4, [sp, #4]
 80163e0:	2200      	movs	r2, #0
 80163e2:	9508      	str	r5, [sp, #32]
 80163e4:	4643      	mov	r3, r8
 80163e6:	9307      	str	r3, [sp, #28]
 80163e8:	465b      	mov	r3, fp
 80163ea:	9306      	str	r3, [sp, #24]
 80163ec:	4663      	mov	r3, ip
 80163ee:	9304      	str	r3, [sp, #16]
 80163f0:	9205      	str	r2, [sp, #20]
 80163f2:	9202      	str	r2, [sp, #8]
 80163f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80163f6:	003a      	movs	r2, r7
 80163f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163fa:	0030      	movs	r0, r6
 80163fc:	f7ff fddc 	bl	8015fb8 <_ntoa_long_long>
 8016400:	0007      	movs	r7, r0
 8016402:	e789      	b.n	8016318 <_vsnprintf+0x27c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8016404:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016406:	1d11      	adds	r1, r2, #4
 8016408:	911c      	str	r1, [sp, #112]	; 0x70
 801640a:	6813      	ldr	r3, [r2, #0]
 801640c:	9300      	str	r3, [sp, #0]
 801640e:	9505      	str	r5, [sp, #20]
 8016410:	4643      	mov	r3, r8
 8016412:	9304      	str	r3, [sp, #16]
 8016414:	465b      	mov	r3, fp
 8016416:	9303      	str	r3, [sp, #12]
 8016418:	4663      	mov	r3, ip
 801641a:	9302      	str	r3, [sp, #8]
 801641c:	2300      	movs	r3, #0
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016422:	003a      	movs	r2, r7
 8016424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016426:	0030      	movs	r0, r6
 8016428:	f7ff fd77 	bl	8015f1a <_ntoa_long>
 801642c:	0007      	movs	r7, r0
 801642e:	e773      	b.n	8016318 <_vsnprintf+0x27c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8016430:	062b      	lsls	r3, r5, #24
 8016432:	d506      	bpl.n	8016442 <_vsnprintf+0x3a6>
 8016434:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016436:	1d11      	adds	r1, r2, #4
 8016438:	911c      	str	r1, [sp, #112]	; 0x70
 801643a:	6812      	ldr	r2, [r2, #0]
 801643c:	0412      	lsls	r2, r2, #16
 801643e:	0c12      	lsrs	r2, r2, #16
 8016440:	e72d      	b.n	801629e <_vsnprintf+0x202>
 8016442:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016444:	1d11      	adds	r1, r2, #4
 8016446:	911c      	str	r1, [sp, #112]	; 0x70
 8016448:	6812      	ldr	r2, [r2, #0]
 801644a:	e728      	b.n	801629e <_vsnprintf+0x202>
 801644c:	0801f648 	.word	0x0801f648
 8016450:	0801f694 	.word	0x0801f694
 8016454:	0801f6d8 	.word	0x0801f6d8
        if (!(flags & FLAGS_LEFT)) {
 8016458:	2302      	movs	r3, #2
 801645a:	402b      	ands	r3, r5
 801645c:	469a      	mov	sl, r3
 801645e:	d01e      	beq.n	801649e <_vsnprintf+0x402>
        unsigned int l = 1U;
 8016460:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8016462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016464:	1d1a      	adds	r2, r3, #4
 8016466:	921c      	str	r2, [sp, #112]	; 0x70
 8016468:	1c7c      	adds	r4, r7, #1
 801646a:	7818      	ldrb	r0, [r3, #0]
 801646c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801646e:	003a      	movs	r2, r7
 8016470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016472:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8016474:	4653      	mov	r3, sl
 8016476:	2b00      	cmp	r3, #0
 8016478:	d115      	bne.n	80164a6 <_vsnprintf+0x40a>
        format++;
 801647a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801647c:	3301      	adds	r3, #1
 801647e:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 8016480:	0027      	movs	r7, r4
 8016482:	e61a      	b.n	80160ba <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 8016484:	1c54      	adds	r4, r2, #1
 8016486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801648a:	2020      	movs	r0, #32
 801648c:	47b0      	blx	r6
          while (l++ < width) {
 801648e:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8016490:	0022      	movs	r2, r4
          while (l++ < width) {
 8016492:	1c5d      	adds	r5, r3, #1
 8016494:	429f      	cmp	r7, r3
 8016496:	d8f5      	bhi.n	8016484 <_vsnprintf+0x3e8>
 8016498:	46b8      	mov	r8, r7
 801649a:	0017      	movs	r7, r2
 801649c:	e7e1      	b.n	8016462 <_vsnprintf+0x3c6>
        unsigned int l = 1U;
 801649e:	2301      	movs	r3, #1
 80164a0:	003a      	movs	r2, r7
 80164a2:	4647      	mov	r7, r8
 80164a4:	e7f5      	b.n	8016492 <_vsnprintf+0x3f6>
 80164a6:	0022      	movs	r2, r4
 80164a8:	0033      	movs	r3, r6
 80164aa:	4646      	mov	r6, r8
 80164ac:	4698      	mov	r8, r3
 80164ae:	e006      	b.n	80164be <_vsnprintf+0x422>
            out(' ', buffer, idx++, maxlen);
 80164b0:	1c57      	adds	r7, r2, #1
 80164b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164b6:	2020      	movs	r0, #32
 80164b8:	47c0      	blx	r8
          while (l++ < width) {
 80164ba:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 80164bc:	003a      	movs	r2, r7
          while (l++ < width) {
 80164be:	1c6c      	adds	r4, r5, #1
 80164c0:	42ae      	cmp	r6, r5
 80164c2:	d8f5      	bhi.n	80164b0 <_vsnprintf+0x414>
 80164c4:	0014      	movs	r4, r2
 80164c6:	4646      	mov	r6, r8
 80164c8:	e7d7      	b.n	801647a <_vsnprintf+0x3de>
        const char* p = va_arg(va, char*);
 80164ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80164cc:	1d1a      	adds	r2, r3, #4
 80164ce:	921c      	str	r2, [sp, #112]	; 0x70
 80164d0:	681c      	ldr	r4, [r3, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80164d2:	465b      	mov	r3, fp
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d100      	bne.n	80164da <_vsnprintf+0x43e>
 80164d8:	3b01      	subs	r3, #1
 80164da:	0021      	movs	r1, r4
 80164dc:	e001      	b.n	80164e2 <_vsnprintf+0x446>
  for (s = str; *s && maxsize--; ++s);
 80164de:	3101      	adds	r1, #1
 80164e0:	0013      	movs	r3, r2
 80164e2:	780a      	ldrb	r2, [r1, #0]
 80164e4:	2a00      	cmp	r2, #0
 80164e6:	d002      	beq.n	80164ee <_vsnprintf+0x452>
 80164e8:	1e5a      	subs	r2, r3, #1
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d1f7      	bne.n	80164de <_vsnprintf+0x442>
  return (unsigned int)(s - str);
 80164ee:	1b0b      	subs	r3, r1, r4
 80164f0:	469a      	mov	sl, r3
        if (flags & FLAGS_PRECISION) {
 80164f2:	2380      	movs	r3, #128	; 0x80
 80164f4:	00db      	lsls	r3, r3, #3
 80164f6:	402b      	ands	r3, r5
 80164f8:	4699      	mov	r9, r3
 80164fa:	d002      	beq.n	8016502 <_vsnprintf+0x466>
          l = (l < precision ? l : precision);
 80164fc:	45da      	cmp	sl, fp
 80164fe:	d900      	bls.n	8016502 <_vsnprintf+0x466>
 8016500:	46da      	mov	sl, fp
        if (!(flags & FLAGS_LEFT)) {
 8016502:	2302      	movs	r3, #2
 8016504:	402b      	ands	r3, r5
 8016506:	9310      	str	r3, [sp, #64]	; 0x40
 8016508:	d002      	beq.n	8016510 <_vsnprintf+0x474>
 801650a:	003a      	movs	r2, r7
 801650c:	464f      	mov	r7, r9
 801650e:	e01c      	b.n	801654a <_vsnprintf+0x4ae>
 8016510:	003a      	movs	r2, r7
 8016512:	0021      	movs	r1, r4
 8016514:	4644      	mov	r4, r8
 8016516:	4653      	mov	r3, sl
 8016518:	4688      	mov	r8, r1
 801651a:	e006      	b.n	801652a <_vsnprintf+0x48e>
            out(' ', buffer, idx++, maxlen);
 801651c:	1c57      	adds	r7, r2, #1
 801651e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016522:	2020      	movs	r0, #32
 8016524:	47b0      	blx	r6
          while (l++ < width) {
 8016526:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8016528:	003a      	movs	r2, r7
          while (l++ < width) {
 801652a:	1c5d      	adds	r5, r3, #1
 801652c:	429c      	cmp	r4, r3
 801652e:	d8f5      	bhi.n	801651c <_vsnprintf+0x480>
 8016530:	4643      	mov	r3, r8
 8016532:	46a0      	mov	r8, r4
 8016534:	001c      	movs	r4, r3
 8016536:	46aa      	mov	sl, r5
 8016538:	464f      	mov	r7, r9
 801653a:	e006      	b.n	801654a <_vsnprintf+0x4ae>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801653c:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 801653e:	3401      	adds	r4, #1
 8016540:	1c55      	adds	r5, r2, #1
 8016542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016546:	47b0      	blx	r6
 8016548:	002a      	movs	r2, r5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 801654a:	7820      	ldrb	r0, [r4, #0]
 801654c:	2800      	cmp	r0, #0
 801654e:	d006      	beq.n	801655e <_vsnprintf+0x4c2>
 8016550:	2f00      	cmp	r7, #0
 8016552:	d0f4      	beq.n	801653e <_vsnprintf+0x4a2>
 8016554:	465b      	mov	r3, fp
 8016556:	3b01      	subs	r3, #1
 8016558:	4659      	mov	r1, fp
 801655a:	2900      	cmp	r1, #0
 801655c:	d1ee      	bne.n	801653c <_vsnprintf+0x4a0>
 801655e:	0017      	movs	r7, r2
        if (flags & FLAGS_LEFT) {
 8016560:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016562:	2b00      	cmp	r3, #0
 8016564:	d103      	bne.n	801656e <_vsnprintf+0x4d2>
        format++;
 8016566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016568:	3301      	adds	r3, #1
 801656a:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 801656c:	e5a5      	b.n	80160ba <_vsnprintf+0x1e>
 801656e:	4647      	mov	r7, r8
 8016570:	4653      	mov	r3, sl
 8016572:	e006      	b.n	8016582 <_vsnprintf+0x4e6>
            out(' ', buffer, idx++, maxlen);
 8016574:	1c55      	adds	r5, r2, #1
 8016576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801657a:	2020      	movs	r0, #32
 801657c:	47b0      	blx	r6
          while (l++ < width) {
 801657e:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 8016580:	002a      	movs	r2, r5
          while (l++ < width) {
 8016582:	1c5c      	adds	r4, r3, #1
 8016584:	429f      	cmp	r7, r3
 8016586:	d8f5      	bhi.n	8016574 <_vsnprintf+0x4d8>
 8016588:	0017      	movs	r7, r2
 801658a:	e7ec      	b.n	8016566 <_vsnprintf+0x4ca>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 801658c:	2321      	movs	r3, #33	; 0x21
 801658e:	432b      	orrs	r3, r5
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8016590:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016592:	1d11      	adds	r1, r2, #4
 8016594:	911c      	str	r1, [sp, #112]	; 0x70
 8016596:	6812      	ldr	r2, [r2, #0]
 8016598:	9200      	str	r2, [sp, #0]
 801659a:	9305      	str	r3, [sp, #20]
 801659c:	2308      	movs	r3, #8
 801659e:	9304      	str	r3, [sp, #16]
 80165a0:	465b      	mov	r3, fp
 80165a2:	9303      	str	r3, [sp, #12]
 80165a4:	2310      	movs	r3, #16
 80165a6:	9302      	str	r3, [sp, #8]
 80165a8:	2300      	movs	r3, #0
 80165aa:	9301      	str	r3, [sp, #4]
 80165ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165ae:	003a      	movs	r2, r7
 80165b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165b2:	0030      	movs	r0, r6
 80165b4:	f7ff fcb1 	bl	8015f1a <_ntoa_long>
 80165b8:	0007      	movs	r7, r0
        format++;
 80165ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165bc:	3301      	adds	r3, #1
 80165be:	9311      	str	r3, [sp, #68]	; 0x44
        break;
 80165c0:	e57b      	b.n	80160ba <_vsnprintf+0x1e>
        out('%', buffer, idx++, maxlen);
 80165c2:	1c7c      	adds	r4, r7, #1
 80165c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165c6:	003a      	movs	r2, r7
 80165c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165ca:	2025      	movs	r0, #37	; 0x25
 80165cc:	47b0      	blx	r6
        format++;
 80165ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165d0:	3301      	adds	r3, #1
 80165d2:	9311      	str	r3, [sp, #68]	; 0x44
        out('%', buffer, idx++, maxlen);
 80165d4:	0027      	movs	r7, r4
        break;
 80165d6:	e570      	b.n	80160ba <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 80165d8:	1c7c      	adds	r4, r7, #1
 80165da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165dc:	003a      	movs	r2, r7
 80165de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165e0:	47b0      	blx	r6
        format++;
 80165e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80165e4:	3301      	adds	r3, #1
 80165e6:	9311      	str	r3, [sp, #68]	; 0x44
        out(*format, buffer, idx++, maxlen);
 80165e8:	0027      	movs	r7, r4
        break;
 80165ea:	e566      	b.n	80160ba <_vsnprintf+0x1e>
    out = _out_null;
 80165ec:	4e09      	ldr	r6, [pc, #36]	; (8016614 <_vsnprintf+0x578>)
 80165ee:	e563      	b.n	80160b8 <_vsnprintf+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80165f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165f2:	429f      	cmp	r7, r3
 80165f4:	d30c      	bcc.n	8016610 <_vsnprintf+0x574>
 80165f6:	1e5a      	subs	r2, r3, #1
 80165f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165fc:	2000      	movs	r0, #0
 80165fe:	47b0      	blx	r6

  // return written chars without terminating \0
  return (int)idx;
}
 8016600:	0038      	movs	r0, r7
 8016602:	b013      	add	sp, #76	; 0x4c
 8016604:	bc3c      	pop	{r2, r3, r4, r5}
 8016606:	4690      	mov	r8, r2
 8016608:	4699      	mov	r9, r3
 801660a:	46a2      	mov	sl, r4
 801660c:	46ab      	mov	fp, r5
 801660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8016610:	003a      	movs	r2, r7
 8016612:	e7f1      	b.n	80165f8 <_vsnprintf+0x55c>
 8016614:	08015d49 	.word	0x08015d49

08016618 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8016618:	b500      	push	{lr}
 801661a:	b083      	sub	sp, #12
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 801661c:	9300      	str	r3, [sp, #0]
 801661e:	0013      	movs	r3, r2
 8016620:	000a      	movs	r2, r1
 8016622:	0001      	movs	r1, r0
 8016624:	4802      	ldr	r0, [pc, #8]	; (8016630 <vsnprintf_+0x18>)
 8016626:	f7ff fd39 	bl	801609c <_vsnprintf>
}
 801662a:	b003      	add	sp, #12
 801662c:	bd00      	pop	{pc}
 801662e:	46c0      	nop			; (mov r8, r8)
 8016630:	08015d41 	.word	0x08015d41

08016634 <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 8016634:	b500      	push	{lr}
 8016636:	b085      	sub	sp, #20
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8016638:	9002      	str	r0, [sp, #8]
 801663a:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 801663c:	2101      	movs	r1, #1
 801663e:	9300      	str	r3, [sp, #0]
 8016640:	0013      	movs	r3, r2
 8016642:	424a      	negs	r2, r1
 8016644:	a902      	add	r1, sp, #8
 8016646:	4802      	ldr	r0, [pc, #8]	; (8016650 <fctvprintf+0x1c>)
 8016648:	f7ff fd28 	bl	801609c <_vsnprintf>
}
 801664c:	b005      	add	sp, #20
 801664e:	bd00      	pop	{pc}
 8016650:	08015d4b 	.word	0x08015d4b

08016654 <malloc>:
 8016654:	b510      	push	{r4, lr}
 8016656:	4b03      	ldr	r3, [pc, #12]	; (8016664 <malloc+0x10>)
 8016658:	0001      	movs	r1, r0
 801665a:	6818      	ldr	r0, [r3, #0]
 801665c:	f7fd fb42 	bl	8013ce4 <_malloc_r>
 8016660:	bd10      	pop	{r4, pc}
 8016662:	46c0      	nop			; (mov r8, r8)
 8016664:	20000008 	.word	0x20000008

08016668 <free>:
 8016668:	b510      	push	{r4, lr}
 801666a:	4b03      	ldr	r3, [pc, #12]	; (8016678 <free+0x10>)
 801666c:	0001      	movs	r1, r0
 801666e:	6818      	ldr	r0, [r3, #0]
 8016670:	f7fd faee 	bl	8013c50 <_free_r>
 8016674:	bd10      	pop	{r4, pc}
 8016676:	46c0      	nop			; (mov r8, r8)
 8016678:	20000008 	.word	0x20000008

0801667c <memcpy>:
 801667c:	2300      	movs	r3, #0
 801667e:	b510      	push	{r4, lr}
 8016680:	429a      	cmp	r2, r3
 8016682:	d100      	bne.n	8016686 <memcpy+0xa>
 8016684:	bd10      	pop	{r4, pc}
 8016686:	5ccc      	ldrb	r4, [r1, r3]
 8016688:	54c4      	strb	r4, [r0, r3]
 801668a:	3301      	adds	r3, #1
 801668c:	e7f8      	b.n	8016680 <memcpy+0x4>

0801668e <memmove>:
 801668e:	b510      	push	{r4, lr}
 8016690:	4288      	cmp	r0, r1
 8016692:	d902      	bls.n	801669a <memmove+0xc>
 8016694:	188b      	adds	r3, r1, r2
 8016696:	4298      	cmp	r0, r3
 8016698:	d303      	bcc.n	80166a2 <memmove+0x14>
 801669a:	2300      	movs	r3, #0
 801669c:	e007      	b.n	80166ae <memmove+0x20>
 801669e:	5c8b      	ldrb	r3, [r1, r2]
 80166a0:	5483      	strb	r3, [r0, r2]
 80166a2:	3a01      	subs	r2, #1
 80166a4:	d2fb      	bcs.n	801669e <memmove+0x10>
 80166a6:	bd10      	pop	{r4, pc}
 80166a8:	5ccc      	ldrb	r4, [r1, r3]
 80166aa:	54c4      	strb	r4, [r0, r3]
 80166ac:	3301      	adds	r3, #1
 80166ae:	429a      	cmp	r2, r3
 80166b0:	d1fa      	bne.n	80166a8 <memmove+0x1a>
 80166b2:	e7f8      	b.n	80166a6 <memmove+0x18>

080166b4 <_init>:
 80166b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166b6:	46c0      	nop			; (mov r8, r8)
 80166b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ba:	bc08      	pop	{r3}
 80166bc:	469e      	mov	lr, r3
 80166be:	4770      	bx	lr

080166c0 <_fini>:
 80166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166c2:	46c0      	nop			; (mov r8, r8)
 80166c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166c6:	bc08      	pop	{r3}
 80166c8:	469e      	mov	lr, r3
 80166ca:	4770      	bx	lr
