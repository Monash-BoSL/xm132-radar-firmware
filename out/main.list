
out/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015438  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009058  080154f8  080154f8  000254f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e550  0801e550  0002e550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e558  0801e558  0002e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e55c  0801e55c  0002e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0801e560  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000065c  20000070  0801e5d0  00030070  2**2
                  ALLOC
  8 ._user_heap_stack 00001604  200006cc  0801e5d0  000306cc  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003259b  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000238a  00000000  00000000  00062633  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001b1a4  00000000  00000000  000649bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000001e0  00000000  00000000  0007fb61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00005eb0  00000000  00000000  0007fd41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000092a3  00000000  00000000  00085bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000d095  00000000  00000000  0008ee94  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007f  00000000  00000000  0009bf29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003488  00000000  00000000  0009bfa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000054  00000000  00000000  0009f430  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000000a9  00000000  00000000  0009f484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080154dc 	.word	0x080154dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080154dc 	.word	0x080154dc

08000104 <acc_service_maximize_signal_attenuation_set.part.8>:
 8000104:	b510      	push	{r4, lr}
 8000106:	4b03      	ldr	r3, [pc, #12]	; (8000114 <acc_service_maximize_signal_attenuation_set.part.8+0x10>)
 8000108:	4a03      	ldr	r2, [pc, #12]	; (8000118 <acc_service_maximize_signal_attenuation_set.part.8+0x14>)
 800010a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800010c:	4903      	ldr	r1, [pc, #12]	; (800011c <acc_service_maximize_signal_attenuation_set.part.8+0x18>)
 800010e:	2001      	movs	r0, #1
 8000110:	4798      	blx	r3
 8000112:	bd10      	pop	{r4, pc}
 8000114:	200002b8 	.word	0x200002b8
 8000118:	0801b8a8 	.word	0x0801b8a8
 800011c:	0801cd04 	.word	0x0801cd04

08000120 <acc_service_configuration_valid>:
 8000120:	b510      	push	{r4, lr}
 8000122:	2800      	cmp	r0, #0
 8000124:	d00a      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000126:	4b09      	ldr	r3, [pc, #36]	; (800014c <acc_service_configuration_valid+0x2c>)
 8000128:	6802      	ldr	r2, [r0, #0]
 800012a:	429a      	cmp	r2, r3
 800012c:	d106      	bne.n	800013c <acc_service_configuration_valid+0x1c>
 800012e:	8b03      	ldrh	r3, [r0, #24]
 8000130:	2b00      	cmp	r3, #0
 8000132:	d003      	beq.n	800013c <acc_service_configuration_valid+0x1c>
 8000134:	6943      	ldr	r3, [r0, #20]
 8000136:	2001      	movs	r0, #1
 8000138:	2b00      	cmp	r3, #0
 800013a:	d106      	bne.n	800014a <acc_service_configuration_valid+0x2a>
 800013c:	4b04      	ldr	r3, [pc, #16]	; (8000150 <acc_service_configuration_valid+0x30>)
 800013e:	2000      	movs	r0, #0
 8000140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000142:	4a04      	ldr	r2, [pc, #16]	; (8000154 <acc_service_configuration_valid+0x34>)
 8000144:	4904      	ldr	r1, [pc, #16]	; (8000158 <acc_service_configuration_valid+0x38>)
 8000146:	4798      	blx	r3
 8000148:	2000      	movs	r0, #0
 800014a:	bd10      	pop	{r4, pc}
 800014c:	acc09dd7 	.word	0xacc09dd7
 8000150:	200002b8 	.word	0x200002b8
 8000154:	0801b8a8 	.word	0x0801b8a8
 8000158:	0801cd04 	.word	0x0801cd04

0800015c <acc_service_configuration_check>:
 800015c:	b510      	push	{r4, lr}
 800015e:	0004      	movs	r4, r0
 8000160:	f7ff ffde 	bl	8000120 <acc_service_configuration_valid>
 8000164:	2800      	cmp	r0, #0
 8000166:	d00a      	beq.n	800017e <acc_service_configuration_check+0x22>
 8000168:	7963      	ldrb	r3, [r4, #5]
 800016a:	3b01      	subs	r3, #1
 800016c:	2b04      	cmp	r3, #4
 800016e:	d906      	bls.n	800017e <acc_service_configuration_check+0x22>
 8000170:	4b03      	ldr	r3, [pc, #12]	; (8000180 <acc_service_configuration_check+0x24>)
 8000172:	2000      	movs	r0, #0
 8000174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000176:	4a03      	ldr	r2, [pc, #12]	; (8000184 <acc_service_configuration_check+0x28>)
 8000178:	4903      	ldr	r1, [pc, #12]	; (8000188 <acc_service_configuration_check+0x2c>)
 800017a:	4798      	blx	r3
 800017c:	2000      	movs	r0, #0
 800017e:	bd10      	pop	{r4, pc}
 8000180:	200002b8 	.word	0x200002b8
 8000184:	0801b8be 	.word	0x0801b8be
 8000188:	0801cd04 	.word	0x0801cd04

0800018c <acc_service_pipeline_destroy>:
 800018c:	b510      	push	{r4, lr}
 800018e:	0004      	movs	r4, r0
 8000190:	6900      	ldr	r0, [r0, #16]
 8000192:	2800      	cmp	r0, #0
 8000194:	d003      	beq.n	800019e <acc_service_pipeline_destroy+0x12>
 8000196:	68c3      	ldr	r3, [r0, #12]
 8000198:	4798      	blx	r3
 800019a:	2300      	movs	r3, #0
 800019c:	6123      	str	r3, [r4, #16]
 800019e:	bd10      	pop	{r4, pc}

080001a0 <acc_service_get_base_configuration>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	1e04      	subs	r4, r0, #0
 80001a4:	d001      	beq.n	80001aa <acc_service_get_base_configuration+0xa>
 80001a6:	6900      	ldr	r0, [r0, #16]
 80001a8:	bd10      	pop	{r4, pc}
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <acc_service_get_base_configuration+0x24>)
 80001ac:	001a      	movs	r2, r3
 80001ae:	3230      	adds	r2, #48	; 0x30
 80001b0:	7812      	ldrb	r2, [r2, #0]
 80001b2:	1e10      	subs	r0, r2, #0
 80001b4:	d0f8      	beq.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001b6:	2001      	movs	r0, #1
 80001b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <acc_service_get_base_configuration+0x28>)
 80001bc:	4903      	ldr	r1, [pc, #12]	; (80001cc <acc_service_get_base_configuration+0x2c>)
 80001be:	4798      	blx	r3
 80001c0:	0020      	movs	r0, r4
 80001c2:	e7f1      	b.n	80001a8 <acc_service_get_base_configuration+0x8>
 80001c4:	200002b8 	.word	0x200002b8
 80001c8:	0801b8a8 	.word	0x0801b8a8
 80001cc:	0801cd04 	.word	0x0801cd04

080001d0 <get_sparse_configuration>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	1e04      	subs	r4, r0, #0
 80001d4:	d004      	beq.n	80001e0 <get_sparse_configuration+0x10>
 80001d6:	7903      	ldrb	r3, [r0, #4]
 80001d8:	2b03      	cmp	r3, #3
 80001da:	d10d      	bne.n	80001f8 <get_sparse_configuration+0x28>
 80001dc:	0020      	movs	r0, r4
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <get_sparse_configuration+0x2c>)
 80001e2:	001a      	movs	r2, r3
 80001e4:	3230      	adds	r2, #48	; 0x30
 80001e6:	7812      	ldrb	r2, [r2, #0]
 80001e8:	2a00      	cmp	r2, #0
 80001ea:	d0f7      	beq.n	80001dc <get_sparse_configuration+0xc>
 80001ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001ee:	4a04      	ldr	r2, [pc, #16]	; (8000200 <get_sparse_configuration+0x30>)
 80001f0:	4904      	ldr	r1, [pc, #16]	; (8000204 <get_sparse_configuration+0x34>)
 80001f2:	2001      	movs	r0, #1
 80001f4:	4798      	blx	r3
 80001f6:	e7f1      	b.n	80001dc <get_sparse_configuration+0xc>
 80001f8:	2400      	movs	r4, #0
 80001fa:	e7ef      	b.n	80001dc <get_sparse_configuration+0xc>
 80001fc:	200002b8 	.word	0x200002b8
 8000200:	0801b8a8 	.word	0x0801b8a8
 8000204:	0801b8d6 	.word	0x0801b8d6

08000208 <acc_service_sparse_get_metadata>:
 8000208:	b510      	push	{r4, lr}
 800020a:	000c      	movs	r4, r1
 800020c:	2800      	cmp	r0, #0
 800020e:	d015      	beq.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000210:	7a03      	ldrb	r3, [r0, #8]
 8000212:	2b03      	cmp	r3, #3
 8000214:	d112      	bne.n	800023c <acc_service_sparse_get_metadata+0x34>
 8000216:	6903      	ldr	r3, [r0, #16]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	699a      	ldr	r2, [r3, #24]
 800021c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800021e:	600a      	str	r2, [r1, #0]
 8000220:	69da      	ldr	r2, [r3, #28]
 8000222:	604a      	str	r2, [r1, #4]
 8000224:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8000226:	810a      	strh	r2, [r1, #8]
 8000228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800022a:	60ca      	str	r2, [r1, #12]
 800022c:	4904      	ldr	r1, [pc, #16]	; (8000240 <acc_service_sparse_get_metadata+0x38>)
 800022e:	f00e f94f 	bl	800e4d0 <__aeabi_fmul>
 8000232:	21fc      	movs	r1, #252	; 0xfc
 8000234:	0589      	lsls	r1, r1, #22
 8000236:	f00e f94b 	bl	800e4d0 <__aeabi_fmul>
 800023a:	6120      	str	r0, [r4, #16]
 800023c:	bd10      	pop	{r4, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	4d8ef3c2 	.word	0x4d8ef3c2

08000244 <get_and_validate_envelope_configuration>:
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
 8000248:	f7ff ff6a 	bl	8000120 <acc_service_configuration_valid>
 800024c:	2800      	cmp	r0, #0
 800024e:	d002      	beq.n	8000256 <get_and_validate_envelope_configuration+0x12>
 8000250:	7923      	ldrb	r3, [r4, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00b      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <get_and_validate_envelope_configuration+0x30>)
 8000258:	001a      	movs	r2, r3
 800025a:	3230      	adds	r2, #48	; 0x30
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	1e14      	subs	r4, r2, #0
 8000260:	d005      	beq.n	800026e <get_and_validate_envelope_configuration+0x2a>
 8000262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <get_and_validate_envelope_configuration+0x34>)
 8000266:	4905      	ldr	r1, [pc, #20]	; (800027c <get_and_validate_envelope_configuration+0x38>)
 8000268:	2001      	movs	r0, #1
 800026a:	4798      	blx	r3
 800026c:	2400      	movs	r4, #0
 800026e:	0020      	movs	r0, r4
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	200002b8 	.word	0x200002b8
 8000278:	0801b8a8 	.word	0x0801b8a8
 800027c:	0801b8e5 	.word	0x0801b8e5

08000280 <RegInt_getreg>:
//ADDITIONAL COMMANDS
//0x03 05 :: perform measurment
//0x03 06 :: evaluate data
//0xFA E9 :: dump 256 bytes of data from buffer with given offset
uint32_t* RegInt_regmap(uint8_t reg){
	REGADRERR = -1;
 8000280:	2201      	movs	r2, #1
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <RegInt_getreg+0x58>)
 8000284:	4252      	negs	r2, r2
 8000286:	601a      	str	r2, [r3, #0]
	uint32_t* ptr = &REGADRERR;
	
	if (reg <= 0x12){
 8000288:	2812      	cmp	r0, #18
 800028a:	d820      	bhi.n	80002ce <RegInt_getreg+0x4e>
		ptr = &GENERAL_REGISTERS[reg];
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <RegInt_getreg+0x5c>)
 800028e:	0083      	lsls	r3, r0, #2
 8000290:	189b      	adds	r3, r3, r2
	}
	if (reg == 0xE9){
		ptr = &OUTPUT_BUFFER_LENGTH;
	}
	if (0x20 <= reg && reg <= 0x42){
 8000292:	0002      	movs	r2, r0
 8000294:	3a20      	subs	r2, #32
 8000296:	b2d1      	uxtb	r1, r2
 8000298:	2922      	cmp	r1, #34	; 0x22
 800029a:	d802      	bhi.n	80002a2 <RegInt_getreg+0x22>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <RegInt_getreg+0x60>)
 800029e:	0092      	lsls	r2, r2, #2
 80002a0:	18d3      	adds	r3, r2, r3
	}
	if (0x81 <= reg && reg <= 0x85){
 80002a2:	0002      	movs	r2, r0
 80002a4:	327f      	adds	r2, #127	; 0x7f
 80002a6:	b2d2      	uxtb	r2, r2
 80002a8:	2a04      	cmp	r2, #4
 80002aa:	d804      	bhi.n	80002b6 <RegInt_getreg+0x36>
		ptr = &META_REGISTERS[reg - 0x81];
 80002ac:	0003      	movs	r3, r0
 80002ae:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <RegInt_getreg+0x64>)
 80002b0:	3b81      	subs	r3, #129	; 0x81
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	189b      	adds	r3, r3, r2
	}	
	if (0xD0 <= reg && reg <= 0xD9){
 80002b6:	0002      	movs	r2, r0
 80002b8:	3230      	adds	r2, #48	; 0x30
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	2a09      	cmp	r2, #9
 80002be:	d804      	bhi.n	80002ca <RegInt_getreg+0x4a>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 80002c0:	0003      	movs	r3, r0
 80002c2:	4809      	ldr	r0, [pc, #36]	; (80002e8 <RegInt_getreg+0x68>)
 80002c4:	3bd0      	subs	r3, #208	; 0xd0
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	181b      	adds	r3, r3, r0
	return ptr;
}

uint32_t RegInt_getreg(uint8_t reg){
	uint32_t* regptr = RegInt_regmap(reg);
	return *regptr;
 80002ca:	6818      	ldr	r0, [r3, #0]
}
 80002cc:	4770      	bx	lr
	if (reg == 0xE9){
 80002ce:	28e9      	cmp	r0, #233	; 0xe9
 80002d0:	d1df      	bne.n	8000292 <RegInt_getreg+0x12>
		ptr = &OUTPUT_BUFFER_LENGTH;
 80002d2:	4b06      	ldr	r3, [pc, #24]	; (80002ec <RegInt_getreg+0x6c>)
 80002d4:	e7ef      	b.n	80002b6 <RegInt_getreg+0x36>
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	200003b0 	.word	0x200003b0
 80002dc:	200003b4 	.word	0x200003b4
 80002e0:	20000514 	.word	0x20000514
 80002e4:	20000500 	.word	0x20000500
 80002e8:	200004c0 	.word	0x200004c0
 80002ec:	200005a0 	.word	0x200005a0

080002f0 <Reg_store_sparse_metadata>:
		sleepMCU(val);
	}
}


void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 80002f0:	b084      	sub	sp, #16
 80002f2:	b510      	push	{r4, lr}
 80002f4:	9204      	str	r2, [sp, #16]
	REGADRERR = -1;
 80002f6:	2201      	movs	r2, #1
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 80002f8:	9305      	str	r3, [sp, #20]
	if (!(*regptr == (uint32_t)-1)){
 80002fa:	4c1e      	ldr	r4, [pc, #120]	; (8000374 <Reg_store_sparse_metadata+0x84>)
	REGADRERR = -1;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <Reg_store_sparse_metadata+0x88>)
 80002fe:	4252      	negs	r2, r2
 8000300:	601a      	str	r2, [r3, #0]
	if (!(*regptr == (uint32_t)-1)){
 8000302:	6823      	ldr	r3, [r4, #0]
void Reg_store_sparse_metadata(acc_service_sparse_metadata_t metadata, acc_service_sparse_metadata_t* metadata_far_ptr){
 8000304:	9002      	str	r0, [sp, #8]
 8000306:	9103      	str	r1, [sp, #12]

	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8000308:	9802      	ldr	r0, [sp, #8]
	if (!(*regptr == (uint32_t)-1)){
 800030a:	3301      	adds	r3, #1
 800030c:	d005      	beq.n	800031a <Reg_store_sparse_metadata+0x2a>
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 800030e:	491b      	ldr	r1, [pc, #108]	; (800037c <Reg_store_sparse_metadata+0x8c>)
 8000310:	f00e f8de 	bl	800e4d0 <__aeabi_fmul>
 8000314:	f00e fe1c 	bl	800ef50 <__aeabi_f2uiz>
 8000318:	6020      	str	r0, [r4, #0]
	if (!(*regptr == (uint32_t)-1)){
 800031a:	6863      	ldr	r3, [r4, #4]
 800031c:	3301      	adds	r3, #1
 800031e:	d006      	beq.n	800032e <Reg_store_sparse_metadata+0x3e>
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 8000320:	4916      	ldr	r1, [pc, #88]	; (800037c <Reg_store_sparse_metadata+0x8c>)
 8000322:	9803      	ldr	r0, [sp, #12]
 8000324:	f00e f8d4 	bl	800e4d0 <__aeabi_fmul>
 8000328:	f00e fe12 	bl	800ef50 <__aeabi_f2uiz>
 800032c:	6060      	str	r0, [r4, #4]
	uint32_t bufflen = metadata.data_length;
	if(metadata_far_ptr != NULL){
 800032e:	9a07      	ldr	r2, [sp, #28]
	uint32_t bufflen = metadata.data_length;
 8000330:	ab02      	add	r3, sp, #8
 8000332:	891b      	ldrh	r3, [r3, #8]
	if(metadata_far_ptr != NULL){
 8000334:	2a00      	cmp	r2, #0
 8000336:	d001      	beq.n	800033c <Reg_store_sparse_metadata+0x4c>
		bufflen += (*metadata_far_ptr).data_length;
 8000338:	8912      	ldrh	r2, [r2, #8]
 800033a:	189b      	adds	r3, r3, r2
	if (!(*regptr == (uint32_t)-1)){
 800033c:	68a2      	ldr	r2, [r4, #8]
 800033e:	3201      	adds	r2, #1
 8000340:	d000      	beq.n	8000344 <Reg_store_sparse_metadata+0x54>
		*regptr = val;
 8000342:	60a3      	str	r3, [r4, #8]
	if (!(*regptr == (uint32_t)-1)){
 8000344:	68e3      	ldr	r3, [r4, #12]
 8000346:	3301      	adds	r3, #1
 8000348:	d006      	beq.n	8000358 <Reg_store_sparse_metadata+0x68>
	}
	RegInt_setregf(0x83, bufflen ,1);
	RegInt_setregf(0x84, (uint32_t)(metadata.sweep_rate * 1000.0f),1);
 800034a:	490c      	ldr	r1, [pc, #48]	; (800037c <Reg_store_sparse_metadata+0x8c>)
 800034c:	9805      	ldr	r0, [sp, #20]
 800034e:	f00e f8bf 	bl	800e4d0 <__aeabi_fmul>
 8000352:	f00e fdfd 	bl	800ef50 <__aeabi_f2uiz>
 8000356:	60e0      	str	r0, [r4, #12]
	if (!(*regptr == (uint32_t)-1)){
 8000358:	6923      	ldr	r3, [r4, #16]
 800035a:	3301      	adds	r3, #1
 800035c:	d006      	beq.n	800036c <Reg_store_sparse_metadata+0x7c>
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 800035e:	4908      	ldr	r1, [pc, #32]	; (8000380 <Reg_store_sparse_metadata+0x90>)
 8000360:	9806      	ldr	r0, [sp, #24]
 8000362:	f00e f8b5 	bl	800e4d0 <__aeabi_fmul>
 8000366:	f00e fdf3 	bl	800ef50 <__aeabi_f2uiz>
 800036a:	6120      	str	r0, [r4, #16]
}
 800036c:	bc10      	pop	{r4}
 800036e:	bc08      	pop	{r3}
 8000370:	b004      	add	sp, #16
 8000372:	4718      	bx	r3
 8000374:	20000500 	.word	0x20000500
 8000378:	200003b0 	.word	0x200003b0
 800037c:	447a0000 	.word	0x447a0000
 8000380:	49742400 	.word	0x49742400

08000384 <acc_integration_get_time>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000384:	4b01      	ldr	r3, [pc, #4]	; (800038c <acc_integration_get_time+0x8>)
 8000386:	6818      	ldr	r0, [r3, #0]


uint32_t acc_integration_get_time(void)
{
	return HAL_GetTick();
}
 8000388:	4770      	bx	lr
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	200002b4 	.word	0x200002b4

08000390 <pulse_hibernate_pin>:
}


static void pulse_hibernate_pin(uint32_t nbr_pulses)
{
	for (uint32_t i = 0; i < nbr_pulses; i++)
 8000390:	2100      	movs	r1, #0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000392:	2210      	movs	r2, #16
{
 8000394:	b510      	push	{r4, lr}
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <pulse_hibernate_pin+0x24>)
 8000398:	691c      	ldr	r4, [r3, #16]
 800039a:	4214      	tst	r4, r2
 800039c:	d102      	bne.n	80003a4 <pulse_hibernate_pin+0x14>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800039e:	619a      	str	r2, [r3, #24]
 80003a0:	e7fa      	b.n	8000398 <pulse_hibernate_pin+0x8>
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80003a2:	629a      	str	r2, [r3, #40]	; 0x28
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80003a4:	691c      	ldr	r4, [r3, #16]
 80003a6:	4214      	tst	r4, r2
 80003a8:	d1fb      	bne.n	80003a2 <pulse_hibernate_pin+0x12>
	for (uint32_t i = 0; i < nbr_pulses; i++)
 80003aa:	3101      	adds	r1, #1
 80003ac:	4288      	cmp	r0, r1
 80003ae:	d1f3      	bne.n	8000398 <pulse_hibernate_pin+0x8>
		while (HAL_GPIO_ReadPin(A111_CTRL_GPIO_Port, A111_CTRL_Pin) != GPIO_PIN_RESET)
		{
			HAL_GPIO_WritePin(A111_CTRL_GPIO_Port, A111_CTRL_Pin, GPIO_PIN_RESET);
		}
	}
}
 80003b0:	bd10      	pop	{r4, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	50000400 	.word	0x50000400

080003b8 <acc_hal_integration_sensor_hibernate_enter>:


static void acc_hal_integration_sensor_hibernate_enter(acc_sensor_id_t sensor_id)
{
 80003b8:	b510      	push	{r4, lr}
	(void)sensor_id;  // Ignore parameter sensor_id

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_HIBERNATE_ENTER);
 80003ba:	200a      	movs	r0, #10
 80003bc:	f7ff ffe8 	bl	8000390 <pulse_hibernate_pin>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	4b02      	ldr	r3, [pc, #8]	; (80003cc <acc_hal_integration_sensor_hibernate_enter+0x14>)
 80003c4:	0092      	lsls	r2, r2, #2
 80003c6:	629a      	str	r2, [r3, #40]	; 0x28

	// Turn off sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_RESET);
}
 80003c8:	bd10      	pop	{r4, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	50000400 	.word	0x50000400

080003d0 <acc_hal_integration_get_reference_frequency>:
}
 80003d0:	4800      	ldr	r0, [pc, #0]	; (80003d4 <acc_hal_integration_get_reference_frequency+0x4>)
 80003d2:	4770      	bx	lr
 80003d4:	4bb71b00 	.word	0x4bb71b00

080003d8 <acc_hal_integration_wait_for_sensor_interrupt>:
  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80003d8:	4a0c      	ldr	r2, [pc, #48]	; (800040c <acc_hal_integration_wait_for_sensor_interrupt+0x34>)
{
 80003da:	b570      	push	{r4, r5, r6, lr}
 80003dc:	2408      	movs	r4, #8
 80003de:	0015      	movs	r5, r2
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <acc_hal_integration_wait_for_sensor_interrupt+0x38>)
 80003e2:	6806      	ldr	r6, [r0, #0]
 80003e4:	6913      	ldr	r3, [r2, #16]
 80003e6:	4223      	tst	r3, r4
 80003e8:	d103      	bne.n	80003f2 <acc_hal_integration_wait_for_sensor_interrupt+0x1a>
 80003ea:	6803      	ldr	r3, [r0, #0]
	       (HAL_GetTick() - wait_begin_ms < timeout_ms))
 80003ec:	1b9b      	subs	r3, r3, r6
	while ((HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) != GPIO_PIN_SET) &&
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d303      	bcc.n	80003fa <acc_hal_integration_wait_for_sensor_interrupt+0x22>
 80003f2:	6928      	ldr	r0, [r5, #16]
 80003f4:	0700      	lsls	r0, r0, #28
	return HAL_GPIO_ReadPin(A111_SENSOR_INTERRUPT_GPIO_Port, A111_SENSOR_INTERRUPT_Pin) == GPIO_PIN_SET;
 80003f6:	0fc0      	lsrs	r0, r0, #31
}
 80003f8:	bd70      	pop	{r4, r5, r6, pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fa:	b672      	cpsid	i
 80003fc:	6913      	ldr	r3, [r2, #16]
 80003fe:	4223      	tst	r3, r4
 8000400:	d100      	bne.n	8000404 <acc_hal_integration_wait_for_sensor_interrupt+0x2c>
			__WFI();
 8000402:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 8000404:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000406:	f3bf 8f6f 	isb	sy
 800040a:	e7eb      	b.n	80003e4 <acc_hal_integration_wait_for_sensor_interrupt+0xc>
 800040c:	50000400 	.word	0x50000400
 8000410:	200002b4 	.word	0x200002b4

08000414 <acc_base_configuration_downsampling_factor_set>:
 8000414:	b570      	push	{r4, r5, r6, lr}
 8000416:	0004      	movs	r4, r0
 8000418:	000d      	movs	r5, r1
 800041a:	f006 f8a9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800041e:	2800      	cmp	r0, #0
 8000420:	d001      	beq.n	8000426 <acc_base_configuration_downsampling_factor_set+0x12>
 8000422:	3468      	adds	r4, #104	; 0x68
 8000424:	8025      	strh	r5, [r4, #0]
 8000426:	bd70      	pop	{r4, r5, r6, pc}

08000428 <acc_base_configuration_integrator_ramp_up_set>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	0004      	movs	r4, r0
 800042c:	000d      	movs	r5, r1
 800042e:	f006 f89f 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000432:	2800      	cmp	r0, #0
 8000434:	d001      	beq.n	800043a <acc_base_configuration_integrator_ramp_up_set+0x12>
 8000436:	3406      	adds	r4, #6
 8000438:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <acc_base_configuration_wg_duration_set>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	000d      	movs	r5, r1
 8000442:	f006 f895 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000446:	2800      	cmp	r0, #0
 8000448:	d001      	beq.n	800044e <acc_base_configuration_wg_duration_set+0x12>
 800044a:	3404      	adds	r4, #4
 800044c:	87e5      	strh	r5, [r4, #62]	; 0x3e
 800044e:	bd70      	pop	{r4, r5, r6, pc}

08000450 <acc_base_configuration_integrator_set>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	0004      	movs	r4, r0
 8000454:	000d      	movs	r5, r1
 8000456:	f006 f88b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800045a:	2800      	cmp	r0, #0
 800045c:	d001      	beq.n	8000462 <acc_base_configuration_integrator_set+0x12>
 800045e:	3402      	adds	r4, #2
 8000460:	87e5      	strh	r5, [r4, #62]	; 0x3e
 8000462:	bd70      	pop	{r4, r5, r6, pc}

08000464 <set_configuration_for_profile.lto_priv.627>:
 8000464:	b570      	push	{r4, r5, r6, lr}
 8000466:	000d      	movs	r5, r1
 8000468:	f7ff feb2 	bl	80001d0 <get_sparse_configuration>
 800046c:	2800      	cmp	r0, #0
 800046e:	d011      	beq.n	8000494 <set_configuration_for_profile.lto_priv.627+0x30>
 8000470:	301c      	adds	r0, #28
 8000472:	0004      	movs	r4, r0
 8000474:	1e68      	subs	r0, r5, #1
 8000476:	2804      	cmp	r0, #4
 8000478:	d80c      	bhi.n	8000494 <set_configuration_for_profile.lto_priv.627+0x30>
 800047a:	f00e fb47 	bl	800eb0c <__gnu_thumb1_case_uqi>
 800047e:	0c03      	.short	0x0c03
 8000480:	170e      	.short	0x170e
 8000482:	20          	.byte	0x20
 8000483:	00          	.byte	0x00
 8000484:	2100      	movs	r1, #0
 8000486:	0020      	movs	r0, r4
 8000488:	f7ff ffd8 	bl	800043c <acc_base_configuration_wg_duration_set>
 800048c:	2100      	movs	r1, #0
 800048e:	0020      	movs	r0, r4
 8000490:	f7ff ffde 	bl	8000450 <acc_base_configuration_integrator_set>
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	2107      	movs	r1, #7
 8000498:	e7f5      	b.n	8000486 <set_configuration_for_profile.lto_priv.627+0x22>
 800049a:	0020      	movs	r0, r4
 800049c:	2109      	movs	r1, #9
 800049e:	f7ff ffcd 	bl	800043c <acc_base_configuration_wg_duration_set>
 80004a2:	2103      	movs	r1, #3
 80004a4:	0020      	movs	r0, r4
 80004a6:	f7ff ffd3 	bl	8000450 <acc_base_configuration_integrator_set>
 80004aa:	e7f3      	b.n	8000494 <set_configuration_for_profile.lto_priv.627+0x30>
 80004ac:	210c      	movs	r1, #12
 80004ae:	0020      	movs	r0, r4
 80004b0:	f7ff ffc4 	bl	800043c <acc_base_configuration_wg_duration_set>
 80004b4:	2106      	movs	r1, #6
 80004b6:	0020      	movs	r0, r4
 80004b8:	f7ff ffca 	bl	8000450 <acc_base_configuration_integrator_set>
 80004bc:	e7ea      	b.n	8000494 <set_configuration_for_profile.lto_priv.627+0x30>
 80004be:	2110      	movs	r1, #16
 80004c0:	e7f5      	b.n	80004ae <set_configuration_for_profile.lto_priv.627+0x4a>

080004c2 <set_configuration_for_profile.lto_priv.626>:
 80004c2:	b570      	push	{r4, r5, r6, lr}
 80004c4:	000e      	movs	r6, r1
 80004c6:	f7ff febd 	bl	8000244 <get_and_validate_envelope_configuration>
 80004ca:	1e05      	subs	r5, r0, #0
 80004cc:	d018      	beq.n	8000500 <set_configuration_for_profile.lto_priv.626+0x3e>
 80004ce:	0004      	movs	r4, r0
 80004d0:	1e70      	subs	r0, r6, #1
 80004d2:	341c      	adds	r4, #28
 80004d4:	2804      	cmp	r0, #4
 80004d6:	d813      	bhi.n	8000500 <set_configuration_for_profile.lto_priv.626+0x3e>
 80004d8:	358c      	adds	r5, #140	; 0x8c
 80004da:	f00e fb17 	bl	800eb0c <__gnu_thumb1_case_uqi>
 80004de:	1203      	.short	0x1203
 80004e0:	2321      	.short	0x2321
 80004e2:	32          	.byte	0x32
 80004e3:	00          	.byte	0x00
 80004e4:	2100      	movs	r1, #0
 80004e6:	0020      	movs	r0, r4
 80004e8:	f7ff ffa8 	bl	800043c <acc_base_configuration_wg_duration_set>
 80004ec:	2100      	movs	r1, #0
 80004ee:	0020      	movs	r0, r4
 80004f0:	f7ff ffae 	bl	8000450 <acc_base_configuration_integrator_set>
 80004f4:	2103      	movs	r1, #3
 80004f6:	0020      	movs	r0, r4
 80004f8:	f7ff ff96 	bl	8000428 <acc_base_configuration_integrator_ramp_up_set>
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <set_configuration_for_profile.lto_priv.626+0x86>)
 80004fe:	602b      	str	r3, [r5, #0]
 8000500:	bd70      	pop	{r4, r5, r6, pc}
 8000502:	2107      	movs	r1, #7
 8000504:	0020      	movs	r0, r4
 8000506:	f7ff ff99 	bl	800043c <acc_base_configuration_wg_duration_set>
 800050a:	2106      	movs	r1, #6
 800050c:	0020      	movs	r0, r4
 800050e:	f7ff ff9f 	bl	8000450 <acc_base_configuration_integrator_set>
 8000512:	2109      	movs	r1, #9
 8000514:	0020      	movs	r0, r4
 8000516:	f7ff ff87 	bl	8000428 <acc_base_configuration_integrator_ramp_up_set>
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <set_configuration_for_profile.lto_priv.626+0x8a>)
 800051c:	602b      	str	r3, [r5, #0]
 800051e:	e7ef      	b.n	8000500 <set_configuration_for_profile.lto_priv.626+0x3e>
 8000520:	2109      	movs	r1, #9
 8000522:	e7ef      	b.n	8000504 <set_configuration_for_profile.lto_priv.626+0x42>
 8000524:	210c      	movs	r1, #12
 8000526:	0020      	movs	r0, r4
 8000528:	f7ff ff88 	bl	800043c <acc_base_configuration_wg_duration_set>
 800052c:	2106      	movs	r1, #6
 800052e:	0020      	movs	r0, r4
 8000530:	f7ff ff8e 	bl	8000450 <acc_base_configuration_integrator_set>
 8000534:	2101      	movs	r1, #1
 8000536:	0020      	movs	r0, r4
 8000538:	f7ff ff76 	bl	8000428 <acc_base_configuration_integrator_ramp_up_set>
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <set_configuration_for_profile.lto_priv.626+0x8a>)
 800053e:	602b      	str	r3, [r5, #0]
 8000540:	e7de      	b.n	8000500 <set_configuration_for_profile.lto_priv.626+0x3e>
 8000542:	2110      	movs	r1, #16
 8000544:	e7ef      	b.n	8000526 <set_configuration_for_profile.lto_priv.626+0x64>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	3c8461fa 	.word	0x3c8461fa
 800054c:	3b843809 	.word	0x3b843809

08000550 <acc_base_configuration_repetition_mode_on_demand_set>:
 8000550:	b510      	push	{r4, lr}
 8000552:	0004      	movs	r4, r0
 8000554:	f006 f80c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000558:	2800      	cmp	r0, #0
 800055a:	d001      	beq.n	8000560 <acc_base_configuration_repetition_mode_on_demand_set+0x10>
 800055c:	2301      	movs	r3, #1
 800055e:	7123      	strb	r3, [r4, #4]
 8000560:	bd10      	pop	{r4, pc}

08000562 <set_maximize_signal_attenuation>:
 8000562:	b570      	push	{r4, r5, r6, lr}
 8000564:	0005      	movs	r5, r0
 8000566:	000e      	movs	r6, r1
 8000568:	f7ff fe1a 	bl	80001a0 <acc_service_get_base_configuration>
 800056c:	1e04      	subs	r4, r0, #0
 800056e:	d010      	beq.n	8000592 <set_maximize_signal_attenuation+0x30>
 8000570:	f005 fffe 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000574:	2800      	cmp	r0, #0
 8000576:	d002      	beq.n	800057e <set_maximize_signal_attenuation+0x1c>
 8000578:	0023      	movs	r3, r4
 800057a:	334a      	adds	r3, #74	; 0x4a
 800057c:	701e      	strb	r6, [r3, #0]
 800057e:	2e00      	cmp	r6, #0
 8000580:	d008      	beq.n	8000594 <set_maximize_signal_attenuation+0x32>
 8000582:	210f      	movs	r1, #15
 8000584:	0020      	movs	r0, r4
 8000586:	f7ff ff63 	bl	8000450 <acc_base_configuration_integrator_set>
 800058a:	2101      	movs	r1, #1
 800058c:	0020      	movs	r0, r4
 800058e:	f7ff ff4b 	bl	8000428 <acc_base_configuration_integrator_ramp_up_set>
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	68ab      	ldr	r3, [r5, #8]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0fb      	beq.n	8000592 <set_maximize_signal_attenuation+0x30>
 800059a:	7969      	ldrb	r1, [r5, #5]
 800059c:	0028      	movs	r0, r5
 800059e:	4798      	blx	r3
 80005a0:	e7f7      	b.n	8000592 <set_maximize_signal_attenuation+0x30>

080005a2 <acc_service_maximize_signal_attenuation_set>:
 80005a2:	b510      	push	{r4, lr}
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d003      	beq.n	80005b0 <acc_service_maximize_signal_attenuation_set+0xe>
 80005a8:	7301      	strb	r1, [r0, #12]
 80005aa:	f7ff ffda 	bl	8000562 <set_maximize_signal_attenuation>
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <acc_service_maximize_signal_attenuation_set+0x1e>)
 80005b2:	3330      	adds	r3, #48	; 0x30
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <acc_service_maximize_signal_attenuation_set+0xc>
 80005ba:	f7ff fda3 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 80005be:	e7f6      	b.n	80005ae <acc_service_maximize_signal_attenuation_set+0xc>
 80005c0:	200002b8 	.word	0x200002b8

080005c4 <acc_service_profile_set>:
 80005c4:	b510      	push	{r4, lr}
 80005c6:	1e04      	subs	r4, r0, #0
 80005c8:	d00c      	beq.n	80005e4 <acc_service_profile_set+0x20>
 80005ca:	6883      	ldr	r3, [r0, #8]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <acc_service_profile_set+0x20>
 80005d0:	7141      	strb	r1, [r0, #5]
 80005d2:	4798      	blx	r3
 80005d4:	7b23      	ldrb	r3, [r4, #12]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <acc_service_profile_set+0x1e>
 80005da:	2101      	movs	r1, #1
 80005dc:	0020      	movs	r0, r4
 80005de:	f7ff ffc0 	bl	8000562 <set_maximize_signal_attenuation>
 80005e2:	bd10      	pop	{r4, pc}
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <acc_service_profile_set+0x30>)
 80005e6:	3330      	adds	r3, #48	; 0x30
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f9      	beq.n	80005e2 <acc_service_profile_set+0x1e>
 80005ee:	f7ff fd89 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 80005f2:	e7f6      	b.n	80005e2 <acc_service_profile_set+0x1e>
 80005f4:	200002b8 	.word	0x200002b8

080005f8 <acc_service_receiver_gain_set>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	1c0d      	adds	r5, r1, #0
 80005fc:	f7ff fdd0 	bl	80001a0 <acc_service_get_base_configuration>
 8000600:	0004      	movs	r4, r0
 8000602:	f005 ffb5 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000606:	2800      	cmp	r0, #0
 8000608:	d00e      	beq.n	8000628 <acc_service_receiver_gain_set+0x30>
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <acc_service_receiver_gain_set+0x34>)
 800060c:	1c28      	adds	r0, r5, #0
 800060e:	f00d ff5f 	bl	800e4d0 <__aeabi_fmul>
 8000612:	1c01      	adds	r1, r0, #0
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <acc_service_receiver_gain_set+0x34>)
 8000616:	f00e f88d 	bl	800e734 <__aeabi_fsub>
 800061a:	21fc      	movs	r1, #252	; 0xfc
 800061c:	0589      	lsls	r1, r1, #22
 800061e:	f00d fcab 	bl	800df78 <__aeabi_fadd>
 8000622:	f00e fe69 	bl	800f2f8 <__aeabi_f2iz>
 8000626:	87e0      	strh	r0, [r4, #62]	; 0x3e
 8000628:	bd70      	pop	{r4, r5, r6, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	41b00000 	.word	0x41b00000

08000630 <acc_service_send_data>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	9d04      	ldr	r5, [sp, #16]
 8000634:	001e      	movs	r6, r3
 8000636:	782b      	ldrb	r3, [r5, #0]
 8000638:	6944      	ldr	r4, [r0, #20]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10a      	bne.n	8000654 <acc_service_send_data+0x24>
 800063e:	7ea3      	ldrb	r3, [r4, #26]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d011      	beq.n	8000668 <acc_service_send_data+0x38>
 8000644:	68e3      	ldr	r3, [r4, #12]
 8000646:	6860      	ldr	r0, [r4, #4]
 8000648:	4293      	cmp	r3, r2
 800064a:	d900      	bls.n	800064e <acc_service_send_data+0x1e>
 800064c:	0013      	movs	r3, r2
 800064e:	001a      	movs	r2, r3
 8000650:	f014 ff28 	bl	80154a4 <memcpy>
 8000654:	782b      	ldrb	r3, [r5, #0]
 8000656:	6920      	ldr	r0, [r4, #16]
 8000658:	7663      	strb	r3, [r4, #25]
 800065a:	2800      	cmp	r0, #0
 800065c:	d003      	beq.n	8000666 <acc_service_send_data+0x36>
 800065e:	6962      	ldr	r2, [r4, #20]
 8000660:	0031      	movs	r1, r6
 8000662:	f014 ff1f 	bl	80154a4 <memcpy>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	68a3      	ldr	r3, [r4, #8]
 800066a:	6019      	str	r1, [r3, #0]
 800066c:	e7f2      	b.n	8000654 <acc_service_send_data+0x24>

0800066e <sparse_send_data>:
 800066e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000670:	0005      	movs	r5, r0
 8000672:	0010      	movs	r0, r2
 8000674:	798a      	ldrb	r2, [r1, #6]
 8000676:	790e      	ldrb	r6, [r1, #4]
 8000678:	794c      	ldrb	r4, [r1, #5]
 800067a:	ab03      	add	r3, sp, #12
 800067c:	709a      	strb	r2, [r3, #2]
 800067e:	aa02      	add	r2, sp, #8
 8000680:	705e      	strb	r6, [r3, #1]
 8000682:	7014      	strb	r4, [r2, #0]
 8000684:	701c      	strb	r4, [r3, #0]
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	694a      	ldr	r2, [r1, #20]
 800068a:	0029      	movs	r1, r5
 800068c:	f7ff ffd0 	bl	8000630 <acc_service_send_data>
 8000690:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

08000692 <envelope_send_data>:
 8000692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000694:	0005      	movs	r5, r0
 8000696:	b085      	sub	sp, #20
 8000698:	0010      	movs	r0, r2
 800069a:	79ca      	ldrb	r2, [r1, #7]
 800069c:	794c      	ldrb	r4, [r1, #5]
 800069e:	ab03      	add	r3, sp, #12
 80006a0:	790e      	ldrb	r6, [r1, #4]
 80006a2:	798f      	ldrb	r7, [r1, #6]
 80006a4:	70da      	strb	r2, [r3, #3]
 80006a6:	aa02      	add	r2, sp, #8
 80006a8:	7014      	strb	r4, [r2, #0]
 80006aa:	701f      	strb	r7, [r3, #0]
 80006ac:	705c      	strb	r4, [r3, #1]
 80006ae:	709e      	strb	r6, [r3, #2]
 80006b0:	9200      	str	r2, [sp, #0]
 80006b2:	694a      	ldr	r2, [r1, #20]
 80006b4:	0029      	movs	r1, r5
 80006b6:	f7ff ffbb 	bl	8000630 <acc_service_send_data>
 80006ba:	b005      	add	sp, #20
 80006bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006be <destroy_handle>:
 80006be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c0:	46c6      	mov	lr, r8
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <destroy_handle+0x5e>)
 80006c4:	4e16      	ldr	r6, [pc, #88]	; (8000720 <destroy_handle+0x62>)
 80006c6:	4698      	mov	r8, r3
 80006c8:	68dc      	ldr	r4, [r3, #12]
 80006ca:	0033      	movs	r3, r6
 80006cc:	b500      	push	{lr}
 80006ce:	3330      	adds	r3, #48	; 0x30
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	0005      	movs	r5, r0
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d905      	bls.n	80006e4 <destroy_handle+0x26>
 80006d8:	6843      	ldr	r3, [r0, #4]
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <destroy_handle+0x66>)
 80006dc:	4912      	ldr	r1, [pc, #72]	; (8000728 <destroy_handle+0x6a>)
 80006de:	2004      	movs	r0, #4
 80006e0:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80006e2:	47b8      	blx	r7
 80006e4:	2300      	movs	r3, #0
 80006e6:	2c00      	cmp	r4, #0
 80006e8:	d00d      	beq.n	8000706 <destroy_handle+0x48>
 80006ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80006ec:	42ac      	cmp	r4, r5
 80006ee:	d107      	bne.n	8000700 <destroy_handle+0x42>
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d111      	bne.n	8000718 <destroy_handle+0x5a>
 80006f4:	4643      	mov	r3, r8
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	0020      	movs	r0, r4
 80006fa:	f005 fc35 	bl	8005f68 <acc_rss_integration_mem_free>
 80006fe:	e008      	b.n	8000712 <destroy_handle+0x54>
 8000700:	0023      	movs	r3, r4
 8000702:	0014      	movs	r4, r2
 8000704:	e7ef      	b.n	80006e6 <destroy_handle+0x28>
 8000706:	6b76      	ldr	r6, [r6, #52]	; 0x34
 8000708:	686b      	ldr	r3, [r5, #4]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <destroy_handle+0x6e>)
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <destroy_handle+0x6a>)
 800070e:	0020      	movs	r0, r4
 8000710:	47b0      	blx	r6
 8000712:	bc04      	pop	{r2}
 8000714:	4690      	mov	r8, r2
 8000716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000718:	655a      	str	r2, [r3, #84]	; 0x54
 800071a:	e7ed      	b.n	80006f8 <destroy_handle+0x3a>
 800071c:	2000008c 	.word	0x2000008c
 8000720:	200002b8 	.word	0x200002b8
 8000724:	0801b8f6 	.word	0x0801b8f6
 8000728:	0801b917 	.word	0x0801b917
 800072c:	0801b927 	.word	0x0801b927

08000730 <acc_service_sparse_configuration_create>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	2260      	movs	r2, #96	; 0x60
 8000734:	4972      	ldr	r1, [pc, #456]	; (8000900 <acc_service_sparse_configuration_create+0x1d0>)
 8000736:	208c      	movs	r0, #140	; 0x8c
 8000738:	f00a fa1e 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 800073c:	1e04      	subs	r4, r0, #0
 800073e:	d100      	bne.n	8000742 <acc_service_sparse_configuration_create+0x12>
 8000740:	e0db      	b.n	80008fa <acc_service_sparse_configuration_create+0x1ca>
 8000742:	4b70      	ldr	r3, [pc, #448]	; (8000904 <acc_service_sparse_configuration_create+0x1d4>)
 8000744:	0005      	movs	r5, r0
 8000746:	6003      	str	r3, [r0, #0]
 8000748:	2303      	movs	r3, #3
 800074a:	7103      	strb	r3, [r0, #4]
 800074c:	4b6e      	ldr	r3, [pc, #440]	; (8000908 <acc_service_sparse_configuration_create+0x1d8>)
 800074e:	351c      	adds	r5, #28
 8000750:	6083      	str	r3, [r0, #8]
 8000752:	4b6e      	ldr	r3, [pc, #440]	; (800090c <acc_service_sparse_configuration_create+0x1dc>)
 8000754:	6105      	str	r5, [r0, #16]
 8000756:	6143      	str	r3, [r0, #20]
 8000758:	2358      	movs	r3, #88	; 0x58
 800075a:	2102      	movs	r1, #2
 800075c:	8303      	strh	r3, [r0, #24]
 800075e:	f7ff ff31 	bl	80005c4 <acc_service_profile_set>
 8000762:	0020      	movs	r0, r4
 8000764:	2100      	movs	r1, #0
 8000766:	f7ff ff1c 	bl	80005a2 <acc_service_maximize_signal_attenuation_set>
 800076a:	0028      	movs	r0, r5
 800076c:	f005 ff00 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000770:	2800      	cmp	r0, #0
 8000772:	d001      	beq.n	8000778 <acc_service_sparse_configuration_create+0x48>
 8000774:	4b66      	ldr	r3, [pc, #408]	; (8000910 <acc_service_sparse_configuration_create+0x1e0>)
 8000776:	6423      	str	r3, [r4, #64]	; 0x40
 8000778:	0028      	movs	r0, r5
 800077a:	f005 fef9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800077e:	2800      	cmp	r0, #0
 8000780:	d001      	beq.n	8000786 <acc_service_sparse_configuration_create+0x56>
 8000782:	4b64      	ldr	r3, [pc, #400]	; (8000914 <acc_service_sparse_configuration_create+0x1e4>)
 8000784:	6463      	str	r3, [r4, #68]	; 0x44
 8000786:	0028      	movs	r0, r5
 8000788:	f005 fef2 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800078c:	2800      	cmp	r0, #0
 800078e:	d003      	beq.n	8000798 <acc_service_sparse_configuration_create+0x68>
 8000790:	0023      	movs	r3, r4
 8000792:	2206      	movs	r2, #6
 8000794:	334e      	adds	r3, #78	; 0x4e
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	0028      	movs	r0, r5
 800079a:	f005 fee9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800079e:	2800      	cmp	r0, #0
 80007a0:	d001      	beq.n	80007a6 <acc_service_sparse_configuration_create+0x76>
 80007a2:	2301      	movs	r3, #1
 80007a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80007a6:	0028      	movs	r0, r5
 80007a8:	f7ff fed2 	bl	8000550 <acc_base_configuration_repetition_mode_on_demand_set>
 80007ac:	0028      	movs	r0, r5
 80007ae:	f005 fedf 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80007b2:	2800      	cmp	r0, #0
 80007b4:	d001      	beq.n	80007ba <acc_service_sparse_configuration_create+0x8a>
 80007b6:	2302      	movs	r3, #2
 80007b8:	6563      	str	r3, [r4, #84]	; 0x54
 80007ba:	0028      	movs	r0, r5
 80007bc:	f005 fed8 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d003      	beq.n	80007cc <acc_service_sparse_configuration_create+0x9c>
 80007c4:	0023      	movs	r3, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	3348      	adds	r3, #72	; 0x48
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	0028      	movs	r0, r5
 80007ce:	f005 fecf 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d003      	beq.n	80007de <acc_service_sparse_configuration_create+0xae>
 80007d6:	0023      	movs	r3, r4
 80007d8:	2210      	movs	r2, #16
 80007da:	337c      	adds	r3, #124	; 0x7c
 80007dc:	801a      	strh	r2, [r3, #0]
 80007de:	0028      	movs	r0, r5
 80007e0:	f005 fec6 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d002      	beq.n	80007ee <acc_service_sparse_configuration_create+0xbe>
 80007e8:	2200      	movs	r2, #0
 80007ea:	1d23      	adds	r3, r4, #4
 80007ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80007ee:	0028      	movs	r0, r5
 80007f0:	f005 febe 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d003      	beq.n	8000800 <acc_service_sparse_configuration_create+0xd0>
 80007f8:	0023      	movs	r3, r4
 80007fa:	2200      	movs	r2, #0
 80007fc:	3362      	adds	r3, #98	; 0x62
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	0028      	movs	r0, r5
 8000802:	f005 feb5 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000806:	2800      	cmp	r0, #0
 8000808:	d003      	beq.n	8000812 <acc_service_sparse_configuration_create+0xe2>
 800080a:	0023      	movs	r3, r4
 800080c:	2200      	movs	r2, #0
 800080e:	3363      	adds	r3, #99	; 0x63
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	0028      	movs	r0, r5
 8000814:	f005 feac 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000818:	2800      	cmp	r0, #0
 800081a:	d003      	beq.n	8000824 <acc_service_sparse_configuration_create+0xf4>
 800081c:	0023      	movs	r3, r4
 800081e:	2200      	movs	r2, #0
 8000820:	3364      	adds	r3, #100	; 0x64
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	0028      	movs	r0, r5
 8000826:	f005 fea3 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800082a:	2800      	cmp	r0, #0
 800082c:	d007      	beq.n	800083e <acc_service_sparse_configuration_create+0x10e>
 800082e:	0023      	movs	r3, r4
 8000830:	2200      	movs	r2, #0
 8000832:	336b      	adds	r3, #107	; 0x6b
 8000834:	705a      	strb	r2, [r3, #1]
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	3240      	adds	r2, #64	; 0x40
 800083c:	805a      	strh	r2, [r3, #2]
 800083e:	0028      	movs	r0, r5
 8000840:	f005 fe96 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000844:	2800      	cmp	r0, #0
 8000846:	d003      	beq.n	8000850 <acc_service_sparse_configuration_create+0x120>
 8000848:	0023      	movs	r3, r4
 800084a:	22ff      	movs	r2, #255	; 0xff
 800084c:	3372      	adds	r3, #114	; 0x72
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	0028      	movs	r0, r5
 8000852:	f005 fe8d 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000856:	2800      	cmp	r0, #0
 8000858:	d003      	beq.n	8000862 <acc_service_sparse_configuration_create+0x132>
 800085a:	0023      	movs	r3, r4
 800085c:	2200      	movs	r2, #0
 800085e:	3374      	adds	r3, #116	; 0x74
 8000860:	701a      	strb	r2, [r3, #0]
 8000862:	0028      	movs	r0, r5
 8000864:	f005 fe84 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000868:	2800      	cmp	r0, #0
 800086a:	d004      	beq.n	8000876 <acc_service_sparse_configuration_create+0x146>
 800086c:	0023      	movs	r3, r4
 800086e:	2200      	movs	r2, #0
 8000870:	3376      	adds	r3, #118	; 0x76
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	67a2      	str	r2, [r4, #120]	; 0x78
 8000876:	0028      	movs	r0, r5
 8000878:	2101      	movs	r1, #1
 800087a:	f7ff fdcb 	bl	8000414 <acc_base_configuration_downsampling_factor_set>
 800087e:	0028      	movs	r0, r5
 8000880:	f005 fe76 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000884:	2800      	cmp	r0, #0
 8000886:	d003      	beq.n	8000890 <acc_service_sparse_configuration_create+0x160>
 8000888:	0023      	movs	r3, r4
 800088a:	2201      	movs	r2, #1
 800088c:	3386      	adds	r3, #134	; 0x86
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	0028      	movs	r0, r5
 8000892:	f005 fe6d 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000896:	2800      	cmp	r0, #0
 8000898:	d003      	beq.n	80008a2 <acc_service_sparse_configuration_create+0x172>
 800089a:	0023      	movs	r3, r4
 800089c:	220b      	movs	r2, #11
 800089e:	335a      	adds	r3, #90	; 0x5a
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	0028      	movs	r0, r5
 80008a4:	f005 fe64 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	d003      	beq.n	80008b4 <acc_service_sparse_configuration_create+0x184>
 80008ac:	0023      	movs	r3, r4
 80008ae:	220a      	movs	r2, #10
 80008b0:	3358      	adds	r3, #88	; 0x58
 80008b2:	801a      	strh	r2, [r3, #0]
 80008b4:	0028      	movs	r0, r5
 80008b6:	f005 fe5b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d003      	beq.n	80008c6 <acc_service_sparse_configuration_create+0x196>
 80008be:	0023      	movs	r3, r4
 80008c0:	2200      	movs	r2, #0
 80008c2:	3365      	adds	r3, #101	; 0x65
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	0028      	movs	r0, r5
 80008c8:	f005 fe52 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d003      	beq.n	80008d8 <acc_service_sparse_configuration_create+0x1a8>
 80008d0:	0023      	movs	r3, r4
 80008d2:	2201      	movs	r2, #1
 80008d4:	336a      	adds	r3, #106	; 0x6a
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	0028      	movs	r0, r5
 80008da:	f005 fe49 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80008de:	2800      	cmp	r0, #0
 80008e0:	d004      	beq.n	80008ec <acc_service_sparse_configuration_create+0x1bc>
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	0023      	movs	r3, r4
 80008e6:	0152      	lsls	r2, r2, #5
 80008e8:	3370      	adds	r3, #112	; 0x70
 80008ea:	801a      	strh	r2, [r3, #0]
 80008ec:	0028      	movs	r0, r5
 80008ee:	f005 fe3f 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d001      	beq.n	80008fa <acc_service_sparse_configuration_create+0x1ca>
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <acc_service_sparse_configuration_create+0x1e8>)
 80008f8:	61e3      	str	r3, [r4, #28]
 80008fa:	0020      	movs	r0, r4
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	0801b95b 	.word	0x0801b95b
 8000904:	acc09dd7 	.word	0xacc09dd7
 8000908:	08000465 	.word	0x08000465
 800090c:	08000a09 	.word	0x08000a09
 8000910:	3e4ccccd 	.word	0x3e4ccccd
 8000914:	3e99999a 	.word	0x3e99999a
 8000918:	080055cb 	.word	0x080055cb

0800091c <acc_service_create>:
 800091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800091e:	46c6      	mov	lr, r8
 8000920:	4d30      	ldr	r5, [pc, #192]	; (80009e4 <acc_service_create+0xc8>)
 8000922:	b500      	push	{lr}
 8000924:	7a2c      	ldrb	r4, [r5, #8]
 8000926:	0007      	movs	r7, r0
 8000928:	2c00      	cmp	r4, #0
 800092a:	d04d      	beq.n	80009c8 <acc_service_create+0xac>
 800092c:	f7ff fbf8 	bl	8000120 <acc_service_configuration_valid>
 8000930:	2800      	cmp	r0, #0
 8000932:	d101      	bne.n	8000938 <acc_service_create+0x1c>
 8000934:	2400      	movs	r4, #0
 8000936:	e00b      	b.n	8000950 <acc_service_create+0x34>
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	68de      	ldr	r6, [r3, #12]
 800093c:	2e2a      	cmp	r6, #42	; 0x2a
 800093e:	d90b      	bls.n	8000958 <acc_service_create+0x3c>
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <acc_service_create+0xcc>)
 8000942:	4a2a      	ldr	r2, [pc, #168]	; (80009ec <acc_service_create+0xd0>)
 8000944:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8000946:	492a      	ldr	r1, [pc, #168]	; (80009f0 <acc_service_create+0xd4>)
 8000948:	232a      	movs	r3, #42	; 0x2a
 800094a:	2000      	movs	r0, #0
 800094c:	47a0      	blx	r4
 800094e:	2400      	movs	r4, #0
 8000950:	0020      	movs	r0, r4
 8000952:	bc04      	pop	{r2}
 8000954:	4690      	mov	r8, r2
 8000956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000958:	7a6b      	ldrb	r3, [r5, #9]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <acc_service_create+0x48>
 800095e:	68eb      	ldr	r3, [r5, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d129      	bne.n	80009b8 <acc_service_create+0x9c>
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <acc_service_create+0xcc>)
 8000966:	8b3c      	ldrh	r4, [r7, #24]
 8000968:	001a      	movs	r2, r3
 800096a:	3230      	adds	r2, #48	; 0x30
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	2a03      	cmp	r2, #3
 8000970:	d906      	bls.n	8000980 <acc_service_create+0x64>
 8000972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000974:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <acc_service_create+0xd8>)
 8000976:	4698      	mov	r8, r3
 8000978:	491d      	ldr	r1, [pc, #116]	; (80009f0 <acc_service_create+0xd4>)
 800097a:	0033      	movs	r3, r6
 800097c:	2004      	movs	r0, #4
 800097e:	47c0      	blx	r8
 8000980:	0020      	movs	r0, r4
 8000982:	22bd      	movs	r2, #189	; 0xbd
 8000984:	491c      	ldr	r1, [pc, #112]	; (80009f8 <acc_service_create+0xdc>)
 8000986:	f00a f8f7 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 800098a:	1e04      	subs	r4, r0, #0
 800098c:	d0d2      	beq.n	8000934 <acc_service_create+0x18>
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <acc_service_create+0xe0>)
 8000990:	6046      	str	r6, [r0, #4]
 8000992:	6003      	str	r3, [r0, #0]
 8000994:	68eb      	ldr	r3, [r5, #12]
 8000996:	0039      	movs	r1, r7
 8000998:	6543      	str	r3, [r0, #84]	; 0x54
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	60e8      	str	r0, [r5, #12]
 800099e:	4798      	blx	r3
 80009a0:	2800      	cmp	r0, #0
 80009a2:	d10e      	bne.n	80009c2 <acc_service_create+0xa6>
 80009a4:	68e3      	ldr	r3, [r4, #12]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <acc_service_create+0x92>
 80009aa:	0020      	movs	r0, r4
 80009ac:	4798      	blx	r3
 80009ae:	0020      	movs	r0, r4
 80009b0:	f7ff fe85 	bl	80006be <destroy_handle>
 80009b4:	2400      	movs	r4, #0
 80009b6:	e7cb      	b.n	8000950 <acc_service_create+0x34>
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	4296      	cmp	r6, r2
 80009bc:	d00b      	beq.n	80009d6 <acc_service_create+0xba>
 80009be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009c0:	e7ce      	b.n	8000960 <acc_service_create+0x44>
 80009c2:	2301      	movs	r3, #1
 80009c4:	7263      	strb	r3, [r4, #9]
 80009c6:	e7c3      	b.n	8000950 <acc_service_create+0x34>
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <acc_service_create+0xcc>)
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <acc_service_create+0xe4>)
 80009cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <acc_service_create+0xd4>)
 80009d0:	0020      	movs	r0, r4
 80009d2:	4798      	blx	r3
 80009d4:	e7bc      	b.n	8000950 <acc_service_create+0x34>
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <acc_service_create+0xcc>)
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <acc_service_create+0xe8>)
 80009da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009dc:	4904      	ldr	r1, [pc, #16]	; (80009f0 <acc_service_create+0xd4>)
 80009de:	2000      	movs	r0, #0
 80009e0:	4798      	blx	r3
 80009e2:	e7a7      	b.n	8000934 <acc_service_create+0x18>
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	200002b8 	.word	0x200002b8
 80009ec:	0801b97c 	.word	0x0801b97c
 80009f0:	0801b917 	.word	0x0801b917
 80009f4:	0801b995 	.word	0x0801b995
 80009f8:	0801b9b4 	.word	0x0801b9b4
 80009fc:	acc09ee8 	.word	0xacc09ee8
 8000a00:	0801b9d6 	.word	0x0801b9d6
 8000a04:	0801b9e8 	.word	0x0801b9e8

08000a08 <sparse_create_service>:
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	46de      	mov	lr, fp
 8000a0c:	4645      	mov	r5, r8
 8000a0e:	4657      	mov	r7, sl
 8000a10:	464e      	mov	r6, r9
 8000a12:	b5e0      	push	{r5, r6, r7, lr}
 8000a14:	b0a5      	sub	sp, #148	; 0x94
 8000a16:	4680      	mov	r8, r0
 8000a18:	228c      	movs	r2, #140	; 0x8c
 8000a1a:	a801      	add	r0, sp, #4
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	f014 fd41 	bl	80154a4 <memcpy>
 8000a22:	a801      	add	r0, sp, #4
 8000a24:	f7ff fb9a 	bl	800015c <acc_service_configuration_check>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d101      	bne.n	8000a30 <sparse_create_service+0x28>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e014      	b.n	8000a5a <sparse_create_service+0x52>
 8000a30:	a808      	add	r0, sp, #32
 8000a32:	f005 fd9d 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d0f8      	beq.n	8000a2c <sparse_create_service+0x24>
 8000a3a:	a808      	add	r0, sp, #32
 8000a3c:	f005 fd18 	bl	8006470 <acc_base_configuration_check.part.6>
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d0f3      	beq.n	8000a2c <sparse_create_service+0x24>
 8000a44:	ab22      	add	r3, sp, #136	; 0x88
 8000a46:	881d      	ldrh	r5, [r3, #0]
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d10d      	bne.n	8000a68 <sparse_create_service+0x60>
 8000a4c:	4b73      	ldr	r3, [pc, #460]	; (8000c1c <sparse_create_service+0x214>)
 8000a4e:	0028      	movs	r0, r5
 8000a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a52:	4a73      	ldr	r2, [pc, #460]	; (8000c20 <sparse_create_service+0x218>)
 8000a54:	4973      	ldr	r1, [pc, #460]	; (8000c24 <sparse_create_service+0x21c>)
 8000a56:	4798      	blx	r3
 8000a58:	0028      	movs	r0, r5
 8000a5a:	b025      	add	sp, #148	; 0x94
 8000a5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a5e:	4690      	mov	r8, r2
 8000a60:	4699      	mov	r9, r3
 8000a62:	46a2      	mov	sl, r4
 8000a64:	46ab      	mov	fp, r5
 8000a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a68:	238a      	movs	r3, #138	; 0x8a
 8000a6a:	446b      	add	r3, sp
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d10a      	bne.n	8000a88 <sparse_create_service+0x80>
 8000a72:	ab20      	add	r3, sp, #128	; 0x80
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	2b40      	cmp	r3, #64	; 0x40
 8000a78:	d906      	bls.n	8000a88 <sparse_create_service+0x80>
 8000a7a:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <sparse_create_service+0x214>)
 8000a7c:	4a6a      	ldr	r2, [pc, #424]	; (8000c28 <sparse_create_service+0x220>)
 8000a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a80:	4968      	ldr	r1, [pc, #416]	; (8000c24 <sparse_create_service+0x21c>)
 8000a82:	2000      	movs	r0, #0
 8000a84:	4798      	blx	r3
 8000a86:	e7d1      	b.n	8000a2c <sparse_create_service+0x24>
 8000a88:	4642      	mov	r2, r8
 8000a8a:	7923      	ldrb	r3, [r4, #4]
 8000a8c:	2010      	movs	r0, #16
 8000a8e:	7213      	strb	r3, [r2, #8]
 8000a90:	4b66      	ldr	r3, [pc, #408]	; (8000c2c <sparse_create_service+0x224>)
 8000a92:	22ec      	movs	r2, #236	; 0xec
 8000a94:	0019      	movs	r1, r3
 8000a96:	469b      	mov	fp, r3
 8000a98:	f00a f86e 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000a9c:	0005      	movs	r5, r0
 8000a9e:	2090      	movs	r0, #144	; 0x90
 8000aa0:	22ed      	movs	r2, #237	; 0xed
 8000aa2:	4659      	mov	r1, fp
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	f00a f867 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8000aaa:	0004      	movs	r4, r0
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d001      	beq.n	8000ab4 <sparse_create_service+0xac>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d10f      	bne.n	8000ad4 <sparse_create_service+0xcc>
 8000ab4:	0028      	movs	r0, r5
 8000ab6:	f005 fa57 	bl	8005f68 <acc_rss_integration_mem_free>
 8000aba:	0020      	movs	r0, r4
 8000abc:	f005 fa54 	bl	8005f68 <acc_rss_integration_mem_free>
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	4642      	mov	r2, r8
 8000ac6:	611d      	str	r5, [r3, #16]
 8000ac8:	1e68      	subs	r0, r5, #1
 8000aca:	4185      	sbcs	r5, r0
 8000acc:	4b58      	ldr	r3, [pc, #352]	; (8000c30 <sparse_create_service+0x228>)
 8000ace:	b2e8      	uxtb	r0, r5
 8000ad0:	60d3      	str	r3, [r2, #12]
 8000ad2:	e7c2      	b.n	8000a5a <sparse_create_service+0x52>
 8000ad4:	2318      	movs	r3, #24
 8000ad6:	469a      	mov	sl, r3
 8000ad8:	6028      	str	r0, [r5, #0]
 8000ada:	4482      	add	sl, r0
 8000adc:	4640      	mov	r0, r8
 8000ade:	18c0      	adds	r0, r0, r3
 8000ae0:	33e4      	adds	r3, #228	; 0xe4
 8000ae2:	4699      	mov	r9, r3
 8000ae4:	44a1      	add	r9, r4
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	4652      	mov	r2, sl
 8000aea:	6760      	str	r0, [r4, #116]	; 0x74
 8000aec:	a908      	add	r1, sp, #32
 8000aee:	f005 fe4d 	bl	800678c <acc_sensor_manager_prepare_radar_engine>
 8000af2:	464b      	mov	r3, r9
 8000af4:	895a      	ldrh	r2, [r3, #10]
 8000af6:	0023      	movs	r3, r4
 8000af8:	3370      	adds	r3, #112	; 0x70
 8000afa:	1e06      	subs	r6, r0, #0
 8000afc:	801a      	strh	r2, [r3, #0]
 8000afe:	d104      	bne.n	8000b0a <sparse_create_service+0x102>
 8000b00:	0028      	movs	r0, r5
 8000b02:	f005 fa61 	bl	8005fc8 <disassemble.lto_priv.320.lto_priv.630>
 8000b06:	0035      	movs	r5, r6
 8000b08:	e7db      	b.n	8000ac2 <sparse_create_service+0xba>
 8000b0a:	464b      	mov	r3, r9
 8000b0c:	89db      	ldrh	r3, [r3, #14]
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	464a      	mov	r2, r9
 8000b12:	8997      	ldrh	r7, [r2, #12]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	007f      	lsls	r7, r7, #1
 8000b18:	429f      	cmp	r7, r3
 8000b1a:	d200      	bcs.n	8000b1e <sparse_create_service+0x116>
 8000b1c:	001f      	movs	r7, r3
 8000b1e:	a808      	add	r0, sp, #32
 8000b20:	f005 fd26 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000b24:	2600      	movs	r6, #0
 8000b26:	42b0      	cmp	r0, r6
 8000b28:	d001      	beq.n	8000b2e <sparse_create_service+0x126>
 8000b2a:	ab1d      	add	r3, sp, #116	; 0x74
 8000b2c:	881e      	ldrh	r6, [r3, #0]
 8000b2e:	42be      	cmp	r6, r7
 8000b30:	d200      	bcs.n	8000b34 <sparse_create_service+0x12c>
 8000b32:	003e      	movs	r6, r7
 8000b34:	2298      	movs	r2, #152	; 0x98
 8000b36:	4659      	mov	r1, fp
 8000b38:	0052      	lsls	r2, r2, #1
 8000b3a:	0030      	movs	r0, r6
 8000b3c:	f005 fa58 	bl	8005ff0 <acc_rss_integration_mem_alloc_debug>
 8000b40:	464b      	mov	r3, r9
 8000b42:	1e07      	subs	r7, r0, #0
 8000b44:	61d8      	str	r0, [r3, #28]
 8000b46:	d056      	beq.n	8000bf6 <sparse_create_service+0x1ee>
 8000b48:	621e      	str	r6, [r3, #32]
 8000b4a:	0022      	movs	r2, r4
 8000b4c:	0026      	movs	r6, r4
 8000b4e:	1da3      	adds	r3, r4, #6
 8000b50:	6623      	str	r3, [r4, #96]	; 0x60
 8000b52:	1de3      	adds	r3, r4, #7
 8000b54:	6663      	str	r3, [r4, #100]	; 0x64
 8000b56:	3214      	adds	r2, #20
 8000b58:	3305      	adds	r3, #5
 8000b5a:	3608      	adds	r6, #8
 8000b5c:	66a3      	str	r3, [r4, #104]	; 0x68
 8000b5e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000b60:	65e2      	str	r2, [r4, #92]	; 0x5c
 8000b62:	65a4      	str	r4, [r4, #88]	; 0x58
 8000b64:	66e6      	str	r6, [r4, #108]	; 0x6c
 8000b66:	67d8      	str	r0, [r3, #124]	; 0x7c
 8000b68:	1d23      	adds	r3, r4, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	3388      	adds	r3, #136	; 0x88
 8000b70:	6019      	str	r1, [r3, #0]
 8000b72:	611a      	str	r2, [r3, #16]
 8000b74:	63d8      	str	r0, [r3, #60]	; 0x3c
 8000b76:	665c      	str	r4, [r3, #100]	; 0x64
 8000b78:	238c      	movs	r3, #140	; 0x8c
 8000b7a:	4f28      	ldr	r7, [pc, #160]	; (8000c1c <sparse_create_service+0x214>)
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	469b      	mov	fp, r3
 8000b80:	003b      	movs	r3, r7
 8000b82:	3330      	adds	r3, #48	; 0x30
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	44a3      	add	fp, r4
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d839      	bhi.n	8000c00 <sparse_create_service+0x1f8>
 8000b8c:	4652      	mov	r2, sl
 8000b8e:	465b      	mov	r3, fp
 8000b90:	a908      	add	r1, sp, #32
 8000b92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8000b94:	f005 fd06 	bl	80065a4 <acc_sensor_manager_prepare_measurement>
 8000b98:	4682      	mov	sl, r0
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d034      	beq.n	8000c08 <sparse_create_service+0x200>
 8000b9e:	0023      	movs	r3, r4
 8000ba0:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <sparse_create_service+0x22c>)
 8000ba2:	33b0      	adds	r3, #176	; 0xb0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <sparse_create_service+0x230>)
 8000ba8:	0020      	movs	r0, r4
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	464a      	mov	r2, r9
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <sparse_create_service+0x234>)
 8000bb0:	3078      	adds	r0, #120	; 0x78
 8000bb2:	67e3      	str	r3, [r4, #124]	; 0x7c
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <sparse_create_service+0x238>)
 8000bb6:	67d3      	str	r3, [r2, #124]	; 0x7c
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <sparse_create_service+0x23c>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <sparse_create_service+0x240>)
 8000bbc:	67f3      	str	r3, [r6, #124]	; 0x7c
 8000bbe:	0023      	movs	r3, r4
 8000bc0:	33b8      	adds	r3, #184	; 0xb8
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc4:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <sparse_create_service+0x244>)
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <sparse_create_service+0x248>)
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <sparse_create_service+0x24c>)
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	63a0      	str	r0, [r4, #56]	; 0x38
 8000bd2:	67a3      	str	r3, [r4, #120]	; 0x78
 8000bd4:	f009 fa6d 	bl	800a0b2 <validate.lto_priv.168>
 8000bd8:	1e06      	subs	r6, r0, #0
 8000bda:	d01a      	beq.n	8000c12 <sparse_create_service+0x20a>
 8000bdc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000bde:	34f4      	adds	r4, #244	; 0xf4
 8000be0:	68c3      	ldr	r3, [r0, #12]
 8000be2:	4798      	blx	r3
 8000be4:	4643      	mov	r3, r8
 8000be6:	6023      	str	r3, [r4, #0]
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <sparse_create_service+0x250>)
 8000bea:	606b      	str	r3, [r5, #4]
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <sparse_create_service+0x254>)
 8000bee:	60ab      	str	r3, [r5, #8]
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <sparse_create_service+0x258>)
 8000bf2:	60eb      	str	r3, [r5, #12]
 8000bf4:	e765      	b.n	8000ac2 <sparse_create_service+0xba>
 8000bf6:	0028      	movs	r0, r5
 8000bf8:	f005 f9e6 	bl	8005fc8 <disassemble.lto_priv.320.lto_priv.630>
 8000bfc:	003d      	movs	r5, r7
 8000bfe:	e760      	b.n	8000ac2 <sparse_create_service+0xba>
 8000c00:	a808      	add	r0, sp, #32
 8000c02:	f007 f895 	bl	8007d30 <acc_base_configuration_print.part.5>
 8000c06:	e7c1      	b.n	8000b8c <sparse_create_service+0x184>
 8000c08:	0028      	movs	r0, r5
 8000c0a:	f005 f9dd 	bl	8005fc8 <disassemble.lto_priv.320.lto_priv.630>
 8000c0e:	4655      	mov	r5, sl
 8000c10:	e757      	b.n	8000ac2 <sparse_create_service+0xba>
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <sparse_create_service+0x25c>)
 8000c16:	4914      	ldr	r1, [pc, #80]	; (8000c68 <sparse_create_service+0x260>)
 8000c18:	4798      	blx	r3
 8000c1a:	e771      	b.n	8000b00 <sparse_create_service+0xf8>
 8000c1c:	200002b8 	.word	0x200002b8
 8000c20:	0801ba0f 	.word	0x0801ba0f
 8000c24:	0801b8d6 	.word	0x0801b8d6
 8000c28:	0801ba3f 	.word	0x0801ba3f
 8000c2c:	0801ba6a 	.word	0x0801ba6a
 8000c30:	0800018d 	.word	0x0800018d
 8000c34:	40400000 	.word	0x40400000
 8000c38:	0800c821 	.word	0x0800c821
 8000c3c:	0800a109 	.word	0x0800a109
 8000c40:	0800a0b3 	.word	0x0800a0b3
 8000c44:	0800a493 	.word	0x0800a493
 8000c48:	0800066f 	.word	0x0800066f
 8000c4c:	08009fa3 	.word	0x08009fa3
 8000c50:	08009f39 	.word	0x08009f39
 8000c54:	08009fa1 	.word	0x08009fa1
 8000c58:	080058af 	.word	0x080058af
 8000c5c:	0800587b 	.word	0x0800587b
 8000c60:	08005fc9 	.word	0x08005fc9
 8000c64:	0801ba93 	.word	0x0801ba93
 8000c68:	0801bab3 	.word	0x0801bab3

08000c6c <printf_sparse_metadata>:
	filldata_envelope();
	DBG_PRINTLN("Envelope measurement complete");
	
}

void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c70:	46c6      	mov	lr, r8
 8000c72:	b500      	push	{lr}
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000c74:	4e45      	ldr	r6, [pc, #276]	; (8000d8c <printf_sparse_metadata+0x120>)
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000c76:	9107      	str	r1, [sp, #28]
 8000c78:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7a:	9b07      	ldr	r3, [sp, #28]
 8000c7c:	9006      	str	r0, [sp, #24]
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000c7e:	0030      	movs	r0, r6
 8000c80:	4698      	mov	r8, r3
void printf_sparse_metadata(acc_service_sparse_metadata_t metadata){
 8000c82:	9208      	str	r2, [sp, #32]
    INF_PRINTLN("Sparse* Serivce Metadata");
 8000c84:	f014 f83e 	bl	8014d04 <__wrap_printf>
 8000c88:	4841      	ldr	r0, [pc, #260]	; (8000d90 <printf_sparse_metadata+0x124>)
 8000c8a:	f014 f83b 	bl	8014d04 <__wrap_printf>
 8000c8e:	4d41      	ldr	r5, [pc, #260]	; (8000d94 <printf_sparse_metadata+0x128>)
 8000c90:	4c41      	ldr	r4, [pc, #260]	; (8000d98 <printf_sparse_metadata+0x12c>)
 8000c92:	4a42      	ldr	r2, [pc, #264]	; (8000d9c <printf_sparse_metadata+0x130>)
 8000c94:	0029      	movs	r1, r5
 8000c96:	0020      	movs	r0, r4
 8000c98:	f014 f834 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 8000c9c:	0030      	movs	r0, r6
 8000c9e:	f014 f831 	bl	8014d04 <__wrap_printf>
 8000ca2:	493f      	ldr	r1, [pc, #252]	; (8000da0 <printf_sparse_metadata+0x134>)
 8000ca4:	9806      	ldr	r0, [sp, #24]
 8000ca6:	f00d fc13 	bl	800e4d0 <__aeabi_fmul>
 8000caa:	f00e fb25 	bl	800f2f8 <__aeabi_f2iz>
 8000cae:	0001      	movs	r1, r0
 8000cb0:	483c      	ldr	r0, [pc, #240]	; (8000da4 <printf_sparse_metadata+0x138>)
 8000cb2:	f014 f827 	bl	8014d04 <__wrap_printf>
 8000cb6:	22c0      	movs	r2, #192	; 0xc0
 8000cb8:	0029      	movs	r1, r5
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	0020      	movs	r0, r4
 8000cbe:	f014 f821 	bl	8014d04 <__wrap_printf>
    if(! far_active){
 8000cc2:	4f39      	ldr	r7, [pc, #228]	; (8000da8 <printf_sparse_metadata+0x13c>)
        INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 8000cc4:	0030      	movs	r0, r6
    if(! far_active){
 8000cc6:	7c3b      	ldrb	r3, [r7, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d04c      	beq.n	8000d66 <printf_sparse_metadata+0xfa>
    }else{
       INF_PRINTLN("Length (far): %lu mm", (uint32_t)((metadata.length_m+ sparse_metadata_far.length_m) * 1000.0f)); 
 8000ccc:	f014 f81a 	bl	8014d04 <__wrap_printf>
 8000cd0:	69b9      	ldr	r1, [r7, #24]
 8000cd2:	4640      	mov	r0, r8
 8000cd4:	f00d f950 	bl	800df78 <__aeabi_fadd>
 8000cd8:	4931      	ldr	r1, [pc, #196]	; (8000da0 <printf_sparse_metadata+0x134>)
 8000cda:	f00d fbf9 	bl	800e4d0 <__aeabi_fmul>
 8000cde:	f00e f937 	bl	800ef50 <__aeabi_f2uiz>
 8000ce2:	0001      	movs	r1, r0
 8000ce4:	4831      	ldr	r0, [pc, #196]	; (8000dac <printf_sparse_metadata+0x140>)
 8000ce6:	f014 f80d 	bl	8014d04 <__wrap_printf>
 8000cea:	22c1      	movs	r2, #193	; 0xc1
 8000cec:	0029      	movs	r1, r5
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	f014 f807 	bl	8014d04 <__wrap_printf>
    }
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 8000cf6:	0030      	movs	r0, r6
 8000cf8:	f014 f804 	bl	8014d04 <__wrap_printf>
 8000cfc:	ab06      	add	r3, sp, #24
 8000cfe:	8919      	ldrh	r1, [r3, #8]
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <printf_sparse_metadata+0x144>)
 8000d02:	f013 ffff 	bl	8014d04 <__wrap_printf>
 8000d06:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <printf_sparse_metadata+0x148>)
 8000d08:	0029      	movs	r1, r5
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f013 fffa 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.sweep_rate * 1000.0f));
 8000d10:	0030      	movs	r0, r6
 8000d12:	f013 fff7 	bl	8014d04 <__wrap_printf>
 8000d16:	4922      	ldr	r1, [pc, #136]	; (8000da0 <printf_sparse_metadata+0x134>)
 8000d18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d1a:	f00d fbd9 	bl	800e4d0 <__aeabi_fmul>
 8000d1e:	f00e f917 	bl	800ef50 <__aeabi_f2uiz>
 8000d22:	0001      	movs	r1, r0
 8000d24:	4824      	ldr	r0, [pc, #144]	; (8000db8 <printf_sparse_metadata+0x14c>)
 8000d26:	f013 ffed 	bl	8014d04 <__wrap_printf>
 8000d2a:	4a24      	ldr	r2, [pc, #144]	; (8000dbc <printf_sparse_metadata+0x150>)
 8000d2c:	0029      	movs	r1, r5
 8000d2e:	0020      	movs	r0, r4
 8000d30:	f013 ffe8 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 8000d34:	0030      	movs	r0, r6
 8000d36:	f013 ffe5 	bl	8014d04 <__wrap_printf>
 8000d3a:	4921      	ldr	r1, [pc, #132]	; (8000dc0 <printf_sparse_metadata+0x154>)
 8000d3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000d3e:	f00d fbc7 	bl	800e4d0 <__aeabi_fmul>
 8000d42:	f00e f905 	bl	800ef50 <__aeabi_f2uiz>
 8000d46:	0001      	movs	r1, r0
 8000d48:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <printf_sparse_metadata+0x158>)
 8000d4a:	f013 ffdb 	bl	8014d04 <__wrap_printf>
 8000d4e:	22c2      	movs	r2, #194	; 0xc2
 8000d50:	0029      	movs	r1, r5
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	0020      	movs	r0, r4
 8000d56:	f013 ffd5 	bl	8014d04 <__wrap_printf>
}
 8000d5a:	bc04      	pop	{r2}
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d60:	bc08      	pop	{r3}
 8000d62:	b004      	add	sp, #16
 8000d64:	4718      	bx	r3
        INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 8000d66:	f013 ffcd 	bl	8014d04 <__wrap_printf>
 8000d6a:	490d      	ldr	r1, [pc, #52]	; (8000da0 <printf_sparse_metadata+0x134>)
 8000d6c:	4640      	mov	r0, r8
 8000d6e:	f00d fbaf 	bl	800e4d0 <__aeabi_fmul>
 8000d72:	f00e f8ed 	bl	800ef50 <__aeabi_f2uiz>
 8000d76:	0001      	movs	r1, r0
 8000d78:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <printf_sparse_metadata+0x15c>)
 8000d7a:	f013 ffc3 	bl	8014d04 <__wrap_printf>
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <printf_sparse_metadata+0x160>)
 8000d80:	0029      	movs	r1, r5
 8000d82:	0020      	movs	r0, r4
 8000d84:	f013 ffbe 	bl	8014d04 <__wrap_printf>
 8000d88:	e7b5      	b.n	8000cf6 <printf_sparse_metadata+0x8a>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	0801bc94 	.word	0x0801bc94
 8000d90:	0801bc9c 	.word	0x0801bc9c
 8000d94:	0801bcb8 	.word	0x0801bcb8
 8000d98:	0801bccc 	.word	0x0801bccc
 8000d9c:	000002ff 	.word	0x000002ff
 8000da0:	447a0000 	.word	0x447a0000
 8000da4:	0801bcd8 	.word	0x0801bcd8
 8000da8:	2000008c 	.word	0x2000008c
 8000dac:	0801bcf8 	.word	0x0801bcf8
 8000db0:	0801bd10 	.word	0x0801bd10
 8000db4:	00000306 	.word	0x00000306
 8000db8:	0801bd24 	.word	0x0801bd24
 8000dbc:	00000307 	.word	0x00000307
 8000dc0:	49742400 	.word	0x49742400
 8000dc4:	0801bd38 	.word	0x0801bd38
 8000dc8:	0801bce8 	.word	0x0801bce8
 8000dcc:	00000302 	.word	0x00000302

08000dd0 <updateSparseConfig>:
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	46d6      	mov	lr, sl
 8000dd4:	464f      	mov	r7, r9
 8000dd6:	4646      	mov	r6, r8
 8000dd8:	0004      	movs	r4, r0
 8000dda:	b5c0      	push	{r6, r7, lr}
	DBG_PRINTLN("updating config");
 8000ddc:	4887      	ldr	r0, [pc, #540]	; (8000ffc <updateSparseConfig+0x22c>)
void updateSparseConfig(acc_service_configuration_t config, uint16_t sweep_start, uint16_t sweep_length){
 8000dde:	4689      	mov	r9, r1
 8000de0:	4690      	mov	r8, r2
	DBG_PRINTLN("updating config");
 8000de2:	f013 ff8f 	bl	8014d04 <__wrap_printf>
 8000de6:	4886      	ldr	r0, [pc, #536]	; (8001000 <updateSparseConfig+0x230>)
 8000de8:	f013 ff8c 	bl	8014d04 <__wrap_printf>
 8000dec:	22e0      	movs	r2, #224	; 0xe0
	REGADRERR = -1;
 8000dee:	2701      	movs	r7, #1
	DBG_PRINTLN("updating config");
 8000df0:	0052      	lsls	r2, r2, #1
 8000df2:	4984      	ldr	r1, [pc, #528]	; (8001004 <updateSparseConfig+0x234>)
 8000df4:	4884      	ldr	r0, [pc, #528]	; (8001008 <updateSparseConfig+0x238>)
 8000df6:	f013 ff85 	bl	8014d04 <__wrap_printf>
	return *regptr;
 8000dfa:	4d84      	ldr	r5, [pc, #528]	; (800100c <updateSparseConfig+0x23c>)
	REGADRERR = -1;
 8000dfc:	4e84      	ldr	r6, [pc, #528]	; (8001010 <updateSparseConfig+0x240>)
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8000dfe:	6a2b      	ldr	r3, [r5, #32]
	REGADRERR = -1;
 8000e00:	427f      	negs	r7, r7
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8000e02:	b2d9      	uxtb	r1, r3
 8000e04:	0020      	movs	r0, r4
	REGADRERR = -1;
 8000e06:	6037      	str	r7, [r6, #0]
	acc_service_profile_set(config, RegInt_getreg(0x28));
 8000e08:	f7ff fbdc 	bl	80005c4 <acc_service_profile_set>
	return *regptr;
 8000e0c:	68ab      	ldr	r3, [r5, #8]
	REGADRERR = -1;
 8000e0e:	6037      	str	r7, [r6, #0]
	if(rep_mode == 0x01){
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d100      	bne.n	8000e16 <updateSparseConfig+0x46>
 8000e14:	e0dd      	b.n	8000fd2 <updateSparseConfig+0x202>
	}else if (rep_mode == 0x02){
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d100      	bne.n	8000e1c <updateSparseConfig+0x4c>
 8000e1a:	e0d4      	b.n	8000fc6 <updateSparseConfig+0x1f6>
	REGADRERR = -1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	0020      	movs	r0, r4
 8000e20:	425b      	negs	r3, r3
 8000e22:	6033      	str	r3, [r6, #0]
	return *regptr;
 8000e24:	69af      	ldr	r7, [r5, #24]
 8000e26:	f7ff f9bb 	bl	80001a0 <acc_service_get_base_configuration>
 8000e2a:	4682      	mov	sl, r0
 8000e2c:	f005 fba0 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d004      	beq.n	8000e3e <updateSparseConfig+0x6e>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8000e34:	1e7b      	subs	r3, r7, #1
 8000e36:	419f      	sbcs	r7, r3
 8000e38:	4652      	mov	r2, sl
 8000e3a:	2347      	movs	r3, #71	; 0x47
 8000e3c:	54d7      	strb	r7, [r2, r3]
	REGADRERR = -1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	425b      	negs	r3, r3
 8000e42:	6033      	str	r3, [r6, #0]
	return *regptr;
 8000e44:	696b      	ldr	r3, [r5, #20]
 8000e46:	0020      	movs	r0, r4
 8000e48:	469a      	mov	sl, r3
 8000e4a:	f7ff f9a9 	bl	80001a0 <acc_service_get_base_configuration>
 8000e4e:	0007      	movs	r7, r0
 8000e50:	f005 fb8e 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d001      	beq.n	8000e5c <updateSparseConfig+0x8c>
 8000e58:	4653      	mov	r3, sl
 8000e5a:	63bb      	str	r3, [r7, #56]	; 0x38
	REGADRERR = -1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	0020      	movs	r0, r4
 8000e60:	425b      	negs	r3, r3
 8000e62:	6033      	str	r3, [r6, #0]
	return *regptr;
 8000e64:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8000e66:	f7ff f99b 	bl	80001a0 <acc_service_get_base_configuration>
 8000e6a:	4682      	mov	sl, r0
 8000e6c:	f005 fb80 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000e70:	2800      	cmp	r0, #0
 8000e72:	d004      	beq.n	8000e7e <updateSparseConfig+0xae>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8000e74:	1e7b      	subs	r3, r7, #1
 8000e76:	419f      	sbcs	r7, r3
 8000e78:	4652      	mov	r2, sl
 8000e7a:	234e      	movs	r3, #78	; 0x4e
 8000e7c:	54d7      	strb	r7, [r2, r3]
 8000e7e:	0020      	movs	r0, r4
 8000e80:	f7ff f98e 	bl	80001a0 <acc_service_get_base_configuration>
 8000e84:	0007      	movs	r7, r0
 8000e86:	f005 fb73 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000e8a:	2800      	cmp	r0, #0
 8000e8c:	d006      	beq.n	8000e9c <updateSparseConfig+0xcc>
	acc_service_requested_start_set (config, (float)sweep_start/1000.0f);
 8000e8e:	4648      	mov	r0, r9
 8000e90:	f00e fa9c 	bl	800f3cc <__aeabi_ui2f>
 8000e94:	495f      	ldr	r1, [pc, #380]	; (8001014 <updateSparseConfig+0x244>)
 8000e96:	f00d fa09 	bl	800e2ac <__aeabi_fdiv>
 8000e9a:	6278      	str	r0, [r7, #36]	; 0x24
 8000e9c:	0020      	movs	r0, r4
 8000e9e:	f7ff f97f 	bl	80001a0 <acc_service_get_base_configuration>
 8000ea2:	0007      	movs	r7, r0
 8000ea4:	f005 fb64 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d006      	beq.n	8000eba <updateSparseConfig+0xea>
	acc_service_requested_length_set (config, (float)sweep_length/1000.0f);
 8000eac:	4640      	mov	r0, r8
 8000eae:	f00e fa8d 	bl	800f3cc <__aeabi_ui2f>
 8000eb2:	4958      	ldr	r1, [pc, #352]	; (8001014 <updateSparseConfig+0x244>)
 8000eb4:	f00d f9fa 	bl	800e2ac <__aeabi_fdiv>
 8000eb8:	62b8      	str	r0, [r7, #40]	; 0x28
	REGADRERR = -1;
 8000eba:	2701      	movs	r7, #1
 8000ebc:	427f      	negs	r7, r7
 8000ebe:	6037      	str	r7, [r6, #0]
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8000ec0:	6928      	ldr	r0, [r5, #16]
 8000ec2:	f00e fa83 	bl	800f3cc <__aeabi_ui2f>
 8000ec6:	4953      	ldr	r1, [pc, #332]	; (8001014 <updateSparseConfig+0x244>)
 8000ec8:	f00d f9f0 	bl	800e2ac <__aeabi_fdiv>
 8000ecc:	1c01      	adds	r1, r0, #0
 8000ece:	0020      	movs	r0, r4
 8000ed0:	f7ff fb92 	bl	80005f8 <acc_service_receiver_gain_set>
 8000ed4:	0020      	movs	r0, r4
	REGADRERR = -1;
 8000ed6:	6037      	str	r7, [r6, #0]
	return *regptr;
 8000ed8:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 8000eda:	f7ff f961 	bl	80001a0 <acc_service_get_base_configuration>
 8000ede:	4680      	mov	r8, r0
 8000ee0:	f005 fb46 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d002      	beq.n	8000eee <updateSparseConfig+0x11e>
 8000ee8:	4643      	mov	r3, r8
 8000eea:	b2ff      	uxtb	r7, r7
 8000eec:	879f      	strh	r7, [r3, #60]	; 0x3c
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8000eee:	6ca9      	ldr	r1, [r5, #72]	; 0x48
	REGADRERR = -1;
 8000ef0:	2701      	movs	r7, #1
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8000ef2:	1e4b      	subs	r3, r1, #1
 8000ef4:	4199      	sbcs	r1, r3
	REGADRERR = -1;
 8000ef6:	427f      	negs	r7, r7
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8000ef8:	0020      	movs	r0, r4
 8000efa:	b2c9      	uxtb	r1, r1
	REGADRERR = -1;
 8000efc:	6037      	str	r7, [r6, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 8000efe:	f7ff fb50 	bl	80005a2 <acc_service_maximize_signal_attenuation_set>
	return *regptr;
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	0020      	movs	r0, r4
	REGADRERR = -1;
 8000f06:	6037      	str	r7, [r6, #0]
	return *regptr;
 8000f08:	58ef      	ldr	r7, [r5, r3]
 8000f0a:	f7ff f909 	bl	8000120 <acc_service_configuration_valid>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	d14e      	bne.n	8000fb0 <updateSparseConfig+0x1e0>
	REGADRERR = -1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
 8000f16:	6033      	str	r3, [r6, #0]
 8000f18:	0020      	movs	r0, r4
	return *regptr;
 8000f1a:	3385      	adds	r3, #133	; 0x85
 8000f1c:	58ef      	ldr	r7, [r5, r3]
 8000f1e:	f7ff f8ff 	bl	8000120 <acc_service_configuration_valid>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d134      	bne.n	8000f90 <updateSparseConfig+0x1c0>
	REGADRERR = -1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	425b      	negs	r3, r3
 8000f2a:	6033      	str	r3, [r6, #0]
 8000f2c:	0020      	movs	r0, r4
	return *regptr;
 8000f2e:	3389      	adds	r3, #137	; 0x89
 8000f30:	58ef      	ldr	r7, [r5, r3]
 8000f32:	f7ff f94d 	bl	80001d0 <get_sparse_configuration>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d00d      	beq.n	8000f56 <updateSparseConfig+0x186>
 8000f3a:	2f00      	cmp	r7, #0
 8000f3c:	d01d      	beq.n	8000f7a <updateSparseConfig+0x1aa>
 8000f3e:	2f01      	cmp	r7, #1
 8000f40:	d01b      	beq.n	8000f7a <updateSparseConfig+0x1aa>
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	4b34      	ldr	r3, [pc, #208]	; (8001018 <updateSparseConfig+0x248>)
 8000f46:	5c9a      	ldrb	r2, [r3, r2]
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d004      	beq.n	8000f56 <updateSparseConfig+0x186>
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4e:	4a33      	ldr	r2, [pc, #204]	; (800101c <updateSparseConfig+0x24c>)
 8000f50:	4933      	ldr	r1, [pc, #204]	; (8001020 <updateSparseConfig+0x250>)
 8000f52:	2001      	movs	r0, #1
 8000f54:	4798      	blx	r3
	REGADRERR = -1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	0020      	movs	r0, r4
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	6033      	str	r3, [r6, #0]
	return *regptr;
 8000f5e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000f60:	f7ff f8de 	bl	8000120 <acc_service_configuration_valid>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d003      	beq.n	8000f70 <updateSparseConfig+0x1a0>
 8000f68:	b2a9      	uxth	r1, r5
 8000f6a:	6920      	ldr	r0, [r4, #16]
 8000f6c:	f7ff fa52 	bl	8000414 <acc_base_configuration_downsampling_factor_set>
}
 8000f70:	bc1c      	pop	{r2, r3, r4}
 8000f72:	4690      	mov	r8, r2
 8000f74:	4699      	mov	r9, r3
 8000f76:	46a2      	mov	sl, r4
 8000f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	4698      	mov	r8, r3
 8000f80:	f005 faf6 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d0e6      	beq.n	8000f56 <updateSparseConfig+0x186>
 8000f88:	236a      	movs	r3, #106	; 0x6a
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	54d7      	strb	r7, [r2, r3]
 8000f8e:	e7e2      	b.n	8000f56 <updateSparseConfig+0x186>
 8000f90:	6923      	ldr	r3, [r4, #16]
 8000f92:	0018      	movs	r0, r3
 8000f94:	4698      	mov	r8, r3
 8000f96:	f005 faeb 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000f9a:	2800      	cmp	r0, #0
 8000f9c:	d0c3      	beq.n	8000f26 <updateSparseConfig+0x156>
	acc_service_sparse_configuration_sweep_rate_set (config, (float)RegInt_getreg(0x41)/1000.0f);
 8000f9e:	0038      	movs	r0, r7
 8000fa0:	f00e fa14 	bl	800f3cc <__aeabi_ui2f>
 8000fa4:	491b      	ldr	r1, [pc, #108]	; (8001014 <updateSparseConfig+0x244>)
 8000fa6:	f00d f981 	bl	800e2ac <__aeabi_fdiv>
 8000faa:	4643      	mov	r3, r8
 8000fac:	6658      	str	r0, [r3, #100]	; 0x64
 8000fae:	e7ba      	b.n	8000f26 <updateSparseConfig+0x156>
 8000fb0:	6923      	ldr	r3, [r4, #16]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	f005 fadb 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d0a9      	beq.n	8000f12 <updateSparseConfig+0x142>
 8000fbe:	2360      	movs	r3, #96	; 0x60
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	52d7      	strh	r7, [r2, r3]
 8000fc4:	e7a5      	b.n	8000f12 <updateSparseConfig+0x142>
 8000fc6:	0020      	movs	r0, r4
 8000fc8:	f7ff f8ea 	bl	80001a0 <acc_service_get_base_configuration>
 8000fcc:	f7ff fac0 	bl	8000550 <acc_base_configuration_repetition_mode_on_demand_set>
 8000fd0:	e724      	b.n	8000e1c <updateSparseConfig+0x4c>
	return *regptr;
 8000fd2:	68eb      	ldr	r3, [r5, #12]
 8000fd4:	0020      	movs	r0, r4
 8000fd6:	469a      	mov	sl, r3
 8000fd8:	f7ff f8e2 	bl	80001a0 <acc_service_get_base_configuration>
 8000fdc:	0007      	movs	r7, r0
 8000fde:	f005 fac7 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d100      	bne.n	8000fe8 <updateSparseConfig+0x218>
 8000fe6:	e719      	b.n	8000e1c <updateSparseConfig+0x4c>
 8000fe8:	2303      	movs	r3, #3
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 8000fea:	4650      	mov	r0, sl
 8000fec:	713b      	strb	r3, [r7, #4]
 8000fee:	f00e f9ed 	bl	800f3cc <__aeabi_ui2f>
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <updateSparseConfig+0x244>)
 8000ff4:	f00d f95a 	bl	800e2ac <__aeabi_fdiv>
 8000ff8:	60b8      	str	r0, [r7, #8]
 8000ffa:	e70f      	b.n	8000e1c <updateSparseConfig+0x4c>
 8000ffc:	0801bd4c 	.word	0x0801bd4c
 8001000:	0801bd54 	.word	0x0801bd54
 8001004:	0801bcb8 	.word	0x0801bcb8
 8001008:	0801bccc 	.word	0x0801bccc
 800100c:	20000514 	.word	0x20000514
 8001010:	200003b0 	.word	0x200003b0
 8001014:	447a0000 	.word	0x447a0000
 8001018:	200002b8 	.word	0x200002b8
 800101c:	0801bd64 	.word	0x0801bd64
 8001020:	0801b8d6 	.word	0x0801b8d6

08001024 <data_malloc>:
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001026:	46d6      	mov	lr, sl
 8001028:	464f      	mov	r7, r9
 800102a:	4646      	mov	r6, r8
 800102c:	0004      	movs	r4, r0
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <data_malloc+0xe0>)
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001030:	b5c0      	push	{r6, r7, lr}
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001032:	0018      	movs	r0, r3
int8_t data_malloc(uint16_t sweeps, uint16_t bins){
 8001034:	000d      	movs	r5, r1
	DBG_PRINTLN("malloc sweeps: %d", sweeps);
 8001036:	4699      	mov	r9, r3
 8001038:	f013 fe64 	bl	8014d04 <__wrap_printf>
 800103c:	0021      	movs	r1, r4
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <data_malloc+0xe4>)
 8001040:	f013 fe60 	bl	8014d04 <__wrap_printf>
 8001044:	2288      	movs	r2, #136	; 0x88
 8001046:	4b31      	ldr	r3, [pc, #196]	; (800110c <data_malloc+0xe8>)
 8001048:	4f31      	ldr	r7, [pc, #196]	; (8001110 <data_malloc+0xec>)
 800104a:	0019      	movs	r1, r3
 800104c:	32ff      	adds	r2, #255	; 0xff
 800104e:	0038      	movs	r0, r7
 8001050:	4698      	mov	r8, r3
 8001052:	f013 fe57 	bl	8014d04 <__wrap_printf>
	DBG_PRINTLN("malloc bins: %d", bins);
 8001056:	4648      	mov	r0, r9
 8001058:	f013 fe54 	bl	8014d04 <__wrap_printf>
 800105c:	0029      	movs	r1, r5
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <data_malloc+0xf0>)
 8001060:	f013 fe50 	bl	8014d04 <__wrap_printf>
 8001064:	22c4      	movs	r2, #196	; 0xc4
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8001066:	1cae      	adds	r6, r5, #2
 8001068:	4366      	muls	r6, r4
	DBG_PRINTLN("malloc bins: %d", bins);
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	4641      	mov	r1, r8
 800106e:	0038      	movs	r0, r7
    len = sizeof(uint16_t *) * r + sizeof(uint16_t) * c * r;
 8001070:	0076      	lsls	r6, r6, #1
	DBG_PRINTLN("malloc bins: %d", bins);
 8001072:	f013 fe47 	bl	8014d04 <__wrap_printf>
    data = (uint16_t **)malloc(len);
 8001076:	0030      	movs	r0, r6
 8001078:	f014 fa00 	bl	801547c <malloc>
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <data_malloc+0xf4>)
 800107e:	469a      	mov	sl, r3
 8001080:	6298      	str	r0, [r3, #40]	; 0x28
	if (data == NULL){
 8001082:	2800      	cmp	r0, #0
 8001084:	d02e      	beq.n	80010e4 <data_malloc+0xc0>
		DBG_PRINTLN("data buffer allociation success");
 8001086:	4648      	mov	r0, r9
 8001088:	f013 fe3c 	bl	8014d04 <__wrap_printf>
 800108c:	4823      	ldr	r0, [pc, #140]	; (800111c <data_malloc+0xf8>)
 800108e:	f013 fe39 	bl	8014d04 <__wrap_printf>
 8001092:	2296      	movs	r2, #150	; 0x96
 8001094:	4641      	mov	r1, r8
 8001096:	32ff      	adds	r2, #255	; 0xff
 8001098:	0038      	movs	r0, r7
 800109a:	f013 fe33 	bl	8014d04 <__wrap_printf>
		DBG_PRINTLN("data buffer len: %ld", len);
 800109e:	4648      	mov	r0, r9
 80010a0:	f013 fe30 	bl	8014d04 <__wrap_printf>
 80010a4:	0031      	movs	r1, r6
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <data_malloc+0xfc>)
 80010a8:	f013 fe2c 	bl	8014d04 <__wrap_printf>
 80010ac:	22cb      	movs	r2, #203	; 0xcb
 80010ae:	4641      	mov	r1, r8
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	0038      	movs	r0, r7
 80010b4:	f013 fe26 	bl	8014d04 <__wrap_printf>
    ptr = (uint16_t *)(data + r);
 80010b8:	4653      	mov	r3, sl
 80010ba:	00a2      	lsls	r2, r4, #2
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    for(uint16_t i = 0; i < r; i++){
 80010be:	2c00      	cmp	r4, #0
 80010c0:	d00a      	beq.n	80010d8 <data_malloc+0xb4>
 80010c2:	3c01      	subs	r4, #1
 80010c4:	b2a0      	uxth	r0, r4
 80010c6:	0080      	lsls	r0, r0, #2
 80010c8:	1d1c      	adds	r4, r3, #4
 80010ca:	006d      	lsls	r5, r5, #1
 80010cc:	189a      	adds	r2, r3, r2
 80010ce:	1900      	adds	r0, r0, r4
        data[i] = (ptr + c * i);
 80010d0:	c304      	stmia	r3!, {r2}
 80010d2:	1952      	adds	r2, r2, r5
    for(uint16_t i = 0; i < r; i++){
 80010d4:	4298      	cmp	r0, r3
 80010d6:	d1fb      	bne.n	80010d0 <data_malloc+0xac>
	return 0;
 80010d8:	2000      	movs	r0, #0
}
 80010da:	bc1c      	pop	{r2, r3, r4}
 80010dc:	4690      	mov	r8, r2
 80010de:	4699      	mov	r9, r3
 80010e0:	46a2      	mov	sl, r4
 80010e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ERR_PRINTLN("data buffer allociation failed");
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <data_malloc+0x100>)
 80010e6:	f013 fe0d 	bl	8014d04 <__wrap_printf>
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <data_malloc+0x104>)
 80010ec:	f013 fe0a 	bl	8014d04 <__wrap_printf>
 80010f0:	22c9      	movs	r2, #201	; 0xc9
 80010f2:	4641      	mov	r1, r8
 80010f4:	0052      	lsls	r2, r2, #1
 80010f6:	0038      	movs	r0, r7
 80010f8:	f013 fe04 	bl	8014d04 <__wrap_printf>
		return -1;
 80010fc:	2001      	movs	r0, #1
 80010fe:	4240      	negs	r0, r0
 8001100:	e7eb      	b.n	80010da <data_malloc+0xb6>
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	0801bd4c 	.word	0x0801bd4c
 8001108:	0801bd8c 	.word	0x0801bd8c
 800110c:	0801bcb8 	.word	0x0801bcb8
 8001110:	0801bccc 	.word	0x0801bccc
 8001114:	0801bda0 	.word	0x0801bda0
 8001118:	2000008c 	.word	0x2000008c
 800111c:	0801bdd8 	.word	0x0801bdd8
 8001120:	0801bdf8 	.word	0x0801bdf8
 8001124:	0801bdb0 	.word	0x0801bdb0
 8001128:	0801bdb8 	.word	0x0801bdb8

0800112c <initRSS>:
void initRSS(void){
 800112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112e:	46de      	mov	lr, fp
 8001130:	4645      	mov	r5, r8
 8001132:	4657      	mov	r7, sl
 8001134:	464e      	mov	r6, r9
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 8001136:	4cd1      	ldr	r4, [pc, #836]	; (800147c <initRSS+0x350>)
void initRSS(void){
 8001138:	b5e0      	push	{r5, r6, r7, lr}
	INF_PRINTLN("build at %s %s", __DATE__, __TIME__);
 800113a:	0020      	movs	r0, r4
 800113c:	f013 fde2 	bl	8014d04 <__wrap_printf>
 8001140:	4acf      	ldr	r2, [pc, #828]	; (8001480 <initRSS+0x354>)
 8001142:	49d0      	ldr	r1, [pc, #832]	; (8001484 <initRSS+0x358>)
 8001144:	48d0      	ldr	r0, [pc, #832]	; (8001488 <initRSS+0x35c>)
 8001146:	f013 fddd 	bl	8014d04 <__wrap_printf>
 800114a:	22a8      	movs	r2, #168	; 0xa8
 800114c:	4dcf      	ldr	r5, [pc, #828]	; (800148c <initRSS+0x360>)
 800114e:	4ed0      	ldr	r6, [pc, #832]	; (8001490 <initRSS+0x364>)
 8001150:	0052      	lsls	r2, r2, #1
 8001152:	0029      	movs	r1, r5
 8001154:	0030      	movs	r0, r6
 8001156:	f013 fdd5 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("of firmware revision: %d.%d.%d", get_byte(FIRMWARE_REVISION,2),get_byte(FIRMWARE_REVISION,1),get_byte(FIRMWARE_REVISION,0) );
 800115a:	0020      	movs	r0, r4
 800115c:	f013 fdd2 	bl	8014d04 <__wrap_printf>
 8001160:	2300      	movs	r3, #0
 8001162:	2204      	movs	r2, #4
 8001164:	2101      	movs	r1, #1
 8001166:	48cb      	ldr	r0, [pc, #812]	; (8001494 <initRSS+0x368>)
 8001168:	f013 fdcc 	bl	8014d04 <__wrap_printf>
 800116c:	2252      	movs	r2, #82	; 0x52
 800116e:	0029      	movs	r1, r5
 8001170:	32ff      	adds	r2, #255	; 0xff
 8001172:	0030      	movs	r0, r6
 8001174:	f013 fdc6 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("for hardware revision: %d.%d.%d", get_byte(HARDWARE_REVISION,2),get_byte(HARDWARE_REVISION,1),get_byte(HARDWARE_REVISION,0) );
 8001178:	0020      	movs	r0, r4
 800117a:	f013 fdc3 	bl	8014d04 <__wrap_printf>
 800117e:	2300      	movs	r3, #0
 8001180:	2201      	movs	r2, #1
 8001182:	2101      	movs	r1, #1
 8001184:	48c4      	ldr	r0, [pc, #784]	; (8001498 <initRSS+0x36c>)
 8001186:	f013 fdbd 	bl	8014d04 <__wrap_printf>
 800118a:	22a9      	movs	r2, #169	; 0xa9
 800118c:	0029      	movs	r1, r5
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	0030      	movs	r0, r6
 8001192:	f013 fdb7 	bl	8014d04 <__wrap_printf>
	radar_hal = *acc_hal_integration_get_implementation();
 8001196:	2374      	movs	r3, #116	; 0x74
 8001198:	4698      	mov	r8, r3
 800119a:	4fc0      	ldr	r7, [pc, #768]	; (800149c <initRSS+0x370>)
 800119c:	2238      	movs	r2, #56	; 0x38
 800119e:	44b8      	add	r8, r7
 80011a0:	49bf      	ldr	r1, [pc, #764]	; (80014a0 <initRSS+0x374>)
 80011a2:	4640      	mov	r0, r8
 80011a4:	f014 f97e 	bl	80154a4 <memcpy>
 80011a8:	232c      	movs	r3, #44	; 0x2c
 80011aa:	4cbe      	ldr	r4, [pc, #760]	; (80014a4 <initRSS+0x378>)
 80011ac:	5ce3      	ldrb	r3, [r4, r3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d000      	beq.n	80011b4 <initRSS+0x88>
 80011b2:	e11d      	b.n	80013f0 <initRSS+0x2c4>
 80011b4:	4bbc      	ldr	r3, [pc, #752]	; (80014a8 <initRSS+0x37c>)
 80011b6:	2238      	movs	r2, #56	; 0x38
 80011b8:	0018      	movs	r0, r3
 80011ba:	4641      	mov	r1, r8
 80011bc:	4699      	mov	r9, r3
 80011be:	f014 f971 	bl	80154a4 <memcpy>
 80011c2:	7a3b      	ldrb	r3, [r7, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d100      	bne.n	80011ca <initRSS+0x9e>
 80011c8:	e11e      	b.n	8001408 <initRSS+0x2dc>
 80011ca:	232e      	movs	r3, #46	; 0x2e
 80011cc:	5ce3      	ldrb	r3, [r4, r3]
 80011ce:	469a      	mov	sl, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d100      	bne.n	80011d6 <initRSS+0xaa>
 80011d4:	e11d      	b.n	8001412 <initRSS+0x2e6>
 80011d6:	232c      	movs	r3, #44	; 0x2c
 80011d8:	2201      	movs	r2, #1
 80011da:	54e2      	strb	r2, [r4, r3]
 80011dc:	464a      	mov	r2, r9
 80011de:	3304      	adds	r3, #4
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d914      	bls.n	8001210 <initRSS+0xe4>
 80011e6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80011e8:	49b0      	ldr	r1, [pc, #704]	; (80014ac <initRSS+0x380>)
 80011ea:	4ab1      	ldr	r2, [pc, #708]	; (80014b0 <initRSS+0x384>)
 80011ec:	2002      	movs	r0, #2
 80011ee:	4798      	blx	r3
 80011f0:	232c      	movs	r3, #44	; 0x2c
	if (!acc_rss_activate(&radar_hal))
 80011f2:	5ce3      	ldrb	r3, [r4, r3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <initRSS+0xe4>
		ERR_PRINTLN("RSS activation fail");
 80011f8:	48ae      	ldr	r0, [pc, #696]	; (80014b4 <initRSS+0x388>)
 80011fa:	f013 fd83 	bl	8014d04 <__wrap_printf>
 80011fe:	48ae      	ldr	r0, [pc, #696]	; (80014b8 <initRSS+0x38c>)
 8001200:	f013 fd80 	bl	8014d04 <__wrap_printf>
 8001204:	225a      	movs	r2, #90	; 0x5a
 8001206:	0029      	movs	r1, r5
 8001208:	32ff      	adds	r2, #255	; 0xff
 800120a:	0030      	movs	r0, r6
 800120c:	f013 fd7a 	bl	8014d04 <__wrap_printf>
 8001210:	2301      	movs	r3, #1
 8001212:	727b      	strb	r3, [r7, #9]
	sparse_config = acc_service_sparse_configuration_create();
 8001214:	f7ff fa8c 	bl	8000730 <acc_service_sparse_configuration_create>
 8001218:	6320      	str	r0, [r4, #48]	; 0x30
	if (sparse_config == NULL)
 800121a:	2800      	cmp	r0, #0
 800121c:	d100      	bne.n	8001220 <initRSS+0xf4>
 800121e:	e178      	b.n	8001512 <initRSS+0x3e6>
	sparse_config_far = acc_service_sparse_configuration_create();
 8001220:	f7ff fa86 	bl	8000730 <acc_service_sparse_configuration_create>
 8001224:	6360      	str	r0, [r4, #52]	; 0x34
	if (sparse_config_far == NULL)
 8001226:	2800      	cmp	r0, #0
 8001228:	d100      	bne.n	800122c <initRSS+0x100>
 800122a:	e165      	b.n	80014f8 <initRSS+0x3cc>
 800122c:	226d      	movs	r2, #109	; 0x6d
 800122e:	49a3      	ldr	r1, [pc, #652]	; (80014bc <initRSS+0x390>)
 8001230:	2090      	movs	r0, #144	; 0x90
 8001232:	f009 fca1 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8001236:	1e05      	subs	r5, r0, #0
 8001238:	d100      	bne.n	800123c <initRSS+0x110>
 800123a:	e0d4      	b.n	80013e6 <initRSS+0x2ba>
 800123c:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <initRSS+0x394>)
 800123e:	0006      	movs	r6, r0
 8001240:	6003      	str	r3, [r0, #0]
 8001242:	4ba0      	ldr	r3, [pc, #640]	; (80014c4 <initRSS+0x398>)
 8001244:	2700      	movs	r7, #0
 8001246:	6083      	str	r3, [r0, #8]
 8001248:	4b9f      	ldr	r3, [pc, #636]	; (80014c8 <initRSS+0x39c>)
 800124a:	361c      	adds	r6, #28
 800124c:	6143      	str	r3, [r0, #20]
 800124e:	2358      	movs	r3, #88	; 0x58
 8001250:	7107      	strb	r7, [r0, #4]
 8001252:	8303      	strh	r3, [r0, #24]
 8001254:	6106      	str	r6, [r0, #16]
 8001256:	2102      	movs	r1, #2
 8001258:	f7ff f9b4 	bl	80005c4 <acc_service_profile_set>
 800125c:	0028      	movs	r0, r5
 800125e:	0039      	movs	r1, r7
 8001260:	f7ff f99f 	bl	80005a2 <acc_service_maximize_signal_attenuation_set>
 8001264:	0030      	movs	r0, r6
 8001266:	f005 f983 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800126a:	42b8      	cmp	r0, r7
 800126c:	d001      	beq.n	8001272 <initRSS+0x146>
 800126e:	4b97      	ldr	r3, [pc, #604]	; (80014cc <initRSS+0x3a0>)
 8001270:	642b      	str	r3, [r5, #64]	; 0x40
 8001272:	0030      	movs	r0, r6
 8001274:	f005 f97c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001278:	2800      	cmp	r0, #0
 800127a:	d001      	beq.n	8001280 <initRSS+0x154>
 800127c:	4b94      	ldr	r3, [pc, #592]	; (80014d0 <initRSS+0x3a4>)
 800127e:	646b      	str	r3, [r5, #68]	; 0x44
 8001280:	0030      	movs	r0, r6
 8001282:	f005 f975 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001286:	2800      	cmp	r0, #0
 8001288:	d002      	beq.n	8001290 <initRSS+0x164>
 800128a:	234e      	movs	r3, #78	; 0x4e
 800128c:	2206      	movs	r2, #6
 800128e:	54ea      	strb	r2, [r5, r3]
 8001290:	0030      	movs	r0, r6
 8001292:	f005 f96d 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001296:	2800      	cmp	r0, #0
 8001298:	d002      	beq.n	80012a0 <initRSS+0x174>
 800129a:	2358      	movs	r3, #88	; 0x58
 800129c:	220a      	movs	r2, #10
 800129e:	52ea      	strh	r2, [r5, r3]
 80012a0:	0030      	movs	r0, r6
 80012a2:	f005 f965 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d001      	beq.n	80012ae <initRSS+0x182>
 80012aa:	2301      	movs	r3, #1
 80012ac:	62ab      	str	r3, [r5, #40]	; 0x28
 80012ae:	0030      	movs	r0, r6
 80012b0:	f7ff f94e 	bl	8000550 <acc_base_configuration_repetition_mode_on_demand_set>
 80012b4:	0030      	movs	r0, r6
 80012b6:	f005 f95b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d001      	beq.n	80012c2 <initRSS+0x196>
 80012be:	2302      	movs	r3, #2
 80012c0:	656b      	str	r3, [r5, #84]	; 0x54
 80012c2:	0030      	movs	r0, r6
 80012c4:	f005 f954 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d002      	beq.n	80012d2 <initRSS+0x1a6>
 80012cc:	2348      	movs	r3, #72	; 0x48
 80012ce:	2200      	movs	r2, #0
 80012d0:	54ea      	strb	r2, [r5, r3]
 80012d2:	0030      	movs	r0, r6
 80012d4:	f005 f94c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d002      	beq.n	80012e2 <initRSS+0x1b6>
 80012dc:	2362      	movs	r3, #98	; 0x62
 80012de:	2200      	movs	r2, #0
 80012e0:	54ea      	strb	r2, [r5, r3]
 80012e2:	0030      	movs	r0, r6
 80012e4:	f005 f944 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d002      	beq.n	80012f2 <initRSS+0x1c6>
 80012ec:	2363      	movs	r3, #99	; 0x63
 80012ee:	2200      	movs	r2, #0
 80012f0:	54ea      	strb	r2, [r5, r3]
 80012f2:	0030      	movs	r0, r6
 80012f4:	f005 f93c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d002      	beq.n	8001302 <initRSS+0x1d6>
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	2200      	movs	r2, #0
 8001300:	54ea      	strb	r2, [r5, r3]
 8001302:	0030      	movs	r0, r6
 8001304:	f005 f934 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001308:	2800      	cmp	r0, #0
 800130a:	d007      	beq.n	800131c <initRSS+0x1f0>
 800130c:	2300      	movs	r3, #0
 800130e:	226b      	movs	r2, #107	; 0x6b
 8001310:	54ab      	strb	r3, [r5, r2]
 8001312:	3201      	adds	r2, #1
 8001314:	54ab      	strb	r3, [r5, r2]
 8001316:	336e      	adds	r3, #110	; 0x6e
 8001318:	3a2c      	subs	r2, #44	; 0x2c
 800131a:	52ea      	strh	r2, [r5, r3]
 800131c:	0030      	movs	r0, r6
 800131e:	f005 f927 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001322:	2800      	cmp	r0, #0
 8001324:	d002      	beq.n	800132c <initRSS+0x200>
 8001326:	2372      	movs	r3, #114	; 0x72
 8001328:	22ff      	movs	r2, #255	; 0xff
 800132a:	52ea      	strh	r2, [r5, r3]
 800132c:	0030      	movs	r0, r6
 800132e:	f005 f91f 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001332:	2800      	cmp	r0, #0
 8001334:	d002      	beq.n	800133c <initRSS+0x210>
 8001336:	2374      	movs	r3, #116	; 0x74
 8001338:	2200      	movs	r2, #0
 800133a:	54ea      	strb	r2, [r5, r3]
 800133c:	0030      	movs	r0, r6
 800133e:	f005 f917 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001342:	2800      	cmp	r0, #0
 8001344:	d003      	beq.n	800134e <initRSS+0x222>
 8001346:	2300      	movs	r3, #0
 8001348:	2276      	movs	r2, #118	; 0x76
 800134a:	54ab      	strb	r3, [r5, r2]
 800134c:	67ab      	str	r3, [r5, #120]	; 0x78
 800134e:	0030      	movs	r0, r6
 8001350:	2101      	movs	r1, #1
 8001352:	f7ff f85f 	bl	8000414 <acc_base_configuration_downsampling_factor_set>
 8001356:	0030      	movs	r0, r6
 8001358:	f005 f90a 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800135c:	2800      	cmp	r0, #0
 800135e:	d002      	beq.n	8001366 <initRSS+0x23a>
 8001360:	235a      	movs	r3, #90	; 0x5a
 8001362:	220b      	movs	r2, #11
 8001364:	52ea      	strh	r2, [r5, r3]
 8001366:	0030      	movs	r0, r6
 8001368:	f005 f902 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800136c:	2800      	cmp	r0, #0
 800136e:	d002      	beq.n	8001376 <initRSS+0x24a>
 8001370:	2365      	movs	r3, #101	; 0x65
 8001372:	2201      	movs	r2, #1
 8001374:	54ea      	strb	r2, [r5, r3]
 8001376:	0030      	movs	r0, r6
 8001378:	f005 f8fa 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800137c:	2800      	cmp	r0, #0
 800137e:	d001      	beq.n	8001384 <initRSS+0x258>
 8001380:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <initRSS+0x3a8>)
 8001382:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001384:	0030      	movs	r0, r6
 8001386:	f005 f8f3 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800138a:	2800      	cmp	r0, #0
 800138c:	d004      	beq.n	8001398 <initRSS+0x26c>
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <initRSS+0x3ac>)
 8001390:	2201      	movs	r2, #1
 8001392:	632b      	str	r3, [r5, #48]	; 0x30
 8001394:	2334      	movs	r3, #52	; 0x34
 8001396:	54ea      	strb	r2, [r5, r3]
 8001398:	0030      	movs	r0, r6
 800139a:	f005 f8e9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d002      	beq.n	80013a8 <initRSS+0x27c>
 80013a2:	2338      	movs	r3, #56	; 0x38
 80013a4:	2201      	movs	r2, #1
 80013a6:	54ea      	strb	r2, [r5, r3]
 80013a8:	0030      	movs	r0, r6
 80013aa:	f005 f8e1 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80013ae:	2800      	cmp	r0, #0
 80013b0:	d002      	beq.n	80013b8 <initRSS+0x28c>
 80013b2:	236a      	movs	r3, #106	; 0x6a
 80013b4:	2201      	movs	r2, #1
 80013b6:	54ea      	strb	r2, [r5, r3]
 80013b8:	0030      	movs	r0, r6
 80013ba:	f005 f8d9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80013be:	2800      	cmp	r0, #0
 80013c0:	d003      	beq.n	80013ca <initRSS+0x29e>
 80013c2:	2296      	movs	r2, #150	; 0x96
 80013c4:	2370      	movs	r3, #112	; 0x70
 80013c6:	0152      	lsls	r2, r2, #5
 80013c8:	52ea      	strh	r2, [r5, r3]
 80013ca:	0030      	movs	r0, r6
 80013cc:	f005 f8d0 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d001      	beq.n	80013d8 <initRSS+0x2ac>
 80013d4:	4b41      	ldr	r3, [pc, #260]	; (80014dc <initRSS+0x3b0>)
 80013d6:	61eb      	str	r3, [r5, #28]
    envelope_config = acc_service_envelope_configuration_create();
 80013d8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80013da:	bc3c      	pop	{r2, r3, r4, r5}
 80013dc:	4690      	mov	r8, r2
 80013de:	4699      	mov	r9, r3
 80013e0:	46a2      	mov	sl, r4
 80013e2:	46ab      	mov	fp, r5
 80013e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    envelope_config = acc_service_envelope_configuration_create();
 80013e6:	63a0      	str	r0, [r4, #56]	; 0x38
		printf("envelope config creation fail");
 80013e8:	483d      	ldr	r0, [pc, #244]	; (80014e0 <initRSS+0x3b4>)
 80013ea:	f013 fc8b 	bl	8014d04 <__wrap_printf>
 80013ee:	e7f4      	b.n	80013da <initRSS+0x2ae>
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <initRSS+0x37c>)
 80013f4:	5c9a      	ldrb	r2, [r3, r2]
 80013f6:	2a01      	cmp	r2, #1
 80013f8:	d800      	bhi.n	80013fc <initRSS+0x2d0>
 80013fa:	e709      	b.n	8001210 <initRSS+0xe4>
 80013fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013fe:	4a39      	ldr	r2, [pc, #228]	; (80014e4 <initRSS+0x3b8>)
 8001400:	492a      	ldr	r1, [pc, #168]	; (80014ac <initRSS+0x380>)
 8001402:	2002      	movs	r0, #2
 8001404:	4798      	blx	r3
 8001406:	e6f3      	b.n	80011f0 <initRSS+0xc4>
 8001408:	222d      	movs	r2, #45	; 0x2d
 800140a:	3301      	adds	r3, #1
 800140c:	723b      	strb	r3, [r7, #8]
 800140e:	54a3      	strb	r3, [r4, r2]
 8001410:	e6db      	b.n	80011ca <initRSS+0x9e>
 8001412:	2254      	movs	r2, #84	; 0x54
 8001414:	4934      	ldr	r1, [pc, #208]	; (80014e8 <initRSS+0x3bc>)
 8001416:	32ff      	adds	r2, #255	; 0xff
 8001418:	2048      	movs	r0, #72	; 0x48
 800141a:	f004 fde9 	bl	8005ff0 <acc_rss_integration_mem_alloc_debug>
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <initRSS+0x3c0>)
 8001420:	469b      	mov	fp, r3
 8001422:	6018      	str	r0, [r3, #0]
 8001424:	2800      	cmp	r0, #0
 8001426:	d11a      	bne.n	800145e <initRSS+0x332>
 8001428:	e021      	b.n	800146e <initRSS+0x342>
 800142a:	4652      	mov	r2, sl
 800142c:	2348      	movs	r3, #72	; 0x48
 800142e:	4353      	muls	r3, r2
 8001430:	465a      	mov	r2, fp
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	4690      	mov	r8, r2
 8001438:	4498      	add	r8, r3
 800143a:	2244      	movs	r2, #68	; 0x44
 800143c:	4640      	mov	r0, r8
 800143e:	f011 fc0d 	bl	8012c5c <memset>
 8001442:	2300      	movs	r3, #0
 8001444:	4642      	mov	r2, r8
 8001446:	2141      	movs	r1, #65	; 0x41
 8001448:	5453      	strb	r3, [r2, r1]
 800144a:	3901      	subs	r1, #1
 800144c:	5453      	strb	r3, [r2, r1]
 800144e:	4641      	mov	r1, r8
 8001450:	2242      	movs	r2, #66	; 0x42
 8001452:	548b      	strb	r3, [r1, r2]
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <initRSS+0x3c4>)
 8001456:	644b      	str	r3, [r1, #68]	; 0x44
 8001458:	2301      	movs	r3, #1
 800145a:	469c      	mov	ip, r3
 800145c:	44e2      	add	sl, ip
 800145e:	464b      	mov	r3, r9
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	459a      	cmp	sl, r3
 8001464:	d3e1      	bcc.n	800142a <initRSS+0x2fe>
 8001466:	232e      	movs	r3, #46	; 0x2e
 8001468:	2201      	movs	r2, #1
 800146a:	54e2      	strb	r2, [r4, r3]
 800146c:	e6b3      	b.n	80011d6 <initRSS+0xaa>
 800146e:	464b      	mov	r3, r9
 8001470:	4a20      	ldr	r2, [pc, #128]	; (80014f4 <initRSS+0x3c8>)
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <initRSS+0x380>)
 8001476:	4798      	blx	r3
 8001478:	e6ba      	b.n	80011f0 <initRSS+0xc4>
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	0801bc94 	.word	0x0801bc94
 8001480:	0801be44 	.word	0x0801be44
 8001484:	0801be50 	.word	0x0801be50
 8001488:	0801be5c 	.word	0x0801be5c
 800148c:	0801bcb8 	.word	0x0801bcb8
 8001490:	0801bccc 	.word	0x0801bccc
 8001494:	0801be6c 	.word	0x0801be6c
 8001498:	0801be8c 	.word	0x0801be8c
 800149c:	2000008c 	.word	0x2000008c
 80014a0:	080154f8 	.word	0x080154f8
 80014a4:	2000010c 	.word	0x2000010c
 80014a8:	200002b8 	.word	0x200002b8
 80014ac:	0801befc 	.word	0x0801befc
 80014b0:	0801bedc 	.word	0x0801bedc
 80014b4:	0801bdb0 	.word	0x0801bdb0
 80014b8:	0801bf40 	.word	0x0801bf40
 80014bc:	0801bf74 	.word	0x0801bf74
 80014c0:	acc09dd7 	.word	0xacc09dd7
 80014c4:	080004c3 	.word	0x080004c3
 80014c8:	08001e7b 	.word	0x08001e7b
 80014cc:	3e4ccccd 	.word	0x3e4ccccd
 80014d0:	3ecccccd 	.word	0x3ecccccd
 80014d4:	3dcccccd 	.word	0x3dcccccd
 80014d8:	3e99999a 	.word	0x3e99999a
 80014dc:	0800561d 	.word	0x0800561d
 80014e0:	0801bf98 	.word	0x0801bf98
 80014e4:	0801bf18 	.word	0x0801bf18
 80014e8:	0801beac 	.word	0x0801beac
 80014ec:	200004b8 	.word	0x200004b8
 80014f0:	ff800000 	.word	0xff800000
 80014f4:	0801bf00 	.word	0x0801bf00
		ERR_PRINTLN("far sparse config creation fail");
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <initRSS+0x400>)
 80014fa:	f013 fc03 	bl	8014d04 <__wrap_printf>
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <initRSS+0x404>)
 8001500:	f013 fc00 	bl	8014d04 <__wrap_printf>
 8001504:	22b4      	movs	r2, #180	; 0xb4
 8001506:	0029      	movs	r1, r5
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	0030      	movs	r0, r6
 800150c:	f013 fbfa 	bl	8014d04 <__wrap_printf>
 8001510:	e68c      	b.n	800122c <initRSS+0x100>
		ERR_PRINTLN("sparse config creation fail");
 8001512:	4806      	ldr	r0, [pc, #24]	; (800152c <initRSS+0x400>)
 8001514:	f013 fbf6 	bl	8014d04 <__wrap_printf>
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <initRSS+0x408>)
 800151a:	f013 fbf3 	bl	8014d04 <__wrap_printf>
 800151e:	2262      	movs	r2, #98	; 0x62
 8001520:	0029      	movs	r1, r5
 8001522:	32ff      	adds	r2, #255	; 0xff
 8001524:	0030      	movs	r0, r6
 8001526:	f013 fbed 	bl	8014d04 <__wrap_printf>
 800152a:	e679      	b.n	8001220 <initRSS+0xf4>
 800152c:	0801bdb0 	.word	0x0801bdb0
 8001530:	0801bf54 	.word	0x0801bf54
 8001534:	0801bf58 	.word	0x0801bf58

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(uint32_t baudrate)
{
 8001538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153a:	46c6      	mov	lr, r8
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4c29      	ldr	r4, [pc, #164]	; (80015e4 <MX_USART1_UART_Init+0xac>)
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_USART1_UART_Init+0xb0>)
{
 8001540:	b500      	push	{lr}
  huart1.Instance = USART1;
 8001542:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = baudrate;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001544:	230c      	movs	r3, #12
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8001546:	0026      	movs	r6, r4
 8001548:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800154a:	23c0      	movs	r3, #192	; 0xc0
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154c:	2500      	movs	r5, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800154e:	009b      	lsls	r3, r3, #2
  huart1.Init.BaudRate = baudrate;
 8001550:	6060      	str	r0, [r4, #4]
 8001552:	367c      	adds	r6, #124	; 0x7c
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001554:	0020      	movs	r0, r4
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001556:	61a3      	str	r3, [r4, #24]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001558:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800155a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155c:	6125      	str	r5, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155e:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001560:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001562:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001566:	f00a f9b5 	bl	800b8d4 <HAL_UART_Init.constprop.103>
 800156a:	7833      	ldrb	r3, [r6, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d017      	beq.n	80015a0 <MX_USART1_UART_Init+0x68>

  huart->gState = HAL_UART_STATE_BUSY;
 8001570:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8001572:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8001574:	1d27      	adds	r7, r4, #4
 8001576:	67fb      	str	r3, [r7, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001578:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 800157a:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800157c:	681a      	ldr	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800157e:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8001580:	4690      	mov	r8, r2
  __HAL_UART_DISABLE(huart);
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	438a      	bics	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	00d2      	lsls	r2, r2, #3
 800158c:	08d2      	lsrs	r2, r2, #3
 800158e:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8001590:	f009 fc40 	bl	800ae14 <UARTEx_SetNbDataToProcess.lto_priv.680>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8001594:	4642      	mov	r2, r8
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800159a:	2320      	movs	r3, #32

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800159c:	7035      	strb	r5, [r6, #0]
  huart->gState = HAL_UART_STATE_READY;
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80015a0:	0025      	movs	r5, r4
 80015a2:	357c      	adds	r5, #124	; 0x7c
 80015a4:	782b      	ldrb	r3, [r5, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d016      	beq.n	80015d8 <MX_USART1_UART_Init+0xa0>

  huart->gState = HAL_UART_STATE_BUSY;
 80015aa:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80015ac:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80015ae:	1d26      	adds	r6, r4, #4
 80015b0:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80015b2:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 80015b4:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80015b6:	681f      	ldr	r7, [r3, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80015b8:	681a      	ldr	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80015ba:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80015bc:	438a      	bics	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <MX_USART1_UART_Init+0xb4>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80015c8:	f009 fc24 	bl	800ae14 <UARTEx_SetNbDataToProcess.lto_priv.680>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	601f      	str	r7, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80015d0:	2320      	movs	r3, #32
 80015d2:	67f3      	str	r3, [r6, #124]	; 0x7c

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80015d4:	2300      	movs	r3, #0
 80015d6:	702b      	strb	r3, [r5, #0]
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015d8:	0020      	movs	r0, r4
 80015da:	f009 fc4f 	bl	800ae7c <HAL_UARTEx_DisableFifoMode>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015de:	bc04      	pop	{r2}
 80015e0:	4690      	mov	r8, r2
 80015e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e4:	200005a4 	.word	0x200005a4
 80015e8:	40013800 	.word	0x40013800
 80015ec:	f1ffffff 	.word	0xf1ffffff

080015f0 <changeUART1baud>:
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	2224      	movs	r2, #36	; 0x24

  __HAL_UART_DISABLE(huart);
 80015f4:	2101      	movs	r1, #1
void changeUART1baud(uint32_t baudrate){
 80015f6:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80015f8:	4c23      	ldr	r4, [pc, #140]	; (8001688 <changeUART1baud+0x98>)
 80015fa:	0005      	movs	r5, r0
 80015fc:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	438a      	bics	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800160a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800160c:	609a      	str	r2, [r3, #8]
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 800160e:	4a1f      	ldr	r2, [pc, #124]	; (800168c <changeUART1baud+0x9c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01c      	beq.n	800164e <changeUART1baud+0x5e>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8001614:	4a1e      	ldr	r2, [pc, #120]	; (8001690 <changeUART1baud+0xa0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d010      	beq.n	800163c <changeUART1baud+0x4c>
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161a:	2300      	movs	r3, #0
 800161c:	2288      	movs	r2, #136	; 0x88
 800161e:	50a3      	str	r3, [r4, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8001620:	3a08      	subs	r2, #8
 8001622:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8001624:	3204      	adds	r2, #4
 8001626:	50a3      	str	r3, [r4, r2]
	MX_USART1_UART_Init(baudrate);
 8001628:	0028      	movs	r0, r5

  __HAL_UNLOCK(huart);
 800162a:	3a08      	subs	r2, #8
 800162c:	54a3      	strb	r3, [r4, r2]
 800162e:	f7ff ff83 	bl	8001538 <MX_USART1_UART_Init>
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8001632:	2101      	movs	r1, #1
 8001634:	0020      	movs	r0, r4
 8001636:	f009 f999 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
}
 800163a:	bd70      	pop	{r4, r5, r6, pc}
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <changeUART1baud+0xa4>)
 800163e:	4916      	ldr	r1, [pc, #88]	; (8001698 <changeUART1baud+0xa8>)
 8001640:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001642:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8001644:	400b      	ands	r3, r1
 8001646:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001648:	f009 f82c 	bl	800a6a4 <HAL_GPIO_DeInit.constprop.151>
 800164c:	e7e5      	b.n	800161a <changeUART1baud+0x2a>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800164e:	20f0      	movs	r0, #240	; 0xf0
    __HAL_RCC_USART1_CLK_DISABLE();
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <changeUART1baud+0xa4>)
 8001652:	4912      	ldr	r1, [pc, #72]	; (800169c <changeUART1baud+0xac>)
 8001654:	6c13      	ldr	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8001656:	0140      	lsls	r0, r0, #5
    __HAL_RCC_USART1_CLK_DISABLE();
 8001658:	400b      	ands	r3, r1
 800165a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 800165c:	f009 f822 	bl	800a6a4 <HAL_GPIO_DeInit.constprop.151>
    HAL_DMA_DeInit(huart->hdmatx);
 8001660:	6f60      	ldr	r0, [r4, #116]	; 0x74
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001662:	2800      	cmp	r0, #0
 8001664:	d001      	beq.n	800166a <changeUART1baud+0x7a>
 8001666:	f009 fd7d 	bl	800b164 <HAL_DMA_DeInit.part.1>
    HAL_DMA_DeInit(huart->hdmarx);
 800166a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800166c:	2800      	cmp	r0, #0
 800166e:	d001      	beq.n	8001674 <changeUART1baud+0x84>
 8001670:	f009 fd78 	bl	800b164 <HAL_DMA_DeInit.part.1>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <changeUART1baud+0xb0>)
 800167a:	0509      	lsls	r1, r1, #20
 800167c:	50d1      	str	r1, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800167e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001682:	f3bf 8f6f 	isb	sy
 8001686:	e7c8      	b.n	800161a <changeUART1baud+0x2a>
 8001688:	200005a4 	.word	0x200005a4
 800168c:	40013800 	.word	0x40013800
 8001690:	40004400 	.word	0x40004400
 8001694:	40021000 	.word	0x40021000
 8001698:	fffdffff 	.word	0xfffdffff
 800169c:	ffffbfff 	.word	0xffffbfff
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <SystemClock_Config>:
{
 80016a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016a6:	4eb5      	ldr	r6, [pc, #724]	; (800197c <SystemClock_Config+0x2d8>)
 80016a8:	4ab5      	ldr	r2, [pc, #724]	; (8001980 <SystemClock_Config+0x2dc>)
 80016aa:	6833      	ldr	r3, [r6, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80016ac:	2006      	movs	r0, #6
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016ae:	401a      	ands	r2, r3
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4313      	orrs	r3, r2
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80016b6:	4fb3      	ldr	r7, [pc, #716]	; (8001984 <SystemClock_Config+0x2e0>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016b8:	6033      	str	r3, [r6, #0]
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	49b2      	ldr	r1, [pc, #712]	; (8001988 <SystemClock_Config+0x2e4>)
 80016be:	4358      	muls	r0, r3
 80016c0:	f00d fa38 	bl	800eb34 <__udivsi3>

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c4:	2380      	movs	r3, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80016c6:	3001      	adds	r0, #1
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	6972      	ldr	r2, [r6, #20]
 80016cc:	421a      	tst	r2, r3
 80016ce:	d000      	beq.n	80016d2 <SystemClock_Config+0x2e>
 80016d0:	e086      	b.n	80017e0 <SystemClock_Config+0x13c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d2:	2338      	movs	r3, #56	; 0x38
 80016d4:	4cad      	ldr	r4, [pc, #692]	; (800198c <SystemClock_Config+0x2e8>)
 80016d6:	4dae      	ldr	r5, [pc, #696]	; (8001990 <SystemClock_Config+0x2ec>)
 80016d8:	68a2      	ldr	r2, [r4, #8]
 80016da:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016dc:	68e2      	ldr	r2, [r4, #12]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d000      	beq.n	80016e4 <SystemClock_Config+0x40>
 80016e2:	e082      	b.n	80017ea <SystemClock_Config+0x146>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016e4:	2103      	movs	r1, #3
 80016e6:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016e8:	2a02      	cmp	r2, #2
 80016ea:	d000      	beq.n	80016ee <SystemClock_Config+0x4a>
 80016ec:	e080      	b.n	80017f0 <SystemClock_Config+0x14c>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ee:	6822      	ldr	r2, [r4, #0]
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	49a8      	ldr	r1, [pc, #672]	; (8001994 <SystemClock_Config+0x2f0>)
 80016f2:	6862      	ldr	r2, [r4, #4]
 80016f4:	4011      	ands	r1, r2
 80016f6:	2280      	movs	r2, #128	; 0x80
 80016f8:	01d2      	lsls	r2, r2, #7
 80016fa:	430a      	orrs	r2, r1
 80016fc:	6062      	str	r2, [r4, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <SystemClock_Config+0x72>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	4aa4      	ldr	r2, [pc, #656]	; (8001998 <SystemClock_Config+0x2f4>)
 8001706:	4013      	ands	r3, r2
 8001708:	6023      	str	r3, [r4, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	4aa3      	ldr	r2, [pc, #652]	; (800199c <SystemClock_Config+0x2f8>)
 800170e:	049b      	lsls	r3, r3, #18
 8001710:	0f5b      	lsrs	r3, r3, #29
 8001712:	40da      	lsrs	r2, r3
 8001714:	603a      	str	r2, [r7, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001716:	4ba2      	ldr	r3, [pc, #648]	; (80019a0 <SystemClock_Config+0x2fc>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f009 fcf5 	bl	800b108 <HAL_InitTick>
 800171e:	2800      	cmp	r0, #0
 8001720:	d07c      	beq.n	800181c <SystemClock_Config+0x178>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001722:	2207      	movs	r2, #7
 8001724:	4b9f      	ldr	r3, [pc, #636]	; (80019a4 <SystemClock_Config+0x300>)
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	4011      	ands	r1, r2
 800172a:	2901      	cmp	r1, #1
 800172c:	d80c      	bhi.n	8001748 <SystemClock_Config+0xa4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	2102      	movs	r1, #2
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	4390      	bics	r0, r2
 8001734:	4301      	orrs	r1, r0
 8001736:	6019      	str	r1, [r3, #0]
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	499b      	ldr	r1, [pc, #620]	; (80019a8 <SystemClock_Config+0x304>)
 800173a:	6828      	ldr	r0, [r5, #0]
 800173c:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	4011      	ands	r1, r2
 8001742:	2902      	cmp	r1, #2
 8001744:	d000      	beq.n	8001748 <SystemClock_Config+0xa4>
 8001746:	e0b4      	b.n	80018b2 <SystemClock_Config+0x20e>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001748:	22e0      	movs	r2, #224	; 0xe0
 800174a:	68a1      	ldr	r1, [r4, #8]
 800174c:	01d2      	lsls	r2, r2, #7
 800174e:	430a      	orrs	r2, r1
 8001750:	60a2      	str	r2, [r4, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001752:	68a2      	ldr	r2, [r4, #8]
 8001754:	4995      	ldr	r1, [pc, #596]	; (80019ac <SystemClock_Config+0x308>)
 8001756:	400a      	ands	r2, r1
 8001758:	60a2      	str	r2, [r4, #8]
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175a:	6822      	ldr	r2, [r4, #0]
 800175c:	0192      	lsls	r2, r2, #6
 800175e:	d500      	bpl.n	8001762 <SystemClock_Config+0xbe>
 8001760:	e0ad      	b.n	80018be <SystemClock_Config+0x21a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001766:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8001768:	2100      	movs	r1, #0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4213      	tst	r3, r2
 800176c:	d107      	bne.n	800177e <SystemClock_Config+0xda>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      pwrclkchanged = SET;
 8001770:	3101      	adds	r1, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4313      	orrs	r3, r2
 8001774:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001776:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001778:	4013      	ands	r3, r2
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	9b01      	ldr	r3, [sp, #4]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	6832      	ldr	r2, [r6, #0]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	431a      	orrs	r2, r3
 8001786:	6032      	str	r2, [r6, #0]
 8001788:	6828      	ldr	r0, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800178a:	6832      	ldr	r2, [r6, #0]
 800178c:	421a      	tst	r2, r3
 800178e:	d100      	bne.n	8001792 <SystemClock_Config+0xee>
 8001790:	e0d5      	b.n	800193e <SystemClock_Config+0x29a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001792:	22c0      	movs	r2, #192	; 0xc0
 8001794:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800179a:	d010      	beq.n	80017be <SystemClock_Config+0x11a>
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00c      	beq.n	80017be <SystemClock_Config+0x11a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017a6:	4a82      	ldr	r2, [pc, #520]	; (80019b0 <SystemClock_Config+0x30c>)
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80017a8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017aa:	4013      	ands	r3, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	0252      	lsls	r2, r2, #9
 80017b0:	4302      	orrs	r2, r0
 80017b2:	65e2      	str	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80017b6:	487f      	ldr	r0, [pc, #508]	; (80019b4 <SystemClock_Config+0x310>)
 80017b8:	4002      	ands	r2, r0
 80017ba:	65e2      	str	r2, [r4, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80017bc:	65e3      	str	r3, [r4, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017be:	07db      	lsls	r3, r3, #31
 80017c0:	d506      	bpl.n	80017d0 <SystemClock_Config+0x12c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	2202      	movs	r2, #2
 80017c4:	6828      	ldr	r0, [r5, #0]
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c6:	4e78      	ldr	r6, [pc, #480]	; (80019a8 <SystemClock_Config+0x304>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017ca:	4213      	tst	r3, r2
 80017cc:	d100      	bne.n	80017d0 <SystemClock_Config+0x12c>
 80017ce:	e0ce      	b.n	800196e <SystemClock_Config+0x2ca>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <SystemClock_Config+0x30c>)
 80017d4:	401a      	ands	r2, r3
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4313      	orrs	r3, r2
 80017dc:	65e3      	str	r3, [r4, #92]	; 0x5c
 80017de:	e0b3      	b.n	8001948 <SystemClock_Config+0x2a4>
    {
      if(wait_loop_index != 0U)
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d100      	bne.n	80017e6 <SystemClock_Config+0x142>
 80017e4:	e775      	b.n	80016d2 <SystemClock_Config+0x2e>
      {
        wait_loop_index--;
 80017e6:	3801      	subs	r0, #1
 80017e8:	e76f      	b.n	80016ca <SystemClock_Config+0x26>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <SystemClock_Config+0x14c>
 80017ee:	e77e      	b.n	80016ee <SystemClock_Config+0x4a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <SystemClock_Config+0x2f4>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_HSI_ENABLE();
 8001802:	6023      	str	r3, [r4, #0]
 8001804:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001806:	00d2      	lsls	r2, r2, #3
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	4213      	tst	r3, r2
 800180c:	d037      	beq.n	800187e <SystemClock_Config+0x1da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	6863      	ldr	r3, [r4, #4]
 8001810:	4a60      	ldr	r2, [pc, #384]	; (8001994 <SystemClock_Config+0x2f0>)
 8001812:	401a      	ands	r2, r3
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	01db      	lsls	r3, r3, #7
 8001818:	4313      	orrs	r3, r2
 800181a:	6063      	str	r3, [r4, #4]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800181c:	2238      	movs	r2, #56	; 0x38
 800181e:	68a3      	ldr	r3, [r4, #8]
 8001820:	4013      	ands	r3, r2
 8001822:	2b18      	cmp	r3, #24
 8001824:	d130      	bne.n	8001888 <SystemClock_Config+0x1e4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001826:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001828:	2238      	movs	r2, #56	; 0x38
 800182a:	68a3      	ldr	r3, [r4, #8]
 800182c:	4013      	ands	r3, r2
 800182e:	2b10      	cmp	r3, #16
 8001830:	d03d      	beq.n	80018ae <SystemClock_Config+0x20a>
        __HAL_RCC_PLL_DISABLE();
 8001832:	6823      	ldr	r3, [r4, #0]
 8001834:	4a60      	ldr	r2, [pc, #384]	; (80019b8 <SystemClock_Config+0x314>)
 8001836:	4013      	ands	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001838:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800183a:	6023      	str	r3, [r4, #0]
 800183c:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183e:	0492      	lsls	r2, r2, #18
 8001840:	6823      	ldr	r3, [r4, #0]
 8001842:	4213      	tst	r3, r2
 8001844:	d12e      	bne.n	80018a4 <SystemClock_Config+0x200>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001846:	68e3      	ldr	r3, [r4, #12]
 8001848:	4a5c      	ldr	r2, [pc, #368]	; (80019bc <SystemClock_Config+0x318>)
 800184a:	401a      	ands	r2, r3
 800184c:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <SystemClock_Config+0x31c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	045b      	lsls	r3, r3, #17
 8001858:	4313      	orrs	r3, r2
 800185a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	68e2      	ldr	r2, [r4, #12]
 8001860:	055b      	lsls	r3, r3, #21
 8001862:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001864:	2280      	movs	r2, #128	; 0x80
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001866:	60e3      	str	r3, [r4, #12]
 8001868:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	0492      	lsls	r2, r2, #18
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	4213      	tst	r3, r2
 8001870:	d000      	beq.n	8001874 <SystemClock_Config+0x1d0>
 8001872:	e756      	b.n	8001722 <SystemClock_Config+0x7e>
 8001874:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	2b02      	cmp	r3, #2
 800187a:	d9f7      	bls.n	800186c <SystemClock_Config+0x1c8>
 800187c:	e751      	b.n	8001722 <SystemClock_Config+0x7e>
 800187e:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001880:	1a5b      	subs	r3, r3, r1
 8001882:	2b02      	cmp	r3, #2
 8001884:	d9c0      	bls.n	8001808 <SystemClock_Config+0x164>
 8001886:	e74c      	b.n	8001722 <SystemClock_Config+0x7e>
        __HAL_RCC_LSI_ENABLE();
 8001888:	2301      	movs	r3, #1
 800188a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800188c:	4313      	orrs	r3, r2
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188e:	2202      	movs	r2, #2
        __HAL_RCC_LSI_ENABLE();
 8001890:	6623      	str	r3, [r4, #96]	; 0x60
 8001892:	6829      	ldr	r1, [r5, #0]
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001894:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001896:	4213      	tst	r3, r2
 8001898:	d1c6      	bne.n	8001828 <SystemClock_Config+0x184>
 800189a:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	1a5b      	subs	r3, r3, r1
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d9f8      	bls.n	8001894 <SystemClock_Config+0x1f0>
 80018a2:	e73e      	b.n	8001722 <SystemClock_Config+0x7e>
 80018a4:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	1a5b      	subs	r3, r3, r1
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d9c9      	bls.n	8001840 <SystemClock_Config+0x19c>
 80018ac:	e739      	b.n	8001722 <SystemClock_Config+0x7e>
        temp_pllckcfg = RCC->PLLCFGR;
 80018ae:	68e3      	ldr	r3, [r4, #12]
 80018b0:	e737      	b.n	8001722 <SystemClock_Config+0x7e>
 80018b2:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	1a09      	subs	r1, r1, r0
 80018b6:	4561      	cmp	r1, ip
 80018b8:	d800      	bhi.n	80018bc <SystemClock_Config+0x218>
 80018ba:	e740      	b.n	800173e <SystemClock_Config+0x9a>
 80018bc:	e751      	b.n	8001762 <SystemClock_Config+0xbe>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018be:	2107      	movs	r1, #7
 80018c0:	68a2      	ldr	r2, [r4, #8]
 80018c2:	438a      	bics	r2, r1
 80018c4:	0011      	movs	r1, r2
 80018c6:	2202      	movs	r2, #2
 80018c8:	430a      	orrs	r2, r1
 80018ca:	60a2      	str	r2, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <SystemClock_Config+0x304>)
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	2138      	movs	r1, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	4694      	mov	ip, r2
 80018d2:	6828      	ldr	r0, [r5, #0]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d4:	68a2      	ldr	r2, [r4, #8]
 80018d6:	400a      	ands	r2, r1
 80018d8:	2a10      	cmp	r2, #16
 80018da:	d11a      	bne.n	8001912 <SystemClock_Config+0x26e>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018dc:	6819      	ldr	r1, [r3, #0]
 80018de:	3a09      	subs	r2, #9
 80018e0:	4011      	ands	r1, r2
 80018e2:	2902      	cmp	r1, #2
 80018e4:	d81a      	bhi.n	800191c <SystemClock_Config+0x278>

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e6:	68a3      	ldr	r3, [r4, #8]
 80018e8:	4a36      	ldr	r2, [pc, #216]	; (80019c4 <SystemClock_Config+0x320>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ee:	f009 feb9 	bl	800b664 <HAL_RCC_GetSysClockFreq>
 80018f2:	68a3      	ldr	r3, [r4, #8]
 80018f4:	4a34      	ldr	r2, [pc, #208]	; (80019c8 <SystemClock_Config+0x324>)
 80018f6:	051b      	lsls	r3, r3, #20
 80018f8:	0f1b      	lsrs	r3, r3, #28
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	221f      	movs	r2, #31
 8001900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001902:	4013      	ands	r3, r2
 8001904:	40d8      	lsrs	r0, r3

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <SystemClock_Config+0x2fc>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001908:	6038      	str	r0, [r7, #0]
  return HAL_InitTick(uwTickPrio);
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f009 fbfc 	bl	800b108 <HAL_InitTick>
 8001910:	e727      	b.n	8001762 <SystemClock_Config+0xbe>
 8001912:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	1a12      	subs	r2, r2, r0
 8001916:	4562      	cmp	r2, ip
 8001918:	d9dc      	bls.n	80018d4 <SystemClock_Config+0x230>
 800191a:	e722      	b.n	8001762 <SystemClock_Config+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191c:	2102      	movs	r1, #2
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	4390      	bics	r0, r2
 8001922:	4301      	orrs	r1, r0
 8001924:	6019      	str	r1, [r3, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001926:	4920      	ldr	r1, [pc, #128]	; (80019a8 <SystemClock_Config+0x304>)
 8001928:	6828      	ldr	r0, [r5, #0]
 800192a:	468c      	mov	ip, r1
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	4011      	ands	r1, r2
 8001930:	2902      	cmp	r1, #2
 8001932:	d0d8      	beq.n	80018e6 <SystemClock_Config+0x242>
 8001934:	6829      	ldr	r1, [r5, #0]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	1a09      	subs	r1, r1, r0
 8001938:	4561      	cmp	r1, ip
 800193a:	d9f7      	bls.n	800192c <SystemClock_Config+0x288>
 800193c:	e711      	b.n	8001762 <SystemClock_Config+0xbe>
 800193e:	682a      	ldr	r2, [r5, #0]
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	1a12      	subs	r2, r2, r0
 8001942:	2a02      	cmp	r2, #2
 8001944:	d800      	bhi.n	8001948 <SystemClock_Config+0x2a4>
 8001946:	e720      	b.n	800178a <SystemClock_Config+0xe6>
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001948:	2901      	cmp	r1, #1
 800194a:	d103      	bne.n	8001954 <SystemClock_Config+0x2b0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <SystemClock_Config+0x328>)
 8001950:	4013      	ands	r3, r2
 8001952:	63e3      	str	r3, [r4, #60]	; 0x3c
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001954:	2203      	movs	r2, #3
 8001956:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001958:	4393      	bics	r3, r2
 800195a:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800195c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800195e:	3209      	adds	r2, #9
 8001960:	4393      	bics	r3, r2
 8001962:	6563      	str	r3, [r4, #84]	; 0x54
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001964:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <SystemClock_Config+0x32c>)
 8001968:	4013      	ands	r3, r2
 800196a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800196c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800196e:	682b      	ldr	r3, [r5, #0]
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	1a1b      	subs	r3, r3, r0
 8001972:	42b3      	cmp	r3, r6
 8001974:	d800      	bhi.n	8001978 <SystemClock_Config+0x2d4>
 8001976:	e727      	b.n	80017c8 <SystemClock_Config+0x124>
 8001978:	e7e6      	b.n	8001948 <SystemClock_Config+0x2a4>
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	40007000 	.word	0x40007000
 8001980:	fffff9ff 	.word	0xfffff9ff
 8001984:	20000000 	.word	0x20000000
 8001988:	000f4240 	.word	0x000f4240
 800198c:	40021000 	.word	0x40021000
 8001990:	200002b4 	.word	0x200002b4
 8001994:	ffff80ff 	.word	0xffff80ff
 8001998:	ffffc7ff 	.word	0xffffc7ff
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	20000004 	.word	0x20000004
 80019a4:	40022000 	.word	0x40022000
 80019a8:	00001388 	.word	0x00001388
 80019ac:	fffff0ff 	.word	0xfffff0ff
 80019b0:	fffffcff 	.word	0xfffffcff
 80019b4:	fffeffff 	.word	0xfffeffff
 80019b8:	feffffff 	.word	0xfeffffff
 80019bc:	11c1808c 	.word	0x11c1808c
 80019c0:	22020802 	.word	0x22020802
 80019c4:	ffff8fff 	.word	0xffff8fff
 80019c8:	080154f8 	.word	0x080154f8
 80019cc:	efffffff 	.word	0xefffffff
 80019d0:	ffffcfff 	.word	0xffffcfff

080019d4 <acc_integration_log>:

#define LOG_FORMAT "%02u:%02u:%02u.%03u (%c) (%s) %s\n"


void acc_integration_log(acc_log_level_t level, const char *module, const char *format, ...)
{
 80019d4:	b40c      	push	{r2, r3}
 80019d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019d8:	464f      	mov	r7, r9
 80019da:	4646      	mov	r6, r8
 80019dc:	46d6      	mov	lr, sl
 80019de:	b5c0      	push	{r6, r7, lr}
 80019e0:	b0ac      	sub	sp, #176	; 0xb0
 80019e2:	ab34      	add	r3, sp, #208	; 0xd0
 80019e4:	cb04      	ldmia	r3!, {r2}
	char    log_buffer[LOG_BUFFER_MAX_SIZE];
	va_list ap;

	va_start(ap, format);

	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80019e6:	ad06      	add	r5, sp, #24
{
 80019e8:	0006      	movs	r6, r0
 80019ea:	4689      	mov	r9, r1
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80019ec:	0028      	movs	r0, r5
 80019ee:	2196      	movs	r1, #150	; 0x96
	va_start(ap, format);
 80019f0:	9305      	str	r3, [sp, #20]
	int ret = vsnprintf(log_buffer, LOG_BUFFER_MAX_SIZE, format, ap);
 80019f2:	f013 f9a9 	bl	8014d48 <__wrap_vsnprintf>
	if (ret >= LOG_BUFFER_MAX_SIZE)
 80019f6:	2895      	cmp	r0, #149	; 0x95
 80019f8:	dd06      	ble.n	8001a08 <acc_integration_log+0x34>
	{
		log_buffer[LOG_BUFFER_MAX_SIZE - 4] = '.';
 80019fa:	23aa      	movs	r3, #170	; 0xaa
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <acc_integration_log+0xac>)
 80019fe:	446b      	add	r3, sp
 8001a00:	801a      	strh	r2, [r3, #0]
		log_buffer[LOG_BUFFER_MAX_SIZE - 3] = '.';
 8001a02:	222e      	movs	r2, #46	; 0x2e
 8001a04:	ab2b      	add	r3, sp, #172	; 0xac
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <acc_integration_log+0xb0>)

	uint32_t time_ms = acc_integration_get_time();
	char     level_ch;

	unsigned int timestamp    = time_ms;
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001a0a:	491f      	ldr	r1, [pc, #124]	; (8001a88 <acc_integration_log+0xb4>)
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	0020      	movs	r0, r4
 8001a10:	f00d f890 	bl	800eb34 <__udivsi3>
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001a14:	491d      	ldr	r1, [pc, #116]	; (8001a8c <acc_integration_log+0xb8>)
	unsigned int hours        = timestamp / 1000 / 60 / 60;
 8001a16:	0007      	movs	r7, r0
	unsigned int minutes      = timestamp / 1000 / 60 % 60;
 8001a18:	0020      	movs	r0, r4
 8001a1a:	f00d f88b 	bl	800eb34 <__udivsi3>
 8001a1e:	213c      	movs	r1, #60	; 0x3c
 8001a20:	f00d f90e 	bl	800ec40 <__aeabi_uidivmod>
 8001a24:	4688      	mov	r8, r1
	unsigned int seconds      = timestamp / 1000 % 60;
 8001a26:	21fa      	movs	r1, #250	; 0xfa
 8001a28:	0020      	movs	r0, r4
 8001a2a:	0089      	lsls	r1, r1, #2
 8001a2c:	f00d f882 	bl	800eb34 <__udivsi3>
 8001a30:	213c      	movs	r1, #60	; 0x3c
 8001a32:	f00d f905 	bl	800ec40 <__aeabi_uidivmod>
 8001a36:	468a      	mov	sl, r1
	unsigned int milliseconds = timestamp % 1000;
 8001a38:	21fa      	movs	r1, #250	; 0xfa
 8001a3a:	0020      	movs	r0, r4
 8001a3c:	0089      	lsls	r1, r1, #2
 8001a3e:	f00d f8ff 	bl	800ec40 <__aeabi_uidivmod>

	level_ch = (level <= ACC_LOG_LEVEL_DEBUG) ? "EWIVD"[level] : '?';
 8001a42:	233f      	movs	r3, #63	; 0x3f
 8001a44:	2e04      	cmp	r6, #4
 8001a46:	d801      	bhi.n	8001a4c <acc_integration_log+0x78>
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <acc_integration_log+0xbc>)
 8001a4a:	5d9b      	ldrb	r3, [r3, r6]

	printf(LOG_FORMAT, hours, minutes, seconds, milliseconds, level_ch, module, log_buffer);
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9202      	str	r2, [sp, #8]
 8001a52:	9100      	str	r1, [sp, #0]
 8001a54:	4653      	mov	r3, sl
 8001a56:	4642      	mov	r2, r8
 8001a58:	0039      	movs	r1, r7
 8001a5a:	9503      	str	r5, [sp, #12]
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <acc_integration_log+0xc0>)
 8001a5e:	f013 f951 	bl	8014d04 <__wrap_printf>

	fflush(stdout);
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <acc_integration_log+0xc4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6898      	ldr	r0, [r3, #8]
 8001a68:	f010 ffea 	bl	8012a40 <fflush>

	va_end(ap);
}
 8001a6c:	b02c      	add	sp, #176	; 0xb0
 8001a6e:	bc1c      	pop	{r2, r3, r4}
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	46a2      	mov	sl, r4
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	bc08      	pop	{r3}
 8001a7a:	b002      	add	sp, #8
 8001a7c:	4718      	bx	r3
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	00002e2e 	.word	0x00002e2e
 8001a84:	200002b4 	.word	0x200002b4
 8001a88:	0036ee80 	.word	0x0036ee80
 8001a8c:	0000ea60 	.word	0x0000ea60
 8001a90:	0801bae5 	.word	0x0801bae5
 8001a94:	0801bac3 	.word	0x0801bac3
 8001a98:	20000008 	.word	0x20000008

08001a9c <acc_hal_integration_sensor_hibernate_exit>:
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a9c:	2280      	movs	r2, #128	; 0x80


static void acc_hal_integration_sensor_hibernate_exit(acc_sensor_id_t sensor_id)
{
 8001a9e:	b510      	push	{r4, lr}
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <acc_hal_integration_sensor_hibernate_exit+0x1c>)
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	619a      	str	r2, [r3, #24]
	(void)sensor_id;  // Ignore parameter sensor_id

	// Turn on sensor supplies VIO_1 and VIO_2
	HAL_GPIO_WritePin(PS_ENABLE_GPIO_Port, PS_ENABLE_Pin, GPIO_PIN_SET);

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_1_HIBERNATE_EXIT);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f7fe fc72 	bl	8000390 <pulse_hibernate_pin>

	acc_integration_sleep_us(ACC_WAIT_TIME_HIBERNATE_EXIT_MS * 1000);
 8001aac:	f008 fdd8 	bl	800a660 <acc_integration_sleep_us.constprop.154>

	pulse_hibernate_pin(ACC_NBR_CLOCK_CYCLES_REQUIRED_STEP_2_HIBERNATE_EXIT);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f7fe fc6d 	bl	8000390 <pulse_hibernate_pin>
}
 8001ab6:	bd10      	pop	{r4, pc}
 8001ab8:	50000400 	.word	0x50000400

08001abc <acc_hal_integration_sensor_power_off>:
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abc:	2201      	movs	r2, #1
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <acc_hal_integration_sensor_power_off+0x20>)
{
 8001ac0:	b510      	push	{r4, lr}
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac6:	22a0      	movs	r2, #160	; 0xa0
 8001ac8:	0049      	lsls	r1, r1, #1
 8001aca:	05d2      	lsls	r2, r2, #23
 8001acc:	6291      	str	r1, [r2, #40]	; 0x28
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
	acc_integration_sleep_us(2000);
 8001ad4:	f008 fdc4 	bl	800a660 <acc_integration_sleep_us.constprop.154>
}
 8001ad8:	bd10      	pop	{r4, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	50000400 	.word	0x50000400

08001ae0 <acc_hal_integration_sensor_power_on>:
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <acc_hal_integration_sensor_power_on+0x24>)
{
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae8:	32f1      	adds	r2, #241	; 0xf1
 8001aea:	32ff      	adds	r2, #255	; 0xff
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	22a0      	movs	r2, #160	; 0xa0
 8001af2:	0049      	lsls	r1, r1, #1
 8001af4:	05d2      	lsls	r2, r2, #23
 8001af6:	6191      	str	r1, [r2, #24]
 8001af8:	2201      	movs	r2, #1
 8001afa:	619a      	str	r2, [r3, #24]
	acc_integration_sleep_us(2000);
 8001afc:	f008 fdb0 	bl	800a660 <acc_integration_sleep_us.constprop.154>
}
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	50000400 	.word	0x50000400

08001b08 <acc_hal_integration_sensor_transfer>:
{
 8001b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0a:	4657      	mov	r7, sl
 8001b0c:	4645      	mov	r5, r8
 8001b0e:	46de      	mov	lr, fp
 8001b10:	464e      	mov	r6, r9

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b12:	4cbb      	ldr	r4, [pc, #748]	; (8001e00 <acc_hal_integration_sensor_transfer+0x2f8>)
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b14:	2001      	movs	r0, #1
 8001b16:	0023      	movs	r3, r4
 8001b18:	b5e0      	push	{r5, r6, r7, lr}
 8001b1a:	4fba      	ldr	r7, [pc, #744]	; (8001e04 <acc_hal_integration_sensor_transfer+0x2fc>)
 8001b1c:	335c      	adds	r3, #92	; 0x5c
 8001b1e:	62b8      	str	r0, [r7, #40]	; 0x28
 8001b20:	781d      	ldrb	r5, [r3, #0]
 8001b22:	b083      	sub	sp, #12
 8001b24:	9701      	str	r7, [sp, #4]
 8001b26:	4285      	cmp	r5, r0
 8001b28:	d100      	bne.n	8001b2c <acc_hal_integration_sensor_transfer+0x24>
 8001b2a:	e0f3      	b.n	8001d14 <acc_hal_integration_sensor_transfer+0x20c>
 8001b2c:	7018      	strb	r0, [r3, #0]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b2e:	0023      	movs	r3, r4
 8001b30:	4db5      	ldr	r5, [pc, #724]	; (8001e08 <acc_hal_integration_sensor_transfer+0x300>)
 8001b32:	335d      	adds	r3, #93	; 0x5d
 8001b34:	682e      	ldr	r6, [r5, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001b38:	6860      	ldr	r0, [r4, #4]
  tmp_state           = hspi->State;
 8001b3a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8001b3c:	4684      	mov	ip, r0
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d00b      	beq.n	8001b5a <acc_hal_integration_sensor_transfer+0x52>
 8001b42:	2082      	movs	r0, #130	; 0x82
 8001b44:	0040      	lsls	r0, r0, #1
 8001b46:	4584      	cmp	ip, r0
 8001b48:	d000      	beq.n	8001b4c <acc_hal_integration_sensor_transfer+0x44>
 8001b4a:	e0dc      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b4c:	68a0      	ldr	r0, [r4, #8]
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d000      	beq.n	8001b54 <acc_hal_integration_sensor_transfer+0x4c>
 8001b52:	e0d8      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d000      	beq.n	8001b5a <acc_hal_integration_sensor_transfer+0x52>
 8001b58:	e0d5      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b5a:	2900      	cmp	r1, #0
 8001b5c:	d100      	bne.n	8001b60 <acc_hal_integration_sensor_transfer+0x58>
 8001b5e:	e0d2      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
	HAL_SPI_TransmitReceive(&A111_SPI_HANDLE, buffer, buffer, buffer_size, SPI_TRANSMIT_RECEIVE_TIMEOUT);
 8001b60:	b292      	uxth	r2, r2
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d100      	bne.n	8001b68 <acc_hal_integration_sensor_transfer+0x60>
 8001b66:	e0ce      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b68:	0023      	movs	r3, r4
 8001b6a:	335d      	adds	r3, #93	; 0x5d
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	2804      	cmp	r0, #4
 8001b70:	d001      	beq.n	8001b76 <acc_hal_integration_sensor_transfer+0x6e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b72:	2005      	movs	r0, #5
 8001b74:	7018      	strb	r0, [r3, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b76:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8001b78:	0020      	movs	r0, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b7a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8001b7c:	3008      	adds	r0, #8
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001b7e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001b80:	6523      	str	r3, [r4, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001b82:	68e3      	ldr	r3, [r4, #12]
  hspi->RxXferCount = Size;
 8001b84:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001b86:	1da0      	adds	r0, r4, #6
 8001b88:	87c2      	strh	r2, [r0, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	20e0      	movs	r0, #224	; 0xe0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b8e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b90:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001b92:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001b94:	87a2      	strh	r2, [r4, #60]	; 0x3c
 8001b96:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001b98:	00c0      	lsls	r0, r0, #3
 8001b9a:	4580      	cmp	r8, r0
 8001b9c:	d801      	bhi.n	8001ba2 <acc_hal_integration_sensor_transfer+0x9a>
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d06c      	beq.n	8001c7c <acc_hal_integration_sensor_transfer+0x174>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ba2:	6858      	ldr	r0, [r3, #4]
 8001ba4:	4f99      	ldr	r7, [pc, #612]	; (8001e0c <acc_hal_integration_sensor_transfer+0x304>)
 8001ba6:	4038      	ands	r0, r7
 8001ba8:	6058      	str	r0, [r3, #4]
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	4681      	mov	r9, r0
 8001bae:	2040      	movs	r0, #64	; 0x40
 8001bb0:	464f      	mov	r7, r9
 8001bb2:	4207      	tst	r7, r0
 8001bb4:	d102      	bne.n	8001bbc <acc_hal_integration_sensor_transfer+0xb4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bb6:	681f      	ldr	r7, [r3, #0]
 8001bb8:	4338      	orrs	r0, r7
 8001bba:	6018      	str	r0, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bbc:	20e0      	movs	r0, #224	; 0xe0
 8001bbe:	00c0      	lsls	r0, r0, #3
 8001bc0:	4580      	cmp	r8, r0
 8001bc2:	d800      	bhi.n	8001bc6 <acc_hal_integration_sensor_transfer+0xbe>
 8001bc4:	e0b0      	b.n	8001d28 <acc_hal_integration_sensor_transfer+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bc6:	4660      	mov	r0, ip
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d001      	beq.n	8001bd0 <acc_hal_integration_sensor_transfer+0xc8>
 8001bcc:	2a01      	cmp	r2, #1
 8001bce:	d107      	bne.n	8001be0 <acc_hal_integration_sensor_transfer+0xd8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bd0:	880a      	ldrh	r2, [r1, #0]
 8001bd2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd4:	1c8a      	adds	r2, r1, #2
 8001bd6:	63a2      	str	r2, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8001bd8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8001be0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be2:	2708      	movs	r7, #8
 8001be4:	9200      	str	r2, [sp, #0]
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
        hspi->pRxBuffPtr += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001be6:	2200      	movs	r2, #0
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be8:	46b8      	mov	r8, r7
        txallowed = 1U;
 8001bea:	4694      	mov	ip, r2
 8001bec:	4691      	mov	r9, r2
 8001bee:	3201      	adds	r2, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bf0:	4693      	mov	fp, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bf2:	44a0      	add	r8, r4
 8001bf4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	d148      	bne.n	8001c8c <acc_hal_integration_sensor_transfer+0x184>
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d144      	bne.n	8001c8c <acc_hal_integration_sensor_transfer+0x184>
 8001c02:	464b      	mov	r3, r9
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <acc_hal_integration_sensor_transfer+0x104>
 8001c08:	9b00      	ldr	r3, [sp, #0]
 8001c0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c0c:	4663      	mov	r3, ip
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d000      	beq.n	8001c14 <acc_hal_integration_sensor_transfer+0x10c>
 8001c12:	6421      	str	r1, [r4, #64]	; 0x40
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 8001c14:	22c0      	movs	r2, #192	; 0xc0
 8001c16:	6821      	ldr	r1, [r4, #0]
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c18:	487d      	ldr	r0, [pc, #500]	; (8001e10 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8001c1a:	0152      	lsls	r2, r2, #5
 8001c1c:	688b      	ldr	r3, [r1, #8]
 8001c1e:	4213      	tst	r3, r2
 8001c20:	d007      	beq.n	8001c32 <acc_hal_integration_sensor_transfer+0x12a>
 8001c22:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c24:	1b9b      	subs	r3, r3, r6
 8001c26:	4283      	cmp	r3, r0
 8001c28:	d9f8      	bls.n	8001c1c <acc_hal_integration_sensor_transfer+0x114>
 8001c2a:	f008 fc44 	bl	800a4b6 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d11d      	bne.n	8001c6e <acc_hal_integration_sensor_transfer+0x166>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c36:	4876      	ldr	r0, [pc, #472]	; (8001e10 <acc_hal_integration_sensor_transfer+0x308>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c38:	688b      	ldr	r3, [r1, #8]
 8001c3a:	4213      	tst	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <acc_hal_integration_sensor_transfer+0x146>
 8001c3e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c40:	1b9b      	subs	r3, r3, r6
 8001c42:	4283      	cmp	r3, r0
 8001c44:	d9f8      	bls.n	8001c38 <acc_hal_integration_sensor_transfer+0x130>
 8001c46:	f008 fc36 	bl	800a4b6 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d10f      	bne.n	8001c6e <acc_hal_integration_sensor_transfer+0x166>
  while ((hspi->Instance->SR & Fifo) != State)
 8001c4e:	21c0      	movs	r1, #192	; 0xc0
 8001c50:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c52:	486f      	ldr	r0, [pc, #444]	; (8001e10 <acc_hal_integration_sensor_transfer+0x308>)
  while ((hspi->Instance->SR & Fifo) != State)
 8001c54:	00c9      	lsls	r1, r1, #3
 8001c56:	6893      	ldr	r3, [r2, #8]
 8001c58:	420b      	tst	r3, r1
 8001c5a:	d054      	beq.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001c5c:	7b13      	ldrb	r3, [r2, #12]
 8001c5e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001c60:	1b9b      	subs	r3, r3, r6
 8001c62:	4283      	cmp	r3, r0
 8001c64:	d9f7      	bls.n	8001c56 <acc_hal_integration_sensor_transfer+0x14e>
 8001c66:	f008 fc26 	bl	800a4b6 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	d04b      	beq.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c6e:	2320      	movs	r3, #32
 8001c70:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c76:	2320      	movs	r3, #32
 8001c78:	6623      	str	r3, [r4, #96]	; 0x60
 8001c7a:	e044      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c7c:	6858      	ldr	r0, [r3, #4]
 8001c7e:	4681      	mov	r9, r0
 8001c80:	2080      	movs	r0, #128	; 0x80
 8001c82:	464f      	mov	r7, r9
 8001c84:	0140      	lsls	r0, r0, #5
 8001c86:	4338      	orrs	r0, r7
 8001c88:	6058      	str	r0, [r3, #4]
 8001c8a:	e78e      	b.n	8001baa <acc_hal_integration_sensor_transfer+0xa2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	689f      	ldr	r7, [r3, #8]
 8001c90:	4207      	tst	r7, r0
 8001c92:	d015      	beq.n	8001cc0 <acc_hal_integration_sensor_transfer+0x1b8>
 8001c94:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d012      	beq.n	8001cc0 <acc_hal_integration_sensor_transfer+0x1b8>
 8001c9a:	2a01      	cmp	r2, #1
 8001c9c:	d110      	bne.n	8001cc0 <acc_hal_integration_sensor_transfer+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c9e:	9800      	ldr	r0, [sp, #0]
 8001ca0:	8800      	ldrh	r0, [r0, #0]
 8001ca2:	60d8      	str	r0, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca4:	9800      	ldr	r0, [sp, #0]
 8001ca6:	3002      	adds	r0, #2
 8001ca8:	9000      	str	r0, [sp, #0]
        hspi->TxXferCount--;
 8001caa:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001cac:	4681      	mov	r9, r0
 8001cae:	2001      	movs	r0, #1
 8001cb0:	4240      	negs	r0, r0
 8001cb2:	4682      	mov	sl, r0
 8001cb4:	44d1      	add	r9, sl
 8001cb6:	4648      	mov	r0, r9
 8001cb8:	4691      	mov	r9, r2
        txallowed = 0U;
 8001cba:	2200      	movs	r2, #0
        hspi->TxXferCount--;
 8001cbc:	b280      	uxth	r0, r0
 8001cbe:	87e0      	strh	r0, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cc0:	465f      	mov	r7, fp
 8001cc2:	6898      	ldr	r0, [r3, #8]
 8001cc4:	4238      	tst	r0, r7
 8001cc6:	d00e      	beq.n	8001ce6 <acc_hal_integration_sensor_transfer+0x1de>
 8001cc8:	4640      	mov	r0, r8
 8001cca:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d00a      	beq.n	8001ce6 <acc_hal_integration_sensor_transfer+0x1de>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cd0:	68da      	ldr	r2, [r3, #12]
        hspi->RxXferCount--;
 8001cd2:	4640      	mov	r0, r8
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cd4:	800a      	strh	r2, [r1, #0]
        hspi->RxXferCount--;
 8001cd6:	4642      	mov	r2, r8
 8001cd8:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
 8001cda:	46dc      	mov	ip, fp
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	b292      	uxth	r2, r2
 8001ce0:	87c2      	strh	r2, [r0, #62]	; 0x3e
        txallowed = 1U;
 8001ce2:	2201      	movs	r2, #1
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ce4:	3102      	adds	r1, #2
 8001ce6:	6828      	ldr	r0, [r5, #0]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ce8:	1b80      	subs	r0, r0, r6
 8001cea:	4682      	mov	sl, r0
 8001cec:	4848      	ldr	r0, [pc, #288]	; (8001e10 <acc_hal_integration_sensor_transfer+0x308>)
 8001cee:	4582      	cmp	sl, r0
 8001cf0:	d800      	bhi.n	8001cf4 <acc_hal_integration_sensor_transfer+0x1ec>
 8001cf2:	e77f      	b.n	8001bf4 <acc_hal_integration_sensor_transfer+0xec>
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <acc_hal_integration_sensor_transfer+0x1f6>
 8001cfa:	9b00      	ldr	r3, [sp, #0]
 8001cfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8001cfe:	4663      	mov	r3, ip
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d000      	beq.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
 8001d04:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->State = HAL_SPI_STATE_READY;
 8001d06:	0023      	movs	r3, r4
 8001d08:	2201      	movs	r2, #1
 8001d0a:	335d      	adds	r3, #93	; 0x5d
 8001d0c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	345c      	adds	r4, #92	; 0x5c
 8001d12:	7023      	strb	r3, [r4, #0]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d14:	2301      	movs	r3, #1
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	6193      	str	r3, [r2, #24]
}
 8001d1a:	b003      	add	sp, #12
 8001d1c:	bc3c      	pop	{r2, r3, r4, r5}
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	46a2      	mov	sl, r4
 8001d24:	46ab      	mov	fp, r5
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d28:	4660      	mov	r0, ip
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d001      	beq.n	8001d32 <acc_hal_integration_sensor_transfer+0x22a>
 8001d2e:	2a01      	cmp	r2, #1
 8001d30:	d10a      	bne.n	8001d48 <acc_hal_integration_sensor_transfer+0x240>
      if (hspi->TxXferCount > 1U)
 8001d32:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d34:	2a01      	cmp	r2, #1
 8001d36:	d958      	bls.n	8001dea <acc_hal_integration_sensor_transfer+0x2e2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d38:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d3a:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d3c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8001d3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d40:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001d42:	3b02      	subs	r3, #2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4694      	mov	ip, r2
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d4c:	2280      	movs	r2, #128	; 0x80
        txallowed = 1U;
 8001d4e:	2101      	movs	r1, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001d50:	0152      	lsls	r2, r2, #5
 8001d52:	4690      	mov	r8, r2
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d54:	4a2e      	ldr	r2, [pc, #184]	; (8001e10 <acc_hal_integration_sensor_transfer+0x308>)
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d56:	0023      	movs	r3, r4
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d58:	468b      	mov	fp, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d5a:	4691      	mov	r9, r2
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d5c:	3308      	adds	r3, #8
 8001d5e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d60:	2a00      	cmp	r2, #0
 8001d62:	d103      	bne.n	8001d6c <acc_hal_integration_sensor_transfer+0x264>
 8001d64:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <acc_hal_integration_sensor_transfer+0x264>
 8001d6a:	e753      	b.n	8001c14 <acc_hal_integration_sensor_transfer+0x10c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d6c:	4660      	mov	r0, ip
 8001d6e:	6822      	ldr	r2, [r4, #0]
 8001d70:	6897      	ldr	r7, [r2, #8]
 8001d72:	4207      	tst	r7, r0
 8001d74:	d013      	beq.n	8001d9e <acc_hal_integration_sensor_transfer+0x296>
 8001d76:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d010      	beq.n	8001d9e <acc_hal_integration_sensor_transfer+0x296>
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d10e      	bne.n	8001d9e <acc_hal_integration_sensor_transfer+0x296>
        if (hspi->TxXferCount > 1U)
 8001d80:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001d82:	468a      	mov	sl, r1
 8001d84:	4650      	mov	r0, sl
 8001d86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001d88:	2801      	cmp	r0, #1
 8001d8a:	d943      	bls.n	8001e14 <acc_hal_integration_sensor_transfer+0x30c>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	8808      	ldrh	r0, [r1, #0]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d8e:	3102      	adds	r1, #2
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d90:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d92:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001d94:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001d96:	3902      	subs	r1, #2
 8001d98:	b289      	uxth	r1, r1
 8001d9a:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001d9c:	2100      	movs	r1, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d9e:	465f      	mov	r7, fp
 8001da0:	6890      	ldr	r0, [r2, #8]
 8001da2:	4238      	tst	r0, r7
 8001da4:	d01b      	beq.n	8001dde <acc_hal_integration_sensor_transfer+0x2d6>
 8001da6:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
 8001da8:	2800      	cmp	r0, #0
 8001daa:	d018      	beq.n	8001dde <acc_hal_integration_sensor_transfer+0x2d6>
        if (hspi->RxXferCount > 1U)
 8001dac:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8001dae:	468a      	mov	sl, r1
 8001db0:	4650      	mov	r0, sl
 8001db2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001db4:	2801      	cmp	r0, #1
 8001db6:	d938      	bls.n	8001e2a <acc_hal_integration_sensor_transfer+0x322>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001db8:	68d0      	ldr	r0, [r2, #12]
 8001dba:	8008      	strh	r0, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001dbc:	3102      	adds	r1, #2
 8001dbe:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8001dc0:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8001dc2:	3902      	subs	r1, #2
 8001dc4:	b289      	uxth	r1, r1
 8001dc6:	87d9      	strh	r1, [r3, #62]	; 0x3e
          if (hspi->RxXferCount <= 1U)
 8001dc8:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8001dca:	468a      	mov	sl, r1
 8001dcc:	4650      	mov	r0, sl
        txallowed = 1U;
 8001dce:	4659      	mov	r1, fp
          if (hspi->RxXferCount <= 1U)
 8001dd0:	2801      	cmp	r0, #1
 8001dd2:	d804      	bhi.n	8001dde <acc_hal_integration_sensor_transfer+0x2d6>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001dd4:	4640      	mov	r0, r8
 8001dd6:	6851      	ldr	r1, [r2, #4]
 8001dd8:	4301      	orrs	r1, r0
 8001dda:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8001ddc:	4659      	mov	r1, fp
 8001dde:	682a      	ldr	r2, [r5, #0]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001de0:	1b92      	subs	r2, r2, r6
 8001de2:	454a      	cmp	r2, r9
 8001de4:	d900      	bls.n	8001de8 <acc_hal_integration_sensor_transfer+0x2e0>
 8001de6:	e78e      	b.n	8001d06 <acc_hal_integration_sensor_transfer+0x1fe>
 8001de8:	e7b9      	b.n	8001d5e <acc_hal_integration_sensor_transfer+0x256>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001dea:	780a      	ldrb	r2, [r1, #0]
 8001dec:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001dee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001df0:	3301      	adds	r3, #1
 8001df2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8001df4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001dfc:	e7a4      	b.n	8001d48 <acc_hal_integration_sensor_transfer+0x240>
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	200002f0 	.word	0x200002f0
 8001e04:	50000400 	.word	0x50000400
 8001e08:	200002b4 	.word	0x200002b4
 8001e0c:	ffffefff 	.word	0xffffefff
 8001e10:	00001387 	.word	0x00001387
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001e14:	7809      	ldrb	r1, [r1, #0]
 8001e16:	7311      	strb	r1, [r2, #12]
          hspi->pTxBuffPtr++;
 8001e18:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001e1a:	3101      	adds	r1, #1
 8001e1c:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8001e1e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8001e20:	3901      	subs	r1, #1
 8001e22:	b289      	uxth	r1, r1
 8001e24:	87e1      	strh	r1, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001e26:	2100      	movs	r1, #0
 8001e28:	e7b9      	b.n	8001d9e <acc_hal_integration_sensor_transfer+0x296>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e2a:	7b12      	ldrb	r2, [r2, #12]
 8001e2c:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8001e2e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        txallowed = 1U;
 8001e30:	4659      	mov	r1, fp
          hspi->pRxBuffPtr++;
 8001e32:	3201      	adds	r2, #1
 8001e34:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8001e36:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8001e38:	3a01      	subs	r2, #1
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e3e:	e7ce      	b.n	8001dde <acc_hal_integration_sensor_transfer+0x2d6>

08001e40 <acc_base_configuration_asynchronous_measurement_get>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	f004 fb94 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d001      	beq.n	8001e50 <acc_base_configuration_asynchronous_measurement_get+0x10>
 8001e4c:	344e      	adds	r4, #78	; 0x4e
 8001e4e:	7820      	ldrb	r0, [r4, #0]
 8001e50:	bd10      	pop	{r4, pc}

08001e52 <acc_base_configuration_noise_level_normalization_get>:
 8001e52:	b510      	push	{r4, lr}
 8001e54:	0004      	movs	r4, r0
 8001e56:	f004 fb8b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d001      	beq.n	8001e62 <acc_base_configuration_noise_level_normalization_get+0x10>
 8001e5e:	3449      	adds	r4, #73	; 0x49
 8001e60:	7820      	ldrb	r0, [r4, #0]
 8001e62:	bd10      	pop	{r4, pc}

08001e64 <acc_base_configuration_downsampling_factor_get>:
 8001e64:	b510      	push	{r4, lr}
 8001e66:	0004      	movs	r4, r0
 8001e68:	f004 fb82 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	4298      	cmp	r0, r3
 8001e70:	d001      	beq.n	8001e76 <acc_base_configuration_downsampling_factor_get+0x12>
 8001e72:	3468      	adds	r4, #104	; 0x68
 8001e74:	8823      	ldrh	r3, [r4, #0]
 8001e76:	0018      	movs	r0, r3
 8001e78:	bd10      	pop	{r4, pc}

08001e7a <envelope_create_service>:
 8001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7c:	46de      	mov	lr, fp
 8001e7e:	464e      	mov	r6, r9
 8001e80:	4645      	mov	r5, r8
 8001e82:	4657      	mov	r7, sl
 8001e84:	b5e0      	push	{r5, r6, r7, lr}
 8001e86:	b0a9      	sub	sp, #164	; 0xa4
 8001e88:	9001      	str	r0, [sp, #4]
 8001e8a:	2290      	movs	r2, #144	; 0x90
 8001e8c:	a804      	add	r0, sp, #16
 8001e8e:	000d      	movs	r5, r1
 8001e90:	f013 fb08 	bl	80154a4 <memcpy>
 8001e94:	a80b      	add	r0, sp, #44	; 0x2c
 8001e96:	f7ff ffe5 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 8001e9a:	0006      	movs	r6, r0
 8001e9c:	a80b      	add	r0, sp, #44	; 0x2c
 8001e9e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8001ea0:	f004 fb66 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d006      	beq.n	8001eb6 <envelope_create_service+0x3c>
 8001ea8:	0030      	movs	r0, r6
 8001eaa:	f00d fa45 	bl	800f338 <__aeabi_i2f>
 8001eae:	1c21      	adds	r1, r4, #0
 8001eb0:	f00c fb0e 	bl	800e4d0 <__aeabi_fmul>
 8001eb4:	9013      	str	r0, [sp, #76]	; 0x4c
 8001eb6:	a804      	add	r0, sp, #16
 8001eb8:	f7fe f950 	bl	800015c <acc_service_configuration_check>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	d101      	bne.n	8001ec4 <envelope_create_service+0x4a>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e009      	b.n	8001ed8 <envelope_create_service+0x5e>
 8001ec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d10d      	bne.n	8001ee6 <envelope_create_service+0x6c>
 8001eca:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <envelope_create_service+0x16a>)
 8001ecc:	2000      	movs	r0, #0
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	4a45      	ldr	r2, [pc, #276]	; (8001fe8 <envelope_create_service+0x16e>)
 8001ed2:	4946      	ldr	r1, [pc, #280]	; (8001fec <envelope_create_service+0x172>)
 8001ed4:	4798      	blx	r3
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	b029      	add	sp, #164	; 0xa4
 8001eda:	bc3c      	pop	{r2, r3, r4, r5}
 8001edc:	4690      	mov	r8, r2
 8001ede:	4699      	mov	r9, r3
 8001ee0:	46a2      	mov	sl, r4
 8001ee2:	46ab      	mov	fp, r5
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee6:	a80b      	add	r0, sp, #44	; 0x2c
 8001ee8:	f004 fb42 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d0e7      	beq.n	8001ec0 <envelope_create_service+0x46>
 8001ef0:	a80b      	add	r0, sp, #44	; 0x2c
 8001ef2:	f004 fabd 	bl	8006470 <acc_base_configuration_check.part.6>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d0e2      	beq.n	8001ec0 <envelope_create_service+0x46>
 8001efa:	a80b      	add	r0, sp, #44	; 0x2c
 8001efc:	f7ff ffb2 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 8001f00:	1e43      	subs	r3, r0, #1
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d908      	bls.n	8001f1a <envelope_create_service+0xa0>
 8001f08:	2804      	cmp	r0, #4
 8001f0a:	d006      	beq.n	8001f1a <envelope_create_service+0xa0>
 8001f0c:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <envelope_create_service+0x16a>)
 8001f0e:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <envelope_create_service+0x176>)
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	4936      	ldr	r1, [pc, #216]	; (8001fec <envelope_create_service+0x172>)
 8001f14:	2000      	movs	r0, #0
 8001f16:	4798      	blx	r3
 8001f18:	e7d2      	b.n	8001ec0 <envelope_create_service+0x46>
 8001f1a:	a80b      	add	r0, sp, #44	; 0x2c
 8001f1c:	f004 fb28 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001f20:	1e04      	subs	r4, r0, #0
 8001f22:	d004      	beq.n	8001f2e <envelope_create_service+0xb4>
 8001f24:	aa04      	add	r2, sp, #16
 8001f26:	236b      	movs	r3, #107	; 0x6b
 8001f28:	4694      	mov	ip, r2
 8001f2a:	4463      	add	r3, ip
 8001f2c:	781c      	ldrb	r4, [r3, #0]
 8001f2e:	a80b      	add	r0, sp, #44	; 0x2c
 8001f30:	f004 fb1e 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d010      	beq.n	8001f5a <envelope_create_service+0xe0>
 8001f38:	2c00      	cmp	r4, #0
 8001f3a:	d00e      	beq.n	8001f5a <envelope_create_service+0xe0>
 8001f3c:	ab11      	add	r3, sp, #68	; 0x44
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <envelope_create_service+0xe0>
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <envelope_create_service+0x16a>)
 8001f46:	001a      	movs	r2, r3
 8001f48:	3230      	adds	r2, #48	; 0x30
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	2a00      	cmp	r2, #0
 8001f4e:	d004      	beq.n	8001f5a <envelope_create_service+0xe0>
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <envelope_create_service+0x17a>)
 8001f54:	4925      	ldr	r1, [pc, #148]	; (8001fec <envelope_create_service+0x172>)
 8001f56:	2001      	movs	r0, #1
 8001f58:	4798      	blx	r3
 8001f5a:	792b      	ldrb	r3, [r5, #4]
 8001f5c:	9a01      	ldr	r2, [sp, #4]
 8001f5e:	2010      	movs	r0, #16
 8001f60:	7213      	strb	r3, [r2, #8]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <envelope_create_service+0x17e>)
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	0019      	movs	r1, r3
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	f008 fe04 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8001f70:	2202      	movs	r2, #2
 8001f72:	0005      	movs	r5, r0
 8001f74:	20ec      	movs	r0, #236	; 0xec
 8001f76:	32ff      	adds	r2, #255	; 0xff
 8001f78:	4649      	mov	r1, r9
 8001f7a:	0080      	lsls	r0, r0, #2
 8001f7c:	f008 fdfc 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 8001f80:	0004      	movs	r4, r0
 8001f82:	2d00      	cmp	r5, #0
 8001f84:	d001      	beq.n	8001f8a <envelope_create_service+0x110>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d10f      	bne.n	8001faa <envelope_create_service+0x130>
 8001f8a:	0028      	movs	r0, r5
 8001f8c:	f003 ffec 	bl	8005f68 <acc_rss_integration_mem_free>
 8001f90:	0020      	movs	r0, r4
 8001f92:	f003 ffe9 	bl	8005f68 <acc_rss_integration_mem_free>
 8001f96:	2500      	movs	r5, #0
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	9a01      	ldr	r2, [sp, #4]
 8001f9c:	611d      	str	r5, [r3, #16]
 8001f9e:	1e68      	subs	r0, r5, #1
 8001fa0:	4185      	sbcs	r5, r0
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <envelope_create_service+0x182>)
 8001fa4:	b2e8      	uxtb	r0, r5
 8001fa6:	60d3      	str	r3, [r2, #12]
 8001fa8:	e796      	b.n	8001ed8 <envelope_create_service+0x5e>
 8001faa:	2318      	movs	r3, #24
 8001fac:	469c      	mov	ip, r3
 8001fae:	4484      	add	ip, r0
 8001fb0:	4663      	mov	r3, ip
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	23e3      	movs	r3, #227	; 0xe3
 8001fb6:	6028      	str	r0, [r5, #0]
 8001fb8:	9801      	ldr	r0, [sp, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	3018      	adds	r0, #24
 8001fbe:	18e7      	adds	r7, r4, r3
 8001fc0:	003b      	movs	r3, r7
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	6760      	str	r0, [r4, #116]	; 0x74
 8001fc6:	a90b      	add	r1, sp, #44	; 0x2c
 8001fc8:	f004 fbe0 	bl	800678c <acc_sensor_manager_prepare_radar_engine>
 8001fcc:	0023      	movs	r3, r4
 8001fce:	897a      	ldrh	r2, [r7, #10]
 8001fd0:	3370      	adds	r3, #112	; 0x70
 8001fd2:	1e06      	subs	r6, r0, #0
 8001fd4:	801a      	strh	r2, [r3, #0]
 8001fd6:	d113      	bne.n	8002000 <envelope_create_service+0x186>
 8001fd8:	0028      	movs	r0, r5
 8001fda:	f003 ffe1 	bl	8005fa0 <disassemble.lto_priv.321.lto_priv.646>
 8001fde:	0035      	movs	r5, r6
 8001fe0:	e7da      	b.n	8001f98 <envelope_create_service+0x11e>
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	200002b8 	.word	0x200002b8
 8001fe8:	0801baeb 	.word	0x0801baeb
 8001fec:	0801b8e5 	.word	0x0801b8e5
 8001ff0:	0801bb26 	.word	0x0801bb26
 8001ff4:	0801bb46 	.word	0x0801bb46
 8001ff8:	0801bb8b 	.word	0x0801bb8b
 8001ffc:	0800018d 	.word	0x0800018d
 8002000:	a80b      	add	r0, sp, #44	; 0x2c
 8002002:	f004 fab5 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002006:	4682      	mov	sl, r0
 8002008:	2800      	cmp	r0, #0
 800200a:	d002      	beq.n	8002012 <envelope_create_service+0x198>
 800200c:	ab11      	add	r3, sp, #68	; 0x44
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	469a      	mov	sl, r3
 8002012:	23e3      	movs	r3, #227	; 0xe3
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	5ae2      	ldrh	r2, [r4, r3]
 8002018:	89bb      	ldrh	r3, [r7, #12]
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4293      	cmp	r3, r2
 8002020:	d200      	bcs.n	8002024 <envelope_create_service+0x1aa>
 8002022:	0013      	movs	r3, r2
 8002024:	897e      	ldrh	r6, [r7, #10]
 8002026:	89fa      	ldrh	r2, [r7, #14]
 8002028:	18b6      	adds	r6, r6, r2
 800202a:	0076      	lsls	r6, r6, #1
 800202c:	429e      	cmp	r6, r3
 800202e:	d200      	bcs.n	8002032 <envelope_create_service+0x1b8>
 8002030:	001e      	movs	r6, r3
 8002032:	a80b      	add	r0, sp, #44	; 0x2c
 8002034:	f004 fa9c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002038:	2300      	movs	r3, #0
 800203a:	4298      	cmp	r0, r3
 800203c:	d001      	beq.n	8002042 <envelope_create_service+0x1c8>
 800203e:	ab20      	add	r3, sp, #128	; 0x80
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	4698      	mov	r8, r3
 8002044:	42b3      	cmp	r3, r6
 8002046:	d200      	bcs.n	800204a <envelope_create_service+0x1d0>
 8002048:	46b0      	mov	r8, r6
 800204a:	23eb      	movs	r3, #235	; 0xeb
 800204c:	4642      	mov	r2, r8
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	50e2      	str	r2, [r4, r3]
 8002052:	4653      	mov	r3, sl
 8002054:	4640      	mov	r0, r8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <envelope_create_service+0x1ec>
 800205a:	23e3      	movs	r3, #227	; 0xe3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	5ae0      	ldrh	r0, [r4, r3]
 8002060:	0080      	lsls	r0, r0, #2
 8002062:	300a      	adds	r0, #10
 8002064:	4440      	add	r0, r8
 8002066:	2286      	movs	r2, #134	; 0x86
 8002068:	4649      	mov	r1, r9
 800206a:	32ff      	adds	r2, #255	; 0xff
 800206c:	f003 ffc0 	bl	8005ff0 <acc_rss_integration_mem_alloc_debug>
 8002070:	23ea      	movs	r3, #234	; 0xea
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	1e06      	subs	r6, r0, #0
 8002076:	50e0      	str	r0, [r4, r3]
 8002078:	d0ae      	beq.n	8001fd8 <envelope_create_service+0x15e>
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4699      	mov	r9, r3
 8002080:	4653      	mov	r3, sl
 8002082:	4481      	add	r9, r0
 8002084:	46cb      	mov	fp, r9
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <envelope_create_service+0x218>
 800208a:	4643      	mov	r3, r8
 800208c:	3304      	adds	r3, #4
 800208e:	469b      	mov	fp, r3
 8002090:	4483      	add	fp, r0
 8002092:	1da3      	adds	r3, r4, #6
 8002094:	6623      	str	r3, [r4, #96]	; 0x60
 8002096:	1de3      	adds	r3, r4, #7
 8002098:	6663      	str	r3, [r4, #100]	; 0x64
 800209a:	230c      	movs	r3, #12
 800209c:	469c      	mov	ip, r3
 800209e:	44a4      	add	ip, r4
 80020a0:	4663      	mov	r3, ip
 80020a2:	0027      	movs	r7, r4
 80020a4:	66a3      	str	r3, [r4, #104]	; 0x68
 80020a6:	9303      	str	r3, [sp, #12]
 80020a8:	3b04      	subs	r3, #4
 80020aa:	66e3      	str	r3, [r4, #108]	; 0x6c
 80020ac:	3714      	adds	r7, #20
 80020ae:	3380      	adds	r3, #128	; 0x80
 80020b0:	1d22      	adds	r2, r4, #4
 80020b2:	64e6      	str	r6, [r4, #76]	; 0x4c
 80020b4:	65e7      	str	r7, [r4, #92]	; 0x5c
 80020b6:	65a4      	str	r4, [r4, #88]	; 0x58
 80020b8:	a80b      	add	r0, sp, #44	; 0x2c
 80020ba:	601e      	str	r6, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	615f      	str	r7, [r3, #20]
 80020c0:	641e      	str	r6, [r3, #64]	; 0x40
 80020c2:	645e      	str	r6, [r3, #68]	; 0x44
 80020c4:	655f      	str	r7, [r3, #84]	; 0x54
 80020c6:	f7ff fec4 	bl	8001e52 <acc_base_configuration_noise_level_normalization_get>
 80020ca:	2800      	cmp	r0, #0
 80020cc:	d004      	beq.n	80020d8 <envelope_create_service+0x25e>
 80020ce:	0023      	movs	r3, r4
 80020d0:	33fc      	adds	r3, #252	; 0xfc
 80020d2:	60de      	str	r6, [r3, #12]
 80020d4:	611e      	str	r6, [r3, #16]
 80020d6:	621f      	str	r7, [r3, #32]
 80020d8:	0023      	movs	r3, r4
 80020da:	33fc      	adds	r3, #252	; 0xfc
 80020dc:	64de      	str	r6, [r3, #76]	; 0x4c
 80020de:	651e      	str	r6, [r3, #80]	; 0x50
 80020e0:	661f      	str	r7, [r3, #96]	; 0x60
 80020e2:	23c2      	movs	r3, #194	; 0xc2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	50e6      	str	r6, [r4, r3]
 80020e8:	3304      	adds	r3, #4
 80020ea:	50e6      	str	r6, [r4, r3]
 80020ec:	9a03      	ldr	r2, [sp, #12]
 80020ee:	3310      	adds	r3, #16
 80020f0:	50e7      	str	r7, [r4, r3]
 80020f2:	330c      	adds	r3, #12
 80020f4:	50e2      	str	r2, [r4, r3]
 80020f6:	464a      	mov	r2, r9
 80020f8:	3324      	adds	r3, #36	; 0x24
 80020fa:	50e6      	str	r6, [r4, r3]
 80020fc:	3304      	adds	r3, #4
 80020fe:	50e6      	str	r6, [r4, r3]
 8002100:	3310      	adds	r3, #16
 8002102:	50e7      	str	r7, [r4, r3]
 8002104:	3334      	adds	r3, #52	; 0x34
 8002106:	50e6      	str	r6, [r4, r3]
 8002108:	3304      	adds	r3, #4
 800210a:	50e2      	str	r2, [r4, r3]
 800210c:	3310      	adds	r3, #16
 800210e:	50e7      	str	r7, [r4, r3]
 8002110:	3328      	adds	r3, #40	; 0x28
 8002112:	50e2      	str	r2, [r4, r3]
 8002114:	3304      	adds	r3, #4
 8002116:	50e2      	str	r2, [r4, r3]
 8002118:	3310      	adds	r3, #16
 800211a:	50e7      	str	r7, [r4, r3]
 800211c:	4653      	mov	r3, sl
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <envelope_create_service+0x2c4>
 8002122:	23a8      	movs	r3, #168	; 0xa8
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	50e2      	str	r2, [r4, r3]
 8002128:	4643      	mov	r3, r8
 800212a:	22ab      	movs	r2, #171	; 0xab
 800212c:	18f3      	adds	r3, r6, r3
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	50a3      	str	r3, [r4, r2]
 8002132:	23a9      	movs	r3, #169	; 0xa9
 8002134:	465a      	mov	r2, fp
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	50e2      	str	r2, [r4, r3]
 800213a:	3310      	adds	r3, #16
 800213c:	50e7      	str	r7, [r4, r3]
 800213e:	23b8      	movs	r3, #184	; 0xb8
 8002140:	465a      	mov	r2, fp
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	50e2      	str	r2, [r4, r3]
 8002146:	3304      	adds	r3, #4
 8002148:	50e6      	str	r6, [r4, r3]
 800214a:	3310      	adds	r3, #16
 800214c:	50e7      	str	r7, [r4, r3]
 800214e:	3328      	adds	r3, #40	; 0x28
 8002150:	50e6      	str	r6, [r4, r3]
 8002152:	3304      	adds	r3, #4
 8002154:	50e6      	str	r6, [r4, r3]
 8002156:	3310      	adds	r3, #16
 8002158:	50e7      	str	r7, [r4, r3]
 800215a:	3328      	adds	r3, #40	; 0x28
 800215c:	50e6      	str	r6, [r4, r3]
 800215e:	3328      	adds	r3, #40	; 0x28
 8002160:	50e4      	str	r4, [r4, r3]
 8002162:	3328      	adds	r3, #40	; 0x28
 8002164:	18e6      	adds	r6, r4, r3
 8002166:	4be9      	ldr	r3, [pc, #932]	; (800250c <envelope_create_service+0x692>)
 8002168:	469b      	mov	fp, r3
 800216a:	3330      	adds	r3, #48	; 0x30
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d900      	bls.n	8002174 <envelope_create_service+0x2fa>
 8002172:	e270      	b.n	8002656 <envelope_create_service+0x7dc>
 8002174:	0033      	movs	r3, r6
 8002176:	9a02      	ldr	r2, [sp, #8]
 8002178:	a90b      	add	r1, sp, #44	; 0x2c
 800217a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800217c:	f004 fa12 	bl	80065a4 <acc_sensor_manager_prepare_measurement>
 8002180:	1e06      	subs	r6, r0, #0
 8002182:	d100      	bne.n	8002186 <envelope_create_service+0x30c>
 8002184:	e728      	b.n	8001fd8 <envelope_create_service+0x15e>
 8002186:	0023      	movs	r3, r4
 8002188:	2700      	movs	r7, #0
 800218a:	0026      	movs	r6, r4
 800218c:	4ae0      	ldr	r2, [pc, #896]	; (8002510 <envelope_create_service+0x696>)
 800218e:	33b0      	adds	r3, #176	; 0xb0
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	601f      	str	r7, [r3, #0]
 8002194:	4bdf      	ldr	r3, [pc, #892]	; (8002514 <envelope_create_service+0x69a>)
 8002196:	4ae0      	ldr	r2, [pc, #896]	; (8002518 <envelope_create_service+0x69e>)
 8002198:	67e3      	str	r3, [r4, #124]	; 0x7c
 800219a:	1d23      	adds	r3, r4, #4
 800219c:	67da      	str	r2, [r3, #124]	; 0x7c
 800219e:	4adf      	ldr	r2, [pc, #892]	; (800251c <envelope_create_service+0x6a2>)
 80021a0:	3304      	adds	r3, #4
 80021a2:	67da      	str	r2, [r3, #124]	; 0x7c
 80021a4:	4bde      	ldr	r3, [pc, #888]	; (8002520 <envelope_create_service+0x6a6>)
 80021a6:	36b8      	adds	r6, #184	; 0xb8
 80021a8:	6073      	str	r3, [r6, #4]
 80021aa:	4bde      	ldr	r3, [pc, #888]	; (8002524 <envelope_create_service+0x6aa>)
 80021ac:	a80b      	add	r0, sp, #44	; 0x2c
 80021ae:	60b3      	str	r3, [r6, #8]
 80021b0:	4bdd      	ldr	r3, [pc, #884]	; (8002528 <envelope_create_service+0x6ae>)
 80021b2:	60f3      	str	r3, [r6, #12]
 80021b4:	4bdd      	ldr	r3, [pc, #884]	; (800252c <envelope_create_service+0x6b2>)
 80021b6:	63b3      	str	r3, [r6, #56]	; 0x38
 80021b8:	2300      	movs	r3, #0
 80021ba:	87b3      	strh	r3, [r6, #60]	; 0x3c
 80021bc:	f7ff fe49 	bl	8001e52 <acc_base_configuration_noise_level_normalization_get>
 80021c0:	9702      	str	r7, [sp, #8]
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d01b      	beq.n	80021fe <envelope_create_service+0x384>
 80021c6:	a80b      	add	r0, sp, #44	; 0x2c
 80021c8:	f004 f9d2 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d007      	beq.n	80021e0 <envelope_create_service+0x366>
 80021d0:	aa04      	add	r2, sp, #16
 80021d2:	4694      	mov	ip, r2
 80021d4:	2366      	movs	r3, #102	; 0x66
 80021d6:	4463      	add	r3, ip
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	221e      	movs	r2, #30
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <envelope_create_service+0x36a>
 80021e0:	2296      	movs	r2, #150	; 0x96
 80021e2:	0052      	lsls	r2, r2, #1
 80021e4:	0023      	movs	r3, r4
 80021e6:	33f8      	adds	r3, #248	; 0xf8
 80021e8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80021ea:	875a      	strh	r2, [r3, #58]	; 0x3a
 80021ec:	4ad0      	ldr	r2, [pc, #832]	; (8002530 <envelope_create_service+0x6b6>)
 80021ee:	8719      	strh	r1, [r3, #56]	; 0x38
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80021f2:	4ad0      	ldr	r2, [pc, #832]	; (8002534 <envelope_create_service+0x6ba>)
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	4ad0      	ldr	r2, [pc, #832]	; (8002538 <envelope_create_service+0x6be>)
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	4ad0      	ldr	r2, [pc, #832]	; (800253c <envelope_create_service+0x6c2>)
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	0023      	movs	r3, r4
 8002200:	4acf      	ldr	r2, [pc, #828]	; (8002540 <envelope_create_service+0x6c6>)
 8002202:	3339      	adds	r3, #57	; 0x39
 8002204:	33ff      	adds	r3, #255	; 0xff
 8002206:	639a      	str	r2, [r3, #56]	; 0x38
 8002208:	4ace      	ldr	r2, [pc, #824]	; (8002544 <envelope_create_service+0x6ca>)
 800220a:	49cf      	ldr	r1, [pc, #828]	; (8002548 <envelope_create_service+0x6ce>)
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	4acf      	ldr	r2, [pc, #828]	; (800254c <envelope_create_service+0x6d2>)
 8002210:	a80b      	add	r0, sp, #44	; 0x2c
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	4ace      	ldr	r2, [pc, #824]	; (8002550 <envelope_create_service+0x6d6>)
 8002216:	60da      	str	r2, [r3, #12]
 8002218:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800221a:	6419      	str	r1, [r3, #64]	; 0x40
 800221c:	679a      	str	r2, [r3, #120]	; 0x78
 800221e:	49cd      	ldr	r1, [pc, #820]	; (8002554 <envelope_create_service+0x6da>)
 8002220:	9a02      	ldr	r2, [sp, #8]
 8002222:	6459      	str	r1, [r3, #68]	; 0x44
 8002224:	67da      	str	r2, [r3, #124]	; 0x7c
 8002226:	49cc      	ldr	r1, [pc, #816]	; (8002558 <envelope_create_service+0x6de>)
 8002228:	4acc      	ldr	r2, [pc, #816]	; (800255c <envelope_create_service+0x6e2>)
 800222a:	6499      	str	r1, [r3, #72]	; 0x48
 800222c:	675a      	str	r2, [r3, #116]	; 0x74
 800222e:	23e3      	movs	r3, #227	; 0xe3
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4698      	mov	r8, r3
 8002234:	44a0      	add	r8, r4
 8002236:	4643      	mov	r3, r8
 8002238:	891b      	ldrh	r3, [r3, #8]
 800223a:	469a      	mov	sl, r3
 800223c:	4643      	mov	r3, r8
 800223e:	88db      	ldrh	r3, [r3, #6]
 8002240:	9303      	str	r3, [sp, #12]
 8002242:	f004 f995 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002246:	2800      	cmp	r0, #0
 8002248:	d100      	bne.n	800224c <envelope_create_service+0x3d2>
 800224a:	e208      	b.n	800265e <envelope_create_service+0x7e4>
 800224c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800224e:	4699      	mov	r9, r3
 8002250:	0027      	movs	r7, r4
 8002252:	4bc3      	ldr	r3, [pc, #780]	; (8002560 <envelope_create_service+0x6e6>)
 8002254:	37b9      	adds	r7, #185	; 0xb9
 8002256:	37ff      	adds	r7, #255	; 0xff
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4bc2      	ldr	r3, [pc, #776]	; (8002564 <envelope_create_service+0x6ea>)
 800225c:	218b      	movs	r1, #139	; 0x8b
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	4bc1      	ldr	r3, [pc, #772]	; (8002568 <envelope_create_service+0x6ee>)
 8002262:	05c9      	lsls	r1, r1, #23
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	9b03      	ldr	r3, [sp, #12]
 8002268:	4648      	mov	r0, r9
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
 800226c:	4653      	mov	r3, sl
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002270:	f00c f92e 	bl	800e4d0 <__aeabi_fmul>
 8002274:	2100      	movs	r1, #0
 8002276:	4682      	mov	sl, r0
 8002278:	4648      	mov	r0, r9
 800227a:	f00c fe3f 	bl	800eefc <__aeabi_fcmpge>
 800227e:	2800      	cmp	r0, #0
 8002280:	d100      	bne.n	8002284 <envelope_create_service+0x40a>
 8002282:	e1ef      	b.n	8002664 <envelope_create_service+0x7ea>
 8002284:	21fc      	movs	r1, #252	; 0xfc
 8002286:	0589      	lsls	r1, r1, #22
 8002288:	4650      	mov	r0, sl
 800228a:	f00b fe75 	bl	800df78 <__aeabi_fadd>
 800228e:	f00d f833 	bl	800f2f8 <__aeabi_f2iz>
 8002292:	0023      	movs	r3, r4
 8002294:	33bf      	adds	r3, #191	; 0xbf
 8002296:	33ff      	adds	r3, #255	; 0xff
 8002298:	87d8      	strh	r0, [r3, #62]	; 0x3e
 800229a:	4bb4      	ldr	r3, [pc, #720]	; (800256c <envelope_create_service+0x6f2>)
 800229c:	4642      	mov	r2, r8
 800229e:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	8892      	ldrh	r2, [r2, #4]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	18e3      	adds	r3, r4, r3
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
 80022ac:	4ab0      	ldr	r2, [pc, #704]	; (8002570 <envelope_create_service+0x6f6>)
 80022ae:	a80b      	add	r0, sp, #44	; 0x2c
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	4ab0      	ldr	r2, [pc, #704]	; (8002574 <envelope_create_service+0x6fa>)
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	4ab0      	ldr	r2, [pc, #704]	; (8002578 <envelope_create_service+0x6fe>)
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	f004 f959 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80022be:	4681      	mov	r9, r0
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d002      	beq.n	80022ca <envelope_create_service+0x450>
 80022c4:	ab12      	add	r3, sp, #72	; 0x48
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4699      	mov	r9, r3
 80022ca:	a80b      	add	r0, sp, #44	; 0x2c
 80022cc:	f004 f950 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80022d0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80022d2:	2800      	cmp	r0, #0
 80022d4:	d100      	bne.n	80022d8 <envelope_create_service+0x45e>
 80022d6:	2700      	movs	r7, #0
 80022d8:	238f      	movs	r3, #143	; 0x8f
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4698      	mov	r8, r3
 80022de:	44a0      	add	r8, r4
 80022e0:	4642      	mov	r2, r8
 80022e2:	4ba6      	ldr	r3, [pc, #664]	; (800257c <envelope_create_service+0x702>)
 80022e4:	6053      	str	r3, [r2, #4]
 80022e6:	4ba6      	ldr	r3, [pc, #664]	; (8002580 <envelope_create_service+0x706>)
 80022e8:	6093      	str	r3, [r2, #8]
 80022ea:	4ba6      	ldr	r3, [pc, #664]	; (8002584 <envelope_create_service+0x70a>)
 80022ec:	60d3      	str	r3, [r2, #12]
 80022ee:	464b      	mov	r3, r9
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <envelope_create_service+0x47c>
 80022f4:	e1b9      	b.n	800266a <envelope_create_service+0x7f0>
 80022f6:	49a4      	ldr	r1, [pc, #656]	; (8002588 <envelope_create_service+0x70e>)
 80022f8:	1c38      	adds	r0, r7, #0
 80022fa:	f00c fde1 	bl	800eec0 <__aeabi_fcmplt>
 80022fe:	4682      	mov	sl, r0
 8002300:	2800      	cmp	r0, #0
 8002302:	d000      	beq.n	8002306 <envelope_create_service+0x48c>
 8002304:	e1b4      	b.n	8002670 <envelope_create_service+0x7f6>
 8002306:	49a1      	ldr	r1, [pc, #644]	; (800258c <envelope_create_service+0x712>)
 8002308:	1c38      	adds	r0, r7, #0
 800230a:	f00c fded 	bl	800eee8 <__aeabi_fcmpgt>
 800230e:	2800      	cmp	r0, #0
 8002310:	d000      	beq.n	8002314 <envelope_create_service+0x49a>
 8002312:	e1af      	b.n	8002674 <envelope_create_service+0x7fa>
 8002314:	4643      	mov	r3, r8
 8002316:	63df      	str	r7, [r3, #60]	; 0x3c
 8002318:	464b      	mov	r3, r9
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <envelope_create_service+0x4a6>
 800231e:	e28c      	b.n	800283a <envelope_create_service+0x9c0>
 8002320:	4642      	mov	r2, r8
 8002322:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <envelope_create_service+0x716>)
 8002324:	007f      	lsls	r7, r7, #1
 8002326:	087f      	lsrs	r7, r7, #1
 8002328:	6393      	str	r3, [r2, #56]	; 0x38
 800232a:	499a      	ldr	r1, [pc, #616]	; (8002594 <envelope_create_service+0x71a>)
 800232c:	1c38      	adds	r0, r7, #0
 800232e:	f00c fddb 	bl	800eee8 <__aeabi_fcmpgt>
 8002332:	2800      	cmp	r0, #0
 8002334:	d000      	beq.n	8002338 <envelope_create_service+0x4be>
 8002336:	4f97      	ldr	r7, [pc, #604]	; (8002594 <envelope_create_service+0x71a>)
 8002338:	2191      	movs	r1, #145	; 0x91
 800233a:	1c38      	adds	r0, r7, #0
 800233c:	05c9      	lsls	r1, r1, #23
 800233e:	f00c f8c7 	bl	800e4d0 <__aeabi_fmul>
 8002342:	f010 fe7d 	bl	8013040 <roundf>
 8002346:	21da      	movs	r1, #218	; 0xda
 8002348:	0589      	lsls	r1, r1, #22
 800234a:	f00c f8c1 	bl	800e4d0 <__aeabi_fmul>
 800234e:	4992      	ldr	r1, [pc, #584]	; (8002598 <envelope_create_service+0x71e>)
 8002350:	f00c f8be 	bl	800e4d0 <__aeabi_fmul>
 8002354:	1c01      	adds	r1, r0, #0
 8002356:	1c07      	adds	r7, r0, #0
 8002358:	4890      	ldr	r0, [pc, #576]	; (800259c <envelope_create_service+0x722>)
 800235a:	f00c f9eb 	bl	800e734 <__aeabi_fsub>
 800235e:	4990      	ldr	r1, [pc, #576]	; (80025a0 <envelope_create_service+0x726>)
 8002360:	f00c f9e8 	bl	800e734 <__aeabi_fsub>
 8002364:	4680      	mov	r8, r0
 8002366:	1c01      	adds	r1, r0, #0
 8002368:	1c38      	adds	r0, r7, #0
 800236a:	f00c fda9 	bl	800eec0 <__aeabi_fcmplt>
 800236e:	2800      	cmp	r0, #0
 8002370:	d100      	bne.n	8002374 <envelope_create_service+0x4fa>
 8002372:	e183      	b.n	800267c <envelope_create_service+0x802>
 8002374:	2100      	movs	r1, #0
 8002376:	1c38      	adds	r0, r7, #0
 8002378:	f00a fa6f 	bl	800c85a <quarter_pi_cos_sin_f32.lto_priv.678>
 800237c:	2101      	movs	r1, #1
 800237e:	4681      	mov	r9, r0
 8002380:	1c38      	adds	r0, r7, #0
 8002382:	f00a fa6a 	bl	800c85a <quarter_pi_cos_sin_f32.lto_priv.678>
 8002386:	1c01      	adds	r1, r0, #0
 8002388:	4648      	mov	r0, r9
 800238a:	f00b ff8f 	bl	800e2ac <__aeabi_fdiv>
 800238e:	4985      	ldr	r1, [pc, #532]	; (80025a4 <envelope_create_service+0x72a>)
 8002390:	f00c f89e 	bl	800e4d0 <__aeabi_fmul>
 8002394:	4984      	ldr	r1, [pc, #528]	; (80025a8 <envelope_create_service+0x72e>)
 8002396:	1c07      	adds	r7, r0, #0
 8002398:	f00b fdee 	bl	800df78 <__aeabi_fadd>
 800239c:	1c39      	adds	r1, r7, #0
 800239e:	f00c f897 	bl	800e4d0 <__aeabi_fmul>
 80023a2:	4981      	ldr	r1, [pc, #516]	; (80025a8 <envelope_create_service+0x72e>)
 80023a4:	4680      	mov	r8, r0
 80023a6:	1c38      	adds	r0, r7, #0
 80023a8:	f00c f892 	bl	800e4d0 <__aeabi_fmul>
 80023ac:	21fe      	movs	r1, #254	; 0xfe
 80023ae:	0589      	lsls	r1, r1, #22
 80023b0:	f00b fde2 	bl	800df78 <__aeabi_fadd>
 80023b4:	1c01      	adds	r1, r0, #0
 80023b6:	4640      	mov	r0, r8
 80023b8:	f00b ff78 	bl	800e2ac <__aeabi_fdiv>
 80023bc:	1c01      	adds	r1, r0, #0
 80023be:	1c07      	adds	r7, r0, #0
 80023c0:	f00c f886 	bl	800e4d0 <__aeabi_fmul>
 80023c4:	21fe      	movs	r1, #254	; 0xfe
 80023c6:	0589      	lsls	r1, r1, #22
 80023c8:	f00b fdd6 	bl	800df78 <__aeabi_fadd>
 80023cc:	f010 fa22 	bl	8012814 <__ieee754_sqrtf>
 80023d0:	1c01      	adds	r1, r0, #0
 80023d2:	20fe      	movs	r0, #254	; 0xfe
 80023d4:	0580      	lsls	r0, r0, #22
 80023d6:	f00b ff69 	bl	800e2ac <__aeabi_fdiv>
 80023da:	2181      	movs	r1, #129	; 0x81
 80023dc:	4680      	mov	r8, r0
 80023de:	05c9      	lsls	r1, r1, #23
 80023e0:	1c38      	adds	r0, r7, #0
 80023e2:	f00c fd6d 	bl	800eec0 <__aeabi_fcmplt>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d100      	bne.n	80023ec <envelope_create_service+0x572>
 80023ea:	e15e      	b.n	80026aa <envelope_create_service+0x830>
 80023ec:	21fe      	movs	r1, #254	; 0xfe
 80023ee:	1c38      	adds	r0, r7, #0
 80023f0:	0589      	lsls	r1, r1, #22
 80023f2:	f00c fd79 	bl	800eee8 <__aeabi_fcmpgt>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	d100      	bne.n	80023fc <envelope_create_service+0x582>
 80023fa:	e149      	b.n	8002690 <envelope_create_service+0x816>
 80023fc:	218a      	movs	r1, #138	; 0x8a
 80023fe:	4640      	mov	r0, r8
 8002400:	05c9      	lsls	r1, r1, #23
 8002402:	f00c f865 	bl	800e4d0 <__aeabi_fmul>
 8002406:	21fc      	movs	r1, #252	; 0xfc
 8002408:	0589      	lsls	r1, r1, #22
 800240a:	f00b fdb5 	bl	800df78 <__aeabi_fadd>
 800240e:	f00c ff73 	bl	800f2f8 <__aeabi_f2iz>
 8002412:	0043      	lsls	r3, r0, #1
 8002414:	4698      	mov	r8, r3
 8002416:	4643      	mov	r3, r8
 8002418:	4642      	mov	r2, r8
 800241a:	2080      	movs	r0, #128	; 0x80
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4353      	muls	r3, r2
 8002420:	04c0      	lsls	r0, r0, #19
 8002422:	1ac0      	subs	r0, r0, r3
 8002424:	f00c ffd2 	bl	800f3cc <__aeabi_ui2f>
 8002428:	f010 f9f4 	bl	8012814 <__ieee754_sqrtf>
 800242c:	21fc      	movs	r1, #252	; 0xfc
 800242e:	0589      	lsls	r1, r1, #22
 8002430:	f00b fda2 	bl	800df78 <__aeabi_fadd>
 8002434:	f00c ff60 	bl	800f2f8 <__aeabi_f2iz>
 8002438:	0007      	movs	r7, r0
 800243a:	239f      	movs	r3, #159	; 0x9f
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4699      	mov	r9, r3
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	469a      	mov	sl, r3
 8002446:	4643      	mov	r3, r8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d000      	beq.n	800244e <envelope_create_service+0x5d4>
 800244c:	e151      	b.n	80026f2 <envelope_create_service+0x878>
 800244e:	229e      	movs	r2, #158	; 0x9e
 8002450:	21fc      	movs	r1, #252	; 0xfc
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	0589      	lsls	r1, r1, #22
 8002456:	50a1      	str	r1, [r4, r2]
 8002458:	4653      	mov	r3, sl
 800245a:	464a      	mov	r2, r9
 800245c:	50a3      	str	r3, [r4, r2]
 800245e:	23a0      	movs	r3, #160	; 0xa0
 8002460:	4642      	mov	r2, r8
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	50e2      	str	r2, [r4, r3]
 8002466:	3304      	adds	r3, #4
 8002468:	52e2      	strh	r2, [r4, r3]
 800246a:	465b      	mov	r3, fp
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <envelope_create_service+0x732>)
 800246e:	4950      	ldr	r1, [pc, #320]	; (80025b0 <envelope_create_service+0x736>)
 8002470:	2000      	movs	r0, #0
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	4798      	blx	r3
 8002476:	a80b      	add	r0, sp, #44	; 0x2c
 8002478:	f004 f87a 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800247c:	2800      	cmp	r0, #0
 800247e:	d010      	beq.n	80024a2 <envelope_create_service+0x628>
 8002480:	ab11      	add	r3, sp, #68	; 0x44
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <envelope_create_service+0x628>
 8002488:	23a4      	movs	r3, #164	; 0xa4
 800248a:	494a      	ldr	r1, [pc, #296]	; (80025b4 <envelope_create_service+0x73a>)
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	18e3      	adds	r3, r4, r3
 8002490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002492:	6059      	str	r1, [r3, #4]
 8002494:	4948      	ldr	r1, [pc, #288]	; (80025b8 <envelope_create_service+0x73e>)
 8002496:	63da      	str	r2, [r3, #60]	; 0x3c
 8002498:	6099      	str	r1, [r3, #8]
 800249a:	4a48      	ldr	r2, [pc, #288]	; (80025bc <envelope_create_service+0x742>)
 800249c:	4948      	ldr	r1, [pc, #288]	; (80025c0 <envelope_create_service+0x746>)
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
 80024a0:	60d9      	str	r1, [r3, #12]
 80024a2:	23b4      	movs	r3, #180	; 0xb4
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4699      	mov	r9, r3
 80024a8:	44a1      	add	r9, r4
 80024aa:	464a      	mov	r2, r9
 80024ac:	4b45      	ldr	r3, [pc, #276]	; (80025c4 <envelope_create_service+0x74a>)
 80024ae:	a80b      	add	r0, sp, #44	; 0x2c
 80024b0:	6053      	str	r3, [r2, #4]
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <envelope_create_service+0x74e>)
 80024b4:	6093      	str	r3, [r2, #8]
 80024b6:	4b45      	ldr	r3, [pc, #276]	; (80025cc <envelope_create_service+0x752>)
 80024b8:	60d3      	str	r3, [r2, #12]
 80024ba:	4b45      	ldr	r3, [pc, #276]	; (80025d0 <envelope_create_service+0x756>)
 80024bc:	6393      	str	r3, [r2, #56]	; 0x38
 80024be:	23c3      	movs	r3, #195	; 0xc3
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4698      	mov	r8, r3
 80024c4:	44a0      	add	r8, r4
 80024c6:	4642      	mov	r2, r8
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <envelope_create_service+0x75a>)
 80024ca:	6393      	str	r3, [r2, #56]	; 0x38
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <envelope_create_service+0x6ca>)
 80024ce:	6053      	str	r3, [r2, #4]
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <envelope_create_service+0x6d2>)
 80024d2:	6093      	str	r3, [r2, #8]
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <envelope_create_service+0x6d6>)
 80024d6:	60d3      	str	r3, [r2, #12]
 80024d8:	23d2      	movs	r3, #210	; 0xd2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	18e7      	adds	r7, r4, r3
 80024de:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <envelope_create_service+0x75e>)
 80024e0:	643b      	str	r3, [r7, #64]	; 0x40
 80024e2:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <envelope_create_service+0x762>)
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4b3e      	ldr	r3, [pc, #248]	; (80025e0 <envelope_create_service+0x766>)
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	4b3e      	ldr	r3, [pc, #248]	; (80025e4 <envelope_create_service+0x76a>)
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	0023      	movs	r3, r4
 80024f0:	3378      	adds	r3, #120	; 0x78
 80024f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80024f4:	3340      	adds	r3, #64	; 0x40
 80024f6:	67a3      	str	r3, [r4, #120]	; 0x78
 80024f8:	f7ff fcab 	bl	8001e52 <acc_base_configuration_noise_level_normalization_get>
 80024fc:	0023      	movs	r3, r4
 80024fe:	3339      	adds	r3, #57	; 0x39
 8002500:	33ff      	adds	r3, #255	; 0xff
 8002502:	2800      	cmp	r0, #0
 8002504:	d000      	beq.n	8002508 <envelope_create_service+0x68e>
 8002506:	e19c      	b.n	8002842 <envelope_create_service+0x9c8>
 8002508:	e06e      	b.n	80025e8 <envelope_create_service+0x76e>
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	200002b8 	.word	0x200002b8
 8002510:	0800c821 	.word	0x0800c821
 8002514:	0800a109 	.word	0x0800a109
 8002518:	0800a0b3 	.word	0x0800a0b3
 800251c:	0800a493 	.word	0x0800a493
 8002520:	08004d41 	.word	0x08004d41
 8002524:	08004ceb 	.word	0x08004ceb
 8002528:	08004ddf 	.word	0x08004ddf
 800252c:	08005031 	.word	0x08005031
 8002530:	0800494f 	.word	0x0800494f
 8002534:	08004935 	.word	0x08004935
 8002538:	080048e1 	.word	0x080048e1
 800253c:	08004db7 	.word	0x08004db7
 8002540:	08004bbd 	.word	0x08004bbd
 8002544:	08004e01 	.word	0x08004e01
 8002548:	08004a71 	.word	0x08004a71
 800254c:	08004b69 	.word	0x08004b69
 8002550:	08004dd7 	.word	0x08004dd7
 8002554:	080049b9 	.word	0x080049b9
 8002558:	08004dbf 	.word	0x08004dbf
 800255c:	08004e91 	.word	0x08004e91
 8002560:	0800a1f1 	.word	0x0800a1f1
 8002564:	0800a181 	.word	0x0800a181
 8002568:	0800a49b 	.word	0x0800a49b
 800256c:	0800a4a3 	.word	0x0800a4a3
 8002570:	08004b59 	.word	0x08004b59
 8002574:	08004b03 	.word	0x08004b03
 8002578:	08004dcf 	.word	0x08004dcf
 800257c:	08004af1 	.word	0x08004af1
 8002580:	08004a81 	.word	0x08004a81
 8002584:	08004dc7 	.word	0x08004dc7
 8002588:	3b843809 	.word	0x3b843809
 800258c:	3efdca08 	.word	0x3efdca08
 8002590:	08004fdf 	.word	0x08004fdf
 8002594:	3effffde 	.word	0x3effffde
 8002598:	40490fdb 	.word	0x40490fdb
 800259c:	3fc90fdb 	.word	0x3fc90fdb
 80025a0:	333bbd2e 	.word	0x333bbd2e
 80025a4:	3f9f8d77 	.word	0x3f9f8d77
 80025a8:	3fb504f3 	.word	0x3fb504f3
 80025ac:	0801bbb6 	.word	0x0801bbb6
 80025b0:	0801bbdf 	.word	0x0801bbdf
 80025b4:	0800a461 	.word	0x0800a461
 80025b8:	08009fb9 	.word	0x08009fb9
 80025bc:	0800a02d 	.word	0x0800a02d
 80025c0:	0800a01d 	.word	0x0800a01d
 80025c4:	08004de7 	.word	0x08004de7
 80025c8:	08004d59 	.word	0x08004d59
 80025cc:	08004dad 	.word	0x08004dad
 80025d0:	08004e5d 	.word	0x08004e5d
 80025d4:	08004ccf 	.word	0x08004ccf
 80025d8:	08000693 	.word	0x08000693
 80025dc:	08009fa3 	.word	0x08009fa3
 80025e0:	08009f39 	.word	0x08009f39
 80025e4:	08009fa1 	.word	0x08009fa1
 80025e8:	6033      	str	r3, [r6, #0]
 80025ea:	0023      	movs	r3, r4
 80025ec:	229c      	movs	r2, #156	; 0x9c
 80025ee:	3375      	adds	r3, #117	; 0x75
 80025f0:	0052      	lsls	r2, r2, #1
 80025f2:	33ff      	adds	r3, #255	; 0xff
 80025f4:	50a3      	str	r3, [r4, r2]
 80025f6:	323c      	adds	r2, #60	; 0x3c
 80025f8:	3344      	adds	r3, #68	; 0x44
 80025fa:	50a3      	str	r3, [r4, r2]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	3244      	adds	r2, #68	; 0x44
 8002602:	18e3      	adds	r3, r4, r3
 8002604:	50a3      	str	r3, [r4, r2]
 8002606:	238f      	movs	r3, #143	; 0x8f
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	18e3      	adds	r3, r4, r3
 800260c:	3248      	adds	r2, #72	; 0x48
 800260e:	50a3      	str	r3, [r4, r2]
 8002610:	a80b      	add	r0, sp, #44	; 0x2c
 8002612:	f003 ffad 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002616:	464b      	mov	r3, r9
 8002618:	2800      	cmp	r0, #0
 800261a:	d007      	beq.n	800262c <envelope_create_service+0x7b2>
 800261c:	aa11      	add	r2, sp, #68	; 0x44
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	2a00      	cmp	r2, #0
 8002622:	d003      	beq.n	800262c <envelope_create_service+0x7b2>
 8002624:	22a4      	movs	r2, #164	; 0xa4
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	50a3      	str	r3, [r4, r2]
 800262a:	18a3      	adds	r3, r4, r2
 800262c:	228f      	movs	r2, #143	; 0x8f
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	50a3      	str	r3, [r4, r2]
 8002632:	23b4      	movs	r3, #180	; 0xb4
 8002634:	4642      	mov	r2, r8
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	50e2      	str	r2, [r4, r3]
 800263a:	333c      	adds	r3, #60	; 0x3c
 800263c:	50e7      	str	r7, [r4, r3]
 800263e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002640:	6883      	ldr	r3, [r0, #8]
 8002642:	4798      	blx	r3
 8002644:	1e06      	subs	r6, r0, #0
 8002646:	d000      	beq.n	800264a <envelope_create_service+0x7d0>
 8002648:	e100      	b.n	800284c <envelope_create_service+0x9d2>
 800264a:	465b      	mov	r3, fp
 800264c:	4a87      	ldr	r2, [pc, #540]	; (800286c <envelope_create_service+0x9f2>)
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	4987      	ldr	r1, [pc, #540]	; (8002870 <envelope_create_service+0x9f6>)
 8002652:	4798      	blx	r3
 8002654:	e4c0      	b.n	8001fd8 <envelope_create_service+0x15e>
 8002656:	a80b      	add	r0, sp, #44	; 0x2c
 8002658:	f005 fb6a 	bl	8007d30 <acc_base_configuration_print.part.5>
 800265c:	e58a      	b.n	8002174 <envelope_create_service+0x2fa>
 800265e:	2300      	movs	r3, #0
 8002660:	4699      	mov	r9, r3
 8002662:	e5f5      	b.n	8002250 <envelope_create_service+0x3d6>
 8002664:	21bf      	movs	r1, #191	; 0xbf
 8002666:	0609      	lsls	r1, r1, #24
 8002668:	e60e      	b.n	8002288 <envelope_create_service+0x40e>
 800266a:	27fc      	movs	r7, #252	; 0xfc
 800266c:	05bf      	lsls	r7, r7, #22
 800266e:	e651      	b.n	8002314 <envelope_create_service+0x49a>
 8002670:	4f80      	ldr	r7, [pc, #512]	; (8002874 <envelope_create_service+0x9fa>)
 8002672:	e64f      	b.n	8002314 <envelope_create_service+0x49a>
 8002674:	27fc      	movs	r7, #252	; 0xfc
 8002676:	46d1      	mov	r9, sl
 8002678:	05bf      	lsls	r7, r7, #22
 800267a:	e64b      	b.n	8002314 <envelope_create_service+0x49a>
 800267c:	2101      	movs	r1, #1
 800267e:	4640      	mov	r0, r8
 8002680:	f00a f8eb 	bl	800c85a <quarter_pi_cos_sin_f32.lto_priv.678>
 8002684:	2100      	movs	r1, #0
 8002686:	4681      	mov	r9, r0
 8002688:	4640      	mov	r0, r8
 800268a:	f00a f8e6 	bl	800c85a <quarter_pi_cos_sin_f32.lto_priv.678>
 800268e:	e67a      	b.n	8002386 <envelope_create_service+0x50c>
 8002690:	218b      	movs	r1, #139	; 0x8b
 8002692:	4640      	mov	r0, r8
 8002694:	05c9      	lsls	r1, r1, #23
 8002696:	f00b ff1b 	bl	800e4d0 <__aeabi_fmul>
 800269a:	21fc      	movs	r1, #252	; 0xfc
 800269c:	0589      	lsls	r1, r1, #22
 800269e:	f00b fc6b 	bl	800df78 <__aeabi_fadd>
 80026a2:	f00c fe29 	bl	800f2f8 <__aeabi_f2iz>
 80026a6:	4680      	mov	r8, r0
 80026a8:	e6b5      	b.n	8002416 <envelope_create_service+0x59c>
 80026aa:	218c      	movs	r1, #140	; 0x8c
 80026ac:	1c38      	adds	r0, r7, #0
 80026ae:	05c9      	lsls	r1, r1, #23
 80026b0:	f00b ff0e 	bl	800e4d0 <__aeabi_fmul>
 80026b4:	4641      	mov	r1, r8
 80026b6:	f00b ff0b 	bl	800e4d0 <__aeabi_fmul>
 80026ba:	21fc      	movs	r1, #252	; 0xfc
 80026bc:	0589      	lsls	r1, r1, #22
 80026be:	f00b fc5b 	bl	800df78 <__aeabi_fadd>
 80026c2:	f00c fe19 	bl	800f2f8 <__aeabi_f2iz>
 80026c6:	0003      	movs	r3, r0
 80026c8:	0007      	movs	r7, r0
 80026ca:	4343      	muls	r3, r0
 80026cc:	2080      	movs	r0, #128	; 0x80
 80026ce:	04c0      	lsls	r0, r0, #19
 80026d0:	1ac0      	subs	r0, r0, r3
 80026d2:	f00c fe7b 	bl	800f3cc <__aeabi_ui2f>
 80026d6:	f010 f89d 	bl	8012814 <__ieee754_sqrtf>
 80026da:	21fc      	movs	r1, #252	; 0xfc
 80026dc:	0589      	lsls	r1, r1, #22
 80026de:	f00b fef7 	bl	800e4d0 <__aeabi_fmul>
 80026e2:	21fc      	movs	r1, #252	; 0xfc
 80026e4:	0589      	lsls	r1, r1, #22
 80026e6:	f00b fc47 	bl	800df78 <__aeabi_fadd>
 80026ea:	f00c fe05 	bl	800f2f8 <__aeabi_f2iz>
 80026ee:	4680      	mov	r8, r0
 80026f0:	e6a3      	b.n	800243a <envelope_create_service+0x5c0>
 80026f2:	4642      	mov	r2, r8
 80026f4:	4653      	mov	r3, sl
 80026f6:	b292      	uxth	r2, r2
 80026f8:	1a99      	subs	r1, r3, r2
 80026fa:	464b      	mov	r3, r9
 80026fc:	b289      	uxth	r1, r1
 80026fe:	b208      	sxth	r0, r1
 8002700:	52e0      	strh	r0, [r4, r3]
 8002702:	004b      	lsls	r3, r1, #1
 8002704:	4699      	mov	r9, r3
 8002706:	239f      	movs	r3, #159	; 0x9f
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	18e1      	adds	r1, r4, r3
 800270c:	464b      	mov	r3, r9
 800270e:	8088      	strh	r0, [r1, #4]
 8002710:	0052      	lsls	r2, r2, #1
 8002712:	b2b8      	uxth	r0, r7
 8002714:	1a82      	subs	r2, r0, r2
 8002716:	80ca      	strh	r2, [r1, #6]
 8002718:	22c0      	movs	r2, #192	; 0xc0
 800271a:	804b      	strh	r3, [r1, #2]
 800271c:	4643      	mov	r3, r8
 800271e:	0152      	lsls	r2, r2, #5
 8002720:	1ad2      	subs	r2, r2, r3
 8002722:	0052      	lsls	r2, r2, #1
 8002724:	1a10      	subs	r0, r2, r0
 8002726:	8108      	strh	r0, [r1, #8]
 8002728:	2f00      	cmp	r7, #0
 800272a:	d104      	bne.n	8002736 <envelope_create_service+0x8bc>
 800272c:	239e      	movs	r3, #158	; 0x9e
 800272e:	9a02      	ldr	r2, [sp, #8]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	50e2      	str	r2, [r4, r3]
 8002734:	e699      	b.n	800246a <envelope_create_service+0x5f0>
 8002736:	4652      	mov	r2, sl
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	4642      	mov	r2, r8
 800273c:	0090      	lsls	r0, r2, #2
 800273e:	4350      	muls	r0, r2
 8002740:	003a      	movs	r2, r7
 8002742:	437a      	muls	r2, r7
 8002744:	1880      	adds	r0, r0, r2
 8002746:	22fc      	movs	r2, #252	; 0xfc
 8002748:	0612      	lsls	r2, r2, #24
 800274a:	4694      	mov	ip, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	1bdb      	subs	r3, r3, r7
 8002750:	435b      	muls	r3, r3
 8002752:	4460      	add	r0, ip
 8002754:	0042      	lsls	r2, r0, #1
 8002756:	1a98      	subs	r0, r3, r2
 8002758:	4690      	mov	r8, r2
 800275a:	f00c fded 	bl	800f338 <__aeabi_i2f>
 800275e:	4682      	mov	sl, r0
 8002760:	4640      	mov	r0, r8
 8002762:	f00c fde9 	bl	800f338 <__aeabi_i2f>
 8002766:	4651      	mov	r1, sl
 8002768:	f00b fda0 	bl	800e2ac <__aeabi_fdiv>
 800276c:	4942      	ldr	r1, [pc, #264]	; (8002878 <envelope_create_service+0x9fe>)
 800276e:	4680      	mov	r8, r0
 8002770:	f00b fc02 	bl	800df78 <__aeabi_fadd>
 8002774:	4681      	mov	r9, r0
 8002776:	4650      	mov	r0, sl
 8002778:	f010 f84c 	bl	8012814 <__ieee754_sqrtf>
 800277c:	4682      	mov	sl, r0
 800277e:	2080      	movs	r0, #128	; 0x80
 8002780:	0180      	lsls	r0, r0, #6
 8002782:	1bc0      	subs	r0, r0, r7
 8002784:	0040      	lsls	r0, r0, #1
 8002786:	f00c fdd7 	bl	800f338 <__aeabi_i2f>
 800278a:	1c01      	adds	r1, r0, #0
 800278c:	4650      	mov	r0, sl
 800278e:	f00b fd8d 	bl	800e2ac <__aeabi_fdiv>
 8002792:	493a      	ldr	r1, [pc, #232]	; (800287c <envelope_create_service+0xa02>)
 8002794:	1c07      	adds	r7, r0, #0
 8002796:	4648      	mov	r0, r9
 8002798:	f00b fe9a 	bl	800e4d0 <__aeabi_fmul>
 800279c:	4649      	mov	r1, r9
 800279e:	f00b fe97 	bl	800e4d0 <__aeabi_fmul>
 80027a2:	4937      	ldr	r1, [pc, #220]	; (8002880 <envelope_create_service+0xa06>)
 80027a4:	f00b fbe8 	bl	800df78 <__aeabi_fadd>
 80027a8:	f010 f834 	bl	8012814 <__ieee754_sqrtf>
 80027ac:	4641      	mov	r1, r8
 80027ae:	f00b ffc1 	bl	800e734 <__aeabi_fsub>
 80027b2:	f010 f82f 	bl	8012814 <__ieee754_sqrtf>
 80027b6:	1c01      	adds	r1, r0, #0
 80027b8:	1c38      	adds	r0, r7, #0
 80027ba:	f00b fe89 	bl	800e4d0 <__aeabi_fmul>
 80027be:	4931      	ldr	r1, [pc, #196]	; (8002884 <envelope_create_service+0xa0a>)
 80027c0:	4680      	mov	r8, r0
 80027c2:	f00c fb7d 	bl	800eec0 <__aeabi_fcmplt>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d135      	bne.n	8002836 <envelope_create_service+0x9bc>
 80027ca:	21fe      	movs	r1, #254	; 0xfe
 80027cc:	4640      	mov	r0, r8
 80027ce:	0589      	lsls	r1, r1, #22
 80027d0:	f00c fb8a 	bl	800eee8 <__aeabi_fcmpgt>
 80027d4:	4f2c      	ldr	r7, [pc, #176]	; (8002888 <envelope_create_service+0xa0e>)
 80027d6:	2800      	cmp	r0, #0
 80027d8:	d022      	beq.n	8002820 <envelope_create_service+0x9a6>
 80027da:	20fe      	movs	r0, #254	; 0xfe
 80027dc:	4641      	mov	r1, r8
 80027de:	0580      	lsls	r0, r0, #22
 80027e0:	f00b fd64 	bl	800e2ac <__aeabi_fdiv>
 80027e4:	4680      	mov	r8, r0
 80027e6:	0038      	movs	r0, r7
 80027e8:	4642      	mov	r2, r8
 80027ea:	2109      	movs	r1, #9
 80027ec:	3078      	adds	r0, #120	; 0x78
 80027ee:	f00a f81b 	bl	800c828 <eval_even_poly_f32.lto_priv.679>
 80027f2:	1c01      	adds	r1, r0, #0
 80027f4:	4640      	mov	r0, r8
 80027f6:	f00b fe6b 	bl	800e4d0 <__aeabi_fmul>
 80027fa:	1c01      	adds	r1, r0, #0
 80027fc:	4823      	ldr	r0, [pc, #140]	; (800288c <envelope_create_service+0xa12>)
 80027fe:	f00b ff99 	bl	800e734 <__aeabi_fsub>
 8002802:	4923      	ldr	r1, [pc, #140]	; (8002890 <envelope_create_service+0xa16>)
 8002804:	f00b ff96 	bl	800e734 <__aeabi_fsub>
 8002808:	4922      	ldr	r1, [pc, #136]	; (8002894 <envelope_create_service+0xa1a>)
 800280a:	f00b fd4f 	bl	800e2ac <__aeabi_fdiv>
 800280e:	239e      	movs	r3, #158	; 0x9e
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	50e0      	str	r0, [r4, r3]
 8002814:	238f      	movs	r3, #143	; 0x8f
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	18e3      	adds	r3, r4, r3
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	6363      	str	r3, [r4, #52]	; 0x34
 800281e:	e62a      	b.n	8002476 <envelope_create_service+0x5fc>
 8002820:	0038      	movs	r0, r7
 8002822:	4642      	mov	r2, r8
 8002824:	2109      	movs	r1, #9
 8002826:	3078      	adds	r0, #120	; 0x78
 8002828:	f009 fffe 	bl	800c828 <eval_even_poly_f32.lto_priv.679>
 800282c:	1c01      	adds	r1, r0, #0
 800282e:	4640      	mov	r0, r8
 8002830:	f00b fe4e 	bl	800e4d0 <__aeabi_fmul>
 8002834:	e7e8      	b.n	8002808 <envelope_create_service+0x98e>
 8002836:	4818      	ldr	r0, [pc, #96]	; (8002898 <envelope_create_service+0xa1e>)
 8002838:	e7e6      	b.n	8002808 <envelope_create_service+0x98e>
 800283a:	4642      	mov	r2, r8
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <envelope_create_service+0xa22>)
 800283e:	6393      	str	r3, [r2, #56]	; 0x38
 8002840:	e7e8      	b.n	8002814 <envelope_create_service+0x99a>
 8002842:	0022      	movs	r2, r4
 8002844:	32f8      	adds	r2, #248	; 0xf8
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	0013      	movs	r3, r2
 800284a:	e6cd      	b.n	80025e8 <envelope_create_service+0x76e>
 800284c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800284e:	68c3      	ldr	r3, [r0, #12]
 8002850:	4798      	blx	r3
 8002852:	23e1      	movs	r3, #225	; 0xe1
 8002854:	9a01      	ldr	r2, [sp, #4]
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	50e2      	str	r2, [r4, r3]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <envelope_create_service+0xa26>)
 800285c:	606b      	str	r3, [r5, #4]
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <envelope_create_service+0xa2a>)
 8002860:	60ab      	str	r3, [r5, #8]
 8002862:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <envelope_create_service+0xa2e>)
 8002864:	60eb      	str	r3, [r5, #12]
 8002866:	f7ff fb97 	bl	8001f98 <envelope_create_service+0x11e>
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	0801ba93 	.word	0x0801ba93
 8002870:	0801bbf7 	.word	0x0801bbf7
 8002874:	3b843809 	.word	0x3b843809
 8002878:	3f15f61a 	.word	0x3f15f61a
 800287c:	3fb504f3 	.word	0x3fb504f3
 8002880:	3f95f61a 	.word	0x3f95f61a
 8002884:	bf800000 	.word	0xbf800000
 8002888:	080154f8 	.word	0x080154f8
 800288c:	3fc90fdb 	.word	0x3fc90fdb
 8002890:	333bbd2e 	.word	0x333bbd2e
 8002894:	40490fdb 	.word	0x40490fdb
 8002898:	7fc00000 	.word	0x7fc00000
 800289c:	08004b01 	.word	0x08004b01
 80028a0:	08005885 	.word	0x08005885
 80028a4:	08005871 	.word	0x08005871
 80028a8:	08005fa1 	.word	0x08005fa1

080028ac <acc_base_configuration_sparse_sweeps_per_frame_get>:
 80028ac:	b510      	push	{r4, lr}
 80028ae:	0004      	movs	r4, r0
 80028b0:	f003 fe5e 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80028b4:	2300      	movs	r3, #0
 80028b6:	4298      	cmp	r0, r3
 80028b8:	d001      	beq.n	80028be <acc_base_configuration_sparse_sweeps_per_frame_get+0x12>
 80028ba:	3460      	adds	r4, #96	; 0x60
 80028bc:	8823      	ldrh	r3, [r4, #0]
 80028be:	0018      	movs	r0, r3
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <sparse_data_malloc>:
int8_t sparse_data_malloc(void){
 80028c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 80028c4:	4d13      	ldr	r5, [pc, #76]	; (8002914 <sparse_data_malloc+0x52>)
 80028c6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80028c8:	0020      	movs	r0, r4
 80028ca:	f7fd fc29 	bl	8000120 <acc_service_configuration_valid>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d101      	bne.n	80028d6 <sparse_data_malloc+0x14>
 80028d2:	87a8      	strh	r0, [r5, #60]	; 0x3c
 80028d4:	deff      	udf	#255	; 0xff
 80028d6:	6920      	ldr	r0, [r4, #16]
 80028d8:	f7ff ffe8 	bl	80028ac <acc_base_configuration_sparse_sweeps_per_frame_get>
	bins = sparse_metadata.data_length/sweeps;
 80028dc:	002b      	movs	r3, r5
 80028de:	0006      	movs	r6, r0
 80028e0:	3340      	adds	r3, #64	; 0x40
	sweeps = acc_service_sparse_configuration_sweeps_per_frame_get (sparse_config);
 80028e2:	87a8      	strh	r0, [r5, #60]	; 0x3c
	bins = sparse_metadata.data_length/sweeps;
 80028e4:	8918      	ldrh	r0, [r3, #8]
 80028e6:	0031      	movs	r1, r6
 80028e8:	f00c f924 	bl	800eb34 <__udivsi3>
 80028ec:	2754      	movs	r7, #84	; 0x54
	if(far_active){
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <sparse_data_malloc+0x56>)
	bins = sparse_metadata.data_length/sweeps;
 80028f0:	b284      	uxth	r4, r0
	if(far_active){
 80028f2:	7c1a      	ldrb	r2, [r3, #16]
	bins = sparse_metadata.data_length/sweeps;
 80028f4:	53ec      	strh	r4, [r5, r7]
	if(far_active){
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	d006      	beq.n	8002908 <sparse_data_malloc+0x46>
		bins += sparse_metadata_far.data_length/sweeps;
 80028fa:	8b98      	ldrh	r0, [r3, #28]
 80028fc:	0031      	movs	r1, r6
 80028fe:	f00c f919 	bl	800eb34 <__udivsi3>
 8002902:	1824      	adds	r4, r4, r0
 8002904:	b2a4      	uxth	r4, r4
 8002906:	53ec      	strh	r4, [r5, r7]
	return data_malloc(sweeps,bins);
 8002908:	0030      	movs	r0, r6
 800290a:	0021      	movs	r1, r4
 800290c:	f7fe fb8a 	bl	8001024 <data_malloc>
}
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	2000010c 	.word	0x2000010c
 8002918:	2000008c 	.word	0x2000008c

0800291c <acc_base_configuration_wg_duration_get>:
 800291c:	b510      	push	{r4, lr}
 800291e:	0004      	movs	r4, r0
 8002920:	f003 fe26 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002924:	2300      	movs	r3, #0
 8002926:	4298      	cmp	r0, r3
 8002928:	d001      	beq.n	800292e <acc_base_configuration_wg_duration_get+0x12>
 800292a:	3404      	adds	r4, #4
 800292c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800292e:	0018      	movs	r0, r3
 8002930:	bd10      	pop	{r4, pc}

08002932 <acc_base_configuration_integrator_get>:
 8002932:	b510      	push	{r4, lr}
 8002934:	0004      	movs	r4, r0
 8002936:	f003 fe1b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800293a:	2300      	movs	r3, #0
 800293c:	4298      	cmp	r0, r3
 800293e:	d001      	beq.n	8002944 <acc_base_configuration_integrator_get+0x12>
 8002940:	3402      	adds	r4, #2
 8002942:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002944:	0018      	movs	r0, r3
 8002946:	bd10      	pop	{r4, pc}

08002948 <acc_base_configuration_update_rate_get>:
 8002948:	b510      	push	{r4, lr}
 800294a:	0004      	movs	r4, r0
 800294c:	f003 fe10 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002950:	2800      	cmp	r0, #0
 8002952:	d00b      	beq.n	800296c <acc_base_configuration_update_rate_get+0x24>
 8002954:	7920      	ldrb	r0, [r4, #4]
 8002956:	2803      	cmp	r0, #3
 8002958:	d808      	bhi.n	800296c <acc_base_configuration_update_rate_get+0x24>
 800295a:	f00c f8d7 	bl	800eb0c <__gnu_thumb1_case_uqi>
 800295e:	0202      	.short	0x0202
 8002960:	0505      	.short	0x0505
 8002962:	20ff      	movs	r0, #255	; 0xff
 8002964:	05c0      	lsls	r0, r0, #23
 8002966:	bd10      	pop	{r4, pc}
 8002968:	68a0      	ldr	r0, [r4, #8]
 800296a:	e7fc      	b.n	8002966 <acc_base_configuration_update_rate_get+0x1e>
 800296c:	4800      	ldr	r0, [pc, #0]	; (8002970 <acc_base_configuration_update_rate_get+0x28>)
 800296e:	e7fa      	b.n	8002966 <acc_base_configuration_update_rate_get+0x1e>
 8002970:	7fc00000 	.word	0x7fc00000

08002974 <acc_base_configuration_repetition_mode_get>:
 8002974:	b510      	push	{r4, lr}
 8002976:	0004      	movs	r4, r0
 8002978:	f003 fdfa 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800297c:	2300      	movs	r3, #0
 800297e:	4298      	cmp	r0, r3
 8002980:	d000      	beq.n	8002984 <acc_base_configuration_repetition_mode_get+0x10>
 8002982:	7923      	ldrb	r3, [r4, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	bd10      	pop	{r4, pc}

08002988 <acc_base_configuration_hw_accelerated_average_samples_get>:
 8002988:	b510      	push	{r4, lr}
 800298a:	0004      	movs	r4, r0
 800298c:	f003 fdf0 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002990:	2300      	movs	r3, #0
 8002992:	4298      	cmp	r0, r3
 8002994:	d001      	beq.n	800299a <acc_base_configuration_hw_accelerated_average_samples_get+0x12>
 8002996:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8002998:	b2db      	uxtb	r3, r3
 800299a:	0018      	movs	r0, r3
 800299c:	bd10      	pop	{r4, pc}

0800299e <acc_base_configuration_decrease_tx_emission_get>:
 800299e:	b510      	push	{r4, lr}
 80029a0:	0004      	movs	r4, r0
 80029a2:	f003 fde5 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d001      	beq.n	80029ae <acc_base_configuration_decrease_tx_emission_get+0x10>
 80029aa:	3448      	adds	r4, #72	; 0x48
 80029ac:	7820      	ldrb	r0, [r4, #0]
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <acc_base_configuration_tx_disable_get>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	0004      	movs	r4, r0
 80029b4:	f003 fddc 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d001      	beq.n	80029c0 <acc_base_configuration_tx_disable_get+0x10>
 80029bc:	3447      	adds	r4, #71	; 0x47
 80029be:	7820      	ldrb	r0, [r4, #0]
 80029c0:	bd10      	pop	{r4, pc}

080029c2 <acc_base_configuration_power_save_mode_get>:
 80029c2:	b510      	push	{r4, lr}
 80029c4:	0004      	movs	r4, r0
 80029c6:	f003 fdd3 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80029ca:	2300      	movs	r3, #0
 80029cc:	4298      	cmp	r0, r3
 80029ce:	d000      	beq.n	80029d2 <acc_base_configuration_power_save_mode_get+0x10>
 80029d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029d2:	0018      	movs	r0, r3
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <acc_base_configuration_sensor_get>:
 80029d6:	b510      	push	{r4, lr}
 80029d8:	0004      	movs	r4, r0
 80029da:	f003 fdc9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80029de:	2300      	movs	r3, #0
 80029e0:	4298      	cmp	r0, r3
 80029e2:	d000      	beq.n	80029e6 <acc_base_configuration_sensor_get+0x10>
 80029e4:	68e3      	ldr	r3, [r4, #12]
 80029e6:	0018      	movs	r0, r3
 80029e8:	bd10      	pop	{r4, pc}

080029ea <acc_service_handle_valid>:
 80029ea:	b510      	push	{r4, lr}
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d004      	beq.n	80029fa <acc_service_handle_valid+0x10>
 80029f0:	6802      	ldr	r2, [r0, #0]
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <acc_service_handle_valid+0x22>)
 80029f4:	2001      	movs	r0, #1
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d006      	beq.n	8002a08 <acc_service_handle_valid+0x1e>
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <acc_service_handle_valid+0x26>)
 80029fc:	2000      	movs	r0, #0
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <acc_service_handle_valid+0x2a>)
 8002a02:	4905      	ldr	r1, [pc, #20]	; (8002a18 <acc_service_handle_valid+0x2e>)
 8002a04:	4798      	blx	r3
 8002a06:	2000      	movs	r0, #0
 8002a08:	bd10      	pop	{r4, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	acc09ee8 	.word	0xacc09ee8
 8002a10:	200002b8 	.word	0x200002b8
 8002a14:	0801bc09 	.word	0x0801bc09
 8002a18:	0801cd04 	.word	0x0801cd04

08002a1c <acc_service_deactivate>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	0004      	movs	r4, r0
 8002a20:	f7ff ffe3 	bl	80029ea <acc_service_handle_valid>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d02d      	beq.n	8002a84 <acc_service_deactivate+0x68>
 8002a28:	4d1a      	ldr	r5, [pc, #104]	; (8002a94 <acc_service_deactivate+0x78>)
 8002a2a:	002b      	movs	r3, r5
 8002a2c:	332d      	adds	r3, #45	; 0x2d
 8002a2e:	781e      	ldrb	r6, [r3, #0]
 8002a30:	2e00      	cmp	r6, #0
 8002a32:	d027      	beq.n	8002a84 <acc_service_deactivate+0x68>
 8002a34:	7a63      	ldrb	r3, [r4, #9]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d122      	bne.n	8002a80 <acc_service_deactivate+0x64>
 8002a3a:	6863      	ldr	r3, [r4, #4]
 8002a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a3e:	d821      	bhi.n	8002a84 <acc_service_deactivate+0x68>
 8002a40:	002a      	movs	r2, r5
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	3256      	adds	r2, #86	; 0x56
 8002a46:	5c9f      	ldrb	r7, [r3, r2]
 8002a48:	2f00      	cmp	r7, #0
 8002a4a:	d11b      	bne.n	8002a84 <acc_service_deactivate+0x68>
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]
 8002a50:	7ee3      	ldrb	r3, [r4, #27]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <acc_service_deactivate+0x42>
 8002a56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002a58:	f003 fb34 	bl	80060c4 <acc_rss_integration_sensor_device_power_off>
 8002a5c:	76e7      	strb	r7, [r4, #27]
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	2b2a      	cmp	r3, #42	; 0x2a
 8002a62:	d805      	bhi.n	8002a70 <acc_service_deactivate+0x54>
 8002a64:	002a      	movs	r2, r5
 8002a66:	0059      	lsls	r1, r3, #1
 8002a68:	3256      	adds	r2, #86	; 0x56
 8002a6a:	1852      	adds	r2, r2, r1
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	7051      	strb	r1, [r2, #1]
 8002a70:	2201      	movs	r2, #1
 8002a72:	7262      	strb	r2, [r4, #9]
 8002a74:	2b2a      	cmp	r3, #42	; 0x2a
 8002a76:	d803      	bhi.n	8002a80 <acc_service_deactivate+0x64>
 8002a78:	4093      	lsls	r3, r2
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	3556      	adds	r5, #86	; 0x56
 8002a7e:	555a      	strb	r2, [r3, r5]
 8002a80:	0030      	movs	r0, r6
 8002a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <acc_service_deactivate+0x7c>)
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <acc_service_deactivate+0x80>)
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	4905      	ldr	r1, [pc, #20]	; (8002aa0 <acc_service_deactivate+0x84>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4798      	blx	r3
 8002a90:	2600      	movs	r6, #0
 8002a92:	e7f5      	b.n	8002a80 <acc_service_deactivate+0x64>
 8002a94:	2000010c 	.word	0x2000010c
 8002a98:	200002b8 	.word	0x200002b8
 8002a9c:	0801bc18 	.word	0x0801bc18
 8002aa0:	0801cd04 	.word	0x0801cd04

08002aa4 <acc_service_destroy>:
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <acc_service_destroy+0x4c>)
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	7a1b      	ldrb	r3, [r3, #8]
 8002aaa:	0004      	movs	r4, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d012      	beq.n	8002ad6 <acc_service_destroy+0x32>
 8002ab0:	6800      	ldr	r0, [r0, #0]
 8002ab2:	f7ff ff9a 	bl	80029ea <acc_service_handle_valid>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	d00c      	beq.n	8002ad4 <acc_service_destroy+0x30>
 8002aba:	6820      	ldr	r0, [r4, #0]
 8002abc:	f7ff ffae 	bl	8002a1c <acc_service_deactivate>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	68c3      	ldr	r3, [r0, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d000      	beq.n	8002aca <acc_service_destroy+0x26>
 8002ac8:	4798      	blx	r3
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	f7fd fdf7 	bl	80006be <destroy_handle>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	6023      	str	r3, [r4, #0]
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <acc_service_destroy+0x50>)
 8002ad8:	001a      	movs	r2, r3
 8002ada:	3230      	adds	r2, #48	; 0x30
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	2a00      	cmp	r2, #0
 8002ae0:	d0f8      	beq.n	8002ad4 <acc_service_destroy+0x30>
 8002ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <acc_service_destroy+0x54>)
 8002ae6:	4905      	ldr	r1, [pc, #20]	; (8002afc <acc_service_destroy+0x58>)
 8002ae8:	2001      	movs	r0, #1
 8002aea:	4798      	blx	r3
 8002aec:	e7f2      	b.n	8002ad4 <acc_service_destroy+0x30>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	2000008c 	.word	0x2000008c
 8002af4:	200002b8 	.word	0x200002b8
 8002af8:	0801b9d6 	.word	0x0801b9d6
 8002afc:	0801b917 	.word	0x0801b917

08002b00 <stopService>:
void stopService(void){
 8002b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b02:	46d6      	mov	lr, sl
 8002b04:	4646      	mov	r6, r8
 8002b06:	464f      	mov	r7, r9
 8002b08:	b5c0      	push	{r6, r7, lr}
    DBG_PRINTLN("stopping service");
 8002b0a:	4f55      	ldr	r7, [pc, #340]	; (8002c60 <stopService+0x160>)
void stopService(void){
 8002b0c:	b082      	sub	sp, #8
    DBG_PRINTLN("stopping service");
 8002b0e:	0038      	movs	r0, r7
 8002b10:	f012 f8f8 	bl	8014d04 <__wrap_printf>
 8002b14:	4853      	ldr	r0, [pc, #332]	; (8002c64 <stopService+0x164>)
 8002b16:	f012 f8f5 	bl	8014d04 <__wrap_printf>
 8002b1a:	4e53      	ldr	r6, [pc, #332]	; (8002c68 <stopService+0x168>)
 8002b1c:	4d53      	ldr	r5, [pc, #332]	; (8002c6c <stopService+0x16c>)
 8002b1e:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <stopService+0x170>)
 8002b20:	0031      	movs	r1, r6
 8002b22:	0028      	movs	r0, r5
 8002b24:	f012 f8ee 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 8002b28:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <stopService+0x174>)
	return *regptr;
 8002b2a:	4c53      	ldr	r4, [pc, #332]	; (8002c78 <stopService+0x178>)
	REGADRERR = -1;
 8002b2c:	4698      	mov	r8, r3
 8002b2e:	2301      	movs	r3, #1
 8002b30:	4642      	mov	r2, r8
 8002b32:	425b      	negs	r3, r3
 8002b34:	6013      	str	r3, [r2, #0]
    if(!(RegInt_getreg(0x06) && 0x00000001)){DBG_PRINTLN("no active service"); return;}
 8002b36:	69a3      	ldr	r3, [r4, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d02f      	beq.n	8002b9c <stopService+0x9c>
	return *regptr;
 8002b3c:	68a3      	ldr	r3, [r4, #8]
    if(service_type == 0x02){handle = envelope_handle;}
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d008      	beq.n	8002b54 <stopService+0x54>
    else if(service_type == 0x04){handle = sparse_handle;}
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d100      	bne.n	8002b48 <stopService+0x48>
 8002b46:	e078      	b.n	8002c3a <stopService+0x13a>
}
 8002b48:	b002      	add	sp, #8
 8002b4a:	bc1c      	pop	{r2, r3, r4}
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	46a2      	mov	sl, r4
 8002b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(service_type == 0x02){handle = envelope_handle;}
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <stopService+0x17c>)
 8002b56:	469a      	mov	sl, r3
 8002b58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002b5a:	9001      	str	r0, [sp, #4]
	if(acc_service_deactivate(handle)){
 8002b5c:	f7ff ff5e 	bl	8002a1c <acc_service_deactivate>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	d128      	bne.n	8002bb6 <stopService+0xb6>
		ERR_PRINTLN("sparse service deactivation fail");
 8002b64:	4846      	ldr	r0, [pc, #280]	; (8002c80 <stopService+0x180>)
 8002b66:	f012 f8cd 	bl	8014d04 <__wrap_printf>
 8002b6a:	4846      	ldr	r0, [pc, #280]	; (8002c84 <stopService+0x184>)
 8002b6c:	f012 f8ca 	bl	8014d04 <__wrap_printf>
 8002b70:	4a45      	ldr	r2, [pc, #276]	; (8002c88 <stopService+0x188>)
 8002b72:	0031      	movs	r1, r6
 8002b74:	0028      	movs	r0, r5
 8002b76:	f012 f8c5 	bl	8014d04 <__wrap_printf>
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <stopService+0x18c>)
 8002b7c:	4699      	mov	r9, r3
	if(far_active){
 8002b7e:	464b      	mov	r3, r9
 8002b80:	7c1b      	ldrb	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d136      	bne.n	8002bf4 <stopService+0xf4>
	REGADRERR = -1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	4642      	mov	r2, r8
 8002b8a:	425b      	negs	r3, r3
 8002b8c:	6013      	str	r3, [r2, #0]
	return *regptr;
 8002b8e:	69a3      	ldr	r3, [r4, #24]
	if (!(*regptr == (uint32_t)-1)){
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	d0d9      	beq.n	8002b48 <stopService+0x48>
    setbits &= 0xFFFFFFFC;
 8002b94:	2203      	movs	r2, #3
 8002b96:	4393      	bics	r3, r2
		*regptr = val;
 8002b98:	61a3      	str	r3, [r4, #24]
 8002b9a:	e7d5      	b.n	8002b48 <stopService+0x48>
    if(!(RegInt_getreg(0x06) && 0x00000001)){DBG_PRINTLN("no active service"); return;}
 8002b9c:	0038      	movs	r0, r7
 8002b9e:	f012 f8b1 	bl	8014d04 <__wrap_printf>
 8002ba2:	483b      	ldr	r0, [pc, #236]	; (8002c90 <stopService+0x190>)
 8002ba4:	f012 f8ae 	bl	8014d04 <__wrap_printf>
 8002ba8:	22a9      	movs	r2, #169	; 0xa9
 8002baa:	0031      	movs	r1, r6
 8002bac:	0092      	lsls	r2, r2, #2
 8002bae:	0028      	movs	r0, r5
 8002bb0:	f012 f8a8 	bl	8014d04 <__wrap_printf>
 8002bb4:	e7c8      	b.n	8002b48 <stopService+0x48>
		acc_service_destroy(&handle);	
 8002bb6:	a801      	add	r0, sp, #4
 8002bb8:	f7ff ff74 	bl	8002aa4 <acc_service_destroy>
	free(data);
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <stopService+0x18c>)
 8002bbe:	4699      	mov	r9, r3
 8002bc0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002bc2:	f012 fc65 	bl	8015490 <free>
	data = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	464a      	mov	r2, r9
	bins = 0;
 8002bca:	2154      	movs	r1, #84	; 0x54
	data = NULL;
 8002bcc:	6293      	str	r3, [r2, #40]	; 0x28
	sweeps = 0;
 8002bce:	4a31      	ldr	r2, [pc, #196]	; (8002c94 <stopService+0x194>)
		DBG_PRINTLN("sparse service destroyed");
 8002bd0:	0038      	movs	r0, r7
	bins = 0;
 8002bd2:	5253      	strh	r3, [r2, r1]
	sweeps = 0;
 8002bd4:	8793      	strh	r3, [r2, #60]	; 0x3c
		DBG_PRINTLN("sparse service destroyed");
 8002bd6:	f012 f895 	bl	8014d04 <__wrap_printf>
 8002bda:	482f      	ldr	r0, [pc, #188]	; (8002c98 <stopService+0x198>)
 8002bdc:	f012 f892 	bl	8014d04 <__wrap_printf>
 8002be0:	22ac      	movs	r2, #172	; 0xac
 8002be2:	0031      	movs	r1, r6
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	0028      	movs	r0, r5
 8002be8:	f012 f88c 	bl	8014d04 <__wrap_printf>
	if(far_active){
 8002bec:	464b      	mov	r3, r9
 8002bee:	7c1b      	ldrb	r3, [r3, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0c8      	beq.n	8002b86 <stopService+0x86>
	if(acc_service_deactivate(sparse_handle_far)){
 8002bf4:	4653      	mov	r3, sl
 8002bf6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002bf8:	f7ff ff10 	bl	8002a1c <acc_service_deactivate>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d021      	beq.n	8002c44 <stopService+0x144>
		acc_service_destroy(&sparse_handle_far);	
 8002c00:	4650      	mov	r0, sl
 8002c02:	3034      	adds	r0, #52	; 0x34
 8002c04:	f7ff ff4e 	bl	8002aa4 <acc_service_destroy>
	free(data);
 8002c08:	464b      	mov	r3, r9
 8002c0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c0c:	f012 fc40 	bl	8015490 <free>
	data = NULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	464a      	mov	r2, r9
	bins = 0;
 8002c14:	2154      	movs	r1, #84	; 0x54
	data = NULL;
 8002c16:	6293      	str	r3, [r2, #40]	; 0x28
	sweeps = 0;
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <stopService+0x194>)
		DBG_PRINTLN("far sparse service destroyed");
 8002c1a:	0038      	movs	r0, r7
	bins = 0;
 8002c1c:	5253      	strh	r3, [r2, r1]
	sweeps = 0;
 8002c1e:	8793      	strh	r3, [r2, #60]	; 0x3c
		far_active = 0;
 8002c20:	464a      	mov	r2, r9
 8002c22:	7413      	strb	r3, [r2, #16]
		DBG_PRINTLN("far sparse service destroyed");
 8002c24:	f012 f86e 	bl	8014d04 <__wrap_printf>
 8002c28:	481c      	ldr	r0, [pc, #112]	; (8002c9c <stopService+0x19c>)
 8002c2a:	f012 f86b 	bl	8014d04 <__wrap_printf>
 8002c2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <stopService+0x1a0>)
 8002c30:	0031      	movs	r1, r6
 8002c32:	0028      	movs	r0, r5
 8002c34:	f012 f866 	bl	8014d04 <__wrap_printf>
 8002c38:	e7a5      	b.n	8002b86 <stopService+0x86>
    else if(service_type == 0x04){handle = sparse_handle;}
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <stopService+0x17c>)
 8002c3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c3e:	469a      	mov	sl, r3
 8002c40:	9001      	str	r0, [sp, #4]
 8002c42:	e78b      	b.n	8002b5c <stopService+0x5c>
		ERR_PRINTLN("far sparse service deactivation fail");
 8002c44:	480e      	ldr	r0, [pc, #56]	; (8002c80 <stopService+0x180>)
 8002c46:	f012 f85d 	bl	8014d04 <__wrap_printf>
 8002c4a:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <stopService+0x1a4>)
 8002c4c:	f012 f85a 	bl	8014d04 <__wrap_printf>
 8002c50:	22af      	movs	r2, #175	; 0xaf
 8002c52:	0031      	movs	r1, r6
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	0028      	movs	r0, r5
 8002c58:	f012 f854 	bl	8014d04 <__wrap_printf>
 8002c5c:	e793      	b.n	8002b86 <stopService+0x86>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	0801bd4c 	.word	0x0801bd4c
 8002c64:	0801bfb8 	.word	0x0801bfb8
 8002c68:	0801bcb8 	.word	0x0801bcb8
 8002c6c:	0801bccc 	.word	0x0801bccc
 8002c70:	000002a1 	.word	0x000002a1
 8002c74:	200003b0 	.word	0x200003b0
 8002c78:	200003b4 	.word	0x200003b4
 8002c7c:	2000018c 	.word	0x2000018c
 8002c80:	0801bdb0 	.word	0x0801bdb0
 8002c84:	0801c004 	.word	0x0801c004
 8002c88:	000002b2 	.word	0x000002b2
 8002c8c:	2000008c 	.word	0x2000008c
 8002c90:	0801bfcc 	.word	0x0801bfcc
 8002c94:	2000010c 	.word	0x2000010c
 8002c98:	0801bfe4 	.word	0x0801bfe4
 8002c9c:	0801bfe0 	.word	0x0801bfe0
 8002ca0:	000002ba 	.word	0x000002ba
 8002ca4:	0801c000 	.word	0x0801c000

08002ca8 <createService>:
int8_t createService(void){
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	46de      	mov	lr, fp
 8002cac:	4657      	mov	r7, sl
 8002cae:	464e      	mov	r6, r9
 8002cb0:	4645      	mov	r5, r8
 8002cb2:	b5e0      	push	{r5, r6, r7, lr}
    DBG_PRINTLN("creating service");
 8002cb4:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <createService+0x1a8>)
int8_t createService(void){
 8002cb6:	b085      	sub	sp, #20
    DBG_PRINTLN("creating service");
 8002cb8:	0018      	movs	r0, r3
 8002cba:	469a      	mov	sl, r3
 8002cbc:	f012 f822 	bl	8014d04 <__wrap_printf>
 8002cc0:	4864      	ldr	r0, [pc, #400]	; (8002e54 <createService+0x1ac>)
 8002cc2:	f012 f81f 	bl	8014d04 <__wrap_printf>
 8002cc6:	4e64      	ldr	r6, [pc, #400]	; (8002e58 <createService+0x1b0>)
 8002cc8:	4d64      	ldr	r5, [pc, #400]	; (8002e5c <createService+0x1b4>)
 8002cca:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <createService+0x1b8>)
 8002ccc:	0031      	movs	r1, r6
 8002cce:	0028      	movs	r0, r5
 8002cd0:	f012 f818 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4c63      	ldr	r4, [pc, #396]	; (8002e64 <createService+0x1bc>)
 8002cd8:	425b      	negs	r3, r3
 8002cda:	469b      	mov	fp, r3
 8002cdc:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002cde:	4b62      	ldr	r3, [pc, #392]	; (8002e68 <createService+0x1c0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
    if(service_type == 0x02){success = createEnvelopeService();}
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d100      	bne.n	8002ce8 <createService+0x40>
 8002ce6:	e0dd      	b.n	8002ea4 <createService+0x1fc>
    else if(service_type == 0x04){success = createSparseService();}
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d00b      	beq.n	8002d04 <createService+0x5c>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 8002cec:	2080      	movs	r0, #128	; 0x80
 8002cee:	02c0      	lsls	r0, r0, #11
 8002cf0:	f007 ff34 	bl	800ab5c <Reg_regor.constprop.76>
 8002cf4:	2000      	movs	r0, #0
}
 8002cf6:	b005      	add	sp, #20
 8002cf8:	bc3c      	pop	{r2, r3, r4, r5}
 8002cfa:	4690      	mov	r8, r2
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	46a2      	mov	sl, r4
 8002d00:	46ab      	mov	fp, r5
 8002d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return *regptr;
 8002d04:	4c59      	ldr	r4, [pc, #356]	; (8002e6c <createService+0x1c4>)
uint32_t roundDown(uint32_t numToRound, uint32_t multiple)
{
    if (multiple == 0)
        return numToRound;

    uint32_t remainder = numToRound % multiple;
 8002d06:	213c      	movs	r1, #60	; 0x3c
 8002d08:	6827      	ldr	r7, [r4, #0]
 8002d0a:	0038      	movs	r0, r7
 8002d0c:	f00b ff98 	bl	800ec40 <__aeabi_uidivmod>
 8002d10:	6864      	ldr	r4, [r4, #4]
    if (remainder == 0)
        return numToRound;

    return numToRound - remainder;
 8002d12:	1a7f      	subs	r7, r7, r1
    uint32_t remainder = numToRound % multiple;
 8002d14:	0020      	movs	r0, r4
 8002d16:	213c      	movs	r1, #60	; 0x3c
 8002d18:	f00b ff92 	bl	800ec40 <__aeabi_uidivmod>
	if (len_reg < 1891){
 8002d1c:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <createService+0x1c8>)
    return numToRound - remainder;
 8002d1e:	1a64      	subs	r4, r4, r1
 8002d20:	469b      	mov	fp, r3
 8002d22:	429c      	cmp	r4, r3
 8002d24:	d800      	bhi.n	8002d28 <createService+0x80>
 8002d26:	e2d2      	b.n	80032ce <createService+0x626>
	}else if (len_reg < 3811){
 8002d28:	4b52      	ldr	r3, [pc, #328]	; (8002e74 <createService+0x1cc>)
 8002d2a:	429c      	cmp	r4, r3
 8002d2c:	d900      	bls.n	8002d30 <createService+0x88>
 8002d2e:	e2bc      	b.n	80032aa <createService+0x602>
		far_active = 1;
 8002d30:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <createService+0x1d0>)
		DBG_PRINTLN("updating sparse config");
 8002d32:	4650      	mov	r0, sl
		far_active = 1;
 8002d34:	4699      	mov	r9, r3
 8002d36:	2301      	movs	r3, #1
 8002d38:	464a      	mov	r2, r9
 8002d3a:	7413      	strb	r3, [r2, #16]
		DBG_PRINTLN("updating sparse config");
 8002d3c:	f011 ffe2 	bl	8014d04 <__wrap_printf>
 8002d40:	484e      	ldr	r0, [pc, #312]	; (8002e7c <createService+0x1d4>)
 8002d42:	f011 ffdf 	bl	8014d04 <__wrap_printf>
 8002d46:	2292      	movs	r2, #146	; 0x92
 8002d48:	0031      	movs	r1, r6
 8002d4a:	0092      	lsls	r2, r2, #2
 8002d4c:	0028      	movs	r0, r5
 8002d4e:	f011 ffd9 	bl	8014d04 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, 1890);
 8002d52:	b2bb      	uxth	r3, r7
 8002d54:	4f4a      	ldr	r7, [pc, #296]	; (8002e80 <createService+0x1d8>)
 8002d56:	0019      	movs	r1, r3
 8002d58:	465a      	mov	r2, fp
 8002d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5c:	4698      	mov	r8, r3
 8002d5e:	f7fe f837 	bl	8000dd0 <updateSparseConfig>
		DBG_PRINTLN("updating sparse far config");
 8002d62:	4650      	mov	r0, sl
 8002d64:	f011 ffce 	bl	8014d04 <__wrap_printf>
 8002d68:	4846      	ldr	r0, [pc, #280]	; (8002e84 <createService+0x1dc>)
 8002d6a:	f011 ffcb 	bl	8014d04 <__wrap_printf>
 8002d6e:	4a46      	ldr	r2, [pc, #280]	; (8002e88 <createService+0x1e0>)
 8002d70:	0031      	movs	r1, r6
 8002d72:	0028      	movs	r0, r5
 8002d74:	f011 ffc6 	bl	8014d04 <__wrap_printf>
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 8002d78:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <createService+0x1e4>)
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	d200      	bcs.n	8002d80 <createService+0xd8>
 8002d7e:	001c      	movs	r4, r3
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <createService+0x1e8>)
		DBG_PRINTINT(far_len);
 8002d82:	4650      	mov	r0, sl
		far_len = (len_reg > 1920) ? len_reg-1920 : 1; 
 8002d84:	469c      	mov	ip, r3
 8002d86:	4464      	add	r4, ip
 8002d88:	b2a4      	uxth	r4, r4
		DBG_PRINTINT(far_len);
 8002d8a:	f011 ffbb 	bl	8014d04 <__wrap_printf>
 8002d8e:	0022      	movs	r2, r4
 8002d90:	4940      	ldr	r1, [pc, #256]	; (8002e94 <createService+0x1ec>)
 8002d92:	4841      	ldr	r0, [pc, #260]	; (8002e98 <createService+0x1f0>)
 8002d94:	f011 ffb6 	bl	8014d04 <__wrap_printf>
 8002d98:	4a40      	ldr	r2, [pc, #256]	; (8002e9c <createService+0x1f4>)
 8002d9a:	0031      	movs	r1, r6
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	f011 ffb1 	bl	8014d04 <__wrap_printf>
		updateSparseConfig(sparse_config_far,start_reg+1920,far_len);
 8002da2:	21f0      	movs	r1, #240	; 0xf0
 8002da4:	00c9      	lsls	r1, r1, #3
 8002da6:	4441      	add	r1, r8
 8002da8:	b289      	uxth	r1, r1
 8002daa:	0022      	movs	r2, r4
 8002dac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dae:	f7fe f80f 	bl	8000dd0 <updateSparseConfig>
	sparse_handle = acc_service_create(sparse_config);	
 8002db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002db4:	f7fd fdb2 	bl	800091c <acc_service_create>
 8002db8:	4b39      	ldr	r3, [pc, #228]	; (8002ea0 <createService+0x1f8>)
 8002dba:	4698      	mov	r8, r3
 8002dbc:	6318      	str	r0, [r3, #48]	; 0x30
	if (sparse_handle == NULL){//handles error
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	d100      	bne.n	8002dc4 <createService+0x11c>
 8002dc2:	e2a4      	b.n	800330e <createService+0x666>
		acc_service_sparse_get_metadata(sparse_handle, &sparse_metadata);
 8002dc4:	0039      	movs	r1, r7
 8002dc6:	3140      	adds	r1, #64	; 0x40
 8002dc8:	f7fd fa1e 	bl	8000208 <acc_service_sparse_get_metadata>
		if(!far_active){
 8002dcc:	464b      	mov	r3, r9
 8002dce:	7c1b      	ldrb	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d100      	bne.n	8002dd6 <createService+0x12e>
 8002dd4:	e2b4      	b.n	8003340 <createService+0x698>
		Reg_store_sparse_metadata(sparse_metadata, NULL);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002de0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de6:	f7fd fa83 	bl	80002f0 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata);
 8002dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002df6:	f7fd ff39 	bl	8000c6c <printf_sparse_metadata>
	if(far_active){
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	7c1b      	ldrb	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d100      	bne.n	8002e04 <createService+0x15c>
 8002e02:	e24d      	b.n	80032a0 <createService+0x5f8>
	sparse_handle_far = acc_service_create(sparse_config_far);
 8002e04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e06:	f7fd fd89 	bl	800091c <acc_service_create>
 8002e0a:	4643      	mov	r3, r8
 8002e0c:	6358      	str	r0, [r3, #52]	; 0x34
	if (sparse_handle_far == NULL){//handles error		
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d100      	bne.n	8002e14 <createService+0x16c>
 8002e12:	e2c6      	b.n	80033a2 <createService+0x6fa>
		acc_service_sparse_get_metadata(sparse_handle_far, &sparse_metadata_far);
 8002e14:	4649      	mov	r1, r9
 8002e16:	3114      	adds	r1, #20
 8002e18:	f7fd f9f6 	bl	8000208 <acc_service_sparse_get_metadata>
		if(sparse_data_malloc() == -1){
 8002e1c:	f7ff fd51 	bl	80028c2 <sparse_data_malloc>
 8002e20:	1c43      	adds	r3, r0, #1
 8002e22:	d100      	bne.n	8002e26 <createService+0x17e>
 8002e24:	e2f6      	b.n	8003414 <createService+0x76c>
		Reg_store_sparse_metadata(sparse_metadata, &sparse_metadata_far);
 8002e26:	464b      	mov	r3, r9
 8002e28:	3314      	adds	r3, #20
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e2e:	3740      	adds	r7, #64	; 0x40
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002e34:	f7fd fa5c 	bl	80002f0 <Reg_store_sparse_metadata>
		printf_sparse_metadata(sparse_metadata_far);
 8002e38:	464b      	mov	r3, r9
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	464b      	mov	r3, r9
 8002e40:	6958      	ldr	r0, [r3, #20]
 8002e42:	6999      	ldr	r1, [r3, #24]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f7fd ff10 	bl	8000c6c <printf_sparse_metadata>
 8002e4c:	e228      	b.n	80032a0 <createService+0x5f8>
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	0801bd4c 	.word	0x0801bd4c
 8002e54:	0801c028 	.word	0x0801c028
 8002e58:	0801bcb8 	.word	0x0801bcb8
 8002e5c:	0801bccc 	.word	0x0801bccc
 8002e60:	00000211 	.word	0x00000211
 8002e64:	200003b0 	.word	0x200003b0
 8002e68:	200003b4 	.word	0x200003b4
 8002e6c:	20000514 	.word	0x20000514
 8002e70:	00000762 	.word	0x00000762
 8002e74:	00000ee2 	.word	0x00000ee2
 8002e78:	2000008c 	.word	0x2000008c
 8002e7c:	0801c0e0 	.word	0x0801c0e0
 8002e80:	2000010c 	.word	0x2000010c
 8002e84:	0801c0f8 	.word	0x0801c0f8
 8002e88:	0000024a 	.word	0x0000024a
 8002e8c:	00000781 	.word	0x00000781
 8002e90:	fffff880 	.word	0xfffff880
 8002e94:	0801c114 	.word	0x0801c114
 8002e98:	0801c11c 	.word	0x0801c11c
 8002e9c:	0000024d 	.word	0x0000024d
 8002ea0:	2000018c 	.word	0x2000018c
    updateEnvelopeConfig(envelope_config);
 8002ea4:	4fe7      	ldr	r7, [pc, #924]	; (8003244 <createService+0x59c>)
    DBG_PRINTLN("updating config");
 8002ea6:	4650      	mov	r0, sl
    updateEnvelopeConfig(envelope_config);
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	4698      	mov	r8, r3
    DBG_PRINTLN("updating config");
 8002eac:	f011 ff2a 	bl	8014d04 <__wrap_printf>
 8002eb0:	48e5      	ldr	r0, [pc, #916]	; (8003248 <createService+0x5a0>)
 8002eb2:	f011 ff27 	bl	8014d04 <__wrap_printf>
 8002eb6:	22f5      	movs	r2, #245	; 0xf5
 8002eb8:	0031      	movs	r1, r6
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	0028      	movs	r0, r5
 8002ebe:	f011 ff21 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 8002ec2:	465b      	mov	r3, fp
 8002ec4:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002ec6:	4be1      	ldr	r3, [pc, #900]	; (800324c <createService+0x5a4>)
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8002ec8:	4640      	mov	r0, r8
	return *regptr;
 8002eca:	4699      	mov	r9, r3
    acc_service_profile_set(config, RegInt_getreg(0x28));
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	b2d9      	uxtb	r1, r3
 8002ed0:	f7fd fb78 	bl	80005c4 <acc_service_profile_set>
	REGADRERR = -1;
 8002ed4:	465b      	mov	r3, fp
 8002ed6:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002ed8:	464b      	mov	r3, r9
 8002eda:	689b      	ldr	r3, [r3, #8]
	if(rep_mode == 0x01){
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d100      	bne.n	8002ee2 <createService+0x23a>
 8002ee0:	e247      	b.n	8003372 <createService+0x6ca>
	}else if (rep_mode == 0x02){
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d100      	bne.n	8002ee8 <createService+0x240>
 8002ee6:	e268      	b.n	80033ba <createService+0x712>
	REGADRERR = -1;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	425b      	negs	r3, r3
 8002eec:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002eee:	464b      	mov	r3, r9
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4640      	mov	r0, r8
 8002ef4:	9303      	str	r3, [sp, #12]
 8002ef6:	f7fd f953 	bl	80001a0 <acc_service_get_base_configuration>
 8002efa:	4683      	mov	fp, r0
 8002efc:	f003 fb38 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d005      	beq.n	8002f10 <createService+0x268>
    acc_service_tx_disable_set(config, RegInt_getreg(0x26));
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	4659      	mov	r1, fp
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	4193      	sbcs	r3, r2
 8002f0c:	2247      	movs	r2, #71	; 0x47
 8002f0e:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 8002f10:	2301      	movs	r3, #1
 8002f12:	425b      	negs	r3, r3
 8002f14:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002f16:	464b      	mov	r3, r9
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	469b      	mov	fp, r3
 8002f1e:	f7fd f991 	bl	8000244 <get_and_validate_envelope_configuration>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	d005      	beq.n	8002f32 <createService+0x28a>
 8002f26:	465b      	mov	r3, fp
 8002f28:	b299      	uxth	r1, r3
 8002f2a:	4643      	mov	r3, r8
 8002f2c:	6918      	ldr	r0, [r3, #16]
 8002f2e:	f7fd fa71 	bl	8000414 <acc_base_configuration_downsampling_factor_set>
	REGADRERR = -1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	425b      	negs	r3, r3
 8002f36:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002f38:	464b      	mov	r3, r9
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	9303      	str	r3, [sp, #12]
 8002f40:	f7fd f92e 	bl	80001a0 <acc_service_get_base_configuration>
 8002f44:	4683      	mov	fp, r0
 8002f46:	f003 fb13 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d002      	beq.n	8002f54 <createService+0x2ac>
 8002f4e:	465a      	mov	r2, fp
 8002f50:	9b03      	ldr	r3, [sp, #12]
 8002f52:	6393      	str	r3, [r2, #56]	; 0x38
	REGADRERR = -1;
 8002f54:	2301      	movs	r3, #1
 8002f56:	425b      	negs	r3, r3
 8002f58:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	4640      	mov	r0, r8
 8002f60:	9303      	str	r3, [sp, #12]
 8002f62:	f7fd f91d 	bl	80001a0 <acc_service_get_base_configuration>
 8002f66:	4683      	mov	fp, r0
 8002f68:	f003 fb02 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	d005      	beq.n	8002f7c <createService+0x2d4>
	acc_service_asynchronous_measurement_set(config,RegInt_getreg(0x33));
 8002f70:	9b03      	ldr	r3, [sp, #12]
 8002f72:	4659      	mov	r1, fp
 8002f74:	1e5a      	subs	r2, r3, #1
 8002f76:	4193      	sbcs	r3, r2
 8002f78:	224e      	movs	r2, #78	; 0x4e
 8002f7a:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	425b      	negs	r3, r3
 8002f80:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002f82:	464b      	mov	r3, r9
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4640      	mov	r0, r8
 8002f88:	9303      	str	r3, [sp, #12]
 8002f8a:	f7fd f909 	bl	80001a0 <acc_service_get_base_configuration>
 8002f8e:	4683      	mov	fp, r0
 8002f90:	f003 faee 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d007      	beq.n	8002fa8 <createService+0x300>
	acc_service_requested_start_set (config, (float)RegInt_getreg(0x20)/1000.0f);
 8002f98:	9803      	ldr	r0, [sp, #12]
 8002f9a:	f00c fa17 	bl	800f3cc <__aeabi_ui2f>
 8002f9e:	49ac      	ldr	r1, [pc, #688]	; (8003250 <createService+0x5a8>)
 8002fa0:	f00b f984 	bl	800e2ac <__aeabi_fdiv>
 8002fa4:	465b      	mov	r3, fp
 8002fa6:	6258      	str	r0, [r3, #36]	; 0x24
	REGADRERR = -1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	425b      	negs	r3, r3
 8002fac:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002fae:	464b      	mov	r3, r9
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4640      	mov	r0, r8
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	f7fd f8f3 	bl	80001a0 <acc_service_get_base_configuration>
 8002fba:	4683      	mov	fp, r0
 8002fbc:	f003 fad8 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d007      	beq.n	8002fd4 <createService+0x32c>
	acc_service_requested_length_set (config, (float)RegInt_getreg(0x21)/1000.0f);
 8002fc4:	9803      	ldr	r0, [sp, #12]
 8002fc6:	f00c fa01 	bl	800f3cc <__aeabi_ui2f>
 8002fca:	49a1      	ldr	r1, [pc, #644]	; (8003250 <createService+0x5a8>)
 8002fcc:	f00b f96e 	bl	800e2ac <__aeabi_fdiv>
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	6298      	str	r0, [r3, #40]	; 0x28
	REGADRERR = -1;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	469b      	mov	fp, r3
 8002fda:	6023      	str	r3, [r4, #0]
	acc_service_receiver_gain_set (config, (float)RegInt_getreg(0x24)/1000.0f);
 8002fdc:	464b      	mov	r3, r9
 8002fde:	6918      	ldr	r0, [r3, #16]
 8002fe0:	f00c f9f4 	bl	800f3cc <__aeabi_ui2f>
 8002fe4:	499a      	ldr	r1, [pc, #616]	; (8003250 <createService+0x5a8>)
 8002fe6:	f00b f961 	bl	800e2ac <__aeabi_fdiv>
 8002fea:	1c01      	adds	r1, r0, #0
 8002fec:	4640      	mov	r0, r8
 8002fee:	f7fd fb03 	bl	80005f8 <acc_service_receiver_gain_set>
	REGADRERR = -1;
 8002ff2:	465b      	mov	r3, fp
 8002ff4:	6023      	str	r3, [r4, #0]
	return *regptr;
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	9303      	str	r3, [sp, #12]
 8002ffe:	f7fd f8cf 	bl	80001a0 <acc_service_get_base_configuration>
 8003002:	4683      	mov	fp, r0
 8003004:	f003 fab4 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8003008:	2800      	cmp	r0, #0
 800300a:	d003      	beq.n	8003014 <createService+0x36c>
 800300c:	466b      	mov	r3, sp
 800300e:	465a      	mov	r2, fp
 8003010:	7b1b      	ldrb	r3, [r3, #12]
 8003012:	8793      	strh	r3, [r2, #60]	; 0x3c
	REGADRERR = -1;
 8003014:	2301      	movs	r3, #1
 8003016:	425b      	negs	r3, r3
 8003018:	6023      	str	r3, [r4, #0]
	return *regptr;
 800301a:	464b      	mov	r3, r9
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4640      	mov	r0, r8
 8003020:	9303      	str	r3, [sp, #12]
 8003022:	f7fd f90f 	bl	8000244 <get_and_validate_envelope_configuration>
 8003026:	2800      	cmp	r0, #0
 8003028:	d00d      	beq.n	8003046 <createService+0x39e>
 800302a:	4640      	mov	r0, r8
 800302c:	f7fd f8b8 	bl	80001a0 <acc_service_get_base_configuration>
 8003030:	4683      	mov	fp, r0
 8003032:	f003 fa9d 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8003036:	2800      	cmp	r0, #0
 8003038:	d005      	beq.n	8003046 <createService+0x39e>
    acc_service_envelope_noise_level_normalization_set (config, RegInt_getreg(0x31));
 800303a:	9b03      	ldr	r3, [sp, #12]
 800303c:	4659      	mov	r1, fp
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	4193      	sbcs	r3, r2
 8003042:	2249      	movs	r2, #73	; 0x49
 8003044:	548b      	strb	r3, [r1, r2]
	REGADRERR = -1;
 8003046:	2301      	movs	r3, #1
 8003048:	425b      	negs	r3, r3
 800304a:	469b      	mov	fp, r3
 800304c:	6023      	str	r3, [r4, #0]
    acc_service_maximize_signal_attenuation_set (config, RegInt_getreg(0x32));
 800304e:	464b      	mov	r3, r9
 8003050:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003052:	4640      	mov	r0, r8
 8003054:	1e4b      	subs	r3, r1, #1
 8003056:	4199      	sbcs	r1, r3
 8003058:	b2c9      	uxtb	r1, r1
 800305a:	f7fd faa2 	bl	80005a2 <acc_service_maximize_signal_attenuation_set>
	REGADRERR = -1;
 800305e:	465b      	mov	r3, fp
 8003060:	6023      	str	r3, [r4, #0]
	return *regptr;
 8003062:	464b      	mov	r3, r9
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	4640      	mov	r0, r8
 8003068:	9303      	str	r3, [sp, #12]
 800306a:	f7fd f899 	bl	80001a0 <acc_service_get_base_configuration>
 800306e:	4683      	mov	fp, r0
 8003070:	2800      	cmp	r0, #0
 8003072:	d100      	bne.n	8003076 <createService+0x3ce>
 8003074:	e142      	b.n	80032fc <createService+0x654>
 8003076:	f003 fa7b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800307a:	2800      	cmp	r0, #0
 800307c:	d003      	beq.n	8003086 <createService+0x3de>
 800307e:	2332      	movs	r3, #50	; 0x32
 8003080:	4659      	mov	r1, fp
 8003082:	9a03      	ldr	r2, [sp, #12]
 8003084:	54ca      	strb	r2, [r1, r3]
	REGADRERR = -1;
 8003086:	2301      	movs	r3, #1
	return *regptr;
 8003088:	464a      	mov	r2, r9
	REGADRERR = -1;
 800308a:	425b      	negs	r3, r3
 800308c:	6023      	str	r3, [r4, #0]
	return *regptr;
 800308e:	3381      	adds	r3, #129	; 0x81
 8003090:	58d3      	ldr	r3, [r2, r3]
 8003092:	4640      	mov	r0, r8
 8003094:	4699      	mov	r9, r3
 8003096:	f7fd f8d5 	bl	8000244 <get_and_validate_envelope_configuration>
 800309a:	2800      	cmp	r0, #0
 800309c:	d017      	beq.n	80030ce <createService+0x426>
	acc_service_envelope_running_average_factor_set(config, (float)RegInt_getreg(0x40)/1000.0f);
 800309e:	4648      	mov	r0, r9
 80030a0:	f00c f994 	bl	800f3cc <__aeabi_ui2f>
 80030a4:	496a      	ldr	r1, [pc, #424]	; (8003250 <createService+0x5a8>)
 80030a6:	f00b f901 	bl	800e2ac <__aeabi_fdiv>
 80030aa:	21fe      	movs	r1, #254	; 0xfe
 80030ac:	0589      	lsls	r1, r1, #22
 80030ae:	4681      	mov	r9, r0
 80030b0:	f00b ff1a 	bl	800eee8 <__aeabi_fcmpgt>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d100      	bne.n	80030ba <createService+0x412>
 80030b8:	e193      	b.n	80033e2 <createService+0x73a>
 80030ba:	2230      	movs	r2, #48	; 0x30
 80030bc:	4b65      	ldr	r3, [pc, #404]	; (8003254 <createService+0x5ac>)
 80030be:	5c9a      	ldrb	r2, [r3, r2]
 80030c0:	2a00      	cmp	r2, #0
 80030c2:	d004      	beq.n	80030ce <createService+0x426>
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	4a64      	ldr	r2, [pc, #400]	; (8003258 <createService+0x5b0>)
 80030c8:	4964      	ldr	r1, [pc, #400]	; (800325c <createService+0x5b4>)
 80030ca:	2001      	movs	r0, #1
 80030cc:	4798      	blx	r3
   	envelope_handle = acc_service_create(envelope_config);	
 80030ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030d0:	f7fd fc24 	bl	800091c <acc_service_create>
 80030d4:	4b62      	ldr	r3, [pc, #392]	; (8003260 <createService+0x5b8>)
 80030d6:	4698      	mov	r8, r3
 80030d8:	62d8      	str	r0, [r3, #44]	; 0x2c
	if (envelope_handle == NULL){//handles error
 80030da:	2800      	cmp	r0, #0
 80030dc:	d100      	bne.n	80030e0 <createService+0x438>
 80030de:	e122      	b.n	8003326 <createService+0x67e>
 80030e0:	7a03      	ldrb	r3, [r0, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d000      	beq.n	80030e8 <createService+0x440>
 80030e6:	e13f      	b.n	8003368 <createService+0x6c0>
 80030e8:	4642      	mov	r2, r8
 80030ea:	6903      	ldr	r3, [r0, #16]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6999      	ldr	r1, [r3, #24]
 80030f0:	6391      	str	r1, [r2, #56]	; 0x38
 80030f2:	69d9      	ldr	r1, [r3, #28]
 80030f4:	63d1      	str	r1, [r2, #60]	; 0x3c
 80030f6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 80030f8:	4641      	mov	r1, r8
 80030fa:	4691      	mov	r9, r2
 80030fc:	2240      	movs	r2, #64	; 0x40
 80030fe:	4648      	mov	r0, r9
 8003100:	5288      	strh	r0, [r1, r2]
 8003102:	2142      	movs	r1, #66	; 0x42
 8003104:	4640      	mov	r0, r8
 8003106:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8003108:	3a01      	subs	r2, #1
 800310a:	5242      	strh	r2, [r0, r1]
 800310c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800310e:	4955      	ldr	r1, [pc, #340]	; (8003264 <createService+0x5bc>)
 8003110:	f00b f9de 	bl	800e4d0 <__aeabi_fmul>
 8003114:	21fc      	movs	r1, #252	; 0xfc
 8003116:	0589      	lsls	r1, r1, #22
 8003118:	f00b f9da 	bl	800e4d0 <__aeabi_fmul>
 800311c:	4643      	mov	r3, r8
 800311e:	6458      	str	r0, [r3, #68]	; 0x44
    bins = envelope_metadata.data_length;
 8003120:	2354      	movs	r3, #84	; 0x54
 8003122:	464a      	mov	r2, r9
    return data_malloc(sweeps,bins);
 8003124:	4649      	mov	r1, r9
    bins = envelope_metadata.data_length;
 8003126:	52fa      	strh	r2, [r7, r3]
    return data_malloc(sweeps,bins);
 8003128:	2001      	movs	r0, #1
    sweeps = 1;
 800312a:	3b53      	subs	r3, #83	; 0x53
 800312c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    return data_malloc(sweeps,bins);
 800312e:	f7fd ff79 	bl	8001024 <data_malloc>
        if(envelope_data_malloc() == -1){
 8003132:	1c43      	adds	r3, r0, #1
 8003134:	d100      	bne.n	8003138 <createService+0x490>
 8003136:	e146      	b.n	80033c6 <createService+0x71e>
 8003138:	4643      	mov	r3, r8
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	4642      	mov	r2, r8
 800313e:	469b      	mov	fp, r3
 8003140:	2340      	movs	r3, #64	; 0x40
 8003142:	5ad3      	ldrh	r3, [r2, r3]
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003144:	4942      	ldr	r1, [pc, #264]	; (8003250 <createService+0x5a8>)
 8003146:	4699      	mov	r9, r3
 8003148:	2342      	movs	r3, #66	; 0x42
 800314a:	5ad7      	ldrh	r7, [r2, r3]
 800314c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800314e:	6b90      	ldr	r0, [r2, #56]	; 0x38
 8003150:	469a      	mov	sl, r3
 8003152:	f00b f9bd 	bl	800e4d0 <__aeabi_fmul>
	REGADRERR = -1;
 8003156:	2301      	movs	r3, #1
 8003158:	425b      	negs	r3, r3
 800315a:	6023      	str	r3, [r4, #0]
	if (!(*regptr == (uint32_t)-1)){
 800315c:	4c42      	ldr	r4, [pc, #264]	; (8003268 <createService+0x5c0>)
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 800315e:	4680      	mov	r8, r0
	if (!(*regptr == (uint32_t)-1)){
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	d002      	beq.n	800316c <createService+0x4c4>
	RegInt_setregf(0x81, (uint32_t)(metadata.start_m * 1000.0f),1);
 8003166:	f00b fef3 	bl	800ef50 <__aeabi_f2uiz>
 800316a:	6020      	str	r0, [r4, #0]
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800316c:	4938      	ldr	r1, [pc, #224]	; (8003250 <createService+0x5a8>)
 800316e:	4658      	mov	r0, fp
 8003170:	f00b f9ae 	bl	800e4d0 <__aeabi_fmul>
 8003174:	f00b feec 	bl	800ef50 <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 8003178:	6863      	ldr	r3, [r4, #4]
	RegInt_setregf(0x82, (uint32_t)(metadata.length_m * 1000.0f),1);
 800317a:	4683      	mov	fp, r0
	if (!(*regptr == (uint32_t)-1)){
 800317c:	3301      	adds	r3, #1
 800317e:	d000      	beq.n	8003182 <createService+0x4da>
		*regptr = val;
 8003180:	6060      	str	r0, [r4, #4]
	if (!(*regptr == (uint32_t)-1)){
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	d001      	beq.n	800318c <createService+0x4e4>
		*regptr = val;
 8003188:	464b      	mov	r3, r9
 800318a:	60a3      	str	r3, [r4, #8]
	if (!(*regptr == (uint32_t)-1)){
 800318c:	68e3      	ldr	r3, [r4, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	d000      	beq.n	8003194 <createService+0x4ec>
		*regptr = val;
 8003192:	60e7      	str	r7, [r4, #12]
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 8003194:	4935      	ldr	r1, [pc, #212]	; (800326c <createService+0x5c4>)
 8003196:	4650      	mov	r0, sl
 8003198:	f00b f99a 	bl	800e4d0 <__aeabi_fmul>
 800319c:	f00b fed8 	bl	800ef50 <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 80031a0:	6923      	ldr	r3, [r4, #16]
	RegInt_setregf(0x85, (uint32_t)(metadata.step_length_m * 1.0e6f),1);
 80031a2:	4682      	mov	sl, r0
	if (!(*regptr == (uint32_t)-1)){
 80031a4:	3301      	adds	r3, #1
 80031a6:	d000      	beq.n	80031aa <createService+0x502>
		*regptr = val;
 80031a8:	6120      	str	r0, [r4, #16]

void printf_envelope_metadata(acc_service_envelope_metadata_t metadata){
    INF_PRINTLN("Envelope Serivce Metadata");
 80031aa:	4c31      	ldr	r4, [pc, #196]	; (8003270 <createService+0x5c8>)
 80031ac:	0020      	movs	r0, r4
 80031ae:	f011 fda9 	bl	8014d04 <__wrap_printf>
 80031b2:	4830      	ldr	r0, [pc, #192]	; (8003274 <createService+0x5cc>)
 80031b4:	f011 fda6 	bl	8014d04 <__wrap_printf>
 80031b8:	22c3      	movs	r2, #195	; 0xc3
 80031ba:	0031      	movs	r1, r6
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	0028      	movs	r0, r5
 80031c0:	f011 fda0 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Start: %ld mm", (int32_t)(metadata.start_m * 1000.0f));
 80031c4:	0020      	movs	r0, r4
 80031c6:	f011 fd9d 	bl	8014d04 <__wrap_printf>
 80031ca:	4640      	mov	r0, r8
 80031cc:	f00c f894 	bl	800f2f8 <__aeabi_f2iz>
 80031d0:	0001      	movs	r1, r0
 80031d2:	4829      	ldr	r0, [pc, #164]	; (8003278 <createService+0x5d0>)
 80031d4:	f011 fd96 	bl	8014d04 <__wrap_printf>
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <createService+0x5d4>)
 80031da:	0031      	movs	r1, r6
 80031dc:	0028      	movs	r0, r5
 80031de:	f011 fd91 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Length: %lu mm", (uint32_t)(metadata.length_m * 1000.0f));
 80031e2:	0020      	movs	r0, r4
 80031e4:	f011 fd8e 	bl	8014d04 <__wrap_printf>
 80031e8:	4659      	mov	r1, fp
 80031ea:	4825      	ldr	r0, [pc, #148]	; (8003280 <createService+0x5d8>)
 80031ec:	f011 fd8a 	bl	8014d04 <__wrap_printf>
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <createService+0x5dc>)
 80031f2:	0031      	movs	r1, r6
 80031f4:	0028      	movs	r0, r5
 80031f6:	f011 fd85 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Data length: %lu", (uint32_t)metadata.data_length);
 80031fa:	0020      	movs	r0, r4
 80031fc:	f011 fd82 	bl	8014d04 <__wrap_printf>
 8003200:	4649      	mov	r1, r9
 8003202:	4821      	ldr	r0, [pc, #132]	; (8003288 <createService+0x5e0>)
 8003204:	f011 fd7e 	bl	8014d04 <__wrap_printf>
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <createService+0x5e4>)
 800320a:	0031      	movs	r1, r6
 800320c:	0028      	movs	r0, r5
 800320e:	f011 fd79 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Sweep rate: %lu mHz", (uint32_t)(metadata.stitch_count));
 8003212:	0020      	movs	r0, r4
 8003214:	f011 fd76 	bl	8014d04 <__wrap_printf>
 8003218:	0039      	movs	r1, r7
 800321a:	481d      	ldr	r0, [pc, #116]	; (8003290 <createService+0x5e8>)
 800321c:	f011 fd72 	bl	8014d04 <__wrap_printf>
 8003220:	22c4      	movs	r2, #196	; 0xc4
 8003222:	0031      	movs	r1, r6
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	0028      	movs	r0, r5
 8003228:	f011 fd6c 	bl	8014d04 <__wrap_printf>
    INF_PRINTLN("Step length: %lu um", (uint32_t)(metadata.step_length_m * 1.0e6f));
 800322c:	0020      	movs	r0, r4
 800322e:	f011 fd69 	bl	8014d04 <__wrap_printf>
 8003232:	4651      	mov	r1, sl
 8003234:	4817      	ldr	r0, [pc, #92]	; (8003294 <createService+0x5ec>)
 8003236:	f011 fd65 	bl	8014d04 <__wrap_printf>
 800323a:	4a17      	ldr	r2, [pc, #92]	; (8003298 <createService+0x5f0>)
 800323c:	0031      	movs	r1, r6
 800323e:	0028      	movs	r0, r5
 8003240:	e02c      	b.n	800329c <createService+0x5f4>
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	2000010c 	.word	0x2000010c
 8003248:	0801bd54 	.word	0x0801bd54
 800324c:	20000514 	.word	0x20000514
 8003250:	447a0000 	.word	0x447a0000
 8003254:	200002b8 	.word	0x200002b8
 8003258:	0801c03c 	.word	0x0801c03c
 800325c:	0801b8e5 	.word	0x0801b8e5
 8003260:	2000018c 	.word	0x2000018c
 8003264:	4d8ef3c2 	.word	0x4d8ef3c2
 8003268:	20000500 	.word	0x20000500
 800326c:	49742400 	.word	0x49742400
 8003270:	0801bc94 	.word	0x0801bc94
 8003274:	0801c0c4 	.word	0x0801c0c4
 8003278:	0801bcd8 	.word	0x0801bcd8
 800327c:	0000030d 	.word	0x0000030d
 8003280:	0801bce8 	.word	0x0801bce8
 8003284:	0000030e 	.word	0x0000030e
 8003288:	0801bd10 	.word	0x0801bd10
 800328c:	0000030f 	.word	0x0000030f
 8003290:	0801bd24 	.word	0x0801bd24
 8003294:	0801bd38 	.word	0x0801bd38
 8003298:	00000311 	.word	0x00000311
 800329c:	f011 fd32 	bl	8014d04 <__wrap_printf>
        Reg_regor(0x06, 0x00000001);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f007 fc5b 	bl	800ab5c <Reg_regor.constprop.76>
 80032a6:	2001      	movs	r0, #1
 80032a8:	e525      	b.n	8002cf6 <createService+0x4e>
		ERR_PRINTLN("sparse service creation failed (too long)");
 80032aa:	4861      	ldr	r0, [pc, #388]	; (8003430 <createService+0x788>)
 80032ac:	f011 fd2a 	bl	8014d04 <__wrap_printf>
 80032b0:	4860      	ldr	r0, [pc, #384]	; (8003434 <createService+0x78c>)
 80032b2:	f011 fd27 	bl	8014d04 <__wrap_printf>
 80032b6:	2294      	movs	r2, #148	; 0x94
 80032b8:	0031      	movs	r1, r6
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	0028      	movs	r0, r5
 80032be:	f011 fd21 	bl	8014d04 <__wrap_printf>
        Reg_regor(0x06, 0x00080000);
 80032c2:	2080      	movs	r0, #128	; 0x80
 80032c4:	0300      	lsls	r0, r0, #12
 80032c6:	f007 fc49 	bl	800ab5c <Reg_regor.constprop.76>
        return 0;
 80032ca:	2000      	movs	r0, #0
 80032cc:	e513      	b.n	8002cf6 <createService+0x4e>
		far_active = 0;
 80032ce:	4b5a      	ldr	r3, [pc, #360]	; (8003438 <createService+0x790>)
        DBG_PRINTLN("updating sparse config");
 80032d0:	4650      	mov	r0, sl
		far_active = 0;
 80032d2:	4699      	mov	r9, r3
 80032d4:	2300      	movs	r3, #0
 80032d6:	464a      	mov	r2, r9
 80032d8:	7413      	strb	r3, [r2, #16]
        DBG_PRINTLN("updating sparse config");
 80032da:	f011 fd13 	bl	8014d04 <__wrap_printf>
 80032de:	4857      	ldr	r0, [pc, #348]	; (800343c <createService+0x794>)
 80032e0:	f011 fd10 	bl	8014d04 <__wrap_printf>
 80032e4:	0031      	movs	r1, r6
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <createService+0x798>)
 80032e8:	0028      	movs	r0, r5
 80032ea:	f011 fd0b 	bl	8014d04 <__wrap_printf>
		updateSparseConfig(sparse_config,start_reg, len_reg);
 80032ee:	b2b9      	uxth	r1, r7
 80032f0:	4f54      	ldr	r7, [pc, #336]	; (8003444 <createService+0x79c>)
 80032f2:	b2a2      	uxth	r2, r4
 80032f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f6:	f7fd fd6b 	bl	8000dd0 <updateSparseConfig>
 80032fa:	e55a      	b.n	8002db2 <createService+0x10a>
 80032fc:	2330      	movs	r3, #48	; 0x30
 80032fe:	4a52      	ldr	r2, [pc, #328]	; (8003448 <createService+0x7a0>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <createService+0x660>
 8003306:	e6be      	b.n	8003086 <createService+0x3de>
 8003308:	f7fc fefc 	bl	8000104 <acc_service_maximize_signal_attenuation_set.part.8>
 800330c:	e6bb      	b.n	8003086 <createService+0x3de>
		ERR_PRINTLN("sparse service creation fail");
 800330e:	4848      	ldr	r0, [pc, #288]	; (8003430 <createService+0x788>)
 8003310:	f011 fcf8 	bl	8014d04 <__wrap_printf>
 8003314:	484d      	ldr	r0, [pc, #308]	; (800344c <createService+0x7a4>)
 8003316:	f011 fcf5 	bl	8014d04 <__wrap_printf>
 800331a:	4a4d      	ldr	r2, [pc, #308]	; (8003450 <createService+0x7a8>)
 800331c:	0031      	movs	r1, r6
 800331e:	0028      	movs	r0, r5
 8003320:	f011 fcf0 	bl	8014d04 <__wrap_printf>
 8003324:	e7cd      	b.n	80032c2 <createService+0x61a>
		ERR_PRINTLN("envelope service creation failed");
 8003326:	4842      	ldr	r0, [pc, #264]	; (8003430 <createService+0x788>)
 8003328:	f011 fcec 	bl	8014d04 <__wrap_printf>
 800332c:	4849      	ldr	r0, [pc, #292]	; (8003454 <createService+0x7ac>)
 800332e:	f011 fce9 	bl	8014d04 <__wrap_printf>
 8003332:	228b      	movs	r2, #139	; 0x8b
 8003334:	0031      	movs	r1, r6
 8003336:	0092      	lsls	r2, r2, #2
 8003338:	0028      	movs	r0, r5
 800333a:	f011 fce3 	bl	8014d04 <__wrap_printf>
 800333e:	e7c0      	b.n	80032c2 <createService+0x61a>
			if(sparse_data_malloc() == -1){
 8003340:	f7ff fabf 	bl	80028c2 <sparse_data_malloc>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d000      	beq.n	800334a <createService+0x6a2>
 8003348:	e545      	b.n	8002dd6 <createService+0x12e>
                DBG_PRINTLN("data buffer allocation failed");
 800334a:	4650      	mov	r0, sl
 800334c:	f011 fcda 	bl	8014d04 <__wrap_printf>
 8003350:	4841      	ldr	r0, [pc, #260]	; (8003458 <createService+0x7b0>)
 8003352:	f011 fcd7 	bl	8014d04 <__wrap_printf>
 8003356:	2297      	movs	r2, #151	; 0x97
 8003358:	0031      	movs	r1, r6
 800335a:	0092      	lsls	r2, r2, #2
 800335c:	0028      	movs	r0, r5
 800335e:	f011 fcd1 	bl	8014d04 <__wrap_printf>
                stopService();
 8003362:	f7ff fbcd 	bl	8002b00 <stopService>
 8003366:	e536      	b.n	8002dd6 <createService+0x12e>
 8003368:	2340      	movs	r3, #64	; 0x40
 800336a:	4642      	mov	r2, r8
 800336c:	5ad3      	ldrh	r3, [r2, r3]
 800336e:	4699      	mov	r9, r3
 8003370:	e6d6      	b.n	8003120 <createService+0x478>
	return *regptr;
 8003372:	464b      	mov	r3, r9
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4640      	mov	r0, r8
 8003378:	9303      	str	r3, [sp, #12]
 800337a:	f7fc ff11 	bl	80001a0 <acc_service_get_base_configuration>
 800337e:	4683      	mov	fp, r0
 8003380:	f003 f8f6 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8003384:	2800      	cmp	r0, #0
 8003386:	d100      	bne.n	800338a <createService+0x6e2>
 8003388:	e5ae      	b.n	8002ee8 <createService+0x240>
 800338a:	2303      	movs	r3, #3
 800338c:	465a      	mov	r2, fp
		acc_service_repetition_mode_streaming_set(config, ((float)RegInt_getreg(0x23))/1000.0f);
 800338e:	9803      	ldr	r0, [sp, #12]
 8003390:	7113      	strb	r3, [r2, #4]
 8003392:	f00c f81b 	bl	800f3cc <__aeabi_ui2f>
 8003396:	4931      	ldr	r1, [pc, #196]	; (800345c <createService+0x7b4>)
 8003398:	f00a ff88 	bl	800e2ac <__aeabi_fdiv>
 800339c:	465b      	mov	r3, fp
 800339e:	6098      	str	r0, [r3, #8]
 80033a0:	e5a2      	b.n	8002ee8 <createService+0x240>
		ERR_PRINTLN("sparse far service creation fail");
 80033a2:	4823      	ldr	r0, [pc, #140]	; (8003430 <createService+0x788>)
 80033a4:	f011 fcae 	bl	8014d04 <__wrap_printf>
 80033a8:	482d      	ldr	r0, [pc, #180]	; (8003460 <createService+0x7b8>)
 80033aa:	f011 fcab 	bl	8014d04 <__wrap_printf>
 80033ae:	4a2d      	ldr	r2, [pc, #180]	; (8003464 <createService+0x7bc>)
 80033b0:	0031      	movs	r1, r6
 80033b2:	0028      	movs	r0, r5
 80033b4:	f011 fca6 	bl	8014d04 <__wrap_printf>
 80033b8:	e783      	b.n	80032c2 <createService+0x61a>
 80033ba:	4640      	mov	r0, r8
 80033bc:	f7fc fef0 	bl	80001a0 <acc_service_get_base_configuration>
 80033c0:	f7fd f8c6 	bl	8000550 <acc_base_configuration_repetition_mode_on_demand_set>
 80033c4:	e590      	b.n	8002ee8 <createService+0x240>
            DBG_PRINTLN("data buffer allocation failed");
 80033c6:	4650      	mov	r0, sl
 80033c8:	f011 fc9c 	bl	8014d04 <__wrap_printf>
 80033cc:	4822      	ldr	r0, [pc, #136]	; (8003458 <createService+0x7b0>)
 80033ce:	f011 fc99 	bl	8014d04 <__wrap_printf>
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <createService+0x7c0>)
 80033d4:	0031      	movs	r1, r6
 80033d6:	0028      	movs	r0, r5
 80033d8:	f011 fc94 	bl	8014d04 <__wrap_printf>
            stopService();
 80033dc:	f7ff fb90 	bl	8002b00 <stopService>
 80033e0:	e6aa      	b.n	8003138 <createService+0x490>
 80033e2:	4640      	mov	r0, r8
 80033e4:	f7fc fedc 	bl	80001a0 <acc_service_get_base_configuration>
 80033e8:	4680      	mov	r8, r0
 80033ea:	f003 f8c1 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d100      	bne.n	80033f4 <createService+0x74c>
 80033f2:	e66c      	b.n	80030ce <createService+0x426>
 80033f4:	20fe      	movs	r0, #254	; 0xfe
 80033f6:	4649      	mov	r1, r9
 80033f8:	0580      	lsls	r0, r0, #22
 80033fa:	f00b f99b 	bl	800e734 <__aeabi_fsub>
 80033fe:	4643      	mov	r3, r8
 8003400:	2100      	movs	r1, #0
 8003402:	6158      	str	r0, [r3, #20]
 8003404:	4648      	mov	r0, r9
 8003406:	f00b fd55 	bl	800eeb4 <__aeabi_fcmpeq>
 800340a:	4243      	negs	r3, r0
 800340c:	4158      	adcs	r0, r3
 800340e:	4643      	mov	r3, r8
 8003410:	7618      	strb	r0, [r3, #24]
 8003412:	e65c      	b.n	80030ce <createService+0x426>
            DBG_PRINTLN("data buffer allocation failed");
 8003414:	4650      	mov	r0, sl
 8003416:	f011 fc75 	bl	8014d04 <__wrap_printf>
 800341a:	480f      	ldr	r0, [pc, #60]	; (8003458 <createService+0x7b0>)
 800341c:	f011 fc72 	bl	8014d04 <__wrap_printf>
 8003420:	4a12      	ldr	r2, [pc, #72]	; (800346c <createService+0x7c4>)
 8003422:	0031      	movs	r1, r6
 8003424:	0028      	movs	r0, r5
 8003426:	f011 fc6d 	bl	8014d04 <__wrap_printf>
            stopService();
 800342a:	f7ff fb69 	bl	8002b00 <stopService>
 800342e:	e4fa      	b.n	8002e26 <createService+0x17e>
 8003430:	0801bdb0 	.word	0x0801bdb0
 8003434:	0801c124 	.word	0x0801c124
 8003438:	2000008c 	.word	0x2000008c
 800343c:	0801c0e0 	.word	0x0801c0e0
 8003440:	00000243 	.word	0x00000243
 8003444:	2000010c 	.word	0x2000010c
 8003448:	200002b8 	.word	0x200002b8
 800344c:	0801c150 	.word	0x0801c150
 8003450:	00000256 	.word	0x00000256
 8003454:	0801c080 	.word	0x0801c080
 8003458:	0801c0a4 	.word	0x0801c0a4
 800345c:	447a0000 	.word	0x447a0000
 8003460:	0801c170 	.word	0x0801c170
 8003464:	0000026a 	.word	0x0000026a
 8003468:	00000232 	.word	0x00000232
 800346c:	0000026f 	.word	0x0000026f

08003470 <acc_service_activate>:
 8003470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003472:	46ce      	mov	lr, r9
 8003474:	4647      	mov	r7, r8
 8003476:	b580      	push	{r7, lr}
 8003478:	0004      	movs	r4, r0
 800347a:	f7ff fab6 	bl	80029ea <acc_service_handle_valid>
 800347e:	2800      	cmp	r0, #0
 8003480:	d10b      	bne.n	800349a <acc_service_activate+0x2a>
 8003482:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <acc_service_activate+0x104>)
 8003484:	4a3c      	ldr	r2, [pc, #240]	; (8003578 <acc_service_activate+0x108>)
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	493c      	ldr	r1, [pc, #240]	; (800357c <acc_service_activate+0x10c>)
 800348a:	2000      	movs	r0, #0
 800348c:	4798      	blx	r3
 800348e:	2600      	movs	r6, #0
 8003490:	0030      	movs	r0, r6
 8003492:	bc0c      	pop	{r2, r3}
 8003494:	4690      	mov	r8, r2
 8003496:	4699      	mov	r9, r3
 8003498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800349a:	4d39      	ldr	r5, [pc, #228]	; (8003580 <acc_service_activate+0x110>)
 800349c:	002b      	movs	r3, r5
 800349e:	332d      	adds	r3, #45	; 0x2d
 80034a0:	781e      	ldrb	r6, [r3, #0]
 80034a2:	2e00      	cmp	r6, #0
 80034a4:	d0ed      	beq.n	8003482 <acc_service_activate+0x12>
 80034a6:	7a63      	ldrb	r3, [r4, #9]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f1      	beq.n	8003490 <acc_service_activate+0x20>
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	2b2a      	cmp	r3, #42	; 0x2a
 80034b0:	d8e7      	bhi.n	8003482 <acc_service_activate+0x12>
 80034b2:	002a      	movs	r2, r5
 80034b4:	0059      	lsls	r1, r3, #1
 80034b6:	3256      	adds	r2, #86	; 0x56
 80034b8:	5c8f      	ldrb	r7, [r1, r2]
 80034ba:	2f00      	cmp	r7, #0
 80034bc:	d1e1      	bne.n	8003482 <acc_service_activate+0x12>
 80034be:	2001      	movs	r0, #1
 80034c0:	5488      	strb	r0, [r1, r2]
 80034c2:	1852      	adds	r2, r2, r1
 80034c4:	7852      	ldrb	r2, [r2, #1]
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	d144      	bne.n	8003554 <acc_service_activate+0xe4>
 80034ca:	3218      	adds	r2, #24
 80034cc:	4690      	mov	r8, r2
 80034ce:	4a2d      	ldr	r2, [pc, #180]	; (8003584 <acc_service_activate+0x114>)
 80034d0:	44a0      	add	r8, r4
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	d002      	beq.n	80034de <acc_service_activate+0x6e>
 80034d8:	6892      	ldr	r2, [r2, #8]
 80034da:	2a00      	cmp	r2, #0
 80034dc:	d145      	bne.n	800356a <acc_service_activate+0xfa>
 80034de:	7e22      	ldrb	r2, [r4, #24]
 80034e0:	2a02      	cmp	r2, #2
 80034e2:	d01f      	beq.n	8003524 <acc_service_activate+0xb4>
 80034e4:	4640      	mov	r0, r8
 80034e6:	f002 fdf5 	bl	80060d4 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d032      	beq.n	8003554 <acc_service_activate+0xe4>
 80034ee:	7ea3      	ldrb	r3, [r4, #26]
 80034f0:	4699      	mov	r9, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <acc_service_activate+0xc8>
 80034f6:	7e23      	ldrb	r3, [r4, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d110      	bne.n	800351e <acc_service_activate+0xae>
 80034fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80034fe:	2200      	movs	r2, #0
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	69e1      	ldr	r1, [r4, #28]
 8003504:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003506:	4798      	blx	r3
 8003508:	2800      	cmp	r0, #0
 800350a:	d023      	beq.n	8003554 <acc_service_activate+0xe4>
 800350c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800350e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	4798      	blx	r3
 8003514:	2800      	cmp	r0, #0
 8003516:	d01d      	beq.n	8003554 <acc_service_activate+0xe4>
 8003518:	4640      	mov	r0, r8
 800351a:	f002 fd09 	bl	8005f30 <acc_sensor_manager_hibernate_enter.lto_priv.256>
 800351e:	6863      	ldr	r3, [r4, #4]
 8003520:	2b2a      	cmp	r3, #42	; 0x2a
 8003522:	d805      	bhi.n	8003530 <acc_service_activate+0xc0>
 8003524:	002a      	movs	r2, r5
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	3256      	adds	r2, #86	; 0x56
 800352a:	18d3      	adds	r3, r2, r3
 800352c:	2201      	movs	r2, #1
 800352e:	705a      	strb	r2, [r3, #1]
 8003530:	2300      	movs	r3, #0
 8003532:	0037      	movs	r7, r6
 8003534:	7263      	strb	r3, [r4, #9]
 8003536:	e00d      	b.n	8003554 <acc_service_activate+0xe4>
 8003538:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800353a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800353c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353e:	4798      	blx	r3
 8003540:	2800      	cmp	r0, #0
 8003542:	d007      	beq.n	8003554 <acc_service_activate+0xe4>
 8003544:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003546:	464a      	mov	r2, r9
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	69e1      	ldr	r1, [r4, #28]
 800354c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800354e:	4798      	blx	r3
 8003550:	2800      	cmp	r0, #0
 8003552:	d1d0      	bne.n	80034f6 <acc_service_activate+0x86>
 8003554:	6863      	ldr	r3, [r4, #4]
 8003556:	2b2a      	cmp	r3, #42	; 0x2a
 8003558:	d803      	bhi.n	8003562 <acc_service_activate+0xf2>
 800355a:	2200      	movs	r2, #0
 800355c:	3556      	adds	r5, #86	; 0x56
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	555a      	strb	r2, [r3, r5]
 8003562:	2f00      	cmp	r7, #0
 8003564:	d100      	bne.n	8003568 <acc_service_activate+0xf8>
 8003566:	e78c      	b.n	8003482 <acc_service_activate+0x12>
 8003568:	e792      	b.n	8003490 <acc_service_activate+0x20>
 800356a:	4640      	mov	r0, r8
 800356c:	4790      	blx	r2
 800356e:	2800      	cmp	r0, #0
 8003570:	d0f0      	beq.n	8003554 <acc_service_activate+0xe4>
 8003572:	e7d4      	b.n	800351e <acc_service_activate+0xae>
 8003574:	200002b8 	.word	0x200002b8
 8003578:	0801bc34 	.word	0x0801bc34
 800357c:	0801cd04 	.word	0x0801cd04
 8003580:	2000010c 	.word	0x2000010c
 8003584:	200004bc 	.word	0x200004bc

08003588 <activateService_handle>:
int8_t activateService_handle(acc_service_handle_t handle){
 8003588:	b530      	push	{r4, r5, lr}
 800358a:	b083      	sub	sp, #12
 800358c:	9001      	str	r0, [sp, #4]
	if (!acc_service_activate(handle))
 800358e:	f7ff ff6f 	bl	8003470 <acc_service_activate>
 8003592:	1e04      	subs	r4, r0, #0
 8003594:	d11d      	bne.n	80035d2 <activateService_handle+0x4a>
		ERR_PRINTLN("acc_service_activate() failed");
 8003596:	4818      	ldr	r0, [pc, #96]	; (80035f8 <activateService_handle+0x70>)
 8003598:	f011 fbb4 	bl	8014d04 <__wrap_printf>
 800359c:	4817      	ldr	r0, [pc, #92]	; (80035fc <activateService_handle+0x74>)
 800359e:	f011 fbb1 	bl	8014d04 <__wrap_printf>
 80035a2:	22a4      	movs	r2, #164	; 0xa4
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <activateService_handle+0x78>)
 80035a6:	0092      	lsls	r2, r2, #2
 80035a8:	4816      	ldr	r0, [pc, #88]	; (8003604 <activateService_handle+0x7c>)
 80035aa:	f011 fbab 	bl	8014d04 <__wrap_printf>
		acc_service_destroy(&handle);
 80035ae:	a801      	add	r0, sp, #4
 80035b0:	f7ff fa78 	bl	8002aa4 <acc_service_destroy>
	free(data);
 80035b4:	4d14      	ldr	r5, [pc, #80]	; (8003608 <activateService_handle+0x80>)
 80035b6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80035b8:	f011 ff6a 	bl	8015490 <free>
	bins = 0;
 80035bc:	2254      	movs	r2, #84	; 0x54
	sweeps = 0;
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <activateService_handle+0x84>)
	data = NULL;
 80035c0:	62ac      	str	r4, [r5, #40]	; 0x28
	sweeps = 0;
 80035c2:	879c      	strh	r4, [r3, #60]	; 0x3c
	bins = 0;
 80035c4:	529c      	strh	r4, [r3, r2]
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80035c6:	7c2b      	ldrb	r3, [r5, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <activateService_handle+0x64>
}
 80035cc:	0020      	movs	r0, r4
 80035ce:	b003      	add	sp, #12
 80035d0:	bd30      	pop	{r4, r5, pc}
		DBG_PRINTLN("service handle activated");
 80035d2:	480f      	ldr	r0, [pc, #60]	; (8003610 <activateService_handle+0x88>)
 80035d4:	f011 fb96 	bl	8014d04 <__wrap_printf>
 80035d8:	480e      	ldr	r0, [pc, #56]	; (8003614 <activateService_handle+0x8c>)
 80035da:	f011 fb93 	bl	8014d04 <__wrap_printf>
 80035de:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <activateService_handle+0x90>)
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <activateService_handle+0x78>)
 80035e2:	4808      	ldr	r0, [pc, #32]	; (8003604 <activateService_handle+0x7c>)
 80035e4:	f011 fb8e 	bl	8014d04 <__wrap_printf>
 80035e8:	2401      	movs	r4, #1
 80035ea:	e7ef      	b.n	80035cc <activateService_handle+0x44>
		if(far_active){acc_service_destroy(&sparse_handle_far);}
 80035ec:	480b      	ldr	r0, [pc, #44]	; (800361c <activateService_handle+0x94>)
 80035ee:	3034      	adds	r0, #52	; 0x34
 80035f0:	f7ff fa58 	bl	8002aa4 <acc_service_destroy>
 80035f4:	e7ea      	b.n	80035cc <activateService_handle+0x44>
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	0801bdb0 	.word	0x0801bdb0
 80035fc:	0801c194 	.word	0x0801c194
 8003600:	0801bcb8 	.word	0x0801bcb8
 8003604:	0801bccc 	.word	0x0801bccc
 8003608:	2000008c 	.word	0x2000008c
 800360c:	2000010c 	.word	0x2000010c
 8003610:	0801bd4c 	.word	0x0801bd4c
 8003614:	0801c1b4 	.word	0x0801c1b4
 8003618:	0000029a 	.word	0x0000029a
 800361c:	2000018c 	.word	0x2000018c

08003620 <activateService>:
int8_t activateService(void){
 8003620:	b510      	push	{r4, lr}
    DBG_PRINTLN("activating service");
 8003622:	4819      	ldr	r0, [pc, #100]	; (8003688 <activateService+0x68>)
 8003624:	f011 fb6e 	bl	8014d04 <__wrap_printf>
 8003628:	4818      	ldr	r0, [pc, #96]	; (800368c <activateService+0x6c>)
 800362a:	f011 fb6b 	bl	8014d04 <__wrap_printf>
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <activateService+0x70>)
 8003630:	4918      	ldr	r1, [pc, #96]	; (8003694 <activateService+0x74>)
 8003632:	4819      	ldr	r0, [pc, #100]	; (8003698 <activateService+0x78>)
 8003634:	f011 fb66 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 8003638:	2201      	movs	r2, #1
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <activateService+0x7c>)
 800363c:	4252      	negs	r2, r2
 800363e:	601a      	str	r2, [r3, #0]
	return *regptr;
 8003640:	4b17      	ldr	r3, [pc, #92]	; (80036a0 <activateService+0x80>)
 8003642:	689b      	ldr	r3, [r3, #8]
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 8003644:	2b02      	cmp	r3, #2
 8003646:	d018      	beq.n	800367a <activateService+0x5a>
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 8003648:	2b04      	cmp	r3, #4
 800364a:	d006      	beq.n	800365a <activateService+0x3a>
    else {Reg_regor(0x06, 0x0040000); return 0;}
 800364c:	2080      	movs	r0, #128	; 0x80
 800364e:	02c0      	lsls	r0, r0, #11
 8003650:	f007 fa84 	bl	800ab5c <Reg_regor.constprop.76>
 8003654:	2400      	movs	r4, #0
}
 8003656:	0020      	movs	r0, r4
 8003658:	bd10      	pop	{r4, pc}
    else if(service_type == 0x04){success = activateService_handle(sparse_handle);}
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <activateService+0x84>)
 800365c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800365e:	f7ff ff93 	bl	8003588 <activateService_handle>
 8003662:	0004      	movs	r4, r0
    if(success){
 8003664:	2c00      	cmp	r4, #0
 8003666:	d104      	bne.n	8003672 <activateService+0x52>
        Reg_regor(0x06, 0x00100000);
 8003668:	2080      	movs	r0, #128	; 0x80
 800366a:	0340      	lsls	r0, r0, #13
 800366c:	f007 fa76 	bl	800ab5c <Reg_regor.constprop.76>
 8003670:	e7f1      	b.n	8003656 <activateService+0x36>
        Reg_regor(0x06, 0x00000002);
 8003672:	2002      	movs	r0, #2
 8003674:	f007 fa72 	bl	800ab5c <Reg_regor.constprop.76>
 8003678:	e7ed      	b.n	8003656 <activateService+0x36>
    if(service_type == 0x02){success = activateService_handle(envelope_handle);}
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <activateService+0x84>)
 800367c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800367e:	f7ff ff83 	bl	8003588 <activateService_handle>
 8003682:	0004      	movs	r4, r0
 8003684:	e7ee      	b.n	8003664 <activateService+0x44>
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	0801bd4c 	.word	0x0801bd4c
 800368c:	0801c1d0 	.word	0x0801c1d0
 8003690:	0000027d 	.word	0x0000027d
 8003694:	0801bcb8 	.word	0x0801bcb8
 8003698:	0801bccc 	.word	0x0801bccc
 800369c:	200003b0 	.word	0x200003b0
 80036a0:	200003b4 	.word	0x200003b4
 80036a4:	2000018c 	.word	0x2000018c

080036a8 <HAL_UART_RxCpltCallback>:
	if (uart_state == 0){
 80036a8:	2248      	movs	r2, #72	; 0x48
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80036aa:	b570      	push	{r4, r5, r6, lr}
	if (uart_state == 0){
 80036ac:	4c17      	ldr	r4, [pc, #92]	; (800370c <HAL_UART_RxCpltCallback+0x64>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80036ae:	0005      	movs	r5, r0
	if (uart_state == 0){
 80036b0:	5ca3      	ldrb	r3, [r4, r2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_UART_RxCpltCallback+0x1e>
		if (uart_rx_buff[0] == 0xCC){
 80036b6:	4916      	ldr	r1, [pc, #88]	; (8003710 <HAL_UART_RxCpltCallback+0x68>)
 80036b8:	7809      	ldrb	r1, [r1, #0]
 80036ba:	29cc      	cmp	r1, #204	; 0xcc
 80036bc:	d00a      	beq.n	80036d4 <HAL_UART_RxCpltCallback+0x2c>
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 80036be:	2101      	movs	r1, #1
 80036c0:	f007 f954 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
}
 80036c4:	bd70      	pop	{r4, r5, r6, pc}
	}else if (uart_state == 1){
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d00c      	beq.n	80036e4 <HAL_UART_RxCpltCallback+0x3c>
	}else if (uart_state == 3){
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d1fa      	bne.n	80036c4 <HAL_UART_RxCpltCallback+0x1c>
		uart_state = 4;
 80036ce:	3301      	adds	r3, #1
 80036d0:	54a3      	strb	r3, [r4, r2]
 80036d2:	e7f7      	b.n	80036c4 <HAL_UART_RxCpltCallback+0x1c>
			uart_state = 1;
 80036d4:	39cb      	subs	r1, #203	; 0xcb
 80036d6:	54a1      	strb	r1, [r4, r2]
			cmd_length = 0;
 80036d8:	3201      	adds	r2, #1
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 80036da:	3101      	adds	r1, #1
			cmd_length = 0;
 80036dc:	54a3      	strb	r3, [r4, r2]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 2);
 80036de:	f007 f945 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
 80036e2:	e7ef      	b.n	80036c4 <HAL_UART_RxCpltCallback+0x1c>
		cmd_length = (uart_rx_buff[0]) | (uart_rx_buff[1] << 8);
 80036e4:	2649      	movs	r6, #73	; 0x49
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_UART_RxCpltCallback+0x68>)
 80036e8:	7819      	ldrb	r1, [r3, #0]
 80036ea:	55a1      	strb	r1, [r4, r6]
		if (cmd_length +2 > UART_BUFF){
 80036ec:	293e      	cmp	r1, #62	; 0x3e
 80036ee:	d806      	bhi.n	80036fe <HAL_UART_RxCpltCallback+0x56>
		uart_state = 3;
 80036f0:	2303      	movs	r3, #3
 80036f2:	54a3      	strb	r3, [r4, r2]
		HAL_UART_Receive_IT(huart, uart_rx_buff, 2 + cmd_length);
 80036f4:	3102      	adds	r1, #2
 80036f6:	0028      	movs	r0, r5
 80036f8:	f007 f938 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
 80036fc:	e7e2      	b.n	80036c4 <HAL_UART_RxCpltCallback+0x1c>
			uart_state = 0;
 80036fe:	2300      	movs	r3, #0
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003700:	2101      	movs	r1, #1
			uart_state = 0;
 8003702:	54a3      	strb	r3, [r4, r2]
			HAL_UART_Receive_IT(huart, uart_rx_buff, 1);
 8003704:	f007 f932 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
 8003708:	5da1      	ldrb	r1, [r4, r6]
 800370a:	e7f3      	b.n	80036f4 <HAL_UART_RxCpltCallback+0x4c>
 800370c:	2000018c 	.word	0x2000018c
 8003710:	20000370 	.word	0x20000370

08003714 <RegInt_setregf>:
int8_t RegInt_setregf(uint8_t reg, uint32_t val, uint8_t force){
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	b084      	sub	sp, #16
	if(!force){
 8003718:	2a00      	cmp	r2, #0
 800371a:	d02f      	beq.n	800377c <RegInt_setregf+0x68>
	REGADRERR = -1;
 800371c:	2201      	movs	r2, #1
 800371e:	4b2d      	ldr	r3, [pc, #180]	; (80037d4 <RegInt_setregf+0xc0>)
 8003720:	4252      	negs	r2, r2
 8003722:	601a      	str	r2, [r3, #0]
	if (reg <= 0x12){
 8003724:	2812      	cmp	r0, #18
 8003726:	d913      	bls.n	8003750 <RegInt_setregf+0x3c>
	if (reg == 0xE9){
 8003728:	28e9      	cmp	r0, #233	; 0xe9
 800372a:	d114      	bne.n	8003756 <RegInt_setregf+0x42>
		ptr = &OUTPUT_BUFFER_LENGTH;
 800372c:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <RegInt_setregf+0xc4>)
	if (0xD0 <= reg && reg <= 0xD9){
 800372e:	0002      	movs	r2, r0
 8003730:	3230      	adds	r2, #48	; 0x30
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	2a09      	cmp	r2, #9
 8003736:	d804      	bhi.n	8003742 <RegInt_setregf+0x2e>
		ptr = &EVAL_REGISTERS[reg - 0xD0];
 8003738:	0003      	movs	r3, r0
 800373a:	4828      	ldr	r0, [pc, #160]	; (80037dc <RegInt_setregf+0xc8>)
 800373c:	3bd0      	subs	r3, #208	; 0xd0
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	181b      	adds	r3, r3, r0
	if (!(*regptr == (uint32_t)-1)){
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	3201      	adds	r2, #1
 8003746:	d03a      	beq.n	80037be <RegInt_setregf+0xaa>
	return 1;
 8003748:	2001      	movs	r0, #1
		*regptr = val;
 800374a:	6019      	str	r1, [r3, #0]
}
 800374c:	b004      	add	sp, #16
 800374e:	bd70      	pop	{r4, r5, r6, pc}
		ptr = &GENERAL_REGISTERS[reg];
 8003750:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <RegInt_setregf+0xcc>)
 8003752:	0083      	lsls	r3, r0, #2
 8003754:	189b      	adds	r3, r3, r2
	if (0x20 <= reg && reg <= 0x42){
 8003756:	0002      	movs	r2, r0
 8003758:	3a20      	subs	r2, #32
 800375a:	b2d4      	uxtb	r4, r2
 800375c:	2c22      	cmp	r4, #34	; 0x22
 800375e:	d802      	bhi.n	8003766 <RegInt_setregf+0x52>
		ptr = &SERVICE_REGISTERS[reg - 0x20];
 8003760:	4b20      	ldr	r3, [pc, #128]	; (80037e4 <RegInt_setregf+0xd0>)
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	18d3      	adds	r3, r2, r3
	if (0x81 <= reg && reg <= 0x85){
 8003766:	0002      	movs	r2, r0
 8003768:	327f      	adds	r2, #127	; 0x7f
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	2a04      	cmp	r2, #4
 800376e:	d8de      	bhi.n	800372e <RegInt_setregf+0x1a>
		ptr = &META_REGISTERS[reg - 0x81];
 8003770:	0003      	movs	r3, r0
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <RegInt_setregf+0xd4>)
 8003774:	3b81      	subs	r3, #129	; 0x81
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	189b      	adds	r3, r3, r2
 800377a:	e7d8      	b.n	800372e <RegInt_setregf+0x1a>
    if(reg == 0x02){
 800377c:	2802      	cmp	r0, #2
 800377e:	d020      	beq.n	80037c2 <RegInt_setregf+0xae>
    uint8_t read_only_addr[10] = {0x06, 0x10, 0x11, 0x12, 0x81, 0x82,0x83,0x84,0x85, 0xE9}; //please have this list be ordered.
 8003780:	ac01      	add	r4, sp, #4
 8003782:	0022      	movs	r2, r4
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <RegInt_setregf+0xd8>)
 8003786:	331c      	adds	r3, #28
 8003788:	cb60      	ldmia	r3!, {r5, r6}
 800378a:	c260      	stmia	r2!, {r5, r6}
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	2300      	movs	r3, #0
 8003792:	e004      	b.n	800379e <RegInt_setregf+0x8a>
		if (reg < read_only_addr[i]){break;}
 8003794:	4290      	cmp	r0, r2
 8003796:	d3c1      	bcc.n	800371c <RegInt_setregf+0x8>
 8003798:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < 10; i++){
 800379a:	2b0a      	cmp	r3, #10
 800379c:	d0be      	beq.n	800371c <RegInt_setregf+0x8>
		if (reg == read_only_addr[i]){return 0;}
 800379e:	5ce2      	ldrb	r2, [r4, r3]
 80037a0:	4290      	cmp	r0, r2
 80037a2:	d1f7      	bne.n	8003794 <RegInt_setregf+0x80>
        if (!RegInt_writeable(reg)){DBG_PRINTLN("not writable");return 0;}
 80037a4:	4812      	ldr	r0, [pc, #72]	; (80037f0 <RegInt_setregf+0xdc>)
 80037a6:	f011 faad 	bl	8014d04 <__wrap_printf>
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <RegInt_setregf+0xe0>)
 80037ac:	f011 faaa 	bl	8014d04 <__wrap_printf>
 80037b0:	224c      	movs	r2, #76	; 0x4c
 80037b2:	4911      	ldr	r1, [pc, #68]	; (80037f8 <RegInt_setregf+0xe4>)
 80037b4:	4811      	ldr	r0, [pc, #68]	; (80037fc <RegInt_setregf+0xe8>)
 80037b6:	f011 faa5 	bl	8014d04 <__wrap_printf>
 80037ba:	2000      	movs	r0, #0
 80037bc:	e7c6      	b.n	800374c <RegInt_setregf+0x38>
	return 1;
 80037be:	2001      	movs	r0, #1
 80037c0:	e7c4      	b.n	800374c <RegInt_setregf+0x38>
	REGADRERR = -1;
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <RegInt_setregf+0xc0>)
 80037c4:	3a01      	subs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
	return *regptr;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <RegInt_setregf+0xcc>)
        if(RegInt_getreg(0x06) && 0x00000001){
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0d7      	beq.n	8003780 <RegInt_setregf+0x6c>
 80037d0:	e7e8      	b.n	80037a4 <RegInt_setregf+0x90>
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	200003b0 	.word	0x200003b0
 80037d8:	200005a0 	.word	0x200005a0
 80037dc:	200004c0 	.word	0x200004c0
 80037e0:	200003b4 	.word	0x200003b4
 80037e4:	20000514 	.word	0x20000514
 80037e8:	20000500 	.word	0x20000500
 80037ec:	08015578 	.word	0x08015578
 80037f0:	0801bd4c 	.word	0x0801bd4c
 80037f4:	0801c1e4 	.word	0x0801c1e4
 80037f8:	0801bcb8 	.word	0x0801bcb8
 80037fc:	0801bccc 	.word	0x0801bccc

08003800 <RegInt_Init>:
	queue_cmd_end = 0;
 8003800:	234a      	movs	r3, #74	; 0x4a
 8003802:	2200      	movs	r2, #0
void RegInt_Init(void){
 8003804:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i = 0; i < 0xFF; i++){
 8003806:	2400      	movs	r4, #0
	queue_cmd_end = 0;
 8003808:	4d2c      	ldr	r5, [pc, #176]	; (80038bc <RegInt_Init+0xbc>)
 800380a:	54ea      	strb	r2, [r5, r3]
		RegInt_setregf(i, 0, 1);
 800380c:	0020      	movs	r0, r4
	for(uint8_t i = 0; i < 0xFF; i++){
 800380e:	3401      	adds	r4, #1
		RegInt_setregf(i, 0, 1);
 8003810:	2201      	movs	r2, #1
 8003812:	2100      	movs	r1, #0
	for(uint8_t i = 0; i < 0xFF; i++){
 8003814:	b2e4      	uxtb	r4, r4
		RegInt_setregf(i, 0, 1);
 8003816:	f7ff ff7d 	bl	8003714 <RegInt_setregf>
	for(uint8_t i = 0; i < 0xFF; i++){
 800381a:	2cff      	cmp	r4, #255	; 0xff
 800381c:	d1f6      	bne.n	800380c <RegInt_Init+0xc>
	REGADRERR = -1;
 800381e:	2201      	movs	r2, #1
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <RegInt_Init+0xc0>)
 8003822:	4252      	negs	r2, r2
 8003824:	601a      	str	r2, [r3, #0]
	if (!(*regptr == (uint32_t)-1)){
 8003826:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <RegInt_Init+0xc4>)
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	3201      	adds	r2, #1
 800382c:	d002      	beq.n	8003834 <RegInt_Init+0x34>
		*regptr = val;
 800382e:	22e1      	movs	r2, #225	; 0xe1
 8003830:	0252      	lsls	r2, r2, #9
 8003832:	61da      	str	r2, [r3, #28]
	if (!(*regptr == (uint32_t)-1)){
 8003834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003836:	3201      	adds	r2, #1
 8003838:	d001      	beq.n	800383e <RegInt_Init+0x3e>
		*regptr = val;
 800383a:	2200      	movs	r2, #0
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
	if (!(*regptr == (uint32_t)-1)){
 800383e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003840:	3201      	adds	r2, #1
 8003842:	d001      	beq.n	8003848 <RegInt_Init+0x48>
		*regptr = val;
 8003844:	4a20      	ldr	r2, [pc, #128]	; (80038c8 <RegInt_Init+0xc8>)
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
	if (!(*regptr == (uint32_t)-1)){
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	3201      	adds	r2, #1
 800384c:	d001      	beq.n	8003852 <RegInt_Init+0x52>
		*regptr = val;
 800384e:	4a1f      	ldr	r2, [pc, #124]	; (80038cc <RegInt_Init+0xcc>)
 8003850:	645a      	str	r2, [r3, #68]	; 0x44
	if (!(*regptr == (uint32_t)-1)){
 8003852:	4b1f      	ldr	r3, [pc, #124]	; (80038d0 <RegInt_Init+0xd0>)
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	3201      	adds	r2, #1
 8003858:	d002      	beq.n	8003860 <RegInt_Init+0x60>
		*regptr = val;
 800385a:	2296      	movs	r2, #150	; 0x96
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	611a      	str	r2, [r3, #16]
	if (!(*regptr == (uint32_t)-1)){
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	3201      	adds	r2, #1
 8003864:	d002      	beq.n	800386c <RegInt_Init+0x6c>
		*regptr = val;
 8003866:	22fa      	movs	r2, #250	; 0xfa
 8003868:	0092      	lsls	r2, r2, #2
 800386a:	615a      	str	r2, [r3, #20]
	if (!(*regptr == (uint32_t)-1)){
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	3201      	adds	r2, #1
 8003870:	d001      	beq.n	8003876 <RegInt_Init+0x76>
		*regptr = val;
 8003872:	220f      	movs	r2, #15
 8003874:	619a      	str	r2, [r3, #24]
	if (!(*regptr == (uint32_t)-1)){
 8003876:	69da      	ldr	r2, [r3, #28]
 8003878:	3201      	adds	r2, #1
 800387a:	d001      	beq.n	8003880 <RegInt_Init+0x80>
		*regptr = val;
 800387c:	2202      	movs	r2, #2
 800387e:	61da      	str	r2, [r3, #28]
	if (!(*regptr == (uint32_t)-1)){
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	3201      	adds	r2, #1
 8003884:	d002      	beq.n	800388c <RegInt_Init+0x8c>
		*regptr = val;
 8003886:	22fa      	movs	r2, #250	; 0xfa
 8003888:	0052      	lsls	r2, r2, #1
 800388a:	621a      	str	r2, [r3, #32]
	if (!(*regptr == (uint32_t)-1)){
 800388c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800388e:	3201      	adds	r2, #1
 8003890:	d001      	beq.n	8003896 <RegInt_Init+0x96>
		*regptr = val;
 8003892:	2200      	movs	r2, #0
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
	uart_state = 0;
 8003896:	2348      	movs	r3, #72	; 0x48
 8003898:	2200      	movs	r2, #0
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 800389a:	2101      	movs	r1, #1
 800389c:	480d      	ldr	r0, [pc, #52]	; (80038d4 <RegInt_Init+0xd4>)
	uart_state = 0;
 800389e:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 80038a0:	f007 f864 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
	DBG_PRINTLN("Registers Initialised");
 80038a4:	480c      	ldr	r0, [pc, #48]	; (80038d8 <RegInt_Init+0xd8>)
 80038a6:	f011 fa2d 	bl	8014d04 <__wrap_printf>
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <RegInt_Init+0xdc>)
 80038ac:	f011 fa2a 	bl	8014d04 <__wrap_printf>
 80038b0:	2289      	movs	r2, #137	; 0x89
 80038b2:	490b      	ldr	r1, [pc, #44]	; (80038e0 <RegInt_Init+0xe0>)
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <RegInt_Init+0xe4>)
 80038b6:	f011 fa25 	bl	8014d04 <__wrap_printf>
}
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	2000018c 	.word	0x2000018c
 80038c0:	200003b0 	.word	0x200003b0
 80038c4:	200003b4 	.word	0x200003b4
 80038c8:	bd010100 	.word	0xbd010100
 80038cc:	bf010400 	.word	0xbf010400
 80038d0:	200004c0 	.word	0x200004c0
 80038d4:	200005a4 	.word	0x200005a4
 80038d8:	0801bd4c 	.word	0x0801bd4c
 80038dc:	0801c1f4 	.word	0x0801c1f4
 80038e0:	0801bcb8 	.word	0x0801bcb8
 80038e4:	0801bccc 	.word	0x0801bccc

080038e8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <SystemInit+0xc>)
 80038ec:	0512      	lsls	r2, r2, #20
 80038ee:	609a      	str	r2, [r3, #8]
#endif
}
 80038f0:	4770      	bx	lr
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
 */
void USART1_IRQHandler(void)
{
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	46c6      	mov	lr, r8
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038fc:	4c65      	ldr	r4, [pc, #404]	; (8003a94 <USART1_IRQHandler+0x19c>)
 80038fe:	b500      	push	{lr}
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	b082      	sub	sp, #8
 8003904:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003906:	6819      	ldr	r1, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003908:	6898      	ldr	r0, [r3, #8]
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 800390a:	0715      	lsls	r5, r2, #28
 800390c:	d10e      	bne.n	800392c <USART1_IRQHandler+0x34>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800390e:	2520      	movs	r5, #32
 8003910:	422a      	tst	r2, r5
 8003912:	d100      	bne.n	8003916 <USART1_IRQHandler+0x1e>
 8003914:	e08b      	b.n	8003a2e <USART1_IRQHandler+0x136>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003916:	4229      	tst	r1, r5
 8003918:	d102      	bne.n	8003920 <USART1_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800391a:	00c5      	lsls	r5, r0, #3
 800391c:	d400      	bmi.n	8003920 <USART1_IRQHandler+0x28>
 800391e:	e086      	b.n	8003a2e <USART1_IRQHandler+0x136>
    {
      if (huart->RxISR != NULL)
 8003920:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07d      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
  {
    if (huart->TxISR != NULL)
    {
      huart->TxISR(huart);
 8003926:	0020      	movs	r0, r4
 8003928:	4798      	blx	r3
 800392a:	e07a      	b.n	8003a22 <USART1_IRQHandler+0x12a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800392c:	4e5a      	ldr	r6, [pc, #360]	; (8003a98 <USART1_IRQHandler+0x1a0>)
 800392e:	4006      	ands	r6, r0
 8003930:	46b0      	mov	r8, r6
 8003932:	1e35      	subs	r5, r6, #0
 8003934:	d104      	bne.n	8003940 <USART1_IRQHandler+0x48>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003936:	3521      	adds	r5, #33	; 0x21
 8003938:	35ff      	adds	r5, #255	; 0xff
 800393a:	4229      	tst	r1, r5
 800393c:	d100      	bne.n	8003940 <USART1_IRQHandler+0x48>
 800393e:	e076      	b.n	8003a2e <USART1_IRQHandler+0x136>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003940:	2501      	movs	r5, #1
 8003942:	422a      	tst	r2, r5
 8003944:	d007      	beq.n	8003956 <USART1_IRQHandler+0x5e>
 8003946:	05ce      	lsls	r6, r1, #23
 8003948:	d505      	bpl.n	8003956 <USART1_IRQHandler+0x5e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800394a:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800394c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800394e:	3788      	adds	r7, #136	; 0x88
 8003950:	683e      	ldr	r6, [r7, #0]
 8003952:	4335      	orrs	r5, r6
 8003954:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003956:	2502      	movs	r5, #2
 8003958:	422a      	tst	r2, r5
 800395a:	d00a      	beq.n	8003972 <USART1_IRQHandler+0x7a>
 800395c:	07c6      	lsls	r6, r0, #31
 800395e:	d508      	bpl.n	8003972 <USART1_IRQHandler+0x7a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003960:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003962:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003964:	3788      	adds	r7, #136	; 0x88
 8003966:	683d      	ldr	r5, [r7, #0]
 8003968:	46ac      	mov	ip, r5
 800396a:	2504      	movs	r5, #4
 800396c:	4666      	mov	r6, ip
 800396e:	4335      	orrs	r5, r6
 8003970:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003972:	2504      	movs	r5, #4
 8003974:	422a      	tst	r2, r5
 8003976:	d00a      	beq.n	800398e <USART1_IRQHandler+0x96>
 8003978:	07c6      	lsls	r6, r0, #31
 800397a:	d508      	bpl.n	800398e <USART1_IRQHandler+0x96>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800397c:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800397e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003980:	3788      	adds	r7, #136	; 0x88
 8003982:	683d      	ldr	r5, [r7, #0]
 8003984:	46ac      	mov	ip, r5
 8003986:	2502      	movs	r5, #2
 8003988:	4666      	mov	r6, ip
 800398a:	4335      	orrs	r5, r6
 800398c:	603d      	str	r5, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 800398e:	0715      	lsls	r5, r2, #28
 8003990:	d50b      	bpl.n	80039aa <USART1_IRQHandler+0xb2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003992:	068d      	lsls	r5, r1, #26
 8003994:	d402      	bmi.n	800399c <USART1_IRQHandler+0xa4>
 8003996:	4645      	mov	r5, r8
 8003998:	2d00      	cmp	r5, #0
 800399a:	d006      	beq.n	80039aa <USART1_IRQHandler+0xb2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800399c:	2508      	movs	r5, #8
 800399e:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a0:	0023      	movs	r3, r4
 80039a2:	3388      	adds	r3, #136	; 0x88
 80039a4:	681e      	ldr	r6, [r3, #0]
 80039a6:	4335      	orrs	r5, r6
 80039a8:	601d      	str	r5, [r3, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039aa:	0023      	movs	r3, r4
 80039ac:	3388      	adds	r3, #136	; 0x88
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d036      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039b4:	2320      	movs	r3, #32
 80039b6:	421a      	tst	r2, r3
 80039b8:	d008      	beq.n	80039cc <USART1_IRQHandler+0xd4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039ba:	4219      	tst	r1, r3
 80039bc:	d101      	bne.n	80039c2 <USART1_IRQHandler+0xca>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039be:	00c3      	lsls	r3, r0, #3
 80039c0:	d504      	bpl.n	80039cc <USART1_IRQHandler+0xd4>
        if (huart->RxISR != NULL)
 80039c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <USART1_IRQHandler+0xd4>
          huart->RxISR(huart);
 80039c8:	0020      	movs	r0, r4
 80039ca:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80039cc:	0021      	movs	r1, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ce:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80039d0:	3188      	adds	r1, #136	; 0x88
 80039d2:	680a      	ldr	r2, [r1, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d4:	6898      	ldr	r0, [r3, #8]
 80039d6:	0640      	lsls	r0, r0, #25
 80039d8:	d402      	bmi.n	80039e0 <USART1_IRQHandler+0xe8>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80039da:	2008      	movs	r0, #8
 80039dc:	4002      	ands	r2, r0
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039de:	d024      	beq.n	8003a2a <USART1_IRQHandler+0x132>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	492e      	ldr	r1, [pc, #184]	; (8003a9c <USART1_IRQHandler+0x1a4>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	492d      	ldr	r1, [pc, #180]	; (8003aa0 <USART1_IRQHandler+0x1a8>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f0:	0022      	movs	r2, r4
 80039f2:	2120      	movs	r1, #32
 80039f4:	3208      	adds	r2, #8
 80039f6:	67d1      	str	r1, [r2, #124]	; 0x7c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039f8:	2200      	movs	r2, #0
 80039fa:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	1849      	adds	r1, r1, r1
 8003a00:	420a      	tst	r2, r1
 8003a02:	d00e      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a04:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003a06:	6fa0      	ldr	r0, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	438a      	bics	r2, r1
 8003a0a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d008      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <USART1_IRQHandler+0x1ac>)
 8003a12:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a14:	f007 fc3e 	bl	800b294 <HAL_DMA_Abort_IT>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d002      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a1c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003a1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a20:	4798      	blx	r3
	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8003a22:	b002      	add	sp, #8
 8003a24:	bc04      	pop	{r2}
 8003a26:	4690      	mov	r8, r2
 8003a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	600a      	str	r2, [r1, #0]
 8003a2c:	e7f9      	b.n	8003a22 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a2e:	2580      	movs	r5, #128	; 0x80
 8003a30:	036d      	lsls	r5, r5, #13
 8003a32:	422a      	tst	r2, r5
 8003a34:	d003      	beq.n	8003a3e <USART1_IRQHandler+0x146>
 8003a36:	0246      	lsls	r6, r0, #9
 8003a38:	d501      	bpl.n	8003a3e <USART1_IRQHandler+0x146>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a3a:	621d      	str	r5, [r3, #32]
 8003a3c:	e7f1      	b.n	8003a22 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a3e:	2580      	movs	r5, #128	; 0x80
 8003a40:	422a      	tst	r2, r5
 8003a42:	d008      	beq.n	8003a56 <USART1_IRQHandler+0x15e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a44:	4229      	tst	r1, r5
 8003a46:	d101      	bne.n	8003a4c <USART1_IRQHandler+0x154>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003a48:	0200      	lsls	r0, r0, #8
 8003a4a:	d504      	bpl.n	8003a56 <USART1_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 8003a4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d000      	beq.n	8003a54 <USART1_IRQHandler+0x15c>
 8003a52:	e768      	b.n	8003926 <USART1_IRQHandler+0x2e>
 8003a54:	e7e5      	b.n	8003a22 <USART1_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a56:	2040      	movs	r0, #64	; 0x40
 8003a58:	4202      	tst	r2, r0
 8003a5a:	d0e2      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
 8003a5c:	4201      	tst	r1, r0
 8003a5e:	d0e0      	beq.n	8003a22 <USART1_IRQHandler+0x12a>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4382      	bics	r2, r0
 8003a64:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a66:	2220      	movs	r2, #32
 8003a68:	1d23      	adds	r3, r4, #4
 8003a6a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a6c:	2200      	movs	r2, #0
	if (queue_cmd_end == 2){
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <USART1_IRQHandler+0x1b0>)
 8003a70:	6722      	str	r2, [r4, #112]	; 0x70
 8003a72:	334a      	adds	r3, #74	; 0x4a
 8003a74:	7819      	ldrb	r1, [r3, #0]
 8003a76:	2902      	cmp	r1, #2
 8003a78:	d102      	bne.n	8003a80 <USART1_IRQHandler+0x188>
		queue_cmd_end = 1;
 8003a7a:	3201      	adds	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e7d0      	b.n	8003a22 <USART1_IRQHandler+0x12a>
	}else if(queue_cmd_end == 1){
 8003a80:	2901      	cmp	r1, #1
 8003a82:	d1ce      	bne.n	8003a22 <USART1_IRQHandler+0x12a>
		queue_cmd_end = 0;
 8003a84:	701a      	strb	r2, [r3, #0]
		uint8_t end = 0xCD;
 8003a86:	466b      	mov	r3, sp
 8003a88:	1dd8      	adds	r0, r3, #7
 8003a8a:	23cd      	movs	r3, #205	; 0xcd
 8003a8c:	7003      	strb	r3, [r0, #0]
		HAL_UART_Transmit_IT(huart, &end, 1);
 8003a8e:	f006 fe7f 	bl	800a790 <HAL_UART_Transmit_IT.constprop.128>
 8003a92:	e7c6      	b.n	8003a22 <USART1_IRQHandler+0x12a>
 8003a94:	200005a4 	.word	0x200005a4
 8003a98:	10000001 	.word	0x10000001
 8003a9c:	fffffedf 	.word	0xfffffedf
 8003aa0:	effffffe 	.word	0xeffffffe
 8003aa4:	08009d0d 	.word	0x08009d0d
 8003aa8:	2000018c 	.word	0x2000018c

08003aac <I2C1_IRQHandler>:
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003aac:	22e0      	movs	r2, #224	; 0xe0
 8003aae:	4824      	ldr	r0, [pc, #144]	; (8003b40 <I2C1_IRQHandler+0x94>)
 8003ab0:	00d2      	lsls	r2, r2, #3
 8003ab2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 8003ab4:	b570      	push	{r4, r5, r6, lr}
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003ab6:	6999      	ldr	r1, [r3, #24]
 8003ab8:	4211      	tst	r1, r2
 8003aba:	d037      	beq.n	8003b2c <I2C1_IRQHandler+0x80>
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003abc:	699c      	ldr	r4, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003abe:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ac0:	681a      	ldr	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ac2:	05e5      	lsls	r5, r4, #23
 8003ac4:	d50a      	bpl.n	8003adc <I2C1_IRQHandler+0x30>
 8003ac6:	09d5      	lsrs	r5, r2, #7
 8003ac8:	420d      	tst	r5, r1
 8003aca:	d007      	beq.n	8003adc <I2C1_IRQHandler+0x30>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003acc:	0005      	movs	r5, r0
 8003ace:	3590      	adds	r5, #144	; 0x90
 8003ad0:	682e      	ldr	r6, [r5, #0]
 8003ad2:	4331      	orrs	r1, r6
 8003ad4:	6029      	str	r1, [r5, #0]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	0049      	lsls	r1, r1, #1
 8003ada:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003adc:	2101      	movs	r1, #1
 8003ade:	0565      	lsls	r5, r4, #21
 8003ae0:	d50b      	bpl.n	8003afa <I2C1_IRQHandler+0x4e>
 8003ae2:	09d5      	lsrs	r5, r2, #7
 8003ae4:	420d      	tst	r5, r1
 8003ae6:	d008      	beq.n	8003afa <I2C1_IRQHandler+0x4e>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003ae8:	0005      	movs	r5, r0
 8003aea:	3590      	adds	r5, #144	; 0x90
 8003aec:	682e      	ldr	r6, [r5, #0]
 8003aee:	3107      	adds	r1, #7
 8003af0:	4331      	orrs	r1, r6
 8003af2:	6029      	str	r1, [r5, #0]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003af4:	2180      	movs	r1, #128	; 0x80
 8003af6:	00c9      	lsls	r1, r1, #3
 8003af8:	61d9      	str	r1, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003afa:	2101      	movs	r1, #1
 8003afc:	05a4      	lsls	r4, r4, #22
 8003afe:	d50b      	bpl.n	8003b18 <I2C1_IRQHandler+0x6c>
 8003b00:	09d2      	lsrs	r2, r2, #7
 8003b02:	420a      	tst	r2, r1
 8003b04:	d008      	beq.n	8003b18 <I2C1_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003b06:	0001      	movs	r1, r0
 8003b08:	2202      	movs	r2, #2
 8003b0a:	3190      	adds	r1, #144	; 0x90
 8003b0c:	680c      	ldr	r4, [r1, #0]
 8003b0e:	4322      	orrs	r2, r4
 8003b10:	600a      	str	r2, [r1, #0]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003b18:	0003      	movs	r3, r0
 8003b1a:	3390      	adds	r3, #144	; 0x90
 8003b1c:	6819      	ldr	r1, [r3, #0]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003b1e:	230b      	movs	r3, #11
 8003b20:	4219      	tst	r1, r3
 8003b22:	d002      	beq.n	8003b2a <I2C1_IRQHandler+0x7e>
  {
    I2C_ITError(hi2c, tmperror);
 8003b24:	304c      	adds	r0, #76	; 0x4c
 8003b26:	f007 fbf3 	bl	800b310 <I2C_ITError.lto_priv.681>
}
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b2c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b2e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8003b30:	1d03      	adds	r3, r0, #4
 8003b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f8      	beq.n	8003b2a <I2C1_IRQHandler+0x7e>
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b38:	304c      	adds	r0, #76	; 0x4c
 8003b3a:	4798      	blx	r3
 8003b3c:	e7f5      	b.n	8003b2a <I2C1_IRQHandler+0x7e>
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	2000018c 	.word	0x2000018c

08003b44 <DMA1_Channel2_3_IRQHandler>:
{
 8003b44:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b46:	4802      	ldr	r0, [pc, #8]	; (8003b50 <DMA1_Channel2_3_IRQHandler+0xc>)
 8003b48:	f007 fb4e 	bl	800b1e8 <HAL_DMA_IRQHandler>
}
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	2000045c 	.word	0x2000045c

08003b54 <DMA1_Channel1_IRQHandler>:
{
 8003b54:	b510      	push	{r4, lr}
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b56:	4802      	ldr	r0, [pc, #8]	; (8003b60 <DMA1_Channel1_IRQHandler+0xc>)
 8003b58:	f007 fb46 	bl	800b1e8 <HAL_DMA_IRQHandler>
}
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	20000400 	.word	0x20000400

08003b64 <EXTI4_15_IRQHandler>:
{
 8003b64:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003b66:	2020      	movs	r0, #32
 8003b68:	f007 fdc6 	bl	800b6f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b6c:	bd10      	pop	{r4, pc}

08003b6e <EXTI2_3_IRQHandler>:
{
 8003b6e:	b510      	push	{r4, lr}
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b70:	2008      	movs	r0, #8
 8003b72:	f007 fdc1 	bl	800b6f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8003b76:	bd10      	pop	{r4, pc}

08003b78 <RTC_TAMP_IRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003b78:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <RTC_TAMP_IRQHandler+0x54>)
{
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	04c9      	lsls	r1, r1, #19
 8003b82:	d508      	bpl.n	8003b96 <RTC_TAMP_IRQHandler+0x1e>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003b84:	2101      	movs	r1, #1
 8003b86:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003b88:	4208      	tst	r0, r1
 8003b8a:	d004      	beq.n	8003b96 <RTC_TAMP_IRQHandler+0x1e>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b8c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003b8e:	4308      	orrs	r0, r1
 8003b90:	65d8      	str	r0, [r3, #92]	; 0x5c
	rtc_alarm_triggered = true;
 8003b92:	480f      	ldr	r0, [pc, #60]	; (8003bd0 <RTC_TAMP_IRQHandler+0x58>)
 8003b94:	7601      	strb	r1, [r0, #24]
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003b96:	6999      	ldr	r1, [r3, #24]
 8003b98:	0489      	lsls	r1, r1, #18
 8003b9a:	d506      	bpl.n	8003baa <RTC_TAMP_IRQHandler+0x32>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003ba0:	4208      	tst	r0, r1
 8003ba2:	d002      	beq.n	8003baa <RTC_TAMP_IRQHandler+0x32>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8003ba4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8003ba6:	4301      	orrs	r1, r0
 8003ba8:	65d9      	str	r1, [r3, #92]	; 0x5c
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003baa:	0011      	movs	r1, r2
 8003bac:	2001      	movs	r0, #1
 8003bae:	3129      	adds	r1, #41	; 0x29
 8003bb0:	7008      	strb	r0, [r1, #0]
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8003bb6:	420c      	tst	r4, r1
 8003bb8:	d004      	beq.n	8003bc4 <RTC_TAMP_IRQHandler+0x4c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003bba:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8003bbc:	4321      	orrs	r1, r4
 8003bbe:	65d9      	str	r1, [r3, #92]	; 0x5c
	rtc_wakeup_triggered = true;
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <RTC_TAMP_IRQHandler+0x5c>)
 8003bc2:	7018      	strb	r0, [r3, #0]
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	3229      	adds	r2, #41	; 0x29
 8003bc8:	7013      	strb	r3, [r2, #0]
}
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	20000288 	.word	0x20000288
 8003bd0:	2000020c 	.word	0x2000020c
 8003bd4:	20000354 	.word	0x20000354

08003bd8 <SysTick_Handler>:
  uwTick += uwTickFreq;
 8003bd8:	4a02      	ldr	r2, [pc, #8]	; (8003be4 <SysTick_Handler+0xc>)
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	4770      	bx	lr
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	200002b4 	.word	0x200002b4

08003be8 <PendSV_Handler>:
 8003be8:	4770      	bx	lr

08003bea <NMI_Handler>:
}
 8003bea:	4770      	bx	lr

08003bec <SVC_Handler>:
 8003bec:	4770      	bx	lr

08003bee <HardFault_Handler>:
{
 8003bee:	e7fe      	b.n	8003bee <HardFault_Handler>

08003bf0 <RegInt_parsecmd.part.9>:
void RegInt_parsecmd(void){
 8003bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf2:	4657      	mov	r7, sl
 8003bf4:	4645      	mov	r5, r8
 8003bf6:	46de      	mov	lr, fp
 8003bf8:	464e      	mov	r6, r9
 8003bfa:	b5e0      	push	{r5, r6, r7, lr}
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003bfc:	4dc0      	ldr	r5, [pc, #768]	; (8003f00 <RegInt_parsecmd.part.9+0x310>)
void RegInt_parsecmd(void){
 8003bfe:	b09f      	sub	sp, #124	; 0x7c
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003c00:	782b      	ldrb	r3, [r5, #0]
void RegInt_parsecmd(void){
 8003c02:	af02      	add	r7, sp, #8
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003c04:	2bf8      	cmp	r3, #248	; 0xf8
 8003c06:	d059      	beq.n	8003cbc <RegInt_parsecmd.part.9+0xcc>
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 8003c08:	2bf9      	cmp	r3, #249	; 0xf9
 8003c0a:	d01a      	beq.n	8003c42 <RegInt_parsecmd.part.9+0x52>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 8003c0c:	2bfa      	cmp	r3, #250	; 0xfa
 8003c0e:	d000      	beq.n	8003c12 <RegInt_parsecmd.part.9+0x22>
 8003c10:	e102      	b.n	8003e18 <RegInt_parsecmd.part.9+0x228>
 8003c12:	786a      	ldrb	r2, [r5, #1]
 8003c14:	4cbb      	ldr	r4, [pc, #748]	; (8003f04 <RegInt_parsecmd.part.9+0x314>)
 8003c16:	0013      	movs	r3, r2
 8003c18:	3318      	adds	r3, #24
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d800      	bhi.n	8003c22 <RegInt_parsecmd.part.9+0x32>
 8003c20:	e075      	b.n	8003d0e <RegInt_parsecmd.part.9+0x11e>
 8003c22:	4db9      	ldr	r5, [pc, #740]	; (8003f08 <RegInt_parsecmd.part.9+0x318>)
	uart_state = 0;
 8003c24:	2348      	movs	r3, #72	; 0x48
 8003c26:	2200      	movs	r2, #0
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003c28:	2101      	movs	r1, #1
 8003c2a:	0028      	movs	r0, r5
	uart_state = 0;
 8003c2c:	54e2      	strb	r2, [r4, r3]
	HAL_UART_Receive_IT(&huart1, uart_rx_buff, 1);
 8003c2e:	f006 fe9d 	bl	800a96c <HAL_UART_Receive_IT.constprop.89>
}
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b01d      	add	sp, #116	; 0x74
 8003c36:	bc3c      	pop	{r2, r3, r4, r5}
 8003c38:	4690      	mov	r8, r2
 8003c3a:	4699      	mov	r9, r3
 8003c3c:	46a2      	mov	sl, r4
 8003c3e:	46ab      	mov	fp, r5
 8003c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	}else if (uart_rx_buff[0] == 0xF9 && cmd_length == 5){
 8003c42:	4cb0      	ldr	r4, [pc, #704]	; (8003f04 <RegInt_parsecmd.part.9+0x314>)
 8003c44:	3bb0      	subs	r3, #176	; 0xb0
 8003c46:	5ce3      	ldrb	r3, [r4, r3]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d1ea      	bne.n	8003c22 <RegInt_parsecmd.part.9+0x32>
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003c4c:	1caa      	adds	r2, r5, #2
 8003c4e:	7853      	ldrb	r3, [r2, #1]
		uint8_t reg = uart_rx_buff[1];
 8003c50:	7868      	ldrb	r0, [r5, #1]
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003c52:	78ad      	ldrb	r5, [r5, #2]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	432b      	orrs	r3, r5
 8003c58:	7895      	ldrb	r5, [r2, #2]
		uint8_t reg = uart_rx_buff[1];
 8003c5a:	6378      	str	r0, [r7, #52]	; 0x34
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003c5c:	042d      	lsls	r5, r5, #16
 8003c5e:	432b      	orrs	r3, r5
 8003c60:	78d5      	ldrb	r5, [r2, #3]
	int8_t success = RegInt_setregf(reg, val, 0);
 8003c62:	2200      	movs	r2, #0
			val |= uart_rx_buff[2+i] << (i%4)*8;
 8003c64:	062d      	lsls	r5, r5, #24
 8003c66:	431d      	orrs	r5, r3
	int8_t success = RegInt_setregf(reg, val, 0);
 8003c68:	0029      	movs	r1, r5
 8003c6a:	f7ff fd53 	bl	8003714 <RegInt_setregf>
		if(RegInt_setreg(reg, val)){RegInt_regaction(reg, val);}
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d000      	beq.n	8003c74 <RegInt_parsecmd.part.9+0x84>
 8003c72:	e0d4      	b.n	8003e1e <RegInt_parsecmd.part.9+0x22e>
 8003c74:	4ea5      	ldr	r6, [pc, #660]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
		val = RegInt_getreg(reg);
 8003c76:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003c78:	0028      	movs	r0, r5
 8003c7a:	f7fc fb01 	bl	8000280 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 8003c7e:	23cc      	movs	r3, #204	; 0xcc
 8003c80:	7733      	strb	r3, [r6, #28]
		uart_tx_buff[1] = 0x05;
 8003c82:	3bc7      	subs	r3, #199	; 0xc7
 8003c84:	7773      	strb	r3, [r6, #29]
		uart_tx_buff[2] = 0x00;
 8003c86:	2300      	movs	r3, #0
 8003c88:	77b3      	strb	r3, [r6, #30]
		uart_tx_buff[3] = 0xF5;
 8003c8a:	33f5      	adds	r3, #245	; 0xf5
 8003c8c:	77f3      	strb	r3, [r6, #31]
		uart_tx_buff[4] = reg;
 8003c8e:	3bd5      	subs	r3, #213	; 0xd5
 8003c90:	54f5      	strb	r5, [r6, r3]
		uart_tx_buff[5] = get_byte(val,0);
 8003c92:	3301      	adds	r3, #1
 8003c94:	54f0      	strb	r0, [r6, r3]
	return (val & (0xFFL << (8*byte))) >> (8*byte);
 8003c96:	0a02      	lsrs	r2, r0, #8
		uart_tx_buff[6] = get_byte(val,1);
 8003c98:	3301      	adds	r3, #1
 8003c9a:	54f2      	strb	r2, [r6, r3]
 8003c9c:	0c02      	lsrs	r2, r0, #16
		uart_tx_buff[7] = get_byte(val,2);
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	54f2      	strb	r2, [r6, r3]
 8003ca2:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[8] = get_byte(val,3);
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	54f0      	strb	r0, [r6, r3]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003ca8:	0030      	movs	r0, r6
		uart_tx_buff[9] = 0xCD;
 8003caa:	22cd      	movs	r2, #205	; 0xcd
 8003cac:	3301      	adds	r3, #1
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003cae:	301c      	adds	r0, #28
 8003cb0:	210a      	movs	r1, #10
		uart_tx_buff[9] = 0xCD;
 8003cb2:	54f2      	strb	r2, [r6, r3]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003cb4:	f006 fd6c 	bl	800a790 <HAL_UART_Transmit_IT.constprop.128>
 8003cb8:	4d93      	ldr	r5, [pc, #588]	; (8003f08 <RegInt_parsecmd.part.9+0x318>)
 8003cba:	e7b3      	b.n	8003c24 <RegInt_parsecmd.part.9+0x34>
	if (uart_rx_buff[0] == 0xF8 && cmd_length == 1){
 8003cbc:	4c91      	ldr	r4, [pc, #580]	; (8003f04 <RegInt_parsecmd.part.9+0x314>)
 8003cbe:	3baf      	subs	r3, #175	; 0xaf
 8003cc0:	5ce3      	ldrb	r3, [r4, r3]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d1ad      	bne.n	8003c22 <RegInt_parsecmd.part.9+0x32>
		uint8_t reg = uart_rx_buff[1];
 8003cc6:	786d      	ldrb	r5, [r5, #1]
		uint32_t val = RegInt_getreg(reg);
 8003cc8:	0028      	movs	r0, r5
 8003cca:	f7fc fad9 	bl	8000280 <RegInt_getreg>
		uart_tx_buff[0] = 0xCC;
 8003cce:	22cc      	movs	r2, #204	; 0xcc
 8003cd0:	4b8e      	ldr	r3, [pc, #568]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003cd2:	0a01      	lsrs	r1, r0, #8
 8003cd4:	771a      	strb	r2, [r3, #28]
		uart_tx_buff[1] = 0x05;
 8003cd6:	3ac7      	subs	r2, #199	; 0xc7
 8003cd8:	775a      	strb	r2, [r3, #29]
		uart_tx_buff[2] = 0x00;
 8003cda:	2200      	movs	r2, #0
 8003cdc:	779a      	strb	r2, [r3, #30]
		uart_tx_buff[3] = 0xF6;
 8003cde:	32f6      	adds	r2, #246	; 0xf6
 8003ce0:	77da      	strb	r2, [r3, #31]
		uart_tx_buff[4] = reg;
 8003ce2:	3ad6      	subs	r2, #214	; 0xd6
 8003ce4:	549d      	strb	r5, [r3, r2]
		uart_tx_buff[5] = get_byte(val,0);
 8003ce6:	3201      	adds	r2, #1
 8003ce8:	5498      	strb	r0, [r3, r2]
		uart_tx_buff[6] = get_byte(val,1);
 8003cea:	3201      	adds	r2, #1
 8003cec:	5499      	strb	r1, [r3, r2]
 8003cee:	0c01      	lsrs	r1, r0, #16
		uart_tx_buff[7] = get_byte(val,2);
 8003cf0:	3201      	adds	r2, #1
 8003cf2:	5499      	strb	r1, [r3, r2]
		uart_tx_buff[9] = 0xCD;
 8003cf4:	21cd      	movs	r1, #205	; 0xcd
 8003cf6:	0e00      	lsrs	r0, r0, #24
		uart_tx_buff[8] = get_byte(val,3);
 8003cf8:	3201      	adds	r2, #1
 8003cfa:	5498      	strb	r0, [r3, r2]
		uart_tx_buff[9] = 0xCD;
 8003cfc:	3201      	adds	r2, #1
 8003cfe:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit_IT(&huart1, uart_tx_buff, 10);
 8003d00:	331c      	adds	r3, #28
 8003d02:	0018      	movs	r0, r3
 8003d04:	39c3      	subs	r1, #195	; 0xc3
 8003d06:	f006 fd43 	bl	800a790 <HAL_UART_Transmit_IT.constprop.128>
 8003d0a:	4d7f      	ldr	r5, [pc, #508]	; (8003f08 <RegInt_parsecmd.part.9+0x318>)
 8003d0c:	e78a      	b.n	8003c24 <RegInt_parsecmd.part.9+0x34>
	}else if (uart_rx_buff[0] == 0xFA && ((uart_rx_buff[1] == 0xE8) || (uart_rx_buff[1] == 0xE9)) && cmd_length == 3){
 8003d0e:	2349      	movs	r3, #73	; 0x49
 8003d10:	5ce3      	ldrb	r3, [r4, r3]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d000      	beq.n	8003d18 <RegInt_parsecmd.part.9+0x128>
 8003d16:	e784      	b.n	8003c22 <RegInt_parsecmd.part.9+0x32>
		uint16_t offst = (offst_h << 8) | offst_l;
 8003d18:	78e8      	ldrb	r0, [r5, #3]
 8003d1a:	78ab      	ldrb	r3, [r5, #2]
 8003d1c:	0200      	lsls	r0, r0, #8
 8003d1e:	4303      	orrs	r3, r0
 8003d20:	637b      	str	r3, [r7, #52]	; 0x34
		bufflen = (sparse_metadata.data_length)*sizeof(uint16_t);
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <RegInt_parsecmd.part.9+0x320>)
 8003d24:	4e79      	ldr	r6, [pc, #484]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003d26:	3340      	adds	r3, #64	; 0x40
 8003d28:	891b      	ldrh	r3, [r3, #8]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	6773      	str	r3, [r6, #116]	; 0x74
		bufflen_far = (sparse_metadata_far.data_length)*sizeof(uint16_t);
 8003d2e:	4b79      	ldr	r3, [pc, #484]	; (8003f14 <RegInt_parsecmd.part.9+0x324>)
 8003d30:	4699      	mov	r9, r3
 8003d32:	8b9b      	ldrh	r3, [r3, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	67b3      	str	r3, [r6, #120]	; 0x78
		if(uart_rx_buff[1] == 0xE8){
 8003d38:	2ae8      	cmp	r2, #232	; 0xe8
 8003d3a:	d100      	bne.n	8003d3e <RegInt_parsecmd.part.9+0x14e>
 8003d3c:	e0a4      	b.n	8003e88 <RegInt_parsecmd.part.9+0x298>
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	2301      	movs	r3, #1
 8003d42:	2201      	movs	r2, #1
 8003d44:	4874      	ldr	r0, [pc, #464]	; (8003f18 <RegInt_parsecmd.part.9+0x328>)
 8003d46:	0049      	lsls	r1, r1, #1
 8003d48:	4683      	mov	fp, r0
 8003d4a:	4874      	ldr	r0, [pc, #464]	; (8003f1c <RegInt_parsecmd.part.9+0x32c>)
 8003d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d4e:	4680      	mov	r8, r0
 8003d50:	4873      	ldr	r0, [pc, #460]	; (8003f20 <RegInt_parsecmd.part.9+0x330>)
 8003d52:	000d      	movs	r5, r1
 8003d54:	4682      	mov	sl, r0
 8003d56:	4873      	ldr	r0, [pc, #460]	; (8003f24 <RegInt_parsecmd.part.9+0x334>)
 8003d58:	3917      	subs	r1, #23
 8003d5a:	6338      	str	r0, [r7, #48]	; 0x30
		uart_tx_buff[1] = get_byte(datalen+1,0);
 8003d5c:	7773      	strb	r3, [r6, #29]
		uart_tx_buff[0] = 0xCC;
 8003d5e:	20cc      	movs	r0, #204	; 0xcc
		uart_tx_buff[3] = 0xF7;
 8003d60:	23f7      	movs	r3, #247	; 0xf7
		uart_tx_buff[0] = 0xCC;
 8003d62:	7730      	strb	r0, [r6, #28]
		uart_tx_buff[3] = 0xF7;
 8003d64:	77f3      	strb	r3, [r6, #31]
		DBG_PRINTLN("buffer transmitt");
 8003d66:	4650      	mov	r0, sl
		uart_tx_buff[4] = uart_rx_buff[1];
 8003d68:	3bd7      	subs	r3, #215	; 0xd7
 8003d6a:	54f1      	strb	r1, [r6, r3]
		uart_tx_buff[2] = get_byte(datalen+1,1);
 8003d6c:	77b2      	strb	r2, [r6, #30]
		DBG_PRINTLN("buffer transmitt");
 8003d6e:	f010 ffc9 	bl	8014d04 <__wrap_printf>
 8003d72:	486d      	ldr	r0, [pc, #436]	; (8003f28 <RegInt_parsecmd.part.9+0x338>)
 8003d74:	f010 ffc6 	bl	8014d04 <__wrap_printf>
 8003d78:	4659      	mov	r1, fp
 8003d7a:	22cd      	movs	r2, #205	; 0xcd
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	f010 ffc1 	bl	8014d04 <__wrap_printf>
		DBG_PRINTINT(datalen);
 8003d82:	4650      	mov	r0, sl
 8003d84:	f010 ffbe 	bl	8014d04 <__wrap_printf>
 8003d88:	002a      	movs	r2, r5
 8003d8a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8003d8c:	4967      	ldr	r1, [pc, #412]	; (8003f2c <RegInt_parsecmd.part.9+0x33c>)
 8003d8e:	0028      	movs	r0, r5
 8003d90:	f010 ffb8 	bl	8014d04 <__wrap_printf>
 8003d94:	4659      	mov	r1, fp
 8003d96:	22ce      	movs	r2, #206	; 0xce
 8003d98:	4640      	mov	r0, r8
 8003d9a:	f010 ffb3 	bl	8014d04 <__wrap_printf>
		DBG_PRINTINT(bufflen);
 8003d9e:	4650      	mov	r0, sl
 8003da0:	f010 ffb0 	bl	8014d04 <__wrap_printf>
 8003da4:	6f72      	ldr	r2, [r6, #116]	; 0x74
 8003da6:	4962      	ldr	r1, [pc, #392]	; (8003f30 <RegInt_parsecmd.part.9+0x340>)
 8003da8:	0028      	movs	r0, r5
 8003daa:	f010 ffab 	bl	8014d04 <__wrap_printf>
 8003dae:	4659      	mov	r1, fp
 8003db0:	22cf      	movs	r2, #207	; 0xcf
 8003db2:	4640      	mov	r0, r8
 8003db4:	f010 ffa6 	bl	8014d04 <__wrap_printf>
		DBG_PRINTINT(bufflen_far);
 8003db8:	4650      	mov	r0, sl
 8003dba:	f010 ffa3 	bl	8014d04 <__wrap_printf>
 8003dbe:	6fb2      	ldr	r2, [r6, #120]	; 0x78
 8003dc0:	495c      	ldr	r1, [pc, #368]	; (8003f34 <RegInt_parsecmd.part.9+0x344>)
 8003dc2:	0028      	movs	r0, r5
 8003dc4:	633d      	str	r5, [r7, #48]	; 0x30
 8003dc6:	f010 ff9d 	bl	8014d04 <__wrap_printf>
 8003dca:	4659      	mov	r1, fp
 8003dcc:	22d0      	movs	r2, #208	; 0xd0
 8003dce:	4640      	mov	r0, r8
 8003dd0:	f010 ff98 	bl	8014d04 <__wrap_printf>
		HAL_UART_Transmit(&huart1, uart_tx_buff, 5, 10);
 8003dd4:	0031      	movs	r1, r6
 8003dd6:	4d4c      	ldr	r5, [pc, #304]	; (8003f08 <RegInt_parsecmd.part.9+0x318>)
 8003dd8:	311c      	adds	r1, #28
 8003dda:	2205      	movs	r2, #5
 8003ddc:	230a      	movs	r3, #10
 8003dde:	0028      	movs	r0, r5
 8003de0:	f007 f868 	bl	800aeb4 <HAL_UART_Transmit>
		queue_cmd_end = 1;
 8003de4:	264a      	movs	r6, #74	; 0x4a
 8003de6:	2301      	movs	r3, #1
		DBG_PRINTINT(queue_cmd_end);
 8003de8:	4650      	mov	r0, sl
		queue_cmd_end = 1;
 8003dea:	55a3      	strb	r3, [r4, r6]
		DBG_PRINTINT(queue_cmd_end);
 8003dec:	f010 ff8a 	bl	8014d04 <__wrap_printf>
 8003df0:	5da2      	ldrb	r2, [r4, r6]
 8003df2:	4951      	ldr	r1, [pc, #324]	; (8003f38 <RegInt_parsecmd.part.9+0x348>)
 8003df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df6:	f010 ff85 	bl	8014d04 <__wrap_printf>
 8003dfa:	4659      	mov	r1, fp
 8003dfc:	22d4      	movs	r2, #212	; 0xd4
 8003dfe:	4640      	mov	r0, r8
 8003e00:	f010 ff80 	bl	8014d04 <__wrap_printf>
		HAL_UART_Transmit_IT(&huart1, ((uint8_t*) *data + offst), datalen);
 8003e04:	464b      	mov	r3, r9
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0e:	469c      	mov	ip, r3
 8003e10:	4460      	add	r0, ip
 8003e12:	f006 fcbd 	bl	800a790 <HAL_UART_Transmit_IT.constprop.128>
 8003e16:	e705      	b.n	8003c24 <RegInt_parsecmd.part.9+0x34>
 8003e18:	4c3a      	ldr	r4, [pc, #232]	; (8003f04 <RegInt_parsecmd.part.9+0x314>)
 8003e1a:	4d3b      	ldr	r5, [pc, #236]	; (8003f08 <RegInt_parsecmd.part.9+0x318>)
 8003e1c:	e702      	b.n	8003c24 <RegInt_parsecmd.part.9+0x34>
	if(reg == 0x03){
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d01f      	beq.n	8003e64 <RegInt_parsecmd.part.9+0x274>
	if(reg == 0x07){
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	2b07      	cmp	r3, #7
 8003e28:	d017      	beq.n	8003e5a <RegInt_parsecmd.part.9+0x26a>
    if(reg == 0x0A){
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b0a      	cmp	r3, #10
 8003e2e:	d000      	beq.n	8003e32 <RegInt_parsecmd.part.9+0x242>
 8003e30:	e720      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
    if(mode == 0x00000000){return;}
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	d100      	bne.n	8003e38 <RegInt_parsecmd.part.9+0x248>
 8003e36:	e71d      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
    if(mode == 0x00000001){    
 8003e38:	2d01      	cmp	r5, #1
 8003e3a:	d100      	bne.n	8003e3e <RegInt_parsecmd.part.9+0x24e>
 8003e3c:	e086      	b.n	8003f4c <RegInt_parsecmd.part.9+0x35c>
 8003e3e:	4b3f      	ldr	r3, [pc, #252]	; (8003f3c <RegInt_parsecmd.part.9+0x34c>)
 8003e40:	4d3f      	ldr	r5, [pc, #252]	; (8003f40 <RegInt_parsecmd.part.9+0x350>)
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	REGADRERR = -1;
 8003e44:	2301      	movs	r3, #1
 8003e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e48:	425b      	negs	r3, r3
 8003e4a:	6013      	str	r3, [r2, #0]
	if (!(*regptr == (uint32_t)-1)){
 8003e4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e4e:	3301      	adds	r3, #1
 8003e50:	d100      	bne.n	8003e54 <RegInt_parsecmd.part.9+0x264>
 8003e52:	e70f      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
		*regptr = val;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e58:	e70c      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
		changeUART1baud(val);
 8003e5a:	0028      	movs	r0, r5
 8003e5c:	f7fd fbc8 	bl	80015f0 <changeUART1baud>
 8003e60:	4e2a      	ldr	r6, [pc, #168]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003e62:	e708      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
	if (val == 0x00){stopService();}
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	d043      	beq.n	8003ef0 <RegInt_parsecmd.part.9+0x300>
	if (val == 0x01){createService();}
 8003e68:	2d01      	cmp	r5, #1
 8003e6a:	d045      	beq.n	8003ef8 <RegInt_parsecmd.part.9+0x308>
	if (val == 0x02){activateService();}
 8003e6c:	2d02      	cmp	r5, #2
 8003e6e:	d007      	beq.n	8003e80 <RegInt_parsecmd.part.9+0x290>
	if (val == 0x03){
 8003e70:	2d03      	cmp	r5, #3
 8003e72:	d000      	beq.n	8003e76 <RegInt_parsecmd.part.9+0x286>
 8003e74:	e0b9      	b.n	8003fea <RegInt_parsecmd.part.9+0x3fa>
		if(createService()){activateService();}
 8003e76:	f7fe ff17 	bl	8002ca8 <createService>
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d100      	bne.n	8003e80 <RegInt_parsecmd.part.9+0x290>
 8003e7e:	e6f9      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
 8003e80:	f7ff fbce 	bl	8003620 <activateService>
 8003e84:	4e21      	ldr	r6, [pc, #132]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003e86:	e6f6      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
        DBG_PRINTINT(bins);
 8003e88:	4b25      	ldr	r3, [pc, #148]	; (8003f20 <RegInt_parsecmd.part.9+0x330>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	469a      	mov	sl, r3
 8003e8e:	f010 ff39 	bl	8014d04 <__wrap_printf>
 8003e92:	2354      	movs	r3, #84	; 0x54
 8003e94:	491e      	ldr	r1, [pc, #120]	; (8003f10 <RegInt_parsecmd.part.9+0x320>)
 8003e96:	5aca      	ldrh	r2, [r1, r3]
 8003e98:	4922      	ldr	r1, [pc, #136]	; (8003f24 <RegInt_parsecmd.part.9+0x334>)
 8003e9a:	0008      	movs	r0, r1
 8003e9c:	4929      	ldr	r1, [pc, #164]	; (8003f44 <RegInt_parsecmd.part.9+0x354>)
 8003e9e:	6338      	str	r0, [r7, #48]	; 0x30
 8003ea0:	f010 ff30 	bl	8014d04 <__wrap_printf>
 8003ea4:	491c      	ldr	r1, [pc, #112]	; (8003f18 <RegInt_parsecmd.part.9+0x328>)
 8003ea6:	22c0      	movs	r2, #192	; 0xc0
 8003ea8:	468b      	mov	fp, r1
 8003eaa:	491c      	ldr	r1, [pc, #112]	; (8003f1c <RegInt_parsecmd.part.9+0x32c>)
 8003eac:	4688      	mov	r8, r1
 8003eae:	4659      	mov	r1, fp
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	f010 ff27 	bl	8014d04 <__wrap_printf>
        DBG_PRINTINT(sweeps);
 8003eb6:	4650      	mov	r0, sl
 8003eb8:	f010 ff24 	bl	8014d04 <__wrap_printf>
 8003ebc:	4914      	ldr	r1, [pc, #80]	; (8003f10 <RegInt_parsecmd.part.9+0x320>)
 8003ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ec0:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
 8003ec2:	4921      	ldr	r1, [pc, #132]	; (8003f48 <RegInt_parsecmd.part.9+0x358>)
 8003ec4:	f010 ff1e 	bl	8014d04 <__wrap_printf>
 8003ec8:	22c1      	movs	r2, #193	; 0xc1
 8003eca:	4659      	mov	r1, fp
 8003ecc:	4640      	mov	r0, r8
 8003ece:	f010 ff19 	bl	8014d04 <__wrap_printf>
		datalen = sweeps*bins*sizeof(uint16_t);
 8003ed2:	2254      	movs	r2, #84	; 0x54
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <RegInt_parsecmd.part.9+0x320>)
 8003ed6:	8f8b      	ldrh	r3, [r1, #60]	; 0x3c
 8003ed8:	5a8a      	ldrh	r2, [r1, r2]
 8003eda:	7869      	ldrb	r1, [r5, #1]
 8003edc:	435a      	muls	r2, r3
 8003ede:	0052      	lsls	r2, r2, #1
 8003ee0:	1c53      	adds	r3, r2, #1
 8003ee2:	0015      	movs	r5, r2
 8003ee4:	b292      	uxth	r2, r2
 8003ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee8:	0a1a      	lsrs	r2, r3, #8
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e735      	b.n	8003d5c <RegInt_parsecmd.part.9+0x16c>
	if (val == 0x00){stopService();}
 8003ef0:	f7fe fe06 	bl	8002b00 <stopService>
 8003ef4:	4e05      	ldr	r6, [pc, #20]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003ef6:	e6be      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
	if (val == 0x01){createService();}
 8003ef8:	f7fe fed6 	bl	8002ca8 <createService>
 8003efc:	4e03      	ldr	r6, [pc, #12]	; (8003f0c <RegInt_parsecmd.part.9+0x31c>)
 8003efe:	e6ba      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
 8003f00:	20000370 	.word	0x20000370
 8003f04:	2000018c 	.word	0x2000018c
 8003f08:	200005a4 	.word	0x200005a4
 8003f0c:	2000020c 	.word	0x2000020c
 8003f10:	2000010c 	.word	0x2000010c
 8003f14:	2000008c 	.word	0x2000008c
 8003f18:	0801bcb8 	.word	0x0801bcb8
 8003f1c:	0801bccc 	.word	0x0801bccc
 8003f20:	0801bd4c 	.word	0x0801bd4c
 8003f24:	0801c11c 	.word	0x0801c11c
 8003f28:	0801c480 	.word	0x0801c480
 8003f2c:	0801c494 	.word	0x0801c494
 8003f30:	0801c49c 	.word	0x0801c49c
 8003f34:	0801c4a4 	.word	0x0801c4a4
 8003f38:	0801c4b0 	.word	0x0801c4b0
 8003f3c:	200003b0 	.word	0x200003b0
 8003f40:	200003b4 	.word	0x200003b4
 8003f44:	0801c470 	.word	0x0801c470
 8003f48:	0801c478 	.word	0x0801c478
        stopService();
 8003f4c:	f7fe fdd8 	bl	8002b00 <stopService>
        INF_PRINTLN("STM32 Sleep");
 8003f50:	4b8e      	ldr	r3, [pc, #568]	; (800418c <RegInt_parsecmd.part.9+0x59c>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	4699      	mov	r9, r3
 8003f56:	f010 fed5 	bl	8014d04 <__wrap_printf>
 8003f5a:	488d      	ldr	r0, [pc, #564]	; (8004190 <RegInt_parsecmd.part.9+0x5a0>)
 8003f5c:	f010 fed2 	bl	8014d04 <__wrap_printf>
 8003f60:	2298      	movs	r2, #152	; 0x98
 8003f62:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <RegInt_parsecmd.part.9+0x5a4>)
 8003f64:	4e8c      	ldr	r6, [pc, #560]	; (8004198 <RegInt_parsecmd.part.9+0x5a8>)
 8003f66:	0019      	movs	r1, r3
 8003f68:	0052      	lsls	r2, r2, #1
 8003f6a:	0030      	movs	r0, r6
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	f010 fec9 	bl	8014d04 <__wrap_printf>
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003f72:	2202      	movs	r2, #2
 8003f74:	4b89      	ldr	r3, [pc, #548]	; (800419c <RegInt_parsecmd.part.9+0x5ac>)
 8003f76:	4693      	mov	fp, r2
 8003f78:	469a      	mov	sl, r3
 8003f7a:	681b      	ldr	r3, [r3, #0]
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	4393      	bics	r3, r2
 8003f80:	4652      	mov	r2, sl
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003f82:	2007      	movs	r0, #7
 8003f84:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003f86:	4b86      	ldr	r3, [pc, #536]	; (80041a0 <RegInt_parsecmd.part.9+0x5b0>)
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	438a      	bics	r2, r1
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003f8c:	4985      	ldr	r1, [pc, #532]	; (80041a4 <RegInt_parsecmd.part.9+0x5b4>)
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003f8e:	611a      	str	r2, [r3, #16]
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8003f90:	680a      	ldr	r2, [r1, #0]
 8003f92:	4382      	bics	r2, r0
 8003f94:	4315      	orrs	r5, r2
 8003f96:	600d      	str	r5, [r1, #0]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f98:	2104      	movs	r1, #4
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	611a      	str	r2, [r3, #16]
    __SEV();
 8003fa0:	bf40      	sev
    __WFE();
 8003fa2:	bf20      	wfe
    __WFE();
 8003fa4:	bf20      	wfe
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	438a      	bics	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]
        SystemClock_Config();
 8003fac:	f7fd fb7a 	bl	80016a4 <SystemClock_Config>
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003fb0:	4653      	mov	r3, sl
 8003fb2:	465a      	mov	r2, fp
 8003fb4:	681b      	ldr	r3, [r3, #0]
	return *regptr;
 8003fb6:	4d7c      	ldr	r5, [pc, #496]	; (80041a8 <RegInt_parsecmd.part.9+0x5b8>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	4652      	mov	r2, sl
 8003fbc:	6013      	str	r3, [r2, #0]
	REGADRERR = -1;
 8003fbe:	4b7b      	ldr	r3, [pc, #492]	; (80041ac <RegInt_parsecmd.part.9+0x5bc>)
        changeUART1baud(baudrate);
 8003fc0:	69e8      	ldr	r0, [r5, #28]
	REGADRERR = -1;
 8003fc2:	001a      	movs	r2, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	425b      	negs	r3, r3
 8003fca:	6013      	str	r3, [r2, #0]
        changeUART1baud(baudrate);
 8003fcc:	f7fd fb10 	bl	80015f0 <changeUART1baud>
        INF_PRINTLN("STM32 Wake");
 8003fd0:	4648      	mov	r0, r9
 8003fd2:	f010 fe97 	bl	8014d04 <__wrap_printf>
 8003fd6:	4876      	ldr	r0, [pc, #472]	; (80041b0 <RegInt_parsecmd.part.9+0x5c0>)
 8003fd8:	f010 fe94 	bl	8014d04 <__wrap_printf>
 8003fdc:	223c      	movs	r2, #60	; 0x3c
 8003fde:	4641      	mov	r1, r8
 8003fe0:	32ff      	adds	r2, #255	; 0xff
 8003fe2:	0030      	movs	r0, r6
 8003fe4:	f010 fe8e 	bl	8014d04 <__wrap_printf>
 8003fe8:	e72c      	b.n	8003e44 <RegInt_parsecmd.part.9+0x254>
	if (val == 0x04){Reg_regand(0x06,0x000000FF);}//clear error bits
 8003fea:	2d04      	cmp	r5, #4
 8003fec:	d10b      	bne.n	8004006 <RegInt_parsecmd.part.9+0x416>
	REGADRERR = -1;
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4b6e      	ldr	r3, [pc, #440]	; (80041ac <RegInt_parsecmd.part.9+0x5bc>)
 8003ff2:	4252      	negs	r2, r2
 8003ff4:	601a      	str	r2, [r3, #0]
	flags &= andbits;
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <RegInt_parsecmd.part.9+0x5b8>)
	RegInt_setregf(reg, flags, 1);
 8003ff8:	3202      	adds	r2, #2
	flags &= andbits;
 8003ffa:	7e19      	ldrb	r1, [r3, #24]
	RegInt_setregf(reg, flags, 1);
 8003ffc:	2006      	movs	r0, #6
 8003ffe:	f7ff fb89 	bl	8003714 <RegInt_setregf>
 8004002:	4e6c      	ldr	r6, [pc, #432]	; (80041b4 <RegInt_parsecmd.part.9+0x5c4>)
 8004004:	e637      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
	if (val == 0x05){measure();}
 8004006:	2d05      	cmp	r5, #5
 8004008:	d000      	beq.n	800400c <RegInt_parsecmd.part.9+0x41c>
 800400a:	e0e1      	b.n	80041d0 <RegInt_parsecmd.part.9+0x5e0>
	REGADRERR = -1;
 800400c:	2601      	movs	r6, #1
	return *regptr;
 800400e:	4b66      	ldr	r3, [pc, #408]	; (80041a8 <RegInt_parsecmd.part.9+0x5b8>)
	REGADRERR = -1;
 8004010:	4d66      	ldr	r5, [pc, #408]	; (80041ac <RegInt_parsecmd.part.9+0x5bc>)
	return *regptr;
 8004012:	689b      	ldr	r3, [r3, #8]
	REGADRERR = -1;
 8004014:	4276      	negs	r6, r6
 8004016:	602e      	str	r6, [r5, #0]
    if(service_type == 0x02){envelopeMeasure();}
 8004018:	2b02      	cmp	r3, #2
 800401a:	d100      	bne.n	800401e <RegInt_parsecmd.part.9+0x42e>
 800401c:	e36d      	b.n	80046fa <RegInt_parsecmd.part.9+0xb0a>
 800401e:	4e65      	ldr	r6, [pc, #404]	; (80041b4 <RegInt_parsecmd.part.9+0x5c4>)
    else if(service_type == 0x04){sparseMeasure();}
 8004020:	2b04      	cmp	r3, #4
 8004022:	d000      	beq.n	8004026 <RegInt_parsecmd.part.9+0x436>
 8004024:	e627      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
	INF_PRINTLN("Start Sparse measurement");
 8004026:	4859      	ldr	r0, [pc, #356]	; (800418c <RegInt_parsecmd.part.9+0x59c>)
 8004028:	f010 fe6c 	bl	8014d04 <__wrap_printf>
 800402c:	4862      	ldr	r0, [pc, #392]	; (80041b8 <RegInt_parsecmd.part.9+0x5c8>)
 800402e:	f010 fe69 	bl	8014d04 <__wrap_printf>
 8004032:	4b58      	ldr	r3, [pc, #352]	; (8004194 <RegInt_parsecmd.part.9+0x5a4>)
 8004034:	22b4      	movs	r2, #180	; 0xb4
 8004036:	469b      	mov	fp, r3
 8004038:	4b57      	ldr	r3, [pc, #348]	; (8004198 <RegInt_parsecmd.part.9+0x5a8>)
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	0018      	movs	r0, r3
 800403e:	4659      	mov	r1, fp
 8004040:	4698      	mov	r8, r3
 8004042:	f010 fe5f 	bl	8014d04 <__wrap_printf>
 8004046:	0032      	movs	r2, r6
 8004048:	0031      	movs	r1, r6
 800404a:	3264      	adds	r2, #100	; 0x64
 800404c:	3168      	adds	r1, #104	; 0x68
 800404e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004050:	f00d fad0 	bl	80115f4 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <RegInt_parsecmd.part.9+0x5cc>)
 8004056:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	3340      	adds	r3, #64	; 0x40
 800405c:	8918      	ldrh	r0, [r3, #8]
 800405e:	0029      	movs	r1, r5
 8004060:	f00a fd68 	bl	800eb34 <__udivsi3>
 8004064:	b280      	uxth	r0, r0
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 8004066:	2d00      	cmp	r5, #0
 8004068:	d100      	bne.n	800406c <RegInt_parsecmd.part.9+0x47c>
 800406a:	e3d5      	b.n	8004818 <RegInt_parsecmd.part.9+0xc28>
			memcpy(data[sweep],sparse_data+(sweep*bins_near), bins_near*sizeof(uint16_t));
 800406c:	0043      	lsls	r3, r0, #1
 800406e:	633b      	str	r3, [r7, #48]	; 0x30
 8004070:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <RegInt_parsecmd.part.9+0x5d0>)
 8004072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004074:	4699      	mov	r9, r3
 8004076:	1e6b      	subs	r3, r5, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	1d15      	adds	r5, r2, #4
 800407e:	195b      	adds	r3, r3, r5
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	2300      	movs	r3, #0
 8004084:	469a      	mov	sl, r3
 8004086:	e000      	b.n	800408a <RegInt_parsecmd.part.9+0x49a>
 8004088:	3504      	adds	r5, #4
 800408a:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 800408c:	6810      	ldr	r0, [r2, #0]
 800408e:	4453      	add	r3, sl
 8004090:	0019      	movs	r1, r3
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	f011 fa06 	bl	80154a4 <memcpy>
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	002a      	movs	r2, r5
 800409c:	469c      	mov	ip, r3
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	44e2      	add	sl, ip
 80040a2:	429d      	cmp	r5, r3
 80040a4:	d1f0      	bne.n	8004088 <RegInt_parsecmd.part.9+0x498>
	DBG_PRINTLN("Sparse measurement complete");
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <RegInt_parsecmd.part.9+0x5d4>)
 80040a8:	0018      	movs	r0, r3
 80040aa:	469a      	mov	sl, r3
 80040ac:	f010 fe2a 	bl	8014d04 <__wrap_printf>
 80040b0:	4845      	ldr	r0, [pc, #276]	; (80041c8 <RegInt_parsecmd.part.9+0x5d8>)
 80040b2:	f010 fe27 	bl	8014d04 <__wrap_printf>
 80040b6:	22b5      	movs	r2, #181	; 0xb5
 80040b8:	4659      	mov	r1, fp
 80040ba:	0092      	lsls	r2, r2, #2
 80040bc:	4640      	mov	r0, r8
 80040be:	f010 fe21 	bl	8014d04 <__wrap_printf>
	if(far_active){
 80040c2:	464b      	mov	r3, r9
 80040c4:	7c1b      	ldrb	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d100      	bne.n	80040cc <RegInt_parsecmd.part.9+0x4dc>
 80040ca:	e5d4      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
		if(!acc_service_deactivate(sparse_handle)){
 80040cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040ce:	f7fe fca5 	bl	8002a1c <acc_service_deactivate>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d100      	bne.n	80040d8 <RegInt_parsecmd.part.9+0x4e8>
 80040d6:	e392      	b.n	80047fe <RegInt_parsecmd.part.9+0xc0e>
		if (!acc_service_activate(sparse_handle_far)){
 80040d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040da:	f7ff f9c9 	bl	8003470 <acc_service_activate>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d100      	bne.n	80040e4 <RegInt_parsecmd.part.9+0x4f4>
 80040e2:	e372      	b.n	80047ca <RegInt_parsecmd.part.9+0xbda>
 80040e4:	0032      	movs	r2, r6
 80040e6:	0031      	movs	r1, r6
 80040e8:	326c      	adds	r2, #108	; 0x6c
 80040ea:	3170      	adds	r1, #112	; 0x70
 80040ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80040ee:	f00d fa81 	bl	80115f4 <acc_service_sparse_get_next_by_reference.part.9>
	uint16_t bins_near = sparse_metadata.data_length/sweeps;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80040f6:	3340      	adds	r3, #64	; 0x40
 80040f8:	627a      	str	r2, [r7, #36]	; 0x24
 80040fa:	8918      	ldrh	r0, [r3, #8]
 80040fc:	0011      	movs	r1, r2
 80040fe:	0015      	movs	r5, r2
 8004100:	f00a fd18 	bl	800eb34 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8004104:	b280      	uxth	r0, r0
 8004106:	0043      	lsls	r3, r0, #1
 8004108:	623b      	str	r3, [r7, #32]
		bins_far = sparse_metadata_far.data_length/sweeps;
 800410a:	464b      	mov	r3, r9
 800410c:	0029      	movs	r1, r5
 800410e:	8b98      	ldrh	r0, [r3, #28]
 8004110:	f00a fd10 	bl	800eb34 <__udivsi3>
			memcpy(data[sweep]+bins_near,sparse_data_far+(sweep*bins_far), bins_far*sizeof(uint16_t));
 8004114:	2500      	movs	r5, #0
 8004116:	b280      	uxth	r0, r0
 8004118:	0043      	lsls	r3, r0, #1
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411c:	425b      	negs	r3, r3
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	633d      	str	r5, [r7, #48]	; 0x30
 8004122:	e013      	b.n	800414c <RegInt_parsecmd.part.9+0x55c>
 8004124:	464a      	mov	r2, r9
 8004126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	5898      	ldr	r0, [r3, r2]
 800412e:	6a3a      	ldr	r2, [r7, #32]
 8004130:	4694      	mov	ip, r2
 8004132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004134:	4460      	add	r0, ip
 8004136:	18ab      	adds	r3, r5, r2
 8004138:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800413a:	0019      	movs	r1, r3
 800413c:	4694      	mov	ip, r2
 800413e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004140:	4461      	add	r1, ip
 8004142:	f011 f9af 	bl	80154a4 <memcpy>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	3301      	adds	r3, #1
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		for(uint16_t sweep = 0; sweep < sweeps; sweep++){
 800414e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004150:	469c      	mov	ip, r3
 8004152:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004154:	4465      	add	r5, ip
 8004156:	4293      	cmp	r3, r2
 8004158:	d3e4      	bcc.n	8004124 <RegInt_parsecmd.part.9+0x534>
		if(!acc_service_deactivate(sparse_handle_far)){
 800415a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800415c:	f7fe fc5e 	bl	8002a1c <acc_service_deactivate>
 8004160:	2800      	cmp	r0, #0
 8004162:	d100      	bne.n	8004166 <RegInt_parsecmd.part.9+0x576>
 8004164:	e368      	b.n	8004838 <RegInt_parsecmd.part.9+0xc48>
		if (!acc_service_activate(sparse_handle)){
 8004166:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004168:	f7ff f982 	bl	8003470 <acc_service_activate>
 800416c:	2800      	cmp	r0, #0
 800416e:	d100      	bne.n	8004172 <RegInt_parsecmd.part.9+0x582>
 8004170:	e355      	b.n	800481e <RegInt_parsecmd.part.9+0xc2e>
		DBG_PRINTLN("Sparse Far measurement end");
 8004172:	4650      	mov	r0, sl
 8004174:	f010 fdc6 	bl	8014d04 <__wrap_printf>
 8004178:	4814      	ldr	r0, [pc, #80]	; (80041cc <RegInt_parsecmd.part.9+0x5dc>)
 800417a:	f010 fdc3 	bl	8014d04 <__wrap_printf>
 800417e:	22bb      	movs	r2, #187	; 0xbb
 8004180:	4659      	mov	r1, fp
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	4640      	mov	r0, r8
 8004186:	f010 fdbd 	bl	8014d04 <__wrap_printf>
 800418a:	e574      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
 800418c:	0801bc94 	.word	0x0801bc94
 8004190:	0801c458 	.word	0x0801c458
 8004194:	0801bcb8 	.word	0x0801bcb8
 8004198:	0801bccc 	.word	0x0801bccc
 800419c:	e000e010 	.word	0xe000e010
 80041a0:	e000ed00 	.word	0xe000ed00
 80041a4:	40007000 	.word	0x40007000
 80041a8:	200003b4 	.word	0x200003b4
 80041ac:	200003b0 	.word	0x200003b0
 80041b0:	0801c464 	.word	0x0801c464
 80041b4:	2000020c 	.word	0x2000020c
 80041b8:	0801c250 	.word	0x0801c250
 80041bc:	2000010c 	.word	0x2000010c
 80041c0:	2000008c 	.word	0x2000008c
 80041c4:	0801bd4c 	.word	0x0801bd4c
 80041c8:	0801c26c 	.word	0x0801c26c
 80041cc:	0801c340 	.word	0x0801c340
	if (val == 0x06){evalData();}
 80041d0:	2d06      	cmp	r5, #6
 80041d2:	d000      	beq.n	80041d6 <RegInt_parsecmd.part.9+0x5e6>
 80041d4:	e54e      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
	REGADRERR = -1;
 80041d6:	4bba      	ldr	r3, [pc, #744]	; (80044c0 <RegInt_parsecmd.part.9+0x8d0>)
 80041d8:	001a      	movs	r2, r3
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041dc:	2301      	movs	r3, #1
 80041de:	425b      	negs	r3, r3
 80041e0:	6013      	str	r3, [r2, #0]
	return *regptr;
 80041e2:	4bb8      	ldr	r3, [pc, #736]	; (80044c4 <RegInt_parsecmd.part.9+0x8d4>)
 80041e4:	689b      	ldr	r3, [r3, #8]
}


void evalData(void){
	uint32_t service_type = RegInt_getreg(0x02);
    if(service_type == 0x02){evalEnvelopeData();}
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d100      	bne.n	80041ec <RegInt_parsecmd.part.9+0x5fc>
 80041ea:	e1a3      	b.n	8004534 <RegInt_parsecmd.part.9+0x944>
    else if(service_type == 0x04){evalSparseData();}
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d000      	beq.n	80041f2 <RegInt_parsecmd.part.9+0x602>
 80041f0:	e540      	b.n	8003c74 <RegInt_parsecmd.part.9+0x84>
    // #warning implentation removed for debuging
    // return;
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
	float sweep_rate = sparse_metadata.sweep_rate;
	uint8v2_t data_size = {sweeps,bins};
 80041f2:	2144      	movs	r1, #68	; 0x44
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 80041f4:	4ab4      	ldr	r2, [pc, #720]	; (80044c8 <RegInt_parsecmd.part.9+0x8d8>)
	uint8v2_t data_size = {sweeps,bins};
 80041f6:	1879      	adds	r1, r7, r1
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 80041f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80041fa:	627a      	str	r2, [r7, #36]	; 0x24
 80041fc:	61bb      	str	r3, [r7, #24]
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 80041fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004200:	617b      	str	r3, [r7, #20]
	float sweep_rate = sparse_metadata.sweep_rate;
 8004202:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004204:	613b      	str	r3, [r7, #16]
	uint8v2_t data_size = {sweeps,bins};
 8004206:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 8004208:	700b      	strb	r3, [r1, #0]
 800420a:	2354      	movs	r3, #84	; 0x54
 800420c:	5ad3      	ldrh	r3, [r2, r3]
 800420e:	2245      	movs	r2, #69	; 0x45
 8004210:	18ba      	adds	r2, r7, r2
 8004212:	7013      	strb	r3, [r2, #0]
	return *regptr;
 8004214:	4bad      	ldr	r3, [pc, #692]	; (80044cc <RegInt_parsecmd.part.9+0x8dc>)
 8004216:	4699      	mov	r9, r3
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	464b      	mov	r3, r9
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	464b      	mov	r3, r9
 8004224:	699e      	ldr	r6, [r3, #24]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	62be      	str	r6, [r7, #40]	; 0x28
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	464b      	mov	r3, r9
 800422e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
	float velocity;
	float distance;
	float amplitude;
	float meansqdist;

	DBG_PRINTINT(mode);
 8004230:	4ba7      	ldr	r3, [pc, #668]	; (80044d0 <RegInt_parsecmd.part.9+0x8e0>)
 8004232:	0018      	movs	r0, r3
 8004234:	469a      	mov	sl, r3
 8004236:	f010 fd65 	bl	8014d04 <__wrap_printf>
 800423a:	48a6      	ldr	r0, [pc, #664]	; (80044d4 <RegInt_parsecmd.part.9+0x8e4>)
 800423c:	0032      	movs	r2, r6
 800423e:	49a6      	ldr	r1, [pc, #664]	; (80044d8 <RegInt_parsecmd.part.9+0x8e8>)
 8004240:	6338      	str	r0, [r7, #48]	; 0x30
 8004242:	f010 fd5f 	bl	8014d04 <__wrap_printf>
 8004246:	4ba5      	ldr	r3, [pc, #660]	; (80044dc <RegInt_parsecmd.part.9+0x8ec>)
 8004248:	4aa5      	ldr	r2, [pc, #660]	; (80044e0 <RegInt_parsecmd.part.9+0x8f0>)
 800424a:	469b      	mov	fp, r3
 800424c:	4ba5      	ldr	r3, [pc, #660]	; (80044e4 <RegInt_parsecmd.part.9+0x8f4>)
 800424e:	4659      	mov	r1, fp
 8004250:	0018      	movs	r0, r3
 8004252:	4698      	mov	r8, r3
 8004254:	f010 fd56 	bl	8014d04 <__wrap_printf>

	//dc removal
	if(mode & 0x00000001){dcdatarm(data, data_size);}
 8004258:	07f3      	lsls	r3, r6, #31
 800425a:	d504      	bpl.n	8004266 <RegInt_parsecmd.part.9+0x676>
 800425c:	4ba2      	ldr	r3, [pc, #648]	; (80044e8 <RegInt_parsecmd.part.9+0x8f8>)
 800425e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004260:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004262:	f00d f998 	bl	8011596 <dcdatarm>
	
	//do fft on each row of data
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	079b      	lsls	r3, r3, #30
 800426a:	d500      	bpl.n	800426e <RegInt_parsecmd.part.9+0x67e>
 800426c:	e2a4      	b.n	80047b8 <RegInt_parsecmd.part.9+0xbc8>
	float min_scale = 1.0f;
 800426e:	23fe      	movs	r3, #254	; 0xfe
 8004270:	059b      	lsls	r3, r3, #22
 8004272:	61fb      	str	r3, [r7, #28]
	
	//bandstop filter
	if(mode & 0x00000020){dobandstop(data, data_size, band_filt);}
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	d505      	bpl.n	8004286 <RegInt_parsecmd.part.9+0x696>
 800427a:	4b9b      	ldr	r3, [pc, #620]	; (80044e8 <RegInt_parsecmd.part.9+0x8f8>)
 800427c:	002a      	movs	r2, r5
 800427e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004280:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004282:	f00d f958 	bl	8011536 <dobandstop>
	
	//do convolution
	if(mode & 0x00000004){
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	075b      	lsls	r3, r3, #29
 800428a:	d510      	bpl.n	80042ae <RegInt_parsecmd.part.9+0x6be>
	REGADRERR = -1;
 800428c:	2301      	movs	r3, #1
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	425b      	negs	r3, r3
 8004292:	6013      	str	r3, [r2, #0]
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 8004294:	464b      	mov	r3, r9
 8004296:	6958      	ldr	r0, [r3, #20]
 8004298:	f00b f898 	bl	800f3cc <__aeabi_ui2f>
 800429c:	4993      	ldr	r1, [pc, #588]	; (80044ec <RegInt_parsecmd.part.9+0x8fc>)
 800429e:	f00a f805 	bl	800e2ac <__aeabi_fdiv>
		doconv(data, data_size, st_dev);
 80042a2:	4b91      	ldr	r3, [pc, #580]	; (80044e8 <RegInt_parsecmd.part.9+0x8f8>)
		float st_dev = RegInt_getreg(0xD5)/1000.0f;
 80042a4:	1c02      	adds	r2, r0, #0
		doconv(data, data_size, st_dev);
 80042a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80042aa:	f00d f9b7 	bl	801161c <doconv>
	}
	//calulate velocity parameters
	if(mode & 0x00000008){
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	4e8f      	ldr	r6, [pc, #572]	; (80044f0 <RegInt_parsecmd.part.9+0x900>)
 80042b2:	071b      	lsls	r3, r3, #28
 80042b4:	d400      	bmi.n	80042b8 <RegInt_parsecmd.part.9+0x6c8>
 80042b6:	e4de      	b.n	8003c76 <RegInt_parsecmd.part.9+0x86>
			//get maximum index and maximum
		uint8v2_t max_index = max2d(data, data_size);
 80042b8:	4e8b      	ldr	r6, [pc, #556]	; (80044e8 <RegInt_parsecmd.part.9+0x8f8>)
 80042ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042bc:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 80042be:	0028      	movs	r0, r5
 80042c0:	f00d f903 	bl	80114ca <max2d>
 80042c4:	224c      	movs	r2, #76	; 0x4c
 80042c6:	18ba      	adds	r2, r7, r2
 80042c8:	0403      	lsls	r3, r0, #16
 80042ca:	8010      	strh	r0, [r2, #0]
 80042cc:	b2c2      	uxtb	r2, r0
 80042ce:	0e19      	lsrs	r1, r3, #24
		uint16_t apex = data[max_index.x1][max_index.x2];
 80042d0:	0093      	lsls	r3, r2, #2
 80042d2:	595b      	ldr	r3, [r3, r5]
 80042d4:	603a      	str	r2, [r7, #0]
 80042d6:	004a      	lsls	r2, r1, #1
 80042d8:	5ad3      	ldrh	r3, [r2, r3]
		
		DBG_PRINTINT(apex);
 80042da:	4650      	mov	r0, sl
		uint16_t apex = data[max_index.x1][max_index.x2];
 80042dc:	623b      	str	r3, [r7, #32]
 80042de:	000d      	movs	r5, r1
		DBG_PRINTINT(apex);
 80042e0:	f010 fd10 	bl	8014d04 <__wrap_printf>
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	4983      	ldr	r1, [pc, #524]	; (80044f4 <RegInt_parsecmd.part.9+0x904>)
 80042e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ea:	f010 fd0b 	bl	8014d04 <__wrap_printf>
 80042ee:	4a82      	ldr	r2, [pc, #520]	; (80044f8 <RegInt_parsecmd.part.9+0x908>)
 80042f0:	4659      	mov	r1, fp
 80042f2:	4640      	mov	r0, r8
 80042f4:	f010 fd06 	bl	8014d04 <__wrap_printf>
		DBG_PRINTINT(max_index.x1);
 80042f8:	4650      	mov	r0, sl
 80042fa:	f010 fd03 	bl	8014d04 <__wrap_printf>
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	497e      	ldr	r1, [pc, #504]	; (80044fc <RegInt_parsecmd.part.9+0x90c>)
 8004302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004304:	f010 fcfe 	bl	8014d04 <__wrap_printf>
 8004308:	22d4      	movs	r2, #212	; 0xd4
 800430a:	4659      	mov	r1, fp
 800430c:	0092      	lsls	r2, r2, #2
 800430e:	4640      	mov	r0, r8
 8004310:	f010 fcf8 	bl	8014d04 <__wrap_printf>
		DBG_PRINTINT(max_index.x2);
 8004314:	4650      	mov	r0, sl
 8004316:	f010 fcf5 	bl	8014d04 <__wrap_printf>
 800431a:	002a      	movs	r2, r5
 800431c:	4978      	ldr	r1, [pc, #480]	; (8004500 <RegInt_parsecmd.part.9+0x910>)
 800431e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004320:	f010 fcf0 	bl	8014d04 <__wrap_printf>
 8004324:	4a77      	ldr	r2, [pc, #476]	; (8004504 <RegInt_parsecmd.part.9+0x914>)
 8004326:	4659      	mov	r1, fp
 8004328:	4640      	mov	r0, r8
 800432a:	f010 fceb 	bl	8014d04 <__wrap_printf>
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f00b f84c 	bl	800f3cc <__aeabi_ui2f>
 8004334:	496d      	ldr	r1, [pc, #436]	; (80044ec <RegInt_parsecmd.part.9+0x8fc>)
 8004336:	f009 ffb9 	bl	800e2ac <__aeabi_fdiv>
		
		//get mean square distnace from maximum
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800433a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
	float thrstd = RegInt_getreg(0xD4)/1000.0f;
 800433c:	1c03      	adds	r3, r0, #0
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800433e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004340:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004342:	0028      	movs	r0, r5
 8004344:	f00d f850 	bl	80113e8 <get_msd>
				
		//null data less than threshold
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
		meansqdist = get_msd(data, data_size, max_index, thrstd);
 800434a:	4682      	mov	sl, r0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 800434c:	06db      	lsls	r3, r3, #27
 800434e:	d500      	bpl.n	8004352 <RegInt_parsecmd.part.9+0x762>
 8004350:	e248      	b.n	80047e4 <RegInt_parsecmd.part.9+0xbf4>
		
		//the center of mass of the image need to be computed
		floatv2_t com = center_of_mass(max_index, roi_radius);
 8004352:	2038      	movs	r0, #56	; 0x38
 8004354:	231c      	movs	r3, #28
 8004356:	1838      	adds	r0, r7, r0
 8004358:	793a      	ldrb	r2, [r7, #4]
 800435a:	18c0      	adds	r0, r0, r3
 800435c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800435e:	f00c ff87 	bl	8011270 <center_of_mass>
	uint16_t dist_res = (uint16_t)(sparse_metadata.step_length_m*1000.0f);
 8004362:	4962      	ldr	r1, [pc, #392]	; (80044ec <RegInt_parsecmd.part.9+0x8fc>)
 8004364:	69b8      	ldr	r0, [r7, #24]
 8004366:	f00a f8b3 	bl	800e4d0 <__aeabi_fmul>
 800436a:	f00a fdf1 	bl	800ef50 <__aeabi_f2uiz>
		
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800436e:	b280      	uxth	r0, r0
 8004370:	f00a ffe2 	bl	800f338 <__aeabi_i2f>
 8004374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004376:	f00a f8ab 	bl	800e4d0 <__aeabi_fmul>
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800437a:	495c      	ldr	r1, [pc, #368]	; (80044ec <RegInt_parsecmd.part.9+0x8fc>)
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 800437c:	1c05      	adds	r5, r0, #0
	uint16_t dist_start = (uint16_t)(sparse_metadata.start_m*1000.0f);
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f00a f8a6 	bl	800e4d0 <__aeabi_fmul>
 8004384:	f00a fde4 	bl	800ef50 <__aeabi_f2uiz>
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8004388:	b280      	uxth	r0, r0
 800438a:	f00a ffd5 	bl	800f338 <__aeabi_i2f>
 800438e:	1c01      	adds	r1, r0, #0
 8004390:	1c28      	adds	r0, r5, #0
 8004392:	f009 fdf1 	bl	800df78 <__aeabi_fadd>
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		distance = dist_res*com.x2 + dist_start;	//converts data to distance (mm)
 8004398:	1c06      	adds	r6, r0, #0
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 800439a:	8f98      	ldrh	r0, [r3, #60]	; 0x3c
 800439c:	f00a ffcc 	bl	800f338 <__aeabi_i2f>
 80043a0:	1c01      	adds	r1, r0, #0
 80043a2:	6938      	ldr	r0, [r7, #16]
 80043a4:	f009 ff82 	bl	800e2ac <__aeabi_fdiv>
 80043a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043aa:	f00a f891 	bl	800e4d0 <__aeabi_fmul>
 80043ae:	4956      	ldr	r1, [pc, #344]	; (8004508 <RegInt_parsecmd.part.9+0x918>)
 80043b0:	f00a f88e 	bl	800e4d0 <__aeabi_fmul>
		
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80043b4:	69fd      	ldr	r5, [r7, #28]
		velocity = com.x1 * (float)(sweep_rate/sweeps) * 2.445f; //converts data to velocity (mm/s)
 80043b6:	6338      	str	r0, [r7, #48]	; 0x30
		if(min_scale != 0.0f){amplitude = apex/min_scale;}
 80043b8:	2100      	movs	r1, #0
 80043ba:	1c28      	adds	r0, r5, #0
 80043bc:	f00a fd7a 	bl	800eeb4 <__aeabi_fcmpeq>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d000      	beq.n	80043c6 <RegInt_parsecmd.part.9+0x7d6>
 80043c4:	e1ff      	b.n	80047c6 <RegInt_parsecmd.part.9+0xbd6>
 80043c6:	6a38      	ldr	r0, [r7, #32]
 80043c8:	f00a ffb6 	bl	800f338 <__aeabi_i2f>
 80043cc:	1c29      	adds	r1, r5, #0
 80043ce:	f009 ff6d 	bl	800e2ac <__aeabi_fdiv>
 80043d2:	1c05      	adds	r5, r0, #0
		else{amplitude = 0;}
		
		//store results
		RegInt_setregf(0xD0,(uint32_t)velocity, 1);
 80043d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d6:	f00a fdbb 	bl	800ef50 <__aeabi_f2uiz>
	REGADRERR = -1;
 80043da:	2301      	movs	r3, #1
 80043dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043de:	425b      	negs	r3, r3
 80043e0:	6013      	str	r3, [r2, #0]
	if (!(*regptr == (uint32_t)-1)){
 80043e2:	464b      	mov	r3, r9
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3301      	adds	r3, #1
 80043e8:	d001      	beq.n	80043ee <RegInt_parsecmd.part.9+0x7fe>
		*regptr = val;
 80043ea:	464b      	mov	r3, r9
 80043ec:	6018      	str	r0, [r3, #0]
		RegInt_setregf(0xD1,(uint32_t)distance, 1);
 80043ee:	1c30      	adds	r0, r6, #0
 80043f0:	f00a fdae 	bl	800ef50 <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 80043f4:	464b      	mov	r3, r9
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	3301      	adds	r3, #1
 80043fa:	d001      	beq.n	8004400 <RegInt_parsecmd.part.9+0x810>
		*regptr = val;
 80043fc:	464b      	mov	r3, r9
 80043fe:	6058      	str	r0, [r3, #4]
		RegInt_setregf(0xD2,(uint32_t)amplitude, 1);
 8004400:	1c28      	adds	r0, r5, #0
 8004402:	f00a fda5 	bl	800ef50 <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 8004406:	464b      	mov	r3, r9
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	3301      	adds	r3, #1
 800440c:	d001      	beq.n	8004412 <RegInt_parsecmd.part.9+0x822>
		*regptr = val;
 800440e:	464b      	mov	r3, r9
 8004410:	6098      	str	r0, [r3, #8]
		RegInt_setregf(0xD3,(uint32_t)meansqdist, 1);
 8004412:	4650      	mov	r0, sl
 8004414:	f00a fd9c 	bl	800ef50 <__aeabi_f2uiz>
	if (!(*regptr == (uint32_t)-1)){
 8004418:	464b      	mov	r3, r9
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	d001      	beq.n	8004424 <RegInt_parsecmd.part.9+0x834>
		*regptr = val;
 8004420:	464b      	mov	r3, r9
 8004422:	60d8      	str	r0, [r3, #12]
}



void print_sparse_results(void){
		INF_PRINTLN("RESULTS");
 8004424:	4d39      	ldr	r5, [pc, #228]	; (800450c <RegInt_parsecmd.part.9+0x91c>)
	REGADRERR = -1;
 8004426:	2601      	movs	r6, #1
		INF_PRINTLN("RESULTS");
 8004428:	0028      	movs	r0, r5
 800442a:	f010 fc6b 	bl	8014d04 <__wrap_printf>
 800442e:	4838      	ldr	r0, [pc, #224]	; (8004510 <RegInt_parsecmd.part.9+0x920>)
 8004430:	f010 fc68 	bl	8014d04 <__wrap_printf>
 8004434:	4a37      	ldr	r2, [pc, #220]	; (8004514 <RegInt_parsecmd.part.9+0x924>)
 8004436:	4659      	mov	r1, fp
 8004438:	4640      	mov	r0, r8
 800443a:	f010 fc63 	bl	8014d04 <__wrap_printf>
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 800443e:	0028      	movs	r0, r5
 8004440:	f010 fc60 	bl	8014d04 <__wrap_printf>
 8004444:	464a      	mov	r2, r9
	REGADRERR = -1;
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	4276      	negs	r6, r6
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 800444a:	6811      	ldr	r1, [r2, #0]
 800444c:	4832      	ldr	r0, [pc, #200]	; (8004518 <RegInt_parsecmd.part.9+0x928>)
	REGADRERR = -1;
 800444e:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Velocity: %ld mm\\s", RegInt_getreg(0xD0));
 8004450:	f010 fc58 	bl	8014d04 <__wrap_printf>
 8004454:	22e4      	movs	r2, #228	; 0xe4
 8004456:	4659      	mov	r1, fp
 8004458:	0092      	lsls	r2, r2, #2
 800445a:	4640      	mov	r0, r8
 800445c:	f010 fc52 	bl	8014d04 <__wrap_printf>
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8004460:	0028      	movs	r0, r5
 8004462:	f010 fc4f 	bl	8014d04 <__wrap_printf>
 8004466:	464a      	mov	r2, r9
	REGADRERR = -1;
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 800446a:	6851      	ldr	r1, [r2, #4]
 800446c:	482b      	ldr	r0, [pc, #172]	; (800451c <RegInt_parsecmd.part.9+0x92c>)
	REGADRERR = -1;
 800446e:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Distance: %ld mm", RegInt_getreg(0xD1));
 8004470:	f010 fc48 	bl	8014d04 <__wrap_printf>
 8004474:	4a2a      	ldr	r2, [pc, #168]	; (8004520 <RegInt_parsecmd.part.9+0x930>)
 8004476:	4659      	mov	r1, fp
 8004478:	4640      	mov	r0, r8
 800447a:	f010 fc43 	bl	8014d04 <__wrap_printf>
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 800447e:	0028      	movs	r0, r5
 8004480:	f010 fc40 	bl	8014d04 <__wrap_printf>
 8004484:	464a      	mov	r2, r9
	REGADRERR = -1;
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 8004488:	6891      	ldr	r1, [r2, #8]
 800448a:	4826      	ldr	r0, [pc, #152]	; (8004524 <RegInt_parsecmd.part.9+0x934>)
	REGADRERR = -1;
 800448c:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Amplitude: %ld arb", RegInt_getreg(0xD2));
 800448e:	f010 fc39 	bl	8014d04 <__wrap_printf>
 8004492:	4a25      	ldr	r2, [pc, #148]	; (8004528 <RegInt_parsecmd.part.9+0x938>)
 8004494:	4659      	mov	r1, fp
 8004496:	4640      	mov	r0, r8
 8004498:	f010 fc34 	bl	8014d04 <__wrap_printf>
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 800449c:	0028      	movs	r0, r5
 800449e:	f010 fc31 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80044a4:	4821      	ldr	r0, [pc, #132]	; (800452c <RegInt_parsecmd.part.9+0x93c>)
	REGADRERR = -1;
 80044a6:	601e      	str	r6, [r3, #0]
		INF_PRINTLN("Mean Square Distance: %ld arb", RegInt_getreg(0xD3));
 80044a8:	464b      	mov	r3, r9
 80044aa:	68d9      	ldr	r1, [r3, #12]
 80044ac:	f010 fc2a 	bl	8014d04 <__wrap_printf>
 80044b0:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <RegInt_parsecmd.part.9+0x940>)
 80044b2:	4659      	mov	r1, fp
 80044b4:	4640      	mov	r0, r8
 80044b6:	f010 fc25 	bl	8014d04 <__wrap_printf>
 80044ba:	4e0d      	ldr	r6, [pc, #52]	; (80044f0 <RegInt_parsecmd.part.9+0x900>)
 80044bc:	f7ff fbdb 	bl	8003c76 <RegInt_parsecmd.part.9+0x86>
 80044c0:	200003b0 	.word	0x200003b0
 80044c4:	200003b4 	.word	0x200003b4
 80044c8:	2000010c 	.word	0x2000010c
 80044cc:	200004c0 	.word	0x200004c0
 80044d0:	0801bd4c 	.word	0x0801bd4c
 80044d4:	0801c11c 	.word	0x0801c11c
 80044d8:	0801c3cc 	.word	0x0801c3cc
 80044dc:	0801bcb8 	.word	0x0801bcb8
 80044e0:	00000339 	.word	0x00000339
 80044e4:	0801bccc 	.word	0x0801bccc
 80044e8:	2000008c 	.word	0x2000008c
 80044ec:	447a0000 	.word	0x447a0000
 80044f0:	2000020c 	.word	0x2000020c
 80044f4:	0801c3d4 	.word	0x0801c3d4
 80044f8:	0000034f 	.word	0x0000034f
 80044fc:	0801c3dc 	.word	0x0801c3dc
 8004500:	0801c3ec 	.word	0x0801c3ec
 8004504:	00000351 	.word	0x00000351
 8004508:	401c7ae1 	.word	0x401c7ae1
 800450c:	0801bc94 	.word	0x0801bc94
 8004510:	0801c364 	.word	0x0801c364
 8004514:	0000038f 	.word	0x0000038f
 8004518:	0801c3fc 	.word	0x0801c3fc
 800451c:	0801c410 	.word	0x0801c410
 8004520:	00000391 	.word	0x00000391
 8004524:	0801c424 	.word	0x0801c424
 8004528:	00000392 	.word	0x00000392
 800452c:	0801c438 	.word	0x0801c438
 8004530:	00000393 	.word	0x00000393
void evalEnvelopeData(void){
 8004534:	466b      	mov	r3, sp
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 8004536:	49c6      	ldr	r1, [pc, #792]	; (8004850 <RegInt_parsecmd.part.9+0xc60>)
 8004538:	6ba0      	ldr	r0, [r4, #56]	; 0x38
void evalEnvelopeData(void){
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 800453c:	f009 ffc8 	bl	800e4d0 <__aeabi_fmul>
 8004540:	f00a fd06 	bl	800ef50 <__aeabi_f2uiz>
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 8004544:	49c3      	ldr	r1, [pc, #780]	; (8004854 <RegInt_parsecmd.part.9+0xc64>)
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 8004546:	b283      	uxth	r3, r0
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 8004548:	6c60      	ldr	r0, [r4, #68]	; 0x44
	uint16_t dist_start = (uint16_t)(envelope_metadata.start_m*1000.0f);
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dist_res = (uint16_t)(envelope_metadata.step_length_m*1.0e6f);
 800454c:	f009 ffc0 	bl	800e4d0 <__aeabi_fmul>
 8004550:	f00a fcfe 	bl	800ef50 <__aeabi_f2uiz>
	uint16_t min_sep = (uint16_t)((1000*(uint32_t)RegInt_getreg(0xD4))/dist_res);
 8004554:	b286      	uxth	r6, r0
 8004556:	20fa      	movs	r0, #250	; 0xfa
	return *regptr;
 8004558:	4bbf      	ldr	r3, [pc, #764]	; (8004858 <RegInt_parsecmd.part.9+0xc68>)
	uint16_t min_sep = (uint16_t)((1000*(uint32_t)RegInt_getreg(0xD4))/dist_res);
 800455a:	0080      	lsls	r0, r0, #2
	return *regptr;
 800455c:	4699      	mov	r9, r3
	uint16_t min_sep = (uint16_t)((1000*(uint32_t)RegInt_getreg(0xD4))/dist_res);
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	0031      	movs	r1, r6
 8004562:	4358      	muls	r0, r3
 8004564:	f00a fae6 	bl	800eb34 <__udivsi3>
 8004568:	0005      	movs	r5, r0
	DBG_PRINTINT(min_sep);
 800456a:	48bc      	ldr	r0, [pc, #752]	; (800485c <RegInt_parsecmd.part.9+0xc6c>)
 800456c:	f010 fbca 	bl	8014d04 <__wrap_printf>
 8004570:	b2aa      	uxth	r2, r5
 8004572:	49bb      	ldr	r1, [pc, #748]	; (8004860 <RegInt_parsecmd.part.9+0xc70>)
 8004574:	48bb      	ldr	r0, [pc, #748]	; (8004864 <RegInt_parsecmd.part.9+0xc74>)
 8004576:	f010 fbc5 	bl	8014d04 <__wrap_printf>
 800457a:	4bbb      	ldr	r3, [pc, #748]	; (8004868 <RegInt_parsecmd.part.9+0xc78>)
 800457c:	4abb      	ldr	r2, [pc, #748]	; (800486c <RegInt_parsecmd.part.9+0xc7c>)
 800457e:	469b      	mov	fp, r3
 8004580:	4bbb      	ldr	r3, [pc, #748]	; (8004870 <RegInt_parsecmd.part.9+0xc80>)
 8004582:	4659      	mov	r1, fp
 8004584:	0018      	movs	r0, r3
 8004586:	4698      	mov	r8, r3
 8004588:	f010 fbbc 	bl	8014d04 <__wrap_printf>
	getpeaks(data, bins, indexes, amplitudes, min_sep);
 800458c:	2354      	movs	r3, #84	; 0x54
 800458e:	4ab9      	ldr	r2, [pc, #740]	; (8004874 <RegInt_parsecmd.part.9+0xc84>)
 8004590:	2038      	movs	r0, #56	; 0x38
 8004592:	5ad1      	ldrh	r1, [r2, r3]
 8004594:	2238      	movs	r2, #56	; 0x38
 8004596:	4694      	mov	ip, r2
 8004598:	3b48      	subs	r3, #72	; 0x48
 800459a:	44bc      	add	ip, r7
 800459c:	4463      	add	r3, ip
 800459e:	4684      	mov	ip, r0
 80045a0:	b2ad      	uxth	r5, r5
 80045a2:	48b5      	ldr	r0, [pc, #724]	; (8004878 <RegInt_parsecmd.part.9+0xc88>)
 80045a4:	9500      	str	r5, [sp, #0]
 80045a6:	44bc      	add	ip, r7
 80045a8:	3a24      	subs	r2, #36	; 0x24
 80045aa:	4462      	add	r2, ip
 80045ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80045ae:	f00c fde1 	bl	8011174 <getpeaks>
 80045b2:	233c      	movs	r3, #60	; 0x3c
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	2500      	movs	r5, #0
 80045b8:	469a      	mov	sl, r3
		distances[i] = (uint16_t)(((uint32_t)indexes[i]*(uint32_t)dist_res)/1e3) + dist_start;
 80045ba:	2238      	movs	r2, #56	; 0x38
 80045bc:	4694      	mov	ip, r2
 80045be:	2314      	movs	r3, #20
 80045c0:	44bc      	add	ip, r7
 80045c2:	4463      	add	r3, ip
 80045c4:	5b58      	ldrh	r0, [r3, r5]
 80045c6:	4370      	muls	r0, r6
 80045c8:	f00c fcac 	bl	8010f24 <__aeabi_ui2d>
 80045cc:	4bab      	ldr	r3, [pc, #684]	; (800487c <RegInt_parsecmd.part.9+0xc8c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	f00b fa58 	bl	800fa84 <__aeabi_ddiv>
 80045d4:	f00a fcd4 	bl	800ef80 <__aeabi_d2uiz>
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	469c      	mov	ip, r3
 80045dc:	4653      	mov	r3, sl
 80045de:	4460      	add	r0, ip
 80045e0:	5358      	strh	r0, [r3, r5]
 80045e2:	3502      	adds	r5, #2
	for(uint8_t i = 0; i < n; i++){
 80045e4:	2d08      	cmp	r5, #8
 80045e6:	d1e8      	bne.n	80045ba <RegInt_parsecmd.part.9+0x9ca>
	pack16to32array(distamp_pack, distances, amplitudes);
 80045e8:	2238      	movs	r2, #56	; 0x38
 80045ea:	231c      	movs	r3, #28
 80045ec:	18b9      	adds	r1, r7, r2
 80045ee:	18cd      	adds	r5, r1, r3
 80045f0:	3b10      	subs	r3, #16
 80045f2:	18ca      	adds	r2, r1, r3
 80045f4:	0028      	movs	r0, r5
 80045f6:	4651      	mov	r1, sl
 80045f8:	f00c fdb0 	bl	801115c <pack16to32array>
	REGADRERR = -1;
 80045fc:	2201      	movs	r2, #1
 80045fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004600:	4252      	negs	r2, r2
 8004602:	600a      	str	r2, [r1, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004604:	464a      	mov	r2, r9
 8004606:	6812      	ldr	r2, [r2, #0]
	RegInt_setregf(0xD0,(uint32_t)distamp_pack[0], 1);
 8004608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	if (!(*regptr == (uint32_t)-1)){
 800460a:	3201      	adds	r2, #1
 800460c:	d001      	beq.n	8004612 <RegInt_parsecmd.part.9+0xa22>
		*regptr = val;
 800460e:	464a      	mov	r2, r9
 8004610:	6013      	str	r3, [r2, #0]
	if (!(*regptr == (uint32_t)-1)){
 8004612:	464b      	mov	r3, r9
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	3301      	adds	r3, #1
 8004618:	d002      	beq.n	8004620 <RegInt_parsecmd.part.9+0xa30>
		*regptr = val;
 800461a:	464b      	mov	r3, r9
 800461c:	686a      	ldr	r2, [r5, #4]
 800461e:	605a      	str	r2, [r3, #4]
	if (!(*regptr == (uint32_t)-1)){
 8004620:	464b      	mov	r3, r9
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	d002      	beq.n	800462e <RegInt_parsecmd.part.9+0xa3e>
		*regptr = val;
 8004628:	464b      	mov	r3, r9
 800462a:	68aa      	ldr	r2, [r5, #8]
 800462c:	609a      	str	r2, [r3, #8]
	if (!(*regptr == (uint32_t)-1)){
 800462e:	464b      	mov	r3, r9
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	d002      	beq.n	800463c <RegInt_parsecmd.part.9+0xa4c>
		*regptr = val;
 8004636:	464b      	mov	r3, r9
 8004638:	68ea      	ldr	r2, [r5, #12]
 800463a:	60da      	str	r2, [r3, #12]
}


void print_envelope_results(void){
	INF_PRINTLN("RESULTS");
 800463c:	4d90      	ldr	r5, [pc, #576]	; (8004880 <RegInt_parsecmd.part.9+0xc90>)
	REGADRERR = -1;
 800463e:	2601      	movs	r6, #1
	INF_PRINTLN("RESULTS");
 8004640:	0028      	movs	r0, r5
 8004642:	f010 fb5f 	bl	8014d04 <__wrap_printf>
 8004646:	488f      	ldr	r0, [pc, #572]	; (8004884 <RegInt_parsecmd.part.9+0xc94>)
 8004648:	f010 fb5c 	bl	8014d04 <__wrap_printf>
 800464c:	22e6      	movs	r2, #230	; 0xe6
 800464e:	4659      	mov	r1, fp
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	4640      	mov	r0, r8
 8004654:	f010 fb56 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 8004658:	0028      	movs	r0, r5
 800465a:	f010 fb53 	bl	8014d04 <__wrap_printf>
	return (val & (0xFFFFL << (8*byte))) >> (8*byte);
 800465e:	464a      	mov	r2, r9
 8004660:	4649      	mov	r1, r9
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	6809      	ldr	r1, [r1, #0]
	REGADRERR = -1;
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	4276      	negs	r6, r6
 800466a:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 800466c:	0c09      	lsrs	r1, r1, #16
 800466e:	4886      	ldr	r0, [pc, #536]	; (8004888 <RegInt_parsecmd.part.9+0xc98>)
	REGADRERR = -1;
 8004670:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 1: %d mm | %d arb.", get_short(RegInt_getreg(0xD0),2), get_short(RegInt_getreg(0xD0),0));
 8004672:	f010 fb47 	bl	8014d04 <__wrap_printf>
 8004676:	4a85      	ldr	r2, [pc, #532]	; (800488c <RegInt_parsecmd.part.9+0xc9c>)
 8004678:	4659      	mov	r1, fp
 800467a:	4640      	mov	r0, r8
 800467c:	f010 fb42 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004680:	0028      	movs	r0, r5
 8004682:	f010 fb3f 	bl	8014d04 <__wrap_printf>
 8004686:	464a      	mov	r2, r9
 8004688:	4649      	mov	r1, r9
 800468a:	6852      	ldr	r2, [r2, #4]
 800468c:	6849      	ldr	r1, [r1, #4]
	REGADRERR = -1;
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004692:	0c09      	lsrs	r1, r1, #16
 8004694:	487e      	ldr	r0, [pc, #504]	; (8004890 <RegInt_parsecmd.part.9+0xca0>)
	REGADRERR = -1;
 8004696:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 2: %d mm | %d arb.", get_short(RegInt_getreg(0xD1),2), get_short(RegInt_getreg(0xD1),0));
 8004698:	f010 fb34 	bl	8014d04 <__wrap_printf>
 800469c:	4a7d      	ldr	r2, [pc, #500]	; (8004894 <RegInt_parsecmd.part.9+0xca4>)
 800469e:	4659      	mov	r1, fp
 80046a0:	4640      	mov	r0, r8
 80046a2:	f010 fb2f 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 80046a6:	0028      	movs	r0, r5
 80046a8:	f010 fb2c 	bl	8014d04 <__wrap_printf>
 80046ac:	464a      	mov	r2, r9
 80046ae:	4649      	mov	r1, r9
 80046b0:	6892      	ldr	r2, [r2, #8]
 80046b2:	6889      	ldr	r1, [r1, #8]
	REGADRERR = -1;
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	b292      	uxth	r2, r2
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 80046b8:	0c09      	lsrs	r1, r1, #16
 80046ba:	4877      	ldr	r0, [pc, #476]	; (8004898 <RegInt_parsecmd.part.9+0xca8>)
	REGADRERR = -1;
 80046bc:	601e      	str	r6, [r3, #0]
	INF_PRINTLN("Peak 3: %d mm | %d arb.", get_short(RegInt_getreg(0xD2),2), get_short(RegInt_getreg(0xD2),0));
 80046be:	f010 fb21 	bl	8014d04 <__wrap_printf>
 80046c2:	4a76      	ldr	r2, [pc, #472]	; (800489c <RegInt_parsecmd.part.9+0xcac>)
 80046c4:	4659      	mov	r1, fp
 80046c6:	4640      	mov	r0, r8
 80046c8:	f010 fb1c 	bl	8014d04 <__wrap_printf>
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 80046cc:	0028      	movs	r0, r5
 80046ce:	f010 fb19 	bl	8014d04 <__wrap_printf>
	REGADRERR = -1;
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 80046d4:	4872      	ldr	r0, [pc, #456]	; (80048a0 <RegInt_parsecmd.part.9+0xcb0>)
	REGADRERR = -1;
 80046d6:	601e      	str	r6, [r3, #0]
	return *regptr;
 80046d8:	464b      	mov	r3, r9
 80046da:	68d9      	ldr	r1, [r3, #12]
 80046dc:	b28a      	uxth	r2, r1
	INF_PRINTLN("Peak 4: %d mm | %d arb.", get_short(RegInt_getreg(0xD3),2), get_short(RegInt_getreg(0xD3),0));
 80046de:	0c09      	lsrs	r1, r1, #16
 80046e0:	f010 fb10 	bl	8014d04 <__wrap_printf>
 80046e4:	22e7      	movs	r2, #231	; 0xe7
 80046e6:	4659      	mov	r1, fp
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	4640      	mov	r0, r8
 80046ec:	f010 fb0a 	bl	8014d04 <__wrap_printf>
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	4e6c      	ldr	r6, [pc, #432]	; (80048a4 <RegInt_parsecmd.part.9+0xcb4>)
 80046f4:	469d      	mov	sp, r3
 80046f6:	f7ff fabe 	bl	8003c76 <RegInt_parsecmd.part.9+0x86>
	INF_PRINTLN("Start Envelope measurement");
 80046fa:	4861      	ldr	r0, [pc, #388]	; (8004880 <RegInt_parsecmd.part.9+0xc90>)
 80046fc:	f010 fb02 	bl	8014d04 <__wrap_printf>
 8004700:	4869      	ldr	r0, [pc, #420]	; (80048a8 <RegInt_parsecmd.part.9+0xcb8>)
 8004702:	f010 faff 	bl	8014d04 <__wrap_printf>
 8004706:	4b58      	ldr	r3, [pc, #352]	; (8004868 <RegInt_parsecmd.part.9+0xc78>)
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <RegInt_parsecmd.part.9+0xcbc>)
 800470a:	469b      	mov	fp, r3
 800470c:	4b58      	ldr	r3, [pc, #352]	; (8004870 <RegInt_parsecmd.part.9+0xc80>)
 800470e:	4659      	mov	r1, fp
 8004710:	0018      	movs	r0, r3
 8004712:	4698      	mov	r8, r3
 8004714:	f010 faf6 	bl	8014d04 <__wrap_printf>
	return *regptr;
 8004718:	2384      	movs	r3, #132	; 0x84
 800471a:	4a65      	ldr	r2, [pc, #404]	; (80048b0 <RegInt_parsecmd.part.9+0xcc0>)
	REGADRERR = -1;
 800471c:	602e      	str	r6, [r5, #0]
	return *regptr;
 800471e:	58d5      	ldr	r5, [r2, r3]
	DBG_PRINTINT(repeats);
 8004720:	4b4e      	ldr	r3, [pc, #312]	; (800485c <RegInt_parsecmd.part.9+0xc6c>)
	return *regptr;
 8004722:	62fd      	str	r5, [r7, #44]	; 0x2c
	DBG_PRINTINT(repeats);
 8004724:	0018      	movs	r0, r3
 8004726:	469a      	mov	sl, r3
 8004728:	f010 faec 	bl	8014d04 <__wrap_printf>
 800472c:	002a      	movs	r2, r5
 800472e:	4961      	ldr	r1, [pc, #388]	; (80048b4 <RegInt_parsecmd.part.9+0xcc4>)
 8004730:	484c      	ldr	r0, [pc, #304]	; (8004864 <RegInt_parsecmd.part.9+0xc74>)
 8004732:	f010 fae7 	bl	8014d04 <__wrap_printf>
 8004736:	22bd      	movs	r2, #189	; 0xbd
 8004738:	4659      	mov	r1, fp
 800473a:	0092      	lsls	r2, r2, #2
 800473c:	4640      	mov	r0, r8
 800473e:	f010 fae1 	bl	8014d04 <__wrap_printf>
 8004742:	4e58      	ldr	r6, [pc, #352]	; (80048a4 <RegInt_parsecmd.part.9+0xcb4>)
	for(uint32_t i=0; i < repeats; i++){
 8004744:	2d00      	cmp	r5, #0
 8004746:	d021      	beq.n	800478c <RegInt_parsecmd.part.9+0xb9c>
 8004748:	2300      	movs	r3, #0
 800474a:	2138      	movs	r1, #56	; 0x38
 800474c:	221c      	movs	r2, #28
 800474e:	4699      	mov	r9, r3
 8004750:	1879      	adds	r1, r7, r1
 8004752:	4e54      	ldr	r6, [pc, #336]	; (80048a4 <RegInt_parsecmd.part.9+0xcb4>)
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	188d      	adds	r5, r1, r2
 8004758:	464b      	mov	r3, r9
 800475a:	702b      	strb	r3, [r5, #0]
 800475c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 800475e:	0029      	movs	r1, r5
 8004760:	606b      	str	r3, [r5, #4]
 8004762:	4b55      	ldr	r3, [pc, #340]	; (80048b8 <RegInt_parsecmd.part.9+0xcc8>)
 8004764:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004766:	60ab      	str	r3, [r5, #8]
 8004768:	464b      	mov	r3, r9
 800476a:	60eb      	str	r3, [r5, #12]
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <RegInt_parsecmd.part.9+0xccc>)
 800476e:	612b      	str	r3, [r5, #16]
 8004770:	2304      	movs	r3, #4
 8004772:	616b      	str	r3, [r5, #20]
 8004774:	464b      	mov	r3, r9
 8004776:	762b      	strb	r3, [r5, #24]
 8004778:	766b      	strb	r3, [r5, #25]
 800477a:	76ab      	strb	r3, [r5, #26]
 800477c:	f006 f988 	bl	800aa90 <acc_service_get_next.constprop.80>
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004784:	3301      	adds	r3, #1
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
 8004788:	429a      	cmp	r2, r3
 800478a:	d1e5      	bne.n	8004758 <RegInt_parsecmd.part.9+0xb68>
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 800478c:	4b3a      	ldr	r3, [pc, #232]	; (8004878 <RegInt_parsecmd.part.9+0xc88>)
 800478e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	6818      	ldr	r0, [r3, #0]
	uint16_t bins = envelope_metadata.data_length;
 8004794:	2340      	movs	r3, #64	; 0x40
	memcpy(data[0],envelope_data, bins*sizeof(uint16_t));
 8004796:	5ae2      	ldrh	r2, [r4, r3]
 8004798:	0052      	lsls	r2, r2, #1
 800479a:	f010 fe83 	bl	80154a4 <memcpy>
	DBG_PRINTLN("Envelope measurement complete");
 800479e:	4650      	mov	r0, sl
 80047a0:	f010 fab0 	bl	8014d04 <__wrap_printf>
 80047a4:	4846      	ldr	r0, [pc, #280]	; (80048c0 <RegInt_parsecmd.part.9+0xcd0>)
 80047a6:	f010 faad 	bl	8014d04 <__wrap_printf>
 80047aa:	4a46      	ldr	r2, [pc, #280]	; (80048c4 <RegInt_parsecmd.part.9+0xcd4>)
 80047ac:	4659      	mov	r1, fp
 80047ae:	4640      	mov	r0, r8
 80047b0:	f010 faa8 	bl	8014d04 <__wrap_printf>
 80047b4:	f7ff fa5f 	bl	8003c76 <RegInt_parsecmd.part.9+0x86>
	if(mode & 0x00000002){min_scale = dofft(data, data_size);}
 80047b8:	4b2f      	ldr	r3, [pc, #188]	; (8004878 <RegInt_parsecmd.part.9+0xc88>)
 80047ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80047be:	f00d f875 	bl	80118ac <dofft>
 80047c2:	61f8      	str	r0, [r7, #28]
 80047c4:	e556      	b.n	8004274 <RegInt_parsecmd.part.9+0x684>
		else{amplitude = 0;}
 80047c6:	2500      	movs	r5, #0
 80047c8:	e604      	b.n	80043d4 <RegInt_parsecmd.part.9+0x7e4>
			ERR_PRINTLN("acc_service_activate() for sparse far failed");
 80047ca:	483f      	ldr	r0, [pc, #252]	; (80048c8 <RegInt_parsecmd.part.9+0xcd8>)
 80047cc:	f010 fa9a 	bl	8014d04 <__wrap_printf>
 80047d0:	483e      	ldr	r0, [pc, #248]	; (80048cc <RegInt_parsecmd.part.9+0xcdc>)
 80047d2:	f010 fa97 	bl	8014d04 <__wrap_printf>
 80047d6:	22b7      	movs	r2, #183	; 0xb7
 80047d8:	4659      	mov	r1, fp
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	4640      	mov	r0, r8
 80047de:	f010 fa91 	bl	8014d04 <__wrap_printf>
 80047e2:	e47f      	b.n	80040e4 <RegInt_parsecmd.part.9+0x4f4>
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f00a fdf1 	bl	800f3cc <__aeabi_ui2f>
 80047ea:	4919      	ldr	r1, [pc, #100]	; (8004850 <RegInt_parsecmd.part.9+0xc60>)
 80047ec:	f009 fd5e 	bl	800e2ac <__aeabi_fdiv>
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 80047f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
	float thrnull = RegInt_getreg(0xD8)/1000.0f;
 80047f2:	1c03      	adds	r3, r0, #0
		if(mode & 0x00000010){null_data(data,data_size,max_index, thrnull);}
 80047f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047f6:	0028      	movs	r0, r5
 80047f8:	f00c fdba 	bl	8011370 <null_data>
 80047fc:	e5a9      	b.n	8004352 <RegInt_parsecmd.part.9+0x762>
			ERR_PRINTLN("acc_service_deactivate() for sparse failed");
 80047fe:	4832      	ldr	r0, [pc, #200]	; (80048c8 <RegInt_parsecmd.part.9+0xcd8>)
 8004800:	f010 fa80 	bl	8014d04 <__wrap_printf>
 8004804:	4832      	ldr	r0, [pc, #200]	; (80048d0 <RegInt_parsecmd.part.9+0xce0>)
 8004806:	f010 fa7d 	bl	8014d04 <__wrap_printf>
 800480a:	22b6      	movs	r2, #182	; 0xb6
 800480c:	4659      	mov	r1, fp
 800480e:	0092      	lsls	r2, r2, #2
 8004810:	4640      	mov	r0, r8
 8004812:	f010 fa77 	bl	8014d04 <__wrap_printf>
 8004816:	e45f      	b.n	80040d8 <RegInt_parsecmd.part.9+0x4e8>
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <RegInt_parsecmd.part.9+0xc88>)
 800481a:	4699      	mov	r9, r3
 800481c:	e443      	b.n	80040a6 <RegInt_parsecmd.part.9+0x4b6>
			ERR_PRINTLN("acc_service_activate() for sparse failed");
 800481e:	482a      	ldr	r0, [pc, #168]	; (80048c8 <RegInt_parsecmd.part.9+0xcd8>)
 8004820:	f010 fa70 	bl	8014d04 <__wrap_printf>
 8004824:	482b      	ldr	r0, [pc, #172]	; (80048d4 <RegInt_parsecmd.part.9+0xce4>)
 8004826:	f010 fa6d 	bl	8014d04 <__wrap_printf>
 800482a:	22ba      	movs	r2, #186	; 0xba
 800482c:	4659      	mov	r1, fp
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	4640      	mov	r0, r8
 8004832:	f010 fa67 	bl	8014d04 <__wrap_printf>
 8004836:	e49c      	b.n	8004172 <RegInt_parsecmd.part.9+0x582>
			ERR_PRINTLN("acc_service_deactivate() for sparse far failed");
 8004838:	4823      	ldr	r0, [pc, #140]	; (80048c8 <RegInt_parsecmd.part.9+0xcd8>)
 800483a:	f010 fa63 	bl	8014d04 <__wrap_printf>
 800483e:	4826      	ldr	r0, [pc, #152]	; (80048d8 <RegInt_parsecmd.part.9+0xce8>)
 8004840:	f010 fa60 	bl	8014d04 <__wrap_printf>
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <RegInt_parsecmd.part.9+0xcec>)
 8004846:	4659      	mov	r1, fp
 8004848:	4640      	mov	r0, r8
 800484a:	f010 fa5b 	bl	8014d04 <__wrap_printf>
 800484e:	e48a      	b.n	8004166 <RegInt_parsecmd.part.9+0x576>
 8004850:	447a0000 	.word	0x447a0000
 8004854:	49742400 	.word	0x49742400
 8004858:	200004c0 	.word	0x200004c0
 800485c:	0801bd4c 	.word	0x0801bd4c
 8004860:	0801c35c 	.word	0x0801c35c
 8004864:	0801c11c 	.word	0x0801c11c
 8004868:	0801bcb8 	.word	0x0801bcb8
 800486c:	00000375 	.word	0x00000375
 8004870:	0801bccc 	.word	0x0801bccc
 8004874:	2000010c 	.word	0x2000010c
 8004878:	2000008c 	.word	0x2000008c
 800487c:	408f4000 	.word	0x408f4000
 8004880:	0801bc94 	.word	0x0801bc94
 8004884:	0801c364 	.word	0x0801c364
 8004888:	0801c36c 	.word	0x0801c36c
 800488c:	00000399 	.word	0x00000399
 8004890:	0801c384 	.word	0x0801c384
 8004894:	0000039a 	.word	0x0000039a
 8004898:	0801c39c 	.word	0x0801c39c
 800489c:	0000039b 	.word	0x0000039b
 80048a0:	0801c3b4 	.word	0x0801c3b4
 80048a4:	2000020c 	.word	0x2000020c
 80048a8:	0801c20c 	.word	0x0801c20c
 80048ac:	000002f2 	.word	0x000002f2
 80048b0:	20000514 	.word	0x20000514
 80048b4:	0801c228 	.word	0x0801c228
 80048b8:	20000268 	.word	0x20000268
 80048bc:	2000026c 	.word	0x2000026c
 80048c0:	0801c230 	.word	0x0801c230
 80048c4:	000002fa 	.word	0x000002fa
 80048c8:	0801bdb0 	.word	0x0801bdb0
 80048cc:	0801c2b4 	.word	0x0801c2b4
 80048d0:	0801c288 	.word	0x0801c288
 80048d4:	0801c314 	.word	0x0801c314
 80048d8:	0801c2e4 	.word	0x0801c2e4
 80048dc:	000002e5 	.word	0x000002e5

080048e0 <validate.lto_priv.266>:
 80048e0:	6983      	ldr	r3, [r0, #24]
 80048e2:	b510      	push	{r4, lr}
 80048e4:	0004      	movs	r4, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <validate.lto_priv.266+0x20>
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <validate.lto_priv.266+0x44>)
 80048ec:	001a      	movs	r2, r3
 80048ee:	3230      	adds	r2, #48	; 0x30
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	d004      	beq.n	8004900 <validate.lto_priv.266+0x20>
 80048f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f8:	4a0b      	ldr	r2, [pc, #44]	; (8004928 <validate.lto_priv.266+0x48>)
 80048fa:	490c      	ldr	r1, [pc, #48]	; (800492c <validate.lto_priv.266+0x4c>)
 80048fc:	2001      	movs	r0, #1
 80048fe:	4798      	blx	r3
 8004900:	69e3      	ldr	r3, [r4, #28]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <validate.lto_priv.266+0x3c>
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <validate.lto_priv.266+0x44>)
 8004908:	001a      	movs	r2, r3
 800490a:	3230      	adds	r2, #48	; 0x30
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	2a00      	cmp	r2, #0
 8004910:	d004      	beq.n	800491c <validate.lto_priv.266+0x3c>
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <validate.lto_priv.266+0x50>)
 8004916:	4905      	ldr	r1, [pc, #20]	; (800492c <validate.lto_priv.266+0x4c>)
 8004918:	2001      	movs	r0, #1
 800491a:	4798      	blx	r3
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	6883      	ldr	r3, [r0, #8]
 8004920:	4798      	blx	r3
 8004922:	bd10      	pop	{r4, pc}
 8004924:	200002b8 	.word	0x200002b8
 8004928:	0801c4be 	.word	0x0801c4be
 800492c:	0801c4cf 	.word	0x0801c4cf
 8004930:	0801c4f1 	.word	0x0801c4f1

08004934 <event.lto_priv.279>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	0004      	movs	r4, r0
 8004938:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800493a:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 800493c:	8f43      	ldrh	r3, [r0, #58]	; 0x3a
 800493e:	6809      	ldr	r1, [r1, #0]
 8004940:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004942:	6900      	ldr	r0, [r0, #16]
 8004944:	47a8      	blx	r5
 8004946:	6820      	ldr	r0, [r4, #0]
 8004948:	6843      	ldr	r3, [r0, #4]
 800494a:	4798      	blx	r3
 800494c:	bd70      	pop	{r4, r5, r6, pc}

0800494e <noise_level_normalization_u16.lto_priv.673>:
 800494e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004950:	464f      	mov	r7, r9
 8004952:	4646      	mov	r6, r8
 8004954:	46d6      	mov	lr, sl
 8004956:	b5c0      	push	{r6, r7, lr}
 8004958:	001f      	movs	r7, r3
 800495a:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <noise_level_normalization_u16.lto_priv.673+0x62>)
 800495c:	0016      	movs	r6, r2
 800495e:	4698      	mov	r8, r3
 8004960:	2301      	movs	r3, #1
 8004962:	425b      	negs	r3, r3
 8004964:	4699      	mov	r9, r3
 8004966:	2300      	movs	r3, #0
 8004968:	0004      	movs	r4, r0
 800496a:	469a      	mov	sl, r3
 800496c:	084d      	lsrs	r5, r1, #1
 800496e:	006d      	lsls	r5, r5, #1
 8004970:	1945      	adds	r5, r0, r5
 8004972:	42ac      	cmp	r4, r5
 8004974:	d104      	bne.n	8004980 <noise_level_normalization_u16.lto_priv.673+0x32>
 8004976:	bc1c      	pop	{r2, r3, r4}
 8004978:	4690      	mov	r8, r2
 800497a:	4699      	mov	r9, r3
 800497c:	46a2      	mov	sl, r4
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <noise_level_normalization_u16.lto_priv.673+0x66>)
 8004982:	8820      	ldrh	r0, [r4, #0]
 8004984:	469c      	mov	ip, r3
 8004986:	4460      	add	r0, ip
 8004988:	4378      	muls	r0, r7
 800498a:	0031      	movs	r1, r6
 800498c:	f00a f95c 	bl	800ec48 <__divsi3>
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	18c0      	adds	r0, r0, r3
 8004996:	d503      	bpl.n	80049a0 <noise_level_normalization_u16.lto_priv.673+0x52>
 8004998:	4653      	mov	r3, sl
 800499a:	8023      	strh	r3, [r4, #0]
 800499c:	3402      	adds	r4, #2
 800499e:	e7e8      	b.n	8004972 <noise_level_normalization_u16.lto_priv.673+0x24>
 80049a0:	4540      	cmp	r0, r8
 80049a2:	dd02      	ble.n	80049aa <noise_level_normalization_u16.lto_priv.673+0x5c>
 80049a4:	464b      	mov	r3, r9
 80049a6:	8023      	strh	r3, [r4, #0]
 80049a8:	e7f8      	b.n	800499c <noise_level_normalization_u16.lto_priv.673+0x4e>
 80049aa:	8020      	strh	r0, [r4, #0]
 80049ac:	e7f6      	b.n	800499c <noise_level_normalization_u16.lto_priv.673+0x4e>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	0000ffff 	.word	0x0000ffff
 80049b4:	ffff8000 	.word	0xffff8000

080049b8 <validate.lto_priv.265>:
 80049b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80049ba:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <validate.lto_priv.265+0x94>)
 80049bc:	b510      	push	{r4, lr}
 80049be:	0004      	movs	r4, r0
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10b      	bne.n	80049dc <validate.lto_priv.265+0x24>
 80049c4:	6903      	ldr	r3, [r0, #16]
 80049c6:	6942      	ldr	r2, [r0, #20]
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d01e      	beq.n	8004a0a <validate.lto_priv.265+0x52>
 80049cc:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <validate.lto_priv.265+0x98>)
 80049ce:	2000      	movs	r0, #0
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <validate.lto_priv.265+0x9c>)
 80049d4:	4920      	ldr	r1, [pc, #128]	; (8004a58 <validate.lto_priv.265+0xa0>)
 80049d6:	4798      	blx	r3
 80049d8:	2000      	movs	r0, #0
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <validate.lto_priv.265+0xa4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10b      	bne.n	80049fa <validate.lto_priv.265+0x42>
 80049e2:	6903      	ldr	r3, [r0, #16]
 80049e4:	6942      	ldr	r2, [r0, #20]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d10f      	bne.n	8004a0a <validate.lto_priv.265+0x52>
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <validate.lto_priv.265+0x98>)
 80049ec:	2000      	movs	r0, #0
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <validate.lto_priv.265+0xa8>)
 80049f2:	4919      	ldr	r1, [pc, #100]	; (8004a58 <validate.lto_priv.265+0xa0>)
 80049f4:	4798      	blx	r3
 80049f6:	2000      	movs	r0, #0
 80049f8:	e7ef      	b.n	80049da <validate.lto_priv.265+0x22>
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <validate.lto_priv.265+0x98>)
 80049fc:	2000      	movs	r0, #0
 80049fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <validate.lto_priv.265+0xac>)
 8004a02:	4915      	ldr	r1, [pc, #84]	; (8004a58 <validate.lto_priv.265+0xa0>)
 8004a04:	4798      	blx	r3
 8004a06:	2000      	movs	r0, #0
 8004a08:	e7e7      	b.n	80049da <validate.lto_priv.265+0x22>
 8004a0a:	69a3      	ldr	r3, [r4, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <validate.lto_priv.265+0x6e>
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <validate.lto_priv.265+0x98>)
 8004a12:	001a      	movs	r2, r3
 8004a14:	3230      	adds	r2, #48	; 0x30
 8004a16:	7812      	ldrb	r2, [r2, #0]
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	d004      	beq.n	8004a26 <validate.lto_priv.265+0x6e>
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <validate.lto_priv.265+0xb0>)
 8004a20:	490d      	ldr	r1, [pc, #52]	; (8004a58 <validate.lto_priv.265+0xa0>)
 8004a22:	2001      	movs	r0, #1
 8004a24:	4798      	blx	r3
 8004a26:	69e3      	ldr	r3, [r4, #28]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <validate.lto_priv.265+0x8a>
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <validate.lto_priv.265+0x98>)
 8004a2e:	001a      	movs	r2, r3
 8004a30:	3230      	adds	r2, #48	; 0x30
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d004      	beq.n	8004a42 <validate.lto_priv.265+0x8a>
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <validate.lto_priv.265+0xb4>)
 8004a3c:	4906      	ldr	r1, [pc, #24]	; (8004a58 <validate.lto_priv.265+0xa0>)
 8004a3e:	2001      	movs	r0, #1
 8004a40:	4798      	blx	r3
 8004a42:	6820      	ldr	r0, [r4, #0]
 8004a44:	6883      	ldr	r3, [r0, #8]
 8004a46:	4798      	blx	r3
 8004a48:	e7c7      	b.n	80049da <validate.lto_priv.265+0x22>
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	08004e91 	.word	0x08004e91
 8004a50:	200002b8 	.word	0x200002b8
 8004a54:	0801c500 	.word	0x0801c500
 8004a58:	0801c528 	.word	0x0801c528
 8004a5c:	08004f4b 	.word	0x08004f4b
 8004a60:	0801c539 	.word	0x0801c539
 8004a64:	0801c56e 	.word	0x0801c56e
 8004a68:	0801c4be 	.word	0x0801c4be
 8004a6c:	0801c4f1 	.word	0x0801c4f1

08004a70 <event.lto_priv.278.lto_priv.668>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	0004      	movs	r4, r0
 8004a74:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a76:	4798      	blx	r3
 8004a78:	6820      	ldr	r0, [r4, #0]
 8004a7a:	6843      	ldr	r3, [r0, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	bd10      	pop	{r4, pc}

08004a80 <validate.lto_priv.264>:
 8004a80:	6903      	ldr	r3, [r0, #16]
 8004a82:	6942      	ldr	r2, [r0, #20]
 8004a84:	b510      	push	{r4, lr}
 8004a86:	0004      	movs	r4, r0
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d007      	beq.n	8004a9c <validate.lto_priv.264+0x1c>
 8004a8c:	4b13      	ldr	r3, [pc, #76]	; (8004adc <validate.lto_priv.264+0x5c>)
 8004a8e:	2000      	movs	r0, #0
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <validate.lto_priv.264+0x60>)
 8004a94:	4913      	ldr	r1, [pc, #76]	; (8004ae4 <validate.lto_priv.264+0x64>)
 8004a96:	4798      	blx	r3
 8004a98:	2000      	movs	r0, #0
 8004a9a:	bd10      	pop	{r4, pc}
 8004a9c:	6983      	ldr	r3, [r0, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <validate.lto_priv.264+0x38>
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <validate.lto_priv.264+0x5c>)
 8004aa4:	001a      	movs	r2, r3
 8004aa6:	3230      	adds	r2, #48	; 0x30
 8004aa8:	7812      	ldrb	r2, [r2, #0]
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	d004      	beq.n	8004ab8 <validate.lto_priv.264+0x38>
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <validate.lto_priv.264+0x68>)
 8004ab2:	490c      	ldr	r1, [pc, #48]	; (8004ae4 <validate.lto_priv.264+0x64>)
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	4798      	blx	r3
 8004ab8:	69e3      	ldr	r3, [r4, #28]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <validate.lto_priv.264+0x54>
 8004abe:	4b07      	ldr	r3, [pc, #28]	; (8004adc <validate.lto_priv.264+0x5c>)
 8004ac0:	001a      	movs	r2, r3
 8004ac2:	3230      	adds	r2, #48	; 0x30
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	2a00      	cmp	r2, #0
 8004ac8:	d004      	beq.n	8004ad4 <validate.lto_priv.264+0x54>
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	4a07      	ldr	r2, [pc, #28]	; (8004aec <validate.lto_priv.264+0x6c>)
 8004ace:	4905      	ldr	r1, [pc, #20]	; (8004ae4 <validate.lto_priv.264+0x64>)
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	4798      	blx	r3
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	6883      	ldr	r3, [r0, #8]
 8004ad8:	4798      	blx	r3
 8004ada:	e7de      	b.n	8004a9a <validate.lto_priv.264+0x1a>
 8004adc:	200002b8 	.word	0x200002b8
 8004ae0:	0801c500 	.word	0x0801c500
 8004ae4:	0801bbdf 	.word	0x0801bbdf
 8004ae8:	0801c4be 	.word	0x0801c4be
 8004aec:	0801c4f1 	.word	0x0801c4f1

08004af0 <event.lto_priv.277.lto_priv.662>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	0004      	movs	r4, r0
 8004af4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004af6:	4798      	blx	r3
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	6843      	ldr	r3, [r0, #4]
 8004afc:	4798      	blx	r3
 8004afe:	bd10      	pop	{r4, pc}

08004b00 <filter_no_operation.lto_priv.176>:
 8004b00:	4770      	bx	lr

08004b02 <validate.lto_priv.263>:
 8004b02:	6983      	ldr	r3, [r0, #24]
 8004b04:	b510      	push	{r4, lr}
 8004b06:	0004      	movs	r4, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <validate.lto_priv.263+0x20>
 8004b0c:	4b0e      	ldr	r3, [pc, #56]	; (8004b48 <validate.lto_priv.263+0x46>)
 8004b0e:	001a      	movs	r2, r3
 8004b10:	3230      	adds	r2, #48	; 0x30
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	d004      	beq.n	8004b22 <validate.lto_priv.263+0x20>
 8004b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <validate.lto_priv.263+0x4a>)
 8004b1c:	490c      	ldr	r1, [pc, #48]	; (8004b50 <validate.lto_priv.263+0x4e>)
 8004b1e:	2001      	movs	r0, #1
 8004b20:	4798      	blx	r3
 8004b22:	69e3      	ldr	r3, [r4, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <validate.lto_priv.263+0x3c>
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <validate.lto_priv.263+0x46>)
 8004b2a:	001a      	movs	r2, r3
 8004b2c:	3230      	adds	r2, #48	; 0x30
 8004b2e:	7812      	ldrb	r2, [r2, #0]
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d004      	beq.n	8004b3e <validate.lto_priv.263+0x3c>
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	4a07      	ldr	r2, [pc, #28]	; (8004b54 <validate.lto_priv.263+0x52>)
 8004b38:	4905      	ldr	r1, [pc, #20]	; (8004b50 <validate.lto_priv.263+0x4e>)
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	4798      	blx	r3
 8004b3e:	6820      	ldr	r0, [r4, #0]
 8004b40:	6883      	ldr	r3, [r0, #8]
 8004b42:	4798      	blx	r3
 8004b44:	bd10      	pop	{r4, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	200002b8 	.word	0x200002b8
 8004b4c:	0801c4be 	.word	0x0801c4be
 8004b50:	0801c583 	.word	0x0801c583
 8004b54:	0801c4f1 	.word	0x0801c4f1

08004b58 <event.lto_priv.276>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004b5c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004b5e:	6800      	ldr	r0, [r0, #0]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	6843      	ldr	r3, [r0, #4]
 8004b64:	4798      	blx	r3
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <validate.lto_priv.262>:
 8004b68:	6983      	ldr	r3, [r0, #24]
 8004b6a:	b510      	push	{r4, lr}
 8004b6c:	0004      	movs	r4, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <validate.lto_priv.262+0x20>
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <validate.lto_priv.262+0x44>)
 8004b74:	001a      	movs	r2, r3
 8004b76:	3230      	adds	r2, #48	; 0x30
 8004b78:	7812      	ldrb	r2, [r2, #0]
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	d004      	beq.n	8004b88 <validate.lto_priv.262+0x20>
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <validate.lto_priv.262+0x48>)
 8004b82:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <validate.lto_priv.262+0x4c>)
 8004b84:	2001      	movs	r0, #1
 8004b86:	4798      	blx	r3
 8004b88:	69e3      	ldr	r3, [r4, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <validate.lto_priv.262+0x3c>
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <validate.lto_priv.262+0x44>)
 8004b90:	001a      	movs	r2, r3
 8004b92:	3230      	adds	r2, #48	; 0x30
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	d004      	beq.n	8004ba4 <validate.lto_priv.262+0x3c>
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	4a06      	ldr	r2, [pc, #24]	; (8004bb8 <validate.lto_priv.262+0x50>)
 8004b9e:	4905      	ldr	r1, [pc, #20]	; (8004bb4 <validate.lto_priv.262+0x4c>)
 8004ba0:	2001      	movs	r0, #1
 8004ba2:	4798      	blx	r3
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	6883      	ldr	r3, [r0, #8]
 8004ba8:	4798      	blx	r3
 8004baa:	bd10      	pop	{r4, pc}
 8004bac:	200002b8 	.word	0x200002b8
 8004bb0:	0801c4be 	.word	0x0801c4be
 8004bb4:	0801c590 	.word	0x0801c590
 8004bb8:	0801c4f1 	.word	0x0801c4f1

08004bbc <convert_q12_4_to_q3_12_complex.lto_priv.651>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	0852      	lsrs	r2, r2, #1
 8004bc2:	0004      	movs	r4, r0
 8004bc4:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <convert_q12_4_to_q3_12_complex.lto_priv.651+0x24>)
 8004bc6:	0090      	lsls	r0, r2, #2
 8004bc8:	1809      	adds	r1, r1, r0
 8004bca:	3904      	subs	r1, #4
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	d200      	bcs.n	8004bd2 <convert_q12_4_to_q3_12_complex.lto_priv.651+0x16>
 8004bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd2:	0053      	lsls	r3, r2, #1
 8004bd4:	5ee3      	ldrsh	r3, [r4, r3]
 8004bd6:	804e      	strh	r6, [r1, #2]
 8004bd8:	105b      	asrs	r3, r3, #1
 8004bda:	406b      	eors	r3, r5
 8004bdc:	800b      	strh	r3, [r1, #0]
 8004bde:	e7f4      	b.n	8004bca <convert_q12_4_to_q3_12_complex.lto_priv.651+0xe>
 8004be0:	ffffc000 	.word	0xffffc000

08004be4 <convert_q12_4_to_q3_12.lto_priv.653>:
 8004be4:	b570      	push	{r4, r5, r6, lr}
 8004be6:	0853      	lsrs	r3, r2, #1
 8004be8:	4d06      	ldr	r5, [pc, #24]	; (8004c04 <convert_q12_4_to_q3_12.lto_priv.653+0x20>)
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	3b02      	subs	r3, #2
 8004bee:	1c9c      	adds	r4, r3, #2
 8004bf0:	d103      	bne.n	8004bfa <convert_q12_4_to_q3_12.lto_priv.653+0x16>
 8004bf2:	3303      	adds	r3, #3
 8004bf4:	439a      	bics	r2, r3
 8004bf6:	0010      	movs	r0, r2
 8004bf8:	bd70      	pop	{r4, r5, r6, pc}
 8004bfa:	5ec4      	ldrsh	r4, [r0, r3]
 8004bfc:	1064      	asrs	r4, r4, #1
 8004bfe:	406c      	eors	r4, r5
 8004c00:	52cc      	strh	r4, [r1, r3]
 8004c02:	e7f3      	b.n	8004bec <convert_q12_4_to_q3_12.lto_priv.653+0x8>
 8004c04:	ffffc000 	.word	0xffffc000

08004c08 <convert_q12_4_to_q15_16.lto_priv.654>:
 8004c08:	0852      	lsrs	r2, r2, #1
 8004c0a:	0013      	movs	r3, r2
 8004c0c:	b530      	push	{r4, r5, lr}
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	d201      	bcs.n	8004c16 <convert_q12_4_to_q15_16.lto_priv.654+0xe>
 8004c12:	0090      	lsls	r0, r2, #2
 8004c14:	bd30      	pop	{r4, r5, pc}
 8004c16:	005c      	lsls	r4, r3, #1
 8004c18:	5b04      	ldrh	r4, [r0, r4]
 8004c1a:	009d      	lsls	r5, r3, #2
 8004c1c:	0324      	lsls	r4, r4, #12
 8004c1e:	514c      	str	r4, [r1, r5]
 8004c20:	e7f5      	b.n	8004c0e <convert_q12_4_to_q15_16.lto_priv.654+0x6>

08004c22 <convert_q3_12_complex_to_f32_complex.lto_priv.650>:
 8004c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c24:	4647      	mov	r7, r8
 8004c26:	46ce      	mov	lr, r9
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	0007      	movs	r7, r0
 8004c2c:	0894      	lsrs	r4, r2, #2
 8004c2e:	00e6      	lsls	r6, r4, #3
 8004c30:	198d      	adds	r5, r1, r6
 8004c32:	00a4      	lsls	r4, r4, #2
 8004c34:	3c04      	subs	r4, #4
 8004c36:	3d08      	subs	r5, #8
 8004c38:	1d23      	adds	r3, r4, #4
 8004c3a:	d104      	bne.n	8004c46 <convert_q3_12_complex_to_f32_complex.lto_priv.650+0x24>
 8004c3c:	0030      	movs	r0, r6
 8004c3e:	bc0c      	pop	{r2, r3}
 8004c40:	4690      	mov	r8, r2
 8004c42:	4699      	mov	r9, r3
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c46:	193b      	adds	r3, r7, r4
 8004c48:	2002      	movs	r0, #2
 8004c4a:	5e18      	ldrsh	r0, [r3, r0]
 8004c4c:	f00a fb74 	bl	800f338 <__aeabi_i2f>
 8004c50:	21e6      	movs	r1, #230	; 0xe6
 8004c52:	0589      	lsls	r1, r1, #22
 8004c54:	f009 fc3c 	bl	800e4d0 <__aeabi_fmul>
 8004c58:	4680      	mov	r8, r0
 8004c5a:	5f38      	ldrsh	r0, [r7, r4]
 8004c5c:	f00a fb6c 	bl	800f338 <__aeabi_i2f>
 8004c60:	21e6      	movs	r1, #230	; 0xe6
 8004c62:	0589      	lsls	r1, r1, #22
 8004c64:	f009 fc34 	bl	800e4d0 <__aeabi_fmul>
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4681      	mov	r9, r0
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	f009 fc2f 	bl	800e4d0 <__aeabi_fmul>
 8004c72:	1c01      	adds	r1, r0, #0
 8004c74:	4648      	mov	r0, r9
 8004c76:	f009 f97f 	bl	800df78 <__aeabi_fadd>
 8004c7a:	4643      	mov	r3, r8
 8004c7c:	6028      	str	r0, [r5, #0]
 8004c7e:	606b      	str	r3, [r5, #4]
 8004c80:	e7d8      	b.n	8004c34 <convert_q3_12_complex_to_f32_complex.lto_priv.650+0x12>

08004c82 <convert_q15_16_to_f32.lto_priv.652>:
 8004c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c84:	4647      	mov	r7, r8
 8004c86:	46ce      	mov	lr, r9
 8004c88:	4688      	mov	r8, r1
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	0015      	movs	r5, r2
 8004c8e:	0007      	movs	r7, r0
 8004c90:	0894      	lsrs	r4, r2, #2
 8004c92:	00a4      	lsls	r4, r4, #2
 8004c94:	3c04      	subs	r4, #4
 8004c96:	1d23      	adds	r3, r4, #4
 8004c98:	d106      	bne.n	8004ca8 <convert_q15_16_to_f32.lto_priv.652+0x26>
 8004c9a:	0028      	movs	r0, r5
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	4398      	bics	r0, r3
 8004ca0:	bc0c      	pop	{r2, r3}
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca8:	593e      	ldr	r6, [r7, r4]
 8004caa:	b2b0      	uxth	r0, r6
 8004cac:	f00a fb44 	bl	800f338 <__aeabi_i2f>
 8004cb0:	21de      	movs	r1, #222	; 0xde
 8004cb2:	0589      	lsls	r1, r1, #22
 8004cb4:	f009 fc0c 	bl	800e4d0 <__aeabi_fmul>
 8004cb8:	4681      	mov	r9, r0
 8004cba:	1430      	asrs	r0, r6, #16
 8004cbc:	f00a fb3c 	bl	800f338 <__aeabi_i2f>
 8004cc0:	1c01      	adds	r1, r0, #0
 8004cc2:	4648      	mov	r0, r9
 8004cc4:	f009 f958 	bl	800df78 <__aeabi_fadd>
 8004cc8:	4643      	mov	r3, r8
 8004cca:	5118      	str	r0, [r3, r4]
 8004ccc:	e7e2      	b.n	8004c94 <convert_q15_16_to_f32.lto_priv.652+0x12>

08004cce <convert_q3_12_to_u16.lto_priv.655>:
 8004cce:	b510      	push	{r4, lr}
 8004cd0:	0853      	lsrs	r3, r2, #1
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	3b02      	subs	r3, #2
 8004cd6:	1c9c      	adds	r4, r3, #2
 8004cd8:	d103      	bne.n	8004ce2 <convert_q3_12_to_u16.lto_priv.655+0x14>
 8004cda:	3303      	adds	r3, #3
 8004cdc:	439a      	bics	r2, r3
 8004cde:	0010      	movs	r0, r2
 8004ce0:	bd10      	pop	{r4, pc}
 8004ce2:	5ac4      	ldrh	r4, [r0, r3]
 8004ce4:	0064      	lsls	r4, r4, #1
 8004ce6:	52cc      	strh	r4, [r1, r3]
 8004ce8:	e7f4      	b.n	8004cd4 <convert_q3_12_to_u16.lto_priv.655+0x6>

08004cea <validate.lto_priv.261>:
 8004cea:	6983      	ldr	r3, [r0, #24]
 8004cec:	b510      	push	{r4, lr}
 8004cee:	0004      	movs	r4, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <validate.lto_priv.261+0x20>
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <validate.lto_priv.261+0x46>)
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	3230      	adds	r2, #48	; 0x30
 8004cfa:	7812      	ldrb	r2, [r2, #0]
 8004cfc:	2a00      	cmp	r2, #0
 8004cfe:	d004      	beq.n	8004d0a <validate.lto_priv.261+0x20>
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	4a0c      	ldr	r2, [pc, #48]	; (8004d34 <validate.lto_priv.261+0x4a>)
 8004d04:	490c      	ldr	r1, [pc, #48]	; (8004d38 <validate.lto_priv.261+0x4e>)
 8004d06:	2001      	movs	r0, #1
 8004d08:	4798      	blx	r3
 8004d0a:	69e3      	ldr	r3, [r4, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <validate.lto_priv.261+0x3c>
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <validate.lto_priv.261+0x46>)
 8004d12:	001a      	movs	r2, r3
 8004d14:	3230      	adds	r2, #48	; 0x30
 8004d16:	7812      	ldrb	r2, [r2, #0]
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d004      	beq.n	8004d26 <validate.lto_priv.261+0x3c>
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <validate.lto_priv.261+0x52>)
 8004d20:	4905      	ldr	r1, [pc, #20]	; (8004d38 <validate.lto_priv.261+0x4e>)
 8004d22:	2001      	movs	r0, #1
 8004d24:	4798      	blx	r3
 8004d26:	6820      	ldr	r0, [r4, #0]
 8004d28:	6883      	ldr	r3, [r0, #8]
 8004d2a:	4798      	blx	r3
 8004d2c:	bd10      	pop	{r4, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	200002b8 	.word	0x200002b8
 8004d34:	0801c4be 	.word	0x0801c4be
 8004d38:	0801c5a2 	.word	0x0801c5a2
 8004d3c:	0801c4f1 	.word	0x0801c4f1

08004d40 <event.lto_priv.274>:
 8004d40:	b510      	push	{r4, lr}
 8004d42:	0004      	movs	r4, r0
 8004d44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d46:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	6900      	ldr	r0, [r0, #16]
 8004d4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d4e:	4798      	blx	r3
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	6843      	ldr	r3, [r0, #4]
 8004d54:	4798      	blx	r3
 8004d56:	bd10      	pop	{r4, pc}

08004d58 <validate.lto_priv.260>:
 8004d58:	6983      	ldr	r3, [r0, #24]
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	0004      	movs	r4, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <validate.lto_priv.260+0x20>
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <validate.lto_priv.260+0x44>)
 8004d64:	001a      	movs	r2, r3
 8004d66:	3230      	adds	r2, #48	; 0x30
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	2a00      	cmp	r2, #0
 8004d6c:	d004      	beq.n	8004d78 <validate.lto_priv.260+0x20>
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <validate.lto_priv.260+0x48>)
 8004d72:	490c      	ldr	r1, [pc, #48]	; (8004da4 <validate.lto_priv.260+0x4c>)
 8004d74:	2001      	movs	r0, #1
 8004d76:	4798      	blx	r3
 8004d78:	69e3      	ldr	r3, [r4, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <validate.lto_priv.260+0x3c>
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <validate.lto_priv.260+0x44>)
 8004d80:	001a      	movs	r2, r3
 8004d82:	3230      	adds	r2, #48	; 0x30
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	d004      	beq.n	8004d94 <validate.lto_priv.260+0x3c>
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <validate.lto_priv.260+0x50>)
 8004d8e:	4905      	ldr	r1, [pc, #20]	; (8004da4 <validate.lto_priv.260+0x4c>)
 8004d90:	2001      	movs	r0, #1
 8004d92:	4798      	blx	r3
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	6883      	ldr	r3, [r0, #8]
 8004d98:	4798      	blx	r3
 8004d9a:	bd10      	pop	{r4, pc}
 8004d9c:	200002b8 	.word	0x200002b8
 8004da0:	0801c4be 	.word	0x0801c4be
 8004da4:	0801c5b4 	.word	0x0801c5b4
 8004da8:	0801c4f1 	.word	0x0801c4f1

08004dac <reset.lto_priv.171.lto_priv.258>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	68c3      	ldr	r3, [r0, #12]
 8004db2:	4798      	blx	r3
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <reset.lto_priv.272.lto_priv.672>:
 8004db6:	b510      	push	{r4, lr}
 8004db8:	f7ff fff8 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004dbc:	bd10      	pop	{r4, pc}

08004dbe <reset.lto_priv.271.lto_priv.669>:
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	f7ff fff4 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004dc4:	bd10      	pop	{r4, pc}

08004dc6 <reset.lto_priv.270.lto_priv.663>:
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	f7ff fff0 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004dcc:	bd10      	pop	{r4, pc}

08004dce <reset.lto_priv.269.lto_priv.664>:
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	f7ff ffec 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004dd4:	bd10      	pop	{r4, pc}

08004dd6 <reset.lto_priv.268.lto_priv.649>:
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	f7ff ffe8 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004ddc:	bd10      	pop	{r4, pc}

08004dde <reset.lto_priv.267.lto_priv.674>:
 8004dde:	b510      	push	{r4, lr}
 8004de0:	f7ff ffe4 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 8004de4:	bd10      	pop	{r4, pc}

08004de6 <event.lto_priv.273.lto_priv.656>:
 8004de6:	b570      	push	{r4, r5, r6, lr}
 8004de8:	0004      	movs	r4, r0
 8004dea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004dec:	6941      	ldr	r1, [r0, #20]
 8004dee:	682a      	ldr	r2, [r5, #0]
 8004df0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004df2:	6900      	ldr	r0, [r0, #16]
 8004df4:	4798      	blx	r3
 8004df6:	6028      	str	r0, [r5, #0]
 8004df8:	6820      	ldr	r0, [r4, #0]
 8004dfa:	6843      	ldr	r3, [r0, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}

08004e00 <event.lto_priv.275.lto_priv.648>:
 8004e00:	b510      	push	{r4, lr}
 8004e02:	f7ff fff0 	bl	8004de6 <event.lto_priv.273.lto_priv.656>
 8004e06:	bd10      	pop	{r4, pc}

08004e08 <acc_sweep_manager_release>:
 8004e08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <acc_sweep_manager_release+0xe>
 8004e10:	3014      	adds	r0, #20
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e14:	4798      	blx	r3
 8004e16:	bd10      	pop	{r4, pc}

08004e18 <acc_sensor_manager_release_measurement>:
 8004e18:	6982      	ldr	r2, [r0, #24]
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	2a00      	cmp	r2, #0
 8004e1e:	d00f      	beq.n	8004e40 <acc_sensor_manager_release_measurement+0x28>
 8004e20:	2348      	movs	r3, #72	; 0x48
 8004e22:	435a      	muls	r2, r3
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <acc_sensor_manager_release_measurement+0x2c>)
 8004e26:	3a48      	subs	r2, #72	; 0x48
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	3240      	adds	r2, #64	; 0x40
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	2a00      	cmp	r2, #0
 8004e34:	d101      	bne.n	8004e3a <acc_sensor_manager_release_measurement+0x22>
 8004e36:	3341      	adds	r3, #65	; 0x41
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	3004      	adds	r0, #4
 8004e3c:	f7ff ffe4 	bl	8004e08 <acc_sweep_manager_release>
 8004e40:	bd10      	pop	{r4, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	200004b8 	.word	0x200004b8

08004e48 <measure_noise.lto_priv.285>:
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr

08004e4c <acc_rss_integration_sensor_device_power_on>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	4b02      	ldr	r3, [pc, #8]	; (8004e58 <acc_rss_integration_sensor_device_power_on+0xc>)
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	4798      	blx	r3
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	200002b8 	.word	0x200002b8

08004e5c <abs_q3_12_complex.lto_priv.657>:
 8004e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e5e:	46c6      	mov	lr, r8
 8004e60:	0007      	movs	r7, r0
 8004e62:	4688      	mov	r8, r1
 8004e64:	2400      	movs	r4, #0
 8004e66:	b500      	push	{lr}
 8004e68:	0895      	lsrs	r5, r2, #2
 8004e6a:	0066      	lsls	r6, r4, #1
 8004e6c:	42ac      	cmp	r4, r5
 8004e6e:	d103      	bne.n	8004e78 <abs_q3_12_complex.lto_priv.657+0x1c>
 8004e70:	0030      	movs	r0, r6
 8004e72:	bc04      	pop	{r2}
 8004e74:	4690      	mov	r8, r2
 8004e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e78:	00a3      	lsls	r3, r4, #2
 8004e7a:	5bda      	ldrh	r2, [r3, r7]
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	8858      	ldrh	r0, [r3, #2]
 8004e80:	3401      	adds	r4, #1
 8004e82:	0400      	lsls	r0, r0, #16
 8004e84:	4310      	orrs	r0, r2
 8004e86:	f007 fd21 	bl	800c8cc <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	5398      	strh	r0, [r3, r6]
 8004e8e:	e7ec      	b.n	8004e6a <abs_q3_12_complex.lto_priv.657+0xe>

08004e90 <iq_mix_q3_12_complex.lto_priv.671>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	46de      	mov	lr, fp
 8004e94:	464e      	mov	r6, r9
 8004e96:	4645      	mov	r5, r8
 8004e98:	4657      	mov	r7, sl
 8004e9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e9c:	b5e0      	push	{r5, r6, r7, lr}
 8004e9e:	4698      	mov	r8, r3
 8004ea0:	681e      	ldr	r6, [r3, #0]
 8004ea2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004ea4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004ea6:	681d      	ldr	r5, [r3, #0]
 8004ea8:	0004      	movs	r4, r0
 8004eaa:	1c28      	adds	r0, r5, #0
 8004eac:	f009 fb10 	bl	800e4d0 <__aeabi_fmul>
 8004eb0:	f007 fc6a 	bl	800c788 <accumulator_mod.lto_priv.621>
 8004eb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004eb6:	0007      	movs	r7, r0
 8004eb8:	1c28      	adds	r0, r5, #0
 8004eba:	f009 fb09 	bl	800e4d0 <__aeabi_fmul>
 8004ebe:	f007 fc63 	bl	800c788 <accumulator_mod.lto_priv.621>
 8004ec2:	4681      	mov	r9, r0
 8004ec4:	6924      	ldr	r4, [r4, #16]
 8004ec6:	08b5      	lsrs	r5, r6, #2
 8004ec8:	00ad      	lsls	r5, r5, #2
 8004eca:	192d      	adds	r5, r5, r4
 8004ecc:	42ac      	cmp	r4, r5
 8004ece:	d109      	bne.n	8004ee4 <iq_mix_q3_12_complex.lto_priv.671+0x54>
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	439e      	bics	r6, r3
 8004ed4:	4643      	mov	r3, r8
 8004ed6:	601e      	str	r6, [r3, #0]
 8004ed8:	bc3c      	pop	{r2, r3, r4, r5}
 8004eda:	4690      	mov	r8, r2
 8004edc:	4699      	mov	r9, r3
 8004ede:	46a2      	mov	sl, r4
 8004ee0:	46ab      	mov	fp, r5
 8004ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	05db      	lsls	r3, r3, #23
 8004ee8:	18f8      	adds	r0, r7, r3
 8004eea:	f007 fcd9 	bl	800c8a0 <acc_alg_basic_math_q3_12_sin>
 8004eee:	4682      	mov	sl, r0
 8004ef0:	0038      	movs	r0, r7
 8004ef2:	f007 fcd5 	bl	800c8a0 <acc_alg_basic_math_q3_12_sin>
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	5ea3      	ldrsh	r3, [r4, r2]
 8004efa:	4651      	mov	r1, sl
 8004efc:	469c      	mov	ip, r3
 8004efe:	2202      	movs	r2, #2
 8004f00:	5ea3      	ldrsh	r3, [r4, r2]
 8004f02:	4662      	mov	r2, ip
 8004f04:	4351      	muls	r1, r2
 8004f06:	17ca      	asrs	r2, r1, #31
 8004f08:	0512      	lsls	r2, r2, #20
 8004f0a:	0d12      	lsrs	r2, r2, #20
 8004f0c:	1852      	adds	r2, r2, r1
 8004f0e:	0001      	movs	r1, r0
 8004f10:	4359      	muls	r1, r3
 8004f12:	468b      	mov	fp, r1
 8004f14:	17c9      	asrs	r1, r1, #31
 8004f16:	0509      	lsls	r1, r1, #20
 8004f18:	0d09      	lsrs	r1, r1, #20
 8004f1a:	4459      	add	r1, fp
 8004f1c:	1312      	asrs	r2, r2, #12
 8004f1e:	1309      	asrs	r1, r1, #12
 8004f20:	1a52      	subs	r2, r2, r1
 8004f22:	8022      	strh	r2, [r4, #0]
 8004f24:	4652      	mov	r2, sl
 8004f26:	435a      	muls	r2, r3
 8004f28:	17d3      	asrs	r3, r2, #31
 8004f2a:	051b      	lsls	r3, r3, #20
 8004f2c:	0d1b      	lsrs	r3, r3, #20
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	4662      	mov	r2, ip
 8004f32:	4342      	muls	r2, r0
 8004f34:	17d0      	asrs	r0, r2, #31
 8004f36:	0500      	lsls	r0, r0, #20
 8004f38:	0d00      	lsrs	r0, r0, #20
 8004f3a:	1880      	adds	r0, r0, r2
 8004f3c:	131b      	asrs	r3, r3, #12
 8004f3e:	1300      	asrs	r0, r0, #12
 8004f40:	181b      	adds	r3, r3, r0
 8004f42:	8063      	strh	r3, [r4, #2]
 8004f44:	444f      	add	r7, r9
 8004f46:	3404      	adds	r4, #4
 8004f48:	e7c0      	b.n	8004ecc <iq_mix_q3_12_complex.lto_priv.671+0x3c>

08004f4a <iq_mix_q3_12.lto_priv.670>:
 8004f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4c:	46de      	mov	lr, fp
 8004f4e:	4657      	mov	r7, sl
 8004f50:	464e      	mov	r6, r9
 8004f52:	4645      	mov	r5, r8
 8004f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004f56:	b5e0      	push	{r5, r6, r7, lr}
 8004f58:	4699      	mov	r9, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	0006      	movs	r6, r0
 8004f5e:	085c      	lsrs	r4, r3, #1
 8004f60:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004f62:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004f64:	681d      	ldr	r5, [r3, #0]
 8004f66:	1c28      	adds	r0, r5, #0
 8004f68:	f009 fab2 	bl	800e4d0 <__aeabi_fmul>
 8004f6c:	f007 fc0c 	bl	800c788 <accumulator_mod.lto_priv.621>
 8004f70:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8004f72:	0007      	movs	r7, r0
 8004f74:	1c28      	adds	r0, r5, #0
 8004f76:	f009 faab 	bl	800e4d0 <__aeabi_fmul>
 8004f7a:	f007 fc05 	bl	800c788 <accumulator_mod.lto_priv.621>
 8004f7e:	0063      	lsls	r3, r4, #1
 8004f80:	4698      	mov	r8, r3
 8004f82:	4682      	mov	sl, r0
 8004f84:	6935      	ldr	r5, [r6, #16]
 8004f86:	6976      	ldr	r6, [r6, #20]
 8004f88:	44a8      	add	r8, r5
 8004f8a:	4545      	cmp	r5, r8
 8004f8c:	d108      	bne.n	8004fa0 <iq_mix_q3_12.lto_priv.670+0x56>
 8004f8e:	464b      	mov	r3, r9
 8004f90:	00a4      	lsls	r4, r4, #2
 8004f92:	601c      	str	r4, [r3, #0]
 8004f94:	bc3c      	pop	{r2, r3, r4, r5}
 8004f96:	4690      	mov	r8, r2
 8004f98:	4699      	mov	r9, r3
 8004f9a:	46a2      	mov	sl, r4
 8004f9c:	46ab      	mov	fp, r5
 8004f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	5eab      	ldrsh	r3, [r5, r2]
 8004fa4:	3502      	adds	r5, #2
 8004fa6:	469b      	mov	fp, r3
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	05db      	lsls	r3, r3, #23
 8004fac:	18f8      	adds	r0, r7, r3
 8004fae:	f007 fc77 	bl	800c8a0 <acc_alg_basic_math_q3_12_sin>
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	4343      	muls	r3, r0
 8004fb6:	17d8      	asrs	r0, r3, #31
 8004fb8:	0500      	lsls	r0, r0, #20
 8004fba:	0d00      	lsrs	r0, r0, #20
 8004fbc:	18c0      	adds	r0, r0, r3
 8004fbe:	1300      	asrs	r0, r0, #12
 8004fc0:	8030      	strh	r0, [r6, #0]
 8004fc2:	0038      	movs	r0, r7
 8004fc4:	f007 fc6c 	bl	800c8a0 <acc_alg_basic_math_q3_12_sin>
 8004fc8:	465b      	mov	r3, fp
 8004fca:	4343      	muls	r3, r0
 8004fcc:	17d8      	asrs	r0, r3, #31
 8004fce:	0500      	lsls	r0, r0, #20
 8004fd0:	0d00      	lsrs	r0, r0, #20
 8004fd2:	18c0      	adds	r0, r0, r3
 8004fd4:	1300      	asrs	r0, r0, #12
 8004fd6:	8070      	strh	r0, [r6, #2]
 8004fd8:	4457      	add	r7, sl
 8004fda:	3604      	adds	r6, #4
 8004fdc:	e7d5      	b.n	8004f8a <iq_mix_q3_12.lto_priv.670+0x40>

08004fde <filter_q3_12_complex.lto_priv.660>:
 8004fde:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004fe4:	6906      	ldr	r6, [r0, #16]
 8004fe6:	681d      	ldr	r5, [r3, #0]
 8004fe8:	ab03      	add	r3, sp, #12
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	805a      	strh	r2, [r3, #2]
 8004fee:	9b03      	ldr	r3, [sp, #12]
 8004ff0:	08ad      	lsrs	r5, r5, #2
 8004ff2:	002a      	movs	r2, r5
 8004ff4:	0031      	movs	r1, r6
 8004ff6:	3040      	adds	r0, #64	; 0x40
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	0004      	movs	r4, r0
 8004ffe:	f007 fa47 	bl	800c490 <biquad_q3_12_complex_direct_form_1.lto_priv.622>
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <filter_q3_12_complex.lto_priv.660+0x4e>)
 8005004:	0020      	movs	r0, r4
 8005006:	18eb      	adds	r3, r5, r3
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	18f3      	adds	r3, r6, r3
 800500c:	2202      	movs	r2, #2
 800500e:	5e99      	ldrsh	r1, [r3, r2]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	aa02      	add	r2, sp, #8
 8005014:	8013      	strh	r3, [r2, #0]
 8005016:	2301      	movs	r3, #1
 8005018:	8051      	strh	r1, [r2, #2]
 800501a:	9a02      	ldr	r2, [sp, #8]
 800501c:	0031      	movs	r1, r6
 800501e:	9200      	str	r2, [sp, #0]
 8005020:	425b      	negs	r3, r3
 8005022:	002a      	movs	r2, r5
 8005024:	f007 fa34 	bl	800c490 <biquad_q3_12_complex_direct_form_1.lto_priv.622>
 8005028:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	3fffffff 	.word	0x3fffffff

08005030 <centering_q12_4.lto_priv.675>:
 8005030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005032:	4657      	mov	r7, sl
 8005034:	464e      	mov	r6, r9
 8005036:	4645      	mov	r5, r8
 8005038:	46de      	mov	lr, fp
 800503a:	b5e0      	push	{r5, r6, r7, lr}
 800503c:	0849      	lsrs	r1, r1, #1
 800503e:	0852      	lsrs	r2, r2, #1
 8005040:	b28b      	uxth	r3, r1
 8005042:	b295      	uxth	r5, r2
 8005044:	b083      	sub	sp, #12
 8005046:	4682      	mov	sl, r0
 8005048:	4699      	mov	r9, r3
 800504a:	2d00      	cmp	r5, #0
 800504c:	d100      	bne.n	8005050 <centering_q12_4.lto_priv.675+0x20>
 800504e:	001d      	movs	r5, r3
 8005050:	b28b      	uxth	r3, r1
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	2301      	movs	r3, #1
 8005056:	425b      	negs	r3, r3
 8005058:	46c8      	mov	r8, r9
 800505a:	002f      	movs	r7, r5
 800505c:	2600      	movs	r6, #0
 800505e:	469b      	mov	fp, r3
 8005060:	45b1      	cmp	r9, r6
 8005062:	d806      	bhi.n	8005072 <centering_q12_4.lto_priv.675+0x42>
 8005064:	b003      	add	sp, #12
 8005066:	bc3c      	pop	{r2, r3, r4, r5}
 8005068:	4690      	mov	r8, r2
 800506a:	4699      	mov	r9, r3
 800506c:	46a2      	mov	sl, r4
 800506e:	46ab      	mov	fp, r5
 8005070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005072:	9a01      	ldr	r2, [sp, #4]
 8005074:	19f3      	adds	r3, r6, r7
 8005076:	4293      	cmp	r3, r2
 8005078:	dd00      	ble.n	800507c <centering_q12_4.lto_priv.675+0x4c>
 800507a:	4647      	mov	r7, r8
 800507c:	2f00      	cmp	r7, #0
 800507e:	d020      	beq.n	80050c2 <centering_q12_4.lto_priv.675+0x92>
 8005080:	2200      	movs	r2, #0
 8005082:	0010      	movs	r0, r2
 8005084:	0074      	lsls	r4, r6, #1
 8005086:	4454      	add	r4, sl
 8005088:	42ba      	cmp	r2, r7
 800508a:	d321      	bcc.n	80050d0 <centering_q12_4.lto_priv.675+0xa0>
 800508c:	2301      	movs	r3, #1
 800508e:	2800      	cmp	r0, #0
 8005090:	da00      	bge.n	8005094 <centering_q12_4.lto_priv.675+0x64>
 8005092:	465b      	mov	r3, fp
 8005094:	087a      	lsrs	r2, r7, #1
 8005096:	b292      	uxth	r2, r2
 8005098:	4353      	muls	r3, r2
 800509a:	0039      	movs	r1, r7
 800509c:	1818      	adds	r0, r3, r0
 800509e:	f009 fdd3 	bl	800ec48 <__divsi3>
 80050a2:	007a      	lsls	r2, r7, #1
 80050a4:	b201      	sxth	r1, r0
 80050a6:	18a2      	adds	r2, r4, r2
 80050a8:	2900      	cmp	r1, #0
 80050aa:	dd19      	ble.n	80050e0 <centering_q12_4.lto_priv.675+0xb0>
 80050ac:	b280      	uxth	r0, r0
 80050ae:	8823      	ldrh	r3, [r4, #0]
 80050b0:	2100      	movs	r1, #0
 80050b2:	4283      	cmp	r3, r0
 80050b4:	d301      	bcc.n	80050ba <centering_q12_4.lto_priv.675+0x8a>
 80050b6:	1a1b      	subs	r3, r3, r0
 80050b8:	b299      	uxth	r1, r3
 80050ba:	8021      	strh	r1, [r4, #0]
 80050bc:	3402      	adds	r4, #2
 80050be:	42a2      	cmp	r2, r4
 80050c0:	d1f5      	bne.n	80050ae <centering_q12_4.lto_priv.675+0x7e>
 80050c2:	4643      	mov	r3, r8
 80050c4:	1b5b      	subs	r3, r3, r5
 80050c6:	1976      	adds	r6, r6, r5
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b2b6      	uxth	r6, r6
 80050cc:	4698      	mov	r8, r3
 80050ce:	e7c7      	b.n	8005060 <centering_q12_4.lto_priv.675+0x30>
 80050d0:	490b      	ldr	r1, [pc, #44]	; (8005100 <centering_q12_4.lto_priv.675+0xd0>)
 80050d2:	0053      	lsls	r3, r2, #1
 80050d4:	468c      	mov	ip, r1
 80050d6:	5ae3      	ldrh	r3, [r4, r3]
 80050d8:	3201      	adds	r2, #1
 80050da:	4463      	add	r3, ip
 80050dc:	18c0      	adds	r0, r0, r3
 80050de:	e7d3      	b.n	8005088 <centering_q12_4.lto_priv.675+0x58>
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <centering_q12_4.lto_priv.675+0xd4>)
 80050e2:	469c      	mov	ip, r3
 80050e4:	4461      	add	r1, ip
 80050e6:	8823      	ldrh	r3, [r4, #0]
 80050e8:	428b      	cmp	r3, r1
 80050ea:	dc06      	bgt.n	80050fa <centering_q12_4.lto_priv.675+0xca>
 80050ec:	1a1b      	subs	r3, r3, r0
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	8023      	strh	r3, [r4, #0]
 80050f2:	3402      	adds	r4, #2
 80050f4:	42a2      	cmp	r2, r4
 80050f6:	d1f6      	bne.n	80050e6 <centering_q12_4.lto_priv.675+0xb6>
 80050f8:	e7e3      	b.n	80050c2 <centering_q12_4.lto_priv.675+0x92>
 80050fa:	4b02      	ldr	r3, [pc, #8]	; (8005104 <centering_q12_4.lto_priv.675+0xd4>)
 80050fc:	e7f8      	b.n	80050f0 <centering_q12_4.lto_priv.675+0xc0>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	ffff8000 	.word	0xffff8000
 8005104:	0000ffff 	.word	0x0000ffff

08005108 <acc_alg_cca_calculate>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	0003      	movs	r3, r0
 800510c:	000c      	movs	r4, r1
 800510e:	2201      	movs	r2, #1
 8005110:	2000      	movs	r0, #0
 8005112:	42a2      	cmp	r2, r4
 8005114:	d30f      	bcc.n	8005136 <acc_alg_cca_calculate+0x2e>
 8005116:	f00a f90f 	bl	800f338 <__aeabi_i2f>
 800511a:	1c05      	adds	r5, r0, #0
 800511c:	1e60      	subs	r0, r4, #1
 800511e:	f00a f90b 	bl	800f338 <__aeabi_i2f>
 8005122:	1c01      	adds	r1, r0, #0
 8005124:	1c28      	adds	r0, r5, #0
 8005126:	f009 f8c1 	bl	800e2ac <__aeabi_fdiv>
 800512a:	f00e f87f 	bl	801322c <log10f>
 800512e:	4907      	ldr	r1, [pc, #28]	; (800514c <acc_alg_cca_calculate+0x44>)
 8005130:	f009 f9ce 	bl	800e4d0 <__aeabi_fmul>
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	881d      	ldrh	r5, [r3, #0]
 8005138:	8859      	ldrh	r1, [r3, #2]
 800513a:	3201      	adds	r2, #1
 800513c:	1b49      	subs	r1, r1, r5
 800513e:	17cd      	asrs	r5, r1, #31
 8005140:	1949      	adds	r1, r1, r5
 8005142:	4069      	eors	r1, r5
 8005144:	1840      	adds	r0, r0, r1
 8005146:	b292      	uxth	r2, r2
 8005148:	3302      	adds	r3, #2
 800514a:	e7e2      	b.n	8005112 <acc_alg_cca_calculate+0xa>
 800514c:	41a00000 	.word	0x41a00000

08005150 <acc_sensor_protocol_r2_check_asic_id>:
 8005150:	b530      	push	{r4, r5, lr}
 8005152:	250e      	movs	r5, #14
 8005154:	2400      	movs	r4, #0
 8005156:	b085      	sub	sp, #20
 8005158:	446d      	add	r5, sp
 800515a:	002a      	movs	r2, r5
 800515c:	0021      	movs	r1, r4
 800515e:	802c      	strh	r4, [r5, #0]
 8005160:	f007 fbe8 	bl	800c934 <internal_reg_read.lto_priv.623>
 8005164:	882a      	ldrh	r2, [r5, #0]
 8005166:	4b07      	ldr	r3, [pc, #28]	; (8005184 <acc_sensor_protocol_r2_check_asic_id+0x34>)
 8005168:	2001      	movs	r0, #1
 800516a:	429a      	cmp	r2, r3
 800516c:	d007      	beq.n	800517e <acc_sensor_protocol_r2_check_asic_id+0x2e>
 800516e:	9200      	str	r2, [sp, #0]
 8005170:	4a05      	ldr	r2, [pc, #20]	; (8005188 <acc_sensor_protocol_r2_check_asic_id+0x38>)
 8005172:	0020      	movs	r0, r4
 8005174:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8005176:	4905      	ldr	r1, [pc, #20]	; (800518c <acc_sensor_protocol_r2_check_asic_id+0x3c>)
 8005178:	4a05      	ldr	r2, [pc, #20]	; (8005190 <acc_sensor_protocol_r2_check_asic_id+0x40>)
 800517a:	47a8      	blx	r5
 800517c:	0020      	movs	r0, r4
 800517e:	b005      	add	sp, #20
 8005180:	bd30      	pop	{r4, r5, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	00001112 	.word	0x00001112
 8005188:	200002b8 	.word	0x200002b8
 800518c:	0801c5ee 	.word	0x0801c5ee
 8005190:	0801c5c0 	.word	0x0801c5c0

08005194 <process_data.lto_priv.294>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	001d      	movs	r5, r3
 8005198:	23b8      	movs	r3, #184	; 0xb8
 800519a:	46ce      	mov	lr, r9
 800519c:	4699      	mov	r9, r3
 800519e:	4647      	mov	r7, r8
 80051a0:	6944      	ldr	r4, [r0, #20]
 80051a2:	b580      	push	{r7, lr}
 80051a4:	44a1      	add	r9, r4
 80051a6:	464b      	mov	r3, r9
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	0017      	movs	r7, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d028      	beq.n	8005202 <process_data.lto_priv.294+0x6e>
 80051b0:	0026      	movs	r6, r4
 80051b2:	6809      	ldr	r1, [r1, #0]
 80051b4:	36b4      	adds	r6, #180	; 0xb4
 80051b6:	4688      	mov	r8, r1
 80051b8:	8832      	ldrh	r2, [r6, #0]
 80051ba:	6801      	ldr	r1, [r0, #0]
 80051bc:	0052      	lsls	r2, r2, #1
 80051be:	4490      	add	r8, r2
 80051c0:	4642      	mov	r2, r8
 80051c2:	2001      	movs	r0, #1
 80051c4:	f008 fc52 	bl	800da6c <acc_probes_execute_uint16>
 80051c8:	464b      	mov	r3, r9
 80051ca:	4640      	mov	r0, r8
 80051cc:	8819      	ldrh	r1, [r3, #0]
 80051ce:	f7ff ff9b 	bl	8005108 <acc_alg_cca_calculate>
 80051d2:	2301      	movs	r3, #1
 80051d4:	6068      	str	r0, [r5, #4]
 80051d6:	490d      	ldr	r1, [pc, #52]	; (800520c <process_data.lto_priv.294+0x78>)
 80051d8:	4698      	mov	r8, r3
 80051da:	f009 fe85 	bl	800eee8 <__aeabi_fcmpgt>
 80051de:	2800      	cmp	r0, #0
 80051e0:	d100      	bne.n	80051e4 <process_data.lto_priv.294+0x50>
 80051e2:	4680      	mov	r8, r0
 80051e4:	4643      	mov	r3, r8
 80051e6:	702b      	strb	r3, [r5, #0]
 80051e8:	2300      	movs	r3, #0
 80051ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d103      	bne.n	80051f8 <process_data.lto_priv.294+0x64>
 80051f0:	34ba      	adds	r4, #186	; 0xba
 80051f2:	7822      	ldrb	r2, [r4, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	4053      	eors	r3, r2
 80051f8:	2201      	movs	r2, #1
 80051fa:	4013      	ands	r3, r2
 80051fc:	722b      	strb	r3, [r5, #8]
 80051fe:	8833      	ldrh	r3, [r6, #0]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	2001      	movs	r0, #1
 8005204:	bc0c      	pop	{r2, r3}
 8005206:	4690      	mov	r8, r2
 8005208:	4699      	mov	r9, r3
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520c:	42640000 	.word	0x42640000

08005210 <process_data.lto_priv.293>:
 8005210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005212:	4657      	mov	r7, sl
 8005214:	464e      	mov	r6, r9
 8005216:	4645      	mov	r5, r8
 8005218:	46de      	mov	lr, fp
 800521a:	6944      	ldr	r4, [r0, #20]
 800521c:	b5e0      	push	{r5, r6, r7, lr}
 800521e:	0027      	movs	r7, r4
 8005220:	37ce      	adds	r7, #206	; 0xce
 8005222:	001d      	movs	r5, r3
 8005224:	883b      	ldrh	r3, [r7, #0]
 8005226:	4680      	mov	r8, r0
 8005228:	468a      	mov	sl, r1
 800522a:	0016      	movs	r6, r2
 800522c:	4699      	mov	r9, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d03a      	beq.n	80052a8 <process_data.lto_priv.293+0x98>
 8005232:	0023      	movs	r3, r4
 8005234:	33c8      	adds	r3, #200	; 0xc8
 8005236:	6818      	ldr	r0, [r3, #0]
 8005238:	b280      	uxth	r0, r0
 800523a:	0043      	lsls	r3, r0, #1
 800523c:	469b      	mov	fp, r3
 800523e:	0023      	movs	r3, r4
 8005240:	33cc      	adds	r3, #204	; 0xcc
 8005242:	8819      	ldrh	r1, [r3, #0]
 8005244:	207c      	movs	r0, #124	; 0x7c
 8005246:	f009 fc75 	bl	800eb34 <__udivsi3>
 800524a:	465b      	mov	r3, fp
 800524c:	4358      	muls	r0, r3
 800524e:	0023      	movs	r3, r4
 8005250:	33c4      	adds	r3, #196	; 0xc4
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	4641      	mov	r1, r8
 8005256:	18c0      	adds	r0, r0, r3
 8005258:	4653      	mov	r3, sl
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6809      	ldr	r1, [r1, #0]
 800525e:	469a      	mov	sl, r3
 8005260:	4482      	add	sl, r0
 8005262:	464b      	mov	r3, r9
 8005264:	4652      	mov	r2, sl
 8005266:	2001      	movs	r0, #1
 8005268:	f008 fc00 	bl	800da6c <acc_probes_execute_uint16>
 800526c:	883f      	ldrh	r7, [r7, #0]
 800526e:	4650      	mov	r0, sl
 8005270:	0039      	movs	r1, r7
 8005272:	f7ff ff49 	bl	8005108 <acc_alg_cca_calculate>
 8005276:	2301      	movs	r3, #1
 8005278:	6068      	str	r0, [r5, #4]
 800527a:	490f      	ldr	r1, [pc, #60]	; (80052b8 <process_data.lto_priv.293+0xa8>)
 800527c:	4698      	mov	r8, r3
 800527e:	f009 fe33 	bl	800eee8 <__aeabi_fcmpgt>
 8005282:	2800      	cmp	r0, #0
 8005284:	d100      	bne.n	8005288 <process_data.lto_priv.293+0x78>
 8005286:	4680      	mov	r8, r0
 8005288:	4643      	mov	r3, r8
 800528a:	702b      	strb	r3, [r5, #0]
 800528c:	2300      	movs	r3, #0
 800528e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005290:	429a      	cmp	r2, r3
 8005292:	d103      	bne.n	800529c <process_data.lto_priv.293+0x8c>
 8005294:	34c0      	adds	r4, #192	; 0xc0
 8005296:	7822      	ldrb	r2, [r4, #0]
 8005298:	3301      	adds	r3, #1
 800529a:	4053      	eors	r3, r2
 800529c:	2201      	movs	r2, #1
 800529e:	4013      	ands	r3, r2
 80052a0:	722b      	strb	r3, [r5, #8]
 80052a2:	6833      	ldr	r3, [r6, #0]
 80052a4:	1bdf      	subs	r7, r3, r7
 80052a6:	6037      	str	r7, [r6, #0]
 80052a8:	2001      	movs	r0, #1
 80052aa:	bc3c      	pop	{r2, r3, r4, r5}
 80052ac:	4690      	mov	r8, r2
 80052ae:	4699      	mov	r9, r3
 80052b0:	46a2      	mov	sl, r4
 80052b2:	46ab      	mov	fp, r5
 80052b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	42640000 	.word	0x42640000

080052bc <acc_sensor_protocol_r2_transfer_data>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	0016      	movs	r6, r2
 80052c0:	0005      	movs	r5, r0
 80052c2:	f005 fc65 	bl	800ab90 <internal_buffer_processed_read.constprop.30>
 80052c6:	0004      	movs	r4, r0
 80052c8:	0033      	movs	r3, r6
 80052ca:	0002      	movs	r2, r0
 80052cc:	0029      	movs	r1, r5
 80052ce:	2000      	movs	r0, #0
 80052d0:	f008 fbcc 	bl	800da6c <acc_probes_execute_uint16>
 80052d4:	0020      	movs	r0, r4
 80052d6:	bd70      	pop	{r4, r5, r6, pc}

080052d8 <acc_sensor_protocol_r2_wait_for_sync_start>:
 80052d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80052da:	ae03      	add	r6, sp, #12
 80052dc:	0032      	movs	r2, r6
 80052de:	0005      	movs	r5, r0
 80052e0:	f007 fd6c 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80052e4:	1e04      	subs	r4, r0, #0
 80052e6:	d108      	bne.n	80052fa <acc_sensor_protocol_r2_wait_for_sync_start+0x22>
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 80052ea:	4a0b      	ldr	r2, [pc, #44]	; (8005318 <acc_sensor_protocol_r2_wait_for_sync_start+0x40>)
 80052ec:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80052ee:	490b      	ldr	r1, [pc, #44]	; (800531c <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 80052f0:	002b      	movs	r3, r5
 80052f2:	47b0      	blx	r6
 80052f4:	0020      	movs	r0, r4
 80052f6:	b004      	add	sp, #16
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	8873      	ldrh	r3, [r6, #2]
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d0f9      	beq.n	80052f4 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4b04      	ldr	r3, [pc, #16]	; (8005314 <acc_sensor_protocol_r2_wait_for_sync_start+0x3c>)
 8005304:	4a06      	ldr	r2, [pc, #24]	; (8005320 <acc_sensor_protocol_r2_wait_for_sync_start+0x48>)
 8005306:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005308:	4904      	ldr	r1, [pc, #16]	; (800531c <acc_sensor_protocol_r2_wait_for_sync_start+0x44>)
 800530a:	002b      	movs	r3, r5
 800530c:	2000      	movs	r0, #0
 800530e:	47a0      	blx	r4
 8005310:	2400      	movs	r4, #0
 8005312:	e7ef      	b.n	80052f4 <acc_sensor_protocol_r2_wait_for_sync_start+0x1c>
 8005314:	200002b8 	.word	0x200002b8
 8005318:	0801c5fe 	.word	0x0801c5fe
 800531c:	0801c5ee 	.word	0x0801c5ee
 8005320:	0801c630 	.word	0x0801c630

08005324 <acc_sensor_protocol_r2_wait_for_radar_data>:
 8005324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	ac03      	add	r4, sp, #12
 800532a:	0017      	movs	r7, r2
 800532c:	0022      	movs	r2, r4
 800532e:	0006      	movs	r6, r0
 8005330:	f007 fd44 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005334:	1e05      	subs	r5, r0, #0
 8005336:	d032      	beq.n	800539e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005338:	7822      	ldrb	r2, [r4, #0]
 800533a:	8863      	ldrh	r3, [r4, #2]
 800533c:	2a06      	cmp	r2, #6
 800533e:	d125      	bne.n	800538c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8005340:	051a      	lsls	r2, r3, #20
 8005342:	d523      	bpl.n	800538c <acc_sensor_protocol_r2_wait_for_radar_data+0x68>
 8005344:	2280      	movs	r2, #128	; 0x80
 8005346:	00d2      	lsls	r2, r2, #3
 8005348:	4013      	ands	r3, r2
 800534a:	d12b      	bne.n	80053a4 <acc_sensor_protocol_r2_wait_for_radar_data+0x80>
 800534c:	2f00      	cmp	r7, #0
 800534e:	d000      	beq.n	8005352 <acc_sensor_protocol_r2_wait_for_radar_data+0x2e>
 8005350:	703b      	strb	r3, [r7, #0]
 8005352:	8863      	ldrh	r3, [r4, #2]
 8005354:	05db      	lsls	r3, r3, #23
 8005356:	d50a      	bpl.n	800536e <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8005358:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 800535a:	001a      	movs	r2, r3
 800535c:	3230      	adds	r2, #48	; 0x30
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	2a03      	cmp	r2, #3
 8005362:	d904      	bls.n	800536e <acc_sensor_protocol_r2_wait_for_radar_data+0x4a>
 8005364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005366:	4a13      	ldr	r2, [pc, #76]	; (80053b4 <acc_sensor_protocol_r2_wait_for_radar_data+0x90>)
 8005368:	4913      	ldr	r1, [pc, #76]	; (80053b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 800536a:	2004      	movs	r0, #4
 800536c:	4798      	blx	r3
 800536e:	8863      	ldrh	r3, [r4, #2]
 8005370:	059b      	lsls	r3, r3, #22
 8005372:	d514      	bpl.n	800539e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8005376:	001a      	movs	r2, r3
 8005378:	3230      	adds	r2, #48	; 0x30
 800537a:	7812      	ldrb	r2, [r2, #0]
 800537c:	2a03      	cmp	r2, #3
 800537e:	d90e      	bls.n	800539e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <acc_sensor_protocol_r2_wait_for_radar_data+0x98>)
 8005384:	490c      	ldr	r1, [pc, #48]	; (80053b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8005386:	2004      	movs	r0, #4
 8005388:	4798      	blx	r3
 800538a:	e008      	b.n	800539e <acc_sensor_protocol_r2_wait_for_radar_data+0x7a>
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <acc_sensor_protocol_r2_wait_for_radar_data+0x8c>)
 8005390:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <acc_sensor_protocol_r2_wait_for_radar_data+0x9c>)
 8005392:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8005394:	4908      	ldr	r1, [pc, #32]	; (80053b8 <acc_sensor_protocol_r2_wait_for_radar_data+0x94>)
 8005396:	0033      	movs	r3, r6
 8005398:	2000      	movs	r0, #0
 800539a:	47a0      	blx	r4
 800539c:	2500      	movs	r5, #0
 800539e:	0028      	movs	r0, r5
 80053a0:	b005      	add	sp, #20
 80053a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a4:	0031      	movs	r1, r6
 80053a6:	200f      	movs	r0, #15
 80053a8:	f008 fb54 	bl	800da54 <acc_probes_execute_primitive_probe>
 80053ac:	002b      	movs	r3, r5
 80053ae:	e7cd      	b.n	800534c <acc_sensor_protocol_r2_wait_for_radar_data+0x28>
 80053b0:	200002b8 	.word	0x200002b8
 80053b4:	0801c69a 	.word	0x0801c69a
 80053b8:	0801c5ee 	.word	0x0801c5ee
 80053bc:	0801c6b3 	.word	0x0801c6b3
 80053c0:	0801c66a 	.word	0x0801c66a

080053c4 <acc_sensor_protocol_r2_ack_event>:
 80053c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053c6:	466b      	mov	r3, sp
 80053c8:	1d9c      	adds	r4, r3, #6
 80053ca:	2300      	movs	r3, #0
 80053cc:	0022      	movs	r2, r4
 80053ce:	2138      	movs	r1, #56	; 0x38
 80053d0:	0005      	movs	r5, r0
 80053d2:	8023      	strh	r3, [r4, #0]
 80053d4:	f007 faae 	bl	800c934 <internal_reg_read.lto_priv.623>
 80053d8:	8824      	ldrh	r4, [r4, #0]
 80053da:	2001      	movs	r0, #1
 80053dc:	2c00      	cmp	r4, #0
 80053de:	d10a      	bne.n	80053f6 <acc_sensor_protocol_r2_ack_event+0x32>
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <acc_sensor_protocol_r2_ack_event+0x34>)
 80053e2:	4a06      	ldr	r2, [pc, #24]	; (80053fc <acc_sensor_protocol_r2_ack_event+0x38>)
 80053e4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80053e6:	4906      	ldr	r1, [pc, #24]	; (8005400 <acc_sensor_protocol_r2_ack_event+0x3c>)
 80053e8:	002b      	movs	r3, r5
 80053ea:	0020      	movs	r0, r4
 80053ec:	47b0      	blx	r6
 80053ee:	0028      	movs	r0, r5
 80053f0:	f007 fac7 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 80053f4:	0020      	movs	r0, r4
 80053f6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80053f8:	200002b8 	.word	0x200002b8
 80053fc:	0801c6cb 	.word	0x0801c6cb
 8005400:	0801c5ee 	.word	0x0801c5ee

08005404 <acc_radar_engine_common_get_timeout_ms>:
 8005404:	b510      	push	{r4, lr}
 8005406:	0004      	movs	r4, r0
 8005408:	f7fd fab4 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 800540c:	2801      	cmp	r0, #1
 800540e:	d00c      	beq.n	800542a <acc_radar_engine_common_get_timeout_ms+0x26>
 8005410:	0020      	movs	r0, r4
 8005412:	f7fd fa99 	bl	8002948 <acc_base_configuration_update_rate_get>
 8005416:	1c01      	adds	r1, r0, #0
 8005418:	4805      	ldr	r0, [pc, #20]	; (8005430 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 800541a:	f008 ff47 	bl	800e2ac <__aeabi_fdiv>
 800541e:	4904      	ldr	r1, [pc, #16]	; (8005430 <acc_radar_engine_common_get_timeout_ms+0x2c>)
 8005420:	f008 fdaa 	bl	800df78 <__aeabi_fadd>
 8005424:	f009 fd94 	bl	800ef50 <__aeabi_f2uiz>
 8005428:	bd10      	pop	{r4, pc}
 800542a:	20fa      	movs	r0, #250	; 0xfa
 800542c:	00c0      	lsls	r0, r0, #3
 800542e:	e7fb      	b.n	8005428 <acc_radar_engine_common_get_timeout_ms+0x24>
 8005430:	44fa0000 	.word	0x44fa0000

08005434 <acc_radar_engine_acquire_adc_data>:
 8005434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005436:	4657      	mov	r7, sl
 8005438:	464e      	mov	r6, r9
 800543a:	4645      	mov	r5, r8
 800543c:	46de      	mov	lr, fp
 800543e:	2300      	movs	r3, #0
 8005440:	b5e0      	push	{r5, r6, r7, lr}
 8005442:	0005      	movs	r5, r0
 8005444:	4698      	mov	r8, r3
 8005446:	b08d      	sub	sp, #52	; 0x34
 8005448:	4689      	mov	r9, r1
 800544a:	4945      	ldr	r1, [pc, #276]	; (8005560 <acc_radar_engine_acquire_adc_data+0x12c>)
 800544c:	a806      	add	r0, sp, #24
 800544e:	7093      	strb	r3, [r2, #2]
 8005450:	70d3      	strb	r3, [r2, #3]
 8005452:	8013      	strh	r3, [r2, #0]
 8005454:	7313      	strb	r3, [r2, #12]
 8005456:	7113      	strb	r3, [r2, #4]
 8005458:	6091      	str	r1, [r2, #8]
 800545a:	1d87      	adds	r7, r0, #6
 800545c:	0014      	movs	r4, r2
 800545e:	6828      	ldr	r0, [r5, #0]
 8005460:	aa06      	add	r2, sp, #24
 8005462:	71d3      	strb	r3, [r2, #7]
 8005464:	703b      	strb	r3, [r7, #0]
 8005466:	4682      	mov	sl, r0
 8005468:	7ba8      	ldrb	r0, [r5, #14]
 800546a:	3207      	adds	r2, #7
 800546c:	9000      	str	r0, [sp, #0]
 800546e:	7be8      	ldrb	r0, [r5, #15]
 8005470:	9105      	str	r1, [sp, #20]
 8005472:	9003      	str	r0, [sp, #12]
 8005474:	89a8      	ldrh	r0, [r5, #12]
 8005476:	9202      	str	r2, [sp, #8]
 8005478:	9001      	str	r0, [sp, #4]
 800547a:	6928      	ldr	r0, [r5, #16]
 800547c:	ae09      	add	r6, sp, #36	; 0x24
 800547e:	9004      	str	r0, [sp, #16]
 8005480:	4643      	mov	r3, r8
 8005482:	9a01      	ldr	r2, [sp, #4]
 8005484:	b29b      	uxth	r3, r3
 8005486:	429a      	cmp	r2, r3
 8005488:	d959      	bls.n	800553e <acc_radar_engine_acquire_adc_data+0x10a>
 800548a:	9b00      	ldr	r3, [sp, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00f      	beq.n	80054b0 <acc_radar_engine_acquire_adc_data+0x7c>
 8005490:	69ab      	ldr	r3, [r5, #24]
 8005492:	9a02      	ldr	r2, [sp, #8]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	9904      	ldr	r1, [sp, #16]
 8005498:	4650      	mov	r0, sl
 800549a:	4798      	blx	r3
 800549c:	2800      	cmp	r0, #0
 800549e:	d10e      	bne.n	80054be <acc_radar_engine_acquire_adc_data+0x8a>
 80054a0:	2000      	movs	r0, #0
 80054a2:	b00d      	add	sp, #52	; 0x34
 80054a4:	bc3c      	pop	{r2, r3, r4, r5}
 80054a6:	4690      	mov	r8, r2
 80054a8:	4699      	mov	r9, r3
 80054aa:	46a2      	mov	sl, r4
 80054ac:	46ab      	mov	fp, r5
 80054ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b0:	69ab      	ldr	r3, [r5, #24]
 80054b2:	4650      	mov	r0, sl
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4798      	blx	r3
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d1e9      	bne.n	8005490 <acc_radar_engine_acquire_adc_data+0x5c>
 80054bc:	e7f0      	b.n	80054a0 <acc_radar_engine_acquire_adc_data+0x6c>
 80054be:	9b02      	ldr	r3, [sp, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d100      	bne.n	80054c8 <acc_radar_engine_acquire_adc_data+0x94>
 80054c6:	78a3      	ldrb	r3, [r4, #2]
 80054c8:	70a3      	strb	r3, [r4, #2]
 80054ca:	69ab      	ldr	r3, [r5, #24]
 80054cc:	003a      	movs	r2, r7
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	4649      	mov	r1, r9
 80054d2:	0028      	movs	r0, r5
 80054d4:	4798      	blx	r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	7033      	strb	r3, [r6, #0]
 80054da:	7233      	strb	r3, [r6, #8]
 80054dc:	69ab      	ldr	r3, [r5, #24]
 80054de:	9a05      	ldr	r2, [sp, #20]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	9008      	str	r0, [sp, #32]
 80054e4:	6072      	str	r2, [r6, #4]
 80054e6:	469b      	mov	fp, r3
 80054e8:	aa08      	add	r2, sp, #32
 80054ea:	0033      	movs	r3, r6
 80054ec:	4649      	mov	r1, r9
 80054ee:	0028      	movs	r0, r5
 80054f0:	47d8      	blx	fp
 80054f2:	7a33      	ldrb	r3, [r6, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d100      	bne.n	80054fa <acc_radar_engine_acquire_adc_data+0xc6>
 80054f8:	7b23      	ldrb	r3, [r4, #12]
 80054fa:	7323      	strb	r3, [r4, #12]
 80054fc:	7833      	ldrb	r3, [r6, #0]
 80054fe:	469b      	mov	fp, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d100      	bne.n	8005506 <acc_radar_engine_acquire_adc_data+0xd2>
 8005504:	7923      	ldrb	r3, [r4, #4]
 8005506:	7123      	strb	r3, [r4, #4]
 8005508:	68a1      	ldr	r1, [r4, #8]
 800550a:	6870      	ldr	r0, [r6, #4]
 800550c:	f00d fd62 	bl	8012fd4 <fmaxf>
 8005510:	783b      	ldrb	r3, [r7, #0]
 8005512:	60a0      	str	r0, [r4, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d100      	bne.n	800551a <acc_radar_engine_acquire_adc_data+0xe6>
 8005518:	78e3      	ldrb	r3, [r4, #3]
 800551a:	9a08      	ldr	r2, [sp, #32]
 800551c:	70e3      	strb	r3, [r4, #3]
 800551e:	4694      	mov	ip, r2
 8005520:	8823      	ldrh	r3, [r4, #0]
 8005522:	4659      	mov	r1, fp
 8005524:	4463      	add	r3, ip
 8005526:	8023      	strh	r3, [r4, #0]
 8005528:	69ab      	ldr	r3, [r5, #24]
 800552a:	0028      	movs	r0, r5
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	4798      	blx	r3
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d006      	beq.n	8005544 <acc_radar_engine_acquire_adc_data+0x110>
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	3b01      	subs	r3, #1
 800553a:	4598      	cmp	r8, r3
 800553c:	d102      	bne.n	8005544 <acc_radar_engine_acquire_adc_data+0x110>
 800553e:	464b      	mov	r3, r9
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	e7ae      	b.n	80054a2 <acc_radar_engine_acquire_adc_data+0x6e>
 8005544:	9b00      	ldr	r3, [sp, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <acc_radar_engine_acquire_adc_data+0x11e>
 800554a:	2301      	movs	r3, #1
 800554c:	469c      	mov	ip, r3
 800554e:	44e0      	add	r8, ip
 8005550:	e796      	b.n	8005480 <acc_radar_engine_acquire_adc_data+0x4c>
 8005552:	69ab      	ldr	r3, [r5, #24]
 8005554:	4650      	mov	r0, sl
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	4798      	blx	r3
 800555a:	2800      	cmp	r0, #0
 800555c:	d1f5      	bne.n	800554a <acc_radar_engine_acquire_adc_data+0x116>
 800555e:	e79f      	b.n	80054a0 <acc_radar_engine_acquire_adc_data+0x6c>
 8005560:	ff800000 	.word	0xff800000

08005564 <update_program.lto_priv.292>:
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	6945      	ldr	r5, [r0, #20]
 8005568:	2401      	movs	r4, #1
 800556a:	002b      	movs	r3, r5
 800556c:	33ba      	adds	r3, #186	; 0xba
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4319      	orrs	r1, r3
 8005572:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005574:	404c      	eors	r4, r1
 8005576:	425a      	negs	r2, r3
 8005578:	4153      	adcs	r3, r2
 800557a:	428b      	cmp	r3, r1
 800557c:	d006      	beq.n	800558c <update_program.lto_priv.292+0x28>
 800557e:	9400      	str	r4, [sp, #0]
 8005580:	23ef      	movs	r3, #239	; 0xef
 8005582:	4a04      	ldr	r2, [pc, #16]	; (8005594 <update_program.lto_priv.292+0x30>)
 8005584:	4904      	ldr	r1, [pc, #16]	; (8005598 <update_program.lto_priv.292+0x34>)
 8005586:	6800      	ldr	r0, [r0, #0]
 8005588:	f005 fb64 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800558c:	642c      	str	r4, [r5, #64]	; 0x40
 800558e:	2001      	movs	r0, #1
 8005590:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	08016788 	.word	0x08016788
 8005598:	08017cc8 	.word	0x08017cc8

0800559c <transfer_data.lto_priv.296>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	000d      	movs	r5, r1
 80055a0:	2100      	movs	r1, #0
 80055a2:	6943      	ldr	r3, [r0, #20]
 80055a4:	7011      	strb	r1, [r2, #0]
 80055a6:	001a      	movs	r2, r3
 80055a8:	33b8      	adds	r3, #184	; 0xb8
 80055aa:	32b4      	adds	r2, #180	; 0xb4
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	8814      	ldrh	r4, [r2, #0]
 80055b0:	6829      	ldr	r1, [r5, #0]
 80055b2:	18e4      	adds	r4, r4, r3
 80055b4:	0022      	movs	r2, r4
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	f7ff fe80 	bl	80052bc <acc_sensor_protocol_r2_transfer_data>
 80055bc:	0062      	lsls	r2, r4, #1
 80055be:	0001      	movs	r1, r0
 80055c0:	6828      	ldr	r0, [r5, #0]
 80055c2:	f00f ff78 	bl	80154b6 <memmove>
 80055c6:	0020      	movs	r0, r4
 80055c8:	bd70      	pop	{r4, r5, r6, pc}

080055ca <acc_radar_engine_sparse_create>:
 80055ca:	22cd      	movs	r2, #205	; 0xcd
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	0052      	lsls	r2, r2, #1
 80055d0:	0004      	movs	r4, r0
 80055d2:	000d      	movs	r5, r1
 80055d4:	20bc      	movs	r0, #188	; 0xbc
 80055d6:	490f      	ldr	r1, [pc, #60]	; (8005614 <acc_radar_engine_sparse_create+0x4a>)
 80055d8:	f005 face 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 80055dc:	2300      	movs	r3, #0
 80055de:	6160      	str	r0, [r4, #20]
 80055e0:	4298      	cmp	r0, r3
 80055e2:	d014      	beq.n	800560e <acc_radar_engine_sparse_create+0x44>
 80055e4:	0028      	movs	r0, r5
 80055e6:	f7fd f9f6 	bl	80029d6 <acc_base_configuration_sensor_get>
 80055ea:	6020      	str	r0, [r4, #0]
 80055ec:	0028      	movs	r0, r5
 80055ee:	f7fc fc27 	bl	8001e40 <acc_base_configuration_asynchronous_measurement_get>
 80055f2:	73a0      	strb	r0, [r4, #14]
 80055f4:	0028      	movs	r0, r5
 80055f6:	f7fd f9e4 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 80055fa:	4243      	negs	r3, r0
 80055fc:	4158      	adcs	r0, r3
 80055fe:	73e0      	strb	r0, [r4, #15]
 8005600:	0028      	movs	r0, r5
 8005602:	f7ff feff 	bl	8005404 <acc_radar_engine_common_get_timeout_ms>
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <acc_radar_engine_sparse_create+0x4e>)
 8005608:	6120      	str	r0, [r4, #16]
 800560a:	61a3      	str	r3, [r4, #24]
 800560c:	2301      	movs	r3, #1
 800560e:	0018      	movs	r0, r3
 8005610:	bd70      	pop	{r4, r5, r6, pc}
 8005612:	46c0      	nop			; (mov r8, r8)
 8005614:	0801c6fc 	.word	0x0801c6fc
 8005618:	080155a0 	.word	0x080155a0

0800561c <acc_radar_engine_linear_create>:
 800561c:	222c      	movs	r2, #44	; 0x2c
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	32ff      	adds	r2, #255	; 0xff
 8005622:	0004      	movs	r4, r0
 8005624:	000d      	movs	r5, r1
 8005626:	20d4      	movs	r0, #212	; 0xd4
 8005628:	490f      	ldr	r1, [pc, #60]	; (8005668 <acc_radar_engine_linear_create+0x4c>)
 800562a:	f005 faa5 	bl	800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>
 800562e:	2300      	movs	r3, #0
 8005630:	6160      	str	r0, [r4, #20]
 8005632:	4298      	cmp	r0, r3
 8005634:	d015      	beq.n	8005662 <acc_radar_engine_linear_create+0x46>
 8005636:	0028      	movs	r0, r5
 8005638:	f7fd f9cd 	bl	80029d6 <acc_base_configuration_sensor_get>
 800563c:	6020      	str	r0, [r4, #0]
 800563e:	0028      	movs	r0, r5
 8005640:	f7fc fbfe 	bl	8001e40 <acc_base_configuration_asynchronous_measurement_get>
 8005644:	73a0      	strb	r0, [r4, #14]
 8005646:	0028      	movs	r0, r5
 8005648:	f7fd f9bb 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 800564c:	4243      	negs	r3, r0
 800564e:	4158      	adcs	r0, r3
 8005650:	73e0      	strb	r0, [r4, #15]
 8005652:	0028      	movs	r0, r5
 8005654:	f7ff fed6 	bl	8005404 <acc_radar_engine_common_get_timeout_ms>
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <acc_radar_engine_linear_create+0x50>)
 800565a:	6120      	str	r0, [r4, #16]
 800565c:	3338      	adds	r3, #56	; 0x38
 800565e:	61a3      	str	r3, [r4, #24]
 8005660:	2301      	movs	r3, #1
 8005662:	0018      	movs	r0, r3
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	0801c72e 	.word	0x0801c72e
 800566c:	080155a0 	.word	0x080155a0

08005670 <transfer_data.lto_priv.295>:
 8005670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005672:	4657      	mov	r7, sl
 8005674:	464e      	mov	r6, r9
 8005676:	4645      	mov	r5, r8
 8005678:	46de      	mov	lr, fp
 800567a:	6944      	ldr	r4, [r0, #20]
 800567c:	b5e0      	push	{r5, r6, r7, lr}
 800567e:	0023      	movs	r3, r4
 8005680:	0025      	movs	r5, r4
 8005682:	b08d      	sub	sp, #52	; 0x34
 8005684:	9204      	str	r2, [sp, #16]
 8005686:	33c2      	adds	r3, #194	; 0xc2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	0006      	movs	r6, r0
 800568c:	468a      	mov	sl, r1
 800568e:	35c6      	adds	r5, #198	; 0xc6
 8005690:	2b00      	cmp	r3, #0
 8005692:	d100      	bne.n	8005696 <transfer_data.lto_priv.295+0x26>
 8005694:	802b      	strh	r3, [r5, #0]
 8005696:	23cc      	movs	r3, #204	; 0xcc
 8005698:	469b      	mov	fp, r3
 800569a:	44a3      	add	fp, r4
 800569c:	465b      	mov	r3, fp
 800569e:	207c      	movs	r0, #124	; 0x7c
 80056a0:	8819      	ldrh	r1, [r3, #0]
 80056a2:	f009 fa47 	bl	800eb34 <__udivsi3>
 80056a6:	23c8      	movs	r3, #200	; 0xc8
 80056a8:	4699      	mov	r9, r3
 80056aa:	44a1      	add	r9, r4
 80056ac:	464b      	mov	r3, r9
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	a906      	add	r1, sp, #24
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4358      	muls	r0, r3
 80056b6:	0023      	movs	r3, r4
 80056b8:	4680      	mov	r8, r0
 80056ba:	33ce      	adds	r3, #206	; 0xce
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	0020      	movs	r0, r4
 80056c0:	4498      	add	r8, r3
 80056c2:	f007 fcf1 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 80056c6:	9b06      	ldr	r3, [sp, #24]
 80056c8:	8829      	ldrh	r1, [r5, #0]
 80056ca:	4443      	add	r3, r8
 80056cc:	001a      	movs	r2, r3
 80056ce:	4653      	mov	r3, sl
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6830      	ldr	r0, [r6, #0]
 80056d4:	469c      	mov	ip, r3
 80056d6:	4461      	add	r1, ip
 80056d8:	f7ff fdf0 	bl	80052bc <acc_sensor_protocol_r2_transfer_data>
 80056dc:	0023      	movs	r3, r4
 80056de:	33ad      	adds	r3, #173	; 0xad
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	0006      	movs	r6, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d128      	bne.n	800573a <transfer_data.lto_priv.295+0xca>
 80056e8:	2300      	movs	r3, #0
 80056ea:	9a04      	ldr	r2, [sp, #16]
 80056ec:	a906      	add	r1, sp, #24
 80056ee:	7013      	strb	r3, [r2, #0]
 80056f0:	0020      	movs	r0, r4
 80056f2:	f007 fcd9 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 80056f6:	4643      	mov	r3, r8
 80056f8:	4650      	mov	r0, sl
 80056fa:	005a      	lsls	r2, r3, #1
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	0059      	lsls	r1, r3, #1
 8005702:	882b      	ldrh	r3, [r5, #0]
 8005704:	1871      	adds	r1, r6, r1
 8005706:	18c0      	adds	r0, r0, r3
 8005708:	f00f fed5 	bl	80154b6 <memmove>
 800570c:	464b      	mov	r3, r9
 800570e:	882e      	ldrh	r6, [r5, #0]
 8005710:	34c4      	adds	r4, #196	; 0xc4
 8005712:	8026      	strh	r6, [r4, #0]
 8005714:	681c      	ldr	r4, [r3, #0]
 8005716:	465b      	mov	r3, fp
 8005718:	207c      	movs	r0, #124	; 0x7c
 800571a:	8819      	ldrh	r1, [r3, #0]
 800571c:	f009 fa0a 	bl	800eb34 <__udivsi3>
 8005720:	b2a4      	uxth	r4, r4
 8005722:	0064      	lsls	r4, r4, #1
 8005724:	4344      	muls	r4, r0
 8005726:	4640      	mov	r0, r8
 8005728:	1936      	adds	r6, r6, r4
 800572a:	802e      	strh	r6, [r5, #0]
 800572c:	b00d      	add	sp, #52	; 0x34
 800572e:	bc3c      	pop	{r2, r3, r4, r5}
 8005730:	4690      	mov	r8, r2
 8005732:	4699      	mov	r9, r3
 8005734:	46a2      	mov	sl, r4
 8005736:	46ab      	mov	fp, r5
 8005738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573a:	0022      	movs	r2, r4
 800573c:	211f      	movs	r1, #31
 800573e:	32bc      	adds	r2, #188	; 0xbc
 8005740:	6813      	ldr	r3, [r2, #0]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	400b      	ands	r3, r1
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <transfer_data.lto_priv.295+0x1d8>)
 800574a:	0011      	movs	r1, r2
 800574c:	3130      	adds	r1, #48	; 0x30
 800574e:	7809      	ldrb	r1, [r1, #0]
 8005750:	2903      	cmp	r1, #3
 8005752:	d904      	bls.n	800575e <transfer_data.lto_priv.295+0xee>
 8005754:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005756:	493d      	ldr	r1, [pc, #244]	; (800584c <transfer_data.lto_priv.295+0x1dc>)
 8005758:	4a3d      	ldr	r2, [pc, #244]	; (8005850 <transfer_data.lto_priv.295+0x1e0>)
 800575a:	2004      	movs	r0, #4
 800575c:	47b8      	blx	r7
 800575e:	6a23      	ldr	r3, [r4, #32]
 8005760:	4a3c      	ldr	r2, [pc, #240]	; (8005854 <transfer_data.lto_priv.295+0x1e4>)
 8005762:	b29b      	uxth	r3, r3
 8005764:	005b      	lsls	r3, r3, #1
 8005766:	3270      	adds	r2, #112	; 0x70
 8005768:	5e98      	ldrsh	r0, [r3, r2]
 800576a:	f009 fde5 	bl	800f338 <__aeabi_i2f>
 800576e:	1c07      	adds	r7, r0, #0
 8005770:	8830      	ldrh	r0, [r6, #0]
 8005772:	f009 fe2b 	bl	800f3cc <__aeabi_ui2f>
 8005776:	21de      	movs	r1, #222	; 0xde
 8005778:	0589      	lsls	r1, r1, #22
 800577a:	f008 fea9 	bl	800e4d0 <__aeabi_fmul>
 800577e:	21fc      	movs	r1, #252	; 0xfc
 8005780:	0589      	lsls	r1, r1, #22
 8005782:	f008 ffd7 	bl	800e734 <__aeabi_fsub>
 8005786:	4934      	ldr	r1, [pc, #208]	; (8005858 <transfer_data.lto_priv.295+0x1e8>)
 8005788:	f008 fea2 	bl	800e4d0 <__aeabi_fmul>
 800578c:	4933      	ldr	r1, [pc, #204]	; (800585c <transfer_data.lto_priv.295+0x1ec>)
 800578e:	f008 fe9f 	bl	800e4d0 <__aeabi_fmul>
 8005792:	1c01      	adds	r1, r0, #0
 8005794:	1c38      	adds	r0, r7, #0
 8005796:	f008 ffcd 	bl	800e734 <__aeabi_fsub>
 800579a:	f009 fdad 	bl	800f2f8 <__aeabi_f2iz>
 800579e:	4a30      	ldr	r2, [pc, #192]	; (8005860 <transfer_data.lto_priv.295+0x1f0>)
 80057a0:	b207      	sxth	r7, r0
 80057a2:	b2bb      	uxth	r3, r7
 80057a4:	189a      	adds	r2, r3, r2
 80057a6:	492f      	ldr	r1, [pc, #188]	; (8005864 <transfer_data.lto_priv.295+0x1f4>)
 80057a8:	b292      	uxth	r2, r2
 80057aa:	428a      	cmp	r2, r1
 80057ac:	d82a      	bhi.n	8005804 <transfer_data.lto_priv.295+0x194>
 80057ae:	2126      	movs	r1, #38	; 0x26
 80057b0:	5e62      	ldrsh	r2, [r4, r1]
 80057b2:	8870      	ldrh	r0, [r6, #2]
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <transfer_data.lto_priv.295+0x1f8>)
 80057b8:	4694      	mov	ip, r2
 80057ba:	22e6      	movs	r2, #230	; 0xe6
 80057bc:	4463      	add	r3, ip
 80057be:	b29b      	uxth	r3, r3
 80057c0:	0052      	lsls	r2, r2, #1
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d924      	bls.n	8005810 <transfer_data.lto_priv.295+0x1a0>
 80057c6:	f009 fe01 	bl	800f3cc <__aeabi_ui2f>
 80057ca:	21de      	movs	r1, #222	; 0xde
 80057cc:	0589      	lsls	r1, r1, #22
 80057ce:	f008 fe7f 	bl	800e4d0 <__aeabi_fmul>
 80057d2:	21fc      	movs	r1, #252	; 0xfc
 80057d4:	0589      	lsls	r1, r1, #22
 80057d6:	f008 ffad 	bl	800e734 <__aeabi_fsub>
 80057da:	491f      	ldr	r1, [pc, #124]	; (8005858 <transfer_data.lto_priv.295+0x1e8>)
 80057dc:	f008 fe78 	bl	800e4d0 <__aeabi_fmul>
 80057e0:	491e      	ldr	r1, [pc, #120]	; (800585c <transfer_data.lto_priv.295+0x1ec>)
 80057e2:	f008 fe75 	bl	800e4d0 <__aeabi_fmul>
 80057e6:	9005      	str	r0, [sp, #20]
 80057e8:	0038      	movs	r0, r7
 80057ea:	f009 fda5 	bl	800f338 <__aeabi_i2f>
 80057ee:	1c01      	adds	r1, r0, #0
 80057f0:	9805      	ldr	r0, [sp, #20]
 80057f2:	f008 fbc1 	bl	800df78 <__aeabi_fadd>
 80057f6:	f009 fd7f 	bl	800f2f8 <__aeabi_f2iz>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	b200      	sxth	r0, r0
 80057fe:	3364      	adds	r3, #100	; 0x64
 8005800:	4298      	cmp	r0, r3
 8005802:	dd05      	ble.n	8005810 <transfer_data.lto_priv.295+0x1a0>
 8005804:	0022      	movs	r2, r4
 8005806:	2301      	movs	r3, #1
 8005808:	32bc      	adds	r2, #188	; 0xbc
 800580a:	6811      	ldr	r1, [r2, #0]
 800580c:	430b      	orrs	r3, r1
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	0023      	movs	r3, r4
 8005812:	33bc      	adds	r3, #188	; 0xbc
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	2a00      	cmp	r2, #0
 800581a:	d111      	bne.n	8005840 <transfer_data.lto_priv.295+0x1d0>
 800581c:	2b02      	cmp	r3, #2
 800581e:	d800      	bhi.n	8005822 <transfer_data.lto_priv.295+0x1b2>
 8005820:	e762      	b.n	80056e8 <transfer_data.lto_priv.295+0x78>
 8005822:	4a09      	ldr	r2, [pc, #36]	; (8005848 <transfer_data.lto_priv.295+0x1d8>)
 8005824:	0011      	movs	r1, r2
 8005826:	3130      	adds	r1, #48	; 0x30
 8005828:	7809      	ldrb	r1, [r1, #0]
 800582a:	2900      	cmp	r1, #0
 800582c:	d006      	beq.n	800583c <transfer_data.lto_priv.295+0x1cc>
 800582e:	2105      	movs	r1, #5
 8005830:	9100      	str	r1, [sp, #0]
 8005832:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005834:	4905      	ldr	r1, [pc, #20]	; (800584c <transfer_data.lto_priv.295+0x1dc>)
 8005836:	4a0d      	ldr	r2, [pc, #52]	; (800586c <transfer_data.lto_priv.295+0x1fc>)
 8005838:	2001      	movs	r0, #1
 800583a:	47b8      	blx	r7
 800583c:	2301      	movs	r3, #1
 800583e:	e754      	b.n	80056ea <transfer_data.lto_priv.295+0x7a>
 8005840:	1e51      	subs	r1, r2, #1
 8005842:	400a      	ands	r2, r1
 8005844:	3301      	adds	r3, #1
 8005846:	e7e7      	b.n	8005818 <transfer_data.lto_priv.295+0x1a8>
 8005848:	200002b8 	.word	0x200002b8
 800584c:	0801c777 	.word	0x0801c777
 8005850:	0801c760 	.word	0x0801c760
 8005854:	080155a0 	.word	0x080155a0
 8005858:	3f99999a 	.word	0x3f99999a
 800585c:	447a0000 	.word	0x447a0000
 8005860:	fffffd12 	.word	0xfffffd12
 8005864:	00000217 	.word	0x00000217
 8005868:	fffffcf4 	.word	0xfffffcf4
 800586c:	0801c788 	.word	0x0801c788

08005870 <inject_data.lto_priv.323.lto_priv.645>:
 8005870:	b510      	push	{r4, lr}
 8005872:	3038      	adds	r0, #56	; 0x38
 8005874:	f008 faa8 	bl	800ddc8 <acc_element_source_adc_inject_data>
 8005878:	bd10      	pop	{r4, pc}

0800587a <inject_data.lto_priv.322.lto_priv.629>:
 800587a:	b510      	push	{r4, lr}
 800587c:	3038      	adds	r0, #56	; 0x38
 800587e:	f008 faa3 	bl	800ddc8 <acc_element_source_adc_inject_data>
 8005882:	bd10      	pop	{r4, pc}

08005884 <produce.lto_priv.325.lto_priv.644>:
 8005884:	b510      	push	{r4, lr}
 8005886:	0004      	movs	r4, r0
 8005888:	3038      	adds	r0, #56	; 0x38
 800588a:	f008 fab1 	bl	800ddf0 <acc_element_source_adc_produce>
 800588e:	2800      	cmp	r0, #0
 8005890:	d10c      	bne.n	80058ac <produce.lto_priv.325.lto_priv.644+0x28>
 8005892:	23e0      	movs	r3, #224	; 0xe0
 8005894:	2201      	movs	r2, #1
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	58e3      	ldr	r3, [r4, r3]
 800589a:	6158      	str	r0, [r3, #20]
 800589c:	7198      	strb	r0, [r3, #6]
 800589e:	715a      	strb	r2, [r3, #5]
 80058a0:	23d2      	movs	r3, #210	; 0xd2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	18e0      	adds	r0, r4, r3
 80058a6:	3304      	adds	r3, #4
 80058a8:	58e3      	ldr	r3, [r4, r3]
 80058aa:	4798      	blx	r3
 80058ac:	bd10      	pop	{r4, pc}

080058ae <produce.lto_priv.324.lto_priv.628>:
 80058ae:	b510      	push	{r4, lr}
 80058b0:	0004      	movs	r4, r0
 80058b2:	3038      	adds	r0, #56	; 0x38
 80058b4:	f008 fa9c 	bl	800ddf0 <acc_element_source_adc_produce>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d10b      	bne.n	80058d4 <produce.lto_priv.324.lto_priv.628+0x26>
 80058bc:	0023      	movs	r3, r4
 80058be:	33f0      	adds	r3, #240	; 0xf0
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	6158      	str	r0, [r3, #20]
 80058c6:	7198      	strb	r0, [r3, #6]
 80058c8:	0020      	movs	r0, r4
 80058ca:	34bc      	adds	r4, #188	; 0xbc
 80058cc:	715a      	strb	r2, [r3, #5]
 80058ce:	30b8      	adds	r0, #184	; 0xb8
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	4798      	blx	r3
 80058d4:	bd10      	pop	{r4, pc}

080058d6 <acc_assert_fail>:
 80058d6:	b513      	push	{r0, r1, r4, lr}
 80058d8:	4a04      	ldr	r2, [pc, #16]	; (80058ec <acc_assert_fail+0x16>)
 80058da:	9100      	str	r1, [sp, #0]
 80058dc:	0003      	movs	r3, r0
 80058de:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80058e0:	4903      	ldr	r1, [pc, #12]	; (80058f0 <acc_assert_fail+0x1a>)
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <acc_assert_fail+0x1e>)
 80058e4:	2000      	movs	r0, #0
 80058e6:	47a0      	blx	r4
 80058e8:	e7fe      	b.n	80058e8 <acc_assert_fail+0x12>
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	200002b8 	.word	0x200002b8
 80058f0:	0801c7d8 	.word	0x0801c7d8
 80058f4:	0801c7c3 	.word	0x0801c7c3

080058f8 <do_phase_compensation_q3_12.lto_priv.259>:
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	4657      	mov	r7, sl
 80058fc:	4645      	mov	r5, r8
 80058fe:	46de      	mov	lr, fp
 8005900:	464e      	mov	r6, r9
 8005902:	b5e0      	push	{r5, r6, r7, lr}
 8005904:	4c6b      	ldr	r4, [pc, #428]	; (8005ab4 <do_phase_compensation_q3_12.lto_priv.259+0x1bc>)
 8005906:	0017      	movs	r7, r2
 8005908:	44a5      	add	sp, r4
 800590a:	9102      	str	r1, [sp, #8]
 800590c:	4698      	mov	r8, r3
 800590e:	2a7c      	cmp	r2, #124	; 0x7c
 8005910:	d816      	bhi.n	8005940 <do_phase_compensation_q3_12.lto_priv.259+0x48>
 8005912:	0093      	lsls	r3, r2, #2
 8005914:	469b      	mov	fp, r3
 8005916:	ab80      	add	r3, sp, #512	; 0x200
 8005918:	445b      	add	r3, fp
 800591a:	3bf7      	subs	r3, #247	; 0xf7
 800591c:	3bff      	subs	r3, #255	; 0xff
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	2300      	movs	r3, #0
 8005922:	0005      	movs	r5, r0
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	9b02      	ldr	r3, [sp, #8]
 8005928:	9a00      	ldr	r2, [sp, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d10c      	bne.n	8005948 <do_phase_compensation_q3_12.lto_priv.259+0x50>
 800592e:	2381      	movs	r3, #129	; 0x81
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	449d      	add	sp, r3
 8005934:	bc3c      	pop	{r2, r3, r4, r5}
 8005936:	4690      	mov	r8, r2
 8005938:	4699      	mov	r9, r3
 800593a:	46a2      	mov	sl, r4
 800593c:	46ab      	mov	fp, r5
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005940:	217d      	movs	r1, #125	; 0x7d
 8005942:	485d      	ldr	r0, [pc, #372]	; (8005ab8 <do_phase_compensation_q3_12.lto_priv.259+0x1c0>)
 8005944:	f7ff ffc7 	bl	80058d6 <acc_assert_fail>
 8005948:	465a      	mov	r2, fp
 800594a:	0029      	movs	r1, r5
 800594c:	a804      	add	r0, sp, #16
 800594e:	f00f fda9 	bl	80154a4 <memcpy>
 8005952:	a980      	add	r1, sp, #512	; 0x200
 8005954:	468c      	mov	ip, r1
 8005956:	2200      	movs	r2, #0
 8005958:	2401      	movs	r4, #1
 800595a:	1e78      	subs	r0, r7, #1
 800595c:	0083      	lsls	r3, r0, #2
 800595e:	4463      	add	r3, ip
 8005960:	3bf1      	subs	r3, #241	; 0xf1
 8005962:	3bff      	subs	r3, #255	; 0xff
 8005964:	9204      	str	r2, [sp, #16]
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	aa04      	add	r2, sp, #16
 800596a:	42a7      	cmp	r7, r4
 800596c:	d80f      	bhi.n	800598e <do_phase_compensation_q3_12.lto_priv.259+0x96>
 800596e:	9a01      	ldr	r2, [sp, #4]
 8005970:	3a04      	subs	r2, #4
 8005972:	3801      	subs	r0, #1
 8005974:	d22e      	bcs.n	80059d4 <do_phase_compensation_q3_12.lto_priv.259+0xdc>
 8005976:	2400      	movs	r4, #0
 8005978:	45a3      	cmp	fp, r4
 800597a:	d148      	bne.n	8005a0e <do_phase_compensation_q3_12.lto_priv.259+0x116>
 800597c:	0029      	movs	r1, r5
 800597e:	2200      	movs	r2, #0
 8005980:	42a2      	cmp	r2, r4
 8005982:	d172      	bne.n	8005a6a <do_phase_compensation_q3_12.lto_priv.259+0x172>
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	18ad      	adds	r5, r5, r2
 8005988:	3301      	adds	r3, #1
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	e7cb      	b.n	8005926 <do_phase_compensation_q3_12.lto_priv.259+0x2e>
 800598e:	2100      	movs	r1, #0
 8005990:	5e53      	ldrsh	r3, [r2, r1]
 8005992:	3401      	adds	r4, #1
 8005994:	469c      	mov	ip, r3
 8005996:	2304      	movs	r3, #4
 8005998:	5ed1      	ldrsh	r1, [r2, r3]
 800599a:	4663      	mov	r3, ip
 800599c:	1ac9      	subs	r1, r1, r3
 800599e:	4643      	mov	r3, r8
 80059a0:	4359      	muls	r1, r3
 80059a2:	17cb      	asrs	r3, r1, #31
 80059a4:	051b      	lsls	r3, r3, #20
 80059a6:	0d1b      	lsrs	r3, r3, #20
 80059a8:	185b      	adds	r3, r3, r1
 80059aa:	131b      	asrs	r3, r3, #12
 80059ac:	4463      	add	r3, ip
 80059ae:	8093      	strh	r3, [r2, #4]
 80059b0:	2102      	movs	r1, #2
 80059b2:	5e53      	ldrsh	r3, [r2, r1]
 80059b4:	3204      	adds	r2, #4
 80059b6:	469c      	mov	ip, r3
 80059b8:	2302      	movs	r3, #2
 80059ba:	5ed1      	ldrsh	r1, [r2, r3]
 80059bc:	4663      	mov	r3, ip
 80059be:	1ac9      	subs	r1, r1, r3
 80059c0:	4643      	mov	r3, r8
 80059c2:	4359      	muls	r1, r3
 80059c4:	17cb      	asrs	r3, r1, #31
 80059c6:	051b      	lsls	r3, r3, #20
 80059c8:	0d1b      	lsrs	r3, r3, #20
 80059ca:	185b      	adds	r3, r3, r1
 80059cc:	131b      	asrs	r3, r3, #12
 80059ce:	4463      	add	r3, ip
 80059d0:	8053      	strh	r3, [r2, #2]
 80059d2:	e7ca      	b.n	800596a <do_phase_compensation_q3_12.lto_priv.259+0x72>
 80059d4:	2306      	movs	r3, #6
 80059d6:	5ed1      	ldrsh	r1, [r2, r3]
 80059d8:	2302      	movs	r3, #2
 80059da:	5ed4      	ldrsh	r4, [r2, r3]
 80059dc:	4643      	mov	r3, r8
 80059de:	1a64      	subs	r4, r4, r1
 80059e0:	435c      	muls	r4, r3
 80059e2:	17e3      	asrs	r3, r4, #31
 80059e4:	051b      	lsls	r3, r3, #20
 80059e6:	0d1b      	lsrs	r3, r3, #20
 80059e8:	191b      	adds	r3, r3, r4
 80059ea:	131b      	asrs	r3, r3, #12
 80059ec:	185b      	adds	r3, r3, r1
 80059ee:	8053      	strh	r3, [r2, #2]
 80059f0:	2308      	movs	r3, #8
 80059f2:	5ed1      	ldrsh	r1, [r2, r3]
 80059f4:	2304      	movs	r3, #4
 80059f6:	5ed4      	ldrsh	r4, [r2, r3]
 80059f8:	4643      	mov	r3, r8
 80059fa:	1a64      	subs	r4, r4, r1
 80059fc:	435c      	muls	r4, r3
 80059fe:	17e3      	asrs	r3, r4, #31
 8005a00:	051b      	lsls	r3, r3, #20
 8005a02:	0d1b      	lsrs	r3, r3, #20
 8005a04:	191b      	adds	r3, r3, r4
 8005a06:	131b      	asrs	r3, r3, #12
 8005a08:	185b      	adds	r3, r3, r1
 8005a0a:	8093      	strh	r3, [r2, #4]
 8005a0c:	e7b0      	b.n	8005970 <do_phase_compensation_q3_12.lto_priv.259+0x78>
 8005a0e:	a904      	add	r1, sp, #16
 8005a10:	468c      	mov	ip, r1
 8005a12:	0022      	movs	r2, r4
 8005a14:	4462      	add	r2, ip
 8005a16:	8850      	ldrh	r0, [r2, #2]
 8005a18:	ab04      	add	r3, sp, #16
 8005a1a:	5b1b      	ldrh	r3, [r3, r4]
 8005a1c:	0400      	lsls	r0, r0, #16
 8005a1e:	4318      	orrs	r0, r3
 8005a20:	f006 ff54 	bl	800c8cc <acc_alg_basic_math_q3_12_complex_scalar_abs>
 8005a24:	4681      	mov	r9, r0
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d01d      	beq.n	8005a66 <do_phase_compensation_q3_12.lto_priv.259+0x16e>
 8005a2a:	ab04      	add	r3, sp, #16
 8005a2c:	5ee0      	ldrsh	r0, [r4, r3]
 8005a2e:	4649      	mov	r1, r9
 8005a30:	0300      	lsls	r0, r0, #12
 8005a32:	f009 f909 	bl	800ec48 <__divsi3>
 8005a36:	aa04      	add	r2, sp, #16
 8005a38:	b203      	sxth	r3, r0
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	469a      	mov	sl, r3
 8005a3e:	0023      	movs	r3, r4
 8005a40:	4463      	add	r3, ip
 8005a42:	2002      	movs	r0, #2
 8005a44:	5e18      	ldrsh	r0, [r3, r0]
 8005a46:	4649      	mov	r1, r9
 8005a48:	0300      	lsls	r0, r0, #12
 8005a4a:	4240      	negs	r0, r0
 8005a4c:	f009 f8fc 	bl	800ec48 <__divsi3>
 8005a50:	b200      	sxth	r0, r0
 8005a52:	aa04      	add	r2, sp, #16
 8005a54:	0023      	movs	r3, r4
 8005a56:	4694      	mov	ip, r2
 8005a58:	4463      	add	r3, ip
 8005a5a:	8058      	strh	r0, [r3, #2]
 8005a5c:	0013      	movs	r3, r2
 8005a5e:	4652      	mov	r2, sl
 8005a60:	52e2      	strh	r2, [r4, r3]
 8005a62:	3404      	adds	r4, #4
 8005a64:	e788      	b.n	8005978 <do_phase_compensation_q3_12.lto_priv.259+0x80>
 8005a66:	4682      	mov	sl, r0
 8005a68:	e7f3      	b.n	8005a52 <do_phase_compensation_q3_12.lto_priv.259+0x15a>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	5e0b      	ldrsh	r3, [r1, r0]
 8005a6e:	4699      	mov	r9, r3
 8005a70:	ab04      	add	r3, sp, #16
 8005a72:	5ed3      	ldrsh	r3, [r2, r3]
 8005a74:	2602      	movs	r6, #2
 8005a76:	5f88      	ldrsh	r0, [r1, r6]
 8005a78:	ae04      	add	r6, sp, #16
 8005a7a:	46b4      	mov	ip, r6
 8005a7c:	4682      	mov	sl, r0
 8005a7e:	0010      	movs	r0, r2
 8005a80:	4460      	add	r0, ip
 8005a82:	2602      	movs	r6, #2
 8005a84:	5f80      	ldrsh	r0, [r0, r6]
 8005a86:	3204      	adds	r2, #4
 8005a88:	4684      	mov	ip, r0
 8005a8a:	4648      	mov	r0, r9
 8005a8c:	4358      	muls	r0, r3
 8005a8e:	4666      	mov	r6, ip
 8005a90:	9003      	str	r0, [sp, #12]
 8005a92:	4650      	mov	r0, sl
 8005a94:	4370      	muls	r0, r6
 8005a96:	9e03      	ldr	r6, [sp, #12]
 8005a98:	1a30      	subs	r0, r6, r0
 8005a9a:	1300      	asrs	r0, r0, #12
 8005a9c:	8008      	strh	r0, [r1, #0]
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	4666      	mov	r6, ip
 8005aa2:	4343      	muls	r3, r0
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	4370      	muls	r0, r6
 8005aa8:	181b      	adds	r3, r3, r0
 8005aaa:	131b      	asrs	r3, r3, #12
 8005aac:	804b      	strh	r3, [r1, #2]
 8005aae:	3104      	adds	r1, #4
 8005ab0:	e766      	b.n	8005980 <do_phase_compensation_q3_12.lto_priv.259+0x88>
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	fffffdfc 	.word	0xfffffdfc
 8005ab8:	0801c7e3 	.word	0x0801c7e3

08005abc <get_package_range_coarse_max>:
 8005abc:	0003      	movs	r3, r0
 8005abe:	b570      	push	{r4, r5, r6, lr}
 8005ac0:	33cc      	adds	r3, #204	; 0xcc
 8005ac2:	881d      	ldrh	r5, [r3, #0]
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	2d00      	cmp	r5, #0
 8005ac8:	d104      	bne.n	8005ad4 <get_package_range_coarse_max+0x18>
 8005aca:	2158      	movs	r1, #88	; 0x58
 8005acc:	480c      	ldr	r0, [pc, #48]	; (8005b00 <get_package_range_coarse_max+0x44>)
 8005ace:	31ff      	adds	r1, #255	; 0xff
 8005ad0:	f7ff ff01 	bl	80058d6 <acc_assert_fail>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	2480      	movs	r4, #128	; 0x80
 8005ad8:	33ce      	adds	r3, #206	; 0xce
 8005ada:	4669      	mov	r1, sp
 8005adc:	881e      	ldrh	r6, [r3, #0]
 8005ade:	f007 fae3 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 8005ae2:	9b00      	ldr	r3, [sp, #0]
 8005ae4:	0029      	movs	r1, r5
 8005ae6:	0124      	lsls	r4, r4, #4
 8005ae8:	207c      	movs	r0, #124	; 0x7c
 8005aea:	1ae4      	subs	r4, r4, r3
 8005aec:	f009 f822 	bl	800eb34 <__udivsi3>
 8005af0:	1ba4      	subs	r4, r4, r6
 8005af2:	0001      	movs	r1, r0
 8005af4:	0020      	movs	r0, r4
 8005af6:	f009 f81d 	bl	800eb34 <__udivsi3>
 8005afa:	b006      	add	sp, #24
 8005afc:	bd70      	pop	{r4, r5, r6, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	0801c72e 	.word	0x0801c72e

08005b04 <coarse_count_for_next_package>:
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	0004      	movs	r4, r0
 8005b08:	6940      	ldr	r0, [r0, #20]
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	0002      	movs	r2, r0
 8005b0e:	32c2      	adds	r2, #194	; 0xc2
 8005b10:	3b01      	subs	r3, #1
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d002      	beq.n	8005b20 <coarse_count_for_next_package+0x1c>
 8005b1a:	f7ff ffcf 	bl	8005abc <get_package_range_coarse_max>
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}
 8005b20:	8965      	ldrh	r5, [r4, #10]
 8005b22:	f7ff ffcb 	bl	8005abc <get_package_range_coarse_max>
 8005b26:	0001      	movs	r1, r0
 8005b28:	0028      	movs	r0, r5
 8005b2a:	f009 f889 	bl	800ec40 <__aeabi_uidivmod>
 8005b2e:	1e08      	subs	r0, r1, #0
 8005b30:	d1f5      	bne.n	8005b1e <coarse_count_for_next_package+0x1a>
 8005b32:	6960      	ldr	r0, [r4, #20]
 8005b34:	e7f1      	b.n	8005b1a <coarse_count_for_next_package+0x16>

08005b36 <update_program.lto_priv.291>:
 8005b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b38:	4657      	mov	r7, sl
 8005b3a:	464e      	mov	r6, r9
 8005b3c:	4645      	mov	r5, r8
 8005b3e:	46de      	mov	lr, fp
 8005b40:	b5e0      	push	{r5, r6, r7, lr}
 8005b42:	6944      	ldr	r4, [r0, #20]
 8005b44:	000f      	movs	r7, r1
 8005b46:	0006      	movs	r6, r0
 8005b48:	8981      	ldrh	r1, [r0, #12]
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	4288      	cmp	r0, r1
 8005b4e:	419b      	sbcs	r3, r3
 8005b50:	425b      	negs	r3, r3
 8005b52:	4698      	mov	r8, r3
 8005b54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005b56:	b085      	sub	sp, #20
 8005b58:	425a      	negs	r2, r3
 8005b5a:	4153      	adcs	r3, r2
 8005b5c:	22c0      	movs	r2, #192	; 0xc0
 8005b5e:	4691      	mov	r9, r2
 8005b60:	44a1      	add	r9, r4
 8005b62:	464a      	mov	r2, r9
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	001d      	movs	r5, r3
 8005b68:	7812      	ldrb	r2, [r2, #0]
 8005b6a:	433a      	orrs	r2, r7
 8005b6c:	4055      	eors	r5, r2
 8005b6e:	46aa      	mov	sl, r5
 8005b70:	4281      	cmp	r1, r0
 8005b72:	d808      	bhi.n	8005b86 <update_program.lto_priv.291+0x50>
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d136      	bne.n	8005be6 <update_program.lto_priv.291+0xb0>
 8005b78:	b005      	add	sp, #20
 8005b7a:	bc3c      	pop	{r2, r3, r4, r5}
 8005b7c:	4690      	mov	r8, r2
 8005b7e:	4699      	mov	r9, r3
 8005b80:	46a2      	mov	sl, r4
 8005b82:	46ab      	mov	fp, r5
 8005b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b86:	0025      	movs	r5, r4
 8005b88:	35c2      	adds	r5, #194	; 0xc2
 8005b8a:	8828      	ldrh	r0, [r5, #0]
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	b280      	uxth	r0, r0
 8005b90:	f009 f856 	bl	800ec40 <__aeabi_uidivmod>
 8005b94:	b28b      	uxth	r3, r1
 8005b96:	469b      	mov	fp, r3
 8005b98:	802b      	strh	r3, [r5, #0]
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	5ef5      	ldrsh	r5, [r6, r3]
 8005ba0:	f7ff ff8c 	bl	8005abc <get_package_range_coarse_max>
 8005ba4:	465b      	mov	r3, fp
 8005ba6:	4358      	muls	r0, r3
 8005ba8:	1945      	adds	r5, r0, r5
 8005baa:	0030      	movs	r0, r6
 8005bac:	f7ff ffaa 	bl	8005b04 <coarse_count_for_next_package>
 8005bb0:	0023      	movs	r3, r4
 8005bb2:	33c8      	adds	r3, #200	; 0xc8
 8005bb4:	6018      	str	r0, [r3, #0]
 8005bb6:	466b      	mov	r3, sp
 8005bb8:	4642      	mov	r2, r8
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	705a      	strb	r2, [r3, #1]
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	709a      	strb	r2, [r3, #2]
 8005bc2:	464b      	mov	r3, r9
 8005bc4:	3801      	subs	r0, #1
 8005bc6:	9001      	str	r0, [sp, #4]
 8005bc8:	9502      	str	r5, [sp, #8]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	4669      	mov	r1, sp
 8005bce:	431f      	orrs	r7, r3
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	6830      	ldr	r0, [r6, #0]
 8005bd4:	405f      	eors	r7, r3
 8005bd6:	9703      	str	r7, [sp, #12]
 8005bd8:	f007 fa7c 	bl	800d0d4 <acc_cpd_linear_sweep_update_program>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d0cb      	beq.n	8005b78 <update_program.lto_priv.291+0x42>
 8005be0:	9b03      	ldr	r3, [sp, #12]
 8005be2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005be4:	e7c8      	b.n	8005b78 <update_program.lto_priv.291+0x42>
 8005be6:	2000      	movs	r0, #0
 8005be8:	0005      	movs	r5, r0
 8005bea:	e7e4      	b.n	8005bb6 <update_program.lto_priv.291+0x80>

08005bec <acc_sensor_protocol_r2_wait_for_specific_event>:
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	ae03      	add	r6, sp, #12
 8005bf2:	0015      	movs	r5, r2
 8005bf4:	0032      	movs	r2, r6
 8005bf6:	0004      	movs	r4, r0
 8005bf8:	001f      	movs	r7, r3
 8005bfa:	f007 f8df 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d00d      	beq.n	8005c1e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005c02:	7832      	ldrb	r2, [r6, #0]
 8005c04:	42aa      	cmp	r2, r5
 8005c06:	d00c      	beq.n	8005c22 <acc_sensor_protocol_r2_wait_for_specific_event+0x36>
 8005c08:	9200      	str	r2, [sp, #0]
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <acc_sensor_protocol_r2_wait_for_specific_event+0x44>)
 8005c0c:	4a09      	ldr	r2, [pc, #36]	; (8005c34 <acc_sensor_protocol_r2_wait_for_specific_event+0x48>)
 8005c0e:	9501      	str	r5, [sp, #4]
 8005c10:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005c12:	2000      	movs	r0, #0
 8005c14:	3378      	adds	r3, #120	; 0x78
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <acc_sensor_protocol_r2_wait_for_specific_event+0x4c>)
 8005c18:	4908      	ldr	r1, [pc, #32]	; (8005c3c <acc_sensor_protocol_r2_wait_for_specific_event+0x50>)
 8005c1a:	47a0      	blx	r4
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	b005      	add	sp, #20
 8005c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c22:	2f00      	cmp	r7, #0
 8005c24:	d0fb      	beq.n	8005c1e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005c26:	0020      	movs	r0, r4
 8005c28:	f7ff fbcc 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 8005c2c:	e7f7      	b.n	8005c1e <acc_sensor_protocol_r2_wait_for_specific_event+0x32>
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	080155a0 	.word	0x080155a0
 8005c34:	200002b8 	.word	0x200002b8
 8005c38:	0801c816 	.word	0x0801c816
 8005c3c:	0801c5ee 	.word	0x0801c5ee

08005c40 <acc_sensor_protocol_r2_wait_for_hibernate_ready>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	2301      	movs	r3, #1
 8005c44:	220b      	movs	r2, #11
 8005c46:	f7ff ffd1 	bl	8005bec <acc_sensor_protocol_r2_wait_for_specific_event>
 8005c4a:	bd10      	pop	{r4, pc}

08005c4c <acc_sensor_protocol_r2_is_sensor_running>:
 8005c4c:	b513      	push	{r0, r1, r4, lr}
 8005c4e:	466b      	mov	r3, sp
 8005c50:	1d9c      	adds	r4, r3, #6
 8005c52:	2300      	movs	r3, #0
 8005c54:	0022      	movs	r2, r4
 8005c56:	2111      	movs	r1, #17
 8005c58:	8023      	strh	r3, [r4, #0]
 8005c5a:	f006 fe6b 	bl	800c934 <internal_reg_read.lto_priv.623>
 8005c5e:	8820      	ldrh	r0, [r4, #0]
 8005c60:	0540      	lsls	r0, r0, #21
 8005c62:	0fc0      	lsrs	r0, r0, #31
 8005c64:	bd16      	pop	{r1, r2, r4, pc}

08005c66 <acc_sensor_protocol_r2_run_program>:
 8005c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c68:	4d15      	ldr	r5, [pc, #84]	; (8005cc0 <acc_sensor_protocol_r2_run_program+0x5a>)
 8005c6a:	0004      	movs	r4, r0
 8005c6c:	002b      	movs	r3, r5
 8005c6e:	3330      	adds	r3, #48	; 0x30
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	000e      	movs	r6, r1
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d906      	bls.n	8005c86 <acc_sensor_protocol_r2_run_program+0x20>
 8005c78:	9100      	str	r1, [sp, #0]
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <acc_sensor_protocol_r2_run_program+0x5e>)
 8005c7e:	4912      	ldr	r1, [pc, #72]	; (8005cc8 <acc_sensor_protocol_r2_run_program+0x62>)
 8005c80:	2004      	movs	r0, #4
 8005c82:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8005c84:	47b8      	blx	r7
 8005c86:	0020      	movs	r0, r4
 8005c88:	f7ff ffe0 	bl	8005c4c <acc_sensor_protocol_r2_is_sensor_running>
 8005c8c:	1e02      	subs	r2, r0, #0
 8005c8e:	d00a      	beq.n	8005ca6 <acc_sensor_protocol_r2_run_program+0x40>
 8005c90:	0023      	movs	r3, r4
 8005c92:	4a0e      	ldr	r2, [pc, #56]	; (8005ccc <acc_sensor_protocol_r2_run_program+0x66>)
 8005c94:	490c      	ldr	r1, [pc, #48]	; (8005cc8 <acc_sensor_protocol_r2_run_program+0x62>)
 8005c96:	2000      	movs	r0, #0
 8005c98:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8005c9a:	47a8      	blx	r5
 8005c9c:	0020      	movs	r0, r4
 8005c9e:	f006 fe70 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ca6:	2110      	movs	r1, #16
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f004 ffc5 	bl	800ac38 <acc_sensor_reg_write>
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	00d2      	lsls	r2, r2, #3
 8005cb2:	0020      	movs	r0, r4
 8005cb4:	4332      	orrs	r2, r6
 8005cb6:	2110      	movs	r1, #16
 8005cb8:	f004 ffbe 	bl	800ac38 <acc_sensor_reg_write>
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	e7f1      	b.n	8005ca4 <acc_sensor_protocol_r2_run_program+0x3e>
 8005cc0:	200002b8 	.word	0x200002b8
 8005cc4:	0801c841 	.word	0x0801c841
 8005cc8:	0801c5ee 	.word	0x0801c5ee
 8005ccc:	0801c864 	.word	0x0801c864

08005cd0 <start.lto_priv.297>:
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cd2:	464f      	mov	r7, r9
 8005cd4:	46d6      	mov	lr, sl
 8005cd6:	4646      	mov	r6, r8
 8005cd8:	6944      	ldr	r4, [r0, #20]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	0022      	movs	r2, r4
 8005cde:	b5c0      	push	{r6, r7, lr}
 8005ce0:	32c2      	adds	r2, #194	; 0xc2
 8005ce2:	8013      	strh	r3, [r2, #0]
 8005ce4:	8053      	strh	r3, [r2, #2]
 8005ce6:	8093      	strh	r3, [r2, #4]
 8005ce8:	3a16      	subs	r2, #22
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	b084      	sub	sp, #16
 8005cee:	4692      	mov	sl, r2
 8005cf0:	0022      	movs	r2, r4
 8005cf2:	32b4      	adds	r2, #180	; 0xb4
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	0007      	movs	r7, r0
 8005cf8:	4691      	mov	r9, r2
 8005cfa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005cfc:	000d      	movs	r5, r1
 8005cfe:	4690      	mov	r8, r2
 8005d00:	464a      	mov	r2, r9
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d003      	beq.n	8005d0e <start.lto_priv.297+0x3e>
 8005d06:	4652      	mov	r2, sl
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d000      	beq.n	8005d0e <start.lto_priv.297+0x3e>
 8005d0c:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005d0e:	0038      	movs	r0, r7
 8005d10:	f7ff fef8 	bl	8005b04 <coarse_count_for_next_package>
 8005d14:	0023      	movs	r3, r4
 8005d16:	4e2c      	ldr	r6, [pc, #176]	; (8005dc8 <start.lto_priv.297+0xf8>)
 8005d18:	33c8      	adds	r3, #200	; 0xc8
 8005d1a:	6018      	str	r0, [r3, #0]
 8005d1c:	0033      	movs	r3, r6
 8005d1e:	3330      	adds	r3, #48	; 0x30
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d904      	bls.n	8005d30 <start.lto_priv.297+0x60>
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <start.lto_priv.297+0xfc>)
 8005d28:	4929      	ldr	r1, [pc, #164]	; (8005dd0 <start.lto_priv.297+0x100>)
 8005d2a:	2004      	movs	r0, #4
 8005d2c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005d2e:	4798      	blx	r3
 8005d30:	cd06      	ldmia	r5!, {r1, r2}
 8005d32:	0023      	movs	r3, r4
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f007 fa05 	bl	800d144 <acc_cpd_linear_sweep_load_program>
 8005d3a:	1e05      	subs	r5, r0, #0
 8005d3c:	d10a      	bne.n	8005d54 <start.lto_priv.297+0x84>
 8005d3e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005d40:	4a24      	ldr	r2, [pc, #144]	; (8005dd4 <start.lto_priv.297+0x104>)
 8005d42:	4923      	ldr	r1, [pc, #140]	; (8005dd0 <start.lto_priv.297+0x100>)
 8005d44:	4798      	blx	r3
 8005d46:	0028      	movs	r0, r5
 8005d48:	b004      	add	sp, #16
 8005d4a:	bc1c      	pop	{r2, r3, r4}
 8005d4c:	4690      	mov	r8, r2
 8005d4e:	4699      	mov	r9, r3
 8005d50:	46a2      	mov	sl, r4
 8005d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d54:	4920      	ldr	r1, [pc, #128]	; (8005dd8 <start.lto_priv.297+0x108>)
 8005d56:	6838      	ldr	r0, [r7, #0]
 8005d58:	f7ff ff85 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 8005d5c:	1e05      	subs	r5, r0, #0
 8005d5e:	d101      	bne.n	8005d64 <start.lto_priv.297+0x94>
 8005d60:	2500      	movs	r5, #0
 8005d62:	e7f0      	b.n	8005d46 <start.lto_priv.297+0x76>
 8005d64:	4653      	mov	r3, sl
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d023      	beq.n	8005db2 <start.lto_priv.297+0xe2>
 8005d6a:	6939      	ldr	r1, [r7, #16]
 8005d6c:	6838      	ldr	r0, [r7, #0]
 8005d6e:	f7ff fab3 	bl	80052d8 <acc_sensor_protocol_r2_wait_for_sync_start>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d0f4      	beq.n	8005d60 <start.lto_priv.297+0x90>
 8005d76:	0033      	movs	r3, r6
 8005d78:	3330      	adds	r3, #48	; 0x30
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d904      	bls.n	8005d8a <start.lto_priv.297+0xba>
 8005d80:	4a16      	ldr	r2, [pc, #88]	; (8005ddc <start.lto_priv.297+0x10c>)
 8005d82:	4913      	ldr	r1, [pc, #76]	; (8005dd0 <start.lto_priv.297+0x100>)
 8005d84:	2002      	movs	r0, #2
 8005d86:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005d88:	4798      	blx	r3
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d010      	beq.n	8005db2 <start.lto_priv.297+0xe2>
 8005d90:	2300      	movs	r3, #0
 8005d92:	466a      	mov	r2, sp
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	7013      	strb	r3, [r2, #0]
 8005d98:	7053      	strb	r3, [r2, #1]
 8005d9a:	9302      	str	r3, [sp, #8]
 8005d9c:	4643      	mov	r3, r8
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4669      	mov	r1, sp
 8005da2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8005da4:	6838      	ldr	r0, [r7, #0]
 8005da6:	708a      	strb	r2, [r1, #2]
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	f007 f993 	bl	800d0d4 <acc_cpd_linear_sweep_update_program>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0d6      	beq.n	8005d60 <start.lto_priv.297+0x90>
 8005db2:	0033      	movs	r3, r6
 8005db4:	3330      	adds	r3, #48	; 0x30
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d9c4      	bls.n	8005d46 <start.lto_priv.297+0x76>
 8005dbc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005dbe:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <start.lto_priv.297+0x110>)
 8005dc0:	4903      	ldr	r1, [pc, #12]	; (8005dd0 <start.lto_priv.297+0x100>)
 8005dc2:	2004      	movs	r0, #4
 8005dc4:	4798      	blx	r3
 8005dc6:	e7be      	b.n	8005d46 <start.lto_priv.297+0x76>
 8005dc8:	200002b8 	.word	0x200002b8
 8005dcc:	0801c893 	.word	0x0801c893
 8005dd0:	0801c8b8 	.word	0x0801c8b8
 8005dd4:	0801c8cc 	.word	0x0801c8cc
 8005dd8:	0000023a 	.word	0x0000023a
 8005ddc:	0801c8e6 	.word	0x0801c8e6
 8005de0:	0801c90a 	.word	0x0801c90a

08005de4 <measure_noise.lto_priv.284>:
 8005de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005de6:	464e      	mov	r6, r9
 8005de8:	46de      	mov	lr, fp
 8005dea:	4657      	mov	r7, sl
 8005dec:	4645      	mov	r5, r8
 8005dee:	b5e0      	push	{r5, r6, r7, lr}
 8005df0:	4e4a      	ldr	r6, [pc, #296]	; (8005f1c <measure_noise.lto_priv.284+0x138>)
 8005df2:	b0b9      	sub	sp, #228	; 0xe4
 8005df4:	0033      	movs	r3, r6
 8005df6:	9201      	str	r2, [sp, #4]
 8005df8:	3330      	adds	r3, #48	; 0x30
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	0004      	movs	r4, r0
 8005dfe:	4689      	mov	r9, r1
 8005e00:	2b03      	cmp	r3, #3
 8005e02:	d904      	bls.n	8005e0e <measure_noise.lto_priv.284+0x2a>
 8005e04:	4a46      	ldr	r2, [pc, #280]	; (8005f20 <measure_noise.lto_priv.284+0x13c>)
 8005e06:	4947      	ldr	r1, [pc, #284]	; (8005f24 <measure_noise.lto_priv.284+0x140>)
 8005e08:	2004      	movs	r0, #4
 8005e0a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005e0c:	4798      	blx	r3
 8005e0e:	6967      	ldr	r7, [r4, #20]
 8005e10:	22bc      	movs	r2, #188	; 0xbc
 8005e12:	0039      	movs	r1, r7
 8005e14:	a809      	add	r0, sp, #36	; 0x24
 8005e16:	6825      	ldr	r5, [r4, #0]
 8005e18:	f00f fb44 	bl	80154a4 <memcpy>
 8005e1c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8005e1e:	2400      	movs	r4, #0
 8005e20:	4698      	mov	r8, r3
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	3b01      	subs	r3, #1
 8005e26:	932e      	str	r3, [sp, #184]	; 0xb8
 8005e28:	2301      	movs	r3, #1
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	931f      	str	r3, [sp, #124]	; 0x7c
 8005e2e:	ab34      	add	r3, sp, #208	; 0xd0
 8005e30:	701c      	strb	r4, [r3, #0]
 8005e32:	003b      	movs	r3, r7
 8005e34:	922f      	str	r2, [sp, #188]	; 0xbc
 8005e36:	4649      	mov	r1, r9
 8005e38:	464a      	mov	r2, r9
 8005e3a:	9424      	str	r4, [sp, #144]	; 0x90
 8005e3c:	941e      	str	r4, [sp, #120]	; 0x78
 8005e3e:	9436      	str	r4, [sp, #216]	; 0xd8
 8005e40:	33cc      	adds	r3, #204	; 0xcc
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	6852      	ldr	r2, [r2, #4]
 8005e46:	6809      	ldr	r1, [r1, #0]
 8005e48:	469b      	mov	fp, r3
 8005e4a:	0028      	movs	r0, r5
 8005e4c:	ab09      	add	r3, sp, #36	; 0x24
 8005e4e:	f007 f979 	bl	800d144 <acc_cpd_linear_sweep_load_program>
 8005e52:	4935      	ldr	r1, [pc, #212]	; (8005f28 <measure_noise.lto_priv.284+0x144>)
 8005e54:	0028      	movs	r0, r5
 8005e56:	f7ff ff06 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 8005e5a:	21fa      	movs	r1, #250	; 0xfa
 8005e5c:	aa02      	add	r2, sp, #8
 8005e5e:	00c9      	lsls	r1, r1, #3
 8005e60:	0028      	movs	r0, r5
 8005e62:	f006 ffab 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 8005e66:	4682      	mov	sl, r0
 8005e68:	42a0      	cmp	r0, r4
 8005e6a:	d040      	beq.n	8005eee <measure_noise.lto_priv.284+0x10a>
 8005e6c:	4643      	mov	r3, r8
 8005e6e:	049b      	lsls	r3, r3, #18
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	4698      	mov	r8, r3
 8005e74:	4659      	mov	r1, fp
 8005e76:	207c      	movs	r0, #124	; 0x7c
 8005e78:	f008 fe5c 	bl	800eb34 <__udivsi3>
 8005e7c:	4643      	mov	r3, r8
 8005e7e:	4343      	muls	r3, r0
 8005e80:	4698      	mov	r8, r3
 8005e82:	464b      	mov	r3, r9
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	a903      	add	r1, sp, #12
 8005e88:	4699      	mov	r9, r3
 8005e8a:	0038      	movs	r0, r7
 8005e8c:	f007 f90c 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 8005e90:	9b03      	ldr	r3, [sp, #12]
 8005e92:	4649      	mov	r1, r9
 8005e94:	4443      	add	r3, r8
 8005e96:	001a      	movs	r2, r3
 8005e98:	0028      	movs	r0, r5
 8005e9a:	f7ff fa0f 	bl	80052bc <acc_sensor_protocol_r2_transfer_data>
 8005e9e:	4681      	mov	r9, r0
 8005ea0:	0028      	movs	r0, r5
 8005ea2:	f007 f83d 	bl	800cf20 <acc_sensor_protocol_r2_stop.constprop.25>
 8005ea6:	0038      	movs	r0, r7
 8005ea8:	a903      	add	r1, sp, #12
 8005eaa:	f007 f8fd 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 8005eae:	9b03      	ldr	r3, [sp, #12]
 8005eb0:	0020      	movs	r0, r4
 8005eb2:	005d      	lsls	r5, r3, #1
 8005eb4:	230e      	movs	r3, #14
 8005eb6:	444d      	add	r5, r9
 8005eb8:	4598      	cmp	r8, r3
 8005eba:	d820      	bhi.n	8005efe <measure_noise.lto_priv.284+0x11a>
 8005ebc:	4644      	mov	r4, r8
 8005ebe:	3c0e      	subs	r4, #14
 8005ec0:	0021      	movs	r1, r4
 8005ec2:	f008 fe37 	bl	800eb34 <__udivsi3>
 8005ec6:	220e      	movs	r2, #14
 8005ec8:	0001      	movs	r1, r0
 8005eca:	2000      	movs	r0, #0
 8005ecc:	4590      	cmp	r8, r2
 8005ece:	d81b      	bhi.n	8005f08 <measure_noise.lto_priv.284+0x124>
 8005ed0:	0021      	movs	r1, r4
 8005ed2:	f008 fe2f 	bl	800eb34 <__udivsi3>
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	8018      	strh	r0, [r3, #0]
 8005eda:	0033      	movs	r3, r6
 8005edc:	3330      	adds	r3, #48	; 0x30
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d904      	bls.n	8005eee <measure_noise.lto_priv.284+0x10a>
 8005ee4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <measure_noise.lto_priv.284+0x148>)
 8005ee8:	490e      	ldr	r1, [pc, #56]	; (8005f24 <measure_noise.lto_priv.284+0x140>)
 8005eea:	2004      	movs	r0, #4
 8005eec:	4798      	blx	r3
 8005eee:	4650      	mov	r0, sl
 8005ef0:	b039      	add	sp, #228	; 0xe4
 8005ef2:	bc3c      	pop	{r2, r3, r4, r5}
 8005ef4:	4690      	mov	r8, r2
 8005ef6:	4699      	mov	r9, r3
 8005ef8:	46a2      	mov	sl, r4
 8005efa:	46ab      	mov	fp, r5
 8005efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efe:	005a      	lsls	r2, r3, #1
 8005f00:	5aaa      	ldrh	r2, [r5, r2]
 8005f02:	3301      	adds	r3, #1
 8005f04:	1880      	adds	r0, r0, r2
 8005f06:	e7d7      	b.n	8005eb8 <measure_noise.lto_priv.284+0xd4>
 8005f08:	0053      	lsls	r3, r2, #1
 8005f0a:	5aeb      	ldrh	r3, [r5, r3]
 8005f0c:	3201      	adds	r2, #1
 8005f0e:	1a5b      	subs	r3, r3, r1
 8005f10:	17df      	asrs	r7, r3, #31
 8005f12:	19db      	adds	r3, r3, r7
 8005f14:	407b      	eors	r3, r7
 8005f16:	18c0      	adds	r0, r0, r3
 8005f18:	e7d8      	b.n	8005ecc <measure_noise.lto_priv.284+0xe8>
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	200002b8 	.word	0x200002b8
 8005f20:	0801c92d 	.word	0x0801c92d
 8005f24:	0801c8b8 	.word	0x0801c8b8
 8005f28:	0000023a 	.word	0x0000023a
 8005f2c:	0801c94e 	.word	0x0801c94e

08005f30 <acc_sensor_manager_hibernate_enter.lto_priv.256>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005f34:	6985      	ldr	r5, [r0, #24]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	6841      	ldr	r1, [r0, #4]
 8005f3a:	0028      	movs	r0, r5
 8005f3c:	4798      	blx	r3
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <acc_sensor_manager_hibernate_enter.lto_priv.256+0x2c>)
 8005f40:	1e04      	subs	r4, r0, #0
 8005f42:	d105      	bne.n	8005f50 <acc_sensor_manager_hibernate_enter.lto_priv.256+0x20>
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	4a06      	ldr	r2, [pc, #24]	; (8005f60 <acc_sensor_manager_hibernate_enter.lto_priv.256+0x30>)
 8005f48:	4906      	ldr	r1, [pc, #24]	; (8005f64 <acc_sensor_manager_hibernate_enter.lto_priv.256+0x34>)
 8005f4a:	4798      	blx	r3
 8005f4c:	0020      	movs	r0, r4
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0fa      	beq.n	8005f4c <acc_sensor_manager_hibernate_enter.lto_priv.256+0x1c>
 8005f56:	0028      	movs	r0, r5
 8005f58:	4798      	blx	r3
 8005f5a:	e7f7      	b.n	8005f4c <acc_sensor_manager_hibernate_enter.lto_priv.256+0x1c>
 8005f5c:	200002b8 	.word	0x200002b8
 8005f60:	0801c96d 	.word	0x0801c96d
 8005f64:	0801c98d 	.word	0x0801c98d

08005f68 <acc_rss_integration_mem_free>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <acc_rss_integration_mem_free+0xc>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	4798      	blx	r3
 8005f70:	bd10      	pop	{r4, pc}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	200002b8 	.word	0x200002b8

08005f78 <destroy.lto_priv.316>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	0004      	movs	r4, r0
 8005f7c:	6940      	ldr	r0, [r0, #20]
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d003      	beq.n	8005f8a <destroy.lto_priv.316+0x12>
 8005f82:	f7ff fff1 	bl	8005f68 <acc_rss_integration_mem_free>
 8005f86:	2300      	movs	r3, #0
 8005f88:	6163      	str	r3, [r4, #20]
 8005f8a:	bd10      	pop	{r4, pc}

08005f8c <destroy.lto_priv.315>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	0004      	movs	r4, r0
 8005f90:	6940      	ldr	r0, [r0, #20]
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d003      	beq.n	8005f9e <destroy.lto_priv.315+0x12>
 8005f96:	f7ff ffe7 	bl	8005f68 <acc_rss_integration_mem_free>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	6163      	str	r3, [r4, #20]
 8005f9e:	bd10      	pop	{r4, pc}

08005fa0 <disassemble.lto_priv.321.lto_priv.646>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	6804      	ldr	r4, [r0, #0]
 8005fa4:	0005      	movs	r5, r0
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	d00a      	beq.n	8005fc0 <disassemble.lto_priv.321.lto_priv.646+0x20>
 8005faa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005fac:	f7fe ff34 	bl	8004e18 <acc_sensor_manager_release_measurement>
 8005fb0:	23ea      	movs	r3, #234	; 0xea
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	58e0      	ldr	r0, [r4, r3]
 8005fb6:	f7ff ffd7 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fba:	0020      	movs	r0, r4
 8005fbc:	f7ff ffd4 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fc0:	0028      	movs	r0, r5
 8005fc2:	f7ff ffd1 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}

08005fc8 <disassemble.lto_priv.320.lto_priv.630>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	6804      	ldr	r4, [r0, #0]
 8005fcc:	0005      	movs	r5, r0
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	d00a      	beq.n	8005fe8 <disassemble.lto_priv.320.lto_priv.630+0x20>
 8005fd2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005fd4:	f7fe ff20 	bl	8004e18 <acc_sensor_manager_release_measurement>
 8005fd8:	0023      	movs	r3, r4
 8005fda:	33fc      	adds	r3, #252	; 0xfc
 8005fdc:	69d8      	ldr	r0, [r3, #28]
 8005fde:	f7ff ffc3 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fe2:	0020      	movs	r0, r4
 8005fe4:	f7ff ffc0 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fe8:	0028      	movs	r0, r5
 8005fea:	f7ff ffbd 	bl	8005f68 <acc_rss_integration_mem_free>
 8005fee:	bd70      	pop	{r4, r5, r6, pc}

08005ff0 <acc_rss_integration_mem_alloc_debug>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d05      	ldr	r5, [pc, #20]	; (8006008 <acc_rss_integration_mem_alloc_debug+0x18>)
 8005ff4:	68ab      	ldr	r3, [r5, #8]
 8005ff6:	4798      	blx	r3
 8005ff8:	1e04      	subs	r4, r0, #0
 8005ffa:	d103      	bne.n	8006004 <acc_rss_integration_mem_alloc_debug+0x14>
 8005ffc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ffe:	4a03      	ldr	r2, [pc, #12]	; (800600c <acc_rss_integration_mem_alloc_debug+0x1c>)
 8006000:	4903      	ldr	r1, [pc, #12]	; (8006010 <acc_rss_integration_mem_alloc_debug+0x20>)
 8006002:	4798      	blx	r3
 8006004:	0020      	movs	r0, r4
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	200002b8 	.word	0x200002b8
 800600c:	0801c99c 	.word	0x0801c99c
 8006010:	0801d40c 	.word	0x0801d40c

08006014 <acc_rss_integration_sensor_device_transfer>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	001e      	movs	r6, r3
 8006018:	000c      	movs	r4, r1
 800601a:	0015      	movs	r5, r2
 800601c:	000b      	movs	r3, r1
 800601e:	3a01      	subs	r2, #1
 8006020:	d209      	bcs.n	8006036 <acc_rss_integration_sensor_device_transfer+0x22>
 8006022:	4b0a      	ldr	r3, [pc, #40]	; (800604c <acc_rss_integration_sensor_device_transfer+0x38>)
 8006024:	006a      	lsls	r2, r5, #1
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	0021      	movs	r1, r4
 800602a:	4798      	blx	r3
 800602c:	2e00      	cmp	r6, #0
 800602e:	d001      	beq.n	8006034 <acc_rss_integration_sensor_device_transfer+0x20>
 8006030:	3d01      	subs	r5, #1
 8006032:	d205      	bcs.n	8006040 <acc_rss_integration_sensor_device_transfer+0x2c>
 8006034:	bd70      	pop	{r4, r5, r6, pc}
 8006036:	8819      	ldrh	r1, [r3, #0]
 8006038:	ba49      	rev16	r1, r1
 800603a:	8019      	strh	r1, [r3, #0]
 800603c:	3302      	adds	r3, #2
 800603e:	e7ee      	b.n	800601e <acc_rss_integration_sensor_device_transfer+0xa>
 8006040:	8823      	ldrh	r3, [r4, #0]
 8006042:	ba5b      	rev16	r3, r3
 8006044:	8023      	strh	r3, [r4, #0]
 8006046:	3402      	adds	r4, #2
 8006048:	e7f2      	b.n	8006030 <acc_rss_integration_sensor_device_transfer+0x1c>
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	200002b8 	.word	0x200002b8

08006050 <acc_sensor_r2_load_confmem>:
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	4647      	mov	r7, r8
 8006054:	46ce      	mov	lr, r9
 8006056:	1c5c      	adds	r4, r3, #1
 8006058:	4d16      	ldr	r5, [pc, #88]	; (80060b4 <acc_sensor_r2_load_confmem+0x64>)
 800605a:	0063      	lsls	r3, r4, #1
 800605c:	4699      	mov	r9, r3
 800605e:	002b      	movs	r3, r5
 8006060:	b580      	push	{r7, lr}
 8006062:	3330      	adds	r3, #48	; 0x30
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b083      	sub	sp, #12
 8006068:	0006      	movs	r6, r0
 800606a:	4688      	mov	r8, r1
 800606c:	0017      	movs	r7, r2
 800606e:	2b03      	cmp	r3, #3
 8006070:	d906      	bls.n	8006080 <acc_sensor_r2_load_confmem+0x30>
 8006072:	9100      	str	r1, [sp, #0]
 8006074:	0003      	movs	r3, r0
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <acc_sensor_r2_load_confmem+0x68>)
 8006078:	4910      	ldr	r1, [pc, #64]	; (80060bc <acc_sensor_r2_load_confmem+0x6c>)
 800607a:	2004      	movs	r0, #4
 800607c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800607e:	47a0      	blx	r4
 8006080:	686b      	ldr	r3, [r5, #4]
 8006082:	4599      	cmp	r9, r3
 8006084:	d909      	bls.n	800609a <acc_sensor_r2_load_confmem+0x4a>
 8006086:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006088:	4a0d      	ldr	r2, [pc, #52]	; (80060c0 <acc_sensor_r2_load_confmem+0x70>)
 800608a:	490c      	ldr	r1, [pc, #48]	; (80060bc <acc_sensor_r2_load_confmem+0x6c>)
 800608c:	2000      	movs	r0, #0
 800608e:	4798      	blx	r3
 8006090:	b003      	add	sp, #12
 8006092:	bc0c      	pop	{r2, r3}
 8006094:	4690      	mov	r8, r2
 8006096:	4699      	mov	r9, r3
 8006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609a:	21a0      	movs	r1, #160	; 0xa0
 800609c:	4643      	mov	r3, r8
 800609e:	01c9      	lsls	r1, r1, #7
 80060a0:	4319      	orrs	r1, r3
 80060a2:	464b      	mov	r3, r9
 80060a4:	8039      	strh	r1, [r7, #0]
 80060a6:	085a      	lsrs	r2, r3, #1
 80060a8:	0039      	movs	r1, r7
 80060aa:	2300      	movs	r3, #0
 80060ac:	0030      	movs	r0, r6
 80060ae:	f7ff ffb1 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 80060b2:	e7ed      	b.n	8006090 <acc_sensor_r2_load_confmem+0x40>
 80060b4:	200002b8 	.word	0x200002b8
 80060b8:	0801c9aa 	.word	0x0801c9aa
 80060bc:	0801c9d0 	.word	0x0801c9d0
 80060c0:	0801c9da 	.word	0x0801c9da

080060c4 <acc_rss_integration_sensor_device_power_off>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <acc_rss_integration_sensor_device_power_off+0xc>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	4798      	blx	r3
 80060cc:	bd10      	pop	{r4, pc}
 80060ce:	46c0      	nop			; (mov r8, r8)
 80060d0:	200002b8 	.word	0x200002b8

080060d4 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	6985      	ldr	r5, [r0, #24]
 80060d8:	0004      	movs	r4, r0
 80060da:	0028      	movs	r0, r5
 80060dc:	f7fe feb6 	bl	8004e4c <acc_rss_integration_sensor_device_power_on>
 80060e0:	2148      	movs	r1, #72	; 0x48
 80060e2:	4369      	muls	r1, r5
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257+0x48>)
 80060e6:	3948      	subs	r1, #72	; 0x48
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80060ec:	1859      	adds	r1, r3, r1
 80060ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060f0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4798      	blx	r3
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d104      	bne.n	8006104 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257+0x30>
 80060fa:	0028      	movs	r0, r5
 80060fc:	f7ff ffe2 	bl	80060c4 <acc_rss_integration_sensor_device_power_off>
 8006100:	2000      	movs	r0, #0
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	0020      	movs	r0, r4
 8006106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006108:	0031      	movs	r1, r6
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	3018      	adds	r0, #24
 800610e:	4798      	blx	r3
 8006110:	2800      	cmp	r0, #0
 8006112:	d0f2      	beq.n	80060fa <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257+0x26>
 8006114:	2301      	movs	r3, #1
 8006116:	70e3      	strb	r3, [r4, #3]
 8006118:	e7f3      	b.n	8006102 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257+0x2e>
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	200004b8 	.word	0x200004b8

08006120 <acc_rss_integration_get_sensor_reference_frequency>:
 8006120:	b510      	push	{r4, lr}
 8006122:	4b02      	ldr	r3, [pc, #8]	; (800612c <acc_rss_integration_get_sensor_reference_frequency+0xc>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	4798      	blx	r3
 8006128:	bd10      	pop	{r4, pc}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	200002b8 	.word	0x200002b8

08006130 <acc_radar_engine_common_frequency_to_main_clk>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	1c06      	adds	r6, r0, #0
 8006134:	0015      	movs	r5, r2
 8006136:	000c      	movs	r4, r1
 8006138:	f7ff fff2 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 800613c:	1c31      	adds	r1, r6, #0
 800613e:	f008 f8b5 	bl	800e2ac <__aeabi_fdiv>
 8006142:	f008 ff05 	bl	800ef50 <__aeabi_f2uiz>
 8006146:	0c03      	lsrs	r3, r0, #16
 8006148:	b280      	uxth	r0, r0
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	6020      	str	r0, [r4, #0]
 800614e:	bd70      	pop	{r4, r5, r6, pc}

08006150 <calculate_pll_divisors.lto_priv.299>:
 8006150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006152:	0005      	movs	r5, r0
 8006154:	f7ff ffe4 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 8006158:	1c01      	adds	r1, r0, #0
 800615a:	1c06      	adds	r6, r0, #0
 800615c:	4830      	ldr	r0, [pc, #192]	; (8006220 <calculate_pll_divisors.lto_priv.299+0xd0>)
 800615e:	f008 f8a5 	bl	800e2ac <__aeabi_fdiv>
 8006162:	21fc      	movs	r1, #252	; 0xfc
 8006164:	0589      	lsls	r1, r1, #22
 8006166:	f007 ff07 	bl	800df78 <__aeabi_fadd>
 800616a:	f008 fef1 	bl	800ef50 <__aeabi_f2uiz>
 800616e:	492d      	ldr	r1, [pc, #180]	; (8006224 <calculate_pll_divisors.lto_priv.299+0xd4>)
 8006170:	b284      	uxth	r4, r0
 8006172:	1c30      	adds	r0, r6, #0
 8006174:	f008 fade 	bl	800e734 <__aeabi_fsub>
 8006178:	492b      	ldr	r1, [pc, #172]	; (8006228 <calculate_pll_divisors.lto_priv.299+0xd8>)
 800617a:	f008 f9a9 	bl	800e4d0 <__aeabi_fmul>
 800617e:	492b      	ldr	r1, [pc, #172]	; (800622c <calculate_pll_divisors.lto_priv.299+0xdc>)
 8006180:	f007 fefa 	bl	800df78 <__aeabi_fadd>
 8006184:	f008 fee4 	bl	800ef50 <__aeabi_f2uiz>
 8006188:	0023      	movs	r3, r4
 800618a:	3b10      	subs	r3, #16
 800618c:	b29b      	uxth	r3, r3
 800618e:	8128      	strh	r0, [r5, #8]
 8006190:	2bef      	cmp	r3, #239	; 0xef
 8006192:	d92b      	bls.n	80061ec <calculate_pll_divisors.lto_priv.299+0x9c>
 8006194:	4b26      	ldr	r3, [pc, #152]	; (8006230 <calculate_pll_divisors.lto_priv.299+0xe0>)
 8006196:	2100      	movs	r1, #0
 8006198:	1c30      	adds	r0, r6, #0
 800619a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 800619c:	f008 fe90 	bl	800eec0 <__aeabi_fcmplt>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d01f      	beq.n	80061e4 <calculate_pll_divisors.lto_priv.299+0x94>
 80061a4:	4c23      	ldr	r4, [pc, #140]	; (8006234 <calculate_pll_divisors.lto_priv.299+0xe4>)
 80061a6:	4924      	ldr	r1, [pc, #144]	; (8006238 <calculate_pll_divisors.lto_priv.299+0xe8>)
 80061a8:	1c30      	adds	r0, r6, #0
 80061aa:	f008 f991 	bl	800e4d0 <__aeabi_fmul>
 80061ae:	4923      	ldr	r1, [pc, #140]	; (800623c <calculate_pll_divisors.lto_priv.299+0xec>)
 80061b0:	f007 fee2 	bl	800df78 <__aeabi_fadd>
 80061b4:	1c06      	adds	r6, r0, #0
 80061b6:	f008 fecb 	bl	800ef50 <__aeabi_f2uiz>
 80061ba:	0005      	movs	r5, r0
 80061bc:	f009 f906 	bl	800f3cc <__aeabi_ui2f>
 80061c0:	1c01      	adds	r1, r0, #0
 80061c2:	1c30      	adds	r0, r6, #0
 80061c4:	f008 fab6 	bl	800e734 <__aeabi_fsub>
 80061c8:	491d      	ldr	r1, [pc, #116]	; (8006240 <calculate_pll_divisors.lto_priv.299+0xf0>)
 80061ca:	f008 f981 	bl	800e4d0 <__aeabi_fmul>
 80061ce:	f008 febf 	bl	800ef50 <__aeabi_f2uiz>
 80061d2:	9500      	str	r5, [sp, #0]
 80061d4:	9001      	str	r0, [sp, #4]
 80061d6:	0023      	movs	r3, r4
 80061d8:	2000      	movs	r0, #0
 80061da:	4a1a      	ldr	r2, [pc, #104]	; (8006244 <calculate_pll_divisors.lto_priv.299+0xf4>)
 80061dc:	491a      	ldr	r1, [pc, #104]	; (8006248 <calculate_pll_divisors.lto_priv.299+0xf8>)
 80061de:	47b8      	blx	r7
 80061e0:	2000      	movs	r0, #0
 80061e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061e4:	21fe      	movs	r1, #254	; 0xfe
 80061e6:	4c19      	ldr	r4, [pc, #100]	; (800624c <calculate_pll_divisors.lto_priv.299+0xfc>)
 80061e8:	0589      	lsls	r1, r1, #22
 80061ea:	e7dd      	b.n	80061a8 <calculate_pll_divisors.lto_priv.299+0x58>
 80061ec:	2c3f      	cmp	r4, #63	; 0x3f
 80061ee:	d809      	bhi.n	8006204 <calculate_pll_divisors.lto_priv.299+0xb4>
 80061f0:	2200      	movs	r2, #0
 80061f2:	806a      	strh	r2, [r5, #2]
 80061f4:	2c2f      	cmp	r4, #47	; 0x2f
 80061f6:	d900      	bls.n	80061fa <calculate_pll_divisors.lto_priv.299+0xaa>
 80061f8:	0023      	movs	r3, r4
 80061fa:	80ab      	strh	r3, [r5, #4]
 80061fc:	80ea      	strh	r2, [r5, #6]
 80061fe:	802c      	strh	r4, [r5, #0]
 8006200:	2001      	movs	r0, #1
 8006202:	e7ee      	b.n	80061e2 <calculate_pll_divisors.lto_priv.299+0x92>
 8006204:	2301      	movs	r3, #1
 8006206:	806b      	strh	r3, [r5, #2]
 8006208:	08e3      	lsrs	r3, r4, #3
 800620a:	2cbf      	cmp	r4, #191	; 0xbf
 800620c:	d803      	bhi.n	8006216 <calculate_pll_divisors.lto_priv.299+0xc6>
 800620e:	0023      	movs	r3, r4
 8006210:	3b40      	subs	r3, #64	; 0x40
 8006212:	10db      	asrs	r3, r3, #3
 8006214:	b29b      	uxth	r3, r3
 8006216:	80ab      	strh	r3, [r5, #4]
 8006218:	2307      	movs	r3, #7
 800621a:	4023      	ands	r3, r4
 800621c:	80eb      	strh	r3, [r5, #6]
 800621e:	e7ee      	b.n	80061fe <calculate_pll_divisors.lto_priv.299+0xae>
 8006220:	4f1502f9 	.word	0x4f1502f9
 8006224:	4b989680 	.word	0x4b989680
 8006228:	b55b38e8 	.word	0xb55b38e8
 800622c:	427c0000 	.word	0x427c0000
 8006230:	200002b8 	.word	0x200002b8
 8006234:	0801da48 	.word	0x0801da48
 8006238:	bf800000 	.word	0xbf800000
 800623c:	350637bd 	.word	0x350637bd
 8006240:	49742400 	.word	0x49742400
 8006244:	0801c9fa 	.word	0x0801c9fa
 8006248:	0801ca25 	.word	0x0801ca25
 800624c:	0801d973 	.word	0x0801d973

08006250 <set_calibration_context.lto_priv.288>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	680b      	ldr	r3, [r1, #0]
 8006254:	b086      	sub	sp, #24
 8006256:	0004      	movs	r4, r0
 8006258:	000e      	movs	r6, r1
 800625a:	2b06      	cmp	r3, #6
 800625c:	d00a      	beq.n	8006274 <set_calibration_context.lto_priv.288+0x24>
 800625e:	2206      	movs	r2, #6
 8006260:	9200      	str	r2, [sp, #0]
 8006262:	4a0e      	ldr	r2, [pc, #56]	; (800629c <set_calibration_context.lto_priv.288+0x4c>)
 8006264:	2000      	movs	r0, #0
 8006266:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006268:	490d      	ldr	r1, [pc, #52]	; (80062a0 <set_calibration_context.lto_priv.288+0x50>)
 800626a:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <set_calibration_context.lto_priv.288+0x54>)
 800626c:	47a0      	blx	r4
 800626e:	2000      	movs	r0, #0
 8006270:	b006      	add	sp, #24
 8006272:	bd70      	pop	{r4, r5, r6, pc}
 8006274:	ad03      	add	r5, sp, #12
 8006276:	0028      	movs	r0, r5
 8006278:	f7ff ff6a 	bl	8006150 <calculate_pll_divisors.lto_priv.299>
 800627c:	2800      	cmp	r0, #0
 800627e:	d0f7      	beq.n	8006270 <set_calibration_context.lto_priv.288+0x20>
 8006280:	88ab      	ldrh	r3, [r5, #4]
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	88eb      	ldrh	r3, [r5, #6]
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	886b      	ldrh	r3, [r5, #2]
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	892b      	ldrh	r3, [r5, #8]
 800628e:	81a3      	strh	r3, [r4, #12]
 8006290:	88b3      	ldrh	r3, [r6, #4]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	88f3      	ldrh	r3, [r6, #6]
 8006296:	6163      	str	r3, [r4, #20]
 8006298:	e7ea      	b.n	8006270 <set_calibration_context.lto_priv.288+0x20>
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	200002b8 	.word	0x200002b8
 80062a0:	0801ca74 	.word	0x0801ca74
 80062a4:	0801ca36 	.word	0x0801ca36

080062a8 <calibrate.lto_priv.302>:
 80062a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062aa:	b08b      	sub	sp, #44	; 0x2c
 80062ac:	ac02      	add	r4, sp, #8
 80062ae:	6807      	ldr	r7, [r0, #0]
 80062b0:	0020      	movs	r0, r4
 80062b2:	000e      	movs	r6, r1
 80062b4:	0015      	movs	r5, r2
 80062b6:	f7ff ff4b 	bl	8006150 <calculate_pll_divisors.lto_priv.299>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d103      	bne.n	80062c6 <calibrate.lto_priv.302+0x1e>
 80062be:	2400      	movs	r4, #0
 80062c0:	0020      	movs	r0, r4
 80062c2:	b00b      	add	sp, #44	; 0x2c
 80062c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c6:	9705      	str	r7, [sp, #20]
 80062c8:	8863      	ldrh	r3, [r4, #2]
 80062ca:	aa05      	add	r2, sp, #20
 80062cc:	6053      	str	r3, [r2, #4]
 80062ce:	88a3      	ldrh	r3, [r4, #4]
 80062d0:	ce03      	ldmia	r6!, {r0, r1}
 80062d2:	6093      	str	r3, [r2, #8]
 80062d4:	88e3      	ldrh	r3, [r4, #6]
 80062d6:	60d3      	str	r3, [r2, #12]
 80062d8:	8923      	ldrh	r3, [r4, #8]
 80062da:	8213      	strh	r3, [r2, #16]
 80062dc:	466b      	mov	r3, sp
 80062de:	f007 fbd4 	bl	800da8a <acc_cpd_cbank_and_vana_calibration>
 80062e2:	1e04      	subs	r4, r0, #0
 80062e4:	d0eb      	beq.n	80062be <calibrate.lto_priv.302+0x16>
 80062e6:	9b00      	ldr	r3, [sp, #0]
 80062e8:	80ab      	strh	r3, [r5, #4]
 80062ea:	466b      	mov	r3, sp
 80062ec:	791b      	ldrb	r3, [r3, #4]
 80062ee:	80eb      	strh	r3, [r5, #6]
 80062f0:	2306      	movs	r3, #6
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	4b05      	ldr	r3, [pc, #20]	; (800630c <calibrate.lto_priv.302+0x64>)
 80062f6:	001a      	movs	r2, r3
 80062f8:	3230      	adds	r2, #48	; 0x30
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	2a01      	cmp	r2, #1
 80062fe:	d9df      	bls.n	80062c0 <calibrate.lto_priv.302+0x18>
 8006300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006302:	4a03      	ldr	r2, [pc, #12]	; (8006310 <calibrate.lto_priv.302+0x68>)
 8006304:	4903      	ldr	r1, [pc, #12]	; (8006314 <calibrate.lto_priv.302+0x6c>)
 8006306:	2002      	movs	r0, #2
 8006308:	4798      	blx	r3
 800630a:	e7d9      	b.n	80062c0 <calibrate.lto_priv.302+0x18>
 800630c:	200002b8 	.word	0x200002b8
 8006310:	0801ca88 	.word	0x0801ca88
 8006314:	0801ca74 	.word	0x0801ca74

08006318 <set_calibration_context.lto_priv.287>:
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	680b      	ldr	r3, [r1, #0]
 800631c:	b087      	sub	sp, #28
 800631e:	0004      	movs	r4, r0
 8006320:	000d      	movs	r5, r1
 8006322:	2b06      	cmp	r3, #6
 8006324:	d00b      	beq.n	800633e <set_calibration_context.lto_priv.287+0x26>
 8006326:	2206      	movs	r2, #6
 8006328:	9200      	str	r2, [sp, #0]
 800632a:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <set_calibration_context.lto_priv.287+0x9c>)
 800632c:	4922      	ldr	r1, [pc, #136]	; (80063b8 <set_calibration_context.lto_priv.287+0xa0>)
 800632e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006330:	2000      	movs	r0, #0
 8006332:	4a22      	ldr	r2, [pc, #136]	; (80063bc <set_calibration_context.lto_priv.287+0xa4>)
 8006334:	47a0      	blx	r4
 8006336:	2700      	movs	r7, #0
 8006338:	0038      	movs	r0, r7
 800633a:	b007      	add	sp, #28
 800633c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800633e:	ae03      	add	r6, sp, #12
 8006340:	0030      	movs	r0, r6
 8006342:	f7ff ff05 	bl	8006150 <calculate_pll_divisors.lto_priv.299>
 8006346:	1e07      	subs	r7, r0, #0
 8006348:	d0f6      	beq.n	8006338 <set_calibration_context.lto_priv.287+0x20>
 800634a:	88b3      	ldrh	r3, [r6, #4]
 800634c:	6063      	str	r3, [r4, #4]
 800634e:	88f3      	ldrh	r3, [r6, #6]
 8006350:	60a3      	str	r3, [r4, #8]
 8006352:	8873      	ldrh	r3, [r6, #2]
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	8933      	ldrh	r3, [r6, #8]
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	88ab      	ldrh	r3, [r5, #4]
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	88eb      	ldrh	r3, [r5, #6]
 8006360:	6163      	str	r3, [r4, #20]
 8006362:	892b      	ldrh	r3, [r5, #8]
 8006364:	61a3      	str	r3, [r4, #24]
 8006366:	896b      	ldrh	r3, [r5, #10]
 8006368:	61e3      	str	r3, [r4, #28]
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	6223      	str	r3, [r4, #32]
 800636e:	8a2b      	ldrh	r3, [r5, #16]
 8006370:	84a3      	strh	r3, [r4, #36]	; 0x24
 8006372:	8a6b      	ldrh	r3, [r5, #18]
 8006374:	84e3      	strh	r3, [r4, #38]	; 0x26
 8006376:	89ed      	ldrh	r5, [r5, #14]
 8006378:	00ad      	lsls	r5, r5, #2
 800637a:	b2ad      	uxth	r5, r5
 800637c:	0028      	movs	r0, r5
 800637e:	303e      	adds	r0, #62	; 0x3e
 8006380:	b280      	uxth	r0, r0
 8006382:	287b      	cmp	r0, #123	; 0x7b
 8006384:	d912      	bls.n	80063ac <set_calibration_context.lto_priv.287+0x94>
 8006386:	217c      	movs	r1, #124	; 0x7c
 8006388:	f008 fc5a 	bl	800ec40 <__aeabi_uidivmod>
 800638c:	2200      	movs	r2, #0
 800638e:	0028      	movs	r0, r5
 8006390:	2301      	movs	r3, #1
 8006392:	b28d      	uxth	r5, r1
 8006394:	0011      	movs	r1, r2
 8006396:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006398:	6323      	str	r3, [r4, #48]	; 0x30
 800639a:	2003      	movs	r0, #3
 800639c:	6423      	str	r3, [r4, #64]	; 0x40
 800639e:	2300      	movs	r3, #0
 80063a0:	62a5      	str	r5, [r4, #40]	; 0x28
 80063a2:	6360      	str	r0, [r4, #52]	; 0x34
 80063a4:	63a1      	str	r1, [r4, #56]	; 0x38
 80063a6:	63e2      	str	r2, [r4, #60]	; 0x3c
 80063a8:	6463      	str	r3, [r4, #68]	; 0x44
 80063aa:	e7c5      	b.n	8006338 <set_calibration_context.lto_priv.287+0x20>
 80063ac:	2203      	movs	r2, #3
 80063ae:	2101      	movs	r1, #1
 80063b0:	2300      	movs	r3, #0
 80063b2:	e7f0      	b.n	8006396 <set_calibration_context.lto_priv.287+0x7e>
 80063b4:	200002b8 	.word	0x200002b8
 80063b8:	0801c8b8 	.word	0x0801c8b8
 80063bc:	0801ca36 	.word	0x0801ca36

080063c0 <get_pll_freq>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f7ff fead 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 80063c6:	1c01      	adds	r1, r0, #0
 80063c8:	1c04      	adds	r4, r0, #0
 80063ca:	4805      	ldr	r0, [pc, #20]	; (80063e0 <get_pll_freq+0x20>)
 80063cc:	f007 ff6e 	bl	800e2ac <__aeabi_fdiv>
 80063d0:	f00c fe36 	bl	8013040 <roundf>
 80063d4:	1c01      	adds	r1, r0, #0
 80063d6:	1c20      	adds	r0, r4, #0
 80063d8:	f008 f87a 	bl	800e4d0 <__aeabi_fmul>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	4f1502f9 	.word	0x4f1502f9

080063e4 <points_to_meter.lto_priv.303>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	0004      	movs	r4, r0
 80063e8:	f7ff ffea 	bl	80063c0 <get_pll_freq>
 80063ec:	1c05      	adds	r5, r0, #0
 80063ee:	0020      	movs	r0, r4
 80063f0:	f008 ffa2 	bl	800f338 <__aeabi_i2f>
 80063f4:	1c04      	adds	r4, r0, #0
 80063f6:	20fe      	movs	r0, #254	; 0xfe
 80063f8:	1c29      	adds	r1, r5, #0
 80063fa:	0580      	lsls	r0, r0, #22
 80063fc:	f007 ff56 	bl	800e2ac <__aeabi_fdiv>
 8006400:	1c01      	adds	r1, r0, #0
 8006402:	1c20      	adds	r0, r4, #0
 8006404:	f008 f864 	bl	800e4d0 <__aeabi_fmul>
 8006408:	4903      	ldr	r1, [pc, #12]	; (8006418 <points_to_meter.lto_priv.303+0x34>)
 800640a:	f008 f861 	bl	800e4d0 <__aeabi_fmul>
 800640e:	21fc      	movs	r1, #252	; 0xfc
 8006410:	0589      	lsls	r1, r1, #22
 8006412:	f008 f85d 	bl	800e4d0 <__aeabi_fmul>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	4d8ef3c2 	.word	0x4d8ef3c2

0800641c <meter_to_points.lto_priv.307>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	1c04      	adds	r4, r0, #0
 8006420:	f7ff ffce 	bl	80063c0 <get_pll_freq>
 8006424:	1c21      	adds	r1, r4, #0
 8006426:	1c06      	adds	r6, r0, #0
 8006428:	1c20      	adds	r0, r4, #0
 800642a:	f007 fda5 	bl	800df78 <__aeabi_fadd>
 800642e:	1c05      	adds	r5, r0, #0
 8006430:	20fe      	movs	r0, #254	; 0xfe
 8006432:	1c31      	adds	r1, r6, #0
 8006434:	0580      	lsls	r0, r0, #22
 8006436:	f007 ff39 	bl	800e2ac <__aeabi_fdiv>
 800643a:	490c      	ldr	r1, [pc, #48]	; (800646c <meter_to_points.lto_priv.307+0x50>)
 800643c:	f008 f848 	bl	800e4d0 <__aeabi_fmul>
 8006440:	1c01      	adds	r1, r0, #0
 8006442:	1c28      	adds	r0, r5, #0
 8006444:	f007 ff32 	bl	800e2ac <__aeabi_fdiv>
 8006448:	2100      	movs	r1, #0
 800644a:	1c05      	adds	r5, r0, #0
 800644c:	1c20      	adds	r0, r4, #0
 800644e:	f008 fd37 	bl	800eec0 <__aeabi_fcmplt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d107      	bne.n	8006466 <meter_to_points.lto_priv.307+0x4a>
 8006456:	21fc      	movs	r1, #252	; 0xfc
 8006458:	0589      	lsls	r1, r1, #22
 800645a:	1c28      	adds	r0, r5, #0
 800645c:	f007 fd8c 	bl	800df78 <__aeabi_fadd>
 8006460:	f008 ff4a 	bl	800f2f8 <__aeabi_f2iz>
 8006464:	bd70      	pop	{r4, r5, r6, pc}
 8006466:	21bf      	movs	r1, #191	; 0xbf
 8006468:	0609      	lsls	r1, r1, #24
 800646a:	e7f6      	b.n	800645a <meter_to_points.lto_priv.307+0x3e>
 800646c:	4d8ef3c2 	.word	0x4d8ef3c2

08006470 <acc_base_configuration_check.part.6>:
 8006470:	b570      	push	{r4, r5, r6, lr}
 8006472:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8006474:	2d04      	cmp	r5, #4
 8006476:	d908      	bls.n	800648a <acc_base_configuration_check.part.6+0x1a>
 8006478:	4b33      	ldr	r3, [pc, #204]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 800647a:	4a34      	ldr	r2, [pc, #208]	; (800654c <acc_base_configuration_check.part.6+0xdc>)
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	4934      	ldr	r1, [pc, #208]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 8006480:	2000      	movs	r0, #0
 8006482:	4798      	blx	r3
 8006484:	2400      	movs	r4, #0
 8006486:	0020      	movs	r0, r4
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	2d04      	cmp	r5, #4
 800648c:	d113      	bne.n	80064b6 <acc_base_configuration_check.part.6+0x46>
 800648e:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 8006490:	69dc      	ldr	r4, [r3, #28]
 8006492:	2c00      	cmp	r4, #0
 8006494:	d105      	bne.n	80064a2 <acc_base_configuration_check.part.6+0x32>
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <acc_base_configuration_check.part.6+0xe4>)
 800649a:	492d      	ldr	r1, [pc, #180]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 800649c:	0020      	movs	r0, r4
 800649e:	4798      	blx	r3
 80064a0:	e7f1      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 80064a2:	7902      	ldrb	r2, [r0, #4]
 80064a4:	2a03      	cmp	r2, #3
 80064a6:	d106      	bne.n	80064b6 <acc_base_configuration_check.part.6+0x46>
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064aa:	4a2b      	ldr	r2, [pc, #172]	; (8006558 <acc_base_configuration_check.part.6+0xe8>)
 80064ac:	4928      	ldr	r1, [pc, #160]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 80064ae:	2000      	movs	r0, #0
 80064b0:	4798      	blx	r3
 80064b2:	2400      	movs	r4, #0
 80064b4:	e7e7      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 80064b6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80064b8:	2b16      	cmp	r3, #22
 80064ba:	d907      	bls.n	80064cc <acc_base_configuration_check.part.6+0x5c>
 80064bc:	4b22      	ldr	r3, [pc, #136]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <acc_base_configuration_check.part.6+0xec>)
 80064c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c2:	4923      	ldr	r1, [pc, #140]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 80064c4:	2000      	movs	r0, #0
 80064c6:	4798      	blx	r3
 80064c8:	2400      	movs	r4, #0
 80064ca:	e7dc      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 80064cc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80064ce:	3b01      	subs	r3, #1
 80064d0:	2b3e      	cmp	r3, #62	; 0x3e
 80064d2:	d907      	bls.n	80064e4 <acc_base_configuration_check.part.6+0x74>
 80064d4:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 80064d6:	4a22      	ldr	r2, [pc, #136]	; (8006560 <acc_base_configuration_check.part.6+0xf0>)
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	491d      	ldr	r1, [pc, #116]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 80064dc:	2000      	movs	r0, #0
 80064de:	4798      	blx	r3
 80064e0:	2400      	movs	r4, #0
 80064e2:	e7d0      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 80064e4:	7903      	ldrb	r3, [r0, #4]
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	d109      	bne.n	80064fe <acc_base_configuration_check.part.6+0x8e>
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d115      	bne.n	800651a <acc_base_configuration_check.part.6+0xaa>
 80064ee:	4b16      	ldr	r3, [pc, #88]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 80064f0:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <acc_base_configuration_check.part.6+0xf4>)
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 80064f6:	0028      	movs	r0, r5
 80064f8:	4798      	blx	r3
 80064fa:	002c      	movs	r4, r5
 80064fc:	e7c3      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d10b      	bne.n	800651a <acc_base_configuration_check.part.6+0xaa>
 8006502:	0003      	movs	r3, r0
 8006504:	334e      	adds	r3, #78	; 0x4e
 8006506:	781c      	ldrb	r4, [r3, #0]
 8006508:	2c00      	cmp	r4, #0
 800650a:	d106      	bne.n	800651a <acc_base_configuration_check.part.6+0xaa>
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 800650e:	4a16      	ldr	r2, [pc, #88]	; (8006568 <acc_base_configuration_check.part.6+0xf8>)
 8006510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006512:	490f      	ldr	r1, [pc, #60]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 8006514:	0020      	movs	r0, r4
 8006516:	4798      	blx	r3
 8006518:	e7b5      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 800651a:	2304      	movs	r3, #4
 800651c:	439d      	bics	r5, r3
 800651e:	d103      	bne.n	8006528 <acc_base_configuration_check.part.6+0xb8>
 8006520:	0003      	movs	r3, r0
 8006522:	2201      	movs	r2, #1
 8006524:	334e      	adds	r3, #78	; 0x4e
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	3032      	adds	r0, #50	; 0x32
 800652a:	7803      	ldrb	r3, [r0, #0]
 800652c:	2401      	movs	r4, #1
 800652e:	2b06      	cmp	r3, #6
 8006530:	d0a9      	beq.n	8006486 <acc_base_configuration_check.part.6+0x16>
 8006532:	2b09      	cmp	r3, #9
 8006534:	d0a7      	beq.n	8006486 <acc_base_configuration_check.part.6+0x16>
 8006536:	4b04      	ldr	r3, [pc, #16]	; (8006548 <acc_base_configuration_check.part.6+0xd8>)
 8006538:	4a0c      	ldr	r2, [pc, #48]	; (800656c <acc_base_configuration_check.part.6+0xfc>)
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <acc_base_configuration_check.part.6+0xe0>)
 800653e:	2000      	movs	r0, #0
 8006540:	4798      	blx	r3
 8006542:	2400      	movs	r4, #0
 8006544:	e79f      	b.n	8006486 <acc_base_configuration_check.part.6+0x16>
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	200002b8 	.word	0x200002b8
 800654c:	0801caa6 	.word	0x0801caa6
 8006550:	0801cabe 	.word	0x0801cabe
 8006554:	0801cad1 	.word	0x0801cad1
 8006558:	0801cb10 	.word	0x0801cb10
 800655c:	0801cb52 	.word	0x0801cb52
 8006560:	0801cb86 	.word	0x0801cb86
 8006564:	0801cbd8 	.word	0x0801cbd8
 8006568:	0801cc14 	.word	0x0801cc14
 800656c:	0801cc54 	.word	0x0801cc54

08006570 <configuration_is_valid.lto_priv.677>:
 8006570:	b510      	push	{r4, lr}
 8006572:	0004      	movs	r4, r0
 8006574:	2001      	movs	r0, #1
 8006576:	2c00      	cmp	r4, #0
 8006578:	d10a      	bne.n	8006590 <configuration_is_valid.lto_priv.677+0x20>
 800657a:	4a07      	ldr	r2, [pc, #28]	; (8006598 <configuration_is_valid.lto_priv.677+0x28>)
 800657c:	0013      	movs	r3, r2
 800657e:	3330      	adds	r3, #48	; 0x30
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d005      	beq.n	8006592 <configuration_is_valid.lto_priv.677+0x22>
 8006586:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8006588:	4904      	ldr	r1, [pc, #16]	; (800659c <configuration_is_valid.lto_priv.677+0x2c>)
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <configuration_is_valid.lto_priv.677+0x30>)
 800658c:	4798      	blx	r3
 800658e:	0020      	movs	r0, r4
 8006590:	bd10      	pop	{r4, pc}
 8006592:	0018      	movs	r0, r3
 8006594:	e7fc      	b.n	8006590 <configuration_is_valid.lto_priv.677+0x20>
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	200002b8 	.word	0x200002b8
 800659c:	0801cabe 	.word	0x0801cabe
 80065a0:	0801cc68 	.word	0x0801cc68

080065a4 <acc_sensor_manager_prepare_measurement>:
 80065a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065a6:	46de      	mov	lr, fp
 80065a8:	4657      	mov	r7, sl
 80065aa:	464e      	mov	r6, r9
 80065ac:	4645      	mov	r5, r8
 80065ae:	b5e0      	push	{r5, r6, r7, lr}
 80065b0:	0004      	movs	r4, r0
 80065b2:	b089      	sub	sp, #36	; 0x24
 80065b4:	0008      	movs	r0, r1
 80065b6:	000f      	movs	r7, r1
 80065b8:	469a      	mov	sl, r3
 80065ba:	9201      	str	r2, [sp, #4]
 80065bc:	f7fc fa0b 	bl	80029d6 <acc_base_configuration_sensor_get>
 80065c0:	0006      	movs	r6, r0
 80065c2:	0038      	movs	r0, r7
 80065c4:	f7ff ffd4 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80065c8:	2300      	movs	r3, #0
 80065ca:	469b      	mov	fp, r3
 80065cc:	4298      	cmp	r0, r3
 80065ce:	d003      	beq.n	80065d8 <acc_sensor_manager_prepare_measurement+0x34>
 80065d0:	003b      	movs	r3, r7
 80065d2:	334c      	adds	r3, #76	; 0x4c
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	469b      	mov	fp, r3
 80065d8:	2348      	movs	r3, #72	; 0x48
 80065da:	4373      	muls	r3, r6
 80065dc:	3b48      	subs	r3, #72	; 0x48
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	9900      	ldr	r1, [sp, #0]
 80065e2:	4b63      	ldr	r3, [pc, #396]	; (8006770 <acc_sensor_manager_prepare_measurement+0x1cc>)
 80065e4:	468c      	mov	ip, r1
 80065e6:	4698      	mov	r8, r3
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4862      	ldr	r0, [pc, #392]	; (8006774 <acc_sensor_manager_prepare_measurement+0x1d0>)
 80065ec:	4463      	add	r3, ip
 80065ee:	0019      	movs	r1, r3
 80065f0:	001a      	movs	r2, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	3142      	adds	r1, #66	; 0x42
 80065f6:	700b      	strb	r3, [r1, #0]
 80065f8:	4b5f      	ldr	r3, [pc, #380]	; (8006778 <acc_sensor_manager_prepare_measurement+0x1d4>)
 80065fa:	6450      	str	r0, [r2, #68]	; 0x44
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9003      	str	r0, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <acc_sensor_manager_prepare_measurement+0x68>
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d000      	beq.n	800660c <acc_sensor_manager_prepare_measurement+0x68>
 800660a:	e0a7      	b.n	800675c <acc_sensor_manager_prepare_measurement+0x1b8>
 800660c:	4653      	mov	r3, sl
 800660e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006610:	0013      	movs	r3, r2
 8006612:	3341      	adds	r3, #65	; 0x41
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	9302      	str	r3, [sp, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d161      	bne.n	80066e0 <acc_sensor_manager_prepare_measurement+0x13c>
 800661c:	700b      	strb	r3, [r1, #0]
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	0030      	movs	r0, r6
 8006622:	6453      	str	r3, [r2, #68]	; 0x44
 8006624:	f7fe fc12 	bl	8004e4c <acc_rss_integration_sensor_device_power_on>
 8006628:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800662a:	69a0      	ldr	r0, [r4, #24]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4798      	blx	r3
 8006630:	1e05      	subs	r5, r0, #0
 8006632:	d036      	beq.n	80066a2 <acc_sensor_manager_prepare_measurement+0xfe>
 8006634:	0031      	movs	r1, r6
 8006636:	200b      	movs	r0, #11
 8006638:	f007 fa0c 	bl	800da54 <acc_probes_execute_primitive_probe>
 800663c:	ab05      	add	r3, sp, #20
 800663e:	4699      	mov	r9, r3
 8006640:	220c      	movs	r2, #12
 8006642:	9902      	ldr	r1, [sp, #8]
 8006644:	0018      	movs	r0, r3
 8006646:	f00c fb09 	bl	8012c5c <memset>
 800664a:	464b      	mov	r3, r9
 800664c:	9a03      	ldr	r2, [sp, #12]
 800664e:	9900      	ldr	r1, [sp, #0]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	4643      	mov	r3, r8
 8006654:	468c      	mov	ip, r1
 8006656:	0020      	movs	r0, r4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4651      	mov	r1, sl
 800665c:	4463      	add	r3, ip
 800665e:	001a      	movs	r2, r3
 8006660:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006662:	3018      	adds	r0, #24
 8006664:	68dd      	ldr	r5, [r3, #12]
 8006666:	464b      	mov	r3, r9
 8006668:	47a8      	blx	r5
 800666a:	1e05      	subs	r5, r0, #0
 800666c:	d030      	beq.n	80066d0 <acc_sensor_manager_prepare_measurement+0x12c>
 800666e:	9a00      	ldr	r2, [sp, #0]
 8006670:	4643      	mov	r3, r8
 8006672:	4694      	mov	ip, r2
 8006674:	2201      	movs	r2, #1
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4463      	add	r3, ip
 800667a:	3341      	adds	r3, #65	; 0x41
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	4642      	mov	r2, r8
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	4694      	mov	ip, r2
 8006686:	4649      	mov	r1, r9
 8006688:	4463      	add	r3, ip
 800668a:	001a      	movs	r2, r3
 800668c:	7809      	ldrb	r1, [r1, #0]
 800668e:	3242      	adds	r2, #66	; 0x42
 8006690:	7011      	strb	r1, [r2, #0]
 8006692:	464a      	mov	r2, r9
 8006694:	6852      	ldr	r2, [r2, #4]
 8006696:	0031      	movs	r1, r6
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
 800669a:	200c      	movs	r0, #12
 800669c:	f007 f9da 	bl	800da54 <acc_probes_execute_primitive_probe>
 80066a0:	e006      	b.n	80066b0 <acc_sensor_manager_prepare_measurement+0x10c>
 80066a2:	4b36      	ldr	r3, [pc, #216]	; (800677c <acc_sensor_manager_prepare_measurement+0x1d8>)
 80066a4:	4a36      	ldr	r2, [pc, #216]	; (8006780 <acc_sensor_manager_prepare_measurement+0x1dc>)
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	4936      	ldr	r1, [pc, #216]	; (8006784 <acc_sensor_manager_prepare_measurement+0x1e0>)
 80066aa:	4699      	mov	r9, r3
 80066ac:	0033      	movs	r3, r6
 80066ae:	47c8      	blx	r9
 80066b0:	0030      	movs	r0, r6
 80066b2:	f7ff fd07 	bl	80060c4 <acc_rss_integration_sensor_device_power_off>
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	d112      	bne.n	80066e0 <acc_sensor_manager_prepare_measurement+0x13c>
 80066ba:	1d20      	adds	r0, r4, #4
 80066bc:	f7fe fba4 	bl	8004e08 <acc_sweep_manager_release>
 80066c0:	0028      	movs	r0, r5
 80066c2:	b009      	add	sp, #36	; 0x24
 80066c4:	bc3c      	pop	{r2, r3, r4, r5}
 80066c6:	4690      	mov	r8, r2
 80066c8:	4699      	mov	r9, r3
 80066ca:	46a2      	mov	sl, r4
 80066cc:	46ab      	mov	fp, r5
 80066ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d0:	4b2a      	ldr	r3, [pc, #168]	; (800677c <acc_sensor_manager_prepare_measurement+0x1d8>)
 80066d2:	4a2d      	ldr	r2, [pc, #180]	; (8006788 <acc_sensor_manager_prepare_measurement+0x1e4>)
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	492b      	ldr	r1, [pc, #172]	; (8006784 <acc_sensor_manager_prepare_measurement+0x1e0>)
 80066d8:	469a      	mov	sl, r3
 80066da:	0033      	movs	r3, r6
 80066dc:	47d0      	blx	sl
 80066de:	e7ce      	b.n	800667e <acc_sensor_manager_prepare_measurement+0xda>
 80066e0:	465b      	mov	r3, fp
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00e      	beq.n	8006704 <acc_sensor_manager_prepare_measurement+0x160>
 80066e6:	465a      	mov	r2, fp
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	829a      	strh	r2, [r3, #20]
 80066ec:	230e      	movs	r3, #14
 80066ee:	a805      	add	r0, sp, #20
 80066f0:	7003      	strb	r3, [r0, #0]
 80066f2:	2220      	movs	r2, #32
 80066f4:	3b07      	subs	r3, #7
 80066f6:	9901      	ldr	r1, [sp, #4]
 80066f8:	6046      	str	r6, [r0, #4]
 80066fa:	6083      	str	r3, [r0, #8]
 80066fc:	2501      	movs	r5, #1
 80066fe:	f006 fd13 	bl	800d128 <acc_probes_execute>
 8006702:	e7dd      	b.n	80066c0 <acc_sensor_manager_prepare_measurement+0x11c>
 8006704:	0038      	movs	r0, r7
 8006706:	f7fb fba4 	bl	8001e52 <acc_base_configuration_noise_level_normalization_get>
 800670a:	2800      	cmp	r0, #0
 800670c:	d0ee      	beq.n	80066ec <acc_sensor_manager_prepare_measurement+0x148>
 800670e:	2214      	movs	r2, #20
 8006710:	4694      	mov	ip, r2
 8006712:	69a7      	ldr	r7, [r4, #24]
 8006714:	9b01      	ldr	r3, [sp, #4]
 8006716:	0038      	movs	r0, r7
 8006718:	4463      	add	r3, ip
 800671a:	469b      	mov	fp, r3
 800671c:	f7fe fb96 	bl	8004e4c <acc_rss_integration_sensor_device_power_on>
 8006720:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006722:	2148      	movs	r1, #72	; 0x48
 8006724:	469a      	mov	sl, r3
 8006726:	2318      	movs	r3, #24
 8006728:	4699      	mov	r9, r3
 800672a:	4643      	mov	r3, r8
 800672c:	4379      	muls	r1, r7
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3948      	subs	r1, #72	; 0x48
 8006732:	1859      	adds	r1, r3, r1
 8006734:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006736:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4798      	blx	r3
 800673c:	44a1      	add	r9, r4
 800673e:	1e05      	subs	r5, r0, #0
 8006740:	d006      	beq.n	8006750 <acc_sensor_manager_prepare_measurement+0x1ac>
 8006742:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006744:	465a      	mov	r2, fp
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	4651      	mov	r1, sl
 800674a:	4648      	mov	r0, r9
 800674c:	4798      	blx	r3
 800674e:	0005      	movs	r5, r0
 8006750:	0038      	movs	r0, r7
 8006752:	f7ff fcb7 	bl	80060c4 <acc_rss_integration_sensor_device_power_off>
 8006756:	2d00      	cmp	r5, #0
 8006758:	d1c8      	bne.n	80066ec <acc_sensor_manager_prepare_measurement+0x148>
 800675a:	e7ae      	b.n	80066ba <acc_sensor_manager_prepare_measurement+0x116>
 800675c:	4652      	mov	r2, sl
 800675e:	9901      	ldr	r1, [sp, #4]
 8006760:	0038      	movs	r0, r7
 8006762:	4798      	blx	r3
 8006764:	1e05      	subs	r5, r0, #0
 8006766:	d0ab      	beq.n	80066c0 <acc_sensor_manager_prepare_measurement+0x11c>
 8006768:	465b      	mov	r3, fp
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0be      	beq.n	80066ec <acc_sensor_manager_prepare_measurement+0x148>
 800676e:	e7ba      	b.n	80066e6 <acc_sensor_manager_prepare_measurement+0x142>
 8006770:	200004b8 	.word	0x200004b8
 8006774:	ff800000 	.word	0xff800000
 8006778:	200004bc 	.word	0x200004bc
 800677c:	200002b8 	.word	0x200002b8
 8006780:	0801cc83 	.word	0x0801cc83
 8006784:	0801c98d 	.word	0x0801c98d
 8006788:	0801ccbe 	.word	0x0801ccbe

0800678c <acc_sensor_manager_prepare_radar_engine>:
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678e:	464e      	mov	r6, r9
 8006790:	4645      	mov	r5, r8
 8006792:	46de      	mov	lr, fp
 8006794:	4657      	mov	r7, sl
 8006796:	b5e0      	push	{r5, r6, r7, lr}
 8006798:	4699      	mov	r9, r3
 800679a:	1d03      	adds	r3, r0, #4
 800679c:	b093      	sub	sp, #76	; 0x4c
 800679e:	0005      	movs	r5, r0
 80067a0:	000c      	movs	r4, r1
 80067a2:	0018      	movs	r0, r3
 80067a4:	4690      	mov	r8, r2
 80067a6:	2100      	movs	r1, #0
 80067a8:	2234      	movs	r2, #52	; 0x34
 80067aa:	469a      	mov	sl, r3
 80067ac:	f00c fa56 	bl	8012c5c <memset>
 80067b0:	4b57      	ldr	r3, [pc, #348]	; (8006910 <acc_sensor_manager_prepare_radar_engine+0x184>)
 80067b2:	ae0a      	add	r6, sp, #40	; 0x28
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d002      	beq.n	80067c0 <acc_sensor_manager_prepare_radar_engine+0x34>
 80067ba:	681f      	ldr	r7, [r3, #0]
 80067bc:	2f00      	cmp	r7, #0
 80067be:	d17b      	bne.n	80068b8 <acc_sensor_manager_prepare_radar_engine+0x12c>
 80067c0:	0020      	movs	r0, r4
 80067c2:	f7fc f908 	bl	80029d6 <acc_base_configuration_sensor_get>
 80067c6:	4682      	mov	sl, r0
 80067c8:	0020      	movs	r0, r4
 80067ca:	f7fc f8a7 	bl	800291c <acc_base_configuration_wg_duration_get>
 80067ce:	af01      	add	r7, sp, #4
 80067d0:	8038      	strh	r0, [r7, #0]
 80067d2:	0020      	movs	r0, r4
 80067d4:	f7fc f8ad 	bl	8002932 <acc_base_configuration_integrator_get>
 80067d8:	8078      	strh	r0, [r7, #2]
 80067da:	0020      	movs	r0, r4
 80067dc:	f7ff fec8 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80067e0:	2300      	movs	r3, #0
 80067e2:	4298      	cmp	r0, r3
 80067e4:	d001      	beq.n	80067ea <acc_sensor_manager_prepare_radar_engine+0x5e>
 80067e6:	1da3      	adds	r3, r4, #6
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	0020      	movs	r0, r4
 80067ec:	80bb      	strh	r3, [r7, #4]
 80067ee:	f7fc f8d6 	bl	800299e <acc_base_configuration_decrease_tx_emission_get>
 80067f2:	4651      	mov	r1, sl
 80067f4:	80f8      	strh	r0, [r7, #6]
 80067f6:	2304      	movs	r3, #4
 80067f8:	003a      	movs	r2, r7
 80067fa:	2012      	movs	r0, #18
 80067fc:	f007 f936 	bl	800da6c <acc_probes_execute_uint16>
 8006800:	2318      	movs	r3, #24
 8006802:	469a      	mov	sl, r3
 8006804:	44aa      	add	sl, r5
 8006806:	2220      	movs	r2, #32
 8006808:	2100      	movs	r1, #0
 800680a:	4650      	mov	r0, sl
 800680c:	f00c fa26 	bl	8012c5c <memset>
 8006810:	0021      	movs	r1, r4
 8006812:	4650      	mov	r0, sl
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	4798      	blx	r3
 8006818:	4683      	mov	fp, r0
 800681a:	2800      	cmp	r0, #0
 800681c:	d017      	beq.n	800684e <acc_sensor_manager_prepare_radar_engine+0xc2>
 800681e:	2220      	movs	r2, #32
 8006820:	2100      	movs	r1, #0
 8006822:	0030      	movs	r0, r6
 8006824:	f00c fa1a 	bl	8012c5c <memset>
 8006828:	221c      	movs	r2, #28
 800682a:	2100      	movs	r1, #0
 800682c:	a803      	add	r0, sp, #12
 800682e:	f00c fa15 	bl	8012c5c <memset>
 8006832:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006834:	0032      	movs	r2, r6
 8006836:	681f      	ldr	r7, [r3, #0]
 8006838:	0021      	movs	r1, r4
 800683a:	ab03      	add	r3, sp, #12
 800683c:	4650      	mov	r0, sl
 800683e:	47b8      	blx	r7
 8006840:	4683      	mov	fp, r0
 8006842:	2800      	cmp	r0, #0
 8006844:	d10d      	bne.n	8006862 <acc_sensor_manager_prepare_radar_engine+0xd6>
 8006846:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006848:	4650      	mov	r0, sl
 800684a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684c:	4798      	blx	r3
 800684e:	0020      	movs	r0, r4
 8006850:	f7fc f8b7 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 8006854:	2800      	cmp	r0, #0
 8006856:	d036      	beq.n	80068c6 <acc_sensor_manager_prepare_radar_engine+0x13a>
 8006858:	2804      	cmp	r0, #4
 800685a:	d055      	beq.n	8006908 <acc_sensor_manager_prepare_radar_engine+0x17c>
 800685c:	2300      	movs	r3, #0
 800685e:	702b      	strb	r3, [r5, #0]
 8006860:	e033      	b.n	80068ca <acc_sensor_manager_prepare_radar_engine+0x13e>
 8006862:	4643      	mov	r3, r8
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <acc_sensor_manager_prepare_radar_engine+0xea>
 8006868:	0032      	movs	r2, r6
 800686a:	ca83      	ldmia	r2!, {r0, r1, r7}
 800686c:	c383      	stmia	r3!, {r0, r1, r7}
 800686e:	ca83      	ldmia	r2!, {r0, r1, r7}
 8006870:	c383      	stmia	r3!, {r0, r1, r7}
 8006872:	ca03      	ldmia	r2!, {r0, r1}
 8006874:	c303      	stmia	r3!, {r0, r1}
 8006876:	464b      	mov	r3, r9
 8006878:	2b00      	cmp	r3, #0
 800687a:	d004      	beq.n	8006886 <acc_sensor_manager_prepare_radar_engine+0xfa>
 800687c:	221c      	movs	r2, #28
 800687e:	a903      	add	r1, sp, #12
 8006880:	4648      	mov	r0, r9
 8006882:	f00e fe0f 	bl	80154a4 <memcpy>
 8006886:	0020      	movs	r0, r4
 8006888:	f7fc f874 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 800688c:	2801      	cmp	r0, #1
 800688e:	d010      	beq.n	80068b2 <acc_sensor_manager_prepare_radar_engine+0x126>
 8006890:	0020      	movs	r0, r4
 8006892:	f7fc f859 	bl	8002948 <acc_base_configuration_update_rate_get>
 8006896:	1c01      	adds	r1, r0, #0
 8006898:	481e      	ldr	r0, [pc, #120]	; (8006914 <acc_sensor_manager_prepare_radar_engine+0x188>)
 800689a:	f007 fd07 	bl	800e2ac <__aeabi_fdiv>
 800689e:	491d      	ldr	r1, [pc, #116]	; (8006914 <acc_sensor_manager_prepare_radar_engine+0x188>)
 80068a0:	f007 fb6a 	bl	800df78 <__aeabi_fadd>
 80068a4:	f008 fb54 	bl	800ef50 <__aeabi_f2uiz>
 80068a8:	2300      	movs	r3, #0
 80068aa:	6068      	str	r0, [r5, #4]
 80068ac:	60eb      	str	r3, [r5, #12]
 80068ae:	816b      	strh	r3, [r5, #10]
 80068b0:	e7cd      	b.n	800684e <acc_sensor_manager_prepare_radar_engine+0xc2>
 80068b2:	20fa      	movs	r0, #250	; 0xfa
 80068b4:	00c0      	lsls	r0, r0, #3
 80068b6:	e7f7      	b.n	80068a8 <acc_sensor_manager_prepare_radar_engine+0x11c>
 80068b8:	464b      	mov	r3, r9
 80068ba:	4642      	mov	r2, r8
 80068bc:	0021      	movs	r1, r4
 80068be:	4650      	mov	r0, sl
 80068c0:	47b8      	blx	r7
 80068c2:	4683      	mov	fp, r0
 80068c4:	e7c3      	b.n	800684e <acc_sensor_manager_prepare_radar_engine+0xc2>
 80068c6:	2302      	movs	r3, #2
 80068c8:	702b      	strb	r3, [r5, #0]
 80068ca:	0020      	movs	r0, r4
 80068cc:	f7fc f852 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 80068d0:	4243      	negs	r3, r0
 80068d2:	4158      	adcs	r0, r3
 80068d4:	7068      	strb	r0, [r5, #1]
 80068d6:	0020      	movs	r0, r4
 80068d8:	f7fb fab2 	bl	8001e40 <acc_base_configuration_asynchronous_measurement_get>
 80068dc:	70a8      	strb	r0, [r5, #2]
 80068de:	0020      	movs	r0, r4
 80068e0:	f7fc f879 	bl	80029d6 <acc_base_configuration_sensor_get>
 80068e4:	2305      	movs	r3, #5
 80068e6:	6070      	str	r0, [r6, #4]
 80068e8:	7033      	strb	r3, [r6, #0]
 80068ea:	0030      	movs	r0, r6
 80068ec:	3302      	adds	r3, #2
 80068ee:	221c      	movs	r2, #28
 80068f0:	4649      	mov	r1, r9
 80068f2:	60b3      	str	r3, [r6, #8]
 80068f4:	f006 fc18 	bl	800d128 <acc_probes_execute>
 80068f8:	4658      	mov	r0, fp
 80068fa:	b013      	add	sp, #76	; 0x4c
 80068fc:	bc3c      	pop	{r2, r3, r4, r5}
 80068fe:	4690      	mov	r8, r2
 8006900:	4699      	mov	r9, r3
 8006902:	46a2      	mov	sl, r4
 8006904:	46ab      	mov	fp, r5
 8006906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006908:	2301      	movs	r3, #1
 800690a:	702b      	strb	r3, [r5, #0]
 800690c:	e7dd      	b.n	80068ca <acc_sensor_manager_prepare_radar_engine+0x13e>
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	200004bc 	.word	0x200004bc
 8006914:	44fa0000 	.word	0x44fa0000

08006918 <initialize.lto_priv.310>:
 8006918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800691a:	4657      	mov	r7, sl
 800691c:	46de      	mov	lr, fp
 800691e:	464e      	mov	r6, r9
 8006920:	4645      	mov	r5, r8
 8006922:	b5e0      	push	{r5, r6, r7, lr}
 8006924:	000f      	movs	r7, r1
 8006926:	b09d      	sub	sp, #116	; 0x74
 8006928:	3732      	adds	r7, #50	; 0x32
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	783b      	ldrb	r3, [r7, #0]
 800692e:	4683      	mov	fp, r0
 8006930:	000e      	movs	r6, r1
 8006932:	4692      	mov	sl, r2
 8006934:	2b06      	cmp	r3, #6
 8006936:	d00f      	beq.n	8006958 <initialize.lto_priv.310+0x40>
 8006938:	2b09      	cmp	r3, #9
 800693a:	d00d      	beq.n	8006958 <initialize.lto_priv.310+0x40>
 800693c:	4bb7      	ldr	r3, [pc, #732]	; (8006c1c <initialize.lto_priv.310+0x304>)
 800693e:	2000      	movs	r0, #0
 8006940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006942:	4ab7      	ldr	r2, [pc, #732]	; (8006c20 <initialize.lto_priv.310+0x308>)
 8006944:	49b7      	ldr	r1, [pc, #732]	; (8006c24 <initialize.lto_priv.310+0x30c>)
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	b01d      	add	sp, #116	; 0x74
 800694c:	bc3c      	pop	{r2, r3, r4, r5}
 800694e:	4690      	mov	r8, r2
 8006950:	4699      	mov	r9, r3
 8006952:	46a2      	mov	sl, r4
 8006954:	46ab      	mov	fp, r5
 8006956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006958:	465b      	mov	r3, fp
 800695a:	0030      	movs	r0, r6
 800695c:	695d      	ldr	r5, [r3, #20]
 800695e:	f7ff fe07 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006962:	2800      	cmp	r0, #0
 8006964:	d040      	beq.n	80069e8 <initialize.lto_priv.310+0xd0>
 8006966:	0033      	movs	r3, r6
 8006968:	332c      	adds	r3, #44	; 0x2c
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d03b      	beq.n	80069e8 <initialize.lto_priv.310+0xd0>
 8006970:	0030      	movs	r0, r6
 8006972:	f7ff fdfd 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006976:	2400      	movs	r4, #0
 8006978:	42a0      	cmp	r0, r4
 800697a:	d001      	beq.n	8006980 <initialize.lto_priv.310+0x68>
 800697c:	2334      	movs	r3, #52	; 0x34
 800697e:	5ef4      	ldrsh	r4, [r6, r3]
 8006980:	b223      	sxth	r3, r4
 8006982:	0030      	movs	r0, r6
 8006984:	9307      	str	r3, [sp, #28]
 8006986:	f7ff fdf3 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800698a:	2300      	movs	r3, #0
 800698c:	b2a4      	uxth	r4, r4
 800698e:	4298      	cmp	r0, r3
 8006990:	d001      	beq.n	8006996 <initialize.lto_priv.310+0x7e>
 8006992:	2236      	movs	r2, #54	; 0x36
 8006994:	5eb3      	ldrsh	r3, [r6, r2]
 8006996:	18e4      	adds	r4, r4, r3
 8006998:	b223      	sxth	r3, r4
 800699a:	4698      	mov	r8, r3
 800699c:	0030      	movs	r0, r6
 800699e:	f7fb fa61 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 80069a2:	4643      	mov	r3, r8
 80069a4:	9a07      	ldr	r2, [sp, #28]
 80069a6:	0001      	movs	r1, r0
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	0018      	movs	r0, r3
 80069ac:	f008 fa32 	bl	800ee14 <__aeabi_idivmod>
 80069b0:	1e0c      	subs	r4, r1, #0
 80069b2:	dd0e      	ble.n	80069d2 <initialize.lto_priv.310+0xba>
 80069b4:	4b99      	ldr	r3, [pc, #612]	; (8006c1c <initialize.lto_priv.310+0x304>)
 80069b6:	001a      	movs	r2, r3
 80069b8:	3230      	adds	r2, #48	; 0x30
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	2a01      	cmp	r2, #1
 80069be:	d904      	bls.n	80069ca <initialize.lto_priv.310+0xb2>
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	4a99      	ldr	r2, [pc, #612]	; (8006c28 <initialize.lto_priv.310+0x310>)
 80069c4:	4997      	ldr	r1, [pc, #604]	; (8006c24 <initialize.lto_priv.310+0x30c>)
 80069c6:	2002      	movs	r0, #2
 80069c8:	4798      	blx	r3
 80069ca:	4643      	mov	r3, r8
 80069cc:	1b1c      	subs	r4, r3, r4
 80069ce:	b223      	sxth	r3, r4
 80069d0:	4698      	mov	r8, r3
 80069d2:	9b07      	ldr	r3, [sp, #28]
 80069d4:	4543      	cmp	r3, r8
 80069d6:	dd28      	ble.n	8006a2a <initialize.lto_priv.310+0x112>
 80069d8:	4b90      	ldr	r3, [pc, #576]	; (8006c1c <initialize.lto_priv.310+0x304>)
 80069da:	2000      	movs	r0, #0
 80069dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069de:	4a93      	ldr	r2, [pc, #588]	; (8006c2c <initialize.lto_priv.310+0x314>)
 80069e0:	4990      	ldr	r1, [pc, #576]	; (8006c24 <initialize.lto_priv.310+0x30c>)
 80069e2:	4798      	blx	r3
 80069e4:	2000      	movs	r0, #0
 80069e6:	e7b0      	b.n	800694a <initialize.lto_priv.310+0x32>
 80069e8:	0030      	movs	r0, r6
 80069ea:	f7ff fdc1 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d016      	beq.n	8006a20 <initialize.lto_priv.310+0x108>
 80069f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069f4:	4698      	mov	r8, r3
 80069f6:	0030      	movs	r0, r6
 80069f8:	f7ff fdba 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d012      	beq.n	8006a26 <initialize.lto_priv.310+0x10e>
 8006a00:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8006a02:	4641      	mov	r1, r8
 8006a04:	f007 fab8 	bl	800df78 <__aeabi_fadd>
 8006a08:	1c04      	adds	r4, r0, #0
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7ff fd06 	bl	800641c <meter_to_points.lto_priv.307>
 8006a10:	b203      	sxth	r3, r0
 8006a12:	1c20      	adds	r0, r4, #0
 8006a14:	9307      	str	r3, [sp, #28]
 8006a16:	f7ff fd01 	bl	800641c <meter_to_points.lto_priv.307>
 8006a1a:	b203      	sxth	r3, r0
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	e7bd      	b.n	800699c <initialize.lto_priv.310+0x84>
 8006a20:	2300      	movs	r3, #0
 8006a22:	4698      	mov	r8, r3
 8006a24:	e7e7      	b.n	80069f6 <initialize.lto_priv.310+0xde>
 8006a26:	2000      	movs	r0, #0
 8006a28:	e7eb      	b.n	8006a02 <initialize.lto_priv.310+0xea>
 8006a2a:	0030      	movs	r0, r6
 8006a2c:	f7ff fda0 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d005      	beq.n	8006a40 <initialize.lto_priv.310+0x128>
 8006a34:	0033      	movs	r3, r6
 8006a36:	336e      	adds	r3, #110	; 0x6e
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d000      	beq.n	8006a40 <initialize.lto_priv.310+0x128>
 8006a3e:	e1d7      	b.n	8006df0 <initialize.lto_priv.310+0x4d8>
 8006a40:	0033      	movs	r3, r6
 8006a42:	332e      	adds	r3, #46	; 0x2e
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d100      	bne.n	8006a4c <initialize.lto_priv.310+0x134>
 8006a4a:	e0d2      	b.n	8006bf2 <initialize.lto_priv.310+0x2da>
 8006a4c:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 8006a4e:	b213      	sxth	r3, r2
 8006a50:	3b01      	subs	r3, #1
 8006a52:	2007      	movs	r0, #7
 8006a54:	015b      	lsls	r3, r3, #5
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	0019      	movs	r1, r3
 8006a5a:	0152      	lsls	r2, r2, #5
 8006a5c:	3a1a      	subs	r2, #26
 8006a5e:	b212      	sxth	r2, r2
 8006a60:	17d4      	asrs	r4, r2, #31
 8006a62:	4004      	ands	r4, r0
 8006a64:	18a2      	adds	r2, r4, r2
 8006a66:	10d2      	asrs	r2, r2, #3
 8006a68:	00d2      	lsls	r2, r2, #3
 8006a6a:	390f      	subs	r1, #15
 8006a6c:	1a8c      	subs	r4, r1, r2
 8006a6e:	9a07      	ldr	r2, [sp, #28]
 8006a70:	b224      	sxth	r4, r4
 8006a72:	4294      	cmp	r4, r2
 8006a74:	dc00      	bgt.n	8006a78 <initialize.lto_priv.310+0x160>
 8006a76:	e0e7      	b.n	8006c48 <initialize.lto_priv.310+0x330>
 8006a78:	4b68      	ldr	r3, [pc, #416]	; (8006c1c <initialize.lto_priv.310+0x304>)
 8006a7a:	0010      	movs	r0, r2
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	9308      	str	r3, [sp, #32]
 8006a80:	f7ff fcb0 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006a84:	2100      	movs	r1, #0
 8006a86:	f008 fa1b 	bl	800eec0 <__aeabi_fcmplt>
 8006a8a:	4d69      	ldr	r5, [pc, #420]	; (8006c30 <initialize.lto_priv.310+0x318>)
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d100      	bne.n	8006a92 <initialize.lto_priv.310+0x17a>
 8006a90:	4d68      	ldr	r5, [pc, #416]	; (8006c34 <initialize.lto_priv.310+0x31c>)
 8006a92:	9807      	ldr	r0, [sp, #28]
 8006a94:	f7ff fca6 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006a98:	1c06      	adds	r6, r0, #0
 8006a9a:	9807      	ldr	r0, [sp, #28]
 8006a9c:	f7ff fca2 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	f008 fa0d 	bl	800eec0 <__aeabi_fcmplt>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d100      	bne.n	8006aac <initialize.lto_priv.310+0x194>
 8006aaa:	e0a4      	b.n	8006bf6 <initialize.lto_priv.310+0x2de>
 8006aac:	4962      	ldr	r1, [pc, #392]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006aae:	1c30      	adds	r0, r6, #0
 8006ab0:	f007 fd0e 	bl	800e4d0 <__aeabi_fmul>
 8006ab4:	4961      	ldr	r1, [pc, #388]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006ab6:	f007 fa5f 	bl	800df78 <__aeabi_fadd>
 8006aba:	f008 fa49 	bl	800ef50 <__aeabi_f2uiz>
 8006abe:	0007      	movs	r7, r0
 8006ac0:	9807      	ldr	r0, [sp, #28]
 8006ac2:	f7ff fc8f 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006ac6:	1c06      	adds	r6, r0, #0
 8006ac8:	9807      	ldr	r0, [sp, #28]
 8006aca:	f7ff fc8b 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006ace:	2100      	movs	r1, #0
 8006ad0:	f008 f9f6 	bl	800eec0 <__aeabi_fcmplt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d100      	bne.n	8006ada <initialize.lto_priv.310+0x1c2>
 8006ad8:	e090      	b.n	8006bfc <initialize.lto_priv.310+0x2e4>
 8006ada:	4957      	ldr	r1, [pc, #348]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006adc:	1c30      	adds	r0, r6, #0
 8006ade:	f007 fcf7 	bl	800e4d0 <__aeabi_fmul>
 8006ae2:	4956      	ldr	r1, [pc, #344]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006ae4:	f007 fa48 	bl	800df78 <__aeabi_fadd>
 8006ae8:	1c06      	adds	r6, r0, #0
 8006aea:	9807      	ldr	r0, [sp, #28]
 8006aec:	f7ff fc7a 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006af0:	4680      	mov	r8, r0
 8006af2:	9807      	ldr	r0, [sp, #28]
 8006af4:	f7ff fc76 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006af8:	2100      	movs	r1, #0
 8006afa:	f008 f9e1 	bl	800eec0 <__aeabi_fcmplt>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d07f      	beq.n	8006c02 <initialize.lto_priv.310+0x2ea>
 8006b02:	494d      	ldr	r1, [pc, #308]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006b04:	4640      	mov	r0, r8
 8006b06:	f007 fce3 	bl	800e4d0 <__aeabi_fmul>
 8006b0a:	494c      	ldr	r1, [pc, #304]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006b0c:	f007 fa34 	bl	800df78 <__aeabi_fadd>
 8006b10:	f008 fa1e 	bl	800ef50 <__aeabi_f2uiz>
 8006b14:	f008 fc5a 	bl	800f3cc <__aeabi_ui2f>
 8006b18:	1c01      	adds	r1, r0, #0
 8006b1a:	1c30      	adds	r0, r6, #0
 8006b1c:	f007 fe0a 	bl	800e734 <__aeabi_fsub>
 8006b20:	4947      	ldr	r1, [pc, #284]	; (8006c40 <initialize.lto_priv.310+0x328>)
 8006b22:	f007 fcd5 	bl	800e4d0 <__aeabi_fmul>
 8006b26:	f008 fa13 	bl	800ef50 <__aeabi_f2uiz>
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	0020      	movs	r0, r4
 8006b2e:	f7ff fc59 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b32:	2100      	movs	r1, #0
 8006b34:	f008 f9c4 	bl	800eec0 <__aeabi_fcmplt>
 8006b38:	4e3d      	ldr	r6, [pc, #244]	; (8006c30 <initialize.lto_priv.310+0x318>)
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d100      	bne.n	8006b40 <initialize.lto_priv.310+0x228>
 8006b3e:	4e3d      	ldr	r6, [pc, #244]	; (8006c34 <initialize.lto_priv.310+0x31c>)
 8006b40:	0020      	movs	r0, r4
 8006b42:	f7ff fc4f 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b46:	4681      	mov	r9, r0
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f7ff fc4b 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b4e:	2100      	movs	r1, #0
 8006b50:	f008 f9b6 	bl	800eec0 <__aeabi_fcmplt>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d057      	beq.n	8006c08 <initialize.lto_priv.310+0x2f0>
 8006b58:	4937      	ldr	r1, [pc, #220]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006b5a:	4648      	mov	r0, r9
 8006b5c:	f007 fcb8 	bl	800e4d0 <__aeabi_fmul>
 8006b60:	4936      	ldr	r1, [pc, #216]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006b62:	f007 fa09 	bl	800df78 <__aeabi_fadd>
 8006b66:	f008 f9f3 	bl	800ef50 <__aeabi_f2uiz>
 8006b6a:	4681      	mov	r9, r0
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	f7ff fc39 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b72:	4682      	mov	sl, r0
 8006b74:	0020      	movs	r0, r4
 8006b76:	f7ff fc35 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	f008 f9a0 	bl	800eec0 <__aeabi_fcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d044      	beq.n	8006c0e <initialize.lto_priv.310+0x2f6>
 8006b84:	492c      	ldr	r1, [pc, #176]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006b86:	4650      	mov	r0, sl
 8006b88:	f007 fca2 	bl	800e4d0 <__aeabi_fmul>
 8006b8c:	492b      	ldr	r1, [pc, #172]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006b8e:	f007 f9f3 	bl	800df78 <__aeabi_fadd>
 8006b92:	4682      	mov	sl, r0
 8006b94:	0020      	movs	r0, r4
 8006b96:	f7ff fc25 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006b9a:	4683      	mov	fp, r0
 8006b9c:	0020      	movs	r0, r4
 8006b9e:	f7ff fc21 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	f008 f98c 	bl	800eec0 <__aeabi_fcmplt>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d033      	beq.n	8006c14 <initialize.lto_priv.310+0x2fc>
 8006bac:	4922      	ldr	r1, [pc, #136]	; (8006c38 <initialize.lto_priv.310+0x320>)
 8006bae:	4658      	mov	r0, fp
 8006bb0:	f007 fc8e 	bl	800e4d0 <__aeabi_fmul>
 8006bb4:	4921      	ldr	r1, [pc, #132]	; (8006c3c <initialize.lto_priv.310+0x324>)
 8006bb6:	f007 f9df 	bl	800df78 <__aeabi_fadd>
 8006bba:	f008 f9c9 	bl	800ef50 <__aeabi_f2uiz>
 8006bbe:	f008 fc05 	bl	800f3cc <__aeabi_ui2f>
 8006bc2:	1c01      	adds	r1, r0, #0
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	f007 fdb5 	bl	800e734 <__aeabi_fsub>
 8006bca:	491d      	ldr	r1, [pc, #116]	; (8006c40 <initialize.lto_priv.310+0x328>)
 8006bcc:	f007 fc80 	bl	800e4d0 <__aeabi_fmul>
 8006bd0:	f008 f9be 	bl	800ef50 <__aeabi_f2uiz>
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	4643      	mov	r3, r8
 8006bda:	9004      	str	r0, [sp, #16]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	2000      	movs	r0, #0
 8006be0:	9602      	str	r6, [sp, #8]
 8006be2:	9700      	str	r7, [sp, #0]
 8006be4:	002b      	movs	r3, r5
 8006be6:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <initialize.lto_priv.310+0x32c>)
 8006be8:	490e      	ldr	r1, [pc, #56]	; (8006c24 <initialize.lto_priv.310+0x30c>)
 8006bea:	9c08      	ldr	r4, [sp, #32]
 8006bec:	47a0      	blx	r4
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e6ab      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006bf2:	783a      	ldrb	r2, [r7, #0]
 8006bf4:	e72b      	b.n	8006a4e <initialize.lto_priv.310+0x136>
 8006bf6:	21fe      	movs	r1, #254	; 0xfe
 8006bf8:	0589      	lsls	r1, r1, #22
 8006bfa:	e758      	b.n	8006aae <initialize.lto_priv.310+0x196>
 8006bfc:	21fe      	movs	r1, #254	; 0xfe
 8006bfe:	0589      	lsls	r1, r1, #22
 8006c00:	e76c      	b.n	8006adc <initialize.lto_priv.310+0x1c4>
 8006c02:	21fe      	movs	r1, #254	; 0xfe
 8006c04:	0589      	lsls	r1, r1, #22
 8006c06:	e77d      	b.n	8006b04 <initialize.lto_priv.310+0x1ec>
 8006c08:	21fe      	movs	r1, #254	; 0xfe
 8006c0a:	0589      	lsls	r1, r1, #22
 8006c0c:	e7a5      	b.n	8006b5a <initialize.lto_priv.310+0x242>
 8006c0e:	21fe      	movs	r1, #254	; 0xfe
 8006c10:	0589      	lsls	r1, r1, #22
 8006c12:	e7b8      	b.n	8006b86 <initialize.lto_priv.310+0x26e>
 8006c14:	21fe      	movs	r1, #254	; 0xfe
 8006c16:	0589      	lsls	r1, r1, #22
 8006c18:	e7c9      	b.n	8006bae <initialize.lto_priv.310+0x296>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	200002b8 	.word	0x200002b8
 8006c20:	0801cce1 	.word	0x0801cce1
 8006c24:	0801ca74 	.word	0x0801ca74
 8006c28:	0801cd0c 	.word	0x0801cd0c
 8006c2c:	0801cd3f 	.word	0x0801cd3f
 8006c30:	0801da48 	.word	0x0801da48
 8006c34:	0801d973 	.word	0x0801d973
 8006c38:	bf800000 	.word	0xbf800000
 8006c3c:	350637bd 	.word	0x350637bd
 8006c40:	49742400 	.word	0x49742400
 8006c44:	0801cd6e 	.word	0x0801cd6e
 8006c48:	3b30      	subs	r3, #48	; 0x30
 8006c4a:	b21c      	sxth	r4, r3
 8006c4c:	4544      	cmp	r4, r8
 8006c4e:	db00      	blt.n	8006c52 <initialize.lto_priv.310+0x33a>
 8006c50:	e0ce      	b.n	8006df0 <initialize.lto_priv.310+0x4d8>
 8006c52:	4bd7      	ldr	r3, [pc, #860]	; (8006fb0 <initialize.lto_priv.310+0x698>)
 8006c54:	4640      	mov	r0, r8
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	f7ff fbc3 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f008 f92e 	bl	800eec0 <__aeabi_fcmplt>
 8006c64:	4dd3      	ldr	r5, [pc, #844]	; (8006fb4 <initialize.lto_priv.310+0x69c>)
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d100      	bne.n	8006c6c <initialize.lto_priv.310+0x354>
 8006c6a:	4dd3      	ldr	r5, [pc, #844]	; (8006fb8 <initialize.lto_priv.310+0x6a0>)
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f7ff fbb9 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006c72:	1c06      	adds	r6, r0, #0
 8006c74:	4640      	mov	r0, r8
 8006c76:	f7ff fbb5 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	f008 f920 	bl	800eec0 <__aeabi_fcmplt>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d100      	bne.n	8006c86 <initialize.lto_priv.310+0x36e>
 8006c84:	e0a2      	b.n	8006dcc <initialize.lto_priv.310+0x4b4>
 8006c86:	49cd      	ldr	r1, [pc, #820]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006c88:	1c30      	adds	r0, r6, #0
 8006c8a:	f007 fc21 	bl	800e4d0 <__aeabi_fmul>
 8006c8e:	49cc      	ldr	r1, [pc, #816]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006c90:	f007 f972 	bl	800df78 <__aeabi_fadd>
 8006c94:	f008 f95c 	bl	800ef50 <__aeabi_f2uiz>
 8006c98:	0007      	movs	r7, r0
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	f7ff fba2 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006ca0:	1c06      	adds	r6, r0, #0
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7ff fb9e 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f008 f909 	bl	800eec0 <__aeabi_fcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d100      	bne.n	8006cb4 <initialize.lto_priv.310+0x39c>
 8006cb2:	e08e      	b.n	8006dd2 <initialize.lto_priv.310+0x4ba>
 8006cb4:	49c1      	ldr	r1, [pc, #772]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006cb6:	1c30      	adds	r0, r6, #0
 8006cb8:	f007 fc0a 	bl	800e4d0 <__aeabi_fmul>
 8006cbc:	49c0      	ldr	r1, [pc, #768]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006cbe:	f007 f95b 	bl	800df78 <__aeabi_fadd>
 8006cc2:	1c06      	adds	r6, r0, #0
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	f7ff fb8d 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006cca:	4681      	mov	r9, r0
 8006ccc:	4640      	mov	r0, r8
 8006cce:	f7ff fb89 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f008 f8f4 	bl	800eec0 <__aeabi_fcmplt>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d07d      	beq.n	8006dd8 <initialize.lto_priv.310+0x4c0>
 8006cdc:	49b7      	ldr	r1, [pc, #732]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f007 fbf6 	bl	800e4d0 <__aeabi_fmul>
 8006ce4:	49b6      	ldr	r1, [pc, #728]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006ce6:	f007 f947 	bl	800df78 <__aeabi_fadd>
 8006cea:	f008 f931 	bl	800ef50 <__aeabi_f2uiz>
 8006cee:	f008 fb6d 	bl	800f3cc <__aeabi_ui2f>
 8006cf2:	1c01      	adds	r1, r0, #0
 8006cf4:	1c30      	adds	r0, r6, #0
 8006cf6:	f007 fd1d 	bl	800e734 <__aeabi_fsub>
 8006cfa:	49b2      	ldr	r1, [pc, #712]	; (8006fc4 <initialize.lto_priv.310+0x6ac>)
 8006cfc:	f007 fbe8 	bl	800e4d0 <__aeabi_fmul>
 8006d00:	f008 f926 	bl	800ef50 <__aeabi_f2uiz>
 8006d04:	4680      	mov	r8, r0
 8006d06:	0020      	movs	r0, r4
 8006d08:	f7ff fb6c 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	f008 f8d7 	bl	800eec0 <__aeabi_fcmplt>
 8006d12:	4ea8      	ldr	r6, [pc, #672]	; (8006fb4 <initialize.lto_priv.310+0x69c>)
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d100      	bne.n	8006d1a <initialize.lto_priv.310+0x402>
 8006d18:	4ea7      	ldr	r6, [pc, #668]	; (8006fb8 <initialize.lto_priv.310+0x6a0>)
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	f7ff fb62 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d20:	4681      	mov	r9, r0
 8006d22:	0020      	movs	r0, r4
 8006d24:	f7ff fb5e 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d28:	2100      	movs	r1, #0
 8006d2a:	f008 f8c9 	bl	800eec0 <__aeabi_fcmplt>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d055      	beq.n	8006dde <initialize.lto_priv.310+0x4c6>
 8006d32:	49a2      	ldr	r1, [pc, #648]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006d34:	4648      	mov	r0, r9
 8006d36:	f007 fbcb 	bl	800e4d0 <__aeabi_fmul>
 8006d3a:	49a1      	ldr	r1, [pc, #644]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006d3c:	f007 f91c 	bl	800df78 <__aeabi_fadd>
 8006d40:	f008 f906 	bl	800ef50 <__aeabi_f2uiz>
 8006d44:	4681      	mov	r9, r0
 8006d46:	0020      	movs	r0, r4
 8006d48:	f7ff fb4c 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d4c:	4682      	mov	sl, r0
 8006d4e:	0020      	movs	r0, r4
 8006d50:	f7ff fb48 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d54:	2100      	movs	r1, #0
 8006d56:	f008 f8b3 	bl	800eec0 <__aeabi_fcmplt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d042      	beq.n	8006de4 <initialize.lto_priv.310+0x4cc>
 8006d5e:	4997      	ldr	r1, [pc, #604]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006d60:	4650      	mov	r0, sl
 8006d62:	f007 fbb5 	bl	800e4d0 <__aeabi_fmul>
 8006d66:	4996      	ldr	r1, [pc, #600]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006d68:	f007 f906 	bl	800df78 <__aeabi_fadd>
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	0020      	movs	r0, r4
 8006d70:	f7ff fb38 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d74:	4683      	mov	fp, r0
 8006d76:	0020      	movs	r0, r4
 8006d78:	f7ff fb34 	bl	80063e4 <points_to_meter.lto_priv.303>
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f008 f89f 	bl	800eec0 <__aeabi_fcmplt>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d031      	beq.n	8006dea <initialize.lto_priv.310+0x4d2>
 8006d86:	498d      	ldr	r1, [pc, #564]	; (8006fbc <initialize.lto_priv.310+0x6a4>)
 8006d88:	4658      	mov	r0, fp
 8006d8a:	f007 fba1 	bl	800e4d0 <__aeabi_fmul>
 8006d8e:	498c      	ldr	r1, [pc, #560]	; (8006fc0 <initialize.lto_priv.310+0x6a8>)
 8006d90:	f007 f8f2 	bl	800df78 <__aeabi_fadd>
 8006d94:	f008 f8dc 	bl	800ef50 <__aeabi_f2uiz>
 8006d98:	f008 fb18 	bl	800f3cc <__aeabi_ui2f>
 8006d9c:	1c01      	adds	r1, r0, #0
 8006d9e:	4650      	mov	r0, sl
 8006da0:	f007 fcc8 	bl	800e734 <__aeabi_fsub>
 8006da4:	4987      	ldr	r1, [pc, #540]	; (8006fc4 <initialize.lto_priv.310+0x6ac>)
 8006da6:	f007 fb93 	bl	800e4d0 <__aeabi_fmul>
 8006daa:	f008 f8d1 	bl	800ef50 <__aeabi_f2uiz>
 8006dae:	464b      	mov	r3, r9
 8006db0:	9303      	str	r3, [sp, #12]
 8006db2:	4643      	mov	r3, r8
 8006db4:	9004      	str	r0, [sp, #16]
 8006db6:	9301      	str	r3, [sp, #4]
 8006db8:	2000      	movs	r0, #0
 8006dba:	9602      	str	r6, [sp, #8]
 8006dbc:	9700      	str	r7, [sp, #0]
 8006dbe:	002b      	movs	r3, r5
 8006dc0:	4a81      	ldr	r2, [pc, #516]	; (8006fc8 <initialize.lto_priv.310+0x6b0>)
 8006dc2:	4982      	ldr	r1, [pc, #520]	; (8006fcc <initialize.lto_priv.310+0x6b4>)
 8006dc4:	9c07      	ldr	r4, [sp, #28]
 8006dc6:	47a0      	blx	r4
 8006dc8:	2000      	movs	r0, #0
 8006dca:	e5be      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006dcc:	21fe      	movs	r1, #254	; 0xfe
 8006dce:	0589      	lsls	r1, r1, #22
 8006dd0:	e75a      	b.n	8006c88 <initialize.lto_priv.310+0x370>
 8006dd2:	21fe      	movs	r1, #254	; 0xfe
 8006dd4:	0589      	lsls	r1, r1, #22
 8006dd6:	e76e      	b.n	8006cb6 <initialize.lto_priv.310+0x39e>
 8006dd8:	21fe      	movs	r1, #254	; 0xfe
 8006dda:	0589      	lsls	r1, r1, #22
 8006ddc:	e77f      	b.n	8006cde <initialize.lto_priv.310+0x3c6>
 8006dde:	21fe      	movs	r1, #254	; 0xfe
 8006de0:	0589      	lsls	r1, r1, #22
 8006de2:	e7a7      	b.n	8006d34 <initialize.lto_priv.310+0x41c>
 8006de4:	21fe      	movs	r1, #254	; 0xfe
 8006de6:	0589      	lsls	r1, r1, #22
 8006de8:	e7ba      	b.n	8006d60 <initialize.lto_priv.310+0x448>
 8006dea:	21fe      	movs	r1, #254	; 0xfe
 8006dec:	0589      	lsls	r1, r1, #22
 8006dee:	e7cb      	b.n	8006d88 <initialize.lto_priv.310+0x470>
 8006df0:	0030      	movs	r0, r6
 8006df2:	f7fb f837 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 8006df6:	4643      	mov	r3, r8
 8006df8:	9a07      	ldr	r2, [sp, #28]
 8006dfa:	9009      	str	r0, [sp, #36]	; 0x24
 8006dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dfe:	1a98      	subs	r0, r3, r2
 8006e00:	f007 ff22 	bl	800ec48 <__divsi3>
 8006e04:	3001      	adds	r0, #1
 8006e06:	b283      	uxth	r3, r0
 8006e08:	0030      	movs	r0, r6
 8006e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0c:	f7fb fd4e 	bl	80028ac <acc_base_configuration_sparse_sweeps_per_frame_get>
 8006e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e12:	4358      	muls	r0, r3
 8006e14:	b283      	uxth	r3, r0
 8006e16:	0030      	movs	r0, r6
 8006e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e1a:	f7ff fba9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4298      	cmp	r0, r3
 8006e22:	d009      	beq.n	8006e38 <initialize.lto_priv.310+0x520>
 8006e24:	0032      	movs	r2, r6
 8006e26:	324f      	adds	r2, #79	; 0x4f
 8006e28:	0033      	movs	r3, r6
 8006e2a:	7812      	ldrb	r2, [r2, #0]
 8006e2c:	3352      	adds	r3, #82	; 0x52
 8006e2e:	1e51      	subs	r1, r2, #1
 8006e30:	418a      	sbcs	r2, r1
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	4252      	negs	r2, r2
 8006e36:	4013      	ands	r3, r2
 8006e38:	002a      	movs	r2, r5
 8006e3a:	32b8      	adds	r2, #184	; 0xb8
 8006e3c:	8013      	strh	r3, [r2, #0]
 8006e3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e40:	4694      	mov	ip, r2
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	4463      	add	r3, ip
 8006e46:	0112      	lsls	r2, r2, #4
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	dd07      	ble.n	8006e5c <initialize.lto_priv.310+0x544>
 8006e4c:	4b58      	ldr	r3, [pc, #352]	; (8006fb0 <initialize.lto_priv.310+0x698>)
 8006e4e:	2000      	movs	r0, #0
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	4a5f      	ldr	r2, [pc, #380]	; (8006fd0 <initialize.lto_priv.310+0x6b8>)
 8006e54:	495d      	ldr	r1, [pc, #372]	; (8006fcc <initialize.lto_priv.310+0x6b4>)
 8006e56:	4798      	blx	r3
 8006e58:	2000      	movs	r0, #0
 8006e5a:	e576      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006e5c:	0030      	movs	r0, r6
 8006e5e:	f7fb fd93 	bl	8002988 <acc_base_configuration_hw_accelerated_average_samples_get>
 8006e62:	4681      	mov	r9, r0
 8006e64:	0030      	movs	r0, r6
 8006e66:	f7ff fb83 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006e6a:	2406      	movs	r4, #6
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d000      	beq.n	8006e72 <initialize.lto_priv.310+0x55a>
 8006e70:	783c      	ldrb	r4, [r7, #0]
 8006e72:	0030      	movs	r0, r6
 8006e74:	f7ff fb7c 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006e78:	2303      	movs	r3, #3
 8006e7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e7c:	435a      	muls	r2, r3
 8006e7e:	920c      	str	r2, [sp, #48]	; 0x30
 8006e80:	2800      	cmp	r0, #0
 8006e82:	d004      	beq.n	8006e8e <initialize.lto_priv.310+0x576>
 8006e84:	0032      	movs	r2, r6
 8006e86:	326a      	adds	r2, #106	; 0x6a
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	d142      	bne.n	8006f14 <initialize.lto_priv.310+0x5fc>
 8006e8e:	464b      	mov	r3, r9
 8006e90:	2007      	movs	r0, #7
 8006e92:	4358      	muls	r0, r3
 8006e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e96:	300d      	adds	r0, #13
 8006e98:	4358      	muls	r0, r3
 8006e9a:	4344      	muls	r4, r0
 8006e9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e9e:	0023      	movs	r3, r4
 8006ea0:	4694      	mov	ip, r2
 8006ea2:	4463      	add	r3, ip
 8006ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006ea6:	f7ff fa8b 	bl	80063c0 <get_pll_freq>
 8006eaa:	21f4      	movs	r1, #244	; 0xf4
 8006eac:	0589      	lsls	r1, r1, #22
 8006eae:	f007 fb0f 	bl	800e4d0 <__aeabi_fmul>
 8006eb2:	9014      	str	r0, [sp, #80]	; 0x50
 8006eb4:	0030      	movs	r0, r6
 8006eb6:	f7ff fb5b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d03d      	beq.n	8006f3a <initialize.lto_priv.310+0x622>
 8006ebe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006ec0:	f008 fa84 	bl	800f3cc <__aeabi_ui2f>
 8006ec4:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8006ec6:	1c07      	adds	r7, r0, #0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	1c20      	adds	r0, r4, #0
 8006ecc:	f008 f80c 	bl	800eee8 <__aeabi_fcmpgt>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d032      	beq.n	8006f3a <initialize.lto_priv.310+0x622>
 8006ed4:	1c21      	adds	r1, r4, #0
 8006ed6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8006ed8:	f007 f9e8 	bl	800e2ac <__aeabi_fdiv>
 8006edc:	1c39      	adds	r1, r7, #0
 8006ede:	f007 fc29 	bl	800e734 <__aeabi_fsub>
 8006ee2:	1c04      	adds	r4, r0, #0
 8006ee4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ee6:	f008 fa71 	bl	800f3cc <__aeabi_ui2f>
 8006eea:	1c01      	adds	r1, r0, #0
 8006eec:	1c20      	adds	r0, r4, #0
 8006eee:	f007 f9dd 	bl	800e2ac <__aeabi_fdiv>
 8006ef2:	21fc      	movs	r1, #252	; 0xfc
 8006ef4:	0589      	lsls	r1, r1, #22
 8006ef6:	f007 f83f 	bl	800df78 <__aeabi_fadd>
 8006efa:	f008 f9fd 	bl	800f2f8 <__aeabi_f2iz>
 8006efe:	900d      	str	r0, [sp, #52]	; 0x34
 8006f00:	2800      	cmp	r0, #0
 8006f02:	da0f      	bge.n	8006f24 <initialize.lto_priv.310+0x60c>
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <initialize.lto_priv.310+0x698>)
 8006f06:	2000      	movs	r0, #0
 8006f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0a:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <initialize.lto_priv.310+0x6bc>)
 8006f0c:	492f      	ldr	r1, [pc, #188]	; (8006fcc <initialize.lto_priv.310+0x6b4>)
 8006f0e:	4798      	blx	r3
 8006f10:	2000      	movs	r0, #0
 8006f12:	e51a      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006f14:	464a      	mov	r2, r9
 8006f16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f18:	930c      	str	r3, [sp, #48]	; 0x30
 8006f1a:	4350      	muls	r0, r2
 8006f1c:	300f      	adds	r0, #15
 8006f1e:	4344      	muls	r4, r0
 8006f20:	34d4      	adds	r4, #212	; 0xd4
 8006f22:	e7bb      	b.n	8006e9c <initialize.lto_priv.310+0x584>
 8006f24:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <initialize.lto_priv.310+0x6c0>)
 8006f26:	4298      	cmp	r0, r3
 8006f28:	dd08      	ble.n	8006f3c <initialize.lto_priv.310+0x624>
 8006f2a:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <initialize.lto_priv.310+0x698>)
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	4a2a      	ldr	r2, [pc, #168]	; (8006fdc <initialize.lto_priv.310+0x6c4>)
 8006f32:	4926      	ldr	r1, [pc, #152]	; (8006fcc <initialize.lto_priv.310+0x6b4>)
 8006f34:	4798      	blx	r3
 8006f36:	2000      	movs	r0, #0
 8006f38:	e507      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006f3a:	900d      	str	r0, [sp, #52]	; 0x34
 8006f3c:	002b      	movs	r3, r5
 8006f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f40:	33b6      	adds	r3, #182	; 0xb6
 8006f42:	801a      	strh	r2, [r3, #0]
 8006f44:	0030      	movs	r0, r6
 8006f46:	f7fb fd33 	bl	80029b0 <acc_base_configuration_tx_disable_get>
 8006f4a:	002b      	movs	r3, r5
 8006f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f4e:	33ba      	adds	r3, #186	; 0xba
 8006f50:	7018      	strb	r0, [r3, #0]
 8006f52:	3b06      	subs	r3, #6
 8006f54:	801a      	strh	r2, [r3, #0]
 8006f56:	0033      	movs	r3, r6
 8006f58:	332e      	adds	r3, #46	; 0x2e
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d022      	beq.n	8006fa6 <initialize.lto_priv.310+0x68e>
 8006f60:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8006f62:	465b      	mov	r3, fp
 8006f64:	809c      	strh	r4, [r3, #4]
 8006f66:	466b      	mov	r3, sp
 8006f68:	8b9f      	ldrh	r7, [r3, #28]
 8006f6a:	465b      	mov	r3, fp
 8006f6c:	9a07      	ldr	r2, [sp, #28]
 8006f6e:	811a      	strh	r2, [r3, #8]
 8006f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f72:	815a      	strh	r2, [r3, #10]
 8006f74:	2301      	movs	r3, #1
 8006f76:	4699      	mov	r9, r3
 8006f78:	465b      	mov	r3, fp
 8006f7a:	464a      	mov	r2, r9
 8006f7c:	819a      	strh	r2, [r3, #12]
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b07      	cmp	r3, #7
 8006f86:	d806      	bhi.n	8006f96 <initialize.lto_priv.310+0x67e>
 8006f88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f8a:	2008      	movs	r0, #8
 8006f8c:	f007 ff42 	bl	800ee14 <__aeabi_idivmod>
 8006f90:	910e      	str	r1, [sp, #56]	; 0x38
 8006f92:	2900      	cmp	r1, #0
 8006f94:	d026      	beq.n	8006fe4 <initialize.lto_priv.310+0x6cc>
 8006f96:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <initialize.lto_priv.310+0x698>)
 8006f98:	2000      	movs	r0, #0
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	4a10      	ldr	r2, [pc, #64]	; (8006fe0 <initialize.lto_priv.310+0x6c8>)
 8006f9e:	490b      	ldr	r1, [pc, #44]	; (8006fcc <initialize.lto_priv.310+0x6b4>)
 8006fa0:	4798      	blx	r3
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e4d1      	b.n	800694a <initialize.lto_priv.310+0x32>
 8006fa6:	0033      	movs	r3, r6
 8006fa8:	3332      	adds	r3, #50	; 0x32
 8006faa:	781c      	ldrb	r4, [r3, #0]
 8006fac:	e7d9      	b.n	8006f62 <initialize.lto_priv.310+0x64a>
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	200002b8 	.word	0x200002b8
 8006fb4:	0801da48 	.word	0x0801da48
 8006fb8:	0801d973 	.word	0x0801d973
 8006fbc:	bf800000 	.word	0xbf800000
 8006fc0:	350637bd 	.word	0x350637bd
 8006fc4:	49742400 	.word	0x49742400
 8006fc8:	0801cdab 	.word	0x0801cdab
 8006fcc:	0801ca74 	.word	0x0801ca74
 8006fd0:	0801cde8 	.word	0x0801cde8
 8006fd4:	0801ce48 	.word	0x0801ce48
 8006fd8:	0000fffe 	.word	0x0000fffe
 8006fdc:	0801ce69 	.word	0x0801ce69
 8006fe0:	0801ce89 	.word	0x0801ce89
 8006fe4:	b224      	sxth	r4, r4
 8006fe6:	3c01      	subs	r4, #1
 8006fe8:	0164      	lsls	r4, r4, #5
 8006fea:	b2a3      	uxth	r3, r4
 8006fec:	001c      	movs	r4, r3
 8006fee:	3c0f      	subs	r4, #15
 8006ff0:	b2a4      	uxth	r4, r4
 8006ff2:	1b3f      	subs	r7, r7, r4
 8006ff4:	b23f      	sxth	r7, r7
 8006ff6:	9315      	str	r3, [sp, #84]	; 0x54
 8006ff8:	10fb      	asrs	r3, r7, #3
 8006ffa:	9318      	str	r3, [sp, #96]	; 0x60
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	1b1c      	subs	r4, r3, r4
 8007000:	464b      	mov	r3, r9
 8007002:	10f9      	asrs	r1, r7, #3
 8007004:	b224      	sxth	r4, r4
 8007006:	10e2      	asrs	r2, r4, #3
 8007008:	1a5b      	subs	r3, r3, r1
 800700a:	189b      	adds	r3, r3, r2
 800700c:	b29b      	uxth	r3, r3
 800700e:	9311      	str	r3, [sp, #68]	; 0x44
 8007010:	2244      	movs	r2, #68	; 0x44
 8007012:	466b      	mov	r3, sp
 8007014:	189b      	adds	r3, r3, r2
 8007016:	2200      	movs	r2, #0
 8007018:	5e9b      	ldrsh	r3, [r3, r2]
 800701a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800701c:	2008      	movs	r0, #8
 800701e:	4699      	mov	r9, r3
 8007020:	f007 fe12 	bl	800ec48 <__divsi3>
 8007024:	9010      	str	r0, [sp, #64]	; 0x40
 8007026:	48db      	ldr	r0, [pc, #876]	; (8007394 <initialize.lto_priv.310+0xa7c>)
 8007028:	4007      	ands	r7, r0
 800702a:	9012      	str	r0, [sp, #72]	; 0x48
 800702c:	d504      	bpl.n	8007038 <initialize.lto_priv.310+0x720>
 800702e:	2308      	movs	r3, #8
 8007030:	3f01      	subs	r7, #1
 8007032:	425b      	negs	r3, r3
 8007034:	431f      	orrs	r7, r3
 8007036:	3701      	adds	r7, #1
 8007038:	b23f      	sxth	r7, r7
 800703a:	2f00      	cmp	r7, #0
 800703c:	da01      	bge.n	8007042 <initialize.lto_priv.310+0x72a>
 800703e:	3708      	adds	r7, #8
 8007040:	b23f      	sxth	r7, r7
 8007042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007044:	0038      	movs	r0, r7
 8007046:	f007 fee5 	bl	800ee14 <__aeabi_idivmod>
 800704a:	466b      	mov	r3, sp
 800704c:	910f      	str	r1, [sp, #60]	; 0x3c
 800704e:	213c      	movs	r1, #60	; 0x3c
 8007050:	5e59      	ldrsh	r1, [r3, r1]
 8007052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007054:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007056:	3b01      	subs	r3, #1
 8007058:	9316      	str	r3, [sp, #88]	; 0x58
 800705a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800705c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705e:	4004      	ands	r4, r0
 8007060:	4353      	muls	r3, r2
 8007062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007064:	4694      	mov	ip, r2
 8007066:	4463      	add	r3, ip
 8007068:	b29b      	uxth	r3, r3
 800706a:	b21a      	sxth	r2, r3
 800706c:	2c00      	cmp	r4, #0
 800706e:	da04      	bge.n	800707a <initialize.lto_priv.310+0x762>
 8007070:	2008      	movs	r0, #8
 8007072:	3c01      	subs	r4, #1
 8007074:	4240      	negs	r0, r0
 8007076:	4304      	orrs	r4, r0
 8007078:	3401      	adds	r4, #1
 800707a:	b224      	sxth	r4, r4
 800707c:	2c00      	cmp	r4, #0
 800707e:	da01      	bge.n	8007084 <initialize.lto_priv.310+0x76c>
 8007080:	3408      	adds	r4, #8
 8007082:	b224      	sxth	r4, r4
 8007084:	4648      	mov	r0, r9
 8007086:	2801      	cmp	r0, #1
 8007088:	d172      	bne.n	8007170 <initialize.lto_priv.310+0x858>
 800708a:	46cc      	mov	ip, r9
 800708c:	42b9      	cmp	r1, r7
 800708e:	d102      	bne.n	8007096 <initialize.lto_priv.310+0x77e>
 8007090:	1b10      	subs	r0, r2, r4
 8007092:	1e42      	subs	r2, r0, #1
 8007094:	4190      	sbcs	r0, r2
 8007096:	4662      	mov	r2, ip
 8007098:	4002      	ands	r2, r0
 800709a:	9210      	str	r2, [sp, #64]	; 0x40
 800709c:	2200      	movs	r2, #0
 800709e:	9212      	str	r2, [sp, #72]	; 0x48
 80070a0:	2000      	movs	r0, #0
 80070a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80070a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80070a6:	1a52      	subs	r2, r2, r1
 80070a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80070aa:	1a52      	subs	r2, r2, r1
 80070ac:	b212      	sxth	r2, r2
 80070ae:	9211      	str	r2, [sp, #68]	; 0x44
 80070b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070b2:	4282      	cmp	r2, r0
 80070b4:	d008      	beq.n	80070c8 <initialize.lto_priv.310+0x7b0>
 80070b6:	464a      	mov	r2, r9
 80070b8:	2a01      	cmp	r2, #1
 80070ba:	d100      	bne.n	80070be <initialize.lto_priv.310+0x7a6>
 80070bc:	b2a3      	uxth	r3, r4
 80070be:	1bd8      	subs	r0, r3, r7
 80070c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070c2:	f007 fdc1 	bl	800ec48 <__divsi3>
 80070c6:	b280      	uxth	r0, r0
 80070c8:	465b      	mov	r3, fp
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	2205      	movs	r2, #5
 80070ce:	0019      	movs	r1, r3
 80070d0:	4699      	mov	r9, r3
 80070d2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80070d4:	318c      	adds	r1, #140	; 0x8c
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	600b      	str	r3, [r1, #0]
 80070dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070de:	464a      	mov	r2, r9
 80070e0:	468c      	mov	ip, r1
 80070e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070e4:	3290      	adds	r2, #144	; 0x90
 80070e6:	3b32      	subs	r3, #50	; 0x32
 80070e8:	b21b      	sxth	r3, r3
 80070ea:	18ff      	adds	r7, r7, r3
 80070ec:	4463      	add	r3, ip
 80070ee:	6053      	str	r3, [r2, #4]
 80070f0:	464b      	mov	r3, r9
 80070f2:	6017      	str	r7, [r2, #0]
 80070f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80070f6:	3398      	adds	r3, #152	; 0x98
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	464a      	mov	r2, r9
 80070fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007100:	17db      	asrs	r3, r3, #31
 8007102:	1a5b      	subs	r3, r3, r1
 8007104:	329c      	adds	r2, #156	; 0x9c
 8007106:	0fdb      	lsrs	r3, r3, #31
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	464b      	mov	r3, r9
 800710c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800710e:	33a0      	adds	r3, #160	; 0xa0
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007114:	6058      	str	r0, [r3, #4]
 8007116:	609a      	str	r2, [r3, #8]
 8007118:	4663      	mov	r3, ip
 800711a:	464f      	mov	r7, r9
 800711c:	1ae0      	subs	r0, r4, r3
 800711e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007120:	f007 fd92 	bl	800ec48 <__divsi3>
 8007124:	2200      	movs	r2, #0
 8007126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007128:	37ac      	adds	r7, #172	; 0xac
 800712a:	6038      	str	r0, [r7, #0]
 800712c:	4293      	cmp	r3, r2
 800712e:	dd01      	ble.n	8007134 <initialize.lto_priv.310+0x81c>
 8007130:	001a      	movs	r2, r3
 8007132:	3a01      	subs	r2, #1
 8007134:	464b      	mov	r3, r9
 8007136:	33b0      	adds	r3, #176	; 0xb0
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	0030      	movs	r0, r6
 800713c:	f7ff fa18 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007140:	2300      	movs	r3, #0
 8007142:	4298      	cmp	r0, r3
 8007144:	d005      	beq.n	8007152 <initialize.lto_priv.310+0x83a>
 8007146:	0033      	movs	r3, r6
 8007148:	336a      	adds	r3, #106	; 0x6a
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	1e5a      	subs	r2, r3, #1
 800714e:	4193      	sbcs	r3, r2
 8007150:	b2db      	uxtb	r3, r3
 8007152:	222e      	movs	r2, #46	; 0x2e
 8007154:	66aa      	str	r2, [r5, #104]	; 0x68
 8007156:	002a      	movs	r2, r5
 8007158:	3270      	adds	r2, #112	; 0x70
 800715a:	7013      	strb	r3, [r2, #0]
 800715c:	0030      	movs	r0, r6
 800715e:	f7fb fc09 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 8007162:	2803      	cmp	r0, #3
 8007164:	d813      	bhi.n	800718e <initialize.lto_priv.310+0x876>
 8007166:	2300      	movs	r3, #0
 8007168:	f007 fcd0 	bl	800eb0c <__gnu_thumb1_case_uqi>
 800716c:	33231d0d 	.word	0x33231d0d
 8007170:	1bc9      	subs	r1, r1, r7
 8007172:	1e48      	subs	r0, r1, #1
 8007174:	4181      	sbcs	r1, r0
 8007176:	1b12      	subs	r2, r2, r4
 8007178:	b2c9      	uxtb	r1, r1
 800717a:	9110      	str	r1, [sp, #64]	; 0x40
 800717c:	1e51      	subs	r1, r2, #1
 800717e:	418a      	sbcs	r2, r1
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	9212      	str	r2, [sp, #72]	; 0x48
 8007184:	e78c      	b.n	80070a0 <initialize.lto_priv.310+0x788>
 8007186:	626b      	str	r3, [r5, #36]	; 0x24
 8007188:	62ab      	str	r3, [r5, #40]	; 0x28
 800718a:	62eb      	str	r3, [r5, #44]	; 0x2c
 800718c:	632b      	str	r3, [r5, #48]	; 0x30
 800718e:	0030      	movs	r0, r6
 8007190:	f7fb fc17 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 8007194:	2804      	cmp	r0, #4
 8007196:	d829      	bhi.n	80071ec <initialize.lto_priv.310+0x8d4>
 8007198:	2300      	movs	r3, #0
 800719a:	2201      	movs	r2, #1
 800719c:	f007 fcb6 	bl	800eb0c <__gnu_thumb1_case_uqi>
 80071a0:	f0ec2323 	.word	0xf0ec2323
 80071a4:	e8          	.byte	0xe8
 80071a5:	00          	.byte	0x00
 80071a6:	2201      	movs	r2, #1
 80071a8:	626b      	str	r3, [r5, #36]	; 0x24
 80071aa:	62aa      	str	r2, [r5, #40]	; 0x28
 80071ac:	62eb      	str	r3, [r5, #44]	; 0x2c
 80071ae:	632b      	str	r3, [r5, #48]	; 0x30
 80071b0:	e7ed      	b.n	800718e <initialize.lto_priv.310+0x876>
 80071b2:	0030      	movs	r0, r6
 80071b4:	f7fb fbc8 	bl	8002948 <acc_base_configuration_update_rate_get>
 80071b8:	aa1a      	add	r2, sp, #104	; 0x68
 80071ba:	a91b      	add	r1, sp, #108	; 0x6c
 80071bc:	f7fe ffb8 	bl	8006130 <acc_radar_engine_common_frequency_to_main_clk>
 80071c0:	2301      	movs	r3, #1
 80071c2:	626b      	str	r3, [r5, #36]	; 0x24
 80071c4:	2300      	movs	r3, #0
 80071c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80071c8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80071ca:	62eb      	str	r3, [r5, #44]	; 0x2c
 80071cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071ce:	632b      	str	r3, [r5, #48]	; 0x30
 80071d0:	e7dd      	b.n	800718e <initialize.lto_priv.310+0x876>
 80071d2:	0030      	movs	r0, r6
 80071d4:	f7fb fbb8 	bl	8002948 <acc_base_configuration_update_rate_get>
 80071d8:	aa1a      	add	r2, sp, #104	; 0x68
 80071da:	a91b      	add	r1, sp, #108	; 0x6c
 80071dc:	f7fe ffa8 	bl	8006130 <acc_radar_engine_common_frequency_to_main_clk>
 80071e0:	2301      	movs	r3, #1
 80071e2:	626b      	str	r3, [r5, #36]	; 0x24
 80071e4:	e7ef      	b.n	80071c6 <initialize.lto_priv.310+0x8ae>
 80071e6:	636a      	str	r2, [r5, #52]	; 0x34
 80071e8:	63aa      	str	r2, [r5, #56]	; 0x38
 80071ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 80071ec:	0030      	movs	r0, r6
 80071ee:	f7ff f9bf 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80071f2:	2300      	movs	r3, #0
 80071f4:	0004      	movs	r4, r0
 80071f6:	4298      	cmp	r0, r3
 80071f8:	d00b      	beq.n	8007212 <initialize.lto_priv.310+0x8fa>
 80071fa:	0033      	movs	r3, r6
 80071fc:	3350      	adds	r3, #80	; 0x50
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	9317      	str	r3, [sp, #92]	; 0x5c
 8007202:	0033      	movs	r3, r6
 8007204:	3352      	adds	r3, #82	; 0x52
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	9319      	str	r3, [sp, #100]	; 0x64
 800720a:	0033      	movs	r3, r6
 800720c:	334f      	adds	r3, #79	; 0x4f
 800720e:	781c      	ldrb	r4, [r3, #0]
 8007210:	0023      	movs	r3, r4
 8007212:	002a      	movs	r2, r5
 8007214:	3208      	adds	r2, #8
 8007216:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007218:	2c00      	cmp	r4, #0
 800721a:	d003      	beq.n	8007224 <initialize.lto_priv.310+0x90c>
 800721c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800721e:	3280      	adds	r2, #128	; 0x80
 8007220:	3b01      	subs	r3, #1
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	0030      	movs	r0, r6
 8007226:	f7fb fbc3 	bl	80029b0 <acc_base_configuration_tx_disable_get>
 800722a:	2701      	movs	r7, #1
 800722c:	2800      	cmp	r0, #0
 800722e:	d000      	beq.n	8007232 <initialize.lto_priv.310+0x91a>
 8007230:	e0aa      	b.n	8007388 <initialize.lto_priv.310+0xa70>
 8007232:	2c00      	cmp	r4, #0
 8007234:	d001      	beq.n	800723a <initialize.lto_priv.310+0x922>
 8007236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007238:	930e      	str	r3, [sp, #56]	; 0x38
 800723a:	003b      	movs	r3, r7
 800723c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800723e:	0030      	movs	r0, r6
 8007240:	4393      	bics	r3, r2
 8007242:	642b      	str	r3, [r5, #64]	; 0x40
 8007244:	f7fb fbab 	bl	800299e <acc_base_configuration_decrease_tx_emission_get>
 8007248:	4078      	eors	r0, r7
 800724a:	b2c0      	uxtb	r0, r0
 800724c:	6468      	str	r0, [r5, #68]	; 0x44
 800724e:	64af      	str	r7, [r5, #72]	; 0x48
 8007250:	0030      	movs	r0, r6
 8007252:	f7fb fb99 	bl	8002988 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007256:	2801      	cmp	r0, #1
 8007258:	d800      	bhi.n	800725c <initialize.lto_priv.310+0x944>
 800725a:	e097      	b.n	800738c <initialize.lto_priv.310+0xa74>
 800725c:	2301      	movs	r3, #1
 800725e:	3802      	subs	r0, #2
 8007260:	6528      	str	r0, [r5, #80]	; 0x50
 8007262:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007264:	0030      	movs	r0, r6
 8007266:	f7ff f983 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800726a:	2300      	movs	r3, #0
 800726c:	4298      	cmp	r0, r3
 800726e:	d000      	beq.n	8007272 <initialize.lto_priv.310+0x95a>
 8007270:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8007272:	656b      	str	r3, [r5, #84]	; 0x54
 8007274:	0030      	movs	r0, r6
 8007276:	f7fb fb5c 	bl	8002932 <acc_base_configuration_integrator_get>
 800727a:	65a8      	str	r0, [r5, #88]	; 0x58
 800727c:	0030      	movs	r0, r6
 800727e:	f7fb fb4d 	bl	800291c <acc_base_configuration_wg_duration_get>
 8007282:	65e8      	str	r0, [r5, #92]	; 0x5c
 8007284:	0030      	movs	r0, r6
 8007286:	f7fb fb11 	bl	80028ac <acc_base_configuration_sparse_sweeps_per_frame_get>
 800728a:	6628      	str	r0, [r5, #96]	; 0x60
 800728c:	0030      	movs	r0, r6
 800728e:	f7fa fde9 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 8007292:	67a8      	str	r0, [r5, #120]	; 0x78
 8007294:	0030      	movs	r0, r6
 8007296:	f7fa fdd3 	bl	8001e40 <acc_base_configuration_asynchronous_measurement_get>
 800729a:	2601      	movs	r6, #1
 800729c:	465b      	mov	r3, fp
 800729e:	4070      	eors	r0, r6
 80072a0:	b2c0      	uxtb	r0, r0
 80072a2:	67e8      	str	r0, [r5, #124]	; 0x7c
 80072a4:	889b      	ldrh	r3, [r3, #4]
 80072a6:	666b      	str	r3, [r5, #100]	; 0x64
 80072a8:	465b      	mov	r3, fp
 80072aa:	895b      	ldrh	r3, [r3, #10]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	66eb      	str	r3, [r5, #108]	; 0x6c
 80072b0:	465b      	mov	r3, fp
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	33b6      	adds	r3, #182	; 0xb6
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	676b      	str	r3, [r5, #116]	; 0x74
 80072ba:	f7fe ff31 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 80072be:	1d2b      	adds	r3, r5, #4
 80072c0:	67d8      	str	r0, [r3, #124]	; 0x7c
 80072c2:	f7ff f87d 	bl	80063c0 <get_pll_freq>
 80072c6:	1c07      	adds	r7, r0, #0
 80072c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ca:	f008 f87f 	bl	800f3cc <__aeabi_ui2f>
 80072ce:	1c04      	adds	r4, r0, #0
 80072d0:	20fe      	movs	r0, #254	; 0xfe
 80072d2:	1c39      	adds	r1, r7, #0
 80072d4:	0580      	lsls	r0, r0, #22
 80072d6:	f006 ffe9 	bl	800e2ac <__aeabi_fdiv>
 80072da:	1c01      	adds	r1, r0, #0
 80072dc:	1c20      	adds	r0, r4, #0
 80072de:	f007 f8f7 	bl	800e4d0 <__aeabi_fmul>
 80072e2:	4653      	mov	r3, sl
 80072e4:	60d8      	str	r0, [r3, #12]
 80072e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80072ea:	35b8      	adds	r5, #184	; 0xb8
 80072ec:	4358      	muls	r0, r3
 80072ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072f0:	469c      	mov	ip, r3
 80072f2:	4460      	add	r0, ip
 80072f4:	f008 f86a 	bl	800f3cc <__aeabi_ui2f>
 80072f8:	1c01      	adds	r1, r0, #0
 80072fa:	9814      	ldr	r0, [sp, #80]	; 0x50
 80072fc:	f006 ffd6 	bl	800e2ac <__aeabi_fdiv>
 8007300:	4653      	mov	r3, sl
 8007302:	6118      	str	r0, [r3, #16]
 8007304:	9807      	ldr	r0, [sp, #28]
 8007306:	f7ff f86d 	bl	80063e4 <points_to_meter.lto_priv.303>
 800730a:	4653      	mov	r3, sl
 800730c:	6018      	str	r0, [r3, #0]
 800730e:	4640      	mov	r0, r8
 8007310:	f7ff f868 	bl	80063e4 <points_to_meter.lto_priv.303>
 8007314:	4653      	mov	r3, sl
 8007316:	6819      	ldr	r1, [r3, #0]
 8007318:	6098      	str	r0, [r3, #8]
 800731a:	f007 fa0b 	bl	800e734 <__aeabi_fsub>
 800731e:	4653      	mov	r3, sl
 8007320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007322:	6058      	str	r0, [r3, #4]
 8007324:	82da      	strh	r2, [r3, #22]
 8007326:	2300      	movs	r3, #0
 8007328:	4652      	mov	r2, sl
 800732a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800732c:	8293      	strh	r3, [r2, #20]
 800732e:	8316      	strh	r6, [r2, #24]
 8007330:	9a08      	ldr	r2, [sp, #32]
 8007332:	2013      	movs	r0, #19
 8007334:	8011      	strh	r1, [r2, #0]
 8007336:	8151      	strh	r1, [r2, #10]
 8007338:	990a      	ldr	r1, [sp, #40]	; 0x28
 800733a:	8053      	strh	r3, [r2, #2]
 800733c:	8111      	strh	r1, [r2, #8]
 800733e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007340:	8313      	strh	r3, [r2, #24]
 8007342:	8091      	strh	r1, [r2, #4]
 8007344:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007346:	80d6      	strh	r6, [r2, #6]
 8007348:	8291      	strh	r1, [r2, #20]
 800734a:	82d1      	strh	r1, [r2, #22]
 800734c:	4659      	mov	r1, fp
 800734e:	8216      	strh	r6, [r2, #16]
 8007350:	aa1b      	add	r2, sp, #108	; 0x6c
 8007352:	8013      	strh	r3, [r2, #0]
 8007354:	6809      	ldr	r1, [r1, #0]
 8007356:	0033      	movs	r3, r6
 8007358:	f006 fb88 	bl	800da6c <acc_probes_execute_uint16>
 800735c:	882b      	ldrh	r3, [r5, #0]
 800735e:	9a08      	ldr	r2, [sp, #32]
 8007360:	3303      	adds	r3, #3
 8007362:	81d3      	strh	r3, [r2, #14]
 8007364:	2380      	movs	r3, #128	; 0x80
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	8193      	strh	r3, [r2, #12]
 800736a:	0030      	movs	r0, r6
 800736c:	f7ff faed 	bl	800694a <initialize.lto_priv.310+0x32>
 8007370:	636a      	str	r2, [r5, #52]	; 0x34
 8007372:	63aa      	str	r2, [r5, #56]	; 0x38
 8007374:	63ea      	str	r2, [r5, #60]	; 0x3c
 8007376:	e739      	b.n	80071ec <initialize.lto_priv.310+0x8d4>
 8007378:	636a      	str	r2, [r5, #52]	; 0x34
 800737a:	63ab      	str	r3, [r5, #56]	; 0x38
 800737c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800737e:	e735      	b.n	80071ec <initialize.lto_priv.310+0x8d4>
 8007380:	636b      	str	r3, [r5, #52]	; 0x34
 8007382:	63ab      	str	r3, [r5, #56]	; 0x38
 8007384:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007386:	e731      	b.n	80071ec <initialize.lto_priv.310+0x8d4>
 8007388:	970e      	str	r7, [sp, #56]	; 0x38
 800738a:	e756      	b.n	800723a <initialize.lto_priv.310+0x922>
 800738c:	2000      	movs	r0, #0
 800738e:	0003      	movs	r3, r0
 8007390:	e766      	b.n	8007260 <initialize.lto_priv.310+0x948>
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	80000007 	.word	0x80000007

08007398 <initialize.lto_priv.309>:
 8007398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739a:	464e      	mov	r6, r9
 800739c:	46de      	mov	lr, fp
 800739e:	4657      	mov	r7, sl
 80073a0:	4645      	mov	r5, r8
 80073a2:	b5e0      	push	{r5, r6, r7, lr}
 80073a4:	b097      	sub	sp, #92	; 0x5c
 80073a6:	9306      	str	r3, [sp, #24]
 80073a8:	2332      	movs	r3, #50	; 0x32
 80073aa:	469a      	mov	sl, r3
 80073ac:	448a      	add	sl, r1
 80073ae:	4653      	mov	r3, sl
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	4681      	mov	r9, r0
 80073b4:	000e      	movs	r6, r1
 80073b6:	4693      	mov	fp, r2
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d00f      	beq.n	80073dc <initialize.lto_priv.309+0x44>
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d00d      	beq.n	80073dc <initialize.lto_priv.309+0x44>
 80073c0:	4b7a      	ldr	r3, [pc, #488]	; (80075ac <initialize.lto_priv.309+0x214>)
 80073c2:	2000      	movs	r0, #0
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c6:	4a7a      	ldr	r2, [pc, #488]	; (80075b0 <initialize.lto_priv.309+0x218>)
 80073c8:	497a      	ldr	r1, [pc, #488]	; (80075b4 <initialize.lto_priv.309+0x21c>)
 80073ca:	4798      	blx	r3
 80073cc:	2000      	movs	r0, #0
 80073ce:	b017      	add	sp, #92	; 0x5c
 80073d0:	bc3c      	pop	{r2, r3, r4, r5}
 80073d2:	4690      	mov	r8, r2
 80073d4:	4699      	mov	r9, r3
 80073d6:	46a2      	mov	sl, r4
 80073d8:	46ab      	mov	fp, r5
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073dc:	464b      	mov	r3, r9
 80073de:	0030      	movs	r0, r6
 80073e0:	695d      	ldr	r5, [r3, #20]
 80073e2:	f7ff f8c5 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80073e6:	2300      	movs	r3, #0
 80073e8:	4298      	cmp	r0, r3
 80073ea:	d00c      	beq.n	8007406 <initialize.lto_priv.309+0x6e>
 80073ec:	0032      	movs	r2, r6
 80073ee:	324f      	adds	r2, #79	; 0x4f
 80073f0:	7810      	ldrb	r0, [r2, #0]
 80073f2:	0033      	movs	r3, r6
 80073f4:	0002      	movs	r2, r0
 80073f6:	1e51      	subs	r1, r2, #1
 80073f8:	418a      	sbcs	r2, r1
 80073fa:	3350      	adds	r3, #80	; 0x50
 80073fc:	781c      	ldrb	r4, [r3, #0]
 80073fe:	3302      	adds	r3, #2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	4252      	negs	r2, r2
 8007404:	4013      	ands	r3, r2
 8007406:	002a      	movs	r2, r5
 8007408:	32ce      	adds	r2, #206	; 0xce
 800740a:	8013      	strh	r3, [r2, #0]
 800740c:	2800      	cmp	r0, #0
 800740e:	d000      	beq.n	8007412 <initialize.lto_priv.309+0x7a>
 8007410:	0020      	movs	r0, r4
 8007412:	002b      	movs	r3, r5
 8007414:	33d0      	adds	r3, #208	; 0xd0
 8007416:	7018      	strb	r0, [r3, #0]
 8007418:	0030      	movs	r0, r6
 800741a:	f7fa fd23 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 800741e:	002b      	movs	r3, r5
 8007420:	2700      	movs	r7, #0
 8007422:	33cc      	adds	r3, #204	; 0xcc
 8007424:	8018      	strh	r0, [r3, #0]
 8007426:	3b10      	subs	r3, #16
 8007428:	601f      	str	r7, [r3, #0]
 800742a:	0030      	movs	r0, r6
 800742c:	f7fb fac0 	bl	80029b0 <acc_base_configuration_tx_disable_get>
 8007430:	002b      	movs	r3, r5
 8007432:	2201      	movs	r2, #1
 8007434:	33c0      	adds	r3, #192	; 0xc0
 8007436:	7018      	strb	r0, [r3, #0]
 8007438:	3b13      	subs	r3, #19
 800743a:	701a      	strb	r2, [r3, #0]
 800743c:	0028      	movs	r0, r5
 800743e:	f7fe fb3d 	bl	8005abc <get_package_range_coarse_max>
 8007442:	9008      	str	r0, [sp, #32]
 8007444:	0030      	movs	r0, r6
 8007446:	f7ff f893 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800744a:	42b8      	cmp	r0, r7
 800744c:	d052      	beq.n	80074f4 <initialize.lto_priv.309+0x15c>
 800744e:	0033      	movs	r3, r6
 8007450:	332c      	adds	r3, #44	; 0x2c
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	42bb      	cmp	r3, r7
 8007456:	d04d      	beq.n	80074f4 <initialize.lto_priv.309+0x15c>
 8007458:	0030      	movs	r0, r6
 800745a:	f7ff f889 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800745e:	42b8      	cmp	r0, r7
 8007460:	d001      	beq.n	8007466 <initialize.lto_priv.309+0xce>
 8007462:	2334      	movs	r3, #52	; 0x34
 8007464:	5ef7      	ldrsh	r7, [r6, r3]
 8007466:	0030      	movs	r0, r6
 8007468:	f7ff f882 	bl	8006570 <configuration_is_valid.lto_priv.677>
 800746c:	2300      	movs	r3, #0
 800746e:	4298      	cmp	r0, r3
 8007470:	d001      	beq.n	8007476 <initialize.lto_priv.309+0xde>
 8007472:	2236      	movs	r2, #54	; 0x36
 8007474:	5eb3      	ldrsh	r3, [r6, r2]
 8007476:	4698      	mov	r8, r3
 8007478:	44b8      	add	r8, r7
 800747a:	0033      	movs	r3, r6
 800747c:	332e      	adds	r3, #46	; 0x2e
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d100      	bne.n	8007486 <initialize.lto_priv.309+0xee>
 8007484:	e08e      	b.n	80075a4 <initialize.lto_priv.309+0x20c>
 8007486:	8e34      	ldrh	r4, [r6, #48]	; 0x30
 8007488:	0030      	movs	r0, r6
 800748a:	f7fa fceb 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 800748e:	4682      	mov	sl, r0
 8007490:	2801      	cmp	r0, #1
 8007492:	d925      	bls.n	80074e0 <initialize.lto_priv.309+0x148>
 8007494:	2802      	cmp	r0, #2
 8007496:	d10c      	bne.n	80074b2 <initialize.lto_priv.309+0x11a>
 8007498:	07fb      	lsls	r3, r7, #31
 800749a:	d40a      	bmi.n	80074b2 <initialize.lto_priv.309+0x11a>
 800749c:	4b43      	ldr	r3, [pc, #268]	; (80075ac <initialize.lto_priv.309+0x214>)
 800749e:	001a      	movs	r2, r3
 80074a0:	3230      	adds	r2, #48	; 0x30
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	2a01      	cmp	r2, #1
 80074a6:	d903      	bls.n	80074b0 <initialize.lto_priv.309+0x118>
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	4a43      	ldr	r2, [pc, #268]	; (80075b8 <initialize.lto_priv.309+0x220>)
 80074ac:	4943      	ldr	r1, [pc, #268]	; (80075bc <initialize.lto_priv.309+0x224>)
 80074ae:	4798      	blx	r3
 80074b0:	3701      	adds	r7, #1
 80074b2:	4643      	mov	r3, r8
 80074b4:	4651      	mov	r1, sl
 80074b6:	1bd8      	subs	r0, r3, r7
 80074b8:	f007 fcac 	bl	800ee14 <__aeabi_idivmod>
 80074bc:	468a      	mov	sl, r1
 80074be:	2900      	cmp	r1, #0
 80074c0:	dd0e      	ble.n	80074e0 <initialize.lto_priv.309+0x148>
 80074c2:	4b3a      	ldr	r3, [pc, #232]	; (80075ac <initialize.lto_priv.309+0x214>)
 80074c4:	001a      	movs	r2, r3
 80074c6:	3230      	adds	r2, #48	; 0x30
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	2a01      	cmp	r2, #1
 80074cc:	d904      	bls.n	80074d8 <initialize.lto_priv.309+0x140>
 80074ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d0:	4a3b      	ldr	r2, [pc, #236]	; (80075c0 <initialize.lto_priv.309+0x228>)
 80074d2:	493a      	ldr	r1, [pc, #232]	; (80075bc <initialize.lto_priv.309+0x224>)
 80074d4:	2002      	movs	r0, #2
 80074d6:	4798      	blx	r3
 80074d8:	4643      	mov	r3, r8
 80074da:	4652      	mov	r2, sl
 80074dc:	1a9b      	subs	r3, r3, r2
 80074de:	4698      	mov	r8, r3
 80074e0:	45b8      	cmp	r8, r7
 80074e2:	da73      	bge.n	80075cc <initialize.lto_priv.309+0x234>
 80074e4:	4b31      	ldr	r3, [pc, #196]	; (80075ac <initialize.lto_priv.309+0x214>)
 80074e6:	4a37      	ldr	r2, [pc, #220]	; (80075c4 <initialize.lto_priv.309+0x22c>)
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	4934      	ldr	r1, [pc, #208]	; (80075bc <initialize.lto_priv.309+0x224>)
 80074ec:	2000      	movs	r0, #0
 80074ee:	4798      	blx	r3
 80074f0:	2000      	movs	r0, #0
 80074f2:	e76c      	b.n	80073ce <initialize.lto_priv.309+0x36>
 80074f4:	0030      	movs	r0, r6
 80074f6:	f7ff f83b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80074fa:	2400      	movs	r4, #0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d000      	beq.n	8007502 <initialize.lto_priv.309+0x16a>
 8007500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007502:	0030      	movs	r0, r6
 8007504:	f7ff f834 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007508:	2800      	cmp	r0, #0
 800750a:	d043      	beq.n	8007594 <initialize.lto_priv.309+0x1fc>
 800750c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800750e:	1c21      	adds	r1, r4, #0
 8007510:	f006 fd32 	bl	800df78 <__aeabi_fadd>
 8007514:	4680      	mov	r8, r0
 8007516:	f003 fc4b 	bl	800adb0 <get_dt.constprop.10>
 800751a:	1c21      	adds	r1, r4, #0
 800751c:	9007      	str	r0, [sp, #28]
 800751e:	1c20      	adds	r0, r4, #0
 8007520:	f006 fd2a 	bl	800df78 <__aeabi_fadd>
 8007524:	4928      	ldr	r1, [pc, #160]	; (80075c8 <initialize.lto_priv.309+0x230>)
 8007526:	1c07      	adds	r7, r0, #0
 8007528:	9807      	ldr	r0, [sp, #28]
 800752a:	f006 ffd1 	bl	800e4d0 <__aeabi_fmul>
 800752e:	1c01      	adds	r1, r0, #0
 8007530:	1c38      	adds	r0, r7, #0
 8007532:	f006 febb 	bl	800e2ac <__aeabi_fdiv>
 8007536:	2100      	movs	r1, #0
 8007538:	1c07      	adds	r7, r0, #0
 800753a:	1c20      	adds	r0, r4, #0
 800753c:	f007 fcc0 	bl	800eec0 <__aeabi_fcmplt>
 8007540:	2800      	cmp	r0, #0
 8007542:	d129      	bne.n	8007598 <initialize.lto_priv.309+0x200>
 8007544:	21fc      	movs	r1, #252	; 0xfc
 8007546:	0589      	lsls	r1, r1, #22
 8007548:	1c38      	adds	r0, r7, #0
 800754a:	f006 fd15 	bl	800df78 <__aeabi_fadd>
 800754e:	f007 fed3 	bl	800f2f8 <__aeabi_f2iz>
 8007552:	0007      	movs	r7, r0
 8007554:	f003 fc2c 	bl	800adb0 <get_dt.constprop.10>
 8007558:	4641      	mov	r1, r8
 800755a:	9007      	str	r0, [sp, #28]
 800755c:	4640      	mov	r0, r8
 800755e:	f006 fd0b 	bl	800df78 <__aeabi_fadd>
 8007562:	4919      	ldr	r1, [pc, #100]	; (80075c8 <initialize.lto_priv.309+0x230>)
 8007564:	1c04      	adds	r4, r0, #0
 8007566:	9807      	ldr	r0, [sp, #28]
 8007568:	f006 ffb2 	bl	800e4d0 <__aeabi_fmul>
 800756c:	1c01      	adds	r1, r0, #0
 800756e:	1c20      	adds	r0, r4, #0
 8007570:	f006 fe9c 	bl	800e2ac <__aeabi_fdiv>
 8007574:	2100      	movs	r1, #0
 8007576:	1c04      	adds	r4, r0, #0
 8007578:	4640      	mov	r0, r8
 800757a:	f007 fca1 	bl	800eec0 <__aeabi_fcmplt>
 800757e:	2800      	cmp	r0, #0
 8007580:	d10d      	bne.n	800759e <initialize.lto_priv.309+0x206>
 8007582:	21fc      	movs	r1, #252	; 0xfc
 8007584:	0589      	lsls	r1, r1, #22
 8007586:	1c20      	adds	r0, r4, #0
 8007588:	f006 fcf6 	bl	800df78 <__aeabi_fadd>
 800758c:	f007 feb4 	bl	800f2f8 <__aeabi_f2iz>
 8007590:	4680      	mov	r8, r0
 8007592:	e772      	b.n	800747a <initialize.lto_priv.309+0xe2>
 8007594:	2000      	movs	r0, #0
 8007596:	e7ba      	b.n	800750e <initialize.lto_priv.309+0x176>
 8007598:	21bf      	movs	r1, #191	; 0xbf
 800759a:	0609      	lsls	r1, r1, #24
 800759c:	e7d4      	b.n	8007548 <initialize.lto_priv.309+0x1b0>
 800759e:	21bf      	movs	r1, #191	; 0xbf
 80075a0:	0609      	lsls	r1, r1, #24
 80075a2:	e7f0      	b.n	8007586 <initialize.lto_priv.309+0x1ee>
 80075a4:	4653      	mov	r3, sl
 80075a6:	781c      	ldrb	r4, [r3, #0]
 80075a8:	e76e      	b.n	8007488 <initialize.lto_priv.309+0xf0>
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	200002b8 	.word	0x200002b8
 80075b0:	0801cc54 	.word	0x0801cc54
 80075b4:	0801c8b8 	.word	0x0801c8b8
 80075b8:	0801cea5 	.word	0x0801cea5
 80075bc:	0801ceda 	.word	0x0801ceda
 80075c0:	0801cd0c 	.word	0x0801cd0c
 80075c4:	0801cd3f 	.word	0x0801cd3f
 80075c8:	4d8ef3c2 	.word	0x4d8ef3c2
 80075cc:	0030      	movs	r0, r6
 80075ce:	f7fe ffcf 	bl	8006570 <configuration_is_valid.lto_priv.677>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	d005      	beq.n	80075e2 <initialize.lto_priv.309+0x24a>
 80075d6:	0033      	movs	r3, r6
 80075d8:	336e      	adds	r3, #110	; 0x6e
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d000      	beq.n	80075e2 <initialize.lto_priv.309+0x24a>
 80075e0:	e1b8      	b.n	8007954 <initialize.lto_priv.309+0x5bc>
 80075e2:	4bd2      	ldr	r3, [pc, #840]	; (800792c <initialize.lto_priv.309+0x594>)
 80075e4:	429f      	cmp	r7, r3
 80075e6:	db00      	blt.n	80075ea <initialize.lto_priv.309+0x252>
 80075e8:	e0cb      	b.n	8007782 <initialize.lto_priv.309+0x3ea>
 80075ea:	4bd1      	ldr	r3, [pc, #836]	; (8007930 <initialize.lto_priv.309+0x598>)
 80075ec:	0038      	movs	r0, r7
 80075ee:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80075f0:	f003 fbfa 	bl	800ade8 <points_to_meter.constprop.9>
 80075f4:	2100      	movs	r1, #0
 80075f6:	f007 fc63 	bl	800eec0 <__aeabi_fcmplt>
 80075fa:	4cce      	ldr	r4, [pc, #824]	; (8007934 <initialize.lto_priv.309+0x59c>)
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d100      	bne.n	8007602 <initialize.lto_priv.309+0x26a>
 8007600:	4ccd      	ldr	r4, [pc, #820]	; (8007938 <initialize.lto_priv.309+0x5a0>)
 8007602:	0038      	movs	r0, r7
 8007604:	f003 fbf0 	bl	800ade8 <points_to_meter.constprop.9>
 8007608:	1c05      	adds	r5, r0, #0
 800760a:	0038      	movs	r0, r7
 800760c:	f003 fbec 	bl	800ade8 <points_to_meter.constprop.9>
 8007610:	2100      	movs	r1, #0
 8007612:	f007 fc55 	bl	800eec0 <__aeabi_fcmplt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d000      	beq.n	800761c <initialize.lto_priv.309+0x284>
 800761a:	e0a6      	b.n	800776a <initialize.lto_priv.309+0x3d2>
 800761c:	21fe      	movs	r1, #254	; 0xfe
 800761e:	0589      	lsls	r1, r1, #22
 8007620:	1c28      	adds	r0, r5, #0
 8007622:	f006 ff55 	bl	800e4d0 <__aeabi_fmul>
 8007626:	49c5      	ldr	r1, [pc, #788]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007628:	f006 fca6 	bl	800df78 <__aeabi_fadd>
 800762c:	f007 fc90 	bl	800ef50 <__aeabi_f2uiz>
 8007630:	4680      	mov	r8, r0
 8007632:	0038      	movs	r0, r7
 8007634:	f003 fbd8 	bl	800ade8 <points_to_meter.constprop.9>
 8007638:	1c05      	adds	r5, r0, #0
 800763a:	0038      	movs	r0, r7
 800763c:	f003 fbd4 	bl	800ade8 <points_to_meter.constprop.9>
 8007640:	2100      	movs	r1, #0
 8007642:	f007 fc3d 	bl	800eec0 <__aeabi_fcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d000      	beq.n	800764c <initialize.lto_priv.309+0x2b4>
 800764a:	e090      	b.n	800776e <initialize.lto_priv.309+0x3d6>
 800764c:	21fe      	movs	r1, #254	; 0xfe
 800764e:	0589      	lsls	r1, r1, #22
 8007650:	1c28      	adds	r0, r5, #0
 8007652:	f006 ff3d 	bl	800e4d0 <__aeabi_fmul>
 8007656:	49b9      	ldr	r1, [pc, #740]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007658:	f006 fc8e 	bl	800df78 <__aeabi_fadd>
 800765c:	1c05      	adds	r5, r0, #0
 800765e:	0038      	movs	r0, r7
 8007660:	f003 fbc2 	bl	800ade8 <points_to_meter.constprop.9>
 8007664:	4681      	mov	r9, r0
 8007666:	0038      	movs	r0, r7
 8007668:	f003 fbbe 	bl	800ade8 <points_to_meter.constprop.9>
 800766c:	2100      	movs	r1, #0
 800766e:	f007 fc27 	bl	800eec0 <__aeabi_fcmplt>
 8007672:	2800      	cmp	r0, #0
 8007674:	d17d      	bne.n	8007772 <initialize.lto_priv.309+0x3da>
 8007676:	21fe      	movs	r1, #254	; 0xfe
 8007678:	0589      	lsls	r1, r1, #22
 800767a:	4648      	mov	r0, r9
 800767c:	f006 ff28 	bl	800e4d0 <__aeabi_fmul>
 8007680:	49ae      	ldr	r1, [pc, #696]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007682:	f006 fc79 	bl	800df78 <__aeabi_fadd>
 8007686:	f007 fc63 	bl	800ef50 <__aeabi_f2uiz>
 800768a:	f007 fe9f 	bl	800f3cc <__aeabi_ui2f>
 800768e:	1c01      	adds	r1, r0, #0
 8007690:	1c28      	adds	r0, r5, #0
 8007692:	f007 f84f 	bl	800e734 <__aeabi_fsub>
 8007696:	49aa      	ldr	r1, [pc, #680]	; (8007940 <initialize.lto_priv.309+0x5a8>)
 8007698:	f006 ff1a 	bl	800e4d0 <__aeabi_fmul>
 800769c:	f007 fc58 	bl	800ef50 <__aeabi_f2uiz>
 80076a0:	0007      	movs	r7, r0
 80076a2:	48a2      	ldr	r0, [pc, #648]	; (800792c <initialize.lto_priv.309+0x594>)
 80076a4:	f003 fba0 	bl	800ade8 <points_to_meter.constprop.9>
 80076a8:	2100      	movs	r1, #0
 80076aa:	f007 fc09 	bl	800eec0 <__aeabi_fcmplt>
 80076ae:	4da1      	ldr	r5, [pc, #644]	; (8007934 <initialize.lto_priv.309+0x59c>)
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d100      	bne.n	80076b6 <initialize.lto_priv.309+0x31e>
 80076b4:	4da0      	ldr	r5, [pc, #640]	; (8007938 <initialize.lto_priv.309+0x5a0>)
 80076b6:	489d      	ldr	r0, [pc, #628]	; (800792c <initialize.lto_priv.309+0x594>)
 80076b8:	f003 fb96 	bl	800ade8 <points_to_meter.constprop.9>
 80076bc:	4681      	mov	r9, r0
 80076be:	489b      	ldr	r0, [pc, #620]	; (800792c <initialize.lto_priv.309+0x594>)
 80076c0:	f003 fb92 	bl	800ade8 <points_to_meter.constprop.9>
 80076c4:	2100      	movs	r1, #0
 80076c6:	f007 fbfb 	bl	800eec0 <__aeabi_fcmplt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d153      	bne.n	8007776 <initialize.lto_priv.309+0x3de>
 80076ce:	21fe      	movs	r1, #254	; 0xfe
 80076d0:	0589      	lsls	r1, r1, #22
 80076d2:	4648      	mov	r0, r9
 80076d4:	f006 fefc 	bl	800e4d0 <__aeabi_fmul>
 80076d8:	4998      	ldr	r1, [pc, #608]	; (800793c <initialize.lto_priv.309+0x5a4>)
 80076da:	f006 fc4d 	bl	800df78 <__aeabi_fadd>
 80076de:	f007 fc37 	bl	800ef50 <__aeabi_f2uiz>
 80076e2:	4681      	mov	r9, r0
 80076e4:	4891      	ldr	r0, [pc, #580]	; (800792c <initialize.lto_priv.309+0x594>)
 80076e6:	f003 fb7f 	bl	800ade8 <points_to_meter.constprop.9>
 80076ea:	4682      	mov	sl, r0
 80076ec:	488f      	ldr	r0, [pc, #572]	; (800792c <initialize.lto_priv.309+0x594>)
 80076ee:	f003 fb7b 	bl	800ade8 <points_to_meter.constprop.9>
 80076f2:	2100      	movs	r1, #0
 80076f4:	f007 fbe4 	bl	800eec0 <__aeabi_fcmplt>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d13e      	bne.n	800777a <initialize.lto_priv.309+0x3e2>
 80076fc:	21fe      	movs	r1, #254	; 0xfe
 80076fe:	0589      	lsls	r1, r1, #22
 8007700:	4650      	mov	r0, sl
 8007702:	f006 fee5 	bl	800e4d0 <__aeabi_fmul>
 8007706:	498d      	ldr	r1, [pc, #564]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007708:	f006 fc36 	bl	800df78 <__aeabi_fadd>
 800770c:	4682      	mov	sl, r0
 800770e:	4887      	ldr	r0, [pc, #540]	; (800792c <initialize.lto_priv.309+0x594>)
 8007710:	f003 fb6a 	bl	800ade8 <points_to_meter.constprop.9>
 8007714:	4683      	mov	fp, r0
 8007716:	4885      	ldr	r0, [pc, #532]	; (800792c <initialize.lto_priv.309+0x594>)
 8007718:	f003 fb66 	bl	800ade8 <points_to_meter.constprop.9>
 800771c:	2100      	movs	r1, #0
 800771e:	f007 fbcf 	bl	800eec0 <__aeabi_fcmplt>
 8007722:	2800      	cmp	r0, #0
 8007724:	d12b      	bne.n	800777e <initialize.lto_priv.309+0x3e6>
 8007726:	21fe      	movs	r1, #254	; 0xfe
 8007728:	0589      	lsls	r1, r1, #22
 800772a:	4658      	mov	r0, fp
 800772c:	f006 fed0 	bl	800e4d0 <__aeabi_fmul>
 8007730:	4982      	ldr	r1, [pc, #520]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007732:	f006 fc21 	bl	800df78 <__aeabi_fadd>
 8007736:	f007 fc0b 	bl	800ef50 <__aeabi_f2uiz>
 800773a:	f007 fe47 	bl	800f3cc <__aeabi_ui2f>
 800773e:	1c01      	adds	r1, r0, #0
 8007740:	4650      	mov	r0, sl
 8007742:	f006 fff7 	bl	800e734 <__aeabi_fsub>
 8007746:	497e      	ldr	r1, [pc, #504]	; (8007940 <initialize.lto_priv.309+0x5a8>)
 8007748:	f006 fec2 	bl	800e4d0 <__aeabi_fmul>
 800774c:	f007 fc00 	bl	800ef50 <__aeabi_f2uiz>
 8007750:	464b      	mov	r3, r9
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	4643      	mov	r3, r8
 8007756:	9004      	str	r0, [sp, #16]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	9502      	str	r5, [sp, #8]
 800775c:	9701      	str	r7, [sp, #4]
 800775e:	0023      	movs	r3, r4
 8007760:	4a78      	ldr	r2, [pc, #480]	; (8007944 <initialize.lto_priv.309+0x5ac>)
 8007762:	4979      	ldr	r1, [pc, #484]	; (8007948 <initialize.lto_priv.309+0x5b0>)
 8007764:	2000      	movs	r0, #0
 8007766:	47b0      	blx	r6
 8007768:	e6c2      	b.n	80074f0 <initialize.lto_priv.309+0x158>
 800776a:	4978      	ldr	r1, [pc, #480]	; (800794c <initialize.lto_priv.309+0x5b4>)
 800776c:	e758      	b.n	8007620 <initialize.lto_priv.309+0x288>
 800776e:	4977      	ldr	r1, [pc, #476]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007770:	e76e      	b.n	8007650 <initialize.lto_priv.309+0x2b8>
 8007772:	4976      	ldr	r1, [pc, #472]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007774:	e781      	b.n	800767a <initialize.lto_priv.309+0x2e2>
 8007776:	4975      	ldr	r1, [pc, #468]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007778:	e7ab      	b.n	80076d2 <initialize.lto_priv.309+0x33a>
 800777a:	4974      	ldr	r1, [pc, #464]	; (800794c <initialize.lto_priv.309+0x5b4>)
 800777c:	e7c0      	b.n	8007700 <initialize.lto_priv.309+0x368>
 800777e:	4973      	ldr	r1, [pc, #460]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007780:	e7d3      	b.n	800772a <initialize.lto_priv.309+0x392>
 8007782:	237c      	movs	r3, #124	; 0x7c
 8007784:	0164      	lsls	r4, r4, #5
 8007786:	3c4b      	subs	r4, #75	; 0x4b
 8007788:	435c      	muls	r4, r3
 800778a:	4544      	cmp	r4, r8
 800778c:	db00      	blt.n	8007790 <initialize.lto_priv.309+0x3f8>
 800778e:	e0e1      	b.n	8007954 <initialize.lto_priv.309+0x5bc>
 8007790:	4b67      	ldr	r3, [pc, #412]	; (8007930 <initialize.lto_priv.309+0x598>)
 8007792:	4640      	mov	r0, r8
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	9306      	str	r3, [sp, #24]
 8007798:	f003 fb26 	bl	800ade8 <points_to_meter.constprop.9>
 800779c:	2100      	movs	r1, #0
 800779e:	f007 fb8f 	bl	800eec0 <__aeabi_fcmplt>
 80077a2:	4d64      	ldr	r5, [pc, #400]	; (8007934 <initialize.lto_priv.309+0x59c>)
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d100      	bne.n	80077aa <initialize.lto_priv.309+0x412>
 80077a8:	4d63      	ldr	r5, [pc, #396]	; (8007938 <initialize.lto_priv.309+0x5a0>)
 80077aa:	4640      	mov	r0, r8
 80077ac:	f003 fb1c 	bl	800ade8 <points_to_meter.constprop.9>
 80077b0:	1c06      	adds	r6, r0, #0
 80077b2:	4640      	mov	r0, r8
 80077b4:	f003 fb18 	bl	800ade8 <points_to_meter.constprop.9>
 80077b8:	2100      	movs	r1, #0
 80077ba:	f007 fb81 	bl	800eec0 <__aeabi_fcmplt>
 80077be:	2800      	cmp	r0, #0
 80077c0:	d000      	beq.n	80077c4 <initialize.lto_priv.309+0x42c>
 80077c2:	e0a7      	b.n	8007914 <initialize.lto_priv.309+0x57c>
 80077c4:	21fe      	movs	r1, #254	; 0xfe
 80077c6:	0589      	lsls	r1, r1, #22
 80077c8:	1c30      	adds	r0, r6, #0
 80077ca:	f006 fe81 	bl	800e4d0 <__aeabi_fmul>
 80077ce:	495b      	ldr	r1, [pc, #364]	; (800793c <initialize.lto_priv.309+0x5a4>)
 80077d0:	f006 fbd2 	bl	800df78 <__aeabi_fadd>
 80077d4:	f007 fbbc 	bl	800ef50 <__aeabi_f2uiz>
 80077d8:	0007      	movs	r7, r0
 80077da:	4640      	mov	r0, r8
 80077dc:	f003 fb04 	bl	800ade8 <points_to_meter.constprop.9>
 80077e0:	1c06      	adds	r6, r0, #0
 80077e2:	4640      	mov	r0, r8
 80077e4:	f003 fb00 	bl	800ade8 <points_to_meter.constprop.9>
 80077e8:	2100      	movs	r1, #0
 80077ea:	f007 fb69 	bl	800eec0 <__aeabi_fcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	d000      	beq.n	80077f4 <initialize.lto_priv.309+0x45c>
 80077f2:	e091      	b.n	8007918 <initialize.lto_priv.309+0x580>
 80077f4:	21fe      	movs	r1, #254	; 0xfe
 80077f6:	0589      	lsls	r1, r1, #22
 80077f8:	1c30      	adds	r0, r6, #0
 80077fa:	f006 fe69 	bl	800e4d0 <__aeabi_fmul>
 80077fe:	494f      	ldr	r1, [pc, #316]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007800:	f006 fbba 	bl	800df78 <__aeabi_fadd>
 8007804:	1c06      	adds	r6, r0, #0
 8007806:	4640      	mov	r0, r8
 8007808:	f003 faee 	bl	800ade8 <points_to_meter.constprop.9>
 800780c:	4681      	mov	r9, r0
 800780e:	4640      	mov	r0, r8
 8007810:	f003 faea 	bl	800ade8 <points_to_meter.constprop.9>
 8007814:	2100      	movs	r1, #0
 8007816:	f007 fb53 	bl	800eec0 <__aeabi_fcmplt>
 800781a:	2800      	cmp	r0, #0
 800781c:	d17e      	bne.n	800791c <initialize.lto_priv.309+0x584>
 800781e:	21fe      	movs	r1, #254	; 0xfe
 8007820:	0589      	lsls	r1, r1, #22
 8007822:	4648      	mov	r0, r9
 8007824:	f006 fe54 	bl	800e4d0 <__aeabi_fmul>
 8007828:	4944      	ldr	r1, [pc, #272]	; (800793c <initialize.lto_priv.309+0x5a4>)
 800782a:	f006 fba5 	bl	800df78 <__aeabi_fadd>
 800782e:	f007 fb8f 	bl	800ef50 <__aeabi_f2uiz>
 8007832:	f007 fdcb 	bl	800f3cc <__aeabi_ui2f>
 8007836:	1c01      	adds	r1, r0, #0
 8007838:	1c30      	adds	r0, r6, #0
 800783a:	f006 ff7b 	bl	800e734 <__aeabi_fsub>
 800783e:	4940      	ldr	r1, [pc, #256]	; (8007940 <initialize.lto_priv.309+0x5a8>)
 8007840:	f006 fe46 	bl	800e4d0 <__aeabi_fmul>
 8007844:	f007 fb84 	bl	800ef50 <__aeabi_f2uiz>
 8007848:	4680      	mov	r8, r0
 800784a:	0020      	movs	r0, r4
 800784c:	f003 facc 	bl	800ade8 <points_to_meter.constprop.9>
 8007850:	2100      	movs	r1, #0
 8007852:	f007 fb35 	bl	800eec0 <__aeabi_fcmplt>
 8007856:	4e37      	ldr	r6, [pc, #220]	; (8007934 <initialize.lto_priv.309+0x59c>)
 8007858:	2800      	cmp	r0, #0
 800785a:	d100      	bne.n	800785e <initialize.lto_priv.309+0x4c6>
 800785c:	4e36      	ldr	r6, [pc, #216]	; (8007938 <initialize.lto_priv.309+0x5a0>)
 800785e:	0020      	movs	r0, r4
 8007860:	f003 fac2 	bl	800ade8 <points_to_meter.constprop.9>
 8007864:	4681      	mov	r9, r0
 8007866:	0020      	movs	r0, r4
 8007868:	f003 fabe 	bl	800ade8 <points_to_meter.constprop.9>
 800786c:	2100      	movs	r1, #0
 800786e:	f007 fb27 	bl	800eec0 <__aeabi_fcmplt>
 8007872:	2800      	cmp	r0, #0
 8007874:	d154      	bne.n	8007920 <initialize.lto_priv.309+0x588>
 8007876:	21fe      	movs	r1, #254	; 0xfe
 8007878:	0589      	lsls	r1, r1, #22
 800787a:	4648      	mov	r0, r9
 800787c:	f006 fe28 	bl	800e4d0 <__aeabi_fmul>
 8007880:	492e      	ldr	r1, [pc, #184]	; (800793c <initialize.lto_priv.309+0x5a4>)
 8007882:	f006 fb79 	bl	800df78 <__aeabi_fadd>
 8007886:	f007 fb63 	bl	800ef50 <__aeabi_f2uiz>
 800788a:	4681      	mov	r9, r0
 800788c:	0020      	movs	r0, r4
 800788e:	f003 faab 	bl	800ade8 <points_to_meter.constprop.9>
 8007892:	4682      	mov	sl, r0
 8007894:	0020      	movs	r0, r4
 8007896:	f003 faa7 	bl	800ade8 <points_to_meter.constprop.9>
 800789a:	2100      	movs	r1, #0
 800789c:	f007 fb10 	bl	800eec0 <__aeabi_fcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d13f      	bne.n	8007924 <initialize.lto_priv.309+0x58c>
 80078a4:	21fe      	movs	r1, #254	; 0xfe
 80078a6:	0589      	lsls	r1, r1, #22
 80078a8:	4650      	mov	r0, sl
 80078aa:	f006 fe11 	bl	800e4d0 <__aeabi_fmul>
 80078ae:	4923      	ldr	r1, [pc, #140]	; (800793c <initialize.lto_priv.309+0x5a4>)
 80078b0:	f006 fb62 	bl	800df78 <__aeabi_fadd>
 80078b4:	4682      	mov	sl, r0
 80078b6:	0020      	movs	r0, r4
 80078b8:	f003 fa96 	bl	800ade8 <points_to_meter.constprop.9>
 80078bc:	4683      	mov	fp, r0
 80078be:	0020      	movs	r0, r4
 80078c0:	f003 fa92 	bl	800ade8 <points_to_meter.constprop.9>
 80078c4:	2100      	movs	r1, #0
 80078c6:	f007 fafb 	bl	800eec0 <__aeabi_fcmplt>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d12c      	bne.n	8007928 <initialize.lto_priv.309+0x590>
 80078ce:	21fe      	movs	r1, #254	; 0xfe
 80078d0:	0589      	lsls	r1, r1, #22
 80078d2:	4658      	mov	r0, fp
 80078d4:	f006 fdfc 	bl	800e4d0 <__aeabi_fmul>
 80078d8:	4918      	ldr	r1, [pc, #96]	; (800793c <initialize.lto_priv.309+0x5a4>)
 80078da:	f006 fb4d 	bl	800df78 <__aeabi_fadd>
 80078de:	f007 fb37 	bl	800ef50 <__aeabi_f2uiz>
 80078e2:	f007 fd73 	bl	800f3cc <__aeabi_ui2f>
 80078e6:	1c01      	adds	r1, r0, #0
 80078e8:	4650      	mov	r0, sl
 80078ea:	f006 ff23 	bl	800e734 <__aeabi_fsub>
 80078ee:	4914      	ldr	r1, [pc, #80]	; (8007940 <initialize.lto_priv.309+0x5a8>)
 80078f0:	f006 fdee 	bl	800e4d0 <__aeabi_fmul>
 80078f4:	f007 fb2c 	bl	800ef50 <__aeabi_f2uiz>
 80078f8:	464b      	mov	r3, r9
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	4643      	mov	r3, r8
 80078fe:	9004      	str	r0, [sp, #16]
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	9602      	str	r6, [sp, #8]
 8007904:	9700      	str	r7, [sp, #0]
 8007906:	002b      	movs	r3, r5
 8007908:	4a11      	ldr	r2, [pc, #68]	; (8007950 <initialize.lto_priv.309+0x5b8>)
 800790a:	490f      	ldr	r1, [pc, #60]	; (8007948 <initialize.lto_priv.309+0x5b0>)
 800790c:	2000      	movs	r0, #0
 800790e:	9c06      	ldr	r4, [sp, #24]
 8007910:	47a0      	blx	r4
 8007912:	e5ed      	b.n	80074f0 <initialize.lto_priv.309+0x158>
 8007914:	490d      	ldr	r1, [pc, #52]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007916:	e757      	b.n	80077c8 <initialize.lto_priv.309+0x430>
 8007918:	490c      	ldr	r1, [pc, #48]	; (800794c <initialize.lto_priv.309+0x5b4>)
 800791a:	e76d      	b.n	80077f8 <initialize.lto_priv.309+0x460>
 800791c:	490b      	ldr	r1, [pc, #44]	; (800794c <initialize.lto_priv.309+0x5b4>)
 800791e:	e780      	b.n	8007822 <initialize.lto_priv.309+0x48a>
 8007920:	490a      	ldr	r1, [pc, #40]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007922:	e7aa      	b.n	800787a <initialize.lto_priv.309+0x4e2>
 8007924:	4909      	ldr	r1, [pc, #36]	; (800794c <initialize.lto_priv.309+0x5b4>)
 8007926:	e7bf      	b.n	80078a8 <initialize.lto_priv.309+0x510>
 8007928:	4908      	ldr	r1, [pc, #32]	; (800794c <initialize.lto_priv.309+0x5b4>)
 800792a:	e7d2      	b.n	80078d2 <initialize.lto_priv.309+0x53a>
 800792c:	fffffa30 	.word	0xfffffa30
 8007930:	200002b8 	.word	0x200002b8
 8007934:	0801da48 	.word	0x0801da48
 8007938:	0801d973 	.word	0x0801d973
 800793c:	350637bd 	.word	0x350637bd
 8007940:	49742400 	.word	0x49742400
 8007944:	0801cd6e 	.word	0x0801cd6e
 8007948:	0801ceda 	.word	0x0801ceda
 800794c:	bf800000 	.word	0xbf800000
 8007950:	0801cdab 	.word	0x0801cdab
 8007954:	0030      	movs	r0, r6
 8007956:	f7fa fa85 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 800795a:	0033      	movs	r3, r6
 800795c:	332e      	adds	r3, #46	; 0x2e
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	4682      	mov	sl, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d049      	beq.n	80079fa <initialize.lto_priv.309+0x662>
 8007966:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 8007968:	466a      	mov	r2, sp
 800796a:	8c12      	ldrh	r2, [r2, #32]
 800796c:	0ffc      	lsrs	r4, r7, #31
 800796e:	9207      	str	r2, [sp, #28]
 8007970:	464a      	mov	r2, r9
 8007972:	19e0      	adds	r0, r4, r7
 8007974:	8093      	strh	r3, [r2, #4]
 8007976:	217c      	movs	r1, #124	; 0x7c
 8007978:	f007 f966 	bl	800ec48 <__divsi3>
 800797c:	464b      	mov	r3, r9
 800797e:	1b04      	subs	r4, r0, r4
 8007980:	811c      	strh	r4, [r3, #8]
 8007982:	4643      	mov	r3, r8
 8007984:	0fdb      	lsrs	r3, r3, #31
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	4443      	add	r3, r8
 800798a:	0018      	movs	r0, r3
 800798c:	217c      	movs	r1, #124	; 0x7c
 800798e:	f007 f95b 	bl	800ec48 <__divsi3>
 8007992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007994:	4651      	mov	r1, sl
 8007996:	1ac0      	subs	r0, r0, r3
 8007998:	464b      	mov	r3, r9
 800799a:	3001      	adds	r0, #1
 800799c:	1b04      	subs	r4, r0, r4
 800799e:	b2a4      	uxth	r4, r4
 80079a0:	815c      	strh	r4, [r3, #10]
 80079a2:	0038      	movs	r0, r7
 80079a4:	f007 fa36 	bl	800ee14 <__aeabi_idivmod>
 80079a8:	4451      	add	r1, sl
 80079aa:	0008      	movs	r0, r1
 80079ac:	4651      	mov	r1, sl
 80079ae:	f007 fa31 	bl	800ee14 <__aeabi_idivmod>
 80079b2:	464b      	mov	r3, r9
 80079b4:	0020      	movs	r0, r4
 80079b6:	80d9      	strh	r1, [r3, #6]
 80079b8:	9907      	ldr	r1, [sp, #28]
 80079ba:	f007 f941 	bl	800ec40 <__aeabi_uidivmod>
 80079be:	910b      	str	r1, [sp, #44]	; 0x2c
 80079c0:	b280      	uxth	r0, r0
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d11d      	bne.n	8007a02 <initialize.lto_priv.309+0x66a>
 80079c6:	464b      	mov	r3, r9
 80079c8:	8198      	strh	r0, [r3, #12]
 80079ca:	0030      	movs	r0, r6
 80079cc:	f7fa fff9 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 80079d0:	0004      	movs	r4, r0
 80079d2:	0030      	movs	r0, r6
 80079d4:	f7fa ffce 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 80079d8:	2c04      	cmp	r4, #4
 80079da:	d001      	beq.n	80079e0 <initialize.lto_priv.309+0x648>
 80079dc:	2801      	cmp	r0, #1
 80079de:	d012      	beq.n	8007a06 <initialize.lto_priv.309+0x66e>
 80079e0:	464b      	mov	r3, r9
 80079e2:	9a07      	ldr	r2, [sp, #28]
 80079e4:	895b      	ldrh	r3, [r3, #10]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d20d      	bcs.n	8007a06 <initialize.lto_priv.309+0x66e>
 80079ea:	4bce      	ldr	r3, [pc, #824]	; (8007d24 <initialize.lto_priv.309+0x98c>)
 80079ec:	2000      	movs	r0, #0
 80079ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f0:	4acd      	ldr	r2, [pc, #820]	; (8007d28 <initialize.lto_priv.309+0x990>)
 80079f2:	49ce      	ldr	r1, [pc, #824]	; (8007d2c <initialize.lto_priv.309+0x994>)
 80079f4:	4798      	blx	r3
 80079f6:	2000      	movs	r0, #0
 80079f8:	e4e9      	b.n	80073ce <initialize.lto_priv.309+0x36>
 80079fa:	0033      	movs	r3, r6
 80079fc:	3332      	adds	r3, #50	; 0x32
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	e7b2      	b.n	8007968 <initialize.lto_priv.309+0x5d0>
 8007a02:	3001      	adds	r0, #1
 8007a04:	e7df      	b.n	80079c6 <initialize.lto_priv.309+0x62e>
 8007a06:	f003 f9d3 	bl	800adb0 <get_dt.constprop.10>
 8007a0a:	1c04      	adds	r4, r0, #0
 8007a0c:	4650      	mov	r0, sl
 8007a0e:	f007 fcdd 	bl	800f3cc <__aeabi_ui2f>
 8007a12:	1c21      	adds	r1, r4, #0
 8007a14:	f006 fd5c 	bl	800e4d0 <__aeabi_fmul>
 8007a18:	465b      	mov	r3, fp
 8007a1a:	60d8      	str	r0, [r3, #12]
 8007a1c:	0038      	movs	r0, r7
 8007a1e:	f003 f9e3 	bl	800ade8 <points_to_meter.constprop.9>
 8007a22:	465b      	mov	r3, fp
 8007a24:	6018      	str	r0, [r3, #0]
 8007a26:	4640      	mov	r0, r8
 8007a28:	f003 f9de 	bl	800ade8 <points_to_meter.constprop.9>
 8007a2c:	465b      	mov	r3, fp
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	6098      	str	r0, [r3, #8]
 8007a32:	f006 fe7f 	bl	800e734 <__aeabi_fsub>
 8007a36:	465b      	mov	r3, fp
 8007a38:	6058      	str	r0, [r3, #4]
 8007a3a:	4643      	mov	r3, r8
 8007a3c:	4651      	mov	r1, sl
 8007a3e:	1bd8      	subs	r0, r3, r7
 8007a40:	f007 f902 	bl	800ec48 <__divsi3>
 8007a44:	3001      	adds	r0, #1
 8007a46:	b283      	uxth	r3, r0
 8007a48:	9309      	str	r3, [sp, #36]	; 0x24
 8007a4a:	465b      	mov	r3, fp
 8007a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a4e:	4651      	mov	r1, sl
 8007a50:	82da      	strh	r2, [r3, #22]
 8007a52:	464b      	mov	r3, r9
 8007a54:	899b      	ldrh	r3, [r3, #12]
 8007a56:	930a      	str	r3, [sp, #40]	; 0x28
 8007a58:	465b      	mov	r3, fp
 8007a5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a5c:	831a      	strh	r2, [r3, #24]
 8007a5e:	464b      	mov	r3, r9
 8007a60:	895c      	ldrh	r4, [r3, #10]
 8007a62:	237c      	movs	r3, #124	; 0x7c
 8007a64:	0018      	movs	r0, r3
 8007a66:	4360      	muls	r0, r4
 8007a68:	4698      	mov	r8, r3
 8007a6a:	f007 f863 	bl	800eb34 <__udivsi3>
 8007a6e:	9b06      	ldr	r3, [sp, #24]
 8007a70:	4641      	mov	r1, r8
 8007a72:	8018      	strh	r0, [r3, #0]
 8007a74:	811c      	strh	r4, [r3, #8]
 8007a76:	0038      	movs	r0, r7
 8007a78:	f007 f9cc 	bl	800ee14 <__aeabi_idivmod>
 8007a7c:	4441      	add	r1, r8
 8007a7e:	0008      	movs	r0, r1
 8007a80:	4641      	mov	r1, r8
 8007a82:	f007 f9c7 	bl	800ee14 <__aeabi_idivmod>
 8007a86:	0008      	movs	r0, r1
 8007a88:	4651      	mov	r1, sl
 8007a8a:	f007 f8dd 	bl	800ec48 <__divsi3>
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a92:	8058      	strh	r0, [r3, #2]
 8007a94:	809a      	strh	r2, [r3, #4]
 8007a96:	4651      	mov	r1, sl
 8007a98:	4640      	mov	r0, r8
 8007a9a:	f007 f84b 	bl	800eb34 <__udivsi3>
 8007a9e:	9b06      	ldr	r3, [sp, #24]
 8007aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aa2:	80d8      	strh	r0, [r3, #6]
 8007aa4:	821a      	strh	r2, [r3, #16]
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	42a3      	cmp	r3, r4
 8007aaa:	d228      	bcs.n	8007afe <initialize.lto_priv.309+0x766>
 8007aac:	466b      	mov	r3, sp
 8007aae:	8c19      	ldrh	r1, [r3, #32]
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	8299      	strh	r1, [r3, #20]
 8007ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d004      	beq.n	8007ac4 <initialize.lto_priv.309+0x72c>
 8007aba:	9907      	ldr	r1, [sp, #28]
 8007abc:	0020      	movs	r0, r4
 8007abe:	f007 f8bf 	bl	800ec40 <__aeabi_uidivmod>
 8007ac2:	b289      	uxth	r1, r1
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	82d9      	strh	r1, [r3, #22]
 8007ac8:	0030      	movs	r0, r6
 8007aca:	f7fe fd51 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d019      	beq.n	8007b06 <initialize.lto_priv.309+0x76e>
 8007ad2:	0033      	movs	r3, r6
 8007ad4:	3346      	adds	r3, #70	; 0x46
 8007ad6:	7818      	ldrb	r0, [r3, #0]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d014      	beq.n	8007b06 <initialize.lto_priv.309+0x76e>
 8007adc:	2300      	movs	r3, #0
 8007ade:	2001      	movs	r0, #1
 8007ae0:	2400      	movs	r4, #0
 8007ae2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8007ae4:	64a8      	str	r0, [r5, #72]	; 0x48
 8007ae6:	652c      	str	r4, [r5, #80]	; 0x50
 8007ae8:	0030      	movs	r0, r6
 8007aea:	f7fa ff43 	bl	8002974 <acc_base_configuration_repetition_mode_get>
 8007aee:	0023      	movs	r3, r4
 8007af0:	ac10      	add	r4, sp, #64	; 0x40
 8007af2:	2803      	cmp	r0, #3
 8007af4:	d80d      	bhi.n	8007b12 <initialize.lto_priv.309+0x77a>
 8007af6:	f007 f809 	bl	800eb0c <__gnu_thumb1_case_uqi>
 8007afa:	1a08      	.short	0x1a08
 8007afc:	3020      	.short	0x3020
 8007afe:	9b06      	ldr	r3, [sp, #24]
 8007b00:	829c      	strh	r4, [r3, #20]
 8007b02:	82dc      	strh	r4, [r3, #22]
 8007b04:	e7e0      	b.n	8007ac8 <initialize.lto_priv.309+0x730>
 8007b06:	2301      	movs	r3, #1
 8007b08:	e7ea      	b.n	8007ae0 <initialize.lto_priv.309+0x748>
 8007b0a:	656b      	str	r3, [r5, #84]	; 0x54
 8007b0c:	65ab      	str	r3, [r5, #88]	; 0x58
 8007b0e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007b10:	662b      	str	r3, [r5, #96]	; 0x60
 8007b12:	0030      	movs	r0, r6
 8007b14:	f7fa ff55 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 8007b18:	2804      	cmp	r0, #4
 8007b1a:	d82a      	bhi.n	8007b72 <initialize.lto_priv.309+0x7da>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f006 fffe 	bl	800eb20 <__gnu_thumb1_case_uhi>
 8007b24:	00250025 	.word	0x00250025
 8007b28:	00fa00f7 	.word	0x00fa00f7
 8007b2c:	0025      	.short	0x0025
 8007b2e:	2201      	movs	r2, #1
 8007b30:	656b      	str	r3, [r5, #84]	; 0x54
 8007b32:	65aa      	str	r2, [r5, #88]	; 0x58
 8007b34:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007b36:	662b      	str	r3, [r5, #96]	; 0x60
 8007b38:	e7eb      	b.n	8007b12 <initialize.lto_priv.309+0x77a>
 8007b3a:	0030      	movs	r0, r6
 8007b3c:	f7fa ff04 	bl	8002948 <acc_base_configuration_update_rate_get>
 8007b40:	aa0f      	add	r2, sp, #60	; 0x3c
 8007b42:	0021      	movs	r1, r4
 8007b44:	f7fe faf4 	bl	8006130 <acc_radar_engine_common_frequency_to_main_clk>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	656b      	str	r3, [r5, #84]	; 0x54
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	65ab      	str	r3, [r5, #88]	; 0x58
 8007b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b52:	65eb      	str	r3, [r5, #92]	; 0x5c
 8007b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b56:	662b      	str	r3, [r5, #96]	; 0x60
 8007b58:	e7db      	b.n	8007b12 <initialize.lto_priv.309+0x77a>
 8007b5a:	0030      	movs	r0, r6
 8007b5c:	f7fa fef4 	bl	8002948 <acc_base_configuration_update_rate_get>
 8007b60:	aa0f      	add	r2, sp, #60	; 0x3c
 8007b62:	0021      	movs	r1, r4
 8007b64:	f7fe fae4 	bl	8006130 <acc_radar_engine_common_frequency_to_main_clk>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	656b      	str	r3, [r5, #84]	; 0x54
 8007b6c:	e7ef      	b.n	8007b4e <initialize.lto_priv.309+0x7b6>
 8007b6e:	666a      	str	r2, [r5, #100]	; 0x64
 8007b70:	66aa      	str	r2, [r5, #104]	; 0x68
 8007b72:	0030      	movs	r0, r6
 8007b74:	f7fe fcfc 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	0007      	movs	r7, r0
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	d00b      	beq.n	8007b98 <initialize.lto_priv.309+0x800>
 8007b80:	0033      	movs	r3, r6
 8007b82:	3350      	adds	r3, #80	; 0x50
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	930d      	str	r3, [sp, #52]	; 0x34
 8007b88:	0033      	movs	r3, r6
 8007b8a:	3352      	adds	r3, #82	; 0x52
 8007b8c:	881b      	ldrh	r3, [r3, #0]
 8007b8e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b90:	0033      	movs	r3, r6
 8007b92:	334f      	adds	r3, #79	; 0x4f
 8007b94:	781f      	ldrb	r7, [r3, #0]
 8007b96:	003b      	movs	r3, r7
 8007b98:	002a      	movs	r2, r5
 8007b9a:	32b4      	adds	r2, #180	; 0xb4
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	2f00      	cmp	r7, #0
 8007ba0:	d002      	beq.n	8007ba8 <initialize.lto_priv.309+0x810>
 8007ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	6053      	str	r3, [r2, #4]
 8007ba8:	0030      	movs	r0, r6
 8007baa:	f7fa ff01 	bl	80029b0 <acc_base_configuration_tx_disable_get>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d103      	bne.n	8007bbe <initialize.lto_priv.309+0x826>
 8007bb6:	0003      	movs	r3, r0
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	d000      	beq.n	8007bbe <initialize.lto_priv.309+0x826>
 8007bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bbe:	4642      	mov	r2, r8
 8007bc0:	439a      	bics	r2, r3
 8007bc2:	66ea      	str	r2, [r5, #108]	; 0x6c
 8007bc4:	0030      	movs	r0, r6
 8007bc6:	f7fa feea 	bl	800299e <acc_base_configuration_decrease_tx_emission_get>
 8007bca:	4643      	mov	r3, r8
 8007bcc:	4058      	eors	r0, r3
 8007bce:	b2c0      	uxtb	r0, r0
 8007bd0:	676b      	str	r3, [r5, #116]	; 0x74
 8007bd2:	6728      	str	r0, [r5, #112]	; 0x70
 8007bd4:	0030      	movs	r0, r6
 8007bd6:	f7fa fed7 	bl	8002988 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007bda:	3801      	subs	r0, #1
 8007bdc:	67a8      	str	r0, [r5, #120]	; 0x78
 8007bde:	0030      	movs	r0, r6
 8007be0:	f7fe fcc6 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007be4:	2300      	movs	r3, #0
 8007be6:	4298      	cmp	r0, r3
 8007be8:	d000      	beq.n	8007bec <initialize.lto_priv.309+0x854>
 8007bea:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8007bec:	67eb      	str	r3, [r5, #124]	; 0x7c
 8007bee:	0030      	movs	r0, r6
 8007bf0:	f7fa fe9f 	bl	8002932 <acc_base_configuration_integrator_get>
 8007bf4:	1d2b      	adds	r3, r5, #4
 8007bf6:	67d8      	str	r0, [r3, #124]	; 0x7c
 8007bf8:	0030      	movs	r0, r6
 8007bfa:	f7fe fcb9 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4298      	cmp	r0, r3
 8007c02:	d001      	beq.n	8007c08 <initialize.lto_priv.309+0x870>
 8007c04:	1db3      	adds	r3, r6, #6
 8007c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c08:	002a      	movs	r2, r5
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	3208      	adds	r2, #8
 8007c0e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007c10:	0030      	movs	r0, r6
 8007c12:	f7fa fe83 	bl	800291c <acc_base_configuration_wg_duration_get>
 8007c16:	002b      	movs	r3, r5
 8007c18:	3388      	adds	r3, #136	; 0x88
 8007c1a:	6018      	str	r0, [r3, #0]
 8007c1c:	0030      	movs	r0, r6
 8007c1e:	f7fe fca7 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d002      	beq.n	8007c2c <initialize.lto_priv.309+0x894>
 8007c26:	0033      	movs	r3, r6
 8007c28:	336d      	adds	r3, #109	; 0x6d
 8007c2a:	7818      	ldrb	r0, [r3, #0]
 8007c2c:	002b      	movs	r3, r5
 8007c2e:	338d      	adds	r3, #141	; 0x8d
 8007c30:	7018      	strb	r0, [r3, #0]
 8007c32:	0030      	movs	r0, r6
 8007c34:	f7fa f916 	bl	8001e64 <acc_base_configuration_downsampling_factor_get>
 8007c38:	002b      	movs	r3, r5
 8007c3a:	33a4      	adds	r3, #164	; 0xa4
 8007c3c:	6018      	str	r0, [r3, #0]
 8007c3e:	0030      	movs	r0, r6
 8007c40:	f7fe fc96 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007c44:	2300      	movs	r3, #0
 8007c46:	4298      	cmp	r0, r3
 8007c48:	d002      	beq.n	8007c50 <initialize.lto_priv.309+0x8b8>
 8007c4a:	0033      	movs	r3, r6
 8007c4c:	336b      	adds	r3, #107	; 0x6b
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	002a      	movs	r2, r5
 8007c52:	329c      	adds	r2, #156	; 0x9c
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	0030      	movs	r0, r6
 8007c58:	f7fe fc8a 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	d002      	beq.n	8007c68 <initialize.lto_priv.309+0x8d0>
 8007c62:	0033      	movs	r3, r6
 8007c64:	336c      	adds	r3, #108	; 0x6c
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	002a      	movs	r2, r5
 8007c6a:	32a0      	adds	r2, #160	; 0xa0
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	0030      	movs	r0, r6
 8007c70:	f7fa f8e6 	bl	8001e40 <acc_base_configuration_asynchronous_measurement_get>
 8007c74:	2301      	movs	r3, #1
 8007c76:	002a      	movs	r2, r5
 8007c78:	4058      	eors	r0, r3
 8007c7a:	32ac      	adds	r2, #172	; 0xac
 8007c7c:	7053      	strb	r3, [r2, #1]
 8007c7e:	7010      	strb	r0, [r2, #0]
 8007c80:	464a      	mov	r2, r9
 8007c82:	002b      	movs	r3, r5
 8007c84:	8892      	ldrh	r2, [r2, #4]
 8007c86:	3390      	adds	r3, #144	; 0x90
 8007c88:	601a      	str	r2, [r3, #0]
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	899b      	ldrh	r3, [r3, #12]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d945      	bls.n	8007d1e <initialize.lto_priv.309+0x986>
 8007c92:	464b      	mov	r3, r9
 8007c94:	6958      	ldr	r0, [r3, #20]
 8007c96:	f7fd ff11 	bl	8005abc <get_package_range_coarse_max>
 8007c9a:	002b      	movs	r3, r5
 8007c9c:	464a      	mov	r2, r9
 8007c9e:	3394      	adds	r3, #148	; 0x94
 8007ca0:	3801      	subs	r0, #1
 8007ca2:	6018      	str	r0, [r3, #0]
 8007ca4:	2108      	movs	r1, #8
 8007ca6:	5e52      	ldrsh	r2, [r2, r1]
 8007ca8:	605a      	str	r2, [r3, #4]
 8007caa:	464a      	mov	r2, r9
 8007cac:	88d2      	ldrh	r2, [r2, #6]
 8007cae:	615a      	str	r2, [r3, #20]
 8007cb0:	f7fe fa36 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 8007cb4:	002b      	movs	r3, r5
 8007cb6:	33b0      	adds	r3, #176	; 0xb0
 8007cb8:	6018      	str	r0, [r3, #0]
 8007cba:	23e1      	movs	r3, #225	; 0xe1
 8007cbc:	465a      	mov	r2, fp
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	8293      	strh	r3, [r2, #20]
 8007cc2:	002b      	movs	r3, r5
 8007cc4:	33cc      	adds	r3, #204	; 0xcc
 8007cc6:	8819      	ldrh	r1, [r3, #0]
 8007cc8:	207c      	movs	r0, #124	; 0x7c
 8007cca:	f006 ff33 	bl	800eb34 <__udivsi3>
 8007cce:	9b06      	ldr	r3, [sp, #24]
 8007cd0:	9a06      	ldr	r2, [sp, #24]
 8007cd2:	891b      	ldrh	r3, [r3, #8]
 8007cd4:	0021      	movs	r1, r4
 8007cd6:	4358      	muls	r0, r3
 8007cd8:	9b06      	ldr	r3, [sp, #24]
 8007cda:	8158      	strh	r0, [r3, #10]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	0028      	movs	r0, r5
 8007ce0:	8313      	strh	r3, [r2, #24]
 8007ce2:	f005 f9e1 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cea:	0022      	movs	r2, r4
 8007cec:	8023      	strh	r3, [r4, #0]
 8007cee:	2013      	movs	r0, #19
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	6809      	ldr	r1, [r1, #0]
 8007cf4:	f005 feba 	bl	800da6c <acc_probes_execute_uint16>
 8007cf8:	35ce      	adds	r5, #206	; 0xce
 8007cfa:	8823      	ldrh	r3, [r4, #0]
 8007cfc:	882a      	ldrh	r2, [r5, #0]
 8007cfe:	3303      	adds	r3, #3
 8007d00:	189b      	adds	r3, r3, r2
 8007d02:	9a06      	ldr	r2, [sp, #24]
 8007d04:	2001      	movs	r0, #1
 8007d06:	81d3      	strh	r3, [r2, #14]
 8007d08:	2396      	movs	r3, #150	; 0x96
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	8193      	strh	r3, [r2, #12]
 8007d0e:	f7ff fb5e 	bl	80073ce <initialize.lto_priv.309+0x36>
 8007d12:	666a      	str	r2, [r5, #100]	; 0x64
 8007d14:	66ab      	str	r3, [r5, #104]	; 0x68
 8007d16:	e72c      	b.n	8007b72 <initialize.lto_priv.309+0x7da>
 8007d18:	666b      	str	r3, [r5, #100]	; 0x64
 8007d1a:	66ab      	str	r3, [r5, #104]	; 0x68
 8007d1c:	e729      	b.n	8007b72 <initialize.lto_priv.309+0x7da>
 8007d1e:	464b      	mov	r3, r9
 8007d20:	8958      	ldrh	r0, [r3, #10]
 8007d22:	e7ba      	b.n	8007c9a <initialize.lto_priv.309+0x902>
 8007d24:	200002b8 	.word	0x200002b8
 8007d28:	0801cefa 	.word	0x0801cefa
 8007d2c:	0801ceda 	.word	0x0801ceda

08007d30 <acc_base_configuration_print.part.5>:
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d32:	46de      	mov	lr, fp
 8007d34:	4645      	mov	r5, r8
 8007d36:	4657      	mov	r7, sl
 8007d38:	464e      	mov	r6, r9
 8007d3a:	b5e0      	push	{r5, r6, r7, lr}
 8007d3c:	4b32      	ldr	r3, [pc, #200]	; (8007e08 <acc_base_configuration_print.part.5+0xd8>)
 8007d3e:	b08f      	sub	sp, #60	; 0x3c
 8007d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d42:	0004      	movs	r4, r0
 8007d44:	930a      	str	r3, [sp, #40]	; 0x28
 8007d46:	f7fa fe46 	bl	80029d6 <acc_base_configuration_sensor_get>
 8007d4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007d4c:	0020      	movs	r0, r4
 8007d4e:	f7fa fe1b 	bl	8002988 <acc_base_configuration_hw_accelerated_average_samples_get>
 8007d52:	900c      	str	r0, [sp, #48]	; 0x30
 8007d54:	0020      	movs	r0, r4
 8007d56:	f7fe fc0b 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	4698      	mov	r8, r3
 8007d5e:	4298      	cmp	r0, r3
 8007d60:	d001      	beq.n	8007d66 <acc_base_configuration_print.part.5+0x36>
 8007d62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007d64:	4698      	mov	r8, r3
 8007d66:	0020      	movs	r0, r4
 8007d68:	f7fa fde3 	bl	8002932 <acc_base_configuration_integrator_get>
 8007d6c:	900d      	str	r0, [sp, #52]	; 0x34
 8007d6e:	0020      	movs	r0, r4
 8007d70:	f7fa fdd4 	bl	800291c <acc_base_configuration_wg_duration_get>
 8007d74:	4681      	mov	r9, r0
 8007d76:	0020      	movs	r0, r4
 8007d78:	f7fe fbfa 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007d7c:	2600      	movs	r6, #0
 8007d7e:	42b0      	cmp	r0, r6
 8007d80:	d001      	beq.n	8007d86 <acc_base_configuration_print.part.5+0x56>
 8007d82:	1da3      	adds	r3, r4, #6
 8007d84:	8fde      	ldrh	r6, [r3, #62]	; 0x3e
 8007d86:	0020      	movs	r0, r4
 8007d88:	f7fa fe1b 	bl	80029c2 <acc_base_configuration_power_save_mode_get>
 8007d8c:	4f1f      	ldr	r7, [pc, #124]	; (8007e0c <acc_base_configuration_print.part.5+0xdc>)
 8007d8e:	2804      	cmp	r0, #4
 8007d90:	d803      	bhi.n	8007d9a <acc_base_configuration_print.part.5+0x6a>
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <acc_base_configuration_print.part.5+0xe0>)
 8007d94:	0080      	lsls	r0, r0, #2
 8007d96:	1818      	adds	r0, r3, r0
 8007d98:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8007d9a:	0020      	movs	r0, r4
 8007d9c:	f7fe fbe8 	bl	8006570 <configuration_is_valid.lto_priv.677>
 8007da0:	4d1c      	ldr	r5, [pc, #112]	; (8007e14 <acc_base_configuration_print.part.5+0xe4>)
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d008      	beq.n	8007db8 <acc_base_configuration_print.part.5+0x88>
 8007da6:	0023      	movs	r3, r4
 8007da8:	336a      	adds	r3, #106	; 0x6a
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <acc_base_configuration_print.part.5+0x88>
 8007db0:	4d19      	ldr	r5, [pc, #100]	; (8007e18 <acc_base_configuration_print.part.5+0xe8>)
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d000      	beq.n	8007db8 <acc_base_configuration_print.part.5+0x88>
 8007db6:	4d15      	ldr	r5, [pc, #84]	; (8007e0c <acc_base_configuration_print.part.5+0xdc>)
 8007db8:	0020      	movs	r0, r4
 8007dba:	f7fa fdf9 	bl	80029b0 <acc_base_configuration_tx_disable_get>
 8007dbe:	4682      	mov	sl, r0
 8007dc0:	0020      	movs	r0, r4
 8007dc2:	f7fa fd73 	bl	80028ac <acc_base_configuration_sparse_sweeps_per_frame_get>
 8007dc6:	4683      	mov	fp, r0
 8007dc8:	0020      	movs	r0, r4
 8007dca:	f7fa fde8 	bl	800299e <acc_base_configuration_decrease_tx_emission_get>
 8007dce:	465b      	mov	r3, fp
 8007dd0:	9308      	str	r3, [sp, #32]
 8007dd2:	4653      	mov	r3, sl
 8007dd4:	9307      	str	r3, [sp, #28]
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ddc:	9009      	str	r0, [sp, #36]	; 0x24
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	4643      	mov	r3, r8
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de6:	9506      	str	r5, [sp, #24]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	9705      	str	r7, [sp, #20]
 8007dec:	9604      	str	r6, [sp, #16]
 8007dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df0:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <acc_base_configuration_print.part.5+0xec>)
 8007df2:	490b      	ldr	r1, [pc, #44]	; (8007e20 <acc_base_configuration_print.part.5+0xf0>)
 8007df4:	2002      	movs	r0, #2
 8007df6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007df8:	47a0      	blx	r4
 8007dfa:	b00f      	add	sp, #60	; 0x3c
 8007dfc:	bc3c      	pop	{r2, r3, r4, r5}
 8007dfe:	4690      	mov	r8, r2
 8007e00:	4699      	mov	r9, r3
 8007e02:	46a2      	mov	sl, r4
 8007e04:	46ab      	mov	fp, r5
 8007e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e08:	200002b8 	.word	0x200002b8
 8007e0c:	0801d973 	.word	0x0801d973
 8007e10:	08015620 	.word	0x08015620
 8007e14:	0801cf25 	.word	0x0801cf25
 8007e18:	0801ba68 	.word	0x0801ba68
 8007e1c:	0801cf27 	.word	0x0801cf27
 8007e20:	0801cabe 	.word	0x0801cabe

08007e24 <start.lto_priv.298>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	46de      	mov	lr, fp
 8007e28:	4657      	mov	r7, sl
 8007e2a:	464e      	mov	r6, r9
 8007e2c:	4645      	mov	r5, r8
 8007e2e:	b5e0      	push	{r5, r6, r7, lr}
 8007e30:	6947      	ldr	r7, [r0, #20]
 8007e32:	b093      	sub	sp, #76	; 0x4c
 8007e34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007e36:	4683      	mov	fp, r0
 8007e38:	9307      	str	r3, [sp, #28]
 8007e3a:	003b      	movs	r3, r7
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e40:	9308      	str	r3, [sp, #32]
 8007e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e44:	930a      	str	r3, [sp, #40]	; 0x28
 8007e46:	9b08      	ldr	r3, [sp, #32]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d004      	beq.n	8007e56 <start.lto_priv.298+0x32>
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <start.lto_priv.298+0x32>
 8007e52:	2300      	movs	r3, #0
 8007e54:	643b      	str	r3, [r7, #64]	; 0x40
 8007e56:	465b      	mov	r3, fp
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	ac0f      	add	r4, sp, #60	; 0x3c
 8007e5c:	9306      	str	r3, [sp, #24]
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	2500      	movs	r5, #0
 8007e62:	9309      	str	r3, [sp, #36]	; 0x24
 8007e64:	2315      	movs	r3, #21
 8007e66:	7023      	strb	r3, [r4, #0]
 8007e68:	9b06      	ldr	r3, [sp, #24]
 8007e6a:	684e      	ldr	r6, [r1, #4]
 8007e6c:	9310      	str	r3, [sp, #64]	; 0x40
 8007e6e:	2307      	movs	r3, #7
 8007e70:	0020      	movs	r0, r4
 8007e72:	22b4      	movs	r2, #180	; 0xb4
 8007e74:	0039      	movs	r1, r7
 8007e76:	9311      	str	r3, [sp, #68]	; 0x44
 8007e78:	f005 f956 	bl	800d128 <acc_probes_execute>
 8007e7c:	9400      	str	r4, [sp, #0]
 8007e7e:	ab0e      	add	r3, sp, #56	; 0x38
 8007e80:	0032      	movs	r2, r6
 8007e82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e84:	9806      	ldr	r0, [sp, #24]
 8007e86:	950e      	str	r5, [sp, #56]	; 0x38
 8007e88:	950f      	str	r5, [sp, #60]	; 0x3c
 8007e8a:	f005 f88f 	bl	800cfac <acc_sensor_protocol_r2_prepare_load.constprop.21>
 8007e8e:	9503      	str	r5, [sp, #12]
 8007e90:	0004      	movs	r4, r0
 8007e92:	42a8      	cmp	r0, r5
 8007e94:	d112      	bne.n	8007ebc <start.lto_priv.298+0x98>
 8007e96:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <start.lto_priv.298+0x8c>)
 8007e98:	4a06      	ldr	r2, [pc, #24]	; (8007eb4 <start.lto_priv.298+0x90>)
 8007e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9c:	4906      	ldr	r1, [pc, #24]	; (8007eb8 <start.lto_priv.298+0x94>)
 8007e9e:	4798      	blx	r3
 8007ea0:	0020      	movs	r0, r4
 8007ea2:	b013      	add	sp, #76	; 0x4c
 8007ea4:	bc3c      	pop	{r2, r3, r4, r5}
 8007ea6:	4690      	mov	r8, r2
 8007ea8:	4699      	mov	r9, r3
 8007eaa:	46a2      	mov	sl, r4
 8007eac:	46ab      	mov	fp, r5
 8007eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eb0:	200002b8 	.word	0x200002b8
 8007eb4:	0801cf5f 	.word	0x0801cf5f
 8007eb8:	0801ca74 	.word	0x0801ca74
 8007ebc:	9a03      	ldr	r2, [sp, #12]
 8007ebe:	4bfa      	ldr	r3, [pc, #1000]	; (80082a8 <start.lto_priv.298+0x484>)
 8007ec0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ec6:	9205      	str	r2, [sp, #20]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d900      	bls.n	8007ece <start.lto_priv.298+0xaa>
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	0021      	movs	r1, r4
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed6:	9b05      	ldr	r3, [sp, #20]
 8007ed8:	085a      	lsrs	r2, r3, #1
 8007eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007edc:	0098      	lsls	r0, r3, #2
 8007ede:	4bf3      	ldr	r3, [pc, #972]	; (80082ac <start.lto_priv.298+0x488>)
 8007ee0:	18c0      	adds	r0, r0, r3
 8007ee2:	f004 fb59 	bl	800c598 <acc_confprogram_copy>
 8007ee6:	466b      	mov	r3, sp
 8007ee8:	899d      	ldrh	r5, [r3, #12]
 8007eea:	8a9e      	ldrh	r6, [r3, #20]
 8007eec:	4bf0      	ldr	r3, [pc, #960]	; (80082b0 <start.lto_priv.298+0x48c>)
 8007eee:	0032      	movs	r2, r6
 8007ef0:	4698      	mov	r8, r3
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	0029      	movs	r1, r5
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	23d2      	movs	r3, #210	; 0xd2
 8007efa:	0020      	movs	r0, r4
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4643      	mov	r3, r8
 8007f00:	f004 fb92 	bl	800c628 <acc_confprogram_patch_offset>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0032      	movs	r2, r6
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	23d0      	movs	r3, #208	; 0xd0
 8007f0c:	0029      	movs	r1, r5
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	0020      	movs	r0, r4
 8007f12:	4643      	mov	r3, r8
 8007f14:	f004 fb88 	bl	800c628 <acc_confprogram_patch_offset>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	0032      	movs	r2, r6
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	23d1      	movs	r3, #209	; 0xd1
 8007f20:	0029      	movs	r1, r5
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	0020      	movs	r0, r4
 8007f26:	4643      	mov	r3, r8
 8007f28:	f004 fb7e 	bl	800c628 <acc_confprogram_patch_offset>
 8007f2c:	89bb      	ldrh	r3, [r7, #12]
 8007f2e:	0032      	movs	r2, r6
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	23ce      	movs	r3, #206	; 0xce
 8007f34:	0029      	movs	r1, r5
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	0020      	movs	r0, r4
 8007f3a:	4643      	mov	r3, r8
 8007f3c:	f004 fb74 	bl	800c628 <acc_confprogram_patch_offset>
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	0032      	movs	r2, r6
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	2365      	movs	r3, #101	; 0x65
 8007f48:	0029      	movs	r1, r5
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	0020      	movs	r0, r4
 8007f4e:	4643      	mov	r3, r8
 8007f50:	f004 fb6a 	bl	800c628 <acc_confprogram_patch_offset>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	0032      	movs	r2, r6
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	23f0      	movs	r3, #240	; 0xf0
 8007f5c:	0029      	movs	r1, r5
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	0020      	movs	r0, r4
 8007f62:	4643      	mov	r3, r8
 8007f64:	f004 fb60 	bl	800c628 <acc_confprogram_patch_offset>
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	0032      	movs	r2, r6
 8007f6c:	9301      	str	r3, [sp, #4]
 8007f6e:	23e8      	movs	r3, #232	; 0xe8
 8007f70:	0029      	movs	r1, r5
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	0020      	movs	r0, r4
 8007f76:	4643      	mov	r3, r8
 8007f78:	f004 fb56 	bl	800c628 <acc_confprogram_patch_offset>
 8007f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7e:	0032      	movs	r2, r6
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	23fc      	movs	r3, #252	; 0xfc
 8007f84:	0029      	movs	r1, r5
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	0020      	movs	r0, r4
 8007f8a:	4643      	mov	r3, r8
 8007f8c:	f004 fb4c 	bl	800c628 <acc_confprogram_patch_offset>
 8007f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f92:	0032      	movs	r2, r6
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	23e0      	movs	r3, #224	; 0xe0
 8007f98:	0029      	movs	r1, r5
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	0020      	movs	r0, r4
 8007f9e:	4643      	mov	r3, r8
 8007fa0:	f004 fb42 	bl	800c628 <acc_confprogram_patch_offset>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa6:	0032      	movs	r2, r6
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	23e1      	movs	r3, #225	; 0xe1
 8007fac:	0029      	movs	r1, r5
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	0020      	movs	r0, r4
 8007fb2:	4643      	mov	r3, r8
 8007fb4:	f004 fb38 	bl	800c628 <acc_confprogram_patch_offset>
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	0032      	movs	r2, r6
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2380      	movs	r3, #128	; 0x80
 8007fc0:	0029      	movs	r1, r5
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	4643      	mov	r3, r8
 8007fc8:	f004 fb2e 	bl	800c628 <acc_confprogram_patch_offset>
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	0032      	movs	r2, r6
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	2381      	movs	r3, #129	; 0x81
 8007fd4:	0029      	movs	r1, r5
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	0020      	movs	r0, r4
 8007fda:	4643      	mov	r3, r8
 8007fdc:	f004 fb24 	bl	800c628 <acc_confprogram_patch_offset>
 8007fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe2:	0032      	movs	r2, r6
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	237f      	movs	r3, #127	; 0x7f
 8007fe8:	0029      	movs	r1, r5
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	0020      	movs	r0, r4
 8007fee:	4643      	mov	r3, r8
 8007ff0:	f004 fb1a 	bl	800c628 <acc_confprogram_patch_offset>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	0032      	movs	r2, r6
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	0029      	movs	r1, r5
 8007ffe:	0020      	movs	r0, r4
 8008000:	469a      	mov	sl, r3
 8008002:	4643      	mov	r3, r8
 8008004:	f004 fb10 	bl	800c628 <acc_confprogram_patch_offset>
 8008008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800800a:	0032      	movs	r2, r6
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	23ef      	movs	r3, #239	; 0xef
 8008010:	0029      	movs	r1, r5
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	0020      	movs	r0, r4
 8008016:	4643      	mov	r3, r8
 8008018:	f004 fb06 	bl	800c628 <acc_confprogram_patch_offset>
 800801c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800801e:	0032      	movs	r2, r6
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	23d6      	movs	r3, #214	; 0xd6
 8008024:	0029      	movs	r1, r5
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	0020      	movs	r0, r4
 800802a:	4643      	mov	r3, r8
 800802c:	f004 fafc 	bl	800c628 <acc_confprogram_patch_offset>
 8008030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008032:	0032      	movs	r2, r6
 8008034:	9301      	str	r3, [sp, #4]
 8008036:	2378      	movs	r3, #120	; 0x78
 8008038:	0029      	movs	r1, r5
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	0020      	movs	r0, r4
 800803e:	4643      	mov	r3, r8
 8008040:	f004 faf2 	bl	800c628 <acc_confprogram_patch_offset>
 8008044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008046:	4553      	cmp	r3, sl
 8008048:	d06e      	beq.n	8008128 <start.lto_priv.298+0x304>
 800804a:	2301      	movs	r3, #1
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	330e      	adds	r3, #14
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	0032      	movs	r2, r6
 8008054:	4643      	mov	r3, r8
 8008056:	0029      	movs	r1, r5
 8008058:	0020      	movs	r0, r4
 800805a:	f004 fae5 	bl	800c628 <acc_confprogram_patch_offset>
 800805e:	4b95      	ldr	r3, [pc, #596]	; (80082b4 <start.lto_priv.298+0x490>)
 8008060:	0032      	movs	r2, r6
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	2311      	movs	r3, #17
 8008066:	0029      	movs	r1, r5
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	0020      	movs	r0, r4
 800806c:	4643      	mov	r3, r8
 800806e:	f004 fadb 	bl	800c628 <acc_confprogram_patch_offset>
 8008072:	2207      	movs	r2, #7
 8008074:	2313      	movs	r3, #19
 8008076:	4691      	mov	r9, r2
 8008078:	9201      	str	r2, [sp, #4]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	0032      	movs	r2, r6
 800807e:	4643      	mov	r3, r8
 8008080:	0029      	movs	r1, r5
 8008082:	0020      	movs	r0, r4
 8008084:	f004 fad0 	bl	800c628 <acc_confprogram_patch_offset>
 8008088:	4b8a      	ldr	r3, [pc, #552]	; (80082b4 <start.lto_priv.298+0x490>)
 800808a:	0032      	movs	r2, r6
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	2310      	movs	r3, #16
 8008090:	0029      	movs	r1, r5
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	0020      	movs	r0, r4
 8008096:	4643      	mov	r3, r8
 8008098:	f004 fac6 	bl	800c628 <acc_confprogram_patch_offset>
 800809c:	4653      	mov	r3, sl
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	3312      	adds	r3, #18
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	0032      	movs	r2, r6
 80080a6:	4643      	mov	r3, r8
 80080a8:	0029      	movs	r1, r5
 80080aa:	0020      	movs	r0, r4
 80080ac:	f004 fabc 	bl	800c628 <acc_confprogram_patch_offset>
 80080b0:	4b81      	ldr	r3, [pc, #516]	; (80082b8 <start.lto_priv.298+0x494>)
 80080b2:	0032      	movs	r2, r6
 80080b4:	9301      	str	r3, [sp, #4]
 80080b6:	2314      	movs	r3, #20
 80080b8:	0029      	movs	r1, r5
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	0020      	movs	r0, r4
 80080be:	4643      	mov	r3, r8
 80080c0:	f004 fab2 	bl	800c628 <acc_confprogram_patch_offset>
 80080c4:	464b      	mov	r3, r9
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	330e      	adds	r3, #14
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	0032      	movs	r2, r6
 80080ce:	4643      	mov	r3, r8
 80080d0:	0029      	movs	r1, r5
 80080d2:	0020      	movs	r0, r4
 80080d4:	f004 faa8 	bl	800c628 <acc_confprogram_patch_offset>
 80080d8:	4b78      	ldr	r3, [pc, #480]	; (80082bc <start.lto_priv.298+0x498>)
 80080da:	0032      	movs	r2, r6
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	230d      	movs	r3, #13
 80080e0:	0029      	movs	r1, r5
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	0020      	movs	r0, r4
 80080e6:	4643      	mov	r3, r8
 80080e8:	f004 fa9e 	bl	800c628 <acc_confprogram_patch_offset>
 80080ec:	464b      	mov	r3, r9
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	18db      	adds	r3, r3, r3
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	0032      	movs	r2, r6
 80080f6:	4643      	mov	r3, r8
 80080f8:	0029      	movs	r1, r5
 80080fa:	0020      	movs	r0, r4
 80080fc:	f004 fa94 	bl	800c628 <acc_confprogram_patch_offset>
 8008100:	4b6f      	ldr	r3, [pc, #444]	; (80082c0 <start.lto_priv.298+0x49c>)
 8008102:	0032      	movs	r2, r6
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	2316      	movs	r3, #22
 8008108:	0029      	movs	r1, r5
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	0020      	movs	r0, r4
 800810e:	4643      	mov	r3, r8
 8008110:	f004 fa8a 	bl	800c628 <acc_confprogram_patch_offset>
 8008114:	464b      	mov	r3, r9
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	3310      	adds	r3, #16
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	0032      	movs	r2, r6
 800811e:	4643      	mov	r3, r8
 8008120:	0029      	movs	r1, r5
 8008122:	0020      	movs	r0, r4
 8008124:	f004 fa80 	bl	800c628 <acc_confprogram_patch_offset>
 8008128:	4b61      	ldr	r3, [pc, #388]	; (80082b0 <start.lto_priv.298+0x48c>)
 800812a:	0032      	movs	r2, r6
 800812c:	4699      	mov	r9, r3
 800812e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008130:	0029      	movs	r1, r5
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	2386      	movs	r3, #134	; 0x86
 8008136:	0020      	movs	r0, r4
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	464b      	mov	r3, r9
 800813c:	f004 fa74 	bl	800c628 <acc_confprogram_patch_offset>
 8008140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008142:	0032      	movs	r2, r6
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	23d3      	movs	r3, #211	; 0xd3
 8008148:	0029      	movs	r1, r5
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	0020      	movs	r0, r4
 800814e:	464b      	mov	r3, r9
 8008150:	f004 fa6a 	bl	800c628 <acc_confprogram_patch_offset>
 8008154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008156:	0032      	movs	r2, r6
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	23f3      	movs	r3, #243	; 0xf3
 800815c:	0029      	movs	r1, r5
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	0020      	movs	r0, r4
 8008162:	464b      	mov	r3, r9
 8008164:	f004 fa60 	bl	800c628 <acc_confprogram_patch_offset>
 8008168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800816a:	0032      	movs	r2, r6
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	2382      	movs	r3, #130	; 0x82
 8008170:	0029      	movs	r1, r5
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	0020      	movs	r0, r4
 8008176:	464b      	mov	r3, r9
 8008178:	f004 fa56 	bl	800c628 <acc_confprogram_patch_offset>
 800817c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800817e:	b29a      	uxth	r2, r3
 8008180:	4690      	mov	r8, r2
 8008182:	2200      	movs	r2, #0
 8008184:	9204      	str	r2, [sp, #16]
 8008186:	4642      	mov	r2, r8
 8008188:	2a08      	cmp	r2, #8
 800818a:	d914      	bls.n	80081b6 <start.lto_priv.298+0x392>
 800818c:	4643      	mov	r3, r8
 800818e:	22ff      	movs	r2, #255	; 0xff
 8008190:	3b08      	subs	r3, #8
 8008192:	409a      	lsls	r2, r3
 8008194:	0013      	movs	r3, r2
 8008196:	22ff      	movs	r2, #255	; 0xff
 8008198:	4393      	bics	r3, r2
 800819a:	b29b      	uxth	r3, r3
 800819c:	9304      	str	r3, [sp, #16]
 800819e:	2302      	movs	r3, #2
 80081a0:	9301      	str	r3, [sp, #4]
 80081a2:	33e0      	adds	r3, #224	; 0xe0
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	0032      	movs	r2, r6
 80081a8:	464b      	mov	r3, r9
 80081aa:	0029      	movs	r1, r5
 80081ac:	0020      	movs	r0, r4
 80081ae:	f004 fa3b 	bl	800c628 <acc_confprogram_patch_offset>
 80081b2:	2308      	movs	r3, #8
 80081b4:	4698      	mov	r8, r3
 80081b6:	4b3e      	ldr	r3, [pc, #248]	; (80082b0 <start.lto_priv.298+0x48c>)
 80081b8:	0032      	movs	r2, r6
 80081ba:	469a      	mov	sl, r3
 80081bc:	4643      	mov	r3, r8
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	23e9      	movs	r3, #233	; 0xe9
 80081c2:	0029      	movs	r1, r5
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	0020      	movs	r0, r4
 80081c8:	4653      	mov	r3, sl
 80081ca:	f004 fa2d 	bl	800c628 <acc_confprogram_patch_offset>
 80081ce:	4643      	mov	r3, r8
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	23d9      	movs	r3, #217	; 0xd9
 80081d4:	0032      	movs	r2, r6
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	0029      	movs	r1, r5
 80081da:	4653      	mov	r3, sl
 80081dc:	0020      	movs	r0, r4
 80081de:	f004 fa23 	bl	800c628 <acc_confprogram_patch_offset>
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	9a04      	ldr	r2, [sp, #16]
 80081e6:	0029      	movs	r1, r5
 80081e8:	4313      	orrs	r3, r2
 80081ea:	930c      	str	r3, [sp, #48]	; 0x30
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	23eb      	movs	r3, #235	; 0xeb
 80081f0:	0032      	movs	r2, r6
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	0020      	movs	r0, r4
 80081f6:	4653      	mov	r3, sl
 80081f8:	f004 fa16 	bl	800c628 <acc_confprogram_patch_offset>
 80081fc:	23c0      	movs	r3, #192	; 0xc0
 80081fe:	9a04      	ldr	r2, [sp, #16]
 8008200:	0029      	movs	r1, r5
 8008202:	431a      	orrs	r2, r3
 8008204:	23ed      	movs	r3, #237	; 0xed
 8008206:	4690      	mov	r8, r2
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	0032      	movs	r2, r6
 800820e:	4653      	mov	r3, sl
 8008210:	0020      	movs	r0, r4
 8008212:	f004 fa09 	bl	800c628 <acc_confprogram_patch_offset>
 8008216:	23ff      	movs	r3, #255	; 0xff
 8008218:	9a04      	ldr	r2, [sp, #16]
 800821a:	0029      	movs	r1, r5
 800821c:	4313      	orrs	r3, r2
 800821e:	4699      	mov	r9, r3
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	23ec      	movs	r3, #236	; 0xec
 8008224:	0032      	movs	r2, r6
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	0020      	movs	r0, r4
 800822a:	4653      	mov	r3, sl
 800822c:	f004 f9fc 	bl	800c628 <acc_confprogram_patch_offset>
 8008230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008232:	0032      	movs	r2, r6
 8008234:	9301      	str	r3, [sp, #4]
 8008236:	23db      	movs	r3, #219	; 0xdb
 8008238:	0029      	movs	r1, r5
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	0020      	movs	r0, r4
 800823e:	4653      	mov	r3, sl
 8008240:	f004 f9f2 	bl	800c628 <acc_confprogram_patch_offset>
 8008244:	4643      	mov	r3, r8
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	23dd      	movs	r3, #221	; 0xdd
 800824a:	0032      	movs	r2, r6
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	0029      	movs	r1, r5
 8008250:	4653      	mov	r3, sl
 8008252:	0020      	movs	r0, r4
 8008254:	f004 f9e8 	bl	800c628 <acc_confprogram_patch_offset>
 8008258:	464b      	mov	r3, r9
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	23dc      	movs	r3, #220	; 0xdc
 800825e:	0032      	movs	r2, r6
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	0029      	movs	r1, r5
 8008264:	4653      	mov	r3, sl
 8008266:	0020      	movs	r0, r4
 8008268:	f004 f9de 	bl	800c628 <acc_confprogram_patch_offset>
 800826c:	22f0      	movs	r2, #240	; 0xf0
 800826e:	9b04      	ldr	r3, [sp, #16]
 8008270:	0029      	movs	r1, r5
 8008272:	4313      	orrs	r3, r2
 8008274:	4698      	mov	r8, r3
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	23cd      	movs	r3, #205	; 0xcd
 800827a:	0032      	movs	r2, r6
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	0020      	movs	r0, r4
 8008280:	4653      	mov	r3, sl
 8008282:	f004 f9d1 	bl	800c628 <acc_confprogram_patch_offset>
 8008286:	4643      	mov	r3, r8
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	2385      	movs	r3, #133	; 0x85
 800828c:	0032      	movs	r2, r6
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	0029      	movs	r1, r5
 8008292:	4653      	mov	r3, sl
 8008294:	0020      	movs	r0, r4
 8008296:	f004 f9c7 	bl	800c628 <acc_confprogram_patch_offset>
 800829a:	464b      	mov	r3, r9
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	2321      	movs	r3, #33	; 0x21
 80082a0:	0032      	movs	r2, r6
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	e00e      	b.n	80082c4 <start.lto_priv.298+0x4a0>
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	0000076a 	.word	0x0000076a
 80082ac:	08017cc8 	.word	0x08017cc8
 80082b0:	08016788 	.word	0x08016788
 80082b4:	0000ff80 	.word	0x0000ff80
 80082b8:	0000ffc0 	.word	0x0000ffc0
 80082bc:	0000fff0 	.word	0x0000fff0
 80082c0:	0000ffff 	.word	0x0000ffff
 80082c4:	0029      	movs	r1, r5
 80082c6:	4653      	mov	r3, sl
 80082c8:	0020      	movs	r0, r4
 80082ca:	f004 f9ad 	bl	800c628 <acc_confprogram_patch_offset>
 80082ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082d0:	0032      	movs	r2, r6
 80082d2:	3b01      	subs	r3, #1
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	2374      	movs	r3, #116	; 0x74
 80082d8:	0029      	movs	r1, r5
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	0020      	movs	r0, r4
 80082de:	4653      	mov	r3, sl
 80082e0:	f004 f9a2 	bl	800c628 <acc_confprogram_patch_offset>
 80082e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e6:	0032      	movs	r2, r6
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	2305      	movs	r3, #5
 80082ec:	0029      	movs	r1, r5
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	0020      	movs	r0, r4
 80082f2:	4653      	mov	r3, sl
 80082f4:	f004 f998 	bl	800c628 <acc_confprogram_patch_offset>
 80082f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fa:	0032      	movs	r2, r6
 80082fc:	015b      	lsls	r3, r3, #5
 80082fe:	3b03      	subs	r3, #3
 8008300:	9301      	str	r3, [sp, #4]
 8008302:	2363      	movs	r3, #99	; 0x63
 8008304:	0029      	movs	r1, r5
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	0020      	movs	r0, r4
 800830a:	4653      	mov	r3, sl
 800830c:	f004 f98c 	bl	800c628 <acc_confprogram_patch_offset>
 8008310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008312:	0032      	movs	r2, r6
 8008314:	015b      	lsls	r3, r3, #5
 8008316:	085b      	lsrs	r3, r3, #1
 8008318:	3b03      	subs	r3, #3
 800831a:	9301      	str	r3, [sp, #4]
 800831c:	2364      	movs	r3, #100	; 0x64
 800831e:	0029      	movs	r1, r5
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	0020      	movs	r0, r4
 8008324:	4653      	mov	r3, sl
 8008326:	f004 f97f 	bl	800c628 <acc_confprogram_patch_offset>
 800832a:	2390      	movs	r3, #144	; 0x90
 800832c:	4698      	mov	r8, r3
 800832e:	44b8      	add	r8, r7
 8008330:	4643      	mov	r3, r8
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	0032      	movs	r2, r6
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	23de      	movs	r3, #222	; 0xde
 800833a:	0029      	movs	r1, r5
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	0020      	movs	r0, r4
 8008340:	4653      	mov	r3, sl
 8008342:	f004 f971 	bl	800c628 <acc_confprogram_patch_offset>
 8008346:	003b      	movs	r3, r7
 8008348:	338c      	adds	r3, #140	; 0x8c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	0032      	movs	r2, r6
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	23ee      	movs	r3, #238	; 0xee
 8008352:	0029      	movs	r1, r5
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	0020      	movs	r0, r4
 8008358:	4653      	mov	r3, sl
 800835a:	f004 f965 	bl	800c628 <acc_confprogram_patch_offset>
 800835e:	4643      	mov	r3, r8
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	0032      	movs	r2, r6
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	237e      	movs	r3, #126	; 0x7e
 8008368:	0029      	movs	r1, r5
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	0020      	movs	r0, r4
 800836e:	4653      	mov	r3, sl
 8008370:	f004 f95a 	bl	800c628 <acc_confprogram_patch_offset>
 8008374:	003b      	movs	r3, r7
 8008376:	3394      	adds	r3, #148	; 0x94
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	0032      	movs	r2, r6
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	23e4      	movs	r3, #228	; 0xe4
 8008380:	0029      	movs	r1, r5
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	0020      	movs	r0, r4
 8008386:	4653      	mov	r3, sl
 8008388:	f004 f94e 	bl	800c628 <acc_confprogram_patch_offset>
 800838c:	003b      	movs	r3, r7
 800838e:	3398      	adds	r3, #152	; 0x98
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	0032      	movs	r2, r6
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	237c      	movs	r3, #124	; 0x7c
 8008398:	0029      	movs	r1, r5
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	0020      	movs	r0, r4
 800839e:	4653      	mov	r3, sl
 80083a0:	f004 f942 	bl	800c628 <acc_confprogram_patch_offset>
 80083a4:	003b      	movs	r3, r7
 80083a6:	339c      	adds	r3, #156	; 0x9c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	0032      	movs	r2, r6
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	23c9      	movs	r3, #201	; 0xc9
 80083b0:	0029      	movs	r1, r5
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	0020      	movs	r0, r4
 80083b6:	4653      	mov	r3, sl
 80083b8:	f004 f936 	bl	800c628 <acc_confprogram_patch_offset>
 80083bc:	003b      	movs	r3, r7
 80083be:	33a0      	adds	r3, #160	; 0xa0
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	0032      	movs	r2, r6
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	2384      	movs	r3, #132	; 0x84
 80083c8:	0029      	movs	r1, r5
 80083ca:	9300      	str	r3, [sp, #0]
 80083cc:	0020      	movs	r0, r4
 80083ce:	4653      	mov	r3, sl
 80083d0:	f004 f92a 	bl	800c628 <acc_confprogram_patch_offset>
 80083d4:	003b      	movs	r3, r7
 80083d6:	33a4      	adds	r3, #164	; 0xa4
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	0032      	movs	r2, r6
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	237b      	movs	r3, #123	; 0x7b
 80083e0:	0029      	movs	r1, r5
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	0020      	movs	r0, r4
 80083e6:	4653      	mov	r3, sl
 80083e8:	f004 f91e 	bl	800c628 <acc_confprogram_patch_offset>
 80083ec:	003b      	movs	r3, r7
 80083ee:	33a8      	adds	r3, #168	; 0xa8
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	0032      	movs	r2, r6
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	23c7      	movs	r3, #199	; 0xc7
 80083f8:	0029      	movs	r1, r5
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	0020      	movs	r0, r4
 80083fe:	4653      	mov	r3, sl
 8008400:	f004 f912 	bl	800c628 <acc_confprogram_patch_offset>
 8008404:	003b      	movs	r3, r7
 8008406:	33ac      	adds	r3, #172	; 0xac
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	0032      	movs	r2, r6
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	2383      	movs	r3, #131	; 0x83
 8008410:	0029      	movs	r1, r5
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	0020      	movs	r0, r4
 8008416:	4653      	mov	r3, sl
 8008418:	f004 f906 	bl	800c628 <acc_confprogram_patch_offset>
 800841c:	003b      	movs	r3, r7
 800841e:	33b0      	adds	r3, #176	; 0xb0
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	0032      	movs	r2, r6
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	23c8      	movs	r3, #200	; 0xc8
 8008428:	0029      	movs	r1, r5
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	0020      	movs	r0, r4
 800842e:	4653      	mov	r3, sl
 8008430:	f004 f8fa 	bl	800c628 <acc_confprogram_patch_offset>
 8008434:	003b      	movs	r3, r7
 8008436:	3370      	adds	r3, #112	; 0x70
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	4698      	mov	r8, r3
 800843c:	4642      	mov	r2, r8
 800843e:	23d7      	movs	r3, #215	; 0xd7
 8008440:	2a00      	cmp	r2, #0
 8008442:	d000      	beq.n	8008446 <start.lto_priv.298+0x622>
 8008444:	e07e      	b.n	8008544 <start.lto_priv.298+0x720>
 8008446:	3201      	adds	r2, #1
 8008448:	9201      	str	r2, [sp, #4]
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	0032      	movs	r2, r6
 800844e:	4653      	mov	r3, sl
 8008450:	0029      	movs	r1, r5
 8008452:	0020      	movs	r0, r4
 8008454:	f004 f8e8 	bl	800c628 <acc_confprogram_patch_offset>
 8008458:	4643      	mov	r3, r8
 800845a:	9301      	str	r3, [sp, #4]
 800845c:	23d8      	movs	r3, #216	; 0xd8
 800845e:	0032      	movs	r2, r6
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	0029      	movs	r1, r5
 8008464:	4653      	mov	r3, sl
 8008466:	0020      	movs	r0, r4
 8008468:	f004 f8de 	bl	800c628 <acc_confprogram_patch_offset>
 800846c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800846e:	0032      	movs	r2, r6
 8008470:	3b01      	subs	r3, #1
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	23e3      	movs	r3, #227	; 0xe3
 8008476:	0029      	movs	r1, r5
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	0020      	movs	r0, r4
 800847c:	4653      	mov	r3, sl
 800847e:	f004 f8d3 	bl	800c628 <acc_confprogram_patch_offset>
 8008482:	4b66      	ldr	r3, [pc, #408]	; (800861c <start.lto_priv.298+0x7f8>)
 8008484:	0032      	movs	r2, r6
 8008486:	4698      	mov	r8, r3
 8008488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800848a:	0029      	movs	r1, r5
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	23d4      	movs	r3, #212	; 0xd4
 8008490:	0020      	movs	r0, r4
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	4643      	mov	r3, r8
 8008496:	f004 f8c7 	bl	800c628 <acc_confprogram_patch_offset>
 800849a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800849c:	0032      	movs	r2, r6
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	2375      	movs	r3, #117	; 0x75
 80084a2:	0029      	movs	r1, r5
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	0020      	movs	r0, r4
 80084a8:	4643      	mov	r3, r8
 80084aa:	f004 f8bd 	bl	800c628 <acc_confprogram_patch_offset>
 80084ae:	1d3b      	adds	r3, r7, #4
 80084b0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80084b2:	495b      	ldr	r1, [pc, #364]	; (8008620 <start.lto_priv.298+0x7fc>)
 80084b4:	f006 f80c 	bl	800e4d0 <__aeabi_fmul>
 80084b8:	f006 fd4a 	bl	800ef50 <__aeabi_f2uiz>
 80084bc:	23e5      	movs	r3, #229	; 0xe5
 80084be:	3801      	subs	r0, #1
 80084c0:	b280      	uxth	r0, r0
 80084c2:	9001      	str	r0, [sp, #4]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	0032      	movs	r2, r6
 80084c8:	4643      	mov	r3, r8
 80084ca:	0029      	movs	r1, r5
 80084cc:	0020      	movs	r0, r4
 80084ce:	f004 f8ab 	bl	800c628 <acc_confprogram_patch_offset>
 80084d2:	2308      	movs	r3, #8
 80084d4:	4699      	mov	r9, r3
 80084d6:	44b9      	add	r9, r7
 80084d8:	464b      	mov	r3, r9
 80084da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084dc:	0032      	movs	r2, r6
 80084de:	9301      	str	r3, [sp, #4]
 80084e0:	23d5      	movs	r3, #213	; 0xd5
 80084e2:	0029      	movs	r1, r5
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	0020      	movs	r0, r4
 80084e8:	4643      	mov	r3, r8
 80084ea:	f004 f89d 	bl	800c628 <acc_confprogram_patch_offset>
 80084ee:	464b      	mov	r3, r9
 80084f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00b      	beq.n	800850e <start.lto_priv.298+0x6ea>
 80084f6:	003b      	movs	r3, r7
 80084f8:	3388      	adds	r3, #136	; 0x88
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	0032      	movs	r2, r6
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	2371      	movs	r3, #113	; 0x71
 8008502:	0029      	movs	r1, r5
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	0020      	movs	r0, r4
 8008508:	4643      	mov	r3, r8
 800850a:	f004 f88d 	bl	800c628 <acc_confprogram_patch_offset>
 800850e:	466b      	mov	r3, sp
 8008510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008512:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8008514:	9806      	ldr	r0, [sp, #24]
 8008516:	9b05      	ldr	r3, [sp, #20]
 8008518:	f7fd fd9a 	bl	8006050 <acc_sensor_r2_load_confmem>
 800851c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	4694      	mov	ip, r2
 8008522:	4463      	add	r3, ip
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	9a03      	ldr	r2, [sp, #12]
 8008528:	4b3e      	ldr	r3, [pc, #248]	; (8008624 <start.lto_priv.298+0x800>)
 800852a:	429a      	cmp	r2, r3
 800852c:	d800      	bhi.n	8008530 <start.lto_priv.298+0x70c>
 800852e:	e4c5      	b.n	8007ebc <start.lto_priv.298+0x98>
 8008530:	465b      	mov	r3, fp
 8008532:	21f4      	movs	r1, #244	; 0xf4
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	0049      	lsls	r1, r1, #1
 8008538:	f7fd fb95 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 800853c:	1e04      	subs	r4, r0, #0
 800853e:	d146      	bne.n	80085ce <start.lto_priv.298+0x7aa>
 8008540:	2400      	movs	r4, #0
 8008542:	e4ad      	b.n	8007ea0 <start.lto_priv.298+0x7c>
 8008544:	2200      	movs	r2, #0
 8008546:	4690      	mov	r8, r2
 8008548:	9201      	str	r2, [sp, #4]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	0032      	movs	r2, r6
 800854e:	4653      	mov	r3, sl
 8008550:	0029      	movs	r1, r5
 8008552:	0020      	movs	r0, r4
 8008554:	f004 f868 	bl	800c628 <acc_confprogram_patch_offset>
 8008558:	2301      	movs	r3, #1
 800855a:	46c1      	mov	r9, r8
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	33d7      	adds	r3, #215	; 0xd7
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	0032      	movs	r2, r6
 8008564:	4653      	mov	r3, sl
 8008566:	0029      	movs	r1, r5
 8008568:	0020      	movs	r0, r4
 800856a:	f004 f85d 	bl	800c628 <acc_confprogram_patch_offset>
 800856e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008570:	3301      	adds	r3, #1
 8008572:	930d      	str	r3, [sp, #52]	; 0x34
 8008574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008576:	0029      	movs	r1, r5
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	464b      	mov	r3, r9
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	930c      	str	r3, [sp, #48]	; 0x30
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008584:	4599      	cmp	r9, r3
 8008586:	419b      	sbcs	r3, r3
 8008588:	425b      	negs	r3, r3
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	4b26      	ldr	r3, [pc, #152]	; (8008628 <start.lto_priv.298+0x804>)
 800858e:	0020      	movs	r0, r4
 8008590:	5a9b      	ldrh	r3, [r3, r2]
 8008592:	0032      	movs	r2, r6
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	4653      	mov	r3, sl
 8008598:	f004 f846 	bl	800c628 <acc_confprogram_patch_offset>
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	4599      	cmp	r9, r3
 80085a0:	d20b      	bcs.n	80085ba <start.lto_priv.298+0x796>
 80085a2:	4643      	mov	r3, r8
 80085a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	4b20      	ldr	r3, [pc, #128]	; (800862c <start.lto_priv.298+0x808>)
 80085aa:	0029      	movs	r1, r5
 80085ac:	5a9b      	ldrh	r3, [r3, r2]
 80085ae:	0020      	movs	r0, r4
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	0032      	movs	r2, r6
 80085b4:	4653      	mov	r3, sl
 80085b6:	f004 f837 	bl	800c628 <acc_confprogram_patch_offset>
 80085ba:	2301      	movs	r3, #1
 80085bc:	469c      	mov	ip, r3
 80085be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c0:	44e1      	add	r9, ip
 80085c2:	469c      	mov	ip, r3
 80085c4:	464b      	mov	r3, r9
 80085c6:	44e0      	add	r8, ip
 80085c8:	2b40      	cmp	r3, #64	; 0x40
 80085ca:	d1d3      	bne.n	8008574 <start.lto_priv.298+0x750>
 80085cc:	e759      	b.n	8008482 <start.lto_priv.298+0x65e>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <start.lto_priv.298+0x7b2>
 80085d4:	e464      	b.n	8007ea0 <start.lto_priv.298+0x7c>
 80085d6:	465b      	mov	r3, fp
 80085d8:	6919      	ldr	r1, [r3, #16]
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	f7fc fe7c 	bl	80052d8 <acc_sensor_protocol_r2_wait_for_sync_start>
 80085e0:	1e05      	subs	r5, r0, #0
 80085e2:	d0ad      	beq.n	8008540 <start.lto_priv.298+0x71c>
 80085e4:	4b12      	ldr	r3, [pc, #72]	; (8008630 <start.lto_priv.298+0x80c>)
 80085e6:	001a      	movs	r2, r3
 80085e8:	3230      	adds	r2, #48	; 0x30
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	2a01      	cmp	r2, #1
 80085ee:	d904      	bls.n	80085fa <start.lto_priv.298+0x7d6>
 80085f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f2:	4a10      	ldr	r2, [pc, #64]	; (8008634 <start.lto_priv.298+0x810>)
 80085f4:	4910      	ldr	r1, [pc, #64]	; (8008638 <start.lto_priv.298+0x814>)
 80085f6:	2002      	movs	r0, #2
 80085f8:	4798      	blx	r3
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d100      	bne.n	8008602 <start.lto_priv.298+0x7de>
 8008600:	e44e      	b.n	8007ea0 <start.lto_priv.298+0x7c>
 8008602:	4658      	mov	r0, fp
 8008604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008606:	4642      	mov	r2, r8
 8008608:	643b      	str	r3, [r7, #64]	; 0x40
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	490b      	ldr	r1, [pc, #44]	; (800863c <start.lto_priv.298+0x818>)
 800860e:	23ef      	movs	r3, #239	; 0xef
 8008610:	6800      	ldr	r0, [r0, #0]
 8008612:	f002 fb1f 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 8008616:	002c      	movs	r4, r5
 8008618:	e442      	b.n	8007ea0 <start.lto_priv.298+0x7c>
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	08016788 	.word	0x08016788
 8008620:	3751b717 	.word	0x3751b717
 8008624:	00000769 	.word	0x00000769
 8008628:	08016708 	.word	0x08016708
 800862c:	08016688 	.word	0x08016688
 8008630:	200002b8 	.word	0x200002b8
 8008634:	0801c8e6 	.word	0x0801c8e6
 8008638:	0801ca74 	.word	0x0801ca74
 800863c:	08017cc8 	.word	0x08017cc8

08008640 <calibrate.lto_priv.301>:
 8008640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008642:	4657      	mov	r7, sl
 8008644:	4645      	mov	r5, r8
 8008646:	46de      	mov	lr, fp
 8008648:	464e      	mov	r6, r9
 800864a:	b5e0      	push	{r5, r6, r7, lr}
 800864c:	4cb4      	ldr	r4, [pc, #720]	; (8008920 <calibrate.lto_priv.301+0x2e0>)
 800864e:	000f      	movs	r7, r1
 8008650:	44a5      	add	sp, r4
 8008652:	9337      	str	r3, [sp, #220]	; 0xdc
 8008654:	4bb3      	ldr	r3, [pc, #716]	; (8008924 <calibrate.lto_priv.301+0x2e4>)
 8008656:	920f      	str	r2, [sp, #60]	; 0x3c
 8008658:	4698      	mov	r8, r3
 800865a:	3330      	adds	r3, #48	; 0x30
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	0004      	movs	r4, r0
 8008660:	2b03      	cmp	r3, #3
 8008662:	d905      	bls.n	8008670 <calibrate.lto_priv.301+0x30>
 8008664:	4643      	mov	r3, r8
 8008666:	4ab0      	ldr	r2, [pc, #704]	; (8008928 <calibrate.lto_priv.301+0x2e8>)
 8008668:	49b0      	ldr	r1, [pc, #704]	; (800892c <calibrate.lto_priv.301+0x2ec>)
 800866a:	2004      	movs	r0, #4
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	4798      	blx	r3
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	6965      	ldr	r5, [r4, #20]
 8008674:	9309      	str	r3, [sp, #36]	; 0x24
 8008676:	002b      	movs	r3, r5
 8008678:	2600      	movs	r6, #0
 800867a:	33bc      	adds	r3, #188	; 0xbc
 800867c:	ac48      	add	r4, sp, #288	; 0x120
 800867e:	601e      	str	r6, [r3, #0]
 8008680:	0020      	movs	r0, r4
 8008682:	f7fd fd65 	bl	8006150 <calculate_pll_divisors.lto_priv.299>
 8008686:	42b0      	cmp	r0, r6
 8008688:	d10a      	bne.n	80086a0 <calibrate.lto_priv.301+0x60>
 800868a:	2400      	movs	r4, #0
 800868c:	0020      	movs	r0, r4
 800868e:	239b      	movs	r3, #155	; 0x9b
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	449d      	add	sp, r3
 8008694:	bc3c      	pop	{r2, r3, r4, r5}
 8008696:	4690      	mov	r8, r2
 8008698:	4699      	mov	r9, r3
 800869a:	46a2      	mov	sl, r4
 800869c:	46ab      	mov	fp, r5
 800869e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a2:	aa4e      	add	r2, sp, #312	; 0x138
 80086a4:	934e      	str	r3, [sp, #312]	; 0x138
 80086a6:	8863      	ldrh	r3, [r4, #2]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	6053      	str	r3, [r2, #4]
 80086ac:	88a3      	ldrh	r3, [r4, #4]
 80086ae:	6838      	ldr	r0, [r7, #0]
 80086b0:	6093      	str	r3, [r2, #8]
 80086b2:	88e3      	ldrh	r3, [r4, #6]
 80086b4:	60d3      	str	r3, [r2, #12]
 80086b6:	8923      	ldrh	r3, [r4, #8]
 80086b8:	8213      	strh	r3, [r2, #16]
 80086ba:	ab46      	add	r3, sp, #280	; 0x118
 80086bc:	4699      	mov	r9, r3
 80086be:	f005 f9e4 	bl	800da8a <acc_cpd_cbank_and_vana_calibration>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0e1      	beq.n	800868a <calibrate.lto_priv.301+0x4a>
 80086c6:	002b      	movs	r3, r5
 80086c8:	33ce      	adds	r3, #206	; 0xce
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	35d0      	adds	r5, #208	; 0xd0
 80086ce:	930c      	str	r3, [sp, #48]	; 0x30
 80086d0:	1e5a      	subs	r2, r3, #1
 80086d2:	4193      	sbcs	r3, r2
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	9338      	str	r3, [sp, #224]	; 0xe0
 80086d8:	782b      	ldrb	r3, [r5, #0]
 80086da:	4a95      	ldr	r2, [pc, #596]	; (8008930 <calibrate.lto_priv.301+0x2f0>)
 80086dc:	932a      	str	r3, [sp, #168]	; 0xa8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d80e      	bhi.n	8008702 <calibrate.lto_priv.301+0xc2>
 80086e4:	4643      	mov	r3, r8
 80086e6:	4a93      	ldr	r2, [pc, #588]	; (8008934 <calibrate.lto_priv.301+0x2f4>)
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	4993      	ldr	r1, [pc, #588]	; (8008938 <calibrate.lto_priv.301+0x2f8>)
 80086ec:	0030      	movs	r0, r6
 80086ee:	4798      	blx	r3
 80086f0:	4b92      	ldr	r3, [pc, #584]	; (800893c <calibrate.lto_priv.301+0x2fc>)
 80086f2:	9617      	str	r6, [sp, #92]	; 0x5c
 80086f4:	9316      	str	r3, [sp, #88]	; 0x58
 80086f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0c6      	beq.n	800868a <calibrate.lto_priv.301+0x4a>
 80086fc:	2400      	movs	r4, #0
 80086fe:	f001 f986 	bl	8009a0e <calibrate.lto_priv.301+0x13ce>
 8008702:	8862      	ldrh	r2, [r4, #2]
 8008704:	2101      	movs	r1, #1
 8008706:	9224      	str	r2, [sp, #144]	; 0x90
 8008708:	88a2      	ldrh	r2, [r4, #4]
 800870a:	9225      	str	r2, [sp, #148]	; 0x94
 800870c:	88e2      	ldrh	r2, [r4, #6]
 800870e:	9226      	str	r2, [sp, #152]	; 0x98
 8008710:	8922      	ldrh	r2, [r4, #8]
 8008712:	9227      	str	r2, [sp, #156]	; 0x9c
 8008714:	9a46      	ldr	r2, [sp, #280]	; 0x118
 8008716:	9228      	str	r2, [sp, #160]	; 0xa0
 8008718:	464a      	mov	r2, r9
 800871a:	7912      	ldrb	r2, [r2, #4]
 800871c:	9229      	str	r2, [sp, #164]	; 0xa4
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	9210      	str	r2, [sp, #64]	; 0x40
 8008722:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008724:	4a86      	ldr	r2, [pc, #536]	; (8008940 <calibrate.lto_priv.301+0x300>)
 8008726:	4684      	mov	ip, r0
 8008728:	189a      	adds	r2, r3, r2
 800872a:	438a      	bics	r2, r1
 800872c:	4462      	add	r2, ip
 800872e:	922b      	str	r2, [sp, #172]	; 0xac
 8008730:	4a84      	ldr	r2, [pc, #528]	; (8008944 <calibrate.lto_priv.301+0x304>)
 8008732:	4683      	mov	fp, r0
 8008734:	4694      	mov	ip, r2
 8008736:	4463      	add	r3, ip
 8008738:	9313      	str	r3, [sp, #76]	; 0x4c
 800873a:	438b      	bics	r3, r1
 800873c:	449b      	add	fp, r3
 800873e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008740:	4b81      	ldr	r3, [pc, #516]	; (8008948 <calibrate.lto_priv.301+0x308>)
 8008742:	429a      	cmp	r2, r3
 8008744:	d80a      	bhi.n	800875c <calibrate.lto_priv.301+0x11c>
 8008746:	4b77      	ldr	r3, [pc, #476]	; (8008924 <calibrate.lto_priv.301+0x2e4>)
 8008748:	001a      	movs	r2, r3
 800874a:	3230      	adds	r2, #48	; 0x30
 800874c:	7812      	ldrb	r2, [r2, #0]
 800874e:	428a      	cmp	r2, r1
 8008750:	d904      	bls.n	800875c <calibrate.lto_priv.301+0x11c>
 8008752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008754:	4a7d      	ldr	r2, [pc, #500]	; (800894c <calibrate.lto_priv.301+0x30c>)
 8008756:	4978      	ldr	r1, [pc, #480]	; (8008938 <calibrate.lto_priv.301+0x2f8>)
 8008758:	2002      	movs	r0, #2
 800875a:	4798      	blx	r3
 800875c:	487c      	ldr	r0, [pc, #496]	; (8008950 <calibrate.lto_priv.301+0x310>)
 800875e:	f004 f812 	bl	800c786 <acc_diagnostic_log_set_scope>
 8008762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008764:	487b      	ldr	r0, [pc, #492]	; (8008954 <calibrate.lto_priv.301+0x314>)
 8008766:	f004 f80a 	bl	800c77e <acc_diagnostic_log_scalar>
 800876a:	2202      	movs	r2, #2
 800876c:	2101      	movs	r1, #1
 800876e:	487a      	ldr	r0, [pc, #488]	; (8008958 <calibrate.lto_priv.301+0x318>)
 8008770:	f004 f808 	bl	800c784 <acc_diagnostic_log_declare_parameter>
 8008774:	221f      	movs	r2, #31
 8008776:	2100      	movs	r1, #0
 8008778:	4878      	ldr	r0, [pc, #480]	; (800895c <calibrate.lto_priv.301+0x31c>)
 800877a:	f004 f803 	bl	800c784 <acc_diagnostic_log_declare_parameter>
 800877e:	227b      	movs	r2, #123	; 0x7b
 8008780:	2100      	movs	r1, #0
 8008782:	4877      	ldr	r0, [pc, #476]	; (8008960 <calibrate.lto_priv.301+0x320>)
 8008784:	f003 fffe 	bl	800c784 <acc_diagnostic_log_declare_parameter>
 8008788:	220b      	movs	r2, #11
 800878a:	2100      	movs	r1, #0
 800878c:	4875      	ldr	r0, [pc, #468]	; (8008964 <calibrate.lto_priv.301+0x324>)
 800878e:	f003 fff9 	bl	800c784 <acc_diagnostic_log_declare_parameter>
 8008792:	2302      	movs	r3, #2
 8008794:	9336      	str	r3, [sp, #216]	; 0xd8
 8008796:	4b69      	ldr	r3, [pc, #420]	; (800893c <calibrate.lto_priv.301+0x2fc>)
 8008798:	9316      	str	r3, [sp, #88]	; 0x58
 800879a:	2300      	movs	r3, #0
 800879c:	9317      	str	r3, [sp, #92]	; 0x5c
 800879e:	3302      	adds	r3, #2
 80087a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087a4:	486c      	ldr	r0, [pc, #432]	; (8008958 <calibrate.lto_priv.301+0x318>)
 80087a6:	f003 ffec 	bl	800c782 <acc_diagnostic_log_set_parameter>
 80087aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80087ac:	930a      	str	r3, [sp, #40]	; 0x28
 80087ae:	2300      	movs	r3, #0
 80087b0:	4699      	mov	r9, r3
 80087b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	930d      	str	r3, [sp, #52]	; 0x34
 80087b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087ba:	4b6b      	ldr	r3, [pc, #428]	; (8008968 <calibrate.lto_priv.301+0x328>)
 80087bc:	4694      	mov	ip, r2
 80087be:	4463      	add	r3, ip
 80087c0:	9312      	str	r3, [sp, #72]	; 0x48
 80087c2:	2400      	movs	r4, #0
 80087c4:	4649      	mov	r1, r9
 80087c6:	4867      	ldr	r0, [pc, #412]	; (8008964 <calibrate.lto_priv.301+0x324>)
 80087c8:	f003 ffdb 	bl	800c782 <acc_diagnostic_log_set_parameter>
 80087cc:	ab8d      	add	r3, sp, #564	; 0x234
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087d2:	ab80      	add	r3, sp, #512	; 0x200
 80087d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80087d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087d8:	9480      	str	r4, [sp, #512]	; 0x200
 80087da:	948d      	str	r4, [sp, #564]	; 0x234
 80087dc:	f004 fbe6 	bl	800cfac <acc_sensor_protocol_r2_prepare_load.constprop.21>
 80087e0:	42a0      	cmp	r0, r4
 80087e2:	d105      	bne.n	80087f0 <calibrate.lto_priv.301+0x1b0>
 80087e4:	4b4f      	ldr	r3, [pc, #316]	; (8008924 <calibrate.lto_priv.301+0x2e4>)
 80087e6:	4a61      	ldr	r2, [pc, #388]	; (800896c <calibrate.lto_priv.301+0x32c>)
 80087e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ea:	4961      	ldr	r1, [pc, #388]	; (8008970 <calibrate.lto_priv.301+0x330>)
 80087ec:	4798      	blx	r3
 80087ee:	e782      	b.n	80086f6 <calibrate.lto_priv.301+0xb6>
 80087f0:	4b60      	ldr	r3, [pc, #384]	; (8008974 <calibrate.lto_priv.301+0x334>)
 80087f2:	9a8d      	ldr	r2, [sp, #564]	; 0x234
 80087f4:	9d80      	ldr	r5, [sp, #512]	; 0x200
 80087f6:	1b1b      	subs	r3, r3, r4
 80087f8:	4692      	mov	sl, r2
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d900      	bls.n	8008800 <calibrate.lto_priv.301+0x1c0>
 80087fe:	469a      	mov	sl, r3
 8008800:	0863      	lsrs	r3, r4, #1
 8008802:	9311      	str	r3, [sp, #68]	; 0x44
 8008804:	4653      	mov	r3, sl
 8008806:	085a      	lsrs	r2, r3, #1
 8008808:	0863      	lsrs	r3, r4, #1
 800880a:	0098      	lsls	r0, r3, #2
 800880c:	4b5a      	ldr	r3, [pc, #360]	; (8008978 <calibrate.lto_priv.301+0x338>)
 800880e:	0029      	movs	r1, r5
 8008810:	18c0      	adds	r0, r0, r3
 8008812:	f003 fec1 	bl	800c598 <acc_confprogram_copy>
 8008816:	4653      	mov	r3, sl
 8008818:	b29f      	uxth	r7, r3
 800881a:	4b58      	ldr	r3, [pc, #352]	; (800897c <calibrate.lto_priv.301+0x33c>)
 800881c:	b2a6      	uxth	r6, r4
 800881e:	4698      	mov	r8, r3
 8008820:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008822:	003a      	movs	r2, r7
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	231b      	movs	r3, #27
 8008828:	0031      	movs	r1, r6
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	0028      	movs	r0, r5
 800882e:	4643      	mov	r3, r8
 8008830:	f003 fefa 	bl	800c628 <acc_confprogram_patch_offset>
 8008834:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008836:	003a      	movs	r2, r7
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	2319      	movs	r3, #25
 800883c:	0031      	movs	r1, r6
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	0028      	movs	r0, r5
 8008842:	4643      	mov	r3, r8
 8008844:	f003 fef0 	bl	800c628 <acc_confprogram_patch_offset>
 8008848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800884a:	003a      	movs	r2, r7
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	231a      	movs	r3, #26
 8008850:	0031      	movs	r1, r6
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	0028      	movs	r0, r5
 8008856:	4643      	mov	r3, r8
 8008858:	f003 fee6 	bl	800c628 <acc_confprogram_patch_offset>
 800885c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800885e:	003a      	movs	r2, r7
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	2317      	movs	r3, #23
 8008864:	0031      	movs	r1, r6
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	0028      	movs	r0, r5
 800886a:	4643      	mov	r3, r8
 800886c:	f003 fedc 	bl	800c628 <acc_confprogram_patch_offset>
 8008870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008872:	003a      	movs	r2, r7
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	230d      	movs	r3, #13
 8008878:	0031      	movs	r1, r6
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	0028      	movs	r0, r5
 800887e:	4643      	mov	r3, r8
 8008880:	f003 fed2 	bl	800c628 <acc_confprogram_patch_offset>
 8008884:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8008886:	003a      	movs	r2, r7
 8008888:	9301      	str	r3, [sp, #4]
 800888a:	232a      	movs	r3, #42	; 0x2a
 800888c:	0031      	movs	r1, r6
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	0028      	movs	r0, r5
 8008892:	4643      	mov	r3, r8
 8008894:	f003 fec8 	bl	800c628 <acc_confprogram_patch_offset>
 8008898:	464b      	mov	r3, r9
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	230f      	movs	r3, #15
 800889e:	003a      	movs	r2, r7
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	0031      	movs	r1, r6
 80088a4:	4643      	mov	r3, r8
 80088a6:	0028      	movs	r0, r5
 80088a8:	f003 febe 	bl	800c628 <acc_confprogram_patch_offset>
 80088ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ae:	003a      	movs	r2, r7
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	232c      	movs	r3, #44	; 0x2c
 80088b4:	0031      	movs	r1, r6
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	0028      	movs	r0, r5
 80088ba:	4643      	mov	r3, r8
 80088bc:	f003 feb4 	bl	800c628 <acc_confprogram_patch_offset>
 80088c0:	2244      	movs	r2, #68	; 0x44
 80088c2:	466b      	mov	r3, sp
 80088c4:	189b      	adds	r3, r3, r2
 80088c6:	8819      	ldrh	r1, [r3, #0]
 80088c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088ca:	4653      	mov	r3, sl
 80088cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ce:	f7fd fbbf 	bl	8006050 <acc_sensor_r2_load_confmem>
 80088d2:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 80088d4:	469c      	mov	ip, r3
 80088d6:	4b2a      	ldr	r3, [pc, #168]	; (8008980 <calibrate.lto_priv.301+0x340>)
 80088d8:	4464      	add	r4, ip
 80088da:	429c      	cmp	r4, r3
 80088dc:	d988      	bls.n	80087f0 <calibrate.lto_priv.301+0x1b0>
 80088de:	2118      	movs	r1, #24
 80088e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088e2:	f7fd f9c0 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 80088e6:	2800      	cmp	r0, #0
 80088e8:	d105      	bne.n	80088f6 <calibrate.lto_priv.301+0x2b6>
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <calibrate.lto_priv.301+0x2e4>)
 80088ec:	4a25      	ldr	r2, [pc, #148]	; (8008984 <calibrate.lto_priv.301+0x344>)
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	491f      	ldr	r1, [pc, #124]	; (8008970 <calibrate.lto_priv.301+0x330>)
 80088f2:	4798      	blx	r3
 80088f4:	e6ff      	b.n	80086f6 <calibrate.lto_priv.301+0xb6>
 80088f6:	21fa      	movs	r1, #250	; 0xfa
 80088f8:	2300      	movs	r3, #0
 80088fa:	2208      	movs	r2, #8
 80088fc:	00c9      	lsls	r1, r1, #3
 80088fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008900:	f7fd f974 	bl	8005bec <acc_sensor_protocol_r2_wait_for_specific_event>
 8008904:	2800      	cmp	r0, #0
 8008906:	d100      	bne.n	800890a <calibrate.lto_priv.301+0x2ca>
 8008908:	e6f5      	b.n	80086f6 <calibrate.lto_priv.301+0xb6>
 800890a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800890c:	2b37      	cmp	r3, #55	; 0x37
 800890e:	d83d      	bhi.n	800898c <calibrate.lto_priv.301+0x34c>
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <calibrate.lto_priv.301+0x2e4>)
 8008912:	4a1d      	ldr	r2, [pc, #116]	; (8008988 <calibrate.lto_priv.301+0x348>)
 8008914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008916:	4916      	ldr	r1, [pc, #88]	; (8008970 <calibrate.lto_priv.301+0x330>)
 8008918:	2000      	movs	r0, #0
 800891a:	4798      	blx	r3
 800891c:	e6eb      	b.n	80086f6 <calibrate.lto_priv.301+0xb6>
 800891e:	46c0      	nop			; (mov r8, r8)
 8008920:	fffffd94 	.word	0xfffffd94
 8008924:	200002b8 	.word	0x200002b8
 8008928:	0801cf87 	.word	0x0801cf87
 800892c:	0801c8b8 	.word	0x0801c8b8
 8008930:	00000313 	.word	0x00000313
 8008934:	0801c99c 	.word	0x0801c99c
 8008938:	0801cfa4 	.word	0x0801cfa4
 800893c:	ff800000 	.word	0xff800000
 8008940:	fffffda8 	.word	0xfffffda8
 8008944:	fffffcec 	.word	0xfffffcec
 8008948:	000001ff 	.word	0x000001ff
 800894c:	0801cfb4 	.word	0x0801cfb4
 8008950:	0801cfdf 	.word	0x0801cfdf
 8008954:	0801cfee 	.word	0x0801cfee
 8008958:	0801cff8 	.word	0x0801cff8
 800895c:	0801d48b 	.word	0x0801d48b
 8008960:	0801d2ca 	.word	0x0801d2ca
 8008964:	0801d092 	.word	0x0801d092
 8008968:	08015620 	.word	0x08015620
 800896c:	0801d001 	.word	0x0801d001
 8008970:	0801d026 	.word	0x0801d026
 8008974:	000006ac 	.word	0x000006ac
 8008978:	08016f70 	.word	0x08016f70
 800897c:	080164c0 	.word	0x080164c0
 8008980:	000006ab 	.word	0x000006ab
 8008984:	0801d03e 	.word	0x0801d03e
 8008988:	0801d070 	.word	0x0801d070
 800898c:	2219      	movs	r2, #25
 800898e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008992:	f002 f8fd 	bl	800ab90 <internal_buffer_processed_read.constprop.30>
 8008996:	0004      	movs	r4, r0
 8008998:	2319      	movs	r3, #25
 800899a:	0002      	movs	r2, r0
 800899c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800899e:	200a      	movs	r0, #10
 80089a0:	f005 f864 	bl	800da6c <acc_probes_execute_uint16>
 80089a4:	2232      	movs	r2, #50	; 0x32
 80089a6:	0021      	movs	r1, r4
 80089a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089aa:	f00c fd7b 	bl	80154a4 <memcpy>
 80089ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089b0:	f7fc fd08 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 80089b4:	9018      	str	r0, [sp, #96]	; 0x60
 80089b6:	902d      	str	r0, [sp, #180]	; 0xb4
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d100      	bne.n	80089be <calibrate.lto_priv.301+0x37e>
 80089bc:	e69b      	b.n	80086f6 <calibrate.lto_priv.301+0xb6>
 80089be:	4cbf      	ldr	r4, [pc, #764]	; (8008cbc <calibrate.lto_priv.301+0x67c>)
 80089c0:	48bf      	ldr	r0, [pc, #764]	; (8008cc0 <calibrate.lto_priv.301+0x680>)
 80089c2:	0021      	movs	r1, r4
 80089c4:	f003 fedc 	bl	800c780 <acc_diagnostic_log_array>
 80089c8:	2119      	movs	r1, #25
 80089ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089cc:	f003 fed6 	bl	800c77c <acc_diagnostic_log_data_u16>
 80089d0:	464b      	mov	r3, r9
 80089d2:	005e      	lsls	r6, r3, #1
 80089d4:	4bbb      	ldr	r3, [pc, #748]	; (8008cc4 <calibrate.lto_priv.301+0x684>)
 80089d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089d8:	3370      	adds	r3, #112	; 0x70
 80089da:	5ad0      	ldrh	r0, [r2, r3]
 80089dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089de:	ad53      	add	r5, sp, #332	; 0x14c
 80089e0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80089e2:	1ac0      	subs	r0, r0, r3
 80089e4:	b200      	sxth	r0, r0
 80089e6:	f006 fca7 	bl	800f338 <__aeabi_i2f>
 80089ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ec:	1c07      	adds	r7, r0, #0
 80089ee:	8818      	ldrh	r0, [r3, #0]
 80089f0:	f006 fcec 	bl	800f3cc <__aeabi_ui2f>
 80089f4:	21de      	movs	r1, #222	; 0xde
 80089f6:	0589      	lsls	r1, r1, #22
 80089f8:	f005 fd6a 	bl	800e4d0 <__aeabi_fmul>
 80089fc:	21fc      	movs	r1, #252	; 0xfc
 80089fe:	0589      	lsls	r1, r1, #22
 8008a00:	f005 fe98 	bl	800e734 <__aeabi_fsub>
 8008a04:	49b0      	ldr	r1, [pc, #704]	; (8008cc8 <calibrate.lto_priv.301+0x688>)
 8008a06:	f005 fd63 	bl	800e4d0 <__aeabi_fmul>
 8008a0a:	49b0      	ldr	r1, [pc, #704]	; (8008ccc <calibrate.lto_priv.301+0x68c>)
 8008a0c:	f005 fd60 	bl	800e4d0 <__aeabi_fmul>
 8008a10:	1c01      	adds	r1, r0, #0
 8008a12:	1c38      	adds	r0, r7, #0
 8008a14:	f005 fe8e 	bl	800e734 <__aeabi_fsub>
 8008a18:	f006 fc6e 	bl	800f2f8 <__aeabi_f2iz>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	469c      	mov	ip, r3
 8008a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a22:	44e1      	add	r9, ip
 8008a24:	3332      	adds	r3, #50	; 0x32
 8008a26:	930a      	str	r3, [sp, #40]	; 0x28
 8008a28:	464b      	mov	r3, r9
 8008a2a:	5370      	strh	r0, [r6, r5]
 8008a2c:	2b0c      	cmp	r3, #12
 8008a2e:	d000      	beq.n	8008a32 <calibrate.lto_priv.301+0x3f2>
 8008a30:	e6c7      	b.n	80087c2 <calibrate.lto_priv.301+0x182>
 8008a32:	0021      	movs	r1, r4
 8008a34:	48a6      	ldr	r0, [pc, #664]	; (8008cd0 <calibrate.lto_priv.301+0x690>)
 8008a36:	f003 fea3 	bl	800c780 <acc_diagnostic_log_array>
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	0028      	movs	r0, r5
 8008a3e:	f003 fe9d 	bl	800c77c <acc_diagnostic_log_data_u16>
 8008a42:	2214      	movs	r2, #20
 8008a44:	5eab      	ldrsh	r3, [r5, r2]
 8008a46:	2700      	movs	r7, #0
 8008a48:	930a      	str	r3, [sp, #40]	; 0x28
 8008a4a:	2216      	movs	r2, #22
 8008a4c:	5eab      	ldrsh	r3, [r5, r2]
 8008a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a50:	9311      	str	r3, [sp, #68]	; 0x44
 8008a52:	1a9b      	subs	r3, r3, r2
 8008a54:	9314      	str	r3, [sp, #80]	; 0x50
 8008a56:	2200      	movs	r2, #0
 8008a58:	5eab      	ldrsh	r3, [r5, r2]
 8008a5a:	2632      	movs	r6, #50	; 0x32
 8008a5c:	4699      	mov	r9, r3
 8008a5e:	2202      	movs	r2, #2
 8008a60:	5eab      	ldrsh	r3, [r5, r2]
 8008a62:	464a      	mov	r2, r9
 8008a64:	930d      	str	r3, [sp, #52]	; 0x34
 8008a66:	1a9b      	subs	r3, r3, r2
 8008a68:	9312      	str	r3, [sp, #72]	; 0x48
 8008a6a:	4b9a      	ldr	r3, [pc, #616]	; (8008cd4 <calibrate.lto_priv.301+0x694>)
 8008a6c:	469a      	mov	sl, r3
 8008a6e:	b2fb      	uxtb	r3, r7
 8008a70:	9315      	str	r3, [sp, #84]	; 0x54
 8008a72:	007b      	lsls	r3, r7, #1
 8008a74:	5f5a      	ldrsh	r2, [r3, r5]
 8008a76:	4690      	mov	r8, r2
 8008a78:	2f00      	cmp	r7, #0
 8008a7a:	d000      	beq.n	8008a7e <calibrate.lto_priv.301+0x43e>
 8008a7c:	e0d8      	b.n	8008c30 <calibrate.lto_priv.301+0x5f0>
 8008a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a80:	0034      	movs	r4, r6
 8008a82:	4599      	cmp	r9, r3
 8008a84:	dd0b      	ble.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008a86:	45d1      	cmp	r9, sl
 8008a88:	dc09      	bgt.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008a8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008a8c:	f006 fc54 	bl	800f338 <__aeabi_i2f>
 8008a90:	4991      	ldr	r1, [pc, #580]	; (8008cd8 <calibrate.lto_priv.301+0x698>)
 8008a92:	f006 fa15 	bl	800eec0 <__aeabi_fcmplt>
 8008a96:	2400      	movs	r4, #0
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d100      	bne.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008a9c:	0034      	movs	r4, r6
 8008a9e:	488f      	ldr	r0, [pc, #572]	; (8008cdc <calibrate.lto_priv.301+0x69c>)
 8008aa0:	4440      	add	r0, r8
 8008aa2:	17c3      	asrs	r3, r0, #31
 8008aa4:	18c0      	adds	r0, r0, r3
 8008aa6:	4058      	eors	r0, r3
 8008aa8:	f006 fc46 	bl	800f338 <__aeabi_i2f>
 8008aac:	4987      	ldr	r1, [pc, #540]	; (8008ccc <calibrate.lto_priv.301+0x68c>)
 8008aae:	f005 fbfd 	bl	800e2ac <__aeabi_fdiv>
 8008ab2:	498b      	ldr	r1, [pc, #556]	; (8008ce0 <calibrate.lto_priv.301+0x6a0>)
 8008ab4:	f005 fd0c 	bl	800e4d0 <__aeabi_fmul>
 8008ab8:	4680      	mov	r8, r0
 8008aba:	0020      	movs	r0, r4
 8008abc:	f006 fc3c 	bl	800f338 <__aeabi_i2f>
 8008ac0:	1c01      	adds	r1, r0, #0
 8008ac2:	4640      	mov	r0, r8
 8008ac4:	f005 fa58 	bl	800df78 <__aeabi_fadd>
 8008ac8:	f006 fa42 	bl	800ef50 <__aeabi_f2uiz>
 8008acc:	22a2      	movs	r2, #162	; 0xa2
 8008ace:	ab3c      	add	r3, sp, #240	; 0xf0
 8008ad0:	0052      	lsls	r2, r2, #1
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	55d8      	strb	r0, [r3, r7]
 8008ad6:	a94b      	add	r1, sp, #300	; 0x12c
 8008ad8:	b2fb      	uxtb	r3, r7
 8008ada:	547b      	strb	r3, [r7, r1]
 8008adc:	3701      	adds	r7, #1
 8008ade:	2f0c      	cmp	r7, #12
 8008ae0:	d1c5      	bne.n	8008a6e <calibrate.lto_priv.301+0x42e>
 8008ae2:	3a3a      	subs	r2, #58	; 0x3a
 8008ae4:	3aff      	subs	r2, #255	; 0xff
 8008ae6:	ac8d      	add	r4, sp, #564	; 0x234
 8008ae8:	2300      	movs	r3, #0
 8008aea:	0018      	movs	r0, r3
 8008aec:	5c5e      	ldrb	r6, [r3, r1]
 8008aee:	18cd      	adds	r5, r1, r3
 8008af0:	786f      	ldrb	r7, [r5, #1]
 8008af2:	46a9      	mov	r9, r5
 8008af4:	5da5      	ldrb	r5, [r4, r6]
 8008af6:	46a8      	mov	r8, r5
 8008af8:	5de5      	ldrb	r5, [r4, r7]
 8008afa:	45a8      	cmp	r8, r5
 8008afc:	d904      	bls.n	8008b08 <calibrate.lto_priv.301+0x4c8>
 8008afe:	464d      	mov	r5, r9
 8008b00:	3001      	adds	r0, #1
 8008b02:	545f      	strb	r7, [r3, r1]
 8008b04:	b2c0      	uxtb	r0, r0
 8008b06:	706e      	strb	r6, [r5, #1]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	b2dd      	uxtb	r5, r3
 8008b0c:	4295      	cmp	r5, r2
 8008b0e:	d3ed      	bcc.n	8008aec <calibrate.lto_priv.301+0x4ac>
 8008b10:	3a01      	subs	r2, #1
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	2a00      	cmp	r2, #0
 8008b16:	d001      	beq.n	8008b1c <calibrate.lto_priv.301+0x4dc>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d1e5      	bne.n	8008ae8 <calibrate.lto_priv.301+0x4a8>
 8008b1c:	4967      	ldr	r1, [pc, #412]	; (8008cbc <calibrate.lto_priv.301+0x67c>)
 8008b1e:	4871      	ldr	r0, [pc, #452]	; (8008ce4 <calibrate.lto_priv.301+0x6a4>)
 8008b20:	f003 fe2e 	bl	800c780 <acc_diagnostic_log_array>
 8008b24:	2300      	movs	r3, #0
 8008b26:	931a      	str	r3, [sp, #104]	; 0x68
 8008b28:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b2a:	ab4b      	add	r3, sp, #300	; 0x12c
 8008b2c:	5cd3      	ldrb	r3, [r2, r3]
 8008b2e:	2601      	movs	r6, #1
 8008b30:	9311      	str	r3, [sp, #68]	; 0x44
 8008b32:	932c      	str	r3, [sp, #176]	; 0xb0
 8008b34:	2332      	movs	r3, #50	; 0x32
 8008b36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b38:	2700      	movs	r7, #0
 8008b3a:	4353      	muls	r3, r2
 8008b3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008b3e:	4694      	mov	ip, r2
 8008b40:	4463      	add	r3, ip
 8008b42:	930a      	str	r3, [sp, #40]	; 0x28
 8008b44:	4698      	mov	r8, r3
 8008b46:	2300      	movs	r3, #0
 8008b48:	4699      	mov	r9, r3
 8008b4a:	001d      	movs	r5, r3
 8008b4c:	001c      	movs	r4, r3
 8008b4e:	b2b3      	uxth	r3, r6
 8008b50:	930d      	str	r3, [sp, #52]	; 0x34
 8008b52:	4643      	mov	r3, r8
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	3401      	adds	r4, #1
 8008b58:	0018      	movs	r0, r3
 8008b5a:	469a      	mov	sl, r3
 8008b5c:	f006 fbec 	bl	800f338 <__aeabi_i2f>
 8008b60:	1c01      	adds	r1, r0, #0
 8008b62:	1c38      	adds	r0, r7, #0
 8008b64:	f005 fa08 	bl	800df78 <__aeabi_fadd>
 8008b68:	b2b3      	uxth	r3, r6
 8008b6a:	469c      	mov	ip, r3
 8008b6c:	4643      	mov	r3, r8
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	4465      	add	r5, ip
 8008b72:	1c07      	adds	r7, r0, #0
 8008b74:	b2a4      	uxth	r4, r4
 8008b76:	b2ad      	uxth	r5, r5
 8008b78:	4652      	mov	r2, sl
 8008b7a:	459a      	cmp	sl, r3
 8008b7c:	d300      	bcc.n	8008b80 <calibrate.lto_priv.301+0x540>
 8008b7e:	e082      	b.n	8008c86 <calibrate.lto_priv.301+0x646>
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	22fa      	movs	r2, #250	; 0xfa
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d801      	bhi.n	8008b90 <calibrate.lto_priv.301+0x550>
 8008b8c:	2e18      	cmp	r6, #24
 8008b8e:	d136      	bne.n	8008bfe <calibrate.lto_priv.301+0x5be>
 8008b90:	2c02      	cmp	r4, #2
 8008b92:	d97b      	bls.n	8008c8c <calibrate.lto_priv.301+0x64c>
 8008b94:	0028      	movs	r0, r5
 8008b96:	f006 fc19 	bl	800f3cc <__aeabi_ui2f>
 8008b9a:	1c05      	adds	r5, r0, #0
 8008b9c:	0020      	movs	r0, r4
 8008b9e:	f006 fc15 	bl	800f3cc <__aeabi_ui2f>
 8008ba2:	1c01      	adds	r1, r0, #0
 8008ba4:	1c28      	adds	r0, r5, #0
 8008ba6:	f005 fb81 	bl	800e2ac <__aeabi_fdiv>
 8008baa:	21fe      	movs	r1, #254	; 0xfe
 8008bac:	0589      	lsls	r1, r1, #22
 8008bae:	f005 fdc1 	bl	800e734 <__aeabi_fsub>
 8008bb2:	f006 f9cd 	bl	800ef50 <__aeabi_f2uiz>
 8008bb6:	b283      	uxth	r3, r0
 8008bb8:	469a      	mov	sl, r3
 8008bba:	464b      	mov	r3, r9
 8008bbc:	b2b2      	uxth	r2, r6
 8008bbe:	005d      	lsls	r5, r3, #1
 8008bc0:	ab73      	add	r3, sp, #460	; 0x1cc
 8008bc2:	52ea      	strh	r2, [r5, r3]
 8008bc4:	ab8d      	add	r3, sp, #564	; 0x234
 8008bc6:	52ec      	strh	r4, [r5, r3]
 8008bc8:	0020      	movs	r0, r4
 8008bca:	f006 fbb5 	bl	800f338 <__aeabi_i2f>
 8008bce:	1c01      	adds	r1, r0, #0
 8008bd0:	1c38      	adds	r0, r7, #0
 8008bd2:	f005 fb6b 	bl	800e2ac <__aeabi_fdiv>
 8008bd6:	f006 f9bb 	bl	800ef50 <__aeabi_f2uiz>
 8008bda:	ab80      	add	r3, sp, #512	; 0x200
 8008bdc:	52e8      	strh	r0, [r5, r3]
 8008bde:	ab9a      	add	r3, sp, #616	; 0x268
 8008be0:	469c      	mov	ip, r3
 8008be2:	4650      	mov	r0, sl
 8008be4:	2305      	movs	r3, #5
 8008be6:	4358      	muls	r0, r3
 8008be8:	4465      	add	r5, ip
 8008bea:	464b      	mov	r3, r9
 8008bec:	3d05      	subs	r5, #5
 8008bee:	3dff      	subs	r5, #255	; 0xff
 8008bf0:	8028      	strh	r0, [r5, #0]
 8008bf2:	2500      	movs	r5, #0
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	4699      	mov	r9, r3
 8008bfa:	002c      	movs	r4, r5
 8008bfc:	2700      	movs	r7, #0
 8008bfe:	2302      	movs	r3, #2
 8008c00:	469c      	mov	ip, r3
 8008c02:	3601      	adds	r6, #1
 8008c04:	44e0      	add	r8, ip
 8008c06:	2e19      	cmp	r6, #25
 8008c08:	d1a1      	bne.n	8008b4e <calibrate.lto_priv.301+0x50e>
 8008c0a:	4b37      	ldr	r3, [pc, #220]	; (8008ce8 <calibrate.lto_priv.301+0x6a8>)
 8008c0c:	001a      	movs	r2, r3
 8008c0e:	3230      	adds	r2, #48	; 0x30
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	2a03      	cmp	r2, #3
 8008c14:	d905      	bls.n	8008c22 <calibrate.lto_priv.301+0x5e2>
 8008c16:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008c18:	4a34      	ldr	r2, [pc, #208]	; (8008cec <calibrate.lto_priv.301+0x6ac>)
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	4934      	ldr	r1, [pc, #208]	; (8008cf0 <calibrate.lto_priv.301+0x6b0>)
 8008c1e:	2004      	movs	r0, #4
 8008c20:	47a0      	blx	r4
 8008c22:	4d31      	ldr	r5, [pc, #196]	; (8008ce8 <calibrate.lto_priv.301+0x6a8>)
 8008c24:	4b33      	ldr	r3, [pc, #204]	; (8008cf4 <calibrate.lto_priv.301+0x6b4>)
 8008c26:	002e      	movs	r6, r5
 8008c28:	2400      	movs	r4, #0
 8008c2a:	3630      	adds	r6, #48	; 0x30
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	e07b      	b.n	8008d28 <calibrate.lto_priv.301+0x6e8>
 8008c30:	b2fa      	uxtb	r2, r7
 8008c32:	2a0b      	cmp	r2, #11
 8008c34:	d10c      	bne.n	8008c50 <calibrate.lto_priv.301+0x610>
 8008c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008c3a:	0034      	movs	r4, r6
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	dc00      	bgt.n	8008c42 <calibrate.lto_priv.301+0x602>
 8008c40:	e72d      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c42:	4553      	cmp	r3, sl
 8008c44:	dd00      	ble.n	8008c48 <calibrate.lto_priv.301+0x608>
 8008c46:	e72a      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c48:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008c4a:	f006 fb75 	bl	800f338 <__aeabi_i2f>
 8008c4e:	e71f      	b.n	8008a90 <calibrate.lto_priv.301+0x450>
 8008c50:	18eb      	adds	r3, r5, r3
 8008c52:	1e9a      	subs	r2, r3, #2
 8008c54:	2100      	movs	r1, #0
 8008c56:	5e52      	ldrsh	r2, [r2, r1]
 8008c58:	0034      	movs	r4, r6
 8008c5a:	4542      	cmp	r2, r8
 8008c5c:	dc00      	bgt.n	8008c60 <calibrate.lto_priv.301+0x620>
 8008c5e:	e71e      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c60:	2002      	movs	r0, #2
 8008c62:	5e18      	ldrsh	r0, [r3, r0]
 8008c64:	4540      	cmp	r0, r8
 8008c66:	db00      	blt.n	8008c6a <calibrate.lto_priv.301+0x62a>
 8008c68:	e719      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c6a:	4552      	cmp	r2, sl
 8008c6c:	dd00      	ble.n	8008c70 <calibrate.lto_priv.301+0x630>
 8008c6e:	e716      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c70:	45d0      	cmp	r8, sl
 8008c72:	dd00      	ble.n	8008c76 <calibrate.lto_priv.301+0x636>
 8008c74:	e713      	b.n	8008a9e <calibrate.lto_priv.301+0x45e>
 8008c76:	1a80      	subs	r0, r0, r2
 8008c78:	f006 fb5e 	bl	800f338 <__aeabi_i2f>
 8008c7c:	21fc      	movs	r1, #252	; 0xfc
 8008c7e:	0589      	lsls	r1, r1, #22
 8008c80:	f005 fc26 	bl	800e4d0 <__aeabi_fmul>
 8008c84:	e704      	b.n	8008a90 <calibrate.lto_priv.301+0x450>
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	e77b      	b.n	8008b84 <calibrate.lto_priv.301+0x544>
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <calibrate.lto_priv.301+0x6a8>)
 8008c8e:	001a      	movs	r2, r3
 8008c90:	3230      	adds	r2, #48	; 0x30
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	2a03      	cmp	r2, #3
 8008c96:	d90c      	bls.n	8008cb2 <calibrate.lto_priv.301+0x672>
 8008c98:	4652      	mov	r2, sl
 8008c9a:	9401      	str	r4, [sp, #4]
 8008c9c:	9200      	str	r2, [sp, #0]
 8008c9e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008ca0:	4a15      	ldr	r2, [pc, #84]	; (8008cf8 <calibrate.lto_priv.301+0x6b8>)
 8008ca2:	0033      	movs	r3, r6
 8008ca4:	4912      	ldr	r1, [pc, #72]	; (8008cf0 <calibrate.lto_priv.301+0x6b0>)
 8008ca6:	2004      	movs	r0, #4
 8008ca8:	47a0      	blx	r4
 8008caa:	2400      	movs	r4, #0
 8008cac:	2700      	movs	r7, #0
 8008cae:	0025      	movs	r5, r4
 8008cb0:	e7a5      	b.n	8008bfe <calibrate.lto_priv.301+0x5be>
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	2700      	movs	r7, #0
 8008cb6:	002c      	movs	r4, r5
 8008cb8:	e7a1      	b.n	8008bfe <calibrate.lto_priv.301+0x5be>
 8008cba:	46c0      	nop			; (mov r8, r8)
 8008cbc:	0801d088 	.word	0x0801d088
 8008cc0:	0801d09d 	.word	0x0801d09d
 8008cc4:	080155a0 	.word	0x080155a0
 8008cc8:	3f99999a 	.word	0x3f99999a
 8008ccc:	447a0000 	.word	0x447a0000
 8008cd0:	0801d0ad 	.word	0x0801d0ad
 8008cd4:	00000513 	.word	0x00000513
 8008cd8:	c2c80000 	.word	0xc2c80000
 8008cdc:	fffffc18 	.word	0xfffffc18
 8008ce0:	42c80000 	.word	0x42c80000
 8008ce4:	0801d0be 	.word	0x0801d0be
 8008ce8:	200002b8 	.word	0x200002b8
 8008cec:	0801d13d 	.word	0x0801d13d
 8008cf0:	0801d126 	.word	0x0801d126
 8008cf4:	0801d150 	.word	0x0801d150
 8008cf8:	0801d0d5 	.word	0x0801d0d5
 8008cfc:	2f03      	cmp	r7, #3
 8008cfe:	d912      	bls.n	8008d26 <calibrate.lto_priv.301+0x6e6>
 8008d00:	0063      	lsls	r3, r4, #1
 8008d02:	aa80      	add	r2, sp, #512	; 0x200
 8008d04:	5a9a      	ldrh	r2, [r3, r2]
 8008d06:	49c4      	ldr	r1, [pc, #784]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008d08:	9203      	str	r2, [sp, #12]
 8008d0a:	aa8d      	add	r2, sp, #564	; 0x234
 8008d0c:	5a9a      	ldrh	r2, [r3, r2]
 8008d0e:	2004      	movs	r0, #4
 8008d10:	9202      	str	r2, [sp, #8]
 8008d12:	aa59      	add	r2, sp, #356	; 0x164
 8008d14:	5a9a      	ldrh	r2, [r3, r2]
 8008d16:	9201      	str	r2, [sp, #4]
 8008d18:	aa73      	add	r2, sp, #460	; 0x1cc
 8008d1a:	5a9b      	ldrh	r3, [r3, r2]
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008d22:	0023      	movs	r3, r4
 8008d24:	47b8      	blx	r7
 8008d26:	3401      	adds	r4, #1
 8008d28:	b2a3      	uxth	r3, r4
 8008d2a:	7837      	ldrb	r7, [r6, #0]
 8008d2c:	4599      	cmp	r9, r3
 8008d2e:	d8e5      	bhi.n	8008cfc <calibrate.lto_priv.301+0x6bc>
 8008d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d32:	881e      	ldrh	r6, [r3, #0]
 8008d34:	4bb9      	ldr	r3, [pc, #740]	; (800901c <calibrate.lto_priv.301+0x9dc>)
 8008d36:	429e      	cmp	r6, r3
 8008d38:	d825      	bhi.n	8008d86 <calibrate.lto_priv.301+0x746>
 8008d3a:	2f03      	cmp	r7, #3
 8008d3c:	d905      	bls.n	8008d4a <calibrate.lto_priv.301+0x70a>
 8008d3e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8008d40:	0033      	movs	r3, r6
 8008d42:	4ab7      	ldr	r2, [pc, #732]	; (8009020 <calibrate.lto_priv.301+0x9e0>)
 8008d44:	49b4      	ldr	r1, [pc, #720]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008d46:	2004      	movs	r0, #4
 8008d48:	47a0      	blx	r4
 8008d4a:	4bb6      	ldr	r3, [pc, #728]	; (8009024 <calibrate.lto_priv.301+0x9e4>)
 8008d4c:	001a      	movs	r2, r3
 8008d4e:	3230      	adds	r2, #48	; 0x30
 8008d50:	7812      	ldrb	r2, [r2, #0]
 8008d52:	2a03      	cmp	r2, #3
 8008d54:	d907      	bls.n	8008d66 <calibrate.lto_priv.301+0x726>
 8008d56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d58:	49b3      	ldr	r1, [pc, #716]	; (8009028 <calibrate.lto_priv.301+0x9e8>)
 8008d5a:	9200      	str	r2, [sp, #0]
 8008d5c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8008d5e:	4ab3      	ldr	r2, [pc, #716]	; (800902c <calibrate.lto_priv.301+0x9ec>)
 8008d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d62:	2004      	movs	r0, #4
 8008d64:	47a0      	blx	r4
 8008d66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d68:	3301      	adds	r3, #1
 8008d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8008d6c:	2b0c      	cmp	r3, #12
 8008d6e:	d000      	beq.n	8008d72 <calibrate.lto_priv.301+0x732>
 8008d70:	e6da      	b.n	8008b28 <calibrate.lto_priv.301+0x4e8>
 8008d72:	3b0b      	subs	r3, #11
 8008d74:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d76:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d101      	bne.n	8008d80 <calibrate.lto_priv.301+0x740>
 8008d7c:	f000 fe3c 	bl	80099f8 <calibrate.lto_priv.301+0x13b8>
 8008d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d82:	9336      	str	r3, [sp, #216]	; 0xd8
 8008d84:	e50d      	b.n	80087a2 <calibrate.lto_priv.301+0x162>
 8008d86:	4baa      	ldr	r3, [pc, #680]	; (8009030 <calibrate.lto_priv.301+0x9f0>)
 8008d88:	18f0      	adds	r0, r6, r3
 8008d8a:	f006 fb1f 	bl	800f3cc <__aeabi_ui2f>
 8008d8e:	49a9      	ldr	r1, [pc, #676]	; (8009034 <calibrate.lto_priv.301+0x9f4>)
 8008d90:	f005 fb9e 	bl	800e4d0 <__aeabi_fmul>
 8008d94:	21de      	movs	r1, #222	; 0xde
 8008d96:	0589      	lsls	r1, r1, #22
 8008d98:	f005 fb9a 	bl	800e4d0 <__aeabi_fmul>
 8008d9c:	1c01      	adds	r1, r0, #0
 8008d9e:	48a5      	ldr	r0, [pc, #660]	; (8009034 <calibrate.lto_priv.301+0x9f4>)
 8008da0:	f005 fcc8 	bl	800e734 <__aeabi_fsub>
 8008da4:	1c01      	adds	r1, r0, #0
 8008da6:	48a4      	ldr	r0, [pc, #656]	; (8009038 <calibrate.lto_priv.301+0x9f8>)
 8008da8:	f005 fcc4 	bl	800e734 <__aeabi_fsub>
 8008dac:	49a1      	ldr	r1, [pc, #644]	; (8009034 <calibrate.lto_priv.301+0x9f4>)
 8008dae:	f005 fa7d 	bl	800e2ac <__aeabi_fdiv>
 8008db2:	218f      	movs	r1, #143	; 0x8f
 8008db4:	05c9      	lsls	r1, r1, #23
 8008db6:	f005 fb8b 	bl	800e4d0 <__aeabi_fmul>
 8008dba:	218e      	movs	r1, #142	; 0x8e
 8008dbc:	05c9      	lsls	r1, r1, #23
 8008dbe:	f005 f8db 	bl	800df78 <__aeabi_fadd>
 8008dc2:	f006 f8c5 	bl	800ef50 <__aeabi_f2uiz>
 8008dc6:	b284      	uxth	r4, r0
 8008dc8:	2f03      	cmp	r7, #3
 8008dca:	d905      	bls.n	8008dd8 <calibrate.lto_priv.301+0x798>
 8008dcc:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8008dce:	0023      	movs	r3, r4
 8008dd0:	4a9a      	ldr	r2, [pc, #616]	; (800903c <calibrate.lto_priv.301+0x9fc>)
 8008dd2:	4991      	ldr	r1, [pc, #580]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008dd4:	2004      	movs	r0, #4
 8008dd6:	47a8      	blx	r5
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9312      	str	r3, [sp, #72]	; 0x48
 8008ddc:	930d      	str	r3, [sp, #52]	; 0x34
 8008dde:	3330      	adds	r3, #48	; 0x30
 8008de0:	4698      	mov	r8, r3
 8008de2:	4f90      	ldr	r7, [pc, #576]	; (8009024 <calibrate.lto_priv.301+0x9e4>)
 8008de4:	ab80      	add	r3, sp, #512	; 0x200
 8008de6:	44b8      	add	r8, r7
 8008de8:	469a      	mov	sl, r3
 8008dea:	e010      	b.n	8008e0e <calibrate.lto_priv.301+0x7ce>
 8008dec:	4650      	mov	r0, sl
 8008dee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008df0:	005b      	lsls	r3, r3, #1
 8008df2:	5a1b      	ldrh	r3, [r3, r0]
 8008df4:	4892      	ldr	r0, [pc, #584]	; (8009040 <calibrate.lto_priv.301+0xa00>)
 8008df6:	4283      	cmp	r3, r0
 8008df8:	d84f      	bhi.n	8008e9a <calibrate.lto_priv.301+0x85a>
 8008dfa:	2903      	cmp	r1, #3
 8008dfc:	d904      	bls.n	8008e08 <calibrate.lto_priv.301+0x7c8>
 8008dfe:	4a91      	ldr	r2, [pc, #580]	; (8009044 <calibrate.lto_priv.301+0xa04>)
 8008e00:	4985      	ldr	r1, [pc, #532]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008e02:	2004      	movs	r0, #4
 8008e04:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008e06:	47a8      	blx	r5
 8008e08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	9312      	str	r3, [sp, #72]	; 0x48
 8008e0e:	2248      	movs	r2, #72	; 0x48
 8008e10:	466b      	mov	r3, sp
 8008e12:	189b      	adds	r3, r3, r2
 8008e14:	881a      	ldrh	r2, [r3, #0]
 8008e16:	4643      	mov	r3, r8
 8008e18:	7819      	ldrb	r1, [r3, #0]
 8008e1a:	454a      	cmp	r2, r9
 8008e1c:	d3e6      	bcc.n	8008dec <calibrate.lto_priv.301+0x7ac>
 8008e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d933      	bls.n	8008e8c <calibrate.lto_priv.301+0x84c>
 8008e24:	1e9f      	subs	r7, r3, #2
 8008e26:	b23f      	sxth	r7, r7
 8008e28:	007b      	lsls	r3, r7, #1
 8008e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008e2c:	ad66      	add	r5, sp, #408	; 0x198
 8008e2e:	ae80      	add	r6, sp, #512	; 0x200
 8008e30:	2300      	movs	r3, #0
 8008e32:	0039      	movs	r1, r7
 8008e34:	469c      	mov	ip, r3
 8008e36:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	da46      	bge.n	8008eca <calibrate.lto_priv.301+0x88a>
 8008e3c:	4663      	mov	r3, ip
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1f6      	bne.n	8008e30 <calibrate.lto_priv.301+0x7f0>
 8008e42:	2201      	movs	r2, #1
 8008e44:	0015      	movs	r5, r2
 8008e46:	a866      	add	r0, sp, #408	; 0x198
 8008e48:	8803      	ldrh	r3, [r0, #0]
 8008e4a:	a980      	add	r1, sp, #512	; 0x200
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	5a5c      	ldrh	r4, [r3, r1]
 8008e50:	4e7d      	ldr	r6, [pc, #500]	; (8009048 <calibrate.lto_priv.301+0xa08>)
 8008e52:	0053      	lsls	r3, r2, #1
 8008e54:	5a1b      	ldrh	r3, [r3, r0]
 8008e56:	005b      	lsls	r3, r3, #1
 8008e58:	5a5b      	ldrh	r3, [r3, r1]
 8008e5a:	429c      	cmp	r4, r3
 8008e5c:	d25c      	bcs.n	8008f18 <calibrate.lto_priv.301+0x8d8>
 8008e5e:	1b1b      	subs	r3, r3, r4
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	42b3      	cmp	r3, r6
 8008e64:	d801      	bhi.n	8008e6a <calibrate.lto_priv.301+0x82a>
 8008e66:	3501      	adds	r5, #1
 8008e68:	b2ad      	uxth	r5, r5
 8008e6a:	3201      	adds	r2, #1
 8008e6c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008e6e:	b293      	uxth	r3, r2
 8008e70:	429f      	cmp	r7, r3
 8008e72:	d8ee      	bhi.n	8008e52 <calibrate.lto_priv.301+0x812>
 8008e74:	4e6b      	ldr	r6, [pc, #428]	; (8009024 <calibrate.lto_priv.301+0x9e4>)
 8008e76:	0037      	movs	r7, r6
 8008e78:	3730      	adds	r7, #48	; 0x30
 8008e7a:	9714      	str	r7, [sp, #80]	; 0x50
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	1e6b      	subs	r3, r5, #1
 8008e80:	0014      	movs	r4, r2
 8008e82:	4698      	mov	r8, r3
 8008e84:	4544      	cmp	r4, r8
 8008e86:	d34a      	bcc.n	8008f1e <calibrate.lto_priv.301+0x8de>
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	d1f7      	bne.n	8008e7c <calibrate.lto_priv.301+0x83c>
 8008e8c:	4c65      	ldr	r4, [pc, #404]	; (8009024 <calibrate.lto_priv.301+0x9e4>)
 8008e8e:	ab66      	add	r3, sp, #408	; 0x198
 8008e90:	0027      	movs	r7, r4
 8008e92:	2500      	movs	r5, #0
 8008e94:	3730      	adds	r7, #48	; 0x30
 8008e96:	4698      	mov	r8, r3
 8008e98:	e07b      	b.n	8008f92 <calibrate.lto_priv.301+0x952>
 8008e9a:	486c      	ldr	r0, [pc, #432]	; (800904c <calibrate.lto_priv.301+0xa0c>)
 8008e9c:	1830      	adds	r0, r6, r0
 8008e9e:	4283      	cmp	r3, r0
 8008ea0:	d907      	bls.n	8008eb2 <calibrate.lto_priv.301+0x872>
 8008ea2:	2903      	cmp	r1, #3
 8008ea4:	d9b0      	bls.n	8008e08 <calibrate.lto_priv.301+0x7c8>
 8008ea6:	4a6a      	ldr	r2, [pc, #424]	; (8009050 <calibrate.lto_priv.301+0xa10>)
 8008ea8:	495b      	ldr	r1, [pc, #364]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008eaa:	2004      	movs	r0, #4
 8008eac:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8008eae:	47a8      	blx	r5
 8008eb0:	e7aa      	b.n	8008e08 <calibrate.lto_priv.301+0x7c8>
 8008eb2:	a99a      	add	r1, sp, #616	; 0x268
 8008eb4:	468c      	mov	ip, r1
 8008eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb8:	005b      	lsls	r3, r3, #1
 8008eba:	4463      	add	r3, ip
 8008ebc:	3bd0      	subs	r3, #208	; 0xd0
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ec8:	e79e      	b.n	8008e08 <calibrate.lto_priv.301+0x7c8>
 8008eca:	5b43      	ldrh	r3, [r0, r5]
 8008ecc:	4699      	mov	r9, r3
 8008ece:	182b      	adds	r3, r5, r0
 8008ed0:	4698      	mov	r8, r3
 8008ed2:	885b      	ldrh	r3, [r3, #2]
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	5b9a      	ldrh	r2, [r3, r6]
 8008edc:	4294      	cmp	r4, r2
 8008ede:	d215      	bcs.n	8008f0c <calibrate.lto_priv.301+0x8cc>
 8008ee0:	1b12      	subs	r2, r2, r4
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	4653      	mov	r3, sl
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	5af3      	ldrh	r3, [r6, r3]
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d211      	bcs.n	8008f12 <calibrate.lto_priv.301+0x8d2>
 8008eee:	1b1b      	subs	r3, r3, r4
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d906      	bls.n	8008f04 <calibrate.lto_priv.301+0x8c4>
 8008ef6:	4653      	mov	r3, sl
 8008ef8:	464a      	mov	r2, r9
 8008efa:	5343      	strh	r3, [r0, r5]
 8008efc:	4643      	mov	r3, r8
 8008efe:	805a      	strh	r2, [r3, #2]
 8008f00:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f02:	469c      	mov	ip, r3
 8008f04:	3901      	subs	r1, #1
 8008f06:	b209      	sxth	r1, r1
 8008f08:	3802      	subs	r0, #2
 8008f0a:	e795      	b.n	8008e38 <calibrate.lto_priv.301+0x7f8>
 8008f0c:	1aa2      	subs	r2, r4, r2
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	e7e8      	b.n	8008ee4 <calibrate.lto_priv.301+0x8a4>
 8008f12:	1ae3      	subs	r3, r4, r3
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	e7ec      	b.n	8008ef2 <calibrate.lto_priv.301+0x8b2>
 8008f18:	1ae3      	subs	r3, r4, r3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	e7a1      	b.n	8008e62 <calibrate.lto_priv.301+0x822>
 8008f1e:	a966      	add	r1, sp, #408	; 0x198
 8008f20:	468c      	mov	ip, r1
 8008f22:	a866      	add	r0, sp, #408	; 0x198
 8008f24:	4681      	mov	r9, r0
 8008f26:	0063      	lsls	r3, r4, #1
 8008f28:	449c      	add	ip, r3
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	444b      	add	r3, r9
 8008f2e:	4661      	mov	r1, ip
 8008f30:	8818      	ldrh	r0, [r3, #0]
 8008f32:	8809      	ldrh	r1, [r1, #0]
 8008f34:	4681      	mov	r9, r0
 8008f36:	004f      	lsls	r7, r1, #1
 8008f38:	46ba      	mov	sl, r7
 8008f3a:	464f      	mov	r7, r9
 8008f3c:	007f      	lsls	r7, r7, #1
 8008f3e:	9712      	str	r7, [sp, #72]	; 0x48
 8008f40:	4657      	mov	r7, sl
 8008f42:	a88d      	add	r0, sp, #564	; 0x234
 8008f44:	5a3f      	ldrh	r7, [r7, r0]
 8008f46:	46ba      	mov	sl, r7
 8008f48:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008f4a:	5a38      	ldrh	r0, [r7, r0]
 8008f4c:	4582      	cmp	sl, r0
 8008f4e:	d20e      	bcs.n	8008f6e <calibrate.lto_priv.301+0x92e>
 8008f50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f52:	464f      	mov	r7, r9
 8008f54:	7810      	ldrb	r0, [r2, #0]
 8008f56:	4662      	mov	r2, ip
 8008f58:	8017      	strh	r7, [r2, #0]
 8008f5a:	8019      	strh	r1, [r3, #0]
 8008f5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f5e:	2803      	cmp	r0, #3
 8008f60:	d905      	bls.n	8008f6e <calibrate.lto_priv.301+0x92e>
 8008f62:	4a3c      	ldr	r2, [pc, #240]	; (8009054 <calibrate.lto_priv.301+0xa14>)
 8008f64:	492c      	ldr	r1, [pc, #176]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008f66:	2004      	movs	r0, #4
 8008f68:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008f6a:	4798      	blx	r3
 8008f6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f6e:	3401      	adds	r4, #1
 8008f70:	b2a4      	uxth	r4, r4
 8008f72:	e787      	b.n	8008e84 <calibrate.lto_priv.301+0x844>
 8008f74:	2e03      	cmp	r6, #3
 8008f76:	d90b      	bls.n	8008f90 <calibrate.lto_priv.301+0x950>
 8008f78:	4642      	mov	r2, r8
 8008f7a:	006b      	lsls	r3, r5, #1
 8008f7c:	5a9b      	ldrh	r3, [r3, r2]
 8008f7e:	aa80      	add	r2, sp, #512	; 0x200
 8008f80:	0059      	lsls	r1, r3, #1
 8008f82:	5a8a      	ldrh	r2, [r1, r2]
 8008f84:	2004      	movs	r0, #4
 8008f86:	9200      	str	r2, [sp, #0]
 8008f88:	4923      	ldr	r1, [pc, #140]	; (8009018 <calibrate.lto_priv.301+0x9d8>)
 8008f8a:	4a33      	ldr	r2, [pc, #204]	; (8009058 <calibrate.lto_priv.301+0xa18>)
 8008f8c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8008f8e:	47b0      	blx	r6
 8008f90:	3501      	adds	r5, #1
 8008f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f94:	b2ab      	uxth	r3, r5
 8008f96:	783e      	ldrb	r6, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d8eb      	bhi.n	8008f74 <calibrate.lto_priv.301+0x934>
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d100      	bne.n	8008fa2 <calibrate.lto_priv.301+0x962>
 8008fa0:	e6d3      	b.n	8008d4a <calibrate.lto_priv.301+0x70a>
 8008fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fa4:	4a2d      	ldr	r2, [pc, #180]	; (800905c <calibrate.lto_priv.301+0xa1c>)
 8008fa6:	0059      	lsls	r1, r3, #1
 8008fa8:	4b2d      	ldr	r3, [pc, #180]	; (8009060 <calibrate.lto_priv.301+0xa20>)
 8008faa:	3270      	adds	r2, #112	; 0x70
 8008fac:	185b      	adds	r3, r3, r1
 8008fae:	5a88      	ldrh	r0, [r1, r2]
 8008fb0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008fb2:	1ac0      	subs	r0, r0, r3
 8008fb4:	b200      	sxth	r0, r0
 8008fb6:	f006 f9bf 	bl	800f338 <__aeabi_i2f>
 8008fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fbc:	1c05      	adds	r5, r0, #0
 8008fbe:	8818      	ldrh	r0, [r3, #0]
 8008fc0:	f006 fa04 	bl	800f3cc <__aeabi_ui2f>
 8008fc4:	21de      	movs	r1, #222	; 0xde
 8008fc6:	0589      	lsls	r1, r1, #22
 8008fc8:	f005 fa82 	bl	800e4d0 <__aeabi_fmul>
 8008fcc:	21fc      	movs	r1, #252	; 0xfc
 8008fce:	0589      	lsls	r1, r1, #22
 8008fd0:	f005 fbb0 	bl	800e734 <__aeabi_fsub>
 8008fd4:	4917      	ldr	r1, [pc, #92]	; (8009034 <calibrate.lto_priv.301+0x9f4>)
 8008fd6:	f005 fa7b 	bl	800e4d0 <__aeabi_fmul>
 8008fda:	4922      	ldr	r1, [pc, #136]	; (8009064 <calibrate.lto_priv.301+0xa24>)
 8008fdc:	f005 fa78 	bl	800e4d0 <__aeabi_fmul>
 8008fe0:	1c01      	adds	r1, r0, #0
 8008fe2:	1c28      	adds	r0, r5, #0
 8008fe4:	f005 fba6 	bl	800e734 <__aeabi_fsub>
 8008fe8:	f006 f986 	bl	800f2f8 <__aeabi_f2iz>
 8008fec:	aa3c      	add	r2, sp, #240	; 0xf0
 8008fee:	4694      	mov	ip, r2
 8008ff0:	2322      	movs	r3, #34	; 0x22
 8008ff2:	22e6      	movs	r2, #230	; 0xe6
 8008ff4:	b205      	sxth	r5, r0
 8008ff6:	4463      	add	r3, ip
 8008ff8:	801d      	strh	r5, [r3, #0]
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <calibrate.lto_priv.301+0xa28>)
 8008ffc:	0052      	lsls	r2, r2, #1
 8008ffe:	18eb      	adds	r3, r5, r3
 8009000:	b29b      	uxth	r3, r3
 8009002:	4293      	cmp	r3, r2
 8009004:	d934      	bls.n	8009070 <calibrate.lto_priv.301+0xa30>
 8009006:	2e03      	cmp	r6, #3
 8009008:	d800      	bhi.n	800900c <calibrate.lto_priv.301+0x9cc>
 800900a:	e69e      	b.n	8008d4a <calibrate.lto_priv.301+0x70a>
 800900c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800900e:	4a17      	ldr	r2, [pc, #92]	; (800906c <calibrate.lto_priv.301+0xa2c>)
 8009010:	4905      	ldr	r1, [pc, #20]	; (8009028 <calibrate.lto_priv.301+0x9e8>)
 8009012:	2004      	movs	r0, #4
 8009014:	4798      	blx	r3
 8009016:	e698      	b.n	8008d4a <calibrate.lto_priv.301+0x70a>
 8009018:	0801d126 	.word	0x0801d126
 800901c:	000087cf 	.word	0x000087cf
 8009020:	0801d192 	.word	0x0801d192
 8009024:	200002b8 	.word	0x200002b8
 8009028:	0801cfa4 	.word	0x0801cfa4
 800902c:	0801d66a 	.word	0x0801d66a
 8009030:	ffff8000 	.word	0xffff8000
 8009034:	3f99999a 	.word	0x3f99999a
 8009038:	3f866666 	.word	0x3f866666
 800903c:	0801d1b7 	.word	0x0801d1b7
 8009040:	00001387 	.word	0x00001387
 8009044:	0801d1c7 	.word	0x0801d1c7
 8009048:	000007cf 	.word	0x000007cf
 800904c:	fffff830 	.word	0xfffff830
 8009050:	0801d1f5 	.word	0x0801d1f5
 8009054:	0801d223 	.word	0x0801d223
 8009058:	0801d254 	.word	0x0801d254
 800905c:	080155a0 	.word	0x080155a0
 8009060:	08015620 	.word	0x08015620
 8009064:	447a0000 	.word	0x447a0000
 8009068:	fffffcf4 	.word	0xfffffcf4
 800906c:	0801d276 	.word	0x0801d276
 8009070:	ab66      	add	r3, sp, #408	; 0x198
 8009072:	881f      	ldrh	r7, [r3, #0]
 8009074:	ab59      	add	r3, sp, #356	; 0x164
 8009076:	007a      	lsls	r2, r7, #1
 8009078:	5ad3      	ldrh	r3, [r2, r3]
 800907a:	2105      	movs	r1, #5
 800907c:	0018      	movs	r0, r3
 800907e:	9312      	str	r3, [sp, #72]	; 0x48
 8009080:	f005 fd58 	bl	800eb34 <__udivsi3>
 8009084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009086:	b2c0      	uxtb	r0, r0
 8009088:	0040      	lsls	r0, r0, #1
 800908a:	5ac0      	ldrh	r0, [r0, r3]
 800908c:	f006 f99e 	bl	800f3cc <__aeabi_ui2f>
 8009090:	21de      	movs	r1, #222	; 0xde
 8009092:	0589      	lsls	r1, r1, #22
 8009094:	f005 fa1c 	bl	800e4d0 <__aeabi_fmul>
 8009098:	21fc      	movs	r1, #252	; 0xfc
 800909a:	0589      	lsls	r1, r1, #22
 800909c:	f005 fb4a 	bl	800e734 <__aeabi_fsub>
 80090a0:	49cd      	ldr	r1, [pc, #820]	; (80093d8 <calibrate.lto_priv.301+0xd98>)
 80090a2:	f005 fa15 	bl	800e4d0 <__aeabi_fmul>
 80090a6:	49cd      	ldr	r1, [pc, #820]	; (80093dc <calibrate.lto_priv.301+0xd9c>)
 80090a8:	f005 fa12 	bl	800e4d0 <__aeabi_fmul>
 80090ac:	4680      	mov	r8, r0
 80090ae:	0028      	movs	r0, r5
 80090b0:	f006 f942 	bl	800f338 <__aeabi_i2f>
 80090b4:	1c01      	adds	r1, r0, #0
 80090b6:	4640      	mov	r0, r8
 80090b8:	f004 ff5e 	bl	800df78 <__aeabi_fadd>
 80090bc:	f006 f91c 	bl	800f2f8 <__aeabi_f2iz>
 80090c0:	ab45      	add	r3, sp, #276	; 0x114
 80090c2:	8018      	strh	r0, [r3, #0]
 80090c4:	2e03      	cmp	r6, #3
 80090c6:	d907      	bls.n	80090d8 <calibrate.lto_priv.301+0xa98>
 80090c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80090ca:	4ac5      	ldr	r2, [pc, #788]	; (80093e0 <calibrate.lto_priv.301+0xda0>)
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80090d0:	003b      	movs	r3, r7
 80090d2:	49c4      	ldr	r1, [pc, #784]	; (80093e4 <calibrate.lto_priv.301+0xda4>)
 80090d4:	2004      	movs	r0, #4
 80090d6:	47a0      	blx	r4
 80090d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80090da:	48c3      	ldr	r0, [pc, #780]	; (80093e8 <calibrate.lto_priv.301+0xda8>)
 80090dc:	f003 fb51 	bl	800c782 <acc_diagnostic_log_set_parameter>
 80090e0:	4dc2      	ldr	r5, [pc, #776]	; (80093ec <calibrate.lto_priv.301+0xdac>)
 80090e2:	48c3      	ldr	r0, [pc, #780]	; (80093f0 <calibrate.lto_priv.301+0xdb0>)
 80090e4:	0029      	movs	r1, r5
 80090e6:	ac45      	add	r4, sp, #276	; 0x114
 80090e8:	f003 fb4a 	bl	800c780 <acc_diagnostic_log_array>
 80090ec:	0020      	movs	r0, r4
 80090ee:	f001 fdb0 	bl	800ac52 <acc_diagnostic_log_data_i16.constprop.20>
 80090f2:	0029      	movs	r1, r5
 80090f4:	48bf      	ldr	r0, [pc, #764]	; (80093f4 <calibrate.lto_priv.301+0xdb4>)
 80090f6:	f003 fb43 	bl	800c780 <acc_diagnostic_log_array>
 80090fa:	ab3c      	add	r3, sp, #240	; 0xf0
 80090fc:	469c      	mov	ip, r3
 80090fe:	2022      	movs	r0, #34	; 0x22
 8009100:	4460      	add	r0, ip
 8009102:	f001 fda6 	bl	800ac52 <acc_diagnostic_log_data_i16.constprop.20>
 8009106:	4abc      	ldr	r2, [pc, #752]	; (80093f8 <calibrate.lto_priv.301+0xdb8>)
 8009108:	8823      	ldrh	r3, [r4, #0]
 800910a:	4694      	mov	ip, r2
 800910c:	2200      	movs	r2, #0
 800910e:	4463      	add	r3, ip
 8009110:	9223      	str	r2, [sp, #140]	; 0x8c
 8009112:	2bc8      	cmp	r3, #200	; 0xc8
 8009114:	d900      	bls.n	8009118 <calibrate.lto_priv.301+0xad8>
 8009116:	e0a9      	b.n	800926c <calibrate.lto_priv.301+0xc2c>
 8009118:	2301      	movs	r3, #1
 800911a:	469a      	mov	sl, r3
 800911c:	4bb7      	ldr	r3, [pc, #732]	; (80093fc <calibrate.lto_priv.301+0xdbc>)
 800911e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009120:	3344      	adds	r3, #68	; 0x44
 8009122:	5cd3      	ldrb	r3, [r2, r3]
 8009124:	48b6      	ldr	r0, [pc, #728]	; (8009400 <calibrate.lto_priv.301+0xdc0>)
 8009126:	0019      	movs	r1, r3
 8009128:	9320      	str	r3, [sp, #128]	; 0x80
 800912a:	f003 fb2a 	bl	800c782 <acc_diagnostic_log_set_parameter>
 800912e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009130:	2280      	movs	r2, #128	; 0x80
 8009132:	932e      	str	r3, [sp, #184]	; 0xb8
 8009134:	466b      	mov	r3, sp
 8009136:	189b      	adds	r3, r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	009c      	lsls	r4, r3, #2
 800913c:	0020      	movs	r0, r4
 800913e:	303e      	adds	r0, #62	; 0x3e
 8009140:	9322      	str	r3, [sp, #136]	; 0x88
 8009142:	287b      	cmp	r0, #123	; 0x7b
 8009144:	d800      	bhi.n	8009148 <calibrate.lto_priv.301+0xb08>
 8009146:	e09e      	b.n	8009286 <calibrate.lto_priv.301+0xc46>
 8009148:	217c      	movs	r1, #124	; 0x7c
 800914a:	f005 fd79 	bl	800ec40 <__aeabi_uidivmod>
 800914e:	2200      	movs	r2, #0
 8009150:	4653      	mov	r3, sl
 8009152:	0015      	movs	r5, r2
 8009154:	0020      	movs	r0, r4
 8009156:	b28c      	uxth	r4, r1
 8009158:	2100      	movs	r1, #0
 800915a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800915c:	428e      	cmp	r6, r1
 800915e:	d000      	beq.n	8009162 <calibrate.lto_priv.301+0xb22>
 8009160:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8009162:	465e      	mov	r6, fp
 8009164:	62b4      	str	r4, [r6, #40]	; 0x28
 8009166:	4654      	mov	r4, sl
 8009168:	62f0      	str	r0, [r6, #44]	; 0x2c
 800916a:	6333      	str	r3, [r6, #48]	; 0x30
 800916c:	6433      	str	r3, [r6, #64]	; 0x40
 800916e:	64f4      	str	r4, [r6, #76]	; 0x4c
 8009170:	2300      	movs	r3, #0
 8009172:	65b4      	str	r4, [r6, #88]	; 0x58
 8009174:	2003      	movs	r0, #3
 8009176:	465c      	mov	r4, fp
 8009178:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800917a:	6370      	str	r0, [r6, #52]	; 0x34
 800917c:	6037      	str	r7, [r6, #0]
 800917e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009180:	63b5      	str	r5, [r6, #56]	; 0x38
 8009182:	6077      	str	r7, [r6, #4]
 8009184:	9f26      	ldr	r7, [sp, #152]	; 0x98
 8009186:	63f2      	str	r2, [r6, #60]	; 0x3c
 8009188:	60b7      	str	r7, [r6, #8]
 800918a:	9f27      	ldr	r7, [sp, #156]	; 0x9c
 800918c:	001a      	movs	r2, r3
 800918e:	81b7      	strh	r7, [r6, #12]
 8009190:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8009192:	6473      	str	r3, [r6, #68]	; 0x44
 8009194:	6137      	str	r7, [r6, #16]
 8009196:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8009198:	64b3      	str	r3, [r6, #72]	; 0x48
 800919a:	6177      	str	r7, [r6, #20]
 800919c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800919e:	6533      	str	r3, [r6, #80]	; 0x50
 80091a0:	61b7      	str	r7, [r6, #24]
 80091a2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80091a4:	6573      	str	r3, [r6, #84]	; 0x54
 80091a6:	61f7      	str	r7, [r6, #28]
 80091a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80091aa:	3604      	adds	r6, #4
 80091ac:	61f7      	str	r7, [r6, #28]
 80091ae:	65e3      	str	r3, [r4, #92]	; 0x5c
 80091b0:	4653      	mov	r3, sl
 80091b2:	438b      	bics	r3, r1
 80091b4:	65f2      	str	r2, [r6, #92]	; 0x5c
 80091b6:	4651      	mov	r1, sl
 80091b8:	66b3      	str	r3, [r6, #104]	; 0x68
 80091ba:	465b      	mov	r3, fp
 80091bc:	6632      	str	r2, [r6, #96]	; 0x60
 80091be:	6672      	str	r2, [r6, #100]	; 0x64
 80091c0:	66f1      	str	r1, [r6, #108]	; 0x6c
 80091c2:	6731      	str	r1, [r6, #112]	; 0x70
 80091c4:	679a      	str	r2, [r3, #120]	; 0x78
 80091c6:	2316      	movs	r3, #22
 80091c8:	67b3      	str	r3, [r6, #120]	; 0x78
 80091ca:	230f      	movs	r3, #15
 80091cc:	67f3      	str	r3, [r6, #124]	; 0x7c
 80091ce:	465b      	mov	r3, fp
 80091d0:	0011      	movs	r1, r2
 80091d2:	3308      	adds	r3, #8
 80091d4:	67d9      	str	r1, [r3, #124]	; 0x7c
 80091d6:	465d      	mov	r5, fp
 80091d8:	465b      	mov	r3, fp
 80091da:	2207      	movs	r2, #7
 80091dc:	3388      	adds	r3, #136	; 0x88
 80091de:	358c      	adds	r5, #140	; 0x8c
 80091e0:	7029      	strb	r1, [r5, #0]
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	3a01      	subs	r2, #1
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	3494      	adds	r4, #148	; 0x94
 80091ea:	3a08      	subs	r2, #8
 80091ec:	6020      	str	r0, [r4, #0]
 80091ee:	465f      	mov	r7, fp
 80091f0:	611a      	str	r2, [r3, #16]
 80091f2:	6159      	str	r1, [r3, #20]
 80091f4:	6199      	str	r1, [r3, #24]
 80091f6:	3305      	adds	r3, #5
 80091f8:	7019      	strb	r1, [r3, #0]
 80091fa:	4653      	mov	r3, sl
 80091fc:	37a4      	adds	r7, #164	; 0xa4
 80091fe:	603b      	str	r3, [r7, #0]
 8009200:	465b      	mov	r3, fp
 8009202:	4652      	mov	r2, sl
 8009204:	33a8      	adds	r3, #168	; 0xa8
 8009206:	6019      	str	r1, [r3, #0]
 8009208:	715a      	strb	r2, [r3, #5]
 800920a:	f7fc ff89 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 800920e:	465b      	mov	r3, fp
 8009210:	2100      	movs	r1, #0
 8009212:	33b0      	adds	r3, #176	; 0xb0
 8009214:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 8009216:	6018      	str	r0, [r3, #0]
 8009218:	3b04      	subs	r3, #4
 800921a:	609a      	str	r2, [r3, #8]
 800921c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800921e:	7019      	strb	r1, [r3, #0]
 8009220:	3a01      	subs	r2, #1
 8009222:	60da      	str	r2, [r3, #12]
 8009224:	aa3c      	add	r2, sp, #240	; 0xf0
 8009226:	4694      	mov	ip, r2
 8009228:	2322      	movs	r3, #34	; 0x22
 800922a:	4463      	add	r3, ip
 800922c:	2200      	movs	r2, #0
 800922e:	5e9b      	ldrsh	r3, [r3, r2]
 8009230:	a98d      	add	r1, sp, #564	; 0x234
 8009232:	933a      	str	r3, [sp, #232]	; 0xe8
 8009234:	ab45      	add	r3, sp, #276	; 0x114
 8009236:	2200      	movs	r2, #0
 8009238:	5e9b      	ldrsh	r3, [r3, r2]
 800923a:	4658      	mov	r0, fp
 800923c:	933b      	str	r3, [sp, #236]	; 0xec
 800923e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 8009240:	6824      	ldr	r4, [r4, #0]
 8009242:	4699      	mov	r9, r3
 8009244:	782b      	ldrb	r3, [r5, #0]
 8009246:	683f      	ldr	r7, [r7, #0]
 8009248:	930a      	str	r3, [sp, #40]	; 0x28
 800924a:	f003 ff2d 	bl	800d0a8 <acc_cpd_linear_sweep_get_info>
 800924e:	9a8e      	ldr	r2, [sp, #568]	; 0x238
 8009250:	9b92      	ldr	r3, [sp, #584]	; 0x248
 8009252:	429a      	cmp	r2, r3
 8009254:	d11b      	bne.n	800928e <calibrate.lto_priv.301+0xc4e>
 8009256:	4b6b      	ldr	r3, [pc, #428]	; (8009404 <calibrate.lto_priv.301+0xdc4>)
 8009258:	4a6b      	ldr	r2, [pc, #428]	; (8009408 <calibrate.lto_priv.301+0xdc8>)
 800925a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800925c:	4961      	ldr	r1, [pc, #388]	; (80093e4 <calibrate.lto_priv.301+0xda4>)
 800925e:	2000      	movs	r0, #0
 8009260:	4798      	blx	r3
 8009262:	2300      	movs	r3, #0
 8009264:	9322      	str	r3, [sp, #136]	; 0x88
 8009266:	932e      	str	r3, [sp, #184]	; 0xb8
 8009268:	931c      	str	r3, [sp, #112]	; 0x70
 800926a:	e085      	b.n	8009378 <calibrate.lto_priv.301+0xd38>
 800926c:	4b65      	ldr	r3, [pc, #404]	; (8009404 <calibrate.lto_priv.301+0xdc4>)
 800926e:	001a      	movs	r2, r3
 8009270:	3230      	adds	r2, #48	; 0x30
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	2a03      	cmp	r2, #3
 8009276:	d800      	bhi.n	800927a <calibrate.lto_priv.301+0xc3a>
 8009278:	e567      	b.n	8008d4a <calibrate.lto_priv.301+0x70a>
 800927a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927c:	4a63      	ldr	r2, [pc, #396]	; (800940c <calibrate.lto_priv.301+0xdcc>)
 800927e:	4959      	ldr	r1, [pc, #356]	; (80093e4 <calibrate.lto_priv.301+0xda4>)
 8009280:	2004      	movs	r0, #4
 8009282:	4798      	blx	r3
 8009284:	e561      	b.n	8008d4a <calibrate.lto_priv.301+0x70a>
 8009286:	2203      	movs	r2, #3
 8009288:	4655      	mov	r5, sl
 800928a:	2300      	movs	r3, #0
 800928c:	e764      	b.n	8009158 <calibrate.lto_priv.301+0xb18>
 800928e:	465b      	mov	r3, fp
 8009290:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009292:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009296:	9d8d      	ldr	r5, [sp, #564]	; 0x234
 8009298:	f003 ff54 	bl	800d144 <acc_cpd_linear_sweep_load_program>
 800929c:	901f      	str	r0, [sp, #124]	; 0x7c
 800929e:	901c      	str	r0, [sp, #112]	; 0x70
 80092a0:	2800      	cmp	r0, #0
 80092a2:	d0de      	beq.n	8009262 <calibrate.lto_priv.301+0xc22>
 80092a4:	2600      	movs	r6, #0
 80092a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092a8:	42b3      	cmp	r3, r6
 80092aa:	d000      	beq.n	80092ae <calibrate.lto_priv.301+0xc6e>
 80092ac:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80092ae:	0038      	movs	r0, r7
 80092b0:	f006 f88c 	bl	800f3cc <__aeabi_ui2f>
 80092b4:	1c01      	adds	r1, r0, #0
 80092b6:	4856      	ldr	r0, [pc, #344]	; (8009410 <calibrate.lto_priv.301+0xdd0>)
 80092b8:	f004 fff8 	bl	800e2ac <__aeabi_fdiv>
 80092bc:	f005 fe48 	bl	800ef50 <__aeabi_f2uiz>
 80092c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092c2:	3401      	adds	r4, #1
 80092c4:	469c      	mov	ip, r3
 80092c6:	b280      	uxth	r0, r0
 80092c8:	b2a4      	uxth	r4, r4
 80092ca:	4344      	muls	r4, r0
 80092cc:	4465      	add	r5, ip
 80092ce:	002b      	movs	r3, r5
 80092d0:	46a4      	mov	ip, r4
 80092d2:	4463      	add	r3, ip
 80092d4:	9331      	str	r3, [sp, #196]	; 0xc4
 80092d6:	4653      	mov	r3, sl
 80092d8:	4033      	ands	r3, r6
 80092da:	22c4      	movs	r2, #196	; 0xc4
 80092dc:	9314      	str	r3, [sp, #80]	; 0x50
 80092de:	466b      	mov	r3, sp
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	2105      	movs	r1, #5
 80092e6:	3303      	adds	r3, #3
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	9340      	str	r3, [sp, #256]	; 0x100
 80092ec:	0020      	movs	r0, r4
 80092ee:	0063      	lsls	r3, r4, #1
 80092f0:	9321      	str	r3, [sp, #132]	; 0x84
 80092f2:	941b      	str	r4, [sp, #108]	; 0x6c
 80092f4:	f005 fc1e 	bl	800eb34 <__udivsi3>
 80092f8:	2700      	movs	r7, #0
 80092fa:	2305      	movs	r3, #5
 80092fc:	0002      	movs	r2, r0
 80092fe:	003e      	movs	r6, r7
 8009300:	003d      	movs	r5, r7
 8009302:	435a      	muls	r2, r3
 8009304:	0843      	lsrs	r3, r0, #1
 8009306:	9333      	str	r3, [sp, #204]	; 0xcc
 8009308:	3308      	adds	r3, #8
 800930a:	9334      	str	r3, [sp, #208]	; 0xd0
 800930c:	0053      	lsls	r3, r2, #1
 800930e:	9342      	str	r3, [sp, #264]	; 0x108
 8009310:	0043      	lsls	r3, r0, #1
 8009312:	9343      	str	r3, [sp, #268]	; 0x10c
 8009314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009316:	9015      	str	r0, [sp, #84]	; 0x54
 8009318:	921d      	str	r2, [sp, #116]	; 0x74
 800931a:	9332      	str	r3, [sp, #200]	; 0xc8
 800931c:	2e00      	cmp	r6, #0
 800931e:	d03c      	beq.n	800939a <calibrate.lto_priv.301+0xd5a>
 8009320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009322:	f7fc fc93 	bl	8005c4c <acc_sensor_protocol_r2_is_sensor_running>
 8009326:	2800      	cmp	r0, #0
 8009328:	d02d      	beq.n	8009386 <calibrate.lto_priv.301+0xd46>
 800932a:	4b36      	ldr	r3, [pc, #216]	; (8009404 <calibrate.lto_priv.301+0xdc4>)
 800932c:	4a39      	ldr	r2, [pc, #228]	; (8009414 <calibrate.lto_priv.301+0xdd4>)
 800932e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009330:	492c      	ldr	r1, [pc, #176]	; (80093e4 <calibrate.lto_priv.301+0xda4>)
 8009332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009334:	2000      	movs	r0, #0
 8009336:	47a0      	blx	r4
 8009338:	2f00      	cmp	r7, #0
 800933a:	d092      	beq.n	8009262 <calibrate.lto_priv.301+0xc22>
 800933c:	2700      	movs	r7, #0
 800933e:	aa3c      	add	r2, sp, #240	; 0xf0
 8009340:	4694      	mov	ip, r2
 8009342:	2322      	movs	r3, #34	; 0x22
 8009344:	4463      	add	r3, ip
 8009346:	2200      	movs	r2, #0
 8009348:	5e9b      	ldrsh	r3, [r3, r2]
 800934a:	9330      	str	r3, [sp, #192]	; 0xc0
 800934c:	ab45      	add	r3, sp, #276	; 0x114
 800934e:	2200      	movs	r2, #0
 8009350:	5e9b      	ldrsh	r3, [r3, r2]
 8009352:	932f      	str	r3, [sp, #188]	; 0xbc
 8009354:	4b2b      	ldr	r3, [pc, #172]	; (8009404 <calibrate.lto_priv.301+0xdc4>)
 8009356:	001a      	movs	r2, r3
 8009358:	3230      	adds	r2, #48	; 0x30
 800935a:	7812      	ldrb	r2, [r2, #0]
 800935c:	2a03      	cmp	r2, #3
 800935e:	d800      	bhi.n	8009362 <calibrate.lto_priv.301+0xd22>
 8009360:	e30b      	b.n	800997a <calibrate.lto_priv.301+0x133a>
 8009362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009364:	491f      	ldr	r1, [pc, #124]	; (80093e4 <calibrate.lto_priv.301+0xda4>)
 8009366:	9200      	str	r2, [sp, #0]
 8009368:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800936a:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <calibrate.lto_priv.301+0xdd8>)
 800936c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800936e:	2004      	movs	r0, #4
 8009370:	47a0      	blx	r4
 8009372:	2f00      	cmp	r7, #0
 8009374:	d000      	beq.n	8009378 <calibrate.lto_priv.301+0xd38>
 8009376:	e303      	b.n	8009980 <calibrate.lto_priv.301+0x1340>
 8009378:	2300      	movs	r3, #0
 800937a:	2200      	movs	r2, #0
 800937c:	930b      	str	r3, [sp, #44]	; 0x2c
 800937e:	932c      	str	r3, [sp, #176]	; 0xb0
 8009380:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009382:	921c      	str	r2, [sp, #112]	; 0x70
 8009384:	e31b      	b.n	80099be <calibrate.lto_priv.301+0x137e>
 8009386:	2d00      	cmp	r5, #0
 8009388:	d110      	bne.n	80093ac <calibrate.lto_priv.301+0xd6c>
 800938a:	4653      	mov	r3, sl
 800938c:	4a23      	ldr	r2, [pc, #140]	; (800941c <calibrate.lto_priv.301+0xddc>)
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	4923      	ldr	r1, [pc, #140]	; (8009420 <calibrate.lto_priv.301+0xde0>)
 8009392:	2372      	movs	r3, #114	; 0x72
 8009394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009396:	f001 fc5d 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800939a:	4922      	ldr	r1, [pc, #136]	; (8009424 <calibrate.lto_priv.301+0xde4>)
 800939c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800939e:	f7fc fc62 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0c8      	beq.n	8009338 <calibrate.lto_priv.301+0xcf8>
 80093a6:	2300      	movs	r3, #0
 80093a8:	931e      	str	r3, [sp, #120]	; 0x78
 80093aa:	e176      	b.n	800969a <calibrate.lto_priv.301+0x105a>
 80093ac:	464b      	mov	r3, r9
 80093ae:	4d1b      	ldr	r5, [pc, #108]	; (800941c <calibrate.lto_priv.301+0xddc>)
 80093b0:	4c1b      	ldr	r4, [pc, #108]	; (8009420 <calibrate.lto_priv.301+0xde0>)
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	002a      	movs	r2, r5
 80093b6:	2344      	movs	r3, #68	; 0x44
 80093b8:	0021      	movs	r1, r4
 80093ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093bc:	f001 fc4a 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	002a      	movs	r2, r5
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	0021      	movs	r1, r4
 80093c8:	2342      	movs	r3, #66	; 0x42
 80093ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093cc:	f001 fc42 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	d0e2      	beq.n	800939a <calibrate.lto_priv.301+0xd5a>
 80093d4:	e7d9      	b.n	800938a <calibrate.lto_priv.301+0xd4a>
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	3f99999a 	.word	0x3f99999a
 80093dc:	447a0000 	.word	0x447a0000
 80093e0:	0801d29c 	.word	0x0801d29c
 80093e4:	0801cfa4 	.word	0x0801cfa4
 80093e8:	0801d2ca 	.word	0x0801d2ca
 80093ec:	0801d2b4 	.word	0x0801d2b4
 80093f0:	0801d2d6 	.word	0x0801d2d6
 80093f4:	0801d2dd 	.word	0x0801d2dd
 80093f8:	fffffbe6 	.word	0xfffffbe6
 80093fc:	08015620 	.word	0x08015620
 8009400:	0801d48b 	.word	0x0801d48b
 8009404:	200002b8 	.word	0x200002b8
 8009408:	0801d30a 	.word	0x0801d30a
 800940c:	0801d2e5 	.word	0x0801d2e5
 8009410:	42f80000 	.word	0x42f80000
 8009414:	0801d328 	.word	0x0801d328
 8009418:	0801d5dc 	.word	0x0801d5dc
 800941c:	0801979c 	.word	0x0801979c
 8009420:	0801a948 	.word	0x0801a948
 8009424:	0000023a 	.word	0x0000023a
 8009428:	2b03      	cmp	r3, #3
 800942a:	d904      	bls.n	8009436 <calibrate.lto_priv.301+0xdf6>
 800942c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800942e:	49d1      	ldr	r1, [pc, #836]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 8009430:	4ad1      	ldr	r2, [pc, #836]	; (8009778 <calibrate.lto_priv.301+0x1138>)
 8009432:	2004      	movs	r0, #4
 8009434:	4798      	blx	r3
 8009436:	4ad1      	ldr	r2, [pc, #836]	; (800977c <calibrate.lto_priv.301+0x113c>)
 8009438:	9921      	ldr	r1, [sp, #132]	; 0x84
 800943a:	0020      	movs	r0, r4
 800943c:	f003 f9c2 	bl	800c7c4 <acc_alg_basic_saturation_check_u16>
 8009440:	2800      	cmp	r0, #0
 8009442:	d012      	beq.n	800946a <calibrate.lto_priv.301+0xe2a>
 8009444:	4ace      	ldr	r2, [pc, #824]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 8009446:	4649      	mov	r1, r9
 8009448:	0013      	movs	r3, r2
 800944a:	3330      	adds	r3, #48	; 0x30
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	290f      	cmp	r1, #15
 8009450:	d000      	beq.n	8009454 <calibrate.lto_priv.301+0xe14>
 8009452:	e0f8      	b.n	8009646 <calibrate.lto_priv.301+0x1006>
 8009454:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009456:	2900      	cmp	r1, #0
 8009458:	d100      	bne.n	800945c <calibrate.lto_priv.301+0xe1c>
 800945a:	e0e7      	b.n	800962c <calibrate.lto_priv.301+0xfec>
 800945c:	2b03      	cmp	r3, #3
 800945e:	d904      	bls.n	800946a <calibrate.lto_priv.301+0xe2a>
 8009460:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009462:	49c4      	ldr	r1, [pc, #784]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 8009464:	4ac7      	ldr	r2, [pc, #796]	; (8009784 <calibrate.lto_priv.301+0x1144>)
 8009466:	2004      	movs	r0, #4
 8009468:	4798      	blx	r3
 800946a:	4642      	mov	r2, r8
 800946c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946e:	49c6      	ldr	r1, [pc, #792]	; (8009788 <calibrate.lto_priv.301+0x1148>)
 8009470:	9341      	str	r3, [sp, #260]	; 0x104
 8009472:	9b90      	ldr	r3, [sp, #576]	; 0x240
 8009474:	3170      	adds	r1, #112	; 0x70
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	5a9b      	ldrh	r3, [r3, r2]
 800947a:	ad73      	add	r5, sp, #460	; 0x1cc
 800947c:	9335      	str	r3, [sp, #212]	; 0xd4
 800947e:	9b91      	ldr	r3, [sp, #580]	; 0x244
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	5a9b      	ldrh	r3, [r3, r2]
 8009484:	4ac1      	ldr	r2, [pc, #772]	; (800978c <calibrate.lto_priv.301+0x114c>)
 8009486:	933f      	str	r3, [sp, #252]	; 0xfc
 8009488:	465b      	mov	r3, fp
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	005b      	lsls	r3, r3, #1
 800948e:	18d2      	adds	r2, r2, r3
 8009490:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 8009492:	5a5b      	ldrh	r3, [r3, r1]
 8009494:	1a9b      	subs	r3, r3, r2
 8009496:	b21b      	sxth	r3, r3
 8009498:	0018      	movs	r0, r3
 800949a:	930e      	str	r3, [sp, #56]	; 0x38
 800949c:	f005 ff4c 	bl	800f338 <__aeabi_i2f>
 80094a0:	4642      	mov	r2, r8
 80094a2:	9b8f      	ldr	r3, [sp, #572]	; 0x23c
 80094a4:	1c06      	adds	r6, r0, #0
 80094a6:	005b      	lsls	r3, r3, #1
 80094a8:	5a98      	ldrh	r0, [r3, r2]
 80094aa:	f005 ff8f 	bl	800f3cc <__aeabi_ui2f>
 80094ae:	21de      	movs	r1, #222	; 0xde
 80094b0:	0589      	lsls	r1, r1, #22
 80094b2:	f005 f80d 	bl	800e4d0 <__aeabi_fmul>
 80094b6:	21fc      	movs	r1, #252	; 0xfc
 80094b8:	0589      	lsls	r1, r1, #22
 80094ba:	f005 f93b 	bl	800e734 <__aeabi_fsub>
 80094be:	49b4      	ldr	r1, [pc, #720]	; (8009790 <calibrate.lto_priv.301+0x1150>)
 80094c0:	f005 f806 	bl	800e4d0 <__aeabi_fmul>
 80094c4:	49b3      	ldr	r1, [pc, #716]	; (8009794 <calibrate.lto_priv.301+0x1154>)
 80094c6:	f005 f803 	bl	800e4d0 <__aeabi_fmul>
 80094ca:	1c01      	adds	r1, r0, #0
 80094cc:	1c30      	adds	r0, r6, #0
 80094ce:	f005 f931 	bl	800e734 <__aeabi_fsub>
 80094d2:	f005 ff11 	bl	800f2f8 <__aeabi_f2iz>
 80094d6:	b203      	sxth	r3, r0
 80094d8:	4698      	mov	r8, r3
 80094da:	ab3c      	add	r3, sp, #240	; 0xf0
 80094dc:	469c      	mov	ip, r3
 80094de:	2626      	movs	r6, #38	; 0x26
 80094e0:	4643      	mov	r3, r8
 80094e2:	4466      	add	r6, ip
 80094e4:	8033      	strh	r3, [r6, #0]
 80094e6:	9835      	ldr	r0, [sp, #212]	; 0xd4
 80094e8:	f005 ff70 	bl	800f3cc <__aeabi_ui2f>
 80094ec:	21de      	movs	r1, #222	; 0xde
 80094ee:	0589      	lsls	r1, r1, #22
 80094f0:	f004 ffee 	bl	800e4d0 <__aeabi_fmul>
 80094f4:	21fc      	movs	r1, #252	; 0xfc
 80094f6:	0589      	lsls	r1, r1, #22
 80094f8:	f005 f91c 	bl	800e734 <__aeabi_fsub>
 80094fc:	49a4      	ldr	r1, [pc, #656]	; (8009790 <calibrate.lto_priv.301+0x1150>)
 80094fe:	f004 ffe7 	bl	800e4d0 <__aeabi_fmul>
 8009502:	49a4      	ldr	r1, [pc, #656]	; (8009794 <calibrate.lto_priv.301+0x1154>)
 8009504:	f004 ffe4 	bl	800e4d0 <__aeabi_fmul>
 8009508:	9035      	str	r0, [sp, #212]	; 0xd4
 800950a:	4640      	mov	r0, r8
 800950c:	f005 ff14 	bl	800f338 <__aeabi_i2f>
 8009510:	1c01      	adds	r1, r0, #0
 8009512:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8009514:	f004 fd30 	bl	800df78 <__aeabi_fadd>
 8009518:	f005 feee 	bl	800f2f8 <__aeabi_f2iz>
 800951c:	8028      	strh	r0, [r5, #0]
 800951e:	983f      	ldr	r0, [sp, #252]	; 0xfc
 8009520:	f005 ff54 	bl	800f3cc <__aeabi_ui2f>
 8009524:	21de      	movs	r1, #222	; 0xde
 8009526:	0589      	lsls	r1, r1, #22
 8009528:	f004 ffd2 	bl	800e4d0 <__aeabi_fmul>
 800952c:	21fc      	movs	r1, #252	; 0xfc
 800952e:	0589      	lsls	r1, r1, #22
 8009530:	f005 f900 	bl	800e734 <__aeabi_fsub>
 8009534:	4996      	ldr	r1, [pc, #600]	; (8009790 <calibrate.lto_priv.301+0x1150>)
 8009536:	f004 ffcb 	bl	800e4d0 <__aeabi_fmul>
 800953a:	4996      	ldr	r1, [pc, #600]	; (8009794 <calibrate.lto_priv.301+0x1154>)
 800953c:	f004 ffc8 	bl	800e4d0 <__aeabi_fmul>
 8009540:	f005 feda 	bl	800f2f8 <__aeabi_f2iz>
 8009544:	2288      	movs	r2, #136	; 0x88
 8009546:	ab3c      	add	r3, sp, #240	; 0xf0
 8009548:	0052      	lsls	r2, r2, #1
 800954a:	189b      	adds	r3, r3, r2
 800954c:	8018      	strh	r0, [r3, #0]
 800954e:	4b92      	ldr	r3, [pc, #584]	; (8009798 <calibrate.lto_priv.301+0x1158>)
 8009550:	4892      	ldr	r0, [pc, #584]	; (800979c <calibrate.lto_priv.301+0x115c>)
 8009552:	4698      	mov	r8, r3
 8009554:	0019      	movs	r1, r3
 8009556:	f003 f913 	bl	800c780 <acc_diagnostic_log_array>
 800955a:	0030      	movs	r0, r6
 800955c:	f001 fb79 	bl	800ac52 <acc_diagnostic_log_data_i16.constprop.20>
 8009560:	4641      	mov	r1, r8
 8009562:	488e      	ldr	r0, [pc, #568]	; (800979c <calibrate.lto_priv.301+0x115c>)
 8009564:	f003 f90c 	bl	800c780 <acc_diagnostic_log_array>
 8009568:	0028      	movs	r0, r5
 800956a:	f001 fb72 	bl	800ac52 <acc_diagnostic_log_data_i16.constprop.20>
 800956e:	4641      	mov	r1, r8
 8009570:	488b      	ldr	r0, [pc, #556]	; (80097a0 <calibrate.lto_priv.301+0x1160>)
 8009572:	f003 f905 	bl	800c780 <acc_diagnostic_log_array>
 8009576:	a880      	add	r0, sp, #512	; 0x200
 8009578:	f001 fb6b 	bl	800ac52 <acc_diagnostic_log_data_i16.constprop.20>
 800957c:	8832      	ldrh	r2, [r6, #0]
 800957e:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	b21b      	sxth	r3, r3
 8009584:	17d9      	asrs	r1, r3, #31
 8009586:	185b      	adds	r3, r3, r1
 8009588:	404b      	eors	r3, r1
 800958a:	b21b      	sxth	r3, r3
 800958c:	2b64      	cmp	r3, #100	; 0x64
 800958e:	dc6d      	bgt.n	800966c <calibrate.lto_priv.301+0x102c>
 8009590:	4b84      	ldr	r3, [pc, #528]	; (80097a4 <calibrate.lto_priv.301+0x1164>)
 8009592:	469c      	mov	ip, r3
 8009594:	23e6      	movs	r3, #230	; 0xe6
 8009596:	4462      	add	r2, ip
 8009598:	b292      	uxth	r2, r2
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	429a      	cmp	r2, r3
 800959e:	d865      	bhi.n	800966c <calibrate.lto_priv.301+0x102c>
 80095a0:	2300      	movs	r3, #0
 80095a2:	5eea      	ldrsh	r2, [r5, r3]
 80095a4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	b21b      	sxth	r3, r3
 80095aa:	17d9      	asrs	r1, r3, #31
 80095ac:	185b      	adds	r3, r3, r1
 80095ae:	404b      	eors	r3, r1
 80095b0:	b21b      	sxth	r3, r3
 80095b2:	2b64      	cmp	r3, #100	; 0x64
 80095b4:	dc5a      	bgt.n	800966c <calibrate.lto_priv.301+0x102c>
 80095b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b8:	4293      	cmp	r3, r2
 80095ba:	db57      	blt.n	800966c <calibrate.lto_priv.301+0x102c>
 80095bc:	497a      	ldr	r1, [pc, #488]	; (80097a8 <calibrate.lto_priv.301+0x1168>)
 80095be:	487b      	ldr	r0, [pc, #492]	; (80097ac <calibrate.lto_priv.301+0x116c>)
 80095c0:	f003 f8de 	bl	800c780 <acc_diagnostic_log_array>
 80095c4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80095c6:	0020      	movs	r0, r4
 80095c8:	f003 f8d8 	bl	800c77c <acc_diagnostic_log_data_u16>
 80095cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d000      	beq.n	80095d4 <calibrate.lto_priv.301+0xf94>
 80095d2:	e08d      	b.n	80096f0 <calibrate.lto_priv.301+0x10b0>
 80095d4:	2124      	movs	r1, #36	; 0x24
 80095d6:	4876      	ldr	r0, [pc, #472]	; (80097b0 <calibrate.lto_priv.301+0x1170>)
 80095d8:	f7fc f97d 	bl	80058d6 <acc_assert_fail>
 80095dc:	464a      	mov	r2, r9
 80095de:	2908      	cmp	r1, #8
 80095e0:	d200      	bcs.n	80095e4 <calibrate.lto_priv.301+0xfa4>
 80095e2:	2208      	movs	r2, #8
 80095e4:	2108      	movs	r1, #8
 80095e6:	4249      	negs	r1, r1
 80095e8:	4689      	mov	r9, r1
 80095ea:	4491      	add	r9, r2
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d906      	bls.n	80095fe <calibrate.lto_priv.301+0xfbe>
 80095f0:	4b63      	ldr	r3, [pc, #396]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 80095f2:	4a70      	ldr	r2, [pc, #448]	; (80097b4 <calibrate.lto_priv.301+0x1174>)
 80095f4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80095f6:	495f      	ldr	r1, [pc, #380]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 80095f8:	464b      	mov	r3, r9
 80095fa:	2004      	movs	r0, #4
 80095fc:	47a0      	blx	r4
 80095fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009600:	f003 fc8e 	bl	800cf20 <acc_sensor_protocol_r2_stop.constprop.25>
 8009604:	2d00      	cmp	r5, #0
 8009606:	d000      	beq.n	800960a <calibrate.lto_priv.301+0xfca>
 8009608:	e68a      	b.n	8009320 <calibrate.lto_priv.301+0xce0>
 800960a:	2e00      	cmp	r6, #0
 800960c:	d000      	beq.n	8009610 <calibrate.lto_priv.301+0xfd0>
 800960e:	e685      	b.n	800931c <calibrate.lto_priv.301+0xcdc>
 8009610:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d100      	bne.n	8009618 <calibrate.lto_priv.301+0xfd8>
 8009616:	e68f      	b.n	8009338 <calibrate.lto_priv.301+0xcf8>
 8009618:	2f00      	cmp	r7, #0
 800961a:	d000      	beq.n	800961e <calibrate.lto_priv.301+0xfde>
 800961c:	e68f      	b.n	800933e <calibrate.lto_priv.301+0xcfe>
 800961e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d100      	bne.n	8009626 <calibrate.lto_priv.301+0xfe6>
 8009624:	e1d6      	b.n	80099d4 <calibrate.lto_priv.301+0x1394>
 8009626:	4653      	mov	r3, sl
 8009628:	9323      	str	r3, [sp, #140]	; 0x8c
 800962a:	e577      	b.n	800911c <calibrate.lto_priv.301+0xadc>
 800962c:	2b03      	cmp	r3, #3
 800962e:	d800      	bhi.n	8009632 <calibrate.lto_priv.301+0xff2>
 8009630:	e198      	b.n	8009964 <calibrate.lto_priv.301+0x1324>
 8009632:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009634:	494f      	ldr	r1, [pc, #316]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 8009636:	4a60      	ldr	r2, [pc, #384]	; (80097b8 <calibrate.lto_priv.301+0x1178>)
 8009638:	2004      	movs	r0, #4
 800963a:	4798      	blx	r3
 800963c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800963e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009640:	46b1      	mov	r9, r6
 8009642:	930a      	str	r3, [sp, #40]	; 0x28
 8009644:	e7db      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 8009646:	2208      	movs	r2, #8
 8009648:	4694      	mov	ip, r2
 800964a:	44e1      	add	r9, ip
 800964c:	464a      	mov	r2, r9
 800964e:	2a0f      	cmp	r2, #15
 8009650:	d901      	bls.n	8009656 <calibrate.lto_priv.301+0x1016>
 8009652:	220f      	movs	r2, #15
 8009654:	4691      	mov	r9, r2
 8009656:	2600      	movs	r6, #0
 8009658:	2b03      	cmp	r3, #3
 800965a:	d9d0      	bls.n	80095fe <calibrate.lto_priv.301+0xfbe>
 800965c:	4b48      	ldr	r3, [pc, #288]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 800965e:	4a57      	ldr	r2, [pc, #348]	; (80097bc <calibrate.lto_priv.301+0x117c>)
 8009660:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009662:	4944      	ldr	r1, [pc, #272]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 8009664:	464b      	mov	r3, r9
 8009666:	2004      	movs	r0, #4
 8009668:	47a0      	blx	r4
 800966a:	e7c8      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 800966c:	4b44      	ldr	r3, [pc, #272]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 800966e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009670:	001a      	movs	r2, r3
 8009672:	3230      	adds	r2, #48	; 0x30
 8009674:	7812      	ldrb	r2, [r2, #0]
 8009676:	2902      	cmp	r1, #2
 8009678:	d02d      	beq.n	80096d6 <calibrate.lto_priv.301+0x1096>
 800967a:	2a03      	cmp	r2, #3
 800967c:	d905      	bls.n	800968a <calibrate.lto_priv.301+0x104a>
 800967e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009680:	4a4f      	ldr	r2, [pc, #316]	; (80097c0 <calibrate.lto_priv.301+0x1180>)
 8009682:	000b      	movs	r3, r1
 8009684:	2004      	movs	r0, #4
 8009686:	493b      	ldr	r1, [pc, #236]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 8009688:	47a0      	blx	r4
 800968a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800968c:	f7fb fe9a 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 8009690:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009692:	3301      	adds	r3, #1
 8009694:	931e      	str	r3, [sp, #120]	; 0x78
 8009696:	464b      	mov	r3, r9
 8009698:	930e      	str	r3, [sp, #56]	; 0x38
 800969a:	21fa      	movs	r1, #250	; 0xfa
 800969c:	ac80      	add	r4, sp, #512	; 0x200
 800969e:	0022      	movs	r2, r4
 80096a0:	00c9      	lsls	r1, r1, #3
 80096a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a4:	f003 fb8a 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 80096a8:	9019      	str	r0, [sp, #100]	; 0x64
 80096aa:	1e05      	subs	r5, r0, #0
 80096ac:	d100      	bne.n	80096b0 <calibrate.lto_priv.301+0x1070>
 80096ae:	e643      	b.n	8009338 <calibrate.lto_priv.301+0xcf8>
 80096b0:	7823      	ldrb	r3, [r4, #0]
 80096b2:	2b06      	cmp	r3, #6
 80096b4:	d000      	beq.n	80096b8 <calibrate.lto_priv.301+0x1078>
 80096b6:	e63f      	b.n	8009338 <calibrate.lto_priv.301+0xcf8>
 80096b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80096ba:	9a40      	ldr	r2, [sp, #256]	; 0x100
 80096bc:	4293      	cmp	r3, r2
 80096be:	d300      	bcc.n	80096c2 <calibrate.lto_priv.301+0x1082>
 80096c0:	e0f6      	b.n	80098b0 <calibrate.lto_priv.301+0x1270>
 80096c2:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 80096c4:	4a3f      	ldr	r2, [pc, #252]	; (80097c4 <calibrate.lto_priv.301+0x1184>)
 80096c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c8:	492a      	ldr	r1, [pc, #168]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 80096ca:	2000      	movs	r0, #0
 80096cc:	4798      	blx	r3
 80096ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096d0:	f003 fc26 	bl	800cf20 <acc_sensor_protocol_r2_stop.constprop.25>
 80096d4:	e630      	b.n	8009338 <calibrate.lto_priv.301+0xcf8>
 80096d6:	2a03      	cmp	r2, #3
 80096d8:	d904      	bls.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 80096da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096dc:	4a3a      	ldr	r2, [pc, #232]	; (80097c8 <calibrate.lto_priv.301+0x1188>)
 80096de:	4925      	ldr	r1, [pc, #148]	; (8009774 <calibrate.lto_priv.301+0x1134>)
 80096e0:	2004      	movs	r0, #4
 80096e2:	4798      	blx	r3
 80096e4:	2700      	movs	r7, #0
 80096e6:	464b      	mov	r3, r9
 80096e8:	003e      	movs	r6, r7
 80096ea:	930e      	str	r3, [sp, #56]	; 0x38
 80096ec:	003d      	movs	r5, r7
 80096ee:	e786      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 80096f0:	0025      	movs	r5, r4
 80096f2:	2000      	movs	r0, #0
 80096f4:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80096f6:	940e      	str	r4, [sp, #56]	; 0x38
 80096f8:	191b      	adds	r3, r3, r4
 80096fa:	882a      	ldrh	r2, [r5, #0]
 80096fc:	3502      	adds	r5, #2
 80096fe:	1880      	adds	r0, r0, r2
 8009700:	42ab      	cmp	r3, r5
 8009702:	d1fa      	bne.n	80096fa <calibrate.lto_priv.301+0x10ba>
 8009704:	991d      	ldr	r1, [sp, #116]	; 0x74
 8009706:	f005 fa15 	bl	800eb34 <__udivsi3>
 800970a:	0022      	movs	r2, r4
 800970c:	b280      	uxth	r0, r0
 800970e:	8813      	ldrh	r3, [r2, #0]
 8009710:	4283      	cmp	r3, r0
 8009712:	d92b      	bls.n	800976c <calibrate.lto_priv.301+0x112c>
 8009714:	1a1b      	subs	r3, r3, r0
 8009716:	b29b      	uxth	r3, r3
 8009718:	8013      	strh	r3, [r2, #0]
 800971a:	3202      	adds	r2, #2
 800971c:	4295      	cmp	r5, r2
 800971e:	d1f6      	bne.n	800970e <calibrate.lto_priv.301+0x10ce>
 8009720:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009722:	0027      	movs	r7, r4
 8009724:	469c      	mov	ip, r3
 8009726:	44a4      	add	ip, r4
 8009728:	4663      	mov	r3, ip
 800972a:	46a0      	mov	r8, r4
 800972c:	9335      	str	r3, [sp, #212]	; 0xd4
 800972e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009730:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009732:	931e      	str	r3, [sp, #120]	; 0x78
 8009734:	2d00      	cmp	r5, #0
 8009736:	d14d      	bne.n	80097d4 <calibrate.lto_priv.301+0x1194>
 8009738:	0023      	movs	r3, r4
 800973a:	0028      	movs	r0, r5
 800973c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800973e:	429a      	cmp	r2, r3
 8009740:	d168      	bne.n	8009814 <calibrate.lto_priv.301+0x11d4>
 8009742:	2103      	movs	r1, #3
 8009744:	f005 f9f6 	bl	800eb34 <__udivsi3>
 8009748:	0025      	movs	r5, r4
 800974a:	2302      	movs	r3, #2
 800974c:	b280      	uxth	r0, r0
 800974e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009750:	429a      	cmp	r2, r3
 8009752:	d867      	bhi.n	8009824 <calibrate.lto_priv.301+0x11e4>
 8009754:	0013      	movs	r3, r2
 8009756:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8009758:	4293      	cmp	r3, r2
 800975a:	d300      	bcc.n	800975e <calibrate.lto_priv.301+0x111e>
 800975c:	e081      	b.n	8009862 <calibrate.lto_priv.301+0x1222>
 800975e:	4b08      	ldr	r3, [pc, #32]	; (8009780 <calibrate.lto_priv.301+0x1140>)
 8009760:	4a1a      	ldr	r2, [pc, #104]	; (80097cc <calibrate.lto_priv.301+0x118c>)
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	491a      	ldr	r1, [pc, #104]	; (80097d0 <calibrate.lto_priv.301+0x1190>)
 8009766:	2000      	movs	r0, #0
 8009768:	4798      	blx	r3
 800976a:	e7bb      	b.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 800976c:	1ac3      	subs	r3, r0, r3
 800976e:	b29b      	uxth	r3, r3
 8009770:	e7d2      	b.n	8009718 <calibrate.lto_priv.301+0x10d8>
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	0801cfa4 	.word	0x0801cfa4
 8009778:	0801d380 	.word	0x0801d380
 800977c:	402ca8ad 	.word	0x402ca8ad
 8009780:	200002b8 	.word	0x200002b8
 8009784:	0801d3d0 	.word	0x0801d3d0
 8009788:	080155a0 	.word	0x080155a0
 800978c:	08015620 	.word	0x08015620
 8009790:	3f99999a 	.word	0x3f99999a
 8009794:	447a0000 	.word	0x447a0000
 8009798:	0801d2b4 	.word	0x0801d2b4
 800979c:	0801d44c 	.word	0x0801d44c
 80097a0:	0801d45a 	.word	0x0801d45a
 80097a4:	fffffcf4 	.word	0xfffffcf4
 80097a8:	0801d468 	.word	0x0801d468
 80097ac:	0801d496 	.word	0x0801d496
 80097b0:	0801d4e8 	.word	0x0801d4e8
 80097b4:	0801d39e 	.word	0x0801d39e
 80097b8:	0801d3f0 	.word	0x0801d3f0
 80097bc:	0801d418 	.word	0x0801d418
 80097c0:	0801d4aa 	.word	0x0801d4aa
 80097c4:	0801d070 	.word	0x0801d070
 80097c8:	0801d4d1 	.word	0x0801d4d1
 80097cc:	0801d58f 	.word	0x0801d58f
 80097d0:	0801d572 	.word	0x0801d572
 80097d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097d6:	0058      	lsls	r0, r3, #1
 80097d8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80097da:	1940      	adds	r0, r0, r5
 80097dc:	1bd9      	subs	r1, r3, r7
 80097de:	f005 f9a9 	bl	800eb34 <__udivsi3>
 80097e2:	1e06      	subs	r6, r0, #0
 80097e4:	d014      	beq.n	8009810 <calibrate.lto_priv.301+0x11d0>
 80097e6:	0042      	lsls	r2, r0, #1
 80097e8:	4643      	mov	r3, r8
 80097ea:	2000      	movs	r0, #0
 80097ec:	4442      	add	r2, r8
 80097ee:	8819      	ldrh	r1, [r3, #0]
 80097f0:	3302      	adds	r3, #2
 80097f2:	1840      	adds	r0, r0, r1
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d1fa      	bne.n	80097ee <calibrate.lto_priv.301+0x11ae>
 80097f8:	0031      	movs	r1, r6
 80097fa:	f005 f99b 	bl	800eb34 <__udivsi3>
 80097fe:	8038      	strh	r0, [r7, #0]
 8009800:	0073      	lsls	r3, r6, #1
 8009802:	4498      	add	r8, r3
 8009804:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009806:	3d01      	subs	r5, #1
 8009808:	1b9b      	subs	r3, r3, r6
 800980a:	931e      	str	r3, [sp, #120]	; 0x78
 800980c:	3702      	adds	r7, #2
 800980e:	e791      	b.n	8009734 <calibrate.lto_priv.301+0x10f4>
 8009810:	8038      	strh	r0, [r7, #0]
 8009812:	e7f5      	b.n	8009800 <calibrate.lto_priv.301+0x11c0>
 8009814:	8819      	ldrh	r1, [r3, #0]
 8009816:	1c0a      	adds	r2, r1, #0
 8009818:	4281      	cmp	r1, r0
 800981a:	d200      	bcs.n	800981e <calibrate.lto_priv.301+0x11de>
 800981c:	1c02      	adds	r2, r0, #0
 800981e:	b290      	uxth	r0, r2
 8009820:	3302      	adds	r3, #2
 8009822:	e78b      	b.n	800973c <calibrate.lto_priv.301+0x10fc>
 8009824:	882a      	ldrh	r2, [r5, #0]
 8009826:	88a9      	ldrh	r1, [r5, #4]
 8009828:	428a      	cmp	r2, r1
 800982a:	d802      	bhi.n	8009832 <calibrate.lto_priv.301+0x11f2>
 800982c:	0016      	movs	r6, r2
 800982e:	000a      	movs	r2, r1
 8009830:	0031      	movs	r1, r6
 8009832:	4290      	cmp	r0, r2
 8009834:	d212      	bcs.n	800985c <calibrate.lto_priv.301+0x121c>
 8009836:	00ce      	lsls	r6, r1, #3
 8009838:	42b2      	cmp	r2, r6
 800983a:	d90f      	bls.n	800985c <calibrate.lto_priv.301+0x121c>
 800983c:	4c90      	ldr	r4, [pc, #576]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 800983e:	0025      	movs	r5, r4
 8009840:	3530      	adds	r5, #48	; 0x30
 8009842:	782d      	ldrb	r5, [r5, #0]
 8009844:	2d03      	cmp	r5, #3
 8009846:	d800      	bhi.n	800984a <calibrate.lto_priv.301+0x120a>
 8009848:	e74c      	b.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 800984a:	9002      	str	r0, [sp, #8]
 800984c:	9101      	str	r1, [sp, #4]
 800984e:	9200      	str	r2, [sp, #0]
 8009850:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8009852:	4a8c      	ldr	r2, [pc, #560]	; (8009a84 <calibrate.lto_priv.301+0x1444>)
 8009854:	498c      	ldr	r1, [pc, #560]	; (8009a88 <calibrate.lto_priv.301+0x1448>)
 8009856:	2004      	movs	r0, #4
 8009858:	47a0      	blx	r4
 800985a:	e743      	b.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 800985c:	3301      	adds	r3, #1
 800985e:	3502      	adds	r5, #2
 8009860:	e775      	b.n	800974e <calibrate.lto_priv.301+0x110e>
 8009862:	0022      	movs	r2, r4
 8009864:	2300      	movs	r3, #0
 8009866:	3210      	adds	r2, #16
 8009868:	990e      	ldr	r1, [sp, #56]	; 0x38
 800986a:	8809      	ldrh	r1, [r1, #0]
 800986c:	185b      	adds	r3, r3, r1
 800986e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009870:	3102      	adds	r1, #2
 8009872:	910e      	str	r1, [sp, #56]	; 0x38
 8009874:	428a      	cmp	r2, r1
 8009876:	d1f7      	bne.n	8009868 <calibrate.lto_priv.301+0x1228>
 8009878:	2200      	movs	r2, #0
 800987a:	9933      	ldr	r1, [sp, #204]	; 0xcc
 800987c:	9834      	ldr	r0, [sp, #208]	; 0xd0
 800987e:	4288      	cmp	r0, r1
 8009880:	d811      	bhi.n	80098a6 <calibrate.lto_priv.301+0x1266>
 8009882:	2105      	movs	r1, #5
 8009884:	4359      	muls	r1, r3
 8009886:	428a      	cmp	r2, r1
 8009888:	d271      	bcs.n	800996e <calibrate.lto_priv.301+0x132e>
 800988a:	497d      	ldr	r1, [pc, #500]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 800988c:	0008      	movs	r0, r1
 800988e:	3030      	adds	r0, #48	; 0x30
 8009890:	7800      	ldrb	r0, [r0, #0]
 8009892:	2803      	cmp	r0, #3
 8009894:	d800      	bhi.n	8009898 <calibrate.lto_priv.301+0x1258>
 8009896:	e725      	b.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 8009898:	9200      	str	r2, [sp, #0]
 800989a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800989c:	4a7b      	ldr	r2, [pc, #492]	; (8009a8c <calibrate.lto_priv.301+0x144c>)
 800989e:	497a      	ldr	r1, [pc, #488]	; (8009a88 <calibrate.lto_priv.301+0x1448>)
 80098a0:	2004      	movs	r0, #4
 80098a2:	47a0      	blx	r4
 80098a4:	e71e      	b.n	80096e4 <calibrate.lto_priv.301+0x10a4>
 80098a6:	0048      	lsls	r0, r1, #1
 80098a8:	5a20      	ldrh	r0, [r4, r0]
 80098aa:	3101      	adds	r1, #1
 80098ac:	1812      	adds	r2, r2, r0
 80098ae:	e7e5      	b.n	800987c <calibrate.lto_priv.301+0x123c>
 80098b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80098b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80098b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098b6:	f7fb fd01 	bl	80052bc <acc_sensor_protocol_r2_transfer_data>
 80098ba:	4680      	mov	r8, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d100      	bne.n	80098c2 <calibrate.lto_priv.301+0x1282>
 80098c0:	e53a      	b.n	8009338 <calibrate.lto_priv.301+0xcf8>
 80098c2:	9b8d      	ldr	r3, [sp, #564]	; 0x234
 80098c4:	005c      	lsls	r4, r3, #1
 80098c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098c8:	4444      	add	r4, r8
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d01f      	beq.n	800990e <calibrate.lto_priv.301+0x12ce>
 80098ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098d2:	18e6      	adds	r6, r4, r3
 80098d4:	0032      	movs	r2, r6
 80098d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d8:	4650      	mov	r0, sl
 80098da:	f004 f8c7 	bl	800da6c <acc_probes_execute_uint16>
 80098de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80098e0:	0030      	movs	r0, r6
 80098e2:	f7fb fc11 	bl	8005108 <acc_alg_cca_calculate>
 80098e6:	496a      	ldr	r1, [pc, #424]	; (8009a90 <calibrate.lto_priv.301+0x1450>)
 80098e8:	9016      	str	r0, [sp, #88]	; 0x58
 80098ea:	2601      	movs	r6, #1
 80098ec:	f005 fafc 	bl	800eee8 <__aeabi_fcmpgt>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d100      	bne.n	80098f6 <calibrate.lto_priv.301+0x12b6>
 80098f4:	1c06      	adds	r6, r0, #0
 80098f6:	b2f3      	uxtb	r3, r6
 80098f8:	4965      	ldr	r1, [pc, #404]	; (8009a90 <calibrate.lto_priv.301+0x1450>)
 80098fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80098fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80098fe:	f005 faf3 	bl	800eee8 <__aeabi_fcmpgt>
 8009902:	2800      	cmp	r0, #0
 8009904:	d124      	bne.n	8009950 <calibrate.lto_priv.301+0x1310>
 8009906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009908:	2b00      	cmp	r3, #0
 800990a:	d126      	bne.n	800995a <calibrate.lto_priv.301+0x131a>
 800990c:	9317      	str	r3, [sp, #92]	; 0x5c
 800990e:	4a61      	ldr	r2, [pc, #388]	; (8009a94 <calibrate.lto_priv.301+0x1454>)
 8009910:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009912:	0020      	movs	r0, r4
 8009914:	f002 ff56 	bl	800c7c4 <acc_alg_basic_saturation_check_u16>
 8009918:	1e06      	subs	r6, r0, #0
 800991a:	d000      	beq.n	800991e <calibrate.lto_priv.301+0x12de>
 800991c:	e58b      	b.n	8009436 <calibrate.lto_priv.301+0xdf6>
 800991e:	4a58      	ldr	r2, [pc, #352]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 8009920:	4649      	mov	r1, r9
 8009922:	0013      	movs	r3, r2
 8009924:	3330      	adds	r3, #48	; 0x30
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	2900      	cmp	r1, #0
 800992a:	d000      	beq.n	800992e <calibrate.lto_priv.301+0x12ee>
 800992c:	e656      	b.n	80095dc <calibrate.lto_priv.301+0xf9c>
 800992e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009930:	2900      	cmp	r1, #0
 8009932:	d100      	bne.n	8009936 <calibrate.lto_priv.301+0x12f6>
 8009934:	e578      	b.n	8009428 <calibrate.lto_priv.301+0xde8>
 8009936:	2b03      	cmp	r3, #3
 8009938:	d904      	bls.n	8009944 <calibrate.lto_priv.301+0x1304>
 800993a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800993c:	4956      	ldr	r1, [pc, #344]	; (8009a98 <calibrate.lto_priv.301+0x1458>)
 800993e:	4a57      	ldr	r2, [pc, #348]	; (8009a9c <calibrate.lto_priv.301+0x145c>)
 8009940:	2004      	movs	r0, #4
 8009942:	4798      	blx	r3
 8009944:	464b      	mov	r3, r9
 8009946:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009948:	930a      	str	r3, [sp, #40]	; 0x28
 800994a:	230f      	movs	r3, #15
 800994c:	4699      	mov	r9, r3
 800994e:	e656      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 8009950:	2300      	movs	r3, #0
 8009952:	9332      	str	r3, [sp, #200]	; 0xc8
 8009954:	001e      	movs	r6, r3
 8009956:	001d      	movs	r5, r3
 8009958:	e651      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 800995a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800995c:	9017      	str	r0, [sp, #92]	; 0x5c
 800995e:	9014      	str	r0, [sp, #80]	; 0x50
 8009960:	0005      	movs	r5, r0
 8009962:	e64c      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 8009964:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009966:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009968:	46b1      	mov	r9, r6
 800996a:	930a      	str	r3, [sp, #40]	; 0x28
 800996c:	e647      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 800996e:	464b      	mov	r3, r9
 8009970:	2500      	movs	r5, #0
 8009972:	930e      	str	r3, [sp, #56]	; 0x38
 8009974:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009976:	002e      	movs	r6, r5
 8009978:	e641      	b.n	80095fe <calibrate.lto_priv.301+0xfbe>
 800997a:	2f00      	cmp	r7, #0
 800997c:	d100      	bne.n	8009980 <calibrate.lto_priv.301+0x1340>
 800997e:	e4fb      	b.n	8009378 <calibrate.lto_priv.301+0xd38>
 8009980:	4b3f      	ldr	r3, [pc, #252]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 8009982:	001a      	movs	r2, r3
 8009984:	3230      	adds	r2, #48	; 0x30
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	2a01      	cmp	r2, #1
 800998a:	d917      	bls.n	80099bc <calibrate.lto_priv.301+0x137c>
 800998c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800998e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009990:	4b43      	ldr	r3, [pc, #268]	; (8009aa0 <calibrate.lto_priv.301+0x1460>)
 8009992:	2a00      	cmp	r2, #0
 8009994:	d000      	beq.n	8009998 <calibrate.lto_priv.301+0x1358>
 8009996:	4b43      	ldr	r3, [pc, #268]	; (8009aa4 <calibrate.lto_priv.301+0x1464>)
 8009998:	9306      	str	r3, [sp, #24]
 800999a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800999c:	4a42      	ldr	r2, [pc, #264]	; (8009aa8 <calibrate.lto_priv.301+0x1468>)
 800999e:	9305      	str	r3, [sp, #20]
 80099a0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80099a2:	493d      	ldr	r1, [pc, #244]	; (8009a98 <calibrate.lto_priv.301+0x1458>)
 80099a4:	9304      	str	r3, [sp, #16]
 80099a6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80099a8:	2002      	movs	r0, #2
 80099aa:	9303      	str	r3, [sp, #12]
 80099ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80099ae:	9302      	str	r3, [sp, #8]
 80099b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ba:	47a0      	blx	r4
 80099bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80099be:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80099c0:	9239      	str	r2, [sp, #228]	; 0xe4
 80099c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099c4:	923e      	str	r2, [sp, #248]	; 0xf8
 80099c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099c8:	923d      	str	r2, [sp, #244]	; 0xf4
 80099ca:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80099cc:	923c      	str	r2, [sp, #240]	; 0xf0
 80099ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099d0:	922d      	str	r2, [sp, #180]	; 0xb4
 80099d2:	e012      	b.n	80099fa <calibrate.lto_priv.301+0x13ba>
 80099d4:	4b2a      	ldr	r3, [pc, #168]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 80099d6:	001a      	movs	r2, r3
 80099d8:	3230      	adds	r2, #48	; 0x30
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	2a03      	cmp	r2, #3
 80099de:	d801      	bhi.n	80099e4 <calibrate.lto_priv.301+0x13a4>
 80099e0:	f7ff f9b3 	bl	8008d4a <calibrate.lto_priv.301+0x70a>
 80099e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099e6:	492c      	ldr	r1, [pc, #176]	; (8009a98 <calibrate.lto_priv.301+0x1458>)
 80099e8:	9200      	str	r2, [sp, #0]
 80099ea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80099ec:	4a2f      	ldr	r2, [pc, #188]	; (8009aac <calibrate.lto_priv.301+0x146c>)
 80099ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099f0:	2004      	movs	r0, #4
 80099f2:	47a0      	blx	r4
 80099f4:	f7ff f9a9 	bl	8008d4a <calibrate.lto_priv.301+0x70a>
 80099f8:	2300      	movs	r3, #0
 80099fa:	2400      	movs	r4, #0
 80099fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80099fe:	42a2      	cmp	r2, r4
 8009a00:	d000      	beq.n	8009a04 <calibrate.lto_priv.301+0x13c4>
 8009a02:	001c      	movs	r4, r3
 8009a04:	2301      	movs	r3, #1
 8009a06:	401c      	ands	r4, r3
 8009a08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <calibrate.lto_priv.301+0x13d8>
 8009a0e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8009a10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a16:	605a      	str	r2, [r3, #4]
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	d101      	bne.n	8009a20 <calibrate.lto_priv.301+0x13e0>
 8009a1c:	f7fe fe35 	bl	800868a <calibrate.lto_priv.301+0x4a>
 8009a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a22:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8009a24:	4d16      	ldr	r5, [pc, #88]	; (8009a80 <calibrate.lto_priv.301+0x1440>)
 8009a26:	8093      	strh	r3, [r2, #4]
 8009a28:	ab46      	add	r3, sp, #280	; 0x118
 8009a2a:	791b      	ldrb	r3, [r3, #4]
 8009a2c:	80d3      	strh	r3, [r2, #6]
 8009a2e:	0013      	movs	r3, r2
 8009a30:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8009a32:	811a      	strh	r2, [r3, #8]
 8009a34:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 8009a36:	815a      	strh	r2, [r3, #10]
 8009a38:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8009a3a:	819a      	strh	r2, [r3, #12]
 8009a3c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 8009a3e:	81da      	strh	r2, [r3, #14]
 8009a40:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 8009a42:	821a      	strh	r2, [r3, #16]
 8009a44:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009a46:	825a      	strh	r2, [r3, #18]
 8009a48:	2306      	movs	r3, #6
 8009a4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	002b      	movs	r3, r5
 8009a50:	3330      	adds	r3, #48	; 0x30
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b03      	cmp	r3, #3
 8009a56:	d904      	bls.n	8009a62 <calibrate.lto_priv.301+0x1422>
 8009a58:	4a15      	ldr	r2, [pc, #84]	; (8009ab0 <calibrate.lto_priv.301+0x1470>)
 8009a5a:	4916      	ldr	r1, [pc, #88]	; (8009ab4 <calibrate.lto_priv.301+0x1474>)
 8009a5c:	2004      	movs	r0, #4
 8009a5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a60:	4798      	blx	r3
 8009a62:	002b      	movs	r3, r5
 8009a64:	3330      	adds	r3, #48	; 0x30
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d801      	bhi.n	8009a70 <calibrate.lto_priv.301+0x1430>
 8009a6c:	f7fe fe0e 	bl	800868c <calibrate.lto_priv.301+0x4c>
 8009a70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009a72:	4a11      	ldr	r2, [pc, #68]	; (8009ab8 <calibrate.lto_priv.301+0x1478>)
 8009a74:	490f      	ldr	r1, [pc, #60]	; (8009ab4 <calibrate.lto_priv.301+0x1474>)
 8009a76:	2002      	movs	r0, #2
 8009a78:	4798      	blx	r3
 8009a7a:	f7fe fe07 	bl	800868c <calibrate.lto_priv.301+0x4c>
 8009a7e:	46c0      	nop			; (mov r8, r8)
 8009a80:	200002b8 	.word	0x200002b8
 8009a84:	0801d516 	.word	0x0801d516
 8009a88:	0801d572 	.word	0x0801d572
 8009a8c:	0801d59f 	.word	0x0801d59f
 8009a90:	42640000 	.word	0x42640000
 8009a94:	42172c98 	.word	0x42172c98
 8009a98:	0801cfa4 	.word	0x0801cfa4
 8009a9c:	0801d359 	.word	0x0801d359
 8009aa0:	0801cf81 	.word	0x0801cf81
 8009aa4:	0801cf7c 	.word	0x0801cf7c
 8009aa8:	0801d63d 	.word	0x0801d63d
 8009aac:	0801d609 	.word	0x0801d609
 8009ab0:	0801d6a5 	.word	0x0801d6a5
 8009ab4:	0801c8b8 	.word	0x0801c8b8
 8009ab8:	0801ca88 	.word	0x0801ca88

08009abc <acc_sensor_r2_conf_write_instr>:
 8009abc:	23a0      	movs	r3, #160	; 0xa0
 8009abe:	b530      	push	{r4, r5, lr}
 8009ac0:	01db      	lsls	r3, r3, #7
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	4319      	orrs	r1, r3
 8009ac6:	ac02      	add	r4, sp, #8
 8009ac8:	8021      	strh	r1, [r4, #0]
 8009aca:	210a      	movs	r1, #10
 8009acc:	0005      	movs	r5, r0
 8009ace:	9201      	str	r2, [sp, #4]
 8009ad0:	4469      	add	r1, sp
 8009ad2:	a801      	add	r0, sp, #4
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f002 fd5f 	bl	800c598 <acc_confprogram_copy>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2203      	movs	r2, #3
 8009ade:	0021      	movs	r1, r4
 8009ae0:	0028      	movs	r0, r5
 8009ae2:	f7fc fa97 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 8009ae6:	b005      	add	sp, #20
 8009ae8:	bd30      	pop	{r4, r5, pc}
 8009aea:	46c0      	nop			; (mov r8, r8)

08009aec <HAL_RTC_WaitForSynchro.constprop.117>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009aec:	20a0      	movs	r0, #160	; 0xa0
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
 8009aee:	b530      	push	{r4, r5, lr}
  tickstart = HAL_GetTick();

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009af0:	25fa      	movs	r5, #250	; 0xfa
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009af2:	4a09      	ldr	r2, [pc, #36]	; (8009b18 <HAL_RTC_WaitForSynchro.constprop.117+0x2c>)
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009af4:	00ad      	lsls	r5, r5, #2
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8009af6:	6813      	ldr	r3, [r2, #0]
 8009af8:	68d9      	ldr	r1, [r3, #12]
 8009afa:	4381      	bics	r1, r0
 8009afc:	60d9      	str	r1, [r3, #12]
  return uwTick;
 8009afe:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8009b00:	3880      	subs	r0, #128	; 0x80
 8009b02:	68d9      	ldr	r1, [r3, #12]
 8009b04:	4201      	tst	r1, r0
 8009b06:	d001      	beq.n	8009b0c <HAL_RTC_WaitForSynchro.constprop.117+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8009b08:	2000      	movs	r0, #0
}
 8009b0a:	bd30      	pop	{r4, r5, pc}
 8009b0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009b0e:	1b09      	subs	r1, r1, r4
 8009b10:	42a9      	cmp	r1, r5
 8009b12:	d9f6      	bls.n	8009b02 <HAL_RTC_WaitForSynchro.constprop.117+0x16>
      return HAL_TIMEOUT;
 8009b14:	2003      	movs	r0, #3
 8009b16:	e7f8      	b.n	8009b0a <HAL_RTC_WaitForSynchro.constprop.117+0x1e>
 8009b18:	20000288 	.word	0x20000288

08009b1c <UART_WaitOnFlagUntilTimeout.constprop.104>:
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8009b1c:	b570      	push	{r4, r5, r6, lr}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b1e:	6804      	ldr	r4, [r0, #0]
 8009b20:	4e11      	ldr	r6, [pc, #68]	; (8009b68 <UART_WaitOnFlagUntilTimeout.constprop.104+0x4c>)
 8009b22:	69e5      	ldr	r5, [r4, #28]
 8009b24:	400d      	ands	r5, r1
 8009b26:	42a9      	cmp	r1, r5
 8009b28:	d101      	bne.n	8009b2e <UART_WaitOnFlagUntilTimeout.constprop.104+0x12>
  return HAL_OK;
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e017      	b.n	8009b5e <UART_WaitOnFlagUntilTimeout.constprop.104+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009b2e:	1c5d      	adds	r5, r3, #1
 8009b30:	d0f7      	beq.n	8009b22 <UART_WaitOnFlagUntilTimeout.constprop.104+0x6>
 8009b32:	6af5      	ldr	r5, [r6, #44]	; 0x2c
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b34:	1aad      	subs	r5, r5, r2
 8009b36:	42ab      	cmp	r3, r5
 8009b38:	d212      	bcs.n	8009b60 <UART_WaitOnFlagUntilTimeout.constprop.104+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	4a0b      	ldr	r2, [pc, #44]	; (8009b6c <UART_WaitOnFlagUntilTimeout.constprop.104+0x50>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	6023      	str	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	32a3      	adds	r2, #163	; 0xa3
 8009b46:	32ff      	adds	r2, #255	; 0xff
 8009b48:	4393      	bics	r3, r2
 8009b4a:	60a3      	str	r3, [r4, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009b4c:	2320      	movs	r3, #32
 8009b4e:	1d02      	adds	r2, r0, #4
 8009b50:	67d3      	str	r3, [r2, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009b52:	3204      	adds	r2, #4
 8009b54:	67d3      	str	r3, [r2, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8009b56:	2300      	movs	r3, #0
 8009b58:	307c      	adds	r0, #124	; 0x7c
 8009b5a:	7003      	strb	r3, [r0, #0]
 8009b5c:	2003      	movs	r0, #3
}
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1de      	bne.n	8009b22 <UART_WaitOnFlagUntilTimeout.constprop.104+0x6>
 8009b64:	e7e9      	b.n	8009b3a <UART_WaitOnFlagUntilTimeout.constprop.104+0x1e>
 8009b66:	46c0      	nop			; (mov r8, r8)
 8009b68:	20000288 	.word	0x20000288
 8009b6c:	fffffe5f 	.word	0xfffffe5f

08009b70 <acc_utils_transfer_buffer_to_uint32.constprop.24>:
 8009b70:	8803      	ldrh	r3, [r0, #0]
 8009b72:	8842      	ldrh	r2, [r0, #2]
 8009b74:	041b      	lsls	r3, r3, #16
 8009b76:	4313      	orrs	r3, r2
 8009b78:	600b      	str	r3, [r1, #0]
 8009b7a:	4770      	bx	lr

08009b7c <acc_confprogram_modify_runif_sensor.constprop.19>:
 8009b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b7e:	0015      	movs	r5, r2
 8009b80:	aa08      	add	r2, sp, #32
 8009b82:	0006      	movs	r6, r0
 8009b84:	7810      	ldrb	r0, [r2, #0]
 8009b86:	00aa      	lsls	r2, r5, #2
 8009b88:	5854      	ldr	r4, [r2, r1]
 8009b8a:	220f      	movs	r2, #15
 8009b8c:	4394      	bics	r4, r2
 8009b8e:	4a0f      	ldr	r2, [pc, #60]	; (8009bcc <acc_confprogram_modify_runif_sensor.constprop.19+0x50>)
 8009b90:	0011      	movs	r1, r2
 8009b92:	3160      	adds	r1, #96	; 0x60
 8009b94:	7809      	ldrb	r1, [r1, #0]
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d00f      	beq.n	8009bba <acc_confprogram_modify_runif_sensor.constprop.19+0x3e>
 8009b9a:	431c      	orrs	r4, r3
 8009b9c:	2903      	cmp	r1, #3
 8009b9e:	d906      	bls.n	8009bae <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009ba4:	002b      	movs	r3, r5
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <acc_confprogram_modify_runif_sensor.constprop.19+0x54>)
 8009ba8:	490a      	ldr	r1, [pc, #40]	; (8009bd4 <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009baa:	2004      	movs	r0, #4
 8009bac:	47b8      	blx	r7
 8009bae:	0029      	movs	r1, r5
 8009bb0:	0030      	movs	r0, r6
 8009bb2:	0022      	movs	r2, r4
 8009bb4:	f7ff ff82 	bl	8009abc <acc_sensor_r2_conf_write_instr>
 8009bb8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009bba:	2903      	cmp	r1, #3
 8009bbc:	d9f7      	bls.n	8009bae <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009bbe:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8009bc0:	002b      	movs	r3, r5
 8009bc2:	4a05      	ldr	r2, [pc, #20]	; (8009bd8 <acc_confprogram_modify_runif_sensor.constprop.19+0x5c>)
 8009bc4:	4903      	ldr	r1, [pc, #12]	; (8009bd4 <acc_confprogram_modify_runif_sensor.constprop.19+0x58>)
 8009bc6:	2004      	movs	r0, #4
 8009bc8:	47b8      	blx	r7
 8009bca:	e7f0      	b.n	8009bae <acc_confprogram_modify_runif_sensor.constprop.19+0x32>
 8009bcc:	20000288 	.word	0x20000288
 8009bd0:	0801d6e6 	.word	0x0801d6e6
 8009bd4:	0801d064 	.word	0x0801d064
 8009bd8:	0801d71c 	.word	0x0801d71c

08009bdc <UART_TxISR_16BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bdc:	1d03      	adds	r3, r0, #4
 8009bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009be0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009be2:	2b21      	cmp	r3, #33	; 0x21
 8009be4:	d113      	bne.n	8009c0e <UART_TxISR_16BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009be6:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009be8:	0005      	movs	r5, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009bea:	2680      	movs	r6, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bec:	336a      	adds	r3, #106	; 0x6a
 8009bee:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009bf0:	3556      	adds	r5, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bf2:	2a00      	cmp	r2, #0
 8009bf4:	d00b      	beq.n	8009c0e <UART_TxISR_16BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009bf6:	8829      	ldrh	r1, [r5, #0]
 8009bf8:	6803      	ldr	r3, [r0, #0]
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d108      	bne.n	8009c10 <UART_TxISR_16BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	490c      	ldr	r1, [pc, #48]	; (8009c34 <UART_TxISR_16BIT_FIFOEN+0x58>)
 8009c02:	400a      	ands	r2, r1
 8009c04:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c06:	2240      	movs	r2, #64	; 0x40
 8009c08:	6819      	ldr	r1, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	601a      	str	r2, [r3, #0]
}
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c10:	69d9      	ldr	r1, [r3, #28]
 8009c12:	4231      	tst	r1, r6
 8009c14:	d00a      	beq.n	8009c2c <UART_TxISR_16BIT_FIFOEN+0x50>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009c16:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c18:	8821      	ldrh	r1, [r4, #0]
        huart->pTxBuffPtr += 2U;
 8009c1a:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009c1c:	05c9      	lsls	r1, r1, #23
 8009c1e:	0dc9      	lsrs	r1, r1, #23
 8009c20:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009c22:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009c24:	882b      	ldrh	r3, [r5, #0]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	802b      	strh	r3, [r5, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c2c:	3a01      	subs	r2, #1
 8009c2e:	b292      	uxth	r2, r2
 8009c30:	e7df      	b.n	8009bf2 <UART_TxISR_16BIT_FIFOEN+0x16>
 8009c32:	46c0      	nop			; (mov r8, r8)
 8009c34:	ff7fffff 	.word	0xff7fffff

08009c38 <UART_TxISR_8BIT_FIFOEN>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c38:	1d03      	adds	r3, r0, #4
 8009c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009c3c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c3e:	2b21      	cmp	r3, #33	; 0x21
 8009c40:	d113      	bne.n	8009c6a <UART_TxISR_8BIT_FIFOEN+0x32>
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c42:	0003      	movs	r3, r0
      if (huart->TxXferCount == 0U)
 8009c44:	0004      	movs	r4, r0
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c46:	2580      	movs	r5, #128	; 0x80
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c48:	336a      	adds	r3, #106	; 0x6a
 8009c4a:	881a      	ldrh	r2, [r3, #0]
      if (huart->TxXferCount == 0U)
 8009c4c:	3456      	adds	r4, #86	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	d00b      	beq.n	8009c6a <UART_TxISR_8BIT_FIFOEN+0x32>
      if (huart->TxXferCount == 0U)
 8009c52:	8821      	ldrh	r1, [r4, #0]
 8009c54:	6803      	ldr	r3, [r0, #0]
 8009c56:	2900      	cmp	r1, #0
 8009c58:	d108      	bne.n	8009c6c <UART_TxISR_8BIT_FIFOEN+0x34>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	490b      	ldr	r1, [pc, #44]	; (8009c8c <UART_TxISR_8BIT_FIFOEN+0x54>)
 8009c5e:	400a      	ands	r2, r1
 8009c60:	609a      	str	r2, [r3, #8]
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c62:	2240      	movs	r2, #64	; 0x40
 8009c64:	6819      	ldr	r1, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c6c:	69d9      	ldr	r1, [r3, #28]
 8009c6e:	4229      	tst	r1, r5
 8009c70:	d008      	beq.n	8009c84 <UART_TxISR_8BIT_FIFOEN+0x4c>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c72:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8009c74:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8009c76:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c78:	629e      	str	r6, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009c7a:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8009c7c:	8823      	ldrh	r3, [r4, #0]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	8023      	strh	r3, [r4, #0]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c84:	3a01      	subs	r2, #1
 8009c86:	b292      	uxth	r2, r2
 8009c88:	e7e1      	b.n	8009c4e <UART_TxISR_8BIT_FIFOEN+0x16>
 8009c8a:	46c0      	nop			; (mov r8, r8)
 8009c8c:	ff7fffff 	.word	0xff7fffff

08009c90 <UART_TxISR_16BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c90:	1d03      	adds	r3, r0, #4
 8009c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009c94:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c96:	2b21      	cmp	r3, #33	; 0x21
 8009c98:	d10d      	bne.n	8009cb6 <UART_TxISR_16BIT+0x26>
    if (huart->TxXferCount == 0U)
 8009c9a:	0004      	movs	r4, r0
 8009c9c:	3456      	adds	r4, #86	; 0x56
 8009c9e:	8822      	ldrh	r2, [r4, #0]
 8009ca0:	6803      	ldr	r3, [r0, #0]
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d108      	bne.n	8009cb8 <UART_TxISR_16BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ca6:	2180      	movs	r1, #128	; 0x80
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	438a      	bics	r2, r1
 8009cac:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cae:	2240      	movs	r2, #64	; 0x40
 8009cb0:	6819      	ldr	r1, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	601a      	str	r2, [r3, #0]
}
 8009cb6:	bd10      	pop	{r4, pc}
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009cb8:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009cba:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 8009cbc:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009cbe:	05d2      	lsls	r2, r2, #23
 8009cc0:	0dd2      	lsrs	r2, r2, #23
 8009cc2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009cc4:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009cc6:	8823      	ldrh	r3, [r4, #0]
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	8023      	strh	r3, [r4, #0]
 8009cce:	e7f2      	b.n	8009cb6 <UART_TxISR_16BIT+0x26>

08009cd0 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cd0:	1d03      	adds	r3, r0, #4
 8009cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 8009cd4:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cd6:	2b21      	cmp	r3, #33	; 0x21
 8009cd8:	d10d      	bne.n	8009cf6 <UART_TxISR_8BIT+0x26>
    if (huart->TxXferCount == 0U)
 8009cda:	0001      	movs	r1, r0
 8009cdc:	3156      	adds	r1, #86	; 0x56
 8009cde:	880a      	ldrh	r2, [r1, #0]
 8009ce0:	6803      	ldr	r3, [r0, #0]
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	d108      	bne.n	8009cf8 <UART_TxISR_8BIT+0x28>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ce6:	2180      	movs	r1, #128	; 0x80
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	438a      	bics	r2, r1
 8009cec:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cee:	2240      	movs	r2, #64	; 0x40
 8009cf0:	6819      	ldr	r1, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	601a      	str	r2, [r3, #0]
}
 8009cf6:	bd10      	pop	{r4, pc}
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cf8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009cfa:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 8009cfc:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cfe:	629c      	str	r4, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009d00:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8009d02:	880b      	ldrh	r3, [r1, #0]
 8009d04:	3b01      	subs	r3, #1
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	800b      	strh	r3, [r1, #0]
 8009d0a:	e7f4      	b.n	8009cf6 <UART_TxISR_8BIT+0x26>

08009d0c <UART_DMAAbortOnError.lto_priv.676>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009d0e:	2200      	movs	r2, #0
 8009d10:	0019      	movs	r1, r3
  huart->TxXferCount = 0U;
 8009d12:	3356      	adds	r3, #86	; 0x56
  huart->RxXferCount = 0U;
 8009d14:	315e      	adds	r1, #94	; 0x5e
 8009d16:	800a      	strh	r2, [r1, #0]
  huart->TxXferCount = 0U;
 8009d18:	801a      	strh	r2, [r3, #0]
}
 8009d1a:	4770      	bx	lr

08009d1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d1c:	b510      	push	{r4, lr}
  uint32_t tmpisr = 0U;
 8009d1e:	2300      	movs	r3, #0

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d20:	07ca      	lsls	r2, r1, #31
 8009d22:	d508      	bpl.n	8009d36 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d24:	0003      	movs	r3, r0
 8009d26:	3341      	adds	r3, #65	; 0x41
 8009d28:	781a      	ldrb	r2, [r3, #0]
 8009d2a:	2328      	movs	r3, #40	; 0x28
 8009d2c:	401a      	ands	r2, r3
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d2e:	331a      	adds	r3, #26
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d30:	2a28      	cmp	r2, #40	; 0x28
 8009d32:	d000      	beq.n	8009d36 <I2C_Disable_IRQ+0x1a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d34:	33b0      	adds	r3, #176	; 0xb0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d36:	078a      	lsls	r2, r1, #30
 8009d38:	d508      	bpl.n	8009d4c <I2C_Disable_IRQ+0x30>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d3a:	0002      	movs	r2, r0
 8009d3c:	2428      	movs	r4, #40	; 0x28
 8009d3e:	3241      	adds	r2, #65	; 0x41
 8009d40:	7812      	ldrb	r2, [r2, #0]
 8009d42:	4022      	ands	r2, r4
 8009d44:	42a2      	cmp	r2, r4
 8009d46:	d10a      	bne.n	8009d5e <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d48:	2244      	movs	r2, #68	; 0x44
 8009d4a:	4313      	orrs	r3, r2
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d4c:	074a      	lsls	r2, r1, #29
 8009d4e:	d501      	bpl.n	8009d54 <I2C_Disable_IRQ+0x38>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d50:	22b8      	movs	r2, #184	; 0xb8
 8009d52:	4313      	orrs	r3, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d54:	6801      	ldr	r1, [r0, #0]
 8009d56:	680a      	ldr	r2, [r1, #0]
 8009d58:	439a      	bics	r2, r3
 8009d5a:	600a      	str	r2, [r1, #0]
}
 8009d5c:	bd10      	pop	{r4, pc}
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d5e:	22f4      	movs	r2, #244	; 0xf4
 8009d60:	4313      	orrs	r3, r2
 8009d62:	e7f3      	b.n	8009d4c <I2C_Disable_IRQ+0x30>

08009d64 <I2C_DMAAbort>:
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009d64:	2200      	movs	r2, #0
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009d66:	6a83      	ldr	r3, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8009d68:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8009d6a:	638a      	str	r2, [r1, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009d6c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009d6e:	3341      	adds	r3, #65	; 0x41
  hi2c->hdmarx->XferAbortCallback = NULL;
 8009d70:	638a      	str	r2, [r1, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	2a60      	cmp	r2, #96	; 0x60
 8009d76:	d101      	bne.n	8009d7c <I2C_DMAAbort+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d78:	3a40      	subs	r2, #64	; 0x40
 8009d7a:	701a      	strb	r2, [r3, #0]
}
 8009d7c:	4770      	bx	lr

08009d7e <I2C_Flush_TXDR>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009d7e:	6803      	ldr	r3, [r0, #0]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	0792      	lsls	r2, r2, #30
 8009d84:	d501      	bpl.n	8009d8a <I2C_Flush_TXDR+0xc>
    hi2c->Instance->TXDR = 0x00U;
 8009d86:	2200      	movs	r2, #0
 8009d88:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	6999      	ldr	r1, [r3, #24]
 8009d8e:	4211      	tst	r1, r2
 8009d90:	d102      	bne.n	8009d98 <I2C_Flush_TXDR+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009d92:	6999      	ldr	r1, [r3, #24]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	619a      	str	r2, [r3, #24]
}
 8009d98:	4770      	bx	lr

08009d9a <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <I2C_ITListenCplt+0x5a>)
{
 8009d9c:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d9e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009da0:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8009da2:	0002      	movs	r2, r0
  hi2c->PreviousState = I2C_STATE_NONE;
 8009da4:	6303      	str	r3, [r0, #48]	; 0x30
{
 8009da6:	0004      	movs	r4, r0
  hi2c->State = HAL_I2C_STATE_READY;
 8009da8:	2020      	movs	r0, #32
 8009daa:	3241      	adds	r2, #65	; 0x41
 8009dac:	7010      	strb	r0, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dae:	7053      	strb	r3, [r2, #1]
  hi2c->XferISR = NULL;
 8009db0:	6363      	str	r3, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009db2:	074b      	lsls	r3, r1, #29
 8009db4:	d513      	bpl.n	8009dde <I2C_ITListenCplt+0x44>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8009dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009dc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <I2C_ITListenCplt+0x44>
      hi2c->XferSize--;
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009dce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009dd6:	2304      	movs	r3, #4
 8009dd8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	6463      	str	r3, [r4, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009dde:	0020      	movs	r0, r4
 8009de0:	2107      	movs	r1, #7
 8009de2:	f7ff ff9b 	bl	8009d1c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009de6:	2210      	movs	r2, #16
 8009de8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hi2c);
 8009dea:	3440      	adds	r4, #64	; 0x40
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dec:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8009dee:	2300      	movs	r3, #0
 8009df0:	7023      	strb	r3, [r4, #0]
}
 8009df2:	bd10      	pop	{r4, pc}
 8009df4:	ffff0000 	.word	0xffff0000

08009df8 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df8:	0003      	movs	r3, r0
{
 8009dfa:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dfc:	2500      	movs	r5, #0
 8009dfe:	3342      	adds	r3, #66	; 0x42
 8009e00:	701d      	strb	r5, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009e02:	3b01      	subs	r3, #1
 8009e04:	781a      	ldrb	r2, [r3, #0]
{
 8009e06:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009e08:	2a29      	cmp	r2, #41	; 0x29
 8009e0a:	d109      	bne.n	8009e20 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e0c:	3a01      	subs	r2, #1
 8009e0e:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e10:	2321      	movs	r3, #33	; 0x21
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e12:	2101      	movs	r1, #1
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009e14:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e16:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e18:	f7ff ff80 	bl	8009d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009e1c:	7025      	strb	r5, [r4, #0]
}
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	2a2a      	cmp	r2, #42	; 0x2a
 8009e24:	d1fb      	bne.n	8009e1e <I2C_ITSlaveSeqCplt+0x26>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e26:	3a02      	subs	r2, #2
 8009e28:	701a      	strb	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e2a:	2322      	movs	r3, #34	; 0x22
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009e2c:	2102      	movs	r1, #2
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009e2e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009e30:	3440      	adds	r4, #64	; 0x40
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009e32:	f7ff ff73 	bl	8009d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009e36:	7025      	strb	r5, [r4, #0]
 8009e38:	e7f1      	b.n	8009e1e <I2C_ITSlaveSeqCplt+0x26>

08009e3a <DMA_CalcDMAMUXChannelBaseAndMask>:
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009e3a:	6803      	ldr	r3, [r0, #0]
{
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	0004      	movs	r4, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009e40:	b2d8      	uxtb	r0, r3
 8009e42:	2114      	movs	r1, #20
 8009e44:	3808      	subs	r0, #8
 8009e46:	f004 fe75 	bl	800eb34 <__udivsi3>
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009e4a:	4a07      	ldr	r2, [pc, #28]	; (8009e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x2e>)
 8009e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e4e:	4694      	mov	ip, r2
 8009e50:	089b      	lsrs	r3, r3, #2
 8009e52:	4463      	add	r3, ip
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009e58:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x32>)
 8009e5a:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8009e5c:	231c      	movs	r3, #28
 8009e5e:	4018      	ands	r0, r3
 8009e60:	3b1b      	subs	r3, #27
 8009e62:	4083      	lsls	r3, r0
 8009e64:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8009e66:	bd10      	pop	{r4, pc}
 8009e68:	10008200 	.word	0x10008200
 8009e6c:	40020880 	.word	0x40020880

08009e70 <HAL_DMA_Init.part.0.constprop.144>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8009e70:	b570      	push	{r4, r5, r6, lr}
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e72:	4b23      	ldr	r3, [pc, #140]	; (8009f00 <HAL_DMA_Init.part.0.constprop.144+0x90>)
 8009e74:	6805      	ldr	r5, [r0, #0]
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
 8009e76:	0004      	movs	r4, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e78:	2114      	movs	r1, #20
 8009e7a:	18e8      	adds	r0, r5, r3
 8009e7c:	f004 fe5a 	bl	800eb34 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e80:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e82:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e84:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e86:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e88:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009e8a:	682b      	ldr	r3, [r5, #0]
 8009e8c:	4a1d      	ldr	r2, [pc, #116]	; (8009f04 <HAL_DMA_Init.part.0.constprop.144+0x94>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009e8e:	68a1      	ldr	r1, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8009e90:	4013      	ands	r3, r2
 8009e92:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8009e94:	2380      	movs	r3, #128	; 0x80
 8009e96:	682a      	ldr	r2, [r5, #0]
 8009e98:	430b      	orrs	r3, r1
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009e9e:	0020      	movs	r0, r4
 8009ea0:	f7ff ffcb 	bl	8009e3a <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009ea4:	2380      	movs	r3, #128	; 0x80
 8009ea6:	68a2      	ldr	r2, [r4, #8]
 8009ea8:	01db      	lsls	r3, r3, #7
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d101      	bne.n	8009eb2 <HAL_DMA_Init.part.0.constprop.144+0x42>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009eb2:	6862      	ldr	r2, [r4, #4]
 8009eb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009eb6:	b2d3      	uxtb	r3, r2
 8009eb8:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009eba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8009ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009ebe:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ec0:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009ec2:	2a03      	cmp	r2, #3
 8009ec4:	d816      	bhi.n	8009ef4 <HAL_DMA_Init.part.0.constprop.144+0x84>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ec6:	4a10      	ldr	r2, [pc, #64]	; (8009f08 <HAL_DMA_Init.part.0.constprop.144+0x98>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ec8:	4810      	ldr	r0, [pc, #64]	; (8009f0c <HAL_DMA_Init.part.0.constprop.144+0x9c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009eca:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009ecc:	2203      	movs	r2, #3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	3a02      	subs	r2, #2
 8009ed4:	409a      	lsls	r2, r3
 8009ed6:	65a2      	str	r2, [r4, #88]	; 0x58
 8009ed8:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009eda:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009edc:	0089      	lsls	r1, r1, #2
 8009ede:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ee0:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009ee2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ee4:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ee6:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8009ee8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009eea:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8009eec:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8009eee:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 8009ef0:	77e0      	strb	r0, [r4, #31]
}
 8009ef2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8009ef8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009efa:	65a3      	str	r3, [r4, #88]	; 0x58
 8009efc:	e7f3      	b.n	8009ee6 <HAL_DMA_Init.part.0.constprop.144+0x76>
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	bffdfff8 	.word	0xbffdfff8
 8009f04:	ffff800f 	.word	0xffff800f
 8009f08:	1000823f 	.word	0x1000823f
 8009f0c:	40020940 	.word	0x40020940

08009f10 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009f10:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009f12:	4a07      	ldr	r2, [pc, #28]	; (8009f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	045b      	lsls	r3, r3, #17
 8009f18:	0f5b      	lsrs	r3, r3, #29
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	589b      	ldr	r3, [r3, r2]
 8009f1e:	221f      	movs	r2, #31
 8009f20:	4013      	ands	r3, r2
 8009f22:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f24:	6810      	ldr	r0, [r2, #0]
 8009f26:	40d8      	lsrs	r0, r3
}
 8009f28:	4770      	bx	lr
 8009f2a:	46c0      	nop			; (mov r8, r8)
 8009f2c:	40021000 	.word	0x40021000
 8009f30:	08018b9c 	.word	0x08018b9c
 8009f34:	20000000 	.word	0x20000000

08009f38 <validate.lto_priv.170>:
 8009f38:	6983      	ldr	r3, [r0, #24]
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	0004      	movs	r4, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00a      	beq.n	8009f58 <validate.lto_priv.170+0x20>
 8009f42:	4b12      	ldr	r3, [pc, #72]	; (8009f8c <validate.lto_priv.170+0x54>)
 8009f44:	001a      	movs	r2, r3
 8009f46:	3260      	adds	r2, #96	; 0x60
 8009f48:	7812      	ldrb	r2, [r2, #0]
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d004      	beq.n	8009f58 <validate.lto_priv.170+0x20>
 8009f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f50:	4a0f      	ldr	r2, [pc, #60]	; (8009f90 <validate.lto_priv.170+0x58>)
 8009f52:	4910      	ldr	r1, [pc, #64]	; (8009f94 <validate.lto_priv.170+0x5c>)
 8009f54:	2001      	movs	r0, #1
 8009f56:	4798      	blx	r3
 8009f58:	69e3      	ldr	r3, [r4, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <validate.lto_priv.170+0x3c>
 8009f5e:	4b0b      	ldr	r3, [pc, #44]	; (8009f8c <validate.lto_priv.170+0x54>)
 8009f60:	001a      	movs	r2, r3
 8009f62:	3260      	adds	r2, #96	; 0x60
 8009f64:	7812      	ldrb	r2, [r2, #0]
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d004      	beq.n	8009f74 <validate.lto_priv.170+0x3c>
 8009f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f6c:	4a0a      	ldr	r2, [pc, #40]	; (8009f98 <validate.lto_priv.170+0x60>)
 8009f6e:	4909      	ldr	r1, [pc, #36]	; (8009f94 <validate.lto_priv.170+0x5c>)
 8009f70:	2001      	movs	r0, #1
 8009f72:	4798      	blx	r3
 8009f74:	6963      	ldr	r3, [r4, #20]
 8009f76:	2001      	movs	r0, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <validate.lto_priv.170+0x52>
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <validate.lto_priv.170+0x54>)
 8009f7e:	2000      	movs	r0, #0
 8009f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f82:	4a06      	ldr	r2, [pc, #24]	; (8009f9c <validate.lto_priv.170+0x64>)
 8009f84:	4903      	ldr	r1, [pc, #12]	; (8009f94 <validate.lto_priv.170+0x5c>)
 8009f86:	4798      	blx	r3
 8009f88:	2000      	movs	r0, #0
 8009f8a:	bd10      	pop	{r4, pc}
 8009f8c:	20000288 	.word	0x20000288
 8009f90:	0801c4be 	.word	0x0801c4be
 8009f94:	0801d74b 	.word	0x0801d74b
 8009f98:	0801c4f1 	.word	0x0801c4f1
 8009f9c:	0801d761 	.word	0x0801d761

08009fa0 <reset.lto_priv.175.lto_priv.636>:
 8009fa0:	4770      	bx	lr

08009fa2 <consume.lto_priv.635>:
 8009fa2:	b510      	push	{r4, lr}
 8009fa4:	0004      	movs	r4, r0
 8009fa6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009fa8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009faa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fac:	6900      	ldr	r0, [r0, #16]
 8009fae:	4798      	blx	r3
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fb4:	615a      	str	r2, [r3, #20]
 8009fb6:	bd10      	pop	{r4, pc}

08009fb8 <validate.lto_priv.169>:
 8009fb8:	6942      	ldr	r2, [r0, #20]
 8009fba:	6903      	ldr	r3, [r0, #16]
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d107      	bne.n	8009fd2 <validate.lto_priv.169+0x1a>
 8009fc2:	4b11      	ldr	r3, [pc, #68]	; (800a008 <validate.lto_priv.169+0x50>)
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc8:	4a10      	ldr	r2, [pc, #64]	; (800a00c <validate.lto_priv.169+0x54>)
 8009fca:	4911      	ldr	r1, [pc, #68]	; (800a010 <validate.lto_priv.169+0x58>)
 8009fcc:	4798      	blx	r3
 8009fce:	2000      	movs	r0, #0
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	6984      	ldr	r4, [r0, #24]
 8009fd4:	2c00      	cmp	r4, #0
 8009fd6:	d007      	beq.n	8009fe8 <validate.lto_priv.169+0x30>
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <validate.lto_priv.169+0x50>)
 8009fda:	2000      	movs	r0, #0
 8009fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fde:	4a0d      	ldr	r2, [pc, #52]	; (800a014 <validate.lto_priv.169+0x5c>)
 8009fe0:	490b      	ldr	r1, [pc, #44]	; (800a010 <validate.lto_priv.169+0x58>)
 8009fe2:	4798      	blx	r3
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7f3      	b.n	8009fd0 <validate.lto_priv.169+0x18>
 8009fe8:	69c3      	ldr	r3, [r0, #28]
 8009fea:	3304      	adds	r3, #4
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d007      	beq.n	800a000 <validate.lto_priv.169+0x48>
 8009ff0:	4b05      	ldr	r3, [pc, #20]	; (800a008 <validate.lto_priv.169+0x50>)
 8009ff2:	0020      	movs	r0, r4
 8009ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff6:	4a08      	ldr	r2, [pc, #32]	; (800a018 <validate.lto_priv.169+0x60>)
 8009ff8:	4905      	ldr	r1, [pc, #20]	; (800a010 <validate.lto_priv.169+0x58>)
 8009ffa:	4798      	blx	r3
 8009ffc:	0020      	movs	r0, r4
 8009ffe:	e7e7      	b.n	8009fd0 <validate.lto_priv.169+0x18>
 800a000:	6800      	ldr	r0, [r0, #0]
 800a002:	6883      	ldr	r3, [r0, #8]
 800a004:	4798      	blx	r3
 800a006:	e7e3      	b.n	8009fd0 <validate.lto_priv.169+0x18>
 800a008:	20000288 	.word	0x20000288
 800a00c:	0801d788 	.word	0x0801d788
 800a010:	0801d7b4 	.word	0x0801d7b4
 800a014:	0801d7d8 	.word	0x0801d7d8
 800a018:	0801d7f8 	.word	0x0801d7f8

0800a01c <reset.lto_priv.174>:
 800a01c:	2301      	movs	r3, #1
 800a01e:	b510      	push	{r4, lr}
 800a020:	69c2      	ldr	r2, [r0, #28]
 800a022:	6800      	ldr	r0, [r0, #0]
 800a024:	7013      	strb	r3, [r2, #0]
 800a026:	68c3      	ldr	r3, [r0, #12]
 800a028:	4798      	blx	r3
 800a02a:	bd10      	pop	{r4, pc}

0800a02c <filter_q3_12_complex.lto_priv.661>:
 800a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02e:	46c6      	mov	lr, r8
 800a030:	000f      	movs	r7, r1
 800a032:	218b      	movs	r1, #139	; 0x8b
 800a034:	b500      	push	{lr}
 800a036:	05c9      	lsls	r1, r1, #23
 800a038:	0006      	movs	r6, r0
 800a03a:	1c18      	adds	r0, r3, #0
 800a03c:	1c1c      	adds	r4, r3, #0
 800a03e:	0895      	lsrs	r5, r2, #2
 800a040:	f004 fa46 	bl	800e4d0 <__aeabi_fmul>
 800a044:	2100      	movs	r1, #0
 800a046:	4680      	mov	r8, r0
 800a048:	1c20      	adds	r0, r4, #0
 800a04a:	f004 ff57 	bl	800eefc <__aeabi_fcmpge>
 800a04e:	2800      	cmp	r0, #0
 800a050:	d10f      	bne.n	800a072 <filter_q3_12_complex.lto_priv.661+0x46>
 800a052:	21bf      	movs	r1, #191	; 0xbf
 800a054:	0609      	lsls	r1, r1, #24
 800a056:	4640      	mov	r0, r8
 800a058:	f003 ff8e 	bl	800df78 <__aeabi_fadd>
 800a05c:	f005 f94c 	bl	800f2f8 <__aeabi_f2iz>
 800a060:	b204      	sxth	r4, r0
 800a062:	0030      	movs	r0, r6
 800a064:	00aa      	lsls	r2, r5, #2
 800a066:	18ba      	adds	r2, r7, r2
 800a068:	42ba      	cmp	r2, r7
 800a06a:	d105      	bne.n	800a078 <filter_q3_12_complex.lto_priv.661+0x4c>
 800a06c:	bc04      	pop	{r2}
 800a06e:	4690      	mov	r8, r2
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a072:	21fc      	movs	r1, #252	; 0xfc
 800a074:	0589      	lsls	r1, r1, #22
 800a076:	e7ee      	b.n	800a056 <filter_q3_12_complex.lto_priv.661+0x2a>
 800a078:	2300      	movs	r3, #0
 800a07a:	5efe      	ldrsh	r6, [r7, r3]
 800a07c:	2300      	movs	r3, #0
 800a07e:	5ec5      	ldrsh	r5, [r0, r3]
 800a080:	1bad      	subs	r5, r5, r6
 800a082:	4365      	muls	r5, r4
 800a084:	17eb      	asrs	r3, r5, #31
 800a086:	051b      	lsls	r3, r3, #20
 800a088:	0d1b      	lsrs	r3, r3, #20
 800a08a:	195b      	adds	r3, r3, r5
 800a08c:	131b      	asrs	r3, r3, #12
 800a08e:	199b      	adds	r3, r3, r6
 800a090:	803b      	strh	r3, [r7, #0]
 800a092:	2302      	movs	r3, #2
 800a094:	5ec5      	ldrsh	r5, [r0, r3]
 800a096:	2302      	movs	r3, #2
 800a098:	5efe      	ldrsh	r6, [r7, r3]
 800a09a:	3004      	adds	r0, #4
 800a09c:	1bad      	subs	r5, r5, r6
 800a09e:	4365      	muls	r5, r4
 800a0a0:	17eb      	asrs	r3, r5, #31
 800a0a2:	051b      	lsls	r3, r3, #20
 800a0a4:	0d1b      	lsrs	r3, r3, #20
 800a0a6:	195b      	adds	r3, r3, r5
 800a0a8:	131b      	asrs	r3, r3, #12
 800a0aa:	199b      	adds	r3, r3, r6
 800a0ac:	807b      	strh	r3, [r7, #2]
 800a0ae:	3704      	adds	r7, #4
 800a0b0:	e7da      	b.n	800a068 <filter_q3_12_complex.lto_priv.661+0x3c>

0800a0b2 <validate.lto_priv.168>:
 800a0b2:	6983      	ldr	r3, [r0, #24]
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	0004      	movs	r4, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00a      	beq.n	800a0d2 <validate.lto_priv.168+0x20>
 800a0bc:	4b0e      	ldr	r3, [pc, #56]	; (800a0f8 <validate.lto_priv.168+0x46>)
 800a0be:	001a      	movs	r2, r3
 800a0c0:	3260      	adds	r2, #96	; 0x60
 800a0c2:	7812      	ldrb	r2, [r2, #0]
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d004      	beq.n	800a0d2 <validate.lto_priv.168+0x20>
 800a0c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ca:	4a0c      	ldr	r2, [pc, #48]	; (800a0fc <validate.lto_priv.168+0x4a>)
 800a0cc:	490c      	ldr	r1, [pc, #48]	; (800a100 <validate.lto_priv.168+0x4e>)
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	4798      	blx	r3
 800a0d2:	69e3      	ldr	r3, [r4, #28]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00a      	beq.n	800a0ee <validate.lto_priv.168+0x3c>
 800a0d8:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <validate.lto_priv.168+0x46>)
 800a0da:	001a      	movs	r2, r3
 800a0dc:	3260      	adds	r2, #96	; 0x60
 800a0de:	7812      	ldrb	r2, [r2, #0]
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	d004      	beq.n	800a0ee <validate.lto_priv.168+0x3c>
 800a0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0e6:	4a07      	ldr	r2, [pc, #28]	; (800a104 <validate.lto_priv.168+0x52>)
 800a0e8:	4905      	ldr	r1, [pc, #20]	; (800a100 <validate.lto_priv.168+0x4e>)
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	4798      	blx	r3
 800a0ee:	6820      	ldr	r0, [r4, #0]
 800a0f0:	6883      	ldr	r3, [r0, #8]
 800a0f2:	4798      	blx	r3
 800a0f4:	bd10      	pop	{r4, pc}
 800a0f6:	46c0      	nop			; (mov r8, r8)
 800a0f8:	20000288 	.word	0x20000288
 800a0fc:	0801c4be 	.word	0x0801c4be
 800a100:	0801d81f 	.word	0x0801d81f
 800a104:	0801c4f1 	.word	0x0801c4f1

0800a108 <event.lto_priv.180>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	0004      	movs	r4, r0
 800a10c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a10e:	6945      	ldr	r5, [r0, #20]
 800a110:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a112:	6819      	ldr	r1, [r3, #0]
 800a114:	6900      	ldr	r0, [r0, #16]
 800a116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a118:	4798      	blx	r3
 800a11a:	7028      	strb	r0, [r5, #0]
 800a11c:	6820      	ldr	r0, [r4, #0]
 800a11e:	6843      	ldr	r3, [r0, #4]
 800a120:	4798      	blx	r3
 800a122:	bd70      	pop	{r4, r5, r6, pc}

0800a124 <saturation_check_i16.lto_priv.639>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	0005      	movs	r5, r0
 800a128:	000c      	movs	r4, r1
 800a12a:	4813      	ldr	r0, [pc, #76]	; (800a178 <saturation_check_i16.lto_priv.639+0x54>)
 800a12c:	1c11      	adds	r1, r2, #0
 800a12e:	f004 fb01 	bl	800e734 <__aeabi_fsub>
 800a132:	4911      	ldr	r1, [pc, #68]	; (800a178 <saturation_check_i16.lto_priv.639+0x54>)
 800a134:	f004 f8ba 	bl	800e2ac <__aeabi_fdiv>
 800a138:	21c7      	movs	r1, #199	; 0xc7
 800a13a:	0609      	lsls	r1, r1, #24
 800a13c:	1c07      	adds	r7, r0, #0
 800a13e:	f004 f9c7 	bl	800e4d0 <__aeabi_fmul>
 800a142:	f005 f8d9 	bl	800f2f8 <__aeabi_f2iz>
 800a146:	490d      	ldr	r1, [pc, #52]	; (800a17c <saturation_check_i16.lto_priv.639+0x58>)
 800a148:	b206      	sxth	r6, r0
 800a14a:	1c38      	adds	r0, r7, #0
 800a14c:	f004 f9c0 	bl	800e4d0 <__aeabi_fmul>
 800a150:	f005 f8d2 	bl	800f2f8 <__aeabi_f2iz>
 800a154:	0864      	lsrs	r4, r4, #1
 800a156:	0064      	lsls	r4, r4, #1
 800a158:	b200      	sxth	r0, r0
 800a15a:	192c      	adds	r4, r5, r4
 800a15c:	42a5      	cmp	r5, r4
 800a15e:	d101      	bne.n	800a164 <saturation_check_i16.lto_priv.639+0x40>
 800a160:	2000      	movs	r0, #0
 800a162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a164:	2300      	movs	r3, #0
 800a166:	5eea      	ldrsh	r2, [r5, r3]
 800a168:	4290      	cmp	r0, r2
 800a16a:	dd02      	ble.n	800a172 <saturation_check_i16.lto_priv.639+0x4e>
 800a16c:	3502      	adds	r5, #2
 800a16e:	4296      	cmp	r6, r2
 800a170:	dbf4      	blt.n	800a15c <saturation_check_i16.lto_priv.639+0x38>
 800a172:	2001      	movs	r0, #1
 800a174:	e7f5      	b.n	800a162 <saturation_check_i16.lto_priv.639+0x3e>
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	42c80000 	.word	0x42c80000
 800a17c:	46fffe00 	.word	0x46fffe00

0800a180 <validate.lto_priv.167>:
 800a180:	6903      	ldr	r3, [r0, #16]
 800a182:	6942      	ldr	r2, [r0, #20]
 800a184:	b510      	push	{r4, lr}
 800a186:	0004      	movs	r4, r0
 800a188:	4293      	cmp	r3, r2
 800a18a:	d007      	beq.n	800a19c <validate.lto_priv.167+0x1c>
 800a18c:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <validate.lto_priv.167+0x5c>)
 800a18e:	2000      	movs	r0, #0
 800a190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a192:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <validate.lto_priv.167+0x60>)
 800a194:	4913      	ldr	r1, [pc, #76]	; (800a1e4 <validate.lto_priv.167+0x64>)
 800a196:	4798      	blx	r3
 800a198:	2000      	movs	r0, #0
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	6983      	ldr	r3, [r0, #24]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <validate.lto_priv.167+0x38>
 800a1a2:	4b0e      	ldr	r3, [pc, #56]	; (800a1dc <validate.lto_priv.167+0x5c>)
 800a1a4:	001a      	movs	r2, r3
 800a1a6:	3260      	adds	r2, #96	; 0x60
 800a1a8:	7812      	ldrb	r2, [r2, #0]
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d004      	beq.n	800a1b8 <validate.lto_priv.167+0x38>
 800a1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1b0:	4a0d      	ldr	r2, [pc, #52]	; (800a1e8 <validate.lto_priv.167+0x68>)
 800a1b2:	490c      	ldr	r1, [pc, #48]	; (800a1e4 <validate.lto_priv.167+0x64>)
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	4798      	blx	r3
 800a1b8:	69e3      	ldr	r3, [r4, #28]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <validate.lto_priv.167+0x54>
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <validate.lto_priv.167+0x5c>)
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	3260      	adds	r2, #96	; 0x60
 800a1c4:	7812      	ldrb	r2, [r2, #0]
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	d004      	beq.n	800a1d4 <validate.lto_priv.167+0x54>
 800a1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1cc:	4a07      	ldr	r2, [pc, #28]	; (800a1ec <validate.lto_priv.167+0x6c>)
 800a1ce:	4905      	ldr	r1, [pc, #20]	; (800a1e4 <validate.lto_priv.167+0x64>)
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	4798      	blx	r3
 800a1d4:	6820      	ldr	r0, [r4, #0]
 800a1d6:	6883      	ldr	r3, [r0, #8]
 800a1d8:	4798      	blx	r3
 800a1da:	e7de      	b.n	800a19a <validate.lto_priv.167+0x1a>
 800a1dc:	20000288 	.word	0x20000288
 800a1e0:	0801c500 	.word	0x0801c500
 800a1e4:	0801d838 	.word	0x0801d838
 800a1e8:	0801c4be 	.word	0x0801c4be
 800a1ec:	0801c4f1 	.word	0x0801c4f1

0800a1f0 <event.lto_priv.179.lto_priv.665>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	0004      	movs	r4, r0
 800a1f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a1f6:	4798      	blx	r3
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	6843      	ldr	r3, [r0, #4]
 800a1fc:	4798      	blx	r3
 800a1fe:	bd10      	pop	{r4, pc}

0800a200 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a202:	2308      	movs	r3, #8
{
 800a204:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a206:	4698      	mov	r8, r3
 800a208:	4480      	add	r8, r0
 800a20a:	4643      	mov	r3, r8
{
 800a20c:	46de      	mov	lr, fp
 800a20e:	4657      	mov	r7, sl
 800a210:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a214:	b5e0      	push	{r5, r6, r7, lr}
 800a216:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a218:	2b22      	cmp	r3, #34	; 0x22
 800a21a:	d149      	bne.n	800a2b0 <UART_RxISR_16BIT_FIFOEN+0xb0>
  uint16_t  uhMask = huart->Mask;
 800a21c:	0003      	movs	r3, r0
 800a21e:	3360      	adds	r3, #96	; 0x60
 800a220:	881b      	ldrh	r3, [r3, #0]
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a222:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a224:	4699      	mov	r9, r3
      huart->RxXferCount--;

      if (huart->RxXferCount == 0U)
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a226:	4b25      	ldr	r3, [pc, #148]	; (800a2bc <UART_RxISR_16BIT_FIFOEN+0xbc>)
 800a228:	0006      	movs	r6, r0
 800a22a:	469a      	mov	sl, r3

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a22c:	3322      	adds	r3, #34	; 0x22
 800a22e:	33ff      	adds	r3, #255	; 0xff
 800a230:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a232:	3768      	adds	r7, #104	; 0x68
 800a234:	883d      	ldrh	r5, [r7, #0]
 800a236:	365e      	adds	r6, #94	; 0x5e
 800a238:	2d00      	cmp	r5, #0
 800a23a:	d117      	bne.n	800a26c <UART_RxISR_16BIT_FIFOEN+0x6c>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a23c:	8833      	ldrh	r3, [r6, #0]
 800a23e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00d      	beq.n	800a260 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a244:	883a      	ldrh	r2, [r7, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d90a      	bls.n	800a260 <UART_RxISR_16BIT_FIFOEN+0x60>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	491c      	ldr	r1, [pc, #112]	; (800a2c0 <UART_RxISR_16BIT_FIFOEN+0xc0>)
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	400a      	ands	r2, r1
 800a252:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a254:	4a1b      	ldr	r2, [pc, #108]	; (800a2c4 <UART_RxISR_16BIT_FIFOEN+0xc4>)

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a256:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800a258:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a25a:	2220      	movs	r2, #32
 800a25c:	430a      	orrs	r2, r1
 800a25e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a260:	bc3c      	pop	{r2, r3, r4, r5}
 800a262:	4690      	mov	r8, r2
 800a264:	4699      	mov	r9, r3
 800a266:	46a2      	mov	sl, r4
 800a268:	46ab      	mov	fp, r5
 800a26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *tmp = (uint16_t)(uhdata & uhMask);
 800a26c:	4648      	mov	r0, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a26e:	6823      	ldr	r3, [r4, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a270:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a272:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800a274:	4001      	ands	r1, r0
 800a276:	8011      	strh	r1, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800a278:	3202      	adds	r2, #2
 800a27a:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a27c:	8832      	ldrh	r2, [r6, #0]
 800a27e:	3a01      	subs	r2, #1
 800a280:	b292      	uxth	r2, r2
 800a282:	8032      	strh	r2, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a284:	8832      	ldrh	r2, [r6, #0]
 800a286:	b292      	uxth	r2, r2
 800a288:	2a00      	cmp	r2, #0
 800a28a:	d10e      	bne.n	800a2aa <UART_RxISR_16BIT_FIFOEN+0xaa>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a28c:	4650      	mov	r0, sl
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	4001      	ands	r1, r0
 800a292:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a294:	6899      	ldr	r1, [r3, #8]
 800a296:	480c      	ldr	r0, [pc, #48]	; (800a2c8 <UART_RxISR_16BIT_FIFOEN+0xc8>)
 800a298:	4001      	ands	r1, r0
 800a29a:	6099      	str	r1, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a29c:	4643      	mov	r3, r8
 800a29e:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a2a0:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a2a2:	67d9      	str	r1, [r3, #124]	; 0x7c
        huart->RxISR = NULL;
 800a2a4:	66e2      	str	r2, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a2a6:	f7f9 f9ff 	bl	80036a8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a2aa:	3d01      	subs	r5, #1
 800a2ac:	b2ad      	uxth	r5, r5
 800a2ae:	e7c3      	b.n	800a238 <UART_RxISR_16BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	6802      	ldr	r2, [r0, #0]
 800a2b4:	6991      	ldr	r1, [r2, #24]
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	6193      	str	r3, [r2, #24]
 800a2ba:	e7d1      	b.n	800a260 <UART_RxISR_16BIT_FIFOEN+0x60>
 800a2bc:	fffffeff 	.word	0xfffffeff
 800a2c0:	efffffff 	.word	0xefffffff
 800a2c4:	0800a39d 	.word	0x0800a39d
 800a2c8:	effffffe 	.word	0xeffffffe

0800a2cc <UART_RxISR_8BIT_FIFOEN>:
{
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2ce:	2308      	movs	r3, #8
{
 800a2d0:	4645      	mov	r5, r8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	4480      	add	r8, r0
 800a2d6:	4643      	mov	r3, r8
{
 800a2d8:	46de      	mov	lr, fp
 800a2da:	4657      	mov	r7, sl
 800a2dc:	464e      	mov	r6, r9
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800a2e0:	b5e0      	push	{r5, r6, r7, lr}
 800a2e2:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2e4:	2b22      	cmp	r3, #34	; 0x22
 800a2e6:	d14b      	bne.n	800a380 <UART_RxISR_8BIT_FIFOEN+0xb4>
  uint16_t  uhMask = huart->Mask;
 800a2e8:	0003      	movs	r3, r0
 800a2ea:	3360      	adds	r3, #96	; 0x60
 800a2ec:	881b      	ldrh	r3, [r3, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a2ee:	0007      	movs	r7, r0
  uint16_t  uhMask = huart->Mask;
 800a2f0:	4699      	mov	r9, r3
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2f2:	4b26      	ldr	r3, [pc, #152]	; (800a38c <UART_RxISR_8BIT_FIFOEN+0xc0>)
 800a2f4:	0006      	movs	r6, r0
 800a2f6:	469a      	mov	sl, r3
        huart->RxState = HAL_UART_STATE_READY;
 800a2f8:	3322      	adds	r3, #34	; 0x22
 800a2fa:	33ff      	adds	r3, #255	; 0xff
 800a2fc:	469b      	mov	fp, r3
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a2fe:	3768      	adds	r7, #104	; 0x68
 800a300:	883d      	ldrh	r5, [r7, #0]
 800a302:	365e      	adds	r6, #94	; 0x5e
 800a304:	2d00      	cmp	r5, #0
 800a306:	d117      	bne.n	800a338 <UART_RxISR_8BIT_FIFOEN+0x6c>
    rxdatacount = huart->RxXferCount;
 800a308:	8833      	ldrh	r3, [r6, #0]
 800a30a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00d      	beq.n	800a32c <UART_RxISR_8BIT_FIFOEN+0x60>
 800a310:	883a      	ldrh	r2, [r7, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d90a      	bls.n	800a32c <UART_RxISR_8BIT_FIFOEN+0x60>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	491d      	ldr	r1, [pc, #116]	; (800a390 <UART_RxISR_8BIT_FIFOEN+0xc4>)
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	400a      	ands	r2, r1
 800a31e:	609a      	str	r2, [r3, #8]
      huart->RxISR = UART_RxISR_8BIT;
 800a320:	4a1c      	ldr	r2, [pc, #112]	; (800a394 <UART_RxISR_8BIT_FIFOEN+0xc8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a322:	6819      	ldr	r1, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800a324:	66e2      	str	r2, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a326:	2220      	movs	r2, #32
 800a328:	430a      	orrs	r2, r1
 800a32a:	601a      	str	r2, [r3, #0]
}
 800a32c:	bc3c      	pop	{r2, r3, r4, r5}
 800a32e:	4690      	mov	r8, r2
 800a330:	4699      	mov	r9, r3
 800a332:	46a2      	mov	sl, r4
 800a334:	46ab      	mov	fp, r5
 800a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a338:	464a      	mov	r2, r9
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a33e:	4013      	ands	r3, r2
 800a340:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a342:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800a344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a346:	3301      	adds	r3, #1
 800a348:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800a34a:	8833      	ldrh	r3, [r6, #0]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	8033      	strh	r3, [r6, #0]
      if (huart->RxXferCount == 0U)
 800a352:	8833      	ldrh	r3, [r6, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10f      	bne.n	800a37a <UART_RxISR_8BIT_FIFOEN+0xae>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35a:	4650      	mov	r0, sl
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	6811      	ldr	r1, [r2, #0]
 800a360:	4001      	ands	r1, r0
 800a362:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a364:	6891      	ldr	r1, [r2, #8]
 800a366:	480c      	ldr	r0, [pc, #48]	; (800a398 <UART_RxISR_8BIT_FIFOEN+0xcc>)
 800a368:	4001      	ands	r1, r0
 800a36a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800a36c:	4642      	mov	r2, r8
 800a36e:	4659      	mov	r1, fp
        HAL_UART_RxCpltCallback(huart);
 800a370:	0020      	movs	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 800a372:	67d1      	str	r1, [r2, #124]	; 0x7c
        huart->RxISR = NULL;
 800a374:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800a376:	f7f9 f997 	bl	80036a8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800a37a:	3d01      	subs	r5, #1
 800a37c:	b2ad      	uxth	r5, r5
 800a37e:	e7c1      	b.n	800a304 <UART_RxISR_8BIT_FIFOEN+0x38>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a380:	2308      	movs	r3, #8
 800a382:	6802      	ldr	r2, [r0, #0]
 800a384:	6991      	ldr	r1, [r2, #24]
 800a386:	430b      	orrs	r3, r1
 800a388:	6193      	str	r3, [r2, #24]
 800a38a:	e7cf      	b.n	800a32c <UART_RxISR_8BIT_FIFOEN+0x60>
 800a38c:	fffffeff 	.word	0xfffffeff
 800a390:	efffffff 	.word	0xefffffff
 800a394:	0800a3fd 	.word	0x0800a3fd
 800a398:	effffffe 	.word	0xeffffffe

0800a39c <UART_RxISR_16BIT>:
{
 800a39c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a39e:	0004      	movs	r4, r0
 800a3a0:	3408      	adds	r4, #8
 800a3a2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a3a4:	6803      	ldr	r3, [r0, #0]
 800a3a6:	2a22      	cmp	r2, #34	; 0x22
 800a3a8:	d121      	bne.n	800a3ee <UART_RxISR_16BIT+0x52>
  uint16_t uhMask = huart->Mask;
 800a3aa:	0005      	movs	r5, r0
 800a3ac:	3560      	adds	r5, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3b0:	882d      	ldrh	r5, [r5, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a3b2:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800a3b4:	4029      	ands	r1, r5
 800a3b6:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 800a3b8:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 800a3ba:	3202      	adds	r2, #2
 800a3bc:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a3be:	315e      	adds	r1, #94	; 0x5e
 800a3c0:	880a      	ldrh	r2, [r1, #0]
 800a3c2:	3a01      	subs	r2, #1
 800a3c4:	b292      	uxth	r2, r2
 800a3c6:	800a      	strh	r2, [r1, #0]
    if (huart->RxXferCount == 0U)
 800a3c8:	880a      	ldrh	r2, [r1, #0]
 800a3ca:	b292      	uxth	r2, r2
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	d10d      	bne.n	800a3ec <UART_RxISR_16BIT+0x50>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3d0:	6819      	ldr	r1, [r3, #0]
 800a3d2:	4d09      	ldr	r5, [pc, #36]	; (800a3f8 <UART_RxISR_16BIT+0x5c>)
 800a3d4:	4029      	ands	r1, r5
 800a3d6:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d8:	6899      	ldr	r1, [r3, #8]
 800a3da:	3523      	adds	r5, #35	; 0x23
 800a3dc:	35ff      	adds	r5, #255	; 0xff
 800a3de:	43a9      	bics	r1, r5
 800a3e0:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a3e2:	2320      	movs	r3, #32
 800a3e4:	67e3      	str	r3, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a3e6:	66c2      	str	r2, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a3e8:	f7f9 f95e 	bl	80036a8 <HAL_UART_RxCpltCallback>
}
 800a3ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	6999      	ldr	r1, [r3, #24]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	619a      	str	r2, [r3, #24]
 800a3f6:	e7f9      	b.n	800a3ec <UART_RxISR_16BIT+0x50>
 800a3f8:	fffffedf 	.word	0xfffffedf

0800a3fc <UART_RxISR_8BIT>:
{
 800a3fc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3fe:	0004      	movs	r4, r0
 800a400:	3408      	adds	r4, #8
 800a402:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a404:	6803      	ldr	r3, [r0, #0]
 800a406:	2a22      	cmp	r2, #34	; 0x22
 800a408:	d123      	bne.n	800a452 <UART_RxISR_8BIT+0x56>
  uint16_t uhMask = huart->Mask;
 800a40a:	0002      	movs	r2, r0
 800a40c:	3260      	adds	r2, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a410:	8812      	ldrh	r2, [r2, #0]
 800a412:	4013      	ands	r3, r2
 800a414:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800a416:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 800a418:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800a41a:	6d83      	ldr	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a41c:	325e      	adds	r2, #94	; 0x5e
    huart->pRxBuffPtr++;
 800a41e:	3301      	adds	r3, #1
 800a420:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800a422:	8813      	ldrh	r3, [r2, #0]
 800a424:	3b01      	subs	r3, #1
 800a426:	b29b      	uxth	r3, r3
 800a428:	8013      	strh	r3, [r2, #0]
    if (huart->RxXferCount == 0U)
 800a42a:	8813      	ldrh	r3, [r2, #0]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10e      	bne.n	800a450 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a432:	6802      	ldr	r2, [r0, #0]
 800a434:	4d09      	ldr	r5, [pc, #36]	; (800a45c <UART_RxISR_8BIT+0x60>)
 800a436:	6811      	ldr	r1, [r2, #0]
 800a438:	4029      	ands	r1, r5
 800a43a:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43c:	6891      	ldr	r1, [r2, #8]
 800a43e:	3523      	adds	r5, #35	; 0x23
 800a440:	35ff      	adds	r5, #255	; 0xff
 800a442:	43a9      	bics	r1, r5
 800a444:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800a446:	2220      	movs	r2, #32
 800a448:	67e2      	str	r2, [r4, #124]	; 0x7c
      huart->RxISR = NULL;
 800a44a:	66c3      	str	r3, [r0, #108]	; 0x6c
      HAL_UART_RxCpltCallback(huart);
 800a44c:	f7f9 f92c 	bl	80036a8 <HAL_UART_RxCpltCallback>
}
 800a450:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a452:	2208      	movs	r2, #8
 800a454:	6999      	ldr	r1, [r3, #24]
 800a456:	430a      	orrs	r2, r1
 800a458:	619a      	str	r2, [r3, #24]
 800a45a:	e7f9      	b.n	800a450 <UART_RxISR_8BIT+0x54>
 800a45c:	fffffedf 	.word	0xfffffedf

0800a460 <event.lto_priv.181>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	0004      	movs	r4, r0
 800a464:	69c5      	ldr	r5, [r0, #28]
 800a466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a468:	1d2e      	adds	r6, r5, #4
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	782b      	ldrb	r3, [r5, #0]
 800a46e:	6900      	ldr	r0, [r0, #16]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <event.lto_priv.181+0x28>
 800a474:	0001      	movs	r1, r0
 800a476:	0030      	movs	r0, r6
 800a478:	f00b f814 	bl	80154a4 <memcpy>
 800a47c:	2300      	movs	r3, #0
 800a47e:	702b      	strb	r3, [r5, #0]
 800a480:	6820      	ldr	r0, [r4, #0]
 800a482:	6843      	ldr	r3, [r0, #4]
 800a484:	4798      	blx	r3
 800a486:	bd70      	pop	{r4, r5, r6, pc}
 800a488:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a48a:	0031      	movs	r1, r6
 800a48c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800a48e:	47a8      	blx	r5
 800a490:	e7f6      	b.n	800a480 <event.lto_priv.181+0x20>

0800a492 <reset.lto_priv.173.lto_priv.637>:
 800a492:	b510      	push	{r4, lr}
 800a494:	f7fa fc8a 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 800a498:	bd10      	pop	{r4, pc}

0800a49a <reset.lto_priv.172.lto_priv.666>:
 800a49a:	b510      	push	{r4, lr}
 800a49c:	f7fa fc86 	bl	8004dac <reset.lto_priv.171.lto_priv.258>
 800a4a0:	bd10      	pop	{r4, pc}

0800a4a2 <phase_compensate_q3_12_complex.lto_priv.667>:
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	1d83      	adds	r3, r0, #6
 800a4a6:	223e      	movs	r2, #62	; 0x3e
 800a4a8:	5e9b      	ldrsh	r3, [r3, r2]
 800a4aa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a4ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a4ae:	6900      	ldr	r0, [r0, #16]
 800a4b0:	f7fb fa22 	bl	80058f8 <do_phase_compensation_q3_12.lto_priv.259>
 800a4b4:	bd10      	pop	{r4, pc}

0800a4b6 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166>:
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4b6:	20e0      	movs	r0, #224	; 0xe0
 800a4b8:	4b17      	ldr	r3, [pc, #92]	; (800a518 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x62>)
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800a4ba:	b510      	push	{r4, lr}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a4bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a4be:	6851      	ldr	r1, [r2, #4]
 800a4c0:	4381      	bics	r1, r0
 800a4c2:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4c4:	2182      	movs	r1, #130	; 0x82
 800a4c6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a4c8:	0049      	lsls	r1, r1, #1
 800a4ca:	4288      	cmp	r0, r1
 800a4cc:	d10c      	bne.n	800a4e8 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x32>
 800a4ce:	2080      	movs	r0, #128	; 0x80
 800a4d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a4d2:	0200      	lsls	r0, r0, #8
 800a4d4:	4281      	cmp	r1, r0
 800a4d6:	d003      	beq.n	800a4e0 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x2a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a4d8:	2080      	movs	r0, #128	; 0x80
 800a4da:	00c0      	lsls	r0, r0, #3
 800a4dc:	4281      	cmp	r1, r0
 800a4de:	d103      	bne.n	800a4e8 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x32>
          __HAL_SPI_DISABLE(hspi);
 800a4e0:	2040      	movs	r0, #64	; 0x40
 800a4e2:	6811      	ldr	r1, [r2, #0]
 800a4e4:	4381      	bics	r1, r0
 800a4e6:	6011      	str	r1, [r2, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	2080      	movs	r0, #128	; 0x80
 800a4ec:	3190      	adds	r1, #144	; 0x90
 800a4ee:	6809      	ldr	r1, [r1, #0]
 800a4f0:	0180      	lsls	r0, r0, #6
 800a4f2:	4281      	cmp	r1, r0
 800a4f4:	d106      	bne.n	800a504 <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x4e>
          SPI_RESET_CRC(hspi);
 800a4f6:	6810      	ldr	r0, [r2, #0]
 800a4f8:	4c08      	ldr	r4, [pc, #32]	; (800a51c <SPI_WaitFlagStateUntilTimeout.part.0.constprop.166+0x66>)
 800a4fa:	4020      	ands	r0, r4
 800a4fc:	6010      	str	r0, [r2, #0]
 800a4fe:	6810      	ldr	r0, [r2, #0]
 800a500:	4301      	orrs	r1, r0
 800a502:	6011      	str	r1, [r2, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800a504:	001a      	movs	r2, r3
 800a506:	2101      	movs	r1, #1
 800a508:	32c5      	adds	r2, #197	; 0xc5
 800a50a:	7011      	strb	r1, [r2, #0]
        __HAL_UNLOCK(hspi);
 800a50c:	2200      	movs	r2, #0
 800a50e:	33c4      	adds	r3, #196	; 0xc4
}
 800a510:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800a512:	701a      	strb	r2, [r3, #0]
}
 800a514:	bd10      	pop	{r4, pc}
 800a516:	46c0      	nop			; (mov r8, r8)
 800a518:	20000288 	.word	0x20000288
 800a51c:	ffffdfff 	.word	0xffffdfff

0800a520 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157>:
  __HAL_LOCK(hrtc);
 800a520:	4b1c      	ldr	r3, [pc, #112]	; (800a594 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x74>)
 800a522:	2202      	movs	r2, #2
 800a524:	0019      	movs	r1, r3
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
 800a526:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 800a528:	3128      	adds	r1, #40	; 0x28
 800a52a:	780c      	ldrb	r4, [r1, #0]
 800a52c:	0010      	movs	r0, r2
 800a52e:	2c01      	cmp	r4, #1
 800a530:	d02e      	beq.n	800a590 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x70>
 800a532:	3801      	subs	r0, #1
 800a534:	7008      	strb	r0, [r1, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a536:	0019      	movs	r1, r3
 800a538:	3129      	adds	r1, #41	; 0x29
 800a53a:	700a      	strb	r2, [r1, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a53c:	21ca      	movs	r1, #202	; 0xca
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a53e:	26fa      	movs	r6, #250	; 0xfa
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a540:	2404      	movs	r4, #4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a542:	681a      	ldr	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a544:	4814      	ldr	r0, [pc, #80]	; (800a598 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x78>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a546:	6251      	str	r1, [r2, #36]	; 0x24
 800a548:	3977      	subs	r1, #119	; 0x77
 800a54a:	6251      	str	r1, [r2, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a54c:	6991      	ldr	r1, [r2, #24]
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a54e:	00b6      	lsls	r6, r6, #2
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a550:	4001      	ands	r1, r0
 800a552:	6191      	str	r1, [r2, #24]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800a554:	6991      	ldr	r1, [r2, #24]
 800a556:	4811      	ldr	r0, [pc, #68]	; (800a59c <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x7c>)
 800a558:	4001      	ands	r1, r0
 800a55a:	6191      	str	r1, [r2, #24]
 800a55c:	6add      	ldr	r5, [r3, #44]	; 0x2c
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a55e:	68d1      	ldr	r1, [r2, #12]
 800a560:	4021      	ands	r1, r4
 800a562:	d009      	beq.n	800a578 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x58>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a564:	21ff      	movs	r1, #255	; 0xff
 800a566:	6251      	str	r1, [r2, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a568:	001a      	movs	r2, r3
  __HAL_UNLOCK(hrtc);
 800a56a:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a56c:	3229      	adds	r2, #41	; 0x29
 800a56e:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a570:	3328      	adds	r3, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a572:	7011      	strb	r1, [r2, #0]
  __HAL_UNLOCK(hrtc);
 800a574:	7018      	strb	r0, [r3, #0]
 800a576:	e00b      	b.n	800a590 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x70>
 800a578:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a57a:	1b40      	subs	r0, r0, r5
 800a57c:	42b0      	cmp	r0, r6
 800a57e:	d9ee      	bls.n	800a55e <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157+0x3e>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a580:	20ff      	movs	r0, #255	; 0xff
 800a582:	6250      	str	r0, [r2, #36]	; 0x24
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a584:	001a      	movs	r2, r3
 800a586:	38fc      	subs	r0, #252	; 0xfc
 800a588:	3229      	adds	r2, #41	; 0x29
      __HAL_UNLOCK(hrtc);
 800a58a:	3328      	adds	r3, #40	; 0x28
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a58c:	7010      	strb	r0, [r2, #0]
      __HAL_UNLOCK(hrtc);
 800a58e:	7019      	strb	r1, [r3, #0]
}
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	46c0      	nop			; (mov r8, r8)
 800a594:	20000288 	.word	0x20000288
 800a598:	fffffbff 	.word	0xfffffbff
 800a59c:	ffffbfff 	.word	0xffffbfff

0800a5a0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156>:
  __HAL_LOCK(hrtc);
 800a5a0:	4a2b      	ldr	r2, [pc, #172]	; (800a650 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xb0>)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a5a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800a5a4:	0014      	movs	r4, r2
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	3428      	adds	r4, #40	; 0x28
 800a5aa:	7825      	ldrb	r5, [r4, #0]
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
 800a5ac:	0007      	movs	r7, r0
  __HAL_LOCK(hrtc);
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	2d01      	cmp	r5, #1
 800a5b2:	d04b      	beq.n	800a64c <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xac>
 800a5b4:	3801      	subs	r0, #1
 800a5b6:	7020      	strb	r0, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5b8:	0010      	movs	r0, r2
 800a5ba:	3029      	adds	r0, #41	; 0x29
 800a5bc:	7003      	strb	r3, [r0, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5be:	20ca      	movs	r0, #202	; 0xca
 800a5c0:	6813      	ldr	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5c2:	4c24      	ldr	r4, [pc, #144]	; (800a654 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xb4>)
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5c4:	6258      	str	r0, [r3, #36]	; 0x24
 800a5c6:	3877      	subs	r0, #119	; 0x77
 800a5c8:	6258      	str	r0, [r3, #36]	; 0x24
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5ca:	6998      	ldr	r0, [r3, #24]
 800a5cc:	4020      	ands	r0, r4
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a5ce:	2404      	movs	r4, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a5d0:	6198      	str	r0, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a5d2:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a5d4:	4820      	ldr	r0, [pc, #128]	; (800a658 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xb8>)
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a5d6:	4325      	orrs	r5, r4
 800a5d8:	65dd      	str	r5, [r3, #92]	; 0x5c
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a5da:	68c0      	ldr	r0, [r0, #12]
 800a5dc:	0640      	lsls	r0, r0, #25
 800a5de:	d407      	bmi.n	800a5f0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0x50>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a5e0:	0025      	movs	r5, r4
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a5e2:	24fa      	movs	r4, #250	; 0xfa
 800a5e4:	00a4      	lsls	r4, r4, #2
 800a5e6:	46a4      	mov	ip, r4
 800a5e8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800a5ea:	68dc      	ldr	r4, [r3, #12]
 800a5ec:	402c      	ands	r4, r5
 800a5ee:	d021      	beq.n	800a634 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0x94>
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a5f0:	2407      	movs	r4, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a5f2:	615f      	str	r7, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a5f4:	6998      	ldr	r0, [r3, #24]
 800a5f6:	43a0      	bics	r0, r4
 800a5f8:	6198      	str	r0, [r3, #24]
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a5fa:	6998      	ldr	r0, [r3, #24]
 800a5fc:	4301      	orrs	r1, r0
 800a5fe:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a600:	2180      	movs	r1, #128	; 0x80
 800a602:	4816      	ldr	r0, [pc, #88]	; (800a65c <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xbc>)
 800a604:	0309      	lsls	r1, r1, #12
 800a606:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 800a608:	4321      	orrs	r1, r4
 800a60a:	67c1      	str	r1, [r0, #124]	; 0x7c
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800a60c:	2180      	movs	r1, #128	; 0x80
 800a60e:	6998      	ldr	r0, [r3, #24]
 800a610:	01c9      	lsls	r1, r1, #7
 800a612:	4301      	orrs	r1, r0
 800a614:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a616:	2180      	movs	r1, #128	; 0x80
 800a618:	6998      	ldr	r0, [r3, #24]
 800a61a:	00c9      	lsls	r1, r1, #3
 800a61c:	4301      	orrs	r1, r0
 800a61e:	6199      	str	r1, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a620:	21ff      	movs	r1, #255	; 0xff
 800a622:	6259      	str	r1, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800a624:	0013      	movs	r3, r2
  __HAL_UNLOCK(hrtc);
 800a626:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY;
 800a628:	3329      	adds	r3, #41	; 0x29
 800a62a:	39fe      	subs	r1, #254	; 0xfe
  __HAL_UNLOCK(hrtc);
 800a62c:	3228      	adds	r2, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800a62e:	7019      	strb	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800a630:	7010      	strb	r0, [r2, #0]
 800a632:	e00b      	b.n	800a64c <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0xac>
 800a634:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a636:	1a36      	subs	r6, r6, r0
 800a638:	4566      	cmp	r6, ip
 800a63a:	d9d6      	bls.n	800a5ea <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156+0x4a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a63c:	21ff      	movs	r1, #255	; 0xff
 800a63e:	6259      	str	r1, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a640:	0013      	movs	r3, r2
 800a642:	2003      	movs	r0, #3
 800a644:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800a646:	3228      	adds	r2, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a648:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800a64a:	7014      	strb	r4, [r2, #0]
}
 800a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a64e:	46c0      	nop			; (mov r8, r8)
 800a650:	20000288 	.word	0x20000288
 800a654:	fffffbff 	.word	0xfffffbff
 800a658:	40002800 	.word	0x40002800
 800a65c:	40021804 	.word	0x40021804

0800a660 <acc_integration_sleep_us.constprop.154>:
	rtc_wakeup_triggered = false;
 800a660:	2300      	movs	r3, #0
void acc_integration_sleep_us(uint32_t time_usec)
 800a662:	b510      	push	{r4, lr}
	rtc_wakeup_triggered = false;
 800a664:	4c0e      	ldr	r4, [pc, #56]	; (800a6a0 <acc_integration_sleep_us.constprop.154+0x40>)
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a666:	2103      	movs	r1, #3
	rtc_wakeup_triggered = false;
 800a668:	344c      	adds	r4, #76	; 0x4c
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a66a:	201f      	movs	r0, #31
	rtc_wakeup_triggered = false;
 800a66c:	7023      	strb	r3, [r4, #0]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, wakeup_clock) != HAL_OK)
 800a66e:	f7ff ff97 	bl	800a5a0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156>
	while (!rtc_wakeup_triggered)
 800a672:	7822      	ldrb	r2, [r4, #0]
 800a674:	2a00      	cmp	r2, #0
 800a676:	d004      	beq.n	800a682 <acc_integration_sleep_us.constprop.154+0x22>
	rtc_wakeup_triggered = false;
 800a678:	2200      	movs	r2, #0
 800a67a:	7022      	strb	r2, [r4, #0]
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 800a67c:	f7ff ff50 	bl	800a520 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157>
}
 800a680:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800a682:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800a684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a688:	f3bf 8f6f 	isb	sy
		if (!rtc_wakeup_triggered)
 800a68c:	7822      	ldrb	r2, [r4, #0]
 800a68e:	2a00      	cmp	r2, #0
 800a690:	d100      	bne.n	800a694 <acc_integration_sleep_us.constprop.154+0x34>
			__WFI();
 800a692:	bf30      	wfi
  __ASM volatile ("cpsie i" : : : "memory");
 800a694:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
 800a696:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	e7e8      	b.n	800a672 <acc_integration_sleep_us.constprop.154+0x12>
 800a6a0:	20000308 	.word	0x20000308

0800a6a4 <HAL_GPIO_DeInit.constprop.151>:
        EXTI->IMR1 &= ~(iocurrent);
 800a6a4:	4937      	ldr	r1, [pc, #220]	; (800a784 <HAL_GPIO_DeInit.constprop.151+0xe0>)
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a6a6:	b5f0      	push	{r4, r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800a6a8:	468c      	mov	ip, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a6aa:	4645      	mov	r5, r8
 800a6ac:	46de      	mov	lr, fp
 800a6ae:	4657      	mov	r7, sl
 800a6b0:	464e      	mov	r6, r9
        EXTI->EMR1 &= ~(iocurrent);
 800a6b2:	4935      	ldr	r1, [pc, #212]	; (800a788 <HAL_GPIO_DeInit.constprop.151+0xe4>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a6b4:	22a0      	movs	r2, #160	; 0xa0
  uint32_t position = 0x00u;
 800a6b6:	2300      	movs	r3, #0
        EXTI->EMR1 &= ~(iocurrent);
 800a6b8:	4688      	mov	r8, r1
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
 800a6ba:	b5e0      	push	{r5, r6, r7, lr}
        EXTI->IMR1 &= ~(iocurrent);
 800a6bc:	4d33      	ldr	r5, [pc, #204]	; (800a78c <HAL_GPIO_DeInit.constprop.151+0xe8>)
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a6be:	05d2      	lsls	r2, r2, #23
  while ((GPIO_Pin >> position) != 0x00u)
 800a6c0:	0001      	movs	r1, r0
 800a6c2:	40d9      	lsrs	r1, r3
 800a6c4:	d105      	bne.n	800a6d2 <HAL_GPIO_DeInit.constprop.151+0x2e>
}
 800a6c6:	bc3c      	pop	{r2, r3, r4, r5}
 800a6c8:	4690      	mov	r8, r2
 800a6ca:	4699      	mov	r9, r3
 800a6cc:	46a2      	mov	sl, r4
 800a6ce:	46ab      	mov	fp, r5
 800a6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	4099      	lsls	r1, r3
 800a6d6:	000c      	movs	r4, r1
 800a6d8:	4689      	mov	r9, r1
 800a6da:	4004      	ands	r4, r0
    if (iocurrent != 0x00u)
 800a6dc:	d04f      	beq.n	800a77e <HAL_GPIO_DeInit.constprop.151+0xda>
 800a6de:	4f2b      	ldr	r7, [pc, #172]	; (800a78c <HAL_GPIO_DeInit.constprop.151+0xe8>)
      tmp = EXTI->EXTICR[position >> 2u];
 800a6e0:	0899      	lsrs	r1, r3, #2
 800a6e2:	46ba      	mov	sl, r7
 800a6e4:	0089      	lsls	r1, r1, #2
 800a6e6:	4451      	add	r1, sl
 800a6e8:	6e0f      	ldr	r7, [r1, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800a6ea:	2603      	movs	r6, #3
      tmp = EXTI->EXTICR[position >> 2u];
 800a6ec:	46ba      	mov	sl, r7
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800a6ee:	001f      	movs	r7, r3
 800a6f0:	4037      	ands	r7, r6
 800a6f2:	40b7      	lsls	r7, r6
 800a6f4:	46bb      	mov	fp, r7
 800a6f6:	270f      	movs	r7, #15
 800a6f8:	465e      	mov	r6, fp
 800a6fa:	40b7      	lsls	r7, r6
 800a6fc:	46bb      	mov	fp, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800a6fe:	003e      	movs	r6, r7
 800a700:	4657      	mov	r7, sl
 800a702:	423e      	tst	r6, r7
 800a704:	d117      	bne.n	800a736 <HAL_GPIO_DeInit.constprop.151+0x92>
        EXTI->IMR1 &= ~(iocurrent);
 800a706:	4666      	mov	r6, ip
 800a708:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800a70a:	43e4      	mvns	r4, r4
 800a70c:	0037      	movs	r7, r6
 800a70e:	4666      	mov	r6, ip
 800a710:	4027      	ands	r7, r4
 800a712:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 800a714:	4646      	mov	r6, r8
 800a716:	6ff6      	ldr	r6, [r6, #124]	; 0x7c
 800a718:	0037      	movs	r7, r6
 800a71a:	4646      	mov	r6, r8
 800a71c:	4027      	ands	r7, r4
 800a71e:	67f7      	str	r7, [r6, #124]	; 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 800a720:	682e      	ldr	r6, [r5, #0]
 800a722:	0037      	movs	r7, r6
 800a724:	4027      	ands	r7, r4
 800a726:	602f      	str	r7, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a728:	686e      	ldr	r6, [r5, #4]
 800a72a:	4034      	ands	r4, r6
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800a72c:	465e      	mov	r6, fp
        EXTI->FTSR1 &= ~(iocurrent);
 800a72e:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800a730:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 800a732:	43b4      	bics	r4, r6
 800a734:	660c      	str	r4, [r1, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a736:	2703      	movs	r7, #3
 800a738:	26a0      	movs	r6, #160	; 0xa0
 800a73a:	005c      	lsls	r4, r3, #1
 800a73c:	40a7      	lsls	r7, r4
 800a73e:	05f6      	lsls	r6, r6, #23
 800a740:	6811      	ldr	r1, [r2, #0]
 800a742:	46b2      	mov	sl, r6
 800a744:	4339      	orrs	r1, r7
 800a746:	003c      	movs	r4, r7
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a748:	2707      	movs	r7, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a74a:	6011      	str	r1, [r2, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a74c:	08d9      	lsrs	r1, r3, #3
 800a74e:	0089      	lsls	r1, r1, #2
 800a750:	4451      	add	r1, sl
 800a752:	6a0e      	ldr	r6, [r1, #32]
 800a754:	401f      	ands	r7, r3
 800a756:	46b2      	mov	sl, r6
 800a758:	00be      	lsls	r6, r7, #2
 800a75a:	270f      	movs	r7, #15
 800a75c:	40b7      	lsls	r7, r6
 800a75e:	46bb      	mov	fp, r7
 800a760:	4657      	mov	r7, sl
 800a762:	465e      	mov	r6, fp
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a764:	43e4      	mvns	r4, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a766:	43b7      	bics	r7, r6
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a768:	464e      	mov	r6, r9
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a76a:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a76c:	6891      	ldr	r1, [r2, #8]
 800a76e:	4021      	ands	r1, r4
 800a770:	6091      	str	r1, [r2, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a772:	6851      	ldr	r1, [r2, #4]
 800a774:	43b1      	bics	r1, r6
 800a776:	6051      	str	r1, [r2, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a778:	68d1      	ldr	r1, [r2, #12]
 800a77a:	400c      	ands	r4, r1
 800a77c:	60d4      	str	r4, [r2, #12]
    position++;
 800a77e:	3301      	adds	r3, #1
 800a780:	e79e      	b.n	800a6c0 <HAL_GPIO_DeInit.constprop.151+0x1c>
 800a782:	46c0      	nop			; (mov r8, r8)
 800a784:	40021804 	.word	0x40021804
 800a788:	40021808 	.word	0x40021808
 800a78c:	40021800 	.word	0x40021800

0800a790 <HAL_UART_Transmit_IT.constprop.128>:
  if (huart->gState == HAL_UART_STATE_READY)
 800a790:	4b2b      	ldr	r3, [pc, #172]	; (800a840 <HAL_UART_Transmit_IT.constprop.128+0xb0>)
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a792:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800a794:	1d1a      	adds	r2, r3, #4
 800a796:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a798:	0004      	movs	r4, r0
    return HAL_BUSY;
 800a79a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800a79c:	2a20      	cmp	r2, #32
 800a79e:	d13b      	bne.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
      return HAL_ERROR;
 800a7a0:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a7a2:	2c00      	cmp	r4, #0
 800a7a4:	d038      	beq.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
 800a7a6:	2900      	cmp	r1, #0
 800a7a8:	d036      	beq.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7aa:	2580      	movs	r5, #128	; 0x80
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	016d      	lsls	r5, r5, #5
 800a7b0:	42aa      	cmp	r2, r5
 800a7b2:	d104      	bne.n	800a7be <HAL_UART_Transmit_IT.constprop.128+0x2e>
 800a7b4:	691d      	ldr	r5, [r3, #16]
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	d101      	bne.n	800a7be <HAL_UART_Transmit_IT.constprop.128+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a7ba:	4204      	tst	r4, r0
 800a7bc:	d12c      	bne.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
    __HAL_LOCK(huart);
 800a7be:	0018      	movs	r0, r3
 800a7c0:	307c      	adds	r0, #124	; 0x7c
 800a7c2:	7805      	ldrb	r5, [r0, #0]
    return HAL_BUSY;
 800a7c4:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800a7c6:	2d01      	cmp	r5, #1
 800a7c8:	d026      	beq.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
    huart->TxXferSize  = Size;
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	3054      	adds	r0, #84	; 0x54
 800a7ce:	8001      	strh	r1, [r0, #0]
    huart->TxXferCount = Size;
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	3056      	adds	r0, #86	; 0x56
 800a7d4:	8001      	strh	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d6:	0019      	movs	r1, r3
 800a7d8:	2000      	movs	r0, #0
 800a7da:	3188      	adds	r1, #136	; 0x88
 800a7dc:	6008      	str	r0, [r1, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7de:	1d19      	adds	r1, r3, #4
 800a7e0:	3021      	adds	r0, #33	; 0x21
 800a7e2:	67c8      	str	r0, [r1, #124]	; 0x7c
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a7e4:	2180      	movs	r1, #128	; 0x80
 800a7e6:	2080      	movs	r0, #128	; 0x80
    huart->pTxBuffPtr  = pData;
 800a7e8:	651c      	str	r4, [r3, #80]	; 0x50
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a7ea:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800a7ec:	0589      	lsls	r1, r1, #22
 800a7ee:	0140      	lsls	r0, r0, #5
 800a7f0:	428c      	cmp	r4, r1
 800a7f2:	d112      	bne.n	800a81a <HAL_UART_Transmit_IT.constprop.128+0x8a>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a7f4:	4913      	ldr	r1, [pc, #76]	; (800a844 <HAL_UART_Transmit_IT.constprop.128+0xb4>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7f6:	4282      	cmp	r2, r0
 800a7f8:	d103      	bne.n	800a802 <HAL_UART_Transmit_IT.constprop.128+0x72>
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	d100      	bne.n	800a802 <HAL_UART_Transmit_IT.constprop.128+0x72>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a800:	4911      	ldr	r1, [pc, #68]	; (800a848 <HAL_UART_Transmit_IT.constprop.128+0xb8>)
      __HAL_UNLOCK(huart);
 800a802:	001a      	movs	r2, r3
 800a804:	2000      	movs	r0, #0
 800a806:	327c      	adds	r2, #124	; 0x7c
 800a808:	6719      	str	r1, [r3, #112]	; 0x70
 800a80a:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	2380      	movs	r3, #128	; 0x80
 800a810:	6891      	ldr	r1, [r2, #8]
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	430b      	orrs	r3, r1
 800a816:	6093      	str	r3, [r2, #8]
}
 800a818:	bd30      	pop	{r4, r5, pc}
        huart->TxISR = UART_TxISR_8BIT;
 800a81a:	490c      	ldr	r1, [pc, #48]	; (800a84c <HAL_UART_Transmit_IT.constprop.128+0xbc>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a81c:	4282      	cmp	r2, r0
 800a81e:	d103      	bne.n	800a828 <HAL_UART_Transmit_IT.constprop.128+0x98>
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	2a00      	cmp	r2, #0
 800a824:	d100      	bne.n	800a828 <HAL_UART_Transmit_IT.constprop.128+0x98>
        huart->TxISR = UART_TxISR_16BIT;
 800a826:	490a      	ldr	r1, [pc, #40]	; (800a850 <HAL_UART_Transmit_IT.constprop.128+0xc0>)
      __HAL_UNLOCK(huart);
 800a828:	001a      	movs	r2, r3
 800a82a:	2000      	movs	r0, #0
 800a82c:	327c      	adds	r2, #124	; 0x7c
 800a82e:	6719      	str	r1, [r3, #112]	; 0x70
 800a830:	7010      	strb	r0, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	2380      	movs	r3, #128	; 0x80
 800a836:	6811      	ldr	r1, [r2, #0]
 800a838:	430b      	orrs	r3, r1
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	e7ec      	b.n	800a818 <HAL_UART_Transmit_IT.constprop.128+0x88>
 800a83e:	46c0      	nop			; (mov r8, r8)
 800a840:	200005a4 	.word	0x200005a4
 800a844:	08009c39 	.word	0x08009c39
 800a848:	08009bdd 	.word	0x08009bdd
 800a84c:	08009cd1 	.word	0x08009cd1
 800a850:	08009c91 	.word	0x08009c91

0800a854 <RTC_ExitInitMode.constprop.115>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a854:	2280      	movs	r2, #128	; 0x80
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
 800a856:	b510      	push	{r4, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a858:	4c10      	ldr	r4, [pc, #64]	; (800a89c <RTC_ExitInitMode.constprop.115+0x48>)
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	4393      	bics	r3, r2
 800a85e:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a860:	69a3      	ldr	r3, [r4, #24]
 800a862:	3a60      	subs	r2, #96	; 0x60
 800a864:	4213      	tst	r3, r2
 800a866:	d108      	bne.n	800a87a <RTC_ExitInitMode.constprop.115+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a868:	f7ff f940 	bl	8009aec <HAL_RTC_WaitForSynchro.constprop.117>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d003      	beq.n	800a878 <RTC_ExitInitMode.constprop.115+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a870:	2003      	movs	r0, #3
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <RTC_ExitInitMode.constprop.115+0x4c>)
 800a874:	3329      	adds	r3, #41	; 0x29
 800a876:	7018      	strb	r0, [r3, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 800a878:	bd10      	pop	{r4, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a87a:	69a3      	ldr	r3, [r4, #24]
 800a87c:	4393      	bics	r3, r2
 800a87e:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a880:	f7ff f934 	bl	8009aec <HAL_RTC_WaitForSynchro.constprop.117>
 800a884:	2800      	cmp	r0, #0
 800a886:	d003      	beq.n	800a890 <RTC_ExitInitMode.constprop.115+0x3c>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a888:	2003      	movs	r0, #3
 800a88a:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <RTC_ExitInitMode.constprop.115+0x4c>)
 800a88c:	3329      	adds	r3, #41	; 0x29
 800a88e:	7018      	strb	r0, [r3, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a890:	2320      	movs	r3, #32
 800a892:	69a2      	ldr	r2, [r4, #24]
 800a894:	4313      	orrs	r3, r2
 800a896:	61a3      	str	r3, [r4, #24]
 800a898:	e7ee      	b.n	800a878 <RTC_ExitInitMode.constprop.115+0x24>
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	40002800 	.word	0x40002800
 800a8a0:	20000288 	.word	0x20000288

0800a8a4 <RTC_EnterInitMode.constprop.114>:
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a8a4:	2140      	movs	r1, #64	; 0x40
 800a8a6:	4a10      	ldr	r2, [pc, #64]	; (800a8e8 <RTC_EnterInitMode.constprop.114+0x44>)
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
 800a8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a8aa:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;  
 800a8ac:	2000      	movs	r0, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800a8ae:	68dc      	ldr	r4, [r3, #12]
 800a8b0:	420c      	tst	r4, r1
 800a8b2:	d10f      	bne.n	800a8d4 <RTC_EnterInitMode.constprop.114+0x30>
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a8b4:	2480      	movs	r4, #128	; 0x80
 800a8b6:	68dd      	ldr	r5, [r3, #12]
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8b8:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800a8ba:	432c      	orrs	r4, r5
 800a8bc:	60dc      	str	r4, [r3, #12]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8be:	2429      	movs	r4, #41	; 0x29
 800a8c0:	46a4      	mov	ip, r4
 800a8c2:	2503      	movs	r5, #3
 800a8c4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8c6:	00bf      	lsls	r7, r7, #2
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8c8:	4494      	add	ip, r2
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a8ca:	68dc      	ldr	r4, [r3, #12]
 800a8cc:	420c      	tst	r4, r1
 800a8ce:	d101      	bne.n	800a8d4 <RTC_EnterInitMode.constprop.114+0x30>
 800a8d0:	2803      	cmp	r0, #3
 800a8d2:	d100      	bne.n	800a8d6 <RTC_EnterInitMode.constprop.114+0x32>
}
 800a8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8d6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800a8d8:	1ba4      	subs	r4, r4, r6
 800a8da:	42bc      	cmp	r4, r7
 800a8dc:	d9f5      	bls.n	800a8ca <RTC_EnterInitMode.constprop.114+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a8de:	4660      	mov	r0, ip
 800a8e0:	7005      	strb	r5, [r0, #0]
        status = HAL_TIMEOUT;
 800a8e2:	0028      	movs	r0, r5
 800a8e4:	e7f1      	b.n	800a8ca <RTC_EnterInitMode.constprop.114+0x26>
 800a8e6:	46c0      	nop			; (mov r8, r8)
 800a8e8:	20000288 	.word	0x20000288

0800a8ec <FLASH_WaitForLastOperation.constprop.101>:
  uint32_t error;
  uint32_t eccerr;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 800a8ec:	23fa      	movs	r3, #250	; 0xfa
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	469c      	mov	ip, r3

  /* Wait if any operation is ongoing */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a8f2:	4b19      	ldr	r3, [pc, #100]	; (800a958 <FLASH_WaitForLastOperation.constprop.101+0x6c>)
 800a8f4:	2180      	movs	r1, #128	; 0x80
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
 800a8f6:	b530      	push	{r4, r5, lr}
 800a8f8:	001d      	movs	r5, r3
 800a8fa:	4c18      	ldr	r4, [pc, #96]	; (800a95c <FLASH_WaitForLastOperation.constprop.101+0x70>)
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a8fc:	0249      	lsls	r1, r1, #9
 800a8fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t timeout = HAL_GetTick() + Timeout;
 800a900:	4462      	add	r2, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0x00U)
 800a902:	6918      	ldr	r0, [r3, #16]
 800a904:	4208      	tst	r0, r1
 800a906:	d111      	bne.n	800a92c <FLASH_WaitForLastOperation.constprop.101+0x40>

  /* Clear SR register */
  FLASH->SR = FLASH_FLAG_SR_CLEAR;

  /* Update error with ECC error value */
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a908:	2080      	movs	r0, #128	; 0x80
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800a90a:	691a      	ldr	r2, [r3, #16]
 800a90c:	4914      	ldr	r1, [pc, #80]	; (800a960 <FLASH_WaitForLastOperation.constprop.101+0x74>)
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a90e:	05c0      	lsls	r0, r0, #23
  error = (FLASH->SR & FLASH_FLAG_SR_ERROR);
 800a910:	400a      	ands	r2, r1
  FLASH->SR = FLASH_FLAG_SR_CLEAR;
 800a912:	4914      	ldr	r1, [pc, #80]	; (800a964 <FLASH_WaitForLastOperation.constprop.101+0x78>)
 800a914:	6119      	str	r1, [r3, #16]
  eccerr = (FLASH->ECCR & FLASH_FLAG_ECCC);
 800a916:	6999      	ldr	r1, [r3, #24]
 800a918:	4001      	ands	r1, r0

  if(eccerr != 0x00u)
 800a91a:	d00c      	beq.n	800a936 <FLASH_WaitForLastOperation.constprop.101+0x4a>
  {
    FLASH->ECCR |= eccerr;
 800a91c:	6998      	ldr	r0, [r3, #24]
    error |= eccerr;
 800a91e:	430a      	orrs	r2, r1
    FLASH->ECCR |= eccerr;
 800a920:	4308      	orrs	r0, r1
 800a922:	6198      	str	r0, [r3, #24]
  }

  if (error != 0x00U)
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800a924:	4b10      	ldr	r3, [pc, #64]	; (800a968 <FLASH_WaitForLastOperation.constprop.101+0x7c>)

    return HAL_ERROR;
 800a926:	2001      	movs	r0, #1
    pFlash.ErrorCode = error;
 800a928:	655a      	str	r2, [r3, #84]	; 0x54
 800a92a:	e003      	b.n	800a934 <FLASH_WaitForLastOperation.constprop.101+0x48>
 800a92c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800a92e:	4282      	cmp	r2, r0
 800a930:	d8e7      	bhi.n	800a902 <FLASH_WaitForLastOperation.constprop.101+0x16>
      return HAL_TIMEOUT;
 800a932:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
}
 800a934:	bd30      	pop	{r4, r5, pc}
  if (error != 0x00U)
 800a936:	2a00      	cmp	r2, #0
 800a938:	d1f4      	bne.n	800a924 <FLASH_WaitForLastOperation.constprop.101+0x38>
  timeout = HAL_GetTick() + Timeout;
 800a93a:	22fa      	movs	r2, #250	; 0xfa
 800a93c:	0092      	lsls	r2, r2, #2
 800a93e:	4694      	mov	ip, r2
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800a940:	2280      	movs	r2, #128	; 0x80
 800a942:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a944:	02d2      	lsls	r2, r2, #11
  timeout = HAL_GetTick() + Timeout;
 800a946:	4463      	add	r3, ip
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY) != 0x00U)
 800a948:	6928      	ldr	r0, [r5, #16]
 800a94a:	4010      	ands	r0, r2
 800a94c:	d0f2      	beq.n	800a934 <FLASH_WaitForLastOperation.constprop.101+0x48>
 800a94e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    if (HAL_GetTick() >= timeout)
 800a950:	428b      	cmp	r3, r1
 800a952:	d8f9      	bhi.n	800a948 <FLASH_WaitForLastOperation.constprop.101+0x5c>
 800a954:	e7ed      	b.n	800a932 <FLASH_WaitForLastOperation.constprop.101+0x46>
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	40022000 	.word	0x40022000
 800a95c:	20000288 	.word	0x20000288
 800a960:	0000c3fa 	.word	0x0000c3fa
 800a964:	0000c3fb 	.word	0x0000c3fb
 800a968:	20000308 	.word	0x20000308

0800a96c <HAL_UART_Receive_IT.constprop.89>:
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a96c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800a96e:	0006      	movs	r6, r0
 800a970:	3608      	adds	r6, #8
 800a972:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 800a974:	0003      	movs	r3, r0
    return HAL_BUSY;
 800a976:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800a978:	2a20      	cmp	r2, #32
 800a97a:	d154      	bne.n	800aa26 <HAL_UART_Receive_IT.constprop.89+0xba>
      return HAL_ERROR;
 800a97c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800a97e:	2900      	cmp	r1, #0
 800a980:	d051      	beq.n	800aa26 <HAL_UART_Receive_IT.constprop.89+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a982:	2280      	movs	r2, #128	; 0x80
 800a984:	689c      	ldr	r4, [r3, #8]
 800a986:	0152      	lsls	r2, r2, #5
 800a988:	4294      	cmp	r4, r2
 800a98a:	d106      	bne.n	800a99a <HAL_UART_Receive_IT.constprop.89+0x2e>
 800a98c:	691a      	ldr	r2, [r3, #16]
 800a98e:	2a00      	cmp	r2, #0
 800a990:	d103      	bne.n	800a99a <HAL_UART_Receive_IT.constprop.89+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a992:	4a39      	ldr	r2, [pc, #228]	; (800aa78 <HAL_UART_Receive_IT.constprop.89+0x10c>)
 800a994:	3268      	adds	r2, #104	; 0x68
 800a996:	4202      	tst	r2, r0
 800a998:	d145      	bne.n	800aa26 <HAL_UART_Receive_IT.constprop.89+0xba>
    __HAL_LOCK(huart);
 800a99a:	001d      	movs	r5, r3
 800a99c:	357c      	adds	r5, #124	; 0x7c
 800a99e:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800a9a0:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800a9a2:	2a01      	cmp	r2, #1
 800a9a4:	d03f      	beq.n	800aa26 <HAL_UART_Receive_IT.constprop.89+0xba>
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	702a      	strb	r2, [r5, #0]
    huart->pRxBuffPtr  = pData;
 800a9aa:	4a33      	ldr	r2, [pc, #204]	; (800aa78 <HAL_UART_Receive_IT.constprop.89+0x10c>)
    huart->RxISR       = NULL;
 800a9ac:	2000      	movs	r0, #0
    huart->pRxBuffPtr  = pData;
 800a9ae:	3268      	adds	r2, #104	; 0x68
 800a9b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800a9b2:	001a      	movs	r2, r3
    UART_MASK_COMPUTATION(huart);
 800a9b4:	2780      	movs	r7, #128	; 0x80
    huart->RxXferSize  = Size;
 800a9b6:	325c      	adds	r2, #92	; 0x5c
 800a9b8:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount = Size;
 800a9ba:	8051      	strh	r1, [r2, #2]
    UART_MASK_COMPUTATION(huart);
 800a9bc:	017f      	lsls	r7, r7, #5
    huart->RxISR       = NULL;
 800a9be:	66d8      	str	r0, [r3, #108]	; 0x6c
 800a9c0:	3204      	adds	r2, #4
    UART_MASK_COMPUTATION(huart);
 800a9c2:	42bc      	cmp	r4, r7
 800a9c4:	d133      	bne.n	800aa2e <HAL_UART_Receive_IT.constprop.89+0xc2>
 800a9c6:	6918      	ldr	r0, [r3, #16]
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	d12d      	bne.n	800aa28 <HAL_UART_Receive_IT.constprop.89+0xbc>
 800a9cc:	482b      	ldr	r0, [pc, #172]	; (800aa7c <HAL_UART_Receive_IT.constprop.89+0x110>)
 800a9ce:	8010      	strh	r0, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d0:	001a      	movs	r2, r3
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	3288      	adds	r2, #136	; 0x88
 800a9d6:	6010      	str	r0, [r2, #0]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a9d8:	2222      	movs	r2, #34	; 0x22
 800a9da:	67f2      	str	r2, [r6, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	3001      	adds	r0, #1
 800a9e0:	6896      	ldr	r6, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a9e2:	6e5f      	ldr	r7, [r3, #100]	; 0x64
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e4:	4330      	orrs	r0, r6
 800a9e6:	6090      	str	r0, [r2, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a9e8:	2680      	movs	r6, #128	; 0x80
 800a9ea:	2080      	movs	r0, #128	; 0x80
 800a9ec:	05b6      	lsls	r6, r6, #22
 800a9ee:	0140      	lsls	r0, r0, #5
 800a9f0:	42b7      	cmp	r7, r6
 800a9f2:	d130      	bne.n	800aa56 <HAL_UART_Receive_IT.constprop.89+0xea>
 800a9f4:	001e      	movs	r6, r3
 800a9f6:	3668      	adds	r6, #104	; 0x68
 800a9f8:	8836      	ldrh	r6, [r6, #0]
 800a9fa:	428e      	cmp	r6, r1
 800a9fc:	d82b      	bhi.n	800aa56 <HAL_UART_Receive_IT.constprop.89+0xea>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a9fe:	4920      	ldr	r1, [pc, #128]	; (800aa80 <HAL_UART_Receive_IT.constprop.89+0x114>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa00:	4284      	cmp	r4, r0
 800aa02:	d103      	bne.n	800aa0c <HAL_UART_Receive_IT.constprop.89+0xa0>
 800aa04:	6918      	ldr	r0, [r3, #16]
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d100      	bne.n	800aa0c <HAL_UART_Receive_IT.constprop.89+0xa0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aa0a:	491e      	ldr	r1, [pc, #120]	; (800aa84 <HAL_UART_Receive_IT.constprop.89+0x118>)
      __HAL_UNLOCK(huart);
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa10:	2380      	movs	r3, #128	; 0x80
      __HAL_UNLOCK(huart);
 800aa12:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa14:	6811      	ldr	r1, [r2, #0]
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	430b      	orrs	r3, r1
 800aa1a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800aa1c:	2380      	movs	r3, #128	; 0x80
 800aa1e:	6891      	ldr	r1, [r2, #8]
 800aa20:	055b      	lsls	r3, r3, #21
 800aa22:	430b      	orrs	r3, r1
 800aa24:	6093      	str	r3, [r2, #8]
}
 800aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_MASK_COMPUTATION(huart);
 800aa28:	20ff      	movs	r0, #255	; 0xff
 800aa2a:	8010      	strh	r0, [r2, #0]
 800aa2c:	e7d0      	b.n	800a9d0 <HAL_UART_Receive_IT.constprop.89+0x64>
 800aa2e:	2c00      	cmp	r4, #0
 800aa30:	d105      	bne.n	800aa3e <HAL_UART_Receive_IT.constprop.89+0xd2>
 800aa32:	6918      	ldr	r0, [r3, #16]
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d0f7      	beq.n	800aa28 <HAL_UART_Receive_IT.constprop.89+0xbc>
 800aa38:	207f      	movs	r0, #127	; 0x7f
 800aa3a:	8010      	strh	r0, [r2, #0]
 800aa3c:	e7c8      	b.n	800a9d0 <HAL_UART_Receive_IT.constprop.89+0x64>
 800aa3e:	2780      	movs	r7, #128	; 0x80
 800aa40:	057f      	lsls	r7, r7, #21
 800aa42:	42bc      	cmp	r4, r7
 800aa44:	d105      	bne.n	800aa52 <HAL_UART_Receive_IT.constprop.89+0xe6>
 800aa46:	6918      	ldr	r0, [r3, #16]
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	d0f5      	beq.n	800aa38 <HAL_UART_Receive_IT.constprop.89+0xcc>
 800aa4c:	203f      	movs	r0, #63	; 0x3f
 800aa4e:	8010      	strh	r0, [r2, #0]
 800aa50:	e7be      	b.n	800a9d0 <HAL_UART_Receive_IT.constprop.89+0x64>
 800aa52:	8010      	strh	r0, [r2, #0]
 800aa54:	e7bc      	b.n	800a9d0 <HAL_UART_Receive_IT.constprop.89+0x64>
        huart->RxISR = UART_RxISR_8BIT;
 800aa56:	490c      	ldr	r1, [pc, #48]	; (800aa88 <HAL_UART_Receive_IT.constprop.89+0x11c>)
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa58:	4284      	cmp	r4, r0
 800aa5a:	d103      	bne.n	800aa64 <HAL_UART_Receive_IT.constprop.89+0xf8>
 800aa5c:	6918      	ldr	r0, [r3, #16]
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d100      	bne.n	800aa64 <HAL_UART_Receive_IT.constprop.89+0xf8>
        huart->RxISR = UART_RxISR_16BIT;
 800aa62:	490a      	ldr	r1, [pc, #40]	; (800aa8c <HAL_UART_Receive_IT.constprop.89+0x120>)
      __HAL_UNLOCK(huart);
 800aa64:	2000      	movs	r0, #0
 800aa66:	66d9      	str	r1, [r3, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa68:	2390      	movs	r3, #144	; 0x90
      __HAL_UNLOCK(huart);
 800aa6a:	7028      	strb	r0, [r5, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800aa6c:	6811      	ldr	r1, [r2, #0]
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	430b      	orrs	r3, r1
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	e7d7      	b.n	800aa26 <HAL_UART_Receive_IT.constprop.89+0xba>
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	20000308 	.word	0x20000308
 800aa7c:	000001ff 	.word	0x000001ff
 800aa80:	0800a2cd 	.word	0x0800a2cd
 800aa84:	0800a201 	.word	0x0800a201
 800aa88:	0800a3fd 	.word	0x0800a3fd
 800aa8c:	0800a39d 	.word	0x0800a39d

0800aa90 <acc_service_get_next.constprop.80>:
 800aa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa92:	46c6      	mov	lr, r8
 800aa94:	000e      	movs	r6, r1
 800aa96:	b500      	push	{lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	0005      	movs	r5, r0
 800aa9c:	f7f7 ffa5 	bl	80029ea <acc_service_handle_valid>
 800aaa0:	7eb4      	ldrb	r4, [r6, #26]
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	d011      	beq.n	800aaca <acc_service_get_next.constprop.80+0x3a>
 800aaa6:	6873      	ldr	r3, [r6, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <acc_service_get_next.constprop.80+0x22>
 800aaac:	68f3      	ldr	r3, [r6, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d115      	bne.n	800aade <acc_service_get_next.constprop.80+0x4e>
 800aab2:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <acc_service_get_next.constprop.80+0xb4>)
 800aab4:	4a24      	ldr	r2, [pc, #144]	; (800ab48 <acc_service_get_next.constprop.80+0xb8>)
 800aab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aab8:	4924      	ldr	r1, [pc, #144]	; (800ab4c <acc_service_get_next.constprop.80+0xbc>)
 800aaba:	2000      	movs	r0, #0
 800aabc:	4798      	blx	r3
 800aabe:	2400      	movs	r4, #0
 800aac0:	0020      	movs	r0, r4
 800aac2:	b002      	add	sp, #8
 800aac4:	bc04      	pop	{r2}
 800aac6:	4690      	mov	r8, r2
 800aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaca:	68b3      	ldr	r3, [r6, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <acc_service_get_next.constprop.80+0x4e>
 800aad0:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <acc_service_get_next.constprop.80+0xb4>)
 800aad2:	4a1f      	ldr	r2, [pc, #124]	; (800ab50 <acc_service_get_next.constprop.80+0xc0>)
 800aad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad6:	491d      	ldr	r1, [pc, #116]	; (800ab4c <acc_service_get_next.constprop.80+0xbc>)
 800aad8:	0020      	movs	r0, r4
 800aada:	4798      	blx	r3
 800aadc:	e7f0      	b.n	800aac0 <acc_service_get_next.constprop.80+0x30>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d101      	bne.n	800aae6 <acc_service_get_next.constprop.80+0x56>
 800aae2:	2400      	movs	r4, #0
 800aae4:	e7ec      	b.n	800aac0 <acc_service_get_next.constprop.80+0x30>
 800aae6:	7a2b      	ldrb	r3, [r5, #8]
 800aae8:	7832      	ldrb	r2, [r6, #0]
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d007      	beq.n	800aafe <acc_service_get_next.constprop.80+0x6e>
 800aaee:	9200      	str	r2, [sp, #0]
 800aaf0:	4a14      	ldr	r2, [pc, #80]	; (800ab44 <acc_service_get_next.constprop.80+0xb4>)
 800aaf2:	4916      	ldr	r1, [pc, #88]	; (800ab4c <acc_service_get_next.constprop.80+0xbc>)
 800aaf4:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	4a16      	ldr	r2, [pc, #88]	; (800ab54 <acc_service_get_next.constprop.80+0xc4>)
 800aafa:	47a0      	blx	r4
 800aafc:	e7f1      	b.n	800aae2 <acc_service_get_next.constprop.80+0x52>
 800aafe:	7e37      	ldrb	r7, [r6, #24]
 800ab00:	2f00      	cmp	r7, #0
 800ab02:	d004      	beq.n	800ab0e <acc_service_get_next.constprop.80+0x7e>
 800ab04:	0028      	movs	r0, r5
 800ab06:	f7f8 fcb3 	bl	8003470 <acc_service_activate>
 800ab0a:	1e07      	subs	r7, r0, #0
 800ab0c:	d0e9      	beq.n	800aae2 <acc_service_get_next.constprop.80+0x52>
 800ab0e:	7a6b      	ldrb	r3, [r5, #9]
 800ab10:	4698      	mov	r8, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00c      	beq.n	800ab30 <acc_service_get_next.constprop.80+0xa0>
 800ab16:	4b0b      	ldr	r3, [pc, #44]	; (800ab44 <acc_service_get_next.constprop.80+0xb4>)
 800ab18:	4a0f      	ldr	r2, [pc, #60]	; (800ab58 <acc_service_get_next.constprop.80+0xc8>)
 800ab1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab1c:	490b      	ldr	r1, [pc, #44]	; (800ab4c <acc_service_get_next.constprop.80+0xbc>)
 800ab1e:	2000      	movs	r0, #0
 800ab20:	4798      	blx	r3
 800ab22:	2400      	movs	r4, #0
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	d0cb      	beq.n	800aac0 <acc_service_get_next.constprop.80+0x30>
 800ab28:	0028      	movs	r0, r5
 800ab2a:	f7f7 ff77 	bl	8002a1c <acc_service_deactivate>
 800ab2e:	e7c7      	b.n	800aac0 <acc_service_get_next.constprop.80+0x30>
 800ab30:	2401      	movs	r4, #1
 800ab32:	692b      	ldr	r3, [r5, #16]
 800ab34:	616e      	str	r6, [r5, #20]
 800ab36:	cb05      	ldmia	r3!, {r0, r2}
 800ab38:	4790      	blx	r2
 800ab3a:	7e73      	ldrb	r3, [r6, #25]
 800ab3c:	405c      	eors	r4, r3
 800ab3e:	4643      	mov	r3, r8
 800ab40:	616b      	str	r3, [r5, #20]
 800ab42:	e7ef      	b.n	800ab24 <acc_service_get_next.constprop.80+0x94>
 800ab44:	20000288 	.word	0x20000288
 800ab48:	0801d853 	.word	0x0801d853
 800ab4c:	0801cd04 	.word	0x0801cd04
 800ab50:	0801d870 	.word	0x0801d870
 800ab54:	0801d885 	.word	0x0801d885
 800ab58:	0801d8a1 	.word	0x0801d8a1

0800ab5c <Reg_regor.constprop.76>:
	REGADRERR = -1;
 800ab5c:	2201      	movs	r2, #1
void Reg_regor(uint8_t reg, uint32_t orbits){
 800ab5e:	b510      	push	{r4, lr}
	REGADRERR = -1;
 800ab60:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <Reg_regor.constprop.76+0x18>)
 800ab62:	4252      	negs	r2, r2
	flags |= orbits;
 800ab64:	6c59      	ldr	r1, [r3, #68]	; 0x44
	REGADRERR = -1;
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28
	flags |= orbits;
 800ab68:	4301      	orrs	r1, r0
	RegInt_setregf(reg, flags, 1);
 800ab6a:	3202      	adds	r2, #2
 800ab6c:	2006      	movs	r0, #6
 800ab6e:	f7f8 fdd1 	bl	8003714 <RegInt_setregf>
}
 800ab72:	bd10      	pop	{r4, pc}
 800ab74:	20000388 	.word	0x20000388

0800ab78 <acc_rss_integration_mem_calloc_debug.constprop.75>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	0005      	movs	r5, r0
 800ab7c:	f7fb fa38 	bl	8005ff0 <acc_rss_integration_mem_alloc_debug>
 800ab80:	1e04      	subs	r4, r0, #0
 800ab82:	d003      	beq.n	800ab8c <acc_rss_integration_mem_calloc_debug.constprop.75+0x14>
 800ab84:	002a      	movs	r2, r5
 800ab86:	2100      	movs	r1, #0
 800ab88:	f008 f868 	bl	8012c5c <memset>
 800ab8c:	0020      	movs	r0, r4
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}

0800ab90 <internal_buffer_processed_read.constprop.30>:
 800ab90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab92:	46de      	mov	lr, fp
 800ab94:	464e      	mov	r6, r9
 800ab96:	4645      	mov	r5, r8
 800ab98:	4657      	mov	r7, sl
 800ab9a:	b5e0      	push	{r5, r6, r7, lr}
 800ab9c:	4b24      	ldr	r3, [pc, #144]	; (800ac30 <internal_buffer_processed_read.constprop.30+0xa0>)
 800ab9e:	b085      	sub	sp, #20
 800aba0:	9001      	str	r0, [sp, #4]
 800aba2:	4688      	mov	r8, r1
 800aba4:	0017      	movs	r7, r2
 800aba6:	2100      	movs	r1, #0
 800aba8:	2206      	movs	r2, #6
 800abaa:	a802      	add	r0, sp, #8
 800abac:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800abae:	f008 f855 	bl	8012c5c <memset>
 800abb2:	2300      	movs	r3, #0
 800abb4:	4699      	mov	r9, r3
 800abb6:	3301      	adds	r3, #1
 800abb8:	4645      	mov	r5, r8
 800abba:	469b      	mov	fp, r3
 800abbc:	0876      	lsrs	r6, r6, #1
 800abbe:	3e03      	subs	r6, #3
 800abc0:	2f00      	cmp	r7, #0
 800abc2:	d108      	bne.n	800abd6 <internal_buffer_processed_read.constprop.30+0x46>
 800abc4:	4640      	mov	r0, r8
 800abc6:	3006      	adds	r0, #6
 800abc8:	b005      	add	sp, #20
 800abca:	bc3c      	pop	{r2, r3, r4, r5}
 800abcc:	4690      	mov	r8, r2
 800abce:	4699      	mov	r9, r3
 800abd0:	46a2      	mov	sl, r4
 800abd2:	46ab      	mov	fp, r5
 800abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd6:	0034      	movs	r4, r6
 800abd8:	42be      	cmp	r6, r7
 800abda:	d900      	bls.n	800abde <internal_buffer_processed_read.constprop.30+0x4e>
 800abdc:	003c      	movs	r4, r7
 800abde:	42be      	cmp	r6, r7
 800abe0:	d202      	bcs.n	800abe8 <internal_buffer_processed_read.constprop.30+0x58>
 800abe2:	465b      	mov	r3, fp
 800abe4:	421c      	tst	r4, r3
 800abe6:	d121      	bne.n	800ac2c <internal_buffer_processed_read.constprop.30+0x9c>
 800abe8:	464a      	mov	r2, r9
 800abea:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <internal_buffer_processed_read.constprop.30+0xa4>)
 800abec:	0029      	movs	r1, r5
 800abee:	4313      	orrs	r3, r2
 800abf0:	802b      	strh	r3, [r5, #0]
 800abf2:	b2a3      	uxth	r3, r4
 800abf4:	469a      	mov	sl, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	806b      	strh	r3, [r5, #2]
 800abfa:	2300      	movs	r3, #0
 800abfc:	1ce2      	adds	r2, r4, #3
 800abfe:	80ab      	strh	r3, [r5, #4]
 800ac00:	9801      	ldr	r0, [sp, #4]
 800ac02:	465b      	mov	r3, fp
 800ac04:	f7fb fa06 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800ac08:	a902      	add	r1, sp, #8
 800ac0a:	2206      	movs	r2, #6
 800ac0c:	0028      	movs	r0, r5
 800ac0e:	f00a fc49 	bl	80154a4 <memcpy>
 800ac12:	464b      	mov	r3, r9
 800ac14:	1b3f      	subs	r7, r7, r4
 800ac16:	0064      	lsls	r4, r4, #1
 800ac18:	4453      	add	r3, sl
 800ac1a:	192d      	adds	r5, r5, r4
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2206      	movs	r2, #6
 800ac20:	0029      	movs	r1, r5
 800ac22:	a802      	add	r0, sp, #8
 800ac24:	4699      	mov	r9, r3
 800ac26:	f00a fc3d 	bl	80154a4 <memcpy>
 800ac2a:	e7c9      	b.n	800abc0 <internal_buffer_processed_read.constprop.30+0x30>
 800ac2c:	3c01      	subs	r4, #1
 800ac2e:	e7d8      	b.n	800abe2 <internal_buffer_processed_read.constprop.30+0x52>
 800ac30:	20000288 	.word	0x20000288
 800ac34:	ffff8000 	.word	0xffff8000

0800ac38 <acc_sensor_reg_write>:
 800ac38:	2380      	movs	r3, #128	; 0x80
 800ac3a:	b513      	push	{r0, r1, r4, lr}
 800ac3c:	015b      	lsls	r3, r3, #5
 800ac3e:	ac01      	add	r4, sp, #4
 800ac40:	4319      	orrs	r1, r3
 800ac42:	8021      	strh	r1, [r4, #0]
 800ac44:	8062      	strh	r2, [r4, #2]
 800ac46:	2300      	movs	r3, #0
 800ac48:	2202      	movs	r2, #2
 800ac4a:	0021      	movs	r1, r4
 800ac4c:	f7fb f9e2 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800ac50:	bd13      	pop	{r0, r1, r4, pc}

0800ac52 <acc_diagnostic_log_data_i16.constprop.20>:
 800ac52:	4770      	bx	lr

0800ac54 <acc_confprogram_live_patch.constprop.16>:
 800ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac56:	4645      	mov	r5, r8
 800ac58:	46de      	mov	lr, fp
 800ac5a:	464e      	mov	r6, r9
 800ac5c:	4657      	mov	r7, sl
 800ac5e:	b5e0      	push	{r5, r6, r7, lr}
 800ac60:	001d      	movs	r5, r3
 800ac62:	4b4c      	ldr	r3, [pc, #304]	; (800ad94 <acc_confprogram_live_patch.constprop.16+0x140>)
 800ac64:	0016      	movs	r6, r2
 800ac66:	001a      	movs	r2, r3
 800ac68:	3260      	adds	r2, #96	; 0x60
 800ac6a:	7812      	ldrb	r2, [r2, #0]
 800ac6c:	b08b      	sub	sp, #44	; 0x2c
 800ac6e:	4680      	mov	r8, r0
 800ac70:	468b      	mov	fp, r1
 800ac72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800ac74:	2a03      	cmp	r2, #3
 800ac76:	d906      	bls.n	800ac86 <acc_confprogram_live_patch.constprop.16+0x32>
 800ac78:	9400      	str	r4, [sp, #0]
 800ac7a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800ac7c:	4a46      	ldr	r2, [pc, #280]	; (800ad98 <acc_confprogram_live_patch.constprop.16+0x144>)
 800ac7e:	002b      	movs	r3, r5
 800ac80:	4946      	ldr	r1, [pc, #280]	; (800ad9c <acc_confprogram_live_patch.constprop.16+0x148>)
 800ac82:	2004      	movs	r0, #4
 800ac84:	47b8      	blx	r7
 800ac86:	0023      	movs	r3, r4
 800ac88:	1e5a      	subs	r2, r3, #1
 800ac8a:	4193      	sbcs	r3, r2
 800ac8c:	00ed      	lsls	r5, r5, #3
 800ac8e:	1976      	adds	r6, r6, r5
 800ac90:	2500      	movs	r5, #0
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	9305      	str	r3, [sp, #20]
 800ac96:	8873      	ldrh	r3, [r6, #2]
 800ac98:	429d      	cmp	r5, r3
 800ac9a:	d306      	bcc.n	800acaa <acc_confprogram_live_patch.constprop.16+0x56>
 800ac9c:	b00b      	add	sp, #44	; 0x2c
 800ac9e:	bc3c      	pop	{r2, r3, r4, r5}
 800aca0:	4690      	mov	r8, r2
 800aca2:	4699      	mov	r9, r3
 800aca4:	46a2      	mov	sl, r4
 800aca6:	46ab      	mov	fp, r5
 800aca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acaa:	2206      	movs	r2, #6
 800acac:	6873      	ldr	r3, [r6, #4]
 800acae:	436a      	muls	r2, r5
 800acb0:	469c      	mov	ip, r3
 800acb2:	4462      	add	r2, ip
 800acb4:	7810      	ldrb	r0, [r2, #0]
 800acb6:	2801      	cmp	r0, #1
 800acb8:	d059      	beq.n	800ad6e <acc_confprogram_live_patch.constprop.16+0x11a>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d00b      	beq.n	800acd6 <acc_confprogram_live_patch.constprop.16+0x82>
 800acbe:	2802      	cmp	r0, #2
 800acc0:	d05e      	beq.n	800ad80 <acc_confprogram_live_patch.constprop.16+0x12c>
 800acc2:	4b34      	ldr	r3, [pc, #208]	; (800ad94 <acc_confprogram_live_patch.constprop.16+0x140>)
 800acc4:	4935      	ldr	r1, [pc, #212]	; (800ad9c <acc_confprogram_live_patch.constprop.16+0x148>)
 800acc6:	2000      	movs	r0, #0
 800acc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acca:	4a35      	ldr	r2, [pc, #212]	; (800ada0 <acc_confprogram_live_patch.constprop.16+0x14c>)
 800accc:	4798      	blx	r3
 800acce:	21e7      	movs	r1, #231	; 0xe7
 800acd0:	4834      	ldr	r0, [pc, #208]	; (800ada4 <acc_confprogram_live_patch.constprop.16+0x150>)
 800acd2:	f7fa fe00 	bl	80058d6 <acc_assert_fail>
 800acd6:	8853      	ldrh	r3, [r2, #2]
 800acd8:	4699      	mov	r9, r3
 800acda:	7913      	ldrb	r3, [r2, #4]
 800acdc:	9303      	str	r3, [sp, #12]
 800acde:	7953      	ldrb	r3, [r2, #5]
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	2301      	movs	r3, #1
 800ace4:	9a04      	ldr	r2, [sp, #16]
 800ace6:	469a      	mov	sl, r3
 800ace8:	4093      	lsls	r3, r2
 800acea:	429c      	cmp	r4, r3
 800acec:	d30c      	bcc.n	800ad08 <acc_confprogram_live_patch.constprop.16+0xb4>
 800acee:	3b01      	subs	r3, #1
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	4b28      	ldr	r3, [pc, #160]	; (800ad94 <acc_confprogram_live_patch.constprop.16+0x140>)
 800acf4:	9400      	str	r4, [sp, #0]
 800acf6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800acf8:	4928      	ldr	r1, [pc, #160]	; (800ad9c <acc_confprogram_live_patch.constprop.16+0x148>)
 800acfa:	464b      	mov	r3, r9
 800acfc:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <acc_confprogram_live_patch.constprop.16+0x154>)
 800acfe:	47a0      	blx	r4
 800ad00:	2129      	movs	r1, #41	; 0x29
 800ad02:	4828      	ldr	r0, [pc, #160]	; (800ada4 <acc_confprogram_live_patch.constprop.16+0x150>)
 800ad04:	f7fa fde7 	bl	80058d6 <acc_assert_fail>
 800ad08:	464a      	mov	r2, r9
 800ad0a:	4b28      	ldr	r3, [pc, #160]	; (800adac <acc_confprogram_live_patch.constprop.16+0x158>)
 800ad0c:	af07      	add	r7, sp, #28
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	803b      	strh	r3, [r7, #0]
 800ad12:	4653      	mov	r3, sl
 800ad14:	0001      	movs	r1, r0
 800ad16:	80b8      	strh	r0, [r7, #4]
 800ad18:	a804      	add	r0, sp, #16
 800ad1a:	4684      	mov	ip, r0
 800ad1c:	807b      	strh	r3, [r7, #2]
 800ad1e:	2312      	movs	r3, #18
 800ad20:	4463      	add	r3, ip
 800ad22:	2204      	movs	r2, #4
 800ad24:	0018      	movs	r0, r3
 800ad26:	f007 ff99 	bl	8012c5c <memset>
 800ad2a:	4653      	mov	r3, sl
 800ad2c:	2205      	movs	r2, #5
 800ad2e:	0039      	movs	r1, r7
 800ad30:	4640      	mov	r0, r8
 800ad32:	f7fb f96f 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800ad36:	aa04      	add	r2, sp, #16
 800ad38:	4694      	mov	ip, r2
 800ad3a:	2312      	movs	r3, #18
 800ad3c:	4463      	add	r3, ip
 800ad3e:	0018      	movs	r0, r3
 800ad40:	a906      	add	r1, sp, #24
 800ad42:	f7fe ff15 	bl	8009b70 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800ad46:	2220      	movs	r2, #32
 800ad48:	9b04      	ldr	r3, [sp, #16]
 800ad4a:	9903      	ldr	r1, [sp, #12]
 800ad4c:	1ad2      	subs	r2, r2, r3
 800ad4e:	2301      	movs	r3, #1
 800ad50:	425b      	negs	r3, r3
 800ad52:	40d3      	lsrs	r3, r2
 800ad54:	9a03      	ldr	r2, [sp, #12]
 800ad56:	4640      	mov	r0, r8
 800ad58:	4093      	lsls	r3, r2
 800ad5a:	9a06      	ldr	r2, [sp, #24]
 800ad5c:	439a      	bics	r2, r3
 800ad5e:	0023      	movs	r3, r4
 800ad60:	408b      	lsls	r3, r1
 800ad62:	4649      	mov	r1, r9
 800ad64:	431a      	orrs	r2, r3
 800ad66:	f7fe fea9 	bl	8009abc <acc_sensor_r2_conf_write_instr>
 800ad6a:	3501      	adds	r5, #1
 800ad6c:	e793      	b.n	800ac96 <acc_confprogram_live_patch.constprop.16+0x42>
 800ad6e:	9905      	ldr	r1, [sp, #20]
 800ad70:	8853      	ldrh	r3, [r2, #2]
 800ad72:	4640      	mov	r0, r8
 800ad74:	8892      	ldrh	r2, [r2, #4]
 800ad76:	9100      	str	r1, [sp, #0]
 800ad78:	4659      	mov	r1, fp
 800ad7a:	f7fe feff 	bl	8009b7c <acc_confprogram_modify_runif_sensor.constprop.19>
 800ad7e:	e7f4      	b.n	800ad6a <acc_confprogram_live_patch.constprop.16+0x116>
 800ad80:	4261      	negs	r1, r4
 800ad82:	4161      	adcs	r1, r4
 800ad84:	8853      	ldrh	r3, [r2, #2]
 800ad86:	4640      	mov	r0, r8
 800ad88:	8892      	ldrh	r2, [r2, #4]
 800ad8a:	9100      	str	r1, [sp, #0]
 800ad8c:	4659      	mov	r1, fp
 800ad8e:	f7fe fef5 	bl	8009b7c <acc_confprogram_modify_runif_sensor.constprop.19>
 800ad92:	e7ea      	b.n	800ad6a <acc_confprogram_live_patch.constprop.16+0x116>
 800ad94:	20000288 	.word	0x20000288
 800ad98:	0801d8b7 	.word	0x0801d8b7
 800ad9c:	0801d064 	.word	0x0801d064
 800ada0:	0801d942 	.word	0x0801d942
 800ada4:	0801d911 	.word	0x0801d911
 800ada8:	0801d8d9 	.word	0x0801d8d9
 800adac:	ffffa000 	.word	0xffffa000

0800adb0 <get_dt.constprop.10>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	f7fb f9b5 	bl	8006120 <acc_rss_integration_get_sensor_reference_frequency>
 800adb6:	1c01      	adds	r1, r0, #0
 800adb8:	1c04      	adds	r4, r0, #0
 800adba:	4809      	ldr	r0, [pc, #36]	; (800ade0 <get_dt.constprop.10+0x30>)
 800adbc:	f003 fa76 	bl	800e2ac <__aeabi_fdiv>
 800adc0:	f008 f93e 	bl	8013040 <roundf>
 800adc4:	1c01      	adds	r1, r0, #0
 800adc6:	1c20      	adds	r0, r4, #0
 800adc8:	f003 fb82 	bl	800e4d0 <__aeabi_fmul>
 800adcc:	1c01      	adds	r1, r0, #0
 800adce:	20fe      	movs	r0, #254	; 0xfe
 800add0:	0580      	lsls	r0, r0, #22
 800add2:	f003 fa6b 	bl	800e2ac <__aeabi_fdiv>
 800add6:	4903      	ldr	r1, [pc, #12]	; (800ade4 <get_dt.constprop.10+0x34>)
 800add8:	f003 fa68 	bl	800e2ac <__aeabi_fdiv>
 800addc:	bd10      	pop	{r4, pc}
 800adde:	46c0      	nop			; (mov r8, r8)
 800ade0:	4f1502f9 	.word	0x4f1502f9
 800ade4:	42f80000 	.word	0x42f80000

0800ade8 <points_to_meter.constprop.9>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	0005      	movs	r5, r0
 800adec:	f7ff ffe0 	bl	800adb0 <get_dt.constprop.10>
 800adf0:	1c04      	adds	r4, r0, #0
 800adf2:	0028      	movs	r0, r5
 800adf4:	f004 faa0 	bl	800f338 <__aeabi_i2f>
 800adf8:	1c21      	adds	r1, r4, #0
 800adfa:	f003 fb69 	bl	800e4d0 <__aeabi_fmul>
 800adfe:	4904      	ldr	r1, [pc, #16]	; (800ae10 <points_to_meter.constprop.9+0x28>)
 800ae00:	f003 fb66 	bl	800e4d0 <__aeabi_fmul>
 800ae04:	21fc      	movs	r1, #252	; 0xfc
 800ae06:	0589      	lsls	r1, r1, #22
 800ae08:	f003 fb62 	bl	800e4d0 <__aeabi_fmul>
 800ae0c:	bd70      	pop	{r4, r5, r6, pc}
 800ae0e:	46c0      	nop			; (mov r8, r8)
 800ae10:	4d8ef3c2 	.word	0x4d8ef3c2

0800ae14 <UARTEx_SetNbDataToProcess.lto_priv.680>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ae14:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ae16:	4b16      	ldr	r3, [pc, #88]	; (800ae70 <UARTEx_SetNbDataToProcess.lto_priv.680+0x5c>)
{
 800ae18:	b085      	sub	sp, #20
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ae1a:	9302      	str	r3, [sp, #8]
 800ae1c:	2308      	movs	r3, #8
 800ae1e:	33ff      	adds	r3, #255	; 0xff
 800ae20:	9303      	str	r3, [sp, #12]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae22:	4b14      	ldr	r3, [pc, #80]	; (800ae74 <UARTEx_SetNbDataToProcess.lto_priv.680+0x60>)
{
 800ae24:	0004      	movs	r4, r0
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <UARTEx_SetNbDataToProcess.lto_priv.680+0x64>)
 800ae2a:	9301      	str	r3, [sp, #4]

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae2c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01b      	beq.n	800ae6a <UARTEx_SetNbDataToProcess.lto_priv.680+0x56>
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae32:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae34:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae36:	ae02      	add	r6, sp, #8
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae38:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae3e:	5cf0      	ldrb	r0, [r6, r3]
 800ae40:	5cd1      	ldrb	r1, [r2, r3]
 800ae42:	00c0      	lsls	r0, r0, #3
 800ae44:	f003 ff00 	bl	800ec48 <__divsi3>
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ae48:	466a      	mov	r2, sp
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae4a:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ae4c:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800ae4e:	b287      	uxth	r7, r0
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800ae50:	5cf0      	ldrb	r0, [r6, r3]
 800ae52:	5cd1      	ldrb	r1, [r2, r3]
 800ae54:	00c0      	lsls	r0, r0, #3
 800ae56:	f003 fef7 	bl	800ec48 <__divsi3>
 800ae5a:	b280      	uxth	r0, r0
 800ae5c:	0023      	movs	r3, r4
 800ae5e:	346a      	adds	r4, #106	; 0x6a
 800ae60:	3368      	adds	r3, #104	; 0x68
 800ae62:	8018      	strh	r0, [r3, #0]
 800ae64:	8027      	strh	r7, [r4, #0]
  }
}
 800ae66:	b005      	add	sp, #20
 800ae68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    huart->NbRxDataToProcess = 1U;
 800ae6a:	2001      	movs	r0, #1
    huart->NbTxDataToProcess = 1U;
 800ae6c:	0007      	movs	r7, r0
 800ae6e:	e7f5      	b.n	800ae5c <UARTEx_SetNbDataToProcess.lto_priv.680+0x48>
 800ae70:	03010101 	.word	0x03010101
 800ae74:	04020408 	.word	0x04020408
 800ae78:	01010108 	.word	0x01010108

0800ae7c <HAL_UARTEx_DisableFifoMode>:
{
 800ae7c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800ae7e:	0004      	movs	r4, r0
 800ae80:	347c      	adds	r4, #124	; 0x7c
 800ae82:	7822      	ldrb	r2, [r4, #0]
 800ae84:	2302      	movs	r3, #2
 800ae86:	2a01      	cmp	r2, #1
 800ae88:	d010      	beq.n	800aeac <HAL_UARTEx_DisableFifoMode+0x30>
  __HAL_UART_DISABLE(huart);
 800ae8a:	2601      	movs	r6, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae8c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	1d05      	adds	r5, r0, #4
 800ae90:	3322      	adds	r3, #34	; 0x22
 800ae92:	67eb      	str	r3, [r5, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae94:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800ae96:	6813      	ldr	r3, [r2, #0]
 800ae98:	43b3      	bics	r3, r6
 800ae9a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae9c:	4b04      	ldr	r3, [pc, #16]	; (800aeb0 <HAL_UARTEx_DisableFifoMode+0x34>)
 800ae9e:	4019      	ands	r1, r3
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aea4:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800aea6:	2220      	movs	r2, #32
 800aea8:	67ea      	str	r2, [r5, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800aeaa:	7023      	strb	r3, [r4, #0]
}
 800aeac:	0018      	movs	r0, r3
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	dfffffff 	.word	0xdfffffff

0800aeb4 <HAL_UART_Transmit>:
{
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	46de      	mov	lr, fp
 800aeb8:	464e      	mov	r6, r9
 800aeba:	4645      	mov	r5, r8
 800aebc:	4657      	mov	r7, sl
 800aebe:	469b      	mov	fp, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800aec0:	1d03      	adds	r3, r0, #4
 800aec2:	4699      	mov	r9, r3
 800aec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
{
 800aec6:	b5e0      	push	{r5, r6, r7, lr}
 800aec8:	0004      	movs	r4, r0
 800aeca:	000d      	movs	r5, r1
    return HAL_BUSY;
 800aecc:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800aece:	2b20      	cmp	r3, #32
 800aed0:	d14c      	bne.n	800af6c <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 800aed2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800aed4:	2900      	cmp	r1, #0
 800aed6:	d049      	beq.n	800af6c <HAL_UART_Transmit+0xb8>
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d047      	beq.n	800af6c <HAL_UART_Transmit+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aedc:	2380      	movs	r3, #128	; 0x80
 800aede:	68a1      	ldr	r1, [r4, #8]
 800aee0:	015b      	lsls	r3, r3, #5
 800aee2:	4299      	cmp	r1, r3
 800aee4:	d104      	bne.n	800aef0 <HAL_UART_Transmit+0x3c>
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <HAL_UART_Transmit+0x3c>
      if ((((uint32_t)pData) & 1U) != 0U)
 800aeec:	4205      	tst	r5, r0
 800aeee:	d13d      	bne.n	800af6c <HAL_UART_Transmit+0xb8>
    __HAL_LOCK(huart);
 800aef0:	237c      	movs	r3, #124	; 0x7c
 800aef2:	4698      	mov	r8, r3
 800aef4:	44a0      	add	r8, r4
 800aef6:	4643      	mov	r3, r8
 800aef8:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800aefa:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d035      	beq.n	800af6c <HAL_UART_Transmit+0xb8>
 800af00:	2301      	movs	r3, #1
 800af02:	4640      	mov	r0, r8
 800af04:	7003      	strb	r3, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af06:	0023      	movs	r3, r4
 800af08:	2600      	movs	r6, #0
 800af0a:	3388      	adds	r3, #136	; 0x88
 800af0c:	601e      	str	r6, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af0e:	4648      	mov	r0, r9
 800af10:	2321      	movs	r3, #33	; 0x21
 800af12:	67c3      	str	r3, [r0, #124]	; 0x7c
 800af14:	4b21      	ldr	r3, [pc, #132]	; (800af9c <HAL_UART_Transmit+0xe8>)
    huart->TxXferCount = Size;
 800af16:	0027      	movs	r7, r4
 800af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1a:	3756      	adds	r7, #86	; 0x56
 800af1c:	469a      	mov	sl, r3
    huart->TxXferSize  = Size;
 800af1e:	0023      	movs	r3, r4
 800af20:	3354      	adds	r3, #84	; 0x54
 800af22:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af24:	2380      	movs	r3, #128	; 0x80
    huart->TxXferCount = Size;
 800af26:	803a      	strh	r2, [r7, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af28:	015b      	lsls	r3, r3, #5
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d104      	bne.n	800af38 <HAL_UART_Transmit+0x84>
 800af2e:	6923      	ldr	r3, [r4, #16]
 800af30:	42b3      	cmp	r3, r6
 800af32:	d101      	bne.n	800af38 <HAL_UART_Transmit+0x84>
 800af34:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 800af36:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 800af38:	883b      	ldrh	r3, [r7, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10d      	bne.n	800af5a <HAL_UART_Transmit+0xa6>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af3e:	465b      	mov	r3, fp
 800af40:	4652      	mov	r2, sl
 800af42:	2140      	movs	r1, #64	; 0x40
 800af44:	0020      	movs	r0, r4
 800af46:	f7fe fde9 	bl	8009b1c <UART_WaitOnFlagUntilTimeout.constprop.104>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d10d      	bne.n	800af6a <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800af4e:	2320      	movs	r3, #32
 800af50:	464a      	mov	r2, r9
 800af52:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_UNLOCK(huart);
 800af54:	4643      	mov	r3, r8
 800af56:	7018      	strb	r0, [r3, #0]
 800af58:	e008      	b.n	800af6c <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800af5a:	465b      	mov	r3, fp
 800af5c:	4652      	mov	r2, sl
 800af5e:	2180      	movs	r1, #128	; 0x80
 800af60:	0020      	movs	r0, r4
 800af62:	f7fe fddb 	bl	8009b1c <UART_WaitOnFlagUntilTimeout.constprop.104>
 800af66:	2800      	cmp	r0, #0
 800af68:	d006      	beq.n	800af78 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 800af6a:	2003      	movs	r0, #3
}
 800af6c:	bc3c      	pop	{r2, r3, r4, r5}
 800af6e:	4690      	mov	r8, r2
 800af70:	4699      	mov	r9, r3
 800af72:	46a2      	mov	sl, r4
 800af74:	46ab      	mov	fp, r5
 800af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af78:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800af7a:	2d00      	cmp	r5, #0
 800af7c:	d109      	bne.n	800af92 <HAL_UART_Transmit+0xde>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af7e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 800af80:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800af82:	05db      	lsls	r3, r3, #23
 800af84:	0ddb      	lsrs	r3, r3, #23
 800af86:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800af88:	883b      	ldrh	r3, [r7, #0]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	803b      	strh	r3, [r7, #0]
 800af90:	e7d2      	b.n	800af38 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af92:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800af94:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800af96:	6293      	str	r3, [r2, #40]	; 0x28
 800af98:	e7f6      	b.n	800af88 <HAL_UART_Transmit+0xd4>
 800af9a:	46c0      	nop			; (mov r8, r8)
 800af9c:	20000288 	.word	0x20000288

0800afa0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800afa0:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while(Param >= 10U)
 800afa2:	2809      	cmp	r0, #9
 800afa4:	d803      	bhi.n	800afae <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4318      	orrs	r0, r3
 800afaa:	b2c0      	uxtb	r0, r0
}
 800afac:	4770      	bx	lr
    Param -= 10U;
 800afae:	380a      	subs	r0, #10
    bcdhigh++;
 800afb0:	3301      	adds	r3, #1
    Param -= 10U;
 800afb2:	b2c0      	uxtb	r0, r0
 800afb4:	e7f5      	b.n	800afa2 <RTC_ByteToBcd2+0x2>

0800afb6 <HAL_RTC_SetAlarm_IT.constprop.138>:
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800afb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb8:	46ce      	mov	lr, r9
 800afba:	4647      	mov	r7, r8
  __HAL_LOCK(hrtc);
 800afbc:	4d4e      	ldr	r5, [pc, #312]	; (800b0f8 <HAL_RTC_SetAlarm_IT.constprop.138+0x142>)
 800afbe:	2302      	movs	r3, #2
 800afc0:	002a      	movs	r2, r5
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800afc2:	b580      	push	{r7, lr}
  __HAL_LOCK(hrtc);
 800afc4:	3228      	adds	r2, #40	; 0x28
 800afc6:	7811      	ldrb	r1, [r2, #0]
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
 800afc8:	0006      	movs	r6, r0
  __HAL_LOCK(hrtc);
 800afca:	0018      	movs	r0, r3
 800afcc:	2901      	cmp	r1, #1
 800afce:	d06c      	beq.n	800b0aa <HAL_RTC_SetAlarm_IT.constprop.138+0xf4>
 800afd0:	2101      	movs	r1, #1
 800afd2:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800afd4:	002a      	movs	r2, r5
 800afd6:	3229      	adds	r2, #41	; 0x29
 800afd8:	7013      	strb	r3, [r2, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800afda:	2240      	movs	r2, #64	; 0x40
 800afdc:	682c      	ldr	r4, [r5, #0]
 800afde:	69a3      	ldr	r3, [r4, #24]
 800afe0:	4013      	ands	r3, r2
 800afe2:	d100      	bne.n	800afe6 <HAL_RTC_SetAlarm_IT.constprop.138+0x30>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800afe4:	70f3      	strb	r3, [r6, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800afe6:	7830      	ldrb	r0, [r6, #0]
 800afe8:	f7ff ffda 	bl	800afa0 <RTC_ByteToBcd2>
 800afec:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800afee:	7870      	ldrb	r0, [r6, #1]
 800aff0:	f7ff ffd6 	bl	800afa0 <RTC_ByteToBcd2>
 800aff4:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800aff6:	78b0      	ldrb	r0, [r6, #2]
 800aff8:	f7ff ffd2 	bl	800afa0 <RTC_ByteToBcd2>
 800affc:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800affe:	1c73      	adds	r3, r6, #1
 800b000:	7fd8      	ldrb	r0, [r3, #31]
 800b002:	f7ff ffcd 	bl	800afa0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b006:	6972      	ldr	r2, [r6, #20]
 800b008:	69f3      	ldr	r3, [r6, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b00a:	023f      	lsls	r7, r7, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b00c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b00e:	78f2      	ldrb	r2, [r6, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800b010:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800b012:	0592      	lsls	r2, r2, #22
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b014:	4313      	orrs	r3, r2
 800b016:	464a      	mov	r2, r9
 800b018:	4313      	orrs	r3, r2
 800b01a:	4642      	mov	r2, r8
 800b01c:	0412      	lsls	r2, r2, #16
 800b01e:	4313      	orrs	r3, r2
 800b020:	433b      	orrs	r3, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b022:	69b2      	ldr	r2, [r6, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800b024:	4318      	orrs	r0, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b026:	6873      	ldr	r3, [r6, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b028:	6a71      	ldr	r1, [r6, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b02a:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b02c:	22ca      	movs	r2, #202	; 0xca
 800b02e:	6262      	str	r2, [r4, #36]	; 0x24
 800b030:	3a77      	subs	r2, #119	; 0x77
 800b032:	6262      	str	r2, [r4, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 800b034:	32ad      	adds	r2, #173	; 0xad
 800b036:	4291      	cmp	r1, r2
 800b038:	d13b      	bne.n	800b0b2 <HAL_RTC_SetAlarm_IT.constprop.138+0xfc>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b03a:	69a2      	ldr	r2, [r4, #24]
 800b03c:	492f      	ldr	r1, [pc, #188]	; (800b0fc <HAL_RTC_SetAlarm_IT.constprop.138+0x146>)
 800b03e:	400a      	ands	r2, r1
 800b040:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b042:	2201      	movs	r2, #1
 800b044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b046:	4311      	orrs	r1, r2
 800b048:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b04a:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b04c:	22fa      	movs	r2, #250	; 0xfa
 800b04e:	0092      	lsls	r2, r2, #2
 800b050:	4694      	mov	ip, r2
 800b052:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b054:	68e2      	ldr	r2, [r4, #12]
 800b056:	400a      	ands	r2, r1
 800b058:	d01b      	beq.n	800b092 <HAL_RTC_SetAlarm_IT.constprop.138+0xdc>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b05a:	6420      	str	r0, [r4, #64]	; 0x40
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b05c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	69a2      	ldr	r2, [r4, #24]
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	4313      	orrs	r3, r2
 800b066:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800b068:	2380      	movs	r3, #128	; 0x80
 800b06a:	69a2      	ldr	r2, [r4, #24]
 800b06c:	015b      	lsls	r3, r3, #5
 800b06e:	4313      	orrs	r3, r2
 800b070:	61a3      	str	r3, [r4, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b072:	2380      	movs	r3, #128	; 0x80
 800b074:	4a22      	ldr	r2, [pc, #136]	; (800b100 <HAL_RTC_SetAlarm_IT.constprop.138+0x14a>)
 800b076:	031b      	lsls	r3, r3, #12
 800b078:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  __HAL_UNLOCK(hrtc);
 800b07a:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800b07c:	430b      	orrs	r3, r1
 800b07e:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b080:	23ff      	movs	r3, #255	; 0xff
 800b082:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800b084:	002b      	movs	r3, r5
 800b086:	2201      	movs	r2, #1
 800b088:	3329      	adds	r3, #41	; 0x29
  __HAL_UNLOCK(hrtc);
 800b08a:	3528      	adds	r5, #40	; 0x28
  hrtc->State = HAL_RTC_STATE_READY;
 800b08c:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800b08e:	7028      	strb	r0, [r5, #0]
 800b090:	e00b      	b.n	800b0aa <HAL_RTC_SetAlarm_IT.constprop.138+0xf4>
 800b092:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b094:	1bf6      	subs	r6, r6, r7
 800b096:	4566      	cmp	r6, ip
 800b098:	d9dc      	bls.n	800b054 <HAL_RTC_SetAlarm_IT.constprop.138+0x9e>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b09a:	23ff      	movs	r3, #255	; 0xff
 800b09c:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b09e:	002b      	movs	r3, r5
 800b0a0:	2003      	movs	r0, #3
 800b0a2:	3329      	adds	r3, #41	; 0x29
        __HAL_UNLOCK(hrtc);
 800b0a4:	3528      	adds	r5, #40	; 0x28
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b0a6:	7018      	strb	r0, [r3, #0]
        __HAL_UNLOCK(hrtc);
 800b0a8:	702a      	strb	r2, [r5, #0]
}
 800b0aa:	bc0c      	pop	{r2, r3}
 800b0ac:	4690      	mov	r8, r2
 800b0ae:	4699      	mov	r9, r3
 800b0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b0b2:	69a2      	ldr	r2, [r4, #24]
 800b0b4:	4913      	ldr	r1, [pc, #76]	; (800b104 <HAL_RTC_SetAlarm_IT.constprop.138+0x14e>)
 800b0b6:	400a      	ands	r2, r1
 800b0b8:	61a2      	str	r2, [r4, #24]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b0be:	4311      	orrs	r1, r2
 800b0c0:	65e1      	str	r1, [r4, #92]	; 0x5c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b0c2:	0011      	movs	r1, r2
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b0c4:	22fa      	movs	r2, #250	; 0xfa
 800b0c6:	0092      	lsls	r2, r2, #2
 800b0c8:	4694      	mov	ip, r2
 800b0ca:	6aef      	ldr	r7, [r5, #44]	; 0x2c
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b0cc:	68e2      	ldr	r2, [r4, #12]
 800b0ce:	400a      	ands	r2, r1
 800b0d0:	d00c      	beq.n	800b0ec <HAL_RTC_SetAlarm_IT.constprop.138+0x136>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b0d2:	64a0      	str	r0, [r4, #72]	; 0x48
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b0d4:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b0d6:	2380      	movs	r3, #128	; 0x80
 800b0d8:	69a2      	ldr	r2, [r4, #24]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	61a3      	str	r3, [r4, #24]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800b0e0:	2380      	movs	r3, #128	; 0x80
 800b0e2:	69a2      	ldr	r2, [r4, #24]
 800b0e4:	019b      	lsls	r3, r3, #6
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	61a3      	str	r3, [r4, #24]
 800b0ea:	e7c2      	b.n	800b072 <HAL_RTC_SetAlarm_IT.constprop.138+0xbc>
 800b0ec:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b0ee:	1bf6      	subs	r6, r6, r7
 800b0f0:	4566      	cmp	r6, ip
 800b0f2:	d9eb      	bls.n	800b0cc <HAL_RTC_SetAlarm_IT.constprop.138+0x116>
 800b0f4:	e7d1      	b.n	800b09a <HAL_RTC_SetAlarm_IT.constprop.138+0xe4>
 800b0f6:	46c0      	nop			; (mov r8, r8)
 800b0f8:	20000288 	.word	0x20000288
 800b0fc:	fffffeff 	.word	0xfffffeff
 800b100:	40021804 	.word	0x40021804
 800b104:	fffffdff 	.word	0xfffffdff

0800b108 <HAL_InitTick>:
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b108:	21fa      	movs	r1, #250	; 0xfa
{
 800b10a:	b570      	push	{r4, r5, r6, lr}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b10c:	4d11      	ldr	r5, [pc, #68]	; (800b154 <HAL_InitTick+0x4c>)
{
 800b10e:	0004      	movs	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 800b110:	0089      	lsls	r1, r1, #2
 800b112:	6828      	ldr	r0, [r5, #0]
 800b114:	f003 fd0e 	bl	800eb34 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <HAL_InitTick+0x50>)
 800b11a:	3801      	subs	r0, #1
 800b11c:	4298      	cmp	r0, r3
 800b11e:	d901      	bls.n	800b124 <HAL_InitTick+0x1c>
      status = HAL_ERROR;
 800b120:	2001      	movs	r0, #1
}
 800b122:	bd70      	pop	{r4, r5, r6, pc}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b124:	490d      	ldr	r1, [pc, #52]	; (800b15c <HAL_InitTick+0x54>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b126:	4a0e      	ldr	r2, [pc, #56]	; (800b160 <HAL_InitTick+0x58>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b128:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b12a:	20c0      	movs	r0, #192	; 0xc0
 800b12c:	6a13      	ldr	r3, [r2, #32]
 800b12e:	0600      	lsls	r0, r0, #24
 800b130:	021b      	lsls	r3, r3, #8
 800b132:	0a1b      	lsrs	r3, r3, #8
 800b134:	4303      	orrs	r3, r0
 800b136:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b138:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b13a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b13c:	6088      	str	r0, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b13e:	600b      	str	r3, [r1, #0]
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b140:	2c03      	cmp	r4, #3
 800b142:	d8ed      	bhi.n	800b120 <HAL_InitTick+0x18>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b144:	6a13      	ldr	r3, [r2, #32]
 800b146:	07a1      	lsls	r1, r4, #30
 800b148:	021b      	lsls	r3, r3, #8
 800b14a:	0a1b      	lsrs	r3, r3, #8
 800b14c:	430b      	orrs	r3, r1
 800b14e:	6213      	str	r3, [r2, #32]
        uwTickPrio = TickPriority;
 800b150:	606c      	str	r4, [r5, #4]
 800b152:	e7e6      	b.n	800b122 <HAL_InitTick+0x1a>
 800b154:	20000000 	.word	0x20000000
 800b158:	00ffffff 	.word	0x00ffffff
 800b15c:	e000e010 	.word	0xe000e010
 800b160:	e000ed00 	.word	0xe000ed00

0800b164 <HAL_DMA_DeInit.part.1>:
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_DMA_DISABLE(hdma);
 800b166:	2501      	movs	r5, #1
 800b168:	6807      	ldr	r7, [r0, #0]
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
 800b16a:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 800b16c:	683b      	ldr	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b16e:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800b170:	43ab      	bics	r3, r5
 800b172:	603b      	str	r3, [r7, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b174:	4b18      	ldr	r3, [pc, #96]	; (800b1d8 <HAL_DMA_DeInit.part.1+0x74>)
  hdma->Instance->CCR  = 0U;
 800b176:	2600      	movs	r6, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b178:	18f8      	adds	r0, r7, r3
 800b17a:	f003 fcdb 	bl	800eb34 <__udivsi3>
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b17e:	231c      	movs	r3, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800b180:	0080      	lsls	r0, r0, #2
 800b182:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b184:	4018      	ands	r0, r3
 800b186:	002b      	movs	r3, r5
 800b188:	4083      	lsls	r3, r0
 800b18a:	4a14      	ldr	r2, [pc, #80]	; (800b1dc <HAL_DMA_DeInit.part.1+0x78>)
  hdma->Instance->CCR  = 0U;
 800b18c:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b18e:	6851      	ldr	r1, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b190:	0020      	movs	r0, r4
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800b192:	430b      	orrs	r3, r1
 800b194:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b196:	f7fe fe50 	bl	8009e3a <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800b19a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b19c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 800b19e:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b1a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b1a2:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b1a4:	6863      	ldr	r3, [r4, #4]
 800b1a6:	1e5a      	subs	r2, r3, #1
 800b1a8:	2a03      	cmp	r2, #3
 800b1aa:	d807      	bhi.n	800b1bc <HAL_DMA_DeInit.part.1+0x58>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1ac:	490c      	ldr	r1, [pc, #48]	; (800b1e0 <HAL_DMA_DeInit.part.1+0x7c>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b1ae:	4095      	lsls	r5, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b1b0:	468c      	mov	ip, r1
 800b1b2:	4463      	add	r3, ip
 800b1b4:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b1b6:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <HAL_DMA_DeInit.part.1+0x80>)
 800b1ba:	605d      	str	r5, [r3, #4]
  hdma->XferCpltCallback = NULL;
 800b1bc:	2000      	movs	r0, #0
 800b1be:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800b1c0:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800b1c2:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800b1c4:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->DMAmuxRequestGen = 0U;
 800b1c6:	6520      	str	r0, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 800b1c8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800b1ca:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b1cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800b1ce:	1da3      	adds	r3, r4, #6
  __HAL_UNLOCK(hdma);
 800b1d0:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 800b1d2:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 800b1d4:	77e0      	strb	r0, [r4, #31]
}
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	bffdfff8 	.word	0xbffdfff8
 800b1dc:	40020000 	.word	0x40020000
 800b1e0:	1000823f 	.word	0x1000823f
 800b1e4:	40020940 	.word	0x40020940

0800b1e8 <HAL_DMA_IRQHandler>:
{
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b1ea:	211c      	movs	r1, #28
 800b1ec:	2704      	movs	r7, #4
 800b1ee:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 800b1f0:	4b27      	ldr	r3, [pc, #156]	; (800b290 <HAL_DMA_IRQHandler+0xa8>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b1f2:	4021      	ands	r1, r4
 800b1f4:	003c      	movs	r4, r7
 800b1f6:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 800b1f8:	681e      	ldr	r6, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800b1fa:	6802      	ldr	r2, [r0, #0]
 800b1fc:	6815      	ldr	r5, [r2, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b1fe:	4226      	tst	r6, r4
 800b200:	d00f      	beq.n	800b222 <HAL_DMA_IRQHandler+0x3a>
 800b202:	423d      	tst	r5, r7
 800b204:	d00d      	beq.n	800b222 <HAL_DMA_IRQHandler+0x3a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b206:	6811      	ldr	r1, [r2, #0]
 800b208:	0689      	lsls	r1, r1, #26
 800b20a:	d402      	bmi.n	800b212 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b20c:	6811      	ldr	r1, [r2, #0]
 800b20e:	43b9      	bics	r1, r7
 800b210:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800b212:	685a      	ldr	r2, [r3, #4]
 800b214:	4314      	orrs	r4, r2
 800b216:	605c      	str	r4, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800b218:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d01b      	beq.n	800b256 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 800b21e:	4798      	blx	r3
 800b220:	e019      	b.n	800b256 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800b222:	2702      	movs	r7, #2
 800b224:	003c      	movs	r4, r7
 800b226:	408c      	lsls	r4, r1
 800b228:	4226      	tst	r6, r4
 800b22a:	d015      	beq.n	800b258 <HAL_DMA_IRQHandler+0x70>
 800b22c:	423d      	tst	r5, r7
 800b22e:	d013      	beq.n	800b258 <HAL_DMA_IRQHandler+0x70>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b230:	6811      	ldr	r1, [r2, #0]
 800b232:	0689      	lsls	r1, r1, #26
 800b234:	d406      	bmi.n	800b244 <HAL_DMA_IRQHandler+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b236:	250a      	movs	r5, #10
 800b238:	6811      	ldr	r1, [r2, #0]
 800b23a:	43a9      	bics	r1, r5
 800b23c:	6011      	str	r1, [r2, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800b23e:	2101      	movs	r1, #1
 800b240:	1d82      	adds	r2, r0, #6
 800b242:	77d1      	strb	r1, [r2, #31]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	4314      	orrs	r4, r2
    __HAL_UNLOCK(hdma);
 800b248:	2200      	movs	r2, #0
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800b24a:	605c      	str	r4, [r3, #4]
    __HAL_UNLOCK(hdma);
 800b24c:	1d43      	adds	r3, r0, #5
 800b24e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800b250:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b252:	4293      	cmp	r3, r2
 800b254:	d1e3      	bne.n	800b21e <HAL_DMA_IRQHandler+0x36>
}
 800b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b258:	2408      	movs	r4, #8
 800b25a:	0027      	movs	r7, r4
 800b25c:	408f      	lsls	r7, r1
 800b25e:	423e      	tst	r6, r7
 800b260:	d0f9      	beq.n	800b256 <HAL_DMA_IRQHandler+0x6e>
 800b262:	4225      	tst	r5, r4
 800b264:	d0f7      	beq.n	800b256 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b266:	250e      	movs	r5, #14
 800b268:	6814      	ldr	r4, [r2, #0]
 800b26a:	43ac      	bics	r4, r5
 800b26c:	6014      	str	r4, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 800b26e:	2201      	movs	r2, #1
 800b270:	0015      	movs	r5, r2
 800b272:	408d      	lsls	r5, r1
 800b274:	0029      	movs	r1, r5
 800b276:	685c      	ldr	r4, [r3, #4]
 800b278:	4321      	orrs	r1, r4
 800b27a:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b27c:	1d83      	adds	r3, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b27e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800b280:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800b282:	2200      	movs	r2, #0
 800b284:	1d43      	adds	r3, r0, #5
 800b286:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800b288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d1c7      	bne.n	800b21e <HAL_DMA_IRQHandler+0x36>
 800b28e:	e7e2      	b.n	800b256 <HAL_DMA_IRQHandler+0x6e>
 800b290:	40020000 	.word	0x40020000

0800b294 <HAL_DMA_Abort_IT>:
{
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800b296:	2301      	movs	r3, #1
 800b298:	1d44      	adds	r4, r0, #5
 800b29a:	77e3      	strb	r3, [r4, #31]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b29c:	1d85      	adds	r5, r0, #6
 800b29e:	7fea      	ldrb	r2, [r5, #31]
 800b2a0:	2a02      	cmp	r2, #2
 800b2a2:	d003      	beq.n	800b2ac <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	63c2      	str	r2, [r0, #60]	; 0x3c
}
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b2ac:	260e      	movs	r6, #14
 800b2ae:	6802      	ldr	r2, [r0, #0]
 800b2b0:	6811      	ldr	r1, [r2, #0]
 800b2b2:	43b1      	bics	r1, r6
 800b2b4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b2b6:	6811      	ldr	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b2b8:	4e13      	ldr	r6, [pc, #76]	; (800b308 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE(hdma);
 800b2ba:	4399      	bics	r1, r3
 800b2bc:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b2be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2c0:	6811      	ldr	r1, [r2, #0]
 800b2c2:	4031      	ands	r1, r6
 800b2c4:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800b2c6:	4a11      	ldr	r2, [pc, #68]	; (800b30c <HAL_DMA_Abort_IT+0x78>)
 800b2c8:	211c      	movs	r1, #28
 800b2ca:	4694      	mov	ip, r2
 800b2cc:	6857      	ldr	r7, [r2, #4]
 800b2ce:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b2d0:	4011      	ands	r1, r2
 800b2d2:	408b      	lsls	r3, r1
 800b2d4:	4662      	mov	r2, ip
 800b2d6:	433b      	orrs	r3, r7
 800b2d8:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b2da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b2dc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800b2de:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800b2e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d005      	beq.n	800b2f2 <HAL_DMA_Abort_IT+0x5e>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	4032      	ands	r2, r6
 800b2ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b2ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800b2ee:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800b2f0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	77eb      	strb	r3, [r5, #31]
    __HAL_UNLOCK(hdma);
 800b2f6:	2500      	movs	r5, #0
 800b2f8:	77e5      	strb	r5, [r4, #31]
    if (hdma->XferAbortCallback != NULL)
 800b2fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800b2fc:	0013      	movs	r3, r2
 800b2fe:	42aa      	cmp	r2, r5
 800b300:	d0d2      	beq.n	800b2a8 <HAL_DMA_Abort_IT+0x14>
      hdma->XferAbortCallback(hdma);
 800b302:	4790      	blx	r2
 800b304:	002b      	movs	r3, r5
 800b306:	e7cf      	b.n	800b2a8 <HAL_DMA_Abort_IT+0x14>
 800b308:	fffffeff 	.word	0xfffffeff
 800b30c:	40020000 	.word	0x40020000

0800b310 <I2C_ITError.lto_priv.681>:
{
 800b310:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b312:	0002      	movs	r2, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b314:	0005      	movs	r5, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b316:	2600      	movs	r6, #0
 800b318:	3242      	adds	r2, #66	; 0x42
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b31a:	3541      	adds	r5, #65	; 0x41
 800b31c:	782b      	ldrb	r3, [r5, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b31e:	7016      	strb	r6, [r2, #0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b320:	4a2d      	ldr	r2, [pc, #180]	; (800b3d8 <I2C_ITError.lto_priv.681+0xc8>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b322:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b324:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b326:	8546      	strh	r6, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b328:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 800b32a:	0004      	movs	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 800b32c:	4311      	orrs	r1, r2
 800b32e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b330:	2b02      	cmp	r3, #2
 800b332:	d822      	bhi.n	800b37a <I2C_ITError.lto_priv.681+0x6a>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b334:	2103      	movs	r1, #3
 800b336:	f7fe fcf1 	bl	8009d1c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b33a:	2328      	movs	r3, #40	; 0x28
 800b33c:	702b      	strb	r3, [r5, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b33e:	4b27      	ldr	r3, [pc, #156]	; (800b3dc <I2C_ITError.lto_priv.681+0xcc>)
    hi2c->PreviousState = I2C_STATE_NONE;
 800b340:	6326      	str	r6, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b342:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b344:	2280      	movs	r2, #128	; 0x80
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	01d2      	lsls	r2, r2, #7
 800b34a:	6819      	ldr	r1, [r3, #0]
 800b34c:	4011      	ands	r1, r2
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b34e:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b350:	d01f      	beq.n	800b392 <I2C_ITError.lto_priv.681+0x82>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b352:	4923      	ldr	r1, [pc, #140]	; (800b3e0 <I2C_ITError.lto_priv.681+0xd0>)
    if (hi2c->hdmatx != NULL)
 800b354:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b356:	400a      	ands	r2, r1
 800b358:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d00c      	beq.n	800b378 <I2C_ITError.lto_priv.681+0x68>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b35e:	4b21      	ldr	r3, [pc, #132]	; (800b3e4 <I2C_ITError.lto_priv.681+0xd4>)
      __HAL_UNLOCK(hi2c);
 800b360:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b362:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b364:	0023      	movs	r3, r4
 800b366:	3340      	adds	r3, #64	; 0x40
 800b368:	701a      	strb	r2, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b36a:	f7ff ff93 	bl	800b294 <HAL_DMA_Abort_IT>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d002      	beq.n	800b378 <I2C_ITError.lto_priv.681+0x68>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b372:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b374:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b376:	4798      	blx	r3
}
 800b378:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b37a:	2107      	movs	r1, #7
 800b37c:	f7fe fcce 	bl	8009d1c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b380:	782b      	ldrb	r3, [r5, #0]
 800b382:	2b60      	cmp	r3, #96	; 0x60
 800b384:	d001      	beq.n	800b38a <I2C_ITError.lto_priv.681+0x7a>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b386:	2320      	movs	r3, #32
 800b388:	702b      	strb	r3, [r5, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b38a:	2300      	movs	r3, #0
 800b38c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b38e:	6363      	str	r3, [r4, #52]	; 0x34
 800b390:	e7d8      	b.n	800b344 <I2C_ITError.lto_priv.681+0x34>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b392:	2080      	movs	r0, #128	; 0x80
 800b394:	0200      	lsls	r0, r0, #8
 800b396:	4002      	ands	r2, r0
 800b398:	d013      	beq.n	800b3c2 <I2C_ITError.lto_priv.681+0xb2>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	4812      	ldr	r0, [pc, #72]	; (800b3e8 <I2C_ITError.lto_priv.681+0xd8>)
 800b39e:	4002      	ands	r2, r0
    if (hi2c->hdmarx != NULL)
 800b3a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b3a2:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0e7      	beq.n	800b378 <I2C_ITError.lto_priv.681+0x68>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b3a8:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <I2C_ITError.lto_priv.681+0xd4>)
 800b3aa:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b3ac:	0023      	movs	r3, r4
 800b3ae:	3340      	adds	r3, #64	; 0x40
 800b3b0:	7019      	strb	r1, [r3, #0]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b3b2:	f7ff ff6f 	bl	800b294 <HAL_DMA_Abort_IT>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d0de      	beq.n	800b378 <I2C_ITError.lto_priv.681+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b3ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b3bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b3be:	4798      	blx	r3
 800b3c0:	e7da      	b.n	800b378 <I2C_ITError.lto_priv.681+0x68>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b3c2:	782b      	ldrb	r3, [r5, #0]
 800b3c4:	3440      	adds	r4, #64	; 0x40
 800b3c6:	2b60      	cmp	r3, #96	; 0x60
 800b3c8:	d103      	bne.n	800b3d2 <I2C_ITError.lto_priv.681+0xc2>
    hi2c->State = HAL_I2C_STATE_READY;
 800b3ca:	3b40      	subs	r3, #64	; 0x40
 800b3cc:	702b      	strb	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800b3ce:	7022      	strb	r2, [r4, #0]
 800b3d0:	e7d2      	b.n	800b378 <I2C_ITError.lto_priv.681+0x68>
    __HAL_UNLOCK(hi2c);
 800b3d2:	7022      	strb	r2, [r4, #0]
 800b3d4:	e7d0      	b.n	800b378 <I2C_ITError.lto_priv.681+0x68>
 800b3d6:	46c0      	nop			; (mov r8, r8)
 800b3d8:	ffff0000 	.word	0xffff0000
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	ffffbfff 	.word	0xffffbfff
 800b3e4:	08009d65 	.word	0x08009d65
 800b3e8:	ffff7fff 	.word	0xffff7fff

0800b3ec <I2C_Slave_ISR_IT>:
{
 800b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ee:	46c6      	mov	lr, r8
  __HAL_LOCK(hi2c);
 800b3f0:	0007      	movs	r7, r0
{
 800b3f2:	b500      	push	{lr}
  __HAL_LOCK(hi2c);
 800b3f4:	3740      	adds	r7, #64	; 0x40
{
 800b3f6:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800b3f8:	783a      	ldrb	r2, [r7, #0]
{
 800b3fa:	0004      	movs	r4, r0
  uint32_t tmpoptions = hi2c->XferOptions;
 800b3fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 800b3fe:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 800b400:	2002      	movs	r0, #2
 800b402:	2a01      	cmp	r2, #1
 800b404:	d100      	bne.n	800b408 <I2C_Slave_ISR_IT+0x1c>
 800b406:	e114      	b.n	800b632 <I2C_Slave_ISR_IT+0x246>
 800b408:	2201      	movs	r2, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b40a:	0909      	lsrs	r1, r1, #4
  __HAL_LOCK(hi2c);
 800b40c:	703a      	strb	r2, [r7, #0]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b40e:	4211      	tst	r1, r2
 800b410:	d05e      	beq.n	800b4d0 <I2C_Slave_ISR_IT+0xe4>
 800b412:	0931      	lsrs	r1, r6, #4
 800b414:	4211      	tst	r1, r2
 800b416:	d05b      	beq.n	800b4d0 <I2C_Slave_ISR_IT+0xe4>
    if (hi2c->XferCount == 0U)
 800b418:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d149      	bne.n	800b4b2 <I2C_Slave_ISR_IT+0xc6>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800b41e:	0022      	movs	r2, r4
 800b420:	3241      	adds	r2, #65	; 0x41
 800b422:	7811      	ldrb	r1, [r2, #0]
 800b424:	2928      	cmp	r1, #40	; 0x28
 800b426:	d134      	bne.n	800b492 <I2C_Slave_ISR_IT+0xa6>
 800b428:	2180      	movs	r1, #128	; 0x80
 800b42a:	0489      	lsls	r1, r1, #18
 800b42c:	428b      	cmp	r3, r1
 800b42e:	d130      	bne.n	800b492 <I2C_Slave_ISR_IT+0xa6>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b430:	0029      	movs	r1, r5
 800b432:	0020      	movs	r0, r4
 800b434:	f7fe fcb1 	bl	8009d9a <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b438:	2301      	movs	r3, #1
 800b43a:	4698      	mov	r8, r3
 800b43c:	06ab      	lsls	r3, r5, #26
 800b43e:	d400      	bmi.n	800b442 <I2C_Slave_ISR_IT+0x56>
 800b440:	e0f5      	b.n	800b62e <I2C_Slave_ISR_IT+0x242>
 800b442:	4643      	mov	r3, r8
 800b444:	0976      	lsrs	r6, r6, #5
 800b446:	421e      	tst	r6, r3
 800b448:	d100      	bne.n	800b44c <I2C_Slave_ISR_IT+0x60>
 800b44a:	e0f0      	b.n	800b62e <I2C_Slave_ISR_IT+0x242>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b44c:	2220      	movs	r2, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b44e:	6823      	ldr	r3, [r4, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b450:	2107      	movs	r1, #7
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b452:	681e      	ldr	r6, [r3, #0]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b454:	0020      	movs	r0, r4
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b456:	61da      	str	r2, [r3, #28]
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800b458:	f7fe fc60 	bl	8009d1c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b45c:	2280      	movs	r2, #128	; 0x80
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	0212      	lsls	r2, r2, #8
 800b462:	6859      	ldr	r1, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b464:	0020      	movs	r0, r4
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b466:	430a      	orrs	r2, r1
 800b468:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	497a      	ldr	r1, [pc, #488]	; (800b658 <I2C_Slave_ISR_IT+0x26c>)
 800b46e:	400a      	ands	r2, r1
 800b470:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 800b472:	f7fe fc84 	bl	8009d7e <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b476:	4642      	mov	r2, r8
 800b478:	0bb3      	lsrs	r3, r6, #14
 800b47a:	4213      	tst	r3, r2
 800b47c:	d100      	bne.n	800b480 <I2C_Slave_ISR_IT+0x94>
 800b47e:	e09e      	b.n	800b5be <I2C_Slave_ISR_IT+0x1d2>
    if (hi2c->hdmatx != NULL)
 800b480:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b482:	2b00      	cmp	r3, #0
 800b484:	d100      	bne.n	800b488 <I2C_Slave_ISR_IT+0x9c>
 800b486:	e0a1      	b.n	800b5cc <I2C_Slave_ISR_IT+0x1e0>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b490:	e09c      	b.n	800b5cc <I2C_Slave_ISR_IT+0x1e0>
 800b492:	2110      	movs	r1, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b494:	7810      	ldrb	r0, [r2, #0]
 800b496:	6822      	ldr	r2, [r4, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b498:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b49a:	2829      	cmp	r0, #41	; 0x29
 800b49c:	d1cc      	bne.n	800b438 <I2C_Slave_ISR_IT+0x4c>
 800b49e:	486f      	ldr	r0, [pc, #444]	; (800b65c <I2C_Slave_ISR_IT+0x270>)
 800b4a0:	4283      	cmp	r3, r0
 800b4a2:	d0c9      	beq.n	800b438 <I2C_Slave_ISR_IT+0x4c>
        I2C_Flush_TXDR(hi2c);
 800b4a4:	0020      	movs	r0, r4
 800b4a6:	f7fe fc6a 	bl	8009d7e <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800b4aa:	0020      	movs	r0, r4
 800b4ac:	f7fe fca4 	bl	8009df8 <I2C_ITSlaveSeqCplt>
 800b4b0:	e7c2      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4b2:	2110      	movs	r1, #16
 800b4b4:	6822      	ldr	r2, [r4, #0]
 800b4b6:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4b8:	2204      	movs	r2, #4
 800b4ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	6462      	str	r2, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b4c0:	4a67      	ldr	r2, [pc, #412]	; (800b660 <I2C_Slave_ISR_IT+0x274>)
 800b4c2:	4213      	tst	r3, r2
 800b4c4:	d1b8      	bne.n	800b438 <I2C_Slave_ISR_IT+0x4c>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b4c8:	0020      	movs	r0, r4
 800b4ca:	f7ff ff21 	bl	800b310 <I2C_ITError.lto_priv.681>
 800b4ce:	e7b3      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	0769      	lsls	r1, r5, #29
 800b4d4:	d51f      	bpl.n	800b516 <I2C_Slave_ISR_IT+0x12a>
 800b4d6:	08b1      	lsrs	r1, r6, #2
 800b4d8:	4211      	tst	r1, r2
 800b4da:	d01c      	beq.n	800b516 <I2C_Slave_ISR_IT+0x12a>
    if (hi2c->XferCount > 0U)
 800b4dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b4de:	2a00      	cmp	r2, #0
 800b4e0:	d00f      	beq.n	800b502 <I2C_Slave_ISR_IT+0x116>
      tmpITFlags &= ~I2C_FLAG_RXNE;
 800b4e2:	2204      	movs	r2, #4
 800b4e4:	4395      	bics	r5, r2
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4e6:	6822      	ldr	r2, [r4, #0]
 800b4e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4ec:	700a      	strb	r2, [r1, #0]
      hi2c->pBuffPtr++;
 800b4ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b4f0:	3201      	adds	r2, #1
 800b4f2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b4f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b4f6:	3a01      	subs	r2, #1
 800b4f8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b4fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b4fc:	3a01      	subs	r2, #1
 800b4fe:	b292      	uxth	r2, r2
 800b500:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b502:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b504:	2a00      	cmp	r2, #0
 800b506:	d197      	bne.n	800b438 <I2C_Slave_ISR_IT+0x4c>
 800b508:	4a54      	ldr	r2, [pc, #336]	; (800b65c <I2C_Slave_ISR_IT+0x270>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d094      	beq.n	800b438 <I2C_Slave_ISR_IT+0x4c>
        I2C_ITSlaveSeqCplt(hi2c);
 800b50e:	0020      	movs	r0, r4
 800b510:	f7fe fc72 	bl	8009df8 <I2C_ITSlaveSeqCplt>
 800b514:	e790      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b516:	2201      	movs	r2, #1
 800b518:	0729      	lsls	r1, r5, #28
 800b51a:	d532      	bpl.n	800b582 <I2C_Slave_ISR_IT+0x196>
 800b51c:	08f1      	lsrs	r1, r6, #3
 800b51e:	4211      	tst	r1, r2
 800b520:	d02f      	beq.n	800b582 <I2C_Slave_ISR_IT+0x196>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b522:	0023      	movs	r3, r4
 800b524:	2128      	movs	r1, #40	; 0x28
 800b526:	3341      	adds	r3, #65	; 0x41
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	400b      	ands	r3, r1
 800b52e:	428b      	cmp	r3, r1
 800b530:	d122      	bne.n	800b578 <I2C_Slave_ISR_IT+0x18c>
    transferdirection = I2C_GET_DIR(hi2c);
 800b532:	6993      	ldr	r3, [r2, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b534:	6993      	ldr	r3, [r2, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b536:	6891      	ldr	r1, [r2, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b538:	68d0      	ldr	r0, [r2, #12]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b53a:	68e0      	ldr	r0, [r4, #12]
 800b53c:	2802      	cmp	r0, #2
 800b53e:	d114      	bne.n	800b56a <I2C_Slave_ISR_IT+0x17e>
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b540:	0c1b      	lsrs	r3, r3, #16
 800b542:	30fc      	adds	r0, #252	; 0xfc
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b544:	0589      	lsls	r1, r1, #22
 800b546:	0f49      	lsrs	r1, r1, #29
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b548:	4003      	ands	r3, r0
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800b54a:	404b      	eors	r3, r1
 800b54c:	2106      	movs	r1, #6
 800b54e:	400b      	ands	r3, r1
 800b550:	d10b      	bne.n	800b56a <I2C_Slave_ISR_IT+0x17e>
        hi2c->AddrEventCount++;
 800b552:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b554:	3101      	adds	r1, #1
 800b556:	64a1      	str	r1, [r4, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b558:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b55a:	2902      	cmp	r1, #2
 800b55c:	d000      	beq.n	800b560 <I2C_Slave_ISR_IT+0x174>
 800b55e:	e76b      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b560:	3106      	adds	r1, #6
          hi2c->AddrEventCount = 0U;
 800b562:	64a3      	str	r3, [r4, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b564:	61d1      	str	r1, [r2, #28]
          __HAL_UNLOCK(hi2c);
 800b566:	703b      	strb	r3, [r7, #0]
 800b568:	e766      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b56a:	2104      	movs	r1, #4
 800b56c:	0020      	movs	r0, r4
 800b56e:	f7fe fbd5 	bl	8009d1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b572:	2300      	movs	r3, #0
 800b574:	703b      	strb	r3, [r7, #0]
 800b576:	e75f      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b578:	2308      	movs	r3, #8
 800b57a:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 800b57c:	2300      	movs	r3, #0
 800b57e:	703b      	strb	r3, [r7, #0]
 800b580:	e75a      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b582:	2201      	movs	r2, #1
 800b584:	07a9      	lsls	r1, r5, #30
 800b586:	d400      	bmi.n	800b58a <I2C_Slave_ISR_IT+0x19e>
 800b588:	e756      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
 800b58a:	0871      	lsrs	r1, r6, #1
 800b58c:	4211      	tst	r1, r2
 800b58e:	d100      	bne.n	800b592 <I2C_Slave_ISR_IT+0x1a6>
 800b590:	e752      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
    if (hi2c->XferCount > 0U)
 800b592:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b594:	2a00      	cmp	r2, #0
 800b596:	d00d      	beq.n	800b5b4 <I2C_Slave_ISR_IT+0x1c8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b59a:	6822      	ldr	r2, [r4, #0]
 800b59c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 800b59e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b5a0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800b5a2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800b5a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5a6:	3b01      	subs	r3, #1
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b5ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	8523      	strh	r3, [r4, #40]	; 0x28
 800b5b2:	e741      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b5b4:	4a2a      	ldr	r2, [pc, #168]	; (800b660 <I2C_Slave_ISR_IT+0x274>)
 800b5b6:	4213      	tst	r3, r2
 800b5b8:	d000      	beq.n	800b5bc <I2C_Slave_ISR_IT+0x1d0>
 800b5ba:	e73d      	b.n	800b438 <I2C_Slave_ISR_IT+0x4c>
 800b5bc:	e7a7      	b.n	800b50e <I2C_Slave_ISR_IT+0x122>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b5be:	0bf6      	lsrs	r6, r6, #15
 800b5c0:	4216      	tst	r6, r2
 800b5c2:	d003      	beq.n	800b5cc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->hdmarx != NULL)
 800b5c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d000      	beq.n	800b5cc <I2C_Slave_ISR_IT+0x1e0>
 800b5ca:	e75d      	b.n	800b488 <I2C_Slave_ISR_IT+0x9c>
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b5cc:	076b      	lsls	r3, r5, #29
 800b5ce:	d511      	bpl.n	800b5f4 <I2C_Slave_ISR_IT+0x208>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b5d0:	2304      	movs	r3, #4
 800b5d2:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800b5dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5de:	3301      	adds	r3, #1
 800b5e0:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b5e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <I2C_Slave_ISR_IT+0x208>
      hi2c->XferSize--;
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b5ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5ee:	3b01      	subs	r3, #1
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 800b5f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <I2C_Slave_ISR_IT+0x216>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5fa:	2304      	movs	r3, #4
 800b5fc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b5fe:	4313      	orrs	r3, r2
 800b600:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b602:	0022      	movs	r2, r4
  hi2c->PreviousState = I2C_STATE_NONE;
 800b604:	2300      	movs	r3, #0
 800b606:	0026      	movs	r6, r4
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b608:	3242      	adds	r2, #66	; 0x42
  hi2c->PreviousState = I2C_STATE_NONE;
 800b60a:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b60c:	7013      	strb	r3, [r2, #0]
  hi2c->XferISR = NULL;
 800b60e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b612:	3641      	adds	r6, #65	; 0x41
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00f      	beq.n	800b638 <I2C_Slave_ISR_IT+0x24c>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b618:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b61a:	0020      	movs	r0, r4
 800b61c:	f7ff fe78 	bl	800b310 <I2C_ITError.lto_priv.681>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b620:	7833      	ldrb	r3, [r6, #0]
 800b622:	2b28      	cmp	r3, #40	; 0x28
 800b624:	d103      	bne.n	800b62e <I2C_Slave_ISR_IT+0x242>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b626:	0029      	movs	r1, r5
 800b628:	0020      	movs	r0, r4
 800b62a:	f7fe fbb6 	bl	8009d9a <I2C_ITListenCplt>
  __HAL_UNLOCK(hi2c);
 800b62e:	2000      	movs	r0, #0
 800b630:	7038      	strb	r0, [r7, #0]
}
 800b632:	bc04      	pop	{r2}
 800b634:	4690      	mov	r8, r2
 800b636:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b638:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b63a:	4d08      	ldr	r5, [pc, #32]	; (800b65c <I2C_Slave_ISR_IT+0x270>)
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	d006      	beq.n	800b64e <I2C_Slave_ISR_IT+0x262>
    I2C_ITSlaveSeqCplt(hi2c);
 800b640:	0020      	movs	r0, r4
 800b642:	f7fe fbd9 	bl	8009df8 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800b646:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b648:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b64a:	7033      	strb	r3, [r6, #0]
 800b64c:	e7ef      	b.n	800b62e <I2C_Slave_ISR_IT+0x242>
 800b64e:	2320      	movs	r3, #32
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b650:	7832      	ldrb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b652:	7033      	strb	r3, [r6, #0]
 800b654:	e7eb      	b.n	800b62e <I2C_Slave_ISR_IT+0x242>
 800b656:	46c0      	nop			; (mov r8, r8)
 800b658:	fe00e800 	.word	0xfe00e800
 800b65c:	ffff0000 	.word	0xffff0000
 800b660:	feffffff 	.word	0xfeffffff

0800b664 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b664:	2338      	movs	r3, #56	; 0x38
 800b666:	4a21      	ldr	r2, [pc, #132]	; (800b6ec <HAL_RCC_GetSysClockFreq+0x88>)
{
 800b668:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b66a:	6891      	ldr	r1, [r2, #8]
 800b66c:	0014      	movs	r4, r2
 800b66e:	4219      	tst	r1, r3
 800b670:	d108      	bne.n	800b684 <HAL_RCC_GetSysClockFreq+0x20>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b672:	2101      	movs	r1, #1
 800b674:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b676:	481e      	ldr	r0, [pc, #120]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b678:	049b      	lsls	r3, r3, #18
 800b67a:	0f5b      	lsrs	r3, r3, #29
 800b67c:	4099      	lsls	r1, r3
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b67e:	f003 fa59 	bl	800eb34 <__udivsi3>
}
 800b682:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b684:	6891      	ldr	r1, [r2, #8]
 800b686:	4019      	ands	r1, r3
 800b688:	2908      	cmp	r1, #8
 800b68a:	d02a      	beq.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x7e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b68c:	6891      	ldr	r1, [r2, #8]
 800b68e:	4019      	ands	r1, r3
 800b690:	2910      	cmp	r1, #16
 800b692:	d11a      	bne.n	800b6ca <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b694:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b696:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b698:	43db      	mvns	r3, r3
 800b69a:	227f      	movs	r2, #127	; 0x7f
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b69c:	68e5      	ldr	r5, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b69e:	0649      	lsls	r1, r1, #25
 800b6a0:	0f49      	lsrs	r1, r1, #29
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b6a2:	0a2d      	lsrs	r5, r5, #8
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b6a4:	3101      	adds	r1, #1
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b6a6:	4015      	ands	r5, r2
    switch (pllsource)
 800b6a8:	079b      	lsls	r3, r3, #30
 800b6aa:	d109      	bne.n	800b6c0 <HAL_RCC_GetSysClockFreq+0x5c>
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b6ac:	4811      	ldr	r0, [pc, #68]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x90>)
 800b6ae:	f003 fa41 	bl	800eb34 <__udivsi3>
 800b6b2:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800b6b4:	68e1      	ldr	r1, [r4, #12]
 800b6b6:	0f49      	lsrs	r1, r1, #29
 800b6b8:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800b6ba:	f003 fa3b 	bl	800eb34 <__udivsi3>
 800b6be:	e7e0      	b.n	800b682 <HAL_RCC_GetSysClockFreq+0x1e>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800b6c0:	480b      	ldr	r0, [pc, #44]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x8c>)
 800b6c2:	f003 fa37 	bl	800eb34 <__udivsi3>
 800b6c6:	4368      	muls	r0, r5
 800b6c8:	e7f4      	b.n	800b6b4 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800b6ca:	6891      	ldr	r1, [r2, #8]
 800b6cc:	4019      	ands	r1, r3
 800b6ce:	2920      	cmp	r1, #32
 800b6d0:	d009      	beq.n	800b6e6 <HAL_RCC_GetSysClockFreq+0x82>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800b6d2:	6892      	ldr	r2, [r2, #8]
    sysclockfreq = 0U;
 800b6d4:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	2b18      	cmp	r3, #24
 800b6da:	d1d2      	bne.n	800b682 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSI_VALUE;
 800b6dc:	20fa      	movs	r0, #250	; 0xfa
 800b6de:	01c0      	lsls	r0, r0, #7
 800b6e0:	e7cf      	b.n	800b682 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = HSE_VALUE;
 800b6e2:	4804      	ldr	r0, [pc, #16]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x90>)
 800b6e4:	e7cd      	b.n	800b682 <HAL_RCC_GetSysClockFreq+0x1e>
    sysclockfreq = LSE_VALUE;
 800b6e6:	2080      	movs	r0, #128	; 0x80
 800b6e8:	0200      	lsls	r0, r0, #8
 800b6ea:	e7ca      	b.n	800b682 <HAL_RCC_GetSysClockFreq+0x1e>
 800b6ec:	40021000 	.word	0x40021000
 800b6f0:	00f42400 	.word	0x00f42400
 800b6f4:	007a1200 	.word	0x007a1200

0800b6f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800b6f8:	4b04      	ldr	r3, [pc, #16]	; (800b70c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	4210      	tst	r0, r2
 800b6fe:	d000      	beq.n	800b702 <HAL_GPIO_EXTI_IRQHandler+0xa>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800b700:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800b702:	691a      	ldr	r2, [r3, #16]
 800b704:	4202      	tst	r2, r0
 800b706:	d000      	beq.n	800b70a <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800b708:	6118      	str	r0, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 800b70a:	4770      	bx	lr
 800b70c:	40021800 	.word	0x40021800

0800b710 <HAL_GPIO_Init>:
{
 800b710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b712:	4645      	mov	r5, r8
 800b714:	46de      	mov	lr, fp
 800b716:	4657      	mov	r7, sl
 800b718:	464e      	mov	r6, r9
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b71a:	2201      	movs	r2, #1
{
 800b71c:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b71e:	680b      	ldr	r3, [r1, #0]
{
 800b720:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b722:	9300      	str	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b724:	4690      	mov	r8, r2
  uint32_t position = 0x00u;
 800b726:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b728:	9a00      	ldr	r2, [sp, #0]
 800b72a:	40da      	lsrs	r2, r3
 800b72c:	d106      	bne.n	800b73c <HAL_GPIO_Init+0x2c>
}
 800b72e:	b003      	add	sp, #12
 800b730:	bc3c      	pop	{r2, r3, r4, r5}
 800b732:	4690      	mov	r8, r2
 800b734:	4699      	mov	r9, r3
 800b736:	46a2      	mov	sl, r4
 800b738:	46ab      	mov	fp, r5
 800b73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b73c:	4642      	mov	r2, r8
 800b73e:	409a      	lsls	r2, r3
 800b740:	4691      	mov	r9, r2
 800b742:	464c      	mov	r4, r9
 800b744:	9a00      	ldr	r2, [sp, #0]
 800b746:	4022      	ands	r2, r4
    if (iocurrent != 0x00u)
 800b748:	d100      	bne.n	800b74c <HAL_GPIO_Init+0x3c>
 800b74a:	e0b4      	b.n	800b8b6 <HAL_GPIO_Init+0x1a6>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b74c:	684c      	ldr	r4, [r1, #4]
 800b74e:	2610      	movs	r6, #16
 800b750:	0025      	movs	r5, r4
 800b752:	43b5      	bics	r5, r6
 800b754:	46ac      	mov	ip, r5
 800b756:	2d02      	cmp	r5, #2
 800b758:	d116      	bne.n	800b788 <HAL_GPIO_Init+0x78>
        temp = GPIOx->AFR[position >> 3u];
 800b75a:	08dd      	lsrs	r5, r3, #3
 800b75c:	00ad      	lsls	r5, r5, #2
 800b75e:	1945      	adds	r5, r0, r5
 800b760:	6a2e      	ldr	r6, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b762:	270f      	movs	r7, #15
        temp = GPIOx->AFR[position >> 3u];
 800b764:	46b2      	mov	sl, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b766:	2607      	movs	r6, #7
 800b768:	401e      	ands	r6, r3
 800b76a:	00b6      	lsls	r6, r6, #2
 800b76c:	40b7      	lsls	r7, r6
 800b76e:	46bb      	mov	fp, r7
 800b770:	9501      	str	r5, [sp, #4]
 800b772:	4657      	mov	r7, sl
 800b774:	465d      	mov	r5, fp
 800b776:	43af      	bics	r7, r5
 800b778:	46ba      	mov	sl, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b77a:	690f      	ldr	r7, [r1, #16]
 800b77c:	4655      	mov	r5, sl
 800b77e:	40b7      	lsls	r7, r6
 800b780:	003e      	movs	r6, r7
 800b782:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800b784:	9d01      	ldr	r5, [sp, #4]
 800b786:	622e      	str	r6, [r5, #32]
 800b788:	005d      	lsls	r5, r3, #1
 800b78a:	46aa      	mov	sl, r5
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b78c:	2503      	movs	r5, #3
 800b78e:	4657      	mov	r7, sl
 800b790:	40bd      	lsls	r5, r7
 800b792:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800b794:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b796:	2703      	movs	r7, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b798:	402e      	ands	r6, r5
 800b79a:	46b3      	mov	fp, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b79c:	0026      	movs	r6, r4
 800b79e:	403e      	ands	r6, r7
 800b7a0:	4657      	mov	r7, sl
 800b7a2:	40be      	lsls	r6, r7
 800b7a4:	465f      	mov	r7, fp
 800b7a6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800b7a8:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b7aa:	4666      	mov	r6, ip
 800b7ac:	3e01      	subs	r6, #1
 800b7ae:	2e01      	cmp	r6, #1
 800b7b0:	d813      	bhi.n	800b7da <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR;
 800b7b2:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b7b4:	4657      	mov	r7, sl
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b7b6:	402e      	ands	r6, r5
 800b7b8:	46b4      	mov	ip, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b7ba:	68ce      	ldr	r6, [r1, #12]
 800b7bc:	40be      	lsls	r6, r7
 800b7be:	4667      	mov	r7, ip
 800b7c0:	433e      	orrs	r6, r7
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b7c2:	464f      	mov	r7, r9
        GPIOx->OSPEEDR = temp;
 800b7c4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800b7c6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b7c8:	43be      	bics	r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b7ca:	4647      	mov	r7, r8
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b7cc:	46b4      	mov	ip, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b7ce:	0926      	lsrs	r6, r4, #4
 800b7d0:	403e      	ands	r6, r7
 800b7d2:	409e      	lsls	r6, r3
 800b7d4:	4667      	mov	r7, ip
 800b7d6:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800b7d8:	6046      	str	r6, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b7da:	4657      	mov	r7, sl
      temp = GPIOx->PUPDR;
 800b7dc:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b7de:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b7e0:	688e      	ldr	r6, [r1, #8]
 800b7e2:	40be      	lsls	r6, r7
 800b7e4:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 800b7e6:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b7e8:	2580      	movs	r5, #128	; 0x80
 800b7ea:	056d      	lsls	r5, r5, #21
 800b7ec:	422c      	tst	r4, r5
 800b7ee:	d062      	beq.n	800b8b6 <HAL_GPIO_Init+0x1a6>
 800b7f0:	4d32      	ldr	r5, [pc, #200]	; (800b8bc <HAL_GPIO_Init+0x1ac>)
        temp = EXTI->EXTICR[position >> 2u];
 800b7f2:	089e      	lsrs	r6, r3, #2
 800b7f4:	46ac      	mov	ip, r5
 800b7f6:	00b6      	lsls	r6, r6, #2
 800b7f8:	4466      	add	r6, ip
 800b7fa:	6e35      	ldr	r5, [r6, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b7fc:	001f      	movs	r7, r3
        temp = EXTI->EXTICR[position >> 2u];
 800b7fe:	46aa      	mov	sl, r5
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b800:	2503      	movs	r5, #3
 800b802:	402f      	ands	r7, r5
 800b804:	40af      	lsls	r7, r5
 800b806:	46bc      	mov	ip, r7
 800b808:	270f      	movs	r7, #15
 800b80a:	4665      	mov	r5, ip
 800b80c:	40af      	lsls	r7, r5
 800b80e:	4655      	mov	r5, sl
 800b810:	43bd      	bics	r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b812:	27a0      	movs	r7, #160	; 0xa0
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b814:	46a9      	mov	r9, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b816:	05ff      	lsls	r7, r7, #23
 800b818:	2500      	movs	r5, #0
 800b81a:	42b8      	cmp	r0, r7
 800b81c:	d00f      	beq.n	800b83e <HAL_GPIO_Init+0x12e>
 800b81e:	4d28      	ldr	r5, [pc, #160]	; (800b8c0 <HAL_GPIO_Init+0x1b0>)
 800b820:	46aa      	mov	sl, r5
 800b822:	4645      	mov	r5, r8
 800b824:	4550      	cmp	r0, sl
 800b826:	d00a      	beq.n	800b83e <HAL_GPIO_Init+0x12e>
 800b828:	4d26      	ldr	r5, [pc, #152]	; (800b8c4 <HAL_GPIO_Init+0x1b4>)
 800b82a:	46aa      	mov	sl, r5
 800b82c:	2502      	movs	r5, #2
 800b82e:	4550      	cmp	r0, sl
 800b830:	d005      	beq.n	800b83e <HAL_GPIO_Init+0x12e>
 800b832:	4d25      	ldr	r5, [pc, #148]	; (800b8c8 <HAL_GPIO_Init+0x1b8>)
 800b834:	46aa      	mov	sl, r5
 800b836:	2505      	movs	r5, #5
 800b838:	4550      	cmp	r0, sl
 800b83a:	d100      	bne.n	800b83e <HAL_GPIO_Init+0x12e>
 800b83c:	3d02      	subs	r5, #2
 800b83e:	4667      	mov	r7, ip
 800b840:	40bd      	lsls	r5, r7
 800b842:	464f      	mov	r7, r9
 800b844:	433d      	orrs	r5, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800b846:	6635      	str	r5, [r6, #96]	; 0x60
        temp = EXTI->IMR1;
 800b848:	4d20      	ldr	r5, [pc, #128]	; (800b8cc <HAL_GPIO_Init+0x1bc>)
 800b84a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800b84c:	46b1      	mov	r9, r6
          temp |= iocurrent;
 800b84e:	464f      	mov	r7, r9
 800b850:	4317      	orrs	r7, r2
 800b852:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b854:	2780      	movs	r7, #128	; 0x80
 800b856:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 800b858:	43d6      	mvns	r6, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b85a:	423c      	tst	r4, r7
 800b85c:	d102      	bne.n	800b864 <HAL_GPIO_Init+0x154>
        temp &= ~(iocurrent);
 800b85e:	464f      	mov	r7, r9
 800b860:	4037      	ands	r7, r6
 800b862:	46bc      	mov	ip, r7
        EXTI->IMR1 = temp;
 800b864:	4667      	mov	r7, ip
 800b866:	67ef      	str	r7, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800b868:	0017      	movs	r7, r2
        temp = EXTI->EMR1;
 800b86a:	4d19      	ldr	r5, [pc, #100]	; (800b8d0 <HAL_GPIO_Init+0x1c0>)
 800b86c:	46ac      	mov	ip, r5
 800b86e:	6fed      	ldr	r5, [r5, #124]	; 0x7c
          temp |= iocurrent;
 800b870:	432f      	orrs	r7, r5
 800b872:	46b9      	mov	r9, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b874:	2780      	movs	r7, #128	; 0x80
 800b876:	02bf      	lsls	r7, r7, #10
 800b878:	423c      	tst	r4, r7
 800b87a:	d101      	bne.n	800b880 <HAL_GPIO_Init+0x170>
        temp &= ~(iocurrent);
 800b87c:	4035      	ands	r5, r6
 800b87e:	46a9      	mov	r9, r5
        EXTI->EMR1 = temp;
 800b880:	4d0e      	ldr	r5, [pc, #56]	; (800b8bc <HAL_GPIO_Init+0x1ac>)
 800b882:	4667      	mov	r7, ip
 800b884:	46aa      	mov	sl, r5
 800b886:	464d      	mov	r5, r9
 800b888:	67fd      	str	r5, [r7, #124]	; 0x7c
        temp = EXTI->RTSR1;
 800b88a:	4655      	mov	r5, sl
 800b88c:	682d      	ldr	r5, [r5, #0]
          temp |= iocurrent;
 800b88e:	002f      	movs	r7, r5
 800b890:	4317      	orrs	r7, r2
        temp = EXTI->RTSR1;
 800b892:	46a9      	mov	r9, r5
          temp |= iocurrent;
 800b894:	46bc      	mov	ip, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b896:	02e5      	lsls	r5, r4, #11
 800b898:	d402      	bmi.n	800b8a0 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 800b89a:	464f      	mov	r7, r9
 800b89c:	4037      	ands	r7, r6
 800b89e:	46bc      	mov	ip, r7
        EXTI->RTSR1 = temp;
 800b8a0:	4665      	mov	r5, ip
 800b8a2:	4657      	mov	r7, sl
 800b8a4:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 800b8a6:	687d      	ldr	r5, [r7, #4]
          temp |= iocurrent;
 800b8a8:	432a      	orrs	r2, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b8aa:	02a4      	lsls	r4, r4, #10
 800b8ac:	d401      	bmi.n	800b8b2 <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 800b8ae:	002a      	movs	r2, r5
 800b8b0:	4032      	ands	r2, r6
        EXTI->FTSR1 = temp;
 800b8b2:	4654      	mov	r4, sl
 800b8b4:	6062      	str	r2, [r4, #4]
    position++;
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	e736      	b.n	800b728 <HAL_GPIO_Init+0x18>
 800b8ba:	46c0      	nop			; (mov r8, r8)
 800b8bc:	40021800 	.word	0x40021800
 800b8c0:	50000400 	.word	0x50000400
 800b8c4:	50000800 	.word	0x50000800
 800b8c8:	50000c00 	.word	0x50000c00
 800b8cc:	40021804 	.word	0x40021804
 800b8d0:	40021808 	.word	0x40021808

0800b8d4 <HAL_UART_Init.constprop.103>:
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800b8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8d6:	4646      	mov	r6, r8
 800b8d8:	46d6      	mov	lr, sl
 800b8da:	464f      	mov	r7, r9
 800b8dc:	b5c0      	push	{r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800b8de:	1d05      	adds	r5, r0, #4
 800b8e0:	4bc6      	ldr	r3, [pc, #792]	; (800bbfc <HAL_UART_Init.constprop.103+0x328>)
 800b8e2:	6fee      	ldr	r6, [r5, #124]	; 0x7c
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 800b8e4:	b08a      	sub	sp, #40	; 0x28
 800b8e6:	0004      	movs	r4, r0
 800b8e8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_RESET)
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d16c      	bne.n	800b9c8 <HAL_UART_Init.constprop.103+0xf4>
    huart->Lock = HAL_UNLOCKED;
 800b8ee:	0003      	movs	r3, r0
 800b8f0:	6807      	ldr	r7, [r0, #0]
 800b8f2:	337c      	adds	r3, #124	; 0x7c
 800b8f4:	701e      	strb	r6, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8f6:	2214      	movs	r2, #20
 800b8f8:	0031      	movs	r1, r6
 800b8fa:	a805      	add	r0, sp, #20
 800b8fc:	f007 f9ae 	bl	8012c5c <memset>
  if(huart->Instance==USART1)
 800b900:	4547      	cmp	r7, r8
 800b902:	d000      	beq.n	800b906 <HAL_UART_Init.constprop.103+0x32>
 800b904:	e0a9      	b.n	800ba5a <HAL_UART_Init.constprop.103+0x186>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b906:	2080      	movs	r0, #128	; 0x80
 800b908:	4bbd      	ldr	r3, [pc, #756]	; (800bc00 <HAL_UART_Init.constprop.103+0x32c>)
 800b90a:	01c0      	lsls	r0, r0, #7
 800b90c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b90e:	4301      	orrs	r1, r0
 800b910:	6419      	str	r1, [r3, #64]	; 0x40
 800b912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b914:	4002      	ands	r2, r0
 800b916:	9204      	str	r2, [sp, #16]
 800b918:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b91a:	2201      	movs	r2, #1
 800b91c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b91e:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b920:	4311      	orrs	r1, r2
 800b922:	6359      	str	r1, [r3, #52]	; 0x34
 800b924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b926:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b928:	4013      	ands	r3, r2
 800b92a:	9303      	str	r3, [sp, #12]
 800b92c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800b92e:	23f0      	movs	r3, #240	; 0xf0
 800b930:	015b      	lsls	r3, r3, #5
 800b932:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b934:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b936:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b938:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800b93a:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b93c:	f7ff fee8 	bl	800b710 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800b940:	4fb0      	ldr	r7, [pc, #704]	; (800bc04 <HAL_UART_Init.constprop.103+0x330>)
 800b942:	4bb1      	ldr	r3, [pc, #708]	; (800bc08 <HAL_UART_Init.constprop.103+0x334>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b944:	2210      	movs	r2, #16
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800b946:	67bb      	str	r3, [r7, #120]	; 0x78
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800b948:	2333      	movs	r3, #51	; 0x33
 800b94a:	67fb      	str	r3, [r7, #124]	; 0x7c
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b94c:	1d3b      	adds	r3, r7, #4
 800b94e:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b950:	003b      	movs	r3, r7
 800b952:	3308      	adds	r3, #8
 800b954:	67de      	str	r6, [r3, #124]	; 0x7c
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b956:	003b      	movs	r3, r7
 800b958:	3270      	adds	r2, #112	; 0x70
 800b95a:	3388      	adds	r3, #136	; 0x88
 800b95c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b95e:	003b      	movs	r3, r7
 800b960:	338c      	adds	r3, #140	; 0x8c
 800b962:	601e      	str	r6, [r3, #0]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b964:	003b      	movs	r3, r7
 800b966:	3390      	adds	r3, #144	; 0x90
 800b968:	601e      	str	r6, [r3, #0]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800b96a:	003b      	movs	r3, r7
 800b96c:	3394      	adds	r3, #148	; 0x94
 800b96e:	601e      	str	r6, [r3, #0]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b970:	003b      	movs	r3, r7
 800b972:	3398      	adds	r3, #152	; 0x98
 800b974:	601e      	str	r6, [r3, #0]
 800b976:	2378      	movs	r3, #120	; 0x78
 800b978:	469a      	mov	sl, r3
 800b97a:	44ba      	add	sl, r7
 800b97c:	4650      	mov	r0, sl
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b97e:	4691      	mov	r9, r2
 800b980:	f7fe fa76 	bl	8009e70 <HAL_DMA_Init.part.0.constprop.144>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800b984:	4653      	mov	r3, sl
 800b986:	37a0      	adds	r7, #160	; 0xa0
 800b988:	6763      	str	r3, [r4, #116]	; 0x74
 800b98a:	603c      	str	r4, [r7, #0]
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800b98c:	4b9f      	ldr	r3, [pc, #636]	; (800bc0c <HAL_UART_Init.constprop.103+0x338>)
 800b98e:	4fa0      	ldr	r7, [pc, #640]	; (800bc10 <HAL_UART_Init.constprop.103+0x33c>)
 800b990:	657b      	str	r3, [r7, #84]	; 0x54
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800b992:	2332      	movs	r3, #50	; 0x32
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b994:	65fe      	str	r6, [r7, #92]	; 0x5c
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b996:	663e      	str	r6, [r7, #96]	; 0x60
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b998:	66be      	str	r6, [r7, #104]	; 0x68
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b99a:	66fe      	str	r6, [r7, #108]	; 0x6c
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800b99c:	673e      	str	r6, [r7, #112]	; 0x70
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b99e:	677e      	str	r6, [r7, #116]	; 0x74
 800b9a0:	003e      	movs	r6, r7
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800b9a2:	65bb      	str	r3, [r7, #88]	; 0x58
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	3654      	adds	r6, #84	; 0x54
 800b9a8:	0030      	movs	r0, r6
 800b9aa:	667b      	str	r3, [r7, #100]	; 0x64
 800b9ac:	f7fe fa60 	bl	8009e70 <HAL_DMA_Init.part.0.constprop.144>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b9b0:	21c6      	movs	r1, #198	; 0xc6
 800b9b2:	4a98      	ldr	r2, [pc, #608]	; (800bc14 <HAL_UART_Init.constprop.103+0x340>)
 800b9b4:	0089      	lsls	r1, r1, #2
 800b9b6:	5853      	ldr	r3, [r2, r1]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800b9b8:	67a6      	str	r6, [r4, #120]	; 0x78
 800b9ba:	021b      	lsls	r3, r3, #8
 800b9bc:	0a1b      	lsrs	r3, r3, #8
 800b9be:	67fc      	str	r4, [r7, #124]	; 0x7c
 800b9c0:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9c2:	2380      	movs	r3, #128	; 0x80
 800b9c4:	051b      	lsls	r3, r3, #20
 800b9c6:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b9c8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b9ce:	67eb      	str	r3, [r5, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 800b9d0:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d2:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 800b9d4:	438b      	bics	r3, r1
 800b9d6:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	69e1      	ldr	r1, [r4, #28]
 800b9dc:	4303      	orrs	r3, r0
 800b9de:	6960      	ldr	r0, [r4, #20]
  tmpreg |= (uint32_t)huart->FifoMode;
 800b9e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9e2:	4303      	orrs	r3, r0
 800b9e4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9e6:	6810      	ldr	r0, [r2, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 800b9e8:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9ea:	4e8b      	ldr	r6, [pc, #556]	; (800bc18 <HAL_UART_Init.constprop.103+0x344>)
 800b9ec:	4030      	ands	r0, r6
 800b9ee:	4303      	orrs	r3, r0
 800b9f0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f2:	6853      	ldr	r3, [r2, #4]
 800b9f4:	4889      	ldr	r0, [pc, #548]	; (800bc1c <HAL_UART_Init.constprop.103+0x348>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b9f6:	4e8a      	ldr	r6, [pc, #552]	; (800bc20 <HAL_UART_Init.constprop.103+0x34c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f8:	4003      	ands	r3, r0
 800b9fa:	68e0      	ldr	r0, [r4, #12]
 800b9fc:	4303      	orrs	r3, r0
 800b9fe:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba00:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba02:	42b2      	cmp	r2, r6
 800ba04:	d001      	beq.n	800ba0a <HAL_UART_Init.constprop.103+0x136>
    tmpreg |= huart->Init.OneBitSampling;
 800ba06:	6a23      	ldr	r3, [r4, #32]
 800ba08:	4318      	orrs	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba0a:	6893      	ldr	r3, [r2, #8]
 800ba0c:	4f85      	ldr	r7, [pc, #532]	; (800bc24 <HAL_UART_Init.constprop.103+0x350>)
 800ba0e:	403b      	ands	r3, r7
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba10:	270f      	movs	r7, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba12:	4303      	orrs	r3, r0
 800ba14:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba16:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800ba18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba1a:	43b8      	bics	r0, r7
 800ba1c:	4318      	orrs	r0, r3
 800ba1e:	62d0      	str	r0, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba20:	4542      	cmp	r2, r8
 800ba22:	d13a      	bne.n	800ba9a <HAL_UART_Init.constprop.103+0x1c6>
 800ba24:	2603      	movs	r6, #3
 800ba26:	4a76      	ldr	r2, [pc, #472]	; (800bc00 <HAL_UART_Init.constprop.103+0x32c>)
 800ba28:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800ba2a:	4a7f      	ldr	r2, [pc, #508]	; (800bc28 <HAL_UART_Init.constprop.103+0x354>)
 800ba2c:	4030      	ands	r0, r6
 800ba2e:	3201      	adds	r2, #1
 800ba30:	1812      	adds	r2, r2, r0
 800ba32:	7fd0      	ldrb	r0, [r2, #31]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba34:	2280      	movs	r2, #128	; 0x80
 800ba36:	0212      	lsls	r2, r2, #8
 800ba38:	4291      	cmp	r1, r2
 800ba3a:	d000      	beq.n	800ba3e <HAL_UART_Init.constprop.103+0x16a>
 800ba3c:	e3dc      	b.n	800c1f8 <HAL_UART_Init.constprop.103+0x924>
    switch (clocksource)
 800ba3e:	2808      	cmp	r0, #8
 800ba40:	d900      	bls.n	800ba44 <HAL_UART_Init.constprop.103+0x170>
 800ba42:	e3d6      	b.n	800c1f2 <HAL_UART_Init.constprop.103+0x91e>
 800ba44:	f003 f86c 	bl	800eb20 <__gnu_thumb1_case_uhi>
 800ba48:	03d504ec 	.word	0x03d504ec
 800ba4c:	03d5033e 	.word	0x03d5033e
 800ba50:	03d5037d 	.word	0x03d5037d
 800ba54:	03d503d5 	.word	0x03d503d5
 800ba58:	039e      	.short	0x039e
  else if(huart->Instance==USART2)
 800ba5a:	4b74      	ldr	r3, [pc, #464]	; (800bc2c <HAL_UART_Init.constprop.103+0x358>)
 800ba5c:	429f      	cmp	r7, r3
 800ba5e:	d1b3      	bne.n	800b9c8 <HAL_UART_Init.constprop.103+0xf4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ba60:	2080      	movs	r0, #128	; 0x80
 800ba62:	4b67      	ldr	r3, [pc, #412]	; (800bc00 <HAL_UART_Init.constprop.103+0x32c>)
 800ba64:	0280      	lsls	r0, r0, #10
 800ba66:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ba68:	4301      	orrs	r1, r0
 800ba6a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800ba6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba6e:	4002      	ands	r2, r0
 800ba70:	9202      	str	r2, [sp, #8]
 800ba72:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba74:	2201      	movs	r2, #1
 800ba76:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba78:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba7a:	4311      	orrs	r1, r2
 800ba7c:	6359      	str	r1, [r3, #52]	; 0x34
 800ba7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba80:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba82:	4013      	ands	r3, r2
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ba88:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba8a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ba8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba8e:	3b0a      	subs	r3, #10
 800ba90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800ba92:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba94:	f7ff fe3c 	bl	800b710 <HAL_GPIO_Init>
 800ba98:	e796      	b.n	800b9c8 <HAL_UART_Init.constprop.103+0xf4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba9a:	4864      	ldr	r0, [pc, #400]	; (800bc2c <HAL_UART_Init.constprop.103+0x358>)
 800ba9c:	4282      	cmp	r2, r0
 800ba9e:	d108      	bne.n	800bab2 <HAL_UART_Init.constprop.103+0x1de>
 800baa0:	260c      	movs	r6, #12
 800baa2:	4a57      	ldr	r2, [pc, #348]	; (800bc00 <HAL_UART_Init.constprop.103+0x32c>)
 800baa4:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800baa6:	4a60      	ldr	r2, [pc, #384]	; (800bc28 <HAL_UART_Init.constprop.103+0x354>)
 800baa8:	4030      	ands	r0, r6
 800baaa:	3205      	adds	r2, #5
 800baac:	1812      	adds	r2, r2, r0
 800baae:	7fd0      	ldrb	r0, [r2, #31]
 800bab0:	e7c0      	b.n	800ba34 <HAL_UART_Init.constprop.103+0x160>
 800bab2:	485f      	ldr	r0, [pc, #380]	; (800bc30 <HAL_UART_Init.constprop.103+0x35c>)
 800bab4:	4282      	cmp	r2, r0
 800bab6:	d101      	bne.n	800babc <HAL_UART_Init.constprop.103+0x1e8>
 800bab8:	f000 fcad 	bl	800c416 <HAL_UART_Init.constprop.103+0xb42>
 800babc:	485d      	ldr	r0, [pc, #372]	; (800bc34 <HAL_UART_Init.constprop.103+0x360>)
 800babe:	4282      	cmp	r2, r0
 800bac0:	d101      	bne.n	800bac6 <HAL_UART_Init.constprop.103+0x1f2>
 800bac2:	f000 fca8 	bl	800c416 <HAL_UART_Init.constprop.103+0xb42>
 800bac6:	42b2      	cmp	r2, r6
 800bac8:	d001      	beq.n	800bace <HAL_UART_Init.constprop.103+0x1fa>
 800baca:	f000 fc9c 	bl	800c406 <HAL_UART_Init.constprop.103+0xb32>
 800bace:	21c0      	movs	r1, #192	; 0xc0
 800bad0:	2080      	movs	r0, #128	; 0x80
 800bad2:	4a4b      	ldr	r2, [pc, #300]	; (800bc00 <HAL_UART_Init.constprop.103+0x32c>)
 800bad4:	0109      	lsls	r1, r1, #4
 800bad6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bad8:	00c0      	lsls	r0, r0, #3
 800bada:	400a      	ands	r2, r1
 800badc:	4282      	cmp	r2, r0
 800bade:	d100      	bne.n	800bae2 <HAL_UART_Init.constprop.103+0x20e>
 800bae0:	e155      	b.n	800bd8e <HAL_UART_Init.constprop.103+0x4ba>
 800bae2:	d900      	bls.n	800bae6 <HAL_UART_Init.constprop.103+0x212>
 800bae4:	e0c2      	b.n	800bc6c <HAL_UART_Init.constprop.103+0x398>
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	d100      	bne.n	800baec <HAL_UART_Init.constprop.103+0x218>
 800baea:	e0ed      	b.n	800bcc8 <HAL_UART_Init.constprop.103+0x3f4>
        ret = HAL_ERROR;
 800baec:	2601      	movs	r6, #1
  huart->NbRxDataToProcess = 1;
 800baee:	4b52      	ldr	r3, [pc, #328]	; (800bc38 <HAL_UART_Init.constprop.103+0x364>)
 800baf0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->NbTxDataToProcess = 1;
 800baf2:	2300      	movs	r3, #0
 800baf4:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxISR = NULL;
 800baf6:	6723      	str	r3, [r4, #112]	; 0x70
  if (UART_SetConfig(huart) == HAL_ERROR)
 800baf8:	2e01      	cmp	r6, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_UART_Init.constprop.103+0x22c>
 800bafc:	f000 fc7c 	bl	800c3f8 <HAL_UART_Init.constprop.103+0xb24>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	d049      	beq.n	800bb9c <HAL_UART_Init.constprop.103+0x2c8>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb08:	07d1      	lsls	r1, r2, #31
 800bb0a:	d505      	bpl.n	800bb18 <HAL_UART_Init.constprop.103+0x244>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb0c:	6859      	ldr	r1, [r3, #4]
 800bb0e:	484b      	ldr	r0, [pc, #300]	; (800bc3c <HAL_UART_Init.constprop.103+0x368>)
 800bb10:	4001      	ands	r1, r0
 800bb12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800bb14:	4301      	orrs	r1, r0
 800bb16:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb18:	0791      	lsls	r1, r2, #30
 800bb1a:	d505      	bpl.n	800bb28 <HAL_UART_Init.constprop.103+0x254>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb1c:	6859      	ldr	r1, [r3, #4]
 800bb1e:	4848      	ldr	r0, [pc, #288]	; (800bc40 <HAL_UART_Init.constprop.103+0x36c>)
 800bb20:	4001      	ands	r1, r0
 800bb22:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bb24:	4301      	orrs	r1, r0
 800bb26:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb28:	0751      	lsls	r1, r2, #29
 800bb2a:	d505      	bpl.n	800bb38 <HAL_UART_Init.constprop.103+0x264>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb2c:	6859      	ldr	r1, [r3, #4]
 800bb2e:	4845      	ldr	r0, [pc, #276]	; (800bc44 <HAL_UART_Init.constprop.103+0x370>)
 800bb30:	4001      	ands	r1, r0
 800bb32:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bb34:	4301      	orrs	r1, r0
 800bb36:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb38:	0711      	lsls	r1, r2, #28
 800bb3a:	d505      	bpl.n	800bb48 <HAL_UART_Init.constprop.103+0x274>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb3c:	6859      	ldr	r1, [r3, #4]
 800bb3e:	4842      	ldr	r0, [pc, #264]	; (800bc48 <HAL_UART_Init.constprop.103+0x374>)
 800bb40:	4001      	ands	r1, r0
 800bb42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800bb44:	4301      	orrs	r1, r0
 800bb46:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb48:	06d1      	lsls	r1, r2, #27
 800bb4a:	d505      	bpl.n	800bb58 <HAL_UART_Init.constprop.103+0x284>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb4c:	6899      	ldr	r1, [r3, #8]
 800bb4e:	483f      	ldr	r0, [pc, #252]	; (800bc4c <HAL_UART_Init.constprop.103+0x378>)
 800bb50:	4001      	ands	r1, r0
 800bb52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bb54:	4301      	orrs	r1, r0
 800bb56:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb58:	0691      	lsls	r1, r2, #26
 800bb5a:	d505      	bpl.n	800bb68 <HAL_UART_Init.constprop.103+0x294>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb5c:	6899      	ldr	r1, [r3, #8]
 800bb5e:	483c      	ldr	r0, [pc, #240]	; (800bc50 <HAL_UART_Init.constprop.103+0x37c>)
 800bb60:	4001      	ands	r1, r0
 800bb62:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800bb64:	4301      	orrs	r1, r0
 800bb66:	6099      	str	r1, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb68:	0651      	lsls	r1, r2, #25
 800bb6a:	d50f      	bpl.n	800bb8c <HAL_UART_Init.constprop.103+0x2b8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb6c:	6859      	ldr	r1, [r3, #4]
 800bb6e:	4f39      	ldr	r7, [pc, #228]	; (800bc54 <HAL_UART_Init.constprop.103+0x380>)
 800bb70:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800bb72:	4039      	ands	r1, r7
 800bb74:	4301      	orrs	r1, r0
 800bb76:	6059      	str	r1, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb78:	2180      	movs	r1, #128	; 0x80
 800bb7a:	0349      	lsls	r1, r1, #13
 800bb7c:	4288      	cmp	r0, r1
 800bb7e:	d105      	bne.n	800bb8c <HAL_UART_Init.constprop.103+0x2b8>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb80:	6859      	ldr	r1, [r3, #4]
 800bb82:	4835      	ldr	r0, [pc, #212]	; (800bc58 <HAL_UART_Init.constprop.103+0x384>)
 800bb84:	4001      	ands	r1, r0
 800bb86:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bb88:	4301      	orrs	r1, r0
 800bb8a:	6059      	str	r1, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb8c:	0612      	lsls	r2, r2, #24
 800bb8e:	d505      	bpl.n	800bb9c <HAL_UART_Init.constprop.103+0x2c8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	4932      	ldr	r1, [pc, #200]	; (800bc5c <HAL_UART_Init.constprop.103+0x388>)
 800bb94:	400a      	ands	r2, r1
 800bb96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bb98:	430a      	orrs	r2, r1
 800bb9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	4930      	ldr	r1, [pc, #192]	; (800bc60 <HAL_UART_Init.constprop.103+0x38c>)
 800bba0:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bba2:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bba4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bba6:	689a      	ldr	r2, [r3, #8]
 800bba8:	438a      	bics	r2, r1
 800bbaa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800bbac:	2201      	movs	r2, #1
 800bbae:	6819      	ldr	r1, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb4:	0022      	movs	r2, r4
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	3288      	adds	r2, #136	; 0x88
 800bbba:	6011      	str	r1, [r2, #0]
  return uwTick;
 800bbbc:	4a29      	ldr	r2, [pc, #164]	; (800bc64 <HAL_UART_Init.constprop.103+0x390>)
 800bbbe:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	071b      	lsls	r3, r3, #28
 800bbc4:	d501      	bpl.n	800bbca <HAL_UART_Init.constprop.103+0x2f6>
 800bbc6:	f000 fc0b 	bl	800c3e0 <HAL_UART_Init.constprop.103+0xb0c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	075b      	lsls	r3, r3, #29
 800bbd0:	d50a      	bpl.n	800bbe8 <HAL_UART_Init.constprop.103+0x314>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd2:	2180      	movs	r1, #128	; 0x80
 800bbd4:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <HAL_UART_Init.constprop.103+0x394>)
 800bbd6:	003a      	movs	r2, r7
 800bbd8:	03c9      	lsls	r1, r1, #15
 800bbda:	0020      	movs	r0, r4
 800bbdc:	f7fd ff9e 	bl	8009b1c <UART_WaitOnFlagUntilTimeout.constprop.104>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d001      	beq.n	800bbe8 <HAL_UART_Init.constprop.103+0x314>
 800bbe4:	f000 fc07 	bl	800c3f6 <HAL_UART_Init.constprop.103+0xb22>
  huart->RxState = HAL_UART_STATE_READY;
 800bbe8:	0022      	movs	r2, r4
  huart->gState = HAL_UART_STATE_READY;
 800bbea:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 800bbec:	3208      	adds	r2, #8
  huart->gState = HAL_UART_STATE_READY;
 800bbee:	67eb      	str	r3, [r5, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bbf0:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	347c      	adds	r4, #124	; 0x7c
 800bbf6:	7023      	strb	r3, [r4, #0]
 800bbf8:	f000 fbfe 	bl	800c3f8 <HAL_UART_Init.constprop.103+0xb24>
 800bbfc:	40013800 	.word	0x40013800
 800bc00:	40021000 	.word	0x40021000
 800bc04:	20000388 	.word	0x20000388
 800bc08:	40020008 	.word	0x40020008
 800bc0c:	4002001c 	.word	0x4002001c
 800bc10:	20000408 	.word	0x20000408
 800bc14:	e000e100 	.word	0xe000e100
 800bc18:	cfff69f3 	.word	0xcfff69f3
 800bc1c:	ffffcfff 	.word	0xffffcfff
 800bc20:	40008000 	.word	0x40008000
 800bc24:	11fff4ff 	.word	0x11fff4ff
 800bc28:	08018b9c 	.word	0x08018b9c
 800bc2c:	40004400 	.word	0x40004400
 800bc30:	40004800 	.word	0x40004800
 800bc34:	40004c00 	.word	0x40004c00
 800bc38:	00010001 	.word	0x00010001
 800bc3c:	fffdffff 	.word	0xfffdffff
 800bc40:	fffeffff 	.word	0xfffeffff
 800bc44:	fffbffff 	.word	0xfffbffff
 800bc48:	ffff7fff 	.word	0xffff7fff
 800bc4c:	ffffefff 	.word	0xffffefff
 800bc50:	ffffdfff 	.word	0xffffdfff
 800bc54:	ffefffff 	.word	0xffefffff
 800bc58:	ff9fffff 	.word	0xff9fffff
 800bc5c:	fff7ffff 	.word	0xfff7ffff
 800bc60:	ffffb7ff 	.word	0xffffb7ff
 800bc64:	20000288 	.word	0x20000288
 800bc68:	01ffffff 	.word	0x01ffffff
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc6c:	2080      	movs	r0, #128	; 0x80
 800bc6e:	0100      	lsls	r0, r0, #4
 800bc70:	4282      	cmp	r2, r0
 800bc72:	d071      	beq.n	800bd58 <HAL_UART_Init.constprop.103+0x484>
 800bc74:	428a      	cmp	r2, r1
 800bc76:	d000      	beq.n	800bc7a <HAL_UART_Init.constprop.103+0x3a6>
 800bc78:	e738      	b.n	800baec <HAL_UART_Init.constprop.103+0x218>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d020      	beq.n	800bcc0 <HAL_UART_Init.constprop.103+0x3ec>
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d100      	bne.n	800bc84 <HAL_UART_Init.constprop.103+0x3b0>
 800bc82:	e0d0      	b.n	800be26 <HAL_UART_Init.constprop.103+0x552>
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d100      	bne.n	800bc8a <HAL_UART_Init.constprop.103+0x3b6>
 800bc88:	e0d1      	b.n	800be2e <HAL_UART_Init.constprop.103+0x55a>
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d100      	bne.n	800bc90 <HAL_UART_Init.constprop.103+0x3bc>
 800bc8e:	e0d2      	b.n	800be36 <HAL_UART_Init.constprop.103+0x562>
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d100      	bne.n	800bc96 <HAL_UART_Init.constprop.103+0x3c2>
 800bc94:	e0d2      	b.n	800be3c <HAL_UART_Init.constprop.103+0x568>
 800bc96:	2b05      	cmp	r3, #5
 800bc98:	d100      	bne.n	800bc9c <HAL_UART_Init.constprop.103+0x3c8>
 800bc9a:	e0d3      	b.n	800be44 <HAL_UART_Init.constprop.103+0x570>
 800bc9c:	2b06      	cmp	r3, #6
 800bc9e:	d100      	bne.n	800bca2 <HAL_UART_Init.constprop.103+0x3ce>
 800bca0:	e0d3      	b.n	800be4a <HAL_UART_Init.constprop.103+0x576>
 800bca2:	2b07      	cmp	r3, #7
 800bca4:	d100      	bne.n	800bca8 <HAL_UART_Init.constprop.103+0x3d4>
 800bca6:	e0d3      	b.n	800be50 <HAL_UART_Init.constprop.103+0x57c>
 800bca8:	2b08      	cmp	r3, #8
 800bcaa:	d100      	bne.n	800bcae <HAL_UART_Init.constprop.103+0x3da>
 800bcac:	e0d4      	b.n	800be58 <HAL_UART_Init.constprop.103+0x584>
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d100      	bne.n	800bcb4 <HAL_UART_Init.constprop.103+0x3e0>
 800bcb2:	e0d4      	b.n	800be5e <HAL_UART_Init.constprop.103+0x58a>
 800bcb4:	2b0a      	cmp	r3, #10
 800bcb6:	d100      	bne.n	800bcba <HAL_UART_Init.constprop.103+0x3e6>
 800bcb8:	e0d5      	b.n	800be66 <HAL_UART_Init.constprop.103+0x592>
 800bcba:	2b0b      	cmp	r3, #11
 800bcbc:	d100      	bne.n	800bcc0 <HAL_UART_Init.constprop.103+0x3ec>
 800bcbe:	e0d6      	b.n	800be6e <HAL_UART_Init.constprop.103+0x59a>
 800bcc0:	2080      	movs	r0, #128	; 0x80
 800bcc2:	2308      	movs	r3, #8
 800bcc4:	0200      	lsls	r0, r0, #8
 800bcc6:	e02e      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bcc8:	f7fe f922 	bl	8009f10 <HAL_RCC_GetPCLK1Freq>
 800bccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcce:	2101      	movs	r1, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d021      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcd4:	1849      	adds	r1, r1, r1
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d01e      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcda:	3102      	adds	r1, #2
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d01b      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bce0:	3102      	adds	r1, #2
 800bce2:	2b03      	cmp	r3, #3
 800bce4:	d018      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bce6:	3102      	adds	r1, #2
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d015      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcec:	3102      	adds	r1, #2
 800bcee:	2b05      	cmp	r3, #5
 800bcf0:	d012      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcf2:	3102      	adds	r1, #2
 800bcf4:	2b06      	cmp	r3, #6
 800bcf6:	d00f      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcf8:	3104      	adds	r1, #4
 800bcfa:	2b07      	cmp	r3, #7
 800bcfc:	d00c      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bcfe:	3110      	adds	r1, #16
 800bd00:	2b08      	cmp	r3, #8
 800bd02:	d009      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bd04:	3120      	adds	r1, #32
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d006      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bd0a:	3140      	adds	r1, #64	; 0x40
 800bd0c:	2b0a      	cmp	r3, #10
 800bd0e:	d003      	beq.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bd10:	397f      	subs	r1, #127	; 0x7f
 800bd12:	2b0b      	cmp	r3, #11
 800bd14:	d100      	bne.n	800bd18 <HAL_UART_Init.constprop.103+0x444>
 800bd16:	31ff      	adds	r1, #255	; 0xff
 800bd18:	f002 ff0c 	bl	800eb34 <__udivsi3>
 800bd1c:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 800bd1e:	2600      	movs	r6, #0
 800bd20:	42b0      	cmp	r0, r6
 800bd22:	d100      	bne.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800bd24:	e6e3      	b.n	800baee <HAL_UART_Init.constprop.103+0x21a>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd26:	2103      	movs	r1, #3
 800bd28:	6862      	ldr	r2, [r4, #4]
 800bd2a:	4351      	muls	r1, r2
 800bd2c:	4281      	cmp	r1, r0
 800bd2e:	d900      	bls.n	800bd32 <HAL_UART_Init.constprop.103+0x45e>
 800bd30:	e6dc      	b.n	800baec <HAL_UART_Init.constprop.103+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd32:	0311      	lsls	r1, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd34:	4281      	cmp	r1, r0
 800bd36:	d200      	bcs.n	800bd3a <HAL_UART_Init.constprop.103+0x466>
 800bd38:	e6d8      	b.n	800baec <HAL_UART_Init.constprop.103+0x218>
        switch (clocksource)
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d900      	bls.n	800bd40 <HAL_UART_Init.constprop.103+0x46c>
 800bd3e:	e17f      	b.n	800c040 <HAL_UART_Init.constprop.103+0x76c>
 800bd40:	0018      	movs	r0, r3
 800bd42:	f002 feed 	bl	800eb20 <__gnu_thumb1_case_uhi>
 800bd46:	0097      	.short	0x0097
 800bd48:	00ce017d 	.word	0x00ce017d
 800bd4c:	0113017d 	.word	0x0113017d
 800bd50:	017d017d 	.word	0x017d017d
 800bd54:	0138017d 	.word	0x0138017d
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d015      	beq.n	800bd88 <HAL_UART_Init.constprop.103+0x4b4>
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d042      	beq.n	800bde6 <HAL_UART_Init.constprop.103+0x512>
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d043      	beq.n	800bdec <HAL_UART_Init.constprop.103+0x518>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d043      	beq.n	800bdf0 <HAL_UART_Init.constprop.103+0x51c>
 800bd68:	2b04      	cmp	r3, #4
 800bd6a:	d044      	beq.n	800bdf6 <HAL_UART_Init.constprop.103+0x522>
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	d045      	beq.n	800bdfc <HAL_UART_Init.constprop.103+0x528>
 800bd70:	2b06      	cmp	r3, #6
 800bd72:	d046      	beq.n	800be02 <HAL_UART_Init.constprop.103+0x52e>
 800bd74:	2b07      	cmp	r3, #7
 800bd76:	d047      	beq.n	800be08 <HAL_UART_Init.constprop.103+0x534>
 800bd78:	2b08      	cmp	r3, #8
 800bd7a:	d048      	beq.n	800be0e <HAL_UART_Init.constprop.103+0x53a>
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	d049      	beq.n	800be14 <HAL_UART_Init.constprop.103+0x540>
 800bd80:	2b0a      	cmp	r3, #10
 800bd82:	d04a      	beq.n	800be1a <HAL_UART_Init.constprop.103+0x546>
 800bd84:	2b0b      	cmp	r3, #11
 800bd86:	d04b      	beq.n	800be20 <HAL_UART_Init.constprop.103+0x54c>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	48af      	ldr	r0, [pc, #700]	; (800c048 <HAL_UART_Init.constprop.103+0x774>)
 800bd8c:	e7cb      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bd8e:	f7ff fc69 	bl	800b664 <HAL_RCC_GetSysClockFreq>
 800bd92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd94:	2101      	movs	r1, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d021      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bd9a:	1849      	adds	r1, r1, r1
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d01e      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bda0:	3102      	adds	r1, #2
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d01b      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bda6:	3102      	adds	r1, #2
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d018      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdac:	3102      	adds	r1, #2
 800bdae:	2b04      	cmp	r3, #4
 800bdb0:	d015      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdb2:	3102      	adds	r1, #2
 800bdb4:	2b05      	cmp	r3, #5
 800bdb6:	d012      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdb8:	3102      	adds	r1, #2
 800bdba:	2b06      	cmp	r3, #6
 800bdbc:	d00f      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdbe:	3104      	adds	r1, #4
 800bdc0:	2b07      	cmp	r3, #7
 800bdc2:	d00c      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdc4:	3110      	adds	r1, #16
 800bdc6:	2b08      	cmp	r3, #8
 800bdc8:	d009      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdca:	3120      	adds	r1, #32
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	d006      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdd0:	3140      	adds	r1, #64	; 0x40
 800bdd2:	2b0a      	cmp	r3, #10
 800bdd4:	d003      	beq.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bdd6:	397f      	subs	r1, #127	; 0x7f
 800bdd8:	2b0b      	cmp	r3, #11
 800bdda:	d100      	bne.n	800bdde <HAL_UART_Init.constprop.103+0x50a>
 800bddc:	31ff      	adds	r1, #255	; 0xff
 800bdde:	f002 fea9 	bl	800eb34 <__udivsi3>
 800bde2:	2304      	movs	r3, #4
 800bde4:	e79b      	b.n	800bd1e <HAL_UART_Init.constprop.103+0x44a>
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800bde6:	2302      	movs	r3, #2
 800bde8:	4898      	ldr	r0, [pc, #608]	; (800c04c <HAL_UART_Init.constprop.103+0x778>)
 800bdea:	e79c      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800bdec:	4898      	ldr	r0, [pc, #608]	; (800c050 <HAL_UART_Init.constprop.103+0x77c>)
 800bdee:	e79a      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	4898      	ldr	r0, [pc, #608]	; (800c054 <HAL_UART_Init.constprop.103+0x780>)
 800bdf4:	e797      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800bdf6:	2302      	movs	r3, #2
 800bdf8:	4897      	ldr	r0, [pc, #604]	; (800c058 <HAL_UART_Init.constprop.103+0x784>)
 800bdfa:	e794      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	4897      	ldr	r0, [pc, #604]	; (800c05c <HAL_UART_Init.constprop.103+0x788>)
 800be00:	e791      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be02:	2302      	movs	r3, #2
 800be04:	4896      	ldr	r0, [pc, #600]	; (800c060 <HAL_UART_Init.constprop.103+0x78c>)
 800be06:	e78e      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be08:	2302      	movs	r3, #2
 800be0a:	4896      	ldr	r0, [pc, #600]	; (800c064 <HAL_UART_Init.constprop.103+0x790>)
 800be0c:	e78b      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be0e:	2302      	movs	r3, #2
 800be10:	4895      	ldr	r0, [pc, #596]	; (800c068 <HAL_UART_Init.constprop.103+0x794>)
 800be12:	e788      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be14:	2302      	movs	r3, #2
 800be16:	4895      	ldr	r0, [pc, #596]	; (800c06c <HAL_UART_Init.constprop.103+0x798>)
 800be18:	e785      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be1a:	2302      	movs	r3, #2
 800be1c:	4894      	ldr	r0, [pc, #592]	; (800c070 <HAL_UART_Init.constprop.103+0x79c>)
 800be1e:	e782      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be20:	2302      	movs	r3, #2
 800be22:	4894      	ldr	r0, [pc, #592]	; (800c074 <HAL_UART_Init.constprop.103+0x7a0>)
 800be24:	e77f      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800be26:	2080      	movs	r0, #128	; 0x80
 800be28:	2308      	movs	r3, #8
 800be2a:	01c0      	lsls	r0, r0, #7
 800be2c:	e77b      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be2e:	2080      	movs	r0, #128	; 0x80
 800be30:	2308      	movs	r3, #8
 800be32:	0180      	lsls	r0, r0, #6
 800be34:	e777      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be36:	2308      	movs	r3, #8
 800be38:	488f      	ldr	r0, [pc, #572]	; (800c078 <HAL_UART_Init.constprop.103+0x7a4>)
 800be3a:	e774      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be3c:	2080      	movs	r0, #128	; 0x80
 800be3e:	2308      	movs	r3, #8
 800be40:	0140      	lsls	r0, r0, #5
 800be42:	e770      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be44:	2308      	movs	r3, #8
 800be46:	488d      	ldr	r0, [pc, #564]	; (800c07c <HAL_UART_Init.constprop.103+0x7a8>)
 800be48:	e76d      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be4a:	2308      	movs	r3, #8
 800be4c:	488c      	ldr	r0, [pc, #560]	; (800c080 <HAL_UART_Init.constprop.103+0x7ac>)
 800be4e:	e76a      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be50:	2080      	movs	r0, #128	; 0x80
 800be52:	2308      	movs	r3, #8
 800be54:	0100      	lsls	r0, r0, #4
 800be56:	e766      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be58:	2080      	movs	r0, #128	; 0x80
 800be5a:	00c0      	lsls	r0, r0, #3
 800be5c:	e763      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be5e:	2080      	movs	r0, #128	; 0x80
 800be60:	2308      	movs	r3, #8
 800be62:	0080      	lsls	r0, r0, #2
 800be64:	e75f      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be66:	2080      	movs	r0, #128	; 0x80
 800be68:	2308      	movs	r3, #8
 800be6a:	0040      	lsls	r0, r0, #1
 800be6c:	e75b      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
 800be6e:	2308      	movs	r3, #8
 800be70:	2080      	movs	r0, #128	; 0x80
 800be72:	e758      	b.n	800bd26 <HAL_UART_Init.constprop.103+0x452>
            pclk = HAL_RCC_GetPCLK1Freq();
 800be74:	f7fe f84c 	bl	8009f10 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be7a:	2201      	movs	r2, #1
 800be7c:	2300      	movs	r3, #0
 800be7e:	2900      	cmp	r1, #0
 800be80:	d07b      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be82:	2202      	movs	r2, #2
 800be84:	2300      	movs	r3, #0
 800be86:	2901      	cmp	r1, #1
 800be88:	d077      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800be8a:	2204      	movs	r2, #4
 800be8c:	2300      	movs	r3, #0
 800be8e:	2902      	cmp	r1, #2
 800be90:	d073      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800be92:	2206      	movs	r2, #6
 800be94:	2300      	movs	r3, #0
 800be96:	2903      	cmp	r1, #3
 800be98:	d06f      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800be9a:	2208      	movs	r2, #8
 800be9c:	2300      	movs	r3, #0
 800be9e:	2904      	cmp	r1, #4
 800bea0:	d06b      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800bea2:	220a      	movs	r2, #10
 800bea4:	2300      	movs	r3, #0
 800bea6:	2905      	cmp	r1, #5
 800bea8:	d067      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800beaa:	220c      	movs	r2, #12
 800beac:	2300      	movs	r3, #0
 800beae:	2906      	cmp	r1, #6
 800beb0:	d063      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800beb2:	2210      	movs	r2, #16
 800beb4:	2300      	movs	r3, #0
 800beb6:	2907      	cmp	r1, #7
 800beb8:	d05f      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800beba:	2220      	movs	r2, #32
 800bebc:	2300      	movs	r3, #0
 800bebe:	2908      	cmp	r1, #8
 800bec0:	d05b      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800bec2:	2240      	movs	r2, #64	; 0x40
 800bec4:	2300      	movs	r3, #0
 800bec6:	2909      	cmp	r1, #9
 800bec8:	d057      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800beca:	2280      	movs	r2, #128	; 0x80
 800becc:	2300      	movs	r3, #0
 800bece:	290a      	cmp	r1, #10
 800bed0:	d053      	beq.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800bed2:	2201      	movs	r2, #1
 800bed4:	2300      	movs	r3, #0
 800bed6:	290b      	cmp	r1, #11
 800bed8:	d14f      	bne.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
 800beda:	2280      	movs	r2, #128	; 0x80
 800bedc:	2300      	movs	r3, #0
 800bede:	0052      	lsls	r2, r2, #1
 800bee0:	e04b      	b.n	800bf7a <HAL_UART_Init.constprop.103+0x6a6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d03e      	beq.n	800bf66 <HAL_UART_Init.constprop.103+0x692>
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d01e      	beq.n	800bf2a <HAL_UART_Init.constprop.103+0x656>
 800beec:	2b02      	cmp	r3, #2
 800beee:	d01f      	beq.n	800bf30 <HAL_UART_Init.constprop.103+0x65c>
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d020      	beq.n	800bf36 <HAL_UART_Init.constprop.103+0x662>
 800bef4:	2b04      	cmp	r3, #4
 800bef6:	d021      	beq.n	800bf3c <HAL_UART_Init.constprop.103+0x668>
 800bef8:	2b05      	cmp	r3, #5
 800befa:	d022      	beq.n	800bf42 <HAL_UART_Init.constprop.103+0x66e>
 800befc:	2b06      	cmp	r3, #6
 800befe:	d023      	beq.n	800bf48 <HAL_UART_Init.constprop.103+0x674>
 800bf00:	2b07      	cmp	r3, #7
 800bf02:	d024      	beq.n	800bf4e <HAL_UART_Init.constprop.103+0x67a>
 800bf04:	2b08      	cmp	r3, #8
 800bf06:	d025      	beq.n	800bf54 <HAL_UART_Init.constprop.103+0x680>
 800bf08:	2b09      	cmp	r3, #9
 800bf0a:	d026      	beq.n	800bf5a <HAL_UART_Init.constprop.103+0x686>
 800bf0c:	2b0a      	cmp	r3, #10
 800bf0e:	d027      	beq.n	800bf60 <HAL_UART_Init.constprop.103+0x68c>
 800bf10:	2b0b      	cmp	r3, #11
 800bf12:	d128      	bne.n	800bf66 <HAL_UART_Init.constprop.103+0x692>
 800bf14:	2100      	movs	r1, #0
 800bf16:	484c      	ldr	r0, [pc, #304]	; (800c048 <HAL_UART_Init.constprop.103+0x774>)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf18:	2700      	movs	r7, #0
 800bf1a:	0856      	lsrs	r6, r2, #1
 800bf1c:	1980      	adds	r0, r0, r6
 800bf1e:	4179      	adcs	r1, r7
 800bf20:	003b      	movs	r3, r7
 800bf22:	f002 fff5 	bl	800ef10 <__aeabi_uldivmod>
 800bf26:	003e      	movs	r6, r7
 800bf28:	e03c      	b.n	800bfa4 <HAL_UART_Init.constprop.103+0x6d0>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf2a:	4856      	ldr	r0, [pc, #344]	; (800c084 <HAL_UART_Init.constprop.103+0x7b0>)
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	e7f3      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf30:	4855      	ldr	r0, [pc, #340]	; (800c088 <HAL_UART_Init.constprop.103+0x7b4>)
 800bf32:	2100      	movs	r1, #0
 800bf34:	e7f0      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf36:	4855      	ldr	r0, [pc, #340]	; (800c08c <HAL_UART_Init.constprop.103+0x7b8>)
 800bf38:	2100      	movs	r1, #0
 800bf3a:	e7ed      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf3c:	4854      	ldr	r0, [pc, #336]	; (800c090 <HAL_UART_Init.constprop.103+0x7bc>)
 800bf3e:	2100      	movs	r1, #0
 800bf40:	e7ea      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf42:	4854      	ldr	r0, [pc, #336]	; (800c094 <HAL_UART_Init.constprop.103+0x7c0>)
 800bf44:	2100      	movs	r1, #0
 800bf46:	e7e7      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf48:	4853      	ldr	r0, [pc, #332]	; (800c098 <HAL_UART_Init.constprop.103+0x7c4>)
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	e7e4      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf4e:	4853      	ldr	r0, [pc, #332]	; (800c09c <HAL_UART_Init.constprop.103+0x7c8>)
 800bf50:	2100      	movs	r1, #0
 800bf52:	e7e1      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf54:	4852      	ldr	r0, [pc, #328]	; (800c0a0 <HAL_UART_Init.constprop.103+0x7cc>)
 800bf56:	2100      	movs	r1, #0
 800bf58:	e7de      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf5a:	4852      	ldr	r0, [pc, #328]	; (800c0a4 <HAL_UART_Init.constprop.103+0x7d0>)
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	e7db      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf60:	4851      	ldr	r0, [pc, #324]	; (800c0a8 <HAL_UART_Init.constprop.103+0x7d4>)
 800bf62:	2100      	movs	r1, #0
 800bf64:	e7d8      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bf66:	4851      	ldr	r0, [pc, #324]	; (800c0ac <HAL_UART_Init.constprop.103+0x7d8>)
 800bf68:	2100      	movs	r1, #0
 800bf6a:	e7d5      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
            pclk = HAL_RCC_GetSysClockFreq();
 800bf6c:	f7ff fb7a 	bl	800b664 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bf72:	2201      	movs	r2, #1
 800bf74:	2300      	movs	r3, #0
 800bf76:	2900      	cmp	r1, #0
 800bf78:	d183      	bne.n	800be82 <HAL_UART_Init.constprop.103+0x5ae>
 800bf7a:	6861      	ldr	r1, [r4, #4]
 800bf7c:	2700      	movs	r7, #0
 800bf7e:	4688      	mov	r8, r1
 800bf80:	2100      	movs	r1, #0
 800bf82:	f002 ffc5 	bl	800ef10 <__aeabi_uldivmod>
 800bf86:	020b      	lsls	r3, r1, #8
 800bf88:	4641      	mov	r1, r8
 800bf8a:	0e06      	lsrs	r6, r0, #24
 800bf8c:	4333      	orrs	r3, r6
 800bf8e:	0202      	lsls	r2, r0, #8
 800bf90:	084e      	lsrs	r6, r1, #1
 800bf92:	1992      	adds	r2, r2, r6
 800bf94:	417b      	adcs	r3, r7
 800bf96:	0010      	movs	r0, r2
 800bf98:	0019      	movs	r1, r3
 800bf9a:	4642      	mov	r2, r8
 800bf9c:	003b      	movs	r3, r7
 800bf9e:	f002 ffb7 	bl	800ef10 <__aeabi_uldivmod>
 800bfa2:	003e      	movs	r6, r7
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfa4:	4b42      	ldr	r3, [pc, #264]	; (800c0b0 <HAL_UART_Init.constprop.103+0x7dc>)
 800bfa6:	4a43      	ldr	r2, [pc, #268]	; (800c0b4 <HAL_UART_Init.constprop.103+0x7e0>)
 800bfa8:	18c3      	adds	r3, r0, r3
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d900      	bls.n	800bfb0 <HAL_UART_Init.constprop.103+0x6dc>
 800bfae:	e59d      	b.n	800baec <HAL_UART_Init.constprop.103+0x218>
      huart->Instance->BRR = usartdiv;
 800bfb0:	6823      	ldr	r3, [r4, #0]
 800bfb2:	60d8      	str	r0, [r3, #12]
 800bfb4:	e59b      	b.n	800baee <HAL_UART_Init.constprop.103+0x21a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d019      	beq.n	800bff0 <HAL_UART_Init.constprop.103+0x71c>
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d01b      	beq.n	800bff8 <HAL_UART_Init.constprop.103+0x724>
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d01d      	beq.n	800c000 <HAL_UART_Init.constprop.103+0x72c>
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d01f      	beq.n	800c008 <HAL_UART_Init.constprop.103+0x734>
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d020      	beq.n	800c00e <HAL_UART_Init.constprop.103+0x73a>
 800bfcc:	2b05      	cmp	r3, #5
 800bfce:	d022      	beq.n	800c016 <HAL_UART_Init.constprop.103+0x742>
 800bfd0:	2b06      	cmp	r3, #6
 800bfd2:	d023      	beq.n	800c01c <HAL_UART_Init.constprop.103+0x748>
 800bfd4:	2080      	movs	r0, #128	; 0x80
 800bfd6:	2b07      	cmp	r3, #7
 800bfd8:	d023      	beq.n	800c022 <HAL_UART_Init.constprop.103+0x74e>
 800bfda:	2b08      	cmp	r3, #8
 800bfdc:	d024      	beq.n	800c028 <HAL_UART_Init.constprop.103+0x754>
 800bfde:	2b09      	cmp	r3, #9
 800bfe0:	d025      	beq.n	800c02e <HAL_UART_Init.constprop.103+0x75a>
 800bfe2:	2b0a      	cmp	r3, #10
 800bfe4:	d026      	beq.n	800c034 <HAL_UART_Init.constprop.103+0x760>
 800bfe6:	2b0b      	cmp	r3, #11
 800bfe8:	d127      	bne.n	800c03a <HAL_UART_Init.constprop.103+0x766>
 800bfea:	0200      	lsls	r0, r0, #8
 800bfec:	2100      	movs	r1, #0
 800bfee:	e793      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bff0:	2080      	movs	r0, #128	; 0x80
 800bff2:	2100      	movs	r1, #0
 800bff4:	0400      	lsls	r0, r0, #16
 800bff6:	e78f      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800bff8:	2080      	movs	r0, #128	; 0x80
 800bffa:	2100      	movs	r1, #0
 800bffc:	03c0      	lsls	r0, r0, #15
 800bffe:	e78b      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c000:	2080      	movs	r0, #128	; 0x80
 800c002:	2100      	movs	r1, #0
 800c004:	0380      	lsls	r0, r0, #14
 800c006:	e787      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c008:	482b      	ldr	r0, [pc, #172]	; (800c0b8 <HAL_UART_Init.constprop.103+0x7e4>)
 800c00a:	2100      	movs	r1, #0
 800c00c:	e784      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c00e:	2080      	movs	r0, #128	; 0x80
 800c010:	2100      	movs	r1, #0
 800c012:	0340      	lsls	r0, r0, #13
 800c014:	e780      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c016:	4829      	ldr	r0, [pc, #164]	; (800c0bc <HAL_UART_Init.constprop.103+0x7e8>)
 800c018:	2100      	movs	r1, #0
 800c01a:	e77d      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c01c:	4828      	ldr	r0, [pc, #160]	; (800c0c0 <HAL_UART_Init.constprop.103+0x7ec>)
 800c01e:	2100      	movs	r1, #0
 800c020:	e77a      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c022:	0300      	lsls	r0, r0, #12
 800c024:	2100      	movs	r1, #0
 800c026:	e777      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c028:	02c0      	lsls	r0, r0, #11
 800c02a:	2100      	movs	r1, #0
 800c02c:	e774      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c02e:	0280      	lsls	r0, r0, #10
 800c030:	2100      	movs	r1, #0
 800c032:	e771      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c034:	0240      	lsls	r0, r0, #9
 800c036:	2100      	movs	r1, #0
 800c038:	e76e      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
 800c03a:	0400      	lsls	r0, r0, #16
 800c03c:	2100      	movs	r1, #0
 800c03e:	e76b      	b.n	800bf18 <HAL_UART_Init.constprop.103+0x644>
            ret = HAL_ERROR;
 800c040:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c042:	2000      	movs	r0, #0
 800c044:	e7ae      	b.n	800bfa4 <HAL_UART_Init.constprop.103+0x6d0>
 800c046:	46c0      	nop			; (mov r8, r8)
 800c048:	00f42400 	.word	0x00f42400
 800c04c:	007a1200 	.word	0x007a1200
 800c050:	003d0900 	.word	0x003d0900
 800c054:	0028b0aa 	.word	0x0028b0aa
 800c058:	001e8480 	.word	0x001e8480
 800c05c:	00186a00 	.word	0x00186a00
 800c060:	00145855 	.word	0x00145855
 800c064:	000f4240 	.word	0x000f4240
 800c068:	0007a120 	.word	0x0007a120
 800c06c:	0003d090 	.word	0x0003d090
 800c070:	0001e848 	.word	0x0001e848
 800c074:	0000f424 	.word	0x0000f424
 800c078:	00001555 	.word	0x00001555
 800c07c:	00000ccc 	.word	0x00000ccc
 800c080:	00000aaa 	.word	0x00000aaa
 800c084:	7a120000 	.word	0x7a120000
 800c088:	3d090000 	.word	0x3d090000
 800c08c:	28b0aa00 	.word	0x28b0aa00
 800c090:	1e848000 	.word	0x1e848000
 800c094:	186a0000 	.word	0x186a0000
 800c098:	14585500 	.word	0x14585500
 800c09c:	0f424000 	.word	0x0f424000
 800c0a0:	07a12000 	.word	0x07a12000
 800c0a4:	03d09000 	.word	0x03d09000
 800c0a8:	01e84800 	.word	0x01e84800
 800c0ac:	f4240000 	.word	0xf4240000
 800c0b0:	fffffd00 	.word	0xfffffd00
 800c0b4:	000ffcff 	.word	0x000ffcff
 800c0b8:	00155500 	.word	0x00155500
 800c0bc:	000ccc00 	.word	0x000ccc00
 800c0c0:	000aaa00 	.word	0x000aaa00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d026      	beq.n	800c116 <HAL_UART_Init.constprop.103+0x842>
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d026      	beq.n	800c11a <HAL_UART_Init.constprop.103+0x846>
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d026      	beq.n	800c11e <HAL_UART_Init.constprop.103+0x84a>
 800c0d0:	2b03      	cmp	r3, #3
 800c0d2:	d026      	beq.n	800c122 <HAL_UART_Init.constprop.103+0x84e>
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d026      	beq.n	800c126 <HAL_UART_Init.constprop.103+0x852>
 800c0d8:	2b05      	cmp	r3, #5
 800c0da:	d026      	beq.n	800c12a <HAL_UART_Init.constprop.103+0x856>
 800c0dc:	2b06      	cmp	r3, #6
 800c0de:	d026      	beq.n	800c12e <HAL_UART_Init.constprop.103+0x85a>
 800c0e0:	2b07      	cmp	r3, #7
 800c0e2:	d026      	beq.n	800c132 <HAL_UART_Init.constprop.103+0x85e>
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	d026      	beq.n	800c136 <HAL_UART_Init.constprop.103+0x862>
 800c0e8:	2b09      	cmp	r3, #9
 800c0ea:	d026      	beq.n	800c13a <HAL_UART_Init.constprop.103+0x866>
 800c0ec:	2b0a      	cmp	r3, #10
 800c0ee:	d026      	beq.n	800c13e <HAL_UART_Init.constprop.103+0x86a>
 800c0f0:	3b0b      	subs	r3, #11
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	1e43      	subs	r3, r0, #1
 800c0f6:	4198      	sbcs	r0, r3
 800c0f8:	4ba1      	ldr	r3, [pc, #644]	; (800c380 <HAL_UART_Init.constprop.103+0xaac>)
 800c0fa:	4240      	negs	r0, r0
 800c0fc:	4018      	ands	r0, r3
 800c0fe:	4ba1      	ldr	r3, [pc, #644]	; (800c384 <HAL_UART_Init.constprop.103+0xab0>)
 800c100:	469c      	mov	ip, r3
 800c102:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c104:	6863      	ldr	r3, [r4, #4]
 800c106:	6861      	ldr	r1, [r4, #4]
 800c108:	085b      	lsrs	r3, r3, #1
 800c10a:	1818      	adds	r0, r3, r0
 800c10c:	f002 fd12 	bl	800eb34 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c110:	2600      	movs	r6, #0
 800c112:	b280      	uxth	r0, r0
 800c114:	e027      	b.n	800c166 <HAL_UART_Init.constprop.103+0x892>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c116:	489c      	ldr	r0, [pc, #624]	; (800c388 <HAL_UART_Init.constprop.103+0xab4>)
 800c118:	e7f4      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c11a:	489c      	ldr	r0, [pc, #624]	; (800c38c <HAL_UART_Init.constprop.103+0xab8>)
 800c11c:	e7f2      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c11e:	489c      	ldr	r0, [pc, #624]	; (800c390 <HAL_UART_Init.constprop.103+0xabc>)
 800c120:	e7f0      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c122:	489c      	ldr	r0, [pc, #624]	; (800c394 <HAL_UART_Init.constprop.103+0xac0>)
 800c124:	e7ee      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c126:	489c      	ldr	r0, [pc, #624]	; (800c398 <HAL_UART_Init.constprop.103+0xac4>)
 800c128:	e7ec      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c12a:	489c      	ldr	r0, [pc, #624]	; (800c39c <HAL_UART_Init.constprop.103+0xac8>)
 800c12c:	e7ea      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c12e:	489c      	ldr	r0, [pc, #624]	; (800c3a0 <HAL_UART_Init.constprop.103+0xacc>)
 800c130:	e7e8      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c132:	489c      	ldr	r0, [pc, #624]	; (800c3a4 <HAL_UART_Init.constprop.103+0xad0>)
 800c134:	e7e6      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c136:	489c      	ldr	r0, [pc, #624]	; (800c3a8 <HAL_UART_Init.constprop.103+0xad4>)
 800c138:	e7e4      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c13a:	489c      	ldr	r0, [pc, #624]	; (800c3ac <HAL_UART_Init.constprop.103+0xad8>)
 800c13c:	e7e2      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c13e:	489c      	ldr	r0, [pc, #624]	; (800c3b0 <HAL_UART_Init.constprop.103+0xadc>)
 800c140:	e7e0      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
        pclk = HAL_RCC_GetSysClockFreq();
 800c142:	f7ff fa8f 	bl	800b664 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c148:	2101      	movs	r1, #1
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d000      	beq.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c14e:	e16e      	b.n	800c42e <HAL_UART_Init.constprop.103+0xb5a>
 800c150:	f002 fcf0 	bl	800eb34 <__udivsi3>
 800c154:	6866      	ldr	r6, [r4, #4]
 800c156:	0040      	lsls	r0, r0, #1
 800c158:	0873      	lsrs	r3, r6, #1
 800c15a:	0031      	movs	r1, r6
 800c15c:	18c0      	adds	r0, r0, r3
 800c15e:	f002 fce9 	bl	800eb34 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c162:	2600      	movs	r6, #0
 800c164:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c166:	0003      	movs	r3, r0
 800c168:	4a92      	ldr	r2, [pc, #584]	; (800c3b4 <HAL_UART_Init.constprop.103+0xae0>)
 800c16a:	3b10      	subs	r3, #16
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d900      	bls.n	800c172 <HAL_UART_Init.constprop.103+0x89e>
 800c170:	e4bc      	b.n	800baec <HAL_UART_Init.constprop.103+0x218>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c172:	230f      	movs	r3, #15
 800c174:	0002      	movs	r2, r0
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c176:	0700      	lsls	r0, r0, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c178:	439a      	bics	r2, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c17a:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	4310      	orrs	r0, r2
 800c180:	60d8      	str	r0, [r3, #12]
 800c182:	e4b4      	b.n	800baee <HAL_UART_Init.constprop.103+0x21a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c184:	2b00      	cmp	r3, #0
 800c186:	d018      	beq.n	800c1ba <HAL_UART_Init.constprop.103+0x8e6>
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d019      	beq.n	800c1c0 <HAL_UART_Init.constprop.103+0x8ec>
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d01a      	beq.n	800c1c6 <HAL_UART_Init.constprop.103+0x8f2>
 800c190:	2b03      	cmp	r3, #3
 800c192:	d01b      	beq.n	800c1cc <HAL_UART_Init.constprop.103+0x8f8>
 800c194:	2b04      	cmp	r3, #4
 800c196:	d01b      	beq.n	800c1d0 <HAL_UART_Init.constprop.103+0x8fc>
 800c198:	2b05      	cmp	r3, #5
 800c19a:	d01c      	beq.n	800c1d6 <HAL_UART_Init.constprop.103+0x902>
 800c19c:	2b06      	cmp	r3, #6
 800c19e:	d01c      	beq.n	800c1da <HAL_UART_Init.constprop.103+0x906>
 800c1a0:	2080      	movs	r0, #128	; 0x80
 800c1a2:	2b07      	cmp	r3, #7
 800c1a4:	d01b      	beq.n	800c1de <HAL_UART_Init.constprop.103+0x90a>
 800c1a6:	2b08      	cmp	r3, #8
 800c1a8:	d01b      	beq.n	800c1e2 <HAL_UART_Init.constprop.103+0x90e>
 800c1aa:	2b09      	cmp	r3, #9
 800c1ac:	d01b      	beq.n	800c1e6 <HAL_UART_Init.constprop.103+0x912>
 800c1ae:	2b0a      	cmp	r3, #10
 800c1b0:	d01b      	beq.n	800c1ea <HAL_UART_Init.constprop.103+0x916>
 800c1b2:	2b0b      	cmp	r3, #11
 800c1b4:	d11b      	bne.n	800c1ee <HAL_UART_Init.constprop.103+0x91a>
 800c1b6:	0040      	lsls	r0, r0, #1
 800c1b8:	e7a4      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1ba:	2080      	movs	r0, #128	; 0x80
 800c1bc:	0240      	lsls	r0, r0, #9
 800c1be:	e7a1      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1c0:	2080      	movs	r0, #128	; 0x80
 800c1c2:	0200      	lsls	r0, r0, #8
 800c1c4:	e79e      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1c6:	2080      	movs	r0, #128	; 0x80
 800c1c8:	01c0      	lsls	r0, r0, #7
 800c1ca:	e79b      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1cc:	487a      	ldr	r0, [pc, #488]	; (800c3b8 <HAL_UART_Init.constprop.103+0xae4>)
 800c1ce:	e799      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1d0:	2080      	movs	r0, #128	; 0x80
 800c1d2:	0180      	lsls	r0, r0, #6
 800c1d4:	e796      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1d6:	4879      	ldr	r0, [pc, #484]	; (800c3bc <HAL_UART_Init.constprop.103+0xae8>)
 800c1d8:	e794      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1da:	4879      	ldr	r0, [pc, #484]	; (800c3c0 <HAL_UART_Init.constprop.103+0xaec>)
 800c1dc:	e792      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1de:	0140      	lsls	r0, r0, #5
 800c1e0:	e790      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1e2:	0100      	lsls	r0, r0, #4
 800c1e4:	e78e      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1e6:	00c0      	lsls	r0, r0, #3
 800c1e8:	e78c      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1ea:	0080      	lsls	r0, r0, #2
 800c1ec:	e78a      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
 800c1ee:	0240      	lsls	r0, r0, #9
 800c1f0:	e788      	b.n	800c104 <HAL_UART_Init.constprop.103+0x830>
        ret = HAL_ERROR;
 800c1f2:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	e7b6      	b.n	800c166 <HAL_UART_Init.constprop.103+0x892>
    switch (clocksource)
 800c1f8:	2808      	cmp	r0, #8
 800c1fa:	d900      	bls.n	800c1fe <HAL_UART_Init.constprop.103+0x92a>
 800c1fc:	e108      	b.n	800c410 <HAL_UART_Init.constprop.103+0xb3c>
 800c1fe:	f002 fc8f 	bl	800eb20 <__gnu_thumb1_case_uhi>
 800c202:	0009      	.short	0x0009
 800c204:	00320107 	.word	0x00320107
 800c208:	00710107 	.word	0x00710107
 800c20c:	01070107 	.word	0x01070107
 800c210:	00890107 	.word	0x00890107
        pclk = HAL_RCC_GetPCLK1Freq();
 800c214:	f7fd fe7c 	bl	8009f10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c21a:	2101      	movs	r1, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d067      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c220:	1849      	adds	r1, r1, r1
 800c222:	2b01      	cmp	r3, #1
 800c224:	d064      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c226:	3102      	adds	r1, #2
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d061      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c22c:	3102      	adds	r1, #2
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d05e      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c232:	3102      	adds	r1, #2
 800c234:	2b04      	cmp	r3, #4
 800c236:	d05b      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c238:	3102      	adds	r1, #2
 800c23a:	2b05      	cmp	r3, #5
 800c23c:	d058      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c23e:	3102      	adds	r1, #2
 800c240:	2b06      	cmp	r3, #6
 800c242:	d055      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c244:	3104      	adds	r1, #4
 800c246:	2b07      	cmp	r3, #7
 800c248:	d052      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c24a:	3110      	adds	r1, #16
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	d04f      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c250:	3120      	adds	r1, #32
 800c252:	2b09      	cmp	r3, #9
 800c254:	d04c      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c256:	3140      	adds	r1, #64	; 0x40
 800c258:	2b0a      	cmp	r3, #10
 800c25a:	d049      	beq.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c25c:	397f      	subs	r1, #127	; 0x7f
 800c25e:	2b0b      	cmp	r3, #11
 800c260:	d146      	bne.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
 800c262:	31ff      	adds	r1, #255	; 0xff
 800c264:	e044      	b.n	800c2f0 <HAL_UART_Init.constprop.103+0xa1c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c266:	2b00      	cmp	r3, #0
 800c268:	d026      	beq.n	800c2b8 <HAL_UART_Init.constprop.103+0x9e4>
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d026      	beq.n	800c2bc <HAL_UART_Init.constprop.103+0x9e8>
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d026      	beq.n	800c2c0 <HAL_UART_Init.constprop.103+0x9ec>
 800c272:	2b03      	cmp	r3, #3
 800c274:	d026      	beq.n	800c2c4 <HAL_UART_Init.constprop.103+0x9f0>
 800c276:	2b04      	cmp	r3, #4
 800c278:	d026      	beq.n	800c2c8 <HAL_UART_Init.constprop.103+0x9f4>
 800c27a:	2b05      	cmp	r3, #5
 800c27c:	d026      	beq.n	800c2cc <HAL_UART_Init.constprop.103+0x9f8>
 800c27e:	2b06      	cmp	r3, #6
 800c280:	d026      	beq.n	800c2d0 <HAL_UART_Init.constprop.103+0x9fc>
 800c282:	2b07      	cmp	r3, #7
 800c284:	d026      	beq.n	800c2d4 <HAL_UART_Init.constprop.103+0xa00>
 800c286:	2b08      	cmp	r3, #8
 800c288:	d026      	beq.n	800c2d8 <HAL_UART_Init.constprop.103+0xa04>
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	d026      	beq.n	800c2dc <HAL_UART_Init.constprop.103+0xa08>
 800c28e:	2b0a      	cmp	r3, #10
 800c290:	d026      	beq.n	800c2e0 <HAL_UART_Init.constprop.103+0xa0c>
 800c292:	3b0b      	subs	r3, #11
 800c294:	0018      	movs	r0, r3
 800c296:	1e43      	subs	r3, r0, #1
 800c298:	4198      	sbcs	r0, r3
 800c29a:	4b4a      	ldr	r3, [pc, #296]	; (800c3c4 <HAL_UART_Init.constprop.103+0xaf0>)
 800c29c:	4240      	negs	r0, r0
 800c29e:	4018      	ands	r0, r3
 800c2a0:	4b49      	ldr	r3, [pc, #292]	; (800c3c8 <HAL_UART_Init.constprop.103+0xaf4>)
 800c2a2:	469c      	mov	ip, r3
 800c2a4:	4460      	add	r0, ip
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2a6:	6863      	ldr	r3, [r4, #4]
 800c2a8:	6861      	ldr	r1, [r4, #4]
 800c2aa:	085b      	lsrs	r3, r3, #1
 800c2ac:	1818      	adds	r0, r3, r0
 800c2ae:	f002 fc41 	bl	800eb34 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2b2:	2600      	movs	r6, #0
 800c2b4:	b280      	uxth	r0, r0
 800c2b6:	e025      	b.n	800c304 <HAL_UART_Init.constprop.103+0xa30>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2b8:	4834      	ldr	r0, [pc, #208]	; (800c38c <HAL_UART_Init.constprop.103+0xab8>)
 800c2ba:	e7f4      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2bc:	4834      	ldr	r0, [pc, #208]	; (800c390 <HAL_UART_Init.constprop.103+0xabc>)
 800c2be:	e7f2      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2c0:	4835      	ldr	r0, [pc, #212]	; (800c398 <HAL_UART_Init.constprop.103+0xac4>)
 800c2c2:	e7f0      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2c4:	4836      	ldr	r0, [pc, #216]	; (800c3a0 <HAL_UART_Init.constprop.103+0xacc>)
 800c2c6:	e7ee      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2c8:	4836      	ldr	r0, [pc, #216]	; (800c3a4 <HAL_UART_Init.constprop.103+0xad0>)
 800c2ca:	e7ec      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2cc:	483f      	ldr	r0, [pc, #252]	; (800c3cc <HAL_UART_Init.constprop.103+0xaf8>)
 800c2ce:	e7ea      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2d0:	483f      	ldr	r0, [pc, #252]	; (800c3d0 <HAL_UART_Init.constprop.103+0xafc>)
 800c2d2:	e7e8      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2d4:	4834      	ldr	r0, [pc, #208]	; (800c3a8 <HAL_UART_Init.constprop.103+0xad4>)
 800c2d6:	e7e6      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2d8:	4834      	ldr	r0, [pc, #208]	; (800c3ac <HAL_UART_Init.constprop.103+0xad8>)
 800c2da:	e7e4      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2dc:	4834      	ldr	r0, [pc, #208]	; (800c3b0 <HAL_UART_Init.constprop.103+0xadc>)
 800c2de:	e7e2      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c2e0:	4828      	ldr	r0, [pc, #160]	; (800c384 <HAL_UART_Init.constprop.103+0xab0>)
 800c2e2:	e7e0      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
        pclk = HAL_RCC_GetSysClockFreq();
 800c2e4:	f7ff f9be 	bl	800b664 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d197      	bne.n	800c220 <HAL_UART_Init.constprop.103+0x94c>
 800c2f0:	f002 fc20 	bl	800eb34 <__udivsi3>
 800c2f4:	6866      	ldr	r6, [r4, #4]
 800c2f6:	0873      	lsrs	r3, r6, #1
 800c2f8:	0031      	movs	r1, r6
 800c2fa:	18c0      	adds	r0, r0, r3
 800c2fc:	f002 fc1a 	bl	800eb34 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800c300:	2600      	movs	r6, #0
 800c302:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c304:	0003      	movs	r3, r0
 800c306:	4a2b      	ldr	r2, [pc, #172]	; (800c3b4 <HAL_UART_Init.constprop.103+0xae0>)
 800c308:	3b10      	subs	r3, #16
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d800      	bhi.n	800c310 <HAL_UART_Init.constprop.103+0xa3c>
 800c30e:	e64f      	b.n	800bfb0 <HAL_UART_Init.constprop.103+0x6dc>
 800c310:	f7ff fbec 	bl	800baec <HAL_UART_Init.constprop.103+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c314:	2b00      	cmp	r3, #0
 800c316:	d018      	beq.n	800c34a <HAL_UART_Init.constprop.103+0xa76>
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d019      	beq.n	800c350 <HAL_UART_Init.constprop.103+0xa7c>
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d01a      	beq.n	800c356 <HAL_UART_Init.constprop.103+0xa82>
 800c320:	2b03      	cmp	r3, #3
 800c322:	d01b      	beq.n	800c35c <HAL_UART_Init.constprop.103+0xa88>
 800c324:	2b04      	cmp	r3, #4
 800c326:	d01b      	beq.n	800c360 <HAL_UART_Init.constprop.103+0xa8c>
 800c328:	2b05      	cmp	r3, #5
 800c32a:	d01c      	beq.n	800c366 <HAL_UART_Init.constprop.103+0xa92>
 800c32c:	2b06      	cmp	r3, #6
 800c32e:	d01c      	beq.n	800c36a <HAL_UART_Init.constprop.103+0xa96>
 800c330:	2080      	movs	r0, #128	; 0x80
 800c332:	2b07      	cmp	r3, #7
 800c334:	d01b      	beq.n	800c36e <HAL_UART_Init.constprop.103+0xa9a>
 800c336:	2b08      	cmp	r3, #8
 800c338:	d01b      	beq.n	800c372 <HAL_UART_Init.constprop.103+0xa9e>
 800c33a:	2b09      	cmp	r3, #9
 800c33c:	d01b      	beq.n	800c376 <HAL_UART_Init.constprop.103+0xaa2>
 800c33e:	2b0a      	cmp	r3, #10
 800c340:	d01b      	beq.n	800c37a <HAL_UART_Init.constprop.103+0xaa6>
 800c342:	2b0b      	cmp	r3, #11
 800c344:	d0af      	beq.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c346:	0200      	lsls	r0, r0, #8
 800c348:	e7ad      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c34a:	2080      	movs	r0, #128	; 0x80
 800c34c:	0200      	lsls	r0, r0, #8
 800c34e:	e7aa      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c350:	2080      	movs	r0, #128	; 0x80
 800c352:	01c0      	lsls	r0, r0, #7
 800c354:	e7a7      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c356:	2080      	movs	r0, #128	; 0x80
 800c358:	0180      	lsls	r0, r0, #6
 800c35a:	e7a4      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c35c:	481d      	ldr	r0, [pc, #116]	; (800c3d4 <HAL_UART_Init.constprop.103+0xb00>)
 800c35e:	e7a2      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c360:	2080      	movs	r0, #128	; 0x80
 800c362:	0140      	lsls	r0, r0, #5
 800c364:	e79f      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c366:	481c      	ldr	r0, [pc, #112]	; (800c3d8 <HAL_UART_Init.constprop.103+0xb04>)
 800c368:	e79d      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c36a:	481c      	ldr	r0, [pc, #112]	; (800c3dc <HAL_UART_Init.constprop.103+0xb08>)
 800c36c:	e79b      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c36e:	0100      	lsls	r0, r0, #4
 800c370:	e799      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c372:	00c0      	lsls	r0, r0, #3
 800c374:	e797      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c376:	0080      	lsls	r0, r0, #2
 800c378:	e795      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c37a:	0040      	lsls	r0, r0, #1
 800c37c:	e793      	b.n	800c2a6 <HAL_UART_Init.constprop.103+0x9d2>
 800c37e:	46c0      	nop			; (mov r8, r8)
 800c380:	01e65fb8 	.word	0x01e65fb8
 800c384:	0001e848 	.word	0x0001e848
 800c388:	01e84800 	.word	0x01e84800
 800c38c:	00f42400 	.word	0x00f42400
 800c390:	007a1200 	.word	0x007a1200
 800c394:	00516154 	.word	0x00516154
 800c398:	003d0900 	.word	0x003d0900
 800c39c:	0030d400 	.word	0x0030d400
 800c3a0:	0028b0aa 	.word	0x0028b0aa
 800c3a4:	001e8480 	.word	0x001e8480
 800c3a8:	000f4240 	.word	0x000f4240
 800c3ac:	0007a120 	.word	0x0007a120
 800c3b0:	0003d090 	.word	0x0003d090
 800c3b4:	0000ffef 	.word	0x0000ffef
 800c3b8:	00002aaa 	.word	0x00002aaa
 800c3bc:	00001998 	.word	0x00001998
 800c3c0:	00001554 	.word	0x00001554
 800c3c4:	00f32fdc 	.word	0x00f32fdc
 800c3c8:	0000f424 	.word	0x0000f424
 800c3cc:	00186a00 	.word	0x00186a00
 800c3d0:	00145855 	.word	0x00145855
 800c3d4:	00001555 	.word	0x00001555
 800c3d8:	00000ccc 	.word	0x00000ccc
 800c3dc:	00000aaa 	.word	0x00000aaa
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3e0:	2180      	movs	r1, #128	; 0x80
 800c3e2:	4b2a      	ldr	r3, [pc, #168]	; (800c48c <HAL_UART_Init.constprop.103+0xbb8>)
 800c3e4:	003a      	movs	r2, r7
 800c3e6:	0389      	lsls	r1, r1, #14
 800c3e8:	0020      	movs	r0, r4
 800c3ea:	f7fd fb97 	bl	8009b1c <UART_WaitOnFlagUntilTimeout.constprop.104>
 800c3ee:	2800      	cmp	r0, #0
 800c3f0:	d101      	bne.n	800c3f6 <HAL_UART_Init.constprop.103+0xb22>
 800c3f2:	f7ff fbea 	bl	800bbca <HAL_UART_Init.constprop.103+0x2f6>
      return HAL_TIMEOUT;
 800c3f6:	2603      	movs	r6, #3
}
 800c3f8:	0030      	movs	r0, r6
 800c3fa:	b00a      	add	sp, #40	; 0x28
 800c3fc:	bc1c      	pop	{r2, r3, r4}
 800c3fe:	4690      	mov	r8, r2
 800c400:	4699      	mov	r9, r3
 800c402:	46a2      	mov	sl, r4
 800c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c406:	2380      	movs	r3, #128	; 0x80
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	4299      	cmp	r1, r3
 800c40c:	d100      	bne.n	800c410 <HAL_UART_Init.constprop.103+0xb3c>
 800c40e:	e6f0      	b.n	800c1f2 <HAL_UART_Init.constprop.103+0x91e>
        ret = HAL_ERROR;
 800c410:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800c412:	2000      	movs	r0, #0
 800c414:	e776      	b.n	800c304 <HAL_UART_Init.constprop.103+0xa30>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c416:	2380      	movs	r3, #128	; 0x80
 800c418:	021b      	lsls	r3, r3, #8
 800c41a:	4299      	cmp	r1, r3
 800c41c:	d000      	beq.n	800c420 <HAL_UART_Init.constprop.103+0xb4c>
 800c41e:	e6f9      	b.n	800c214 <HAL_UART_Init.constprop.103+0x940>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c420:	f7fd fd76 	bl	8009f10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c426:	2101      	movs	r1, #1
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d100      	bne.n	800c42e <HAL_UART_Init.constprop.103+0xb5a>
 800c42c:	e690      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c42e:	1849      	adds	r1, r1, r1
 800c430:	2b01      	cmp	r3, #1
 800c432:	d100      	bne.n	800c436 <HAL_UART_Init.constprop.103+0xb62>
 800c434:	e68c      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c436:	3102      	adds	r1, #2
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d100      	bne.n	800c43e <HAL_UART_Init.constprop.103+0xb6a>
 800c43c:	e688      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c43e:	3102      	adds	r1, #2
 800c440:	2b03      	cmp	r3, #3
 800c442:	d100      	bne.n	800c446 <HAL_UART_Init.constprop.103+0xb72>
 800c444:	e684      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c446:	3102      	adds	r1, #2
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d100      	bne.n	800c44e <HAL_UART_Init.constprop.103+0xb7a>
 800c44c:	e680      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c44e:	3102      	adds	r1, #2
 800c450:	2b05      	cmp	r3, #5
 800c452:	d100      	bne.n	800c456 <HAL_UART_Init.constprop.103+0xb82>
 800c454:	e67c      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c456:	3102      	adds	r1, #2
 800c458:	2b06      	cmp	r3, #6
 800c45a:	d100      	bne.n	800c45e <HAL_UART_Init.constprop.103+0xb8a>
 800c45c:	e678      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c45e:	3104      	adds	r1, #4
 800c460:	2b07      	cmp	r3, #7
 800c462:	d100      	bne.n	800c466 <HAL_UART_Init.constprop.103+0xb92>
 800c464:	e674      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c466:	3110      	adds	r1, #16
 800c468:	2b08      	cmp	r3, #8
 800c46a:	d100      	bne.n	800c46e <HAL_UART_Init.constprop.103+0xb9a>
 800c46c:	e670      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c46e:	3120      	adds	r1, #32
 800c470:	2b09      	cmp	r3, #9
 800c472:	d100      	bne.n	800c476 <HAL_UART_Init.constprop.103+0xba2>
 800c474:	e66c      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c476:	3140      	adds	r1, #64	; 0x40
 800c478:	2b0a      	cmp	r3, #10
 800c47a:	d100      	bne.n	800c47e <HAL_UART_Init.constprop.103+0xbaa>
 800c47c:	e668      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c47e:	397f      	subs	r1, #127	; 0x7f
 800c480:	2b0b      	cmp	r3, #11
 800c482:	d000      	beq.n	800c486 <HAL_UART_Init.constprop.103+0xbb2>
 800c484:	e664      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c486:	31ff      	adds	r1, #255	; 0xff
 800c488:	e662      	b.n	800c150 <HAL_UART_Init.constprop.103+0x87c>
 800c48a:	46c0      	nop			; (mov r8, r8)
 800c48c:	01ffffff 	.word	0x01ffffff

0800c490 <biquad_q3_12_complex_direct_form_1.lto_priv.622>:
 800c490:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c492:	4645      	mov	r5, r8
 800c494:	4657      	mov	r7, sl
 800c496:	464e      	mov	r6, r9
 800c498:	46de      	mov	lr, fp
 800c49a:	b5e0      	push	{r5, r6, r7, lr}
 800c49c:	b08d      	sub	sp, #52	; 0x34
 800c49e:	ac16      	add	r4, sp, #88	; 0x58
 800c4a0:	4688      	mov	r8, r1
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	5e65      	ldrsh	r5, [r4, r1]
 800c4a6:	2102      	movs	r1, #2
 800c4a8:	5e66      	ldrsh	r6, [r4, r1]
 800c4aa:	2400      	movs	r4, #0
 800c4ac:	5f01      	ldrsh	r1, [r0, r4]
 800c4ae:	9102      	str	r1, [sp, #8]
 800c4b0:	2402      	movs	r4, #2
 800c4b2:	5f01      	ldrsh	r1, [r0, r4]
 800c4b4:	9103      	str	r1, [sp, #12]
 800c4b6:	2404      	movs	r4, #4
 800c4b8:	5f01      	ldrsh	r1, [r0, r4]
 800c4ba:	4c36      	ldr	r4, [pc, #216]	; (800c594 <biquad_q3_12_complex_direct_form_1.lto_priv.622+0x104>)
 800c4bc:	9104      	str	r1, [sp, #16]
 800c4be:	88c7      	ldrh	r7, [r0, #6]
 800c4c0:	1be4      	subs	r4, r4, r7
 800c4c2:	b221      	sxth	r1, r4
 800c4c4:	9105      	str	r1, [sp, #20]
 800c4c6:	2108      	movs	r1, #8
 800c4c8:	5e41      	ldrsh	r1, [r0, r1]
 800c4ca:	0334      	lsls	r4, r6, #12
 800c4cc:	9106      	str	r1, [sp, #24]
 800c4ce:	0328      	lsls	r0, r5, #12
 800c4d0:	0097      	lsls	r7, r2, #2
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d001      	beq.n	800c4da <biquad_q3_12_complex_direct_form_1.lto_priv.622+0x4a>
 800c4d6:	2704      	movs	r7, #4
 800c4d8:	427f      	negs	r7, r7
 800c4da:	4259      	negs	r1, r3
 800c4dc:	4351      	muls	r1, r2
 800c4de:	009a      	lsls	r2, r3, #2
 800c4e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800c4e2:	008a      	lsls	r2, r1, #2
 800c4e4:	19d2      	adds	r2, r2, r7
 800c4e6:	4442      	add	r2, r8
 800c4e8:	468c      	mov	ip, r1
 800c4ea:	46a8      	mov	r8, r5
 800c4ec:	0011      	movs	r1, r2
 800c4ee:	46b2      	mov	sl, r6
 800c4f0:	46a9      	mov	r9, r5
 800c4f2:	9608      	str	r6, [sp, #32]
 800c4f4:	9507      	str	r5, [sp, #28]
 800c4f6:	9601      	str	r6, [sp, #4]
 800c4f8:	4662      	mov	r2, ip
 800c4fa:	2a00      	cmp	r2, #0
 800c4fc:	d106      	bne.n	800c50c <biquad_q3_12_complex_direct_form_1.lto_priv.622+0x7c>
 800c4fe:	b00d      	add	sp, #52	; 0x34
 800c500:	bc3c      	pop	{r2, r3, r4, r5}
 800c502:	4690      	mov	r8, r2
 800c504:	4699      	mov	r9, r3
 800c506:	46a2      	mov	sl, r4
 800c508:	46ab      	mov	fp, r5
 800c50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c50c:	2700      	movs	r7, #0
 800c50e:	5fca      	ldrsh	r2, [r1, r7]
 800c510:	449c      	add	ip, r3
 800c512:	9209      	str	r2, [sp, #36]	; 0x24
 800c514:	2702      	movs	r7, #2
 800c516:	5fca      	ldrsh	r2, [r1, r7]
 800c518:	464f      	mov	r7, r9
 800c51a:	920a      	str	r2, [sp, #40]	; 0x28
 800c51c:	9a03      	ldr	r2, [sp, #12]
 800c51e:	437a      	muls	r2, r7
 800c520:	4647      	mov	r7, r8
 800c522:	4693      	mov	fp, r2
 800c524:	9a05      	ldr	r2, [sp, #20]
 800c526:	437a      	muls	r2, r7
 800c528:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c52a:	4493      	add	fp, r2
 800c52c:	9a02      	ldr	r2, [sp, #8]
 800c52e:	437a      	muls	r2, r7
 800c530:	1810      	adds	r0, r2, r0
 800c532:	9a04      	ldr	r2, [sp, #16]
 800c534:	9f07      	ldr	r7, [sp, #28]
 800c536:	4355      	muls	r5, r2
 800c538:	9a06      	ldr	r2, [sp, #24]
 800c53a:	4458      	add	r0, fp
 800c53c:	4357      	muls	r7, r2
 800c53e:	1bed      	subs	r5, r5, r7
 800c540:	1940      	adds	r0, r0, r5
 800c542:	4655      	mov	r5, sl
 800c544:	9a03      	ldr	r2, [sp, #12]
 800c546:	9f01      	ldr	r7, [sp, #4]
 800c548:	436a      	muls	r2, r5
 800c54a:	9d05      	ldr	r5, [sp, #20]
 800c54c:	437d      	muls	r5, r7
 800c54e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c550:	1955      	adds	r5, r2, r5
 800c552:	9a02      	ldr	r2, [sp, #8]
 800c554:	437a      	muls	r2, r7
 800c556:	1914      	adds	r4, r2, r4
 800c558:	9a04      	ldr	r2, [sp, #16]
 800c55a:	192c      	adds	r4, r5, r4
 800c55c:	4356      	muls	r6, r2
 800c55e:	9d06      	ldr	r5, [sp, #24]
 800c560:	9a08      	ldr	r2, [sp, #32]
 800c562:	436a      	muls	r2, r5
 800c564:	1ab6      	subs	r6, r6, r2
 800c566:	19a4      	adds	r4, r4, r6
 800c568:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c56a:	1302      	asrs	r2, r0, #12
 800c56c:	46b3      	mov	fp, r6
 800c56e:	9e01      	ldr	r6, [sp, #4]
 800c570:	b212      	sxth	r2, r2
 800c572:	9608      	str	r6, [sp, #32]
 800c574:	4646      	mov	r6, r8
 800c576:	800a      	strh	r2, [r1, #0]
 800c578:	1325      	asrs	r5, r4, #12
 800c57a:	4690      	mov	r8, r2
 800c57c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c57e:	b22d      	sxth	r5, r5
 800c580:	804d      	strh	r5, [r1, #2]
 800c582:	9607      	str	r6, [sp, #28]
 800c584:	9501      	str	r5, [sp, #4]
 800c586:	4656      	mov	r6, sl
 800c588:	464d      	mov	r5, r9
 800c58a:	4459      	add	r1, fp
 800c58c:	46ba      	mov	sl, r7
 800c58e:	4691      	mov	r9, r2
 800c590:	e7b2      	b.n	800c4f8 <biquad_q3_12_complex_direct_form_1.lto_priv.622+0x68>
 800c592:	46c0      	nop			; (mov r8, r8)
 800c594:	fffff000 	.word	0xfffff000

0800c598 <acc_confprogram_copy>:
 800c598:	2300      	movs	r3, #0
 800c59a:	b530      	push	{r4, r5, lr}
 800c59c:	0092      	lsls	r2, r2, #2
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d100      	bne.n	800c5a4 <acc_confprogram_copy+0xc>
 800c5a2:	bd30      	pop	{r4, r5, pc}
 800c5a4:	58c4      	ldr	r4, [r0, r3]
 800c5a6:	0c25      	lsrs	r5, r4, #16
 800c5a8:	52cd      	strh	r5, [r1, r3]
 800c5aa:	18cd      	adds	r5, r1, r3
 800c5ac:	806c      	strh	r4, [r5, #2]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	e7f5      	b.n	800c59e <acc_confprogram_copy+0x6>

0800c5b2 <acc_confprogram_modify_runif>:
 800c5b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b4:	0055      	lsls	r5, r2, #1
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	1945      	adds	r5, r0, r5
 800c5ba:	000e      	movs	r6, r1
 800c5bc:	0028      	movs	r0, r5
 800c5be:	a903      	add	r1, sp, #12
 800c5c0:	0014      	movs	r4, r2
 800c5c2:	001f      	movs	r7, r3
 800c5c4:	f7fd fad4 	bl	8009b70 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800c5c8:	230f      	movs	r3, #15
 800c5ca:	9a03      	ldr	r2, [sp, #12]
 800c5cc:	439a      	bics	r2, r3
 800c5ce:	9202      	str	r2, [sp, #8]
 800c5d0:	0013      	movs	r3, r2
 800c5d2:	4a11      	ldr	r2, [pc, #68]	; (800c618 <acc_confprogram_modify_runif+0x66>)
 800c5d4:	0011      	movs	r1, r2
 800c5d6:	3160      	adds	r1, #96	; 0x60
 800c5d8:	7809      	ldrb	r1, [r1, #0]
 800c5da:	2f00      	cmp	r7, #0
 800c5dc:	d011      	beq.n	800c602 <acc_confprogram_modify_runif+0x50>
 800c5de:	4333      	orrs	r3, r6
 800c5e0:	9302      	str	r3, [sp, #8]
 800c5e2:	2903      	cmp	r1, #3
 800c5e4:	d906      	bls.n	800c5f4 <acc_confprogram_modify_runif+0x42>
 800c5e6:	9600      	str	r6, [sp, #0]
 800c5e8:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800c5ea:	0863      	lsrs	r3, r4, #1
 800c5ec:	4a0b      	ldr	r2, [pc, #44]	; (800c61c <acc_confprogram_modify_runif+0x6a>)
 800c5ee:	490c      	ldr	r1, [pc, #48]	; (800c620 <acc_confprogram_modify_runif+0x6e>)
 800c5f0:	2004      	movs	r0, #4
 800c5f2:	47b0      	blx	r6
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	0029      	movs	r1, r5
 800c5f8:	a802      	add	r0, sp, #8
 800c5fa:	f7ff ffcd 	bl	800c598 <acc_confprogram_copy>
 800c5fe:	b005      	add	sp, #20
 800c600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c602:	2903      	cmp	r1, #3
 800c604:	d9f6      	bls.n	800c5f4 <acc_confprogram_modify_runif+0x42>
 800c606:	9600      	str	r6, [sp, #0]
 800c608:	0863      	lsrs	r3, r4, #1
 800c60a:	4905      	ldr	r1, [pc, #20]	; (800c620 <acc_confprogram_modify_runif+0x6e>)
 800c60c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800c60e:	2004      	movs	r0, #4
 800c610:	4a04      	ldr	r2, [pc, #16]	; (800c624 <acc_confprogram_modify_runif+0x72>)
 800c612:	47a0      	blx	r4
 800c614:	e7ee      	b.n	800c5f4 <acc_confprogram_modify_runif+0x42>
 800c616:	46c0      	nop			; (mov r8, r8)
 800c618:	20000288 	.word	0x20000288
 800c61c:	0801d6e6 	.word	0x0801d6e6
 800c620:	0801d064 	.word	0x0801d064
 800c624:	0801d974 	.word	0x0801d974

0800c628 <acc_confprogram_patch_offset>:
 800c628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c62a:	464e      	mov	r6, r9
 800c62c:	4645      	mov	r5, r8
 800c62e:	4657      	mov	r7, sl
 800c630:	46de      	mov	lr, fp
 800c632:	b5e0      	push	{r5, r6, r7, lr}
 800c634:	b089      	sub	sp, #36	; 0x24
 800c636:	4698      	mov	r8, r3
 800c638:	ab12      	add	r3, sp, #72	; 0x48
 800c63a:	881c      	ldrh	r4, [r3, #0]
 800c63c:	4b48      	ldr	r3, [pc, #288]	; (800c760 <acc_confprogram_patch_offset+0x138>)
 800c63e:	9204      	str	r2, [sp, #16]
 800c640:	4699      	mov	r9, r3
 800c642:	3360      	adds	r3, #96	; 0x60
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	4682      	mov	sl, r0
 800c648:	000e      	movs	r6, r1
 800c64a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d907      	bls.n	800c660 <acc_confprogram_patch_offset+0x38>
 800c650:	464f      	mov	r7, r9
 800c652:	9500      	str	r5, [sp, #0]
 800c654:	0023      	movs	r3, r4
 800c656:	4a43      	ldr	r2, [pc, #268]	; (800c764 <acc_confprogram_patch_offset+0x13c>)
 800c658:	4943      	ldr	r1, [pc, #268]	; (800c768 <acc_confprogram_patch_offset+0x140>)
 800c65a:	2004      	movs	r0, #4
 800c65c:	6e7f      	ldr	r7, [r7, #100]	; 0x64
 800c65e:	47b8      	blx	r7
 800c660:	002b      	movs	r3, r5
 800c662:	1e5a      	subs	r2, r3, #1
 800c664:	4193      	sbcs	r3, r2
 800c666:	2700      	movs	r7, #0
 800c668:	00e4      	lsls	r4, r4, #3
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	44a0      	add	r8, r4
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	4643      	mov	r3, r8
 800c672:	885b      	ldrh	r3, [r3, #2]
 800c674:	42bb      	cmp	r3, r7
 800c676:	d806      	bhi.n	800c686 <acc_confprogram_patch_offset+0x5e>
 800c678:	b009      	add	sp, #36	; 0x24
 800c67a:	bc3c      	pop	{r2, r3, r4, r5}
 800c67c:	4690      	mov	r8, r2
 800c67e:	4699      	mov	r9, r3
 800c680:	46a2      	mov	sl, r4
 800c682:	46ab      	mov	fp, r5
 800c684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c686:	4643      	mov	r3, r8
 800c688:	2106      	movs	r1, #6
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	4379      	muls	r1, r7
 800c68e:	469c      	mov	ip, r3
 800c690:	4461      	add	r1, ip
 800c692:	7808      	ldrb	r0, [r1, #0]
 800c694:	2800      	cmp	r0, #0
 800c696:	d003      	beq.n	800c6a0 <acc_confprogram_patch_offset+0x78>
 800c698:	2802      	cmp	r0, #2
 800c69a:	d81d      	bhi.n	800c6d8 <acc_confprogram_patch_offset+0xb0>
 800c69c:	888a      	ldrh	r2, [r1, #4]
 800c69e:	e000      	b.n	800c6a2 <acc_confprogram_patch_offset+0x7a>
 800c6a0:	884a      	ldrh	r2, [r1, #2]
 800c6a2:	4b32      	ldr	r3, [pc, #200]	; (800c76c <acc_confprogram_patch_offset+0x144>)
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d01d      	beq.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c6a8:	0052      	lsls	r2, r2, #1
 800c6aa:	b292      	uxth	r2, r2
 800c6ac:	42b2      	cmp	r2, r6
 800c6ae:	d319      	bcc.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c6b0:	9b04      	ldr	r3, [sp, #16]
 800c6b2:	18f3      	adds	r3, r6, r3
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	da15      	bge.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c6b8:	2801      	cmp	r0, #1
 800c6ba:	d049      	beq.n	800c750 <acc_confprogram_patch_offset+0x128>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d013      	beq.n	800c6e8 <acc_confprogram_patch_offset+0xc0>
 800c6c0:	2802      	cmp	r0, #2
 800c6c2:	d10f      	bne.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c6c4:	426b      	negs	r3, r5
 800c6c6:	416b      	adcs	r3, r5
 800c6c8:	1b92      	subs	r2, r2, r6
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	b292      	uxth	r2, r2
 800c6ce:	8849      	ldrh	r1, [r1, #2]
 800c6d0:	4650      	mov	r0, sl
 800c6d2:	f7ff ff6e 	bl	800c5b2 <acc_confprogram_modify_runif>
 800c6d6:	e005      	b.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c6d8:	464b      	mov	r3, r9
 800c6da:	4a25      	ldr	r2, [pc, #148]	; (800c770 <acc_confprogram_patch_offset+0x148>)
 800c6dc:	4922      	ldr	r1, [pc, #136]	; (800c768 <acc_confprogram_patch_offset+0x140>)
 800c6de:	2000      	movs	r0, #0
 800c6e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e2:	4798      	blx	r3
 800c6e4:	3701      	adds	r7, #1
 800c6e6:	e7c3      	b.n	800c670 <acc_confprogram_patch_offset+0x48>
 800c6e8:	1b92      	subs	r2, r2, r6
 800c6ea:	b293      	uxth	r3, r2
 800c6ec:	790a      	ldrb	r2, [r1, #4]
 800c6ee:	9203      	str	r2, [sp, #12]
 800c6f0:	794a      	ldrb	r2, [r1, #5]
 800c6f2:	4693      	mov	fp, r2
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	4659      	mov	r1, fp
 800c6f8:	408a      	lsls	r2, r1
 800c6fa:	4295      	cmp	r5, r2
 800c6fc:	d30b      	bcc.n	800c716 <acc_confprogram_patch_offset+0xee>
 800c6fe:	3a01      	subs	r2, #1
 800c700:	9201      	str	r2, [sp, #4]
 800c702:	464a      	mov	r2, r9
 800c704:	9500      	str	r5, [sp, #0]
 800c706:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800c708:	4917      	ldr	r1, [pc, #92]	; (800c768 <acc_confprogram_patch_offset+0x140>)
 800c70a:	4a1a      	ldr	r2, [pc, #104]	; (800c774 <acc_confprogram_patch_offset+0x14c>)
 800c70c:	47a0      	blx	r4
 800c70e:	2139      	movs	r1, #57	; 0x39
 800c710:	4819      	ldr	r0, [pc, #100]	; (800c778 <acc_confprogram_patch_offset+0x150>)
 800c712:	f7f9 f8e0 	bl	80058d6 <acc_assert_fail>
 800c716:	005b      	lsls	r3, r3, #1
 800c718:	4453      	add	r3, sl
 800c71a:	a906      	add	r1, sp, #24
 800c71c:	0018      	movs	r0, r3
 800c71e:	001c      	movs	r4, r3
 800c720:	f7fd fa26 	bl	8009b70 <acc_utils_transfer_buffer_to_uint32.constprop.24>
 800c724:	465b      	mov	r3, fp
 800c726:	2220      	movs	r2, #32
 800c728:	1ad2      	subs	r2, r2, r3
 800c72a:	2301      	movs	r3, #1
 800c72c:	425b      	negs	r3, r3
 800c72e:	40d3      	lsrs	r3, r2
 800c730:	9a03      	ldr	r2, [sp, #12]
 800c732:	9903      	ldr	r1, [sp, #12]
 800c734:	4093      	lsls	r3, r2
 800c736:	9a06      	ldr	r2, [sp, #24]
 800c738:	a807      	add	r0, sp, #28
 800c73a:	439a      	bics	r2, r3
 800c73c:	0013      	movs	r3, r2
 800c73e:	002a      	movs	r2, r5
 800c740:	408a      	lsls	r2, r1
 800c742:	0021      	movs	r1, r4
 800c744:	4313      	orrs	r3, r2
 800c746:	2201      	movs	r2, #1
 800c748:	9307      	str	r3, [sp, #28]
 800c74a:	f7ff ff25 	bl	800c598 <acc_confprogram_copy>
 800c74e:	e7c9      	b.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c750:	1b92      	subs	r2, r2, r6
 800c752:	b292      	uxth	r2, r2
 800c754:	8849      	ldrh	r1, [r1, #2]
 800c756:	9b05      	ldr	r3, [sp, #20]
 800c758:	4650      	mov	r0, sl
 800c75a:	f7ff ff2a 	bl	800c5b2 <acc_confprogram_modify_runif>
 800c75e:	e7c1      	b.n	800c6e4 <acc_confprogram_patch_offset+0xbc>
 800c760:	20000288 	.word	0x20000288
 800c764:	0801d8bb 	.word	0x0801d8bb
 800c768:	0801d064 	.word	0x0801d064
 800c76c:	0000ffff 	.word	0x0000ffff
 800c770:	0801d9a6 	.word	0x0801d9a6
 800c774:	0801d9d3 	.word	0x0801d9d3
 800c778:	0801d911 	.word	0x0801d911

0800c77c <acc_diagnostic_log_data_u16>:
 800c77c:	4770      	bx	lr

0800c77e <acc_diagnostic_log_scalar>:
 800c77e:	4770      	bx	lr

0800c780 <acc_diagnostic_log_array>:
 800c780:	4770      	bx	lr

0800c782 <acc_diagnostic_log_set_parameter>:
 800c782:	4770      	bx	lr

0800c784 <acc_diagnostic_log_declare_parameter>:
 800c784:	4770      	bx	lr

0800c786 <acc_diagnostic_log_set_scope>:
 800c786:	4770      	bx	lr

0800c788 <accumulator_mod.lto_priv.621>:
 800c788:	b510      	push	{r4, lr}
 800c78a:	1c04      	adds	r4, r0, #0
 800c78c:	f002 fdb4 	bl	800f2f8 <__aeabi_f2iz>
 800c790:	f002 fdd2 	bl	800f338 <__aeabi_i2f>
 800c794:	1c01      	adds	r1, r0, #0
 800c796:	1c20      	adds	r0, r4, #0
 800c798:	f001 ffcc 	bl	800e734 <__aeabi_fsub>
 800c79c:	2100      	movs	r1, #0
 800c79e:	1c04      	adds	r4, r0, #0
 800c7a0:	f002 fbac 	bl	800eefc <__aeabi_fcmpge>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d10b      	bne.n	800c7c0 <accumulator_mod.lto_priv.621+0x38>
 800c7a8:	20fe      	movs	r0, #254	; 0xfe
 800c7aa:	0580      	lsls	r0, r0, #22
 800c7ac:	1c21      	adds	r1, r4, #0
 800c7ae:	f001 fbe3 	bl	800df78 <__aeabi_fadd>
 800c7b2:	219f      	movs	r1, #159	; 0x9f
 800c7b4:	05c9      	lsls	r1, r1, #23
 800c7b6:	f001 fe8b 	bl	800e4d0 <__aeabi_fmul>
 800c7ba:	f002 fbc9 	bl	800ef50 <__aeabi_f2uiz>
 800c7be:	bd10      	pop	{r4, pc}
 800c7c0:	2000      	movs	r0, #0
 800c7c2:	e7f3      	b.n	800c7ac <accumulator_mod.lto_priv.621+0x24>

0800c7c4 <acc_alg_basic_saturation_check_u16>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	0005      	movs	r5, r0
 800c7c8:	000c      	movs	r4, r1
 800c7ca:	1c10      	adds	r0, r2, #0
 800c7cc:	4912      	ldr	r1, [pc, #72]	; (800c818 <acc_alg_basic_saturation_check_u16+0x54>)
 800c7ce:	1c17      	adds	r7, r2, #0
 800c7d0:	f001 fd6c 	bl	800e2ac <__aeabi_fdiv>
 800c7d4:	4911      	ldr	r1, [pc, #68]	; (800c81c <acc_alg_basic_saturation_check_u16+0x58>)
 800c7d6:	f001 fe7b 	bl	800e4d0 <__aeabi_fmul>
 800c7da:	f002 fbb9 	bl	800ef50 <__aeabi_f2uiz>
 800c7de:	1c39      	adds	r1, r7, #0
 800c7e0:	b286      	uxth	r6, r0
 800c7e2:	480d      	ldr	r0, [pc, #52]	; (800c818 <acc_alg_basic_saturation_check_u16+0x54>)
 800c7e4:	f001 ffa6 	bl	800e734 <__aeabi_fsub>
 800c7e8:	490b      	ldr	r1, [pc, #44]	; (800c818 <acc_alg_basic_saturation_check_u16+0x54>)
 800c7ea:	f001 fd5f 	bl	800e2ac <__aeabi_fdiv>
 800c7ee:	490b      	ldr	r1, [pc, #44]	; (800c81c <acc_alg_basic_saturation_check_u16+0x58>)
 800c7f0:	f001 fe6e 	bl	800e4d0 <__aeabi_fmul>
 800c7f4:	f002 fbac 	bl	800ef50 <__aeabi_f2uiz>
 800c7f8:	0864      	lsrs	r4, r4, #1
 800c7fa:	0064      	lsls	r4, r4, #1
 800c7fc:	b280      	uxth	r0, r0
 800c7fe:	192c      	adds	r4, r5, r4
 800c800:	42a5      	cmp	r5, r4
 800c802:	d101      	bne.n	800c808 <acc_alg_basic_saturation_check_u16+0x44>
 800c804:	2000      	movs	r0, #0
 800c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c808:	882a      	ldrh	r2, [r5, #0]
 800c80a:	4282      	cmp	r2, r0
 800c80c:	d202      	bcs.n	800c814 <acc_alg_basic_saturation_check_u16+0x50>
 800c80e:	3502      	adds	r5, #2
 800c810:	42b2      	cmp	r2, r6
 800c812:	d8f5      	bhi.n	800c800 <acc_alg_basic_saturation_check_u16+0x3c>
 800c814:	2001      	movs	r0, #1
 800c816:	e7f6      	b.n	800c806 <acc_alg_basic_saturation_check_u16+0x42>
 800c818:	42c80000 	.word	0x42c80000
 800c81c:	477fff00 	.word	0x477fff00

0800c820 <saturation_check_u16.lto_priv.638>:
 800c820:	b510      	push	{r4, lr}
 800c822:	f7ff ffcf 	bl	800c7c4 <acc_alg_basic_saturation_check_u16>
 800c826:	bd10      	pop	{r4, pc}

0800c828 <eval_even_poly_f32.lto_priv.679>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	0005      	movs	r5, r0
 800c82c:	000c      	movs	r4, r1
 800c82e:	1c10      	adds	r0, r2, #0
 800c830:	1c11      	adds	r1, r2, #0
 800c832:	f001 fe4d 	bl	800e4d0 <__aeabi_fmul>
 800c836:	1c06      	adds	r6, r0, #0
 800c838:	2000      	movs	r0, #0
 800c83a:	3c01      	subs	r4, #1
 800c83c:	b2a4      	uxth	r4, r4
 800c83e:	00a4      	lsls	r4, r4, #2
 800c840:	192c      	adds	r4, r5, r4
 800c842:	6821      	ldr	r1, [r4, #0]
 800c844:	f001 fb98 	bl	800df78 <__aeabi_fadd>
 800c848:	42a5      	cmp	r5, r4
 800c84a:	d005      	beq.n	800c858 <eval_even_poly_f32.lto_priv.679+0x30>
 800c84c:	1c01      	adds	r1, r0, #0
 800c84e:	1c30      	adds	r0, r6, #0
 800c850:	f001 fe3e 	bl	800e4d0 <__aeabi_fmul>
 800c854:	3c04      	subs	r4, #4
 800c856:	e7f4      	b.n	800c842 <eval_even_poly_f32.lto_priv.679+0x1a>
 800c858:	bd70      	pop	{r4, r5, r6, pc}

0800c85a <quarter_pi_cos_sin_f32.lto_priv.678>:
 800c85a:	b570      	push	{r4, r5, r6, lr}
 800c85c:	000d      	movs	r5, r1
 800c85e:	490d      	ldr	r1, [pc, #52]	; (800c894 <quarter_pi_cos_sin_f32.lto_priv.678+0x3a>)
 800c860:	1c04      	adds	r4, r0, #0
 800c862:	f002 fb2d 	bl	800eec0 <__aeabi_fcmplt>
 800c866:	2800      	cmp	r0, #0
 800c868:	d111      	bne.n	800c88e <quarter_pi_cos_sin_f32.lto_priv.678+0x34>
 800c86a:	480b      	ldr	r0, [pc, #44]	; (800c898 <quarter_pi_cos_sin_f32.lto_priv.678+0x3e>)
 800c86c:	2d00      	cmp	r5, #0
 800c86e:	d005      	beq.n	800c87c <quarter_pi_cos_sin_f32.lto_priv.678+0x22>
 800c870:	3034      	adds	r0, #52	; 0x34
 800c872:	1c22      	adds	r2, r4, #0
 800c874:	2105      	movs	r1, #5
 800c876:	f7ff ffd7 	bl	800c828 <eval_even_poly_f32.lto_priv.679>
 800c87a:	bd70      	pop	{r4, r5, r6, pc}
 800c87c:	1c22      	adds	r2, r4, #0
 800c87e:	2104      	movs	r1, #4
 800c880:	3048      	adds	r0, #72	; 0x48
 800c882:	f7ff ffd1 	bl	800c828 <eval_even_poly_f32.lto_priv.679>
 800c886:	1c21      	adds	r1, r4, #0
 800c888:	f001 fe22 	bl	800e4d0 <__aeabi_fmul>
 800c88c:	e7f5      	b.n	800c87a <quarter_pi_cos_sin_f32.lto_priv.678+0x20>
 800c88e:	4803      	ldr	r0, [pc, #12]	; (800c89c <quarter_pi_cos_sin_f32.lto_priv.678+0x42>)
 800c890:	e7f3      	b.n	800c87a <quarter_pi_cos_sin_f32.lto_priv.678+0x20>
 800c892:	46c0      	nop			; (mov r8, r8)
 800c894:	bf490fdb 	.word	0xbf490fdb
 800c898:	08018b9c 	.word	0x08018b9c
 800c89c:	7fc00000 	.word	0x7fc00000

0800c8a0 <acc_alg_basic_math_q3_12_sin>:
 800c8a0:	0002      	movs	r2, r0
 800c8a2:	0003      	movs	r3, r0
 800c8a4:	0041      	lsls	r1, r0, #1
 800c8a6:	d500      	bpl.n	800c8aa <acc_alg_basic_math_q3_12_sin+0xa>
 800c8a8:	43c3      	mvns	r3, r0
 800c8aa:	2180      	movs	r1, #128	; 0x80
 800c8ac:	0389      	lsls	r1, r1, #14
 800c8ae:	468c      	mov	ip, r1
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	089b      	lsrs	r3, r3, #2
 800c8b4:	4463      	add	r3, ip
 800c8b6:	0d9b      	lsrs	r3, r3, #22
 800c8b8:	4903      	ldr	r1, [pc, #12]	; (800c8c8 <acc_alg_basic_math_q3_12_sin+0x28>)
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	5e58      	ldrsh	r0, [r3, r1]
 800c8be:	2a00      	cmp	r2, #0
 800c8c0:	da01      	bge.n	800c8c6 <acc_alg_basic_math_q3_12_sin+0x26>
 800c8c2:	4240      	negs	r0, r0
 800c8c4:	b200      	sxth	r0, r0
 800c8c6:	4770      	bx	lr
 800c8c8:	08019bd4 	.word	0x08019bd4

0800c8cc <acc_alg_basic_math_q3_12_complex_scalar_abs>:
 800c8cc:	b203      	sxth	r3, r0
 800c8ce:	17da      	asrs	r2, r3, #31
 800c8d0:	189b      	adds	r3, r3, r2
 800c8d2:	1400      	asrs	r0, r0, #16
 800c8d4:	4053      	eors	r3, r2
 800c8d6:	17c2      	asrs	r2, r0, #31
 800c8d8:	1880      	adds	r0, r0, r2
 800c8da:	4050      	eors	r0, r2
 800c8dc:	b21b      	sxth	r3, r3
 800c8de:	b202      	sxth	r2, r0
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	db02      	blt.n	800c8ec <acc_alg_basic_math_q3_12_complex_scalar_abs+0x20>
 800c8e6:	0011      	movs	r1, r2
 800c8e8:	001a      	movs	r2, r3
 800c8ea:	000b      	movs	r3, r1
 800c8ec:	480c      	ldr	r0, [pc, #48]	; (800c920 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x54>)
 800c8ee:	4350      	muls	r0, r2
 800c8f0:	17c1      	asrs	r1, r0, #31
 800c8f2:	0509      	lsls	r1, r1, #20
 800c8f4:	0d09      	lsrs	r1, r1, #20
 800c8f6:	1809      	adds	r1, r1, r0
 800c8f8:	1309      	asrs	r1, r1, #12
 800c8fa:	b209      	sxth	r1, r1
 800c8fc:	428b      	cmp	r3, r1
 800c8fe:	da08      	bge.n	800c912 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x46>
 800c900:	4808      	ldr	r0, [pc, #32]	; (800c924 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x58>)
 800c902:	4350      	muls	r0, r2
 800c904:	4a08      	ldr	r2, [pc, #32]	; (800c928 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x5c>)
 800c906:	4353      	muls	r3, r2
 800c908:	18c0      	adds	r0, r0, r3
 800c90a:	1300      	asrs	r0, r0, #12
 800c90c:	b200      	sxth	r0, r0
 800c90e:	b002      	add	sp, #8
 800c910:	4770      	bx	lr
 800c912:	4806      	ldr	r0, [pc, #24]	; (800c92c <acc_alg_basic_math_q3_12_complex_scalar_abs+0x60>)
 800c914:	4350      	muls	r0, r2
 800c916:	4a06      	ldr	r2, [pc, #24]	; (800c930 <acc_alg_basic_math_q3_12_complex_scalar_abs+0x64>)
 800c918:	4353      	muls	r3, r2
 800c91a:	18c0      	adds	r0, r0, r3
 800c91c:	e7f5      	b.n	800c90a <acc_alg_basic_math_q3_12_complex_scalar_abs+0x3e>
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	000006a1 	.word	0x000006a1
 800c924:	00000fd7 	.word	0x00000fd7
 800c928:	00000327 	.word	0x00000327
 800c92c:	00000d71 	.word	0x00000d71
 800c930:	000008fa 	.word	0x000008fa

0800c934 <internal_reg_read.lto_priv.623>:
 800c934:	23c0      	movs	r3, #192	; 0xc0
 800c936:	b513      	push	{r0, r1, r4, lr}
 800c938:	019b      	lsls	r3, r3, #6
 800c93a:	4319      	orrs	r1, r3
 800c93c:	466b      	mov	r3, sp
 800c93e:	0014      	movs	r4, r2
 800c940:	8019      	strh	r1, [r3, #0]
 800c942:	466a      	mov	r2, sp
 800c944:	2300      	movs	r3, #0
 800c946:	4669      	mov	r1, sp
 800c948:	8053      	strh	r3, [r2, #2]
 800c94a:	8093      	strh	r3, [r2, #4]
 800c94c:	3301      	adds	r3, #1
 800c94e:	2203      	movs	r2, #3
 800c950:	f7f9 fb60 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800c954:	466b      	mov	r3, sp
 800c956:	889b      	ldrh	r3, [r3, #4]
 800c958:	8023      	strh	r3, [r4, #0]
 800c95a:	bd13      	pop	{r0, r1, r4, pc}

0800c95c <read_reg_array>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	0007      	movs	r7, r0
 800c960:	000d      	movs	r5, r1
 800c962:	001e      	movs	r6, r3
 800c964:	3a01      	subs	r2, #1
 800c966:	b294      	uxth	r4, r2
 800c968:	0064      	lsls	r4, r4, #1
 800c96a:	1c8a      	adds	r2, r1, #2
 800c96c:	18a4      	adds	r4, r4, r2
 800c96e:	8829      	ldrh	r1, [r5, #0]
 800c970:	0032      	movs	r2, r6
 800c972:	0038      	movs	r0, r7
 800c974:	3502      	adds	r5, #2
 800c976:	f7ff ffdd 	bl	800c934 <internal_reg_read.lto_priv.623>
 800c97a:	3602      	adds	r6, #2
 800c97c:	42a5      	cmp	r5, r4
 800c97e:	d1f6      	bne.n	800c96e <read_reg_array+0x12>
 800c980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c982 <acc_sensor_diagnostics_r2_sensor_status>:
 800c982:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c984:	4657      	mov	r7, sl
 800c986:	464e      	mov	r6, r9
 800c988:	46de      	mov	lr, fp
 800c98a:	4645      	mov	r5, r8
 800c98c:	b5e0      	push	{r5, r6, r7, lr}
 800c98e:	4f1e      	ldr	r7, [pc, #120]	; (800ca08 <acc_sensor_diagnostics_r2_sensor_status+0x86>)
 800c990:	b097      	sub	sp, #92	; 0x5c
 800c992:	003b      	movs	r3, r7
 800c994:	3360      	adds	r3, #96	; 0x60
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	0006      	movs	r6, r0
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d904      	bls.n	800c9a8 <acc_sensor_diagnostics_r2_sensor_status+0x26>
 800c99e:	4a1b      	ldr	r2, [pc, #108]	; (800ca0c <acc_sensor_diagnostics_r2_sensor_status+0x8a>)
 800c9a0:	491b      	ldr	r1, [pc, #108]	; (800ca10 <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800c9a2:	2002      	movs	r0, #2
 800c9a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9a6:	4798      	blx	r3
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	21b2      	movs	r1, #178	; 0xb2
 800c9ac:	0030      	movs	r0, r6
 800c9ae:	f7fe f943 	bl	800ac38 <acc_sensor_reg_write>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	ac0e      	add	r4, sp, #56	; 0x38
 800c9b6:	8023      	strh	r3, [r4, #0]
 800c9b8:	3364      	adds	r3, #100	; 0x64
 800c9ba:	469b      	mov	fp, r3
 800c9bc:	3b53      	subs	r3, #83	; 0x53
 800c9be:	4699      	mov	r9, r3
 800c9c0:	2380      	movs	r3, #128	; 0x80
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	4698      	mov	r8, r3
 800c9c6:	2360      	movs	r3, #96	; 0x60
 800c9c8:	469a      	mov	sl, r3
 800c9ca:	44ba      	add	sl, r7
 800c9cc:	0022      	movs	r2, r4
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	0030      	movs	r0, r6
 800c9d2:	f7ff ffaf 	bl	800c934 <internal_reg_read.lto_priv.623>
 800c9d6:	4642      	mov	r2, r8
 800c9d8:	8823      	ldrh	r3, [r4, #0]
 800c9da:	4213      	tst	r3, r2
 800c9dc:	d01c      	beq.n	800ca18 <acc_sensor_diagnostics_r2_sensor_status+0x96>
 800c9de:	4652      	mov	r2, sl
 800c9e0:	7812      	ldrb	r2, [r2, #0]
 800c9e2:	2a01      	cmp	r2, #1
 800c9e4:	d908      	bls.n	800c9f8 <acc_sensor_diagnostics_r2_sensor_status+0x76>
 800c9e6:	059b      	lsls	r3, r3, #22
 800c9e8:	0d9b      	lsrs	r3, r3, #22
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	4a09      	ldr	r2, [pc, #36]	; (800ca14 <acc_sensor_diagnostics_r2_sensor_status+0x92>)
 800c9ee:	0033      	movs	r3, r6
 800c9f0:	4907      	ldr	r1, [pc, #28]	; (800ca10 <acc_sensor_diagnostics_r2_sensor_status+0x8e>)
 800c9f2:	2002      	movs	r0, #2
 800c9f4:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800c9f6:	47a8      	blx	r5
 800c9f8:	465d      	mov	r5, fp
 800c9fa:	3d01      	subs	r5, #1
 800c9fc:	b2ab      	uxth	r3, r5
 800c9fe:	469b      	mov	fp, r3
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1e3      	bne.n	800c9cc <acc_sensor_diagnostics_r2_sensor_status+0x4a>
 800ca04:	e016      	b.n	800ca34 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800ca06:	46c0      	nop			; (mov r8, r8)
 800ca08:	20000288 	.word	0x20000288
 800ca0c:	0801da0a 	.word	0x0801da0a
 800ca10:	0801da4a 	.word	0x0801da4a
 800ca14:	0801da5d 	.word	0x0801da5d
 800ca18:	003a      	movs	r2, r7
 800ca1a:	3260      	adds	r2, #96	; 0x60
 800ca1c:	7812      	ldrb	r2, [r2, #0]
 800ca1e:	2a01      	cmp	r2, #1
 800ca20:	d908      	bls.n	800ca34 <acc_sensor_diagnostics_r2_sensor_status+0xb2>
 800ca22:	059b      	lsls	r3, r3, #22
 800ca24:	0d9b      	lsrs	r3, r3, #22
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	4ad0      	ldr	r2, [pc, #832]	; (800cd6c <acc_sensor_diagnostics_r2_sensor_status+0x3ea>)
 800ca2a:	0033      	movs	r3, r6
 800ca2c:	49d0      	ldr	r1, [pc, #832]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ca2e:	2002      	movs	r0, #2
 800ca30:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ca32:	47a8      	blx	r5
 800ca34:	2500      	movs	r5, #0
 800ca36:	ab02      	add	r3, sp, #8
 800ca38:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca3a:	0029      	movs	r1, r5
 800ca3c:	0030      	movs	r0, r6
 800ca3e:	849d      	strh	r5, [r3, #36]	; 0x24
 800ca40:	f7ff ff78 	bl	800c934 <internal_reg_read.lto_priv.623>
 800ca44:	ab02      	add	r3, sp, #8
 800ca46:	aa02      	add	r2, sp, #8
 800ca48:	4694      	mov	ip, r2
 800ca4a:	84dd      	strh	r5, [r3, #38]	; 0x26
 800ca4c:	2326      	movs	r3, #38	; 0x26
 800ca4e:	4463      	add	r3, ip
 800ca50:	001a      	movs	r2, r3
 800ca52:	212a      	movs	r1, #42	; 0x2a
 800ca54:	0030      	movs	r0, r6
 800ca56:	f7ff ff6d 	bl	800c934 <internal_reg_read.lto_priv.623>
 800ca5a:	ab02      	add	r3, sp, #8
 800ca5c:	aa0c      	add	r2, sp, #48	; 0x30
 800ca5e:	2128      	movs	r1, #40	; 0x28
 800ca60:	0030      	movs	r0, r6
 800ca62:	851d      	strh	r5, [r3, #40]	; 0x28
 800ca64:	f7ff ff66 	bl	800c934 <internal_reg_read.lto_priv.623>
 800ca68:	4bc2      	ldr	r3, [pc, #776]	; (800cd74 <acc_sensor_diagnostics_r2_sensor_status+0x3f2>)
 800ca6a:	2210      	movs	r2, #16
 800ca6c:	0019      	movs	r1, r3
 800ca6e:	4698      	mov	r8, r3
 800ca70:	3158      	adds	r1, #88	; 0x58
 800ca72:	0023      	movs	r3, r4
 800ca74:	0030      	movs	r0, r6
 800ca76:	f7ff ff71 	bl	800c95c <read_reg_array>
 800ca7a:	003b      	movs	r3, r7
 800ca7c:	3360      	adds	r3, #96	; 0x60
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d915      	bls.n	800cab0 <acc_sensor_diagnostics_r2_sensor_status+0x12e>
 800ca84:	89e3      	ldrh	r3, [r4, #14]
 800ca86:	4abc      	ldr	r2, [pc, #752]	; (800cd78 <acc_sensor_diagnostics_r2_sensor_status+0x3f6>)
 800ca88:	9307      	str	r3, [sp, #28]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	49b8      	ldr	r1, [pc, #736]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ca8e:	9306      	str	r3, [sp, #24]
 800ca90:	8963      	ldrh	r3, [r4, #10]
 800ca92:	2002      	movs	r0, #2
 800ca94:	9305      	str	r3, [sp, #20]
 800ca96:	8923      	ldrh	r3, [r4, #8]
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	88e3      	ldrh	r3, [r4, #6]
 800ca9c:	9303      	str	r3, [sp, #12]
 800ca9e:	88a3      	ldrh	r3, [r4, #4]
 800caa0:	9302      	str	r3, [sp, #8]
 800caa2:	8863      	ldrh	r3, [r4, #2]
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	8823      	ldrh	r3, [r4, #0]
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800caac:	0033      	movs	r3, r6
 800caae:	47a8      	blx	r5
 800cab0:	003b      	movs	r3, r7
 800cab2:	3360      	adds	r3, #96	; 0x60
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b01      	cmp	r3, #1
 800cab8:	d915      	bls.n	800cae6 <acc_sensor_diagnostics_r2_sensor_status+0x164>
 800caba:	8be3      	ldrh	r3, [r4, #30]
 800cabc:	4aaf      	ldr	r2, [pc, #700]	; (800cd7c <acc_sensor_diagnostics_r2_sensor_status+0x3fa>)
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	8ba3      	ldrh	r3, [r4, #28]
 800cac2:	49ab      	ldr	r1, [pc, #684]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cac4:	9306      	str	r3, [sp, #24]
 800cac6:	8b63      	ldrh	r3, [r4, #26]
 800cac8:	2002      	movs	r0, #2
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	8b23      	ldrh	r3, [r4, #24]
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	8ae3      	ldrh	r3, [r4, #22]
 800cad2:	9303      	str	r3, [sp, #12]
 800cad4:	8aa3      	ldrh	r3, [r4, #20]
 800cad6:	9302      	str	r3, [sp, #8]
 800cad8:	8a63      	ldrh	r3, [r4, #18]
 800cada:	9301      	str	r3, [sp, #4]
 800cadc:	8a23      	ldrh	r3, [r4, #16]
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cae2:	0033      	movs	r3, r6
 800cae4:	47a8      	blx	r5
 800cae6:	4641      	mov	r1, r8
 800cae8:	0023      	movs	r3, r4
 800caea:	3178      	adds	r1, #120	; 0x78
 800caec:	2204      	movs	r2, #4
 800caee:	0030      	movs	r0, r6
 800caf0:	f7ff ff34 	bl	800c95c <read_reg_array>
 800caf4:	003b      	movs	r3, r7
 800caf6:	3360      	adds	r3, #96	; 0x60
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d90d      	bls.n	800cb1a <acc_sensor_diagnostics_r2_sensor_status+0x198>
 800cafe:	88e3      	ldrh	r3, [r4, #6]
 800cb00:	4a9f      	ldr	r2, [pc, #636]	; (800cd80 <acc_sensor_diagnostics_r2_sensor_status+0x3fe>)
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	88a3      	ldrh	r3, [r4, #4]
 800cb06:	499a      	ldr	r1, [pc, #616]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb08:	9302      	str	r3, [sp, #8]
 800cb0a:	8863      	ldrh	r3, [r4, #2]
 800cb0c:	2002      	movs	r0, #2
 800cb0e:	9301      	str	r3, [sp, #4]
 800cb10:	8823      	ldrh	r3, [r4, #0]
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb16:	0033      	movs	r3, r6
 800cb18:	47a8      	blx	r5
 800cb1a:	ab02      	add	r3, sp, #8
 800cb1c:	469c      	mov	ip, r3
 800cb1e:	222a      	movs	r2, #42	; 0x2a
 800cb20:	2500      	movs	r5, #0
 800cb22:	4462      	add	r2, ip
 800cb24:	2153      	movs	r1, #83	; 0x53
 800cb26:	0030      	movs	r0, r6
 800cb28:	8015      	strh	r5, [r2, #0]
 800cb2a:	f7ff ff03 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cb2e:	0022      	movs	r2, r4
 800cb30:	2140      	movs	r1, #64	; 0x40
 800cb32:	0030      	movs	r0, r6
 800cb34:	8025      	strh	r5, [r4, #0]
 800cb36:	f7ff fefd 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cb3a:	003b      	movs	r3, r7
 800cb3c:	3360      	adds	r3, #96	; 0x60
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d907      	bls.n	800cb54 <acc_sensor_diagnostics_r2_sensor_status+0x1d2>
 800cb44:	8823      	ldrh	r3, [r4, #0]
 800cb46:	4a8f      	ldr	r2, [pc, #572]	; (800cd84 <acc_sensor_diagnostics_r2_sensor_status+0x402>)
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	4989      	ldr	r1, [pc, #548]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb4c:	0033      	movs	r3, r6
 800cb4e:	2002      	movs	r0, #2
 800cb50:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb52:	47a8      	blx	r5
 800cb54:	003b      	movs	r3, r7
 800cb56:	3360      	adds	r3, #96	; 0x60
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d90c      	bls.n	800cb78 <acc_sensor_diagnostics_r2_sensor_status+0x1f6>
 800cb5e:	2240      	movs	r2, #64	; 0x40
 800cb60:	8823      	ldrh	r3, [r4, #0]
 800cb62:	4983      	ldr	r1, [pc, #524]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb64:	401a      	ands	r2, r3
 800cb66:	9201      	str	r2, [sp, #4]
 800cb68:	2280      	movs	r2, #128	; 0x80
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	4a86      	ldr	r2, [pc, #536]	; (800cd88 <acc_sensor_diagnostics_r2_sensor_status+0x406>)
 800cb70:	0033      	movs	r3, r6
 800cb72:	2002      	movs	r0, #2
 800cb74:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb76:	47a8      	blx	r5
 800cb78:	003b      	movs	r3, r7
 800cb7a:	3360      	adds	r3, #96	; 0x60
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d90c      	bls.n	800cb9c <acc_sensor_diagnostics_r2_sensor_status+0x21a>
 800cb82:	2210      	movs	r2, #16
 800cb84:	8823      	ldrh	r3, [r4, #0]
 800cb86:	497a      	ldr	r1, [pc, #488]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cb88:	401a      	ands	r2, r3
 800cb8a:	9201      	str	r2, [sp, #4]
 800cb8c:	2220      	movs	r2, #32
 800cb8e:	4013      	ands	r3, r2
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	4a7e      	ldr	r2, [pc, #504]	; (800cd8c <acc_sensor_diagnostics_r2_sensor_status+0x40a>)
 800cb94:	0033      	movs	r3, r6
 800cb96:	2002      	movs	r0, #2
 800cb98:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cb9a:	47a8      	blx	r5
 800cb9c:	003b      	movs	r3, r7
 800cb9e:	3360      	adds	r3, #96	; 0x60
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d90c      	bls.n	800cbc0 <acc_sensor_diagnostics_r2_sensor_status+0x23e>
 800cba6:	2204      	movs	r2, #4
 800cba8:	8823      	ldrh	r3, [r4, #0]
 800cbaa:	4971      	ldr	r1, [pc, #452]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cbac:	401a      	ands	r2, r3
 800cbae:	9201      	str	r2, [sp, #4]
 800cbb0:	2208      	movs	r2, #8
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4a76      	ldr	r2, [pc, #472]	; (800cd90 <acc_sensor_diagnostics_r2_sensor_status+0x40e>)
 800cbb8:	0033      	movs	r3, r6
 800cbba:	2002      	movs	r0, #2
 800cbbc:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cbbe:	47a8      	blx	r5
 800cbc0:	0023      	movs	r3, r4
 800cbc2:	2210      	movs	r2, #16
 800cbc4:	4973      	ldr	r1, [pc, #460]	; (800cd94 <acc_sensor_diagnostics_r2_sensor_status+0x412>)
 800cbc6:	0030      	movs	r0, r6
 800cbc8:	f7ff fec8 	bl	800c95c <read_reg_array>
 800cbcc:	003b      	movs	r3, r7
 800cbce:	2200      	movs	r2, #0
 800cbd0:	3360      	adds	r3, #96	; 0x60
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	d909      	bls.n	800cbee <acc_sensor_diagnostics_r2_sensor_status+0x26c>
 800cbda:	8823      	ldrh	r3, [r4, #0]
 800cbdc:	4a6e      	ldr	r2, [pc, #440]	; (800cd98 <acc_sensor_diagnostics_r2_sensor_status+0x416>)
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	4963      	ldr	r1, [pc, #396]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cbe2:	0033      	movs	r3, r6
 800cbe4:	2002      	movs	r0, #2
 800cbe6:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cbe8:	47a8      	blx	r5
 800cbea:	2301      	movs	r3, #1
 800cbec:	9309      	str	r3, [sp, #36]	; 0x24
 800cbee:	003b      	movs	r3, r7
 800cbf0:	3360      	adds	r3, #96	; 0x60
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d90f      	bls.n	800cc18 <acc_sensor_diagnostics_r2_sensor_status+0x296>
 800cbf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfa:	4a68      	ldr	r2, [pc, #416]	; (800cd9c <acc_sensor_diagnostics_r2_sensor_status+0x41a>)
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	4698      	mov	r8, r3
 800cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc04:	495a      	ldr	r1, [pc, #360]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc06:	005d      	lsls	r5, r3, #1
 800cc08:	5b63      	ldrh	r3, [r4, r5]
 800cc0a:	2002      	movs	r0, #2
 800cc0c:	9300      	str	r3, [sp, #0]
 800cc0e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cc10:	0033      	movs	r3, r6
 800cc12:	47a8      	blx	r5
 800cc14:	4643      	mov	r3, r8
 800cc16:	9309      	str	r3, [sp, #36]	; 0x24
 800cc18:	2301      	movs	r3, #1
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	335f      	adds	r3, #95	; 0x5f
 800cc1e:	4699      	mov	r9, r3
 800cc20:	4b5f      	ldr	r3, [pc, #380]	; (800cda0 <acc_sensor_diagnostics_r2_sensor_status+0x41e>)
 800cc22:	44b9      	add	r9, r7
 800cc24:	469b      	mov	fp, r3
 800cc26:	4b52      	ldr	r3, [pc, #328]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cc28:	469a      	mov	sl, r3
 800cc2a:	464b      	mov	r3, r9
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b01      	cmp	r3, #1
 800cc30:	d910      	bls.n	800cc54 <acc_sensor_diagnostics_r2_sensor_status+0x2d2>
 800cc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc34:	465a      	mov	r2, fp
 800cc36:	3301      	adds	r3, #1
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	5ae3      	ldrh	r3, [r4, r3]
 800cc3c:	4651      	mov	r1, sl
 800cc3e:	9302      	str	r3, [sp, #8]
 800cc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc42:	2002      	movs	r0, #2
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	5ae3      	ldrh	r3, [r4, r3]
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	4643      	mov	r3, r8
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cc50:	0033      	movs	r3, r6
 800cc52:	47a8      	blx	r5
 800cc54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cc56:	3502      	adds	r5, #2
 800cc58:	b2eb      	uxtb	r3, r5
 800cc5a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	469c      	mov	ip, r3
 800cc60:	44e0      	add	r8, ip
 800cc62:	4643      	mov	r3, r8
 800cc64:	2b08      	cmp	r3, #8
 800cc66:	d1e0      	bne.n	800cc2a <acc_sensor_diagnostics_r2_sensor_status+0x2a8>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	469a      	mov	sl, r3
 800cc6c:	4652      	mov	r2, sl
 800cc6e:	ab02      	add	r3, sp, #8
 800cc70:	859a      	strh	r2, [r3, #44]	; 0x2c
 800cc72:	219d      	movs	r1, #157	; 0x9d
 800cc74:	aa0d      	add	r2, sp, #52	; 0x34
 800cc76:	0030      	movs	r0, r6
 800cc78:	f7ff fe5c 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cc7c:	ab02      	add	r3, sp, #8
 800cc7e:	469c      	mov	ip, r3
 800cc80:	252e      	movs	r5, #46	; 0x2e
 800cc82:	4653      	mov	r3, sl
 800cc84:	4465      	add	r5, ip
 800cc86:	002a      	movs	r2, r5
 800cc88:	2199      	movs	r1, #153	; 0x99
 800cc8a:	0030      	movs	r0, r6
 800cc8c:	802b      	strh	r3, [r5, #0]
 800cc8e:	9509      	str	r5, [sp, #36]	; 0x24
 800cc90:	f7ff fe50 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cc94:	4653      	mov	r3, sl
 800cc96:	0022      	movs	r2, r4
 800cc98:	2196      	movs	r1, #150	; 0x96
 800cc9a:	0030      	movs	r0, r6
 800cc9c:	8023      	strh	r3, [r4, #0]
 800cc9e:	f7ff fe49 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cca2:	4652      	mov	r2, sl
 800cca4:	21b2      	movs	r1, #178	; 0xb2
 800cca6:	0030      	movs	r0, r6
 800cca8:	f7fd ffc6 	bl	800ac38 <acc_sensor_reg_write>
 800ccac:	003b      	movs	r3, r7
 800ccae:	3360      	adds	r3, #96	; 0x60
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d90e      	bls.n	800ccd4 <acc_sensor_diagnostics_r2_sensor_status+0x352>
 800ccb6:	ab02      	add	r3, sp, #8
 800ccb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccba:	4a3a      	ldr	r2, [pc, #232]	; (800cda4 <acc_sensor_diagnostics_r2_sensor_status+0x422>)
 800ccbc:	9302      	str	r3, [sp, #8]
 800ccbe:	ab02      	add	r3, sp, #8
 800ccc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ccc2:	492b      	ldr	r1, [pc, #172]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	ab02      	add	r3, sp, #8
 800ccc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ccca:	2002      	movs	r0, #2
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ccd0:	0033      	movs	r3, r6
 800ccd2:	47a8      	blx	r5
 800ccd4:	003b      	movs	r3, r7
 800ccd6:	3360      	adds	r3, #96	; 0x60
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d90b      	bls.n	800ccf6 <acc_sensor_diagnostics_r2_sensor_status+0x374>
 800ccde:	aa02      	add	r2, sp, #8
 800cce0:	4694      	mov	ip, r2
 800cce2:	232a      	movs	r3, #42	; 0x2a
 800cce4:	4463      	add	r3, ip
 800cce6:	881b      	ldrh	r3, [r3, #0]
 800cce8:	4a2f      	ldr	r2, [pc, #188]	; (800cda8 <acc_sensor_diagnostics_r2_sensor_status+0x426>)
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	4920      	ldr	r1, [pc, #128]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800ccee:	0033      	movs	r3, r6
 800ccf0:	2002      	movs	r0, #2
 800ccf2:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800ccf4:	47a8      	blx	r5
 800ccf6:	003b      	movs	r3, r7
 800ccf8:	3360      	adds	r3, #96	; 0x60
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d908      	bls.n	800cd12 <acc_sensor_diagnostics_r2_sensor_status+0x390>
 800cd00:	ab02      	add	r3, sp, #8
 800cd02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cd04:	4a29      	ldr	r2, [pc, #164]	; (800cdac <acc_sensor_diagnostics_r2_sensor_status+0x42a>)
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	4919      	ldr	r1, [pc, #100]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd0a:	0033      	movs	r3, r6
 800cd0c:	2002      	movs	r0, #2
 800cd0e:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd10:	47a8      	blx	r5
 800cd12:	003b      	movs	r3, r7
 800cd14:	3360      	adds	r3, #96	; 0x60
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d908      	bls.n	800cd2e <acc_sensor_diagnostics_r2_sensor_status+0x3ac>
 800cd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1e:	4a24      	ldr	r2, [pc, #144]	; (800cdb0 <acc_sensor_diagnostics_r2_sensor_status+0x42e>)
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	4913      	ldr	r1, [pc, #76]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	2002      	movs	r0, #2
 800cd28:	0033      	movs	r3, r6
 800cd2a:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 800cd2c:	47a8      	blx	r5
 800cd2e:	003b      	movs	r3, r7
 800cd30:	3360      	adds	r3, #96	; 0x60
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d907      	bls.n	800cd48 <acc_sensor_diagnostics_r2_sensor_status+0x3c6>
 800cd38:	8823      	ldrh	r3, [r4, #0]
 800cd3a:	4a1e      	ldr	r2, [pc, #120]	; (800cdb4 <acc_sensor_diagnostics_r2_sensor_status+0x432>)
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	490c      	ldr	r1, [pc, #48]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd40:	0033      	movs	r3, r6
 800cd42:	2002      	movs	r0, #2
 800cd44:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800cd46:	47a0      	blx	r4
 800cd48:	003b      	movs	r3, r7
 800cd4a:	3360      	adds	r3, #96	; 0x60
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d904      	bls.n	800cd5c <acc_sensor_diagnostics_r2_sensor_status+0x3da>
 800cd52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd54:	4a18      	ldr	r2, [pc, #96]	; (800cdb8 <acc_sensor_diagnostics_r2_sensor_status+0x436>)
 800cd56:	4906      	ldr	r1, [pc, #24]	; (800cd70 <acc_sensor_diagnostics_r2_sensor_status+0x3ee>)
 800cd58:	2002      	movs	r0, #2
 800cd5a:	4798      	blx	r3
 800cd5c:	b017      	add	sp, #92	; 0x5c
 800cd5e:	bc3c      	pop	{r2, r3, r4, r5}
 800cd60:	4690      	mov	r8, r2
 800cd62:	4699      	mov	r9, r3
 800cd64:	46a2      	mov	sl, r4
 800cd66:	46ab      	mov	fp, r5
 800cd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd6a:	46c0      	nop			; (mov r8, r8)
 800cd6c:	0801da7a 	.word	0x0801da7a
 800cd70:	0801da4a 	.word	0x0801da4a
 800cd74:	08018b9c 	.word	0x08018b9c
 800cd78:	0801da97 	.word	0x0801da97
 800cd7c:	0801dade 	.word	0x0801dade
 800cd80:	0801db27 	.word	0x0801db27
 800cd84:	0801db58 	.word	0x0801db58
 800cd88:	0801db75 	.word	0x0801db75
 800cd8c:	0801dba1 	.word	0x0801dba1
 800cd90:	0801dbd2 	.word	0x0801dbd2
 800cd94:	08018c1c 	.word	0x08018c1c
 800cd98:	0801dc02 	.word	0x0801dc02
 800cd9c:	0801dc29 	.word	0x0801dc29
 800cda0:	0801dc47 	.word	0x0801dc47
 800cda4:	0801dc6f 	.word	0x0801dc6f
 800cda8:	0801dcc0 	.word	0x0801dcc0
 800cdac:	0801dce3 	.word	0x0801dce3
 800cdb0:	0801dcff 	.word	0x0801dcff
 800cdb4:	0801dd15 	.word	0x0801dd15
 800cdb8:	0801dd2f 	.word	0x0801dd2f

0800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>:
 800cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdbe:	464e      	mov	r6, r9
 800cdc0:	46de      	mov	lr, fp
 800cdc2:	4645      	mov	r5, r8
 800cdc4:	4657      	mov	r7, sl
 800cdc6:	0004      	movs	r4, r0
 800cdc8:	b5e0      	push	{r5, r6, r7, lr}
 800cdca:	468b      	mov	fp, r1
 800cdcc:	4691      	mov	r9, r2
 800cdce:	2665      	movs	r6, #101	; 0x65
 800cdd0:	4d47      	ldr	r5, [pc, #284]	; (800cef0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x134>)
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	4659      	mov	r1, fp
 800cdd6:	0020      	movs	r0, r4
 800cdd8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800cdda:	4798      	blx	r3
 800cddc:	4680      	mov	r8, r0
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d10f      	bne.n	800ce02 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x46>
 800cde2:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800cde4:	0023      	movs	r3, r4
 800cde6:	4a43      	ldr	r2, [pc, #268]	; (800cef4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x138>)
 800cde8:	4943      	ldr	r1, [pc, #268]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cdea:	47a8      	blx	r5
 800cdec:	0020      	movs	r0, r4
 800cdee:	f7ff fdc8 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	b005      	add	sp, #20
 800cdf6:	bc3c      	pop	{r2, r3, r4, r5}
 800cdf8:	4690      	mov	r8, r2
 800cdfa:	4699      	mov	r9, r3
 800cdfc:	46a2      	mov	sl, r4
 800cdfe:	46ab      	mov	fp, r5
 800ce00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce02:	270e      	movs	r7, #14
 800ce04:	2300      	movs	r3, #0
 800ce06:	446f      	add	r7, sp
 800ce08:	003a      	movs	r2, r7
 800ce0a:	212a      	movs	r1, #42	; 0x2a
 800ce0c:	0020      	movs	r0, r4
 800ce0e:	469a      	mov	sl, r3
 800ce10:	803b      	strh	r3, [r7, #0]
 800ce12:	f7ff fd8f 	bl	800c934 <internal_reg_read.lto_priv.623>
 800ce16:	2240      	movs	r2, #64	; 0x40
 800ce18:	883b      	ldrh	r3, [r7, #0]
 800ce1a:	4213      	tst	r3, r2
 800ce1c:	d04f      	beq.n	800cebe <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x102>
 800ce1e:	003a      	movs	r2, r7
 800ce20:	2128      	movs	r1, #40	; 0x28
 800ce22:	0020      	movs	r0, r4
 800ce24:	f7ff fd86 	bl	800c934 <internal_reg_read.lto_priv.623>
 800ce28:	4649      	mov	r1, r9
 800ce2a:	883a      	ldrh	r2, [r7, #0]
 800ce2c:	b2d3      	uxtb	r3, r2
 800ce2e:	700b      	strb	r3, [r1, #0]
 800ce30:	804a      	strh	r2, [r1, #2]
 800ce32:	2b0b      	cmp	r3, #11
 800ce34:	d839      	bhi.n	800ceaa <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xee>
 800ce36:	0018      	movs	r0, r3
 800ce38:	f001 fe5e 	bl	800eaf8 <__gnu_thumb1_case_sqi>
 800ce3c:	dbdb1806 	.word	0xdbdb1806
 800ce40:	dbdbdbdb 	.word	0xdbdbdbdb
 800ce44:	dbdbdbdb 	.word	0xdbdbdbdb
 800ce48:	0023      	movs	r3, r4
 800ce4a:	4a2c      	ldr	r2, [pc, #176]	; (800cefc <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x140>)
 800ce4c:	492a      	ldr	r1, [pc, #168]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800ce4e:	2000      	movs	r0, #0
 800ce50:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800ce52:	47b0      	blx	r6
 800ce54:	0020      	movs	r0, r4
 800ce56:	f7ff fd94 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800ce5a:	0023      	movs	r3, r4
 800ce5c:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 800ce5e:	4a28      	ldr	r2, [pc, #160]	; (800cf00 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x144>)
 800ce60:	4925      	ldr	r1, [pc, #148]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800ce62:	2000      	movs	r0, #0
 800ce64:	47a8      	blx	r5
 800ce66:	2300      	movs	r3, #0
 800ce68:	4698      	mov	r8, r3
 800ce6a:	e7c2      	b.n	800cdf2 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800ce6c:	0a11      	lsrs	r1, r2, #8
 800ce6e:	2910      	cmp	r1, #16
 800ce70:	d804      	bhi.n	800ce7c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xc0>
 800ce72:	2301      	movs	r3, #1
 800ce74:	408b      	lsls	r3, r1
 800ce76:	4923      	ldr	r1, [pc, #140]	; (800cf04 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x148>)
 800ce78:	420b      	tst	r3, r1
 800ce7a:	d105      	bne.n	800ce88 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xcc>
 800ce7c:	2384      	movs	r3, #132	; 0x84
 800ce7e:	b2d2      	uxtb	r2, r2
 800ce80:	019b      	lsls	r3, r3, #6
 800ce82:	431a      	orrs	r2, r3
 800ce84:	464b      	mov	r3, r9
 800ce86:	805a      	strh	r2, [r3, #2]
 800ce88:	464b      	mov	r3, r9
 800ce8a:	885a      	ldrh	r2, [r3, #2]
 800ce8c:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800ce8e:	0a12      	lsrs	r2, r2, #8
 800ce90:	3a01      	subs	r2, #1
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	4b1c      	ldr	r3, [pc, #112]	; (800cf08 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x14c>)
 800ce96:	2a20      	cmp	r2, #32
 800ce98:	d802      	bhi.n	800cea0 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0xe4>
 800ce9a:	4b1c      	ldr	r3, [pc, #112]	; (800cf0c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x150>)
 800ce9c:	0092      	lsls	r2, r2, #2
 800ce9e:	58d3      	ldr	r3, [r2, r3]
 800cea0:	4a1b      	ldr	r2, [pc, #108]	; (800cf10 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x154>)
 800cea2:	4915      	ldr	r1, [pc, #84]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cea4:	2000      	movs	r0, #0
 800cea6:	47b0      	blx	r6
 800cea8:	e7d4      	b.n	800ce54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800ceaa:	9400      	str	r4, [sp, #0]
 800ceac:	4a19      	ldr	r2, [pc, #100]	; (800cf14 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x158>)
 800ceae:	4912      	ldr	r1, [pc, #72]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800ceb0:	4650      	mov	r0, sl
 800ceb2:	6e6e      	ldr	r6, [r5, #100]	; 0x64
 800ceb4:	47b0      	blx	r6
 800ceb6:	464b      	mov	r3, r9
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	e7ca      	b.n	800ce54 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x98>
 800cebe:	002b      	movs	r3, r5
 800cec0:	3360      	adds	r3, #96	; 0x60
 800cec2:	781b      	ldrb	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d005      	beq.n	800ced4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x118>
 800cec8:	0023      	movs	r3, r4
 800ceca:	4a13      	ldr	r2, [pc, #76]	; (800cf18 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x15c>)
 800cecc:	490a      	ldr	r1, [pc, #40]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cece:	2001      	movs	r0, #1
 800ced0:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 800ced2:	47b8      	blx	r7
 800ced4:	3e01      	subs	r6, #1
 800ced6:	b2b6      	uxth	r6, r6
 800ced8:	2e00      	cmp	r6, #0
 800ceda:	d000      	beq.n	800cede <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x122>
 800cedc:	e77a      	b.n	800cdd4 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x18>
 800cede:	9400      	str	r4, [sp, #0]
 800cee0:	6e6c      	ldr	r4, [r5, #100]	; 0x64
 800cee2:	2364      	movs	r3, #100	; 0x64
 800cee4:	4a0d      	ldr	r2, [pc, #52]	; (800cf1c <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x160>)
 800cee6:	4904      	ldr	r1, [pc, #16]	; (800cef8 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x13c>)
 800cee8:	0030      	movs	r0, r6
 800ceea:	47a0      	blx	r4
 800ceec:	46b0      	mov	r8, r6
 800ceee:	e780      	b.n	800cdf2 <acc_sensor_protocol_r2_wait_for_event.constprop.27+0x36>
 800cef0:	20000288 	.word	0x20000288
 800cef4:	0801dd7d 	.word	0x0801dd7d
 800cef8:	0801c5ee 	.word	0x0801c5ee
 800cefc:	0801dda5 	.word	0x0801dda5
 800cf00:	0801de17 	.word	0x0801de17
 800cf04:	00010016 	.word	0x00010016
 800cf08:	0801dd6f 	.word	0x0801dd6f
 800cf0c:	08019de0 	.word	0x08019de0
 800cf10:	0801ddc8 	.word	0x0801ddc8
 800cf14:	0801dde8 	.word	0x0801dde8
 800cf18:	0801de3f 	.word	0x0801de3f
 800cf1c:	0801de60 	.word	0x0801de60

0800cf20 <acc_sensor_protocol_r2_stop.constprop.25>:
 800cf20:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf22:	0005      	movs	r5, r0
 800cf24:	f7f8 fe92 	bl	8005c4c <acc_sensor_protocol_r2_is_sensor_running>
 800cf28:	1e04      	subs	r4, r0, #0
 800cf2a:	d109      	bne.n	800cf40 <acc_sensor_protocol_r2_stop.constprop.25+0x20>
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	; (800cf98 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800cf2e:	4a1b      	ldr	r2, [pc, #108]	; (800cf9c <acc_sensor_protocol_r2_stop.constprop.25+0x7c>)
 800cf30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf32:	491b      	ldr	r1, [pc, #108]	; (800cfa0 <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800cf34:	4798      	blx	r3
 800cf36:	0028      	movs	r0, r5
 800cf38:	f7ff fd23 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800cf3c:	0020      	movs	r0, r4
 800cf3e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800cf40:	4b18      	ldr	r3, [pc, #96]	; (800cfa4 <acc_sensor_protocol_r2_stop.constprop.25+0x84>)
 800cf42:	ae01      	add	r6, sp, #4
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	2202      	movs	r2, #2
 800cf48:	2300      	movs	r3, #0
 800cf4a:	0031      	movs	r1, r6
 800cf4c:	0028      	movs	r0, r5
 800cf4e:	f7f9 f861 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800cf52:	0028      	movs	r0, r5
 800cf54:	f7f8 fa36 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 800cf58:	1e04      	subs	r4, r0, #0
 800cf5a:	d0ef      	beq.n	800cf3c <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cf5c:	21fa      	movs	r1, #250	; 0xfa
 800cf5e:	0032      	movs	r2, r6
 800cf60:	00c9      	lsls	r1, r1, #3
 800cf62:	0028      	movs	r0, r5
 800cf64:	f7ff ff2a 	bl	800cdbc <acc_sensor_protocol_r2_wait_for_event.constprop.27>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d101      	bne.n	800cf70 <acc_sensor_protocol_r2_stop.constprop.25+0x50>
 800cf6c:	2400      	movs	r4, #0
 800cf6e:	e7e5      	b.n	800cf3c <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cf70:	0028      	movs	r0, r5
 800cf72:	f7f8 fa27 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 800cf76:	1e04      	subs	r4, r0, #0
 800cf78:	d0f8      	beq.n	800cf6c <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800cf7a:	7833      	ldrb	r3, [r6, #0]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d0dd      	beq.n	800cf3c <acc_sensor_protocol_r2_stop.constprop.25+0x1c>
 800cf80:	4a05      	ldr	r2, [pc, #20]	; (800cf98 <acc_sensor_protocol_r2_stop.constprop.25+0x78>)
 800cf82:	8873      	ldrh	r3, [r6, #2]
 800cf84:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800cf86:	4906      	ldr	r1, [pc, #24]	; (800cfa0 <acc_sensor_protocol_r2_stop.constprop.25+0x80>)
 800cf88:	4a07      	ldr	r2, [pc, #28]	; (800cfa8 <acc_sensor_protocol_r2_stop.constprop.25+0x88>)
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	47a0      	blx	r4
 800cf8e:	0028      	movs	r0, r5
 800cf90:	f7ff fcf7 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800cf94:	e7ea      	b.n	800cf6c <acc_sensor_protocol_r2_stop.constprop.25+0x4c>
 800cf96:	46c0      	nop			; (mov r8, r8)
 800cf98:	20000288 	.word	0x20000288
 800cf9c:	0801de99 	.word	0x0801de99
 800cfa0:	0801c5ee 	.word	0x0801c5ee
 800cfa4:	00011074 	.word	0x00011074
 800cfa8:	0801decb 	.word	0x0801decb

0800cfac <acc_sensor_protocol_r2_prepare_load.constprop.21>:
 800cfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfae:	46ce      	mov	lr, r9
 800cfb0:	4647      	mov	r7, r8
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cfb8:	0852      	lsrs	r2, r2, #1
 800cfba:	4e37      	ldr	r6, [pc, #220]	; (800d098 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xec>)
 800cfbc:	602a      	str	r2, [r5, #0]
 800cfbe:	0004      	movs	r4, r0
 800cfc0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800cfc2:	0840      	lsrs	r0, r0, #1
 800cfc4:	4290      	cmp	r0, r2
 800cfc6:	d900      	bls.n	800cfca <acc_sensor_protocol_r2_prepare_load.constprop.21+0x1e>
 800cfc8:	0010      	movs	r0, r2
 800cfca:	2701      	movs	r7, #1
 800cfcc:	3102      	adds	r1, #2
 800cfce:	6019      	str	r1, [r3, #0]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	3801      	subs	r0, #1
 800cfd4:	43b8      	bics	r0, r7
 800cfd6:	6028      	str	r0, [r5, #0]
 800cfd8:	ad01      	add	r5, sp, #4
 800cfda:	002a      	movs	r2, r5
 800cfdc:	212a      	movs	r1, #42	; 0x2a
 800cfde:	0020      	movs	r0, r4
 800cfe0:	802b      	strh	r3, [r5, #0]
 800cfe2:	f7ff fca7 	bl	800c934 <internal_reg_read.lto_priv.623>
 800cfe6:	882b      	ldrh	r3, [r5, #0]
 800cfe8:	065b      	lsls	r3, r3, #25
 800cfea:	d50d      	bpl.n	800d008 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x5c>
 800cfec:	0033      	movs	r3, r6
 800cfee:	3360      	adds	r3, #96	; 0x60
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d005      	beq.n	800d002 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x56>
 800cff6:	0038      	movs	r0, r7
 800cff8:	0023      	movs	r3, r4
 800cffa:	4a28      	ldr	r2, [pc, #160]	; (800d09c <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf0>)
 800cffc:	4928      	ldr	r1, [pc, #160]	; (800d0a0 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800cffe:	6e77      	ldr	r7, [r6, #100]	; 0x64
 800d000:	47b8      	blx	r7
 800d002:	0020      	movs	r0, r4
 800d004:	f7ff fcbd 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800d008:	0020      	movs	r0, r4
 800d00a:	f7f8 fe1f 	bl	8005c4c <acc_sensor_protocol_r2_is_sensor_running>
 800d00e:	4680      	mov	r8, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	d00e      	beq.n	800d032 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x86>
 800d014:	0023      	movs	r3, r4
 800d016:	4a23      	ldr	r2, [pc, #140]	; (800d0a4 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf8>)
 800d018:	4921      	ldr	r1, [pc, #132]	; (800d0a0 <acc_sensor_protocol_r2_prepare_load.constprop.21+0xf4>)
 800d01a:	2000      	movs	r0, #0
 800d01c:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800d01e:	47a8      	blx	r5
 800d020:	0020      	movs	r0, r4
 800d022:	f7ff fcae 	bl	800c982 <acc_sensor_diagnostics_r2_sensor_status>
 800d026:	2000      	movs	r0, #0
 800d028:	b003      	add	sp, #12
 800d02a:	bc0c      	pop	{r2, r3}
 800d02c:	4690      	mov	r8, r2
 800d02e:	4699      	mov	r9, r3
 800d030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d032:	466b      	mov	r3, sp
 800d034:	1c9e      	adds	r6, r3, #2
 800d036:	2702      	movs	r7, #2
 800d038:	0032      	movs	r2, r6
 800d03a:	2180      	movs	r1, #128	; 0x80
 800d03c:	0020      	movs	r0, r4
 800d03e:	f7ff fc79 	bl	800c934 <internal_reg_read.lto_priv.623>
 800d042:	2284      	movs	r2, #132	; 0x84
 800d044:	8833      	ldrh	r3, [r6, #0]
 800d046:	0152      	lsls	r2, r2, #5
 800d048:	43bb      	bics	r3, r7
 800d04a:	433b      	orrs	r3, r7
 800d04c:	4691      	mov	r9, r2
 800d04e:	802a      	strh	r2, [r5, #0]
 800d050:	806b      	strh	r3, [r5, #2]
 800d052:	003a      	movs	r2, r7
 800d054:	4643      	mov	r3, r8
 800d056:	0029      	movs	r1, r5
 800d058:	0020      	movs	r0, r4
 800d05a:	f7f8 ffdb 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800d05e:	0032      	movs	r2, r6
 800d060:	2180      	movs	r1, #128	; 0x80
 800d062:	0020      	movs	r0, r4
 800d064:	f7ff fc66 	bl	800c934 <internal_reg_read.lto_priv.623>
 800d068:	2280      	movs	r2, #128	; 0x80
 800d06a:	8833      	ldrh	r3, [r6, #0]
 800d06c:	0029      	movs	r1, r5
 800d06e:	4393      	bics	r3, r2
 800d070:	464a      	mov	r2, r9
 800d072:	806b      	strh	r3, [r5, #2]
 800d074:	802a      	strh	r2, [r5, #0]
 800d076:	4643      	mov	r3, r8
 800d078:	003a      	movs	r2, r7
 800d07a:	0020      	movs	r0, r4
 800d07c:	f7f8 ffca 	bl	8006014 <acc_rss_integration_sensor_device_transfer>
 800d080:	2201      	movs	r2, #1
 800d082:	2105      	movs	r1, #5
 800d084:	0020      	movs	r0, r4
 800d086:	f7fd fdd7 	bl	800ac38 <acc_sensor_reg_write>
 800d08a:	0020      	movs	r0, r4
 800d08c:	2203      	movs	r2, #3
 800d08e:	217a      	movs	r1, #122	; 0x7a
 800d090:	f7fd fdd2 	bl	800ac38 <acc_sensor_reg_write>
 800d094:	2001      	movs	r0, #1
 800d096:	e7c7      	b.n	800d028 <acc_sensor_protocol_r2_prepare_load.constprop.21+0x7c>
 800d098:	20000288 	.word	0x20000288
 800d09c:	0801deeb 	.word	0x0801deeb
 800d0a0:	0801c5ee 	.word	0x0801c5ee
 800d0a4:	0801df17 	.word	0x0801df17

0800d0a8 <acc_cpd_linear_sweep_get_info>:
 800d0a8:	30ad      	adds	r0, #173	; 0xad
 800d0aa:	7803      	ldrb	r3, [r0, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <acc_cpd_linear_sweep_get_info+0x1e>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	604a      	str	r2, [r1, #4]
 800d0b6:	608a      	str	r2, [r1, #8]
 800d0b8:	3201      	adds	r2, #1
 800d0ba:	60ca      	str	r2, [r1, #12]
 800d0bc:	3201      	adds	r2, #1
 800d0be:	600b      	str	r3, [r1, #0]
 800d0c0:	610a      	str	r2, [r1, #16]
 800d0c2:	614b      	str	r3, [r1, #20]
 800d0c4:	4770      	bx	lr
 800d0c6:	600b      	str	r3, [r1, #0]
 800d0c8:	604b      	str	r3, [r1, #4]
 800d0ca:	608b      	str	r3, [r1, #8]
 800d0cc:	60cb      	str	r3, [r1, #12]
 800d0ce:	610b      	str	r3, [r1, #16]
 800d0d0:	614b      	str	r3, [r1, #20]
 800d0d2:	e7f7      	b.n	800d0c4 <acc_cpd_linear_sweep_get_info+0x1c>

0800d0d4 <acc_cpd_linear_sweep_update_program>:
 800d0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0d6:	784b      	ldrb	r3, [r1, #1]
 800d0d8:	0005      	movs	r5, r0
 800d0da:	000c      	movs	r4, r1
 800d0dc:	684f      	ldr	r7, [r1, #4]
 800d0de:	68ce      	ldr	r6, [r1, #12]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <acc_cpd_linear_sweep_update_program+0x20>
 800d0e4:	688b      	ldr	r3, [r1, #8]
 800d0e6:	4a0e      	ldr	r2, [pc, #56]	; (800d120 <acc_cpd_linear_sweep_update_program+0x4c>)
 800d0e8:	330e      	adds	r3, #14
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	490d      	ldr	r1, [pc, #52]	; (800d124 <acc_cpd_linear_sweep_update_program+0x50>)
 800d0ee:	235e      	movs	r3, #94	; 0x5e
 800d0f0:	f7fd fdb0 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800d0f4:	7823      	ldrb	r3, [r4, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d006      	beq.n	800d108 <acc_cpd_linear_sweep_update_program+0x34>
 800d0fa:	9700      	str	r7, [sp, #0]
 800d0fc:	2336      	movs	r3, #54	; 0x36
 800d0fe:	4a08      	ldr	r2, [pc, #32]	; (800d120 <acc_cpd_linear_sweep_update_program+0x4c>)
 800d100:	4908      	ldr	r1, [pc, #32]	; (800d124 <acc_cpd_linear_sweep_update_program+0x50>)
 800d102:	0028      	movs	r0, r5
 800d104:	f7fd fda6 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800d108:	78a3      	ldrb	r3, [r4, #2]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d006      	beq.n	800d11c <acc_cpd_linear_sweep_update_program+0x48>
 800d10e:	9600      	str	r6, [sp, #0]
 800d110:	2372      	movs	r3, #114	; 0x72
 800d112:	4a03      	ldr	r2, [pc, #12]	; (800d120 <acc_cpd_linear_sweep_update_program+0x4c>)
 800d114:	4903      	ldr	r1, [pc, #12]	; (800d124 <acc_cpd_linear_sweep_update_program+0x50>)
 800d116:	0028      	movs	r0, r5
 800d118:	f7fd fd9c 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800d11c:	2001      	movs	r0, #1
 800d11e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d120:	0801979c 	.word	0x0801979c
 800d124:	0801a948 	.word	0x0801a948

0800d128 <acc_probes_execute>:
 800d128:	230c      	movs	r3, #12
 800d12a:	b510      	push	{r4, lr}
 800d12c:	7804      	ldrb	r4, [r0, #0]
 800d12e:	435c      	muls	r4, r3
 800d130:	4b03      	ldr	r3, [pc, #12]	; (800d140 <acc_probes_execute+0x18>)
 800d132:	191b      	adds	r3, r3, r4
 800d134:	685c      	ldr	r4, [r3, #4]
 800d136:	2c00      	cmp	r4, #0
 800d138:	d001      	beq.n	800d13e <acc_probes_execute+0x16>
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	47a0      	blx	r4
 800d13e:	bd10      	pop	{r4, pc}
 800d140:	08019554 	.word	0x08019554

0800d144 <acc_cpd_linear_sweep_load_program>:
 800d144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d146:	46de      	mov	lr, fp
 800d148:	4657      	mov	r7, sl
 800d14a:	4645      	mov	r5, r8
 800d14c:	464e      	mov	r6, r9
 800d14e:	b5e0      	push	{r5, r6, r7, lr}
 800d150:	001f      	movs	r7, r3
 800d152:	2316      	movs	r3, #22
 800d154:	b08f      	sub	sp, #60	; 0x3c
 800d156:	ac0b      	add	r4, sp, #44	; 0x2c
 800d158:	7023      	strb	r3, [r4, #0]
 800d15a:	2307      	movs	r3, #7
 800d15c:	9005      	str	r0, [sp, #20]
 800d15e:	9108      	str	r1, [sp, #32]
 800d160:	0015      	movs	r5, r2
 800d162:	900c      	str	r0, [sp, #48]	; 0x30
 800d164:	22bc      	movs	r2, #188	; 0xbc
 800d166:	0039      	movs	r1, r7
 800d168:	0020      	movs	r0, r4
 800d16a:	930d      	str	r3, [sp, #52]	; 0x34
 800d16c:	f7ff ffdc 	bl	800d128 <acc_probes_execute>
 800d170:	2300      	movs	r3, #0
 800d172:	930b      	str	r3, [sp, #44]	; 0x2c
 800d174:	930a      	str	r3, [sp, #40]	; 0x28
 800d176:	ab0a      	add	r3, sp, #40	; 0x28
 800d178:	9300      	str	r3, [sp, #0]
 800d17a:	002a      	movs	r2, r5
 800d17c:	0023      	movs	r3, r4
 800d17e:	9908      	ldr	r1, [sp, #32]
 800d180:	9805      	ldr	r0, [sp, #20]
 800d182:	f7ff ff13 	bl	800cfac <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800d186:	9009      	str	r0, [sp, #36]	; 0x24
 800d188:	2800      	cmp	r0, #0
 800d18a:	d101      	bne.n	800d190 <acc_cpd_linear_sweep_load_program+0x4c>
 800d18c:	f000 fc50 	bl	800da30 <acc_cpd_linear_sweep_load_program+0x8ec>
 800d190:	4bf9      	ldr	r3, [pc, #996]	; (800d578 <acc_cpd_linear_sweep_load_program+0x434>)
 800d192:	001a      	movs	r2, r3
 800d194:	3260      	adds	r2, #96	; 0x60
 800d196:	7812      	ldrb	r2, [r2, #0]
 800d198:	2a03      	cmp	r2, #3
 800d19a:	d904      	bls.n	800d1a6 <acc_cpd_linear_sweep_load_program+0x62>
 800d19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d19e:	4af7      	ldr	r2, [pc, #988]	; (800d57c <acc_cpd_linear_sweep_load_program+0x438>)
 800d1a0:	49f7      	ldr	r1, [pc, #988]	; (800d580 <acc_cpd_linear_sweep_load_program+0x43c>)
 800d1a2:	2004      	movs	r0, #4
 800d1a4:	4798      	blx	r3
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	469b      	mov	fp, r3
 800d1aa:	23e2      	movs	r3, #226	; 0xe2
 800d1ac:	465a      	mov	r2, fp
 800d1ae:	00db      	lsls	r3, r3, #3
 800d1b0:	1a9b      	subs	r3, r3, r2
 800d1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1b4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d1b6:	9203      	str	r2, [sp, #12]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d900      	bls.n	800d1be <acc_cpd_linear_sweep_load_program+0x7a>
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	465b      	mov	r3, fp
 800d1c0:	085b      	lsrs	r3, r3, #1
 800d1c2:	9306      	str	r3, [sp, #24]
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	0021      	movs	r1, r4
 800d1c8:	085a      	lsrs	r2, r3, #1
 800d1ca:	9b06      	ldr	r3, [sp, #24]
 800d1cc:	0098      	lsls	r0, r3, #2
 800d1ce:	4bed      	ldr	r3, [pc, #948]	; (800d584 <acc_cpd_linear_sweep_load_program+0x440>)
 800d1d0:	18c0      	adds	r0, r0, r3
 800d1d2:	f7ff f9e1 	bl	800c598 <acc_confprogram_copy>
 800d1d6:	465b      	mov	r3, fp
 800d1d8:	b29d      	uxth	r5, r3
 800d1da:	466b      	mov	r3, sp
 800d1dc:	899e      	ldrh	r6, [r3, #12]
 800d1de:	4bea      	ldr	r3, [pc, #936]	; (800d588 <acc_cpd_linear_sweep_load_program+0x444>)
 800d1e0:	0032      	movs	r2, r6
 800d1e2:	4698      	mov	r8, r3
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	0029      	movs	r1, r5
 800d1e8:	9301      	str	r3, [sp, #4]
 800d1ea:	2350      	movs	r3, #80	; 0x50
 800d1ec:	0020      	movs	r0, r4
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	4643      	mov	r3, r8
 800d1f2:	f7ff fa19 	bl	800c628 <acc_confprogram_patch_offset>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	0032      	movs	r2, r6
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	234e      	movs	r3, #78	; 0x4e
 800d1fe:	0029      	movs	r1, r5
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	0020      	movs	r0, r4
 800d204:	4643      	mov	r3, r8
 800d206:	f7ff fa0f 	bl	800c628 <acc_confprogram_patch_offset>
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	0032      	movs	r2, r6
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	234f      	movs	r3, #79	; 0x4f
 800d212:	0029      	movs	r1, r5
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	0020      	movs	r0, r4
 800d218:	4643      	mov	r3, r8
 800d21a:	f7ff fa05 	bl	800c628 <acc_confprogram_patch_offset>
 800d21e:	89bb      	ldrh	r3, [r7, #12]
 800d220:	0032      	movs	r2, r6
 800d222:	9301      	str	r3, [sp, #4]
 800d224:	234c      	movs	r3, #76	; 0x4c
 800d226:	0029      	movs	r1, r5
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	0020      	movs	r0, r4
 800d22c:	4643      	mov	r3, r8
 800d22e:	f7ff f9fb 	bl	800c628 <acc_confprogram_patch_offset>
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	0032      	movs	r2, r6
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	2326      	movs	r3, #38	; 0x26
 800d23a:	0029      	movs	r1, r5
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	0020      	movs	r0, r4
 800d240:	4643      	mov	r3, r8
 800d242:	f7ff f9f1 	bl	800c628 <acc_confprogram_patch_offset>
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	0032      	movs	r2, r6
 800d24a:	9301      	str	r3, [sp, #4]
 800d24c:	2373      	movs	r3, #115	; 0x73
 800d24e:	0029      	movs	r1, r5
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	0020      	movs	r0, r4
 800d254:	4643      	mov	r3, r8
 800d256:	f7ff f9e7 	bl	800c628 <acc_confprogram_patch_offset>
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	0032      	movs	r2, r6
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	2362      	movs	r3, #98	; 0x62
 800d262:	0029      	movs	r1, r5
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	0020      	movs	r0, r4
 800d268:	4643      	mov	r3, r8
 800d26a:	f7ff f9dd 	bl	800c628 <acc_confprogram_patch_offset>
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	0032      	movs	r2, r6
 800d272:	9301      	str	r3, [sp, #4]
 800d274:	2337      	movs	r3, #55	; 0x37
 800d276:	0029      	movs	r1, r5
 800d278:	9300      	str	r3, [sp, #0]
 800d27a:	0020      	movs	r0, r4
 800d27c:	4643      	mov	r3, r8
 800d27e:	f7ff f9d3 	bl	800c628 <acc_confprogram_patch_offset>
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	0032      	movs	r2, r6
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	2376      	movs	r3, #118	; 0x76
 800d28a:	0029      	movs	r1, r5
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	0020      	movs	r0, r4
 800d290:	4643      	mov	r3, r8
 800d292:	f7ff f9c9 	bl	800c628 <acc_confprogram_patch_offset>
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	0032      	movs	r2, r6
 800d29a:	9301      	str	r3, [sp, #4]
 800d29c:	2369      	movs	r3, #105	; 0x69
 800d29e:	0029      	movs	r1, r5
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	0020      	movs	r0, r4
 800d2a4:	4643      	mov	r3, r8
 800d2a6:	f7ff f9bf 	bl	800c628 <acc_confprogram_patch_offset>
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	0032      	movs	r2, r6
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	236a      	movs	r3, #106	; 0x6a
 800d2b2:	0029      	movs	r1, r5
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	0020      	movs	r0, r4
 800d2b8:	4643      	mov	r3, r8
 800d2ba:	f7ff f9b5 	bl	800c628 <acc_confprogram_patch_offset>
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	0032      	movs	r2, r6
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	2319      	movs	r3, #25
 800d2c6:	0029      	movs	r1, r5
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	0020      	movs	r0, r4
 800d2cc:	4643      	mov	r3, r8
 800d2ce:	f7ff f9ab 	bl	800c628 <acc_confprogram_patch_offset>
 800d2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d4:	0032      	movs	r2, r6
 800d2d6:	9301      	str	r3, [sp, #4]
 800d2d8:	231a      	movs	r3, #26
 800d2da:	0029      	movs	r1, r5
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	0020      	movs	r0, r4
 800d2e0:	4643      	mov	r3, r8
 800d2e2:	f7ff f9a1 	bl	800c628 <acc_confprogram_patch_offset>
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	0032      	movs	r2, r6
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	231b      	movs	r3, #27
 800d2ee:	0029      	movs	r1, r5
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	0020      	movs	r0, r4
 800d2f4:	4643      	mov	r3, r8
 800d2f6:	f7ff f997 	bl	800c628 <acc_confprogram_patch_offset>
 800d2fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fc:	0032      	movs	r2, r6
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	231c      	movs	r3, #28
 800d302:	0029      	movs	r1, r5
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	0020      	movs	r0, r4
 800d308:	4643      	mov	r3, r8
 800d30a:	f7ff f98d 	bl	800c628 <acc_confprogram_patch_offset>
 800d30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d310:	0032      	movs	r2, r6
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	231d      	movs	r3, #29
 800d316:	0029      	movs	r1, r5
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	0020      	movs	r0, r4
 800d31c:	4643      	mov	r3, r8
 800d31e:	f7ff f983 	bl	800c628 <acc_confprogram_patch_offset>
 800d322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d324:	0032      	movs	r2, r6
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	231e      	movs	r3, #30
 800d32a:	0029      	movs	r1, r5
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	0020      	movs	r0, r4
 800d330:	4643      	mov	r3, r8
 800d332:	f7ff f979 	bl	800c628 <acc_confprogram_patch_offset>
 800d336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d338:	0032      	movs	r2, r6
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	2355      	movs	r3, #85	; 0x55
 800d33e:	0029      	movs	r1, r5
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	0020      	movs	r0, r4
 800d344:	4643      	mov	r3, r8
 800d346:	f7ff f96f 	bl	800c628 <acc_confprogram_patch_offset>
 800d34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d34c:	0032      	movs	r2, r6
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	2356      	movs	r3, #86	; 0x56
 800d352:	0029      	movs	r1, r5
 800d354:	9300      	str	r3, [sp, #0]
 800d356:	0020      	movs	r0, r4
 800d358:	4643      	mov	r3, r8
 800d35a:	f7ff f965 	bl	800c628 <acc_confprogram_patch_offset>
 800d35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d360:	0032      	movs	r2, r6
 800d362:	9301      	str	r3, [sp, #4]
 800d364:	2358      	movs	r3, #88	; 0x58
 800d366:	0029      	movs	r1, r5
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	0020      	movs	r0, r4
 800d36c:	4643      	mov	r3, r8
 800d36e:	f7ff f95b 	bl	800c628 <acc_confprogram_patch_offset>
 800d372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d374:	0032      	movs	r2, r6
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	236b      	movs	r3, #107	; 0x6b
 800d37a:	0029      	movs	r1, r5
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	0020      	movs	r0, r4
 800d380:	4643      	mov	r3, r8
 800d382:	f7ff f951 	bl	800c628 <acc_confprogram_patch_offset>
 800d386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d388:	0032      	movs	r2, r6
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	2386      	movs	r3, #134	; 0x86
 800d38e:	0029      	movs	r1, r5
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	0020      	movs	r0, r4
 800d394:	4643      	mov	r3, r8
 800d396:	f7ff f947 	bl	800c628 <acc_confprogram_patch_offset>
 800d39a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d39c:	0032      	movs	r2, r6
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	2364      	movs	r3, #100	; 0x64
 800d3a2:	0029      	movs	r1, r5
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	0020      	movs	r0, r4
 800d3a8:	4643      	mov	r3, r8
 800d3aa:	f7ff f93d 	bl	800c628 <acc_confprogram_patch_offset>
 800d3ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d3b0:	0032      	movs	r2, r6
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	2365      	movs	r3, #101	; 0x65
 800d3b6:	0029      	movs	r1, r5
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	0020      	movs	r0, r4
 800d3bc:	4643      	mov	r3, r8
 800d3be:	f7ff f933 	bl	800c628 <acc_confprogram_patch_offset>
 800d3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3c4:	0032      	movs	r2, r6
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	2340      	movs	r3, #64	; 0x40
 800d3ca:	0029      	movs	r1, r5
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	0020      	movs	r0, r4
 800d3d0:	4643      	mov	r3, r8
 800d3d2:	f7ff f929 	bl	800c628 <acc_confprogram_patch_offset>
 800d3d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3d8:	0032      	movs	r2, r6
 800d3da:	9301      	str	r3, [sp, #4]
 800d3dc:	2341      	movs	r3, #65	; 0x41
 800d3de:	0029      	movs	r1, r5
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	0020      	movs	r0, r4
 800d3e4:	4643      	mov	r3, r8
 800d3e6:	f7ff f91f 	bl	800c628 <acc_confprogram_patch_offset>
 800d3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ec:	0032      	movs	r2, r6
 800d3ee:	9301      	str	r3, [sp, #4]
 800d3f0:	2372      	movs	r3, #114	; 0x72
 800d3f2:	0029      	movs	r1, r5
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	0020      	movs	r0, r4
 800d3f8:	4643      	mov	r3, r8
 800d3fa:	f7ff f915 	bl	800c628 <acc_confprogram_patch_offset>
 800d3fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d400:	0032      	movs	r2, r6
 800d402:	9301      	str	r3, [sp, #4]
 800d404:	2354      	movs	r3, #84	; 0x54
 800d406:	0029      	movs	r1, r5
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	0020      	movs	r0, r4
 800d40c:	4643      	mov	r3, r8
 800d40e:	f7ff f90b 	bl	800c628 <acc_confprogram_patch_offset>
 800d412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d414:	0032      	movs	r2, r6
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	2339      	movs	r3, #57	; 0x39
 800d41a:	0029      	movs	r1, r5
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	0020      	movs	r0, r4
 800d420:	4643      	mov	r3, r8
 800d422:	f7ff f901 	bl	800c628 <acc_confprogram_patch_offset>
 800d426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d06f      	beq.n	800d50c <acc_cpd_linear_sweep_load_program+0x3c8>
 800d42c:	2301      	movs	r3, #1
 800d42e:	9301      	str	r3, [sp, #4]
 800d430:	330f      	adds	r3, #15
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	0032      	movs	r2, r6
 800d436:	4643      	mov	r3, r8
 800d438:	0029      	movs	r1, r5
 800d43a:	0020      	movs	r0, r4
 800d43c:	f7ff f8f4 	bl	800c628 <acc_confprogram_patch_offset>
 800d440:	4b52      	ldr	r3, [pc, #328]	; (800d58c <acc_cpd_linear_sweep_load_program+0x448>)
 800d442:	0032      	movs	r2, r6
 800d444:	469a      	mov	sl, r3
 800d446:	9301      	str	r3, [sp, #4]
 800d448:	2312      	movs	r3, #18
 800d44a:	0029      	movs	r1, r5
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	0020      	movs	r0, r4
 800d450:	4643      	mov	r3, r8
 800d452:	f7ff f8e9 	bl	800c628 <acc_confprogram_patch_offset>
 800d456:	2307      	movs	r3, #7
 800d458:	4699      	mov	r9, r3
 800d45a:	9301      	str	r3, [sp, #4]
 800d45c:	330d      	adds	r3, #13
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	0032      	movs	r2, r6
 800d462:	4643      	mov	r3, r8
 800d464:	0029      	movs	r1, r5
 800d466:	0020      	movs	r0, r4
 800d468:	f7ff f8de 	bl	800c628 <acc_confprogram_patch_offset>
 800d46c:	4653      	mov	r3, sl
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	2311      	movs	r3, #17
 800d472:	0032      	movs	r2, r6
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	0029      	movs	r1, r5
 800d478:	4643      	mov	r3, r8
 800d47a:	0020      	movs	r0, r4
 800d47c:	f7ff f8d4 	bl	800c628 <acc_confprogram_patch_offset>
 800d480:	2300      	movs	r3, #0
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	3313      	adds	r3, #19
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	0032      	movs	r2, r6
 800d48a:	4643      	mov	r3, r8
 800d48c:	0029      	movs	r1, r5
 800d48e:	0020      	movs	r0, r4
 800d490:	f7ff f8ca 	bl	800c628 <acc_confprogram_patch_offset>
 800d494:	4b3e      	ldr	r3, [pc, #248]	; (800d590 <acc_cpd_linear_sweep_load_program+0x44c>)
 800d496:	0032      	movs	r2, r6
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	2315      	movs	r3, #21
 800d49c:	0029      	movs	r1, r5
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	0020      	movs	r0, r4
 800d4a2:	4643      	mov	r3, r8
 800d4a4:	f7ff f8c0 	bl	800c628 <acc_confprogram_patch_offset>
 800d4a8:	464b      	mov	r3, r9
 800d4aa:	9301      	str	r3, [sp, #4]
 800d4ac:	330f      	adds	r3, #15
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	0032      	movs	r2, r6
 800d4b2:	4643      	mov	r3, r8
 800d4b4:	0029      	movs	r1, r5
 800d4b6:	0020      	movs	r0, r4
 800d4b8:	f7ff f8b6 	bl	800c628 <acc_confprogram_patch_offset>
 800d4bc:	4b35      	ldr	r3, [pc, #212]	; (800d594 <acc_cpd_linear_sweep_load_program+0x450>)
 800d4be:	0032      	movs	r2, r6
 800d4c0:	9301      	str	r3, [sp, #4]
 800d4c2:	230e      	movs	r3, #14
 800d4c4:	0029      	movs	r1, r5
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	4643      	mov	r3, r8
 800d4cc:	f7ff f8ac 	bl	800c628 <acc_confprogram_patch_offset>
 800d4d0:	464b      	mov	r3, r9
 800d4d2:	9301      	str	r3, [sp, #4]
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	0032      	movs	r2, r6
 800d4da:	4643      	mov	r3, r8
 800d4dc:	0029      	movs	r1, r5
 800d4de:	0020      	movs	r0, r4
 800d4e0:	f7ff f8a2 	bl	800c628 <acc_confprogram_patch_offset>
 800d4e4:	4b2c      	ldr	r3, [pc, #176]	; (800d598 <acc_cpd_linear_sweep_load_program+0x454>)
 800d4e6:	0032      	movs	r2, r6
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	2317      	movs	r3, #23
 800d4ec:	0029      	movs	r1, r5
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	4643      	mov	r3, r8
 800d4f4:	f7ff f898 	bl	800c628 <acc_confprogram_patch_offset>
 800d4f8:	464b      	mov	r3, r9
 800d4fa:	9301      	str	r3, [sp, #4]
 800d4fc:	3311      	adds	r3, #17
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	0032      	movs	r2, r6
 800d502:	4643      	mov	r3, r8
 800d504:	0029      	movs	r1, r5
 800d506:	0020      	movs	r0, r4
 800d508:	f7ff f88e 	bl	800c628 <acc_confprogram_patch_offset>
 800d50c:	4b1e      	ldr	r3, [pc, #120]	; (800d588 <acc_cpd_linear_sweep_load_program+0x444>)
 800d50e:	0032      	movs	r2, r6
 800d510:	4698      	mov	r8, r3
 800d512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d514:	0029      	movs	r1, r5
 800d516:	9301      	str	r3, [sp, #4]
 800d518:	2351      	movs	r3, #81	; 0x51
 800d51a:	0020      	movs	r0, r4
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	4643      	mov	r3, r8
 800d520:	f7ff f882 	bl	800c628 <acc_confprogram_patch_offset>
 800d524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d526:	0032      	movs	r2, r6
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	2377      	movs	r3, #119	; 0x77
 800d52c:	0029      	movs	r1, r5
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	0020      	movs	r0, r4
 800d532:	4643      	mov	r3, r8
 800d534:	f7ff f878 	bl	800c628 <acc_confprogram_patch_offset>
 800d538:	1d3b      	adds	r3, r7, #4
 800d53a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d53c:	0032      	movs	r2, r6
 800d53e:	9301      	str	r3, [sp, #4]
 800d540:	2344      	movs	r3, #68	; 0x44
 800d542:	0029      	movs	r1, r5
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	0020      	movs	r0, r4
 800d548:	4643      	mov	r3, r8
 800d54a:	f7ff f86d 	bl	800c628 <acc_confprogram_patch_offset>
 800d54e:	003b      	movs	r3, r7
 800d550:	3308      	adds	r3, #8
 800d552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d554:	0032      	movs	r2, r6
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	2343      	movs	r3, #67	; 0x43
 800d55a:	0029      	movs	r1, r5
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	0020      	movs	r0, r4
 800d560:	4643      	mov	r3, r8
 800d562:	f7ff f861 	bl	800c628 <acc_confprogram_patch_offset>
 800d566:	003b      	movs	r3, r7
 800d568:	3388      	adds	r3, #136	; 0x88
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	4691      	mov	r9, r2
 800d570:	2200      	movs	r2, #0
 800d572:	4692      	mov	sl, r2
 800d574:	464a      	mov	r2, r9
 800d576:	e011      	b.n	800d59c <acc_cpd_linear_sweep_load_program+0x458>
 800d578:	20000288 	.word	0x20000288
 800d57c:	0801df46 	.word	0x0801df46
 800d580:	0801c777 	.word	0x0801c777
 800d584:	0801a948 	.word	0x0801a948
 800d588:	0801979c 	.word	0x0801979c
 800d58c:	0000ff80 	.word	0x0000ff80
 800d590:	0000ffc0 	.word	0x0000ffc0
 800d594:	0000fff0 	.word	0x0000fff0
 800d598:	0000ffff 	.word	0x0000ffff
 800d59c:	2a08      	cmp	r2, #8
 800d59e:	d914      	bls.n	800d5ca <acc_cpd_linear_sweep_load_program+0x486>
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	22ff      	movs	r2, #255	; 0xff
 800d5a4:	3b08      	subs	r3, #8
 800d5a6:	409a      	lsls	r2, r3
 800d5a8:	0013      	movs	r3, r2
 800d5aa:	22ff      	movs	r2, #255	; 0xff
 800d5ac:	4393      	bics	r3, r2
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	469a      	mov	sl, r3
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	9301      	str	r3, [sp, #4]
 800d5b6:	3365      	adds	r3, #101	; 0x65
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	0032      	movs	r2, r6
 800d5bc:	4643      	mov	r3, r8
 800d5be:	0029      	movs	r1, r5
 800d5c0:	0020      	movs	r0, r4
 800d5c2:	f7ff f831 	bl	800c628 <acc_confprogram_patch_offset>
 800d5c6:	2308      	movs	r3, #8
 800d5c8:	4699      	mov	r9, r3
 800d5ca:	4bf2      	ldr	r3, [pc, #968]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d5cc:	0032      	movs	r2, r6
 800d5ce:	4698      	mov	r8, r3
 800d5d0:	464b      	mov	r3, r9
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	236c      	movs	r3, #108	; 0x6c
 800d5d6:	0029      	movs	r1, r5
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	0020      	movs	r0, r4
 800d5dc:	4643      	mov	r3, r8
 800d5de:	f7ff f823 	bl	800c628 <acc_confprogram_patch_offset>
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	2359      	movs	r3, #89	; 0x59
 800d5e8:	0032      	movs	r2, r6
 800d5ea:	9300      	str	r3, [sp, #0]
 800d5ec:	0029      	movs	r1, r5
 800d5ee:	4643      	mov	r3, r8
 800d5f0:	0020      	movs	r0, r4
 800d5f2:	f7ff f819 	bl	800c628 <acc_confprogram_patch_offset>
 800d5f6:	2380      	movs	r3, #128	; 0x80
 800d5f8:	4652      	mov	r2, sl
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	236e      	movs	r3, #110	; 0x6e
 800d5fe:	9207      	str	r2, [sp, #28]
 800d600:	9201      	str	r2, [sp, #4]
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	0032      	movs	r2, r6
 800d606:	4643      	mov	r3, r8
 800d608:	0029      	movs	r1, r5
 800d60a:	0020      	movs	r0, r4
 800d60c:	f7ff f80c 	bl	800c628 <acc_confprogram_patch_offset>
 800d610:	23c0      	movs	r3, #192	; 0xc0
 800d612:	4652      	mov	r2, sl
 800d614:	431a      	orrs	r2, r3
 800d616:	2370      	movs	r3, #112	; 0x70
 800d618:	4691      	mov	r9, r2
 800d61a:	9201      	str	r2, [sp, #4]
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	0032      	movs	r2, r6
 800d620:	4643      	mov	r3, r8
 800d622:	0029      	movs	r1, r5
 800d624:	0020      	movs	r0, r4
 800d626:	f7fe ffff 	bl	800c628 <acc_confprogram_patch_offset>
 800d62a:	4652      	mov	r2, sl
 800d62c:	23ff      	movs	r3, #255	; 0xff
 800d62e:	4313      	orrs	r3, r2
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	236f      	movs	r3, #111	; 0x6f
 800d636:	0032      	movs	r2, r6
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	0029      	movs	r1, r5
 800d63c:	4643      	mov	r3, r8
 800d63e:	0020      	movs	r0, r4
 800d640:	f7fe fff2 	bl	800c628 <acc_confprogram_patch_offset>
 800d644:	9b07      	ldr	r3, [sp, #28]
 800d646:	0032      	movs	r2, r6
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	235b      	movs	r3, #91	; 0x5b
 800d64c:	0029      	movs	r1, r5
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	0020      	movs	r0, r4
 800d652:	4643      	mov	r3, r8
 800d654:	f7fe ffe8 	bl	800c628 <acc_confprogram_patch_offset>
 800d658:	464b      	mov	r3, r9
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	235d      	movs	r3, #93	; 0x5d
 800d65e:	0032      	movs	r2, r6
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	0029      	movs	r1, r5
 800d664:	4643      	mov	r3, r8
 800d666:	0020      	movs	r0, r4
 800d668:	f7fe ffde 	bl	800c628 <acc_confprogram_patch_offset>
 800d66c:	9b04      	ldr	r3, [sp, #16]
 800d66e:	0032      	movs	r2, r6
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	235c      	movs	r3, #92	; 0x5c
 800d674:	0029      	movs	r1, r5
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	0020      	movs	r0, r4
 800d67a:	4643      	mov	r3, r8
 800d67c:	f7fe ffd4 	bl	800c628 <acc_confprogram_patch_offset>
 800d680:	23f0      	movs	r3, #240	; 0xf0
 800d682:	4652      	mov	r2, sl
 800d684:	431a      	orrs	r2, r3
 800d686:	234a      	movs	r3, #74	; 0x4a
 800d688:	4691      	mov	r9, r2
 800d68a:	9201      	str	r2, [sp, #4]
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	0032      	movs	r2, r6
 800d690:	4643      	mov	r3, r8
 800d692:	0029      	movs	r1, r5
 800d694:	0020      	movs	r0, r4
 800d696:	f7fe ffc7 	bl	800c628 <acc_confprogram_patch_offset>
 800d69a:	464b      	mov	r3, r9
 800d69c:	9301      	str	r3, [sp, #4]
 800d69e:	2345      	movs	r3, #69	; 0x45
 800d6a0:	0032      	movs	r2, r6
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	0029      	movs	r1, r5
 800d6a6:	4643      	mov	r3, r8
 800d6a8:	0020      	movs	r0, r4
 800d6aa:	f7fe ffbd 	bl	800c628 <acc_confprogram_patch_offset>
 800d6ae:	9b04      	ldr	r3, [sp, #16]
 800d6b0:	0032      	movs	r2, r6
 800d6b2:	9301      	str	r3, [sp, #4]
 800d6b4:	2322      	movs	r3, #34	; 0x22
 800d6b6:	0029      	movs	r1, r5
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	0020      	movs	r0, r4
 800d6bc:	4643      	mov	r3, r8
 800d6be:	f7fe ffb3 	bl	800c628 <acc_confprogram_patch_offset>
 800d6c2:	003b      	movs	r3, r7
 800d6c4:	3390      	adds	r3, #144	; 0x90
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	2364      	movs	r3, #100	; 0x64
 800d6ca:	2a05      	cmp	r2, #5
 800d6cc:	d800      	bhi.n	800d6d0 <acc_cpd_linear_sweep_load_program+0x58c>
 800d6ce:	3b20      	subs	r3, #32
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	2305      	movs	r3, #5
 800d6d4:	0032      	movs	r2, r6
 800d6d6:	4699      	mov	r9, r3
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	0029      	movs	r1, r5
 800d6dc:	4643      	mov	r3, r8
 800d6de:	0020      	movs	r0, r4
 800d6e0:	f7fe ffa2 	bl	800c628 <acc_confprogram_patch_offset>
 800d6e4:	2390      	movs	r3, #144	; 0x90
 800d6e6:	469a      	mov	sl, r3
 800d6e8:	44ba      	add	sl, r7
 800d6ea:	4653      	mov	r3, sl
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	0032      	movs	r2, r6
 800d6f0:	015b      	lsls	r3, r3, #5
 800d6f2:	3b03      	subs	r3, #3
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	2324      	movs	r3, #36	; 0x24
 800d6f8:	0029      	movs	r1, r5
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	0020      	movs	r0, r4
 800d6fe:	4643      	mov	r3, r8
 800d700:	f7fe ff92 	bl	800c628 <acc_confprogram_patch_offset>
 800d704:	4653      	mov	r3, sl
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	0032      	movs	r2, r6
 800d70a:	015b      	lsls	r3, r3, #5
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	3b03      	subs	r3, #3
 800d710:	9301      	str	r3, [sp, #4]
 800d712:	2325      	movs	r3, #37	; 0x25
 800d714:	0029      	movs	r1, r5
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	0020      	movs	r0, r4
 800d71a:	4643      	mov	r3, r8
 800d71c:	f7fe ff84 	bl	800c628 <acc_confprogram_patch_offset>
 800d720:	003b      	movs	r3, r7
 800d722:	3394      	adds	r3, #148	; 0x94
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	0032      	movs	r2, r6
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	2336      	movs	r3, #54	; 0x36
 800d72c:	0029      	movs	r1, r5
 800d72e:	9300      	str	r3, [sp, #0]
 800d730:	0020      	movs	r0, r4
 800d732:	4643      	mov	r3, r8
 800d734:	f7fe ff78 	bl	800c628 <acc_confprogram_patch_offset>
 800d738:	003b      	movs	r3, r7
 800d73a:	3398      	adds	r3, #152	; 0x98
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	0032      	movs	r2, r6
 800d740:	330e      	adds	r3, #14
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	235e      	movs	r3, #94	; 0x5e
 800d746:	0029      	movs	r1, r5
 800d748:	9300      	str	r3, [sp, #0]
 800d74a:	0020      	movs	r0, r4
 800d74c:	4643      	mov	r3, r8
 800d74e:	f7fe ff6b 	bl	800c628 <acc_confprogram_patch_offset>
 800d752:	4653      	mov	r3, sl
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	469a      	mov	sl, r3
 800d758:	4599      	cmp	r9, r3
 800d75a:	4180      	sbcs	r0, r0
 800d75c:	2301      	movs	r3, #1
 800d75e:	4398      	bics	r0, r3
 800d760:	4b8d      	ldr	r3, [pc, #564]	; (800d998 <acc_cpd_linear_sweep_load_program+0x854>)
 800d762:	4651      	mov	r1, sl
 800d764:	469c      	mov	ip, r3
 800d766:	4460      	add	r0, ip
 800d768:	f001 fa6a 	bl	800ec40 <__aeabi_uidivmod>
 800d76c:	4688      	mov	r8, r1
 800d76e:	2900      	cmp	r1, #0
 800d770:	d002      	beq.n	800d778 <acc_cpd_linear_sweep_load_program+0x634>
 800d772:	4653      	mov	r3, sl
 800d774:	1a5b      	subs	r3, r3, r1
 800d776:	4698      	mov	r8, r3
 800d778:	239c      	movs	r3, #156	; 0x9c
 800d77a:	469a      	mov	sl, r3
 800d77c:	44ba      	add	sl, r7
 800d77e:	4653      	mov	r3, sl
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	0032      	movs	r2, r6
 800d784:	4443      	add	r3, r8
 800d786:	9301      	str	r3, [sp, #4]
 800d788:	4699      	mov	r9, r3
 800d78a:	231f      	movs	r3, #31
 800d78c:	0029      	movs	r1, r5
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	0020      	movs	r0, r4
 800d792:	4b80      	ldr	r3, [pc, #512]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d794:	f7fe ff48 	bl	800c628 <acc_confprogram_patch_offset>
 800d798:	4653      	mov	r3, sl
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d019      	beq.n	800d7d4 <acc_cpd_linear_sweep_load_program+0x690>
 800d7a0:	4b7e      	ldr	r3, [pc, #504]	; (800d99c <acc_cpd_linear_sweep_load_program+0x858>)
 800d7a2:	001a      	movs	r2, r3
 800d7a4:	3260      	adds	r2, #96	; 0x60
 800d7a6:	7812      	ldrb	r2, [r2, #0]
 800d7a8:	2a01      	cmp	r2, #1
 800d7aa:	d906      	bls.n	800d7ba <acc_cpd_linear_sweep_load_program+0x676>
 800d7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7ae:	4a7c      	ldr	r2, [pc, #496]	; (800d9a0 <acc_cpd_linear_sweep_load_program+0x85c>)
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	497c      	ldr	r1, [pc, #496]	; (800d9a4 <acc_cpd_linear_sweep_load_program+0x860>)
 800d7b4:	4643      	mov	r3, r8
 800d7b6:	2002      	movs	r0, #2
 800d7b8:	47d0      	blx	sl
 800d7ba:	4b78      	ldr	r3, [pc, #480]	; (800d99c <acc_cpd_linear_sweep_load_program+0x858>)
 800d7bc:	001a      	movs	r2, r3
 800d7be:	3260      	adds	r2, #96	; 0x60
 800d7c0:	7812      	ldrb	r2, [r2, #0]
 800d7c2:	2a01      	cmp	r2, #1
 800d7c4:	d906      	bls.n	800d7d4 <acc_cpd_linear_sweep_load_program+0x690>
 800d7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7c8:	4a77      	ldr	r2, [pc, #476]	; (800d9a8 <acc_cpd_linear_sweep_load_program+0x864>)
 800d7ca:	4698      	mov	r8, r3
 800d7cc:	4975      	ldr	r1, [pc, #468]	; (800d9a4 <acc_cpd_linear_sweep_load_program+0x860>)
 800d7ce:	464b      	mov	r3, r9
 800d7d0:	2002      	movs	r0, #2
 800d7d2:	47c0      	blx	r8
 800d7d4:	003b      	movs	r3, r7
 800d7d6:	3390      	adds	r3, #144	; 0x90
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2008      	movs	r0, #8
 800d7dc:	4699      	mov	r9, r3
 800d7de:	2b05      	cmp	r3, #5
 800d7e0:	d800      	bhi.n	800d7e4 <acc_cpd_linear_sweep_load_program+0x6a0>
 800d7e2:	3002      	adds	r0, #2
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f001 fa2b 	bl	800ec40 <__aeabi_uidivmod>
 800d7ea:	4688      	mov	r8, r1
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	d002      	beq.n	800d7f6 <acc_cpd_linear_sweep_load_program+0x6b2>
 800d7f0:	464b      	mov	r3, r9
 800d7f2:	1a5b      	subs	r3, r3, r1
 800d7f4:	4698      	mov	r8, r3
 800d7f6:	23a0      	movs	r3, #160	; 0xa0
 800d7f8:	469a      	mov	sl, r3
 800d7fa:	44ba      	add	sl, r7
 800d7fc:	4653      	mov	r3, sl
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	0032      	movs	r2, r6
 800d802:	4443      	add	r3, r8
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	4699      	mov	r9, r3
 800d808:	2366      	movs	r3, #102	; 0x66
 800d80a:	0029      	movs	r1, r5
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	0020      	movs	r0, r4
 800d810:	4b60      	ldr	r3, [pc, #384]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d812:	f7fe ff09 	bl	800c628 <acc_confprogram_patch_offset>
 800d816:	4653      	mov	r3, sl
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d019      	beq.n	800d852 <acc_cpd_linear_sweep_load_program+0x70e>
 800d81e:	4b5f      	ldr	r3, [pc, #380]	; (800d99c <acc_cpd_linear_sweep_load_program+0x858>)
 800d820:	001a      	movs	r2, r3
 800d822:	3260      	adds	r2, #96	; 0x60
 800d824:	7812      	ldrb	r2, [r2, #0]
 800d826:	2a01      	cmp	r2, #1
 800d828:	d906      	bls.n	800d838 <acc_cpd_linear_sweep_load_program+0x6f4>
 800d82a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d82c:	4a5f      	ldr	r2, [pc, #380]	; (800d9ac <acc_cpd_linear_sweep_load_program+0x868>)
 800d82e:	469a      	mov	sl, r3
 800d830:	495c      	ldr	r1, [pc, #368]	; (800d9a4 <acc_cpd_linear_sweep_load_program+0x860>)
 800d832:	4643      	mov	r3, r8
 800d834:	2002      	movs	r0, #2
 800d836:	47d0      	blx	sl
 800d838:	4b58      	ldr	r3, [pc, #352]	; (800d99c <acc_cpd_linear_sweep_load_program+0x858>)
 800d83a:	001a      	movs	r2, r3
 800d83c:	3260      	adds	r2, #96	; 0x60
 800d83e:	7812      	ldrb	r2, [r2, #0]
 800d840:	2a01      	cmp	r2, #1
 800d842:	d906      	bls.n	800d852 <acc_cpd_linear_sweep_load_program+0x70e>
 800d844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d846:	4a5a      	ldr	r2, [pc, #360]	; (800d9b0 <acc_cpd_linear_sweep_load_program+0x86c>)
 800d848:	4698      	mov	r8, r3
 800d84a:	4956      	ldr	r1, [pc, #344]	; (800d9a4 <acc_cpd_linear_sweep_load_program+0x860>)
 800d84c:	464b      	mov	r3, r9
 800d84e:	2002      	movs	r0, #2
 800d850:	47c0      	blx	r8
 800d852:	003b      	movs	r3, r7
 800d854:	338d      	adds	r3, #141	; 0x8d
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d014      	beq.n	800d886 <acc_cpd_linear_sweep_load_program+0x742>
 800d85c:	2300      	movs	r3, #0
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	333b      	adds	r3, #59	; 0x3b
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	0032      	movs	r2, r6
 800d866:	4b4b      	ldr	r3, [pc, #300]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d868:	0029      	movs	r1, r5
 800d86a:	0020      	movs	r0, r4
 800d86c:	f7fe fedc 	bl	800c628 <acc_confprogram_patch_offset>
 800d870:	4b4a      	ldr	r3, [pc, #296]	; (800d99c <acc_cpd_linear_sweep_load_program+0x858>)
 800d872:	001a      	movs	r2, r3
 800d874:	3260      	adds	r2, #96	; 0x60
 800d876:	7812      	ldrb	r2, [r2, #0]
 800d878:	2a01      	cmp	r2, #1
 800d87a:	d904      	bls.n	800d886 <acc_cpd_linear_sweep_load_program+0x742>
 800d87c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d87e:	4a4d      	ldr	r2, [pc, #308]	; (800d9b4 <acc_cpd_linear_sweep_load_program+0x870>)
 800d880:	4948      	ldr	r1, [pc, #288]	; (800d9a4 <acc_cpd_linear_sweep_load_program+0x860>)
 800d882:	2002      	movs	r0, #2
 800d884:	4798      	blx	r3
 800d886:	003b      	movs	r3, r7
 800d888:	33a4      	adds	r3, #164	; 0xa4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	0032      	movs	r2, r6
 800d88e:	4699      	mov	r9, r3
 800d890:	4b40      	ldr	r3, [pc, #256]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d892:	0029      	movs	r1, r5
 800d894:	4698      	mov	r8, r3
 800d896:	464b      	mov	r3, r9
 800d898:	3b01      	subs	r3, #1
 800d89a:	9301      	str	r3, [sp, #4]
 800d89c:	2306      	movs	r3, #6
 800d89e:	0020      	movs	r0, r4
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	4643      	mov	r3, r8
 800d8a4:	f7fe fec0 	bl	800c628 <acc_confprogram_patch_offset>
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	2004      	movs	r0, #4
 800d8ac:	f001 f942 	bl	800eb34 <__udivsi3>
 800d8b0:	2363      	movs	r3, #99	; 0x63
 800d8b2:	3801      	subs	r0, #1
 800d8b4:	9001      	str	r0, [sp, #4]
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	0032      	movs	r2, r6
 800d8ba:	4643      	mov	r3, r8
 800d8bc:	0029      	movs	r1, r5
 800d8be:	0020      	movs	r0, r4
 800d8c0:	f7fe feb2 	bl	800c628 <acc_confprogram_patch_offset>
 800d8c4:	003b      	movs	r3, r7
 800d8c6:	33a8      	adds	r3, #168	; 0xa8
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	0032      	movs	r2, r6
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	2361      	movs	r3, #97	; 0x61
 800d8d0:	0029      	movs	r1, r5
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	0020      	movs	r0, r4
 800d8d6:	4643      	mov	r3, r8
 800d8d8:	f7fe fea6 	bl	800c628 <acc_confprogram_patch_offset>
 800d8dc:	23ad      	movs	r3, #173	; 0xad
 800d8de:	4699      	mov	r9, r3
 800d8e0:	44b9      	add	r9, r7
 800d8e2:	464b      	mov	r3, r9
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	0032      	movs	r2, r6
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	2346      	movs	r3, #70	; 0x46
 800d8ec:	0029      	movs	r1, r5
 800d8ee:	9300      	str	r3, [sp, #0]
 800d8f0:	0020      	movs	r0, r4
 800d8f2:	4643      	mov	r3, r8
 800d8f4:	f7fe fe98 	bl	800c628 <acc_confprogram_patch_offset>
 800d8f8:	464b      	mov	r3, r9
 800d8fa:	781a      	ldrb	r2, [r3, #0]
 800d8fc:	2323      	movs	r3, #35	; 0x23
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	d100      	bne.n	800d904 <acc_cpd_linear_sweep_load_program+0x7c0>
 800d902:	e09d      	b.n	800da40 <acc_cpd_linear_sweep_load_program+0x8fc>
 800d904:	2203      	movs	r2, #3
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	9201      	str	r2, [sp, #4]
 800d90a:	4643      	mov	r3, r8
 800d90c:	0032      	movs	r2, r6
 800d90e:	0029      	movs	r1, r5
 800d910:	0020      	movs	r0, r4
 800d912:	f7fe fe89 	bl	800c628 <acc_confprogram_patch_offset>
 800d916:	2300      	movs	r3, #0
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	337d      	adds	r3, #125	; 0x7d
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	0032      	movs	r2, r6
 800d920:	4643      	mov	r3, r8
 800d922:	0029      	movs	r1, r5
 800d924:	0020      	movs	r0, r4
 800d926:	f7fe fe7f 	bl	800c628 <acc_confprogram_patch_offset>
 800d92a:	2301      	movs	r3, #1
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	3380      	adds	r3, #128	; 0x80
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	0032      	movs	r2, r6
 800d934:	4643      	mov	r3, r8
 800d936:	0029      	movs	r1, r5
 800d938:	0020      	movs	r0, r4
 800d93a:	f7fe fe75 	bl	800c628 <acc_confprogram_patch_offset>
 800d93e:	2302      	movs	r3, #2
 800d940:	9301      	str	r3, [sp, #4]
 800d942:	3373      	adds	r3, #115	; 0x73
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	0032      	movs	r2, r6
 800d948:	4643      	mov	r3, r8
 800d94a:	0029      	movs	r1, r5
 800d94c:	0020      	movs	r0, r4
 800d94e:	f7fe fe6b 	bl	800c628 <acc_confprogram_patch_offset>
 800d952:	4b10      	ldr	r3, [pc, #64]	; (800d994 <acc_cpd_linear_sweep_load_program+0x850>)
 800d954:	0032      	movs	r2, r6
 800d956:	4698      	mov	r8, r3
 800d958:	003b      	movs	r3, r7
 800d95a:	33ac      	adds	r3, #172	; 0xac
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	0029      	movs	r1, r5
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	2352      	movs	r3, #82	; 0x52
 800d964:	0020      	movs	r0, r4
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	4643      	mov	r3, r8
 800d96a:	f7fe fe5d 	bl	800c628 <acc_confprogram_patch_offset>
 800d96e:	003b      	movs	r3, r7
 800d970:	33b0      	adds	r3, #176	; 0xb0
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	4910      	ldr	r1, [pc, #64]	; (800d9b8 <acc_cpd_linear_sweep_load_program+0x874>)
 800d976:	f000 fdab 	bl	800e4d0 <__aeabi_fmul>
 800d97a:	f001 fae9 	bl	800ef50 <__aeabi_f2uiz>
 800d97e:	2368      	movs	r3, #104	; 0x68
 800d980:	3801      	subs	r0, #1
 800d982:	b280      	uxth	r0, r0
 800d984:	9001      	str	r0, [sp, #4]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	0032      	movs	r2, r6
 800d98a:	4643      	mov	r3, r8
 800d98c:	0029      	movs	r1, r5
 800d98e:	0020      	movs	r0, r4
 800d990:	e014      	b.n	800d9bc <acc_cpd_linear_sweep_load_program+0x878>
 800d992:	46c0      	nop			; (mov r8, r8)
 800d994:	0801979c 	.word	0x0801979c
 800d998:	000004e4 	.word	0x000004e4
 800d99c:	20000288 	.word	0x20000288
 800d9a0:	0801df6b 	.word	0x0801df6b
 800d9a4:	0801c777 	.word	0x0801c777
 800d9a8:	0801dfa2 	.word	0x0801dfa2
 800d9ac:	0801dfd9 	.word	0x0801dfd9
 800d9b0:	0801dffe 	.word	0x0801dffe
 800d9b4:	0801e023 	.word	0x0801e023
 800d9b8:	3751b717 	.word	0x3751b717
 800d9bc:	f7fe fe34 	bl	800c628 <acc_confprogram_patch_offset>
 800d9c0:	23b4      	movs	r3, #180	; 0xb4
 800d9c2:	4699      	mov	r9, r3
 800d9c4:	44b9      	add	r9, r7
 800d9c6:	464b      	mov	r3, r9
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	0032      	movs	r2, r6
 800d9cc:	9301      	str	r3, [sp, #4]
 800d9ce:	2353      	movs	r3, #83	; 0x53
 800d9d0:	0029      	movs	r1, r5
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	0020      	movs	r0, r4
 800d9d6:	4643      	mov	r3, r8
 800d9d8:	f7fe fe26 	bl	800c628 <acc_confprogram_patch_offset>
 800d9dc:	464b      	mov	r3, r9
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00b      	beq.n	800d9fc <acc_cpd_linear_sweep_load_program+0x8b8>
 800d9e4:	003b      	movs	r3, r7
 800d9e6:	33b8      	adds	r3, #184	; 0xb8
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	0032      	movs	r2, r6
 800d9ec:	9301      	str	r3, [sp, #4]
 800d9ee:	2332      	movs	r3, #50	; 0x32
 800d9f0:	0029      	movs	r1, r5
 800d9f2:	9300      	str	r3, [sp, #0]
 800d9f4:	0020      	movs	r0, r4
 800d9f6:	4643      	mov	r3, r8
 800d9f8:	f7fe fe16 	bl	800c628 <acc_confprogram_patch_offset>
 800d9fc:	466b      	mov	r3, sp
 800d9fe:	9a08      	ldr	r2, [sp, #32]
 800da00:	8b19      	ldrh	r1, [r3, #24]
 800da02:	9805      	ldr	r0, [sp, #20]
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	f7f8 fb23 	bl	8006050 <acc_sensor_r2_load_confmem>
 800da0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da0c:	469c      	mov	ip, r3
 800da0e:	4b0d      	ldr	r3, [pc, #52]	; (800da44 <acc_cpd_linear_sweep_load_program+0x900>)
 800da10:	44e3      	add	fp, ip
 800da12:	459b      	cmp	fp, r3
 800da14:	d801      	bhi.n	800da1a <acc_cpd_linear_sweep_load_program+0x8d6>
 800da16:	f7ff fbc8 	bl	800d1aa <acc_cpd_linear_sweep_load_program+0x66>
 800da1a:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <acc_cpd_linear_sweep_load_program+0x904>)
 800da1c:	001a      	movs	r2, r3
 800da1e:	3260      	adds	r2, #96	; 0x60
 800da20:	7812      	ldrb	r2, [r2, #0]
 800da22:	2a03      	cmp	r2, #3
 800da24:	d904      	bls.n	800da30 <acc_cpd_linear_sweep_load_program+0x8ec>
 800da26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da28:	4a08      	ldr	r2, [pc, #32]	; (800da4c <acc_cpd_linear_sweep_load_program+0x908>)
 800da2a:	4909      	ldr	r1, [pc, #36]	; (800da50 <acc_cpd_linear_sweep_load_program+0x90c>)
 800da2c:	2004      	movs	r0, #4
 800da2e:	4798      	blx	r3
 800da30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da32:	b00f      	add	sp, #60	; 0x3c
 800da34:	bc3c      	pop	{r2, r3, r4, r5}
 800da36:	4690      	mov	r8, r2
 800da38:	4699      	mov	r9, r3
 800da3a:	46a2      	mov	sl, r4
 800da3c:	46ab      	mov	fp, r5
 800da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da40:	9201      	str	r2, [sp, #4]
 800da42:	e77f      	b.n	800d944 <acc_cpd_linear_sweep_load_program+0x800>
 800da44:	0000070f 	.word	0x0000070f
 800da48:	20000288 	.word	0x20000288
 800da4c:	0801e03d 	.word	0x0801e03d
 800da50:	0801c777 	.word	0x0801c777

0800da54 <acc_probes_execute_primitive_probe>:
 800da54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da56:	9102      	str	r1, [sp, #8]
 800da58:	2100      	movs	r1, #0
 800da5a:	ab01      	add	r3, sp, #4
 800da5c:	7018      	strb	r0, [r3, #0]
 800da5e:	000a      	movs	r2, r1
 800da60:	0018      	movs	r0, r3
 800da62:	9103      	str	r1, [sp, #12]
 800da64:	f7ff fb60 	bl	800d128 <acc_probes_execute>
 800da68:	b005      	add	sp, #20
 800da6a:	bd00      	pop	{pc}

0800da6c <acc_probes_execute_uint16>:
 800da6c:	b530      	push	{r4, r5, lr}
 800da6e:	000c      	movs	r4, r1
 800da70:	0011      	movs	r1, r2
 800da72:	2201      	movs	r2, #1
 800da74:	0005      	movs	r5, r0
 800da76:	b085      	sub	sp, #20
 800da78:	a801      	add	r0, sp, #4
 800da7a:	6082      	str	r2, [r0, #8]
 800da7c:	005a      	lsls	r2, r3, #1
 800da7e:	7005      	strb	r5, [r0, #0]
 800da80:	6044      	str	r4, [r0, #4]
 800da82:	f7ff fb51 	bl	800d128 <acc_probes_execute>
 800da86:	b005      	add	sp, #20
 800da88:	bd30      	pop	{r4, r5, pc}

0800da8a <acc_cpd_cbank_and_vana_calibration>:
 800da8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da8c:	4657      	mov	r7, sl
 800da8e:	46de      	mov	lr, fp
 800da90:	4645      	mov	r5, r8
 800da92:	464e      	mov	r6, r9
 800da94:	b5e0      	push	{r5, r6, r7, lr}
 800da96:	0015      	movs	r5, r2
 800da98:	2400      	movs	r4, #0
 800da9a:	b089      	sub	sp, #36	; 0x24
 800da9c:	469a      	mov	sl, r3
 800da9e:	ab07      	add	r3, sp, #28
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	9003      	str	r0, [sp, #12]
 800daa4:	9104      	str	r1, [sp, #16]
 800daa6:	000a      	movs	r2, r1
 800daa8:	ab06      	add	r3, sp, #24
 800daaa:	0001      	movs	r1, r0
 800daac:	6828      	ldr	r0, [r5, #0]
 800daae:	9406      	str	r4, [sp, #24]
 800dab0:	9407      	str	r4, [sp, #28]
 800dab2:	f7ff fa7b 	bl	800cfac <acc_sensor_protocol_r2_prepare_load.constprop.21>
 800dab6:	0007      	movs	r7, r0
 800dab8:	42a0      	cmp	r0, r4
 800daba:	d10c      	bne.n	800dad6 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800dabc:	4bb0      	ldr	r3, [pc, #704]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dabe:	4ab1      	ldr	r2, [pc, #708]	; (800dd84 <acc_cpd_cbank_and_vana_calibration+0x2fa>)
 800dac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dac2:	49b1      	ldr	r1, [pc, #708]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dac4:	4798      	blx	r3
 800dac6:	0038      	movs	r0, r7
 800dac8:	b009      	add	sp, #36	; 0x24
 800daca:	bc3c      	pop	{r2, r3, r4, r5}
 800dacc:	4690      	mov	r8, r2
 800dace:	4699      	mov	r9, r3
 800dad0:	46a2      	mov	sl, r4
 800dad2:	46ab      	mov	fp, r5
 800dad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad6:	4bad      	ldr	r3, [pc, #692]	; (800dd8c <acc_cpd_cbank_and_vana_calibration+0x302>)
 800dad8:	9a07      	ldr	r2, [sp, #28]
 800dada:	9f06      	ldr	r7, [sp, #24]
 800dadc:	1b1b      	subs	r3, r3, r4
 800dade:	4690      	mov	r8, r2
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d900      	bls.n	800dae6 <acc_cpd_cbank_and_vana_calibration+0x5c>
 800dae4:	4698      	mov	r8, r3
 800dae6:	0863      	lsrs	r3, r4, #1
 800dae8:	9302      	str	r3, [sp, #8]
 800daea:	4643      	mov	r3, r8
 800daec:	085a      	lsrs	r2, r3, #1
 800daee:	0863      	lsrs	r3, r4, #1
 800daf0:	0098      	lsls	r0, r3, #2
 800daf2:	4ba7      	ldr	r3, [pc, #668]	; (800dd90 <acc_cpd_cbank_and_vana_calibration+0x306>)
 800daf4:	0039      	movs	r1, r7
 800daf6:	469c      	mov	ip, r3
 800daf8:	4460      	add	r0, ip
 800dafa:	f7fe fd4d 	bl	800c598 <acc_confprogram_copy>
 800dafe:	b2a3      	uxth	r3, r4
 800db00:	4699      	mov	r9, r3
 800db02:	4643      	mov	r3, r8
 800db04:	b29b      	uxth	r3, r3
 800db06:	469b      	mov	fp, r3
 800db08:	686b      	ldr	r3, [r5, #4]
 800db0a:	4ea2      	ldr	r6, [pc, #648]	; (800dd94 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	231b      	movs	r3, #27
 800db10:	465a      	mov	r2, fp
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	4649      	mov	r1, r9
 800db16:	0033      	movs	r3, r6
 800db18:	0038      	movs	r0, r7
 800db1a:	f7fe fd85 	bl	800c628 <acc_confprogram_patch_offset>
 800db1e:	68ab      	ldr	r3, [r5, #8]
 800db20:	465a      	mov	r2, fp
 800db22:	9301      	str	r3, [sp, #4]
 800db24:	2319      	movs	r3, #25
 800db26:	4649      	mov	r1, r9
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	0038      	movs	r0, r7
 800db2c:	0033      	movs	r3, r6
 800db2e:	f7fe fd7b 	bl	800c628 <acc_confprogram_patch_offset>
 800db32:	68eb      	ldr	r3, [r5, #12]
 800db34:	465a      	mov	r2, fp
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	231a      	movs	r3, #26
 800db3a:	4649      	mov	r1, r9
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	0038      	movs	r0, r7
 800db40:	0033      	movs	r3, r6
 800db42:	f7fe fd71 	bl	800c628 <acc_confprogram_patch_offset>
 800db46:	8a2b      	ldrh	r3, [r5, #16]
 800db48:	465a      	mov	r2, fp
 800db4a:	9301      	str	r3, [sp, #4]
 800db4c:	2317      	movs	r3, #23
 800db4e:	4649      	mov	r1, r9
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	0038      	movs	r0, r7
 800db54:	0033      	movs	r3, r6
 800db56:	f7fe fd67 	bl	800c628 <acc_confprogram_patch_offset>
 800db5a:	2310      	movs	r3, #16
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	2300      	movs	r3, #0
 800db60:	465a      	mov	r2, fp
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	4649      	mov	r1, r9
 800db66:	0033      	movs	r3, r6
 800db68:	0038      	movs	r0, r7
 800db6a:	f7fe fd5d 	bl	800c628 <acc_confprogram_patch_offset>
 800db6e:	466b      	mov	r3, sp
 800db70:	9a03      	ldr	r2, [sp, #12]
 800db72:	8919      	ldrh	r1, [r3, #8]
 800db74:	6828      	ldr	r0, [r5, #0]
 800db76:	4643      	mov	r3, r8
 800db78:	f7f8 fa6a 	bl	8006050 <acc_sensor_r2_load_confmem>
 800db7c:	9b07      	ldr	r3, [sp, #28]
 800db7e:	469c      	mov	ip, r3
 800db80:	4b85      	ldr	r3, [pc, #532]	; (800dd98 <acc_cpd_cbank_and_vana_calibration+0x30e>)
 800db82:	4464      	add	r4, ip
 800db84:	429c      	cmp	r4, r3
 800db86:	d9a6      	bls.n	800dad6 <acc_cpd_cbank_and_vana_calibration+0x4c>
 800db88:	2118      	movs	r1, #24
 800db8a:	6828      	ldr	r0, [r5, #0]
 800db8c:	f7f8 f86b 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 800db90:	1e07      	subs	r7, r0, #0
 800db92:	d105      	bne.n	800dba0 <acc_cpd_cbank_and_vana_calibration+0x116>
 800db94:	4b7a      	ldr	r3, [pc, #488]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800db96:	4a81      	ldr	r2, [pc, #516]	; (800dd9c <acc_cpd_cbank_and_vana_calibration+0x312>)
 800db98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9a:	497b      	ldr	r1, [pc, #492]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800db9c:	4798      	blx	r3
 800db9e:	e792      	b.n	800dac6 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dba0:	21fa      	movs	r1, #250	; 0xfa
 800dba2:	682f      	ldr	r7, [r5, #0]
 800dba4:	2300      	movs	r3, #0
 800dba6:	2203      	movs	r2, #3
 800dba8:	00c9      	lsls	r1, r1, #3
 800dbaa:	0038      	movs	r0, r7
 800dbac:	f7f8 f81e 	bl	8005bec <acc_sensor_protocol_r2_wait_for_specific_event>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d04b      	beq.n	800dc4c <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800dbb4:	ac07      	add	r4, sp, #28
 800dbb6:	0022      	movs	r2, r4
 800dbb8:	219d      	movs	r1, #157	; 0x9d
 800dbba:	0038      	movs	r0, r7
 800dbbc:	f7fe feba 	bl	800c934 <internal_reg_read.lto_priv.623>
 800dbc0:	2207      	movs	r2, #7
 800dbc2:	8823      	ldrh	r3, [r4, #0]
 800dbc4:	2006      	movs	r0, #6
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	8023      	strh	r3, [r4, #0]
 800dbca:	0022      	movs	r2, r4
 800dbcc:	2301      	movs	r3, #1
 800dbce:	0039      	movs	r1, r7
 800dbd0:	f7ff ff4c 	bl	800da6c <acc_probes_execute_uint16>
 800dbd4:	0038      	movs	r0, r7
 800dbd6:	f7f7 fbf5 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d036      	beq.n	800dc4c <acc_cpd_cbank_and_vana_calibration+0x1c2>
 800dbde:	4653      	mov	r3, sl
 800dbe0:	8827      	ldrh	r7, [r4, #0]
 800dbe2:	601f      	str	r7, [r3, #0]
 800dbe4:	23c0      	movs	r3, #192	; 0xc0
 800dbe6:	682d      	ldr	r5, [r5, #0]
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	8023      	strh	r3, [r4, #0]
 800dbec:	0028      	movs	r0, r5
 800dbee:	f7f8 f82d 	bl	8005c4c <acc_sensor_protocol_r2_is_sensor_running>
 800dbf2:	4680      	mov	r8, r0
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	d131      	bne.n	800dc5c <acc_cpd_cbank_and_vana_calibration+0x1d2>
 800dbf8:	0032      	movs	r2, r6
 800dbfa:	2311      	movs	r3, #17
 800dbfc:	4964      	ldr	r1, [pc, #400]	; (800dd90 <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dbfe:	0028      	movs	r0, r5
 800dc00:	9700      	str	r7, [sp, #0]
 800dc02:	f7fd f827 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800dc06:	4643      	mov	r3, r8
 800dc08:	0032      	movs	r2, r6
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	4960      	ldr	r1, [pc, #384]	; (800dd90 <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dc0e:	2301      	movs	r3, #1
 800dc10:	0028      	movs	r0, r5
 800dc12:	f7fd f81f 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800dc16:	23c8      	movs	r3, #200	; 0xc8
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4646      	mov	r6, r8
 800dc1c:	469b      	mov	fp, r3
 800dc1e:	5da3      	ldrb	r3, [r4, r6]
 800dc20:	495b      	ldr	r1, [pc, #364]	; (800dd90 <acc_cpd_cbank_and_vana_calibration+0x306>)
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	0028      	movs	r0, r5
 800dc26:	4698      	mov	r8, r3
 800dc28:	4a5a      	ldr	r2, [pc, #360]	; (800dd94 <acc_cpd_cbank_and_vana_calibration+0x30a>)
 800dc2a:	231f      	movs	r3, #31
 800dc2c:	f7fd f812 	bl	800ac54 <acc_confprogram_live_patch.constprop.16>
 800dc30:	21e8      	movs	r1, #232	; 0xe8
 800dc32:	0028      	movs	r0, r5
 800dc34:	0049      	lsls	r1, r1, #1
 800dc36:	f7f8 f816 	bl	8005c66 <acc_sensor_protocol_r2_run_program>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d11d      	bne.n	800dc7a <acc_cpd_cbank_and_vana_calibration+0x1f0>
 800dc3e:	4b50      	ldr	r3, [pc, #320]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc40:	4a57      	ldr	r2, [pc, #348]	; (800dda0 <acc_cpd_cbank_and_vana_calibration+0x316>)
 800dc42:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dc44:	4950      	ldr	r1, [pc, #320]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dc46:	4643      	mov	r3, r8
 800dc48:	47a0      	blx	r4
 800dc4a:	e00e      	b.n	800dc6a <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800dc4c:	4b4c      	ldr	r3, [pc, #304]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc4e:	4a55      	ldr	r2, [pc, #340]	; (800dda4 <acc_cpd_cbank_and_vana_calibration+0x31a>)
 800dc50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc52:	494d      	ldr	r1, [pc, #308]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dc54:	2000      	movs	r0, #0
 800dc56:	4798      	blx	r3
 800dc58:	2700      	movs	r7, #0
 800dc5a:	e734      	b.n	800dac6 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dc5c:	4b48      	ldr	r3, [pc, #288]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc5e:	4a52      	ldr	r2, [pc, #328]	; (800dda8 <acc_cpd_cbank_and_vana_calibration+0x31e>)
 800dc60:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dc62:	4949      	ldr	r1, [pc, #292]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dc64:	002b      	movs	r3, r5
 800dc66:	2000      	movs	r0, #0
 800dc68:	47a0      	blx	r4
 800dc6a:	4b45      	ldr	r3, [pc, #276]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc6c:	4a4f      	ldr	r2, [pc, #316]	; (800ddac <acc_cpd_cbank_and_vana_calibration+0x322>)
 800dc6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc70:	4945      	ldr	r1, [pc, #276]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dc72:	2000      	movs	r0, #0
 800dc74:	4798      	blx	r3
 800dc76:	2700      	movs	r7, #0
 800dc78:	e725      	b.n	800dac6 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dc7a:	21fa      	movs	r1, #250	; 0xfa
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	2209      	movs	r2, #9
 800dc80:	00c9      	lsls	r1, r1, #3
 800dc82:	0028      	movs	r0, r5
 800dc84:	f7f7 ffb2 	bl	8005bec <acc_sensor_protocol_r2_wait_for_specific_event>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d008      	beq.n	800dc9e <acc_cpd_cbank_and_vana_calibration+0x214>
 800dc8c:	9b04      	ldr	r3, [sp, #16]
 800dc8e:	2b25      	cmp	r3, #37	; 0x25
 800dc90:	d80d      	bhi.n	800dcae <acc_cpd_cbank_and_vana_calibration+0x224>
 800dc92:	4b3b      	ldr	r3, [pc, #236]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dc94:	4a46      	ldr	r2, [pc, #280]	; (800ddb0 <acc_cpd_cbank_and_vana_calibration+0x326>)
 800dc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc98:	493b      	ldr	r1, [pc, #236]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dc9a:	2000      	movs	r0, #0
 800dc9c:	4798      	blx	r3
 800dc9e:	4b38      	ldr	r3, [pc, #224]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dca0:	4a44      	ldr	r2, [pc, #272]	; (800ddb4 <acc_cpd_cbank_and_vana_calibration+0x32a>)
 800dca2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dca4:	4938      	ldr	r1, [pc, #224]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dca6:	4643      	mov	r3, r8
 800dca8:	2000      	movs	r0, #0
 800dcaa:	47a0      	blx	r4
 800dcac:	e7dd      	b.n	800dc6a <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800dcae:	2210      	movs	r2, #16
 800dcb0:	9903      	ldr	r1, [sp, #12]
 800dcb2:	0028      	movs	r0, r5
 800dcb4:	f7fc ff6c 	bl	800ab90 <internal_buffer_processed_read.constprop.30>
 800dcb8:	2310      	movs	r3, #16
 800dcba:	0002      	movs	r2, r0
 800dcbc:	0007      	movs	r7, r0
 800dcbe:	0029      	movs	r1, r5
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	f7ff fed3 	bl	800da6c <acc_probes_execute_uint16>
 800dcc6:	0028      	movs	r0, r5
 800dcc8:	f7f7 fb7c 	bl	80053c4 <acc_sensor_protocol_r2_ack_event>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d0e6      	beq.n	800dc9e <acc_cpd_cbank_and_vana_calibration+0x214>
 800dcd0:	231e      	movs	r3, #30
 800dcd2:	469c      	mov	ip, r3
 800dcd4:	44bc      	add	ip, r7
 800dcd6:	4663      	mov	r3, ip
 800dcd8:	9305      	str	r3, [sp, #20]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	003a      	movs	r2, r7
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	9802      	ldr	r0, [sp, #8]
 800dce2:	8851      	ldrh	r1, [r2, #2]
 800dce4:	4684      	mov	ip, r0
 800dce6:	448c      	add	ip, r1
 800dce8:	4660      	mov	r0, ip
 800dcea:	9002      	str	r0, [sp, #8]
 800dcec:	8810      	ldrh	r0, [r2, #0]
 800dcee:	4681      	mov	r9, r0
 800dcf0:	1a08      	subs	r0, r1, r0
 800dcf2:	4684      	mov	ip, r0
 800dcf4:	4549      	cmp	r1, r9
 800dcf6:	d202      	bcs.n	800dcfe <acc_cpd_cbank_and_vana_calibration+0x274>
 800dcf8:	4648      	mov	r0, r9
 800dcfa:	1a41      	subs	r1, r0, r1
 800dcfc:	468c      	mov	ip, r1
 800dcfe:	4563      	cmp	r3, ip
 800dd00:	d200      	bcs.n	800dd04 <acc_cpd_cbank_and_vana_calibration+0x27a>
 800dd02:	4663      	mov	r3, ip
 800dd04:	9905      	ldr	r1, [sp, #20]
 800dd06:	3202      	adds	r2, #2
 800dd08:	4291      	cmp	r1, r2
 800dd0a:	d1e9      	bne.n	800dce0 <acc_cpd_cbank_and_vana_calibration+0x256>
 800dd0c:	883a      	ldrh	r2, [r7, #0]
 800dd0e:	9902      	ldr	r1, [sp, #8]
 800dd10:	2700      	movs	r7, #0
 800dd12:	1850      	adds	r0, r2, r1
 800dd14:	4a28      	ldr	r2, [pc, #160]	; (800ddb8 <acc_cpd_cbank_and_vana_calibration+0x32e>)
 800dd16:	0900      	lsrs	r0, r0, #4
 800dd18:	1882      	adds	r2, r0, r2
 800dd1a:	4928      	ldr	r1, [pc, #160]	; (800ddbc <acc_cpd_cbank_and_vana_calibration+0x332>)
 800dd1c:	b292      	uxth	r2, r2
 800dd1e:	428a      	cmp	r2, r1
 800dd20:	d803      	bhi.n	800dd2a <acc_cpd_cbank_and_vana_calibration+0x2a0>
 800dd22:	465a      	mov	r2, fp
 800dd24:	429a      	cmp	r2, r3
 800dd26:	417f      	adcs	r7, r7
 800dd28:	b2ff      	uxtb	r7, r7
 800dd2a:	4a15      	ldr	r2, [pc, #84]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dd2c:	0011      	movs	r1, r2
 800dd2e:	3160      	adds	r1, #96	; 0x60
 800dd30:	7809      	ldrb	r1, [r1, #0]
 800dd32:	2903      	cmp	r1, #3
 800dd34:	d909      	bls.n	800dd4a <acc_cpd_cbank_and_vana_calibration+0x2c0>
 800dd36:	b280      	uxth	r0, r0
 800dd38:	9000      	str	r0, [sp, #0]
 800dd3a:	9301      	str	r3, [sp, #4]
 800dd3c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800dd3e:	4912      	ldr	r1, [pc, #72]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dd40:	4699      	mov	r9, r3
 800dd42:	4a1f      	ldr	r2, [pc, #124]	; (800ddc0 <acc_cpd_cbank_and_vana_calibration+0x336>)
 800dd44:	002b      	movs	r3, r5
 800dd46:	2004      	movs	r0, #4
 800dd48:	47c8      	blx	r9
 800dd4a:	2f00      	cmp	r7, #0
 800dd4c:	d013      	beq.n	800dd76 <acc_cpd_cbank_and_vana_calibration+0x2ec>
 800dd4e:	4653      	mov	r3, sl
 800dd50:	4642      	mov	r2, r8
 800dd52:	711a      	strb	r2, [r3, #4]
 800dd54:	4b0a      	ldr	r3, [pc, #40]	; (800dd80 <acc_cpd_cbank_and_vana_calibration+0x2f6>)
 800dd56:	001a      	movs	r2, r3
 800dd58:	3260      	adds	r2, #96	; 0x60
 800dd5a:	7812      	ldrb	r2, [r2, #0]
 800dd5c:	2a01      	cmp	r2, #1
 800dd5e:	d800      	bhi.n	800dd62 <acc_cpd_cbank_and_vana_calibration+0x2d8>
 800dd60:	e6b1      	b.n	800dac6 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dd62:	4642      	mov	r2, r8
 800dd64:	9200      	str	r2, [sp, #0]
 800dd66:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 800dd68:	4653      	mov	r3, sl
 800dd6a:	4a16      	ldr	r2, [pc, #88]	; (800ddc4 <acc_cpd_cbank_and_vana_calibration+0x33a>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4906      	ldr	r1, [pc, #24]	; (800dd88 <acc_cpd_cbank_and_vana_calibration+0x2fe>)
 800dd70:	2002      	movs	r0, #2
 800dd72:	47a0      	blx	r4
 800dd74:	e6a7      	b.n	800dac6 <acc_cpd_cbank_and_vana_calibration+0x3c>
 800dd76:	2e01      	cmp	r6, #1
 800dd78:	d100      	bne.n	800dd7c <acc_cpd_cbank_and_vana_calibration+0x2f2>
 800dd7a:	e776      	b.n	800dc6a <acc_cpd_cbank_and_vana_calibration+0x1e0>
 800dd7c:	2601      	movs	r6, #1
 800dd7e:	e74e      	b.n	800dc1e <acc_cpd_cbank_and_vana_calibration+0x194>
 800dd80:	20000288 	.word	0x20000288
 800dd84:	0801e060 	.word	0x0801e060
 800dd88:	0801e0a1 	.word	0x0801e0a1
 800dd8c:	00000572 	.word	0x00000572
 800dd90:	08019e64 	.word	0x08019e64
 800dd94:	08019674 	.word	0x08019674
 800dd98:	00000571 	.word	0x00000571
 800dd9c:	0801e0c0 	.word	0x0801e0c0
 800dda0:	0801e10a 	.word	0x0801e10a
 800dda4:	0801e0f2 	.word	0x0801e0f2
 800dda8:	0801d328 	.word	0x0801d328
 800ddac:	0801e193 	.word	0x0801e193
 800ddb0:	0801d070 	.word	0x0801d070
 800ddb4:	0801e168 	.word	0x0801e168
 800ddb8:	ffff86e8 	.word	0xffff86e8
 800ddbc:	00000bb8 	.word	0x00000bb8
 800ddc0:	0801e14a 	.word	0x0801e14a
 800ddc4:	0801e1aa 	.word	0x0801e1aa

0800ddc8 <acc_element_source_adc_inject_data>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	0004      	movs	r4, r0
 800ddcc:	0015      	movs	r5, r2
 800ddce:	6940      	ldr	r0, [r0, #20]
 800ddd0:	f007 fb68 	bl	80154a4 <memcpy>
 800ddd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddd6:	4a05      	ldr	r2, [pc, #20]	; (800ddec <acc_element_source_adc_inject_data+0x24>)
 800ddd8:	601d      	str	r5, [r3, #0]
 800ddda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800dddc:	6820      	ldr	r0, [r4, #0]
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	2200      	movs	r2, #0
 800dde2:	6a23      	ldr	r3, [r4, #32]
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	6843      	ldr	r3, [r0, #4]
 800dde8:	4798      	blx	r3
 800ddea:	bd70      	pop	{r4, r5, r6, pc}
 800ddec:	51645c3c 	.word	0x51645c3c

0800ddf0 <acc_element_source_adc_produce>:
 800ddf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddf2:	4645      	mov	r5, r8
 800ddf4:	46de      	mov	lr, fp
 800ddf6:	4657      	mov	r7, sl
 800ddf8:	464e      	mov	r6, r9
 800ddfa:	b5e0      	push	{r5, r6, r7, lr}
 800ddfc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800ddfe:	b087      	sub	sp, #28
 800de00:	0005      	movs	r5, r0
 800de02:	2c00      	cmp	r4, #0
 800de04:	d100      	bne.n	800de08 <acc_element_source_adc_produce+0x18>
 800de06:	e09d      	b.n	800df44 <acc_element_source_adc_produce+0x154>
 800de08:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800de0a:	4a53      	ldr	r2, [pc, #332]	; (800df58 <acc_element_source_adc_produce+0x168>)
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	6a03      	ldr	r3, [r0, #32]
 800de10:	69a2      	ldr	r2, [r4, #24]
 800de12:	601a      	str	r2, [r3, #0]
 800de14:	6943      	ldr	r3, [r0, #20]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800de1a:	9301      	str	r3, [sp, #4]
 800de1c:	7866      	ldrb	r6, [r4, #1]
 800de1e:	69a3      	ldr	r3, [r4, #24]
 800de20:	469a      	mov	sl, r3
 800de22:	2e00      	cmp	r6, #0
 800de24:	d000      	beq.n	800de28 <acc_element_source_adc_produce+0x38>
 800de26:	e088      	b.n	800df3a <acc_element_source_adc_produce+0x14a>
 800de28:	7823      	ldrb	r3, [r4, #0]
 800de2a:	469b      	mov	fp, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d133      	bne.n	800de98 <acc_element_source_adc_produce+0xa8>
 800de30:	0020      	movs	r0, r4
 800de32:	f7f8 f94f 	bl	80060d4 <acc_sensor_manager_power_on_and_start_sensor.lto_priv.257>
 800de36:	2800      	cmp	r0, #0
 800de38:	d027      	beq.n	800de8a <acc_element_source_adc_produce+0x9a>
 800de3a:	0020      	movs	r0, r4
 800de3c:	2210      	movs	r2, #16
 800de3e:	2100      	movs	r1, #0
 800de40:	3008      	adds	r0, #8
 800de42:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800de44:	f004 ff0a 	bl	8012c5c <memset>
 800de48:	0020      	movs	r0, r4
 800de4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de4c:	0039      	movs	r1, r7
 800de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de50:	aa02      	add	r2, sp, #8
 800de52:	3018      	adds	r0, #24
 800de54:	4798      	blx	r3
 800de56:	ab02      	add	r3, sp, #8
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	60e0      	str	r0, [r4, #12]
 800de5c:	8163      	strh	r3, [r4, #10]
 800de5e:	aa02      	add	r2, sp, #8
 800de60:	7892      	ldrb	r2, [r2, #2]
 800de62:	9904      	ldr	r1, [sp, #16]
 800de64:	7222      	strb	r2, [r4, #8]
 800de66:	4691      	mov	r9, r2
 800de68:	aa02      	add	r2, sp, #8
 800de6a:	78d2      	ldrb	r2, [r2, #3]
 800de6c:	7262      	strb	r2, [r4, #9]
 800de6e:	4690      	mov	r8, r2
 800de70:	aa02      	add	r2, sp, #8
 800de72:	7b17      	ldrb	r7, [r2, #12]
 800de74:	7427      	strb	r7, [r4, #16]
 800de76:	7912      	ldrb	r2, [r2, #4]
 800de78:	6161      	str	r1, [r4, #20]
 800de7a:	7462      	strb	r2, [r4, #17]
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d163      	bne.n	800df48 <acc_element_source_adc_produce+0x158>
 800de80:	4b36      	ldr	r3, [pc, #216]	; (800df5c <acc_element_source_adc_produce+0x16c>)
 800de82:	4a37      	ldr	r2, [pc, #220]	; (800df60 <acc_element_source_adc_produce+0x170>)
 800de84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de86:	4937      	ldr	r1, [pc, #220]	; (800df64 <acc_element_source_adc_produce+0x174>)
 800de88:	4798      	blx	r3
 800de8a:	4b34      	ldr	r3, [pc, #208]	; (800df5c <acc_element_source_adc_produce+0x16c>)
 800de8c:	4a36      	ldr	r2, [pc, #216]	; (800df68 <acc_element_source_adc_produce+0x178>)
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	4936      	ldr	r1, [pc, #216]	; (800df6c <acc_element_source_adc_produce+0x17c>)
 800de92:	2000      	movs	r0, #0
 800de94:	4798      	blx	r3
 800de96:	e042      	b.n	800df1e <acc_element_source_adc_produce+0x12e>
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d1ce      	bne.n	800de3a <acc_element_source_adc_produce+0x4a>
 800de9c:	4b2f      	ldr	r3, [pc, #188]	; (800df5c <acc_element_source_adc_produce+0x16c>)
 800de9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d0ca      	beq.n	800de3a <acc_element_source_adc_produce+0x4a>
 800dea4:	4650      	mov	r0, sl
 800dea6:	4798      	blx	r3
 800dea8:	e7c7      	b.n	800de3a <acc_element_source_adc_produce+0x4a>
 800deaa:	9801      	ldr	r0, [sp, #4]
 800deac:	4298      	cmp	r0, r3
 800deae:	d004      	beq.n	800deba <acc_element_source_adc_produce+0xca>
 800deb0:	21ca      	movs	r1, #202	; 0xca
 800deb2:	482f      	ldr	r0, [pc, #188]	; (800df70 <acc_element_source_adc_produce+0x180>)
 800deb4:	31ff      	adds	r1, #255	; 0xff
 800deb6:	f7f7 fd0e 	bl	80058d6 <acc_assert_fail>
 800deba:	0016      	movs	r6, r2
 800debc:	2348      	movs	r3, #72	; 0x48
 800debe:	4652      	mov	r2, sl
 800dec0:	4353      	muls	r3, r2
 800dec2:	4a2c      	ldr	r2, [pc, #176]	; (800df74 <acc_element_source_adc_produce+0x184>)
 800dec4:	3b48      	subs	r3, #72	; 0x48
 800dec6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dec8:	18d3      	adds	r3, r2, r3
 800deca:	001a      	movs	r2, r3
 800decc:	3242      	adds	r2, #66	; 0x42
 800dece:	7016      	strb	r6, [r2, #0]
 800ded0:	6459      	str	r1, [r3, #68]	; 0x44
 800ded2:	465b      	mov	r3, fp
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d12a      	bne.n	800df2e <acc_element_source_adc_produce+0x13e>
 800ded8:	4650      	mov	r0, sl
 800deda:	f7f8 f8f3 	bl	80060c4 <acc_rss_integration_sensor_device_power_off>
 800dede:	2300      	movs	r3, #0
 800dee0:	70e3      	strb	r3, [r4, #3]
 800dee2:	7863      	ldrb	r3, [r4, #1]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d105      	bne.n	800def4 <acc_element_source_adc_produce+0x104>
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	9a00      	ldr	r2, [sp, #0]
 800deec:	4651      	mov	r1, sl
 800deee:	2002      	movs	r0, #2
 800def0:	f7ff fdbc 	bl	800da6c <acc_probes_execute_uint16>
 800def4:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800def6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800def8:	005b      	lsls	r3, r3, #1
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	464a      	mov	r2, r9
 800defe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	4642      	mov	r2, r8
 800df04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	2301      	movs	r3, #1
 800df0a:	2e00      	cmp	r6, #0
 800df0c:	d100      	bne.n	800df10 <acc_element_source_adc_produce+0x120>
 800df0e:	003b      	movs	r3, r7
 800df10:	2601      	movs	r6, #1
 800df12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800df14:	6828      	ldr	r0, [r5, #0]
 800df16:	4033      	ands	r3, r6
 800df18:	7013      	strb	r3, [r2, #0]
 800df1a:	6843      	ldr	r3, [r0, #4]
 800df1c:	4798      	blx	r3
 800df1e:	0030      	movs	r0, r6
 800df20:	b007      	add	sp, #28
 800df22:	bc3c      	pop	{r2, r3, r4, r5}
 800df24:	4690      	mov	r8, r2
 800df26:	4699      	mov	r9, r3
 800df28:	46a2      	mov	sl, r4
 800df2a:	46ab      	mov	fp, r5
 800df2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df2e:	2b01      	cmp	r3, #1
 800df30:	d1d7      	bne.n	800dee2 <acc_element_source_adc_produce+0xf2>
 800df32:	0020      	movs	r0, r4
 800df34:	f7f7 fffc 	bl	8005f30 <acc_sensor_manager_hibernate_enter.lto_priv.256>
 800df38:	e7d3      	b.n	800dee2 <acc_element_source_adc_produce+0xf2>
 800df3a:	2600      	movs	r6, #0
 800df3c:	0037      	movs	r7, r6
 800df3e:	46b0      	mov	r8, r6
 800df40:	46b1      	mov	r9, r6
 800df42:	e7ce      	b.n	800dee2 <acc_element_source_adc_produce+0xf2>
 800df44:	0026      	movs	r6, r4
 800df46:	e7ea      	b.n	800df1e <acc_element_source_adc_produce+0x12e>
 800df48:	9e00      	ldr	r6, [sp, #0]
 800df4a:	4286      	cmp	r6, r0
 800df4c:	d0ad      	beq.n	800deaa <acc_element_source_adc_produce+0xba>
 800df4e:	21e4      	movs	r1, #228	; 0xe4
 800df50:	4807      	ldr	r0, [pc, #28]	; (800df70 <acc_element_source_adc_produce+0x180>)
 800df52:	0049      	lsls	r1, r1, #1
 800df54:	f7f7 fcbf 	bl	80058d6 <acc_assert_fail>
 800df58:	51645c3c 	.word	0x51645c3c
 800df5c:	20000288 	.word	0x20000288
 800df60:	0801e1bd 	.word	0x0801e1bd
 800df64:	0801c98d 	.word	0x0801c98d
 800df68:	0801e204 	.word	0x0801e204
 800df6c:	0801e221 	.word	0x0801e221
 800df70:	0801e1d5 	.word	0x0801e1d5
 800df74:	20000488 	.word	0x20000488

0800df78 <__aeabi_fadd>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	4647      	mov	r7, r8
 800df7c:	46ce      	mov	lr, r9
 800df7e:	0243      	lsls	r3, r0, #9
 800df80:	0a5b      	lsrs	r3, r3, #9
 800df82:	0044      	lsls	r4, r0, #1
 800df84:	0fc2      	lsrs	r2, r0, #31
 800df86:	469c      	mov	ip, r3
 800df88:	0048      	lsls	r0, r1, #1
 800df8a:	00dd      	lsls	r5, r3, #3
 800df8c:	024b      	lsls	r3, r1, #9
 800df8e:	0e24      	lsrs	r4, r4, #24
 800df90:	0a5b      	lsrs	r3, r3, #9
 800df92:	0e00      	lsrs	r0, r0, #24
 800df94:	b580      	push	{r7, lr}
 800df96:	4698      	mov	r8, r3
 800df98:	0026      	movs	r6, r4
 800df9a:	4691      	mov	r9, r2
 800df9c:	0fc9      	lsrs	r1, r1, #31
 800df9e:	00db      	lsls	r3, r3, #3
 800dfa0:	1a27      	subs	r7, r4, r0
 800dfa2:	428a      	cmp	r2, r1
 800dfa4:	d029      	beq.n	800dffa <__aeabi_fadd+0x82>
 800dfa6:	2f00      	cmp	r7, #0
 800dfa8:	dd15      	ble.n	800dfd6 <__aeabi_fadd+0x5e>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d14a      	bne.n	800e044 <__aeabi_fadd+0xcc>
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d000      	beq.n	800dfb4 <__aeabi_fadd+0x3c>
 800dfb2:	e095      	b.n	800e0e0 <__aeabi_fadd+0x168>
 800dfb4:	08ed      	lsrs	r5, r5, #3
 800dfb6:	2cff      	cmp	r4, #255	; 0xff
 800dfb8:	d100      	bne.n	800dfbc <__aeabi_fadd+0x44>
 800dfba:	e088      	b.n	800e0ce <__aeabi_fadd+0x156>
 800dfbc:	026b      	lsls	r3, r5, #9
 800dfbe:	0a5b      	lsrs	r3, r3, #9
 800dfc0:	b2e6      	uxtb	r6, r4
 800dfc2:	025b      	lsls	r3, r3, #9
 800dfc4:	05f6      	lsls	r6, r6, #23
 800dfc6:	0a58      	lsrs	r0, r3, #9
 800dfc8:	4330      	orrs	r0, r6
 800dfca:	07d2      	lsls	r2, r2, #31
 800dfcc:	4310      	orrs	r0, r2
 800dfce:	bc0c      	pop	{r2, r3}
 800dfd0:	4690      	mov	r8, r2
 800dfd2:	4699      	mov	r9, r3
 800dfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd6:	2f00      	cmp	r7, #0
 800dfd8:	d000      	beq.n	800dfdc <__aeabi_fadd+0x64>
 800dfda:	e087      	b.n	800e0ec <__aeabi_fadd+0x174>
 800dfdc:	1c60      	adds	r0, r4, #1
 800dfde:	b2c0      	uxtb	r0, r0
 800dfe0:	2801      	cmp	r0, #1
 800dfe2:	dc00      	bgt.n	800dfe6 <__aeabi_fadd+0x6e>
 800dfe4:	e0b6      	b.n	800e154 <__aeabi_fadd+0x1dc>
 800dfe6:	1aee      	subs	r6, r5, r3
 800dfe8:	0172      	lsls	r2, r6, #5
 800dfea:	d500      	bpl.n	800dfee <__aeabi_fadd+0x76>
 800dfec:	e0c5      	b.n	800e17a <__aeabi_fadd+0x202>
 800dfee:	2e00      	cmp	r6, #0
 800dff0:	d13d      	bne.n	800e06e <__aeabi_fadd+0xf6>
 800dff2:	2200      	movs	r2, #0
 800dff4:	2600      	movs	r6, #0
 800dff6:	2300      	movs	r3, #0
 800dff8:	e7e3      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800dffa:	2f00      	cmp	r7, #0
 800dffc:	dc00      	bgt.n	800e000 <__aeabi_fadd+0x88>
 800dffe:	e096      	b.n	800e12e <__aeabi_fadd+0x1b6>
 800e000:	2800      	cmp	r0, #0
 800e002:	d05d      	beq.n	800e0c0 <__aeabi_fadd+0x148>
 800e004:	2cff      	cmp	r4, #255	; 0xff
 800e006:	d060      	beq.n	800e0ca <__aeabi_fadd+0x152>
 800e008:	2280      	movs	r2, #128	; 0x80
 800e00a:	04d2      	lsls	r2, r2, #19
 800e00c:	4313      	orrs	r3, r2
 800e00e:	2f1b      	cmp	r7, #27
 800e010:	dd00      	ble.n	800e014 <__aeabi_fadd+0x9c>
 800e012:	e0ec      	b.n	800e1ee <__aeabi_fadd+0x276>
 800e014:	2220      	movs	r2, #32
 800e016:	1bd2      	subs	r2, r2, r7
 800e018:	0018      	movs	r0, r3
 800e01a:	4093      	lsls	r3, r2
 800e01c:	40f8      	lsrs	r0, r7
 800e01e:	1e5a      	subs	r2, r3, #1
 800e020:	4193      	sbcs	r3, r2
 800e022:	4303      	orrs	r3, r0
 800e024:	18ed      	adds	r5, r5, r3
 800e026:	016b      	lsls	r3, r5, #5
 800e028:	d57b      	bpl.n	800e122 <__aeabi_fadd+0x1aa>
 800e02a:	3401      	adds	r4, #1
 800e02c:	2cff      	cmp	r4, #255	; 0xff
 800e02e:	d100      	bne.n	800e032 <__aeabi_fadd+0xba>
 800e030:	e0b7      	b.n	800e1a2 <__aeabi_fadd+0x22a>
 800e032:	2201      	movs	r2, #1
 800e034:	2607      	movs	r6, #7
 800e036:	402a      	ands	r2, r5
 800e038:	086b      	lsrs	r3, r5, #1
 800e03a:	4d9a      	ldr	r5, [pc, #616]	; (800e2a4 <__aeabi_fadd+0x32c>)
 800e03c:	401d      	ands	r5, r3
 800e03e:	4315      	orrs	r5, r2
 800e040:	402e      	ands	r6, r5
 800e042:	e029      	b.n	800e098 <__aeabi_fadd+0x120>
 800e044:	2cff      	cmp	r4, #255	; 0xff
 800e046:	d0b5      	beq.n	800dfb4 <__aeabi_fadd+0x3c>
 800e048:	2280      	movs	r2, #128	; 0x80
 800e04a:	04d2      	lsls	r2, r2, #19
 800e04c:	4313      	orrs	r3, r2
 800e04e:	2f1b      	cmp	r7, #27
 800e050:	dd00      	ble.n	800e054 <__aeabi_fadd+0xdc>
 800e052:	e0b2      	b.n	800e1ba <__aeabi_fadd+0x242>
 800e054:	2220      	movs	r2, #32
 800e056:	1bd2      	subs	r2, r2, r7
 800e058:	0019      	movs	r1, r3
 800e05a:	4093      	lsls	r3, r2
 800e05c:	40f9      	lsrs	r1, r7
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	4193      	sbcs	r3, r2
 800e062:	430b      	orrs	r3, r1
 800e064:	1aed      	subs	r5, r5, r3
 800e066:	016b      	lsls	r3, r5, #5
 800e068:	d55b      	bpl.n	800e122 <__aeabi_fadd+0x1aa>
 800e06a:	01ad      	lsls	r5, r5, #6
 800e06c:	09ae      	lsrs	r6, r5, #6
 800e06e:	0030      	movs	r0, r6
 800e070:	f000 fd24 	bl	800eabc <__clzsi2>
 800e074:	3805      	subs	r0, #5
 800e076:	4086      	lsls	r6, r0
 800e078:	4284      	cmp	r4, r0
 800e07a:	dc65      	bgt.n	800e148 <__aeabi_fadd+0x1d0>
 800e07c:	1b04      	subs	r4, r0, r4
 800e07e:	0033      	movs	r3, r6
 800e080:	2020      	movs	r0, #32
 800e082:	3401      	adds	r4, #1
 800e084:	40e3      	lsrs	r3, r4
 800e086:	1b04      	subs	r4, r0, r4
 800e088:	40a6      	lsls	r6, r4
 800e08a:	1e75      	subs	r5, r6, #1
 800e08c:	41ae      	sbcs	r6, r5
 800e08e:	4333      	orrs	r3, r6
 800e090:	2607      	movs	r6, #7
 800e092:	001d      	movs	r5, r3
 800e094:	2400      	movs	r4, #0
 800e096:	401e      	ands	r6, r3
 800e098:	2201      	movs	r2, #1
 800e09a:	464b      	mov	r3, r9
 800e09c:	401a      	ands	r2, r3
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	d004      	beq.n	800e0ac <__aeabi_fadd+0x134>
 800e0a2:	230f      	movs	r3, #15
 800e0a4:	402b      	ands	r3, r5
 800e0a6:	2b04      	cmp	r3, #4
 800e0a8:	d000      	beq.n	800e0ac <__aeabi_fadd+0x134>
 800e0aa:	3504      	adds	r5, #4
 800e0ac:	016b      	lsls	r3, r5, #5
 800e0ae:	d400      	bmi.n	800e0b2 <__aeabi_fadd+0x13a>
 800e0b0:	e780      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	b2e6      	uxtb	r6, r4
 800e0b6:	2cff      	cmp	r4, #255	; 0xff
 800e0b8:	d12f      	bne.n	800e11a <__aeabi_fadd+0x1a2>
 800e0ba:	26ff      	movs	r6, #255	; 0xff
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e780      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d152      	bne.n	800e16a <__aeabi_fadd+0x1f2>
 800e0c4:	2cff      	cmp	r4, #255	; 0xff
 800e0c6:	d000      	beq.n	800e0ca <__aeabi_fadd+0x152>
 800e0c8:	e774      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e0ca:	000a      	movs	r2, r1
 800e0cc:	08ed      	lsrs	r5, r5, #3
 800e0ce:	2d00      	cmp	r5, #0
 800e0d0:	d0f3      	beq.n	800e0ba <__aeabi_fadd+0x142>
 800e0d2:	2380      	movs	r3, #128	; 0x80
 800e0d4:	03db      	lsls	r3, r3, #15
 800e0d6:	432b      	orrs	r3, r5
 800e0d8:	025b      	lsls	r3, r3, #9
 800e0da:	0a5b      	lsrs	r3, r3, #9
 800e0dc:	26ff      	movs	r6, #255	; 0xff
 800e0de:	e770      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e0e0:	3f01      	subs	r7, #1
 800e0e2:	2f00      	cmp	r7, #0
 800e0e4:	d0be      	beq.n	800e064 <__aeabi_fadd+0xec>
 800e0e6:	2cff      	cmp	r4, #255	; 0xff
 800e0e8:	d1b1      	bne.n	800e04e <__aeabi_fadd+0xd6>
 800e0ea:	e763      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	d047      	beq.n	800e180 <__aeabi_fadd+0x208>
 800e0f0:	28ff      	cmp	r0, #255	; 0xff
 800e0f2:	d069      	beq.n	800e1c8 <__aeabi_fadd+0x250>
 800e0f4:	2480      	movs	r4, #128	; 0x80
 800e0f6:	04e4      	lsls	r4, r4, #19
 800e0f8:	427a      	negs	r2, r7
 800e0fa:	4325      	orrs	r5, r4
 800e0fc:	2a1b      	cmp	r2, #27
 800e0fe:	dd00      	ble.n	800e102 <__aeabi_fadd+0x18a>
 800e100:	e0c5      	b.n	800e28e <__aeabi_fadd+0x316>
 800e102:	002c      	movs	r4, r5
 800e104:	2620      	movs	r6, #32
 800e106:	40d4      	lsrs	r4, r2
 800e108:	1ab2      	subs	r2, r6, r2
 800e10a:	4095      	lsls	r5, r2
 800e10c:	1e6a      	subs	r2, r5, #1
 800e10e:	4195      	sbcs	r5, r2
 800e110:	4325      	orrs	r5, r4
 800e112:	1b5d      	subs	r5, r3, r5
 800e114:	0004      	movs	r4, r0
 800e116:	4689      	mov	r9, r1
 800e118:	e7a5      	b.n	800e066 <__aeabi_fadd+0xee>
 800e11a:	01ab      	lsls	r3, r5, #6
 800e11c:	0a5b      	lsrs	r3, r3, #9
 800e11e:	e750      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e120:	2400      	movs	r4, #0
 800e122:	2201      	movs	r2, #1
 800e124:	464b      	mov	r3, r9
 800e126:	401a      	ands	r2, r3
 800e128:	076b      	lsls	r3, r5, #29
 800e12a:	d1ba      	bne.n	800e0a2 <__aeabi_fadd+0x12a>
 800e12c:	e742      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e12e:	2f00      	cmp	r7, #0
 800e130:	d13b      	bne.n	800e1aa <__aeabi_fadd+0x232>
 800e132:	3401      	adds	r4, #1
 800e134:	b2e0      	uxtb	r0, r4
 800e136:	2801      	cmp	r0, #1
 800e138:	dd4a      	ble.n	800e1d0 <__aeabi_fadd+0x258>
 800e13a:	2cff      	cmp	r4, #255	; 0xff
 800e13c:	d0bd      	beq.n	800e0ba <__aeabi_fadd+0x142>
 800e13e:	2607      	movs	r6, #7
 800e140:	18ed      	adds	r5, r5, r3
 800e142:	086d      	lsrs	r5, r5, #1
 800e144:	402e      	ands	r6, r5
 800e146:	e7a7      	b.n	800e098 <__aeabi_fadd+0x120>
 800e148:	2307      	movs	r3, #7
 800e14a:	4d57      	ldr	r5, [pc, #348]	; (800e2a8 <__aeabi_fadd+0x330>)
 800e14c:	1a24      	subs	r4, r4, r0
 800e14e:	4035      	ands	r5, r6
 800e150:	401e      	ands	r6, r3
 800e152:	e7a1      	b.n	800e098 <__aeabi_fadd+0x120>
 800e154:	2c00      	cmp	r4, #0
 800e156:	d11b      	bne.n	800e190 <__aeabi_fadd+0x218>
 800e158:	2d00      	cmp	r5, #0
 800e15a:	d16e      	bne.n	800e23a <__aeabi_fadd+0x2c2>
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d100      	bne.n	800e162 <__aeabi_fadd+0x1ea>
 800e160:	e09a      	b.n	800e298 <__aeabi_fadd+0x320>
 800e162:	000a      	movs	r2, r1
 800e164:	001d      	movs	r5, r3
 800e166:	003c      	movs	r4, r7
 800e168:	e724      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e16a:	3f01      	subs	r7, #1
 800e16c:	2f00      	cmp	r7, #0
 800e16e:	d100      	bne.n	800e172 <__aeabi_fadd+0x1fa>
 800e170:	e758      	b.n	800e024 <__aeabi_fadd+0xac>
 800e172:	2cff      	cmp	r4, #255	; 0xff
 800e174:	d000      	beq.n	800e178 <__aeabi_fadd+0x200>
 800e176:	e74a      	b.n	800e00e <__aeabi_fadd+0x96>
 800e178:	e7a7      	b.n	800e0ca <__aeabi_fadd+0x152>
 800e17a:	1b5e      	subs	r6, r3, r5
 800e17c:	4689      	mov	r9, r1
 800e17e:	e776      	b.n	800e06e <__aeabi_fadd+0xf6>
 800e180:	2d00      	cmp	r5, #0
 800e182:	d11c      	bne.n	800e1be <__aeabi_fadd+0x246>
 800e184:	000a      	movs	r2, r1
 800e186:	28ff      	cmp	r0, #255	; 0xff
 800e188:	d01f      	beq.n	800e1ca <__aeabi_fadd+0x252>
 800e18a:	0004      	movs	r4, r0
 800e18c:	001d      	movs	r5, r3
 800e18e:	e711      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e190:	2d00      	cmp	r5, #0
 800e192:	d15d      	bne.n	800e250 <__aeabi_fadd+0x2d8>
 800e194:	2b00      	cmp	r3, #0
 800e196:	d117      	bne.n	800e1c8 <__aeabi_fadd+0x250>
 800e198:	2380      	movs	r3, #128	; 0x80
 800e19a:	2200      	movs	r2, #0
 800e19c:	03db      	lsls	r3, r3, #15
 800e19e:	26ff      	movs	r6, #255	; 0xff
 800e1a0:	e70f      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e1a2:	000a      	movs	r2, r1
 800e1a4:	26ff      	movs	r6, #255	; 0xff
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	e70b      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e1aa:	2c00      	cmp	r4, #0
 800e1ac:	d121      	bne.n	800e1f2 <__aeabi_fadd+0x27a>
 800e1ae:	2d00      	cmp	r5, #0
 800e1b0:	d166      	bne.n	800e280 <__aeabi_fadd+0x308>
 800e1b2:	28ff      	cmp	r0, #255	; 0xff
 800e1b4:	d1e9      	bne.n	800e18a <__aeabi_fadd+0x212>
 800e1b6:	001d      	movs	r5, r3
 800e1b8:	e787      	b.n	800e0ca <__aeabi_fadd+0x152>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e752      	b.n	800e064 <__aeabi_fadd+0xec>
 800e1be:	1c7a      	adds	r2, r7, #1
 800e1c0:	d0a7      	beq.n	800e112 <__aeabi_fadd+0x19a>
 800e1c2:	43fa      	mvns	r2, r7
 800e1c4:	28ff      	cmp	r0, #255	; 0xff
 800e1c6:	d199      	bne.n	800e0fc <__aeabi_fadd+0x184>
 800e1c8:	000a      	movs	r2, r1
 800e1ca:	001d      	movs	r5, r3
 800e1cc:	24ff      	movs	r4, #255	; 0xff
 800e1ce:	e6f1      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e1d0:	2e00      	cmp	r6, #0
 800e1d2:	d121      	bne.n	800e218 <__aeabi_fadd+0x2a0>
 800e1d4:	2d00      	cmp	r5, #0
 800e1d6:	d04f      	beq.n	800e278 <__aeabi_fadd+0x300>
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d04c      	beq.n	800e276 <__aeabi_fadd+0x2fe>
 800e1dc:	18ed      	adds	r5, r5, r3
 800e1de:	016b      	lsls	r3, r5, #5
 800e1e0:	d59e      	bpl.n	800e120 <__aeabi_fadd+0x1a8>
 800e1e2:	4b31      	ldr	r3, [pc, #196]	; (800e2a8 <__aeabi_fadd+0x330>)
 800e1e4:	3607      	adds	r6, #7
 800e1e6:	402e      	ands	r6, r5
 800e1e8:	2401      	movs	r4, #1
 800e1ea:	401d      	ands	r5, r3
 800e1ec:	e754      	b.n	800e098 <__aeabi_fadd+0x120>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e718      	b.n	800e024 <__aeabi_fadd+0xac>
 800e1f2:	28ff      	cmp	r0, #255	; 0xff
 800e1f4:	d0df      	beq.n	800e1b6 <__aeabi_fadd+0x23e>
 800e1f6:	2480      	movs	r4, #128	; 0x80
 800e1f8:	04e4      	lsls	r4, r4, #19
 800e1fa:	427f      	negs	r7, r7
 800e1fc:	4325      	orrs	r5, r4
 800e1fe:	2f1b      	cmp	r7, #27
 800e200:	dc4d      	bgt.n	800e29e <__aeabi_fadd+0x326>
 800e202:	2620      	movs	r6, #32
 800e204:	1bf6      	subs	r6, r6, r7
 800e206:	002c      	movs	r4, r5
 800e208:	40b5      	lsls	r5, r6
 800e20a:	40fc      	lsrs	r4, r7
 800e20c:	1e6a      	subs	r2, r5, #1
 800e20e:	4195      	sbcs	r5, r2
 800e210:	4325      	orrs	r5, r4
 800e212:	18ed      	adds	r5, r5, r3
 800e214:	0004      	movs	r4, r0
 800e216:	e706      	b.n	800e026 <__aeabi_fadd+0xae>
 800e218:	2d00      	cmp	r5, #0
 800e21a:	d0cc      	beq.n	800e1b6 <__aeabi_fadd+0x23e>
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d100      	bne.n	800e222 <__aeabi_fadd+0x2aa>
 800e220:	e753      	b.n	800e0ca <__aeabi_fadd+0x152>
 800e222:	2180      	movs	r1, #128	; 0x80
 800e224:	4660      	mov	r0, ip
 800e226:	03c9      	lsls	r1, r1, #15
 800e228:	4208      	tst	r0, r1
 800e22a:	d003      	beq.n	800e234 <__aeabi_fadd+0x2bc>
 800e22c:	4640      	mov	r0, r8
 800e22e:	4208      	tst	r0, r1
 800e230:	d100      	bne.n	800e234 <__aeabi_fadd+0x2bc>
 800e232:	001d      	movs	r5, r3
 800e234:	2101      	movs	r1, #1
 800e236:	4011      	ands	r1, r2
 800e238:	e747      	b.n	800e0ca <__aeabi_fadd+0x152>
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d100      	bne.n	800e240 <__aeabi_fadd+0x2c8>
 800e23e:	e6b9      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e240:	1aea      	subs	r2, r5, r3
 800e242:	0150      	lsls	r0, r2, #5
 800e244:	d525      	bpl.n	800e292 <__aeabi_fadd+0x31a>
 800e246:	2607      	movs	r6, #7
 800e248:	1b5d      	subs	r5, r3, r5
 800e24a:	402e      	ands	r6, r5
 800e24c:	4689      	mov	r9, r1
 800e24e:	e723      	b.n	800e098 <__aeabi_fadd+0x120>
 800e250:	24ff      	movs	r4, #255	; 0xff
 800e252:	2b00      	cmp	r3, #0
 800e254:	d100      	bne.n	800e258 <__aeabi_fadd+0x2e0>
 800e256:	e6ad      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e258:	2280      	movs	r2, #128	; 0x80
 800e25a:	4660      	mov	r0, ip
 800e25c:	03d2      	lsls	r2, r2, #15
 800e25e:	4210      	tst	r0, r2
 800e260:	d004      	beq.n	800e26c <__aeabi_fadd+0x2f4>
 800e262:	4640      	mov	r0, r8
 800e264:	4210      	tst	r0, r2
 800e266:	d101      	bne.n	800e26c <__aeabi_fadd+0x2f4>
 800e268:	001d      	movs	r5, r3
 800e26a:	4689      	mov	r9, r1
 800e26c:	2201      	movs	r2, #1
 800e26e:	464b      	mov	r3, r9
 800e270:	24ff      	movs	r4, #255	; 0xff
 800e272:	401a      	ands	r2, r3
 800e274:	e69e      	b.n	800dfb4 <__aeabi_fadd+0x3c>
 800e276:	002b      	movs	r3, r5
 800e278:	08dd      	lsrs	r5, r3, #3
 800e27a:	000a      	movs	r2, r1
 800e27c:	2400      	movs	r4, #0
 800e27e:	e69d      	b.n	800dfbc <__aeabi_fadd+0x44>
 800e280:	1c7a      	adds	r2, r7, #1
 800e282:	d0c6      	beq.n	800e212 <__aeabi_fadd+0x29a>
 800e284:	43ff      	mvns	r7, r7
 800e286:	28ff      	cmp	r0, #255	; 0xff
 800e288:	d1b9      	bne.n	800e1fe <__aeabi_fadd+0x286>
 800e28a:	001d      	movs	r5, r3
 800e28c:	e71d      	b.n	800e0ca <__aeabi_fadd+0x152>
 800e28e:	2501      	movs	r5, #1
 800e290:	e73f      	b.n	800e112 <__aeabi_fadd+0x19a>
 800e292:	1e15      	subs	r5, r2, #0
 800e294:	d000      	beq.n	800e298 <__aeabi_fadd+0x320>
 800e296:	e744      	b.n	800e122 <__aeabi_fadd+0x1aa>
 800e298:	2200      	movs	r2, #0
 800e29a:	2300      	movs	r3, #0
 800e29c:	e691      	b.n	800dfc2 <__aeabi_fadd+0x4a>
 800e29e:	2501      	movs	r5, #1
 800e2a0:	e7b7      	b.n	800e212 <__aeabi_fadd+0x29a>
 800e2a2:	46c0      	nop			; (mov r8, r8)
 800e2a4:	7dffffff 	.word	0x7dffffff
 800e2a8:	fbffffff 	.word	0xfbffffff

0800e2ac <__aeabi_fdiv>:
 800e2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ae:	4657      	mov	r7, sl
 800e2b0:	464e      	mov	r6, r9
 800e2b2:	4645      	mov	r5, r8
 800e2b4:	46de      	mov	lr, fp
 800e2b6:	0244      	lsls	r4, r0, #9
 800e2b8:	b5e0      	push	{r5, r6, r7, lr}
 800e2ba:	0046      	lsls	r6, r0, #1
 800e2bc:	4688      	mov	r8, r1
 800e2be:	0a64      	lsrs	r4, r4, #9
 800e2c0:	0e36      	lsrs	r6, r6, #24
 800e2c2:	0fc7      	lsrs	r7, r0, #31
 800e2c4:	2e00      	cmp	r6, #0
 800e2c6:	d063      	beq.n	800e390 <__aeabi_fdiv+0xe4>
 800e2c8:	2eff      	cmp	r6, #255	; 0xff
 800e2ca:	d024      	beq.n	800e316 <__aeabi_fdiv+0x6a>
 800e2cc:	2380      	movs	r3, #128	; 0x80
 800e2ce:	00e4      	lsls	r4, r4, #3
 800e2d0:	04db      	lsls	r3, r3, #19
 800e2d2:	431c      	orrs	r4, r3
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4699      	mov	r9, r3
 800e2d8:	469b      	mov	fp, r3
 800e2da:	3e7f      	subs	r6, #127	; 0x7f
 800e2dc:	4643      	mov	r3, r8
 800e2de:	4642      	mov	r2, r8
 800e2e0:	025d      	lsls	r5, r3, #9
 800e2e2:	0fd2      	lsrs	r2, r2, #31
 800e2e4:	005b      	lsls	r3, r3, #1
 800e2e6:	0a6d      	lsrs	r5, r5, #9
 800e2e8:	0e1b      	lsrs	r3, r3, #24
 800e2ea:	4690      	mov	r8, r2
 800e2ec:	4692      	mov	sl, r2
 800e2ee:	d065      	beq.n	800e3bc <__aeabi_fdiv+0x110>
 800e2f0:	2bff      	cmp	r3, #255	; 0xff
 800e2f2:	d055      	beq.n	800e3a0 <__aeabi_fdiv+0xf4>
 800e2f4:	2280      	movs	r2, #128	; 0x80
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	00ed      	lsls	r5, r5, #3
 800e2fa:	04d2      	lsls	r2, r2, #19
 800e2fc:	3b7f      	subs	r3, #127	; 0x7f
 800e2fe:	4315      	orrs	r5, r2
 800e300:	1af6      	subs	r6, r6, r3
 800e302:	4643      	mov	r3, r8
 800e304:	464a      	mov	r2, r9
 800e306:	407b      	eors	r3, r7
 800e308:	2a0f      	cmp	r2, #15
 800e30a:	d900      	bls.n	800e30e <__aeabi_fdiv+0x62>
 800e30c:	e08d      	b.n	800e42a <__aeabi_fdiv+0x17e>
 800e30e:	486d      	ldr	r0, [pc, #436]	; (800e4c4 <__aeabi_fdiv+0x218>)
 800e310:	0092      	lsls	r2, r2, #2
 800e312:	5882      	ldr	r2, [r0, r2]
 800e314:	4697      	mov	pc, r2
 800e316:	2c00      	cmp	r4, #0
 800e318:	d154      	bne.n	800e3c4 <__aeabi_fdiv+0x118>
 800e31a:	2308      	movs	r3, #8
 800e31c:	4699      	mov	r9, r3
 800e31e:	3b06      	subs	r3, #6
 800e320:	26ff      	movs	r6, #255	; 0xff
 800e322:	469b      	mov	fp, r3
 800e324:	e7da      	b.n	800e2dc <__aeabi_fdiv+0x30>
 800e326:	2500      	movs	r5, #0
 800e328:	4653      	mov	r3, sl
 800e32a:	2902      	cmp	r1, #2
 800e32c:	d01b      	beq.n	800e366 <__aeabi_fdiv+0xba>
 800e32e:	2903      	cmp	r1, #3
 800e330:	d100      	bne.n	800e334 <__aeabi_fdiv+0x88>
 800e332:	e0bf      	b.n	800e4b4 <__aeabi_fdiv+0x208>
 800e334:	2901      	cmp	r1, #1
 800e336:	d028      	beq.n	800e38a <__aeabi_fdiv+0xde>
 800e338:	0030      	movs	r0, r6
 800e33a:	307f      	adds	r0, #127	; 0x7f
 800e33c:	2800      	cmp	r0, #0
 800e33e:	dd20      	ble.n	800e382 <__aeabi_fdiv+0xd6>
 800e340:	076a      	lsls	r2, r5, #29
 800e342:	d004      	beq.n	800e34e <__aeabi_fdiv+0xa2>
 800e344:	220f      	movs	r2, #15
 800e346:	402a      	ands	r2, r5
 800e348:	2a04      	cmp	r2, #4
 800e34a:	d000      	beq.n	800e34e <__aeabi_fdiv+0xa2>
 800e34c:	3504      	adds	r5, #4
 800e34e:	012a      	lsls	r2, r5, #4
 800e350:	d503      	bpl.n	800e35a <__aeabi_fdiv+0xae>
 800e352:	0030      	movs	r0, r6
 800e354:	4a5c      	ldr	r2, [pc, #368]	; (800e4c8 <__aeabi_fdiv+0x21c>)
 800e356:	3080      	adds	r0, #128	; 0x80
 800e358:	4015      	ands	r5, r2
 800e35a:	28fe      	cmp	r0, #254	; 0xfe
 800e35c:	dc03      	bgt.n	800e366 <__aeabi_fdiv+0xba>
 800e35e:	01ac      	lsls	r4, r5, #6
 800e360:	0a64      	lsrs	r4, r4, #9
 800e362:	b2c2      	uxtb	r2, r0
 800e364:	e001      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e366:	22ff      	movs	r2, #255	; 0xff
 800e368:	2400      	movs	r4, #0
 800e36a:	0264      	lsls	r4, r4, #9
 800e36c:	05d2      	lsls	r2, r2, #23
 800e36e:	0a60      	lsrs	r0, r4, #9
 800e370:	07db      	lsls	r3, r3, #31
 800e372:	4310      	orrs	r0, r2
 800e374:	4318      	orrs	r0, r3
 800e376:	bc3c      	pop	{r2, r3, r4, r5}
 800e378:	4690      	mov	r8, r2
 800e37a:	4699      	mov	r9, r3
 800e37c:	46a2      	mov	sl, r4
 800e37e:	46ab      	mov	fp, r5
 800e380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e382:	2201      	movs	r2, #1
 800e384:	1a10      	subs	r0, r2, r0
 800e386:	281b      	cmp	r0, #27
 800e388:	dd7c      	ble.n	800e484 <__aeabi_fdiv+0x1d8>
 800e38a:	2200      	movs	r2, #0
 800e38c:	2400      	movs	r4, #0
 800e38e:	e7ec      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e390:	2c00      	cmp	r4, #0
 800e392:	d11d      	bne.n	800e3d0 <__aeabi_fdiv+0x124>
 800e394:	2304      	movs	r3, #4
 800e396:	4699      	mov	r9, r3
 800e398:	3b03      	subs	r3, #3
 800e39a:	2600      	movs	r6, #0
 800e39c:	469b      	mov	fp, r3
 800e39e:	e79d      	b.n	800e2dc <__aeabi_fdiv+0x30>
 800e3a0:	3eff      	subs	r6, #255	; 0xff
 800e3a2:	2d00      	cmp	r5, #0
 800e3a4:	d120      	bne.n	800e3e8 <__aeabi_fdiv+0x13c>
 800e3a6:	2102      	movs	r1, #2
 800e3a8:	4643      	mov	r3, r8
 800e3aa:	464a      	mov	r2, r9
 800e3ac:	407b      	eors	r3, r7
 800e3ae:	430a      	orrs	r2, r1
 800e3b0:	2a0f      	cmp	r2, #15
 800e3b2:	d8d8      	bhi.n	800e366 <__aeabi_fdiv+0xba>
 800e3b4:	4845      	ldr	r0, [pc, #276]	; (800e4cc <__aeabi_fdiv+0x220>)
 800e3b6:	0092      	lsls	r2, r2, #2
 800e3b8:	5882      	ldr	r2, [r0, r2]
 800e3ba:	4697      	mov	pc, r2
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	d119      	bne.n	800e3f4 <__aeabi_fdiv+0x148>
 800e3c0:	2101      	movs	r1, #1
 800e3c2:	e7f1      	b.n	800e3a8 <__aeabi_fdiv+0xfc>
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	4699      	mov	r9, r3
 800e3c8:	3b09      	subs	r3, #9
 800e3ca:	26ff      	movs	r6, #255	; 0xff
 800e3cc:	469b      	mov	fp, r3
 800e3ce:	e785      	b.n	800e2dc <__aeabi_fdiv+0x30>
 800e3d0:	0020      	movs	r0, r4
 800e3d2:	f000 fb73 	bl	800eabc <__clzsi2>
 800e3d6:	2676      	movs	r6, #118	; 0x76
 800e3d8:	1f43      	subs	r3, r0, #5
 800e3da:	409c      	lsls	r4, r3
 800e3dc:	2300      	movs	r3, #0
 800e3de:	4276      	negs	r6, r6
 800e3e0:	1a36      	subs	r6, r6, r0
 800e3e2:	4699      	mov	r9, r3
 800e3e4:	469b      	mov	fp, r3
 800e3e6:	e779      	b.n	800e2dc <__aeabi_fdiv+0x30>
 800e3e8:	464a      	mov	r2, r9
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	431a      	orrs	r2, r3
 800e3ee:	4691      	mov	r9, r2
 800e3f0:	2103      	movs	r1, #3
 800e3f2:	e786      	b.n	800e302 <__aeabi_fdiv+0x56>
 800e3f4:	0028      	movs	r0, r5
 800e3f6:	f000 fb61 	bl	800eabc <__clzsi2>
 800e3fa:	1f43      	subs	r3, r0, #5
 800e3fc:	1836      	adds	r6, r6, r0
 800e3fe:	409d      	lsls	r5, r3
 800e400:	3676      	adds	r6, #118	; 0x76
 800e402:	2100      	movs	r1, #0
 800e404:	e77d      	b.n	800e302 <__aeabi_fdiv+0x56>
 800e406:	2480      	movs	r4, #128	; 0x80
 800e408:	2300      	movs	r3, #0
 800e40a:	03e4      	lsls	r4, r4, #15
 800e40c:	22ff      	movs	r2, #255	; 0xff
 800e40e:	e7ac      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e410:	2500      	movs	r5, #0
 800e412:	2380      	movs	r3, #128	; 0x80
 800e414:	03db      	lsls	r3, r3, #15
 800e416:	421c      	tst	r4, r3
 800e418:	d028      	beq.n	800e46c <__aeabi_fdiv+0x1c0>
 800e41a:	421d      	tst	r5, r3
 800e41c:	d126      	bne.n	800e46c <__aeabi_fdiv+0x1c0>
 800e41e:	432b      	orrs	r3, r5
 800e420:	025c      	lsls	r4, r3, #9
 800e422:	0a64      	lsrs	r4, r4, #9
 800e424:	4643      	mov	r3, r8
 800e426:	22ff      	movs	r2, #255	; 0xff
 800e428:	e79f      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e42a:	0162      	lsls	r2, r4, #5
 800e42c:	016c      	lsls	r4, r5, #5
 800e42e:	42a2      	cmp	r2, r4
 800e430:	d224      	bcs.n	800e47c <__aeabi_fdiv+0x1d0>
 800e432:	211b      	movs	r1, #27
 800e434:	2500      	movs	r5, #0
 800e436:	3e01      	subs	r6, #1
 800e438:	2701      	movs	r7, #1
 800e43a:	0010      	movs	r0, r2
 800e43c:	006d      	lsls	r5, r5, #1
 800e43e:	0052      	lsls	r2, r2, #1
 800e440:	2800      	cmp	r0, #0
 800e442:	db01      	blt.n	800e448 <__aeabi_fdiv+0x19c>
 800e444:	4294      	cmp	r4, r2
 800e446:	d801      	bhi.n	800e44c <__aeabi_fdiv+0x1a0>
 800e448:	1b12      	subs	r2, r2, r4
 800e44a:	433d      	orrs	r5, r7
 800e44c:	3901      	subs	r1, #1
 800e44e:	2900      	cmp	r1, #0
 800e450:	d1f3      	bne.n	800e43a <__aeabi_fdiv+0x18e>
 800e452:	0014      	movs	r4, r2
 800e454:	1e62      	subs	r2, r4, #1
 800e456:	4194      	sbcs	r4, r2
 800e458:	4325      	orrs	r5, r4
 800e45a:	e76d      	b.n	800e338 <__aeabi_fdiv+0x8c>
 800e45c:	46ba      	mov	sl, r7
 800e45e:	4659      	mov	r1, fp
 800e460:	0025      	movs	r5, r4
 800e462:	4653      	mov	r3, sl
 800e464:	2902      	cmp	r1, #2
 800e466:	d000      	beq.n	800e46a <__aeabi_fdiv+0x1be>
 800e468:	e761      	b.n	800e32e <__aeabi_fdiv+0x82>
 800e46a:	e77c      	b.n	800e366 <__aeabi_fdiv+0xba>
 800e46c:	2380      	movs	r3, #128	; 0x80
 800e46e:	03db      	lsls	r3, r3, #15
 800e470:	431c      	orrs	r4, r3
 800e472:	0264      	lsls	r4, r4, #9
 800e474:	0a64      	lsrs	r4, r4, #9
 800e476:	003b      	movs	r3, r7
 800e478:	22ff      	movs	r2, #255	; 0xff
 800e47a:	e776      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e47c:	1b12      	subs	r2, r2, r4
 800e47e:	211a      	movs	r1, #26
 800e480:	2501      	movs	r5, #1
 800e482:	e7d9      	b.n	800e438 <__aeabi_fdiv+0x18c>
 800e484:	369e      	adds	r6, #158	; 0x9e
 800e486:	002a      	movs	r2, r5
 800e488:	40b5      	lsls	r5, r6
 800e48a:	002c      	movs	r4, r5
 800e48c:	40c2      	lsrs	r2, r0
 800e48e:	1e65      	subs	r5, r4, #1
 800e490:	41ac      	sbcs	r4, r5
 800e492:	4314      	orrs	r4, r2
 800e494:	0762      	lsls	r2, r4, #29
 800e496:	d004      	beq.n	800e4a2 <__aeabi_fdiv+0x1f6>
 800e498:	220f      	movs	r2, #15
 800e49a:	4022      	ands	r2, r4
 800e49c:	2a04      	cmp	r2, #4
 800e49e:	d000      	beq.n	800e4a2 <__aeabi_fdiv+0x1f6>
 800e4a0:	3404      	adds	r4, #4
 800e4a2:	0162      	lsls	r2, r4, #5
 800e4a4:	d403      	bmi.n	800e4ae <__aeabi_fdiv+0x202>
 800e4a6:	01a4      	lsls	r4, r4, #6
 800e4a8:	0a64      	lsrs	r4, r4, #9
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	e75d      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	2400      	movs	r4, #0
 800e4b2:	e75a      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e4b4:	2480      	movs	r4, #128	; 0x80
 800e4b6:	03e4      	lsls	r4, r4, #15
 800e4b8:	432c      	orrs	r4, r5
 800e4ba:	0264      	lsls	r4, r4, #9
 800e4bc:	0a64      	lsrs	r4, r4, #9
 800e4be:	22ff      	movs	r2, #255	; 0xff
 800e4c0:	e753      	b.n	800e36a <__aeabi_fdiv+0xbe>
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	0801b768 	.word	0x0801b768
 800e4c8:	f7ffffff 	.word	0xf7ffffff
 800e4cc:	0801b7a8 	.word	0x0801b7a8

0800e4d0 <__aeabi_fmul>:
 800e4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4d2:	464e      	mov	r6, r9
 800e4d4:	4657      	mov	r7, sl
 800e4d6:	4645      	mov	r5, r8
 800e4d8:	46de      	mov	lr, fp
 800e4da:	b5e0      	push	{r5, r6, r7, lr}
 800e4dc:	0243      	lsls	r3, r0, #9
 800e4de:	0a5b      	lsrs	r3, r3, #9
 800e4e0:	0045      	lsls	r5, r0, #1
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	1c0f      	adds	r7, r1, #0
 800e4e6:	4699      	mov	r9, r3
 800e4e8:	0e2d      	lsrs	r5, r5, #24
 800e4ea:	0fc6      	lsrs	r6, r0, #31
 800e4ec:	2d00      	cmp	r5, #0
 800e4ee:	d057      	beq.n	800e5a0 <__aeabi_fmul+0xd0>
 800e4f0:	2dff      	cmp	r5, #255	; 0xff
 800e4f2:	d024      	beq.n	800e53e <__aeabi_fmul+0x6e>
 800e4f4:	2080      	movs	r0, #128	; 0x80
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	04c0      	lsls	r0, r0, #19
 800e4fa:	4318      	orrs	r0, r3
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4681      	mov	r9, r0
 800e500:	469a      	mov	sl, r3
 800e502:	469b      	mov	fp, r3
 800e504:	3d7f      	subs	r5, #127	; 0x7f
 800e506:	027c      	lsls	r4, r7, #9
 800e508:	007a      	lsls	r2, r7, #1
 800e50a:	0ffb      	lsrs	r3, r7, #31
 800e50c:	0a64      	lsrs	r4, r4, #9
 800e50e:	0e12      	lsrs	r2, r2, #24
 800e510:	4698      	mov	r8, r3
 800e512:	d023      	beq.n	800e55c <__aeabi_fmul+0x8c>
 800e514:	2aff      	cmp	r2, #255	; 0xff
 800e516:	d04b      	beq.n	800e5b0 <__aeabi_fmul+0xe0>
 800e518:	00e3      	lsls	r3, r4, #3
 800e51a:	2480      	movs	r4, #128	; 0x80
 800e51c:	2000      	movs	r0, #0
 800e51e:	04e4      	lsls	r4, r4, #19
 800e520:	3a7f      	subs	r2, #127	; 0x7f
 800e522:	431c      	orrs	r4, r3
 800e524:	18ad      	adds	r5, r5, r2
 800e526:	1c6b      	adds	r3, r5, #1
 800e528:	4647      	mov	r7, r8
 800e52a:	9301      	str	r3, [sp, #4]
 800e52c:	4653      	mov	r3, sl
 800e52e:	4077      	eors	r7, r6
 800e530:	003a      	movs	r2, r7
 800e532:	2b0f      	cmp	r3, #15
 800e534:	d848      	bhi.n	800e5c8 <__aeabi_fmul+0xf8>
 800e536:	497d      	ldr	r1, [pc, #500]	; (800e72c <__aeabi_fmul+0x25c>)
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	58cb      	ldr	r3, [r1, r3]
 800e53c:	469f      	mov	pc, r3
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d000      	beq.n	800e544 <__aeabi_fmul+0x74>
 800e542:	e085      	b.n	800e650 <__aeabi_fmul+0x180>
 800e544:	3308      	adds	r3, #8
 800e546:	469a      	mov	sl, r3
 800e548:	3b06      	subs	r3, #6
 800e54a:	469b      	mov	fp, r3
 800e54c:	027c      	lsls	r4, r7, #9
 800e54e:	007a      	lsls	r2, r7, #1
 800e550:	0ffb      	lsrs	r3, r7, #31
 800e552:	25ff      	movs	r5, #255	; 0xff
 800e554:	0a64      	lsrs	r4, r4, #9
 800e556:	0e12      	lsrs	r2, r2, #24
 800e558:	4698      	mov	r8, r3
 800e55a:	d1db      	bne.n	800e514 <__aeabi_fmul+0x44>
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	d000      	beq.n	800e562 <__aeabi_fmul+0x92>
 800e560:	e090      	b.n	800e684 <__aeabi_fmul+0x1b4>
 800e562:	4652      	mov	r2, sl
 800e564:	2301      	movs	r3, #1
 800e566:	431a      	orrs	r2, r3
 800e568:	4692      	mov	sl, r2
 800e56a:	2001      	movs	r0, #1
 800e56c:	e7db      	b.n	800e526 <__aeabi_fmul+0x56>
 800e56e:	464c      	mov	r4, r9
 800e570:	4658      	mov	r0, fp
 800e572:	0017      	movs	r7, r2
 800e574:	2802      	cmp	r0, #2
 800e576:	d024      	beq.n	800e5c2 <__aeabi_fmul+0xf2>
 800e578:	2803      	cmp	r0, #3
 800e57a:	d100      	bne.n	800e57e <__aeabi_fmul+0xae>
 800e57c:	e0cf      	b.n	800e71e <__aeabi_fmul+0x24e>
 800e57e:	2200      	movs	r2, #0
 800e580:	2300      	movs	r3, #0
 800e582:	2801      	cmp	r0, #1
 800e584:	d14d      	bne.n	800e622 <__aeabi_fmul+0x152>
 800e586:	0258      	lsls	r0, r3, #9
 800e588:	05d2      	lsls	r2, r2, #23
 800e58a:	0a40      	lsrs	r0, r0, #9
 800e58c:	07ff      	lsls	r7, r7, #31
 800e58e:	4310      	orrs	r0, r2
 800e590:	4338      	orrs	r0, r7
 800e592:	b003      	add	sp, #12
 800e594:	bc3c      	pop	{r2, r3, r4, r5}
 800e596:	4690      	mov	r8, r2
 800e598:	4699      	mov	r9, r3
 800e59a:	46a2      	mov	sl, r4
 800e59c:	46ab      	mov	fp, r5
 800e59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d15b      	bne.n	800e65c <__aeabi_fmul+0x18c>
 800e5a4:	2304      	movs	r3, #4
 800e5a6:	469a      	mov	sl, r3
 800e5a8:	3b03      	subs	r3, #3
 800e5aa:	2500      	movs	r5, #0
 800e5ac:	469b      	mov	fp, r3
 800e5ae:	e7aa      	b.n	800e506 <__aeabi_fmul+0x36>
 800e5b0:	35ff      	adds	r5, #255	; 0xff
 800e5b2:	2c00      	cmp	r4, #0
 800e5b4:	d160      	bne.n	800e678 <__aeabi_fmul+0x1a8>
 800e5b6:	4652      	mov	r2, sl
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	431a      	orrs	r2, r3
 800e5bc:	4692      	mov	sl, r2
 800e5be:	2002      	movs	r0, #2
 800e5c0:	e7b1      	b.n	800e526 <__aeabi_fmul+0x56>
 800e5c2:	22ff      	movs	r2, #255	; 0xff
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e7de      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e5c8:	464b      	mov	r3, r9
 800e5ca:	0c1b      	lsrs	r3, r3, #16
 800e5cc:	469c      	mov	ip, r3
 800e5ce:	464b      	mov	r3, r9
 800e5d0:	0426      	lsls	r6, r4, #16
 800e5d2:	0c36      	lsrs	r6, r6, #16
 800e5d4:	0418      	lsls	r0, r3, #16
 800e5d6:	4661      	mov	r1, ip
 800e5d8:	0033      	movs	r3, r6
 800e5da:	0c22      	lsrs	r2, r4, #16
 800e5dc:	4664      	mov	r4, ip
 800e5de:	0c00      	lsrs	r0, r0, #16
 800e5e0:	4343      	muls	r3, r0
 800e5e2:	434e      	muls	r6, r1
 800e5e4:	4350      	muls	r0, r2
 800e5e6:	4354      	muls	r4, r2
 800e5e8:	1980      	adds	r0, r0, r6
 800e5ea:	0c1a      	lsrs	r2, r3, #16
 800e5ec:	1812      	adds	r2, r2, r0
 800e5ee:	4296      	cmp	r6, r2
 800e5f0:	d903      	bls.n	800e5fa <__aeabi_fmul+0x12a>
 800e5f2:	2180      	movs	r1, #128	; 0x80
 800e5f4:	0249      	lsls	r1, r1, #9
 800e5f6:	468c      	mov	ip, r1
 800e5f8:	4464      	add	r4, ip
 800e5fa:	041b      	lsls	r3, r3, #16
 800e5fc:	0c1b      	lsrs	r3, r3, #16
 800e5fe:	0410      	lsls	r0, r2, #16
 800e600:	18c0      	adds	r0, r0, r3
 800e602:	0183      	lsls	r3, r0, #6
 800e604:	1e5e      	subs	r6, r3, #1
 800e606:	41b3      	sbcs	r3, r6
 800e608:	0e80      	lsrs	r0, r0, #26
 800e60a:	4318      	orrs	r0, r3
 800e60c:	0c13      	lsrs	r3, r2, #16
 800e60e:	191b      	adds	r3, r3, r4
 800e610:	019b      	lsls	r3, r3, #6
 800e612:	4303      	orrs	r3, r0
 800e614:	001c      	movs	r4, r3
 800e616:	0123      	lsls	r3, r4, #4
 800e618:	d579      	bpl.n	800e70e <__aeabi_fmul+0x23e>
 800e61a:	2301      	movs	r3, #1
 800e61c:	0862      	lsrs	r2, r4, #1
 800e61e:	401c      	ands	r4, r3
 800e620:	4314      	orrs	r4, r2
 800e622:	9a01      	ldr	r2, [sp, #4]
 800e624:	327f      	adds	r2, #127	; 0x7f
 800e626:	2a00      	cmp	r2, #0
 800e628:	dd4d      	ble.n	800e6c6 <__aeabi_fmul+0x1f6>
 800e62a:	0763      	lsls	r3, r4, #29
 800e62c:	d004      	beq.n	800e638 <__aeabi_fmul+0x168>
 800e62e:	230f      	movs	r3, #15
 800e630:	4023      	ands	r3, r4
 800e632:	2b04      	cmp	r3, #4
 800e634:	d000      	beq.n	800e638 <__aeabi_fmul+0x168>
 800e636:	3404      	adds	r4, #4
 800e638:	0123      	lsls	r3, r4, #4
 800e63a:	d503      	bpl.n	800e644 <__aeabi_fmul+0x174>
 800e63c:	4b3c      	ldr	r3, [pc, #240]	; (800e730 <__aeabi_fmul+0x260>)
 800e63e:	9a01      	ldr	r2, [sp, #4]
 800e640:	401c      	ands	r4, r3
 800e642:	3280      	adds	r2, #128	; 0x80
 800e644:	2afe      	cmp	r2, #254	; 0xfe
 800e646:	dcbc      	bgt.n	800e5c2 <__aeabi_fmul+0xf2>
 800e648:	01a3      	lsls	r3, r4, #6
 800e64a:	0a5b      	lsrs	r3, r3, #9
 800e64c:	b2d2      	uxtb	r2, r2
 800e64e:	e79a      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e650:	230c      	movs	r3, #12
 800e652:	469a      	mov	sl, r3
 800e654:	3b09      	subs	r3, #9
 800e656:	25ff      	movs	r5, #255	; 0xff
 800e658:	469b      	mov	fp, r3
 800e65a:	e754      	b.n	800e506 <__aeabi_fmul+0x36>
 800e65c:	0018      	movs	r0, r3
 800e65e:	f000 fa2d 	bl	800eabc <__clzsi2>
 800e662:	464a      	mov	r2, r9
 800e664:	1f43      	subs	r3, r0, #5
 800e666:	2576      	movs	r5, #118	; 0x76
 800e668:	409a      	lsls	r2, r3
 800e66a:	2300      	movs	r3, #0
 800e66c:	426d      	negs	r5, r5
 800e66e:	4691      	mov	r9, r2
 800e670:	1a2d      	subs	r5, r5, r0
 800e672:	469a      	mov	sl, r3
 800e674:	469b      	mov	fp, r3
 800e676:	e746      	b.n	800e506 <__aeabi_fmul+0x36>
 800e678:	4652      	mov	r2, sl
 800e67a:	2303      	movs	r3, #3
 800e67c:	431a      	orrs	r2, r3
 800e67e:	4692      	mov	sl, r2
 800e680:	2003      	movs	r0, #3
 800e682:	e750      	b.n	800e526 <__aeabi_fmul+0x56>
 800e684:	0020      	movs	r0, r4
 800e686:	f000 fa19 	bl	800eabc <__clzsi2>
 800e68a:	1f43      	subs	r3, r0, #5
 800e68c:	1a2d      	subs	r5, r5, r0
 800e68e:	409c      	lsls	r4, r3
 800e690:	3d76      	subs	r5, #118	; 0x76
 800e692:	2000      	movs	r0, #0
 800e694:	e747      	b.n	800e526 <__aeabi_fmul+0x56>
 800e696:	2380      	movs	r3, #128	; 0x80
 800e698:	2700      	movs	r7, #0
 800e69a:	03db      	lsls	r3, r3, #15
 800e69c:	22ff      	movs	r2, #255	; 0xff
 800e69e:	e772      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e6a0:	4642      	mov	r2, r8
 800e6a2:	e766      	b.n	800e572 <__aeabi_fmul+0xa2>
 800e6a4:	464c      	mov	r4, r9
 800e6a6:	0032      	movs	r2, r6
 800e6a8:	4658      	mov	r0, fp
 800e6aa:	e762      	b.n	800e572 <__aeabi_fmul+0xa2>
 800e6ac:	2380      	movs	r3, #128	; 0x80
 800e6ae:	464a      	mov	r2, r9
 800e6b0:	03db      	lsls	r3, r3, #15
 800e6b2:	421a      	tst	r2, r3
 800e6b4:	d022      	beq.n	800e6fc <__aeabi_fmul+0x22c>
 800e6b6:	421c      	tst	r4, r3
 800e6b8:	d120      	bne.n	800e6fc <__aeabi_fmul+0x22c>
 800e6ba:	4323      	orrs	r3, r4
 800e6bc:	025b      	lsls	r3, r3, #9
 800e6be:	0a5b      	lsrs	r3, r3, #9
 800e6c0:	4647      	mov	r7, r8
 800e6c2:	22ff      	movs	r2, #255	; 0xff
 800e6c4:	e75f      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	1a9a      	subs	r2, r3, r2
 800e6ca:	2a1b      	cmp	r2, #27
 800e6cc:	dc21      	bgt.n	800e712 <__aeabi_fmul+0x242>
 800e6ce:	0023      	movs	r3, r4
 800e6d0:	9901      	ldr	r1, [sp, #4]
 800e6d2:	40d3      	lsrs	r3, r2
 800e6d4:	319e      	adds	r1, #158	; 0x9e
 800e6d6:	408c      	lsls	r4, r1
 800e6d8:	001a      	movs	r2, r3
 800e6da:	0023      	movs	r3, r4
 800e6dc:	1e5c      	subs	r4, r3, #1
 800e6de:	41a3      	sbcs	r3, r4
 800e6e0:	4313      	orrs	r3, r2
 800e6e2:	075a      	lsls	r2, r3, #29
 800e6e4:	d004      	beq.n	800e6f0 <__aeabi_fmul+0x220>
 800e6e6:	220f      	movs	r2, #15
 800e6e8:	401a      	ands	r2, r3
 800e6ea:	2a04      	cmp	r2, #4
 800e6ec:	d000      	beq.n	800e6f0 <__aeabi_fmul+0x220>
 800e6ee:	3304      	adds	r3, #4
 800e6f0:	015a      	lsls	r2, r3, #5
 800e6f2:	d411      	bmi.n	800e718 <__aeabi_fmul+0x248>
 800e6f4:	019b      	lsls	r3, r3, #6
 800e6f6:	0a5b      	lsrs	r3, r3, #9
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	e744      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e6fc:	2380      	movs	r3, #128	; 0x80
 800e6fe:	464a      	mov	r2, r9
 800e700:	03db      	lsls	r3, r3, #15
 800e702:	4313      	orrs	r3, r2
 800e704:	025b      	lsls	r3, r3, #9
 800e706:	0a5b      	lsrs	r3, r3, #9
 800e708:	0037      	movs	r7, r6
 800e70a:	22ff      	movs	r2, #255	; 0xff
 800e70c:	e73b      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e70e:	9501      	str	r5, [sp, #4]
 800e710:	e787      	b.n	800e622 <__aeabi_fmul+0x152>
 800e712:	2200      	movs	r2, #0
 800e714:	2300      	movs	r3, #0
 800e716:	e736      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e718:	2201      	movs	r2, #1
 800e71a:	2300      	movs	r3, #0
 800e71c:	e733      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e71e:	2380      	movs	r3, #128	; 0x80
 800e720:	03db      	lsls	r3, r3, #15
 800e722:	4323      	orrs	r3, r4
 800e724:	025b      	lsls	r3, r3, #9
 800e726:	0a5b      	lsrs	r3, r3, #9
 800e728:	22ff      	movs	r2, #255	; 0xff
 800e72a:	e72c      	b.n	800e586 <__aeabi_fmul+0xb6>
 800e72c:	0801b7e8 	.word	0x0801b7e8
 800e730:	f7ffffff 	.word	0xf7ffffff

0800e734 <__aeabi_fsub>:
 800e734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e736:	4647      	mov	r7, r8
 800e738:	46ce      	mov	lr, r9
 800e73a:	0044      	lsls	r4, r0, #1
 800e73c:	0fc2      	lsrs	r2, r0, #31
 800e73e:	b580      	push	{r7, lr}
 800e740:	0247      	lsls	r7, r0, #9
 800e742:	0248      	lsls	r0, r1, #9
 800e744:	0a40      	lsrs	r0, r0, #9
 800e746:	4684      	mov	ip, r0
 800e748:	4666      	mov	r6, ip
 800e74a:	0048      	lsls	r0, r1, #1
 800e74c:	0a7f      	lsrs	r7, r7, #9
 800e74e:	0e24      	lsrs	r4, r4, #24
 800e750:	00f6      	lsls	r6, r6, #3
 800e752:	0025      	movs	r5, r4
 800e754:	4690      	mov	r8, r2
 800e756:	00fb      	lsls	r3, r7, #3
 800e758:	0e00      	lsrs	r0, r0, #24
 800e75a:	0fc9      	lsrs	r1, r1, #31
 800e75c:	46b1      	mov	r9, r6
 800e75e:	28ff      	cmp	r0, #255	; 0xff
 800e760:	d100      	bne.n	800e764 <__aeabi_fsub+0x30>
 800e762:	e085      	b.n	800e870 <__aeabi_fsub+0x13c>
 800e764:	2601      	movs	r6, #1
 800e766:	4071      	eors	r1, r6
 800e768:	1a26      	subs	r6, r4, r0
 800e76a:	4291      	cmp	r1, r2
 800e76c:	d057      	beq.n	800e81e <__aeabi_fsub+0xea>
 800e76e:	2e00      	cmp	r6, #0
 800e770:	dd43      	ble.n	800e7fa <__aeabi_fsub+0xc6>
 800e772:	2800      	cmp	r0, #0
 800e774:	d000      	beq.n	800e778 <__aeabi_fsub+0x44>
 800e776:	e07f      	b.n	800e878 <__aeabi_fsub+0x144>
 800e778:	4649      	mov	r1, r9
 800e77a:	2900      	cmp	r1, #0
 800e77c:	d100      	bne.n	800e780 <__aeabi_fsub+0x4c>
 800e77e:	e0aa      	b.n	800e8d6 <__aeabi_fsub+0x1a2>
 800e780:	3e01      	subs	r6, #1
 800e782:	2e00      	cmp	r6, #0
 800e784:	d000      	beq.n	800e788 <__aeabi_fsub+0x54>
 800e786:	e0f7      	b.n	800e978 <__aeabi_fsub+0x244>
 800e788:	1a5b      	subs	r3, r3, r1
 800e78a:	015a      	lsls	r2, r3, #5
 800e78c:	d400      	bmi.n	800e790 <__aeabi_fsub+0x5c>
 800e78e:	e08b      	b.n	800e8a8 <__aeabi_fsub+0x174>
 800e790:	019b      	lsls	r3, r3, #6
 800e792:	099c      	lsrs	r4, r3, #6
 800e794:	0020      	movs	r0, r4
 800e796:	f000 f991 	bl	800eabc <__clzsi2>
 800e79a:	3805      	subs	r0, #5
 800e79c:	4084      	lsls	r4, r0
 800e79e:	4285      	cmp	r5, r0
 800e7a0:	dd00      	ble.n	800e7a4 <__aeabi_fsub+0x70>
 800e7a2:	e0d3      	b.n	800e94c <__aeabi_fsub+0x218>
 800e7a4:	1b45      	subs	r5, r0, r5
 800e7a6:	0023      	movs	r3, r4
 800e7a8:	2020      	movs	r0, #32
 800e7aa:	3501      	adds	r5, #1
 800e7ac:	40eb      	lsrs	r3, r5
 800e7ae:	1b45      	subs	r5, r0, r5
 800e7b0:	40ac      	lsls	r4, r5
 800e7b2:	1e62      	subs	r2, r4, #1
 800e7b4:	4194      	sbcs	r4, r2
 800e7b6:	4323      	orrs	r3, r4
 800e7b8:	2407      	movs	r4, #7
 800e7ba:	2500      	movs	r5, #0
 800e7bc:	401c      	ands	r4, r3
 800e7be:	2201      	movs	r2, #1
 800e7c0:	4641      	mov	r1, r8
 800e7c2:	400a      	ands	r2, r1
 800e7c4:	2c00      	cmp	r4, #0
 800e7c6:	d004      	beq.n	800e7d2 <__aeabi_fsub+0x9e>
 800e7c8:	210f      	movs	r1, #15
 800e7ca:	4019      	ands	r1, r3
 800e7cc:	2904      	cmp	r1, #4
 800e7ce:	d000      	beq.n	800e7d2 <__aeabi_fsub+0x9e>
 800e7d0:	3304      	adds	r3, #4
 800e7d2:	0159      	lsls	r1, r3, #5
 800e7d4:	d400      	bmi.n	800e7d8 <__aeabi_fsub+0xa4>
 800e7d6:	e080      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e7d8:	3501      	adds	r5, #1
 800e7da:	b2ec      	uxtb	r4, r5
 800e7dc:	2dff      	cmp	r5, #255	; 0xff
 800e7de:	d000      	beq.n	800e7e2 <__aeabi_fsub+0xae>
 800e7e0:	e0a3      	b.n	800e92a <__aeabi_fsub+0x1f6>
 800e7e2:	24ff      	movs	r4, #255	; 0xff
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	025b      	lsls	r3, r3, #9
 800e7e8:	05e4      	lsls	r4, r4, #23
 800e7ea:	0a58      	lsrs	r0, r3, #9
 800e7ec:	07d2      	lsls	r2, r2, #31
 800e7ee:	4320      	orrs	r0, r4
 800e7f0:	4310      	orrs	r0, r2
 800e7f2:	bc0c      	pop	{r2, r3}
 800e7f4:	4690      	mov	r8, r2
 800e7f6:	4699      	mov	r9, r3
 800e7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	d174      	bne.n	800e8e8 <__aeabi_fsub+0x1b4>
 800e7fe:	1c60      	adds	r0, r4, #1
 800e800:	b2c0      	uxtb	r0, r0
 800e802:	2801      	cmp	r0, #1
 800e804:	dc00      	bgt.n	800e808 <__aeabi_fsub+0xd4>
 800e806:	e0a7      	b.n	800e958 <__aeabi_fsub+0x224>
 800e808:	464a      	mov	r2, r9
 800e80a:	1a9c      	subs	r4, r3, r2
 800e80c:	0162      	lsls	r2, r4, #5
 800e80e:	d500      	bpl.n	800e812 <__aeabi_fsub+0xde>
 800e810:	e0b6      	b.n	800e980 <__aeabi_fsub+0x24c>
 800e812:	2c00      	cmp	r4, #0
 800e814:	d1be      	bne.n	800e794 <__aeabi_fsub+0x60>
 800e816:	2200      	movs	r2, #0
 800e818:	2400      	movs	r4, #0
 800e81a:	2300      	movs	r3, #0
 800e81c:	e7e3      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800e81e:	2e00      	cmp	r6, #0
 800e820:	dc00      	bgt.n	800e824 <__aeabi_fsub+0xf0>
 800e822:	e085      	b.n	800e930 <__aeabi_fsub+0x1fc>
 800e824:	2800      	cmp	r0, #0
 800e826:	d046      	beq.n	800e8b6 <__aeabi_fsub+0x182>
 800e828:	2cff      	cmp	r4, #255	; 0xff
 800e82a:	d049      	beq.n	800e8c0 <__aeabi_fsub+0x18c>
 800e82c:	2280      	movs	r2, #128	; 0x80
 800e82e:	4648      	mov	r0, r9
 800e830:	04d2      	lsls	r2, r2, #19
 800e832:	4310      	orrs	r0, r2
 800e834:	4681      	mov	r9, r0
 800e836:	2201      	movs	r2, #1
 800e838:	2e1b      	cmp	r6, #27
 800e83a:	dc09      	bgt.n	800e850 <__aeabi_fsub+0x11c>
 800e83c:	2020      	movs	r0, #32
 800e83e:	464c      	mov	r4, r9
 800e840:	1b80      	subs	r0, r0, r6
 800e842:	4084      	lsls	r4, r0
 800e844:	464a      	mov	r2, r9
 800e846:	0020      	movs	r0, r4
 800e848:	40f2      	lsrs	r2, r6
 800e84a:	1e44      	subs	r4, r0, #1
 800e84c:	41a0      	sbcs	r0, r4
 800e84e:	4302      	orrs	r2, r0
 800e850:	189b      	adds	r3, r3, r2
 800e852:	015a      	lsls	r2, r3, #5
 800e854:	d528      	bpl.n	800e8a8 <__aeabi_fsub+0x174>
 800e856:	3501      	adds	r5, #1
 800e858:	2dff      	cmp	r5, #255	; 0xff
 800e85a:	d100      	bne.n	800e85e <__aeabi_fsub+0x12a>
 800e85c:	e0a8      	b.n	800e9b0 <__aeabi_fsub+0x27c>
 800e85e:	2201      	movs	r2, #1
 800e860:	2407      	movs	r4, #7
 800e862:	4994      	ldr	r1, [pc, #592]	; (800eab4 <__aeabi_fsub+0x380>)
 800e864:	401a      	ands	r2, r3
 800e866:	085b      	lsrs	r3, r3, #1
 800e868:	400b      	ands	r3, r1
 800e86a:	4313      	orrs	r3, r2
 800e86c:	401c      	ands	r4, r3
 800e86e:	e7a6      	b.n	800e7be <__aeabi_fsub+0x8a>
 800e870:	2e00      	cmp	r6, #0
 800e872:	d000      	beq.n	800e876 <__aeabi_fsub+0x142>
 800e874:	e778      	b.n	800e768 <__aeabi_fsub+0x34>
 800e876:	e775      	b.n	800e764 <__aeabi_fsub+0x30>
 800e878:	2cff      	cmp	r4, #255	; 0xff
 800e87a:	d054      	beq.n	800e926 <__aeabi_fsub+0x1f2>
 800e87c:	2280      	movs	r2, #128	; 0x80
 800e87e:	4649      	mov	r1, r9
 800e880:	04d2      	lsls	r2, r2, #19
 800e882:	4311      	orrs	r1, r2
 800e884:	4689      	mov	r9, r1
 800e886:	2201      	movs	r2, #1
 800e888:	2e1b      	cmp	r6, #27
 800e88a:	dc09      	bgt.n	800e8a0 <__aeabi_fsub+0x16c>
 800e88c:	2120      	movs	r1, #32
 800e88e:	4648      	mov	r0, r9
 800e890:	1b89      	subs	r1, r1, r6
 800e892:	4088      	lsls	r0, r1
 800e894:	464a      	mov	r2, r9
 800e896:	0001      	movs	r1, r0
 800e898:	40f2      	lsrs	r2, r6
 800e89a:	1e48      	subs	r0, r1, #1
 800e89c:	4181      	sbcs	r1, r0
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	1a9b      	subs	r3, r3, r2
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	d500      	bpl.n	800e8a8 <__aeabi_fsub+0x174>
 800e8a6:	e773      	b.n	800e790 <__aeabi_fsub+0x5c>
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	4641      	mov	r1, r8
 800e8ac:	400a      	ands	r2, r1
 800e8ae:	0759      	lsls	r1, r3, #29
 800e8b0:	d000      	beq.n	800e8b4 <__aeabi_fsub+0x180>
 800e8b2:	e789      	b.n	800e7c8 <__aeabi_fsub+0x94>
 800e8b4:	e011      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e8b6:	4648      	mov	r0, r9
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d158      	bne.n	800e96e <__aeabi_fsub+0x23a>
 800e8bc:	2cff      	cmp	r4, #255	; 0xff
 800e8be:	d10c      	bne.n	800e8da <__aeabi_fsub+0x1a6>
 800e8c0:	08db      	lsrs	r3, r3, #3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d100      	bne.n	800e8c8 <__aeabi_fsub+0x194>
 800e8c6:	e78c      	b.n	800e7e2 <__aeabi_fsub+0xae>
 800e8c8:	2080      	movs	r0, #128	; 0x80
 800e8ca:	03c0      	lsls	r0, r0, #15
 800e8cc:	4303      	orrs	r3, r0
 800e8ce:	025b      	lsls	r3, r3, #9
 800e8d0:	0a5b      	lsrs	r3, r3, #9
 800e8d2:	24ff      	movs	r4, #255	; 0xff
 800e8d4:	e787      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800e8d6:	2cff      	cmp	r4, #255	; 0xff
 800e8d8:	d025      	beq.n	800e926 <__aeabi_fsub+0x1f2>
 800e8da:	08db      	lsrs	r3, r3, #3
 800e8dc:	2dff      	cmp	r5, #255	; 0xff
 800e8de:	d0f0      	beq.n	800e8c2 <__aeabi_fsub+0x18e>
 800e8e0:	025b      	lsls	r3, r3, #9
 800e8e2:	0a5b      	lsrs	r3, r3, #9
 800e8e4:	b2ec      	uxtb	r4, r5
 800e8e6:	e77e      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800e8e8:	2c00      	cmp	r4, #0
 800e8ea:	d04d      	beq.n	800e988 <__aeabi_fsub+0x254>
 800e8ec:	28ff      	cmp	r0, #255	; 0xff
 800e8ee:	d018      	beq.n	800e922 <__aeabi_fsub+0x1ee>
 800e8f0:	2480      	movs	r4, #128	; 0x80
 800e8f2:	04e4      	lsls	r4, r4, #19
 800e8f4:	4272      	negs	r2, r6
 800e8f6:	4323      	orrs	r3, r4
 800e8f8:	2a1b      	cmp	r2, #27
 800e8fa:	dd00      	ble.n	800e8fe <__aeabi_fsub+0x1ca>
 800e8fc:	e0c4      	b.n	800ea88 <__aeabi_fsub+0x354>
 800e8fe:	001c      	movs	r4, r3
 800e900:	2520      	movs	r5, #32
 800e902:	40d4      	lsrs	r4, r2
 800e904:	1aaa      	subs	r2, r5, r2
 800e906:	4093      	lsls	r3, r2
 800e908:	1e5a      	subs	r2, r3, #1
 800e90a:	4193      	sbcs	r3, r2
 800e90c:	4323      	orrs	r3, r4
 800e90e:	464a      	mov	r2, r9
 800e910:	0005      	movs	r5, r0
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	4688      	mov	r8, r1
 800e916:	e738      	b.n	800e78a <__aeabi_fsub+0x56>
 800e918:	1c72      	adds	r2, r6, #1
 800e91a:	d0f8      	beq.n	800e90e <__aeabi_fsub+0x1da>
 800e91c:	43f2      	mvns	r2, r6
 800e91e:	28ff      	cmp	r0, #255	; 0xff
 800e920:	d1ea      	bne.n	800e8f8 <__aeabi_fsub+0x1c4>
 800e922:	000a      	movs	r2, r1
 800e924:	464b      	mov	r3, r9
 800e926:	25ff      	movs	r5, #255	; 0xff
 800e928:	e7d7      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e92a:	019b      	lsls	r3, r3, #6
 800e92c:	0a5b      	lsrs	r3, r3, #9
 800e92e:	e75a      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800e930:	2e00      	cmp	r6, #0
 800e932:	d141      	bne.n	800e9b8 <__aeabi_fsub+0x284>
 800e934:	1c65      	adds	r5, r4, #1
 800e936:	b2e9      	uxtb	r1, r5
 800e938:	2901      	cmp	r1, #1
 800e93a:	dd45      	ble.n	800e9c8 <__aeabi_fsub+0x294>
 800e93c:	2dff      	cmp	r5, #255	; 0xff
 800e93e:	d100      	bne.n	800e942 <__aeabi_fsub+0x20e>
 800e940:	e74f      	b.n	800e7e2 <__aeabi_fsub+0xae>
 800e942:	2407      	movs	r4, #7
 800e944:	444b      	add	r3, r9
 800e946:	085b      	lsrs	r3, r3, #1
 800e948:	401c      	ands	r4, r3
 800e94a:	e738      	b.n	800e7be <__aeabi_fsub+0x8a>
 800e94c:	2207      	movs	r2, #7
 800e94e:	4b5a      	ldr	r3, [pc, #360]	; (800eab8 <__aeabi_fsub+0x384>)
 800e950:	1a2d      	subs	r5, r5, r0
 800e952:	4023      	ands	r3, r4
 800e954:	4014      	ands	r4, r2
 800e956:	e732      	b.n	800e7be <__aeabi_fsub+0x8a>
 800e958:	2c00      	cmp	r4, #0
 800e95a:	d11d      	bne.n	800e998 <__aeabi_fsub+0x264>
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d17a      	bne.n	800ea56 <__aeabi_fsub+0x322>
 800e960:	464b      	mov	r3, r9
 800e962:	2b00      	cmp	r3, #0
 800e964:	d100      	bne.n	800e968 <__aeabi_fsub+0x234>
 800e966:	e091      	b.n	800ea8c <__aeabi_fsub+0x358>
 800e968:	000a      	movs	r2, r1
 800e96a:	2500      	movs	r5, #0
 800e96c:	e7b5      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e96e:	3e01      	subs	r6, #1
 800e970:	2e00      	cmp	r6, #0
 800e972:	d119      	bne.n	800e9a8 <__aeabi_fsub+0x274>
 800e974:	444b      	add	r3, r9
 800e976:	e76c      	b.n	800e852 <__aeabi_fsub+0x11e>
 800e978:	2cff      	cmp	r4, #255	; 0xff
 800e97a:	d184      	bne.n	800e886 <__aeabi_fsub+0x152>
 800e97c:	25ff      	movs	r5, #255	; 0xff
 800e97e:	e7ac      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e980:	464a      	mov	r2, r9
 800e982:	4688      	mov	r8, r1
 800e984:	1ad4      	subs	r4, r2, r3
 800e986:	e705      	b.n	800e794 <__aeabi_fsub+0x60>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1c5      	bne.n	800e918 <__aeabi_fsub+0x1e4>
 800e98c:	000a      	movs	r2, r1
 800e98e:	28ff      	cmp	r0, #255	; 0xff
 800e990:	d0c8      	beq.n	800e924 <__aeabi_fsub+0x1f0>
 800e992:	0005      	movs	r5, r0
 800e994:	464b      	mov	r3, r9
 800e996:	e7a0      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d149      	bne.n	800ea30 <__aeabi_fsub+0x2fc>
 800e99c:	464b      	mov	r3, r9
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d077      	beq.n	800ea92 <__aeabi_fsub+0x35e>
 800e9a2:	000a      	movs	r2, r1
 800e9a4:	25ff      	movs	r5, #255	; 0xff
 800e9a6:	e798      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800e9a8:	2cff      	cmp	r4, #255	; 0xff
 800e9aa:	d000      	beq.n	800e9ae <__aeabi_fsub+0x27a>
 800e9ac:	e743      	b.n	800e836 <__aeabi_fsub+0x102>
 800e9ae:	e787      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800e9b0:	000a      	movs	r2, r1
 800e9b2:	24ff      	movs	r4, #255	; 0xff
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	e716      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800e9b8:	2c00      	cmp	r4, #0
 800e9ba:	d115      	bne.n	800e9e8 <__aeabi_fsub+0x2b4>
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d157      	bne.n	800ea70 <__aeabi_fsub+0x33c>
 800e9c0:	28ff      	cmp	r0, #255	; 0xff
 800e9c2:	d1e6      	bne.n	800e992 <__aeabi_fsub+0x25e>
 800e9c4:	464b      	mov	r3, r9
 800e9c6:	e77b      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800e9c8:	2c00      	cmp	r4, #0
 800e9ca:	d120      	bne.n	800ea0e <__aeabi_fsub+0x2da>
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d057      	beq.n	800ea80 <__aeabi_fsub+0x34c>
 800e9d0:	4649      	mov	r1, r9
 800e9d2:	2900      	cmp	r1, #0
 800e9d4:	d053      	beq.n	800ea7e <__aeabi_fsub+0x34a>
 800e9d6:	444b      	add	r3, r9
 800e9d8:	015a      	lsls	r2, r3, #5
 800e9da:	d568      	bpl.n	800eaae <__aeabi_fsub+0x37a>
 800e9dc:	2407      	movs	r4, #7
 800e9de:	4a36      	ldr	r2, [pc, #216]	; (800eab8 <__aeabi_fsub+0x384>)
 800e9e0:	401c      	ands	r4, r3
 800e9e2:	2501      	movs	r5, #1
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	e6ea      	b.n	800e7be <__aeabi_fsub+0x8a>
 800e9e8:	28ff      	cmp	r0, #255	; 0xff
 800e9ea:	d0eb      	beq.n	800e9c4 <__aeabi_fsub+0x290>
 800e9ec:	2280      	movs	r2, #128	; 0x80
 800e9ee:	04d2      	lsls	r2, r2, #19
 800e9f0:	4276      	negs	r6, r6
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	2e1b      	cmp	r6, #27
 800e9f6:	dc53      	bgt.n	800eaa0 <__aeabi_fsub+0x36c>
 800e9f8:	2520      	movs	r5, #32
 800e9fa:	1bad      	subs	r5, r5, r6
 800e9fc:	001a      	movs	r2, r3
 800e9fe:	40ab      	lsls	r3, r5
 800ea00:	40f2      	lsrs	r2, r6
 800ea02:	1e5c      	subs	r4, r3, #1
 800ea04:	41a3      	sbcs	r3, r4
 800ea06:	4313      	orrs	r3, r2
 800ea08:	444b      	add	r3, r9
 800ea0a:	0005      	movs	r5, r0
 800ea0c:	e721      	b.n	800e852 <__aeabi_fsub+0x11e>
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d0d8      	beq.n	800e9c4 <__aeabi_fsub+0x290>
 800ea12:	4649      	mov	r1, r9
 800ea14:	2900      	cmp	r1, #0
 800ea16:	d100      	bne.n	800ea1a <__aeabi_fsub+0x2e6>
 800ea18:	e752      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800ea1a:	2180      	movs	r1, #128	; 0x80
 800ea1c:	03c9      	lsls	r1, r1, #15
 800ea1e:	420f      	tst	r7, r1
 800ea20:	d100      	bne.n	800ea24 <__aeabi_fsub+0x2f0>
 800ea22:	e74d      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800ea24:	4660      	mov	r0, ip
 800ea26:	4208      	tst	r0, r1
 800ea28:	d000      	beq.n	800ea2c <__aeabi_fsub+0x2f8>
 800ea2a:	e749      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800ea2c:	464b      	mov	r3, r9
 800ea2e:	e747      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800ea30:	4648      	mov	r0, r9
 800ea32:	25ff      	movs	r5, #255	; 0xff
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d100      	bne.n	800ea3a <__aeabi_fsub+0x306>
 800ea38:	e74f      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800ea3a:	2280      	movs	r2, #128	; 0x80
 800ea3c:	03d2      	lsls	r2, r2, #15
 800ea3e:	4217      	tst	r7, r2
 800ea40:	d004      	beq.n	800ea4c <__aeabi_fsub+0x318>
 800ea42:	4660      	mov	r0, ip
 800ea44:	4210      	tst	r0, r2
 800ea46:	d101      	bne.n	800ea4c <__aeabi_fsub+0x318>
 800ea48:	464b      	mov	r3, r9
 800ea4a:	4688      	mov	r8, r1
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	4641      	mov	r1, r8
 800ea50:	25ff      	movs	r5, #255	; 0xff
 800ea52:	400a      	ands	r2, r1
 800ea54:	e741      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800ea56:	4648      	mov	r0, r9
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d01f      	beq.n	800ea9c <__aeabi_fsub+0x368>
 800ea5c:	1a1a      	subs	r2, r3, r0
 800ea5e:	0150      	lsls	r0, r2, #5
 800ea60:	d520      	bpl.n	800eaa4 <__aeabi_fsub+0x370>
 800ea62:	464a      	mov	r2, r9
 800ea64:	2407      	movs	r4, #7
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	401c      	ands	r4, r3
 800ea6a:	4688      	mov	r8, r1
 800ea6c:	2500      	movs	r5, #0
 800ea6e:	e6a6      	b.n	800e7be <__aeabi_fsub+0x8a>
 800ea70:	1c74      	adds	r4, r6, #1
 800ea72:	d0c9      	beq.n	800ea08 <__aeabi_fsub+0x2d4>
 800ea74:	43f6      	mvns	r6, r6
 800ea76:	28ff      	cmp	r0, #255	; 0xff
 800ea78:	d1bc      	bne.n	800e9f4 <__aeabi_fsub+0x2c0>
 800ea7a:	464b      	mov	r3, r9
 800ea7c:	e720      	b.n	800e8c0 <__aeabi_fsub+0x18c>
 800ea7e:	4699      	mov	r9, r3
 800ea80:	464b      	mov	r3, r9
 800ea82:	2500      	movs	r5, #0
 800ea84:	08db      	lsrs	r3, r3, #3
 800ea86:	e72b      	b.n	800e8e0 <__aeabi_fsub+0x1ac>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e740      	b.n	800e90e <__aeabi_fsub+0x1da>
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e6a9      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800ea92:	2380      	movs	r3, #128	; 0x80
 800ea94:	2200      	movs	r2, #0
 800ea96:	03db      	lsls	r3, r3, #15
 800ea98:	24ff      	movs	r4, #255	; 0xff
 800ea9a:	e6a4      	b.n	800e7e6 <__aeabi_fsub+0xb2>
 800ea9c:	2500      	movs	r5, #0
 800ea9e:	e71c      	b.n	800e8da <__aeabi_fsub+0x1a6>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e7b1      	b.n	800ea08 <__aeabi_fsub+0x2d4>
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	d0f1      	beq.n	800ea8c <__aeabi_fsub+0x358>
 800eaa8:	0013      	movs	r3, r2
 800eaaa:	2500      	movs	r5, #0
 800eaac:	e6fc      	b.n	800e8a8 <__aeabi_fsub+0x174>
 800eaae:	2500      	movs	r5, #0
 800eab0:	e6fa      	b.n	800e8a8 <__aeabi_fsub+0x174>
 800eab2:	46c0      	nop			; (mov r8, r8)
 800eab4:	7dffffff 	.word	0x7dffffff
 800eab8:	fbffffff 	.word	0xfbffffff

0800eabc <__clzsi2>:
 800eabc:	211c      	movs	r1, #28
 800eabe:	2301      	movs	r3, #1
 800eac0:	041b      	lsls	r3, r3, #16
 800eac2:	4298      	cmp	r0, r3
 800eac4:	d301      	bcc.n	800eaca <__clzsi2+0xe>
 800eac6:	0c00      	lsrs	r0, r0, #16
 800eac8:	3910      	subs	r1, #16
 800eaca:	0a1b      	lsrs	r3, r3, #8
 800eacc:	4298      	cmp	r0, r3
 800eace:	d301      	bcc.n	800ead4 <__clzsi2+0x18>
 800ead0:	0a00      	lsrs	r0, r0, #8
 800ead2:	3908      	subs	r1, #8
 800ead4:	091b      	lsrs	r3, r3, #4
 800ead6:	4298      	cmp	r0, r3
 800ead8:	d301      	bcc.n	800eade <__clzsi2+0x22>
 800eada:	0900      	lsrs	r0, r0, #4
 800eadc:	3904      	subs	r1, #4
 800eade:	a202      	add	r2, pc, #8	; (adr r2, 800eae8 <__clzsi2+0x2c>)
 800eae0:	5c10      	ldrb	r0, [r2, r0]
 800eae2:	1840      	adds	r0, r0, r1
 800eae4:	4770      	bx	lr
 800eae6:	46c0      	nop			; (mov r8, r8)
 800eae8:	02020304 	.word	0x02020304
 800eaec:	01010101 	.word	0x01010101
	...

0800eaf8 <__gnu_thumb1_case_sqi>:
 800eaf8:	b402      	push	{r1}
 800eafa:	4671      	mov	r1, lr
 800eafc:	0849      	lsrs	r1, r1, #1
 800eafe:	0049      	lsls	r1, r1, #1
 800eb00:	5609      	ldrsb	r1, [r1, r0]
 800eb02:	0049      	lsls	r1, r1, #1
 800eb04:	448e      	add	lr, r1
 800eb06:	bc02      	pop	{r1}
 800eb08:	4770      	bx	lr
 800eb0a:	46c0      	nop			; (mov r8, r8)

0800eb0c <__gnu_thumb1_case_uqi>:
 800eb0c:	b402      	push	{r1}
 800eb0e:	4671      	mov	r1, lr
 800eb10:	0849      	lsrs	r1, r1, #1
 800eb12:	0049      	lsls	r1, r1, #1
 800eb14:	5c09      	ldrb	r1, [r1, r0]
 800eb16:	0049      	lsls	r1, r1, #1
 800eb18:	448e      	add	lr, r1
 800eb1a:	bc02      	pop	{r1}
 800eb1c:	4770      	bx	lr
 800eb1e:	46c0      	nop			; (mov r8, r8)

0800eb20 <__gnu_thumb1_case_uhi>:
 800eb20:	b403      	push	{r0, r1}
 800eb22:	4671      	mov	r1, lr
 800eb24:	0849      	lsrs	r1, r1, #1
 800eb26:	0040      	lsls	r0, r0, #1
 800eb28:	0049      	lsls	r1, r1, #1
 800eb2a:	5a09      	ldrh	r1, [r1, r0]
 800eb2c:	0049      	lsls	r1, r1, #1
 800eb2e:	448e      	add	lr, r1
 800eb30:	bc03      	pop	{r0, r1}
 800eb32:	4770      	bx	lr

0800eb34 <__udivsi3>:
 800eb34:	2200      	movs	r2, #0
 800eb36:	0843      	lsrs	r3, r0, #1
 800eb38:	428b      	cmp	r3, r1
 800eb3a:	d374      	bcc.n	800ec26 <__udivsi3+0xf2>
 800eb3c:	0903      	lsrs	r3, r0, #4
 800eb3e:	428b      	cmp	r3, r1
 800eb40:	d35f      	bcc.n	800ec02 <__udivsi3+0xce>
 800eb42:	0a03      	lsrs	r3, r0, #8
 800eb44:	428b      	cmp	r3, r1
 800eb46:	d344      	bcc.n	800ebd2 <__udivsi3+0x9e>
 800eb48:	0b03      	lsrs	r3, r0, #12
 800eb4a:	428b      	cmp	r3, r1
 800eb4c:	d328      	bcc.n	800eba0 <__udivsi3+0x6c>
 800eb4e:	0c03      	lsrs	r3, r0, #16
 800eb50:	428b      	cmp	r3, r1
 800eb52:	d30d      	bcc.n	800eb70 <__udivsi3+0x3c>
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	0209      	lsls	r1, r1, #8
 800eb58:	ba12      	rev	r2, r2
 800eb5a:	0c03      	lsrs	r3, r0, #16
 800eb5c:	428b      	cmp	r3, r1
 800eb5e:	d302      	bcc.n	800eb66 <__udivsi3+0x32>
 800eb60:	1212      	asrs	r2, r2, #8
 800eb62:	0209      	lsls	r1, r1, #8
 800eb64:	d065      	beq.n	800ec32 <__udivsi3+0xfe>
 800eb66:	0b03      	lsrs	r3, r0, #12
 800eb68:	428b      	cmp	r3, r1
 800eb6a:	d319      	bcc.n	800eba0 <__udivsi3+0x6c>
 800eb6c:	e000      	b.n	800eb70 <__udivsi3+0x3c>
 800eb6e:	0a09      	lsrs	r1, r1, #8
 800eb70:	0bc3      	lsrs	r3, r0, #15
 800eb72:	428b      	cmp	r3, r1
 800eb74:	d301      	bcc.n	800eb7a <__udivsi3+0x46>
 800eb76:	03cb      	lsls	r3, r1, #15
 800eb78:	1ac0      	subs	r0, r0, r3
 800eb7a:	4152      	adcs	r2, r2
 800eb7c:	0b83      	lsrs	r3, r0, #14
 800eb7e:	428b      	cmp	r3, r1
 800eb80:	d301      	bcc.n	800eb86 <__udivsi3+0x52>
 800eb82:	038b      	lsls	r3, r1, #14
 800eb84:	1ac0      	subs	r0, r0, r3
 800eb86:	4152      	adcs	r2, r2
 800eb88:	0b43      	lsrs	r3, r0, #13
 800eb8a:	428b      	cmp	r3, r1
 800eb8c:	d301      	bcc.n	800eb92 <__udivsi3+0x5e>
 800eb8e:	034b      	lsls	r3, r1, #13
 800eb90:	1ac0      	subs	r0, r0, r3
 800eb92:	4152      	adcs	r2, r2
 800eb94:	0b03      	lsrs	r3, r0, #12
 800eb96:	428b      	cmp	r3, r1
 800eb98:	d301      	bcc.n	800eb9e <__udivsi3+0x6a>
 800eb9a:	030b      	lsls	r3, r1, #12
 800eb9c:	1ac0      	subs	r0, r0, r3
 800eb9e:	4152      	adcs	r2, r2
 800eba0:	0ac3      	lsrs	r3, r0, #11
 800eba2:	428b      	cmp	r3, r1
 800eba4:	d301      	bcc.n	800ebaa <__udivsi3+0x76>
 800eba6:	02cb      	lsls	r3, r1, #11
 800eba8:	1ac0      	subs	r0, r0, r3
 800ebaa:	4152      	adcs	r2, r2
 800ebac:	0a83      	lsrs	r3, r0, #10
 800ebae:	428b      	cmp	r3, r1
 800ebb0:	d301      	bcc.n	800ebb6 <__udivsi3+0x82>
 800ebb2:	028b      	lsls	r3, r1, #10
 800ebb4:	1ac0      	subs	r0, r0, r3
 800ebb6:	4152      	adcs	r2, r2
 800ebb8:	0a43      	lsrs	r3, r0, #9
 800ebba:	428b      	cmp	r3, r1
 800ebbc:	d301      	bcc.n	800ebc2 <__udivsi3+0x8e>
 800ebbe:	024b      	lsls	r3, r1, #9
 800ebc0:	1ac0      	subs	r0, r0, r3
 800ebc2:	4152      	adcs	r2, r2
 800ebc4:	0a03      	lsrs	r3, r0, #8
 800ebc6:	428b      	cmp	r3, r1
 800ebc8:	d301      	bcc.n	800ebce <__udivsi3+0x9a>
 800ebca:	020b      	lsls	r3, r1, #8
 800ebcc:	1ac0      	subs	r0, r0, r3
 800ebce:	4152      	adcs	r2, r2
 800ebd0:	d2cd      	bcs.n	800eb6e <__udivsi3+0x3a>
 800ebd2:	09c3      	lsrs	r3, r0, #7
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	d301      	bcc.n	800ebdc <__udivsi3+0xa8>
 800ebd8:	01cb      	lsls	r3, r1, #7
 800ebda:	1ac0      	subs	r0, r0, r3
 800ebdc:	4152      	adcs	r2, r2
 800ebde:	0983      	lsrs	r3, r0, #6
 800ebe0:	428b      	cmp	r3, r1
 800ebe2:	d301      	bcc.n	800ebe8 <__udivsi3+0xb4>
 800ebe4:	018b      	lsls	r3, r1, #6
 800ebe6:	1ac0      	subs	r0, r0, r3
 800ebe8:	4152      	adcs	r2, r2
 800ebea:	0943      	lsrs	r3, r0, #5
 800ebec:	428b      	cmp	r3, r1
 800ebee:	d301      	bcc.n	800ebf4 <__udivsi3+0xc0>
 800ebf0:	014b      	lsls	r3, r1, #5
 800ebf2:	1ac0      	subs	r0, r0, r3
 800ebf4:	4152      	adcs	r2, r2
 800ebf6:	0903      	lsrs	r3, r0, #4
 800ebf8:	428b      	cmp	r3, r1
 800ebfa:	d301      	bcc.n	800ec00 <__udivsi3+0xcc>
 800ebfc:	010b      	lsls	r3, r1, #4
 800ebfe:	1ac0      	subs	r0, r0, r3
 800ec00:	4152      	adcs	r2, r2
 800ec02:	08c3      	lsrs	r3, r0, #3
 800ec04:	428b      	cmp	r3, r1
 800ec06:	d301      	bcc.n	800ec0c <__udivsi3+0xd8>
 800ec08:	00cb      	lsls	r3, r1, #3
 800ec0a:	1ac0      	subs	r0, r0, r3
 800ec0c:	4152      	adcs	r2, r2
 800ec0e:	0883      	lsrs	r3, r0, #2
 800ec10:	428b      	cmp	r3, r1
 800ec12:	d301      	bcc.n	800ec18 <__udivsi3+0xe4>
 800ec14:	008b      	lsls	r3, r1, #2
 800ec16:	1ac0      	subs	r0, r0, r3
 800ec18:	4152      	adcs	r2, r2
 800ec1a:	0843      	lsrs	r3, r0, #1
 800ec1c:	428b      	cmp	r3, r1
 800ec1e:	d301      	bcc.n	800ec24 <__udivsi3+0xf0>
 800ec20:	004b      	lsls	r3, r1, #1
 800ec22:	1ac0      	subs	r0, r0, r3
 800ec24:	4152      	adcs	r2, r2
 800ec26:	1a41      	subs	r1, r0, r1
 800ec28:	d200      	bcs.n	800ec2c <__udivsi3+0xf8>
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	4152      	adcs	r2, r2
 800ec2e:	4610      	mov	r0, r2
 800ec30:	4770      	bx	lr
 800ec32:	e7ff      	b.n	800ec34 <__udivsi3+0x100>
 800ec34:	b501      	push	{r0, lr}
 800ec36:	2000      	movs	r0, #0
 800ec38:	f000 f8f0 	bl	800ee1c <__aeabi_idiv0>
 800ec3c:	bd02      	pop	{r1, pc}
 800ec3e:	46c0      	nop			; (mov r8, r8)

0800ec40 <__aeabi_uidivmod>:
 800ec40:	2900      	cmp	r1, #0
 800ec42:	d0f7      	beq.n	800ec34 <__udivsi3+0x100>
 800ec44:	e776      	b.n	800eb34 <__udivsi3>
 800ec46:	4770      	bx	lr

0800ec48 <__divsi3>:
 800ec48:	4603      	mov	r3, r0
 800ec4a:	430b      	orrs	r3, r1
 800ec4c:	d47f      	bmi.n	800ed4e <__divsi3+0x106>
 800ec4e:	2200      	movs	r2, #0
 800ec50:	0843      	lsrs	r3, r0, #1
 800ec52:	428b      	cmp	r3, r1
 800ec54:	d374      	bcc.n	800ed40 <__divsi3+0xf8>
 800ec56:	0903      	lsrs	r3, r0, #4
 800ec58:	428b      	cmp	r3, r1
 800ec5a:	d35f      	bcc.n	800ed1c <__divsi3+0xd4>
 800ec5c:	0a03      	lsrs	r3, r0, #8
 800ec5e:	428b      	cmp	r3, r1
 800ec60:	d344      	bcc.n	800ecec <__divsi3+0xa4>
 800ec62:	0b03      	lsrs	r3, r0, #12
 800ec64:	428b      	cmp	r3, r1
 800ec66:	d328      	bcc.n	800ecba <__divsi3+0x72>
 800ec68:	0c03      	lsrs	r3, r0, #16
 800ec6a:	428b      	cmp	r3, r1
 800ec6c:	d30d      	bcc.n	800ec8a <__divsi3+0x42>
 800ec6e:	22ff      	movs	r2, #255	; 0xff
 800ec70:	0209      	lsls	r1, r1, #8
 800ec72:	ba12      	rev	r2, r2
 800ec74:	0c03      	lsrs	r3, r0, #16
 800ec76:	428b      	cmp	r3, r1
 800ec78:	d302      	bcc.n	800ec80 <__divsi3+0x38>
 800ec7a:	1212      	asrs	r2, r2, #8
 800ec7c:	0209      	lsls	r1, r1, #8
 800ec7e:	d065      	beq.n	800ed4c <__divsi3+0x104>
 800ec80:	0b03      	lsrs	r3, r0, #12
 800ec82:	428b      	cmp	r3, r1
 800ec84:	d319      	bcc.n	800ecba <__divsi3+0x72>
 800ec86:	e000      	b.n	800ec8a <__divsi3+0x42>
 800ec88:	0a09      	lsrs	r1, r1, #8
 800ec8a:	0bc3      	lsrs	r3, r0, #15
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	d301      	bcc.n	800ec94 <__divsi3+0x4c>
 800ec90:	03cb      	lsls	r3, r1, #15
 800ec92:	1ac0      	subs	r0, r0, r3
 800ec94:	4152      	adcs	r2, r2
 800ec96:	0b83      	lsrs	r3, r0, #14
 800ec98:	428b      	cmp	r3, r1
 800ec9a:	d301      	bcc.n	800eca0 <__divsi3+0x58>
 800ec9c:	038b      	lsls	r3, r1, #14
 800ec9e:	1ac0      	subs	r0, r0, r3
 800eca0:	4152      	adcs	r2, r2
 800eca2:	0b43      	lsrs	r3, r0, #13
 800eca4:	428b      	cmp	r3, r1
 800eca6:	d301      	bcc.n	800ecac <__divsi3+0x64>
 800eca8:	034b      	lsls	r3, r1, #13
 800ecaa:	1ac0      	subs	r0, r0, r3
 800ecac:	4152      	adcs	r2, r2
 800ecae:	0b03      	lsrs	r3, r0, #12
 800ecb0:	428b      	cmp	r3, r1
 800ecb2:	d301      	bcc.n	800ecb8 <__divsi3+0x70>
 800ecb4:	030b      	lsls	r3, r1, #12
 800ecb6:	1ac0      	subs	r0, r0, r3
 800ecb8:	4152      	adcs	r2, r2
 800ecba:	0ac3      	lsrs	r3, r0, #11
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	d301      	bcc.n	800ecc4 <__divsi3+0x7c>
 800ecc0:	02cb      	lsls	r3, r1, #11
 800ecc2:	1ac0      	subs	r0, r0, r3
 800ecc4:	4152      	adcs	r2, r2
 800ecc6:	0a83      	lsrs	r3, r0, #10
 800ecc8:	428b      	cmp	r3, r1
 800ecca:	d301      	bcc.n	800ecd0 <__divsi3+0x88>
 800eccc:	028b      	lsls	r3, r1, #10
 800ecce:	1ac0      	subs	r0, r0, r3
 800ecd0:	4152      	adcs	r2, r2
 800ecd2:	0a43      	lsrs	r3, r0, #9
 800ecd4:	428b      	cmp	r3, r1
 800ecd6:	d301      	bcc.n	800ecdc <__divsi3+0x94>
 800ecd8:	024b      	lsls	r3, r1, #9
 800ecda:	1ac0      	subs	r0, r0, r3
 800ecdc:	4152      	adcs	r2, r2
 800ecde:	0a03      	lsrs	r3, r0, #8
 800ece0:	428b      	cmp	r3, r1
 800ece2:	d301      	bcc.n	800ece8 <__divsi3+0xa0>
 800ece4:	020b      	lsls	r3, r1, #8
 800ece6:	1ac0      	subs	r0, r0, r3
 800ece8:	4152      	adcs	r2, r2
 800ecea:	d2cd      	bcs.n	800ec88 <__divsi3+0x40>
 800ecec:	09c3      	lsrs	r3, r0, #7
 800ecee:	428b      	cmp	r3, r1
 800ecf0:	d301      	bcc.n	800ecf6 <__divsi3+0xae>
 800ecf2:	01cb      	lsls	r3, r1, #7
 800ecf4:	1ac0      	subs	r0, r0, r3
 800ecf6:	4152      	adcs	r2, r2
 800ecf8:	0983      	lsrs	r3, r0, #6
 800ecfa:	428b      	cmp	r3, r1
 800ecfc:	d301      	bcc.n	800ed02 <__divsi3+0xba>
 800ecfe:	018b      	lsls	r3, r1, #6
 800ed00:	1ac0      	subs	r0, r0, r3
 800ed02:	4152      	adcs	r2, r2
 800ed04:	0943      	lsrs	r3, r0, #5
 800ed06:	428b      	cmp	r3, r1
 800ed08:	d301      	bcc.n	800ed0e <__divsi3+0xc6>
 800ed0a:	014b      	lsls	r3, r1, #5
 800ed0c:	1ac0      	subs	r0, r0, r3
 800ed0e:	4152      	adcs	r2, r2
 800ed10:	0903      	lsrs	r3, r0, #4
 800ed12:	428b      	cmp	r3, r1
 800ed14:	d301      	bcc.n	800ed1a <__divsi3+0xd2>
 800ed16:	010b      	lsls	r3, r1, #4
 800ed18:	1ac0      	subs	r0, r0, r3
 800ed1a:	4152      	adcs	r2, r2
 800ed1c:	08c3      	lsrs	r3, r0, #3
 800ed1e:	428b      	cmp	r3, r1
 800ed20:	d301      	bcc.n	800ed26 <__divsi3+0xde>
 800ed22:	00cb      	lsls	r3, r1, #3
 800ed24:	1ac0      	subs	r0, r0, r3
 800ed26:	4152      	adcs	r2, r2
 800ed28:	0883      	lsrs	r3, r0, #2
 800ed2a:	428b      	cmp	r3, r1
 800ed2c:	d301      	bcc.n	800ed32 <__divsi3+0xea>
 800ed2e:	008b      	lsls	r3, r1, #2
 800ed30:	1ac0      	subs	r0, r0, r3
 800ed32:	4152      	adcs	r2, r2
 800ed34:	0843      	lsrs	r3, r0, #1
 800ed36:	428b      	cmp	r3, r1
 800ed38:	d301      	bcc.n	800ed3e <__divsi3+0xf6>
 800ed3a:	004b      	lsls	r3, r1, #1
 800ed3c:	1ac0      	subs	r0, r0, r3
 800ed3e:	4152      	adcs	r2, r2
 800ed40:	1a41      	subs	r1, r0, r1
 800ed42:	d200      	bcs.n	800ed46 <__divsi3+0xfe>
 800ed44:	4601      	mov	r1, r0
 800ed46:	4152      	adcs	r2, r2
 800ed48:	4610      	mov	r0, r2
 800ed4a:	4770      	bx	lr
 800ed4c:	e05d      	b.n	800ee0a <__divsi3+0x1c2>
 800ed4e:	0fca      	lsrs	r2, r1, #31
 800ed50:	d000      	beq.n	800ed54 <__divsi3+0x10c>
 800ed52:	4249      	negs	r1, r1
 800ed54:	1003      	asrs	r3, r0, #32
 800ed56:	d300      	bcc.n	800ed5a <__divsi3+0x112>
 800ed58:	4240      	negs	r0, r0
 800ed5a:	4053      	eors	r3, r2
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	469c      	mov	ip, r3
 800ed60:	0903      	lsrs	r3, r0, #4
 800ed62:	428b      	cmp	r3, r1
 800ed64:	d32d      	bcc.n	800edc2 <__divsi3+0x17a>
 800ed66:	0a03      	lsrs	r3, r0, #8
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	d312      	bcc.n	800ed92 <__divsi3+0x14a>
 800ed6c:	22fc      	movs	r2, #252	; 0xfc
 800ed6e:	0189      	lsls	r1, r1, #6
 800ed70:	ba12      	rev	r2, r2
 800ed72:	0a03      	lsrs	r3, r0, #8
 800ed74:	428b      	cmp	r3, r1
 800ed76:	d30c      	bcc.n	800ed92 <__divsi3+0x14a>
 800ed78:	0189      	lsls	r1, r1, #6
 800ed7a:	1192      	asrs	r2, r2, #6
 800ed7c:	428b      	cmp	r3, r1
 800ed7e:	d308      	bcc.n	800ed92 <__divsi3+0x14a>
 800ed80:	0189      	lsls	r1, r1, #6
 800ed82:	1192      	asrs	r2, r2, #6
 800ed84:	428b      	cmp	r3, r1
 800ed86:	d304      	bcc.n	800ed92 <__divsi3+0x14a>
 800ed88:	0189      	lsls	r1, r1, #6
 800ed8a:	d03a      	beq.n	800ee02 <__divsi3+0x1ba>
 800ed8c:	1192      	asrs	r2, r2, #6
 800ed8e:	e000      	b.n	800ed92 <__divsi3+0x14a>
 800ed90:	0989      	lsrs	r1, r1, #6
 800ed92:	09c3      	lsrs	r3, r0, #7
 800ed94:	428b      	cmp	r3, r1
 800ed96:	d301      	bcc.n	800ed9c <__divsi3+0x154>
 800ed98:	01cb      	lsls	r3, r1, #7
 800ed9a:	1ac0      	subs	r0, r0, r3
 800ed9c:	4152      	adcs	r2, r2
 800ed9e:	0983      	lsrs	r3, r0, #6
 800eda0:	428b      	cmp	r3, r1
 800eda2:	d301      	bcc.n	800eda8 <__divsi3+0x160>
 800eda4:	018b      	lsls	r3, r1, #6
 800eda6:	1ac0      	subs	r0, r0, r3
 800eda8:	4152      	adcs	r2, r2
 800edaa:	0943      	lsrs	r3, r0, #5
 800edac:	428b      	cmp	r3, r1
 800edae:	d301      	bcc.n	800edb4 <__divsi3+0x16c>
 800edb0:	014b      	lsls	r3, r1, #5
 800edb2:	1ac0      	subs	r0, r0, r3
 800edb4:	4152      	adcs	r2, r2
 800edb6:	0903      	lsrs	r3, r0, #4
 800edb8:	428b      	cmp	r3, r1
 800edba:	d301      	bcc.n	800edc0 <__divsi3+0x178>
 800edbc:	010b      	lsls	r3, r1, #4
 800edbe:	1ac0      	subs	r0, r0, r3
 800edc0:	4152      	adcs	r2, r2
 800edc2:	08c3      	lsrs	r3, r0, #3
 800edc4:	428b      	cmp	r3, r1
 800edc6:	d301      	bcc.n	800edcc <__divsi3+0x184>
 800edc8:	00cb      	lsls	r3, r1, #3
 800edca:	1ac0      	subs	r0, r0, r3
 800edcc:	4152      	adcs	r2, r2
 800edce:	0883      	lsrs	r3, r0, #2
 800edd0:	428b      	cmp	r3, r1
 800edd2:	d301      	bcc.n	800edd8 <__divsi3+0x190>
 800edd4:	008b      	lsls	r3, r1, #2
 800edd6:	1ac0      	subs	r0, r0, r3
 800edd8:	4152      	adcs	r2, r2
 800edda:	d2d9      	bcs.n	800ed90 <__divsi3+0x148>
 800eddc:	0843      	lsrs	r3, r0, #1
 800edde:	428b      	cmp	r3, r1
 800ede0:	d301      	bcc.n	800ede6 <__divsi3+0x19e>
 800ede2:	004b      	lsls	r3, r1, #1
 800ede4:	1ac0      	subs	r0, r0, r3
 800ede6:	4152      	adcs	r2, r2
 800ede8:	1a41      	subs	r1, r0, r1
 800edea:	d200      	bcs.n	800edee <__divsi3+0x1a6>
 800edec:	4601      	mov	r1, r0
 800edee:	4663      	mov	r3, ip
 800edf0:	4152      	adcs	r2, r2
 800edf2:	105b      	asrs	r3, r3, #1
 800edf4:	4610      	mov	r0, r2
 800edf6:	d301      	bcc.n	800edfc <__divsi3+0x1b4>
 800edf8:	4240      	negs	r0, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d500      	bpl.n	800ee00 <__divsi3+0x1b8>
 800edfe:	4249      	negs	r1, r1
 800ee00:	4770      	bx	lr
 800ee02:	4663      	mov	r3, ip
 800ee04:	105b      	asrs	r3, r3, #1
 800ee06:	d300      	bcc.n	800ee0a <__divsi3+0x1c2>
 800ee08:	4240      	negs	r0, r0
 800ee0a:	b501      	push	{r0, lr}
 800ee0c:	2000      	movs	r0, #0
 800ee0e:	f000 f805 	bl	800ee1c <__aeabi_idiv0>
 800ee12:	bd02      	pop	{r1, pc}

0800ee14 <__aeabi_idivmod>:
 800ee14:	2900      	cmp	r1, #0
 800ee16:	d0f8      	beq.n	800ee0a <__divsi3+0x1c2>
 800ee18:	e716      	b.n	800ec48 <__divsi3>
 800ee1a:	4770      	bx	lr

0800ee1c <__aeabi_idiv0>:
 800ee1c:	4770      	bx	lr
 800ee1e:	46c0      	nop			; (mov r8, r8)

0800ee20 <__aeabi_cdrcmple>:
 800ee20:	4684      	mov	ip, r0
 800ee22:	1c10      	adds	r0, r2, #0
 800ee24:	4662      	mov	r2, ip
 800ee26:	468c      	mov	ip, r1
 800ee28:	1c19      	adds	r1, r3, #0
 800ee2a:	4663      	mov	r3, ip
 800ee2c:	e000      	b.n	800ee30 <__aeabi_cdcmpeq>
 800ee2e:	46c0      	nop			; (mov r8, r8)

0800ee30 <__aeabi_cdcmpeq>:
 800ee30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee32:	f001 f9c9 	bl	80101c8 <__ledf2>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d401      	bmi.n	800ee3e <__aeabi_cdcmpeq+0xe>
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	42c8      	cmn	r0, r1
 800ee3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800ee40 <__aeabi_dcmpeq>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	f001 f921 	bl	8010088 <__eqdf2>
 800ee46:	4240      	negs	r0, r0
 800ee48:	3001      	adds	r0, #1
 800ee4a:	bd10      	pop	{r4, pc}

0800ee4c <__aeabi_dcmplt>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	f001 f9bb 	bl	80101c8 <__ledf2>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	db01      	blt.n	800ee5a <__aeabi_dcmplt+0xe>
 800ee56:	2000      	movs	r0, #0
 800ee58:	bd10      	pop	{r4, pc}
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	bd10      	pop	{r4, pc}
 800ee5e:	46c0      	nop			; (mov r8, r8)

0800ee60 <__aeabi_dcmple>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	f001 f9b1 	bl	80101c8 <__ledf2>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	dd01      	ble.n	800ee6e <__aeabi_dcmple+0xe>
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	bd10      	pop	{r4, pc}
 800ee6e:	2001      	movs	r0, #1
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	46c0      	nop			; (mov r8, r8)

0800ee74 <__aeabi_dcmpgt>:
 800ee74:	b510      	push	{r4, lr}
 800ee76:	f001 f943 	bl	8010100 <__gedf2>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	dc01      	bgt.n	800ee82 <__aeabi_dcmpgt+0xe>
 800ee7e:	2000      	movs	r0, #0
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	2001      	movs	r0, #1
 800ee84:	bd10      	pop	{r4, pc}
 800ee86:	46c0      	nop			; (mov r8, r8)

0800ee88 <__aeabi_dcmpge>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	f001 f939 	bl	8010100 <__gedf2>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	da01      	bge.n	800ee96 <__aeabi_dcmpge+0xe>
 800ee92:	2000      	movs	r0, #0
 800ee94:	bd10      	pop	{r4, pc}
 800ee96:	2001      	movs	r0, #1
 800ee98:	bd10      	pop	{r4, pc}
 800ee9a:	46c0      	nop			; (mov r8, r8)

0800ee9c <__aeabi_cfrcmple>:
 800ee9c:	4684      	mov	ip, r0
 800ee9e:	1c08      	adds	r0, r1, #0
 800eea0:	4661      	mov	r1, ip
 800eea2:	e7ff      	b.n	800eea4 <__aeabi_cfcmpeq>

0800eea4 <__aeabi_cfcmpeq>:
 800eea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea6:	f000 f9c1 	bl	800f22c <__lesf2>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d401      	bmi.n	800eeb2 <__aeabi_cfcmpeq+0xe>
 800eeae:	2100      	movs	r1, #0
 800eeb0:	42c8      	cmn	r0, r1
 800eeb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800eeb4 <__aeabi_fcmpeq>:
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	f000 f943 	bl	800f140 <__eqsf2>
 800eeba:	4240      	negs	r0, r0
 800eebc:	3001      	adds	r0, #1
 800eebe:	bd10      	pop	{r4, pc}

0800eec0 <__aeabi_fcmplt>:
 800eec0:	b510      	push	{r4, lr}
 800eec2:	f000 f9b3 	bl	800f22c <__lesf2>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	db01      	blt.n	800eece <__aeabi_fcmplt+0xe>
 800eeca:	2000      	movs	r0, #0
 800eecc:	bd10      	pop	{r4, pc}
 800eece:	2001      	movs	r0, #1
 800eed0:	bd10      	pop	{r4, pc}
 800eed2:	46c0      	nop			; (mov r8, r8)

0800eed4 <__aeabi_fcmple>:
 800eed4:	b510      	push	{r4, lr}
 800eed6:	f000 f9a9 	bl	800f22c <__lesf2>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	dd01      	ble.n	800eee2 <__aeabi_fcmple+0xe>
 800eede:	2000      	movs	r0, #0
 800eee0:	bd10      	pop	{r4, pc}
 800eee2:	2001      	movs	r0, #1
 800eee4:	bd10      	pop	{r4, pc}
 800eee6:	46c0      	nop			; (mov r8, r8)

0800eee8 <__aeabi_fcmpgt>:
 800eee8:	b510      	push	{r4, lr}
 800eeea:	f000 f951 	bl	800f190 <__gesf2>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	dc01      	bgt.n	800eef6 <__aeabi_fcmpgt+0xe>
 800eef2:	2000      	movs	r0, #0
 800eef4:	bd10      	pop	{r4, pc}
 800eef6:	2001      	movs	r0, #1
 800eef8:	bd10      	pop	{r4, pc}
 800eefa:	46c0      	nop			; (mov r8, r8)

0800eefc <__aeabi_fcmpge>:
 800eefc:	b510      	push	{r4, lr}
 800eefe:	f000 f947 	bl	800f190 <__gesf2>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	da01      	bge.n	800ef0a <__aeabi_fcmpge+0xe>
 800ef06:	2000      	movs	r0, #0
 800ef08:	bd10      	pop	{r4, pc}
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	bd10      	pop	{r4, pc}
 800ef0e:	46c0      	nop			; (mov r8, r8)

0800ef10 <__aeabi_uldivmod>:
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d111      	bne.n	800ef38 <__aeabi_uldivmod+0x28>
 800ef14:	2a00      	cmp	r2, #0
 800ef16:	d10f      	bne.n	800ef38 <__aeabi_uldivmod+0x28>
 800ef18:	2900      	cmp	r1, #0
 800ef1a:	d100      	bne.n	800ef1e <__aeabi_uldivmod+0xe>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d002      	beq.n	800ef26 <__aeabi_uldivmod+0x16>
 800ef20:	2100      	movs	r1, #0
 800ef22:	43c9      	mvns	r1, r1
 800ef24:	1c08      	adds	r0, r1, #0
 800ef26:	b407      	push	{r0, r1, r2}
 800ef28:	4802      	ldr	r0, [pc, #8]	; (800ef34 <__aeabi_uldivmod+0x24>)
 800ef2a:	a102      	add	r1, pc, #8	; (adr r1, 800ef34 <__aeabi_uldivmod+0x24>)
 800ef2c:	1840      	adds	r0, r0, r1
 800ef2e:	9002      	str	r0, [sp, #8]
 800ef30:	bd03      	pop	{r0, r1, pc}
 800ef32:	46c0      	nop			; (mov r8, r8)
 800ef34:	fffffee9 	.word	0xfffffee9
 800ef38:	b403      	push	{r0, r1}
 800ef3a:	4668      	mov	r0, sp
 800ef3c:	b501      	push	{r0, lr}
 800ef3e:	9802      	ldr	r0, [sp, #8]
 800ef40:	f000 f83c 	bl	800efbc <__udivmoddi4>
 800ef44:	9b01      	ldr	r3, [sp, #4]
 800ef46:	469e      	mov	lr, r3
 800ef48:	b002      	add	sp, #8
 800ef4a:	bc0c      	pop	{r2, r3}
 800ef4c:	4770      	bx	lr
 800ef4e:	46c0      	nop			; (mov r8, r8)

0800ef50 <__aeabi_f2uiz>:
 800ef50:	219e      	movs	r1, #158	; 0x9e
 800ef52:	b510      	push	{r4, lr}
 800ef54:	05c9      	lsls	r1, r1, #23
 800ef56:	1c04      	adds	r4, r0, #0
 800ef58:	f7ff ffd0 	bl	800eefc <__aeabi_fcmpge>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d103      	bne.n	800ef68 <__aeabi_f2uiz+0x18>
 800ef60:	1c20      	adds	r0, r4, #0
 800ef62:	f000 f9c9 	bl	800f2f8 <__aeabi_f2iz>
 800ef66:	bd10      	pop	{r4, pc}
 800ef68:	219e      	movs	r1, #158	; 0x9e
 800ef6a:	1c20      	adds	r0, r4, #0
 800ef6c:	05c9      	lsls	r1, r1, #23
 800ef6e:	f7ff fbe1 	bl	800e734 <__aeabi_fsub>
 800ef72:	f000 f9c1 	bl	800f2f8 <__aeabi_f2iz>
 800ef76:	2380      	movs	r3, #128	; 0x80
 800ef78:	061b      	lsls	r3, r3, #24
 800ef7a:	469c      	mov	ip, r3
 800ef7c:	4460      	add	r0, ip
 800ef7e:	e7f2      	b.n	800ef66 <__aeabi_f2uiz+0x16>

0800ef80 <__aeabi_d2uiz>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	2200      	movs	r2, #0
 800ef84:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <__aeabi_d2uiz+0x38>)
 800ef86:	0004      	movs	r4, r0
 800ef88:	000d      	movs	r5, r1
 800ef8a:	f7ff ff7d 	bl	800ee88 <__aeabi_dcmpge>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d104      	bne.n	800ef9c <__aeabi_d2uiz+0x1c>
 800ef92:	0020      	movs	r0, r4
 800ef94:	0029      	movs	r1, r5
 800ef96:	f001 ff55 	bl	8010e44 <__aeabi_d2iz>
 800ef9a:	bd70      	pop	{r4, r5, r6, pc}
 800ef9c:	4b06      	ldr	r3, [pc, #24]	; (800efb8 <__aeabi_d2uiz+0x38>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	0020      	movs	r0, r4
 800efa2:	0029      	movs	r1, r5
 800efa4:	f001 fbea 	bl	801077c <__aeabi_dsub>
 800efa8:	f001 ff4c 	bl	8010e44 <__aeabi_d2iz>
 800efac:	2380      	movs	r3, #128	; 0x80
 800efae:	061b      	lsls	r3, r3, #24
 800efb0:	469c      	mov	ip, r3
 800efb2:	4460      	add	r0, ip
 800efb4:	e7f1      	b.n	800ef9a <__aeabi_d2uiz+0x1a>
 800efb6:	46c0      	nop			; (mov r8, r8)
 800efb8:	41e00000 	.word	0x41e00000

0800efbc <__udivmoddi4>:
 800efbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efbe:	464f      	mov	r7, r9
 800efc0:	4646      	mov	r6, r8
 800efc2:	46d6      	mov	lr, sl
 800efc4:	b5c0      	push	{r6, r7, lr}
 800efc6:	0004      	movs	r4, r0
 800efc8:	b082      	sub	sp, #8
 800efca:	000d      	movs	r5, r1
 800efcc:	4691      	mov	r9, r2
 800efce:	4698      	mov	r8, r3
 800efd0:	428b      	cmp	r3, r1
 800efd2:	d82f      	bhi.n	800f034 <__udivmoddi4+0x78>
 800efd4:	d02c      	beq.n	800f030 <__udivmoddi4+0x74>
 800efd6:	4641      	mov	r1, r8
 800efd8:	4648      	mov	r0, r9
 800efda:	f002 f8ab 	bl	8011134 <__clzdi2>
 800efde:	0029      	movs	r1, r5
 800efe0:	0006      	movs	r6, r0
 800efe2:	0020      	movs	r0, r4
 800efe4:	f002 f8a6 	bl	8011134 <__clzdi2>
 800efe8:	1a33      	subs	r3, r6, r0
 800efea:	469c      	mov	ip, r3
 800efec:	3b20      	subs	r3, #32
 800efee:	469a      	mov	sl, r3
 800eff0:	d500      	bpl.n	800eff4 <__udivmoddi4+0x38>
 800eff2:	e076      	b.n	800f0e2 <__udivmoddi4+0x126>
 800eff4:	464b      	mov	r3, r9
 800eff6:	4652      	mov	r2, sl
 800eff8:	4093      	lsls	r3, r2
 800effa:	001f      	movs	r7, r3
 800effc:	464b      	mov	r3, r9
 800effe:	4662      	mov	r2, ip
 800f000:	4093      	lsls	r3, r2
 800f002:	001e      	movs	r6, r3
 800f004:	42af      	cmp	r7, r5
 800f006:	d828      	bhi.n	800f05a <__udivmoddi4+0x9e>
 800f008:	d025      	beq.n	800f056 <__udivmoddi4+0x9a>
 800f00a:	4653      	mov	r3, sl
 800f00c:	1ba4      	subs	r4, r4, r6
 800f00e:	41bd      	sbcs	r5, r7
 800f010:	2b00      	cmp	r3, #0
 800f012:	da00      	bge.n	800f016 <__udivmoddi4+0x5a>
 800f014:	e07b      	b.n	800f10e <__udivmoddi4+0x152>
 800f016:	2200      	movs	r2, #0
 800f018:	2300      	movs	r3, #0
 800f01a:	9200      	str	r2, [sp, #0]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	2301      	movs	r3, #1
 800f020:	4652      	mov	r2, sl
 800f022:	4093      	lsls	r3, r2
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	2301      	movs	r3, #1
 800f028:	4662      	mov	r2, ip
 800f02a:	4093      	lsls	r3, r2
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	e018      	b.n	800f062 <__udivmoddi4+0xa6>
 800f030:	4282      	cmp	r2, r0
 800f032:	d9d0      	bls.n	800efd6 <__udivmoddi4+0x1a>
 800f034:	2200      	movs	r2, #0
 800f036:	2300      	movs	r3, #0
 800f038:	9200      	str	r2, [sp, #0]
 800f03a:	9301      	str	r3, [sp, #4]
 800f03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <__udivmoddi4+0x8a>
 800f042:	601c      	str	r4, [r3, #0]
 800f044:	605d      	str	r5, [r3, #4]
 800f046:	9800      	ldr	r0, [sp, #0]
 800f048:	9901      	ldr	r1, [sp, #4]
 800f04a:	b002      	add	sp, #8
 800f04c:	bc1c      	pop	{r2, r3, r4}
 800f04e:	4690      	mov	r8, r2
 800f050:	4699      	mov	r9, r3
 800f052:	46a2      	mov	sl, r4
 800f054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f056:	42a3      	cmp	r3, r4
 800f058:	d9d7      	bls.n	800f00a <__udivmoddi4+0x4e>
 800f05a:	2200      	movs	r2, #0
 800f05c:	2300      	movs	r3, #0
 800f05e:	9200      	str	r2, [sp, #0]
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	4663      	mov	r3, ip
 800f064:	2b00      	cmp	r3, #0
 800f066:	d0e9      	beq.n	800f03c <__udivmoddi4+0x80>
 800f068:	07fb      	lsls	r3, r7, #31
 800f06a:	4698      	mov	r8, r3
 800f06c:	4641      	mov	r1, r8
 800f06e:	0872      	lsrs	r2, r6, #1
 800f070:	430a      	orrs	r2, r1
 800f072:	087b      	lsrs	r3, r7, #1
 800f074:	4666      	mov	r6, ip
 800f076:	e00e      	b.n	800f096 <__udivmoddi4+0xda>
 800f078:	42ab      	cmp	r3, r5
 800f07a:	d101      	bne.n	800f080 <__udivmoddi4+0xc4>
 800f07c:	42a2      	cmp	r2, r4
 800f07e:	d80c      	bhi.n	800f09a <__udivmoddi4+0xde>
 800f080:	1aa4      	subs	r4, r4, r2
 800f082:	419d      	sbcs	r5, r3
 800f084:	2001      	movs	r0, #1
 800f086:	1924      	adds	r4, r4, r4
 800f088:	416d      	adcs	r5, r5
 800f08a:	2100      	movs	r1, #0
 800f08c:	3e01      	subs	r6, #1
 800f08e:	1824      	adds	r4, r4, r0
 800f090:	414d      	adcs	r5, r1
 800f092:	2e00      	cmp	r6, #0
 800f094:	d006      	beq.n	800f0a4 <__udivmoddi4+0xe8>
 800f096:	42ab      	cmp	r3, r5
 800f098:	d9ee      	bls.n	800f078 <__udivmoddi4+0xbc>
 800f09a:	3e01      	subs	r6, #1
 800f09c:	1924      	adds	r4, r4, r4
 800f09e:	416d      	adcs	r5, r5
 800f0a0:	2e00      	cmp	r6, #0
 800f0a2:	d1f8      	bne.n	800f096 <__udivmoddi4+0xda>
 800f0a4:	9800      	ldr	r0, [sp, #0]
 800f0a6:	9901      	ldr	r1, [sp, #4]
 800f0a8:	4653      	mov	r3, sl
 800f0aa:	1900      	adds	r0, r0, r4
 800f0ac:	4169      	adcs	r1, r5
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	db23      	blt.n	800f0fa <__udivmoddi4+0x13e>
 800f0b2:	002b      	movs	r3, r5
 800f0b4:	4652      	mov	r2, sl
 800f0b6:	40d3      	lsrs	r3, r2
 800f0b8:	002a      	movs	r2, r5
 800f0ba:	4664      	mov	r4, ip
 800f0bc:	40e2      	lsrs	r2, r4
 800f0be:	001c      	movs	r4, r3
 800f0c0:	4653      	mov	r3, sl
 800f0c2:	0015      	movs	r5, r2
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	db2d      	blt.n	800f124 <__udivmoddi4+0x168>
 800f0c8:	0026      	movs	r6, r4
 800f0ca:	4657      	mov	r7, sl
 800f0cc:	40be      	lsls	r6, r7
 800f0ce:	0033      	movs	r3, r6
 800f0d0:	0026      	movs	r6, r4
 800f0d2:	4667      	mov	r7, ip
 800f0d4:	40be      	lsls	r6, r7
 800f0d6:	0032      	movs	r2, r6
 800f0d8:	1a80      	subs	r0, r0, r2
 800f0da:	4199      	sbcs	r1, r3
 800f0dc:	9000      	str	r0, [sp, #0]
 800f0de:	9101      	str	r1, [sp, #4]
 800f0e0:	e7ac      	b.n	800f03c <__udivmoddi4+0x80>
 800f0e2:	4662      	mov	r2, ip
 800f0e4:	2320      	movs	r3, #32
 800f0e6:	1a9b      	subs	r3, r3, r2
 800f0e8:	464a      	mov	r2, r9
 800f0ea:	40da      	lsrs	r2, r3
 800f0ec:	4661      	mov	r1, ip
 800f0ee:	0013      	movs	r3, r2
 800f0f0:	4642      	mov	r2, r8
 800f0f2:	408a      	lsls	r2, r1
 800f0f4:	0017      	movs	r7, r2
 800f0f6:	431f      	orrs	r7, r3
 800f0f8:	e780      	b.n	800effc <__udivmoddi4+0x40>
 800f0fa:	4662      	mov	r2, ip
 800f0fc:	2320      	movs	r3, #32
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	002a      	movs	r2, r5
 800f102:	4666      	mov	r6, ip
 800f104:	409a      	lsls	r2, r3
 800f106:	0023      	movs	r3, r4
 800f108:	40f3      	lsrs	r3, r6
 800f10a:	4313      	orrs	r3, r2
 800f10c:	e7d4      	b.n	800f0b8 <__udivmoddi4+0xfc>
 800f10e:	4662      	mov	r2, ip
 800f110:	2320      	movs	r3, #32
 800f112:	2100      	movs	r1, #0
 800f114:	1a9b      	subs	r3, r3, r2
 800f116:	2200      	movs	r2, #0
 800f118:	9100      	str	r1, [sp, #0]
 800f11a:	9201      	str	r2, [sp, #4]
 800f11c:	2201      	movs	r2, #1
 800f11e:	40da      	lsrs	r2, r3
 800f120:	9201      	str	r2, [sp, #4]
 800f122:	e780      	b.n	800f026 <__udivmoddi4+0x6a>
 800f124:	2320      	movs	r3, #32
 800f126:	4662      	mov	r2, ip
 800f128:	0026      	movs	r6, r4
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	40de      	lsrs	r6, r3
 800f12e:	002f      	movs	r7, r5
 800f130:	46b0      	mov	r8, r6
 800f132:	4666      	mov	r6, ip
 800f134:	40b7      	lsls	r7, r6
 800f136:	4646      	mov	r6, r8
 800f138:	003b      	movs	r3, r7
 800f13a:	4333      	orrs	r3, r6
 800f13c:	e7c8      	b.n	800f0d0 <__udivmoddi4+0x114>
 800f13e:	46c0      	nop			; (mov r8, r8)

0800f140 <__eqsf2>:
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	0042      	lsls	r2, r0, #1
 800f144:	024e      	lsls	r6, r1, #9
 800f146:	004c      	lsls	r4, r1, #1
 800f148:	0245      	lsls	r5, r0, #9
 800f14a:	0a6d      	lsrs	r5, r5, #9
 800f14c:	0e12      	lsrs	r2, r2, #24
 800f14e:	0fc3      	lsrs	r3, r0, #31
 800f150:	0a76      	lsrs	r6, r6, #9
 800f152:	0e24      	lsrs	r4, r4, #24
 800f154:	0fc9      	lsrs	r1, r1, #31
 800f156:	2aff      	cmp	r2, #255	; 0xff
 800f158:	d00f      	beq.n	800f17a <__eqsf2+0x3a>
 800f15a:	2cff      	cmp	r4, #255	; 0xff
 800f15c:	d011      	beq.n	800f182 <__eqsf2+0x42>
 800f15e:	2001      	movs	r0, #1
 800f160:	42a2      	cmp	r2, r4
 800f162:	d000      	beq.n	800f166 <__eqsf2+0x26>
 800f164:	bd70      	pop	{r4, r5, r6, pc}
 800f166:	42b5      	cmp	r5, r6
 800f168:	d1fc      	bne.n	800f164 <__eqsf2+0x24>
 800f16a:	428b      	cmp	r3, r1
 800f16c:	d00d      	beq.n	800f18a <__eqsf2+0x4a>
 800f16e:	2a00      	cmp	r2, #0
 800f170:	d1f8      	bne.n	800f164 <__eqsf2+0x24>
 800f172:	0028      	movs	r0, r5
 800f174:	1e45      	subs	r5, r0, #1
 800f176:	41a8      	sbcs	r0, r5
 800f178:	e7f4      	b.n	800f164 <__eqsf2+0x24>
 800f17a:	2001      	movs	r0, #1
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	d1f1      	bne.n	800f164 <__eqsf2+0x24>
 800f180:	e7eb      	b.n	800f15a <__eqsf2+0x1a>
 800f182:	2001      	movs	r0, #1
 800f184:	2e00      	cmp	r6, #0
 800f186:	d1ed      	bne.n	800f164 <__eqsf2+0x24>
 800f188:	e7e9      	b.n	800f15e <__eqsf2+0x1e>
 800f18a:	2000      	movs	r0, #0
 800f18c:	e7ea      	b.n	800f164 <__eqsf2+0x24>
 800f18e:	46c0      	nop			; (mov r8, r8)

0800f190 <__gesf2>:
 800f190:	b570      	push	{r4, r5, r6, lr}
 800f192:	004a      	lsls	r2, r1, #1
 800f194:	024e      	lsls	r6, r1, #9
 800f196:	0245      	lsls	r5, r0, #9
 800f198:	0044      	lsls	r4, r0, #1
 800f19a:	0a6d      	lsrs	r5, r5, #9
 800f19c:	0e24      	lsrs	r4, r4, #24
 800f19e:	0fc3      	lsrs	r3, r0, #31
 800f1a0:	0a76      	lsrs	r6, r6, #9
 800f1a2:	0e12      	lsrs	r2, r2, #24
 800f1a4:	0fc9      	lsrs	r1, r1, #31
 800f1a6:	2cff      	cmp	r4, #255	; 0xff
 800f1a8:	d015      	beq.n	800f1d6 <__gesf2+0x46>
 800f1aa:	2aff      	cmp	r2, #255	; 0xff
 800f1ac:	d00e      	beq.n	800f1cc <__gesf2+0x3c>
 800f1ae:	2c00      	cmp	r4, #0
 800f1b0:	d115      	bne.n	800f1de <__gesf2+0x4e>
 800f1b2:	2a00      	cmp	r2, #0
 800f1b4:	d101      	bne.n	800f1ba <__gesf2+0x2a>
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	d01c      	beq.n	800f1f4 <__gesf2+0x64>
 800f1ba:	2d00      	cmp	r5, #0
 800f1bc:	d014      	beq.n	800f1e8 <__gesf2+0x58>
 800f1be:	428b      	cmp	r3, r1
 800f1c0:	d027      	beq.n	800f212 <__gesf2+0x82>
 800f1c2:	2002      	movs	r0, #2
 800f1c4:	3b01      	subs	r3, #1
 800f1c6:	4018      	ands	r0, r3
 800f1c8:	3801      	subs	r0, #1
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}
 800f1cc:	2e00      	cmp	r6, #0
 800f1ce:	d0ee      	beq.n	800f1ae <__gesf2+0x1e>
 800f1d0:	2002      	movs	r0, #2
 800f1d2:	4240      	negs	r0, r0
 800f1d4:	e7f9      	b.n	800f1ca <__gesf2+0x3a>
 800f1d6:	2d00      	cmp	r5, #0
 800f1d8:	d1fa      	bne.n	800f1d0 <__gesf2+0x40>
 800f1da:	2aff      	cmp	r2, #255	; 0xff
 800f1dc:	d00e      	beq.n	800f1fc <__gesf2+0x6c>
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	d10e      	bne.n	800f200 <__gesf2+0x70>
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	d0ed      	beq.n	800f1c2 <__gesf2+0x32>
 800f1e6:	e00b      	b.n	800f200 <__gesf2+0x70>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	3901      	subs	r1, #1
 800f1ec:	4399      	bics	r1, r3
 800f1ee:	0008      	movs	r0, r1
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	e7ea      	b.n	800f1ca <__gesf2+0x3a>
 800f1f4:	2000      	movs	r0, #0
 800f1f6:	2d00      	cmp	r5, #0
 800f1f8:	d0e7      	beq.n	800f1ca <__gesf2+0x3a>
 800f1fa:	e7e2      	b.n	800f1c2 <__gesf2+0x32>
 800f1fc:	2e00      	cmp	r6, #0
 800f1fe:	d1e7      	bne.n	800f1d0 <__gesf2+0x40>
 800f200:	428b      	cmp	r3, r1
 800f202:	d1de      	bne.n	800f1c2 <__gesf2+0x32>
 800f204:	4294      	cmp	r4, r2
 800f206:	dd05      	ble.n	800f214 <__gesf2+0x84>
 800f208:	2102      	movs	r1, #2
 800f20a:	1e58      	subs	r0, r3, #1
 800f20c:	4008      	ands	r0, r1
 800f20e:	3801      	subs	r0, #1
 800f210:	e7db      	b.n	800f1ca <__gesf2+0x3a>
 800f212:	2400      	movs	r4, #0
 800f214:	42a2      	cmp	r2, r4
 800f216:	dc04      	bgt.n	800f222 <__gesf2+0x92>
 800f218:	42b5      	cmp	r5, r6
 800f21a:	d8d2      	bhi.n	800f1c2 <__gesf2+0x32>
 800f21c:	2000      	movs	r0, #0
 800f21e:	42b5      	cmp	r5, r6
 800f220:	d2d3      	bcs.n	800f1ca <__gesf2+0x3a>
 800f222:	1e58      	subs	r0, r3, #1
 800f224:	2301      	movs	r3, #1
 800f226:	4398      	bics	r0, r3
 800f228:	3001      	adds	r0, #1
 800f22a:	e7ce      	b.n	800f1ca <__gesf2+0x3a>

0800f22c <__lesf2>:
 800f22c:	b530      	push	{r4, r5, lr}
 800f22e:	0042      	lsls	r2, r0, #1
 800f230:	0244      	lsls	r4, r0, #9
 800f232:	024d      	lsls	r5, r1, #9
 800f234:	0fc3      	lsrs	r3, r0, #31
 800f236:	0048      	lsls	r0, r1, #1
 800f238:	0a64      	lsrs	r4, r4, #9
 800f23a:	0e12      	lsrs	r2, r2, #24
 800f23c:	0a6d      	lsrs	r5, r5, #9
 800f23e:	0e00      	lsrs	r0, r0, #24
 800f240:	0fc9      	lsrs	r1, r1, #31
 800f242:	2aff      	cmp	r2, #255	; 0xff
 800f244:	d012      	beq.n	800f26c <__lesf2+0x40>
 800f246:	28ff      	cmp	r0, #255	; 0xff
 800f248:	d00c      	beq.n	800f264 <__lesf2+0x38>
 800f24a:	2a00      	cmp	r2, #0
 800f24c:	d112      	bne.n	800f274 <__lesf2+0x48>
 800f24e:	2800      	cmp	r0, #0
 800f250:	d119      	bne.n	800f286 <__lesf2+0x5a>
 800f252:	2d00      	cmp	r5, #0
 800f254:	d117      	bne.n	800f286 <__lesf2+0x5a>
 800f256:	2c00      	cmp	r4, #0
 800f258:	d02b      	beq.n	800f2b2 <__lesf2+0x86>
 800f25a:	2002      	movs	r0, #2
 800f25c:	3b01      	subs	r3, #1
 800f25e:	4018      	ands	r0, r3
 800f260:	3801      	subs	r0, #1
 800f262:	e026      	b.n	800f2b2 <__lesf2+0x86>
 800f264:	2d00      	cmp	r5, #0
 800f266:	d0f0      	beq.n	800f24a <__lesf2+0x1e>
 800f268:	2002      	movs	r0, #2
 800f26a:	e022      	b.n	800f2b2 <__lesf2+0x86>
 800f26c:	2c00      	cmp	r4, #0
 800f26e:	d1fb      	bne.n	800f268 <__lesf2+0x3c>
 800f270:	28ff      	cmp	r0, #255	; 0xff
 800f272:	d01f      	beq.n	800f2b4 <__lesf2+0x88>
 800f274:	2800      	cmp	r0, #0
 800f276:	d11f      	bne.n	800f2b8 <__lesf2+0x8c>
 800f278:	2d00      	cmp	r5, #0
 800f27a:	d11d      	bne.n	800f2b8 <__lesf2+0x8c>
 800f27c:	2002      	movs	r0, #2
 800f27e:	3b01      	subs	r3, #1
 800f280:	4018      	ands	r0, r3
 800f282:	3801      	subs	r0, #1
 800f284:	e015      	b.n	800f2b2 <__lesf2+0x86>
 800f286:	2c00      	cmp	r4, #0
 800f288:	d00e      	beq.n	800f2a8 <__lesf2+0x7c>
 800f28a:	428b      	cmp	r3, r1
 800f28c:	d1e5      	bne.n	800f25a <__lesf2+0x2e>
 800f28e:	2200      	movs	r2, #0
 800f290:	4290      	cmp	r0, r2
 800f292:	dc04      	bgt.n	800f29e <__lesf2+0x72>
 800f294:	42ac      	cmp	r4, r5
 800f296:	d8e0      	bhi.n	800f25a <__lesf2+0x2e>
 800f298:	2000      	movs	r0, #0
 800f29a:	42ac      	cmp	r4, r5
 800f29c:	d209      	bcs.n	800f2b2 <__lesf2+0x86>
 800f29e:	1e58      	subs	r0, r3, #1
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	4398      	bics	r0, r3
 800f2a4:	3001      	adds	r0, #1
 800f2a6:	e004      	b.n	800f2b2 <__lesf2+0x86>
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	3901      	subs	r1, #1
 800f2ac:	4399      	bics	r1, r3
 800f2ae:	0008      	movs	r0, r1
 800f2b0:	3001      	adds	r0, #1
 800f2b2:	bd30      	pop	{r4, r5, pc}
 800f2b4:	2d00      	cmp	r5, #0
 800f2b6:	d1d7      	bne.n	800f268 <__lesf2+0x3c>
 800f2b8:	428b      	cmp	r3, r1
 800f2ba:	d1ce      	bne.n	800f25a <__lesf2+0x2e>
 800f2bc:	4282      	cmp	r2, r0
 800f2be:	dde7      	ble.n	800f290 <__lesf2+0x64>
 800f2c0:	2102      	movs	r1, #2
 800f2c2:	1e58      	subs	r0, r3, #1
 800f2c4:	4008      	ands	r0, r1
 800f2c6:	3801      	subs	r0, #1
 800f2c8:	e7f3      	b.n	800f2b2 <__lesf2+0x86>
 800f2ca:	46c0      	nop			; (mov r8, r8)

0800f2cc <__aeabi_fcmpun>:
 800f2cc:	0242      	lsls	r2, r0, #9
 800f2ce:	024b      	lsls	r3, r1, #9
 800f2d0:	0040      	lsls	r0, r0, #1
 800f2d2:	0049      	lsls	r1, r1, #1
 800f2d4:	0a52      	lsrs	r2, r2, #9
 800f2d6:	0a5b      	lsrs	r3, r3, #9
 800f2d8:	0e09      	lsrs	r1, r1, #24
 800f2da:	0e00      	lsrs	r0, r0, #24
 800f2dc:	28ff      	cmp	r0, #255	; 0xff
 800f2de:	d006      	beq.n	800f2ee <__aeabi_fcmpun+0x22>
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	29ff      	cmp	r1, #255	; 0xff
 800f2e4:	d102      	bne.n	800f2ec <__aeabi_fcmpun+0x20>
 800f2e6:	0018      	movs	r0, r3
 800f2e8:	1e43      	subs	r3, r0, #1
 800f2ea:	4198      	sbcs	r0, r3
 800f2ec:	4770      	bx	lr
 800f2ee:	38fe      	subs	r0, #254	; 0xfe
 800f2f0:	2a00      	cmp	r2, #0
 800f2f2:	d1fb      	bne.n	800f2ec <__aeabi_fcmpun+0x20>
 800f2f4:	e7f4      	b.n	800f2e0 <__aeabi_fcmpun+0x14>
 800f2f6:	46c0      	nop			; (mov r8, r8)

0800f2f8 <__aeabi_f2iz>:
 800f2f8:	0241      	lsls	r1, r0, #9
 800f2fa:	0042      	lsls	r2, r0, #1
 800f2fc:	0fc3      	lsrs	r3, r0, #31
 800f2fe:	0a49      	lsrs	r1, r1, #9
 800f300:	0e12      	lsrs	r2, r2, #24
 800f302:	2000      	movs	r0, #0
 800f304:	2a7e      	cmp	r2, #126	; 0x7e
 800f306:	d90d      	bls.n	800f324 <__aeabi_f2iz+0x2c>
 800f308:	2a9d      	cmp	r2, #157	; 0x9d
 800f30a:	d80c      	bhi.n	800f326 <__aeabi_f2iz+0x2e>
 800f30c:	2080      	movs	r0, #128	; 0x80
 800f30e:	0400      	lsls	r0, r0, #16
 800f310:	4301      	orrs	r1, r0
 800f312:	2a95      	cmp	r2, #149	; 0x95
 800f314:	dc0a      	bgt.n	800f32c <__aeabi_f2iz+0x34>
 800f316:	2096      	movs	r0, #150	; 0x96
 800f318:	1a82      	subs	r2, r0, r2
 800f31a:	40d1      	lsrs	r1, r2
 800f31c:	4248      	negs	r0, r1
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d100      	bne.n	800f324 <__aeabi_f2iz+0x2c>
 800f322:	0008      	movs	r0, r1
 800f324:	4770      	bx	lr
 800f326:	4a03      	ldr	r2, [pc, #12]	; (800f334 <__aeabi_f2iz+0x3c>)
 800f328:	1898      	adds	r0, r3, r2
 800f32a:	e7fb      	b.n	800f324 <__aeabi_f2iz+0x2c>
 800f32c:	3a96      	subs	r2, #150	; 0x96
 800f32e:	4091      	lsls	r1, r2
 800f330:	e7f4      	b.n	800f31c <__aeabi_f2iz+0x24>
 800f332:	46c0      	nop			; (mov r8, r8)
 800f334:	7fffffff 	.word	0x7fffffff

0800f338 <__aeabi_i2f>:
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d03d      	beq.n	800f3ba <__aeabi_i2f+0x82>
 800f33e:	17c3      	asrs	r3, r0, #31
 800f340:	18c5      	adds	r5, r0, r3
 800f342:	405d      	eors	r5, r3
 800f344:	0fc4      	lsrs	r4, r0, #31
 800f346:	0028      	movs	r0, r5
 800f348:	f7ff fbb8 	bl	800eabc <__clzsi2>
 800f34c:	229e      	movs	r2, #158	; 0x9e
 800f34e:	1a12      	subs	r2, r2, r0
 800f350:	2a96      	cmp	r2, #150	; 0x96
 800f352:	dc07      	bgt.n	800f364 <__aeabi_i2f+0x2c>
 800f354:	b2d2      	uxtb	r2, r2
 800f356:	2808      	cmp	r0, #8
 800f358:	dd33      	ble.n	800f3c2 <__aeabi_i2f+0x8a>
 800f35a:	3808      	subs	r0, #8
 800f35c:	4085      	lsls	r5, r0
 800f35e:	0268      	lsls	r0, r5, #9
 800f360:	0a40      	lsrs	r0, r0, #9
 800f362:	e023      	b.n	800f3ac <__aeabi_i2f+0x74>
 800f364:	2a99      	cmp	r2, #153	; 0x99
 800f366:	dd0b      	ble.n	800f380 <__aeabi_i2f+0x48>
 800f368:	2305      	movs	r3, #5
 800f36a:	0029      	movs	r1, r5
 800f36c:	1a1b      	subs	r3, r3, r0
 800f36e:	40d9      	lsrs	r1, r3
 800f370:	0003      	movs	r3, r0
 800f372:	331b      	adds	r3, #27
 800f374:	409d      	lsls	r5, r3
 800f376:	002b      	movs	r3, r5
 800f378:	1e5d      	subs	r5, r3, #1
 800f37a:	41ab      	sbcs	r3, r5
 800f37c:	4319      	orrs	r1, r3
 800f37e:	000d      	movs	r5, r1
 800f380:	2805      	cmp	r0, #5
 800f382:	dd01      	ble.n	800f388 <__aeabi_i2f+0x50>
 800f384:	1f43      	subs	r3, r0, #5
 800f386:	409d      	lsls	r5, r3
 800f388:	002b      	movs	r3, r5
 800f38a:	490f      	ldr	r1, [pc, #60]	; (800f3c8 <__aeabi_i2f+0x90>)
 800f38c:	400b      	ands	r3, r1
 800f38e:	076e      	lsls	r6, r5, #29
 800f390:	d009      	beq.n	800f3a6 <__aeabi_i2f+0x6e>
 800f392:	260f      	movs	r6, #15
 800f394:	4035      	ands	r5, r6
 800f396:	2d04      	cmp	r5, #4
 800f398:	d005      	beq.n	800f3a6 <__aeabi_i2f+0x6e>
 800f39a:	3304      	adds	r3, #4
 800f39c:	015d      	lsls	r5, r3, #5
 800f39e:	d502      	bpl.n	800f3a6 <__aeabi_i2f+0x6e>
 800f3a0:	229f      	movs	r2, #159	; 0x9f
 800f3a2:	400b      	ands	r3, r1
 800f3a4:	1a12      	subs	r2, r2, r0
 800f3a6:	019b      	lsls	r3, r3, #6
 800f3a8:	0a58      	lsrs	r0, r3, #9
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	0240      	lsls	r0, r0, #9
 800f3ae:	05d2      	lsls	r2, r2, #23
 800f3b0:	0a40      	lsrs	r0, r0, #9
 800f3b2:	07e4      	lsls	r4, r4, #31
 800f3b4:	4310      	orrs	r0, r2
 800f3b6:	4320      	orrs	r0, r4
 800f3b8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ba:	2400      	movs	r4, #0
 800f3bc:	2200      	movs	r2, #0
 800f3be:	2000      	movs	r0, #0
 800f3c0:	e7f4      	b.n	800f3ac <__aeabi_i2f+0x74>
 800f3c2:	0268      	lsls	r0, r5, #9
 800f3c4:	0a40      	lsrs	r0, r0, #9
 800f3c6:	e7f1      	b.n	800f3ac <__aeabi_i2f+0x74>
 800f3c8:	fbffffff 	.word	0xfbffffff

0800f3cc <__aeabi_ui2f>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	1e04      	subs	r4, r0, #0
 800f3d0:	d034      	beq.n	800f43c <__aeabi_ui2f+0x70>
 800f3d2:	f7ff fb73 	bl	800eabc <__clzsi2>
 800f3d6:	229e      	movs	r2, #158	; 0x9e
 800f3d8:	1a12      	subs	r2, r2, r0
 800f3da:	2a96      	cmp	r2, #150	; 0x96
 800f3dc:	dc07      	bgt.n	800f3ee <__aeabi_ui2f+0x22>
 800f3de:	b2d2      	uxtb	r2, r2
 800f3e0:	2808      	cmp	r0, #8
 800f3e2:	dd2e      	ble.n	800f442 <__aeabi_ui2f+0x76>
 800f3e4:	3808      	subs	r0, #8
 800f3e6:	4084      	lsls	r4, r0
 800f3e8:	0260      	lsls	r0, r4, #9
 800f3ea:	0a40      	lsrs	r0, r0, #9
 800f3ec:	e021      	b.n	800f432 <__aeabi_ui2f+0x66>
 800f3ee:	2a99      	cmp	r2, #153	; 0x99
 800f3f0:	dd09      	ble.n	800f406 <__aeabi_ui2f+0x3a>
 800f3f2:	0003      	movs	r3, r0
 800f3f4:	0021      	movs	r1, r4
 800f3f6:	331b      	adds	r3, #27
 800f3f8:	4099      	lsls	r1, r3
 800f3fa:	1e4b      	subs	r3, r1, #1
 800f3fc:	4199      	sbcs	r1, r3
 800f3fe:	2305      	movs	r3, #5
 800f400:	1a1b      	subs	r3, r3, r0
 800f402:	40dc      	lsrs	r4, r3
 800f404:	430c      	orrs	r4, r1
 800f406:	2805      	cmp	r0, #5
 800f408:	dd01      	ble.n	800f40e <__aeabi_ui2f+0x42>
 800f40a:	1f43      	subs	r3, r0, #5
 800f40c:	409c      	lsls	r4, r3
 800f40e:	0023      	movs	r3, r4
 800f410:	490d      	ldr	r1, [pc, #52]	; (800f448 <__aeabi_ui2f+0x7c>)
 800f412:	400b      	ands	r3, r1
 800f414:	0765      	lsls	r5, r4, #29
 800f416:	d009      	beq.n	800f42c <__aeabi_ui2f+0x60>
 800f418:	250f      	movs	r5, #15
 800f41a:	402c      	ands	r4, r5
 800f41c:	2c04      	cmp	r4, #4
 800f41e:	d005      	beq.n	800f42c <__aeabi_ui2f+0x60>
 800f420:	3304      	adds	r3, #4
 800f422:	015c      	lsls	r4, r3, #5
 800f424:	d502      	bpl.n	800f42c <__aeabi_ui2f+0x60>
 800f426:	229f      	movs	r2, #159	; 0x9f
 800f428:	400b      	ands	r3, r1
 800f42a:	1a12      	subs	r2, r2, r0
 800f42c:	019b      	lsls	r3, r3, #6
 800f42e:	0a58      	lsrs	r0, r3, #9
 800f430:	b2d2      	uxtb	r2, r2
 800f432:	0240      	lsls	r0, r0, #9
 800f434:	05d2      	lsls	r2, r2, #23
 800f436:	0a40      	lsrs	r0, r0, #9
 800f438:	4310      	orrs	r0, r2
 800f43a:	bd70      	pop	{r4, r5, r6, pc}
 800f43c:	2200      	movs	r2, #0
 800f43e:	2000      	movs	r0, #0
 800f440:	e7f7      	b.n	800f432 <__aeabi_ui2f+0x66>
 800f442:	0260      	lsls	r0, r4, #9
 800f444:	0a40      	lsrs	r0, r0, #9
 800f446:	e7f4      	b.n	800f432 <__aeabi_ui2f+0x66>
 800f448:	fbffffff 	.word	0xfbffffff

0800f44c <__aeabi_dadd>:
 800f44c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f44e:	464f      	mov	r7, r9
 800f450:	4646      	mov	r6, r8
 800f452:	46d6      	mov	lr, sl
 800f454:	000c      	movs	r4, r1
 800f456:	0309      	lsls	r1, r1, #12
 800f458:	b5c0      	push	{r6, r7, lr}
 800f45a:	0a49      	lsrs	r1, r1, #9
 800f45c:	0f47      	lsrs	r7, r0, #29
 800f45e:	005e      	lsls	r6, r3, #1
 800f460:	4339      	orrs	r1, r7
 800f462:	031f      	lsls	r7, r3, #12
 800f464:	0fdb      	lsrs	r3, r3, #31
 800f466:	469c      	mov	ip, r3
 800f468:	0065      	lsls	r5, r4, #1
 800f46a:	0a7b      	lsrs	r3, r7, #9
 800f46c:	0f57      	lsrs	r7, r2, #29
 800f46e:	431f      	orrs	r7, r3
 800f470:	0d6d      	lsrs	r5, r5, #21
 800f472:	0fe4      	lsrs	r4, r4, #31
 800f474:	0d76      	lsrs	r6, r6, #21
 800f476:	46a1      	mov	r9, r4
 800f478:	00c0      	lsls	r0, r0, #3
 800f47a:	46b8      	mov	r8, r7
 800f47c:	00d2      	lsls	r2, r2, #3
 800f47e:	1bab      	subs	r3, r5, r6
 800f480:	4564      	cmp	r4, ip
 800f482:	d07b      	beq.n	800f57c <__aeabi_dadd+0x130>
 800f484:	2b00      	cmp	r3, #0
 800f486:	dd5f      	ble.n	800f548 <__aeabi_dadd+0xfc>
 800f488:	2e00      	cmp	r6, #0
 800f48a:	d000      	beq.n	800f48e <__aeabi_dadd+0x42>
 800f48c:	e0a4      	b.n	800f5d8 <__aeabi_dadd+0x18c>
 800f48e:	003e      	movs	r6, r7
 800f490:	4316      	orrs	r6, r2
 800f492:	d100      	bne.n	800f496 <__aeabi_dadd+0x4a>
 800f494:	e112      	b.n	800f6bc <__aeabi_dadd+0x270>
 800f496:	1e5e      	subs	r6, r3, #1
 800f498:	2e00      	cmp	r6, #0
 800f49a:	d000      	beq.n	800f49e <__aeabi_dadd+0x52>
 800f49c:	e19e      	b.n	800f7dc <__aeabi_dadd+0x390>
 800f49e:	1a87      	subs	r7, r0, r2
 800f4a0:	4643      	mov	r3, r8
 800f4a2:	42b8      	cmp	r0, r7
 800f4a4:	4180      	sbcs	r0, r0
 800f4a6:	2501      	movs	r5, #1
 800f4a8:	1ac9      	subs	r1, r1, r3
 800f4aa:	4240      	negs	r0, r0
 800f4ac:	1a09      	subs	r1, r1, r0
 800f4ae:	020b      	lsls	r3, r1, #8
 800f4b0:	d400      	bmi.n	800f4b4 <__aeabi_dadd+0x68>
 800f4b2:	e131      	b.n	800f718 <__aeabi_dadd+0x2cc>
 800f4b4:	0249      	lsls	r1, r1, #9
 800f4b6:	0a4e      	lsrs	r6, r1, #9
 800f4b8:	2e00      	cmp	r6, #0
 800f4ba:	d100      	bne.n	800f4be <__aeabi_dadd+0x72>
 800f4bc:	e16e      	b.n	800f79c <__aeabi_dadd+0x350>
 800f4be:	0030      	movs	r0, r6
 800f4c0:	f7ff fafc 	bl	800eabc <__clzsi2>
 800f4c4:	0003      	movs	r3, r0
 800f4c6:	3b08      	subs	r3, #8
 800f4c8:	2b1f      	cmp	r3, #31
 800f4ca:	dd00      	ble.n	800f4ce <__aeabi_dadd+0x82>
 800f4cc:	e161      	b.n	800f792 <__aeabi_dadd+0x346>
 800f4ce:	2220      	movs	r2, #32
 800f4d0:	0039      	movs	r1, r7
 800f4d2:	1ad2      	subs	r2, r2, r3
 800f4d4:	409e      	lsls	r6, r3
 800f4d6:	40d1      	lsrs	r1, r2
 800f4d8:	409f      	lsls	r7, r3
 800f4da:	430e      	orrs	r6, r1
 800f4dc:	429d      	cmp	r5, r3
 800f4de:	dd00      	ble.n	800f4e2 <__aeabi_dadd+0x96>
 800f4e0:	e151      	b.n	800f786 <__aeabi_dadd+0x33a>
 800f4e2:	1b5d      	subs	r5, r3, r5
 800f4e4:	1c6b      	adds	r3, r5, #1
 800f4e6:	2b1f      	cmp	r3, #31
 800f4e8:	dd00      	ble.n	800f4ec <__aeabi_dadd+0xa0>
 800f4ea:	e17c      	b.n	800f7e6 <__aeabi_dadd+0x39a>
 800f4ec:	2120      	movs	r1, #32
 800f4ee:	1ac9      	subs	r1, r1, r3
 800f4f0:	003d      	movs	r5, r7
 800f4f2:	0030      	movs	r0, r6
 800f4f4:	408f      	lsls	r7, r1
 800f4f6:	4088      	lsls	r0, r1
 800f4f8:	40dd      	lsrs	r5, r3
 800f4fa:	1e79      	subs	r1, r7, #1
 800f4fc:	418f      	sbcs	r7, r1
 800f4fe:	0031      	movs	r1, r6
 800f500:	2207      	movs	r2, #7
 800f502:	4328      	orrs	r0, r5
 800f504:	40d9      	lsrs	r1, r3
 800f506:	2500      	movs	r5, #0
 800f508:	4307      	orrs	r7, r0
 800f50a:	403a      	ands	r2, r7
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	d009      	beq.n	800f524 <__aeabi_dadd+0xd8>
 800f510:	230f      	movs	r3, #15
 800f512:	403b      	ands	r3, r7
 800f514:	2b04      	cmp	r3, #4
 800f516:	d005      	beq.n	800f524 <__aeabi_dadd+0xd8>
 800f518:	1d3b      	adds	r3, r7, #4
 800f51a:	42bb      	cmp	r3, r7
 800f51c:	41bf      	sbcs	r7, r7
 800f51e:	427f      	negs	r7, r7
 800f520:	19c9      	adds	r1, r1, r7
 800f522:	001f      	movs	r7, r3
 800f524:	020b      	lsls	r3, r1, #8
 800f526:	d400      	bmi.n	800f52a <__aeabi_dadd+0xde>
 800f528:	e226      	b.n	800f978 <__aeabi_dadd+0x52c>
 800f52a:	1c6a      	adds	r2, r5, #1
 800f52c:	4bc6      	ldr	r3, [pc, #792]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f52e:	0555      	lsls	r5, r2, #21
 800f530:	0d6d      	lsrs	r5, r5, #21
 800f532:	429a      	cmp	r2, r3
 800f534:	d100      	bne.n	800f538 <__aeabi_dadd+0xec>
 800f536:	e106      	b.n	800f746 <__aeabi_dadd+0x2fa>
 800f538:	4ac4      	ldr	r2, [pc, #784]	; (800f84c <__aeabi_dadd+0x400>)
 800f53a:	08ff      	lsrs	r7, r7, #3
 800f53c:	400a      	ands	r2, r1
 800f53e:	0753      	lsls	r3, r2, #29
 800f540:	0252      	lsls	r2, r2, #9
 800f542:	433b      	orrs	r3, r7
 800f544:	0b12      	lsrs	r2, r2, #12
 800f546:	e08e      	b.n	800f666 <__aeabi_dadd+0x21a>
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d000      	beq.n	800f54e <__aeabi_dadd+0x102>
 800f54c:	e0b8      	b.n	800f6c0 <__aeabi_dadd+0x274>
 800f54e:	1c6b      	adds	r3, r5, #1
 800f550:	055b      	lsls	r3, r3, #21
 800f552:	0d5b      	lsrs	r3, r3, #21
 800f554:	2b01      	cmp	r3, #1
 800f556:	dc00      	bgt.n	800f55a <__aeabi_dadd+0x10e>
 800f558:	e130      	b.n	800f7bc <__aeabi_dadd+0x370>
 800f55a:	1a87      	subs	r7, r0, r2
 800f55c:	4643      	mov	r3, r8
 800f55e:	42b8      	cmp	r0, r7
 800f560:	41b6      	sbcs	r6, r6
 800f562:	1acb      	subs	r3, r1, r3
 800f564:	4276      	negs	r6, r6
 800f566:	1b9e      	subs	r6, r3, r6
 800f568:	0233      	lsls	r3, r6, #8
 800f56a:	d500      	bpl.n	800f56e <__aeabi_dadd+0x122>
 800f56c:	e14c      	b.n	800f808 <__aeabi_dadd+0x3bc>
 800f56e:	003b      	movs	r3, r7
 800f570:	4333      	orrs	r3, r6
 800f572:	d1a1      	bne.n	800f4b8 <__aeabi_dadd+0x6c>
 800f574:	2200      	movs	r2, #0
 800f576:	2400      	movs	r4, #0
 800f578:	2500      	movs	r5, #0
 800f57a:	e070      	b.n	800f65e <__aeabi_dadd+0x212>
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	dc00      	bgt.n	800f582 <__aeabi_dadd+0x136>
 800f580:	e0e5      	b.n	800f74e <__aeabi_dadd+0x302>
 800f582:	2e00      	cmp	r6, #0
 800f584:	d100      	bne.n	800f588 <__aeabi_dadd+0x13c>
 800f586:	e083      	b.n	800f690 <__aeabi_dadd+0x244>
 800f588:	4eaf      	ldr	r6, [pc, #700]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f58a:	42b5      	cmp	r5, r6
 800f58c:	d060      	beq.n	800f650 <__aeabi_dadd+0x204>
 800f58e:	2680      	movs	r6, #128	; 0x80
 800f590:	0436      	lsls	r6, r6, #16
 800f592:	4337      	orrs	r7, r6
 800f594:	46b8      	mov	r8, r7
 800f596:	2b38      	cmp	r3, #56	; 0x38
 800f598:	dc00      	bgt.n	800f59c <__aeabi_dadd+0x150>
 800f59a:	e13e      	b.n	800f81a <__aeabi_dadd+0x3ce>
 800f59c:	4643      	mov	r3, r8
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	001f      	movs	r7, r3
 800f5a2:	1e7a      	subs	r2, r7, #1
 800f5a4:	4197      	sbcs	r7, r2
 800f5a6:	183f      	adds	r7, r7, r0
 800f5a8:	4287      	cmp	r7, r0
 800f5aa:	4180      	sbcs	r0, r0
 800f5ac:	4240      	negs	r0, r0
 800f5ae:	1809      	adds	r1, r1, r0
 800f5b0:	020b      	lsls	r3, r1, #8
 800f5b2:	d400      	bmi.n	800f5b6 <__aeabi_dadd+0x16a>
 800f5b4:	e0b0      	b.n	800f718 <__aeabi_dadd+0x2cc>
 800f5b6:	4ba4      	ldr	r3, [pc, #656]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	429d      	cmp	r5, r3
 800f5bc:	d100      	bne.n	800f5c0 <__aeabi_dadd+0x174>
 800f5be:	e0c3      	b.n	800f748 <__aeabi_dadd+0x2fc>
 800f5c0:	4aa2      	ldr	r2, [pc, #648]	; (800f84c <__aeabi_dadd+0x400>)
 800f5c2:	087b      	lsrs	r3, r7, #1
 800f5c4:	400a      	ands	r2, r1
 800f5c6:	2101      	movs	r1, #1
 800f5c8:	400f      	ands	r7, r1
 800f5ca:	431f      	orrs	r7, r3
 800f5cc:	0851      	lsrs	r1, r2, #1
 800f5ce:	07d3      	lsls	r3, r2, #31
 800f5d0:	2207      	movs	r2, #7
 800f5d2:	431f      	orrs	r7, r3
 800f5d4:	403a      	ands	r2, r7
 800f5d6:	e799      	b.n	800f50c <__aeabi_dadd+0xc0>
 800f5d8:	4e9b      	ldr	r6, [pc, #620]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f5da:	42b5      	cmp	r5, r6
 800f5dc:	d038      	beq.n	800f650 <__aeabi_dadd+0x204>
 800f5de:	2680      	movs	r6, #128	; 0x80
 800f5e0:	0436      	lsls	r6, r6, #16
 800f5e2:	4337      	orrs	r7, r6
 800f5e4:	46b8      	mov	r8, r7
 800f5e6:	2b38      	cmp	r3, #56	; 0x38
 800f5e8:	dd00      	ble.n	800f5ec <__aeabi_dadd+0x1a0>
 800f5ea:	e0dc      	b.n	800f7a6 <__aeabi_dadd+0x35a>
 800f5ec:	2b1f      	cmp	r3, #31
 800f5ee:	dc00      	bgt.n	800f5f2 <__aeabi_dadd+0x1a6>
 800f5f0:	e130      	b.n	800f854 <__aeabi_dadd+0x408>
 800f5f2:	001e      	movs	r6, r3
 800f5f4:	4647      	mov	r7, r8
 800f5f6:	3e20      	subs	r6, #32
 800f5f8:	40f7      	lsrs	r7, r6
 800f5fa:	46bc      	mov	ip, r7
 800f5fc:	2b20      	cmp	r3, #32
 800f5fe:	d004      	beq.n	800f60a <__aeabi_dadd+0x1be>
 800f600:	2640      	movs	r6, #64	; 0x40
 800f602:	1af3      	subs	r3, r6, r3
 800f604:	4646      	mov	r6, r8
 800f606:	409e      	lsls	r6, r3
 800f608:	4332      	orrs	r2, r6
 800f60a:	0017      	movs	r7, r2
 800f60c:	4663      	mov	r3, ip
 800f60e:	1e7a      	subs	r2, r7, #1
 800f610:	4197      	sbcs	r7, r2
 800f612:	431f      	orrs	r7, r3
 800f614:	e0cc      	b.n	800f7b0 <__aeabi_dadd+0x364>
 800f616:	2b00      	cmp	r3, #0
 800f618:	d100      	bne.n	800f61c <__aeabi_dadd+0x1d0>
 800f61a:	e204      	b.n	800fa26 <__aeabi_dadd+0x5da>
 800f61c:	4643      	mov	r3, r8
 800f61e:	4313      	orrs	r3, r2
 800f620:	d100      	bne.n	800f624 <__aeabi_dadd+0x1d8>
 800f622:	e159      	b.n	800f8d8 <__aeabi_dadd+0x48c>
 800f624:	074b      	lsls	r3, r1, #29
 800f626:	08c0      	lsrs	r0, r0, #3
 800f628:	4318      	orrs	r0, r3
 800f62a:	2380      	movs	r3, #128	; 0x80
 800f62c:	08c9      	lsrs	r1, r1, #3
 800f62e:	031b      	lsls	r3, r3, #12
 800f630:	4219      	tst	r1, r3
 800f632:	d008      	beq.n	800f646 <__aeabi_dadd+0x1fa>
 800f634:	4645      	mov	r5, r8
 800f636:	08ed      	lsrs	r5, r5, #3
 800f638:	421d      	tst	r5, r3
 800f63a:	d104      	bne.n	800f646 <__aeabi_dadd+0x1fa>
 800f63c:	4643      	mov	r3, r8
 800f63e:	08d0      	lsrs	r0, r2, #3
 800f640:	0759      	lsls	r1, r3, #29
 800f642:	4308      	orrs	r0, r1
 800f644:	0029      	movs	r1, r5
 800f646:	0f42      	lsrs	r2, r0, #29
 800f648:	00c9      	lsls	r1, r1, #3
 800f64a:	4d7f      	ldr	r5, [pc, #508]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f64c:	4311      	orrs	r1, r2
 800f64e:	00c0      	lsls	r0, r0, #3
 800f650:	074b      	lsls	r3, r1, #29
 800f652:	08ca      	lsrs	r2, r1, #3
 800f654:	497c      	ldr	r1, [pc, #496]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f656:	08c0      	lsrs	r0, r0, #3
 800f658:	4303      	orrs	r3, r0
 800f65a:	428d      	cmp	r5, r1
 800f65c:	d068      	beq.n	800f730 <__aeabi_dadd+0x2e4>
 800f65e:	0312      	lsls	r2, r2, #12
 800f660:	056d      	lsls	r5, r5, #21
 800f662:	0b12      	lsrs	r2, r2, #12
 800f664:	0d6d      	lsrs	r5, r5, #21
 800f666:	2100      	movs	r1, #0
 800f668:	0312      	lsls	r2, r2, #12
 800f66a:	0018      	movs	r0, r3
 800f66c:	0b13      	lsrs	r3, r2, #12
 800f66e:	0d0a      	lsrs	r2, r1, #20
 800f670:	0512      	lsls	r2, r2, #20
 800f672:	431a      	orrs	r2, r3
 800f674:	4b76      	ldr	r3, [pc, #472]	; (800f850 <__aeabi_dadd+0x404>)
 800f676:	052d      	lsls	r5, r5, #20
 800f678:	4013      	ands	r3, r2
 800f67a:	432b      	orrs	r3, r5
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	07e4      	lsls	r4, r4, #31
 800f680:	085b      	lsrs	r3, r3, #1
 800f682:	4323      	orrs	r3, r4
 800f684:	0019      	movs	r1, r3
 800f686:	bc1c      	pop	{r2, r3, r4}
 800f688:	4690      	mov	r8, r2
 800f68a:	4699      	mov	r9, r3
 800f68c:	46a2      	mov	sl, r4
 800f68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f690:	003e      	movs	r6, r7
 800f692:	4316      	orrs	r6, r2
 800f694:	d012      	beq.n	800f6bc <__aeabi_dadd+0x270>
 800f696:	1e5e      	subs	r6, r3, #1
 800f698:	2e00      	cmp	r6, #0
 800f69a:	d000      	beq.n	800f69e <__aeabi_dadd+0x252>
 800f69c:	e100      	b.n	800f8a0 <__aeabi_dadd+0x454>
 800f69e:	1887      	adds	r7, r0, r2
 800f6a0:	4287      	cmp	r7, r0
 800f6a2:	4180      	sbcs	r0, r0
 800f6a4:	4441      	add	r1, r8
 800f6a6:	4240      	negs	r0, r0
 800f6a8:	1809      	adds	r1, r1, r0
 800f6aa:	2501      	movs	r5, #1
 800f6ac:	020b      	lsls	r3, r1, #8
 800f6ae:	d533      	bpl.n	800f718 <__aeabi_dadd+0x2cc>
 800f6b0:	2502      	movs	r5, #2
 800f6b2:	e785      	b.n	800f5c0 <__aeabi_dadd+0x174>
 800f6b4:	4664      	mov	r4, ip
 800f6b6:	0033      	movs	r3, r6
 800f6b8:	4641      	mov	r1, r8
 800f6ba:	0010      	movs	r0, r2
 800f6bc:	001d      	movs	r5, r3
 800f6be:	e7c7      	b.n	800f650 <__aeabi_dadd+0x204>
 800f6c0:	2d00      	cmp	r5, #0
 800f6c2:	d000      	beq.n	800f6c6 <__aeabi_dadd+0x27a>
 800f6c4:	e0da      	b.n	800f87c <__aeabi_dadd+0x430>
 800f6c6:	000c      	movs	r4, r1
 800f6c8:	4304      	orrs	r4, r0
 800f6ca:	d0f3      	beq.n	800f6b4 <__aeabi_dadd+0x268>
 800f6cc:	1c5c      	adds	r4, r3, #1
 800f6ce:	d100      	bne.n	800f6d2 <__aeabi_dadd+0x286>
 800f6d0:	e19f      	b.n	800fa12 <__aeabi_dadd+0x5c6>
 800f6d2:	4c5d      	ldr	r4, [pc, #372]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f6d4:	42a6      	cmp	r6, r4
 800f6d6:	d100      	bne.n	800f6da <__aeabi_dadd+0x28e>
 800f6d8:	e12f      	b.n	800f93a <__aeabi_dadd+0x4ee>
 800f6da:	43db      	mvns	r3, r3
 800f6dc:	2b38      	cmp	r3, #56	; 0x38
 800f6de:	dd00      	ble.n	800f6e2 <__aeabi_dadd+0x296>
 800f6e0:	e166      	b.n	800f9b0 <__aeabi_dadd+0x564>
 800f6e2:	2b1f      	cmp	r3, #31
 800f6e4:	dd00      	ble.n	800f6e8 <__aeabi_dadd+0x29c>
 800f6e6:	e183      	b.n	800f9f0 <__aeabi_dadd+0x5a4>
 800f6e8:	2420      	movs	r4, #32
 800f6ea:	0005      	movs	r5, r0
 800f6ec:	1ae4      	subs	r4, r4, r3
 800f6ee:	000f      	movs	r7, r1
 800f6f0:	40dd      	lsrs	r5, r3
 800f6f2:	40d9      	lsrs	r1, r3
 800f6f4:	40a0      	lsls	r0, r4
 800f6f6:	4643      	mov	r3, r8
 800f6f8:	40a7      	lsls	r7, r4
 800f6fa:	1a5b      	subs	r3, r3, r1
 800f6fc:	1e44      	subs	r4, r0, #1
 800f6fe:	41a0      	sbcs	r0, r4
 800f700:	4698      	mov	r8, r3
 800f702:	432f      	orrs	r7, r5
 800f704:	4338      	orrs	r0, r7
 800f706:	1a17      	subs	r7, r2, r0
 800f708:	42ba      	cmp	r2, r7
 800f70a:	4192      	sbcs	r2, r2
 800f70c:	4643      	mov	r3, r8
 800f70e:	4252      	negs	r2, r2
 800f710:	1a99      	subs	r1, r3, r2
 800f712:	4664      	mov	r4, ip
 800f714:	0035      	movs	r5, r6
 800f716:	e6ca      	b.n	800f4ae <__aeabi_dadd+0x62>
 800f718:	2207      	movs	r2, #7
 800f71a:	403a      	ands	r2, r7
 800f71c:	2a00      	cmp	r2, #0
 800f71e:	d000      	beq.n	800f722 <__aeabi_dadd+0x2d6>
 800f720:	e6f6      	b.n	800f510 <__aeabi_dadd+0xc4>
 800f722:	074b      	lsls	r3, r1, #29
 800f724:	08ca      	lsrs	r2, r1, #3
 800f726:	4948      	ldr	r1, [pc, #288]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f728:	08ff      	lsrs	r7, r7, #3
 800f72a:	433b      	orrs	r3, r7
 800f72c:	428d      	cmp	r5, r1
 800f72e:	d196      	bne.n	800f65e <__aeabi_dadd+0x212>
 800f730:	0019      	movs	r1, r3
 800f732:	4311      	orrs	r1, r2
 800f734:	d100      	bne.n	800f738 <__aeabi_dadd+0x2ec>
 800f736:	e19e      	b.n	800fa76 <__aeabi_dadd+0x62a>
 800f738:	2180      	movs	r1, #128	; 0x80
 800f73a:	0309      	lsls	r1, r1, #12
 800f73c:	430a      	orrs	r2, r1
 800f73e:	0312      	lsls	r2, r2, #12
 800f740:	0b12      	lsrs	r2, r2, #12
 800f742:	4d41      	ldr	r5, [pc, #260]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f744:	e78f      	b.n	800f666 <__aeabi_dadd+0x21a>
 800f746:	0015      	movs	r5, r2
 800f748:	2200      	movs	r2, #0
 800f74a:	2300      	movs	r3, #0
 800f74c:	e78b      	b.n	800f666 <__aeabi_dadd+0x21a>
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d000      	beq.n	800f754 <__aeabi_dadd+0x308>
 800f752:	e0c7      	b.n	800f8e4 <__aeabi_dadd+0x498>
 800f754:	1c6b      	adds	r3, r5, #1
 800f756:	055f      	lsls	r7, r3, #21
 800f758:	0d7f      	lsrs	r7, r7, #21
 800f75a:	2f01      	cmp	r7, #1
 800f75c:	dc00      	bgt.n	800f760 <__aeabi_dadd+0x314>
 800f75e:	e0f1      	b.n	800f944 <__aeabi_dadd+0x4f8>
 800f760:	4d39      	ldr	r5, [pc, #228]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f762:	42ab      	cmp	r3, r5
 800f764:	d100      	bne.n	800f768 <__aeabi_dadd+0x31c>
 800f766:	e0b9      	b.n	800f8dc <__aeabi_dadd+0x490>
 800f768:	1885      	adds	r5, r0, r2
 800f76a:	000a      	movs	r2, r1
 800f76c:	4285      	cmp	r5, r0
 800f76e:	4189      	sbcs	r1, r1
 800f770:	4442      	add	r2, r8
 800f772:	4249      	negs	r1, r1
 800f774:	1851      	adds	r1, r2, r1
 800f776:	2207      	movs	r2, #7
 800f778:	07cf      	lsls	r7, r1, #31
 800f77a:	086d      	lsrs	r5, r5, #1
 800f77c:	432f      	orrs	r7, r5
 800f77e:	0849      	lsrs	r1, r1, #1
 800f780:	403a      	ands	r2, r7
 800f782:	001d      	movs	r5, r3
 800f784:	e6c2      	b.n	800f50c <__aeabi_dadd+0xc0>
 800f786:	2207      	movs	r2, #7
 800f788:	4930      	ldr	r1, [pc, #192]	; (800f84c <__aeabi_dadd+0x400>)
 800f78a:	1aed      	subs	r5, r5, r3
 800f78c:	4031      	ands	r1, r6
 800f78e:	403a      	ands	r2, r7
 800f790:	e6bc      	b.n	800f50c <__aeabi_dadd+0xc0>
 800f792:	003e      	movs	r6, r7
 800f794:	3828      	subs	r0, #40	; 0x28
 800f796:	4086      	lsls	r6, r0
 800f798:	2700      	movs	r7, #0
 800f79a:	e69f      	b.n	800f4dc <__aeabi_dadd+0x90>
 800f79c:	0038      	movs	r0, r7
 800f79e:	f7ff f98d 	bl	800eabc <__clzsi2>
 800f7a2:	3020      	adds	r0, #32
 800f7a4:	e68e      	b.n	800f4c4 <__aeabi_dadd+0x78>
 800f7a6:	4643      	mov	r3, r8
 800f7a8:	4313      	orrs	r3, r2
 800f7aa:	001f      	movs	r7, r3
 800f7ac:	1e7a      	subs	r2, r7, #1
 800f7ae:	4197      	sbcs	r7, r2
 800f7b0:	1bc7      	subs	r7, r0, r7
 800f7b2:	42b8      	cmp	r0, r7
 800f7b4:	4180      	sbcs	r0, r0
 800f7b6:	4240      	negs	r0, r0
 800f7b8:	1a09      	subs	r1, r1, r0
 800f7ba:	e678      	b.n	800f4ae <__aeabi_dadd+0x62>
 800f7bc:	000e      	movs	r6, r1
 800f7be:	003b      	movs	r3, r7
 800f7c0:	4306      	orrs	r6, r0
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	2d00      	cmp	r5, #0
 800f7c6:	d161      	bne.n	800f88c <__aeabi_dadd+0x440>
 800f7c8:	2e00      	cmp	r6, #0
 800f7ca:	d000      	beq.n	800f7ce <__aeabi_dadd+0x382>
 800f7cc:	e0f4      	b.n	800f9b8 <__aeabi_dadd+0x56c>
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d100      	bne.n	800f7d4 <__aeabi_dadd+0x388>
 800f7d2:	e11b      	b.n	800fa0c <__aeabi_dadd+0x5c0>
 800f7d4:	4664      	mov	r4, ip
 800f7d6:	0039      	movs	r1, r7
 800f7d8:	0010      	movs	r0, r2
 800f7da:	e739      	b.n	800f650 <__aeabi_dadd+0x204>
 800f7dc:	4f1a      	ldr	r7, [pc, #104]	; (800f848 <__aeabi_dadd+0x3fc>)
 800f7de:	42bb      	cmp	r3, r7
 800f7e0:	d07a      	beq.n	800f8d8 <__aeabi_dadd+0x48c>
 800f7e2:	0033      	movs	r3, r6
 800f7e4:	e6ff      	b.n	800f5e6 <__aeabi_dadd+0x19a>
 800f7e6:	0030      	movs	r0, r6
 800f7e8:	3d1f      	subs	r5, #31
 800f7ea:	40e8      	lsrs	r0, r5
 800f7ec:	2b20      	cmp	r3, #32
 800f7ee:	d003      	beq.n	800f7f8 <__aeabi_dadd+0x3ac>
 800f7f0:	2140      	movs	r1, #64	; 0x40
 800f7f2:	1acb      	subs	r3, r1, r3
 800f7f4:	409e      	lsls	r6, r3
 800f7f6:	4337      	orrs	r7, r6
 800f7f8:	1e7b      	subs	r3, r7, #1
 800f7fa:	419f      	sbcs	r7, r3
 800f7fc:	2207      	movs	r2, #7
 800f7fe:	4307      	orrs	r7, r0
 800f800:	403a      	ands	r2, r7
 800f802:	2100      	movs	r1, #0
 800f804:	2500      	movs	r5, #0
 800f806:	e789      	b.n	800f71c <__aeabi_dadd+0x2d0>
 800f808:	1a17      	subs	r7, r2, r0
 800f80a:	4643      	mov	r3, r8
 800f80c:	42ba      	cmp	r2, r7
 800f80e:	41b6      	sbcs	r6, r6
 800f810:	1a59      	subs	r1, r3, r1
 800f812:	4276      	negs	r6, r6
 800f814:	1b8e      	subs	r6, r1, r6
 800f816:	4664      	mov	r4, ip
 800f818:	e64e      	b.n	800f4b8 <__aeabi_dadd+0x6c>
 800f81a:	2b1f      	cmp	r3, #31
 800f81c:	dd00      	ble.n	800f820 <__aeabi_dadd+0x3d4>
 800f81e:	e0ad      	b.n	800f97c <__aeabi_dadd+0x530>
 800f820:	2620      	movs	r6, #32
 800f822:	4647      	mov	r7, r8
 800f824:	1af6      	subs	r6, r6, r3
 800f826:	40b7      	lsls	r7, r6
 800f828:	46b9      	mov	r9, r7
 800f82a:	0017      	movs	r7, r2
 800f82c:	46b2      	mov	sl, r6
 800f82e:	40df      	lsrs	r7, r3
 800f830:	464e      	mov	r6, r9
 800f832:	433e      	orrs	r6, r7
 800f834:	0037      	movs	r7, r6
 800f836:	4656      	mov	r6, sl
 800f838:	40b2      	lsls	r2, r6
 800f83a:	1e56      	subs	r6, r2, #1
 800f83c:	41b2      	sbcs	r2, r6
 800f83e:	4317      	orrs	r7, r2
 800f840:	4642      	mov	r2, r8
 800f842:	40da      	lsrs	r2, r3
 800f844:	1889      	adds	r1, r1, r2
 800f846:	e6ae      	b.n	800f5a6 <__aeabi_dadd+0x15a>
 800f848:	000007ff 	.word	0x000007ff
 800f84c:	ff7fffff 	.word	0xff7fffff
 800f850:	800fffff 	.word	0x800fffff
 800f854:	2620      	movs	r6, #32
 800f856:	4647      	mov	r7, r8
 800f858:	1af6      	subs	r6, r6, r3
 800f85a:	40b7      	lsls	r7, r6
 800f85c:	46b9      	mov	r9, r7
 800f85e:	0017      	movs	r7, r2
 800f860:	46b2      	mov	sl, r6
 800f862:	40df      	lsrs	r7, r3
 800f864:	464e      	mov	r6, r9
 800f866:	433e      	orrs	r6, r7
 800f868:	0037      	movs	r7, r6
 800f86a:	4656      	mov	r6, sl
 800f86c:	40b2      	lsls	r2, r6
 800f86e:	1e56      	subs	r6, r2, #1
 800f870:	41b2      	sbcs	r2, r6
 800f872:	4317      	orrs	r7, r2
 800f874:	4642      	mov	r2, r8
 800f876:	40da      	lsrs	r2, r3
 800f878:	1a89      	subs	r1, r1, r2
 800f87a:	e799      	b.n	800f7b0 <__aeabi_dadd+0x364>
 800f87c:	4c7f      	ldr	r4, [pc, #508]	; (800fa7c <__aeabi_dadd+0x630>)
 800f87e:	42a6      	cmp	r6, r4
 800f880:	d05b      	beq.n	800f93a <__aeabi_dadd+0x4ee>
 800f882:	2480      	movs	r4, #128	; 0x80
 800f884:	0424      	lsls	r4, r4, #16
 800f886:	425b      	negs	r3, r3
 800f888:	4321      	orrs	r1, r4
 800f88a:	e727      	b.n	800f6dc <__aeabi_dadd+0x290>
 800f88c:	2e00      	cmp	r6, #0
 800f88e:	d10c      	bne.n	800f8aa <__aeabi_dadd+0x45e>
 800f890:	2b00      	cmp	r3, #0
 800f892:	d100      	bne.n	800f896 <__aeabi_dadd+0x44a>
 800f894:	e0cb      	b.n	800fa2e <__aeabi_dadd+0x5e2>
 800f896:	4664      	mov	r4, ip
 800f898:	0039      	movs	r1, r7
 800f89a:	0010      	movs	r0, r2
 800f89c:	4d77      	ldr	r5, [pc, #476]	; (800fa7c <__aeabi_dadd+0x630>)
 800f89e:	e6d7      	b.n	800f650 <__aeabi_dadd+0x204>
 800f8a0:	4f76      	ldr	r7, [pc, #472]	; (800fa7c <__aeabi_dadd+0x630>)
 800f8a2:	42bb      	cmp	r3, r7
 800f8a4:	d018      	beq.n	800f8d8 <__aeabi_dadd+0x48c>
 800f8a6:	0033      	movs	r3, r6
 800f8a8:	e675      	b.n	800f596 <__aeabi_dadd+0x14a>
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d014      	beq.n	800f8d8 <__aeabi_dadd+0x48c>
 800f8ae:	074b      	lsls	r3, r1, #29
 800f8b0:	08c0      	lsrs	r0, r0, #3
 800f8b2:	4318      	orrs	r0, r3
 800f8b4:	2380      	movs	r3, #128	; 0x80
 800f8b6:	08c9      	lsrs	r1, r1, #3
 800f8b8:	031b      	lsls	r3, r3, #12
 800f8ba:	4219      	tst	r1, r3
 800f8bc:	d007      	beq.n	800f8ce <__aeabi_dadd+0x482>
 800f8be:	08fc      	lsrs	r4, r7, #3
 800f8c0:	421c      	tst	r4, r3
 800f8c2:	d104      	bne.n	800f8ce <__aeabi_dadd+0x482>
 800f8c4:	0779      	lsls	r1, r7, #29
 800f8c6:	08d0      	lsrs	r0, r2, #3
 800f8c8:	4308      	orrs	r0, r1
 800f8ca:	46e1      	mov	r9, ip
 800f8cc:	0021      	movs	r1, r4
 800f8ce:	464c      	mov	r4, r9
 800f8d0:	0f42      	lsrs	r2, r0, #29
 800f8d2:	00c9      	lsls	r1, r1, #3
 800f8d4:	4311      	orrs	r1, r2
 800f8d6:	00c0      	lsls	r0, r0, #3
 800f8d8:	4d68      	ldr	r5, [pc, #416]	; (800fa7c <__aeabi_dadd+0x630>)
 800f8da:	e6b9      	b.n	800f650 <__aeabi_dadd+0x204>
 800f8dc:	001d      	movs	r5, r3
 800f8de:	2200      	movs	r2, #0
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	e6c0      	b.n	800f666 <__aeabi_dadd+0x21a>
 800f8e4:	2d00      	cmp	r5, #0
 800f8e6:	d15b      	bne.n	800f9a0 <__aeabi_dadd+0x554>
 800f8e8:	000d      	movs	r5, r1
 800f8ea:	4305      	orrs	r5, r0
 800f8ec:	d100      	bne.n	800f8f0 <__aeabi_dadd+0x4a4>
 800f8ee:	e6e2      	b.n	800f6b6 <__aeabi_dadd+0x26a>
 800f8f0:	1c5d      	adds	r5, r3, #1
 800f8f2:	d100      	bne.n	800f8f6 <__aeabi_dadd+0x4aa>
 800f8f4:	e0b0      	b.n	800fa58 <__aeabi_dadd+0x60c>
 800f8f6:	4d61      	ldr	r5, [pc, #388]	; (800fa7c <__aeabi_dadd+0x630>)
 800f8f8:	42ae      	cmp	r6, r5
 800f8fa:	d01f      	beq.n	800f93c <__aeabi_dadd+0x4f0>
 800f8fc:	43db      	mvns	r3, r3
 800f8fe:	2b38      	cmp	r3, #56	; 0x38
 800f900:	dc71      	bgt.n	800f9e6 <__aeabi_dadd+0x59a>
 800f902:	2b1f      	cmp	r3, #31
 800f904:	dd00      	ble.n	800f908 <__aeabi_dadd+0x4bc>
 800f906:	e096      	b.n	800fa36 <__aeabi_dadd+0x5ea>
 800f908:	2520      	movs	r5, #32
 800f90a:	000f      	movs	r7, r1
 800f90c:	1aed      	subs	r5, r5, r3
 800f90e:	40af      	lsls	r7, r5
 800f910:	46b9      	mov	r9, r7
 800f912:	0007      	movs	r7, r0
 800f914:	46aa      	mov	sl, r5
 800f916:	40df      	lsrs	r7, r3
 800f918:	464d      	mov	r5, r9
 800f91a:	433d      	orrs	r5, r7
 800f91c:	002f      	movs	r7, r5
 800f91e:	4655      	mov	r5, sl
 800f920:	40a8      	lsls	r0, r5
 800f922:	40d9      	lsrs	r1, r3
 800f924:	1e45      	subs	r5, r0, #1
 800f926:	41a8      	sbcs	r0, r5
 800f928:	4488      	add	r8, r1
 800f92a:	4307      	orrs	r7, r0
 800f92c:	18bf      	adds	r7, r7, r2
 800f92e:	4297      	cmp	r7, r2
 800f930:	4192      	sbcs	r2, r2
 800f932:	4251      	negs	r1, r2
 800f934:	4441      	add	r1, r8
 800f936:	0035      	movs	r5, r6
 800f938:	e63a      	b.n	800f5b0 <__aeabi_dadd+0x164>
 800f93a:	4664      	mov	r4, ip
 800f93c:	0035      	movs	r5, r6
 800f93e:	4641      	mov	r1, r8
 800f940:	0010      	movs	r0, r2
 800f942:	e685      	b.n	800f650 <__aeabi_dadd+0x204>
 800f944:	000b      	movs	r3, r1
 800f946:	4303      	orrs	r3, r0
 800f948:	2d00      	cmp	r5, #0
 800f94a:	d000      	beq.n	800f94e <__aeabi_dadd+0x502>
 800f94c:	e663      	b.n	800f616 <__aeabi_dadd+0x1ca>
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d0f5      	beq.n	800f93e <__aeabi_dadd+0x4f2>
 800f952:	4643      	mov	r3, r8
 800f954:	4313      	orrs	r3, r2
 800f956:	d100      	bne.n	800f95a <__aeabi_dadd+0x50e>
 800f958:	e67a      	b.n	800f650 <__aeabi_dadd+0x204>
 800f95a:	1887      	adds	r7, r0, r2
 800f95c:	4287      	cmp	r7, r0
 800f95e:	4180      	sbcs	r0, r0
 800f960:	2207      	movs	r2, #7
 800f962:	4441      	add	r1, r8
 800f964:	4240      	negs	r0, r0
 800f966:	1809      	adds	r1, r1, r0
 800f968:	403a      	ands	r2, r7
 800f96a:	020b      	lsls	r3, r1, #8
 800f96c:	d400      	bmi.n	800f970 <__aeabi_dadd+0x524>
 800f96e:	e6d5      	b.n	800f71c <__aeabi_dadd+0x2d0>
 800f970:	4b43      	ldr	r3, [pc, #268]	; (800fa80 <__aeabi_dadd+0x634>)
 800f972:	3501      	adds	r5, #1
 800f974:	4019      	ands	r1, r3
 800f976:	e5c9      	b.n	800f50c <__aeabi_dadd+0xc0>
 800f978:	0038      	movs	r0, r7
 800f97a:	e669      	b.n	800f650 <__aeabi_dadd+0x204>
 800f97c:	001e      	movs	r6, r3
 800f97e:	4647      	mov	r7, r8
 800f980:	3e20      	subs	r6, #32
 800f982:	40f7      	lsrs	r7, r6
 800f984:	46bc      	mov	ip, r7
 800f986:	2b20      	cmp	r3, #32
 800f988:	d004      	beq.n	800f994 <__aeabi_dadd+0x548>
 800f98a:	2640      	movs	r6, #64	; 0x40
 800f98c:	1af3      	subs	r3, r6, r3
 800f98e:	4646      	mov	r6, r8
 800f990:	409e      	lsls	r6, r3
 800f992:	4332      	orrs	r2, r6
 800f994:	0017      	movs	r7, r2
 800f996:	4663      	mov	r3, ip
 800f998:	1e7a      	subs	r2, r7, #1
 800f99a:	4197      	sbcs	r7, r2
 800f99c:	431f      	orrs	r7, r3
 800f99e:	e602      	b.n	800f5a6 <__aeabi_dadd+0x15a>
 800f9a0:	4d36      	ldr	r5, [pc, #216]	; (800fa7c <__aeabi_dadd+0x630>)
 800f9a2:	42ae      	cmp	r6, r5
 800f9a4:	d0ca      	beq.n	800f93c <__aeabi_dadd+0x4f0>
 800f9a6:	2580      	movs	r5, #128	; 0x80
 800f9a8:	042d      	lsls	r5, r5, #16
 800f9aa:	425b      	negs	r3, r3
 800f9ac:	4329      	orrs	r1, r5
 800f9ae:	e7a6      	b.n	800f8fe <__aeabi_dadd+0x4b2>
 800f9b0:	4308      	orrs	r0, r1
 800f9b2:	1e41      	subs	r1, r0, #1
 800f9b4:	4188      	sbcs	r0, r1
 800f9b6:	e6a6      	b.n	800f706 <__aeabi_dadd+0x2ba>
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d100      	bne.n	800f9be <__aeabi_dadd+0x572>
 800f9bc:	e648      	b.n	800f650 <__aeabi_dadd+0x204>
 800f9be:	1a87      	subs	r7, r0, r2
 800f9c0:	4643      	mov	r3, r8
 800f9c2:	42b8      	cmp	r0, r7
 800f9c4:	41b6      	sbcs	r6, r6
 800f9c6:	1acb      	subs	r3, r1, r3
 800f9c8:	4276      	negs	r6, r6
 800f9ca:	1b9e      	subs	r6, r3, r6
 800f9cc:	0233      	lsls	r3, r6, #8
 800f9ce:	d54b      	bpl.n	800fa68 <__aeabi_dadd+0x61c>
 800f9d0:	1a17      	subs	r7, r2, r0
 800f9d2:	4643      	mov	r3, r8
 800f9d4:	42ba      	cmp	r2, r7
 800f9d6:	4192      	sbcs	r2, r2
 800f9d8:	1a59      	subs	r1, r3, r1
 800f9da:	4252      	negs	r2, r2
 800f9dc:	1a89      	subs	r1, r1, r2
 800f9de:	2207      	movs	r2, #7
 800f9e0:	4664      	mov	r4, ip
 800f9e2:	403a      	ands	r2, r7
 800f9e4:	e592      	b.n	800f50c <__aeabi_dadd+0xc0>
 800f9e6:	4301      	orrs	r1, r0
 800f9e8:	000f      	movs	r7, r1
 800f9ea:	1e79      	subs	r1, r7, #1
 800f9ec:	418f      	sbcs	r7, r1
 800f9ee:	e79d      	b.n	800f92c <__aeabi_dadd+0x4e0>
 800f9f0:	001c      	movs	r4, r3
 800f9f2:	000f      	movs	r7, r1
 800f9f4:	3c20      	subs	r4, #32
 800f9f6:	40e7      	lsrs	r7, r4
 800f9f8:	2b20      	cmp	r3, #32
 800f9fa:	d003      	beq.n	800fa04 <__aeabi_dadd+0x5b8>
 800f9fc:	2440      	movs	r4, #64	; 0x40
 800f9fe:	1ae3      	subs	r3, r4, r3
 800fa00:	4099      	lsls	r1, r3
 800fa02:	4308      	orrs	r0, r1
 800fa04:	1e41      	subs	r1, r0, #1
 800fa06:	4188      	sbcs	r0, r1
 800fa08:	4338      	orrs	r0, r7
 800fa0a:	e67c      	b.n	800f706 <__aeabi_dadd+0x2ba>
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	2400      	movs	r4, #0
 800fa10:	e625      	b.n	800f65e <__aeabi_dadd+0x212>
 800fa12:	1a17      	subs	r7, r2, r0
 800fa14:	4643      	mov	r3, r8
 800fa16:	42ba      	cmp	r2, r7
 800fa18:	4192      	sbcs	r2, r2
 800fa1a:	1a59      	subs	r1, r3, r1
 800fa1c:	4252      	negs	r2, r2
 800fa1e:	1a89      	subs	r1, r1, r2
 800fa20:	4664      	mov	r4, ip
 800fa22:	0035      	movs	r5, r6
 800fa24:	e543      	b.n	800f4ae <__aeabi_dadd+0x62>
 800fa26:	4641      	mov	r1, r8
 800fa28:	0010      	movs	r0, r2
 800fa2a:	4d14      	ldr	r5, [pc, #80]	; (800fa7c <__aeabi_dadd+0x630>)
 800fa2c:	e610      	b.n	800f650 <__aeabi_dadd+0x204>
 800fa2e:	2280      	movs	r2, #128	; 0x80
 800fa30:	2400      	movs	r4, #0
 800fa32:	0312      	lsls	r2, r2, #12
 800fa34:	e680      	b.n	800f738 <__aeabi_dadd+0x2ec>
 800fa36:	001d      	movs	r5, r3
 800fa38:	000f      	movs	r7, r1
 800fa3a:	3d20      	subs	r5, #32
 800fa3c:	40ef      	lsrs	r7, r5
 800fa3e:	46bc      	mov	ip, r7
 800fa40:	2b20      	cmp	r3, #32
 800fa42:	d003      	beq.n	800fa4c <__aeabi_dadd+0x600>
 800fa44:	2540      	movs	r5, #64	; 0x40
 800fa46:	1aeb      	subs	r3, r5, r3
 800fa48:	4099      	lsls	r1, r3
 800fa4a:	4308      	orrs	r0, r1
 800fa4c:	0007      	movs	r7, r0
 800fa4e:	4663      	mov	r3, ip
 800fa50:	1e78      	subs	r0, r7, #1
 800fa52:	4187      	sbcs	r7, r0
 800fa54:	431f      	orrs	r7, r3
 800fa56:	e769      	b.n	800f92c <__aeabi_dadd+0x4e0>
 800fa58:	1887      	adds	r7, r0, r2
 800fa5a:	4297      	cmp	r7, r2
 800fa5c:	419b      	sbcs	r3, r3
 800fa5e:	4441      	add	r1, r8
 800fa60:	425b      	negs	r3, r3
 800fa62:	18c9      	adds	r1, r1, r3
 800fa64:	0035      	movs	r5, r6
 800fa66:	e5a3      	b.n	800f5b0 <__aeabi_dadd+0x164>
 800fa68:	003b      	movs	r3, r7
 800fa6a:	4333      	orrs	r3, r6
 800fa6c:	d0ce      	beq.n	800fa0c <__aeabi_dadd+0x5c0>
 800fa6e:	2207      	movs	r2, #7
 800fa70:	0031      	movs	r1, r6
 800fa72:	403a      	ands	r2, r7
 800fa74:	e652      	b.n	800f71c <__aeabi_dadd+0x2d0>
 800fa76:	2300      	movs	r3, #0
 800fa78:	001a      	movs	r2, r3
 800fa7a:	e5f4      	b.n	800f666 <__aeabi_dadd+0x21a>
 800fa7c:	000007ff 	.word	0x000007ff
 800fa80:	ff7fffff 	.word	0xff7fffff

0800fa84 <__aeabi_ddiv>:
 800fa84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa86:	4657      	mov	r7, sl
 800fa88:	46de      	mov	lr, fp
 800fa8a:	464e      	mov	r6, r9
 800fa8c:	4645      	mov	r5, r8
 800fa8e:	b5e0      	push	{r5, r6, r7, lr}
 800fa90:	4683      	mov	fp, r0
 800fa92:	0007      	movs	r7, r0
 800fa94:	030e      	lsls	r6, r1, #12
 800fa96:	0048      	lsls	r0, r1, #1
 800fa98:	b085      	sub	sp, #20
 800fa9a:	4692      	mov	sl, r2
 800fa9c:	001c      	movs	r4, r3
 800fa9e:	0b36      	lsrs	r6, r6, #12
 800faa0:	0d40      	lsrs	r0, r0, #21
 800faa2:	0fcd      	lsrs	r5, r1, #31
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d100      	bne.n	800faaa <__aeabi_ddiv+0x26>
 800faa8:	e09d      	b.n	800fbe6 <__aeabi_ddiv+0x162>
 800faaa:	4b95      	ldr	r3, [pc, #596]	; (800fd00 <__aeabi_ddiv+0x27c>)
 800faac:	4298      	cmp	r0, r3
 800faae:	d039      	beq.n	800fb24 <__aeabi_ddiv+0xa0>
 800fab0:	2380      	movs	r3, #128	; 0x80
 800fab2:	00f6      	lsls	r6, r6, #3
 800fab4:	041b      	lsls	r3, r3, #16
 800fab6:	431e      	orrs	r6, r3
 800fab8:	4a92      	ldr	r2, [pc, #584]	; (800fd04 <__aeabi_ddiv+0x280>)
 800faba:	0f7b      	lsrs	r3, r7, #29
 800fabc:	4333      	orrs	r3, r6
 800fabe:	4699      	mov	r9, r3
 800fac0:	4694      	mov	ip, r2
 800fac2:	0003      	movs	r3, r0
 800fac4:	4463      	add	r3, ip
 800fac6:	9300      	str	r3, [sp, #0]
 800fac8:	2300      	movs	r3, #0
 800faca:	2600      	movs	r6, #0
 800facc:	00ff      	lsls	r7, r7, #3
 800face:	9302      	str	r3, [sp, #8]
 800fad0:	0323      	lsls	r3, r4, #12
 800fad2:	0b1b      	lsrs	r3, r3, #12
 800fad4:	4698      	mov	r8, r3
 800fad6:	0063      	lsls	r3, r4, #1
 800fad8:	0fe4      	lsrs	r4, r4, #31
 800fada:	4652      	mov	r2, sl
 800fadc:	0d5b      	lsrs	r3, r3, #21
 800fade:	9401      	str	r4, [sp, #4]
 800fae0:	d100      	bne.n	800fae4 <__aeabi_ddiv+0x60>
 800fae2:	e0b3      	b.n	800fc4c <__aeabi_ddiv+0x1c8>
 800fae4:	4986      	ldr	r1, [pc, #536]	; (800fd00 <__aeabi_ddiv+0x27c>)
 800fae6:	428b      	cmp	r3, r1
 800fae8:	d100      	bne.n	800faec <__aeabi_ddiv+0x68>
 800faea:	e09e      	b.n	800fc2a <__aeabi_ddiv+0x1a6>
 800faec:	4642      	mov	r2, r8
 800faee:	00d1      	lsls	r1, r2, #3
 800faf0:	2280      	movs	r2, #128	; 0x80
 800faf2:	0412      	lsls	r2, r2, #16
 800faf4:	430a      	orrs	r2, r1
 800faf6:	4651      	mov	r1, sl
 800faf8:	0f49      	lsrs	r1, r1, #29
 800fafa:	4311      	orrs	r1, r2
 800fafc:	468b      	mov	fp, r1
 800fafe:	4981      	ldr	r1, [pc, #516]	; (800fd04 <__aeabi_ddiv+0x280>)
 800fb00:	4652      	mov	r2, sl
 800fb02:	468c      	mov	ip, r1
 800fb04:	9900      	ldr	r1, [sp, #0]
 800fb06:	4463      	add	r3, ip
 800fb08:	1acb      	subs	r3, r1, r3
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	00d2      	lsls	r2, r2, #3
 800fb0e:	9300      	str	r3, [sp, #0]
 800fb10:	002b      	movs	r3, r5
 800fb12:	4063      	eors	r3, r4
 800fb14:	469a      	mov	sl, r3
 800fb16:	2e0f      	cmp	r6, #15
 800fb18:	d900      	bls.n	800fb1c <__aeabi_ddiv+0x98>
 800fb1a:	e105      	b.n	800fd28 <__aeabi_ddiv+0x2a4>
 800fb1c:	4b7a      	ldr	r3, [pc, #488]	; (800fd08 <__aeabi_ddiv+0x284>)
 800fb1e:	00b6      	lsls	r6, r6, #2
 800fb20:	599b      	ldr	r3, [r3, r6]
 800fb22:	469f      	mov	pc, r3
 800fb24:	465b      	mov	r3, fp
 800fb26:	4333      	orrs	r3, r6
 800fb28:	4699      	mov	r9, r3
 800fb2a:	d000      	beq.n	800fb2e <__aeabi_ddiv+0xaa>
 800fb2c:	e0b8      	b.n	800fca0 <__aeabi_ddiv+0x21c>
 800fb2e:	2302      	movs	r3, #2
 800fb30:	2608      	movs	r6, #8
 800fb32:	2700      	movs	r7, #0
 800fb34:	9000      	str	r0, [sp, #0]
 800fb36:	9302      	str	r3, [sp, #8]
 800fb38:	e7ca      	b.n	800fad0 <__aeabi_ddiv+0x4c>
 800fb3a:	46cb      	mov	fp, r9
 800fb3c:	003a      	movs	r2, r7
 800fb3e:	9902      	ldr	r1, [sp, #8]
 800fb40:	9501      	str	r5, [sp, #4]
 800fb42:	9b01      	ldr	r3, [sp, #4]
 800fb44:	469a      	mov	sl, r3
 800fb46:	2902      	cmp	r1, #2
 800fb48:	d027      	beq.n	800fb9a <__aeabi_ddiv+0x116>
 800fb4a:	2903      	cmp	r1, #3
 800fb4c:	d100      	bne.n	800fb50 <__aeabi_ddiv+0xcc>
 800fb4e:	e280      	b.n	8010052 <__aeabi_ddiv+0x5ce>
 800fb50:	2901      	cmp	r1, #1
 800fb52:	d044      	beq.n	800fbde <__aeabi_ddiv+0x15a>
 800fb54:	496d      	ldr	r1, [pc, #436]	; (800fd0c <__aeabi_ddiv+0x288>)
 800fb56:	9b00      	ldr	r3, [sp, #0]
 800fb58:	468c      	mov	ip, r1
 800fb5a:	4463      	add	r3, ip
 800fb5c:	001c      	movs	r4, r3
 800fb5e:	2c00      	cmp	r4, #0
 800fb60:	dd38      	ble.n	800fbd4 <__aeabi_ddiv+0x150>
 800fb62:	0753      	lsls	r3, r2, #29
 800fb64:	d000      	beq.n	800fb68 <__aeabi_ddiv+0xe4>
 800fb66:	e213      	b.n	800ff90 <__aeabi_ddiv+0x50c>
 800fb68:	08d2      	lsrs	r2, r2, #3
 800fb6a:	465b      	mov	r3, fp
 800fb6c:	01db      	lsls	r3, r3, #7
 800fb6e:	d509      	bpl.n	800fb84 <__aeabi_ddiv+0x100>
 800fb70:	4659      	mov	r1, fp
 800fb72:	4b67      	ldr	r3, [pc, #412]	; (800fd10 <__aeabi_ddiv+0x28c>)
 800fb74:	4019      	ands	r1, r3
 800fb76:	468b      	mov	fp, r1
 800fb78:	2180      	movs	r1, #128	; 0x80
 800fb7a:	00c9      	lsls	r1, r1, #3
 800fb7c:	468c      	mov	ip, r1
 800fb7e:	9b00      	ldr	r3, [sp, #0]
 800fb80:	4463      	add	r3, ip
 800fb82:	001c      	movs	r4, r3
 800fb84:	4b63      	ldr	r3, [pc, #396]	; (800fd14 <__aeabi_ddiv+0x290>)
 800fb86:	429c      	cmp	r4, r3
 800fb88:	dc07      	bgt.n	800fb9a <__aeabi_ddiv+0x116>
 800fb8a:	465b      	mov	r3, fp
 800fb8c:	0564      	lsls	r4, r4, #21
 800fb8e:	075f      	lsls	r7, r3, #29
 800fb90:	025b      	lsls	r3, r3, #9
 800fb92:	4317      	orrs	r7, r2
 800fb94:	0b1b      	lsrs	r3, r3, #12
 800fb96:	0d62      	lsrs	r2, r4, #21
 800fb98:	e002      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	2700      	movs	r7, #0
 800fb9e:	4a58      	ldr	r2, [pc, #352]	; (800fd00 <__aeabi_ddiv+0x27c>)
 800fba0:	2100      	movs	r1, #0
 800fba2:	031b      	lsls	r3, r3, #12
 800fba4:	0b1c      	lsrs	r4, r3, #12
 800fba6:	0d0b      	lsrs	r3, r1, #20
 800fba8:	051b      	lsls	r3, r3, #20
 800fbaa:	4323      	orrs	r3, r4
 800fbac:	0514      	lsls	r4, r2, #20
 800fbae:	4a5a      	ldr	r2, [pc, #360]	; (800fd18 <__aeabi_ddiv+0x294>)
 800fbb0:	0038      	movs	r0, r7
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	431c      	orrs	r4, r3
 800fbb6:	4653      	mov	r3, sl
 800fbb8:	0064      	lsls	r4, r4, #1
 800fbba:	07db      	lsls	r3, r3, #31
 800fbbc:	0864      	lsrs	r4, r4, #1
 800fbbe:	431c      	orrs	r4, r3
 800fbc0:	0021      	movs	r1, r4
 800fbc2:	b005      	add	sp, #20
 800fbc4:	bc3c      	pop	{r2, r3, r4, r5}
 800fbc6:	4690      	mov	r8, r2
 800fbc8:	4699      	mov	r9, r3
 800fbca:	46a2      	mov	sl, r4
 800fbcc:	46ab      	mov	fp, r5
 800fbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	4252      	negs	r2, r2
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	1b1b      	subs	r3, r3, r4
 800fbd8:	2b38      	cmp	r3, #56	; 0x38
 800fbda:	dc00      	bgt.n	800fbde <__aeabi_ddiv+0x15a>
 800fbdc:	e1ad      	b.n	800ff3a <__aeabi_ddiv+0x4b6>
 800fbde:	2200      	movs	r2, #0
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	2700      	movs	r7, #0
 800fbe4:	e7dc      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800fbe6:	465b      	mov	r3, fp
 800fbe8:	4333      	orrs	r3, r6
 800fbea:	4699      	mov	r9, r3
 800fbec:	d05e      	beq.n	800fcac <__aeabi_ddiv+0x228>
 800fbee:	2e00      	cmp	r6, #0
 800fbf0:	d100      	bne.n	800fbf4 <__aeabi_ddiv+0x170>
 800fbf2:	e18a      	b.n	800ff0a <__aeabi_ddiv+0x486>
 800fbf4:	0030      	movs	r0, r6
 800fbf6:	f7fe ff61 	bl	800eabc <__clzsi2>
 800fbfa:	0003      	movs	r3, r0
 800fbfc:	3b0b      	subs	r3, #11
 800fbfe:	2b1c      	cmp	r3, #28
 800fc00:	dd00      	ble.n	800fc04 <__aeabi_ddiv+0x180>
 800fc02:	e17b      	b.n	800fefc <__aeabi_ddiv+0x478>
 800fc04:	221d      	movs	r2, #29
 800fc06:	1ad3      	subs	r3, r2, r3
 800fc08:	465a      	mov	r2, fp
 800fc0a:	0001      	movs	r1, r0
 800fc0c:	40da      	lsrs	r2, r3
 800fc0e:	3908      	subs	r1, #8
 800fc10:	408e      	lsls	r6, r1
 800fc12:	0013      	movs	r3, r2
 800fc14:	465f      	mov	r7, fp
 800fc16:	4333      	orrs	r3, r6
 800fc18:	4699      	mov	r9, r3
 800fc1a:	408f      	lsls	r7, r1
 800fc1c:	4b3f      	ldr	r3, [pc, #252]	; (800fd1c <__aeabi_ddiv+0x298>)
 800fc1e:	2600      	movs	r6, #0
 800fc20:	1a1b      	subs	r3, r3, r0
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	2300      	movs	r3, #0
 800fc26:	9302      	str	r3, [sp, #8]
 800fc28:	e752      	b.n	800fad0 <__aeabi_ddiv+0x4c>
 800fc2a:	4641      	mov	r1, r8
 800fc2c:	4653      	mov	r3, sl
 800fc2e:	430b      	orrs	r3, r1
 800fc30:	493b      	ldr	r1, [pc, #236]	; (800fd20 <__aeabi_ddiv+0x29c>)
 800fc32:	469b      	mov	fp, r3
 800fc34:	468c      	mov	ip, r1
 800fc36:	9b00      	ldr	r3, [sp, #0]
 800fc38:	4463      	add	r3, ip
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	465b      	mov	r3, fp
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d13b      	bne.n	800fcba <__aeabi_ddiv+0x236>
 800fc42:	2302      	movs	r3, #2
 800fc44:	2200      	movs	r2, #0
 800fc46:	431e      	orrs	r6, r3
 800fc48:	2102      	movs	r1, #2
 800fc4a:	e761      	b.n	800fb10 <__aeabi_ddiv+0x8c>
 800fc4c:	4643      	mov	r3, r8
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	469b      	mov	fp, r3
 800fc52:	d037      	beq.n	800fcc4 <__aeabi_ddiv+0x240>
 800fc54:	4643      	mov	r3, r8
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d100      	bne.n	800fc5c <__aeabi_ddiv+0x1d8>
 800fc5a:	e162      	b.n	800ff22 <__aeabi_ddiv+0x49e>
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	f7fe ff2d 	bl	800eabc <__clzsi2>
 800fc62:	0003      	movs	r3, r0
 800fc64:	3b0b      	subs	r3, #11
 800fc66:	2b1c      	cmp	r3, #28
 800fc68:	dd00      	ble.n	800fc6c <__aeabi_ddiv+0x1e8>
 800fc6a:	e153      	b.n	800ff14 <__aeabi_ddiv+0x490>
 800fc6c:	0002      	movs	r2, r0
 800fc6e:	4641      	mov	r1, r8
 800fc70:	3a08      	subs	r2, #8
 800fc72:	4091      	lsls	r1, r2
 800fc74:	4688      	mov	r8, r1
 800fc76:	211d      	movs	r1, #29
 800fc78:	1acb      	subs	r3, r1, r3
 800fc7a:	4651      	mov	r1, sl
 800fc7c:	40d9      	lsrs	r1, r3
 800fc7e:	000b      	movs	r3, r1
 800fc80:	4641      	mov	r1, r8
 800fc82:	430b      	orrs	r3, r1
 800fc84:	469b      	mov	fp, r3
 800fc86:	4653      	mov	r3, sl
 800fc88:	4093      	lsls	r3, r2
 800fc8a:	001a      	movs	r2, r3
 800fc8c:	9b00      	ldr	r3, [sp, #0]
 800fc8e:	4925      	ldr	r1, [pc, #148]	; (800fd24 <__aeabi_ddiv+0x2a0>)
 800fc90:	469c      	mov	ip, r3
 800fc92:	4460      	add	r0, ip
 800fc94:	0003      	movs	r3, r0
 800fc96:	468c      	mov	ip, r1
 800fc98:	4463      	add	r3, ip
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	2100      	movs	r1, #0
 800fc9e:	e737      	b.n	800fb10 <__aeabi_ddiv+0x8c>
 800fca0:	2303      	movs	r3, #3
 800fca2:	46b1      	mov	r9, r6
 800fca4:	9000      	str	r0, [sp, #0]
 800fca6:	260c      	movs	r6, #12
 800fca8:	9302      	str	r3, [sp, #8]
 800fcaa:	e711      	b.n	800fad0 <__aeabi_ddiv+0x4c>
 800fcac:	2300      	movs	r3, #0
 800fcae:	9300      	str	r3, [sp, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	2604      	movs	r6, #4
 800fcb4:	2700      	movs	r7, #0
 800fcb6:	9302      	str	r3, [sp, #8]
 800fcb8:	e70a      	b.n	800fad0 <__aeabi_ddiv+0x4c>
 800fcba:	2303      	movs	r3, #3
 800fcbc:	46c3      	mov	fp, r8
 800fcbe:	431e      	orrs	r6, r3
 800fcc0:	2103      	movs	r1, #3
 800fcc2:	e725      	b.n	800fb10 <__aeabi_ddiv+0x8c>
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	431e      	orrs	r6, r3
 800fcc8:	2200      	movs	r2, #0
 800fcca:	2101      	movs	r1, #1
 800fccc:	e720      	b.n	800fb10 <__aeabi_ddiv+0x8c>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	469a      	mov	sl, r3
 800fcd2:	2380      	movs	r3, #128	; 0x80
 800fcd4:	2700      	movs	r7, #0
 800fcd6:	031b      	lsls	r3, r3, #12
 800fcd8:	4a09      	ldr	r2, [pc, #36]	; (800fd00 <__aeabi_ddiv+0x27c>)
 800fcda:	e761      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800fcdc:	2380      	movs	r3, #128	; 0x80
 800fcde:	4649      	mov	r1, r9
 800fce0:	031b      	lsls	r3, r3, #12
 800fce2:	4219      	tst	r1, r3
 800fce4:	d100      	bne.n	800fce8 <__aeabi_ddiv+0x264>
 800fce6:	e0e2      	b.n	800feae <__aeabi_ddiv+0x42a>
 800fce8:	4659      	mov	r1, fp
 800fcea:	4219      	tst	r1, r3
 800fcec:	d000      	beq.n	800fcf0 <__aeabi_ddiv+0x26c>
 800fcee:	e0de      	b.n	800feae <__aeabi_ddiv+0x42a>
 800fcf0:	430b      	orrs	r3, r1
 800fcf2:	031b      	lsls	r3, r3, #12
 800fcf4:	0017      	movs	r7, r2
 800fcf6:	0b1b      	lsrs	r3, r3, #12
 800fcf8:	46a2      	mov	sl, r4
 800fcfa:	4a01      	ldr	r2, [pc, #4]	; (800fd00 <__aeabi_ddiv+0x27c>)
 800fcfc:	e750      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800fcfe:	46c0      	nop			; (mov r8, r8)
 800fd00:	000007ff 	.word	0x000007ff
 800fd04:	fffffc01 	.word	0xfffffc01
 800fd08:	0801b828 	.word	0x0801b828
 800fd0c:	000003ff 	.word	0x000003ff
 800fd10:	feffffff 	.word	0xfeffffff
 800fd14:	000007fe 	.word	0x000007fe
 800fd18:	800fffff 	.word	0x800fffff
 800fd1c:	fffffc0d 	.word	0xfffffc0d
 800fd20:	fffff801 	.word	0xfffff801
 800fd24:	000003f3 	.word	0x000003f3
 800fd28:	45d9      	cmp	r9, fp
 800fd2a:	d900      	bls.n	800fd2e <__aeabi_ddiv+0x2aa>
 800fd2c:	e0cb      	b.n	800fec6 <__aeabi_ddiv+0x442>
 800fd2e:	d100      	bne.n	800fd32 <__aeabi_ddiv+0x2ae>
 800fd30:	e0c6      	b.n	800fec0 <__aeabi_ddiv+0x43c>
 800fd32:	003c      	movs	r4, r7
 800fd34:	4648      	mov	r0, r9
 800fd36:	2700      	movs	r7, #0
 800fd38:	9b00      	ldr	r3, [sp, #0]
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	9300      	str	r3, [sp, #0]
 800fd3e:	465b      	mov	r3, fp
 800fd40:	0e16      	lsrs	r6, r2, #24
 800fd42:	021b      	lsls	r3, r3, #8
 800fd44:	431e      	orrs	r6, r3
 800fd46:	0213      	lsls	r3, r2, #8
 800fd48:	4698      	mov	r8, r3
 800fd4a:	0433      	lsls	r3, r6, #16
 800fd4c:	0c1b      	lsrs	r3, r3, #16
 800fd4e:	4699      	mov	r9, r3
 800fd50:	0c31      	lsrs	r1, r6, #16
 800fd52:	9101      	str	r1, [sp, #4]
 800fd54:	f7fe ff74 	bl	800ec40 <__aeabi_uidivmod>
 800fd58:	464a      	mov	r2, r9
 800fd5a:	4342      	muls	r2, r0
 800fd5c:	040b      	lsls	r3, r1, #16
 800fd5e:	0c21      	lsrs	r1, r4, #16
 800fd60:	0005      	movs	r5, r0
 800fd62:	4319      	orrs	r1, r3
 800fd64:	428a      	cmp	r2, r1
 800fd66:	d907      	bls.n	800fd78 <__aeabi_ddiv+0x2f4>
 800fd68:	1989      	adds	r1, r1, r6
 800fd6a:	3d01      	subs	r5, #1
 800fd6c:	428e      	cmp	r6, r1
 800fd6e:	d803      	bhi.n	800fd78 <__aeabi_ddiv+0x2f4>
 800fd70:	428a      	cmp	r2, r1
 800fd72:	d901      	bls.n	800fd78 <__aeabi_ddiv+0x2f4>
 800fd74:	1e85      	subs	r5, r0, #2
 800fd76:	1989      	adds	r1, r1, r6
 800fd78:	1a88      	subs	r0, r1, r2
 800fd7a:	9901      	ldr	r1, [sp, #4]
 800fd7c:	f7fe ff60 	bl	800ec40 <__aeabi_uidivmod>
 800fd80:	0409      	lsls	r1, r1, #16
 800fd82:	468c      	mov	ip, r1
 800fd84:	464a      	mov	r2, r9
 800fd86:	0421      	lsls	r1, r4, #16
 800fd88:	4664      	mov	r4, ip
 800fd8a:	4342      	muls	r2, r0
 800fd8c:	0c09      	lsrs	r1, r1, #16
 800fd8e:	0003      	movs	r3, r0
 800fd90:	4321      	orrs	r1, r4
 800fd92:	428a      	cmp	r2, r1
 800fd94:	d904      	bls.n	800fda0 <__aeabi_ddiv+0x31c>
 800fd96:	1989      	adds	r1, r1, r6
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	428e      	cmp	r6, r1
 800fd9c:	d800      	bhi.n	800fda0 <__aeabi_ddiv+0x31c>
 800fd9e:	e0f1      	b.n	800ff84 <__aeabi_ddiv+0x500>
 800fda0:	042d      	lsls	r5, r5, #16
 800fda2:	431d      	orrs	r5, r3
 800fda4:	46ab      	mov	fp, r5
 800fda6:	4643      	mov	r3, r8
 800fda8:	1a89      	subs	r1, r1, r2
 800fdaa:	4642      	mov	r2, r8
 800fdac:	0c28      	lsrs	r0, r5, #16
 800fdae:	0412      	lsls	r2, r2, #16
 800fdb0:	0c1d      	lsrs	r5, r3, #16
 800fdb2:	465b      	mov	r3, fp
 800fdb4:	0c14      	lsrs	r4, r2, #16
 800fdb6:	0022      	movs	r2, r4
 800fdb8:	041b      	lsls	r3, r3, #16
 800fdba:	0c1b      	lsrs	r3, r3, #16
 800fdbc:	435a      	muls	r2, r3
 800fdbe:	9403      	str	r4, [sp, #12]
 800fdc0:	436b      	muls	r3, r5
 800fdc2:	4344      	muls	r4, r0
 800fdc4:	9502      	str	r5, [sp, #8]
 800fdc6:	4368      	muls	r0, r5
 800fdc8:	191b      	adds	r3, r3, r4
 800fdca:	0c15      	lsrs	r5, r2, #16
 800fdcc:	18eb      	adds	r3, r5, r3
 800fdce:	429c      	cmp	r4, r3
 800fdd0:	d903      	bls.n	800fdda <__aeabi_ddiv+0x356>
 800fdd2:	2480      	movs	r4, #128	; 0x80
 800fdd4:	0264      	lsls	r4, r4, #9
 800fdd6:	46a4      	mov	ip, r4
 800fdd8:	4460      	add	r0, ip
 800fdda:	0c1c      	lsrs	r4, r3, #16
 800fddc:	0415      	lsls	r5, r2, #16
 800fdde:	041b      	lsls	r3, r3, #16
 800fde0:	0c2d      	lsrs	r5, r5, #16
 800fde2:	1820      	adds	r0, r4, r0
 800fde4:	195d      	adds	r5, r3, r5
 800fde6:	4281      	cmp	r1, r0
 800fde8:	d377      	bcc.n	800feda <__aeabi_ddiv+0x456>
 800fdea:	d073      	beq.n	800fed4 <__aeabi_ddiv+0x450>
 800fdec:	1a0c      	subs	r4, r1, r0
 800fdee:	4aa2      	ldr	r2, [pc, #648]	; (8010078 <__aeabi_ddiv+0x5f4>)
 800fdf0:	1b7d      	subs	r5, r7, r5
 800fdf2:	42af      	cmp	r7, r5
 800fdf4:	41bf      	sbcs	r7, r7
 800fdf6:	4694      	mov	ip, r2
 800fdf8:	9b00      	ldr	r3, [sp, #0]
 800fdfa:	427f      	negs	r7, r7
 800fdfc:	4463      	add	r3, ip
 800fdfe:	1be0      	subs	r0, r4, r7
 800fe00:	001c      	movs	r4, r3
 800fe02:	4286      	cmp	r6, r0
 800fe04:	d100      	bne.n	800fe08 <__aeabi_ddiv+0x384>
 800fe06:	e0db      	b.n	800ffc0 <__aeabi_ddiv+0x53c>
 800fe08:	9901      	ldr	r1, [sp, #4]
 800fe0a:	f7fe ff19 	bl	800ec40 <__aeabi_uidivmod>
 800fe0e:	464a      	mov	r2, r9
 800fe10:	4342      	muls	r2, r0
 800fe12:	040b      	lsls	r3, r1, #16
 800fe14:	0c29      	lsrs	r1, r5, #16
 800fe16:	0007      	movs	r7, r0
 800fe18:	4319      	orrs	r1, r3
 800fe1a:	428a      	cmp	r2, r1
 800fe1c:	d907      	bls.n	800fe2e <__aeabi_ddiv+0x3aa>
 800fe1e:	1989      	adds	r1, r1, r6
 800fe20:	3f01      	subs	r7, #1
 800fe22:	428e      	cmp	r6, r1
 800fe24:	d803      	bhi.n	800fe2e <__aeabi_ddiv+0x3aa>
 800fe26:	428a      	cmp	r2, r1
 800fe28:	d901      	bls.n	800fe2e <__aeabi_ddiv+0x3aa>
 800fe2a:	1e87      	subs	r7, r0, #2
 800fe2c:	1989      	adds	r1, r1, r6
 800fe2e:	1a88      	subs	r0, r1, r2
 800fe30:	9901      	ldr	r1, [sp, #4]
 800fe32:	f7fe ff05 	bl	800ec40 <__aeabi_uidivmod>
 800fe36:	0409      	lsls	r1, r1, #16
 800fe38:	464a      	mov	r2, r9
 800fe3a:	4689      	mov	r9, r1
 800fe3c:	0429      	lsls	r1, r5, #16
 800fe3e:	464d      	mov	r5, r9
 800fe40:	4342      	muls	r2, r0
 800fe42:	0c09      	lsrs	r1, r1, #16
 800fe44:	0003      	movs	r3, r0
 800fe46:	4329      	orrs	r1, r5
 800fe48:	428a      	cmp	r2, r1
 800fe4a:	d907      	bls.n	800fe5c <__aeabi_ddiv+0x3d8>
 800fe4c:	1989      	adds	r1, r1, r6
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	428e      	cmp	r6, r1
 800fe52:	d803      	bhi.n	800fe5c <__aeabi_ddiv+0x3d8>
 800fe54:	428a      	cmp	r2, r1
 800fe56:	d901      	bls.n	800fe5c <__aeabi_ddiv+0x3d8>
 800fe58:	1e83      	subs	r3, r0, #2
 800fe5a:	1989      	adds	r1, r1, r6
 800fe5c:	043f      	lsls	r7, r7, #16
 800fe5e:	1a89      	subs	r1, r1, r2
 800fe60:	003a      	movs	r2, r7
 800fe62:	9f03      	ldr	r7, [sp, #12]
 800fe64:	431a      	orrs	r2, r3
 800fe66:	0038      	movs	r0, r7
 800fe68:	0413      	lsls	r3, r2, #16
 800fe6a:	0c1b      	lsrs	r3, r3, #16
 800fe6c:	4358      	muls	r0, r3
 800fe6e:	4681      	mov	r9, r0
 800fe70:	9802      	ldr	r0, [sp, #8]
 800fe72:	0c15      	lsrs	r5, r2, #16
 800fe74:	436f      	muls	r7, r5
 800fe76:	4343      	muls	r3, r0
 800fe78:	4345      	muls	r5, r0
 800fe7a:	4648      	mov	r0, r9
 800fe7c:	0c00      	lsrs	r0, r0, #16
 800fe7e:	4684      	mov	ip, r0
 800fe80:	19db      	adds	r3, r3, r7
 800fe82:	4463      	add	r3, ip
 800fe84:	429f      	cmp	r7, r3
 800fe86:	d903      	bls.n	800fe90 <__aeabi_ddiv+0x40c>
 800fe88:	2080      	movs	r0, #128	; 0x80
 800fe8a:	0240      	lsls	r0, r0, #9
 800fe8c:	4684      	mov	ip, r0
 800fe8e:	4465      	add	r5, ip
 800fe90:	4648      	mov	r0, r9
 800fe92:	0c1f      	lsrs	r7, r3, #16
 800fe94:	0400      	lsls	r0, r0, #16
 800fe96:	041b      	lsls	r3, r3, #16
 800fe98:	0c00      	lsrs	r0, r0, #16
 800fe9a:	197d      	adds	r5, r7, r5
 800fe9c:	1818      	adds	r0, r3, r0
 800fe9e:	42a9      	cmp	r1, r5
 800fea0:	d200      	bcs.n	800fea4 <__aeabi_ddiv+0x420>
 800fea2:	e084      	b.n	800ffae <__aeabi_ddiv+0x52a>
 800fea4:	d100      	bne.n	800fea8 <__aeabi_ddiv+0x424>
 800fea6:	e07f      	b.n	800ffa8 <__aeabi_ddiv+0x524>
 800fea8:	2301      	movs	r3, #1
 800feaa:	431a      	orrs	r2, r3
 800feac:	e657      	b.n	800fb5e <__aeabi_ddiv+0xda>
 800feae:	2380      	movs	r3, #128	; 0x80
 800feb0:	464a      	mov	r2, r9
 800feb2:	031b      	lsls	r3, r3, #12
 800feb4:	4313      	orrs	r3, r2
 800feb6:	031b      	lsls	r3, r3, #12
 800feb8:	0b1b      	lsrs	r3, r3, #12
 800feba:	46aa      	mov	sl, r5
 800febc:	4a6f      	ldr	r2, [pc, #444]	; (801007c <__aeabi_ddiv+0x5f8>)
 800febe:	e66f      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800fec0:	42ba      	cmp	r2, r7
 800fec2:	d900      	bls.n	800fec6 <__aeabi_ddiv+0x442>
 800fec4:	e735      	b.n	800fd32 <__aeabi_ddiv+0x2ae>
 800fec6:	464b      	mov	r3, r9
 800fec8:	07dc      	lsls	r4, r3, #31
 800feca:	0858      	lsrs	r0, r3, #1
 800fecc:	087b      	lsrs	r3, r7, #1
 800fece:	431c      	orrs	r4, r3
 800fed0:	07ff      	lsls	r7, r7, #31
 800fed2:	e734      	b.n	800fd3e <__aeabi_ddiv+0x2ba>
 800fed4:	2400      	movs	r4, #0
 800fed6:	42af      	cmp	r7, r5
 800fed8:	d289      	bcs.n	800fdee <__aeabi_ddiv+0x36a>
 800feda:	4447      	add	r7, r8
 800fedc:	4547      	cmp	r7, r8
 800fede:	41a4      	sbcs	r4, r4
 800fee0:	465b      	mov	r3, fp
 800fee2:	4264      	negs	r4, r4
 800fee4:	19a4      	adds	r4, r4, r6
 800fee6:	1864      	adds	r4, r4, r1
 800fee8:	3b01      	subs	r3, #1
 800feea:	42a6      	cmp	r6, r4
 800feec:	d21e      	bcs.n	800ff2c <__aeabi_ddiv+0x4a8>
 800feee:	42a0      	cmp	r0, r4
 800fef0:	d86d      	bhi.n	800ffce <__aeabi_ddiv+0x54a>
 800fef2:	d100      	bne.n	800fef6 <__aeabi_ddiv+0x472>
 800fef4:	e0b6      	b.n	8010064 <__aeabi_ddiv+0x5e0>
 800fef6:	1a24      	subs	r4, r4, r0
 800fef8:	469b      	mov	fp, r3
 800fefa:	e778      	b.n	800fdee <__aeabi_ddiv+0x36a>
 800fefc:	0003      	movs	r3, r0
 800fefe:	465a      	mov	r2, fp
 800ff00:	3b28      	subs	r3, #40	; 0x28
 800ff02:	409a      	lsls	r2, r3
 800ff04:	2700      	movs	r7, #0
 800ff06:	4691      	mov	r9, r2
 800ff08:	e688      	b.n	800fc1c <__aeabi_ddiv+0x198>
 800ff0a:	4658      	mov	r0, fp
 800ff0c:	f7fe fdd6 	bl	800eabc <__clzsi2>
 800ff10:	3020      	adds	r0, #32
 800ff12:	e672      	b.n	800fbfa <__aeabi_ddiv+0x176>
 800ff14:	0003      	movs	r3, r0
 800ff16:	4652      	mov	r2, sl
 800ff18:	3b28      	subs	r3, #40	; 0x28
 800ff1a:	409a      	lsls	r2, r3
 800ff1c:	4693      	mov	fp, r2
 800ff1e:	2200      	movs	r2, #0
 800ff20:	e6b4      	b.n	800fc8c <__aeabi_ddiv+0x208>
 800ff22:	4650      	mov	r0, sl
 800ff24:	f7fe fdca 	bl	800eabc <__clzsi2>
 800ff28:	3020      	adds	r0, #32
 800ff2a:	e69a      	b.n	800fc62 <__aeabi_ddiv+0x1de>
 800ff2c:	42a6      	cmp	r6, r4
 800ff2e:	d1e2      	bne.n	800fef6 <__aeabi_ddiv+0x472>
 800ff30:	45b8      	cmp	r8, r7
 800ff32:	d9dc      	bls.n	800feee <__aeabi_ddiv+0x46a>
 800ff34:	1a34      	subs	r4, r6, r0
 800ff36:	469b      	mov	fp, r3
 800ff38:	e759      	b.n	800fdee <__aeabi_ddiv+0x36a>
 800ff3a:	2b1f      	cmp	r3, #31
 800ff3c:	dc65      	bgt.n	801000a <__aeabi_ddiv+0x586>
 800ff3e:	4c50      	ldr	r4, [pc, #320]	; (8010080 <__aeabi_ddiv+0x5fc>)
 800ff40:	9900      	ldr	r1, [sp, #0]
 800ff42:	46a4      	mov	ip, r4
 800ff44:	465c      	mov	r4, fp
 800ff46:	4461      	add	r1, ip
 800ff48:	0008      	movs	r0, r1
 800ff4a:	408c      	lsls	r4, r1
 800ff4c:	0011      	movs	r1, r2
 800ff4e:	4082      	lsls	r2, r0
 800ff50:	40d9      	lsrs	r1, r3
 800ff52:	1e50      	subs	r0, r2, #1
 800ff54:	4182      	sbcs	r2, r0
 800ff56:	430c      	orrs	r4, r1
 800ff58:	4314      	orrs	r4, r2
 800ff5a:	465a      	mov	r2, fp
 800ff5c:	40da      	lsrs	r2, r3
 800ff5e:	0013      	movs	r3, r2
 800ff60:	0762      	lsls	r2, r4, #29
 800ff62:	d009      	beq.n	800ff78 <__aeabi_ddiv+0x4f4>
 800ff64:	220f      	movs	r2, #15
 800ff66:	4022      	ands	r2, r4
 800ff68:	2a04      	cmp	r2, #4
 800ff6a:	d005      	beq.n	800ff78 <__aeabi_ddiv+0x4f4>
 800ff6c:	0022      	movs	r2, r4
 800ff6e:	1d14      	adds	r4, r2, #4
 800ff70:	4294      	cmp	r4, r2
 800ff72:	4189      	sbcs	r1, r1
 800ff74:	4249      	negs	r1, r1
 800ff76:	185b      	adds	r3, r3, r1
 800ff78:	021a      	lsls	r2, r3, #8
 800ff7a:	d562      	bpl.n	8010042 <__aeabi_ddiv+0x5be>
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	2300      	movs	r3, #0
 800ff80:	2700      	movs	r7, #0
 800ff82:	e60d      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 800ff84:	428a      	cmp	r2, r1
 800ff86:	d800      	bhi.n	800ff8a <__aeabi_ddiv+0x506>
 800ff88:	e70a      	b.n	800fda0 <__aeabi_ddiv+0x31c>
 800ff8a:	1e83      	subs	r3, r0, #2
 800ff8c:	1989      	adds	r1, r1, r6
 800ff8e:	e707      	b.n	800fda0 <__aeabi_ddiv+0x31c>
 800ff90:	230f      	movs	r3, #15
 800ff92:	4013      	ands	r3, r2
 800ff94:	2b04      	cmp	r3, #4
 800ff96:	d100      	bne.n	800ff9a <__aeabi_ddiv+0x516>
 800ff98:	e5e6      	b.n	800fb68 <__aeabi_ddiv+0xe4>
 800ff9a:	1d17      	adds	r7, r2, #4
 800ff9c:	4297      	cmp	r7, r2
 800ff9e:	4192      	sbcs	r2, r2
 800ffa0:	4253      	negs	r3, r2
 800ffa2:	449b      	add	fp, r3
 800ffa4:	08fa      	lsrs	r2, r7, #3
 800ffa6:	e5e0      	b.n	800fb6a <__aeabi_ddiv+0xe6>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	d100      	bne.n	800ffae <__aeabi_ddiv+0x52a>
 800ffac:	e5d7      	b.n	800fb5e <__aeabi_ddiv+0xda>
 800ffae:	1871      	adds	r1, r6, r1
 800ffb0:	1e53      	subs	r3, r2, #1
 800ffb2:	42b1      	cmp	r1, r6
 800ffb4:	d327      	bcc.n	8010006 <__aeabi_ddiv+0x582>
 800ffb6:	42a9      	cmp	r1, r5
 800ffb8:	d315      	bcc.n	800ffe6 <__aeabi_ddiv+0x562>
 800ffba:	d058      	beq.n	801006e <__aeabi_ddiv+0x5ea>
 800ffbc:	001a      	movs	r2, r3
 800ffbe:	e773      	b.n	800fea8 <__aeabi_ddiv+0x424>
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	dc00      	bgt.n	800ffc6 <__aeabi_ddiv+0x542>
 800ffc4:	e604      	b.n	800fbd0 <__aeabi_ddiv+0x14c>
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	2200      	movs	r2, #0
 800ffca:	449b      	add	fp, r3
 800ffcc:	e5cd      	b.n	800fb6a <__aeabi_ddiv+0xe6>
 800ffce:	2302      	movs	r3, #2
 800ffd0:	4447      	add	r7, r8
 800ffd2:	4547      	cmp	r7, r8
 800ffd4:	4189      	sbcs	r1, r1
 800ffd6:	425b      	negs	r3, r3
 800ffd8:	469c      	mov	ip, r3
 800ffda:	4249      	negs	r1, r1
 800ffdc:	1989      	adds	r1, r1, r6
 800ffde:	190c      	adds	r4, r1, r4
 800ffe0:	44e3      	add	fp, ip
 800ffe2:	1a24      	subs	r4, r4, r0
 800ffe4:	e703      	b.n	800fdee <__aeabi_ddiv+0x36a>
 800ffe6:	4643      	mov	r3, r8
 800ffe8:	005f      	lsls	r7, r3, #1
 800ffea:	4547      	cmp	r7, r8
 800ffec:	419b      	sbcs	r3, r3
 800ffee:	46b8      	mov	r8, r7
 800fff0:	425b      	negs	r3, r3
 800fff2:	199e      	adds	r6, r3, r6
 800fff4:	3a02      	subs	r2, #2
 800fff6:	1989      	adds	r1, r1, r6
 800fff8:	42a9      	cmp	r1, r5
 800fffa:	d000      	beq.n	800fffe <__aeabi_ddiv+0x57a>
 800fffc:	e754      	b.n	800fea8 <__aeabi_ddiv+0x424>
 800fffe:	4540      	cmp	r0, r8
 8010000:	d000      	beq.n	8010004 <__aeabi_ddiv+0x580>
 8010002:	e751      	b.n	800fea8 <__aeabi_ddiv+0x424>
 8010004:	e5ab      	b.n	800fb5e <__aeabi_ddiv+0xda>
 8010006:	001a      	movs	r2, r3
 8010008:	e7f6      	b.n	800fff8 <__aeabi_ddiv+0x574>
 801000a:	211f      	movs	r1, #31
 801000c:	465f      	mov	r7, fp
 801000e:	4249      	negs	r1, r1
 8010010:	1b0c      	subs	r4, r1, r4
 8010012:	40e7      	lsrs	r7, r4
 8010014:	2b20      	cmp	r3, #32
 8010016:	d007      	beq.n	8010028 <__aeabi_ddiv+0x5a4>
 8010018:	491a      	ldr	r1, [pc, #104]	; (8010084 <__aeabi_ddiv+0x600>)
 801001a:	9b00      	ldr	r3, [sp, #0]
 801001c:	468c      	mov	ip, r1
 801001e:	4463      	add	r3, ip
 8010020:	0018      	movs	r0, r3
 8010022:	465b      	mov	r3, fp
 8010024:	4083      	lsls	r3, r0
 8010026:	431a      	orrs	r2, r3
 8010028:	1e50      	subs	r0, r2, #1
 801002a:	4182      	sbcs	r2, r0
 801002c:	433a      	orrs	r2, r7
 801002e:	2707      	movs	r7, #7
 8010030:	2300      	movs	r3, #0
 8010032:	4017      	ands	r7, r2
 8010034:	d009      	beq.n	801004a <__aeabi_ddiv+0x5c6>
 8010036:	210f      	movs	r1, #15
 8010038:	2300      	movs	r3, #0
 801003a:	4011      	ands	r1, r2
 801003c:	0014      	movs	r4, r2
 801003e:	2904      	cmp	r1, #4
 8010040:	d195      	bne.n	800ff6e <__aeabi_ddiv+0x4ea>
 8010042:	0022      	movs	r2, r4
 8010044:	075f      	lsls	r7, r3, #29
 8010046:	025b      	lsls	r3, r3, #9
 8010048:	0b1b      	lsrs	r3, r3, #12
 801004a:	08d2      	lsrs	r2, r2, #3
 801004c:	4317      	orrs	r7, r2
 801004e:	2200      	movs	r2, #0
 8010050:	e5a6      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 8010052:	2380      	movs	r3, #128	; 0x80
 8010054:	4659      	mov	r1, fp
 8010056:	031b      	lsls	r3, r3, #12
 8010058:	430b      	orrs	r3, r1
 801005a:	031b      	lsls	r3, r3, #12
 801005c:	0017      	movs	r7, r2
 801005e:	0b1b      	lsrs	r3, r3, #12
 8010060:	4a06      	ldr	r2, [pc, #24]	; (801007c <__aeabi_ddiv+0x5f8>)
 8010062:	e59d      	b.n	800fba0 <__aeabi_ddiv+0x11c>
 8010064:	42bd      	cmp	r5, r7
 8010066:	d8b2      	bhi.n	800ffce <__aeabi_ddiv+0x54a>
 8010068:	469b      	mov	fp, r3
 801006a:	2400      	movs	r4, #0
 801006c:	e6bf      	b.n	800fdee <__aeabi_ddiv+0x36a>
 801006e:	4580      	cmp	r8, r0
 8010070:	d3b9      	bcc.n	800ffe6 <__aeabi_ddiv+0x562>
 8010072:	001a      	movs	r2, r3
 8010074:	e7c3      	b.n	800fffe <__aeabi_ddiv+0x57a>
 8010076:	46c0      	nop			; (mov r8, r8)
 8010078:	000003ff 	.word	0x000003ff
 801007c:	000007ff 	.word	0x000007ff
 8010080:	0000041e 	.word	0x0000041e
 8010084:	0000043e 	.word	0x0000043e

08010088 <__eqdf2>:
 8010088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801008a:	464f      	mov	r7, r9
 801008c:	4646      	mov	r6, r8
 801008e:	46d6      	mov	lr, sl
 8010090:	4684      	mov	ip, r0
 8010092:	b5c0      	push	{r6, r7, lr}
 8010094:	4680      	mov	r8, r0
 8010096:	4e19      	ldr	r6, [pc, #100]	; (80100fc <__eqdf2+0x74>)
 8010098:	0318      	lsls	r0, r3, #12
 801009a:	030f      	lsls	r7, r1, #12
 801009c:	004d      	lsls	r5, r1, #1
 801009e:	0b00      	lsrs	r0, r0, #12
 80100a0:	005c      	lsls	r4, r3, #1
 80100a2:	4682      	mov	sl, r0
 80100a4:	0b3f      	lsrs	r7, r7, #12
 80100a6:	0d6d      	lsrs	r5, r5, #21
 80100a8:	0fc9      	lsrs	r1, r1, #31
 80100aa:	4691      	mov	r9, r2
 80100ac:	0d64      	lsrs	r4, r4, #21
 80100ae:	0fdb      	lsrs	r3, r3, #31
 80100b0:	2001      	movs	r0, #1
 80100b2:	42b5      	cmp	r5, r6
 80100b4:	d00a      	beq.n	80100cc <__eqdf2+0x44>
 80100b6:	42b4      	cmp	r4, r6
 80100b8:	d003      	beq.n	80100c2 <__eqdf2+0x3a>
 80100ba:	42a5      	cmp	r5, r4
 80100bc:	d101      	bne.n	80100c2 <__eqdf2+0x3a>
 80100be:	4557      	cmp	r7, sl
 80100c0:	d00c      	beq.n	80100dc <__eqdf2+0x54>
 80100c2:	bc1c      	pop	{r2, r3, r4}
 80100c4:	4690      	mov	r8, r2
 80100c6:	4699      	mov	r9, r3
 80100c8:	46a2      	mov	sl, r4
 80100ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100cc:	4666      	mov	r6, ip
 80100ce:	433e      	orrs	r6, r7
 80100d0:	d1f7      	bne.n	80100c2 <__eqdf2+0x3a>
 80100d2:	42ac      	cmp	r4, r5
 80100d4:	d1f5      	bne.n	80100c2 <__eqdf2+0x3a>
 80100d6:	4654      	mov	r4, sl
 80100d8:	4314      	orrs	r4, r2
 80100da:	d1f2      	bne.n	80100c2 <__eqdf2+0x3a>
 80100dc:	2001      	movs	r0, #1
 80100de:	45c8      	cmp	r8, r9
 80100e0:	d1ef      	bne.n	80100c2 <__eqdf2+0x3a>
 80100e2:	4299      	cmp	r1, r3
 80100e4:	d007      	beq.n	80100f6 <__eqdf2+0x6e>
 80100e6:	2d00      	cmp	r5, #0
 80100e8:	d1eb      	bne.n	80100c2 <__eqdf2+0x3a>
 80100ea:	4663      	mov	r3, ip
 80100ec:	431f      	orrs	r7, r3
 80100ee:	0038      	movs	r0, r7
 80100f0:	1e47      	subs	r7, r0, #1
 80100f2:	41b8      	sbcs	r0, r7
 80100f4:	e7e5      	b.n	80100c2 <__eqdf2+0x3a>
 80100f6:	2000      	movs	r0, #0
 80100f8:	e7e3      	b.n	80100c2 <__eqdf2+0x3a>
 80100fa:	46c0      	nop			; (mov r8, r8)
 80100fc:	000007ff 	.word	0x000007ff

08010100 <__gedf2>:
 8010100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010102:	464f      	mov	r7, r9
 8010104:	4646      	mov	r6, r8
 8010106:	46d6      	mov	lr, sl
 8010108:	004d      	lsls	r5, r1, #1
 801010a:	b5c0      	push	{r6, r7, lr}
 801010c:	030e      	lsls	r6, r1, #12
 801010e:	0fc9      	lsrs	r1, r1, #31
 8010110:	468a      	mov	sl, r1
 8010112:	492c      	ldr	r1, [pc, #176]	; (80101c4 <__gedf2+0xc4>)
 8010114:	031f      	lsls	r7, r3, #12
 8010116:	005c      	lsls	r4, r3, #1
 8010118:	4680      	mov	r8, r0
 801011a:	0b36      	lsrs	r6, r6, #12
 801011c:	0d6d      	lsrs	r5, r5, #21
 801011e:	4691      	mov	r9, r2
 8010120:	0b3f      	lsrs	r7, r7, #12
 8010122:	0d64      	lsrs	r4, r4, #21
 8010124:	0fdb      	lsrs	r3, r3, #31
 8010126:	428d      	cmp	r5, r1
 8010128:	d01e      	beq.n	8010168 <__gedf2+0x68>
 801012a:	428c      	cmp	r4, r1
 801012c:	d016      	beq.n	801015c <__gedf2+0x5c>
 801012e:	2d00      	cmp	r5, #0
 8010130:	d11e      	bne.n	8010170 <__gedf2+0x70>
 8010132:	4330      	orrs	r0, r6
 8010134:	4684      	mov	ip, r0
 8010136:	2c00      	cmp	r4, #0
 8010138:	d101      	bne.n	801013e <__gedf2+0x3e>
 801013a:	433a      	orrs	r2, r7
 801013c:	d023      	beq.n	8010186 <__gedf2+0x86>
 801013e:	4662      	mov	r2, ip
 8010140:	2a00      	cmp	r2, #0
 8010142:	d01a      	beq.n	801017a <__gedf2+0x7a>
 8010144:	459a      	cmp	sl, r3
 8010146:	d029      	beq.n	801019c <__gedf2+0x9c>
 8010148:	4651      	mov	r1, sl
 801014a:	2002      	movs	r0, #2
 801014c:	3901      	subs	r1, #1
 801014e:	4008      	ands	r0, r1
 8010150:	3801      	subs	r0, #1
 8010152:	bc1c      	pop	{r2, r3, r4}
 8010154:	4690      	mov	r8, r2
 8010156:	4699      	mov	r9, r3
 8010158:	46a2      	mov	sl, r4
 801015a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015c:	0039      	movs	r1, r7
 801015e:	4311      	orrs	r1, r2
 8010160:	d0e5      	beq.n	801012e <__gedf2+0x2e>
 8010162:	2002      	movs	r0, #2
 8010164:	4240      	negs	r0, r0
 8010166:	e7f4      	b.n	8010152 <__gedf2+0x52>
 8010168:	4330      	orrs	r0, r6
 801016a:	d1fa      	bne.n	8010162 <__gedf2+0x62>
 801016c:	42ac      	cmp	r4, r5
 801016e:	d00f      	beq.n	8010190 <__gedf2+0x90>
 8010170:	2c00      	cmp	r4, #0
 8010172:	d10f      	bne.n	8010194 <__gedf2+0x94>
 8010174:	433a      	orrs	r2, r7
 8010176:	d0e7      	beq.n	8010148 <__gedf2+0x48>
 8010178:	e00c      	b.n	8010194 <__gedf2+0x94>
 801017a:	2201      	movs	r2, #1
 801017c:	3b01      	subs	r3, #1
 801017e:	4393      	bics	r3, r2
 8010180:	0018      	movs	r0, r3
 8010182:	3001      	adds	r0, #1
 8010184:	e7e5      	b.n	8010152 <__gedf2+0x52>
 8010186:	4663      	mov	r3, ip
 8010188:	2000      	movs	r0, #0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d0e1      	beq.n	8010152 <__gedf2+0x52>
 801018e:	e7db      	b.n	8010148 <__gedf2+0x48>
 8010190:	433a      	orrs	r2, r7
 8010192:	d1e6      	bne.n	8010162 <__gedf2+0x62>
 8010194:	459a      	cmp	sl, r3
 8010196:	d1d7      	bne.n	8010148 <__gedf2+0x48>
 8010198:	42a5      	cmp	r5, r4
 801019a:	dcd5      	bgt.n	8010148 <__gedf2+0x48>
 801019c:	42a5      	cmp	r5, r4
 801019e:	db05      	blt.n	80101ac <__gedf2+0xac>
 80101a0:	42be      	cmp	r6, r7
 80101a2:	d8d1      	bhi.n	8010148 <__gedf2+0x48>
 80101a4:	d008      	beq.n	80101b8 <__gedf2+0xb8>
 80101a6:	2000      	movs	r0, #0
 80101a8:	42be      	cmp	r6, r7
 80101aa:	d2d2      	bcs.n	8010152 <__gedf2+0x52>
 80101ac:	4650      	mov	r0, sl
 80101ae:	2301      	movs	r3, #1
 80101b0:	3801      	subs	r0, #1
 80101b2:	4398      	bics	r0, r3
 80101b4:	3001      	adds	r0, #1
 80101b6:	e7cc      	b.n	8010152 <__gedf2+0x52>
 80101b8:	45c8      	cmp	r8, r9
 80101ba:	d8c5      	bhi.n	8010148 <__gedf2+0x48>
 80101bc:	2000      	movs	r0, #0
 80101be:	45c8      	cmp	r8, r9
 80101c0:	d3f4      	bcc.n	80101ac <__gedf2+0xac>
 80101c2:	e7c6      	b.n	8010152 <__gedf2+0x52>
 80101c4:	000007ff 	.word	0x000007ff

080101c8 <__ledf2>:
 80101c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ca:	464f      	mov	r7, r9
 80101cc:	4646      	mov	r6, r8
 80101ce:	46d6      	mov	lr, sl
 80101d0:	004d      	lsls	r5, r1, #1
 80101d2:	b5c0      	push	{r6, r7, lr}
 80101d4:	030e      	lsls	r6, r1, #12
 80101d6:	0fc9      	lsrs	r1, r1, #31
 80101d8:	468a      	mov	sl, r1
 80101da:	492e      	ldr	r1, [pc, #184]	; (8010294 <__ledf2+0xcc>)
 80101dc:	031f      	lsls	r7, r3, #12
 80101de:	005c      	lsls	r4, r3, #1
 80101e0:	4680      	mov	r8, r0
 80101e2:	0b36      	lsrs	r6, r6, #12
 80101e4:	0d6d      	lsrs	r5, r5, #21
 80101e6:	4691      	mov	r9, r2
 80101e8:	0b3f      	lsrs	r7, r7, #12
 80101ea:	0d64      	lsrs	r4, r4, #21
 80101ec:	0fdb      	lsrs	r3, r3, #31
 80101ee:	428d      	cmp	r5, r1
 80101f0:	d018      	beq.n	8010224 <__ledf2+0x5c>
 80101f2:	428c      	cmp	r4, r1
 80101f4:	d011      	beq.n	801021a <__ledf2+0x52>
 80101f6:	2d00      	cmp	r5, #0
 80101f8:	d118      	bne.n	801022c <__ledf2+0x64>
 80101fa:	4330      	orrs	r0, r6
 80101fc:	4684      	mov	ip, r0
 80101fe:	2c00      	cmp	r4, #0
 8010200:	d11e      	bne.n	8010240 <__ledf2+0x78>
 8010202:	433a      	orrs	r2, r7
 8010204:	d11c      	bne.n	8010240 <__ledf2+0x78>
 8010206:	4663      	mov	r3, ip
 8010208:	2000      	movs	r0, #0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d030      	beq.n	8010270 <__ledf2+0xa8>
 801020e:	4651      	mov	r1, sl
 8010210:	2002      	movs	r0, #2
 8010212:	3901      	subs	r1, #1
 8010214:	4008      	ands	r0, r1
 8010216:	3801      	subs	r0, #1
 8010218:	e02a      	b.n	8010270 <__ledf2+0xa8>
 801021a:	0039      	movs	r1, r7
 801021c:	4311      	orrs	r1, r2
 801021e:	d0ea      	beq.n	80101f6 <__ledf2+0x2e>
 8010220:	2002      	movs	r0, #2
 8010222:	e025      	b.n	8010270 <__ledf2+0xa8>
 8010224:	4330      	orrs	r0, r6
 8010226:	d1fb      	bne.n	8010220 <__ledf2+0x58>
 8010228:	42ac      	cmp	r4, r5
 801022a:	d026      	beq.n	801027a <__ledf2+0xb2>
 801022c:	2c00      	cmp	r4, #0
 801022e:	d126      	bne.n	801027e <__ledf2+0xb6>
 8010230:	433a      	orrs	r2, r7
 8010232:	d124      	bne.n	801027e <__ledf2+0xb6>
 8010234:	4651      	mov	r1, sl
 8010236:	2002      	movs	r0, #2
 8010238:	3901      	subs	r1, #1
 801023a:	4008      	ands	r0, r1
 801023c:	3801      	subs	r0, #1
 801023e:	e017      	b.n	8010270 <__ledf2+0xa8>
 8010240:	4662      	mov	r2, ip
 8010242:	2a00      	cmp	r2, #0
 8010244:	d00f      	beq.n	8010266 <__ledf2+0x9e>
 8010246:	459a      	cmp	sl, r3
 8010248:	d1e1      	bne.n	801020e <__ledf2+0x46>
 801024a:	42a5      	cmp	r5, r4
 801024c:	db05      	blt.n	801025a <__ledf2+0x92>
 801024e:	42be      	cmp	r6, r7
 8010250:	d8dd      	bhi.n	801020e <__ledf2+0x46>
 8010252:	d019      	beq.n	8010288 <__ledf2+0xc0>
 8010254:	2000      	movs	r0, #0
 8010256:	42be      	cmp	r6, r7
 8010258:	d20a      	bcs.n	8010270 <__ledf2+0xa8>
 801025a:	4650      	mov	r0, sl
 801025c:	2301      	movs	r3, #1
 801025e:	3801      	subs	r0, #1
 8010260:	4398      	bics	r0, r3
 8010262:	3001      	adds	r0, #1
 8010264:	e004      	b.n	8010270 <__ledf2+0xa8>
 8010266:	2201      	movs	r2, #1
 8010268:	3b01      	subs	r3, #1
 801026a:	4393      	bics	r3, r2
 801026c:	0018      	movs	r0, r3
 801026e:	3001      	adds	r0, #1
 8010270:	bc1c      	pop	{r2, r3, r4}
 8010272:	4690      	mov	r8, r2
 8010274:	4699      	mov	r9, r3
 8010276:	46a2      	mov	sl, r4
 8010278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801027a:	433a      	orrs	r2, r7
 801027c:	d1d0      	bne.n	8010220 <__ledf2+0x58>
 801027e:	459a      	cmp	sl, r3
 8010280:	d1c5      	bne.n	801020e <__ledf2+0x46>
 8010282:	42a5      	cmp	r5, r4
 8010284:	dcc3      	bgt.n	801020e <__ledf2+0x46>
 8010286:	e7e0      	b.n	801024a <__ledf2+0x82>
 8010288:	45c8      	cmp	r8, r9
 801028a:	d8c0      	bhi.n	801020e <__ledf2+0x46>
 801028c:	2000      	movs	r0, #0
 801028e:	45c8      	cmp	r8, r9
 8010290:	d3e3      	bcc.n	801025a <__ledf2+0x92>
 8010292:	e7ed      	b.n	8010270 <__ledf2+0xa8>
 8010294:	000007ff 	.word	0x000007ff

08010298 <__aeabi_dmul>:
 8010298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029a:	4657      	mov	r7, sl
 801029c:	46de      	mov	lr, fp
 801029e:	464e      	mov	r6, r9
 80102a0:	4645      	mov	r5, r8
 80102a2:	b5e0      	push	{r5, r6, r7, lr}
 80102a4:	4683      	mov	fp, r0
 80102a6:	0006      	movs	r6, r0
 80102a8:	030f      	lsls	r7, r1, #12
 80102aa:	0048      	lsls	r0, r1, #1
 80102ac:	b087      	sub	sp, #28
 80102ae:	4692      	mov	sl, r2
 80102b0:	001d      	movs	r5, r3
 80102b2:	0b3f      	lsrs	r7, r7, #12
 80102b4:	0d40      	lsrs	r0, r0, #21
 80102b6:	0fcc      	lsrs	r4, r1, #31
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d100      	bne.n	80102be <__aeabi_dmul+0x26>
 80102bc:	e06f      	b.n	801039e <__aeabi_dmul+0x106>
 80102be:	4bde      	ldr	r3, [pc, #888]	; (8010638 <__aeabi_dmul+0x3a0>)
 80102c0:	4298      	cmp	r0, r3
 80102c2:	d038      	beq.n	8010336 <__aeabi_dmul+0x9e>
 80102c4:	2380      	movs	r3, #128	; 0x80
 80102c6:	00ff      	lsls	r7, r7, #3
 80102c8:	041b      	lsls	r3, r3, #16
 80102ca:	431f      	orrs	r7, r3
 80102cc:	0f73      	lsrs	r3, r6, #29
 80102ce:	433b      	orrs	r3, r7
 80102d0:	9301      	str	r3, [sp, #4]
 80102d2:	4bda      	ldr	r3, [pc, #872]	; (801063c <__aeabi_dmul+0x3a4>)
 80102d4:	2700      	movs	r7, #0
 80102d6:	4699      	mov	r9, r3
 80102d8:	2300      	movs	r3, #0
 80102da:	469b      	mov	fp, r3
 80102dc:	00f6      	lsls	r6, r6, #3
 80102de:	4481      	add	r9, r0
 80102e0:	032b      	lsls	r3, r5, #12
 80102e2:	0069      	lsls	r1, r5, #1
 80102e4:	0b1b      	lsrs	r3, r3, #12
 80102e6:	4652      	mov	r2, sl
 80102e8:	4698      	mov	r8, r3
 80102ea:	0d49      	lsrs	r1, r1, #21
 80102ec:	0fed      	lsrs	r5, r5, #31
 80102ee:	2900      	cmp	r1, #0
 80102f0:	d100      	bne.n	80102f4 <__aeabi_dmul+0x5c>
 80102f2:	e085      	b.n	8010400 <__aeabi_dmul+0x168>
 80102f4:	4bd0      	ldr	r3, [pc, #832]	; (8010638 <__aeabi_dmul+0x3a0>)
 80102f6:	4299      	cmp	r1, r3
 80102f8:	d100      	bne.n	80102fc <__aeabi_dmul+0x64>
 80102fa:	e073      	b.n	80103e4 <__aeabi_dmul+0x14c>
 80102fc:	4643      	mov	r3, r8
 80102fe:	00da      	lsls	r2, r3, #3
 8010300:	2380      	movs	r3, #128	; 0x80
 8010302:	041b      	lsls	r3, r3, #16
 8010304:	4313      	orrs	r3, r2
 8010306:	4652      	mov	r2, sl
 8010308:	48cc      	ldr	r0, [pc, #816]	; (801063c <__aeabi_dmul+0x3a4>)
 801030a:	0f52      	lsrs	r2, r2, #29
 801030c:	4684      	mov	ip, r0
 801030e:	4313      	orrs	r3, r2
 8010310:	4652      	mov	r2, sl
 8010312:	2000      	movs	r0, #0
 8010314:	4461      	add	r1, ip
 8010316:	00d2      	lsls	r2, r2, #3
 8010318:	4489      	add	r9, r1
 801031a:	0021      	movs	r1, r4
 801031c:	4069      	eors	r1, r5
 801031e:	9100      	str	r1, [sp, #0]
 8010320:	468c      	mov	ip, r1
 8010322:	2101      	movs	r1, #1
 8010324:	4449      	add	r1, r9
 8010326:	468a      	mov	sl, r1
 8010328:	2f0f      	cmp	r7, #15
 801032a:	d900      	bls.n	801032e <__aeabi_dmul+0x96>
 801032c:	e090      	b.n	8010450 <__aeabi_dmul+0x1b8>
 801032e:	49c4      	ldr	r1, [pc, #784]	; (8010640 <__aeabi_dmul+0x3a8>)
 8010330:	00bf      	lsls	r7, r7, #2
 8010332:	59cf      	ldr	r7, [r1, r7]
 8010334:	46bf      	mov	pc, r7
 8010336:	465b      	mov	r3, fp
 8010338:	433b      	orrs	r3, r7
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	d000      	beq.n	8010340 <__aeabi_dmul+0xa8>
 801033e:	e16a      	b.n	8010616 <__aeabi_dmul+0x37e>
 8010340:	2302      	movs	r3, #2
 8010342:	2708      	movs	r7, #8
 8010344:	2600      	movs	r6, #0
 8010346:	4681      	mov	r9, r0
 8010348:	469b      	mov	fp, r3
 801034a:	e7c9      	b.n	80102e0 <__aeabi_dmul+0x48>
 801034c:	0032      	movs	r2, r6
 801034e:	4658      	mov	r0, fp
 8010350:	9b01      	ldr	r3, [sp, #4]
 8010352:	4661      	mov	r1, ip
 8010354:	9100      	str	r1, [sp, #0]
 8010356:	2802      	cmp	r0, #2
 8010358:	d100      	bne.n	801035c <__aeabi_dmul+0xc4>
 801035a:	e075      	b.n	8010448 <__aeabi_dmul+0x1b0>
 801035c:	2803      	cmp	r0, #3
 801035e:	d100      	bne.n	8010362 <__aeabi_dmul+0xca>
 8010360:	e1fe      	b.n	8010760 <__aeabi_dmul+0x4c8>
 8010362:	2801      	cmp	r0, #1
 8010364:	d000      	beq.n	8010368 <__aeabi_dmul+0xd0>
 8010366:	e12c      	b.n	80105c2 <__aeabi_dmul+0x32a>
 8010368:	2300      	movs	r3, #0
 801036a:	2700      	movs	r7, #0
 801036c:	2600      	movs	r6, #0
 801036e:	2500      	movs	r5, #0
 8010370:	033f      	lsls	r7, r7, #12
 8010372:	0d2a      	lsrs	r2, r5, #20
 8010374:	0b3f      	lsrs	r7, r7, #12
 8010376:	48b3      	ldr	r0, [pc, #716]	; (8010644 <__aeabi_dmul+0x3ac>)
 8010378:	0512      	lsls	r2, r2, #20
 801037a:	433a      	orrs	r2, r7
 801037c:	4002      	ands	r2, r0
 801037e:	051b      	lsls	r3, r3, #20
 8010380:	4313      	orrs	r3, r2
 8010382:	9a00      	ldr	r2, [sp, #0]
 8010384:	005b      	lsls	r3, r3, #1
 8010386:	07d1      	lsls	r1, r2, #31
 8010388:	085b      	lsrs	r3, r3, #1
 801038a:	430b      	orrs	r3, r1
 801038c:	0030      	movs	r0, r6
 801038e:	0019      	movs	r1, r3
 8010390:	b007      	add	sp, #28
 8010392:	bc3c      	pop	{r2, r3, r4, r5}
 8010394:	4690      	mov	r8, r2
 8010396:	4699      	mov	r9, r3
 8010398:	46a2      	mov	sl, r4
 801039a:	46ab      	mov	fp, r5
 801039c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801039e:	465b      	mov	r3, fp
 80103a0:	433b      	orrs	r3, r7
 80103a2:	9301      	str	r3, [sp, #4]
 80103a4:	d100      	bne.n	80103a8 <__aeabi_dmul+0x110>
 80103a6:	e12f      	b.n	8010608 <__aeabi_dmul+0x370>
 80103a8:	2f00      	cmp	r7, #0
 80103aa:	d100      	bne.n	80103ae <__aeabi_dmul+0x116>
 80103ac:	e1a5      	b.n	80106fa <__aeabi_dmul+0x462>
 80103ae:	0038      	movs	r0, r7
 80103b0:	f7fe fb84 	bl	800eabc <__clzsi2>
 80103b4:	0003      	movs	r3, r0
 80103b6:	3b0b      	subs	r3, #11
 80103b8:	2b1c      	cmp	r3, #28
 80103ba:	dd00      	ble.n	80103be <__aeabi_dmul+0x126>
 80103bc:	e196      	b.n	80106ec <__aeabi_dmul+0x454>
 80103be:	221d      	movs	r2, #29
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	465a      	mov	r2, fp
 80103c4:	0001      	movs	r1, r0
 80103c6:	40da      	lsrs	r2, r3
 80103c8:	465e      	mov	r6, fp
 80103ca:	3908      	subs	r1, #8
 80103cc:	408f      	lsls	r7, r1
 80103ce:	0013      	movs	r3, r2
 80103d0:	408e      	lsls	r6, r1
 80103d2:	433b      	orrs	r3, r7
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	4b9c      	ldr	r3, [pc, #624]	; (8010648 <__aeabi_dmul+0x3b0>)
 80103d8:	2700      	movs	r7, #0
 80103da:	1a1b      	subs	r3, r3, r0
 80103dc:	4699      	mov	r9, r3
 80103de:	2300      	movs	r3, #0
 80103e0:	469b      	mov	fp, r3
 80103e2:	e77d      	b.n	80102e0 <__aeabi_dmul+0x48>
 80103e4:	4641      	mov	r1, r8
 80103e6:	4653      	mov	r3, sl
 80103e8:	430b      	orrs	r3, r1
 80103ea:	4993      	ldr	r1, [pc, #588]	; (8010638 <__aeabi_dmul+0x3a0>)
 80103ec:	468c      	mov	ip, r1
 80103ee:	44e1      	add	r9, ip
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d000      	beq.n	80103f6 <__aeabi_dmul+0x15e>
 80103f4:	e11a      	b.n	801062c <__aeabi_dmul+0x394>
 80103f6:	2202      	movs	r2, #2
 80103f8:	2002      	movs	r0, #2
 80103fa:	4317      	orrs	r7, r2
 80103fc:	2200      	movs	r2, #0
 80103fe:	e78c      	b.n	801031a <__aeabi_dmul+0x82>
 8010400:	4313      	orrs	r3, r2
 8010402:	d100      	bne.n	8010406 <__aeabi_dmul+0x16e>
 8010404:	e10d      	b.n	8010622 <__aeabi_dmul+0x38a>
 8010406:	4643      	mov	r3, r8
 8010408:	2b00      	cmp	r3, #0
 801040a:	d100      	bne.n	801040e <__aeabi_dmul+0x176>
 801040c:	e181      	b.n	8010712 <__aeabi_dmul+0x47a>
 801040e:	4640      	mov	r0, r8
 8010410:	f7fe fb54 	bl	800eabc <__clzsi2>
 8010414:	0002      	movs	r2, r0
 8010416:	3a0b      	subs	r2, #11
 8010418:	2a1c      	cmp	r2, #28
 801041a:	dd00      	ble.n	801041e <__aeabi_dmul+0x186>
 801041c:	e172      	b.n	8010704 <__aeabi_dmul+0x46c>
 801041e:	0001      	movs	r1, r0
 8010420:	4643      	mov	r3, r8
 8010422:	3908      	subs	r1, #8
 8010424:	408b      	lsls	r3, r1
 8010426:	4698      	mov	r8, r3
 8010428:	231d      	movs	r3, #29
 801042a:	1a9a      	subs	r2, r3, r2
 801042c:	4653      	mov	r3, sl
 801042e:	40d3      	lsrs	r3, r2
 8010430:	001a      	movs	r2, r3
 8010432:	4643      	mov	r3, r8
 8010434:	4313      	orrs	r3, r2
 8010436:	4652      	mov	r2, sl
 8010438:	408a      	lsls	r2, r1
 801043a:	4649      	mov	r1, r9
 801043c:	1a08      	subs	r0, r1, r0
 801043e:	4982      	ldr	r1, [pc, #520]	; (8010648 <__aeabi_dmul+0x3b0>)
 8010440:	4689      	mov	r9, r1
 8010442:	4481      	add	r9, r0
 8010444:	2000      	movs	r0, #0
 8010446:	e768      	b.n	801031a <__aeabi_dmul+0x82>
 8010448:	4b7b      	ldr	r3, [pc, #492]	; (8010638 <__aeabi_dmul+0x3a0>)
 801044a:	2700      	movs	r7, #0
 801044c:	2600      	movs	r6, #0
 801044e:	e78e      	b.n	801036e <__aeabi_dmul+0xd6>
 8010450:	0c14      	lsrs	r4, r2, #16
 8010452:	0412      	lsls	r2, r2, #16
 8010454:	0c12      	lsrs	r2, r2, #16
 8010456:	0011      	movs	r1, r2
 8010458:	0c37      	lsrs	r7, r6, #16
 801045a:	0436      	lsls	r6, r6, #16
 801045c:	0c35      	lsrs	r5, r6, #16
 801045e:	4379      	muls	r1, r7
 8010460:	0028      	movs	r0, r5
 8010462:	468c      	mov	ip, r1
 8010464:	002e      	movs	r6, r5
 8010466:	4360      	muls	r0, r4
 8010468:	4460      	add	r0, ip
 801046a:	4683      	mov	fp, r0
 801046c:	4356      	muls	r6, r2
 801046e:	0021      	movs	r1, r4
 8010470:	0c30      	lsrs	r0, r6, #16
 8010472:	4680      	mov	r8, r0
 8010474:	4658      	mov	r0, fp
 8010476:	4379      	muls	r1, r7
 8010478:	4440      	add	r0, r8
 801047a:	9102      	str	r1, [sp, #8]
 801047c:	4584      	cmp	ip, r0
 801047e:	d906      	bls.n	801048e <__aeabi_dmul+0x1f6>
 8010480:	4688      	mov	r8, r1
 8010482:	2180      	movs	r1, #128	; 0x80
 8010484:	0249      	lsls	r1, r1, #9
 8010486:	468c      	mov	ip, r1
 8010488:	44e0      	add	r8, ip
 801048a:	4641      	mov	r1, r8
 801048c:	9102      	str	r1, [sp, #8]
 801048e:	0436      	lsls	r6, r6, #16
 8010490:	0c01      	lsrs	r1, r0, #16
 8010492:	0c36      	lsrs	r6, r6, #16
 8010494:	0400      	lsls	r0, r0, #16
 8010496:	468b      	mov	fp, r1
 8010498:	1981      	adds	r1, r0, r6
 801049a:	0c1e      	lsrs	r6, r3, #16
 801049c:	041b      	lsls	r3, r3, #16
 801049e:	0c1b      	lsrs	r3, r3, #16
 80104a0:	9103      	str	r1, [sp, #12]
 80104a2:	0019      	movs	r1, r3
 80104a4:	4379      	muls	r1, r7
 80104a6:	468c      	mov	ip, r1
 80104a8:	0028      	movs	r0, r5
 80104aa:	4375      	muls	r5, r6
 80104ac:	4465      	add	r5, ip
 80104ae:	46a8      	mov	r8, r5
 80104b0:	4358      	muls	r0, r3
 80104b2:	0c05      	lsrs	r5, r0, #16
 80104b4:	4445      	add	r5, r8
 80104b6:	4377      	muls	r7, r6
 80104b8:	42a9      	cmp	r1, r5
 80104ba:	d903      	bls.n	80104c4 <__aeabi_dmul+0x22c>
 80104bc:	2180      	movs	r1, #128	; 0x80
 80104be:	0249      	lsls	r1, r1, #9
 80104c0:	468c      	mov	ip, r1
 80104c2:	4467      	add	r7, ip
 80104c4:	0c29      	lsrs	r1, r5, #16
 80104c6:	468c      	mov	ip, r1
 80104c8:	0039      	movs	r1, r7
 80104ca:	0400      	lsls	r0, r0, #16
 80104cc:	0c00      	lsrs	r0, r0, #16
 80104ce:	042d      	lsls	r5, r5, #16
 80104d0:	182d      	adds	r5, r5, r0
 80104d2:	4461      	add	r1, ip
 80104d4:	44ab      	add	fp, r5
 80104d6:	9105      	str	r1, [sp, #20]
 80104d8:	4659      	mov	r1, fp
 80104da:	9104      	str	r1, [sp, #16]
 80104dc:	9901      	ldr	r1, [sp, #4]
 80104de:	040f      	lsls	r7, r1, #16
 80104e0:	0c3f      	lsrs	r7, r7, #16
 80104e2:	0c08      	lsrs	r0, r1, #16
 80104e4:	0039      	movs	r1, r7
 80104e6:	4351      	muls	r1, r2
 80104e8:	4342      	muls	r2, r0
 80104ea:	4690      	mov	r8, r2
 80104ec:	0002      	movs	r2, r0
 80104ee:	468c      	mov	ip, r1
 80104f0:	0c09      	lsrs	r1, r1, #16
 80104f2:	468b      	mov	fp, r1
 80104f4:	4362      	muls	r2, r4
 80104f6:	437c      	muls	r4, r7
 80104f8:	4444      	add	r4, r8
 80104fa:	445c      	add	r4, fp
 80104fc:	45a0      	cmp	r8, r4
 80104fe:	d903      	bls.n	8010508 <__aeabi_dmul+0x270>
 8010500:	2180      	movs	r1, #128	; 0x80
 8010502:	0249      	lsls	r1, r1, #9
 8010504:	4688      	mov	r8, r1
 8010506:	4442      	add	r2, r8
 8010508:	0c21      	lsrs	r1, r4, #16
 801050a:	4688      	mov	r8, r1
 801050c:	4661      	mov	r1, ip
 801050e:	0409      	lsls	r1, r1, #16
 8010510:	0c09      	lsrs	r1, r1, #16
 8010512:	468c      	mov	ip, r1
 8010514:	0039      	movs	r1, r7
 8010516:	4359      	muls	r1, r3
 8010518:	4343      	muls	r3, r0
 801051a:	4370      	muls	r0, r6
 801051c:	437e      	muls	r6, r7
 801051e:	0c0f      	lsrs	r7, r1, #16
 8010520:	18f6      	adds	r6, r6, r3
 8010522:	0424      	lsls	r4, r4, #16
 8010524:	19be      	adds	r6, r7, r6
 8010526:	4464      	add	r4, ip
 8010528:	4442      	add	r2, r8
 801052a:	468c      	mov	ip, r1
 801052c:	42b3      	cmp	r3, r6
 801052e:	d903      	bls.n	8010538 <__aeabi_dmul+0x2a0>
 8010530:	2380      	movs	r3, #128	; 0x80
 8010532:	025b      	lsls	r3, r3, #9
 8010534:	4698      	mov	r8, r3
 8010536:	4440      	add	r0, r8
 8010538:	9b02      	ldr	r3, [sp, #8]
 801053a:	4661      	mov	r1, ip
 801053c:	4698      	mov	r8, r3
 801053e:	9b04      	ldr	r3, [sp, #16]
 8010540:	0437      	lsls	r7, r6, #16
 8010542:	4443      	add	r3, r8
 8010544:	469b      	mov	fp, r3
 8010546:	45ab      	cmp	fp, r5
 8010548:	41ad      	sbcs	r5, r5
 801054a:	426b      	negs	r3, r5
 801054c:	040d      	lsls	r5, r1, #16
 801054e:	9905      	ldr	r1, [sp, #20]
 8010550:	0c2d      	lsrs	r5, r5, #16
 8010552:	468c      	mov	ip, r1
 8010554:	197f      	adds	r7, r7, r5
 8010556:	4467      	add	r7, ip
 8010558:	18fd      	adds	r5, r7, r3
 801055a:	46a8      	mov	r8, r5
 801055c:	465d      	mov	r5, fp
 801055e:	192d      	adds	r5, r5, r4
 8010560:	42a5      	cmp	r5, r4
 8010562:	41a4      	sbcs	r4, r4
 8010564:	4693      	mov	fp, r2
 8010566:	4264      	negs	r4, r4
 8010568:	46a4      	mov	ip, r4
 801056a:	44c3      	add	fp, r8
 801056c:	44dc      	add	ip, fp
 801056e:	428f      	cmp	r7, r1
 8010570:	41bf      	sbcs	r7, r7
 8010572:	4598      	cmp	r8, r3
 8010574:	419b      	sbcs	r3, r3
 8010576:	4593      	cmp	fp, r2
 8010578:	4192      	sbcs	r2, r2
 801057a:	45a4      	cmp	ip, r4
 801057c:	41a4      	sbcs	r4, r4
 801057e:	425b      	negs	r3, r3
 8010580:	427f      	negs	r7, r7
 8010582:	431f      	orrs	r7, r3
 8010584:	0c36      	lsrs	r6, r6, #16
 8010586:	4252      	negs	r2, r2
 8010588:	4264      	negs	r4, r4
 801058a:	19bf      	adds	r7, r7, r6
 801058c:	4322      	orrs	r2, r4
 801058e:	18bf      	adds	r7, r7, r2
 8010590:	4662      	mov	r2, ip
 8010592:	1838      	adds	r0, r7, r0
 8010594:	0243      	lsls	r3, r0, #9
 8010596:	0dd2      	lsrs	r2, r2, #23
 8010598:	9903      	ldr	r1, [sp, #12]
 801059a:	4313      	orrs	r3, r2
 801059c:	026a      	lsls	r2, r5, #9
 801059e:	430a      	orrs	r2, r1
 80105a0:	1e50      	subs	r0, r2, #1
 80105a2:	4182      	sbcs	r2, r0
 80105a4:	4661      	mov	r1, ip
 80105a6:	0ded      	lsrs	r5, r5, #23
 80105a8:	432a      	orrs	r2, r5
 80105aa:	024e      	lsls	r6, r1, #9
 80105ac:	4332      	orrs	r2, r6
 80105ae:	01d9      	lsls	r1, r3, #7
 80105b0:	d400      	bmi.n	80105b4 <__aeabi_dmul+0x31c>
 80105b2:	e0b3      	b.n	801071c <__aeabi_dmul+0x484>
 80105b4:	2601      	movs	r6, #1
 80105b6:	0850      	lsrs	r0, r2, #1
 80105b8:	4032      	ands	r2, r6
 80105ba:	4302      	orrs	r2, r0
 80105bc:	07de      	lsls	r6, r3, #31
 80105be:	4332      	orrs	r2, r6
 80105c0:	085b      	lsrs	r3, r3, #1
 80105c2:	4c22      	ldr	r4, [pc, #136]	; (801064c <__aeabi_dmul+0x3b4>)
 80105c4:	4454      	add	r4, sl
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	dd62      	ble.n	8010690 <__aeabi_dmul+0x3f8>
 80105ca:	0751      	lsls	r1, r2, #29
 80105cc:	d009      	beq.n	80105e2 <__aeabi_dmul+0x34a>
 80105ce:	200f      	movs	r0, #15
 80105d0:	4010      	ands	r0, r2
 80105d2:	2804      	cmp	r0, #4
 80105d4:	d005      	beq.n	80105e2 <__aeabi_dmul+0x34a>
 80105d6:	1d10      	adds	r0, r2, #4
 80105d8:	4290      	cmp	r0, r2
 80105da:	4192      	sbcs	r2, r2
 80105dc:	4252      	negs	r2, r2
 80105de:	189b      	adds	r3, r3, r2
 80105e0:	0002      	movs	r2, r0
 80105e2:	01d9      	lsls	r1, r3, #7
 80105e4:	d504      	bpl.n	80105f0 <__aeabi_dmul+0x358>
 80105e6:	2480      	movs	r4, #128	; 0x80
 80105e8:	4819      	ldr	r0, [pc, #100]	; (8010650 <__aeabi_dmul+0x3b8>)
 80105ea:	00e4      	lsls	r4, r4, #3
 80105ec:	4003      	ands	r3, r0
 80105ee:	4454      	add	r4, sl
 80105f0:	4818      	ldr	r0, [pc, #96]	; (8010654 <__aeabi_dmul+0x3bc>)
 80105f2:	4284      	cmp	r4, r0
 80105f4:	dd00      	ble.n	80105f8 <__aeabi_dmul+0x360>
 80105f6:	e727      	b.n	8010448 <__aeabi_dmul+0x1b0>
 80105f8:	075e      	lsls	r6, r3, #29
 80105fa:	025b      	lsls	r3, r3, #9
 80105fc:	08d2      	lsrs	r2, r2, #3
 80105fe:	0b1f      	lsrs	r7, r3, #12
 8010600:	0563      	lsls	r3, r4, #21
 8010602:	4316      	orrs	r6, r2
 8010604:	0d5b      	lsrs	r3, r3, #21
 8010606:	e6b2      	b.n	801036e <__aeabi_dmul+0xd6>
 8010608:	2300      	movs	r3, #0
 801060a:	4699      	mov	r9, r3
 801060c:	3301      	adds	r3, #1
 801060e:	2704      	movs	r7, #4
 8010610:	2600      	movs	r6, #0
 8010612:	469b      	mov	fp, r3
 8010614:	e664      	b.n	80102e0 <__aeabi_dmul+0x48>
 8010616:	2303      	movs	r3, #3
 8010618:	9701      	str	r7, [sp, #4]
 801061a:	4681      	mov	r9, r0
 801061c:	270c      	movs	r7, #12
 801061e:	469b      	mov	fp, r3
 8010620:	e65e      	b.n	80102e0 <__aeabi_dmul+0x48>
 8010622:	2201      	movs	r2, #1
 8010624:	2001      	movs	r0, #1
 8010626:	4317      	orrs	r7, r2
 8010628:	2200      	movs	r2, #0
 801062a:	e676      	b.n	801031a <__aeabi_dmul+0x82>
 801062c:	2303      	movs	r3, #3
 801062e:	2003      	movs	r0, #3
 8010630:	431f      	orrs	r7, r3
 8010632:	4643      	mov	r3, r8
 8010634:	e671      	b.n	801031a <__aeabi_dmul+0x82>
 8010636:	46c0      	nop			; (mov r8, r8)
 8010638:	000007ff 	.word	0x000007ff
 801063c:	fffffc01 	.word	0xfffffc01
 8010640:	0801b868 	.word	0x0801b868
 8010644:	800fffff 	.word	0x800fffff
 8010648:	fffffc0d 	.word	0xfffffc0d
 801064c:	000003ff 	.word	0x000003ff
 8010650:	feffffff 	.word	0xfeffffff
 8010654:	000007fe 	.word	0x000007fe
 8010658:	2300      	movs	r3, #0
 801065a:	2780      	movs	r7, #128	; 0x80
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	033f      	lsls	r7, r7, #12
 8010660:	2600      	movs	r6, #0
 8010662:	4b43      	ldr	r3, [pc, #268]	; (8010770 <__aeabi_dmul+0x4d8>)
 8010664:	e683      	b.n	801036e <__aeabi_dmul+0xd6>
 8010666:	9b01      	ldr	r3, [sp, #4]
 8010668:	0032      	movs	r2, r6
 801066a:	46a4      	mov	ip, r4
 801066c:	4658      	mov	r0, fp
 801066e:	e670      	b.n	8010352 <__aeabi_dmul+0xba>
 8010670:	46ac      	mov	ip, r5
 8010672:	e66e      	b.n	8010352 <__aeabi_dmul+0xba>
 8010674:	2780      	movs	r7, #128	; 0x80
 8010676:	9901      	ldr	r1, [sp, #4]
 8010678:	033f      	lsls	r7, r7, #12
 801067a:	4239      	tst	r1, r7
 801067c:	d02d      	beq.n	80106da <__aeabi_dmul+0x442>
 801067e:	423b      	tst	r3, r7
 8010680:	d12b      	bne.n	80106da <__aeabi_dmul+0x442>
 8010682:	431f      	orrs	r7, r3
 8010684:	033f      	lsls	r7, r7, #12
 8010686:	0b3f      	lsrs	r7, r7, #12
 8010688:	9500      	str	r5, [sp, #0]
 801068a:	0016      	movs	r6, r2
 801068c:	4b38      	ldr	r3, [pc, #224]	; (8010770 <__aeabi_dmul+0x4d8>)
 801068e:	e66e      	b.n	801036e <__aeabi_dmul+0xd6>
 8010690:	2501      	movs	r5, #1
 8010692:	1b2d      	subs	r5, r5, r4
 8010694:	2d38      	cmp	r5, #56	; 0x38
 8010696:	dd00      	ble.n	801069a <__aeabi_dmul+0x402>
 8010698:	e666      	b.n	8010368 <__aeabi_dmul+0xd0>
 801069a:	2d1f      	cmp	r5, #31
 801069c:	dc40      	bgt.n	8010720 <__aeabi_dmul+0x488>
 801069e:	4835      	ldr	r0, [pc, #212]	; (8010774 <__aeabi_dmul+0x4dc>)
 80106a0:	001c      	movs	r4, r3
 80106a2:	4450      	add	r0, sl
 80106a4:	0016      	movs	r6, r2
 80106a6:	4082      	lsls	r2, r0
 80106a8:	4084      	lsls	r4, r0
 80106aa:	40ee      	lsrs	r6, r5
 80106ac:	1e50      	subs	r0, r2, #1
 80106ae:	4182      	sbcs	r2, r0
 80106b0:	4334      	orrs	r4, r6
 80106b2:	4314      	orrs	r4, r2
 80106b4:	40eb      	lsrs	r3, r5
 80106b6:	0762      	lsls	r2, r4, #29
 80106b8:	d009      	beq.n	80106ce <__aeabi_dmul+0x436>
 80106ba:	220f      	movs	r2, #15
 80106bc:	4022      	ands	r2, r4
 80106be:	2a04      	cmp	r2, #4
 80106c0:	d005      	beq.n	80106ce <__aeabi_dmul+0x436>
 80106c2:	0022      	movs	r2, r4
 80106c4:	1d14      	adds	r4, r2, #4
 80106c6:	4294      	cmp	r4, r2
 80106c8:	4180      	sbcs	r0, r0
 80106ca:	4240      	negs	r0, r0
 80106cc:	181b      	adds	r3, r3, r0
 80106ce:	021a      	lsls	r2, r3, #8
 80106d0:	d53e      	bpl.n	8010750 <__aeabi_dmul+0x4b8>
 80106d2:	2301      	movs	r3, #1
 80106d4:	2700      	movs	r7, #0
 80106d6:	2600      	movs	r6, #0
 80106d8:	e649      	b.n	801036e <__aeabi_dmul+0xd6>
 80106da:	2780      	movs	r7, #128	; 0x80
 80106dc:	9b01      	ldr	r3, [sp, #4]
 80106de:	033f      	lsls	r7, r7, #12
 80106e0:	431f      	orrs	r7, r3
 80106e2:	033f      	lsls	r7, r7, #12
 80106e4:	0b3f      	lsrs	r7, r7, #12
 80106e6:	9400      	str	r4, [sp, #0]
 80106e8:	4b21      	ldr	r3, [pc, #132]	; (8010770 <__aeabi_dmul+0x4d8>)
 80106ea:	e640      	b.n	801036e <__aeabi_dmul+0xd6>
 80106ec:	0003      	movs	r3, r0
 80106ee:	465a      	mov	r2, fp
 80106f0:	3b28      	subs	r3, #40	; 0x28
 80106f2:	409a      	lsls	r2, r3
 80106f4:	2600      	movs	r6, #0
 80106f6:	9201      	str	r2, [sp, #4]
 80106f8:	e66d      	b.n	80103d6 <__aeabi_dmul+0x13e>
 80106fa:	4658      	mov	r0, fp
 80106fc:	f7fe f9de 	bl	800eabc <__clzsi2>
 8010700:	3020      	adds	r0, #32
 8010702:	e657      	b.n	80103b4 <__aeabi_dmul+0x11c>
 8010704:	0003      	movs	r3, r0
 8010706:	4652      	mov	r2, sl
 8010708:	3b28      	subs	r3, #40	; 0x28
 801070a:	409a      	lsls	r2, r3
 801070c:	0013      	movs	r3, r2
 801070e:	2200      	movs	r2, #0
 8010710:	e693      	b.n	801043a <__aeabi_dmul+0x1a2>
 8010712:	4650      	mov	r0, sl
 8010714:	f7fe f9d2 	bl	800eabc <__clzsi2>
 8010718:	3020      	adds	r0, #32
 801071a:	e67b      	b.n	8010414 <__aeabi_dmul+0x17c>
 801071c:	46ca      	mov	sl, r9
 801071e:	e750      	b.n	80105c2 <__aeabi_dmul+0x32a>
 8010720:	201f      	movs	r0, #31
 8010722:	001e      	movs	r6, r3
 8010724:	4240      	negs	r0, r0
 8010726:	1b04      	subs	r4, r0, r4
 8010728:	40e6      	lsrs	r6, r4
 801072a:	2d20      	cmp	r5, #32
 801072c:	d003      	beq.n	8010736 <__aeabi_dmul+0x49e>
 801072e:	4c12      	ldr	r4, [pc, #72]	; (8010778 <__aeabi_dmul+0x4e0>)
 8010730:	4454      	add	r4, sl
 8010732:	40a3      	lsls	r3, r4
 8010734:	431a      	orrs	r2, r3
 8010736:	1e50      	subs	r0, r2, #1
 8010738:	4182      	sbcs	r2, r0
 801073a:	4332      	orrs	r2, r6
 801073c:	2607      	movs	r6, #7
 801073e:	2700      	movs	r7, #0
 8010740:	4016      	ands	r6, r2
 8010742:	d009      	beq.n	8010758 <__aeabi_dmul+0x4c0>
 8010744:	200f      	movs	r0, #15
 8010746:	2300      	movs	r3, #0
 8010748:	4010      	ands	r0, r2
 801074a:	0014      	movs	r4, r2
 801074c:	2804      	cmp	r0, #4
 801074e:	d1b9      	bne.n	80106c4 <__aeabi_dmul+0x42c>
 8010750:	0022      	movs	r2, r4
 8010752:	075e      	lsls	r6, r3, #29
 8010754:	025b      	lsls	r3, r3, #9
 8010756:	0b1f      	lsrs	r7, r3, #12
 8010758:	08d2      	lsrs	r2, r2, #3
 801075a:	4316      	orrs	r6, r2
 801075c:	2300      	movs	r3, #0
 801075e:	e606      	b.n	801036e <__aeabi_dmul+0xd6>
 8010760:	2780      	movs	r7, #128	; 0x80
 8010762:	033f      	lsls	r7, r7, #12
 8010764:	431f      	orrs	r7, r3
 8010766:	033f      	lsls	r7, r7, #12
 8010768:	0b3f      	lsrs	r7, r7, #12
 801076a:	0016      	movs	r6, r2
 801076c:	4b00      	ldr	r3, [pc, #0]	; (8010770 <__aeabi_dmul+0x4d8>)
 801076e:	e5fe      	b.n	801036e <__aeabi_dmul+0xd6>
 8010770:	000007ff 	.word	0x000007ff
 8010774:	0000041e 	.word	0x0000041e
 8010778:	0000043e 	.word	0x0000043e

0801077c <__aeabi_dsub>:
 801077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077e:	4657      	mov	r7, sl
 8010780:	464e      	mov	r6, r9
 8010782:	4645      	mov	r5, r8
 8010784:	46de      	mov	lr, fp
 8010786:	000c      	movs	r4, r1
 8010788:	0309      	lsls	r1, r1, #12
 801078a:	b5e0      	push	{r5, r6, r7, lr}
 801078c:	0a49      	lsrs	r1, r1, #9
 801078e:	0f46      	lsrs	r6, r0, #29
 8010790:	005f      	lsls	r7, r3, #1
 8010792:	4331      	orrs	r1, r6
 8010794:	031e      	lsls	r6, r3, #12
 8010796:	0fdb      	lsrs	r3, r3, #31
 8010798:	0a76      	lsrs	r6, r6, #9
 801079a:	469b      	mov	fp, r3
 801079c:	0f53      	lsrs	r3, r2, #29
 801079e:	4333      	orrs	r3, r6
 80107a0:	4ec8      	ldr	r6, [pc, #800]	; (8010ac4 <__aeabi_dsub+0x348>)
 80107a2:	0065      	lsls	r5, r4, #1
 80107a4:	00c0      	lsls	r0, r0, #3
 80107a6:	0fe4      	lsrs	r4, r4, #31
 80107a8:	00d2      	lsls	r2, r2, #3
 80107aa:	0d6d      	lsrs	r5, r5, #21
 80107ac:	46a2      	mov	sl, r4
 80107ae:	4681      	mov	r9, r0
 80107b0:	0d7f      	lsrs	r7, r7, #21
 80107b2:	469c      	mov	ip, r3
 80107b4:	4690      	mov	r8, r2
 80107b6:	42b7      	cmp	r7, r6
 80107b8:	d100      	bne.n	80107bc <__aeabi_dsub+0x40>
 80107ba:	e0b9      	b.n	8010930 <__aeabi_dsub+0x1b4>
 80107bc:	465b      	mov	r3, fp
 80107be:	2601      	movs	r6, #1
 80107c0:	4073      	eors	r3, r6
 80107c2:	469b      	mov	fp, r3
 80107c4:	1bee      	subs	r6, r5, r7
 80107c6:	45a3      	cmp	fp, r4
 80107c8:	d100      	bne.n	80107cc <__aeabi_dsub+0x50>
 80107ca:	e083      	b.n	80108d4 <__aeabi_dsub+0x158>
 80107cc:	2e00      	cmp	r6, #0
 80107ce:	dd63      	ble.n	8010898 <__aeabi_dsub+0x11c>
 80107d0:	2f00      	cmp	r7, #0
 80107d2:	d000      	beq.n	80107d6 <__aeabi_dsub+0x5a>
 80107d4:	e0b1      	b.n	801093a <__aeabi_dsub+0x1be>
 80107d6:	4663      	mov	r3, ip
 80107d8:	4313      	orrs	r3, r2
 80107da:	d100      	bne.n	80107de <__aeabi_dsub+0x62>
 80107dc:	e123      	b.n	8010a26 <__aeabi_dsub+0x2aa>
 80107de:	1e73      	subs	r3, r6, #1
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d000      	beq.n	80107e6 <__aeabi_dsub+0x6a>
 80107e4:	e1ba      	b.n	8010b5c <__aeabi_dsub+0x3e0>
 80107e6:	1a86      	subs	r6, r0, r2
 80107e8:	4663      	mov	r3, ip
 80107ea:	42b0      	cmp	r0, r6
 80107ec:	4180      	sbcs	r0, r0
 80107ee:	2501      	movs	r5, #1
 80107f0:	1ac9      	subs	r1, r1, r3
 80107f2:	4240      	negs	r0, r0
 80107f4:	1a09      	subs	r1, r1, r0
 80107f6:	020b      	lsls	r3, r1, #8
 80107f8:	d400      	bmi.n	80107fc <__aeabi_dsub+0x80>
 80107fa:	e147      	b.n	8010a8c <__aeabi_dsub+0x310>
 80107fc:	0249      	lsls	r1, r1, #9
 80107fe:	0a4b      	lsrs	r3, r1, #9
 8010800:	4698      	mov	r8, r3
 8010802:	4643      	mov	r3, r8
 8010804:	2b00      	cmp	r3, #0
 8010806:	d100      	bne.n	801080a <__aeabi_dsub+0x8e>
 8010808:	e189      	b.n	8010b1e <__aeabi_dsub+0x3a2>
 801080a:	4640      	mov	r0, r8
 801080c:	f7fe f956 	bl	800eabc <__clzsi2>
 8010810:	0003      	movs	r3, r0
 8010812:	3b08      	subs	r3, #8
 8010814:	2b1f      	cmp	r3, #31
 8010816:	dd00      	ble.n	801081a <__aeabi_dsub+0x9e>
 8010818:	e17c      	b.n	8010b14 <__aeabi_dsub+0x398>
 801081a:	2220      	movs	r2, #32
 801081c:	0030      	movs	r0, r6
 801081e:	1ad2      	subs	r2, r2, r3
 8010820:	4641      	mov	r1, r8
 8010822:	40d0      	lsrs	r0, r2
 8010824:	4099      	lsls	r1, r3
 8010826:	0002      	movs	r2, r0
 8010828:	409e      	lsls	r6, r3
 801082a:	430a      	orrs	r2, r1
 801082c:	429d      	cmp	r5, r3
 801082e:	dd00      	ble.n	8010832 <__aeabi_dsub+0xb6>
 8010830:	e16a      	b.n	8010b08 <__aeabi_dsub+0x38c>
 8010832:	1b5d      	subs	r5, r3, r5
 8010834:	1c6b      	adds	r3, r5, #1
 8010836:	2b1f      	cmp	r3, #31
 8010838:	dd00      	ble.n	801083c <__aeabi_dsub+0xc0>
 801083a:	e194      	b.n	8010b66 <__aeabi_dsub+0x3ea>
 801083c:	2120      	movs	r1, #32
 801083e:	0010      	movs	r0, r2
 8010840:	0035      	movs	r5, r6
 8010842:	1ac9      	subs	r1, r1, r3
 8010844:	408e      	lsls	r6, r1
 8010846:	40da      	lsrs	r2, r3
 8010848:	4088      	lsls	r0, r1
 801084a:	40dd      	lsrs	r5, r3
 801084c:	1e71      	subs	r1, r6, #1
 801084e:	418e      	sbcs	r6, r1
 8010850:	0011      	movs	r1, r2
 8010852:	2207      	movs	r2, #7
 8010854:	4328      	orrs	r0, r5
 8010856:	2500      	movs	r5, #0
 8010858:	4306      	orrs	r6, r0
 801085a:	4032      	ands	r2, r6
 801085c:	2a00      	cmp	r2, #0
 801085e:	d009      	beq.n	8010874 <__aeabi_dsub+0xf8>
 8010860:	230f      	movs	r3, #15
 8010862:	4033      	ands	r3, r6
 8010864:	2b04      	cmp	r3, #4
 8010866:	d005      	beq.n	8010874 <__aeabi_dsub+0xf8>
 8010868:	1d33      	adds	r3, r6, #4
 801086a:	42b3      	cmp	r3, r6
 801086c:	41b6      	sbcs	r6, r6
 801086e:	4276      	negs	r6, r6
 8010870:	1989      	adds	r1, r1, r6
 8010872:	001e      	movs	r6, r3
 8010874:	020b      	lsls	r3, r1, #8
 8010876:	d400      	bmi.n	801087a <__aeabi_dsub+0xfe>
 8010878:	e23d      	b.n	8010cf6 <__aeabi_dsub+0x57a>
 801087a:	1c6a      	adds	r2, r5, #1
 801087c:	4b91      	ldr	r3, [pc, #580]	; (8010ac4 <__aeabi_dsub+0x348>)
 801087e:	0555      	lsls	r5, r2, #21
 8010880:	0d6d      	lsrs	r5, r5, #21
 8010882:	429a      	cmp	r2, r3
 8010884:	d100      	bne.n	8010888 <__aeabi_dsub+0x10c>
 8010886:	e119      	b.n	8010abc <__aeabi_dsub+0x340>
 8010888:	4a8f      	ldr	r2, [pc, #572]	; (8010ac8 <__aeabi_dsub+0x34c>)
 801088a:	08f6      	lsrs	r6, r6, #3
 801088c:	400a      	ands	r2, r1
 801088e:	0757      	lsls	r7, r2, #29
 8010890:	0252      	lsls	r2, r2, #9
 8010892:	4337      	orrs	r7, r6
 8010894:	0b12      	lsrs	r2, r2, #12
 8010896:	e09b      	b.n	80109d0 <__aeabi_dsub+0x254>
 8010898:	2e00      	cmp	r6, #0
 801089a:	d000      	beq.n	801089e <__aeabi_dsub+0x122>
 801089c:	e0c5      	b.n	8010a2a <__aeabi_dsub+0x2ae>
 801089e:	1c6e      	adds	r6, r5, #1
 80108a0:	0576      	lsls	r6, r6, #21
 80108a2:	0d76      	lsrs	r6, r6, #21
 80108a4:	2e01      	cmp	r6, #1
 80108a6:	dc00      	bgt.n	80108aa <__aeabi_dsub+0x12e>
 80108a8:	e148      	b.n	8010b3c <__aeabi_dsub+0x3c0>
 80108aa:	4667      	mov	r7, ip
 80108ac:	1a86      	subs	r6, r0, r2
 80108ae:	1bcb      	subs	r3, r1, r7
 80108b0:	42b0      	cmp	r0, r6
 80108b2:	41bf      	sbcs	r7, r7
 80108b4:	427f      	negs	r7, r7
 80108b6:	46b8      	mov	r8, r7
 80108b8:	001f      	movs	r7, r3
 80108ba:	4643      	mov	r3, r8
 80108bc:	1aff      	subs	r7, r7, r3
 80108be:	003b      	movs	r3, r7
 80108c0:	46b8      	mov	r8, r7
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	d500      	bpl.n	80108c8 <__aeabi_dsub+0x14c>
 80108c6:	e15f      	b.n	8010b88 <__aeabi_dsub+0x40c>
 80108c8:	4337      	orrs	r7, r6
 80108ca:	d19a      	bne.n	8010802 <__aeabi_dsub+0x86>
 80108cc:	2200      	movs	r2, #0
 80108ce:	2400      	movs	r4, #0
 80108d0:	2500      	movs	r5, #0
 80108d2:	e079      	b.n	80109c8 <__aeabi_dsub+0x24c>
 80108d4:	2e00      	cmp	r6, #0
 80108d6:	dc00      	bgt.n	80108da <__aeabi_dsub+0x15e>
 80108d8:	e0fa      	b.n	8010ad0 <__aeabi_dsub+0x354>
 80108da:	2f00      	cmp	r7, #0
 80108dc:	d100      	bne.n	80108e0 <__aeabi_dsub+0x164>
 80108de:	e08d      	b.n	80109fc <__aeabi_dsub+0x280>
 80108e0:	4b78      	ldr	r3, [pc, #480]	; (8010ac4 <__aeabi_dsub+0x348>)
 80108e2:	429d      	cmp	r5, r3
 80108e4:	d067      	beq.n	80109b6 <__aeabi_dsub+0x23a>
 80108e6:	2380      	movs	r3, #128	; 0x80
 80108e8:	4667      	mov	r7, ip
 80108ea:	041b      	lsls	r3, r3, #16
 80108ec:	431f      	orrs	r7, r3
 80108ee:	46bc      	mov	ip, r7
 80108f0:	2e38      	cmp	r6, #56	; 0x38
 80108f2:	dc00      	bgt.n	80108f6 <__aeabi_dsub+0x17a>
 80108f4:	e152      	b.n	8010b9c <__aeabi_dsub+0x420>
 80108f6:	4663      	mov	r3, ip
 80108f8:	4313      	orrs	r3, r2
 80108fa:	1e5a      	subs	r2, r3, #1
 80108fc:	4193      	sbcs	r3, r2
 80108fe:	181e      	adds	r6, r3, r0
 8010900:	4286      	cmp	r6, r0
 8010902:	4180      	sbcs	r0, r0
 8010904:	4240      	negs	r0, r0
 8010906:	1809      	adds	r1, r1, r0
 8010908:	020b      	lsls	r3, r1, #8
 801090a:	d400      	bmi.n	801090e <__aeabi_dsub+0x192>
 801090c:	e0be      	b.n	8010a8c <__aeabi_dsub+0x310>
 801090e:	4b6d      	ldr	r3, [pc, #436]	; (8010ac4 <__aeabi_dsub+0x348>)
 8010910:	3501      	adds	r5, #1
 8010912:	429d      	cmp	r5, r3
 8010914:	d100      	bne.n	8010918 <__aeabi_dsub+0x19c>
 8010916:	e0d2      	b.n	8010abe <__aeabi_dsub+0x342>
 8010918:	4a6b      	ldr	r2, [pc, #428]	; (8010ac8 <__aeabi_dsub+0x34c>)
 801091a:	0873      	lsrs	r3, r6, #1
 801091c:	400a      	ands	r2, r1
 801091e:	2101      	movs	r1, #1
 8010920:	400e      	ands	r6, r1
 8010922:	431e      	orrs	r6, r3
 8010924:	0851      	lsrs	r1, r2, #1
 8010926:	07d3      	lsls	r3, r2, #31
 8010928:	2207      	movs	r2, #7
 801092a:	431e      	orrs	r6, r3
 801092c:	4032      	ands	r2, r6
 801092e:	e795      	b.n	801085c <__aeabi_dsub+0xe0>
 8010930:	001e      	movs	r6, r3
 8010932:	4316      	orrs	r6, r2
 8010934:	d000      	beq.n	8010938 <__aeabi_dsub+0x1bc>
 8010936:	e745      	b.n	80107c4 <__aeabi_dsub+0x48>
 8010938:	e740      	b.n	80107bc <__aeabi_dsub+0x40>
 801093a:	4b62      	ldr	r3, [pc, #392]	; (8010ac4 <__aeabi_dsub+0x348>)
 801093c:	429d      	cmp	r5, r3
 801093e:	d03a      	beq.n	80109b6 <__aeabi_dsub+0x23a>
 8010940:	2380      	movs	r3, #128	; 0x80
 8010942:	4667      	mov	r7, ip
 8010944:	041b      	lsls	r3, r3, #16
 8010946:	431f      	orrs	r7, r3
 8010948:	46bc      	mov	ip, r7
 801094a:	2e38      	cmp	r6, #56	; 0x38
 801094c:	dd00      	ble.n	8010950 <__aeabi_dsub+0x1d4>
 801094e:	e0eb      	b.n	8010b28 <__aeabi_dsub+0x3ac>
 8010950:	2e1f      	cmp	r6, #31
 8010952:	dc00      	bgt.n	8010956 <__aeabi_dsub+0x1da>
 8010954:	e13a      	b.n	8010bcc <__aeabi_dsub+0x450>
 8010956:	0033      	movs	r3, r6
 8010958:	4667      	mov	r7, ip
 801095a:	3b20      	subs	r3, #32
 801095c:	40df      	lsrs	r7, r3
 801095e:	003b      	movs	r3, r7
 8010960:	2e20      	cmp	r6, #32
 8010962:	d005      	beq.n	8010970 <__aeabi_dsub+0x1f4>
 8010964:	2740      	movs	r7, #64	; 0x40
 8010966:	1bbf      	subs	r7, r7, r6
 8010968:	4666      	mov	r6, ip
 801096a:	40be      	lsls	r6, r7
 801096c:	4332      	orrs	r2, r6
 801096e:	4690      	mov	r8, r2
 8010970:	4646      	mov	r6, r8
 8010972:	1e72      	subs	r2, r6, #1
 8010974:	4196      	sbcs	r6, r2
 8010976:	4333      	orrs	r3, r6
 8010978:	e0da      	b.n	8010b30 <__aeabi_dsub+0x3b4>
 801097a:	2b00      	cmp	r3, #0
 801097c:	d100      	bne.n	8010980 <__aeabi_dsub+0x204>
 801097e:	e214      	b.n	8010daa <__aeabi_dsub+0x62e>
 8010980:	4663      	mov	r3, ip
 8010982:	4313      	orrs	r3, r2
 8010984:	d100      	bne.n	8010988 <__aeabi_dsub+0x20c>
 8010986:	e168      	b.n	8010c5a <__aeabi_dsub+0x4de>
 8010988:	2380      	movs	r3, #128	; 0x80
 801098a:	074e      	lsls	r6, r1, #29
 801098c:	08c0      	lsrs	r0, r0, #3
 801098e:	08c9      	lsrs	r1, r1, #3
 8010990:	031b      	lsls	r3, r3, #12
 8010992:	4306      	orrs	r6, r0
 8010994:	4219      	tst	r1, r3
 8010996:	d008      	beq.n	80109aa <__aeabi_dsub+0x22e>
 8010998:	4660      	mov	r0, ip
 801099a:	08c0      	lsrs	r0, r0, #3
 801099c:	4218      	tst	r0, r3
 801099e:	d104      	bne.n	80109aa <__aeabi_dsub+0x22e>
 80109a0:	4663      	mov	r3, ip
 80109a2:	0001      	movs	r1, r0
 80109a4:	08d2      	lsrs	r2, r2, #3
 80109a6:	075e      	lsls	r6, r3, #29
 80109a8:	4316      	orrs	r6, r2
 80109aa:	00f3      	lsls	r3, r6, #3
 80109ac:	4699      	mov	r9, r3
 80109ae:	00c9      	lsls	r1, r1, #3
 80109b0:	0f72      	lsrs	r2, r6, #29
 80109b2:	4d44      	ldr	r5, [pc, #272]	; (8010ac4 <__aeabi_dsub+0x348>)
 80109b4:	4311      	orrs	r1, r2
 80109b6:	464b      	mov	r3, r9
 80109b8:	08de      	lsrs	r6, r3, #3
 80109ba:	4b42      	ldr	r3, [pc, #264]	; (8010ac4 <__aeabi_dsub+0x348>)
 80109bc:	074f      	lsls	r7, r1, #29
 80109be:	4337      	orrs	r7, r6
 80109c0:	08ca      	lsrs	r2, r1, #3
 80109c2:	429d      	cmp	r5, r3
 80109c4:	d100      	bne.n	80109c8 <__aeabi_dsub+0x24c>
 80109c6:	e06e      	b.n	8010aa6 <__aeabi_dsub+0x32a>
 80109c8:	0312      	lsls	r2, r2, #12
 80109ca:	056d      	lsls	r5, r5, #21
 80109cc:	0b12      	lsrs	r2, r2, #12
 80109ce:	0d6d      	lsrs	r5, r5, #21
 80109d0:	2100      	movs	r1, #0
 80109d2:	0312      	lsls	r2, r2, #12
 80109d4:	0b13      	lsrs	r3, r2, #12
 80109d6:	0d0a      	lsrs	r2, r1, #20
 80109d8:	0512      	lsls	r2, r2, #20
 80109da:	431a      	orrs	r2, r3
 80109dc:	4b3b      	ldr	r3, [pc, #236]	; (8010acc <__aeabi_dsub+0x350>)
 80109de:	052d      	lsls	r5, r5, #20
 80109e0:	4013      	ands	r3, r2
 80109e2:	432b      	orrs	r3, r5
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	07e4      	lsls	r4, r4, #31
 80109e8:	085b      	lsrs	r3, r3, #1
 80109ea:	4323      	orrs	r3, r4
 80109ec:	0038      	movs	r0, r7
 80109ee:	0019      	movs	r1, r3
 80109f0:	bc3c      	pop	{r2, r3, r4, r5}
 80109f2:	4690      	mov	r8, r2
 80109f4:	4699      	mov	r9, r3
 80109f6:	46a2      	mov	sl, r4
 80109f8:	46ab      	mov	fp, r5
 80109fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109fc:	4663      	mov	r3, ip
 80109fe:	4313      	orrs	r3, r2
 8010a00:	d011      	beq.n	8010a26 <__aeabi_dsub+0x2aa>
 8010a02:	1e73      	subs	r3, r6, #1
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d000      	beq.n	8010a0a <__aeabi_dsub+0x28e>
 8010a08:	e107      	b.n	8010c1a <__aeabi_dsub+0x49e>
 8010a0a:	1886      	adds	r6, r0, r2
 8010a0c:	4286      	cmp	r6, r0
 8010a0e:	4180      	sbcs	r0, r0
 8010a10:	4461      	add	r1, ip
 8010a12:	4240      	negs	r0, r0
 8010a14:	1809      	adds	r1, r1, r0
 8010a16:	2501      	movs	r5, #1
 8010a18:	020b      	lsls	r3, r1, #8
 8010a1a:	d537      	bpl.n	8010a8c <__aeabi_dsub+0x310>
 8010a1c:	2502      	movs	r5, #2
 8010a1e:	e77b      	b.n	8010918 <__aeabi_dsub+0x19c>
 8010a20:	003e      	movs	r6, r7
 8010a22:	4661      	mov	r1, ip
 8010a24:	4691      	mov	r9, r2
 8010a26:	0035      	movs	r5, r6
 8010a28:	e7c5      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010a2a:	465c      	mov	r4, fp
 8010a2c:	2d00      	cmp	r5, #0
 8010a2e:	d000      	beq.n	8010a32 <__aeabi_dsub+0x2b6>
 8010a30:	e0e1      	b.n	8010bf6 <__aeabi_dsub+0x47a>
 8010a32:	000b      	movs	r3, r1
 8010a34:	4303      	orrs	r3, r0
 8010a36:	d0f3      	beq.n	8010a20 <__aeabi_dsub+0x2a4>
 8010a38:	1c73      	adds	r3, r6, #1
 8010a3a:	d100      	bne.n	8010a3e <__aeabi_dsub+0x2c2>
 8010a3c:	e1ac      	b.n	8010d98 <__aeabi_dsub+0x61c>
 8010a3e:	4b21      	ldr	r3, [pc, #132]	; (8010ac4 <__aeabi_dsub+0x348>)
 8010a40:	429f      	cmp	r7, r3
 8010a42:	d100      	bne.n	8010a46 <__aeabi_dsub+0x2ca>
 8010a44:	e13a      	b.n	8010cbc <__aeabi_dsub+0x540>
 8010a46:	43f3      	mvns	r3, r6
 8010a48:	2b38      	cmp	r3, #56	; 0x38
 8010a4a:	dd00      	ble.n	8010a4e <__aeabi_dsub+0x2d2>
 8010a4c:	e16f      	b.n	8010d2e <__aeabi_dsub+0x5b2>
 8010a4e:	2b1f      	cmp	r3, #31
 8010a50:	dd00      	ble.n	8010a54 <__aeabi_dsub+0x2d8>
 8010a52:	e18c      	b.n	8010d6e <__aeabi_dsub+0x5f2>
 8010a54:	2520      	movs	r5, #32
 8010a56:	000e      	movs	r6, r1
 8010a58:	1aed      	subs	r5, r5, r3
 8010a5a:	40ae      	lsls	r6, r5
 8010a5c:	46b0      	mov	r8, r6
 8010a5e:	0006      	movs	r6, r0
 8010a60:	46aa      	mov	sl, r5
 8010a62:	40de      	lsrs	r6, r3
 8010a64:	4645      	mov	r5, r8
 8010a66:	4335      	orrs	r5, r6
 8010a68:	002e      	movs	r6, r5
 8010a6a:	4655      	mov	r5, sl
 8010a6c:	40d9      	lsrs	r1, r3
 8010a6e:	40a8      	lsls	r0, r5
 8010a70:	4663      	mov	r3, ip
 8010a72:	1e45      	subs	r5, r0, #1
 8010a74:	41a8      	sbcs	r0, r5
 8010a76:	1a5b      	subs	r3, r3, r1
 8010a78:	469c      	mov	ip, r3
 8010a7a:	4330      	orrs	r0, r6
 8010a7c:	1a16      	subs	r6, r2, r0
 8010a7e:	42b2      	cmp	r2, r6
 8010a80:	4192      	sbcs	r2, r2
 8010a82:	4663      	mov	r3, ip
 8010a84:	4252      	negs	r2, r2
 8010a86:	1a99      	subs	r1, r3, r2
 8010a88:	003d      	movs	r5, r7
 8010a8a:	e6b4      	b.n	80107f6 <__aeabi_dsub+0x7a>
 8010a8c:	2207      	movs	r2, #7
 8010a8e:	4032      	ands	r2, r6
 8010a90:	2a00      	cmp	r2, #0
 8010a92:	d000      	beq.n	8010a96 <__aeabi_dsub+0x31a>
 8010a94:	e6e4      	b.n	8010860 <__aeabi_dsub+0xe4>
 8010a96:	4b0b      	ldr	r3, [pc, #44]	; (8010ac4 <__aeabi_dsub+0x348>)
 8010a98:	08f6      	lsrs	r6, r6, #3
 8010a9a:	074f      	lsls	r7, r1, #29
 8010a9c:	4337      	orrs	r7, r6
 8010a9e:	08ca      	lsrs	r2, r1, #3
 8010aa0:	429d      	cmp	r5, r3
 8010aa2:	d000      	beq.n	8010aa6 <__aeabi_dsub+0x32a>
 8010aa4:	e790      	b.n	80109c8 <__aeabi_dsub+0x24c>
 8010aa6:	003b      	movs	r3, r7
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	d100      	bne.n	8010aae <__aeabi_dsub+0x332>
 8010aac:	e1a6      	b.n	8010dfc <__aeabi_dsub+0x680>
 8010aae:	2380      	movs	r3, #128	; 0x80
 8010ab0:	031b      	lsls	r3, r3, #12
 8010ab2:	431a      	orrs	r2, r3
 8010ab4:	0312      	lsls	r2, r2, #12
 8010ab6:	0b12      	lsrs	r2, r2, #12
 8010ab8:	4d02      	ldr	r5, [pc, #8]	; (8010ac4 <__aeabi_dsub+0x348>)
 8010aba:	e789      	b.n	80109d0 <__aeabi_dsub+0x254>
 8010abc:	0015      	movs	r5, r2
 8010abe:	2200      	movs	r2, #0
 8010ac0:	2700      	movs	r7, #0
 8010ac2:	e785      	b.n	80109d0 <__aeabi_dsub+0x254>
 8010ac4:	000007ff 	.word	0x000007ff
 8010ac8:	ff7fffff 	.word	0xff7fffff
 8010acc:	800fffff 	.word	0x800fffff
 8010ad0:	2e00      	cmp	r6, #0
 8010ad2:	d000      	beq.n	8010ad6 <__aeabi_dsub+0x35a>
 8010ad4:	e0c7      	b.n	8010c66 <__aeabi_dsub+0x4ea>
 8010ad6:	1c6b      	adds	r3, r5, #1
 8010ad8:	055e      	lsls	r6, r3, #21
 8010ada:	0d76      	lsrs	r6, r6, #21
 8010adc:	2e01      	cmp	r6, #1
 8010ade:	dc00      	bgt.n	8010ae2 <__aeabi_dsub+0x366>
 8010ae0:	e0f0      	b.n	8010cc4 <__aeabi_dsub+0x548>
 8010ae2:	4dc8      	ldr	r5, [pc, #800]	; (8010e04 <__aeabi_dsub+0x688>)
 8010ae4:	42ab      	cmp	r3, r5
 8010ae6:	d100      	bne.n	8010aea <__aeabi_dsub+0x36e>
 8010ae8:	e0b9      	b.n	8010c5e <__aeabi_dsub+0x4e2>
 8010aea:	1885      	adds	r5, r0, r2
 8010aec:	000a      	movs	r2, r1
 8010aee:	4285      	cmp	r5, r0
 8010af0:	4189      	sbcs	r1, r1
 8010af2:	4462      	add	r2, ip
 8010af4:	4249      	negs	r1, r1
 8010af6:	1851      	adds	r1, r2, r1
 8010af8:	2207      	movs	r2, #7
 8010afa:	07ce      	lsls	r6, r1, #31
 8010afc:	086d      	lsrs	r5, r5, #1
 8010afe:	432e      	orrs	r6, r5
 8010b00:	0849      	lsrs	r1, r1, #1
 8010b02:	4032      	ands	r2, r6
 8010b04:	001d      	movs	r5, r3
 8010b06:	e6a9      	b.n	801085c <__aeabi_dsub+0xe0>
 8010b08:	49bf      	ldr	r1, [pc, #764]	; (8010e08 <__aeabi_dsub+0x68c>)
 8010b0a:	1aed      	subs	r5, r5, r3
 8010b0c:	4011      	ands	r1, r2
 8010b0e:	2207      	movs	r2, #7
 8010b10:	4032      	ands	r2, r6
 8010b12:	e6a3      	b.n	801085c <__aeabi_dsub+0xe0>
 8010b14:	0032      	movs	r2, r6
 8010b16:	3828      	subs	r0, #40	; 0x28
 8010b18:	4082      	lsls	r2, r0
 8010b1a:	2600      	movs	r6, #0
 8010b1c:	e686      	b.n	801082c <__aeabi_dsub+0xb0>
 8010b1e:	0030      	movs	r0, r6
 8010b20:	f7fd ffcc 	bl	800eabc <__clzsi2>
 8010b24:	3020      	adds	r0, #32
 8010b26:	e673      	b.n	8010810 <__aeabi_dsub+0x94>
 8010b28:	4663      	mov	r3, ip
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	1e5a      	subs	r2, r3, #1
 8010b2e:	4193      	sbcs	r3, r2
 8010b30:	1ac6      	subs	r6, r0, r3
 8010b32:	42b0      	cmp	r0, r6
 8010b34:	4180      	sbcs	r0, r0
 8010b36:	4240      	negs	r0, r0
 8010b38:	1a09      	subs	r1, r1, r0
 8010b3a:	e65c      	b.n	80107f6 <__aeabi_dsub+0x7a>
 8010b3c:	000e      	movs	r6, r1
 8010b3e:	4667      	mov	r7, ip
 8010b40:	4306      	orrs	r6, r0
 8010b42:	4317      	orrs	r7, r2
 8010b44:	2d00      	cmp	r5, #0
 8010b46:	d15e      	bne.n	8010c06 <__aeabi_dsub+0x48a>
 8010b48:	2e00      	cmp	r6, #0
 8010b4a:	d000      	beq.n	8010b4e <__aeabi_dsub+0x3d2>
 8010b4c:	e0f3      	b.n	8010d36 <__aeabi_dsub+0x5ba>
 8010b4e:	2f00      	cmp	r7, #0
 8010b50:	d100      	bne.n	8010b54 <__aeabi_dsub+0x3d8>
 8010b52:	e11e      	b.n	8010d92 <__aeabi_dsub+0x616>
 8010b54:	465c      	mov	r4, fp
 8010b56:	4661      	mov	r1, ip
 8010b58:	4691      	mov	r9, r2
 8010b5a:	e72c      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010b5c:	4fa9      	ldr	r7, [pc, #676]	; (8010e04 <__aeabi_dsub+0x688>)
 8010b5e:	42be      	cmp	r6, r7
 8010b60:	d07b      	beq.n	8010c5a <__aeabi_dsub+0x4de>
 8010b62:	001e      	movs	r6, r3
 8010b64:	e6f1      	b.n	801094a <__aeabi_dsub+0x1ce>
 8010b66:	0010      	movs	r0, r2
 8010b68:	3d1f      	subs	r5, #31
 8010b6a:	40e8      	lsrs	r0, r5
 8010b6c:	2b20      	cmp	r3, #32
 8010b6e:	d003      	beq.n	8010b78 <__aeabi_dsub+0x3fc>
 8010b70:	2140      	movs	r1, #64	; 0x40
 8010b72:	1acb      	subs	r3, r1, r3
 8010b74:	409a      	lsls	r2, r3
 8010b76:	4316      	orrs	r6, r2
 8010b78:	1e73      	subs	r3, r6, #1
 8010b7a:	419e      	sbcs	r6, r3
 8010b7c:	2207      	movs	r2, #7
 8010b7e:	4306      	orrs	r6, r0
 8010b80:	4032      	ands	r2, r6
 8010b82:	2100      	movs	r1, #0
 8010b84:	2500      	movs	r5, #0
 8010b86:	e783      	b.n	8010a90 <__aeabi_dsub+0x314>
 8010b88:	1a16      	subs	r6, r2, r0
 8010b8a:	4663      	mov	r3, ip
 8010b8c:	42b2      	cmp	r2, r6
 8010b8e:	4180      	sbcs	r0, r0
 8010b90:	1a59      	subs	r1, r3, r1
 8010b92:	4240      	negs	r0, r0
 8010b94:	1a0b      	subs	r3, r1, r0
 8010b96:	4698      	mov	r8, r3
 8010b98:	465c      	mov	r4, fp
 8010b9a:	e632      	b.n	8010802 <__aeabi_dsub+0x86>
 8010b9c:	2e1f      	cmp	r6, #31
 8010b9e:	dd00      	ble.n	8010ba2 <__aeabi_dsub+0x426>
 8010ba0:	e0ab      	b.n	8010cfa <__aeabi_dsub+0x57e>
 8010ba2:	2720      	movs	r7, #32
 8010ba4:	1bbb      	subs	r3, r7, r6
 8010ba6:	469a      	mov	sl, r3
 8010ba8:	4663      	mov	r3, ip
 8010baa:	4657      	mov	r7, sl
 8010bac:	40bb      	lsls	r3, r7
 8010bae:	4699      	mov	r9, r3
 8010bb0:	0013      	movs	r3, r2
 8010bb2:	464f      	mov	r7, r9
 8010bb4:	40f3      	lsrs	r3, r6
 8010bb6:	431f      	orrs	r7, r3
 8010bb8:	003b      	movs	r3, r7
 8010bba:	4657      	mov	r7, sl
 8010bbc:	40ba      	lsls	r2, r7
 8010bbe:	1e57      	subs	r7, r2, #1
 8010bc0:	41ba      	sbcs	r2, r7
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	4662      	mov	r2, ip
 8010bc6:	40f2      	lsrs	r2, r6
 8010bc8:	1889      	adds	r1, r1, r2
 8010bca:	e698      	b.n	80108fe <__aeabi_dsub+0x182>
 8010bcc:	2720      	movs	r7, #32
 8010bce:	1bbb      	subs	r3, r7, r6
 8010bd0:	469a      	mov	sl, r3
 8010bd2:	4663      	mov	r3, ip
 8010bd4:	4657      	mov	r7, sl
 8010bd6:	40bb      	lsls	r3, r7
 8010bd8:	4699      	mov	r9, r3
 8010bda:	0013      	movs	r3, r2
 8010bdc:	464f      	mov	r7, r9
 8010bde:	40f3      	lsrs	r3, r6
 8010be0:	431f      	orrs	r7, r3
 8010be2:	003b      	movs	r3, r7
 8010be4:	4657      	mov	r7, sl
 8010be6:	40ba      	lsls	r2, r7
 8010be8:	1e57      	subs	r7, r2, #1
 8010bea:	41ba      	sbcs	r2, r7
 8010bec:	4313      	orrs	r3, r2
 8010bee:	4662      	mov	r2, ip
 8010bf0:	40f2      	lsrs	r2, r6
 8010bf2:	1a89      	subs	r1, r1, r2
 8010bf4:	e79c      	b.n	8010b30 <__aeabi_dsub+0x3b4>
 8010bf6:	4b83      	ldr	r3, [pc, #524]	; (8010e04 <__aeabi_dsub+0x688>)
 8010bf8:	429f      	cmp	r7, r3
 8010bfa:	d05f      	beq.n	8010cbc <__aeabi_dsub+0x540>
 8010bfc:	2580      	movs	r5, #128	; 0x80
 8010bfe:	042d      	lsls	r5, r5, #16
 8010c00:	4273      	negs	r3, r6
 8010c02:	4329      	orrs	r1, r5
 8010c04:	e720      	b.n	8010a48 <__aeabi_dsub+0x2cc>
 8010c06:	2e00      	cmp	r6, #0
 8010c08:	d10c      	bne.n	8010c24 <__aeabi_dsub+0x4a8>
 8010c0a:	2f00      	cmp	r7, #0
 8010c0c:	d100      	bne.n	8010c10 <__aeabi_dsub+0x494>
 8010c0e:	e0d0      	b.n	8010db2 <__aeabi_dsub+0x636>
 8010c10:	465c      	mov	r4, fp
 8010c12:	4661      	mov	r1, ip
 8010c14:	4691      	mov	r9, r2
 8010c16:	4d7b      	ldr	r5, [pc, #492]	; (8010e04 <__aeabi_dsub+0x688>)
 8010c18:	e6cd      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010c1a:	4f7a      	ldr	r7, [pc, #488]	; (8010e04 <__aeabi_dsub+0x688>)
 8010c1c:	42be      	cmp	r6, r7
 8010c1e:	d01c      	beq.n	8010c5a <__aeabi_dsub+0x4de>
 8010c20:	001e      	movs	r6, r3
 8010c22:	e665      	b.n	80108f0 <__aeabi_dsub+0x174>
 8010c24:	2f00      	cmp	r7, #0
 8010c26:	d018      	beq.n	8010c5a <__aeabi_dsub+0x4de>
 8010c28:	08c0      	lsrs	r0, r0, #3
 8010c2a:	074e      	lsls	r6, r1, #29
 8010c2c:	4306      	orrs	r6, r0
 8010c2e:	2080      	movs	r0, #128	; 0x80
 8010c30:	08c9      	lsrs	r1, r1, #3
 8010c32:	0300      	lsls	r0, r0, #12
 8010c34:	4201      	tst	r1, r0
 8010c36:	d008      	beq.n	8010c4a <__aeabi_dsub+0x4ce>
 8010c38:	4663      	mov	r3, ip
 8010c3a:	08dc      	lsrs	r4, r3, #3
 8010c3c:	4204      	tst	r4, r0
 8010c3e:	d104      	bne.n	8010c4a <__aeabi_dsub+0x4ce>
 8010c40:	0021      	movs	r1, r4
 8010c42:	46da      	mov	sl, fp
 8010c44:	08d2      	lsrs	r2, r2, #3
 8010c46:	075e      	lsls	r6, r3, #29
 8010c48:	4316      	orrs	r6, r2
 8010c4a:	00f3      	lsls	r3, r6, #3
 8010c4c:	4699      	mov	r9, r3
 8010c4e:	2401      	movs	r4, #1
 8010c50:	4653      	mov	r3, sl
 8010c52:	00c9      	lsls	r1, r1, #3
 8010c54:	0f72      	lsrs	r2, r6, #29
 8010c56:	4311      	orrs	r1, r2
 8010c58:	401c      	ands	r4, r3
 8010c5a:	4d6a      	ldr	r5, [pc, #424]	; (8010e04 <__aeabi_dsub+0x688>)
 8010c5c:	e6ab      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010c5e:	001d      	movs	r5, r3
 8010c60:	2200      	movs	r2, #0
 8010c62:	2700      	movs	r7, #0
 8010c64:	e6b4      	b.n	80109d0 <__aeabi_dsub+0x254>
 8010c66:	2d00      	cmp	r5, #0
 8010c68:	d159      	bne.n	8010d1e <__aeabi_dsub+0x5a2>
 8010c6a:	000b      	movs	r3, r1
 8010c6c:	4303      	orrs	r3, r0
 8010c6e:	d100      	bne.n	8010c72 <__aeabi_dsub+0x4f6>
 8010c70:	e6d6      	b.n	8010a20 <__aeabi_dsub+0x2a4>
 8010c72:	1c73      	adds	r3, r6, #1
 8010c74:	d100      	bne.n	8010c78 <__aeabi_dsub+0x4fc>
 8010c76:	e0b2      	b.n	8010dde <__aeabi_dsub+0x662>
 8010c78:	4b62      	ldr	r3, [pc, #392]	; (8010e04 <__aeabi_dsub+0x688>)
 8010c7a:	429f      	cmp	r7, r3
 8010c7c:	d01e      	beq.n	8010cbc <__aeabi_dsub+0x540>
 8010c7e:	43f3      	mvns	r3, r6
 8010c80:	2b38      	cmp	r3, #56	; 0x38
 8010c82:	dc6f      	bgt.n	8010d64 <__aeabi_dsub+0x5e8>
 8010c84:	2b1f      	cmp	r3, #31
 8010c86:	dd00      	ble.n	8010c8a <__aeabi_dsub+0x50e>
 8010c88:	e097      	b.n	8010dba <__aeabi_dsub+0x63e>
 8010c8a:	2520      	movs	r5, #32
 8010c8c:	000e      	movs	r6, r1
 8010c8e:	1aed      	subs	r5, r5, r3
 8010c90:	40ae      	lsls	r6, r5
 8010c92:	46b0      	mov	r8, r6
 8010c94:	0006      	movs	r6, r0
 8010c96:	46aa      	mov	sl, r5
 8010c98:	40de      	lsrs	r6, r3
 8010c9a:	4645      	mov	r5, r8
 8010c9c:	4335      	orrs	r5, r6
 8010c9e:	002e      	movs	r6, r5
 8010ca0:	4655      	mov	r5, sl
 8010ca2:	40a8      	lsls	r0, r5
 8010ca4:	40d9      	lsrs	r1, r3
 8010ca6:	1e45      	subs	r5, r0, #1
 8010ca8:	41a8      	sbcs	r0, r5
 8010caa:	448c      	add	ip, r1
 8010cac:	4306      	orrs	r6, r0
 8010cae:	18b6      	adds	r6, r6, r2
 8010cb0:	4296      	cmp	r6, r2
 8010cb2:	4192      	sbcs	r2, r2
 8010cb4:	4251      	negs	r1, r2
 8010cb6:	4461      	add	r1, ip
 8010cb8:	003d      	movs	r5, r7
 8010cba:	e625      	b.n	8010908 <__aeabi_dsub+0x18c>
 8010cbc:	003d      	movs	r5, r7
 8010cbe:	4661      	mov	r1, ip
 8010cc0:	4691      	mov	r9, r2
 8010cc2:	e678      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010cc4:	000b      	movs	r3, r1
 8010cc6:	4303      	orrs	r3, r0
 8010cc8:	2d00      	cmp	r5, #0
 8010cca:	d000      	beq.n	8010cce <__aeabi_dsub+0x552>
 8010ccc:	e655      	b.n	801097a <__aeabi_dsub+0x1fe>
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d0f5      	beq.n	8010cbe <__aeabi_dsub+0x542>
 8010cd2:	4663      	mov	r3, ip
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	d100      	bne.n	8010cda <__aeabi_dsub+0x55e>
 8010cd8:	e66d      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010cda:	1886      	adds	r6, r0, r2
 8010cdc:	4286      	cmp	r6, r0
 8010cde:	4180      	sbcs	r0, r0
 8010ce0:	4461      	add	r1, ip
 8010ce2:	4240      	negs	r0, r0
 8010ce4:	1809      	adds	r1, r1, r0
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	020b      	lsls	r3, r1, #8
 8010cea:	d400      	bmi.n	8010cee <__aeabi_dsub+0x572>
 8010cec:	e6d0      	b.n	8010a90 <__aeabi_dsub+0x314>
 8010cee:	4b46      	ldr	r3, [pc, #280]	; (8010e08 <__aeabi_dsub+0x68c>)
 8010cf0:	3501      	adds	r5, #1
 8010cf2:	4019      	ands	r1, r3
 8010cf4:	e5b2      	b.n	801085c <__aeabi_dsub+0xe0>
 8010cf6:	46b1      	mov	r9, r6
 8010cf8:	e65d      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010cfa:	0033      	movs	r3, r6
 8010cfc:	4667      	mov	r7, ip
 8010cfe:	3b20      	subs	r3, #32
 8010d00:	40df      	lsrs	r7, r3
 8010d02:	003b      	movs	r3, r7
 8010d04:	2e20      	cmp	r6, #32
 8010d06:	d005      	beq.n	8010d14 <__aeabi_dsub+0x598>
 8010d08:	2740      	movs	r7, #64	; 0x40
 8010d0a:	1bbf      	subs	r7, r7, r6
 8010d0c:	4666      	mov	r6, ip
 8010d0e:	40be      	lsls	r6, r7
 8010d10:	4332      	orrs	r2, r6
 8010d12:	4690      	mov	r8, r2
 8010d14:	4646      	mov	r6, r8
 8010d16:	1e72      	subs	r2, r6, #1
 8010d18:	4196      	sbcs	r6, r2
 8010d1a:	4333      	orrs	r3, r6
 8010d1c:	e5ef      	b.n	80108fe <__aeabi_dsub+0x182>
 8010d1e:	4b39      	ldr	r3, [pc, #228]	; (8010e04 <__aeabi_dsub+0x688>)
 8010d20:	429f      	cmp	r7, r3
 8010d22:	d0cb      	beq.n	8010cbc <__aeabi_dsub+0x540>
 8010d24:	2580      	movs	r5, #128	; 0x80
 8010d26:	042d      	lsls	r5, r5, #16
 8010d28:	4273      	negs	r3, r6
 8010d2a:	4329      	orrs	r1, r5
 8010d2c:	e7a8      	b.n	8010c80 <__aeabi_dsub+0x504>
 8010d2e:	4308      	orrs	r0, r1
 8010d30:	1e41      	subs	r1, r0, #1
 8010d32:	4188      	sbcs	r0, r1
 8010d34:	e6a2      	b.n	8010a7c <__aeabi_dsub+0x300>
 8010d36:	2f00      	cmp	r7, #0
 8010d38:	d100      	bne.n	8010d3c <__aeabi_dsub+0x5c0>
 8010d3a:	e63c      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010d3c:	4663      	mov	r3, ip
 8010d3e:	1a86      	subs	r6, r0, r2
 8010d40:	1acf      	subs	r7, r1, r3
 8010d42:	42b0      	cmp	r0, r6
 8010d44:	419b      	sbcs	r3, r3
 8010d46:	425b      	negs	r3, r3
 8010d48:	1afb      	subs	r3, r7, r3
 8010d4a:	4698      	mov	r8, r3
 8010d4c:	021b      	lsls	r3, r3, #8
 8010d4e:	d54e      	bpl.n	8010dee <__aeabi_dsub+0x672>
 8010d50:	1a16      	subs	r6, r2, r0
 8010d52:	4663      	mov	r3, ip
 8010d54:	42b2      	cmp	r2, r6
 8010d56:	4192      	sbcs	r2, r2
 8010d58:	1a59      	subs	r1, r3, r1
 8010d5a:	4252      	negs	r2, r2
 8010d5c:	1a89      	subs	r1, r1, r2
 8010d5e:	465c      	mov	r4, fp
 8010d60:	2200      	movs	r2, #0
 8010d62:	e57b      	b.n	801085c <__aeabi_dsub+0xe0>
 8010d64:	4301      	orrs	r1, r0
 8010d66:	000e      	movs	r6, r1
 8010d68:	1e71      	subs	r1, r6, #1
 8010d6a:	418e      	sbcs	r6, r1
 8010d6c:	e79f      	b.n	8010cae <__aeabi_dsub+0x532>
 8010d6e:	001d      	movs	r5, r3
 8010d70:	000e      	movs	r6, r1
 8010d72:	3d20      	subs	r5, #32
 8010d74:	40ee      	lsrs	r6, r5
 8010d76:	46b0      	mov	r8, r6
 8010d78:	2b20      	cmp	r3, #32
 8010d7a:	d004      	beq.n	8010d86 <__aeabi_dsub+0x60a>
 8010d7c:	2540      	movs	r5, #64	; 0x40
 8010d7e:	1aeb      	subs	r3, r5, r3
 8010d80:	4099      	lsls	r1, r3
 8010d82:	4308      	orrs	r0, r1
 8010d84:	4681      	mov	r9, r0
 8010d86:	4648      	mov	r0, r9
 8010d88:	4643      	mov	r3, r8
 8010d8a:	1e41      	subs	r1, r0, #1
 8010d8c:	4188      	sbcs	r0, r1
 8010d8e:	4318      	orrs	r0, r3
 8010d90:	e674      	b.n	8010a7c <__aeabi_dsub+0x300>
 8010d92:	2200      	movs	r2, #0
 8010d94:	2400      	movs	r4, #0
 8010d96:	e617      	b.n	80109c8 <__aeabi_dsub+0x24c>
 8010d98:	1a16      	subs	r6, r2, r0
 8010d9a:	4663      	mov	r3, ip
 8010d9c:	42b2      	cmp	r2, r6
 8010d9e:	4192      	sbcs	r2, r2
 8010da0:	1a59      	subs	r1, r3, r1
 8010da2:	4252      	negs	r2, r2
 8010da4:	1a89      	subs	r1, r1, r2
 8010da6:	003d      	movs	r5, r7
 8010da8:	e525      	b.n	80107f6 <__aeabi_dsub+0x7a>
 8010daa:	4661      	mov	r1, ip
 8010dac:	4691      	mov	r9, r2
 8010dae:	4d15      	ldr	r5, [pc, #84]	; (8010e04 <__aeabi_dsub+0x688>)
 8010db0:	e601      	b.n	80109b6 <__aeabi_dsub+0x23a>
 8010db2:	2280      	movs	r2, #128	; 0x80
 8010db4:	2400      	movs	r4, #0
 8010db6:	0312      	lsls	r2, r2, #12
 8010db8:	e679      	b.n	8010aae <__aeabi_dsub+0x332>
 8010dba:	001d      	movs	r5, r3
 8010dbc:	000e      	movs	r6, r1
 8010dbe:	3d20      	subs	r5, #32
 8010dc0:	40ee      	lsrs	r6, r5
 8010dc2:	46b0      	mov	r8, r6
 8010dc4:	2b20      	cmp	r3, #32
 8010dc6:	d004      	beq.n	8010dd2 <__aeabi_dsub+0x656>
 8010dc8:	2540      	movs	r5, #64	; 0x40
 8010dca:	1aeb      	subs	r3, r5, r3
 8010dcc:	4099      	lsls	r1, r3
 8010dce:	4308      	orrs	r0, r1
 8010dd0:	4681      	mov	r9, r0
 8010dd2:	464e      	mov	r6, r9
 8010dd4:	4643      	mov	r3, r8
 8010dd6:	1e71      	subs	r1, r6, #1
 8010dd8:	418e      	sbcs	r6, r1
 8010dda:	431e      	orrs	r6, r3
 8010ddc:	e767      	b.n	8010cae <__aeabi_dsub+0x532>
 8010dde:	1886      	adds	r6, r0, r2
 8010de0:	4296      	cmp	r6, r2
 8010de2:	419b      	sbcs	r3, r3
 8010de4:	4461      	add	r1, ip
 8010de6:	425b      	negs	r3, r3
 8010de8:	18c9      	adds	r1, r1, r3
 8010dea:	003d      	movs	r5, r7
 8010dec:	e58c      	b.n	8010908 <__aeabi_dsub+0x18c>
 8010dee:	4647      	mov	r7, r8
 8010df0:	4337      	orrs	r7, r6
 8010df2:	d0ce      	beq.n	8010d92 <__aeabi_dsub+0x616>
 8010df4:	2207      	movs	r2, #7
 8010df6:	4641      	mov	r1, r8
 8010df8:	4032      	ands	r2, r6
 8010dfa:	e649      	b.n	8010a90 <__aeabi_dsub+0x314>
 8010dfc:	2700      	movs	r7, #0
 8010dfe:	003a      	movs	r2, r7
 8010e00:	e5e6      	b.n	80109d0 <__aeabi_dsub+0x254>
 8010e02:	46c0      	nop			; (mov r8, r8)
 8010e04:	000007ff 	.word	0x000007ff
 8010e08:	ff7fffff 	.word	0xff7fffff

08010e0c <__aeabi_dcmpun>:
 8010e0c:	b570      	push	{r4, r5, r6, lr}
 8010e0e:	4e0c      	ldr	r6, [pc, #48]	; (8010e40 <__aeabi_dcmpun+0x34>)
 8010e10:	030d      	lsls	r5, r1, #12
 8010e12:	031c      	lsls	r4, r3, #12
 8010e14:	0049      	lsls	r1, r1, #1
 8010e16:	005b      	lsls	r3, r3, #1
 8010e18:	0b2d      	lsrs	r5, r5, #12
 8010e1a:	0d49      	lsrs	r1, r1, #21
 8010e1c:	0b24      	lsrs	r4, r4, #12
 8010e1e:	0d5b      	lsrs	r3, r3, #21
 8010e20:	42b1      	cmp	r1, r6
 8010e22:	d008      	beq.n	8010e36 <__aeabi_dcmpun+0x2a>
 8010e24:	4906      	ldr	r1, [pc, #24]	; (8010e40 <__aeabi_dcmpun+0x34>)
 8010e26:	2000      	movs	r0, #0
 8010e28:	428b      	cmp	r3, r1
 8010e2a:	d103      	bne.n	8010e34 <__aeabi_dcmpun+0x28>
 8010e2c:	4314      	orrs	r4, r2
 8010e2e:	0020      	movs	r0, r4
 8010e30:	1e44      	subs	r4, r0, #1
 8010e32:	41a0      	sbcs	r0, r4
 8010e34:	bd70      	pop	{r4, r5, r6, pc}
 8010e36:	4305      	orrs	r5, r0
 8010e38:	2001      	movs	r0, #1
 8010e3a:	2d00      	cmp	r5, #0
 8010e3c:	d1fa      	bne.n	8010e34 <__aeabi_dcmpun+0x28>
 8010e3e:	e7f1      	b.n	8010e24 <__aeabi_dcmpun+0x18>
 8010e40:	000007ff 	.word	0x000007ff

08010e44 <__aeabi_d2iz>:
 8010e44:	b530      	push	{r4, r5, lr}
 8010e46:	4d14      	ldr	r5, [pc, #80]	; (8010e98 <__aeabi_d2iz+0x54>)
 8010e48:	030a      	lsls	r2, r1, #12
 8010e4a:	004b      	lsls	r3, r1, #1
 8010e4c:	0b12      	lsrs	r2, r2, #12
 8010e4e:	0d5b      	lsrs	r3, r3, #21
 8010e50:	0fc9      	lsrs	r1, r1, #31
 8010e52:	2400      	movs	r4, #0
 8010e54:	42ab      	cmp	r3, r5
 8010e56:	dd11      	ble.n	8010e7c <__aeabi_d2iz+0x38>
 8010e58:	4c10      	ldr	r4, [pc, #64]	; (8010e9c <__aeabi_d2iz+0x58>)
 8010e5a:	42a3      	cmp	r3, r4
 8010e5c:	dc10      	bgt.n	8010e80 <__aeabi_d2iz+0x3c>
 8010e5e:	2480      	movs	r4, #128	; 0x80
 8010e60:	0364      	lsls	r4, r4, #13
 8010e62:	4322      	orrs	r2, r4
 8010e64:	4c0e      	ldr	r4, [pc, #56]	; (8010ea0 <__aeabi_d2iz+0x5c>)
 8010e66:	1ae4      	subs	r4, r4, r3
 8010e68:	2c1f      	cmp	r4, #31
 8010e6a:	dd0c      	ble.n	8010e86 <__aeabi_d2iz+0x42>
 8010e6c:	480d      	ldr	r0, [pc, #52]	; (8010ea4 <__aeabi_d2iz+0x60>)
 8010e6e:	1ac3      	subs	r3, r0, r3
 8010e70:	40da      	lsrs	r2, r3
 8010e72:	0013      	movs	r3, r2
 8010e74:	425c      	negs	r4, r3
 8010e76:	2900      	cmp	r1, #0
 8010e78:	d100      	bne.n	8010e7c <__aeabi_d2iz+0x38>
 8010e7a:	001c      	movs	r4, r3
 8010e7c:	0020      	movs	r0, r4
 8010e7e:	bd30      	pop	{r4, r5, pc}
 8010e80:	4b09      	ldr	r3, [pc, #36]	; (8010ea8 <__aeabi_d2iz+0x64>)
 8010e82:	18cc      	adds	r4, r1, r3
 8010e84:	e7fa      	b.n	8010e7c <__aeabi_d2iz+0x38>
 8010e86:	4d09      	ldr	r5, [pc, #36]	; (8010eac <__aeabi_d2iz+0x68>)
 8010e88:	40e0      	lsrs	r0, r4
 8010e8a:	46ac      	mov	ip, r5
 8010e8c:	4463      	add	r3, ip
 8010e8e:	409a      	lsls	r2, r3
 8010e90:	0013      	movs	r3, r2
 8010e92:	4303      	orrs	r3, r0
 8010e94:	e7ee      	b.n	8010e74 <__aeabi_d2iz+0x30>
 8010e96:	46c0      	nop			; (mov r8, r8)
 8010e98:	000003fe 	.word	0x000003fe
 8010e9c:	0000041d 	.word	0x0000041d
 8010ea0:	00000433 	.word	0x00000433
 8010ea4:	00000413 	.word	0x00000413
 8010ea8:	7fffffff 	.word	0x7fffffff
 8010eac:	fffffbed 	.word	0xfffffbed

08010eb0 <__aeabi_i2d>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d02d      	beq.n	8010f12 <__aeabi_i2d+0x62>
 8010eb6:	17c3      	asrs	r3, r0, #31
 8010eb8:	18c5      	adds	r5, r0, r3
 8010eba:	405d      	eors	r5, r3
 8010ebc:	0fc4      	lsrs	r4, r0, #31
 8010ebe:	0028      	movs	r0, r5
 8010ec0:	f7fd fdfc 	bl	800eabc <__clzsi2>
 8010ec4:	4b15      	ldr	r3, [pc, #84]	; (8010f1c <__aeabi_i2d+0x6c>)
 8010ec6:	1a1b      	subs	r3, r3, r0
 8010ec8:	055b      	lsls	r3, r3, #21
 8010eca:	0d5b      	lsrs	r3, r3, #21
 8010ecc:	280a      	cmp	r0, #10
 8010ece:	dd15      	ble.n	8010efc <__aeabi_i2d+0x4c>
 8010ed0:	380b      	subs	r0, #11
 8010ed2:	4085      	lsls	r5, r0
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	032d      	lsls	r5, r5, #12
 8010ed8:	0b2d      	lsrs	r5, r5, #12
 8010eda:	2100      	movs	r1, #0
 8010edc:	0010      	movs	r0, r2
 8010ede:	032d      	lsls	r5, r5, #12
 8010ee0:	0d0a      	lsrs	r2, r1, #20
 8010ee2:	0b2d      	lsrs	r5, r5, #12
 8010ee4:	0512      	lsls	r2, r2, #20
 8010ee6:	432a      	orrs	r2, r5
 8010ee8:	4d0d      	ldr	r5, [pc, #52]	; (8010f20 <__aeabi_i2d+0x70>)
 8010eea:	051b      	lsls	r3, r3, #20
 8010eec:	402a      	ands	r2, r5
 8010eee:	4313      	orrs	r3, r2
 8010ef0:	005b      	lsls	r3, r3, #1
 8010ef2:	07e4      	lsls	r4, r4, #31
 8010ef4:	085b      	lsrs	r3, r3, #1
 8010ef6:	4323      	orrs	r3, r4
 8010ef8:	0019      	movs	r1, r3
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	0002      	movs	r2, r0
 8010efe:	0029      	movs	r1, r5
 8010f00:	3215      	adds	r2, #21
 8010f02:	4091      	lsls	r1, r2
 8010f04:	000a      	movs	r2, r1
 8010f06:	210b      	movs	r1, #11
 8010f08:	1a08      	subs	r0, r1, r0
 8010f0a:	40c5      	lsrs	r5, r0
 8010f0c:	032d      	lsls	r5, r5, #12
 8010f0e:	0b2d      	lsrs	r5, r5, #12
 8010f10:	e7e3      	b.n	8010eda <__aeabi_i2d+0x2a>
 8010f12:	2400      	movs	r4, #0
 8010f14:	2300      	movs	r3, #0
 8010f16:	2500      	movs	r5, #0
 8010f18:	2200      	movs	r2, #0
 8010f1a:	e7de      	b.n	8010eda <__aeabi_i2d+0x2a>
 8010f1c:	0000041e 	.word	0x0000041e
 8010f20:	800fffff 	.word	0x800fffff

08010f24 <__aeabi_ui2d>:
 8010f24:	b510      	push	{r4, lr}
 8010f26:	1e04      	subs	r4, r0, #0
 8010f28:	d025      	beq.n	8010f76 <__aeabi_ui2d+0x52>
 8010f2a:	f7fd fdc7 	bl	800eabc <__clzsi2>
 8010f2e:	4b14      	ldr	r3, [pc, #80]	; (8010f80 <__aeabi_ui2d+0x5c>)
 8010f30:	1a1b      	subs	r3, r3, r0
 8010f32:	055b      	lsls	r3, r3, #21
 8010f34:	0d5b      	lsrs	r3, r3, #21
 8010f36:	280a      	cmp	r0, #10
 8010f38:	dd12      	ble.n	8010f60 <__aeabi_ui2d+0x3c>
 8010f3a:	380b      	subs	r0, #11
 8010f3c:	4084      	lsls	r4, r0
 8010f3e:	2200      	movs	r2, #0
 8010f40:	0324      	lsls	r4, r4, #12
 8010f42:	0b24      	lsrs	r4, r4, #12
 8010f44:	2100      	movs	r1, #0
 8010f46:	0010      	movs	r0, r2
 8010f48:	0324      	lsls	r4, r4, #12
 8010f4a:	0d0a      	lsrs	r2, r1, #20
 8010f4c:	0b24      	lsrs	r4, r4, #12
 8010f4e:	0512      	lsls	r2, r2, #20
 8010f50:	4322      	orrs	r2, r4
 8010f52:	4c0c      	ldr	r4, [pc, #48]	; (8010f84 <__aeabi_ui2d+0x60>)
 8010f54:	051b      	lsls	r3, r3, #20
 8010f56:	4022      	ands	r2, r4
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	005b      	lsls	r3, r3, #1
 8010f5c:	0859      	lsrs	r1, r3, #1
 8010f5e:	bd10      	pop	{r4, pc}
 8010f60:	0002      	movs	r2, r0
 8010f62:	0021      	movs	r1, r4
 8010f64:	3215      	adds	r2, #21
 8010f66:	4091      	lsls	r1, r2
 8010f68:	000a      	movs	r2, r1
 8010f6a:	210b      	movs	r1, #11
 8010f6c:	1a08      	subs	r0, r1, r0
 8010f6e:	40c4      	lsrs	r4, r0
 8010f70:	0324      	lsls	r4, r4, #12
 8010f72:	0b24      	lsrs	r4, r4, #12
 8010f74:	e7e6      	b.n	8010f44 <__aeabi_ui2d+0x20>
 8010f76:	2300      	movs	r3, #0
 8010f78:	2400      	movs	r4, #0
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	e7e2      	b.n	8010f44 <__aeabi_ui2d+0x20>
 8010f7e:	46c0      	nop			; (mov r8, r8)
 8010f80:	0000041e 	.word	0x0000041e
 8010f84:	800fffff 	.word	0x800fffff

08010f88 <__aeabi_f2d>:
 8010f88:	0041      	lsls	r1, r0, #1
 8010f8a:	0e09      	lsrs	r1, r1, #24
 8010f8c:	1c4b      	adds	r3, r1, #1
 8010f8e:	b570      	push	{r4, r5, r6, lr}
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	0246      	lsls	r6, r0, #9
 8010f94:	0a75      	lsrs	r5, r6, #9
 8010f96:	0fc4      	lsrs	r4, r0, #31
 8010f98:	2b01      	cmp	r3, #1
 8010f9a:	dd14      	ble.n	8010fc6 <__aeabi_f2d+0x3e>
 8010f9c:	23e0      	movs	r3, #224	; 0xe0
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	076d      	lsls	r5, r5, #29
 8010fa2:	0b36      	lsrs	r6, r6, #12
 8010fa4:	18cb      	adds	r3, r1, r3
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	0d0a      	lsrs	r2, r1, #20
 8010faa:	0028      	movs	r0, r5
 8010fac:	0512      	lsls	r2, r2, #20
 8010fae:	4d1c      	ldr	r5, [pc, #112]	; (8011020 <__aeabi_f2d+0x98>)
 8010fb0:	4332      	orrs	r2, r6
 8010fb2:	055b      	lsls	r3, r3, #21
 8010fb4:	402a      	ands	r2, r5
 8010fb6:	085b      	lsrs	r3, r3, #1
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	005b      	lsls	r3, r3, #1
 8010fbc:	07e4      	lsls	r4, r4, #31
 8010fbe:	085b      	lsrs	r3, r3, #1
 8010fc0:	4323      	orrs	r3, r4
 8010fc2:	0019      	movs	r1, r3
 8010fc4:	bd70      	pop	{r4, r5, r6, pc}
 8010fc6:	2900      	cmp	r1, #0
 8010fc8:	d114      	bne.n	8010ff4 <__aeabi_f2d+0x6c>
 8010fca:	2d00      	cmp	r5, #0
 8010fcc:	d01e      	beq.n	801100c <__aeabi_f2d+0x84>
 8010fce:	0028      	movs	r0, r5
 8010fd0:	f7fd fd74 	bl	800eabc <__clzsi2>
 8010fd4:	280a      	cmp	r0, #10
 8010fd6:	dc1c      	bgt.n	8011012 <__aeabi_f2d+0x8a>
 8010fd8:	230b      	movs	r3, #11
 8010fda:	002a      	movs	r2, r5
 8010fdc:	1a1b      	subs	r3, r3, r0
 8010fde:	40da      	lsrs	r2, r3
 8010fe0:	0003      	movs	r3, r0
 8010fe2:	3315      	adds	r3, #21
 8010fe4:	409d      	lsls	r5, r3
 8010fe6:	4b0f      	ldr	r3, [pc, #60]	; (8011024 <__aeabi_f2d+0x9c>)
 8010fe8:	0312      	lsls	r2, r2, #12
 8010fea:	1a1b      	subs	r3, r3, r0
 8010fec:	055b      	lsls	r3, r3, #21
 8010fee:	0b16      	lsrs	r6, r2, #12
 8010ff0:	0d5b      	lsrs	r3, r3, #21
 8010ff2:	e7d8      	b.n	8010fa6 <__aeabi_f2d+0x1e>
 8010ff4:	2d00      	cmp	r5, #0
 8010ff6:	d006      	beq.n	8011006 <__aeabi_f2d+0x7e>
 8010ff8:	0b32      	lsrs	r2, r6, #12
 8010ffa:	2680      	movs	r6, #128	; 0x80
 8010ffc:	0336      	lsls	r6, r6, #12
 8010ffe:	076d      	lsls	r5, r5, #29
 8011000:	4316      	orrs	r6, r2
 8011002:	4b09      	ldr	r3, [pc, #36]	; (8011028 <__aeabi_f2d+0xa0>)
 8011004:	e7cf      	b.n	8010fa6 <__aeabi_f2d+0x1e>
 8011006:	4b08      	ldr	r3, [pc, #32]	; (8011028 <__aeabi_f2d+0xa0>)
 8011008:	2600      	movs	r6, #0
 801100a:	e7cc      	b.n	8010fa6 <__aeabi_f2d+0x1e>
 801100c:	2300      	movs	r3, #0
 801100e:	2600      	movs	r6, #0
 8011010:	e7c9      	b.n	8010fa6 <__aeabi_f2d+0x1e>
 8011012:	0003      	movs	r3, r0
 8011014:	002a      	movs	r2, r5
 8011016:	3b0b      	subs	r3, #11
 8011018:	409a      	lsls	r2, r3
 801101a:	2500      	movs	r5, #0
 801101c:	e7e3      	b.n	8010fe6 <__aeabi_f2d+0x5e>
 801101e:	46c0      	nop			; (mov r8, r8)
 8011020:	800fffff 	.word	0x800fffff
 8011024:	00000389 	.word	0x00000389
 8011028:	000007ff 	.word	0x000007ff

0801102c <__aeabi_d2f>:
 801102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801102e:	004c      	lsls	r4, r1, #1
 8011030:	0d64      	lsrs	r4, r4, #21
 8011032:	030b      	lsls	r3, r1, #12
 8011034:	1c62      	adds	r2, r4, #1
 8011036:	0a5b      	lsrs	r3, r3, #9
 8011038:	0f46      	lsrs	r6, r0, #29
 801103a:	0552      	lsls	r2, r2, #21
 801103c:	0fc9      	lsrs	r1, r1, #31
 801103e:	431e      	orrs	r6, r3
 8011040:	00c5      	lsls	r5, r0, #3
 8011042:	0d52      	lsrs	r2, r2, #21
 8011044:	2a01      	cmp	r2, #1
 8011046:	dd29      	ble.n	801109c <__aeabi_d2f+0x70>
 8011048:	4b37      	ldr	r3, [pc, #220]	; (8011128 <__aeabi_d2f+0xfc>)
 801104a:	18e7      	adds	r7, r4, r3
 801104c:	2ffe      	cmp	r7, #254	; 0xfe
 801104e:	dc1c      	bgt.n	801108a <__aeabi_d2f+0x5e>
 8011050:	2f00      	cmp	r7, #0
 8011052:	dd3b      	ble.n	80110cc <__aeabi_d2f+0xa0>
 8011054:	0180      	lsls	r0, r0, #6
 8011056:	1e43      	subs	r3, r0, #1
 8011058:	4198      	sbcs	r0, r3
 801105a:	2207      	movs	r2, #7
 801105c:	00f3      	lsls	r3, r6, #3
 801105e:	0f6d      	lsrs	r5, r5, #29
 8011060:	4303      	orrs	r3, r0
 8011062:	432b      	orrs	r3, r5
 8011064:	401a      	ands	r2, r3
 8011066:	2a00      	cmp	r2, #0
 8011068:	d004      	beq.n	8011074 <__aeabi_d2f+0x48>
 801106a:	220f      	movs	r2, #15
 801106c:	401a      	ands	r2, r3
 801106e:	2a04      	cmp	r2, #4
 8011070:	d000      	beq.n	8011074 <__aeabi_d2f+0x48>
 8011072:	3304      	adds	r3, #4
 8011074:	2280      	movs	r2, #128	; 0x80
 8011076:	04d2      	lsls	r2, r2, #19
 8011078:	401a      	ands	r2, r3
 801107a:	d024      	beq.n	80110c6 <__aeabi_d2f+0x9a>
 801107c:	3701      	adds	r7, #1
 801107e:	b2fa      	uxtb	r2, r7
 8011080:	2fff      	cmp	r7, #255	; 0xff
 8011082:	d002      	beq.n	801108a <__aeabi_d2f+0x5e>
 8011084:	019b      	lsls	r3, r3, #6
 8011086:	0a58      	lsrs	r0, r3, #9
 8011088:	e001      	b.n	801108e <__aeabi_d2f+0x62>
 801108a:	22ff      	movs	r2, #255	; 0xff
 801108c:	2000      	movs	r0, #0
 801108e:	0240      	lsls	r0, r0, #9
 8011090:	05d2      	lsls	r2, r2, #23
 8011092:	0a40      	lsrs	r0, r0, #9
 8011094:	07c9      	lsls	r1, r1, #31
 8011096:	4310      	orrs	r0, r2
 8011098:	4308      	orrs	r0, r1
 801109a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801109c:	4335      	orrs	r5, r6
 801109e:	2c00      	cmp	r4, #0
 80110a0:	d104      	bne.n	80110ac <__aeabi_d2f+0x80>
 80110a2:	2d00      	cmp	r5, #0
 80110a4:	d10a      	bne.n	80110bc <__aeabi_d2f+0x90>
 80110a6:	2200      	movs	r2, #0
 80110a8:	2000      	movs	r0, #0
 80110aa:	e7f0      	b.n	801108e <__aeabi_d2f+0x62>
 80110ac:	2d00      	cmp	r5, #0
 80110ae:	d0ec      	beq.n	801108a <__aeabi_d2f+0x5e>
 80110b0:	2080      	movs	r0, #128	; 0x80
 80110b2:	03c0      	lsls	r0, r0, #15
 80110b4:	4330      	orrs	r0, r6
 80110b6:	22ff      	movs	r2, #255	; 0xff
 80110b8:	e7e9      	b.n	801108e <__aeabi_d2f+0x62>
 80110ba:	2400      	movs	r4, #0
 80110bc:	2300      	movs	r3, #0
 80110be:	025b      	lsls	r3, r3, #9
 80110c0:	0a58      	lsrs	r0, r3, #9
 80110c2:	b2e2      	uxtb	r2, r4
 80110c4:	e7e3      	b.n	801108e <__aeabi_d2f+0x62>
 80110c6:	08db      	lsrs	r3, r3, #3
 80110c8:	003c      	movs	r4, r7
 80110ca:	e7f8      	b.n	80110be <__aeabi_d2f+0x92>
 80110cc:	003b      	movs	r3, r7
 80110ce:	3317      	adds	r3, #23
 80110d0:	dbf3      	blt.n	80110ba <__aeabi_d2f+0x8e>
 80110d2:	2380      	movs	r3, #128	; 0x80
 80110d4:	041b      	lsls	r3, r3, #16
 80110d6:	4333      	orrs	r3, r6
 80110d8:	261e      	movs	r6, #30
 80110da:	1bf6      	subs	r6, r6, r7
 80110dc:	2e1f      	cmp	r6, #31
 80110de:	dd14      	ble.n	801110a <__aeabi_d2f+0xde>
 80110e0:	2202      	movs	r2, #2
 80110e2:	4252      	negs	r2, r2
 80110e4:	1bd7      	subs	r7, r2, r7
 80110e6:	001a      	movs	r2, r3
 80110e8:	40fa      	lsrs	r2, r7
 80110ea:	0017      	movs	r7, r2
 80110ec:	2e20      	cmp	r6, #32
 80110ee:	d004      	beq.n	80110fa <__aeabi_d2f+0xce>
 80110f0:	4a0e      	ldr	r2, [pc, #56]	; (801112c <__aeabi_d2f+0x100>)
 80110f2:	4694      	mov	ip, r2
 80110f4:	4464      	add	r4, ip
 80110f6:	40a3      	lsls	r3, r4
 80110f8:	431d      	orrs	r5, r3
 80110fa:	002b      	movs	r3, r5
 80110fc:	1e5d      	subs	r5, r3, #1
 80110fe:	41ab      	sbcs	r3, r5
 8011100:	2207      	movs	r2, #7
 8011102:	433b      	orrs	r3, r7
 8011104:	401a      	ands	r2, r3
 8011106:	2700      	movs	r7, #0
 8011108:	e7ad      	b.n	8011066 <__aeabi_d2f+0x3a>
 801110a:	4a09      	ldr	r2, [pc, #36]	; (8011130 <__aeabi_d2f+0x104>)
 801110c:	0028      	movs	r0, r5
 801110e:	18a2      	adds	r2, r4, r2
 8011110:	4095      	lsls	r5, r2
 8011112:	4093      	lsls	r3, r2
 8011114:	1e6c      	subs	r4, r5, #1
 8011116:	41a5      	sbcs	r5, r4
 8011118:	40f0      	lsrs	r0, r6
 801111a:	2207      	movs	r2, #7
 801111c:	432b      	orrs	r3, r5
 801111e:	4303      	orrs	r3, r0
 8011120:	401a      	ands	r2, r3
 8011122:	2700      	movs	r7, #0
 8011124:	e79f      	b.n	8011066 <__aeabi_d2f+0x3a>
 8011126:	46c0      	nop			; (mov r8, r8)
 8011128:	fffffc80 	.word	0xfffffc80
 801112c:	fffffca2 	.word	0xfffffca2
 8011130:	fffffc82 	.word	0xfffffc82

08011134 <__clzdi2>:
 8011134:	b510      	push	{r4, lr}
 8011136:	2900      	cmp	r1, #0
 8011138:	d103      	bne.n	8011142 <__clzdi2+0xe>
 801113a:	f7fd fcbf 	bl	800eabc <__clzsi2>
 801113e:	3020      	adds	r0, #32
 8011140:	e002      	b.n	8011148 <__clzdi2+0x14>
 8011142:	1c08      	adds	r0, r1, #0
 8011144:	f7fd fcba 	bl	800eabc <__clzsi2>
 8011148:	bd10      	pop	{r4, pc}
 801114a:	46c0      	nop			; (mov r8, r8)

0801114c <strlen>:
 801114c:	2300      	movs	r3, #0
 801114e:	5cc2      	ldrb	r2, [r0, r3]
 8011150:	3301      	adds	r3, #1
 8011152:	2a00      	cmp	r2, #0
 8011154:	d1fb      	bne.n	801114e <strlen+0x2>
 8011156:	1e58      	subs	r0, r3, #1
 8011158:	4770      	bx	lr
	...

0801115c <pack16to32array>:
		a[i] = a[i-1];
	}
	a[indx] = v;
}

void pack16to32array(uint32_t* a, uint16_t* b, uint16_t* c){
 801115c:	2300      	movs	r3, #0
 801115e:	b570      	push	{r4, r5, r6, lr}
	const int n = 4;//number of peaks to find
	for(uint8_t i = 0; i < n; i++ ){
		a[i] = (((uint32_t)b[i])<<16) | c[i];
 8011160:	5acc      	ldrh	r4, [r1, r3]
 8011162:	5ad6      	ldrh	r6, [r2, r3]
 8011164:	0424      	lsls	r4, r4, #16
 8011166:	005d      	lsls	r5, r3, #1
 8011168:	4334      	orrs	r4, r6
 801116a:	3302      	adds	r3, #2
 801116c:	5144      	str	r4, [r0, r5]
	for(uint8_t i = 0; i < n; i++ ){
 801116e:	2b08      	cmp	r3, #8
 8011170:	d1f6      	bne.n	8011160 <pack16to32array+0x4>
	}
 8011172:	bd70      	pop	{r4, r5, r6, pc}

08011174 <getpeaks>:
void getpeaks(uint16_t** data, uint16_t data_len, uint16_t* indexes, uint16_t* amplitudes, uint16_t min_sep){
 8011174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011176:	4645      	mov	r5, r8
 8011178:	46de      	mov	lr, fp
 801117a:	4657      	mov	r7, sl
 801117c:	464e      	mov	r6, r9
 801117e:	b5e0      	push	{r5, r6, r7, lr}
 8011180:	b083      	sub	sp, #12
 8011182:	4680      	mov	r8, r0
 8011184:	a80c      	add	r0, sp, #48	; 0x30
 8011186:	8800      	ldrh	r0, [r0, #0]
 8011188:	9000      	str	r0, [sp, #0]
 801118a:	2000      	movs	r0, #0
		indexes[i] = 0;
 801118c:	0004      	movs	r4, r0
 801118e:	5214      	strh	r4, [r2, r0]
		amplitudes[i] = 0;
 8011190:	521c      	strh	r4, [r3, r0]
 8011192:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < n; i++){
 8011194:	2808      	cmp	r0, #8
 8011196:	d1fa      	bne.n	801118e <getpeaks+0x1a>
	uint16_t indexend = MIN(bins,index + min_sep);
 8011198:	3805      	subs	r0, #5
	for(uint16_t i = 0; i < bins; i++){
 801119a:	2400      	movs	r4, #0
	uint16_t indexend = MIN(bins,index + min_sep);
 801119c:	4684      	mov	ip, r0
 801119e:	4646      	mov	r6, r8
	for(uint16_t i = 0; i < bins; i++){
 80111a0:	428c      	cmp	r4, r1
 80111a2:	d25c      	bcs.n	801125e <getpeaks+0xea>
	uint16_t amp = data[0][index];
 80111a4:	6835      	ldr	r5, [r6, #0]
 80111a6:	0060      	lsls	r0, r4, #1
 80111a8:	46a9      	mov	r9, r5
 80111aa:	4481      	add	r9, r0
 80111ac:	4648      	mov	r0, r9
 80111ae:	8800      	ldrh	r0, [r0, #0]
 80111b0:	4680      	mov	r8, r0
	uint16_t indexend = MIN(bins,index + min_sep);
 80111b2:	9800      	ldr	r0, [sp, #0]
 80111b4:	1825      	adds	r5, r4, r0
 80111b6:	002f      	movs	r7, r5
 80111b8:	428d      	cmp	r5, r1
 80111ba:	dd00      	ble.n	80111be <getpeaks+0x4a>
 80111bc:	000d      	movs	r5, r1
 80111be:	46ca      	mov	sl, r9
 80111c0:	0020      	movs	r0, r4
 80111c2:	b2ad      	uxth	r5, r5
 80111c4:	9501      	str	r5, [sp, #4]
	for(uint16_t i = index; i < indexend; i ++){
 80111c6:	9d01      	ldr	r5, [sp, #4]
 80111c8:	4285      	cmp	r5, r0
 80111ca:	d90c      	bls.n	80111e6 <getpeaks+0x72>
 80111cc:	2502      	movs	r5, #2
 80111ce:	46ab      	mov	fp, r5
		if(amp < data[0][i]){return i;}
 80111d0:	3d04      	subs	r5, #4
 80111d2:	44da      	add	sl, fp
 80111d4:	4455      	add	r5, sl
 80111d6:	882d      	ldrh	r5, [r5, #0]
 80111d8:	4545      	cmp	r5, r8
 80111da:	d802      	bhi.n	80111e2 <getpeaks+0x6e>
	for(uint16_t i = index; i < indexend; i ++){
 80111dc:	3001      	adds	r0, #1
 80111de:	b280      	uxth	r0, r0
 80111e0:	e7f1      	b.n	80111c6 <getpeaks+0x52>
		if (nxpeak == 0){
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d138      	bne.n	8011258 <getpeaks+0xe4>
	uint16_t indexend = MIN(bins,index + min_sep);
 80111e6:	2504      	movs	r5, #4
 80111e8:	469a      	mov	sl, r3
 80111ea:	1d98      	adds	r0, r3, #6
				if(data[0][i] > amplitudes[j]){insert_indx = j;}
 80111ec:	8803      	ldrh	r3, [r0, #0]
 80111ee:	4543      	cmp	r3, r8
 80111f0:	d206      	bcs.n	8011200 <getpeaks+0x8c>
 80111f2:	3d01      	subs	r5, #1
 80111f4:	b2ed      	uxtb	r5, r5
 80111f6:	3802      	subs	r0, #2
			for(int8_t j = n-1; j >= 0; j--){
 80111f8:	2d00      	cmp	r5, #0
 80111fa:	d1f7      	bne.n	80111ec <getpeaks+0x78>
 80111fc:	4653      	mov	r3, sl
 80111fe:	e003      	b.n	8011208 <getpeaks+0x94>
 8011200:	4653      	mov	r3, sl
			if(insert_indx < 4){
 8011202:	0020      	movs	r0, r4
 8011204:	2d04      	cmp	r5, #4
 8011206:	d027      	beq.n	8011258 <getpeaks+0xe4>
	uint16_t indexend = MIN(bins,index + min_sep);
 8011208:	4660      	mov	r0, ip
 801120a:	468b      	mov	fp, r1
 801120c:	4698      	mov	r8, r3
	for(int8_t i = n-1; i > indx; i-- ){
 801120e:	42a8      	cmp	r0, r5
 8011210:	dd08      	ble.n	8011224 <getpeaks+0xb0>
		a[i] = a[i-1];
 8011212:	4b16      	ldr	r3, [pc, #88]	; (801126c <getpeaks+0xf8>)
 8011214:	18c3      	adds	r3, r0, r3
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	5ad1      	ldrh	r1, [r2, r3]
 801121a:	3801      	subs	r0, #1
 801121c:	18d3      	adds	r3, r2, r3
 801121e:	8059      	strh	r1, [r3, #2]
 8011220:	b240      	sxtb	r0, r0
 8011222:	e7f4      	b.n	801120e <getpeaks+0x9a>
	a[indx] = v;
 8011224:	0068      	lsls	r0, r5, #1
 8011226:	5214      	strh	r4, [r2, r0]
 8011228:	4643      	mov	r3, r8
 801122a:	4680      	mov	r8, r0
				insert(amplitudes, n, data[0][i],insert_indx);
 801122c:	4648      	mov	r0, r9
 801122e:	8800      	ldrh	r0, [r0, #0]
 8011230:	4659      	mov	r1, fp
 8011232:	4681      	mov	r9, r0
 8011234:	4693      	mov	fp, r2
	for(int8_t i = n-1; i > indx; i-- ){
 8011236:	4660      	mov	r0, ip
 8011238:	42a8      	cmp	r0, r5
 801123a:	dd08      	ble.n	801124e <getpeaks+0xda>
		a[i] = a[i-1];
 801123c:	4c0b      	ldr	r4, [pc, #44]	; (801126c <getpeaks+0xf8>)
 801123e:	1904      	adds	r4, r0, r4
 8011240:	0064      	lsls	r4, r4, #1
 8011242:	5b1a      	ldrh	r2, [r3, r4]
 8011244:	3801      	subs	r0, #1
 8011246:	191c      	adds	r4, r3, r4
 8011248:	8062      	strh	r2, [r4, #2]
 801124a:	b240      	sxtb	r0, r0
 801124c:	e7f4      	b.n	8011238 <getpeaks+0xc4>
	a[indx] = v;
 801124e:	4640      	mov	r0, r8
 8011250:	464c      	mov	r4, r9
 8011252:	465a      	mov	r2, fp
 8011254:	521c      	strh	r4, [r3, r0]
				i += min_sep;
 8011256:	b2b8      	uxth	r0, r7
	for(uint16_t i = 0; i < bins; i++){
 8011258:	3001      	adds	r0, #1
 801125a:	b284      	uxth	r4, r0
 801125c:	e7a0      	b.n	80111a0 <getpeaks+0x2c>
}
 801125e:	b003      	add	sp, #12
 8011260:	bc3c      	pop	{r2, r3, r4, r5}
 8011262:	4690      	mov	r8, r2
 8011264:	4699      	mov	r9, r3
 8011266:	46a2      	mov	sl, r4
 8011268:	46ab      	mov	fp, r5
 801126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801126c:	7fffffff 	.word	0x7fffffff

08011270 <center_of_mass>:
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8011270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011272:	4657      	mov	r7, sl
 8011274:	464e      	mov	r6, r9
 8011276:	4645      	mov	r5, r8
 8011278:	46de      	mov	lr, fp
 801127a:	b5e0      	push	{r5, r6, r7, lr}
 801127c:	b089      	sub	sp, #36	; 0x24
 801127e:	ac07      	add	r4, sp, #28
 8011280:	4682      	mov	sl, r0
		(sweep >= 0) && (sweep < _sweeps) &&
 8011282:	483a      	ldr	r0, [pc, #232]	; (801136c <center_of_mass+0xfc>)
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8011284:	8021      	strh	r1, [r4, #0]
		(sweep >= 0) && (sweep < _sweeps) &&
 8011286:	7806      	ldrb	r6, [r0, #0]
floatv2_t center_of_mass(uint8v2_t max, uint8_t r){
 8011288:	040b      	lsls	r3, r1, #16
		(sweep >= 0) && (sweep < _sweeps) &&
 801128a:	9601      	str	r6, [sp, #4]
		(bin >= 0) && (bin < _bins)
 801128c:	7846      	ldrb	r6, [r0, #1]
	uint8_t mbin = max.x2;
 801128e:	0e1b      	lsrs	r3, r3, #24
		(bin >= 0) && (bin < _bins)
 8011290:	9602      	str	r6, [sp, #8]
	floatv2_t center = {0.0f,0.0f};
 8011292:	2600      	movs	r6, #0
	float mass = 0.0f;	
 8011294:	46b0      	mov	r8, r6
 8011296:	46b1      	mov	r9, r6
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 8011298:	b295      	uxth	r5, r2
	uint8_t msweep = max.x1;
 801129a:	b2c9      	uxtb	r1, r1
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 801129c:	1b5c      	subs	r4, r3, r5
 801129e:	189b      	adds	r3, r3, r2
		return _conv_data[sweep][bin];
 80112a0:	6840      	ldr	r0, [r0, #4]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80112a2:	9304      	str	r3, [sp, #16]
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80112a4:	1b4b      	subs	r3, r1, r5
 80112a6:	9305      	str	r3, [sp, #20]
 80112a8:	188b      	adds	r3, r1, r2
		return _conv_data[sweep][bin];
 80112aa:	9003      	str	r0, [sp, #12]
	floatv2_t center = {0.0f,0.0f};
 80112ac:	1c37      	adds	r7, r6, #0
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80112ae:	9306      	str	r3, [sp, #24]
	for(int16_t i = mbin-r; i<=mbin+r; i++){
 80112b0:	9b04      	ldr	r3, [sp, #16]
 80112b2:	429c      	cmp	r4, r3
 80112b4:	dc3d      	bgt.n	8011332 <center_of_mass+0xc2>
		return _conv_data[sweep][bin];
 80112b6:	0063      	lsls	r3, r4, #1
 80112b8:	469b      	mov	fp, r3
	for(int16_t j = msweep-r; j<=msweep+r; j++){
 80112ba:	9d05      	ldr	r5, [sp, #20]
 80112bc:	9b06      	ldr	r3, [sp, #24]
 80112be:	429d      	cmp	r5, r3
 80112c0:	dc34      	bgt.n	801132c <center_of_mass+0xbc>
		return 0;
 80112c2:	2600      	movs	r6, #0
	if(
 80112c4:	42b5      	cmp	r5, r6
 80112c6:	db0c      	blt.n	80112e2 <center_of_mass+0x72>
		(sweep >= 0) && (sweep < _sweeps) &&
 80112c8:	9b01      	ldr	r3, [sp, #4]
 80112ca:	429d      	cmp	r5, r3
 80112cc:	da09      	bge.n	80112e2 <center_of_mass+0x72>
 80112ce:	42b4      	cmp	r4, r6
 80112d0:	db07      	blt.n	80112e2 <center_of_mass+0x72>
		(bin >= 0) && (bin < _bins)
 80112d2:	9b02      	ldr	r3, [sp, #8]
 80112d4:	429c      	cmp	r4, r3
 80112d6:	da04      	bge.n	80112e2 <center_of_mass+0x72>
		return _conv_data[sweep][bin];
 80112d8:	9a03      	ldr	r2, [sp, #12]
 80112da:	00ab      	lsls	r3, r5, #2
 80112dc:	589b      	ldr	r3, [r3, r2]
 80112de:	465a      	mov	r2, fp
 80112e0:	5a9e      	ldrh	r6, [r3, r2]
			mass += getdata(j,i);
 80112e2:	0030      	movs	r0, r6
 80112e4:	f7fe f828 	bl	800f338 <__aeabi_i2f>
 80112e8:	1c01      	adds	r1, r0, #0
 80112ea:	4640      	mov	r0, r8
 80112ec:	f7fc fe44 	bl	800df78 <__aeabi_fadd>
 80112f0:	4680      	mov	r8, r0
			center.x1 += (float)getdata(j,i)*(float)j;
 80112f2:	0030      	movs	r0, r6
 80112f4:	f7fe f86a 	bl	800f3cc <__aeabi_ui2f>
 80112f8:	1c06      	adds	r6, r0, #0
 80112fa:	0028      	movs	r0, r5
 80112fc:	f7fe f81c 	bl	800f338 <__aeabi_i2f>
 8011300:	1c31      	adds	r1, r6, #0
 8011302:	f7fd f8e5 	bl	800e4d0 <__aeabi_fmul>
 8011306:	1c01      	adds	r1, r0, #0
 8011308:	1c38      	adds	r0, r7, #0
 801130a:	f7fc fe35 	bl	800df78 <__aeabi_fadd>
 801130e:	1c07      	adds	r7, r0, #0
			center.x2 += (float)getdata(j,i)*(float)i;
 8011310:	0020      	movs	r0, r4
 8011312:	f7fe f811 	bl	800f338 <__aeabi_i2f>
 8011316:	1c31      	adds	r1, r6, #0
 8011318:	f7fd f8da 	bl	800e4d0 <__aeabi_fmul>
 801131c:	1c01      	adds	r1, r0, #0
 801131e:	4648      	mov	r0, r9
 8011320:	f7fc fe2a 	bl	800df78 <__aeabi_fadd>
 8011324:	3501      	adds	r5, #1
 8011326:	4681      	mov	r9, r0
 8011328:	b22d      	sxth	r5, r5
 801132a:	e7c7      	b.n	80112bc <center_of_mass+0x4c>
 801132c:	3401      	adds	r4, #1
 801132e:	b224      	sxth	r4, r4
 8011330:	e7be      	b.n	80112b0 <center_of_mass+0x40>
	if(mass != 0.0f){	
 8011332:	2100      	movs	r1, #0
 8011334:	4640      	mov	r0, r8
 8011336:	464e      	mov	r6, r9
 8011338:	f7fd fdbc 	bl	800eeb4 <__aeabi_fcmpeq>
 801133c:	2800      	cmp	r0, #0
 801133e:	d109      	bne.n	8011354 <center_of_mass+0xe4>
		center.x1 /= mass;
 8011340:	4641      	mov	r1, r8
 8011342:	1c38      	adds	r0, r7, #0
 8011344:	f7fc ffb2 	bl	800e2ac <__aeabi_fdiv>
		center.x2 /= mass;
 8011348:	4641      	mov	r1, r8
		center.x1 /= mass;
 801134a:	1c07      	adds	r7, r0, #0
		center.x2 /= mass;
 801134c:	4648      	mov	r0, r9
 801134e:	f7fc ffad 	bl	800e2ac <__aeabi_fdiv>
 8011352:	1c06      	adds	r6, r0, #0
	return center;
 8011354:	4653      	mov	r3, sl
}
 8011356:	4650      	mov	r0, sl
	return center;
 8011358:	601f      	str	r7, [r3, #0]
 801135a:	605e      	str	r6, [r3, #4]
}
 801135c:	b009      	add	sp, #36	; 0x24
 801135e:	bc3c      	pop	{r2, r3, r4, r5}
 8011360:	4690      	mov	r8, r2
 8011362:	4699      	mov	r9, r3
 8011364:	46a2      	mov	sl, r4
 8011366:	46ab      	mov	fp, r5
 8011368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801136a:	46c0      	nop			; (mov r8, r8)
 801136c:	2000008c 	.word	0x2000008c

08011370 <null_data>:
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8011370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011372:	46ce      	mov	lr, r9
 8011374:	4647      	mov	r7, r8
 8011376:	b580      	push	{r7, lr}
 8011378:	b083      	sub	sp, #12
 801137a:	0006      	movs	r6, r0
 801137c:	466f      	mov	r7, sp
 801137e:	a801      	add	r0, sp, #4
 8011380:	8001      	strh	r1, [r0, #0]
	uint16_t apex = data[msweep][mbin];
 8011382:	b2d0      	uxtb	r0, r2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8011384:	040d      	lsls	r5, r1, #16
 8011386:	1c0c      	adds	r4, r1, #0
	uint16_t apex = data[msweep][mbin];
 8011388:	0080      	lsls	r0, r0, #2
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 801138a:	0411      	lsls	r1, r2, #16
 801138c:	803a      	strh	r2, [r7, #0]
	uint16_t apex = data[msweep][mbin];
 801138e:	0e09      	lsrs	r1, r1, #24
void null_data(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 8011390:	1c1f      	adds	r7, r3, #0
	uint16_t apex = data[msweep][mbin];
 8011392:	5983      	ldr	r3, [r0, r6]
 8011394:	0049      	lsls	r1, r1, #1
	uint16_t halfpex = apex*threshold;
 8011396:	5ac8      	ldrh	r0, [r1, r3]
 8011398:	f7fd ffce 	bl	800f338 <__aeabi_i2f>
 801139c:	1c39      	adds	r1, r7, #0
 801139e:	f7fd f897 	bl	800e4d0 <__aeabi_fmul>
 80113a2:	f7fd fdd5 	bl	800ef50 <__aeabi_f2uiz>
	for(uint16_t j = 0; j<sweeps/2; j++){
 80113a6:	2300      	movs	r3, #0
			data[j][i] = 0;
 80113a8:	4699      	mov	r9, r3
	for(uint16_t j = 0; j<sweeps/2; j++){
 80113aa:	b2e4      	uxtb	r4, r4
 80113ac:	0864      	lsrs	r4, r4, #1
	uint8_t bins = data_size.x2;
 80113ae:	0e2d      	lsrs	r5, r5, #24
 80113b0:	00a4      	lsls	r4, r4, #2
	uint16_t halfpex = apex*threshold;
 80113b2:	b280      	uxth	r0, r0
 80113b4:	1934      	adds	r4, r6, r4
	for(uint16_t i = 0; i<bins; i++){
 80113b6:	b2ad      	uxth	r5, r5
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	4295      	cmp	r5, r2
 80113bc:	d90f      	bls.n	80113de <null_data+0x6e>
 80113be:	005a      	lsls	r2, r3, #1
 80113c0:	4694      	mov	ip, r2
 80113c2:	0032      	movs	r2, r6
	for(uint16_t j = 0; j<sweeps/2; j++){
 80113c4:	42a2      	cmp	r2, r4
 80113c6:	d008      	beq.n	80113da <null_data+0x6a>
		if(data[j][i] > halfpex){
 80113c8:	6811      	ldr	r1, [r2, #0]
 80113ca:	4461      	add	r1, ip
 80113cc:	880f      	ldrh	r7, [r1, #0]
 80113ce:	4287      	cmp	r7, r0
 80113d0:	d901      	bls.n	80113d6 <null_data+0x66>
			data[j][i] = 0;
 80113d2:	464f      	mov	r7, r9
 80113d4:	800f      	strh	r7, [r1, #0]
 80113d6:	3204      	adds	r2, #4
 80113d8:	e7f4      	b.n	80113c4 <null_data+0x54>
 80113da:	3301      	adds	r3, #1
 80113dc:	e7ec      	b.n	80113b8 <null_data+0x48>
}
 80113de:	b003      	add	sp, #12
 80113e0:	bc0c      	pop	{r2, r3}
 80113e2:	4690      	mov	r8, r2
 80113e4:	4699      	mov	r9, r3
 80113e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080113e8 <get_msd>:
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 80113e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ea:	46de      	mov	lr, fp
 80113ec:	464e      	mov	r6, r9
 80113ee:	4645      	mov	r5, r8
 80113f0:	4657      	mov	r7, sl
 80113f2:	b5e0      	push	{r5, r6, r7, lr}
 80113f4:	b089      	sub	sp, #36	; 0x24
 80113f6:	040e      	lsls	r6, r1, #16
 80113f8:	4681      	mov	r9, r0
 80113fa:	ad06      	add	r5, sp, #24
 80113fc:	a807      	add	r0, sp, #28
 80113fe:	8001      	strh	r1, [r0, #0]
 8011400:	802a      	strh	r2, [r5, #0]
 8011402:	1c1d      	adds	r5, r3, #0
	uint8_t bins = data_size.x2;
 8011404:	0e33      	lsrs	r3, r6, #24
 8011406:	9303      	str	r3, [sp, #12]
	uint16_t apex = data[msweep][mbin];
 8011408:	b2d3      	uxtb	r3, r2
 801140a:	469b      	mov	fp, r3
float get_msd(uint16_t** data, uint8v2_t data_size, uint8v2_t max, float threshold){
 801140c:	1c0c      	adds	r4, r1, #0
 801140e:	0411      	lsls	r1, r2, #16
	uint16_t apex = data[msweep][mbin];
 8011410:	0e0b      	lsrs	r3, r1, #24
 8011412:	4698      	mov	r8, r3
 8011414:	465b      	mov	r3, fp
 8011416:	464a      	mov	r2, r9
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	589b      	ldr	r3, [r3, r2]
 801141c:	4642      	mov	r2, r8
 801141e:	0052      	lsls	r2, r2, #1
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8011420:	5ad0      	ldrh	r0, [r2, r3]
 8011422:	f7fd ff89 	bl	800f338 <__aeabi_i2f>
 8011426:	1c29      	adds	r1, r5, #0
	float mass = 0.0f;
 8011428:	2500      	movs	r5, #0
	uint16_t halfpex = (uint16_t)(apex * threshold);
 801142a:	f7fd f851 	bl	800e4d0 <__aeabi_fmul>
 801142e:	f7fd fd8f 	bl	800ef50 <__aeabi_f2uiz>
	for(int16_t j = 0; j<sweeps/2; j++){
 8011432:	2600      	movs	r6, #0
 8011434:	46aa      	mov	sl, r5
	uint16_t halfpex = (uint16_t)(apex * threshold);
 8011436:	b283      	uxth	r3, r0
	for(int16_t j = 0; j<sweeps/2; j++){
 8011438:	b2e4      	uxtb	r4, r4
	uint16_t halfpex = (uint16_t)(apex * threshold);
 801143a:	9304      	str	r3, [sp, #16]
	for(int16_t j = 0; j<sweeps/2; j++){
 801143c:	0863      	lsrs	r3, r4, #1
 801143e:	9302      	str	r3, [sp, #8]
	for(int16_t i = 0; i<bins; i++){
 8011440:	9b03      	ldr	r3, [sp, #12]
 8011442:	42b3      	cmp	r3, r6
 8011444:	dd2d      	ble.n	80114a2 <get_msd+0xba>
 8011446:	0073      	lsls	r3, r6, #1
 8011448:	9305      	str	r3, [sp, #20]
 801144a:	4643      	mov	r3, r8
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 801144c:	2700      	movs	r7, #0
 801144e:	1af3      	subs	r3, r6, r3
 8011450:	435b      	muls	r3, r3
 8011452:	9301      	str	r3, [sp, #4]
	for(int16_t j = 0; j<sweeps/2; j++){
 8011454:	9b02      	ldr	r3, [sp, #8]
 8011456:	42bb      	cmp	r3, r7
 8011458:	dd21      	ble.n	801149e <get_msd+0xb6>
		if (data[j][i] > halfpex){
 801145a:	464a      	mov	r2, r9
 801145c:	00bb      	lsls	r3, r7, #2
 801145e:	589b      	ldr	r3, [r3, r2]
 8011460:	9a05      	ldr	r2, [sp, #20]
 8011462:	5a98      	ldrh	r0, [r3, r2]
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	4298      	cmp	r0, r3
 8011468:	d917      	bls.n	801149a <get_msd+0xb2>
			mass += data[j][i];
 801146a:	f7fd ff65 	bl	800f338 <__aeabi_i2f>
 801146e:	1c01      	adds	r1, r0, #0
 8011470:	1c04      	adds	r4, r0, #0
 8011472:	1c28      	adds	r0, r5, #0
 8011474:	f7fc fd80 	bl	800df78 <__aeabi_fadd>
 8011478:	465b      	mov	r3, fp
 801147a:	1c05      	adds	r5, r0, #0
 801147c:	1af8      	subs	r0, r7, r3
			uint32_t dist = ((j-msweep)*(j-msweep) + (i-mbin)*(i-mbin));
 801147e:	9b01      	ldr	r3, [sp, #4]
 8011480:	4340      	muls	r0, r0
 8011482:	469c      	mov	ip, r3
 8011484:	4460      	add	r0, ip
			meansqdist += (float)abs(data[j][i])*(float)(dist);
 8011486:	f7fd ffa1 	bl	800f3cc <__aeabi_ui2f>
 801148a:	1c21      	adds	r1, r4, #0
 801148c:	f7fd f820 	bl	800e4d0 <__aeabi_fmul>
 8011490:	1c01      	adds	r1, r0, #0
 8011492:	4650      	mov	r0, sl
 8011494:	f7fc fd70 	bl	800df78 <__aeabi_fadd>
 8011498:	4682      	mov	sl, r0
 801149a:	3701      	adds	r7, #1
 801149c:	e7da      	b.n	8011454 <get_msd+0x6c>
 801149e:	3601      	adds	r6, #1
 80114a0:	e7ce      	b.n	8011440 <get_msd+0x58>
	if(mass != 0.0f){
 80114a2:	2100      	movs	r1, #0
 80114a4:	1c28      	adds	r0, r5, #0
 80114a6:	4654      	mov	r4, sl
 80114a8:	f7fd fd04 	bl	800eeb4 <__aeabi_fcmpeq>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d104      	bne.n	80114ba <get_msd+0xd2>
		meansqdist /= mass;
 80114b0:	1c29      	adds	r1, r5, #0
 80114b2:	4650      	mov	r0, sl
 80114b4:	f7fc fefa 	bl	800e2ac <__aeabi_fdiv>
 80114b8:	1c04      	adds	r4, r0, #0
}
 80114ba:	1c20      	adds	r0, r4, #0
 80114bc:	b009      	add	sp, #36	; 0x24
 80114be:	bc3c      	pop	{r2, r3, r4, r5}
 80114c0:	4690      	mov	r8, r2
 80114c2:	4699      	mov	r9, r3
 80114c4:	46a2      	mov	sl, r4
 80114c6:	46ab      	mov	fp, r5
 80114c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080114ca <max2d>:
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 80114ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114cc:	46d6      	mov	lr, sl
 80114ce:	464f      	mov	r7, r9
 80114d0:	4646      	mov	r6, r8
 80114d2:	b5c0      	push	{r6, r7, lr}
 80114d4:	b084      	sub	sp, #16
 80114d6:	aa01      	add	r2, sp, #4
 80114d8:	040f      	lsls	r7, r1, #16
 80114da:	8011      	strh	r1, [r2, #0]
		for(uint16_t j = 0; j<sweeps/2; j++){
 80114dc:	b2c9      	uxtb	r1, r1
 80114de:	084b      	lsrs	r3, r1, #1
 80114e0:	469a      	mov	sl, r3
 80114e2:	2300      	movs	r3, #0
uint8v2_t max2d(uint16_t** data, uint8v2_t data_size){
 80114e4:	4684      	mov	ip, r0
	uint8_t msweep = 0;
 80114e6:	001a      	movs	r2, r3
	uint8_t mbin = 0;
 80114e8:	001c      	movs	r4, r3
	uint16_t apex = 0;
 80114ea:	0018      	movs	r0, r3
	for(uint16_t i = 0; i<bins; i++){
 80114ec:	0e3f      	lsrs	r7, r7, #24
 80114ee:	b29d      	uxth	r5, r3
 80114f0:	42af      	cmp	r7, r5
 80114f2:	d915      	bls.n	8011520 <max2d+0x56>
 80114f4:	0059      	lsls	r1, r3, #1
 80114f6:	4689      	mov	r9, r1
					mbin = i;
 80114f8:	b2d9      	uxtb	r1, r3
	for(uint16_t i = 0; i<bins; i++){
 80114fa:	2500      	movs	r5, #0
					mbin = i;
 80114fc:	4688      	mov	r8, r1
		for(uint16_t j = 0; j<sweeps/2; j++){
 80114fe:	b2ae      	uxth	r6, r5
 8011500:	45b2      	cmp	sl, r6
 8011502:	d90b      	bls.n	801151c <max2d+0x52>
				if(data[j][i] > apex){
 8011504:	4661      	mov	r1, ip
 8011506:	00ae      	lsls	r6, r5, #2
 8011508:	598e      	ldr	r6, [r1, r6]
 801150a:	4649      	mov	r1, r9
 801150c:	5a76      	ldrh	r6, [r6, r1]
 801150e:	4286      	cmp	r6, r0
 8011510:	d902      	bls.n	8011518 <max2d+0x4e>
					mbin = i;
 8011512:	4644      	mov	r4, r8
					msweep = j;
 8011514:	0030      	movs	r0, r6
 8011516:	b2ea      	uxtb	r2, r5
 8011518:	3501      	adds	r5, #1
 801151a:	e7f0      	b.n	80114fe <max2d+0x34>
 801151c:	3301      	adds	r3, #1
 801151e:	e7e6      	b.n	80114ee <max2d+0x24>
	return max_index;
 8011520:	20ff      	movs	r0, #255	; 0xff
 8011522:	4002      	ands	r2, r0
 8011524:	4020      	ands	r0, r4
 8011526:	0200      	lsls	r0, r0, #8
 8011528:	4310      	orrs	r0, r2
}
 801152a:	b004      	add	sp, #16
 801152c:	bc1c      	pop	{r2, r3, r4}
 801152e:	4690      	mov	r8, r2
 8011530:	4699      	mov	r9, r3
 8011532:	46a2      	mov	sl, r4
 8011534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011536 <dobandstop>:
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8011536:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011538:	2300      	movs	r3, #0
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 801153a:	46de      	mov	lr, fp
 801153c:	4693      	mov	fp, r2
		if(mask & (1<<j)){
 801153e:	2201      	movs	r2, #1
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8011540:	4657      	mov	r7, sl
 8011542:	464e      	mov	r6, r9
 8011544:	4645      	mov	r5, r8
		if(mask & (1<<j)){
 8011546:	4691      	mov	r9, r2
					data[j][i] = 0;
 8011548:	469a      	mov	sl, r3
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 801154a:	b5e0      	push	{r5, r6, r7, lr}
 801154c:	040d      	lsls	r5, r1, #16
	for(uint16_t j = 0; j<sweeps/2; j++){
 801154e:	b2c9      	uxtb	r1, r1
void dobandstop(uint16_t** data, uint8v2_t data_size, uint32_t mask){
 8011550:	b083      	sub	sp, #12
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011552:	0849      	lsrs	r1, r1, #1
			for(uint16_t i = 0; i<bins; i++){
 8011554:	0e2d      	lsrs	r5, r5, #24
	for(uint16_t j = 0; j<sweeps/2; j++){
 8011556:	b29c      	uxth	r4, r3
 8011558:	42a1      	cmp	r1, r4
 801155a:	d915      	bls.n	8011588 <dobandstop+0x52>
		if(mask & (1<<j)){
 801155c:	464c      	mov	r4, r9
 801155e:	465a      	mov	r2, fp
 8011560:	409c      	lsls	r4, r3
 8011562:	4222      	tst	r2, r4
 8011564:	d101      	bne.n	801156a <dobandstop+0x34>
 8011566:	3301      	adds	r3, #1
 8011568:	e7f5      	b.n	8011556 <dobandstop+0x20>
 801156a:	009c      	lsls	r4, r3, #2
 801156c:	46a4      	mov	ip, r4
 801156e:	2400      	movs	r4, #0
			for(uint16_t i = 0; i<bins; i++){
 8011570:	b2a6      	uxth	r6, r4
 8011572:	42b5      	cmp	r5, r6
 8011574:	d9f7      	bls.n	8011566 <dobandstop+0x30>
					data[j][i] = 0;
 8011576:	0066      	lsls	r6, r4, #1
 8011578:	46b0      	mov	r8, r6
 801157a:	4666      	mov	r6, ip
 801157c:	4647      	mov	r7, r8
 801157e:	4652      	mov	r2, sl
 8011580:	5986      	ldr	r6, [r0, r6]
 8011582:	3401      	adds	r4, #1
 8011584:	53ba      	strh	r2, [r7, r6]
 8011586:	e7f3      	b.n	8011570 <dobandstop+0x3a>
}
 8011588:	b003      	add	sp, #12
 801158a:	bc3c      	pop	{r2, r3, r4, r5}
 801158c:	4690      	mov	r8, r2
 801158e:	4699      	mov	r9, r3
 8011590:	46a2      	mov	sl, r4
 8011592:	46ab      	mov	fp, r5
 8011594:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011596 <dcdatarm>:
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 8011596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011598:	4647      	mov	r7, r8
 801159a:	46ce      	mov	lr, r9
 801159c:	4680      	mov	r8, r0
	uint8_t bins = data_size.x2;
 801159e:	2400      	movs	r4, #0
void dcdatarm(uint16_t** data, uint8v2_t data_size){
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b2ce      	uxtb	r6, r1
 80115a4:	b083      	sub	sp, #12
 80115a6:	040f      	lsls	r7, r1, #16
 80115a8:	ab01      	add	r3, sp, #4
 80115aa:	00b5      	lsls	r5, r6, #2
 80115ac:	8019      	strh	r1, [r3, #0]
 80115ae:	4445      	add	r5, r8
	for(uint16_t i = 0; i<bins; i++){
 80115b0:	0e3f      	lsrs	r7, r7, #24
 80115b2:	b2a3      	uxth	r3, r4
 80115b4:	429f      	cmp	r7, r3
 80115b6:	d918      	bls.n	80115ea <dcdatarm+0x54>
 80115b8:	0063      	lsls	r3, r4, #1
 80115ba:	4699      	mov	r9, r3
		uint32_t accumulator = 0;
 80115bc:	2000      	movs	r0, #0
	for(uint16_t i = 0; i<bins; i++){
 80115be:	4643      	mov	r3, r8
		for(uint16_t j = 0; j<sweeps; j++){
 80115c0:	42ab      	cmp	r3, r5
 80115c2:	d004      	beq.n	80115ce <dcdatarm+0x38>
			accumulator += data[j][i];
 80115c4:	4649      	mov	r1, r9
 80115c6:	cb04      	ldmia	r3!, {r2}
 80115c8:	5a52      	ldrh	r2, [r2, r1]
 80115ca:	1880      	adds	r0, r0, r2
 80115cc:	e7f8      	b.n	80115c0 <dcdatarm+0x2a>
		uint32_t average = accumulator/sweeps;
 80115ce:	0031      	movs	r1, r6
 80115d0:	f7fd fab0 	bl	800eb34 <__udivsi3>
 80115d4:	4642      	mov	r2, r8
		for(uint16_t j = 0; j<sweeps; j++){
 80115d6:	42aa      	cmp	r2, r5
 80115d8:	d005      	beq.n	80115e6 <dcdatarm+0x50>
			data[j][i] -= average;
 80115da:	ca08      	ldmia	r2!, {r3}
 80115dc:	444b      	add	r3, r9
 80115de:	8819      	ldrh	r1, [r3, #0]
 80115e0:	1a09      	subs	r1, r1, r0
 80115e2:	8019      	strh	r1, [r3, #0]
 80115e4:	e7f7      	b.n	80115d6 <dcdatarm+0x40>
 80115e6:	3401      	adds	r4, #1
 80115e8:	e7e3      	b.n	80115b2 <dcdatarm+0x1c>
}
 80115ea:	b003      	add	sp, #12
 80115ec:	bc0c      	pop	{r2, r3}
 80115ee:	4690      	mov	r8, r2
 80115f0:	4699      	mov	r9, r3
 80115f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115f4 <acc_service_sparse_get_next_by_reference.part.9>:
 80115f4:	b530      	push	{r4, r5, lr}
 80115f6:	b089      	sub	sp, #36	; 0x24
 80115f8:	680d      	ldr	r5, [r1, #0]
 80115fa:	9103      	str	r1, [sp, #12]
 80115fc:	2100      	movs	r1, #0
 80115fe:	2403      	movs	r4, #3
 8011600:	ab01      	add	r3, sp, #4
 8011602:	9104      	str	r1, [sp, #16]
 8011604:	7619      	strb	r1, [r3, #24]
 8011606:	7659      	strb	r1, [r3, #25]
 8011608:	7699      	strb	r1, [r3, #26]
 801160a:	0019      	movs	r1, r3
 801160c:	701c      	strb	r4, [r3, #0]
 801160e:	9502      	str	r5, [sp, #8]
 8011610:	9205      	str	r2, [sp, #20]
 8011612:	9406      	str	r4, [sp, #24]
 8011614:	f7f9 fa3c 	bl	800aa90 <acc_service_get_next.constprop.80>
 8011618:	b009      	add	sp, #36	; 0x24
 801161a:	bd30      	pop	{r4, r5, pc}

0801161c <doconv>:
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 801161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801161e:	4657      	mov	r7, sl
 8011620:	464e      	mov	r6, r9
 8011622:	4645      	mov	r5, r8
 8011624:	46de      	mov	lr, fp
 8011626:	b5e0      	push	{r5, r6, r7, lr}
 8011628:	b089      	sub	sp, #36	; 0x24
 801162a:	9003      	str	r0, [sp, #12]
 801162c:	ac07      	add	r4, sp, #28
 801162e:	8021      	strh	r1, [r4, #0]
 8011630:	4690      	mov	r8, r2
	_conv_data = data;
 8011632:	4c96      	ldr	r4, [pc, #600]	; (801188c <doconv+0x270>)
 8011634:	9a03      	ldr	r2, [sp, #12]
void doconv(uint16_t** data, uint8v2_t data_size, float st_dev){
 8011636:	040b      	lsls	r3, r1, #16
	_bins = data_size.x2;
 8011638:	0e1b      	lsrs	r3, r3, #24
	_conv_data = data;
 801163a:	6062      	str	r2, [r4, #4]
	_bins = data_size.x2;
 801163c:	2504      	movs	r5, #4
	_sweeps = data_size.x1;
 801163e:	b2ca      	uxtb	r2, r1
		kernel[i] =  expf(t);
 8011640:	0027      	movs	r7, r4
	_sweeps = data_size.x1;
 8011642:	4691      	mov	r9, r2
	_bins = data_size.x2;
 8011644:	469a      	mov	sl, r3
	float norm = 0;
 8011646:	2600      	movs	r6, #0
	_sweeps = data_size.x1;
 8011648:	7022      	strb	r2, [r4, #0]
	_bins = data_size.x2;
 801164a:	7063      	strb	r3, [r4, #1]
 801164c:	426d      	negs	r5, r5
		kernel[i] =  expf(t);
 801164e:	372c      	adds	r7, #44	; 0x2c
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8011650:	0028      	movs	r0, r5
 8011652:	f7fd fe71 	bl	800f338 <__aeabi_i2f>
 8011656:	4641      	mov	r1, r8
 8011658:	f7fc fe28 	bl	800e2ac <__aeabi_fdiv>
		t = -t*t/2;
 801165c:	2380      	movs	r3, #128	; 0x80
 801165e:	061b      	lsls	r3, r3, #24
		float t = (i - (CONVKER-1)/2)/(st_dev);
 8011660:	1c01      	adds	r1, r0, #0
		t = -t*t/2;
 8011662:	18c0      	adds	r0, r0, r3
 8011664:	f7fc ff34 	bl	800e4d0 <__aeabi_fmul>
 8011668:	21fc      	movs	r1, #252	; 0xfc
 801166a:	0589      	lsls	r1, r1, #22
 801166c:	f7fc ff30 	bl	800e4d0 <__aeabi_fmul>
		kernel[i] =  expf(t);
 8011670:	f001 fd68 	bl	8013144 <expf>
 8011674:	00ab      	lsls	r3, r5, #2
 8011676:	18fb      	adds	r3, r7, r3
 8011678:	1c01      	adds	r1, r0, #0
 801167a:	6118      	str	r0, [r3, #16]
		norm += kernel[i];
 801167c:	1c30      	adds	r0, r6, #0
 801167e:	f7fc fc7b 	bl	800df78 <__aeabi_fadd>
 8011682:	3501      	adds	r5, #1
 8011684:	1c06      	adds	r6, r0, #0
	for(uint16_t i = 0; i < CONVKER; i++){
 8011686:	2d05      	cmp	r5, #5
 8011688:	d1e2      	bne.n	8011650 <doconv+0x34>
	float sclfact = 1/norm;
 801168a:	1c01      	adds	r1, r0, #0
 801168c:	20fe      	movs	r0, #254	; 0xfe
 801168e:	0580      	lsls	r0, r0, #22
 8011690:	f7fc fe0c 	bl	800e2ac <__aeabi_fdiv>
 8011694:	2500      	movs	r5, #0
 8011696:	1c06      	adds	r6, r0, #0
		kernel[i] *= sclfact;
 8011698:	342c      	adds	r4, #44	; 0x2c
 801169a:	00af      	lsls	r7, r5, #2
 801169c:	5938      	ldr	r0, [r7, r4]
 801169e:	1c31      	adds	r1, r6, #0
 80116a0:	f7fc ff16 	bl	800e4d0 <__aeabi_fmul>
 80116a4:	3501      	adds	r5, #1
 80116a6:	5138      	str	r0, [r7, r4]
	for(uint16_t i = 0; i < CONVKER; i++){
 80116a8:	2d09      	cmp	r5, #9
 80116aa:	d1f6      	bne.n	801169a <doconv+0x7e>
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 80116ac:	464b      	mov	r3, r9
 80116ae:	085b      	lsrs	r3, r3, #1
 80116b0:	3306      	adds	r3, #6
 80116b2:	9306      	str	r3, [sp, #24]
 80116b4:	4b75      	ldr	r3, [pc, #468]	; (801188c <doconv+0x270>)
	for(uint16_t i = 0; i < _bins; i++){
 80116b6:	2700      	movs	r7, #0
 80116b8:	469b      	mov	fp, r3
 80116ba:	45ba      	cmp	sl, r7
 80116bc:	d964      	bls.n	8011788 <doconv+0x16c>
	for(int i = 0; i < CONVKER; i++){
 80116be:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 80116c0:	2000      	movs	r0, #0
 80116c2:	4973      	ldr	r1, [pc, #460]	; (8011890 <doconv+0x274>)
 80116c4:	009a      	lsls	r2, r3, #2
	for(int i = 0; i < CONVKER; i++){
 80116c6:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 80116c8:	5050      	str	r0, [r2, r1]
	for(int i = 0; i < CONVKER; i++){
 80116ca:	2b09      	cmp	r3, #9
 80116cc:	d1f8      	bne.n	80116c0 <doconv+0xa4>
		return _conv_data[sweep][bin];
 80116ce:	007b      	lsls	r3, r7, #1
 80116d0:	9304      	str	r3, [sp, #16]
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 80116d2:	2300      	movs	r3, #0
 80116d4:	9301      	str	r3, [sp, #4]
	float popped = convstack[0];
 80116d6:	4b6d      	ldr	r3, [pc, #436]	; (801188c <doconv+0x270>)
 80116d8:	464d      	mov	r5, r9
 80116da:	4698      	mov	r8, r3
		return _conv_data[sweep][bin];
 80116dc:	4e6d      	ldr	r6, [pc, #436]	; (8011894 <doconv+0x278>)
 80116de:	0033      	movs	r3, r6
 80116e0:	3308      	adds	r3, #8
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	9302      	str	r3, [sp, #8]
			float sum = 0.0f;
 80116e6:	2300      	movs	r3, #0
			for(int j = 0; j < CONVKER; j++){
 80116e8:	2400      	movs	r4, #0
			float sum = 0.0f;
 80116ea:	4699      	mov	r9, r3
				sum += kernel[j]*getdata(i-j+cent, indx);
 80116ec:	4a6a      	ldr	r2, [pc, #424]	; (8011898 <doconv+0x27c>)
 80116ee:	00a3      	lsls	r3, r4, #2
 80116f0:	589b      	ldr	r3, [r3, r2]
		return 0;
 80116f2:	2000      	movs	r0, #0
				sum += kernel[j]*getdata(i-j+cent, indx);
 80116f4:	9305      	str	r3, [sp, #20]
 80116f6:	466b      	mov	r3, sp
 80116f8:	2208      	movs	r2, #8
 80116fa:	5e9b      	ldrsh	r3, [r3, r2]
	if(
 80116fc:	4283      	cmp	r3, r0
 80116fe:	db08      	blt.n	8011712 <doconv+0xf6>
		(sweep >= 0) && (sweep < _sweeps) &&
 8011700:	42ab      	cmp	r3, r5
 8011702:	da06      	bge.n	8011712 <doconv+0xf6>
		(bin >= 0) && (bin < _bins)
 8011704:	4557      	cmp	r7, sl
 8011706:	da04      	bge.n	8011712 <doconv+0xf6>
		return _conv_data[sweep][bin];
 8011708:	9a03      	ldr	r2, [sp, #12]
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	589b      	ldr	r3, [r3, r2]
 801170e:	9a04      	ldr	r2, [sp, #16]
 8011710:	5a98      	ldrh	r0, [r3, r2]
				sum += kernel[j]*getdata(i-j+cent, indx);
 8011712:	f7fd fe11 	bl	800f338 <__aeabi_i2f>
 8011716:	9905      	ldr	r1, [sp, #20]
 8011718:	f7fc feda 	bl	800e4d0 <__aeabi_fmul>
 801171c:	1c01      	adds	r1, r0, #0
 801171e:	4648      	mov	r0, r9
 8011720:	f7fc fc2a 	bl	800df78 <__aeabi_fadd>
 8011724:	9b02      	ldr	r3, [sp, #8]
			for(int j = 0; j < CONVKER; j++){
 8011726:	3401      	adds	r4, #1
 8011728:	3b01      	subs	r3, #1
 801172a:	b29b      	uxth	r3, r3
				sum += kernel[j]*getdata(i-j+cent, indx);
 801172c:	4681      	mov	r9, r0
 801172e:	9302      	str	r3, [sp, #8]
			for(int j = 0; j < CONVKER; j++){
 8011730:	2c09      	cmp	r4, #9
 8011732:	d1db      	bne.n	80116ec <doconv+0xd0>
	float popped = convstack[0];
 8011734:	4643      	mov	r3, r8
 8011736:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011738:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 801173a:	4a55      	ldr	r2, [pc, #340]	; (8011890 <doconv+0x274>)
 801173c:	18d2      	adds	r2, r2, r3
 801173e:	6852      	ldr	r2, [r2, #4]
 8011740:	9202      	str	r2, [sp, #8]
 8011742:	9902      	ldr	r1, [sp, #8]
 8011744:	4a52      	ldr	r2, [pc, #328]	; (8011890 <doconv+0x274>)
 8011746:	5099      	str	r1, [r3, r2]
 8011748:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 801174a:	2b20      	cmp	r3, #32
 801174c:	d1f5      	bne.n	801173a <doconv+0x11e>
	convstack[(CONVKER-1)/2 -1] = val;
 801174e:	464a      	mov	r2, r9
 8011750:	4b4e      	ldr	r3, [pc, #312]	; (801188c <doconv+0x270>)
 8011752:	65da      	str	r2, [r3, #92]	; 0x5c
			setdata(i-cent, indx, pop);
 8011754:	b233      	sxth	r3, r6
	if(
 8011756:	2b00      	cmp	r3, #0
 8011758:	db0a      	blt.n	8011770 <doconv+0x154>
		(sweep >= 0) && (sweep < _sweeps) &&
 801175a:	42ab      	cmp	r3, r5
 801175c:	da08      	bge.n	8011770 <doconv+0x154>
		(bin >= 0) && (bin < _bins)
 801175e:	4557      	cmp	r7, sl
 8011760:	da06      	bge.n	8011770 <doconv+0x154>
		_conv_data[sweep][bin] = val;
 8011762:	9a03      	ldr	r2, [sp, #12]
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	589c      	ldr	r4, [r3, r2]
			setdata(i-cent, indx, pop);
 8011768:	f7fd fbf2 	bl	800ef50 <__aeabi_f2uiz>
 801176c:	9b04      	ldr	r3, [sp, #16]
 801176e:	52e0      	strh	r0, [r4, r3]
		for(int i = 0; i< _sweeps/2 + CONVKER-2; i++){
 8011770:	9b01      	ldr	r3, [sp, #4]
 8011772:	9a06      	ldr	r2, [sp, #24]
 8011774:	3301      	adds	r3, #1
 8011776:	3601      	adds	r6, #1
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	b2b6      	uxth	r6, r6
 801177c:	4293      	cmp	r3, r2
 801177e:	ddae      	ble.n	80116de <doconv+0xc2>
	for(uint16_t i = 0; i < _bins; i++){
 8011780:	3701      	adds	r7, #1
 8011782:	46a9      	mov	r9, r5
 8011784:	b2bf      	uxth	r7, r7
 8011786:	e798      	b.n	80116ba <doconv+0x9e>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8011788:	2700      	movs	r7, #0
 801178a:	465b      	mov	r3, fp
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	4699      	mov	r9, r3
 8011790:	085b      	lsrs	r3, r3, #1
 8011792:	42bb      	cmp	r3, r7
 8011794:	d972      	bls.n	801187c <doconv+0x260>
	convstack[i] = 0.0f;
 8011796:	465a      	mov	r2, fp
	for(int i = 0; i < CONVKER; i++){
 8011798:	2300      	movs	r3, #0
	convstack[i] = 0.0f;
 801179a:	3250      	adds	r2, #80	; 0x50
 801179c:	2000      	movs	r0, #0
 801179e:	0099      	lsls	r1, r3, #2
	for(int i = 0; i < CONVKER; i++){
 80117a0:	3301      	adds	r3, #1
	convstack[i] = 0.0f;
 80117a2:	5088      	str	r0, [r1, r2]
	for(int i = 0; i < CONVKER; i++){
 80117a4:	2b09      	cmp	r3, #9
 80117a6:	d1f9      	bne.n	801179c <doconv+0x180>
		if(indx >= _sweeps){
 80117a8:	454f      	cmp	r7, r9
 80117aa:	d20d      	bcs.n	80117c8 <doconv+0x1ac>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80117ac:	465b      	mov	r3, fp
 80117ae:	785b      	ldrb	r3, [r3, #1]
		return _conv_data[sweep][bin];
 80117b0:	00be      	lsls	r6, r7, #2
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80117b2:	9301      	str	r3, [sp, #4]
 80117b4:	3306      	adds	r3, #6
 80117b6:	9303      	str	r3, [sp, #12]
		return _conv_data[sweep][bin];
 80117b8:	465b      	mov	r3, fp
 80117ba:	685b      	ldr	r3, [r3, #4]
		for(int i = 0; i< _bins + CONVKER-2; i++){
 80117bc:	2400      	movs	r4, #0
		return _conv_data[sweep][bin];
 80117be:	469c      	mov	ip, r3
	float popped = convstack[0];
 80117c0:	4b32      	ldr	r3, [pc, #200]	; (801188c <doconv+0x270>)
		return _conv_data[sweep][bin];
 80117c2:	4466      	add	r6, ip
	float popped = convstack[0];
 80117c4:	469a      	mov	sl, r3
 80117c6:	e035      	b.n	8011834 <doconv+0x218>
			ERR_PRINTLN("sweep count too great to convolve");
 80117c8:	4834      	ldr	r0, [pc, #208]	; (801189c <doconv+0x280>)
 80117ca:	f003 fa9b 	bl	8014d04 <__wrap_printf>
 80117ce:	4834      	ldr	r0, [pc, #208]	; (80118a0 <doconv+0x284>)
 80117d0:	f003 fa98 	bl	8014d04 <__wrap_printf>
 80117d4:	229d      	movs	r2, #157	; 0x9d
 80117d6:	4933      	ldr	r1, [pc, #204]	; (80118a4 <doconv+0x288>)
 80117d8:	4833      	ldr	r0, [pc, #204]	; (80118a8 <doconv+0x28c>)
 80117da:	f003 fa93 	bl	8014d04 <__wrap_printf>
 80117de:	e04a      	b.n	8011876 <doconv+0x25a>
				sum += kernel[j]*getdata(indx, i-j+cent);
 80117e0:	4a2d      	ldr	r2, [pc, #180]	; (8011898 <doconv+0x27c>)
 80117e2:	00ab      	lsls	r3, r5, #2
 80117e4:	589b      	ldr	r3, [r3, r2]
		return 0;
 80117e6:	2000      	movs	r0, #0
				sum += kernel[j]*getdata(indx, i-j+cent);
 80117e8:	9302      	str	r3, [sp, #8]
		(sweep >= 0) && (sweep < _sweeps) &&
 80117ea:	454f      	cmp	r7, r9
 80117ec:	db28      	blt.n	8011840 <doconv+0x224>
				sum += kernel[j]*getdata(indx, i-j+cent);
 80117ee:	f7fd fda3 	bl	800f338 <__aeabi_i2f>
 80117f2:	9902      	ldr	r1, [sp, #8]
 80117f4:	f7fc fe6c 	bl	800e4d0 <__aeabi_fmul>
 80117f8:	1c01      	adds	r1, r0, #0
 80117fa:	4640      	mov	r0, r8
 80117fc:	f7fc fbbc 	bl	800df78 <__aeabi_fadd>
			for(int j = 0; j < CONVKER; j++){
 8011800:	3501      	adds	r5, #1
				sum += kernel[j]*getdata(indx, i-j+cent);
 8011802:	4680      	mov	r8, r0
			for(int j = 0; j < CONVKER; j++){
 8011804:	2d09      	cmp	r5, #9
 8011806:	d1eb      	bne.n	80117e0 <doconv+0x1c4>
	float popped = convstack[0];
 8011808:	4653      	mov	r3, sl
 801180a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801180c:	2300      	movs	r3, #0
	convstack[i] = convstack[i+1];
 801180e:	4a20      	ldr	r2, [pc, #128]	; (8011890 <doconv+0x274>)
 8011810:	18d2      	adds	r2, r2, r3
 8011812:	6852      	ldr	r2, [r2, #4]
 8011814:	9202      	str	r2, [sp, #8]
 8011816:	9902      	ldr	r1, [sp, #8]
 8011818:	4a1d      	ldr	r2, [pc, #116]	; (8011890 <doconv+0x274>)
 801181a:	5099      	str	r1, [r3, r2]
 801181c:	3304      	adds	r3, #4
	for(int i = 0; i < CONVKER-1; i++){
 801181e:	2b20      	cmp	r3, #32
 8011820:	d1f5      	bne.n	801180e <doconv+0x1f2>
	convstack[(CONVKER-1)/2 -1] = val;
 8011822:	4642      	mov	r2, r8
 8011824:	4b19      	ldr	r3, [pc, #100]	; (801188c <doconv+0x270>)
 8011826:	65da      	str	r2, [r3, #92]	; 0x5c
		(sweep >= 0) && (sweep < _sweeps) &&
 8011828:	454f      	cmp	r7, r9
 801182a:	db15      	blt.n	8011858 <doconv+0x23c>
		for(int i = 0; i< _bins + CONVKER-2; i++){
 801182c:	9b03      	ldr	r3, [sp, #12]
 801182e:	3401      	adds	r4, #1
 8011830:	429c      	cmp	r4, r3
 8011832:	dc20      	bgt.n	8011876 <doconv+0x25a>
			float sum = 0.0f;
 8011834:	2300      	movs	r3, #0
 8011836:	4698      	mov	r8, r3
 8011838:	1d23      	adds	r3, r4, #4
			for(int j = 0; j < CONVKER; j++){
 801183a:	2500      	movs	r5, #0
 801183c:	9304      	str	r3, [sp, #16]
 801183e:	e7cf      	b.n	80117e0 <doconv+0x1c4>
 8011840:	9b04      	ldr	r3, [sp, #16]
 8011842:	1b5b      	subs	r3, r3, r5
 8011844:	b21b      	sxth	r3, r3
		(sweep >= 0) && (sweep < _sweeps) &&
 8011846:	4283      	cmp	r3, r0
 8011848:	dbd1      	blt.n	80117ee <doconv+0x1d2>
		(bin >= 0) && (bin < _bins)
 801184a:	9a01      	ldr	r2, [sp, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	ddce      	ble.n	80117ee <doconv+0x1d2>
		return _conv_data[sweep][bin];
 8011850:	6832      	ldr	r2, [r6, #0]
 8011852:	005b      	lsls	r3, r3, #1
 8011854:	5a98      	ldrh	r0, [r3, r2]
 8011856:	e7ca      	b.n	80117ee <doconv+0x1d2>
 8011858:	1f23      	subs	r3, r4, #4
 801185a:	b21b      	sxth	r3, r3
		(sweep >= 0) && (sweep < _sweeps) &&
 801185c:	2b00      	cmp	r3, #0
 801185e:	dbe5      	blt.n	801182c <doconv+0x210>
		(bin >= 0) && (bin < _bins)
 8011860:	9a01      	ldr	r2, [sp, #4]
 8011862:	429a      	cmp	r2, r3
 8011864:	dde2      	ble.n	801182c <doconv+0x210>
		_conv_data[sweep][bin] = val;
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	4698      	mov	r8, r3
			setdata(indx, i-cent, pop);
 801186a:	f7fd fb71 	bl	800ef50 <__aeabi_f2uiz>
 801186e:	4643      	mov	r3, r8
		_conv_data[sweep][bin] = val;
 8011870:	6835      	ldr	r5, [r6, #0]
			setdata(indx, i-cent, pop);
 8011872:	5358      	strh	r0, [r3, r5]
 8011874:	e7da      	b.n	801182c <doconv+0x210>
	for(uint16_t j = 0; j < _sweeps/2; j++){
 8011876:	3701      	adds	r7, #1
 8011878:	b2bf      	uxth	r7, r7
 801187a:	e786      	b.n	801178a <doconv+0x16e>
}
 801187c:	b009      	add	sp, #36	; 0x24
 801187e:	bc3c      	pop	{r2, r3, r4, r5}
 8011880:	4690      	mov	r8, r2
 8011882:	4699      	mov	r9, r3
 8011884:	46a2      	mov	sl, r4
 8011886:	46ab      	mov	fp, r5
 8011888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801188a:	46c0      	nop			; (mov r8, r8)
 801188c:	2000008c 	.word	0x2000008c
 8011890:	200000dc 	.word	0x200000dc
 8011894:	0000fffc 	.word	0x0000fffc
 8011898:	200000b8 	.word	0x200000b8
 801189c:	0801bdb0 	.word	0x0801bdb0
 80118a0:	0801be10 	.word	0x0801be10
 80118a4:	0801be34 	.word	0x0801be34
 80118a8:	0801bccc 	.word	0x0801bccc

080118ac <dofft>:
float dofft(uint16_t** data, uint8v2_t data_size){
 80118ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ae:	4657      	mov	r7, sl
 80118b0:	46de      	mov	lr, fp
 80118b2:	464e      	mov	r6, r9
 80118b4:	4645      	mov	r5, r8
 80118b6:	b5e0      	push	{r5, r6, r7, lr}
 80118b8:	b0a3      	sub	sp, #140	; 0x8c
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	65f8      	str	r0, [r7, #92]	; 0x5c
 80118be:	2084      	movs	r0, #132	; 0x84
 80118c0:	1838      	adds	r0, r7, r0
 80118c2:	8001      	strh	r1, [r0, #0]
	uint8_t sweeps = data_size.x1;
 80118c4:	b2ca      	uxtb	r2, r1
float dofft(uint16_t** data, uint8v2_t data_size){
 80118c6:	040b      	lsls	r3, r1, #16
	uint8_t sweeps = data_size.x1;
 80118c8:	2180      	movs	r1, #128	; 0x80
 80118ca:	1879      	adds	r1, r7, r1
 80118cc:	600a      	str	r2, [r1, #0]
	float scales[bins];
 80118ce:	466a      	mov	r2, sp
	uint8_t bins = data_size.x2;
 80118d0:	0e1b      	lsrs	r3, r3, #24
 80118d2:	633b      	str	r3, [r7, #48]	; 0x30
	float scales[bins];
 80118d4:	009b      	lsls	r3, r3, #2
 80118d6:	330a      	adds	r3, #10
 80118d8:	08db      	lsrs	r3, r3, #3
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	1ad3      	subs	r3, r2, r3
 80118de:	469d      	mov	sp, r3
	int16_t real[sweeps];
 80118e0:	466a      	mov	r2, sp
	float scales[bins];
 80118e2:	657b      	str	r3, [r7, #84]	; 0x54
	int16_t real[sweeps];
 80118e4:	680b      	ldr	r3, [r1, #0]
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80118ea:	3308      	adds	r3, #8
 80118ec:	08db      	lsrs	r3, r3, #3
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	1ad2      	subs	r2, r2, r3
 80118f2:	4695      	mov	sp, r2
	int16_t imag[sweeps];
 80118f4:	1ad3      	subs	r3, r2, r3
	int16_t real[sweeps];
 80118f6:	46eb      	mov	fp, sp
	int16_t imag[sweeps];
 80118f8:	469d      	mov	sp, r3
 80118fa:	653b      	str	r3, [r7, #80]	; 0x50
		for (uint16_t j = 0; j < sweeps; j++) {
 80118fc:	880b      	ldrh	r3, [r1, #0]
 80118fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011900:	65bb      	str	r3, [r7, #88]	; 0x58

void fftWindowing(int16_t *vData, uint16_t samples, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = ((double)samples - 1.0);
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011902:	085b      	lsrs	r3, r3, #1
 8011904:	60fb      	str	r3, [r7, #12]
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8011906:	680b      	ldr	r3, [r1, #0]
 8011908:	4694      	mov	ip, r2
 801190a:	085e      	lsrs	r6, r3, #1
 801190c:	b2b3      	uxth	r3, r6
 801190e:	637b      	str	r3, [r7, #52]	; 0x34
 8011910:	466b      	mov	r3, sp
 8011912:	4463      	add	r3, ip
 8011914:	607b      	str	r3, [r7, #4]
 8011916:	0013      	movs	r3, r2
 8011918:	445b      	add	r3, fp
 801191a:	61fb      	str	r3, [r7, #28]
 801191c:	00b3      	lsls	r3, r6, #2
 801191e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011924:	4694      	mov	ip, r2
 8011926:	4463      	add	r3, ip
 8011928:	61bb      	str	r3, [r7, #24]
 801192a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801192c:	46da      	mov	sl, fp
 801192e:	425b      	negs	r3, r3
 8011930:	60bb      	str	r3, [r7, #8]
 8011932:	2300      	movs	r3, #0
 8011934:	67bb      	str	r3, [r7, #120]	; 0x78
	for(uint16_t i = 0; i<bins; i++){
 8011936:	2278      	movs	r2, #120	; 0x78
 8011938:	18ba      	adds	r2, r7, r2
 801193a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801193c:	8812      	ldrh	r2, [r2, #0]
 801193e:	4293      	cmp	r3, r2
 8011940:	d800      	bhi.n	8011944 <dofft+0x98>
 8011942:	e1f3      	b.n	8011d2c <dofft+0x480>
 8011944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011946:	4650      	mov	r0, sl
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	643b      	str	r3, [r7, #64]	; 0x40
 801194c:	2300      	movs	r3, #0
		for (uint16_t j = 0; j < sweeps; j++) {
 801194e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011950:	b29a      	uxth	r2, r3
 8011952:	4291      	cmp	r1, r2
 8011954:	d908      	bls.n	8011968 <dofft+0xbc>
		  real[j] = data[j][i];
 8011956:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8011958:	0099      	lsls	r1, r3, #2
 801195a:	5861      	ldr	r1, [r4, r1]
 801195c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 801195e:	005a      	lsls	r2, r3, #1
 8011960:	5b09      	ldrh	r1, [r1, r4]
 8011962:	3301      	adds	r3, #1
 8011964:	5281      	strh	r1, [r0, r2]
 8011966:	e7f2      	b.n	801194e <dofft+0xa2>
 8011968:	4682      	mov	sl, r0
 801196a:	2200      	movs	r2, #0
		for (uint16_t j = 0; j < sweeps; j++) {
 801196c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		for (uint16_t j = 0; j < sweeps; j++) {
 801196e:	6879      	ldr	r1, [r7, #4]
 8011970:	428b      	cmp	r3, r1
 8011972:	d002      	beq.n	801197a <dofft+0xce>
		  imag[j] = 0;
 8011974:	801a      	strh	r2, [r3, #0]
 8011976:	3302      	adds	r3, #2
 8011978:	e7f9      	b.n	801196e <dofft+0xc2>
	for(int i =0; i<(samples);i++){
 801197a:	2300      	movs	r3, #0
 801197c:	4651      	mov	r1, sl
	int max = 0;
 801197e:	0018      	movs	r0, r3
	for(int i =0; i<(samples);i++){
 8011980:	2280      	movs	r2, #128	; 0x80
 8011982:	18ba      	adds	r2, r7, r2
 8011984:	6812      	ldr	r2, [r2, #0]
 8011986:	4293      	cmp	r3, r2
 8011988:	da09      	bge.n	801199e <dofft+0xf2>
		if (max < vReal[i]){
 801198a:	005a      	lsls	r2, r3, #1
 801198c:	5e8a      	ldrsh	r2, [r1, r2]
 801198e:	17d4      	asrs	r4, r2, #31
 8011990:	1912      	adds	r2, r2, r4
 8011992:	4062      	eors	r2, r4
 8011994:	4290      	cmp	r0, r2
 8011996:	da00      	bge.n	801199a <dofft+0xee>
 8011998:	0010      	movs	r0, r2
	for(int i =0; i<(samples);i++){
 801199a:	3301      	adds	r3, #1
 801199c:	e7f0      	b.n	8011980 <dofft+0xd4>
 801199e:	468a      	mov	sl, r1
	float scaler = 256.0f/max;
 80119a0:	f7fd fcca 	bl	800f338 <__aeabi_i2f>
 80119a4:	1c01      	adds	r1, r0, #0
 80119a6:	2087      	movs	r0, #135	; 0x87
 80119a8:	05c0      	lsls	r0, r0, #23
 80119aa:	f7fc fc7f 	bl	800e2ac <__aeabi_fdiv>
 80119ae:	4654      	mov	r4, sl
 80119b0:	1c05      	adds	r5, r0, #0
	for(int i =0; i<(samples);i++){
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	d00b      	beq.n	80119d0 <dofft+0x124>
		vReal[i] = (int16_t) (vReal[i] * scaler);
 80119b8:	2300      	movs	r3, #0
 80119ba:	5ee0      	ldrsh	r0, [r4, r3]
 80119bc:	f7fd fcbc 	bl	800f338 <__aeabi_i2f>
 80119c0:	1c29      	adds	r1, r5, #0
 80119c2:	f7fc fd85 	bl	800e4d0 <__aeabi_fmul>
 80119c6:	f7fd fc97 	bl	800f2f8 <__aeabi_f2iz>
 80119ca:	8020      	strh	r0, [r4, #0]
 80119cc:	3402      	adds	r4, #2
 80119ce:	e7f0      	b.n	80119b2 <dofft+0x106>
		scales[i] = fftRangeScaling(real, sweeps);
 80119d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	50d5      	str	r5, [r2, r3]
	double samplesMinusOne = ((double)samples - 1.0);
 80119d8:	2380      	movs	r3, #128	; 0x80
 80119da:	18fb      	adds	r3, r7, r3
 80119dc:	6818      	ldr	r0, [r3, #0]
 80119de:	f7ff faa1 	bl	8010f24 <__aeabi_ui2d>
 80119e2:	4bdc      	ldr	r3, [pc, #880]	; (8011d54 <dofft+0x4a8>)
 80119e4:	2200      	movs	r2, #0
 80119e6:	f7fe fec9 	bl	801077c <__aeabi_dsub>
 80119ea:	69fb      	ldr	r3, [r7, #28]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 80119ec:	2600      	movs	r6, #0
 80119ee:	001d      	movs	r5, r3
 80119f0:	4654      	mov	r4, sl
	double samplesMinusOne = ((double)samples - 1.0);
 80119f2:	66b8      	str	r0, [r7, #104]	; 0x68
 80119f4:	66f9      	str	r1, [r7, #108]	; 0x6c
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	3d02      	subs	r5, #2
 80119fa:	429e      	cmp	r6, r3
 80119fc:	d038      	beq.n	8011a70 <dofft+0x1c4>
		double indexMinusOne = (double)i;
 80119fe:	0030      	movs	r0, r6
 8011a00:	f7ff fa90 	bl	8010f24 <__aeabi_ui2d>
		double ratio = (indexMinusOne / samplesMinusOne);
 8011a04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a08:	f7fe f83c 	bl	800fa84 <__aeabi_ddiv>
		double weighingFactor = 1.0;
		// Compute and record weighting factor
		// hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 8011a0c:	4ad2      	ldr	r2, [pc, #840]	; (8011d58 <dofft+0x4ac>)
 8011a0e:	4bd3      	ldr	r3, [pc, #844]	; (8011d5c <dofft+0x4b0>)
 8011a10:	f7fe fc42 	bl	8010298 <__aeabi_dmul>
 8011a14:	f001 fa98 	bl	8012f48 <cos>
 8011a18:	4ad1      	ldr	r2, [pc, #836]	; (8011d60 <dofft+0x4b4>)
 8011a1a:	4bd2      	ldr	r3, [pc, #840]	; (8011d64 <dofft+0x4b8>)
 8011a1c:	f7fe fc3c 	bl	8010298 <__aeabi_dmul>
 8011a20:	000b      	movs	r3, r1
 8011a22:	0002      	movs	r2, r0
 8011a24:	49d0      	ldr	r1, [pc, #832]	; (8011d68 <dofft+0x4bc>)
 8011a26:	48d1      	ldr	r0, [pc, #836]	; (8011d6c <dofft+0x4c0>)
 8011a28:	f7fe fea8 	bl	801077c <__aeabi_dsub>
 8011a2c:	6738      	str	r0, [r7, #112]	; 0x70
 8011a2e:	6779      	str	r1, [r7, #116]	; 0x74
		if (dir == FFT_FORWARD) {
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8011a30:	2300      	movs	r3, #0
 8011a32:	5ee0      	ldrsh	r0, [r4, r3]
 8011a34:	f7ff fa3c 	bl	8010eb0 <__aeabi_i2d>
 8011a38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a3c:	f7fe fc2c 	bl	8010298 <__aeabi_dmul>
 8011a40:	f7ff fa00 	bl	8010e44 <__aeabi_d2iz>
 8011a44:	68bb      	ldr	r3, [r7, #8]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8011a46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011a48:	4698      	mov	r8, r3
 8011a4a:	44a8      	add	r8, r5
 8011a4c:	4643      	mov	r3, r8
			vData[i] = (int16_t) vData[i]* weighingFactor;
 8011a4e:	8020      	strh	r0, [r4, #0]
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8011a50:	5e98      	ldrsh	r0, [r3, r2]
 8011a52:	f7ff fa2d 	bl	8010eb0 <__aeabi_i2d>
 8011a56:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a5a:	f7fe fc1d 	bl	8010298 <__aeabi_dmul>
 8011a5e:	f7ff f9f1 	bl	8010e44 <__aeabi_d2iz>
 8011a62:	4643      	mov	r3, r8
 8011a64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011a66:	3601      	adds	r6, #1
			vData[samples - (i + 1)] = (int16_t) vData[samples - (i + 1)]*weighingFactor;
 8011a68:	5298      	strh	r0, [r3, r2]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 8011a6a:	b2b6      	uxth	r6, r6
 8011a6c:	3402      	adds	r4, #2
 8011a6e:	e7c2      	b.n	80119f6 <dofft+0x14a>


uint8_t fftExponent(int16_t value)
{
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8011a70:	2300      	movs	r3, #0
 8011a72:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (((value >> result) & 1) != 1) result++;
 8011a74:	3301      	adds	r3, #1
 8011a76:	2280      	movs	r2, #128	; 0x80
 8011a78:	18ba      	adds	r2, r7, r2
 8011a7a:	6812      	ldr	r2, [r2, #0]
 8011a7c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011a7e:	410a      	asrs	r2, r1
 8011a80:	421a      	tst	r2, r3
 8011a82:	d104      	bne.n	8011a8e <dofft+0x1e2>
 8011a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a86:	3201      	adds	r2, #1
 8011a88:	b2d2      	uxtb	r2, r2
 8011a8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011a8c:	e7f3      	b.n	8011a76 <dofft+0x1ca>
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8011a8e:	2180      	movs	r1, #128	; 0x80
 8011a90:	2200      	movs	r2, #0
 8011a92:	1879      	adds	r1, r7, r1
 8011a94:	6809      	ldr	r1, [r1, #0]
	uint16_t j = 0;
 8011a96:	0013      	movs	r3, r2
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8011a98:	1e4c      	subs	r4, r1, #1
 8011a9a:	4655      	mov	r5, sl
 8011a9c:	46a1      	mov	r9, r4
 8011a9e:	454a      	cmp	r2, r9
 8011aa0:	da1f      	bge.n	8011ae2 <dofft+0x236>
		if (i < j) {
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d90e      	bls.n	8011ac4 <dofft+0x218>
			fftSwap(&vReal[i], &vReal[j]);
 8011aa6:	0059      	lsls	r1, r3, #1
 8011aa8:	468a      	mov	sl, r1
 8011aaa:	0050      	lsls	r0, r2, #1
 8011aac:	1828      	adds	r0, r5, r0

// Private functions

void fftSwap(int16_t *x, int16_t *y)
{
	int16_t temp = *x;
 8011aae:	2400      	movs	r4, #0
 8011ab0:	5f01      	ldrsh	r1, [r0, r4]
			fftSwap(&vReal[i], &vReal[j]);
 8011ab2:	44aa      	add	sl, r5
	int16_t temp = *x;
 8011ab4:	468c      	mov	ip, r1
	*x = *y;
 8011ab6:	4651      	mov	r1, sl
 8011ab8:	2400      	movs	r4, #0
 8011aba:	5f09      	ldrsh	r1, [r1, r4]
 8011abc:	8001      	strh	r1, [r0, #0]
	*y = temp;
 8011abe:	4661      	mov	r1, ip
 8011ac0:	4650      	mov	r0, sl
 8011ac2:	8001      	strh	r1, [r0, #0]
	uint8_t result = 0;
 8011ac4:	0031      	movs	r1, r6
 8011ac6:	464c      	mov	r4, r9
		while (k <= j) {
 8011ac8:	428b      	cmp	r3, r1
 8011aca:	d304      	bcc.n	8011ad6 <dofft+0x22a>
			j -= k;
 8011acc:	1a5b      	subs	r3, r3, r1
			k >>= 1;
 8011ace:	0849      	lsrs	r1, r1, #1
			j -= k;
 8011ad0:	b29b      	uxth	r3, r3
			k >>= 1;
 8011ad2:	b289      	uxth	r1, r1
 8011ad4:	e7f8      	b.n	8011ac8 <dofft+0x21c>
		j += k;
 8011ad6:	185b      	adds	r3, r3, r1
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8011ad8:	3201      	adds	r2, #1
 8011ada:	46a1      	mov	r9, r4
		j += k;
 8011adc:	b29b      	uxth	r3, r3
	for (uint16_t i = 0; i < (samples - 1); i++) {
 8011ade:	b292      	uxth	r2, r2
 8011ae0:	e7dd      	b.n	8011a9e <dofft+0x1f2>
	for (uint8_t l = 0; (l < power); l++) {
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	4698      	mov	r8, r3
	uint16_t l2 = 1;
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	64bb      	str	r3, [r7, #72]	; 0x48
	double c2 = 0.0;
 8011aea:	4643      	mov	r3, r8
 8011aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011aee:	63bb      	str	r3, [r7, #56]	; 0x38
	double c1 = -1.0;
 8011af0:	2300      	movs	r3, #0
 8011af2:	46aa      	mov	sl, r5
 8011af4:	46c1      	mov	r9, r8
 8011af6:	4c9e      	ldr	r4, [pc, #632]	; (8011d70 <dofft+0x4c4>)
 8011af8:	663b      	str	r3, [r7, #96]	; 0x60
 8011afa:	667c      	str	r4, [r7, #100]	; 0x64
	for (uint8_t l = 0; (l < power); l++) {
 8011afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011afe:	454b      	cmp	r3, r9
 8011b00:	d100      	bne.n	8011b04 <dofft+0x258>
 8011b02:	e0f3      	b.n	8011cec <dofft+0x440>
		l2 <<= 1;
 8011b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		double u2 = 0.0;
 8011b06:	2400      	movs	r4, #0
		l2 <<= 1;
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		double u2 = 0.0;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b12:	66fc      	str	r4, [r7, #108]	; 0x6c
		double u1 = 1.0;
 8011b14:	2300      	movs	r3, #0
 8011b16:	4c8f      	ldr	r4, [pc, #572]	; (8011d54 <dofft+0x4a8>)
 8011b18:	46d3      	mov	fp, sl
 8011b1a:	673b      	str	r3, [r7, #112]	; 0x70
 8011b1c:	677c      	str	r4, [r7, #116]	; 0x74
		for (j = 0; j < l1; j++) {
 8011b1e:	2300      	movs	r3, #0
 8011b20:	46ca      	mov	sl, r9
 8011b22:	647b      	str	r3, [r7, #68]	; 0x44
 8011b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d100      	bne.n	8011b2e <dofft+0x282>
 8011b2c:	e0b4      	b.n	8011c98 <dofft+0x3ec>
 8011b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b30:	001e      	movs	r6, r3
			 for (uint16_t i = j; i < samples; i += l2) {
 8011b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b34:	42b3      	cmp	r3, r6
 8011b36:	d800      	bhi.n	8011b3a <dofft+0x28e>
 8011b38:	e07b      	b.n	8011c32 <dofft+0x386>
					uint16_t i1 = i + l1;
 8011b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b3c:	199c      	adds	r4, r3, r6
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8011b3e:	b2a4      	uxth	r4, r4
 8011b40:	0064      	lsls	r4, r4, #1
 8011b42:	46a0      	mov	r8, r4
 8011b44:	44d8      	add	r8, fp
 8011b46:	4643      	mov	r3, r8
 8011b48:	2000      	movs	r0, #0
 8011b4a:	5e18      	ldrsh	r0, [r3, r0]
 8011b4c:	f7ff f9b0 	bl	8010eb0 <__aeabi_i2d>
 8011b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b52:	6238      	str	r0, [r7, #32]
 8011b54:	6279      	str	r1, [r7, #36]	; 0x24
 8011b56:	4699      	mov	r9, r3
 8011b58:	44a1      	add	r9, r4
 8011b5a:	464b      	mov	r3, r9
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	5e18      	ldrsh	r0, [r3, r0]
 8011b60:	f7ff f9a6 	bl	8010eb0 <__aeabi_i2d>
 8011b64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011b68:	0004      	movs	r4, r0
 8011b6a:	000d      	movs	r5, r1
 8011b6c:	6a38      	ldr	r0, [r7, #32]
 8011b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b70:	f7fe fb92 	bl	8010298 <__aeabi_dmul>
 8011b74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b78:	6138      	str	r0, [r7, #16]
 8011b7a:	6179      	str	r1, [r7, #20]
 8011b7c:	0020      	movs	r0, r4
 8011b7e:	0029      	movs	r1, r5
 8011b80:	f7fe fb8a 	bl	8010298 <__aeabi_dmul>
 8011b84:	0002      	movs	r2, r0
 8011b86:	000b      	movs	r3, r1
 8011b88:	6938      	ldr	r0, [r7, #16]
 8011b8a:	6979      	ldr	r1, [r7, #20]
 8011b8c:	f7fe fdf6 	bl	801077c <__aeabi_dsub>
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8011b90:	0022      	movs	r2, r4
 8011b92:	002b      	movs	r3, r5
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8011b94:	6138      	str	r0, [r7, #16]
 8011b96:	6179      	str	r1, [r7, #20]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8011b98:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8011b9a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011b9c:	f7fe fb7c 	bl	8010298 <__aeabi_dmul>
 8011ba0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ba4:	0004      	movs	r4, r0
 8011ba6:	000d      	movs	r5, r1
 8011ba8:	6a38      	ldr	r0, [r7, #32]
 8011baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011bac:	f7fe fb74 	bl	8010298 <__aeabi_dmul>
 8011bb0:	0002      	movs	r2, r0
 8011bb2:	000b      	movs	r3, r1
 8011bb4:	0020      	movs	r0, r4
 8011bb6:	0029      	movs	r1, r5
 8011bb8:	f7fd fc48 	bl	800f44c <__aeabi_dadd>
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8011bbc:	465b      	mov	r3, fp
 8011bbe:	0074      	lsls	r4, r6, #1
 8011bc0:	191d      	adds	r5, r3, r4
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8011bc2:	6238      	str	r0, [r7, #32]
 8011bc4:	6279      	str	r1, [r7, #36]	; 0x24
					vReal[i1] = (int16_t) (vReal[i] - t1);
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	5ee8      	ldrsh	r0, [r5, r3]
 8011bca:	f7ff f971 	bl	8010eb0 <__aeabi_i2d>
 8011bce:	693a      	ldr	r2, [r7, #16]
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	f7fe fdd3 	bl	801077c <__aeabi_dsub>
 8011bd6:	f7ff f935 	bl	8010e44 <__aeabi_d2iz>
 8011bda:	4643      	mov	r3, r8
 8011bdc:	8018      	strh	r0, [r3, #0]
					vImag[i1] = (int16_t) (vImag[i] - t2);
 8011bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011be0:	469c      	mov	ip, r3
 8011be2:	4464      	add	r4, ip
 8011be4:	2300      	movs	r3, #0
 8011be6:	5ee0      	ldrsh	r0, [r4, r3]
 8011be8:	f7ff f962 	bl	8010eb0 <__aeabi_i2d>
 8011bec:	6a3a      	ldr	r2, [r7, #32]
 8011bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf0:	f7fe fdc4 	bl	801077c <__aeabi_dsub>
 8011bf4:	f7ff f926 	bl	8010e44 <__aeabi_d2iz>
 8011bf8:	464b      	mov	r3, r9
 8011bfa:	8018      	strh	r0, [r3, #0]
					vReal[i] = (int16_t) (vReal[i] + t1);
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	5ee8      	ldrsh	r0, [r5, r3]
 8011c00:	f7ff f956 	bl	8010eb0 <__aeabi_i2d>
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	f7fd fc20 	bl	800f44c <__aeabi_dadd>
 8011c0c:	f7ff f91a 	bl	8010e44 <__aeabi_d2iz>
 8011c10:	8028      	strh	r0, [r5, #0]
					vImag[i] = (int16_t) (vImag[i] +t2);
 8011c12:	2300      	movs	r3, #0
 8011c14:	5ee0      	ldrsh	r0, [r4, r3]
 8011c16:	f7ff f94b 	bl	8010eb0 <__aeabi_i2d>
 8011c1a:	6a3a      	ldr	r2, [r7, #32]
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1e:	f7fd fc15 	bl	800f44c <__aeabi_dadd>
 8011c22:	f7ff f90f 	bl	8010e44 <__aeabi_d2iz>
			 for (uint16_t i = j; i < samples; i += l2) {
 8011c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
					vImag[i] = (int16_t) (vImag[i] +t2);
 8011c28:	8020      	strh	r0, [r4, #0]
			 for (uint16_t i = j; i < samples; i += l2) {
 8011c2a:	469c      	mov	ip, r3
 8011c2c:	4466      	add	r6, ip
 8011c2e:	b2b6      	uxth	r6, r6
 8011c30:	e77f      	b.n	8011b32 <dofft+0x286>
			 double z = ((u1 * c1) - (u2 * c2));
 8011c32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c36:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8011c38:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011c3a:	f7fe fb2d 	bl	8010298 <__aeabi_dmul>
 8011c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c40:	0004      	movs	r4, r0
 8011c42:	000d      	movs	r5, r1
 8011c44:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8011c46:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	f7fe fb25 	bl	8010298 <__aeabi_dmul>
 8011c4e:	0002      	movs	r2, r0
 8011c50:	000b      	movs	r3, r1
 8011c52:	0020      	movs	r0, r4
 8011c54:	0029      	movs	r1, r5
 8011c56:	f7fe fd91 	bl	801077c <__aeabi_dsub>
			 u2 = ((u1 * c2) + (u2 * c1));
 8011c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
			 double z = ((u1 * c1) - (u2 * c2));
 8011c5e:	6238      	str	r0, [r7, #32]
 8011c60:	6279      	str	r1, [r7, #36]	; 0x24
			 u2 = ((u1 * c2) + (u2 * c1));
 8011c62:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8011c64:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011c66:	f7fe fb17 	bl	8010298 <__aeabi_dmul>
 8011c6a:	0004      	movs	r4, r0
 8011c6c:	000d      	movs	r5, r1
 8011c6e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8011c70:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8011c72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c76:	f7fe fb0f 	bl	8010298 <__aeabi_dmul>
 8011c7a:	0022      	movs	r2, r4
 8011c7c:	002b      	movs	r3, r5
 8011c7e:	f7fd fbe5 	bl	800f44c <__aeabi_dadd>
		for (j = 0; j < l1; j++) {
 8011c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
			 u2 = ((u1 * c2) + (u2 * c1));
 8011c84:	66b8      	str	r0, [r7, #104]	; 0x68
 8011c86:	66f9      	str	r1, [r7, #108]	; 0x6c
		for (j = 0; j < l1; j++) {
 8011c88:	3301      	adds	r3, #1
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	647b      	str	r3, [r7, #68]	; 0x44
			 u1 = z;
 8011c8e:	6a3b      	ldr	r3, [r7, #32]
 8011c90:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011c92:	673b      	str	r3, [r7, #112]	; 0x70
 8011c94:	677c      	str	r4, [r7, #116]	; 0x74
 8011c96:	e745      	b.n	8011b24 <dofft+0x278>
		c2 = sqrt((1.0 - c1) / 2.0);
 8011c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	492d      	ldr	r1, [pc, #180]	; (8011d54 <dofft+0x4a8>)
 8011ca0:	f7fe fd6c 	bl	801077c <__aeabi_dsub>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	4b33      	ldr	r3, [pc, #204]	; (8011d74 <dofft+0x4c8>)
 8011ca8:	f7fe faf6 	bl	8010298 <__aeabi_dmul>
 8011cac:	f001 f9ea 	bl	8013084 <sqrt>
			c2 = -c2;
 8011cb0:	2280      	movs	r2, #128	; 0x80
 8011cb2:	0612      	lsls	r2, r2, #24
 8011cb4:	4694      	mov	ip, r2
 8011cb6:	000b      	movs	r3, r1
 8011cb8:	46d1      	mov	r9, sl
 8011cba:	4463      	add	r3, ip
 8011cbc:	63f8      	str	r0, [r7, #60]	; 0x3c
 8011cbe:	63bb      	str	r3, [r7, #56]	; 0x38
		c1 = sqrt((1.0 + c1) / 2.0);
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011cc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011cc6:	4b23      	ldr	r3, [pc, #140]	; (8011d54 <dofft+0x4a8>)
 8011cc8:	f7fd fbc0 	bl	800f44c <__aeabi_dadd>
 8011ccc:	4b29      	ldr	r3, [pc, #164]	; (8011d74 <dofft+0x4c8>)
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f7fe fae2 	bl	8010298 <__aeabi_dmul>
 8011cd4:	f001 f9d6 	bl	8013084 <sqrt>
	for (uint8_t l = 0; (l < power); l++) {
 8011cd8:	464b      	mov	r3, r9
 8011cda:	3301      	adds	r3, #1
 8011cdc:	b2db      	uxtb	r3, r3
 8011cde:	4699      	mov	r9, r3
		l2 <<= 1;
 8011ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce2:	46da      	mov	sl, fp
		c1 = sqrt((1.0 + c1) / 2.0);
 8011ce4:	6638      	str	r0, [r7, #96]	; 0x60
 8011ce6:	6679      	str	r1, [r7, #100]	; 0x64
		l2 <<= 1;
 8011ce8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011cea:	e707      	b.n	8011afc <dofft+0x250>
	for (uint8_t l = 0; (l < power); l++) {
 8011cec:	2300      	movs	r3, #0
 8011cee:	4650      	mov	r0, sl
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8011cf0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	4291      	cmp	r1, r2
 8011cf6:	d908      	bls.n	8011d0a <dofft+0x45e>
		  data[j][i] = real[j];
 8011cf8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011cfa:	009a      	lsls	r2, r3, #2
 8011cfc:	588a      	ldr	r2, [r1, r2]
 8011cfe:	0059      	lsls	r1, r3, #1
 8011d00:	5a41      	ldrh	r1, [r0, r1]
 8011d02:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8011d04:	3301      	adds	r3, #1
 8011d06:	5311      	strh	r1, [r2, r4]
 8011d08:	e7f2      	b.n	8011cf0 <dofft+0x444>
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8011d0a:	000b      	movs	r3, r1
 8011d0c:	4682      	mov	sl, r0
		  data[j][i] = 0;
 8011d0e:	2100      	movs	r1, #0
		for (uint16_t j = 0; j < sweeps/2; j++) {
 8011d10:	69ba      	ldr	r2, [r7, #24]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8011d12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011d14:	4283      	cmp	r3, r0
 8011d16:	d205      	bcs.n	8011d24 <dofft+0x478>
		  data[j][i] = 0;
 8011d18:	ca01      	ldmia	r2!, {r0}
 8011d1a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8011d1c:	3301      	adds	r3, #1
		  data[j][i] = 0;
 8011d1e:	5301      	strh	r1, [r0, r4]
		for (uint16_t j = sweeps/2; j < sweeps; j++) {
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	e7f6      	b.n	8011d12 <dofft+0x466>
 8011d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d26:	3301      	adds	r3, #1
 8011d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d2a:	e604      	b.n	8011936 <dofft+0x8a>
	float min_scale = scales[0];
 8011d2c:	2501      	movs	r5, #1
 8011d2e:	469a      	mov	sl, r3
 8011d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011d32:	681c      	ldr	r4, [r3, #0]
	for(uint16_t i =1; i<bins; i++){
 8011d34:	b2ab      	uxth	r3, r5
 8011d36:	4553      	cmp	r3, sl
 8011d38:	d21e      	bcs.n	8011d78 <dofft+0x4cc>
		if (scales[i] < min_scale){
 8011d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d3c:	00ab      	lsls	r3, r5, #2
 8011d3e:	58d6      	ldr	r6, [r2, r3]
 8011d40:	1c20      	adds	r0, r4, #0
 8011d42:	1c31      	adds	r1, r6, #0
 8011d44:	f7fd f8d0 	bl	800eee8 <__aeabi_fcmpgt>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d100      	bne.n	8011d4e <dofft+0x4a2>
 8011d4c:	1c26      	adds	r6, r4, #0
 8011d4e:	3501      	adds	r5, #1
	float min_scale = scales[0];
 8011d50:	1c34      	adds	r4, r6, #0
 8011d52:	e7ef      	b.n	8011d34 <dofft+0x488>
 8011d54:	3ff00000 	.word	0x3ff00000
 8011d58:	5474a168 	.word	0x5474a168
 8011d5c:	401921fb 	.word	0x401921fb
 8011d60:	d70a3d71 	.word	0xd70a3d71
 8011d64:	3fdd70a3 	.word	0x3fdd70a3
 8011d68:	3fe147ae 	.word	0x3fe147ae
 8011d6c:	147ae148 	.word	0x147ae148
 8011d70:	bff00000 	.word	0xbff00000
 8011d74:	3fe00000 	.word	0x3fe00000
 8011d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7c:	4694      	mov	ip, r2
 8011d7e:	4463      	add	r3, ip
	for(uint16_t i =1; i<bins; i++){
 8011d80:	2500      	movs	r5, #0
 8011d82:	4699      	mov	r9, r3
 8011d84:	46a3      	mov	fp, r4
	for(uint16_t i =0; i<bins; i++){
 8011d86:	b2ab      	uxth	r3, r5
 8011d88:	459a      	cmp	sl, r3
 8011d8a:	d91f      	bls.n	8011dcc <dofft+0x520>
		float scaling_factor = min_scale/scales[i]; 
 8011d8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d8e:	00ab      	lsls	r3, r5, #2
 8011d90:	58d1      	ldr	r1, [r2, r3]
 8011d92:	4658      	mov	r0, fp
 8011d94:	f7fc fa8a 	bl	800e2ac <__aeabi_fdiv>
 8011d98:	2280      	movs	r2, #128	; 0x80
 8011d9a:	4680      	mov	r8, r0
 8011d9c:	006b      	lsls	r3, r5, #1
 8011d9e:	18ba      	adds	r2, r7, r2
 8011da0:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8011da2:	6013      	str	r3, [r2, #0]
		for(uint16_t j = 0; j < sweeps/2; j++){
 8011da4:	454e      	cmp	r6, r9
 8011da6:	d00f      	beq.n	8011dc8 <dofft+0x51c>
			data[j][i] *= scaling_factor;
 8011da8:	2380      	movs	r3, #128	; 0x80
 8011daa:	18fb      	adds	r3, r7, r3
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	ce10      	ldmia	r6!, {r4}
 8011db0:	469c      	mov	ip, r3
 8011db2:	4464      	add	r4, ip
 8011db4:	8820      	ldrh	r0, [r4, #0]
 8011db6:	f7fd fabf 	bl	800f338 <__aeabi_i2f>
 8011dba:	4641      	mov	r1, r8
 8011dbc:	f7fc fb88 	bl	800e4d0 <__aeabi_fmul>
 8011dc0:	f7fd f8c6 	bl	800ef50 <__aeabi_f2uiz>
 8011dc4:	8020      	strh	r0, [r4, #0]
 8011dc6:	e7ed      	b.n	8011da4 <dofft+0x4f8>
 8011dc8:	3501      	adds	r5, #1
 8011dca:	e7dc      	b.n	8011d86 <dofft+0x4da>
}
 8011dcc:	4658      	mov	r0, fp
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	b023      	add	sp, #140	; 0x8c
 8011dd2:	bc3c      	pop	{r2, r3, r4, r5}
 8011dd4:	4690      	mov	r8, r2
 8011dd6:	4699      	mov	r9, r3
 8011dd8:	46a2      	mov	sl, r4
 8011dda:	46ab      	mov	fp, r5
 8011ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dde:	46c0      	nop			; (mov r8, r8)

08011de0 <main>:
{
 8011de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de2:	46de      	mov	lr, fp
 8011de4:	464e      	mov	r6, r9
 8011de6:	4645      	mov	r5, r8
 8011de8:	4657      	mov	r7, sl
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8011dea:	2380      	movs	r3, #128	; 0x80
 8011dec:	b5e0      	push	{r5, r6, r7, lr}
 8011dee:	4df6      	ldr	r5, [pc, #984]	; (80121c8 <main+0x3e8>)
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	682a      	ldr	r2, [r5, #0]
 8011df4:	b097      	sub	sp, #92	; 0x5c
 8011df6:	4313      	orrs	r3, r2
 8011df8:	602b      	str	r3, [r5, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	f7f9 f984 	bl	800b108 <HAL_InitTick>
 8011e00:	4ef2      	ldr	r6, [pc, #968]	; (80121cc <main+0x3ec>)
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d116      	bne.n	8011e34 <main+0x54>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e06:	2101      	movs	r1, #1
 8011e08:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011e0a:	430a      	orrs	r2, r1
 8011e0c:	6432      	str	r2, [r6, #64]	; 0x40
 8011e0e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8011e10:	400b      	ands	r3, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8011e12:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011e14:	9306      	str	r3, [sp, #24]
 8011e16:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011e18:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011e1a:	0549      	lsls	r1, r1, #21
 8011e1c:	430a      	orrs	r2, r1
 8011e1e:	63f2      	str	r2, [r6, #60]	; 0x3c
 8011e20:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_DisableDBATT(uint32_t ConfigDeadBattery)
{
  SET_BIT(SYSCFG->CFGR1, ConfigDeadBattery);
 8011e22:	4aeb      	ldr	r2, [pc, #940]	; (80121d0 <main+0x3f0>)
 8011e24:	400b      	ands	r3, r1
 8011e26:	9305      	str	r3, [sp, #20]
 8011e28:	9b05      	ldr	r3, [sp, #20]
 8011e2a:	23c0      	movs	r3, #192	; 0xc0
 8011e2c:	6811      	ldr	r1, [r2, #0]
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	430b      	orrs	r3, r1
 8011e32:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 8011e34:	f7ef fc36 	bl	80016a4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e38:	2210      	movs	r2, #16
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	a80d      	add	r0, sp, #52	; 0x34
 8011e3e:	f000 ff0d 	bl	8012c5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e42:	2201      	movs	r2, #1
 8011e44:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011e46:	4690      	mov	r8, r2
 8011e48:	4313      	orrs	r3, r2
 8011e4a:	6373      	str	r3, [r6, #52]	; 0x34
 8011e4c:	6b73      	ldr	r3, [r6, #52]	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e4e:	ac0c      	add	r4, sp, #48	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e50:	4013      	ands	r3, r2
 8011e52:	9304      	str	r3, [sp, #16]
 8011e54:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e56:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011e58:	1892      	adds	r2, r2, r2
 8011e5a:	4313      	orrs	r3, r2
 8011e5c:	6373      	str	r3, [r6, #52]	; 0x34
 8011e5e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011e60:	4692      	mov	sl, r2
 8011e62:	4013      	ands	r3, r2
 8011e64:	9303      	str	r3, [sp, #12]
 8011e66:	9b03      	ldr	r3, [sp, #12]
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011e68:	23a0      	movs	r3, #160	; 0xa0
 8011e6a:	05db      	lsls	r3, r3, #23
 8011e6c:	469b      	mov	fp, r3
 8011e6e:	2388      	movs	r3, #136	; 0x88
 8011e70:	465a      	mov	r2, fp
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	6293      	str	r3, [r2, #40]	; 0x28
 8011e76:	4bd7      	ldr	r3, [pc, #860]	; (80121d4 <main+0x3f4>)

  /*Configure GPIO pins : MISC_GPIO2_Pin MISC_GPIO0_Pin */
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e78:	4658      	mov	r0, fp
 8011e7a:	4699      	mov	r9, r3
 8011e7c:	464a      	mov	r2, r9
 8011e7e:	4bd6      	ldr	r3, [pc, #856]	; (80121d8 <main+0x3f8>)
 8011e80:	0021      	movs	r1, r4
 8011e82:	6293      	str	r3, [r2, #40]	; 0x28
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011e84:	4652      	mov	r2, sl
 8011e86:	464b      	mov	r3, r9
 8011e88:	619a      	str	r2, [r3, #24]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 8011e8a:	2303      	movs	r3, #3
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011e8c:	60a2      	str	r2, [r4, #8]
  GPIO_InitStruct.Pin = MISC_GPIO2_Pin|MISC_GPIO0_Pin;
 8011e8e:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011e90:	f7f9 fc3e 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_INT_Pin */
  GPIO_InitStruct.Pin = MCU_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011e94:	4641      	mov	r1, r8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e96:	2700      	movs	r7, #0
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 8011e98:	2210      	movs	r2, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e9a:	2303      	movs	r3, #3
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8011e9c:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011e9e:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8011ea0:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = MCU_INT_Pin;
 8011ea2:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ea4:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ea6:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(MCU_INT_GPIO_Port, &GPIO_InitStruct);
 8011ea8:	f7f9 fc32 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pins : A111_CS_N_Pin PMU_ENABLE_Pin PS_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011eac:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 8011eae:	4bcb      	ldr	r3, [pc, #812]	; (80121dc <main+0x3fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011eb0:	6061      	str	r1, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011eb2:	4648      	mov	r0, r9
 8011eb4:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_CS_N_Pin|PMU_ENABLE_Pin|PS_ENABLE_Pin;
 8011eb6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eb8:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011eba:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ebc:	f7f9 fc28 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C_ADDRESS_Pin MISC_GPIO1_Pin */
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011ec0:	4651      	mov	r1, sl
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8011ec2:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011ec4:	60a1      	str	r1, [r4, #8]
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8011ec6:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ec8:	0021      	movs	r1, r4
 8011eca:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = I2C_ADDRESS_Pin|MISC_GPIO1_Pin;
 8011ecc:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011ece:	6067      	str	r7, [r4, #4]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011ed0:	f7f9 fc1e 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_ENABLE_Pin */
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011ed4:	4641      	mov	r1, r8
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8011ed6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011ed8:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8011eda:	005b      	lsls	r3, r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011edc:	6061      	str	r1, [r4, #4]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011ede:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = A111_ENABLE_Pin;
 8011ee0:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ee2:	60a7      	str	r7, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011ee4:	60e7      	str	r7, [r4, #12]
  HAL_GPIO_Init(A111_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8011ee6:	f7f9 fc13 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_SENSOR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = A111_SENSOR_INTERRUPT_Pin;
 8011eea:	2308      	movs	r3, #8
 8011eec:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011eee:	4bbc      	ldr	r3, [pc, #752]	; (80121e0 <main+0x400>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8011ef0:	0021      	movs	r1, r4
 8011ef2:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011ef4:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ef6:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_SENSOR_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8011ef8:	f7f9 fc0a 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pin : A111_CTRL_Pin */
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8011efc:	2210      	movs	r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011efe:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = A111_CTRL_Pin;
 8011f00:	920c      	str	r2, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f02:	4642      	mov	r2, r8
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 8011f04:	0021      	movs	r1, r4
 8011f06:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011f08:	6062      	str	r2, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f0a:	60e3      	str	r3, [r4, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f0c:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(A111_CTRL_GPIO_Port, &GPIO_InitStruct);
 8011f0e:	f7f9 fbff 	bl	800b710 <HAL_GPIO_Init>

  /*Configure GPIO pin : WAKE_UP_Pin */
  GPIO_InitStruct.Pin = WAKE_UP_Pin;
 8011f12:	2320      	movs	r3, #32
 8011f14:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8011f16:	4bb3      	ldr	r3, [pc, #716]	; (80121e4 <main+0x404>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8011f18:	0021      	movs	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8011f1a:	6063      	str	r3, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f1c:	4653      	mov	r3, sl
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8011f1e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8011f20:	60a3      	str	r3, [r4, #8]
  HAL_GPIO_Init(WAKE_UP_GPIO_Port, &GPIO_InitStruct);
 8011f22:	f7f9 fbf5 	bl	800b710 <HAL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011f26:	20c1      	movs	r0, #193	; 0xc1
 8011f28:	4baf      	ldr	r3, [pc, #700]	; (80121e8 <main+0x408>)
 8011f2a:	0080      	lsls	r0, r0, #2
 8011f2c:	581a      	ldr	r2, [r3, r0]
 8011f2e:	49af      	ldr	r1, [pc, #700]	; (80121ec <main+0x40c>)
 8011f30:	400a      	ands	r2, r1
 8011f32:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f34:	2240      	movs	r2, #64	; 0x40
 8011f36:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011f38:	581a      	ldr	r2, [r3, r0]
 8011f3a:	0212      	lsls	r2, r2, #8
 8011f3c:	0a12      	lsrs	r2, r2, #8
 8011f3e:	501a      	str	r2, [r3, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f40:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_DMA1_CLK_ENABLE();
 8011f42:	4640      	mov	r0, r8
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8011f48:	4302      	orrs	r2, r0
 8011f4a:	63b2      	str	r2, [r6, #56]	; 0x38
 8011f4c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8011f4e:	4002      	ands	r2, r0
 8011f50:	9202      	str	r2, [sp, #8]
 8011f52:	9a02      	ldr	r2, [sp, #8]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011f54:	22c2      	movs	r2, #194	; 0xc2
 8011f56:	0092      	lsls	r2, r2, #2
 8011f58:	5899      	ldr	r1, [r3, r2]
 8011f5a:	48a5      	ldr	r0, [pc, #660]	; (80121f0 <main+0x410>)
 8011f5c:	4001      	ands	r1, r0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f5e:	2080      	movs	r0, #128	; 0x80
 8011f60:	0080      	lsls	r0, r0, #2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011f62:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f64:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011f66:	5898      	ldr	r0, [r3, r2]
 8011f68:	49a0      	ldr	r1, [pc, #640]	; (80121ec <main+0x40c>)
 8011f6a:	4008      	ands	r0, r1
 8011f6c:	5098      	str	r0, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011f6e:	32f8      	adds	r2, #248	; 0xf8
 8011f70:	601a      	str	r2, [r3, #0]
  hi2c1.Instance = I2C1;
 8011f72:	4aa0      	ldr	r2, [pc, #640]	; (80121f4 <main+0x414>)
 8011f74:	4693      	mov	fp, r2
 8011f76:	4658      	mov	r0, fp
 8011f78:	4a9f      	ldr	r2, [pc, #636]	; (80121f8 <main+0x418>)
 8011f7a:	64c2      	str	r2, [r0, #76]	; 0x4c
  hi2c1.Init.Timing = 0x10707DBC;
 8011f7c:	4a9f      	ldr	r2, [pc, #636]	; (80121fc <main+0x41c>)
 8011f7e:	6502      	str	r2, [r0, #80]	; 0x50
  hi2c1.Init.OwnAddress1 = 164;
 8011f80:	22a4      	movs	r2, #164	; 0xa4
 8011f82:	6542      	str	r2, [r0, #84]	; 0x54
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011f84:	465a      	mov	r2, fp
 8011f86:	4640      	mov	r0, r8
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011f88:	65d7      	str	r7, [r2, #92]	; 0x5c
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8011f8a:	6590      	str	r0, [r2, #88]	; 0x58
  hi2c1.Init.OwnAddress2 = 0;
 8011f8c:	6617      	str	r7, [r2, #96]	; 0x60
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8011f8e:	6657      	str	r7, [r2, #100]	; 0x64
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011f90:	6697      	str	r7, [r2, #104]	; 0x68
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011f92:	66d7      	str	r7, [r2, #108]	; 0x6c
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011f94:	328d      	adds	r2, #141	; 0x8d
 8011f96:	7812      	ldrb	r2, [r2, #0]
 8011f98:	9300      	str	r3, [sp, #0]
 8011f9a:	b2d2      	uxtb	r2, r2
 8011f9c:	9101      	str	r1, [sp, #4]
 8011f9e:	42ba      	cmp	r2, r7
 8011fa0:	d12c      	bne.n	8011ffc <main+0x21c>
    hi2c->Lock = HAL_UNLOCKED;
 8011fa2:	465b      	mov	r3, fp
 8011fa4:	338c      	adds	r3, #140	; 0x8c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fa6:	60e2      	str	r2, [r4, #12]
 8011fa8:	701a      	strb	r2, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011faa:	4652      	mov	r2, sl
 8011fac:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fae:	0021      	movs	r1, r4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	6373      	str	r3, [r6, #52]	; 0x34
 8011fb4:	6b73      	ldr	r3, [r6, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fb6:	60a0      	str	r0, [r4, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011fb8:	4013      	ands	r3, r2
 8011fba:	9308      	str	r3, [sp, #32]
 8011fbc:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8011fbe:	23c0      	movs	r3, #192	; 0xc0
 8011fc0:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011fc2:	3bae      	subs	r3, #174	; 0xae
 8011fc4:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011fc6:	4643      	mov	r3, r8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fc8:	4648      	mov	r0, r9
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8011fca:	3305      	adds	r3, #5
 8011fcc:	6123      	str	r3, [r4, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011fce:	f7f9 fb9f 	bl	800b710 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011fd2:	2180      	movs	r1, #128	; 0x80
 8011fd4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011fd6:	0389      	lsls	r1, r1, #14
 8011fd8:	430a      	orrs	r2, r1
 8011fda:	63f2      	str	r2, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011fdc:	22c5      	movs	r2, #197	; 0xc5
 8011fde:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8011fe0:	0092      	lsls	r2, r2, #2
 8011fe2:	400b      	ands	r3, r1
 8011fe4:	9307      	str	r3, [sp, #28]
 8011fe6:	9b07      	ldr	r3, [sp, #28]
 8011fe8:	9b00      	ldr	r3, [sp, #0]
 8011fea:	9900      	ldr	r1, [sp, #0]
 8011fec:	589b      	ldr	r3, [r3, r2]
 8011fee:	021b      	lsls	r3, r3, #8
 8011ff0:	0a1b      	lsrs	r3, r3, #8
 8011ff2:	508b      	str	r3, [r1, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011ff4:	2380      	movs	r3, #128	; 0x80
 8011ff6:	9a00      	ldr	r2, [sp, #0]
 8011ff8:	041b      	lsls	r3, r3, #16
 8011ffa:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8011ffc:	465b      	mov	r3, fp
 8011ffe:	2224      	movs	r2, #36	; 0x24
 8012000:	338d      	adds	r3, #141	; 0x8d
 8012002:	701a      	strb	r2, [r3, #0]
  __HAL_I2C_DISABLE(hi2c);
 8012004:	465b      	mov	r3, fp
 8012006:	2101      	movs	r1, #1
 8012008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	438a      	bics	r2, r1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801200e:	4659      	mov	r1, fp
  __HAL_I2C_DISABLE(hi2c);
 8012010:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012012:	6d09      	ldr	r1, [r1, #80]	; 0x50
 8012014:	4a7a      	ldr	r2, [pc, #488]	; (8012200 <main+0x420>)
 8012016:	400a      	ands	r2, r1
 8012018:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801201a:	6899      	ldr	r1, [r3, #8]
 801201c:	4a79      	ldr	r2, [pc, #484]	; (8012204 <main+0x424>)
 801201e:	4011      	ands	r1, r2
 8012020:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012022:	4659      	mov	r1, fp
 8012024:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8012026:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8012028:	468c      	mov	ip, r1
 801202a:	2801      	cmp	r0, #1
 801202c:	d000      	beq.n	8012030 <main+0x250>
 801202e:	e2d0      	b.n	80125d2 <main+0x7f2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012030:	2180      	movs	r1, #128	; 0x80
 8012032:	4660      	mov	r0, ip
 8012034:	0209      	lsls	r1, r1, #8
 8012036:	4301      	orrs	r1, r0
 8012038:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801203a:	6858      	ldr	r0, [r3, #4]
 801203c:	4972      	ldr	r1, [pc, #456]	; (8012208 <main+0x428>)
  hi2c->State = HAL_I2C_STATE_READY;
 801203e:	2720      	movs	r7, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012040:	4301      	orrs	r1, r0
 8012042:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012044:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012046:	4658      	mov	r0, fp
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8012048:	400a      	ands	r2, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801204a:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801204c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 801204e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8012050:	6e09      	ldr	r1, [r1, #96]	; 0x60
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012052:	3090      	adds	r0, #144	; 0x90
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012054:	430a      	orrs	r2, r1
 8012056:	4659      	mov	r1, fp
 8012058:	6e49      	ldr	r1, [r1, #100]	; 0x64
 801205a:	0209      	lsls	r1, r1, #8
 801205c:	430a      	orrs	r2, r1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801205e:	4659      	mov	r1, fp
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012060:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012062:	6e8a      	ldr	r2, [r1, #104]	; 0x68
 8012064:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8012066:	430a      	orrs	r2, r1
 8012068:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 801206a:	2201      	movs	r2, #1
 801206c:	6819      	ldr	r1, [r3, #0]
 801206e:	4311      	orrs	r1, r2
 8012070:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012072:	2100      	movs	r1, #0
 8012074:	6001      	str	r1, [r0, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8012076:	4658      	mov	r0, fp
 8012078:	308d      	adds	r0, #141	; 0x8d
 801207a:	7007      	strb	r7, [r0, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 801207c:	465f      	mov	r7, fp
 801207e:	67f9      	str	r1, [r7, #124]	; 0x7c
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012080:	278e      	movs	r7, #142	; 0x8e
 8012082:	445f      	add	r7, fp
 8012084:	7039      	strb	r1, [r7, #0]
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012086:	7807      	ldrb	r7, [r0, #0]
 8012088:	b2ff      	uxtb	r7, r7
 801208a:	46bc      	mov	ip, r7
 801208c:	2f20      	cmp	r7, #32
 801208e:	d11c      	bne.n	80120ca <main+0x2ea>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012090:	376c      	adds	r7, #108	; 0x6c
 8012092:	445f      	add	r7, fp
 8012094:	46b9      	mov	r9, r7
 8012096:	783f      	ldrb	r7, [r7, #0]
 8012098:	4297      	cmp	r7, r2
 801209a:	d016      	beq.n	80120ca <main+0x2ea>

    hi2c->State = HAL_I2C_STATE_BUSY;
 801209c:	2724      	movs	r7, #36	; 0x24
 801209e:	7007      	strb	r7, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80120a0:	681f      	ldr	r7, [r3, #0]
 80120a2:	4397      	bics	r7, r2
 80120a4:	601f      	str	r7, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80120a6:	681f      	ldr	r7, [r3, #0]
 80120a8:	46b8      	mov	r8, r7
 80120aa:	4f58      	ldr	r7, [pc, #352]	; (801220c <main+0x42c>)
 80120ac:	46ba      	mov	sl, r7
 80120ae:	4647      	mov	r7, r8
 80120b0:	4652      	mov	r2, sl
 80120b2:	4017      	ands	r7, r2
 80120b4:	601f      	str	r7, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;

    __HAL_I2C_ENABLE(hi2c);
 80120b6:	2701      	movs	r7, #1
    hi2c->Instance->CR1 |= AnalogFilter;
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	433a      	orrs	r2, r7
 80120c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80120c2:	4662      	mov	r2, ip
 80120c4:	7002      	strb	r2, [r0, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120c6:	464a      	mov	r2, r9
 80120c8:	7011      	strb	r1, [r2, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120ca:	4658      	mov	r0, fp
 80120cc:	308d      	adds	r0, #141	; 0x8d
 80120ce:	7801      	ldrb	r1, [r0, #0]
 80120d0:	b2c9      	uxtb	r1, r1
 80120d2:	2920      	cmp	r1, #32
 80120d4:	d11e      	bne.n	8012114 <main+0x334>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120d6:	228c      	movs	r2, #140	; 0x8c
 80120d8:	445a      	add	r2, fp
 80120da:	4690      	mov	r8, r2
 80120dc:	7812      	ldrb	r2, [r2, #0]
 80120de:	2a01      	cmp	r2, #1
 80120e0:	d018      	beq.n	8012114 <main+0x334>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80120e2:	2224      	movs	r2, #36	; 0x24
 80120e4:	7002      	strb	r2, [r0, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80120e6:	681a      	ldr	r2, [r3, #0]
 80120e8:	4694      	mov	ip, r2
 80120ea:	2201      	movs	r2, #1
 80120ec:	4667      	mov	r7, ip
 80120ee:	4397      	bics	r7, r2
 80120f0:	601f      	str	r7, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80120f2:	681f      	ldr	r7, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);
 80120f4:	4692      	mov	sl, r2
    tmpreg = hi2c->Instance->CR1;
 80120f6:	46bc      	mov	ip, r7

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80120f8:	4f45      	ldr	r7, [pc, #276]	; (8012210 <main+0x430>)
 80120fa:	46b9      	mov	r9, r7
 80120fc:	4667      	mov	r7, ip
 80120fe:	464a      	mov	r2, r9
 8012100:	4017      	ands	r7, r2

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012102:	601f      	str	r7, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012104:	4657      	mov	r7, sl
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	4317      	orrs	r7, r2
 801210a:	601f      	str	r7, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801210c:	4642      	mov	r2, r8
 801210e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8012110:	7001      	strb	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8012112:	7013      	strb	r3, [r2, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8012114:	2228      	movs	r2, #40	; 0x28
 8012116:	2100      	movs	r1, #0
 8012118:	0020      	movs	r0, r4
 801211a:	f000 fd9f 	bl	8012c5c <memset>
  hrtc.Instance = RTC;
 801211e:	4b3d      	ldr	r3, [pc, #244]	; (8012214 <main+0x434>)
 8012120:	4a3d      	ldr	r2, [pc, #244]	; (8012218 <main+0x438>)
 8012122:	4698      	mov	r8, r3
 8012124:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012126:	4641      	mov	r1, r8
 8012128:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = 31;
 801212a:	4640      	mov	r0, r8
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801212c:	608b      	str	r3, [r1, #8]
  hrtc.Init.AsynchPrediv = 31;
 801212e:	211f      	movs	r1, #31
 8012130:	60c1      	str	r1, [r0, #12]
  hrtc.Init.SynchPrediv = 999;
 8012132:	493a      	ldr	r1, [pc, #232]	; (801221c <main+0x43c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012134:	6143      	str	r3, [r0, #20]
  hrtc.Init.SynchPrediv = 999;
 8012136:	6101      	str	r1, [r0, #16]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012138:	2180      	movs	r1, #128	; 0x80
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801213a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801213c:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 801213e:	6243      	str	r3, [r0, #36]	; 0x24
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012140:	4643      	mov	r3, r8
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012142:	05c9      	lsls	r1, r1, #23
 8012144:	6201      	str	r1, [r0, #32]
 8012146:	3329      	adds	r3, #41	; 0x29
 8012148:	781b      	ldrb	r3, [r3, #0]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 801214a:	4641      	mov	r1, r8
 801214c:	b2db      	uxtb	r3, r3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d11d      	bne.n	801218e <main+0x3ae>
    hrtc->Lock = HAL_UNLOCKED;
 8012152:	3128      	adds	r1, #40	; 0x28
 8012154:	700b      	strb	r3, [r1, #0]
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8012156:	2388      	movs	r3, #136	; 0x88
 8012158:	021b      	lsls	r3, r3, #8
 801215a:	6043      	str	r3, [r0, #4]
    __HAL_RCC_RTC_ENABLE();
 801215c:	2380      	movs	r3, #128	; 0x80
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 801215e:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8012160:	6df1      	ldr	r1, [r6, #92]	; 0x5c
 8012162:	021b      	lsls	r3, r3, #8
 8012164:	430b      	orrs	r3, r1
 8012166:	65f3      	str	r3, [r6, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8012168:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 801216a:	00c0      	lsls	r0, r0, #3
 801216c:	4301      	orrs	r1, r0
 801216e:	63f1      	str	r1, [r6, #60]	; 0x3c
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8012170:	21c0      	movs	r1, #192	; 0xc0
 8012172:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8012174:	0089      	lsls	r1, r1, #2
 8012176:	4003      	ands	r3, r0
 8012178:	9309      	str	r3, [sp, #36]	; 0x24
 801217a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801217c:	9b00      	ldr	r3, [sp, #0]
 801217e:	481b      	ldr	r0, [pc, #108]	; (80121ec <main+0x40c>)
 8012180:	585b      	ldr	r3, [r3, r1]
 8012182:	4003      	ands	r3, r0
 8012184:	9800      	ldr	r0, [sp, #0]
 8012186:	5043      	str	r3, [r0, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012188:	2304      	movs	r3, #4
 801218a:	9900      	ldr	r1, [sp, #0]
 801218c:	600b      	str	r3, [r1, #0]
    hrtc->State = HAL_RTC_STATE_BUSY;
 801218e:	4643      	mov	r3, r8
 8012190:	2102      	movs	r1, #2
 8012192:	3329      	adds	r3, #41	; 0x29
 8012194:	7019      	strb	r1, [r3, #0]
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012196:	23ca      	movs	r3, #202	; 0xca
 8012198:	6253      	str	r3, [r2, #36]	; 0x24
 801219a:	3b77      	subs	r3, #119	; 0x77
 801219c:	6253      	str	r3, [r2, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 801219e:	f7f8 fb81 	bl	800a8a4 <RTC_EnterInitMode.constprop.114>
    if(status == HAL_OK)
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d15c      	bne.n	8012260 <main+0x480>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80121a6:	4643      	mov	r3, r8
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80121a8:	4640      	mov	r0, r8
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	491c      	ldr	r1, [pc, #112]	; (8012220 <main+0x440>)
 80121ae:	699a      	ldr	r2, [r3, #24]
 80121b0:	400a      	ands	r2, r1
 80121b2:	619a      	str	r2, [r3, #24]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80121b4:	6882      	ldr	r2, [r0, #8]
 80121b6:	6940      	ldr	r0, [r0, #20]
 80121b8:	6999      	ldr	r1, [r3, #24]
 80121ba:	4302      	orrs	r2, r0
 80121bc:	4640      	mov	r0, r8
 80121be:	69c0      	ldr	r0, [r0, #28]
 80121c0:	4302      	orrs	r2, r0
 80121c2:	430a      	orrs	r2, r1
 80121c4:	e02e      	b.n	8012224 <main+0x444>
 80121c6:	46c0      	nop			; (mov r8, r8)
 80121c8:	40022000 	.word	0x40022000
 80121cc:	40021000 	.word	0x40021000
 80121d0:	40010000 	.word	0x40010000
 80121d4:	50000400 	.word	0x50000400
 80121d8:	00000211 	.word	0x00000211
 80121dc:	00000203 	.word	0x00000203
 80121e0:	10110000 	.word	0x10110000
 80121e4:	10310000 	.word	0x10310000
 80121e8:	e000e100 	.word	0xe000e100
 80121ec:	ff00ffff 	.word	0xff00ffff
 80121f0:	ffff00ff 	.word	0xffff00ff
 80121f4:	2000018c 	.word	0x2000018c
 80121f8:	40005400 	.word	0x40005400
 80121fc:	10707dbc 	.word	0x10707dbc
 8012200:	f0ffffff 	.word	0xf0ffffff
 8012204:	ffff7fff 	.word	0xffff7fff
 8012208:	02008000 	.word	0x02008000
 801220c:	ffffefff 	.word	0xffffefff
 8012210:	fffff0ff 	.word	0xfffff0ff
 8012214:	20000288 	.word	0x20000288
 8012218:	40002800 	.word	0x40002800
 801221c:	000003e7 	.word	0x000003e7
 8012220:	fb8fffbf 	.word	0xfb8fffbf
 8012224:	619a      	str	r2, [r3, #24]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8012226:	4642      	mov	r2, r8
 8012228:	6912      	ldr	r2, [r2, #16]
 801222a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801222c:	4642      	mov	r2, r8
 801222e:	68d2      	ldr	r2, [r2, #12]
 8012230:	6919      	ldr	r1, [r3, #16]
 8012232:	0412      	lsls	r2, r2, #16
 8012234:	430a      	orrs	r2, r1
 8012236:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 8012238:	f7f8 fb0c 	bl	800a854 <RTC_ExitInitMode.constprop.115>
      if (status == HAL_OK)
 801223c:	2800      	cmp	r0, #0
 801223e:	d10f      	bne.n	8012260 <main+0x480>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012240:	4643      	mov	r3, r8
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012242:	4647      	mov	r7, r8
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	6993      	ldr	r3, [r2, #24]
 8012248:	00db      	lsls	r3, r3, #3
 801224a:	08db      	lsrs	r3, r3, #3
 801224c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	6a3f      	ldr	r7, [r7, #32]
 8012252:	6991      	ldr	r1, [r2, #24]
 8012254:	433b      	orrs	r3, r7
 8012256:	4647      	mov	r7, r8
 8012258:	69bf      	ldr	r7, [r7, #24]
 801225a:	433b      	orrs	r3, r7
 801225c:	430b      	orrs	r3, r1
 801225e:	6193      	str	r3, [r2, #24]
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012260:	4643      	mov	r3, r8
 8012262:	22ff      	movs	r2, #255	; 0xff
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8012268:	2800      	cmp	r0, #0
 801226a:	d103      	bne.n	8012274 <main+0x494>
      hrtc->State = HAL_RTC_STATE_READY;
 801226c:	4642      	mov	r2, r8
 801226e:	2101      	movs	r1, #1
 8012270:	3229      	adds	r2, #41	; 0x29
 8012272:	7011      	strb	r1, [r2, #0]
  __HAL_LOCK(hrtc);
 8012274:	4642      	mov	r2, r8
 8012276:	3228      	adds	r2, #40	; 0x28
 8012278:	7811      	ldrb	r1, [r2, #0]
 801227a:	2901      	cmp	r1, #1
 801227c:	d030      	beq.n	80122e0 <main+0x500>
 801227e:	2101      	movs	r1, #1
 8012280:	7011      	strb	r1, [r2, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012282:	4642      	mov	r2, r8
 8012284:	1849      	adds	r1, r1, r1
 8012286:	3229      	adds	r2, #41	; 0x29
 8012288:	7011      	strb	r1, [r2, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801228a:	22ca      	movs	r2, #202	; 0xca
 801228c:	625a      	str	r2, [r3, #36]	; 0x24
 801228e:	3a77      	subs	r2, #119	; 0x77
 8012290:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8012292:	f7f8 fb07 	bl	800a8a4 <RTC_EnterInitMode.constprop.114>
  if(status == HAL_OK)
 8012296:	2800      	cmp	r0, #0
 8012298:	d114      	bne.n	80122c4 <main+0x4e4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801229a:	4643      	mov	r3, r8
 801229c:	681f      	ldr	r7, [r3, #0]
 801229e:	69bb      	ldr	r3, [r7, #24]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80122a0:	f7f8 fe7e 	bl	800afa0 <RTC_ByteToBcd2>
 80122a4:	0002      	movs	r2, r0
 80122a6:	0403      	lsls	r3, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80122a8:	0200      	lsls	r0, r0, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80122aa:	4318      	orrs	r0, r3
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80122ac:	4be0      	ldr	r3, [pc, #896]	; (8012630 <main+0x850>)
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80122ae:	4310      	orrs	r0, r2
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80122b0:	4018      	ands	r0, r3
 80122b2:	6038      	str	r0, [r7, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	4adf      	ldr	r2, [pc, #892]	; (8012634 <main+0x854>)
 80122b8:	4013      	ands	r3, r2
 80122ba:	61bb      	str	r3, [r7, #24]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	61bb      	str	r3, [r7, #24]
    status = RTC_ExitInitMode(hrtc);
 80122c0:	f7f8 fac8 	bl	800a854 <RTC_ExitInitMode.constprop.115>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80122c4:	4643      	mov	r3, r8
 80122c6:	22ff      	movs	r2, #255	; 0xff
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80122cc:	2800      	cmp	r0, #0
 80122ce:	d103      	bne.n	80122d8 <main+0x4f8>
   hrtc->State = HAL_RTC_STATE_READY;
 80122d0:	4643      	mov	r3, r8
 80122d2:	3afe      	subs	r2, #254	; 0xfe
 80122d4:	3329      	adds	r3, #41	; 0x29
 80122d6:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80122d8:	4643      	mov	r3, r8
 80122da:	2200      	movs	r2, #0
 80122dc:	3328      	adds	r3, #40	; 0x28
 80122de:	701a      	strb	r2, [r3, #0]
 __HAL_LOCK(hrtc);
 80122e0:	4643      	mov	r3, r8
 80122e2:	3328      	adds	r3, #40	; 0x28
 80122e4:	781a      	ldrb	r2, [r3, #0]
 80122e6:	2a01      	cmp	r2, #1
 80122e8:	d033      	beq.n	8012352 <main+0x572>
 80122ea:	2201      	movs	r2, #1
 80122ec:	701a      	strb	r2, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80122ee:	4643      	mov	r3, r8
 __HAL_LOCK(hrtc);
 80122f0:	4691      	mov	r9, r2
  hrtc->State = HAL_RTC_STATE_BUSY;
 80122f2:	3329      	adds	r3, #41	; 0x29
 80122f4:	1892      	adds	r2, r2, r2
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80122f6:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_BUSY;
 80122f8:	701a      	strb	r2, [r3, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80122fa:	f7f8 fe51 	bl	800afa0 <RTC_ByteToBcd2>
 80122fe:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012300:	4648      	mov	r0, r9
 8012302:	f7f8 fe4d 	bl	800afa0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012306:	2380      	movs	r3, #128	; 0x80
 8012308:	019b      	lsls	r3, r3, #6
 801230a:	4303      	orrs	r3, r0
 801230c:	043f      	lsls	r7, r7, #16
 801230e:	431f      	orrs	r7, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012310:	4643      	mov	r3, r8
 8012312:	22ca      	movs	r2, #202	; 0xca
 8012314:	681b      	ldr	r3, [r3, #0]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012316:	0200      	lsls	r0, r0, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012318:	625a      	str	r2, [r3, #36]	; 0x24
 801231a:	3a77      	subs	r2, #119	; 0x77
 801231c:	625a      	str	r2, [r3, #36]	; 0x24
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801231e:	4307      	orrs	r7, r0
  status = RTC_EnterInitMode(hrtc);
 8012320:	f7f8 fac0 	bl	800a8a4 <RTC_EnterInitMode.constprop.114>
  if(status == HAL_OK)
 8012324:	2800      	cmp	r0, #0
 8012326:	d106      	bne.n	8012336 <main+0x556>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012328:	4643      	mov	r3, r8
 801232a:	48c3      	ldr	r0, [pc, #780]	; (8012638 <main+0x858>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	4007      	ands	r7, r0
 8012330:	605f      	str	r7, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8012332:	f7f8 fa8f 	bl	800a854 <RTC_ExitInitMode.constprop.115>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012336:	4643      	mov	r3, r8
 8012338:	22ff      	movs	r2, #255	; 0xff
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 801233e:	2800      	cmp	r0, #0
 8012340:	d103      	bne.n	801234a <main+0x56a>
    hrtc->State = HAL_RTC_STATE_READY;
 8012342:	4643      	mov	r3, r8
 8012344:	3afe      	subs	r2, #254	; 0xfe
 8012346:	3329      	adds	r3, #41	; 0x29
 8012348:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hrtc);
 801234a:	4643      	mov	r3, r8
 801234c:	2200      	movs	r2, #0
 801234e:	3328      	adds	r3, #40	; 0x28
 8012350:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Hours = 0;
 8012352:	2300      	movs	r3, #0
 8012354:	4698      	mov	r8, r3
 8012356:	8023      	strh	r3, [r4, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8012358:	70a3      	strb	r3, [r4, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 801235a:	6063      	str	r3, [r4, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801235c:	60e3      	str	r3, [r4, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801235e:	6123      	str	r3, [r4, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8012360:	6163      	str	r3, [r4, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012362:	61a3      	str	r3, [r4, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012364:	61e3      	str	r3, [r4, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8012366:	3301      	adds	r3, #1
 8012368:	4699      	mov	r9, r3
 801236a:	aa02      	add	r2, sp, #8
 801236c:	4694      	mov	ip, r2
 801236e:	464a      	mov	r2, r9
 8012370:	3328      	adds	r3, #40	; 0x28
 8012372:	4463      	add	r3, ip
 8012374:	77da      	strb	r2, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8012376:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8012378:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801237e:	f7f8 fe1a 	bl	800afb6 <HAL_RTC_SetAlarm_IT.constprop.138>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8012382:	4641      	mov	r1, r8
 8012384:	48ad      	ldr	r0, [pc, #692]	; (801263c <main+0x85c>)
 8012386:	f7f8 f90b 	bl	800a5a0 <HAL_RTCEx_SetWakeUpTimer_IT.constprop.156>
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc) != HAL_OK)
 801238a:	f7f8 f8c9 	bl	800a520 <HAL_RTCEx_DeactivateWakeUpTimer.constprop.157>
  hspi1.Instance = SPI1;
 801238e:	4fac      	ldr	r7, [pc, #688]	; (8012640 <main+0x860>)
 8012390:	4bac      	ldr	r3, [pc, #688]	; (8012644 <main+0x864>)
 8012392:	603b      	str	r3, [r7, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8012394:	2382      	movs	r3, #130	; 0x82
 8012396:	005b      	lsls	r3, r3, #1
 8012398:	607b      	str	r3, [r7, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801239a:	4643      	mov	r3, r8
 801239c:	60bb      	str	r3, [r7, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801239e:	23e0      	movs	r3, #224	; 0xe0
 80123a0:	00db      	lsls	r3, r3, #3
 80123a2:	60fb      	str	r3, [r7, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80123a4:	4643      	mov	r3, r8
 80123a6:	613b      	str	r3, [r7, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80123a8:	617b      	str	r3, [r7, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80123aa:	2380      	movs	r3, #128	; 0x80
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	61bb      	str	r3, [r7, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80123b0:	4643      	mov	r3, r8
 80123b2:	61fb      	str	r3, [r7, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80123b4:	623b      	str	r3, [r7, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80123b6:	627b      	str	r3, [r7, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80123b8:	62bb      	str	r3, [r7, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80123ba:	3307      	adds	r3, #7
 80123bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80123be:	4643      	mov	r3, r8
 80123c0:	633b      	str	r3, [r7, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80123c2:	3308      	adds	r3, #8
 80123c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (hspi->State == HAL_SPI_STATE_RESET)
 80123c6:	003b      	movs	r3, r7
 80123c8:	335d      	adds	r3, #93	; 0x5d
 80123ca:	7819      	ldrb	r1, [r3, #0]
 80123cc:	b2c9      	uxtb	r1, r1
 80123ce:	4541      	cmp	r1, r8
 80123d0:	d122      	bne.n	8012418 <main+0x638>
    hspi->Lock = HAL_UNLOCKED;
 80123d2:	003b      	movs	r3, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80123d4:	220c      	movs	r2, #12
 80123d6:	335c      	adds	r3, #92	; 0x5c
 80123d8:	a80e      	add	r0, sp, #56	; 0x38
 80123da:	7019      	strb	r1, [r3, #0]
 80123dc:	f000 fc3e 	bl	8012c5c <memset>
    __HAL_RCC_SPI1_CLK_ENABLE();
 80123e0:	2180      	movs	r1, #128	; 0x80
 80123e2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80123e4:	0149      	lsls	r1, r1, #5
 80123e6:	430a      	orrs	r2, r1
 80123e8:	6432      	str	r2, [r6, #64]	; 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123ea:	464a      	mov	r2, r9
    __HAL_RCC_SPI1_CLK_ENABLE();
 80123ec:	6c33      	ldr	r3, [r6, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80123ee:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80123f0:	400b      	ands	r3, r1
 80123f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80123f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80123f8:	0021      	movs	r1, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80123fa:	4313      	orrs	r3, r2
 80123fc:	6373      	str	r3, [r6, #52]	; 0x34
 80123fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012400:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012402:	4013      	ands	r3, r2
 8012404:	930a      	str	r3, [sp, #40]	; 0x28
 8012406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = A111_SPI_SCK_Pin|A111_SPI_MISO_Pin|A111_SPI_MOSI_Pin;
 8012408:	23e0      	movs	r3, #224	; 0xe0
 801240a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801240c:	3bde      	subs	r3, #222	; 0xde
 801240e:	6063      	str	r3, [r4, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012410:	3301      	adds	r3, #1
 8012412:	60e3      	str	r3, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012414:	f7f9 f97c 	bl	800b710 <HAL_GPIO_Init>
  hspi->State = HAL_SPI_STATE_BUSY;
 8012418:	003b      	movs	r3, r7
 801241a:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 801241c:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 801241e:	335d      	adds	r3, #93	; 0x5d
 8012420:	701a      	strb	r2, [r3, #0]
  __HAL_SPI_DISABLE(hspi);
 8012422:	683a      	ldr	r2, [r7, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012424:	68f8      	ldr	r0, [r7, #12]
  __HAL_SPI_DISABLE(hspi);
 8012426:	6813      	ldr	r3, [r2, #0]
 8012428:	438b      	bics	r3, r1
 801242a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801242c:	23e0      	movs	r3, #224	; 0xe0
 801242e:	00db      	lsls	r3, r3, #3
 8012430:	4298      	cmp	r0, r3
 8012432:	d900      	bls.n	8012436 <main+0x656>
 8012434:	e17c      	b.n	8012730 <main+0x950>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012436:	2480      	movs	r4, #128	; 0x80
 8012438:	0164      	lsls	r4, r4, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801243a:	4298      	cmp	r0, r3
 801243c:	d001      	beq.n	8012442 <main+0x662>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801243e:	2300      	movs	r3, #0
 8012440:	62bb      	str	r3, [r7, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	2b00      	cmp	r3, #0
 8012446:	d106      	bne.n	8012456 <main+0x676>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012448:	23e0      	movs	r3, #224	; 0xe0
 801244a:	00db      	lsls	r3, r3, #3
 801244c:	4298      	cmp	r0, r3
 801244e:	d800      	bhi.n	8012452 <main+0x672>
 8012450:	e0cb      	b.n	80125ea <main+0x80a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8012452:	2302      	movs	r3, #2
 8012454:	633b      	str	r3, [r7, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8012456:	68be      	ldr	r6, [r7, #8]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	69b9      	ldr	r1, [r7, #24]
 801245c:	4333      	orrs	r3, r6
 801245e:	693e      	ldr	r6, [r7, #16]
 8012460:	4333      	orrs	r3, r6
 8012462:	697e      	ldr	r6, [r7, #20]
 8012464:	4333      	orrs	r3, r6
 8012466:	69fe      	ldr	r6, [r7, #28]
 8012468:	4333      	orrs	r3, r6
 801246a:	6a3e      	ldr	r6, [r7, #32]
 801246c:	4333      	orrs	r3, r6
 801246e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8012470:	4333      	orrs	r3, r6
 8012472:	2680      	movs	r6, #128	; 0x80
 8012474:	00b6      	lsls	r6, r6, #2
 8012476:	400e      	ands	r6, r1
 8012478:	4333      	orrs	r3, r6
 801247a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	0c09      	lsrs	r1, r1, #16
 8012480:	4318      	orrs	r0, r3
 8012482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012484:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8012486:	4318      	orrs	r0, r3
 8012488:	2304      	movs	r3, #4
 801248a:	4019      	ands	r1, r3
 801248c:	4301      	orrs	r1, r0
 801248e:	430c      	orrs	r4, r1
 8012490:	6054      	str	r4, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012492:	69d3      	ldr	r3, [r2, #28]
 8012494:	496c      	ldr	r1, [pc, #432]	; (8012648 <main+0x868>)
  MX_USART1_UART_Init(115200);
 8012496:	20e1      	movs	r0, #225	; 0xe1
 8012498:	400b      	ands	r3, r1
 801249a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 801249c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801249e:	663e      	str	r6, [r7, #96]	; 0x60
 80124a0:	0240      	lsls	r0, r0, #9
  hspi->State     = HAL_SPI_STATE_READY;
 80124a2:	375d      	adds	r7, #93	; 0x5d
 80124a4:	703b      	strb	r3, [r7, #0]
 80124a6:	469a      	mov	sl, r3
 80124a8:	f7ef f846 	bl	8001538 <MX_USART1_UART_Init>
  huart2.Instance = USART2;
 80124ac:	4c67      	ldr	r4, [pc, #412]	; (801264c <main+0x86c>)
 80124ae:	4b68      	ldr	r3, [pc, #416]	; (8012650 <main+0x870>)
  __HAL_LOCK(huart);
 80124b0:	0027      	movs	r7, r4
 80124b2:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 921600;
 80124b4:	23e1      	movs	r3, #225	; 0xe1
 80124b6:	031b      	lsls	r3, r3, #12
 80124b8:	6063      	str	r3, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80124ba:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80124bc:	0020      	movs	r0, r4
 80124be:	377c      	adds	r7, #124	; 0x7c
  huart2.Init.Mode = UART_MODE_TX_RX;
 80124c0:	6163      	str	r3, [r4, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80124c2:	60a6      	str	r6, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80124c4:	60e6      	str	r6, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80124c6:	6126      	str	r6, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80124c8:	61a6      	str	r6, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80124ca:	61e6      	str	r6, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80124cc:	6226      	str	r6, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80124ce:	6266      	str	r6, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80124d0:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80124d2:	f7f9 f9ff 	bl	800b8d4 <HAL_UART_Init.constprop.103>
 80124d6:	783b      	ldrb	r3, [r7, #0]
 80124d8:	4553      	cmp	r3, sl
 80124da:	d01b      	beq.n	8012514 <main+0x734>
 80124dc:	4653      	mov	r3, sl
 80124de:	703b      	strb	r3, [r7, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80124e0:	1d23      	adds	r3, r4, #4
 80124e2:	4698      	mov	r8, r3
 80124e4:	2324      	movs	r3, #36	; 0x24
 80124e6:	4642      	mov	r2, r8
  __HAL_UART_DISABLE(huart);
 80124e8:	4651      	mov	r1, sl
  huart->gState = HAL_UART_STATE_BUSY;
 80124ea:	67d3      	str	r3, [r2, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80124ec:	6822      	ldr	r2, [r4, #0]
  UARTEx_SetNbDataToProcess(huart);
 80124ee:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80124f0:	6813      	ldr	r3, [r2, #0]
 80124f2:	4699      	mov	r9, r3
  __HAL_UART_DISABLE(huart);
 80124f4:	6813      	ldr	r3, [r2, #0]
 80124f6:	438b      	bics	r3, r1
 80124f8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80124fa:	6893      	ldr	r3, [r2, #8]
 80124fc:	00db      	lsls	r3, r3, #3
 80124fe:	08db      	lsrs	r3, r3, #3
 8012500:	6093      	str	r3, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8012502:	f7f8 fc87 	bl	800ae14 <UARTEx_SetNbDataToProcess.lto_priv.680>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012506:	464a      	mov	r2, r9
 8012508:	6823      	ldr	r3, [r4, #0]
 801250a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 801250c:	2320      	movs	r3, #32
 801250e:	4642      	mov	r2, r8
  __HAL_UNLOCK(huart);
 8012510:	703e      	strb	r6, [r7, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012512:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_LOCK(huart);
 8012514:	0026      	movs	r6, r4
 8012516:	367c      	adds	r6, #124	; 0x7c
 8012518:	7833      	ldrb	r3, [r6, #0]
 801251a:	2b01      	cmp	r3, #1
 801251c:	d018      	beq.n	8012550 <main+0x770>
  huart->gState = HAL_UART_STATE_BUSY;
 801251e:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8012520:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8012522:	1d27      	adds	r7, r4, #4
 8012524:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012526:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(huart);
 8012528:	7031      	strb	r1, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801252a:	681a      	ldr	r2, [r3, #0]
  UARTEx_SetNbDataToProcess(huart);
 801252c:	0020      	movs	r0, r4
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801252e:	4690      	mov	r8, r2
  __HAL_UART_DISABLE(huart);
 8012530:	681a      	ldr	r2, [r3, #0]
 8012532:	438a      	bics	r2, r1
 8012534:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012536:	689a      	ldr	r2, [r3, #8]
 8012538:	4946      	ldr	r1, [pc, #280]	; (8012654 <main+0x874>)
 801253a:	400a      	ands	r2, r1
 801253c:	609a      	str	r2, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 801253e:	f7f8 fc69 	bl	800ae14 <UARTEx_SetNbDataToProcess.lto_priv.680>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012542:	4642      	mov	r2, r8
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8012548:	2320      	movs	r3, #32
 801254a:	67fb      	str	r3, [r7, #124]	; 0x7c
  __HAL_UNLOCK(huart);
 801254c:	2300      	movs	r3, #0
 801254e:	7033      	strb	r3, [r6, #0]
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8012550:	0020      	movs	r0, r4
 8012552:	f7f8 fc93 	bl	800ae7c <HAL_UARTEx_DisableFifoMode>
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
  }
  else
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8012556:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8012558:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 801255a:	6a2b      	ldr	r3, [r5, #32]
  *         @ref FLASH_OB_USER_INPUT_RESET_HOLDER(*)
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
  uint32_t user = ((FLASH->OPTR & ~FLASH_OPTR_RDP) & OB_USER_ALL);
 801255c:	6a2c      	ldr	r4, [r5, #32]
  */
static void FLASH_OB_GetPCROP1A(uint32_t *PCROPConfig, uint32_t *PCROP1AStartAddr, uint32_t *PCROP1AEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1ASR & FLASH_PCROP1ASR_PCROP1A_STRT);
 801255e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  *PCROP1AStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1AStartAddr += FLASH_BASE;

  pcrop = FLASH->PCROP1AER;
 8012560:	6aab      	ldr	r3, [r5, #40]	; 0x28
  */
static void FLASH_OB_GetPCROP1B(uint32_t *PCROP1BStartAddr, uint32_t *PCROP1BEndAddr)
{
  uint32_t pcrop;

  pcrop = (FLASH->PCROP1BSR & FLASH_PCROP1BSR_PCROP1B_STRT);
 8012562:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  *PCROP1BStartAddr = (pcrop << FLASH_PCROP_GRANULARITY_OFFSET);
  *PCROP1BStartAddr += FLASH_BASE;

  pcrop = (FLASH->PCROP1BER & FLASH_PCROP1BER_PCROP1B_END);
 8012564:	6bab      	ldr	r3, [r5, #56]	; 0x38
  *         beginning of the Flash (page 0).
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t *BootEntry, uint32_t *SecSize)
{
  uint32_t secmem = FLASH->SECR;
 8012566:	4b3c      	ldr	r3, [pc, #240]	; (8012658 <main+0x878>)
  if (((obInit.USERConfig & OB_USER_nBOOT1) == OB_BOOT1_SYSTEM) &&
 8012568:	20c0      	movs	r0, #192	; 0xc0
 801256a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801256c:	2380      	movs	r3, #128	; 0x80
 801256e:	0480      	lsls	r0, r0, #18
 8012570:	4020      	ands	r0, r4
 8012572:	049b      	lsls	r3, r3, #18
 8012574:	4298      	cmp	r0, r3
 8012576:	d13b      	bne.n	80125f0 <main+0x810>
    printf("Boot config OK\n");
 8012578:	4838      	ldr	r0, [pc, #224]	; (801265c <main+0x87c>)
 801257a:	f002 fbb1 	bl	8014ce0 <__wrap_puts>
  return uwTick;
 801257e:	4a38      	ldr	r2, [pc, #224]	; (8012660 <main+0x880>)
 8012580:	6811      	ldr	r1, [r2, #0]
 8012582:	6813      	ldr	r3, [r2, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8012584:	1a5b      	subs	r3, r3, r1
 8012586:	2b0a      	cmp	r3, #10
 8012588:	d9fb      	bls.n	8012582 <main+0x7a2>
    if((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 801258a:	2780      	movs	r7, #128	; 0x80
    RegInt_Init();
 801258c:	f7f1 f938 	bl	8003800 <RegInt_Init>
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8012590:	2602      	movs	r6, #2
    initRSS();
 8012592:	f7ee fdcb 	bl	800112c <initRSS>
 8012596:	00bf      	lsls	r7, r7, #2
	if (uart_state != 4){return;}
 8012598:	465b      	mov	r3, fp
 801259a:	3348      	adds	r3, #72	; 0x48
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	2b04      	cmp	r3, #4
 80125a0:	d101      	bne.n	80125a6 <main+0x7c6>
 80125a2:	f7f1 fb25 	bl	8003bf0 <RegInt_parsecmd.part.9>
 80125a6:	4c2f      	ldr	r4, [pc, #188]	; (8012664 <main+0x884>)
 80125a8:	4d2f      	ldr	r5, [pc, #188]	; (8012668 <main+0x888>)
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	46a8      	mov	r8, r5
 80125ae:	43b3      	bics	r3, r6
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	696b      	ldr	r3, [r5, #20]
 80125b4:	423b      	tst	r3, r7
 80125b6:	d000      	beq.n	80125ba <main+0x7da>
 80125b8:	e0a4      	b.n	8012704 <main+0x924>
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80125ba:	2104      	movs	r1, #4
 80125bc:	4a2b      	ldr	r2, [pc, #172]	; (801266c <main+0x88c>)
 80125be:	6913      	ldr	r3, [r2, #16]
 80125c0:	438b      	bics	r3, r1
 80125c2:	6113      	str	r3, [r2, #16]
    __SEV();
 80125c4:	bf40      	sev
    __WFE();
 80125c6:	bf20      	wfe
    __WFE();
 80125c8:	bf20      	wfe
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	4333      	orrs	r3, r6
 80125ce:	6023      	str	r3, [r4, #0]
 80125d0:	e7e2      	b.n	8012598 <main+0x7b8>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80125d2:	2184      	movs	r1, #132	; 0x84
 80125d4:	4667      	mov	r7, ip
 80125d6:	0209      	lsls	r1, r1, #8
 80125d8:	4339      	orrs	r1, r7
 80125da:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80125dc:	2802      	cmp	r0, #2
 80125de:	d000      	beq.n	80125e2 <main+0x802>
 80125e0:	e52b      	b.n	801203a <main+0x25a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80125e2:	2180      	movs	r1, #128	; 0x80
 80125e4:	0109      	lsls	r1, r1, #4
 80125e6:	6059      	str	r1, [r3, #4]
 80125e8:	e527      	b.n	801203a <main+0x25a>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80125ea:	2301      	movs	r3, #1
 80125ec:	633b      	str	r3, [r7, #48]	; 0x30
 80125ee:	e732      	b.n	8012456 <main+0x676>
  printf("Enabling BOOT0\n");
 80125f0:	481f      	ldr	r0, [pc, #124]	; (8012670 <main+0x890>)
 80125f2:	f002 fb75 	bl	8014ce0 <__wrap_puts>
  obInit.USERConfig &= ~OB_USER_nBOOT_SEL;
 80125f6:	491f      	ldr	r1, [pc, #124]	; (8012674 <main+0x894>)
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80125f8:	696b      	ldr	r3, [r5, #20]
 80125fa:	4021      	ands	r1, r4
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	db0b      	blt.n	8012618 <main+0x838>
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00U)
 8012600:	2480      	movs	r4, #128	; 0x80
 8012602:	696b      	ldr	r3, [r5, #20]
 8012604:	05e4      	lsls	r4, r4, #23
 8012606:	4223      	tst	r3, r4
 8012608:	d13c      	bne.n	8012684 <main+0x8a4>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801260a:	2380      	movs	r3, #128	; 0x80
 801260c:	696a      	ldr	r2, [r5, #20]
 801260e:	061b      	lsls	r3, r3, #24
 8012610:	4313      	orrs	r3, r2
 8012612:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8012614:	696b      	ldr	r3, [r5, #20]
 8012616:	e006      	b.n	8012626 <main+0x846>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8012618:	4b17      	ldr	r3, [pc, #92]	; (8012678 <main+0x898>)
 801261a:	60ab      	str	r3, [r5, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801261c:	4b17      	ldr	r3, [pc, #92]	; (801267c <main+0x89c>)
 801261e:	60ab      	str	r3, [r5, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8012620:	696b      	ldr	r3, [r5, #20]
 8012622:	2b00      	cmp	r3, #0
 8012624:	daec      	bge.n	8012600 <main+0x820>
  printf("BOOT0 enable failed\n");
 8012626:	4816      	ldr	r0, [pc, #88]	; (8012680 <main+0x8a0>)
 8012628:	f002 fb5a 	bl	8014ce0 <__wrap_puts>
 801262c:	e7a7      	b.n	801257e <main+0x79e>
 801262e:	46c0      	nop			; (mov r8, r8)
 8012630:	007f7f7f 	.word	0x007f7f7f
 8012634:	fffbffff 	.word	0xfffbffff
 8012638:	00ffff3f 	.word	0x00ffff3f
 801263c:	0000ffff 	.word	0x0000ffff
 8012640:	200002f0 	.word	0x200002f0
 8012644:	40013000 	.word	0x40013000
 8012648:	fffff7ff 	.word	0xfffff7ff
 801264c:	2000063c 	.word	0x2000063c
 8012650:	40004400 	.word	0x40004400
 8012654:	f1ffffff 	.word	0xf1ffffff
 8012658:	40022004 	.word	0x40022004
 801265c:	0801bc4e 	.word	0x0801bc4e
 8012660:	200002b4 	.word	0x200002b4
 8012664:	e000e010 	.word	0xe000e010
 8012668:	40007000 	.word	0x40007000
 801266c:	e000ed00 	.word	0xe000ed00
 8012670:	0801bc5d 	.word	0x0801bc5d
 8012674:	3c4fff00 	.word	0x3c4fff00
 8012678:	45670123 	.word	0x45670123
 801267c:	cdef89ab 	.word	0xcdef89ab
 8012680:	0801bc7d 	.word	0x0801bc7d
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8012684:	4b2e      	ldr	r3, [pc, #184]	; (8012740 <main+0x960>)
 8012686:	60eb      	str	r3, [r5, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8012688:	4b2e      	ldr	r3, [pc, #184]	; (8012744 <main+0x964>)
 801268a:	60eb      	str	r3, [r5, #12]
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) == 0x00U)
 801268c:	6968      	ldr	r0, [r5, #20]
 801268e:	4020      	ands	r0, r4
 8012690:	d1bb      	bne.n	801260a <main+0x82a>
  __HAL_LOCK(&pFlash);
 8012692:	4c2d      	ldr	r4, [pc, #180]	; (8012748 <main+0x968>)
 8012694:	7823      	ldrb	r3, [r4, #0]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d02d      	beq.n	80126f6 <main+0x916>
 801269a:	2301      	movs	r3, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801269c:	6060      	str	r0, [r4, #4]
  __HAL_LOCK(&pFlash);
 801269e:	7023      	strb	r3, [r4, #0]
  uint32_t rdplvl = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80126a0:	6a2b      	ldr	r3, [r5, #32]
 80126a2:	b2db      	uxtb	r3, r3
  if ((rdplvl != OB_RDP_LEVEL_0) && (rdplvl != OB_RDP_LEVEL_2))
 80126a4:	2baa      	cmp	r3, #170	; 0xaa
 80126a6:	d002      	beq.n	80126ae <main+0x8ce>
 80126a8:	2bcc      	cmp	r3, #204	; 0xcc
 80126aa:	d000      	beq.n	80126ae <main+0x8ce>
    return (OB_RDP_LEVEL_1);
 80126ac:	23bb      	movs	r3, #187	; 0xbb
  optr = FLASH->OPTR;
 80126ae:	6a2a      	ldr	r2, [r5, #32]
  optr &= ~(UserType | FLASH_OPTR_RDP);
 80126b0:	4826      	ldr	r0, [pc, #152]	; (801274c <main+0x96c>)
 80126b2:	4002      	ands	r2, r0
  FLASH->OPTR = (optr | UserConfig | RDPLevel);
 80126b4:	4311      	orrs	r1, r2
 80126b6:	2280      	movs	r2, #128	; 0x80
 80126b8:	0492      	lsls	r2, r2, #18
 80126ba:	430a      	orrs	r2, r1
 80126bc:	4313      	orrs	r3, r2
 80126be:	622b      	str	r3, [r5, #32]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80126c0:	f7f8 f914 	bl	800a8ec <FLASH_WaitForLastOperation.constprop.101>
  if (status == HAL_OK)
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d10a      	bne.n	80126de <main+0x8fe>
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80126c8:	2380      	movs	r3, #128	; 0x80
 80126ca:	696a      	ldr	r2, [r5, #20]
 80126cc:	029b      	lsls	r3, r3, #10
 80126ce:	4313      	orrs	r3, r2
 80126d0:	616b      	str	r3, [r5, #20]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80126d2:	f7f8 f90b 	bl	800a8ec <FLASH_WaitForLastOperation.constprop.101>
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80126d6:	696b      	ldr	r3, [r5, #20]
 80126d8:	4a1d      	ldr	r2, [pc, #116]	; (8012750 <main+0x970>)
 80126da:	4013      	ands	r3, r2
 80126dc:	616b      	str	r3, [r5, #20]
  __HAL_UNLOCK(&pFlash);
 80126de:	2300      	movs	r3, #0
 80126e0:	7023      	strb	r3, [r4, #0]
      if (result == HAL_OK)
 80126e2:	4298      	cmp	r0, r3
 80126e4:	d107      	bne.n	80126f6 <main+0x916>
        printf("Reset and reload\n");
 80126e6:	481b      	ldr	r0, [pc, #108]	; (8012754 <main+0x974>)
 80126e8:	f002 fafa 	bl	8014ce0 <__wrap_puts>
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80126ec:	2380      	movs	r3, #128	; 0x80
 80126ee:	696a      	ldr	r2, [r5, #20]
 80126f0:	051b      	lsls	r3, r3, #20
 80126f2:	4313      	orrs	r3, r2
 80126f4:	616b      	str	r3, [r5, #20]
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 80126f6:	2380      	movs	r3, #128	; 0x80
 80126f8:	696a      	ldr	r2, [r5, #20]
 80126fa:	05db      	lsls	r3, r3, #23
 80126fc:	4313      	orrs	r3, r2
 80126fe:	616b      	str	r3, [r5, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0x00u)
 8012700:	696b      	ldr	r3, [r5, #20]
 8012702:	e782      	b.n	801260a <main+0x82a>
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8012704:	4b14      	ldr	r3, [pc, #80]	; (8012758 <main+0x978>)
 8012706:	4915      	ldr	r1, [pc, #84]	; (801275c <main+0x97c>)
 8012708:	6818      	ldr	r0, [r3, #0]
 801270a:	2306      	movs	r3, #6
 801270c:	4358      	muls	r0, r3
 801270e:	f7fc fa11 	bl	800eb34 <__udivsi3>

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8012712:	682b      	ldr	r3, [r5, #0]
 8012714:	4a12      	ldr	r2, [pc, #72]	; (8012760 <main+0x980>)
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8012716:	3001      	adds	r0, #1
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8012718:	4013      	ands	r3, r2
 801271a:	602b      	str	r3, [r5, #0]

  /* Wait until REGLPF is reset */
  while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 801271c:	4643      	mov	r3, r8
 801271e:	695b      	ldr	r3, [r3, #20]
 8012720:	423b      	tst	r3, r7
 8012722:	d100      	bne.n	8012726 <main+0x946>
 8012724:	e749      	b.n	80125ba <main+0x7da>
  {
    if(wait_loop_index != 0U)
 8012726:	2800      	cmp	r0, #0
 8012728:	d100      	bne.n	801272c <main+0x94c>
 801272a:	e74e      	b.n	80125ca <main+0x7ea>
    {
      wait_loop_index--;
 801272c:	3801      	subs	r0, #1
 801272e:	e7f5      	b.n	801271c <main+0x93c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012730:	23f0      	movs	r3, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012732:	2400      	movs	r4, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012734:	011b      	lsls	r3, r3, #4
 8012736:	4298      	cmp	r0, r3
 8012738:	d000      	beq.n	801273c <main+0x95c>
 801273a:	e680      	b.n	801243e <main+0x65e>
 801273c:	e681      	b.n	8012442 <main+0x662>
 801273e:	46c0      	nop			; (mov r8, r8)
 8012740:	08192a3b 	.word	0x08192a3b
 8012744:	4c5d6e7f 	.word	0x4c5d6e7f
 8012748:	20000358 	.word	0x20000358
 801274c:	c0b00000 	.word	0xc0b00000
 8012750:	fffdffff 	.word	0xfffdffff
 8012754:	0801bc6c 	.word	0x0801bc6c
 8012758:	20000000 	.word	0x20000000
 801275c:	000f4240 	.word	0x000f4240
 8012760:	ffffbfff 	.word	0xffffbfff

08012764 <_write>:
extern UART_HandleTypeDef DEBUG_UART_HANDLE;

int _write(int file, char *ptr, int len);

int _write(int file, char *ptr, int len)
{
 8012764:	b510      	push	{r4, lr}
 8012766:	0014      	movs	r4, r2
	(void)file;
	HAL_UART_Transmit(&DEBUG_UART_HANDLE, (uint8_t*)ptr, len, 0xFFFF);
 8012768:	4b03      	ldr	r3, [pc, #12]	; (8012778 <_write+0x14>)
 801276a:	b292      	uxth	r2, r2
 801276c:	4803      	ldr	r0, [pc, #12]	; (801277c <_write+0x18>)
 801276e:	f7f8 fba1 	bl	800aeb4 <HAL_UART_Transmit>
	return len;
}
 8012772:	0020      	movs	r0, r4
 8012774:	bd10      	pop	{r4, pc}
 8012776:	46c0      	nop			; (mov r8, r8)
 8012778:	0000ffff 	.word	0x0000ffff
 801277c:	2000063c 	.word	0x2000063c

08012780 <Reset_Handler>:
 8012780:	480d      	ldr	r0, [pc, #52]	; (80127b8 <LoopForever+0x2>)
 8012782:	4685      	mov	sp, r0
 8012784:	2100      	movs	r1, #0
 8012786:	e003      	b.n	8012790 <LoopCopyDataInit>

08012788 <CopyDataInit>:
 8012788:	4b0c      	ldr	r3, [pc, #48]	; (80127bc <LoopForever+0x6>)
 801278a:	585b      	ldr	r3, [r3, r1]
 801278c:	5043      	str	r3, [r0, r1]
 801278e:	3104      	adds	r1, #4

08012790 <LoopCopyDataInit>:
 8012790:	480b      	ldr	r0, [pc, #44]	; (80127c0 <LoopForever+0xa>)
 8012792:	4b0c      	ldr	r3, [pc, #48]	; (80127c4 <LoopForever+0xe>)
 8012794:	1842      	adds	r2, r0, r1
 8012796:	429a      	cmp	r2, r3
 8012798:	d3f6      	bcc.n	8012788 <CopyDataInit>
 801279a:	4a0b      	ldr	r2, [pc, #44]	; (80127c8 <LoopForever+0x12>)
 801279c:	e002      	b.n	80127a4 <LoopFillZerobss>

0801279e <FillZerobss>:
 801279e:	2300      	movs	r3, #0
 80127a0:	6013      	str	r3, [r2, #0]
 80127a2:	3204      	adds	r2, #4

080127a4 <LoopFillZerobss>:
 80127a4:	4b09      	ldr	r3, [pc, #36]	; (80127cc <LoopForever+0x16>)
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d3f9      	bcc.n	801279e <FillZerobss>
 80127aa:	f7f1 f89d 	bl	80038e8 <SystemInit>
 80127ae:	f000 fa31 	bl	8012c14 <__libc_init_array>
 80127b2:	f7ff fb15 	bl	8011de0 <main>

080127b6 <LoopForever>:
 80127b6:	e7fe      	b.n	80127b6 <LoopForever>
 80127b8:	20009000 	.word	0x20009000
 80127bc:	0801e560 	.word	0x0801e560
 80127c0:	20000000 	.word	0x20000000
 80127c4:	20000070 	.word	0x20000070
 80127c8:	20000070 	.word	0x20000070
 80127cc:	200006cc 	.word	0x200006cc

080127d0 <ADC1_COMP_IRQHandler>:
 80127d0:	e7fe      	b.n	80127d0 <ADC1_COMP_IRQHandler>
	...

080127d4 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80127d4:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <_sbrk+0x30>)
 80127d6:	490c      	ldr	r1, [pc, #48]	; (8012808 <_sbrk+0x34>)
{
 80127d8:	0002      	movs	r2, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80127da:	1ac9      	subs	r1, r1, r3
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80127dc:	4b0b      	ldr	r3, [pc, #44]	; (801280c <_sbrk+0x38>)
{
 80127de:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80127e0:	6818      	ldr	r0, [r3, #0]
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d101      	bne.n	80127ea <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 80127e6:	480a      	ldr	r0, [pc, #40]	; (8012810 <_sbrk+0x3c>)
 80127e8:	6018      	str	r0, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	1882      	adds	r2, r0, r2
 80127ee:	428a      	cmp	r2, r1
 80127f0:	d906      	bls.n	8012800 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 80127f2:	f000 f869 	bl	80128c8 <__errno>
 80127f6:	230c      	movs	r3, #12
 80127f8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80127fa:	2001      	movs	r0, #1
 80127fc:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80127fe:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8012800:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8012802:	e7fc      	b.n	80127fe <_sbrk+0x2a>
 8012804:	00001400 	.word	0x00001400
 8012808:	20009000 	.word	0x20009000
 801280c:	20000630 	.word	0x20000630
 8012810:	200006d0 	.word	0x200006d0

08012814 <__ieee754_sqrtf>:
 8012814:	492a      	ldr	r1, [pc, #168]	; (80128c0 <__ieee754_sqrtf+0xac>)
 8012816:	0043      	lsls	r3, r0, #1
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	0002      	movs	r2, r0
 801281c:	1c04      	adds	r4, r0, #0
 801281e:	085b      	lsrs	r3, r3, #1
 8012820:	428b      	cmp	r3, r1
 8012822:	d83b      	bhi.n	801289c <__ieee754_sqrtf+0x88>
 8012824:	2b00      	cmp	r3, #0
 8012826:	d038      	beq.n	801289a <__ieee754_sqrtf+0x86>
 8012828:	2800      	cmp	r0, #0
 801282a:	db3e      	blt.n	80128aa <__ieee754_sqrtf+0x96>
 801282c:	4925      	ldr	r1, [pc, #148]	; (80128c4 <__ieee754_sqrtf+0xb0>)
 801282e:	15c6      	asrs	r6, r0, #23
 8012830:	428b      	cmp	r3, r1
 8012832:	d80b      	bhi.n	801284c <__ieee754_sqrtf+0x38>
 8012834:	2080      	movs	r0, #128	; 0x80
 8012836:	0400      	lsls	r0, r0, #16
 8012838:	4220      	tst	r0, r4
 801283a:	d13d      	bne.n	80128b8 <__ieee754_sqrtf+0xa4>
 801283c:	2300      	movs	r3, #0
 801283e:	e000      	b.n	8012842 <__ieee754_sqrtf+0x2e>
 8012840:	000b      	movs	r3, r1
 8012842:	0052      	lsls	r2, r2, #1
 8012844:	1c59      	adds	r1, r3, #1
 8012846:	4202      	tst	r2, r0
 8012848:	d0fa      	beq.n	8012840 <__ieee754_sqrtf+0x2c>
 801284a:	1af6      	subs	r6, r6, r3
 801284c:	2380      	movs	r3, #128	; 0x80
 801284e:	0252      	lsls	r2, r2, #9
 8012850:	041b      	lsls	r3, r3, #16
 8012852:	0a52      	lsrs	r2, r2, #9
 8012854:	431a      	orrs	r2, r3
 8012856:	3e7f      	subs	r6, #127	; 0x7f
 8012858:	0053      	lsls	r3, r2, #1
 801285a:	07f1      	lsls	r1, r6, #31
 801285c:	d500      	bpl.n	8012860 <__ieee754_sqrtf+0x4c>
 801285e:	0093      	lsls	r3, r2, #2
 8012860:	2280      	movs	r2, #128	; 0x80
 8012862:	1070      	asrs	r0, r6, #1
 8012864:	2119      	movs	r1, #25
 8012866:	2600      	movs	r6, #0
 8012868:	2500      	movs	r5, #0
 801286a:	0452      	lsls	r2, r2, #17
 801286c:	18ac      	adds	r4, r5, r2
 801286e:	429c      	cmp	r4, r3
 8012870:	dc02      	bgt.n	8012878 <__ieee754_sqrtf+0x64>
 8012872:	18a5      	adds	r5, r4, r2
 8012874:	1b1b      	subs	r3, r3, r4
 8012876:	18b6      	adds	r6, r6, r2
 8012878:	3901      	subs	r1, #1
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	0852      	lsrs	r2, r2, #1
 801287e:	2900      	cmp	r1, #0
 8012880:	d1f4      	bne.n	801286c <__ieee754_sqrtf+0x58>
 8012882:	2b00      	cmp	r3, #0
 8012884:	d002      	beq.n	801288c <__ieee754_sqrtf+0x78>
 8012886:	2301      	movs	r3, #1
 8012888:	3601      	adds	r6, #1
 801288a:	439e      	bics	r6, r3
 801288c:	23fc      	movs	r3, #252	; 0xfc
 801288e:	059b      	lsls	r3, r3, #22
 8012890:	469c      	mov	ip, r3
 8012892:	1076      	asrs	r6, r6, #1
 8012894:	4466      	add	r6, ip
 8012896:	05c0      	lsls	r0, r0, #23
 8012898:	1980      	adds	r0, r0, r6
 801289a:	bd70      	pop	{r4, r5, r6, pc}
 801289c:	1c01      	adds	r1, r0, #0
 801289e:	f7fb fe17 	bl	800e4d0 <__aeabi_fmul>
 80128a2:	1c21      	adds	r1, r4, #0
 80128a4:	f7fb fb68 	bl	800df78 <__aeabi_fadd>
 80128a8:	e7f7      	b.n	801289a <__ieee754_sqrtf+0x86>
 80128aa:	1c01      	adds	r1, r0, #0
 80128ac:	f7fb ff42 	bl	800e734 <__aeabi_fsub>
 80128b0:	1c01      	adds	r1, r0, #0
 80128b2:	f7fb fcfb 	bl	800e2ac <__aeabi_fdiv>
 80128b6:	e7f0      	b.n	801289a <__ieee754_sqrtf+0x86>
 80128b8:	2301      	movs	r3, #1
 80128ba:	425b      	negs	r3, r3
 80128bc:	e7c5      	b.n	801284a <__ieee754_sqrtf+0x36>
 80128be:	46c0      	nop			; (mov r8, r8)
 80128c0:	7f7fffff 	.word	0x7f7fffff
 80128c4:	007fffff 	.word	0x007fffff

080128c8 <__errno>:
 80128c8:	4b01      	ldr	r3, [pc, #4]	; (80128d0 <__errno+0x8>)
 80128ca:	6818      	ldr	r0, [r3, #0]
 80128cc:	4770      	bx	lr
 80128ce:	46c0      	nop			; (mov r8, r8)
 80128d0:	20000008 	.word	0x20000008

080128d4 <__sflush_r>:
 80128d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128d6:	898a      	ldrh	r2, [r1, #12]
 80128d8:	0005      	movs	r5, r0
 80128da:	000c      	movs	r4, r1
 80128dc:	0713      	lsls	r3, r2, #28
 80128de:	d460      	bmi.n	80129a2 <__sflush_r+0xce>
 80128e0:	684b      	ldr	r3, [r1, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	dc04      	bgt.n	80128f0 <__sflush_r+0x1c>
 80128e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	dc01      	bgt.n	80128f0 <__sflush_r+0x1c>
 80128ec:	2000      	movs	r0, #0
 80128ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80128f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80128f2:	2f00      	cmp	r7, #0
 80128f4:	d0fa      	beq.n	80128ec <__sflush_r+0x18>
 80128f6:	2300      	movs	r3, #0
 80128f8:	682e      	ldr	r6, [r5, #0]
 80128fa:	602b      	str	r3, [r5, #0]
 80128fc:	2380      	movs	r3, #128	; 0x80
 80128fe:	015b      	lsls	r3, r3, #5
 8012900:	6a21      	ldr	r1, [r4, #32]
 8012902:	401a      	ands	r2, r3
 8012904:	d034      	beq.n	8012970 <__sflush_r+0x9c>
 8012906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012908:	89a3      	ldrh	r3, [r4, #12]
 801290a:	075b      	lsls	r3, r3, #29
 801290c:	d506      	bpl.n	801291c <__sflush_r+0x48>
 801290e:	6863      	ldr	r3, [r4, #4]
 8012910:	1ac0      	subs	r0, r0, r3
 8012912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012914:	2b00      	cmp	r3, #0
 8012916:	d001      	beq.n	801291c <__sflush_r+0x48>
 8012918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801291a:	1ac0      	subs	r0, r0, r3
 801291c:	0002      	movs	r2, r0
 801291e:	6a21      	ldr	r1, [r4, #32]
 8012920:	2300      	movs	r3, #0
 8012922:	0028      	movs	r0, r5
 8012924:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8012926:	47b8      	blx	r7
 8012928:	89a1      	ldrh	r1, [r4, #12]
 801292a:	1c43      	adds	r3, r0, #1
 801292c:	d106      	bne.n	801293c <__sflush_r+0x68>
 801292e:	682b      	ldr	r3, [r5, #0]
 8012930:	2b1d      	cmp	r3, #29
 8012932:	d830      	bhi.n	8012996 <__sflush_r+0xc2>
 8012934:	4a2b      	ldr	r2, [pc, #172]	; (80129e4 <__sflush_r+0x110>)
 8012936:	40da      	lsrs	r2, r3
 8012938:	07d3      	lsls	r3, r2, #31
 801293a:	d52c      	bpl.n	8012996 <__sflush_r+0xc2>
 801293c:	2300      	movs	r3, #0
 801293e:	6063      	str	r3, [r4, #4]
 8012940:	6923      	ldr	r3, [r4, #16]
 8012942:	6023      	str	r3, [r4, #0]
 8012944:	04cb      	lsls	r3, r1, #19
 8012946:	d505      	bpl.n	8012954 <__sflush_r+0x80>
 8012948:	1c43      	adds	r3, r0, #1
 801294a:	d102      	bne.n	8012952 <__sflush_r+0x7e>
 801294c:	682b      	ldr	r3, [r5, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d100      	bne.n	8012954 <__sflush_r+0x80>
 8012952:	6560      	str	r0, [r4, #84]	; 0x54
 8012954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012956:	602e      	str	r6, [r5, #0]
 8012958:	2900      	cmp	r1, #0
 801295a:	d0c7      	beq.n	80128ec <__sflush_r+0x18>
 801295c:	0023      	movs	r3, r4
 801295e:	3344      	adds	r3, #68	; 0x44
 8012960:	4299      	cmp	r1, r3
 8012962:	d002      	beq.n	801296a <__sflush_r+0x96>
 8012964:	0028      	movs	r0, r5
 8012966:	f000 f981 	bl	8012c6c <_free_r>
 801296a:	2000      	movs	r0, #0
 801296c:	6360      	str	r0, [r4, #52]	; 0x34
 801296e:	e7be      	b.n	80128ee <__sflush_r+0x1a>
 8012970:	2301      	movs	r3, #1
 8012972:	0028      	movs	r0, r5
 8012974:	47b8      	blx	r7
 8012976:	1c43      	adds	r3, r0, #1
 8012978:	d1c6      	bne.n	8012908 <__sflush_r+0x34>
 801297a:	682b      	ldr	r3, [r5, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d0c3      	beq.n	8012908 <__sflush_r+0x34>
 8012980:	2b1d      	cmp	r3, #29
 8012982:	d001      	beq.n	8012988 <__sflush_r+0xb4>
 8012984:	2b16      	cmp	r3, #22
 8012986:	d101      	bne.n	801298c <__sflush_r+0xb8>
 8012988:	602e      	str	r6, [r5, #0]
 801298a:	e7af      	b.n	80128ec <__sflush_r+0x18>
 801298c:	2340      	movs	r3, #64	; 0x40
 801298e:	89a2      	ldrh	r2, [r4, #12]
 8012990:	4313      	orrs	r3, r2
 8012992:	81a3      	strh	r3, [r4, #12]
 8012994:	e7ab      	b.n	80128ee <__sflush_r+0x1a>
 8012996:	2340      	movs	r3, #64	; 0x40
 8012998:	430b      	orrs	r3, r1
 801299a:	2001      	movs	r0, #1
 801299c:	81a3      	strh	r3, [r4, #12]
 801299e:	4240      	negs	r0, r0
 80129a0:	e7a5      	b.n	80128ee <__sflush_r+0x1a>
 80129a2:	690f      	ldr	r7, [r1, #16]
 80129a4:	2f00      	cmp	r7, #0
 80129a6:	d0a1      	beq.n	80128ec <__sflush_r+0x18>
 80129a8:	680b      	ldr	r3, [r1, #0]
 80129aa:	600f      	str	r7, [r1, #0]
 80129ac:	1bdb      	subs	r3, r3, r7
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	2300      	movs	r3, #0
 80129b2:	0792      	lsls	r2, r2, #30
 80129b4:	d100      	bne.n	80129b8 <__sflush_r+0xe4>
 80129b6:	694b      	ldr	r3, [r1, #20]
 80129b8:	60a3      	str	r3, [r4, #8]
 80129ba:	9b01      	ldr	r3, [sp, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dc00      	bgt.n	80129c2 <__sflush_r+0xee>
 80129c0:	e794      	b.n	80128ec <__sflush_r+0x18>
 80129c2:	9b01      	ldr	r3, [sp, #4]
 80129c4:	003a      	movs	r2, r7
 80129c6:	6a21      	ldr	r1, [r4, #32]
 80129c8:	0028      	movs	r0, r5
 80129ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80129cc:	47b0      	blx	r6
 80129ce:	2800      	cmp	r0, #0
 80129d0:	dc03      	bgt.n	80129da <__sflush_r+0x106>
 80129d2:	2340      	movs	r3, #64	; 0x40
 80129d4:	89a2      	ldrh	r2, [r4, #12]
 80129d6:	4313      	orrs	r3, r2
 80129d8:	e7df      	b.n	801299a <__sflush_r+0xc6>
 80129da:	9b01      	ldr	r3, [sp, #4]
 80129dc:	183f      	adds	r7, r7, r0
 80129de:	1a1b      	subs	r3, r3, r0
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	e7ea      	b.n	80129ba <__sflush_r+0xe6>
 80129e4:	20400001 	.word	0x20400001

080129e8 <_fflush_r>:
 80129e8:	690b      	ldr	r3, [r1, #16]
 80129ea:	b570      	push	{r4, r5, r6, lr}
 80129ec:	0005      	movs	r5, r0
 80129ee:	000c      	movs	r4, r1
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <_fflush_r+0x10>
 80129f4:	2000      	movs	r0, #0
 80129f6:	bd70      	pop	{r4, r5, r6, pc}
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d004      	beq.n	8012a06 <_fflush_r+0x1e>
 80129fc:	6983      	ldr	r3, [r0, #24]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d101      	bne.n	8012a06 <_fflush_r+0x1e>
 8012a02:	f000 f873 	bl	8012aec <__sinit>
 8012a06:	4b0b      	ldr	r3, [pc, #44]	; (8012a34 <_fflush_r+0x4c>)
 8012a08:	429c      	cmp	r4, r3
 8012a0a:	d109      	bne.n	8012a20 <_fflush_r+0x38>
 8012a0c:	686c      	ldr	r4, [r5, #4]
 8012a0e:	220c      	movs	r2, #12
 8012a10:	5ea3      	ldrsh	r3, [r4, r2]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d0ee      	beq.n	80129f4 <_fflush_r+0xc>
 8012a16:	0021      	movs	r1, r4
 8012a18:	0028      	movs	r0, r5
 8012a1a:	f7ff ff5b 	bl	80128d4 <__sflush_r>
 8012a1e:	e7ea      	b.n	80129f6 <_fflush_r+0xe>
 8012a20:	4b05      	ldr	r3, [pc, #20]	; (8012a38 <_fflush_r+0x50>)
 8012a22:	429c      	cmp	r4, r3
 8012a24:	d101      	bne.n	8012a2a <_fflush_r+0x42>
 8012a26:	68ac      	ldr	r4, [r5, #8]
 8012a28:	e7f1      	b.n	8012a0e <_fflush_r+0x26>
 8012a2a:	4b04      	ldr	r3, [pc, #16]	; (8012a3c <_fflush_r+0x54>)
 8012a2c:	429c      	cmp	r4, r3
 8012a2e:	d1ee      	bne.n	8012a0e <_fflush_r+0x26>
 8012a30:	68ec      	ldr	r4, [r5, #12]
 8012a32:	e7ec      	b.n	8012a0e <_fflush_r+0x26>
 8012a34:	0801e304 	.word	0x0801e304
 8012a38:	0801e324 	.word	0x0801e324
 8012a3c:	0801e2e4 	.word	0x0801e2e4

08012a40 <fflush>:
 8012a40:	b510      	push	{r4, lr}
 8012a42:	1e01      	subs	r1, r0, #0
 8012a44:	d105      	bne.n	8012a52 <fflush+0x12>
 8012a46:	4b05      	ldr	r3, [pc, #20]	; (8012a5c <fflush+0x1c>)
 8012a48:	4905      	ldr	r1, [pc, #20]	; (8012a60 <fflush+0x20>)
 8012a4a:	6818      	ldr	r0, [r3, #0]
 8012a4c:	f000 f8c0 	bl	8012bd0 <_fwalk_reent>
 8012a50:	bd10      	pop	{r4, pc}
 8012a52:	4b04      	ldr	r3, [pc, #16]	; (8012a64 <fflush+0x24>)
 8012a54:	6818      	ldr	r0, [r3, #0]
 8012a56:	f7ff ffc7 	bl	80129e8 <_fflush_r>
 8012a5a:	e7f9      	b.n	8012a50 <fflush+0x10>
 8012a5c:	0801e344 	.word	0x0801e344
 8012a60:	080129e9 	.word	0x080129e9
 8012a64:	20000008 	.word	0x20000008

08012a68 <std>:
 8012a68:	2300      	movs	r3, #0
 8012a6a:	b510      	push	{r4, lr}
 8012a6c:	0004      	movs	r4, r0
 8012a6e:	6003      	str	r3, [r0, #0]
 8012a70:	6043      	str	r3, [r0, #4]
 8012a72:	6083      	str	r3, [r0, #8]
 8012a74:	8181      	strh	r1, [r0, #12]
 8012a76:	6643      	str	r3, [r0, #100]	; 0x64
 8012a78:	81c2      	strh	r2, [r0, #14]
 8012a7a:	6103      	str	r3, [r0, #16]
 8012a7c:	6143      	str	r3, [r0, #20]
 8012a7e:	6183      	str	r3, [r0, #24]
 8012a80:	0019      	movs	r1, r3
 8012a82:	2208      	movs	r2, #8
 8012a84:	305c      	adds	r0, #92	; 0x5c
 8012a86:	f000 f8e9 	bl	8012c5c <memset>
 8012a8a:	4b05      	ldr	r3, [pc, #20]	; (8012aa0 <std+0x38>)
 8012a8c:	6224      	str	r4, [r4, #32]
 8012a8e:	6263      	str	r3, [r4, #36]	; 0x24
 8012a90:	4b04      	ldr	r3, [pc, #16]	; (8012aa4 <std+0x3c>)
 8012a92:	62a3      	str	r3, [r4, #40]	; 0x28
 8012a94:	4b04      	ldr	r3, [pc, #16]	; (8012aa8 <std+0x40>)
 8012a96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012a98:	4b04      	ldr	r3, [pc, #16]	; (8012aac <std+0x44>)
 8012a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	46c0      	nop			; (mov r8, r8)
 8012aa0:	08012de1 	.word	0x08012de1
 8012aa4:	08012e09 	.word	0x08012e09
 8012aa8:	08012e41 	.word	0x08012e41
 8012aac:	08012e6d 	.word	0x08012e6d

08012ab0 <_cleanup_r>:
 8012ab0:	b510      	push	{r4, lr}
 8012ab2:	4902      	ldr	r1, [pc, #8]	; (8012abc <_cleanup_r+0xc>)
 8012ab4:	f000 f88c 	bl	8012bd0 <_fwalk_reent>
 8012ab8:	bd10      	pop	{r4, pc}
 8012aba:	46c0      	nop			; (mov r8, r8)
 8012abc:	080129e9 	.word	0x080129e9

08012ac0 <__sfmoreglue>:
 8012ac0:	b570      	push	{r4, r5, r6, lr}
 8012ac2:	2568      	movs	r5, #104	; 0x68
 8012ac4:	1e4a      	subs	r2, r1, #1
 8012ac6:	4355      	muls	r5, r2
 8012ac8:	000e      	movs	r6, r1
 8012aca:	0029      	movs	r1, r5
 8012acc:	3174      	adds	r1, #116	; 0x74
 8012ace:	f000 f917 	bl	8012d00 <_malloc_r>
 8012ad2:	1e04      	subs	r4, r0, #0
 8012ad4:	d008      	beq.n	8012ae8 <__sfmoreglue+0x28>
 8012ad6:	2100      	movs	r1, #0
 8012ad8:	002a      	movs	r2, r5
 8012ada:	6001      	str	r1, [r0, #0]
 8012adc:	6046      	str	r6, [r0, #4]
 8012ade:	300c      	adds	r0, #12
 8012ae0:	60a0      	str	r0, [r4, #8]
 8012ae2:	3268      	adds	r2, #104	; 0x68
 8012ae4:	f000 f8ba 	bl	8012c5c <memset>
 8012ae8:	0020      	movs	r0, r4
 8012aea:	bd70      	pop	{r4, r5, r6, pc}

08012aec <__sinit>:
 8012aec:	6983      	ldr	r3, [r0, #24]
 8012aee:	b513      	push	{r0, r1, r4, lr}
 8012af0:	0004      	movs	r4, r0
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d128      	bne.n	8012b48 <__sinit+0x5c>
 8012af6:	6483      	str	r3, [r0, #72]	; 0x48
 8012af8:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012afa:	6503      	str	r3, [r0, #80]	; 0x50
 8012afc:	4b13      	ldr	r3, [pc, #76]	; (8012b4c <__sinit+0x60>)
 8012afe:	4a14      	ldr	r2, [pc, #80]	; (8012b50 <__sinit+0x64>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	6282      	str	r2, [r0, #40]	; 0x28
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	4298      	cmp	r0, r3
 8012b08:	d101      	bne.n	8012b0e <__sinit+0x22>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	6183      	str	r3, [r0, #24]
 8012b0e:	0020      	movs	r0, r4
 8012b10:	f000 f820 	bl	8012b54 <__sfp>
 8012b14:	6060      	str	r0, [r4, #4]
 8012b16:	0020      	movs	r0, r4
 8012b18:	f000 f81c 	bl	8012b54 <__sfp>
 8012b1c:	60a0      	str	r0, [r4, #8]
 8012b1e:	0020      	movs	r0, r4
 8012b20:	f000 f818 	bl	8012b54 <__sfp>
 8012b24:	2200      	movs	r2, #0
 8012b26:	60e0      	str	r0, [r4, #12]
 8012b28:	2104      	movs	r1, #4
 8012b2a:	6860      	ldr	r0, [r4, #4]
 8012b2c:	f7ff ff9c 	bl	8012a68 <std>
 8012b30:	2201      	movs	r2, #1
 8012b32:	2109      	movs	r1, #9
 8012b34:	68a0      	ldr	r0, [r4, #8]
 8012b36:	f7ff ff97 	bl	8012a68 <std>
 8012b3a:	2202      	movs	r2, #2
 8012b3c:	2112      	movs	r1, #18
 8012b3e:	68e0      	ldr	r0, [r4, #12]
 8012b40:	f7ff ff92 	bl	8012a68 <std>
 8012b44:	2301      	movs	r3, #1
 8012b46:	61a3      	str	r3, [r4, #24]
 8012b48:	bd13      	pop	{r0, r1, r4, pc}
 8012b4a:	46c0      	nop			; (mov r8, r8)
 8012b4c:	0801e344 	.word	0x0801e344
 8012b50:	08012ab1 	.word	0x08012ab1

08012b54 <__sfp>:
 8012b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b56:	4b1c      	ldr	r3, [pc, #112]	; (8012bc8 <__sfp+0x74>)
 8012b58:	0007      	movs	r7, r0
 8012b5a:	681e      	ldr	r6, [r3, #0]
 8012b5c:	69b3      	ldr	r3, [r6, #24]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <__sfp+0x14>
 8012b62:	0030      	movs	r0, r6
 8012b64:	f7ff ffc2 	bl	8012aec <__sinit>
 8012b68:	3648      	adds	r6, #72	; 0x48
 8012b6a:	68b4      	ldr	r4, [r6, #8]
 8012b6c:	6873      	ldr	r3, [r6, #4]
 8012b6e:	3b01      	subs	r3, #1
 8012b70:	d504      	bpl.n	8012b7c <__sfp+0x28>
 8012b72:	6833      	ldr	r3, [r6, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d007      	beq.n	8012b88 <__sfp+0x34>
 8012b78:	6836      	ldr	r6, [r6, #0]
 8012b7a:	e7f6      	b.n	8012b6a <__sfp+0x16>
 8012b7c:	220c      	movs	r2, #12
 8012b7e:	5ea5      	ldrsh	r5, [r4, r2]
 8012b80:	2d00      	cmp	r5, #0
 8012b82:	d00d      	beq.n	8012ba0 <__sfp+0x4c>
 8012b84:	3468      	adds	r4, #104	; 0x68
 8012b86:	e7f2      	b.n	8012b6e <__sfp+0x1a>
 8012b88:	2104      	movs	r1, #4
 8012b8a:	0038      	movs	r0, r7
 8012b8c:	f7ff ff98 	bl	8012ac0 <__sfmoreglue>
 8012b90:	6030      	str	r0, [r6, #0]
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d1f0      	bne.n	8012b78 <__sfp+0x24>
 8012b96:	230c      	movs	r3, #12
 8012b98:	0004      	movs	r4, r0
 8012b9a:	603b      	str	r3, [r7, #0]
 8012b9c:	0020      	movs	r0, r4
 8012b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ba0:	0020      	movs	r0, r4
 8012ba2:	4b0a      	ldr	r3, [pc, #40]	; (8012bcc <__sfp+0x78>)
 8012ba4:	6665      	str	r5, [r4, #100]	; 0x64
 8012ba6:	6025      	str	r5, [r4, #0]
 8012ba8:	6065      	str	r5, [r4, #4]
 8012baa:	60a5      	str	r5, [r4, #8]
 8012bac:	60e3      	str	r3, [r4, #12]
 8012bae:	6125      	str	r5, [r4, #16]
 8012bb0:	6165      	str	r5, [r4, #20]
 8012bb2:	61a5      	str	r5, [r4, #24]
 8012bb4:	2208      	movs	r2, #8
 8012bb6:	0029      	movs	r1, r5
 8012bb8:	305c      	adds	r0, #92	; 0x5c
 8012bba:	f000 f84f 	bl	8012c5c <memset>
 8012bbe:	6365      	str	r5, [r4, #52]	; 0x34
 8012bc0:	63a5      	str	r5, [r4, #56]	; 0x38
 8012bc2:	64a5      	str	r5, [r4, #72]	; 0x48
 8012bc4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012bc6:	e7e9      	b.n	8012b9c <__sfp+0x48>
 8012bc8:	0801e344 	.word	0x0801e344
 8012bcc:	ffff0001 	.word	0xffff0001

08012bd0 <_fwalk_reent>:
 8012bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bd2:	0004      	movs	r4, r0
 8012bd4:	0007      	movs	r7, r0
 8012bd6:	2600      	movs	r6, #0
 8012bd8:	9101      	str	r1, [sp, #4]
 8012bda:	3448      	adds	r4, #72	; 0x48
 8012bdc:	2c00      	cmp	r4, #0
 8012bde:	d101      	bne.n	8012be4 <_fwalk_reent+0x14>
 8012be0:	0030      	movs	r0, r6
 8012be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012be4:	6863      	ldr	r3, [r4, #4]
 8012be6:	68a5      	ldr	r5, [r4, #8]
 8012be8:	9300      	str	r3, [sp, #0]
 8012bea:	9b00      	ldr	r3, [sp, #0]
 8012bec:	3b01      	subs	r3, #1
 8012bee:	9300      	str	r3, [sp, #0]
 8012bf0:	d501      	bpl.n	8012bf6 <_fwalk_reent+0x26>
 8012bf2:	6824      	ldr	r4, [r4, #0]
 8012bf4:	e7f2      	b.n	8012bdc <_fwalk_reent+0xc>
 8012bf6:	89ab      	ldrh	r3, [r5, #12]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d908      	bls.n	8012c0e <_fwalk_reent+0x3e>
 8012bfc:	220e      	movs	r2, #14
 8012bfe:	5eab      	ldrsh	r3, [r5, r2]
 8012c00:	3301      	adds	r3, #1
 8012c02:	d004      	beq.n	8012c0e <_fwalk_reent+0x3e>
 8012c04:	0029      	movs	r1, r5
 8012c06:	0038      	movs	r0, r7
 8012c08:	9b01      	ldr	r3, [sp, #4]
 8012c0a:	4798      	blx	r3
 8012c0c:	4306      	orrs	r6, r0
 8012c0e:	3568      	adds	r5, #104	; 0x68
 8012c10:	e7eb      	b.n	8012bea <_fwalk_reent+0x1a>
	...

08012c14 <__libc_init_array>:
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	2600      	movs	r6, #0
 8012c18:	4d0c      	ldr	r5, [pc, #48]	; (8012c4c <__libc_init_array+0x38>)
 8012c1a:	4c0d      	ldr	r4, [pc, #52]	; (8012c50 <__libc_init_array+0x3c>)
 8012c1c:	1b64      	subs	r4, r4, r5
 8012c1e:	10a4      	asrs	r4, r4, #2
 8012c20:	42a6      	cmp	r6, r4
 8012c22:	d109      	bne.n	8012c38 <__libc_init_array+0x24>
 8012c24:	2600      	movs	r6, #0
 8012c26:	f002 fc59 	bl	80154dc <_init>
 8012c2a:	4d0a      	ldr	r5, [pc, #40]	; (8012c54 <__libc_init_array+0x40>)
 8012c2c:	4c0a      	ldr	r4, [pc, #40]	; (8012c58 <__libc_init_array+0x44>)
 8012c2e:	1b64      	subs	r4, r4, r5
 8012c30:	10a4      	asrs	r4, r4, #2
 8012c32:	42a6      	cmp	r6, r4
 8012c34:	d105      	bne.n	8012c42 <__libc_init_array+0x2e>
 8012c36:	bd70      	pop	{r4, r5, r6, pc}
 8012c38:	00b3      	lsls	r3, r6, #2
 8012c3a:	58eb      	ldr	r3, [r5, r3]
 8012c3c:	4798      	blx	r3
 8012c3e:	3601      	adds	r6, #1
 8012c40:	e7ee      	b.n	8012c20 <__libc_init_array+0xc>
 8012c42:	00b3      	lsls	r3, r6, #2
 8012c44:	58eb      	ldr	r3, [r5, r3]
 8012c46:	4798      	blx	r3
 8012c48:	3601      	adds	r6, #1
 8012c4a:	e7f2      	b.n	8012c32 <__libc_init_array+0x1e>
 8012c4c:	0801e558 	.word	0x0801e558
 8012c50:	0801e558 	.word	0x0801e558
 8012c54:	0801e558 	.word	0x0801e558
 8012c58:	0801e55c 	.word	0x0801e55c

08012c5c <memset>:
 8012c5c:	0003      	movs	r3, r0
 8012c5e:	1812      	adds	r2, r2, r0
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d100      	bne.n	8012c66 <memset+0xa>
 8012c64:	4770      	bx	lr
 8012c66:	7019      	strb	r1, [r3, #0]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	e7f9      	b.n	8012c60 <memset+0x4>

08012c6c <_free_r>:
 8012c6c:	b570      	push	{r4, r5, r6, lr}
 8012c6e:	0005      	movs	r5, r0
 8012c70:	2900      	cmp	r1, #0
 8012c72:	d010      	beq.n	8012c96 <_free_r+0x2a>
 8012c74:	1f0c      	subs	r4, r1, #4
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	da00      	bge.n	8012c7e <_free_r+0x12>
 8012c7c:	18e4      	adds	r4, r4, r3
 8012c7e:	0028      	movs	r0, r5
 8012c80:	f000 f934 	bl	8012eec <__malloc_lock>
 8012c84:	4a1d      	ldr	r2, [pc, #116]	; (8012cfc <_free_r+0x90>)
 8012c86:	6813      	ldr	r3, [r2, #0]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d105      	bne.n	8012c98 <_free_r+0x2c>
 8012c8c:	6063      	str	r3, [r4, #4]
 8012c8e:	6014      	str	r4, [r2, #0]
 8012c90:	0028      	movs	r0, r5
 8012c92:	f000 f92c 	bl	8012eee <__malloc_unlock>
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	42a3      	cmp	r3, r4
 8012c9a:	d909      	bls.n	8012cb0 <_free_r+0x44>
 8012c9c:	6821      	ldr	r1, [r4, #0]
 8012c9e:	1860      	adds	r0, r4, r1
 8012ca0:	4283      	cmp	r3, r0
 8012ca2:	d1f3      	bne.n	8012c8c <_free_r+0x20>
 8012ca4:	6818      	ldr	r0, [r3, #0]
 8012ca6:	685b      	ldr	r3, [r3, #4]
 8012ca8:	1841      	adds	r1, r0, r1
 8012caa:	6021      	str	r1, [r4, #0]
 8012cac:	e7ee      	b.n	8012c8c <_free_r+0x20>
 8012cae:	0013      	movs	r3, r2
 8012cb0:	685a      	ldr	r2, [r3, #4]
 8012cb2:	2a00      	cmp	r2, #0
 8012cb4:	d001      	beq.n	8012cba <_free_r+0x4e>
 8012cb6:	42a2      	cmp	r2, r4
 8012cb8:	d9f9      	bls.n	8012cae <_free_r+0x42>
 8012cba:	6819      	ldr	r1, [r3, #0]
 8012cbc:	1858      	adds	r0, r3, r1
 8012cbe:	42a0      	cmp	r0, r4
 8012cc0:	d10b      	bne.n	8012cda <_free_r+0x6e>
 8012cc2:	6820      	ldr	r0, [r4, #0]
 8012cc4:	1809      	adds	r1, r1, r0
 8012cc6:	1858      	adds	r0, r3, r1
 8012cc8:	6019      	str	r1, [r3, #0]
 8012cca:	4282      	cmp	r2, r0
 8012ccc:	d1e0      	bne.n	8012c90 <_free_r+0x24>
 8012cce:	6810      	ldr	r0, [r2, #0]
 8012cd0:	6852      	ldr	r2, [r2, #4]
 8012cd2:	1841      	adds	r1, r0, r1
 8012cd4:	6019      	str	r1, [r3, #0]
 8012cd6:	605a      	str	r2, [r3, #4]
 8012cd8:	e7da      	b.n	8012c90 <_free_r+0x24>
 8012cda:	42a0      	cmp	r0, r4
 8012cdc:	d902      	bls.n	8012ce4 <_free_r+0x78>
 8012cde:	230c      	movs	r3, #12
 8012ce0:	602b      	str	r3, [r5, #0]
 8012ce2:	e7d5      	b.n	8012c90 <_free_r+0x24>
 8012ce4:	6821      	ldr	r1, [r4, #0]
 8012ce6:	1860      	adds	r0, r4, r1
 8012ce8:	4282      	cmp	r2, r0
 8012cea:	d103      	bne.n	8012cf4 <_free_r+0x88>
 8012cec:	6810      	ldr	r0, [r2, #0]
 8012cee:	6852      	ldr	r2, [r2, #4]
 8012cf0:	1841      	adds	r1, r0, r1
 8012cf2:	6021      	str	r1, [r4, #0]
 8012cf4:	6062      	str	r2, [r4, #4]
 8012cf6:	605c      	str	r4, [r3, #4]
 8012cf8:	e7ca      	b.n	8012c90 <_free_r+0x24>
 8012cfa:	46c0      	nop			; (mov r8, r8)
 8012cfc:	20000634 	.word	0x20000634

08012d00 <_malloc_r>:
 8012d00:	2303      	movs	r3, #3
 8012d02:	b570      	push	{r4, r5, r6, lr}
 8012d04:	1ccd      	adds	r5, r1, #3
 8012d06:	439d      	bics	r5, r3
 8012d08:	3508      	adds	r5, #8
 8012d0a:	0006      	movs	r6, r0
 8012d0c:	2d0c      	cmp	r5, #12
 8012d0e:	d21e      	bcs.n	8012d4e <_malloc_r+0x4e>
 8012d10:	250c      	movs	r5, #12
 8012d12:	42a9      	cmp	r1, r5
 8012d14:	d81d      	bhi.n	8012d52 <_malloc_r+0x52>
 8012d16:	0030      	movs	r0, r6
 8012d18:	f000 f8e8 	bl	8012eec <__malloc_lock>
 8012d1c:	4a25      	ldr	r2, [pc, #148]	; (8012db4 <_malloc_r+0xb4>)
 8012d1e:	6814      	ldr	r4, [r2, #0]
 8012d20:	0021      	movs	r1, r4
 8012d22:	2900      	cmp	r1, #0
 8012d24:	d119      	bne.n	8012d5a <_malloc_r+0x5a>
 8012d26:	4c24      	ldr	r4, [pc, #144]	; (8012db8 <_malloc_r+0xb8>)
 8012d28:	6823      	ldr	r3, [r4, #0]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d103      	bne.n	8012d36 <_malloc_r+0x36>
 8012d2e:	0030      	movs	r0, r6
 8012d30:	f000 f844 	bl	8012dbc <_sbrk_r>
 8012d34:	6020      	str	r0, [r4, #0]
 8012d36:	0029      	movs	r1, r5
 8012d38:	0030      	movs	r0, r6
 8012d3a:	f000 f83f 	bl	8012dbc <_sbrk_r>
 8012d3e:	1c43      	adds	r3, r0, #1
 8012d40:	d12b      	bne.n	8012d9a <_malloc_r+0x9a>
 8012d42:	230c      	movs	r3, #12
 8012d44:	0030      	movs	r0, r6
 8012d46:	6033      	str	r3, [r6, #0]
 8012d48:	f000 f8d1 	bl	8012eee <__malloc_unlock>
 8012d4c:	e003      	b.n	8012d56 <_malloc_r+0x56>
 8012d4e:	2d00      	cmp	r5, #0
 8012d50:	dadf      	bge.n	8012d12 <_malloc_r+0x12>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6033      	str	r3, [r6, #0]
 8012d56:	2000      	movs	r0, #0
 8012d58:	bd70      	pop	{r4, r5, r6, pc}
 8012d5a:	680b      	ldr	r3, [r1, #0]
 8012d5c:	1b5b      	subs	r3, r3, r5
 8012d5e:	d419      	bmi.n	8012d94 <_malloc_r+0x94>
 8012d60:	2b0b      	cmp	r3, #11
 8012d62:	d903      	bls.n	8012d6c <_malloc_r+0x6c>
 8012d64:	600b      	str	r3, [r1, #0]
 8012d66:	18cc      	adds	r4, r1, r3
 8012d68:	6025      	str	r5, [r4, #0]
 8012d6a:	e003      	b.n	8012d74 <_malloc_r+0x74>
 8012d6c:	684b      	ldr	r3, [r1, #4]
 8012d6e:	428c      	cmp	r4, r1
 8012d70:	d10d      	bne.n	8012d8e <_malloc_r+0x8e>
 8012d72:	6013      	str	r3, [r2, #0]
 8012d74:	0030      	movs	r0, r6
 8012d76:	f000 f8ba 	bl	8012eee <__malloc_unlock>
 8012d7a:	0020      	movs	r0, r4
 8012d7c:	2207      	movs	r2, #7
 8012d7e:	300b      	adds	r0, #11
 8012d80:	1d23      	adds	r3, r4, #4
 8012d82:	4390      	bics	r0, r2
 8012d84:	1ac3      	subs	r3, r0, r3
 8012d86:	d0e7      	beq.n	8012d58 <_malloc_r+0x58>
 8012d88:	425a      	negs	r2, r3
 8012d8a:	50e2      	str	r2, [r4, r3]
 8012d8c:	e7e4      	b.n	8012d58 <_malloc_r+0x58>
 8012d8e:	6063      	str	r3, [r4, #4]
 8012d90:	000c      	movs	r4, r1
 8012d92:	e7ef      	b.n	8012d74 <_malloc_r+0x74>
 8012d94:	000c      	movs	r4, r1
 8012d96:	6849      	ldr	r1, [r1, #4]
 8012d98:	e7c3      	b.n	8012d22 <_malloc_r+0x22>
 8012d9a:	2303      	movs	r3, #3
 8012d9c:	1cc4      	adds	r4, r0, #3
 8012d9e:	439c      	bics	r4, r3
 8012da0:	42a0      	cmp	r0, r4
 8012da2:	d0e1      	beq.n	8012d68 <_malloc_r+0x68>
 8012da4:	1a21      	subs	r1, r4, r0
 8012da6:	0030      	movs	r0, r6
 8012da8:	f000 f808 	bl	8012dbc <_sbrk_r>
 8012dac:	1c43      	adds	r3, r0, #1
 8012dae:	d1db      	bne.n	8012d68 <_malloc_r+0x68>
 8012db0:	e7c7      	b.n	8012d42 <_malloc_r+0x42>
 8012db2:	46c0      	nop			; (mov r8, r8)
 8012db4:	20000634 	.word	0x20000634
 8012db8:	20000638 	.word	0x20000638

08012dbc <_sbrk_r>:
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	b570      	push	{r4, r5, r6, lr}
 8012dc0:	4c06      	ldr	r4, [pc, #24]	; (8012ddc <_sbrk_r+0x20>)
 8012dc2:	0005      	movs	r5, r0
 8012dc4:	0008      	movs	r0, r1
 8012dc6:	6023      	str	r3, [r4, #0]
 8012dc8:	f7ff fd04 	bl	80127d4 <_sbrk>
 8012dcc:	1c43      	adds	r3, r0, #1
 8012dce:	d103      	bne.n	8012dd8 <_sbrk_r+0x1c>
 8012dd0:	6823      	ldr	r3, [r4, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d000      	beq.n	8012dd8 <_sbrk_r+0x1c>
 8012dd6:	602b      	str	r3, [r5, #0]
 8012dd8:	bd70      	pop	{r4, r5, r6, pc}
 8012dda:	46c0      	nop			; (mov r8, r8)
 8012ddc:	200006c8 	.word	0x200006c8

08012de0 <__sread>:
 8012de0:	b570      	push	{r4, r5, r6, lr}
 8012de2:	000c      	movs	r4, r1
 8012de4:	250e      	movs	r5, #14
 8012de6:	5f49      	ldrsh	r1, [r1, r5]
 8012de8:	f000 f882 	bl	8012ef0 <_read_r>
 8012dec:	2800      	cmp	r0, #0
 8012dee:	db03      	blt.n	8012df8 <__sread+0x18>
 8012df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012df2:	181b      	adds	r3, r3, r0
 8012df4:	6563      	str	r3, [r4, #84]	; 0x54
 8012df6:	bd70      	pop	{r4, r5, r6, pc}
 8012df8:	89a3      	ldrh	r3, [r4, #12]
 8012dfa:	4a02      	ldr	r2, [pc, #8]	; (8012e04 <__sread+0x24>)
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	81a3      	strh	r3, [r4, #12]
 8012e00:	e7f9      	b.n	8012df6 <__sread+0x16>
 8012e02:	46c0      	nop			; (mov r8, r8)
 8012e04:	ffffefff 	.word	0xffffefff

08012e08 <__swrite>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	001f      	movs	r7, r3
 8012e0c:	898b      	ldrh	r3, [r1, #12]
 8012e0e:	0005      	movs	r5, r0
 8012e10:	000c      	movs	r4, r1
 8012e12:	0016      	movs	r6, r2
 8012e14:	05db      	lsls	r3, r3, #23
 8012e16:	d505      	bpl.n	8012e24 <__swrite+0x1c>
 8012e18:	230e      	movs	r3, #14
 8012e1a:	5ec9      	ldrsh	r1, [r1, r3]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	2302      	movs	r3, #2
 8012e20:	f000 f850 	bl	8012ec4 <_lseek_r>
 8012e24:	89a3      	ldrh	r3, [r4, #12]
 8012e26:	4a05      	ldr	r2, [pc, #20]	; (8012e3c <__swrite+0x34>)
 8012e28:	0028      	movs	r0, r5
 8012e2a:	4013      	ands	r3, r2
 8012e2c:	81a3      	strh	r3, [r4, #12]
 8012e2e:	0032      	movs	r2, r6
 8012e30:	230e      	movs	r3, #14
 8012e32:	5ee1      	ldrsh	r1, [r4, r3]
 8012e34:	003b      	movs	r3, r7
 8012e36:	f000 f81f 	bl	8012e78 <_write_r>
 8012e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e3c:	ffffefff 	.word	0xffffefff

08012e40 <__sseek>:
 8012e40:	b570      	push	{r4, r5, r6, lr}
 8012e42:	000c      	movs	r4, r1
 8012e44:	250e      	movs	r5, #14
 8012e46:	5f49      	ldrsh	r1, [r1, r5]
 8012e48:	f000 f83c 	bl	8012ec4 <_lseek_r>
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	1c42      	adds	r2, r0, #1
 8012e50:	d103      	bne.n	8012e5a <__sseek+0x1a>
 8012e52:	4a05      	ldr	r2, [pc, #20]	; (8012e68 <__sseek+0x28>)
 8012e54:	4013      	ands	r3, r2
 8012e56:	81a3      	strh	r3, [r4, #12]
 8012e58:	bd70      	pop	{r4, r5, r6, pc}
 8012e5a:	2280      	movs	r2, #128	; 0x80
 8012e5c:	0152      	lsls	r2, r2, #5
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	81a3      	strh	r3, [r4, #12]
 8012e62:	6560      	str	r0, [r4, #84]	; 0x54
 8012e64:	e7f8      	b.n	8012e58 <__sseek+0x18>
 8012e66:	46c0      	nop			; (mov r8, r8)
 8012e68:	ffffefff 	.word	0xffffefff

08012e6c <__sclose>:
 8012e6c:	b510      	push	{r4, lr}
 8012e6e:	230e      	movs	r3, #14
 8012e70:	5ec9      	ldrsh	r1, [r1, r3]
 8012e72:	f000 f815 	bl	8012ea0 <_close_r>
 8012e76:	bd10      	pop	{r4, pc}

08012e78 <_write_r>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	0005      	movs	r5, r0
 8012e7c:	0008      	movs	r0, r1
 8012e7e:	0011      	movs	r1, r2
 8012e80:	2200      	movs	r2, #0
 8012e82:	4c06      	ldr	r4, [pc, #24]	; (8012e9c <_write_r+0x24>)
 8012e84:	6022      	str	r2, [r4, #0]
 8012e86:	001a      	movs	r2, r3
 8012e88:	f7ff fc6c 	bl	8012764 <_write>
 8012e8c:	1c43      	adds	r3, r0, #1
 8012e8e:	d103      	bne.n	8012e98 <_write_r+0x20>
 8012e90:	6823      	ldr	r3, [r4, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d000      	beq.n	8012e98 <_write_r+0x20>
 8012e96:	602b      	str	r3, [r5, #0]
 8012e98:	bd70      	pop	{r4, r5, r6, pc}
 8012e9a:	46c0      	nop			; (mov r8, r8)
 8012e9c:	200006c8 	.word	0x200006c8

08012ea0 <_close_r>:
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	b570      	push	{r4, r5, r6, lr}
 8012ea4:	4c06      	ldr	r4, [pc, #24]	; (8012ec0 <_close_r+0x20>)
 8012ea6:	0005      	movs	r5, r0
 8012ea8:	0008      	movs	r0, r1
 8012eaa:	6023      	str	r3, [r4, #0]
 8012eac:	f000 f834 	bl	8012f18 <_close>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d103      	bne.n	8012ebc <_close_r+0x1c>
 8012eb4:	6823      	ldr	r3, [r4, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d000      	beq.n	8012ebc <_close_r+0x1c>
 8012eba:	602b      	str	r3, [r5, #0]
 8012ebc:	bd70      	pop	{r4, r5, r6, pc}
 8012ebe:	46c0      	nop			; (mov r8, r8)
 8012ec0:	200006c8 	.word	0x200006c8

08012ec4 <_lseek_r>:
 8012ec4:	b570      	push	{r4, r5, r6, lr}
 8012ec6:	0005      	movs	r5, r0
 8012ec8:	0008      	movs	r0, r1
 8012eca:	0011      	movs	r1, r2
 8012ecc:	2200      	movs	r2, #0
 8012ece:	4c06      	ldr	r4, [pc, #24]	; (8012ee8 <_lseek_r+0x24>)
 8012ed0:	6022      	str	r2, [r4, #0]
 8012ed2:	001a      	movs	r2, r3
 8012ed4:	f000 f828 	bl	8012f28 <_lseek>
 8012ed8:	1c43      	adds	r3, r0, #1
 8012eda:	d103      	bne.n	8012ee4 <_lseek_r+0x20>
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d000      	beq.n	8012ee4 <_lseek_r+0x20>
 8012ee2:	602b      	str	r3, [r5, #0]
 8012ee4:	bd70      	pop	{r4, r5, r6, pc}
 8012ee6:	46c0      	nop			; (mov r8, r8)
 8012ee8:	200006c8 	.word	0x200006c8

08012eec <__malloc_lock>:
 8012eec:	4770      	bx	lr

08012eee <__malloc_unlock>:
 8012eee:	4770      	bx	lr

08012ef0 <_read_r>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	0005      	movs	r5, r0
 8012ef4:	0008      	movs	r0, r1
 8012ef6:	0011      	movs	r1, r2
 8012ef8:	2200      	movs	r2, #0
 8012efa:	4c06      	ldr	r4, [pc, #24]	; (8012f14 <_read_r+0x24>)
 8012efc:	6022      	str	r2, [r4, #0]
 8012efe:	001a      	movs	r2, r3
 8012f00:	f000 f81a 	bl	8012f38 <_read>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d103      	bne.n	8012f10 <_read_r+0x20>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d000      	beq.n	8012f10 <_read_r+0x20>
 8012f0e:	602b      	str	r3, [r5, #0]
 8012f10:	bd70      	pop	{r4, r5, r6, pc}
 8012f12:	46c0      	nop			; (mov r8, r8)
 8012f14:	200006c8 	.word	0x200006c8

08012f18 <_close>:
 8012f18:	2258      	movs	r2, #88	; 0x58
 8012f1a:	2001      	movs	r0, #1
 8012f1c:	4b01      	ldr	r3, [pc, #4]	; (8012f24 <_close+0xc>)
 8012f1e:	4240      	negs	r0, r0
 8012f20:	601a      	str	r2, [r3, #0]
 8012f22:	4770      	bx	lr
 8012f24:	200006c8 	.word	0x200006c8

08012f28 <_lseek>:
 8012f28:	2258      	movs	r2, #88	; 0x58
 8012f2a:	2001      	movs	r0, #1
 8012f2c:	4b01      	ldr	r3, [pc, #4]	; (8012f34 <_lseek+0xc>)
 8012f2e:	4240      	negs	r0, r0
 8012f30:	601a      	str	r2, [r3, #0]
 8012f32:	4770      	bx	lr
 8012f34:	200006c8 	.word	0x200006c8

08012f38 <_read>:
 8012f38:	2258      	movs	r2, #88	; 0x58
 8012f3a:	2001      	movs	r0, #1
 8012f3c:	4b01      	ldr	r3, [pc, #4]	; (8012f44 <_read+0xc>)
 8012f3e:	4240      	negs	r0, r0
 8012f40:	601a      	str	r2, [r3, #0]
 8012f42:	4770      	bx	lr
 8012f44:	200006c8 	.word	0x200006c8

08012f48 <cos>:
 8012f48:	b530      	push	{r4, r5, lr}
 8012f4a:	4a20      	ldr	r2, [pc, #128]	; (8012fcc <cos+0x84>)
 8012f4c:	004b      	lsls	r3, r1, #1
 8012f4e:	b087      	sub	sp, #28
 8012f50:	085b      	lsrs	r3, r3, #1
 8012f52:	4293      	cmp	r3, r2
 8012f54:	dd1c      	ble.n	8012f90 <cos+0x48>
 8012f56:	4a1e      	ldr	r2, [pc, #120]	; (8012fd0 <cos+0x88>)
 8012f58:	4293      	cmp	r3, r2
 8012f5a:	dd05      	ble.n	8012f68 <cos+0x20>
 8012f5c:	0002      	movs	r2, r0
 8012f5e:	000b      	movs	r3, r1
 8012f60:	f7fd fc0c 	bl	801077c <__aeabi_dsub>
 8012f64:	b007      	add	sp, #28
 8012f66:	bd30      	pop	{r4, r5, pc}
 8012f68:	aa02      	add	r2, sp, #8
 8012f6a:	f000 f9db 	bl	8013324 <__ieee754_rem_pio2>
 8012f6e:	2303      	movs	r3, #3
 8012f70:	4018      	ands	r0, r3
 8012f72:	9a04      	ldr	r2, [sp, #16]
 8012f74:	9b05      	ldr	r3, [sp, #20]
 8012f76:	2801      	cmp	r0, #1
 8012f78:	d00f      	beq.n	8012f9a <cos+0x52>
 8012f7a:	2802      	cmp	r0, #2
 8012f7c:	d01c      	beq.n	8012fb8 <cos+0x70>
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	d015      	beq.n	8012fae <cos+0x66>
 8012f82:	9802      	ldr	r0, [sp, #8]
 8012f84:	9903      	ldr	r1, [sp, #12]
 8012f86:	2401      	movs	r4, #1
 8012f88:	9400      	str	r4, [sp, #0]
 8012f8a:	f001 fb7f 	bl	801468c <__kernel_sin>
 8012f8e:	e7e9      	b.n	8012f64 <cos+0x1c>
 8012f90:	2200      	movs	r2, #0
 8012f92:	2300      	movs	r3, #0
 8012f94:	f000 fe00 	bl	8013b98 <__kernel_cos>
 8012f98:	e7e4      	b.n	8012f64 <cos+0x1c>
 8012f9a:	9000      	str	r0, [sp, #0]
 8012f9c:	9802      	ldr	r0, [sp, #8]
 8012f9e:	9903      	ldr	r1, [sp, #12]
 8012fa0:	f001 fb74 	bl	801468c <__kernel_sin>
 8012fa4:	2380      	movs	r3, #128	; 0x80
 8012fa6:	061b      	lsls	r3, r3, #24
 8012fa8:	469c      	mov	ip, r3
 8012faa:	4461      	add	r1, ip
 8012fac:	e7da      	b.n	8012f64 <cos+0x1c>
 8012fae:	9802      	ldr	r0, [sp, #8]
 8012fb0:	9903      	ldr	r1, [sp, #12]
 8012fb2:	f000 fdf1 	bl	8013b98 <__kernel_cos>
 8012fb6:	e7d5      	b.n	8012f64 <cos+0x1c>
 8012fb8:	9802      	ldr	r0, [sp, #8]
 8012fba:	9903      	ldr	r1, [sp, #12]
 8012fbc:	f000 fdec 	bl	8013b98 <__kernel_cos>
 8012fc0:	2380      	movs	r3, #128	; 0x80
 8012fc2:	061b      	lsls	r3, r3, #24
 8012fc4:	469c      	mov	ip, r3
 8012fc6:	4461      	add	r1, ip
 8012fc8:	e7cc      	b.n	8012f64 <cos+0x1c>
 8012fca:	46c0      	nop			; (mov r8, r8)
 8012fcc:	3fe921fb 	.word	0x3fe921fb
 8012fd0:	7fefffff 	.word	0x7fefffff

08012fd4 <fmaxf>:
 8012fd4:	b570      	push	{r4, r5, r6, lr}
 8012fd6:	1c04      	adds	r4, r0, #0
 8012fd8:	1c0d      	adds	r5, r1, #0
 8012fda:	f000 f811 	bl	8013000 <__fpclassifyf>
 8012fde:	2800      	cmp	r0, #0
 8012fe0:	d102      	bne.n	8012fe8 <fmaxf+0x14>
 8012fe2:	1c2c      	adds	r4, r5, #0
 8012fe4:	1c20      	adds	r0, r4, #0
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	1c28      	adds	r0, r5, #0
 8012fea:	f000 f809 	bl	8013000 <__fpclassifyf>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d0f8      	beq.n	8012fe4 <fmaxf+0x10>
 8012ff2:	1c29      	adds	r1, r5, #0
 8012ff4:	1c20      	adds	r0, r4, #0
 8012ff6:	f7fb ff77 	bl	800eee8 <__aeabi_fcmpgt>
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	d0f1      	beq.n	8012fe2 <fmaxf+0xe>
 8012ffe:	e7f1      	b.n	8012fe4 <fmaxf+0x10>

08013000 <__fpclassifyf>:
 8013000:	0040      	lsls	r0, r0, #1
 8013002:	0840      	lsrs	r0, r0, #1
 8013004:	d00e      	beq.n	8013024 <__fpclassifyf+0x24>
 8013006:	4b0a      	ldr	r3, [pc, #40]	; (8013030 <__fpclassifyf+0x30>)
 8013008:	4a0a      	ldr	r2, [pc, #40]	; (8013034 <__fpclassifyf+0x34>)
 801300a:	18c3      	adds	r3, r0, r3
 801300c:	4293      	cmp	r3, r2
 801300e:	d90b      	bls.n	8013028 <__fpclassifyf+0x28>
 8013010:	4a09      	ldr	r2, [pc, #36]	; (8013038 <__fpclassifyf+0x38>)
 8013012:	1e43      	subs	r3, r0, #1
 8013014:	4293      	cmp	r3, r2
 8013016:	d909      	bls.n	801302c <__fpclassifyf+0x2c>
 8013018:	4b08      	ldr	r3, [pc, #32]	; (801303c <__fpclassifyf+0x3c>)
 801301a:	469c      	mov	ip, r3
 801301c:	4460      	add	r0, ip
 801301e:	4243      	negs	r3, r0
 8013020:	4158      	adcs	r0, r3
 8013022:	4770      	bx	lr
 8013024:	2002      	movs	r0, #2
 8013026:	e7fc      	b.n	8013022 <__fpclassifyf+0x22>
 8013028:	2004      	movs	r0, #4
 801302a:	e7fa      	b.n	8013022 <__fpclassifyf+0x22>
 801302c:	2003      	movs	r0, #3
 801302e:	e7f8      	b.n	8013022 <__fpclassifyf+0x22>
 8013030:	ff800000 	.word	0xff800000
 8013034:	7effffff 	.word	0x7effffff
 8013038:	007ffffe 	.word	0x007ffffe
 801303c:	80800000 	.word	0x80800000

08013040 <roundf>:
 8013040:	0043      	lsls	r3, r0, #1
 8013042:	0e1b      	lsrs	r3, r3, #24
 8013044:	3b7f      	subs	r3, #127	; 0x7f
 8013046:	b510      	push	{r4, lr}
 8013048:	1c01      	adds	r1, r0, #0
 801304a:	2b16      	cmp	r3, #22
 801304c:	dc0b      	bgt.n	8013066 <roundf+0x26>
 801304e:	2b00      	cmp	r3, #0
 8013050:	db0e      	blt.n	8013070 <roundf+0x30>
 8013052:	4c0b      	ldr	r4, [pc, #44]	; (8013080 <roundf+0x40>)
 8013054:	411c      	asrs	r4, r3
 8013056:	4204      	tst	r4, r0
 8013058:	d004      	beq.n	8013064 <roundf+0x24>
 801305a:	2280      	movs	r2, #128	; 0x80
 801305c:	03d2      	lsls	r2, r2, #15
 801305e:	411a      	asrs	r2, r3
 8013060:	1810      	adds	r0, r2, r0
 8013062:	43a0      	bics	r0, r4
 8013064:	bd10      	pop	{r4, pc}
 8013066:	2b80      	cmp	r3, #128	; 0x80
 8013068:	d1fc      	bne.n	8013064 <roundf+0x24>
 801306a:	f7fa ff85 	bl	800df78 <__aeabi_fadd>
 801306e:	e7f9      	b.n	8013064 <roundf+0x24>
 8013070:	0fc0      	lsrs	r0, r0, #31
 8013072:	07c0      	lsls	r0, r0, #31
 8013074:	3301      	adds	r3, #1
 8013076:	d1f5      	bne.n	8013064 <roundf+0x24>
 8013078:	23fe      	movs	r3, #254	; 0xfe
 801307a:	059b      	lsls	r3, r3, #22
 801307c:	4318      	orrs	r0, r3
 801307e:	e7f1      	b.n	8013064 <roundf+0x24>
 8013080:	007fffff 	.word	0x007fffff

08013084 <sqrt>:
 8013084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013086:	4647      	mov	r7, r8
 8013088:	46ce      	mov	lr, r9
 801308a:	b580      	push	{r7, lr}
 801308c:	b08d      	sub	sp, #52	; 0x34
 801308e:	0004      	movs	r4, r0
 8013090:	000d      	movs	r5, r1
 8013092:	f000 fb57 	bl	8013744 <__ieee754_sqrt>
 8013096:	4b29      	ldr	r3, [pc, #164]	; (801313c <sqrt+0xb8>)
 8013098:	0006      	movs	r6, r0
 801309a:	781b      	ldrb	r3, [r3, #0]
 801309c:	000f      	movs	r7, r1
 801309e:	b25b      	sxtb	r3, r3
 80130a0:	4698      	mov	r8, r3
 80130a2:	3301      	adds	r3, #1
 80130a4:	d010      	beq.n	80130c8 <sqrt+0x44>
 80130a6:	0022      	movs	r2, r4
 80130a8:	002b      	movs	r3, r5
 80130aa:	0020      	movs	r0, r4
 80130ac:	0029      	movs	r1, r5
 80130ae:	f7fd fead 	bl	8010e0c <__aeabi_dcmpun>
 80130b2:	4681      	mov	r9, r0
 80130b4:	2800      	cmp	r0, #0
 80130b6:	d107      	bne.n	80130c8 <sqrt+0x44>
 80130b8:	2200      	movs	r2, #0
 80130ba:	2300      	movs	r3, #0
 80130bc:	0020      	movs	r0, r4
 80130be:	0029      	movs	r1, r5
 80130c0:	f7fb fec4 	bl	800ee4c <__aeabi_dcmplt>
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d106      	bne.n	80130d6 <sqrt+0x52>
 80130c8:	0030      	movs	r0, r6
 80130ca:	0039      	movs	r1, r7
 80130cc:	b00d      	add	sp, #52	; 0x34
 80130ce:	bc0c      	pop	{r2, r3}
 80130d0:	4690      	mov	r8, r2
 80130d2:	4699      	mov	r9, r3
 80130d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d6:	2301      	movs	r3, #1
 80130d8:	9302      	str	r3, [sp, #8]
 80130da:	4b19      	ldr	r3, [pc, #100]	; (8013140 <sqrt+0xbc>)
 80130dc:	9406      	str	r4, [sp, #24]
 80130de:	9507      	str	r5, [sp, #28]
 80130e0:	9303      	str	r3, [sp, #12]
 80130e2:	464b      	mov	r3, r9
 80130e4:	930a      	str	r3, [sp, #40]	; 0x28
 80130e6:	4643      	mov	r3, r8
 80130e8:	9404      	str	r4, [sp, #16]
 80130ea:	9505      	str	r5, [sp, #20]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d015      	beq.n	801311c <sqrt+0x98>
 80130f0:	2300      	movs	r3, #0
 80130f2:	2200      	movs	r2, #0
 80130f4:	0019      	movs	r1, r3
 80130f6:	0010      	movs	r0, r2
 80130f8:	f7fc fcc4 	bl	800fa84 <__aeabi_ddiv>
 80130fc:	4643      	mov	r3, r8
 80130fe:	9008      	str	r0, [sp, #32]
 8013100:	9109      	str	r1, [sp, #36]	; 0x24
 8013102:	2b02      	cmp	r3, #2
 8013104:	d10e      	bne.n	8013124 <sqrt+0xa0>
 8013106:	f7ff fbdf 	bl	80128c8 <__errno>
 801310a:	2321      	movs	r3, #33	; 0x21
 801310c:	6003      	str	r3, [r0, #0]
 801310e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d10c      	bne.n	8013130 <sqrt+0xac>
 8013116:	9e08      	ldr	r6, [sp, #32]
 8013118:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801311a:	e7d5      	b.n	80130c8 <sqrt+0x44>
 801311c:	2300      	movs	r3, #0
 801311e:	2400      	movs	r4, #0
 8013120:	9308      	str	r3, [sp, #32]
 8013122:	9409      	str	r4, [sp, #36]	; 0x24
 8013124:	a802      	add	r0, sp, #8
 8013126:	f001 fc03 	bl	8014930 <matherr>
 801312a:	2800      	cmp	r0, #0
 801312c:	d1ef      	bne.n	801310e <sqrt+0x8a>
 801312e:	e7ea      	b.n	8013106 <sqrt+0x82>
 8013130:	f7ff fbca 	bl	80128c8 <__errno>
 8013134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013136:	9301      	str	r3, [sp, #4]
 8013138:	6003      	str	r3, [r0, #0]
 801313a:	e7ec      	b.n	8013116 <sqrt+0x92>
 801313c:	2000006c 	.word	0x2000006c
 8013140:	0801e348 	.word	0x0801e348

08013144 <expf>:
 8013144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013146:	b08b      	sub	sp, #44	; 0x2c
 8013148:	1c04      	adds	r4, r0, #0
 801314a:	f000 fbd3 	bl	80138f4 <__ieee754_expf>
 801314e:	2300      	movs	r3, #0
 8013150:	4e30      	ldr	r6, [pc, #192]	; (8013214 <expf+0xd0>)
 8013152:	1c05      	adds	r5, r0, #0
 8013154:	56f3      	ldrsb	r3, [r6, r3]
 8013156:	3301      	adds	r3, #1
 8013158:	d036      	beq.n	80131c8 <expf+0x84>
 801315a:	1c20      	adds	r0, r4, #0
 801315c:	f001 fc58 	bl	8014a10 <finitef>
 8013160:	2800      	cmp	r0, #0
 8013162:	d031      	beq.n	80131c8 <expf+0x84>
 8013164:	492c      	ldr	r1, [pc, #176]	; (8013218 <expf+0xd4>)
 8013166:	1c20      	adds	r0, r4, #0
 8013168:	f7fb febe 	bl	800eee8 <__aeabi_fcmpgt>
 801316c:	1e07      	subs	r7, r0, #0
 801316e:	d12e      	bne.n	80131ce <expf+0x8a>
 8013170:	492a      	ldr	r1, [pc, #168]	; (801321c <expf+0xd8>)
 8013172:	1c20      	adds	r0, r4, #0
 8013174:	f7fb fea4 	bl	800eec0 <__aeabi_fcmplt>
 8013178:	2800      	cmp	r0, #0
 801317a:	d025      	beq.n	80131c8 <expf+0x84>
 801317c:	2304      	movs	r3, #4
 801317e:	466d      	mov	r5, sp
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	4b27      	ldr	r3, [pc, #156]	; (8013220 <expf+0xdc>)
 8013184:	622f      	str	r7, [r5, #32]
 8013186:	606b      	str	r3, [r5, #4]
 8013188:	1c20      	adds	r0, r4, #0
 801318a:	f7fd fefd 	bl	8010f88 <__aeabi_f2d>
 801318e:	2300      	movs	r3, #0
 8013190:	2200      	movs	r2, #0
 8013192:	61aa      	str	r2, [r5, #24]
 8013194:	61eb      	str	r3, [r5, #28]
 8013196:	2300      	movs	r3, #0
 8013198:	56f3      	ldrsb	r3, [r6, r3]
 801319a:	6128      	str	r0, [r5, #16]
 801319c:	6169      	str	r1, [r5, #20]
 801319e:	60a8      	str	r0, [r5, #8]
 80131a0:	60e9      	str	r1, [r5, #12]
 80131a2:	2b02      	cmp	r3, #2
 80131a4:	d031      	beq.n	801320a <expf+0xc6>
 80131a6:	0028      	movs	r0, r5
 80131a8:	f001 fbc2 	bl	8014930 <matherr>
 80131ac:	2800      	cmp	r0, #0
 80131ae:	d02c      	beq.n	801320a <expf+0xc6>
 80131b0:	6a2b      	ldr	r3, [r5, #32]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d003      	beq.n	80131be <expf+0x7a>
 80131b6:	f7ff fb87 	bl	80128c8 <__errno>
 80131ba:	6a2b      	ldr	r3, [r5, #32]
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	69a8      	ldr	r0, [r5, #24]
 80131c0:	69e9      	ldr	r1, [r5, #28]
 80131c2:	f7fd ff33 	bl	801102c <__aeabi_d2f>
 80131c6:	1c05      	adds	r5, r0, #0
 80131c8:	1c28      	adds	r0, r5, #0
 80131ca:	b00b      	add	sp, #44	; 0x2c
 80131cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131ce:	2303      	movs	r3, #3
 80131d0:	466d      	mov	r5, sp
 80131d2:	9300      	str	r3, [sp, #0]
 80131d4:	4b12      	ldr	r3, [pc, #72]	; (8013220 <expf+0xdc>)
 80131d6:	1c20      	adds	r0, r4, #0
 80131d8:	606b      	str	r3, [r5, #4]
 80131da:	2300      	movs	r3, #0
 80131dc:	622b      	str	r3, [r5, #32]
 80131de:	f7fd fed3 	bl	8010f88 <__aeabi_f2d>
 80131e2:	2300      	movs	r3, #0
 80131e4:	56f3      	ldrsb	r3, [r6, r3]
 80131e6:	6128      	str	r0, [r5, #16]
 80131e8:	6169      	str	r1, [r5, #20]
 80131ea:	60a8      	str	r0, [r5, #8]
 80131ec:	60e9      	str	r1, [r5, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d105      	bne.n	80131fe <expf+0xba>
 80131f2:	22e0      	movs	r2, #224	; 0xe0
 80131f4:	4b0b      	ldr	r3, [pc, #44]	; (8013224 <expf+0xe0>)
 80131f6:	0612      	lsls	r2, r2, #24
 80131f8:	61aa      	str	r2, [r5, #24]
 80131fa:	61eb      	str	r3, [r5, #28]
 80131fc:	e7d3      	b.n	80131a6 <expf+0x62>
 80131fe:	2000      	movs	r0, #0
 8013200:	4909      	ldr	r1, [pc, #36]	; (8013228 <expf+0xe4>)
 8013202:	61a8      	str	r0, [r5, #24]
 8013204:	61e9      	str	r1, [r5, #28]
 8013206:	2b02      	cmp	r3, #2
 8013208:	d1cd      	bne.n	80131a6 <expf+0x62>
 801320a:	f7ff fb5d 	bl	80128c8 <__errno>
 801320e:	2322      	movs	r3, #34	; 0x22
 8013210:	6003      	str	r3, [r0, #0]
 8013212:	e7cd      	b.n	80131b0 <expf+0x6c>
 8013214:	2000006c 	.word	0x2000006c
 8013218:	42b17180 	.word	0x42b17180
 801321c:	c2cff1b5 	.word	0xc2cff1b5
 8013220:	0801e350 	.word	0x0801e350
 8013224:	47efffff 	.word	0x47efffff
 8013228:	7ff00000 	.word	0x7ff00000

0801322c <log10f>:
 801322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801322e:	2500      	movs	r5, #0
 8013230:	b08d      	sub	sp, #52	; 0x34
 8013232:	1c04      	adds	r4, r0, #0
 8013234:	f000 fc58 	bl	8013ae8 <__ieee754_log10f>
 8013238:	4b35      	ldr	r3, [pc, #212]	; (8013310 <log10f+0xe4>)
 801323a:	1c06      	adds	r6, r0, #0
 801323c:	575d      	ldrsb	r5, [r3, r5]
 801323e:	1c6b      	adds	r3, r5, #1
 8013240:	d00b      	beq.n	801325a <log10f+0x2e>
 8013242:	1c21      	adds	r1, r4, #0
 8013244:	1c20      	adds	r0, r4, #0
 8013246:	f7fc f841 	bl	800f2cc <__aeabi_fcmpun>
 801324a:	1e07      	subs	r7, r0, #0
 801324c:	d105      	bne.n	801325a <log10f+0x2e>
 801324e:	2100      	movs	r1, #0
 8013250:	1c20      	adds	r0, r4, #0
 8013252:	f7fb fe3f 	bl	800eed4 <__aeabi_fcmple>
 8013256:	2800      	cmp	r0, #0
 8013258:	d102      	bne.n	8013260 <log10f+0x34>
 801325a:	1c30      	adds	r0, r6, #0
 801325c:	b00d      	add	sp, #52	; 0x34
 801325e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013260:	4b2c      	ldr	r3, [pc, #176]	; (8013314 <log10f+0xe8>)
 8013262:	1c20      	adds	r0, r4, #0
 8013264:	9303      	str	r3, [sp, #12]
 8013266:	970a      	str	r7, [sp, #40]	; 0x28
 8013268:	f7fd fe8e 	bl	8010f88 <__aeabi_f2d>
 801326c:	9006      	str	r0, [sp, #24]
 801326e:	9107      	str	r1, [sp, #28]
 8013270:	9004      	str	r0, [sp, #16]
 8013272:	9105      	str	r1, [sp, #20]
 8013274:	2d00      	cmp	r5, #0
 8013276:	d11b      	bne.n	80132b0 <log10f+0x84>
 8013278:	22e0      	movs	r2, #224	; 0xe0
 801327a:	4b27      	ldr	r3, [pc, #156]	; (8013318 <log10f+0xec>)
 801327c:	0612      	lsls	r2, r2, #24
 801327e:	2100      	movs	r1, #0
 8013280:	1c20      	adds	r0, r4, #0
 8013282:	9208      	str	r2, [sp, #32]
 8013284:	9309      	str	r3, [sp, #36]	; 0x24
 8013286:	f7fb fe15 	bl	800eeb4 <__aeabi_fcmpeq>
 801328a:	2800      	cmp	r0, #0
 801328c:	d037      	beq.n	80132fe <log10f+0xd2>
 801328e:	2302      	movs	r3, #2
 8013290:	9302      	str	r3, [sp, #8]
 8013292:	a802      	add	r0, sp, #8
 8013294:	f001 fb4c 	bl	8014930 <matherr>
 8013298:	2800      	cmp	r0, #0
 801329a:	d017      	beq.n	80132cc <log10f+0xa0>
 801329c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801329e:	9301      	str	r3, [sp, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d118      	bne.n	80132d6 <log10f+0xaa>
 80132a4:	9808      	ldr	r0, [sp, #32]
 80132a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132a8:	f7fd fec0 	bl	801102c <__aeabi_d2f>
 80132ac:	1c06      	adds	r6, r0, #0
 80132ae:	e7d4      	b.n	801325a <log10f+0x2e>
 80132b0:	2200      	movs	r2, #0
 80132b2:	4b1a      	ldr	r3, [pc, #104]	; (801331c <log10f+0xf0>)
 80132b4:	2100      	movs	r1, #0
 80132b6:	1c20      	adds	r0, r4, #0
 80132b8:	9208      	str	r2, [sp, #32]
 80132ba:	9309      	str	r3, [sp, #36]	; 0x24
 80132bc:	f7fb fdfa 	bl	800eeb4 <__aeabi_fcmpeq>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d00e      	beq.n	80132e2 <log10f+0xb6>
 80132c4:	2302      	movs	r3, #2
 80132c6:	9302      	str	r3, [sp, #8]
 80132c8:	2d02      	cmp	r5, #2
 80132ca:	d1e2      	bne.n	8013292 <log10f+0x66>
 80132cc:	f7ff fafc 	bl	80128c8 <__errno>
 80132d0:	2322      	movs	r3, #34	; 0x22
 80132d2:	6003      	str	r3, [r0, #0]
 80132d4:	e7e2      	b.n	801329c <log10f+0x70>
 80132d6:	f7ff faf7 	bl	80128c8 <__errno>
 80132da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132dc:	9301      	str	r3, [sp, #4]
 80132de:	6003      	str	r3, [r0, #0]
 80132e0:	e7e0      	b.n	80132a4 <log10f+0x78>
 80132e2:	2301      	movs	r3, #1
 80132e4:	9302      	str	r3, [sp, #8]
 80132e6:	2d02      	cmp	r5, #2
 80132e8:	d10b      	bne.n	8013302 <log10f+0xd6>
 80132ea:	f7ff faed 	bl	80128c8 <__errno>
 80132ee:	2321      	movs	r3, #33	; 0x21
 80132f0:	6003      	str	r3, [r0, #0]
 80132f2:	480b      	ldr	r0, [pc, #44]	; (8013320 <log10f+0xf4>)
 80132f4:	f001 fb1e 	bl	8014934 <nan>
 80132f8:	9008      	str	r0, [sp, #32]
 80132fa:	9109      	str	r1, [sp, #36]	; 0x24
 80132fc:	e7ce      	b.n	801329c <log10f+0x70>
 80132fe:	2301      	movs	r3, #1
 8013300:	9302      	str	r3, [sp, #8]
 8013302:	a802      	add	r0, sp, #8
 8013304:	f001 fb14 	bl	8014930 <matherr>
 8013308:	2800      	cmp	r0, #0
 801330a:	d1f2      	bne.n	80132f2 <log10f+0xc6>
 801330c:	e7ed      	b.n	80132ea <log10f+0xbe>
 801330e:	46c0      	nop			; (mov r8, r8)
 8013310:	2000006c 	.word	0x2000006c
 8013314:	0801e358 	.word	0x0801e358
 8013318:	c7efffff 	.word	0xc7efffff
 801331c:	fff00000 	.word	0xfff00000
 8013320:	0801c3e8 	.word	0x0801c3e8

08013324 <__ieee754_rem_pio2>:
 8013324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013326:	464e      	mov	r6, r9
 8013328:	4645      	mov	r5, r8
 801332a:	46de      	mov	lr, fp
 801332c:	4657      	mov	r7, sl
 801332e:	b5e0      	push	{r5, r6, r7, lr}
 8013330:	4be1      	ldr	r3, [pc, #900]	; (80136b8 <__ieee754_rem_pio2+0x394>)
 8013332:	004c      	lsls	r4, r1, #1
 8013334:	b08f      	sub	sp, #60	; 0x3c
 8013336:	4690      	mov	r8, r2
 8013338:	4689      	mov	r9, r1
 801333a:	0864      	lsrs	r4, r4, #1
 801333c:	429c      	cmp	r4, r3
 801333e:	dc00      	bgt.n	8013342 <__ieee754_rem_pio2+0x1e>
 8013340:	e087      	b.n	8013452 <__ieee754_rem_pio2+0x12e>
 8013342:	4bde      	ldr	r3, [pc, #888]	; (80136bc <__ieee754_rem_pio2+0x398>)
 8013344:	429c      	cmp	r4, r3
 8013346:	dc22      	bgt.n	801338e <__ieee754_rem_pio2+0x6a>
 8013348:	4add      	ldr	r2, [pc, #884]	; (80136c0 <__ieee754_rem_pio2+0x39c>)
 801334a:	2900      	cmp	r1, #0
 801334c:	dc00      	bgt.n	8013350 <__ieee754_rem_pio2+0x2c>
 801334e:	e092      	b.n	8013476 <__ieee754_rem_pio2+0x152>
 8013350:	4bdc      	ldr	r3, [pc, #880]	; (80136c4 <__ieee754_rem_pio2+0x3a0>)
 8013352:	f7fd fa13 	bl	801077c <__aeabi_dsub>
 8013356:	4bdb      	ldr	r3, [pc, #876]	; (80136c4 <__ieee754_rem_pio2+0x3a0>)
 8013358:	0006      	movs	r6, r0
 801335a:	000f      	movs	r7, r1
 801335c:	429c      	cmp	r4, r3
 801335e:	d100      	bne.n	8013362 <__ieee754_rem_pio2+0x3e>
 8013360:	e17e      	b.n	8013660 <__ieee754_rem_pio2+0x33c>
 8013362:	4ad9      	ldr	r2, [pc, #868]	; (80136c8 <__ieee754_rem_pio2+0x3a4>)
 8013364:	4bd9      	ldr	r3, [pc, #868]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 8013366:	f7fd fa09 	bl	801077c <__aeabi_dsub>
 801336a:	0002      	movs	r2, r0
 801336c:	000b      	movs	r3, r1
 801336e:	4641      	mov	r1, r8
 8013370:	0030      	movs	r0, r6
 8013372:	600a      	str	r2, [r1, #0]
 8013374:	604b      	str	r3, [r1, #4]
 8013376:	0039      	movs	r1, r7
 8013378:	f7fd fa00 	bl	801077c <__aeabi_dsub>
 801337c:	4bd3      	ldr	r3, [pc, #844]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 801337e:	4ad2      	ldr	r2, [pc, #840]	; (80136c8 <__ieee754_rem_pio2+0x3a4>)
 8013380:	f7fd f9fc 	bl	801077c <__aeabi_dsub>
 8013384:	4643      	mov	r3, r8
 8013386:	2501      	movs	r5, #1
 8013388:	6098      	str	r0, [r3, #8]
 801338a:	60d9      	str	r1, [r3, #12]
 801338c:	e06b      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 801338e:	4bd0      	ldr	r3, [pc, #832]	; (80136d0 <__ieee754_rem_pio2+0x3ac>)
 8013390:	429c      	cmp	r4, r3
 8013392:	dc00      	bgt.n	8013396 <__ieee754_rem_pio2+0x72>
 8013394:	e08f      	b.n	80134b6 <__ieee754_rem_pio2+0x192>
 8013396:	4bcf      	ldr	r3, [pc, #828]	; (80136d4 <__ieee754_rem_pio2+0x3b0>)
 8013398:	429c      	cmp	r4, r3
 801339a:	dd00      	ble.n	801339e <__ieee754_rem_pio2+0x7a>
 801339c:	e155      	b.n	801364a <__ieee754_rem_pio2+0x326>
 801339e:	4ace      	ldr	r2, [pc, #824]	; (80136d8 <__ieee754_rem_pio2+0x3b4>)
 80133a0:	1523      	asrs	r3, r4, #20
 80133a2:	4692      	mov	sl, r2
 80133a4:	449a      	add	sl, r3
 80133a6:	4651      	mov	r1, sl
 80133a8:	0509      	lsls	r1, r1, #20
 80133aa:	1a63      	subs	r3, r4, r1
 80133ac:	0019      	movs	r1, r3
 80133ae:	001d      	movs	r5, r3
 80133b0:	0004      	movs	r4, r0
 80133b2:	f7fd fd47 	bl	8010e44 <__aeabi_d2iz>
 80133b6:	f7fd fd7b 	bl	8010eb0 <__aeabi_i2d>
 80133ba:	0002      	movs	r2, r0
 80133bc:	000b      	movs	r3, r1
 80133be:	0020      	movs	r0, r4
 80133c0:	0029      	movs	r1, r5
 80133c2:	9208      	str	r2, [sp, #32]
 80133c4:	9309      	str	r3, [sp, #36]	; 0x24
 80133c6:	f7fd f9d9 	bl	801077c <__aeabi_dsub>
 80133ca:	2200      	movs	r2, #0
 80133cc:	4bc3      	ldr	r3, [pc, #780]	; (80136dc <__ieee754_rem_pio2+0x3b8>)
 80133ce:	f7fc ff63 	bl	8010298 <__aeabi_dmul>
 80133d2:	000f      	movs	r7, r1
 80133d4:	0006      	movs	r6, r0
 80133d6:	f7fd fd35 	bl	8010e44 <__aeabi_d2iz>
 80133da:	f7fd fd69 	bl	8010eb0 <__aeabi_i2d>
 80133de:	0004      	movs	r4, r0
 80133e0:	000d      	movs	r5, r1
 80133e2:	0002      	movs	r2, r0
 80133e4:	000b      	movs	r3, r1
 80133e6:	0030      	movs	r0, r6
 80133e8:	0039      	movs	r1, r7
 80133ea:	940a      	str	r4, [sp, #40]	; 0x28
 80133ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80133ee:	f7fd f9c5 	bl	801077c <__aeabi_dsub>
 80133f2:	2200      	movs	r2, #0
 80133f4:	4bb9      	ldr	r3, [pc, #740]	; (80136dc <__ieee754_rem_pio2+0x3b8>)
 80133f6:	f7fc ff4f 	bl	8010298 <__aeabi_dmul>
 80133fa:	2200      	movs	r2, #0
 80133fc:	2300      	movs	r3, #0
 80133fe:	900c      	str	r0, [sp, #48]	; 0x30
 8013400:	910d      	str	r1, [sp, #52]	; 0x34
 8013402:	f7fb fd1d 	bl	800ee40 <__aeabi_dcmpeq>
 8013406:	2800      	cmp	r0, #0
 8013408:	d100      	bne.n	801340c <__ieee754_rem_pio2+0xe8>
 801340a:	e192      	b.n	8013732 <__ieee754_rem_pio2+0x40e>
 801340c:	2300      	movs	r3, #0
 801340e:	2200      	movs	r2, #0
 8013410:	0020      	movs	r0, r4
 8013412:	0029      	movs	r1, r5
 8013414:	f7fb fd14 	bl	800ee40 <__aeabi_dcmpeq>
 8013418:	4243      	negs	r3, r0
 801341a:	4143      	adcs	r3, r0
 801341c:	3301      	adds	r3, #1
 801341e:	4ab0      	ldr	r2, [pc, #704]	; (80136e0 <__ieee754_rem_pio2+0x3bc>)
 8013420:	4641      	mov	r1, r8
 8013422:	9201      	str	r2, [sp, #4]
 8013424:	2202      	movs	r2, #2
 8013426:	a808      	add	r0, sp, #32
 8013428:	9200      	str	r2, [sp, #0]
 801342a:	4652      	mov	r2, sl
 801342c:	f000 fcce 	bl	8013dcc <__kernel_rem_pio2>
 8013430:	464b      	mov	r3, r9
 8013432:	0005      	movs	r5, r0
 8013434:	2b00      	cmp	r3, #0
 8013436:	da16      	bge.n	8013466 <__ieee754_rem_pio2+0x142>
 8013438:	2280      	movs	r2, #128	; 0x80
 801343a:	4643      	mov	r3, r8
 801343c:	0612      	lsls	r2, r2, #24
 801343e:	4694      	mov	ip, r2
 8013440:	4642      	mov	r2, r8
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	4245      	negs	r5, r0
 8013446:	4463      	add	r3, ip
 8013448:	6053      	str	r3, [r2, #4]
 801344a:	68d3      	ldr	r3, [r2, #12]
 801344c:	4463      	add	r3, ip
 801344e:	60d3      	str	r3, [r2, #12]
 8013450:	e009      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 8013452:	000b      	movs	r3, r1
 8013454:	0002      	movs	r2, r0
 8013456:	4641      	mov	r1, r8
 8013458:	600a      	str	r2, [r1, #0]
 801345a:	604b      	str	r3, [r1, #4]
 801345c:	2200      	movs	r2, #0
 801345e:	2300      	movs	r3, #0
 8013460:	2500      	movs	r5, #0
 8013462:	608a      	str	r2, [r1, #8]
 8013464:	60cb      	str	r3, [r1, #12]
 8013466:	0028      	movs	r0, r5
 8013468:	b00f      	add	sp, #60	; 0x3c
 801346a:	bc3c      	pop	{r2, r3, r4, r5}
 801346c:	4690      	mov	r8, r2
 801346e:	4699      	mov	r9, r3
 8013470:	46a2      	mov	sl, r4
 8013472:	46ab      	mov	fp, r5
 8013474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013476:	4b93      	ldr	r3, [pc, #588]	; (80136c4 <__ieee754_rem_pio2+0x3a0>)
 8013478:	f7fb ffe8 	bl	800f44c <__aeabi_dadd>
 801347c:	4b91      	ldr	r3, [pc, #580]	; (80136c4 <__ieee754_rem_pio2+0x3a0>)
 801347e:	0006      	movs	r6, r0
 8013480:	000f      	movs	r7, r1
 8013482:	429c      	cmp	r4, r3
 8013484:	d100      	bne.n	8013488 <__ieee754_rem_pio2+0x164>
 8013486:	e13d      	b.n	8013704 <__ieee754_rem_pio2+0x3e0>
 8013488:	4a8f      	ldr	r2, [pc, #572]	; (80136c8 <__ieee754_rem_pio2+0x3a4>)
 801348a:	4b90      	ldr	r3, [pc, #576]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 801348c:	f7fb ffde 	bl	800f44c <__aeabi_dadd>
 8013490:	0002      	movs	r2, r0
 8013492:	000b      	movs	r3, r1
 8013494:	4641      	mov	r1, r8
 8013496:	0030      	movs	r0, r6
 8013498:	600a      	str	r2, [r1, #0]
 801349a:	604b      	str	r3, [r1, #4]
 801349c:	0039      	movs	r1, r7
 801349e:	f7fd f96d 	bl	801077c <__aeabi_dsub>
 80134a2:	4a89      	ldr	r2, [pc, #548]	; (80136c8 <__ieee754_rem_pio2+0x3a4>)
 80134a4:	4b89      	ldr	r3, [pc, #548]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 80134a6:	f7fb ffd1 	bl	800f44c <__aeabi_dadd>
 80134aa:	2501      	movs	r5, #1
 80134ac:	4643      	mov	r3, r8
 80134ae:	426d      	negs	r5, r5
 80134b0:	6098      	str	r0, [r3, #8]
 80134b2:	60d9      	str	r1, [r3, #12]
 80134b4:	e7d7      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 80134b6:	f001 f99b 	bl	80147f0 <fabs>
 80134ba:	4a8a      	ldr	r2, [pc, #552]	; (80136e4 <__ieee754_rem_pio2+0x3c0>)
 80134bc:	4b8a      	ldr	r3, [pc, #552]	; (80136e8 <__ieee754_rem_pio2+0x3c4>)
 80134be:	0006      	movs	r6, r0
 80134c0:	000f      	movs	r7, r1
 80134c2:	f7fc fee9 	bl	8010298 <__aeabi_dmul>
 80134c6:	2200      	movs	r2, #0
 80134c8:	4b88      	ldr	r3, [pc, #544]	; (80136ec <__ieee754_rem_pio2+0x3c8>)
 80134ca:	f7fb ffbf 	bl	800f44c <__aeabi_dadd>
 80134ce:	f7fd fcb9 	bl	8010e44 <__aeabi_d2iz>
 80134d2:	0005      	movs	r5, r0
 80134d4:	f7fd fcec 	bl	8010eb0 <__aeabi_i2d>
 80134d8:	4a79      	ldr	r2, [pc, #484]	; (80136c0 <__ieee754_rem_pio2+0x39c>)
 80134da:	4b7a      	ldr	r3, [pc, #488]	; (80136c4 <__ieee754_rem_pio2+0x3a0>)
 80134dc:	9004      	str	r0, [sp, #16]
 80134de:	9105      	str	r1, [sp, #20]
 80134e0:	f7fc feda 	bl	8010298 <__aeabi_dmul>
 80134e4:	0002      	movs	r2, r0
 80134e6:	000b      	movs	r3, r1
 80134e8:	0030      	movs	r0, r6
 80134ea:	0039      	movs	r1, r7
 80134ec:	f7fd f946 	bl	801077c <__aeabi_dsub>
 80134f0:	4a75      	ldr	r2, [pc, #468]	; (80136c8 <__ieee754_rem_pio2+0x3a4>)
 80134f2:	0006      	movs	r6, r0
 80134f4:	000f      	movs	r7, r1
 80134f6:	9804      	ldr	r0, [sp, #16]
 80134f8:	9905      	ldr	r1, [sp, #20]
 80134fa:	4b74      	ldr	r3, [pc, #464]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 80134fc:	f7fc fecc 	bl	8010298 <__aeabi_dmul>
 8013500:	9002      	str	r0, [sp, #8]
 8013502:	9103      	str	r1, [sp, #12]
 8013504:	2d1f      	cmp	r5, #31
 8013506:	dc00      	bgt.n	801350a <__ieee754_rem_pio2+0x1e6>
 8013508:	e0c7      	b.n	801369a <__ieee754_rem_pio2+0x376>
 801350a:	9a02      	ldr	r2, [sp, #8]
 801350c:	9b03      	ldr	r3, [sp, #12]
 801350e:	0030      	movs	r0, r6
 8013510:	0039      	movs	r1, r7
 8013512:	f7fd f933 	bl	801077c <__aeabi_dsub>
 8013516:	4683      	mov	fp, r0
 8013518:	468a      	mov	sl, r1
 801351a:	4653      	mov	r3, sl
 801351c:	005b      	lsls	r3, r3, #1
 801351e:	1524      	asrs	r4, r4, #20
 8013520:	0d5b      	lsrs	r3, r3, #21
 8013522:	1ae3      	subs	r3, r4, r3
 8013524:	2b10      	cmp	r3, #16
 8013526:	dd6c      	ble.n	8013602 <__ieee754_rem_pio2+0x2de>
 8013528:	9804      	ldr	r0, [sp, #16]
 801352a:	9905      	ldr	r1, [sp, #20]
 801352c:	22d3      	movs	r2, #211	; 0xd3
 801352e:	4b67      	ldr	r3, [pc, #412]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 8013530:	0552      	lsls	r2, r2, #21
 8013532:	f7fc feb1 	bl	8010298 <__aeabi_dmul>
 8013536:	0002      	movs	r2, r0
 8013538:	000b      	movs	r3, r1
 801353a:	0030      	movs	r0, r6
 801353c:	0039      	movs	r1, r7
 801353e:	9202      	str	r2, [sp, #8]
 8013540:	9303      	str	r3, [sp, #12]
 8013542:	f7fd f91b 	bl	801077c <__aeabi_dsub>
 8013546:	000a      	movs	r2, r1
 8013548:	0001      	movs	r1, r0
 801354a:	0013      	movs	r3, r2
 801354c:	9106      	str	r1, [sp, #24]
 801354e:	9207      	str	r2, [sp, #28]
 8013550:	0002      	movs	r2, r0
 8013552:	0039      	movs	r1, r7
 8013554:	0030      	movs	r0, r6
 8013556:	f7fd f911 	bl	801077c <__aeabi_dsub>
 801355a:	9a02      	ldr	r2, [sp, #8]
 801355c:	9b03      	ldr	r3, [sp, #12]
 801355e:	f7fd f90d 	bl	801077c <__aeabi_dsub>
 8013562:	0006      	movs	r6, r0
 8013564:	000f      	movs	r7, r1
 8013566:	9804      	ldr	r0, [sp, #16]
 8013568:	9905      	ldr	r1, [sp, #20]
 801356a:	4a61      	ldr	r2, [pc, #388]	; (80136f0 <__ieee754_rem_pio2+0x3cc>)
 801356c:	4b61      	ldr	r3, [pc, #388]	; (80136f4 <__ieee754_rem_pio2+0x3d0>)
 801356e:	f7fc fe93 	bl	8010298 <__aeabi_dmul>
 8013572:	0032      	movs	r2, r6
 8013574:	003b      	movs	r3, r7
 8013576:	f7fd f901 	bl	801077c <__aeabi_dsub>
 801357a:	9e06      	ldr	r6, [sp, #24]
 801357c:	9f07      	ldr	r7, [sp, #28]
 801357e:	000b      	movs	r3, r1
 8013580:	0002      	movs	r2, r0
 8013582:	0039      	movs	r1, r7
 8013584:	0030      	movs	r0, r6
 8013586:	9202      	str	r2, [sp, #8]
 8013588:	9303      	str	r3, [sp, #12]
 801358a:	f7fd f8f7 	bl	801077c <__aeabi_dsub>
 801358e:	004b      	lsls	r3, r1, #1
 8013590:	0d5b      	lsrs	r3, r3, #21
 8013592:	4683      	mov	fp, r0
 8013594:	468a      	mov	sl, r1
 8013596:	1ae4      	subs	r4, r4, r3
 8013598:	2c31      	cmp	r4, #49	; 0x31
 801359a:	dd32      	ble.n	8013602 <__ieee754_rem_pio2+0x2de>
 801359c:	9804      	ldr	r0, [sp, #16]
 801359e:	9905      	ldr	r1, [sp, #20]
 80135a0:	22b8      	movs	r2, #184	; 0xb8
 80135a2:	4b54      	ldr	r3, [pc, #336]	; (80136f4 <__ieee754_rem_pio2+0x3d0>)
 80135a4:	0592      	lsls	r2, r2, #22
 80135a6:	f7fc fe77 	bl	8010298 <__aeabi_dmul>
 80135aa:	0003      	movs	r3, r0
 80135ac:	000c      	movs	r4, r1
 80135ae:	0002      	movs	r2, r0
 80135b0:	9302      	str	r3, [sp, #8]
 80135b2:	9403      	str	r4, [sp, #12]
 80135b4:	000b      	movs	r3, r1
 80135b6:	9806      	ldr	r0, [sp, #24]
 80135b8:	9907      	ldr	r1, [sp, #28]
 80135ba:	f7fd f8df 	bl	801077c <__aeabi_dsub>
 80135be:	0002      	movs	r2, r0
 80135c0:	000b      	movs	r3, r1
 80135c2:	0006      	movs	r6, r0
 80135c4:	000f      	movs	r7, r1
 80135c6:	9806      	ldr	r0, [sp, #24]
 80135c8:	9907      	ldr	r1, [sp, #28]
 80135ca:	f7fd f8d7 	bl	801077c <__aeabi_dsub>
 80135ce:	9a02      	ldr	r2, [sp, #8]
 80135d0:	9b03      	ldr	r3, [sp, #12]
 80135d2:	f7fd f8d3 	bl	801077c <__aeabi_dsub>
 80135d6:	4a48      	ldr	r2, [pc, #288]	; (80136f8 <__ieee754_rem_pio2+0x3d4>)
 80135d8:	9002      	str	r0, [sp, #8]
 80135da:	9103      	str	r1, [sp, #12]
 80135dc:	9804      	ldr	r0, [sp, #16]
 80135de:	9905      	ldr	r1, [sp, #20]
 80135e0:	4b46      	ldr	r3, [pc, #280]	; (80136fc <__ieee754_rem_pio2+0x3d8>)
 80135e2:	f7fc fe59 	bl	8010298 <__aeabi_dmul>
 80135e6:	9a02      	ldr	r2, [sp, #8]
 80135e8:	9b03      	ldr	r3, [sp, #12]
 80135ea:	f7fd f8c7 	bl	801077c <__aeabi_dsub>
 80135ee:	0002      	movs	r2, r0
 80135f0:	000b      	movs	r3, r1
 80135f2:	0030      	movs	r0, r6
 80135f4:	0039      	movs	r1, r7
 80135f6:	9202      	str	r2, [sp, #8]
 80135f8:	9303      	str	r3, [sp, #12]
 80135fa:	f7fd f8bf 	bl	801077c <__aeabi_dsub>
 80135fe:	4683      	mov	fp, r0
 8013600:	468a      	mov	sl, r1
 8013602:	465a      	mov	r2, fp
 8013604:	4653      	mov	r3, sl
 8013606:	4641      	mov	r1, r8
 8013608:	0030      	movs	r0, r6
 801360a:	600a      	str	r2, [r1, #0]
 801360c:	604b      	str	r3, [r1, #4]
 801360e:	0039      	movs	r1, r7
 8013610:	f7fd f8b4 	bl	801077c <__aeabi_dsub>
 8013614:	9a02      	ldr	r2, [sp, #8]
 8013616:	9b03      	ldr	r3, [sp, #12]
 8013618:	f7fd f8b0 	bl	801077c <__aeabi_dsub>
 801361c:	4644      	mov	r4, r8
 801361e:	000b      	movs	r3, r1
 8013620:	0002      	movs	r2, r0
 8013622:	60a2      	str	r2, [r4, #8]
 8013624:	60e3      	str	r3, [r4, #12]
 8013626:	464b      	mov	r3, r9
 8013628:	2b00      	cmp	r3, #0
 801362a:	db00      	blt.n	801362e <__ieee754_rem_pio2+0x30a>
 801362c:	e71b      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 801362e:	465b      	mov	r3, fp
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	2380      	movs	r3, #128	; 0x80
 8013634:	061b      	lsls	r3, r3, #24
 8013636:	4453      	add	r3, sl
 8013638:	6063      	str	r3, [r4, #4]
 801363a:	2380      	movs	r3, #128	; 0x80
 801363c:	061b      	lsls	r3, r3, #24
 801363e:	469c      	mov	ip, r3
 8013640:	4461      	add	r1, ip
 8013642:	60a0      	str	r0, [r4, #8]
 8013644:	60e1      	str	r1, [r4, #12]
 8013646:	426d      	negs	r5, r5
 8013648:	e70d      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 801364a:	000b      	movs	r3, r1
 801364c:	0002      	movs	r2, r0
 801364e:	f7fd f895 	bl	801077c <__aeabi_dsub>
 8013652:	4643      	mov	r3, r8
 8013654:	2500      	movs	r5, #0
 8013656:	6098      	str	r0, [r3, #8]
 8013658:	60d9      	str	r1, [r3, #12]
 801365a:	6018      	str	r0, [r3, #0]
 801365c:	6059      	str	r1, [r3, #4]
 801365e:	e702      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 8013660:	22d3      	movs	r2, #211	; 0xd3
 8013662:	4b1a      	ldr	r3, [pc, #104]	; (80136cc <__ieee754_rem_pio2+0x3a8>)
 8013664:	0552      	lsls	r2, r2, #21
 8013666:	f7fd f889 	bl	801077c <__aeabi_dsub>
 801366a:	4a21      	ldr	r2, [pc, #132]	; (80136f0 <__ieee754_rem_pio2+0x3cc>)
 801366c:	4b21      	ldr	r3, [pc, #132]	; (80136f4 <__ieee754_rem_pio2+0x3d0>)
 801366e:	000d      	movs	r5, r1
 8013670:	0004      	movs	r4, r0
 8013672:	f7fd f883 	bl	801077c <__aeabi_dsub>
 8013676:	0002      	movs	r2, r0
 8013678:	000b      	movs	r3, r1
 801367a:	4641      	mov	r1, r8
 801367c:	0020      	movs	r0, r4
 801367e:	600a      	str	r2, [r1, #0]
 8013680:	604b      	str	r3, [r1, #4]
 8013682:	0029      	movs	r1, r5
 8013684:	f7fd f87a 	bl	801077c <__aeabi_dsub>
 8013688:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <__ieee754_rem_pio2+0x3d0>)
 801368a:	4a19      	ldr	r2, [pc, #100]	; (80136f0 <__ieee754_rem_pio2+0x3cc>)
 801368c:	f7fd f876 	bl	801077c <__aeabi_dsub>
 8013690:	4643      	mov	r3, r8
 8013692:	2501      	movs	r5, #1
 8013694:	6098      	str	r0, [r3, #8]
 8013696:	60d9      	str	r1, [r3, #12]
 8013698:	e6e5      	b.n	8013466 <__ieee754_rem_pio2+0x142>
 801369a:	0002      	movs	r2, r0
 801369c:	000b      	movs	r3, r1
 801369e:	0030      	movs	r0, r6
 80136a0:	0039      	movs	r1, r7
 80136a2:	f7fd f86b 	bl	801077c <__aeabi_dsub>
 80136a6:	1e6b      	subs	r3, r5, #1
 80136a8:	4a15      	ldr	r2, [pc, #84]	; (8013700 <__ieee754_rem_pio2+0x3dc>)
 80136aa:	009b      	lsls	r3, r3, #2
 80136ac:	589b      	ldr	r3, [r3, r2]
 80136ae:	4683      	mov	fp, r0
 80136b0:	468a      	mov	sl, r1
 80136b2:	42a3      	cmp	r3, r4
 80136b4:	d1a5      	bne.n	8013602 <__ieee754_rem_pio2+0x2de>
 80136b6:	e730      	b.n	801351a <__ieee754_rem_pio2+0x1f6>
 80136b8:	3fe921fb 	.word	0x3fe921fb
 80136bc:	4002d97b 	.word	0x4002d97b
 80136c0:	54400000 	.word	0x54400000
 80136c4:	3ff921fb 	.word	0x3ff921fb
 80136c8:	1a626331 	.word	0x1a626331
 80136cc:	3dd0b461 	.word	0x3dd0b461
 80136d0:	413921fb 	.word	0x413921fb
 80136d4:	7fefffff 	.word	0x7fefffff
 80136d8:	fffffbea 	.word	0xfffffbea
 80136dc:	41700000 	.word	0x41700000
 80136e0:	0801e3e0 	.word	0x0801e3e0
 80136e4:	6dc9c883 	.word	0x6dc9c883
 80136e8:	3fe45f30 	.word	0x3fe45f30
 80136ec:	3fe00000 	.word	0x3fe00000
 80136f0:	2e037073 	.word	0x2e037073
 80136f4:	3ba3198a 	.word	0x3ba3198a
 80136f8:	252049c1 	.word	0x252049c1
 80136fc:	397b839a 	.word	0x397b839a
 8013700:	0801e360 	.word	0x0801e360
 8013704:	22d3      	movs	r2, #211	; 0xd3
 8013706:	4b0c      	ldr	r3, [pc, #48]	; (8013738 <__ieee754_rem_pio2+0x414>)
 8013708:	0552      	lsls	r2, r2, #21
 801370a:	f7fb fe9f 	bl	800f44c <__aeabi_dadd>
 801370e:	4a0b      	ldr	r2, [pc, #44]	; (801373c <__ieee754_rem_pio2+0x418>)
 8013710:	4b0b      	ldr	r3, [pc, #44]	; (8013740 <__ieee754_rem_pio2+0x41c>)
 8013712:	0004      	movs	r4, r0
 8013714:	000d      	movs	r5, r1
 8013716:	f7fb fe99 	bl	800f44c <__aeabi_dadd>
 801371a:	0002      	movs	r2, r0
 801371c:	000b      	movs	r3, r1
 801371e:	4641      	mov	r1, r8
 8013720:	0020      	movs	r0, r4
 8013722:	600a      	str	r2, [r1, #0]
 8013724:	604b      	str	r3, [r1, #4]
 8013726:	0029      	movs	r1, r5
 8013728:	f7fd f828 	bl	801077c <__aeabi_dsub>
 801372c:	4a03      	ldr	r2, [pc, #12]	; (801373c <__ieee754_rem_pio2+0x418>)
 801372e:	4b04      	ldr	r3, [pc, #16]	; (8013740 <__ieee754_rem_pio2+0x41c>)
 8013730:	e6b9      	b.n	80134a6 <__ieee754_rem_pio2+0x182>
 8013732:	2303      	movs	r3, #3
 8013734:	e673      	b.n	801341e <__ieee754_rem_pio2+0xfa>
 8013736:	46c0      	nop			; (mov r8, r8)
 8013738:	3dd0b461 	.word	0x3dd0b461
 801373c:	2e037073 	.word	0x2e037073
 8013740:	3ba3198a 	.word	0x3ba3198a

08013744 <__ieee754_sqrt>:
 8013744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013746:	4647      	mov	r7, r8
 8013748:	46ce      	mov	lr, r9
 801374a:	4b67      	ldr	r3, [pc, #412]	; (80138e8 <__ieee754_sqrt+0x1a4>)
 801374c:	b580      	push	{r7, lr}
 801374e:	000a      	movs	r2, r1
 8013750:	000f      	movs	r7, r1
 8013752:	0019      	movs	r1, r3
 8013754:	0005      	movs	r5, r0
 8013756:	4039      	ands	r1, r7
 8013758:	4299      	cmp	r1, r3
 801375a:	d100      	bne.n	801375e <__ieee754_sqrt+0x1a>
 801375c:	e09b      	b.n	8013896 <__ieee754_sqrt+0x152>
 801375e:	0004      	movs	r4, r0
 8013760:	0001      	movs	r1, r0
 8013762:	2f00      	cmp	r7, #0
 8013764:	dd69      	ble.n	801383a <__ieee754_sqrt+0xf6>
 8013766:	153f      	asrs	r7, r7, #20
 8013768:	d100      	bne.n	801376c <__ieee754_sqrt+0x28>
 801376a:	e0b4      	b.n	80138d6 <__ieee754_sqrt+0x192>
 801376c:	4b5f      	ldr	r3, [pc, #380]	; (80138ec <__ieee754_sqrt+0x1a8>)
 801376e:	0312      	lsls	r2, r2, #12
 8013770:	469c      	mov	ip, r3
 8013772:	2380      	movs	r3, #128	; 0x80
 8013774:	0b12      	lsrs	r2, r2, #12
 8013776:	035b      	lsls	r3, r3, #13
 8013778:	4313      	orrs	r3, r2
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	0fca      	lsrs	r2, r1, #31
 801377e:	4467      	add	r7, ip
 8013780:	189b      	adds	r3, r3, r2
 8013782:	004a      	lsls	r2, r1, #1
 8013784:	07f8      	lsls	r0, r7, #31
 8013786:	d503      	bpl.n	8013790 <__ieee754_sqrt+0x4c>
 8013788:	0fd2      	lsrs	r2, r2, #31
 801378a:	005b      	lsls	r3, r3, #1
 801378c:	189b      	adds	r3, r3, r2
 801378e:	008a      	lsls	r2, r1, #2
 8013790:	1079      	asrs	r1, r7, #1
 8013792:	468c      	mov	ip, r1
 8013794:	2100      	movs	r1, #0
 8013796:	2080      	movs	r0, #128	; 0x80
 8013798:	2416      	movs	r4, #22
 801379a:	4689      	mov	r9, r1
 801379c:	0380      	lsls	r0, r0, #14
 801379e:	180d      	adds	r5, r1, r0
 80137a0:	429d      	cmp	r5, r3
 80137a2:	dc02      	bgt.n	80137aa <__ieee754_sqrt+0x66>
 80137a4:	1829      	adds	r1, r5, r0
 80137a6:	1b5b      	subs	r3, r3, r5
 80137a8:	4481      	add	r9, r0
 80137aa:	0fd5      	lsrs	r5, r2, #31
 80137ac:	005b      	lsls	r3, r3, #1
 80137ae:	3c01      	subs	r4, #1
 80137b0:	195b      	adds	r3, r3, r5
 80137b2:	0052      	lsls	r2, r2, #1
 80137b4:	0840      	lsrs	r0, r0, #1
 80137b6:	2c00      	cmp	r4, #0
 80137b8:	d1f1      	bne.n	801379e <__ieee754_sqrt+0x5a>
 80137ba:	2000      	movs	r0, #0
 80137bc:	4680      	mov	r8, r0
 80137be:	2080      	movs	r0, #128	; 0x80
 80137c0:	2520      	movs	r5, #32
 80137c2:	2700      	movs	r7, #0
 80137c4:	0600      	lsls	r0, r0, #24
 80137c6:	e009      	b.n	80137dc <__ieee754_sqrt+0x98>
 80137c8:	428b      	cmp	r3, r1
 80137ca:	d05c      	beq.n	8013886 <__ieee754_sqrt+0x142>
 80137cc:	0fd4      	lsrs	r4, r2, #31
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	3d01      	subs	r5, #1
 80137d2:	18e3      	adds	r3, r4, r3
 80137d4:	0052      	lsls	r2, r2, #1
 80137d6:	0840      	lsrs	r0, r0, #1
 80137d8:	2d00      	cmp	r5, #0
 80137da:	d016      	beq.n	801380a <__ieee754_sqrt+0xc6>
 80137dc:	19c4      	adds	r4, r0, r7
 80137de:	428b      	cmp	r3, r1
 80137e0:	ddf2      	ble.n	80137c8 <__ieee754_sqrt+0x84>
 80137e2:	1827      	adds	r7, r4, r0
 80137e4:	000e      	movs	r6, r1
 80137e6:	2c00      	cmp	r4, #0
 80137e8:	db49      	blt.n	801387e <__ieee754_sqrt+0x13a>
 80137ea:	1a5b      	subs	r3, r3, r1
 80137ec:	42a2      	cmp	r2, r4
 80137ee:	4189      	sbcs	r1, r1
 80137f0:	4249      	negs	r1, r1
 80137f2:	1a5b      	subs	r3, r3, r1
 80137f4:	1b12      	subs	r2, r2, r4
 80137f6:	0fd4      	lsrs	r4, r2, #31
 80137f8:	005b      	lsls	r3, r3, #1
 80137fa:	3d01      	subs	r5, #1
 80137fc:	4480      	add	r8, r0
 80137fe:	0031      	movs	r1, r6
 8013800:	18e3      	adds	r3, r4, r3
 8013802:	0052      	lsls	r2, r2, #1
 8013804:	0840      	lsrs	r0, r0, #1
 8013806:	2d00      	cmp	r5, #0
 8013808:	d1e8      	bne.n	80137dc <__ieee754_sqrt+0x98>
 801380a:	4313      	orrs	r3, r2
 801380c:	d14e      	bne.n	80138ac <__ieee754_sqrt+0x168>
 801380e:	4643      	mov	r3, r8
 8013810:	085b      	lsrs	r3, r3, #1
 8013812:	4937      	ldr	r1, [pc, #220]	; (80138f0 <__ieee754_sqrt+0x1ac>)
 8013814:	464a      	mov	r2, r9
 8013816:	4688      	mov	r8, r1
 8013818:	4649      	mov	r1, r9
 801381a:	1052      	asrs	r2, r2, #1
 801381c:	4442      	add	r2, r8
 801381e:	07c9      	lsls	r1, r1, #31
 8013820:	d502      	bpl.n	8013828 <__ieee754_sqrt+0xe4>
 8013822:	2180      	movs	r1, #128	; 0x80
 8013824:	0609      	lsls	r1, r1, #24
 8013826:	430b      	orrs	r3, r1
 8013828:	4661      	mov	r1, ip
 801382a:	050f      	lsls	r7, r1, #20
 801382c:	18bd      	adds	r5, r7, r2
 801382e:	0018      	movs	r0, r3
 8013830:	0029      	movs	r1, r5
 8013832:	bc0c      	pop	{r2, r3}
 8013834:	4690      	mov	r8, r2
 8013836:	4699      	mov	r9, r3
 8013838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801383a:	007b      	lsls	r3, r7, #1
 801383c:	085b      	lsrs	r3, r3, #1
 801383e:	4303      	orrs	r3, r0
 8013840:	0039      	movs	r1, r7
 8013842:	2b00      	cmp	r3, #0
 8013844:	d0f5      	beq.n	8013832 <__ieee754_sqrt+0xee>
 8013846:	2f00      	cmp	r7, #0
 8013848:	d13c      	bne.n	80138c4 <__ieee754_sqrt+0x180>
 801384a:	0ae3      	lsrs	r3, r4, #11
 801384c:	3a15      	subs	r2, #21
 801384e:	0564      	lsls	r4, r4, #21
 8013850:	2b00      	cmp	r3, #0
 8013852:	d0fa      	beq.n	801384a <__ieee754_sqrt+0x106>
 8013854:	2080      	movs	r0, #128	; 0x80
 8013856:	0340      	lsls	r0, r0, #13
 8013858:	4203      	tst	r3, r0
 801385a:	d13f      	bne.n	80138dc <__ieee754_sqrt+0x198>
 801385c:	2700      	movs	r7, #0
 801385e:	e000      	b.n	8013862 <__ieee754_sqrt+0x11e>
 8013860:	000f      	movs	r7, r1
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	1c79      	adds	r1, r7, #1
 8013866:	4203      	tst	r3, r0
 8013868:	d0fa      	beq.n	8013860 <__ieee754_sqrt+0x11c>
 801386a:	0025      	movs	r5, r4
 801386c:	2020      	movs	r0, #32
 801386e:	408d      	lsls	r5, r1
 8013870:	1a40      	subs	r0, r0, r1
 8013872:	0029      	movs	r1, r5
 8013874:	1bd7      	subs	r7, r2, r7
 8013876:	0022      	movs	r2, r4
 8013878:	40c2      	lsrs	r2, r0
 801387a:	431a      	orrs	r2, r3
 801387c:	e776      	b.n	801376c <__ieee754_sqrt+0x28>
 801387e:	43fe      	mvns	r6, r7
 8013880:	0ff6      	lsrs	r6, r6, #31
 8013882:	198e      	adds	r6, r1, r6
 8013884:	e7b1      	b.n	80137ea <__ieee754_sqrt+0xa6>
 8013886:	4294      	cmp	r4, r2
 8013888:	d8a0      	bhi.n	80137cc <__ieee754_sqrt+0x88>
 801388a:	1827      	adds	r7, r4, r0
 801388c:	2c00      	cmp	r4, #0
 801388e:	dbf6      	blt.n	801387e <__ieee754_sqrt+0x13a>
 8013890:	001e      	movs	r6, r3
 8013892:	2300      	movs	r3, #0
 8013894:	e7ae      	b.n	80137f4 <__ieee754_sqrt+0xb0>
 8013896:	0002      	movs	r2, r0
 8013898:	003b      	movs	r3, r7
 801389a:	0028      	movs	r0, r5
 801389c:	0039      	movs	r1, r7
 801389e:	f7fc fcfb 	bl	8010298 <__aeabi_dmul>
 80138a2:	002a      	movs	r2, r5
 80138a4:	003b      	movs	r3, r7
 80138a6:	f7fb fdd1 	bl	800f44c <__aeabi_dadd>
 80138aa:	e7c2      	b.n	8013832 <__ieee754_sqrt+0xee>
 80138ac:	4643      	mov	r3, r8
 80138ae:	3301      	adds	r3, #1
 80138b0:	d003      	beq.n	80138ba <__ieee754_sqrt+0x176>
 80138b2:	4643      	mov	r3, r8
 80138b4:	3301      	adds	r3, #1
 80138b6:	085b      	lsrs	r3, r3, #1
 80138b8:	e7ab      	b.n	8013812 <__ieee754_sqrt+0xce>
 80138ba:	2301      	movs	r3, #1
 80138bc:	4698      	mov	r8, r3
 80138be:	2300      	movs	r3, #0
 80138c0:	44c1      	add	r9, r8
 80138c2:	e7a6      	b.n	8013812 <__ieee754_sqrt+0xce>
 80138c4:	003b      	movs	r3, r7
 80138c6:	0002      	movs	r2, r0
 80138c8:	f7fc ff58 	bl	801077c <__aeabi_dsub>
 80138cc:	0002      	movs	r2, r0
 80138ce:	000b      	movs	r3, r1
 80138d0:	f7fc f8d8 	bl	800fa84 <__aeabi_ddiv>
 80138d4:	e7ad      	b.n	8013832 <__ieee754_sqrt+0xee>
 80138d6:	0013      	movs	r3, r2
 80138d8:	2200      	movs	r2, #0
 80138da:	e7bb      	b.n	8013854 <__ieee754_sqrt+0x110>
 80138dc:	2701      	movs	r7, #1
 80138de:	0021      	movs	r1, r4
 80138e0:	2020      	movs	r0, #32
 80138e2:	427f      	negs	r7, r7
 80138e4:	e7c6      	b.n	8013874 <__ieee754_sqrt+0x130>
 80138e6:	46c0      	nop			; (mov r8, r8)
 80138e8:	7ff00000 	.word	0x7ff00000
 80138ec:	fffffc01 	.word	0xfffffc01
 80138f0:	3fe00000 	.word	0x3fe00000

080138f4 <__ieee754_expf>:
 80138f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138f6:	22ff      	movs	r2, #255	; 0xff
 80138f8:	46d6      	mov	lr, sl
 80138fa:	464f      	mov	r7, r9
 80138fc:	4646      	mov	r6, r8
 80138fe:	0043      	lsls	r3, r0, #1
 8013900:	b5c0      	push	{r6, r7, lr}
 8013902:	1c04      	adds	r4, r0, #0
 8013904:	0001      	movs	r1, r0
 8013906:	085b      	lsrs	r3, r3, #1
 8013908:	05d2      	lsls	r2, r2, #23
 801390a:	4293      	cmp	r3, r2
 801390c:	d831      	bhi.n	8013972 <__ieee754_expf+0x7e>
 801390e:	0fc5      	lsrs	r5, r0, #31
 8013910:	4293      	cmp	r3, r2
 8013912:	d035      	beq.n	8013980 <__ieee754_expf+0x8c>
 8013914:	4a63      	ldr	r2, [pc, #396]	; (8013aa4 <__ieee754_expf+0x1b0>)
 8013916:	4290      	cmp	r0, r2
 8013918:	dc36      	bgt.n	8013988 <__ieee754_expf+0x94>
 801391a:	2800      	cmp	r0, #0
 801391c:	da00      	bge.n	8013920 <__ieee754_expf+0x2c>
 801391e:	e088      	b.n	8013a32 <__ieee754_expf+0x13e>
 8013920:	4a61      	ldr	r2, [pc, #388]	; (8013aa8 <__ieee754_expf+0x1b4>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d935      	bls.n	8013992 <__ieee754_expf+0x9e>
 8013926:	4a61      	ldr	r2, [pc, #388]	; (8013aac <__ieee754_expf+0x1b8>)
 8013928:	4293      	cmp	r3, r2
 801392a:	d800      	bhi.n	801392e <__ieee754_expf+0x3a>
 801392c:	e0a9      	b.n	8013a82 <__ieee754_expf+0x18e>
 801392e:	4960      	ldr	r1, [pc, #384]	; (8013ab0 <__ieee754_expf+0x1bc>)
 8013930:	1c20      	adds	r0, r4, #0
 8013932:	f7fa fdcd 	bl	800e4d0 <__aeabi_fmul>
 8013936:	4b5f      	ldr	r3, [pc, #380]	; (8013ab4 <__ieee754_expf+0x1c0>)
 8013938:	00ad      	lsls	r5, r5, #2
 801393a:	58e9      	ldr	r1, [r5, r3]
 801393c:	f7fa fb1c 	bl	800df78 <__aeabi_fadd>
 8013940:	f7fb fcda 	bl	800f2f8 <__aeabi_f2iz>
 8013944:	0005      	movs	r5, r0
 8013946:	f7fb fcf7 	bl	800f338 <__aeabi_i2f>
 801394a:	495b      	ldr	r1, [pc, #364]	; (8013ab8 <__ieee754_expf+0x1c4>)
 801394c:	1c07      	adds	r7, r0, #0
 801394e:	f7fa fdbf 	bl	800e4d0 <__aeabi_fmul>
 8013952:	1c01      	adds	r1, r0, #0
 8013954:	1c20      	adds	r0, r4, #0
 8013956:	f7fa feed 	bl	800e734 <__aeabi_fsub>
 801395a:	4958      	ldr	r1, [pc, #352]	; (8013abc <__ieee754_expf+0x1c8>)
 801395c:	4682      	mov	sl, r0
 801395e:	1c38      	adds	r0, r7, #0
 8013960:	f7fa fdb6 	bl	800e4d0 <__aeabi_fmul>
 8013964:	1c07      	adds	r7, r0, #0
 8013966:	1c39      	adds	r1, r7, #0
 8013968:	4650      	mov	r0, sl
 801396a:	f7fa fee3 	bl	800e734 <__aeabi_fsub>
 801396e:	1c04      	adds	r4, r0, #0
 8013970:	e013      	b.n	801399a <__ieee754_expf+0xa6>
 8013972:	f7fa fb01 	bl	800df78 <__aeabi_fadd>
 8013976:	bc1c      	pop	{r2, r3, r4}
 8013978:	4690      	mov	r8, r2
 801397a:	4699      	mov	r9, r3
 801397c:	46a2      	mov	sl, r4
 801397e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013980:	2d00      	cmp	r5, #0
 8013982:	d0f8      	beq.n	8013976 <__ieee754_expf+0x82>
 8013984:	2000      	movs	r0, #0
 8013986:	e7f6      	b.n	8013976 <__ieee754_expf+0x82>
 8013988:	494d      	ldr	r1, [pc, #308]	; (8013ac0 <__ieee754_expf+0x1cc>)
 801398a:	1c08      	adds	r0, r1, #0
 801398c:	f7fa fda0 	bl	800e4d0 <__aeabi_fmul>
 8013990:	e7f1      	b.n	8013976 <__ieee754_expf+0x82>
 8013992:	4a4c      	ldr	r2, [pc, #304]	; (8013ac4 <__ieee754_expf+0x1d0>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d964      	bls.n	8013a62 <__ieee754_expf+0x16e>
 8013998:	2500      	movs	r5, #0
 801399a:	1c21      	adds	r1, r4, #0
 801399c:	1c20      	adds	r0, r4, #0
 801399e:	f7fa fd97 	bl	800e4d0 <__aeabi_fmul>
 80139a2:	4949      	ldr	r1, [pc, #292]	; (8013ac8 <__ieee754_expf+0x1d4>)
 80139a4:	1c06      	adds	r6, r0, #0
 80139a6:	f7fa fd93 	bl	800e4d0 <__aeabi_fmul>
 80139aa:	4948      	ldr	r1, [pc, #288]	; (8013acc <__ieee754_expf+0x1d8>)
 80139ac:	f7fa fec2 	bl	800e734 <__aeabi_fsub>
 80139b0:	1c31      	adds	r1, r6, #0
 80139b2:	f7fa fd8d 	bl	800e4d0 <__aeabi_fmul>
 80139b6:	4946      	ldr	r1, [pc, #280]	; (8013ad0 <__ieee754_expf+0x1dc>)
 80139b8:	f7fa fade 	bl	800df78 <__aeabi_fadd>
 80139bc:	1c31      	adds	r1, r6, #0
 80139be:	f7fa fd87 	bl	800e4d0 <__aeabi_fmul>
 80139c2:	4944      	ldr	r1, [pc, #272]	; (8013ad4 <__ieee754_expf+0x1e0>)
 80139c4:	f7fa feb6 	bl	800e734 <__aeabi_fsub>
 80139c8:	1c31      	adds	r1, r6, #0
 80139ca:	f7fa fd81 	bl	800e4d0 <__aeabi_fmul>
 80139ce:	4942      	ldr	r1, [pc, #264]	; (8013ad8 <__ieee754_expf+0x1e4>)
 80139d0:	f7fa fad2 	bl	800df78 <__aeabi_fadd>
 80139d4:	1c31      	adds	r1, r6, #0
 80139d6:	f7fa fd7b 	bl	800e4d0 <__aeabi_fmul>
 80139da:	1c01      	adds	r1, r0, #0
 80139dc:	1c20      	adds	r0, r4, #0
 80139de:	f7fa fea9 	bl	800e734 <__aeabi_fsub>
 80139e2:	1c01      	adds	r1, r0, #0
 80139e4:	4680      	mov	r8, r0
 80139e6:	1c20      	adds	r0, r4, #0
 80139e8:	f7fa fd72 	bl	800e4d0 <__aeabi_fmul>
 80139ec:	4681      	mov	r9, r0
 80139ee:	2d00      	cmp	r5, #0
 80139f0:	d025      	beq.n	8013a3e <__ieee754_expf+0x14a>
 80139f2:	2080      	movs	r0, #128	; 0x80
 80139f4:	4641      	mov	r1, r8
 80139f6:	05c0      	lsls	r0, r0, #23
 80139f8:	f7fa fe9c 	bl	800e734 <__aeabi_fsub>
 80139fc:	1c01      	adds	r1, r0, #0
 80139fe:	4648      	mov	r0, r9
 8013a00:	f7fa fc54 	bl	800e2ac <__aeabi_fdiv>
 8013a04:	1c01      	adds	r1, r0, #0
 8013a06:	1c38      	adds	r0, r7, #0
 8013a08:	f7fa fe94 	bl	800e734 <__aeabi_fsub>
 8013a0c:	4651      	mov	r1, sl
 8013a0e:	f7fa fe91 	bl	800e734 <__aeabi_fsub>
 8013a12:	1c01      	adds	r1, r0, #0
 8013a14:	20fe      	movs	r0, #254	; 0xfe
 8013a16:	0580      	lsls	r0, r0, #22
 8013a18:	f7fa fe8c 	bl	800e734 <__aeabi_fsub>
 8013a1c:	002b      	movs	r3, r5
 8013a1e:	337d      	adds	r3, #125	; 0x7d
 8013a20:	da3c      	bge.n	8013a9c <__ieee754_expf+0x1a8>
 8013a22:	21d8      	movs	r1, #216	; 0xd8
 8013a24:	3564      	adds	r5, #100	; 0x64
 8013a26:	05ed      	lsls	r5, r5, #23
 8013a28:	1828      	adds	r0, r5, r0
 8013a2a:	0509      	lsls	r1, r1, #20
 8013a2c:	f7fa fd50 	bl	800e4d0 <__aeabi_fmul>
 8013a30:	e7a1      	b.n	8013976 <__ieee754_expf+0x82>
 8013a32:	4a2a      	ldr	r2, [pc, #168]	; (8013adc <__ieee754_expf+0x1e8>)
 8013a34:	4293      	cmp	r3, r2
 8013a36:	d800      	bhi.n	8013a3a <__ieee754_expf+0x146>
 8013a38:	e772      	b.n	8013920 <__ieee754_expf+0x2c>
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	e79b      	b.n	8013976 <__ieee754_expf+0x82>
 8013a3e:	2180      	movs	r1, #128	; 0x80
 8013a40:	4640      	mov	r0, r8
 8013a42:	05c9      	lsls	r1, r1, #23
 8013a44:	f7fa fe76 	bl	800e734 <__aeabi_fsub>
 8013a48:	1c01      	adds	r1, r0, #0
 8013a4a:	4648      	mov	r0, r9
 8013a4c:	f7fa fc2e 	bl	800e2ac <__aeabi_fdiv>
 8013a50:	1c21      	adds	r1, r4, #0
 8013a52:	f7fa fe6f 	bl	800e734 <__aeabi_fsub>
 8013a56:	1c01      	adds	r1, r0, #0
 8013a58:	20fe      	movs	r0, #254	; 0xfe
 8013a5a:	0580      	lsls	r0, r0, #22
 8013a5c:	f7fa fe6a 	bl	800e734 <__aeabi_fsub>
 8013a60:	e789      	b.n	8013976 <__ieee754_expf+0x82>
 8013a62:	4917      	ldr	r1, [pc, #92]	; (8013ac0 <__ieee754_expf+0x1cc>)
 8013a64:	1c20      	adds	r0, r4, #0
 8013a66:	f7fa fa87 	bl	800df78 <__aeabi_fadd>
 8013a6a:	21fe      	movs	r1, #254	; 0xfe
 8013a6c:	0589      	lsls	r1, r1, #22
 8013a6e:	f7fb fa3b 	bl	800eee8 <__aeabi_fcmpgt>
 8013a72:	2800      	cmp	r0, #0
 8013a74:	d090      	beq.n	8013998 <__ieee754_expf+0xa4>
 8013a76:	21fe      	movs	r1, #254	; 0xfe
 8013a78:	1c20      	adds	r0, r4, #0
 8013a7a:	0589      	lsls	r1, r1, #22
 8013a7c:	f7fa fa7c 	bl	800df78 <__aeabi_fadd>
 8013a80:	e779      	b.n	8013976 <__ieee754_expf+0x82>
 8013a82:	4b17      	ldr	r3, [pc, #92]	; (8013ae0 <__ieee754_expf+0x1ec>)
 8013a84:	00af      	lsls	r7, r5, #2
 8013a86:	58f9      	ldr	r1, [r7, r3]
 8013a88:	1c20      	adds	r0, r4, #0
 8013a8a:	2401      	movs	r4, #1
 8013a8c:	f7fa fe52 	bl	800e734 <__aeabi_fsub>
 8013a90:	4b14      	ldr	r3, [pc, #80]	; (8013ae4 <__ieee754_expf+0x1f0>)
 8013a92:	1b64      	subs	r4, r4, r5
 8013a94:	4682      	mov	sl, r0
 8013a96:	58ff      	ldr	r7, [r7, r3]
 8013a98:	1b65      	subs	r5, r4, r5
 8013a9a:	e764      	b.n	8013966 <__ieee754_expf+0x72>
 8013a9c:	05ed      	lsls	r5, r5, #23
 8013a9e:	1828      	adds	r0, r5, r0
 8013aa0:	e769      	b.n	8013976 <__ieee754_expf+0x82>
 8013aa2:	46c0      	nop			; (mov r8, r8)
 8013aa4:	42b17217 	.word	0x42b17217
 8013aa8:	3eb17218 	.word	0x3eb17218
 8013aac:	3f851591 	.word	0x3f851591
 8013ab0:	3fb8aa3b 	.word	0x3fb8aa3b
 8013ab4:	0801e4e8 	.word	0x0801e4e8
 8013ab8:	3f317180 	.word	0x3f317180
 8013abc:	3717f7d1 	.word	0x3717f7d1
 8013ac0:	7149f2ca 	.word	0x7149f2ca
 8013ac4:	317fffff 	.word	0x317fffff
 8013ac8:	3331bb4c 	.word	0x3331bb4c
 8013acc:	35ddea0e 	.word	0x35ddea0e
 8013ad0:	388ab355 	.word	0x388ab355
 8013ad4:	3b360b61 	.word	0x3b360b61
 8013ad8:	3e2aaaab 	.word	0x3e2aaaab
 8013adc:	42cff1b5 	.word	0x42cff1b5
 8013ae0:	0801e4f0 	.word	0x0801e4f0
 8013ae4:	0801e4f8 	.word	0x0801e4f8

08013ae8 <__ieee754_log10f>:
 8013ae8:	b570      	push	{r4, r5, r6, lr}
 8013aea:	0003      	movs	r3, r0
 8013aec:	0042      	lsls	r2, r0, #1
 8013aee:	d037      	beq.n	8013b60 <__ieee754_log10f+0x78>
 8013af0:	2800      	cmp	r0, #0
 8013af2:	db3b      	blt.n	8013b6c <__ieee754_log10f+0x84>
 8013af4:	4a23      	ldr	r2, [pc, #140]	; (8013b84 <__ieee754_log10f+0x9c>)
 8013af6:	4290      	cmp	r0, r2
 8013af8:	dc3f      	bgt.n	8013b7a <__ieee754_log10f+0x92>
 8013afa:	4923      	ldr	r1, [pc, #140]	; (8013b88 <__ieee754_log10f+0xa0>)
 8013afc:	2200      	movs	r2, #0
 8013afe:	4288      	cmp	r0, r1
 8013b00:	dc06      	bgt.n	8013b10 <__ieee754_log10f+0x28>
 8013b02:	2198      	movs	r1, #152	; 0x98
 8013b04:	05c9      	lsls	r1, r1, #23
 8013b06:	f7fa fce3 	bl	800e4d0 <__aeabi_fmul>
 8013b0a:	2219      	movs	r2, #25
 8013b0c:	0003      	movs	r3, r0
 8013b0e:	4252      	negs	r2, r2
 8013b10:	15d8      	asrs	r0, r3, #23
 8013b12:	387f      	subs	r0, #127	; 0x7f
 8013b14:	1880      	adds	r0, r0, r2
 8013b16:	0fc6      	lsrs	r6, r0, #31
 8013b18:	025b      	lsls	r3, r3, #9
 8013b1a:	1980      	adds	r0, r0, r6
 8013b1c:	0a5c      	lsrs	r4, r3, #9
 8013b1e:	f7fb fc0b 	bl	800f338 <__aeabi_i2f>
 8013b22:	1c05      	adds	r5, r0, #0
 8013b24:	207f      	movs	r0, #127	; 0x7f
 8013b26:	1b80      	subs	r0, r0, r6
 8013b28:	05c0      	lsls	r0, r0, #23
 8013b2a:	4320      	orrs	r0, r4
 8013b2c:	f000 ff7a 	bl	8014a24 <__ieee754_logf>
 8013b30:	4916      	ldr	r1, [pc, #88]	; (8013b8c <__ieee754_log10f+0xa4>)
 8013b32:	1c06      	adds	r6, r0, #0
 8013b34:	1c28      	adds	r0, r5, #0
 8013b36:	f7fa fccb 	bl	800e4d0 <__aeabi_fmul>
 8013b3a:	4915      	ldr	r1, [pc, #84]	; (8013b90 <__ieee754_log10f+0xa8>)
 8013b3c:	1c04      	adds	r4, r0, #0
 8013b3e:	1c30      	adds	r0, r6, #0
 8013b40:	f7fa fcc6 	bl	800e4d0 <__aeabi_fmul>
 8013b44:	1c01      	adds	r1, r0, #0
 8013b46:	1c20      	adds	r0, r4, #0
 8013b48:	f7fa fa16 	bl	800df78 <__aeabi_fadd>
 8013b4c:	4911      	ldr	r1, [pc, #68]	; (8013b94 <__ieee754_log10f+0xac>)
 8013b4e:	1c04      	adds	r4, r0, #0
 8013b50:	1c28      	adds	r0, r5, #0
 8013b52:	f7fa fcbd 	bl	800e4d0 <__aeabi_fmul>
 8013b56:	1c01      	adds	r1, r0, #0
 8013b58:	1c20      	adds	r0, r4, #0
 8013b5a:	f7fa fa0d 	bl	800df78 <__aeabi_fadd>
 8013b5e:	e004      	b.n	8013b6a <__ieee754_log10f+0x82>
 8013b60:	20cc      	movs	r0, #204	; 0xcc
 8013b62:	2100      	movs	r1, #0
 8013b64:	0600      	lsls	r0, r0, #24
 8013b66:	f7fa fba1 	bl	800e2ac <__aeabi_fdiv>
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	1c01      	adds	r1, r0, #0
 8013b6e:	f7fa fde1 	bl	800e734 <__aeabi_fsub>
 8013b72:	2100      	movs	r1, #0
 8013b74:	f7fa fb9a 	bl	800e2ac <__aeabi_fdiv>
 8013b78:	e7f7      	b.n	8013b6a <__ieee754_log10f+0x82>
 8013b7a:	1c01      	adds	r1, r0, #0
 8013b7c:	f7fa f9fc 	bl	800df78 <__aeabi_fadd>
 8013b80:	e7f3      	b.n	8013b6a <__ieee754_log10f+0x82>
 8013b82:	46c0      	nop			; (mov r8, r8)
 8013b84:	7f7fffff 	.word	0x7f7fffff
 8013b88:	007fffff 	.word	0x007fffff
 8013b8c:	355427db 	.word	0x355427db
 8013b90:	3ede5bd9 	.word	0x3ede5bd9
 8013b94:	3e9a2080 	.word	0x3e9a2080

08013b98 <__kernel_cos>:
 8013b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9a:	4647      	mov	r7, r8
 8013b9c:	46ce      	mov	lr, r9
 8013b9e:	b580      	push	{r7, lr}
 8013ba0:	b087      	sub	sp, #28
 8013ba2:	9200      	str	r2, [sp, #0]
 8013ba4:	9301      	str	r3, [sp, #4]
 8013ba6:	4b75      	ldr	r3, [pc, #468]	; (8013d7c <__kernel_cos+0x1e4>)
 8013ba8:	004f      	lsls	r7, r1, #1
 8013baa:	4681      	mov	r9, r0
 8013bac:	4688      	mov	r8, r1
 8013bae:	087f      	lsrs	r7, r7, #1
 8013bb0:	429f      	cmp	r7, r3
 8013bb2:	dc63      	bgt.n	8013c7c <__kernel_cos+0xe4>
 8013bb4:	f7fd f946 	bl	8010e44 <__aeabi_d2iz>
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	d100      	bne.n	8013bbe <__kernel_cos+0x26>
 8013bbc:	e0d4      	b.n	8013d68 <__kernel_cos+0x1d0>
 8013bbe:	464a      	mov	r2, r9
 8013bc0:	4643      	mov	r3, r8
 8013bc2:	4648      	mov	r0, r9
 8013bc4:	4641      	mov	r1, r8
 8013bc6:	f7fc fb67 	bl	8010298 <__aeabi_dmul>
 8013bca:	0004      	movs	r4, r0
 8013bcc:	000d      	movs	r5, r1
 8013bce:	4a6c      	ldr	r2, [pc, #432]	; (8013d80 <__kernel_cos+0x1e8>)
 8013bd0:	4b6c      	ldr	r3, [pc, #432]	; (8013d84 <__kernel_cos+0x1ec>)
 8013bd2:	f7fc fb61 	bl	8010298 <__aeabi_dmul>
 8013bd6:	4a6c      	ldr	r2, [pc, #432]	; (8013d88 <__kernel_cos+0x1f0>)
 8013bd8:	4b6c      	ldr	r3, [pc, #432]	; (8013d8c <__kernel_cos+0x1f4>)
 8013bda:	f7fb fc37 	bl	800f44c <__aeabi_dadd>
 8013bde:	0022      	movs	r2, r4
 8013be0:	002b      	movs	r3, r5
 8013be2:	f7fc fb59 	bl	8010298 <__aeabi_dmul>
 8013be6:	4a6a      	ldr	r2, [pc, #424]	; (8013d90 <__kernel_cos+0x1f8>)
 8013be8:	4b6a      	ldr	r3, [pc, #424]	; (8013d94 <__kernel_cos+0x1fc>)
 8013bea:	f7fc fdc7 	bl	801077c <__aeabi_dsub>
 8013bee:	0022      	movs	r2, r4
 8013bf0:	002b      	movs	r3, r5
 8013bf2:	f7fc fb51 	bl	8010298 <__aeabi_dmul>
 8013bf6:	4a68      	ldr	r2, [pc, #416]	; (8013d98 <__kernel_cos+0x200>)
 8013bf8:	4b68      	ldr	r3, [pc, #416]	; (8013d9c <__kernel_cos+0x204>)
 8013bfa:	f7fb fc27 	bl	800f44c <__aeabi_dadd>
 8013bfe:	0022      	movs	r2, r4
 8013c00:	002b      	movs	r3, r5
 8013c02:	f7fc fb49 	bl	8010298 <__aeabi_dmul>
 8013c06:	4a66      	ldr	r2, [pc, #408]	; (8013da0 <__kernel_cos+0x208>)
 8013c08:	4b66      	ldr	r3, [pc, #408]	; (8013da4 <__kernel_cos+0x20c>)
 8013c0a:	f7fc fdb7 	bl	801077c <__aeabi_dsub>
 8013c0e:	0022      	movs	r2, r4
 8013c10:	002b      	movs	r3, r5
 8013c12:	f7fc fb41 	bl	8010298 <__aeabi_dmul>
 8013c16:	4a64      	ldr	r2, [pc, #400]	; (8013da8 <__kernel_cos+0x210>)
 8013c18:	4b64      	ldr	r3, [pc, #400]	; (8013dac <__kernel_cos+0x214>)
 8013c1a:	f7fb fc17 	bl	800f44c <__aeabi_dadd>
 8013c1e:	0022      	movs	r2, r4
 8013c20:	002b      	movs	r3, r5
 8013c22:	f7fc fb39 	bl	8010298 <__aeabi_dmul>
 8013c26:	9002      	str	r0, [sp, #8]
 8013c28:	9103      	str	r1, [sp, #12]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	4b60      	ldr	r3, [pc, #384]	; (8013db0 <__kernel_cos+0x218>)
 8013c2e:	0020      	movs	r0, r4
 8013c30:	0029      	movs	r1, r5
 8013c32:	f7fc fb31 	bl	8010298 <__aeabi_dmul>
 8013c36:	9a02      	ldr	r2, [sp, #8]
 8013c38:	9b03      	ldr	r3, [sp, #12]
 8013c3a:	0006      	movs	r6, r0
 8013c3c:	000f      	movs	r7, r1
 8013c3e:	0020      	movs	r0, r4
 8013c40:	0029      	movs	r1, r5
 8013c42:	f7fc fb29 	bl	8010298 <__aeabi_dmul>
 8013c46:	9a00      	ldr	r2, [sp, #0]
 8013c48:	9b01      	ldr	r3, [sp, #4]
 8013c4a:	0004      	movs	r4, r0
 8013c4c:	000d      	movs	r5, r1
 8013c4e:	4648      	mov	r0, r9
 8013c50:	4641      	mov	r1, r8
 8013c52:	f7fc fb21 	bl	8010298 <__aeabi_dmul>
 8013c56:	0002      	movs	r2, r0
 8013c58:	000b      	movs	r3, r1
 8013c5a:	0020      	movs	r0, r4
 8013c5c:	0029      	movs	r1, r5
 8013c5e:	f7fc fd8d 	bl	801077c <__aeabi_dsub>
 8013c62:	0002      	movs	r2, r0
 8013c64:	000b      	movs	r3, r1
 8013c66:	0030      	movs	r0, r6
 8013c68:	0039      	movs	r1, r7
 8013c6a:	f7fc fd87 	bl	801077c <__aeabi_dsub>
 8013c6e:	0002      	movs	r2, r0
 8013c70:	000b      	movs	r3, r1
 8013c72:	2000      	movs	r0, #0
 8013c74:	494f      	ldr	r1, [pc, #316]	; (8013db4 <__kernel_cos+0x21c>)
 8013c76:	f7fc fd81 	bl	801077c <__aeabi_dsub>
 8013c7a:	e070      	b.n	8013d5e <__kernel_cos+0x1c6>
 8013c7c:	0002      	movs	r2, r0
 8013c7e:	000b      	movs	r3, r1
 8013c80:	f7fc fb0a 	bl	8010298 <__aeabi_dmul>
 8013c84:	0004      	movs	r4, r0
 8013c86:	000d      	movs	r5, r1
 8013c88:	4a3d      	ldr	r2, [pc, #244]	; (8013d80 <__kernel_cos+0x1e8>)
 8013c8a:	4b3e      	ldr	r3, [pc, #248]	; (8013d84 <__kernel_cos+0x1ec>)
 8013c8c:	f7fc fb04 	bl	8010298 <__aeabi_dmul>
 8013c90:	4a3d      	ldr	r2, [pc, #244]	; (8013d88 <__kernel_cos+0x1f0>)
 8013c92:	4b3e      	ldr	r3, [pc, #248]	; (8013d8c <__kernel_cos+0x1f4>)
 8013c94:	f7fb fbda 	bl	800f44c <__aeabi_dadd>
 8013c98:	0022      	movs	r2, r4
 8013c9a:	002b      	movs	r3, r5
 8013c9c:	f7fc fafc 	bl	8010298 <__aeabi_dmul>
 8013ca0:	4a3b      	ldr	r2, [pc, #236]	; (8013d90 <__kernel_cos+0x1f8>)
 8013ca2:	4b3c      	ldr	r3, [pc, #240]	; (8013d94 <__kernel_cos+0x1fc>)
 8013ca4:	f7fc fd6a 	bl	801077c <__aeabi_dsub>
 8013ca8:	0022      	movs	r2, r4
 8013caa:	002b      	movs	r3, r5
 8013cac:	f7fc faf4 	bl	8010298 <__aeabi_dmul>
 8013cb0:	4a39      	ldr	r2, [pc, #228]	; (8013d98 <__kernel_cos+0x200>)
 8013cb2:	4b3a      	ldr	r3, [pc, #232]	; (8013d9c <__kernel_cos+0x204>)
 8013cb4:	f7fb fbca 	bl	800f44c <__aeabi_dadd>
 8013cb8:	0022      	movs	r2, r4
 8013cba:	002b      	movs	r3, r5
 8013cbc:	f7fc faec 	bl	8010298 <__aeabi_dmul>
 8013cc0:	4a37      	ldr	r2, [pc, #220]	; (8013da0 <__kernel_cos+0x208>)
 8013cc2:	4b38      	ldr	r3, [pc, #224]	; (8013da4 <__kernel_cos+0x20c>)
 8013cc4:	f7fc fd5a 	bl	801077c <__aeabi_dsub>
 8013cc8:	0022      	movs	r2, r4
 8013cca:	002b      	movs	r3, r5
 8013ccc:	f7fc fae4 	bl	8010298 <__aeabi_dmul>
 8013cd0:	4a35      	ldr	r2, [pc, #212]	; (8013da8 <__kernel_cos+0x210>)
 8013cd2:	4b36      	ldr	r3, [pc, #216]	; (8013dac <__kernel_cos+0x214>)
 8013cd4:	f7fb fbba 	bl	800f44c <__aeabi_dadd>
 8013cd8:	002b      	movs	r3, r5
 8013cda:	0022      	movs	r2, r4
 8013cdc:	f7fc fadc 	bl	8010298 <__aeabi_dmul>
 8013ce0:	4b35      	ldr	r3, [pc, #212]	; (8013db8 <__kernel_cos+0x220>)
 8013ce2:	9002      	str	r0, [sp, #8]
 8013ce4:	9103      	str	r1, [sp, #12]
 8013ce6:	429f      	cmp	r7, r3
 8013ce8:	dd9f      	ble.n	8013c2a <__kernel_cos+0x92>
 8013cea:	4b34      	ldr	r3, [pc, #208]	; (8013dbc <__kernel_cos+0x224>)
 8013cec:	2200      	movs	r2, #0
 8013cee:	429f      	cmp	r7, r3
 8013cf0:	dc3d      	bgt.n	8013d6e <__kernel_cos+0x1d6>
 8013cf2:	4933      	ldr	r1, [pc, #204]	; (8013dc0 <__kernel_cos+0x228>)
 8013cf4:	2000      	movs	r0, #0
 8013cf6:	187b      	adds	r3, r7, r1
 8013cf8:	492e      	ldr	r1, [pc, #184]	; (8013db4 <__kernel_cos+0x21c>)
 8013cfa:	0016      	movs	r6, r2
 8013cfc:	001f      	movs	r7, r3
 8013cfe:	f7fc fd3d 	bl	801077c <__aeabi_dsub>
 8013d02:	9004      	str	r0, [sp, #16]
 8013d04:	9105      	str	r1, [sp, #20]
 8013d06:	2200      	movs	r2, #0
 8013d08:	4b29      	ldr	r3, [pc, #164]	; (8013db0 <__kernel_cos+0x218>)
 8013d0a:	0020      	movs	r0, r4
 8013d0c:	0029      	movs	r1, r5
 8013d0e:	f7fc fac3 	bl	8010298 <__aeabi_dmul>
 8013d12:	0032      	movs	r2, r6
 8013d14:	003b      	movs	r3, r7
 8013d16:	f7fc fd31 	bl	801077c <__aeabi_dsub>
 8013d1a:	9a02      	ldr	r2, [sp, #8]
 8013d1c:	9b03      	ldr	r3, [sp, #12]
 8013d1e:	0006      	movs	r6, r0
 8013d20:	000f      	movs	r7, r1
 8013d22:	0020      	movs	r0, r4
 8013d24:	0029      	movs	r1, r5
 8013d26:	f7fc fab7 	bl	8010298 <__aeabi_dmul>
 8013d2a:	9a00      	ldr	r2, [sp, #0]
 8013d2c:	9b01      	ldr	r3, [sp, #4]
 8013d2e:	0004      	movs	r4, r0
 8013d30:	000d      	movs	r5, r1
 8013d32:	4648      	mov	r0, r9
 8013d34:	4641      	mov	r1, r8
 8013d36:	f7fc faaf 	bl	8010298 <__aeabi_dmul>
 8013d3a:	0002      	movs	r2, r0
 8013d3c:	000b      	movs	r3, r1
 8013d3e:	0020      	movs	r0, r4
 8013d40:	0029      	movs	r1, r5
 8013d42:	f7fc fd1b 	bl	801077c <__aeabi_dsub>
 8013d46:	0002      	movs	r2, r0
 8013d48:	000b      	movs	r3, r1
 8013d4a:	0030      	movs	r0, r6
 8013d4c:	0039      	movs	r1, r7
 8013d4e:	f7fc fd15 	bl	801077c <__aeabi_dsub>
 8013d52:	0002      	movs	r2, r0
 8013d54:	000b      	movs	r3, r1
 8013d56:	9804      	ldr	r0, [sp, #16]
 8013d58:	9905      	ldr	r1, [sp, #20]
 8013d5a:	f7fc fd0f 	bl	801077c <__aeabi_dsub>
 8013d5e:	b007      	add	sp, #28
 8013d60:	bc0c      	pop	{r2, r3}
 8013d62:	4690      	mov	r8, r2
 8013d64:	4699      	mov	r9, r3
 8013d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d68:	2000      	movs	r0, #0
 8013d6a:	4912      	ldr	r1, [pc, #72]	; (8013db4 <__kernel_cos+0x21c>)
 8013d6c:	e7f7      	b.n	8013d5e <__kernel_cos+0x1c6>
 8013d6e:	4b15      	ldr	r3, [pc, #84]	; (8013dc4 <__kernel_cos+0x22c>)
 8013d70:	2600      	movs	r6, #0
 8013d72:	9204      	str	r2, [sp, #16]
 8013d74:	9305      	str	r3, [sp, #20]
 8013d76:	4f14      	ldr	r7, [pc, #80]	; (8013dc8 <__kernel_cos+0x230>)
 8013d78:	e7c5      	b.n	8013d06 <__kernel_cos+0x16e>
 8013d7a:	46c0      	nop			; (mov r8, r8)
 8013d7c:	3e3fffff 	.word	0x3e3fffff
 8013d80:	be8838d4 	.word	0xbe8838d4
 8013d84:	bda8fae9 	.word	0xbda8fae9
 8013d88:	bdb4b1c4 	.word	0xbdb4b1c4
 8013d8c:	3e21ee9e 	.word	0x3e21ee9e
 8013d90:	809c52ad 	.word	0x809c52ad
 8013d94:	3e927e4f 	.word	0x3e927e4f
 8013d98:	19cb1590 	.word	0x19cb1590
 8013d9c:	3efa01a0 	.word	0x3efa01a0
 8013da0:	16c15177 	.word	0x16c15177
 8013da4:	3f56c16c 	.word	0x3f56c16c
 8013da8:	5555554c 	.word	0x5555554c
 8013dac:	3fa55555 	.word	0x3fa55555
 8013db0:	3fe00000 	.word	0x3fe00000
 8013db4:	3ff00000 	.word	0x3ff00000
 8013db8:	3fd33332 	.word	0x3fd33332
 8013dbc:	3fe90000 	.word	0x3fe90000
 8013dc0:	ffe00000 	.word	0xffe00000
 8013dc4:	3fe70000 	.word	0x3fe70000
 8013dc8:	3fd20000 	.word	0x3fd20000

08013dcc <__kernel_rem_pio2>:
 8013dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dce:	46de      	mov	lr, fp
 8013dd0:	464e      	mov	r6, r9
 8013dd2:	4645      	mov	r5, r8
 8013dd4:	4657      	mov	r7, sl
 8013dd6:	b5e0      	push	{r5, r6, r7, lr}
 8013dd8:	4cdc      	ldr	r4, [pc, #880]	; (801414c <__kernel_rem_pio2+0x380>)
 8013dda:	44a5      	add	sp, r4
 8013ddc:	910d      	str	r1, [sp, #52]	; 0x34
 8013dde:	0014      	movs	r4, r2
 8013de0:	0019      	movs	r1, r3
 8013de2:	9aa4      	ldr	r2, [sp, #656]	; 0x290
 8013de4:	9309      	str	r3, [sp, #36]	; 0x24
 8013de6:	4bda      	ldr	r3, [pc, #872]	; (8014150 <__kernel_rem_pio2+0x384>)
 8013de8:	0092      	lsls	r2, r2, #2
 8013dea:	58d6      	ldr	r6, [r2, r3]
 8013dec:	1e4d      	subs	r5, r1, #1
 8013dee:	9003      	str	r0, [sp, #12]
 8013df0:	2118      	movs	r1, #24
 8013df2:	1ee0      	subs	r0, r4, #3
 8013df4:	9606      	str	r6, [sp, #24]
 8013df6:	9502      	str	r5, [sp, #8]
 8013df8:	f7fa ff26 	bl	800ec48 <__divsi3>
 8013dfc:	43c3      	mvns	r3, r0
 8013dfe:	0001      	movs	r1, r0
 8013e00:	17db      	asrs	r3, r3, #31
 8013e02:	4019      	ands	r1, r3
 8013e04:	1c4b      	adds	r3, r1, #1
 8013e06:	009a      	lsls	r2, r3, #2
 8013e08:	1a9b      	subs	r3, r3, r2
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	191b      	adds	r3, r3, r4
 8013e0e:	910b      	str	r1, [sp, #44]	; 0x2c
 8013e10:	9305      	str	r3, [sp, #20]
 8013e12:	1b4c      	subs	r4, r1, r5
 8013e14:	1977      	adds	r7, r6, r5
 8013e16:	d418      	bmi.n	8013e4a <__kernel_rem_pio2+0x7e>
 8013e18:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8013e1a:	00a5      	lsls	r5, r4, #2
 8013e1c:	469c      	mov	ip, r3
 8013e1e:	193f      	adds	r7, r7, r4
 8013e20:	ae22      	add	r6, sp, #136	; 0x88
 8013e22:	4465      	add	r5, ip
 8013e24:	3701      	adds	r7, #1
 8013e26:	e007      	b.n	8013e38 <__kernel_rem_pio2+0x6c>
 8013e28:	6828      	ldr	r0, [r5, #0]
 8013e2a:	f7fd f841 	bl	8010eb0 <__aeabi_i2d>
 8013e2e:	3401      	adds	r4, #1
 8013e30:	c603      	stmia	r6!, {r0, r1}
 8013e32:	3504      	adds	r5, #4
 8013e34:	42bc      	cmp	r4, r7
 8013e36:	d008      	beq.n	8013e4a <__kernel_rem_pio2+0x7e>
 8013e38:	2c00      	cmp	r4, #0
 8013e3a:	daf5      	bge.n	8013e28 <__kernel_rem_pio2+0x5c>
 8013e3c:	2000      	movs	r0, #0
 8013e3e:	2100      	movs	r1, #0
 8013e40:	3401      	adds	r4, #1
 8013e42:	c603      	stmia	r6!, {r0, r1}
 8013e44:	3504      	adds	r5, #4
 8013e46:	42bc      	cmp	r4, r7
 8013e48:	d1f6      	bne.n	8013e38 <__kernel_rem_pio2+0x6c>
 8013e4a:	9b06      	ldr	r3, [sp, #24]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	da01      	bge.n	8013e54 <__kernel_rem_pio2+0x88>
 8013e50:	f000 fbfd 	bl	801464e <__kernel_rem_pio2+0x882>
 8013e54:	9b06      	ldr	r3, [sp, #24]
 8013e56:	9903      	ldr	r1, [sp, #12]
 8013e58:	3301      	adds	r3, #1
 8013e5a:	00db      	lsls	r3, r3, #3
 8013e5c:	469a      	mov	sl, r3
 8013e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e60:	00da      	lsls	r2, r3, #3
 8013e62:	4694      	mov	ip, r2
 8013e64:	9200      	str	r2, [sp, #0]
 8013e66:	2200      	movs	r2, #0
 8013e68:	4691      	mov	r9, r2
 8013e6a:	aa72      	add	r2, sp, #456	; 0x1c8
 8013e6c:	9204      	str	r2, [sp, #16]
 8013e6e:	4ab9      	ldr	r2, [pc, #740]	; (8014154 <__kernel_rem_pio2+0x388>)
 8013e70:	4461      	add	r1, ip
 8013e72:	4693      	mov	fp, r2
 8013e74:	4688      	mov	r8, r1
 8013e76:	ab9a      	add	r3, sp, #616	; 0x268
 8013e78:	4463      	add	r3, ip
 8013e7a:	449b      	add	fp, r3
 8013e7c:	9b02      	ldr	r3, [sp, #8]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	da00      	bge.n	8013e84 <__kernel_rem_pio2+0xb8>
 8013e82:	e1bc      	b.n	80141fe <__kernel_rem_pio2+0x432>
 8013e84:	465d      	mov	r5, fp
 8013e86:	2600      	movs	r6, #0
 8013e88:	2700      	movs	r7, #0
 8013e8a:	9c03      	ldr	r4, [sp, #12]
 8013e8c:	444d      	add	r5, r9
 8013e8e:	682a      	ldr	r2, [r5, #0]
 8013e90:	686b      	ldr	r3, [r5, #4]
 8013e92:	cc03      	ldmia	r4!, {r0, r1}
 8013e94:	f7fc fa00 	bl	8010298 <__aeabi_dmul>
 8013e98:	0002      	movs	r2, r0
 8013e9a:	000b      	movs	r3, r1
 8013e9c:	0030      	movs	r0, r6
 8013e9e:	0039      	movs	r1, r7
 8013ea0:	f7fb fad4 	bl	800f44c <__aeabi_dadd>
 8013ea4:	3d08      	subs	r5, #8
 8013ea6:	0006      	movs	r6, r0
 8013ea8:	000f      	movs	r7, r1
 8013eaa:	4544      	cmp	r4, r8
 8013eac:	d1ef      	bne.n	8013e8e <__kernel_rem_pio2+0xc2>
 8013eae:	9b04      	ldr	r3, [sp, #16]
 8013eb0:	444b      	add	r3, r9
 8013eb2:	601e      	str	r6, [r3, #0]
 8013eb4:	605f      	str	r7, [r3, #4]
 8013eb6:	2308      	movs	r3, #8
 8013eb8:	469c      	mov	ip, r3
 8013eba:	44e1      	add	r9, ip
 8013ebc:	45d1      	cmp	r9, sl
 8013ebe:	d1dd      	bne.n	8013e7c <__kernel_rem_pio2+0xb0>
 8013ec0:	a80e      	add	r0, sp, #56	; 0x38
 8013ec2:	2104      	movs	r1, #4
 8013ec4:	4684      	mov	ip, r0
 8013ec6:	4249      	negs	r1, r1
 8013ec8:	4461      	add	r1, ip
 8013eca:	468c      	mov	ip, r1
 8013ecc:	9a06      	ldr	r2, [sp, #24]
 8013ece:	0093      	lsls	r3, r2, #2
 8013ed0:	449c      	add	ip, r3
 8013ed2:	4661      	mov	r1, ip
 8013ed4:	4684      	mov	ip, r0
 8013ed6:	910a      	str	r1, [sp, #40]	; 0x28
 8013ed8:	9903      	ldr	r1, [sp, #12]
 8013eda:	3b08      	subs	r3, #8
 8013edc:	4463      	add	r3, ip
 8013ede:	468c      	mov	ip, r1
 8013ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8013ee2:	9b00      	ldr	r3, [sp, #0]
 8013ee4:	9200      	str	r2, [sp, #0]
 8013ee6:	4463      	add	r3, ip
 8013ee8:	469b      	mov	fp, r3
 8013eea:	9a00      	ldr	r2, [sp, #0]
 8013eec:	9804      	ldr	r0, [sp, #16]
 8013eee:	00d1      	lsls	r1, r2, #3
 8013ef0:	0003      	movs	r3, r0
 8013ef2:	468c      	mov	ip, r1
 8013ef4:	4463      	add	r3, ip
 8013ef6:	9108      	str	r1, [sp, #32]
 8013ef8:	681e      	ldr	r6, [r3, #0]
 8013efa:	685f      	ldr	r7, [r3, #4]
 8013efc:	2a00      	cmp	r2, #0
 8013efe:	dd33      	ble.n	8013f68 <__kernel_rem_pio2+0x19c>
 8013f00:	4995      	ldr	r1, [pc, #596]	; (8014158 <__kernel_rem_pio2+0x38c>)
 8013f02:	4680      	mov	r8, r0
 8013f04:	468c      	mov	ip, r1
 8013f06:	4462      	add	r2, ip
 8013f08:	00d3      	lsls	r3, r2, #3
 8013f0a:	4498      	add	r8, r3
 8013f0c:	ab70      	add	r3, sp, #448	; 0x1c0
 8013f0e:	469a      	mov	sl, r3
 8013f10:	ab0e      	add	r3, sp, #56	; 0x38
 8013f12:	4699      	mov	r9, r3
 8013f14:	2200      	movs	r2, #0
 8013f16:	4b91      	ldr	r3, [pc, #580]	; (801415c <__kernel_rem_pio2+0x390>)
 8013f18:	0030      	movs	r0, r6
 8013f1a:	0039      	movs	r1, r7
 8013f1c:	f7fc f9bc 	bl	8010298 <__aeabi_dmul>
 8013f20:	f7fc ff90 	bl	8010e44 <__aeabi_d2iz>
 8013f24:	f7fc ffc4 	bl	8010eb0 <__aeabi_i2d>
 8013f28:	2200      	movs	r2, #0
 8013f2a:	4b8d      	ldr	r3, [pc, #564]	; (8014160 <__kernel_rem_pio2+0x394>)
 8013f2c:	0004      	movs	r4, r0
 8013f2e:	000d      	movs	r5, r1
 8013f30:	f7fc f9b2 	bl	8010298 <__aeabi_dmul>
 8013f34:	0002      	movs	r2, r0
 8013f36:	000b      	movs	r3, r1
 8013f38:	0030      	movs	r0, r6
 8013f3a:	0039      	movs	r1, r7
 8013f3c:	f7fc fc1e 	bl	801077c <__aeabi_dsub>
 8013f40:	f7fc ff80 	bl	8010e44 <__aeabi_d2iz>
 8013f44:	464b      	mov	r3, r9
 8013f46:	c301      	stmia	r3!, {r0}
 8013f48:	4699      	mov	r9, r3
 8013f4a:	4643      	mov	r3, r8
 8013f4c:	0020      	movs	r0, r4
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	0029      	movs	r1, r5
 8013f54:	f7fb fa7a 	bl	800f44c <__aeabi_dadd>
 8013f58:	2308      	movs	r3, #8
 8013f5a:	425b      	negs	r3, r3
 8013f5c:	469c      	mov	ip, r3
 8013f5e:	44e0      	add	r8, ip
 8013f60:	0006      	movs	r6, r0
 8013f62:	000f      	movs	r7, r1
 8013f64:	45d0      	cmp	r8, sl
 8013f66:	d1d5      	bne.n	8013f14 <__kernel_rem_pio2+0x148>
 8013f68:	9b05      	ldr	r3, [sp, #20]
 8013f6a:	0030      	movs	r0, r6
 8013f6c:	001a      	movs	r2, r3
 8013f6e:	0039      	movs	r1, r7
 8013f70:	4698      	mov	r8, r3
 8013f72:	f000 fce5 	bl	8014940 <scalbn>
 8013f76:	23ff      	movs	r3, #255	; 0xff
 8013f78:	2200      	movs	r2, #0
 8013f7a:	059b      	lsls	r3, r3, #22
 8013f7c:	0004      	movs	r4, r0
 8013f7e:	000d      	movs	r5, r1
 8013f80:	f7fc f98a 	bl	8010298 <__aeabi_dmul>
 8013f84:	f000 fc38 	bl	80147f8 <floor>
 8013f88:	2200      	movs	r2, #0
 8013f8a:	4b76      	ldr	r3, [pc, #472]	; (8014164 <__kernel_rem_pio2+0x398>)
 8013f8c:	f7fc f984 	bl	8010298 <__aeabi_dmul>
 8013f90:	0002      	movs	r2, r0
 8013f92:	000b      	movs	r3, r1
 8013f94:	0020      	movs	r0, r4
 8013f96:	0029      	movs	r1, r5
 8013f98:	f7fc fbf0 	bl	801077c <__aeabi_dsub>
 8013f9c:	000d      	movs	r5, r1
 8013f9e:	0004      	movs	r4, r0
 8013fa0:	f7fc ff50 	bl	8010e44 <__aeabi_d2iz>
 8013fa4:	4681      	mov	r9, r0
 8013fa6:	f7fc ff83 	bl	8010eb0 <__aeabi_i2d>
 8013faa:	0002      	movs	r2, r0
 8013fac:	000b      	movs	r3, r1
 8013fae:	0020      	movs	r0, r4
 8013fb0:	0029      	movs	r1, r5
 8013fb2:	f7fc fbe3 	bl	801077c <__aeabi_dsub>
 8013fb6:	0006      	movs	r6, r0
 8013fb8:	4640      	mov	r0, r8
 8013fba:	000f      	movs	r7, r1
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	dc00      	bgt.n	8013fc2 <__kernel_rem_pio2+0x1f6>
 8013fc0:	e0ee      	b.n	80141a0 <__kernel_rem_pio2+0x3d4>
 8013fc2:	9b00      	ldr	r3, [sp, #0]
 8013fc4:	2118      	movs	r1, #24
 8013fc6:	1e5a      	subs	r2, r3, #1
 8013fc8:	0092      	lsls	r2, r2, #2
 8013fca:	ab0e      	add	r3, sp, #56	; 0x38
 8013fcc:	589b      	ldr	r3, [r3, r2]
 8013fce:	1a09      	subs	r1, r1, r0
 8013fd0:	001d      	movs	r5, r3
 8013fd2:	410d      	asrs	r5, r1
 8013fd4:	44a9      	add	r9, r5
 8013fd6:	408d      	lsls	r5, r1
 8013fd8:	1b5d      	subs	r5, r3, r5
 8013fda:	ab0e      	add	r3, sp, #56	; 0x38
 8013fdc:	509d      	str	r5, [r3, r2]
 8013fde:	2317      	movs	r3, #23
 8013fe0:	1a1b      	subs	r3, r3, r0
 8013fe2:	411d      	asrs	r5, r3
 8013fe4:	2d00      	cmp	r5, #0
 8013fe6:	dd2d      	ble.n	8014044 <__kernel_rem_pio2+0x278>
 8013fe8:	2301      	movs	r3, #1
 8013fea:	469c      	mov	ip, r3
 8013fec:	9b00      	ldr	r3, [sp, #0]
 8013fee:	44e1      	add	r9, ip
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	dc00      	bgt.n	8013ff6 <__kernel_rem_pio2+0x22a>
 8013ff4:	e21c      	b.n	8014430 <__kernel_rem_pio2+0x664>
 8013ff6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	2c00      	cmp	r4, #0
 8013ffc:	d000      	beq.n	8014000 <__kernel_rem_pio2+0x234>
 8013ffe:	e0b5      	b.n	801416c <__kernel_rem_pio2+0x3a0>
 8014000:	9a00      	ldr	r2, [sp, #0]
 8014002:	2a01      	cmp	r2, #1
 8014004:	d009      	beq.n	801401a <__kernel_rem_pio2+0x24e>
 8014006:	0099      	lsls	r1, r3, #2
 8014008:	aa0e      	add	r2, sp, #56	; 0x38
 801400a:	5854      	ldr	r4, [r2, r1]
 801400c:	3301      	adds	r3, #1
 801400e:	2c00      	cmp	r4, #0
 8014010:	d000      	beq.n	8014014 <__kernel_rem_pio2+0x248>
 8014012:	e0ac      	b.n	801416e <__kernel_rem_pio2+0x3a2>
 8014014:	9a00      	ldr	r2, [sp, #0]
 8014016:	429a      	cmp	r2, r3
 8014018:	d1f5      	bne.n	8014006 <__kernel_rem_pio2+0x23a>
 801401a:	9b05      	ldr	r3, [sp, #20]
 801401c:	2b00      	cmp	r3, #0
 801401e:	dd0e      	ble.n	801403e <__kernel_rem_pio2+0x272>
 8014020:	2b01      	cmp	r3, #1
 8014022:	d100      	bne.n	8014026 <__kernel_rem_pio2+0x25a>
 8014024:	e1a8      	b.n	8014378 <__kernel_rem_pio2+0x5ac>
 8014026:	2b02      	cmp	r3, #2
 8014028:	d109      	bne.n	801403e <__kernel_rem_pio2+0x272>
 801402a:	9b00      	ldr	r3, [sp, #0]
 801402c:	a90e      	add	r1, sp, #56	; 0x38
 801402e:	1e5a      	subs	r2, r3, #1
 8014030:	0092      	lsls	r2, r2, #2
 8014032:	ab0e      	add	r3, sp, #56	; 0x38
 8014034:	589b      	ldr	r3, [r3, r2]
 8014036:	9307      	str	r3, [sp, #28]
 8014038:	029b      	lsls	r3, r3, #10
 801403a:	0a9b      	lsrs	r3, r3, #10
 801403c:	508b      	str	r3, [r1, r2]
 801403e:	2d02      	cmp	r5, #2
 8014040:	d100      	bne.n	8014044 <__kernel_rem_pio2+0x278>
 8014042:	e0c1      	b.n	80141c8 <__kernel_rem_pio2+0x3fc>
 8014044:	2300      	movs	r3, #0
 8014046:	2200      	movs	r2, #0
 8014048:	0030      	movs	r0, r6
 801404a:	0039      	movs	r1, r7
 801404c:	f7fa fef8 	bl	800ee40 <__aeabi_dcmpeq>
 8014050:	9b00      	ldr	r3, [sp, #0]
 8014052:	2800      	cmp	r0, #0
 8014054:	d100      	bne.n	8014058 <__kernel_rem_pio2+0x28c>
 8014056:	e294      	b.n	8014582 <__kernel_rem_pio2+0x7b6>
 8014058:	9a06      	ldr	r2, [sp, #24]
 801405a:	1e59      	subs	r1, r3, #1
 801405c:	428a      	cmp	r2, r1
 801405e:	dc10      	bgt.n	8014082 <__kernel_rem_pio2+0x2b6>
 8014060:	4a41      	ldr	r2, [pc, #260]	; (8014168 <__kernel_rem_pio2+0x39c>)
 8014062:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014064:	4694      	mov	ip, r2
 8014066:	aa0e      	add	r2, sp, #56	; 0x38
 8014068:	4463      	add	r3, ip
 801406a:	4694      	mov	ip, r2
 801406c:	2200      	movs	r2, #0
 801406e:	009b      	lsls	r3, r3, #2
 8014070:	4463      	add	r3, ip
 8014072:	681c      	ldr	r4, [r3, #0]
 8014074:	3b04      	subs	r3, #4
 8014076:	4322      	orrs	r2, r4
 8014078:	4283      	cmp	r3, r0
 801407a:	d1fa      	bne.n	8014072 <__kernel_rem_pio2+0x2a6>
 801407c:	2a00      	cmp	r2, #0
 801407e:	d000      	beq.n	8014082 <__kernel_rem_pio2+0x2b6>
 8014080:	e0c0      	b.n	8014204 <__kernel_rem_pio2+0x438>
 8014082:	9b06      	ldr	r3, [sp, #24]
 8014084:	aa0e      	add	r2, sp, #56	; 0x38
 8014086:	3b01      	subs	r3, #1
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	58d3      	ldr	r3, [r2, r3]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d000      	beq.n	8014092 <__kernel_rem_pio2+0x2c6>
 8014090:	e0b3      	b.n	80141fa <__kernel_rem_pio2+0x42e>
 8014092:	2201      	movs	r2, #1
 8014094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014096:	3b04      	subs	r3, #4
 8014098:	6859      	ldr	r1, [r3, #4]
 801409a:	3201      	adds	r2, #1
 801409c:	2900      	cmp	r1, #0
 801409e:	d0fa      	beq.n	8014096 <__kernel_rem_pio2+0x2ca>
 80140a0:	9b00      	ldr	r3, [sp, #0]
 80140a2:	469c      	mov	ip, r3
 80140a4:	4462      	add	r2, ip
 80140a6:	0011      	movs	r1, r2
 80140a8:	9207      	str	r2, [sp, #28]
 80140aa:	001a      	movs	r2, r3
 80140ac:	3301      	adds	r3, #1
 80140ae:	428b      	cmp	r3, r1
 80140b0:	dc46      	bgt.n	8014140 <__kernel_rem_pio2+0x374>
 80140b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80140b4:	4663      	mov	r3, ip
 80140b6:	4680      	mov	r8, r0
 80140b8:	9ca5      	ldr	r4, [sp, #660]	; 0x294
 80140ba:	4443      	add	r3, r8
 80140bc:	46a0      	mov	r8, r4
 80140be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	46a1      	mov	r9, r4
 80140c4:	444a      	add	r2, r9
 80140c6:	4498      	add	r8, r3
 80140c8:	00d3      	lsls	r3, r2, #3
 80140ca:	aa22      	add	r2, sp, #136	; 0x88
 80140cc:	4691      	mov	r9, r2
 80140ce:	9a04      	ldr	r2, [sp, #16]
 80140d0:	4499      	add	r9, r3
 80140d2:	4694      	mov	ip, r2
 80140d4:	9b08      	ldr	r3, [sp, #32]
 80140d6:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 80140d8:	4463      	add	r3, ip
 80140da:	4684      	mov	ip, r0
 80140dc:	4461      	add	r1, ip
 80140de:	4694      	mov	ip, r2
 80140e0:	469a      	mov	sl, r3
 80140e2:	008b      	lsls	r3, r1, #2
 80140e4:	4463      	add	r3, ip
 80140e6:	9300      	str	r3, [sp, #0]
 80140e8:	4643      	mov	r3, r8
 80140ea:	6858      	ldr	r0, [r3, #4]
 80140ec:	f7fc fee0 	bl	8010eb0 <__aeabi_i2d>
 80140f0:	464b      	mov	r3, r9
 80140f2:	6018      	str	r0, [r3, #0]
 80140f4:	6059      	str	r1, [r3, #4]
 80140f6:	9b02      	ldr	r3, [sp, #8]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	db24      	blt.n	8014146 <__kernel_rem_pio2+0x37a>
 80140fc:	464d      	mov	r5, r9
 80140fe:	9c03      	ldr	r4, [sp, #12]
 8014100:	2600      	movs	r6, #0
 8014102:	2700      	movs	r7, #0
 8014104:	e001      	b.n	801410a <__kernel_rem_pio2+0x33e>
 8014106:	6828      	ldr	r0, [r5, #0]
 8014108:	6869      	ldr	r1, [r5, #4]
 801410a:	cc0c      	ldmia	r4!, {r2, r3}
 801410c:	f7fc f8c4 	bl	8010298 <__aeabi_dmul>
 8014110:	0002      	movs	r2, r0
 8014112:	000b      	movs	r3, r1
 8014114:	0030      	movs	r0, r6
 8014116:	0039      	movs	r1, r7
 8014118:	f7fb f998 	bl	800f44c <__aeabi_dadd>
 801411c:	3d08      	subs	r5, #8
 801411e:	0006      	movs	r6, r0
 8014120:	000f      	movs	r7, r1
 8014122:	455c      	cmp	r4, fp
 8014124:	d1ef      	bne.n	8014106 <__kernel_rem_pio2+0x33a>
 8014126:	4653      	mov	r3, sl
 8014128:	609e      	str	r6, [r3, #8]
 801412a:	60df      	str	r7, [r3, #12]
 801412c:	2304      	movs	r3, #4
 801412e:	469c      	mov	ip, r3
 8014130:	3304      	adds	r3, #4
 8014132:	44e0      	add	r8, ip
 8014134:	469c      	mov	ip, r3
 8014136:	9b00      	ldr	r3, [sp, #0]
 8014138:	44e1      	add	r9, ip
 801413a:	44e2      	add	sl, ip
 801413c:	4598      	cmp	r8, r3
 801413e:	d1d3      	bne.n	80140e8 <__kernel_rem_pio2+0x31c>
 8014140:	9b07      	ldr	r3, [sp, #28]
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	e6d1      	b.n	8013eea <__kernel_rem_pio2+0x11e>
 8014146:	2600      	movs	r6, #0
 8014148:	2700      	movs	r7, #0
 801414a:	e7ec      	b.n	8014126 <__kernel_rem_pio2+0x35a>
 801414c:	fffffd94 	.word	0xfffffd94
 8014150:	0801e540 	.word	0x0801e540
 8014154:	fffffe18 	.word	0xfffffe18
 8014158:	1fffffff 	.word	0x1fffffff
 801415c:	3e700000 	.word	0x3e700000
 8014160:	41700000 	.word	0x41700000
 8014164:	40200000 	.word	0x40200000
 8014168:	3fffffff 	.word	0x3fffffff
 801416c:	2100      	movs	r1, #0
 801416e:	2280      	movs	r2, #128	; 0x80
 8014170:	0452      	lsls	r2, r2, #17
 8014172:	1b14      	subs	r4, r2, r4
 8014174:	aa0e      	add	r2, sp, #56	; 0x38
 8014176:	5054      	str	r4, [r2, r1]
 8014178:	9900      	ldr	r1, [sp, #0]
 801417a:	4299      	cmp	r1, r3
 801417c:	dd0e      	ble.n	801419c <__kernel_rem_pio2+0x3d0>
 801417e:	a80e      	add	r0, sp, #56	; 0x38
 8014180:	4684      	mov	ip, r0
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	aa0e      	add	r2, sp, #56	; 0x38
 8014186:	0089      	lsls	r1, r1, #2
 8014188:	58d2      	ldr	r2, [r2, r3]
 801418a:	4461      	add	r1, ip
 801418c:	4463      	add	r3, ip
 801418e:	48cf      	ldr	r0, [pc, #828]	; (80144cc <__kernel_rem_pio2+0x700>)
 8014190:	e000      	b.n	8014194 <__kernel_rem_pio2+0x3c8>
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	1a82      	subs	r2, r0, r2
 8014196:	c304      	stmia	r3!, {r2}
 8014198:	428b      	cmp	r3, r1
 801419a:	d1fa      	bne.n	8014192 <__kernel_rem_pio2+0x3c6>
 801419c:	2401      	movs	r4, #1
 801419e:	e73c      	b.n	801401a <__kernel_rem_pio2+0x24e>
 80141a0:	9b05      	ldr	r3, [sp, #20]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d106      	bne.n	80141b4 <__kernel_rem_pio2+0x3e8>
 80141a6:	9b00      	ldr	r3, [sp, #0]
 80141a8:	aa0e      	add	r2, sp, #56	; 0x38
 80141aa:	3b01      	subs	r3, #1
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	58d5      	ldr	r5, [r2, r3]
 80141b0:	15ed      	asrs	r5, r5, #23
 80141b2:	e717      	b.n	8013fe4 <__kernel_rem_pio2+0x218>
 80141b4:	2200      	movs	r2, #0
 80141b6:	4bc6      	ldr	r3, [pc, #792]	; (80144d0 <__kernel_rem_pio2+0x704>)
 80141b8:	0030      	movs	r0, r6
 80141ba:	f7fa fe65 	bl	800ee88 <__aeabi_dcmpge>
 80141be:	2800      	cmp	r0, #0
 80141c0:	d000      	beq.n	80141c4 <__kernel_rem_pio2+0x3f8>
 80141c2:	e124      	b.n	801440e <__kernel_rem_pio2+0x642>
 80141c4:	2500      	movs	r5, #0
 80141c6:	e73d      	b.n	8014044 <__kernel_rem_pio2+0x278>
 80141c8:	0032      	movs	r2, r6
 80141ca:	003b      	movs	r3, r7
 80141cc:	2000      	movs	r0, #0
 80141ce:	49c1      	ldr	r1, [pc, #772]	; (80144d4 <__kernel_rem_pio2+0x708>)
 80141d0:	f7fc fad4 	bl	801077c <__aeabi_dsub>
 80141d4:	0006      	movs	r6, r0
 80141d6:	000f      	movs	r7, r1
 80141d8:	2c00      	cmp	r4, #0
 80141da:	d100      	bne.n	80141de <__kernel_rem_pio2+0x412>
 80141dc:	e732      	b.n	8014044 <__kernel_rem_pio2+0x278>
 80141de:	9a05      	ldr	r2, [sp, #20]
 80141e0:	2000      	movs	r0, #0
 80141e2:	49bc      	ldr	r1, [pc, #752]	; (80144d4 <__kernel_rem_pio2+0x708>)
 80141e4:	f000 fbac 	bl	8014940 <scalbn>
 80141e8:	0002      	movs	r2, r0
 80141ea:	000b      	movs	r3, r1
 80141ec:	0030      	movs	r0, r6
 80141ee:	0039      	movs	r1, r7
 80141f0:	f7fc fac4 	bl	801077c <__aeabi_dsub>
 80141f4:	0006      	movs	r6, r0
 80141f6:	000f      	movs	r7, r1
 80141f8:	e724      	b.n	8014044 <__kernel_rem_pio2+0x278>
 80141fa:	2201      	movs	r2, #1
 80141fc:	e750      	b.n	80140a0 <__kernel_rem_pio2+0x2d4>
 80141fe:	2600      	movs	r6, #0
 8014200:	2700      	movs	r7, #0
 8014202:	e654      	b.n	8013eae <__kernel_rem_pio2+0xe2>
 8014204:	464b      	mov	r3, r9
 8014206:	9a05      	ldr	r2, [sp, #20]
 8014208:	9307      	str	r3, [sp, #28]
 801420a:	4688      	mov	r8, r1
 801420c:	008b      	lsls	r3, r1, #2
 801420e:	a90e      	add	r1, sp, #56	; 0x38
 8014210:	58cb      	ldr	r3, [r1, r3]
 8014212:	3a18      	subs	r2, #24
 8014214:	9508      	str	r5, [sp, #32]
 8014216:	9205      	str	r2, [sp, #20]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10d      	bne.n	8014238 <__kernel_rem_pio2+0x46c>
 801421c:	468c      	mov	ip, r1
 801421e:	4641      	mov	r1, r8
 8014220:	4bad      	ldr	r3, [pc, #692]	; (80144d8 <__kernel_rem_pio2+0x70c>)
 8014222:	4443      	add	r3, r8
 8014224:	009b      	lsls	r3, r3, #2
 8014226:	4463      	add	r3, ip
 8014228:	3b04      	subs	r3, #4
 801422a:	6858      	ldr	r0, [r3, #4]
 801422c:	3901      	subs	r1, #1
 801422e:	3a18      	subs	r2, #24
 8014230:	2800      	cmp	r0, #0
 8014232:	d0f9      	beq.n	8014228 <__kernel_rem_pio2+0x45c>
 8014234:	4688      	mov	r8, r1
 8014236:	9205      	str	r2, [sp, #20]
 8014238:	9a05      	ldr	r2, [sp, #20]
 801423a:	2000      	movs	r0, #0
 801423c:	49a5      	ldr	r1, [pc, #660]	; (80144d4 <__kernel_rem_pio2+0x708>)
 801423e:	f000 fb7f 	bl	8014940 <scalbn>
 8014242:	4643      	mov	r3, r8
 8014244:	0004      	movs	r4, r0
 8014246:	000d      	movs	r5, r1
 8014248:	2b00      	cmp	r3, #0
 801424a:	da00      	bge.n	801424e <__kernel_rem_pio2+0x482>
 801424c:	e205      	b.n	801465a <__kernel_rem_pio2+0x88e>
 801424e:	009e      	lsls	r6, r3, #2
 8014250:	ab0e      	add	r3, sp, #56	; 0x38
 8014252:	469c      	mov	ip, r3
 8014254:	4643      	mov	r3, r8
 8014256:	00db      	lsls	r3, r3, #3
 8014258:	4466      	add	r6, ip
 801425a:	469c      	mov	ip, r3
 801425c:	9305      	str	r3, [sp, #20]
 801425e:	ab70      	add	r3, sp, #448	; 0x1c0
 8014260:	4699      	mov	r9, r3
 8014262:	9f04      	ldr	r7, [sp, #16]
 8014264:	4467      	add	r7, ip
 8014266:	9700      	str	r7, [sp, #0]
 8014268:	6830      	ldr	r0, [r6, #0]
 801426a:	f7fc fe21 	bl	8010eb0 <__aeabi_i2d>
 801426e:	0022      	movs	r2, r4
 8014270:	002b      	movs	r3, r5
 8014272:	f7fc f811 	bl	8010298 <__aeabi_dmul>
 8014276:	2200      	movs	r2, #0
 8014278:	6038      	str	r0, [r7, #0]
 801427a:	6079      	str	r1, [r7, #4]
 801427c:	4b97      	ldr	r3, [pc, #604]	; (80144dc <__kernel_rem_pio2+0x710>)
 801427e:	0020      	movs	r0, r4
 8014280:	0029      	movs	r1, r5
 8014282:	f7fc f809 	bl	8010298 <__aeabi_dmul>
 8014286:	3f08      	subs	r7, #8
 8014288:	0004      	movs	r4, r0
 801428a:	000d      	movs	r5, r1
 801428c:	3e04      	subs	r6, #4
 801428e:	45b9      	cmp	r9, r7
 8014290:	d1ea      	bne.n	8014268 <__kernel_rem_pio2+0x49c>
 8014292:	ab4a      	add	r3, sp, #296	; 0x128
 8014294:	9303      	str	r3, [sp, #12]
 8014296:	469b      	mov	fp, r3
 8014298:	2300      	movs	r3, #0
 801429a:	469a      	mov	sl, r3
 801429c:	9b06      	ldr	r3, [sp, #24]
 801429e:	4642      	mov	r2, r8
 80142a0:	4699      	mov	r9, r3
 80142a2:	4643      	mov	r3, r8
 80142a4:	3201      	adds	r2, #1
 80142a6:	9202      	str	r2, [sp, #8]
 80142a8:	9304      	str	r3, [sp, #16]
 80142aa:	464b      	mov	r3, r9
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	da00      	bge.n	80142b2 <__kernel_rem_pio2+0x4e6>
 80142b0:	e0aa      	b.n	8014408 <__kernel_rem_pio2+0x63c>
 80142b2:	2080      	movs	r0, #128	; 0x80
 80142b4:	4b8a      	ldr	r3, [pc, #552]	; (80144e0 <__kernel_rem_pio2+0x714>)
 80142b6:	9d00      	ldr	r5, [sp, #0]
 80142b8:	4698      	mov	r8, r3
 80142ba:	05c0      	lsls	r0, r0, #23
 80142bc:	4989      	ldr	r1, [pc, #548]	; (80144e4 <__kernel_rem_pio2+0x718>)
 80142be:	2600      	movs	r6, #0
 80142c0:	2700      	movs	r7, #0
 80142c2:	2400      	movs	r4, #0
 80142c4:	e008      	b.n	80142d8 <__kernel_rem_pio2+0x50c>
 80142c6:	2308      	movs	r3, #8
 80142c8:	469c      	mov	ip, r3
 80142ca:	3508      	adds	r5, #8
 80142cc:	44e0      	add	r8, ip
 80142ce:	4554      	cmp	r4, sl
 80142d0:	dc11      	bgt.n	80142f6 <__kernel_rem_pio2+0x52a>
 80142d2:	4643      	mov	r3, r8
 80142d4:	6818      	ldr	r0, [r3, #0]
 80142d6:	6859      	ldr	r1, [r3, #4]
 80142d8:	682a      	ldr	r2, [r5, #0]
 80142da:	686b      	ldr	r3, [r5, #4]
 80142dc:	f7fb ffdc 	bl	8010298 <__aeabi_dmul>
 80142e0:	0002      	movs	r2, r0
 80142e2:	000b      	movs	r3, r1
 80142e4:	0030      	movs	r0, r6
 80142e6:	0039      	movs	r1, r7
 80142e8:	f7fb f8b0 	bl	800f44c <__aeabi_dadd>
 80142ec:	3401      	adds	r4, #1
 80142ee:	0006      	movs	r6, r0
 80142f0:	000f      	movs	r7, r1
 80142f2:	45a1      	cmp	r9, r4
 80142f4:	dae7      	bge.n	80142c6 <__kernel_rem_pio2+0x4fa>
 80142f6:	465b      	mov	r3, fp
 80142f8:	c3c0      	stmia	r3!, {r6, r7}
 80142fa:	469b      	mov	fp, r3
 80142fc:	2301      	movs	r3, #1
 80142fe:	469c      	mov	ip, r3
 8014300:	9b00      	ldr	r3, [sp, #0]
 8014302:	44e2      	add	sl, ip
 8014304:	3b08      	subs	r3, #8
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	9b02      	ldr	r3, [sp, #8]
 801430a:	459a      	cmp	sl, r3
 801430c:	d1cd      	bne.n	80142aa <__kernel_rem_pio2+0x4de>
 801430e:	9b04      	ldr	r3, [sp, #16]
 8014310:	4698      	mov	r8, r3
 8014312:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014314:	2b02      	cmp	r3, #2
 8014316:	dd00      	ble.n	801431a <__kernel_rem_pio2+0x54e>
 8014318:	e08e      	b.n	8014438 <__kernel_rem_pio2+0x66c>
 801431a:	2b00      	cmp	r3, #0
 801431c:	dc37      	bgt.n	801438e <__kernel_rem_pio2+0x5c2>
 801431e:	d11f      	bne.n	8014360 <__kernel_rem_pio2+0x594>
 8014320:	9b05      	ldr	r3, [sp, #20]
 8014322:	2700      	movs	r7, #0
 8014324:	001d      	movs	r5, r3
 8014326:	9b03      	ldr	r3, [sp, #12]
 8014328:	2400      	movs	r4, #0
 801432a:	469c      	mov	ip, r3
 801432c:	001e      	movs	r6, r3
 801432e:	4465      	add	r5, ip
 8014330:	3e08      	subs	r6, #8
 8014332:	682a      	ldr	r2, [r5, #0]
 8014334:	686b      	ldr	r3, [r5, #4]
 8014336:	0038      	movs	r0, r7
 8014338:	0021      	movs	r1, r4
 801433a:	f7fb f887 	bl	800f44c <__aeabi_dadd>
 801433e:	3d08      	subs	r5, #8
 8014340:	0007      	movs	r7, r0
 8014342:	000c      	movs	r4, r1
 8014344:	42ae      	cmp	r6, r5
 8014346:	d1f4      	bne.n	8014332 <__kernel_rem_pio2+0x566>
 8014348:	9b08      	ldr	r3, [sp, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d003      	beq.n	8014356 <__kernel_rem_pio2+0x58a>
 801434e:	2380      	movs	r3, #128	; 0x80
 8014350:	061b      	lsls	r3, r3, #24
 8014352:	469c      	mov	ip, r3
 8014354:	4464      	add	r4, ip
 8014356:	003a      	movs	r2, r7
 8014358:	0023      	movs	r3, r4
 801435a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801435c:	600a      	str	r2, [r1, #0]
 801435e:	604b      	str	r3, [r1, #4]
 8014360:	2007      	movs	r0, #7
 8014362:	9b07      	ldr	r3, [sp, #28]
 8014364:	4018      	ands	r0, r3
 8014366:	239b      	movs	r3, #155	; 0x9b
 8014368:	009b      	lsls	r3, r3, #2
 801436a:	449d      	add	sp, r3
 801436c:	bc3c      	pop	{r2, r3, r4, r5}
 801436e:	4690      	mov	r8, r2
 8014370:	4699      	mov	r9, r3
 8014372:	46a2      	mov	sl, r4
 8014374:	46ab      	mov	fp, r5
 8014376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014378:	9b00      	ldr	r3, [sp, #0]
 801437a:	a90e      	add	r1, sp, #56	; 0x38
 801437c:	1e5a      	subs	r2, r3, #1
 801437e:	0092      	lsls	r2, r2, #2
 8014380:	ab0e      	add	r3, sp, #56	; 0x38
 8014382:	589b      	ldr	r3, [r3, r2]
 8014384:	9307      	str	r3, [sp, #28]
 8014386:	025b      	lsls	r3, r3, #9
 8014388:	0a5b      	lsrs	r3, r3, #9
 801438a:	508b      	str	r3, [r1, r2]
 801438c:	e657      	b.n	801403e <__kernel_rem_pio2+0x272>
 801438e:	4643      	mov	r3, r8
 8014390:	2b00      	cmp	r3, #0
 8014392:	da00      	bge.n	8014396 <__kernel_rem_pio2+0x5ca>
 8014394:	e170      	b.n	8014678 <__kernel_rem_pio2+0x8ac>
 8014396:	2000      	movs	r0, #0
 8014398:	2100      	movs	r1, #0
 801439a:	00db      	lsls	r3, r3, #3
 801439c:	aa4a      	add	r2, sp, #296	; 0x128
 801439e:	18d6      	adds	r6, r2, r3
 80143a0:	af48      	add	r7, sp, #288	; 0x120
 80143a2:	6832      	ldr	r2, [r6, #0]
 80143a4:	6873      	ldr	r3, [r6, #4]
 80143a6:	3e08      	subs	r6, #8
 80143a8:	f7fb f850 	bl	800f44c <__aeabi_dadd>
 80143ac:	42b7      	cmp	r7, r6
 80143ae:	d1f8      	bne.n	80143a2 <__kernel_rem_pio2+0x5d6>
 80143b0:	9b08      	ldr	r3, [sp, #32]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d000      	beq.n	80143b8 <__kernel_rem_pio2+0x5ec>
 80143b6:	e125      	b.n	8014604 <__kernel_rem_pio2+0x838>
 80143b8:	000b      	movs	r3, r1
 80143ba:	0002      	movs	r2, r0
 80143bc:	984a      	ldr	r0, [sp, #296]	; 0x128
 80143be:	994b      	ldr	r1, [sp, #300]	; 0x12c
 80143c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80143c2:	6022      	str	r2, [r4, #0]
 80143c4:	6063      	str	r3, [r4, #4]
 80143c6:	f7fc f9d9 	bl	801077c <__aeabi_dsub>
 80143ca:	4643      	mov	r3, r8
 80143cc:	0007      	movs	r7, r0
 80143ce:	000c      	movs	r4, r1
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	dd13      	ble.n	80143fc <__kernel_rem_pio2+0x630>
 80143d4:	2501      	movs	r5, #1
 80143d6:	ae4c      	add	r6, sp, #304	; 0x130
 80143d8:	46b1      	mov	r9, r6
 80143da:	0038      	movs	r0, r7
 80143dc:	002e      	movs	r6, r5
 80143de:	0021      	movs	r1, r4
 80143e0:	464c      	mov	r4, r9
 80143e2:	3601      	adds	r6, #1
 80143e4:	cc0c      	ldmia	r4!, {r2, r3}
 80143e6:	f7fb f831 	bl	800f44c <__aeabi_dadd>
 80143ea:	46a1      	mov	r9, r4
 80143ec:	45b0      	cmp	r8, r6
 80143ee:	daf7      	bge.n	80143e0 <__kernel_rem_pio2+0x614>
 80143f0:	9b08      	ldr	r3, [sp, #32]
 80143f2:	0007      	movs	r7, r0
 80143f4:	000c      	movs	r4, r1
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d000      	beq.n	80143fc <__kernel_rem_pio2+0x630>
 80143fa:	e115      	b.n	8014628 <__kernel_rem_pio2+0x85c>
 80143fc:	003a      	movs	r2, r7
 80143fe:	0023      	movs	r3, r4
 8014400:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014402:	608a      	str	r2, [r1, #8]
 8014404:	60cb      	str	r3, [r1, #12]
 8014406:	e7ab      	b.n	8014360 <__kernel_rem_pio2+0x594>
 8014408:	2600      	movs	r6, #0
 801440a:	2700      	movs	r7, #0
 801440c:	e773      	b.n	80142f6 <__kernel_rem_pio2+0x52a>
 801440e:	2301      	movs	r3, #1
 8014410:	469c      	mov	ip, r3
 8014412:	9b00      	ldr	r3, [sp, #0]
 8014414:	44e1      	add	r9, ip
 8014416:	2502      	movs	r5, #2
 8014418:	2b00      	cmp	r3, #0
 801441a:	dd00      	ble.n	801441e <__kernel_rem_pio2+0x652>
 801441c:	e5eb      	b.n	8013ff6 <__kernel_rem_pio2+0x22a>
 801441e:	0032      	movs	r2, r6
 8014420:	003b      	movs	r3, r7
 8014422:	2000      	movs	r0, #0
 8014424:	492b      	ldr	r1, [pc, #172]	; (80144d4 <__kernel_rem_pio2+0x708>)
 8014426:	f7fc f9a9 	bl	801077c <__aeabi_dsub>
 801442a:	0006      	movs	r6, r0
 801442c:	000f      	movs	r7, r1
 801442e:	e609      	b.n	8014044 <__kernel_rem_pio2+0x278>
 8014430:	2400      	movs	r4, #0
 8014432:	e5f2      	b.n	801401a <__kernel_rem_pio2+0x24e>
 8014434:	ab4a      	add	r3, sp, #296	; 0x128
 8014436:	9303      	str	r3, [sp, #12]
 8014438:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801443a:	2b03      	cmp	r3, #3
 801443c:	d000      	beq.n	8014440 <__kernel_rem_pio2+0x674>
 801443e:	e78f      	b.n	8014360 <__kernel_rem_pio2+0x594>
 8014440:	4643      	mov	r3, r8
 8014442:	2b00      	cmp	r3, #0
 8014444:	dc00      	bgt.n	8014448 <__kernel_rem_pio2+0x67c>
 8014446:	e114      	b.n	8014672 <__kernel_rem_pio2+0x8a6>
 8014448:	9a03      	ldr	r2, [sp, #12]
 801444a:	00db      	lsls	r3, r3, #3
 801444c:	469b      	mov	fp, r3
 801444e:	0013      	movs	r3, r2
 8014450:	4691      	mov	r9, r2
 8014452:	445b      	add	r3, fp
 8014454:	681e      	ldr	r6, [r3, #0]
 8014456:	685f      	ldr	r7, [r3, #4]
 8014458:	4b23      	ldr	r3, [pc, #140]	; (80144e8 <__kernel_rem_pio2+0x71c>)
 801445a:	4443      	add	r3, r8
 801445c:	9302      	str	r3, [sp, #8]
 801445e:	00db      	lsls	r3, r3, #3
 8014460:	4499      	add	r9, r3
 8014462:	ab48      	add	r3, sp, #288	; 0x120
 8014464:	469a      	mov	sl, r3
 8014466:	464b      	mov	r3, r9
 8014468:	685c      	ldr	r4, [r3, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	0018      	movs	r0, r3
 801446e:	0021      	movs	r1, r4
 8014470:	0032      	movs	r2, r6
 8014472:	003b      	movs	r3, r7
 8014474:	9000      	str	r0, [sp, #0]
 8014476:	9101      	str	r1, [sp, #4]
 8014478:	f7fa ffe8 	bl	800f44c <__aeabi_dadd>
 801447c:	0004      	movs	r4, r0
 801447e:	000d      	movs	r5, r1
 8014480:	0002      	movs	r2, r0
 8014482:	000b      	movs	r3, r1
 8014484:	9800      	ldr	r0, [sp, #0]
 8014486:	9901      	ldr	r1, [sp, #4]
 8014488:	f7fc f978 	bl	801077c <__aeabi_dsub>
 801448c:	003b      	movs	r3, r7
 801448e:	0032      	movs	r2, r6
 8014490:	f7fa ffdc 	bl	800f44c <__aeabi_dadd>
 8014494:	464b      	mov	r3, r9
 8014496:	6098      	str	r0, [r3, #8]
 8014498:	60d9      	str	r1, [r3, #12]
 801449a:	601c      	str	r4, [r3, #0]
 801449c:	605d      	str	r5, [r3, #4]
 801449e:	2308      	movs	r3, #8
 80144a0:	425b      	negs	r3, r3
 80144a2:	469c      	mov	ip, r3
 80144a4:	44e1      	add	r9, ip
 80144a6:	0026      	movs	r6, r4
 80144a8:	002f      	movs	r7, r5
 80144aa:	45ca      	cmp	sl, r9
 80144ac:	d1db      	bne.n	8014466 <__kernel_rem_pio2+0x69a>
 80144ae:	4643      	mov	r3, r8
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	dc00      	bgt.n	80144b6 <__kernel_rem_pio2+0x6ea>
 80144b4:	e0e3      	b.n	801467e <__kernel_rem_pio2+0x8b2>
 80144b6:	9a03      	ldr	r2, [sp, #12]
 80144b8:	0013      	movs	r3, r2
 80144ba:	445b      	add	r3, fp
 80144bc:	681e      	ldr	r6, [r3, #0]
 80144be:	685f      	ldr	r7, [r3, #4]
 80144c0:	9b02      	ldr	r3, [sp, #8]
 80144c2:	00db      	lsls	r3, r3, #3
 80144c4:	4699      	mov	r9, r3
 80144c6:	444a      	add	r2, r9
 80144c8:	4690      	mov	r8, r2
 80144ca:	e010      	b.n	80144ee <__kernel_rem_pio2+0x722>
 80144cc:	00ffffff 	.word	0x00ffffff
 80144d0:	3fe00000 	.word	0x3fe00000
 80144d4:	3ff00000 	.word	0x3ff00000
 80144d8:	3fffffff 	.word	0x3fffffff
 80144dc:	3e700000 	.word	0x3e700000
 80144e0:	0801e500 	.word	0x0801e500
 80144e4:	3ff921fb 	.word	0x3ff921fb
 80144e8:	1fffffff 	.word	0x1fffffff
 80144ec:	4698      	mov	r8, r3
 80144ee:	4643      	mov	r3, r8
 80144f0:	685c      	ldr	r4, [r3, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	0018      	movs	r0, r3
 80144f6:	0021      	movs	r1, r4
 80144f8:	0032      	movs	r2, r6
 80144fa:	003b      	movs	r3, r7
 80144fc:	9000      	str	r0, [sp, #0]
 80144fe:	9101      	str	r1, [sp, #4]
 8014500:	f7fa ffa4 	bl	800f44c <__aeabi_dadd>
 8014504:	0004      	movs	r4, r0
 8014506:	000d      	movs	r5, r1
 8014508:	0002      	movs	r2, r0
 801450a:	000b      	movs	r3, r1
 801450c:	9800      	ldr	r0, [sp, #0]
 801450e:	9901      	ldr	r1, [sp, #4]
 8014510:	f7fc f934 	bl	801077c <__aeabi_dsub>
 8014514:	0032      	movs	r2, r6
 8014516:	003b      	movs	r3, r7
 8014518:	f7fa ff98 	bl	800f44c <__aeabi_dadd>
 801451c:	4643      	mov	r3, r8
 801451e:	9a03      	ldr	r2, [sp, #12]
 8014520:	6098      	str	r0, [r3, #8]
 8014522:	60d9      	str	r1, [r3, #12]
 8014524:	601c      	str	r4, [r3, #0]
 8014526:	605d      	str	r5, [r3, #4]
 8014528:	3b08      	subs	r3, #8
 801452a:	0026      	movs	r6, r4
 801452c:	002f      	movs	r7, r5
 801452e:	429a      	cmp	r2, r3
 8014530:	d1dc      	bne.n	80144ec <__kernel_rem_pio2+0x720>
 8014532:	464d      	mov	r5, r9
 8014534:	4694      	mov	ip, r2
 8014536:	2600      	movs	r6, #0
 8014538:	2400      	movs	r4, #0
 801453a:	4647      	mov	r7, r8
 801453c:	3508      	adds	r5, #8
 801453e:	4465      	add	r5, ip
 8014540:	682a      	ldr	r2, [r5, #0]
 8014542:	686b      	ldr	r3, [r5, #4]
 8014544:	0030      	movs	r0, r6
 8014546:	0021      	movs	r1, r4
 8014548:	f7fa ff80 	bl	800f44c <__aeabi_dadd>
 801454c:	3d08      	subs	r5, #8
 801454e:	0006      	movs	r6, r0
 8014550:	000c      	movs	r4, r1
 8014552:	42af      	cmp	r7, r5
 8014554:	d1f4      	bne.n	8014540 <__kernel_rem_pio2+0x774>
 8014556:	9b03      	ldr	r3, [sp, #12]
 8014558:	9f4a      	ldr	r7, [sp, #296]	; 0x128
 801455a:	685d      	ldr	r5, [r3, #4]
 801455c:	6899      	ldr	r1, [r3, #8]
 801455e:	68d8      	ldr	r0, [r3, #12]
 8014560:	9b08      	ldr	r3, [sp, #32]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d065      	beq.n	8014632 <__kernel_rem_pio2+0x866>
 8014566:	2280      	movs	r2, #128	; 0x80
 8014568:	0612      	lsls	r2, r2, #24
 801456a:	4694      	mov	ip, r2
 801456c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801456e:	4465      	add	r5, ip
 8014570:	4460      	add	r0, ip
 8014572:	4464      	add	r4, ip
 8014574:	601f      	str	r7, [r3, #0]
 8014576:	605d      	str	r5, [r3, #4]
 8014578:	6099      	str	r1, [r3, #8]
 801457a:	60d8      	str	r0, [r3, #12]
 801457c:	611e      	str	r6, [r3, #16]
 801457e:	615c      	str	r4, [r3, #20]
 8014580:	e6ee      	b.n	8014360 <__kernel_rem_pio2+0x594>
 8014582:	469a      	mov	sl, r3
 8014584:	464b      	mov	r3, r9
 8014586:	9307      	str	r3, [sp, #28]
 8014588:	9b05      	ldr	r3, [sp, #20]
 801458a:	0030      	movs	r0, r6
 801458c:	425a      	negs	r2, r3
 801458e:	0039      	movs	r1, r7
 8014590:	9508      	str	r5, [sp, #32]
 8014592:	f000 f9d5 	bl	8014940 <scalbn>
 8014596:	2200      	movs	r2, #0
 8014598:	4b3a      	ldr	r3, [pc, #232]	; (8014684 <__kernel_rem_pio2+0x8b8>)
 801459a:	0006      	movs	r6, r0
 801459c:	000f      	movs	r7, r1
 801459e:	f7fa fc73 	bl	800ee88 <__aeabi_dcmpge>
 80145a2:	2800      	cmp	r0, #0
 80145a4:	d024      	beq.n	80145f0 <__kernel_rem_pio2+0x824>
 80145a6:	4b38      	ldr	r3, [pc, #224]	; (8014688 <__kernel_rem_pio2+0x8bc>)
 80145a8:	2200      	movs	r2, #0
 80145aa:	0030      	movs	r0, r6
 80145ac:	0039      	movs	r1, r7
 80145ae:	f7fb fe73 	bl	8010298 <__aeabi_dmul>
 80145b2:	f7fc fc47 	bl	8010e44 <__aeabi_d2iz>
 80145b6:	4652      	mov	r2, sl
 80145b8:	0004      	movs	r4, r0
 80145ba:	0095      	lsls	r5, r2, #2
 80145bc:	f7fc fc78 	bl	8010eb0 <__aeabi_i2d>
 80145c0:	2200      	movs	r2, #0
 80145c2:	4b30      	ldr	r3, [pc, #192]	; (8014684 <__kernel_rem_pio2+0x8b8>)
 80145c4:	f7fb fe68 	bl	8010298 <__aeabi_dmul>
 80145c8:	0002      	movs	r2, r0
 80145ca:	000b      	movs	r3, r1
 80145cc:	0030      	movs	r0, r6
 80145ce:	0039      	movs	r1, r7
 80145d0:	f7fc f8d4 	bl	801077c <__aeabi_dsub>
 80145d4:	f7fc fc36 	bl	8010e44 <__aeabi_d2iz>
 80145d8:	aa0e      	add	r2, sp, #56	; 0x38
 80145da:	5150      	str	r0, [r2, r5]
 80145dc:	2201      	movs	r2, #1
 80145de:	9b05      	ldr	r3, [sp, #20]
 80145e0:	4452      	add	r2, sl
 80145e2:	3318      	adds	r3, #24
 80145e4:	4690      	mov	r8, r2
 80145e6:	9305      	str	r3, [sp, #20]
 80145e8:	0093      	lsls	r3, r2, #2
 80145ea:	aa0e      	add	r2, sp, #56	; 0x38
 80145ec:	50d4      	str	r4, [r2, r3]
 80145ee:	e623      	b.n	8014238 <__kernel_rem_pio2+0x46c>
 80145f0:	4653      	mov	r3, sl
 80145f2:	0030      	movs	r0, r6
 80145f4:	0039      	movs	r1, r7
 80145f6:	009c      	lsls	r4, r3, #2
 80145f8:	f7fc fc24 	bl	8010e44 <__aeabi_d2iz>
 80145fc:	ab0e      	add	r3, sp, #56	; 0x38
 80145fe:	5118      	str	r0, [r3, r4]
 8014600:	46d0      	mov	r8, sl
 8014602:	e619      	b.n	8014238 <__kernel_rem_pio2+0x46c>
 8014604:	2380      	movs	r3, #128	; 0x80
 8014606:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014608:	061b      	lsls	r3, r3, #24
 801460a:	18cb      	adds	r3, r1, r3
 801460c:	6010      	str	r0, [r2, #0]
 801460e:	6053      	str	r3, [r2, #4]
 8014610:	000b      	movs	r3, r1
 8014612:	0002      	movs	r2, r0
 8014614:	984a      	ldr	r0, [sp, #296]	; 0x128
 8014616:	994b      	ldr	r1, [sp, #300]	; 0x12c
 8014618:	f7fc f8b0 	bl	801077c <__aeabi_dsub>
 801461c:	4643      	mov	r3, r8
 801461e:	0007      	movs	r7, r0
 8014620:	000c      	movs	r4, r1
 8014622:	2b00      	cmp	r3, #0
 8014624:	dd00      	ble.n	8014628 <__kernel_rem_pio2+0x85c>
 8014626:	e6d5      	b.n	80143d4 <__kernel_rem_pio2+0x608>
 8014628:	2380      	movs	r3, #128	; 0x80
 801462a:	061b      	lsls	r3, r3, #24
 801462c:	469c      	mov	ip, r3
 801462e:	4464      	add	r4, ip
 8014630:	e6e4      	b.n	80143fc <__kernel_rem_pio2+0x630>
 8014632:	002b      	movs	r3, r5
 8014634:	003a      	movs	r2, r7
 8014636:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014638:	602a      	str	r2, [r5, #0]
 801463a:	606b      	str	r3, [r5, #4]
 801463c:	000a      	movs	r2, r1
 801463e:	0003      	movs	r3, r0
 8014640:	60aa      	str	r2, [r5, #8]
 8014642:	60eb      	str	r3, [r5, #12]
 8014644:	0032      	movs	r2, r6
 8014646:	0023      	movs	r3, r4
 8014648:	612a      	str	r2, [r5, #16]
 801464a:	616b      	str	r3, [r5, #20]
 801464c:	e688      	b.n	8014360 <__kernel_rem_pio2+0x594>
 801464e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	9300      	str	r3, [sp, #0]
 8014654:	ab72      	add	r3, sp, #456	; 0x1c8
 8014656:	9304      	str	r3, [sp, #16]
 8014658:	e432      	b.n	8013ec0 <__kernel_rem_pio2+0xf4>
 801465a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801465c:	2b02      	cmp	r3, #2
 801465e:	dd00      	ble.n	8014662 <__kernel_rem_pio2+0x896>
 8014660:	e6e8      	b.n	8014434 <__kernel_rem_pio2+0x668>
 8014662:	2b00      	cmp	r3, #0
 8014664:	dd00      	ble.n	8014668 <__kernel_rem_pio2+0x89c>
 8014666:	e692      	b.n	801438e <__kernel_rem_pio2+0x5c2>
 8014668:	d000      	beq.n	801466c <__kernel_rem_pio2+0x8a0>
 801466a:	e679      	b.n	8014360 <__kernel_rem_pio2+0x594>
 801466c:	2700      	movs	r7, #0
 801466e:	2400      	movs	r4, #0
 8014670:	e66a      	b.n	8014348 <__kernel_rem_pio2+0x57c>
 8014672:	2600      	movs	r6, #0
 8014674:	2400      	movs	r4, #0
 8014676:	e76e      	b.n	8014556 <__kernel_rem_pio2+0x78a>
 8014678:	2000      	movs	r0, #0
 801467a:	2100      	movs	r1, #0
 801467c:	e698      	b.n	80143b0 <__kernel_rem_pio2+0x5e4>
 801467e:	2600      	movs	r6, #0
 8014680:	0034      	movs	r4, r6
 8014682:	e768      	b.n	8014556 <__kernel_rem_pio2+0x78a>
 8014684:	41700000 	.word	0x41700000
 8014688:	3e700000 	.word	0x3e700000

0801468c <__kernel_sin>:
 801468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468e:	46ce      	mov	lr, r9
 8014690:	4647      	mov	r7, r8
 8014692:	b580      	push	{r7, lr}
 8014694:	b087      	sub	sp, #28
 8014696:	9200      	str	r2, [sp, #0]
 8014698:	9301      	str	r3, [sp, #4]
 801469a:	4a47      	ldr	r2, [pc, #284]	; (80147b8 <__kernel_sin+0x12c>)
 801469c:	004b      	lsls	r3, r1, #1
 801469e:	4681      	mov	r9, r0
 80146a0:	4688      	mov	r8, r1
 80146a2:	085b      	lsrs	r3, r3, #1
 80146a4:	4293      	cmp	r3, r2
 80146a6:	dc07      	bgt.n	80146b8 <__kernel_sin+0x2c>
 80146a8:	4641      	mov	r1, r8
 80146aa:	4648      	mov	r0, r9
 80146ac:	f7fc fbca 	bl	8010e44 <__aeabi_d2iz>
 80146b0:	4641      	mov	r1, r8
 80146b2:	1e03      	subs	r3, r0, #0
 80146b4:	4648      	mov	r0, r9
 80146b6:	d066      	beq.n	8014786 <__kernel_sin+0xfa>
 80146b8:	464a      	mov	r2, r9
 80146ba:	4643      	mov	r3, r8
 80146bc:	4648      	mov	r0, r9
 80146be:	4641      	mov	r1, r8
 80146c0:	f7fb fdea 	bl	8010298 <__aeabi_dmul>
 80146c4:	0004      	movs	r4, r0
 80146c6:	000d      	movs	r5, r1
 80146c8:	0002      	movs	r2, r0
 80146ca:	000b      	movs	r3, r1
 80146cc:	4648      	mov	r0, r9
 80146ce:	4641      	mov	r1, r8
 80146d0:	f7fb fde2 	bl	8010298 <__aeabi_dmul>
 80146d4:	4a39      	ldr	r2, [pc, #228]	; (80147bc <__kernel_sin+0x130>)
 80146d6:	4b3a      	ldr	r3, [pc, #232]	; (80147c0 <__kernel_sin+0x134>)
 80146d8:	0006      	movs	r6, r0
 80146da:	000f      	movs	r7, r1
 80146dc:	0020      	movs	r0, r4
 80146de:	0029      	movs	r1, r5
 80146e0:	f7fb fdda 	bl	8010298 <__aeabi_dmul>
 80146e4:	4a37      	ldr	r2, [pc, #220]	; (80147c4 <__kernel_sin+0x138>)
 80146e6:	4b38      	ldr	r3, [pc, #224]	; (80147c8 <__kernel_sin+0x13c>)
 80146e8:	f7fc f848 	bl	801077c <__aeabi_dsub>
 80146ec:	0022      	movs	r2, r4
 80146ee:	002b      	movs	r3, r5
 80146f0:	f7fb fdd2 	bl	8010298 <__aeabi_dmul>
 80146f4:	4a35      	ldr	r2, [pc, #212]	; (80147cc <__kernel_sin+0x140>)
 80146f6:	4b36      	ldr	r3, [pc, #216]	; (80147d0 <__kernel_sin+0x144>)
 80146f8:	f7fa fea8 	bl	800f44c <__aeabi_dadd>
 80146fc:	0022      	movs	r2, r4
 80146fe:	002b      	movs	r3, r5
 8014700:	f7fb fdca 	bl	8010298 <__aeabi_dmul>
 8014704:	4a33      	ldr	r2, [pc, #204]	; (80147d4 <__kernel_sin+0x148>)
 8014706:	4b34      	ldr	r3, [pc, #208]	; (80147d8 <__kernel_sin+0x14c>)
 8014708:	f7fc f838 	bl	801077c <__aeabi_dsub>
 801470c:	0022      	movs	r2, r4
 801470e:	002b      	movs	r3, r5
 8014710:	f7fb fdc2 	bl	8010298 <__aeabi_dmul>
 8014714:	4b31      	ldr	r3, [pc, #196]	; (80147dc <__kernel_sin+0x150>)
 8014716:	4a32      	ldr	r2, [pc, #200]	; (80147e0 <__kernel_sin+0x154>)
 8014718:	f7fa fe98 	bl	800f44c <__aeabi_dadd>
 801471c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801471e:	9002      	str	r0, [sp, #8]
 8014720:	9103      	str	r1, [sp, #12]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d034      	beq.n	8014790 <__kernel_sin+0x104>
 8014726:	9800      	ldr	r0, [sp, #0]
 8014728:	9901      	ldr	r1, [sp, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	4b2d      	ldr	r3, [pc, #180]	; (80147e4 <__kernel_sin+0x158>)
 801472e:	f7fb fdb3 	bl	8010298 <__aeabi_dmul>
 8014732:	9a02      	ldr	r2, [sp, #8]
 8014734:	9b03      	ldr	r3, [sp, #12]
 8014736:	9004      	str	r0, [sp, #16]
 8014738:	9105      	str	r1, [sp, #20]
 801473a:	0030      	movs	r0, r6
 801473c:	0039      	movs	r1, r7
 801473e:	f7fb fdab 	bl	8010298 <__aeabi_dmul>
 8014742:	0002      	movs	r2, r0
 8014744:	000b      	movs	r3, r1
 8014746:	9804      	ldr	r0, [sp, #16]
 8014748:	9905      	ldr	r1, [sp, #20]
 801474a:	f7fc f817 	bl	801077c <__aeabi_dsub>
 801474e:	0022      	movs	r2, r4
 8014750:	002b      	movs	r3, r5
 8014752:	f7fb fda1 	bl	8010298 <__aeabi_dmul>
 8014756:	9a00      	ldr	r2, [sp, #0]
 8014758:	9b01      	ldr	r3, [sp, #4]
 801475a:	f7fc f80f 	bl	801077c <__aeabi_dsub>
 801475e:	4a22      	ldr	r2, [pc, #136]	; (80147e8 <__kernel_sin+0x15c>)
 8014760:	0004      	movs	r4, r0
 8014762:	000d      	movs	r5, r1
 8014764:	4b21      	ldr	r3, [pc, #132]	; (80147ec <__kernel_sin+0x160>)
 8014766:	0030      	movs	r0, r6
 8014768:	0039      	movs	r1, r7
 801476a:	f7fb fd95 	bl	8010298 <__aeabi_dmul>
 801476e:	0002      	movs	r2, r0
 8014770:	000b      	movs	r3, r1
 8014772:	0020      	movs	r0, r4
 8014774:	0029      	movs	r1, r5
 8014776:	f7fa fe69 	bl	800f44c <__aeabi_dadd>
 801477a:	0002      	movs	r2, r0
 801477c:	000b      	movs	r3, r1
 801477e:	4648      	mov	r0, r9
 8014780:	4641      	mov	r1, r8
 8014782:	f7fb fffb 	bl	801077c <__aeabi_dsub>
 8014786:	b007      	add	sp, #28
 8014788:	bc0c      	pop	{r2, r3}
 801478a:	4690      	mov	r8, r2
 801478c:	4699      	mov	r9, r3
 801478e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014790:	0002      	movs	r2, r0
 8014792:	000b      	movs	r3, r1
 8014794:	0020      	movs	r0, r4
 8014796:	0029      	movs	r1, r5
 8014798:	f7fb fd7e 	bl	8010298 <__aeabi_dmul>
 801479c:	4a12      	ldr	r2, [pc, #72]	; (80147e8 <__kernel_sin+0x15c>)
 801479e:	4b13      	ldr	r3, [pc, #76]	; (80147ec <__kernel_sin+0x160>)
 80147a0:	f7fb ffec 	bl	801077c <__aeabi_dsub>
 80147a4:	0032      	movs	r2, r6
 80147a6:	003b      	movs	r3, r7
 80147a8:	f7fb fd76 	bl	8010298 <__aeabi_dmul>
 80147ac:	464a      	mov	r2, r9
 80147ae:	4643      	mov	r3, r8
 80147b0:	f7fa fe4c 	bl	800f44c <__aeabi_dadd>
 80147b4:	e7e7      	b.n	8014786 <__kernel_sin+0xfa>
 80147b6:	46c0      	nop			; (mov r8, r8)
 80147b8:	3e3fffff 	.word	0x3e3fffff
 80147bc:	5acfd57c 	.word	0x5acfd57c
 80147c0:	3de5d93a 	.word	0x3de5d93a
 80147c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80147c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80147cc:	57b1fe7d 	.word	0x57b1fe7d
 80147d0:	3ec71de3 	.word	0x3ec71de3
 80147d4:	19c161d5 	.word	0x19c161d5
 80147d8:	3f2a01a0 	.word	0x3f2a01a0
 80147dc:	3f811111 	.word	0x3f811111
 80147e0:	1110f8a6 	.word	0x1110f8a6
 80147e4:	3fe00000 	.word	0x3fe00000
 80147e8:	55555549 	.word	0x55555549
 80147ec:	3fc55555 	.word	0x3fc55555

080147f0 <fabs>:
 80147f0:	0049      	lsls	r1, r1, #1
 80147f2:	084b      	lsrs	r3, r1, #1
 80147f4:	0019      	movs	r1, r3
 80147f6:	4770      	bx	lr

080147f8 <floor>:
 80147f8:	4a47      	ldr	r2, [pc, #284]	; (8014918 <floor+0x120>)
 80147fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147fc:	464f      	mov	r7, r9
 80147fe:	4691      	mov	r9, r2
 8014800:	004b      	lsls	r3, r1, #1
 8014802:	0d5b      	lsrs	r3, r3, #21
 8014804:	4499      	add	r9, r3
 8014806:	4646      	mov	r6, r8
 8014808:	46d6      	mov	lr, sl
 801480a:	464a      	mov	r2, r9
 801480c:	b5c0      	push	{r6, r7, lr}
 801480e:	0005      	movs	r5, r0
 8014810:	000c      	movs	r4, r1
 8014812:	000e      	movs	r6, r1
 8014814:	4688      	mov	r8, r1
 8014816:	0007      	movs	r7, r0
 8014818:	2a13      	cmp	r2, #19
 801481a:	dc27      	bgt.n	801486c <floor+0x74>
 801481c:	2a00      	cmp	r2, #0
 801481e:	db4b      	blt.n	80148b8 <floor+0xc0>
 8014820:	4b3e      	ldr	r3, [pc, #248]	; (801491c <floor+0x124>)
 8014822:	4113      	asrs	r3, r2
 8014824:	469a      	mov	sl, r3
 8014826:	000b      	movs	r3, r1
 8014828:	4652      	mov	r2, sl
 801482a:	4013      	ands	r3, r2
 801482c:	4303      	orrs	r3, r0
 801482e:	d018      	beq.n	8014862 <floor+0x6a>
 8014830:	4a3b      	ldr	r2, [pc, #236]	; (8014920 <floor+0x128>)
 8014832:	4b3c      	ldr	r3, [pc, #240]	; (8014924 <floor+0x12c>)
 8014834:	0028      	movs	r0, r5
 8014836:	0021      	movs	r1, r4
 8014838:	f7fa fe08 	bl	800f44c <__aeabi_dadd>
 801483c:	2200      	movs	r2, #0
 801483e:	2300      	movs	r3, #0
 8014840:	f7fa fb18 	bl	800ee74 <__aeabi_dcmpgt>
 8014844:	2800      	cmp	r0, #0
 8014846:	d047      	beq.n	80148d8 <floor+0xe0>
 8014848:	2c00      	cmp	r4, #0
 801484a:	da04      	bge.n	8014856 <floor+0x5e>
 801484c:	2380      	movs	r3, #128	; 0x80
 801484e:	464a      	mov	r2, r9
 8014850:	035b      	lsls	r3, r3, #13
 8014852:	4113      	asrs	r3, r2
 8014854:	4498      	add	r8, r3
 8014856:	4646      	mov	r6, r8
 8014858:	4653      	mov	r3, sl
 801485a:	2700      	movs	r7, #0
 801485c:	439e      	bics	r6, r3
 801485e:	0038      	movs	r0, r7
 8014860:	0031      	movs	r1, r6
 8014862:	bc1c      	pop	{r2, r3, r4}
 8014864:	4690      	mov	r8, r2
 8014866:	4699      	mov	r9, r3
 8014868:	46a2      	mov	sl, r4
 801486a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801486c:	2a33      	cmp	r2, #51	; 0x33
 801486e:	dd08      	ble.n	8014882 <floor+0x8a>
 8014870:	2380      	movs	r3, #128	; 0x80
 8014872:	00db      	lsls	r3, r3, #3
 8014874:	4599      	cmp	r9, r3
 8014876:	d1f4      	bne.n	8014862 <floor+0x6a>
 8014878:	0002      	movs	r2, r0
 801487a:	000b      	movs	r3, r1
 801487c:	f7fa fde6 	bl	800f44c <__aeabi_dadd>
 8014880:	e7ef      	b.n	8014862 <floor+0x6a>
 8014882:	4a29      	ldr	r2, [pc, #164]	; (8014928 <floor+0x130>)
 8014884:	4694      	mov	ip, r2
 8014886:	2201      	movs	r2, #1
 8014888:	4463      	add	r3, ip
 801488a:	4252      	negs	r2, r2
 801488c:	40da      	lsrs	r2, r3
 801488e:	4692      	mov	sl, r2
 8014890:	4202      	tst	r2, r0
 8014892:	d0e6      	beq.n	8014862 <floor+0x6a>
 8014894:	4a22      	ldr	r2, [pc, #136]	; (8014920 <floor+0x128>)
 8014896:	4b23      	ldr	r3, [pc, #140]	; (8014924 <floor+0x12c>)
 8014898:	0028      	movs	r0, r5
 801489a:	0021      	movs	r1, r4
 801489c:	f7fa fdd6 	bl	800f44c <__aeabi_dadd>
 80148a0:	2200      	movs	r2, #0
 80148a2:	2300      	movs	r3, #0
 80148a4:	f7fa fae6 	bl	800ee74 <__aeabi_dcmpgt>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	d015      	beq.n	80148d8 <floor+0xe0>
 80148ac:	2c00      	cmp	r4, #0
 80148ae:	db1e      	blt.n	80148ee <floor+0xf6>
 80148b0:	4653      	mov	r3, sl
 80148b2:	4646      	mov	r6, r8
 80148b4:	439f      	bics	r7, r3
 80148b6:	e00f      	b.n	80148d8 <floor+0xe0>
 80148b8:	4a19      	ldr	r2, [pc, #100]	; (8014920 <floor+0x128>)
 80148ba:	4b1a      	ldr	r3, [pc, #104]	; (8014924 <floor+0x12c>)
 80148bc:	0028      	movs	r0, r5
 80148be:	0021      	movs	r1, r4
 80148c0:	f7fa fdc4 	bl	800f44c <__aeabi_dadd>
 80148c4:	2200      	movs	r2, #0
 80148c6:	2300      	movs	r3, #0
 80148c8:	f7fa fad4 	bl	800ee74 <__aeabi_dcmpgt>
 80148cc:	2800      	cmp	r0, #0
 80148ce:	d003      	beq.n	80148d8 <floor+0xe0>
 80148d0:	2c00      	cmp	r4, #0
 80148d2:	db04      	blt.n	80148de <floor+0xe6>
 80148d4:	2700      	movs	r7, #0
 80148d6:	2600      	movs	r6, #0
 80148d8:	0038      	movs	r0, r7
 80148da:	0031      	movs	r1, r6
 80148dc:	e7c1      	b.n	8014862 <floor+0x6a>
 80148de:	0064      	lsls	r4, r4, #1
 80148e0:	0864      	lsrs	r4, r4, #1
 80148e2:	4325      	orrs	r5, r4
 80148e4:	2700      	movs	r7, #0
 80148e6:	2d00      	cmp	r5, #0
 80148e8:	d0f6      	beq.n	80148d8 <floor+0xe0>
 80148ea:	4e10      	ldr	r6, [pc, #64]	; (801492c <floor+0x134>)
 80148ec:	e7f4      	b.n	80148d8 <floor+0xe0>
 80148ee:	464b      	mov	r3, r9
 80148f0:	2b14      	cmp	r3, #20
 80148f2:	d00b      	beq.n	801490c <floor+0x114>
 80148f4:	2234      	movs	r2, #52	; 0x34
 80148f6:	1ad2      	subs	r2, r2, r3
 80148f8:	2301      	movs	r3, #1
 80148fa:	4093      	lsls	r3, r2
 80148fc:	195d      	adds	r5, r3, r5
 80148fe:	42bd      	cmp	r5, r7
 8014900:	d208      	bcs.n	8014914 <floor+0x11c>
 8014902:	2301      	movs	r3, #1
 8014904:	469c      	mov	ip, r3
 8014906:	002f      	movs	r7, r5
 8014908:	44e0      	add	r8, ip
 801490a:	e7d1      	b.n	80148b0 <floor+0xb8>
 801490c:	3b13      	subs	r3, #19
 801490e:	469c      	mov	ip, r3
 8014910:	44e0      	add	r8, ip
 8014912:	e7cd      	b.n	80148b0 <floor+0xb8>
 8014914:	002f      	movs	r7, r5
 8014916:	e7cb      	b.n	80148b0 <floor+0xb8>
 8014918:	fffffc01 	.word	0xfffffc01
 801491c:	000fffff 	.word	0x000fffff
 8014920:	8800759c 	.word	0x8800759c
 8014924:	7e37e43c 	.word	0x7e37e43c
 8014928:	fffffbed 	.word	0xfffffbed
 801492c:	bff00000 	.word	0xbff00000

08014930 <matherr>:
 8014930:	2000      	movs	r0, #0
 8014932:	4770      	bx	lr

08014934 <nan>:
 8014934:	2000      	movs	r0, #0
 8014936:	4901      	ldr	r1, [pc, #4]	; (801493c <nan+0x8>)
 8014938:	4770      	bx	lr
 801493a:	46c0      	nop			; (mov r8, r8)
 801493c:	7ff80000 	.word	0x7ff80000

08014940 <scalbn>:
 8014940:	004b      	lsls	r3, r1, #1
 8014942:	b570      	push	{r4, r5, r6, lr}
 8014944:	0d5b      	lsrs	r3, r3, #21
 8014946:	0014      	movs	r4, r2
 8014948:	000a      	movs	r2, r1
 801494a:	2b00      	cmp	r3, #0
 801494c:	d11a      	bne.n	8014984 <scalbn+0x44>
 801494e:	004b      	lsls	r3, r1, #1
 8014950:	085b      	lsrs	r3, r3, #1
 8014952:	4303      	orrs	r3, r0
 8014954:	d015      	beq.n	8014982 <scalbn+0x42>
 8014956:	4b23      	ldr	r3, [pc, #140]	; (80149e4 <scalbn+0xa4>)
 8014958:	2200      	movs	r2, #0
 801495a:	f7fb fc9d 	bl	8010298 <__aeabi_dmul>
 801495e:	4b22      	ldr	r3, [pc, #136]	; (80149e8 <scalbn+0xa8>)
 8014960:	429c      	cmp	r4, r3
 8014962:	db2d      	blt.n	80149c0 <scalbn+0x80>
 8014964:	000a      	movs	r2, r1
 8014966:	004b      	lsls	r3, r1, #1
 8014968:	0d5b      	lsrs	r3, r3, #21
 801496a:	3b36      	subs	r3, #54	; 0x36
 801496c:	4d1f      	ldr	r5, [pc, #124]	; (80149ec <scalbn+0xac>)
 801496e:	18e3      	adds	r3, r4, r3
 8014970:	42ab      	cmp	r3, r5
 8014972:	dc2a      	bgt.n	80149ca <scalbn+0x8a>
 8014974:	2b00      	cmp	r3, #0
 8014976:	dd0d      	ble.n	8014994 <scalbn+0x54>
 8014978:	4c1d      	ldr	r4, [pc, #116]	; (80149f0 <scalbn+0xb0>)
 801497a:	051b      	lsls	r3, r3, #20
 801497c:	4022      	ands	r2, r4
 801497e:	431a      	orrs	r2, r3
 8014980:	0011      	movs	r1, r2
 8014982:	bd70      	pop	{r4, r5, r6, pc}
 8014984:	4d1b      	ldr	r5, [pc, #108]	; (80149f4 <scalbn+0xb4>)
 8014986:	42ab      	cmp	r3, r5
 8014988:	d1f0      	bne.n	801496c <scalbn+0x2c>
 801498a:	0002      	movs	r2, r0
 801498c:	000b      	movs	r3, r1
 801498e:	f7fa fd5d 	bl	800f44c <__aeabi_dadd>
 8014992:	e7f6      	b.n	8014982 <scalbn+0x42>
 8014994:	001d      	movs	r5, r3
 8014996:	3535      	adds	r5, #53	; 0x35
 8014998:	da19      	bge.n	80149ce <scalbn+0x8e>
 801499a:	4b17      	ldr	r3, [pc, #92]	; (80149f8 <scalbn+0xb8>)
 801499c:	0002      	movs	r2, r0
 801499e:	429c      	cmp	r4, r3
 80149a0:	dd09      	ble.n	80149b6 <scalbn+0x76>
 80149a2:	000b      	movs	r3, r1
 80149a4:	4815      	ldr	r0, [pc, #84]	; (80149fc <scalbn+0xbc>)
 80149a6:	4916      	ldr	r1, [pc, #88]	; (8014a00 <scalbn+0xc0>)
 80149a8:	f000 f982 	bl	8014cb0 <copysign>
 80149ac:	4a13      	ldr	r2, [pc, #76]	; (80149fc <scalbn+0xbc>)
 80149ae:	4b14      	ldr	r3, [pc, #80]	; (8014a00 <scalbn+0xc0>)
 80149b0:	f7fb fc72 	bl	8010298 <__aeabi_dmul>
 80149b4:	e7e5      	b.n	8014982 <scalbn+0x42>
 80149b6:	000b      	movs	r3, r1
 80149b8:	4812      	ldr	r0, [pc, #72]	; (8014a04 <scalbn+0xc4>)
 80149ba:	4913      	ldr	r1, [pc, #76]	; (8014a08 <scalbn+0xc8>)
 80149bc:	f000 f978 	bl	8014cb0 <copysign>
 80149c0:	4a10      	ldr	r2, [pc, #64]	; (8014a04 <scalbn+0xc4>)
 80149c2:	4b11      	ldr	r3, [pc, #68]	; (8014a08 <scalbn+0xc8>)
 80149c4:	f7fb fc68 	bl	8010298 <__aeabi_dmul>
 80149c8:	e7db      	b.n	8014982 <scalbn+0x42>
 80149ca:	0002      	movs	r2, r0
 80149cc:	e7e9      	b.n	80149a2 <scalbn+0x62>
 80149ce:	4c08      	ldr	r4, [pc, #32]	; (80149f0 <scalbn+0xb0>)
 80149d0:	3336      	adds	r3, #54	; 0x36
 80149d2:	4022      	ands	r2, r4
 80149d4:	051b      	lsls	r3, r3, #20
 80149d6:	4313      	orrs	r3, r2
 80149d8:	0019      	movs	r1, r3
 80149da:	2200      	movs	r2, #0
 80149dc:	4b0b      	ldr	r3, [pc, #44]	; (8014a0c <scalbn+0xcc>)
 80149de:	f7fb fc5b 	bl	8010298 <__aeabi_dmul>
 80149e2:	e7ce      	b.n	8014982 <scalbn+0x42>
 80149e4:	43500000 	.word	0x43500000
 80149e8:	ffff3cb0 	.word	0xffff3cb0
 80149ec:	000007fe 	.word	0x000007fe
 80149f0:	800fffff 	.word	0x800fffff
 80149f4:	000007ff 	.word	0x000007ff
 80149f8:	0000c350 	.word	0x0000c350
 80149fc:	8800759c 	.word	0x8800759c
 8014a00:	7e37e43c 	.word	0x7e37e43c
 8014a04:	c2f8f359 	.word	0xc2f8f359
 8014a08:	01a56e1f 	.word	0x01a56e1f
 8014a0c:	3c900000 	.word	0x3c900000

08014a10 <finitef>:
 8014a10:	0043      	lsls	r3, r0, #1
 8014a12:	2000      	movs	r0, #0
 8014a14:	4a02      	ldr	r2, [pc, #8]	; (8014a20 <finitef+0x10>)
 8014a16:	085b      	lsrs	r3, r3, #1
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	4140      	adcs	r0, r0
 8014a1c:	4770      	bx	lr
 8014a1e:	46c0      	nop			; (mov r8, r8)
 8014a20:	7f7fffff 	.word	0x7f7fffff

08014a24 <__ieee754_logf>:
 8014a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a26:	46de      	mov	lr, fp
 8014a28:	4657      	mov	r7, sl
 8014a2a:	464e      	mov	r6, r9
 8014a2c:	4645      	mov	r5, r8
 8014a2e:	0003      	movs	r3, r0
 8014a30:	b5e0      	push	{r5, r6, r7, lr}
 8014a32:	0042      	lsls	r2, r0, #1
 8014a34:	d044      	beq.n	8014ac0 <__ieee754_logf+0x9c>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	db4d      	blt.n	8014ad6 <__ieee754_logf+0xb2>
 8014a3a:	4a8e      	ldr	r2, [pc, #568]	; (8014c74 <__ieee754_logf+0x250>)
 8014a3c:	4290      	cmp	r0, r2
 8014a3e:	dc51      	bgt.n	8014ae4 <__ieee754_logf+0xc0>
 8014a40:	4a8d      	ldr	r2, [pc, #564]	; (8014c78 <__ieee754_logf+0x254>)
 8014a42:	2100      	movs	r1, #0
 8014a44:	4290      	cmp	r0, r2
 8014a46:	dc06      	bgt.n	8014a56 <__ieee754_logf+0x32>
 8014a48:	2198      	movs	r1, #152	; 0x98
 8014a4a:	05c9      	lsls	r1, r1, #23
 8014a4c:	f7f9 fd40 	bl	800e4d0 <__aeabi_fmul>
 8014a50:	2119      	movs	r1, #25
 8014a52:	0003      	movs	r3, r0
 8014a54:	4249      	negs	r1, r1
 8014a56:	15da      	asrs	r2, r3, #23
 8014a58:	025b      	lsls	r3, r3, #9
 8014a5a:	0a5c      	lsrs	r4, r3, #9
 8014a5c:	4b87      	ldr	r3, [pc, #540]	; (8014c7c <__ieee754_logf+0x258>)
 8014a5e:	3a7f      	subs	r2, #127	; 0x7f
 8014a60:	18e0      	adds	r0, r4, r3
 8014a62:	2380      	movs	r3, #128	; 0x80
 8014a64:	041b      	lsls	r3, r3, #16
 8014a66:	4003      	ands	r3, r0
 8014a68:	20fe      	movs	r0, #254	; 0xfe
 8014a6a:	1852      	adds	r2, r2, r1
 8014a6c:	21fe      	movs	r1, #254	; 0xfe
 8014a6e:	0580      	lsls	r0, r0, #22
 8014a70:	4058      	eors	r0, r3
 8014a72:	15dd      	asrs	r5, r3, #23
 8014a74:	4320      	orrs	r0, r4
 8014a76:	0589      	lsls	r1, r1, #22
 8014a78:	18ad      	adds	r5, r5, r2
 8014a7a:	f7f9 fe5b 	bl	800e734 <__aeabi_fsub>
 8014a7e:	0023      	movs	r3, r4
 8014a80:	330f      	adds	r3, #15
 8014a82:	025b      	lsls	r3, r3, #9
 8014a84:	1c06      	adds	r6, r0, #0
 8014a86:	0a5b      	lsrs	r3, r3, #9
 8014a88:	2b0f      	cmp	r3, #15
 8014a8a:	dc2f      	bgt.n	8014aec <__ieee754_logf+0xc8>
 8014a8c:	2100      	movs	r1, #0
 8014a8e:	f7fa fa11 	bl	800eeb4 <__aeabi_fcmpeq>
 8014a92:	2800      	cmp	r0, #0
 8014a94:	d100      	bne.n	8014a98 <__ieee754_logf+0x74>
 8014a96:	e09e      	b.n	8014bd6 <__ieee754_logf+0x1b2>
 8014a98:	2000      	movs	r0, #0
 8014a9a:	2d00      	cmp	r5, #0
 8014a9c:	d015      	beq.n	8014aca <__ieee754_logf+0xa6>
 8014a9e:	0028      	movs	r0, r5
 8014aa0:	f7fa fc4a 	bl	800f338 <__aeabi_i2f>
 8014aa4:	4976      	ldr	r1, [pc, #472]	; (8014c80 <__ieee754_logf+0x25c>)
 8014aa6:	1c04      	adds	r4, r0, #0
 8014aa8:	f7f9 fd12 	bl	800e4d0 <__aeabi_fmul>
 8014aac:	4975      	ldr	r1, [pc, #468]	; (8014c84 <__ieee754_logf+0x260>)
 8014aae:	1c05      	adds	r5, r0, #0
 8014ab0:	1c20      	adds	r0, r4, #0
 8014ab2:	f7f9 fd0d 	bl	800e4d0 <__aeabi_fmul>
 8014ab6:	1c01      	adds	r1, r0, #0
 8014ab8:	1c28      	adds	r0, r5, #0
 8014aba:	f7f9 fa5d 	bl	800df78 <__aeabi_fadd>
 8014abe:	e004      	b.n	8014aca <__ieee754_logf+0xa6>
 8014ac0:	20cc      	movs	r0, #204	; 0xcc
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	0600      	lsls	r0, r0, #24
 8014ac6:	f7f9 fbf1 	bl	800e2ac <__aeabi_fdiv>
 8014aca:	bc3c      	pop	{r2, r3, r4, r5}
 8014acc:	4690      	mov	r8, r2
 8014ace:	4699      	mov	r9, r3
 8014ad0:	46a2      	mov	sl, r4
 8014ad2:	46ab      	mov	fp, r5
 8014ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ad6:	1c01      	adds	r1, r0, #0
 8014ad8:	f7f9 fe2c 	bl	800e734 <__aeabi_fsub>
 8014adc:	2100      	movs	r1, #0
 8014ade:	f7f9 fbe5 	bl	800e2ac <__aeabi_fdiv>
 8014ae2:	e7f2      	b.n	8014aca <__ieee754_logf+0xa6>
 8014ae4:	1c01      	adds	r1, r0, #0
 8014ae6:	f7f9 fa47 	bl	800df78 <__aeabi_fadd>
 8014aea:	e7ee      	b.n	8014aca <__ieee754_logf+0xa6>
 8014aec:	2180      	movs	r1, #128	; 0x80
 8014aee:	05c9      	lsls	r1, r1, #23
 8014af0:	f7f9 fa42 	bl	800df78 <__aeabi_fadd>
 8014af4:	1c01      	adds	r1, r0, #0
 8014af6:	1c30      	adds	r0, r6, #0
 8014af8:	f7f9 fbd8 	bl	800e2ac <__aeabi_fdiv>
 8014afc:	4680      	mov	r8, r0
 8014afe:	0028      	movs	r0, r5
 8014b00:	f7fa fc1a 	bl	800f338 <__aeabi_i2f>
 8014b04:	4641      	mov	r1, r8
 8014b06:	4681      	mov	r9, r0
 8014b08:	4640      	mov	r0, r8
 8014b0a:	f7f9 fce1 	bl	800e4d0 <__aeabi_fmul>
 8014b0e:	4b5e      	ldr	r3, [pc, #376]	; (8014c88 <__ieee754_logf+0x264>)
 8014b10:	1c01      	adds	r1, r0, #0
 8014b12:	469a      	mov	sl, r3
 8014b14:	4683      	mov	fp, r0
 8014b16:	f7f9 fcdb 	bl	800e4d0 <__aeabi_fmul>
 8014b1a:	495c      	ldr	r1, [pc, #368]	; (8014c8c <__ieee754_logf+0x268>)
 8014b1c:	1c07      	adds	r7, r0, #0
 8014b1e:	f7f9 fcd7 	bl	800e4d0 <__aeabi_fmul>
 8014b22:	495b      	ldr	r1, [pc, #364]	; (8014c90 <__ieee754_logf+0x26c>)
 8014b24:	f7f9 fa28 	bl	800df78 <__aeabi_fadd>
 8014b28:	1c39      	adds	r1, r7, #0
 8014b2a:	f7f9 fcd1 	bl	800e4d0 <__aeabi_fmul>
 8014b2e:	4959      	ldr	r1, [pc, #356]	; (8014c94 <__ieee754_logf+0x270>)
 8014b30:	f7f9 fa22 	bl	800df78 <__aeabi_fadd>
 8014b34:	1c39      	adds	r1, r7, #0
 8014b36:	f7f9 fccb 	bl	800e4d0 <__aeabi_fmul>
 8014b3a:	4957      	ldr	r1, [pc, #348]	; (8014c98 <__ieee754_logf+0x274>)
 8014b3c:	f7f9 fa1c 	bl	800df78 <__aeabi_fadd>
 8014b40:	4659      	mov	r1, fp
 8014b42:	f7f9 fcc5 	bl	800e4d0 <__aeabi_fmul>
 8014b46:	4955      	ldr	r1, [pc, #340]	; (8014c9c <__ieee754_logf+0x278>)
 8014b48:	4683      	mov	fp, r0
 8014b4a:	1c38      	adds	r0, r7, #0
 8014b4c:	f7f9 fcc0 	bl	800e4d0 <__aeabi_fmul>
 8014b50:	4953      	ldr	r1, [pc, #332]	; (8014ca0 <__ieee754_logf+0x27c>)
 8014b52:	f7f9 fa11 	bl	800df78 <__aeabi_fadd>
 8014b56:	1c39      	adds	r1, r7, #0
 8014b58:	f7f9 fcba 	bl	800e4d0 <__aeabi_fmul>
 8014b5c:	4951      	ldr	r1, [pc, #324]	; (8014ca4 <__ieee754_logf+0x280>)
 8014b5e:	f7f9 fa0b 	bl	800df78 <__aeabi_fadd>
 8014b62:	1c39      	adds	r1, r7, #0
 8014b64:	f7f9 fcb4 	bl	800e4d0 <__aeabi_fmul>
 8014b68:	1c01      	adds	r1, r0, #0
 8014b6a:	4658      	mov	r0, fp
 8014b6c:	f7f9 fa04 	bl	800df78 <__aeabi_fadd>
 8014b70:	4b4d      	ldr	r3, [pc, #308]	; (8014ca8 <__ieee754_logf+0x284>)
 8014b72:	44a2      	add	sl, r4
 8014b74:	1b1c      	subs	r4, r3, r4
 8014b76:	4653      	mov	r3, sl
 8014b78:	1c07      	adds	r7, r0, #0
 8014b7a:	431c      	orrs	r4, r3
 8014b7c:	2c00      	cmp	r4, #0
 8014b7e:	dd65      	ble.n	8014c4c <__ieee754_logf+0x228>
 8014b80:	21fc      	movs	r1, #252	; 0xfc
 8014b82:	1c30      	adds	r0, r6, #0
 8014b84:	0589      	lsls	r1, r1, #22
 8014b86:	f7f9 fca3 	bl	800e4d0 <__aeabi_fmul>
 8014b8a:	1c31      	adds	r1, r6, #0
 8014b8c:	f7f9 fca0 	bl	800e4d0 <__aeabi_fmul>
 8014b90:	1c01      	adds	r1, r0, #0
 8014b92:	1c04      	adds	r4, r0, #0
 8014b94:	1c38      	adds	r0, r7, #0
 8014b96:	f7f9 f9ef 	bl	800df78 <__aeabi_fadd>
 8014b9a:	4641      	mov	r1, r8
 8014b9c:	f7f9 fc98 	bl	800e4d0 <__aeabi_fmul>
 8014ba0:	1c07      	adds	r7, r0, #0
 8014ba2:	2d00      	cmp	r5, #0
 8014ba4:	d044      	beq.n	8014c30 <__ieee754_logf+0x20c>
 8014ba6:	4936      	ldr	r1, [pc, #216]	; (8014c80 <__ieee754_logf+0x25c>)
 8014ba8:	4648      	mov	r0, r9
 8014baa:	f7f9 fc91 	bl	800e4d0 <__aeabi_fmul>
 8014bae:	4935      	ldr	r1, [pc, #212]	; (8014c84 <__ieee754_logf+0x260>)
 8014bb0:	1c05      	adds	r5, r0, #0
 8014bb2:	4648      	mov	r0, r9
 8014bb4:	f7f9 fc8c 	bl	800e4d0 <__aeabi_fmul>
 8014bb8:	1c39      	adds	r1, r7, #0
 8014bba:	f7f9 f9dd 	bl	800df78 <__aeabi_fadd>
 8014bbe:	1c01      	adds	r1, r0, #0
 8014bc0:	1c20      	adds	r0, r4, #0
 8014bc2:	f7f9 fdb7 	bl	800e734 <__aeabi_fsub>
 8014bc6:	1c31      	adds	r1, r6, #0
 8014bc8:	f7f9 fdb4 	bl	800e734 <__aeabi_fsub>
 8014bcc:	1c01      	adds	r1, r0, #0
 8014bce:	1c28      	adds	r0, r5, #0
 8014bd0:	f7f9 fdb0 	bl	800e734 <__aeabi_fsub>
 8014bd4:	e779      	b.n	8014aca <__ieee754_logf+0xa6>
 8014bd6:	4935      	ldr	r1, [pc, #212]	; (8014cac <__ieee754_logf+0x288>)
 8014bd8:	1c30      	adds	r0, r6, #0
 8014bda:	f7f9 fc79 	bl	800e4d0 <__aeabi_fmul>
 8014bde:	1c01      	adds	r1, r0, #0
 8014be0:	20fc      	movs	r0, #252	; 0xfc
 8014be2:	0580      	lsls	r0, r0, #22
 8014be4:	f7f9 fda6 	bl	800e734 <__aeabi_fsub>
 8014be8:	1c31      	adds	r1, r6, #0
 8014bea:	1c04      	adds	r4, r0, #0
 8014bec:	1c30      	adds	r0, r6, #0
 8014bee:	f7f9 fc6f 	bl	800e4d0 <__aeabi_fmul>
 8014bf2:	1c01      	adds	r1, r0, #0
 8014bf4:	1c20      	adds	r0, r4, #0
 8014bf6:	f7f9 fc6b 	bl	800e4d0 <__aeabi_fmul>
 8014bfa:	1c04      	adds	r4, r0, #0
 8014bfc:	2d00      	cmp	r5, #0
 8014bfe:	d020      	beq.n	8014c42 <__ieee754_logf+0x21e>
 8014c00:	0028      	movs	r0, r5
 8014c02:	f7fa fb99 	bl	800f338 <__aeabi_i2f>
 8014c06:	491e      	ldr	r1, [pc, #120]	; (8014c80 <__ieee754_logf+0x25c>)
 8014c08:	1c05      	adds	r5, r0, #0
 8014c0a:	f7f9 fc61 	bl	800e4d0 <__aeabi_fmul>
 8014c0e:	491d      	ldr	r1, [pc, #116]	; (8014c84 <__ieee754_logf+0x260>)
 8014c10:	1c07      	adds	r7, r0, #0
 8014c12:	1c28      	adds	r0, r5, #0
 8014c14:	f7f9 fc5c 	bl	800e4d0 <__aeabi_fmul>
 8014c18:	1c01      	adds	r1, r0, #0
 8014c1a:	1c20      	adds	r0, r4, #0
 8014c1c:	f7f9 fd8a 	bl	800e734 <__aeabi_fsub>
 8014c20:	1c31      	adds	r1, r6, #0
 8014c22:	f7f9 fd87 	bl	800e734 <__aeabi_fsub>
 8014c26:	1c01      	adds	r1, r0, #0
 8014c28:	1c38      	adds	r0, r7, #0
 8014c2a:	f7f9 fd83 	bl	800e734 <__aeabi_fsub>
 8014c2e:	e74c      	b.n	8014aca <__ieee754_logf+0xa6>
 8014c30:	1c01      	adds	r1, r0, #0
 8014c32:	1c20      	adds	r0, r4, #0
 8014c34:	f7f9 fd7e 	bl	800e734 <__aeabi_fsub>
 8014c38:	1c01      	adds	r1, r0, #0
 8014c3a:	1c30      	adds	r0, r6, #0
 8014c3c:	f7f9 fd7a 	bl	800e734 <__aeabi_fsub>
 8014c40:	e743      	b.n	8014aca <__ieee754_logf+0xa6>
 8014c42:	1c21      	adds	r1, r4, #0
 8014c44:	1c30      	adds	r0, r6, #0
 8014c46:	f7f9 fd75 	bl	800e734 <__aeabi_fsub>
 8014c4a:	e73e      	b.n	8014aca <__ieee754_logf+0xa6>
 8014c4c:	1c01      	adds	r1, r0, #0
 8014c4e:	1c30      	adds	r0, r6, #0
 8014c50:	f7f9 fd70 	bl	800e734 <__aeabi_fsub>
 8014c54:	4641      	mov	r1, r8
 8014c56:	f7f9 fc3b 	bl	800e4d0 <__aeabi_fmul>
 8014c5a:	1c04      	adds	r4, r0, #0
 8014c5c:	2d00      	cmp	r5, #0
 8014c5e:	d0f0      	beq.n	8014c42 <__ieee754_logf+0x21e>
 8014c60:	4907      	ldr	r1, [pc, #28]	; (8014c80 <__ieee754_logf+0x25c>)
 8014c62:	4648      	mov	r0, r9
 8014c64:	f7f9 fc34 	bl	800e4d0 <__aeabi_fmul>
 8014c68:	4906      	ldr	r1, [pc, #24]	; (8014c84 <__ieee754_logf+0x260>)
 8014c6a:	1c05      	adds	r5, r0, #0
 8014c6c:	4648      	mov	r0, r9
 8014c6e:	f7f9 fc2f 	bl	800e4d0 <__aeabi_fmul>
 8014c72:	e7a4      	b.n	8014bbe <__ieee754_logf+0x19a>
 8014c74:	7f7fffff 	.word	0x7f7fffff
 8014c78:	007fffff 	.word	0x007fffff
 8014c7c:	004afb20 	.word	0x004afb20
 8014c80:	3f317180 	.word	0x3f317180
 8014c84:	3717f7d1 	.word	0x3717f7d1
 8014c88:	ffcf5c30 	.word	0xffcf5c30
 8014c8c:	3e178897 	.word	0x3e178897
 8014c90:	3e3a3325 	.word	0x3e3a3325
 8014c94:	3e924925 	.word	0x3e924925
 8014c98:	3f2aaaab 	.word	0x3f2aaaab
 8014c9c:	3e1cd04f 	.word	0x3e1cd04f
 8014ca0:	3e638e29 	.word	0x3e638e29
 8014ca4:	3ecccccd 	.word	0x3ecccccd
 8014ca8:	0035c288 	.word	0x0035c288
 8014cac:	3eaaaaab 	.word	0x3eaaaaab

08014cb0 <copysign>:
 8014cb0:	b530      	push	{r4, r5, lr}
 8014cb2:	004a      	lsls	r2, r1, #1
 8014cb4:	0fdb      	lsrs	r3, r3, #31
 8014cb6:	07db      	lsls	r3, r3, #31
 8014cb8:	0852      	lsrs	r2, r2, #1
 8014cba:	431a      	orrs	r2, r3
 8014cbc:	0011      	movs	r1, r2
 8014cbe:	bd30      	pop	{r4, r5, pc}

08014cc0 <out_func>:
	uint16_t position;
} print_buffer_t;


static void out_func(char character, void *arg)
{
 8014cc0:	b510      	push	{r4, lr}
	print_buffer_t *buf = arg;

	buf->buffer[buf->position++] = character;
 8014cc2:	000c      	movs	r4, r1
 8014cc4:	34c8      	adds	r4, #200	; 0xc8
 8014cc6:	8823      	ldrh	r3, [r4, #0]
 8014cc8:	1c5a      	adds	r2, r3, #1
 8014cca:	b292      	uxth	r2, r2
 8014ccc:	8022      	strh	r2, [r4, #0]
 8014cce:	54c8      	strb	r0, [r1, r3]
	if (buf->position == BUF_SIZE)
 8014cd0:	2ac8      	cmp	r2, #200	; 0xc8
 8014cd2:	d104      	bne.n	8014cde <out_func+0x1e>
	{
		_write(0, buf->buffer, BUF_SIZE);
 8014cd4:	2000      	movs	r0, #0
 8014cd6:	f7fd fd45 	bl	8012764 <_write>
		buf->position = 0;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	8023      	strh	r3, [r4, #0]
	}
}
 8014cde:	bd10      	pop	{r4, pc}

08014ce0 <__wrap_puts>:


int __wrap_puts(const char *str)
{
 8014ce0:	b510      	push	{r4, lr}
 8014ce2:	0004      	movs	r4, r0
	size_t len = strlen(str);
 8014ce4:	f7fc fa32 	bl	801114c <strlen>

	_write(0, str, len);
 8014ce8:	0021      	movs	r1, r4
	size_t len = strlen(str);
 8014cea:	0002      	movs	r2, r0
	_write(0, str, len);
 8014cec:	2000      	movs	r0, #0
 8014cee:	f7fd fd39 	bl	8012764 <_write>
	_write(0, "\n", 1);
 8014cf2:	2201      	movs	r2, #1
 8014cf4:	4902      	ldr	r1, [pc, #8]	; (8014d00 <__wrap_puts+0x20>)
 8014cf6:	2000      	movs	r0, #0
 8014cf8:	f7fd fd34 	bl	8012764 <_write>
	return 0;
}
 8014cfc:	2000      	movs	r0, #0
 8014cfe:	bd10      	pop	{r4, pc}
 8014d00:	0801d972 	.word	0x0801d972

08014d04 <__wrap_printf>:
	return 0;
}


int __wrap_printf(const char *format, ...)
{
 8014d04:	b40f      	push	{r0, r1, r2, r3}
 8014d06:	b530      	push	{r4, r5, lr}
 8014d08:	b0b5      	sub	sp, #212	; 0xd4
 8014d0a:	ac38      	add	r4, sp, #224	; 0xe0
 8014d0c:	cc20      	ldmia	r4!, {r5}
	print_buffer_t buf = {
 8014d0e:	22ca      	movs	r2, #202	; 0xca
 8014d10:	2100      	movs	r1, #0
 8014d12:	a801      	add	r0, sp, #4
 8014d14:	f7fd ffa2 	bl	8012c5c <memset>
		.buffer   = {0}
	};
	va_list        va;

	va_start(va, format);
	int ret = fctvprintf(out_func, &buf, format, va);
 8014d18:	0023      	movs	r3, r4
 8014d1a:	002a      	movs	r2, r5
 8014d1c:	a901      	add	r1, sp, #4
 8014d1e:	4809      	ldr	r0, [pc, #36]	; (8014d44 <__wrap_printf+0x40>)
	va_start(va, format);
 8014d20:	9400      	str	r4, [sp, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8014d22:	f000 fb9b 	bl	801545c <fctvprintf>
	if (buf.position != 0)
 8014d26:	ab33      	add	r3, sp, #204	; 0xcc
 8014d28:	881a      	ldrh	r2, [r3, #0]
	int ret = fctvprintf(out_func, &buf, format, va);
 8014d2a:	0004      	movs	r4, r0
	if (buf.position != 0)
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	d003      	beq.n	8014d38 <__wrap_printf+0x34>
	{
		_write(0, buf.buffer, buf.position);
 8014d30:	a901      	add	r1, sp, #4
 8014d32:	2000      	movs	r0, #0
 8014d34:	f7fd fd16 	bl	8012764 <_write>
	}

	va_end(va);

	return ret;
}
 8014d38:	0020      	movs	r0, r4
 8014d3a:	b035      	add	sp, #212	; 0xd4
 8014d3c:	bc30      	pop	{r4, r5}
 8014d3e:	bc08      	pop	{r3}
 8014d40:	b004      	add	sp, #16
 8014d42:	4718      	bx	r3
 8014d44:	08014cc1 	.word	0x08014cc1

08014d48 <__wrap_vsnprintf>:
	return ret;
}


int __wrap_vsnprintf(char *buffer, size_t count, const char *format, va_list va)
{
 8014d48:	b510      	push	{r4, lr}
	return vsnprintf_(buffer, count, format, va);
 8014d4a:	f000 fb7b 	bl	8015444 <vsnprintf_>
}
 8014d4e:	bd10      	pop	{r4, pc}

08014d50 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d200      	bcs.n	8014d56 <_out_buffer+0x6>
    ((char*)buffer)[idx] = character;
 8014d54:	5488      	strb	r0, [r1, r2]
  }
}
 8014d56:	4770      	bx	lr

08014d58 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8014d58:	4770      	bx	lr

08014d5a <_out_fct>:
}


// internal output function wrapper
static inline void _out_fct(char character, void* buffer, size_t idx, size_t maxlen)
{
 8014d5a:	b510      	push	{r4, lr}
  (void)idx; (void)maxlen;
  if (character) {
 8014d5c:	2800      	cmp	r0, #0
 8014d5e:	d002      	beq.n	8014d66 <_out_fct+0xc>
    // buffer is the output fct pointer
    ((out_fct_wrap_type*)buffer)->fct(character, ((out_fct_wrap_type*)buffer)->arg);
 8014d60:	680b      	ldr	r3, [r1, #0]
 8014d62:	6849      	ldr	r1, [r1, #4]
 8014d64:	4798      	blx	r3
  }
}
 8014d66:	bd10      	pop	{r4, pc}

08014d68 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d6a:	b087      	sub	sp, #28
 8014d6c:	9103      	str	r1, [sp, #12]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8014d6e:	2102      	movs	r1, #2
{
 8014d70:	9304      	str	r3, [sp, #16]
 8014d72:	ab0e      	add	r3, sp, #56	; 0x38
 8014d74:	781f      	ldrb	r7, [r3, #0]
 8014d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d78:	9002      	str	r0, [sp, #8]
  if (!(flags & FLAGS_LEFT)) {
 8014d7a:	4019      	ands	r1, r3
{
 8014d7c:	9201      	str	r2, [sp, #4]
 8014d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d80:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014d82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d84:	9810      	ldr	r0, [sp, #64]	; 0x40
  if (!(flags & FLAGS_LEFT)) {
 8014d86:	9105      	str	r1, [sp, #20]
 8014d88:	d11f      	bne.n	8014dca <_ntoa_format+0x62>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014d8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014d8c:	3101      	adds	r1, #1
 8014d8e:	4019      	ands	r1, r3
 8014d90:	2e00      	cmp	r6, #0
 8014d92:	d009      	beq.n	8014da8 <_ntoa_format+0x40>
 8014d94:	2900      	cmp	r1, #0
 8014d96:	d007      	beq.n	8014da8 <_ntoa_format+0x40>
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	d102      	bne.n	8014da2 <_ntoa_format+0x3a>
 8014d9c:	260c      	movs	r6, #12
 8014d9e:	4233      	tst	r3, r6
 8014da0:	d002      	beq.n	8014da8 <_ntoa_format+0x40>
      width--;
 8014da2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014da4:	3e01      	subs	r6, #1
 8014da6:	9611      	str	r6, [sp, #68]	; 0x44
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8014da8:	2630      	movs	r6, #48	; 0x30
 8014daa:	e003      	b.n	8014db4 <_ntoa_format+0x4c>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014dac:	2c20      	cmp	r4, #32
 8014dae:	d003      	beq.n	8014db8 <_ntoa_format+0x50>
      buf[len++] = '0';
 8014db0:	552e      	strb	r6, [r5, r4]
 8014db2:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014db4:	42a0      	cmp	r0, r4
 8014db6:	d8f9      	bhi.n	8014dac <_ntoa_format+0x44>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8014db8:	2630      	movs	r6, #48	; 0x30
 8014dba:	46b4      	mov	ip, r6
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014dbc:	2900      	cmp	r1, #0
 8014dbe:	d004      	beq.n	8014dca <_ntoa_format+0x62>
 8014dc0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014dc2:	42a6      	cmp	r6, r4
 8014dc4:	d901      	bls.n	8014dca <_ntoa_format+0x62>
 8014dc6:	2c20      	cmp	r4, #32
 8014dc8:	d114      	bne.n	8014df4 <_ntoa_format+0x8c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8014dca:	06d9      	lsls	r1, r3, #27
 8014dcc:	d536      	bpl.n	8014e3c <_ntoa_format+0xd4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8014dce:	0559      	lsls	r1, r3, #21
 8014dd0:	d415      	bmi.n	8014dfe <_ntoa_format+0x96>
 8014dd2:	2c00      	cmp	r4, #0
 8014dd4:	d013      	beq.n	8014dfe <_ntoa_format+0x96>
 8014dd6:	4284      	cmp	r4, r0
 8014dd8:	d002      	beq.n	8014de0 <_ntoa_format+0x78>
 8014dda:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014ddc:	428c      	cmp	r4, r1
 8014dde:	d10e      	bne.n	8014dfe <_ntoa_format+0x96>
      len--;
 8014de0:	1e61      	subs	r1, r4, #1
      if (len && (base == 16U)) {
 8014de2:	2900      	cmp	r1, #0
 8014de4:	d00a      	beq.n	8014dfc <_ntoa_format+0x94>
        len--;
 8014de6:	3c02      	subs	r4, #2
      if (len && (base == 16U)) {
 8014de8:	2a10      	cmp	r2, #16
 8014dea:	d00a      	beq.n	8014e02 <_ntoa_format+0x9a>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014dec:	000c      	movs	r4, r1
 8014dee:	2a02      	cmp	r2, #2
 8014df0:	d11f      	bne.n	8014e32 <_ntoa_format+0xca>
 8014df2:	e032      	b.n	8014e5a <_ntoa_format+0xf2>
      buf[len++] = '0';
 8014df4:	4666      	mov	r6, ip
 8014df6:	552e      	strb	r6, [r5, r4]
 8014df8:	3401      	adds	r4, #1
 8014dfa:	e7df      	b.n	8014dbc <_ntoa_format+0x54>
 8014dfc:	000c      	movs	r4, r1
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014dfe:	2a10      	cmp	r2, #16
 8014e00:	d127      	bne.n	8014e52 <_ntoa_format+0xea>
 8014e02:	069a      	lsls	r2, r3, #26
 8014e04:	d410      	bmi.n	8014e28 <_ntoa_format+0xc0>
      buf[len++] = 'x';
 8014e06:	2278      	movs	r2, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014e08:	2c1f      	cmp	r4, #31
 8014e0a:	d910      	bls.n	8014e2e <_ntoa_format+0xc6>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8014e0c:	9e01      	ldr	r6, [sp, #4]
 8014e0e:	079b      	lsls	r3, r3, #30
 8014e10:	d031      	beq.n	8014e76 <_ntoa_format+0x10e>
      out(' ', buffer, idx++, maxlen);
 8014e12:	9400      	str	r4, [sp, #0]
 8014e14:	9b00      	ldr	r3, [sp, #0]
 8014e16:	19a0      	adds	r0, r4, r6
 8014e18:	1ac2      	subs	r2, r0, r3
  while (len) {
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d132      	bne.n	8014e84 <_ntoa_format+0x11c>
  if (flags & FLAGS_LEFT) {
 8014e1e:	9b05      	ldr	r3, [sp, #20]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d140      	bne.n	8014ea6 <_ntoa_format+0x13e>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8014e24:	b007      	add	sp, #28
 8014e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 8014e28:	2258      	movs	r2, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014e2a:	2c1f      	cmp	r4, #31
 8014e2c:	d8ee      	bhi.n	8014e0c <_ntoa_format+0xa4>
      buf[len++] = 'b';
 8014e2e:	552a      	strb	r2, [r5, r4]
 8014e30:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8014e32:	2c1f      	cmp	r4, #31
 8014e34:	d8ea      	bhi.n	8014e0c <_ntoa_format+0xa4>
      buf[len++] = '0';
 8014e36:	2230      	movs	r2, #48	; 0x30
 8014e38:	552a      	strb	r2, [r5, r4]
 8014e3a:	3401      	adds	r4, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8014e3c:	2c20      	cmp	r4, #32
 8014e3e:	d0e5      	beq.n	8014e0c <_ntoa_format+0xa4>
      buf[len++] = '-';
 8014e40:	222d      	movs	r2, #45	; 0x2d
    if (negative) {
 8014e42:	2f00      	cmp	r7, #0
 8014e44:	d102      	bne.n	8014e4c <_ntoa_format+0xe4>
    else if (flags & FLAGS_PLUS) {
 8014e46:	075a      	lsls	r2, r3, #29
 8014e48:	d509      	bpl.n	8014e5e <_ntoa_format+0xf6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8014e4a:	222b      	movs	r2, #43	; 0x2b
      buf[len++] = ' ';
 8014e4c:	552a      	strb	r2, [r5, r4]
 8014e4e:	3401      	adds	r4, #1
 8014e50:	e7dc      	b.n	8014e0c <_ntoa_format+0xa4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014e52:	2a02      	cmp	r2, #2
 8014e54:	d1ed      	bne.n	8014e32 <_ntoa_format+0xca>
 8014e56:	2c1f      	cmp	r4, #31
 8014e58:	d8d8      	bhi.n	8014e0c <_ntoa_format+0xa4>
      buf[len++] = 'b';
 8014e5a:	2262      	movs	r2, #98	; 0x62
 8014e5c:	e7e7      	b.n	8014e2e <_ntoa_format+0xc6>
    else if (flags & FLAGS_SPACE) {
 8014e5e:	071a      	lsls	r2, r3, #28
 8014e60:	d5d4      	bpl.n	8014e0c <_ntoa_format+0xa4>
      buf[len++] = ' ';
 8014e62:	2220      	movs	r2, #32
 8014e64:	e7f2      	b.n	8014e4c <_ntoa_format+0xe4>
      out(' ', buffer, idx++, maxlen);
 8014e66:	1c77      	adds	r7, r6, #1
 8014e68:	0032      	movs	r2, r6
 8014e6a:	9b04      	ldr	r3, [sp, #16]
 8014e6c:	9e02      	ldr	r6, [sp, #8]
 8014e6e:	9903      	ldr	r1, [sp, #12]
 8014e70:	2020      	movs	r0, #32
 8014e72:	47b0      	blx	r6
 8014e74:	003e      	movs	r6, r7
    for (size_t i = len; i < width; i++) {
 8014e76:	9b01      	ldr	r3, [sp, #4]
 8014e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014e7a:	1ae3      	subs	r3, r4, r3
 8014e7c:	199b      	adds	r3, r3, r6
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d8f1      	bhi.n	8014e66 <_ntoa_format+0xfe>
 8014e82:	e7c6      	b.n	8014e12 <_ntoa_format+0xaa>
    out(buf[--len], buffer, idx++, maxlen);
 8014e84:	9b00      	ldr	r3, [sp, #0]
 8014e86:	9903      	ldr	r1, [sp, #12]
 8014e88:	3b01      	subs	r3, #1
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	5ce8      	ldrb	r0, [r5, r3]
 8014e8e:	9f02      	ldr	r7, [sp, #8]
 8014e90:	9b04      	ldr	r3, [sp, #16]
 8014e92:	47b8      	blx	r7
 8014e94:	e7be      	b.n	8014e14 <_ntoa_format+0xac>
      out(' ', buffer, idx++, maxlen);
 8014e96:	1c44      	adds	r4, r0, #1
 8014e98:	0002      	movs	r2, r0
 8014e9a:	9b04      	ldr	r3, [sp, #16]
 8014e9c:	2020      	movs	r0, #32
 8014e9e:	9903      	ldr	r1, [sp, #12]
 8014ea0:	9d02      	ldr	r5, [sp, #8]
 8014ea2:	47a8      	blx	r5
 8014ea4:	0020      	movs	r0, r4
    while (idx - start_idx < width) {
 8014ea6:	9b01      	ldr	r3, [sp, #4]
 8014ea8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014eaa:	1ac3      	subs	r3, r0, r3
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d8f2      	bhi.n	8014e96 <_ntoa_format+0x12e>
 8014eb0:	e7b8      	b.n	8014e24 <_ntoa_format+0xbc>

08014eb2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eb4:	b095      	sub	sp, #84	; 0x54
 8014eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb8:	ab1a      	add	r3, sp, #104	; 0x68
 8014eba:	0006      	movs	r6, r0
 8014ebc:	cb01      	ldmia	r3!, {r0}
 8014ebe:	000f      	movs	r7, r1
 8014ec0:	781b      	ldrb	r3, [r3, #0]
 8014ec2:	9208      	str	r2, [sp, #32]
 8014ec4:	930a      	str	r3, [sp, #40]	; 0x28
 8014ec6:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	d101      	bne.n	8014ed0 <_ntoa_long+0x1e>
    flags &= ~FLAGS_HASH;
 8014ecc:	2310      	movs	r3, #16
 8014ece:	439c      	bics	r4, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014ed0:	0563      	lsls	r3, r4, #21
 8014ed2:	d502      	bpl.n	8014eda <_ntoa_long+0x28>
  size_t len = 0U;
 8014ed4:	2300      	movs	r3, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014ed6:	4298      	cmp	r0, r3
 8014ed8:	d01d      	beq.n	8014f16 <_ntoa_long+0x64>
 8014eda:	2361      	movs	r3, #97	; 0x61
 8014edc:	06a2      	lsls	r2, r4, #26
 8014ede:	d500      	bpl.n	8014ee2 <_ntoa_long+0x30>
 8014ee0:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014ee2:	2500      	movs	r5, #0
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	3b0a      	subs	r3, #10
 8014ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014eea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014eec:	f7f9 fea8 	bl	800ec40 <__aeabi_uidivmod>
 8014ef0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      const char digit = (char)(value % base);
 8014ef2:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014ef4:	189a      	adds	r2, r3, r2
 8014ef6:	4684      	mov	ip, r0
 8014ef8:	b2d2      	uxtb	r2, r2
 8014efa:	2909      	cmp	r1, #9
 8014efc:	d801      	bhi.n	8014f02 <_ntoa_long+0x50>
 8014efe:	3330      	adds	r3, #48	; 0x30
 8014f00:	b2da      	uxtb	r2, r3
 8014f02:	2020      	movs	r0, #32
 8014f04:	a904      	add	r1, sp, #16
 8014f06:	1809      	adds	r1, r1, r0
      value /= base;
 8014f08:	4660      	mov	r0, ip
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014f0a:	1c6b      	adds	r3, r5, #1
 8014f0c:	554a      	strb	r2, [r1, r5]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	d001      	beq.n	8014f16 <_ntoa_long+0x64>
 8014f12:	2b20      	cmp	r3, #32
 8014f14:	d113      	bne.n	8014f3e <_ntoa_long+0x8c>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8014f16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014f18:	9301      	str	r3, [sp, #4]
 8014f1a:	9205      	str	r2, [sp, #20]
 8014f1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014f1e:	ab0c      	add	r3, sp, #48	; 0x30
 8014f20:	9204      	str	r2, [sp, #16]
 8014f22:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	9203      	str	r2, [sp, #12]
 8014f28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f2a:	9406      	str	r4, [sp, #24]
 8014f2c:	9202      	str	r2, [sp, #8]
 8014f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f30:	9a08      	ldr	r2, [sp, #32]
 8014f32:	0039      	movs	r1, r7
 8014f34:	0030      	movs	r0, r6
 8014f36:	f7ff ff17 	bl	8014d68 <_ntoa_format>
}
 8014f3a:	b015      	add	sp, #84	; 0x54
 8014f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f3e:	001d      	movs	r5, r3
 8014f40:	e7d3      	b.n	8014eea <_ntoa_long+0x38>

08014f42 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f44:	b099      	sub	sp, #100	; 0x64
 8014f46:	930c      	str	r3, [sp, #48]	; 0x30
 8014f48:	ab20      	add	r3, sp, #128	; 0x80
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	9009      	str	r0, [sp, #36]	; 0x24
 8014f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8014f50:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014f52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014f54:	910a      	str	r1, [sp, #40]	; 0x28
 8014f56:	930e      	str	r3, [sp, #56]	; 0x38
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8014f58:	0003      	movs	r3, r0
{
 8014f5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8014f5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014f5e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8014f60:	9e26      	ldr	r6, [sp, #152]	; 0x98
  if (!value) {
 8014f62:	430b      	orrs	r3, r1
 8014f64:	d101      	bne.n	8014f6a <_ntoa_long_long+0x28>
    flags &= ~FLAGS_HASH;
 8014f66:	3310      	adds	r3, #16
 8014f68:	439e      	bics	r6, r3
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014f6a:	0573      	lsls	r3, r6, #21
 8014f6c:	d504      	bpl.n	8014f78 <_ntoa_long_long+0x36>
 8014f6e:	0003      	movs	r3, r0
  size_t len = 0U;
 8014f70:	2200      	movs	r2, #0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014f72:	430b      	orrs	r3, r1
 8014f74:	4293      	cmp	r3, r2
 8014f76:	d021      	beq.n	8014fbc <_ntoa_long_long+0x7a>
 8014f78:	2361      	movs	r3, #97	; 0x61
 8014f7a:	06b2      	lsls	r2, r6, #26
 8014f7c:	d500      	bpl.n	8014f80 <_ntoa_long_long+0x3e>
 8014f7e:	2341      	movs	r3, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014f80:	2400      	movs	r4, #0
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	3b0a      	subs	r3, #10
 8014f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8014f88:	002a      	movs	r2, r5
 8014f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f8c:	f7f9 ffc0 	bl	800ef10 <__aeabi_uldivmod>
 8014f90:	468c      	mov	ip, r1
 8014f92:	990f      	ldr	r1, [sp, #60]	; 0x3c
      const char digit = (char)(value % base);
 8014f94:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014f96:	1851      	adds	r1, r2, r1
 8014f98:	0003      	movs	r3, r0
 8014f9a:	b2c9      	uxtb	r1, r1
 8014f9c:	2a09      	cmp	r2, #9
 8014f9e:	d801      	bhi.n	8014fa4 <_ntoa_long_long+0x62>
 8014fa0:	3230      	adds	r2, #48	; 0x30
 8014fa2:	b2d1      	uxtb	r1, r2
 8014fa4:	2720      	movs	r7, #32
 8014fa6:	a808      	add	r0, sp, #32
 8014fa8:	19c0      	adds	r0, r0, r7
 8014faa:	5501      	strb	r1, [r0, r4]
 8014fac:	1c62      	adds	r2, r4, #1
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8014fae:	4664      	mov	r4, ip
      value /= base;
 8014fb0:	0018      	movs	r0, r3
 8014fb2:	4661      	mov	r1, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8014fb4:	431c      	orrs	r4, r3
 8014fb6:	d001      	beq.n	8014fbc <_ntoa_long_long+0x7a>
 8014fb8:	42ba      	cmp	r2, r7
 8014fba:	d112      	bne.n	8014fe2 <_ntoa_long_long+0xa0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8014fbc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014fbe:	9201      	str	r2, [sp, #4]
 8014fc0:	9305      	str	r3, [sp, #20]
 8014fc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014fc4:	9606      	str	r6, [sp, #24]
 8014fc6:	9304      	str	r3, [sp, #16]
 8014fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014fca:	9503      	str	r5, [sp, #12]
 8014fcc:	9302      	str	r3, [sp, #8]
 8014fce:	ab10      	add	r3, sp, #64	; 0x40
 8014fd0:	9300      	str	r3, [sp, #0]
 8014fd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014fd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fda:	f7ff fec5 	bl	8014d68 <_ntoa_format>
}
 8014fde:	b019      	add	sp, #100	; 0x64
 8014fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fe2:	0014      	movs	r4, r2
 8014fe4:	e7d0      	b.n	8014f88 <_ntoa_long_long+0x46>
	...

08014fe8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8014fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fea:	b099      	sub	sp, #100	; 0x64
 8014fec:	900d      	str	r0, [sp, #52]	; 0x34
 8014fee:	910e      	str	r1, [sp, #56]	; 0x38
 8014ff0:	920c      	str	r2, [sp, #48]	; 0x30
 8014ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ff4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8014ff6:	2900      	cmp	r1, #0
 8014ff8:	d101      	bne.n	8014ffe <_vsnprintf+0x16>
    // use null output function
    out = _out_null;
 8014ffa:	4bb6      	ldr	r3, [pc, #728]	; (80152d4 <_vsnprintf+0x2ec>)
 8014ffc:	930d      	str	r3, [sp, #52]	; 0x34
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 8014ffe:	2700      	movs	r7, #0
 8015000:	e101      	b.n	8015206 <_vsnprintf+0x21e>
 8015002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015004:	3301      	adds	r3, #1
 8015006:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8015008:	2825      	cmp	r0, #37	; 0x25
 801500a:	d007      	beq.n	801501c <_vsnprintf+0x34>
        out(*format, buffer, idx++, maxlen);
 801500c:	003a      	movs	r2, r7
 801500e:	1c7c      	adds	r4, r7, #1
 8015010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015012:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015014:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015016:	47a8      	blx	r5
 8015018:	0027      	movs	r7, r4
        format++;
        break;
 801501a:	e0f4      	b.n	8015206 <_vsnprintf+0x21e>
    flags = 0U;
 801501c:	2400      	movs	r4, #0
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801501e:	2101      	movs	r1, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015020:	2008      	movs	r0, #8
 8015022:	e005      	b.n	8015030 <_vsnprintf+0x48>
      switch (*format) {
 8015024:	2b2d      	cmp	r3, #45	; 0x2d
 8015026:	d016      	beq.n	8015056 <_vsnprintf+0x6e>
 8015028:	2b30      	cmp	r3, #48	; 0x30
 801502a:	d10c      	bne.n	8015046 <_vsnprintf+0x5e>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801502c:	430c      	orrs	r4, r1
{
 801502e:	920a      	str	r2, [sp, #40]	; 0x28
      switch (*format) {
 8015030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	3201      	adds	r2, #1
 8015038:	2b2b      	cmp	r3, #43	; 0x2b
 801503a:	d00f      	beq.n	801505c <_vsnprintf+0x74>
 801503c:	d8f2      	bhi.n	8015024 <_vsnprintf+0x3c>
 801503e:	2b20      	cmp	r3, #32
 8015040:	d00e      	beq.n	8015060 <_vsnprintf+0x78>
 8015042:	2b23      	cmp	r3, #35	; 0x23
 8015044:	d00e      	beq.n	8015064 <_vsnprintf+0x7c>
    if (_is_digit(*format)) {
 8015046:	0019      	movs	r1, r3
 8015048:	3930      	subs	r1, #48	; 0x30
 801504a:	2909      	cmp	r1, #9
 801504c:	d82c      	bhi.n	80150a8 <_vsnprintf+0xc0>
  unsigned int i = 0U;
 801504e:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015050:	200a      	movs	r0, #10
  unsigned int i = 0U;
 8015052:	930f      	str	r3, [sp, #60]	; 0x3c
 8015054:	e00e      	b.n	8015074 <_vsnprintf+0x8c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015056:	2302      	movs	r3, #2
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8015058:	431c      	orrs	r4, r3
 801505a:	e7e8      	b.n	801502e <_vsnprintf+0x46>
 801505c:	2304      	movs	r3, #4
 801505e:	e7fb      	b.n	8015058 <_vsnprintf+0x70>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015060:	4304      	orrs	r4, r0
 8015062:	e7e4      	b.n	801502e <_vsnprintf+0x46>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8015064:	2310      	movs	r3, #16
 8015066:	e7f7      	b.n	8015058 <_vsnprintf+0x70>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8015068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801506a:	910a      	str	r1, [sp, #40]	; 0x28
 801506c:	4343      	muls	r3, r0
 801506e:	3b30      	subs	r3, #48	; 0x30
 8015070:	18d3      	adds	r3, r2, r3
 8015072:	930f      	str	r3, [sp, #60]	; 0x3c
  while (_is_digit(**str)) {
 8015074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015076:	781a      	ldrb	r2, [r3, #0]
 8015078:	1c59      	adds	r1, r3, #1
 801507a:	0013      	movs	r3, r2
 801507c:	3b30      	subs	r3, #48	; 0x30
 801507e:	2b09      	cmp	r3, #9
 8015080:	d9f2      	bls.n	8015068 <_vsnprintf+0x80>
    precision = 0U;
 8015082:	2200      	movs	r2, #0
    if (*format == '.') {
 8015084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    precision = 0U;
 8015086:	920b      	str	r2, [sp, #44]	; 0x2c
    if (*format == '.') {
 8015088:	781b      	ldrb	r3, [r3, #0]
 801508a:	2b2e      	cmp	r3, #46	; 0x2e
 801508c:	d138      	bne.n	8015100 <_vsnprintf+0x118>
      flags |= FLAGS_PRECISION;
 801508e:	2280      	movs	r2, #128	; 0x80
 8015090:	00d2      	lsls	r2, r2, #3
 8015092:	4314      	orrs	r4, r2
      if (_is_digit(*format)) {
 8015094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015098:	7852      	ldrb	r2, [r2, #1]
 801509a:	3301      	adds	r3, #1
 801509c:	0011      	movs	r1, r2
 801509e:	3930      	subs	r1, #48	; 0x30
 80150a0:	2909      	cmp	r1, #9
 80150a2:	d820      	bhi.n	80150e6 <_vsnprintf+0xfe>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80150a4:	250a      	movs	r5, #10
 80150a6:	e016      	b.n	80150d6 <_vsnprintf+0xee>
    width = 0U;
 80150a8:	2100      	movs	r1, #0
 80150aa:	910f      	str	r1, [sp, #60]	; 0x3c
    else if (*format == '*') {
 80150ac:	2b2a      	cmp	r3, #42	; 0x2a
 80150ae:	d1e8      	bne.n	8015082 <_vsnprintf+0x9a>
      const int w = va_arg(va, int);
 80150b0:	6831      	ldr	r1, [r6, #0]
 80150b2:	1d33      	adds	r3, r6, #4
 80150b4:	910f      	str	r1, [sp, #60]	; 0x3c
      if (w < 0) {
 80150b6:	2900      	cmp	r1, #0
 80150b8:	da04      	bge.n	80150c4 <_vsnprintf+0xdc>
        flags |= FLAGS_LEFT;    // reverse padding
 80150ba:	2102      	movs	r1, #2
 80150bc:	430c      	orrs	r4, r1
        width = (unsigned int)-w;
 80150be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80150c0:	4249      	negs	r1, r1
 80150c2:	910f      	str	r1, [sp, #60]	; 0x3c
      const int w = va_arg(va, int);
 80150c4:	001e      	movs	r6, r3
 80150c6:	920a      	str	r2, [sp, #40]	; 0x28
 80150c8:	e7db      	b.n	8015082 <_vsnprintf+0x9a>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80150ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150cc:	436b      	muls	r3, r5
 80150ce:	3b30      	subs	r3, #48	; 0x30
 80150d0:	18d3      	adds	r3, r2, r3
 80150d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80150d4:	0003      	movs	r3, r0
  while (_is_digit(**str)) {
 80150d6:	781a      	ldrb	r2, [r3, #0]
 80150d8:	1c58      	adds	r0, r3, #1
 80150da:	0011      	movs	r1, r2
 80150dc:	3930      	subs	r1, #48	; 0x30
 80150de:	2909      	cmp	r1, #9
 80150e0:	d9f3      	bls.n	80150ca <_vsnprintf+0xe2>
      format++;
 80150e2:	930a      	str	r3, [sp, #40]	; 0x28
 80150e4:	e00c      	b.n	8015100 <_vsnprintf+0x118>
      else if (*format == '*') {
 80150e6:	2a2a      	cmp	r2, #42	; 0x2a
 80150e8:	d1fb      	bne.n	80150e2 <_vsnprintf+0xfa>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80150ea:	6833      	ldr	r3, [r6, #0]
        const int prec = (int)va_arg(va, int);
 80150ec:	3604      	adds	r6, #4
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80150ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80150f0:	43db      	mvns	r3, r3
 80150f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150f4:	17db      	asrs	r3, r3, #31
 80150f6:	401a      	ands	r2, r3
        format++;
 80150f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80150fa:	920b      	str	r2, [sp, #44]	; 0x2c
        format++;
 80150fc:	3302      	adds	r3, #2
 80150fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015102:	1c5a      	adds	r2, r3, #1
    switch (*format) {
 8015104:	781b      	ldrb	r3, [r3, #0]
 8015106:	2b6c      	cmp	r3, #108	; 0x6c
 8015108:	d00d      	beq.n	8015126 <_vsnprintf+0x13e>
 801510a:	d805      	bhi.n	8015118 <_vsnprintf+0x130>
 801510c:	2b68      	cmp	r3, #104	; 0x68
 801510e:	d014      	beq.n	801513a <_vsnprintf+0x152>
 8015110:	2b6a      	cmp	r3, #106	; 0x6a
 8015112:	d02f      	beq.n	8015174 <_vsnprintf+0x18c>
 8015114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015116:	e016      	b.n	8015146 <_vsnprintf+0x15e>
 8015118:	2b74      	cmp	r3, #116	; 0x74
 801511a:	d001      	beq.n	8015120 <_vsnprintf+0x138>
 801511c:	2b7a      	cmp	r3, #122	; 0x7a
 801511e:	d1f9      	bne.n	8015114 <_vsnprintf+0x12c>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015120:	2380      	movs	r3, #128	; 0x80
 8015122:	005b      	lsls	r3, r3, #1
 8015124:	e00e      	b.n	8015144 <_vsnprintf+0x15c>
        if (*format == 'l') {
 8015126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015128:	785b      	ldrb	r3, [r3, #1]
 801512a:	2b6c      	cmp	r3, #108	; 0x6c
 801512c:	d1f8      	bne.n	8015120 <_vsnprintf+0x138>
          flags |= FLAGS_LONG_LONG;
 801512e:	23c0      	movs	r3, #192	; 0xc0
 8015130:	009b      	lsls	r3, r3, #2
          format++;
 8015132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
          flags |= FLAGS_CHAR;
 8015134:	431c      	orrs	r4, r3
          format++;
 8015136:	3202      	adds	r2, #2
 8015138:	e005      	b.n	8015146 <_vsnprintf+0x15e>
        if (*format == 'h') {
 801513a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801513c:	785b      	ldrb	r3, [r3, #1]
 801513e:	2b68      	cmp	r3, #104	; 0x68
 8015140:	d016      	beq.n	8015170 <_vsnprintf+0x188>
        flags |= FLAGS_SHORT;
 8015142:	2380      	movs	r3, #128	; 0x80
 8015144:	431c      	orrs	r4, r3
    switch (*format) {
 8015146:	7810      	ldrb	r0, [r2, #0]
 8015148:	1c53      	adds	r3, r2, #1
 801514a:	930a      	str	r3, [sp, #40]	; 0x28
 801514c:	2869      	cmp	r0, #105	; 0x69
 801514e:	d01a      	beq.n	8015186 <_vsnprintf+0x19e>
 8015150:	d900      	bls.n	8015154 <_vsnprintf+0x16c>
 8015152:	e06a      	b.n	801522a <_vsnprintf+0x242>
 8015154:	2862      	cmp	r0, #98	; 0x62
 8015156:	d100      	bne.n	801515a <_vsnprintf+0x172>
 8015158:	e172      	b.n	8015440 <_vsnprintf+0x458>
 801515a:	d80e      	bhi.n	801517a <_vsnprintf+0x192>
 801515c:	2825      	cmp	r0, #37	; 0x25
 801515e:	d100      	bne.n	8015162 <_vsnprintf+0x17a>
 8015160:	e754      	b.n	801500c <_vsnprintf+0x24>
 8015162:	2858      	cmp	r0, #88	; 0x58
 8015164:	d000      	beq.n	8015168 <_vsnprintf+0x180>
 8015166:	e751      	b.n	801500c <_vsnprintf+0x24>
          flags |= FLAGS_UPPERCASE;
 8015168:	2320      	movs	r3, #32
 801516a:	431c      	orrs	r4, r3
          base = 16U;
 801516c:	3b10      	subs	r3, #16
 801516e:	e011      	b.n	8015194 <_vsnprintf+0x1ac>
          flags |= FLAGS_CHAR;
 8015170:	23c0      	movs	r3, #192	; 0xc0
 8015172:	e7de      	b.n	8015132 <_vsnprintf+0x14a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015174:	2380      	movs	r3, #128	; 0x80
 8015176:	009b      	lsls	r3, r3, #2
 8015178:	e7e4      	b.n	8015144 <_vsnprintf+0x15c>
    switch (*format) {
 801517a:	2863      	cmp	r0, #99	; 0x63
 801517c:	d100      	bne.n	8015180 <_vsnprintf+0x198>
 801517e:	e0c9      	b.n	8015314 <_vsnprintf+0x32c>
 8015180:	2864      	cmp	r0, #100	; 0x64
 8015182:	d000      	beq.n	8015186 <_vsnprintf+0x19e>
 8015184:	e742      	b.n	801500c <_vsnprintf+0x24>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8015186:	2310      	movs	r3, #16
 8015188:	439c      	bics	r4, r3
          base = 10U;
 801518a:	3b06      	subs	r3, #6
        if ((*format != 'i') && (*format != 'd')) {
 801518c:	2869      	cmp	r0, #105	; 0x69
 801518e:	d003      	beq.n	8015198 <_vsnprintf+0x1b0>
 8015190:	2864      	cmp	r0, #100	; 0x64
 8015192:	d001      	beq.n	8015198 <_vsnprintf+0x1b0>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8015194:	220c      	movs	r2, #12
 8015196:	4394      	bics	r4, r2
        if (flags & FLAGS_PRECISION) {
 8015198:	0562      	lsls	r2, r4, #21
 801519a:	d501      	bpl.n	80151a0 <_vsnprintf+0x1b8>
          flags &= ~FLAGS_ZEROPAD;
 801519c:	2201      	movs	r2, #1
 801519e:	4394      	bics	r4, r2
 80151a0:	2280      	movs	r2, #128	; 0x80
 80151a2:	0092      	lsls	r2, r2, #2
 80151a4:	4022      	ands	r2, r4
        if ((*format == 'i') || (*format == 'd')) {
 80151a6:	2869      	cmp	r0, #105	; 0x69
 80151a8:	d002      	beq.n	80151b0 <_vsnprintf+0x1c8>
 80151aa:	2864      	cmp	r0, #100	; 0x64
 80151ac:	d000      	beq.n	80151b0 <_vsnprintf+0x1c8>
 80151ae:	e07b      	b.n	80152a8 <_vsnprintf+0x2c0>
          if (flags & FLAGS_LONG_LONG) {
 80151b0:	2a00      	cmp	r2, #0
 80151b2:	d059      	beq.n	8015268 <_vsnprintf+0x280>
            const long long value = va_arg(va, long long);
 80151b4:	2107      	movs	r1, #7
 80151b6:	1df2      	adds	r2, r6, #7
 80151b8:	438a      	bics	r2, r1
 80151ba:	6811      	ldr	r1, [r2, #0]
 80151bc:	0015      	movs	r5, r2
 80151be:	6852      	ldr	r2, [r2, #4]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80151c0:	9304      	str	r3, [sp, #16]
 80151c2:	2300      	movs	r3, #0
 80151c4:	9305      	str	r3, [sp, #20]
 80151c6:	0fd3      	lsrs	r3, r2, #31
 80151c8:	9302      	str	r3, [sp, #8]
 80151ca:	17d3      	asrs	r3, r2, #31
 80151cc:	9311      	str	r3, [sp, #68]	; 0x44
 80151ce:	9310      	str	r3, [sp, #64]	; 0x40
 80151d0:	404b      	eors	r3, r1
 80151d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80151d4:	9314      	str	r3, [sp, #80]	; 0x50
 80151d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80151d8:	9007      	str	r0, [sp, #28]
 80151da:	4053      	eors	r3, r2
 80151dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80151de:	9315      	str	r3, [sp, #84]	; 0x54
 80151e0:	9006      	str	r0, [sp, #24]
 80151e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80151e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80151e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80151e8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80151ea:	1a12      	subs	r2, r2, r0
 80151ec:	418b      	sbcs	r3, r1
 80151ee:	9200      	str	r2, [sp, #0]
 80151f0:	9301      	str	r3, [sp, #4]
            const long long value = va_arg(va, long long);
 80151f2:	3508      	adds	r5, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80151f4:	9408      	str	r4, [sp, #32]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80151f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151f8:	003a      	movs	r2, r7
 80151fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80151fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80151fe:	f7ff fea0 	bl	8014f42 <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015202:	0007      	movs	r7, r0
        break;
 8015204:	002e      	movs	r6, r5
  while (*format)
 8015206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015208:	7818      	ldrb	r0, [r3, #0]
 801520a:	2800      	cmp	r0, #0
 801520c:	d000      	beq.n	8015210 <_vsnprintf+0x228>
 801520e:	e6f8      	b.n	8015002 <_vsnprintf+0x1a>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015212:	003a      	movs	r2, r7
 8015214:	429f      	cmp	r7, r3
 8015216:	d300      	bcc.n	801521a <_vsnprintf+0x232>
 8015218:	1e5a      	subs	r2, r3, #1
 801521a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801521c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801521e:	2000      	movs	r0, #0
 8015220:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015222:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8015224:	0038      	movs	r0, r7
 8015226:	b019      	add	sp, #100	; 0x64
 8015228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (*format) {
 801522a:	2873      	cmp	r0, #115	; 0x73
 801522c:	d100      	bne.n	8015230 <_vsnprintf+0x248>
 801522e:	e0a7      	b.n	8015380 <_vsnprintf+0x398>
 8015230:	d812      	bhi.n	8015258 <_vsnprintf+0x270>
 8015232:	286f      	cmp	r0, #111	; 0x6f
 8015234:	d100      	bne.n	8015238 <_vsnprintf+0x250>
 8015236:	e101      	b.n	801543c <_vsnprintf+0x454>
 8015238:	2870      	cmp	r0, #112	; 0x70
 801523a:	d000      	beq.n	801523e <_vsnprintf+0x256>
 801523c:	e6e6      	b.n	801500c <_vsnprintf+0x24>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 801523e:	2321      	movs	r3, #33	; 0x21
 8015240:	431c      	orrs	r4, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015242:	3b19      	subs	r3, #25
 8015244:	9304      	str	r3, [sp, #16]
 8015246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015248:	1d35      	adds	r5, r6, #4
 801524a:	9303      	str	r3, [sp, #12]
 801524c:	2310      	movs	r3, #16
 801524e:	9302      	str	r3, [sp, #8]
 8015250:	2300      	movs	r3, #0
 8015252:	9405      	str	r4, [sp, #20]
 8015254:	9301      	str	r3, [sp, #4]
 8015256:	e049      	b.n	80152ec <_vsnprintf+0x304>
    switch (*format) {
 8015258:	2875      	cmp	r0, #117	; 0x75
 801525a:	d100      	bne.n	801525e <_vsnprintf+0x276>
 801525c:	e793      	b.n	8015186 <_vsnprintf+0x19e>
 801525e:	2878      	cmp	r0, #120	; 0x78
 8015260:	d000      	beq.n	8015264 <_vsnprintf+0x27c>
 8015262:	e6d3      	b.n	801500c <_vsnprintf+0x24>
          base = 16U;
 8015264:	2310      	movs	r3, #16
 8015266:	e795      	b.n	8015194 <_vsnprintf+0x1ac>
 8015268:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 801526a:	05e2      	lsls	r2, r4, #23
 801526c:	d513      	bpl.n	8015296 <_vsnprintf+0x2ae>
            const long value = va_arg(va, long);
 801526e:	6832      	ldr	r2, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015270:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015272:	9302      	str	r3, [sp, #8]
 8015274:	0fd3      	lsrs	r3, r2, #31
 8015276:	9104      	str	r1, [sp, #16]
 8015278:	9301      	str	r3, [sp, #4]
 801527a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801527c:	17d3      	asrs	r3, r2, #31
 801527e:	18d2      	adds	r2, r2, r3
 8015280:	9405      	str	r4, [sp, #20]
 8015282:	9103      	str	r1, [sp, #12]
 8015284:	405a      	eors	r2, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015286:	9200      	str	r2, [sp, #0]
 8015288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801528a:	003a      	movs	r2, r7
 801528c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801528e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015290:	f7ff fe0f 	bl	8014eb2 <_ntoa_long>
 8015294:	e7b5      	b.n	8015202 <_vsnprintf+0x21a>
 8015296:	6832      	ldr	r2, [r6, #0]
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8015298:	0661      	lsls	r1, r4, #25
 801529a:	d501      	bpl.n	80152a0 <_vsnprintf+0x2b8>
 801529c:	b252      	sxtb	r2, r2
 801529e:	e7e7      	b.n	8015270 <_vsnprintf+0x288>
 80152a0:	0621      	lsls	r1, r4, #24
 80152a2:	d5e5      	bpl.n	8015270 <_vsnprintf+0x288>
 80152a4:	b212      	sxth	r2, r2
 80152a6:	e7e3      	b.n	8015270 <_vsnprintf+0x288>
          if (flags & FLAGS_LONG_LONG) {
 80152a8:	2a00      	cmp	r2, #0
 80152aa:	d015      	beq.n	80152d8 <_vsnprintf+0x2f0>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80152ac:	2107      	movs	r1, #7
 80152ae:	1df2      	adds	r2, r6, #7
 80152b0:	438a      	bics	r2, r1
 80152b2:	9304      	str	r3, [sp, #16]
 80152b4:	2300      	movs	r3, #0
 80152b6:	0015      	movs	r5, r2
 80152b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152ba:	9408      	str	r4, [sp, #32]
 80152bc:	9107      	str	r1, [sp, #28]
 80152be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152c0:	9305      	str	r3, [sp, #20]
 80152c2:	9106      	str	r1, [sp, #24]
 80152c4:	9302      	str	r3, [sp, #8]
 80152c6:	6813      	ldr	r3, [r2, #0]
 80152c8:	6854      	ldr	r4, [r2, #4]
 80152ca:	3508      	adds	r5, #8
 80152cc:	9300      	str	r3, [sp, #0]
 80152ce:	9401      	str	r4, [sp, #4]
 80152d0:	e791      	b.n	80151f6 <_vsnprintf+0x20e>
 80152d2:	46c0      	nop			; (mov r8, r8)
 80152d4:	08014d59 	.word	0x08014d59
 80152d8:	1d35      	adds	r5, r6, #4
          else if (flags & FLAGS_LONG) {
 80152da:	05e1      	lsls	r1, r4, #23
 80152dc:	d509      	bpl.n	80152f2 <_vsnprintf+0x30a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80152de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80152e0:	9405      	str	r4, [sp, #20]
 80152e2:	9104      	str	r1, [sp, #16]
 80152e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152e6:	9302      	str	r3, [sp, #8]
 80152e8:	9103      	str	r1, [sp, #12]
 80152ea:	9201      	str	r2, [sp, #4]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80152ec:	6833      	ldr	r3, [r6, #0]
 80152ee:	9300      	str	r3, [sp, #0]
 80152f0:	e7ca      	b.n	8015288 <_vsnprintf+0x2a0>
 80152f2:	6832      	ldr	r2, [r6, #0]
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80152f4:	0661      	lsls	r1, r4, #25
 80152f6:	d509      	bpl.n	801530c <_vsnprintf+0x324>
 80152f8:	b2d2      	uxtb	r2, r2
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80152fa:	9302      	str	r3, [sp, #8]
 80152fc:	2300      	movs	r3, #0
 80152fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015300:	9405      	str	r4, [sp, #20]
 8015302:	9104      	str	r1, [sp, #16]
 8015304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015306:	9301      	str	r3, [sp, #4]
 8015308:	9103      	str	r1, [sp, #12]
 801530a:	e7bc      	b.n	8015286 <_vsnprintf+0x29e>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801530c:	0621      	lsls	r1, r4, #24
 801530e:	d5f4      	bpl.n	80152fa <_vsnprintf+0x312>
 8015310:	b292      	uxth	r2, r2
 8015312:	e7f2      	b.n	80152fa <_vsnprintf+0x312>
        if (!(flags & FLAGS_LEFT)) {
 8015314:	2302      	movs	r3, #2
 8015316:	4023      	ands	r3, r4
 8015318:	930b      	str	r3, [sp, #44]	; 0x2c
 801531a:	d026      	beq.n	801536a <_vsnprintf+0x382>
        unsigned int l = 1U;
 801531c:	2301      	movs	r3, #1
 801531e:	003c      	movs	r4, r7
 8015320:	9312      	str	r3, [sp, #72]	; 0x48
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015322:	6830      	ldr	r0, [r6, #0]
 8015324:	1d33      	adds	r3, r6, #4
 8015326:	9313      	str	r3, [sp, #76]	; 0x4c
 8015328:	b2c0      	uxtb	r0, r0
 801532a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801532c:	0022      	movs	r2, r4
 801532e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015330:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015332:	47a8      	blx	r5
        if (flags & FLAGS_LEFT) {
 8015334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015336:	1c67      	adds	r7, r4, #1
        if (flags & FLAGS_LEFT) {
 8015338:	2b00      	cmp	r3, #0
 801533a:	d006      	beq.n	801534a <_vsnprintf+0x362>
 801533c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801533e:	3d01      	subs	r5, #1
 8015340:	1b2d      	subs	r5, r5, r4
          while (l++ < width) {
 8015342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015344:	197b      	adds	r3, r7, r5
 8015346:	4293      	cmp	r3, r2
 8015348:	d311      	bcc.n	801536e <_vsnprintf+0x386>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 801534a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
        break;
 801534c:	e75b      	b.n	8015206 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 801534e:	0022      	movs	r2, r4
 8015350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015352:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015354:	2020      	movs	r0, #32
 8015356:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8015358:	47a0      	blx	r4
 801535a:	1cab      	adds	r3, r5, #2
 801535c:	9312      	str	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 801535e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015360:	197c      	adds	r4, r7, r5
 8015362:	3501      	adds	r5, #1
 8015364:	429d      	cmp	r5, r3
 8015366:	d3f2      	bcc.n	801534e <_vsnprintf+0x366>
 8015368:	e7db      	b.n	8015322 <_vsnprintf+0x33a>
 801536a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801536c:	e7f5      	b.n	801535a <_vsnprintf+0x372>
            out(' ', buffer, idx++, maxlen);
 801536e:	003a      	movs	r2, r7
 8015370:	1c7c      	adds	r4, r7, #1
 8015372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015374:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015376:	2020      	movs	r0, #32
 8015378:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801537a:	47b0      	blx	r6
 801537c:	0027      	movs	r7, r4
 801537e:	e7e0      	b.n	8015342 <_vsnprintf+0x35a>
        const char* p = va_arg(va, char*);
 8015380:	1d33      	adds	r3, r6, #4
 8015382:	9317      	str	r3, [sp, #92]	; 0x5c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        const char* p = va_arg(va, char*);
 8015386:	6836      	ldr	r6, [r6, #0]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015388:	2b00      	cmp	r3, #0
 801538a:	d101      	bne.n	8015390 <_vsnprintf+0x3a8>
 801538c:	2301      	movs	r3, #1
 801538e:	425b      	negs	r3, r3
 8015390:	0035      	movs	r5, r6
 8015392:	18f3      	adds	r3, r6, r3
  for (s = str; *s && maxsize--; ++s);
 8015394:	782a      	ldrb	r2, [r5, #0]
 8015396:	2a00      	cmp	r2, #0
 8015398:	d001      	beq.n	801539e <_vsnprintf+0x3b6>
 801539a:	42ab      	cmp	r3, r5
 801539c:	d112      	bne.n	80153c4 <_vsnprintf+0x3dc>
        if (flags & FLAGS_PRECISION) {
 801539e:	2380      	movs	r3, #128	; 0x80
 80153a0:	00db      	lsls	r3, r3, #3
 80153a2:	4023      	ands	r3, r4
  return (unsigned int)(s - str);
 80153a4:	1bad      	subs	r5, r5, r6
        if (flags & FLAGS_PRECISION) {
 80153a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d003      	beq.n	80153b4 <_vsnprintf+0x3cc>
          l = (l < precision ? l : precision);
 80153ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153ae:	429d      	cmp	r5, r3
 80153b0:	d900      	bls.n	80153b4 <_vsnprintf+0x3cc>
 80153b2:	001d      	movs	r5, r3
        if (!(flags & FLAGS_LEFT)) {
 80153b4:	2302      	movs	r3, #2
 80153b6:	4023      	ands	r3, r4
 80153b8:	9316      	str	r3, [sp, #88]	; 0x58
 80153ba:	d014      	beq.n	80153e6 <_vsnprintf+0x3fe>
 80153bc:	003c      	movs	r4, r7
 80153be:	9512      	str	r5, [sp, #72]	; 0x48
 80153c0:	0025      	movs	r5, r4
 80153c2:	e01a      	b.n	80153fa <_vsnprintf+0x412>
  for (s = str; *s && maxsize--; ++s);
 80153c4:	3501      	adds	r5, #1
 80153c6:	e7e5      	b.n	8015394 <_vsnprintf+0x3ac>
            out(' ', buffer, idx++, maxlen);
 80153c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153ca:	0022      	movs	r2, r4
 80153cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80153ce:	2020      	movs	r0, #32
 80153d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80153d2:	47a0      	blx	r4
          while (l++ < width) {
 80153d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153d6:	1c5a      	adds	r2, r3, #1
 80153d8:	9212      	str	r2, [sp, #72]	; 0x48
 80153da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153dc:	1b7c      	subs	r4, r7, r5
 80153de:	18e4      	adds	r4, r4, r3
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d8f1      	bhi.n	80153c8 <_vsnprintf+0x3e0>
 80153e4:	e7ec      	b.n	80153c0 <_vsnprintf+0x3d8>
 80153e6:	002b      	movs	r3, r5
 80153e8:	e7f5      	b.n	80153d6 <_vsnprintf+0x3ee>
 80153ea:	930b      	str	r3, [sp, #44]	; 0x2c
          out(*(p++), buffer, idx++, maxlen);
 80153ec:	1c6f      	adds	r7, r5, #1
 80153ee:	002a      	movs	r2, r5
 80153f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153f2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80153f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80153f6:	47a8      	blx	r5
 80153f8:	003d      	movs	r5, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80153fa:	1b33      	subs	r3, r6, r4
 80153fc:	5d58      	ldrb	r0, [r3, r5]
 80153fe:	2800      	cmp	r0, #0
 8015400:	d007      	beq.n	8015412 <_vsnprintf+0x42a>
 8015402:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015404:	2b00      	cmp	r3, #0
 8015406:	d0f1      	beq.n	80153ec <_vsnprintf+0x404>
 8015408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801540a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801540c:	3b01      	subs	r3, #1
 801540e:	2a00      	cmp	r2, #0
 8015410:	d1eb      	bne.n	80153ea <_vsnprintf+0x402>
        if (flags & FLAGS_LEFT) {
 8015412:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015414:	002f      	movs	r7, r5
 8015416:	2b00      	cmp	r3, #0
 8015418:	d109      	bne.n	801542e <_vsnprintf+0x446>
        const char* p = va_arg(va, char*);
 801541a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
        break;
 801541c:	e6f3      	b.n	8015206 <_vsnprintf+0x21e>
            out(' ', buffer, idx++, maxlen);
 801541e:	003a      	movs	r2, r7
 8015420:	1c7c      	adds	r4, r7, #1
 8015422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015424:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015426:	2020      	movs	r0, #32
 8015428:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801542a:	47b0      	blx	r6
 801542c:	0027      	movs	r7, r4
 801542e:	9b12      	ldr	r3, [sp, #72]	; 0x48
          while (l++ < width) {
 8015430:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015432:	1b5b      	subs	r3, r3, r5
 8015434:	19db      	adds	r3, r3, r7
 8015436:	4293      	cmp	r3, r2
 8015438:	d3f1      	bcc.n	801541e <_vsnprintf+0x436>
 801543a:	e7ee      	b.n	801541a <_vsnprintf+0x432>
          base =  8U;
 801543c:	2308      	movs	r3, #8
 801543e:	e6a9      	b.n	8015194 <_vsnprintf+0x1ac>
          base =  2U;
 8015440:	2302      	movs	r3, #2
 8015442:	e6a7      	b.n	8015194 <_vsnprintf+0x1ac>

08015444 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 8015444:	b507      	push	{r0, r1, r2, lr}
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 8015446:	9300      	str	r3, [sp, #0]
 8015448:	0013      	movs	r3, r2
 801544a:	000a      	movs	r2, r1
 801544c:	0001      	movs	r1, r0
 801544e:	4802      	ldr	r0, [pc, #8]	; (8015458 <vsnprintf_+0x14>)
 8015450:	f7ff fdca 	bl	8014fe8 <_vsnprintf>
}
 8015454:	bd0e      	pop	{r1, r2, r3, pc}
 8015456:	46c0      	nop			; (mov r8, r8)
 8015458:	08014d51 	.word	0x08014d51

0801545c <fctvprintf>:
  va_end(va);
  return ret;
}

int fctvprintf(void (*out)(char character, void* arg), void* arg, const char* format, va_list va)
{
 801545c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 801545e:	9103      	str	r1, [sp, #12]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015460:	2101      	movs	r1, #1
  const out_fct_wrap_type out_fct_wrap = { out, arg };
 8015462:	9002      	str	r0, [sp, #8]
  return _vsnprintf(_out_fct, (char*)(uintptr_t)&out_fct_wrap, (size_t)-1, format, va);
 8015464:	9300      	str	r3, [sp, #0]
 8015466:	4804      	ldr	r0, [pc, #16]	; (8015478 <fctvprintf+0x1c>)
 8015468:	0013      	movs	r3, r2
 801546a:	424a      	negs	r2, r1
 801546c:	a902      	add	r1, sp, #8
 801546e:	f7ff fdbb 	bl	8014fe8 <_vsnprintf>
}
 8015472:	b005      	add	sp, #20
 8015474:	bd00      	pop	{pc}
 8015476:	46c0      	nop			; (mov r8, r8)
 8015478:	08014d5b 	.word	0x08014d5b

0801547c <malloc>:
 801547c:	b510      	push	{r4, lr}
 801547e:	4b03      	ldr	r3, [pc, #12]	; (801548c <malloc+0x10>)
 8015480:	0001      	movs	r1, r0
 8015482:	6818      	ldr	r0, [r3, #0]
 8015484:	f7fd fc3c 	bl	8012d00 <_malloc_r>
 8015488:	bd10      	pop	{r4, pc}
 801548a:	46c0      	nop			; (mov r8, r8)
 801548c:	20000008 	.word	0x20000008

08015490 <free>:
 8015490:	b510      	push	{r4, lr}
 8015492:	4b03      	ldr	r3, [pc, #12]	; (80154a0 <free+0x10>)
 8015494:	0001      	movs	r1, r0
 8015496:	6818      	ldr	r0, [r3, #0]
 8015498:	f7fd fbe8 	bl	8012c6c <_free_r>
 801549c:	bd10      	pop	{r4, pc}
 801549e:	46c0      	nop			; (mov r8, r8)
 80154a0:	20000008 	.word	0x20000008

080154a4 <memcpy>:
 80154a4:	2300      	movs	r3, #0
 80154a6:	b510      	push	{r4, lr}
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d100      	bne.n	80154ae <memcpy+0xa>
 80154ac:	bd10      	pop	{r4, pc}
 80154ae:	5ccc      	ldrb	r4, [r1, r3]
 80154b0:	54c4      	strb	r4, [r0, r3]
 80154b2:	3301      	adds	r3, #1
 80154b4:	e7f8      	b.n	80154a8 <memcpy+0x4>

080154b6 <memmove>:
 80154b6:	b510      	push	{r4, lr}
 80154b8:	4288      	cmp	r0, r1
 80154ba:	d902      	bls.n	80154c2 <memmove+0xc>
 80154bc:	188b      	adds	r3, r1, r2
 80154be:	4298      	cmp	r0, r3
 80154c0:	d303      	bcc.n	80154ca <memmove+0x14>
 80154c2:	2300      	movs	r3, #0
 80154c4:	e007      	b.n	80154d6 <memmove+0x20>
 80154c6:	5c8b      	ldrb	r3, [r1, r2]
 80154c8:	5483      	strb	r3, [r0, r2]
 80154ca:	3a01      	subs	r2, #1
 80154cc:	d2fb      	bcs.n	80154c6 <memmove+0x10>
 80154ce:	bd10      	pop	{r4, pc}
 80154d0:	5ccc      	ldrb	r4, [r1, r3]
 80154d2:	54c4      	strb	r4, [r0, r3]
 80154d4:	3301      	adds	r3, #1
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d1fa      	bne.n	80154d0 <memmove+0x1a>
 80154da:	e7f8      	b.n	80154ce <memmove+0x18>

080154dc <_init>:
 80154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154de:	46c0      	nop			; (mov r8, r8)
 80154e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154e2:	bc08      	pop	{r3}
 80154e4:	469e      	mov	lr, r3
 80154e6:	4770      	bx	lr

080154e8 <_fini>:
 80154e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ea:	46c0      	nop			; (mov r8, r8)
 80154ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154ee:	bc08      	pop	{r3}
 80154f0:	469e      	mov	lr, r3
 80154f2:	4770      	bx	lr
